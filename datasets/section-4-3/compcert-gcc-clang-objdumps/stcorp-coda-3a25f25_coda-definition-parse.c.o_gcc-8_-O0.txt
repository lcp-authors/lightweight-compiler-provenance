
../compcert-repos/stcorp-coda-3a25f25/CMakeFiles/coda_static.dir/libcoda/coda-definition-parse.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <xml_element_name>:
       0:	push	{fp}		; (str fp, [sp, #-4]!)
       4:	add	fp, sp, #0
       8:	sub	sp, sp, #20
       c:	str	r0, [fp, #-16]
      10:	ldr	r3, [fp, #-16]
      14:	cmn	r3, #1
      18:	bne	28 <xml_element_name+0x28>
      1c:	movw	r3, #0
      20:	movt	r3, #0
      24:	b	6c <xml_element_name+0x6c>
      28:	movw	r3, #0
      2c:	movt	r3, #0
      30:	ldr	r2, [fp, #-16]
      34:	ldr	r3, [r3, r2, lsl #2]
      38:	str	r3, [fp, #-8]
      3c:	b	4c <xml_element_name+0x4c>
      40:	ldr	r3, [fp, #-8]
      44:	add	r3, r3, #1
      48:	str	r3, [fp, #-8]
      4c:	ldr	r3, [fp, #-8]
      50:	ldrb	r3, [r3]
      54:	cmp	r3, #32
      58:	bne	40 <xml_element_name+0x40>
      5c:	ldr	r3, [fp, #-8]
      60:	add	r3, r3, #1
      64:	str	r3, [fp, #-8]
      68:	ldr	r3, [fp, #-8]
      6c:	mov	r0, r3
      70:	add	sp, fp, #0
      74:	pop	{fp}		; (ldr fp, [sp], #4)
      78:	bx	lr

0000007c <handle_ziparchive_error>:
      7c:	push	{r0, r1, r2, r3}
      80:	str	fp, [sp, #-8]!
      84:	str	lr, [sp, #4]
      88:	add	fp, sp, #4
      8c:	sub	sp, sp, #8
      90:	movw	r1, #0
      94:	movt	r1, #0
      98:	movw	r0, #65136	; 0xfe70
      9c:	movt	r0, #65535	; 0xffff
      a0:	bl	0 <coda_set_error>
      a4:	add	r3, fp, #8
      a8:	str	r3, [fp, #-8]
      ac:	ldr	r1, [fp, #-8]
      b0:	ldr	r0, [fp, #4]
      b4:	bl	0 <coda_add_error_message_vargs>
      b8:	nop	{0}
      bc:	sub	sp, fp, #4
      c0:	ldr	fp, [sp]
      c4:	ldr	lr, [sp, #4]
      c8:	add	sp, sp, #8
      cc:	add	sp, sp, #16
      d0:	bx	lr

000000d4 <is_whitespace>:
      d4:	str	fp, [sp, #-8]!
      d8:	str	lr, [sp, #4]
      dc:	add	fp, sp, #4
      e0:	sub	sp, sp, #16
      e4:	str	r0, [fp, #-16]
      e8:	str	r1, [fp, #-20]	; 0xffffffec
      ec:	ldr	r3, [fp, #-16]
      f0:	cmp	r3, #0
      f4:	bne	118 <is_whitespace+0x44>
      f8:	movw	r3, #0
      fc:	movt	r3, #0
     100:	movw	r2, #290	; 0x122
     104:	movw	r1, #0
     108:	movt	r1, #0
     10c:	movw	r0, #0
     110:	movt	r0, #0
     114:	bl	0 <__assert_fail>
     118:	mov	r3, #0
     11c:	str	r3, [fp, #-8]
     120:	b	198 <is_whitespace+0xc4>
     124:	ldr	r3, [fp, #-8]
     128:	ldr	r2, [fp, #-16]
     12c:	add	r3, r2, r3
     130:	ldrb	r3, [r3]
     134:	cmp	r3, #32
     138:	beq	18c <is_whitespace+0xb8>
     13c:	ldr	r3, [fp, #-8]
     140:	ldr	r2, [fp, #-16]
     144:	add	r3, r2, r3
     148:	ldrb	r3, [r3]
     14c:	cmp	r3, #9
     150:	beq	18c <is_whitespace+0xb8>
     154:	ldr	r3, [fp, #-8]
     158:	ldr	r2, [fp, #-16]
     15c:	add	r3, r2, r3
     160:	ldrb	r3, [r3]
     164:	cmp	r3, #10
     168:	beq	18c <is_whitespace+0xb8>
     16c:	ldr	r3, [fp, #-8]
     170:	ldr	r2, [fp, #-16]
     174:	add	r3, r2, r3
     178:	ldrb	r3, [r3]
     17c:	cmp	r3, #13
     180:	beq	18c <is_whitespace+0xb8>
     184:	mov	r3, #0
     188:	b	1ac <is_whitespace+0xd8>
     18c:	ldr	r3, [fp, #-8]
     190:	add	r3, r3, #1
     194:	str	r3, [fp, #-8]
     198:	ldr	r2, [fp, #-8]
     19c:	ldr	r3, [fp, #-20]	; 0xffffffec
     1a0:	cmp	r2, r3
     1a4:	blt	124 <is_whitespace+0x50>
     1a8:	mov	r3, #1
     1ac:	mov	r0, r3
     1b0:	sub	sp, fp, #4
     1b4:	ldr	fp, [sp]
     1b8:	add	sp, sp, #4
     1bc:	pop	{pc}		; (ldr pc, [sp], #4)

000001c0 <regexp_match_string>:
     1c0:	str	fp, [sp, #-8]!
     1c4:	str	lr, [sp, #4]
     1c8:	add	fp, sp, #4
     1cc:	sub	sp, sp, #40	; 0x28
     1d0:	str	r0, [fp, #-32]	; 0xffffffe0
     1d4:	ldr	r0, [fp, #-32]	; 0xffffffe0
     1d8:	bl	0 <strlen>
     1dc:	mov	r3, r0
     1e0:	str	r3, [fp, #-20]	; 0xffffffec
     1e4:	mov	r3, #0
     1e8:	str	r3, [fp, #-8]
     1ec:	mov	r3, #0
     1f0:	str	r3, [fp, #-12]
     1f4:	b	3a4 <regexp_match_string+0x1e4>
     1f8:	ldr	r3, [fp, #-12]
     1fc:	ldr	r2, [fp, #-32]	; 0xffffffe0
     200:	add	r3, r2, r3
     204:	ldrb	r3, [r3]
     208:	sub	r3, r3, #36	; 0x24
     20c:	cmp	r3, #88	; 0x58
     210:	ldrls	pc, [pc, r3, lsl #2]
     214:	b	388 <regexp_match_string+0x1c8>
     218:	.word	0x0000037c
     21c:	.word	0x00000388
     220:	.word	0x00000388
     224:	.word	0x00000388
     228:	.word	0x0000037c
     22c:	.word	0x0000037c
     230:	.word	0x0000037c
     234:	.word	0x0000037c
     238:	.word	0x00000388
     23c:	.word	0x00000388
     240:	.word	0x0000037c
     244:	.word	0x00000388
     248:	.word	0x00000388
     24c:	.word	0x00000388
     250:	.word	0x00000388
     254:	.word	0x00000388
     258:	.word	0x00000388
     25c:	.word	0x00000388
     260:	.word	0x00000388
     264:	.word	0x00000388
     268:	.word	0x00000388
     26c:	.word	0x00000388
     270:	.word	0x00000388
     274:	.word	0x00000388
     278:	.word	0x00000388
     27c:	.word	0x00000388
     280:	.word	0x00000388
     284:	.word	0x0000037c
     288:	.word	0x00000388
     28c:	.word	0x00000388
     290:	.word	0x00000388
     294:	.word	0x00000388
     298:	.word	0x00000388
     29c:	.word	0x00000388
     2a0:	.word	0x00000388
     2a4:	.word	0x00000388
     2a8:	.word	0x00000388
     2ac:	.word	0x00000388
     2b0:	.word	0x00000388
     2b4:	.word	0x00000388
     2b8:	.word	0x00000388
     2bc:	.word	0x00000388
     2c0:	.word	0x00000388
     2c4:	.word	0x00000388
     2c8:	.word	0x00000388
     2cc:	.word	0x00000388
     2d0:	.word	0x00000388
     2d4:	.word	0x00000388
     2d8:	.word	0x00000388
     2dc:	.word	0x00000388
     2e0:	.word	0x00000388
     2e4:	.word	0x00000388
     2e8:	.word	0x00000388
     2ec:	.word	0x00000388
     2f0:	.word	0x00000388
     2f4:	.word	0x0000037c
     2f8:	.word	0x0000037c
     2fc:	.word	0x00000388
     300:	.word	0x0000037c
     304:	.word	0x00000388
     308:	.word	0x00000388
     30c:	.word	0x00000388
     310:	.word	0x00000388
     314:	.word	0x00000388
     318:	.word	0x00000388
     31c:	.word	0x00000388
     320:	.word	0x00000388
     324:	.word	0x00000388
     328:	.word	0x00000388
     32c:	.word	0x00000388
     330:	.word	0x00000388
     334:	.word	0x00000388
     338:	.word	0x00000388
     33c:	.word	0x00000388
     340:	.word	0x00000388
     344:	.word	0x00000388
     348:	.word	0x00000388
     34c:	.word	0x00000388
     350:	.word	0x00000388
     354:	.word	0x00000388
     358:	.word	0x00000388
     35c:	.word	0x00000388
     360:	.word	0x00000388
     364:	.word	0x00000388
     368:	.word	0x00000388
     36c:	.word	0x00000388
     370:	.word	0x00000388
     374:	.word	0x0000037c
     378:	.word	0x0000037c
     37c:	ldr	r3, [fp, #-8]
     380:	add	r3, r3, #1
     384:	str	r3, [fp, #-8]
     388:	ldr	r3, [fp, #-8]
     38c:	add	r3, r3, #1
     390:	str	r3, [fp, #-8]
     394:	nop	{0}
     398:	ldr	r3, [fp, #-12]
     39c:	add	r3, r3, #1
     3a0:	str	r3, [fp, #-12]
     3a4:	ldr	r2, [fp, #-12]
     3a8:	ldr	r3, [fp, #-20]	; 0xffffffec
     3ac:	cmp	r2, r3
     3b0:	blt	1f8 <regexp_match_string+0x38>
     3b4:	ldr	r3, [fp, #-8]
     3b8:	add	r3, r3, #1
     3bc:	mov	r0, r3
     3c0:	bl	0 <malloc>
     3c4:	mov	r3, r0
     3c8:	str	r3, [fp, #-24]	; 0xffffffe8
     3cc:	ldr	r3, [fp, #-24]	; 0xffffffe8
     3d0:	cmp	r3, #0
     3d4:	bne	408 <regexp_match_string+0x248>
     3d8:	ldr	r3, [fp, #-8]
     3dc:	add	r2, r3, #1
     3e0:	movw	r3, #339	; 0x153
     3e4:	str	r3, [sp]
     3e8:	movw	r3, #0
     3ec:	movt	r3, #0
     3f0:	movw	r1, #0
     3f4:	movt	r1, #0
     3f8:	mvn	r0, #0
     3fc:	bl	0 <coda_set_error>
     400:	mov	r3, #0
     404:	b	624 <regexp_match_string+0x464>
     408:	mov	r3, #0
     40c:	str	r3, [fp, #-16]
     410:	mov	r3, #0
     414:	str	r3, [fp, #-12]
     418:	b	5fc <regexp_match_string+0x43c>
     41c:	ldr	r3, [fp, #-12]
     420:	ldr	r2, [fp, #-32]	; 0xffffffe0
     424:	add	r3, r2, r3
     428:	ldrb	r3, [r3]
     42c:	sub	r3, r3, #36	; 0x24
     430:	cmp	r3, #88	; 0x58
     434:	ldrls	pc, [pc, r3, lsl #2]
     438:	b	5c0 <regexp_match_string+0x400>
     43c:	.word	0x000005a0
     440:	.word	0x000005c0
     444:	.word	0x000005c0
     448:	.word	0x000005c0
     44c:	.word	0x000005a0
     450:	.word	0x000005a0
     454:	.word	0x000005a0
     458:	.word	0x000005a0
     45c:	.word	0x000005c0
     460:	.word	0x000005c0
     464:	.word	0x000005a0
     468:	.word	0x000005c0
     46c:	.word	0x000005c0
     470:	.word	0x000005c0
     474:	.word	0x000005c0
     478:	.word	0x000005c0
     47c:	.word	0x000005c0
     480:	.word	0x000005c0
     484:	.word	0x000005c0
     488:	.word	0x000005c0
     48c:	.word	0x000005c0
     490:	.word	0x000005c0
     494:	.word	0x000005c0
     498:	.word	0x000005c0
     49c:	.word	0x000005c0
     4a0:	.word	0x000005c0
     4a4:	.word	0x000005c0
     4a8:	.word	0x000005a0
     4ac:	.word	0x000005c0
     4b0:	.word	0x000005c0
     4b4:	.word	0x000005c0
     4b8:	.word	0x000005c0
     4bc:	.word	0x000005c0
     4c0:	.word	0x000005c0
     4c4:	.word	0x000005c0
     4c8:	.word	0x000005c0
     4cc:	.word	0x000005c0
     4d0:	.word	0x000005c0
     4d4:	.word	0x000005c0
     4d8:	.word	0x000005c0
     4dc:	.word	0x000005c0
     4e0:	.word	0x000005c0
     4e4:	.word	0x000005c0
     4e8:	.word	0x000005c0
     4ec:	.word	0x000005c0
     4f0:	.word	0x000005c0
     4f4:	.word	0x000005c0
     4f8:	.word	0x000005c0
     4fc:	.word	0x000005c0
     500:	.word	0x000005c0
     504:	.word	0x000005c0
     508:	.word	0x000005c0
     50c:	.word	0x000005c0
     510:	.word	0x000005c0
     514:	.word	0x000005c0
     518:	.word	0x000005a0
     51c:	.word	0x000005a0
     520:	.word	0x000005c0
     524:	.word	0x000005a0
     528:	.word	0x000005c0
     52c:	.word	0x000005c0
     530:	.word	0x000005c0
     534:	.word	0x000005c0
     538:	.word	0x000005c0
     53c:	.word	0x000005c0
     540:	.word	0x000005c0
     544:	.word	0x000005c0
     548:	.word	0x000005c0
     54c:	.word	0x000005c0
     550:	.word	0x000005c0
     554:	.word	0x000005c0
     558:	.word	0x000005c0
     55c:	.word	0x000005c0
     560:	.word	0x000005c0
     564:	.word	0x000005c0
     568:	.word	0x000005c0
     56c:	.word	0x000005c0
     570:	.word	0x000005c0
     574:	.word	0x000005c0
     578:	.word	0x000005c0
     57c:	.word	0x000005c0
     580:	.word	0x000005c0
     584:	.word	0x000005c0
     588:	.word	0x000005c0
     58c:	.word	0x000005c0
     590:	.word	0x000005c0
     594:	.word	0x000005c0
     598:	.word	0x000005a0
     59c:	.word	0x000005a0
     5a0:	ldr	r3, [fp, #-16]
     5a4:	add	r2, r3, #1
     5a8:	str	r2, [fp, #-16]
     5ac:	mov	r2, r3
     5b0:	ldr	r3, [fp, #-24]	; 0xffffffe8
     5b4:	add	r3, r3, r2
     5b8:	mov	r2, #92	; 0x5c
     5bc:	strb	r2, [r3]
     5c0:	ldr	r3, [fp, #-12]
     5c4:	ldr	r2, [fp, #-32]	; 0xffffffe0
     5c8:	add	r2, r2, r3
     5cc:	ldr	r3, [fp, #-16]
     5d0:	add	r1, r3, #1
     5d4:	str	r1, [fp, #-16]
     5d8:	mov	r1, r3
     5dc:	ldr	r3, [fp, #-24]	; 0xffffffe8
     5e0:	add	r3, r3, r1
     5e4:	ldrb	r2, [r2]
     5e8:	strb	r2, [r3]
     5ec:	nop	{0}
     5f0:	ldr	r3, [fp, #-12]
     5f4:	add	r3, r3, #1
     5f8:	str	r3, [fp, #-12]
     5fc:	ldr	r2, [fp, #-12]
     600:	ldr	r3, [fp, #-20]	; 0xffffffec
     604:	cmp	r2, r3
     608:	blt	41c <regexp_match_string+0x25c>
     60c:	ldr	r3, [fp, #-16]
     610:	ldr	r2, [fp, #-24]	; 0xffffffe8
     614:	add	r3, r2, r3
     618:	mov	r2, #0
     61c:	strb	r2, [r3]
     620:	ldr	r3, [fp, #-24]	; 0xffffffe8
     624:	mov	r0, r3
     628:	sub	sp, fp, #4
     62c:	ldr	fp, [sp]
     630:	add	sp, sp, #4
     634:	pop	{pc}		; (ldr pc, [sp], #4)

00000638 <escaped_string_length>:
     638:	push	{fp}		; (str fp, [sp, #-4]!)
     63c:	add	fp, sp, #0
     640:	sub	sp, sp, #20
     644:	str	r0, [fp, #-16]
     648:	ldr	r3, [fp, #-16]
     64c:	cmp	r3, #0
     650:	bne	65c <escaped_string_length+0x24>
     654:	mov	r3, #0
     658:	b	834 <escaped_string_length+0x1fc>
     65c:	mov	r3, #0
     660:	str	r3, [fp, #-8]
     664:	mov	r3, #0
     668:	str	r3, [fp, #-12]
     66c:	b	818 <escaped_string_length+0x1e0>
     670:	ldr	r3, [fp, #-8]
     674:	ldr	r2, [fp, #-16]
     678:	add	r3, r2, r3
     67c:	ldrb	r3, [r3]
     680:	cmp	r3, #92	; 0x5c
     684:	bne	800 <escaped_string_length+0x1c8>
     688:	ldr	r3, [fp, #-8]
     68c:	add	r3, r3, #1
     690:	str	r3, [fp, #-8]
     694:	ldr	r3, [fp, #-8]
     698:	ldr	r2, [fp, #-16]
     69c:	add	r3, r2, r3
     6a0:	ldrb	r3, [r3]
     6a4:	sub	r3, r3, #92	; 0x5c
     6a8:	cmp	r3, #26
     6ac:	ldrls	pc, [pc, r3, lsl #2]
     6b0:	b	730 <escaped_string_length+0xf8>
     6b4:	.word	0x00000720
     6b8:	.word	0x00000730
     6bc:	.word	0x00000730
     6c0:	.word	0x00000730
     6c4:	.word	0x00000730
     6c8:	.word	0x00000720
     6cc:	.word	0x00000720
     6d0:	.word	0x00000730
     6d4:	.word	0x00000730
     6d8:	.word	0x00000720
     6dc:	.word	0x00000720
     6e0:	.word	0x00000730
     6e4:	.word	0x00000730
     6e8:	.word	0x00000730
     6ec:	.word	0x00000730
     6f0:	.word	0x00000730
     6f4:	.word	0x00000730
     6f8:	.word	0x00000730
     6fc:	.word	0x00000720
     700:	.word	0x00000730
     704:	.word	0x00000730
     708:	.word	0x00000730
     70c:	.word	0x00000720
     710:	.word	0x00000730
     714:	.word	0x00000720
     718:	.word	0x00000730
     71c:	.word	0x00000720
     720:	ldr	r3, [fp, #-12]
     724:	add	r3, r3, #1
     728:	str	r3, [fp, #-12]
     72c:	b	80c <escaped_string_length+0x1d4>
     730:	ldr	r3, [fp, #-8]
     734:	ldr	r2, [fp, #-16]
     738:	add	r3, r2, r3
     73c:	ldrb	r3, [r3]
     740:	cmp	r3, #47	; 0x2f
     744:	bls	760 <escaped_string_length+0x128>
     748:	ldr	r3, [fp, #-8]
     74c:	ldr	r2, [fp, #-16]
     750:	add	r3, r2, r3
     754:	ldrb	r3, [r3]
     758:	cmp	r3, #57	; 0x39
     75c:	bls	768 <escaped_string_length+0x130>
     760:	mvn	r3, #0
     764:	b	834 <escaped_string_length+0x1fc>
     768:	ldr	r3, [fp, #-8]
     76c:	add	r3, r3, #1
     770:	ldr	r2, [fp, #-16]
     774:	add	r3, r2, r3
     778:	ldrb	r3, [r3]
     77c:	cmp	r3, #47	; 0x2f
     780:	bls	7f0 <escaped_string_length+0x1b8>
     784:	ldr	r3, [fp, #-8]
     788:	add	r3, r3, #1
     78c:	ldr	r2, [fp, #-16]
     790:	add	r3, r2, r3
     794:	ldrb	r3, [r3]
     798:	cmp	r3, #57	; 0x39
     79c:	bhi	7f0 <escaped_string_length+0x1b8>
     7a0:	ldr	r3, [fp, #-8]
     7a4:	add	r3, r3, #1
     7a8:	str	r3, [fp, #-8]
     7ac:	ldr	r3, [fp, #-8]
     7b0:	add	r3, r3, #1
     7b4:	ldr	r2, [fp, #-16]
     7b8:	add	r3, r2, r3
     7bc:	ldrb	r3, [r3]
     7c0:	cmp	r3, #47	; 0x2f
     7c4:	bls	7f0 <escaped_string_length+0x1b8>
     7c8:	ldr	r3, [fp, #-8]
     7cc:	add	r3, r3, #1
     7d0:	ldr	r2, [fp, #-16]
     7d4:	add	r3, r2, r3
     7d8:	ldrb	r3, [r3]
     7dc:	cmp	r3, #57	; 0x39
     7e0:	bhi	7f0 <escaped_string_length+0x1b8>
     7e4:	ldr	r3, [fp, #-8]
     7e8:	add	r3, r3, #1
     7ec:	str	r3, [fp, #-8]
     7f0:	ldr	r3, [fp, #-12]
     7f4:	add	r3, r3, #1
     7f8:	str	r3, [fp, #-12]
     7fc:	b	80c <escaped_string_length+0x1d4>
     800:	ldr	r3, [fp, #-12]
     804:	add	r3, r3, #1
     808:	str	r3, [fp, #-12]
     80c:	ldr	r3, [fp, #-8]
     810:	add	r3, r3, #1
     814:	str	r3, [fp, #-8]
     818:	ldr	r3, [fp, #-8]
     81c:	ldr	r2, [fp, #-16]
     820:	add	r3, r2, r3
     824:	ldrb	r3, [r3]
     828:	cmp	r3, #0
     82c:	bne	670 <escaped_string_length+0x38>
     830:	ldr	r3, [fp, #-12]
     834:	mov	r0, r3
     838:	add	sp, fp, #0
     83c:	pop	{fp}		; (ldr fp, [sp], #4)
     840:	bx	lr

00000844 <decode_escaped_string>:
     844:	push	{fp}		; (str fp, [sp, #-4]!)
     848:	add	fp, sp, #0
     84c:	sub	sp, sp, #20
     850:	str	r0, [fp, #-16]
     854:	ldr	r3, [fp, #-16]
     858:	cmp	r3, #0
     85c:	bne	868 <decode_escaped_string+0x24>
     860:	mov	r3, #0
     864:	b	c60 <decode_escaped_string+0x41c>
     868:	mov	r3, #0
     86c:	str	r3, [fp, #-8]
     870:	mov	r3, #0
     874:	str	r3, [fp, #-12]
     878:	b	c30 <decode_escaped_string+0x3ec>
     87c:	ldr	r3, [fp, #-8]
     880:	ldr	r2, [fp, #-16]
     884:	add	r3, r2, r3
     888:	ldrb	r3, [r3]
     88c:	cmp	r3, #92	; 0x5c
     890:	bne	bf8 <decode_escaped_string+0x3b4>
     894:	ldr	r3, [fp, #-8]
     898:	add	r3, r3, #1
     89c:	str	r3, [fp, #-8]
     8a0:	ldr	r3, [fp, #-8]
     8a4:	ldr	r2, [fp, #-16]
     8a8:	add	r3, r2, r3
     8ac:	ldrb	r3, [r3]
     8b0:	sub	r3, r3, #92	; 0x5c
     8b4:	cmp	r3, #26
     8b8:	ldrls	pc, [pc, r3, lsl #2]
     8bc:	b	a70 <decode_escaped_string+0x22c>
     8c0:	.word	0x00000a4c
     8c4:	.word	0x00000a70
     8c8:	.word	0x00000a70
     8cc:	.word	0x00000a70
     8d0:	.word	0x00000a70
     8d4:	.word	0x00000950
     8d8:	.word	0x00000974
     8dc:	.word	0x00000a70
     8e0:	.word	0x00000a70
     8e4:	.word	0x0000092c
     8e8:	.word	0x00000998
     8ec:	.word	0x00000a70
     8f0:	.word	0x00000a70
     8f4:	.word	0x00000a70
     8f8:	.word	0x00000a70
     8fc:	.word	0x00000a70
     900:	.word	0x00000a70
     904:	.word	0x00000a70
     908:	.word	0x000009bc
     90c:	.word	0x00000a70
     910:	.word	0x00000a70
     914:	.word	0x00000a70
     918:	.word	0x000009e0
     91c:	.word	0x00000a70
     920:	.word	0x00000a04
     924:	.word	0x00000a70
     928:	.word	0x00000a28
     92c:	ldr	r3, [fp, #-12]
     930:	add	r2, r3, #1
     934:	str	r2, [fp, #-12]
     938:	mov	r2, r3
     93c:	ldr	r3, [fp, #-16]
     940:	add	r3, r3, r2
     944:	mov	r2, #27
     948:	strb	r2, [r3]
     94c:	b	c24 <decode_escaped_string+0x3e0>
     950:	ldr	r3, [fp, #-12]
     954:	add	r2, r3, #1
     958:	str	r2, [fp, #-12]
     95c:	mov	r2, r3
     960:	ldr	r3, [fp, #-16]
     964:	add	r3, r3, r2
     968:	mov	r2, #7
     96c:	strb	r2, [r3]
     970:	b	c24 <decode_escaped_string+0x3e0>
     974:	ldr	r3, [fp, #-12]
     978:	add	r2, r3, #1
     97c:	str	r2, [fp, #-12]
     980:	mov	r2, r3
     984:	ldr	r3, [fp, #-16]
     988:	add	r3, r3, r2
     98c:	mov	r2, #8
     990:	strb	r2, [r3]
     994:	b	c24 <decode_escaped_string+0x3e0>
     998:	ldr	r3, [fp, #-12]
     99c:	add	r2, r3, #1
     9a0:	str	r2, [fp, #-12]
     9a4:	mov	r2, r3
     9a8:	ldr	r3, [fp, #-16]
     9ac:	add	r3, r3, r2
     9b0:	mov	r2, #12
     9b4:	strb	r2, [r3]
     9b8:	b	c24 <decode_escaped_string+0x3e0>
     9bc:	ldr	r3, [fp, #-12]
     9c0:	add	r2, r3, #1
     9c4:	str	r2, [fp, #-12]
     9c8:	mov	r2, r3
     9cc:	ldr	r3, [fp, #-16]
     9d0:	add	r3, r3, r2
     9d4:	mov	r2, #10
     9d8:	strb	r2, [r3]
     9dc:	b	c24 <decode_escaped_string+0x3e0>
     9e0:	ldr	r3, [fp, #-12]
     9e4:	add	r2, r3, #1
     9e8:	str	r2, [fp, #-12]
     9ec:	mov	r2, r3
     9f0:	ldr	r3, [fp, #-16]
     9f4:	add	r3, r3, r2
     9f8:	mov	r2, #13
     9fc:	strb	r2, [r3]
     a00:	b	c24 <decode_escaped_string+0x3e0>
     a04:	ldr	r3, [fp, #-12]
     a08:	add	r2, r3, #1
     a0c:	str	r2, [fp, #-12]
     a10:	mov	r2, r3
     a14:	ldr	r3, [fp, #-16]
     a18:	add	r3, r3, r2
     a1c:	mov	r2, #9
     a20:	strb	r2, [r3]
     a24:	b	c24 <decode_escaped_string+0x3e0>
     a28:	ldr	r3, [fp, #-12]
     a2c:	add	r2, r3, #1
     a30:	str	r2, [fp, #-12]
     a34:	mov	r2, r3
     a38:	ldr	r3, [fp, #-16]
     a3c:	add	r3, r3, r2
     a40:	mov	r2, #11
     a44:	strb	r2, [r3]
     a48:	b	c24 <decode_escaped_string+0x3e0>
     a4c:	ldr	r3, [fp, #-12]
     a50:	add	r2, r3, #1
     a54:	str	r2, [fp, #-12]
     a58:	mov	r2, r3
     a5c:	ldr	r3, [fp, #-16]
     a60:	add	r3, r3, r2
     a64:	mov	r2, #92	; 0x5c
     a68:	strb	r2, [r3]
     a6c:	b	c24 <decode_escaped_string+0x3e0>
     a70:	ldr	r3, [fp, #-8]
     a74:	ldr	r2, [fp, #-16]
     a78:	add	r3, r2, r3
     a7c:	ldrb	r3, [r3]
     a80:	cmp	r3, #47	; 0x2f
     a84:	bls	aa0 <decode_escaped_string+0x25c>
     a88:	ldr	r3, [fp, #-8]
     a8c:	ldr	r2, [fp, #-16]
     a90:	add	r3, r2, r3
     a94:	ldrb	r3, [r3]
     a98:	cmp	r3, #57	; 0x39
     a9c:	bls	aa8 <decode_escaped_string+0x264>
     aa0:	mvn	r3, #0
     aa4:	b	c60 <decode_escaped_string+0x41c>
     aa8:	ldr	r3, [fp, #-8]
     aac:	ldr	r2, [fp, #-16]
     ab0:	add	r3, r2, r3
     ab4:	ldrb	r2, [r3]
     ab8:	ldr	r3, [fp, #-12]
     abc:	ldr	r1, [fp, #-16]
     ac0:	add	r3, r1, r3
     ac4:	sub	r2, r2, #48	; 0x30
     ac8:	uxtb	r2, r2
     acc:	strb	r2, [r3]
     ad0:	ldr	r3, [fp, #-8]
     ad4:	add	r3, r3, #1
     ad8:	ldr	r2, [fp, #-16]
     adc:	add	r3, r2, r3
     ae0:	ldrb	r3, [r3]
     ae4:	cmp	r3, #47	; 0x2f
     ae8:	bls	be8 <decode_escaped_string+0x3a4>
     aec:	ldr	r3, [fp, #-8]
     af0:	add	r3, r3, #1
     af4:	ldr	r2, [fp, #-16]
     af8:	add	r3, r2, r3
     afc:	ldrb	r3, [r3]
     b00:	cmp	r3, #57	; 0x39
     b04:	bhi	be8 <decode_escaped_string+0x3a4>
     b08:	ldr	r3, [fp, #-8]
     b0c:	add	r3, r3, #1
     b10:	str	r3, [fp, #-8]
     b14:	ldr	r3, [fp, #-12]
     b18:	ldr	r2, [fp, #-16]
     b1c:	add	r3, r2, r3
     b20:	ldrb	r3, [r3]
     b24:	lsl	r3, r3, #3
     b28:	uxtb	r2, r3
     b2c:	ldr	r3, [fp, #-8]
     b30:	ldr	r1, [fp, #-16]
     b34:	add	r3, r1, r3
     b38:	ldrb	r3, [r3]
     b3c:	add	r3, r2, r3
     b40:	uxtb	r2, r3
     b44:	ldr	r3, [fp, #-12]
     b48:	ldr	r1, [fp, #-16]
     b4c:	add	r3, r1, r3
     b50:	sub	r2, r2, #48	; 0x30
     b54:	uxtb	r2, r2
     b58:	strb	r2, [r3]
     b5c:	ldr	r3, [fp, #-8]
     b60:	add	r3, r3, #1
     b64:	ldr	r2, [fp, #-16]
     b68:	add	r3, r2, r3
     b6c:	ldrb	r3, [r3]
     b70:	cmp	r3, #47	; 0x2f
     b74:	bls	be8 <decode_escaped_string+0x3a4>
     b78:	ldr	r3, [fp, #-8]
     b7c:	add	r3, r3, #1
     b80:	ldr	r2, [fp, #-16]
     b84:	add	r3, r2, r3
     b88:	ldrb	r3, [r3]
     b8c:	cmp	r3, #57	; 0x39
     b90:	bhi	be8 <decode_escaped_string+0x3a4>
     b94:	ldr	r3, [fp, #-8]
     b98:	add	r3, r3, #1
     b9c:	str	r3, [fp, #-8]
     ba0:	ldr	r3, [fp, #-12]
     ba4:	ldr	r2, [fp, #-16]
     ba8:	add	r3, r2, r3
     bac:	ldrb	r3, [r3]
     bb0:	lsl	r3, r3, #3
     bb4:	uxtb	r2, r3
     bb8:	ldr	r3, [fp, #-8]
     bbc:	ldr	r1, [fp, #-16]
     bc0:	add	r3, r1, r3
     bc4:	ldrb	r3, [r3]
     bc8:	add	r3, r2, r3
     bcc:	uxtb	r2, r3
     bd0:	ldr	r3, [fp, #-12]
     bd4:	ldr	r1, [fp, #-16]
     bd8:	add	r3, r1, r3
     bdc:	sub	r2, r2, #48	; 0x30
     be0:	uxtb	r2, r2
     be4:	strb	r2, [r3]
     be8:	ldr	r3, [fp, #-12]
     bec:	add	r3, r3, #1
     bf0:	str	r3, [fp, #-12]
     bf4:	b	c24 <decode_escaped_string+0x3e0>
     bf8:	ldr	r3, [fp, #-8]
     bfc:	ldr	r2, [fp, #-16]
     c00:	add	r2, r2, r3
     c04:	ldr	r3, [fp, #-12]
     c08:	add	r1, r3, #1
     c0c:	str	r1, [fp, #-12]
     c10:	mov	r1, r3
     c14:	ldr	r3, [fp, #-16]
     c18:	add	r3, r3, r1
     c1c:	ldrb	r2, [r2]
     c20:	strb	r2, [r3]
     c24:	ldr	r3, [fp, #-8]
     c28:	add	r3, r3, #1
     c2c:	str	r3, [fp, #-8]
     c30:	ldr	r3, [fp, #-8]
     c34:	ldr	r2, [fp, #-16]
     c38:	add	r3, r2, r3
     c3c:	ldrb	r3, [r3]
     c40:	cmp	r3, #0
     c44:	bne	87c <decode_escaped_string+0x38>
     c48:	ldr	r3, [fp, #-12]
     c4c:	ldr	r2, [fp, #-16]
     c50:	add	r3, r2, r3
     c54:	mov	r2, #0
     c58:	strb	r2, [r3]
     c5c:	ldr	r3, [fp, #-12]
     c60:	mov	r0, r3
     c64:	add	sp, fp, #0
     c68:	pop	{fp}		; (ldr fp, [sp], #4)
     c6c:	bx	lr

00000c70 <decode_xml_string>:
     c70:	str	fp, [sp, #-8]!
     c74:	str	lr, [sp, #4]
     c78:	add	fp, sp, #4
     c7c:	sub	sp, sp, #16
     c80:	str	r0, [fp, #-16]
     c84:	ldr	r3, [fp, #-16]
     c88:	cmp	r3, #0
     c8c:	bne	c98 <decode_xml_string+0x28>
     c90:	mov	r3, #0
     c94:	b	f48 <decode_xml_string+0x2d8>
     c98:	mov	r3, #0
     c9c:	str	r3, [fp, #-8]
     ca0:	mov	r3, #0
     ca4:	str	r3, [fp, #-12]
     ca8:	b	f18 <decode_xml_string+0x2a8>
     cac:	ldr	r3, [fp, #-8]
     cb0:	ldr	r2, [fp, #-16]
     cb4:	add	r3, r2, r3
     cb8:	ldrb	r3, [r3]
     cbc:	cmp	r3, #38	; 0x26
     cc0:	bne	ee0 <decode_xml_string+0x270>
     cc4:	ldr	r3, [fp, #-8]
     cc8:	add	r3, r3, #1
     ccc:	ldr	r2, [fp, #-16]
     cd0:	add	r3, r2, r3
     cd4:	mov	r2, #4
     cd8:	movw	r1, #0
     cdc:	movt	r1, #0
     ce0:	mov	r0, r3
     ce4:	bl	0 <strncmp>
     ce8:	mov	r3, r0
     cec:	cmp	r3, #0
     cf0:	bne	d24 <decode_xml_string+0xb4>
     cf4:	ldr	r3, [fp, #-12]
     cf8:	add	r2, r3, #1
     cfc:	str	r2, [fp, #-12]
     d00:	mov	r2, r3
     d04:	ldr	r3, [fp, #-16]
     d08:	add	r3, r3, r2
     d0c:	mov	r2, #38	; 0x26
     d10:	strb	r2, [r3]
     d14:	ldr	r3, [fp, #-8]
     d18:	add	r3, r3, #5
     d1c:	str	r3, [fp, #-8]
     d20:	b	f18 <decode_xml_string+0x2a8>
     d24:	ldr	r3, [fp, #-8]
     d28:	add	r3, r3, #1
     d2c:	ldr	r2, [fp, #-16]
     d30:	add	r3, r2, r3
     d34:	mov	r2, #5
     d38:	movw	r1, #0
     d3c:	movt	r1, #0
     d40:	mov	r0, r3
     d44:	bl	0 <strncmp>
     d48:	mov	r3, r0
     d4c:	cmp	r3, #0
     d50:	bne	d84 <decode_xml_string+0x114>
     d54:	ldr	r3, [fp, #-12]
     d58:	add	r2, r3, #1
     d5c:	str	r2, [fp, #-12]
     d60:	mov	r2, r3
     d64:	ldr	r3, [fp, #-16]
     d68:	add	r3, r3, r2
     d6c:	mov	r2, #39	; 0x27
     d70:	strb	r2, [r3]
     d74:	ldr	r3, [fp, #-8]
     d78:	add	r3, r3, #6
     d7c:	str	r3, [fp, #-8]
     d80:	b	f18 <decode_xml_string+0x2a8>
     d84:	ldr	r3, [fp, #-8]
     d88:	add	r3, r3, #1
     d8c:	ldr	r2, [fp, #-16]
     d90:	add	r3, r2, r3
     d94:	mov	r2, #3
     d98:	movw	r1, #0
     d9c:	movt	r1, #0
     da0:	mov	r0, r3
     da4:	bl	0 <strncmp>
     da8:	mov	r3, r0
     dac:	cmp	r3, #0
     db0:	bne	de4 <decode_xml_string+0x174>
     db4:	ldr	r3, [fp, #-12]
     db8:	add	r2, r3, #1
     dbc:	str	r2, [fp, #-12]
     dc0:	mov	r2, r3
     dc4:	ldr	r3, [fp, #-16]
     dc8:	add	r3, r3, r2
     dcc:	mov	r2, #60	; 0x3c
     dd0:	strb	r2, [r3]
     dd4:	ldr	r3, [fp, #-8]
     dd8:	add	r3, r3, #4
     ddc:	str	r3, [fp, #-8]
     de0:	b	f18 <decode_xml_string+0x2a8>
     de4:	ldr	r3, [fp, #-8]
     de8:	add	r3, r3, #1
     dec:	ldr	r2, [fp, #-16]
     df0:	add	r3, r2, r3
     df4:	mov	r2, #3
     df8:	movw	r1, #0
     dfc:	movt	r1, #0
     e00:	mov	r0, r3
     e04:	bl	0 <strncmp>
     e08:	mov	r3, r0
     e0c:	cmp	r3, #0
     e10:	bne	e44 <decode_xml_string+0x1d4>
     e14:	ldr	r3, [fp, #-12]
     e18:	add	r2, r3, #1
     e1c:	str	r2, [fp, #-12]
     e20:	mov	r2, r3
     e24:	ldr	r3, [fp, #-16]
     e28:	add	r3, r3, r2
     e2c:	mov	r2, #60	; 0x3c
     e30:	strb	r2, [r3]
     e34:	ldr	r3, [fp, #-8]
     e38:	add	r3, r3, #4
     e3c:	str	r3, [fp, #-8]
     e40:	b	f18 <decode_xml_string+0x2a8>
     e44:	ldr	r3, [fp, #-8]
     e48:	add	r3, r3, #1
     e4c:	ldr	r2, [fp, #-16]
     e50:	add	r3, r2, r3
     e54:	mov	r2, #5
     e58:	movw	r1, #0
     e5c:	movt	r1, #0
     e60:	mov	r0, r3
     e64:	bl	0 <strncmp>
     e68:	mov	r3, r0
     e6c:	cmp	r3, #0
     e70:	bne	ea4 <decode_xml_string+0x234>
     e74:	ldr	r3, [fp, #-12]
     e78:	add	r2, r3, #1
     e7c:	str	r2, [fp, #-12]
     e80:	mov	r2, r3
     e84:	ldr	r3, [fp, #-16]
     e88:	add	r3, r3, r2
     e8c:	mov	r2, #34	; 0x22
     e90:	strb	r2, [r3]
     e94:	ldr	r3, [fp, #-8]
     e98:	add	r3, r3, #6
     e9c:	str	r3, [fp, #-8]
     ea0:	b	f18 <decode_xml_string+0x2a8>
     ea4:	ldr	r3, [fp, #-8]
     ea8:	ldr	r2, [fp, #-16]
     eac:	add	r2, r2, r3
     eb0:	ldr	r3, [fp, #-12]
     eb4:	add	r1, r3, #1
     eb8:	str	r1, [fp, #-12]
     ebc:	mov	r1, r3
     ec0:	ldr	r3, [fp, #-16]
     ec4:	add	r3, r3, r1
     ec8:	ldrb	r2, [r2]
     ecc:	strb	r2, [r3]
     ed0:	ldr	r3, [fp, #-8]
     ed4:	add	r3, r3, #1
     ed8:	str	r3, [fp, #-8]
     edc:	b	f18 <decode_xml_string+0x2a8>
     ee0:	ldr	r3, [fp, #-8]
     ee4:	ldr	r2, [fp, #-16]
     ee8:	add	r2, r2, r3
     eec:	ldr	r3, [fp, #-12]
     ef0:	add	r1, r3, #1
     ef4:	str	r1, [fp, #-12]
     ef8:	mov	r1, r3
     efc:	ldr	r3, [fp, #-16]
     f00:	add	r3, r3, r1
     f04:	ldrb	r2, [r2]
     f08:	strb	r2, [r3]
     f0c:	ldr	r3, [fp, #-8]
     f10:	add	r3, r3, #1
     f14:	str	r3, [fp, #-8]
     f18:	ldr	r3, [fp, #-8]
     f1c:	ldr	r2, [fp, #-16]
     f20:	add	r3, r2, r3
     f24:	ldrb	r3, [r3]
     f28:	cmp	r3, #0
     f2c:	bne	cac <decode_xml_string+0x3c>
     f30:	ldr	r3, [fp, #-12]
     f34:	ldr	r2, [fp, #-16]
     f38:	add	r3, r2, r3
     f3c:	mov	r2, #0
     f40:	strb	r2, [r3]
     f44:	ldr	r3, [fp, #-12]
     f48:	mov	r0, r3
     f4c:	sub	sp, fp, #4
     f50:	ldr	fp, [sp]
     f54:	add	sp, sp, #4
     f58:	pop	{pc}		; (ldr pc, [sp], #4)

00000f5c <get_attribute_value>:
     f5c:	str	fp, [sp, #-8]!
     f60:	str	lr, [sp, #4]
     f64:	add	fp, sp, #4
     f68:	sub	sp, sp, #8
     f6c:	str	r0, [fp, #-8]
     f70:	str	r1, [fp, #-12]
     f74:	b	fb0 <get_attribute_value+0x54>
     f78:	ldr	r3, [fp, #-8]
     f7c:	ldr	r3, [r3]
     f80:	ldr	r1, [fp, #-12]
     f84:	mov	r0, r3
     f88:	bl	0 <strcmp>
     f8c:	mov	r3, r0
     f90:	cmp	r3, #0
     f94:	bne	fa4 <get_attribute_value+0x48>
     f98:	ldr	r3, [fp, #-8]
     f9c:	ldr	r3, [r3, #4]
     fa0:	b	fc4 <get_attribute_value+0x68>
     fa4:	ldr	r3, [fp, #-8]
     fa8:	add	r3, r3, #8
     fac:	str	r3, [fp, #-8]
     fb0:	ldr	r3, [fp, #-8]
     fb4:	ldr	r3, [r3]
     fb8:	cmp	r3, #0
     fbc:	bne	f78 <get_attribute_value+0x1c>
     fc0:	mov	r3, #0
     fc4:	mov	r0, r3
     fc8:	sub	sp, fp, #4
     fcc:	ldr	fp, [sp]
     fd0:	add	sp, sp, #4
     fd4:	pop	{pc}		; (ldr pc, [sp], #4)

00000fd8 <get_mandatory_attribute_value>:
     fd8:	str	fp, [sp, #-8]!
     fdc:	str	lr, [sp, #4]
     fe0:	add	fp, sp, #4
     fe4:	sub	sp, sp, #24
     fe8:	str	r0, [fp, #-16]
     fec:	str	r1, [fp, #-20]	; 0xffffffec
     ff0:	str	r2, [fp, #-24]	; 0xffffffe8
     ff4:	ldr	r1, [fp, #-20]	; 0xffffffec
     ff8:	ldr	r0, [fp, #-16]
     ffc:	bl	f5c <get_attribute_value>
    1000:	str	r0, [fp, #-8]
    1004:	ldr	r3, [fp, #-8]
    1008:	cmp	r3, #0
    100c:	bne	1034 <get_mandatory_attribute_value+0x5c>
    1010:	ldr	r0, [fp, #-24]	; 0xffffffe8
    1014:	bl	0 <xml_element_name>
    1018:	mov	r3, r0
    101c:	ldr	r2, [fp, #-20]	; 0xffffffec
    1020:	movw	r1, #0
    1024:	movt	r1, #0
    1028:	movw	r0, #65136	; 0xfe70
    102c:	movt	r0, #65535	; 0xffff
    1030:	bl	0 <coda_set_error>
    1034:	ldr	r3, [fp, #-8]
    1038:	mov	r0, r3
    103c:	sub	sp, fp, #4
    1040:	ldr	fp, [sp]
    1044:	add	sp, sp, #4
    1048:	pop	{pc}		; (ldr pc, [sp], #4)

0000104c <handle_name_attribute_for_type>:
    104c:	str	fp, [sp, #-8]!
    1050:	str	lr, [sp, #4]
    1054:	add	fp, sp, #4
    1058:	sub	sp, sp, #16
    105c:	str	r0, [fp, #-16]
    1060:	str	r1, [fp, #-20]	; 0xffffffec
    1064:	ldr	r3, [fp, #-16]
    1068:	ldr	r3, [r3]
    106c:	ldr	r3, [r3, #396]	; 0x18c
    1070:	ldr	r3, [r3, #396]	; 0x18c
    1074:	cmp	r3, #0
    1078:	bne	1128 <handle_name_attribute_for_type+0xdc>
    107c:	ldr	r3, [fp, #-16]
    1080:	ldr	r3, [r3]
    1084:	ldr	r3, [r3]
    1088:	mov	r2, r3
    108c:	movw	r1, #0
    1090:	movt	r1, #0
    1094:	ldr	r0, [fp, #-20]	; 0xffffffec
    1098:	bl	fd8 <get_mandatory_attribute_value>
    109c:	str	r0, [fp, #-8]
    10a0:	ldr	r3, [fp, #-8]
    10a4:	cmp	r3, #0
    10a8:	bne	10b4 <handle_name_attribute_for_type+0x68>
    10ac:	mvn	r3, #0
    10b0:	b	1168 <handle_name_attribute_for_type+0x11c>
    10b4:	ldr	r3, [fp, #-16]
    10b8:	ldr	r3, [r3, #20]
    10bc:	mov	r1, r3
    10c0:	ldr	r0, [fp, #-8]
    10c4:	bl	0 <strcmp>
    10c8:	mov	r3, r0
    10cc:	cmp	r3, #0
    10d0:	beq	10fc <handle_name_attribute_for_type+0xb0>
    10d4:	ldr	r3, [fp, #-16]
    10d8:	ldr	r3, [r3, #20]
    10dc:	mov	r2, r3
    10e0:	movw	r1, #0
    10e4:	movt	r1, #0
    10e8:	movw	r0, #65136	; 0xfe70
    10ec:	movt	r0, #65535	; 0xffff
    10f0:	bl	0 <coda_set_error>
    10f4:	mvn	r3, #0
    10f8:	b	1168 <handle_name_attribute_for_type+0x11c>
    10fc:	ldr	r3, [fp, #-16]
    1100:	ldr	r3, [r3]
    1104:	ldr	r3, [r3, #8]
    1108:	ldr	r1, [fp, #-8]
    110c:	mov	r0, r3
    1110:	bl	0 <coda_type_set_name>
    1114:	mov	r3, r0
    1118:	cmp	r3, #0
    111c:	beq	1164 <handle_name_attribute_for_type+0x118>
    1120:	mvn	r3, #0
    1124:	b	1168 <handle_name_attribute_for_type+0x11c>
    1128:	movw	r1, #0
    112c:	movt	r1, #0
    1130:	ldr	r0, [fp, #-20]	; 0xffffffec
    1134:	bl	f5c <get_attribute_value>
    1138:	str	r0, [fp, #-8]
    113c:	ldr	r3, [fp, #-8]
    1140:	cmp	r3, #0
    1144:	beq	1164 <handle_name_attribute_for_type+0x118>
    1148:	movw	r1, #0
    114c:	movt	r1, #0
    1150:	movw	r0, #65136	; 0xfe70
    1154:	movt	r0, #65535	; 0xffff
    1158:	bl	0 <coda_set_error>
    115c:	mvn	r3, #0
    1160:	b	1168 <handle_name_attribute_for_type+0x11c>
    1164:	mov	r3, #0
    1168:	mov	r0, r3
    116c:	sub	sp, fp, #4
    1170:	ldr	fp, [sp]
    1174:	add	sp, sp, #4
    1178:	pop	{pc}		; (ldr pc, [sp], #4)

0000117c <handle_format_attribute_for_type>:
    117c:	str	fp, [sp, #-8]!
    1180:	str	lr, [sp, #4]
    1184:	add	fp, sp, #4
    1188:	sub	sp, sp, #16
    118c:	str	r0, [fp, #-16]
    1190:	str	r1, [fp, #-20]	; 0xffffffec
    1194:	ldr	r3, [fp, #-16]
    1198:	ldr	r3, [r3]
    119c:	ldr	r3, [r3, #396]	; 0x18c
    11a0:	ldr	r3, [r3, #48]	; 0x30
    11a4:	cmp	r3, #0
    11a8:	bne	1210 <handle_format_attribute_for_type+0x94>
    11ac:	ldr	r3, [fp, #-16]
    11b0:	ldr	r3, [r3]
    11b4:	ldr	r3, [r3]
    11b8:	mov	r2, r3
    11bc:	movw	r1, #0
    11c0:	movt	r1, #0
    11c4:	ldr	r0, [fp, #-20]	; 0xffffffec
    11c8:	bl	fd8 <get_mandatory_attribute_value>
    11cc:	str	r0, [fp, #-8]
    11d0:	ldr	r3, [fp, #-8]
    11d4:	cmp	r3, #0
    11d8:	bne	11e4 <handle_format_attribute_for_type+0x68>
    11dc:	mvn	r3, #0
    11e0:	b	1290 <handle_format_attribute_for_type+0x114>
    11e4:	ldr	r3, [fp, #-16]
    11e8:	ldr	r3, [r3]
    11ec:	add	r3, r3, #44	; 0x2c
    11f0:	mov	r1, r3
    11f4:	ldr	r0, [fp, #-8]
    11f8:	bl	0 <coda_format_from_string>
    11fc:	mov	r3, r0
    1200:	cmp	r3, #0
    1204:	beq	127c <handle_format_attribute_for_type+0x100>
    1208:	mvn	r3, #0
    120c:	b	1290 <handle_format_attribute_for_type+0x114>
    1210:	movw	r1, #0
    1214:	movt	r1, #0
    1218:	ldr	r0, [fp, #-20]	; 0xffffffec
    121c:	bl	f5c <get_attribute_value>
    1220:	str	r0, [fp, #-8]
    1224:	ldr	r3, [fp, #-8]
    1228:	cmp	r3, #0
    122c:	bne	1250 <handle_format_attribute_for_type+0xd4>
    1230:	ldr	r3, [fp, #-16]
    1234:	ldr	r3, [r3]
    1238:	ldr	r2, [r3, #396]	; 0x18c
    123c:	ldr	r3, [fp, #-16]
    1240:	ldr	r3, [r3]
    1244:	ldr	r2, [r2, #44]	; 0x2c
    1248:	str	r2, [r3, #44]	; 0x2c
    124c:	b	127c <handle_format_attribute_for_type+0x100>
    1250:	ldr	r3, [fp, #-16]
    1254:	ldr	r3, [r3]
    1258:	add	r3, r3, #44	; 0x2c
    125c:	mov	r1, r3
    1260:	ldr	r0, [fp, #-8]
    1264:	bl	0 <coda_format_from_string>
    1268:	mov	r3, r0
    126c:	cmp	r3, #0
    1270:	beq	127c <handle_format_attribute_for_type+0x100>
    1274:	mvn	r3, #0
    1278:	b	1290 <handle_format_attribute_for_type+0x114>
    127c:	ldr	r3, [fp, #-16]
    1280:	ldr	r3, [r3]
    1284:	mov	r2, #1
    1288:	str	r2, [r3, #48]	; 0x30
    128c:	mov	r3, #0
    1290:	mov	r0, r3
    1294:	sub	sp, fp, #4
    1298:	ldr	fp, [sp]
    129c:	add	sp, sp, #4
    12a0:	pop	{pc}		; (ldr pc, [sp], #4)

000012a4 <handle_xml_name>:
    12a4:	str	fp, [sp, #-8]!
    12a8:	str	lr, [sp, #4]
    12ac:	add	fp, sp, #4
    12b0:	sub	sp, sp, #16
    12b4:	str	r0, [fp, #-16]
    12b8:	str	r1, [fp, #-20]	; 0xffffffec
    12bc:	ldr	r3, [fp, #-16]
    12c0:	ldr	r3, [r3]
    12c4:	ldr	r3, [r3, #48]	; 0x30
    12c8:	cmp	r3, #0
    12cc:	bne	12f0 <handle_xml_name+0x4c>
    12d0:	movw	r3, #0
    12d4:	movt	r3, #0
    12d8:	mov	r2, #676	; 0x2a4
    12dc:	movw	r1, #0
    12e0:	movt	r1, #0
    12e4:	movw	r0, #0
    12e8:	movt	r0, #0
    12ec:	bl	0 <__assert_fail>
    12f0:	ldr	r3, [fp, #-16]
    12f4:	ldr	r3, [r3]
    12f8:	ldr	r3, [r3, #44]	; 0x2c
    12fc:	cmp	r3, #2
    1300:	beq	130c <handle_xml_name+0x68>
    1304:	mov	r3, #0
    1308:	b	13d0 <handle_xml_name+0x12c>
    130c:	ldr	r3, [fp, #-16]
    1310:	ldr	r3, [r3]
    1314:	ldr	r3, [r3, #396]	; 0x18c
    1318:	str	r3, [fp, #-8]
    131c:	b	1344 <handle_xml_name+0xa0>
    1320:	ldr	r3, [fp, #-8]
    1324:	ldr	r3, [r3]
    1328:	cmn	r3, #1
    132c:	bne	1338 <handle_xml_name+0x94>
    1330:	mov	r3, #0
    1334:	b	13d0 <handle_xml_name+0x12c>
    1338:	ldr	r3, [fp, #-8]
    133c:	ldr	r3, [r3, #396]	; 0x18c
    1340:	str	r3, [fp, #-8]
    1344:	ldr	r3, [fp, #-8]
    1348:	ldr	r3, [r3]
    134c:	cmp	r3, #14
    1350:	bne	1320 <handle_xml_name+0x7c>
    1354:	movw	r1, #0
    1358:	movt	r1, #0
    135c:	ldr	r0, [fp, #-20]	; 0xffffffec
    1360:	bl	f5c <get_attribute_value>
    1364:	str	r0, [fp, #-12]
    1368:	ldr	r3, [fp, #-12]
    136c:	cmp	r3, #0
    1370:	beq	13cc <handle_xml_name+0x128>
    1374:	ldr	r3, [fp, #-8]
    1378:	ldr	r3, [r3, #8]
    137c:	ldr	r3, [r3, #4]
    1380:	cmp	r3, #0
    1384:	beq	13a4 <handle_xml_name+0x100>
    1388:	movw	r1, #0
    138c:	movt	r1, #0
    1390:	movw	r0, #65136	; 0xfe70
    1394:	movt	r0, #65535	; 0xffff
    1398:	bl	0 <coda_set_error>
    139c:	mvn	r3, #0
    13a0:	b	13d0 <handle_xml_name+0x12c>
    13a4:	ldr	r3, [fp, #-8]
    13a8:	ldr	r3, [r3, #8]
    13ac:	ldr	r1, [fp, #-12]
    13b0:	mov	r0, r3
    13b4:	bl	0 <coda_type_record_field_set_real_name>
    13b8:	mov	r3, r0
    13bc:	cmp	r3, #0
    13c0:	beq	13cc <handle_xml_name+0x128>
    13c4:	mvn	r3, #0
    13c8:	b	13d0 <handle_xml_name+0x12c>
    13cc:	mov	r3, #0
    13d0:	mov	r0, r3
    13d4:	sub	sp, fp, #4
    13d8:	ldr	fp, [sp]
    13dc:	add	sp, sp, #4
    13e0:	pop	{pc}		; (ldr pc, [sp], #4)

000013e4 <get_named_type>:
    13e4:	str	fp, [sp, #-8]!
    13e8:	str	lr, [sp, #4]
    13ec:	add	fp, sp, #4
    13f0:	sub	sp, sp, #24
    13f4:	str	r0, [fp, #-8]
    13f8:	str	r1, [fp, #-12]
    13fc:	str	r2, [fp, #-16]
    1400:	ldr	r3, [fp, #-8]
    1404:	ldr	r3, [r3, #24]
    1408:	cmp	r3, #0
    140c:	bne	1430 <get_named_type+0x4c>
    1410:	movw	r3, #0
    1414:	movt	r3, #0
    1418:	movw	r2, #710	; 0x2c6
    141c:	movw	r1, #0
    1420:	movt	r1, #0
    1424:	movw	r0, #0
    1428:	movt	r0, #0
    142c:	bl	0 <__assert_fail>
    1430:	ldr	r3, [fp, #-8]
    1434:	ldr	r3, [r3, #24]
    1438:	ldr	r1, [fp, #-12]
    143c:	mov	r0, r3
    1440:	bl	0 <coda_product_class_has_named_type>
    1444:	mov	r3, r0
    1448:	cmp	r3, #0
    144c:	bne	149c <get_named_type+0xb8>
    1450:	ldr	r3, [fp, #-8]
    1454:	ldr	r0, [r3, #16]
    1458:	ldr	r3, [fp, #-8]
    145c:	ldr	r2, [r3, #24]
    1460:	ldr	r3, [fp, #-8]
    1464:	ldr	r3, [r3, #28]
    1468:	str	r3, [sp]
    146c:	mov	r3, r2
    1470:	ldr	r2, [fp, #-12]
    1474:	mov	r1, #1
    1478:	bl	a550 <parse_entry>
    147c:	mov	r3, r0
    1480:	cmp	r3, #0
    1484:	beq	149c <get_named_type+0xb8>
    1488:	ldr	r3, [fp, #-8]
    148c:	mov	r2, #0
    1490:	str	r2, [r3, #44]	; 0x2c
    1494:	mvn	r3, #0
    1498:	b	14d4 <get_named_type+0xf0>
    149c:	ldr	r3, [fp, #-8]
    14a0:	ldr	r3, [r3, #24]
    14a4:	ldr	r1, [fp, #-12]
    14a8:	mov	r0, r3
    14ac:	bl	0 <coda_product_class_get_named_type>
    14b0:	mov	r2, r0
    14b4:	ldr	r3, [fp, #-16]
    14b8:	str	r2, [r3]
    14bc:	ldr	r3, [fp, #-16]
    14c0:	ldr	r3, [r3]
    14c4:	ldr	r2, [r3, #4]
    14c8:	add	r2, r2, #1
    14cc:	str	r2, [r3, #4]
    14d0:	mov	r3, #0
    14d4:	mov	r0, r3
    14d8:	sub	sp, fp, #4
    14dc:	ldr	fp, [sp]
    14e0:	add	sp, sp, #4
    14e4:	pop	{pc}		; (ldr pc, [sp], #4)

000014e8 <abort_parser>:
    14e8:	str	fp, [sp, #-8]!
    14ec:	str	lr, [sp, #4]
    14f0:	add	fp, sp, #4
    14f4:	sub	sp, sp, #8
    14f8:	str	r0, [fp, #-8]
    14fc:	ldr	r3, [fp, #-8]
    1500:	ldr	r3, [r3, #4]
    1504:	mov	r1, #0
    1508:	mov	r0, r3
    150c:	bl	0 <coda_XML_StopParser>
    1510:	ldr	r3, [fp, #-8]
    1514:	mov	r2, #1
    1518:	str	r2, [r3, #36]	; 0x24
    151c:	nop	{0}
    1520:	sub	sp, fp, #4
    1524:	ldr	fp, [sp]
    1528:	add	sp, sp, #4
    152c:	pop	{pc}		; (ldr pc, [sp], #4)

00001530 <register_sub_element>:
    1530:	str	fp, [sp, #-8]!
    1534:	str	lr, [sp, #4]
    1538:	add	fp, sp, #4
    153c:	sub	sp, sp, #16
    1540:	str	r0, [fp, #-8]
    1544:	str	r1, [fp, #-12]
    1548:	str	r2, [fp, #-16]
    154c:	str	r3, [fp, #-20]	; 0xffffffec
    1550:	ldr	r3, [fp, #-16]
    1554:	cmp	r3, #0
    1558:	bne	157c <register_sub_element+0x4c>
    155c:	movw	r3, #0
    1560:	movt	r3, #0
    1564:	movw	r2, #735	; 0x2df
    1568:	movw	r1, #0
    156c:	movt	r1, #0
    1570:	movw	r0, #0
    1574:	movt	r0, #0
    1578:	bl	0 <__assert_fail>
    157c:	ldr	r2, [fp, #-8]
    1580:	ldr	r3, [fp, #-12]
    1584:	add	r3, r3, #12
    1588:	lsl	r3, r3, #2
    158c:	add	r3, r2, r3
    1590:	ldr	r2, [fp, #-16]
    1594:	str	r2, [r3, #4]
    1598:	ldr	r3, [fp, #-8]
    159c:	ldr	r2, [fp, #-12]
    15a0:	add	r2, r2, #56	; 0x38
    15a4:	ldr	r1, [fp, #-20]	; 0xffffffec
    15a8:	str	r1, [r3, r2, lsl #2]
    15ac:	nop	{0}
    15b0:	sub	sp, fp, #4
    15b4:	ldr	fp, [sp]
    15b8:	add	sp, sp, #4
    15bc:	pop	{pc}		; (ldr pc, [sp], #4)

000015c0 <register_type_elements>:
    15c0:	str	fp, [sp, #-8]!
    15c4:	str	lr, [sp, #4]
    15c8:	add	fp, sp, #4
    15cc:	sub	sp, sp, #8
    15d0:	str	r0, [fp, #-8]
    15d4:	str	r1, [fp, #-12]
    15d8:	ldr	r3, [fp, #-12]
    15dc:	movw	r2, #0
    15e0:	movt	r2, #0
    15e4:	mov	r1, #1
    15e8:	ldr	r0, [fp, #-8]
    15ec:	bl	1530 <register_sub_element>
    15f0:	ldr	r3, [fp, #-12]
    15f4:	movw	r2, #0
    15f8:	movt	r2, #0
    15fc:	mov	r1, #2
    1600:	ldr	r0, [fp, #-8]
    1604:	bl	1530 <register_sub_element>
    1608:	ldr	r3, [fp, #-12]
    160c:	movw	r2, #0
    1610:	movt	r2, #0
    1614:	mov	r1, #3
    1618:	ldr	r0, [fp, #-8]
    161c:	bl	1530 <register_sub_element>
    1620:	ldr	r3, [fp, #-12]
    1624:	movw	r2, #0
    1628:	movt	r2, #0
    162c:	mov	r1, #0
    1630:	ldr	r0, [fp, #-8]
    1634:	bl	1530 <register_sub_element>
    1638:	ldr	r3, [fp, #-12]
    163c:	movw	r2, #0
    1640:	movt	r2, #0
    1644:	mov	r1, #9
    1648:	ldr	r0, [fp, #-8]
    164c:	bl	1530 <register_sub_element>
    1650:	ldr	r3, [fp, #-12]
    1654:	movw	r2, #0
    1658:	movt	r2, #0
    165c:	mov	r1, #17
    1660:	ldr	r0, [fp, #-8]
    1664:	bl	1530 <register_sub_element>
    1668:	ldr	r3, [fp, #-12]
    166c:	movw	r2, #0
    1670:	movt	r2, #0
    1674:	mov	r1, #20
    1678:	ldr	r0, [fp, #-8]
    167c:	bl	1530 <register_sub_element>
    1680:	ldr	r3, [fp, #-12]
    1684:	movw	r2, #0
    1688:	movt	r2, #0
    168c:	mov	r1, #27
    1690:	ldr	r0, [fp, #-8]
    1694:	bl	1530 <register_sub_element>
    1698:	ldr	r3, [fp, #-12]
    169c:	movw	r2, #0
    16a0:	movt	r2, #0
    16a4:	mov	r1, #34	; 0x22
    16a8:	ldr	r0, [fp, #-8]
    16ac:	bl	1530 <register_sub_element>
    16b0:	ldr	r3, [fp, #-12]
    16b4:	movw	r2, #0
    16b8:	movt	r2, #0
    16bc:	mov	r1, #35	; 0x23
    16c0:	ldr	r0, [fp, #-8]
    16c4:	bl	1530 <register_sub_element>
    16c8:	ldr	r3, [fp, #-12]
    16cc:	movw	r2, #0
    16d0:	movt	r2, #0
    16d4:	mov	r1, #37	; 0x25
    16d8:	ldr	r0, [fp, #-8]
    16dc:	bl	1530 <register_sub_element>
    16e0:	ldr	r3, [fp, #-12]
    16e4:	movw	r2, #0
    16e8:	movt	r2, #0
    16ec:	mov	r1, #38	; 0x26
    16f0:	ldr	r0, [fp, #-8]
    16f4:	bl	1530 <register_sub_element>
    16f8:	ldr	r3, [fp, #-12]
    16fc:	movw	r2, #0
    1700:	movt	r2, #0
    1704:	mov	r1, #39	; 0x27
    1708:	ldr	r0, [fp, #-8]
    170c:	bl	1530 <register_sub_element>
    1710:	ldr	r3, [fp, #-12]
    1714:	movw	r2, #0
    1718:	movt	r2, #0
    171c:	mov	r1, #40	; 0x28
    1720:	ldr	r0, [fp, #-8]
    1724:	bl	1530 <register_sub_element>
    1728:	ldr	r3, [fp, #-12]
    172c:	movw	r2, #0
    1730:	movt	r2, #0
    1734:	mov	r1, #42	; 0x2a
    1738:	ldr	r0, [fp, #-8]
    173c:	bl	1530 <register_sub_element>
    1740:	nop	{0}
    1744:	sub	sp, fp, #4
    1748:	ldr	fp, [sp]
    174c:	add	sp, sp, #4
    1750:	pop	{pc}		; (ldr pc, [sp], #4)

00001754 <data_dictionary_add_product_class>:
    1754:	str	fp, [sp, #-8]!
    1758:	str	lr, [sp, #4]
    175c:	add	fp, sp, #4
    1760:	sub	sp, sp, #8
    1764:	str	r0, [fp, #-8]
    1768:	ldr	r3, [fp, #-8]
    176c:	ldr	r3, [r3]
    1770:	ldr	r3, [r3, #8]
    1774:	mov	r0, r3
    1778:	bl	0 <coda_data_dictionary_add_product_class>
    177c:	mov	r3, r0
    1780:	cmp	r3, #0
    1784:	beq	1790 <data_dictionary_add_product_class+0x3c>
    1788:	mvn	r3, #0
    178c:	b	17a4 <data_dictionary_add_product_class+0x50>
    1790:	ldr	r3, [fp, #-8]
    1794:	ldr	r3, [r3]
    1798:	mov	r2, #0
    179c:	str	r2, [r3, #8]
    17a0:	mov	r3, #0
    17a4:	mov	r0, r3
    17a8:	sub	sp, fp, #4
    17ac:	ldr	fp, [sp]
    17b0:	add	sp, sp, #4
    17b4:	pop	{pc}		; (ldr pc, [sp], #4)

000017b8 <dummy_free_handler>:
    17b8:	push	{fp}		; (str fp, [sp, #-4]!)
    17bc:	add	fp, sp, #0
    17c0:	sub	sp, sp, #12
    17c4:	str	r0, [fp, #-8]
    17c8:	nop	{0}
    17cc:	add	sp, fp, #0
    17d0:	pop	{fp}		; (ldr fp, [sp], #4)
    17d4:	bx	lr

000017d8 <dummy_init>:
    17d8:	push	{fp}		; (str fp, [sp, #-4]!)
    17dc:	add	fp, sp, #0
    17e0:	sub	sp, sp, #12
    17e4:	str	r0, [fp, #-8]
    17e8:	str	r1, [fp, #-12]
    17ec:	mov	r3, #0
    17f0:	mov	r0, r3
    17f4:	add	sp, fp, #0
    17f8:	pop	{fp}		; (ldr fp, [sp], #4)
    17fc:	bx	lr

00001800 <bool_expression_finalise>:
    1800:	str	r4, [sp, #-12]!
    1804:	str	fp, [sp, #4]
    1808:	str	lr, [sp, #8]
    180c:	add	fp, sp, #8
    1810:	sub	sp, sp, #20
    1814:	str	r0, [fp, #-24]	; 0xffffffe8
    1818:	ldr	r3, [fp, #-24]	; 0xffffffe8
    181c:	ldr	r3, [r3]
    1820:	ldr	r3, [r3, #12]
    1824:	cmp	r3, #0
    1828:	beq	188c <bool_expression_finalise+0x8c>
    182c:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1830:	ldr	r3, [r3]
    1834:	ldr	r4, [r3, #12]
    1838:	ldr	r3, [fp, #-24]	; 0xffffffe8
    183c:	ldr	r3, [r3]
    1840:	ldr	r3, [r3, #12]
    1844:	mov	r0, r3
    1848:	bl	0 <strlen>
    184c:	mov	r3, r0
    1850:	mov	r1, r3
    1854:	mov	r0, r4
    1858:	bl	d4 <is_whitespace>
    185c:	mov	r3, r0
    1860:	cmp	r3, #0
    1864:	beq	188c <bool_expression_finalise+0x8c>
    1868:	ldr	r3, [fp, #-24]	; 0xffffffe8
    186c:	ldr	r3, [r3]
    1870:	ldr	r3, [r3, #12]
    1874:	mov	r0, r3
    1878:	bl	0 <free>
    187c:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1880:	ldr	r3, [r3]
    1884:	mov	r2, #0
    1888:	str	r2, [r3, #12]
    188c:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1890:	ldr	r3, [r3]
    1894:	ldr	r3, [r3, #12]
    1898:	cmp	r3, #0
    189c:	bne	18bc <bool_expression_finalise+0xbc>
    18a0:	movw	r1, #0
    18a4:	movt	r1, #0
    18a8:	movw	r0, #65136	; 0xfe70
    18ac:	movt	r0, #65535	; 0xffff
    18b0:	bl	0 <coda_set_error>
    18b4:	mvn	r3, #0
    18b8:	b	1974 <bool_expression_finalise+0x174>
    18bc:	ldr	r3, [fp, #-24]	; 0xffffffe8
    18c0:	ldr	r3, [r3]
    18c4:	ldr	r3, [r3, #12]
    18c8:	sub	r2, fp, #20
    18cc:	mov	r1, r2
    18d0:	mov	r0, r3
    18d4:	bl	0 <coda_expression_from_string>
    18d8:	mov	r3, r0
    18dc:	cmp	r3, #0
    18e0:	beq	18ec <bool_expression_finalise+0xec>
    18e4:	mvn	r3, #0
    18e8:	b	1974 <bool_expression_finalise+0x174>
    18ec:	ldr	r3, [fp, #-24]	; 0xffffffe8
    18f0:	ldr	r3, [r3]
    18f4:	ldr	r3, [r3, #12]
    18f8:	mov	r0, r3
    18fc:	bl	0 <free>
    1900:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1904:	ldr	r3, [r3]
    1908:	mov	r2, #0
    190c:	str	r2, [r3, #12]
    1910:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1914:	ldr	r3, [r3]
    1918:	ldr	r2, [fp, #-20]	; 0xffffffec
    191c:	str	r2, [r3, #8]
    1920:	ldr	r3, [fp, #-20]	; 0xffffffec
    1924:	sub	r2, fp, #16
    1928:	mov	r1, r2
    192c:	mov	r0, r3
    1930:	bl	0 <coda_expression_get_type>
    1934:	mov	r3, r0
    1938:	cmp	r3, #0
    193c:	beq	1948 <bool_expression_finalise+0x148>
    1940:	mvn	r3, #0
    1944:	b	1974 <bool_expression_finalise+0x174>
    1948:	ldr	r3, [fp, #-16]
    194c:	cmp	r3, #0
    1950:	beq	1970 <bool_expression_finalise+0x170>
    1954:	movw	r1, #0
    1958:	movt	r1, #0
    195c:	movw	r0, #65136	; 0xfe70
    1960:	movt	r0, #65535	; 0xffff
    1964:	bl	0 <coda_set_error>
    1968:	mvn	r3, #0
    196c:	b	1974 <bool_expression_finalise+0x174>
    1970:	mov	r3, #0
    1974:	mov	r0, r3
    1978:	sub	sp, fp, #8
    197c:	ldr	r4, [sp]
    1980:	ldr	fp, [sp, #4]
    1984:	add	sp, sp, #8
    1988:	pop	{pc}		; (ldr pc, [sp], #4)

0000198c <bool_expression_init>:
    198c:	push	{fp}		; (str fp, [sp, #-4]!)
    1990:	add	fp, sp, #0
    1994:	sub	sp, sp, #12
    1998:	str	r0, [fp, #-8]
    199c:	str	r1, [fp, #-12]
    19a0:	ldr	r3, [fp, #-8]
    19a4:	ldr	r3, [r3]
    19a8:	mov	r2, #1
    19ac:	str	r2, [r3, #32]
    19b0:	ldr	r3, [fp, #-8]
    19b4:	ldr	r2, [r3]
    19b8:	movw	r3, #0
    19bc:	movt	r3, #0
    19c0:	str	r3, [r2, #40]	; 0x28
    19c4:	ldr	r3, [fp, #-8]
    19c8:	ldr	r2, [r3]
    19cc:	movw	r3, #0
    19d0:	movt	r3, #0
    19d4:	str	r3, [r2, #36]	; 0x24
    19d8:	mov	r3, #0
    19dc:	mov	r0, r3
    19e0:	add	sp, fp, #0
    19e4:	pop	{fp}		; (ldr fp, [sp], #4)
    19e8:	bx	lr

000019ec <integer_expression_finalise>:
    19ec:	str	r4, [sp, #-12]!
    19f0:	str	fp, [sp, #4]
    19f4:	str	lr, [sp, #8]
    19f8:	add	fp, sp, #8
    19fc:	sub	sp, sp, #20
    1a00:	str	r0, [fp, #-24]	; 0xffffffe8
    1a04:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1a08:	ldr	r3, [r3]
    1a0c:	ldr	r3, [r3, #12]
    1a10:	cmp	r3, #0
    1a14:	beq	1a78 <integer_expression_finalise+0x8c>
    1a18:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1a1c:	ldr	r3, [r3]
    1a20:	ldr	r4, [r3, #12]
    1a24:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1a28:	ldr	r3, [r3]
    1a2c:	ldr	r3, [r3, #12]
    1a30:	mov	r0, r3
    1a34:	bl	0 <strlen>
    1a38:	mov	r3, r0
    1a3c:	mov	r1, r3
    1a40:	mov	r0, r4
    1a44:	bl	d4 <is_whitespace>
    1a48:	mov	r3, r0
    1a4c:	cmp	r3, #0
    1a50:	beq	1a78 <integer_expression_finalise+0x8c>
    1a54:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1a58:	ldr	r3, [r3]
    1a5c:	ldr	r3, [r3, #12]
    1a60:	mov	r0, r3
    1a64:	bl	0 <free>
    1a68:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1a6c:	ldr	r3, [r3]
    1a70:	mov	r2, #0
    1a74:	str	r2, [r3, #12]
    1a78:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1a7c:	ldr	r3, [r3]
    1a80:	ldr	r3, [r3, #12]
    1a84:	cmp	r3, #0
    1a88:	bne	1aa8 <integer_expression_finalise+0xbc>
    1a8c:	movw	r1, #0
    1a90:	movt	r1, #0
    1a94:	movw	r0, #65136	; 0xfe70
    1a98:	movt	r0, #65535	; 0xffff
    1a9c:	bl	0 <coda_set_error>
    1aa0:	mvn	r3, #0
    1aa4:	b	1b60 <integer_expression_finalise+0x174>
    1aa8:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1aac:	ldr	r3, [r3]
    1ab0:	ldr	r3, [r3, #12]
    1ab4:	sub	r2, fp, #20
    1ab8:	mov	r1, r2
    1abc:	mov	r0, r3
    1ac0:	bl	0 <coda_expression_from_string>
    1ac4:	mov	r3, r0
    1ac8:	cmp	r3, #0
    1acc:	beq	1ad8 <integer_expression_finalise+0xec>
    1ad0:	mvn	r3, #0
    1ad4:	b	1b60 <integer_expression_finalise+0x174>
    1ad8:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1adc:	ldr	r3, [r3]
    1ae0:	ldr	r3, [r3, #12]
    1ae4:	mov	r0, r3
    1ae8:	bl	0 <free>
    1aec:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1af0:	ldr	r3, [r3]
    1af4:	mov	r2, #0
    1af8:	str	r2, [r3, #12]
    1afc:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1b00:	ldr	r3, [r3]
    1b04:	ldr	r2, [fp, #-20]	; 0xffffffec
    1b08:	str	r2, [r3, #8]
    1b0c:	ldr	r3, [fp, #-20]	; 0xffffffec
    1b10:	sub	r2, fp, #16
    1b14:	mov	r1, r2
    1b18:	mov	r0, r3
    1b1c:	bl	0 <coda_expression_get_type>
    1b20:	mov	r3, r0
    1b24:	cmp	r3, #0
    1b28:	beq	1b34 <integer_expression_finalise+0x148>
    1b2c:	mvn	r3, #0
    1b30:	b	1b60 <integer_expression_finalise+0x174>
    1b34:	ldr	r3, [fp, #-16]
    1b38:	cmp	r3, #1
    1b3c:	beq	1b5c <integer_expression_finalise+0x170>
    1b40:	movw	r1, #0
    1b44:	movt	r1, #0
    1b48:	movw	r0, #65136	; 0xfe70
    1b4c:	movt	r0, #65535	; 0xffff
    1b50:	bl	0 <coda_set_error>
    1b54:	mvn	r3, #0
    1b58:	b	1b60 <integer_expression_finalise+0x174>
    1b5c:	mov	r3, #0
    1b60:	mov	r0, r3
    1b64:	sub	sp, fp, #8
    1b68:	ldr	r4, [sp]
    1b6c:	ldr	fp, [sp, #4]
    1b70:	add	sp, sp, #8
    1b74:	pop	{pc}		; (ldr pc, [sp], #4)

00001b78 <integer_expression_init>:
    1b78:	push	{fp}		; (str fp, [sp, #-4]!)
    1b7c:	add	fp, sp, #0
    1b80:	sub	sp, sp, #12
    1b84:	str	r0, [fp, #-8]
    1b88:	str	r1, [fp, #-12]
    1b8c:	ldr	r3, [fp, #-8]
    1b90:	ldr	r3, [r3]
    1b94:	mov	r2, #1
    1b98:	str	r2, [r3, #32]
    1b9c:	ldr	r3, [fp, #-8]
    1ba0:	ldr	r2, [r3]
    1ba4:	movw	r3, #0
    1ba8:	movt	r3, #0
    1bac:	str	r3, [r2, #40]	; 0x28
    1bb0:	ldr	r3, [fp, #-8]
    1bb4:	ldr	r2, [r3]
    1bb8:	movw	r3, #0
    1bbc:	movt	r3, #0
    1bc0:	str	r3, [r2, #36]	; 0x24
    1bc4:	mov	r3, #0
    1bc8:	mov	r0, r3
    1bcc:	add	sp, fp, #0
    1bd0:	pop	{fp}		; (ldr fp, [sp], #4)
    1bd4:	bx	lr

00001bd8 <integer_constant_or_expression_finalise>:
    1bd8:	str	r4, [sp, #-12]!
    1bdc:	str	fp, [sp, #4]
    1be0:	str	lr, [sp, #8]
    1be4:	add	fp, sp, #8
    1be8:	sub	sp, sp, #20
    1bec:	str	r0, [fp, #-24]	; 0xffffffe8
    1bf0:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1bf4:	ldr	r3, [r3]
    1bf8:	ldr	r3, [r3, #12]
    1bfc:	cmp	r3, #0
    1c00:	beq	1c64 <integer_constant_or_expression_finalise+0x8c>
    1c04:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1c08:	ldr	r3, [r3]
    1c0c:	ldr	r4, [r3, #12]
    1c10:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1c14:	ldr	r3, [r3]
    1c18:	ldr	r3, [r3, #12]
    1c1c:	mov	r0, r3
    1c20:	bl	0 <strlen>
    1c24:	mov	r3, r0
    1c28:	mov	r1, r3
    1c2c:	mov	r0, r4
    1c30:	bl	d4 <is_whitespace>
    1c34:	mov	r3, r0
    1c38:	cmp	r3, #0
    1c3c:	beq	1c64 <integer_constant_or_expression_finalise+0x8c>
    1c40:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1c44:	ldr	r3, [r3]
    1c48:	ldr	r3, [r3, #12]
    1c4c:	mov	r0, r3
    1c50:	bl	0 <free>
    1c54:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1c58:	ldr	r3, [r3]
    1c5c:	mov	r2, #0
    1c60:	str	r2, [r3, #12]
    1c64:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1c68:	ldr	r3, [r3]
    1c6c:	ldr	r3, [r3, #12]
    1c70:	cmp	r3, #0
    1c74:	bne	1c94 <integer_constant_or_expression_finalise+0xbc>
    1c78:	movw	r1, #0
    1c7c:	movt	r1, #0
    1c80:	movw	r0, #65136	; 0xfe70
    1c84:	movt	r0, #65535	; 0xffff
    1c88:	bl	0 <coda_set_error>
    1c8c:	mvn	r3, #0
    1c90:	b	1dbc <integer_constant_or_expression_finalise+0x1e4>
    1c94:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1c98:	ldr	r3, [r3]
    1c9c:	ldr	r3, [r3, #12]
    1ca0:	sub	r2, fp, #20
    1ca4:	mov	r1, r2
    1ca8:	mov	r0, r3
    1cac:	bl	0 <coda_expression_from_string>
    1cb0:	mov	r3, r0
    1cb4:	cmp	r3, #0
    1cb8:	beq	1cc4 <integer_constant_or_expression_finalise+0xec>
    1cbc:	mvn	r3, #0
    1cc0:	b	1dbc <integer_constant_or_expression_finalise+0x1e4>
    1cc4:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1cc8:	ldr	r3, [r3]
    1ccc:	ldr	r3, [r3, #12]
    1cd0:	mov	r0, r3
    1cd4:	bl	0 <free>
    1cd8:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1cdc:	ldr	r3, [r3]
    1ce0:	mov	r2, #0
    1ce4:	str	r2, [r3, #12]
    1ce8:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1cec:	ldr	r3, [r3]
    1cf0:	ldr	r2, [fp, #-20]	; 0xffffffec
    1cf4:	str	r2, [r3, #8]
    1cf8:	ldr	r3, [fp, #-20]	; 0xffffffec
    1cfc:	sub	r2, fp, #16
    1d00:	mov	r1, r2
    1d04:	mov	r0, r3
    1d08:	bl	0 <coda_expression_get_type>
    1d0c:	mov	r3, r0
    1d10:	cmp	r3, #0
    1d14:	beq	1d2c <integer_constant_or_expression_finalise+0x154>
    1d18:	ldr	r3, [fp, #-20]	; 0xffffffec
    1d1c:	mov	r0, r3
    1d20:	bl	0 <coda_expression_delete>
    1d24:	mvn	r3, #0
    1d28:	b	1dbc <integer_constant_or_expression_finalise+0x1e4>
    1d2c:	ldr	r3, [fp, #-16]
    1d30:	cmp	r3, #1
    1d34:	beq	1d54 <integer_constant_or_expression_finalise+0x17c>
    1d38:	movw	r1, #0
    1d3c:	movt	r1, #0
    1d40:	movw	r0, #65136	; 0xfe70
    1d44:	movt	r0, #65535	; 0xffff
    1d48:	bl	0 <coda_set_error>
    1d4c:	mvn	r3, #0
    1d50:	b	1dbc <integer_constant_or_expression_finalise+0x1e4>
    1d54:	ldr	r3, [fp, #-20]	; 0xffffffec
    1d58:	mov	r0, r3
    1d5c:	bl	0 <coda_expression_is_constant>
    1d60:	mov	r3, r0
    1d64:	cmp	r3, #0
    1d68:	beq	1db8 <integer_constant_or_expression_finalise+0x1e0>
    1d6c:	ldr	r0, [fp, #-20]	; 0xffffffec
    1d70:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1d74:	ldr	r3, [r3]
    1d78:	add	r3, r3, #16
    1d7c:	mov	r2, r3
    1d80:	mov	r1, #0
    1d84:	bl	0 <coda_expression_eval_integer>
    1d88:	mov	r3, r0
    1d8c:	cmp	r3, #0
    1d90:	beq	1d9c <integer_constant_or_expression_finalise+0x1c4>
    1d94:	mvn	r3, #0
    1d98:	b	1dbc <integer_constant_or_expression_finalise+0x1e4>
    1d9c:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1da0:	ldr	r3, [r3]
    1da4:	mov	r2, #0
    1da8:	str	r2, [r3, #8]
    1dac:	ldr	r3, [fp, #-20]	; 0xffffffec
    1db0:	mov	r0, r3
    1db4:	bl	0 <coda_expression_delete>
    1db8:	mov	r3, #0
    1dbc:	mov	r0, r3
    1dc0:	sub	sp, fp, #8
    1dc4:	ldr	r4, [sp]
    1dc8:	ldr	fp, [sp, #4]
    1dcc:	add	sp, sp, #8
    1dd0:	pop	{pc}		; (ldr pc, [sp], #4)

00001dd4 <integer_constant_or_expression_init>:
    1dd4:	push	{fp}		; (str fp, [sp, #-4]!)
    1dd8:	add	fp, sp, #0
    1ddc:	sub	sp, sp, #12
    1de0:	str	r0, [fp, #-8]
    1de4:	str	r1, [fp, #-12]
    1de8:	ldr	r3, [fp, #-8]
    1dec:	ldr	r3, [r3]
    1df0:	mov	r2, #1
    1df4:	str	r2, [r3, #32]
    1df8:	ldr	r3, [fp, #-8]
    1dfc:	ldr	r2, [r3]
    1e00:	movw	r3, #0
    1e04:	movt	r3, #0
    1e08:	str	r3, [r2, #40]	; 0x28
    1e0c:	ldr	r3, [fp, #-8]
    1e10:	ldr	r2, [r3]
    1e14:	movw	r3, #0
    1e18:	movt	r3, #0
    1e1c:	str	r3, [r2, #36]	; 0x24
    1e20:	mov	r3, #0
    1e24:	mov	r0, r3
    1e28:	add	sp, fp, #0
    1e2c:	pop	{fp}		; (ldr fp, [sp], #4)
    1e30:	bx	lr

00001e34 <optional_integer_constant_or_expression_finalise>:
    1e34:	str	r4, [sp, #-12]!
    1e38:	str	fp, [sp, #4]
    1e3c:	str	lr, [sp, #8]
    1e40:	add	fp, sp, #8
    1e44:	sub	sp, sp, #20
    1e48:	str	r0, [fp, #-24]	; 0xffffffe8
    1e4c:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1e50:	ldr	r3, [r3]
    1e54:	ldr	r3, [r3, #12]
    1e58:	cmp	r3, #0
    1e5c:	beq	1ec0 <optional_integer_constant_or_expression_finalise+0x8c>
    1e60:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1e64:	ldr	r3, [r3]
    1e68:	ldr	r4, [r3, #12]
    1e6c:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1e70:	ldr	r3, [r3]
    1e74:	ldr	r3, [r3, #12]
    1e78:	mov	r0, r3
    1e7c:	bl	0 <strlen>
    1e80:	mov	r3, r0
    1e84:	mov	r1, r3
    1e88:	mov	r0, r4
    1e8c:	bl	d4 <is_whitespace>
    1e90:	mov	r3, r0
    1e94:	cmp	r3, #0
    1e98:	beq	1ec0 <optional_integer_constant_or_expression_finalise+0x8c>
    1e9c:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1ea0:	ldr	r3, [r3]
    1ea4:	ldr	r3, [r3, #12]
    1ea8:	mov	r0, r3
    1eac:	bl	0 <free>
    1eb0:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1eb4:	ldr	r3, [r3]
    1eb8:	mov	r2, #0
    1ebc:	str	r2, [r3, #12]
    1ec0:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1ec4:	ldr	r3, [r3]
    1ec8:	ldr	r3, [r3, #12]
    1ecc:	cmp	r3, #0
    1ed0:	bne	1eec <optional_integer_constant_or_expression_finalise+0xb8>
    1ed4:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1ed8:	ldr	r3, [r3]
    1edc:	mov	r2, #1
    1ee0:	str	r2, [r3, #4]
    1ee4:	mov	r3, #0
    1ee8:	b	2014 <optional_integer_constant_or_expression_finalise+0x1e0>
    1eec:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1ef0:	ldr	r3, [r3]
    1ef4:	ldr	r3, [r3, #12]
    1ef8:	sub	r2, fp, #20
    1efc:	mov	r1, r2
    1f00:	mov	r0, r3
    1f04:	bl	0 <coda_expression_from_string>
    1f08:	mov	r3, r0
    1f0c:	cmp	r3, #0
    1f10:	beq	1f1c <optional_integer_constant_or_expression_finalise+0xe8>
    1f14:	mvn	r3, #0
    1f18:	b	2014 <optional_integer_constant_or_expression_finalise+0x1e0>
    1f1c:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1f20:	ldr	r3, [r3]
    1f24:	ldr	r3, [r3, #12]
    1f28:	mov	r0, r3
    1f2c:	bl	0 <free>
    1f30:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1f34:	ldr	r3, [r3]
    1f38:	mov	r2, #0
    1f3c:	str	r2, [r3, #12]
    1f40:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1f44:	ldr	r3, [r3]
    1f48:	ldr	r2, [fp, #-20]	; 0xffffffec
    1f4c:	str	r2, [r3, #8]
    1f50:	ldr	r3, [fp, #-20]	; 0xffffffec
    1f54:	sub	r2, fp, #16
    1f58:	mov	r1, r2
    1f5c:	mov	r0, r3
    1f60:	bl	0 <coda_expression_get_type>
    1f64:	mov	r3, r0
    1f68:	cmp	r3, #0
    1f6c:	beq	1f84 <optional_integer_constant_or_expression_finalise+0x150>
    1f70:	ldr	r3, [fp, #-20]	; 0xffffffec
    1f74:	mov	r0, r3
    1f78:	bl	0 <coda_expression_delete>
    1f7c:	mvn	r3, #0
    1f80:	b	2014 <optional_integer_constant_or_expression_finalise+0x1e0>
    1f84:	ldr	r3, [fp, #-16]
    1f88:	cmp	r3, #1
    1f8c:	beq	1fac <optional_integer_constant_or_expression_finalise+0x178>
    1f90:	movw	r1, #0
    1f94:	movt	r1, #0
    1f98:	movw	r0, #65136	; 0xfe70
    1f9c:	movt	r0, #65535	; 0xffff
    1fa0:	bl	0 <coda_set_error>
    1fa4:	mvn	r3, #0
    1fa8:	b	2014 <optional_integer_constant_or_expression_finalise+0x1e0>
    1fac:	ldr	r3, [fp, #-20]	; 0xffffffec
    1fb0:	mov	r0, r3
    1fb4:	bl	0 <coda_expression_is_constant>
    1fb8:	mov	r3, r0
    1fbc:	cmp	r3, #0
    1fc0:	beq	2010 <optional_integer_constant_or_expression_finalise+0x1dc>
    1fc4:	ldr	r0, [fp, #-20]	; 0xffffffec
    1fc8:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1fcc:	ldr	r3, [r3]
    1fd0:	add	r3, r3, #16
    1fd4:	mov	r2, r3
    1fd8:	mov	r1, #0
    1fdc:	bl	0 <coda_expression_eval_integer>
    1fe0:	mov	r3, r0
    1fe4:	cmp	r3, #0
    1fe8:	beq	1ff4 <optional_integer_constant_or_expression_finalise+0x1c0>
    1fec:	mvn	r3, #0
    1ff0:	b	2014 <optional_integer_constant_or_expression_finalise+0x1e0>
    1ff4:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1ff8:	ldr	r3, [r3]
    1ffc:	mov	r2, #0
    2000:	str	r2, [r3, #8]
    2004:	ldr	r3, [fp, #-20]	; 0xffffffec
    2008:	mov	r0, r3
    200c:	bl	0 <coda_expression_delete>
    2010:	mov	r3, #0
    2014:	mov	r0, r3
    2018:	sub	sp, fp, #8
    201c:	ldr	r4, [sp]
    2020:	ldr	fp, [sp, #4]
    2024:	add	sp, sp, #8
    2028:	pop	{pc}		; (ldr pc, [sp], #4)

0000202c <optional_integer_constant_or_expression_init>:
    202c:	push	{fp}		; (str fp, [sp, #-4]!)
    2030:	add	fp, sp, #0
    2034:	sub	sp, sp, #12
    2038:	str	r0, [fp, #-8]
    203c:	str	r1, [fp, #-12]
    2040:	ldr	r3, [fp, #-8]
    2044:	ldr	r3, [r3]
    2048:	mov	r2, #1
    204c:	str	r2, [r3, #32]
    2050:	ldr	r3, [fp, #-8]
    2054:	ldr	r2, [r3]
    2058:	movw	r3, #0
    205c:	movt	r3, #0
    2060:	str	r3, [r2, #40]	; 0x28
    2064:	ldr	r3, [fp, #-8]
    2068:	ldr	r2, [r3]
    206c:	movw	r3, #0
    2070:	movt	r3, #0
    2074:	str	r3, [r2, #36]	; 0x24
    2078:	mov	r3, #0
    207c:	mov	r0, r3
    2080:	add	sp, fp, #0
    2084:	pop	{fp}		; (ldr fp, [sp], #4)
    2088:	bx	lr

0000208c <product_class_add_named_type>:
    208c:	str	fp, [sp, #-8]!
    2090:	str	lr, [sp, #4]
    2094:	add	fp, sp, #4
    2098:	sub	sp, sp, #8
    209c:	str	r0, [fp, #-8]
    20a0:	ldr	r3, [fp, #-8]
    20a4:	ldr	r3, [r3, #24]
    20a8:	cmp	r3, #0
    20ac:	bne	20d0 <product_class_add_named_type+0x44>
    20b0:	movw	r3, #0
    20b4:	movt	r3, #0
    20b8:	movw	r2, #1002	; 0x3ea
    20bc:	movw	r1, #0
    20c0:	movt	r1, #0
    20c4:	movw	r0, #0
    20c8:	movt	r0, #0
    20cc:	bl	0 <__assert_fail>
    20d0:	ldr	r3, [fp, #-8]
    20d4:	ldr	r2, [r3, #24]
    20d8:	ldr	r3, [fp, #-8]
    20dc:	ldr	r3, [r3]
    20e0:	ldr	r3, [r3, #8]
    20e4:	mov	r1, r3
    20e8:	mov	r0, r2
    20ec:	bl	0 <coda_product_class_add_named_type>
    20f0:	mov	r3, r0
    20f4:	cmp	r3, #0
    20f8:	beq	2104 <product_class_add_named_type+0x78>
    20fc:	mvn	r3, #0
    2100:	b	2108 <product_class_add_named_type+0x7c>
    2104:	mov	r3, #0
    2108:	mov	r0, r3
    210c:	sub	sp, fp, #4
    2110:	ldr	fp, [sp]
    2114:	add	sp, sp, #4
    2118:	pop	{pc}		; (ldr pc, [sp], #4)

0000211c <string_data_finalise>:
    211c:	str	fp, [sp, #-8]!
    2120:	str	lr, [sp, #4]
    2124:	add	fp, sp, #4
    2128:	sub	sp, sp, #8
    212c:	str	r0, [fp, #-8]
    2130:	ldr	r3, [fp, #-8]
    2134:	ldr	r3, [r3]
    2138:	ldr	r3, [r3, #12]
    213c:	mov	r0, r3
    2140:	bl	c70 <decode_xml_string>
    2144:	mov	r3, #0
    2148:	mov	r0, r3
    214c:	sub	sp, fp, #4
    2150:	ldr	fp, [sp]
    2154:	add	sp, sp, #4
    2158:	pop	{pc}		; (ldr pc, [sp], #4)

0000215c <string_data_init>:
    215c:	push	{fp}		; (str fp, [sp, #-4]!)
    2160:	add	fp, sp, #0
    2164:	sub	sp, sp, #12
    2168:	str	r0, [fp, #-8]
    216c:	str	r1, [fp, #-12]
    2170:	ldr	r3, [fp, #-8]
    2174:	ldr	r3, [r3]
    2178:	mov	r2, #1
    217c:	str	r2, [r3, #32]
    2180:	ldr	r3, [fp, #-8]
    2184:	ldr	r2, [r3]
    2188:	movw	r3, #0
    218c:	movt	r3, #0
    2190:	str	r3, [r2, #36]	; 0x24
    2194:	mov	r3, #0
    2198:	mov	r0, r3
    219c:	add	sp, fp, #0
    21a0:	pop	{fp}		; (ldr fp, [sp], #4)
    21a4:	bx	lr

000021a8 <type_set_format>:
    21a8:	str	fp, [sp, #-8]!
    21ac:	str	lr, [sp, #4]
    21b0:	add	fp, sp, #4
    21b4:	sub	sp, sp, #16
    21b8:	str	r0, [fp, #-16]
    21bc:	str	r1, [fp, #-20]	; 0xffffffec
    21c0:	ldr	r3, [fp, #-16]
    21c4:	ldr	r2, [fp, #-20]	; 0xffffffec
    21c8:	str	r2, [r3]
    21cc:	ldr	r3, [fp, #-16]
    21d0:	ldr	r3, [r3, #8]
    21d4:	cmp	r3, #1
    21d8:	beq	2254 <type_set_format+0xac>
    21dc:	cmp	r3, #0
    21e0:	beq	21f0 <type_set_format+0x48>
    21e4:	cmp	r3, #6
    21e8:	beq	226c <type_set_format+0xc4>
    21ec:	b	2284 <type_set_format+0xdc>
    21f0:	sub	r3, fp, #12
    21f4:	mov	r1, r3
    21f8:	ldr	r0, [fp, #-16]
    21fc:	bl	0 <coda_type_get_num_record_fields>
    2200:	mov	r3, #0
    2204:	str	r3, [fp, #-8]
    2208:	b	2240 <type_set_format+0x98>
    220c:	ldr	r3, [fp, #-16]
    2210:	ldr	r2, [r3, #52]	; 0x34
    2214:	ldr	r3, [fp, #-8]
    2218:	lsl	r3, r3, #2
    221c:	add	r3, r2, r3
    2220:	ldr	r3, [r3]
    2224:	ldr	r3, [r3, #8]
    2228:	ldr	r1, [fp, #-20]	; 0xffffffec
    222c:	mov	r0, r3
    2230:	bl	21a8 <type_set_format>
    2234:	ldr	r3, [fp, #-8]
    2238:	add	r3, r3, #1
    223c:	str	r3, [fp, #-8]
    2240:	ldr	r3, [fp, #-12]
    2244:	ldr	r2, [fp, #-8]
    2248:	cmp	r2, r3
    224c:	blt	220c <type_set_format+0x64>
    2250:	b	2284 <type_set_format+0xdc>
    2254:	ldr	r3, [fp, #-16]
    2258:	ldr	r3, [r3, #40]	; 0x28
    225c:	ldr	r1, [fp, #-20]	; 0xffffffec
    2260:	mov	r0, r3
    2264:	bl	21a8 <type_set_format>
    2268:	b	2284 <type_set_format+0xdc>
    226c:	ldr	r3, [fp, #-16]
    2270:	ldr	r3, [r3, #44]	; 0x2c
    2274:	ldr	r1, [fp, #-20]	; 0xffffffec
    2278:	mov	r0, r3
    227c:	bl	21a8 <type_set_format>
    2280:	nop	{0}
    2284:	ldr	r3, [fp, #-16]
    2288:	ldr	r3, [r3, #36]	; 0x24
    228c:	cmp	r3, #0
    2290:	beq	22a8 <type_set_format+0x100>
    2294:	ldr	r3, [fp, #-16]
    2298:	ldr	r3, [r3, #36]	; 0x24
    229c:	ldr	r1, [fp, #-20]	; 0xffffffec
    22a0:	mov	r0, r3
    22a4:	bl	21a8 <type_set_format>
    22a8:	mov	r3, #0
    22ac:	mov	r0, r3
    22b0:	sub	sp, fp, #4
    22b4:	ldr	fp, [sp]
    22b8:	add	sp, sp, #4
    22bc:	pop	{pc}		; (ldr pc, [sp], #4)

000022c0 <type_set_description>:
    22c0:	str	fp, [sp, #-8]!
    22c4:	str	lr, [sp, #4]
    22c8:	add	fp, sp, #4
    22cc:	sub	sp, sp, #8
    22d0:	str	r0, [fp, #-8]
    22d4:	ldr	r3, [fp, #-8]
    22d8:	ldr	r3, [r3]
    22dc:	ldr	r3, [r3, #12]
    22e0:	cmp	r3, #0
    22e4:	bne	2310 <type_set_description+0x50>
    22e8:	ldr	r3, [fp, #-8]
    22ec:	ldr	r3, [r3]
    22f0:	ldr	r3, [r3, #396]	; 0x18c
    22f4:	ldr	r3, [r3, #8]
    22f8:	movw	r1, #0
    22fc:	movt	r1, #0
    2300:	mov	r0, r3
    2304:	bl	0 <coda_type_set_description>
    2308:	mov	r3, r0
    230c:	b	233c <type_set_description+0x7c>
    2310:	ldr	r3, [fp, #-8]
    2314:	ldr	r3, [r3]
    2318:	ldr	r3, [r3, #396]	; 0x18c
    231c:	ldr	r2, [r3, #8]
    2320:	ldr	r3, [fp, #-8]
    2324:	ldr	r3, [r3]
    2328:	ldr	r3, [r3, #12]
    232c:	mov	r1, r3
    2330:	mov	r0, r2
    2334:	bl	0 <coda_type_set_description>
    2338:	mov	r3, r0
    233c:	mov	r0, r3
    2340:	sub	sp, fp, #4
    2344:	ldr	fp, [sp]
    2348:	add	sp, sp, #4
    234c:	pop	{pc}		; (ldr pc, [sp], #4)

00002350 <type_set_bit_size>:
    2350:	str	fp, [sp, #-8]!
    2354:	str	lr, [sp, #4]
    2358:	add	fp, sp, #4
    235c:	sub	sp, sp, #8
    2360:	str	r0, [fp, #-8]
    2364:	ldr	r3, [fp, #-8]
    2368:	ldr	r3, [r3]
    236c:	ldr	r3, [r3, #8]
    2370:	cmp	r3, #0
    2374:	beq	23c8 <type_set_bit_size+0x78>
    2378:	ldr	r3, [fp, #-8]
    237c:	ldr	r3, [r3]
    2380:	ldr	r3, [r3, #396]	; 0x18c
    2384:	ldr	r2, [r3, #8]
    2388:	ldr	r3, [fp, #-8]
    238c:	ldr	r3, [r3]
    2390:	ldr	r3, [r3, #8]
    2394:	mov	r1, r3
    2398:	mov	r0, r2
    239c:	bl	0 <coda_type_set_bit_size_expression>
    23a0:	mov	r3, r0
    23a4:	cmp	r3, #0
    23a8:	beq	23b4 <type_set_bit_size+0x64>
    23ac:	mvn	r3, #0
    23b0:	b	2410 <type_set_bit_size+0xc0>
    23b4:	ldr	r3, [fp, #-8]
    23b8:	ldr	r3, [r3]
    23bc:	mov	r2, #0
    23c0:	str	r2, [r3, #8]
    23c4:	b	240c <type_set_bit_size+0xbc>
    23c8:	ldr	r3, [fp, #-8]
    23cc:	ldr	r3, [r3]
    23d0:	ldr	r3, [r3, #396]	; 0x18c
    23d4:	ldr	r1, [r3, #8]
    23d8:	ldr	r3, [fp, #-8]
    23dc:	ldr	r3, [r3]
    23e0:	ldrd	r2, [r3, #16]
    23e4:	mov	r3, r2
    23e8:	mov	r2, r3
    23ec:	asr	r3, r2, #31
    23f0:	mov	r0, r1
    23f4:	bl	0 <coda_type_set_bit_size>
    23f8:	mov	r3, r0
    23fc:	cmp	r3, #0
    2400:	beq	240c <type_set_bit_size+0xbc>
    2404:	mvn	r3, #0
    2408:	b	2410 <type_set_bit_size+0xc0>
    240c:	mov	r3, #0
    2410:	mov	r0, r3
    2414:	sub	sp, fp, #4
    2418:	ldr	fp, [sp]
    241c:	add	sp, sp, #4
    2420:	pop	{pc}		; (ldr pc, [sp], #4)

00002424 <type_set_byte_size>:
    2424:	str	fp, [sp, #-8]!
    2428:	str	lr, [sp, #4]
    242c:	add	fp, sp, #4
    2430:	sub	sp, sp, #8
    2434:	str	r0, [fp, #-8]
    2438:	ldr	r3, [fp, #-8]
    243c:	ldr	r3, [r3]
    2440:	ldr	r3, [r3, #8]
    2444:	cmp	r3, #0
    2448:	beq	249c <type_set_byte_size+0x78>
    244c:	ldr	r3, [fp, #-8]
    2450:	ldr	r3, [r3]
    2454:	ldr	r3, [r3, #396]	; 0x18c
    2458:	ldr	r2, [r3, #8]
    245c:	ldr	r3, [fp, #-8]
    2460:	ldr	r3, [r3]
    2464:	ldr	r3, [r3, #8]
    2468:	mov	r1, r3
    246c:	mov	r0, r2
    2470:	bl	0 <coda_type_set_byte_size_expression>
    2474:	mov	r3, r0
    2478:	cmp	r3, #0
    247c:	beq	2488 <type_set_byte_size+0x64>
    2480:	mvn	r3, #0
    2484:	b	24e4 <type_set_byte_size+0xc0>
    2488:	ldr	r3, [fp, #-8]
    248c:	ldr	r3, [r3]
    2490:	mov	r2, #0
    2494:	str	r2, [r3, #8]
    2498:	b	24e0 <type_set_byte_size+0xbc>
    249c:	ldr	r3, [fp, #-8]
    24a0:	ldr	r3, [r3]
    24a4:	ldr	r3, [r3, #396]	; 0x18c
    24a8:	ldr	r1, [r3, #8]
    24ac:	ldr	r3, [fp, #-8]
    24b0:	ldr	r3, [r3]
    24b4:	ldrd	r2, [r3, #16]
    24b8:	mov	r3, r2
    24bc:	mov	r2, r3
    24c0:	asr	r3, r2, #31
    24c4:	mov	r0, r1
    24c8:	bl	0 <coda_type_set_byte_size>
    24cc:	mov	r3, r0
    24d0:	cmp	r3, #0
    24d4:	beq	24e0 <type_set_byte_size+0xbc>
    24d8:	mvn	r3, #0
    24dc:	b	24e4 <type_set_byte_size+0xc0>
    24e0:	mov	r3, #0
    24e4:	mov	r0, r3
    24e8:	sub	sp, fp, #4
    24ec:	ldr	fp, [sp]
    24f0:	add	sp, sp, #4
    24f4:	pop	{pc}		; (ldr pc, [sp], #4)

000024f8 <void_expression_finalise>:
    24f8:	str	r4, [sp, #-12]!
    24fc:	str	fp, [sp, #4]
    2500:	str	lr, [sp, #8]
    2504:	add	fp, sp, #8
    2508:	sub	sp, sp, #20
    250c:	str	r0, [fp, #-24]	; 0xffffffe8
    2510:	ldr	r3, [fp, #-24]	; 0xffffffe8
    2514:	ldr	r3, [r3]
    2518:	ldr	r3, [r3, #12]
    251c:	cmp	r3, #0
    2520:	beq	2584 <void_expression_finalise+0x8c>
    2524:	ldr	r3, [fp, #-24]	; 0xffffffe8
    2528:	ldr	r3, [r3]
    252c:	ldr	r4, [r3, #12]
    2530:	ldr	r3, [fp, #-24]	; 0xffffffe8
    2534:	ldr	r3, [r3]
    2538:	ldr	r3, [r3, #12]
    253c:	mov	r0, r3
    2540:	bl	0 <strlen>
    2544:	mov	r3, r0
    2548:	mov	r1, r3
    254c:	mov	r0, r4
    2550:	bl	d4 <is_whitespace>
    2554:	mov	r3, r0
    2558:	cmp	r3, #0
    255c:	beq	2584 <void_expression_finalise+0x8c>
    2560:	ldr	r3, [fp, #-24]	; 0xffffffe8
    2564:	ldr	r3, [r3]
    2568:	ldr	r3, [r3, #12]
    256c:	mov	r0, r3
    2570:	bl	0 <free>
    2574:	ldr	r3, [fp, #-24]	; 0xffffffe8
    2578:	ldr	r3, [r3]
    257c:	mov	r2, #0
    2580:	str	r2, [r3, #12]
    2584:	ldr	r3, [fp, #-24]	; 0xffffffe8
    2588:	ldr	r3, [r3]
    258c:	ldr	r3, [r3, #12]
    2590:	cmp	r3, #0
    2594:	bne	25b4 <void_expression_finalise+0xbc>
    2598:	movw	r1, #0
    259c:	movt	r1, #0
    25a0:	movw	r0, #65136	; 0xfe70
    25a4:	movt	r0, #65535	; 0xffff
    25a8:	bl	0 <coda_set_error>
    25ac:	mvn	r3, #0
    25b0:	b	266c <void_expression_finalise+0x174>
    25b4:	ldr	r3, [fp, #-24]	; 0xffffffe8
    25b8:	ldr	r3, [r3]
    25bc:	ldr	r3, [r3, #12]
    25c0:	sub	r2, fp, #20
    25c4:	mov	r1, r2
    25c8:	mov	r0, r3
    25cc:	bl	0 <coda_expression_from_string>
    25d0:	mov	r3, r0
    25d4:	cmp	r3, #0
    25d8:	beq	25e4 <void_expression_finalise+0xec>
    25dc:	mvn	r3, #0
    25e0:	b	266c <void_expression_finalise+0x174>
    25e4:	ldr	r3, [fp, #-24]	; 0xffffffe8
    25e8:	ldr	r3, [r3]
    25ec:	ldr	r3, [r3, #12]
    25f0:	mov	r0, r3
    25f4:	bl	0 <free>
    25f8:	ldr	r3, [fp, #-24]	; 0xffffffe8
    25fc:	ldr	r3, [r3]
    2600:	mov	r2, #0
    2604:	str	r2, [r3, #12]
    2608:	ldr	r3, [fp, #-24]	; 0xffffffe8
    260c:	ldr	r3, [r3]
    2610:	ldr	r2, [fp, #-20]	; 0xffffffec
    2614:	str	r2, [r3, #8]
    2618:	ldr	r3, [fp, #-20]	; 0xffffffec
    261c:	sub	r2, fp, #16
    2620:	mov	r1, r2
    2624:	mov	r0, r3
    2628:	bl	0 <coda_expression_get_type>
    262c:	mov	r3, r0
    2630:	cmp	r3, #0
    2634:	beq	2640 <void_expression_finalise+0x148>
    2638:	mvn	r3, #0
    263c:	b	266c <void_expression_finalise+0x174>
    2640:	ldr	r3, [fp, #-16]
    2644:	cmp	r3, #5
    2648:	beq	2668 <void_expression_finalise+0x170>
    264c:	movw	r1, #0
    2650:	movt	r1, #0
    2654:	movw	r0, #65136	; 0xfe70
    2658:	movt	r0, #65535	; 0xffff
    265c:	bl	0 <coda_set_error>
    2660:	mvn	r3, #0
    2664:	b	266c <void_expression_finalise+0x174>
    2668:	mov	r3, #0
    266c:	mov	r0, r3
    2670:	sub	sp, fp, #8
    2674:	ldr	r4, [sp]
    2678:	ldr	fp, [sp, #4]
    267c:	add	sp, sp, #8
    2680:	pop	{pc}		; (ldr pc, [sp], #4)

00002684 <void_expression_init>:
    2684:	push	{fp}		; (str fp, [sp, #-4]!)
    2688:	add	fp, sp, #0
    268c:	sub	sp, sp, #12
    2690:	str	r0, [fp, #-8]
    2694:	str	r1, [fp, #-12]
    2698:	ldr	r3, [fp, #-8]
    269c:	ldr	r3, [r3]
    26a0:	mov	r2, #1
    26a4:	str	r2, [r3, #32]
    26a8:	ldr	r3, [fp, #-8]
    26ac:	ldr	r2, [r3]
    26b0:	movw	r3, #0
    26b4:	movt	r3, #0
    26b8:	str	r3, [r2, #40]	; 0x28
    26bc:	ldr	r3, [fp, #-8]
    26c0:	ldr	r2, [r3]
    26c4:	movw	r3, #0
    26c8:	movt	r3, #0
    26cc:	str	r3, [r2, #36]	; 0x24
    26d0:	mov	r3, #0
    26d4:	mov	r0, r3
    26d8:	add	sp, fp, #0
    26dc:	pop	{fp}		; (ldr fp, [sp], #4)
    26e0:	bx	lr

000026e4 <type_add_attribute>:
    26e4:	str	fp, [sp, #-8]!
    26e8:	str	lr, [sp, #4]
    26ec:	add	fp, sp, #4
    26f0:	sub	sp, sp, #8
    26f4:	str	r0, [fp, #-8]
    26f8:	ldr	r3, [fp, #-8]
    26fc:	ldr	r3, [r3]
    2700:	ldr	r3, [r3, #396]	; 0x18c
    2704:	ldr	r2, [r3, #8]
    2708:	ldr	r3, [fp, #-8]
    270c:	ldr	r3, [r3]
    2710:	ldr	r3, [r3, #8]
    2714:	mov	r1, r3
    2718:	mov	r0, r2
    271c:	bl	0 <coda_type_add_attribute>
    2720:	mov	r3, r0
    2724:	cmp	r3, #0
    2728:	beq	2734 <type_add_attribute+0x50>
    272c:	mvn	r3, #0
    2730:	b	2748 <type_add_attribute+0x64>
    2734:	ldr	r3, [fp, #-8]
    2738:	ldr	r3, [r3]
    273c:	mov	r2, #0
    2740:	str	r2, [r3, #8]
    2744:	mov	r3, #0
    2748:	mov	r0, r3
    274c:	sub	sp, fp, #4
    2750:	ldr	fp, [sp]
    2754:	add	sp, sp, #4
    2758:	pop	{pc}		; (ldr pc, [sp], #4)

0000275c <xml_root_set_field>:
    275c:	str	fp, [sp, #-8]!
    2760:	str	lr, [sp, #4]
    2764:	add	fp, sp, #4
    2768:	sub	sp, sp, #8
    276c:	str	r0, [fp, #-8]
    2770:	ldr	r3, [fp, #-8]
    2774:	ldr	r3, [r3]
    2778:	ldr	r3, [r3, #396]	; 0x18c
    277c:	ldr	r2, [r3, #8]
    2780:	ldr	r3, [fp, #-8]
    2784:	ldr	r3, [r3]
    2788:	ldr	r3, [r3, #8]
    278c:	mov	r1, r3
    2790:	mov	r0, r2
    2794:	bl	0 <coda_type_record_add_field>
    2798:	mov	r3, r0
    279c:	cmp	r3, #0
    27a0:	beq	27ac <xml_root_set_field+0x50>
    27a4:	mvn	r3, #0
    27a8:	b	27c0 <xml_root_set_field+0x64>
    27ac:	ldr	r3, [fp, #-8]
    27b0:	ldr	r3, [r3]
    27b4:	mov	r2, #0
    27b8:	str	r2, [r3, #8]
    27bc:	mov	r3, #0
    27c0:	mov	r0, r3
    27c4:	sub	sp, fp, #4
    27c8:	ldr	fp, [sp]
    27cc:	add	sp, sp, #4
    27d0:	pop	{pc}		; (ldr pc, [sp], #4)

000027d4 <xml_root_init>:
    27d4:	str	r4, [sp, #-12]!
    27d8:	str	fp, [sp, #4]
    27dc:	str	lr, [sp, #8]
    27e0:	add	fp, sp, #8
    27e4:	sub	sp, sp, #20
    27e8:	str	r0, [fp, #-24]	; 0xffffffe8
    27ec:	str	r1, [fp, #-28]	; 0xffffffe4
    27f0:	mov	r3, #0
    27f4:	str	r3, [fp, #-16]
    27f8:	ldr	r3, [fp, #-24]	; 0xffffffe8
    27fc:	ldr	r3, [r3, #28]
    2800:	cmp	r3, #0
    2804:	bne	2828 <xml_root_init+0x54>
    2808:	movw	r3, #0
    280c:	movt	r3, #0
    2810:	mov	r2, #1184	; 0x4a0
    2814:	movw	r1, #0
    2818:	movt	r1, #0
    281c:	movw	r0, #0
    2820:	movt	r0, #0
    2824:	bl	0 <__assert_fail>
    2828:	ldr	r1, [fp, #-28]	; 0xffffffe4
    282c:	ldr	r0, [fp, #-24]	; 0xffffffe8
    2830:	bl	117c <handle_format_attribute_for_type>
    2834:	mov	r3, r0
    2838:	cmp	r3, #0
    283c:	beq	2848 <xml_root_init+0x74>
    2840:	mvn	r3, #0
    2844:	b	29a4 <xml_root_init+0x1d0>
    2848:	ldr	r3, [fp, #-24]	; 0xffffffe8
    284c:	ldr	r3, [r3]
    2850:	ldr	r3, [r3, #44]	; 0x2c
    2854:	cmp	r3, #2
    2858:	beq	289c <xml_root_init+0xc8>
    285c:	ldr	r3, [fp, #-24]	; 0xffffffe8
    2860:	ldr	r3, [r3]
    2864:	ldr	r3, [r3, #44]	; 0x2c
    2868:	mov	r0, r3
    286c:	bl	0 <coda_type_get_format_name>
    2870:	mov	r2, r0
    2874:	ldr	r3, [fp, #-24]	; 0xffffffe8
    2878:	ldr	r3, [r3, #28]
    287c:	ldr	r3, [r3, #8]
    2880:	movw	r1, #0
    2884:	movt	r1, #0
    2888:	movw	r0, #65136	; 0xfe70
    288c:	movt	r0, #65535	; 0xffff
    2890:	bl	0 <coda_set_error>
    2894:	mvn	r3, #0
    2898:	b	29a4 <xml_root_init+0x1d0>
    289c:	movw	r1, #0
    28a0:	movt	r1, #0
    28a4:	ldr	r0, [fp, #-28]	; 0xffffffe4
    28a8:	bl	f5c <get_attribute_value>
    28ac:	str	r0, [fp, #-16]
    28b0:	ldr	r3, [fp, #-16]
    28b4:	cmp	r3, #0
    28b8:	beq	28d8 <xml_root_init+0x104>
    28bc:	movw	r1, #0
    28c0:	movt	r1, #0
    28c4:	movw	r0, #65136	; 0xfe70
    28c8:	movt	r0, #65535	; 0xffff
    28cc:	bl	0 <coda_set_error>
    28d0:	mvn	r3, #0
    28d4:	b	29a4 <xml_root_init+0x1d0>
    28d8:	movw	r1, #0
    28dc:	movt	r1, #0
    28e0:	ldr	r0, [fp, #-28]	; 0xffffffe4
    28e4:	bl	f5c <get_attribute_value>
    28e8:	str	r0, [fp, #-16]
    28ec:	ldr	r3, [fp, #-16]
    28f0:	cmp	r3, #0
    28f4:	beq	2914 <xml_root_init+0x140>
    28f8:	movw	r1, #0
    28fc:	movt	r1, #0
    2900:	movw	r0, #65136	; 0xfe70
    2904:	movt	r0, #65535	; 0xffff
    2908:	bl	0 <coda_set_error>
    290c:	mvn	r3, #0
    2910:	b	29a4 <xml_root_init+0x1d0>
    2914:	ldr	r3, [fp, #-24]	; 0xffffffe8
    2918:	ldr	r2, [r3]
    291c:	movw	r3, #0
    2920:	movt	r3, #0
    2924:	str	r3, [r2, #40]	; 0x28
    2928:	ldr	r3, [fp, #-24]	; 0xffffffe8
    292c:	ldr	r4, [r3]
    2930:	mov	r0, #2
    2934:	bl	0 <coda_type_record_new>
    2938:	mov	r3, r0
    293c:	str	r3, [r4, #8]
    2940:	ldr	r1, [fp, #-28]	; 0xffffffe4
    2944:	ldr	r0, [fp, #-24]	; 0xffffffe8
    2948:	bl	104c <handle_name_attribute_for_type>
    294c:	mov	r3, r0
    2950:	cmp	r3, #0
    2954:	beq	2960 <xml_root_init+0x18c>
    2958:	mvn	r3, #0
    295c:	b	29a4 <xml_root_init+0x1d0>
    2960:	ldr	r3, [fp, #-24]	; 0xffffffe8
    2964:	ldr	r0, [r3]
    2968:	movw	r3, #0
    296c:	movt	r3, #0
    2970:	movw	r2, #0
    2974:	movt	r2, #0
    2978:	mov	r1, #11
    297c:	bl	1530 <register_sub_element>
    2980:	ldr	r3, [fp, #-24]	; 0xffffffe8
    2984:	ldr	r0, [r3]
    2988:	movw	r3, #0
    298c:	movt	r3, #0
    2990:	movw	r2, #0
    2994:	movt	r2, #0
    2998:	mov	r1, #14
    299c:	bl	1530 <register_sub_element>
    29a0:	mov	r3, #0
    29a4:	mov	r0, r3
    29a8:	sub	sp, fp, #8
    29ac:	ldr	r4, [sp]
    29b0:	ldr	fp, [sp, #4]
    29b4:	add	sp, sp, #8
    29b8:	pop	{pc}		; (ldr pc, [sp], #4)

000029bc <cd_array_set_type>:
    29bc:	str	fp, [sp, #-8]!
    29c0:	str	lr, [sp, #4]
    29c4:	add	fp, sp, #4
    29c8:	sub	sp, sp, #8
    29cc:	str	r0, [fp, #-8]
    29d0:	ldr	r3, [fp, #-8]
    29d4:	ldr	r3, [r3]
    29d8:	ldr	r3, [r3, #396]	; 0x18c
    29dc:	ldr	r2, [r3, #8]
    29e0:	ldr	r3, [fp, #-8]
    29e4:	ldr	r3, [r3]
    29e8:	ldr	r3, [r3, #8]
    29ec:	mov	r1, r3
    29f0:	mov	r0, r2
    29f4:	bl	0 <coda_type_array_set_base_type>
    29f8:	mov	r3, r0
    29fc:	mov	r0, r3
    2a00:	sub	sp, fp, #4
    2a04:	ldr	fp, [sp]
    2a08:	add	sp, sp, #4
    2a0c:	pop	{pc}		; (ldr pc, [sp], #4)

00002a10 <cd_array_add_dimension>:
    2a10:	str	fp, [sp, #-8]!
    2a14:	str	lr, [sp, #4]
    2a18:	add	fp, sp, #4
    2a1c:	sub	sp, sp, #8
    2a20:	str	r0, [fp, #-8]
    2a24:	ldr	r3, [fp, #-8]
    2a28:	ldr	r3, [r3]
    2a2c:	ldr	r3, [r3, #8]
    2a30:	cmp	r3, #0
    2a34:	bne	2a4c <cd_array_add_dimension+0x3c>
    2a38:	ldr	r3, [fp, #-8]
    2a3c:	ldr	r3, [r3]
    2a40:	ldr	r3, [r3, #4]
    2a44:	cmp	r3, #0
    2a48:	beq	2a9c <cd_array_add_dimension+0x8c>
    2a4c:	ldr	r3, [fp, #-8]
    2a50:	ldr	r3, [r3]
    2a54:	ldr	r3, [r3, #396]	; 0x18c
    2a58:	ldr	r2, [r3, #8]
    2a5c:	ldr	r3, [fp, #-8]
    2a60:	ldr	r3, [r3]
    2a64:	ldr	r3, [r3, #8]
    2a68:	mov	r1, r3
    2a6c:	mov	r0, r2
    2a70:	bl	0 <coda_type_array_add_variable_dimension>
    2a74:	mov	r3, r0
    2a78:	cmp	r3, #0
    2a7c:	beq	2a88 <cd_array_add_dimension+0x78>
    2a80:	mvn	r3, #0
    2a84:	b	2adc <cd_array_add_dimension+0xcc>
    2a88:	ldr	r3, [fp, #-8]
    2a8c:	ldr	r3, [r3]
    2a90:	mov	r2, #0
    2a94:	str	r2, [r3, #8]
    2a98:	b	2ad8 <cd_array_add_dimension+0xc8>
    2a9c:	ldr	r3, [fp, #-8]
    2aa0:	ldr	r3, [r3]
    2aa4:	ldr	r3, [r3, #396]	; 0x18c
    2aa8:	ldr	r0, [r3, #8]
    2aac:	ldr	r3, [fp, #-8]
    2ab0:	ldr	r3, [r3]
    2ab4:	ldrd	r2, [r3, #16]
    2ab8:	mov	r3, r2
    2abc:	mov	r1, r3
    2ac0:	bl	0 <coda_type_array_add_fixed_dimension>
    2ac4:	mov	r3, r0
    2ac8:	cmp	r3, #0
    2acc:	beq	2ad8 <cd_array_add_dimension+0xc8>
    2ad0:	mvn	r3, #0
    2ad4:	b	2adc <cd_array_add_dimension+0xcc>
    2ad8:	mov	r3, #0
    2adc:	mov	r0, r3
    2ae0:	sub	sp, fp, #4
    2ae4:	ldr	fp, [sp]
    2ae8:	add	sp, sp, #4
    2aec:	pop	{pc}		; (ldr pc, [sp], #4)

00002af0 <cd_array_finalise>:
    2af0:	str	fp, [sp, #-8]!
    2af4:	str	lr, [sp, #4]
    2af8:	add	fp, sp, #4
    2afc:	sub	sp, sp, #8
    2b00:	str	r0, [fp, #-8]
    2b04:	ldr	r3, [fp, #-8]
    2b08:	ldr	r3, [r3]
    2b0c:	ldr	r3, [r3, #8]
    2b10:	mov	r0, r3
    2b14:	bl	0 <coda_type_array_validate>
    2b18:	mov	r3, r0
    2b1c:	mov	r0, r3
    2b20:	sub	sp, fp, #4
    2b24:	ldr	fp, [sp]
    2b28:	add	sp, sp, #4
    2b2c:	pop	{pc}		; (ldr pc, [sp], #4)

00002b30 <cd_array_init>:
    2b30:	str	r4, [sp, #-12]!
    2b34:	str	fp, [sp, #4]
    2b38:	str	lr, [sp, #8]
    2b3c:	add	fp, sp, #8
    2b40:	sub	sp, sp, #12
    2b44:	str	r0, [fp, #-16]
    2b48:	str	r1, [fp, #-20]	; 0xffffffec
    2b4c:	ldr	r1, [fp, #-20]	; 0xffffffec
    2b50:	ldr	r0, [fp, #-16]
    2b54:	bl	117c <handle_format_attribute_for_type>
    2b58:	mov	r3, r0
    2b5c:	cmp	r3, #0
    2b60:	beq	2b6c <cd_array_init+0x3c>
    2b64:	mvn	r3, #0
    2b68:	b	2c70 <cd_array_init+0x140>
    2b6c:	ldr	r3, [fp, #-16]
    2b70:	ldr	r2, [r3]
    2b74:	movw	r3, #0
    2b78:	movt	r3, #0
    2b7c:	str	r3, [r2, #40]	; 0x28
    2b80:	ldr	r3, [fp, #-16]
    2b84:	ldr	r3, [r3]
    2b88:	ldr	r2, [r3, #44]	; 0x2c
    2b8c:	ldr	r3, [fp, #-16]
    2b90:	ldr	r4, [r3]
    2b94:	mov	r0, r2
    2b98:	bl	0 <coda_type_array_new>
    2b9c:	mov	r3, r0
    2ba0:	str	r3, [r4, #8]
    2ba4:	ldr	r3, [fp, #-16]
    2ba8:	ldr	r3, [r3]
    2bac:	ldr	r3, [r3, #8]
    2bb0:	cmp	r3, #0
    2bb4:	bne	2bc0 <cd_array_init+0x90>
    2bb8:	mvn	r3, #0
    2bbc:	b	2c70 <cd_array_init+0x140>
    2bc0:	ldr	r1, [fp, #-20]	; 0xffffffec
    2bc4:	ldr	r0, [fp, #-16]
    2bc8:	bl	104c <handle_name_attribute_for_type>
    2bcc:	mov	r3, r0
    2bd0:	cmp	r3, #0
    2bd4:	beq	2be0 <cd_array_init+0xb0>
    2bd8:	mvn	r3, #0
    2bdc:	b	2c70 <cd_array_init+0x140>
    2be0:	ldr	r3, [fp, #-16]
    2be4:	ldr	r3, [r3]
    2be8:	movw	r1, #0
    2bec:	movt	r1, #0
    2bf0:	mov	r0, r3
    2bf4:	bl	15c0 <register_type_elements>
    2bf8:	ldr	r3, [fp, #-16]
    2bfc:	ldr	r0, [r3]
    2c00:	movw	r3, #0
    2c04:	movt	r3, #0
    2c08:	movw	r2, #0
    2c0c:	movt	r2, #0
    2c10:	mov	r1, #13
    2c14:	bl	1530 <register_sub_element>
    2c18:	ldr	r3, [fp, #-16]
    2c1c:	ldr	r0, [r3]
    2c20:	movw	r3, #0
    2c24:	movt	r3, #0
    2c28:	movw	r2, #0
    2c2c:	movt	r2, #0
    2c30:	mov	r1, #11
    2c34:	bl	1530 <register_sub_element>
    2c38:	ldr	r3, [fp, #-16]
    2c3c:	ldr	r0, [r3]
    2c40:	movw	r3, #0
    2c44:	movt	r3, #0
    2c48:	movw	r2, #0
    2c4c:	movt	r2, #0
    2c50:	mov	r1, #4
    2c54:	bl	1530 <register_sub_element>
    2c58:	ldr	r3, [fp, #-16]
    2c5c:	ldr	r2, [r3]
    2c60:	movw	r3, #0
    2c64:	movt	r3, #0
    2c68:	str	r3, [r2, #36]	; 0x24
    2c6c:	mov	r3, #0
    2c70:	mov	r0, r3
    2c74:	sub	sp, fp, #8
    2c78:	ldr	r4, [sp]
    2c7c:	ldr	fp, [sp, #4]
    2c80:	add	sp, sp, #8
    2c84:	pop	{pc}		; (ldr pc, [sp], #4)

00002c88 <cd_ascii_line_init>:
    2c88:	str	r4, [sp, #-12]!
    2c8c:	str	fp, [sp, #4]
    2c90:	str	lr, [sp, #8]
    2c94:	add	fp, sp, #8
    2c98:	sub	sp, sp, #12
    2c9c:	str	r0, [fp, #-16]
    2ca0:	str	r1, [fp, #-20]	; 0xffffffec
    2ca4:	ldr	r1, [fp, #-20]	; 0xffffffec
    2ca8:	ldr	r0, [fp, #-16]
    2cac:	bl	117c <handle_format_attribute_for_type>
    2cb0:	mov	r3, r0
    2cb4:	cmp	r3, #0
    2cb8:	beq	2cc4 <cd_ascii_line_init+0x3c>
    2cbc:	mvn	r3, #0
    2cc0:	b	2d88 <cd_ascii_line_init+0x100>
    2cc4:	ldr	r3, [fp, #-16]
    2cc8:	ldr	r2, [r3]
    2ccc:	movw	r3, #0
    2cd0:	movt	r3, #0
    2cd4:	str	r3, [r2, #40]	; 0x28
    2cd8:	ldr	r3, [fp, #-16]
    2cdc:	ldr	r3, [r3]
    2ce0:	ldr	r2, [r3, #44]	; 0x2c
    2ce4:	ldr	r3, [fp, #-16]
    2ce8:	ldr	r4, [r3]
    2cec:	mov	r0, r2
    2cf0:	bl	0 <coda_type_text_new>
    2cf4:	mov	r3, r0
    2cf8:	str	r3, [r4, #8]
    2cfc:	ldr	r3, [fp, #-16]
    2d00:	ldr	r3, [r3]
    2d04:	ldr	r3, [r3, #8]
    2d08:	cmp	r3, #0
    2d0c:	bne	2d18 <cd_ascii_line_init+0x90>
    2d10:	mvn	r3, #0
    2d14:	b	2d88 <cd_ascii_line_init+0x100>
    2d18:	ldr	r3, [fp, #-16]
    2d1c:	ldr	r3, [r3]
    2d20:	ldr	r3, [r3, #8]
    2d24:	mov	r1, #3
    2d28:	mov	r0, r3
    2d2c:	bl	0 <coda_type_text_set_special_text_type>
    2d30:	mov	r3, r0
    2d34:	cmp	r3, #0
    2d38:	beq	2d44 <cd_ascii_line_init+0xbc>
    2d3c:	mvn	r3, #0
    2d40:	b	2d88 <cd_ascii_line_init+0x100>
    2d44:	ldr	r1, [fp, #-20]	; 0xffffffec
    2d48:	ldr	r0, [fp, #-16]
    2d4c:	bl	104c <handle_name_attribute_for_type>
    2d50:	mov	r3, r0
    2d54:	cmp	r3, #0
    2d58:	beq	2d64 <cd_ascii_line_init+0xdc>
    2d5c:	mvn	r3, #0
    2d60:	b	2d88 <cd_ascii_line_init+0x100>
    2d64:	ldr	r3, [fp, #-16]
    2d68:	ldr	r0, [r3]
    2d6c:	movw	r3, #0
    2d70:	movt	r3, #0
    2d74:	movw	r2, #0
    2d78:	movt	r2, #0
    2d7c:	mov	r1, #11
    2d80:	bl	1530 <register_sub_element>
    2d84:	mov	r3, #0
    2d88:	mov	r0, r3
    2d8c:	sub	sp, fp, #8
    2d90:	ldr	r4, [sp]
    2d94:	ldr	fp, [sp, #4]
    2d98:	add	sp, sp, #8
    2d9c:	pop	{pc}		; (ldr pc, [sp], #4)

00002da0 <cd_ascii_line_separator_init>:
    2da0:	str	r4, [sp, #-12]!
    2da4:	str	fp, [sp, #4]
    2da8:	str	lr, [sp, #8]
    2dac:	add	fp, sp, #8
    2db0:	sub	sp, sp, #12
    2db4:	str	r0, [fp, #-16]
    2db8:	str	r1, [fp, #-20]	; 0xffffffec
    2dbc:	ldr	r1, [fp, #-20]	; 0xffffffec
    2dc0:	ldr	r0, [fp, #-16]
    2dc4:	bl	117c <handle_format_attribute_for_type>
    2dc8:	mov	r3, r0
    2dcc:	cmp	r3, #0
    2dd0:	beq	2ddc <cd_ascii_line_separator_init+0x3c>
    2dd4:	mvn	r3, #0
    2dd8:	b	2ea0 <cd_ascii_line_separator_init+0x100>
    2ddc:	ldr	r3, [fp, #-16]
    2de0:	ldr	r2, [r3]
    2de4:	movw	r3, #0
    2de8:	movt	r3, #0
    2dec:	str	r3, [r2, #40]	; 0x28
    2df0:	ldr	r3, [fp, #-16]
    2df4:	ldr	r3, [r3]
    2df8:	ldr	r2, [r3, #44]	; 0x2c
    2dfc:	ldr	r3, [fp, #-16]
    2e00:	ldr	r4, [r3]
    2e04:	mov	r0, r2
    2e08:	bl	0 <coda_type_text_new>
    2e0c:	mov	r3, r0
    2e10:	str	r3, [r4, #8]
    2e14:	ldr	r3, [fp, #-16]
    2e18:	ldr	r3, [r3]
    2e1c:	ldr	r3, [r3, #8]
    2e20:	cmp	r3, #0
    2e24:	bne	2e30 <cd_ascii_line_separator_init+0x90>
    2e28:	mvn	r3, #0
    2e2c:	b	2ea0 <cd_ascii_line_separator_init+0x100>
    2e30:	ldr	r3, [fp, #-16]
    2e34:	ldr	r3, [r3]
    2e38:	ldr	r3, [r3, #8]
    2e3c:	mov	r1, #1
    2e40:	mov	r0, r3
    2e44:	bl	0 <coda_type_text_set_special_text_type>
    2e48:	mov	r3, r0
    2e4c:	cmp	r3, #0
    2e50:	beq	2e5c <cd_ascii_line_separator_init+0xbc>
    2e54:	mvn	r3, #0
    2e58:	b	2ea0 <cd_ascii_line_separator_init+0x100>
    2e5c:	ldr	r1, [fp, #-20]	; 0xffffffec
    2e60:	ldr	r0, [fp, #-16]
    2e64:	bl	104c <handle_name_attribute_for_type>
    2e68:	mov	r3, r0
    2e6c:	cmp	r3, #0
    2e70:	beq	2e7c <cd_ascii_line_separator_init+0xdc>
    2e74:	mvn	r3, #0
    2e78:	b	2ea0 <cd_ascii_line_separator_init+0x100>
    2e7c:	ldr	r3, [fp, #-16]
    2e80:	ldr	r0, [r3]
    2e84:	movw	r3, #0
    2e88:	movt	r3, #0
    2e8c:	movw	r2, #0
    2e90:	movt	r2, #0
    2e94:	mov	r1, #11
    2e98:	bl	1530 <register_sub_element>
    2e9c:	mov	r3, #0
    2ea0:	mov	r0, r3
    2ea4:	sub	sp, fp, #8
    2ea8:	ldr	r4, [sp]
    2eac:	ldr	fp, [sp, #4]
    2eb0:	add	sp, sp, #8
    2eb4:	pop	{pc}		; (ldr pc, [sp], #4)

00002eb8 <cd_ascii_white_space_init>:
    2eb8:	str	r4, [sp, #-12]!
    2ebc:	str	fp, [sp, #4]
    2ec0:	str	lr, [sp, #8]
    2ec4:	add	fp, sp, #8
    2ec8:	sub	sp, sp, #12
    2ecc:	str	r0, [fp, #-16]
    2ed0:	str	r1, [fp, #-20]	; 0xffffffec
    2ed4:	ldr	r1, [fp, #-20]	; 0xffffffec
    2ed8:	ldr	r0, [fp, #-16]
    2edc:	bl	117c <handle_format_attribute_for_type>
    2ee0:	mov	r3, r0
    2ee4:	cmp	r3, #0
    2ee8:	beq	2ef4 <cd_ascii_white_space_init+0x3c>
    2eec:	mvn	r3, #0
    2ef0:	b	2fb8 <cd_ascii_white_space_init+0x100>
    2ef4:	ldr	r3, [fp, #-16]
    2ef8:	ldr	r2, [r3]
    2efc:	movw	r3, #0
    2f00:	movt	r3, #0
    2f04:	str	r3, [r2, #40]	; 0x28
    2f08:	ldr	r3, [fp, #-16]
    2f0c:	ldr	r3, [r3]
    2f10:	ldr	r2, [r3, #44]	; 0x2c
    2f14:	ldr	r3, [fp, #-16]
    2f18:	ldr	r4, [r3]
    2f1c:	mov	r0, r2
    2f20:	bl	0 <coda_type_text_new>
    2f24:	mov	r3, r0
    2f28:	str	r3, [r4, #8]
    2f2c:	ldr	r3, [fp, #-16]
    2f30:	ldr	r3, [r3]
    2f34:	ldr	r3, [r3, #8]
    2f38:	cmp	r3, #0
    2f3c:	bne	2f48 <cd_ascii_white_space_init+0x90>
    2f40:	mvn	r3, #0
    2f44:	b	2fb8 <cd_ascii_white_space_init+0x100>
    2f48:	ldr	r3, [fp, #-16]
    2f4c:	ldr	r3, [r3]
    2f50:	ldr	r3, [r3, #8]
    2f54:	mov	r1, #4
    2f58:	mov	r0, r3
    2f5c:	bl	0 <coda_type_text_set_special_text_type>
    2f60:	mov	r3, r0
    2f64:	cmp	r3, #0
    2f68:	beq	2f74 <cd_ascii_white_space_init+0xbc>
    2f6c:	mvn	r3, #0
    2f70:	b	2fb8 <cd_ascii_white_space_init+0x100>
    2f74:	ldr	r1, [fp, #-20]	; 0xffffffec
    2f78:	ldr	r0, [fp, #-16]
    2f7c:	bl	104c <handle_name_attribute_for_type>
    2f80:	mov	r3, r0
    2f84:	cmp	r3, #0
    2f88:	beq	2f94 <cd_ascii_white_space_init+0xdc>
    2f8c:	mvn	r3, #0
    2f90:	b	2fb8 <cd_ascii_white_space_init+0x100>
    2f94:	ldr	r3, [fp, #-16]
    2f98:	ldr	r0, [r3]
    2f9c:	movw	r3, #0
    2fa0:	movt	r3, #0
    2fa4:	movw	r2, #0
    2fa8:	movt	r2, #0
    2fac:	mov	r1, #11
    2fb0:	bl	1530 <register_sub_element>
    2fb4:	mov	r3, #0
    2fb8:	mov	r0, r3
    2fbc:	sub	sp, fp, #8
    2fc0:	ldr	r4, [sp]
    2fc4:	ldr	fp, [sp, #4]
    2fc8:	add	sp, sp, #8
    2fcc:	pop	{pc}		; (ldr pc, [sp], #4)

00002fd0 <cd_attribute_set_fixed_value>:
    2fd0:	str	r4, [sp, #-12]!
    2fd4:	str	fp, [sp, #4]
    2fd8:	str	lr, [sp, #8]
    2fdc:	add	fp, sp, #8
    2fe0:	sub	sp, sp, #20
    2fe4:	str	r0, [fp, #-24]	; 0xffffffe8
    2fe8:	mov	r3, #0
    2fec:	str	r3, [fp, #-16]
    2ff0:	ldr	r3, [fp, #-24]	; 0xffffffe8
    2ff4:	ldr	r3, [r3]
    2ff8:	ldr	r3, [r3, #12]
    2ffc:	mov	r0, r3
    3000:	bl	844 <decode_escaped_string>
    3004:	mov	r3, r0
    3008:	cmp	r3, #0
    300c:	bge	302c <cd_attribute_set_fixed_value+0x5c>
    3010:	movw	r1, #0
    3014:	movt	r1, #0
    3018:	movw	r0, #65136	; 0xfe70
    301c:	movt	r0, #65535	; 0xffff
    3020:	bl	0 <coda_set_error>
    3024:	mvn	r3, #0
    3028:	b	317c <cd_attribute_set_fixed_value+0x1ac>
    302c:	ldr	r3, [fp, #-24]	; 0xffffffe8
    3030:	ldr	r3, [r3]
    3034:	ldr	r3, [r3, #396]	; 0x18c
    3038:	ldr	r3, [r3, #8]
    303c:	sub	r2, fp, #16
    3040:	mov	r1, r2
    3044:	mov	r0, r3
    3048:	bl	0 <coda_type_record_field_get_type>
    304c:	mov	r3, r0
    3050:	cmp	r3, #0
    3054:	beq	3060 <cd_attribute_set_fixed_value+0x90>
    3058:	mvn	r3, #0
    305c:	b	317c <cd_attribute_set_fixed_value+0x1ac>
    3060:	ldr	r3, [fp, #-16]
    3064:	cmp	r3, #0
    3068:	beq	3088 <cd_attribute_set_fixed_value+0xb8>
    306c:	movw	r1, #0
    3070:	movt	r1, #0
    3074:	movw	r0, #65136	; 0xfe70
    3078:	movt	r0, #65535	; 0xffff
    307c:	bl	0 <coda_set_error>
    3080:	mvn	r3, #0
    3084:	b	317c <cd_attribute_set_fixed_value+0x1ac>
    3088:	ldr	r3, [fp, #-24]	; 0xffffffe8
    308c:	ldr	r3, [r3]
    3090:	ldr	r3, [r3, #396]	; 0x18c
    3094:	ldr	r3, [r3, #44]	; 0x2c
    3098:	mov	r0, r3
    309c:	bl	0 <coda_type_text_new>
    30a0:	mov	r3, r0
    30a4:	str	r3, [fp, #-16]
    30a8:	ldr	r3, [fp, #-16]
    30ac:	cmp	r3, #0
    30b0:	bne	30bc <cd_attribute_set_fixed_value+0xec>
    30b4:	mvn	r3, #0
    30b8:	b	317c <cd_attribute_set_fixed_value+0x1ac>
    30bc:	ldr	r3, [fp, #-24]	; 0xffffffe8
    30c0:	ldr	r3, [r3]
    30c4:	ldr	r3, [r3, #396]	; 0x18c
    30c8:	ldr	r3, [r3, #8]
    30cc:	ldr	r2, [fp, #-16]
    30d0:	mov	r1, r2
    30d4:	mov	r0, r3
    30d8:	bl	0 <coda_type_record_field_set_type>
    30dc:	mov	r3, r0
    30e0:	cmp	r3, #0
    30e4:	beq	30fc <cd_attribute_set_fixed_value+0x12c>
    30e8:	ldr	r3, [fp, #-16]
    30ec:	mov	r0, r3
    30f0:	bl	0 <coda_type_release>
    30f4:	mvn	r3, #0
    30f8:	b	317c <cd_attribute_set_fixed_value+0x1ac>
    30fc:	ldr	r3, [fp, #-16]
    3100:	mov	r0, r3
    3104:	bl	0 <coda_type_release>
    3108:	ldr	r2, [fp, #-16]
    310c:	ldr	r3, [fp, #-24]	; 0xffffffe8
    3110:	ldr	r3, [r3]
    3114:	ldr	r3, [r3, #12]
    3118:	mov	r1, r3
    311c:	mov	r0, r2
    3120:	bl	0 <coda_type_text_set_fixed_value>
    3124:	mov	r3, r0
    3128:	cmp	r3, #0
    312c:	beq	3138 <cd_attribute_set_fixed_value+0x168>
    3130:	mvn	r3, #0
    3134:	b	317c <cd_attribute_set_fixed_value+0x1ac>
    3138:	ldr	r4, [fp, #-16]
    313c:	ldr	r3, [fp, #-24]	; 0xffffffe8
    3140:	ldr	r3, [r3]
    3144:	ldr	r3, [r3, #12]
    3148:	mov	r0, r3
    314c:	bl	0 <strlen>
    3150:	mov	r3, r0
    3154:	mov	r2, r3
    3158:	mov	r3, #0
    315c:	mov	r0, r4
    3160:	bl	0 <coda_type_set_byte_size>
    3164:	mov	r3, r0
    3168:	cmp	r3, #0
    316c:	beq	3178 <cd_attribute_set_fixed_value+0x1a8>
    3170:	mvn	r3, #0
    3174:	b	317c <cd_attribute_set_fixed_value+0x1ac>
    3178:	mov	r3, #0
    317c:	mov	r0, r3
    3180:	sub	sp, fp, #8
    3184:	ldr	r4, [sp]
    3188:	ldr	fp, [sp, #4]
    318c:	add	sp, sp, #8
    3190:	pop	{pc}		; (ldr pc, [sp], #4)

00003194 <cd_attribute_finalise>:
    3194:	str	fp, [sp, #-8]!
    3198:	str	lr, [sp, #4]
    319c:	add	fp, sp, #4
    31a0:	sub	sp, sp, #16
    31a4:	str	r0, [fp, #-16]
    31a8:	mov	r3, #0
    31ac:	str	r3, [fp, #-8]
    31b0:	ldr	r3, [fp, #-16]
    31b4:	ldr	r3, [r3]
    31b8:	ldr	r3, [r3, #8]
    31bc:	sub	r2, fp, #8
    31c0:	mov	r1, r2
    31c4:	mov	r0, r3
    31c8:	bl	0 <coda_type_record_field_get_type>
    31cc:	mov	r3, r0
    31d0:	cmp	r3, #0
    31d4:	beq	31e0 <cd_attribute_finalise+0x4c>
    31d8:	mvn	r3, #0
    31dc:	b	327c <cd_attribute_finalise+0xe8>
    31e0:	ldr	r3, [fp, #-8]
    31e4:	cmp	r3, #0
    31e8:	bne	3264 <cd_attribute_finalise+0xd0>
    31ec:	ldr	r3, [fp, #-16]
    31f0:	ldr	r3, [r3]
    31f4:	ldr	r3, [r3, #44]	; 0x2c
    31f8:	mov	r0, r3
    31fc:	bl	0 <coda_type_text_new>
    3200:	mov	r3, r0
    3204:	str	r3, [fp, #-8]
    3208:	ldr	r3, [fp, #-8]
    320c:	cmp	r3, #0
    3210:	bne	321c <cd_attribute_finalise+0x88>
    3214:	mvn	r3, #0
    3218:	b	327c <cd_attribute_finalise+0xe8>
    321c:	ldr	r3, [fp, #-16]
    3220:	ldr	r3, [r3]
    3224:	ldr	r3, [r3, #8]
    3228:	ldr	r2, [fp, #-8]
    322c:	mov	r1, r2
    3230:	mov	r0, r3
    3234:	bl	0 <coda_type_record_field_set_type>
    3238:	mov	r3, r0
    323c:	cmp	r3, #0
    3240:	beq	3258 <cd_attribute_finalise+0xc4>
    3244:	ldr	r3, [fp, #-8]
    3248:	mov	r0, r3
    324c:	bl	0 <coda_type_release>
    3250:	mvn	r3, #0
    3254:	b	327c <cd_attribute_finalise+0xe8>
    3258:	ldr	r3, [fp, #-8]
    325c:	mov	r0, r3
    3260:	bl	0 <coda_type_release>
    3264:	ldr	r3, [fp, #-16]
    3268:	ldr	r3, [r3]
    326c:	ldr	r3, [r3, #8]
    3270:	mov	r0, r3
    3274:	bl	0 <coda_type_record_field_validate>
    3278:	mov	r3, r0
    327c:	mov	r0, r3
    3280:	sub	sp, fp, #4
    3284:	ldr	fp, [sp]
    3288:	add	sp, sp, #4
    328c:	pop	{pc}		; (ldr pc, [sp], #4)

00003290 <cd_attribute_init>:
    3290:	str	r4, [sp, #-12]!
    3294:	str	fp, [sp, #4]
    3298:	str	lr, [sp, #8]
    329c:	add	fp, sp, #8
    32a0:	sub	sp, sp, #28
    32a4:	str	r0, [fp, #-32]	; 0xffffffe0
    32a8:	str	r1, [fp, #-36]	; 0xffffffdc
    32ac:	mov	r3, #0
    32b0:	str	r3, [fp, #-20]	; 0xffffffec
    32b4:	mov	r3, #0
    32b8:	str	r3, [fp, #-24]	; 0xffffffe8
    32bc:	mov	r3, #0
    32c0:	str	r3, [fp, #-16]
    32c4:	movw	r1, #0
    32c8:	movt	r1, #0
    32cc:	ldr	r0, [fp, #-36]	; 0xffffffdc
    32d0:	bl	f5c <get_attribute_value>
    32d4:	str	r0, [fp, #-20]	; 0xffffffec
    32d8:	ldr	r3, [fp, #-20]	; 0xffffffec
    32dc:	cmp	r3, #0
    32e0:	beq	3300 <cd_attribute_init+0x70>
    32e4:	movw	r1, #0
    32e8:	movt	r1, #0
    32ec:	movw	r0, #65136	; 0xfe70
    32f0:	movt	r0, #65535	; 0xffff
    32f4:	bl	0 <coda_set_error>
    32f8:	mvn	r3, #0
    32fc:	b	3594 <cd_attribute_init+0x304>
    3300:	ldr	r3, [fp, #-32]	; 0xffffffe0
    3304:	ldr	r3, [r3]
    3308:	ldr	r3, [r3, #396]	; 0x18c
    330c:	ldr	r3, [r3, #48]	; 0x30
    3310:	cmp	r3, #0
    3314:	bne	3338 <cd_attribute_init+0xa8>
    3318:	movw	r3, #0
    331c:	movt	r3, #0
    3320:	movw	r2, #1439	; 0x59f
    3324:	movw	r1, #0
    3328:	movt	r1, #0
    332c:	movw	r0, #0
    3330:	movt	r0, #0
    3334:	bl	0 <__assert_fail>
    3338:	ldr	r3, [fp, #-32]	; 0xffffffe0
    333c:	ldr	r3, [r3]
    3340:	ldr	r2, [r3, #396]	; 0x18c
    3344:	ldr	r3, [fp, #-32]	; 0xffffffe0
    3348:	ldr	r3, [r3]
    334c:	ldr	r2, [r2, #44]	; 0x2c
    3350:	str	r2, [r3, #44]	; 0x2c
    3354:	ldr	r3, [fp, #-32]	; 0xffffffe0
    3358:	ldr	r3, [r3]
    335c:	mov	r2, #1
    3360:	str	r2, [r3, #48]	; 0x30
    3364:	movw	r1, #0
    3368:	movt	r1, #0
    336c:	ldr	r0, [fp, #-36]	; 0xffffffdc
    3370:	bl	f5c <get_attribute_value>
    3374:	mov	r3, r0
    3378:	cmp	r3, #0
    337c:	beq	339c <cd_attribute_init+0x10c>
    3380:	movw	r1, #0
    3384:	movt	r1, #0
    3388:	movw	r0, #65136	; 0xfe70
    338c:	movt	r0, #65535	; 0xffff
    3390:	bl	0 <coda_set_error>
    3394:	mvn	r3, #0
    3398:	b	3594 <cd_attribute_init+0x304>
    339c:	ldr	r3, [fp, #-32]	; 0xffffffe0
    33a0:	ldr	r3, [r3]
    33a4:	ldr	r3, [r3]
    33a8:	mov	r2, r3
    33ac:	movw	r1, #0
    33b0:	movt	r1, #0
    33b4:	ldr	r0, [fp, #-36]	; 0xffffffdc
    33b8:	bl	fd8 <get_mandatory_attribute_value>
    33bc:	str	r0, [fp, #-24]	; 0xffffffe8
    33c0:	ldr	r3, [fp, #-24]	; 0xffffffe8
    33c4:	cmp	r3, #0
    33c8:	bne	33d4 <cd_attribute_init+0x144>
    33cc:	mvn	r3, #0
    33d0:	b	3594 <cd_attribute_init+0x304>
    33d4:	movw	r1, #0
    33d8:	movt	r1, #0
    33dc:	ldr	r0, [fp, #-36]	; 0xffffffdc
    33e0:	bl	f5c <get_attribute_value>
    33e4:	str	r0, [fp, #-16]
    33e8:	ldr	r3, [fp, #-32]	; 0xffffffe0
    33ec:	ldr	r2, [r3]
    33f0:	movw	r3, #0
    33f4:	movt	r3, #0
    33f8:	str	r3, [r2, #40]	; 0x28
    33fc:	ldr	r3, [fp, #-32]	; 0xffffffe0
    3400:	ldr	r3, [r3]
    3404:	ldr	r3, [r3, #44]	; 0x2c
    3408:	cmp	r3, #2
    340c:	bne	3478 <cd_attribute_init+0x1e8>
    3410:	ldr	r3, [fp, #-16]
    3414:	cmp	r3, #0
    3418:	bne	3478 <cd_attribute_init+0x1e8>
    341c:	ldr	r3, [fp, #-24]	; 0xffffffe8
    3420:	str	r3, [fp, #-16]
    3424:	ldr	r0, [fp, #-24]	; 0xffffffe8
    3428:	bl	0 <coda_element_name_from_xml_name>
    342c:	mov	r3, r0
    3430:	mov	r1, #0
    3434:	mov	r0, r3
    3438:	bl	0 <coda_identifier_from_name>
    343c:	str	r0, [fp, #-28]	; 0xffffffe4
    3440:	ldr	r3, [fp, #-28]	; 0xffffffe4
    3444:	cmp	r3, #0
    3448:	bne	3454 <cd_attribute_init+0x1c4>
    344c:	mvn	r3, #0
    3450:	b	3594 <cd_attribute_init+0x304>
    3454:	ldr	r3, [fp, #-32]	; 0xffffffe0
    3458:	ldr	r4, [r3]
    345c:	ldr	r0, [fp, #-28]	; 0xffffffe4
    3460:	bl	0 <coda_type_record_field_new>
    3464:	mov	r3, r0
    3468:	str	r3, [r4, #8]
    346c:	ldr	r0, [fp, #-28]	; 0xffffffe4
    3470:	bl	0 <free>
    3474:	b	3490 <cd_attribute_init+0x200>
    3478:	ldr	r3, [fp, #-32]	; 0xffffffe0
    347c:	ldr	r4, [r3]
    3480:	ldr	r0, [fp, #-24]	; 0xffffffe8
    3484:	bl	0 <coda_type_record_field_new>
    3488:	mov	r3, r0
    348c:	str	r3, [r4, #8]
    3490:	ldr	r3, [fp, #-32]	; 0xffffffe0
    3494:	ldr	r3, [r3]
    3498:	ldr	r3, [r3, #8]
    349c:	cmp	r3, #0
    34a0:	bne	34ac <cd_attribute_init+0x21c>
    34a4:	mvn	r3, #0
    34a8:	b	3594 <cd_attribute_init+0x304>
    34ac:	ldr	r3, [fp, #-16]
    34b0:	cmp	r3, #0
    34b4:	beq	34e4 <cd_attribute_init+0x254>
    34b8:	ldr	r3, [fp, #-32]	; 0xffffffe0
    34bc:	ldr	r3, [r3]
    34c0:	ldr	r3, [r3, #8]
    34c4:	ldr	r1, [fp, #-16]
    34c8:	mov	r0, r3
    34cc:	bl	0 <coda_type_record_field_set_real_name>
    34d0:	mov	r3, r0
    34d4:	cmp	r3, #0
    34d8:	beq	34e4 <cd_attribute_init+0x254>
    34dc:	mvn	r3, #0
    34e0:	b	3594 <cd_attribute_init+0x304>
    34e4:	ldr	r3, [fp, #-32]	; 0xffffffe0
    34e8:	ldr	r3, [r3]
    34ec:	movw	r1, #0
    34f0:	movt	r1, #0
    34f4:	mov	r0, r3
    34f8:	bl	15c0 <register_type_elements>
    34fc:	ldr	r3, [fp, #-32]	; 0xffffffe0
    3500:	ldr	r0, [r3]
    3504:	movw	r3, #0
    3508:	movt	r3, #0
    350c:	movw	r2, #0
    3510:	movt	r2, #0
    3514:	mov	r1, #18
    3518:	bl	1530 <register_sub_element>
    351c:	ldr	r3, [fp, #-32]	; 0xffffffe0
    3520:	ldr	r0, [r3]
    3524:	movw	r3, #0
    3528:	movt	r3, #0
    352c:	movw	r2, #0
    3530:	movt	r2, #0
    3534:	mov	r1, #29
    3538:	bl	1530 <register_sub_element>
    353c:	ldr	r3, [fp, #-32]	; 0xffffffe0
    3540:	ldr	r0, [r3]
    3544:	movw	r3, #0
    3548:	movt	r3, #0
    354c:	movw	r2, #0
    3550:	movt	r2, #0
    3554:	mov	r1, #5
    3558:	bl	1530 <register_sub_element>
    355c:	ldr	r3, [fp, #-32]	; 0xffffffe0
    3560:	ldr	r0, [r3]
    3564:	movw	r3, #0
    3568:	movt	r3, #0
    356c:	movw	r2, #0
    3570:	movt	r2, #0
    3574:	mov	r1, #16
    3578:	bl	1530 <register_sub_element>
    357c:	ldr	r3, [fp, #-32]	; 0xffffffe0
    3580:	ldr	r2, [r3]
    3584:	movw	r3, #0
    3588:	movt	r3, #0
    358c:	str	r3, [r2, #36]	; 0x24
    3590:	mov	r3, #0
    3594:	mov	r0, r3
    3598:	sub	sp, fp, #8
    359c:	ldr	r4, [sp]
    35a0:	ldr	fp, [sp, #4]
    35a4:	add	sp, sp, #8
    35a8:	pop	{pc}		; (ldr pc, [sp], #4)

000035ac <cd_complex_set_type>:
    35ac:	str	fp, [sp, #-8]!
    35b0:	str	lr, [sp, #4]
    35b4:	add	fp, sp, #4
    35b8:	sub	sp, sp, #8
    35bc:	str	r0, [fp, #-8]
    35c0:	ldr	r3, [fp, #-8]
    35c4:	ldr	r3, [r3]
    35c8:	ldr	r3, [r3, #396]	; 0x18c
    35cc:	ldr	r2, [r3, #8]
    35d0:	ldr	r3, [fp, #-8]
    35d4:	ldr	r3, [r3]
    35d8:	ldr	r3, [r3, #8]
    35dc:	mov	r1, r3
    35e0:	mov	r0, r2
    35e4:	bl	0 <coda_type_complex_set_type>
    35e8:	mov	r3, r0
    35ec:	mov	r0, r3
    35f0:	sub	sp, fp, #4
    35f4:	ldr	fp, [sp]
    35f8:	add	sp, sp, #4
    35fc:	pop	{pc}		; (ldr pc, [sp], #4)

00003600 <cd_complex_finalise>:
    3600:	str	fp, [sp, #-8]!
    3604:	str	lr, [sp, #4]
    3608:	add	fp, sp, #4
    360c:	sub	sp, sp, #8
    3610:	str	r0, [fp, #-8]
    3614:	ldr	r3, [fp, #-8]
    3618:	ldr	r3, [r3]
    361c:	ldr	r3, [r3, #8]
    3620:	mov	r0, r3
    3624:	bl	0 <coda_type_complex_validate>
    3628:	mov	r3, r0
    362c:	mov	r0, r3
    3630:	sub	sp, fp, #4
    3634:	ldr	fp, [sp]
    3638:	add	sp, sp, #4
    363c:	pop	{pc}		; (ldr pc, [sp], #4)

00003640 <cd_complex_init>:
    3640:	str	r4, [sp, #-12]!
    3644:	str	fp, [sp, #4]
    3648:	str	lr, [sp, #8]
    364c:	add	fp, sp, #8
    3650:	sub	sp, sp, #12
    3654:	str	r0, [fp, #-16]
    3658:	str	r1, [fp, #-20]	; 0xffffffec
    365c:	ldr	r1, [fp, #-20]	; 0xffffffec
    3660:	ldr	r0, [fp, #-16]
    3664:	bl	117c <handle_format_attribute_for_type>
    3668:	mov	r3, r0
    366c:	cmp	r3, #0
    3670:	beq	367c <cd_complex_init+0x3c>
    3674:	mvn	r3, #0
    3678:	b	3768 <cd_complex_init+0x128>
    367c:	ldr	r3, [fp, #-16]
    3680:	ldr	r2, [r3]
    3684:	movw	r3, #0
    3688:	movt	r3, #0
    368c:	str	r3, [r2, #40]	; 0x28
    3690:	ldr	r3, [fp, #-16]
    3694:	ldr	r3, [r3]
    3698:	ldr	r2, [r3, #44]	; 0x2c
    369c:	ldr	r3, [fp, #-16]
    36a0:	ldr	r4, [r3]
    36a4:	mov	r0, r2
    36a8:	bl	0 <coda_type_complex_new>
    36ac:	mov	r3, r0
    36b0:	str	r3, [r4, #8]
    36b4:	ldr	r3, [fp, #-16]
    36b8:	ldr	r3, [r3]
    36bc:	ldr	r3, [r3, #8]
    36c0:	cmp	r3, #0
    36c4:	bne	36d0 <cd_complex_init+0x90>
    36c8:	mvn	r3, #0
    36cc:	b	3768 <cd_complex_init+0x128>
    36d0:	ldr	r1, [fp, #-20]	; 0xffffffec
    36d4:	ldr	r0, [fp, #-16]
    36d8:	bl	104c <handle_name_attribute_for_type>
    36dc:	mov	r3, r0
    36e0:	cmp	r3, #0
    36e4:	beq	36f0 <cd_complex_init+0xb0>
    36e8:	mvn	r3, #0
    36ec:	b	3768 <cd_complex_init+0x128>
    36f0:	ldr	r3, [fp, #-16]
    36f4:	ldr	r0, [r3]
    36f8:	movw	r3, #0
    36fc:	movt	r3, #0
    3700:	movw	r2, #0
    3704:	movt	r2, #0
    3708:	mov	r1, #11
    370c:	bl	1530 <register_sub_element>
    3710:	ldr	r3, [fp, #-16]
    3714:	ldr	r0, [r3]
    3718:	movw	r3, #0
    371c:	movt	r3, #0
    3720:	movw	r2, #0
    3724:	movt	r2, #0
    3728:	mov	r1, #17
    372c:	bl	1530 <register_sub_element>
    3730:	ldr	r3, [fp, #-16]
    3734:	ldr	r0, [r3]
    3738:	movw	r3, #0
    373c:	movt	r3, #0
    3740:	movw	r2, #0
    3744:	movt	r2, #0
    3748:	mov	r1, #20
    374c:	bl	1530 <register_sub_element>
    3750:	ldr	r3, [fp, #-16]
    3754:	ldr	r2, [r3]
    3758:	movw	r3, #0
    375c:	movt	r3, #0
    3760:	str	r3, [r2, #36]	; 0x24
    3764:	mov	r3, #0
    3768:	mov	r0, r3
    376c:	sub	sp, fp, #8
    3770:	ldr	r4, [sp]
    3774:	ldr	fp, [sp, #4]
    3778:	add	sp, sp, #8
    377c:	pop	{pc}		; (ldr pc, [sp], #4)

00003780 <cd_conversion_set_unit>:
    3780:	str	fp, [sp, #-8]!
    3784:	str	lr, [sp, #4]
    3788:	add	fp, sp, #4
    378c:	sub	sp, sp, #8
    3790:	str	r0, [fp, #-8]
    3794:	ldr	r3, [fp, #-8]
    3798:	ldr	r3, [r3]
    379c:	ldr	r3, [r3, #12]
    37a0:	cmp	r3, #0
    37a4:	bne	37d0 <cd_conversion_set_unit+0x50>
    37a8:	ldr	r3, [fp, #-8]
    37ac:	ldr	r3, [r3]
    37b0:	ldr	r3, [r3, #396]	; 0x18c
    37b4:	ldr	r3, [r3, #8]
    37b8:	movw	r1, #0
    37bc:	movt	r1, #0
    37c0:	mov	r0, r3
    37c4:	bl	0 <coda_conversion_set_unit>
    37c8:	mov	r3, r0
    37cc:	b	37fc <cd_conversion_set_unit+0x7c>
    37d0:	ldr	r3, [fp, #-8]
    37d4:	ldr	r3, [r3]
    37d8:	ldr	r3, [r3, #396]	; 0x18c
    37dc:	ldr	r2, [r3, #8]
    37e0:	ldr	r3, [fp, #-8]
    37e4:	ldr	r3, [r3]
    37e8:	ldr	r3, [r3, #12]
    37ec:	mov	r1, r3
    37f0:	mov	r0, r2
    37f4:	bl	0 <coda_conversion_set_unit>
    37f8:	mov	r3, r0
    37fc:	mov	r0, r3
    3800:	sub	sp, fp, #4
    3804:	ldr	fp, [sp]
    3808:	add	sp, sp, #4
    380c:	pop	{pc}		; (ldr pc, [sp], #4)

00003810 <cd_conversion_init>:
    3810:	str	r4, [sp, #-12]!
    3814:	str	fp, [sp, #4]
    3818:	str	lr, [sp, #8]
    381c:	add	fp, sp, #8
    3820:	sub	sp, sp, #60	; 0x3c
    3824:	str	r0, [fp, #-64]	; 0xffffffc0
    3828:	str	r1, [fp, #-68]	; 0xffffffbc
    382c:	mov	r2, #0
    3830:	mov	r3, #0
    3834:	strd	r2, [fp, #-52]	; 0xffffffcc
    3838:	bl	0 <coda_NaN>
    383c:	vmov.f64	d7, d0
    3840:	vstr	d7, [fp, #-60]	; 0xffffffc4
    3844:	ldr	r3, [fp, #-64]	; 0xffffffc0
    3848:	ldr	r3, [r3]
    384c:	ldr	r3, [r3]
    3850:	mov	r2, r3
    3854:	movw	r1, #0
    3858:	movt	r1, #0
    385c:	ldr	r0, [fp, #-68]	; 0xffffffbc
    3860:	bl	fd8 <get_mandatory_attribute_value>
    3864:	str	r0, [fp, #-16]
    3868:	ldr	r3, [fp, #-16]
    386c:	cmp	r3, #0
    3870:	bne	387c <cd_conversion_init+0x6c>
    3874:	mvn	r3, #0
    3878:	b	3a90 <cd_conversion_init+0x280>
    387c:	ldr	r3, [fp, #-64]	; 0xffffffc0
    3880:	ldr	r3, [r3]
    3884:	ldr	r3, [r3]
    3888:	mov	r2, r3
    388c:	movw	r1, #0
    3890:	movt	r1, #0
    3894:	ldr	r0, [fp, #-68]	; 0xffffffbc
    3898:	bl	fd8 <get_mandatory_attribute_value>
    389c:	str	r0, [fp, #-20]	; 0xffffffec
    38a0:	ldr	r3, [fp, #-20]	; 0xffffffec
    38a4:	cmp	r3, #0
    38a8:	bne	38b4 <cd_conversion_init+0xa4>
    38ac:	mvn	r3, #0
    38b0:	b	3a90 <cd_conversion_init+0x280>
    38b4:	ldr	r0, [fp, #-16]
    38b8:	bl	0 <strlen>
    38bc:	mov	r3, r0
    38c0:	mov	r1, r3
    38c4:	sub	r2, fp, #36	; 0x24
    38c8:	mov	r3, #1
    38cc:	ldr	r0, [fp, #-16]
    38d0:	bl	0 <coda_ascii_parse_double>
    38d4:	mov	r3, r0
    38d8:	cmp	r3, #0
    38dc:	bge	3900 <cd_conversion_init+0xf0>
    38e0:	ldr	r2, [fp, #-16]
    38e4:	movw	r1, #0
    38e8:	movt	r1, #0
    38ec:	movw	r0, #65136	; 0xfe70
    38f0:	movt	r0, #65535	; 0xffff
    38f4:	bl	0 <coda_set_error>
    38f8:	mvn	r3, #0
    38fc:	b	3a90 <cd_conversion_init+0x280>
    3900:	ldr	r0, [fp, #-20]	; 0xffffffec
    3904:	bl	0 <strlen>
    3908:	mov	r3, r0
    390c:	mov	r1, r3
    3910:	sub	r2, fp, #44	; 0x2c
    3914:	mov	r3, #1
    3918:	ldr	r0, [fp, #-20]	; 0xffffffec
    391c:	bl	0 <coda_ascii_parse_double>
    3920:	mov	r3, r0
    3924:	cmp	r3, #0
    3928:	bge	394c <cd_conversion_init+0x13c>
    392c:	ldr	r2, [fp, #-20]	; 0xffffffec
    3930:	movw	r1, #0
    3934:	movt	r1, #0
    3938:	movw	r0, #65136	; 0xfe70
    393c:	movt	r0, #65535	; 0xffff
    3940:	bl	0 <coda_set_error>
    3944:	mvn	r3, #0
    3948:	b	3a90 <cd_conversion_init+0x280>
    394c:	movw	r1, #0
    3950:	movt	r1, #0
    3954:	ldr	r0, [fp, #-68]	; 0xffffffbc
    3958:	bl	f5c <get_attribute_value>
    395c:	str	r0, [fp, #-24]	; 0xffffffe8
    3960:	ldr	r3, [fp, #-24]	; 0xffffffe8
    3964:	cmp	r3, #0
    3968:	beq	39b8 <cd_conversion_init+0x1a8>
    396c:	ldr	r0, [fp, #-24]	; 0xffffffe8
    3970:	bl	0 <strlen>
    3974:	mov	r3, r0
    3978:	mov	r1, r3
    397c:	sub	r2, fp, #52	; 0x34
    3980:	mov	r3, #1
    3984:	ldr	r0, [fp, #-24]	; 0xffffffe8
    3988:	bl	0 <coda_ascii_parse_double>
    398c:	mov	r3, r0
    3990:	cmp	r3, #0
    3994:	bge	39b8 <cd_conversion_init+0x1a8>
    3998:	ldr	r2, [fp, #-24]	; 0xffffffe8
    399c:	movw	r1, #0
    39a0:	movt	r1, #0
    39a4:	movw	r0, #65136	; 0xfe70
    39a8:	movt	r0, #65535	; 0xffff
    39ac:	bl	0 <coda_set_error>
    39b0:	mvn	r3, #0
    39b4:	b	3a90 <cd_conversion_init+0x280>
    39b8:	movw	r1, #0
    39bc:	movt	r1, #0
    39c0:	ldr	r0, [fp, #-68]	; 0xffffffbc
    39c4:	bl	f5c <get_attribute_value>
    39c8:	str	r0, [fp, #-28]	; 0xffffffe4
    39cc:	ldr	r3, [fp, #-28]	; 0xffffffe4
    39d0:	cmp	r3, #0
    39d4:	beq	3a24 <cd_conversion_init+0x214>
    39d8:	ldr	r0, [fp, #-28]	; 0xffffffe4
    39dc:	bl	0 <strlen>
    39e0:	mov	r3, r0
    39e4:	mov	r1, r3
    39e8:	sub	r2, fp, #60	; 0x3c
    39ec:	mov	r3, #1
    39f0:	ldr	r0, [fp, #-28]	; 0xffffffe4
    39f4:	bl	0 <coda_ascii_parse_double>
    39f8:	mov	r3, r0
    39fc:	cmp	r3, #0
    3a00:	bge	3a24 <cd_conversion_init+0x214>
    3a04:	ldr	r2, [fp, #-28]	; 0xffffffe4
    3a08:	movw	r1, #0
    3a0c:	movt	r1, #0
    3a10:	movw	r0, #65136	; 0xfe70
    3a14:	movt	r0, #65535	; 0xffff
    3a18:	bl	0 <coda_set_error>
    3a1c:	mvn	r3, #0
    3a20:	b	3a90 <cd_conversion_init+0x280>
    3a24:	ldr	r3, [fp, #-64]	; 0xffffffc0
    3a28:	ldr	r2, [r3]
    3a2c:	movw	r3, #0
    3a30:	movt	r3, #0
    3a34:	str	r3, [r2, #40]	; 0x28
    3a38:	vldr	d7, [fp, #-36]	; 0xffffffdc
    3a3c:	vldr	d6, [fp, #-44]	; 0xffffffd4
    3a40:	vldr	d5, [fp, #-52]	; 0xffffffcc
    3a44:	vldr	d4, [fp, #-60]	; 0xffffffc4
    3a48:	ldr	r3, [fp, #-64]	; 0xffffffc0
    3a4c:	ldr	r4, [r3]
    3a50:	vmov.f64	d3, d4
    3a54:	vmov.f64	d2, d5
    3a58:	vmov.f64	d1, d6
    3a5c:	vmov.f64	d0, d7
    3a60:	bl	0 <coda_conversion_new>
    3a64:	mov	r3, r0
    3a68:	str	r3, [r4, #8]
    3a6c:	ldr	r3, [fp, #-64]	; 0xffffffc0
    3a70:	ldr	r0, [r3]
    3a74:	movw	r3, #0
    3a78:	movt	r3, #0
    3a7c:	movw	r2, #0
    3a80:	movt	r2, #0
    3a84:	mov	r1, #41	; 0x29
    3a88:	bl	1530 <register_sub_element>
    3a8c:	mov	r3, #0
    3a90:	mov	r0, r3
    3a94:	sub	sp, fp, #8
    3a98:	ldr	r4, [sp]
    3a9c:	ldr	fp, [sp, #4]
    3aa0:	add	sp, sp, #8
    3aa4:	pop	{pc}		; (ldr pc, [sp], #4)

00003aa8 <cd_detection_rule_add_entry>:
    3aa8:	str	fp, [sp, #-8]!
    3aac:	str	lr, [sp, #4]
    3ab0:	add	fp, sp, #4
    3ab4:	sub	sp, sp, #8
    3ab8:	str	r0, [fp, #-8]
    3abc:	ldr	r3, [fp, #-8]
    3ac0:	ldr	r3, [r3]
    3ac4:	ldr	r3, [r3, #8]
    3ac8:	cmp	r3, #0
    3acc:	beq	3b1c <cd_detection_rule_add_entry+0x74>
    3ad0:	ldr	r3, [fp, #-8]
    3ad4:	ldr	r3, [r3]
    3ad8:	ldr	r3, [r3, #396]	; 0x18c
    3adc:	ldr	r2, [r3, #8]
    3ae0:	ldr	r3, [fp, #-8]
    3ae4:	ldr	r3, [r3]
    3ae8:	ldr	r3, [r3, #8]
    3aec:	mov	r1, r3
    3af0:	mov	r0, r2
    3af4:	bl	0 <coda_detection_rule_add_entry>
    3af8:	mov	r3, r0
    3afc:	cmp	r3, #0
    3b00:	beq	3b0c <cd_detection_rule_add_entry+0x64>
    3b04:	mvn	r3, #0
    3b08:	b	3b20 <cd_detection_rule_add_entry+0x78>
    3b0c:	ldr	r3, [fp, #-8]
    3b10:	ldr	r3, [r3]
    3b14:	mov	r2, #0
    3b18:	str	r2, [r3, #8]
    3b1c:	mov	r3, #0
    3b20:	mov	r0, r3
    3b24:	sub	sp, fp, #4
    3b28:	ldr	fp, [sp]
    3b2c:	add	sp, sp, #4
    3b30:	pop	{pc}		; (ldr pc, [sp], #4)

00003b34 <cd_detection_rule_init>:
    3b34:	str	r4, [sp, #-12]!
    3b38:	str	fp, [sp, #4]
    3b3c:	str	lr, [sp, #8]
    3b40:	add	fp, sp, #8
    3b44:	sub	sp, sp, #12
    3b48:	str	r0, [fp, #-16]
    3b4c:	str	r1, [fp, #-20]	; 0xffffffec
    3b50:	ldr	r3, [fp, #-16]
    3b54:	ldr	r2, [r3]
    3b58:	movw	r3, #0
    3b5c:	movt	r3, #0
    3b60:	str	r3, [r2, #40]	; 0x28
    3b64:	ldr	r3, [fp, #-16]
    3b68:	ldr	r4, [r3]
    3b6c:	bl	0 <coda_detection_rule_new>
    3b70:	mov	r3, r0
    3b74:	str	r3, [r4, #8]
    3b78:	ldr	r3, [fp, #-16]
    3b7c:	ldr	r3, [r3]
    3b80:	ldr	r3, [r3, #8]
    3b84:	cmp	r3, #0
    3b88:	bne	3b94 <cd_detection_rule_init+0x60>
    3b8c:	mvn	r3, #0
    3b90:	b	3c18 <cd_detection_rule_init+0xe4>
    3b94:	ldr	r3, [fp, #-16]
    3b98:	ldr	r0, [r3]
    3b9c:	movw	r3, #0
    3ba0:	movt	r3, #0
    3ba4:	movw	r2, #0
    3ba8:	movt	r2, #0
    3bac:	mov	r1, #23
    3bb0:	bl	1530 <register_sub_element>
    3bb4:	ldr	r3, [fp, #-16]
    3bb8:	ldr	r0, [r3]
    3bbc:	movw	r3, #0
    3bc0:	movt	r3, #0
    3bc4:	movw	r2, #0
    3bc8:	movt	r2, #0
    3bcc:	mov	r1, #24
    3bd0:	bl	1530 <register_sub_element>
    3bd4:	ldr	r3, [fp, #-16]
    3bd8:	ldr	r0, [r3]
    3bdc:	movw	r3, #0
    3be0:	movt	r3, #0
    3be4:	movw	r2, #0
    3be8:	movt	r2, #0
    3bec:	mov	r1, #25
    3bf0:	bl	1530 <register_sub_element>
    3bf4:	ldr	r3, [fp, #-16]
    3bf8:	ldr	r0, [r3]
    3bfc:	movw	r3, #0
    3c00:	movt	r3, #0
    3c04:	movw	r2, #0
    3c08:	movt	r2, #0
    3c0c:	mov	r1, #26
    3c10:	bl	1530 <register_sub_element>
    3c14:	mov	r3, #0
    3c18:	mov	r0, r3
    3c1c:	sub	sp, fp, #8
    3c20:	ldr	r4, [sp]
    3c24:	ldr	fp, [sp, #4]
    3c28:	add	sp, sp, #8
    3c2c:	pop	{pc}		; (ldr pc, [sp], #4)

00003c30 <cd_field_set_type>:
    3c30:	str	fp, [sp, #-8]!
    3c34:	str	lr, [sp, #4]
    3c38:	add	fp, sp, #4
    3c3c:	sub	sp, sp, #8
    3c40:	str	r0, [fp, #-8]
    3c44:	ldr	r3, [fp, #-8]
    3c48:	ldr	r3, [r3]
    3c4c:	ldr	r3, [r3, #396]	; 0x18c
    3c50:	ldr	r2, [r3, #8]
    3c54:	ldr	r3, [fp, #-8]
    3c58:	ldr	r3, [r3]
    3c5c:	ldr	r3, [r3, #8]
    3c60:	mov	r1, r3
    3c64:	mov	r0, r2
    3c68:	bl	0 <coda_type_record_field_set_type>
    3c6c:	mov	r3, r0
    3c70:	mov	r0, r3
    3c74:	sub	sp, fp, #4
    3c78:	ldr	fp, [sp]
    3c7c:	add	sp, sp, #4
    3c80:	pop	{pc}		; (ldr pc, [sp], #4)

00003c84 <cd_field_set_hidden>:
    3c84:	str	fp, [sp, #-8]!
    3c88:	str	lr, [sp, #4]
    3c8c:	add	fp, sp, #4
    3c90:	sub	sp, sp, #8
    3c94:	str	r0, [fp, #-8]
    3c98:	ldr	r3, [fp, #-8]
    3c9c:	ldr	r3, [r3]
    3ca0:	ldr	r3, [r3, #396]	; 0x18c
    3ca4:	ldr	r3, [r3, #8]
    3ca8:	mov	r0, r3
    3cac:	bl	0 <coda_type_record_field_set_hidden>
    3cb0:	mov	r3, r0
    3cb4:	mov	r0, r3
    3cb8:	sub	sp, fp, #4
    3cbc:	ldr	fp, [sp]
    3cc0:	add	sp, sp, #4
    3cc4:	pop	{pc}		; (ldr pc, [sp], #4)

00003cc8 <cd_field_set_optional>:
    3cc8:	str	fp, [sp, #-8]!
    3ccc:	str	lr, [sp, #4]
    3cd0:	add	fp, sp, #4
    3cd4:	sub	sp, sp, #8
    3cd8:	str	r0, [fp, #-8]
    3cdc:	ldr	r3, [fp, #-8]
    3ce0:	ldr	r3, [r3]
    3ce4:	ldr	r3, [r3, #396]	; 0x18c
    3ce8:	ldr	r3, [r3, #8]
    3cec:	mov	r0, r3
    3cf0:	bl	0 <coda_type_record_field_set_optional>
    3cf4:	mov	r3, r0
    3cf8:	mov	r0, r3
    3cfc:	sub	sp, fp, #4
    3d00:	ldr	fp, [sp]
    3d04:	add	sp, sp, #4
    3d08:	pop	{pc}		; (ldr pc, [sp], #4)

00003d0c <cd_field_set_available>:
    3d0c:	str	fp, [sp, #-8]!
    3d10:	str	lr, [sp, #4]
    3d14:	add	fp, sp, #4
    3d18:	sub	sp, sp, #8
    3d1c:	str	r0, [fp, #-8]
    3d20:	ldr	r3, [fp, #-8]
    3d24:	ldr	r3, [r3]
    3d28:	ldr	r3, [r3, #396]	; 0x18c
    3d2c:	ldr	r2, [r3, #8]
    3d30:	ldr	r3, [fp, #-8]
    3d34:	ldr	r3, [r3]
    3d38:	ldr	r3, [r3, #8]
    3d3c:	mov	r1, r3
    3d40:	mov	r0, r2
    3d44:	bl	0 <coda_type_record_field_set_available_expression>
    3d48:	mov	r3, r0
    3d4c:	cmp	r3, #0
    3d50:	beq	3d5c <cd_field_set_available+0x50>
    3d54:	mvn	r3, #0
    3d58:	b	3d70 <cd_field_set_available+0x64>
    3d5c:	ldr	r3, [fp, #-8]
    3d60:	ldr	r3, [r3]
    3d64:	mov	r2, #0
    3d68:	str	r2, [r3, #8]
    3d6c:	mov	r3, #0
    3d70:	mov	r0, r3
    3d74:	sub	sp, fp, #4
    3d78:	ldr	fp, [sp]
    3d7c:	add	sp, sp, #4
    3d80:	pop	{pc}		; (ldr pc, [sp], #4)

00003d84 <cd_field_set_bit_offset>:
    3d84:	str	fp, [sp, #-8]!
    3d88:	str	lr, [sp, #4]
    3d8c:	add	fp, sp, #4
    3d90:	sub	sp, sp, #8
    3d94:	str	r0, [fp, #-8]
    3d98:	ldr	r3, [fp, #-8]
    3d9c:	ldr	r3, [r3]
    3da0:	ldr	r3, [r3, #396]	; 0x18c
    3da4:	ldr	r2, [r3, #8]
    3da8:	ldr	r3, [fp, #-8]
    3dac:	ldr	r3, [r3]
    3db0:	ldr	r3, [r3, #8]
    3db4:	mov	r1, r3
    3db8:	mov	r0, r2
    3dbc:	bl	0 <coda_type_record_field_set_bit_offset_expression>
    3dc0:	mov	r3, r0
    3dc4:	cmp	r3, #0
    3dc8:	beq	3dd4 <cd_field_set_bit_offset+0x50>
    3dcc:	mvn	r3, #0
    3dd0:	b	3de8 <cd_field_set_bit_offset+0x64>
    3dd4:	ldr	r3, [fp, #-8]
    3dd8:	ldr	r3, [r3]
    3ddc:	mov	r2, #0
    3de0:	str	r2, [r3, #8]
    3de4:	mov	r3, #0
    3de8:	mov	r0, r3
    3dec:	sub	sp, fp, #4
    3df0:	ldr	fp, [sp]
    3df4:	add	sp, sp, #4
    3df8:	pop	{pc}		; (ldr pc, [sp], #4)

00003dfc <cd_field_finalise>:
    3dfc:	str	fp, [sp, #-8]!
    3e00:	str	lr, [sp, #4]
    3e04:	add	fp, sp, #4
    3e08:	sub	sp, sp, #8
    3e0c:	str	r0, [fp, #-8]
    3e10:	ldr	r3, [fp, #-8]
    3e14:	ldr	r3, [r3]
    3e18:	ldr	r3, [r3, #8]
    3e1c:	mov	r0, r3
    3e20:	bl	0 <coda_type_record_field_validate>
    3e24:	mov	r3, r0
    3e28:	mov	r0, r3
    3e2c:	sub	sp, fp, #4
    3e30:	ldr	fp, [sp]
    3e34:	add	sp, sp, #4
    3e38:	pop	{pc}		; (ldr pc, [sp], #4)

00003e3c <cd_field_init>:
    3e3c:	str	r4, [sp, #-12]!
    3e40:	str	fp, [sp, #4]
    3e44:	str	lr, [sp, #8]
    3e48:	add	fp, sp, #8
    3e4c:	sub	sp, sp, #28
    3e50:	str	r0, [fp, #-32]	; 0xffffffe0
    3e54:	str	r1, [fp, #-36]	; 0xffffffdc
    3e58:	mov	r3, #0
    3e5c:	str	r3, [fp, #-16]
    3e60:	mov	r3, #0
    3e64:	str	r3, [fp, #-20]	; 0xffffffec
    3e68:	mov	r3, #0
    3e6c:	str	r3, [fp, #-24]	; 0xffffffe8
    3e70:	movw	r1, #0
    3e74:	movt	r1, #0
    3e78:	ldr	r0, [fp, #-36]	; 0xffffffdc
    3e7c:	bl	f5c <get_attribute_value>
    3e80:	str	r0, [fp, #-16]
    3e84:	ldr	r3, [fp, #-16]
    3e88:	cmp	r3, #0
    3e8c:	beq	3eac <cd_field_init+0x70>
    3e90:	movw	r1, #0
    3e94:	movt	r1, #0
    3e98:	movw	r0, #65136	; 0xfe70
    3e9c:	movt	r0, #65535	; 0xffff
    3ea0:	bl	0 <coda_set_error>
    3ea4:	mvn	r3, #0
    3ea8:	b	40c4 <cd_field_init+0x288>
    3eac:	ldr	r3, [fp, #-32]	; 0xffffffe0
    3eb0:	ldr	r3, [r3]
    3eb4:	ldr	r3, [r3, #396]	; 0x18c
    3eb8:	ldr	r3, [r3, #48]	; 0x30
    3ebc:	cmp	r3, #0
    3ec0:	bne	3ee4 <cd_field_init+0xa8>
    3ec4:	movw	r3, #0
    3ec8:	movt	r3, #0
    3ecc:	movw	r2, #1685	; 0x695
    3ed0:	movw	r1, #0
    3ed4:	movt	r1, #0
    3ed8:	movw	r0, #0
    3edc:	movt	r0, #0
    3ee0:	bl	0 <__assert_fail>
    3ee4:	ldr	r3, [fp, #-32]	; 0xffffffe0
    3ee8:	ldr	r3, [r3]
    3eec:	ldr	r2, [r3, #396]	; 0x18c
    3ef0:	ldr	r3, [fp, #-32]	; 0xffffffe0
    3ef4:	ldr	r3, [r3]
    3ef8:	ldr	r2, [r2, #44]	; 0x2c
    3efc:	str	r2, [r3, #44]	; 0x2c
    3f00:	ldr	r3, [fp, #-32]	; 0xffffffe0
    3f04:	ldr	r3, [r3]
    3f08:	mov	r2, #1
    3f0c:	str	r2, [r3, #48]	; 0x30
    3f10:	movw	r1, #0
    3f14:	movt	r1, #0
    3f18:	ldr	r0, [fp, #-36]	; 0xffffffdc
    3f1c:	bl	f5c <get_attribute_value>
    3f20:	mov	r3, r0
    3f24:	cmp	r3, #0
    3f28:	beq	3f48 <cd_field_init+0x10c>
    3f2c:	movw	r1, #0
    3f30:	movt	r1, #0
    3f34:	movw	r0, #65136	; 0xfe70
    3f38:	movt	r0, #65535	; 0xffff
    3f3c:	bl	0 <coda_set_error>
    3f40:	mvn	r3, #0
    3f44:	b	40c4 <cd_field_init+0x288>
    3f48:	ldr	r3, [fp, #-32]	; 0xffffffe0
    3f4c:	ldr	r3, [r3]
    3f50:	ldr	r3, [r3]
    3f54:	mov	r2, r3
    3f58:	movw	r1, #0
    3f5c:	movt	r1, #0
    3f60:	ldr	r0, [fp, #-36]	; 0xffffffdc
    3f64:	bl	fd8 <get_mandatory_attribute_value>
    3f68:	str	r0, [fp, #-20]	; 0xffffffec
    3f6c:	ldr	r3, [fp, #-20]	; 0xffffffec
    3f70:	cmp	r3, #0
    3f74:	bne	3f80 <cd_field_init+0x144>
    3f78:	mvn	r3, #0
    3f7c:	b	40c4 <cd_field_init+0x288>
    3f80:	ldr	r3, [fp, #-32]	; 0xffffffe0
    3f84:	ldr	r2, [r3]
    3f88:	movw	r3, #0
    3f8c:	movt	r3, #0
    3f90:	str	r3, [r2, #40]	; 0x28
    3f94:	ldr	r3, [fp, #-32]	; 0xffffffe0
    3f98:	ldr	r4, [r3]
    3f9c:	ldr	r0, [fp, #-20]	; 0xffffffec
    3fa0:	bl	0 <coda_type_record_field_new>
    3fa4:	mov	r3, r0
    3fa8:	str	r3, [r4, #8]
    3fac:	ldr	r3, [fp, #-32]	; 0xffffffe0
    3fb0:	ldr	r3, [r3]
    3fb4:	ldr	r3, [r3, #8]
    3fb8:	cmp	r3, #0
    3fbc:	bne	3fc8 <cd_field_init+0x18c>
    3fc0:	mvn	r3, #0
    3fc4:	b	40c4 <cd_field_init+0x288>
    3fc8:	movw	r1, #0
    3fcc:	movt	r1, #0
    3fd0:	ldr	r0, [fp, #-36]	; 0xffffffdc
    3fd4:	bl	f5c <get_attribute_value>
    3fd8:	str	r0, [fp, #-24]	; 0xffffffe8
    3fdc:	ldr	r3, [fp, #-24]	; 0xffffffe8
    3fe0:	cmp	r3, #0
    3fe4:	beq	4014 <cd_field_init+0x1d8>
    3fe8:	ldr	r3, [fp, #-32]	; 0xffffffe0
    3fec:	ldr	r3, [r3]
    3ff0:	ldr	r3, [r3, #8]
    3ff4:	ldr	r1, [fp, #-24]	; 0xffffffe8
    3ff8:	mov	r0, r3
    3ffc:	bl	0 <coda_type_record_field_set_real_name>
    4000:	mov	r3, r0
    4004:	cmp	r3, #0
    4008:	beq	4014 <cd_field_init+0x1d8>
    400c:	mvn	r3, #0
    4010:	b	40c4 <cd_field_init+0x288>
    4014:	ldr	r3, [fp, #-32]	; 0xffffffe0
    4018:	ldr	r3, [r3]
    401c:	movw	r1, #0
    4020:	movt	r1, #0
    4024:	mov	r0, r3
    4028:	bl	15c0 <register_type_elements>
    402c:	ldr	r3, [fp, #-32]	; 0xffffffe0
    4030:	ldr	r0, [r3]
    4034:	movw	r3, #0
    4038:	movt	r3, #0
    403c:	movw	r2, #0
    4040:	movt	r2, #0
    4044:	mov	r1, #18
    4048:	bl	1530 <register_sub_element>
    404c:	ldr	r3, [fp, #-32]	; 0xffffffe0
    4050:	ldr	r0, [r3]
    4054:	movw	r3, #0
    4058:	movt	r3, #0
    405c:	movw	r2, #0
    4060:	movt	r2, #0
    4064:	mov	r1, #29
    4068:	bl	1530 <register_sub_element>
    406c:	ldr	r3, [fp, #-32]	; 0xffffffe0
    4070:	ldr	r0, [r3]
    4074:	movw	r3, #0
    4078:	movt	r3, #0
    407c:	movw	r2, #0
    4080:	movt	r2, #0
    4084:	mov	r1, #5
    4088:	bl	1530 <register_sub_element>
    408c:	ldr	r3, [fp, #-32]	; 0xffffffe0
    4090:	ldr	r0, [r3]
    4094:	movw	r3, #0
    4098:	movt	r3, #0
    409c:	movw	r2, #0
    40a0:	movt	r2, #0
    40a4:	mov	r1, #6
    40a8:	bl	1530 <register_sub_element>
    40ac:	ldr	r3, [fp, #-32]	; 0xffffffe0
    40b0:	ldr	r2, [r3]
    40b4:	movw	r3, #0
    40b8:	movt	r3, #0
    40bc:	str	r3, [r2, #36]	; 0x24
    40c0:	mov	r3, #0
    40c4:	mov	r0, r3
    40c8:	sub	sp, fp, #8
    40cc:	ldr	r4, [sp]
    40d0:	ldr	fp, [sp, #4]
    40d4:	add	sp, sp, #8
    40d8:	pop	{pc}		; (ldr pc, [sp], #4)

000040dc <cd_float_set_unit>:
    40dc:	str	fp, [sp, #-8]!
    40e0:	str	lr, [sp, #4]
    40e4:	add	fp, sp, #4
    40e8:	sub	sp, sp, #8
    40ec:	str	r0, [fp, #-8]
    40f0:	ldr	r3, [fp, #-8]
    40f4:	ldr	r3, [r3]
    40f8:	ldr	r3, [r3, #12]
    40fc:	cmp	r3, #0
    4100:	bne	412c <cd_float_set_unit+0x50>
    4104:	ldr	r3, [fp, #-8]
    4108:	ldr	r3, [r3]
    410c:	ldr	r3, [r3, #396]	; 0x18c
    4110:	ldr	r3, [r3, #8]
    4114:	movw	r1, #0
    4118:	movt	r1, #0
    411c:	mov	r0, r3
    4120:	bl	0 <coda_type_number_set_unit>
    4124:	mov	r3, r0
    4128:	b	4158 <cd_float_set_unit+0x7c>
    412c:	ldr	r3, [fp, #-8]
    4130:	ldr	r3, [r3]
    4134:	ldr	r3, [r3, #396]	; 0x18c
    4138:	ldr	r2, [r3, #8]
    413c:	ldr	r3, [fp, #-8]
    4140:	ldr	r3, [r3]
    4144:	ldr	r3, [r3, #12]
    4148:	mov	r1, r3
    414c:	mov	r0, r2
    4150:	bl	0 <coda_type_number_set_unit>
    4154:	mov	r3, r0
    4158:	mov	r0, r3
    415c:	sub	sp, fp, #4
    4160:	ldr	fp, [sp]
    4164:	add	sp, sp, #4
    4168:	pop	{pc}		; (ldr pc, [sp], #4)

0000416c <cd_float_set_read_type>:
    416c:	str	fp, [sp, #-8]!
    4170:	str	lr, [sp, #4]
    4174:	add	fp, sp, #4
    4178:	sub	sp, sp, #8
    417c:	str	r0, [fp, #-8]
    4180:	ldr	r3, [fp, #-8]
    4184:	ldr	r3, [r3]
    4188:	ldr	r3, [r3, #396]	; 0x18c
    418c:	ldr	r0, [r3, #8]
    4190:	ldr	r3, [fp, #-8]
    4194:	ldr	r3, [r3]
    4198:	ldrd	r2, [r3, #16]
    419c:	mov	r3, r2
    41a0:	mov	r1, r3
    41a4:	bl	0 <coda_type_set_read_type>
    41a8:	mov	r3, r0
    41ac:	mov	r0, r3
    41b0:	sub	sp, fp, #4
    41b4:	ldr	fp, [sp]
    41b8:	add	sp, sp, #4
    41bc:	pop	{pc}		; (ldr pc, [sp], #4)

000041c0 <cd_float_set_conversion>:
    41c0:	str	fp, [sp, #-8]!
    41c4:	str	lr, [sp, #4]
    41c8:	add	fp, sp, #4
    41cc:	sub	sp, sp, #8
    41d0:	str	r0, [fp, #-8]
    41d4:	ldr	r3, [fp, #-8]
    41d8:	ldr	r3, [r3]
    41dc:	ldr	r3, [r3, #396]	; 0x18c
    41e0:	ldr	r2, [r3, #8]
    41e4:	ldr	r3, [fp, #-8]
    41e8:	ldr	r3, [r3]
    41ec:	ldr	r3, [r3, #8]
    41f0:	mov	r1, r3
    41f4:	mov	r0, r2
    41f8:	bl	0 <coda_type_number_set_conversion>
    41fc:	mov	r3, r0
    4200:	cmp	r3, #0
    4204:	beq	4210 <cd_float_set_conversion+0x50>
    4208:	mvn	r3, #0
    420c:	b	4224 <cd_float_set_conversion+0x64>
    4210:	ldr	r3, [fp, #-8]
    4214:	ldr	r3, [r3]
    4218:	mov	r2, #0
    421c:	str	r2, [r3, #8]
    4220:	mov	r3, #0
    4224:	mov	r0, r3
    4228:	sub	sp, fp, #4
    422c:	ldr	fp, [sp]
    4230:	add	sp, sp, #4
    4234:	pop	{pc}		; (ldr pc, [sp], #4)

00004238 <cd_float_set_little_endian>:
    4238:	str	fp, [sp, #-8]!
    423c:	str	lr, [sp, #4]
    4240:	add	fp, sp, #4
    4244:	sub	sp, sp, #8
    4248:	str	r0, [fp, #-8]
    424c:	ldr	r3, [fp, #-8]
    4250:	ldr	r3, [r3]
    4254:	ldr	r3, [r3, #396]	; 0x18c
    4258:	ldr	r3, [r3, #8]
    425c:	mov	r1, #1
    4260:	mov	r0, r3
    4264:	bl	0 <coda_type_number_set_endianness>
    4268:	mov	r3, r0
    426c:	mov	r0, r3
    4270:	sub	sp, fp, #4
    4274:	ldr	fp, [sp]
    4278:	add	sp, sp, #4
    427c:	pop	{pc}		; (ldr pc, [sp], #4)

00004280 <cd_float_add_mapping>:
    4280:	str	fp, [sp, #-8]!
    4284:	str	lr, [sp, #4]
    4288:	add	fp, sp, #4
    428c:	sub	sp, sp, #8
    4290:	str	r0, [fp, #-8]
    4294:	ldr	r3, [fp, #-8]
    4298:	ldr	r3, [r3]
    429c:	ldr	r3, [r3, #396]	; 0x18c
    42a0:	ldr	r2, [r3, #8]
    42a4:	ldr	r3, [fp, #-8]
    42a8:	ldr	r3, [r3]
    42ac:	ldr	r3, [r3, #8]
    42b0:	mov	r1, r3
    42b4:	mov	r0, r2
    42b8:	bl	0 <coda_type_number_add_ascii_float_mapping>
    42bc:	mov	r3, r0
    42c0:	cmp	r3, #0
    42c4:	beq	42d0 <cd_float_add_mapping+0x50>
    42c8:	mvn	r3, #0
    42cc:	b	42e4 <cd_float_add_mapping+0x64>
    42d0:	ldr	r3, [fp, #-8]
    42d4:	ldr	r3, [r3]
    42d8:	mov	r2, #0
    42dc:	str	r2, [r3, #8]
    42e0:	mov	r3, #0
    42e4:	mov	r0, r3
    42e8:	sub	sp, fp, #4
    42ec:	ldr	fp, [sp]
    42f0:	add	sp, sp, #4
    42f4:	pop	{pc}		; (ldr pc, [sp], #4)

000042f8 <cd_float_finalise>:
    42f8:	str	fp, [sp, #-8]!
    42fc:	str	lr, [sp, #4]
    4300:	add	fp, sp, #4
    4304:	sub	sp, sp, #8
    4308:	str	r0, [fp, #-8]
    430c:	ldr	r3, [fp, #-8]
    4310:	ldr	r3, [r3]
    4314:	ldr	r3, [r3, #8]
    4318:	mov	r0, r3
    431c:	bl	0 <coda_type_number_validate>
    4320:	mov	r3, r0
    4324:	mov	r0, r3
    4328:	sub	sp, fp, #4
    432c:	ldr	fp, [sp]
    4330:	add	sp, sp, #4
    4334:	pop	{pc}		; (ldr pc, [sp], #4)

00004338 <cd_float_init>:
    4338:	str	r4, [sp, #-12]!
    433c:	str	fp, [sp, #4]
    4340:	str	lr, [sp, #8]
    4344:	add	fp, sp, #8
    4348:	sub	sp, sp, #12
    434c:	str	r0, [fp, #-16]
    4350:	str	r1, [fp, #-20]	; 0xffffffec
    4354:	ldr	r1, [fp, #-20]	; 0xffffffec
    4358:	ldr	r0, [fp, #-16]
    435c:	bl	117c <handle_format_attribute_for_type>
    4360:	mov	r3, r0
    4364:	cmp	r3, #0
    4368:	beq	4374 <cd_float_init+0x3c>
    436c:	mvn	r3, #0
    4370:	b	4524 <cd_float_init+0x1ec>
    4374:	ldr	r3, [fp, #-16]
    4378:	ldr	r2, [r3]
    437c:	movw	r3, #0
    4380:	movt	r3, #0
    4384:	str	r3, [r2, #40]	; 0x28
    4388:	ldr	r3, [fp, #-16]
    438c:	ldr	r3, [r3]
    4390:	ldr	r2, [r3, #44]	; 0x2c
    4394:	ldr	r3, [fp, #-16]
    4398:	ldr	r4, [r3]
    439c:	mov	r1, #3
    43a0:	mov	r0, r2
    43a4:	bl	0 <coda_type_number_new>
    43a8:	mov	r3, r0
    43ac:	str	r3, [r4, #8]
    43b0:	ldr	r3, [fp, #-16]
    43b4:	ldr	r3, [r3]
    43b8:	ldr	r3, [r3, #8]
    43bc:	cmp	r3, #0
    43c0:	bne	43cc <cd_float_init+0x94>
    43c4:	mvn	r3, #0
    43c8:	b	4524 <cd_float_init+0x1ec>
    43cc:	ldr	r1, [fp, #-20]	; 0xffffffec
    43d0:	ldr	r0, [fp, #-16]
    43d4:	bl	104c <handle_name_attribute_for_type>
    43d8:	mov	r3, r0
    43dc:	cmp	r3, #0
    43e0:	beq	43ec <cd_float_init+0xb4>
    43e4:	mvn	r3, #0
    43e8:	b	4524 <cd_float_init+0x1ec>
    43ec:	ldr	r3, [fp, #-16]
    43f0:	ldr	r0, [r3]
    43f4:	movw	r3, #0
    43f8:	movt	r3, #0
    43fc:	movw	r2, #0
    4400:	movt	r2, #0
    4404:	mov	r1, #41	; 0x29
    4408:	bl	1530 <register_sub_element>
    440c:	ldr	r3, [fp, #-16]
    4410:	ldr	r0, [r3]
    4414:	movw	r3, #0
    4418:	movt	r3, #0
    441c:	movw	r2, #0
    4420:	movt	r2, #0
    4424:	mov	r1, #28
    4428:	bl	1530 <register_sub_element>
    442c:	ldr	r3, [fp, #-16]
    4430:	ldr	r0, [r3]
    4434:	movw	r3, #0
    4438:	movt	r3, #0
    443c:	movw	r2, #0
    4440:	movt	r2, #0
    4444:	mov	r1, #10
    4448:	bl	1530 <register_sub_element>
    444c:	ldr	r3, [fp, #-16]
    4450:	ldr	r0, [r3]
    4454:	movw	r3, #0
    4458:	movt	r3, #0
    445c:	movw	r2, #0
    4460:	movt	r2, #0
    4464:	mov	r1, #7
    4468:	bl	1530 <register_sub_element>
    446c:	ldr	r3, [fp, #-16]
    4470:	ldr	r0, [r3]
    4474:	movw	r3, #0
    4478:	movt	r3, #0
    447c:	movw	r2, #0
    4480:	movt	r2, #0
    4484:	mov	r1, #8
    4488:	bl	1530 <register_sub_element>
    448c:	ldr	r3, [fp, #-16]
    4490:	ldr	r0, [r3]
    4494:	movw	r3, #0
    4498:	movt	r3, #0
    449c:	movw	r2, #0
    44a0:	movt	r2, #0
    44a4:	mov	r1, #21
    44a8:	bl	1530 <register_sub_element>
    44ac:	ldr	r3, [fp, #-16]
    44b0:	ldr	r0, [r3]
    44b4:	movw	r3, #0
    44b8:	movt	r3, #0
    44bc:	movw	r2, #0
    44c0:	movt	r2, #0
    44c4:	mov	r1, #22
    44c8:	bl	1530 <register_sub_element>
    44cc:	ldr	r3, [fp, #-16]
    44d0:	ldr	r0, [r3]
    44d4:	movw	r3, #0
    44d8:	movt	r3, #0
    44dc:	movw	r2, #0
    44e0:	movt	r2, #0
    44e4:	mov	r1, #11
    44e8:	bl	1530 <register_sub_element>
    44ec:	ldr	r3, [fp, #-16]
    44f0:	ldr	r0, [r3]
    44f4:	movw	r3, #0
    44f8:	movt	r3, #0
    44fc:	movw	r2, #0
    4500:	movt	r2, #0
    4504:	mov	r1, #4
    4508:	bl	1530 <register_sub_element>
    450c:	ldr	r3, [fp, #-16]
    4510:	ldr	r2, [r3]
    4514:	movw	r3, #0
    4518:	movt	r3, #0
    451c:	str	r3, [r2, #36]	; 0x24
    4520:	mov	r3, #0
    4524:	mov	r0, r3
    4528:	sub	sp, fp, #8
    452c:	ldr	r4, [sp]
    4530:	ldr	fp, [sp, #4]
    4534:	add	sp, sp, #8
    4538:	pop	{pc}		; (ldr pc, [sp], #4)

0000453c <cd_integer_set_unit>:
    453c:	str	fp, [sp, #-8]!
    4540:	str	lr, [sp, #4]
    4544:	add	fp, sp, #4
    4548:	sub	sp, sp, #8
    454c:	str	r0, [fp, #-8]
    4550:	ldr	r3, [fp, #-8]
    4554:	ldr	r3, [r3]
    4558:	ldr	r3, [r3, #12]
    455c:	cmp	r3, #0
    4560:	bne	458c <cd_integer_set_unit+0x50>
    4564:	ldr	r3, [fp, #-8]
    4568:	ldr	r3, [r3]
    456c:	ldr	r3, [r3, #396]	; 0x18c
    4570:	ldr	r3, [r3, #8]
    4574:	movw	r1, #0
    4578:	movt	r1, #0
    457c:	mov	r0, r3
    4580:	bl	0 <coda_type_number_set_unit>
    4584:	mov	r3, r0
    4588:	b	45b8 <cd_integer_set_unit+0x7c>
    458c:	ldr	r3, [fp, #-8]
    4590:	ldr	r3, [r3]
    4594:	ldr	r3, [r3, #396]	; 0x18c
    4598:	ldr	r2, [r3, #8]
    459c:	ldr	r3, [fp, #-8]
    45a0:	ldr	r3, [r3]
    45a4:	ldr	r3, [r3, #12]
    45a8:	mov	r1, r3
    45ac:	mov	r0, r2
    45b0:	bl	0 <coda_type_number_set_unit>
    45b4:	mov	r3, r0
    45b8:	mov	r0, r3
    45bc:	sub	sp, fp, #4
    45c0:	ldr	fp, [sp]
    45c4:	add	sp, sp, #4
    45c8:	pop	{pc}		; (ldr pc, [sp], #4)

000045cc <cd_integer_set_read_type>:
    45cc:	str	fp, [sp, #-8]!
    45d0:	str	lr, [sp, #4]
    45d4:	add	fp, sp, #4
    45d8:	sub	sp, sp, #8
    45dc:	str	r0, [fp, #-8]
    45e0:	ldr	r3, [fp, #-8]
    45e4:	ldr	r3, [r3]
    45e8:	ldr	r3, [r3, #396]	; 0x18c
    45ec:	ldr	r0, [r3, #8]
    45f0:	ldr	r3, [fp, #-8]
    45f4:	ldr	r3, [r3]
    45f8:	ldrd	r2, [r3, #16]
    45fc:	mov	r3, r2
    4600:	mov	r1, r3
    4604:	bl	0 <coda_type_set_read_type>
    4608:	mov	r3, r0
    460c:	mov	r0, r3
    4610:	sub	sp, fp, #4
    4614:	ldr	fp, [sp]
    4618:	add	sp, sp, #4
    461c:	pop	{pc}		; (ldr pc, [sp], #4)

00004620 <cd_integer_set_conversion>:
    4620:	str	fp, [sp, #-8]!
    4624:	str	lr, [sp, #4]
    4628:	add	fp, sp, #4
    462c:	sub	sp, sp, #8
    4630:	str	r0, [fp, #-8]
    4634:	ldr	r3, [fp, #-8]
    4638:	ldr	r3, [r3]
    463c:	ldr	r3, [r3, #396]	; 0x18c
    4640:	ldr	r2, [r3, #8]
    4644:	ldr	r3, [fp, #-8]
    4648:	ldr	r3, [r3]
    464c:	ldr	r3, [r3, #8]
    4650:	mov	r1, r3
    4654:	mov	r0, r2
    4658:	bl	0 <coda_type_number_set_conversion>
    465c:	mov	r3, r0
    4660:	cmp	r3, #0
    4664:	beq	4670 <cd_integer_set_conversion+0x50>
    4668:	mvn	r3, #0
    466c:	b	4684 <cd_integer_set_conversion+0x64>
    4670:	ldr	r3, [fp, #-8]
    4674:	ldr	r3, [r3]
    4678:	mov	r2, #0
    467c:	str	r2, [r3, #8]
    4680:	mov	r3, #0
    4684:	mov	r0, r3
    4688:	sub	sp, fp, #4
    468c:	ldr	fp, [sp]
    4690:	add	sp, sp, #4
    4694:	pop	{pc}		; (ldr pc, [sp], #4)

00004698 <cd_integer_set_little_endian>:
    4698:	str	fp, [sp, #-8]!
    469c:	str	lr, [sp, #4]
    46a0:	add	fp, sp, #4
    46a4:	sub	sp, sp, #8
    46a8:	str	r0, [fp, #-8]
    46ac:	ldr	r3, [fp, #-8]
    46b0:	ldr	r3, [r3]
    46b4:	ldr	r3, [r3, #396]	; 0x18c
    46b8:	ldr	r3, [r3, #8]
    46bc:	mov	r1, #1
    46c0:	mov	r0, r3
    46c4:	bl	0 <coda_type_number_set_endianness>
    46c8:	mov	r3, r0
    46cc:	mov	r0, r3
    46d0:	sub	sp, fp, #4
    46d4:	ldr	fp, [sp]
    46d8:	add	sp, sp, #4
    46dc:	pop	{pc}		; (ldr pc, [sp], #4)

000046e0 <cd_integer_add_mapping>:
    46e0:	str	fp, [sp, #-8]!
    46e4:	str	lr, [sp, #4]
    46e8:	add	fp, sp, #4
    46ec:	sub	sp, sp, #8
    46f0:	str	r0, [fp, #-8]
    46f4:	ldr	r3, [fp, #-8]
    46f8:	ldr	r3, [r3]
    46fc:	ldr	r3, [r3, #396]	; 0x18c
    4700:	ldr	r2, [r3, #8]
    4704:	ldr	r3, [fp, #-8]
    4708:	ldr	r3, [r3]
    470c:	ldr	r3, [r3, #8]
    4710:	mov	r1, r3
    4714:	mov	r0, r2
    4718:	bl	0 <coda_type_number_add_ascii_integer_mapping>
    471c:	mov	r3, r0
    4720:	cmp	r3, #0
    4724:	beq	4730 <cd_integer_add_mapping+0x50>
    4728:	mvn	r3, #0
    472c:	b	4744 <cd_integer_add_mapping+0x64>
    4730:	ldr	r3, [fp, #-8]
    4734:	ldr	r3, [r3]
    4738:	mov	r2, #0
    473c:	str	r2, [r3, #8]
    4740:	mov	r3, #0
    4744:	mov	r0, r3
    4748:	sub	sp, fp, #4
    474c:	ldr	fp, [sp]
    4750:	add	sp, sp, #4
    4754:	pop	{pc}		; (ldr pc, [sp], #4)

00004758 <cd_integer_finalise>:
    4758:	str	fp, [sp, #-8]!
    475c:	str	lr, [sp, #4]
    4760:	add	fp, sp, #4
    4764:	sub	sp, sp, #8
    4768:	str	r0, [fp, #-8]
    476c:	ldr	r3, [fp, #-8]
    4770:	ldr	r3, [r3]
    4774:	ldr	r3, [r3, #8]
    4778:	mov	r0, r3
    477c:	bl	0 <coda_type_number_validate>
    4780:	mov	r3, r0
    4784:	mov	r0, r3
    4788:	sub	sp, fp, #4
    478c:	ldr	fp, [sp]
    4790:	add	sp, sp, #4
    4794:	pop	{pc}		; (ldr pc, [sp], #4)

00004798 <cd_integer_init>:
    4798:	str	r4, [sp, #-12]!
    479c:	str	fp, [sp, #4]
    47a0:	str	lr, [sp, #8]
    47a4:	add	fp, sp, #8
    47a8:	sub	sp, sp, #12
    47ac:	str	r0, [fp, #-16]
    47b0:	str	r1, [fp, #-20]	; 0xffffffec
    47b4:	ldr	r1, [fp, #-20]	; 0xffffffec
    47b8:	ldr	r0, [fp, #-16]
    47bc:	bl	117c <handle_format_attribute_for_type>
    47c0:	mov	r3, r0
    47c4:	cmp	r3, #0
    47c8:	beq	47d4 <cd_integer_init+0x3c>
    47cc:	mvn	r3, #0
    47d0:	b	4984 <cd_integer_init+0x1ec>
    47d4:	ldr	r3, [fp, #-16]
    47d8:	ldr	r2, [r3]
    47dc:	movw	r3, #0
    47e0:	movt	r3, #0
    47e4:	str	r3, [r2, #40]	; 0x28
    47e8:	ldr	r3, [fp, #-16]
    47ec:	ldr	r3, [r3]
    47f0:	ldr	r2, [r3, #44]	; 0x2c
    47f4:	ldr	r3, [fp, #-16]
    47f8:	ldr	r4, [r3]
    47fc:	mov	r1, #2
    4800:	mov	r0, r2
    4804:	bl	0 <coda_type_number_new>
    4808:	mov	r3, r0
    480c:	str	r3, [r4, #8]
    4810:	ldr	r3, [fp, #-16]
    4814:	ldr	r3, [r3]
    4818:	ldr	r3, [r3, #8]
    481c:	cmp	r3, #0
    4820:	bne	482c <cd_integer_init+0x94>
    4824:	mvn	r3, #0
    4828:	b	4984 <cd_integer_init+0x1ec>
    482c:	ldr	r1, [fp, #-20]	; 0xffffffec
    4830:	ldr	r0, [fp, #-16]
    4834:	bl	104c <handle_name_attribute_for_type>
    4838:	mov	r3, r0
    483c:	cmp	r3, #0
    4840:	beq	484c <cd_integer_init+0xb4>
    4844:	mvn	r3, #0
    4848:	b	4984 <cd_integer_init+0x1ec>
    484c:	ldr	r3, [fp, #-16]
    4850:	ldr	r0, [r3]
    4854:	movw	r3, #0
    4858:	movt	r3, #0
    485c:	movw	r2, #0
    4860:	movt	r2, #0
    4864:	mov	r1, #11
    4868:	bl	1530 <register_sub_element>
    486c:	ldr	r3, [fp, #-16]
    4870:	ldr	r0, [r3]
    4874:	movw	r3, #0
    4878:	movt	r3, #0
    487c:	movw	r2, #0
    4880:	movt	r2, #0
    4884:	mov	r1, #41	; 0x29
    4888:	bl	1530 <register_sub_element>
    488c:	ldr	r3, [fp, #-16]
    4890:	ldr	r0, [r3]
    4894:	movw	r3, #0
    4898:	movt	r3, #0
    489c:	movw	r2, #0
    48a0:	movt	r2, #0
    48a4:	mov	r1, #8
    48a8:	bl	1530 <register_sub_element>
    48ac:	ldr	r3, [fp, #-16]
    48b0:	ldr	r0, [r3]
    48b4:	movw	r3, #0
    48b8:	movt	r3, #0
    48bc:	movw	r2, #0
    48c0:	movt	r2, #0
    48c4:	mov	r1, #7
    48c8:	bl	1530 <register_sub_element>
    48cc:	ldr	r3, [fp, #-16]
    48d0:	ldr	r0, [r3]
    48d4:	movw	r3, #0
    48d8:	movt	r3, #0
    48dc:	movw	r2, #0
    48e0:	movt	r2, #0
    48e4:	mov	r1, #21
    48e8:	bl	1530 <register_sub_element>
    48ec:	ldr	r3, [fp, #-16]
    48f0:	ldr	r0, [r3]
    48f4:	movw	r3, #0
    48f8:	movt	r3, #0
    48fc:	movw	r2, #0
    4900:	movt	r2, #0
    4904:	mov	r1, #28
    4908:	bl	1530 <register_sub_element>
    490c:	ldr	r3, [fp, #-16]
    4910:	ldr	r0, [r3]
    4914:	movw	r3, #0
    4918:	movt	r3, #0
    491c:	movw	r2, #0
    4920:	movt	r2, #0
    4924:	mov	r1, #10
    4928:	bl	1530 <register_sub_element>
    492c:	ldr	r3, [fp, #-16]
    4930:	ldr	r0, [r3]
    4934:	movw	r3, #0
    4938:	movt	r3, #0
    493c:	movw	r2, #0
    4940:	movt	r2, #0
    4944:	mov	r1, #22
    4948:	bl	1530 <register_sub_element>
    494c:	ldr	r3, [fp, #-16]
    4950:	ldr	r0, [r3]
    4954:	movw	r3, #0
    4958:	movt	r3, #0
    495c:	movw	r2, #0
    4960:	movt	r2, #0
    4964:	mov	r1, #4
    4968:	bl	1530 <register_sub_element>
    496c:	ldr	r3, [fp, #-16]
    4970:	ldr	r2, [r3]
    4974:	movw	r3, #0
    4978:	movt	r3, #0
    497c:	str	r3, [r2, #36]	; 0x24
    4980:	mov	r3, #0
    4984:	mov	r0, r3
    4988:	sub	sp, fp, #8
    498c:	ldr	r4, [sp]
    4990:	ldr	fp, [sp, #4]
    4994:	add	sp, sp, #8
    4998:	pop	{pc}		; (ldr pc, [sp], #4)

0000499c <cd_named_type_init>:
    499c:	str	fp, [sp, #-8]!
    49a0:	str	lr, [sp, #4]
    49a4:	add	fp, sp, #4
    49a8:	sub	sp, sp, #16
    49ac:	str	r0, [fp, #-16]
    49b0:	str	r1, [fp, #-20]	; 0xffffffec
    49b4:	ldr	r3, [fp, #-16]
    49b8:	ldr	r3, [r3]
    49bc:	ldr	r3, [r3]
    49c0:	mov	r2, r3
    49c4:	movw	r1, #0
    49c8:	movt	r1, #0
    49cc:	ldr	r0, [fp, #-20]	; 0xffffffec
    49d0:	bl	fd8 <get_mandatory_attribute_value>
    49d4:	str	r0, [fp, #-8]
    49d8:	ldr	r3, [fp, #-8]
    49dc:	cmp	r3, #0
    49e0:	bne	49ec <cd_named_type_init+0x50>
    49e4:	mvn	r3, #0
    49e8:	b	4a90 <cd_named_type_init+0xf4>
    49ec:	ldr	r3, [fp, #-16]
    49f0:	ldr	r2, [r3]
    49f4:	movw	r3, #0
    49f8:	movt	r3, #0
    49fc:	str	r3, [r2, #40]	; 0x28
    4a00:	ldr	r3, [fp, #-16]
    4a04:	ldr	r3, [r3, #24]
    4a08:	cmp	r3, #0
    4a0c:	bne	4a30 <cd_named_type_init+0x94>
    4a10:	movw	r3, #0
    4a14:	movt	r3, #0
    4a18:	movw	r2, #1889	; 0x761
    4a1c:	movw	r1, #0
    4a20:	movt	r1, #0
    4a24:	movw	r0, #0
    4a28:	movt	r0, #0
    4a2c:	bl	0 <__assert_fail>
    4a30:	sub	r3, fp, #12
    4a34:	mov	r2, r3
    4a38:	ldr	r1, [fp, #-8]
    4a3c:	ldr	r0, [fp, #-16]
    4a40:	bl	13e4 <get_named_type>
    4a44:	mov	r3, r0
    4a48:	cmp	r3, #0
    4a4c:	beq	4a58 <cd_named_type_init+0xbc>
    4a50:	mvn	r3, #0
    4a54:	b	4a90 <cd_named_type_init+0xf4>
    4a58:	ldr	r2, [fp, #-12]
    4a5c:	ldr	r3, [fp, #-16]
    4a60:	ldr	r3, [r3]
    4a64:	ldr	r2, [r2]
    4a68:	str	r2, [r3, #44]	; 0x2c
    4a6c:	ldr	r3, [fp, #-16]
    4a70:	ldr	r3, [r3]
    4a74:	mov	r2, #1
    4a78:	str	r2, [r3, #48]	; 0x30
    4a7c:	ldr	r3, [fp, #-16]
    4a80:	ldr	r3, [r3]
    4a84:	ldr	r2, [fp, #-12]
    4a88:	str	r2, [r3, #8]
    4a8c:	mov	r3, #0
    4a90:	mov	r0, r3
    4a94:	sub	sp, fp, #4
    4a98:	ldr	fp, [sp]
    4a9c:	add	sp, sp, #4
    4aa0:	pop	{pc}		; (ldr pc, [sp], #4)

00004aa4 <cd_native_type_finalise>:
    4aa4:	str	fp, [sp, #-8]!
    4aa8:	str	lr, [sp, #4]
    4aac:	add	fp, sp, #4
    4ab0:	sub	sp, sp, #8
    4ab4:	str	r0, [fp, #-8]
    4ab8:	ldr	r3, [fp, #-8]
    4abc:	ldr	r3, [r3]
    4ac0:	ldr	r3, [r3, #12]
    4ac4:	cmp	r3, #0
    4ac8:	bne	4ae8 <cd_native_type_finalise+0x44>
    4acc:	movw	r1, #0
    4ad0:	movt	r1, #0
    4ad4:	movw	r0, #65136	; 0xfe70
    4ad8:	movt	r0, #65535	; 0xffff
    4adc:	bl	0 <coda_set_error>
    4ae0:	mvn	r3, #0
    4ae4:	b	4e48 <cd_native_type_finalise+0x3a4>
    4ae8:	ldr	r3, [fp, #-8]
    4aec:	ldr	r3, [r3]
    4af0:	ldr	r3, [r3, #12]
    4af4:	movw	r1, #0
    4af8:	movt	r1, #0
    4afc:	mov	r0, r3
    4b00:	bl	0 <strcmp>
    4b04:	mov	r3, r0
    4b08:	cmp	r3, #0
    4b0c:	bne	4b28 <cd_native_type_finalise+0x84>
    4b10:	ldr	r3, [fp, #-8]
    4b14:	ldr	r1, [r3]
    4b18:	mov	r2, #0
    4b1c:	mov	r3, #0
    4b20:	strd	r2, [r1, #16]
    4b24:	b	4e44 <cd_native_type_finalise+0x3a0>
    4b28:	ldr	r3, [fp, #-8]
    4b2c:	ldr	r3, [r3]
    4b30:	ldr	r3, [r3, #12]
    4b34:	movw	r1, #0
    4b38:	movt	r1, #0
    4b3c:	mov	r0, r3
    4b40:	bl	0 <strcmp>
    4b44:	mov	r3, r0
    4b48:	cmp	r3, #0
    4b4c:	bne	4b68 <cd_native_type_finalise+0xc4>
    4b50:	ldr	r3, [fp, #-8]
    4b54:	ldr	r1, [r3]
    4b58:	mov	r2, #2
    4b5c:	mov	r3, #0
    4b60:	strd	r2, [r1, #16]
    4b64:	b	4e44 <cd_native_type_finalise+0x3a0>
    4b68:	ldr	r3, [fp, #-8]
    4b6c:	ldr	r3, [r3]
    4b70:	ldr	r3, [r3, #12]
    4b74:	movw	r1, #0
    4b78:	movt	r1, #0
    4b7c:	mov	r0, r3
    4b80:	bl	0 <strcmp>
    4b84:	mov	r3, r0
    4b88:	cmp	r3, #0
    4b8c:	bne	4ba8 <cd_native_type_finalise+0x104>
    4b90:	ldr	r3, [fp, #-8]
    4b94:	ldr	r1, [r3]
    4b98:	mov	r2, #4
    4b9c:	mov	r3, #0
    4ba0:	strd	r2, [r1, #16]
    4ba4:	b	4e44 <cd_native_type_finalise+0x3a0>
    4ba8:	ldr	r3, [fp, #-8]
    4bac:	ldr	r3, [r3]
    4bb0:	ldr	r3, [r3, #12]
    4bb4:	movw	r1, #0
    4bb8:	movt	r1, #0
    4bbc:	mov	r0, r3
    4bc0:	bl	0 <strcmp>
    4bc4:	mov	r3, r0
    4bc8:	cmp	r3, #0
    4bcc:	bne	4be8 <cd_native_type_finalise+0x144>
    4bd0:	ldr	r3, [fp, #-8]
    4bd4:	ldr	r1, [r3]
    4bd8:	mov	r2, #6
    4bdc:	mov	r3, #0
    4be0:	strd	r2, [r1, #16]
    4be4:	b	4e44 <cd_native_type_finalise+0x3a0>
    4be8:	ldr	r3, [fp, #-8]
    4bec:	ldr	r3, [r3]
    4bf0:	ldr	r3, [r3, #12]
    4bf4:	movw	r1, #0
    4bf8:	movt	r1, #0
    4bfc:	mov	r0, r3
    4c00:	bl	0 <strcmp>
    4c04:	mov	r3, r0
    4c08:	cmp	r3, #0
    4c0c:	bne	4c28 <cd_native_type_finalise+0x184>
    4c10:	ldr	r3, [fp, #-8]
    4c14:	ldr	r1, [r3]
    4c18:	mov	r2, #1
    4c1c:	mov	r3, #0
    4c20:	strd	r2, [r1, #16]
    4c24:	b	4e44 <cd_native_type_finalise+0x3a0>
    4c28:	ldr	r3, [fp, #-8]
    4c2c:	ldr	r3, [r3]
    4c30:	ldr	r3, [r3, #12]
    4c34:	movw	r1, #0
    4c38:	movt	r1, #0
    4c3c:	mov	r0, r3
    4c40:	bl	0 <strcmp>
    4c44:	mov	r3, r0
    4c48:	cmp	r3, #0
    4c4c:	bne	4c68 <cd_native_type_finalise+0x1c4>
    4c50:	ldr	r3, [fp, #-8]
    4c54:	ldr	r1, [r3]
    4c58:	mov	r2, #3
    4c5c:	mov	r3, #0
    4c60:	strd	r2, [r1, #16]
    4c64:	b	4e44 <cd_native_type_finalise+0x3a0>
    4c68:	ldr	r3, [fp, #-8]
    4c6c:	ldr	r3, [r3]
    4c70:	ldr	r3, [r3, #12]
    4c74:	movw	r1, #0
    4c78:	movt	r1, #0
    4c7c:	mov	r0, r3
    4c80:	bl	0 <strcmp>
    4c84:	mov	r3, r0
    4c88:	cmp	r3, #0
    4c8c:	bne	4ca8 <cd_native_type_finalise+0x204>
    4c90:	ldr	r3, [fp, #-8]
    4c94:	ldr	r1, [r3]
    4c98:	mov	r2, #5
    4c9c:	mov	r3, #0
    4ca0:	strd	r2, [r1, #16]
    4ca4:	b	4e44 <cd_native_type_finalise+0x3a0>
    4ca8:	ldr	r3, [fp, #-8]
    4cac:	ldr	r3, [r3]
    4cb0:	ldr	r3, [r3, #12]
    4cb4:	movw	r1, #0
    4cb8:	movt	r1, #0
    4cbc:	mov	r0, r3
    4cc0:	bl	0 <strcmp>
    4cc4:	mov	r3, r0
    4cc8:	cmp	r3, #0
    4ccc:	bne	4ce8 <cd_native_type_finalise+0x244>
    4cd0:	ldr	r3, [fp, #-8]
    4cd4:	ldr	r1, [r3]
    4cd8:	mov	r2, #7
    4cdc:	mov	r3, #0
    4ce0:	strd	r2, [r1, #16]
    4ce4:	b	4e44 <cd_native_type_finalise+0x3a0>
    4ce8:	ldr	r3, [fp, #-8]
    4cec:	ldr	r3, [r3]
    4cf0:	ldr	r3, [r3, #12]
    4cf4:	movw	r1, #0
    4cf8:	movt	r1, #0
    4cfc:	mov	r0, r3
    4d00:	bl	0 <strcmp>
    4d04:	mov	r3, r0
    4d08:	cmp	r3, #0
    4d0c:	bne	4d28 <cd_native_type_finalise+0x284>
    4d10:	ldr	r3, [fp, #-8]
    4d14:	ldr	r1, [r3]
    4d18:	mov	r2, #8
    4d1c:	mov	r3, #0
    4d20:	strd	r2, [r1, #16]
    4d24:	b	4e44 <cd_native_type_finalise+0x3a0>
    4d28:	ldr	r3, [fp, #-8]
    4d2c:	ldr	r3, [r3]
    4d30:	ldr	r3, [r3, #12]
    4d34:	movw	r1, #0
    4d38:	movt	r1, #0
    4d3c:	mov	r0, r3
    4d40:	bl	0 <strcmp>
    4d44:	mov	r3, r0
    4d48:	cmp	r3, #0
    4d4c:	bne	4d68 <cd_native_type_finalise+0x2c4>
    4d50:	ldr	r3, [fp, #-8]
    4d54:	ldr	r1, [r3]
    4d58:	mov	r2, #9
    4d5c:	mov	r3, #0
    4d60:	strd	r2, [r1, #16]
    4d64:	b	4e44 <cd_native_type_finalise+0x3a0>
    4d68:	ldr	r3, [fp, #-8]
    4d6c:	ldr	r3, [r3]
    4d70:	ldr	r3, [r3, #12]
    4d74:	movw	r1, #0
    4d78:	movt	r1, #0
    4d7c:	mov	r0, r3
    4d80:	bl	0 <strcmp>
    4d84:	mov	r3, r0
    4d88:	cmp	r3, #0
    4d8c:	bne	4da8 <cd_native_type_finalise+0x304>
    4d90:	ldr	r3, [fp, #-8]
    4d94:	ldr	r1, [r3]
    4d98:	mov	r2, #10
    4d9c:	mov	r3, #0
    4da0:	strd	r2, [r1, #16]
    4da4:	b	4e44 <cd_native_type_finalise+0x3a0>
    4da8:	ldr	r3, [fp, #-8]
    4dac:	ldr	r3, [r3]
    4db0:	ldr	r3, [r3, #12]
    4db4:	movw	r1, #0
    4db8:	movt	r1, #0
    4dbc:	mov	r0, r3
    4dc0:	bl	0 <strcmp>
    4dc4:	mov	r3, r0
    4dc8:	cmp	r3, #0
    4dcc:	bne	4de8 <cd_native_type_finalise+0x344>
    4dd0:	ldr	r3, [fp, #-8]
    4dd4:	ldr	r1, [r3]
    4dd8:	mov	r2, #11
    4ddc:	mov	r3, #0
    4de0:	strd	r2, [r1, #16]
    4de4:	b	4e44 <cd_native_type_finalise+0x3a0>
    4de8:	ldr	r3, [fp, #-8]
    4dec:	ldr	r3, [r3]
    4df0:	ldr	r3, [r3, #12]
    4df4:	movw	r1, #0
    4df8:	movt	r1, #0
    4dfc:	mov	r0, r3
    4e00:	bl	0 <strcmp>
    4e04:	mov	r3, r0
    4e08:	cmp	r3, #0
    4e0c:	bne	4e28 <cd_native_type_finalise+0x384>
    4e10:	ldr	r3, [fp, #-8]
    4e14:	ldr	r1, [r3]
    4e18:	mov	r2, #12
    4e1c:	mov	r3, #0
    4e20:	strd	r2, [r1, #16]
    4e24:	b	4e44 <cd_native_type_finalise+0x3a0>
    4e28:	movw	r1, #0
    4e2c:	movt	r1, #0
    4e30:	movw	r0, #65136	; 0xfe70
    4e34:	movt	r0, #65535	; 0xffff
    4e38:	bl	0 <coda_set_error>
    4e3c:	mvn	r3, #0
    4e40:	b	4e48 <cd_native_type_finalise+0x3a4>
    4e44:	mov	r3, #0
    4e48:	mov	r0, r3
    4e4c:	sub	sp, fp, #4
    4e50:	ldr	fp, [sp]
    4e54:	add	sp, sp, #4
    4e58:	pop	{pc}		; (ldr pc, [sp], #4)

00004e5c <cd_native_type_init>:
    4e5c:	push	{fp}		; (str fp, [sp, #-4]!)
    4e60:	add	fp, sp, #0
    4e64:	sub	sp, sp, #12
    4e68:	str	r0, [fp, #-8]
    4e6c:	str	r1, [fp, #-12]
    4e70:	ldr	r3, [fp, #-8]
    4e74:	ldr	r3, [r3]
    4e78:	mov	r2, #1
    4e7c:	str	r2, [r3, #32]
    4e80:	ldr	r3, [fp, #-8]
    4e84:	ldr	r2, [r3]
    4e88:	movw	r3, #0
    4e8c:	movt	r3, #0
    4e90:	str	r3, [r2, #36]	; 0x24
    4e94:	mov	r3, #0
    4e98:	mov	r0, r3
    4e9c:	add	sp, fp, #0
    4ea0:	pop	{fp}		; (ldr fp, [sp], #4)
    4ea4:	bx	lr

00004ea8 <cd_mapping_init>:
    4ea8:	str	r4, [sp, #-12]!
    4eac:	str	fp, [sp, #4]
    4eb0:	str	lr, [sp, #8]
    4eb4:	add	fp, sp, #8
    4eb8:	sub	sp, sp, #36	; 0x24
    4ebc:	str	r0, [fp, #-40]	; 0xffffffd8
    4ec0:	str	r1, [fp, #-44]	; 0xffffffd4
    4ec4:	ldr	r3, [fp, #-40]	; 0xffffffd8
    4ec8:	ldr	r3, [r3]
    4ecc:	ldr	r3, [r3]
    4ed0:	mov	r2, r3
    4ed4:	movw	r1, #0
    4ed8:	movt	r1, #0
    4edc:	ldr	r0, [fp, #-44]	; 0xffffffd4
    4ee0:	bl	fd8 <get_mandatory_attribute_value>
    4ee4:	str	r0, [fp, #-16]
    4ee8:	ldr	r3, [fp, #-16]
    4eec:	cmp	r3, #0
    4ef0:	bne	4efc <cd_mapping_init+0x54>
    4ef4:	mvn	r3, #0
    4ef8:	b	5170 <cd_mapping_init+0x2c8>
    4efc:	ldr	r3, [fp, #-40]	; 0xffffffd8
    4f00:	ldr	r3, [r3]
    4f04:	ldr	r3, [r3]
    4f08:	mov	r2, r3
    4f0c:	movw	r1, #0
    4f10:	movt	r1, #0
    4f14:	ldr	r0, [fp, #-44]	; 0xffffffd4
    4f18:	bl	fd8 <get_mandatory_attribute_value>
    4f1c:	str	r0, [fp, #-20]	; 0xffffffec
    4f20:	ldr	r3, [fp, #-20]	; 0xffffffec
    4f24:	cmp	r3, #0
    4f28:	bne	4f34 <cd_mapping_init+0x8c>
    4f2c:	mvn	r3, #0
    4f30:	b	5170 <cd_mapping_init+0x2c8>
    4f34:	ldr	r3, [fp, #-40]	; 0xffffffd8
    4f38:	ldr	r3, [r3]
    4f3c:	ldr	r3, [r3, #396]	; 0x18c
    4f40:	ldr	r3, [r3]
    4f44:	cmp	r3, #20
    4f48:	bne	4fe4 <cd_mapping_init+0x13c>
    4f4c:	ldr	r0, [fp, #-20]	; 0xffffffec
    4f50:	bl	0 <strlen>
    4f54:	mov	r3, r0
    4f58:	mov	r1, r3
    4f5c:	sub	r2, fp, #28
    4f60:	mov	r3, #0
    4f64:	ldr	r0, [fp, #-20]	; 0xffffffec
    4f68:	bl	0 <coda_ascii_parse_int64>
    4f6c:	mov	r3, r0
    4f70:	cmp	r3, #0
    4f74:	bge	4f98 <cd_mapping_init+0xf0>
    4f78:	ldr	r2, [fp, #-20]	; 0xffffffec
    4f7c:	movw	r1, #0
    4f80:	movt	r1, #0
    4f84:	movw	r0, #65136	; 0xfe70
    4f88:	movt	r0, #65535	; 0xffff
    4f8c:	bl	0 <coda_set_error>
    4f90:	mvn	r3, #0
    4f94:	b	5170 <cd_mapping_init+0x2c8>
    4f98:	ldr	r3, [fp, #-40]	; 0xffffffd8
    4f9c:	ldr	r2, [r3]
    4fa0:	movw	r3, #0
    4fa4:	movt	r3, #0
    4fa8:	str	r3, [r2, #40]	; 0x28
    4fac:	ldrd	r2, [fp, #-28]	; 0xffffffe4
    4fb0:	ldr	r1, [fp, #-40]	; 0xffffffd8
    4fb4:	ldr	r4, [r1]
    4fb8:	ldr	r0, [fp, #-16]
    4fbc:	bl	0 <coda_ascii_integer_mapping_new>
    4fc0:	mov	r3, r0
    4fc4:	str	r3, [r4, #8]
    4fc8:	ldr	r3, [fp, #-40]	; 0xffffffd8
    4fcc:	ldr	r3, [r3]
    4fd0:	ldr	r3, [r3, #8]
    4fd4:	cmp	r3, #0
    4fd8:	bne	516c <cd_mapping_init+0x2c4>
    4fdc:	mvn	r3, #0
    4fe0:	b	5170 <cd_mapping_init+0x2c8>
    4fe4:	ldr	r3, [fp, #-40]	; 0xffffffd8
    4fe8:	ldr	r3, [r3]
    4fec:	ldr	r3, [r3, #396]	; 0x18c
    4ff0:	ldr	r3, [r3]
    4ff4:	cmp	r3, #17
    4ff8:	beq	5014 <cd_mapping_init+0x16c>
    4ffc:	ldr	r3, [fp, #-40]	; 0xffffffd8
    5000:	ldr	r3, [r3]
    5004:	ldr	r3, [r3, #396]	; 0x18c
    5008:	ldr	r3, [r3]
    500c:	cmp	r3, #38	; 0x26
    5010:	bne	5148 <cd_mapping_init+0x2a0>
    5014:	movw	r1, #0
    5018:	movt	r1, #0
    501c:	ldr	r0, [fp, #-20]	; 0xffffffec
    5020:	bl	0 <strcasecmp>
    5024:	mov	r3, r0
    5028:	cmp	r3, #0
    502c:	bne	5040 <cd_mapping_init+0x198>
    5030:	bl	0 <coda_NaN>
    5034:	vmov.f64	d7, d0
    5038:	vstr	d7, [fp, #-36]	; 0xffffffdc
    503c:	b	50f8 <cd_mapping_init+0x250>
    5040:	movw	r1, #0
    5044:	movt	r1, #0
    5048:	ldr	r0, [fp, #-20]	; 0xffffffec
    504c:	bl	0 <strcasecmp>
    5050:	mov	r3, r0
    5054:	cmp	r3, #0
    5058:	beq	5078 <cd_mapping_init+0x1d0>
    505c:	movw	r1, #0
    5060:	movt	r1, #0
    5064:	ldr	r0, [fp, #-20]	; 0xffffffec
    5068:	bl	0 <strcasecmp>
    506c:	mov	r3, r0
    5070:	cmp	r3, #0
    5074:	bne	5088 <cd_mapping_init+0x1e0>
    5078:	bl	0 <coda_PlusInf>
    507c:	vmov.f64	d7, d0
    5080:	vstr	d7, [fp, #-36]	; 0xffffffdc
    5084:	b	50f8 <cd_mapping_init+0x250>
    5088:	movw	r1, #0
    508c:	movt	r1, #0
    5090:	ldr	r0, [fp, #-20]	; 0xffffffec
    5094:	bl	0 <strcasecmp>
    5098:	mov	r3, r0
    509c:	cmp	r3, #0
    50a0:	bne	50b4 <cd_mapping_init+0x20c>
    50a4:	bl	0 <coda_MinInf>
    50a8:	vmov.f64	d7, d0
    50ac:	vstr	d7, [fp, #-36]	; 0xffffffdc
    50b0:	b	50f8 <cd_mapping_init+0x250>
    50b4:	sub	r3, fp, #36	; 0x24
    50b8:	mov	r2, r3
    50bc:	movw	r1, #0
    50c0:	movt	r1, #0
    50c4:	ldr	r0, [fp, #-20]	; 0xffffffec
    50c8:	bl	0 <__isoc99_sscanf>
    50cc:	mov	r3, r0
    50d0:	cmp	r3, #1
    50d4:	beq	50f8 <cd_mapping_init+0x250>
    50d8:	ldr	r2, [fp, #-20]	; 0xffffffec
    50dc:	movw	r1, #0
    50e0:	movt	r1, #0
    50e4:	movw	r0, #65136	; 0xfe70
    50e8:	movt	r0, #65535	; 0xffff
    50ec:	bl	0 <coda_set_error>
    50f0:	mvn	r3, #0
    50f4:	b	5170 <cd_mapping_init+0x2c8>
    50f8:	ldr	r3, [fp, #-40]	; 0xffffffd8
    50fc:	ldr	r2, [r3]
    5100:	movw	r3, #0
    5104:	movt	r3, #0
    5108:	str	r3, [r2, #40]	; 0x28
    510c:	vldr	d7, [fp, #-36]	; 0xffffffdc
    5110:	ldr	r3, [fp, #-40]	; 0xffffffd8
    5114:	ldr	r4, [r3]
    5118:	vmov.f64	d0, d7
    511c:	ldr	r0, [fp, #-16]
    5120:	bl	0 <coda_ascii_float_mapping_new>
    5124:	mov	r3, r0
    5128:	str	r3, [r4, #8]
    512c:	ldr	r3, [fp, #-40]	; 0xffffffd8
    5130:	ldr	r3, [r3]
    5134:	ldr	r3, [r3, #8]
    5138:	cmp	r3, #0
    513c:	bne	5168 <cd_mapping_init+0x2c0>
    5140:	mvn	r3, #0
    5144:	b	5170 <cd_mapping_init+0x2c8>
    5148:	movw	r3, #0
    514c:	movt	r3, #0
    5150:	movw	r2, #2040	; 0x7f8
    5154:	movw	r1, #0
    5158:	movt	r1, #0
    515c:	movw	r0, #0
    5160:	movt	r0, #0
    5164:	bl	0 <__assert_fail>
    5168:	nop	{0}
    516c:	mov	r3, #0
    5170:	mov	r0, r3
    5174:	sub	sp, fp, #8
    5178:	ldr	r4, [sp]
    517c:	ldr	fp, [sp, #4]
    5180:	add	sp, sp, #8
    5184:	pop	{pc}		; (ldr pc, [sp], #4)

00005188 <cd_match_data_finalise>:
    5188:	str	fp, [sp, #-8]!
    518c:	str	lr, [sp, #4]
    5190:	add	fp, sp, #4
    5194:	sub	sp, sp, #88	; 0x58
    5198:	str	r0, [fp, #-80]	; 0xffffffb0
    519c:	ldr	r3, [fp, #-80]	; 0xffffffb0
    51a0:	ldr	r3, [r3]
    51a4:	ldr	r3, [r3, #8]
    51a8:	str	r3, [fp, #-8]
    51ac:	ldr	r3, [fp, #-80]	; 0xffffffb0
    51b0:	ldr	r3, [r3]
    51b4:	ldr	r3, [r3, #12]
    51b8:	mov	r0, r3
    51bc:	bl	638 <escaped_string_length>
    51c0:	str	r0, [fp, #-12]
    51c4:	ldr	r3, [fp, #-12]
    51c8:	cmp	r3, #0
    51cc:	bge	51ec <cd_match_data_finalise+0x64>
    51d0:	movw	r1, #0
    51d4:	movt	r1, #0
    51d8:	movw	r0, #65136	; 0xfe70
    51dc:	movt	r0, #65535	; 0xffff
    51e0:	bl	0 <coda_set_error>
    51e4:	mvn	r3, #0
    51e8:	b	57b8 <cd_match_data_finalise+0x630>
    51ec:	ldr	r3, [fp, #-8]
    51f0:	ldr	r3, [r3, #4]
    51f4:	cmp	r3, #0
    51f8:	bne	5564 <cd_match_data_finalise+0x3dc>
    51fc:	ldr	r3, [fp, #-8]
    5200:	ldr	r3, [r3]
    5204:	cmp	r3, #0
    5208:	beq	5394 <cd_match_data_finalise+0x20c>
    520c:	ldr	r3, [fp, #-12]
    5210:	cmp	r3, #0
    5214:	bne	5220 <cd_match_data_finalise+0x98>
    5218:	mov	r3, #0
    521c:	b	57b8 <cd_match_data_finalise+0x630>
    5220:	mov	r3, #0
    5224:	str	r3, [sp, #4]
    5228:	mov	r3, #0
    522c:	str	r3, [sp]
    5230:	mov	r3, #0
    5234:	mov	r2, #0
    5238:	mov	r1, #0
    523c:	mov	r0, #36	; 0x24
    5240:	bl	0 <coda_expression_new>
    5244:	str	r0, [fp, #-16]
    5248:	ldr	r3, [fp, #-16]
    524c:	cmp	r3, #0
    5250:	bne	525c <cd_match_data_finalise+0xd4>
    5254:	mvn	r3, #0
    5258:	b	57b8 <cd_match_data_finalise+0x630>
    525c:	mov	r3, #0
    5260:	str	r3, [sp, #4]
    5264:	mov	r3, #0
    5268:	str	r3, [sp]
    526c:	mov	r3, #0
    5270:	ldr	r2, [fp, #-16]
    5274:	mov	r1, #0
    5278:	mov	r0, #75	; 0x4b
    527c:	bl	0 <coda_expression_new>
    5280:	str	r0, [fp, #-20]	; 0xffffffec
    5284:	ldr	r3, [fp, #-20]	; 0xffffffec
    5288:	cmp	r3, #0
    528c:	bne	5298 <cd_match_data_finalise+0x110>
    5290:	mvn	r3, #0
    5294:	b	57b8 <cd_match_data_finalise+0x630>
    5298:	ldr	r3, [fp, #-80]	; 0xffffffb0
    529c:	ldr	r3, [r3]
    52a0:	ldr	r3, [r3, #12]
    52a4:	mov	r0, r3
    52a8:	bl	0 <strdup>
    52ac:	mov	r3, r0
    52b0:	str	r3, [fp, #-24]	; 0xffffffe8
    52b4:	ldr	r3, [fp, #-24]	; 0xffffffe8
    52b8:	cmp	r3, #0
    52bc:	bne	52ec <cd_match_data_finalise+0x164>
    52c0:	movw	r3, #2090	; 0x82a
    52c4:	movw	r2, #0
    52c8:	movt	r2, #0
    52cc:	movw	r1, #0
    52d0:	movt	r1, #0
    52d4:	mvn	r0, #0
    52d8:	bl	0 <coda_set_error>
    52dc:	ldr	r0, [fp, #-20]	; 0xffffffec
    52e0:	bl	0 <coda_expression_delete>
    52e4:	mvn	r3, #0
    52e8:	b	57b8 <cd_match_data_finalise+0x630>
    52ec:	mov	r3, #0
    52f0:	str	r3, [sp, #4]
    52f4:	mov	r3, #0
    52f8:	str	r3, [sp]
    52fc:	mov	r3, #0
    5300:	mov	r2, #0
    5304:	ldr	r1, [fp, #-24]	; 0xffffffe8
    5308:	mov	r0, #22
    530c:	bl	0 <coda_expression_new>
    5310:	str	r0, [fp, #-28]	; 0xffffffe4
    5314:	ldr	r3, [fp, #-28]	; 0xffffffe4
    5318:	cmp	r3, #0
    531c:	bne	5330 <cd_match_data_finalise+0x1a8>
    5320:	ldr	r0, [fp, #-20]	; 0xffffffec
    5324:	bl	0 <coda_expression_delete>
    5328:	mvn	r3, #0
    532c:	b	57b8 <cd_match_data_finalise+0x630>
    5330:	mov	r3, #0
    5334:	str	r3, [sp, #4]
    5338:	mov	r3, #0
    533c:	str	r3, [sp]
    5340:	ldr	r3, [fp, #-28]	; 0xffffffe4
    5344:	ldr	r2, [fp, #-20]	; 0xffffffec
    5348:	mov	r1, #0
    534c:	mov	r0, #25
    5350:	bl	0 <coda_expression_new>
    5354:	str	r0, [fp, #-32]	; 0xffffffe0
    5358:	ldr	r3, [fp, #-32]	; 0xffffffe0
    535c:	cmp	r3, #0
    5360:	bne	536c <cd_match_data_finalise+0x1e4>
    5364:	mvn	r3, #0
    5368:	b	57b8 <cd_match_data_finalise+0x630>
    536c:	ldr	r1, [fp, #-32]	; 0xffffffe0
    5370:	ldr	r0, [fp, #-8]
    5374:	bl	0 <coda_detection_rule_entry_set_expression>
    5378:	mov	r3, r0
    537c:	cmp	r3, #0
    5380:	beq	57b4 <cd_match_data_finalise+0x62c>
    5384:	ldr	r0, [fp, #-32]	; 0xffffffe0
    5388:	bl	0 <coda_expression_delete>
    538c:	mvn	r3, #0
    5390:	b	57b8 <cd_match_data_finalise+0x630>
    5394:	ldr	r3, [fp, #-12]
    5398:	cmp	r3, #0
    539c:	bne	53bc <cd_match_data_finalise+0x234>
    53a0:	movw	r1, #0
    53a4:	movt	r1, #0
    53a8:	movw	r0, #65136	; 0xfe70
    53ac:	movt	r0, #65535	; 0xffff
    53b0:	bl	0 <coda_set_error>
    53b4:	mvn	r3, #0
    53b8:	b	57b8 <cd_match_data_finalise+0x630>
    53bc:	mov	r3, #0
    53c0:	str	r3, [sp, #4]
    53c4:	mov	r3, #0
    53c8:	str	r3, [sp]
    53cc:	mov	r3, #0
    53d0:	mov	r2, #0
    53d4:	mov	r1, #0
    53d8:	mov	r0, #38	; 0x26
    53dc:	bl	0 <coda_expression_new>
    53e0:	str	r0, [fp, #-36]	; 0xffffffdc
    53e4:	ldr	r3, [fp, #-36]	; 0xffffffdc
    53e8:	cmp	r3, #0
    53ec:	bne	53f8 <cd_match_data_finalise+0x270>
    53f0:	mvn	r3, #0
    53f4:	b	57b8 <cd_match_data_finalise+0x630>
    53f8:	movw	r0, #0
    53fc:	movt	r0, #0
    5400:	bl	0 <strdup>
    5404:	mov	r3, r0
    5408:	mov	r1, r3
    540c:	mov	r3, #0
    5410:	str	r3, [sp, #4]
    5414:	mov	r3, #0
    5418:	str	r3, [sp]
    541c:	mov	r3, #0
    5420:	mov	r2, #0
    5424:	mov	r0, #20
    5428:	bl	0 <coda_expression_new>
    542c:	str	r0, [fp, #-40]	; 0xffffffd8
    5430:	ldr	r3, [fp, #-40]	; 0xffffffd8
    5434:	cmp	r3, #0
    5438:	bne	544c <cd_match_data_finalise+0x2c4>
    543c:	ldr	r0, [fp, #-36]	; 0xffffffdc
    5440:	bl	0 <coda_expression_delete>
    5444:	mvn	r3, #0
    5448:	b	57b8 <cd_match_data_finalise+0x630>
    544c:	mov	r3, #0
    5450:	str	r3, [sp, #4]
    5454:	mov	r3, #0
    5458:	str	r3, [sp]
    545c:	ldr	r3, [fp, #-40]	; 0xffffffd8
    5460:	ldr	r2, [fp, #-36]	; 0xffffffdc
    5464:	mov	r1, #0
    5468:	mov	r0, #16
    546c:	bl	0 <coda_expression_new>
    5470:	str	r0, [fp, #-28]	; 0xffffffe4
    5474:	ldr	r3, [fp, #-28]	; 0xffffffe4
    5478:	cmp	r3, #0
    547c:	bne	5488 <cd_match_data_finalise+0x300>
    5480:	mvn	r3, #0
    5484:	b	57b8 <cd_match_data_finalise+0x630>
    5488:	ldr	r3, [fp, #-80]	; 0xffffffb0
    548c:	ldr	r3, [r3]
    5490:	ldr	r3, [r3, #12]
    5494:	mov	r0, r3
    5498:	bl	1c0 <regexp_match_string>
    549c:	str	r0, [fp, #-24]	; 0xffffffe8
    54a0:	ldr	r3, [fp, #-24]	; 0xffffffe8
    54a4:	cmp	r3, #0
    54a8:	bne	54bc <cd_match_data_finalise+0x334>
    54ac:	ldr	r0, [fp, #-28]	; 0xffffffe4
    54b0:	bl	0 <coda_expression_delete>
    54b4:	mvn	r3, #0
    54b8:	b	57b8 <cd_match_data_finalise+0x630>
    54bc:	mov	r3, #0
    54c0:	str	r3, [sp, #4]
    54c4:	mov	r3, #0
    54c8:	str	r3, [sp]
    54cc:	mov	r3, #0
    54d0:	mov	r2, #0
    54d4:	ldr	r1, [fp, #-24]	; 0xffffffe8
    54d8:	mov	r0, #21
    54dc:	bl	0 <coda_expression_new>
    54e0:	str	r0, [fp, #-20]	; 0xffffffec
    54e4:	ldr	r3, [fp, #-20]	; 0xffffffec
    54e8:	cmp	r3, #0
    54ec:	bne	5500 <cd_match_data_finalise+0x378>
    54f0:	ldr	r0, [fp, #-28]	; 0xffffffe4
    54f4:	bl	0 <coda_expression_delete>
    54f8:	mvn	r3, #0
    54fc:	b	57b8 <cd_match_data_finalise+0x630>
    5500:	mov	r3, #0
    5504:	str	r3, [sp, #4]
    5508:	mov	r3, #0
    550c:	str	r3, [sp]
    5510:	ldr	r3, [fp, #-28]	; 0xffffffe4
    5514:	ldr	r2, [fp, #-20]	; 0xffffffec
    5518:	mov	r1, #0
    551c:	mov	r0, #71	; 0x47
    5520:	bl	0 <coda_expression_new>
    5524:	str	r0, [fp, #-32]	; 0xffffffe0
    5528:	ldr	r3, [fp, #-32]	; 0xffffffe0
    552c:	cmp	r3, #0
    5530:	bne	553c <cd_match_data_finalise+0x3b4>
    5534:	mvn	r3, #0
    5538:	b	57b8 <cd_match_data_finalise+0x630>
    553c:	ldr	r1, [fp, #-32]	; 0xffffffe0
    5540:	ldr	r0, [fp, #-8]
    5544:	bl	0 <coda_detection_rule_entry_set_expression>
    5548:	mov	r3, r0
    554c:	cmp	r3, #0
    5550:	beq	57b4 <cd_match_data_finalise+0x62c>
    5554:	ldr	r0, [fp, #-32]	; 0xffffffe0
    5558:	bl	0 <coda_expression_delete>
    555c:	mvn	r3, #0
    5560:	b	57b8 <cd_match_data_finalise+0x630>
    5564:	ldr	r3, [fp, #-8]
    5568:	ldr	r3, [r3, #4]
    556c:	ldr	r3, [r3]
    5570:	cmp	r3, #20
    5574:	bne	57b4 <cd_match_data_finalise+0x62c>
    5578:	ldr	r3, [fp, #-12]
    557c:	cmp	r3, #0
    5580:	bne	55a0 <cd_match_data_finalise+0x418>
    5584:	movw	r1, #0
    5588:	movt	r1, #0
    558c:	movw	r0, #65136	; 0xfe70
    5590:	movt	r0, #65535	; 0xffff
    5594:	bl	0 <coda_set_error>
    5598:	mvn	r3, #0
    559c:	b	57b8 <cd_match_data_finalise+0x630>
    55a0:	mov	r3, #0
    55a4:	str	r3, [sp, #4]
    55a8:	mov	r3, #0
    55ac:	str	r3, [sp]
    55b0:	mov	r3, #0
    55b4:	mov	r2, #0
    55b8:	mov	r1, #0
    55bc:	mov	r0, #38	; 0x26
    55c0:	bl	0 <coda_expression_new>
    55c4:	str	r0, [fp, #-44]	; 0xffffffd4
    55c8:	ldr	r3, [fp, #-44]	; 0xffffffd4
    55cc:	cmp	r3, #0
    55d0:	bne	55dc <cd_match_data_finalise+0x454>
    55d4:	mvn	r3, #0
    55d8:	b	57b8 <cd_match_data_finalise+0x630>
    55dc:	ldr	r3, [fp, #-12]
    55e0:	mov	r0, r3
    55e4:	asr	r1, r0, #31
    55e8:	sub	r3, fp, #76	; 0x4c
    55ec:	mov	r2, r3
    55f0:	bl	0 <coda_str64>
    55f4:	sub	r3, fp, #76	; 0x4c
    55f8:	mov	r0, r3
    55fc:	bl	0 <strdup>
    5600:	mov	r3, r0
    5604:	str	r3, [fp, #-24]	; 0xffffffe8
    5608:	ldr	r3, [fp, #-24]	; 0xffffffe8
    560c:	cmp	r3, #0
    5610:	bne	5640 <cd_match_data_finalise+0x4b8>
    5614:	movw	r3, #2184	; 0x888
    5618:	movw	r2, #0
    561c:	movt	r2, #0
    5620:	movw	r1, #0
    5624:	movt	r1, #0
    5628:	mvn	r0, #0
    562c:	bl	0 <coda_set_error>
    5630:	ldr	r0, [fp, #-44]	; 0xffffffd4
    5634:	bl	0 <coda_expression_delete>
    5638:	mvn	r3, #0
    563c:	b	57b8 <cd_match_data_finalise+0x630>
    5640:	mov	r3, #0
    5644:	str	r3, [sp, #4]
    5648:	mov	r3, #0
    564c:	str	r3, [sp]
    5650:	mov	r3, #0
    5654:	mov	r2, #0
    5658:	ldr	r1, [fp, #-24]	; 0xffffffe8
    565c:	mov	r0, #20
    5660:	bl	0 <coda_expression_new>
    5664:	str	r0, [fp, #-48]	; 0xffffffd0
    5668:	ldr	r3, [fp, #-48]	; 0xffffffd0
    566c:	cmp	r3, #0
    5670:	bne	5684 <cd_match_data_finalise+0x4fc>
    5674:	ldr	r0, [fp, #-44]	; 0xffffffd4
    5678:	bl	0 <coda_expression_delete>
    567c:	mvn	r3, #0
    5680:	b	57b8 <cd_match_data_finalise+0x630>
    5684:	ldr	r3, [fp, #-8]
    5688:	ldr	r2, [r3, #4]
    568c:	mov	r3, #0
    5690:	str	r3, [sp, #4]
    5694:	ldr	r3, [fp, #-48]	; 0xffffffd0
    5698:	str	r3, [sp]
    569c:	mov	r3, r2
    56a0:	ldr	r2, [fp, #-44]	; 0xffffffd4
    56a4:	mov	r1, #0
    56a8:	mov	r0, #16
    56ac:	bl	0 <coda_expression_new>
    56b0:	str	r0, [fp, #-20]	; 0xffffffec
    56b4:	ldr	r3, [fp, #-8]
    56b8:	mov	r2, #0
    56bc:	str	r2, [r3, #4]
    56c0:	ldr	r3, [fp, #-20]	; 0xffffffec
    56c4:	cmp	r3, #0
    56c8:	bne	56d4 <cd_match_data_finalise+0x54c>
    56cc:	mvn	r3, #0
    56d0:	b	57b8 <cd_match_data_finalise+0x630>
    56d4:	ldr	r3, [fp, #-80]	; 0xffffffb0
    56d8:	ldr	r3, [r3]
    56dc:	ldr	r3, [r3, #12]
    56e0:	mov	r0, r3
    56e4:	bl	0 <strdup>
    56e8:	mov	r3, r0
    56ec:	str	r3, [fp, #-24]	; 0xffffffe8
    56f0:	ldr	r3, [fp, #-24]	; 0xffffffe8
    56f4:	cmp	r3, #0
    56f8:	bne	5728 <cd_match_data_finalise+0x5a0>
    56fc:	movw	r3, #2204	; 0x89c
    5700:	movw	r2, #0
    5704:	movt	r2, #0
    5708:	movw	r1, #0
    570c:	movt	r1, #0
    5710:	mvn	r0, #0
    5714:	bl	0 <coda_set_error>
    5718:	ldr	r0, [fp, #-20]	; 0xffffffec
    571c:	bl	0 <coda_expression_delete>
    5720:	mvn	r3, #0
    5724:	b	57b8 <cd_match_data_finalise+0x630>
    5728:	mov	r3, #0
    572c:	str	r3, [sp, #4]
    5730:	mov	r3, #0
    5734:	str	r3, [sp]
    5738:	mov	r3, #0
    573c:	mov	r2, #0
    5740:	ldr	r1, [fp, #-24]	; 0xffffffe8
    5744:	mov	r0, #22
    5748:	bl	0 <coda_expression_new>
    574c:	str	r0, [fp, #-28]	; 0xffffffe4
    5750:	ldr	r3, [fp, #-28]	; 0xffffffe4
    5754:	cmp	r3, #0
    5758:	bne	576c <cd_match_data_finalise+0x5e4>
    575c:	ldr	r0, [fp, #-20]	; 0xffffffec
    5760:	bl	0 <coda_expression_delete>
    5764:	mvn	r3, #0
    5768:	b	57b8 <cd_match_data_finalise+0x630>
    576c:	mov	r3, #0
    5770:	str	r3, [sp, #4]
    5774:	mov	r3, #0
    5778:	str	r3, [sp]
    577c:	ldr	r3, [fp, #-28]	; 0xffffffe4
    5780:	ldr	r2, [fp, #-20]	; 0xffffffec
    5784:	mov	r1, #0
    5788:	mov	r0, #25
    578c:	bl	0 <coda_expression_new>
    5790:	mov	r2, r0
    5794:	ldr	r3, [fp, #-8]
    5798:	str	r2, [r3, #4]
    579c:	ldr	r3, [fp, #-8]
    57a0:	ldr	r3, [r3, #4]
    57a4:	cmp	r3, #0
    57a8:	bne	57b4 <cd_match_data_finalise+0x62c>
    57ac:	mvn	r3, #0
    57b0:	b	57b8 <cd_match_data_finalise+0x630>
    57b4:	mov	r3, #0
    57b8:	mov	r0, r3
    57bc:	sub	sp, fp, #4
    57c0:	ldr	fp, [sp]
    57c4:	add	sp, sp, #4
    57c8:	pop	{pc}		; (ldr pc, [sp], #4)

000057cc <add_detection_rule_entry_for_path>:
    57cc:	str	fp, [sp, #-8]!
    57d0:	str	lr, [sp, #4]
    57d4:	add	fp, sp, #4
    57d8:	sub	sp, sp, #96	; 0x60
    57dc:	str	r0, [fp, #-80]	; 0xffffffb0
    57e0:	str	r1, [fp, #-84]	; 0xffffffac
    57e4:	str	r2, [fp, #-88]	; 0xffffffa8
    57e8:	mov	r3, #1
    57ec:	str	r3, [fp, #-12]
    57f0:	mov	r3, #0
    57f4:	str	r3, [fp, #-16]
    57f8:	mov	r3, #0
    57fc:	str	r3, [fp, #-20]	; 0xffffffec
    5800:	ldr	r3, [fp, #-84]	; 0xffffffac
    5804:	cmp	r3, #0
    5808:	bne	582c <add_detection_rule_entry_for_path+0x60>
    580c:	movw	r3, #0
    5810:	movt	r3, #0
    5814:	movw	r2, #2236	; 0x8bc
    5818:	movw	r1, #0
    581c:	movt	r1, #0
    5820:	movw	r0, #0
    5824:	movt	r0, #0
    5828:	bl	0 <__assert_fail>
    582c:	ldr	r3, [fp, #-88]	; 0xffffffa8
    5830:	mov	r2, #0
    5834:	str	r2, [r3]
    5838:	ldr	r0, [fp, #-84]	; 0xffffffac
    583c:	bl	0 <strdup>
    5840:	mov	r3, r0
    5844:	str	r3, [fp, #-32]	; 0xffffffe0
    5848:	ldr	r3, [fp, #-32]	; 0xffffffe0
    584c:	cmp	r3, #0
    5850:	bne	5878 <add_detection_rule_entry_for_path+0xac>
    5854:	movw	r3, #2245	; 0x8c5
    5858:	movw	r2, #0
    585c:	movt	r2, #0
    5860:	movw	r1, #0
    5864:	movt	r1, #0
    5868:	mvn	r0, #0
    586c:	bl	0 <coda_set_error>
    5870:	mvn	r3, #0
    5874:	b	5e40 <add_detection_rule_entry_for_path+0x674>
    5878:	ldr	r3, [fp, #-32]	; 0xffffffe0
    587c:	str	r3, [fp, #-24]	; 0xffffffe8
    5880:	ldr	r0, [fp, #-84]	; 0xffffffac
    5884:	bl	0 <strlen>
    5888:	mov	r3, r0
    588c:	add	r3, r3, #6
    5890:	mov	r0, r3
    5894:	bl	0 <malloc>
    5898:	mov	r3, r0
    589c:	str	r3, [fp, #-36]	; 0xffffffdc
    58a0:	ldr	r3, [fp, #-36]	; 0xffffffdc
    58a4:	cmp	r3, #0
    58a8:	bne	58d0 <add_detection_rule_entry_for_path+0x104>
    58ac:	movw	r3, #2257	; 0x8d1
    58b0:	movw	r2, #0
    58b4:	movt	r2, #0
    58b8:	movw	r1, #0
    58bc:	movt	r1, #0
    58c0:	mvn	r0, #0
    58c4:	bl	0 <coda_set_error>
    58c8:	mvn	r3, #0
    58cc:	b	5e40 <add_detection_rule_entry_for_path+0x674>
    58d0:	ldr	r3, [fp, #-36]	; 0xffffffdc
    58d4:	mov	r2, #0
    58d8:	strb	r2, [r3]
    58dc:	ldr	r3, [fp, #-36]	; 0xffffffdc
    58e0:	str	r3, [fp, #-28]	; 0xffffffe4
    58e4:	ldr	r3, [fp, #-24]	; 0xffffffe8
    58e8:	ldrb	r3, [r3]
    58ec:	cmp	r3, #47	; 0x2f
    58f0:	bne	591c <add_detection_rule_entry_for_path+0x150>
    58f4:	ldr	r3, [fp, #-24]	; 0xffffffe8
    58f8:	ldrb	r2, [r3]
    58fc:	ldr	r3, [fp, #-28]	; 0xffffffe4
    5900:	strb	r2, [r3]
    5904:	ldr	r3, [fp, #-28]	; 0xffffffe4
    5908:	add	r3, r3, #1
    590c:	str	r3, [fp, #-28]	; 0xffffffe4
    5910:	ldr	r3, [fp, #-24]	; 0xffffffe8
    5914:	add	r3, r3, #1
    5918:	str	r3, [fp, #-24]	; 0xffffffe8
    591c:	ldr	r3, [fp, #-24]	; 0xffffffe8
    5920:	ldrb	r3, [r3]
    5924:	cmp	r3, #64	; 0x40
    5928:	bne	5e1c <add_detection_rule_entry_for_path+0x650>
    592c:	mov	r3, #1
    5930:	str	r3, [fp, #-20]	; 0xffffffec
    5934:	ldr	r3, [fp, #-24]	; 0xffffffe8
    5938:	ldrb	r2, [r3]
    593c:	ldr	r3, [fp, #-28]	; 0xffffffe4
    5940:	strb	r2, [r3]
    5944:	ldr	r3, [fp, #-28]	; 0xffffffe4
    5948:	add	r3, r3, #1
    594c:	str	r3, [fp, #-28]	; 0xffffffe4
    5950:	ldr	r3, [fp, #-24]	; 0xffffffe8
    5954:	add	r3, r3, #1
    5958:	str	r3, [fp, #-24]	; 0xffffffe8
    595c:	b	5e1c <add_detection_rule_entry_for_path+0x650>
    5960:	ldr	r3, [fp, #-20]	; 0xffffffec
    5964:	str	r3, [fp, #-40]	; 0xffffffd8
    5968:	ldr	r3, [fp, #-12]
    596c:	cmp	r3, #0
    5970:	bne	59a4 <add_detection_rule_entry_for_path+0x1d8>
    5974:	ldr	r3, [fp, #-40]	; 0xffffffd8
    5978:	cmp	r3, #0
    597c:	beq	5988 <add_detection_rule_entry_for_path+0x1bc>
    5980:	mov	r2, #64	; 0x40
    5984:	b	598c <add_detection_rule_entry_for_path+0x1c0>
    5988:	mov	r2, #47	; 0x2f
    598c:	ldr	r3, [fp, #-28]	; 0xffffffe4
    5990:	strb	r2, [r3]
    5994:	ldr	r3, [fp, #-28]	; 0xffffffe4
    5998:	add	r3, r3, #1
    599c:	str	r3, [fp, #-28]	; 0xffffffe4
    59a0:	b	59ac <add_detection_rule_entry_for_path+0x1e0>
    59a4:	mov	r3, #0
    59a8:	str	r3, [fp, #-12]
    59ac:	mov	r3, #0
    59b0:	str	r3, [fp, #-8]
    59b4:	ldr	r3, [fp, #-24]	; 0xffffffe8
    59b8:	ldrb	r3, [r3]
    59bc:	cmp	r3, #123	; 0x7b
    59c0:	bne	5a58 <add_detection_rule_entry_for_path+0x28c>
    59c4:	ldr	r3, [fp, #-24]	; 0xffffffe8
    59c8:	add	r3, r3, #1
    59cc:	str	r3, [fp, #-24]	; 0xffffffe8
    59d0:	ldr	r3, [fp, #-24]	; 0xffffffe8
    59d4:	str	r3, [fp, #-8]
    59d8:	b	5a30 <add_detection_rule_entry_for_path+0x264>
    59dc:	ldr	r3, [fp, #-24]	; 0xffffffe8
    59e0:	ldrb	r3, [r3]
    59e4:	cmp	r3, #0
    59e8:	bne	5a24 <add_detection_rule_entry_for_path+0x258>
    59ec:	ldr	r3, [fp, #-80]	; 0xffffffb0
    59f0:	ldr	r3, [r3, #8]
    59f4:	ldr	r3, [r3, #8]
    59f8:	mov	r2, r3
    59fc:	movw	r1, #0
    5a00:	movt	r1, #0
    5a04:	mvn	r0, #99	; 0x63
    5a08:	bl	0 <coda_set_error>
    5a0c:	ldr	r0, [fp, #-36]	; 0xffffffdc
    5a10:	bl	0 <free>
    5a14:	ldr	r0, [fp, #-32]	; 0xffffffe0
    5a18:	bl	0 <free>
    5a1c:	mvn	r3, #0
    5a20:	b	5e40 <add_detection_rule_entry_for_path+0x674>
    5a24:	ldr	r3, [fp, #-24]	; 0xffffffe8
    5a28:	add	r3, r3, #1
    5a2c:	str	r3, [fp, #-24]	; 0xffffffe8
    5a30:	ldr	r3, [fp, #-24]	; 0xffffffe8
    5a34:	ldrb	r3, [r3]
    5a38:	cmp	r3, #125	; 0x7d
    5a3c:	bne	59dc <add_detection_rule_entry_for_path+0x210>
    5a40:	ldr	r3, [fp, #-24]	; 0xffffffe8
    5a44:	mov	r2, #0
    5a48:	strb	r2, [r3]
    5a4c:	ldr	r3, [fp, #-24]	; 0xffffffe8
    5a50:	add	r3, r3, #1
    5a54:	str	r3, [fp, #-24]	; 0xffffffe8
    5a58:	ldr	r3, [fp, #-24]	; 0xffffffe8
    5a5c:	str	r3, [fp, #-44]	; 0xffffffd4
    5a60:	b	5a70 <add_detection_rule_entry_for_path+0x2a4>
    5a64:	ldr	r3, [fp, #-24]	; 0xffffffe8
    5a68:	add	r3, r3, #1
    5a6c:	str	r3, [fp, #-24]	; 0xffffffe8
    5a70:	ldr	r3, [fp, #-24]	; 0xffffffe8
    5a74:	ldrb	r3, [r3]
    5a78:	cmp	r3, #47	; 0x2f
    5a7c:	beq	5aa0 <add_detection_rule_entry_for_path+0x2d4>
    5a80:	ldr	r3, [fp, #-24]	; 0xffffffe8
    5a84:	ldrb	r3, [r3]
    5a88:	cmp	r3, #64	; 0x40
    5a8c:	beq	5aa0 <add_detection_rule_entry_for_path+0x2d4>
    5a90:	ldr	r3, [fp, #-24]	; 0xffffffe8
    5a94:	ldrb	r3, [r3]
    5a98:	cmp	r3, #0
    5a9c:	bne	5a64 <add_detection_rule_entry_for_path+0x298>
    5aa0:	ldr	r3, [fp, #-24]	; 0xffffffe8
    5aa4:	ldrb	r3, [r3]
    5aa8:	cmp	r3, #64	; 0x40
    5aac:	moveq	r3, #1
    5ab0:	movne	r3, #0
    5ab4:	uxtb	r3, r3
    5ab8:	str	r3, [fp, #-20]	; 0xffffffec
    5abc:	ldr	r3, [fp, #-24]	; 0xffffffe8
    5ac0:	ldrb	r3, [r3]
    5ac4:	cmp	r3, #0
    5ac8:	moveq	r3, #1
    5acc:	movne	r3, #0
    5ad0:	uxtb	r3, r3
    5ad4:	str	r3, [fp, #-16]
    5ad8:	ldr	r3, [fp, #-24]	; 0xffffffe8
    5adc:	mov	r2, #0
    5ae0:	strb	r2, [r3]
    5ae4:	mov	r1, #0
    5ae8:	ldr	r0, [fp, #-44]	; 0xffffffd4
    5aec:	bl	0 <coda_identifier_from_name>
    5af0:	str	r0, [fp, #-48]	; 0xffffffd0
    5af4:	ldr	r3, [fp, #-48]	; 0xffffffd0
    5af8:	cmp	r3, #0
    5afc:	bne	5b18 <add_detection_rule_entry_for_path+0x34c>
    5b00:	ldr	r0, [fp, #-36]	; 0xffffffdc
    5b04:	bl	0 <free>
    5b08:	ldr	r0, [fp, #-32]	; 0xffffffe0
    5b0c:	bl	0 <free>
    5b10:	mvn	r3, #0
    5b14:	b	5e40 <add_detection_rule_entry_for_path+0x674>
    5b18:	ldr	r1, [fp, #-48]	; 0xffffffd0
    5b1c:	ldr	r0, [fp, #-28]	; 0xffffffe4
    5b20:	bl	0 <strcpy>
    5b24:	ldr	r0, [fp, #-48]	; 0xffffffd0
    5b28:	bl	0 <strlen>
    5b2c:	mov	r2, r0
    5b30:	ldr	r3, [fp, #-28]	; 0xffffffe4
    5b34:	add	r3, r3, r2
    5b38:	str	r3, [fp, #-28]	; 0xffffffe4
    5b3c:	ldr	r0, [fp, #-48]	; 0xffffffd0
    5b40:	bl	0 <free>
    5b44:	ldr	r3, [fp, #-8]
    5b48:	cmp	r3, #0
    5b4c:	beq	5dc0 <add_detection_rule_entry_for_path+0x5f4>
    5b50:	mov	r3, #0
    5b54:	str	r3, [sp, #4]
    5b58:	mov	r3, #0
    5b5c:	str	r3, [sp]
    5b60:	mov	r3, #0
    5b64:	mov	r2, #0
    5b68:	mov	r1, #0
    5b6c:	mov	r0, #36	; 0x24
    5b70:	bl	0 <coda_expression_new>
    5b74:	str	r0, [fp, #-52]	; 0xffffffcc
    5b78:	ldr	r3, [fp, #-52]	; 0xffffffcc
    5b7c:	cmp	r3, #0
    5b80:	bne	5b9c <add_detection_rule_entry_for_path+0x3d0>
    5b84:	ldr	r0, [fp, #-36]	; 0xffffffdc
    5b88:	bl	0 <free>
    5b8c:	ldr	r0, [fp, #-32]	; 0xffffffe0
    5b90:	bl	0 <free>
    5b94:	mvn	r3, #0
    5b98:	b	5e40 <add_detection_rule_entry_for_path+0x674>
    5b9c:	mov	r3, #0
    5ba0:	str	r3, [sp, #4]
    5ba4:	mov	r3, #0
    5ba8:	str	r3, [sp]
    5bac:	mov	r3, #0
    5bb0:	ldr	r2, [fp, #-52]	; 0xffffffcc
    5bb4:	mov	r1, #0
    5bb8:	mov	r0, #75	; 0x4b
    5bbc:	bl	0 <coda_expression_new>
    5bc0:	str	r0, [fp, #-56]	; 0xffffffc8
    5bc4:	ldr	r3, [fp, #-56]	; 0xffffffc8
    5bc8:	cmp	r3, #0
    5bcc:	bne	5be8 <add_detection_rule_entry_for_path+0x41c>
    5bd0:	ldr	r0, [fp, #-36]	; 0xffffffdc
    5bd4:	bl	0 <free>
    5bd8:	ldr	r0, [fp, #-32]	; 0xffffffe0
    5bdc:	bl	0 <free>
    5be0:	mvn	r3, #0
    5be4:	b	5e40 <add_detection_rule_entry_for_path+0x674>
    5be8:	ldr	r0, [fp, #-8]
    5bec:	bl	0 <strdup>
    5bf0:	mov	r3, r0
    5bf4:	str	r3, [fp, #-60]	; 0xffffffc4
    5bf8:	ldr	r3, [fp, #-60]	; 0xffffffc4
    5bfc:	cmp	r3, #0
    5c00:	bne	5c40 <add_detection_rule_entry_for_path+0x474>
    5c04:	movw	r3, #2359	; 0x937
    5c08:	movw	r2, #0
    5c0c:	movt	r2, #0
    5c10:	movw	r1, #0
    5c14:	movt	r1, #0
    5c18:	mvn	r0, #0
    5c1c:	bl	0 <coda_set_error>
    5c20:	ldr	r0, [fp, #-56]	; 0xffffffc8
    5c24:	bl	0 <coda_expression_delete>
    5c28:	ldr	r0, [fp, #-36]	; 0xffffffdc
    5c2c:	bl	0 <free>
    5c30:	ldr	r0, [fp, #-32]	; 0xffffffe0
    5c34:	bl	0 <free>
    5c38:	mvn	r3, #0
    5c3c:	b	5e40 <add_detection_rule_entry_for_path+0x674>
    5c40:	mov	r3, #0
    5c44:	str	r3, [sp, #4]
    5c48:	mov	r3, #0
    5c4c:	str	r3, [sp]
    5c50:	mov	r3, #0
    5c54:	mov	r2, #0
    5c58:	ldr	r1, [fp, #-60]	; 0xffffffc4
    5c5c:	mov	r0, #22
    5c60:	bl	0 <coda_expression_new>
    5c64:	str	r0, [fp, #-64]	; 0xffffffc0
    5c68:	ldr	r3, [fp, #-64]	; 0xffffffc0
    5c6c:	cmp	r3, #0
    5c70:	bne	5c94 <add_detection_rule_entry_for_path+0x4c8>
    5c74:	ldr	r0, [fp, #-56]	; 0xffffffc8
    5c78:	bl	0 <coda_expression_delete>
    5c7c:	ldr	r0, [fp, #-36]	; 0xffffffdc
    5c80:	bl	0 <free>
    5c84:	ldr	r0, [fp, #-32]	; 0xffffffe0
    5c88:	bl	0 <free>
    5c8c:	mvn	r3, #0
    5c90:	b	5e40 <add_detection_rule_entry_for_path+0x674>
    5c94:	mov	r3, #0
    5c98:	str	r3, [sp, #4]
    5c9c:	mov	r3, #0
    5ca0:	str	r3, [sp]
    5ca4:	ldr	r3, [fp, #-64]	; 0xffffffc0
    5ca8:	ldr	r2, [fp, #-56]	; 0xffffffc8
    5cac:	mov	r1, #0
    5cb0:	mov	r0, #25
    5cb4:	bl	0 <coda_expression_new>
    5cb8:	str	r0, [fp, #-68]	; 0xffffffbc
    5cbc:	ldr	r3, [fp, #-68]	; 0xffffffbc
    5cc0:	cmp	r3, #0
    5cc4:	bne	5ce0 <add_detection_rule_entry_for_path+0x514>
    5cc8:	ldr	r0, [fp, #-36]	; 0xffffffdc
    5ccc:	bl	0 <free>
    5cd0:	ldr	r0, [fp, #-32]	; 0xffffffe0
    5cd4:	bl	0 <free>
    5cd8:	mvn	r3, #0
    5cdc:	b	5e40 <add_detection_rule_entry_for_path+0x674>
    5ce0:	ldr	r3, [fp, #-28]	; 0xffffffe4
    5ce4:	movw	r2, #0
    5ce8:	movt	r2, #0
    5cec:	ldr	r1, [r2]
    5cf0:	str	r1, [r3]
    5cf4:	ldrh	r1, [r2, #4]
    5cf8:	strh	r1, [r3, #4]
    5cfc:	ldrb	r2, [r2, #6]
    5d00:	strb	r2, [r3, #6]
    5d04:	ldr	r0, [fp, #-36]	; 0xffffffdc
    5d08:	bl	0 <coda_detection_rule_entry_new>
    5d0c:	str	r0, [fp, #-72]	; 0xffffffb8
    5d10:	ldr	r3, [fp, #-28]	; 0xffffffe4
    5d14:	mov	r2, #0
    5d18:	strb	r2, [r3]
    5d1c:	ldr	r3, [fp, #-72]	; 0xffffffb8
    5d20:	cmp	r3, #0
    5d24:	bne	5d48 <add_detection_rule_entry_for_path+0x57c>
    5d28:	ldr	r0, [fp, #-68]	; 0xffffffbc
    5d2c:	bl	0 <coda_expression_delete>
    5d30:	ldr	r0, [fp, #-36]	; 0xffffffdc
    5d34:	bl	0 <free>
    5d38:	ldr	r0, [fp, #-32]	; 0xffffffe0
    5d3c:	bl	0 <free>
    5d40:	mvn	r3, #0
    5d44:	b	5e40 <add_detection_rule_entry_for_path+0x674>
    5d48:	ldr	r1, [fp, #-68]	; 0xffffffbc
    5d4c:	ldr	r0, [fp, #-72]	; 0xffffffb8
    5d50:	bl	0 <coda_detection_rule_entry_set_expression>
    5d54:	mov	r3, r0
    5d58:	cmp	r3, #0
    5d5c:	beq	5d88 <add_detection_rule_entry_for_path+0x5bc>
    5d60:	ldr	r0, [fp, #-72]	; 0xffffffb8
    5d64:	bl	0 <coda_detection_rule_entry_delete>
    5d68:	ldr	r0, [fp, #-68]	; 0xffffffbc
    5d6c:	bl	0 <coda_expression_delete>
    5d70:	ldr	r0, [fp, #-36]	; 0xffffffdc
    5d74:	bl	0 <free>
    5d78:	ldr	r0, [fp, #-32]	; 0xffffffe0
    5d7c:	bl	0 <free>
    5d80:	mvn	r3, #0
    5d84:	b	5e40 <add_detection_rule_entry_for_path+0x674>
    5d88:	ldr	r1, [fp, #-72]	; 0xffffffb8
    5d8c:	ldr	r0, [fp, #-80]	; 0xffffffb0
    5d90:	bl	0 <coda_detection_rule_add_entry>
    5d94:	mov	r3, r0
    5d98:	cmp	r3, #0
    5d9c:	beq	5dc0 <add_detection_rule_entry_for_path+0x5f4>
    5da0:	ldr	r0, [fp, #-72]	; 0xffffffb8
    5da4:	bl	0 <coda_detection_rule_entry_delete>
    5da8:	ldr	r0, [fp, #-36]	; 0xffffffdc
    5dac:	bl	0 <free>
    5db0:	ldr	r0, [fp, #-32]	; 0xffffffe0
    5db4:	bl	0 <free>
    5db8:	mvn	r3, #0
    5dbc:	b	5e40 <add_detection_rule_entry_for_path+0x674>
    5dc0:	ldr	r3, [fp, #-16]
    5dc4:	cmp	r3, #0
    5dc8:	bne	5e1c <add_detection_rule_entry_for_path+0x650>
    5dcc:	ldr	r3, [fp, #-40]	; 0xffffffd8
    5dd0:	cmp	r3, #0
    5dd4:	beq	5e10 <add_detection_rule_entry_for_path+0x644>
    5dd8:	ldr	r3, [fp, #-80]	; 0xffffffb0
    5ddc:	ldr	r3, [r3, #8]
    5de0:	ldr	r3, [r3, #8]
    5de4:	mov	r2, r3
    5de8:	movw	r1, #0
    5dec:	movt	r1, #0
    5df0:	mvn	r0, #99	; 0x63
    5df4:	bl	0 <coda_set_error>
    5df8:	ldr	r0, [fp, #-36]	; 0xffffffdc
    5dfc:	bl	0 <free>
    5e00:	ldr	r0, [fp, #-32]	; 0xffffffe0
    5e04:	bl	0 <free>
    5e08:	mvn	r3, #0
    5e0c:	b	5e40 <add_detection_rule_entry_for_path+0x674>
    5e10:	ldr	r3, [fp, #-24]	; 0xffffffe8
    5e14:	add	r3, r3, #1
    5e18:	str	r3, [fp, #-24]	; 0xffffffe8
    5e1c:	ldr	r3, [fp, #-16]
    5e20:	cmp	r3, #0
    5e24:	beq	5960 <add_detection_rule_entry_for_path+0x194>
    5e28:	ldr	r0, [fp, #-32]	; 0xffffffe0
    5e2c:	bl	0 <free>
    5e30:	ldr	r3, [fp, #-88]	; 0xffffffa8
    5e34:	ldr	r2, [fp, #-36]	; 0xffffffdc
    5e38:	str	r2, [r3]
    5e3c:	mov	r3, #0
    5e40:	mov	r0, r3
    5e44:	sub	sp, fp, #4
    5e48:	ldr	fp, [sp]
    5e4c:	add	sp, sp, #4
    5e50:	pop	{pc}		; (ldr pc, [sp], #4)

00005e54 <cd_match_data_init>:
    5e54:	str	r4, [sp, #-12]!
    5e58:	str	fp, [sp, #4]
    5e5c:	str	lr, [sp, #8]
    5e60:	add	fp, sp, #8
    5e64:	sub	sp, sp, #36	; 0x24
    5e68:	str	r0, [fp, #-32]	; 0xffffffe0
    5e6c:	str	r1, [fp, #-36]	; 0xffffffdc
    5e70:	ldr	r3, [fp, #-32]	; 0xffffffe0
    5e74:	ldr	r2, [r3]
    5e78:	movw	r3, #0
    5e7c:	movt	r3, #0
    5e80:	str	r3, [r2, #40]	; 0x28
    5e84:	movw	r1, #0
    5e88:	movt	r1, #0
    5e8c:	ldr	r0, [fp, #-36]	; 0xffffffdc
    5e90:	bl	f5c <get_attribute_value>
    5e94:	str	r0, [fp, #-16]
    5e98:	movw	r1, #0
    5e9c:	movt	r1, #0
    5ea0:	ldr	r0, [fp, #-36]	; 0xffffffdc
    5ea4:	bl	f5c <get_attribute_value>
    5ea8:	str	r0, [fp, #-20]	; 0xffffffec
    5eac:	ldr	r3, [fp, #-20]	; 0xffffffec
    5eb0:	cmp	r3, #0
    5eb4:	bne	5eec <cd_match_data_init+0x98>
    5eb8:	ldr	r3, [fp, #-32]	; 0xffffffe0
    5ebc:	ldr	r4, [r3]
    5ec0:	mov	r0, #0
    5ec4:	bl	0 <coda_detection_rule_entry_new>
    5ec8:	mov	r3, r0
    5ecc:	str	r3, [r4, #8]
    5ed0:	ldr	r3, [fp, #-32]	; 0xffffffe0
    5ed4:	ldr	r3, [r3]
    5ed8:	ldr	r3, [r3, #8]
    5edc:	cmp	r3, #0
    5ee0:	bne	5eec <cd_match_data_init+0x98>
    5ee4:	mvn	r3, #0
    5ee8:	b	6094 <cd_match_data_init+0x240>
    5eec:	ldr	r3, [fp, #-16]
    5ef0:	cmp	r3, #0
    5ef4:	beq	5fe8 <cd_match_data_init+0x194>
    5ef8:	ldr	r3, [fp, #-20]	; 0xffffffec
    5efc:	cmp	r3, #0
    5f00:	beq	5f20 <cd_match_data_init+0xcc>
    5f04:	movw	r1, #0
    5f08:	movt	r1, #0
    5f0c:	movw	r0, #65136	; 0xfe70
    5f10:	movt	r0, #65535	; 0xffff
    5f14:	bl	0 <coda_set_error>
    5f18:	mvn	r3, #0
    5f1c:	b	6094 <cd_match_data_init+0x240>
    5f20:	ldr	r0, [fp, #-16]
    5f24:	bl	0 <strdup>
    5f28:	mov	r3, r0
    5f2c:	str	r3, [fp, #-28]	; 0xffffffe4
    5f30:	ldr	r3, [fp, #-28]	; 0xffffffe4
    5f34:	cmp	r3, #0
    5f38:	bne	5f60 <cd_match_data_init+0x10c>
    5f3c:	movw	r3, #2459	; 0x99b
    5f40:	movw	r2, #0
    5f44:	movt	r2, #0
    5f48:	movw	r1, #0
    5f4c:	movt	r1, #0
    5f50:	mvn	r0, #0
    5f54:	bl	0 <coda_set_error>
    5f58:	mvn	r3, #0
    5f5c:	b	6094 <cd_match_data_init+0x240>
    5f60:	ldr	r1, [fp, #-28]	; 0xffffffe4
    5f64:	mov	r3, #0
    5f68:	str	r3, [sp, #4]
    5f6c:	mov	r3, #0
    5f70:	str	r3, [sp]
    5f74:	mov	r3, #0
    5f78:	mov	r2, #0
    5f7c:	mov	r0, #20
    5f80:	bl	0 <coda_expression_new>
    5f84:	str	r0, [fp, #-24]	; 0xffffffe8
    5f88:	ldr	r3, [fp, #-24]	; 0xffffffe8
    5f8c:	cmp	r3, #0
    5f90:	bne	5fb4 <cd_match_data_init+0x160>
    5f94:	ldr	r2, [fp, #-16]
    5f98:	movw	r1, #0
    5f9c:	movt	r1, #0
    5fa0:	movw	r0, #65136	; 0xfe70
    5fa4:	movt	r0, #65535	; 0xffff
    5fa8:	bl	0 <coda_set_error>
    5fac:	mvn	r3, #0
    5fb0:	b	6094 <cd_match_data_init+0x240>
    5fb4:	ldr	r3, [fp, #-32]	; 0xffffffe0
    5fb8:	ldr	r3, [r3]
    5fbc:	ldr	r3, [r3, #8]
    5fc0:	ldr	r1, [fp, #-24]	; 0xffffffe8
    5fc4:	mov	r0, r3
    5fc8:	bl	0 <coda_detection_rule_entry_set_expression>
    5fcc:	mov	r3, r0
    5fd0:	cmp	r3, #0
    5fd4:	beq	606c <cd_match_data_init+0x218>
    5fd8:	ldr	r0, [fp, #-24]	; 0xffffffe8
    5fdc:	bl	0 <coda_expression_delete>
    5fe0:	mvn	r3, #0
    5fe4:	b	6094 <cd_match_data_init+0x240>
    5fe8:	ldr	r3, [fp, #-20]	; 0xffffffec
    5fec:	cmp	r3, #0
    5ff0:	beq	606c <cd_match_data_init+0x218>
    5ff4:	ldr	r3, [fp, #-32]	; 0xffffffe0
    5ff8:	ldr	r3, [r3]
    5ffc:	ldr	r3, [r3, #396]	; 0x18c
    6000:	ldr	r3, [r3, #8]
    6004:	sub	r2, fp, #28
    6008:	ldr	r1, [fp, #-20]	; 0xffffffec
    600c:	mov	r0, r3
    6010:	bl	57cc <add_detection_rule_entry_for_path>
    6014:	mov	r3, r0
    6018:	cmp	r3, #0
    601c:	beq	6028 <cd_match_data_init+0x1d4>
    6020:	mvn	r3, #0
    6024:	b	6094 <cd_match_data_init+0x240>
    6028:	ldr	r2, [fp, #-28]	; 0xffffffe4
    602c:	ldr	r3, [fp, #-32]	; 0xffffffe0
    6030:	ldr	r4, [r3]
    6034:	mov	r0, r2
    6038:	bl	0 <coda_detection_rule_entry_new>
    603c:	mov	r3, r0
    6040:	str	r3, [r4, #8]
    6044:	ldr	r3, [fp, #-28]	; 0xffffffe4
    6048:	mov	r0, r3
    604c:	bl	0 <free>
    6050:	ldr	r3, [fp, #-32]	; 0xffffffe0
    6054:	ldr	r3, [r3]
    6058:	ldr	r3, [r3, #8]
    605c:	cmp	r3, #0
    6060:	bne	606c <cd_match_data_init+0x218>
    6064:	mvn	r3, #0
    6068:	b	6094 <cd_match_data_init+0x240>
    606c:	ldr	r3, [fp, #-32]	; 0xffffffe0
    6070:	ldr	r3, [r3]
    6074:	mov	r2, #1
    6078:	str	r2, [r3, #32]
    607c:	ldr	r3, [fp, #-32]	; 0xffffffe0
    6080:	ldr	r2, [r3]
    6084:	movw	r3, #0
    6088:	movt	r3, #0
    608c:	str	r3, [r2, #36]	; 0x24
    6090:	mov	r3, #0
    6094:	mov	r0, r3
    6098:	sub	sp, fp, #8
    609c:	ldr	r4, [sp]
    60a0:	ldr	fp, [sp, #4]
    60a4:	add	sp, sp, #8
    60a8:	pop	{pc}		; (ldr pc, [sp], #4)

000060ac <cd_match_expression_finalise>:
    60ac:	str	r4, [sp, #-12]!
    60b0:	str	fp, [sp, #4]
    60b4:	str	lr, [sp, #8]
    60b8:	add	fp, sp, #8
    60bc:	sub	sp, sp, #20
    60c0:	str	r0, [fp, #-24]	; 0xffffffe8
    60c4:	ldr	r3, [fp, #-24]	; 0xffffffe8
    60c8:	ldr	r3, [r3]
    60cc:	ldr	r3, [r3, #12]
    60d0:	cmp	r3, #0
    60d4:	beq	6138 <cd_match_expression_finalise+0x8c>
    60d8:	ldr	r3, [fp, #-24]	; 0xffffffe8
    60dc:	ldr	r3, [r3]
    60e0:	ldr	r4, [r3, #12]
    60e4:	ldr	r3, [fp, #-24]	; 0xffffffe8
    60e8:	ldr	r3, [r3]
    60ec:	ldr	r3, [r3, #12]
    60f0:	mov	r0, r3
    60f4:	bl	0 <strlen>
    60f8:	mov	r3, r0
    60fc:	mov	r1, r3
    6100:	mov	r0, r4
    6104:	bl	d4 <is_whitespace>
    6108:	mov	r3, r0
    610c:	cmp	r3, #0
    6110:	beq	6138 <cd_match_expression_finalise+0x8c>
    6114:	ldr	r3, [fp, #-24]	; 0xffffffe8
    6118:	ldr	r3, [r3]
    611c:	ldr	r3, [r3, #12]
    6120:	mov	r0, r3
    6124:	bl	0 <free>
    6128:	ldr	r3, [fp, #-24]	; 0xffffffe8
    612c:	ldr	r3, [r3]
    6130:	mov	r2, #0
    6134:	str	r2, [r3, #12]
    6138:	ldr	r3, [fp, #-24]	; 0xffffffe8
    613c:	ldr	r3, [r3]
    6140:	ldr	r3, [r3, #12]
    6144:	cmp	r3, #0
    6148:	bne	6168 <cd_match_expression_finalise+0xbc>
    614c:	movw	r1, #0
    6150:	movt	r1, #0
    6154:	movw	r0, #65136	; 0xfe70
    6158:	movt	r0, #65535	; 0xffff
    615c:	bl	0 <coda_set_error>
    6160:	mvn	r3, #0
    6164:	b	6224 <cd_match_expression_finalise+0x178>
    6168:	ldr	r3, [fp, #-24]	; 0xffffffe8
    616c:	ldr	r3, [r3]
    6170:	ldr	r3, [r3, #12]
    6174:	sub	r2, fp, #20
    6178:	mov	r1, r2
    617c:	mov	r0, r3
    6180:	bl	0 <coda_expression_from_string>
    6184:	mov	r3, r0
    6188:	cmp	r3, #0
    618c:	beq	6198 <cd_match_expression_finalise+0xec>
    6190:	mvn	r3, #0
    6194:	b	6224 <cd_match_expression_finalise+0x178>
    6198:	ldr	r3, [fp, #-24]	; 0xffffffe8
    619c:	ldr	r3, [r3]
    61a0:	ldr	r3, [r3, #12]
    61a4:	mov	r0, r3
    61a8:	bl	0 <free>
    61ac:	ldr	r3, [fp, #-24]	; 0xffffffe8
    61b0:	ldr	r3, [r3]
    61b4:	mov	r2, #0
    61b8:	str	r2, [r3, #12]
    61bc:	ldr	r3, [fp, #-24]	; 0xffffffe8
    61c0:	ldr	r3, [r3]
    61c4:	ldr	r3, [r3, #8]
    61c8:	ldr	r2, [fp, #-20]	; 0xffffffec
    61cc:	str	r2, [r3, #4]
    61d0:	ldr	r3, [fp, #-20]	; 0xffffffec
    61d4:	sub	r2, fp, #16
    61d8:	mov	r1, r2
    61dc:	mov	r0, r3
    61e0:	bl	0 <coda_expression_get_type>
    61e4:	mov	r3, r0
    61e8:	cmp	r3, #0
    61ec:	beq	61f8 <cd_match_expression_finalise+0x14c>
    61f0:	mvn	r3, #0
    61f4:	b	6224 <cd_match_expression_finalise+0x178>
    61f8:	ldr	r3, [fp, #-16]
    61fc:	cmp	r3, #0
    6200:	beq	6220 <cd_match_expression_finalise+0x174>
    6204:	movw	r1, #0
    6208:	movt	r1, #0
    620c:	movw	r0, #65136	; 0xfe70
    6210:	movt	r0, #65535	; 0xffff
    6214:	bl	0 <coda_set_error>
    6218:	mvn	r3, #0
    621c:	b	6224 <cd_match_expression_finalise+0x178>
    6220:	mov	r3, #0
    6224:	mov	r0, r3
    6228:	sub	sp, fp, #8
    622c:	ldr	r4, [sp]
    6230:	ldr	fp, [sp, #4]
    6234:	add	sp, sp, #8
    6238:	pop	{pc}		; (ldr pc, [sp], #4)

0000623c <cd_match_expression_init>:
    623c:	str	r4, [sp, #-12]!
    6240:	str	fp, [sp, #4]
    6244:	str	lr, [sp, #8]
    6248:	add	fp, sp, #8
    624c:	sub	sp, sp, #20
    6250:	str	r0, [fp, #-24]	; 0xffffffe8
    6254:	str	r1, [fp, #-28]	; 0xffffffe4
    6258:	movw	r1, #0
    625c:	movt	r1, #0
    6260:	ldr	r0, [fp, #-28]	; 0xffffffe4
    6264:	bl	f5c <get_attribute_value>
    6268:	str	r0, [fp, #-16]
    626c:	ldr	r3, [fp, #-24]	; 0xffffffe8
    6270:	ldr	r2, [r3]
    6274:	movw	r3, #0
    6278:	movt	r3, #0
    627c:	str	r3, [r2, #40]	; 0x28
    6280:	ldr	r3, [fp, #-24]	; 0xffffffe8
    6284:	ldr	r4, [r3]
    6288:	ldr	r0, [fp, #-16]
    628c:	bl	0 <coda_detection_rule_entry_new>
    6290:	mov	r3, r0
    6294:	str	r3, [r4, #8]
    6298:	ldr	r3, [fp, #-24]	; 0xffffffe8
    629c:	ldr	r3, [r3]
    62a0:	ldr	r3, [r3, #8]
    62a4:	cmp	r3, #0
    62a8:	bne	62b4 <cd_match_expression_init+0x78>
    62ac:	mvn	r3, #0
    62b0:	b	62dc <cd_match_expression_init+0xa0>
    62b4:	ldr	r3, [fp, #-24]	; 0xffffffe8
    62b8:	ldr	r3, [r3]
    62bc:	mov	r2, #1
    62c0:	str	r2, [r3, #32]
    62c4:	ldr	r3, [fp, #-24]	; 0xffffffe8
    62c8:	ldr	r2, [r3]
    62cc:	movw	r3, #0
    62d0:	movt	r3, #0
    62d4:	str	r3, [r2, #36]	; 0x24
    62d8:	mov	r3, #0
    62dc:	mov	r0, r3
    62e0:	sub	sp, fp, #8
    62e4:	ldr	r4, [sp]
    62e8:	ldr	fp, [sp, #4]
    62ec:	add	sp, sp, #8
    62f0:	pop	{pc}		; (ldr pc, [sp], #4)

000062f4 <cd_match_filename_finalise>:
    62f4:	str	fp, [sp, #-8]!
    62f8:	str	lr, [sp, #4]
    62fc:	add	fp, sp, #4
    6300:	sub	sp, sp, #72	; 0x48
    6304:	str	r0, [fp, #-64]	; 0xffffffc0
    6308:	ldr	r3, [fp, #-64]	; 0xffffffc0
    630c:	ldr	r3, [r3]
    6310:	ldr	r3, [r3, #8]
    6314:	str	r3, [fp, #-8]
    6318:	ldr	r3, [fp, #-64]	; 0xffffffc0
    631c:	ldr	r3, [r3]
    6320:	ldr	r3, [r3, #12]
    6324:	mov	r0, r3
    6328:	bl	638 <escaped_string_length>
    632c:	str	r0, [fp, #-12]
    6330:	ldr	r3, [fp, #-12]
    6334:	cmp	r3, #0
    6338:	bge	6358 <cd_match_filename_finalise+0x64>
    633c:	movw	r1, #0
    6340:	movt	r1, #0
    6344:	movw	r0, #65136	; 0xfe70
    6348:	movt	r0, #65535	; 0xffff
    634c:	bl	0 <coda_set_error>
    6350:	mvn	r3, #0
    6354:	b	658c <cd_match_filename_finalise+0x298>
    6358:	ldr	r3, [fp, #-12]
    635c:	cmp	r3, #0
    6360:	bne	6380 <cd_match_filename_finalise+0x8c>
    6364:	movw	r1, #0
    6368:	movt	r1, #0
    636c:	movw	r0, #65136	; 0xfe70
    6370:	movt	r0, #65535	; 0xffff
    6374:	bl	0 <coda_set_error>
    6378:	mvn	r3, #0
    637c:	b	658c <cd_match_filename_finalise+0x298>
    6380:	mov	r3, #0
    6384:	str	r3, [sp, #4]
    6388:	mov	r3, #0
    638c:	str	r3, [sp]
    6390:	mov	r3, #0
    6394:	mov	r2, #0
    6398:	mov	r1, #0
    639c:	mov	r0, #28
    63a0:	bl	0 <coda_expression_new>
    63a4:	str	r0, [fp, #-16]
    63a8:	ldr	r3, [fp, #-16]
    63ac:	cmp	r3, #0
    63b0:	bne	63bc <cd_match_filename_finalise+0xc8>
    63b4:	mvn	r3, #0
    63b8:	b	658c <cd_match_filename_finalise+0x298>
    63bc:	ldr	r3, [fp, #-12]
    63c0:	mov	r0, r3
    63c4:	asr	r1, r0, #31
    63c8:	sub	r3, fp, #60	; 0x3c
    63cc:	mov	r2, r3
    63d0:	bl	0 <coda_str64>
    63d4:	sub	r3, fp, #60	; 0x3c
    63d8:	mov	r0, r3
    63dc:	bl	0 <strdup>
    63e0:	mov	r3, r0
    63e4:	str	r3, [fp, #-20]	; 0xffffffec
    63e8:	ldr	r3, [fp, #-20]	; 0xffffffec
    63ec:	cmp	r3, #0
    63f0:	bne	6418 <cd_match_filename_finalise+0x124>
    63f4:	movw	r3, #2588	; 0xa1c
    63f8:	movw	r2, #0
    63fc:	movt	r2, #0
    6400:	movw	r1, #0
    6404:	movt	r1, #0
    6408:	mvn	r0, #0
    640c:	bl	0 <coda_set_error>
    6410:	mvn	r3, #0
    6414:	b	658c <cd_match_filename_finalise+0x298>
    6418:	mov	r3, #0
    641c:	str	r3, [sp, #4]
    6420:	mov	r3, #0
    6424:	str	r3, [sp]
    6428:	mov	r3, #0
    642c:	mov	r2, #0
    6430:	ldr	r1, [fp, #-20]	; 0xffffffec
    6434:	mov	r0, #20
    6438:	bl	0 <coda_expression_new>
    643c:	str	r0, [fp, #-24]	; 0xffffffe8
    6440:	ldr	r3, [fp, #-24]	; 0xffffffe8
    6444:	cmp	r3, #0
    6448:	bne	645c <cd_match_filename_finalise+0x168>
    644c:	ldr	r0, [fp, #-16]
    6450:	bl	0 <coda_expression_delete>
    6454:	mvn	r3, #0
    6458:	b	658c <cd_match_filename_finalise+0x298>
    645c:	ldr	r3, [fp, #-8]
    6460:	ldr	r2, [r3, #4]
    6464:	mov	r3, #0
    6468:	str	r3, [sp, #4]
    646c:	ldr	r3, [fp, #-16]
    6470:	str	r3, [sp]
    6474:	ldr	r3, [fp, #-24]	; 0xffffffe8
    6478:	mov	r1, #0
    647c:	mov	r0, #77	; 0x4d
    6480:	bl	0 <coda_expression_new>
    6484:	str	r0, [fp, #-28]	; 0xffffffe4
    6488:	ldr	r3, [fp, #-8]
    648c:	mov	r2, #0
    6490:	str	r2, [r3, #4]
    6494:	ldr	r3, [fp, #-28]	; 0xffffffe4
    6498:	cmp	r3, #0
    649c:	bne	64a8 <cd_match_filename_finalise+0x1b4>
    64a0:	mvn	r3, #0
    64a4:	b	658c <cd_match_filename_finalise+0x298>
    64a8:	ldr	r3, [fp, #-64]	; 0xffffffc0
    64ac:	ldr	r3, [r3]
    64b0:	ldr	r3, [r3, #12]
    64b4:	mov	r0, r3
    64b8:	bl	0 <strdup>
    64bc:	mov	r3, r0
    64c0:	str	r3, [fp, #-20]	; 0xffffffec
    64c4:	ldr	r3, [fp, #-20]	; 0xffffffec
    64c8:	cmp	r3, #0
    64cc:	bne	64fc <cd_match_filename_finalise+0x208>
    64d0:	movw	r3, #2607	; 0xa2f
    64d4:	movw	r2, #0
    64d8:	movt	r2, #0
    64dc:	movw	r1, #0
    64e0:	movt	r1, #0
    64e4:	mvn	r0, #0
    64e8:	bl	0 <coda_set_error>
    64ec:	ldr	r0, [fp, #-28]	; 0xffffffe4
    64f0:	bl	0 <coda_expression_delete>
    64f4:	mvn	r3, #0
    64f8:	b	658c <cd_match_filename_finalise+0x298>
    64fc:	mov	r3, #0
    6500:	str	r3, [sp, #4]
    6504:	mov	r3, #0
    6508:	str	r3, [sp]
    650c:	mov	r3, #0
    6510:	mov	r2, #0
    6514:	ldr	r1, [fp, #-20]	; 0xffffffec
    6518:	mov	r0, #22
    651c:	bl	0 <coda_expression_new>
    6520:	str	r0, [fp, #-32]	; 0xffffffe0
    6524:	ldr	r3, [fp, #-32]	; 0xffffffe0
    6528:	cmp	r3, #0
    652c:	bne	6540 <cd_match_filename_finalise+0x24c>
    6530:	ldr	r0, [fp, #-28]	; 0xffffffe4
    6534:	bl	0 <coda_expression_delete>
    6538:	mvn	r3, #0
    653c:	b	658c <cd_match_filename_finalise+0x298>
    6540:	mov	r3, #0
    6544:	str	r3, [sp, #4]
    6548:	mov	r3, #0
    654c:	str	r3, [sp]
    6550:	ldr	r3, [fp, #-32]	; 0xffffffe0
    6554:	ldr	r2, [fp, #-28]	; 0xffffffe4
    6558:	mov	r1, #0
    655c:	mov	r0, #25
    6560:	bl	0 <coda_expression_new>
    6564:	mov	r2, r0
    6568:	ldr	r3, [fp, #-8]
    656c:	str	r2, [r3, #4]
    6570:	ldr	r3, [fp, #-8]
    6574:	ldr	r3, [r3, #4]
    6578:	cmp	r3, #0
    657c:	bne	6588 <cd_match_filename_finalise+0x294>
    6580:	mvn	r3, #0
    6584:	b	658c <cd_match_filename_finalise+0x298>
    6588:	mov	r3, #0
    658c:	mov	r0, r3
    6590:	sub	sp, fp, #4
    6594:	ldr	fp, [sp]
    6598:	add	sp, sp, #4
    659c:	pop	{pc}		; (ldr pc, [sp], #4)

000065a0 <cd_match_filename_init>:
    65a0:	str	r4, [sp, #-12]!
    65a4:	str	fp, [sp, #4]
    65a8:	str	lr, [sp, #8]
    65ac:	add	fp, sp, #8
    65b0:	sub	sp, sp, #36	; 0x24
    65b4:	str	r0, [fp, #-32]	; 0xffffffe0
    65b8:	str	r1, [fp, #-36]	; 0xffffffdc
    65bc:	ldr	r3, [fp, #-32]	; 0xffffffe0
    65c0:	ldr	r3, [r3]
    65c4:	ldr	r3, [r3]
    65c8:	mov	r2, r3
    65cc:	movw	r1, #0
    65d0:	movt	r1, #0
    65d4:	ldr	r0, [fp, #-36]	; 0xffffffdc
    65d8:	bl	fd8 <get_mandatory_attribute_value>
    65dc:	str	r0, [fp, #-16]
    65e0:	ldr	r3, [fp, #-16]
    65e4:	cmp	r3, #0
    65e8:	bne	65f4 <cd_match_filename_init+0x54>
    65ec:	mvn	r3, #0
    65f0:	b	672c <cd_match_filename_init+0x18c>
    65f4:	ldr	r3, [fp, #-32]	; 0xffffffe0
    65f8:	ldr	r2, [r3]
    65fc:	movw	r3, #0
    6600:	movt	r3, #0
    6604:	str	r3, [r2, #40]	; 0x28
    6608:	ldr	r3, [fp, #-32]	; 0xffffffe0
    660c:	ldr	r4, [r3]
    6610:	mov	r0, #0
    6614:	bl	0 <coda_detection_rule_entry_new>
    6618:	mov	r3, r0
    661c:	str	r3, [r4, #8]
    6620:	ldr	r3, [fp, #-32]	; 0xffffffe0
    6624:	ldr	r3, [r3]
    6628:	ldr	r3, [r3, #8]
    662c:	cmp	r3, #0
    6630:	bne	663c <cd_match_filename_init+0x9c>
    6634:	mvn	r3, #0
    6638:	b	672c <cd_match_filename_init+0x18c>
    663c:	ldr	r0, [fp, #-16]
    6640:	bl	0 <strdup>
    6644:	mov	r3, r0
    6648:	str	r3, [fp, #-20]	; 0xffffffec
    664c:	ldr	r3, [fp, #-20]	; 0xffffffec
    6650:	cmp	r3, #0
    6654:	bne	667c <cd_match_filename_init+0xdc>
    6658:	movw	r3, #2649	; 0xa59
    665c:	movw	r2, #0
    6660:	movt	r2, #0
    6664:	movw	r1, #0
    6668:	movt	r1, #0
    666c:	mvn	r0, #0
    6670:	bl	0 <coda_set_error>
    6674:	mvn	r3, #0
    6678:	b	672c <cd_match_filename_init+0x18c>
    667c:	mov	r3, #0
    6680:	str	r3, [sp, #4]
    6684:	mov	r3, #0
    6688:	str	r3, [sp]
    668c:	mov	r3, #0
    6690:	mov	r2, #0
    6694:	ldr	r1, [fp, #-20]	; 0xffffffec
    6698:	mov	r0, #20
    669c:	bl	0 <coda_expression_new>
    66a0:	str	r0, [fp, #-24]	; 0xffffffe8
    66a4:	ldr	r3, [fp, #-24]	; 0xffffffe8
    66a8:	cmp	r3, #0
    66ac:	bne	66d0 <cd_match_filename_init+0x130>
    66b0:	ldr	r2, [fp, #-16]
    66b4:	movw	r1, #0
    66b8:	movt	r1, #0
    66bc:	movw	r0, #65136	; 0xfe70
    66c0:	movt	r0, #65535	; 0xffff
    66c4:	bl	0 <coda_set_error>
    66c8:	mvn	r3, #0
    66cc:	b	672c <cd_match_filename_init+0x18c>
    66d0:	ldr	r3, [fp, #-32]	; 0xffffffe0
    66d4:	ldr	r3, [r3]
    66d8:	ldr	r3, [r3, #8]
    66dc:	ldr	r1, [fp, #-24]	; 0xffffffe8
    66e0:	mov	r0, r3
    66e4:	bl	0 <coda_detection_rule_entry_set_expression>
    66e8:	mov	r3, r0
    66ec:	cmp	r3, #0
    66f0:	beq	6704 <cd_match_filename_init+0x164>
    66f4:	ldr	r0, [fp, #-24]	; 0xffffffe8
    66f8:	bl	0 <coda_expression_delete>
    66fc:	mvn	r3, #0
    6700:	b	672c <cd_match_filename_init+0x18c>
    6704:	ldr	r3, [fp, #-32]	; 0xffffffe0
    6708:	ldr	r3, [r3]
    670c:	mov	r2, #1
    6710:	str	r2, [r3, #32]
    6714:	ldr	r3, [fp, #-32]	; 0xffffffe0
    6718:	ldr	r2, [r3]
    671c:	movw	r3, #0
    6720:	movt	r3, #0
    6724:	str	r3, [r2, #36]	; 0x24
    6728:	mov	r3, #0
    672c:	mov	r0, r3
    6730:	sub	sp, fp, #8
    6734:	ldr	r4, [sp]
    6738:	ldr	fp, [sp, #4]
    673c:	add	sp, sp, #8
    6740:	pop	{pc}		; (ldr pc, [sp], #4)

00006744 <cd_match_size_init>:
    6744:	str	r4, [sp, #-12]!
    6748:	str	fp, [sp, #4]
    674c:	str	lr, [sp, #8]
    6750:	add	fp, sp, #8
    6754:	sub	sp, sp, #44	; 0x2c
    6758:	str	r0, [fp, #-40]	; 0xffffffd8
    675c:	str	r1, [fp, #-44]	; 0xffffffd4
    6760:	ldr	r3, [fp, #-40]	; 0xffffffd8
    6764:	ldr	r2, [r3]
    6768:	movw	r3, #0
    676c:	movt	r3, #0
    6770:	str	r3, [r2, #40]	; 0x28
    6774:	ldr	r3, [fp, #-40]	; 0xffffffd8
    6778:	ldr	r4, [r3]
    677c:	mov	r0, #0
    6780:	bl	0 <coda_detection_rule_entry_new>
    6784:	mov	r3, r0
    6788:	str	r3, [r4, #8]
    678c:	ldr	r3, [fp, #-40]	; 0xffffffd8
    6790:	ldr	r3, [r3]
    6794:	ldr	r3, [r3, #8]
    6798:	cmp	r3, #0
    679c:	bne	67a8 <cd_match_size_init+0x64>
    67a0:	mvn	r3, #0
    67a4:	b	692c <cd_match_size_init+0x1e8>
    67a8:	ldr	r3, [fp, #-40]	; 0xffffffd8
    67ac:	ldr	r3, [r3]
    67b0:	ldr	r3, [r3]
    67b4:	mov	r2, r3
    67b8:	movw	r1, #0
    67bc:	movt	r1, #0
    67c0:	ldr	r0, [fp, #-44]	; 0xffffffd4
    67c4:	bl	fd8 <get_mandatory_attribute_value>
    67c8:	str	r0, [fp, #-16]
    67cc:	ldr	r3, [fp, #-16]
    67d0:	cmp	r3, #0
    67d4:	bne	67e0 <cd_match_size_init+0x9c>
    67d8:	mvn	r3, #0
    67dc:	b	692c <cd_match_size_init+0x1e8>
    67e0:	ldr	r0, [fp, #-16]
    67e4:	bl	0 <strdup>
    67e8:	mov	r3, r0
    67ec:	str	r3, [fp, #-20]	; 0xffffffec
    67f0:	ldr	r3, [fp, #-20]	; 0xffffffec
    67f4:	cmp	r3, #0
    67f8:	bne	6820 <cd_match_size_init+0xdc>
    67fc:	movw	r3, #2694	; 0xa86
    6800:	movw	r2, #0
    6804:	movt	r2, #0
    6808:	movw	r1, #0
    680c:	movt	r1, #0
    6810:	mvn	r0, #0
    6814:	bl	0 <coda_set_error>
    6818:	mvn	r3, #0
    681c:	b	692c <cd_match_size_init+0x1e8>
    6820:	mov	r3, #0
    6824:	str	r3, [sp, #4]
    6828:	mov	r3, #0
    682c:	str	r3, [sp]
    6830:	mov	r3, #0
    6834:	mov	r2, #0
    6838:	ldr	r1, [fp, #-20]	; 0xffffffec
    683c:	mov	r0, #20
    6840:	bl	0 <coda_expression_new>
    6844:	str	r0, [fp, #-24]	; 0xffffffe8
    6848:	ldr	r3, [fp, #-24]	; 0xffffffe8
    684c:	cmp	r3, #0
    6850:	bne	6874 <cd_match_size_init+0x130>
    6854:	ldr	r2, [fp, #-16]
    6858:	movw	r1, #0
    685c:	movt	r1, #0
    6860:	movw	r0, #65136	; 0xfe70
    6864:	movt	r0, #65535	; 0xffff
    6868:	bl	0 <coda_set_error>
    686c:	mvn	r3, #0
    6870:	b	692c <cd_match_size_init+0x1e8>
    6874:	mov	r3, #0
    6878:	str	r3, [sp, #4]
    687c:	mov	r3, #0
    6880:	str	r3, [sp]
    6884:	mov	r3, #0
    6888:	mov	r2, #0
    688c:	mov	r1, #0
    6890:	mov	r0, #27
    6894:	bl	0 <coda_expression_new>
    6898:	str	r0, [fp, #-28]	; 0xffffffe4
    689c:	ldr	r3, [fp, #-28]	; 0xffffffe4
    68a0:	cmp	r3, #0
    68a4:	bne	68b8 <cd_match_size_init+0x174>
    68a8:	ldr	r0, [fp, #-24]	; 0xffffffe8
    68ac:	bl	0 <coda_expression_delete>
    68b0:	mvn	r3, #0
    68b4:	b	692c <cd_match_size_init+0x1e8>
    68b8:	mov	r3, #0
    68bc:	str	r3, [sp, #4]
    68c0:	mov	r3, #0
    68c4:	str	r3, [sp]
    68c8:	ldr	r3, [fp, #-24]	; 0xffffffe8
    68cc:	ldr	r2, [fp, #-28]	; 0xffffffe4
    68d0:	mov	r1, #0
    68d4:	mov	r0, #25
    68d8:	bl	0 <coda_expression_new>
    68dc:	str	r0, [fp, #-32]	; 0xffffffe0
    68e0:	ldr	r3, [fp, #-32]	; 0xffffffe0
    68e4:	cmp	r3, #0
    68e8:	bne	68f4 <cd_match_size_init+0x1b0>
    68ec:	mvn	r3, #0
    68f0:	b	692c <cd_match_size_init+0x1e8>
    68f4:	ldr	r3, [fp, #-40]	; 0xffffffd8
    68f8:	ldr	r3, [r3]
    68fc:	ldr	r3, [r3, #8]
    6900:	ldr	r1, [fp, #-32]	; 0xffffffe0
    6904:	mov	r0, r3
    6908:	bl	0 <coda_detection_rule_entry_set_expression>
    690c:	mov	r3, r0
    6910:	cmp	r3, #0
    6914:	beq	6928 <cd_match_size_init+0x1e4>
    6918:	ldr	r0, [fp, #-32]	; 0xffffffe0
    691c:	bl	0 <coda_expression_delete>
    6920:	mvn	r3, #0
    6924:	b	692c <cd_match_size_init+0x1e8>
    6928:	mov	r3, #0
    692c:	mov	r0, r3
    6930:	sub	sp, fp, #8
    6934:	ldr	r4, [sp]
    6938:	ldr	fp, [sp, #4]
    693c:	add	sp, sp, #8
    6940:	pop	{pc}		; (ldr pc, [sp], #4)

00006944 <cd_product_class_set_description>:
    6944:	str	fp, [sp, #-8]!
    6948:	str	lr, [sp, #4]
    694c:	add	fp, sp, #4
    6950:	sub	sp, sp, #8
    6954:	str	r0, [fp, #-8]
    6958:	ldr	r3, [fp, #-8]
    695c:	ldr	r3, [r3]
    6960:	ldr	r3, [r3, #12]
    6964:	cmp	r3, #0
    6968:	bne	6994 <cd_product_class_set_description+0x50>
    696c:	ldr	r3, [fp, #-8]
    6970:	ldr	r3, [r3]
    6974:	ldr	r3, [r3, #396]	; 0x18c
    6978:	ldr	r3, [r3, #8]
    697c:	movw	r1, #0
    6980:	movt	r1, #0
    6984:	mov	r0, r3
    6988:	bl	0 <coda_product_class_set_description>
    698c:	mov	r3, r0
    6990:	b	69c0 <cd_product_class_set_description+0x7c>
    6994:	ldr	r3, [fp, #-8]
    6998:	ldr	r3, [r3]
    699c:	ldr	r3, [r3, #396]	; 0x18c
    69a0:	ldr	r2, [r3, #8]
    69a4:	ldr	r3, [fp, #-8]
    69a8:	ldr	r3, [r3]
    69ac:	ldr	r3, [r3, #12]
    69b0:	mov	r1, r3
    69b4:	mov	r0, r2
    69b8:	bl	0 <coda_product_class_set_description>
    69bc:	mov	r3, r0
    69c0:	mov	r0, r3
    69c4:	sub	sp, fp, #4
    69c8:	ldr	fp, [sp]
    69cc:	add	sp, sp, #4
    69d0:	pop	{pc}		; (ldr pc, [sp], #4)

000069d4 <cd_product_class_add_product_type>:
    69d4:	str	fp, [sp, #-8]!
    69d8:	str	lr, [sp, #4]
    69dc:	add	fp, sp, #4
    69e0:	sub	sp, sp, #8
    69e4:	str	r0, [fp, #-8]
    69e8:	ldr	r3, [fp, #-8]
    69ec:	ldr	r3, [r3]
    69f0:	ldr	r3, [r3, #396]	; 0x18c
    69f4:	ldr	r2, [r3, #8]
    69f8:	ldr	r3, [fp, #-8]
    69fc:	ldr	r3, [r3]
    6a00:	ldr	r3, [r3, #8]
    6a04:	mov	r1, r3
    6a08:	mov	r0, r2
    6a0c:	bl	0 <coda_product_class_add_product_type>
    6a10:	mov	r3, r0
    6a14:	cmp	r3, #0
    6a18:	beq	6a24 <cd_product_class_add_product_type+0x50>
    6a1c:	mvn	r3, #0
    6a20:	b	6a38 <cd_product_class_add_product_type+0x64>
    6a24:	ldr	r3, [fp, #-8]
    6a28:	ldr	r3, [r3]
    6a2c:	mov	r2, #0
    6a30:	str	r2, [r3, #8]
    6a34:	mov	r3, #0
    6a38:	mov	r0, r3
    6a3c:	sub	sp, fp, #4
    6a40:	ldr	fp, [sp]
    6a44:	add	sp, sp, #4
    6a48:	pop	{pc}		; (ldr pc, [sp], #4)

00006a4c <cd_product_class_finalise>:
    6a4c:	push	{fp}		; (str fp, [sp, #-4]!)
    6a50:	add	fp, sp, #0
    6a54:	sub	sp, sp, #12
    6a58:	str	r0, [fp, #-8]
    6a5c:	ldr	r3, [fp, #-8]
    6a60:	mov	r2, #0
    6a64:	str	r2, [r3, #24]
    6a68:	mov	r3, #0
    6a6c:	mov	r0, r3
    6a70:	add	sp, fp, #0
    6a74:	pop	{fp}		; (ldr fp, [sp], #4)
    6a78:	bx	lr

00006a7c <get_product_class_revision>:
    6a7c:	str	fp, [sp, #-8]!
    6a80:	str	lr, [sp, #4]
    6a84:	add	fp, sp, #4
    6a88:	sub	sp, sp, #40	; 0x28
    6a8c:	str	r0, [fp, #-32]	; 0xffffffe0
    6a90:	str	r1, [fp, #-36]	; 0xffffffdc
    6a94:	ldr	r3, [fp, #-32]	; 0xffffffe0
    6a98:	ldr	r3, [r3, #16]
    6a9c:	movw	r1, #0
    6aa0:	movt	r1, #0
    6aa4:	mov	r0, r3
    6aa8:	bl	0 <coda_za_get_entry_by_name>
    6aac:	str	r0, [fp, #-8]
    6ab0:	ldr	r3, [fp, #-8]
    6ab4:	cmp	r3, #0
    6ab8:	bne	6ad0 <get_product_class_revision+0x54>
    6abc:	ldr	r3, [fp, #-36]	; 0xffffffdc
    6ac0:	mov	r2, #0
    6ac4:	str	r2, [r3]
    6ac8:	mov	r3, #0
    6acc:	b	6be0 <get_product_class_revision+0x164>
    6ad0:	ldr	r0, [fp, #-8]
    6ad4:	bl	0 <coda_za_get_entry_size>
    6ad8:	str	r0, [fp, #-12]
    6adc:	ldr	r3, [fp, #-12]
    6ae0:	cmp	r3, #0
    6ae4:	bne	6afc <get_product_class_revision+0x80>
    6ae8:	ldr	r3, [fp, #-36]	; 0xffffffdc
    6aec:	mov	r2, #0
    6af0:	str	r2, [r3]
    6af4:	mov	r3, #0
    6af8:	b	6be0 <get_product_class_revision+0x164>
    6afc:	ldr	r3, [fp, #-12]
    6b00:	add	r3, r3, #1
    6b04:	mov	r0, r3
    6b08:	bl	0 <malloc>
    6b0c:	mov	r3, r0
    6b10:	str	r3, [fp, #-16]
    6b14:	ldr	r3, [fp, #-16]
    6b18:	cmp	r3, #0
    6b1c:	bne	6b50 <get_product_class_revision+0xd4>
    6b20:	ldr	r3, [fp, #-12]
    6b24:	add	r2, r3, #1
    6b28:	movw	r3, #2774	; 0xad6
    6b2c:	str	r3, [sp]
    6b30:	movw	r3, #0
    6b34:	movt	r3, #0
    6b38:	movw	r1, #0
    6b3c:	movt	r1, #0
    6b40:	mvn	r0, #0
    6b44:	bl	0 <coda_set_error>
    6b48:	mvn	r3, #0
    6b4c:	b	6be0 <get_product_class_revision+0x164>
    6b50:	ldr	r1, [fp, #-16]
    6b54:	ldr	r0, [fp, #-8]
    6b58:	bl	0 <coda_za_read_entry>
    6b5c:	mov	r3, r0
    6b60:	cmp	r3, #0
    6b64:	beq	6b78 <get_product_class_revision+0xfc>
    6b68:	ldr	r0, [fp, #-16]
    6b6c:	bl	0 <free>
    6b70:	mvn	r3, #0
    6b74:	b	6be0 <get_product_class_revision+0x164>
    6b78:	ldr	r3, [fp, #-12]
    6b7c:	ldr	r2, [fp, #-16]
    6b80:	add	r3, r2, r3
    6b84:	mov	r2, #0
    6b88:	strb	r2, [r3]
    6b8c:	sub	r2, fp, #28
    6b90:	mov	r3, #1
    6b94:	ldr	r1, [fp, #-12]
    6b98:	ldr	r0, [fp, #-16]
    6b9c:	bl	0 <coda_ascii_parse_int64>
    6ba0:	mov	r3, r0
    6ba4:	cmp	r3, #0
    6ba8:	bge	6bc8 <get_product_class_revision+0x14c>
    6bac:	ldr	r0, [fp, #-16]
    6bb0:	bl	0 <free>
    6bb4:	ldr	r3, [fp, #-36]	; 0xffffffdc
    6bb8:	mov	r2, #0
    6bbc:	str	r2, [r3]
    6bc0:	mov	r3, #0
    6bc4:	b	6be0 <get_product_class_revision+0x164>
    6bc8:	ldr	r0, [fp, #-16]
    6bcc:	bl	0 <free>
    6bd0:	ldrd	r2, [fp, #-28]	; 0xffffffe4
    6bd4:	ldr	r3, [fp, #-36]	; 0xffffffdc
    6bd8:	str	r2, [r3]
    6bdc:	mov	r3, #0
    6be0:	mov	r0, r3
    6be4:	sub	sp, fp, #4
    6be8:	ldr	fp, [sp]
    6bec:	add	sp, sp, #4
    6bf0:	pop	{pc}		; (ldr pc, [sp], #4)

00006bf4 <cd_product_class_init>:
    6bf4:	str	r4, [sp, #-12]!
    6bf8:	str	fp, [sp, #4]
    6bfc:	str	lr, [sp, #8]
    6c00:	add	fp, sp, #8
    6c04:	sub	sp, sp, #28
    6c08:	str	r0, [fp, #-32]	; 0xffffffe0
    6c0c:	str	r1, [fp, #-36]	; 0xffffffdc
    6c10:	mov	r3, #0
    6c14:	str	r3, [fp, #-24]	; 0xffffffe8
    6c18:	ldr	r3, [fp, #-32]	; 0xffffffe0
    6c1c:	ldr	r3, [r3]
    6c20:	ldr	r3, [r3]
    6c24:	mov	r2, r3
    6c28:	movw	r1, #0
    6c2c:	movt	r1, #0
    6c30:	ldr	r0, [fp, #-36]	; 0xffffffdc
    6c34:	bl	fd8 <get_mandatory_attribute_value>
    6c38:	str	r0, [fp, #-16]
    6c3c:	ldr	r3, [fp, #-16]
    6c40:	cmp	r3, #0
    6c44:	bne	6c50 <cd_product_class_init+0x5c>
    6c48:	mvn	r3, #0
    6c4c:	b	6e44 <cd_product_class_init+0x250>
    6c50:	sub	r3, fp, #24
    6c54:	mov	r1, r3
    6c58:	ldr	r0, [fp, #-32]	; 0xffffffe0
    6c5c:	bl	6a7c <get_product_class_revision>
    6c60:	mov	r3, r0
    6c64:	cmp	r3, #0
    6c68:	beq	6c74 <cd_product_class_init+0x80>
    6c6c:	mvn	r3, #0
    6c70:	b	6e44 <cd_product_class_init+0x250>
    6c74:	ldr	r0, [fp, #-16]
    6c78:	bl	0 <coda_data_dictionary_has_product_class>
    6c7c:	mov	r3, r0
    6c80:	cmp	r3, #0
    6c84:	beq	6cf8 <cd_product_class_init+0x104>
    6c88:	ldr	r0, [fp, #-16]
    6c8c:	bl	0 <coda_data_dictionary_get_product_class>
    6c90:	str	r0, [fp, #-20]	; 0xffffffec
    6c94:	ldr	r3, [fp, #-20]	; 0xffffffec
    6c98:	cmp	r3, #0
    6c9c:	bne	6ca8 <cd_product_class_init+0xb4>
    6ca0:	mvn	r3, #0
    6ca4:	b	6e44 <cd_product_class_init+0x250>
    6ca8:	ldr	r0, [fp, #-20]	; 0xffffffec
    6cac:	bl	0 <coda_product_class_get_revision>
    6cb0:	mov	r2, r0
    6cb4:	ldr	r3, [fp, #-24]	; 0xffffffe8
    6cb8:	cmp	r2, r3
    6cbc:	blt	6cdc <cd_product_class_init+0xe8>
    6cc0:	ldr	r3, [fp, #-32]	; 0xffffffe0
    6cc4:	mov	r2, #1
    6cc8:	str	r2, [r3, #40]	; 0x28
    6ccc:	ldr	r0, [fp, #-32]	; 0xffffffe0
    6cd0:	bl	14e8 <abort_parser>
    6cd4:	mov	r3, #0
    6cd8:	b	6e44 <cd_product_class_init+0x250>
    6cdc:	ldr	r0, [fp, #-20]	; 0xffffffec
    6ce0:	bl	0 <coda_data_dictionary_remove_product_class>
    6ce4:	mov	r3, r0
    6ce8:	cmp	r3, #0
    6cec:	beq	6cf8 <cd_product_class_init+0x104>
    6cf0:	mvn	r3, #0
    6cf4:	b	6e44 <cd_product_class_init+0x250>
    6cf8:	ldr	r3, [fp, #-32]	; 0xffffffe0
    6cfc:	ldr	r2, [r3]
    6d00:	movw	r3, #0
    6d04:	movt	r3, #0
    6d08:	str	r3, [r2, #40]	; 0x28
    6d0c:	ldr	r0, [fp, #-16]
    6d10:	bl	0 <coda_product_class_new>
    6d14:	mov	r2, r0
    6d18:	ldr	r3, [fp, #-32]	; 0xffffffe0
    6d1c:	str	r2, [r3, #24]
    6d20:	ldr	r3, [fp, #-32]	; 0xffffffe0
    6d24:	ldr	r3, [r3, #24]
    6d28:	cmp	r3, #0
    6d2c:	bne	6d38 <cd_product_class_init+0x144>
    6d30:	mvn	r3, #0
    6d34:	b	6e44 <cd_product_class_init+0x250>
    6d38:	ldr	r3, [fp, #-32]	; 0xffffffe0
    6d3c:	ldr	r4, [r3, #24]
    6d40:	ldr	r3, [fp, #-32]	; 0xffffffe0
    6d44:	ldr	r3, [r3, #16]
    6d48:	mov	r0, r3
    6d4c:	bl	0 <coda_za_get_filename>
    6d50:	mov	r3, r0
    6d54:	mov	r1, r3
    6d58:	mov	r0, r4
    6d5c:	bl	0 <coda_product_class_set_definition_file>
    6d60:	mov	r3, r0
    6d64:	cmp	r3, #0
    6d68:	beq	6d90 <cd_product_class_init+0x19c>
    6d6c:	ldr	r3, [fp, #-32]	; 0xffffffe0
    6d70:	ldr	r3, [r3, #24]
    6d74:	mov	r0, r3
    6d78:	bl	0 <coda_product_class_delete>
    6d7c:	ldr	r3, [fp, #-32]	; 0xffffffe0
    6d80:	mov	r2, #0
    6d84:	str	r2, [r3, #24]
    6d88:	mvn	r3, #0
    6d8c:	b	6e44 <cd_product_class_init+0x250>
    6d90:	ldr	r3, [fp, #-32]	; 0xffffffe0
    6d94:	ldr	r3, [r3, #24]
    6d98:	ldr	r2, [fp, #-24]	; 0xffffffe8
    6d9c:	mov	r1, r2
    6da0:	mov	r0, r3
    6da4:	bl	0 <coda_product_class_set_revision>
    6da8:	mov	r3, r0
    6dac:	cmp	r3, #0
    6db0:	beq	6dd8 <cd_product_class_init+0x1e4>
    6db4:	ldr	r3, [fp, #-32]	; 0xffffffe0
    6db8:	ldr	r3, [r3, #24]
    6dbc:	mov	r0, r3
    6dc0:	bl	0 <coda_product_class_delete>
    6dc4:	ldr	r3, [fp, #-32]	; 0xffffffe0
    6dc8:	mov	r2, #0
    6dcc:	str	r2, [r3, #24]
    6dd0:	mvn	r3, #0
    6dd4:	b	6e44 <cd_product_class_init+0x250>
    6dd8:	ldr	r3, [fp, #-32]	; 0xffffffe0
    6ddc:	ldr	r3, [r3]
    6de0:	ldr	r2, [fp, #-32]	; 0xffffffe0
    6de4:	ldr	r2, [r2, #24]
    6de8:	str	r2, [r3, #8]
    6dec:	ldr	r3, [fp, #-32]	; 0xffffffe0
    6df0:	ldr	r0, [r3]
    6df4:	movw	r3, #0
    6df8:	movt	r3, #0
    6dfc:	movw	r2, #0
    6e00:	movt	r2, #0
    6e04:	mov	r1, #11
    6e08:	bl	1530 <register_sub_element>
    6e0c:	ldr	r3, [fp, #-32]	; 0xffffffe0
    6e10:	ldr	r0, [r3]
    6e14:	movw	r3, #0
    6e18:	movt	r3, #0
    6e1c:	movw	r2, #0
    6e20:	movt	r2, #0
    6e24:	mov	r1, #32
    6e28:	bl	1530 <register_sub_element>
    6e2c:	ldr	r3, [fp, #-32]	; 0xffffffe0
    6e30:	ldr	r2, [r3]
    6e34:	movw	r3, #0
    6e38:	movt	r3, #0
    6e3c:	str	r3, [r2, #36]	; 0x24
    6e40:	mov	r3, #0
    6e44:	mov	r0, r3
    6e48:	sub	sp, fp, #8
    6e4c:	ldr	r4, [sp]
    6e50:	ldr	fp, [sp, #4]
    6e54:	add	sp, sp, #8
    6e58:	pop	{pc}		; (ldr pc, [sp], #4)

00006e5c <cd_product_definition_set_description>:
    6e5c:	str	fp, [sp, #-8]!
    6e60:	str	lr, [sp, #4]
    6e64:	add	fp, sp, #4
    6e68:	sub	sp, sp, #8
    6e6c:	str	r0, [fp, #-8]
    6e70:	ldr	r3, [fp, #-8]
    6e74:	ldr	r3, [r3]
    6e78:	ldr	r3, [r3, #12]
    6e7c:	cmp	r3, #0
    6e80:	bne	6eac <cd_product_definition_set_description+0x50>
    6e84:	ldr	r3, [fp, #-8]
    6e88:	ldr	r3, [r3]
    6e8c:	ldr	r3, [r3, #396]	; 0x18c
    6e90:	ldr	r3, [r3, #8]
    6e94:	movw	r1, #0
    6e98:	movt	r1, #0
    6e9c:	mov	r0, r3
    6ea0:	bl	0 <coda_product_definition_set_description>
    6ea4:	mov	r3, r0
    6ea8:	b	6ed8 <cd_product_definition_set_description+0x7c>
    6eac:	ldr	r3, [fp, #-8]
    6eb0:	ldr	r3, [r3]
    6eb4:	ldr	r3, [r3, #396]	; 0x18c
    6eb8:	ldr	r2, [r3, #8]
    6ebc:	ldr	r3, [fp, #-8]
    6ec0:	ldr	r3, [r3]
    6ec4:	ldr	r3, [r3, #12]
    6ec8:	mov	r1, r3
    6ecc:	mov	r0, r2
    6ed0:	bl	0 <coda_product_definition_set_description>
    6ed4:	mov	r3, r0
    6ed8:	mov	r0, r3
    6edc:	sub	sp, fp, #4
    6ee0:	ldr	fp, [sp]
    6ee4:	add	sp, sp, #4
    6ee8:	pop	{pc}		; (ldr pc, [sp], #4)

00006eec <cd_product_definition_add_detection_rule>:
    6eec:	str	fp, [sp, #-8]!
    6ef0:	str	lr, [sp, #4]
    6ef4:	add	fp, sp, #4
    6ef8:	sub	sp, sp, #8
    6efc:	str	r0, [fp, #-8]
    6f00:	ldr	r3, [fp, #-8]
    6f04:	ldr	r3, [r3]
    6f08:	ldr	r3, [r3, #396]	; 0x18c
    6f0c:	ldr	r2, [r3, #8]
    6f10:	ldr	r3, [fp, #-8]
    6f14:	ldr	r3, [r3]
    6f18:	ldr	r3, [r3, #8]
    6f1c:	mov	r1, r3
    6f20:	mov	r0, r2
    6f24:	bl	0 <coda_product_definition_add_detection_rule>
    6f28:	mov	r3, r0
    6f2c:	cmp	r3, #0
    6f30:	beq	6f3c <cd_product_definition_add_detection_rule+0x50>
    6f34:	mvn	r3, #0
    6f38:	b	6f50 <cd_product_definition_add_detection_rule+0x64>
    6f3c:	ldr	r3, [fp, #-8]
    6f40:	ldr	r3, [r3]
    6f44:	mov	r2, #0
    6f48:	str	r2, [r3, #8]
    6f4c:	mov	r3, #0
    6f50:	mov	r0, r3
    6f54:	sub	sp, fp, #4
    6f58:	ldr	fp, [sp]
    6f5c:	add	sp, sp, #4
    6f60:	pop	{pc}		; (ldr pc, [sp], #4)

00006f64 <cd_product_definition_set_root_type>:
    6f64:	str	fp, [sp, #-8]!
    6f68:	str	lr, [sp, #4]
    6f6c:	add	fp, sp, #4
    6f70:	sub	sp, sp, #8
    6f74:	str	r0, [fp, #-8]
    6f78:	ldr	r3, [fp, #-8]
    6f7c:	ldr	r3, [r3]
    6f80:	ldr	r3, [r3, #396]	; 0x18c
    6f84:	ldr	r2, [r3, #8]
    6f88:	ldr	r3, [fp, #-8]
    6f8c:	ldr	r3, [r3]
    6f90:	ldr	r3, [r3, #8]
    6f94:	mov	r1, r3
    6f98:	mov	r0, r2
    6f9c:	bl	0 <coda_product_definition_set_root_type>
    6fa0:	mov	r3, r0
    6fa4:	cmp	r3, #0
    6fa8:	beq	6fb4 <cd_product_definition_set_root_type+0x50>
    6fac:	mvn	r3, #0
    6fb0:	b	6fb8 <cd_product_definition_set_root_type+0x54>
    6fb4:	mov	r3, #0
    6fb8:	mov	r0, r3
    6fbc:	sub	sp, fp, #4
    6fc0:	ldr	fp, [sp]
    6fc4:	add	sp, sp, #4
    6fc8:	pop	{pc}		; (ldr pc, [sp], #4)

00006fcc <cd_product_definition_add_product_variable>:
    6fcc:	str	fp, [sp, #-8]!
    6fd0:	str	lr, [sp, #4]
    6fd4:	add	fp, sp, #4
    6fd8:	sub	sp, sp, #8
    6fdc:	str	r0, [fp, #-8]
    6fe0:	ldr	r3, [fp, #-8]
    6fe4:	ldr	r3, [r3]
    6fe8:	ldr	r3, [r3, #396]	; 0x18c
    6fec:	ldr	r2, [r3, #8]
    6ff0:	ldr	r3, [fp, #-8]
    6ff4:	ldr	r3, [r3]
    6ff8:	ldr	r3, [r3, #8]
    6ffc:	mov	r1, r3
    7000:	mov	r0, r2
    7004:	bl	0 <coda_product_definition_add_product_variable>
    7008:	mov	r3, r0
    700c:	cmp	r3, #0
    7010:	beq	701c <cd_product_definition_add_product_variable+0x50>
    7014:	mvn	r3, #0
    7018:	b	7030 <cd_product_definition_add_product_variable+0x64>
    701c:	ldr	r3, [fp, #-8]
    7020:	ldr	r3, [r3]
    7024:	mov	r2, #0
    7028:	str	r2, [r3, #8]
    702c:	mov	r3, #0
    7030:	mov	r0, r3
    7034:	sub	sp, fp, #4
    7038:	ldr	fp, [sp]
    703c:	add	sp, sp, #4
    7040:	pop	{pc}		; (ldr pc, [sp], #4)

00007044 <cd_product_definition_finalise>:
    7044:	str	fp, [sp, #-8]!
    7048:	str	lr, [sp, #4]
    704c:	add	fp, sp, #4
    7050:	sub	sp, sp, #8
    7054:	str	r0, [fp, #-8]
    7058:	ldr	r3, [fp, #-8]
    705c:	ldr	r3, [r3]
    7060:	ldr	r3, [r3, #8]
    7064:	mov	r0, r3
    7068:	bl	0 <coda_product_definition_validate>
    706c:	mov	r3, r0
    7070:	mov	r0, r3
    7074:	sub	sp, fp, #4
    7078:	ldr	fp, [sp]
    707c:	add	sp, sp, #4
    7080:	pop	{pc}		; (ldr pc, [sp], #4)

00007084 <cd_product_definition_init>:
    7084:	str	fp, [sp, #-8]!
    7088:	str	lr, [sp, #4]
    708c:	add	fp, sp, #4
    7090:	sub	sp, sp, #32
    7094:	str	r0, [fp, #-24]	; 0xffffffe8
    7098:	str	r1, [fp, #-28]	; 0xffffffe4
    709c:	ldr	r3, [fp, #-24]	; 0xffffffe8
    70a0:	ldr	r3, [r3]
    70a4:	ldr	r3, [r3]
    70a8:	mov	r2, r3
    70ac:	movw	r1, #0
    70b0:	movt	r1, #0
    70b4:	ldr	r0, [fp, #-28]	; 0xffffffe4
    70b8:	bl	fd8 <get_mandatory_attribute_value>
    70bc:	str	r0, [fp, #-8]
    70c0:	ldr	r3, [fp, #-8]
    70c4:	cmp	r3, #0
    70c8:	bne	70d4 <cd_product_definition_init+0x50>
    70cc:	mvn	r3, #0
    70d0:	b	72f0 <cd_product_definition_init+0x26c>
    70d4:	ldr	r3, [fp, #-24]	; 0xffffffe8
    70d8:	ldr	r3, [r3]
    70dc:	ldr	r3, [r3]
    70e0:	mov	r2, r3
    70e4:	movw	r1, #0
    70e8:	movt	r1, #0
    70ec:	ldr	r0, [fp, #-28]	; 0xffffffe4
    70f0:	bl	fd8 <get_mandatory_attribute_value>
    70f4:	str	r0, [fp, #-12]
    70f8:	ldr	r3, [fp, #-12]
    70fc:	cmp	r3, #0
    7100:	bne	710c <cd_product_definition_init+0x88>
    7104:	mvn	r3, #0
    7108:	b	72f0 <cd_product_definition_init+0x26c>
    710c:	ldr	r3, [fp, #-24]	; 0xffffffe8
    7110:	ldr	r3, [r3]
    7114:	add	r3, r3, #44	; 0x2c
    7118:	mov	r1, r3
    711c:	ldr	r0, [fp, #-12]
    7120:	bl	0 <coda_format_from_string>
    7124:	mov	r3, r0
    7128:	cmp	r3, #0
    712c:	beq	7138 <cd_product_definition_init+0xb4>
    7130:	mvn	r3, #0
    7134:	b	72f0 <cd_product_definition_init+0x26c>
    7138:	ldr	r3, [fp, #-24]	; 0xffffffe8
    713c:	ldr	r3, [r3]
    7140:	mov	r2, #1
    7144:	str	r2, [r3, #48]	; 0x30
    7148:	ldr	r3, [fp, #-24]	; 0xffffffe8
    714c:	ldr	r3, [r3]
    7150:	ldr	r3, [r3]
    7154:	mov	r2, r3
    7158:	movw	r1, #0
    715c:	movt	r1, #0
    7160:	ldr	r0, [fp, #-28]	; 0xffffffe4
    7164:	bl	fd8 <get_mandatory_attribute_value>
    7168:	str	r0, [fp, #-16]
    716c:	ldr	r3, [fp, #-16]
    7170:	cmp	r3, #0
    7174:	bne	7180 <cd_product_definition_init+0xfc>
    7178:	mvn	r3, #0
    717c:	b	72f0 <cd_product_definition_init+0x26c>
    7180:	sub	r3, fp, #20
    7184:	mov	r2, r3
    7188:	movw	r1, #0
    718c:	movt	r1, #0
    7190:	ldr	r0, [fp, #-16]
    7194:	bl	0 <__isoc99_sscanf>
    7198:	mov	r3, r0
    719c:	cmp	r3, #1
    71a0:	beq	71c4 <cd_product_definition_init+0x140>
    71a4:	ldr	r2, [fp, #-16]
    71a8:	movw	r1, #0
    71ac:	movt	r1, #0
    71b0:	movw	r0, #65136	; 0xfe70
    71b4:	movt	r0, #65535	; 0xffff
    71b8:	bl	0 <coda_set_error>
    71bc:	mvn	r3, #0
    71c0:	b	72f0 <cd_product_definition_init+0x26c>
    71c4:	ldr	r3, [fp, #-24]	; 0xffffffe8
    71c8:	ldr	r2, [r3]
    71cc:	movw	r3, #0
    71d0:	movt	r3, #0
    71d4:	str	r3, [r2, #40]	; 0x28
    71d8:	ldr	r3, [fp, #-24]	; 0xffffffe8
    71dc:	ldr	r3, [r3]
    71e0:	ldr	r3, [r3, #44]	; 0x2c
    71e4:	ldr	r2, [fp, #-20]	; 0xffffffec
    71e8:	mov	r1, r3
    71ec:	ldr	r0, [fp, #-8]
    71f0:	bl	0 <coda_product_definition_new>
    71f4:	mov	r2, r0
    71f8:	ldr	r3, [fp, #-24]	; 0xffffffe8
    71fc:	str	r2, [r3, #28]
    7200:	ldr	r3, [fp, #-24]	; 0xffffffe8
    7204:	ldr	r3, [r3, #28]
    7208:	cmp	r3, #0
    720c:	bne	7218 <cd_product_definition_init+0x194>
    7210:	mvn	r3, #0
    7214:	b	72f0 <cd_product_definition_init+0x26c>
    7218:	ldr	r3, [pc, #228]	; 7304 <cd_product_definition_init+0x280>
    721c:	ldr	r3, [pc, r3]
    7220:	mrc	15, 0, r2, cr13, cr0, {3}
    7224:	ldr	r3, [r2, r3]
    7228:	cmp	r3, #0
    722c:	beq	7298 <cd_product_definition_init+0x214>
    7230:	ldr	r3, [fp, #-24]	; 0xffffffe8
    7234:	ldr	r0, [r3, #16]
    7238:	ldr	r3, [fp, #-24]	; 0xffffffe8
    723c:	ldr	r2, [r3, #24]
    7240:	ldr	r3, [fp, #-24]	; 0xffffffe8
    7244:	ldr	r3, [r3, #28]
    7248:	str	r3, [sp]
    724c:	mov	r3, r2
    7250:	ldr	r2, [fp, #-8]
    7254:	mov	r1, #2
    7258:	bl	a550 <parse_entry>
    725c:	mov	r3, r0
    7260:	cmp	r3, #0
    7264:	beq	7298 <cd_product_definition_init+0x214>
    7268:	ldr	r3, [fp, #-24]	; 0xffffffe8
    726c:	ldr	r3, [r3, #28]
    7270:	mov	r0, r3
    7274:	bl	0 <coda_product_definition_delete>
    7278:	ldr	r3, [fp, #-24]	; 0xffffffe8
    727c:	mov	r2, #0
    7280:	str	r2, [r3, #28]
    7284:	ldr	r3, [fp, #-24]	; 0xffffffe8
    7288:	mov	r2, #0
    728c:	str	r2, [r3, #44]	; 0x2c
    7290:	mvn	r3, #0
    7294:	b	72f0 <cd_product_definition_init+0x26c>
    7298:	ldr	r3, [fp, #-24]	; 0xffffffe8
    729c:	ldr	r3, [r3]
    72a0:	ldr	r2, [fp, #-24]	; 0xffffffe8
    72a4:	ldr	r2, [r2, #28]
    72a8:	str	r2, [r3, #8]
    72ac:	ldr	r3, [fp, #-24]	; 0xffffffe8
    72b0:	ldr	r0, [r3]
    72b4:	movw	r3, #0
    72b8:	movt	r3, #0
    72bc:	movw	r2, #0
    72c0:	movt	r2, #0
    72c4:	mov	r1, #11
    72c8:	bl	1530 <register_sub_element>
    72cc:	ldr	r3, [fp, #-24]	; 0xffffffe8
    72d0:	ldr	r0, [r3]
    72d4:	movw	r3, #0
    72d8:	movt	r3, #0
    72dc:	movw	r2, #0
    72e0:	movt	r2, #0
    72e4:	mov	r1, #12
    72e8:	bl	1530 <register_sub_element>
    72ec:	mov	r3, #0
    72f0:	mov	r0, r3
    72f4:	sub	sp, fp, #4
    72f8:	ldr	fp, [sp]
    72fc:	add	sp, sp, #4
    7300:	pop	{pc}		; (ldr pc, [sp], #4)
    7304:	.word	0x000000e0

00007308 <cd_product_definition_sub_init>:
    7308:	str	fp, [sp, #-8]!
    730c:	str	lr, [sp, #4]
    7310:	add	fp, sp, #4
    7314:	sub	sp, sp, #16
    7318:	str	r0, [fp, #-16]
    731c:	str	r1, [fp, #-20]	; 0xffffffec
    7320:	ldr	r3, [fp, #-16]
    7324:	ldr	r3, [r3, #28]
    7328:	cmp	r3, #0
    732c:	bne	7350 <cd_product_definition_sub_init+0x48>
    7330:	movw	r3, #0
    7334:	movt	r3, #0
    7338:	movw	r2, #2974	; 0xb9e
    733c:	movw	r1, #0
    7340:	movt	r1, #0
    7344:	movw	r0, #0
    7348:	movt	r0, #0
    734c:	bl	0 <__assert_fail>
    7350:	ldr	r3, [fp, #-16]
    7354:	ldr	r2, [r3]
    7358:	movw	r3, #0
    735c:	movt	r3, #0
    7360:	str	r3, [r2, #40]	; 0x28
    7364:	ldr	r3, [fp, #-16]
    7368:	ldr	r3, [r3]
    736c:	ldr	r2, [fp, #-16]
    7370:	ldr	r2, [r2, #28]
    7374:	str	r2, [r3, #8]
    7378:	ldr	r3, [fp, #-16]
    737c:	ldr	r3, [r3]
    7380:	ldr	r3, [r3]
    7384:	mov	r2, r3
    7388:	movw	r1, #0
    738c:	movt	r1, #0
    7390:	ldr	r0, [fp, #-20]	; 0xffffffec
    7394:	bl	fd8 <get_mandatory_attribute_value>
    7398:	str	r0, [fp, #-8]
    739c:	ldr	r3, [fp, #-8]
    73a0:	cmp	r3, #0
    73a4:	bne	73b0 <cd_product_definition_sub_init+0xa8>
    73a8:	mvn	r3, #0
    73ac:	b	7548 <cd_product_definition_sub_init+0x240>
    73b0:	ldr	r3, [fp, #-16]
    73b4:	ldr	r3, [r3, #28]
    73b8:	ldr	r3, [r3, #8]
    73bc:	ldr	r1, [fp, #-8]
    73c0:	mov	r0, r3
    73c4:	bl	0 <strcmp>
    73c8:	mov	r3, r0
    73cc:	cmp	r3, #0
    73d0:	beq	7400 <cd_product_definition_sub_init+0xf8>
    73d4:	ldr	r3, [fp, #-16]
    73d8:	ldr	r3, [r3, #28]
    73dc:	ldr	r3, [r3, #8]
    73e0:	ldr	r2, [fp, #-8]
    73e4:	movw	r1, #0
    73e8:	movt	r1, #0
    73ec:	movw	r0, #65136	; 0xfe70
    73f0:	movt	r0, #65535	; 0xffff
    73f4:	bl	0 <coda_set_error>
    73f8:	mvn	r3, #0
    73fc:	b	7548 <cd_product_definition_sub_init+0x240>
    7400:	ldr	r3, [fp, #-16]
    7404:	ldr	r3, [r3]
    7408:	ldr	r3, [r3]
    740c:	mov	r2, r3
    7410:	movw	r1, #0
    7414:	movt	r1, #0
    7418:	ldr	r0, [fp, #-20]	; 0xffffffec
    741c:	bl	fd8 <get_mandatory_attribute_value>
    7420:	str	r0, [fp, #-12]
    7424:	ldr	r3, [fp, #-12]
    7428:	cmp	r3, #0
    742c:	bne	7438 <cd_product_definition_sub_init+0x130>
    7430:	mvn	r3, #0
    7434:	b	7548 <cd_product_definition_sub_init+0x240>
    7438:	ldr	r3, [fp, #-16]
    743c:	ldr	r3, [r3]
    7440:	add	r3, r3, #44	; 0x2c
    7444:	mov	r1, r3
    7448:	ldr	r0, [fp, #-12]
    744c:	bl	0 <coda_format_from_string>
    7450:	mov	r3, r0
    7454:	cmp	r3, #0
    7458:	beq	7464 <cd_product_definition_sub_init+0x15c>
    745c:	mvn	r3, #0
    7460:	b	7548 <cd_product_definition_sub_init+0x240>
    7464:	ldr	r3, [fp, #-16]
    7468:	ldr	r3, [r3]
    746c:	mov	r2, #1
    7470:	str	r2, [r3, #48]	; 0x30
    7474:	ldr	r3, [fp, #-16]
    7478:	ldr	r3, [r3, #28]
    747c:	ldr	r2, [r3]
    7480:	ldr	r3, [fp, #-16]
    7484:	ldr	r3, [r3]
    7488:	ldr	r3, [r3, #44]	; 0x2c
    748c:	cmp	r2, r3
    7490:	beq	74c0 <cd_product_definition_sub_init+0x1b8>
    7494:	ldr	r3, [fp, #-16]
    7498:	ldr	r3, [r3, #28]
    749c:	ldr	r3, [r3, #8]
    74a0:	mov	r2, r3
    74a4:	movw	r1, #0
    74a8:	movt	r1, #0
    74ac:	movw	r0, #65136	; 0xfe70
    74b0:	movt	r0, #65535	; 0xffff
    74b4:	bl	0 <coda_set_error>
    74b8:	mvn	r3, #0
    74bc:	b	7548 <cd_product_definition_sub_init+0x240>
    74c0:	ldr	r3, [fp, #-16]
    74c4:	ldr	r3, [r3, #28]
    74c8:	ldr	r3, [r3]
    74cc:	cmp	r3, #2
    74d0:	bne	74f8 <cd_product_definition_sub_init+0x1f0>
    74d4:	ldr	r3, [fp, #-16]
    74d8:	ldr	r0, [r3]
    74dc:	movw	r3, #0
    74e0:	movt	r3, #0
    74e4:	movw	r2, #0
    74e8:	movt	r2, #0
    74ec:	mov	r1, #35	; 0x23
    74f0:	bl	1530 <register_sub_element>
    74f4:	b	7510 <cd_product_definition_sub_init+0x208>
    74f8:	ldr	r3, [fp, #-16]
    74fc:	ldr	r3, [r3]
    7500:	movw	r1, #0
    7504:	movt	r1, #0
    7508:	mov	r0, r3
    750c:	bl	15c0 <register_type_elements>
    7510:	ldr	r3, [fp, #-16]
    7514:	ldr	r0, [r3]
    7518:	movw	r3, #0
    751c:	movt	r3, #0
    7520:	movw	r2, #0
    7524:	movt	r2, #0
    7528:	mov	r1, #33	; 0x21
    752c:	bl	1530 <register_sub_element>
    7530:	ldr	r3, [fp, #-16]
    7534:	ldr	r2, [r3]
    7538:	movw	r3, #0
    753c:	movt	r3, #0
    7540:	str	r3, [r2, #36]	; 0x24
    7544:	mov	r3, #0
    7548:	mov	r0, r3
    754c:	sub	sp, fp, #4
    7550:	ldr	fp, [sp]
    7554:	add	sp, sp, #4
    7558:	pop	{pc}		; (ldr pc, [sp], #4)

0000755c <cd_product_type_set_description>:
    755c:	str	fp, [sp, #-8]!
    7560:	str	lr, [sp, #4]
    7564:	add	fp, sp, #4
    7568:	sub	sp, sp, #8
    756c:	str	r0, [fp, #-8]
    7570:	ldr	r3, [fp, #-8]
    7574:	ldr	r3, [r3]
    7578:	ldr	r3, [r3, #12]
    757c:	cmp	r3, #0
    7580:	bne	75ac <cd_product_type_set_description+0x50>
    7584:	ldr	r3, [fp, #-8]
    7588:	ldr	r3, [r3]
    758c:	ldr	r3, [r3, #396]	; 0x18c
    7590:	ldr	r3, [r3, #8]
    7594:	movw	r1, #0
    7598:	movt	r1, #0
    759c:	mov	r0, r3
    75a0:	bl	0 <coda_product_type_set_description>
    75a4:	mov	r3, r0
    75a8:	b	75d8 <cd_product_type_set_description+0x7c>
    75ac:	ldr	r3, [fp, #-8]
    75b0:	ldr	r3, [r3]
    75b4:	ldr	r3, [r3, #396]	; 0x18c
    75b8:	ldr	r2, [r3, #8]
    75bc:	ldr	r3, [fp, #-8]
    75c0:	ldr	r3, [r3]
    75c4:	ldr	r3, [r3, #12]
    75c8:	mov	r1, r3
    75cc:	mov	r0, r2
    75d0:	bl	0 <coda_product_type_set_description>
    75d4:	mov	r3, r0
    75d8:	mov	r0, r3
    75dc:	sub	sp, fp, #4
    75e0:	ldr	fp, [sp]
    75e4:	add	sp, sp, #4
    75e8:	pop	{pc}		; (ldr pc, [sp], #4)

000075ec <cd_product_type_add_product_definition>:
    75ec:	str	fp, [sp, #-8]!
    75f0:	str	lr, [sp, #4]
    75f4:	add	fp, sp, #4
    75f8:	sub	sp, sp, #8
    75fc:	str	r0, [fp, #-8]
    7600:	ldr	r3, [fp, #-8]
    7604:	ldr	r3, [r3]
    7608:	ldr	r3, [r3, #396]	; 0x18c
    760c:	ldr	r2, [r3, #8]
    7610:	ldr	r3, [fp, #-8]
    7614:	ldr	r3, [r3]
    7618:	ldr	r3, [r3, #8]
    761c:	mov	r1, r3
    7620:	mov	r0, r2
    7624:	bl	0 <coda_product_type_add_product_definition>
    7628:	mov	r3, r0
    762c:	cmp	r3, #0
    7630:	beq	763c <cd_product_type_add_product_definition+0x50>
    7634:	mvn	r3, #0
    7638:	b	7650 <cd_product_type_add_product_definition+0x64>
    763c:	ldr	r3, [fp, #-8]
    7640:	ldr	r3, [r3]
    7644:	mov	r2, #0
    7648:	str	r2, [r3, #8]
    764c:	mov	r3, #0
    7650:	mov	r0, r3
    7654:	sub	sp, fp, #4
    7658:	ldr	fp, [sp]
    765c:	add	sp, sp, #4
    7660:	pop	{pc}		; (ldr pc, [sp], #4)

00007664 <cd_product_type_init>:
    7664:	str	r4, [sp, #-12]!
    7668:	str	fp, [sp, #4]
    766c:	str	lr, [sp, #8]
    7670:	add	fp, sp, #8
    7674:	sub	sp, sp, #20
    7678:	str	r0, [fp, #-24]	; 0xffffffe8
    767c:	str	r1, [fp, #-28]	; 0xffffffe4
    7680:	ldr	r3, [fp, #-24]	; 0xffffffe8
    7684:	ldr	r3, [r3]
    7688:	ldr	r3, [r3]
    768c:	mov	r2, r3
    7690:	movw	r1, #0
    7694:	movt	r1, #0
    7698:	ldr	r0, [fp, #-28]	; 0xffffffe4
    769c:	bl	fd8 <get_mandatory_attribute_value>
    76a0:	str	r0, [fp, #-16]
    76a4:	ldr	r3, [fp, #-16]
    76a8:	cmp	r3, #0
    76ac:	bne	76b8 <cd_product_type_init+0x54>
    76b0:	mvn	r3, #0
    76b4:	b	7744 <cd_product_type_init+0xe0>
    76b8:	ldr	r3, [fp, #-24]	; 0xffffffe8
    76bc:	ldr	r2, [r3]
    76c0:	movw	r3, #0
    76c4:	movt	r3, #0
    76c8:	str	r3, [r2, #40]	; 0x28
    76cc:	ldr	r3, [fp, #-24]	; 0xffffffe8
    76d0:	ldr	r4, [r3]
    76d4:	ldr	r0, [fp, #-16]
    76d8:	bl	0 <coda_product_type_new>
    76dc:	mov	r3, r0
    76e0:	str	r3, [r4, #8]
    76e4:	ldr	r3, [fp, #-24]	; 0xffffffe8
    76e8:	ldr	r3, [r3]
    76ec:	ldr	r3, [r3, #8]
    76f0:	cmp	r3, #0
    76f4:	bne	7700 <cd_product_type_init+0x9c>
    76f8:	mvn	r3, #0
    76fc:	b	7744 <cd_product_type_init+0xe0>
    7700:	ldr	r3, [fp, #-24]	; 0xffffffe8
    7704:	ldr	r0, [r3]
    7708:	movw	r3, #0
    770c:	movt	r3, #0
    7710:	movw	r2, #0
    7714:	movt	r2, #0
    7718:	mov	r1, #11
    771c:	bl	1530 <register_sub_element>
    7720:	ldr	r3, [fp, #-24]	; 0xffffffe8
    7724:	ldr	r0, [r3]
    7728:	movw	r3, #0
    772c:	movt	r3, #0
    7730:	movw	r2, #0
    7734:	movt	r2, #0
    7738:	mov	r1, #31
    773c:	bl	1530 <register_sub_element>
    7740:	mov	r3, #0
    7744:	mov	r0, r3
    7748:	sub	sp, fp, #8
    774c:	ldr	r4, [sp]
    7750:	ldr	fp, [sp, #4]
    7754:	add	sp, sp, #8
    7758:	pop	{pc}		; (ldr pc, [sp], #4)

0000775c <cd_product_variable_set_size_expression>:
    775c:	str	fp, [sp, #-8]!
    7760:	str	lr, [sp, #4]
    7764:	add	fp, sp, #4
    7768:	sub	sp, sp, #8
    776c:	str	r0, [fp, #-8]
    7770:	ldr	r3, [fp, #-8]
    7774:	ldr	r3, [r3]
    7778:	ldr	r3, [r3, #396]	; 0x18c
    777c:	ldr	r2, [r3, #8]
    7780:	ldr	r3, [fp, #-8]
    7784:	ldr	r3, [r3]
    7788:	ldr	r3, [r3, #8]
    778c:	mov	r1, r3
    7790:	mov	r0, r2
    7794:	bl	0 <coda_product_variable_set_size_expression>
    7798:	mov	r3, r0
    779c:	cmp	r3, #0
    77a0:	beq	77ac <cd_product_variable_set_size_expression+0x50>
    77a4:	mvn	r3, #0
    77a8:	b	77c0 <cd_product_variable_set_size_expression+0x64>
    77ac:	ldr	r3, [fp, #-8]
    77b0:	ldr	r3, [r3]
    77b4:	mov	r2, #0
    77b8:	str	r2, [r3, #8]
    77bc:	mov	r3, #0
    77c0:	mov	r0, r3
    77c4:	sub	sp, fp, #4
    77c8:	ldr	fp, [sp]
    77cc:	add	sp, sp, #4
    77d0:	pop	{pc}		; (ldr pc, [sp], #4)

000077d4 <cd_product_variable_set_init_expression>:
    77d4:	str	fp, [sp, #-8]!
    77d8:	str	lr, [sp, #4]
    77dc:	add	fp, sp, #4
    77e0:	sub	sp, sp, #8
    77e4:	str	r0, [fp, #-8]
    77e8:	ldr	r3, [fp, #-8]
    77ec:	ldr	r3, [r3]
    77f0:	ldr	r3, [r3, #396]	; 0x18c
    77f4:	ldr	r2, [r3, #8]
    77f8:	ldr	r3, [fp, #-8]
    77fc:	ldr	r3, [r3]
    7800:	ldr	r3, [r3, #8]
    7804:	mov	r1, r3
    7808:	mov	r0, r2
    780c:	bl	0 <coda_product_variable_set_init_expression>
    7810:	mov	r3, r0
    7814:	cmp	r3, #0
    7818:	beq	7824 <cd_product_variable_set_init_expression+0x50>
    781c:	mvn	r3, #0
    7820:	b	7838 <cd_product_variable_set_init_expression+0x64>
    7824:	ldr	r3, [fp, #-8]
    7828:	ldr	r3, [r3]
    782c:	mov	r2, #0
    7830:	str	r2, [r3, #8]
    7834:	mov	r3, #0
    7838:	mov	r0, r3
    783c:	sub	sp, fp, #4
    7840:	ldr	fp, [sp]
    7844:	add	sp, sp, #4
    7848:	pop	{pc}		; (ldr pc, [sp], #4)

0000784c <cd_product_variable_finalise>:
    784c:	str	fp, [sp, #-8]!
    7850:	str	lr, [sp, #4]
    7854:	add	fp, sp, #4
    7858:	sub	sp, sp, #8
    785c:	str	r0, [fp, #-8]
    7860:	ldr	r3, [fp, #-8]
    7864:	ldr	r3, [r3]
    7868:	ldr	r3, [r3, #8]
    786c:	mov	r0, r3
    7870:	bl	0 <coda_product_variable_validate>
    7874:	mov	r3, r0
    7878:	mov	r0, r3
    787c:	sub	sp, fp, #4
    7880:	ldr	fp, [sp]
    7884:	add	sp, sp, #4
    7888:	pop	{pc}		; (ldr pc, [sp], #4)

0000788c <cd_product_variable_init>:
    788c:	str	r4, [sp, #-12]!
    7890:	str	fp, [sp, #4]
    7894:	str	lr, [sp, #8]
    7898:	add	fp, sp, #8
    789c:	sub	sp, sp, #20
    78a0:	str	r0, [fp, #-24]	; 0xffffffe8
    78a4:	str	r1, [fp, #-28]	; 0xffffffe4
    78a8:	ldr	r3, [fp, #-24]	; 0xffffffe8
    78ac:	ldr	r3, [r3]
    78b0:	ldr	r3, [r3]
    78b4:	mov	r2, r3
    78b8:	movw	r1, #0
    78bc:	movt	r1, #0
    78c0:	ldr	r0, [fp, #-28]	; 0xffffffe4
    78c4:	bl	fd8 <get_mandatory_attribute_value>
    78c8:	str	r0, [fp, #-16]
    78cc:	ldr	r3, [fp, #-16]
    78d0:	cmp	r3, #0
    78d4:	bne	78e0 <cd_product_variable_init+0x54>
    78d8:	mvn	r3, #0
    78dc:	b	7980 <cd_product_variable_init+0xf4>
    78e0:	ldr	r3, [fp, #-24]	; 0xffffffe8
    78e4:	ldr	r2, [r3]
    78e8:	movw	r3, #0
    78ec:	movt	r3, #0
    78f0:	str	r3, [r2, #40]	; 0x28
    78f4:	ldr	r3, [fp, #-24]	; 0xffffffe8
    78f8:	ldr	r4, [r3]
    78fc:	ldr	r0, [fp, #-16]
    7900:	bl	0 <coda_product_variable_new>
    7904:	mov	r3, r0
    7908:	str	r3, [r4, #8]
    790c:	ldr	r3, [fp, #-24]	; 0xffffffe8
    7910:	ldr	r3, [r3]
    7914:	ldr	r3, [r3, #8]
    7918:	cmp	r3, #0
    791c:	bne	7928 <cd_product_variable_init+0x9c>
    7920:	mvn	r3, #0
    7924:	b	7980 <cd_product_variable_init+0xf4>
    7928:	ldr	r3, [fp, #-24]	; 0xffffffe8
    792c:	ldr	r0, [r3]
    7930:	movw	r3, #0
    7934:	movt	r3, #0
    7938:	movw	r2, #0
    793c:	movt	r2, #0
    7940:	mov	r1, #13
    7944:	bl	1530 <register_sub_element>
    7948:	ldr	r3, [fp, #-24]	; 0xffffffe8
    794c:	ldr	r0, [r3]
    7950:	movw	r3, #0
    7954:	movt	r3, #0
    7958:	movw	r2, #0
    795c:	movt	r2, #0
    7960:	mov	r1, #19
    7964:	bl	1530 <register_sub_element>
    7968:	ldr	r3, [fp, #-24]	; 0xffffffe8
    796c:	ldr	r2, [r3]
    7970:	movw	r3, #0
    7974:	movt	r3, #0
    7978:	str	r3, [r2, #36]	; 0x24
    797c:	mov	r3, #0
    7980:	mov	r0, r3
    7984:	sub	sp, fp, #8
    7988:	ldr	r4, [sp]
    798c:	ldr	fp, [sp, #4]
    7990:	add	sp, sp, #8
    7994:	pop	{pc}		; (ldr pc, [sp], #4)

00007998 <cd_raw_set_fixed_value>:
    7998:	str	fp, [sp, #-8]!
    799c:	str	lr, [sp, #4]
    79a0:	add	fp, sp, #4
    79a4:	sub	sp, sp, #16
    79a8:	str	r0, [fp, #-16]
    79ac:	ldr	r3, [fp, #-16]
    79b0:	ldr	r3, [r3]
    79b4:	ldr	r3, [r3, #12]
    79b8:	mov	r0, r3
    79bc:	bl	844 <decode_escaped_string>
    79c0:	str	r0, [fp, #-8]
    79c4:	ldr	r3, [fp, #-8]
    79c8:	cmp	r3, #0
    79cc:	bge	79ec <cd_raw_set_fixed_value+0x54>
    79d0:	movw	r1, #0
    79d4:	movt	r1, #0
    79d8:	movw	r0, #65136	; 0xfe70
    79dc:	movt	r0, #65535	; 0xffff
    79e0:	bl	0 <coda_set_error>
    79e4:	mvn	r3, #0
    79e8:	b	7a38 <cd_raw_set_fixed_value+0xa0>
    79ec:	ldr	r3, [fp, #-8]
    79f0:	cmp	r3, #0
    79f4:	ble	7a34 <cd_raw_set_fixed_value+0x9c>
    79f8:	ldr	r3, [fp, #-16]
    79fc:	ldr	r3, [r3]
    7a00:	ldr	r3, [r3, #396]	; 0x18c
    7a04:	ldr	r0, [r3, #8]
    7a08:	ldr	r3, [fp, #-16]
    7a0c:	ldr	r3, [r3]
    7a10:	ldr	r3, [r3, #12]
    7a14:	mov	r2, r3
    7a18:	ldr	r1, [fp, #-8]
    7a1c:	bl	0 <coda_type_raw_set_fixed_value>
    7a20:	mov	r3, r0
    7a24:	cmp	r3, #0
    7a28:	beq	7a34 <cd_raw_set_fixed_value+0x9c>
    7a2c:	mvn	r3, #0
    7a30:	b	7a38 <cd_raw_set_fixed_value+0xa0>
    7a34:	mov	r3, #0
    7a38:	mov	r0, r3
    7a3c:	sub	sp, fp, #4
    7a40:	ldr	fp, [sp]
    7a44:	add	sp, sp, #4
    7a48:	pop	{pc}		; (ldr pc, [sp], #4)

00007a4c <cd_raw_finalise>:
    7a4c:	str	fp, [sp, #-8]!
    7a50:	str	lr, [sp, #4]
    7a54:	add	fp, sp, #4
    7a58:	sub	sp, sp, #8
    7a5c:	str	r0, [fp, #-8]
    7a60:	ldr	r3, [fp, #-8]
    7a64:	ldr	r3, [r3]
    7a68:	ldr	r3, [r3, #8]
    7a6c:	mov	r0, r3
    7a70:	bl	0 <coda_type_raw_validate>
    7a74:	mov	r3, r0
    7a78:	mov	r0, r3
    7a7c:	sub	sp, fp, #4
    7a80:	ldr	fp, [sp]
    7a84:	add	sp, sp, #4
    7a88:	pop	{pc}		; (ldr pc, [sp], #4)

00007a8c <cd_raw_init>:
    7a8c:	str	r4, [sp, #-12]!
    7a90:	str	fp, [sp, #4]
    7a94:	str	lr, [sp, #8]
    7a98:	add	fp, sp, #8
    7a9c:	sub	sp, sp, #12
    7aa0:	str	r0, [fp, #-16]
    7aa4:	str	r1, [fp, #-20]	; 0xffffffec
    7aa8:	ldr	r1, [fp, #-20]	; 0xffffffec
    7aac:	ldr	r0, [fp, #-16]
    7ab0:	bl	117c <handle_format_attribute_for_type>
    7ab4:	mov	r3, r0
    7ab8:	cmp	r3, #0
    7abc:	beq	7ac8 <cd_raw_init+0x3c>
    7ac0:	mvn	r3, #0
    7ac4:	b	7bb4 <cd_raw_init+0x128>
    7ac8:	ldr	r3, [fp, #-16]
    7acc:	ldr	r2, [r3]
    7ad0:	movw	r3, #0
    7ad4:	movt	r3, #0
    7ad8:	str	r3, [r2, #40]	; 0x28
    7adc:	ldr	r3, [fp, #-16]
    7ae0:	ldr	r3, [r3]
    7ae4:	ldr	r2, [r3, #44]	; 0x2c
    7ae8:	ldr	r3, [fp, #-16]
    7aec:	ldr	r4, [r3]
    7af0:	mov	r0, r2
    7af4:	bl	0 <coda_type_raw_new>
    7af8:	mov	r3, r0
    7afc:	str	r3, [r4, #8]
    7b00:	ldr	r3, [fp, #-16]
    7b04:	ldr	r3, [r3]
    7b08:	ldr	r3, [r3, #8]
    7b0c:	cmp	r3, #0
    7b10:	bne	7b1c <cd_raw_init+0x90>
    7b14:	mvn	r3, #0
    7b18:	b	7bb4 <cd_raw_init+0x128>
    7b1c:	ldr	r1, [fp, #-20]	; 0xffffffec
    7b20:	ldr	r0, [fp, #-16]
    7b24:	bl	104c <handle_name_attribute_for_type>
    7b28:	mov	r3, r0
    7b2c:	cmp	r3, #0
    7b30:	beq	7b3c <cd_raw_init+0xb0>
    7b34:	mvn	r3, #0
    7b38:	b	7bb4 <cd_raw_init+0x128>
    7b3c:	ldr	r3, [fp, #-16]
    7b40:	ldr	r0, [r3]
    7b44:	movw	r3, #0
    7b48:	movt	r3, #0
    7b4c:	movw	r2, #0
    7b50:	movt	r2, #0
    7b54:	mov	r1, #11
    7b58:	bl	1530 <register_sub_element>
    7b5c:	ldr	r3, [fp, #-16]
    7b60:	ldr	r0, [r3]
    7b64:	movw	r3, #0
    7b68:	movt	r3, #0
    7b6c:	movw	r2, #0
    7b70:	movt	r2, #0
    7b74:	mov	r1, #7
    7b78:	bl	1530 <register_sub_element>
    7b7c:	ldr	r3, [fp, #-16]
    7b80:	ldr	r0, [r3]
    7b84:	movw	r3, #0
    7b88:	movt	r3, #0
    7b8c:	movw	r2, #0
    7b90:	movt	r2, #0
    7b94:	mov	r1, #16
    7b98:	bl	1530 <register_sub_element>
    7b9c:	ldr	r3, [fp, #-16]
    7ba0:	ldr	r2, [r3]
    7ba4:	movw	r3, #0
    7ba8:	movt	r3, #0
    7bac:	str	r3, [r2, #36]	; 0x24
    7bb0:	mov	r3, #0
    7bb4:	mov	r0, r3
    7bb8:	sub	sp, fp, #8
    7bbc:	ldr	r4, [sp]
    7bc0:	ldr	fp, [sp, #4]
    7bc4:	add	sp, sp, #8
    7bc8:	pop	{pc}		; (ldr pc, [sp], #4)

00007bcc <cd_record_add_field>:
    7bcc:	str	fp, [sp, #-8]!
    7bd0:	str	lr, [sp, #4]
    7bd4:	add	fp, sp, #4
    7bd8:	sub	sp, sp, #8
    7bdc:	str	r0, [fp, #-8]
    7be0:	ldr	r3, [fp, #-8]
    7be4:	ldr	r3, [r3]
    7be8:	ldr	r3, [r3, #396]	; 0x18c
    7bec:	ldr	r2, [r3, #8]
    7bf0:	ldr	r3, [fp, #-8]
    7bf4:	ldr	r3, [r3]
    7bf8:	ldr	r3, [r3, #8]
    7bfc:	mov	r1, r3
    7c00:	mov	r0, r2
    7c04:	bl	0 <coda_type_record_add_field>
    7c08:	mov	r3, r0
    7c0c:	cmp	r3, #0
    7c10:	beq	7c1c <cd_record_add_field+0x50>
    7c14:	mvn	r3, #0
    7c18:	b	7c30 <cd_record_add_field+0x64>
    7c1c:	ldr	r3, [fp, #-8]
    7c20:	ldr	r3, [r3]
    7c24:	mov	r2, #0
    7c28:	str	r2, [r3, #8]
    7c2c:	mov	r3, #0
    7c30:	mov	r0, r3
    7c34:	sub	sp, fp, #4
    7c38:	ldr	fp, [sp]
    7c3c:	add	sp, sp, #4
    7c40:	pop	{pc}		; (ldr pc, [sp], #4)

00007c44 <cd_record_finalise>:
    7c44:	str	fp, [sp, #-8]!
    7c48:	str	lr, [sp, #4]
    7c4c:	add	fp, sp, #4
    7c50:	sub	sp, sp, #8
    7c54:	str	r0, [fp, #-8]
    7c58:	ldr	r3, [fp, #-8]
    7c5c:	ldr	r3, [r3]
    7c60:	ldr	r3, [r3, #8]
    7c64:	mov	r0, r3
    7c68:	bl	0 <coda_type_record_validate>
    7c6c:	mov	r3, r0
    7c70:	mov	r0, r3
    7c74:	sub	sp, fp, #4
    7c78:	ldr	fp, [sp]
    7c7c:	add	sp, sp, #4
    7c80:	pop	{pc}		; (ldr pc, [sp], #4)

00007c84 <cd_record_init>:
    7c84:	str	r4, [sp, #-12]!
    7c88:	str	fp, [sp, #4]
    7c8c:	str	lr, [sp, #8]
    7c90:	add	fp, sp, #8
    7c94:	sub	sp, sp, #12
    7c98:	str	r0, [fp, #-16]
    7c9c:	str	r1, [fp, #-20]	; 0xffffffec
    7ca0:	ldr	r1, [fp, #-20]	; 0xffffffec
    7ca4:	ldr	r0, [fp, #-16]
    7ca8:	bl	117c <handle_format_attribute_for_type>
    7cac:	mov	r3, r0
    7cb0:	cmp	r3, #0
    7cb4:	beq	7cc0 <cd_record_init+0x3c>
    7cb8:	mvn	r3, #0
    7cbc:	b	7dec <cd_record_init+0x168>
    7cc0:	ldr	r3, [fp, #-16]
    7cc4:	ldr	r2, [r3]
    7cc8:	movw	r3, #0
    7ccc:	movt	r3, #0
    7cd0:	str	r3, [r2, #40]	; 0x28
    7cd4:	ldr	r3, [fp, #-16]
    7cd8:	ldr	r3, [r3]
    7cdc:	ldr	r2, [r3, #44]	; 0x2c
    7ce0:	ldr	r3, [fp, #-16]
    7ce4:	ldr	r4, [r3]
    7ce8:	mov	r0, r2
    7cec:	bl	0 <coda_type_record_new>
    7cf0:	mov	r3, r0
    7cf4:	str	r3, [r4, #8]
    7cf8:	ldr	r3, [fp, #-16]
    7cfc:	ldr	r3, [r3]
    7d00:	ldr	r3, [r3, #8]
    7d04:	cmp	r3, #0
    7d08:	bne	7d14 <cd_record_init+0x90>
    7d0c:	mvn	r3, #0
    7d10:	b	7dec <cd_record_init+0x168>
    7d14:	ldr	r1, [fp, #-20]	; 0xffffffec
    7d18:	ldr	r0, [fp, #-16]
    7d1c:	bl	104c <handle_name_attribute_for_type>
    7d20:	mov	r3, r0
    7d24:	cmp	r3, #0
    7d28:	beq	7d34 <cd_record_init+0xb0>
    7d2c:	mvn	r3, #0
    7d30:	b	7dec <cd_record_init+0x168>
    7d34:	ldr	r3, [fp, #-16]
    7d38:	ldr	r0, [r3]
    7d3c:	movw	r3, #0
    7d40:	movt	r3, #0
    7d44:	movw	r2, #0
    7d48:	movt	r2, #0
    7d4c:	mov	r1, #11
    7d50:	bl	1530 <register_sub_element>
    7d54:	ldr	r3, [fp, #-16]
    7d58:	ldr	r0, [r3]
    7d5c:	movw	r3, #0
    7d60:	movt	r3, #0
    7d64:	movw	r2, #0
    7d68:	movt	r2, #0
    7d6c:	mov	r1, #7
    7d70:	bl	1530 <register_sub_element>
    7d74:	ldr	r3, [fp, #-16]
    7d78:	ldr	r0, [r3]
    7d7c:	movw	r3, #0
    7d80:	movt	r3, #0
    7d84:	movw	r2, #0
    7d88:	movt	r2, #0
    7d8c:	mov	r1, #14
    7d90:	bl	1530 <register_sub_element>
    7d94:	ldr	r3, [fp, #-16]
    7d98:	ldr	r0, [r3]
    7d9c:	movw	r3, #0
    7da0:	movt	r3, #0
    7da4:	movw	r2, #0
    7da8:	movt	r2, #0
    7dac:	mov	r1, #4
    7db0:	bl	1530 <register_sub_element>
    7db4:	ldr	r3, [fp, #-16]
    7db8:	ldr	r2, [r3]
    7dbc:	movw	r3, #0
    7dc0:	movt	r3, #0
    7dc4:	str	r3, [r2, #36]	; 0x24
    7dc8:	ldr	r1, [fp, #-20]	; 0xffffffec
    7dcc:	ldr	r0, [fp, #-16]
    7dd0:	bl	12a4 <handle_xml_name>
    7dd4:	mov	r3, r0
    7dd8:	cmp	r3, #0
    7ddc:	beq	7de8 <cd_record_init+0x164>
    7de0:	mvn	r3, #0
    7de4:	b	7dec <cd_record_init+0x168>
    7de8:	mov	r3, #0
    7dec:	mov	r0, r3
    7df0:	sub	sp, fp, #8
    7df4:	ldr	r4, [sp]
    7df8:	ldr	fp, [sp, #4]
    7dfc:	add	sp, sp, #8
    7e00:	pop	{pc}		; (ldr pc, [sp], #4)

00007e04 <cd_scale_factor_set_type>:
    7e04:	push	{fp}		; (str fp, [sp, #-4]!)
    7e08:	add	fp, sp, #0
    7e0c:	sub	sp, sp, #12
    7e10:	str	r0, [fp, #-8]
    7e14:	ldr	r3, [fp, #-8]
    7e18:	ldr	r2, [r3]
    7e1c:	ldr	r3, [fp, #-8]
    7e20:	ldr	r3, [r3]
    7e24:	ldr	r3, [r3, #396]	; 0x18c
    7e28:	ldr	r2, [r2, #8]
    7e2c:	str	r2, [r3, #8]
    7e30:	ldr	r3, [fp, #-8]
    7e34:	ldr	r3, [r3]
    7e38:	mov	r2, #0
    7e3c:	str	r2, [r3, #8]
    7e40:	mov	r3, #0
    7e44:	mov	r0, r3
    7e48:	add	sp, fp, #0
    7e4c:	pop	{fp}		; (ldr fp, [sp], #4)
    7e50:	bx	lr

00007e54 <cd_scale_factor_finalise>:
    7e54:	str	fp, [sp, #-8]!
    7e58:	str	lr, [sp, #4]
    7e5c:	add	fp, sp, #4
    7e60:	sub	sp, sp, #8
    7e64:	str	r0, [fp, #-8]
    7e68:	ldr	r3, [fp, #-8]
    7e6c:	ldr	r3, [r3]
    7e70:	ldr	r3, [r3, #8]
    7e74:	cmp	r3, #0
    7e78:	bne	7e98 <cd_scale_factor_finalise+0x44>
    7e7c:	movw	r1, #0
    7e80:	movt	r1, #0
    7e84:	movw	r0, #65136	; 0xfe70
    7e88:	movt	r0, #65535	; 0xffff
    7e8c:	bl	0 <coda_set_error>
    7e90:	mvn	r3, #0
    7e94:	b	7e9c <cd_scale_factor_finalise+0x48>
    7e98:	mov	r3, #0
    7e9c:	mov	r0, r3
    7ea0:	sub	sp, fp, #4
    7ea4:	ldr	fp, [sp]
    7ea8:	add	sp, sp, #4
    7eac:	pop	{pc}		; (ldr pc, [sp], #4)

00007eb0 <cd_scale_factor_init>:
    7eb0:	str	fp, [sp, #-8]!
    7eb4:	str	lr, [sp, #4]
    7eb8:	add	fp, sp, #4
    7ebc:	sub	sp, sp, #8
    7ec0:	str	r0, [fp, #-8]
    7ec4:	str	r1, [fp, #-12]
    7ec8:	movw	r1, #0
    7ecc:	movt	r1, #0
    7ed0:	ldr	r0, [fp, #-12]
    7ed4:	bl	f5c <get_attribute_value>
    7ed8:	mov	r3, r0
    7edc:	cmp	r3, #0
    7ee0:	beq	7f00 <cd_scale_factor_init+0x50>
    7ee4:	movw	r1, #0
    7ee8:	movt	r1, #0
    7eec:	movw	r0, #65136	; 0xfe70
    7ef0:	movt	r0, #65535	; 0xffff
    7ef4:	bl	0 <coda_set_error>
    7ef8:	mvn	r3, #0
    7efc:	b	8038 <cd_scale_factor_init+0x188>
    7f00:	ldr	r3, [fp, #-8]
    7f04:	ldr	r3, [r3]
    7f08:	ldr	r3, [r3, #396]	; 0x18c
    7f0c:	ldr	r3, [r3, #48]	; 0x30
    7f10:	cmp	r3, #0
    7f14:	bne	7f38 <cd_scale_factor_init+0x88>
    7f18:	movw	r3, #0
    7f1c:	movt	r3, #0
    7f20:	movw	r2, #3242	; 0xcaa
    7f24:	movw	r1, #0
    7f28:	movt	r1, #0
    7f2c:	movw	r0, #0
    7f30:	movt	r0, #0
    7f34:	bl	0 <__assert_fail>
    7f38:	ldr	r3, [fp, #-8]
    7f3c:	ldr	r3, [r3]
    7f40:	ldr	r2, [r3, #396]	; 0x18c
    7f44:	ldr	r3, [fp, #-8]
    7f48:	ldr	r3, [r3]
    7f4c:	ldr	r2, [r2, #44]	; 0x2c
    7f50:	str	r2, [r3, #44]	; 0x2c
    7f54:	ldr	r3, [fp, #-8]
    7f58:	ldr	r3, [r3]
    7f5c:	mov	r2, #1
    7f60:	str	r2, [r3, #48]	; 0x30
    7f64:	movw	r1, #0
    7f68:	movt	r1, #0
    7f6c:	ldr	r0, [fp, #-12]
    7f70:	bl	f5c <get_attribute_value>
    7f74:	mov	r3, r0
    7f78:	cmp	r3, #0
    7f7c:	beq	7f9c <cd_scale_factor_init+0xec>
    7f80:	movw	r1, #0
    7f84:	movt	r1, #0
    7f88:	movw	r0, #65136	; 0xfe70
    7f8c:	movt	r0, #65535	; 0xffff
    7f90:	bl	0 <coda_set_error>
    7f94:	mvn	r3, #0
    7f98:	b	8038 <cd_scale_factor_init+0x188>
    7f9c:	movw	r1, #0
    7fa0:	movt	r1, #0
    7fa4:	ldr	r0, [fp, #-12]
    7fa8:	bl	f5c <get_attribute_value>
    7fac:	mov	r3, r0
    7fb0:	cmp	r3, #0
    7fb4:	beq	7fd4 <cd_scale_factor_init+0x124>
    7fb8:	movw	r1, #0
    7fbc:	movt	r1, #0
    7fc0:	movw	r0, #65136	; 0xfe70
    7fc4:	movt	r0, #65535	; 0xffff
    7fc8:	bl	0 <coda_set_error>
    7fcc:	mvn	r3, #0
    7fd0:	b	8038 <cd_scale_factor_init+0x188>
    7fd4:	ldr	r3, [fp, #-8]
    7fd8:	ldr	r2, [r3]
    7fdc:	movw	r3, #0
    7fe0:	movt	r3, #0
    7fe4:	str	r3, [r2, #40]	; 0x28
    7fe8:	ldr	r3, [fp, #-8]
    7fec:	ldr	r3, [r3]
    7ff0:	movw	r1, #0
    7ff4:	movt	r1, #0
    7ff8:	mov	r0, r3
    7ffc:	bl	15c0 <register_type_elements>
    8000:	ldr	r3, [fp, #-8]
    8004:	ldr	r2, [r3]
    8008:	movw	r3, #0
    800c:	movt	r3, #0
    8010:	str	r3, [r2, #36]	; 0x24
    8014:	ldr	r3, [fp, #-8]
    8018:	ldr	r0, [r3]
    801c:	movw	r3, #0
    8020:	movt	r3, #0
    8024:	movw	r2, #0
    8028:	movt	r2, #0
    802c:	mov	r1, #11
    8030:	bl	1530 <register_sub_element>
    8034:	mov	r3, #0
    8038:	mov	r0, r3
    803c:	sub	sp, fp, #4
    8040:	ldr	fp, [sp]
    8044:	add	sp, sp, #4
    8048:	pop	{pc}		; (ldr pc, [sp], #4)

0000804c <cd_text_set_fixed_value>:
    804c:	str	fp, [sp, #-8]!
    8050:	str	lr, [sp, #4]
    8054:	add	fp, sp, #4
    8058:	sub	sp, sp, #8
    805c:	str	r0, [fp, #-8]
    8060:	ldr	r3, [fp, #-8]
    8064:	ldr	r3, [r3]
    8068:	ldr	r3, [r3, #12]
    806c:	mov	r0, r3
    8070:	bl	844 <decode_escaped_string>
    8074:	mov	r3, r0
    8078:	cmp	r3, #0
    807c:	bge	809c <cd_text_set_fixed_value+0x50>
    8080:	movw	r1, #0
    8084:	movt	r1, #0
    8088:	movw	r0, #65136	; 0xfe70
    808c:	movt	r0, #65535	; 0xffff
    8090:	bl	0 <coda_set_error>
    8094:	mvn	r3, #0
    8098:	b	80c8 <cd_text_set_fixed_value+0x7c>
    809c:	ldr	r3, [fp, #-8]
    80a0:	ldr	r3, [r3]
    80a4:	ldr	r3, [r3, #396]	; 0x18c
    80a8:	ldr	r2, [r3, #8]
    80ac:	ldr	r3, [fp, #-8]
    80b0:	ldr	r3, [r3]
    80b4:	ldr	r3, [r3, #12]
    80b8:	mov	r1, r3
    80bc:	mov	r0, r2
    80c0:	bl	0 <coda_type_text_set_fixed_value>
    80c4:	mov	r3, r0
    80c8:	mov	r0, r3
    80cc:	sub	sp, fp, #4
    80d0:	ldr	fp, [sp]
    80d4:	add	sp, sp, #4
    80d8:	pop	{pc}		; (ldr pc, [sp], #4)

000080dc <cd_text_set_read_type>:
    80dc:	str	fp, [sp, #-8]!
    80e0:	str	lr, [sp, #4]
    80e4:	add	fp, sp, #4
    80e8:	sub	sp, sp, #8
    80ec:	str	r0, [fp, #-8]
    80f0:	ldr	r3, [fp, #-8]
    80f4:	ldr	r3, [r3]
    80f8:	ldr	r3, [r3, #396]	; 0x18c
    80fc:	ldr	r0, [r3, #8]
    8100:	ldr	r3, [fp, #-8]
    8104:	ldr	r3, [r3]
    8108:	ldrd	r2, [r3, #16]
    810c:	mov	r3, r2
    8110:	mov	r1, r3
    8114:	bl	0 <coda_type_set_read_type>
    8118:	mov	r3, r0
    811c:	mov	r0, r3
    8120:	sub	sp, fp, #4
    8124:	ldr	fp, [sp]
    8128:	add	sp, sp, #4
    812c:	pop	{pc}		; (ldr pc, [sp], #4)

00008130 <cd_text_finalise>:
    8130:	str	fp, [sp, #-8]!
    8134:	str	lr, [sp, #4]
    8138:	add	fp, sp, #4
    813c:	sub	sp, sp, #8
    8140:	str	r0, [fp, #-8]
    8144:	ldr	r3, [fp, #-8]
    8148:	ldr	r3, [r3]
    814c:	ldr	r3, [r3, #8]
    8150:	mov	r0, r3
    8154:	bl	0 <coda_type_text_validate>
    8158:	mov	r3, r0
    815c:	mov	r0, r3
    8160:	sub	sp, fp, #4
    8164:	ldr	fp, [sp]
    8168:	add	sp, sp, #4
    816c:	pop	{pc}		; (ldr pc, [sp], #4)

00008170 <cd_text_init>:
    8170:	str	r4, [sp, #-12]!
    8174:	str	fp, [sp, #4]
    8178:	str	lr, [sp, #8]
    817c:	add	fp, sp, #8
    8180:	sub	sp, sp, #12
    8184:	str	r0, [fp, #-16]
    8188:	str	r1, [fp, #-20]	; 0xffffffec
    818c:	ldr	r1, [fp, #-20]	; 0xffffffec
    8190:	ldr	r0, [fp, #-16]
    8194:	bl	117c <handle_format_attribute_for_type>
    8198:	mov	r3, r0
    819c:	cmp	r3, #0
    81a0:	beq	81ac <cd_text_init+0x3c>
    81a4:	mvn	r3, #0
    81a8:	b	82f8 <cd_text_init+0x188>
    81ac:	ldr	r3, [fp, #-16]
    81b0:	ldr	r2, [r3]
    81b4:	movw	r3, #0
    81b8:	movt	r3, #0
    81bc:	str	r3, [r2, #40]	; 0x28
    81c0:	ldr	r3, [fp, #-16]
    81c4:	ldr	r3, [r3]
    81c8:	ldr	r2, [r3, #44]	; 0x2c
    81cc:	ldr	r3, [fp, #-16]
    81d0:	ldr	r4, [r3]
    81d4:	mov	r0, r2
    81d8:	bl	0 <coda_type_text_new>
    81dc:	mov	r3, r0
    81e0:	str	r3, [r4, #8]
    81e4:	ldr	r3, [fp, #-16]
    81e8:	ldr	r3, [r3]
    81ec:	ldr	r3, [r3, #8]
    81f0:	cmp	r3, #0
    81f4:	bne	8200 <cd_text_init+0x90>
    81f8:	mvn	r3, #0
    81fc:	b	82f8 <cd_text_init+0x188>
    8200:	ldr	r1, [fp, #-20]	; 0xffffffec
    8204:	ldr	r0, [fp, #-16]
    8208:	bl	104c <handle_name_attribute_for_type>
    820c:	mov	r3, r0
    8210:	cmp	r3, #0
    8214:	beq	8220 <cd_text_init+0xb0>
    8218:	mvn	r3, #0
    821c:	b	82f8 <cd_text_init+0x188>
    8220:	ldr	r3, [fp, #-16]
    8224:	ldr	r0, [r3]
    8228:	movw	r3, #0
    822c:	movt	r3, #0
    8230:	movw	r2, #0
    8234:	movt	r2, #0
    8238:	mov	r1, #11
    823c:	bl	1530 <register_sub_element>
    8240:	ldr	r3, [fp, #-16]
    8244:	ldr	r0, [r3]
    8248:	movw	r3, #0
    824c:	movt	r3, #0
    8250:	movw	r2, #0
    8254:	movt	r2, #0
    8258:	mov	r1, #8
    825c:	bl	1530 <register_sub_element>
    8260:	ldr	r3, [fp, #-16]
    8264:	ldr	r0, [r3]
    8268:	movw	r3, #0
    826c:	movt	r3, #0
    8270:	movw	r2, #0
    8274:	movt	r2, #0
    8278:	mov	r1, #16
    827c:	bl	1530 <register_sub_element>
    8280:	ldr	r3, [fp, #-16]
    8284:	ldr	r0, [r3]
    8288:	movw	r3, #0
    828c:	movt	r3, #0
    8290:	movw	r2, #0
    8294:	movt	r2, #0
    8298:	mov	r1, #28
    829c:	bl	1530 <register_sub_element>
    82a0:	ldr	r3, [fp, #-16]
    82a4:	ldr	r0, [r3]
    82a8:	movw	r3, #0
    82ac:	movt	r3, #0
    82b0:	movw	r2, #0
    82b4:	movt	r2, #0
    82b8:	mov	r1, #4
    82bc:	bl	1530 <register_sub_element>
    82c0:	ldr	r3, [fp, #-16]
    82c4:	ldr	r2, [r3]
    82c8:	movw	r3, #0
    82cc:	movt	r3, #0
    82d0:	str	r3, [r2, #36]	; 0x24
    82d4:	ldr	r1, [fp, #-20]	; 0xffffffec
    82d8:	ldr	r0, [fp, #-16]
    82dc:	bl	12a4 <handle_xml_name>
    82e0:	mov	r3, r0
    82e4:	cmp	r3, #0
    82e8:	beq	82f4 <cd_text_init+0x184>
    82ec:	mvn	r3, #0
    82f0:	b	82f8 <cd_text_init+0x188>
    82f4:	mov	r3, #0
    82f8:	mov	r0, r3
    82fc:	sub	sp, fp, #8
    8300:	ldr	r4, [sp]
    8304:	ldr	fp, [sp, #4]
    8308:	add	sp, sp, #8
    830c:	pop	{pc}		; (ldr pc, [sp], #4)

00008310 <cd_time_set_type>:
    8310:	str	fp, [sp, #-8]!
    8314:	str	lr, [sp, #4]
    8318:	add	fp, sp, #4
    831c:	sub	sp, sp, #8
    8320:	str	r0, [fp, #-8]
    8324:	ldr	r3, [fp, #-8]
    8328:	ldr	r3, [r3]
    832c:	ldr	r3, [r3, #396]	; 0x18c
    8330:	ldr	r2, [r3, #8]
    8334:	ldr	r3, [fp, #-8]
    8338:	ldr	r3, [r3]
    833c:	ldr	r3, [r3, #8]
    8340:	mov	r1, r3
    8344:	mov	r0, r2
    8348:	bl	0 <coda_type_time_set_base_type>
    834c:	mov	r3, r0
    8350:	mov	r0, r3
    8354:	sub	sp, fp, #4
    8358:	ldr	fp, [sp]
    835c:	add	sp, sp, #4
    8360:	pop	{pc}		; (ldr pc, [sp], #4)

00008364 <cd_time_add_mapping>:
    8364:	str	fp, [sp, #-8]!
    8368:	str	lr, [sp, #4]
    836c:	add	fp, sp, #4
    8370:	sub	sp, sp, #8
    8374:	str	r0, [fp, #-8]
    8378:	ldr	r3, [fp, #-8]
    837c:	ldr	r3, [r3]
    8380:	ldr	r3, [r3, #396]	; 0x18c
    8384:	ldr	r2, [r3, #8]
    8388:	ldr	r3, [fp, #-8]
    838c:	ldr	r3, [r3]
    8390:	ldr	r3, [r3, #8]
    8394:	mov	r1, r3
    8398:	mov	r0, r2
    839c:	bl	0 <coda_type_time_add_ascii_float_mapping>
    83a0:	mov	r3, r0
    83a4:	cmp	r3, #0
    83a8:	beq	83b4 <cd_time_add_mapping+0x50>
    83ac:	mvn	r3, #0
    83b0:	b	83c8 <cd_time_add_mapping+0x64>
    83b4:	ldr	r3, [fp, #-8]
    83b8:	ldr	r3, [r3]
    83bc:	mov	r2, #0
    83c0:	str	r2, [r3, #8]
    83c4:	mov	r3, #0
    83c8:	mov	r0, r3
    83cc:	sub	sp, fp, #4
    83d0:	ldr	fp, [sp]
    83d4:	add	sp, sp, #4
    83d8:	pop	{pc}		; (ldr pc, [sp], #4)

000083dc <cd_time_finalise>:
    83dc:	str	fp, [sp, #-8]!
    83e0:	str	lr, [sp, #4]
    83e4:	add	fp, sp, #4
    83e8:	sub	sp, sp, #8
    83ec:	str	r0, [fp, #-8]
    83f0:	ldr	r3, [fp, #-8]
    83f4:	ldr	r3, [r3]
    83f8:	ldr	r3, [r3, #8]
    83fc:	mov	r0, r3
    8400:	bl	0 <coda_type_time_validate>
    8404:	mov	r3, r0
    8408:	mov	r0, r3
    840c:	sub	sp, fp, #4
    8410:	ldr	fp, [sp]
    8414:	add	sp, sp, #4
    8418:	pop	{pc}		; (ldr pc, [sp], #4)

0000841c <cd_time_init>:
    841c:	str	r4, [sp, #-12]!
    8420:	str	fp, [sp, #4]
    8424:	str	lr, [sp, #8]
    8428:	add	fp, sp, #8
    842c:	sub	sp, sp, #44	; 0x2c
    8430:	str	r0, [fp, #-48]	; 0xffffffd0
    8434:	str	r1, [fp, #-52]	; 0xffffffcc
    8438:	mov	r3, #0
    843c:	str	r3, [fp, #-20]	; 0xffffffec
    8440:	ldr	r1, [fp, #-52]	; 0xffffffcc
    8444:	ldr	r0, [fp, #-48]	; 0xffffffd0
    8448:	bl	117c <handle_format_attribute_for_type>
    844c:	mov	r3, r0
    8450:	cmp	r3, #0
    8454:	beq	8460 <cd_time_init+0x44>
    8458:	mvn	r3, #0
    845c:	b	920c <cd_time_init+0xdf0>
    8460:	ldr	r3, [fp, #-48]	; 0xffffffd0
    8464:	ldr	r3, [r3]
    8468:	ldr	r3, [r3]
    846c:	mov	r2, r3
    8470:	movw	r1, #0
    8474:	movt	r1, #0
    8478:	ldr	r0, [fp, #-52]	; 0xffffffcc
    847c:	bl	fd8 <get_mandatory_attribute_value>
    8480:	str	r0, [fp, #-16]
    8484:	ldr	r3, [fp, #-16]
    8488:	cmp	r3, #0
    848c:	bne	8498 <cd_time_init+0x7c>
    8490:	mvn	r3, #0
    8494:	b	920c <cd_time_init+0xdf0>
    8498:	ldr	r3, [fp, #-48]	; 0xffffffd0
    849c:	ldr	r3, [r3]
    84a0:	ldr	r3, [r3, #44]	; 0x2c
    84a4:	cmp	r3, #0
    84a8:	bne	890c <cd_time_init+0x4f0>
    84ac:	movw	r1, #0
    84b0:	movt	r1, #0
    84b4:	ldr	r0, [fp, #-16]
    84b8:	bl	0 <strcmp>
    84bc:	mov	r3, r0
    84c0:	cmp	r3, #0
    84c4:	bne	851c <cd_time_init+0x100>
    84c8:	movw	r3, #0
    84cc:	movt	r3, #0
    84d0:	str	r3, [fp, #-16]
    84d4:	ldr	r3, [fp, #-48]	; 0xffffffd0
    84d8:	ldr	r3, [r3]
    84dc:	ldr	r3, [r3, #44]	; 0x2c
    84e0:	mov	r0, r3
    84e4:	bl	0 <coda_type_text_new>
    84e8:	str	r0, [fp, #-20]	; 0xffffffec
    84ec:	mov	r1, #11
    84f0:	ldr	r0, [fp, #-20]	; 0xffffffec
    84f4:	bl	0 <coda_type_set_read_type>
    84f8:	movw	r1, #0
    84fc:	movt	r1, #0
    8500:	ldr	r0, [fp, #-20]	; 0xffffffec
    8504:	bl	0 <coda_type_set_description>
    8508:	mov	r2, #27
    850c:	mov	r3, #0
    8510:	ldr	r0, [fp, #-20]	; 0xffffffec
    8514:	bl	0 <coda_type_set_byte_size>
    8518:	b	8fdc <cd_time_init+0xbc0>
    851c:	movw	r1, #0
    8520:	movt	r1, #0
    8524:	ldr	r0, [fp, #-16]
    8528:	bl	0 <strcmp>
    852c:	mov	r3, r0
    8530:	cmp	r3, #0
    8534:	bne	858c <cd_time_init+0x170>
    8538:	movw	r3, #0
    853c:	movt	r3, #0
    8540:	str	r3, [fp, #-16]
    8544:	ldr	r3, [fp, #-48]	; 0xffffffd0
    8548:	ldr	r3, [r3]
    854c:	ldr	r3, [r3, #44]	; 0x2c
    8550:	mov	r0, r3
    8554:	bl	0 <coda_type_text_new>
    8558:	str	r0, [fp, #-20]	; 0xffffffec
    855c:	mov	r1, #11
    8560:	ldr	r0, [fp, #-20]	; 0xffffffec
    8564:	bl	0 <coda_type_set_read_type>
    8568:	movw	r1, #0
    856c:	movt	r1, #0
    8570:	ldr	r0, [fp, #-20]	; 0xffffffec
    8574:	bl	0 <coda_type_set_description>
    8578:	mov	r2, #24
    857c:	mov	r3, #0
    8580:	ldr	r0, [fp, #-20]	; 0xffffffec
    8584:	bl	0 <coda_type_set_byte_size>
    8588:	b	8fdc <cd_time_init+0xbc0>
    858c:	movw	r1, #0
    8590:	movt	r1, #0
    8594:	ldr	r0, [fp, #-16]
    8598:	bl	0 <strcmp>
    859c:	mov	r3, r0
    85a0:	cmp	r3, #0
    85a4:	bne	85fc <cd_time_init+0x1e0>
    85a8:	movw	r3, #0
    85ac:	movt	r3, #0
    85b0:	str	r3, [fp, #-16]
    85b4:	ldr	r3, [fp, #-48]	; 0xffffffd0
    85b8:	ldr	r3, [r3]
    85bc:	ldr	r3, [r3, #44]	; 0x2c
    85c0:	mov	r0, r3
    85c4:	bl	0 <coda_type_text_new>
    85c8:	str	r0, [fp, #-20]	; 0xffffffec
    85cc:	mov	r1, #11
    85d0:	ldr	r0, [fp, #-20]	; 0xffffffec
    85d4:	bl	0 <coda_type_set_read_type>
    85d8:	movw	r1, #0
    85dc:	movt	r1, #0
    85e0:	ldr	r0, [fp, #-20]	; 0xffffffec
    85e4:	bl	0 <coda_type_set_description>
    85e8:	mov	r2, #15
    85ec:	mov	r3, #0
    85f0:	ldr	r0, [fp, #-20]	; 0xffffffec
    85f4:	bl	0 <coda_type_set_byte_size>
    85f8:	b	8fdc <cd_time_init+0xbc0>
    85fc:	movw	r1, #0
    8600:	movt	r1, #0
    8604:	ldr	r0, [fp, #-16]
    8608:	bl	0 <strcmp>
    860c:	mov	r3, r0
    8610:	cmp	r3, #0
    8614:	bne	866c <cd_time_init+0x250>
    8618:	movw	r3, #0
    861c:	movt	r3, #0
    8620:	str	r3, [fp, #-16]
    8624:	ldr	r3, [fp, #-48]	; 0xffffffd0
    8628:	ldr	r3, [r3]
    862c:	ldr	r3, [r3, #44]	; 0x2c
    8630:	mov	r0, r3
    8634:	bl	0 <coda_type_text_new>
    8638:	str	r0, [fp, #-20]	; 0xffffffec
    863c:	mov	r1, #11
    8640:	ldr	r0, [fp, #-20]	; 0xffffffec
    8644:	bl	0 <coda_type_set_read_type>
    8648:	movw	r1, #0
    864c:	movt	r1, #0
    8650:	ldr	r0, [fp, #-20]	; 0xffffffec
    8654:	bl	0 <coda_type_set_description>
    8658:	mov	r2, #18
    865c:	mov	r3, #0
    8660:	ldr	r0, [fp, #-20]	; 0xffffffec
    8664:	bl	0 <coda_type_set_byte_size>
    8668:	b	8fdc <cd_time_init+0xbc0>
    866c:	movw	r1, #0
    8670:	movt	r1, #0
    8674:	ldr	r0, [fp, #-16]
    8678:	bl	0 <strcmp>
    867c:	mov	r3, r0
    8680:	cmp	r3, #0
    8684:	bne	86dc <cd_time_init+0x2c0>
    8688:	movw	r3, #0
    868c:	movt	r3, #0
    8690:	str	r3, [fp, #-16]
    8694:	ldr	r3, [fp, #-48]	; 0xffffffd0
    8698:	ldr	r3, [r3]
    869c:	ldr	r3, [r3, #44]	; 0x2c
    86a0:	mov	r0, r3
    86a4:	bl	0 <coda_type_text_new>
    86a8:	str	r0, [fp, #-20]	; 0xffffffec
    86ac:	mov	r1, #11
    86b0:	ldr	r0, [fp, #-20]	; 0xffffffec
    86b4:	bl	0 <coda_type_set_read_type>
    86b8:	movw	r1, #0
    86bc:	movt	r1, #0
    86c0:	ldr	r0, [fp, #-20]	; 0xffffffec
    86c4:	bl	0 <coda_type_set_description>
    86c8:	mov	r2, #19
    86cc:	mov	r3, #0
    86d0:	ldr	r0, [fp, #-20]	; 0xffffffec
    86d4:	bl	0 <coda_type_set_byte_size>
    86d8:	b	8fdc <cd_time_init+0xbc0>
    86dc:	movw	r1, #0
    86e0:	movt	r1, #0
    86e4:	ldr	r0, [fp, #-16]
    86e8:	bl	0 <strcmp>
    86ec:	mov	r3, r0
    86f0:	cmp	r3, #0
    86f4:	bne	874c <cd_time_init+0x330>
    86f8:	movw	r3, #0
    86fc:	movt	r3, #0
    8700:	str	r3, [fp, #-16]
    8704:	ldr	r3, [fp, #-48]	; 0xffffffd0
    8708:	ldr	r3, [r3]
    870c:	ldr	r3, [r3, #44]	; 0x2c
    8710:	mov	r0, r3
    8714:	bl	0 <coda_type_text_new>
    8718:	str	r0, [fp, #-20]	; 0xffffffec
    871c:	mov	r1, #11
    8720:	ldr	r0, [fp, #-20]	; 0xffffffec
    8724:	bl	0 <coda_type_set_read_type>
    8728:	movw	r1, #0
    872c:	movt	r1, #0
    8730:	ldr	r0, [fp, #-20]	; 0xffffffec
    8734:	bl	0 <coda_type_set_description>
    8738:	mov	r2, #23
    873c:	mov	r3, #0
    8740:	ldr	r0, [fp, #-20]	; 0xffffffec
    8744:	bl	0 <coda_type_set_byte_size>
    8748:	b	8fdc <cd_time_init+0xbc0>
    874c:	movw	r1, #0
    8750:	movt	r1, #0
    8754:	ldr	r0, [fp, #-16]
    8758:	bl	0 <strcmp>
    875c:	mov	r3, r0
    8760:	cmp	r3, #0
    8764:	bne	87bc <cd_time_init+0x3a0>
    8768:	movw	r3, #0
    876c:	movt	r3, #0
    8770:	str	r3, [fp, #-16]
    8774:	ldr	r3, [fp, #-48]	; 0xffffffd0
    8778:	ldr	r3, [r3]
    877c:	ldr	r3, [r3, #44]	; 0x2c
    8780:	mov	r0, r3
    8784:	bl	0 <coda_type_text_new>
    8788:	str	r0, [fp, #-20]	; 0xffffffec
    878c:	mov	r1, #11
    8790:	ldr	r0, [fp, #-20]	; 0xffffffec
    8794:	bl	0 <coda_type_set_read_type>
    8798:	movw	r1, #0
    879c:	movt	r1, #0
    87a0:	ldr	r0, [fp, #-20]	; 0xffffffec
    87a4:	bl	0 <coda_type_set_description>
    87a8:	mov	r2, #26
    87ac:	mov	r3, #0
    87b0:	ldr	r0, [fp, #-20]	; 0xffffffec
    87b4:	bl	0 <coda_type_set_byte_size>
    87b8:	b	8fdc <cd_time_init+0xbc0>
    87bc:	movw	r1, #0
    87c0:	movt	r1, #0
    87c4:	ldr	r0, [fp, #-16]
    87c8:	bl	0 <strcmp>
    87cc:	mov	r3, r0
    87d0:	cmp	r3, #0
    87d4:	bne	882c <cd_time_init+0x410>
    87d8:	movw	r3, #0
    87dc:	movt	r3, #0
    87e0:	str	r3, [fp, #-16]
    87e4:	ldr	r3, [fp, #-48]	; 0xffffffd0
    87e8:	ldr	r3, [r3]
    87ec:	ldr	r3, [r3, #44]	; 0x2c
    87f0:	mov	r0, r3
    87f4:	bl	0 <coda_type_text_new>
    87f8:	str	r0, [fp, #-20]	; 0xffffffec
    87fc:	mov	r1, #11
    8800:	ldr	r0, [fp, #-20]	; 0xffffffec
    8804:	bl	0 <coda_type_set_read_type>
    8808:	movw	r1, #0
    880c:	movt	r1, #0
    8810:	ldr	r0, [fp, #-20]	; 0xffffffec
    8814:	bl	0 <coda_type_set_description>
    8818:	mov	r2, #30
    881c:	mov	r3, #0
    8820:	ldr	r0, [fp, #-20]	; 0xffffffec
    8824:	bl	0 <coda_type_set_byte_size>
    8828:	b	8fdc <cd_time_init+0xbc0>
    882c:	movw	r1, #0
    8830:	movt	r1, #0
    8834:	ldr	r0, [fp, #-16]
    8838:	bl	0 <strcmp>
    883c:	mov	r3, r0
    8840:	cmp	r3, #0
    8844:	bne	889c <cd_time_init+0x480>
    8848:	movw	r3, #0
    884c:	movt	r3, #0
    8850:	str	r3, [fp, #-16]
    8854:	ldr	r3, [fp, #-48]	; 0xffffffd0
    8858:	ldr	r3, [r3]
    885c:	ldr	r3, [r3, #44]	; 0x2c
    8860:	mov	r0, r3
    8864:	bl	0 <coda_type_text_new>
    8868:	str	r0, [fp, #-20]	; 0xffffffec
    886c:	mov	r1, #11
    8870:	ldr	r0, [fp, #-20]	; 0xffffffec
    8874:	bl	0 <coda_type_set_read_type>
    8878:	movw	r1, #0
    887c:	movt	r1, #0
    8880:	ldr	r0, [fp, #-20]	; 0xffffffec
    8884:	bl	0 <coda_type_set_description>
    8888:	mov	r2, #17
    888c:	mov	r3, #0
    8890:	ldr	r0, [fp, #-20]	; 0xffffffec
    8894:	bl	0 <coda_type_set_byte_size>
    8898:	b	8fdc <cd_time_init+0xbc0>
    889c:	movw	r1, #0
    88a0:	movt	r1, #0
    88a4:	ldr	r0, [fp, #-16]
    88a8:	bl	0 <strcmp>
    88ac:	mov	r3, r0
    88b0:	cmp	r3, #0
    88b4:	bne	8fdc <cd_time_init+0xbc0>
    88b8:	movw	r3, #0
    88bc:	movt	r3, #0
    88c0:	str	r3, [fp, #-16]
    88c4:	ldr	r3, [fp, #-48]	; 0xffffffd0
    88c8:	ldr	r3, [r3]
    88cc:	ldr	r3, [r3, #44]	; 0x2c
    88d0:	mov	r0, r3
    88d4:	bl	0 <coda_type_text_new>
    88d8:	str	r0, [fp, #-20]	; 0xffffffec
    88dc:	mov	r1, #11
    88e0:	ldr	r0, [fp, #-20]	; 0xffffffec
    88e4:	bl	0 <coda_type_set_read_type>
    88e8:	movw	r1, #0
    88ec:	movt	r1, #0
    88f0:	ldr	r0, [fp, #-20]	; 0xffffffec
    88f4:	bl	0 <coda_type_set_description>
    88f8:	mov	r2, #24
    88fc:	mov	r3, #0
    8900:	ldr	r0, [fp, #-20]	; 0xffffffec
    8904:	bl	0 <coda_type_set_byte_size>
    8908:	b	8fdc <cd_time_init+0xbc0>
    890c:	ldr	r3, [fp, #-48]	; 0xffffffd0
    8910:	ldr	r3, [r3]
    8914:	ldr	r3, [r3, #44]	; 0x2c
    8918:	cmp	r3, #1
    891c:	bne	8fdc <cd_time_init+0xbc0>
    8920:	movw	r1, #0
    8924:	movt	r1, #0
    8928:	ldr	r0, [fp, #-16]
    892c:	bl	0 <strcmp>
    8930:	mov	r3, r0
    8934:	cmp	r3, #0
    8938:	bne	8b14 <cd_time_init+0x6f8>
    893c:	movw	r3, #0
    8940:	movt	r3, #0
    8944:	str	r3, [fp, #-16]
    8948:	ldr	r3, [fp, #-48]	; 0xffffffd0
    894c:	ldr	r3, [r3]
    8950:	ldr	r3, [r3, #44]	; 0x2c
    8954:	mov	r0, r3
    8958:	bl	0 <coda_type_record_new>
    895c:	str	r0, [fp, #-24]	; 0xffffffe8
    8960:	ldr	r3, [fp, #-24]	; 0xffffffe8
    8964:	str	r3, [fp, #-20]	; 0xffffffec
    8968:	movw	r1, #0
    896c:	movt	r1, #0
    8970:	ldr	r0, [fp, #-20]	; 0xffffffec
    8974:	bl	0 <coda_type_set_description>
    8978:	ldr	r3, [fp, #-48]	; 0xffffffd0
    897c:	ldr	r3, [r3]
    8980:	ldr	r3, [r3, #44]	; 0x2c
    8984:	mov	r1, #2
    8988:	mov	r0, r3
    898c:	bl	0 <coda_type_number_new>
    8990:	str	r0, [fp, #-28]	; 0xffffffe4
    8994:	movw	r1, #0
    8998:	movt	r1, #0
    899c:	ldr	r0, [fp, #-28]	; 0xffffffe4
    89a0:	bl	0 <coda_type_set_description>
    89a4:	mov	r1, #4
    89a8:	ldr	r0, [fp, #-28]	; 0xffffffe4
    89ac:	bl	0 <coda_type_set_read_type>
    89b0:	mov	r2, #32
    89b4:	mov	r3, #0
    89b8:	ldr	r0, [fp, #-28]	; 0xffffffe4
    89bc:	bl	0 <coda_type_set_bit_size>
    89c0:	movw	r1, #0
    89c4:	movt	r1, #0
    89c8:	ldr	r0, [fp, #-28]	; 0xffffffe4
    89cc:	bl	0 <coda_type_number_set_unit>
    89d0:	movw	r0, #0
    89d4:	movt	r0, #0
    89d8:	bl	0 <coda_type_record_field_new>
    89dc:	str	r0, [fp, #-32]	; 0xffffffe0
    89e0:	ldr	r1, [fp, #-28]	; 0xffffffe4
    89e4:	ldr	r0, [fp, #-32]	; 0xffffffe0
    89e8:	bl	0 <coda_type_record_field_set_type>
    89ec:	ldr	r0, [fp, #-28]	; 0xffffffe4
    89f0:	bl	0 <coda_type_release>
    89f4:	ldr	r1, [fp, #-32]	; 0xffffffe0
    89f8:	ldr	r0, [fp, #-24]	; 0xffffffe8
    89fc:	bl	0 <coda_type_record_add_field>
    8a00:	ldr	r3, [fp, #-48]	; 0xffffffd0
    8a04:	ldr	r3, [r3]
    8a08:	ldr	r3, [r3, #44]	; 0x2c
    8a0c:	mov	r1, #2
    8a10:	mov	r0, r3
    8a14:	bl	0 <coda_type_number_new>
    8a18:	str	r0, [fp, #-28]	; 0xffffffe4
    8a1c:	movw	r1, #0
    8a20:	movt	r1, #0
    8a24:	ldr	r0, [fp, #-28]	; 0xffffffe4
    8a28:	bl	0 <coda_type_set_description>
    8a2c:	mov	r1, #5
    8a30:	ldr	r0, [fp, #-28]	; 0xffffffe4
    8a34:	bl	0 <coda_type_set_read_type>
    8a38:	mov	r2, #32
    8a3c:	mov	r3, #0
    8a40:	ldr	r0, [fp, #-28]	; 0xffffffe4
    8a44:	bl	0 <coda_type_set_bit_size>
    8a48:	movw	r1, #0
    8a4c:	movt	r1, #0
    8a50:	ldr	r0, [fp, #-28]	; 0xffffffe4
    8a54:	bl	0 <coda_type_number_set_unit>
    8a58:	movw	r0, #0
    8a5c:	movt	r0, #0
    8a60:	bl	0 <coda_type_record_field_new>
    8a64:	str	r0, [fp, #-32]	; 0xffffffe0
    8a68:	ldr	r1, [fp, #-28]	; 0xffffffe4
    8a6c:	ldr	r0, [fp, #-32]	; 0xffffffe0
    8a70:	bl	0 <coda_type_record_field_set_type>
    8a74:	ldr	r0, [fp, #-28]	; 0xffffffe4
    8a78:	bl	0 <coda_type_release>
    8a7c:	ldr	r1, [fp, #-32]	; 0xffffffe0
    8a80:	ldr	r0, [fp, #-24]	; 0xffffffe8
    8a84:	bl	0 <coda_type_record_add_field>
    8a88:	ldr	r3, [fp, #-48]	; 0xffffffd0
    8a8c:	ldr	r3, [r3]
    8a90:	ldr	r3, [r3, #44]	; 0x2c
    8a94:	mov	r1, #2
    8a98:	mov	r0, r3
    8a9c:	bl	0 <coda_type_number_new>
    8aa0:	str	r0, [fp, #-28]	; 0xffffffe4
    8aa4:	movw	r1, #0
    8aa8:	movt	r1, #0
    8aac:	ldr	r0, [fp, #-28]	; 0xffffffe4
    8ab0:	bl	0 <coda_type_set_description>
    8ab4:	mov	r1, #5
    8ab8:	ldr	r0, [fp, #-28]	; 0xffffffe4
    8abc:	bl	0 <coda_type_set_read_type>
    8ac0:	mov	r2, #32
    8ac4:	mov	r3, #0
    8ac8:	ldr	r0, [fp, #-28]	; 0xffffffe4
    8acc:	bl	0 <coda_type_set_bit_size>
    8ad0:	movw	r1, #0
    8ad4:	movt	r1, #0
    8ad8:	ldr	r0, [fp, #-28]	; 0xffffffe4
    8adc:	bl	0 <coda_type_number_set_unit>
    8ae0:	movw	r0, #0
    8ae4:	movt	r0, #0
    8ae8:	bl	0 <coda_type_record_field_new>
    8aec:	str	r0, [fp, #-32]	; 0xffffffe0
    8af0:	ldr	r1, [fp, #-28]	; 0xffffffe4
    8af4:	ldr	r0, [fp, #-32]	; 0xffffffe0
    8af8:	bl	0 <coda_type_record_field_set_type>
    8afc:	ldr	r0, [fp, #-28]	; 0xffffffe4
    8b00:	bl	0 <coda_type_release>
    8b04:	ldr	r1, [fp, #-32]	; 0xffffffe0
    8b08:	ldr	r0, [fp, #-24]	; 0xffffffe8
    8b0c:	bl	0 <coda_type_record_add_field>
    8b10:	b	8fdc <cd_time_init+0xbc0>
    8b14:	movw	r1, #0
    8b18:	movt	r1, #0
    8b1c:	ldr	r0, [fp, #-16]
    8b20:	bl	0 <strcmp>
    8b24:	mov	r3, r0
    8b28:	cmp	r3, #0
    8b2c:	bne	8c80 <cd_time_init+0x864>
    8b30:	movw	r3, #0
    8b34:	movt	r3, #0
    8b38:	str	r3, [fp, #-16]
    8b3c:	ldr	r3, [fp, #-48]	; 0xffffffd0
    8b40:	ldr	r3, [r3]
    8b44:	ldr	r3, [r3, #44]	; 0x2c
    8b48:	mov	r0, r3
    8b4c:	bl	0 <coda_type_record_new>
    8b50:	str	r0, [fp, #-24]	; 0xffffffe8
    8b54:	ldr	r3, [fp, #-24]	; 0xffffffe8
    8b58:	str	r3, [fp, #-20]	; 0xffffffec
    8b5c:	movw	r1, #0
    8b60:	movt	r1, #0
    8b64:	ldr	r0, [fp, #-20]	; 0xffffffec
    8b68:	bl	0 <coda_type_set_description>
    8b6c:	ldr	r3, [fp, #-48]	; 0xffffffd0
    8b70:	ldr	r3, [r3]
    8b74:	ldr	r3, [r3, #44]	; 0x2c
    8b78:	mov	r1, #2
    8b7c:	mov	r0, r3
    8b80:	bl	0 <coda_type_number_new>
    8b84:	str	r0, [fp, #-28]	; 0xffffffe4
    8b88:	movw	r1, #0
    8b8c:	movt	r1, #0
    8b90:	ldr	r0, [fp, #-28]	; 0xffffffe4
    8b94:	bl	0 <coda_type_set_description>
    8b98:	mov	r1, #4
    8b9c:	ldr	r0, [fp, #-28]	; 0xffffffe4
    8ba0:	bl	0 <coda_type_set_read_type>
    8ba4:	mov	r2, #32
    8ba8:	mov	r3, #0
    8bac:	ldr	r0, [fp, #-28]	; 0xffffffe4
    8bb0:	bl	0 <coda_type_set_bit_size>
    8bb4:	movw	r1, #0
    8bb8:	movt	r1, #0
    8bbc:	ldr	r0, [fp, #-28]	; 0xffffffe4
    8bc0:	bl	0 <coda_type_number_set_unit>
    8bc4:	movw	r0, #0
    8bc8:	movt	r0, #0
    8bcc:	bl	0 <coda_type_record_field_new>
    8bd0:	str	r0, [fp, #-32]	; 0xffffffe0
    8bd4:	ldr	r1, [fp, #-28]	; 0xffffffe4
    8bd8:	ldr	r0, [fp, #-32]	; 0xffffffe0
    8bdc:	bl	0 <coda_type_record_field_set_type>
    8be0:	ldr	r0, [fp, #-28]	; 0xffffffe4
    8be4:	bl	0 <coda_type_release>
    8be8:	ldr	r1, [fp, #-32]	; 0xffffffe0
    8bec:	ldr	r0, [fp, #-24]	; 0xffffffe8
    8bf0:	bl	0 <coda_type_record_add_field>
    8bf4:	ldr	r3, [fp, #-48]	; 0xffffffd0
    8bf8:	ldr	r3, [r3]
    8bfc:	ldr	r3, [r3, #44]	; 0x2c
    8c00:	mov	r1, #2
    8c04:	mov	r0, r3
    8c08:	bl	0 <coda_type_number_new>
    8c0c:	str	r0, [fp, #-28]	; 0xffffffe4
    8c10:	movw	r1, #0
    8c14:	movt	r1, #0
    8c18:	ldr	r0, [fp, #-28]	; 0xffffffe4
    8c1c:	bl	0 <coda_type_set_description>
    8c20:	mov	r1, #5
    8c24:	ldr	r0, [fp, #-28]	; 0xffffffe4
    8c28:	bl	0 <coda_type_set_read_type>
    8c2c:	mov	r2, #32
    8c30:	mov	r3, #0
    8c34:	ldr	r0, [fp, #-28]	; 0xffffffe4
    8c38:	bl	0 <coda_type_set_bit_size>
    8c3c:	movw	r1, #0
    8c40:	movt	r1, #0
    8c44:	ldr	r0, [fp, #-28]	; 0xffffffe4
    8c48:	bl	0 <coda_type_number_set_unit>
    8c4c:	movw	r0, #0
    8c50:	movt	r0, #0
    8c54:	bl	0 <coda_type_record_field_new>
    8c58:	str	r0, [fp, #-32]	; 0xffffffe0
    8c5c:	ldr	r1, [fp, #-28]	; 0xffffffe4
    8c60:	ldr	r0, [fp, #-32]	; 0xffffffe0
    8c64:	bl	0 <coda_type_record_field_set_type>
    8c68:	ldr	r0, [fp, #-28]	; 0xffffffe4
    8c6c:	bl	0 <coda_type_release>
    8c70:	ldr	r1, [fp, #-32]	; 0xffffffe0
    8c74:	ldr	r0, [fp, #-24]	; 0xffffffe8
    8c78:	bl	0 <coda_type_record_add_field>
    8c7c:	b	8fdc <cd_time_init+0xbc0>
    8c80:	movw	r1, #0
    8c84:	movt	r1, #0
    8c88:	ldr	r0, [fp, #-16]
    8c8c:	bl	0 <strcmp>
    8c90:	mov	r3, r0
    8c94:	cmp	r3, #0
    8c98:	bne	8dec <cd_time_init+0x9d0>
    8c9c:	movw	r3, #0
    8ca0:	movt	r3, #0
    8ca4:	str	r3, [fp, #-16]
    8ca8:	ldr	r3, [fp, #-48]	; 0xffffffd0
    8cac:	ldr	r3, [r3]
    8cb0:	ldr	r3, [r3, #44]	; 0x2c
    8cb4:	mov	r0, r3
    8cb8:	bl	0 <coda_type_record_new>
    8cbc:	str	r0, [fp, #-24]	; 0xffffffe8
    8cc0:	ldr	r3, [fp, #-24]	; 0xffffffe8
    8cc4:	str	r3, [fp, #-20]	; 0xffffffec
    8cc8:	movw	r1, #0
    8ccc:	movt	r1, #0
    8cd0:	ldr	r0, [fp, #-20]	; 0xffffffec
    8cd4:	bl	0 <coda_type_set_description>
    8cd8:	ldr	r3, [fp, #-48]	; 0xffffffd0
    8cdc:	ldr	r3, [r3]
    8ce0:	ldr	r3, [r3, #44]	; 0x2c
    8ce4:	mov	r1, #2
    8ce8:	mov	r0, r3
    8cec:	bl	0 <coda_type_number_new>
    8cf0:	str	r0, [fp, #-28]	; 0xffffffe4
    8cf4:	movw	r1, #0
    8cf8:	movt	r1, #0
    8cfc:	ldr	r0, [fp, #-28]	; 0xffffffe4
    8d00:	bl	0 <coda_type_set_description>
    8d04:	mov	r1, #3
    8d08:	ldr	r0, [fp, #-28]	; 0xffffffe4
    8d0c:	bl	0 <coda_type_set_read_type>
    8d10:	mov	r2, #16
    8d14:	mov	r3, #0
    8d18:	ldr	r0, [fp, #-28]	; 0xffffffe4
    8d1c:	bl	0 <coda_type_set_bit_size>
    8d20:	movw	r1, #0
    8d24:	movt	r1, #0
    8d28:	ldr	r0, [fp, #-28]	; 0xffffffe4
    8d2c:	bl	0 <coda_type_number_set_unit>
    8d30:	movw	r0, #0
    8d34:	movt	r0, #0
    8d38:	bl	0 <coda_type_record_field_new>
    8d3c:	str	r0, [fp, #-32]	; 0xffffffe0
    8d40:	ldr	r1, [fp, #-28]	; 0xffffffe4
    8d44:	ldr	r0, [fp, #-32]	; 0xffffffe0
    8d48:	bl	0 <coda_type_record_field_set_type>
    8d4c:	ldr	r0, [fp, #-28]	; 0xffffffe4
    8d50:	bl	0 <coda_type_release>
    8d54:	ldr	r1, [fp, #-32]	; 0xffffffe0
    8d58:	ldr	r0, [fp, #-24]	; 0xffffffe8
    8d5c:	bl	0 <coda_type_record_add_field>
    8d60:	ldr	r3, [fp, #-48]	; 0xffffffd0
    8d64:	ldr	r3, [r3]
    8d68:	ldr	r3, [r3, #44]	; 0x2c
    8d6c:	mov	r1, #2
    8d70:	mov	r0, r3
    8d74:	bl	0 <coda_type_number_new>
    8d78:	str	r0, [fp, #-28]	; 0xffffffe4
    8d7c:	movw	r1, #0
    8d80:	movt	r1, #0
    8d84:	ldr	r0, [fp, #-28]	; 0xffffffe4
    8d88:	bl	0 <coda_type_set_description>
    8d8c:	mov	r1, #5
    8d90:	ldr	r0, [fp, #-28]	; 0xffffffe4
    8d94:	bl	0 <coda_type_set_read_type>
    8d98:	mov	r2, #32
    8d9c:	mov	r3, #0
    8da0:	ldr	r0, [fp, #-28]	; 0xffffffe4
    8da4:	bl	0 <coda_type_set_bit_size>
    8da8:	movw	r1, #0
    8dac:	movt	r1, #0
    8db0:	ldr	r0, [fp, #-28]	; 0xffffffe4
    8db4:	bl	0 <coda_type_number_set_unit>
    8db8:	movw	r0, #0
    8dbc:	movt	r0, #0
    8dc0:	bl	0 <coda_type_record_field_new>
    8dc4:	str	r0, [fp, #-32]	; 0xffffffe0
    8dc8:	ldr	r1, [fp, #-28]	; 0xffffffe4
    8dcc:	ldr	r0, [fp, #-32]	; 0xffffffe0
    8dd0:	bl	0 <coda_type_record_field_set_type>
    8dd4:	ldr	r0, [fp, #-28]	; 0xffffffe4
    8dd8:	bl	0 <coda_type_release>
    8ddc:	ldr	r1, [fp, #-32]	; 0xffffffe0
    8de0:	ldr	r0, [fp, #-24]	; 0xffffffe8
    8de4:	bl	0 <coda_type_record_add_field>
    8de8:	b	8fdc <cd_time_init+0xbc0>
    8dec:	movw	r1, #0
    8df0:	movt	r1, #0
    8df4:	ldr	r0, [fp, #-16]
    8df8:	bl	0 <strcmp>
    8dfc:	mov	r3, r0
    8e00:	cmp	r3, #0
    8e04:	bne	8fdc <cd_time_init+0xbc0>
    8e08:	movw	r3, #0
    8e0c:	movt	r3, #0
    8e10:	str	r3, [fp, #-16]
    8e14:	ldr	r3, [fp, #-48]	; 0xffffffd0
    8e18:	ldr	r3, [r3]
    8e1c:	ldr	r3, [r3, #44]	; 0x2c
    8e20:	mov	r0, r3
    8e24:	bl	0 <coda_type_record_new>
    8e28:	str	r0, [fp, #-24]	; 0xffffffe8
    8e2c:	ldr	r3, [fp, #-24]	; 0xffffffe8
    8e30:	str	r3, [fp, #-20]	; 0xffffffec
    8e34:	movw	r1, #0
    8e38:	movt	r1, #0
    8e3c:	ldr	r0, [fp, #-20]	; 0xffffffec
    8e40:	bl	0 <coda_type_set_description>
    8e44:	ldr	r3, [fp, #-48]	; 0xffffffd0
    8e48:	ldr	r3, [r3]
    8e4c:	ldr	r3, [r3, #44]	; 0x2c
    8e50:	mov	r1, #2
    8e54:	mov	r0, r3
    8e58:	bl	0 <coda_type_number_new>
    8e5c:	str	r0, [fp, #-28]	; 0xffffffe4
    8e60:	movw	r1, #0
    8e64:	movt	r1, #0
    8e68:	ldr	r0, [fp, #-28]	; 0xffffffe4
    8e6c:	bl	0 <coda_type_set_description>
    8e70:	mov	r1, #3
    8e74:	ldr	r0, [fp, #-28]	; 0xffffffe4
    8e78:	bl	0 <coda_type_set_read_type>
    8e7c:	mov	r2, #16
    8e80:	mov	r3, #0
    8e84:	ldr	r0, [fp, #-28]	; 0xffffffe4
    8e88:	bl	0 <coda_type_set_bit_size>
    8e8c:	movw	r1, #0
    8e90:	movt	r1, #0
    8e94:	ldr	r0, [fp, #-28]	; 0xffffffe4
    8e98:	bl	0 <coda_type_number_set_unit>
    8e9c:	movw	r0, #0
    8ea0:	movt	r0, #0
    8ea4:	bl	0 <coda_type_record_field_new>
    8ea8:	str	r0, [fp, #-32]	; 0xffffffe0
    8eac:	ldr	r1, [fp, #-28]	; 0xffffffe4
    8eb0:	ldr	r0, [fp, #-32]	; 0xffffffe0
    8eb4:	bl	0 <coda_type_record_field_set_type>
    8eb8:	ldr	r0, [fp, #-28]	; 0xffffffe4
    8ebc:	bl	0 <coda_type_release>
    8ec0:	ldr	r1, [fp, #-32]	; 0xffffffe0
    8ec4:	ldr	r0, [fp, #-24]	; 0xffffffe8
    8ec8:	bl	0 <coda_type_record_add_field>
    8ecc:	ldr	r3, [fp, #-48]	; 0xffffffd0
    8ed0:	ldr	r3, [r3]
    8ed4:	ldr	r3, [r3, #44]	; 0x2c
    8ed8:	mov	r1, #2
    8edc:	mov	r0, r3
    8ee0:	bl	0 <coda_type_number_new>
    8ee4:	str	r0, [fp, #-28]	; 0xffffffe4
    8ee8:	movw	r1, #0
    8eec:	movt	r1, #0
    8ef0:	ldr	r0, [fp, #-28]	; 0xffffffe4
    8ef4:	bl	0 <coda_type_set_description>
    8ef8:	mov	r1, #5
    8efc:	ldr	r0, [fp, #-28]	; 0xffffffe4
    8f00:	bl	0 <coda_type_set_read_type>
    8f04:	mov	r2, #32
    8f08:	mov	r3, #0
    8f0c:	ldr	r0, [fp, #-28]	; 0xffffffe4
    8f10:	bl	0 <coda_type_set_bit_size>
    8f14:	movw	r1, #0
    8f18:	movt	r1, #0
    8f1c:	ldr	r0, [fp, #-28]	; 0xffffffe4
    8f20:	bl	0 <coda_type_number_set_unit>
    8f24:	movw	r0, #0
    8f28:	movt	r0, #0
    8f2c:	bl	0 <coda_type_record_field_new>
    8f30:	str	r0, [fp, #-32]	; 0xffffffe0
    8f34:	ldr	r1, [fp, #-28]	; 0xffffffe4
    8f38:	ldr	r0, [fp, #-32]	; 0xffffffe0
    8f3c:	bl	0 <coda_type_record_field_set_type>
    8f40:	ldr	r0, [fp, #-28]	; 0xffffffe4
    8f44:	bl	0 <coda_type_release>
    8f48:	ldr	r1, [fp, #-32]	; 0xffffffe0
    8f4c:	ldr	r0, [fp, #-24]	; 0xffffffe8
    8f50:	bl	0 <coda_type_record_add_field>
    8f54:	ldr	r3, [fp, #-48]	; 0xffffffd0
    8f58:	ldr	r3, [r3]
    8f5c:	ldr	r3, [r3, #44]	; 0x2c
    8f60:	mov	r1, #2
    8f64:	mov	r0, r3
    8f68:	bl	0 <coda_type_number_new>
    8f6c:	str	r0, [fp, #-28]	; 0xffffffe4
    8f70:	movw	r1, #0
    8f74:	movt	r1, #0
    8f78:	ldr	r0, [fp, #-28]	; 0xffffffe4
    8f7c:	bl	0 <coda_type_set_description>
    8f80:	mov	r1, #3
    8f84:	ldr	r0, [fp, #-28]	; 0xffffffe4
    8f88:	bl	0 <coda_type_set_read_type>
    8f8c:	mov	r2, #16
    8f90:	mov	r3, #0
    8f94:	ldr	r0, [fp, #-28]	; 0xffffffe4
    8f98:	bl	0 <coda_type_set_bit_size>
    8f9c:	movw	r1, #0
    8fa0:	movt	r1, #0
    8fa4:	ldr	r0, [fp, #-28]	; 0xffffffe4
    8fa8:	bl	0 <coda_type_number_set_unit>
    8fac:	movw	r0, #0
    8fb0:	movt	r0, #0
    8fb4:	bl	0 <coda_type_record_field_new>
    8fb8:	str	r0, [fp, #-32]	; 0xffffffe0
    8fbc:	ldr	r1, [fp, #-28]	; 0xffffffe4
    8fc0:	ldr	r0, [fp, #-32]	; 0xffffffe0
    8fc4:	bl	0 <coda_type_record_field_set_type>
    8fc8:	ldr	r0, [fp, #-28]	; 0xffffffe4
    8fcc:	bl	0 <coda_type_release>
    8fd0:	ldr	r1, [fp, #-32]	; 0xffffffe0
    8fd4:	ldr	r0, [fp, #-24]	; 0xffffffe8
    8fd8:	bl	0 <coda_type_record_add_field>
    8fdc:	sub	r3, fp, #40	; 0x28
    8fe0:	mov	r1, r3
    8fe4:	ldr	r0, [fp, #-16]
    8fe8:	bl	0 <coda_expression_from_string>
    8fec:	mov	r3, r0
    8ff0:	cmp	r3, #0
    8ff4:	beq	9008 <cd_time_init+0xbec>
    8ff8:	ldr	r0, [fp, #-20]	; 0xffffffec
    8ffc:	bl	0 <coda_type_release>
    9000:	mvn	r3, #0
    9004:	b	920c <cd_time_init+0xdf0>
    9008:	ldr	r3, [fp, #-40]	; 0xffffffd8
    900c:	sub	r2, fp, #36	; 0x24
    9010:	mov	r1, r2
    9014:	mov	r0, r3
    9018:	bl	0 <coda_expression_get_type>
    901c:	mov	r3, r0
    9020:	cmp	r3, #0
    9024:	beq	9044 <cd_time_init+0xc28>
    9028:	ldr	r0, [fp, #-20]	; 0xffffffec
    902c:	bl	0 <coda_type_release>
    9030:	ldr	r3, [fp, #-40]	; 0xffffffd8
    9034:	mov	r0, r3
    9038:	bl	0 <coda_expression_delete>
    903c:	mvn	r3, #0
    9040:	b	920c <cd_time_init+0xdf0>
    9044:	ldr	r3, [fp, #-36]	; 0xffffffdc
    9048:	cmp	r3, #2
    904c:	beq	9080 <cd_time_init+0xc64>
    9050:	ldr	r0, [fp, #-20]	; 0xffffffec
    9054:	bl	0 <coda_type_release>
    9058:	ldr	r3, [fp, #-40]	; 0xffffffd8
    905c:	mov	r0, r3
    9060:	bl	0 <coda_expression_delete>
    9064:	movw	r1, #0
    9068:	movt	r1, #0
    906c:	movw	r0, #65136	; 0xfe70
    9070:	movt	r0, #65535	; 0xffff
    9074:	bl	0 <coda_set_error>
    9078:	mvn	r3, #0
    907c:	b	920c <cd_time_init+0xdf0>
    9080:	ldr	r3, [fp, #-48]	; 0xffffffd0
    9084:	ldr	r2, [r3]
    9088:	movw	r3, #0
    908c:	movt	r3, #0
    9090:	str	r3, [r2, #40]	; 0x28
    9094:	ldr	r3, [fp, #-48]	; 0xffffffd0
    9098:	ldr	r3, [r3]
    909c:	ldr	r2, [r3, #44]	; 0x2c
    90a0:	ldr	r1, [fp, #-40]	; 0xffffffd8
    90a4:	ldr	r3, [fp, #-48]	; 0xffffffd0
    90a8:	ldr	r4, [r3]
    90ac:	mov	r0, r2
    90b0:	bl	0 <coda_type_time_new>
    90b4:	mov	r3, r0
    90b8:	str	r3, [r4, #8]
    90bc:	ldr	r3, [fp, #-48]	; 0xffffffd0
    90c0:	ldr	r3, [r3]
    90c4:	ldr	r3, [r3, #8]
    90c8:	cmp	r3, #0
    90cc:	bne	90ec <cd_time_init+0xcd0>
    90d0:	ldr	r0, [fp, #-20]	; 0xffffffec
    90d4:	bl	0 <coda_type_release>
    90d8:	ldr	r3, [fp, #-40]	; 0xffffffd8
    90dc:	mov	r0, r3
    90e0:	bl	0 <coda_expression_delete>
    90e4:	mvn	r3, #0
    90e8:	b	920c <cd_time_init+0xdf0>
    90ec:	ldr	r3, [fp, #-20]	; 0xffffffec
    90f0:	cmp	r3, #0
    90f4:	beq	9134 <cd_time_init+0xd18>
    90f8:	ldr	r3, [fp, #-48]	; 0xffffffd0
    90fc:	ldr	r3, [r3]
    9100:	ldr	r3, [r3, #8]
    9104:	ldr	r1, [fp, #-20]	; 0xffffffec
    9108:	mov	r0, r3
    910c:	bl	0 <coda_type_time_set_base_type>
    9110:	mov	r3, r0
    9114:	cmp	r3, #0
    9118:	beq	912c <cd_time_init+0xd10>
    911c:	ldr	r0, [fp, #-20]	; 0xffffffec
    9120:	bl	0 <coda_type_release>
    9124:	mvn	r3, #0
    9128:	b	920c <cd_time_init+0xdf0>
    912c:	ldr	r0, [fp, #-20]	; 0xffffffec
    9130:	bl	0 <coda_type_release>
    9134:	ldr	r1, [fp, #-52]	; 0xffffffcc
    9138:	ldr	r0, [fp, #-48]	; 0xffffffd0
    913c:	bl	104c <handle_name_attribute_for_type>
    9140:	mov	r3, r0
    9144:	cmp	r3, #0
    9148:	beq	9154 <cd_time_init+0xd38>
    914c:	mvn	r3, #0
    9150:	b	920c <cd_time_init+0xdf0>
    9154:	ldr	r3, [fp, #-48]	; 0xffffffd0
    9158:	ldr	r3, [r3]
    915c:	movw	r1, #0
    9160:	movt	r1, #0
    9164:	mov	r0, r3
    9168:	bl	15c0 <register_type_elements>
    916c:	ldr	r3, [fp, #-48]	; 0xffffffd0
    9170:	ldr	r0, [r3]
    9174:	movw	r3, #0
    9178:	movt	r3, #0
    917c:	movw	r2, #0
    9180:	movt	r2, #0
    9184:	mov	r1, #11
    9188:	bl	1530 <register_sub_element>
    918c:	ldr	r3, [fp, #-48]	; 0xffffffd0
    9190:	ldr	r0, [r3]
    9194:	movw	r3, #0
    9198:	movt	r3, #0
    919c:	movw	r2, #0
    91a0:	movt	r2, #0
    91a4:	mov	r1, #22
    91a8:	bl	1530 <register_sub_element>
    91ac:	ldr	r3, [fp, #-48]	; 0xffffffd0
    91b0:	ldr	r3, [r3]
    91b4:	ldr	r3, [r3, #44]	; 0x2c
    91b8:	cmp	r3, #0
    91bc:	beq	91f4 <cd_time_init+0xdd8>
    91c0:	ldr	r3, [fp, #-48]	; 0xffffffd0
    91c4:	ldr	r3, [r3]
    91c8:	ldr	r3, [r3, #44]	; 0x2c
    91cc:	cmp	r3, #1
    91d0:	beq	91f4 <cd_time_init+0xdd8>
    91d4:	ldr	r3, [fp, #-48]	; 0xffffffd0
    91d8:	ldr	r0, [r3]
    91dc:	movw	r3, #0
    91e0:	movt	r3, #0
    91e4:	movw	r2, #0
    91e8:	movt	r2, #0
    91ec:	mov	r1, #4
    91f0:	bl	1530 <register_sub_element>
    91f4:	ldr	r3, [fp, #-48]	; 0xffffffd0
    91f8:	ldr	r2, [r3]
    91fc:	movw	r3, #0
    9200:	movt	r3, #0
    9204:	str	r3, [r2, #36]	; 0x24
    9208:	mov	r3, #0
    920c:	mov	r0, r3
    9210:	sub	sp, fp, #8
    9214:	ldr	r4, [sp]
    9218:	ldr	fp, [sp, #4]
    921c:	add	sp, sp, #8
    9220:	pop	{pc}		; (ldr pc, [sp], #4)

00009224 <cd_type_set_type>:
    9224:	str	fp, [sp, #-8]!
    9228:	str	lr, [sp, #4]
    922c:	add	fp, sp, #4
    9230:	sub	sp, sp, #16
    9234:	str	r0, [fp, #-16]
    9238:	ldr	r3, [fp, #-16]
    923c:	ldr	r3, [r3]
    9240:	ldr	r3, [r3, #396]	; 0x18c
    9244:	ldr	r3, [r3, #8]
    9248:	str	r3, [fp, #-8]
    924c:	ldr	r3, [fp, #-8]
    9250:	ldr	r3, [r3, #20]
    9254:	cmp	r3, #0
    9258:	beq	927c <cd_type_set_type+0x58>
    925c:	ldr	r3, [fp, #-16]
    9260:	ldr	r3, [r3]
    9264:	ldr	r2, [r3, #8]
    9268:	ldr	r3, [fp, #-8]
    926c:	ldr	r3, [r3, #20]
    9270:	mov	r1, r3
    9274:	mov	r0, r2
    9278:	bl	0 <coda_type_set_description>
    927c:	ldr	r3, [fp, #-8]
    9280:	ldr	r3, [r3, #36]	; 0x24
    9284:	cmp	r3, #0
    9288:	beq	930c <cd_type_set_type+0xe8>
    928c:	ldr	r3, [fp, #-16]
    9290:	ldr	r3, [r3]
    9294:	ldr	r3, [r3, #8]
    9298:	ldr	r3, [r3, #36]	; 0x24
    929c:	cmp	r3, #0
    92a0:	beq	92c4 <cd_type_set_type+0xa0>
    92a4:	movw	r3, #0
    92a8:	movt	r3, #0
    92ac:	movw	r2, #3653	; 0xe45
    92b0:	movw	r1, #0
    92b4:	movt	r1, #0
    92b8:	movw	r0, #0
    92bc:	movt	r0, #0
    92c0:	bl	0 <__assert_fail>
    92c4:	ldr	r3, [fp, #-16]
    92c8:	ldr	r3, [r3]
    92cc:	ldr	r3, [r3, #8]
    92d0:	ldr	r2, [fp, #-8]
    92d4:	ldr	r2, [r2, #36]	; 0x24
    92d8:	str	r2, [r3, #36]	; 0x24
    92dc:	ldr	r3, [fp, #-8]
    92e0:	ldr	r2, [r3, #36]	; 0x24
    92e4:	ldr	r3, [fp, #-16]
    92e8:	ldr	r3, [r3]
    92ec:	ldr	r3, [r3, #8]
    92f0:	ldr	r3, [r3]
    92f4:	mov	r1, r3
    92f8:	mov	r0, r2
    92fc:	bl	21a8 <type_set_format>
    9300:	ldr	r3, [fp, #-8]
    9304:	mov	r2, #0
    9308:	str	r2, [r3, #36]	; 0x24
    930c:	ldr	r0, [fp, #-8]
    9310:	bl	0 <coda_type_release>
    9314:	ldr	r3, [fp, #-16]
    9318:	ldr	r2, [r3]
    931c:	ldr	r3, [fp, #-16]
    9320:	ldr	r3, [r3]
    9324:	ldr	r3, [r3, #396]	; 0x18c
    9328:	ldr	r2, [r2, #8]
    932c:	str	r2, [r3, #8]
    9330:	ldr	r3, [fp, #-16]
    9334:	ldr	r3, [r3]
    9338:	mov	r2, #0
    933c:	str	r2, [r3, #8]
    9340:	mov	r3, #0
    9344:	mov	r0, r3
    9348:	sub	sp, fp, #4
    934c:	ldr	fp, [sp]
    9350:	add	sp, sp, #4
    9354:	pop	{pc}		; (ldr pc, [sp], #4)

00009358 <cd_type_init>:
    9358:	str	r4, [sp, #-12]!
    935c:	str	fp, [sp, #4]
    9360:	str	lr, [sp, #8]
    9364:	add	fp, sp, #8
    9368:	sub	sp, sp, #12
    936c:	str	r0, [fp, #-16]
    9370:	str	r1, [fp, #-20]	; 0xffffffec
    9374:	movw	r1, #0
    9378:	movt	r1, #0
    937c:	ldr	r0, [fp, #-20]	; 0xffffffec
    9380:	bl	f5c <get_attribute_value>
    9384:	mov	r3, r0
    9388:	cmp	r3, #0
    938c:	beq	93ac <cd_type_init+0x54>
    9390:	movw	r1, #0
    9394:	movt	r1, #0
    9398:	movw	r0, #65136	; 0xfe70
    939c:	movt	r0, #65535	; 0xffff
    93a0:	bl	0 <coda_set_error>
    93a4:	mvn	r3, #0
    93a8:	b	949c <cd_type_init+0x144>
    93ac:	ldr	r1, [fp, #-20]	; 0xffffffec
    93b0:	ldr	r0, [fp, #-16]
    93b4:	bl	117c <handle_format_attribute_for_type>
    93b8:	mov	r3, r0
    93bc:	cmp	r3, #0
    93c0:	beq	93cc <cd_type_init+0x74>
    93c4:	mvn	r3, #0
    93c8:	b	949c <cd_type_init+0x144>
    93cc:	ldr	r3, [fp, #-16]
    93d0:	ldr	r2, [r3]
    93d4:	movw	r3, #0
    93d8:	movt	r3, #0
    93dc:	str	r3, [r2, #40]	; 0x28
    93e0:	ldr	r3, [fp, #-16]
    93e4:	ldr	r3, [r3]
    93e8:	ldr	r2, [r3, #44]	; 0x2c
    93ec:	ldr	r3, [fp, #-16]
    93f0:	ldr	r4, [r3]
    93f4:	mov	r0, r2
    93f8:	bl	0 <coda_type_text_new>
    93fc:	mov	r3, r0
    9400:	str	r3, [r4, #8]
    9404:	ldr	r3, [fp, #-16]
    9408:	ldr	r3, [r3]
    940c:	ldr	r3, [r3, #8]
    9410:	cmp	r3, #0
    9414:	bne	9420 <cd_type_init+0xc8>
    9418:	mvn	r3, #0
    941c:	b	949c <cd_type_init+0x144>
    9420:	ldr	r3, [fp, #-16]
    9424:	ldr	r3, [r3]
    9428:	movw	r1, #0
    942c:	movt	r1, #0
    9430:	mov	r0, r3
    9434:	bl	15c0 <register_type_elements>
    9438:	ldr	r3, [fp, #-16]
    943c:	ldr	r0, [r3]
    9440:	movw	r3, #0
    9444:	movt	r3, #0
    9448:	movw	r2, #0
    944c:	movt	r2, #0
    9450:	mov	r1, #11
    9454:	bl	1530 <register_sub_element>
    9458:	ldr	r3, [fp, #-16]
    945c:	ldr	r0, [r3]
    9460:	movw	r3, #0
    9464:	movt	r3, #0
    9468:	movw	r2, #0
    946c:	movt	r2, #0
    9470:	mov	r1, #4
    9474:	bl	1530 <register_sub_element>
    9478:	ldr	r1, [fp, #-20]	; 0xffffffec
    947c:	ldr	r0, [fp, #-16]
    9480:	bl	12a4 <handle_xml_name>
    9484:	mov	r3, r0
    9488:	cmp	r3, #0
    948c:	beq	9498 <cd_type_init+0x140>
    9490:	mvn	r3, #0
    9494:	b	949c <cd_type_init+0x144>
    9498:	mov	r3, #0
    949c:	mov	r0, r3
    94a0:	sub	sp, fp, #8
    94a4:	ldr	r4, [sp]
    94a8:	ldr	fp, [sp, #4]
    94ac:	add	sp, sp, #8
    94b0:	pop	{pc}		; (ldr pc, [sp], #4)

000094b4 <cd_union_set_field_expression>:
    94b4:	str	fp, [sp, #-8]!
    94b8:	str	lr, [sp, #4]
    94bc:	add	fp, sp, #4
    94c0:	sub	sp, sp, #8
    94c4:	str	r0, [fp, #-8]
    94c8:	ldr	r3, [fp, #-8]
    94cc:	ldr	r3, [r3]
    94d0:	ldr	r3, [r3, #396]	; 0x18c
    94d4:	ldr	r2, [r3, #8]
    94d8:	ldr	r3, [fp, #-8]
    94dc:	ldr	r3, [r3]
    94e0:	ldr	r3, [r3, #8]
    94e4:	mov	r1, r3
    94e8:	mov	r0, r2
    94ec:	bl	0 <coda_type_union_set_field_expression>
    94f0:	mov	r3, r0
    94f4:	cmp	r3, #0
    94f8:	beq	9504 <cd_union_set_field_expression+0x50>
    94fc:	mvn	r3, #0
    9500:	b	9518 <cd_union_set_field_expression+0x64>
    9504:	ldr	r3, [fp, #-8]
    9508:	ldr	r3, [r3]
    950c:	mov	r2, #0
    9510:	str	r2, [r3, #8]
    9514:	mov	r3, #0
    9518:	mov	r0, r3
    951c:	sub	sp, fp, #4
    9520:	ldr	fp, [sp]
    9524:	add	sp, sp, #4
    9528:	pop	{pc}		; (ldr pc, [sp], #4)

0000952c <cd_union_add_field>:
    952c:	str	fp, [sp, #-8]!
    9530:	str	lr, [sp, #4]
    9534:	add	fp, sp, #4
    9538:	sub	sp, sp, #8
    953c:	str	r0, [fp, #-8]
    9540:	ldr	r3, [fp, #-8]
    9544:	ldr	r3, [r3]
    9548:	ldr	r3, [r3, #8]
    954c:	mov	r0, r3
    9550:	bl	0 <coda_type_record_field_set_optional>
    9554:	ldr	r3, [fp, #-8]
    9558:	ldr	r3, [r3]
    955c:	ldr	r3, [r3, #396]	; 0x18c
    9560:	ldr	r2, [r3, #8]
    9564:	ldr	r3, [fp, #-8]
    9568:	ldr	r3, [r3]
    956c:	ldr	r3, [r3, #8]
    9570:	mov	r1, r3
    9574:	mov	r0, r2
    9578:	bl	0 <coda_type_record_add_field>
    957c:	mov	r3, r0
    9580:	cmp	r3, #0
    9584:	beq	9590 <cd_union_add_field+0x64>
    9588:	mvn	r3, #0
    958c:	b	95a4 <cd_union_add_field+0x78>
    9590:	ldr	r3, [fp, #-8]
    9594:	ldr	r3, [r3]
    9598:	mov	r2, #0
    959c:	str	r2, [r3, #8]
    95a0:	mov	r3, #0
    95a4:	mov	r0, r3
    95a8:	sub	sp, fp, #4
    95ac:	ldr	fp, [sp]
    95b0:	add	sp, sp, #4
    95b4:	pop	{pc}		; (ldr pc, [sp], #4)

000095b8 <cd_union_finalise>:
    95b8:	str	fp, [sp, #-8]!
    95bc:	str	lr, [sp, #4]
    95c0:	add	fp, sp, #4
    95c4:	sub	sp, sp, #8
    95c8:	str	r0, [fp, #-8]
    95cc:	ldr	r3, [fp, #-8]
    95d0:	ldr	r3, [r3]
    95d4:	ldr	r3, [r3, #8]
    95d8:	mov	r0, r3
    95dc:	bl	0 <coda_type_record_validate>
    95e0:	mov	r3, r0
    95e4:	mov	r0, r3
    95e8:	sub	sp, fp, #4
    95ec:	ldr	fp, [sp]
    95f0:	add	sp, sp, #4
    95f4:	pop	{pc}		; (ldr pc, [sp], #4)

000095f8 <cd_union_init>:
    95f8:	str	r4, [sp, #-12]!
    95fc:	str	fp, [sp, #4]
    9600:	str	lr, [sp, #8]
    9604:	add	fp, sp, #8
    9608:	sub	sp, sp, #12
    960c:	str	r0, [fp, #-16]
    9610:	str	r1, [fp, #-20]	; 0xffffffec
    9614:	ldr	r1, [fp, #-20]	; 0xffffffec
    9618:	ldr	r0, [fp, #-16]
    961c:	bl	117c <handle_format_attribute_for_type>
    9620:	mov	r3, r0
    9624:	cmp	r3, #0
    9628:	beq	9634 <cd_union_init+0x3c>
    962c:	mvn	r3, #0
    9630:	b	9780 <cd_union_init+0x188>
    9634:	ldr	r3, [fp, #-16]
    9638:	ldr	r2, [r3]
    963c:	movw	r3, #0
    9640:	movt	r3, #0
    9644:	str	r3, [r2, #40]	; 0x28
    9648:	ldr	r3, [fp, #-16]
    964c:	ldr	r3, [r3]
    9650:	ldr	r2, [r3, #44]	; 0x2c
    9654:	ldr	r3, [fp, #-16]
    9658:	ldr	r4, [r3]
    965c:	mov	r0, r2
    9660:	bl	0 <coda_type_union_new>
    9664:	mov	r3, r0
    9668:	str	r3, [r4, #8]
    966c:	ldr	r3, [fp, #-16]
    9670:	ldr	r3, [r3]
    9674:	ldr	r3, [r3, #8]
    9678:	cmp	r3, #0
    967c:	bne	9688 <cd_union_init+0x90>
    9680:	mvn	r3, #0
    9684:	b	9780 <cd_union_init+0x188>
    9688:	ldr	r1, [fp, #-20]	; 0xffffffec
    968c:	ldr	r0, [fp, #-16]
    9690:	bl	104c <handle_name_attribute_for_type>
    9694:	mov	r3, r0
    9698:	cmp	r3, #0
    969c:	beq	96a8 <cd_union_init+0xb0>
    96a0:	mvn	r3, #0
    96a4:	b	9780 <cd_union_init+0x188>
    96a8:	ldr	r3, [fp, #-16]
    96ac:	ldr	r0, [r3]
    96b0:	movw	r3, #0
    96b4:	movt	r3, #0
    96b8:	movw	r2, #0
    96bc:	movt	r2, #0
    96c0:	mov	r1, #11
    96c4:	bl	1530 <register_sub_element>
    96c8:	ldr	r3, [fp, #-16]
    96cc:	ldr	r0, [r3]
    96d0:	movw	r3, #0
    96d4:	movt	r3, #0
    96d8:	movw	r2, #0
    96dc:	movt	r2, #0
    96e0:	mov	r1, #7
    96e4:	bl	1530 <register_sub_element>
    96e8:	ldr	r3, [fp, #-16]
    96ec:	ldr	r0, [r3]
    96f0:	movw	r3, #0
    96f4:	movt	r3, #0
    96f8:	movw	r2, #0
    96fc:	movt	r2, #0
    9700:	mov	r1, #15
    9704:	bl	1530 <register_sub_element>
    9708:	ldr	r3, [fp, #-16]
    970c:	ldr	r0, [r3]
    9710:	movw	r3, #0
    9714:	movt	r3, #0
    9718:	movw	r2, #0
    971c:	movt	r2, #0
    9720:	mov	r1, #14
    9724:	bl	1530 <register_sub_element>
    9728:	ldr	r3, [fp, #-16]
    972c:	ldr	r0, [r3]
    9730:	movw	r3, #0
    9734:	movt	r3, #0
    9738:	movw	r2, #0
    973c:	movt	r2, #0
    9740:	mov	r1, #4
    9744:	bl	1530 <register_sub_element>
    9748:	ldr	r3, [fp, #-16]
    974c:	ldr	r2, [r3]
    9750:	movw	r3, #0
    9754:	movt	r3, #0
    9758:	str	r3, [r2, #36]	; 0x24
    975c:	ldr	r1, [fp, #-20]	; 0xffffffec
    9760:	ldr	r0, [fp, #-16]
    9764:	bl	12a4 <handle_xml_name>
    9768:	mov	r3, r0
    976c:	cmp	r3, #0
    9770:	beq	977c <cd_union_init+0x184>
    9774:	mvn	r3, #0
    9778:	b	9780 <cd_union_init+0x188>
    977c:	mov	r3, #0
    9780:	mov	r0, r3
    9784:	sub	sp, fp, #8
    9788:	ldr	r4, [sp]
    978c:	ldr	fp, [sp, #4]
    9790:	add	sp, sp, #8
    9794:	pop	{pc}		; (ldr pc, [sp], #4)

00009798 <cd_vsf_integer_set_type>:
    9798:	str	fp, [sp, #-8]!
    979c:	str	lr, [sp, #4]
    97a0:	add	fp, sp, #4
    97a4:	sub	sp, sp, #8
    97a8:	str	r0, [fp, #-8]
    97ac:	ldr	r3, [fp, #-8]
    97b0:	ldr	r3, [r3]
    97b4:	ldr	r3, [r3, #396]	; 0x18c
    97b8:	ldr	r2, [r3, #8]
    97bc:	ldr	r3, [fp, #-8]
    97c0:	ldr	r3, [r3]
    97c4:	ldr	r3, [r3, #8]
    97c8:	mov	r1, r3
    97cc:	mov	r0, r2
    97d0:	bl	0 <coda_type_vsf_integer_set_type>
    97d4:	mov	r3, r0
    97d8:	mov	r0, r3
    97dc:	sub	sp, fp, #4
    97e0:	ldr	fp, [sp]
    97e4:	add	sp, sp, #4
    97e8:	pop	{pc}		; (ldr pc, [sp], #4)

000097ec <cd_vsf_integer_set_scale_factor>:
    97ec:	str	fp, [sp, #-8]!
    97f0:	str	lr, [sp, #4]
    97f4:	add	fp, sp, #4
    97f8:	sub	sp, sp, #8
    97fc:	str	r0, [fp, #-8]
    9800:	ldr	r3, [fp, #-8]
    9804:	ldr	r3, [r3]
    9808:	ldr	r3, [r3, #396]	; 0x18c
    980c:	ldr	r2, [r3, #8]
    9810:	ldr	r3, [fp, #-8]
    9814:	ldr	r3, [r3]
    9818:	ldr	r3, [r3, #8]
    981c:	mov	r1, r3
    9820:	mov	r0, r2
    9824:	bl	0 <coda_type_vsf_integer_set_scale_factor>
    9828:	mov	r3, r0
    982c:	mov	r0, r3
    9830:	sub	sp, fp, #4
    9834:	ldr	fp, [sp]
    9838:	add	sp, sp, #4
    983c:	pop	{pc}		; (ldr pc, [sp], #4)

00009840 <cd_vsf_integer_set_unit>:
    9840:	str	fp, [sp, #-8]!
    9844:	str	lr, [sp, #4]
    9848:	add	fp, sp, #4
    984c:	sub	sp, sp, #8
    9850:	str	r0, [fp, #-8]
    9854:	ldr	r3, [fp, #-8]
    9858:	ldr	r3, [r3]
    985c:	ldr	r3, [r3, #12]
    9860:	cmp	r3, #0
    9864:	bne	9890 <cd_vsf_integer_set_unit+0x50>
    9868:	ldr	r3, [fp, #-8]
    986c:	ldr	r3, [r3]
    9870:	ldr	r3, [r3, #396]	; 0x18c
    9874:	ldr	r3, [r3, #8]
    9878:	movw	r1, #0
    987c:	movt	r1, #0
    9880:	mov	r0, r3
    9884:	bl	0 <coda_type_vsf_integer_set_unit>
    9888:	mov	r3, r0
    988c:	b	98bc <cd_vsf_integer_set_unit+0x7c>
    9890:	ldr	r3, [fp, #-8]
    9894:	ldr	r3, [r3]
    9898:	ldr	r3, [r3, #396]	; 0x18c
    989c:	ldr	r2, [r3, #8]
    98a0:	ldr	r3, [fp, #-8]
    98a4:	ldr	r3, [r3]
    98a8:	ldr	r3, [r3, #12]
    98ac:	mov	r1, r3
    98b0:	mov	r0, r2
    98b4:	bl	0 <coda_type_vsf_integer_set_unit>
    98b8:	mov	r3, r0
    98bc:	mov	r0, r3
    98c0:	sub	sp, fp, #4
    98c4:	ldr	fp, [sp]
    98c8:	add	sp, sp, #4
    98cc:	pop	{pc}		; (ldr pc, [sp], #4)

000098d0 <cd_vsf_integer_finalise>:
    98d0:	str	fp, [sp, #-8]!
    98d4:	str	lr, [sp, #4]
    98d8:	add	fp, sp, #4
    98dc:	sub	sp, sp, #8
    98e0:	str	r0, [fp, #-8]
    98e4:	ldr	r3, [fp, #-8]
    98e8:	ldr	r3, [r3]
    98ec:	ldr	r3, [r3, #8]
    98f0:	mov	r0, r3
    98f4:	bl	0 <coda_type_vsf_integer_validate>
    98f8:	mov	r3, r0
    98fc:	mov	r0, r3
    9900:	sub	sp, fp, #4
    9904:	ldr	fp, [sp]
    9908:	add	sp, sp, #4
    990c:	pop	{pc}		; (ldr pc, [sp], #4)

00009910 <cd_vsf_integer_init>:
    9910:	str	r4, [sp, #-12]!
    9914:	str	fp, [sp, #4]
    9918:	str	lr, [sp, #8]
    991c:	add	fp, sp, #8
    9920:	sub	sp, sp, #12
    9924:	str	r0, [fp, #-16]
    9928:	str	r1, [fp, #-20]	; 0xffffffec
    992c:	ldr	r1, [fp, #-20]	; 0xffffffec
    9930:	ldr	r0, [fp, #-16]
    9934:	bl	117c <handle_format_attribute_for_type>
    9938:	mov	r3, r0
    993c:	cmp	r3, #0
    9940:	beq	994c <cd_vsf_integer_init+0x3c>
    9944:	mvn	r3, #0
    9948:	b	9a50 <cd_vsf_integer_init+0x140>
    994c:	ldr	r3, [fp, #-16]
    9950:	ldr	r2, [r3]
    9954:	movw	r3, #0
    9958:	movt	r3, #0
    995c:	str	r3, [r2, #40]	; 0x28
    9960:	ldr	r3, [fp, #-16]
    9964:	ldr	r3, [r3]
    9968:	ldr	r2, [r3, #44]	; 0x2c
    996c:	ldr	r3, [fp, #-16]
    9970:	ldr	r4, [r3]
    9974:	mov	r0, r2
    9978:	bl	0 <coda_type_vsf_integer_new>
    997c:	mov	r3, r0
    9980:	str	r3, [r4, #8]
    9984:	ldr	r3, [fp, #-16]
    9988:	ldr	r3, [r3]
    998c:	ldr	r3, [r3, #8]
    9990:	cmp	r3, #0
    9994:	bne	99a0 <cd_vsf_integer_init+0x90>
    9998:	mvn	r3, #0
    999c:	b	9a50 <cd_vsf_integer_init+0x140>
    99a0:	ldr	r1, [fp, #-20]	; 0xffffffec
    99a4:	ldr	r0, [fp, #-16]
    99a8:	bl	104c <handle_name_attribute_for_type>
    99ac:	mov	r3, r0
    99b0:	cmp	r3, #0
    99b4:	beq	99c0 <cd_vsf_integer_init+0xb0>
    99b8:	mvn	r3, #0
    99bc:	b	9a50 <cd_vsf_integer_init+0x140>
    99c0:	ldr	r3, [fp, #-16]
    99c4:	ldr	r0, [r3]
    99c8:	movw	r3, #0
    99cc:	movt	r3, #0
    99d0:	movw	r2, #0
    99d4:	movt	r2, #0
    99d8:	mov	r1, #11
    99dc:	bl	1530 <register_sub_element>
    99e0:	ldr	r3, [fp, #-16]
    99e4:	ldr	r3, [r3]
    99e8:	movw	r1, #0
    99ec:	movt	r1, #0
    99f0:	mov	r0, r3
    99f4:	bl	15c0 <register_type_elements>
    99f8:	ldr	r3, [fp, #-16]
    99fc:	ldr	r0, [r3]
    9a00:	movw	r3, #0
    9a04:	movt	r3, #0
    9a08:	movw	r2, #0
    9a0c:	movt	r2, #0
    9a10:	mov	r1, #36	; 0x24
    9a14:	bl	1530 <register_sub_element>
    9a18:	ldr	r3, [fp, #-16]
    9a1c:	ldr	r0, [r3]
    9a20:	movw	r3, #0
    9a24:	movt	r3, #0
    9a28:	movw	r2, #0
    9a2c:	movt	r2, #0
    9a30:	mov	r1, #41	; 0x29
    9a34:	bl	1530 <register_sub_element>
    9a38:	ldr	r3, [fp, #-16]
    9a3c:	ldr	r2, [r3]
    9a40:	movw	r3, #0
    9a44:	movt	r3, #0
    9a48:	str	r3, [r2, #36]	; 0x24
    9a4c:	mov	r3, #0
    9a50:	mov	r0, r3
    9a54:	sub	sp, fp, #8
    9a58:	ldr	r4, [sp]
    9a5c:	ldr	fp, [sp, #4]
    9a60:	add	sp, sp, #8
    9a64:	pop	{pc}		; (ldr pc, [sp], #4)

00009a68 <whitespace_handler>:
    9a68:	str	fp, [sp, #-8]!
    9a6c:	str	lr, [sp, #4]
    9a70:	add	fp, sp, #4
    9a74:	sub	sp, sp, #24
    9a78:	str	r0, [fp, #-16]
    9a7c:	str	r1, [fp, #-20]	; 0xffffffec
    9a80:	str	r2, [fp, #-24]	; 0xffffffe8
    9a84:	ldr	r3, [fp, #-16]
    9a88:	str	r3, [fp, #-8]
    9a8c:	ldr	r3, [fp, #-8]
    9a90:	ldr	r3, [r3, #48]	; 0x30
    9a94:	cmp	r3, #0
    9a98:	bgt	9ad4 <whitespace_handler+0x6c>
    9a9c:	ldr	r1, [fp, #-24]	; 0xffffffe8
    9aa0:	ldr	r0, [fp, #-20]	; 0xffffffec
    9aa4:	bl	d4 <is_whitespace>
    9aa8:	mov	r3, r0
    9aac:	cmp	r3, #0
    9ab0:	bne	9ad8 <whitespace_handler+0x70>
    9ab4:	movw	r1, #0
    9ab8:	movt	r1, #0
    9abc:	movw	r0, #65136	; 0xfe70
    9ac0:	movt	r0, #65535	; 0xffff
    9ac4:	bl	0 <coda_set_error>
    9ac8:	ldr	r0, [fp, #-8]
    9acc:	bl	14e8 <abort_parser>
    9ad0:	b	9ad8 <whitespace_handler+0x70>
    9ad4:	nop	{0}
    9ad8:	sub	sp, fp, #4
    9adc:	ldr	fp, [sp]
    9ae0:	add	sp, sp, #4
    9ae4:	pop	{pc}		; (ldr pc, [sp], #4)

00009ae8 <string_handler>:
    9ae8:	str	r4, [sp, #-12]!
    9aec:	str	fp, [sp, #4]
    9af0:	str	lr, [sp, #8]
    9af4:	add	fp, sp, #8
    9af8:	sub	sp, sp, #44	; 0x2c
    9afc:	str	r0, [fp, #-32]	; 0xffffffe0
    9b00:	str	r1, [fp, #-36]	; 0xffffffdc
    9b04:	str	r2, [fp, #-40]	; 0xffffffd8
    9b08:	ldr	r3, [fp, #-32]	; 0xffffffe0
    9b0c:	str	r3, [fp, #-16]
    9b10:	ldr	r3, [fp, #-16]
    9b14:	ldr	r3, [r3, #48]	; 0x30
    9b18:	cmp	r3, #0
    9b1c:	bgt	9ce0 <string_handler+0x1f8>
    9b20:	ldr	r3, [fp, #-16]
    9b24:	ldr	r3, [r3]
    9b28:	ldr	r3, [r3, #12]
    9b2c:	cmp	r3, #0
    9b30:	bne	9bdc <string_handler+0xf4>
    9b34:	ldr	r3, [fp, #-40]	; 0xffffffd8
    9b38:	add	r3, r3, #1
    9b3c:	mov	r2, r3
    9b40:	ldr	r3, [fp, #-16]
    9b44:	ldr	r4, [r3]
    9b48:	mov	r0, r2
    9b4c:	bl	0 <malloc>
    9b50:	mov	r3, r0
    9b54:	str	r3, [r4, #12]
    9b58:	ldr	r3, [fp, #-16]
    9b5c:	ldr	r3, [r3]
    9b60:	ldr	r3, [r3, #12]
    9b64:	cmp	r3, #0
    9b68:	bne	9ba0 <string_handler+0xb8>
    9b6c:	ldr	r3, [fp, #-40]	; 0xffffffd8
    9b70:	add	r2, r3, #1
    9b74:	movw	r3, #3841	; 0xf01
    9b78:	str	r3, [sp]
    9b7c:	movw	r3, #0
    9b80:	movt	r3, #0
    9b84:	movw	r1, #0
    9b88:	movt	r1, #0
    9b8c:	mvn	r0, #0
    9b90:	bl	0 <coda_set_error>
    9b94:	ldr	r0, [fp, #-16]
    9b98:	bl	14e8 <abort_parser>
    9b9c:	b	9ce4 <string_handler+0x1fc>
    9ba0:	ldr	r3, [fp, #-16]
    9ba4:	ldr	r3, [r3]
    9ba8:	ldr	r3, [r3, #12]
    9bac:	ldr	r2, [fp, #-40]	; 0xffffffd8
    9bb0:	ldr	r1, [fp, #-36]	; 0xffffffdc
    9bb4:	mov	r0, r3
    9bb8:	bl	0 <memcpy>
    9bbc:	ldr	r3, [fp, #-16]
    9bc0:	ldr	r3, [r3]
    9bc4:	ldr	r2, [r3, #12]
    9bc8:	ldr	r3, [fp, #-40]	; 0xffffffd8
    9bcc:	add	r3, r2, r3
    9bd0:	mov	r2, #0
    9bd4:	strb	r2, [r3]
    9bd8:	b	9ce4 <string_handler+0x1fc>
    9bdc:	ldr	r3, [fp, #-16]
    9be0:	ldr	r3, [r3]
    9be4:	ldr	r3, [r3, #12]
    9be8:	mov	r0, r3
    9bec:	bl	0 <strlen>
    9bf0:	mov	r3, r0
    9bf4:	str	r3, [fp, #-20]	; 0xffffffec
    9bf8:	ldr	r2, [fp, #-20]	; 0xffffffec
    9bfc:	ldr	r3, [fp, #-40]	; 0xffffffd8
    9c00:	add	r3, r2, r3
    9c04:	add	r3, r3, #1
    9c08:	mov	r0, r3
    9c0c:	bl	0 <malloc>
    9c10:	mov	r3, r0
    9c14:	str	r3, [fp, #-24]	; 0xffffffe8
    9c18:	ldr	r3, [fp, #-24]	; 0xffffffe8
    9c1c:	cmp	r3, #0
    9c20:	bne	9c60 <string_handler+0x178>
    9c24:	ldr	r2, [fp, #-20]	; 0xffffffec
    9c28:	ldr	r3, [fp, #-40]	; 0xffffffd8
    9c2c:	add	r3, r2, r3
    9c30:	add	r2, r3, #1
    9c34:	movw	r3, #3857	; 0xf11
    9c38:	str	r3, [sp]
    9c3c:	movw	r3, #0
    9c40:	movt	r3, #0
    9c44:	movw	r1, #0
    9c48:	movt	r1, #0
    9c4c:	mvn	r0, #0
    9c50:	bl	0 <coda_set_error>
    9c54:	ldr	r0, [fp, #-16]
    9c58:	bl	14e8 <abort_parser>
    9c5c:	b	9ce4 <string_handler+0x1fc>
    9c60:	ldr	r3, [fp, #-16]
    9c64:	ldr	r3, [r3]
    9c68:	ldr	r3, [r3, #12]
    9c6c:	ldr	r2, [fp, #-20]	; 0xffffffec
    9c70:	mov	r1, r3
    9c74:	ldr	r0, [fp, #-24]	; 0xffffffe8
    9c78:	bl	0 <memcpy>
    9c7c:	ldr	r3, [fp, #-20]	; 0xffffffec
    9c80:	ldr	r2, [fp, #-24]	; 0xffffffe8
    9c84:	add	r3, r2, r3
    9c88:	ldr	r2, [fp, #-40]	; 0xffffffd8
    9c8c:	ldr	r1, [fp, #-36]	; 0xffffffdc
    9c90:	mov	r0, r3
    9c94:	bl	0 <memcpy>
    9c98:	ldr	r2, [fp, #-20]	; 0xffffffec
    9c9c:	ldr	r3, [fp, #-40]	; 0xffffffd8
    9ca0:	add	r3, r2, r3
    9ca4:	mov	r2, r3
    9ca8:	ldr	r3, [fp, #-24]	; 0xffffffe8
    9cac:	add	r3, r3, r2
    9cb0:	mov	r2, #0
    9cb4:	strb	r2, [r3]
    9cb8:	ldr	r3, [fp, #-16]
    9cbc:	ldr	r3, [r3]
    9cc0:	ldr	r3, [r3, #12]
    9cc4:	mov	r0, r3
    9cc8:	bl	0 <free>
    9ccc:	ldr	r3, [fp, #-16]
    9cd0:	ldr	r3, [r3]
    9cd4:	ldr	r2, [fp, #-24]	; 0xffffffe8
    9cd8:	str	r2, [r3, #12]
    9cdc:	b	9ce4 <string_handler+0x1fc>
    9ce0:	nop	{0}
    9ce4:	sub	sp, fp, #8
    9ce8:	ldr	r4, [sp]
    9cec:	ldr	fp, [sp, #4]
    9cf0:	add	sp, sp, #8
    9cf4:	pop	{pc}		; (ldr pc, [sp], #4)

00009cf8 <push_node>:
    9cf8:	str	fp, [sp, #-8]!
    9cfc:	str	lr, [sp, #4]
    9d00:	add	fp, sp, #4
    9d04:	sub	sp, sp, #24
    9d08:	str	r0, [fp, #-16]
    9d0c:	str	r1, [fp, #-20]	; 0xffffffec
    9d10:	str	r2, [fp, #-24]	; 0xffffffe8
    9d14:	mov	r0, #400	; 0x190
    9d18:	bl	0 <malloc>
    9d1c:	mov	r3, r0
    9d20:	str	r3, [fp, #-8]
    9d24:	ldr	r3, [fp, #-8]
    9d28:	cmp	r3, #0
    9d2c:	bne	9d50 <push_node+0x58>
    9d30:	movw	r3, #0
    9d34:	movt	r3, #0
    9d38:	movw	r2, #3877	; 0xf25
    9d3c:	movw	r1, #0
    9d40:	movt	r1, #0
    9d44:	movw	r0, #0
    9d48:	movt	r0, #0
    9d4c:	bl	0 <__assert_fail>
    9d50:	ldr	r3, [fp, #-8]
    9d54:	ldr	r2, [fp, #-20]	; 0xffffffec
    9d58:	str	r2, [r3]
    9d5c:	ldr	r3, [fp, #-8]
    9d60:	mov	r2, #0
    9d64:	str	r2, [r3, #4]
    9d68:	ldr	r3, [fp, #-8]
    9d6c:	mov	r2, #0
    9d70:	str	r2, [r3, #8]
    9d74:	ldr	r3, [fp, #-8]
    9d78:	mov	r2, #0
    9d7c:	str	r2, [r3, #12]
    9d80:	ldr	r1, [fp, #-8]
    9d84:	mvn	r2, #0
    9d88:	mvn	r3, #0
    9d8c:	strd	r2, [r1, #16]
    9d90:	bl	0 <coda_NaN>
    9d94:	vmov.f64	d7, d0
    9d98:	ldr	r3, [fp, #-8]
    9d9c:	vstr	d7, [r3, #24]
    9da0:	ldr	r3, [fp, #-8]
    9da4:	mov	r2, #0
    9da8:	str	r2, [r3, #32]
    9dac:	ldr	r3, [fp, #-8]
    9db0:	mov	r2, #0
    9db4:	str	r2, [r3, #36]	; 0x24
    9db8:	ldr	r3, [fp, #-8]
    9dbc:	mov	r2, #0
    9dc0:	str	r2, [r3, #40]	; 0x28
    9dc4:	ldr	r3, [fp, #-8]
    9dc8:	mov	r2, #0
    9dcc:	str	r2, [r3, #48]	; 0x30
    9dd0:	ldr	r3, [fp, #-8]
    9dd4:	add	r3, r3, #52	; 0x34
    9dd8:	mov	r2, #172	; 0xac
    9ddc:	mov	r1, #0
    9de0:	mov	r0, r3
    9de4:	bl	0 <memset>
    9de8:	ldr	r3, [fp, #-8]
    9dec:	add	r3, r3, #224	; 0xe0
    9df0:	mov	r2, #172	; 0xac
    9df4:	mov	r1, #0
    9df8:	mov	r0, r3
    9dfc:	bl	0 <memset>
    9e00:	ldr	r3, [fp, #-16]
    9e04:	ldr	r2, [r3]
    9e08:	ldr	r3, [fp, #-8]
    9e0c:	str	r2, [r3, #396]	; 0x18c
    9e10:	ldr	r3, [fp, #-16]
    9e14:	ldr	r2, [fp, #-8]
    9e18:	str	r2, [r3]
    9e1c:	ldr	r3, [fp, #-8]
    9e20:	ldr	r3, [r3, #396]	; 0x18c
    9e24:	cmp	r3, #0
    9e28:	beq	9e8c <push_node+0x194>
    9e2c:	ldr	r3, [fp, #-8]
    9e30:	ldr	r2, [r3, #396]	; 0x18c
    9e34:	ldr	r3, [fp, #-20]	; 0xffffffec
    9e38:	add	r3, r3, #12
    9e3c:	lsl	r3, r3, #2
    9e40:	add	r3, r2, r3
    9e44:	ldr	r3, [r3, #4]
    9e48:	cmp	r3, #0
    9e4c:	beq	9e8c <push_node+0x194>
    9e50:	ldr	r3, [fp, #-8]
    9e54:	ldr	r2, [r3, #396]	; 0x18c
    9e58:	ldr	r3, [fp, #-20]	; 0xffffffec
    9e5c:	add	r3, r3, #12
    9e60:	lsl	r3, r3, #2
    9e64:	add	r3, r2, r3
    9e68:	ldr	r3, [r3, #4]
    9e6c:	ldr	r1, [fp, #-24]	; 0xffffffe8
    9e70:	ldr	r0, [fp, #-16]
    9e74:	blx	r3
    9e78:	mov	r3, r0
    9e7c:	cmp	r3, #0
    9e80:	beq	9e8c <push_node+0x194>
    9e84:	mvn	r3, #0
    9e88:	b	9ed4 <push_node+0x1dc>
    9e8c:	ldr	r3, [fp, #-8]
    9e90:	ldr	r3, [r3, #32]
    9e94:	cmp	r3, #0
    9e98:	beq	9eb8 <push_node+0x1c0>
    9e9c:	ldr	r3, [fp, #-16]
    9ea0:	ldr	r3, [r3, #4]
    9ea4:	movw	r1, #0
    9ea8:	movt	r1, #0
    9eac:	mov	r0, r3
    9eb0:	bl	0 <coda_XML_SetCharacterDataHandler>
    9eb4:	b	9ed0 <push_node+0x1d8>
    9eb8:	ldr	r3, [fp, #-16]
    9ebc:	ldr	r3, [r3, #4]
    9ec0:	movw	r1, #0
    9ec4:	movt	r1, #0
    9ec8:	mov	r0, r3
    9ecc:	bl	0 <coda_XML_SetCharacterDataHandler>
    9ed0:	mov	r3, #0
    9ed4:	mov	r0, r3
    9ed8:	sub	sp, fp, #4
    9edc:	ldr	fp, [sp]
    9ee0:	add	sp, sp, #4
    9ee4:	pop	{pc}		; (ldr pc, [sp], #4)

00009ee8 <pop_node>:
    9ee8:	str	fp, [sp, #-8]!
    9eec:	str	lr, [sp, #4]
    9ef0:	add	fp, sp, #4
    9ef4:	sub	sp, sp, #16
    9ef8:	str	r0, [fp, #-16]
    9efc:	ldr	r3, [fp, #-16]
    9f00:	ldr	r3, [r3]
    9f04:	str	r3, [fp, #-8]
    9f08:	ldr	r3, [fp, #-8]
    9f0c:	cmp	r3, #0
    9f10:	bne	9f34 <pop_node+0x4c>
    9f14:	movw	r3, #0
    9f18:	movt	r3, #0
    9f1c:	movw	r2, #3917	; 0xf4d
    9f20:	movw	r1, #0
    9f24:	movt	r1, #0
    9f28:	movw	r0, #0
    9f2c:	movt	r0, #0
    9f30:	bl	0 <__assert_fail>
    9f34:	ldr	r3, [fp, #-8]
    9f38:	ldr	r3, [r3, #36]	; 0x24
    9f3c:	cmp	r3, #0
    9f40:	beq	9f68 <pop_node+0x80>
    9f44:	ldr	r3, [fp, #-8]
    9f48:	ldr	r3, [r3, #36]	; 0x24
    9f4c:	ldr	r0, [fp, #-16]
    9f50:	blx	r3
    9f54:	mov	r3, r0
    9f58:	cmp	r3, #0
    9f5c:	beq	9f68 <pop_node+0x80>
    9f60:	mvn	r3, #0
    9f64:	b	a0b8 <pop_node+0x1d0>
    9f68:	ldr	r3, [fp, #-8]
    9f6c:	ldr	r3, [r3, #396]	; 0x18c
    9f70:	cmp	r3, #0
    9f74:	beq	9fcc <pop_node+0xe4>
    9f78:	ldr	r3, [fp, #-8]
    9f7c:	ldr	r3, [r3, #396]	; 0x18c
    9f80:	ldr	r2, [fp, #-8]
    9f84:	ldr	r2, [r2]
    9f88:	add	r2, r2, #56	; 0x38
    9f8c:	ldr	r3, [r3, r2, lsl #2]
    9f90:	cmp	r3, #0
    9f94:	beq	9fcc <pop_node+0xe4>
    9f98:	ldr	r3, [fp, #-8]
    9f9c:	ldr	r3, [r3, #396]	; 0x18c
    9fa0:	ldr	r2, [fp, #-8]
    9fa4:	ldr	r2, [r2]
    9fa8:	add	r2, r2, #56	; 0x38
    9fac:	ldr	r3, [r3, r2, lsl #2]
    9fb0:	ldr	r0, [fp, #-16]
    9fb4:	blx	r3
    9fb8:	mov	r3, r0
    9fbc:	cmp	r3, #0
    9fc0:	beq	9fcc <pop_node+0xe4>
    9fc4:	mvn	r3, #0
    9fc8:	b	a0b8 <pop_node+0x1d0>
    9fcc:	ldr	r3, [fp, #-8]
    9fd0:	ldr	r3, [r3, #8]
    9fd4:	cmp	r3, #0
    9fd8:	beq	a024 <pop_node+0x13c>
    9fdc:	ldr	r3, [fp, #-8]
    9fe0:	ldr	r3, [r3, #40]	; 0x28
    9fe4:	cmp	r3, #0
    9fe8:	bne	a00c <pop_node+0x124>
    9fec:	movw	r3, #0
    9ff0:	movt	r3, #0
    9ff4:	movw	r2, #3937	; 0xf61
    9ff8:	movw	r1, #0
    9ffc:	movt	r1, #0
    a000:	movw	r0, #0
    a004:	movt	r0, #0
    a008:	bl	0 <__assert_fail>
    a00c:	ldr	r3, [fp, #-8]
    a010:	ldr	r3, [r3, #40]	; 0x28
    a014:	ldr	r2, [fp, #-8]
    a018:	ldr	r2, [r2, #8]
    a01c:	mov	r0, r2
    a020:	blx	r3
    a024:	ldr	r3, [fp, #-8]
    a028:	ldr	r3, [r3, #12]
    a02c:	cmp	r3, #0
    a030:	beq	a044 <pop_node+0x15c>
    a034:	ldr	r3, [fp, #-8]
    a038:	ldr	r3, [r3, #12]
    a03c:	mov	r0, r3
    a040:	bl	0 <free>
    a044:	ldr	r3, [fp, #-8]
    a048:	ldr	r2, [r3, #396]	; 0x18c
    a04c:	ldr	r3, [fp, #-16]
    a050:	str	r2, [r3]
    a054:	ldr	r0, [fp, #-8]
    a058:	bl	0 <free>
    a05c:	ldr	r3, [fp, #-16]
    a060:	ldr	r3, [r3]
    a064:	cmp	r3, #0
    a068:	beq	a09c <pop_node+0x1b4>
    a06c:	ldr	r3, [fp, #-16]
    a070:	ldr	r3, [r3]
    a074:	ldr	r3, [r3, #32]
    a078:	cmp	r3, #0
    a07c:	beq	a09c <pop_node+0x1b4>
    a080:	ldr	r3, [fp, #-16]
    a084:	ldr	r3, [r3, #4]
    a088:	movw	r1, #0
    a08c:	movt	r1, #0
    a090:	mov	r0, r3
    a094:	bl	0 <coda_XML_SetCharacterDataHandler>
    a098:	b	a0b4 <pop_node+0x1cc>
    a09c:	ldr	r3, [fp, #-16]
    a0a0:	ldr	r3, [r3, #4]
    a0a4:	movw	r1, #0
    a0a8:	movt	r1, #0
    a0ac:	mov	r0, r3
    a0b0:	bl	0 <coda_XML_SetCharacterDataHandler>
    a0b4:	mov	r3, #0
    a0b8:	mov	r0, r3
    a0bc:	sub	sp, fp, #4
    a0c0:	ldr	fp, [sp]
    a0c4:	add	sp, sp, #4
    a0c8:	pop	{pc}		; (ldr pc, [sp], #4)

0000a0cc <start_element_handler>:
    a0cc:	strd	r4, [sp, #-16]!
    a0d0:	str	fp, [sp, #8]
    a0d4:	str	lr, [sp, #12]
    a0d8:	add	fp, sp, #12
    a0dc:	sub	sp, sp, #32
    a0e0:	str	r0, [fp, #-24]	; 0xffffffe8
    a0e4:	str	r1, [fp, #-28]	; 0xffffffe4
    a0e8:	str	r2, [fp, #-32]	; 0xffffffe0
    a0ec:	ldr	r3, [fp, #-24]	; 0xffffffe8
    a0f0:	str	r3, [fp, #-16]
    a0f4:	ldr	r3, [fp, #-16]
    a0f8:	ldr	r3, [r3, #48]	; 0x30
    a0fc:	cmp	r3, #0
    a100:	ble	a11c <start_element_handler+0x50>
    a104:	ldr	r3, [fp, #-16]
    a108:	ldr	r3, [r3, #48]	; 0x30
    a10c:	add	r2, r3, #1
    a110:	ldr	r3, [fp, #-16]
    a114:	str	r2, [r3, #48]	; 0x30
    a118:	b	a2bc <start_element_handler+0x1f0>
    a11c:	ldr	r3, [fp, #-16]
    a120:	ldr	r3, [r3, #8]
    a124:	ldr	r1, [fp, #-28]	; 0xffffffe4
    a128:	mov	r0, r3
    a12c:	bl	0 <coda_hashtable_get_index_from_name>
    a130:	str	r0, [fp, #-20]	; 0xffffffec
    a134:	ldr	r3, [fp, #-20]	; 0xffffffec
    a138:	cmp	r3, #0
    a13c:	bge	a170 <start_element_handler+0xa4>
    a140:	mov	r2, #44	; 0x2c
    a144:	movw	r1, #0
    a148:	movt	r1, #0
    a14c:	ldr	r0, [fp, #-28]	; 0xffffffe4
    a150:	bl	0 <strncmp>
    a154:	mov	r3, r0
    a158:	cmp	r3, #0
    a15c:	beq	a170 <start_element_handler+0xa4>
    a160:	ldr	r3, [fp, #-16]
    a164:	mov	r2, #1
    a168:	str	r2, [r3, #48]	; 0x30
    a16c:	b	a2bc <start_element_handler+0x1f0>
    a170:	ldr	r3, [fp, #-20]	; 0xffffffec
    a174:	cmp	r3, #0
    a178:	blt	a1a0 <start_element_handler+0xd4>
    a17c:	ldr	r3, [fp, #-16]
    a180:	ldr	r2, [r3]
    a184:	ldr	r3, [fp, #-20]	; 0xffffffec
    a188:	add	r3, r3, #12
    a18c:	lsl	r3, r3, #2
    a190:	add	r3, r2, r3
    a194:	ldr	r3, [r3, #4]
    a198:	cmp	r3, #0
    a19c:	bne	a298 <start_element_handler+0x1cc>
    a1a0:	ldr	r3, [fp, #-16]
    a1a4:	ldr	r3, [r3]
    a1a8:	ldr	r3, [r3]
    a1ac:	cmn	r3, #1
    a1b0:	bne	a1dc <start_element_handler+0x110>
    a1b4:	ldr	r0, [fp, #-28]	; 0xffffffe4
    a1b8:	bl	0 <coda_element_name_from_xml_name>
    a1bc:	mov	r3, r0
    a1c0:	mov	r2, r3
    a1c4:	movw	r1, #0
    a1c8:	movt	r1, #0
    a1cc:	movw	r0, #65136	; 0xfe70
    a1d0:	movt	r0, #65535	; 0xffff
    a1d4:	bl	0 <coda_set_error>
    a1d8:	b	a28c <start_element_handler+0x1c0>
    a1dc:	ldr	r3, [fp, #-16]
    a1e0:	ldr	r3, [r3]
    a1e4:	ldr	r3, [r3, #48]	; 0x30
    a1e8:	cmp	r3, #0
    a1ec:	beq	a250 <start_element_handler+0x184>
    a1f0:	ldr	r0, [fp, #-28]	; 0xffffffe4
    a1f4:	bl	0 <coda_element_name_from_xml_name>
    a1f8:	mov	r4, r0
    a1fc:	ldr	r3, [fp, #-16]
    a200:	ldr	r3, [r3]
    a204:	ldr	r3, [r3]
    a208:	mov	r0, r3
    a20c:	bl	0 <xml_element_name>
    a210:	mov	r5, r0
    a214:	ldr	r3, [fp, #-16]
    a218:	ldr	r3, [r3]
    a21c:	ldr	r3, [r3, #44]	; 0x2c
    a220:	mov	r0, r3
    a224:	bl	0 <coda_type_get_format_name>
    a228:	mov	r3, r0
    a22c:	str	r3, [sp]
    a230:	mov	r3, r5
    a234:	mov	r2, r4
    a238:	movw	r1, #0
    a23c:	movt	r1, #0
    a240:	movw	r0, #65136	; 0xfe70
    a244:	movt	r0, #65535	; 0xffff
    a248:	bl	0 <coda_set_error>
    a24c:	b	a28c <start_element_handler+0x1c0>
    a250:	ldr	r0, [fp, #-28]	; 0xffffffe4
    a254:	bl	0 <coda_element_name_from_xml_name>
    a258:	mov	r4, r0
    a25c:	ldr	r3, [fp, #-16]
    a260:	ldr	r3, [r3]
    a264:	ldr	r3, [r3]
    a268:	mov	r0, r3
    a26c:	bl	0 <xml_element_name>
    a270:	mov	r3, r0
    a274:	mov	r2, r4
    a278:	movw	r1, #0
    a27c:	movt	r1, #0
    a280:	movw	r0, #65136	; 0xfe70
    a284:	movt	r0, #65535	; 0xffff
    a288:	bl	0 <coda_set_error>
    a28c:	ldr	r0, [fp, #-16]
    a290:	bl	14e8 <abort_parser>
    a294:	b	a2bc <start_element_handler+0x1f0>
    a298:	ldr	r2, [fp, #-32]	; 0xffffffe0
    a29c:	ldr	r1, [fp, #-20]	; 0xffffffec
    a2a0:	ldr	r0, [fp, #-16]
    a2a4:	bl	9cf8 <push_node>
    a2a8:	mov	r3, r0
    a2ac:	cmp	r3, #0
    a2b0:	beq	a2bc <start_element_handler+0x1f0>
    a2b4:	ldr	r0, [fp, #-16]
    a2b8:	bl	14e8 <abort_parser>
    a2bc:	sub	sp, fp, #12
    a2c0:	ldrd	r4, [sp]
    a2c4:	ldr	fp, [sp, #8]
    a2c8:	add	sp, sp, #12
    a2cc:	pop	{pc}		; (ldr pc, [sp], #4)

0000a2d0 <end_element_handler>:
    a2d0:	str	fp, [sp, #-8]!
    a2d4:	str	lr, [sp, #4]
    a2d8:	add	fp, sp, #4
    a2dc:	sub	sp, sp, #16
    a2e0:	str	r0, [fp, #-16]
    a2e4:	str	r1, [fp, #-20]	; 0xffffffec
    a2e8:	ldr	r3, [fp, #-16]
    a2ec:	str	r3, [fp, #-8]
    a2f0:	ldr	r3, [fp, #-8]
    a2f4:	ldr	r3, [r3, #36]	; 0x24
    a2f8:	cmp	r3, #0
    a2fc:	bne	a348 <end_element_handler+0x78>
    a300:	ldr	r3, [fp, #-8]
    a304:	ldr	r3, [r3, #48]	; 0x30
    a308:	cmp	r3, #0
    a30c:	ble	a328 <end_element_handler+0x58>
    a310:	ldr	r3, [fp, #-8]
    a314:	ldr	r3, [r3, #48]	; 0x30
    a318:	sub	r2, r3, #1
    a31c:	ldr	r3, [fp, #-8]
    a320:	str	r2, [r3, #48]	; 0x30
    a324:	b	a34c <end_element_handler+0x7c>
    a328:	ldr	r0, [fp, #-8]
    a32c:	bl	9ee8 <pop_node>
    a330:	mov	r3, r0
    a334:	cmp	r3, #0
    a338:	beq	a34c <end_element_handler+0x7c>
    a33c:	ldr	r0, [fp, #-8]
    a340:	bl	14e8 <abort_parser>
    a344:	b	a34c <end_element_handler+0x7c>
    a348:	nop	{0}
    a34c:	sub	sp, fp, #4
    a350:	ldr	fp, [sp]
    a354:	add	sp, sp, #4
    a358:	pop	{pc}		; (ldr pc, [sp], #4)

0000a35c <parser_info_init>:
    a35c:	push	{fp}		; (str fp, [sp, #-4]!)
    a360:	add	fp, sp, #0
    a364:	sub	sp, sp, #12
    a368:	str	r0, [fp, #-8]
    a36c:	ldr	r3, [fp, #-8]
    a370:	mov	r2, #0
    a374:	str	r2, [r3]
    a378:	ldr	r3, [fp, #-8]
    a37c:	mov	r2, #0
    a380:	str	r2, [r3, #4]
    a384:	ldr	r3, [fp, #-8]
    a388:	mov	r2, #0
    a38c:	str	r2, [r3, #8]
    a390:	ldr	r3, [fp, #-8]
    a394:	mov	r2, #0
    a398:	str	r2, [r3, #12]
    a39c:	ldr	r3, [fp, #-8]
    a3a0:	mov	r2, #0
    a3a4:	str	r2, [r3, #16]
    a3a8:	ldr	r3, [fp, #-8]
    a3ac:	mov	r2, #0
    a3b0:	str	r2, [r3, #24]
    a3b4:	ldr	r3, [fp, #-8]
    a3b8:	mov	r2, #0
    a3bc:	str	r2, [r3, #28]
    a3c0:	ldr	r3, [fp, #-8]
    a3c4:	mov	r2, #0
    a3c8:	str	r2, [r3, #32]
    a3cc:	ldr	r3, [fp, #-8]
    a3d0:	mov	r2, #0
    a3d4:	str	r2, [r3, #36]	; 0x24
    a3d8:	ldr	r3, [fp, #-8]
    a3dc:	mov	r2, #0
    a3e0:	str	r2, [r3, #40]	; 0x28
    a3e4:	ldr	r3, [fp, #-8]
    a3e8:	mov	r2, #1
    a3ec:	str	r2, [r3, #44]	; 0x2c
    a3f0:	ldr	r3, [fp, #-8]
    a3f4:	mov	r2, #0
    a3f8:	str	r2, [r3, #48]	; 0x30
    a3fc:	nop	{0}
    a400:	add	sp, fp, #0
    a404:	pop	{fp}		; (ldr fp, [sp], #4)
    a408:	bx	lr

0000a40c <parser_info_delete>:
    a40c:	str	fp, [sp, #-8]!
    a410:	str	lr, [sp, #4]
    a414:	add	fp, sp, #4
    a418:	sub	sp, sp, #16
    a41c:	str	r0, [fp, #-16]
    a420:	b	a4c0 <parser_info_delete+0xb4>
    a424:	ldr	r3, [fp, #-16]
    a428:	ldr	r3, [r3]
    a42c:	str	r3, [fp, #-8]
    a430:	ldr	r3, [fp, #-8]
    a434:	ldr	r3, [r3, #8]
    a438:	cmp	r3, #0
    a43c:	beq	a488 <parser_info_delete+0x7c>
    a440:	ldr	r3, [fp, #-8]
    a444:	ldr	r3, [r3, #40]	; 0x28
    a448:	cmp	r3, #0
    a44c:	bne	a470 <parser_info_delete+0x64>
    a450:	movw	r3, #0
    a454:	movt	r3, #0
    a458:	movw	r2, #4055	; 0xfd7
    a45c:	movw	r1, #0
    a460:	movt	r1, #0
    a464:	movw	r0, #0
    a468:	movt	r0, #0
    a46c:	bl	0 <__assert_fail>
    a470:	ldr	r3, [fp, #-8]
    a474:	ldr	r3, [r3, #40]	; 0x28
    a478:	ldr	r2, [fp, #-8]
    a47c:	ldr	r2, [r2, #8]
    a480:	mov	r0, r2
    a484:	blx	r3
    a488:	ldr	r3, [fp, #-8]
    a48c:	ldr	r3, [r3, #12]
    a490:	cmp	r3, #0
    a494:	beq	a4a8 <parser_info_delete+0x9c>
    a498:	ldr	r3, [fp, #-8]
    a49c:	ldr	r3, [r3, #12]
    a4a0:	mov	r0, r3
    a4a4:	bl	0 <free>
    a4a8:	ldr	r3, [fp, #-8]
    a4ac:	ldr	r2, [r3, #396]	; 0x18c
    a4b0:	ldr	r3, [fp, #-16]
    a4b4:	str	r2, [r3]
    a4b8:	ldr	r0, [fp, #-8]
    a4bc:	bl	0 <free>
    a4c0:	ldr	r3, [fp, #-16]
    a4c4:	ldr	r3, [r3]
    a4c8:	cmp	r3, #0
    a4cc:	bne	a424 <parser_info_delete+0x18>
    a4d0:	ldr	r3, [fp, #-16]
    a4d4:	ldr	r3, [r3, #4]
    a4d8:	cmp	r3, #0
    a4dc:	beq	a4f0 <parser_info_delete+0xe4>
    a4e0:	ldr	r3, [fp, #-16]
    a4e4:	ldr	r3, [r3, #4]
    a4e8:	mov	r0, r3
    a4ec:	bl	0 <coda_XML_ParserFree>
    a4f0:	ldr	r3, [fp, #-16]
    a4f4:	ldr	r3, [r3, #8]
    a4f8:	cmp	r3, #0
    a4fc:	beq	a510 <parser_info_delete+0x104>
    a500:	ldr	r3, [fp, #-16]
    a504:	ldr	r3, [r3, #8]
    a508:	mov	r0, r3
    a50c:	bl	0 <coda_hashtable_delete>
    a510:	ldr	r3, [fp, #-16]
    a514:	ldr	r3, [r3, #12]
    a518:	cmp	r3, #0
    a51c:	beq	a530 <parser_info_delete+0x124>
    a520:	ldr	r3, [fp, #-16]
    a524:	ldr	r3, [r3, #12]
    a528:	mov	r0, r3
    a52c:	bl	0 <free>
    a530:	ldr	r3, [fp, #-16]
    a534:	mov	r2, #0
    a538:	str	r2, [r3, #16]
    a53c:	nop	{0}
    a540:	sub	sp, fp, #4
    a544:	ldr	fp, [sp]
    a548:	add	sp, sp, #4
    a54c:	pop	{pc}		; (ldr pc, [sp], #4)

0000a550 <parse_entry>:
    a550:	str	r4, [sp, #-12]!
    a554:	str	fp, [sp, #4]
    a558:	str	lr, [sp, #8]
    a55c:	add	fp, sp, #8
    a560:	sub	sp, sp, #100	; 0x64
    a564:	str	r0, [fp, #-88]	; 0xffffffa8
    a568:	str	r1, [fp, #-92]	; 0xffffffa4
    a56c:	str	r2, [fp, #-96]	; 0xffffffa0
    a570:	str	r3, [fp, #-100]	; 0xffffff9c
    a574:	mov	r3, #0
    a578:	str	r3, [fp, #-16]
    a57c:	ldr	r3, [fp, #-92]	; 0xffffffa4
    a580:	cmp	r3, #1
    a584:	beq	a5e4 <parse_entry+0x94>
    a588:	ldr	r3, [fp, #-92]	; 0xffffffa4
    a58c:	cmp	r3, #0
    a590:	beq	a5a4 <parse_entry+0x54>
    a594:	ldr	r3, [fp, #-92]	; 0xffffffa4
    a598:	cmp	r3, #2
    a59c:	beq	a684 <parse_entry+0x134>
    a5a0:	b	a728 <parse_entry+0x1d8>
    a5a4:	movw	r0, #0
    a5a8:	movt	r0, #0
    a5ac:	bl	0 <strdup>
    a5b0:	mov	r3, r0
    a5b4:	str	r3, [fp, #-16]
    a5b8:	ldr	r3, [fp, #-16]
    a5bc:	cmp	r3, #0
    a5c0:	bne	a724 <parse_entry+0x1d4>
    a5c4:	movw	r3, #4097	; 0x1001
    a5c8:	movw	r2, #0
    a5cc:	movt	r2, #0
    a5d0:	movw	r1, #0
    a5d4:	movt	r1, #0
    a5d8:	mvn	r0, #0
    a5dc:	bl	0 <coda_set_error>
    a5e0:	b	a724 <parse_entry+0x1d4>
    a5e4:	ldr	r3, [fp, #-96]	; 0xffffffa0
    a5e8:	cmp	r3, #0
    a5ec:	bne	a610 <parse_entry+0xc0>
    a5f0:	movw	r3, #0
    a5f4:	movt	r3, #0
    a5f8:	movw	r2, #4101	; 0x1005
    a5fc:	movw	r1, #0
    a600:	movt	r1, #0
    a604:	movw	r0, #0
    a608:	movt	r0, #0
    a60c:	bl	0 <__assert_fail>
    a610:	ldr	r0, [fp, #-96]	; 0xffffffa0
    a614:	bl	0 <strlen>
    a618:	mov	r3, r0
    a61c:	add	r3, r3, #11
    a620:	mov	r0, r3
    a624:	bl	0 <malloc>
    a628:	mov	r3, r0
    a62c:	str	r3, [fp, #-16]
    a630:	ldr	r3, [fp, #-16]
    a634:	cmp	r3, #0
    a638:	bne	a66c <parse_entry+0x11c>
    a63c:	ldr	r0, [fp, #-96]	; 0xffffffa0
    a640:	bl	0 <strlen>
    a644:	mov	r3, r0
    a648:	add	r2, r3, #11
    a64c:	movw	r3, #4106	; 0x100a
    a650:	str	r3, [sp]
    a654:	movw	r3, #0
    a658:	movt	r3, #0
    a65c:	movw	r1, #0
    a660:	movt	r1, #0
    a664:	mvn	r0, #0
    a668:	bl	0 <coda_set_error>
    a66c:	ldr	r2, [fp, #-96]	; 0xffffffa0
    a670:	movw	r1, #0
    a674:	movt	r1, #0
    a678:	ldr	r0, [fp, #-16]
    a67c:	bl	0 <sprintf>
    a680:	b	a728 <parse_entry+0x1d8>
    a684:	ldr	r3, [fp, #-96]	; 0xffffffa0
    a688:	cmp	r3, #0
    a68c:	bne	a6b0 <parse_entry+0x160>
    a690:	movw	r3, #0
    a694:	movt	r3, #0
    a698:	movw	r2, #4111	; 0x100f
    a69c:	movw	r1, #0
    a6a0:	movt	r1, #0
    a6a4:	movw	r0, #0
    a6a8:	movt	r0, #0
    a6ac:	bl	0 <__assert_fail>
    a6b0:	ldr	r0, [fp, #-96]	; 0xffffffa0
    a6b4:	bl	0 <strlen>
    a6b8:	mov	r3, r0
    a6bc:	add	r3, r3, #14
    a6c0:	mov	r0, r3
    a6c4:	bl	0 <malloc>
    a6c8:	mov	r3, r0
    a6cc:	str	r3, [fp, #-16]
    a6d0:	ldr	r3, [fp, #-16]
    a6d4:	cmp	r3, #0
    a6d8:	bne	a70c <parse_entry+0x1bc>
    a6dc:	ldr	r0, [fp, #-96]	; 0xffffffa0
    a6e0:	bl	0 <strlen>
    a6e4:	mov	r3, r0
    a6e8:	add	r2, r3, #14
    a6ec:	movw	r3, #4116	; 0x1014
    a6f0:	str	r3, [sp]
    a6f4:	movw	r3, #0
    a6f8:	movt	r3, #0
    a6fc:	movw	r1, #0
    a700:	movt	r1, #0
    a704:	mvn	r0, #0
    a708:	bl	0 <coda_set_error>
    a70c:	ldr	r2, [fp, #-96]	; 0xffffffa0
    a710:	movw	r1, #0
    a714:	movt	r1, #0
    a718:	ldr	r0, [fp, #-16]
    a71c:	bl	0 <sprintf>
    a720:	b	a728 <parse_entry+0x1d8>
    a724:	nop	{0}
    a728:	ldr	r1, [fp, #-16]
    a72c:	ldr	r0, [fp, #-88]	; 0xffffffa8
    a730:	bl	0 <coda_za_get_entry_by_name>
    a734:	str	r0, [fp, #-24]	; 0xffffffe8
    a738:	ldr	r3, [fp, #-24]	; 0xffffffe8
    a73c:	cmp	r3, #0
    a740:	bne	a7f4 <parse_entry+0x2a4>
    a744:	ldr	r3, [fp, #-92]	; 0xffffffa4
    a748:	cmp	r3, #1
    a74c:	beq	a794 <parse_entry+0x244>
    a750:	ldr	r3, [fp, #-92]	; 0xffffffa4
    a754:	cmp	r3, #0
    a758:	beq	a76c <parse_entry+0x21c>
    a75c:	ldr	r3, [fp, #-92]	; 0xffffffa4
    a760:	cmp	r3, #2
    a764:	beq	a7bc <parse_entry+0x26c>
    a768:	b	a7e4 <parse_entry+0x294>
    a76c:	ldr	r0, [fp, #-88]	; 0xffffffa8
    a770:	bl	0 <coda_za_get_filename>
    a774:	mov	r3, r0
    a778:	mov	r2, r3
    a77c:	movw	r1, #0
    a780:	movt	r1, #0
    a784:	movw	r0, #65136	; 0xfe70
    a788:	movt	r0, #65535	; 0xffff
    a78c:	bl	0 <coda_set_error>
    a790:	b	a7e4 <parse_entry+0x294>
    a794:	ldr	r0, [fp, #-88]	; 0xffffffa8
    a798:	bl	0 <coda_za_get_filename>
    a79c:	mov	r2, r0
    a7a0:	ldr	r3, [fp, #-96]	; 0xffffffa0
    a7a4:	movw	r1, #0
    a7a8:	movt	r1, #0
    a7ac:	movw	r0, #65136	; 0xfe70
    a7b0:	movt	r0, #65535	; 0xffff
    a7b4:	bl	0 <coda_set_error>
    a7b8:	b	a7e4 <parse_entry+0x294>
    a7bc:	ldr	r0, [fp, #-88]	; 0xffffffa8
    a7c0:	bl	0 <coda_za_get_filename>
    a7c4:	mov	r2, r0
    a7c8:	ldr	r3, [fp, #-96]	; 0xffffffa0
    a7cc:	movw	r1, #0
    a7d0:	movt	r1, #0
    a7d4:	movw	r0, #65136	; 0xfe70
    a7d8:	movt	r0, #65535	; 0xffff
    a7dc:	bl	0 <coda_set_error>
    a7e0:	nop	{0}
    a7e4:	ldr	r0, [fp, #-16]
    a7e8:	bl	0 <free>
    a7ec:	mvn	r3, #0
    a7f0:	b	ac58 <parse_entry+0x708>
    a7f4:	ldr	r0, [fp, #-16]
    a7f8:	bl	0 <free>
    a7fc:	sub	r3, fp, #84	; 0x54
    a800:	mov	r0, r3
    a804:	bl	a35c <parser_info_init>
    a808:	ldr	r3, [fp, #-88]	; 0xffffffa8
    a80c:	str	r3, [fp, #-68]	; 0xffffffbc
    a810:	ldr	r3, [fp, #-96]	; 0xffffffa0
    a814:	str	r3, [fp, #-64]	; 0xffffffc0
    a818:	ldr	r3, [fp, #-100]	; 0xffffff9c
    a81c:	str	r3, [fp, #-60]	; 0xffffffc4
    a820:	ldr	r3, [fp, #4]
    a824:	str	r3, [fp, #-56]	; 0xffffffc8
    a828:	ldr	r0, [fp, #-24]	; 0xffffffe8
    a82c:	bl	0 <coda_za_get_entry_size>
    a830:	str	r0, [fp, #-28]	; 0xffffffe4
    a834:	ldr	r3, [fp, #-28]	; 0xffffffe4
    a838:	mov	r0, r3
    a83c:	bl	0 <malloc>
    a840:	mov	r3, r0
    a844:	str	r3, [fp, #-72]	; 0xffffffb8
    a848:	ldr	r3, [fp, #-72]	; 0xffffffb8
    a84c:	cmp	r3, #0
    a850:	bne	a88c <parse_entry+0x33c>
    a854:	movw	r3, #4156	; 0x103c
    a858:	str	r3, [sp]
    a85c:	movw	r3, #0
    a860:	movt	r3, #0
    a864:	ldr	r2, [fp, #-28]	; 0xffffffe4
    a868:	movw	r1, #0
    a86c:	movt	r1, #0
    a870:	mvn	r0, #0
    a874:	bl	0 <coda_set_error>
    a878:	sub	r3, fp, #84	; 0x54
    a87c:	mov	r0, r3
    a880:	bl	a40c <parser_info_delete>
    a884:	mvn	r3, #0
    a888:	b	ac58 <parse_entry+0x708>
    a88c:	ldr	r3, [fp, #-72]	; 0xffffffb8
    a890:	mov	r1, r3
    a894:	ldr	r0, [fp, #-24]	; 0xffffffe8
    a898:	bl	0 <coda_za_read_entry>
    a89c:	mov	r3, r0
    a8a0:	cmp	r3, #0
    a8a4:	beq	a8bc <parse_entry+0x36c>
    a8a8:	sub	r3, fp, #84	; 0x54
    a8ac:	mov	r0, r3
    a8b0:	bl	a40c <parser_info_delete>
    a8b4:	mvn	r3, #0
    a8b8:	b	ac58 <parse_entry+0x708>
    a8bc:	mov	r0, #1
    a8c0:	bl	0 <coda_hashtable_new>
    a8c4:	mov	r3, r0
    a8c8:	str	r3, [fp, #-76]	; 0xffffffb4
    a8cc:	ldr	r3, [fp, #-76]	; 0xffffffb4
    a8d0:	cmp	r3, #0
    a8d4:	bne	a908 <parse_entry+0x3b8>
    a8d8:	movw	r3, #4170	; 0x104a
    a8dc:	movw	r2, #0
    a8e0:	movt	r2, #0
    a8e4:	movw	r1, #0
    a8e8:	movt	r1, #0
    a8ec:	mvn	r0, #0
    a8f0:	bl	0 <coda_set_error>
    a8f4:	sub	r3, fp, #84	; 0x54
    a8f8:	mov	r0, r3
    a8fc:	bl	a40c <parser_info_delete>
    a900:	mvn	r3, #0
    a904:	b	ac58 <parse_entry+0x708>
    a908:	mov	r3, #0
    a90c:	str	r3, [fp, #-20]	; 0xffffffec
    a910:	b	a968 <parse_entry+0x418>
    a914:	ldr	r0, [fp, #-76]	; 0xffffffb4
    a918:	movw	r3, #0
    a91c:	movt	r3, #0
    a920:	ldr	r2, [fp, #-20]	; 0xffffffec
    a924:	ldr	r3, [r3, r2, lsl #2]
    a928:	mov	r1, r3
    a92c:	bl	0 <coda_hashtable_add_name>
    a930:	mov	r3, r0
    a934:	cmp	r3, #0
    a938:	beq	a95c <parse_entry+0x40c>
    a93c:	movw	r3, #0
    a940:	movt	r3, #0
    a944:	movw	r2, #4178	; 0x1052
    a948:	movw	r1, #0
    a94c:	movt	r1, #0
    a950:	movw	r0, #0
    a954:	movt	r0, #0
    a958:	bl	0 <__assert_fail>
    a95c:	ldr	r3, [fp, #-20]	; 0xffffffec
    a960:	add	r3, r3, #1
    a964:	str	r3, [fp, #-20]	; 0xffffffec
    a968:	ldr	r3, [fp, #-20]	; 0xffffffec
    a96c:	cmp	r3, #42	; 0x2a
    a970:	ble	a914 <parse_entry+0x3c4>
    a974:	mov	r1, #32
    a978:	mov	r0, #0
    a97c:	bl	0 <coda_XML_ParserCreateNS>
    a980:	mov	r3, r0
    a984:	str	r3, [fp, #-80]	; 0xffffffb0
    a988:	ldr	r3, [fp, #-80]	; 0xffffffb0
    a98c:	cmp	r3, #0
    a990:	bne	a9b8 <parse_entry+0x468>
    a994:	movw	r1, #0
    a998:	movt	r1, #0
    a99c:	mvn	r0, #13
    a9a0:	bl	0 <coda_set_error>
    a9a4:	sub	r3, fp, #84	; 0x54
    a9a8:	mov	r0, r3
    a9ac:	bl	a40c <parser_info_delete>
    a9b0:	mvn	r3, #0
    a9b4:	b	ac58 <parse_entry+0x708>
    a9b8:	ldr	r3, [fp, #-80]	; 0xffffffb0
    a9bc:	sub	r2, fp, #84	; 0x54
    a9c0:	mov	r1, r2
    a9c4:	mov	r0, r3
    a9c8:	bl	0 <coda_XML_SetUserData>
    a9cc:	ldr	r3, [fp, #-80]	; 0xffffffb0
    a9d0:	movw	r2, #0
    a9d4:	movt	r2, #0
    a9d8:	movw	r1, #0
    a9dc:	movt	r1, #0
    a9e0:	mov	r0, r3
    a9e4:	bl	0 <coda_XML_SetElementHandler>
    a9e8:	sub	r3, fp, #84	; 0x54
    a9ec:	mov	r2, #0
    a9f0:	mvn	r1, #0
    a9f4:	mov	r0, r3
    a9f8:	bl	9cf8 <push_node>
    a9fc:	ldr	r3, [fp, #-84]	; 0xffffffac
    aa00:	mov	r2, #0
    aa04:	str	r2, [r3, #48]	; 0x30
    aa08:	ldr	r3, [fp, #-92]	; 0xffffffa4
    aa0c:	cmp	r3, #1
    aa10:	beq	aa50 <parse_entry+0x500>
    aa14:	ldr	r3, [fp, #-92]	; 0xffffffa4
    aa18:	cmp	r3, #0
    aa1c:	beq	aa30 <parse_entry+0x4e0>
    aa20:	ldr	r3, [fp, #-92]	; 0xffffffa4
    aa24:	cmp	r3, #2
    aa28:	beq	aa68 <parse_entry+0x518>
    aa2c:	b	aa84 <parse_entry+0x534>
    aa30:	ldr	r0, [fp, #-84]	; 0xffffffac
    aa34:	movw	r3, #0
    aa38:	movt	r3, #0
    aa3c:	movw	r2, #0
    aa40:	movt	r2, #0
    aa44:	mov	r1, #30
    aa48:	bl	1530 <register_sub_element>
    aa4c:	b	aa84 <parse_entry+0x534>
    aa50:	ldr	r3, [fp, #-84]	; 0xffffffac
    aa54:	movw	r1, #0
    aa58:	movt	r1, #0
    aa5c:	mov	r0, r3
    aa60:	bl	15c0 <register_type_elements>
    aa64:	b	aa84 <parse_entry+0x534>
    aa68:	ldr	r0, [fp, #-84]	; 0xffffffac
    aa6c:	mov	r3, #0
    aa70:	movw	r2, #0
    aa74:	movt	r2, #0
    aa78:	mov	r1, #31
    aa7c:	bl	1530 <register_sub_element>
    aa80:	nop	{0}
    aa84:	ldr	r3, [pc, #484]	; ac70 <parse_entry+0x720>
    aa88:	ldr	r3, [pc, r3]
    aa8c:	mrc	15, 0, r2, cr13, cr0, {3}
    aa90:	mov	r1, #0
    aa94:	str	r1, [r2, r3]
    aa98:	ldr	r0, [fp, #-80]	; 0xffffffb0
    aa9c:	ldr	r1, [fp, #-72]	; 0xffffffb8
    aaa0:	mov	r3, #1
    aaa4:	ldr	r2, [fp, #-28]	; 0xffffffe4
    aaa8:	bl	0 <coda_XML_Parse>
    aaac:	mov	r3, r0
    aab0:	str	r3, [fp, #-32]	; 0xffffffe0
    aab4:	ldr	r3, [fp, #-32]	; 0xffffffe0
    aab8:	cmp	r3, #0
    aabc:	beq	aad8 <parse_entry+0x588>
    aac0:	ldr	r3, [pc, #428]	; ac74 <parse_entry+0x724>
    aac4:	ldr	r3, [pc, r3]
    aac8:	mrc	15, 0, r2, cr13, cr0, {3}
    aacc:	ldr	r3, [r2, r3]
    aad0:	cmp	r3, #0
    aad4:	beq	ac48 <parse_entry+0x6f8>
    aad8:	ldr	r3, [fp, #-44]	; 0xffffffd4
    aadc:	cmp	r3, #0
    aae0:	bne	ac48 <parse_entry+0x6f8>
    aae4:	ldr	r3, [pc, #396]	; ac78 <parse_entry+0x728>
    aae8:	ldr	r3, [pc, r3]
    aaec:	mrc	15, 0, r2, cr13, cr0, {3}
    aaf0:	ldr	r3, [r2, r3]
    aaf4:	cmp	r3, #0
    aaf8:	bne	ab30 <parse_entry+0x5e0>
    aafc:	ldr	r3, [fp, #-80]	; 0xffffffb0
    ab00:	mov	r0, r3
    ab04:	bl	0 <coda_XML_GetErrorCode>
    ab08:	mov	r3, r0
    ab0c:	mov	r0, r3
    ab10:	bl	0 <coda_XML_ErrorString>
    ab14:	mov	r3, r0
    ab18:	mov	r2, r3
    ab1c:	movw	r1, #0
    ab20:	movt	r1, #0
    ab24:	movw	r0, #65136	; 0xfe70
    ab28:	movt	r0, #65535	; 0xffff
    ab2c:	bl	0 <coda_set_error>
    ab30:	ldr	r3, [pc, #324]	; ac7c <parse_entry+0x72c>
    ab34:	ldr	r3, [pc, r3]
    ab38:	mrc	15, 0, r2, cr13, cr0, {3}
    ab3c:	ldr	r3, [r2, r3]
    ab40:	cmn	r3, #400	; 0x190
    ab44:	beq	ab64 <parse_entry+0x614>
    ab48:	ldr	r3, [pc, #304]	; ac80 <parse_entry+0x730>
    ab4c:	ldr	r3, [pc, r3]
    ab50:	mrc	15, 0, r2, cr13, cr0, {3}
    ab54:	ldr	r3, [r2, r3]
    ab58:	mvn	r2, #400	; 0x190
    ab5c:	cmp	r3, r2
    ab60:	bne	ac34 <parse_entry+0x6e4>
    ab64:	ldr	r3, [fp, #-40]	; 0xffffffd8
    ab68:	cmp	r3, #0
    ab6c:	beq	ac34 <parse_entry+0x6e4>
    ab70:	ldr	r0, [fp, #-88]	; 0xffffffa8
    ab74:	bl	0 <coda_za_get_filename>
    ab78:	mov	r3, r0
    ab7c:	mov	r1, r3
    ab80:	movw	r0, #0
    ab84:	movt	r0, #0
    ab88:	bl	0 <coda_add_error_message>
    ab8c:	ldr	r3, [fp, #-92]	; 0xffffffa4
    ab90:	cmp	r3, #1
    ab94:	beq	abc8 <parse_entry+0x678>
    ab98:	ldr	r3, [fp, #-92]	; 0xffffffa4
    ab9c:	cmp	r3, #0
    aba0:	beq	abb4 <parse_entry+0x664>
    aba4:	ldr	r3, [fp, #-92]	; 0xffffffa4
    aba8:	cmp	r3, #2
    abac:	beq	abdc <parse_entry+0x68c>
    abb0:	b	abf0 <parse_entry+0x6a0>
    abb4:	mov	r1, #0
    abb8:	movw	r0, #0
    abbc:	movt	r0, #0
    abc0:	bl	0 <coda_add_error_message>
    abc4:	b	abf0 <parse_entry+0x6a0>
    abc8:	ldr	r1, [fp, #-96]	; 0xffffffa0
    abcc:	movw	r0, #0
    abd0:	movt	r0, #0
    abd4:	bl	0 <coda_add_error_message>
    abd8:	b	abf0 <parse_entry+0x6a0>
    abdc:	ldr	r1, [fp, #-96]	; 0xffffffa0
    abe0:	movw	r0, #0
    abe4:	movt	r0, #0
    abe8:	bl	0 <coda_add_error_message>
    abec:	nop	{0}
    abf0:	ldr	r3, [fp, #-80]	; 0xffffffb0
    abf4:	mov	r0, r3
    abf8:	bl	0 <coda_XML_GetCurrentLineNumber>
    abfc:	mov	r2, r0
    ac00:	mov	r3, r1
    ac04:	mov	r4, r2
    ac08:	ldr	r3, [fp, #-80]	; 0xffffffb0
    ac0c:	mov	r0, r3
    ac10:	bl	0 <coda_XML_GetCurrentByteIndex>
    ac14:	mov	r2, r0
    ac18:	mov	r3, r1
    ac1c:	mov	r3, r2
    ac20:	mov	r2, r3
    ac24:	mov	r1, r4
    ac28:	movw	r0, #0
    ac2c:	movt	r0, #0
    ac30:	bl	0 <coda_add_error_message>
    ac34:	sub	r3, fp, #84	; 0x54
    ac38:	mov	r0, r3
    ac3c:	bl	a40c <parser_info_delete>
    ac40:	mvn	r3, #0
    ac44:	b	ac58 <parse_entry+0x708>
    ac48:	sub	r3, fp, #84	; 0x54
    ac4c:	mov	r0, r3
    ac50:	bl	a40c <parser_info_delete>
    ac54:	mov	r3, #0
    ac58:	mov	r0, r3
    ac5c:	sub	sp, fp, #8
    ac60:	ldr	r4, [sp]
    ac64:	ldr	fp, [sp, #4]
    ac68:	add	sp, sp, #8
    ac6c:	pop	{pc}		; (ldr pc, [sp], #4)
    ac70:	.word	0x000001e0
    ac74:	.word	0x000001a8
    ac78:	.word	0x00000188
    ac7c:	.word	0x00000140
    ac80:	.word	0x0000012c

0000ac84 <read_definition_file>:
    ac84:	str	fp, [sp, #-8]!
    ac88:	str	lr, [sp, #4]
    ac8c:	add	fp, sp, #4
    ac90:	sub	sp, sp, #24
    ac94:	str	r0, [fp, #-16]
    ac98:	movw	r1, #0
    ac9c:	movt	r1, #0
    aca0:	ldr	r0, [fp, #-16]
    aca4:	bl	0 <coda_za_open>
    aca8:	str	r0, [fp, #-8]
    acac:	ldr	r3, [fp, #-8]
    acb0:	cmp	r3, #0
    acb4:	bne	acc0 <read_definition_file+0x3c>
    acb8:	mvn	r3, #0
    acbc:	b	ad04 <read_definition_file+0x80>
    acc0:	mov	r3, #0
    acc4:	str	r3, [sp]
    acc8:	mov	r3, #0
    accc:	mov	r2, #0
    acd0:	mov	r1, #0
    acd4:	ldr	r0, [fp, #-8]
    acd8:	bl	a550 <parse_entry>
    acdc:	mov	r3, r0
    ace0:	cmp	r3, #0
    ace4:	beq	acf8 <read_definition_file+0x74>
    ace8:	ldr	r0, [fp, #-8]
    acec:	bl	0 <coda_za_close>
    acf0:	mvn	r3, #0
    acf4:	b	ad04 <read_definition_file+0x80>
    acf8:	ldr	r0, [fp, #-8]
    acfc:	bl	0 <coda_za_close>
    ad00:	mov	r3, #0
    ad04:	mov	r0, r3
    ad08:	sub	sp, fp, #4
    ad0c:	ldr	fp, [sp]
    ad10:	add	sp, sp, #4
    ad14:	pop	{pc}		; (ldr pc, [sp], #4)

0000ad18 <coda_read_product_definition>:
    ad18:	str	fp, [sp, #-8]!
    ad1c:	str	lr, [sp, #4]
    ad20:	add	fp, sp, #4
    ad24:	sub	sp, sp, #24
    ad28:	str	r0, [fp, #-16]
    ad2c:	ldr	r3, [fp, #-16]
    ad30:	ldr	r3, [r3, #24]
    ad34:	cmp	r3, #0
    ad38:	beq	ad5c <coda_read_product_definition+0x44>
    ad3c:	movw	r3, #0
    ad40:	movt	r3, #0
    ad44:	movw	r2, #4269	; 0x10ad
    ad48:	movw	r1, #0
    ad4c:	movt	r1, #0
    ad50:	movw	r0, #0
    ad54:	movt	r0, #0
    ad58:	bl	0 <__assert_fail>
    ad5c:	ldr	r3, [fp, #-16]
    ad60:	ldr	r3, [r3, #44]	; 0x2c
    ad64:	ldr	r3, [r3, #20]
    ad68:	str	r3, [fp, #-8]
    ad6c:	ldr	r3, [fp, #-8]
    ad70:	ldr	r3, [r3, #8]
    ad74:	movw	r1, #0
    ad78:	movt	r1, #0
    ad7c:	mov	r0, r3
    ad80:	bl	0 <coda_za_open>
    ad84:	str	r0, [fp, #-12]
    ad88:	ldr	r3, [fp, #-12]
    ad8c:	cmp	r3, #0
    ad90:	bne	ad9c <coda_read_product_definition+0x84>
    ad94:	mvn	r3, #0
    ad98:	b	ade4 <coda_read_product_definition+0xcc>
    ad9c:	ldr	r3, [fp, #-16]
    ada0:	ldr	r2, [r3, #8]
    ada4:	ldr	r3, [fp, #-16]
    ada8:	str	r3, [sp]
    adac:	ldr	r3, [fp, #-8]
    adb0:	mov	r1, #2
    adb4:	ldr	r0, [fp, #-12]
    adb8:	bl	a550 <parse_entry>
    adbc:	mov	r3, r0
    adc0:	cmp	r3, #0
    adc4:	beq	add8 <coda_read_product_definition+0xc0>
    adc8:	ldr	r0, [fp, #-12]
    adcc:	bl	0 <coda_za_close>
    add0:	mvn	r3, #0
    add4:	b	ade4 <coda_read_product_definition+0xcc>
    add8:	ldr	r0, [fp, #-12]
    addc:	bl	0 <coda_za_close>
    ade0:	mov	r3, #0
    ade4:	mov	r0, r3
    ade8:	sub	sp, fp, #4
    adec:	ldr	fp, [sp]
    adf0:	add	sp, sp, #4
    adf4:	pop	{pc}		; (ldr pc, [sp], #4)

0000adf8 <coda_read_definitions>:
    adf8:	str	fp, [sp, #-8]!
    adfc:	str	lr, [sp, #4]
    ae00:	add	fp, sp, #4
    ae04:	sub	sp, sp, #136	; 0x88
    ae08:	str	r0, [fp, #-128]	; 0xffffff80
    ae0c:	mov	r3, #58	; 0x3a
    ae10:	strb	r3, [fp, #-13]
    ae14:	ldr	r0, [fp, #-128]	; 0xffffff80
    ae18:	bl	0 <strdup>
    ae1c:	mov	r3, r0
    ae20:	str	r3, [fp, #-20]	; 0xffffffec
    ae24:	ldr	r3, [fp, #-20]	; 0xffffffec
    ae28:	cmp	r3, #0
    ae2c:	bne	ae54 <coda_read_definitions+0x5c>
    ae30:	movw	r3, #4302	; 0x10ce
    ae34:	movw	r2, #0
    ae38:	movt	r2, #0
    ae3c:	movw	r1, #0
    ae40:	movt	r1, #0
    ae44:	mvn	r0, #0
    ae48:	bl	0 <coda_set_error>
    ae4c:	mvn	r3, #0
    ae50:	b	b178 <coda_read_definitions+0x380>
    ae54:	ldr	r3, [fp, #-20]	; 0xffffffec
    ae58:	str	r3, [fp, #-8]
    ae5c:	b	b15c <coda_read_definitions+0x364>
    ae60:	ldr	r3, [fp, #-8]
    ae64:	str	r3, [fp, #-12]
    ae68:	b	ae78 <coda_read_definitions+0x80>
    ae6c:	ldr	r3, [fp, #-12]
    ae70:	add	r3, r3, #1
    ae74:	str	r3, [fp, #-12]
    ae78:	ldr	r3, [fp, #-12]
    ae7c:	ldrb	r3, [r3]
    ae80:	cmp	r3, #0
    ae84:	beq	ae9c <coda_read_definitions+0xa4>
    ae88:	ldr	r3, [fp, #-12]
    ae8c:	ldrb	r3, [r3]
    ae90:	ldrb	r2, [fp, #-13]
    ae94:	cmp	r2, r3
    ae98:	bne	ae6c <coda_read_definitions+0x74>
    ae9c:	ldr	r3, [fp, #-12]
    aea0:	ldrb	r3, [r3]
    aea4:	cmp	r3, #0
    aea8:	beq	aec4 <coda_read_definitions+0xcc>
    aeac:	ldr	r3, [fp, #-12]
    aeb0:	mov	r2, #0
    aeb4:	strb	r2, [r3]
    aeb8:	ldr	r3, [fp, #-12]
    aebc:	add	r3, r3, #1
    aec0:	str	r3, [fp, #-12]
    aec4:	sub	r3, fp, #124	; 0x7c
    aec8:	mov	r1, r3
    aecc:	ldr	r0, [fp, #-8]
    aed0:	bl	0 <stat>
    aed4:	mov	r3, r0
    aed8:	cmp	r3, #0
    aedc:	bne	b154 <coda_read_definitions+0x35c>
    aee0:	ldr	r3, [fp, #-108]	; 0xffffff94
    aee4:	and	r3, r3, #16384	; 0x4000
    aee8:	cmp	r3, #0
    aeec:	beq	b120 <coda_read_definitions+0x328>
    aef0:	ldr	r0, [fp, #-8]
    aef4:	bl	0 <opendir>
    aef8:	str	r0, [fp, #-24]	; 0xffffffe8
    aefc:	ldr	r3, [fp, #-24]	; 0xffffffe8
    af00:	cmp	r3, #0
    af04:	bne	b0fc <coda_read_definitions+0x304>
    af08:	bl	0 <__errno_location>
    af0c:	mov	r3, r0
    af10:	ldr	r3, [r3]
    af14:	mov	r0, r3
    af18:	bl	0 <strerror>
    af1c:	mov	r3, r0
    af20:	ldr	r2, [fp, #-8]
    af24:	movw	r1, #0
    af28:	movt	r1, #0
    af2c:	movw	r0, #65136	; 0xfe70
    af30:	movt	r0, #65535	; 0xffff
    af34:	bl	0 <coda_set_error>
    af38:	ldr	r0, [fp, #-20]	; 0xffffffec
    af3c:	bl	0 <free>
    af40:	mvn	r3, #0
    af44:	b	b178 <coda_read_definitions+0x380>
    af48:	ldr	r3, [fp, #-28]	; 0xffffffe4
    af4c:	add	r3, r3, #11
    af50:	mov	r0, r3
    af54:	bl	0 <strlen>
    af58:	mov	r3, r0
    af5c:	str	r3, [fp, #-32]	; 0xffffffe0
    af60:	ldr	r3, [fp, #-32]	; 0xffffffe0
    af64:	cmp	r3, #8
    af68:	ble	b0fc <coda_read_definitions+0x304>
    af6c:	ldr	r3, [fp, #-32]	; 0xffffffe0
    af70:	sub	r3, r3, #8
    af74:	add	r3, r3, #8
    af78:	ldr	r2, [fp, #-28]	; 0xffffffe4
    af7c:	add	r3, r2, r3
    af80:	add	r3, r3, #3
    af84:	movw	r1, #0
    af88:	movt	r1, #0
    af8c:	mov	r0, r3
    af90:	bl	0 <strcmp>
    af94:	mov	r3, r0
    af98:	cmp	r3, #0
    af9c:	bne	b0fc <coda_read_definitions+0x304>
    afa0:	ldr	r0, [fp, #-8]
    afa4:	bl	0 <strlen>
    afa8:	mov	r2, r0
    afac:	ldr	r3, [fp, #-32]	; 0xffffffe0
    afb0:	add	r3, r2, r3
    afb4:	add	r3, r3, #2
    afb8:	mov	r0, r3
    afbc:	bl	0 <malloc>
    afc0:	mov	r3, r0
    afc4:	str	r3, [fp, #-36]	; 0xffffffdc
    afc8:	ldr	r3, [fp, #-36]	; 0xffffffdc
    afcc:	cmp	r3, #0
    afd0:	bne	b028 <coda_read_definitions+0x230>
    afd4:	ldr	r0, [fp, #-8]
    afd8:	bl	0 <strlen>
    afdc:	mov	r3, r0
    afe0:	add	r2, r3, #1
    afe4:	ldr	r3, [fp, #-32]	; 0xffffffe0
    afe8:	add	r3, r2, r3
    afec:	add	r2, r3, #1
    aff0:	movw	r3, #4427	; 0x114b
    aff4:	str	r3, [sp]
    aff8:	movw	r3, #0
    affc:	movt	r3, #0
    b000:	movw	r1, #0
    b004:	movt	r1, #0
    b008:	mvn	r0, #0
    b00c:	bl	0 <coda_set_error>
    b010:	ldr	r0, [fp, #-24]	; 0xffffffe8
    b014:	bl	0 <closedir>
    b018:	ldr	r0, [fp, #-20]	; 0xffffffec
    b01c:	bl	0 <free>
    b020:	mvn	r3, #0
    b024:	b	b178 <coda_read_definitions+0x380>
    b028:	ldr	r3, [fp, #-28]	; 0xffffffe4
    b02c:	add	r3, r3, #11
    b030:	ldr	r2, [fp, #-8]
    b034:	movw	r1, #0
    b038:	movt	r1, #0
    b03c:	ldr	r0, [fp, #-36]	; 0xffffffdc
    b040:	bl	0 <sprintf>
    b044:	sub	r3, fp, #124	; 0x7c
    b048:	mov	r1, r3
    b04c:	ldr	r0, [fp, #-36]	; 0xffffffdc
    b050:	bl	0 <stat>
    b054:	mov	r3, r0
    b058:	cmp	r3, #0
    b05c:	beq	b0b0 <coda_read_definitions+0x2b8>
    b060:	bl	0 <__errno_location>
    b064:	mov	r3, r0
    b068:	ldr	r3, [r3]
    b06c:	mov	r0, r3
    b070:	bl	0 <strerror>
    b074:	mov	r3, r0
    b078:	ldr	r2, [fp, #-36]	; 0xffffffdc
    b07c:	movw	r1, #0
    b080:	movt	r1, #0
    b084:	movw	r0, #65136	; 0xfe70
    b088:	movt	r0, #65535	; 0xffff
    b08c:	bl	0 <coda_set_error>
    b090:	ldr	r0, [fp, #-36]	; 0xffffffdc
    b094:	bl	0 <free>
    b098:	ldr	r0, [fp, #-24]	; 0xffffffe8
    b09c:	bl	0 <closedir>
    b0a0:	ldr	r0, [fp, #-20]	; 0xffffffec
    b0a4:	bl	0 <free>
    b0a8:	mvn	r3, #0
    b0ac:	b	b178 <coda_read_definitions+0x380>
    b0b0:	ldr	r3, [fp, #-108]	; 0xffffff94
    b0b4:	and	r3, r3, #32768	; 0x8000
    b0b8:	cmp	r3, #0
    b0bc:	beq	b0f4 <coda_read_definitions+0x2fc>
    b0c0:	ldr	r0, [fp, #-36]	; 0xffffffdc
    b0c4:	bl	ac84 <read_definition_file>
    b0c8:	mov	r3, r0
    b0cc:	cmp	r3, #0
    b0d0:	beq	b0f4 <coda_read_definitions+0x2fc>
    b0d4:	ldr	r0, [fp, #-36]	; 0xffffffdc
    b0d8:	bl	0 <free>
    b0dc:	ldr	r0, [fp, #-24]	; 0xffffffe8
    b0e0:	bl	0 <closedir>
    b0e4:	ldr	r0, [fp, #-20]	; 0xffffffec
    b0e8:	bl	0 <free>
    b0ec:	mvn	r3, #0
    b0f0:	b	b178 <coda_read_definitions+0x380>
    b0f4:	ldr	r0, [fp, #-36]	; 0xffffffdc
    b0f8:	bl	0 <free>
    b0fc:	ldr	r0, [fp, #-24]	; 0xffffffe8
    b100:	bl	0 <readdir>
    b104:	str	r0, [fp, #-28]	; 0xffffffe4
    b108:	ldr	r3, [fp, #-28]	; 0xffffffe4
    b10c:	cmp	r3, #0
    b110:	bne	af48 <coda_read_definitions+0x150>
    b114:	ldr	r0, [fp, #-24]	; 0xffffffe8
    b118:	bl	0 <closedir>
    b11c:	b	b154 <coda_read_definitions+0x35c>
    b120:	ldr	r3, [fp, #-108]	; 0xffffff94
    b124:	and	r3, r3, #32768	; 0x8000
    b128:	cmp	r3, #0
    b12c:	beq	b154 <coda_read_definitions+0x35c>
    b130:	ldr	r0, [fp, #-8]
    b134:	bl	ac84 <read_definition_file>
    b138:	mov	r3, r0
    b13c:	cmp	r3, #0
    b140:	beq	b154 <coda_read_definitions+0x35c>
    b144:	ldr	r0, [fp, #-20]	; 0xffffffec
    b148:	bl	0 <free>
    b14c:	mvn	r3, #0
    b150:	b	b178 <coda_read_definitions+0x380>
    b154:	ldr	r3, [fp, #-12]
    b158:	str	r3, [fp, #-8]
    b15c:	ldr	r3, [fp, #-8]
    b160:	ldrb	r3, [r3]
    b164:	cmp	r3, #0
    b168:	bne	ae60 <coda_read_definitions+0x68>
    b16c:	ldr	r0, [fp, #-20]	; 0xffffffec
    b170:	bl	0 <free>
    b174:	mov	r3, #0
    b178:	mov	r0, r3
    b17c:	sub	sp, fp, #4
    b180:	ldr	fp, [sp]
    b184:	add	sp, sp, #4
    b188:	pop	{pc}		; (ldr pc, [sp], #4)
