
../compcert-repos/prog2/0.3:     file format elf32-littlearm


Disassembly of section .init:

00010654 <.init>:
   10654:	push	{r3, lr}
   10658:	bl	106ec <_start@@Base+0x3c>
   1065c:	pop	{r3, pc}

Disassembly of section .plt:

00010660 <printf@plt-0x14>:
   10660:	push	{lr}		; (str lr, [sp, #-4]!)
   10664:	ldr	lr, [pc, #4]	; 10670 <printf@plt-0x4>
   10668:	add	lr, pc, lr
   1066c:	ldr	pc, [lr, #8]!
   10670:	muleq	r1, r0, r9

00010674 <printf@plt>:
   10674:	add	ip, pc, #0, 12
   10678:	add	ip, ip, #16, 20	; 0x10000
   1067c:	ldr	pc, [ip, #2448]!	; 0x990

00010680 <__libc_start_main@plt>:
   10680:	add	ip, pc, #0, 12
   10684:	add	ip, ip, #16, 20	; 0x10000
   10688:	ldr	pc, [ip, #2440]!	; 0x988

0001068c <__gmon_start__@plt>:
   1068c:	add	ip, pc, #0, 12
   10690:	add	ip, ip, #16, 20	; 0x10000
   10694:	ldr	pc, [ip, #2432]!	; 0x980

00010698 <__isoc99_scanf@plt>:
   10698:	add	ip, pc, #0, 12
   1069c:	add	ip, ip, #16, 20	; 0x10000
   106a0:	ldr	pc, [ip, #2424]!	; 0x978

000106a4 <abort@plt>:
   106a4:	add	ip, pc, #0, 12
   106a8:	add	ip, ip, #16, 20	; 0x10000
   106ac:	ldr	pc, [ip, #2416]!	; 0x970

Disassembly of section .text:

000106b0 <_start@@Base>:
   106b0:	mov	fp, #0
   106b4:	mov	lr, #0
   106b8:	pop	{r1}		; (ldr r1, [sp], #4)
   106bc:	mov	r2, sp
   106c0:	push	{r2}		; (str r2, [sp, #-4]!)
   106c4:	push	{r0}		; (str r0, [sp, #-4]!)
   106c8:	ldr	ip, [pc, #16]	; 106e0 <_start@@Base+0x30>
   106cc:	push	{ip}		; (str ip, [sp, #-4]!)
   106d0:	ldr	r0, [pc, #12]	; 106e4 <_start@@Base+0x34>
   106d4:	ldr	r3, [pc, #12]	; 106e8 <_start@@Base+0x38>
   106d8:	bl	10680 <__libc_start_main@plt>
   106dc:	bl	106a4 <abort@plt>
   106e0:	andeq	r0, r1, r8, lsr #21
   106e4:	andeq	r0, r1, r0, lsl #18
   106e8:	andeq	r0, r1, r8, asr #20
   106ec:	ldr	r3, [pc, #20]	; 10708 <_start@@Base+0x58>
   106f0:	ldr	r2, [pc, #20]	; 1070c <_start@@Base+0x5c>
   106f4:	add	r3, pc, r3
   106f8:	ldr	r2, [r3, r2]
   106fc:	cmp	r2, #0
   10700:	bxeq	lr
   10704:	b	1068c <__gmon_start__@plt>
   10708:	andeq	r0, r1, r4, lsl #18
   1070c:	andeq	r0, r0, r0, lsr #32
   10710:	ldr	r0, [pc, #24]	; 10730 <_start@@Base+0x80>
   10714:	ldr	r3, [pc, #24]	; 10734 <_start@@Base+0x84>
   10718:	cmp	r3, r0
   1071c:	bxeq	lr
   10720:	ldr	r3, [pc, #16]	; 10738 <_start@@Base+0x88>
   10724:	cmp	r3, #0
   10728:	bxeq	lr
   1072c:	bx	r3
   10730:	andeq	r1, r2, ip, lsr #32
   10734:	andeq	r1, r2, ip, lsr #32
   10738:	andeq	r0, r0, r0
   1073c:	ldr	r0, [pc, #36]	; 10768 <_start@@Base+0xb8>
   10740:	ldr	r1, [pc, #36]	; 1076c <_start@@Base+0xbc>
   10744:	sub	r1, r1, r0
   10748:	asr	r1, r1, #2
   1074c:	add	r1, r1, r1, lsr #31
   10750:	asrs	r1, r1, #1
   10754:	bxeq	lr
   10758:	ldr	r3, [pc, #16]	; 10770 <_start@@Base+0xc0>
   1075c:	cmp	r3, #0
   10760:	bxeq	lr
   10764:	bx	r3
   10768:	andeq	r1, r2, ip, lsr #32
   1076c:	andeq	r1, r2, ip, lsr #32
   10770:	andeq	r0, r0, r0
   10774:	push	{r4, lr}
   10778:	ldr	r4, [pc, #24]	; 10798 <_start@@Base+0xe8>
   1077c:	ldrb	r3, [r4]
   10780:	cmp	r3, #0
   10784:	popne	{r4, pc}
   10788:	bl	10710 <_start@@Base+0x60>
   1078c:	mov	r3, #1
   10790:	strb	r3, [r4]
   10794:	pop	{r4, pc}
   10798:	andeq	r1, r2, ip, lsr #32
   1079c:	b	1073c <_start@@Base+0x8c>

000107a0 <avg@@Base>:
   107a0:	sub	sp, sp, #12
   107a4:	vldr	s0, [pc, #88]	; 10804 <avg@@Base+0x64>
   107a8:	str	r0, [sp, #8]
   107ac:	vstr	s0, [sp]
   107b0:	movw	r0, #0
   107b4:	str	r0, [sp, #4]
   107b8:	ldr	r0, [sp, #4]
   107bc:	cmp	r0, #10
   107c0:	bge	107f0 <avg@@Base+0x50>
   107c4:	ldr	r0, [sp, #8]
   107c8:	ldr	r1, [sp, #4]
   107cc:	add	r0, r0, r1, lsl #2
   107d0:	vldr	s0, [r0]
   107d4:	vldr	s2, [sp]
   107d8:	vadd.f32	s0, s2, s0
   107dc:	vstr	s0, [sp]
   107e0:	ldr	r0, [sp, #4]
   107e4:	add	r0, r0, #1
   107e8:	str	r0, [sp, #4]
   107ec:	b	107b8 <avg@@Base+0x18>
   107f0:	vldr	s0, [sp]
   107f4:	vmov.f32	s2, #36	; 0x41200000  10.0
   107f8:	vdiv.f32	s0, s0, s2
   107fc:	add	sp, sp, #12
   10800:	bx	lr
   10804:	andeq	r0, r0, r0

00010808 <max@@Base>:
   10808:	sub	sp, sp, #12
   1080c:	str	r0, [sp, #8]
   10810:	ldr	r0, [sp, #8]
   10814:	vldr	s0, [r0]
   10818:	vstr	s0, [sp]
   1081c:	movw	r0, #1
   10820:	str	r0, [sp, #4]
   10824:	ldr	r0, [sp, #4]
   10828:	cmp	r0, #10
   1082c:	bge	10878 <max@@Base+0x70>
   10830:	ldr	r0, [sp, #8]
   10834:	ldr	r1, [sp, #4]
   10838:	add	r0, r0, r1, lsl #2
   1083c:	vldr	s0, [r0]
   10840:	vldr	s2, [sp]
   10844:	vcmpe.f32	s0, s2
   10848:	vmrs	APSR_nzcv, fpscr
   1084c:	ble	10864 <max@@Base+0x5c>
   10850:	ldr	r0, [sp, #8]
   10854:	ldr	r1, [sp, #4]
   10858:	add	r0, r0, r1, lsl #2
   1085c:	vldr	s0, [r0]
   10860:	vstr	s0, [sp]
   10864:	b	10868 <max@@Base+0x60>
   10868:	ldr	r0, [sp, #4]
   1086c:	add	r0, r0, #1
   10870:	str	r0, [sp, #4]
   10874:	b	10824 <max@@Base+0x1c>
   10878:	vldr	s0, [sp]
   1087c:	add	sp, sp, #12
   10880:	bx	lr

00010884 <min@@Base>:
   10884:	sub	sp, sp, #12
   10888:	str	r0, [sp, #8]
   1088c:	ldr	r0, [sp, #8]
   10890:	vldr	s0, [r0]
   10894:	vstr	s0, [sp]
   10898:	movw	r0, #1
   1089c:	str	r0, [sp, #4]
   108a0:	ldr	r0, [sp, #4]
   108a4:	cmp	r0, #10
   108a8:	bge	108f4 <min@@Base+0x70>
   108ac:	ldr	r0, [sp, #8]
   108b0:	ldr	r1, [sp, #4]
   108b4:	add	r0, r0, r1, lsl #2
   108b8:	vldr	s0, [r0]
   108bc:	vldr	s2, [sp]
   108c0:	vcmpe.f32	s0, s2
   108c4:	vmrs	APSR_nzcv, fpscr
   108c8:	bpl	108e0 <min@@Base+0x5c>
   108cc:	ldr	r0, [sp, #8]
   108d0:	ldr	r1, [sp, #4]
   108d4:	add	r0, r0, r1, lsl #2
   108d8:	vldr	s0, [r0]
   108dc:	vstr	s0, [sp]
   108e0:	b	108e4 <min@@Base+0x60>
   108e4:	ldr	r0, [sp, #4]
   108e8:	add	r0, r0, #1
   108ec:	str	r0, [sp, #4]
   108f0:	b	108a0 <min@@Base+0x1c>
   108f4:	vldr	s0, [sp]
   108f8:	add	sp, sp, #12
   108fc:	bx	lr

00010900 <main@@Base>:
   10900:	push	{fp, lr}
   10904:	mov	fp, sp
   10908:	sub	sp, sp, #72	; 0x48
   1090c:	movw	r0, #0
   10910:	str	r0, [fp, #-4]
   10914:	str	r0, [fp, #-8]
   10918:	ldr	r0, [fp, #-8]
   1091c:	cmp	r0, #10
   10920:	bge	10968 <main@@Base+0x68>
   10924:	ldr	r0, [fp, #-8]
   10928:	add	r1, r0, #1
   1092c:	movw	r0, #2744	; 0xab8
   10930:	movt	r0, #1
   10934:	bl	10674 <printf@plt>
   10938:	ldr	r1, [fp, #-8]
   1093c:	add	r2, sp, #24
   10940:	add	r1, r2, r1, lsl #2
   10944:	movw	r2, #2768	; 0xad0
   10948:	movt	r2, #1
   1094c:	str	r0, [sp, #20]
   10950:	mov	r0, r2
   10954:	bl	10698 <__isoc99_scanf@plt>
   10958:	ldr	r0, [fp, #-8]
   1095c:	add	r0, r0, #1
   10960:	str	r0, [fp, #-8]
   10964:	b	10918 <main@@Base+0x18>
   10968:	add	r0, sp, #24
   1096c:	bl	107a0 <avg@@Base>
   10970:	vcvt.f64.f32	d16, s0
   10974:	movw	r0, #2771	; 0xad3
   10978:	movt	r0, #1
   1097c:	vmov	r2, r3, d16
   10980:	bl	10674 <printf@plt>
   10984:	add	r1, sp, #24
   10988:	str	r0, [sp, #16]
   1098c:	mov	r0, r1
   10990:	bl	10808 <max@@Base>
   10994:	vcvt.f64.f32	d16, s0
   10998:	movw	r0, #2784	; 0xae0
   1099c:	movt	r0, #1
   109a0:	vmov	r2, r3, d16
   109a4:	bl	10674 <printf@plt>
   109a8:	add	r1, sp, #24
   109ac:	str	r0, [sp, #12]
   109b0:	mov	r0, r1
   109b4:	bl	10884 <min@@Base>
   109b8:	vcvt.f64.f32	d16, s0
   109bc:	movw	r0, #2798	; 0xaee
   109c0:	movt	r0, #1
   109c4:	vmov	r2, r3, d16
   109c8:	bl	10674 <printf@plt>
   109cc:	movw	r1, #2812	; 0xafc
   109d0:	movt	r1, #1
   109d4:	str	r0, [sp, #8]
   109d8:	mov	r0, r1
   109dc:	bl	10674 <printf@plt>
   109e0:	movw	r1, #0
   109e4:	str	r1, [fp, #-8]
   109e8:	ldr	r0, [fp, #-8]
   109ec:	cmp	r0, #10
   109f0:	bge	10a28 <main@@Base+0x128>
   109f4:	ldr	r0, [fp, #-8]
   109f8:	add	r1, sp, #24
   109fc:	add	r0, r1, r0, lsl #2
   10a00:	vldr	s0, [r0]
   10a04:	vcvt.f64.f32	d16, s0
   10a08:	movw	r0, #2819	; 0xb03
   10a0c:	movt	r0, #1
   10a10:	vmov	r2, r3, d16
   10a14:	bl	10674 <printf@plt>
   10a18:	ldr	r0, [fp, #-8]
   10a1c:	add	r0, r0, #1
   10a20:	str	r0, [fp, #-8]
   10a24:	b	109e8 <main@@Base+0xe8>
   10a28:	movw	r0, #2810	; 0xafa
   10a2c:	movt	r0, #1
   10a30:	bl	10674 <printf@plt>
   10a34:	movw	r1, #0
   10a38:	str	r0, [sp, #4]
   10a3c:	mov	r0, r1
   10a40:	mov	sp, fp
   10a44:	pop	{fp, pc}

00010a48 <__libc_csu_init@@Base>:
   10a48:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   10a4c:	mov	r7, r0
   10a50:	ldr	r6, [pc, #72]	; 10aa0 <__libc_csu_init@@Base+0x58>
   10a54:	ldr	r5, [pc, #72]	; 10aa4 <__libc_csu_init@@Base+0x5c>
   10a58:	add	r6, pc, r6
   10a5c:	add	r5, pc, r5
   10a60:	sub	r6, r6, r5
   10a64:	mov	r8, r1
   10a68:	mov	r9, r2
   10a6c:	bl	10654 <printf@plt-0x20>
   10a70:	asrs	r6, r6, #2
   10a74:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   10a78:	mov	r4, #0
   10a7c:	add	r4, r4, #1
   10a80:	ldr	r3, [r5], #4
   10a84:	mov	r2, r9
   10a88:	mov	r1, r8
   10a8c:	mov	r0, r7
   10a90:	blx	r3
   10a94:	cmp	r6, r4
   10a98:	bne	10a7c <__libc_csu_init@@Base+0x34>
   10a9c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   10aa0:	andeq	r0, r1, ip, lsr #9
   10aa4:	andeq	r0, r1, r4, lsr #9

00010aa8 <__libc_csu_fini@@Base>:
   10aa8:	bx	lr

Disassembly of section .fini:

00010aac <.fini>:
   10aac:	push	{r3, lr}
   10ab0:	pop	{r3, pc}
