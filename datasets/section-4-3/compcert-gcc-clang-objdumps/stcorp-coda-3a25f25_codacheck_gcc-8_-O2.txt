
../compcert-repos/stcorp-coda-3a25f25/codacheck:     file format elf32-littlearm


Disassembly of section .init:

00010b98 <.init>:
   10b98:	push	{r3, lr}
   10b9c:	bl	111fc <_start@@Base+0x3c>
   10ba0:	pop	{r3, pc}

Disassembly of section .plt:

00010ba4 <coda_set_option_perform_boundary_checks@plt-0x14>:
   10ba4:	push	{lr}		; (str lr, [sp, #-4]!)
   10ba8:	ldr	lr, [pc, #4]	; 10bb4 <coda_set_option_perform_boundary_checks@plt-0x4>
   10bac:	add	lr, pc, lr
   10bb0:	ldr	pc, [lr, #8]!
   10bb4:	andeq	r2, r1, ip, asr #8

00010bb8 <coda_set_option_perform_boundary_checks@plt>:
   10bb8:	add	ip, pc, #0, 12
   10bbc:	add	ip, ip, #73728	; 0x12000
   10bc0:	ldr	pc, [ip, #1100]!	; 0x44c

00010bc4 <strcmp@plt>:
   10bc4:	add	ip, pc, #0, 12
   10bc8:	add	ip, ip, #73728	; 0x12000
   10bcc:	ldr	pc, [ip, #1092]!	; 0x444

00010bd0 <printf@plt>:
   10bd0:	add	ip, pc, #0, 12
   10bd4:	add	ip, ip, #73728	; 0x12000
   10bd8:	ldr	pc, [ip, #1084]!	; 0x43c

00010bdc <coda_set_error@plt>:
   10bdc:	add	ip, pc, #0, 12
   10be0:	add	ip, ip, #73728	; 0x12000
   10be4:	ldr	pc, [ip, #1076]!	; 0x434

00010be8 <coda_open@plt>:
   10be8:	add	ip, pc, #0, 12
   10bec:	add	ip, ip, #73728	; 0x12000
   10bf0:	ldr	pc, [ip, #1068]!	; 0x42c

00010bf4 <fflush@plt>:
   10bf4:	add	ip, pc, #0, 12
   10bf8:	add	ip, ip, #73728	; 0x12000
   10bfc:	ldr	pc, [ip, #1060]!	; 0x424

00010c00 <coda_set_option_use_mmap@plt>:
   10c00:	add	ip, pc, #0, 12
   10c04:	add	ip, ip, #73728	; 0x12000
   10c08:	ldr	pc, [ip, #1052]!	; 0x41c

00010c0c <coda_cursor_print_path@plt>:
   10c0c:	add	ip, pc, #0, 12
   10c10:	add	ip, ip, #73728	; 0x12000
   10c14:	ldr	pc, [ip, #1044]!	; 0x414

00010c18 <coda_set_definition_path_conditional@plt>:
   10c18:	add	ip, pc, #0, 12
   10c1c:	add	ip, ip, #73728	; 0x12000
   10c20:	ldr	pc, [ip, #1036]!	; 0x40c

00010c24 <coda_set_definition_path@plt>:
   10c24:	add	ip, pc, #0, 12
   10c28:	add	ip, ip, #73728	; 0x12000
   10c2c:	ldr	pc, [ip, #1028]!	; 0x404

00010c30 <coda_recognize_file@plt>:
   10c30:	add	ip, pc, #0, 12
   10c34:	add	ip, ip, #73728	; 0x12000
   10c38:	ldr	pc, [ip, #1020]!	; 0x3fc

00010c3c <fwrite@plt>:
   10c3c:	add	ip, pc, #0, 12
   10c40:	add	ip, ip, #73728	; 0x12000
   10c44:	ldr	pc, [ip, #1012]!	; 0x3f4

00010c48 <coda_type_get_format_name@plt>:
   10c48:	add	ip, pc, #0, 12
   10c4c:	add	ip, ip, #73728	; 0x12000
   10c50:	ldr	pc, [ip, #1004]!	; 0x3ec

00010c54 <coda_done@plt>:
   10c54:	add	ip, pc, #0, 12
   10c58:	add	ip, ip, #73728	; 0x12000
   10c5c:	ldr	pc, [ip, #996]!	; 0x3e4

00010c60 <puts@plt>:
   10c60:	add	ip, pc, #0, 12
   10c64:	add	ip, ip, #73728	; 0x12000
   10c68:	ldr	pc, [ip, #988]!	; 0x3dc

00010c6c <coda_product_check@plt>:
   10c6c:	add	ip, pc, #0, 12
   10c70:	add	ip, ip, #73728	; 0x12000
   10c74:	ldr	pc, [ip, #980]!	; 0x3d4

00010c78 <__libc_start_main@plt>:
   10c78:	add	ip, pc, #0, 12
   10c7c:	add	ip, ip, #73728	; 0x12000
   10c80:	ldr	pc, [ip, #972]!	; 0x3cc

00010c84 <__gmon_start__@plt>:
   10c84:	add	ip, pc, #0, 12
   10c88:	add	ip, ip, #73728	; 0x12000
   10c8c:	ldr	pc, [ip, #964]!	; 0x3c4

00010c90 <exit@plt>:
   10c90:	add	ip, pc, #0, 12
   10c94:	add	ip, ip, #73728	; 0x12000
   10c98:	ldr	pc, [ip, #956]!	; 0x3bc

00010c9c <fprintf@plt>:
   10c9c:	add	ip, pc, #0, 12
   10ca0:	add	ip, ip, #73728	; 0x12000
   10ca4:	ldr	pc, [ip, #948]!	; 0x3b4

00010ca8 <coda_init@plt>:
   10ca8:	add	ip, pc, #0, 12
   10cac:	add	ip, ip, #73728	; 0x12000
   10cb0:	ldr	pc, [ip, #940]!	; 0x3ac

00010cb4 <ungetc@plt>:
   10cb4:	add	ip, pc, #0, 12
   10cb8:	add	ip, ip, #73728	; 0x12000
   10cbc:	ldr	pc, [ip, #932]!	; 0x3a4

00010cc0 <coda_set_option_perform_conversions@plt>:
   10cc0:	add	ip, pc, #0, 12
   10cc4:	add	ip, ip, #73728	; 0x12000
   10cc8:	ldr	pc, [ip, #924]!	; 0x39c

00010ccc <putchar@plt>:
   10ccc:	add	ip, pc, #0, 12
   10cd0:	add	ip, ip, #73728	; 0x12000
   10cd4:	ldr	pc, [ip, #916]!	; 0x394

00010cd8 <coda_close@plt>:
   10cd8:	add	ip, pc, #0, 12
   10cdc:	add	ip, ip, #73728	; 0x12000
   10ce0:	ldr	pc, [ip, #908]!	; 0x38c

00010ce4 <coda_errno_to_string@plt>:
   10ce4:	add	ip, pc, #0, 12
   10ce8:	add	ip, ip, #73728	; 0x12000
   10cec:	ldr	pc, [ip, #900]!	; 0x384

00010cf0 <coda_get_libcoda_version@plt>:
   10cf0:	add	ip, pc, #0, 12
   10cf4:	add	ip, ip, #73728	; 0x12000
   10cf8:	ldr	pc, [ip, #892]!	; 0x37c

00010cfc <coda_get_errno@plt>:
   10cfc:	add	ip, pc, #0, 12
   10d00:	add	ip, ip, #73728	; 0x12000
   10d04:	ldr	pc, [ip, #884]!	; 0x374

00010d08 <abort@plt>:
   10d08:	add	ip, pc, #0, 12
   10d0c:	add	ip, ip, #73728	; 0x12000
   10d10:	ldr	pc, [ip, #876]!	; 0x36c

00010d14 <getc@plt>:
   10d14:	add	ip, pc, #0, 12
   10d18:	add	ip, ip, #73728	; 0x12000
   10d1c:	ldr	pc, [ip, #868]!	; 0x364

00010d20 <__assert_fail@plt>:
   10d20:	add	ip, pc, #0, 12
   10d24:	add	ip, ip, #73728	; 0x12000
   10d28:	ldr	pc, [ip, #860]!	; 0x35c

Disassembly of section .text:

00010d2c <main@@Base>:
   10d2c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   10d30:	mov	r4, #0
   10d34:	movw	r5, #12464	; 0x30b0
   10d38:	movt	r5, #2
   10d3c:	strd	r6, [sp, #8]
   10d40:	movw	r6, #12468	; 0x30b4
   10d44:	movt	r6, #2
   10d48:	movw	r7, #12456	; 0x30a8
   10d4c:	movt	r7, #2
   10d50:	cmp	r0, #1
   10d54:	strd	r8, [sp, #16]
   10d58:	strd	sl, [sp, #24]
   10d5c:	str	lr, [sp, #32]
   10d60:	sub	sp, sp, #1024	; 0x400
   10d64:	sub	sp, sp, #12
   10d68:	str	r4, [r5]
   10d6c:	str	r4, [r6]
   10d70:	str	r4, [r7]
   10d74:	beq	10d9c <main@@Base+0x70>
   10d78:	mov	sl, r1
   10d7c:	mov	r8, r0
   10d80:	ldr	r9, [sl, #4]
   10d84:	movw	r1, #7640	; 0x1dd8
   10d88:	movt	r1, #1
   10d8c:	mov	r0, r9
   10d90:	bl	10bc4 <strcmp@plt>
   10d94:	cmp	r0, r4
   10d98:	bne	10da8 <main@@Base+0x7c>
   10d9c:	bl	112b0 <_start@@Base+0xf0>
   10da0:	mov	r0, #0
   10da4:	bl	10c90 <exit@plt>
   10da8:	movw	r1, #7644	; 0x1ddc
   10dac:	movt	r1, #1
   10db0:	mov	r0, r9
   10db4:	bl	10bc4 <strcmp@plt>
   10db8:	cmp	r0, r4
   10dbc:	beq	10d9c <main@@Base+0x70>
   10dc0:	movw	r1, #7652	; 0x1de4
   10dc4:	movt	r1, #1
   10dc8:	mov	r0, r9
   10dcc:	bl	10bc4 <strcmp@plt>
   10dd0:	cmp	r0, #0
   10dd4:	beq	10f48 <main@@Base+0x21c>
   10dd8:	movw	r1, #7656	; 0x1de8
   10ddc:	movt	r1, #1
   10de0:	mov	r0, r9
   10de4:	bl	10bc4 <strcmp@plt>
   10de8:	cmp	r0, #0
   10dec:	beq	10f48 <main@@Base+0x21c>
   10df0:	cmp	r8, #2
   10df4:	ble	10f78 <main@@Base+0x24c>
   10df8:	mov	r0, r9
   10dfc:	movw	r1, #7740	; 0x1e3c
   10e00:	movt	r1, #1
   10e04:	bl	10bc4 <strcmp@plt>
   10e08:	cmp	r0, #0
   10e0c:	beq	11044 <main@@Base+0x318>
   10e10:	mov	r1, r4
   10e14:	movw	r2, #7744	; 0x1e40
   10e18:	movt	r2, #1
   10e1c:	ldr	r0, [sl]
   10e20:	bl	10c18 <coda_set_definition_path_conditional@plt>
   10e24:	cmp	r0, #0
   10e28:	bne	110c0 <main@@Base+0x394>
   10e2c:	mov	r4, #1
   10e30:	movw	r1, #7788	; 0x1e6c
   10e34:	movt	r1, #1
   10e38:	add	fp, sl, r4, lsl #2
   10e3c:	mov	r3, #1
   10e40:	movw	r2, #6612	; 0x19d4
   10e44:	movt	r2, #1
   10e48:	str	r1, [sp]
   10e4c:	movw	r1, #6468	; 0x1944
   10e50:	movt	r1, #1
   10e54:	str	r1, [sp, #4]
   10e58:	movw	r1, #7792	; 0x1e70
   10e5c:	movt	r1, #1
   10e60:	str	r3, [sp, #8]
   10e64:	movw	r3, #7784	; 0x1e68
   10e68:	movt	r3, #1
   10e6c:	str	r1, [sp, #12]
   10e70:	movw	r1, #6208	; 0x1840
   10e74:	movt	r1, #1
   10e78:	str	sl, [sp, #16]
   10e7c:	mov	sl, r2
   10e80:	str	r7, [sp, #20]
   10e84:	mov	r7, r3
   10e88:	str	r1, [sp, #24]
   10e8c:	movw	r1, #6708	; 0x1a34
   10e90:	movt	r1, #1
   10e94:	str	r1, [sp, #28]
   10e98:	b	10f24 <main@@Base+0x1f8>
   10e9c:	mov	r1, sl
   10ea0:	mov	r0, r9
   10ea4:	bl	10bc4 <strcmp@plt>
   10ea8:	cmp	r0, #0
   10eac:	beq	10f3c <main@@Base+0x210>
   10eb0:	mov	r0, r9
   10eb4:	ldr	r1, [sp]
   10eb8:	bl	10bc4 <strcmp@plt>
   10ebc:	cmp	r0, #0
   10ec0:	beq	11020 <main@@Base+0x2f4>
   10ec4:	mov	r0, r9
   10ec8:	ldr	r1, [sp, #4]
   10ecc:	bl	10bc4 <strcmp@plt>
   10ed0:	cmp	r0, #0
   10ed4:	beq	11020 <main@@Base+0x2f4>
   10ed8:	mov	r0, r9
   10edc:	ldr	r1, [sp, #12]
   10ee0:	bl	10bc4 <strcmp@plt>
   10ee4:	cmp	r0, #0
   10ee8:	beq	11034 <main@@Base+0x308>
   10eec:	mov	r0, r9
   10ef0:	ldr	r1, [sp, #24]
   10ef4:	bl	10bc4 <strcmp@plt>
   10ef8:	cmp	r0, #0
   10efc:	beq	11034 <main@@Base+0x308>
   10f00:	mov	r0, r9
   10f04:	ldr	r1, [sp, #28]
   10f08:	bl	10bc4 <strcmp@plt>
   10f0c:	cmp	r0, #0
   10f10:	bne	11054 <main@@Base+0x328>
   10f14:	str	r0, [sp, #8]
   10f18:	add	r4, r4, #1
   10f1c:	cmp	r8, r4
   10f20:	ble	1102c <main@@Base+0x300>
   10f24:	ldr	r9, [fp], #4
   10f28:	mov	r1, r7
   10f2c:	mov	r0, r9
   10f30:	bl	10bc4 <strcmp@plt>
   10f34:	cmp	r0, #0
   10f38:	bne	10e9c <main@@Base+0x170>
   10f3c:	mov	r3, #1
   10f40:	str	r3, [r5]
   10f44:	b	10f18 <main@@Base+0x1ec>
   10f48:	bl	10cf0 <coda_get_libcoda_version@plt>
   10f4c:	mov	r1, r0
   10f50:	movw	r0, #7668	; 0x1df4
   10f54:	movt	r0, #1
   10f58:	bl	10bd0 <printf@plt>
   10f5c:	movw	r0, #7692	; 0x1e0c
   10f60:	movt	r0, #1
   10f64:	bl	10c60 <puts@plt>
   10f68:	mov	r0, #10
   10f6c:	bl	10ccc <putchar@plt>
   10f70:	mov	r0, #0
   10f74:	bl	10c90 <exit@plt>
   10f78:	mov	r1, r4
   10f7c:	movw	r2, #7744	; 0x1e40
   10f80:	movt	r2, #1
   10f84:	ldr	r0, [sl]
   10f88:	bl	10c18 <coda_set_definition_path_conditional@plt>
   10f8c:	cmp	r0, #0
   10f90:	moveq	r4, #1
   10f94:	bne	110c0 <main@@Base+0x394>
   10f98:	cmp	r8, r4
   10f9c:	movle	r3, #1
   10fa0:	strle	r3, [sp, #8]
   10fa4:	bgt	10e30 <main@@Base+0x104>
   10fa8:	bl	10ca8 <coda_init@plt>
   10fac:	subs	r5, r0, #0
   10fb0:	bne	110c0 <main@@Base+0x394>
   10fb4:	bl	10bb8 <coda_set_option_perform_boundary_checks@plt>
   10fb8:	mov	r0, r5
   10fbc:	bl	10cc0 <coda_set_option_perform_conversions@plt>
   10fc0:	ldr	r0, [sp, #8]
   10fc4:	bl	10c00 <coda_set_option_use_mmap@plt>
   10fc8:	b	10fe0 <main@@Base+0x2b4>
   10fcc:	ldr	r0, [sl, r4, lsl #2]
   10fd0:	add	r4, r4, #1
   10fd4:	bl	1143c <_start@@Base+0x27c>
   10fd8:	mov	r0, #0
   10fdc:	bl	10bf4 <fflush@plt>
   10fe0:	cmp	r4, r8
   10fe4:	blt	10fcc <main@@Base+0x2a0>
   10fe8:	bl	10c54 <coda_done@plt>
   10fec:	movw	r3, #12460	; 0x30ac
   10ff0:	movt	r3, #2
   10ff4:	ldr	r0, [r3]
   10ff8:	cmp	r0, #0
   10ffc:	bne	110f4 <main@@Base+0x3c8>
   11000:	add	sp, sp, #1024	; 0x400
   11004:	add	sp, sp, #12
   11008:	ldrd	r4, [sp]
   1100c:	ldrd	r6, [sp, #8]
   11010:	ldrd	r8, [sp, #16]
   11014:	ldrd	sl, [sp, #24]
   11018:	add	sp, sp, #32
   1101c:	pop	{pc}		; (ldr pc, [sp], #4)
   11020:	mov	r3, #1
   11024:	str	r3, [r6]
   11028:	b	10f18 <main@@Base+0x1ec>
   1102c:	ldr	sl, [sp, #16]
   11030:	b	10fa8 <main@@Base+0x27c>
   11034:	ldr	r3, [sp, #20]
   11038:	mov	r2, #1
   1103c:	str	r2, [r3]
   11040:	b	10f18 <main@@Base+0x1ec>
   11044:	ldr	r0, [sl, #8]
   11048:	mov	r4, #3
   1104c:	bl	10c24 <coda_set_definition_path@plt>
   11050:	b	10f98 <main@@Base+0x26c>
   11054:	movw	r1, #7796	; 0x1e74
   11058:	movt	r1, #1
   1105c:	mov	r0, r9
   11060:	bl	10bc4 <strcmp@plt>
   11064:	cmp	r0, #0
   11068:	ldr	sl, [sp, #16]
   1106c:	bne	1107c <main@@Base+0x350>
   11070:	sub	r3, r8, #1
   11074:	cmp	r3, r4
   11078:	beq	110b4 <main@@Base+0x388>
   1107c:	ldrb	r3, [r9]
   11080:	cmp	r3, #45	; 0x2d
   11084:	bne	10fa8 <main@@Base+0x27c>
   11088:	movw	r3, #12440	; 0x3098
   1108c:	movt	r3, #2
   11090:	mov	r2, #25
   11094:	mov	r1, #1
   11098:	ldr	r3, [r3]
   1109c:	movw	r0, #7800	; 0x1e78
   110a0:	movt	r0, #1
   110a4:	bl	10c3c <fwrite@plt>
   110a8:	bl	112b0 <_start@@Base+0xf0>
   110ac:	mov	r0, #1
   110b0:	bl	10c90 <exit@plt>
   110b4:	bl	10ca8 <coda_init@plt>
   110b8:	cmp	r0, #0
   110bc:	beq	110fc <main@@Base+0x3d0>
   110c0:	movw	r3, #12440	; 0x3098
   110c4:	movt	r3, #2
   110c8:	ldr	r4, [r3]
   110cc:	bl	10cfc <coda_get_errno@plt>
   110d0:	ldr	r0, [r0]
   110d4:	bl	10ce4 <coda_errno_to_string@plt>
   110d8:	mov	r2, r0
   110dc:	movw	r1, #7772	; 0x1e5c
   110e0:	movt	r1, #1
   110e4:	mov	r0, r4
   110e8:	bl	10c9c <fprintf@plt>
   110ec:	mov	r0, #1
   110f0:	bl	10c90 <exit@plt>
   110f4:	mov	r0, #1
   110f8:	bl	10c90 <exit@plt>
   110fc:	mov	r0, #0
   11100:	movw	r5, #12448	; 0x30a0
   11104:	movt	r5, #2
   11108:	bl	10bb8 <coda_set_option_perform_boundary_checks@plt>
   1110c:	mov	r0, #0
   11110:	mov	r6, r0
   11114:	bl	10cc0 <coda_set_option_perform_conversions@plt>
   11118:	ldr	r0, [sp, #8]
   1111c:	bl	10c00 <coda_set_option_use_mmap@plt>
   11120:	mov	r4, #0
   11124:	b	11144 <main@@Base+0x418>
   11128:	cmp	r0, #10
   1112c:	beq	11174 <main@@Base+0x448>
   11130:	add	r3, sp, #32
   11134:	strb	r0, [r3, r4]
   11138:	add	r4, r4, #1
   1113c:	cmp	r4, #1000	; 0x3e8
   11140:	beq	111a0 <main@@Base+0x474>
   11144:	ldr	r0, [r5]
   11148:	bl	10d14 <getc@plt>
   1114c:	uxtb	r0, r0
   11150:	cmp	r0, #13
   11154:	bne	11128 <main@@Base+0x3fc>
   11158:	ldr	r0, [r5]
   1115c:	bl	10d14 <getc@plt>
   11160:	uxtb	r0, r0
   11164:	cmp	r0, #10
   11168:	beq	11174 <main@@Base+0x448>
   1116c:	ldr	r1, [r5]
   11170:	bl	10cb4 <ungetc@plt>
   11174:	add	r3, sp, #1024	; 0x400
   11178:	cmp	r4, #0
   1117c:	add	r3, r3, #8
   11180:	add	r3, r3, r4
   11184:	strb	r6, [r3, #-1000]	; 0xfffffc18
   11188:	beq	11120 <main@@Base+0x3f4>
   1118c:	add	r0, sp, #32
   11190:	bl	1143c <_start@@Base+0x27c>
   11194:	mov	r0, #0
   11198:	bl	10bf4 <fflush@plt>
   1119c:	b	11120 <main@@Base+0x3f4>
   111a0:	movw	r3, #6028	; 0x178c
   111a4:	movt	r3, #1
   111a8:	movw	r1, #7828	; 0x1e94
   111ac:	movt	r1, #1
   111b0:	movw	r0, #7908	; 0x1ee4
   111b4:	movt	r0, #1
   111b8:	mov	r2, #316	; 0x13c
   111bc:	bl	10d20 <__assert_fail@plt>

000111c0 <_start@@Base>:
   111c0:	mov	fp, #0
   111c4:	mov	lr, #0
   111c8:	pop	{r1}		; (ldr r1, [sp], #4)
   111cc:	mov	r2, sp
   111d0:	push	{r2}		; (str r2, [sp, #-4]!)
   111d4:	push	{r0}		; (str r0, [sp, #-4]!)
   111d8:	ldr	ip, [pc, #16]	; 111f0 <_start@@Base+0x30>
   111dc:	push	{ip}		; (str ip, [sp, #-4]!)
   111e0:	ldr	r0, [pc, #12]	; 111f4 <_start@@Base+0x34>
   111e4:	ldr	r3, [pc, #12]	; 111f8 <_start@@Base+0x38>
   111e8:	bl	10c78 <__libc_start_main@plt>
   111ec:	bl	10d08 <abort@plt>
   111f0:	andeq	r1, r1, ip, ror r7
   111f4:	andeq	r0, r1, ip, lsr #26
   111f8:	andeq	r1, r1, ip, lsl r7
   111fc:	ldr	r3, [pc, #20]	; 11218 <_start@@Base+0x58>
   11200:	ldr	r2, [pc, #20]	; 1121c <_start@@Base+0x5c>
   11204:	add	r3, pc, r3
   11208:	ldr	r2, [r3, r2]
   1120c:	cmp	r2, #0
   11210:	bxeq	lr
   11214:	b	10c84 <__gmon_start__@plt>
   11218:	strdeq	r1, [r1], -r4
   1121c:	andeq	r0, r0, r8, lsl #1
   11220:	ldr	r0, [pc, #24]	; 11240 <_start@@Base+0x80>
   11224:	ldr	r3, [pc, #24]	; 11244 <_start@@Base+0x84>
   11228:	cmp	r3, r0
   1122c:	bxeq	lr
   11230:	ldr	r3, [pc, #16]	; 11248 <_start@@Base+0x88>
   11234:	cmp	r3, #0
   11238:	bxeq	lr
   1123c:	bx	r3
   11240:	muleq	r2, r4, r0
   11244:	muleq	r2, r4, r0
   11248:	andeq	r0, r0, r0
   1124c:	ldr	r0, [pc, #36]	; 11278 <_start@@Base+0xb8>
   11250:	ldr	r1, [pc, #36]	; 1127c <_start@@Base+0xbc>
   11254:	sub	r1, r1, r0
   11258:	asr	r1, r1, #2
   1125c:	add	r1, r1, r1, lsr #31
   11260:	asrs	r1, r1, #1
   11264:	bxeq	lr
   11268:	ldr	r3, [pc, #16]	; 11280 <_start@@Base+0xc0>
   1126c:	cmp	r3, #0
   11270:	bxeq	lr
   11274:	bx	r3
   11278:	muleq	r2, r4, r0
   1127c:	muleq	r2, r4, r0
   11280:	andeq	r0, r0, r0
   11284:	push	{r4, lr}
   11288:	ldr	r4, [pc, #24]	; 112a8 <_start@@Base+0xe8>
   1128c:	ldrb	r3, [r4]
   11290:	cmp	r3, #0
   11294:	popne	{r4, pc}
   11298:	bl	11220 <_start@@Base+0x60>
   1129c:	mov	r3, #1
   112a0:	strb	r3, [r4]
   112a4:	pop	{r4, pc}
   112a8:	andeq	r3, r2, r4, lsr #1
   112ac:	b	1124c <_start@@Base+0x8c>
   112b0:	movw	r0, #6036	; 0x1794
   112b4:	movt	r0, #1
   112b8:	str	r4, [sp, #-8]!
   112bc:	str	lr, [sp, #4]
   112c0:	bl	10c60 <puts@plt>
   112c4:	movw	r0, #6044	; 0x179c
   112c8:	movt	r0, #1
   112cc:	bl	10c60 <puts@plt>
   112d0:	movw	r0, #6100	; 0x17d4
   112d4:	movt	r0, #1
   112d8:	bl	10c60 <puts@plt>
   112dc:	movw	r0, #6172	; 0x181c
   112e0:	movt	r0, #1
   112e4:	bl	10c60 <puts@plt>
   112e8:	movw	r0, #6192	; 0x1830
   112ec:	movt	r0, #1
   112f0:	bl	10c60 <puts@plt>
   112f4:	movw	r0, #6224	; 0x1850
   112f8:	movt	r0, #1
   112fc:	bl	10c60 <puts@plt>
   11300:	movw	r0, #6304	; 0x18a0
   11304:	movt	r0, #1
   11308:	bl	10c60 <puts@plt>
   1130c:	movw	r0, #6376	; 0x18e8
   11310:	movt	r0, #1
   11314:	bl	10c60 <puts@plt>
   11318:	movw	r0, #6452	; 0x1934
   1131c:	movt	r0, #1
   11320:	bl	10c60 <puts@plt>
   11324:	movw	r0, #6476	; 0x194c
   11328:	movt	r0, #1
   1132c:	bl	10c60 <puts@plt>
   11330:	movw	r0, #6540	; 0x198c
   11334:	movt	r0, #1
   11338:	bl	10c60 <puts@plt>
   1133c:	movw	r0, #6596	; 0x19c4
   11340:	movt	r0, #1
   11344:	bl	10c60 <puts@plt>
   11348:	movw	r0, #6624	; 0x19e0
   1134c:	movt	r0, #1
   11350:	bl	10c60 <puts@plt>
   11354:	movw	r0, #6696	; 0x1a28
   11358:	movt	r0, #1
   1135c:	bl	10c60 <puts@plt>
   11360:	movw	r0, #6720	; 0x1a40
   11364:	movt	r0, #1
   11368:	bl	10c60 <puts@plt>
   1136c:	mov	r0, #10
   11370:	bl	10ccc <putchar@plt>
   11374:	movw	r0, #6784	; 0x1a80
   11378:	movt	r0, #1
   1137c:	bl	10c60 <puts@plt>
   11380:	movw	r0, #6864	; 0x1ad0
   11384:	movt	r0, #1
   11388:	bl	10c60 <puts@plt>
   1138c:	mov	r0, #10
   11390:	bl	10ccc <putchar@plt>
   11394:	movw	r0, #6892	; 0x1aec
   11398:	movt	r0, #1
   1139c:	bl	10c60 <puts@plt>
   113a0:	movw	r0, #6920	; 0x1b08
   113a4:	movt	r0, #1
   113a8:	bl	10c60 <puts@plt>
   113ac:	mov	r0, #10
   113b0:	bl	10ccc <putchar@plt>
   113b4:	movw	r0, #6952	; 0x1b28
   113b8:	movt	r0, #1
   113bc:	bl	10c60 <puts@plt>
   113c0:	movw	r0, #6980	; 0x1b44
   113c4:	movt	r0, #1
   113c8:	bl	10c60 <puts@plt>
   113cc:	mov	r0, #10
   113d0:	bl	10ccc <putchar@plt>
   113d4:	movw	r0, #7032	; 0x1b78
   113d8:	movt	r0, #1
   113dc:	bl	10c60 <puts@plt>
   113e0:	movw	r0, #7112	; 0x1bc8
   113e4:	movt	r0, #1
   113e8:	bl	10c60 <puts@plt>
   113ec:	movw	r0, #7188	; 0x1c14
   113f0:	movt	r0, #1
   113f4:	bl	10c60 <puts@plt>
   113f8:	movw	r0, #7232	; 0x1c40
   113fc:	movt	r0, #1
   11400:	bl	10c60 <puts@plt>
   11404:	movw	r0, #7308	; 0x1c8c
   11408:	movt	r0, #1
   1140c:	bl	10c60 <puts@plt>
   11410:	movw	r0, #7380	; 0x1cd4
   11414:	movt	r0, #1
   11418:	bl	10c60 <puts@plt>
   1141c:	movw	r0, #7444	; 0x1d14
   11420:	movt	r0, #1
   11424:	bl	10c60 <puts@plt>
   11428:	mov	r0, #10
   1142c:	ldr	r4, [sp]
   11430:	ldr	lr, [sp, #4]
   11434:	add	sp, sp, #8
   11438:	b	10ccc <putchar@plt>
   1143c:	str	r4, [sp, #-8]!
   11440:	mov	r4, r0
   11444:	str	lr, [sp, #4]
   11448:	sub	sp, sp, #40	; 0x28
   1144c:	bl	10c60 <puts@plt>
   11450:	add	ip, sp, #28
   11454:	add	r2, sp, #24
   11458:	mov	r0, r4
   1145c:	add	r3, sp, #20
   11460:	add	r1, sp, #32
   11464:	stm	sp, {r2, ip}
   11468:	add	r2, sp, #16
   1146c:	bl	10c30 <coda_recognize_file@plt>
   11470:	cmp	r0, #0
   11474:	bne	115bc <_start@@Base+0x3fc>
   11478:	movw	r3, #12456	; 0x30a8
   1147c:	movt	r3, #2
   11480:	ldr	r3, [r3]
   11484:	cmp	r3, #0
   11488:	beq	114a4 <_start@@Base+0x2e4>
   1148c:	ldr	r3, [sp, #20]
   11490:	cmp	r3, #0
   11494:	beq	11620 <_start@@Base+0x460>
   11498:	ldr	r3, [sp, #24]
   1149c:	cmp	r3, #0
   114a0:	beq	11620 <_start@@Base+0x460>
   114a4:	movw	r3, #12464	; 0x30b0
   114a8:	movt	r3, #2
   114ac:	ldr	r3, [r3]
   114b0:	cmp	r3, #0
   114b4:	bne	11570 <_start@@Base+0x3b0>
   114b8:	mov	r0, r4
   114bc:	add	r1, sp, #12
   114c0:	bl	10be8 <coda_open@plt>
   114c4:	cmp	r0, #0
   114c8:	bne	11524 <_start@@Base+0x364>
   114cc:	movw	r3, #12468	; 0x30b4
   114d0:	movt	r3, #2
   114d4:	ldr	r0, [sp, #12]
   114d8:	movw	r2, #5820	; 0x16bc
   114dc:	movt	r2, #1
   114e0:	ldr	r1, [r3]
   114e4:	mov	r3, #0
   114e8:	clz	r1, r1
   114ec:	lsr	r1, r1, #5
   114f0:	bl	10c6c <coda_product_check@plt>
   114f4:	cmp	r0, #0
   114f8:	bne	11678 <_start@@Base+0x4b8>
   114fc:	ldr	r0, [sp, #12]
   11500:	bl	10cd8 <coda_close@plt>
   11504:	cmp	r0, #0
   11508:	bne	11604 <_start@@Base+0x444>
   1150c:	mov	r0, #10
   11510:	bl	10ccc <putchar@plt>
   11514:	add	sp, sp, #40	; 0x28
   11518:	ldr	r4, [sp]
   1151c:	add	sp, sp, #4
   11520:	pop	{pc}		; (ldr pc, [sp], #4)
   11524:	bl	10cfc <coda_get_errno@plt>
   11528:	ldr	r3, [r0]
   1152c:	cmn	r3, #21
   11530:	beq	1164c <_start@@Base+0x48c>
   11534:	bl	10cfc <coda_get_errno@plt>
   11538:	ldr	r0, [r0]
   1153c:	bl	10ce4 <coda_errno_to_string@plt>
   11540:	mov	r1, r0
   11544:	movw	r0, #7508	; 0x1d54
   11548:	movt	r0, #1
   1154c:	bl	10bd0 <printf@plt>
   11550:	mov	r2, #1
   11554:	movw	r3, #12460	; 0x30ac
   11558:	movt	r3, #2
   1155c:	str	r2, [r3]
   11560:	add	sp, sp, #40	; 0x28
   11564:	ldr	r4, [sp]
   11568:	add	sp, sp, #4
   1156c:	pop	{pc}		; (ldr pc, [sp], #4)
   11570:	ldr	r0, [sp, #16]
   11574:	bl	10c48 <coda_type_get_format_name@plt>
   11578:	mov	r1, r0
   1157c:	movw	r0, #7568	; 0x1d90
   11580:	movt	r0, #1
   11584:	bl	10bd0 <printf@plt>
   11588:	ldr	r1, [sp, #20]
   1158c:	cmp	r1, #0
   11590:	beq	115b0 <_start@@Base+0x3f0>
   11594:	ldr	r2, [sp, #24]
   11598:	cmp	r2, #0
   1159c:	beq	115b0 <_start@@Base+0x3f0>
   115a0:	movw	r0, #7592	; 0x1da8
   115a4:	movt	r0, #1
   115a8:	ldr	r3, [sp, #28]
   115ac:	bl	10bd0 <printf@plt>
   115b0:	mov	r0, #10
   115b4:	bl	10ccc <putchar@plt>
   115b8:	b	114b8 <_start@@Base+0x2f8>
   115bc:	bl	10cfc <coda_get_errno@plt>
   115c0:	ldr	r0, [r0]
   115c4:	bl	10ce4 <coda_errno_to_string@plt>
   115c8:	mov	r1, r0
   115cc:	movw	r0, #7508	; 0x1d54
   115d0:	movt	r0, #1
   115d4:	bl	10bd0 <printf@plt>
   115d8:	mov	r1, #0
   115dc:	mov	r0, r1
   115e0:	bl	10bdc <coda_set_error@plt>
   115e4:	mov	r2, #1
   115e8:	movw	r3, #12460	; 0x30ac
   115ec:	movt	r3, #2
   115f0:	str	r2, [r3]
   115f4:	add	sp, sp, #40	; 0x28
   115f8:	ldr	r4, [sp]
   115fc:	add	sp, sp, #4
   11600:	pop	{pc}		; (ldr pc, [sp], #4)
   11604:	bl	10cfc <coda_get_errno@plt>
   11608:	ldr	r0, [r0]
   1160c:	bl	10ce4 <coda_errno_to_string@plt>
   11610:	mov	r1, r0
   11614:	movw	r0, #7604	; 0x1db4
   11618:	movt	r0, #1
   1161c:	b	1154c <_start@@Base+0x38c>
   11620:	movw	r0, #7524	; 0x1d64
   11624:	movt	r0, #1
   11628:	bl	10c60 <puts@plt>
   1162c:	mov	r2, #1
   11630:	movw	r3, #12460	; 0x30ac
   11634:	movt	r3, #2
   11638:	str	r2, [r3]
   1163c:	add	sp, sp, #40	; 0x28
   11640:	ldr	r4, [sp]
   11644:	add	sp, sp, #4
   11648:	pop	{pc}		; (ldr pc, [sp], #4)
   1164c:	mov	r0, #0
   11650:	bl	10c00 <coda_set_option_use_mmap@plt>
   11654:	add	r1, sp, #12
   11658:	mov	r0, r4
   1165c:	bl	10be8 <coda_open@plt>
   11660:	mov	r4, r0
   11664:	mov	r0, #1
   11668:	bl	10c00 <coda_set_option_use_mmap@plt>
   1166c:	cmp	r4, #0
   11670:	bne	11534 <_start@@Base+0x374>
   11674:	b	114cc <_start@@Base+0x30c>
   11678:	bl	10cfc <coda_get_errno@plt>
   1167c:	ldr	r0, [r0]
   11680:	bl	10ce4 <coda_errno_to_string@plt>
   11684:	mov	r1, r0
   11688:	movw	r0, #7508	; 0x1d54
   1168c:	movt	r0, #1
   11690:	bl	10bd0 <printf@plt>
   11694:	mov	r2, #1
   11698:	movw	r3, #12460	; 0x30ac
   1169c:	movt	r3, #2
   116a0:	ldr	r0, [sp, #12]
   116a4:	str	r2, [r3]
   116a8:	bl	10cd8 <coda_close@plt>
   116ac:	add	sp, sp, #40	; 0x28
   116b0:	ldr	r4, [sp]
   116b4:	add	sp, sp, #4
   116b8:	pop	{pc}		; (ldr pc, [sp], #4)
   116bc:	str	r4, [sp, #-8]!
   116c0:	mov	r4, r0
   116c4:	movw	r0, #7620	; 0x1dc4
   116c8:	movt	r0, #1
   116cc:	str	lr, [sp, #4]
   116d0:	bl	10bd0 <printf@plt>
   116d4:	cmp	r4, #0
   116d8:	beq	116f8 <_start@@Base+0x538>
   116dc:	movw	r0, #7632	; 0x1dd0
   116e0:	movt	r0, #1
   116e4:	bl	10bd0 <printf@plt>
   116e8:	movw	r1, #3024	; 0xbd0
   116ec:	movt	r1, #1
   116f0:	mov	r0, r4
   116f4:	bl	10c0c <coda_cursor_print_path@plt>
   116f8:	mov	r0, #10
   116fc:	bl	10ccc <putchar@plt>
   11700:	movw	r3, #12460	; 0x30ac
   11704:	movt	r3, #2
   11708:	ldr	r4, [sp]
   1170c:	mov	r2, #1
   11710:	add	sp, sp, #4
   11714:	str	r2, [r3]
   11718:	pop	{pc}		; (ldr pc, [sp], #4)

0001171c <__libc_csu_init@@Base>:
   1171c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   11720:	mov	r7, r0
   11724:	ldr	r6, [pc, #72]	; 11774 <__libc_csu_init@@Base+0x58>
   11728:	ldr	r5, [pc, #72]	; 11778 <__libc_csu_init@@Base+0x5c>
   1172c:	add	r6, pc, r6
   11730:	add	r5, pc, r5
   11734:	sub	r6, r6, r5
   11738:	mov	r8, r1
   1173c:	mov	r9, r2
   11740:	bl	10b98 <coda_set_option_perform_boundary_checks@plt-0x20>
   11744:	asrs	r6, r6, #2
   11748:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1174c:	mov	r4, #0
   11750:	add	r4, r4, #1
   11754:	ldr	r3, [r5], #4
   11758:	mov	r2, r9
   1175c:	mov	r1, r8
   11760:	mov	r0, r7
   11764:	blx	r3
   11768:	cmp	r6, r4
   1176c:	bne	11750 <__libc_csu_init@@Base+0x34>
   11770:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   11774:	andeq	r1, r1, r8, asr #15
   11778:	andeq	r1, r1, r0, asr #15

0001177c <__libc_csu_fini@@Base>:
   1177c:	bx	lr

Disassembly of section .fini:

00011780 <.fini>:
   11780:	push	{r3, lr}
   11784:	pop	{r3, pc}
