
../compcert-repos/stcorp-coda-3a25f25/CMakeFiles/codadump.dir/tools/codadump/codadump-debug.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <ff_printf>:
       0:	push	{r0, r1, r2, r3}
       4:	movw	r3, #0
       8:	movt	r3, #0
       c:	push	{lr}		; (str lr, [sp, #-4]!)
      10:	sub	sp, sp, #12
      14:	ldr	r1, [sp, #16]
      18:	add	ip, sp, #20
      1c:	mov	r2, ip
      20:	ldr	r0, [r3]
      24:	str	ip, [sp, #4]
      28:	bl	0 <vfprintf>
      2c:	add	sp, sp, #12
      30:	pop	{lr}		; (ldr lr, [sp], #4)
      34:	add	sp, sp, #16
      38:	bx	lr

0000003c <print_escaped>:
      3c:	strd	r4, [sp, #-24]!	; 0xffffffe8
      40:	subs	r5, r1, #0
      44:	strd	r6, [sp, #8]
      48:	str	r8, [sp, #16]
      4c:	str	lr, [sp, #20]
      50:	ble	e0 <print_escaped+0xa4>
      54:	sub	r4, r0, #1
      58:	movw	r6, #0
      5c:	movt	r6, #0
      60:	movw	r8, #0
      64:	movt	r8, #0
      68:	movw	r7, #0
      6c:	movt	r7, #0
      70:	add	r5, r4, r5
      74:	b	a8 <print_escaped+0x6c>
      78:	cmp	r1, #12
      7c:	beq	158 <print_escaped+0x11c>
      80:	bcc	148 <print_escaped+0x10c>
      84:	cmp	r1, #13
      88:	beq	138 <print_escaped+0xfc>
      8c:	cmp	r1, #92	; 0x5c
      90:	bne	120 <print_escaped+0xe4>
      94:	movw	r0, #0
      98:	movt	r0, #0
      9c:	bl	0 <ff_printf>
      a0:	cmp	r4, r5
      a4:	beq	e0 <print_escaped+0xa4>
      a8:	ldrb	r1, [r4, #1]!
      ac:	cmp	r1, #10
      b0:	beq	f4 <print_escaped+0xb8>
      b4:	bhi	78 <print_escaped+0x3c>
      b8:	cmp	r1, #8
      bc:	beq	110 <print_escaped+0xd4>
      c0:	bhi	100 <print_escaped+0xc4>
      c4:	cmp	r1, #7
      c8:	bne	120 <print_escaped+0xe4>
      cc:	movw	r0, #0
      d0:	movt	r0, #0
      d4:	bl	0 <ff_printf>
      d8:	cmp	r4, r5
      dc:	bne	a8 <print_escaped+0x6c>
      e0:	ldrd	r4, [sp]
      e4:	ldrd	r6, [sp, #8]
      e8:	ldr	r8, [sp, #16]
      ec:	add	sp, sp, #20
      f0:	pop	{pc}		; (ldr pc, [sp], #4)
      f4:	mov	r0, r6
      f8:	bl	0 <ff_printf>
      fc:	b	a0 <print_escaped+0x64>
     100:	movw	r0, #0
     104:	movt	r0, #0
     108:	bl	0 <ff_printf>
     10c:	b	a0 <print_escaped+0x64>
     110:	movw	r0, #0
     114:	movt	r0, #0
     118:	bl	0 <ff_printf>
     11c:	b	a0 <print_escaped+0x64>
     120:	sub	r3, r1, #32
     124:	cmp	r3, #94	; 0x5e
     128:	movls	r0, r7
     12c:	movhi	r0, r8
     130:	bl	0 <ff_printf>
     134:	b	a0 <print_escaped+0x64>
     138:	movw	r0, #0
     13c:	movt	r0, #0
     140:	bl	0 <ff_printf>
     144:	b	a0 <print_escaped+0x64>
     148:	movw	r0, #0
     14c:	movt	r0, #0
     150:	bl	0 <ff_printf>
     154:	b	a0 <print_escaped+0x64>
     158:	movw	r0, #0
     15c:	movt	r0, #0
     160:	bl	0 <ff_printf>
     164:	b	a0 <print_escaped+0x64>

00000168 <fi_printf>:
     168:	push	{r0, r1, r2, r3}
     16c:	movw	r3, #0
     170:	movt	r3, #0
     174:	strd	r4, [sp, #-16]!
     178:	ldr	r4, [r3]
     17c:	str	r6, [sp, #8]
     180:	str	lr, [sp, #12]
     184:	sub	sp, sp, #8
     188:	cmp	r4, #0
     18c:	blt	1f4 <fi_printf+0x8c>
     190:	movwne	r6, #0
     194:	movw	r5, #0
     198:	movt	r5, #0
     19c:	movtne	r6, #0
     1a0:	beq	1c0 <fi_printf+0x58>
     1a4:	mov	r2, #2
     1a8:	mov	r1, #1
     1ac:	ldr	r3, [r5]
     1b0:	mov	r0, r6
     1b4:	bl	0 <fwrite>
     1b8:	subs	r4, r4, #1
     1bc:	bne	1a4 <fi_printf+0x3c>
     1c0:	ldr	r1, [sp, #24]
     1c4:	add	r3, sp, #28
     1c8:	mov	r2, r3
     1cc:	ldr	r0, [r5]
     1d0:	str	r3, [sp, #4]
     1d4:	bl	0 <vfprintf>
     1d8:	add	sp, sp, #8
     1dc:	ldrd	r4, [sp]
     1e0:	ldr	r6, [sp, #8]
     1e4:	ldr	lr, [sp, #12]
     1e8:	add	sp, sp, #16
     1ec:	add	sp, sp, #16
     1f0:	bx	lr
     1f4:	movw	r3, #0
     1f8:	movt	r3, #0
     1fc:	movw	r1, #0
     200:	movt	r1, #0
     204:	movw	r0, #0
     208:	movt	r0, #0
     20c:	mov	r2, #44	; 0x2c
     210:	bl	0 <__assert_fail>

00000214 <print_data>:
     214:	strd	r4, [sp, #-36]!	; 0xffffffdc
     218:	mov	r4, r0
     21c:	strd	r6, [sp, #8]
     220:	mov	r6, r1
     224:	strd	r8, [sp, #16]
     228:	strd	sl, [sp, #24]
     22c:	str	lr, [sp, #32]
     230:	sub	sp, sp, #652	; 0x28c
     234:	add	r1, sp, #48	; 0x30
     238:	bl	0 <coda_cursor_has_attributes>
     23c:	cmp	r0, #0
     240:	bne	420 <print_data+0x20c>
     244:	ldr	r3, [sp, #48]	; 0x30
     248:	cmp	r3, #0
     24c:	bne	3cc <print_data+0x1b8>
     250:	add	r1, sp, #44	; 0x2c
     254:	mov	r0, r4
     258:	bl	0 <coda_cursor_get_type_class>
     25c:	cmp	r0, #0
     260:	bne	3c4 <print_data+0x1b0>
     264:	ldr	r3, [sp, #44]	; 0x2c
     268:	cmp	r3, #6
     26c:	ldrls	pc, [pc, r3, lsl #2]
     270:	b	3a8 <print_data+0x194>
     274:	.word	0x00000290
     278:	.word	0x0000047c
     27c:	.word	0x000006a0
     280:	.word	0x000006a0
     284:	.word	0x000006a0
     288:	.word	0x000006a0
     28c:	.word	0x00000428
     290:	add	r1, sp, #52	; 0x34
     294:	mov	r0, r4
     298:	bl	0 <coda_cursor_get_num_elements>
     29c:	cmp	r0, #0
     2a0:	bne	728 <print_data+0x514>
     2a4:	ldr	r3, [sp, #52]	; 0x34
     2a8:	cmp	r3, #0
     2ac:	ble	3a8 <print_data+0x194>
     2b0:	add	r1, sp, #56	; 0x38
     2b4:	mov	r0, r4
     2b8:	bl	0 <coda_cursor_get_type>
     2bc:	cmp	r0, #0
     2c0:	bne	d1c <print_data+0xb08>
     2c4:	add	r1, sp, #60	; 0x3c
     2c8:	ldr	r0, [sp, #56]	; 0x38
     2cc:	bl	0 <coda_type_get_record_union_status>
     2d0:	cmp	r0, #0
     2d4:	bne	d14 <print_data+0xb00>
     2d8:	ldr	r1, [sp, #60]	; 0x3c
     2dc:	cmp	r1, #0
     2e0:	beq	8b0 <print_data+0x69c>
     2e4:	add	r1, sp, #64	; 0x40
     2e8:	mov	r0, r4
     2ec:	bl	0 <coda_cursor_get_available_union_field_index>
     2f0:	cmp	r0, #0
     2f4:	bne	dd0 <print_data+0xbbc>
     2f8:	add	r2, sp, #72	; 0x48
     2fc:	ldr	r0, [sp, #56]	; 0x38
     300:	ldr	r1, [sp, #64]	; 0x40
     304:	bl	0 <coda_type_get_record_field_name>
     308:	cmp	r0, #0
     30c:	bne	dc8 <print_data+0xbb4>
     310:	mov	r0, r4
     314:	ldr	r1, [sp, #64]	; 0x40
     318:	bl	0 <coda_cursor_goto_record_field_by_index>
     31c:	cmp	r0, #0
     320:	bne	dc0 <print_data+0xbac>
     324:	movw	r0, #0
     328:	movt	r0, #0
     32c:	ldr	r1, [sp, #72]	; 0x48
     330:	bl	168 <fi_printf>
     334:	movw	r3, #0
     338:	movt	r3, #0
     33c:	ldr	r3, [r3]
     340:	cmp	r3, #0
     344:	bne	d50 <print_data+0xb3c>
     348:	movw	r0, #0
     34c:	movt	r0, #0
     350:	bl	0 <ff_printf>
     354:	movw	r5, #0
     358:	movt	r5, #0
     35c:	movw	r2, #0
     360:	movt	r2, #0
     364:	ldr	r3, [r5]
     368:	ldr	r2, [r2]
     36c:	add	r3, r3, #1
     370:	cmp	r2, r6
     374:	str	r3, [r5]
     378:	movle	r1, #0
     37c:	movgt	r1, #1
     380:	orrs	r3, r1, r2, lsr #31
     384:	beq	e28 <print_data+0xc14>
     388:	add	r1, r6, #1
     38c:	mov	r0, r4
     390:	bl	214 <print_data>
     394:	ldr	r3, [r5]
     398:	mov	r0, r4
     39c:	sub	r3, r3, #1
     3a0:	str	r3, [r5]
     3a4:	bl	0 <coda_cursor_goto_parent>
     3a8:	add	sp, sp, #652	; 0x28c
     3ac:	ldrd	r4, [sp]
     3b0:	ldrd	r6, [sp, #8]
     3b4:	ldrd	r8, [sp, #16]
     3b8:	ldrd	sl, [sp, #24]
     3bc:	add	sp, sp, #32
     3c0:	pop	{pc}		; (ldr pc, [sp], #4)
     3c4:	bl	0 <handle_coda_error>
     3c8:	b	264 <print_data+0x50>
     3cc:	mov	r0, r4
     3d0:	bl	0 <coda_cursor_goto_attributes>
     3d4:	cmp	r0, #0
     3d8:	bne	720 <print_data+0x50c>
     3dc:	movw	r0, #0
     3e0:	movt	r0, #0
     3e4:	movw	r5, #0
     3e8:	movt	r5, #0
     3ec:	bl	168 <fi_printf>
     3f0:	ldr	r3, [r5]
     3f4:	mov	r0, r4
     3f8:	mov	r1, r6
     3fc:	add	r3, r3, #1
     400:	str	r3, [r5]
     404:	bl	214 <print_data>
     408:	ldr	r3, [r5]
     40c:	mov	r0, r4
     410:	sub	r3, r3, #1
     414:	str	r3, [r5]
     418:	bl	0 <coda_cursor_goto_parent>
     41c:	b	250 <print_data+0x3c>
     420:	bl	0 <handle_coda_error>
     424:	b	244 <print_data+0x30>
     428:	add	r1, sp, #72	; 0x48
     42c:	mov	r0, r4
     430:	bl	0 <coda_cursor_get_special_type>
     434:	cmp	r0, #0
     438:	bne	764 <print_data+0x550>
     43c:	ldr	r0, [sp, #72]	; 0x48
     440:	cmp	r0, #0
     444:	bne	730 <print_data+0x51c>
     448:	bl	0 <coda_type_get_special_type_name>
     44c:	mov	r1, r0
     450:	movw	r0, #0
     454:	movt	r0, #0
     458:	bl	168 <fi_printf>
     45c:	ldr	r3, [sp, #72]	; 0x48
     460:	cmp	r3, #3
     464:	ldrls	pc, [pc, r3, lsl #2]
     468:	b	3a8 <print_data+0x194>
     46c:	.word	0x00000878
     470:	.word	0x00000888
     474:	.word	0x00000830
     478:	.word	0x000007fc
     47c:	add	r1, sp, #60	; 0x3c
     480:	add	r2, sp, #96	; 0x60
     484:	mov	r0, r4
     488:	bl	0 <coda_cursor_get_array_dim>
     48c:	cmp	r0, #0
     490:	bne	76c <print_data+0x558>
     494:	ldr	r1, [sp, #60]	; 0x3c
     498:	cmp	r1, #0
     49c:	str	r1, [sp, #16]
     4a0:	blt	3a8 <print_data+0x194>
     4a4:	beq	df0 <print_data+0xbdc>
     4a8:	add	r3, sp, #92	; 0x5c
     4ac:	add	r2, sp, #124	; 0x7c
     4b0:	add	fp, r3, r1, lsl #2
     4b4:	mov	r8, #1
     4b8:	mov	r0, #0
     4bc:	ldr	r1, [r3, #4]!
     4c0:	str	r0, [r2, #4]!
     4c4:	cmp	r3, fp
     4c8:	mul	r8, r1, r8
     4cc:	bne	4bc <print_data+0x2a8>
     4d0:	cmp	r8, #0
     4d4:	subgt	r3, r8, #1
     4d8:	strgt	r3, [sp, #16]
     4dc:	ble	3a8 <print_data+0x194>
     4e0:	mov	r0, r4
     4e4:	bl	0 <coda_cursor_goto_first_array_element>
     4e8:	cmp	r0, #0
     4ec:	bne	d2c <print_data+0xb18>
     4f0:	movw	r3, #0
     4f4:	movt	r3, #0
     4f8:	movw	r5, #0
     4fc:	movt	r5, #0
     500:	str	r3, [sp, #8]
     504:	movw	r3, #0
     508:	movt	r3, #0
     50c:	movw	fp, #0
     510:	movt	fp, #0
     514:	str	r3, [sp, #20]
     518:	mov	r3, #0
     51c:	movw	r9, #0
     520:	movt	r9, #0
     524:	movw	sl, #0
     528:	movt	sl, #0
     52c:	str	r8, [sp, #24]
     530:	mov	r8, r3
     534:	str	r6, [sp, #28]
     538:	ldr	r0, [sp, #20]
     53c:	bl	168 <fi_printf>
     540:	ldr	r3, [sp, #60]	; 0x3c
     544:	cmp	r3, #0
     548:	addgt	r7, sp, #124	; 0x7c
     54c:	movgt	r6, #0
     550:	bgt	564 <print_data+0x350>
     554:	b	598 <print_data+0x384>
     558:	add	r6, r6, #1
     55c:	cmp	r6, r3
     560:	bge	598 <print_data+0x384>
     564:	mov	r0, r9
     568:	ldr	r1, [r7, #4]!
     56c:	bl	0 <ff_printf>
     570:	ldr	r3, [sp, #60]	; 0x3c
     574:	sub	r2, r3, #1
     578:	cmp	r2, r6
     57c:	ble	558 <print_data+0x344>
     580:	mov	r0, sl
     584:	add	r6, r6, #1
     588:	bl	0 <ff_printf>
     58c:	ldr	r3, [sp, #60]	; 0x3c
     590:	cmp	r6, r3
     594:	blt	564 <print_data+0x350>
     598:	movw	r0, #0
     59c:	movt	r0, #0
     5a0:	bl	0 <ff_printf>
     5a4:	ldr	r3, [sp, #8]
     5a8:	ldr	r3, [r3]
     5ac:	cmp	r3, #0
     5b0:	bne	be0 <print_data+0x9cc>
     5b4:	movw	r0, #0
     5b8:	movt	r0, #0
     5bc:	bl	0 <ff_printf>
     5c0:	ldr	r3, [r5]
     5c4:	ldr	r2, [fp]
     5c8:	ldr	r0, [sp, #28]
     5cc:	add	r3, r3, #1
     5d0:	str	r3, [r5]
     5d4:	cmp	r2, r0
     5d8:	movle	r1, #0
     5dc:	movgt	r1, #1
     5e0:	orrs	r3, r1, r2, lsr #31
     5e4:	beq	cf4 <print_data+0xae0>
     5e8:	add	r1, r0, #1
     5ec:	mov	r0, r4
     5f0:	bl	214 <print_data>
     5f4:	ldr	r3, [r5]
     5f8:	ldr	r0, [sp, #60]	; 0x3c
     5fc:	sub	r3, r3, #1
     600:	subs	r1, r0, #1
     604:	str	r3, [r5]
     608:	bmi	678 <print_data+0x464>
     60c:	add	r3, sp, #648	; 0x288
     610:	add	r2, r3, r1, lsl #2
     614:	ldr	ip, [r2, #-552]	; 0xfffffdd8
     618:	ldr	r3, [r2, #-520]	; 0xfffffdf8
     61c:	add	r3, r3, #1
     620:	cmp	ip, r3
     624:	str	r3, [r2, #-520]	; 0xfffffdf8
     628:	bne	678 <print_data+0x464>
     62c:	sub	r0, r0, #-1073741822	; 0xc0000002
     630:	add	r3, sp, #648	; 0x288
     634:	lsl	r0, r0, #2
     638:	mov	lr, #0
     63c:	add	r2, r3, r0
     640:	add	r3, sp, #96	; 0x60
     644:	add	r0, r3, r0
     648:	sub	r2, r2, #516	; 0x204
     64c:	b	668 <print_data+0x454>
     650:	ldr	r3, [r2]
     654:	ldr	ip, [r0], #-4
     658:	add	r3, r3, #1
     65c:	cmp	r3, ip
     660:	str	r3, [r2]
     664:	bne	678 <print_data+0x464>
     668:	sub	r1, r1, #1
     66c:	str	lr, [r2], #-4
     670:	cmn	r1, #1
     674:	bne	650 <print_data+0x43c>
     678:	ldr	r3, [sp, #16]
     67c:	cmp	r8, r3
     680:	blt	bc8 <print_data+0x9b4>
     684:	ldr	r3, [sp, #24]
     688:	add	r8, r8, #1
     68c:	cmp	r8, r3
     690:	blt	538 <print_data+0x324>
     694:	mov	r0, r4
     698:	bl	0 <coda_cursor_goto_parent>
     69c:	b	3a8 <print_data+0x194>
     6a0:	add	r1, sp, #72	; 0x48
     6a4:	mov	r0, r4
     6a8:	bl	0 <coda_cursor_has_ascii_content>
     6ac:	cmp	r0, #0
     6b0:	bne	7f4 <print_data+0x5e0>
     6b4:	ldr	r3, [sp, #72]	; 0x48
     6b8:	cmp	r3, #0
     6bc:	bne	77c <print_data+0x568>
     6c0:	add	r1, sp, #64	; 0x40
     6c4:	mov	r0, r4
     6c8:	bl	0 <coda_cursor_get_read_type>
     6cc:	cmp	r0, #0
     6d0:	bne	774 <print_data+0x560>
     6d4:	ldr	r3, [sp, #64]	; 0x40
     6d8:	add	r3, r3, #1
     6dc:	cmp	r3, #13
     6e0:	ldrls	pc, [pc, r3, lsl #2]
     6e4:	b	3a8 <print_data+0x194>
     6e8:	.word	0x00000b60
     6ec:	.word	0x00000b88
     6f0:	.word	0x00000b04
     6f4:	.word	0x00000b88
     6f8:	.word	0x00000b04
     6fc:	.word	0x00000b88
     700:	.word	0x00000b04
     704:	.word	0x00000b2c
     708:	.word	0x00000ad0
     70c:	.word	0x00000a98
     710:	.word	0x00000a98
     714:	.word	0x00000b60
     718:	.word	0x00000b60
     71c:	.word	0x000009a8
     720:	bl	0 <handle_coda_error>
     724:	b	3dc <print_data+0x1c8>
     728:	bl	0 <handle_coda_error>
     72c:	b	2a4 <print_data+0x90>
     730:	mov	r2, #520	; 0x208
     734:	mov	r1, r4
     738:	add	r0, sp, #128	; 0x80
     73c:	bl	0 <memcpy>
     740:	add	r0, sp, #128	; 0x80
     744:	bl	0 <coda_cursor_use_base_type_of_special_type>
     748:	cmp	r0, #0
     74c:	bne	bc0 <print_data+0x9ac>
     750:	add	r0, sp, #128	; 0x80
     754:	mov	r1, r6
     758:	bl	214 <print_data>
     75c:	ldr	r0, [sp, #72]	; 0x48
     760:	b	448 <print_data+0x234>
     764:	bl	0 <handle_coda_error>
     768:	b	43c <print_data+0x228>
     76c:	bl	0 <handle_coda_error>
     770:	b	494 <print_data+0x280>
     774:	bl	0 <handle_coda_error>
     778:	b	6d4 <print_data+0x4c0>
     77c:	add	r1, sp, #128	; 0x80
     780:	mov	r0, r4
     784:	bl	0 <coda_cursor_get_string_length>
     788:	cmp	r0, #0
     78c:	bne	bb8 <print_data+0x9a4>
     790:	ldr	r0, [sp, #128]	; 0x80
     794:	add	r0, r0, #1
     798:	bl	0 <malloc>
     79c:	subs	r5, r0, #0
     7a0:	beq	df8 <print_data+0xbe4>
     7a4:	ldr	r2, [sp, #128]	; 0x80
     7a8:	mov	r1, r5
     7ac:	mov	r0, r4
     7b0:	add	r2, r2, #1
     7b4:	bl	0 <coda_cursor_read_string>
     7b8:	cmp	r0, #0
     7bc:	bne	bb0 <print_data+0x99c>
     7c0:	movw	r0, #0
     7c4:	movt	r0, #0
     7c8:	bl	168 <fi_printf>
     7cc:	mov	r0, r5
     7d0:	ldr	r1, [sp, #128]	; 0x80
     7d4:	bl	3c <print_escaped>
     7d8:	movw	r0, #0
     7dc:	movt	r0, #0
     7e0:	ldr	r1, [sp, #128]	; 0x80
     7e4:	bl	0 <ff_printf>
     7e8:	mov	r0, r5
     7ec:	bl	0 <free>
     7f0:	b	6c0 <print_data+0x4ac>
     7f4:	bl	0 <handle_coda_error>
     7f8:	b	6b4 <print_data+0x4a0>
     7fc:	mov	r0, r4
     800:	add	r2, sp, #128	; 0x80
     804:	add	r1, sp, #96	; 0x60
     808:	bl	0 <coda_cursor_read_complex_double_split>
     80c:	cmp	r0, #0
     810:	bne	de8 <print_data+0xbd4>
     814:	movw	r0, #0
     818:	movt	r0, #0
     81c:	ldrd	r2, [sp, #96]	; 0x60
     820:	ldrd	r4, [sp, #128]	; 0x80
     824:	strd	r4, [sp]
     828:	bl	0 <ff_printf>
     82c:	b	3a8 <print_data+0x194>
     830:	mov	r0, r4
     834:	add	r1, sp, #96	; 0x60
     838:	bl	0 <coda_cursor_read_double>
     83c:	cmp	r0, #0
     840:	bne	de0 <print_data+0xbcc>
     844:	vldr	d0, [sp, #96]	; 0x60
     848:	bl	0 <coda_isNaN>
     84c:	cmp	r0, #0
     850:	bne	864 <print_data+0x650>
     854:	vldr	d0, [sp, #96]	; 0x60
     858:	bl	0 <coda_isInf>
     85c:	cmp	r0, #0
     860:	beq	e84 <print_data+0xc70>
     864:	movw	r0, #0
     868:	movt	r0, #0
     86c:	ldrd	r2, [sp, #96]	; 0x60
     870:	bl	0 <ff_printf>
     874:	b	3a8 <print_data+0x194>
     878:	movw	r0, #0
     87c:	movt	r0, #0
     880:	bl	0 <ff_printf>
     884:	b	3a8 <print_data+0x194>
     888:	mov	r0, r4
     88c:	add	r1, sp, #128	; 0x80
     890:	bl	0 <coda_cursor_read_double>
     894:	cmp	r0, #0
     898:	bne	dd8 <print_data+0xbc4>
     89c:	movw	r0, #0
     8a0:	movt	r0, #0
     8a4:	ldrd	r2, [sp, #128]	; 0x80
     8a8:	bl	0 <ff_printf>
     8ac:	b	3a8 <print_data+0x194>
     8b0:	mov	r0, r4
     8b4:	str	r1, [sp, #16]
     8b8:	bl	0 <coda_cursor_goto_first_record_field>
     8bc:	cmp	r0, #0
     8c0:	ldr	r1, [sp, #16]
     8c4:	bne	d44 <print_data+0xb30>
     8c8:	ldr	r3, [sp, #52]	; 0x34
     8cc:	mov	r2, #0
     8d0:	str	r2, [sp, #64]	; 0x40
     8d4:	cmp	r3, r2
     8d8:	ble	694 <print_data+0x480>
     8dc:	movw	r5, #0
     8e0:	movt	r5, #0
     8e4:	movw	sl, #0
     8e8:	movt	sl, #0
     8ec:	movw	fp, #0
     8f0:	movt	fp, #0
     8f4:	movw	r7, #0
     8f8:	movt	r7, #0
     8fc:	movw	r9, #0
     900:	movt	r9, #0
     904:	movw	r8, #0
     908:	movt	r8, #0
     90c:	add	r2, sp, #72	; 0x48
     910:	ldr	r0, [sp, #56]	; 0x38
     914:	bl	0 <coda_type_get_record_field_name>
     918:	cmp	r0, #0
     91c:	bne	cec <print_data+0xad8>
     920:	mov	r0, r7
     924:	ldr	r1, [sp, #72]	; 0x48
     928:	bl	168 <fi_printf>
     92c:	ldr	r3, [sl]
     930:	cmp	r3, #0
     934:	bne	c5c <print_data+0xa48>
     938:	movw	r0, #0
     93c:	movt	r0, #0
     940:	bl	0 <ff_printf>
     944:	ldr	r3, [r5]
     948:	ldr	r2, [fp]
     94c:	add	r3, r3, #1
     950:	cmp	r2, r6
     954:	str	r3, [r5]
     958:	movle	r1, #0
     95c:	movgt	r1, #1
     960:	orrs	r3, r1, r2, lsr #31
     964:	beq	d04 <print_data+0xaf0>
     968:	add	r1, r6, #1
     96c:	mov	r0, r4
     970:	bl	214 <print_data>
     974:	ldr	r3, [r5]
     978:	ldr	r2, [sp, #52]	; 0x34
     97c:	ldr	r1, [sp, #64]	; 0x40
     980:	sub	r3, r3, #1
     984:	sub	r0, r2, #1
     988:	str	r3, [r5]
     98c:	cmp	r0, r1
     990:	bgt	cd0 <print_data+0xabc>
     994:	add	r1, r1, #1
     998:	cmp	r1, r2
     99c:	str	r1, [sp, #64]	; 0x40
     9a0:	blt	90c <print_data+0x6f8>
     9a4:	b	694 <print_data+0x480>
     9a8:	add	r1, sp, #96	; 0x60
     9ac:	mov	r0, r4
     9b0:	bl	0 <coda_cursor_get_bit_size>
     9b4:	cmp	r0, #0
     9b8:	bne	e7c <print_data+0xc68>
     9bc:	ldr	r5, [sp, #96]	; 0x60
     9c0:	ldr	r8, [sp, #100]	; 0x64
     9c4:	lsr	r2, r5, #3
     9c8:	ands	r1, r5, #7
     9cc:	movne	r1, #1
     9d0:	orr	r2, r2, r8, lsl #29
     9d4:	adds	r6, r2, r1
     9d8:	mov	r0, r6
     9dc:	bl	0 <malloc>
     9e0:	subs	r9, r0, #0
     9e4:	beq	eb8 <print_data+0xca4>
     9e8:	mov	r0, r4
     9ec:	mov	r1, r9
     9f0:	stm	sp, {r5, r8}
     9f4:	mov	r2, #0
     9f8:	mov	r3, #0
     9fc:	bl	0 <coda_cursor_read_bits>
     a00:	cmp	r0, #0
     a04:	bne	e74 <print_data+0xc60>
     a08:	movw	r0, #0
     a0c:	movt	r0, #0
     a10:	bl	168 <fi_printf>
     a14:	mov	r1, r6
     a18:	mov	r0, r9
     a1c:	bl	3c <print_escaped>
     a20:	movw	r0, #0
     a24:	movt	r0, #0
     a28:	bl	0 <ff_printf>
     a2c:	ldrd	r0, [sp, #96]	; 0x60
     a30:	add	r2, sp, #128	; 0x80
     a34:	lsr	r0, r0, #3
     a38:	orr	r0, r0, r1, lsl #29
     a3c:	asr	r1, r1, #3
     a40:	bl	0 <coda_str64>
     a44:	add	r1, sp, #128	; 0x80
     a48:	movw	r0, #0
     a4c:	movt	r0, #0
     a50:	bl	0 <ff_printf>
     a54:	ldr	r1, [sp, #96]	; 0x60
     a58:	mov	r3, #0
     a5c:	and	r2, r1, #7
     a60:	orrs	r3, r2, r3
     a64:	bne	e60 <print_data+0xc4c>
     a68:	movw	r0, #0
     a6c:	movt	r0, #0
     a70:	bl	0 <ff_printf>
     a74:	mov	r0, r9
     a78:	add	sp, sp, #652	; 0x28c
     a7c:	ldrd	r4, [sp]
     a80:	ldrd	r6, [sp, #8]
     a84:	ldrd	r8, [sp, #16]
     a88:	ldrd	sl, [sp, #24]
     a8c:	ldr	lr, [sp, #32]
     a90:	add	sp, sp, #36	; 0x24
     a94:	b	0 <free>
     a98:	mov	r0, r4
     a9c:	add	r1, sp, #128	; 0x80
     aa0:	bl	0 <coda_cursor_read_double>
     aa4:	cmp	r0, #0
     aa8:	bne	e38 <print_data+0xc24>
     aac:	ldr	r1, [sp, #64]	; 0x40
     ab0:	ldrd	r2, [sp, #128]	; 0x80
     ab4:	cmp	r1, #8
     ab8:	movweq	r0, #0
     abc:	movwne	r0, #0
     ac0:	movteq	r0, #0
     ac4:	movtne	r0, #0
     ac8:	bl	168 <fi_printf>
     acc:	b	3a8 <print_data+0x194>
     ad0:	mov	r0, r4
     ad4:	add	r1, sp, #96	; 0x60
     ad8:	bl	0 <coda_cursor_read_uint64>
     adc:	cmp	r0, #0
     ae0:	bne	e50 <print_data+0xc3c>
     ae4:	add	r2, sp, #128	; 0x80
     ae8:	ldrd	r0, [sp, #96]	; 0x60
     aec:	bl	0 <coda_str64u>
     af0:	add	r1, sp, #128	; 0x80
     af4:	movw	r0, #0
     af8:	movt	r0, #0
     afc:	bl	168 <fi_printf>
     b00:	b	3a8 <print_data+0x194>
     b04:	mov	r0, r4
     b08:	add	r1, sp, #128	; 0x80
     b0c:	bl	0 <coda_cursor_read_uint32>
     b10:	cmp	r0, #0
     b14:	bne	e40 <print_data+0xc2c>
     b18:	movw	r0, #0
     b1c:	movt	r0, #0
     b20:	ldr	r1, [sp, #128]	; 0x80
     b24:	bl	168 <fi_printf>
     b28:	b	3a8 <print_data+0x194>
     b2c:	mov	r0, r4
     b30:	add	r1, sp, #96	; 0x60
     b34:	bl	0 <coda_cursor_read_int64>
     b38:	cmp	r0, #0
     b3c:	bne	e48 <print_data+0xc34>
     b40:	add	r2, sp, #128	; 0x80
     b44:	ldrd	r0, [sp, #96]	; 0x60
     b48:	bl	0 <coda_str64>
     b4c:	add	r1, sp, #128	; 0x80
     b50:	movw	r0, #0
     b54:	movt	r0, #0
     b58:	bl	168 <fi_printf>
     b5c:	b	3a8 <print_data+0x194>
     b60:	ldr	r3, [sp, #72]	; 0x48
     b64:	cmp	r3, #0
     b68:	bne	3a8 <print_data+0x194>
     b6c:	movw	r1, #0
     b70:	movt	r1, #0
     b74:	ldr	r3, [pc, #900]	; f00 <print_data+0xcec>
     b78:	movw	r0, #0
     b7c:	movt	r0, #0
     b80:	mov	r2, #548	; 0x224
     b84:	bl	0 <__assert_fail>
     b88:	mov	r0, r4
     b8c:	add	r1, sp, #128	; 0x80
     b90:	bl	0 <coda_cursor_read_int32>
     b94:	cmp	r0, #0
     b98:	bne	e58 <print_data+0xc44>
     b9c:	movw	r0, #0
     ba0:	movt	r0, #0
     ba4:	ldr	r1, [sp, #128]	; 0x80
     ba8:	bl	168 <fi_printf>
     bac:	b	3a8 <print_data+0x194>
     bb0:	bl	0 <handle_coda_error>
     bb4:	b	7c0 <print_data+0x5ac>
     bb8:	bl	0 <handle_coda_error>
     bbc:	b	790 <print_data+0x57c>
     bc0:	bl	0 <handle_coda_error>
     bc4:	b	750 <print_data+0x53c>
     bc8:	mov	r0, r4
     bcc:	bl	0 <coda_cursor_goto_next_array_element>
     bd0:	cmp	r0, #0
     bd4:	beq	684 <print_data+0x470>
     bd8:	bl	0 <handle_coda_error>
     bdc:	b	684 <print_data+0x470>
     be0:	add	r1, sp, #64	; 0x40
     be4:	mov	r0, r4
     be8:	bl	0 <coda_cursor_get_file_bit_offset>
     bec:	cmp	r0, #0
     bf0:	bne	d24 <print_data+0xb10>
     bf4:	ldrd	r6, [sp, #64]	; 0x40
     bf8:	cmp	r6, #0
     bfc:	sbcs	r3, r7, #0
     c00:	blt	5b4 <print_data+0x3a0>
     c04:	lsr	r0, r6, #3
     c08:	add	r2, sp, #72	; 0x48
     c0c:	asr	r1, r7, #3
     c10:	orr	r0, r0, r7, lsl #29
     c14:	bl	0 <coda_str64>
     c18:	add	r1, sp, #72	; 0x48
     c1c:	movw	r0, #0
     c20:	movt	r0, #0
     c24:	bl	0 <ff_printf>
     c28:	ldr	r1, [sp, #64]	; 0x40
     c2c:	and	r3, r1, #7
     c30:	str	r3, [sp, #32]
     c34:	mov	r3, #0
     c38:	str	r3, [sp, #36]	; 0x24
     c3c:	ldrd	r2, [sp, #32]
     c40:	orrs	r3, r2, r3
     c44:	beq	5b4 <print_data+0x3a0>
     c48:	and	r1, r1, #7
     c4c:	movw	r0, #0
     c50:	movt	r0, #0
     c54:	bl	0 <ff_printf>
     c58:	b	5b4 <print_data+0x3a0>
     c5c:	add	r1, sp, #96	; 0x60
     c60:	mov	r0, r4
     c64:	bl	0 <coda_cursor_get_file_bit_offset>
     c68:	cmp	r0, #0
     c6c:	bne	d34 <print_data+0xb20>
     c70:	ldrd	r2, [sp, #96]	; 0x60
     c74:	cmp	r2, #0
     c78:	sbcs	r1, r3, #0
     c7c:	blt	938 <print_data+0x724>
     c80:	lsr	r0, r2, #3
     c84:	add	r2, sp, #128	; 0x80
     c88:	asr	r1, r3, #3
     c8c:	orr	r0, r0, r3, lsl #29
     c90:	bl	0 <coda_str64>
     c94:	add	r1, sp, #128	; 0x80
     c98:	mov	r0, r9
     c9c:	bl	0 <ff_printf>
     ca0:	ldr	r1, [sp, #96]	; 0x60
     ca4:	and	r3, r1, #7
     ca8:	str	r3, [sp, #8]
     cac:	mov	r3, #0
     cb0:	str	r3, [sp, #12]
     cb4:	ldrd	r2, [sp, #8]
     cb8:	orrs	r3, r2, r3
     cbc:	beq	938 <print_data+0x724>
     cc0:	and	r1, r1, #7
     cc4:	mov	r0, r8
     cc8:	bl	0 <ff_printf>
     ccc:	b	938 <print_data+0x724>
     cd0:	mov	r0, r4
     cd4:	bl	0 <coda_cursor_goto_next_record_field>
     cd8:	cmp	r0, #0
     cdc:	bne	d3c <print_data+0xb28>
     ce0:	ldr	r2, [sp, #52]	; 0x34
     ce4:	ldr	r1, [sp, #64]	; 0x40
     ce8:	b	994 <print_data+0x780>
     cec:	bl	0 <handle_coda_error>
     cf0:	b	920 <print_data+0x70c>
     cf4:	movw	r0, #0
     cf8:	movt	r0, #0
     cfc:	bl	168 <fi_printf>
     d00:	b	5f4 <print_data+0x3e0>
     d04:	movw	r0, #0
     d08:	movt	r0, #0
     d0c:	bl	168 <fi_printf>
     d10:	b	974 <print_data+0x760>
     d14:	bl	0 <handle_coda_error>
     d18:	b	2d8 <print_data+0xc4>
     d1c:	bl	0 <handle_coda_error>
     d20:	b	2c4 <print_data+0xb0>
     d24:	bl	0 <handle_coda_error>
     d28:	b	bf4 <print_data+0x9e0>
     d2c:	bl	0 <handle_coda_error>
     d30:	b	4f0 <print_data+0x2dc>
     d34:	bl	0 <handle_coda_error>
     d38:	b	c70 <print_data+0xa5c>
     d3c:	bl	0 <handle_coda_error>
     d40:	b	ce0 <print_data+0xacc>
     d44:	bl	0 <handle_coda_error>
     d48:	ldr	r1, [sp, #16]
     d4c:	b	8c8 <print_data+0x6b4>
     d50:	add	r1, sp, #96	; 0x60
     d54:	mov	r0, r4
     d58:	bl	0 <coda_cursor_get_file_bit_offset>
     d5c:	cmp	r0, #0
     d60:	bne	eb0 <print_data+0xc9c>
     d64:	ldrd	r2, [sp, #96]	; 0x60
     d68:	cmp	r2, #0
     d6c:	sbcs	r1, r3, #0
     d70:	blt	348 <print_data+0x134>
     d74:	lsr	r0, r2, #3
     d78:	add	r2, sp, #128	; 0x80
     d7c:	asr	r1, r3, #3
     d80:	orr	r0, r0, r3, lsl #29
     d84:	bl	0 <coda_str64>
     d88:	add	r1, sp, #128	; 0x80
     d8c:	movw	r0, #0
     d90:	movt	r0, #0
     d94:	bl	0 <ff_printf>
     d98:	ldr	r1, [sp, #96]	; 0x60
     d9c:	mov	r3, #0
     da0:	and	r2, r1, #7
     da4:	orrs	r3, r2, r3
     da8:	beq	348 <print_data+0x134>
     dac:	mov	r1, r2
     db0:	movw	r0, #0
     db4:	movt	r0, #0
     db8:	bl	0 <ff_printf>
     dbc:	b	348 <print_data+0x134>
     dc0:	bl	0 <handle_coda_error>
     dc4:	b	324 <print_data+0x110>
     dc8:	bl	0 <handle_coda_error>
     dcc:	b	310 <print_data+0xfc>
     dd0:	bl	0 <handle_coda_error>
     dd4:	b	2f8 <print_data+0xe4>
     dd8:	bl	0 <handle_coda_error>
     ddc:	b	89c <print_data+0x688>
     de0:	bl	0 <handle_coda_error>
     de4:	b	844 <print_data+0x630>
     de8:	bl	0 <handle_coda_error>
     dec:	b	814 <print_data+0x600>
     df0:	mov	r8, #1
     df4:	b	4e0 <print_data+0x2cc>
     df8:	ldr	r2, [sp, #128]	; 0x80
     dfc:	movw	r0, #410	; 0x19a
     e00:	movw	r3, #0
     e04:	movt	r3, #0
     e08:	movw	r1, #0
     e0c:	movt	r1, #0
     e10:	str	r0, [sp]
     e14:	mvn	r0, #0
     e18:	add	r2, r2, #1
     e1c:	bl	0 <coda_set_error>
     e20:	bl	0 <handle_coda_error>
     e24:	b	7a4 <print_data+0x590>
     e28:	movw	r0, #0
     e2c:	movt	r0, #0
     e30:	bl	168 <fi_printf>
     e34:	b	394 <print_data+0x180>
     e38:	bl	0 <handle_coda_error>
     e3c:	b	aac <print_data+0x898>
     e40:	bl	0 <handle_coda_error>
     e44:	b	b18 <print_data+0x904>
     e48:	bl	0 <handle_coda_error>
     e4c:	b	b40 <print_data+0x92c>
     e50:	bl	0 <handle_coda_error>
     e54:	b	ae4 <print_data+0x8d0>
     e58:	bl	0 <handle_coda_error>
     e5c:	b	b9c <print_data+0x988>
     e60:	mov	r1, r2
     e64:	movw	r0, #0
     e68:	movt	r0, #0
     e6c:	bl	0 <ff_printf>
     e70:	b	a68 <print_data+0x854>
     e74:	bl	0 <handle_coda_error>
     e78:	b	a08 <print_data+0x7f4>
     e7c:	bl	0 <handle_coda_error>
     e80:	b	9bc <print_data+0x7a8>
     e84:	movw	r0, #0
     e88:	movt	r0, #0
     e8c:	vldr	d0, [sp, #96]	; 0x60
     e90:	add	r1, sp, #128	; 0x80
     e94:	bl	0 <coda_time_double_to_string>
     e98:	cmp	r0, #0
     e9c:	beq	eec <print_data+0xcd8>
     ea0:	movw	r0, #0
     ea4:	movt	r0, #0
     ea8:	bl	0 <ff_printf>
     eac:	b	3a8 <print_data+0x194>
     eb0:	bl	0 <handle_coda_error>
     eb4:	b	d64 <print_data+0xb50>
     eb8:	movw	r0, #447	; 0x1bf
     ebc:	mov	r2, r6
     ec0:	movw	r3, #0
     ec4:	movt	r3, #0
     ec8:	movw	r1, #0
     ecc:	movt	r1, #0
     ed0:	str	r0, [sp]
     ed4:	mvn	r0, #0
     ed8:	bl	0 <coda_set_error>
     edc:	bl	0 <handle_coda_error>
     ee0:	ldr	r5, [sp, #96]	; 0x60
     ee4:	ldr	r8, [sp, #100]	; 0x64
     ee8:	b	9e8 <print_data+0x7d4>
     eec:	add	r1, sp, #128	; 0x80
     ef0:	movw	r0, #0
     ef4:	movt	r0, #0
     ef8:	bl	0 <ff_printf>
     efc:	b	3a8 <print_data+0x194>
     f00:	.word	0x00000008

00000f04 <print_debug_data>:
     f04:	strd	r4, [sp, #-24]!	; 0xffffffe8
     f08:	movw	r4, #0
     f0c:	movt	r4, #0
     f10:	strd	r6, [sp, #8]
     f14:	subs	r6, r0, #0
     f18:	mov	r7, r1
     f1c:	str	r8, [sp, #16]
     f20:	mov	r8, r2
     f24:	str	lr, [sp, #20]
     f28:	sub	sp, sp, #536	; 0x218
     f2c:	add	r5, sp, #8
     f30:	ldr	r0, [r4]
     f34:	beq	1018 <print_debug_data+0x114>
     f38:	mov	r3, r2
     f3c:	mov	r2, r1
     f40:	str	r5, [sp]
     f44:	mov	r1, r6
     f48:	bl	0 <coda_open_as>
     f4c:	cmp	r0, #0
     f50:	bne	1000 <print_debug_data+0xfc>
     f54:	add	r1, sp, #12
     f58:	ldr	r0, [sp, #8]
     f5c:	bl	0 <coda_get_product_format>
     f60:	cmp	r0, #0
     f64:	bne	ff8 <print_debug_data+0xf4>
     f68:	movw	r3, #0
     f6c:	movt	r3, #0
     f70:	ldr	r1, [sp, #8]
     f74:	add	r0, sp, #16
     f78:	ldr	r2, [sp, #12]
     f7c:	cmp	r2, #2
     f80:	movhi	r2, #0
     f84:	movls	r2, #1
     f88:	str	r2, [r3]
     f8c:	bl	0 <coda_cursor_set_product>
     f90:	cmp	r0, #0
     f94:	bne	ff0 <print_debug_data+0xec>
     f98:	movw	r3, #0
     f9c:	movt	r3, #0
     fa0:	ldr	r1, [r3]
     fa4:	cmp	r1, #0
     fa8:	beq	fbc <print_debug_data+0xb8>
     fac:	add	r0, sp, #16
     fb0:	bl	0 <coda_cursor_goto>
     fb4:	cmp	r0, #0
     fb8:	bne	1024 <print_debug_data+0x120>
     fbc:	mov	r0, #0
     fc0:	bl	0 <coda_set_option_perform_boundary_checks>
     fc4:	add	r0, sp, #16
     fc8:	mov	r1, #0
     fcc:	bl	214 <print_data>
     fd0:	ldr	r0, [sp, #8]
     fd4:	bl	0 <coda_close>
     fd8:	add	sp, sp, #536	; 0x218
     fdc:	ldrd	r4, [sp]
     fe0:	ldrd	r6, [sp, #8]
     fe4:	ldr	r8, [sp, #16]
     fe8:	add	sp, sp, #20
     fec:	pop	{pc}		; (ldr pc, [sp], #4)
     ff0:	bl	0 <handle_coda_error>
     ff4:	b	f98 <print_debug_data+0x94>
     ff8:	bl	0 <handle_coda_error>
     ffc:	b	f68 <print_debug_data+0x64>
    1000:	bl	0 <coda_get_errno>
    1004:	ldr	r3, [r0]
    1008:	cmn	r3, #21
    100c:	beq	102c <print_debug_data+0x128>
    1010:	bl	0 <handle_coda_error>
    1014:	b	f54 <print_debug_data+0x50>
    1018:	mov	r1, r5
    101c:	bl	0 <coda_open>
    1020:	b	f4c <print_debug_data+0x48>
    1024:	bl	0 <handle_coda_error>
    1028:	b	fbc <print_debug_data+0xb8>
    102c:	mov	r0, #0
    1030:	bl	0 <coda_set_option_use_mmap>
    1034:	cmp	r6, #0
    1038:	beq	106c <print_debug_data+0x168>
    103c:	mov	r3, r8
    1040:	mov	r2, r7
    1044:	str	r5, [sp]
    1048:	mov	r1, r6
    104c:	ldr	r0, [r4]
    1050:	bl	0 <coda_open_as>
    1054:	mov	r4, r0
    1058:	mov	r0, #1
    105c:	bl	0 <coda_set_option_use_mmap>
    1060:	cmp	r4, #0
    1064:	bne	1010 <print_debug_data+0x10c>
    1068:	b	f54 <print_debug_data+0x50>
    106c:	mov	r1, r5
    1070:	ldr	r0, [r4]
    1074:	bl	0 <coda_open>
    1078:	mov	r4, r0
    107c:	b	1058 <print_debug_data+0x154>
