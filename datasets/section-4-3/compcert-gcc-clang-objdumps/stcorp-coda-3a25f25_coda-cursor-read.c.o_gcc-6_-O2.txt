
../compcert-repos/stcorp-coda-3a25f25/CMakeFiles/coda_static.dir/libcoda/coda-cursor-read.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <read_int8>:
       0:	ldr	r2, [r0, #4]
       4:	push	{r4, lr}
       8:	add	r3, r0, r2, lsl #4
       c:	ldr	r3, [r3, #-8]
      10:	ldr	r3, [r3]
      14:	cmp	r3, #101	; 0x65
      18:	beq	98 <read_int8+0x98>
      1c:	bls	3c <read_int8+0x3c>
      20:	cmp	r3, #103	; 0x67
      24:	beq	74 <read_int8+0x74>
      28:	bcc	58 <read_int8+0x58>
      2c:	cmp	r3, #104	; 0x68
      30:	bne	7c <read_int8+0x7c>
      34:	pop	{r4, lr}
      38:	b	0 <coda_netcdf_cursor_read_int8>
      3c:	cmp	r3, #1
      40:	beq	90 <read_int8+0x90>
      44:	bcc	6c <read_int8+0x6c>
      48:	cmp	r3, #100	; 0x64
      4c:	bne	7c <read_int8+0x7c>
      50:	pop	{r4, lr}
      54:	b	0 <coda_mem_cursor_read_int8>
      58:	mov	r1, #0
      5c:	mvn	r0, #12
      60:	bl	0 <coda_set_error>
      64:	mvn	r0, #0
      68:	pop	{r4, pc}
      6c:	pop	{r4, lr}
      70:	b	0 <coda_ascii_cursor_read_int8>
      74:	pop	{r4, lr}
      78:	b	0 <coda_cdf_cursor_read_int8>
      7c:	ldr	r3, [pc, #40]	; ac <read_int8+0xac>
      80:	ldr	r2, [pc, #40]	; b0 <read_int8+0xb0>
      84:	ldr	r1, [pc, #40]	; b4 <read_int8+0xb4>
      88:	ldr	r0, [pc, #40]	; b8 <read_int8+0xb8>
      8c:	bl	0 <__assert_fail>
      90:	pop	{r4, lr}
      94:	b	0 <coda_bin_cursor_read_int8>
      98:	mov	r1, #0
      9c:	mvn	r0, #10
      a0:	bl	0 <coda_set_error>
      a4:	mvn	r0, #0
      a8:	pop	{r4, pc}
      ac:	.word	0x00000000
      b0:	.word	0x00000167
      b4:	.word	0x00000000
      b8:	.word	0x00000050

000000bc <read_uint8>:
      bc:	ldr	r2, [r0, #4]
      c0:	add	r3, r0, r2, lsl #4
      c4:	ldr	r3, [r3, #-8]
      c8:	ldr	r3, [r3]
      cc:	cmp	r3, #100	; 0x64
      d0:	beq	154 <read_uint8+0x98>
      d4:	push	{r4, lr}
      d8:	bls	f8 <read_uint8+0x3c>
      dc:	cmp	r3, #102	; 0x66
      e0:	beq	140 <read_uint8+0x84>
      e4:	bcc	124 <read_uint8+0x68>
      e8:	cmp	r3, #103	; 0x67
      ec:	bne	110 <read_uint8+0x54>
      f0:	pop	{r4, lr}
      f4:	b	0 <coda_cdf_cursor_read_uint8>
      f8:	cmp	r3, #0
      fc:	beq	138 <read_uint8+0x7c>
     100:	cmp	r3, #1
     104:	bne	110 <read_uint8+0x54>
     108:	pop	{r4, lr}
     10c:	b	0 <coda_bin_cursor_read_uint8>
     110:	ldr	r3, [pc, #64]	; 158 <read_uint8+0x9c>
     114:	ldr	r2, [pc, #64]	; 15c <read_uint8+0xa0>
     118:	ldr	r1, [pc, #64]	; 160 <read_uint8+0xa4>
     11c:	ldr	r0, [pc, #64]	; 164 <read_uint8+0xa8>
     120:	bl	0 <__assert_fail>
     124:	mov	r1, #0
     128:	mvn	r0, #10
     12c:	bl	0 <coda_set_error>
     130:	mvn	r0, #0
     134:	pop	{r4, pc}
     138:	pop	{r4, lr}
     13c:	b	0 <coda_ascii_cursor_read_uint8>
     140:	mov	r1, #0
     144:	mvn	r0, #12
     148:	bl	0 <coda_set_error>
     14c:	mvn	r0, #0
     150:	pop	{r4, pc}
     154:	b	0 <coda_mem_cursor_read_uint8>
     158:	.word	0x0000000c
     15c:	.word	0x0000018a
     160:	.word	0x00000000
     164:	.word	0x00000050

00000168 <read_int16>:
     168:	ldr	r2, [r0, #4]
     16c:	push	{r4, lr}
     170:	add	r3, r0, r2, lsl #4
     174:	ldr	r3, [r3, #-8]
     178:	ldr	r3, [r3]
     17c:	cmp	r3, #101	; 0x65
     180:	beq	210 <read_int16+0xa8>
     184:	bls	1b8 <read_int16+0x50>
     188:	cmp	r3, #103	; 0x67
     18c:	beq	208 <read_int16+0xa0>
     190:	bcc	1e4 <read_int16+0x7c>
     194:	cmp	r3, #104	; 0x68
     198:	beq	1dc <read_int16+0x74>
     19c:	cmp	r3, #105	; 0x69
     1a0:	bne	200 <read_int16+0x98>
     1a4:	ldr	r3, [pc, #120]	; 224 <read_int16+0xbc>
     1a8:	ldr	r2, [pc, #120]	; 228 <read_int16+0xc0>
     1ac:	ldr	r1, [pc, #120]	; 22c <read_int16+0xc4>
     1b0:	ldr	r0, [pc, #120]	; 230 <read_int16+0xc8>
     1b4:	bl	0 <__assert_fail>
     1b8:	cmp	r3, #1
     1bc:	beq	1f8 <read_int16+0x90>
     1c0:	bcc	1d4 <read_int16+0x6c>
     1c4:	cmp	r3, #100	; 0x64
     1c8:	bne	200 <read_int16+0x98>
     1cc:	pop	{r4, lr}
     1d0:	b	0 <coda_mem_cursor_read_int16>
     1d4:	pop	{r4, lr}
     1d8:	b	0 <coda_ascii_cursor_read_int16>
     1dc:	pop	{r4, lr}
     1e0:	b	0 <coda_netcdf_cursor_read_int16>
     1e4:	mov	r1, #0
     1e8:	mvn	r0, #12
     1ec:	bl	0 <coda_set_error>
     1f0:	mvn	r0, #0
     1f4:	pop	{r4, pc}
     1f8:	pop	{r4, lr}
     1fc:	b	0 <coda_bin_cursor_read_int16>
     200:	mov	r0, #0
     204:	pop	{r4, pc}
     208:	pop	{r4, lr}
     20c:	b	0 <coda_cdf_cursor_read_int16>
     210:	mov	r1, #0
     214:	mvn	r0, #10
     218:	bl	0 <coda_set_error>
     21c:	mvn	r0, #0
     220:	pop	{r4, pc}
     224:	.word	0x00000018
     228:	.word	0x000001ab
     22c:	.word	0x00000000
     230:	.word	0x00000050

00000234 <read_uint16>:
     234:	ldr	r2, [r0, #4]
     238:	add	r3, r0, r2, lsl #4
     23c:	ldr	r3, [r3, #-8]
     240:	ldr	r3, [r3]
     244:	cmp	r3, #100	; 0x64
     248:	beq	2cc <read_uint16+0x98>
     24c:	push	{r4, lr}
     250:	bls	270 <read_uint16+0x3c>
     254:	cmp	r3, #102	; 0x66
     258:	beq	2b8 <read_uint16+0x84>
     25c:	bcc	29c <read_uint16+0x68>
     260:	cmp	r3, #103	; 0x67
     264:	bne	288 <read_uint16+0x54>
     268:	pop	{r4, lr}
     26c:	b	0 <coda_cdf_cursor_read_uint16>
     270:	cmp	r3, #0
     274:	beq	2b0 <read_uint16+0x7c>
     278:	cmp	r3, #1
     27c:	bne	288 <read_uint16+0x54>
     280:	pop	{r4, lr}
     284:	b	0 <coda_bin_cursor_read_uint16>
     288:	ldr	r3, [pc, #64]	; 2d0 <read_uint16+0x9c>
     28c:	ldr	r2, [pc, #64]	; 2d4 <read_uint16+0xa0>
     290:	ldr	r1, [pc, #64]	; 2d8 <read_uint16+0xa4>
     294:	ldr	r0, [pc, #64]	; 2dc <read_uint16+0xa8>
     298:	bl	0 <__assert_fail>
     29c:	mov	r1, #0
     2a0:	mvn	r0, #10
     2a4:	bl	0 <coda_set_error>
     2a8:	mvn	r0, #0
     2ac:	pop	{r4, pc}
     2b0:	pop	{r4, lr}
     2b4:	b	0 <coda_ascii_cursor_read_uint16>
     2b8:	mov	r1, #0
     2bc:	mvn	r0, #12
     2c0:	bl	0 <coda_set_error>
     2c4:	mvn	r0, #0
     2c8:	pop	{r4, pc}
     2cc:	b	0 <coda_mem_cursor_read_uint16>
     2d0:	.word	0x00000024
     2d4:	.word	0x000001d1
     2d8:	.word	0x00000000
     2dc:	.word	0x00000050

000002e0 <read_int32>:
     2e0:	ldr	r2, [r0, #4]
     2e4:	push	{r4, lr}
     2e8:	add	r3, r0, r2, lsl #4
     2ec:	ldr	r3, [r3, #-8]
     2f0:	ldr	r3, [r3]
     2f4:	cmp	r3, #101	; 0x65
     2f8:	beq	388 <read_int32+0xa8>
     2fc:	bls	330 <read_int32+0x50>
     300:	cmp	r3, #103	; 0x67
     304:	beq	380 <read_int32+0xa0>
     308:	bcc	35c <read_int32+0x7c>
     30c:	cmp	r3, #104	; 0x68
     310:	beq	354 <read_int32+0x74>
     314:	cmp	r3, #105	; 0x69
     318:	bne	378 <read_int32+0x98>
     31c:	ldr	r3, [pc, #120]	; 39c <read_int32+0xbc>
     320:	ldr	r2, [pc, #120]	; 3a0 <read_int32+0xc0>
     324:	ldr	r1, [pc, #120]	; 3a4 <read_int32+0xc4>
     328:	ldr	r0, [pc, #120]	; 3a8 <read_int32+0xc8>
     32c:	bl	0 <__assert_fail>
     330:	cmp	r3, #1
     334:	beq	370 <read_int32+0x90>
     338:	bcc	34c <read_int32+0x6c>
     33c:	cmp	r3, #100	; 0x64
     340:	bne	378 <read_int32+0x98>
     344:	pop	{r4, lr}
     348:	b	0 <coda_mem_cursor_read_int32>
     34c:	pop	{r4, lr}
     350:	b	0 <coda_ascii_cursor_read_int32>
     354:	pop	{r4, lr}
     358:	b	0 <coda_netcdf_cursor_read_int32>
     35c:	mov	r1, #0
     360:	mvn	r0, #12
     364:	bl	0 <coda_set_error>
     368:	mvn	r0, #0
     36c:	pop	{r4, pc}
     370:	pop	{r4, lr}
     374:	b	0 <coda_bin_cursor_read_int32>
     378:	mov	r0, #0
     37c:	pop	{r4, pc}
     380:	pop	{r4, lr}
     384:	b	0 <coda_cdf_cursor_read_int32>
     388:	mov	r1, #0
     38c:	mvn	r0, #10
     390:	bl	0 <coda_set_error>
     394:	mvn	r0, #0
     398:	pop	{r4, pc}
     39c:	.word	0x00000030
     3a0:	.word	0x000001f3
     3a4:	.word	0x00000000
     3a8:	.word	0x00000050

000003ac <read_uint32>:
     3ac:	ldr	r2, [r0, #4]
     3b0:	add	r3, r0, r2, lsl #4
     3b4:	ldr	r3, [r3, #-8]
     3b8:	ldr	r3, [r3]
     3bc:	cmp	r3, #100	; 0x64
     3c0:	beq	444 <read_uint32+0x98>
     3c4:	push	{r4, lr}
     3c8:	bls	3e8 <read_uint32+0x3c>
     3cc:	cmp	r3, #102	; 0x66
     3d0:	beq	430 <read_uint32+0x84>
     3d4:	bcc	414 <read_uint32+0x68>
     3d8:	cmp	r3, #103	; 0x67
     3dc:	bne	400 <read_uint32+0x54>
     3e0:	pop	{r4, lr}
     3e4:	b	0 <coda_cdf_cursor_read_uint32>
     3e8:	cmp	r3, #0
     3ec:	beq	428 <read_uint32+0x7c>
     3f0:	cmp	r3, #1
     3f4:	bne	400 <read_uint32+0x54>
     3f8:	pop	{r4, lr}
     3fc:	b	0 <coda_bin_cursor_read_uint32>
     400:	ldr	r3, [pc, #64]	; 448 <read_uint32+0x9c>
     404:	ldr	r2, [pc, #64]	; 44c <read_uint32+0xa0>
     408:	ldr	r1, [pc, #64]	; 450 <read_uint32+0xa4>
     40c:	ldr	r0, [pc, #64]	; 454 <read_uint32+0xa8>
     410:	bl	0 <__assert_fail>
     414:	mov	r1, #0
     418:	mvn	r0, #10
     41c:	bl	0 <coda_set_error>
     420:	mvn	r0, #0
     424:	pop	{r4, pc}
     428:	pop	{r4, lr}
     42c:	b	0 <coda_ascii_cursor_read_uint32>
     430:	mov	r1, #0
     434:	mvn	r0, #12
     438:	bl	0 <coda_set_error>
     43c:	mvn	r0, #0
     440:	pop	{r4, pc}
     444:	b	0 <coda_mem_cursor_read_uint32>
     448:	.word	0x0000003c
     44c:	.word	0x00000219
     450:	.word	0x00000000
     454:	.word	0x00000050

00000458 <read_int64>:
     458:	ldr	r2, [r0, #4]
     45c:	add	r3, r0, r2, lsl #4
     460:	ldr	r3, [r3, #-8]
     464:	ldr	r3, [r3]
     468:	cmp	r3, #100	; 0x64
     46c:	beq	4f0 <read_int64+0x98>
     470:	push	{r4, lr}
     474:	bls	494 <read_int64+0x3c>
     478:	cmp	r3, #102	; 0x66
     47c:	beq	4dc <read_int64+0x84>
     480:	bcc	4c0 <read_int64+0x68>
     484:	cmp	r3, #103	; 0x67
     488:	bne	4ac <read_int64+0x54>
     48c:	pop	{r4, lr}
     490:	b	0 <coda_cdf_cursor_read_int64>
     494:	cmp	r3, #0
     498:	beq	4d4 <read_int64+0x7c>
     49c:	cmp	r3, #1
     4a0:	bne	4ac <read_int64+0x54>
     4a4:	pop	{r4, lr}
     4a8:	b	0 <coda_bin_cursor_read_int64>
     4ac:	ldr	r3, [pc, #64]	; 4f4 <read_int64+0x9c>
     4b0:	mov	r2, #572	; 0x23c
     4b4:	ldr	r1, [pc, #60]	; 4f8 <read_int64+0xa0>
     4b8:	ldr	r0, [pc, #60]	; 4fc <read_int64+0xa4>
     4bc:	bl	0 <__assert_fail>
     4c0:	mov	r1, #0
     4c4:	mvn	r0, #10
     4c8:	bl	0 <coda_set_error>
     4cc:	mvn	r0, #0
     4d0:	pop	{r4, pc}
     4d4:	pop	{r4, lr}
     4d8:	b	0 <coda_ascii_cursor_read_int64>
     4dc:	mov	r1, #0
     4e0:	mvn	r0, #12
     4e4:	bl	0 <coda_set_error>
     4e8:	mvn	r0, #0
     4ec:	pop	{r4, pc}
     4f0:	b	0 <coda_mem_cursor_read_int64>
     4f4:	.word	0x00000048
     4f8:	.word	0x00000000
     4fc:	.word	0x00000050

00000500 <read_float>:
     500:	ldr	r2, [r0, #4]
     504:	push	{r4, lr}
     508:	add	r3, r0, r2, lsl #4
     50c:	ldr	r3, [r3, #-8]
     510:	ldr	r3, [r3]
     514:	cmp	r3, #101	; 0x65
     518:	beq	5a8 <read_float+0xa8>
     51c:	bls	544 <read_float+0x44>
     520:	cmp	r3, #103	; 0x67
     524:	beq	5a0 <read_float+0xa0>
     528:	bcc	570 <read_float+0x70>
     52c:	cmp	r3, #104	; 0x68
     530:	beq	568 <read_float+0x68>
     534:	cmp	r3, #105	; 0x69
     538:	bne	58c <read_float+0x8c>
     53c:	pop	{r4, lr}
     540:	b	0 <coda_grib_cursor_read_float>
     544:	cmp	r3, #1
     548:	beq	584 <read_float+0x84>
     54c:	bcc	560 <read_float+0x60>
     550:	cmp	r3, #100	; 0x64
     554:	bne	58c <read_float+0x8c>
     558:	pop	{r4, lr}
     55c:	b	0 <coda_mem_cursor_read_float>
     560:	pop	{r4, lr}
     564:	b	0 <coda_ascii_cursor_read_float>
     568:	pop	{r4, lr}
     56c:	b	0 <coda_netcdf_cursor_read_float>
     570:	mov	r1, #0
     574:	mvn	r0, #12
     578:	bl	0 <coda_set_error>
     57c:	mvn	r0, #0
     580:	pop	{r4, pc}
     584:	pop	{r4, lr}
     588:	b	0 <coda_bin_cursor_read_float>
     58c:	ldr	r3, [pc, #40]	; 5bc <read_float+0xbc>
     590:	ldr	r2, [pc, #40]	; 5c0 <read_float+0xc0>
     594:	ldr	r1, [pc, #40]	; 5c4 <read_float+0xc4>
     598:	ldr	r0, [pc, #40]	; 5c8 <read_float+0xc8>
     59c:	bl	0 <__assert_fail>
     5a0:	pop	{r4, lr}
     5a4:	b	0 <coda_cdf_cursor_read_float>
     5a8:	mov	r1, #0
     5ac:	mvn	r0, #10
     5b0:	bl	0 <coda_set_error>
     5b4:	mvn	r0, #0
     5b8:	pop	{r4, pc}
     5bc:	.word	0x00000054
     5c0:	.word	0x00000282
     5c4:	.word	0x00000000
     5c8:	.word	0x00000050

000005cc <read_time>:
     5cc:	push	{r4, r5, lr}
     5d0:	mov	r4, r0
     5d4:	sub	sp, sp, #524	; 0x20c
     5d8:	mov	r2, #520	; 0x208
     5dc:	mov	r5, r1
     5e0:	mov	r0, sp
     5e4:	mov	r1, r4
     5e8:	bl	0 <memcpy>
     5ec:	ldr	r3, [r4, #4]
     5f0:	mov	r0, sp
     5f4:	add	r4, r4, r3, lsl #4
     5f8:	ldr	r3, [r4, #-8]
     5fc:	ldr	r2, [r3]
     600:	cmp	r2, #99	; 0x63
     604:	movls	r4, r3
     608:	ldrhi	r4, [r3, #4]
     60c:	bl	0 <coda_cursor_use_base_type_of_special_type>
     610:	cmp	r0, #0
     614:	bne	630 <read_time+0x64>
     618:	mov	r2, r5
     61c:	mov	r1, sp
     620:	ldr	r0, [r4, #52]	; 0x34
     624:	bl	0 <coda_expression_eval_float>
     628:	add	sp, sp, #524	; 0x20c
     62c:	pop	{r4, r5, pc}
     630:	mvn	r0, #0
     634:	b	628 <read_time+0x5c>

00000638 <transpose_array>:
     638:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
     63c:	sub	sp, sp, #172	; 0xac
     640:	add	r4, sp, #28
     644:	str	r1, [sp, #12]
     648:	mov	r7, r2
     64c:	add	r1, sp, #24
     650:	mov	r2, r4
     654:	bl	0 <coda_cursor_get_array_dim>
     658:	subs	r3, r0, #0
     65c:	str	r3, [sp, #16]
     660:	bne	754 <transpose_array+0x11c>
     664:	ldr	r8, [sp, #24]
     668:	cmp	r8, #1
     66c:	ble	75c <transpose_array+0x124>
     670:	lsl	r2, r8, #2
     674:	mov	r9, r3
     678:	add	ip, sp, #96	; 0x60
     67c:	add	r3, r4, r2
     680:	add	r0, sp, #132	; 0x84
     684:	mov	r1, r4
     688:	mov	r5, #1
     68c:	ldr	lr, [r3, #-4]!
     690:	ldr	r6, [r1], #4
     694:	cmp	r4, r3
     698:	str	r9, [ip], #4
     69c:	mul	r5, r6, r5
     6a0:	str	lr, [r0], #4
     6a4:	bne	68c <transpose_array+0x54>
     6a8:	cmp	r5, #1
     6ac:	ble	75c <transpose_array+0x124>
     6b0:	add	r3, sp, #168	; 0xa8
     6b4:	lsl	r8, r8, #2
     6b8:	add	lr, r3, r8
     6bc:	mov	ip, #1
     6c0:	add	r0, sp, #60	; 0x3c
     6c4:	add	r6, sp, #132	; 0x84
     6c8:	add	r4, r0, r2
     6cc:	mov	r1, ip
     6d0:	mov	r3, ip
     6d4:	add	r2, r6, r2
     6d8:	str	ip, [lr, #-108]	; 0xffffff94
     6dc:	str	ip, [lr, #-36]	; 0xffffffdc
     6e0:	b	6e8 <transpose_array+0xb0>
     6e4:	ldr	r1, [r2, #-4]!
     6e8:	mul	r3, r1, r3
     6ec:	str	r3, [r4, #-4]!
     6f0:	cmp	r4, r0
     6f4:	bne	6e4 <transpose_array+0xac>
     6f8:	mul	r3, r7, r5
     6fc:	mov	r0, r3
     700:	str	r3, [sp, #8]
     704:	add	r3, sp, #168	; 0xa8
     708:	add	r8, r3, r8
     70c:	mov	r3, #0
     710:	str	r3, [r8, #-36]	; 0xffffffdc
     714:	str	r3, [r8, #-72]	; 0xffffffb8
     718:	bl	0 <malloc>
     71c:	subs	r6, r0, #0
     720:	beq	9dc <transpose_array+0x3a4>
     724:	sub	r7, r7, #1
     728:	cmp	r7, #7
     72c:	ldrls	pc, [pc, r7, lsl #2]
     730:	b	9c8 <transpose_array+0x390>
     734:	.word	0x00000818
     738:	.word	0x000008ac
     73c:	.word	0x000009c8
     740:	.word	0x0000093c
     744:	.word	0x000009c8
     748:	.word	0x000009c8
     74c:	.word	0x000009c8
     750:	.word	0x00000768
     754:	mvn	r3, #0
     758:	str	r3, [sp, #16]
     75c:	ldr	r0, [sp, #16]
     760:	add	sp, sp, #172	; 0xac
     764:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
     768:	ldr	r2, [sp, #12]
     76c:	mov	r3, #0
     770:	ldr	r8, [sp, #132]	; 0x84
     774:	ldr	r7, [sp, #60]	; 0x3c
     778:	add	r1, r2, r5, lsl #3
     77c:	mov	r9, r2
     780:	mov	r5, r3
     784:	str	r1, [sp, #20]
     788:	ldr	ip, [sp, #96]	; 0x60
     78c:	ldrd	r0, [r9], #8
     790:	add	ip, ip, #1
     794:	lsl	r2, r3, #3
     798:	cmp	ip, r8
     79c:	str	ip, [sp, #96]	; 0x60
     7a0:	strd	r0, [r6, r2]
     7a4:	add	r3, r3, r7
     7a8:	bne	7e8 <transpose_array+0x1b0>
     7ac:	add	fp, sp, #132	; 0x84
     7b0:	mov	sl, r4
     7b4:	add	r1, sp, #96	; 0x60
     7b8:	mov	lr, r7
     7bc:	mul	r0, lr, ip
     7c0:	str	r5, [r1]
     7c4:	ldr	r2, [r1, #4]!
     7c8:	ldr	ip, [fp, #4]!
     7cc:	add	r2, r2, #1
     7d0:	ldr	lr, [sl, #4]!
     7d4:	sub	r3, r3, r0
     7d8:	cmp	ip, r2
     7dc:	add	r3, r3, lr
     7e0:	str	r2, [r1]
     7e4:	beq	7bc <transpose_array+0x184>
     7e8:	ldr	r2, [sp, #20]
     7ec:	cmp	r9, r2
     7f0:	bne	788 <transpose_array+0x150>
     7f4:	ldr	r2, [sp, #8]
     7f8:	mov	r1, r6
     7fc:	ldr	r0, [sp, #12]
     800:	bl	0 <memcpy>
     804:	mov	r0, r6
     808:	bl	0 <free>
     80c:	ldr	r0, [sp, #16]
     810:	add	sp, sp, #172	; 0xac
     814:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
     818:	ldr	r3, [sp, #132]	; 0x84
     81c:	ldr	r2, [sp, #12]
     820:	mov	r9, #0
     824:	ldr	fp, [sp, #60]	; 0x3c
     828:	str	r3, [sp, #20]
     82c:	mov	r8, r9
     830:	mov	r3, r9
     834:	sub	sl, r2, #1
     838:	ldr	ip, [sp, #96]	; 0x60
     83c:	ldrb	r2, [sl, #1]!
     840:	ldr	r1, [sp, #20]
     844:	add	ip, ip, #1
     848:	cmp	ip, r1
     84c:	strb	r2, [r6, r3]
     850:	str	ip, [sp, #96]	; 0x60
     854:	add	r3, r3, fp
     858:	bne	898 <transpose_array+0x260>
     85c:	add	r7, sp, #132	; 0x84
     860:	mov	r5, r4
     864:	add	r0, sp, #96	; 0x60
     868:	mov	lr, fp
     86c:	mul	r1, lr, ip
     870:	str	r8, [r0]
     874:	ldr	r2, [r0, #4]!
     878:	ldr	ip, [r7, #4]!
     87c:	add	r2, r2, #1
     880:	ldr	lr, [r5, #4]!
     884:	sub	r3, r3, r1
     888:	cmp	ip, r2
     88c:	add	r3, r3, lr
     890:	str	r2, [r0]
     894:	beq	86c <transpose_array+0x234>
     898:	ldr	r2, [sp, #8]
     89c:	add	r9, r9, #1
     8a0:	cmp	r2, r9
     8a4:	bgt	838 <transpose_array+0x200>
     8a8:	b	7f4 <transpose_array+0x1bc>
     8ac:	ldr	r2, [sp, #12]
     8b0:	mov	r3, #0
     8b4:	ldr	fp, [sp, #132]	; 0x84
     8b8:	ldr	sl, [sp, #60]	; 0x3c
     8bc:	mov	r8, r3
     8c0:	mov	r9, r2
     8c4:	add	r1, r2, r5, lsl #1
     8c8:	str	r1, [sp, #20]
     8cc:	ldr	ip, [sp, #96]	; 0x60
     8d0:	ldrh	r1, [r9], #2
     8d4:	add	ip, ip, #1
     8d8:	lsl	r2, r3, #1
     8dc:	cmp	ip, fp
     8e0:	str	ip, [sp, #96]	; 0x60
     8e4:	strh	r1, [r6, r2]
     8e8:	add	r3, r3, sl
     8ec:	bne	92c <transpose_array+0x2f4>
     8f0:	add	r7, sp, #132	; 0x84
     8f4:	mov	r5, r4
     8f8:	add	r0, sp, #96	; 0x60
     8fc:	mov	lr, sl
     900:	mul	r1, lr, ip
     904:	str	r8, [r0]
     908:	ldr	r2, [r0, #4]!
     90c:	ldr	ip, [r7, #4]!
     910:	add	r2, r2, #1
     914:	ldr	lr, [r5, #4]!
     918:	sub	r3, r3, r1
     91c:	cmp	ip, r2
     920:	add	r3, r3, lr
     924:	str	r2, [r0]
     928:	beq	900 <transpose_array+0x2c8>
     92c:	ldr	r2, [sp, #20]
     930:	cmp	r9, r2
     934:	bne	8cc <transpose_array+0x294>
     938:	b	7f4 <transpose_array+0x1bc>
     93c:	ldr	r2, [sp, #12]
     940:	mov	r3, #0
     944:	ldr	fp, [sp, #132]	; 0x84
     948:	ldr	sl, [sp, #60]	; 0x3c
     94c:	mov	r8, r3
     950:	mov	r9, r2
     954:	add	r1, r2, r5, lsl #2
     958:	str	r1, [sp, #20]
     95c:	ldr	ip, [sp, #96]	; 0x60
     960:	ldr	r2, [r9], #4
     964:	add	ip, ip, #1
     968:	cmp	ip, fp
     96c:	str	r2, [r6, r3, lsl #2]
     970:	str	ip, [sp, #96]	; 0x60
     974:	add	r3, r3, sl
     978:	bne	9b8 <transpose_array+0x380>
     97c:	add	r7, sp, #132	; 0x84
     980:	mov	r5, r4
     984:	add	r0, sp, #96	; 0x60
     988:	mov	lr, sl
     98c:	mul	r1, lr, ip
     990:	str	r8, [r0]
     994:	ldr	r2, [r0, #4]!
     998:	ldr	ip, [r7, #4]!
     99c:	add	r2, r2, #1
     9a0:	ldr	lr, [r5, #4]!
     9a4:	sub	r3, r3, r1
     9a8:	cmp	ip, r2
     9ac:	add	r3, r3, lr
     9b0:	str	r2, [r0]
     9b4:	beq	98c <transpose_array+0x354>
     9b8:	ldr	r2, [sp, #20]
     9bc:	cmp	r2, r9
     9c0:	bne	95c <transpose_array+0x324>
     9c4:	b	7f4 <transpose_array+0x1bc>
     9c8:	ldr	r3, [pc, #52]	; a04 <transpose_array+0x3cc>
     9cc:	mov	r2, #172	; 0xac
     9d0:	ldr	r1, [pc, #48]	; a08 <transpose_array+0x3d0>
     9d4:	ldr	r0, [pc, #48]	; a0c <transpose_array+0x3d4>
     9d8:	bl	0 <__assert_fail>
     9dc:	mov	r3, #93	; 0x5d
     9e0:	str	r3, [sp]
     9e4:	ldr	r2, [sp, #8]
     9e8:	ldr	r3, [pc, #24]	; a08 <transpose_array+0x3d0>
     9ec:	ldr	r1, [pc, #28]	; a10 <transpose_array+0x3d8>
     9f0:	mvn	r0, #0
     9f4:	bl	0 <coda_set_error>
     9f8:	mvn	r3, #0
     9fc:	str	r3, [sp, #16]
     a00:	b	75c <transpose_array+0x124>
     a04:	.word	0x00000060
     a08:	.word	0x00000054
     a0c:	.word	0x00000050
     a10:	.word	0x000000a8

00000a14 <read_int8_array>:
     a14:	ldr	r3, [r0, #4]
     a18:	push	{r4, r5, r6, lr}
     a1c:	add	r3, r0, r3, lsl #4
     a20:	ldr	r3, [r3, #-8]
     a24:	ldr	r3, [r3]
     a28:	cmp	r3, #101	; 0x65
     a2c:	beq	af4 <read_int8_array+0xe0>
     a30:	mov	r4, r0
     a34:	mov	r6, r1
     a38:	mov	r5, r2
     a3c:	bls	a70 <read_int8_array+0x5c>
     a40:	cmp	r3, #103	; 0x67
     a44:	beq	ae0 <read_int8_array+0xcc>
     a48:	bcc	ac4 <read_int8_array+0xb0>
     a4c:	cmp	r3, #104	; 0x68
     a50:	beq	a94 <read_int8_array+0x80>
     a54:	cmp	r3, #105	; 0x69
     a58:	bne	aa0 <read_int8_array+0x8c>
     a5c:	ldr	r3, [pc, #164]	; b08 <read_int8_array+0xf4>
     a60:	ldr	r2, [pc, #164]	; b0c <read_int8_array+0xf8>
     a64:	ldr	r1, [pc, #164]	; b10 <read_int8_array+0xfc>
     a68:	ldr	r0, [pc, #164]	; b14 <read_int8_array+0x100>
     a6c:	bl	0 <__assert_fail>
     a70:	cmp	r3, #1
     a74:	beq	ad8 <read_int8_array+0xc4>
     a78:	bcc	a8c <read_int8_array+0x78>
     a7c:	cmp	r3, #100	; 0x64
     a80:	bne	aa0 <read_int8_array+0x8c>
     a84:	pop	{r4, r5, r6, lr}
     a88:	b	0 <coda_mem_cursor_read_int8_array>
     a8c:	pop	{r4, r5, r6, lr}
     a90:	b	0 <coda_ascii_cursor_read_int8_array>
     a94:	bl	0 <coda_netcdf_cursor_read_int8_array>
     a98:	cmp	r0, #0
     a9c:	bne	aec <read_int8_array+0xd8>
     aa0:	cmp	r5, #0
     aa4:	bne	ab0 <read_int8_array+0x9c>
     aa8:	mov	r0, r5
     aac:	pop	{r4, r5, r6, pc}
     ab0:	mov	r1, r6
     ab4:	mov	r0, r4
     ab8:	mov	r2, #1
     abc:	pop	{r4, r5, r6, lr}
     ac0:	b	638 <transpose_array>
     ac4:	mov	r1, #0
     ac8:	mvn	r0, #12
     acc:	bl	0 <coda_set_error>
     ad0:	mvn	r0, #0
     ad4:	pop	{r4, r5, r6, pc}
     ad8:	pop	{r4, r5, r6, lr}
     adc:	b	0 <coda_bin_cursor_read_int8_array>
     ae0:	bl	0 <coda_cdf_cursor_read_int8_array>
     ae4:	cmp	r0, #0
     ae8:	beq	aa0 <read_int8_array+0x8c>
     aec:	mvn	r0, #0
     af0:	pop	{r4, r5, r6, pc}
     af4:	mov	r1, #0
     af8:	mvn	r0, #10
     afc:	bl	0 <coda_set_error>
     b00:	mvn	r0, #0
     b04:	pop	{r4, r5, r6, pc}
     b08:	.word	0x00000070
     b0c:	.word	0x00000327
     b10:	.word	0x00000000
     b14:	.word	0x00000050

00000b18 <read_uint8_array>:
     b18:	ldr	r3, [r0, #4]
     b1c:	push	{r4, r5, r6, lr}
     b20:	add	r3, r0, r3, lsl #4
     b24:	ldr	r3, [r3, #-8]
     b28:	ldr	r3, [r3]
     b2c:	cmp	r3, #101	; 0x65
     b30:	beq	bc8 <read_uint8_array+0xb0>
     b34:	mov	r4, r0
     b38:	mov	r6, r1
     b3c:	mov	r5, r2
     b40:	bls	b6c <read_uint8_array+0x54>
     b44:	cmp	r3, #103	; 0x67
     b48:	beq	ba4 <read_uint8_array+0x8c>
     b4c:	bcc	b88 <read_uint8_array+0x70>
     b50:	cmp	r3, #105	; 0x69
     b54:	bhi	bb0 <read_uint8_array+0x98>
     b58:	ldr	r3, [pc, #152]	; bf8 <read_uint8_array+0xe0>
     b5c:	ldr	r2, [pc, #152]	; bfc <read_uint8_array+0xe4>
     b60:	ldr	r1, [pc, #152]	; c00 <read_uint8_array+0xe8>
     b64:	ldr	r0, [pc, #152]	; c04 <read_uint8_array+0xec>
     b68:	bl	0 <__assert_fail>
     b6c:	cmp	r3, #1
     b70:	beq	bc0 <read_uint8_array+0xa8>
     b74:	bcc	b9c <read_uint8_array+0x84>
     b78:	cmp	r3, #100	; 0x64
     b7c:	bne	bb0 <read_uint8_array+0x98>
     b80:	pop	{r4, r5, r6, lr}
     b84:	b	0 <coda_mem_cursor_read_uint8_array>
     b88:	mov	r1, #0
     b8c:	mvn	r0, #12
     b90:	bl	0 <coda_set_error>
     b94:	mvn	r0, #0
     b98:	pop	{r4, r5, r6, pc}
     b9c:	pop	{r4, r5, r6, lr}
     ba0:	b	0 <coda_ascii_cursor_read_uint8_array>
     ba4:	bl	0 <coda_cdf_cursor_read_uint8_array>
     ba8:	cmp	r0, #0
     bac:	bne	bf0 <read_uint8_array+0xd8>
     bb0:	cmp	r5, #0
     bb4:	bne	bdc <read_uint8_array+0xc4>
     bb8:	mov	r0, r5
     bbc:	pop	{r4, r5, r6, pc}
     bc0:	pop	{r4, r5, r6, lr}
     bc4:	b	0 <coda_bin_cursor_read_uint8_array>
     bc8:	mov	r1, #0
     bcc:	mvn	r0, #10
     bd0:	bl	0 <coda_set_error>
     bd4:	mvn	r0, #0
     bd8:	pop	{r4, r5, r6, pc}
     bdc:	mov	r1, r6
     be0:	mov	r0, r4
     be4:	mov	r2, #1
     be8:	pop	{r4, r5, r6, lr}
     bec:	b	638 <transpose_array>
     bf0:	mvn	r0, #0
     bf4:	pop	{r4, r5, r6, pc}
     bf8:	.word	0x00000080
     bfc:	.word	0x0000035b
     c00:	.word	0x00000000
     c04:	.word	0x00000050

00000c08 <read_int16_array>:
     c08:	ldr	r3, [r0, #4]
     c0c:	push	{r4, r5, r6, lr}
     c10:	add	r3, r0, r3, lsl #4
     c14:	ldr	r3, [r3, #-8]
     c18:	ldr	r3, [r3]
     c1c:	cmp	r3, #101	; 0x65
     c20:	beq	ce8 <read_int16_array+0xe0>
     c24:	mov	r4, r0
     c28:	mov	r6, r1
     c2c:	mov	r5, r2
     c30:	bls	c64 <read_int16_array+0x5c>
     c34:	cmp	r3, #103	; 0x67
     c38:	beq	cd4 <read_int16_array+0xcc>
     c3c:	bcc	cb8 <read_int16_array+0xb0>
     c40:	cmp	r3, #104	; 0x68
     c44:	beq	c88 <read_int16_array+0x80>
     c48:	cmp	r3, #105	; 0x69
     c4c:	bne	c94 <read_int16_array+0x8c>
     c50:	ldr	r3, [pc, #164]	; cfc <read_int16_array+0xf4>
     c54:	mov	r2, #916	; 0x394
     c58:	ldr	r1, [pc, #160]	; d00 <read_int16_array+0xf8>
     c5c:	ldr	r0, [pc, #160]	; d04 <read_int16_array+0xfc>
     c60:	bl	0 <__assert_fail>
     c64:	cmp	r3, #1
     c68:	beq	ccc <read_int16_array+0xc4>
     c6c:	bcc	c80 <read_int16_array+0x78>
     c70:	cmp	r3, #100	; 0x64
     c74:	bne	c94 <read_int16_array+0x8c>
     c78:	pop	{r4, r5, r6, lr}
     c7c:	b	0 <coda_mem_cursor_read_int16_array>
     c80:	pop	{r4, r5, r6, lr}
     c84:	b	0 <coda_ascii_cursor_read_int16_array>
     c88:	bl	0 <coda_netcdf_cursor_read_int16_array>
     c8c:	cmp	r0, #0
     c90:	bne	ce0 <read_int16_array+0xd8>
     c94:	cmp	r5, #0
     c98:	bne	ca4 <read_int16_array+0x9c>
     c9c:	mov	r0, r5
     ca0:	pop	{r4, r5, r6, pc}
     ca4:	mov	r1, r6
     ca8:	mov	r0, r4
     cac:	mov	r2, #2
     cb0:	pop	{r4, r5, r6, lr}
     cb4:	b	638 <transpose_array>
     cb8:	mov	r1, #0
     cbc:	mvn	r0, #12
     cc0:	bl	0 <coda_set_error>
     cc4:	mvn	r0, #0
     cc8:	pop	{r4, r5, r6, pc}
     ccc:	pop	{r4, r5, r6, lr}
     cd0:	b	0 <coda_bin_cursor_read_int16_array>
     cd4:	bl	0 <coda_cdf_cursor_read_int16_array>
     cd8:	cmp	r0, #0
     cdc:	beq	c94 <read_int16_array+0x8c>
     ce0:	mvn	r0, #0
     ce4:	pop	{r4, r5, r6, pc}
     ce8:	mov	r1, #0
     cec:	mvn	r0, #10
     cf0:	bl	0 <coda_set_error>
     cf4:	mvn	r0, #0
     cf8:	pop	{r4, r5, r6, pc}
     cfc:	.word	0x00000094
     d00:	.word	0x00000000
     d04:	.word	0x00000050

00000d08 <read_uint16_array>:
     d08:	ldr	r3, [r0, #4]
     d0c:	push	{r4, r5, r6, lr}
     d10:	add	r3, r0, r3, lsl #4
     d14:	ldr	r3, [r3, #-8]
     d18:	ldr	r3, [r3]
     d1c:	cmp	r3, #101	; 0x65
     d20:	beq	db8 <read_uint16_array+0xb0>
     d24:	mov	r4, r0
     d28:	mov	r6, r1
     d2c:	mov	r5, r2
     d30:	bls	d5c <read_uint16_array+0x54>
     d34:	cmp	r3, #103	; 0x67
     d38:	beq	d94 <read_uint16_array+0x8c>
     d3c:	bcc	d78 <read_uint16_array+0x70>
     d40:	cmp	r3, #105	; 0x69
     d44:	bhi	da0 <read_uint16_array+0x98>
     d48:	ldr	r3, [pc, #152]	; de8 <read_uint16_array+0xe0>
     d4c:	mov	r2, #968	; 0x3c8
     d50:	ldr	r1, [pc, #148]	; dec <read_uint16_array+0xe4>
     d54:	ldr	r0, [pc, #148]	; df0 <read_uint16_array+0xe8>
     d58:	bl	0 <__assert_fail>
     d5c:	cmp	r3, #1
     d60:	beq	db0 <read_uint16_array+0xa8>
     d64:	bcc	d8c <read_uint16_array+0x84>
     d68:	cmp	r3, #100	; 0x64
     d6c:	bne	da0 <read_uint16_array+0x98>
     d70:	pop	{r4, r5, r6, lr}
     d74:	b	0 <coda_mem_cursor_read_uint16_array>
     d78:	mov	r1, #0
     d7c:	mvn	r0, #12
     d80:	bl	0 <coda_set_error>
     d84:	mvn	r0, #0
     d88:	pop	{r4, r5, r6, pc}
     d8c:	pop	{r4, r5, r6, lr}
     d90:	b	0 <coda_ascii_cursor_read_uint16_array>
     d94:	bl	0 <coda_cdf_cursor_read_uint16_array>
     d98:	cmp	r0, #0
     d9c:	bne	de0 <read_uint16_array+0xd8>
     da0:	cmp	r5, #0
     da4:	bne	dcc <read_uint16_array+0xc4>
     da8:	mov	r0, r5
     dac:	pop	{r4, r5, r6, pc}
     db0:	pop	{r4, r5, r6, lr}
     db4:	b	0 <coda_bin_cursor_read_uint16_array>
     db8:	mov	r1, #0
     dbc:	mvn	r0, #10
     dc0:	bl	0 <coda_set_error>
     dc4:	mvn	r0, #0
     dc8:	pop	{r4, r5, r6, pc}
     dcc:	mov	r1, r6
     dd0:	mov	r0, r4
     dd4:	mov	r2, #2
     dd8:	pop	{r4, r5, r6, lr}
     ddc:	b	638 <transpose_array>
     de0:	mvn	r0, #0
     de4:	pop	{r4, r5, r6, pc}
     de8:	.word	0x000000a8
     dec:	.word	0x00000000
     df0:	.word	0x00000050

00000df4 <read_int32_array>:
     df4:	ldr	r3, [r0, #4]
     df8:	push	{r4, r5, r6, lr}
     dfc:	add	r3, r0, r3, lsl #4
     e00:	ldr	r3, [r3, #-8]
     e04:	ldr	r3, [r3]
     e08:	cmp	r3, #101	; 0x65
     e0c:	beq	ed4 <read_int32_array+0xe0>
     e10:	mov	r4, r0
     e14:	mov	r6, r1
     e18:	mov	r5, r2
     e1c:	bls	e50 <read_int32_array+0x5c>
     e20:	cmp	r3, #103	; 0x67
     e24:	beq	ec0 <read_int32_array+0xcc>
     e28:	bcc	ea4 <read_int32_array+0xb0>
     e2c:	cmp	r3, #104	; 0x68
     e30:	beq	e74 <read_int32_array+0x80>
     e34:	cmp	r3, #105	; 0x69
     e38:	bne	e80 <read_int32_array+0x8c>
     e3c:	ldr	r3, [pc, #164]	; ee8 <read_int32_array+0xf4>
     e40:	ldr	r2, [pc, #164]	; eec <read_int32_array+0xf8>
     e44:	ldr	r1, [pc, #164]	; ef0 <read_int32_array+0xfc>
     e48:	ldr	r0, [pc, #164]	; ef4 <read_int32_array+0x100>
     e4c:	bl	0 <__assert_fail>
     e50:	cmp	r3, #1
     e54:	beq	eb8 <read_int32_array+0xc4>
     e58:	bcc	e6c <read_int32_array+0x78>
     e5c:	cmp	r3, #100	; 0x64
     e60:	bne	e80 <read_int32_array+0x8c>
     e64:	pop	{r4, r5, r6, lr}
     e68:	b	0 <coda_mem_cursor_read_int32_array>
     e6c:	pop	{r4, r5, r6, lr}
     e70:	b	0 <coda_ascii_cursor_read_int32_array>
     e74:	bl	0 <coda_netcdf_cursor_read_int32_array>
     e78:	cmp	r0, #0
     e7c:	bne	ecc <read_int32_array+0xd8>
     e80:	cmp	r5, #0
     e84:	bne	e90 <read_int32_array+0x9c>
     e88:	mov	r0, r5
     e8c:	pop	{r4, r5, r6, pc}
     e90:	mov	r1, r6
     e94:	mov	r0, r4
     e98:	mov	r2, #4
     e9c:	pop	{r4, r5, r6, lr}
     ea0:	b	638 <transpose_array>
     ea4:	mov	r1, #0
     ea8:	mvn	r0, #12
     eac:	bl	0 <coda_set_error>
     eb0:	mvn	r0, #0
     eb4:	pop	{r4, r5, r6, pc}
     eb8:	pop	{r4, r5, r6, lr}
     ebc:	b	0 <coda_bin_cursor_read_int32_array>
     ec0:	bl	0 <coda_cdf_cursor_read_int32_array>
     ec4:	cmp	r0, #0
     ec8:	beq	e80 <read_int32_array+0x8c>
     ecc:	mvn	r0, #0
     ed0:	pop	{r4, r5, r6, pc}
     ed4:	mov	r1, #0
     ed8:	mvn	r0, #10
     edc:	bl	0 <coda_set_error>
     ee0:	mvn	r0, #0
     ee4:	pop	{r4, r5, r6, pc}
     ee8:	.word	0x000000bc
     eec:	.word	0x00000401
     ef0:	.word	0x00000000
     ef4:	.word	0x00000050

00000ef8 <read_uint32_array>:
     ef8:	ldr	r3, [r0, #4]
     efc:	push	{r4, r5, r6, lr}
     f00:	add	r3, r0, r3, lsl #4
     f04:	ldr	r3, [r3, #-8]
     f08:	ldr	r3, [r3]
     f0c:	cmp	r3, #101	; 0x65
     f10:	beq	fa8 <read_uint32_array+0xb0>
     f14:	mov	r4, r0
     f18:	mov	r6, r1
     f1c:	mov	r5, r2
     f20:	bls	f4c <read_uint32_array+0x54>
     f24:	cmp	r3, #103	; 0x67
     f28:	beq	f84 <read_uint32_array+0x8c>
     f2c:	bcc	f68 <read_uint32_array+0x70>
     f30:	cmp	r3, #105	; 0x69
     f34:	bhi	f90 <read_uint32_array+0x98>
     f38:	ldr	r3, [pc, #152]	; fd8 <read_uint32_array+0xe0>
     f3c:	ldr	r2, [pc, #152]	; fdc <read_uint32_array+0xe4>
     f40:	ldr	r1, [pc, #152]	; fe0 <read_uint32_array+0xe8>
     f44:	ldr	r0, [pc, #152]	; fe4 <read_uint32_array+0xec>
     f48:	bl	0 <__assert_fail>
     f4c:	cmp	r3, #1
     f50:	beq	fa0 <read_uint32_array+0xa8>
     f54:	bcc	f7c <read_uint32_array+0x84>
     f58:	cmp	r3, #100	; 0x64
     f5c:	bne	f90 <read_uint32_array+0x98>
     f60:	pop	{r4, r5, r6, lr}
     f64:	b	0 <coda_mem_cursor_read_uint32_array>
     f68:	mov	r1, #0
     f6c:	mvn	r0, #12
     f70:	bl	0 <coda_set_error>
     f74:	mvn	r0, #0
     f78:	pop	{r4, r5, r6, pc}
     f7c:	pop	{r4, r5, r6, lr}
     f80:	b	0 <coda_ascii_cursor_read_uint32_array>
     f84:	bl	0 <coda_cdf_cursor_read_uint32_array>
     f88:	cmp	r0, #0
     f8c:	bne	fd0 <read_uint32_array+0xd8>
     f90:	cmp	r5, #0
     f94:	bne	fbc <read_uint32_array+0xc4>
     f98:	mov	r0, r5
     f9c:	pop	{r4, r5, r6, pc}
     fa0:	pop	{r4, r5, r6, lr}
     fa4:	b	0 <coda_bin_cursor_read_uint32_array>
     fa8:	mov	r1, #0
     fac:	mvn	r0, #10
     fb0:	bl	0 <coda_set_error>
     fb4:	mvn	r0, #0
     fb8:	pop	{r4, r5, r6, pc}
     fbc:	mov	r1, r6
     fc0:	mov	r0, r4
     fc4:	mov	r2, #4
     fc8:	pop	{r4, r5, r6, lr}
     fcc:	b	638 <transpose_array>
     fd0:	mvn	r0, #0
     fd4:	pop	{r4, r5, r6, pc}
     fd8:	.word	0x000000d0
     fdc:	.word	0x00000435
     fe0:	.word	0x00000000
     fe4:	.word	0x00000050

00000fe8 <read_int64_array>:
     fe8:	ldr	r3, [r0, #4]
     fec:	push	{r4, r5, r6, lr}
     ff0:	add	r3, r0, r3, lsl #4
     ff4:	ldr	r3, [r3, #-8]
     ff8:	ldr	r3, [r3]
     ffc:	cmp	r3, #101	; 0x65
    1000:	beq	1098 <read_int64_array+0xb0>
    1004:	mov	r4, r0
    1008:	mov	r6, r1
    100c:	mov	r5, r2
    1010:	bls	103c <read_int64_array+0x54>
    1014:	cmp	r3, #103	; 0x67
    1018:	beq	1074 <read_int64_array+0x8c>
    101c:	bcc	1058 <read_int64_array+0x70>
    1020:	cmp	r3, #105	; 0x69
    1024:	bhi	1080 <read_int64_array+0x98>
    1028:	ldr	r3, [pc, #152]	; 10c8 <read_int64_array+0xe0>
    102c:	ldr	r2, [pc, #152]	; 10cc <read_int64_array+0xe4>
    1030:	ldr	r1, [pc, #152]	; 10d0 <read_int64_array+0xe8>
    1034:	ldr	r0, [pc, #152]	; 10d4 <read_int64_array+0xec>
    1038:	bl	0 <__assert_fail>
    103c:	cmp	r3, #1
    1040:	beq	1090 <read_int64_array+0xa8>
    1044:	bcc	106c <read_int64_array+0x84>
    1048:	cmp	r3, #100	; 0x64
    104c:	bne	1080 <read_int64_array+0x98>
    1050:	pop	{r4, r5, r6, lr}
    1054:	b	0 <coda_mem_cursor_read_int64_array>
    1058:	mov	r1, #0
    105c:	mvn	r0, #12
    1060:	bl	0 <coda_set_error>
    1064:	mvn	r0, #0
    1068:	pop	{r4, r5, r6, pc}
    106c:	pop	{r4, r5, r6, lr}
    1070:	b	0 <coda_ascii_cursor_read_int64_array>
    1074:	bl	0 <coda_cdf_cursor_read_int64_array>
    1078:	cmp	r0, #0
    107c:	bne	10c0 <read_int64_array+0xd8>
    1080:	cmp	r5, #0
    1084:	bne	10ac <read_int64_array+0xc4>
    1088:	mov	r0, r5
    108c:	pop	{r4, r5, r6, pc}
    1090:	pop	{r4, r5, r6, lr}
    1094:	b	0 <coda_bin_cursor_read_int64_array>
    1098:	mov	r1, #0
    109c:	mvn	r0, #10
    10a0:	bl	0 <coda_set_error>
    10a4:	mvn	r0, #0
    10a8:	pop	{r4, r5, r6, pc}
    10ac:	mov	r1, r6
    10b0:	mov	r0, r4
    10b4:	mov	r2, #8
    10b8:	pop	{r4, r5, r6, lr}
    10bc:	b	638 <transpose_array>
    10c0:	mvn	r0, #0
    10c4:	pop	{r4, r5, r6, pc}
    10c8:	.word	0x000000e4
    10cc:	.word	0x00000469
    10d0:	.word	0x00000000
    10d4:	.word	0x00000050

000010d8 <read_uint64_array>:
    10d8:	ldr	r3, [r0, #4]
    10dc:	push	{r4, lr}
    10e0:	add	r3, r0, r3, lsl #4
    10e4:	ldr	r3, [r3, #-8]
    10e8:	ldr	r3, [r3]
    10ec:	cmp	r3, #101	; 0x65
    10f0:	beq	1178 <read_uint64_array+0xa0>
    10f4:	mov	ip, r0
    10f8:	mov	r4, r1
    10fc:	mov	lr, r2
    1100:	bhi	1120 <read_uint64_array+0x48>
    1104:	cmp	r3, #1
    1108:	beq	1144 <read_uint64_array+0x6c>
    110c:	bcc	1170 <read_uint64_array+0x98>
    1110:	cmp	r3, #100	; 0x64
    1114:	bne	114c <read_uint64_array+0x74>
    1118:	pop	{r4, lr}
    111c:	b	0 <coda_mem_cursor_read_uint64_array>
    1120:	cmp	r3, #102	; 0x66
    1124:	beq	115c <read_uint64_array+0x84>
    1128:	cmp	r3, #105	; 0x69
    112c:	bhi	114c <read_uint64_array+0x74>
    1130:	ldr	r3, [pc, #104]	; 11a0 <read_uint64_array+0xc8>
    1134:	ldr	r2, [pc, #104]	; 11a4 <read_uint64_array+0xcc>
    1138:	ldr	r1, [pc, #104]	; 11a8 <read_uint64_array+0xd0>
    113c:	ldr	r0, [pc, #104]	; 11ac <read_uint64_array+0xd4>
    1140:	bl	0 <__assert_fail>
    1144:	pop	{r4, lr}
    1148:	b	0 <coda_bin_cursor_read_uint64_array>
    114c:	cmp	lr, #0
    1150:	bne	118c <read_uint64_array+0xb4>
    1154:	mov	r0, lr
    1158:	pop	{r4, pc}
    115c:	mov	r1, #0
    1160:	mvn	r0, #12
    1164:	bl	0 <coda_set_error>
    1168:	mvn	r0, #0
    116c:	pop	{r4, pc}
    1170:	pop	{r4, lr}
    1174:	b	0 <coda_ascii_cursor_read_uint64_array>
    1178:	mov	r1, #0
    117c:	mvn	r0, #10
    1180:	bl	0 <coda_set_error>
    1184:	mvn	r0, #0
    1188:	pop	{r4, pc}
    118c:	mov	r1, r4
    1190:	mov	r0, ip
    1194:	mov	r2, #8
    1198:	pop	{r4, lr}
    119c:	b	638 <transpose_array>
    11a0:	.word	0x000000f8
    11a4:	.word	0x00000498
    11a8:	.word	0x00000000
    11ac:	.word	0x00000050

000011b0 <read_float_array>:
    11b0:	ldr	r3, [r0, #4]
    11b4:	push	{r4, r5, r6, lr}
    11b8:	add	r3, r0, r3, lsl #4
    11bc:	ldr	r3, [r3, #-8]
    11c0:	ldr	r3, [r3]
    11c4:	cmp	r3, #101	; 0x65
    11c8:	beq	128c <read_float_array+0xdc>
    11cc:	mov	r4, r0
    11d0:	mov	r6, r1
    11d4:	mov	r5, r2
    11d8:	bls	1214 <read_float_array+0x64>
    11dc:	cmp	r3, #103	; 0x67
    11e0:	beq	127c <read_float_array+0xcc>
    11e4:	bcc	1260 <read_float_array+0xb0>
    11e8:	cmp	r3, #104	; 0x68
    11ec:	beq	1238 <read_float_array+0x88>
    11f0:	cmp	r3, #105	; 0x69
    11f4:	bne	1204 <read_float_array+0x54>
    11f8:	bl	0 <coda_grib_cursor_read_float_array>
    11fc:	cmp	r0, #0
    1200:	bne	1244 <read_float_array+0x94>
    1204:	cmp	r5, #0
    1208:	bne	124c <read_float_array+0x9c>
    120c:	mov	r0, r5
    1210:	pop	{r4, r5, r6, pc}
    1214:	cmp	r3, #1
    1218:	beq	1274 <read_float_array+0xc4>
    121c:	bcc	1230 <read_float_array+0x80>
    1220:	cmp	r3, #100	; 0x64
    1224:	bne	1204 <read_float_array+0x54>
    1228:	pop	{r4, r5, r6, lr}
    122c:	b	0 <coda_mem_cursor_read_float_array>
    1230:	pop	{r4, r5, r6, lr}
    1234:	b	0 <coda_ascii_cursor_read_float_array>
    1238:	bl	0 <coda_netcdf_cursor_read_float_array>
    123c:	cmp	r0, #0
    1240:	beq	1204 <read_float_array+0x54>
    1244:	mvn	r0, #0
    1248:	pop	{r4, r5, r6, pc}
    124c:	mov	r1, r6
    1250:	mov	r0, r4
    1254:	mov	r2, #4
    1258:	pop	{r4, r5, r6, lr}
    125c:	b	638 <transpose_array>
    1260:	mov	r1, #0
    1264:	mvn	r0, #12
    1268:	bl	0 <coda_set_error>
    126c:	mvn	r0, #0
    1270:	pop	{r4, r5, r6, pc}
    1274:	pop	{r4, r5, r6, lr}
    1278:	b	0 <coda_bin_cursor_read_float_array>
    127c:	bl	0 <coda_cdf_cursor_read_float_array>
    1280:	cmp	r0, #0
    1284:	beq	1204 <read_float_array+0x54>
    1288:	b	1244 <read_float_array+0x94>
    128c:	mov	r1, #0
    1290:	mvn	r0, #10
    1294:	bl	0 <coda_set_error>
    1298:	mvn	r0, #0
    129c:	pop	{r4, r5, r6, pc}

000012a0 <read_array>:
    12a0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    12a4:	sub	sp, sp, #604	; 0x25c
    12a8:	mov	r6, r1
    12ac:	mov	r5, r2
    12b0:	add	r1, sp, #8
    12b4:	add	r2, sp, #12
    12b8:	mov	r7, r3
    12bc:	mov	r4, r0
    12c0:	bl	0 <coda_cursor_get_array_dim>
    12c4:	subs	sl, r0, #0
    12c8:	bne	138c <read_array+0xec>
    12cc:	mov	r1, r4
    12d0:	mov	r2, #520	; 0x208
    12d4:	add	r0, sp, #80	; 0x50
    12d8:	bl	0 <memcpy>
    12dc:	ldr	r1, [sp, #8]
    12e0:	ldr	r2, [sp, #640]	; 0x280
    12e4:	cmp	r1, #1
    12e8:	movgt	r3, #0
    12ec:	movle	r3, #1
    12f0:	cmp	r2, #1
    12f4:	orrne	r3, r3, #1
    12f8:	cmp	r3, #0
    12fc:	beq	139c <read_array+0xfc>
    1300:	cmp	r1, #0
    1304:	ble	14d0 <read_array+0x230>
    1308:	add	r3, sp, #12
    130c:	add	r1, r3, r1, lsl #2
    1310:	mov	r8, #1
    1314:	ldr	r2, [r3], #4
    1318:	cmp	r1, r3
    131c:	mul	r8, r2, r8
    1320:	bne	1314 <read_array+0x74>
    1324:	cmp	r8, #0
    1328:	ble	1380 <read_array+0xe0>
    132c:	mov	r1, #0
    1330:	add	r0, sp, #80	; 0x50
    1334:	bl	0 <coda_cursor_goto_array_element_by_index>
    1338:	subs	r4, r0, #0
    133c:	bne	138c <read_array+0xec>
    1340:	sub	r9, r8, #1
    1344:	mov	r1, r5
    1348:	add	r0, sp, #80	; 0x50
    134c:	blx	r6
    1350:	add	r5, r5, r7
    1354:	cmp	r0, #0
    1358:	add	r0, sp, #80	; 0x50
    135c:	bne	138c <read_array+0xec>
    1360:	cmp	r9, r4
    1364:	add	r4, r4, #1
    1368:	ble	1378 <read_array+0xd8>
    136c:	bl	0 <coda_cursor_goto_next_array_element>
    1370:	cmp	r0, #0
    1374:	bne	138c <read_array+0xec>
    1378:	cmp	r4, r8
    137c:	blt	1344 <read_array+0xa4>
    1380:	mov	r0, sl
    1384:	add	sp, sp, #604	; 0x25c
    1388:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    138c:	mvn	sl, #0
    1390:	mov	r0, sl
    1394:	add	sp, sp, #604	; 0x25c
    1398:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    139c:	mov	ip, #1
    13a0:	add	r9, sp, #600	; 0x258
    13a4:	add	r2, sp, #12
    13a8:	mov	r0, ip
    13ac:	mov	r3, sl
    13b0:	str	ip, [r9, #-556]!	; 0xfffffdd4
    13b4:	ldr	ip, [r2], #4
    13b8:	add	r3, r3, #1
    13bc:	cmp	r1, r3
    13c0:	mul	r0, ip, r0
    13c4:	str	r0, [r9, r3, lsl #2]
    13c8:	bgt	13b4 <read_array+0x114>
    13cc:	add	r3, sp, #600	; 0x258
    13d0:	add	r3, r3, r1, lsl #2
    13d4:	ldr	r8, [r3, #-556]	; 0xfffffdd4
    13d8:	cmp	r8, #0
    13dc:	ble	1380 <read_array+0xe0>
    13e0:	add	r3, sp, #600	; 0x258
    13e4:	add	r3, r3, r1, lsl #2
    13e8:	add	r0, sp, #80	; 0x50
    13ec:	ldr	r3, [r3, #-560]	; 0xfffffdd0
    13f0:	mov	r1, #0
    13f4:	str	r3, [sp, #4]
    13f8:	bl	0 <coda_cursor_goto_array_element_by_index>
    13fc:	subs	r4, r0, #0
    1400:	bne	138c <read_array+0xec>
    1404:	mov	fp, r4
    1408:	mla	r1, r7, r4, r5
    140c:	add	r0, sp, #80	; 0x50
    1410:	blx	r6
    1414:	cmp	r0, #0
    1418:	bne	138c <read_array+0xec>
    141c:	add	fp, fp, #1
    1420:	cmp	r8, fp
    1424:	bgt	14ac <read_array+0x20c>
    1428:	ldr	r3, [sp, #4]
    142c:	add	r4, r4, r3
    1430:	cmp	r8, r4
    1434:	bgt	1408 <read_array+0x168>
    1438:	cmp	r8, fp
    143c:	beq	1380 <read_array+0xe0>
    1440:	ldr	r1, [sp, #8]
    1444:	add	r3, sp, #600	; 0x258
    1448:	subs	r0, r1, #3
    144c:	add	r3, r3, r1, lsl #2
    1450:	mov	ip, r3
    1454:	ldr	r3, [r3, #-564]	; 0xfffffdcc
    1458:	ldr	ip, [ip, #-556]	; 0xfffffdd4
    145c:	add	r2, sp, #600	; 0x258
    1460:	sub	r3, r3, ip
    1464:	add	r4, r4, r3
    1468:	bmi	1408 <read_array+0x168>
    146c:	add	r3, r2, r1, lsl #2
    1470:	ldr	ip, [r3, #-560]	; 0xfffffdd0
    1474:	cmp	ip, r4
    1478:	bgt	1408 <read_array+0x168>
    147c:	add	r1, r9, r1, lsl #2
    1480:	sub	r1, r1, #8
    1484:	ldr	r3, [r1, #-4]!
    1488:	sub	r0, r0, #1
    148c:	sub	r3, r3, ip
    1490:	cmn	r0, #1
    1494:	add	r4, r4, r3
    1498:	beq	1408 <read_array+0x168>
    149c:	ldr	ip, [r1, #4]
    14a0:	cmp	ip, r4
    14a4:	ble	1484 <read_array+0x1e4>
    14a8:	b	1408 <read_array+0x168>
    14ac:	add	r0, sp, #80	; 0x50
    14b0:	bl	0 <coda_cursor_goto_next_array_element>
    14b4:	cmp	r0, #0
    14b8:	bne	138c <read_array+0xec>
    14bc:	ldr	r3, [sp, #4]
    14c0:	add	r4, r4, r3
    14c4:	cmp	r4, r8
    14c8:	blt	1408 <read_array+0x168>
    14cc:	b	1440 <read_array+0x1a0>
    14d0:	mov	r8, #1
    14d4:	b	132c <read_array+0x8c>

000014d8 <read_double_array>:
    14d8:	ldr	r3, [r0, #4]
    14dc:	push	{r4, r5, lr}
    14e0:	mov	r5, r1
    14e4:	add	r3, r0, r3, lsl #4
    14e8:	sub	sp, sp, #20
    14ec:	ldr	r3, [r3, #-8]
    14f0:	mov	r4, r0
    14f4:	ldr	r1, [r3]
    14f8:	cmp	r1, #99	; 0x63
    14fc:	ldrhi	r3, [r3, #4]
    1500:	ldr	r3, [r3, #40]	; 0x28
    1504:	ldr	r3, [r3, #8]
    1508:	cmp	r3, #6
    150c:	beq	1624 <read_double_array+0x14c>
    1510:	cmp	r1, #101	; 0x65
    1514:	beq	160c <read_double_array+0x134>
    1518:	bls	154c <read_double_array+0x74>
    151c:	cmp	r1, #103	; 0x67
    1520:	beq	15ec <read_double_array+0x114>
    1524:	bcc	15d4 <read_double_array+0xfc>
    1528:	cmp	r1, #104	; 0x68
    152c:	beq	1580 <read_double_array+0xa8>
    1530:	cmp	r1, #105	; 0x69
    1534:	bne	1598 <read_double_array+0xc0>
    1538:	ldr	r3, [pc, #252]	; 163c <read_double_array+0x164>
    153c:	ldr	r2, [pc, #252]	; 1640 <read_double_array+0x168>
    1540:	ldr	r1, [pc, #252]	; 1644 <read_double_array+0x16c>
    1544:	ldr	r0, [pc, #252]	; 1648 <read_double_array+0x170>
    1548:	bl	0 <__assert_fail>
    154c:	cmp	r1, #1
    1550:	beq	15c4 <read_double_array+0xec>
    1554:	bcc	1570 <read_double_array+0x98>
    1558:	cmp	r1, #100	; 0x64
    155c:	bne	1598 <read_double_array+0xc0>
    1560:	mov	r1, r5
    1564:	add	sp, sp, #20
    1568:	pop	{r4, r5, lr}
    156c:	b	0 <coda_mem_cursor_read_double_array>
    1570:	mov	r1, r5
    1574:	add	sp, sp, #20
    1578:	pop	{r4, r5, lr}
    157c:	b	0 <coda_ascii_cursor_read_double_array>
    1580:	mov	r1, r5
    1584:	str	r2, [sp, #12]
    1588:	bl	0 <coda_netcdf_cursor_read_double_array>
    158c:	ldr	r2, [sp, #12]
    1590:	cmp	r0, #0
    1594:	bne	1604 <read_double_array+0x12c>
    1598:	cmp	r2, #0
    159c:	moveq	r0, r2
    15a0:	bne	15ac <read_double_array+0xd4>
    15a4:	add	sp, sp, #20
    15a8:	pop	{r4, r5, pc}
    15ac:	mov	r1, r5
    15b0:	mov	r0, r4
    15b4:	mov	r2, #8
    15b8:	add	sp, sp, #20
    15bc:	pop	{r4, r5, lr}
    15c0:	b	638 <transpose_array>
    15c4:	mov	r1, r5
    15c8:	add	sp, sp, #20
    15cc:	pop	{r4, r5, lr}
    15d0:	b	0 <coda_bin_cursor_read_double_array>
    15d4:	mov	r1, #0
    15d8:	mvn	r0, #12
    15dc:	bl	0 <coda_set_error>
    15e0:	mvn	r0, #0
    15e4:	add	sp, sp, #20
    15e8:	pop	{r4, r5, pc}
    15ec:	mov	r1, r5
    15f0:	str	r2, [sp, #12]
    15f4:	bl	0 <coda_cdf_cursor_read_double_array>
    15f8:	ldr	r2, [sp, #12]
    15fc:	cmp	r0, #0
    1600:	beq	1598 <read_double_array+0xc0>
    1604:	mvn	r0, #0
    1608:	b	15a4 <read_double_array+0xcc>
    160c:	mov	r1, #0
    1610:	mvn	r0, #10
    1614:	bl	0 <coda_set_error>
    1618:	mvn	r0, #0
    161c:	add	sp, sp, #20
    1620:	pop	{r4, r5, pc}
    1624:	str	r2, [sp]
    1628:	mov	r3, #8
    162c:	mov	r2, r5
    1630:	ldr	r1, [pc, #20]	; 164c <read_double_array+0x174>
    1634:	bl	12a0 <read_array>
    1638:	b	15a4 <read_double_array+0xcc>
    163c:	.word	0x0000010c
    1640:	.word	0x00000515
    1644:	.word	0x00000000
    1648:	.word	0x00000050
    164c:	.word	0x00000000

00001650 <read_int8_partial_array>:
    1650:	push	{r4, lr}
    1654:	ldr	lr, [r0, #4]
    1658:	add	ip, r0, lr, lsl #4
    165c:	ldr	ip, [ip, #-8]
    1660:	ldr	ip, [ip]
    1664:	cmp	ip, #101	; 0x65
    1668:	beq	16e8 <read_int8_partial_array+0x98>
    166c:	bls	168c <read_int8_partial_array+0x3c>
    1670:	cmp	ip, #103	; 0x67
    1674:	beq	16c4 <read_int8_partial_array+0x74>
    1678:	bcc	16a8 <read_int8_partial_array+0x58>
    167c:	cmp	ip, #104	; 0x68
    1680:	bne	16cc <read_int8_partial_array+0x7c>
    1684:	pop	{r4, lr}
    1688:	b	0 <coda_netcdf_cursor_read_int8_partial_array>
    168c:	cmp	ip, #1
    1690:	beq	16e0 <read_int8_partial_array+0x90>
    1694:	bcc	16bc <read_int8_partial_array+0x6c>
    1698:	cmp	ip, #100	; 0x64
    169c:	bne	16cc <read_int8_partial_array+0x7c>
    16a0:	pop	{r4, lr}
    16a4:	b	0 <coda_mem_cursor_read_int8_partial_array>
    16a8:	mov	r1, #0
    16ac:	mvn	r0, #12
    16b0:	bl	0 <coda_set_error>
    16b4:	mvn	r0, #0
    16b8:	pop	{r4, pc}
    16bc:	pop	{r4, lr}
    16c0:	b	0 <coda_ascii_cursor_read_int8_partial_array>
    16c4:	pop	{r4, lr}
    16c8:	b	0 <coda_cdf_cursor_read_int8_partial_array>
    16cc:	ldr	r3, [pc, #40]	; 16fc <read_int8_partial_array+0xac>
    16d0:	mov	r2, #1392	; 0x570
    16d4:	ldr	r1, [pc, #36]	; 1700 <read_int8_partial_array+0xb0>
    16d8:	ldr	r0, [pc, #36]	; 1704 <read_int8_partial_array+0xb4>
    16dc:	bl	0 <__assert_fail>
    16e0:	pop	{r4, lr}
    16e4:	b	0 <coda_bin_cursor_read_int8_partial_array>
    16e8:	mov	r1, #0
    16ec:	mvn	r0, #10
    16f0:	bl	0 <coda_set_error>
    16f4:	mvn	r0, #0
    16f8:	pop	{r4, pc}
    16fc:	.word	0x00000120
    1700:	.word	0x00000000
    1704:	.word	0x00000050

00001708 <read_uint8_partial_array>:
    1708:	push	{r4, lr}
    170c:	ldr	lr, [r0, #4]
    1710:	add	ip, r0, lr, lsl #4
    1714:	ldr	ip, [ip, #-8]
    1718:	ldr	ip, [ip]
    171c:	cmp	ip, #100	; 0x64
    1720:	beq	17a0 <read_uint8_partial_array+0x98>
    1724:	bls	1744 <read_uint8_partial_array+0x3c>
    1728:	cmp	ip, #102	; 0x66
    172c:	beq	178c <read_uint8_partial_array+0x84>
    1730:	bcc	1770 <read_uint8_partial_array+0x68>
    1734:	cmp	ip, #103	; 0x67
    1738:	bne	175c <read_uint8_partial_array+0x54>
    173c:	pop	{r4, lr}
    1740:	b	0 <coda_cdf_cursor_read_uint8_partial_array>
    1744:	cmp	ip, #0
    1748:	beq	1784 <read_uint8_partial_array+0x7c>
    174c:	cmp	ip, #1
    1750:	bne	175c <read_uint8_partial_array+0x54>
    1754:	pop	{r4, lr}
    1758:	b	0 <coda_bin_cursor_read_uint8_partial_array>
    175c:	ldr	r3, [pc, #68]	; 17a8 <read_uint8_partial_array+0xa0>
    1760:	ldr	r2, [pc, #68]	; 17ac <read_uint8_partial_array+0xa4>
    1764:	ldr	r1, [pc, #68]	; 17b0 <read_uint8_partial_array+0xa8>
    1768:	ldr	r0, [pc, #68]	; 17b4 <read_uint8_partial_array+0xac>
    176c:	bl	0 <__assert_fail>
    1770:	mov	r1, #0
    1774:	mvn	r0, #10
    1778:	bl	0 <coda_set_error>
    177c:	mvn	r0, #0
    1780:	pop	{r4, pc}
    1784:	pop	{r4, lr}
    1788:	b	0 <coda_ascii_cursor_read_uint8_partial_array>
    178c:	mov	r1, #0
    1790:	mvn	r0, #12
    1794:	bl	0 <coda_set_error>
    1798:	mvn	r0, #0
    179c:	pop	{r4, pc}
    17a0:	pop	{r4, lr}
    17a4:	b	0 <coda_mem_cursor_read_uint8_partial_array>
    17a8:	.word	0x00000138
    17ac:	.word	0x00000593
    17b0:	.word	0x00000000
    17b4:	.word	0x00000050

000017b8 <read_int16_partial_array>:
    17b8:	push	{r4, lr}
    17bc:	ldr	lr, [r0, #4]
    17c0:	add	ip, r0, lr, lsl #4
    17c4:	ldr	ip, [ip, #-8]
    17c8:	ldr	ip, [ip]
    17cc:	cmp	ip, #101	; 0x65
    17d0:	beq	1850 <read_int16_partial_array+0x98>
    17d4:	bls	17f4 <read_int16_partial_array+0x3c>
    17d8:	cmp	ip, #103	; 0x67
    17dc:	beq	182c <read_int16_partial_array+0x74>
    17e0:	bcc	1810 <read_int16_partial_array+0x58>
    17e4:	cmp	ip, #104	; 0x68
    17e8:	bne	1834 <read_int16_partial_array+0x7c>
    17ec:	pop	{r4, lr}
    17f0:	b	0 <coda_netcdf_cursor_read_int16_partial_array>
    17f4:	cmp	ip, #1
    17f8:	beq	1848 <read_int16_partial_array+0x90>
    17fc:	bcc	1824 <read_int16_partial_array+0x6c>
    1800:	cmp	ip, #100	; 0x64
    1804:	bne	1834 <read_int16_partial_array+0x7c>
    1808:	pop	{r4, lr}
    180c:	b	0 <coda_mem_cursor_read_int16_partial_array>
    1810:	mov	r1, #0
    1814:	mvn	r0, #12
    1818:	bl	0 <coda_set_error>
    181c:	mvn	r0, #0
    1820:	pop	{r4, pc}
    1824:	pop	{r4, lr}
    1828:	b	0 <coda_ascii_cursor_read_int16_partial_array>
    182c:	pop	{r4, lr}
    1830:	b	0 <coda_cdf_cursor_read_int16_partial_array>
    1834:	ldr	r3, [pc, #40]	; 1864 <read_int16_partial_array+0xac>
    1838:	ldr	r2, [pc, #40]	; 1868 <read_int16_partial_array+0xb0>
    183c:	ldr	r1, [pc, #40]	; 186c <read_int16_partial_array+0xb4>
    1840:	ldr	r0, [pc, #40]	; 1870 <read_int16_partial_array+0xb8>
    1844:	bl	0 <__assert_fail>
    1848:	pop	{r4, lr}
    184c:	b	0 <coda_bin_cursor_read_int16_partial_array>
    1850:	mov	r1, #0
    1854:	mvn	r0, #10
    1858:	bl	0 <coda_set_error>
    185c:	mvn	r0, #0
    1860:	pop	{r4, pc}
    1864:	.word	0x00000154
    1868:	.word	0x000005b7
    186c:	.word	0x00000000
    1870:	.word	0x00000050

00001874 <read_uint16_partial_array>:
    1874:	push	{r4, lr}
    1878:	ldr	lr, [r0, #4]
    187c:	add	ip, r0, lr, lsl #4
    1880:	ldr	ip, [ip, #-8]
    1884:	ldr	ip, [ip]
    1888:	cmp	ip, #100	; 0x64
    188c:	beq	190c <read_uint16_partial_array+0x98>
    1890:	bls	18b0 <read_uint16_partial_array+0x3c>
    1894:	cmp	ip, #102	; 0x66
    1898:	beq	18f8 <read_uint16_partial_array+0x84>
    189c:	bcc	18dc <read_uint16_partial_array+0x68>
    18a0:	cmp	ip, #103	; 0x67
    18a4:	bne	18c8 <read_uint16_partial_array+0x54>
    18a8:	pop	{r4, lr}
    18ac:	b	0 <coda_cdf_cursor_read_uint16_partial_array>
    18b0:	cmp	ip, #0
    18b4:	beq	18f0 <read_uint16_partial_array+0x7c>
    18b8:	cmp	ip, #1
    18bc:	bne	18c8 <read_uint16_partial_array+0x54>
    18c0:	pop	{r4, lr}
    18c4:	b	0 <coda_bin_cursor_read_uint16_partial_array>
    18c8:	ldr	r3, [pc, #68]	; 1914 <read_uint16_partial_array+0xa0>
    18cc:	ldr	r2, [pc, #68]	; 1918 <read_uint16_partial_array+0xa4>
    18d0:	ldr	r1, [pc, #68]	; 191c <read_uint16_partial_array+0xa8>
    18d4:	ldr	r0, [pc, #68]	; 1920 <read_uint16_partial_array+0xac>
    18d8:	bl	0 <__assert_fail>
    18dc:	mov	r1, #0
    18e0:	mvn	r0, #10
    18e4:	bl	0 <coda_set_error>
    18e8:	mvn	r0, #0
    18ec:	pop	{r4, pc}
    18f0:	pop	{r4, lr}
    18f4:	b	0 <coda_ascii_cursor_read_uint16_partial_array>
    18f8:	mov	r1, #0
    18fc:	mvn	r0, #12
    1900:	bl	0 <coda_set_error>
    1904:	mvn	r0, #0
    1908:	pop	{r4, pc}
    190c:	pop	{r4, lr}
    1910:	b	0 <coda_mem_cursor_read_uint16_partial_array>
    1914:	.word	0x00000170
    1918:	.word	0x000005da
    191c:	.word	0x00000000
    1920:	.word	0x00000050

00001924 <read_int32_partial_array>:
    1924:	push	{r4, lr}
    1928:	ldr	lr, [r0, #4]
    192c:	add	ip, r0, lr, lsl #4
    1930:	ldr	ip, [ip, #-8]
    1934:	ldr	ip, [ip]
    1938:	cmp	ip, #101	; 0x65
    193c:	beq	19bc <read_int32_partial_array+0x98>
    1940:	bls	1960 <read_int32_partial_array+0x3c>
    1944:	cmp	ip, #103	; 0x67
    1948:	beq	1998 <read_int32_partial_array+0x74>
    194c:	bcc	197c <read_int32_partial_array+0x58>
    1950:	cmp	ip, #104	; 0x68
    1954:	bne	19a0 <read_int32_partial_array+0x7c>
    1958:	pop	{r4, lr}
    195c:	b	0 <coda_netcdf_cursor_read_int32_partial_array>
    1960:	cmp	ip, #1
    1964:	beq	19b4 <read_int32_partial_array+0x90>
    1968:	bcc	1990 <read_int32_partial_array+0x6c>
    196c:	cmp	ip, #100	; 0x64
    1970:	bne	19a0 <read_int32_partial_array+0x7c>
    1974:	pop	{r4, lr}
    1978:	b	0 <coda_mem_cursor_read_int32_partial_array>
    197c:	mov	r1, #0
    1980:	mvn	r0, #12
    1984:	bl	0 <coda_set_error>
    1988:	mvn	r0, #0
    198c:	pop	{r4, pc}
    1990:	pop	{r4, lr}
    1994:	b	0 <coda_ascii_cursor_read_int32_partial_array>
    1998:	pop	{r4, lr}
    199c:	b	0 <coda_cdf_cursor_read_int32_partial_array>
    19a0:	ldr	r3, [pc, #40]	; 19d0 <read_int32_partial_array+0xac>
    19a4:	ldr	r2, [pc, #40]	; 19d4 <read_int32_partial_array+0xb0>
    19a8:	ldr	r1, [pc, #40]	; 19d8 <read_int32_partial_array+0xb4>
    19ac:	ldr	r0, [pc, #40]	; 19dc <read_int32_partial_array+0xb8>
    19b0:	bl	0 <__assert_fail>
    19b4:	pop	{r4, lr}
    19b8:	b	0 <coda_bin_cursor_read_int32_partial_array>
    19bc:	mov	r1, #0
    19c0:	mvn	r0, #10
    19c4:	bl	0 <coda_set_error>
    19c8:	mvn	r0, #0
    19cc:	pop	{r4, pc}
    19d0:	.word	0x0000018c
    19d4:	.word	0x000005fe
    19d8:	.word	0x00000000
    19dc:	.word	0x00000050

000019e0 <read_uint32_partial_array>:
    19e0:	push	{r4, lr}
    19e4:	ldr	lr, [r0, #4]
    19e8:	add	ip, r0, lr, lsl #4
    19ec:	ldr	ip, [ip, #-8]
    19f0:	ldr	ip, [ip]
    19f4:	cmp	ip, #100	; 0x64
    19f8:	beq	1a78 <read_uint32_partial_array+0x98>
    19fc:	bls	1a1c <read_uint32_partial_array+0x3c>
    1a00:	cmp	ip, #102	; 0x66
    1a04:	beq	1a64 <read_uint32_partial_array+0x84>
    1a08:	bcc	1a48 <read_uint32_partial_array+0x68>
    1a0c:	cmp	ip, #103	; 0x67
    1a10:	bne	1a34 <read_uint32_partial_array+0x54>
    1a14:	pop	{r4, lr}
    1a18:	b	0 <coda_cdf_cursor_read_uint32_partial_array>
    1a1c:	cmp	ip, #0
    1a20:	beq	1a5c <read_uint32_partial_array+0x7c>
    1a24:	cmp	ip, #1
    1a28:	bne	1a34 <read_uint32_partial_array+0x54>
    1a2c:	pop	{r4, lr}
    1a30:	b	0 <coda_bin_cursor_read_uint32_partial_array>
    1a34:	ldr	r3, [pc, #68]	; 1a80 <read_uint32_partial_array+0xa0>
    1a38:	ldr	r2, [pc, #68]	; 1a84 <read_uint32_partial_array+0xa4>
    1a3c:	ldr	r1, [pc, #68]	; 1a88 <read_uint32_partial_array+0xa8>
    1a40:	ldr	r0, [pc, #68]	; 1a8c <read_uint32_partial_array+0xac>
    1a44:	bl	0 <__assert_fail>
    1a48:	mov	r1, #0
    1a4c:	mvn	r0, #10
    1a50:	bl	0 <coda_set_error>
    1a54:	mvn	r0, #0
    1a58:	pop	{r4, pc}
    1a5c:	pop	{r4, lr}
    1a60:	b	0 <coda_ascii_cursor_read_uint32_partial_array>
    1a64:	mov	r1, #0
    1a68:	mvn	r0, #12
    1a6c:	bl	0 <coda_set_error>
    1a70:	mvn	r0, #0
    1a74:	pop	{r4, pc}
    1a78:	pop	{r4, lr}
    1a7c:	b	0 <coda_mem_cursor_read_uint32_partial_array>
    1a80:	.word	0x000001a8
    1a84:	.word	0x00000621
    1a88:	.word	0x00000000
    1a8c:	.word	0x00000050

00001a90 <read_int64_partial_array>:
    1a90:	push	{r4, lr}
    1a94:	ldr	lr, [r0, #4]
    1a98:	add	ip, r0, lr, lsl #4
    1a9c:	ldr	ip, [ip, #-8]
    1aa0:	ldr	ip, [ip]
    1aa4:	cmp	ip, #100	; 0x64
    1aa8:	beq	1b28 <read_int64_partial_array+0x98>
    1aac:	bls	1acc <read_int64_partial_array+0x3c>
    1ab0:	cmp	ip, #102	; 0x66
    1ab4:	beq	1b14 <read_int64_partial_array+0x84>
    1ab8:	bcc	1af8 <read_int64_partial_array+0x68>
    1abc:	cmp	ip, #103	; 0x67
    1ac0:	bne	1ae4 <read_int64_partial_array+0x54>
    1ac4:	pop	{r4, lr}
    1ac8:	b	0 <coda_cdf_cursor_read_int64_partial_array>
    1acc:	cmp	ip, #0
    1ad0:	beq	1b0c <read_int64_partial_array+0x7c>
    1ad4:	cmp	ip, #1
    1ad8:	bne	1ae4 <read_int64_partial_array+0x54>
    1adc:	pop	{r4, lr}
    1ae0:	b	0 <coda_bin_cursor_read_int64_partial_array>
    1ae4:	ldr	r3, [pc, #68]	; 1b30 <read_int64_partial_array+0xa0>
    1ae8:	ldr	r2, [pc, #68]	; 1b34 <read_int64_partial_array+0xa4>
    1aec:	ldr	r1, [pc, #68]	; 1b38 <read_int64_partial_array+0xa8>
    1af0:	ldr	r0, [pc, #68]	; 1b3c <read_int64_partial_array+0xac>
    1af4:	bl	0 <__assert_fail>
    1af8:	mov	r1, #0
    1afc:	mvn	r0, #10
    1b00:	bl	0 <coda_set_error>
    1b04:	mvn	r0, #0
    1b08:	pop	{r4, pc}
    1b0c:	pop	{r4, lr}
    1b10:	b	0 <coda_ascii_cursor_read_int64_partial_array>
    1b14:	mov	r1, #0
    1b18:	mvn	r0, #12
    1b1c:	bl	0 <coda_set_error>
    1b20:	mvn	r0, #0
    1b24:	pop	{r4, pc}
    1b28:	pop	{r4, lr}
    1b2c:	b	0 <coda_mem_cursor_read_int64_partial_array>
    1b30:	.word	0x000001c4
    1b34:	.word	0x00000644
    1b38:	.word	0x00000000
    1b3c:	.word	0x00000050

00001b40 <read_uint64_partial_array>:
    1b40:	push	{r4, lr}
    1b44:	ldr	lr, [r0, #4]
    1b48:	add	ip, r0, lr, lsl #4
    1b4c:	ldr	ip, [ip, #-8]
    1b50:	ldr	ip, [ip]
    1b54:	cmp	ip, #100	; 0x64
    1b58:	beq	1bcc <read_uint64_partial_array+0x8c>
    1b5c:	bhi	1b78 <read_uint64_partial_array+0x38>
    1b60:	cmp	ip, #0
    1b64:	beq	1bc4 <read_uint64_partial_array+0x84>
    1b68:	cmp	ip, #1
    1b6c:	bne	1b9c <read_uint64_partial_array+0x5c>
    1b70:	pop	{r4, lr}
    1b74:	b	0 <coda_bin_cursor_read_uint64_partial_array>
    1b78:	cmp	ip, #101	; 0x65
    1b7c:	beq	1bb0 <read_uint64_partial_array+0x70>
    1b80:	cmp	ip, #102	; 0x66
    1b84:	bne	1b9c <read_uint64_partial_array+0x5c>
    1b88:	mov	r1, #0
    1b8c:	mvn	r0, #12
    1b90:	bl	0 <coda_set_error>
    1b94:	mvn	r0, #0
    1b98:	pop	{r4, pc}
    1b9c:	ldr	r3, [pc, #48]	; 1bd4 <read_uint64_partial_array+0x94>
    1ba0:	ldr	r2, [pc, #48]	; 1bd8 <read_uint64_partial_array+0x98>
    1ba4:	ldr	r1, [pc, #48]	; 1bdc <read_uint64_partial_array+0x9c>
    1ba8:	ldr	r0, [pc, #48]	; 1be0 <read_uint64_partial_array+0xa0>
    1bac:	bl	0 <__assert_fail>
    1bb0:	mov	r1, #0
    1bb4:	mvn	r0, #10
    1bb8:	bl	0 <coda_set_error>
    1bbc:	mvn	r0, #0
    1bc0:	pop	{r4, pc}
    1bc4:	pop	{r4, lr}
    1bc8:	b	0 <coda_ascii_cursor_read_uint64_partial_array>
    1bcc:	pop	{r4, lr}
    1bd0:	b	0 <coda_mem_cursor_read_uint64_partial_array>
    1bd4:	.word	0x000001e0
    1bd8:	.word	0x00000666
    1bdc:	.word	0x00000000
    1be0:	.word	0x00000050

00001be4 <read_float_partial_array>:
    1be4:	push	{r4, lr}
    1be8:	ldr	lr, [r0, #4]
    1bec:	add	ip, r0, lr, lsl #4
    1bf0:	ldr	ip, [ip, #-8]
    1bf4:	ldr	ip, [ip]
    1bf8:	cmp	ip, #101	; 0x65
    1bfc:	beq	1c8c <read_float_partial_array+0xa8>
    1c00:	bls	1c28 <read_float_partial_array+0x44>
    1c04:	cmp	ip, #103	; 0x67
    1c08:	beq	1c84 <read_float_partial_array+0xa0>
    1c0c:	bcc	1c54 <read_float_partial_array+0x70>
    1c10:	cmp	ip, #104	; 0x68
    1c14:	beq	1c4c <read_float_partial_array+0x68>
    1c18:	cmp	ip, #105	; 0x69
    1c1c:	bne	1c70 <read_float_partial_array+0x8c>
    1c20:	pop	{r4, lr}
    1c24:	b	0 <coda_grib_cursor_read_float_partial_array>
    1c28:	cmp	ip, #1
    1c2c:	beq	1c68 <read_float_partial_array+0x84>
    1c30:	bcc	1c44 <read_float_partial_array+0x60>
    1c34:	cmp	ip, #100	; 0x64
    1c38:	bne	1c70 <read_float_partial_array+0x8c>
    1c3c:	pop	{r4, lr}
    1c40:	b	0 <coda_mem_cursor_read_float_partial_array>
    1c44:	pop	{r4, lr}
    1c48:	b	0 <coda_ascii_cursor_read_float_partial_array>
    1c4c:	pop	{r4, lr}
    1c50:	b	0 <coda_netcdf_cursor_read_float_partial_array>
    1c54:	mov	r1, #0
    1c58:	mvn	r0, #12
    1c5c:	bl	0 <coda_set_error>
    1c60:	mvn	r0, #0
    1c64:	pop	{r4, pc}
    1c68:	pop	{r4, lr}
    1c6c:	b	0 <coda_bin_cursor_read_float_partial_array>
    1c70:	ldr	r3, [pc, #40]	; 1ca0 <read_float_partial_array+0xbc>
    1c74:	ldr	r2, [pc, #40]	; 1ca4 <read_float_partial_array+0xc0>
    1c78:	ldr	r1, [pc, #40]	; 1ca8 <read_float_partial_array+0xc4>
    1c7c:	ldr	r0, [pc, #40]	; 1cac <read_float_partial_array+0xc8>
    1c80:	bl	0 <__assert_fail>
    1c84:	pop	{r4, lr}
    1c88:	b	0 <coda_cdf_cursor_read_float_partial_array>
    1c8c:	mov	r1, #0
    1c90:	mvn	r0, #10
    1c94:	bl	0 <coda_set_error>
    1c98:	mvn	r0, #0
    1c9c:	pop	{r4, pc}
    1ca0:	.word	0x000001fc
    1ca4:	.word	0x0000068a
    1ca8:	.word	0x00000000
    1cac:	.word	0x00000050

00001cb0 <read_uint64>:
    1cb0:	ldr	r2, [r0, #4]
    1cb4:	add	r3, r0, r2, lsl #4
    1cb8:	ldr	r3, [r3, #-8]
    1cbc:	ldr	r3, [r3]
    1cc0:	cmp	r3, #100	; 0x64
    1cc4:	beq	1d3c <read_uint64+0x8c>
    1cc8:	push	{r4, lr}
    1ccc:	bhi	1ce8 <read_uint64+0x38>
    1cd0:	cmp	r3, #0
    1cd4:	beq	1d34 <read_uint64+0x84>
    1cd8:	cmp	r3, #1
    1cdc:	bne	1d0c <read_uint64+0x5c>
    1ce0:	pop	{r4, lr}
    1ce4:	b	0 <coda_bin_cursor_read_uint64>
    1ce8:	cmp	r3, #101	; 0x65
    1cec:	beq	1d20 <read_uint64+0x70>
    1cf0:	cmp	r3, #102	; 0x66
    1cf4:	bne	1d0c <read_uint64+0x5c>
    1cf8:	mov	r1, #0
    1cfc:	mvn	r0, #12
    1d00:	bl	0 <coda_set_error>
    1d04:	mvn	r0, #0
    1d08:	pop	{r4, pc}
    1d0c:	ldr	r3, [pc, #44]	; 1d40 <read_uint64+0x90>
    1d10:	ldr	r2, [pc, #44]	; 1d44 <read_uint64+0x94>
    1d14:	ldr	r1, [pc, #44]	; 1d48 <read_uint64+0x98>
    1d18:	ldr	r0, [pc, #44]	; 1d4c <read_uint64+0x9c>
    1d1c:	bl	0 <__assert_fail>
    1d20:	mov	r1, #0
    1d24:	mvn	r0, #10
    1d28:	bl	0 <coda_set_error>
    1d2c:	mvn	r0, #0
    1d30:	pop	{r4, pc}
    1d34:	pop	{r4, lr}
    1d38:	b	0 <coda_ascii_cursor_read_uint64>
    1d3c:	b	0 <coda_mem_cursor_read_uint64>
    1d40:	.word	0x00000218
    1d44:	.word	0x0000025e
    1d48:	.word	0x00000000
    1d4c:	.word	0x00000050

00001d50 <coda_cursor_read_int8>:
    1d50:	subs	r2, r0, #0
    1d54:	push	{r4, lr}
    1d58:	beq	1e00 <coda_cursor_read_int8+0xb0>
    1d5c:	ldr	r3, [r2, #4]
    1d60:	cmp	r3, #0
    1d64:	ble	1e00 <coda_cursor_read_int8+0xb0>
    1d68:	add	r3, r2, r3, lsl #4
    1d6c:	ldr	r3, [r3, #-8]
    1d70:	cmp	r3, #0
    1d74:	beq	1e00 <coda_cursor_read_int8+0xb0>
    1d78:	cmp	r1, #0
    1d7c:	beq	1e1c <coda_cursor_read_int8+0xcc>
    1d80:	ldr	r0, [r3]
    1d84:	cmp	r0, #99	; 0x63
    1d88:	ldrhi	r3, [r3, #4]
    1d8c:	ldr	r0, [r3, #8]
    1d90:	sub	r0, r0, #2
    1d94:	cmp	r0, #1
    1d98:	bls	1dbc <coda_cursor_read_int8+0x6c>
    1d9c:	ldr	r0, [r3, #12]
    1da0:	cmp	r0, #0
    1da4:	bne	1de4 <coda_cursor_read_int8+0x94>
    1da8:	mov	r0, r2
    1dac:	bl	0 <read_int8>
    1db0:	adds	r0, r0, #0
    1db4:	mvnne	r0, #0
    1db8:	pop	{r4, pc}
    1dbc:	ldr	r4, [pc, #116]	; 1e38 <coda_cursor_read_int8+0xe8>
    1dc0:	bl	0 <__aeabi_read_tp>
    1dc4:	ldr	r4, [pc, r4]
    1dc8:	ldr	r0, [r0, r4]
    1dcc:	cmp	r0, #0
    1dd0:	beq	1d9c <coda_cursor_read_int8+0x4c>
    1dd4:	ldr	r0, [r3, #48]	; 0x30
    1dd8:	cmp	r0, #0
    1ddc:	movne	r0, #9
    1de0:	beq	1d9c <coda_cursor_read_int8+0x4c>
    1de4:	bl	0 <coda_type_get_native_type_name>
    1de8:	ldr	r1, [pc, #76]	; 1e3c <coda_cursor_read_int8+0xec>
    1dec:	mov	r2, r0
    1df0:	mvn	r0, #104	; 0x68
    1df4:	bl	0 <coda_set_error>
    1df8:	mvn	r0, #0
    1dfc:	pop	{r4, pc}
    1e00:	ldr	r3, [pc, #56]	; 1e40 <coda_cursor_read_int8+0xf0>
    1e04:	ldr	r2, [pc, #56]	; 1e44 <coda_cursor_read_int8+0xf4>
    1e08:	ldr	r1, [pc, #56]	; 1e48 <coda_cursor_read_int8+0xf8>
    1e0c:	mvn	r0, #99	; 0x63
    1e10:	bl	0 <coda_set_error>
    1e14:	mvn	r0, #0
    1e18:	pop	{r4, pc}
    1e1c:	ldr	r3, [pc, #40]	; 1e4c <coda_cursor_read_int8+0xfc>
    1e20:	ldr	r2, [pc, #28]	; 1e44 <coda_cursor_read_int8+0xf4>
    1e24:	ldr	r1, [pc, #36]	; 1e50 <coda_cursor_read_int8+0x100>
    1e28:	mvn	r0, #99	; 0x63
    1e2c:	bl	0 <coda_set_error>
    1e30:	mvn	r0, #0
    1e34:	pop	{r4, pc}
    1e38:	.word	0x0000006c
    1e3c:	.word	0x00000120
    1e40:	.word	0x000006ed
    1e44:	.word	0x00000000
    1e48:	.word	0x000000e0
    1e4c:	.word	0x000006f2
    1e50:	.word	0x00000100

00001e54 <coda_cursor_read_uint8>:
    1e54:	subs	r2, r0, #0
    1e58:	push	{r4, lr}
    1e5c:	beq	1f04 <coda_cursor_read_uint8+0xb0>
    1e60:	ldr	r3, [r2, #4]
    1e64:	cmp	r3, #0
    1e68:	ble	1f04 <coda_cursor_read_uint8+0xb0>
    1e6c:	add	r3, r2, r3, lsl #4
    1e70:	ldr	r3, [r3, #-8]
    1e74:	cmp	r3, #0
    1e78:	beq	1f04 <coda_cursor_read_uint8+0xb0>
    1e7c:	cmp	r1, #0
    1e80:	beq	1f20 <coda_cursor_read_uint8+0xcc>
    1e84:	ldr	r0, [r3]
    1e88:	cmp	r0, #99	; 0x63
    1e8c:	ldrhi	r3, [r3, #4]
    1e90:	ldr	r0, [r3, #8]
    1e94:	sub	r0, r0, #2
    1e98:	cmp	r0, #1
    1e9c:	bls	1ec0 <coda_cursor_read_uint8+0x6c>
    1ea0:	ldr	r0, [r3, #12]
    1ea4:	cmp	r0, #1
    1ea8:	bne	1ee8 <coda_cursor_read_uint8+0x94>
    1eac:	mov	r0, r2
    1eb0:	bl	bc <read_uint8>
    1eb4:	adds	r0, r0, #0
    1eb8:	mvnne	r0, #0
    1ebc:	pop	{r4, pc}
    1ec0:	ldr	r4, [pc, #116]	; 1f3c <coda_cursor_read_uint8+0xe8>
    1ec4:	bl	0 <__aeabi_read_tp>
    1ec8:	ldr	r4, [pc, r4]
    1ecc:	ldr	r0, [r0, r4]
    1ed0:	cmp	r0, #0
    1ed4:	beq	1ea0 <coda_cursor_read_uint8+0x4c>
    1ed8:	ldr	r0, [r3, #48]	; 0x30
    1edc:	cmp	r0, #0
    1ee0:	movne	r0, #9
    1ee4:	beq	1ea0 <coda_cursor_read_uint8+0x4c>
    1ee8:	bl	0 <coda_type_get_native_type_name>
    1eec:	ldr	r1, [pc, #76]	; 1f40 <coda_cursor_read_uint8+0xec>
    1ef0:	mov	r2, r0
    1ef4:	mvn	r0, #104	; 0x68
    1ef8:	bl	0 <coda_set_error>
    1efc:	mvn	r0, #0
    1f00:	pop	{r4, pc}
    1f04:	ldr	r3, [pc, #56]	; 1f44 <coda_cursor_read_uint8+0xf0>
    1f08:	ldr	r2, [pc, #56]	; 1f48 <coda_cursor_read_uint8+0xf4>
    1f0c:	ldr	r1, [pc, #56]	; 1f4c <coda_cursor_read_uint8+0xf8>
    1f10:	mvn	r0, #99	; 0x63
    1f14:	bl	0 <coda_set_error>
    1f18:	mvn	r0, #0
    1f1c:	pop	{r4, pc}
    1f20:	ldr	r3, [pc, #40]	; 1f50 <coda_cursor_read_uint8+0xfc>
    1f24:	ldr	r2, [pc, #28]	; 1f48 <coda_cursor_read_uint8+0xf4>
    1f28:	ldr	r1, [pc, #36]	; 1f54 <coda_cursor_read_uint8+0x100>
    1f2c:	mvn	r0, #99	; 0x63
    1f30:	bl	0 <coda_set_error>
    1f34:	mvn	r0, #0
    1f38:	pop	{r4, pc}
    1f3c:	.word	0x0000006c
    1f40:	.word	0x0000014c
    1f44:	.word	0x0000071c
    1f48:	.word	0x00000000
    1f4c:	.word	0x000000e0
    1f50:	.word	0x00000721
    1f54:	.word	0x00000100

00001f58 <coda_cursor_read_int16>:
    1f58:	push	{r4, r5, lr}
    1f5c:	subs	r4, r0, #0
    1f60:	sub	sp, sp, #12
    1f64:	beq	2078 <coda_cursor_read_int16+0x120>
    1f68:	ldr	r3, [r4, #4]
    1f6c:	cmp	r3, #0
    1f70:	ble	2078 <coda_cursor_read_int16+0x120>
    1f74:	add	r3, r4, r3, lsl #4
    1f78:	ldr	r3, [r3, #-8]
    1f7c:	cmp	r3, #0
    1f80:	beq	2078 <coda_cursor_read_int16+0x120>
    1f84:	cmp	r1, #0
    1f88:	mov	r5, r1
    1f8c:	beq	2094 <coda_cursor_read_int16+0x13c>
    1f90:	ldr	r2, [r3]
    1f94:	cmp	r2, #99	; 0x63
    1f98:	ldrhi	r3, [r3, #4]
    1f9c:	ldr	r2, [r3, #8]
    1fa0:	sub	r2, r2, #2
    1fa4:	cmp	r2, #1
    1fa8:	bls	2004 <coda_cursor_read_int16+0xac>
    1fac:	ldr	r0, [r3, #12]
    1fb0:	cmp	r0, #1
    1fb4:	beq	2054 <coda_cursor_read_int16+0xfc>
    1fb8:	cmp	r0, #2
    1fbc:	beq	1fe8 <coda_cursor_read_int16+0x90>
    1fc0:	cmp	r0, #0
    1fc4:	beq	2030 <coda_cursor_read_int16+0xd8>
    1fc8:	bl	0 <coda_type_get_native_type_name>
    1fcc:	ldr	r1, [pc, #220]	; 20b0 <coda_cursor_read_int16+0x158>
    1fd0:	mov	r2, r0
    1fd4:	mvn	r0, #104	; 0x68
    1fd8:	bl	0 <coda_set_error>
    1fdc:	mvn	r0, #0
    1fe0:	add	sp, sp, #12
    1fe4:	pop	{r4, r5, pc}
    1fe8:	mov	r1, r5
    1fec:	mov	r0, r4
    1ff0:	bl	168 <read_int16>
    1ff4:	adds	r0, r0, #0
    1ff8:	mvnne	r0, #0
    1ffc:	add	sp, sp, #12
    2000:	pop	{r4, r5, pc}
    2004:	ldr	r2, [pc, #168]	; 20b4 <coda_cursor_read_int16+0x15c>
    2008:	bl	0 <__aeabi_read_tp>
    200c:	ldr	r2, [pc, r2]
    2010:	ldr	r2, [r0, r2]
    2014:	cmp	r2, #0
    2018:	beq	1fac <coda_cursor_read_int16+0x54>
    201c:	ldr	r2, [r3, #48]	; 0x30
    2020:	cmp	r2, #0
    2024:	movne	r0, #9
    2028:	bne	1fc8 <coda_cursor_read_int16+0x70>
    202c:	b	1fac <coda_cursor_read_int16+0x54>
    2030:	mov	r0, r4
    2034:	add	r1, sp, #7
    2038:	bl	0 <read_int8>
    203c:	cmp	r0, #0
    2040:	bne	1fdc <coda_cursor_read_int16+0x84>
    2044:	ldrsb	r3, [sp, #7]
    2048:	strh	r3, [r5]
    204c:	add	sp, sp, #12
    2050:	pop	{r4, r5, pc}
    2054:	mov	r0, r4
    2058:	add	r1, sp, #7
    205c:	bl	bc <read_uint8>
    2060:	cmp	r0, #0
    2064:	bne	1fdc <coda_cursor_read_int16+0x84>
    2068:	ldrb	r3, [sp, #7]
    206c:	strh	r3, [r5]
    2070:	add	sp, sp, #12
    2074:	pop	{r4, r5, pc}
    2078:	mvn	r0, #99	; 0x63
    207c:	ldr	r3, [pc, #52]	; 20b8 <coda_cursor_read_int16+0x160>
    2080:	ldr	r2, [pc, #52]	; 20bc <coda_cursor_read_int16+0x164>
    2084:	ldr	r1, [pc, #52]	; 20c0 <coda_cursor_read_int16+0x168>
    2088:	bl	0 <coda_set_error>
    208c:	mvn	r0, #0
    2090:	b	1fe0 <coda_cursor_read_int16+0x88>
    2094:	mvn	r0, #99	; 0x63
    2098:	ldr	r3, [pc, #36]	; 20c4 <coda_cursor_read_int16+0x16c>
    209c:	ldr	r2, [pc, #24]	; 20bc <coda_cursor_read_int16+0x164>
    20a0:	ldr	r1, [pc, #32]	; 20c8 <coda_cursor_read_int16+0x170>
    20a4:	bl	0 <coda_set_error>
    20a8:	mvn	r0, #0
    20ac:	b	1fe0 <coda_cursor_read_int16+0x88>
    20b0:	.word	0x0000017c
    20b4:	.word	0x000000a0
    20b8:	.word	0x0000074d
    20bc:	.word	0x00000000
    20c0:	.word	0x000000e0
    20c4:	.word	0x00000752
    20c8:	.word	0x00000100

000020cc <coda_cursor_read_uint16>:
    20cc:	push	{r4, r5, lr}
    20d0:	subs	r4, r0, #0
    20d4:	sub	sp, sp, #12
    20d8:	beq	21bc <coda_cursor_read_uint16+0xf0>
    20dc:	ldr	r3, [r4, #4]
    20e0:	cmp	r3, #0
    20e4:	ble	21bc <coda_cursor_read_uint16+0xf0>
    20e8:	add	r3, r4, r3, lsl #4
    20ec:	ldr	r3, [r3, #-8]
    20f0:	cmp	r3, #0
    20f4:	beq	21bc <coda_cursor_read_uint16+0xf0>
    20f8:	cmp	r1, #0
    20fc:	mov	r5, r1
    2100:	beq	21d8 <coda_cursor_read_uint16+0x10c>
    2104:	ldr	r2, [r3]
    2108:	cmp	r2, #99	; 0x63
    210c:	ldrhi	r3, [r3, #4]
    2110:	ldr	r2, [r3, #8]
    2114:	sub	r2, r2, #2
    2118:	cmp	r2, #1
    211c:	bls	2150 <coda_cursor_read_uint16+0x84>
    2120:	ldr	r0, [r3, #12]
    2124:	cmp	r0, #1
    2128:	beq	2198 <coda_cursor_read_uint16+0xcc>
    212c:	cmp	r0, #3
    2130:	bne	2178 <coda_cursor_read_uint16+0xac>
    2134:	mov	r1, r5
    2138:	mov	r0, r4
    213c:	bl	234 <read_uint16>
    2140:	adds	r0, r0, #0
    2144:	mvnne	r0, #0
    2148:	add	sp, sp, #12
    214c:	pop	{r4, r5, pc}
    2150:	ldr	r2, [pc, #156]	; 21f4 <coda_cursor_read_uint16+0x128>
    2154:	bl	0 <__aeabi_read_tp>
    2158:	ldr	r2, [pc, r2]
    215c:	ldr	r2, [r0, r2]
    2160:	cmp	r2, #0
    2164:	beq	2120 <coda_cursor_read_uint16+0x54>
    2168:	ldr	r2, [r3, #48]	; 0x30
    216c:	cmp	r2, #0
    2170:	movne	r0, #9
    2174:	beq	2120 <coda_cursor_read_uint16+0x54>
    2178:	bl	0 <coda_type_get_native_type_name>
    217c:	ldr	r1, [pc, #116]	; 21f8 <coda_cursor_read_uint16+0x12c>
    2180:	mov	r2, r0
    2184:	mvn	r0, #104	; 0x68
    2188:	bl	0 <coda_set_error>
    218c:	mvn	r0, #0
    2190:	add	sp, sp, #12
    2194:	pop	{r4, r5, pc}
    2198:	mov	r0, r4
    219c:	add	r1, sp, #7
    21a0:	bl	bc <read_uint8>
    21a4:	cmp	r0, #0
    21a8:	bne	218c <coda_cursor_read_uint16+0xc0>
    21ac:	ldrb	r3, [sp, #7]
    21b0:	strh	r3, [r5]
    21b4:	add	sp, sp, #12
    21b8:	pop	{r4, r5, pc}
    21bc:	mvn	r0, #99	; 0x63
    21c0:	ldr	r3, [pc, #52]	; 21fc <coda_cursor_read_uint16+0x130>
    21c4:	ldr	r2, [pc, #52]	; 2200 <coda_cursor_read_uint16+0x134>
    21c8:	ldr	r1, [pc, #52]	; 2204 <coda_cursor_read_uint16+0x138>
    21cc:	bl	0 <coda_set_error>
    21d0:	mvn	r0, #0
    21d4:	b	2148 <coda_cursor_read_uint16+0x7c>
    21d8:	mvn	r0, #99	; 0x63
    21dc:	ldr	r3, [pc, #36]	; 2208 <coda_cursor_read_uint16+0x13c>
    21e0:	ldr	r2, [pc, #24]	; 2200 <coda_cursor_read_uint16+0x134>
    21e4:	ldr	r1, [pc, #32]	; 220c <coda_cursor_read_uint16+0x140>
    21e8:	bl	0 <coda_set_error>
    21ec:	mvn	r0, #0
    21f0:	b	2148 <coda_cursor_read_uint16+0x7c>
    21f4:	.word	0x00000094
    21f8:	.word	0x000001ac
    21fc:	.word	0x00000793
    2200:	.word	0x00000000
    2204:	.word	0x000000e0
    2208:	.word	0x00000798
    220c:	.word	0x00000100

00002210 <coda_cursor_read_int32>:
    2210:	push	{r4, r5, lr}
    2214:	subs	r4, r0, #0
    2218:	sub	sp, sp, #12
    221c:	beq	237c <coda_cursor_read_int32+0x16c>
    2220:	ldr	r3, [r4, #4]
    2224:	cmp	r3, #0
    2228:	ble	237c <coda_cursor_read_int32+0x16c>
    222c:	add	r3, r4, r3, lsl #4
    2230:	ldr	r3, [r3, #-8]
    2234:	cmp	r3, #0
    2238:	beq	237c <coda_cursor_read_int32+0x16c>
    223c:	cmp	r1, #0
    2240:	mov	r5, r1
    2244:	beq	2398 <coda_cursor_read_int32+0x188>
    2248:	ldr	r2, [r3]
    224c:	cmp	r2, #99	; 0x63
    2250:	ldrhi	r3, [r3, #4]
    2254:	ldr	r2, [r3, #8]
    2258:	sub	r2, r2, #2
    225c:	cmp	r2, #1
    2260:	bls	2288 <coda_cursor_read_int32+0x78>
    2264:	ldr	r0, [r3, #12]
    2268:	cmp	r0, #4
    226c:	ldrls	pc, [pc, r0, lsl #2]
    2270:	b	22b0 <coda_cursor_read_int32+0xa0>
    2274:	.word	0x000022ec
    2278:	.word	0x00002310
    227c:	.word	0x00002334
    2280:	.word	0x00002358
    2284:	.word	0x000022d0
    2288:	ldr	r2, [pc, #292]	; 23b4 <coda_cursor_read_int32+0x1a4>
    228c:	bl	0 <__aeabi_read_tp>
    2290:	ldr	r2, [pc, r2]
    2294:	ldr	r2, [r0, r2]
    2298:	cmp	r2, #0
    229c:	beq	2264 <coda_cursor_read_int32+0x54>
    22a0:	ldr	r2, [r3, #48]	; 0x30
    22a4:	cmp	r2, #0
    22a8:	movne	r0, #9
    22ac:	beq	2264 <coda_cursor_read_int32+0x54>
    22b0:	bl	0 <coda_type_get_native_type_name>
    22b4:	ldr	r1, [pc, #252]	; 23b8 <coda_cursor_read_int32+0x1a8>
    22b8:	mov	r2, r0
    22bc:	mvn	r0, #104	; 0x68
    22c0:	bl	0 <coda_set_error>
    22c4:	mvn	r0, #0
    22c8:	add	sp, sp, #12
    22cc:	pop	{r4, r5, pc}
    22d0:	mov	r1, r5
    22d4:	mov	r0, r4
    22d8:	bl	2e0 <read_int32>
    22dc:	adds	r0, r0, #0
    22e0:	mvnne	r0, #0
    22e4:	add	sp, sp, #12
    22e8:	pop	{r4, r5, pc}
    22ec:	mov	r0, r4
    22f0:	add	r1, sp, #6
    22f4:	bl	0 <read_int8>
    22f8:	cmp	r0, #0
    22fc:	bne	22c4 <coda_cursor_read_int32+0xb4>
    2300:	ldrsb	r3, [sp, #6]
    2304:	str	r3, [r5]
    2308:	add	sp, sp, #12
    230c:	pop	{r4, r5, pc}
    2310:	mov	r0, r4
    2314:	add	r1, sp, #6
    2318:	bl	bc <read_uint8>
    231c:	cmp	r0, #0
    2320:	bne	22c4 <coda_cursor_read_int32+0xb4>
    2324:	ldrb	r3, [sp, #6]
    2328:	str	r3, [r5]
    232c:	add	sp, sp, #12
    2330:	pop	{r4, r5, pc}
    2334:	mov	r0, r4
    2338:	add	r1, sp, #6
    233c:	bl	168 <read_int16>
    2340:	cmp	r0, #0
    2344:	bne	22c4 <coda_cursor_read_int32+0xb4>
    2348:	ldrsh	r3, [sp, #6]
    234c:	str	r3, [r5]
    2350:	add	sp, sp, #12
    2354:	pop	{r4, r5, pc}
    2358:	mov	r0, r4
    235c:	add	r1, sp, #6
    2360:	bl	234 <read_uint16>
    2364:	cmp	r0, #0
    2368:	bne	22c4 <coda_cursor_read_int32+0xb4>
    236c:	ldrh	r3, [sp, #6]
    2370:	str	r3, [r5]
    2374:	add	sp, sp, #12
    2378:	pop	{r4, r5, pc}
    237c:	mvn	r0, #99	; 0x63
    2380:	ldr	r3, [pc, #52]	; 23bc <coda_cursor_read_int32+0x1ac>
    2384:	ldr	r2, [pc, #52]	; 23c0 <coda_cursor_read_int32+0x1b0>
    2388:	ldr	r1, [pc, #52]	; 23c4 <coda_cursor_read_int32+0x1b4>
    238c:	bl	0 <coda_set_error>
    2390:	mvn	r0, #0
    2394:	b	22e4 <coda_cursor_read_int32+0xd4>
    2398:	mvn	r0, #99	; 0x63
    239c:	ldr	r3, [pc, #36]	; 23c8 <coda_cursor_read_int32+0x1b8>
    23a0:	ldr	r2, [pc, #24]	; 23c0 <coda_cursor_read_int32+0x1b0>
    23a4:	ldr	r1, [pc, #32]	; 23cc <coda_cursor_read_int32+0x1bc>
    23a8:	bl	0 <coda_set_error>
    23ac:	mvn	r0, #0
    23b0:	b	22e4 <coda_cursor_read_int32+0xd4>
    23b4:	.word	0x0000011c
    23b8:	.word	0x000001dc
    23bc:	.word	0x000007d1
    23c0:	.word	0x00000000
    23c4:	.word	0x000000e0
    23c8:	.word	0x000007d6
    23cc:	.word	0x00000100

000023d0 <coda_cursor_read_uint32>:
    23d0:	push	{r4, r5, lr}
    23d4:	subs	r4, r0, #0
    23d8:	sub	sp, sp, #12
    23dc:	beq	24f0 <coda_cursor_read_uint32+0x120>
    23e0:	ldr	r3, [r4, #4]
    23e4:	cmp	r3, #0
    23e8:	ble	24f0 <coda_cursor_read_uint32+0x120>
    23ec:	add	r3, r4, r3, lsl #4
    23f0:	ldr	r3, [r3, #-8]
    23f4:	cmp	r3, #0
    23f8:	beq	24f0 <coda_cursor_read_uint32+0x120>
    23fc:	cmp	r1, #0
    2400:	mov	r5, r1
    2404:	beq	250c <coda_cursor_read_uint32+0x13c>
    2408:	ldr	r2, [r3]
    240c:	cmp	r2, #99	; 0x63
    2410:	ldrhi	r3, [r3, #4]
    2414:	ldr	r2, [r3, #8]
    2418:	sub	r2, r2, #2
    241c:	cmp	r2, #1
    2420:	bls	247c <coda_cursor_read_uint32+0xac>
    2424:	ldr	r0, [r3, #12]
    2428:	cmp	r0, #3
    242c:	beq	24cc <coda_cursor_read_uint32+0xfc>
    2430:	cmp	r0, #5
    2434:	beq	2460 <coda_cursor_read_uint32+0x90>
    2438:	cmp	r0, #1
    243c:	beq	24a8 <coda_cursor_read_uint32+0xd8>
    2440:	bl	0 <coda_type_get_native_type_name>
    2444:	ldr	r1, [pc, #220]	; 2528 <coda_cursor_read_uint32+0x158>
    2448:	mov	r2, r0
    244c:	mvn	r0, #104	; 0x68
    2450:	bl	0 <coda_set_error>
    2454:	mvn	r0, #0
    2458:	add	sp, sp, #12
    245c:	pop	{r4, r5, pc}
    2460:	mov	r1, r5
    2464:	mov	r0, r4
    2468:	bl	3ac <read_uint32>
    246c:	adds	r0, r0, #0
    2470:	mvnne	r0, #0
    2474:	add	sp, sp, #12
    2478:	pop	{r4, r5, pc}
    247c:	ldr	r2, [pc, #168]	; 252c <coda_cursor_read_uint32+0x15c>
    2480:	bl	0 <__aeabi_read_tp>
    2484:	ldr	r2, [pc, r2]
    2488:	ldr	r2, [r0, r2]
    248c:	cmp	r2, #0
    2490:	beq	2424 <coda_cursor_read_uint32+0x54>
    2494:	ldr	r2, [r3, #48]	; 0x30
    2498:	cmp	r2, #0
    249c:	movne	r0, #9
    24a0:	bne	2440 <coda_cursor_read_uint32+0x70>
    24a4:	b	2424 <coda_cursor_read_uint32+0x54>
    24a8:	mov	r0, r4
    24ac:	add	r1, sp, #6
    24b0:	bl	bc <read_uint8>
    24b4:	cmp	r0, #0
    24b8:	bne	2454 <coda_cursor_read_uint32+0x84>
    24bc:	ldrb	r3, [sp, #6]
    24c0:	str	r3, [r5]
    24c4:	add	sp, sp, #12
    24c8:	pop	{r4, r5, pc}
    24cc:	mov	r0, r4
    24d0:	add	r1, sp, #6
    24d4:	bl	234 <read_uint16>
    24d8:	cmp	r0, #0
    24dc:	bne	2454 <coda_cursor_read_uint32+0x84>
    24e0:	ldrh	r3, [sp, #6]
    24e4:	str	r3, [r5]
    24e8:	add	sp, sp, #12
    24ec:	pop	{r4, r5, pc}
    24f0:	mvn	r0, #99	; 0x63
    24f4:	ldr	r3, [pc, #52]	; 2530 <coda_cursor_read_uint32+0x160>
    24f8:	ldr	r2, [pc, #52]	; 2534 <coda_cursor_read_uint32+0x164>
    24fc:	ldr	r1, [pc, #52]	; 2538 <coda_cursor_read_uint32+0x168>
    2500:	bl	0 <coda_set_error>
    2504:	mvn	r0, #0
    2508:	b	2458 <coda_cursor_read_uint32+0x88>
    250c:	mvn	r0, #99	; 0x63
    2510:	ldr	r3, [pc, #36]	; 253c <coda_cursor_read_uint32+0x16c>
    2514:	ldr	r2, [pc, #24]	; 2534 <coda_cursor_read_uint32+0x164>
    2518:	ldr	r1, [pc, #32]	; 2540 <coda_cursor_read_uint32+0x170>
    251c:	bl	0 <coda_set_error>
    2520:	mvn	r0, #0
    2524:	b	2458 <coda_cursor_read_uint32+0x88>
    2528:	.word	0x0000020c
    252c:	.word	0x000000a0
    2530:	.word	0x0000082e
    2534:	.word	0x00000000
    2538:	.word	0x000000e0
    253c:	.word	0x00000833
    2540:	.word	0x00000100

00002544 <coda_cursor_read_int64>:
    2544:	push	{r4, r5, lr}
    2548:	subs	r4, r0, #0
    254c:	sub	sp, sp, #12
    2550:	beq	2718 <coda_cursor_read_int64+0x1d4>
    2554:	ldr	r3, [r4, #4]
    2558:	cmp	r3, #0
    255c:	ble	2718 <coda_cursor_read_int64+0x1d4>
    2560:	add	r3, r4, r3, lsl #4
    2564:	ldr	r3, [r3, #-8]
    2568:	cmp	r3, #0
    256c:	beq	2718 <coda_cursor_read_int64+0x1d4>
    2570:	cmp	r1, #0
    2574:	mov	r5, r1
    2578:	beq	2734 <coda_cursor_read_int64+0x1f0>
    257c:	ldr	r2, [r3]
    2580:	cmp	r2, #99	; 0x63
    2584:	ldrhi	r3, [r3, #4]
    2588:	ldr	r2, [r3, #8]
    258c:	sub	r2, r2, #2
    2590:	cmp	r2, #1
    2594:	bls	25c4 <coda_cursor_read_int64+0x80>
    2598:	ldr	r0, [r3, #12]
    259c:	cmp	r0, #6
    25a0:	ldrls	pc, [pc, r0, lsl #2]
    25a4:	b	25ec <coda_cursor_read_int64+0xa8>
    25a8:	.word	0x0000260c
    25ac:	.word	0x00002634
    25b0:	.word	0x0000265c
    25b4:	.word	0x00002684
    25b8:	.word	0x000026c8
    25bc:	.word	0x000026f0
    25c0:	.word	0x000026ac
    25c4:	ldr	r2, [pc, #388]	; 2750 <coda_cursor_read_int64+0x20c>
    25c8:	bl	0 <__aeabi_read_tp>
    25cc:	ldr	r2, [pc, r2]
    25d0:	ldr	r2, [r0, r2]
    25d4:	cmp	r2, #0
    25d8:	beq	2598 <coda_cursor_read_int64+0x54>
    25dc:	ldr	r2, [r3, #48]	; 0x30
    25e0:	cmp	r2, #0
    25e4:	movne	r0, #9
    25e8:	beq	2598 <coda_cursor_read_int64+0x54>
    25ec:	bl	0 <coda_type_get_native_type_name>
    25f0:	ldr	r1, [pc, #348]	; 2754 <coda_cursor_read_int64+0x210>
    25f4:	mov	r2, r0
    25f8:	mvn	r0, #104	; 0x68
    25fc:	bl	0 <coda_set_error>
    2600:	mvn	r0, #0
    2604:	add	sp, sp, #12
    2608:	pop	{r4, r5, pc}
    260c:	mov	r0, r4
    2610:	add	r1, sp, #4
    2614:	bl	0 <read_int8>
    2618:	cmp	r0, #0
    261c:	bne	2600 <coda_cursor_read_int64+0xbc>
    2620:	ldrsb	r2, [sp, #4]
    2624:	asr	r3, r2, #31
    2628:	strd	r2, [r5]
    262c:	add	sp, sp, #12
    2630:	pop	{r4, r5, pc}
    2634:	mov	r0, r4
    2638:	add	r1, sp, #4
    263c:	bl	bc <read_uint8>
    2640:	cmp	r0, #0
    2644:	bne	2600 <coda_cursor_read_int64+0xbc>
    2648:	ldrb	r2, [sp, #4]
    264c:	mov	r3, #0
    2650:	strd	r2, [r5]
    2654:	add	sp, sp, #12
    2658:	pop	{r4, r5, pc}
    265c:	mov	r0, r4
    2660:	add	r1, sp, #4
    2664:	bl	168 <read_int16>
    2668:	cmp	r0, #0
    266c:	bne	2600 <coda_cursor_read_int64+0xbc>
    2670:	ldrsh	r2, [sp, #4]
    2674:	asr	r3, r2, #31
    2678:	strd	r2, [r5]
    267c:	add	sp, sp, #12
    2680:	pop	{r4, r5, pc}
    2684:	mov	r0, r4
    2688:	add	r1, sp, #4
    268c:	bl	234 <read_uint16>
    2690:	cmp	r0, #0
    2694:	bne	2600 <coda_cursor_read_int64+0xbc>
    2698:	ldrh	r2, [sp, #4]
    269c:	mov	r3, #0
    26a0:	strd	r2, [r5]
    26a4:	add	sp, sp, #12
    26a8:	pop	{r4, r5, pc}
    26ac:	mov	r1, r5
    26b0:	mov	r0, r4
    26b4:	bl	458 <read_int64>
    26b8:	adds	r0, r0, #0
    26bc:	mvnne	r0, #0
    26c0:	add	sp, sp, #12
    26c4:	pop	{r4, r5, pc}
    26c8:	mov	r0, r4
    26cc:	add	r1, sp, #4
    26d0:	bl	2e0 <read_int32>
    26d4:	cmp	r0, #0
    26d8:	bne	2600 <coda_cursor_read_int64+0xbc>
    26dc:	ldr	r2, [sp, #4]
    26e0:	asr	r3, r2, #31
    26e4:	strd	r2, [r5]
    26e8:	add	sp, sp, #12
    26ec:	pop	{r4, r5, pc}
    26f0:	mov	r0, r4
    26f4:	add	r1, sp, #4
    26f8:	bl	3ac <read_uint32>
    26fc:	cmp	r0, #0
    2700:	bne	2600 <coda_cursor_read_int64+0xbc>
    2704:	ldr	r3, [sp, #4]
    2708:	str	r0, [r5, #4]
    270c:	str	r3, [r5]
    2710:	add	sp, sp, #12
    2714:	pop	{r4, r5, pc}
    2718:	mvn	r0, #99	; 0x63
    271c:	ldr	r3, [pc, #52]	; 2758 <coda_cursor_read_int64+0x214>
    2720:	ldr	r2, [pc, #52]	; 275c <coda_cursor_read_int64+0x218>
    2724:	ldr	r1, [pc, #52]	; 2760 <coda_cursor_read_int64+0x21c>
    2728:	bl	0 <coda_set_error>
    272c:	mvn	r0, #0
    2730:	b	2604 <coda_cursor_read_int64+0xc0>
    2734:	mvn	r0, #99	; 0x63
    2738:	ldr	r3, [pc, #36]	; 2764 <coda_cursor_read_int64+0x220>
    273c:	ldr	r2, [pc, #24]	; 275c <coda_cursor_read_int64+0x218>
    2740:	ldr	r1, [pc, #32]	; 2768 <coda_cursor_read_int64+0x224>
    2744:	bl	0 <coda_set_error>
    2748:	mvn	r0, #0
    274c:	b	2604 <coda_cursor_read_int64+0xc0>
    2750:	.word	0x0000017c
    2754:	.word	0x0000023c
    2758:	.word	0x00000879
    275c:	.word	0x00000000
    2760:	.word	0x000000e0
    2764:	.word	0x0000087e
    2768:	.word	0x00000100

0000276c <coda_cursor_read_uint64>:
    276c:	push	{r4, r5, lr}
    2770:	subs	r4, r0, #0
    2774:	sub	sp, sp, #12
    2778:	beq	28cc <coda_cursor_read_uint64+0x160>
    277c:	ldr	r3, [r4, #4]
    2780:	cmp	r3, #0
    2784:	ble	28cc <coda_cursor_read_uint64+0x160>
    2788:	add	r3, r4, r3, lsl #4
    278c:	ldr	r3, [r3, #-8]
    2790:	cmp	r3, #0
    2794:	beq	28cc <coda_cursor_read_uint64+0x160>
    2798:	cmp	r1, #0
    279c:	mov	r5, r1
    27a0:	beq	28e8 <coda_cursor_read_uint64+0x17c>
    27a4:	ldr	r2, [r3]
    27a8:	cmp	r2, #99	; 0x63
    27ac:	ldrhi	r3, [r3, #4]
    27b0:	ldr	r2, [r3, #8]
    27b4:	sub	r2, r2, #2
    27b8:	cmp	r2, #1
    27bc:	bls	27f0 <coda_cursor_read_uint64+0x84>
    27c0:	ldr	r0, [r3, #12]
    27c4:	sub	r3, r0, #1
    27c8:	cmp	r3, #6
    27cc:	ldrls	pc, [pc, r3, lsl #2]
    27d0:	b	2818 <coda_cursor_read_uint64+0xac>
    27d4:	.word	0x00002854
    27d8:	.word	0x00002818
    27dc:	.word	0x0000287c
    27e0:	.word	0x00002818
    27e4:	.word	0x000028a4
    27e8:	.word	0x00002818
    27ec:	.word	0x00002838
    27f0:	ldr	r2, [pc, #268]	; 2904 <coda_cursor_read_uint64+0x198>
    27f4:	bl	0 <__aeabi_read_tp>
    27f8:	ldr	r2, [pc, r2]
    27fc:	ldr	r2, [r0, r2]
    2800:	cmp	r2, #0
    2804:	beq	27c0 <coda_cursor_read_uint64+0x54>
    2808:	ldr	r2, [r3, #48]	; 0x30
    280c:	cmp	r2, #0
    2810:	movne	r0, #9
    2814:	beq	27c0 <coda_cursor_read_uint64+0x54>
    2818:	bl	0 <coda_type_get_native_type_name>
    281c:	ldr	r1, [pc, #228]	; 2908 <coda_cursor_read_uint64+0x19c>
    2820:	mov	r2, r0
    2824:	mvn	r0, #104	; 0x68
    2828:	bl	0 <coda_set_error>
    282c:	mvn	r0, #0
    2830:	add	sp, sp, #12
    2834:	pop	{r4, r5, pc}
    2838:	mov	r1, r5
    283c:	mov	r0, r4
    2840:	bl	1cb0 <read_uint64>
    2844:	adds	r0, r0, #0
    2848:	mvnne	r0, #0
    284c:	add	sp, sp, #12
    2850:	pop	{r4, r5, pc}
    2854:	mov	r0, r4
    2858:	add	r1, sp, #4
    285c:	bl	bc <read_uint8>
    2860:	cmp	r0, #0
    2864:	bne	282c <coda_cursor_read_uint64+0xc0>
    2868:	ldrb	r2, [sp, #4]
    286c:	mov	r3, #0
    2870:	strd	r2, [r5]
    2874:	add	sp, sp, #12
    2878:	pop	{r4, r5, pc}
    287c:	mov	r0, r4
    2880:	add	r1, sp, #4
    2884:	bl	234 <read_uint16>
    2888:	cmp	r0, #0
    288c:	bne	282c <coda_cursor_read_uint64+0xc0>
    2890:	ldrh	r2, [sp, #4]
    2894:	mov	r3, #0
    2898:	strd	r2, [r5]
    289c:	add	sp, sp, #12
    28a0:	pop	{r4, r5, pc}
    28a4:	mov	r0, r4
    28a8:	add	r1, sp, #4
    28ac:	bl	3ac <read_uint32>
    28b0:	cmp	r0, #0
    28b4:	bne	282c <coda_cursor_read_uint64+0xc0>
    28b8:	ldr	r3, [sp, #4]
    28bc:	str	r0, [r5, #4]
    28c0:	str	r3, [r5]
    28c4:	add	sp, sp, #12
    28c8:	pop	{r4, r5, pc}
    28cc:	mvn	r0, #99	; 0x63
    28d0:	ldr	r3, [pc, #52]	; 290c <coda_cursor_read_uint64+0x1a0>
    28d4:	ldr	r2, [pc, #52]	; 2910 <coda_cursor_read_uint64+0x1a4>
    28d8:	ldr	r1, [pc, #52]	; 2914 <coda_cursor_read_uint64+0x1a8>
    28dc:	bl	0 <coda_set_error>
    28e0:	mvn	r0, #0
    28e4:	b	284c <coda_cursor_read_uint64+0xe0>
    28e8:	mvn	r0, #99	; 0x63
    28ec:	ldr	r3, [pc, #36]	; 2918 <coda_cursor_read_uint64+0x1ac>
    28f0:	ldr	r2, [pc, #24]	; 2910 <coda_cursor_read_uint64+0x1a4>
    28f4:	ldr	r1, [pc, #32]	; 291c <coda_cursor_read_uint64+0x1b0>
    28f8:	bl	0 <coda_set_error>
    28fc:	mvn	r0, #0
    2900:	b	284c <coda_cursor_read_uint64+0xe0>
    2904:	.word	0x00000104
    2908:	.word	0x0000026c
    290c:	.word	0x000008ed
    2910:	.word	0x00000000
    2914:	.word	0x000000e0
    2918:	.word	0x000008f2
    291c:	.word	0x00000100

00002920 <coda_cursor_read_double>:
    2920:	push	{r4, r5, r6, lr}
    2924:	subs	r6, r0, #0
    2928:	sub	sp, sp, #8
    292c:	beq	2bac <coda_cursor_read_double+0x28c>
    2930:	ldr	r3, [r6, #4]
    2934:	cmp	r3, #0
    2938:	ble	2bac <coda_cursor_read_double+0x28c>
    293c:	add	r3, r6, r3, lsl #4
    2940:	ldr	r3, [r3, #-8]
    2944:	cmp	r3, #0
    2948:	beq	2bac <coda_cursor_read_double+0x28c>
    294c:	cmp	r1, #0
    2950:	mov	r5, r1
    2954:	beq	2bc8 <coda_cursor_read_double+0x2a8>
    2958:	ldr	r2, [r3]
    295c:	cmp	r2, #99	; 0x63
    2960:	ldrhi	r3, [r3, #4]
    2964:	ldr	r2, [r3, #8]
    2968:	ldr	r1, [r3, #12]
    296c:	sub	r2, r2, #2
    2970:	cmp	r2, #1
    2974:	movhi	r4, #0
    2978:	bls	29b0 <coda_cursor_read_double+0x90>
    297c:	cmp	r1, #9
    2980:	ldrls	pc, [pc, r1, lsl #2]
    2984:	b	2b84 <coda_cursor_read_double+0x264>
    2988:	.word	0x00002a24
    298c:	.word	0x00002a4c
    2990:	.word	0x00002a74
    2994:	.word	0x00002a9c
    2998:	.word	0x00002ac4
    299c:	.word	0x00002ae8
    29a0:	.word	0x00002b0c
    29a4:	.word	0x00002b30
    29a8:	.word	0x00002b4c
    29ac:	.word	0x000029cc
    29b0:	ldr	r2, [pc, #556]	; 2be4 <coda_cursor_read_double+0x2c4>
    29b4:	bl	0 <__aeabi_read_tp>
    29b8:	ldr	r2, [pc, r2]
    29bc:	ldr	r4, [r0, r2]
    29c0:	cmp	r4, #0
    29c4:	ldrne	r4, [r3, #48]	; 0x30
    29c8:	b	297c <coda_cursor_read_double+0x5c>
    29cc:	mov	r0, r6
    29d0:	mov	r1, r5
    29d4:	bl	2cf8 <read_double>
    29d8:	cmp	r0, #0
    29dc:	bne	2b44 <coda_cursor_read_double+0x224>
    29e0:	cmp	r4, #0
    29e4:	beq	2ba4 <coda_cursor_read_double+0x284>
    29e8:	vldr	d7, [r5]
    29ec:	vldr	d6, [r4, #24]
    29f0:	vcmp.f64	d7, d6
    29f4:	vmrs	APSR_nzcv, fpscr
    29f8:	beq	2b70 <coda_cursor_read_double+0x250>
    29fc:	vldr	d6, [r4]
    2a00:	vldr	d4, [r4, #8]
    2a04:	vldr	d5, [r4, #16]
    2a08:	mov	r0, #0
    2a0c:	vmul.f64	d7, d7, d6
    2a10:	vdiv.f64	d6, d7, d4
    2a14:	vadd.f64	d6, d6, d5
    2a18:	vstr	d6, [r5]
    2a1c:	add	sp, sp, #8
    2a20:	pop	{r4, r5, r6, pc}
    2a24:	mov	r0, r6
    2a28:	mov	r1, sp
    2a2c:	bl	0 <read_int8>
    2a30:	cmp	r0, #0
    2a34:	bne	2b44 <coda_cursor_read_double+0x224>
    2a38:	ldrsb	r3, [sp]
    2a3c:	vmov	s14, r3
    2a40:	vcvt.f64.s32	d7, s14
    2a44:	vstr	d7, [r5]
    2a48:	b	29e0 <coda_cursor_read_double+0xc0>
    2a4c:	mov	r0, r6
    2a50:	mov	r1, sp
    2a54:	bl	bc <read_uint8>
    2a58:	cmp	r0, #0
    2a5c:	bne	2b44 <coda_cursor_read_double+0x224>
    2a60:	ldrb	r3, [sp]
    2a64:	vmov	s14, r3
    2a68:	vcvt.f64.u32	d7, s14
    2a6c:	vstr	d7, [r5]
    2a70:	b	29e0 <coda_cursor_read_double+0xc0>
    2a74:	mov	r0, r6
    2a78:	mov	r1, sp
    2a7c:	bl	168 <read_int16>
    2a80:	cmp	r0, #0
    2a84:	bne	2b44 <coda_cursor_read_double+0x224>
    2a88:	ldrsh	r3, [sp]
    2a8c:	vmov	s14, r3
    2a90:	vcvt.f64.s32	d7, s14
    2a94:	vstr	d7, [r5]
    2a98:	b	29e0 <coda_cursor_read_double+0xc0>
    2a9c:	mov	r0, r6
    2aa0:	mov	r1, sp
    2aa4:	bl	234 <read_uint16>
    2aa8:	cmp	r0, #0
    2aac:	bne	2b44 <coda_cursor_read_double+0x224>
    2ab0:	ldrh	r3, [sp]
    2ab4:	vmov	s14, r3
    2ab8:	vcvt.f64.u32	d7, s14
    2abc:	vstr	d7, [r5]
    2ac0:	b	29e0 <coda_cursor_read_double+0xc0>
    2ac4:	mov	r0, r6
    2ac8:	mov	r1, sp
    2acc:	bl	2e0 <read_int32>
    2ad0:	cmp	r0, #0
    2ad4:	bne	2b44 <coda_cursor_read_double+0x224>
    2ad8:	vldr	s15, [sp]
    2adc:	vcvt.f64.s32	d7, s15
    2ae0:	vstr	d7, [r5]
    2ae4:	b	29e0 <coda_cursor_read_double+0xc0>
    2ae8:	mov	r0, r6
    2aec:	mov	r1, sp
    2af0:	bl	3ac <read_uint32>
    2af4:	cmp	r0, #0
    2af8:	bne	2b44 <coda_cursor_read_double+0x224>
    2afc:	vldr	s15, [sp]
    2b00:	vcvt.f64.u32	d7, s15
    2b04:	vstr	d7, [r5]
    2b08:	b	29e0 <coda_cursor_read_double+0xc0>
    2b0c:	mov	r0, r6
    2b10:	mov	r1, sp
    2b14:	bl	458 <read_int64>
    2b18:	cmp	r0, #0
    2b1c:	bne	2b44 <coda_cursor_read_double+0x224>
    2b20:	ldrd	r0, [sp]
    2b24:	bl	0 <__aeabi_l2d>
    2b28:	strd	r0, [r5]
    2b2c:	b	29e0 <coda_cursor_read_double+0xc0>
    2b30:	mov	r0, r6
    2b34:	mov	r1, sp
    2b38:	bl	1cb0 <read_uint64>
    2b3c:	cmp	r0, #0
    2b40:	beq	2b20 <coda_cursor_read_double+0x200>
    2b44:	mvn	r0, #0
    2b48:	b	2a1c <coda_cursor_read_double+0xfc>
    2b4c:	mov	r0, r6
    2b50:	mov	r1, sp
    2b54:	bl	500 <read_float>
    2b58:	cmp	r0, #0
    2b5c:	bne	2b44 <coda_cursor_read_double+0x224>
    2b60:	vldr	s14, [sp]
    2b64:	vcvt.f64.f32	d7, s14
    2b68:	vstr	d7, [r5]
    2b6c:	b	29e0 <coda_cursor_read_double+0xc0>
    2b70:	bl	0 <coda_NaN>
    2b74:	mov	r0, #0
    2b78:	vstr	d0, [r5]
    2b7c:	add	sp, sp, #8
    2b80:	pop	{r4, r5, r6, pc}
    2b84:	mov	r0, r1
    2b88:	bl	0 <coda_type_get_native_type_name>
    2b8c:	ldr	r1, [pc, #84]	; 2be8 <coda_cursor_read_double+0x2c8>
    2b90:	mov	r2, r0
    2b94:	mvn	r0, #104	; 0x68
    2b98:	bl	0 <coda_set_error>
    2b9c:	mvn	r0, #0
    2ba0:	b	2a1c <coda_cursor_read_double+0xfc>
    2ba4:	mov	r0, r4
    2ba8:	b	2a1c <coda_cursor_read_double+0xfc>
    2bac:	mvn	r0, #99	; 0x63
    2bb0:	ldr	r3, [pc, #52]	; 2bec <coda_cursor_read_double+0x2cc>
    2bb4:	ldr	r2, [pc, #52]	; 2bf0 <coda_cursor_read_double+0x2d0>
    2bb8:	ldr	r1, [pc, #52]	; 2bf4 <coda_cursor_read_double+0x2d4>
    2bbc:	bl	0 <coda_set_error>
    2bc0:	mvn	r0, #0
    2bc4:	b	2a1c <coda_cursor_read_double+0xfc>
    2bc8:	mvn	r0, #99	; 0x63
    2bcc:	ldr	r3, [pc, #36]	; 2bf8 <coda_cursor_read_double+0x2d8>
    2bd0:	ldr	r2, [pc, #24]	; 2bf0 <coda_cursor_read_double+0x2d0>
    2bd4:	ldr	r1, [pc, #32]	; 2bfc <coda_cursor_read_double+0x2dc>
    2bd8:	bl	0 <coda_set_error>
    2bdc:	mvn	r0, #0
    2be0:	b	2a1c <coda_cursor_read_double+0xfc>
    2be4:	.word	0x00000224
    2be8:	.word	0x0000029c
    2bec:	.word	0x000009ef
    2bf0:	.word	0x00000000
    2bf4:	.word	0x000000e0
    2bf8:	.word	0x000009f4
    2bfc:	.word	0x00000100

00002c00 <read_vsf_integer>:
    2c00:	push	{r4, lr}
    2c04:	sub	sp, sp, #536	; 0x218
    2c08:	mov	r2, #520	; 0x208
    2c0c:	mov	r4, r1
    2c10:	mov	r1, r0
    2c14:	add	r0, sp, #16
    2c18:	bl	0 <memcpy>
    2c1c:	add	r0, sp, #16
    2c20:	bl	0 <coda_cursor_use_base_type_of_special_type>
    2c24:	cmp	r0, #0
    2c28:	bne	2cb8 <read_vsf_integer+0xb8>
    2c2c:	add	r0, sp, #16
    2c30:	bl	0 <coda_cursor_goto_first_record_field>
    2c34:	cmp	r0, #0
    2c38:	bne	2cb8 <read_vsf_integer+0xb8>
    2c3c:	add	r1, sp, #4
    2c40:	add	r0, sp, #16
    2c44:	bl	2210 <coda_cursor_read_int32>
    2c48:	cmp	r0, #0
    2c4c:	bne	2cb8 <read_vsf_integer+0xb8>
    2c50:	add	r0, sp, #16
    2c54:	bl	0 <coda_cursor_goto_next_record_field>
    2c58:	cmp	r0, #0
    2c5c:	bne	2cb8 <read_vsf_integer+0xb8>
    2c60:	add	r0, sp, #16
    2c64:	add	r1, sp, #8
    2c68:	bl	2920 <coda_cursor_read_double>
    2c6c:	cmp	r0, #0
    2c70:	bne	2cb8 <read_vsf_integer+0xb8>
    2c74:	ldr	r3, [sp, #4]
    2c78:	cmp	r3, #0
    2c7c:	ble	2cc4 <read_vsf_integer+0xc4>
    2c80:	vldr	d7, [pc, #96]	; 2ce8 <read_vsf_integer+0xe8>
    2c84:	vldr	d6, [pc, #100]	; 2cf0 <read_vsf_integer+0xf0>
    2c88:	rsb	r3, r3, #1
    2c8c:	add	r3, r3, #1
    2c90:	cmp	r3, #1
    2c94:	vmul.f64	d7, d7, d6
    2c98:	bne	2c8c <read_vsf_integer+0x8c>
    2c9c:	vldr	d5, [pc, #68]	; 2ce8 <read_vsf_integer+0xe8>
    2ca0:	vdiv.f64	d6, d5, d7
    2ca4:	vldr	d7, [sp, #8]
    2ca8:	vmul.f64	d6, d7, d6
    2cac:	vstr	d6, [r4]
    2cb0:	add	sp, sp, #536	; 0x218
    2cb4:	pop	{r4, pc}
    2cb8:	mvn	r0, #0
    2cbc:	add	sp, sp, #536	; 0x218
    2cc0:	pop	{r4, pc}
    2cc4:	mvn	r3, r3
    2cc8:	vldr	d6, [pc, #24]	; 2ce8 <read_vsf_integer+0xe8>
    2ccc:	vldrne	d7, [pc, #28]	; 2cf0 <read_vsf_integer+0xf0>
    2cd0:	beq	2ca4 <read_vsf_integer+0xa4>
    2cd4:	sub	r3, r3, #1
    2cd8:	cmn	r3, #1
    2cdc:	vmul.f64	d6, d6, d7
    2ce0:	bne	2cd4 <read_vsf_integer+0xd4>
    2ce4:	b	2ca4 <read_vsf_integer+0xa4>
    2ce8:	.word	0x00000000
    2cec:	.word	0x3ff00000
    2cf0:	.word	0x00000000
    2cf4:	.word	0x40240000

00002cf8 <read_double>:
    2cf8:	ldr	r3, [r0, #4]
    2cfc:	add	r3, r0, r3, lsl #4
    2d00:	ldr	r3, [r3, #-8]
    2d04:	ldr	r2, [r3]
    2d08:	cmp	r2, #99	; 0x63
    2d0c:	ldrhi	r3, [r3, #4]
    2d10:	ldr	ip, [r3, #8]
    2d14:	cmp	ip, #6
    2d18:	beq	2d64 <read_double+0x6c>
    2d1c:	cmp	r2, #101	; 0x65
    2d20:	push	{r4, lr}
    2d24:	beq	2dbc <read_double+0xc4>
    2d28:	bls	2d48 <read_double+0x50>
    2d2c:	cmp	r2, #103	; 0x67
    2d30:	beq	2d98 <read_double+0xa0>
    2d34:	bcc	2d7c <read_double+0x84>
    2d38:	cmp	r2, #104	; 0x68
    2d3c:	bne	2da0 <read_double+0xa8>
    2d40:	pop	{r4, lr}
    2d44:	b	0 <coda_netcdf_cursor_read_double>
    2d48:	cmp	r2, #1
    2d4c:	beq	2db4 <read_double+0xbc>
    2d50:	bcc	2d90 <read_double+0x98>
    2d54:	cmp	r2, #100	; 0x64
    2d58:	bne	2da0 <read_double+0xa8>
    2d5c:	pop	{r4, lr}
    2d60:	b	0 <coda_mem_cursor_read_double>
    2d64:	ldr	r3, [r3, #40]	; 0x28
    2d68:	cmp	r3, #2
    2d6c:	beq	2dd0 <read_double+0xd8>
    2d70:	cmp	r3, #1
    2d74:	bne	2d1c <read_double+0x24>
    2d78:	b	2c00 <read_vsf_integer>
    2d7c:	mov	r1, #0
    2d80:	mvn	r0, #12
    2d84:	bl	0 <coda_set_error>
    2d88:	mvn	r0, #0
    2d8c:	pop	{r4, pc}
    2d90:	pop	{r4, lr}
    2d94:	b	0 <coda_ascii_cursor_read_double>
    2d98:	pop	{r4, lr}
    2d9c:	b	0 <coda_cdf_cursor_read_double>
    2da0:	ldr	r3, [pc, #44]	; 2dd4 <read_double+0xdc>
    2da4:	mov	r2, #692	; 0x2b4
    2da8:	ldr	r1, [pc, #40]	; 2dd8 <read_double+0xe0>
    2dac:	ldr	r0, [pc, #40]	; 2ddc <read_double+0xe4>
    2db0:	bl	0 <__assert_fail>
    2db4:	pop	{r4, lr}
    2db8:	b	0 <coda_bin_cursor_read_double>
    2dbc:	mov	r1, #0
    2dc0:	mvn	r0, #10
    2dc4:	bl	0 <coda_set_error>
    2dc8:	mvn	r0, #0
    2dcc:	pop	{r4, pc}
    2dd0:	b	5cc <read_time>
    2dd4:	.word	0x00000224
    2dd8:	.word	0x00000000
    2ddc:	.word	0x00000050

00002de0 <read_partial_array.constprop.3>:
    2de0:	push	{r4, r5, r6, r7, lr}
    2de4:	sub	sp, sp, #524	; 0x20c
    2de8:	mov	r6, r2
    2dec:	mov	r4, r1
    2df0:	mov	r2, #520	; 0x208
    2df4:	mov	r1, r0
    2df8:	mov	r0, sp
    2dfc:	mov	r5, r3
    2e00:	bl	0 <memcpy>
    2e04:	cmp	r6, #0
    2e08:	ble	2e60 <read_partial_array.constprop.3+0x80>
    2e0c:	mov	r1, r4
    2e10:	mov	r0, sp
    2e14:	bl	0 <coda_cursor_goto_array_element_by_index>
    2e18:	subs	r4, r0, #0
    2e1c:	subeq	r7, r6, #1
    2e20:	bne	2e6c <read_partial_array.constprop.3+0x8c>
    2e24:	mov	r1, r5
    2e28:	mov	r0, sp
    2e2c:	bl	2cf8 <read_double>
    2e30:	add	r5, r5, #8
    2e34:	cmp	r0, #0
    2e38:	mov	r0, sp
    2e3c:	bne	2e6c <read_partial_array.constprop.3+0x8c>
    2e40:	cmp	r7, r4
    2e44:	add	r4, r4, #1
    2e48:	ble	2e58 <read_partial_array.constprop.3+0x78>
    2e4c:	bl	0 <coda_cursor_goto_next_array_element>
    2e50:	cmp	r0, #0
    2e54:	bne	2e6c <read_partial_array.constprop.3+0x8c>
    2e58:	cmp	r6, r4
    2e5c:	bne	2e24 <read_partial_array.constprop.3+0x44>
    2e60:	mov	r0, #0
    2e64:	add	sp, sp, #524	; 0x20c
    2e68:	pop	{r4, r5, r6, r7, pc}
    2e6c:	mvn	r0, #0
    2e70:	add	sp, sp, #524	; 0x20c
    2e74:	pop	{r4, r5, r6, r7, pc}

00002e78 <read_double_partial_array>:
    2e78:	ldr	ip, [r0, #4]
    2e7c:	push	{r4, lr}
    2e80:	add	ip, r0, ip, lsl #4
    2e84:	ldr	ip, [ip, #-8]
    2e88:	ldr	lr, [ip]
    2e8c:	cmp	lr, #99	; 0x63
    2e90:	ldrhi	ip, [ip, #4]
    2e94:	ldr	ip, [ip, #40]	; 0x28
    2e98:	ldr	ip, [ip, #8]
    2e9c:	cmp	ip, #6
    2ea0:	beq	2f3c <read_double_partial_array+0xc4>
    2ea4:	cmp	lr, #101	; 0x65
    2ea8:	beq	2f28 <read_double_partial_array+0xb0>
    2eac:	bls	2ecc <read_double_partial_array+0x54>
    2eb0:	cmp	lr, #103	; 0x67
    2eb4:	beq	2f0c <read_double_partial_array+0x94>
    2eb8:	bcc	2ee8 <read_double_partial_array+0x70>
    2ebc:	cmp	lr, #104	; 0x68
    2ec0:	bne	2f14 <read_double_partial_array+0x9c>
    2ec4:	pop	{r4, lr}
    2ec8:	b	0 <coda_netcdf_cursor_read_double_partial_array>
    2ecc:	cmp	lr, #1
    2ed0:	beq	2f04 <read_double_partial_array+0x8c>
    2ed4:	bcc	2efc <read_double_partial_array+0x84>
    2ed8:	cmp	lr, #100	; 0x64
    2edc:	bne	2f14 <read_double_partial_array+0x9c>
    2ee0:	pop	{r4, lr}
    2ee4:	b	0 <coda_mem_cursor_read_double_partial_array>
    2ee8:	mov	r1, #0
    2eec:	mvn	r0, #12
    2ef0:	bl	0 <coda_set_error>
    2ef4:	mvn	r0, #0
    2ef8:	pop	{r4, pc}
    2efc:	pop	{r4, lr}
    2f00:	b	0 <coda_ascii_cursor_read_double_partial_array>
    2f04:	pop	{r4, lr}
    2f08:	b	0 <coda_bin_cursor_read_double_partial_array>
    2f0c:	pop	{r4, lr}
    2f10:	b	0 <coda_cdf_cursor_read_double_partial_array>
    2f14:	ldr	r3, [pc, #40]	; 2f44 <read_double_partial_array+0xcc>
    2f18:	ldr	r2, [pc, #40]	; 2f48 <read_double_partial_array+0xd0>
    2f1c:	ldr	r1, [pc, #40]	; 2f4c <read_double_partial_array+0xd4>
    2f20:	ldr	r0, [pc, #40]	; 2f50 <read_double_partial_array+0xd8>
    2f24:	bl	0 <__assert_fail>
    2f28:	mov	r1, #0
    2f2c:	mvn	r0, #10
    2f30:	bl	0 <coda_set_error>
    2f34:	mvn	r0, #0
    2f38:	pop	{r4, pc}
    2f3c:	pop	{r4, lr}
    2f40:	b	2de0 <read_partial_array.constprop.3>
    2f44:	.word	0x00000230
    2f48:	.word	0x000006b6
    2f4c:	.word	0x00000000
    2f50:	.word	0x00000050

00002f54 <coda_cursor_read_float>:
    2f54:	subs	r2, r0, #0
    2f58:	push	{r4, r5, lr}
    2f5c:	sub	sp, sp, #12
    2f60:	beq	31a8 <coda_cursor_read_float+0x254>
    2f64:	ldr	r3, [r2, #4]
    2f68:	cmp	r3, #0
    2f6c:	ble	31a8 <coda_cursor_read_float+0x254>
    2f70:	add	r3, r2, r3, lsl #4
    2f74:	ldr	r3, [r3, #-8]
    2f78:	cmp	r3, #0
    2f7c:	beq	31a8 <coda_cursor_read_float+0x254>
    2f80:	cmp	r1, #0
    2f84:	mov	r4, r1
    2f88:	beq	31c4 <coda_cursor_read_float+0x270>
    2f8c:	ldr	r1, [r3]
    2f90:	cmp	r1, #99	; 0x63
    2f94:	ldrhi	r3, [r3, #4]
    2f98:	ldr	r1, [r3, #8]
    2f9c:	sub	r1, r1, #2
    2fa0:	cmp	r1, #1
    2fa4:	bls	2fe0 <coda_cursor_read_float+0x8c>
    2fa8:	ldr	r0, [r3, #12]
    2fac:	cmp	r0, #9
    2fb0:	ldrls	pc, [pc, r0, lsl #2]
    2fb4:	b	3030 <coda_cursor_read_float+0xdc>
    2fb8:	.word	0x00003054
    2fbc:	.word	0x00003180
    2fc0:	.word	0x00003158
    2fc4:	.word	0x00003130
    2fc8:	.word	0x0000310c
    2fcc:	.word	0x000030e8
    2fd0:	.word	0x000030d0
    2fd4:	.word	0x000030ac
    2fd8:	.word	0x00003094
    2fdc:	.word	0x0000307c
    2fe0:	ldr	r1, [pc, #504]	; 31e0 <coda_cursor_read_float+0x28c>
    2fe4:	bl	0 <__aeabi_read_tp>
    2fe8:	ldr	r1, [pc, r1]
    2fec:	ldr	r1, [r0, r1]
    2ff0:	cmp	r1, #0
    2ff4:	beq	2fa8 <coda_cursor_read_float+0x54>
    2ff8:	ldr	r1, [r3, #48]	; 0x30
    2ffc:	cmp	r1, #0
    3000:	beq	2fa8 <coda_cursor_read_float+0x54>
    3004:	mov	r0, r2
    3008:	mov	r1, sp
    300c:	bl	2920 <coda_cursor_read_double>
    3010:	subs	r5, r0, #0
    3014:	bne	3044 <coda_cursor_read_float+0xf0>
    3018:	vldr	d7, [sp]
    301c:	vcvt.f32.f64	s14, d7
    3020:	vstr	s14, [r4]
    3024:	mov	r0, r5
    3028:	add	sp, sp, #12
    302c:	pop	{r4, r5, pc}
    3030:	bl	0 <coda_type_get_native_type_name>
    3034:	ldr	r1, [pc, #424]	; 31e4 <coda_cursor_read_float+0x290>
    3038:	mov	r2, r0
    303c:	mvn	r0, #104	; 0x68
    3040:	bl	0 <coda_set_error>
    3044:	mvn	r5, #0
    3048:	mov	r0, r5
    304c:	add	sp, sp, #12
    3050:	pop	{r4, r5, pc}
    3054:	mov	r0, r2
    3058:	mov	r1, sp
    305c:	bl	0 <read_int8>
    3060:	subs	r5, r0, #0
    3064:	bne	3044 <coda_cursor_read_float+0xf0>
    3068:	ldrsb	r3, [sp]
    306c:	vmov	s15, r3
    3070:	vcvt.f32.s32	s15, s15
    3074:	vstr	s15, [r4]
    3078:	b	3024 <coda_cursor_read_float+0xd0>
    307c:	mov	r0, r2
    3080:	mov	r1, sp
    3084:	bl	2cf8 <read_double>
    3088:	subs	r5, r0, #0
    308c:	beq	3018 <coda_cursor_read_float+0xc4>
    3090:	b	3044 <coda_cursor_read_float+0xf0>
    3094:	mov	r1, r4
    3098:	mov	r0, r2
    309c:	bl	500 <read_float>
    30a0:	adds	r5, r0, #0
    30a4:	mvnne	r5, #0
    30a8:	b	3024 <coda_cursor_read_float+0xd0>
    30ac:	mov	r0, r2
    30b0:	mov	r1, sp
    30b4:	bl	1cb0 <read_uint64>
    30b8:	subs	r5, r0, #0
    30bc:	bne	3044 <coda_cursor_read_float+0xf0>
    30c0:	ldrd	r0, [sp]
    30c4:	bl	0 <__aeabi_l2f>
    30c8:	str	r0, [r4]
    30cc:	b	3024 <coda_cursor_read_float+0xd0>
    30d0:	mov	r0, r2
    30d4:	mov	r1, sp
    30d8:	bl	458 <read_int64>
    30dc:	subs	r5, r0, #0
    30e0:	beq	30c0 <coda_cursor_read_float+0x16c>
    30e4:	b	3044 <coda_cursor_read_float+0xf0>
    30e8:	mov	r0, r2
    30ec:	mov	r1, sp
    30f0:	bl	3ac <read_uint32>
    30f4:	subs	r5, r0, #0
    30f8:	bne	3044 <coda_cursor_read_float+0xf0>
    30fc:	vldr	s15, [sp]
    3100:	vcvt.f32.u32	s15, s15
    3104:	vstr	s15, [r4]
    3108:	b	3024 <coda_cursor_read_float+0xd0>
    310c:	mov	r0, r2
    3110:	mov	r1, sp
    3114:	bl	2e0 <read_int32>
    3118:	subs	r5, r0, #0
    311c:	bne	3044 <coda_cursor_read_float+0xf0>
    3120:	vldr	s15, [sp]
    3124:	vcvt.f32.s32	s15, s15
    3128:	vstr	s15, [r4]
    312c:	b	3024 <coda_cursor_read_float+0xd0>
    3130:	mov	r0, r2
    3134:	mov	r1, sp
    3138:	bl	234 <read_uint16>
    313c:	subs	r5, r0, #0
    3140:	bne	3044 <coda_cursor_read_float+0xf0>
    3144:	ldrh	r3, [sp]
    3148:	vmov	s15, r3
    314c:	vcvt.f32.u32	s15, s15
    3150:	vstr	s15, [r4]
    3154:	b	3024 <coda_cursor_read_float+0xd0>
    3158:	mov	r0, r2
    315c:	mov	r1, sp
    3160:	bl	168 <read_int16>
    3164:	subs	r5, r0, #0
    3168:	bne	3044 <coda_cursor_read_float+0xf0>
    316c:	ldrsh	r3, [sp]
    3170:	vmov	s15, r3
    3174:	vcvt.f32.s32	s15, s15
    3178:	vstr	s15, [r4]
    317c:	b	3024 <coda_cursor_read_float+0xd0>
    3180:	mov	r0, r2
    3184:	mov	r1, sp
    3188:	bl	bc <read_uint8>
    318c:	subs	r5, r0, #0
    3190:	bne	3044 <coda_cursor_read_float+0xf0>
    3194:	ldrb	r3, [sp]
    3198:	vmov	s15, r3
    319c:	vcvt.f32.u32	s15, s15
    31a0:	vstr	s15, [r4]
    31a4:	b	3024 <coda_cursor_read_float+0xd0>
    31a8:	ldr	r3, [pc, #56]	; 31e8 <coda_cursor_read_float+0x294>
    31ac:	ldr	r2, [pc, #56]	; 31ec <coda_cursor_read_float+0x298>
    31b0:	ldr	r1, [pc, #56]	; 31f0 <coda_cursor_read_float+0x29c>
    31b4:	mvn	r0, #99	; 0x63
    31b8:	bl	0 <coda_set_error>
    31bc:	mvn	r5, #0
    31c0:	b	3024 <coda_cursor_read_float+0xd0>
    31c4:	ldr	r3, [pc, #40]	; 31f4 <coda_cursor_read_float+0x2a0>
    31c8:	ldr	r2, [pc, #28]	; 31ec <coda_cursor_read_float+0x298>
    31cc:	ldr	r1, [pc, #36]	; 31f8 <coda_cursor_read_float+0x2a4>
    31d0:	mvn	r0, #99	; 0x63
    31d4:	bl	0 <coda_set_error>
    31d8:	mvn	r5, #0
    31dc:	b	3024 <coda_cursor_read_float+0xd0>
    31e0:	.word	0x000001f0
    31e4:	.word	0x000002cc
    31e8:	.word	0x00000947
    31ec:	.word	0x00000000
    31f0:	.word	0x000000e0
    31f4:	.word	0x0000094c
    31f8:	.word	0x00000100

000031fc <read_double_pair>:
    31fc:	ldr	r3, [r0, #4]
    3200:	push	{r4, lr}
    3204:	sub	sp, sp, #520	; 0x208
    3208:	add	r3, r0, r3, lsl #4
    320c:	ldr	r3, [r3, #-8]
    3210:	ldr	r2, [r3, #8]
    3214:	cmp	r2, #6
    3218:	bne	32a8 <read_double_pair+0xac>
    321c:	ldr	r3, [r3, #40]	; 0x28
    3220:	cmp	r3, #3
    3224:	bne	32a8 <read_double_pair+0xac>
    3228:	mov	r2, #520	; 0x208
    322c:	mov	r4, r1
    3230:	mov	r1, r0
    3234:	mov	r0, sp
    3238:	bl	0 <memcpy>
    323c:	mov	r0, sp
    3240:	bl	0 <coda_cursor_use_base_type_of_special_type>
    3244:	subs	r1, r0, #0
    3248:	bne	329c <read_double_pair+0xa0>
    324c:	mov	r0, sp
    3250:	bl	0 <coda_cursor_goto_record_field_by_index>
    3254:	cmp	r0, #0
    3258:	bne	329c <read_double_pair+0xa0>
    325c:	mov	r1, r4
    3260:	mov	r0, sp
    3264:	bl	2920 <coda_cursor_read_double>
    3268:	cmp	r0, #0
    326c:	bne	329c <read_double_pair+0xa0>
    3270:	mov	r0, sp
    3274:	bl	0 <coda_cursor_goto_next_record_field>
    3278:	cmp	r0, #0
    327c:	bne	329c <read_double_pair+0xa0>
    3280:	add	r1, r4, #8
    3284:	mov	r0, sp
    3288:	bl	2920 <coda_cursor_read_double>
    328c:	adds	r0, r0, #0
    3290:	mvnne	r0, #0
    3294:	add	sp, sp, #520	; 0x208
    3298:	pop	{r4, pc}
    329c:	mvn	r0, #0
    32a0:	add	sp, sp, #520	; 0x208
    32a4:	pop	{r4, pc}
    32a8:	ldr	r1, [pc, #16]	; 32c0 <read_double_pair+0xc4>
    32ac:	mvn	r0, #104	; 0x68
    32b0:	bl	0 <coda_set_error>
    32b4:	mvn	r0, #0
    32b8:	add	sp, sp, #520	; 0x208
    32bc:	pop	{r4, pc}
    32c0:	.word	0x000002fc

000032c4 <read_split_array.constprop.2>:
    32c4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    32c8:	sub	sp, sp, #620	; 0x26c
    32cc:	mov	r4, r1
    32d0:	mov	r5, r2
    32d4:	add	r1, sp, #8
    32d8:	add	r2, sp, #28
    32dc:	mov	r6, r3
    32e0:	mov	r7, r0
    32e4:	bl	0 <coda_cursor_get_array_dim>
    32e8:	subs	r3, r0, #0
    32ec:	str	r3, [sp]
    32f0:	bne	33d4 <read_split_array.constprop.2+0x110>
    32f4:	mov	r1, r7
    32f8:	add	r0, sp, #96	; 0x60
    32fc:	mov	r2, #520	; 0x208
    3300:	bl	0 <memcpy>
    3304:	ldr	r1, [sp, #8]
    3308:	cmp	r1, #1
    330c:	movgt	r3, #0
    3310:	movle	r3, #1
    3314:	cmp	r6, #1
    3318:	orrne	r3, r3, #1
    331c:	cmp	r3, #0
    3320:	beq	33e8 <read_split_array.constprop.2+0x124>
    3324:	cmp	r1, #0
    3328:	ble	3530 <read_split_array.constprop.2+0x26c>
    332c:	add	r3, sp, #28
    3330:	add	r1, r3, r1, lsl #2
    3334:	mov	r8, #1
    3338:	ldr	r2, [r3], #4
    333c:	cmp	r1, r3
    3340:	mul	r8, r2, r8
    3344:	bne	3338 <read_split_array.constprop.2+0x74>
    3348:	cmp	r8, #0
    334c:	ble	33c8 <read_split_array.constprop.2+0x104>
    3350:	mov	r1, #0
    3354:	add	r0, sp, #96	; 0x60
    3358:	bl	0 <coda_cursor_goto_array_element_by_index>
    335c:	subs	r9, r0, #0
    3360:	bne	33d4 <read_split_array.constprop.2+0x110>
    3364:	sub	sl, r8, #1
    3368:	add	r6, sp, #12
    336c:	add	r7, sp, #20
    3370:	mov	r1, r6
    3374:	add	r0, sp, #96	; 0x60
    3378:	bl	31fc <read_double_pair>
    337c:	mov	r2, r6
    3380:	mov	r3, r7
    3384:	ldm	r2!, {r0, r1}
    3388:	cmp	r9, sl
    338c:	add	r4, r4, #8
    3390:	str	r0, [r4, #-8]
    3394:	str	r1, [r4, #-4]
    3398:	ldm	r3!, {r0, r1}
    339c:	add	r9, r9, #1
    33a0:	str	r0, [r5]
    33a4:	str	r1, [r5, #4]
    33a8:	add	r0, sp, #96	; 0x60
    33ac:	bge	33bc <read_split_array.constprop.2+0xf8>
    33b0:	bl	0 <coda_cursor_goto_next_array_element>
    33b4:	cmp	r0, #0
    33b8:	bne	33d4 <read_split_array.constprop.2+0x110>
    33bc:	cmp	r9, r8
    33c0:	add	r5, r5, #8
    33c4:	blt	3370 <read_split_array.constprop.2+0xac>
    33c8:	ldr	r0, [sp]
    33cc:	add	sp, sp, #620	; 0x26c
    33d0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    33d4:	mvn	r3, #0
    33d8:	str	r3, [sp]
    33dc:	ldr	r0, [sp]
    33e0:	add	sp, sp, #620	; 0x26c
    33e4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    33e8:	mov	ip, #1
    33ec:	ldr	r3, [sp]
    33f0:	add	sl, sp, #616	; 0x268
    33f4:	add	r2, sp, #28
    33f8:	mov	r0, ip
    33fc:	str	ip, [sl, #-556]!	; 0xfffffdd4
    3400:	ldr	ip, [r2], #4
    3404:	add	r3, r3, #1
    3408:	cmp	r1, r3
    340c:	mul	r0, ip, r0
    3410:	str	r0, [sl, r3, lsl #2]
    3414:	bgt	3400 <read_split_array.constprop.2+0x13c>
    3418:	add	r3, sp, #616	; 0x268
    341c:	add	r3, r3, r1, lsl #2
    3420:	ldr	r9, [r3, #-556]	; 0xfffffdd4
    3424:	cmp	r9, #0
    3428:	ble	33c8 <read_split_array.constprop.2+0x104>
    342c:	add	r3, sp, #616	; 0x268
    3430:	add	r3, r3, r1, lsl #2
    3434:	add	r0, sp, #96	; 0x60
    3438:	ldr	r3, [r3, #-560]	; 0xfffffdd0
    343c:	mov	r1, #0
    3440:	str	r3, [sp, #4]
    3444:	bl	0 <coda_cursor_goto_array_element_by_index>
    3448:	subs	fp, r0, #0
    344c:	bne	33d4 <read_split_array.constprop.2+0x110>
    3450:	mov	r8, fp
    3454:	add	r6, sp, #12
    3458:	add	r7, sp, #20
    345c:	mov	r1, r6
    3460:	add	r0, sp, #96	; 0x60
    3464:	bl	31fc <read_double_pair>
    3468:	mov	r2, r6
    346c:	lsl	r3, fp, #3
    3470:	ldm	r2!, {r0, r1}
    3474:	add	ip, r4, r3
    3478:	mov	r2, r7
    347c:	str	r0, [r4, fp, lsl #3]
    3480:	str	r1, [ip, #4]
    3484:	ldm	r2!, {r0, r1}
    3488:	add	r8, r8, #1
    348c:	add	r3, r5, r3
    3490:	cmp	r9, r8
    3494:	str	r0, [r5, fp, lsl #3]
    3498:	str	r1, [r3, #4]
    349c:	ble	3538 <read_split_array.constprop.2+0x274>
    34a0:	add	r0, sp, #96	; 0x60
    34a4:	bl	0 <coda_cursor_goto_next_array_element>
    34a8:	cmp	r0, #0
    34ac:	bne	33d4 <read_split_array.constprop.2+0x110>
    34b0:	ldr	r3, [sp, #4]
    34b4:	add	fp, fp, r3
    34b8:	cmp	fp, r9
    34bc:	blt	345c <read_split_array.constprop.2+0x198>
    34c0:	ldr	r1, [sp, #8]
    34c4:	add	r3, sp, #616	; 0x268
    34c8:	subs	r0, r1, #3
    34cc:	add	r3, r3, r1, lsl #2
    34d0:	mov	r2, r3
    34d4:	ldr	r3, [r3, #-564]	; 0xfffffdcc
    34d8:	ldr	r2, [r2, #-556]	; 0xfffffdd4
    34dc:	sub	r3, r3, r2
    34e0:	add	fp, fp, r3
    34e4:	bmi	345c <read_split_array.constprop.2+0x198>
    34e8:	add	r3, sp, #616	; 0x268
    34ec:	add	r3, r3, r1, lsl #2
    34f0:	ldr	r3, [r3, #-560]	; 0xfffffdd0
    34f4:	cmp	r3, fp
    34f8:	bgt	345c <read_split_array.constprop.2+0x198>
    34fc:	add	r1, sl, r1, lsl #2
    3500:	sub	r1, r1, #8
    3504:	mov	r2, r3
    3508:	ldr	r3, [r1, #-4]!
    350c:	sub	r0, r0, #1
    3510:	sub	r3, r3, r2
    3514:	cmn	r0, #1
    3518:	add	fp, fp, r3
    351c:	beq	345c <read_split_array.constprop.2+0x198>
    3520:	ldr	r2, [r1, #4]
    3524:	cmp	r2, fp
    3528:	ble	3508 <read_split_array.constprop.2+0x244>
    352c:	b	345c <read_split_array.constprop.2+0x198>
    3530:	mov	r8, #1
    3534:	b	3350 <read_split_array.constprop.2+0x8c>
    3538:	ldr	r3, [sp, #4]
    353c:	add	fp, fp, r3
    3540:	cmp	r9, fp
    3544:	bgt	345c <read_split_array.constprop.2+0x198>
    3548:	cmp	r9, r8
    354c:	beq	33c8 <read_split_array.constprop.2+0x104>
    3550:	b	34c0 <read_split_array.constprop.2+0x1fc>

00003554 <coda_cursor_read_char>:
    3554:	push	{r4, r5, r6, lr}
    3558:	subs	r4, r0, #0
    355c:	beq	3690 <coda_cursor_read_char+0x13c>
    3560:	ldr	r3, [r4, #4]
    3564:	cmp	r3, #0
    3568:	ble	3690 <coda_cursor_read_char+0x13c>
    356c:	add	r3, r4, r3, lsl #4
    3570:	ldr	r3, [r3, #-8]
    3574:	cmp	r3, #0
    3578:	beq	3690 <coda_cursor_read_char+0x13c>
    357c:	cmp	r1, #0
    3580:	beq	36ac <coda_cursor_read_char+0x158>
    3584:	ldr	r2, [r3]
    3588:	cmp	r2, #99	; 0x63
    358c:	ldrhi	r3, [r3, #4]
    3590:	ldr	r0, [r3, #8]
    3594:	sub	r0, r0, #2
    3598:	cmp	r0, #1
    359c:	bls	3608 <coda_cursor_read_char+0xb4>
    35a0:	ldr	r0, [r3, #12]
    35a4:	cmp	r0, #10
    35a8:	bne	3630 <coda_cursor_read_char+0xdc>
    35ac:	cmp	r2, #100	; 0x64
    35b0:	beq	3678 <coda_cursor_read_char+0x124>
    35b4:	bls	35e4 <coda_cursor_read_char+0x90>
    35b8:	cmp	r2, #103	; 0x67
    35bc:	beq	3684 <coda_cursor_read_char+0x130>
    35c0:	cmp	r2, #104	; 0x68
    35c4:	beq	3658 <coda_cursor_read_char+0x104>
    35c8:	cmp	r2, #101	; 0x65
    35cc:	beq	3664 <coda_cursor_read_char+0x110>
    35d0:	ldr	r3, [pc, #240]	; 36c8 <coda_cursor_read_char+0x174>
    35d4:	ldr	r2, [pc, #240]	; 36cc <coda_cursor_read_char+0x178>
    35d8:	ldr	r1, [pc, #240]	; 36d0 <coda_cursor_read_char+0x17c>
    35dc:	ldr	r0, [pc, #240]	; 36d4 <coda_cursor_read_char+0x180>
    35e0:	bl	0 <__assert_fail>
    35e4:	cmp	r2, #0
    35e8:	beq	364c <coda_cursor_read_char+0xf8>
    35ec:	cmp	r2, #1
    35f0:	bne	35d0 <coda_cursor_read_char+0x7c>
    35f4:	mov	r0, r4
    35f8:	bl	0 <coda_bin_cursor_read_char>
    35fc:	adds	r0, r0, #0
    3600:	mvnne	r0, #0
    3604:	pop	{r4, r5, r6, pc}
    3608:	ldr	r5, [pc, #200]	; 36d8 <coda_cursor_read_char+0x184>
    360c:	bl	0 <__aeabi_read_tp>
    3610:	ldr	r5, [pc, r5]
    3614:	ldr	r0, [r0, r5]
    3618:	cmp	r0, #0
    361c:	beq	35a0 <coda_cursor_read_char+0x4c>
    3620:	ldr	r0, [r3, #48]	; 0x30
    3624:	cmp	r0, #0
    3628:	movne	r0, #9
    362c:	beq	35a0 <coda_cursor_read_char+0x4c>
    3630:	bl	0 <coda_type_get_native_type_name>
    3634:	ldr	r1, [pc, #160]	; 36dc <coda_cursor_read_char+0x188>
    3638:	mov	r2, r0
    363c:	mvn	r0, #104	; 0x68
    3640:	bl	0 <coda_set_error>
    3644:	mvn	r0, #0
    3648:	pop	{r4, r5, r6, pc}
    364c:	mov	r0, r4
    3650:	bl	0 <coda_ascii_cursor_read_char>
    3654:	b	35fc <coda_cursor_read_char+0xa8>
    3658:	mov	r0, r4
    365c:	bl	0 <coda_netcdf_cursor_read_char>
    3660:	b	35fc <coda_cursor_read_char+0xa8>
    3664:	mov	r1, #0
    3668:	mvn	r0, #10
    366c:	bl	0 <coda_set_error>
    3670:	mvn	r0, #0
    3674:	pop	{r4, r5, r6, pc}
    3678:	mov	r0, r4
    367c:	bl	0 <coda_mem_cursor_read_char>
    3680:	b	35fc <coda_cursor_read_char+0xa8>
    3684:	mov	r0, r4
    3688:	bl	0 <coda_cdf_cursor_read_char>
    368c:	b	35fc <coda_cursor_read_char+0xa8>
    3690:	ldr	r3, [pc, #72]	; 36e0 <coda_cursor_read_char+0x18c>
    3694:	ldr	r2, [pc, #52]	; 36d0 <coda_cursor_read_char+0x17c>
    3698:	ldr	r1, [pc, #68]	; 36e4 <coda_cursor_read_char+0x190>
    369c:	mvn	r0, #99	; 0x63
    36a0:	bl	0 <coda_set_error>
    36a4:	mvn	r0, #0
    36a8:	pop	{r4, r5, r6, pc}
    36ac:	ldr	r3, [pc, #52]	; 36e8 <coda_cursor_read_char+0x194>
    36b0:	ldr	r2, [pc, #24]	; 36d0 <coda_cursor_read_char+0x17c>
    36b4:	ldr	r1, [pc, #48]	; 36ec <coda_cursor_read_char+0x198>
    36b8:	mvn	r0, #99	; 0x63
    36bc:	bl	0 <coda_set_error>
    36c0:	mvn	r0, #0
    36c4:	pop	{r4, r5, r6, pc}
    36c8:	.word	0x0000024c
    36cc:	.word	0x000002d2
    36d0:	.word	0x00000000
    36d4:	.word	0x00000050
    36d8:	.word	0x000000c0
    36dc:	.word	0x00000334
    36e0:	.word	0x00000a8a
    36e4:	.word	0x000000e0
    36e8:	.word	0x00000a8f
    36ec:	.word	0x00000100

000036f0 <coda_cursor_read_string>:
    36f0:	push	{r4, r5, r6, lr}
    36f4:	subs	r6, r1, #0
    36f8:	sub	sp, sp, #16
    36fc:	beq	3860 <coda_cursor_read_string+0x170>
    3700:	cmp	r2, #0
    3704:	mov	r5, r2
    3708:	ble	3840 <coda_cursor_read_string+0x150>
    370c:	add	r1, sp, #12
    3710:	mov	r4, r0
    3714:	bl	0 <coda_cursor_has_ascii_content>
    3718:	subs	r1, r0, #0
    371c:	bne	3824 <coda_cursor_read_string+0x134>
    3720:	ldr	r3, [sp, #12]
    3724:	cmp	r3, #0
    3728:	beq	382c <coda_cursor_read_string+0x13c>
    372c:	ldr	r3, [r4, #4]
    3730:	add	r3, r4, r3, lsl #4
    3734:	ldr	r3, [r3, #-8]
    3738:	ldr	r3, [r3]
    373c:	cmp	r3, #101	; 0x65
    3740:	beq	3810 <coda_cursor_read_string+0x120>
    3744:	bls	3774 <coda_cursor_read_string+0x84>
    3748:	cmp	r3, #103	; 0x67
    374c:	beq	37cc <coda_cursor_read_string+0xdc>
    3750:	bcc	37a0 <coda_cursor_read_string+0xb0>
    3754:	cmp	r3, #104	; 0x68
    3758:	bne	37e4 <coda_cursor_read_string+0xf4>
    375c:	mov	r2, r5
    3760:	mov	r1, r6
    3764:	mov	r0, r4
    3768:	bl	0 <coda_netcdf_cursor_read_string>
    376c:	add	sp, sp, #16
    3770:	pop	{r4, r5, r6, pc}
    3774:	cmp	r3, #1
    3778:	beq	37f8 <coda_cursor_read_string+0x108>
    377c:	bcc	37b4 <coda_cursor_read_string+0xc4>
    3780:	cmp	r3, #100	; 0x64
    3784:	bne	37e4 <coda_cursor_read_string+0xf4>
    3788:	mov	r2, r5
    378c:	mov	r1, r6
    3790:	mov	r0, r4
    3794:	bl	0 <coda_mem_cursor_read_string>
    3798:	add	sp, sp, #16
    379c:	pop	{r4, r5, r6, pc}
    37a0:	mvn	r0, #12
    37a4:	bl	0 <coda_set_error>
    37a8:	mvn	r0, #0
    37ac:	add	sp, sp, #16
    37b0:	pop	{r4, r5, r6, pc}
    37b4:	mov	r2, r5
    37b8:	mov	r1, r6
    37bc:	mov	r0, r4
    37c0:	bl	0 <coda_ascii_cursor_read_string>
    37c4:	add	sp, sp, #16
    37c8:	pop	{r4, r5, r6, pc}
    37cc:	mov	r2, r5
    37d0:	mov	r1, r6
    37d4:	mov	r0, r4
    37d8:	bl	0 <coda_cdf_cursor_read_string>
    37dc:	add	sp, sp, #16
    37e0:	pop	{r4, r5, r6, pc}
    37e4:	ldr	r3, [pc, #144]	; 387c <coda_cursor_read_string+0x18c>
    37e8:	ldr	r2, [pc, #144]	; 3880 <coda_cursor_read_string+0x190>
    37ec:	ldr	r1, [pc, #144]	; 3884 <coda_cursor_read_string+0x194>
    37f0:	ldr	r0, [pc, #144]	; 3888 <coda_cursor_read_string+0x198>
    37f4:	bl	0 <__assert_fail>
    37f8:	mov	r2, r5
    37fc:	mov	r1, r6
    3800:	mov	r0, r4
    3804:	bl	0 <coda_bin_cursor_read_string>
    3808:	add	sp, sp, #16
    380c:	pop	{r4, r5, r6, pc}
    3810:	mvn	r0, #10
    3814:	bl	0 <coda_set_error>
    3818:	mvn	r0, #0
    381c:	add	sp, sp, #16
    3820:	pop	{r4, r5, r6, pc}
    3824:	mvn	r0, #0
    3828:	b	376c <coda_cursor_read_string+0x7c>
    382c:	mvn	r0, #104	; 0x68
    3830:	ldr	r1, [pc, #84]	; 388c <coda_cursor_read_string+0x19c>
    3834:	bl	0 <coda_set_error>
    3838:	mvn	r0, #0
    383c:	b	376c <coda_cursor_read_string+0x7c>
    3840:	ldr	r1, [pc, #72]	; 3890 <coda_cursor_read_string+0x1a0>
    3844:	mvn	r0, #99	; 0x63
    3848:	str	r1, [sp]
    384c:	ldr	r3, [pc, #48]	; 3884 <coda_cursor_read_string+0x194>
    3850:	ldr	r1, [pc, #60]	; 3894 <coda_cursor_read_string+0x1a4>
    3854:	bl	0 <coda_set_error>
    3858:	mvn	r0, #0
    385c:	b	376c <coda_cursor_read_string+0x7c>
    3860:	mvn	r0, #99	; 0x63
    3864:	ldr	r3, [pc, #44]	; 3898 <coda_cursor_read_string+0x1a8>
    3868:	ldr	r2, [pc, #20]	; 3884 <coda_cursor_read_string+0x194>
    386c:	ldr	r1, [pc, #40]	; 389c <coda_cursor_read_string+0x1ac>
    3870:	bl	0 <coda_set_error>
    3874:	mvn	r0, #0
    3878:	b	376c <coda_cursor_read_string+0x7c>
    387c:	.word	0x00000258
    3880:	.word	0x000002f6
    3884:	.word	0x00000000
    3888:	.word	0x00000050
    388c:	.word	0x00000388
    3890:	.word	0x00000ac1
    3894:	.word	0x00000360
    3898:	.word	0x00000abb
    389c:	.word	0x00000100

000038a0 <coda_cursor_read_bits>:
    38a0:	push	{r4, r5, r6, lr}
    38a4:	subs	ip, r0, #0
    38a8:	ldrd	r4, [sp, #16]
    38ac:	beq	3944 <coda_cursor_read_bits+0xa4>
    38b0:	ldr	lr, [ip, #4]
    38b4:	cmp	lr, #0
    38b8:	ble	3944 <coda_cursor_read_bits+0xa4>
    38bc:	add	ip, ip, lr, lsl #4
    38c0:	ldr	ip, [ip, #-8]
    38c4:	cmp	ip, #0
    38c8:	beq	3944 <coda_cursor_read_bits+0xa4>
    38cc:	cmp	r1, #0
    38d0:	mov	r6, r1
    38d4:	beq	397c <coda_cursor_read_bits+0xdc>
    38d8:	cmp	r4, #0
    38dc:	sbcs	lr, r5, #0
    38e0:	blt	3960 <coda_cursor_read_bits+0xc0>
    38e4:	orrs	lr, r4, r5
    38e8:	beq	3910 <coda_cursor_read_bits+0x70>
    38ec:	ldr	ip, [ip]
    38f0:	cmp	ip, #1
    38f4:	beq	392c <coda_cursor_read_bits+0x8c>
    38f8:	bcc	3938 <coda_cursor_read_bits+0x98>
    38fc:	cmp	ip, #100	; 0x64
    3900:	bne	3918 <coda_cursor_read_bits+0x78>
    3904:	strd	r4, [sp, #16]
    3908:	pop	{r4, r5, r6, lr}
    390c:	b	0 <coda_mem_cursor_read_bits>
    3910:	mov	r0, #0
    3914:	pop	{r4, r5, r6, pc}
    3918:	ldr	r1, [pc, #120]	; 3998 <coda_cursor_read_bits+0xf8>
    391c:	mvn	r0, #104	; 0x68
    3920:	bl	0 <coda_set_error>
    3924:	mvn	r0, #0
    3928:	pop	{r4, r5, r6, pc}
    392c:	strd	r4, [sp, #16]
    3930:	pop	{r4, r5, r6, lr}
    3934:	b	0 <coda_bin_cursor_read_bits>
    3938:	strd	r4, [sp, #16]
    393c:	pop	{r4, r5, r6, lr}
    3940:	b	0 <coda_ascii_cursor_read_bits>
    3944:	ldr	r3, [pc, #80]	; 399c <coda_cursor_read_bits+0xfc>
    3948:	ldr	r2, [pc, #80]	; 39a0 <coda_cursor_read_bits+0x100>
    394c:	ldr	r1, [pc, #80]	; 39a4 <coda_cursor_read_bits+0x104>
    3950:	mvn	r0, #99	; 0x63
    3954:	bl	0 <coda_set_error>
    3958:	mvn	r0, #0
    395c:	pop	{r4, r5, r6, pc}
    3960:	ldr	r3, [pc, #64]	; 39a8 <coda_cursor_read_bits+0x108>
    3964:	ldr	r2, [pc, #52]	; 39a0 <coda_cursor_read_bits+0x100>
    3968:	ldr	r1, [pc, #60]	; 39ac <coda_cursor_read_bits+0x10c>
    396c:	mvn	r0, #99	; 0x63
    3970:	bl	0 <coda_set_error>
    3974:	mvn	r0, #0
    3978:	pop	{r4, r5, r6, pc}
    397c:	ldr	r3, [pc, #44]	; 39b0 <coda_cursor_read_bits+0x110>
    3980:	ldr	r2, [pc, #24]	; 39a0 <coda_cursor_read_bits+0x100>
    3984:	ldr	r1, [pc, #40]	; 39b4 <coda_cursor_read_bits+0x114>
    3988:	mvn	r0, #99	; 0x63
    398c:	bl	0 <coda_set_error>
    3990:	mvn	r0, #0
    3994:	pop	{r4, r5, r6, pc}
    3998:	.word	0x000003d0
    399c:	.word	0x00000ae5
    39a0:	.word	0x00000000
    39a4:	.word	0x000000e0
    39a8:	.word	0x00000aef
    39ac:	.word	0x000003a8
    39b0:	.word	0x00000aea
    39b4:	.word	0x00000100

000039b8 <coda_cursor_read_bytes>:
    39b8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    39bc:	subs	lr, r0, #0
    39c0:	ldrd	r4, [sp, #32]
    39c4:	beq	3a74 <coda_cursor_read_bytes+0xbc>
    39c8:	ldr	ip, [lr, #4]
    39cc:	cmp	ip, #0
    39d0:	ble	3a74 <coda_cursor_read_bytes+0xbc>
    39d4:	add	ip, lr, ip, lsl #4
    39d8:	ldr	ip, [ip, #-8]
    39dc:	cmp	ip, #0
    39e0:	beq	3a74 <coda_cursor_read_bytes+0xbc>
    39e4:	cmp	r1, #0
    39e8:	mov	r8, r1
    39ec:	beq	3ac8 <coda_cursor_read_bytes+0x110>
    39f0:	cmp	r2, #0
    39f4:	sbcs	r9, r3, #0
    39f8:	mov	r6, r2
    39fc:	mov	r7, r3
    3a00:	blt	3aac <coda_cursor_read_bytes+0xf4>
    3a04:	cmp	r4, #0
    3a08:	sbcs	r9, r5, #0
    3a0c:	blt	3a90 <coda_cursor_read_bytes+0xd8>
    3a10:	orrs	r9, r4, r5
    3a14:	beq	3a40 <coda_cursor_read_bytes+0x88>
    3a18:	ldr	ip, [ip]
    3a1c:	cmp	ip, #1
    3a20:	beq	3a5c <coda_cursor_read_bytes+0xa4>
    3a24:	bcc	3a68 <coda_cursor_read_bytes+0xb0>
    3a28:	cmp	ip, #100	; 0x64
    3a2c:	bne	3a48 <coda_cursor_read_bytes+0x90>
    3a30:	strd	r4, [sp, #32]
    3a34:	mov	r0, lr
    3a38:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
    3a3c:	b	0 <coda_mem_cursor_read_bytes>
    3a40:	mov	r0, #0
    3a44:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    3a48:	ldr	r1, [pc, #148]	; 3ae4 <coda_cursor_read_bytes+0x12c>
    3a4c:	mvn	r0, #104	; 0x68
    3a50:	bl	0 <coda_set_error>
    3a54:	mvn	r0, #0
    3a58:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    3a5c:	strd	r4, [sp, #32]
    3a60:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
    3a64:	b	0 <coda_bin_cursor_read_bytes>
    3a68:	strd	r4, [sp, #32]
    3a6c:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
    3a70:	b	0 <coda_ascii_cursor_read_bytes>
    3a74:	ldr	r3, [pc, #108]	; 3ae8 <coda_cursor_read_bytes+0x130>
    3a78:	ldr	r2, [pc, #108]	; 3aec <coda_cursor_read_bytes+0x134>
    3a7c:	ldr	r1, [pc, #108]	; 3af0 <coda_cursor_read_bytes+0x138>
    3a80:	mvn	r0, #99	; 0x63
    3a84:	bl	0 <coda_set_error>
    3a88:	mvn	r0, #0
    3a8c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    3a90:	ldr	r3, [pc, #92]	; 3af4 <coda_cursor_read_bytes+0x13c>
    3a94:	ldr	r2, [pc, #80]	; 3aec <coda_cursor_read_bytes+0x134>
    3a98:	ldr	r1, [pc, #88]	; 3af8 <coda_cursor_read_bytes+0x140>
    3a9c:	mvn	r0, #99	; 0x63
    3aa0:	bl	0 <coda_set_error>
    3aa4:	mvn	r0, #0
    3aa8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    3aac:	ldr	r3, [pc, #72]	; 3afc <coda_cursor_read_bytes+0x144>
    3ab0:	ldr	r2, [pc, #52]	; 3aec <coda_cursor_read_bytes+0x134>
    3ab4:	ldr	r1, [pc, #68]	; 3b00 <coda_cursor_read_bytes+0x148>
    3ab8:	mvn	r0, #99	; 0x63
    3abc:	bl	0 <coda_set_error>
    3ac0:	mvn	r0, #0
    3ac4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    3ac8:	ldr	r3, [pc, #52]	; 3b04 <coda_cursor_read_bytes+0x14c>
    3acc:	ldr	r2, [pc, #24]	; 3aec <coda_cursor_read_bytes+0x134>
    3ad0:	ldr	r1, [pc, #48]	; 3b08 <coda_cursor_read_bytes+0x150>
    3ad4:	mvn	r0, #99	; 0x63
    3ad8:	bl	0 <coda_set_error>
    3adc:	mvn	r0, #0
    3ae0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    3ae4:	.word	0x0000044c
    3ae8:	.word	0x00000b1d
    3aec:	.word	0x00000000
    3af0:	.word	0x000000e0
    3af4:	.word	0x00000b2c
    3af8:	.word	0x00000428
    3afc:	.word	0x00000b27
    3b00:	.word	0x00000404
    3b04:	.word	0x00000b22
    3b08:	.word	0x00000100

00003b0c <coda_cursor_read_int8_array>:
    3b0c:	push	{r4, r5, r6, lr}
    3b10:	subs	r4, r0, #0
    3b14:	beq	3be8 <coda_cursor_read_int8_array+0xdc>
    3b18:	ldr	r3, [r4, #4]
    3b1c:	cmp	r3, #0
    3b20:	ble	3be8 <coda_cursor_read_int8_array+0xdc>
    3b24:	add	r3, r4, r3, lsl #4
    3b28:	ldr	r3, [r3, #-8]
    3b2c:	cmp	r3, #0
    3b30:	beq	3be8 <coda_cursor_read_int8_array+0xdc>
    3b34:	cmp	r1, #0
    3b38:	beq	3c04 <coda_cursor_read_int8_array+0xf8>
    3b3c:	ldr	r0, [r3]
    3b40:	cmp	r0, #99	; 0x63
    3b44:	ldrhi	r3, [r3, #4]
    3b48:	ldr	r0, [r3, #8]
    3b4c:	cmp	r0, #1
    3b50:	bne	3bcc <coda_cursor_read_int8_array+0xc0>
    3b54:	ldr	r5, [r3, #40]	; 0x28
    3b58:	ldr	r3, [r5, #8]
    3b5c:	sub	r3, r3, #2
    3b60:	cmp	r3, #1
    3b64:	bls	3b88 <coda_cursor_read_int8_array+0x7c>
    3b68:	ldr	r0, [r5, #12]
    3b6c:	cmp	r0, #0
    3b70:	bne	3bb0 <coda_cursor_read_int8_array+0xa4>
    3b74:	mov	r0, r4
    3b78:	bl	a14 <read_int8_array>
    3b7c:	adds	r0, r0, #0
    3b80:	mvnne	r0, #0
    3b84:	pop	{r4, r5, r6, pc}
    3b88:	ldr	r3, [pc, #144]	; 3c20 <coda_cursor_read_int8_array+0x114>
    3b8c:	bl	0 <__aeabi_read_tp>
    3b90:	ldr	r3, [pc, r3]
    3b94:	ldr	r3, [r0, r3]
    3b98:	cmp	r3, #0
    3b9c:	beq	3b68 <coda_cursor_read_int8_array+0x5c>
    3ba0:	ldr	r3, [r5, #48]	; 0x30
    3ba4:	cmp	r3, #0
    3ba8:	movne	r0, #9
    3bac:	beq	3b68 <coda_cursor_read_int8_array+0x5c>
    3bb0:	bl	0 <coda_type_get_native_type_name>
    3bb4:	ldr	r1, [pc, #104]	; 3c24 <coda_cursor_read_int8_array+0x118>
    3bb8:	mov	r2, r0
    3bbc:	mvn	r0, #104	; 0x68
    3bc0:	bl	0 <coda_set_error>
    3bc4:	mvn	r0, #0
    3bc8:	pop	{r4, r5, r6, pc}
    3bcc:	bl	0 <coda_type_get_class_name>
    3bd0:	ldr	r1, [pc, #80]	; 3c28 <coda_cursor_read_int8_array+0x11c>
    3bd4:	mov	r2, r0
    3bd8:	mvn	r0, #104	; 0x68
    3bdc:	bl	0 <coda_set_error>
    3be0:	mvn	r0, #0
    3be4:	pop	{r4, r5, r6, pc}
    3be8:	ldr	r3, [pc, #60]	; 3c2c <coda_cursor_read_int8_array+0x120>
    3bec:	ldr	r2, [pc, #60]	; 3c30 <coda_cursor_read_int8_array+0x124>
    3bf0:	ldr	r1, [pc, #60]	; 3c34 <coda_cursor_read_int8_array+0x128>
    3bf4:	mvn	r0, #99	; 0x63
    3bf8:	bl	0 <coda_set_error>
    3bfc:	mvn	r0, #0
    3c00:	pop	{r4, r5, r6, pc}
    3c04:	ldr	r3, [pc, #44]	; 3c38 <coda_cursor_read_int8_array+0x12c>
    3c08:	ldr	r2, [pc, #32]	; 3c30 <coda_cursor_read_int8_array+0x124>
    3c0c:	ldr	r1, [pc, #40]	; 3c3c <coda_cursor_read_int8_array+0x130>
    3c10:	mvn	r0, #99	; 0x63
    3c14:	bl	0 <coda_set_error>
    3c18:	mvn	r0, #0
    3c1c:	pop	{r4, r5, r6, pc}
    3c20:	.word	0x00000088
    3c24:	.word	0x00000120
    3c28:	.word	0x00000480
    3c2c:	.word	0x00000b5c
    3c30:	.word	0x00000000
    3c34:	.word	0x000000e0
    3c38:	.word	0x00000b61
    3c3c:	.word	0x00000100

00003c40 <coda_cursor_read_uint8_array>:
    3c40:	push	{r4, r5, r6, lr}
    3c44:	subs	r4, r0, #0
    3c48:	beq	3d1c <coda_cursor_read_uint8_array+0xdc>
    3c4c:	ldr	r3, [r4, #4]
    3c50:	cmp	r3, #0
    3c54:	ble	3d1c <coda_cursor_read_uint8_array+0xdc>
    3c58:	add	r3, r4, r3, lsl #4
    3c5c:	ldr	r3, [r3, #-8]
    3c60:	cmp	r3, #0
    3c64:	beq	3d1c <coda_cursor_read_uint8_array+0xdc>
    3c68:	cmp	r1, #0
    3c6c:	beq	3d38 <coda_cursor_read_uint8_array+0xf8>
    3c70:	ldr	r0, [r3]
    3c74:	cmp	r0, #99	; 0x63
    3c78:	ldrhi	r3, [r3, #4]
    3c7c:	ldr	r0, [r3, #8]
    3c80:	cmp	r0, #1
    3c84:	bne	3d00 <coda_cursor_read_uint8_array+0xc0>
    3c88:	ldr	r5, [r3, #40]	; 0x28
    3c8c:	ldr	r3, [r5, #8]
    3c90:	sub	r3, r3, #2
    3c94:	cmp	r3, #1
    3c98:	bls	3cbc <coda_cursor_read_uint8_array+0x7c>
    3c9c:	ldr	r0, [r5, #12]
    3ca0:	cmp	r0, #1
    3ca4:	bne	3ce4 <coda_cursor_read_uint8_array+0xa4>
    3ca8:	mov	r0, r4
    3cac:	bl	b18 <read_uint8_array>
    3cb0:	adds	r0, r0, #0
    3cb4:	mvnne	r0, #0
    3cb8:	pop	{r4, r5, r6, pc}
    3cbc:	ldr	r3, [pc, #144]	; 3d54 <coda_cursor_read_uint8_array+0x114>
    3cc0:	bl	0 <__aeabi_read_tp>
    3cc4:	ldr	r3, [pc, r3]
    3cc8:	ldr	r3, [r0, r3]
    3ccc:	cmp	r3, #0
    3cd0:	beq	3c9c <coda_cursor_read_uint8_array+0x5c>
    3cd4:	ldr	r3, [r5, #48]	; 0x30
    3cd8:	cmp	r3, #0
    3cdc:	movne	r0, #9
    3ce0:	beq	3c9c <coda_cursor_read_uint8_array+0x5c>
    3ce4:	bl	0 <coda_type_get_native_type_name>
    3ce8:	ldr	r1, [pc, #104]	; 3d58 <coda_cursor_read_uint8_array+0x118>
    3cec:	mov	r2, r0
    3cf0:	mvn	r0, #104	; 0x68
    3cf4:	bl	0 <coda_set_error>
    3cf8:	mvn	r0, #0
    3cfc:	pop	{r4, r5, r6, pc}
    3d00:	bl	0 <coda_type_get_class_name>
    3d04:	ldr	r1, [pc, #80]	; 3d5c <coda_cursor_read_uint8_array+0x11c>
    3d08:	mov	r2, r0
    3d0c:	mvn	r0, #104	; 0x68
    3d10:	bl	0 <coda_set_error>
    3d14:	mvn	r0, #0
    3d18:	pop	{r4, r5, r6, pc}
    3d1c:	ldr	r3, [pc, #60]	; 3d60 <coda_cursor_read_uint8_array+0x120>
    3d20:	ldr	r2, [pc, #60]	; 3d64 <coda_cursor_read_uint8_array+0x124>
    3d24:	ldr	r1, [pc, #60]	; 3d68 <coda_cursor_read_uint8_array+0x128>
    3d28:	mvn	r0, #99	; 0x63
    3d2c:	bl	0 <coda_set_error>
    3d30:	mvn	r0, #0
    3d34:	pop	{r4, r5, r6, pc}
    3d38:	ldr	r3, [pc, #44]	; 3d6c <coda_cursor_read_uint8_array+0x12c>
    3d3c:	ldr	r2, [pc, #32]	; 3d64 <coda_cursor_read_uint8_array+0x124>
    3d40:	ldr	r1, [pc, #40]	; 3d70 <coda_cursor_read_uint8_array+0x130>
    3d44:	mvn	r0, #99	; 0x63
    3d48:	bl	0 <coda_set_error>
    3d4c:	mvn	r0, #0
    3d50:	pop	{r4, r5, r6, pc}
    3d54:	.word	0x00000088
    3d58:	.word	0x0000014c
    3d5c:	.word	0x00000480
    3d60:	.word	0x00000b97
    3d64:	.word	0x00000000
    3d68:	.word	0x000000e0
    3d6c:	.word	0x00000b9c
    3d70:	.word	0x00000100

00003d74 <coda_cursor_read_int16_array>:
    3d74:	push	{r4, r5, lr}
    3d78:	subs	r5, r0, #0
    3d7c:	sub	sp, sp, #12
    3d80:	beq	3f30 <coda_cursor_read_int16_array+0x1bc>
    3d84:	ldr	r3, [r5, #4]
    3d88:	cmp	r3, #0
    3d8c:	ble	3f30 <coda_cursor_read_int16_array+0x1bc>
    3d90:	add	r3, r5, r3, lsl #4
    3d94:	ldr	r3, [r3, #-8]
    3d98:	cmp	r3, #0
    3d9c:	beq	3f30 <coda_cursor_read_int16_array+0x1bc>
    3da0:	cmp	r1, #0
    3da4:	mov	r4, r1
    3da8:	beq	3f4c <coda_cursor_read_int16_array+0x1d8>
    3dac:	ldr	r1, [r3]
    3db0:	cmp	r1, #99	; 0x63
    3db4:	ldrhi	r3, [r3, #4]
    3db8:	ldr	r0, [r3, #8]
    3dbc:	cmp	r0, #1
    3dc0:	bne	3f14 <coda_cursor_read_int16_array+0x1a0>
    3dc4:	ldr	r1, [r3, #40]	; 0x28
    3dc8:	ldr	r3, [r1, #8]
    3dcc:	sub	r3, r3, #2
    3dd0:	cmp	r3, #1
    3dd4:	bls	3e30 <coda_cursor_read_int16_array+0xbc>
    3dd8:	ldr	r0, [r1, #12]
    3ddc:	cmp	r0, #1
    3de0:	beq	3e5c <coda_cursor_read_int16_array+0xe8>
    3de4:	cmp	r0, #2
    3de8:	beq	3e14 <coda_cursor_read_int16_array+0xa0>
    3dec:	cmp	r0, #0
    3df0:	beq	3eb4 <coda_cursor_read_int16_array+0x140>
    3df4:	bl	0 <coda_type_get_native_type_name>
    3df8:	ldr	r1, [pc, #360]	; 3f68 <coda_cursor_read_int16_array+0x1f4>
    3dfc:	mov	r2, r0
    3e00:	mvn	r0, #104	; 0x68
    3e04:	bl	0 <coda_set_error>
    3e08:	mvn	r0, #0
    3e0c:	add	sp, sp, #12
    3e10:	pop	{r4, r5, pc}
    3e14:	mov	r1, r4
    3e18:	mov	r0, r5
    3e1c:	bl	c08 <read_int16_array>
    3e20:	adds	r0, r0, #0
    3e24:	mvnne	r0, #0
    3e28:	add	sp, sp, #12
    3e2c:	pop	{r4, r5, pc}
    3e30:	ldr	r3, [pc, #308]	; 3f6c <coda_cursor_read_int16_array+0x1f8>
    3e34:	bl	0 <__aeabi_read_tp>
    3e38:	ldr	r3, [pc, r3]
    3e3c:	ldr	r3, [r0, r3]
    3e40:	cmp	r3, #0
    3e44:	beq	3dd8 <coda_cursor_read_int16_array+0x64>
    3e48:	ldr	r3, [r1, #48]	; 0x30
    3e4c:	cmp	r3, #0
    3e50:	movne	r0, #9
    3e54:	bne	3df4 <coda_cursor_read_int16_array+0x80>
    3e58:	b	3dd8 <coda_cursor_read_int16_array+0x64>
    3e5c:	mov	r1, r4
    3e60:	mov	r0, r5
    3e64:	bl	b18 <read_uint8_array>
    3e68:	cmp	r0, #0
    3e6c:	bne	3e08 <coda_cursor_read_int16_array+0x94>
    3e70:	mov	r0, r5
    3e74:	add	r1, sp, #4
    3e78:	bl	0 <coda_cursor_get_num_elements>
    3e7c:	cmp	r0, #0
    3e80:	bne	3e08 <coda_cursor_read_int16_array+0x94>
    3e84:	ldr	r2, [sp, #4]
    3e88:	cmp	r2, #0
    3e8c:	ble	3ea8 <coda_cursor_read_int16_array+0x134>
    3e90:	add	r3, r4, r2
    3e94:	add	r2, r3, r2
    3e98:	ldrb	r1, [r3, #-1]!
    3e9c:	cmp	r3, r4
    3ea0:	strh	r1, [r2, #-2]!
    3ea4:	bne	3e98 <coda_cursor_read_int16_array+0x124>
    3ea8:	mov	r0, #0
    3eac:	add	sp, sp, #12
    3eb0:	pop	{r4, r5, pc}
    3eb4:	mov	r1, r4
    3eb8:	mov	r0, r5
    3ebc:	bl	a14 <read_int8_array>
    3ec0:	cmp	r0, #0
    3ec4:	bne	3e08 <coda_cursor_read_int16_array+0x94>
    3ec8:	mov	r0, r5
    3ecc:	add	r1, sp, #4
    3ed0:	bl	0 <coda_cursor_get_num_elements>
    3ed4:	cmp	r0, #0
    3ed8:	bne	3e08 <coda_cursor_read_int16_array+0x94>
    3edc:	ldr	r2, [sp, #4]
    3ee0:	cmp	r2, #0
    3ee4:	addgt	r3, r4, r2
    3ee8:	addgt	r2, r3, r2
    3eec:	ble	3ea8 <coda_cursor_read_int16_array+0x134>
    3ef0:	ldrsb	r1, [r3, #-1]!
    3ef4:	cmp	r4, r3
    3ef8:	strh	r1, [r2, #-2]!
    3efc:	beq	3ea8 <coda_cursor_read_int16_array+0x134>
    3f00:	ldrsb	r1, [r3, #-1]!
    3f04:	cmp	r4, r3
    3f08:	strh	r1, [r2, #-2]!
    3f0c:	bne	3ef0 <coda_cursor_read_int16_array+0x17c>
    3f10:	b	3ea8 <coda_cursor_read_int16_array+0x134>
    3f14:	bl	0 <coda_type_get_class_name>
    3f18:	ldr	r1, [pc, #80]	; 3f70 <coda_cursor_read_int16_array+0x1fc>
    3f1c:	mov	r2, r0
    3f20:	mvn	r0, #104	; 0x68
    3f24:	bl	0 <coda_set_error>
    3f28:	mvn	r0, #0
    3f2c:	b	3e0c <coda_cursor_read_int16_array+0x98>
    3f30:	mvn	r0, #99	; 0x63
    3f34:	ldr	r3, [pc, #56]	; 3f74 <coda_cursor_read_int16_array+0x200>
    3f38:	ldr	r2, [pc, #56]	; 3f78 <coda_cursor_read_int16_array+0x204>
    3f3c:	ldr	r1, [pc, #56]	; 3f7c <coda_cursor_read_int16_array+0x208>
    3f40:	bl	0 <coda_set_error>
    3f44:	mvn	r0, #0
    3f48:	b	3e0c <coda_cursor_read_int16_array+0x98>
    3f4c:	mvn	r0, #99	; 0x63
    3f50:	ldr	r3, [pc, #40]	; 3f80 <coda_cursor_read_int16_array+0x20c>
    3f54:	ldr	r2, [pc, #28]	; 3f78 <coda_cursor_read_int16_array+0x204>
    3f58:	ldr	r1, [pc, #36]	; 3f84 <coda_cursor_read_int16_array+0x210>
    3f5c:	bl	0 <coda_set_error>
    3f60:	mvn	r0, #0
    3f64:	b	3e0c <coda_cursor_read_int16_array+0x98>
    3f68:	.word	0x0000017c
    3f6c:	.word	0x0000012c
    3f70:	.word	0x00000480
    3f74:	.word	0x00000bd6
    3f78:	.word	0x00000000
    3f7c:	.word	0x000000e0
    3f80:	.word	0x00000bdb
    3f84:	.word	0x00000100

00003f88 <coda_cursor_read_uint16_array>:
    3f88:	push	{r4, r5, lr}
    3f8c:	subs	r5, r0, #0
    3f90:	sub	sp, sp, #12
    3f94:	beq	40d4 <coda_cursor_read_uint16_array+0x14c>
    3f98:	ldr	r3, [r5, #4]
    3f9c:	cmp	r3, #0
    3fa0:	ble	40d4 <coda_cursor_read_uint16_array+0x14c>
    3fa4:	add	r3, r5, r3, lsl #4
    3fa8:	ldr	r3, [r3, #-8]
    3fac:	cmp	r3, #0
    3fb0:	beq	40d4 <coda_cursor_read_uint16_array+0x14c>
    3fb4:	cmp	r1, #0
    3fb8:	mov	r4, r1
    3fbc:	beq	40f0 <coda_cursor_read_uint16_array+0x168>
    3fc0:	ldr	r1, [r3]
    3fc4:	cmp	r1, #99	; 0x63
    3fc8:	ldrhi	r3, [r3, #4]
    3fcc:	ldr	r0, [r3, #8]
    3fd0:	cmp	r0, #1
    3fd4:	bne	40b8 <coda_cursor_read_uint16_array+0x130>
    3fd8:	ldr	r1, [r3, #40]	; 0x28
    3fdc:	ldr	r3, [r1, #8]
    3fe0:	sub	r3, r3, #2
    3fe4:	cmp	r3, #1
    3fe8:	bls	401c <coda_cursor_read_uint16_array+0x94>
    3fec:	ldr	r0, [r1, #12]
    3ff0:	cmp	r0, #1
    3ff4:	beq	4064 <coda_cursor_read_uint16_array+0xdc>
    3ff8:	cmp	r0, #3
    3ffc:	bne	4044 <coda_cursor_read_uint16_array+0xbc>
    4000:	mov	r1, r4
    4004:	mov	r0, r5
    4008:	bl	d08 <read_uint16_array>
    400c:	adds	r0, r0, #0
    4010:	mvnne	r0, #0
    4014:	add	sp, sp, #12
    4018:	pop	{r4, r5, pc}
    401c:	ldr	r3, [pc, #232]	; 410c <coda_cursor_read_uint16_array+0x184>
    4020:	bl	0 <__aeabi_read_tp>
    4024:	ldr	r3, [pc, r3]
    4028:	ldr	r3, [r0, r3]
    402c:	cmp	r3, #0
    4030:	beq	3fec <coda_cursor_read_uint16_array+0x64>
    4034:	ldr	r3, [r1, #48]	; 0x30
    4038:	cmp	r3, #0
    403c:	movne	r0, #9
    4040:	beq	3fec <coda_cursor_read_uint16_array+0x64>
    4044:	bl	0 <coda_type_get_native_type_name>
    4048:	ldr	r1, [pc, #192]	; 4110 <coda_cursor_read_uint16_array+0x188>
    404c:	mov	r2, r0
    4050:	mvn	r0, #104	; 0x68
    4054:	bl	0 <coda_set_error>
    4058:	mvn	r0, #0
    405c:	add	sp, sp, #12
    4060:	pop	{r4, r5, pc}
    4064:	mov	r1, r4
    4068:	mov	r0, r5
    406c:	bl	b18 <read_uint8_array>
    4070:	cmp	r0, #0
    4074:	bne	4058 <coda_cursor_read_uint16_array+0xd0>
    4078:	mov	r0, r5
    407c:	add	r1, sp, #4
    4080:	bl	0 <coda_cursor_get_num_elements>
    4084:	cmp	r0, #0
    4088:	bne	4058 <coda_cursor_read_uint16_array+0xd0>
    408c:	ldr	r2, [sp, #4]
    4090:	cmp	r2, #0
    4094:	ble	4014 <coda_cursor_read_uint16_array+0x8c>
    4098:	add	r3, r4, r2
    409c:	add	r2, r3, r2
    40a0:	ldrb	r1, [r3, #-1]!
    40a4:	cmp	r3, r4
    40a8:	strh	r1, [r2, #-2]!
    40ac:	bne	40a0 <coda_cursor_read_uint16_array+0x118>
    40b0:	add	sp, sp, #12
    40b4:	pop	{r4, r5, pc}
    40b8:	bl	0 <coda_type_get_class_name>
    40bc:	ldr	r1, [pc, #80]	; 4114 <coda_cursor_read_uint16_array+0x18c>
    40c0:	mov	r2, r0
    40c4:	mvn	r0, #104	; 0x68
    40c8:	bl	0 <coda_set_error>
    40cc:	mvn	r0, #0
    40d0:	b	4014 <coda_cursor_read_uint16_array+0x8c>
    40d4:	mvn	r0, #99	; 0x63
    40d8:	mov	r3, #3120	; 0xc30
    40dc:	ldr	r2, [pc, #52]	; 4118 <coda_cursor_read_uint16_array+0x190>
    40e0:	ldr	r1, [pc, #52]	; 411c <coda_cursor_read_uint16_array+0x194>
    40e4:	bl	0 <coda_set_error>
    40e8:	mvn	r0, #0
    40ec:	b	4014 <coda_cursor_read_uint16_array+0x8c>
    40f0:	mvn	r0, #99	; 0x63
    40f4:	ldr	r3, [pc, #36]	; 4120 <coda_cursor_read_uint16_array+0x198>
    40f8:	ldr	r2, [pc, #24]	; 4118 <coda_cursor_read_uint16_array+0x190>
    40fc:	ldr	r1, [pc, #32]	; 4124 <coda_cursor_read_uint16_array+0x19c>
    4100:	bl	0 <coda_set_error>
    4104:	mvn	r0, #0
    4108:	b	4014 <coda_cursor_read_uint16_array+0x8c>
    410c:	.word	0x000000e0
    4110:	.word	0x000001ac
    4114:	.word	0x00000480
    4118:	.word	0x00000000
    411c:	.word	0x000000e0
    4120:	.word	0x00000c35
    4124:	.word	0x00000100

00004128 <coda_cursor_read_int32_array>:
    4128:	push	{r4, r5, lr}
    412c:	subs	r5, r0, #0
    4130:	sub	sp, sp, #12
    4134:	beq	4384 <coda_cursor_read_int32_array+0x25c>
    4138:	ldr	r3, [r5, #4]
    413c:	cmp	r3, #0
    4140:	ble	4384 <coda_cursor_read_int32_array+0x25c>
    4144:	add	r3, r5, r3, lsl #4
    4148:	ldr	r3, [r3, #-8]
    414c:	cmp	r3, #0
    4150:	beq	4384 <coda_cursor_read_int32_array+0x25c>
    4154:	cmp	r1, #0
    4158:	mov	r4, r1
    415c:	beq	43a0 <coda_cursor_read_int32_array+0x278>
    4160:	ldr	r1, [r3]
    4164:	cmp	r1, #99	; 0x63
    4168:	ldrhi	r3, [r3, #4]
    416c:	ldr	r0, [r3, #8]
    4170:	cmp	r0, #1
    4174:	bne	4368 <coda_cursor_read_int32_array+0x240>
    4178:	ldr	r1, [r3, #40]	; 0x28
    417c:	ldr	r3, [r1, #8]
    4180:	sub	r3, r3, #2
    4184:	cmp	r3, #1
    4188:	bls	41b0 <coda_cursor_read_int32_array+0x88>
    418c:	ldr	r0, [r1, #12]
    4190:	cmp	r0, #4
    4194:	ldrls	pc, [pc, r0, lsl #2]
    4198:	b	41d8 <coda_cursor_read_int32_array+0xb0>
    419c:	.word	0x00004214
    41a0:	.word	0x0000426c
    41a4:	.word	0x000042c0
    41a8:	.word	0x00004314
    41ac:	.word	0x000041f8
    41b0:	ldr	r3, [pc, #516]	; 43bc <coda_cursor_read_int32_array+0x294>
    41b4:	bl	0 <__aeabi_read_tp>
    41b8:	ldr	r3, [pc, r3]
    41bc:	ldr	r3, [r0, r3]
    41c0:	cmp	r3, #0
    41c4:	beq	418c <coda_cursor_read_int32_array+0x64>
    41c8:	ldr	r3, [r1, #48]	; 0x30
    41cc:	cmp	r3, #0
    41d0:	movne	r0, #9
    41d4:	beq	418c <coda_cursor_read_int32_array+0x64>
    41d8:	bl	0 <coda_type_get_native_type_name>
    41dc:	ldr	r1, [pc, #476]	; 43c0 <coda_cursor_read_int32_array+0x298>
    41e0:	mov	r2, r0
    41e4:	mvn	r0, #104	; 0x68
    41e8:	bl	0 <coda_set_error>
    41ec:	mvn	r0, #0
    41f0:	add	sp, sp, #12
    41f4:	pop	{r4, r5, pc}
    41f8:	mov	r1, r4
    41fc:	mov	r0, r5
    4200:	bl	df4 <read_int32_array>
    4204:	adds	r0, r0, #0
    4208:	mvnne	r0, #0
    420c:	add	sp, sp, #12
    4210:	pop	{r4, r5, pc}
    4214:	mov	r1, r4
    4218:	mov	r0, r5
    421c:	bl	a14 <read_int8_array>
    4220:	cmp	r0, #0
    4224:	bne	41ec <coda_cursor_read_int32_array+0xc4>
    4228:	mov	r0, r5
    422c:	add	r1, sp, #4
    4230:	bl	0 <coda_cursor_get_num_elements>
    4234:	cmp	r0, #0
    4238:	bne	41ec <coda_cursor_read_int32_array+0xc4>
    423c:	ldr	r2, [sp, #4]
    4240:	cmp	r2, #0
    4244:	addgt	r3, r4, r2
    4248:	addgt	r2, r4, r2, lsl #2
    424c:	ble	4260 <coda_cursor_read_int32_array+0x138>
    4250:	ldrsb	r1, [r3, #-1]!
    4254:	cmp	r4, r3
    4258:	str	r1, [r2, #-4]!
    425c:	bne	4250 <coda_cursor_read_int32_array+0x128>
    4260:	mov	r0, #0
    4264:	add	sp, sp, #12
    4268:	pop	{r4, r5, pc}
    426c:	mov	r1, r4
    4270:	mov	r0, r5
    4274:	bl	b18 <read_uint8_array>
    4278:	cmp	r0, #0
    427c:	bne	41ec <coda_cursor_read_int32_array+0xc4>
    4280:	mov	r0, r5
    4284:	add	r1, sp, #4
    4288:	bl	0 <coda_cursor_get_num_elements>
    428c:	cmp	r0, #0
    4290:	bne	41ec <coda_cursor_read_int32_array+0xc4>
    4294:	ldr	r2, [sp, #4]
    4298:	cmp	r2, #0
    429c:	ble	4260 <coda_cursor_read_int32_array+0x138>
    42a0:	add	r3, r4, r2
    42a4:	add	r2, r4, r2, lsl #2
    42a8:	ldrb	r1, [r3, #-1]!
    42ac:	cmp	r4, r3
    42b0:	str	r1, [r2, #-4]!
    42b4:	bne	42a8 <coda_cursor_read_int32_array+0x180>
    42b8:	mov	r0, #0
    42bc:	b	4264 <coda_cursor_read_int32_array+0x13c>
    42c0:	mov	r1, r4
    42c4:	mov	r0, r5
    42c8:	bl	c08 <read_int16_array>
    42cc:	cmp	r0, #0
    42d0:	bne	41ec <coda_cursor_read_int32_array+0xc4>
    42d4:	mov	r0, r5
    42d8:	add	r1, sp, #4
    42dc:	bl	0 <coda_cursor_get_num_elements>
    42e0:	cmp	r0, #0
    42e4:	bne	41ec <coda_cursor_read_int32_array+0xc4>
    42e8:	ldr	r2, [sp, #4]
    42ec:	cmp	r2, #0
    42f0:	ble	4260 <coda_cursor_read_int32_array+0x138>
    42f4:	add	r3, r4, r2, lsl #1
    42f8:	add	r2, r4, r2, lsl #2
    42fc:	ldrsh	r1, [r3, #-2]!
    4300:	cmp	r3, r4
    4304:	str	r1, [r2, #-4]!
    4308:	bne	42fc <coda_cursor_read_int32_array+0x1d4>
    430c:	mov	r0, #0
    4310:	b	4264 <coda_cursor_read_int32_array+0x13c>
    4314:	mov	r1, r4
    4318:	mov	r0, r5
    431c:	bl	d08 <read_uint16_array>
    4320:	cmp	r0, #0
    4324:	bne	41ec <coda_cursor_read_int32_array+0xc4>
    4328:	mov	r0, r5
    432c:	add	r1, sp, #4
    4330:	bl	0 <coda_cursor_get_num_elements>
    4334:	cmp	r0, #0
    4338:	bne	41ec <coda_cursor_read_int32_array+0xc4>
    433c:	ldr	r2, [sp, #4]
    4340:	cmp	r2, #0
    4344:	ble	4260 <coda_cursor_read_int32_array+0x138>
    4348:	add	r3, r4, r2, lsl #1
    434c:	add	r2, r4, r2, lsl #2
    4350:	ldrh	r1, [r3, #-2]!
    4354:	cmp	r3, r4
    4358:	str	r1, [r2, #-4]!
    435c:	bne	4350 <coda_cursor_read_int32_array+0x228>
    4360:	mov	r0, #0
    4364:	b	4264 <coda_cursor_read_int32_array+0x13c>
    4368:	bl	0 <coda_type_get_class_name>
    436c:	ldr	r1, [pc, #80]	; 43c4 <coda_cursor_read_int32_array+0x29c>
    4370:	mov	r2, r0
    4374:	mvn	r0, #104	; 0x68
    4378:	bl	0 <coda_set_error>
    437c:	mvn	r0, #0
    4380:	b	420c <coda_cursor_read_int32_array+0xe4>
    4384:	mvn	r0, #99	; 0x63
    4388:	ldr	r3, [pc, #56]	; 43c8 <coda_cursor_read_int32_array+0x2a0>
    438c:	ldr	r2, [pc, #56]	; 43cc <coda_cursor_read_int32_array+0x2a4>
    4390:	ldr	r1, [pc, #56]	; 43d0 <coda_cursor_read_int32_array+0x2a8>
    4394:	bl	0 <coda_set_error>
    4398:	mvn	r0, #0
    439c:	b	420c <coda_cursor_read_int32_array+0xe4>
    43a0:	mvn	r0, #99	; 0x63
    43a4:	ldr	r3, [pc, #40]	; 43d4 <coda_cursor_read_int32_array+0x2ac>
    43a8:	ldr	r2, [pc, #28]	; 43cc <coda_cursor_read_int32_array+0x2a4>
    43ac:	ldr	r1, [pc, #36]	; 43d8 <coda_cursor_read_int32_array+0x2b0>
    43b0:	bl	0 <coda_set_error>
    43b4:	mvn	r0, #0
    43b8:	b	420c <coda_cursor_read_int32_array+0xe4>
    43bc:	.word	0x000001fc
    43c0:	.word	0x000001dc
    43c4:	.word	0x00000480
    43c8:	.word	0x00000c7f
    43cc:	.word	0x00000000
    43d0:	.word	0x000000e0
    43d4:	.word	0x00000c84
    43d8:	.word	0x00000100

000043dc <coda_cursor_read_uint32_array>:
    43dc:	push	{r4, r5, lr}
    43e0:	subs	r5, r0, #0
    43e4:	sub	sp, sp, #12
    43e8:	beq	4598 <coda_cursor_read_uint32_array+0x1bc>
    43ec:	ldr	r3, [r5, #4]
    43f0:	cmp	r3, #0
    43f4:	ble	4598 <coda_cursor_read_uint32_array+0x1bc>
    43f8:	add	r3, r5, r3, lsl #4
    43fc:	ldr	r3, [r3, #-8]
    4400:	cmp	r3, #0
    4404:	beq	4598 <coda_cursor_read_uint32_array+0x1bc>
    4408:	cmp	r1, #0
    440c:	mov	r4, r1
    4410:	beq	45b4 <coda_cursor_read_uint32_array+0x1d8>
    4414:	ldr	r1, [r3]
    4418:	cmp	r1, #99	; 0x63
    441c:	ldrhi	r3, [r3, #4]
    4420:	ldr	r0, [r3, #8]
    4424:	cmp	r0, #1
    4428:	bne	457c <coda_cursor_read_uint32_array+0x1a0>
    442c:	ldr	r1, [r3, #40]	; 0x28
    4430:	ldr	r3, [r1, #8]
    4434:	sub	r3, r3, #2
    4438:	cmp	r3, #1
    443c:	bls	4498 <coda_cursor_read_uint32_array+0xbc>
    4440:	ldr	r0, [r1, #12]
    4444:	cmp	r0, #3
    4448:	beq	44c4 <coda_cursor_read_uint32_array+0xe8>
    444c:	cmp	r0, #5
    4450:	beq	447c <coda_cursor_read_uint32_array+0xa0>
    4454:	cmp	r0, #1
    4458:	beq	451c <coda_cursor_read_uint32_array+0x140>
    445c:	bl	0 <coda_type_get_native_type_name>
    4460:	ldr	r1, [pc, #360]	; 45d0 <coda_cursor_read_uint32_array+0x1f4>
    4464:	mov	r2, r0
    4468:	mvn	r0, #104	; 0x68
    446c:	bl	0 <coda_set_error>
    4470:	mvn	r0, #0
    4474:	add	sp, sp, #12
    4478:	pop	{r4, r5, pc}
    447c:	mov	r1, r4
    4480:	mov	r0, r5
    4484:	bl	ef8 <read_uint32_array>
    4488:	adds	r0, r0, #0
    448c:	mvnne	r0, #0
    4490:	add	sp, sp, #12
    4494:	pop	{r4, r5, pc}
    4498:	ldr	r3, [pc, #308]	; 45d4 <coda_cursor_read_uint32_array+0x1f8>
    449c:	bl	0 <__aeabi_read_tp>
    44a0:	ldr	r3, [pc, r3]
    44a4:	ldr	r3, [r0, r3]
    44a8:	cmp	r3, #0
    44ac:	beq	4440 <coda_cursor_read_uint32_array+0x64>
    44b0:	ldr	r3, [r1, #48]	; 0x30
    44b4:	cmp	r3, #0
    44b8:	movne	r0, #9
    44bc:	bne	445c <coda_cursor_read_uint32_array+0x80>
    44c0:	b	4440 <coda_cursor_read_uint32_array+0x64>
    44c4:	mov	r1, r4
    44c8:	mov	r0, r5
    44cc:	bl	d08 <read_uint16_array>
    44d0:	cmp	r0, #0
    44d4:	bne	4470 <coda_cursor_read_uint32_array+0x94>
    44d8:	mov	r0, r5
    44dc:	add	r1, sp, #4
    44e0:	bl	0 <coda_cursor_get_num_elements>
    44e4:	cmp	r0, #0
    44e8:	bne	4470 <coda_cursor_read_uint32_array+0x94>
    44ec:	ldr	r2, [sp, #4]
    44f0:	cmp	r2, #0
    44f4:	ble	4510 <coda_cursor_read_uint32_array+0x134>
    44f8:	add	r3, r4, r2, lsl #1
    44fc:	add	r2, r4, r2, lsl #2
    4500:	ldrh	r1, [r3, #-2]!
    4504:	cmp	r3, r4
    4508:	str	r1, [r2, #-4]!
    450c:	bne	4500 <coda_cursor_read_uint32_array+0x124>
    4510:	mov	r0, #0
    4514:	add	sp, sp, #12
    4518:	pop	{r4, r5, pc}
    451c:	mov	r1, r4
    4520:	mov	r0, r5
    4524:	bl	b18 <read_uint8_array>
    4528:	cmp	r0, #0
    452c:	bne	4470 <coda_cursor_read_uint32_array+0x94>
    4530:	mov	r0, r5
    4534:	add	r1, sp, #4
    4538:	bl	0 <coda_cursor_get_num_elements>
    453c:	cmp	r0, #0
    4540:	bne	4470 <coda_cursor_read_uint32_array+0x94>
    4544:	ldr	r2, [sp, #4]
    4548:	cmp	r2, #0
    454c:	addgt	r3, r4, r2
    4550:	addgt	r2, r4, r2, lsl #2
    4554:	ble	4510 <coda_cursor_read_uint32_array+0x134>
    4558:	ldrb	r1, [r3, #-1]!
    455c:	cmp	r4, r3
    4560:	str	r1, [r2, #-4]!
    4564:	beq	4510 <coda_cursor_read_uint32_array+0x134>
    4568:	ldrb	r1, [r3, #-1]!
    456c:	cmp	r4, r3
    4570:	str	r1, [r2, #-4]!
    4574:	bne	4558 <coda_cursor_read_uint32_array+0x17c>
    4578:	b	4510 <coda_cursor_read_uint32_array+0x134>
    457c:	bl	0 <coda_type_get_class_name>
    4580:	ldr	r1, [pc, #80]	; 45d8 <coda_cursor_read_uint32_array+0x1fc>
    4584:	mov	r2, r0
    4588:	mvn	r0, #104	; 0x68
    458c:	bl	0 <coda_set_error>
    4590:	mvn	r0, #0
    4594:	b	4474 <coda_cursor_read_uint32_array+0x98>
    4598:	mvn	r0, #99	; 0x63
    459c:	ldr	r3, [pc, #56]	; 45dc <coda_cursor_read_uint32_array+0x200>
    45a0:	ldr	r2, [pc, #56]	; 45e0 <coda_cursor_read_uint32_array+0x204>
    45a4:	ldr	r1, [pc, #56]	; 45e4 <coda_cursor_read_uint32_array+0x208>
    45a8:	bl	0 <coda_set_error>
    45ac:	mvn	r0, #0
    45b0:	b	4474 <coda_cursor_read_uint32_array+0x98>
    45b4:	mvn	r0, #99	; 0x63
    45b8:	ldr	r3, [pc, #40]	; 45e8 <coda_cursor_read_uint32_array+0x20c>
    45bc:	ldr	r2, [pc, #28]	; 45e0 <coda_cursor_read_uint32_array+0x204>
    45c0:	ldr	r1, [pc, #36]	; 45ec <coda_cursor_read_uint32_array+0x210>
    45c4:	bl	0 <coda_set_error>
    45c8:	mvn	r0, #0
    45cc:	b	4474 <coda_cursor_read_uint32_array+0x98>
    45d0:	.word	0x0000020c
    45d4:	.word	0x0000012c
    45d8:	.word	0x00000480
    45dc:	.word	0x00000cf6
    45e0:	.word	0x00000000
    45e4:	.word	0x000000e0
    45e8:	.word	0x00000cfb
    45ec:	.word	0x00000100

000045f0 <coda_cursor_read_int64_array>:
    45f0:	push	{r4, r5, lr}
    45f4:	subs	r5, r0, #0
    45f8:	sub	sp, sp, #12
    45fc:	beq	4900 <coda_cursor_read_int64_array+0x310>
    4600:	ldr	r3, [r5, #4]
    4604:	cmp	r3, #0
    4608:	ble	4900 <coda_cursor_read_int64_array+0x310>
    460c:	add	r3, r5, r3, lsl #4
    4610:	ldr	r3, [r3, #-8]
    4614:	cmp	r3, #0
    4618:	beq	4900 <coda_cursor_read_int64_array+0x310>
    461c:	cmp	r1, #0
    4620:	mov	r4, r1
    4624:	beq	491c <coda_cursor_read_int64_array+0x32c>
    4628:	ldr	r1, [r3]
    462c:	cmp	r1, #99	; 0x63
    4630:	ldrhi	r3, [r3, #4]
    4634:	ldr	r0, [r3, #8]
    4638:	cmp	r0, #1
    463c:	bne	48e4 <coda_cursor_read_int64_array+0x2f4>
    4640:	ldr	r1, [r3, #40]	; 0x28
    4644:	ldr	r3, [r1, #8]
    4648:	sub	r3, r3, #2
    464c:	cmp	r3, #1
    4650:	bls	4680 <coda_cursor_read_int64_array+0x90>
    4654:	ldr	r0, [r1, #12]
    4658:	cmp	r0, #6
    465c:	ldrls	pc, [pc, r0, lsl #2]
    4660:	b	46a8 <coda_cursor_read_int64_array+0xb8>
    4664:	.word	0x00004890
    4668:	.word	0x000046c8
    466c:	.word	0x00004724
    4670:	.word	0x00004778
    4674:	.word	0x000047cc
    4678:	.word	0x00004820
    467c:	.word	0x00004874
    4680:	ldr	r3, [pc, #688]	; 4938 <coda_cursor_read_int64_array+0x348>
    4684:	bl	0 <__aeabi_read_tp>
    4688:	ldr	r3, [pc, r3]
    468c:	ldr	r3, [r0, r3]
    4690:	cmp	r3, #0
    4694:	beq	4654 <coda_cursor_read_int64_array+0x64>
    4698:	ldr	r3, [r1, #48]	; 0x30
    469c:	cmp	r3, #0
    46a0:	movne	r0, #9
    46a4:	beq	4654 <coda_cursor_read_int64_array+0x64>
    46a8:	bl	0 <coda_type_get_native_type_name>
    46ac:	ldr	r1, [pc, #648]	; 493c <coda_cursor_read_int64_array+0x34c>
    46b0:	mov	r2, r0
    46b4:	mvn	r0, #104	; 0x68
    46b8:	bl	0 <coda_set_error>
    46bc:	mvn	r0, #0
    46c0:	add	sp, sp, #12
    46c4:	pop	{r4, r5, pc}
    46c8:	mov	r1, r4
    46cc:	mov	r0, r5
    46d0:	bl	b18 <read_uint8_array>
    46d4:	cmp	r0, #0
    46d8:	bne	46bc <coda_cursor_read_int64_array+0xcc>
    46dc:	mov	r0, r5
    46e0:	add	r1, sp, #4
    46e4:	bl	0 <coda_cursor_get_num_elements>
    46e8:	cmp	r0, #0
    46ec:	bne	46bc <coda_cursor_read_int64_array+0xcc>
    46f0:	ldr	r2, [sp, #4]
    46f4:	cmp	r2, #0
    46f8:	ble	4718 <coda_cursor_read_int64_array+0x128>
    46fc:	add	r3, r4, r2
    4700:	add	r2, r4, r2, lsl #3
    4704:	ldrb	r0, [r3, #-1]!
    4708:	mov	r1, #0
    470c:	cmp	r4, r3
    4710:	strd	r0, [r2, #-8]!
    4714:	bne	4704 <coda_cursor_read_int64_array+0x114>
    4718:	mov	r0, #0
    471c:	add	sp, sp, #12
    4720:	pop	{r4, r5, pc}
    4724:	mov	r1, r4
    4728:	mov	r0, r5
    472c:	bl	c08 <read_int16_array>
    4730:	cmp	r0, #0
    4734:	bne	46bc <coda_cursor_read_int64_array+0xcc>
    4738:	mov	r0, r5
    473c:	add	r1, sp, #4
    4740:	bl	0 <coda_cursor_get_num_elements>
    4744:	cmp	r0, #0
    4748:	bne	46bc <coda_cursor_read_int64_array+0xcc>
    474c:	ldr	r2, [sp, #4]
    4750:	cmp	r2, #0
    4754:	ble	4718 <coda_cursor_read_int64_array+0x128>
    4758:	add	r3, r4, r2, lsl #1
    475c:	add	r2, r4, r2, lsl #3
    4760:	ldrsh	r0, [r3, #-2]!
    4764:	cmp	r4, r3
    4768:	asr	r1, r0, #31
    476c:	strd	r0, [r2, #-8]!
    4770:	bne	4760 <coda_cursor_read_int64_array+0x170>
    4774:	b	4718 <coda_cursor_read_int64_array+0x128>
    4778:	mov	r1, r4
    477c:	mov	r0, r5
    4780:	bl	d08 <read_uint16_array>
    4784:	cmp	r0, #0
    4788:	bne	46bc <coda_cursor_read_int64_array+0xcc>
    478c:	mov	r0, r5
    4790:	add	r1, sp, #4
    4794:	bl	0 <coda_cursor_get_num_elements>
    4798:	cmp	r0, #0
    479c:	bne	46bc <coda_cursor_read_int64_array+0xcc>
    47a0:	ldr	r2, [sp, #4]
    47a4:	cmp	r2, #0
    47a8:	ble	4718 <coda_cursor_read_int64_array+0x128>
    47ac:	add	r3, r4, r2, lsl #1
    47b0:	add	r2, r4, r2, lsl #3
    47b4:	ldrh	r0, [r3, #-2]!
    47b8:	mov	r1, #0
    47bc:	cmp	r3, r4
    47c0:	strd	r0, [r2, #-8]!
    47c4:	bne	47b4 <coda_cursor_read_int64_array+0x1c4>
    47c8:	b	4718 <coda_cursor_read_int64_array+0x128>
    47cc:	mov	r1, r4
    47d0:	mov	r0, r5
    47d4:	bl	df4 <read_int32_array>
    47d8:	cmp	r0, #0
    47dc:	bne	46bc <coda_cursor_read_int64_array+0xcc>
    47e0:	mov	r0, r5
    47e4:	add	r1, sp, #4
    47e8:	bl	0 <coda_cursor_get_num_elements>
    47ec:	cmp	r0, #0
    47f0:	bne	46bc <coda_cursor_read_int64_array+0xcc>
    47f4:	ldr	r0, [sp, #4]
    47f8:	cmp	r0, #0
    47fc:	ble	4718 <coda_cursor_read_int64_array+0x128>
    4800:	add	r1, r4, r0, lsl #2
    4804:	add	r0, r4, r0, lsl #3
    4808:	ldr	r2, [r1, #-4]!
    480c:	cmp	r1, r4
    4810:	asr	r3, r2, #31
    4814:	strd	r2, [r0, #-8]!
    4818:	bne	4808 <coda_cursor_read_int64_array+0x218>
    481c:	b	4718 <coda_cursor_read_int64_array+0x128>
    4820:	mov	r1, r4
    4824:	mov	r0, r5
    4828:	bl	ef8 <read_uint32_array>
    482c:	cmp	r0, #0
    4830:	bne	46bc <coda_cursor_read_int64_array+0xcc>
    4834:	mov	r0, r5
    4838:	add	r1, sp, #4
    483c:	bl	0 <coda_cursor_get_num_elements>
    4840:	cmp	r0, #0
    4844:	bne	46bc <coda_cursor_read_int64_array+0xcc>
    4848:	ldr	r3, [sp, #4]
    484c:	cmp	r3, #0
    4850:	ble	4718 <coda_cursor_read_int64_array+0x128>
    4854:	add	r2, r4, r3, lsl #2
    4858:	add	r3, r4, r3, lsl #3
    485c:	ldr	r1, [r2, #-4]!
    4860:	cmp	r2, r4
    4864:	str	r1, [r3, #-8]!
    4868:	str	r0, [r3, #4]
    486c:	bne	485c <coda_cursor_read_int64_array+0x26c>
    4870:	b	4718 <coda_cursor_read_int64_array+0x128>
    4874:	mov	r1, r4
    4878:	mov	r0, r5
    487c:	bl	fe8 <read_int64_array>
    4880:	adds	r0, r0, #0
    4884:	mvnne	r0, #0
    4888:	add	sp, sp, #12
    488c:	pop	{r4, r5, pc}
    4890:	mov	r1, r4
    4894:	mov	r0, r5
    4898:	bl	a14 <read_int8_array>
    489c:	cmp	r0, #0
    48a0:	bne	46bc <coda_cursor_read_int64_array+0xcc>
    48a4:	mov	r0, r5
    48a8:	add	r1, sp, #4
    48ac:	bl	0 <coda_cursor_get_num_elements>
    48b0:	cmp	r0, #0
    48b4:	bne	46bc <coda_cursor_read_int64_array+0xcc>
    48b8:	ldr	r2, [sp, #4]
    48bc:	cmp	r2, #0
    48c0:	addgt	r3, r4, r2
    48c4:	addgt	r2, r4, r2, lsl #3
    48c8:	ble	4718 <coda_cursor_read_int64_array+0x128>
    48cc:	ldrsb	r0, [r3, #-1]!
    48d0:	cmp	r4, r3
    48d4:	asr	r1, r0, #31
    48d8:	strd	r0, [r2, #-8]!
    48dc:	bne	48cc <coda_cursor_read_int64_array+0x2dc>
    48e0:	b	4718 <coda_cursor_read_int64_array+0x128>
    48e4:	bl	0 <coda_type_get_class_name>
    48e8:	ldr	r1, [pc, #80]	; 4940 <coda_cursor_read_int64_array+0x350>
    48ec:	mov	r2, r0
    48f0:	mvn	r0, #104	; 0x68
    48f4:	bl	0 <coda_set_error>
    48f8:	mvn	r0, #0
    48fc:	b	46c0 <coda_cursor_read_int64_array+0xd0>
    4900:	mvn	r0, #99	; 0x63
    4904:	ldr	r3, [pc, #56]	; 4944 <coda_cursor_read_int64_array+0x354>
    4908:	ldr	r2, [pc, #56]	; 4948 <coda_cursor_read_int64_array+0x358>
    490c:	ldr	r1, [pc, #56]	; 494c <coda_cursor_read_int64_array+0x35c>
    4910:	bl	0 <coda_set_error>
    4914:	mvn	r0, #0
    4918:	b	46c0 <coda_cursor_read_int64_array+0xd0>
    491c:	mvn	r0, #99	; 0x63
    4920:	ldr	r3, [pc, #40]	; 4950 <coda_cursor_read_int64_array+0x360>
    4924:	ldr	r2, [pc, #28]	; 4948 <coda_cursor_read_int64_array+0x358>
    4928:	ldr	r1, [pc, #36]	; 4954 <coda_cursor_read_int64_array+0x364>
    492c:	bl	0 <coda_set_error>
    4930:	mvn	r0, #0
    4934:	b	46c0 <coda_cursor_read_int64_array+0xd0>
    4938:	.word	0x000002a8
    493c:	.word	0x0000023c
    4940:	.word	0x00000480
    4944:	.word	0x00000d55
    4948:	.word	0x00000000
    494c:	.word	0x000000e0
    4950:	.word	0x00000d5a
    4954:	.word	0x00000100

00004958 <coda_cursor_read_uint64_array>:
    4958:	push	{r4, r5, lr}
    495c:	subs	r5, r0, #0
    4960:	sub	sp, sp, #12
    4964:	beq	4b78 <coda_cursor_read_uint64_array+0x220>
    4968:	ldr	r3, [r5, #4]
    496c:	cmp	r3, #0
    4970:	ble	4b78 <coda_cursor_read_uint64_array+0x220>
    4974:	add	r3, r5, r3, lsl #4
    4978:	ldr	r3, [r3, #-8]
    497c:	cmp	r3, #0
    4980:	beq	4b78 <coda_cursor_read_uint64_array+0x220>
    4984:	cmp	r1, #0
    4988:	mov	r4, r1
    498c:	beq	4b94 <coda_cursor_read_uint64_array+0x23c>
    4990:	ldr	r1, [r3]
    4994:	cmp	r1, #99	; 0x63
    4998:	ldrhi	r3, [r3, #4]
    499c:	ldr	r0, [r3, #8]
    49a0:	cmp	r0, #1
    49a4:	bne	4b5c <coda_cursor_read_uint64_array+0x204>
    49a8:	ldr	r1, [r3, #40]	; 0x28
    49ac:	ldr	r3, [r1, #8]
    49b0:	sub	r3, r3, #2
    49b4:	cmp	r3, #1
    49b8:	bls	49ec <coda_cursor_read_uint64_array+0x94>
    49bc:	ldr	r0, [r1, #12]
    49c0:	sub	r3, r0, #1
    49c4:	cmp	r3, #6
    49c8:	ldrls	pc, [pc, r3, lsl #2]
    49cc:	b	4a14 <coda_cursor_read_uint64_array+0xbc>
    49d0:	.word	0x00004a50
    49d4:	.word	0x00004a14
    49d8:	.word	0x00004aac
    49dc:	.word	0x00004a14
    49e0:	.word	0x00004b04
    49e4:	.word	0x00004a14
    49e8:	.word	0x00004a34
    49ec:	ldr	r3, [pc, #444]	; 4bb0 <coda_cursor_read_uint64_array+0x258>
    49f0:	bl	0 <__aeabi_read_tp>
    49f4:	ldr	r3, [pc, r3]
    49f8:	ldr	r3, [r0, r3]
    49fc:	cmp	r3, #0
    4a00:	beq	49bc <coda_cursor_read_uint64_array+0x64>
    4a04:	ldr	r3, [r1, #48]	; 0x30
    4a08:	cmp	r3, #0
    4a0c:	movne	r0, #9
    4a10:	beq	49bc <coda_cursor_read_uint64_array+0x64>
    4a14:	bl	0 <coda_type_get_native_type_name>
    4a18:	ldr	r1, [pc, #404]	; 4bb4 <coda_cursor_read_uint64_array+0x25c>
    4a1c:	mov	r2, r0
    4a20:	mvn	r0, #104	; 0x68
    4a24:	bl	0 <coda_set_error>
    4a28:	mvn	r0, #0
    4a2c:	add	sp, sp, #12
    4a30:	pop	{r4, r5, pc}
    4a34:	mov	r1, r4
    4a38:	mov	r0, r5
    4a3c:	bl	10d8 <read_uint64_array>
    4a40:	adds	r0, r0, #0
    4a44:	mvnne	r0, #0
    4a48:	add	sp, sp, #12
    4a4c:	pop	{r4, r5, pc}
    4a50:	mov	r1, r4
    4a54:	mov	r0, r5
    4a58:	bl	b18 <read_uint8_array>
    4a5c:	cmp	r0, #0
    4a60:	bne	4a28 <coda_cursor_read_uint64_array+0xd0>
    4a64:	mov	r0, r5
    4a68:	add	r1, sp, #4
    4a6c:	bl	0 <coda_cursor_get_num_elements>
    4a70:	cmp	r0, #0
    4a74:	bne	4a28 <coda_cursor_read_uint64_array+0xd0>
    4a78:	ldr	r2, [sp, #4]
    4a7c:	cmp	r2, #0
    4a80:	addgt	r3, r4, r2
    4a84:	addgt	r2, r4, r2, lsl #3
    4a88:	ble	4aa0 <coda_cursor_read_uint64_array+0x148>
    4a8c:	ldrb	r0, [r3, #-1]!
    4a90:	mov	r1, #0
    4a94:	cmp	r4, r3
    4a98:	strd	r0, [r2, #-8]!
    4a9c:	bne	4a8c <coda_cursor_read_uint64_array+0x134>
    4aa0:	mov	r0, #0
    4aa4:	add	sp, sp, #12
    4aa8:	pop	{r4, r5, pc}
    4aac:	mov	r1, r4
    4ab0:	mov	r0, r5
    4ab4:	bl	d08 <read_uint16_array>
    4ab8:	cmp	r0, #0
    4abc:	bne	4a28 <coda_cursor_read_uint64_array+0xd0>
    4ac0:	mov	r0, r5
    4ac4:	add	r1, sp, #4
    4ac8:	bl	0 <coda_cursor_get_num_elements>
    4acc:	cmp	r0, #0
    4ad0:	bne	4a28 <coda_cursor_read_uint64_array+0xd0>
    4ad4:	ldr	r2, [sp, #4]
    4ad8:	cmp	r2, #0
    4adc:	ble	4aa0 <coda_cursor_read_uint64_array+0x148>
    4ae0:	add	r3, r4, r2, lsl #1
    4ae4:	add	r2, r4, r2, lsl #3
    4ae8:	ldrh	r0, [r3, #-2]!
    4aec:	mov	r1, #0
    4af0:	cmp	r3, r4
    4af4:	strd	r0, [r2, #-8]!
    4af8:	bne	4ae8 <coda_cursor_read_uint64_array+0x190>
    4afc:	mov	r0, #0
    4b00:	b	4aa4 <coda_cursor_read_uint64_array+0x14c>
    4b04:	mov	r1, r4
    4b08:	mov	r0, r5
    4b0c:	bl	ef8 <read_uint32_array>
    4b10:	cmp	r0, #0
    4b14:	bne	4a28 <coda_cursor_read_uint64_array+0xd0>
    4b18:	mov	r0, r5
    4b1c:	add	r1, sp, #4
    4b20:	bl	0 <coda_cursor_get_num_elements>
    4b24:	cmp	r0, #0
    4b28:	bne	4a28 <coda_cursor_read_uint64_array+0xd0>
    4b2c:	ldr	r3, [sp, #4]
    4b30:	cmp	r3, #0
    4b34:	ble	4aa0 <coda_cursor_read_uint64_array+0x148>
    4b38:	add	r2, r4, r3, lsl #2
    4b3c:	add	r3, r4, r3, lsl #3
    4b40:	ldr	r1, [r2, #-4]!
    4b44:	cmp	r2, r4
    4b48:	str	r1, [r3, #-8]!
    4b4c:	str	r0, [r3, #4]
    4b50:	bne	4b40 <coda_cursor_read_uint64_array+0x1e8>
    4b54:	mov	r0, #0
    4b58:	b	4aa4 <coda_cursor_read_uint64_array+0x14c>
    4b5c:	bl	0 <coda_type_get_class_name>
    4b60:	ldr	r1, [pc, #80]	; 4bb8 <coda_cursor_read_uint64_array+0x260>
    4b64:	mov	r2, r0
    4b68:	mvn	r0, #104	; 0x68
    4b6c:	bl	0 <coda_set_error>
    4b70:	mvn	r0, #0
    4b74:	b	4a48 <coda_cursor_read_uint64_array+0xf0>
    4b78:	mvn	r0, #99	; 0x63
    4b7c:	ldr	r3, [pc, #56]	; 4bbc <coda_cursor_read_uint64_array+0x264>
    4b80:	ldr	r2, [pc, #56]	; 4bc0 <coda_cursor_read_uint64_array+0x268>
    4b84:	ldr	r1, [pc, #56]	; 4bc4 <coda_cursor_read_uint64_array+0x26c>
    4b88:	bl	0 <coda_set_error>
    4b8c:	mvn	r0, #0
    4b90:	b	4a48 <coda_cursor_read_uint64_array+0xf0>
    4b94:	mvn	r0, #99	; 0x63
    4b98:	ldr	r3, [pc, #40]	; 4bc8 <coda_cursor_read_uint64_array+0x270>
    4b9c:	ldr	r2, [pc, #28]	; 4bc0 <coda_cursor_read_uint64_array+0x268>
    4ba0:	ldr	r1, [pc, #36]	; 4bcc <coda_cursor_read_uint64_array+0x274>
    4ba4:	bl	0 <coda_set_error>
    4ba8:	mvn	r0, #0
    4bac:	b	4a48 <coda_cursor_read_uint64_array+0xf0>
    4bb0:	.word	0x000001b4
    4bb4:	.word	0x0000026c
    4bb8:	.word	0x00000480
    4bbc:	.word	0x00000de9
    4bc0:	.word	0x00000000
    4bc4:	.word	0x000000e0
    4bc8:	.word	0x00000dee
    4bcc:	.word	0x00000100

00004bd0 <coda_cursor_read_double_array>:
    4bd0:	push	{r4, r5, r6, r7, lr}
    4bd4:	subs	r6, r0, #0
    4bd8:	sub	sp, sp, #12
    4bdc:	beq	5070 <coda_cursor_read_double_array+0x4a0>
    4be0:	ldr	r3, [r6, #4]
    4be4:	cmp	r3, #0
    4be8:	ble	5070 <coda_cursor_read_double_array+0x4a0>
    4bec:	add	r3, r6, r3, lsl #4
    4bf0:	ldr	r3, [r3, #-8]
    4bf4:	cmp	r3, #0
    4bf8:	beq	5070 <coda_cursor_read_double_array+0x4a0>
    4bfc:	cmp	r1, #0
    4c00:	mov	r4, r1
    4c04:	beq	508c <coda_cursor_read_double_array+0x4bc>
    4c08:	ldr	r1, [r3]
    4c0c:	cmp	r1, #99	; 0x63
    4c10:	ldrhi	r3, [r3, #4]
    4c14:	ldr	r0, [r3, #8]
    4c18:	cmp	r0, #1
    4c1c:	bne	5054 <coda_cursor_read_double_array+0x484>
    4c20:	ldr	r1, [r3, #40]	; 0x28
    4c24:	ldr	r3, [r1, #8]
    4c28:	ldr	r7, [r1, #12]
    4c2c:	sub	r3, r3, #2
    4c30:	cmp	r3, #1
    4c34:	movhi	r5, #0
    4c38:	bls	4c70 <coda_cursor_read_double_array+0xa0>
    4c3c:	cmp	r7, #9
    4c40:	ldrls	pc, [pc, r7, lsl #2]
    4c44:	b	5030 <coda_cursor_read_double_array+0x460>
    4c48:	.word	0x00004d34
    4c4c:	.word	0x00004d8c
    4c50:	.word	0x00004de4
    4c54:	.word	0x00004e3c
    4c58:	.word	0x00004e94
    4c5c:	.word	0x00004ee8
    4c60:	.word	0x00004f3c
    4c64:	.word	0x00004f8c
    4c68:	.word	0x00004fdc
    4c6c:	.word	0x00004c8c
    4c70:	ldr	r3, [pc, #1072]	; 50a8 <coda_cursor_read_double_array+0x4d8>
    4c74:	bl	0 <__aeabi_read_tp>
    4c78:	ldr	r3, [pc, r3]
    4c7c:	ldr	r5, [r0, r3]
    4c80:	cmp	r5, #0
    4c84:	ldrne	r5, [r1, #48]	; 0x30
    4c88:	b	4c3c <coda_cursor_read_double_array+0x6c>
    4c8c:	mov	r1, r4
    4c90:	mov	r0, r6
    4c94:	bl	14d8 <read_double_array>
    4c98:	cmp	r0, #0
    4c9c:	bne	5048 <coda_cursor_read_double_array+0x478>
    4ca0:	cmp	r5, #0
    4ca4:	beq	4d28 <coda_cursor_read_double_array+0x158>
    4ca8:	mov	r0, r6
    4cac:	add	r1, sp, #4
    4cb0:	bl	0 <coda_cursor_get_num_elements>
    4cb4:	subs	r6, r0, #0
    4cb8:	bne	5048 <coda_cursor_read_double_array+0x478>
    4cbc:	ldr	r3, [sp, #4]
    4cc0:	cmp	r3, #0
    4cc4:	bgt	4cf8 <coda_cursor_read_double_array+0x128>
    4cc8:	b	4d28 <coda_cursor_read_double_array+0x158>
    4ccc:	vldr	d6, [r5]
    4cd0:	vldr	d4, [r5, #8]
    4cd4:	vldr	d5, [r5, #16]
    4cd8:	add	r6, r6, #1
    4cdc:	vmul.f64	d7, d7, d6
    4ce0:	cmp	r3, r6
    4ce4:	add	r4, r4, #8
    4ce8:	vdiv.f64	d6, d7, d4
    4cec:	vadd.f64	d6, d6, d5
    4cf0:	vstr	d6, [r4, #-8]
    4cf4:	ble	4d28 <coda_cursor_read_double_array+0x158>
    4cf8:	vldr	d7, [r4]
    4cfc:	vldr	d6, [r5, #24]
    4d00:	vcmp.f64	d7, d6
    4d04:	vmrs	APSR_nzcv, fpscr
    4d08:	bne	4ccc <coda_cursor_read_double_array+0xfc>
    4d0c:	bl	0 <coda_NaN>
    4d10:	ldr	r3, [sp, #4]
    4d14:	add	r6, r6, #1
    4d18:	cmp	r3, r6
    4d1c:	add	r4, r4, #8
    4d20:	vstr	d0, [r4, #-8]
    4d24:	bgt	4cf8 <coda_cursor_read_double_array+0x128>
    4d28:	mov	r0, #0
    4d2c:	add	sp, sp, #12
    4d30:	pop	{r4, r5, r6, r7, pc}
    4d34:	mov	r1, r4
    4d38:	mov	r0, r6
    4d3c:	bl	a14 <read_int8_array>
    4d40:	cmp	r0, #0
    4d44:	bne	5048 <coda_cursor_read_double_array+0x478>
    4d48:	add	r1, sp, #4
    4d4c:	mov	r0, r6
    4d50:	bl	0 <coda_cursor_get_num_elements>
    4d54:	cmp	r0, #0
    4d58:	bne	5048 <coda_cursor_read_double_array+0x478>
    4d5c:	ldr	r2, [sp, #4]
    4d60:	cmp	r2, #0
    4d64:	ble	4ca0 <coda_cursor_read_double_array+0xd0>
    4d68:	add	r3, r4, r2
    4d6c:	add	r2, r4, r2, lsl #3
    4d70:	ldrsb	r1, [r3, #-1]!
    4d74:	cmp	r4, r3
    4d78:	vmov	s14, r1
    4d7c:	vcvt.f64.s32	d7, s14
    4d80:	vstmdb	r2!, {d7}
    4d84:	bne	4d70 <coda_cursor_read_double_array+0x1a0>
    4d88:	b	4ca0 <coda_cursor_read_double_array+0xd0>
    4d8c:	mov	r1, r4
    4d90:	mov	r0, r6
    4d94:	bl	b18 <read_uint8_array>
    4d98:	cmp	r0, #0
    4d9c:	bne	5048 <coda_cursor_read_double_array+0x478>
    4da0:	add	r1, sp, #4
    4da4:	mov	r0, r6
    4da8:	bl	0 <coda_cursor_get_num_elements>
    4dac:	cmp	r0, #0
    4db0:	bne	5048 <coda_cursor_read_double_array+0x478>
    4db4:	ldr	r2, [sp, #4]
    4db8:	cmp	r2, #0
    4dbc:	ble	4ca0 <coda_cursor_read_double_array+0xd0>
    4dc0:	add	r3, r4, r2
    4dc4:	add	r2, r4, r2, lsl #3
    4dc8:	ldrb	r1, [r3, #-1]!
    4dcc:	cmp	r4, r3
    4dd0:	vmov	s14, r1
    4dd4:	vcvt.f64.u32	d7, s14
    4dd8:	vstmdb	r2!, {d7}
    4ddc:	bne	4dc8 <coda_cursor_read_double_array+0x1f8>
    4de0:	b	4ca0 <coda_cursor_read_double_array+0xd0>
    4de4:	mov	r1, r4
    4de8:	mov	r0, r6
    4dec:	bl	c08 <read_int16_array>
    4df0:	cmp	r0, #0
    4df4:	bne	5048 <coda_cursor_read_double_array+0x478>
    4df8:	add	r1, sp, #4
    4dfc:	mov	r0, r6
    4e00:	bl	0 <coda_cursor_get_num_elements>
    4e04:	cmp	r0, #0
    4e08:	bne	5048 <coda_cursor_read_double_array+0x478>
    4e0c:	ldr	r2, [sp, #4]
    4e10:	cmp	r2, #0
    4e14:	ble	4ca0 <coda_cursor_read_double_array+0xd0>
    4e18:	add	r3, r4, r2, lsl #1
    4e1c:	add	r2, r4, r2, lsl #3
    4e20:	ldrsh	r1, [r3, #-2]!
    4e24:	cmp	r4, r3
    4e28:	vmov	s14, r1
    4e2c:	vcvt.f64.s32	d7, s14
    4e30:	vstmdb	r2!, {d7}
    4e34:	bne	4e20 <coda_cursor_read_double_array+0x250>
    4e38:	b	4ca0 <coda_cursor_read_double_array+0xd0>
    4e3c:	mov	r1, r4
    4e40:	mov	r0, r6
    4e44:	bl	d08 <read_uint16_array>
    4e48:	cmp	r0, #0
    4e4c:	bne	5048 <coda_cursor_read_double_array+0x478>
    4e50:	add	r1, sp, #4
    4e54:	mov	r0, r6
    4e58:	bl	0 <coda_cursor_get_num_elements>
    4e5c:	cmp	r0, #0
    4e60:	bne	5048 <coda_cursor_read_double_array+0x478>
    4e64:	ldr	r2, [sp, #4]
    4e68:	cmp	r2, #0
    4e6c:	ble	4ca0 <coda_cursor_read_double_array+0xd0>
    4e70:	add	r3, r4, r2, lsl #1
    4e74:	add	r2, r4, r2, lsl #3
    4e78:	ldrh	r1, [r3, #-2]!
    4e7c:	cmp	r4, r3
    4e80:	vmov	s14, r1
    4e84:	vcvt.f64.u32	d7, s14
    4e88:	vstmdb	r2!, {d7}
    4e8c:	bne	4e78 <coda_cursor_read_double_array+0x2a8>
    4e90:	b	4ca0 <coda_cursor_read_double_array+0xd0>
    4e94:	mov	r1, r4
    4e98:	mov	r0, r6
    4e9c:	bl	df4 <read_int32_array>
    4ea0:	cmp	r0, #0
    4ea4:	bne	5048 <coda_cursor_read_double_array+0x478>
    4ea8:	add	r1, sp, #4
    4eac:	mov	r0, r6
    4eb0:	bl	0 <coda_cursor_get_num_elements>
    4eb4:	cmp	r0, #0
    4eb8:	bne	5048 <coda_cursor_read_double_array+0x478>
    4ebc:	ldr	r2, [sp, #4]
    4ec0:	cmp	r2, #0
    4ec4:	ble	4ca0 <coda_cursor_read_double_array+0xd0>
    4ec8:	add	r3, r4, r2, lsl #2
    4ecc:	add	r2, r4, r2, lsl #3
    4ed0:	vldmdb	r3!, {s14}
    4ed4:	vcvt.f64.s32	d7, s14
    4ed8:	cmp	r3, r4
    4edc:	vstmdb	r2!, {d7}
    4ee0:	bne	4ed0 <coda_cursor_read_double_array+0x300>
    4ee4:	b	4ca0 <coda_cursor_read_double_array+0xd0>
    4ee8:	mov	r1, r4
    4eec:	mov	r0, r6
    4ef0:	bl	ef8 <read_uint32_array>
    4ef4:	cmp	r0, #0
    4ef8:	bne	5048 <coda_cursor_read_double_array+0x478>
    4efc:	add	r1, sp, #4
    4f00:	mov	r0, r6
    4f04:	bl	0 <coda_cursor_get_num_elements>
    4f08:	cmp	r0, #0
    4f0c:	bne	5048 <coda_cursor_read_double_array+0x478>
    4f10:	ldr	r2, [sp, #4]
    4f14:	cmp	r2, #0
    4f18:	ble	4ca0 <coda_cursor_read_double_array+0xd0>
    4f1c:	add	r3, r4, r2, lsl #2
    4f20:	add	r2, r4, r2, lsl #3
    4f24:	vldmdb	r3!, {s14}
    4f28:	vcvt.f64.u32	d7, s14
    4f2c:	cmp	r3, r4
    4f30:	vstmdb	r2!, {d7}
    4f34:	bne	4f24 <coda_cursor_read_double_array+0x354>
    4f38:	b	4ca0 <coda_cursor_read_double_array+0xd0>
    4f3c:	mov	r1, r4
    4f40:	mov	r0, r6
    4f44:	bl	fe8 <read_int64_array>
    4f48:	cmp	r0, #0
    4f4c:	bne	5048 <coda_cursor_read_double_array+0x478>
    4f50:	add	r1, sp, #4
    4f54:	mov	r0, r6
    4f58:	bl	0 <coda_cursor_get_num_elements>
    4f5c:	cmp	r0, #0
    4f60:	bne	5048 <coda_cursor_read_double_array+0x478>
    4f64:	ldr	r7, [sp, #4]
    4f68:	cmp	r7, #0
    4f6c:	ble	4ca0 <coda_cursor_read_double_array+0xd0>
    4f70:	add	r7, r4, r7, lsl #3
    4f74:	ldrd	r0, [r7, #-8]
    4f78:	bl	0 <__aeabi_l2d>
    4f7c:	strd	r0, [r7, #-8]!
    4f80:	cmp	r7, r4
    4f84:	bne	4f74 <coda_cursor_read_double_array+0x3a4>
    4f88:	b	4ca0 <coda_cursor_read_double_array+0xd0>
    4f8c:	mov	r1, r4
    4f90:	mov	r0, r6
    4f94:	bl	10d8 <read_uint64_array>
    4f98:	cmp	r0, #0
    4f9c:	bne	5048 <coda_cursor_read_double_array+0x478>
    4fa0:	add	r1, sp, #4
    4fa4:	mov	r0, r6
    4fa8:	bl	0 <coda_cursor_get_num_elements>
    4fac:	cmp	r0, #0
    4fb0:	bne	5048 <coda_cursor_read_double_array+0x478>
    4fb4:	ldr	r7, [sp, #4]
    4fb8:	cmp	r7, #0
    4fbc:	ble	4ca0 <coda_cursor_read_double_array+0xd0>
    4fc0:	add	r7, r4, r7, lsl #3
    4fc4:	ldrd	r0, [r7, #-8]
    4fc8:	bl	0 <__aeabi_ul2d>
    4fcc:	strd	r0, [r7, #-8]!
    4fd0:	cmp	r7, r4
    4fd4:	bne	4fc4 <coda_cursor_read_double_array+0x3f4>
    4fd8:	b	4ca0 <coda_cursor_read_double_array+0xd0>
    4fdc:	mov	r1, r4
    4fe0:	mov	r0, r6
    4fe4:	bl	11b0 <read_float_array>
    4fe8:	cmp	r0, #0
    4fec:	bne	5048 <coda_cursor_read_double_array+0x478>
    4ff0:	add	r1, sp, #4
    4ff4:	mov	r0, r6
    4ff8:	bl	0 <coda_cursor_get_num_elements>
    4ffc:	cmp	r0, #0
    5000:	bne	5048 <coda_cursor_read_double_array+0x478>
    5004:	ldr	r2, [sp, #4]
    5008:	cmp	r2, #0
    500c:	ble	4ca0 <coda_cursor_read_double_array+0xd0>
    5010:	add	r3, r4, r2, lsl #2
    5014:	add	r2, r4, r2, lsl #3
    5018:	vldmdb	r3!, {s14}
    501c:	vcvt.f64.f32	d7, s14
    5020:	cmp	r3, r4
    5024:	vstmdb	r2!, {d7}
    5028:	bne	5018 <coda_cursor_read_double_array+0x448>
    502c:	b	4ca0 <coda_cursor_read_double_array+0xd0>
    5030:	mov	r0, r7
    5034:	bl	0 <coda_type_get_native_type_name>
    5038:	ldr	r1, [pc, #108]	; 50ac <coda_cursor_read_double_array+0x4dc>
    503c:	mov	r2, r0
    5040:	mvn	r0, #104	; 0x68
    5044:	bl	0 <coda_set_error>
    5048:	mvn	r0, #0
    504c:	add	sp, sp, #12
    5050:	pop	{r4, r5, r6, r7, pc}
    5054:	bl	0 <coda_type_get_class_name>
    5058:	ldr	r1, [pc, #80]	; 50b0 <coda_cursor_read_double_array+0x4e0>
    505c:	mov	r2, r0
    5060:	mvn	r0, #104	; 0x68
    5064:	bl	0 <coda_set_error>
    5068:	mvn	r0, #0
    506c:	b	4d2c <coda_cursor_read_double_array+0x15c>
    5070:	mvn	r0, #99	; 0x63
    5074:	ldr	r3, [pc, #56]	; 50b4 <coda_cursor_read_double_array+0x4e4>
    5078:	ldr	r2, [pc, #56]	; 50b8 <coda_cursor_read_double_array+0x4e8>
    507c:	ldr	r1, [pc, #56]	; 50bc <coda_cursor_read_double_array+0x4ec>
    5080:	bl	0 <coda_set_error>
    5084:	mvn	r0, #0
    5088:	b	4d2c <coda_cursor_read_double_array+0x15c>
    508c:	mvn	r0, #99	; 0x63
    5090:	ldr	r3, [pc, #40]	; 50c0 <coda_cursor_read_double_array+0x4f0>
    5094:	ldr	r2, [pc, #28]	; 50b8 <coda_cursor_read_double_array+0x4e8>
    5098:	ldr	r1, [pc, #36]	; 50c4 <coda_cursor_read_double_array+0x4f4>
    509c:	bl	0 <coda_set_error>
    50a0:	mvn	r0, #0
    50a4:	b	4d2c <coda_cursor_read_double_array+0x15c>
    50a8:	.word	0x00000428
    50ac:	.word	0x0000029c
    50b0:	.word	0x00000480
    50b4:	.word	0x00000f61
    50b8:	.word	0x00000000
    50bc:	.word	0x000000e0
    50c0:	.word	0x00000f66
    50c4:	.word	0x00000100

000050c8 <coda_cursor_read_float_array>:
    50c8:	push	{r4, r5, r6, r7, r8, lr}
    50cc:	subs	r6, r0, #0
    50d0:	sub	sp, sp, #16
    50d4:	beq	55e4 <coda_cursor_read_float_array+0x51c>
    50d8:	ldr	r3, [r6, #4]
    50dc:	cmp	r3, #0
    50e0:	ble	55e4 <coda_cursor_read_float_array+0x51c>
    50e4:	add	r3, r6, r3, lsl #4
    50e8:	ldr	r3, [r3, #-8]
    50ec:	cmp	r3, #0
    50f0:	beq	55e4 <coda_cursor_read_float_array+0x51c>
    50f4:	cmp	r1, #0
    50f8:	mov	r4, r1
    50fc:	beq	5644 <coda_cursor_read_float_array+0x57c>
    5100:	mov	r7, r2
    5104:	ldr	r2, [r3]
    5108:	cmp	r2, #99	; 0x63
    510c:	ldrhi	r3, [r3, #4]
    5110:	ldr	r0, [r3, #8]
    5114:	cmp	r0, #1
    5118:	bne	55c8 <coda_cursor_read_float_array+0x500>
    511c:	ldr	r2, [r3, #40]	; 0x28
    5120:	ldr	r3, [r2, #8]
    5124:	sub	r3, r3, #2
    5128:	cmp	r3, #1
    512c:	bls	5168 <coda_cursor_read_float_array+0xa0>
    5130:	ldr	r0, [r2, #12]
    5134:	cmp	r0, #9
    5138:	ldrls	pc, [pc, r0, lsl #2]
    513c:	b	5208 <coda_cursor_read_float_array+0x140>
    5140:	.word	0x0000522c
    5144:	.word	0x00005430
    5148:	.word	0x000053d4
    514c:	.word	0x00005378
    5150:	.word	0x00005324
    5154:	.word	0x00005500
    5158:	.word	0x0000548c
    515c:	.word	0x00005554
    5160:	.word	0x00005308
    5164:	.word	0x00005294
    5168:	ldr	r3, [pc, #1280]	; 5670 <coda_cursor_read_float_array+0x5a8>
    516c:	bl	0 <__aeabi_read_tp>
    5170:	ldr	r3, [pc, r3]
    5174:	ldr	r3, [r0, r3]
    5178:	cmp	r3, #0
    517c:	beq	5130 <coda_cursor_read_float_array+0x68>
    5180:	ldr	r3, [r2, #48]	; 0x30
    5184:	cmp	r3, #0
    5188:	beq	5130 <coda_cursor_read_float_array+0x68>
    518c:	add	r1, sp, #12
    5190:	mov	r0, r6
    5194:	bl	0 <coda_cursor_get_num_elements>
    5198:	cmp	r0, #0
    519c:	bne	521c <coda_cursor_read_float_array+0x154>
    51a0:	ldr	r0, [sp, #12]
    51a4:	lsl	r0, r0, #3
    51a8:	bl	0 <malloc>
    51ac:	subs	r5, r0, #0
    51b0:	beq	5638 <coda_cursor_read_float_array+0x570>
    51b4:	mov	r0, r6
    51b8:	mov	r2, r7
    51bc:	mov	r1, r5
    51c0:	bl	4bd0 <coda_cursor_read_double_array>
    51c4:	subs	r6, r0, #0
    51c8:	bne	5600 <coda_cursor_read_float_array+0x538>
    51cc:	ldr	r3, [sp, #12]
    51d0:	cmp	r3, #0
    51d4:	ble	51f4 <coda_cursor_read_float_array+0x12c>
    51d8:	add	r1, r4, r3, lsl #2
    51dc:	add	r3, r5, r3, lsl #3
    51e0:	vldmdb	r3!, {d7}
    51e4:	vcvt.f32.f64	s14, d7
    51e8:	cmp	r5, r3
    51ec:	vstmdb	r1!, {s14}
    51f0:	bne	51e0 <coda_cursor_read_float_array+0x118>
    51f4:	mov	r0, r5
    51f8:	bl	0 <free>
    51fc:	mov	r0, r6
    5200:	add	sp, sp, #16
    5204:	pop	{r4, r5, r6, r7, r8, pc}
    5208:	bl	0 <coda_type_get_native_type_name>
    520c:	ldr	r1, [pc, #1120]	; 5674 <coda_cursor_read_float_array+0x5ac>
    5210:	mov	r2, r0
    5214:	mvn	r0, #104	; 0x68
    5218:	bl	0 <coda_set_error>
    521c:	mvn	r6, #0
    5220:	mov	r0, r6
    5224:	add	sp, sp, #16
    5228:	pop	{r4, r5, r6, r7, r8, pc}
    522c:	mov	r2, r7
    5230:	mov	r1, r4
    5234:	mov	r0, r6
    5238:	bl	a14 <read_int8_array>
    523c:	cmp	r0, #0
    5240:	bne	521c <coda_cursor_read_float_array+0x154>
    5244:	mov	r0, r6
    5248:	add	r1, sp, #12
    524c:	bl	0 <coda_cursor_get_num_elements>
    5250:	cmp	r0, #0
    5254:	bne	521c <coda_cursor_read_float_array+0x154>
    5258:	ldr	r2, [sp, #12]
    525c:	cmp	r2, #0
    5260:	addgt	r3, r4, r2
    5264:	addgt	r2, r4, r2, lsl #2
    5268:	ble	5284 <coda_cursor_read_float_array+0x1bc>
    526c:	ldrsb	r1, [r3, #-1]!
    5270:	cmp	r4, r3
    5274:	vmov	s15, r1
    5278:	vcvt.f32.s32	s15, s15
    527c:	vstmdb	r2!, {s15}
    5280:	bne	526c <coda_cursor_read_float_array+0x1a4>
    5284:	mov	r6, #0
    5288:	mov	r0, r6
    528c:	add	sp, sp, #16
    5290:	pop	{r4, r5, r6, r7, r8, pc}
    5294:	add	r1, sp, #12
    5298:	mov	r0, r6
    529c:	bl	0 <coda_cursor_get_num_elements>
    52a0:	cmp	r0, #0
    52a4:	bne	521c <coda_cursor_read_float_array+0x154>
    52a8:	ldr	r0, [sp, #12]
    52ac:	lsl	r0, r0, #3
    52b0:	bl	0 <malloc>
    52b4:	subs	r5, r0, #0
    52b8:	ldreq	r2, [sp, #12]
    52bc:	ldreq	r1, [pc, #948]	; 5678 <coda_cursor_read_float_array+0x5b0>
    52c0:	beq	5618 <coda_cursor_read_float_array+0x550>
    52c4:	mov	r0, r6
    52c8:	mov	r2, r7
    52cc:	mov	r1, r5
    52d0:	bl	14d8 <read_double_array>
    52d4:	subs	r6, r0, #0
    52d8:	bne	5600 <coda_cursor_read_float_array+0x538>
    52dc:	ldr	r3, [sp, #12]
    52e0:	cmp	r3, #0
    52e4:	addgt	r1, r4, r3, lsl #2
    52e8:	addgt	r3, r5, r3, lsl #3
    52ec:	ble	51f4 <coda_cursor_read_float_array+0x12c>
    52f0:	vldmdb	r3!, {d7}
    52f4:	vcvt.f32.f64	s14, d7
    52f8:	cmp	r3, r5
    52fc:	vstmdb	r1!, {s14}
    5300:	bne	52f0 <coda_cursor_read_float_array+0x228>
    5304:	b	51f4 <coda_cursor_read_float_array+0x12c>
    5308:	mov	r0, r6
    530c:	mov	r2, r7
    5310:	mov	r1, r4
    5314:	bl	11b0 <read_float_array>
    5318:	adds	r6, r0, #0
    531c:	mvnne	r6, #0
    5320:	b	51fc <coda_cursor_read_float_array+0x134>
    5324:	mov	r2, r7
    5328:	mov	r1, r4
    532c:	mov	r0, r6
    5330:	bl	df4 <read_int32_array>
    5334:	cmp	r0, #0
    5338:	bne	521c <coda_cursor_read_float_array+0x154>
    533c:	mov	r0, r6
    5340:	add	r1, sp, #12
    5344:	bl	0 <coda_cursor_get_num_elements>
    5348:	cmp	r0, #0
    534c:	bne	521c <coda_cursor_read_float_array+0x154>
    5350:	ldr	r3, [sp, #12]
    5354:	cmp	r3, #0
    5358:	ble	5284 <coda_cursor_read_float_array+0x1bc>
    535c:	add	r3, r4, r3, lsl #2
    5360:	vldr	s15, [r3, #-4]
    5364:	vcvt.f32.s32	s15, s15
    5368:	vstmdb	r3!, {s15}
    536c:	cmp	r4, r3
    5370:	bne	5360 <coda_cursor_read_float_array+0x298>
    5374:	b	5284 <coda_cursor_read_float_array+0x1bc>
    5378:	mov	r2, r7
    537c:	mov	r1, r4
    5380:	mov	r0, r6
    5384:	bl	d08 <read_uint16_array>
    5388:	cmp	r0, #0
    538c:	bne	521c <coda_cursor_read_float_array+0x154>
    5390:	mov	r0, r6
    5394:	add	r1, sp, #12
    5398:	bl	0 <coda_cursor_get_num_elements>
    539c:	cmp	r0, #0
    53a0:	bne	521c <coda_cursor_read_float_array+0x154>
    53a4:	ldr	r2, [sp, #12]
    53a8:	cmp	r2, #0
    53ac:	ble	5284 <coda_cursor_read_float_array+0x1bc>
    53b0:	add	r3, r4, r2, lsl #1
    53b4:	add	r2, r4, r2, lsl #2
    53b8:	ldrh	r1, [r3, #-2]!
    53bc:	cmp	r4, r3
    53c0:	vmov	s15, r1
    53c4:	vcvt.f32.u32	s15, s15
    53c8:	vstmdb	r2!, {s15}
    53cc:	bne	53b8 <coda_cursor_read_float_array+0x2f0>
    53d0:	b	5284 <coda_cursor_read_float_array+0x1bc>
    53d4:	mov	r2, r7
    53d8:	mov	r1, r4
    53dc:	mov	r0, r6
    53e0:	bl	c08 <read_int16_array>
    53e4:	cmp	r0, #0
    53e8:	bne	521c <coda_cursor_read_float_array+0x154>
    53ec:	mov	r0, r6
    53f0:	add	r1, sp, #12
    53f4:	bl	0 <coda_cursor_get_num_elements>
    53f8:	cmp	r0, #0
    53fc:	bne	521c <coda_cursor_read_float_array+0x154>
    5400:	ldr	r2, [sp, #12]
    5404:	cmp	r2, #0
    5408:	ble	5284 <coda_cursor_read_float_array+0x1bc>
    540c:	add	r3, r4, r2, lsl #1
    5410:	add	r2, r4, r2, lsl #2
    5414:	ldrsh	r1, [r3, #-2]!
    5418:	cmp	r4, r3
    541c:	vmov	s15, r1
    5420:	vcvt.f32.s32	s15, s15
    5424:	vstmdb	r2!, {s15}
    5428:	bne	5414 <coda_cursor_read_float_array+0x34c>
    542c:	b	5284 <coda_cursor_read_float_array+0x1bc>
    5430:	mov	r2, r7
    5434:	mov	r1, r4
    5438:	mov	r0, r6
    543c:	bl	b18 <read_uint8_array>
    5440:	cmp	r0, #0
    5444:	bne	521c <coda_cursor_read_float_array+0x154>
    5448:	mov	r0, r6
    544c:	add	r1, sp, #12
    5450:	bl	0 <coda_cursor_get_num_elements>
    5454:	cmp	r0, #0
    5458:	bne	521c <coda_cursor_read_float_array+0x154>
    545c:	ldr	r2, [sp, #12]
    5460:	cmp	r2, #0
    5464:	ble	5284 <coda_cursor_read_float_array+0x1bc>
    5468:	add	r3, r4, r2
    546c:	add	r2, r4, r2, lsl #2
    5470:	ldrb	r1, [r3, #-1]!
    5474:	cmp	r4, r3
    5478:	vmov	s15, r1
    547c:	vcvt.f32.u32	s15, s15
    5480:	vstmdb	r2!, {s15}
    5484:	bne	5470 <coda_cursor_read_float_array+0x3a8>
    5488:	b	5284 <coda_cursor_read_float_array+0x1bc>
    548c:	add	r1, sp, #12
    5490:	mov	r0, r6
    5494:	bl	0 <coda_cursor_get_num_elements>
    5498:	cmp	r0, #0
    549c:	bne	521c <coda_cursor_read_float_array+0x154>
    54a0:	ldr	r0, [sp, #12]
    54a4:	lsl	r0, r0, #3
    54a8:	bl	0 <malloc>
    54ac:	subs	r8, r0, #0
    54b0:	beq	5610 <coda_cursor_read_float_array+0x548>
    54b4:	mov	r0, r6
    54b8:	mov	r2, r7
    54bc:	mov	r1, r8
    54c0:	bl	fe8 <read_int64_array>
    54c4:	subs	r6, r0, #0
    54c8:	bne	5660 <coda_cursor_read_float_array+0x598>
    54cc:	ldr	r5, [sp, #12]
    54d0:	cmp	r5, #0
    54d4:	ble	54f4 <coda_cursor_read_float_array+0x42c>
    54d8:	add	r4, r4, r5, lsl #2
    54dc:	add	r5, r8, r5, lsl #3
    54e0:	ldrd	r0, [r5, #-8]!
    54e4:	bl	0 <__aeabi_l2f>
    54e8:	cmp	r5, r8
    54ec:	str	r0, [r4, #-4]!
    54f0:	bne	54e0 <coda_cursor_read_float_array+0x418>
    54f4:	mov	r0, r8
    54f8:	bl	0 <free>
    54fc:	b	51fc <coda_cursor_read_float_array+0x134>
    5500:	mov	r2, r7
    5504:	mov	r1, r4
    5508:	mov	r0, r6
    550c:	bl	ef8 <read_uint32_array>
    5510:	cmp	r0, #0
    5514:	bne	521c <coda_cursor_read_float_array+0x154>
    5518:	mov	r0, r6
    551c:	add	r1, sp, #12
    5520:	bl	0 <coda_cursor_get_num_elements>
    5524:	cmp	r0, #0
    5528:	bne	521c <coda_cursor_read_float_array+0x154>
    552c:	ldr	r3, [sp, #12]
    5530:	cmp	r3, #0
    5534:	ble	5284 <coda_cursor_read_float_array+0x1bc>
    5538:	add	r3, r4, r3, lsl #2
    553c:	vldr	s15, [r3, #-4]
    5540:	vcvt.f32.u32	s15, s15
    5544:	vstmdb	r3!, {s15}
    5548:	cmp	r3, r4
    554c:	bne	553c <coda_cursor_read_float_array+0x474>
    5550:	b	5284 <coda_cursor_read_float_array+0x1bc>
    5554:	add	r1, sp, #12
    5558:	mov	r0, r6
    555c:	bl	0 <coda_cursor_get_num_elements>
    5560:	cmp	r0, #0
    5564:	bne	521c <coda_cursor_read_float_array+0x154>
    5568:	ldr	r0, [sp, #12]
    556c:	lsl	r0, r0, #3
    5570:	bl	0 <malloc>
    5574:	subs	r8, r0, #0
    5578:	ldreq	r2, [sp, #12]
    557c:	ldreq	r1, [pc, #248]	; 567c <coda_cursor_read_float_array+0x5b4>
    5580:	beq	5618 <coda_cursor_read_float_array+0x550>
    5584:	mov	r0, r6
    5588:	mov	r2, r7
    558c:	mov	r1, r8
    5590:	bl	10d8 <read_uint64_array>
    5594:	subs	r6, r0, #0
    5598:	bne	5660 <coda_cursor_read_float_array+0x598>
    559c:	ldr	r5, [sp, #12]
    55a0:	cmp	r5, #0
    55a4:	addgt	r4, r4, r5, lsl #2
    55a8:	addgt	r5, r8, r5, lsl #3
    55ac:	ble	54f4 <coda_cursor_read_float_array+0x42c>
    55b0:	ldrd	r0, [r5, #-8]!
    55b4:	bl	0 <__aeabi_ul2f>
    55b8:	cmp	r5, r8
    55bc:	str	r0, [r4, #-4]!
    55c0:	bne	55b0 <coda_cursor_read_float_array+0x4e8>
    55c4:	b	54f4 <coda_cursor_read_float_array+0x42c>
    55c8:	bl	0 <coda_type_get_class_name>
    55cc:	ldr	r1, [pc, #172]	; 5680 <coda_cursor_read_float_array+0x5b8>
    55d0:	mvn	r6, #0
    55d4:	mov	r2, r0
    55d8:	mvn	r0, #104	; 0x68
    55dc:	bl	0 <coda_set_error>
    55e0:	b	51fc <coda_cursor_read_float_array+0x134>
    55e4:	ldr	r3, [pc, #152]	; 5684 <coda_cursor_read_float_array+0x5bc>
    55e8:	ldr	r2, [pc, #152]	; 5688 <coda_cursor_read_float_array+0x5c0>
    55ec:	ldr	r1, [pc, #152]	; 568c <coda_cursor_read_float_array+0x5c4>
    55f0:	mvn	r0, #99	; 0x63
    55f4:	bl	0 <coda_set_error>
    55f8:	mvn	r6, #0
    55fc:	b	51fc <coda_cursor_read_float_array+0x134>
    5600:	mov	r0, r5
    5604:	bl	0 <free>
    5608:	mvn	r6, #0
    560c:	b	51fc <coda_cursor_read_float_array+0x134>
    5610:	ldr	r2, [sp, #12]
    5614:	ldr	r1, [pc, #116]	; 5690 <coda_cursor_read_float_array+0x5c8>
    5618:	str	r1, [sp]
    561c:	ldr	r3, [pc, #100]	; 5688 <coda_cursor_read_float_array+0x5c0>
    5620:	lsl	r2, r2, #3
    5624:	ldr	r1, [pc, #104]	; 5694 <coda_cursor_read_float_array+0x5cc>
    5628:	mvn	r0, #0
    562c:	bl	0 <coda_set_error>
    5630:	mvn	r6, #0
    5634:	b	51fc <coda_cursor_read_float_array+0x134>
    5638:	ldr	r2, [sp, #12]
    563c:	ldr	r1, [pc, #84]	; 5698 <coda_cursor_read_float_array+0x5d0>
    5640:	b	5618 <coda_cursor_read_float_array+0x550>
    5644:	ldr	r3, [pc, #80]	; 569c <coda_cursor_read_float_array+0x5d4>
    5648:	ldr	r2, [pc, #56]	; 5688 <coda_cursor_read_float_array+0x5c0>
    564c:	ldr	r1, [pc, #76]	; 56a0 <coda_cursor_read_float_array+0x5d8>
    5650:	mvn	r0, #99	; 0x63
    5654:	bl	0 <coda_set_error>
    5658:	mvn	r6, #0
    565c:	b	51fc <coda_cursor_read_float_array+0x134>
    5660:	mov	r0, r8
    5664:	bl	0 <free>
    5668:	mvn	r6, #0
    566c:	b	51fc <coda_cursor_read_float_array+0x134>
    5670:	.word	0x000004f8
    5674:	.word	0x000002cc
    5678:	.word	0x00000f28
    567c:	.word	0x00000f07
    5680:	.word	0x00000480
    5684:	.word	0x00000e59
    5688:	.word	0x00000000
    568c:	.word	0x000000e0
    5690:	.word	0x00000eec
    5694:	.word	0x000000a8
    5698:	.word	0x00000e7b
    569c:	.word	0x00000e5e
    56a0:	.word	0x00000100

000056a4 <coda_cursor_read_char_array>:
    56a4:	push	{r4, r5, r6, lr}
    56a8:	subs	r4, r0, #0
    56ac:	sub	sp, sp, #8
    56b0:	beq	5874 <coda_cursor_read_char_array+0x1d0>
    56b4:	ldr	r3, [r4, #4]
    56b8:	cmp	r3, #0
    56bc:	ble	5874 <coda_cursor_read_char_array+0x1d0>
    56c0:	add	r3, r4, r3, lsl #4
    56c4:	ldr	r3, [r3, #-8]
    56c8:	cmp	r3, #0
    56cc:	beq	5874 <coda_cursor_read_char_array+0x1d0>
    56d0:	cmp	r1, #0
    56d4:	mov	r5, r1
    56d8:	beq	5890 <coda_cursor_read_char_array+0x1ec>
    56dc:	ldr	r1, [r3]
    56e0:	cmp	r1, #99	; 0x63
    56e4:	ldrhi	r3, [r3, #4]
    56e8:	ldr	r0, [r3, #8]
    56ec:	cmp	r0, #1
    56f0:	bne	5858 <coda_cursor_read_char_array+0x1b4>
    56f4:	ldr	r6, [r3, #40]	; 0x28
    56f8:	ldr	r3, [r6, #8]
    56fc:	sub	r3, r3, #2
    5700:	cmp	r3, #1
    5704:	bls	57a0 <coda_cursor_read_char_array+0xfc>
    5708:	ldr	r0, [r6, #12]
    570c:	cmp	r0, #10
    5710:	bne	57c8 <coda_cursor_read_char_array+0x124>
    5714:	cmp	r1, #101	; 0x65
    5718:	beq	5810 <coda_cursor_read_char_array+0x16c>
    571c:	bls	5770 <coda_cursor_read_char_array+0xcc>
    5720:	cmp	r1, #103	; 0x67
    5724:	beq	5828 <coda_cursor_read_char_array+0x184>
    5728:	bcc	57ec <coda_cursor_read_char_array+0x148>
    572c:	cmp	r1, #104	; 0x68
    5730:	bne	57e4 <coda_cursor_read_char_array+0x140>
    5734:	mov	r1, r5
    5738:	mov	r0, r4
    573c:	str	r2, [sp, #4]
    5740:	bl	0 <coda_netcdf_cursor_read_char_array>
    5744:	ldr	r2, [sp, #4]
    5748:	cmp	r0, #0
    574c:	bne	57dc <coda_cursor_read_char_array+0x138>
    5750:	cmp	r2, #0
    5754:	moveq	r0, r2
    5758:	beq	5798 <coda_cursor_read_char_array+0xf4>
    575c:	mov	r1, r5
    5760:	mov	r0, r4
    5764:	mov	r2, #1
    5768:	bl	638 <transpose_array>
    576c:	b	5790 <coda_cursor_read_char_array+0xec>
    5770:	cmp	r1, #1
    5774:	beq	5848 <coda_cursor_read_char_array+0x1a4>
    5778:	bcc	5800 <coda_cursor_read_char_array+0x15c>
    577c:	cmp	r1, #100	; 0x64
    5780:	bne	5750 <coda_cursor_read_char_array+0xac>
    5784:	mov	r1, r5
    5788:	mov	r0, r4
    578c:	bl	0 <coda_mem_cursor_read_char_array>
    5790:	adds	r0, r0, #0
    5794:	mvnne	r0, #0
    5798:	add	sp, sp, #8
    579c:	pop	{r4, r5, r6, pc}
    57a0:	ldr	r3, [pc, #260]	; 58ac <coda_cursor_read_char_array+0x208>
    57a4:	bl	0 <__aeabi_read_tp>
    57a8:	ldr	r3, [pc, r3]
    57ac:	ldr	r3, [r0, r3]
    57b0:	cmp	r3, #0
    57b4:	beq	5708 <coda_cursor_read_char_array+0x64>
    57b8:	ldr	r3, [r6, #48]	; 0x30
    57bc:	cmp	r3, #0
    57c0:	movne	r0, #9
    57c4:	beq	5708 <coda_cursor_read_char_array+0x64>
    57c8:	bl	0 <coda_type_get_native_type_name>
    57cc:	ldr	r1, [pc, #220]	; 58b0 <coda_cursor_read_char_array+0x20c>
    57d0:	mov	r2, r0
    57d4:	mvn	r0, #104	; 0x68
    57d8:	bl	0 <coda_set_error>
    57dc:	mvn	r0, #0
    57e0:	b	5798 <coda_cursor_read_char_array+0xf4>
    57e4:	cmp	r1, #105	; 0x69
    57e8:	bne	5750 <coda_cursor_read_char_array+0xac>
    57ec:	ldr	r3, [pc, #192]	; 58b4 <coda_cursor_read_char_array+0x210>
    57f0:	ldr	r2, [pc, #192]	; 58b8 <coda_cursor_read_char_array+0x214>
    57f4:	ldr	r1, [pc, #192]	; 58bc <coda_cursor_read_char_array+0x218>
    57f8:	ldr	r0, [pc, #192]	; 58c0 <coda_cursor_read_char_array+0x21c>
    57fc:	bl	0 <__assert_fail>
    5800:	mov	r1, r5
    5804:	mov	r0, r4
    5808:	bl	0 <coda_ascii_cursor_read_char_array>
    580c:	b	5790 <coda_cursor_read_char_array+0xec>
    5810:	mov	r1, #0
    5814:	mvn	r0, #10
    5818:	bl	0 <coda_set_error>
    581c:	mvn	r0, #0
    5820:	add	sp, sp, #8
    5824:	pop	{r4, r5, r6, pc}
    5828:	mov	r1, r5
    582c:	mov	r0, r4
    5830:	str	r2, [sp, #4]
    5834:	bl	0 <coda_cdf_cursor_read_char_array>
    5838:	ldr	r2, [sp, #4]
    583c:	cmp	r0, #0
    5840:	beq	5750 <coda_cursor_read_char_array+0xac>
    5844:	b	57dc <coda_cursor_read_char_array+0x138>
    5848:	mov	r1, r5
    584c:	mov	r0, r4
    5850:	bl	0 <coda_bin_cursor_read_char_array>
    5854:	b	5790 <coda_cursor_read_char_array+0xec>
    5858:	bl	0 <coda_type_get_class_name>
    585c:	ldr	r1, [pc, #96]	; 58c4 <coda_cursor_read_char_array+0x220>
    5860:	mov	r2, r0
    5864:	mvn	r0, #104	; 0x68
    5868:	bl	0 <coda_set_error>
    586c:	mvn	r0, #0
    5870:	b	5798 <coda_cursor_read_char_array+0xf4>
    5874:	mvn	r0, #99	; 0x63
    5878:	ldr	r3, [pc, #72]	; 58c8 <coda_cursor_read_char_array+0x224>
    587c:	ldr	r2, [pc, #56]	; 58bc <coda_cursor_read_char_array+0x218>
    5880:	ldr	r1, [pc, #68]	; 58cc <coda_cursor_read_char_array+0x228>
    5884:	bl	0 <coda_set_error>
    5888:	mvn	r0, #0
    588c:	b	5798 <coda_cursor_read_char_array+0xf4>
    5890:	mvn	r0, #99	; 0x63
    5894:	ldr	r3, [pc, #52]	; 58d0 <coda_cursor_read_char_array+0x22c>
    5898:	ldr	r2, [pc, #28]	; 58bc <coda_cursor_read_char_array+0x218>
    589c:	ldr	r1, [pc, #48]	; 58d4 <coda_cursor_read_char_array+0x230>
    58a0:	bl	0 <coda_set_error>
    58a4:	mvn	r0, #0
    58a8:	b	5798 <coda_cursor_read_char_array+0xf4>
    58ac:	.word	0x000000fc
    58b0:	.word	0x00000334
    58b4:	.word	0x00000264
    58b8:	.word	0x00000544
    58bc:	.word	0x00000000
    58c0:	.word	0x00000050
    58c4:	.word	0x00000480
    58c8:	.word	0x00001028
    58cc:	.word	0x000000e0
    58d0:	.word	0x0000102d
    58d4:	.word	0x00000100

000058d8 <coda_cursor_read_int8_partial_array>:
    58d8:	push	{r4, r5, r6, lr}
    58dc:	subs	r5, r0, #0
    58e0:	sub	sp, sp, #24
    58e4:	beq	5a40 <coda_cursor_read_int8_partial_array+0x168>
    58e8:	mov	r6, r1
    58ec:	ldr	r1, [r5, #4]
    58f0:	cmp	r1, #0
    58f4:	ble	5a40 <coda_cursor_read_int8_partial_array+0x168>
    58f8:	add	r1, r5, r1, lsl #4
    58fc:	ldr	r1, [r1, #-8]
    5900:	cmp	r1, #0
    5904:	beq	5a40 <coda_cursor_read_int8_partial_array+0x168>
    5908:	cmp	r3, #0
    590c:	beq	5a74 <coda_cursor_read_int8_partial_array+0x19c>
    5910:	ldr	r0, [r1]
    5914:	cmp	r0, #99	; 0x63
    5918:	movls	r4, r1
    591c:	ldrhi	r4, [r1, #4]
    5920:	ldr	r0, [r4, #8]
    5924:	cmp	r0, #1
    5928:	bne	5a24 <coda_cursor_read_int8_partial_array+0x14c>
    592c:	ldr	r1, [pc, #348]	; 5a90 <coda_cursor_read_int8_partial_array+0x1b8>
    5930:	bl	0 <__aeabi_read_tp>
    5934:	ldr	r1, [pc, r1]
    5938:	ldr	r1, [r0, r1]
    593c:	cmp	r1, #0
    5940:	bne	5980 <coda_cursor_read_int8_partial_array+0xa8>
    5944:	ldr	r4, [r4, #40]	; 0x28
    5948:	ldr	r1, [r4, #8]
    594c:	sub	r1, r1, #2
    5950:	cmp	r1, #1
    5954:	bls	59e0 <coda_cursor_read_int8_partial_array+0x108>
    5958:	ldr	r0, [r4, #12]
    595c:	cmp	r0, #0
    5960:	bne	5a08 <coda_cursor_read_int8_partial_array+0x130>
    5964:	mov	r1, r6
    5968:	mov	r0, r5
    596c:	bl	1650 <read_int8_partial_array>
    5970:	adds	r0, r0, #0
    5974:	mvnne	r0, #0
    5978:	add	sp, sp, #24
    597c:	pop	{r4, r5, r6, pc}
    5980:	add	r1, sp, #20
    5984:	mov	r0, r5
    5988:	str	r3, [sp, #12]
    598c:	str	r2, [sp, #8]
    5990:	bl	0 <coda_cursor_get_num_elements>
    5994:	cmp	r0, #0
    5998:	bne	5a1c <coda_cursor_read_int8_partial_array+0x144>
    599c:	cmp	r6, #0
    59a0:	ldr	r1, [sp, #20]
    59a4:	ldr	r2, [sp, #8]
    59a8:	ldr	r3, [sp, #12]
    59ac:	blt	5a5c <coda_cursor_read_int8_partial_array+0x184>
    59b0:	cmp	r6, r1
    59b4:	bge	5a5c <coda_cursor_read_int8_partial_array+0x184>
    59b8:	add	r0, r6, r2
    59bc:	cmp	r1, r0
    59c0:	bge	5944 <coda_cursor_read_int8_partial_array+0x6c>
    59c4:	str	r1, [sp]
    59c8:	mov	r3, r2
    59cc:	ldr	r1, [pc, #192]	; 5a94 <coda_cursor_read_int8_partial_array+0x1bc>
    59d0:	mov	r2, r6
    59d4:	mvn	r0, #106	; 0x6a
    59d8:	bl	0 <coda_set_error>
    59dc:	b	5a1c <coda_cursor_read_int8_partial_array+0x144>
    59e0:	ldr	r1, [pc, #176]	; 5a98 <coda_cursor_read_int8_partial_array+0x1c0>
    59e4:	bl	0 <__aeabi_read_tp>
    59e8:	ldr	r1, [pc, r1]
    59ec:	ldr	r1, [r0, r1]
    59f0:	cmp	r1, #0
    59f4:	beq	5958 <coda_cursor_read_int8_partial_array+0x80>
    59f8:	ldr	r1, [r4, #48]	; 0x30
    59fc:	cmp	r1, #0
    5a00:	movne	r0, #9
    5a04:	beq	5958 <coda_cursor_read_int8_partial_array+0x80>
    5a08:	bl	0 <coda_type_get_native_type_name>
    5a0c:	ldr	r1, [pc, #136]	; 5a9c <coda_cursor_read_int8_partial_array+0x1c4>
    5a10:	mov	r2, r0
    5a14:	mvn	r0, #104	; 0x68
    5a18:	bl	0 <coda_set_error>
    5a1c:	mvn	r0, #0
    5a20:	b	5978 <coda_cursor_read_int8_partial_array+0xa0>
    5a24:	bl	0 <coda_type_get_class_name>
    5a28:	ldr	r1, [pc, #112]	; 5aa0 <coda_cursor_read_int8_partial_array+0x1c8>
    5a2c:	mov	r2, r0
    5a30:	mvn	r0, #104	; 0x68
    5a34:	bl	0 <coda_set_error>
    5a38:	mvn	r0, #0
    5a3c:	b	5978 <coda_cursor_read_int8_partial_array+0xa0>
    5a40:	mvn	r0, #99	; 0x63
    5a44:	ldr	r3, [pc, #88]	; 5aa4 <coda_cursor_read_int8_partial_array+0x1cc>
    5a48:	ldr	r2, [pc, #88]	; 5aa8 <coda_cursor_read_int8_partial_array+0x1d0>
    5a4c:	ldr	r1, [pc, #88]	; 5aac <coda_cursor_read_int8_partial_array+0x1d4>
    5a50:	bl	0 <coda_set_error>
    5a54:	mvn	r0, #0
    5a58:	b	5978 <coda_cursor_read_int8_partial_array+0xa0>
    5a5c:	mov	r3, r1
    5a60:	mov	r2, r6
    5a64:	ldr	r1, [pc, #68]	; 5ab0 <coda_cursor_read_int8_partial_array+0x1d8>
    5a68:	mvn	r0, #106	; 0x6a
    5a6c:	bl	0 <coda_set_error>
    5a70:	b	5a1c <coda_cursor_read_int8_partial_array+0x144>
    5a74:	mvn	r0, #99	; 0x63
    5a78:	ldr	r3, [pc, #52]	; 5ab4 <coda_cursor_read_int8_partial_array+0x1dc>
    5a7c:	ldr	r2, [pc, #36]	; 5aa8 <coda_cursor_read_int8_partial_array+0x1d0>
    5a80:	ldr	r1, [pc, #48]	; 5ab8 <coda_cursor_read_int8_partial_array+0x1e0>
    5a84:	bl	0 <coda_set_error>
    5a88:	mvn	r0, #0
    5a8c:	b	5978 <coda_cursor_read_int8_partial_array+0xa0>
    5a90:	.word	0x00000154
    5a94:	.word	0x000004e8
    5a98:	.word	0x000000a8
    5a9c:	.word	0x00000120
    5aa0:	.word	0x00000480
    5aa4:	.word	0x00001067
    5aa8:	.word	0x00000000
    5aac:	.word	0x000000e0
    5ab0:	.word	0x000004b8
    5ab4:	.word	0x0000106c
    5ab8:	.word	0x00000100

00005abc <coda_cursor_read_uint8_partial_array>:
    5abc:	push	{r4, r5, r6, lr}
    5ac0:	subs	r5, r0, #0
    5ac4:	sub	sp, sp, #24
    5ac8:	beq	5c24 <coda_cursor_read_uint8_partial_array+0x168>
    5acc:	mov	r6, r1
    5ad0:	ldr	r1, [r5, #4]
    5ad4:	cmp	r1, #0
    5ad8:	ble	5c24 <coda_cursor_read_uint8_partial_array+0x168>
    5adc:	add	r1, r5, r1, lsl #4
    5ae0:	ldr	r1, [r1, #-8]
    5ae4:	cmp	r1, #0
    5ae8:	beq	5c24 <coda_cursor_read_uint8_partial_array+0x168>
    5aec:	cmp	r3, #0
    5af0:	beq	5c58 <coda_cursor_read_uint8_partial_array+0x19c>
    5af4:	ldr	r0, [r1]
    5af8:	cmp	r0, #99	; 0x63
    5afc:	movls	r4, r1
    5b00:	ldrhi	r4, [r1, #4]
    5b04:	ldr	r0, [r4, #8]
    5b08:	cmp	r0, #1
    5b0c:	bne	5c08 <coda_cursor_read_uint8_partial_array+0x14c>
    5b10:	ldr	r1, [pc, #348]	; 5c74 <coda_cursor_read_uint8_partial_array+0x1b8>
    5b14:	bl	0 <__aeabi_read_tp>
    5b18:	ldr	r1, [pc, r1]
    5b1c:	ldr	r1, [r0, r1]
    5b20:	cmp	r1, #0
    5b24:	bne	5b64 <coda_cursor_read_uint8_partial_array+0xa8>
    5b28:	ldr	r4, [r4, #40]	; 0x28
    5b2c:	ldr	r1, [r4, #8]
    5b30:	sub	r1, r1, #2
    5b34:	cmp	r1, #1
    5b38:	bls	5bc4 <coda_cursor_read_uint8_partial_array+0x108>
    5b3c:	ldr	r0, [r4, #12]
    5b40:	cmp	r0, #1
    5b44:	bne	5bec <coda_cursor_read_uint8_partial_array+0x130>
    5b48:	mov	r1, r6
    5b4c:	mov	r0, r5
    5b50:	bl	1708 <read_uint8_partial_array>
    5b54:	adds	r0, r0, #0
    5b58:	mvnne	r0, #0
    5b5c:	add	sp, sp, #24
    5b60:	pop	{r4, r5, r6, pc}
    5b64:	add	r1, sp, #20
    5b68:	mov	r0, r5
    5b6c:	str	r3, [sp, #12]
    5b70:	str	r2, [sp, #8]
    5b74:	bl	0 <coda_cursor_get_num_elements>
    5b78:	cmp	r0, #0
    5b7c:	bne	5c00 <coda_cursor_read_uint8_partial_array+0x144>
    5b80:	cmp	r6, #0
    5b84:	ldr	r1, [sp, #20]
    5b88:	ldr	r2, [sp, #8]
    5b8c:	ldr	r3, [sp, #12]
    5b90:	blt	5c40 <coda_cursor_read_uint8_partial_array+0x184>
    5b94:	cmp	r6, r1
    5b98:	bge	5c40 <coda_cursor_read_uint8_partial_array+0x184>
    5b9c:	add	r0, r6, r2
    5ba0:	cmp	r1, r0
    5ba4:	bge	5b28 <coda_cursor_read_uint8_partial_array+0x6c>
    5ba8:	str	r1, [sp]
    5bac:	mov	r3, r2
    5bb0:	ldr	r1, [pc, #192]	; 5c78 <coda_cursor_read_uint8_partial_array+0x1bc>
    5bb4:	mov	r2, r6
    5bb8:	mvn	r0, #106	; 0x6a
    5bbc:	bl	0 <coda_set_error>
    5bc0:	b	5c00 <coda_cursor_read_uint8_partial_array+0x144>
    5bc4:	ldr	r1, [pc, #176]	; 5c7c <coda_cursor_read_uint8_partial_array+0x1c0>
    5bc8:	bl	0 <__aeabi_read_tp>
    5bcc:	ldr	r1, [pc, r1]
    5bd0:	ldr	r1, [r0, r1]
    5bd4:	cmp	r1, #0
    5bd8:	beq	5b3c <coda_cursor_read_uint8_partial_array+0x80>
    5bdc:	ldr	r1, [r4, #48]	; 0x30
    5be0:	cmp	r1, #0
    5be4:	movne	r0, #9
    5be8:	beq	5b3c <coda_cursor_read_uint8_partial_array+0x80>
    5bec:	bl	0 <coda_type_get_native_type_name>
    5bf0:	ldr	r1, [pc, #136]	; 5c80 <coda_cursor_read_uint8_partial_array+0x1c4>
    5bf4:	mov	r2, r0
    5bf8:	mvn	r0, #104	; 0x68
    5bfc:	bl	0 <coda_set_error>
    5c00:	mvn	r0, #0
    5c04:	b	5b5c <coda_cursor_read_uint8_partial_array+0xa0>
    5c08:	bl	0 <coda_type_get_class_name>
    5c0c:	ldr	r1, [pc, #112]	; 5c84 <coda_cursor_read_uint8_partial_array+0x1c8>
    5c10:	mov	r2, r0
    5c14:	mvn	r0, #104	; 0x68
    5c18:	bl	0 <coda_set_error>
    5c1c:	mvn	r0, #0
    5c20:	b	5b5c <coda_cursor_read_uint8_partial_array+0xa0>
    5c24:	mvn	r0, #99	; 0x63
    5c28:	ldr	r3, [pc, #88]	; 5c88 <coda_cursor_read_uint8_partial_array+0x1cc>
    5c2c:	ldr	r2, [pc, #88]	; 5c8c <coda_cursor_read_uint8_partial_array+0x1d0>
    5c30:	ldr	r1, [pc, #88]	; 5c90 <coda_cursor_read_uint8_partial_array+0x1d4>
    5c34:	bl	0 <coda_set_error>
    5c38:	mvn	r0, #0
    5c3c:	b	5b5c <coda_cursor_read_uint8_partial_array+0xa0>
    5c40:	mov	r3, r1
    5c44:	mov	r2, r6
    5c48:	ldr	r1, [pc, #68]	; 5c94 <coda_cursor_read_uint8_partial_array+0x1d8>
    5c4c:	mvn	r0, #106	; 0x6a
    5c50:	bl	0 <coda_set_error>
    5c54:	b	5c00 <coda_cursor_read_uint8_partial_array+0x144>
    5c58:	mvn	r0, #99	; 0x63
    5c5c:	ldr	r3, [pc, #52]	; 5c98 <coda_cursor_read_uint8_partial_array+0x1dc>
    5c60:	ldr	r2, [pc, #36]	; 5c8c <coda_cursor_read_uint8_partial_array+0x1d0>
    5c64:	ldr	r1, [pc, #48]	; 5c9c <coda_cursor_read_uint8_partial_array+0x1e0>
    5c68:	bl	0 <coda_set_error>
    5c6c:	mvn	r0, #0
    5c70:	b	5b5c <coda_cursor_read_uint8_partial_array+0xa0>
    5c74:	.word	0x00000154
    5c78:	.word	0x000004e8
    5c7c:	.word	0x000000a8
    5c80:	.word	0x0000014c
    5c84:	.word	0x00000480
    5c88:	.word	0x000010bd
    5c8c:	.word	0x00000000
    5c90:	.word	0x000000e0
    5c94:	.word	0x000004b8
    5c98:	.word	0x000010c2
    5c9c:	.word	0x00000100

00005ca0 <coda_cursor_read_int16_partial_array>:
    5ca0:	push	{r4, r5, r6, r7, r8, lr}
    5ca4:	subs	r7, r0, #0
    5ca8:	sub	sp, sp, #16
    5cac:	beq	5eb8 <coda_cursor_read_int16_partial_array+0x218>
    5cb0:	mov	r5, r3
    5cb4:	ldr	r3, [r7, #4]
    5cb8:	cmp	r3, #0
    5cbc:	ble	5eb8 <coda_cursor_read_int16_partial_array+0x218>
    5cc0:	add	r3, r7, r3, lsl #4
    5cc4:	ldr	r3, [r3, #-8]
    5cc8:	cmp	r3, #0
    5ccc:	beq	5eb8 <coda_cursor_read_int16_partial_array+0x218>
    5cd0:	cmp	r5, #0
    5cd4:	beq	5ee8 <coda_cursor_read_int16_partial_array+0x248>
    5cd8:	mov	r6, r2
    5cdc:	ldr	r2, [r3]
    5ce0:	mov	r8, r1
    5ce4:	cmp	r2, #99	; 0x63
    5ce8:	movls	r4, r3
    5cec:	ldrhi	r4, [r3, #4]
    5cf0:	ldr	r0, [r4, #8]
    5cf4:	cmp	r0, #1
    5cf8:	bne	5e9c <coda_cursor_read_int16_partial_array+0x1fc>
    5cfc:	ldr	r3, [pc, #512]	; 5f04 <coda_cursor_read_int16_partial_array+0x264>
    5d00:	bl	0 <__aeabi_read_tp>
    5d04:	ldr	r3, [pc, r3]
    5d08:	ldr	r3, [r0, r3]
    5d0c:	cmp	r3, #0
    5d10:	bne	5d88 <coda_cursor_read_int16_partial_array+0xe8>
    5d14:	ldr	r2, [r4, #40]	; 0x28
    5d18:	ldr	r3, [r2, #8]
    5d1c:	sub	r3, r3, #2
    5d20:	cmp	r3, #1
    5d24:	bls	5dd8 <coda_cursor_read_int16_partial_array+0x138>
    5d28:	ldr	r0, [r2, #12]
    5d2c:	cmp	r0, #1
    5d30:	beq	5e04 <coda_cursor_read_int16_partial_array+0x164>
    5d34:	cmp	r0, #2
    5d38:	beq	5d64 <coda_cursor_read_int16_partial_array+0xc4>
    5d3c:	cmp	r0, #0
    5d40:	beq	5e4c <coda_cursor_read_int16_partial_array+0x1ac>
    5d44:	bl	0 <coda_type_get_native_type_name>
    5d48:	ldr	r1, [pc, #440]	; 5f08 <coda_cursor_read_int16_partial_array+0x268>
    5d4c:	mov	r2, r0
    5d50:	mvn	r0, #104	; 0x68
    5d54:	bl	0 <coda_set_error>
    5d58:	mvn	r0, #0
    5d5c:	add	sp, sp, #16
    5d60:	pop	{r4, r5, r6, r7, r8, pc}
    5d64:	mov	r3, r5
    5d68:	mov	r2, r6
    5d6c:	mov	r1, r8
    5d70:	mov	r0, r7
    5d74:	bl	17b8 <read_int16_partial_array>
    5d78:	adds	r0, r0, #0
    5d7c:	mvnne	r0, #0
    5d80:	add	sp, sp, #16
    5d84:	pop	{r4, r5, r6, r7, r8, pc}
    5d88:	add	r1, sp, #12
    5d8c:	mov	r0, r7
    5d90:	bl	0 <coda_cursor_get_num_elements>
    5d94:	cmp	r0, #0
    5d98:	bne	5d58 <coda_cursor_read_int16_partial_array+0xb8>
    5d9c:	cmp	r8, #0
    5da0:	ldr	r3, [sp, #12]
    5da4:	blt	5ed4 <coda_cursor_read_int16_partial_array+0x234>
    5da8:	cmp	r8, r3
    5dac:	bge	5ed4 <coda_cursor_read_int16_partial_array+0x234>
    5db0:	add	r2, r8, r6
    5db4:	cmp	r3, r2
    5db8:	bge	5d14 <coda_cursor_read_int16_partial_array+0x74>
    5dbc:	str	r3, [sp]
    5dc0:	mov	r2, r8
    5dc4:	mov	r3, r6
    5dc8:	ldr	r1, [pc, #316]	; 5f0c <coda_cursor_read_int16_partial_array+0x26c>
    5dcc:	mvn	r0, #106	; 0x6a
    5dd0:	bl	0 <coda_set_error>
    5dd4:	b	5d58 <coda_cursor_read_int16_partial_array+0xb8>
    5dd8:	ldr	r3, [pc, #304]	; 5f10 <coda_cursor_read_int16_partial_array+0x270>
    5ddc:	bl	0 <__aeabi_read_tp>
    5de0:	ldr	r3, [pc, r3]
    5de4:	ldr	r3, [r0, r3]
    5de8:	cmp	r3, #0
    5dec:	beq	5d28 <coda_cursor_read_int16_partial_array+0x88>
    5df0:	ldr	r3, [r2, #48]	; 0x30
    5df4:	cmp	r3, #0
    5df8:	movne	r0, #9
    5dfc:	bne	5d44 <coda_cursor_read_int16_partial_array+0xa4>
    5e00:	b	5d28 <coda_cursor_read_int16_partial_array+0x88>
    5e04:	mov	r1, r8
    5e08:	mov	r0, r7
    5e0c:	mov	r3, r5
    5e10:	mov	r2, r6
    5e14:	bl	1708 <read_uint8_partial_array>
    5e18:	cmp	r0, #0
    5e1c:	bne	5d58 <coda_cursor_read_int16_partial_array+0xb8>
    5e20:	cmp	r6, #0
    5e24:	ble	5e40 <coda_cursor_read_int16_partial_array+0x1a0>
    5e28:	add	r3, r5, r6
    5e2c:	add	r2, r3, r6
    5e30:	ldrb	r1, [r3, #-1]!
    5e34:	cmp	r3, r5
    5e38:	strh	r1, [r2, #-2]!
    5e3c:	bne	5e30 <coda_cursor_read_int16_partial_array+0x190>
    5e40:	mov	r0, #0
    5e44:	add	sp, sp, #16
    5e48:	pop	{r4, r5, r6, r7, r8, pc}
    5e4c:	mov	r1, r8
    5e50:	mov	r0, r7
    5e54:	mov	r3, r5
    5e58:	mov	r2, r6
    5e5c:	bl	1650 <read_int8_partial_array>
    5e60:	cmp	r0, #0
    5e64:	bne	5d58 <coda_cursor_read_int16_partial_array+0xb8>
    5e68:	cmp	r6, #0
    5e6c:	addgt	r3, r5, r6
    5e70:	addgt	r2, r3, r6
    5e74:	ble	5e40 <coda_cursor_read_int16_partial_array+0x1a0>
    5e78:	ldrsb	r1, [r3, #-1]!
    5e7c:	cmp	r5, r3
    5e80:	strh	r1, [r2, #-2]!
    5e84:	beq	5e40 <coda_cursor_read_int16_partial_array+0x1a0>
    5e88:	ldrsb	r1, [r3, #-1]!
    5e8c:	cmp	r5, r3
    5e90:	strh	r1, [r2, #-2]!
    5e94:	bne	5e78 <coda_cursor_read_int16_partial_array+0x1d8>
    5e98:	b	5e40 <coda_cursor_read_int16_partial_array+0x1a0>
    5e9c:	bl	0 <coda_type_get_class_name>
    5ea0:	ldr	r1, [pc, #108]	; 5f14 <coda_cursor_read_int16_partial_array+0x274>
    5ea4:	mov	r2, r0
    5ea8:	mvn	r0, #104	; 0x68
    5eac:	bl	0 <coda_set_error>
    5eb0:	mvn	r0, #0
    5eb4:	b	5d5c <coda_cursor_read_int16_partial_array+0xbc>
    5eb8:	mvn	r0, #99	; 0x63
    5ebc:	ldr	r3, [pc, #84]	; 5f18 <coda_cursor_read_int16_partial_array+0x278>
    5ec0:	ldr	r2, [pc, #84]	; 5f1c <coda_cursor_read_int16_partial_array+0x27c>
    5ec4:	ldr	r1, [pc, #84]	; 5f20 <coda_cursor_read_int16_partial_array+0x280>
    5ec8:	bl	0 <coda_set_error>
    5ecc:	mvn	r0, #0
    5ed0:	b	5d5c <coda_cursor_read_int16_partial_array+0xbc>
    5ed4:	mov	r2, r8
    5ed8:	ldr	r1, [pc, #68]	; 5f24 <coda_cursor_read_int16_partial_array+0x284>
    5edc:	mvn	r0, #106	; 0x6a
    5ee0:	bl	0 <coda_set_error>
    5ee4:	b	5d58 <coda_cursor_read_int16_partial_array+0xb8>
    5ee8:	mvn	r0, #99	; 0x63
    5eec:	ldr	r3, [pc, #52]	; 5f28 <coda_cursor_read_int16_partial_array+0x288>
    5ef0:	ldr	r2, [pc, #36]	; 5f1c <coda_cursor_read_int16_partial_array+0x27c>
    5ef4:	ldr	r1, [pc, #48]	; 5f2c <coda_cursor_read_int16_partial_array+0x28c>
    5ef8:	bl	0 <coda_set_error>
    5efc:	mvn	r0, #0
    5f00:	b	5d5c <coda_cursor_read_int16_partial_array+0xbc>
    5f04:	.word	0x000001f8
    5f08:	.word	0x0000017c
    5f0c:	.word	0x000004e8
    5f10:	.word	0x00000128
    5f14:	.word	0x00000480
    5f18:	.word	0x00001116
    5f1c:	.word	0x00000000
    5f20:	.word	0x000000e0
    5f24:	.word	0x000004b8
    5f28:	.word	0x0000111b
    5f2c:	.word	0x00000100

00005f30 <coda_cursor_read_uint16_partial_array>:
    5f30:	push	{r4, r5, r6, r7, r8, lr}
    5f34:	subs	r7, r0, #0
    5f38:	sub	sp, sp, #16
    5f3c:	beq	60ec <coda_cursor_read_uint16_partial_array+0x1bc>
    5f40:	mov	r6, r3
    5f44:	ldr	r3, [r7, #4]
    5f48:	cmp	r3, #0
    5f4c:	ble	60ec <coda_cursor_read_uint16_partial_array+0x1bc>
    5f50:	add	r3, r7, r3, lsl #4
    5f54:	ldr	r3, [r3, #-8]
    5f58:	cmp	r3, #0
    5f5c:	beq	60ec <coda_cursor_read_uint16_partial_array+0x1bc>
    5f60:	cmp	r6, #0
    5f64:	beq	611c <coda_cursor_read_uint16_partial_array+0x1ec>
    5f68:	mov	r5, r2
    5f6c:	ldr	r2, [r3]
    5f70:	mov	r8, r1
    5f74:	cmp	r2, #99	; 0x63
    5f78:	movls	r4, r3
    5f7c:	ldrhi	r4, [r3, #4]
    5f80:	ldr	r0, [r4, #8]
    5f84:	cmp	r0, #1
    5f88:	bne	60d0 <coda_cursor_read_uint16_partial_array+0x1a0>
    5f8c:	ldr	r3, [pc, #420]	; 6138 <coda_cursor_read_uint16_partial_array+0x208>
    5f90:	bl	0 <__aeabi_read_tp>
    5f94:	ldr	r3, [pc, r3]
    5f98:	ldr	r3, [r0, r3]
    5f9c:	cmp	r3, #0
    5fa0:	bne	607c <coda_cursor_read_uint16_partial_array+0x14c>
    5fa4:	ldr	r2, [r4, #40]	; 0x28
    5fa8:	ldr	r3, [r2, #8]
    5fac:	sub	r3, r3, #2
    5fb0:	cmp	r3, #1
    5fb4:	bls	6034 <coda_cursor_read_uint16_partial_array+0x104>
    5fb8:	ldr	r0, [r2, #12]
    5fbc:	cmp	r0, #1
    5fc0:	beq	5ff0 <coda_cursor_read_uint16_partial_array+0xc0>
    5fc4:	cmp	r0, #3
    5fc8:	bne	605c <coda_cursor_read_uint16_partial_array+0x12c>
    5fcc:	mov	r3, r6
    5fd0:	mov	r2, r5
    5fd4:	mov	r1, r8
    5fd8:	mov	r0, r7
    5fdc:	bl	1874 <read_uint16_partial_array>
    5fe0:	adds	r0, r0, #0
    5fe4:	mvnne	r0, #0
    5fe8:	add	sp, sp, #16
    5fec:	pop	{r4, r5, r6, r7, r8, pc}
    5ff0:	mov	r1, r8
    5ff4:	mov	r0, r7
    5ff8:	mov	r3, r6
    5ffc:	mov	r2, r5
    6000:	bl	1708 <read_uint8_partial_array>
    6004:	cmp	r0, #0
    6008:	bne	60c8 <coda_cursor_read_uint16_partial_array+0x198>
    600c:	cmp	r5, #0
    6010:	ble	5fe8 <coda_cursor_read_uint16_partial_array+0xb8>
    6014:	add	r3, r6, r5
    6018:	add	r2, r3, r5
    601c:	ldrb	r1, [r3, #-1]!
    6020:	cmp	r3, r6
    6024:	strh	r1, [r2, #-2]!
    6028:	bne	601c <coda_cursor_read_uint16_partial_array+0xec>
    602c:	add	sp, sp, #16
    6030:	pop	{r4, r5, r6, r7, r8, pc}
    6034:	ldr	r3, [pc, #256]	; 613c <coda_cursor_read_uint16_partial_array+0x20c>
    6038:	bl	0 <__aeabi_read_tp>
    603c:	ldr	r3, [pc, r3]
    6040:	ldr	r3, [r0, r3]
    6044:	cmp	r3, #0
    6048:	beq	5fb8 <coda_cursor_read_uint16_partial_array+0x88>
    604c:	ldr	r3, [r2, #48]	; 0x30
    6050:	cmp	r3, #0
    6054:	movne	r0, #9
    6058:	beq	5fb8 <coda_cursor_read_uint16_partial_array+0x88>
    605c:	bl	0 <coda_type_get_native_type_name>
    6060:	ldr	r1, [pc, #216]	; 6140 <coda_cursor_read_uint16_partial_array+0x210>
    6064:	mov	r2, r0
    6068:	mvn	r0, #104	; 0x68
    606c:	bl	0 <coda_set_error>
    6070:	mvn	r0, #0
    6074:	add	sp, sp, #16
    6078:	pop	{r4, r5, r6, r7, r8, pc}
    607c:	add	r1, sp, #12
    6080:	mov	r0, r7
    6084:	bl	0 <coda_cursor_get_num_elements>
    6088:	cmp	r0, #0
    608c:	bne	60c8 <coda_cursor_read_uint16_partial_array+0x198>
    6090:	cmp	r8, #0
    6094:	ldr	r3, [sp, #12]
    6098:	blt	6108 <coda_cursor_read_uint16_partial_array+0x1d8>
    609c:	cmp	r8, r3
    60a0:	bge	6108 <coda_cursor_read_uint16_partial_array+0x1d8>
    60a4:	add	r2, r8, r5
    60a8:	cmp	r3, r2
    60ac:	bge	5fa4 <coda_cursor_read_uint16_partial_array+0x74>
    60b0:	str	r3, [sp]
    60b4:	mov	r2, r8
    60b8:	mov	r3, r5
    60bc:	ldr	r1, [pc, #128]	; 6144 <coda_cursor_read_uint16_partial_array+0x214>
    60c0:	mvn	r0, #106	; 0x6a
    60c4:	bl	0 <coda_set_error>
    60c8:	mvn	r0, #0
    60cc:	b	5fe8 <coda_cursor_read_uint16_partial_array+0xb8>
    60d0:	bl	0 <coda_type_get_class_name>
    60d4:	ldr	r1, [pc, #108]	; 6148 <coda_cursor_read_uint16_partial_array+0x218>
    60d8:	mov	r2, r0
    60dc:	mvn	r0, #104	; 0x68
    60e0:	bl	0 <coda_set_error>
    60e4:	mvn	r0, #0
    60e8:	b	5fe8 <coda_cursor_read_uint16_partial_array+0xb8>
    60ec:	mvn	r0, #99	; 0x63
    60f0:	ldr	r3, [pc, #84]	; 614c <coda_cursor_read_uint16_partial_array+0x21c>
    60f4:	ldr	r2, [pc, #84]	; 6150 <coda_cursor_read_uint16_partial_array+0x220>
    60f8:	ldr	r1, [pc, #84]	; 6154 <coda_cursor_read_uint16_partial_array+0x224>
    60fc:	bl	0 <coda_set_error>
    6100:	mvn	r0, #0
    6104:	b	5fe8 <coda_cursor_read_uint16_partial_array+0xb8>
    6108:	mov	r2, r8
    610c:	ldr	r1, [pc, #68]	; 6158 <coda_cursor_read_uint16_partial_array+0x228>
    6110:	mvn	r0, #106	; 0x6a
    6114:	bl	0 <coda_set_error>
    6118:	b	60c8 <coda_cursor_read_uint16_partial_array+0x198>
    611c:	mvn	r0, #99	; 0x63
    6120:	ldr	r3, [pc, #52]	; 615c <coda_cursor_read_uint16_partial_array+0x22c>
    6124:	ldr	r2, [pc, #36]	; 6150 <coda_cursor_read_uint16_partial_array+0x220>
    6128:	ldr	r1, [pc, #48]	; 6160 <coda_cursor_read_uint16_partial_array+0x230>
    612c:	bl	0 <coda_set_error>
    6130:	mvn	r0, #0
    6134:	b	5fe8 <coda_cursor_read_uint16_partial_array+0xb8>
    6138:	.word	0x0000019c
    613c:	.word	0x000000f8
    6140:	.word	0x000001ac
    6144:	.word	0x000004e8
    6148:	.word	0x00000480
    614c:	.word	0x00001183
    6150:	.word	0x00000000
    6154:	.word	0x000000e0
    6158:	.word	0x000004b8
    615c:	.word	0x00001188
    6160:	.word	0x00000100

00006164 <coda_cursor_read_int32_partial_array>:
    6164:	push	{r4, r5, r6, r7, r8, lr}
    6168:	subs	r7, r0, #0
    616c:	sub	sp, sp, #16
    6170:	beq	63fc <coda_cursor_read_int32_partial_array+0x298>
    6174:	mov	r5, r3
    6178:	ldr	r3, [r7, #4]
    617c:	cmp	r3, #0
    6180:	ble	63fc <coda_cursor_read_int32_partial_array+0x298>
    6184:	add	r3, r7, r3, lsl #4
    6188:	ldr	r3, [r3, #-8]
    618c:	cmp	r3, #0
    6190:	beq	63fc <coda_cursor_read_int32_partial_array+0x298>
    6194:	cmp	r5, #0
    6198:	beq	642c <coda_cursor_read_int32_partial_array+0x2c8>
    619c:	mov	r4, r2
    61a0:	ldr	r2, [r3]
    61a4:	mov	r8, r1
    61a8:	cmp	r2, #99	; 0x63
    61ac:	movls	r6, r3
    61b0:	ldrhi	r6, [r3, #4]
    61b4:	ldr	r0, [r6, #8]
    61b8:	cmp	r0, #1
    61bc:	bne	63e0 <coda_cursor_read_int32_partial_array+0x27c>
    61c0:	ldr	r3, [pc, #640]	; 6448 <coda_cursor_read_int32_partial_array+0x2e4>
    61c4:	bl	0 <__aeabi_read_tp>
    61c8:	ldr	r3, [pc, r3]
    61cc:	ldr	r3, [r0, r3]
    61d0:	cmp	r3, #0
    61d4:	bne	6210 <coda_cursor_read_int32_partial_array+0xac>
    61d8:	ldr	r2, [r6, #40]	; 0x28
    61dc:	ldr	r3, [r2, #8]
    61e0:	sub	r3, r3, #2
    61e4:	cmp	r3, #1
    61e8:	bls	6268 <coda_cursor_read_int32_partial_array+0x104>
    61ec:	ldr	r0, [r2, #12]
    61f0:	cmp	r0, #4
    61f4:	ldrls	pc, [pc, r0, lsl #2]
    61f8:	b	6290 <coda_cursor_read_int32_partial_array+0x12c>
    61fc:	.word	0x000062cc
    6200:	.word	0x00006314
    6204:	.word	0x00006358
    6208:	.word	0x0000639c
    620c:	.word	0x000062a8
    6210:	add	r1, sp, #12
    6214:	mov	r0, r7
    6218:	bl	0 <coda_cursor_get_num_elements>
    621c:	cmp	r0, #0
    6220:	bne	625c <coda_cursor_read_int32_partial_array+0xf8>
    6224:	cmp	r8, #0
    6228:	ldr	r3, [sp, #12]
    622c:	blt	6418 <coda_cursor_read_int32_partial_array+0x2b4>
    6230:	cmp	r8, r3
    6234:	bge	6418 <coda_cursor_read_int32_partial_array+0x2b4>
    6238:	add	r2, r8, r4
    623c:	cmp	r3, r2
    6240:	bge	61d8 <coda_cursor_read_int32_partial_array+0x74>
    6244:	str	r3, [sp]
    6248:	mov	r2, r8
    624c:	mov	r3, r4
    6250:	ldr	r1, [pc, #500]	; 644c <coda_cursor_read_int32_partial_array+0x2e8>
    6254:	mvn	r0, #106	; 0x6a
    6258:	bl	0 <coda_set_error>
    625c:	mvn	r0, #0
    6260:	add	sp, sp, #16
    6264:	pop	{r4, r5, r6, r7, r8, pc}
    6268:	ldr	r3, [pc, #480]	; 6450 <coda_cursor_read_int32_partial_array+0x2ec>
    626c:	bl	0 <__aeabi_read_tp>
    6270:	ldr	r3, [pc, r3]
    6274:	ldr	r3, [r0, r3]
    6278:	cmp	r3, #0
    627c:	beq	61ec <coda_cursor_read_int32_partial_array+0x88>
    6280:	ldr	r3, [r2, #48]	; 0x30
    6284:	cmp	r3, #0
    6288:	movne	r0, #9
    628c:	beq	61ec <coda_cursor_read_int32_partial_array+0x88>
    6290:	bl	0 <coda_type_get_native_type_name>
    6294:	ldr	r1, [pc, #440]	; 6454 <coda_cursor_read_int32_partial_array+0x2f0>
    6298:	mov	r2, r0
    629c:	mvn	r0, #104	; 0x68
    62a0:	bl	0 <coda_set_error>
    62a4:	b	625c <coda_cursor_read_int32_partial_array+0xf8>
    62a8:	mov	r3, r5
    62ac:	mov	r2, r4
    62b0:	mov	r1, r8
    62b4:	mov	r0, r7
    62b8:	bl	1924 <read_int32_partial_array>
    62bc:	adds	r0, r0, #0
    62c0:	mvnne	r0, #0
    62c4:	add	sp, sp, #16
    62c8:	pop	{r4, r5, r6, r7, r8, pc}
    62cc:	mov	r1, r8
    62d0:	mov	r0, r7
    62d4:	mov	r3, r5
    62d8:	mov	r2, r4
    62dc:	bl	1650 <read_int8_partial_array>
    62e0:	cmp	r0, #0
    62e4:	bne	625c <coda_cursor_read_int32_partial_array+0xf8>
    62e8:	cmp	r4, #0
    62ec:	addgt	r3, r5, r4
    62f0:	addgt	r4, r5, r4, lsl #2
    62f4:	ble	6308 <coda_cursor_read_int32_partial_array+0x1a4>
    62f8:	ldrsb	r2, [r3, #-1]!
    62fc:	cmp	r5, r3
    6300:	str	r2, [r4, #-4]!
    6304:	bne	62f8 <coda_cursor_read_int32_partial_array+0x194>
    6308:	mov	r0, #0
    630c:	add	sp, sp, #16
    6310:	pop	{r4, r5, r6, r7, r8, pc}
    6314:	mov	r1, r8
    6318:	mov	r0, r7
    631c:	mov	r3, r5
    6320:	mov	r2, r4
    6324:	bl	1708 <read_uint8_partial_array>
    6328:	cmp	r0, #0
    632c:	bne	625c <coda_cursor_read_int32_partial_array+0xf8>
    6330:	cmp	r4, #0
    6334:	ble	6308 <coda_cursor_read_int32_partial_array+0x1a4>
    6338:	add	r3, r5, r4
    633c:	add	r4, r5, r4, lsl #2
    6340:	ldrb	r2, [r3, #-1]!
    6344:	cmp	r5, r3
    6348:	str	r2, [r4, #-4]!
    634c:	bne	6340 <coda_cursor_read_int32_partial_array+0x1dc>
    6350:	mov	r0, #0
    6354:	b	630c <coda_cursor_read_int32_partial_array+0x1a8>
    6358:	mov	r1, r8
    635c:	mov	r0, r7
    6360:	mov	r3, r5
    6364:	mov	r2, r4
    6368:	bl	17b8 <read_int16_partial_array>
    636c:	cmp	r0, #0
    6370:	bne	625c <coda_cursor_read_int32_partial_array+0xf8>
    6374:	cmp	r4, #0
    6378:	ble	6308 <coda_cursor_read_int32_partial_array+0x1a4>
    637c:	add	r3, r5, r4, lsl #1
    6380:	add	r4, r5, r4, lsl #2
    6384:	ldrsh	r2, [r3, #-2]!
    6388:	cmp	r3, r5
    638c:	str	r2, [r4, #-4]!
    6390:	bne	6384 <coda_cursor_read_int32_partial_array+0x220>
    6394:	mov	r0, #0
    6398:	b	630c <coda_cursor_read_int32_partial_array+0x1a8>
    639c:	mov	r1, r8
    63a0:	mov	r0, r7
    63a4:	mov	r3, r5
    63a8:	mov	r2, r4
    63ac:	bl	1874 <read_uint16_partial_array>
    63b0:	cmp	r0, #0
    63b4:	bne	625c <coda_cursor_read_int32_partial_array+0xf8>
    63b8:	cmp	r4, #0
    63bc:	ble	6308 <coda_cursor_read_int32_partial_array+0x1a4>
    63c0:	add	r3, r5, r4, lsl #1
    63c4:	add	r4, r5, r4, lsl #2
    63c8:	ldrh	r2, [r3, #-2]!
    63cc:	cmp	r3, r5
    63d0:	str	r2, [r4, #-4]!
    63d4:	bne	63c8 <coda_cursor_read_int32_partial_array+0x264>
    63d8:	mov	r0, #0
    63dc:	b	630c <coda_cursor_read_int32_partial_array+0x1a8>
    63e0:	bl	0 <coda_type_get_class_name>
    63e4:	ldr	r1, [pc, #108]	; 6458 <coda_cursor_read_int32_partial_array+0x2f4>
    63e8:	mov	r2, r0
    63ec:	mvn	r0, #104	; 0x68
    63f0:	bl	0 <coda_set_error>
    63f4:	mvn	r0, #0
    63f8:	b	6260 <coda_cursor_read_int32_partial_array+0xfc>
    63fc:	mvn	r0, #99	; 0x63
    6400:	ldr	r3, [pc, #84]	; 645c <coda_cursor_read_int32_partial_array+0x2f8>
    6404:	ldr	r2, [pc, #84]	; 6460 <coda_cursor_read_int32_partial_array+0x2fc>
    6408:	ldr	r1, [pc, #84]	; 6464 <coda_cursor_read_int32_partial_array+0x300>
    640c:	bl	0 <coda_set_error>
    6410:	mvn	r0, #0
    6414:	b	6260 <coda_cursor_read_int32_partial_array+0xfc>
    6418:	mov	r2, r8
    641c:	ldr	r1, [pc, #68]	; 6468 <coda_cursor_read_int32_partial_array+0x304>
    6420:	mvn	r0, #106	; 0x6a
    6424:	bl	0 <coda_set_error>
    6428:	b	625c <coda_cursor_read_int32_partial_array+0xf8>
    642c:	mvn	r0, #99	; 0x63
    6430:	ldr	r3, [pc, #52]	; 646c <coda_cursor_read_int32_partial_array+0x308>
    6434:	ldr	r2, [pc, #36]	; 6460 <coda_cursor_read_int32_partial_array+0x2fc>
    6438:	ldr	r1, [pc, #48]	; 6470 <coda_cursor_read_int32_partial_array+0x30c>
    643c:	bl	0 <coda_set_error>
    6440:	mvn	r0, #0
    6444:	b	6260 <coda_cursor_read_int32_partial_array+0xfc>
    6448:	.word	0x00000278
    644c:	.word	0x000004e8
    6450:	.word	0x000001d8
    6454:	.word	0x000001dc
    6458:	.word	0x00000480
    645c:	.word	0x000011e8
    6460:	.word	0x00000000
    6464:	.word	0x000000e0
    6468:	.word	0x000004b8
    646c:	.word	0x000011ed
    6470:	.word	0x00000100

00006474 <coda_cursor_read_uint32_partial_array>:
    6474:	push	{r4, r5, r6, r7, r8, lr}
    6478:	subs	r7, r0, #0
    647c:	sub	sp, sp, #16
    6480:	beq	668c <coda_cursor_read_uint32_partial_array+0x218>
    6484:	mov	r5, r3
    6488:	ldr	r3, [r7, #4]
    648c:	cmp	r3, #0
    6490:	ble	668c <coda_cursor_read_uint32_partial_array+0x218>
    6494:	add	r3, r7, r3, lsl #4
    6498:	ldr	r3, [r3, #-8]
    649c:	cmp	r3, #0
    64a0:	beq	668c <coda_cursor_read_uint32_partial_array+0x218>
    64a4:	cmp	r5, #0
    64a8:	beq	66bc <coda_cursor_read_uint32_partial_array+0x248>
    64ac:	mov	r6, r2
    64b0:	ldr	r2, [r3]
    64b4:	mov	r8, r1
    64b8:	cmp	r2, #99	; 0x63
    64bc:	movls	r4, r3
    64c0:	ldrhi	r4, [r3, #4]
    64c4:	ldr	r0, [r4, #8]
    64c8:	cmp	r0, #1
    64cc:	bne	6670 <coda_cursor_read_uint32_partial_array+0x1fc>
    64d0:	ldr	r3, [pc, #512]	; 66d8 <coda_cursor_read_uint32_partial_array+0x264>
    64d4:	bl	0 <__aeabi_read_tp>
    64d8:	ldr	r3, [pc, r3]
    64dc:	ldr	r3, [r0, r3]
    64e0:	cmp	r3, #0
    64e4:	bne	655c <coda_cursor_read_uint32_partial_array+0xe8>
    64e8:	ldr	r2, [r4, #40]	; 0x28
    64ec:	ldr	r3, [r2, #8]
    64f0:	sub	r3, r3, #2
    64f4:	cmp	r3, #1
    64f8:	bls	65ac <coda_cursor_read_uint32_partial_array+0x138>
    64fc:	ldr	r0, [r2, #12]
    6500:	cmp	r0, #3
    6504:	beq	65d8 <coda_cursor_read_uint32_partial_array+0x164>
    6508:	cmp	r0, #5
    650c:	beq	6538 <coda_cursor_read_uint32_partial_array+0xc4>
    6510:	cmp	r0, #1
    6514:	beq	6620 <coda_cursor_read_uint32_partial_array+0x1ac>
    6518:	bl	0 <coda_type_get_native_type_name>
    651c:	ldr	r1, [pc, #440]	; 66dc <coda_cursor_read_uint32_partial_array+0x268>
    6520:	mov	r2, r0
    6524:	mvn	r0, #104	; 0x68
    6528:	bl	0 <coda_set_error>
    652c:	mvn	r0, #0
    6530:	add	sp, sp, #16
    6534:	pop	{r4, r5, r6, r7, r8, pc}
    6538:	mov	r3, r5
    653c:	mov	r2, r6
    6540:	mov	r1, r8
    6544:	mov	r0, r7
    6548:	bl	19e0 <read_uint32_partial_array>
    654c:	adds	r0, r0, #0
    6550:	mvnne	r0, #0
    6554:	add	sp, sp, #16
    6558:	pop	{r4, r5, r6, r7, r8, pc}
    655c:	add	r1, sp, #12
    6560:	mov	r0, r7
    6564:	bl	0 <coda_cursor_get_num_elements>
    6568:	cmp	r0, #0
    656c:	bne	652c <coda_cursor_read_uint32_partial_array+0xb8>
    6570:	cmp	r8, #0
    6574:	ldr	r3, [sp, #12]
    6578:	blt	66a8 <coda_cursor_read_uint32_partial_array+0x234>
    657c:	cmp	r8, r3
    6580:	bge	66a8 <coda_cursor_read_uint32_partial_array+0x234>
    6584:	add	r2, r8, r6
    6588:	cmp	r3, r2
    658c:	bge	64e8 <coda_cursor_read_uint32_partial_array+0x74>
    6590:	str	r3, [sp]
    6594:	mov	r2, r8
    6598:	mov	r3, r6
    659c:	ldr	r1, [pc, #316]	; 66e0 <coda_cursor_read_uint32_partial_array+0x26c>
    65a0:	mvn	r0, #106	; 0x6a
    65a4:	bl	0 <coda_set_error>
    65a8:	b	652c <coda_cursor_read_uint32_partial_array+0xb8>
    65ac:	ldr	r3, [pc, #304]	; 66e4 <coda_cursor_read_uint32_partial_array+0x270>
    65b0:	bl	0 <__aeabi_read_tp>
    65b4:	ldr	r3, [pc, r3]
    65b8:	ldr	r3, [r0, r3]
    65bc:	cmp	r3, #0
    65c0:	beq	64fc <coda_cursor_read_uint32_partial_array+0x88>
    65c4:	ldr	r3, [r2, #48]	; 0x30
    65c8:	cmp	r3, #0
    65cc:	movne	r0, #9
    65d0:	bne	6518 <coda_cursor_read_uint32_partial_array+0xa4>
    65d4:	b	64fc <coda_cursor_read_uint32_partial_array+0x88>
    65d8:	mov	r1, r8
    65dc:	mov	r0, r7
    65e0:	mov	r3, r5
    65e4:	mov	r2, r6
    65e8:	bl	1874 <read_uint16_partial_array>
    65ec:	cmp	r0, #0
    65f0:	bne	652c <coda_cursor_read_uint32_partial_array+0xb8>
    65f4:	cmp	r6, #0
    65f8:	ble	6614 <coda_cursor_read_uint32_partial_array+0x1a0>
    65fc:	add	r3, r5, r6, lsl #1
    6600:	add	r2, r5, r6, lsl #2
    6604:	ldrh	r1, [r3, #-2]!
    6608:	cmp	r3, r5
    660c:	str	r1, [r2, #-4]!
    6610:	bne	6604 <coda_cursor_read_uint32_partial_array+0x190>
    6614:	mov	r0, #0
    6618:	add	sp, sp, #16
    661c:	pop	{r4, r5, r6, r7, r8, pc}
    6620:	mov	r1, r8
    6624:	mov	r0, r7
    6628:	mov	r3, r5
    662c:	mov	r2, r6
    6630:	bl	1708 <read_uint8_partial_array>
    6634:	cmp	r0, #0
    6638:	bne	652c <coda_cursor_read_uint32_partial_array+0xb8>
    663c:	cmp	r6, #0
    6640:	addgt	r3, r5, r6
    6644:	addgt	r2, r5, r6, lsl #2
    6648:	ble	6614 <coda_cursor_read_uint32_partial_array+0x1a0>
    664c:	ldrb	r1, [r3, #-1]!
    6650:	cmp	r5, r3
    6654:	str	r1, [r2, #-4]!
    6658:	beq	6614 <coda_cursor_read_uint32_partial_array+0x1a0>
    665c:	ldrb	r1, [r3, #-1]!
    6660:	cmp	r5, r3
    6664:	str	r1, [r2, #-4]!
    6668:	bne	664c <coda_cursor_read_uint32_partial_array+0x1d8>
    666c:	b	6614 <coda_cursor_read_uint32_partial_array+0x1a0>
    6670:	bl	0 <coda_type_get_class_name>
    6674:	ldr	r1, [pc, #108]	; 66e8 <coda_cursor_read_uint32_partial_array+0x274>
    6678:	mov	r2, r0
    667c:	mvn	r0, #104	; 0x68
    6680:	bl	0 <coda_set_error>
    6684:	mvn	r0, #0
    6688:	b	6530 <coda_cursor_read_uint32_partial_array+0xbc>
    668c:	mvn	r0, #99	; 0x63
    6690:	ldr	r3, [pc, #84]	; 66ec <coda_cursor_read_uint32_partial_array+0x278>
    6694:	ldr	r2, [pc, #84]	; 66f0 <coda_cursor_read_uint32_partial_array+0x27c>
    6698:	ldr	r1, [pc, #84]	; 66f4 <coda_cursor_read_uint32_partial_array+0x280>
    669c:	bl	0 <coda_set_error>
    66a0:	mvn	r0, #0
    66a4:	b	6530 <coda_cursor_read_uint32_partial_array+0xbc>
    66a8:	mov	r2, r8
    66ac:	ldr	r1, [pc, #68]	; 66f8 <coda_cursor_read_uint32_partial_array+0x284>
    66b0:	mvn	r0, #106	; 0x6a
    66b4:	bl	0 <coda_set_error>
    66b8:	b	652c <coda_cursor_read_uint32_partial_array+0xb8>
    66bc:	mvn	r0, #99	; 0x63
    66c0:	ldr	r3, [pc, #52]	; 66fc <coda_cursor_read_uint32_partial_array+0x288>
    66c4:	ldr	r2, [pc, #36]	; 66f0 <coda_cursor_read_uint32_partial_array+0x27c>
    66c8:	ldr	r1, [pc, #48]	; 6700 <coda_cursor_read_uint32_partial_array+0x28c>
    66cc:	bl	0 <coda_set_error>
    66d0:	mvn	r0, #0
    66d4:	b	6530 <coda_cursor_read_uint32_partial_array+0xbc>
    66d8:	.word	0x000001f8
    66dc:	.word	0x0000020c
    66e0:	.word	0x000004e8
    66e4:	.word	0x00000128
    66e8:	.word	0x00000480
    66ec:	.word	0x0000126a
    66f0:	.word	0x00000000
    66f4:	.word	0x000000e0
    66f8:	.word	0x000004b8
    66fc:	.word	0x0000126f
    6700:	.word	0x00000100

00006704 <coda_cursor_read_int64_partial_array>:
    6704:	push	{r4, r5, r6, r7, r8, lr}
    6708:	subs	r7, r0, #0
    670c:	sub	sp, sp, #16
    6710:	beq	6a30 <coda_cursor_read_int64_partial_array+0x32c>
    6714:	mov	r5, r3
    6718:	ldr	r3, [r7, #4]
    671c:	cmp	r3, #0
    6720:	ble	6a30 <coda_cursor_read_int64_partial_array+0x32c>
    6724:	add	r3, r7, r3, lsl #4
    6728:	ldr	r3, [r3, #-8]
    672c:	cmp	r3, #0
    6730:	beq	6a30 <coda_cursor_read_int64_partial_array+0x32c>
    6734:	cmp	r5, #0
    6738:	beq	6a60 <coda_cursor_read_int64_partial_array+0x35c>
    673c:	mov	r4, r2
    6740:	ldr	r2, [r3]
    6744:	mov	r8, r1
    6748:	cmp	r2, #99	; 0x63
    674c:	movls	r6, r3
    6750:	ldrhi	r6, [r3, #4]
    6754:	ldr	r0, [r6, #8]
    6758:	cmp	r0, #1
    675c:	bne	6a14 <coda_cursor_read_int64_partial_array+0x310>
    6760:	ldr	r3, [pc, #788]	; 6a7c <coda_cursor_read_int64_partial_array+0x378>
    6764:	bl	0 <__aeabi_read_tp>
    6768:	ldr	r3, [pc, r3]
    676c:	ldr	r3, [r0, r3]
    6770:	cmp	r3, #0
    6774:	bne	67b8 <coda_cursor_read_int64_partial_array+0xb4>
    6778:	ldr	r2, [r6, #40]	; 0x28
    677c:	ldr	r3, [r2, #8]
    6780:	sub	r3, r3, #2
    6784:	cmp	r3, #1
    6788:	bls	6808 <coda_cursor_read_int64_partial_array+0x104>
    678c:	ldr	r0, [r2, #12]
    6790:	cmp	r0, #6
    6794:	ldrls	pc, [pc, r0, lsl #2]
    6798:	b	6830 <coda_cursor_read_int64_partial_array+0x12c>
    679c:	.word	0x00006850
    67a0:	.word	0x0000689c
    67a4:	.word	0x000068e0
    67a8:	.word	0x00006924
    67ac:	.word	0x00006968
    67b0:	.word	0x000069ac
    67b4:	.word	0x000069f0
    67b8:	add	r1, sp, #12
    67bc:	mov	r0, r7
    67c0:	bl	0 <coda_cursor_get_num_elements>
    67c4:	cmp	r0, #0
    67c8:	bne	6844 <coda_cursor_read_int64_partial_array+0x140>
    67cc:	cmp	r8, #0
    67d0:	ldr	r3, [sp, #12]
    67d4:	blt	6a4c <coda_cursor_read_int64_partial_array+0x348>
    67d8:	cmp	r8, r3
    67dc:	bge	6a4c <coda_cursor_read_int64_partial_array+0x348>
    67e0:	add	r2, r8, r4
    67e4:	cmp	r3, r2
    67e8:	bge	6778 <coda_cursor_read_int64_partial_array+0x74>
    67ec:	str	r3, [sp]
    67f0:	mov	r2, r8
    67f4:	mov	r3, r4
    67f8:	ldr	r1, [pc, #640]	; 6a80 <coda_cursor_read_int64_partial_array+0x37c>
    67fc:	mvn	r0, #106	; 0x6a
    6800:	bl	0 <coda_set_error>
    6804:	b	6844 <coda_cursor_read_int64_partial_array+0x140>
    6808:	ldr	r3, [pc, #628]	; 6a84 <coda_cursor_read_int64_partial_array+0x380>
    680c:	bl	0 <__aeabi_read_tp>
    6810:	ldr	r3, [pc, r3]
    6814:	ldr	r3, [r0, r3]
    6818:	cmp	r3, #0
    681c:	beq	678c <coda_cursor_read_int64_partial_array+0x88>
    6820:	ldr	r3, [r2, #48]	; 0x30
    6824:	cmp	r3, #0
    6828:	movne	r0, #9
    682c:	beq	678c <coda_cursor_read_int64_partial_array+0x88>
    6830:	bl	0 <coda_type_get_native_type_name>
    6834:	ldr	r1, [pc, #588]	; 6a88 <coda_cursor_read_int64_partial_array+0x384>
    6838:	mov	r2, r0
    683c:	mvn	r0, #104	; 0x68
    6840:	bl	0 <coda_set_error>
    6844:	mvn	r0, #0
    6848:	add	sp, sp, #16
    684c:	pop	{r4, r5, r6, r7, r8, pc}
    6850:	mov	r1, r8
    6854:	mov	r0, r7
    6858:	mov	r3, r5
    685c:	mov	r2, r4
    6860:	bl	1650 <read_int8_partial_array>
    6864:	cmp	r0, #0
    6868:	bne	6844 <coda_cursor_read_int64_partial_array+0x140>
    686c:	cmp	r4, #0
    6870:	addgt	r3, r5, r4
    6874:	addgt	r4, r5, r4, lsl #3
    6878:	ble	6890 <coda_cursor_read_int64_partial_array+0x18c>
    687c:	ldrsb	r0, [r3, #-1]!
    6880:	cmp	r5, r3
    6884:	asr	r1, r0, #31
    6888:	strd	r0, [r4, #-8]!
    688c:	bne	687c <coda_cursor_read_int64_partial_array+0x178>
    6890:	mov	r0, #0
    6894:	add	sp, sp, #16
    6898:	pop	{r4, r5, r6, r7, r8, pc}
    689c:	mov	r1, r8
    68a0:	mov	r0, r7
    68a4:	mov	r3, r5
    68a8:	mov	r2, r4
    68ac:	bl	1708 <read_uint8_partial_array>
    68b0:	cmp	r0, #0
    68b4:	bne	6844 <coda_cursor_read_int64_partial_array+0x140>
    68b8:	cmp	r4, #0
    68bc:	ble	6890 <coda_cursor_read_int64_partial_array+0x18c>
    68c0:	add	r3, r5, r4
    68c4:	add	r4, r5, r4, lsl #3
    68c8:	ldrb	r0, [r3, #-1]!
    68cc:	mov	r1, #0
    68d0:	cmp	r5, r3
    68d4:	strd	r0, [r4, #-8]!
    68d8:	bne	68c8 <coda_cursor_read_int64_partial_array+0x1c4>
    68dc:	b	6890 <coda_cursor_read_int64_partial_array+0x18c>
    68e0:	mov	r1, r8
    68e4:	mov	r0, r7
    68e8:	mov	r3, r5
    68ec:	mov	r2, r4
    68f0:	bl	17b8 <read_int16_partial_array>
    68f4:	cmp	r0, #0
    68f8:	bne	6844 <coda_cursor_read_int64_partial_array+0x140>
    68fc:	cmp	r4, #0
    6900:	ble	6890 <coda_cursor_read_int64_partial_array+0x18c>
    6904:	add	r3, r5, r4, lsl #1
    6908:	add	r4, r5, r4, lsl #3
    690c:	ldrsh	r0, [r3, #-2]!
    6910:	cmp	r3, r5
    6914:	asr	r1, r0, #31
    6918:	strd	r0, [r4, #-8]!
    691c:	bne	690c <coda_cursor_read_int64_partial_array+0x208>
    6920:	b	6890 <coda_cursor_read_int64_partial_array+0x18c>
    6924:	mov	r1, r8
    6928:	mov	r0, r7
    692c:	mov	r3, r5
    6930:	mov	r2, r4
    6934:	bl	1874 <read_uint16_partial_array>
    6938:	cmp	r0, #0
    693c:	bne	6844 <coda_cursor_read_int64_partial_array+0x140>
    6940:	cmp	r4, #0
    6944:	ble	6890 <coda_cursor_read_int64_partial_array+0x18c>
    6948:	add	r3, r5, r4, lsl #1
    694c:	add	r4, r5, r4, lsl #3
    6950:	ldrh	r0, [r3, #-2]!
    6954:	mov	r1, #0
    6958:	cmp	r3, r5
    695c:	strd	r0, [r4, #-8]!
    6960:	bne	6950 <coda_cursor_read_int64_partial_array+0x24c>
    6964:	b	6890 <coda_cursor_read_int64_partial_array+0x18c>
    6968:	mov	r1, r8
    696c:	mov	r0, r7
    6970:	mov	r3, r5
    6974:	mov	r2, r4
    6978:	bl	1924 <read_int32_partial_array>
    697c:	cmp	r0, #0
    6980:	bne	6844 <coda_cursor_read_int64_partial_array+0x140>
    6984:	cmp	r4, #0
    6988:	ble	6890 <coda_cursor_read_int64_partial_array+0x18c>
    698c:	add	r1, r5, r4, lsl #2
    6990:	add	r4, r5, r4, lsl #3
    6994:	ldr	r2, [r1, #-4]!
    6998:	cmp	r1, r5
    699c:	asr	r3, r2, #31
    69a0:	strd	r2, [r4, #-8]!
    69a4:	bne	6994 <coda_cursor_read_int64_partial_array+0x290>
    69a8:	b	6890 <coda_cursor_read_int64_partial_array+0x18c>
    69ac:	mov	r1, r8
    69b0:	mov	r0, r7
    69b4:	mov	r3, r5
    69b8:	mov	r2, r4
    69bc:	bl	19e0 <read_uint32_partial_array>
    69c0:	cmp	r0, #0
    69c4:	bne	6844 <coda_cursor_read_int64_partial_array+0x140>
    69c8:	cmp	r4, #0
    69cc:	ble	6890 <coda_cursor_read_int64_partial_array+0x18c>
    69d0:	add	r3, r5, r4, lsl #2
    69d4:	add	r4, r5, r4, lsl #3
    69d8:	ldr	r2, [r3, #-4]!
    69dc:	cmp	r3, r5
    69e0:	str	r2, [r4, #-8]!
    69e4:	str	r0, [r4, #4]
    69e8:	bne	69d8 <coda_cursor_read_int64_partial_array+0x2d4>
    69ec:	b	6890 <coda_cursor_read_int64_partial_array+0x18c>
    69f0:	mov	r3, r5
    69f4:	mov	r2, r4
    69f8:	mov	r1, r8
    69fc:	mov	r0, r7
    6a00:	bl	1a90 <read_int64_partial_array>
    6a04:	adds	r0, r0, #0
    6a08:	mvnne	r0, #0
    6a0c:	add	sp, sp, #16
    6a10:	pop	{r4, r5, r6, r7, r8, pc}
    6a14:	bl	0 <coda_type_get_class_name>
    6a18:	ldr	r1, [pc, #108]	; 6a8c <coda_cursor_read_int64_partial_array+0x388>
    6a1c:	mov	r2, r0
    6a20:	mvn	r0, #104	; 0x68
    6a24:	bl	0 <coda_set_error>
    6a28:	mvn	r0, #0
    6a2c:	b	6848 <coda_cursor_read_int64_partial_array+0x144>
    6a30:	mvn	r0, #99	; 0x63
    6a34:	ldr	r3, [pc, #84]	; 6a90 <coda_cursor_read_int64_partial_array+0x38c>
    6a38:	ldr	r2, [pc, #84]	; 6a94 <coda_cursor_read_int64_partial_array+0x390>
    6a3c:	ldr	r1, [pc, #84]	; 6a98 <coda_cursor_read_int64_partial_array+0x394>
    6a40:	bl	0 <coda_set_error>
    6a44:	mvn	r0, #0
    6a48:	b	6848 <coda_cursor_read_int64_partial_array+0x144>
    6a4c:	mov	r2, r8
    6a50:	ldr	r1, [pc, #68]	; 6a9c <coda_cursor_read_int64_partial_array+0x398>
    6a54:	mvn	r0, #106	; 0x6a
    6a58:	bl	0 <coda_set_error>
    6a5c:	b	6844 <coda_cursor_read_int64_partial_array+0x140>
    6a60:	mvn	r0, #99	; 0x63
    6a64:	ldr	r3, [pc, #52]	; 6aa0 <coda_cursor_read_int64_partial_array+0x39c>
    6a68:	ldr	r2, [pc, #36]	; 6a94 <coda_cursor_read_int64_partial_array+0x390>
    6a6c:	ldr	r1, [pc, #48]	; 6aa4 <coda_cursor_read_int64_partial_array+0x3a0>
    6a70:	bl	0 <coda_set_error>
    6a74:	mvn	r0, #0
    6a78:	b	6848 <coda_cursor_read_int64_partial_array+0x144>
    6a7c:	.word	0x0000030c
    6a80:	.word	0x000004e8
    6a84:	.word	0x0000026c
    6a88:	.word	0x0000023c
    6a8c:	.word	0x00000480
    6a90:	.word	0x000012db
    6a94:	.word	0x00000000
    6a98:	.word	0x000000e0
    6a9c:	.word	0x000004b8
    6aa0:	.word	0x000012e0
    6aa4:	.word	0x00000100

00006aa8 <coda_cursor_read_uint64_partial_array>:
    6aa8:	push	{r4, r5, r6, r7, r8, lr}
    6aac:	subs	r7, r0, #0
    6ab0:	sub	sp, sp, #16
    6ab4:	beq	6d14 <coda_cursor_read_uint64_partial_array+0x26c>
    6ab8:	mov	r6, r3
    6abc:	ldr	r3, [r7, #4]
    6ac0:	cmp	r3, #0
    6ac4:	ble	6d14 <coda_cursor_read_uint64_partial_array+0x26c>
    6ac8:	add	r3, r7, r3, lsl #4
    6acc:	ldr	r3, [r3, #-8]
    6ad0:	cmp	r3, #0
    6ad4:	beq	6d14 <coda_cursor_read_uint64_partial_array+0x26c>
    6ad8:	cmp	r6, #0
    6adc:	beq	6d44 <coda_cursor_read_uint64_partial_array+0x29c>
    6ae0:	mov	r5, r2
    6ae4:	ldr	r2, [r3]
    6ae8:	mov	r8, r1
    6aec:	cmp	r2, #99	; 0x63
    6af0:	movls	r4, r3
    6af4:	ldrhi	r4, [r3, #4]
    6af8:	ldr	r0, [r4, #8]
    6afc:	cmp	r0, #1
    6b00:	bne	6cf8 <coda_cursor_read_uint64_partial_array+0x250>
    6b04:	ldr	r3, [pc, #596]	; 6d60 <coda_cursor_read_uint64_partial_array+0x2b8>
    6b08:	bl	0 <__aeabi_read_tp>
    6b0c:	ldr	r3, [pc, r3]
    6b10:	ldr	r3, [r0, r3]
    6b14:	cmp	r3, #0
    6b18:	bne	6b60 <coda_cursor_read_uint64_partial_array+0xb8>
    6b1c:	ldr	r2, [r4, #40]	; 0x28
    6b20:	ldr	r3, [r2, #8]
    6b24:	sub	r3, r3, #2
    6b28:	cmp	r3, #1
    6b2c:	bls	6bb8 <coda_cursor_read_uint64_partial_array+0x110>
    6b30:	ldr	r0, [r2, #12]
    6b34:	sub	r3, r0, #1
    6b38:	cmp	r3, #6
    6b3c:	ldrls	pc, [pc, r3, lsl #2]
    6b40:	b	6be0 <coda_cursor_read_uint64_partial_array+0x138>
    6b44:	.word	0x00006c1c
    6b48:	.word	0x00006be0
    6b4c:	.word	0x00006c68
    6b50:	.word	0x00006be0
    6b54:	.word	0x00006cb0
    6b58:	.word	0x00006be0
    6b5c:	.word	0x00006bf8
    6b60:	add	r1, sp, #12
    6b64:	mov	r0, r7
    6b68:	bl	0 <coda_cursor_get_num_elements>
    6b6c:	cmp	r0, #0
    6b70:	bne	6bac <coda_cursor_read_uint64_partial_array+0x104>
    6b74:	cmp	r8, #0
    6b78:	ldr	r3, [sp, #12]
    6b7c:	blt	6d30 <coda_cursor_read_uint64_partial_array+0x288>
    6b80:	cmp	r8, r3
    6b84:	bge	6d30 <coda_cursor_read_uint64_partial_array+0x288>
    6b88:	add	r2, r8, r5
    6b8c:	cmp	r3, r2
    6b90:	bge	6b1c <coda_cursor_read_uint64_partial_array+0x74>
    6b94:	str	r3, [sp]
    6b98:	mov	r2, r8
    6b9c:	mov	r3, r5
    6ba0:	ldr	r1, [pc, #444]	; 6d64 <coda_cursor_read_uint64_partial_array+0x2bc>
    6ba4:	mvn	r0, #106	; 0x6a
    6ba8:	bl	0 <coda_set_error>
    6bac:	mvn	r0, #0
    6bb0:	add	sp, sp, #16
    6bb4:	pop	{r4, r5, r6, r7, r8, pc}
    6bb8:	ldr	r3, [pc, #424]	; 6d68 <coda_cursor_read_uint64_partial_array+0x2c0>
    6bbc:	bl	0 <__aeabi_read_tp>
    6bc0:	ldr	r3, [pc, r3]
    6bc4:	ldr	r3, [r0, r3]
    6bc8:	cmp	r3, #0
    6bcc:	beq	6b30 <coda_cursor_read_uint64_partial_array+0x88>
    6bd0:	ldr	r3, [r2, #48]	; 0x30
    6bd4:	cmp	r3, #0
    6bd8:	movne	r0, #9
    6bdc:	beq	6b30 <coda_cursor_read_uint64_partial_array+0x88>
    6be0:	bl	0 <coda_type_get_native_type_name>
    6be4:	ldr	r1, [pc, #384]	; 6d6c <coda_cursor_read_uint64_partial_array+0x2c4>
    6be8:	mov	r2, r0
    6bec:	mvn	r0, #104	; 0x68
    6bf0:	bl	0 <coda_set_error>
    6bf4:	b	6bac <coda_cursor_read_uint64_partial_array+0x104>
    6bf8:	mov	r3, r6
    6bfc:	mov	r2, r5
    6c00:	mov	r1, r8
    6c04:	mov	r0, r7
    6c08:	bl	1b40 <read_uint64_partial_array>
    6c0c:	adds	r0, r0, #0
    6c10:	mvnne	r0, #0
    6c14:	add	sp, sp, #16
    6c18:	pop	{r4, r5, r6, r7, r8, pc}
    6c1c:	mov	r1, r8
    6c20:	mov	r0, r7
    6c24:	mov	r3, r6
    6c28:	mov	r2, r5
    6c2c:	bl	1708 <read_uint8_partial_array>
    6c30:	cmp	r0, #0
    6c34:	bne	6bac <coda_cursor_read_uint64_partial_array+0x104>
    6c38:	cmp	r5, #0
    6c3c:	addgt	r3, r6, r5
    6c40:	addgt	r2, r6, r5, lsl #3
    6c44:	ble	6c5c <coda_cursor_read_uint64_partial_array+0x1b4>
    6c48:	ldrb	r0, [r3, #-1]!
    6c4c:	mov	r1, #0
    6c50:	cmp	r6, r3
    6c54:	strd	r0, [r2, #-8]!
    6c58:	bne	6c48 <coda_cursor_read_uint64_partial_array+0x1a0>
    6c5c:	mov	r0, #0
    6c60:	add	sp, sp, #16
    6c64:	pop	{r4, r5, r6, r7, r8, pc}
    6c68:	mov	r1, r8
    6c6c:	mov	r0, r7
    6c70:	mov	r3, r6
    6c74:	mov	r2, r5
    6c78:	bl	1874 <read_uint16_partial_array>
    6c7c:	cmp	r0, #0
    6c80:	bne	6bac <coda_cursor_read_uint64_partial_array+0x104>
    6c84:	cmp	r5, #0
    6c88:	ble	6c5c <coda_cursor_read_uint64_partial_array+0x1b4>
    6c8c:	add	r3, r6, r5, lsl #1
    6c90:	add	r2, r6, r5, lsl #3
    6c94:	ldrh	r0, [r3, #-2]!
    6c98:	mov	r1, #0
    6c9c:	cmp	r3, r6
    6ca0:	strd	r0, [r2, #-8]!
    6ca4:	bne	6c94 <coda_cursor_read_uint64_partial_array+0x1ec>
    6ca8:	mov	r0, #0
    6cac:	b	6c60 <coda_cursor_read_uint64_partial_array+0x1b8>
    6cb0:	mov	r1, r8
    6cb4:	mov	r0, r7
    6cb8:	mov	r3, r6
    6cbc:	mov	r2, r5
    6cc0:	bl	19e0 <read_uint32_partial_array>
    6cc4:	cmp	r0, #0
    6cc8:	bne	6bac <coda_cursor_read_uint64_partial_array+0x104>
    6ccc:	cmp	r5, #0
    6cd0:	ble	6c5c <coda_cursor_read_uint64_partial_array+0x1b4>
    6cd4:	add	r3, r6, r5, lsl #2
    6cd8:	add	r2, r6, r5, lsl #3
    6cdc:	ldr	r1, [r3, #-4]!
    6ce0:	cmp	r3, r6
    6ce4:	str	r1, [r2, #-8]!
    6ce8:	str	r0, [r2, #4]
    6cec:	bne	6cdc <coda_cursor_read_uint64_partial_array+0x234>
    6cf0:	mov	r0, #0
    6cf4:	b	6c60 <coda_cursor_read_uint64_partial_array+0x1b8>
    6cf8:	bl	0 <coda_type_get_class_name>
    6cfc:	ldr	r1, [pc, #108]	; 6d70 <coda_cursor_read_uint64_partial_array+0x2c8>
    6d00:	mov	r2, r0
    6d04:	mvn	r0, #104	; 0x68
    6d08:	bl	0 <coda_set_error>
    6d0c:	mvn	r0, #0
    6d10:	b	6bb0 <coda_cursor_read_uint64_partial_array+0x108>
    6d14:	mvn	r0, #99	; 0x63
    6d18:	ldr	r3, [pc, #84]	; 6d74 <coda_cursor_read_uint64_partial_array+0x2cc>
    6d1c:	ldr	r2, [pc, #84]	; 6d78 <coda_cursor_read_uint64_partial_array+0x2d0>
    6d20:	ldr	r1, [pc, #84]	; 6d7c <coda_cursor_read_uint64_partial_array+0x2d4>
    6d24:	bl	0 <coda_set_error>
    6d28:	mvn	r0, #0
    6d2c:	b	6bb0 <coda_cursor_read_uint64_partial_array+0x108>
    6d30:	mov	r2, r8
    6d34:	ldr	r1, [pc, #68]	; 6d80 <coda_cursor_read_uint64_partial_array+0x2d8>
    6d38:	mvn	r0, #106	; 0x6a
    6d3c:	bl	0 <coda_set_error>
    6d40:	b	6bac <coda_cursor_read_uint64_partial_array+0x104>
    6d44:	mvn	r0, #99	; 0x63
    6d48:	ldr	r3, [pc, #52]	; 6d84 <coda_cursor_read_uint64_partial_array+0x2dc>
    6d4c:	ldr	r2, [pc, #36]	; 6d78 <coda_cursor_read_uint64_partial_array+0x2d0>
    6d50:	ldr	r1, [pc, #48]	; 6d88 <coda_cursor_read_uint64_partial_array+0x2e0>
    6d54:	bl	0 <coda_set_error>
    6d58:	mvn	r0, #0
    6d5c:	b	6bb0 <coda_cursor_read_uint64_partial_array+0x108>
    6d60:	.word	0x0000024c
    6d64:	.word	0x000004e8
    6d68:	.word	0x000001a0
    6d6c:	.word	0x0000026c
    6d70:	.word	0x00000480
    6d74:	.word	0x00001372
    6d78:	.word	0x00000000
    6d7c:	.word	0x000000e0
    6d80:	.word	0x000004b8
    6d84:	.word	0x00001377
    6d88:	.word	0x00000100

00006d8c <coda_cursor_read_double_partial_array>:
    6d8c:	push	{r4, r5, r6, r7, r8, lr}
    6d90:	subs	r6, r0, #0
    6d94:	sub	sp, sp, #16
    6d98:	beq	7200 <coda_cursor_read_double_partial_array+0x474>
    6d9c:	mov	r4, r3
    6da0:	ldr	r3, [r6, #4]
    6da4:	cmp	r3, #0
    6da8:	ble	7200 <coda_cursor_read_double_partial_array+0x474>
    6dac:	add	r3, r6, r3, lsl #4
    6db0:	ldr	r3, [r3, #-8]
    6db4:	cmp	r3, #0
    6db8:	beq	7200 <coda_cursor_read_double_partial_array+0x474>
    6dbc:	cmp	r4, #0
    6dc0:	beq	7230 <coda_cursor_read_double_partial_array+0x4a4>
    6dc4:	mov	r7, r2
    6dc8:	ldr	r2, [r3]
    6dcc:	mov	r8, r1
    6dd0:	cmp	r2, #99	; 0x63
    6dd4:	movls	r5, r3
    6dd8:	ldrhi	r5, [r3, #4]
    6ddc:	ldr	r0, [r5, #8]
    6de0:	cmp	r0, #1
    6de4:	bne	71e4 <coda_cursor_read_double_partial_array+0x458>
    6de8:	ldr	r3, [pc, #1116]	; 724c <coda_cursor_read_double_partial_array+0x4c0>
    6dec:	bl	0 <__aeabi_read_tp>
    6df0:	ldr	r3, [pc, r3]
    6df4:	ldr	r3, [r0, r3]
    6df8:	cmp	r3, #0
    6dfc:	bne	6e50 <coda_cursor_read_double_partial_array+0xc4>
    6e00:	ldr	r2, [r5, #40]	; 0x28
    6e04:	ldr	r3, [r2, #8]
    6e08:	ldr	r1, [r2, #12]
    6e0c:	sub	r3, r3, #2
    6e10:	cmp	r3, #1
    6e14:	movhi	r5, #0
    6e18:	bls	6ea8 <coda_cursor_read_double_partial_array+0x11c>
    6e1c:	cmp	r1, #9
    6e20:	ldrls	pc, [pc, r1, lsl #2]
    6e24:	b	71c8 <coda_cursor_read_double_partial_array+0x43c>
    6e28:	.word	0x00006f5c
    6e2c:	.word	0x00006fa4
    6e30:	.word	0x00006fec
    6e34:	.word	0x00007034
    6e38:	.word	0x0000707c
    6e3c:	.word	0x000070c0
    6e40:	.word	0x00007104
    6e44:	.word	0x00007144
    6e48:	.word	0x00007184
    6e4c:	.word	0x00006ec4
    6e50:	add	r1, sp, #12
    6e54:	mov	r0, r6
    6e58:	bl	0 <coda_cursor_get_num_elements>
    6e5c:	cmp	r0, #0
    6e60:	bne	6e9c <coda_cursor_read_double_partial_array+0x110>
    6e64:	cmp	r8, #0
    6e68:	ldr	r3, [sp, #12]
    6e6c:	blt	721c <coda_cursor_read_double_partial_array+0x490>
    6e70:	cmp	r8, r3
    6e74:	bge	721c <coda_cursor_read_double_partial_array+0x490>
    6e78:	add	r2, r8, r7
    6e7c:	cmp	r3, r2
    6e80:	bge	6e00 <coda_cursor_read_double_partial_array+0x74>
    6e84:	str	r3, [sp]
    6e88:	mov	r2, r8
    6e8c:	mov	r3, r7
    6e90:	ldr	r1, [pc, #952]	; 7250 <coda_cursor_read_double_partial_array+0x4c4>
    6e94:	mvn	r0, #106	; 0x6a
    6e98:	bl	0 <coda_set_error>
    6e9c:	mvn	r0, #0
    6ea0:	add	sp, sp, #16
    6ea4:	pop	{r4, r5, r6, r7, r8, pc}
    6ea8:	ldr	r3, [pc, #932]	; 7254 <coda_cursor_read_double_partial_array+0x4c8>
    6eac:	bl	0 <__aeabi_read_tp>
    6eb0:	ldr	r3, [pc, r3]
    6eb4:	ldr	r5, [r0, r3]
    6eb8:	cmp	r5, #0
    6ebc:	ldrne	r5, [r2, #48]	; 0x30
    6ec0:	b	6e1c <coda_cursor_read_double_partial_array+0x90>
    6ec4:	mov	r1, r8
    6ec8:	mov	r0, r6
    6ecc:	mov	r3, r4
    6ed0:	mov	r2, r7
    6ed4:	bl	2e78 <read_double_partial_array>
    6ed8:	cmp	r0, #0
    6edc:	bne	6e9c <coda_cursor_read_double_partial_array+0x110>
    6ee0:	cmp	r5, #0
    6ee4:	beq	6f50 <coda_cursor_read_double_partial_array+0x1c4>
    6ee8:	cmp	r7, #0
    6eec:	ble	6f50 <coda_cursor_read_double_partial_array+0x1c4>
    6ef0:	mov	r6, #0
    6ef4:	b	6f24 <coda_cursor_read_double_partial_array+0x198>
    6ef8:	vldr	d6, [r5]
    6efc:	vldr	d4, [r5, #8]
    6f00:	vldr	d5, [r5, #16]
    6f04:	add	r6, r6, #1
    6f08:	vmul.f64	d7, d7, d6
    6f0c:	cmp	r7, r6
    6f10:	add	r4, r4, #8
    6f14:	vdiv.f64	d6, d7, d4
    6f18:	vadd.f64	d6, d6, d5
    6f1c:	vstr	d6, [r4, #-8]
    6f20:	beq	6f50 <coda_cursor_read_double_partial_array+0x1c4>
    6f24:	vldr	d7, [r4]
    6f28:	vldr	d6, [r5, #24]
    6f2c:	vcmp.f64	d7, d6
    6f30:	vmrs	APSR_nzcv, fpscr
    6f34:	bne	6ef8 <coda_cursor_read_double_partial_array+0x16c>
    6f38:	bl	0 <coda_NaN>
    6f3c:	add	r6, r6, #1
    6f40:	cmp	r7, r6
    6f44:	add	r4, r4, #8
    6f48:	vstr	d0, [r4, #-8]
    6f4c:	bne	6f24 <coda_cursor_read_double_partial_array+0x198>
    6f50:	mov	r0, #0
    6f54:	add	sp, sp, #16
    6f58:	pop	{r4, r5, r6, r7, r8, pc}
    6f5c:	mov	r1, r8
    6f60:	mov	r0, r6
    6f64:	mov	r3, r4
    6f68:	mov	r2, r7
    6f6c:	bl	1650 <read_int8_partial_array>
    6f70:	cmp	r0, #0
    6f74:	bne	6e9c <coda_cursor_read_double_partial_array+0x110>
    6f78:	cmp	r7, #0
    6f7c:	ble	6ee0 <coda_cursor_read_double_partial_array+0x154>
    6f80:	add	r3, r4, r7
    6f84:	add	r2, r4, r7, lsl #3
    6f88:	ldrsb	r1, [r3, #-1]!
    6f8c:	cmp	r4, r3
    6f90:	vmov	s14, r1
    6f94:	vcvt.f64.s32	d7, s14
    6f98:	vstmdb	r2!, {d7}
    6f9c:	bne	6f88 <coda_cursor_read_double_partial_array+0x1fc>
    6fa0:	b	6ee0 <coda_cursor_read_double_partial_array+0x154>
    6fa4:	mov	r1, r8
    6fa8:	mov	r0, r6
    6fac:	mov	r3, r4
    6fb0:	mov	r2, r7
    6fb4:	bl	1708 <read_uint8_partial_array>
    6fb8:	cmp	r0, #0
    6fbc:	bne	6e9c <coda_cursor_read_double_partial_array+0x110>
    6fc0:	cmp	r7, #0
    6fc4:	ble	6ee0 <coda_cursor_read_double_partial_array+0x154>
    6fc8:	add	r3, r4, r7
    6fcc:	add	r2, r4, r7, lsl #3
    6fd0:	ldrb	r1, [r3, #-1]!
    6fd4:	cmp	r4, r3
    6fd8:	vmov	s14, r1
    6fdc:	vcvt.f64.u32	d7, s14
    6fe0:	vstmdb	r2!, {d7}
    6fe4:	bne	6fd0 <coda_cursor_read_double_partial_array+0x244>
    6fe8:	b	6ee0 <coda_cursor_read_double_partial_array+0x154>
    6fec:	mov	r1, r8
    6ff0:	mov	r0, r6
    6ff4:	mov	r3, r4
    6ff8:	mov	r2, r7
    6ffc:	bl	17b8 <read_int16_partial_array>
    7000:	cmp	r0, #0
    7004:	bne	6e9c <coda_cursor_read_double_partial_array+0x110>
    7008:	cmp	r7, #0
    700c:	ble	6ee0 <coda_cursor_read_double_partial_array+0x154>
    7010:	add	r3, r4, r7, lsl #1
    7014:	add	r2, r4, r7, lsl #3
    7018:	ldrsh	r1, [r3, #-2]!
    701c:	cmp	r4, r3
    7020:	vmov	s14, r1
    7024:	vcvt.f64.s32	d7, s14
    7028:	vstmdb	r2!, {d7}
    702c:	bne	7018 <coda_cursor_read_double_partial_array+0x28c>
    7030:	b	6ee0 <coda_cursor_read_double_partial_array+0x154>
    7034:	mov	r1, r8
    7038:	mov	r0, r6
    703c:	mov	r3, r4
    7040:	mov	r2, r7
    7044:	bl	1874 <read_uint16_partial_array>
    7048:	cmp	r0, #0
    704c:	bne	6e9c <coda_cursor_read_double_partial_array+0x110>
    7050:	cmp	r7, #0
    7054:	ble	6ee0 <coda_cursor_read_double_partial_array+0x154>
    7058:	add	r3, r4, r7, lsl #1
    705c:	add	r2, r4, r7, lsl #3
    7060:	ldrh	r1, [r3, #-2]!
    7064:	cmp	r3, r4
    7068:	vmov	s14, r1
    706c:	vcvt.f64.u32	d7, s14
    7070:	vstmdb	r2!, {d7}
    7074:	bne	7060 <coda_cursor_read_double_partial_array+0x2d4>
    7078:	b	6ee0 <coda_cursor_read_double_partial_array+0x154>
    707c:	mov	r1, r8
    7080:	mov	r0, r6
    7084:	mov	r3, r4
    7088:	mov	r2, r7
    708c:	bl	1924 <read_int32_partial_array>
    7090:	cmp	r0, #0
    7094:	bne	6e9c <coda_cursor_read_double_partial_array+0x110>
    7098:	cmp	r7, #0
    709c:	ble	6ee0 <coda_cursor_read_double_partial_array+0x154>
    70a0:	add	r3, r4, r7, lsl #2
    70a4:	add	r2, r4, r7, lsl #3
    70a8:	vldmdb	r3!, {s14}
    70ac:	vcvt.f64.s32	d7, s14
    70b0:	cmp	r3, r4
    70b4:	vstmdb	r2!, {d7}
    70b8:	bne	70a8 <coda_cursor_read_double_partial_array+0x31c>
    70bc:	b	6ee0 <coda_cursor_read_double_partial_array+0x154>
    70c0:	mov	r1, r8
    70c4:	mov	r0, r6
    70c8:	mov	r3, r4
    70cc:	mov	r2, r7
    70d0:	bl	19e0 <read_uint32_partial_array>
    70d4:	cmp	r0, #0
    70d8:	bne	6e9c <coda_cursor_read_double_partial_array+0x110>
    70dc:	cmp	r7, #0
    70e0:	ble	6ee0 <coda_cursor_read_double_partial_array+0x154>
    70e4:	add	r3, r4, r7, lsl #2
    70e8:	add	r2, r4, r7, lsl #3
    70ec:	vldmdb	r3!, {s14}
    70f0:	vcvt.f64.u32	d7, s14
    70f4:	cmp	r3, r4
    70f8:	vstmdb	r2!, {d7}
    70fc:	bne	70ec <coda_cursor_read_double_partial_array+0x360>
    7100:	b	6ee0 <coda_cursor_read_double_partial_array+0x154>
    7104:	mov	r1, r8
    7108:	mov	r0, r6
    710c:	mov	r3, r4
    7110:	mov	r2, r7
    7114:	bl	1a90 <read_int64_partial_array>
    7118:	cmp	r0, #0
    711c:	bne	6e9c <coda_cursor_read_double_partial_array+0x110>
    7120:	cmp	r7, #0
    7124:	ble	6ee0 <coda_cursor_read_double_partial_array+0x154>
    7128:	add	r6, r4, r7, lsl #3
    712c:	ldrd	r0, [r6, #-8]
    7130:	bl	0 <__aeabi_l2d>
    7134:	strd	r0, [r6, #-8]!
    7138:	cmp	r6, r4
    713c:	bne	712c <coda_cursor_read_double_partial_array+0x3a0>
    7140:	b	6ee0 <coda_cursor_read_double_partial_array+0x154>
    7144:	mov	r1, r8
    7148:	mov	r0, r6
    714c:	mov	r3, r4
    7150:	mov	r2, r7
    7154:	bl	1b40 <read_uint64_partial_array>
    7158:	cmp	r0, #0
    715c:	bne	6e9c <coda_cursor_read_double_partial_array+0x110>
    7160:	cmp	r7, #0
    7164:	ble	6ee0 <coda_cursor_read_double_partial_array+0x154>
    7168:	add	r6, r4, r7, lsl #3
    716c:	ldrd	r0, [r6, #-8]
    7170:	bl	0 <__aeabi_ul2d>
    7174:	strd	r0, [r6, #-8]!
    7178:	cmp	r6, r4
    717c:	bne	716c <coda_cursor_read_double_partial_array+0x3e0>
    7180:	b	6ee0 <coda_cursor_read_double_partial_array+0x154>
    7184:	mov	r1, r8
    7188:	mov	r0, r6
    718c:	mov	r3, r4
    7190:	mov	r2, r7
    7194:	bl	1be4 <read_float_partial_array>
    7198:	cmp	r0, #0
    719c:	bne	6e9c <coda_cursor_read_double_partial_array+0x110>
    71a0:	cmp	r7, #0
    71a4:	ble	6ee0 <coda_cursor_read_double_partial_array+0x154>
    71a8:	add	r3, r4, r7, lsl #2
    71ac:	add	r2, r4, r7, lsl #3
    71b0:	vldmdb	r3!, {s14}
    71b4:	vcvt.f64.f32	d7, s14
    71b8:	cmp	r3, r4
    71bc:	vstmdb	r2!, {d7}
    71c0:	bne	71b0 <coda_cursor_read_double_partial_array+0x424>
    71c4:	b	6ee0 <coda_cursor_read_double_partial_array+0x154>
    71c8:	mov	r0, r1
    71cc:	bl	0 <coda_type_get_native_type_name>
    71d0:	ldr	r1, [pc, #128]	; 7258 <coda_cursor_read_double_partial_array+0x4cc>
    71d4:	mov	r2, r0
    71d8:	mvn	r0, #104	; 0x68
    71dc:	bl	0 <coda_set_error>
    71e0:	b	6e9c <coda_cursor_read_double_partial_array+0x110>
    71e4:	bl	0 <coda_type_get_class_name>
    71e8:	ldr	r1, [pc, #108]	; 725c <coda_cursor_read_double_partial_array+0x4d0>
    71ec:	mov	r2, r0
    71f0:	mvn	r0, #104	; 0x68
    71f4:	bl	0 <coda_set_error>
    71f8:	mvn	r0, #0
    71fc:	b	6f54 <coda_cursor_read_double_partial_array+0x1c8>
    7200:	mvn	r0, #99	; 0x63
    7204:	ldr	r3, [pc, #84]	; 7260 <coda_cursor_read_double_partial_array+0x4d4>
    7208:	ldr	r2, [pc, #84]	; 7264 <coda_cursor_read_double_partial_array+0x4d8>
    720c:	ldr	r1, [pc, #84]	; 7268 <coda_cursor_read_double_partial_array+0x4dc>
    7210:	bl	0 <coda_set_error>
    7214:	mvn	r0, #0
    7218:	b	6f54 <coda_cursor_read_double_partial_array+0x1c8>
    721c:	mov	r2, r8
    7220:	ldr	r1, [pc, #68]	; 726c <coda_cursor_read_double_partial_array+0x4e0>
    7224:	mvn	r0, #106	; 0x6a
    7228:	bl	0 <coda_set_error>
    722c:	b	6e9c <coda_cursor_read_double_partial_array+0x110>
    7230:	mvn	r0, #99	; 0x63
    7234:	ldr	r3, [pc, #52]	; 7270 <coda_cursor_read_double_partial_array+0x4e4>
    7238:	ldr	r2, [pc, #36]	; 7264 <coda_cursor_read_double_partial_array+0x4d8>
    723c:	ldr	r1, [pc, #48]	; 7274 <coda_cursor_read_double_partial_array+0x4e8>
    7240:	bl	0 <coda_set_error>
    7244:	mvn	r0, #0
    7248:	b	6f54 <coda_cursor_read_double_partial_array+0x1c8>
    724c:	.word	0x00000454
    7250:	.word	0x000004e8
    7254:	.word	0x0000039c
    7258:	.word	0x0000029c
    725c:	.word	0x00000480
    7260:	.word	0x000014eb
    7264:	.word	0x00000000
    7268:	.word	0x000000e0
    726c:	.word	0x000004b8
    7270:	.word	0x000014f0
    7274:	.word	0x00000100

00007278 <coda_cursor_read_float_partial_array>:
    7278:	push	{r4, r5, r6, r7, r8, r9, lr}
    727c:	subs	r8, r0, #0
    7280:	sub	sp, sp, #20
    7284:	beq	7710 <coda_cursor_read_float_partial_array+0x498>
    7288:	mov	r7, r3
    728c:	ldr	r3, [r8, #4]
    7290:	cmp	r3, #0
    7294:	ble	7710 <coda_cursor_read_float_partial_array+0x498>
    7298:	add	r3, r8, r3, lsl #4
    729c:	ldr	r3, [r3, #-8]
    72a0:	cmp	r3, #0
    72a4:	beq	7710 <coda_cursor_read_float_partial_array+0x498>
    72a8:	cmp	r7, #0
    72ac:	beq	7780 <coda_cursor_read_float_partial_array+0x508>
    72b0:	mov	r5, r2
    72b4:	ldr	r2, [r3]
    72b8:	mov	r9, r1
    72bc:	cmp	r2, #99	; 0x63
    72c0:	movls	r4, r3
    72c4:	ldrhi	r4, [r3, #4]
    72c8:	ldr	r0, [r4, #8]
    72cc:	cmp	r0, #1
    72d0:	bne	76f4 <coda_cursor_read_float_partial_array+0x47c>
    72d4:	ldr	r3, [pc, #1256]	; 77c4 <coda_cursor_read_float_partial_array+0x54c>
    72d8:	bl	0 <__aeabi_read_tp>
    72dc:	ldr	r3, [pc, r3]
    72e0:	ldr	r3, [r0, r3]
    72e4:	cmp	r3, #0
    72e8:	bne	7338 <coda_cursor_read_float_partial_array+0xc0>
    72ec:	ldr	r2, [r4, #40]	; 0x28
    72f0:	ldr	r3, [r2, #8]
    72f4:	sub	r3, r3, #2
    72f8:	cmp	r3, #1
    72fc:	bls	738c <coda_cursor_read_float_partial_array+0x114>
    7300:	ldr	r0, [r2, #12]
    7304:	cmp	r0, #9
    7308:	ldrls	pc, [pc, r0, lsl #2]
    730c:	b	772c <coda_cursor_read_float_partial_array+0x4b4>
    7310:	.word	0x00007418
    7314:	.word	0x00007654
    7318:	.word	0x0000760c
    731c:	.word	0x000075c4
    7320:	.word	0x00007584
    7324:	.word	0x00007544
    7328:	.word	0x000074ec
    732c:	.word	0x0000769c
    7330:	.word	0x000074cc
    7334:	.word	0x0000746c
    7338:	add	r1, sp, #12
    733c:	mov	r0, r8
    7340:	bl	0 <coda_cursor_get_num_elements>
    7344:	cmp	r0, #0
    7348:	bne	7384 <coda_cursor_read_float_partial_array+0x10c>
    734c:	cmp	r9, #0
    7350:	ldr	r3, [sp, #12]
    7354:	blt	7754 <coda_cursor_read_float_partial_array+0x4dc>
    7358:	cmp	r9, r3
    735c:	bge	7754 <coda_cursor_read_float_partial_array+0x4dc>
    7360:	add	r2, r9, r5
    7364:	cmp	r3, r2
    7368:	bge	72ec <coda_cursor_read_float_partial_array+0x74>
    736c:	str	r3, [sp]
    7370:	mov	r2, r9
    7374:	mov	r3, r5
    7378:	ldr	r1, [pc, #1096]	; 77c8 <coda_cursor_read_float_partial_array+0x550>
    737c:	mvn	r0, #106	; 0x6a
    7380:	bl	0 <coda_set_error>
    7384:	mvn	r8, #0
    7388:	b	740c <coda_cursor_read_float_partial_array+0x194>
    738c:	ldr	r3, [pc, #1080]	; 77cc <coda_cursor_read_float_partial_array+0x554>
    7390:	bl	0 <__aeabi_read_tp>
    7394:	ldr	r3, [pc, r3]
    7398:	ldr	r3, [r0, r3]
    739c:	cmp	r3, #0
    73a0:	beq	7300 <coda_cursor_read_float_partial_array+0x88>
    73a4:	ldr	r3, [r2, #48]	; 0x30
    73a8:	cmp	r3, #0
    73ac:	beq	7300 <coda_cursor_read_float_partial_array+0x88>
    73b0:	lsl	r4, r5, #3
    73b4:	mov	r0, r4
    73b8:	bl	0 <malloc>
    73bc:	subs	r6, r0, #0
    73c0:	beq	7768 <coda_cursor_read_float_partial_array+0x4f0>
    73c4:	mov	r0, r8
    73c8:	mov	r1, r9
    73cc:	mov	r3, r6
    73d0:	mov	r2, r5
    73d4:	bl	6d8c <coda_cursor_read_double_partial_array>
    73d8:	subs	r8, r0, #0
    73dc:	bne	7744 <coda_cursor_read_float_partial_array+0x4cc>
    73e0:	cmp	r5, #0
    73e4:	ble	7404 <coda_cursor_read_float_partial_array+0x18c>
    73e8:	add	r0, r6, r4
    73ec:	add	r2, r7, r5, lsl #2
    73f0:	vldmdb	r0!, {d7}
    73f4:	vcvt.f32.f64	s14, d7
    73f8:	cmp	r0, r6
    73fc:	vstmdb	r2!, {s14}
    7400:	bne	73f0 <coda_cursor_read_float_partial_array+0x178>
    7404:	mov	r0, r6
    7408:	bl	0 <free>
    740c:	mov	r0, r8
    7410:	add	sp, sp, #20
    7414:	pop	{r4, r5, r6, r7, r8, r9, pc}
    7418:	mov	r1, r9
    741c:	mov	r0, r8
    7420:	mov	r3, r7
    7424:	mov	r2, r5
    7428:	bl	1650 <read_int8_partial_array>
    742c:	cmp	r0, #0
    7430:	bne	7384 <coda_cursor_read_float_partial_array+0x10c>
    7434:	cmp	r5, #0
    7438:	addgt	r3, r7, r5
    743c:	addgt	r2, r7, r5, lsl #2
    7440:	ble	745c <coda_cursor_read_float_partial_array+0x1e4>
    7444:	ldrsb	r1, [r3, #-1]!
    7448:	cmp	r7, r3
    744c:	vmov	s15, r1
    7450:	vcvt.f32.s32	s15, s15
    7454:	vstmdb	r2!, {s15}
    7458:	bne	7444 <coda_cursor_read_float_partial_array+0x1cc>
    745c:	mov	r8, #0
    7460:	mov	r0, r8
    7464:	add	sp, sp, #20
    7468:	pop	{r4, r5, r6, r7, r8, r9, pc}
    746c:	lsl	r6, r5, #3
    7470:	mov	r0, r6
    7474:	bl	0 <malloc>
    7478:	subs	r4, r0, #0
    747c:	beq	77ac <coda_cursor_read_float_partial_array+0x534>
    7480:	mov	r0, r8
    7484:	mov	r1, r9
    7488:	mov	r3, r4
    748c:	mov	r2, r5
    7490:	bl	2e78 <read_double_partial_array>
    7494:	subs	r8, r0, #0
    7498:	bne	779c <coda_cursor_read_float_partial_array+0x524>
    749c:	cmp	r5, #0
    74a0:	addgt	r3, r4, r6
    74a4:	addgt	r2, r7, r5, lsl #2
    74a8:	ble	74c0 <coda_cursor_read_float_partial_array+0x248>
    74ac:	vldmdb	r3!, {d7}
    74b0:	vcvt.f32.f64	s14, d7
    74b4:	cmp	r3, r4
    74b8:	vstmdb	r2!, {s14}
    74bc:	bne	74ac <coda_cursor_read_float_partial_array+0x234>
    74c0:	mov	r0, r4
    74c4:	bl	0 <free>
    74c8:	b	740c <coda_cursor_read_float_partial_array+0x194>
    74cc:	mov	r0, r8
    74d0:	mov	r3, r7
    74d4:	mov	r2, r5
    74d8:	mov	r1, r9
    74dc:	bl	1be4 <read_float_partial_array>
    74e0:	adds	r8, r0, #0
    74e4:	mvnne	r8, #0
    74e8:	b	740c <coda_cursor_read_float_partial_array+0x194>
    74ec:	lsl	r4, r5, #3
    74f0:	mov	r0, r4
    74f4:	bl	0 <malloc>
    74f8:	subs	r6, r0, #0
    74fc:	beq	7768 <coda_cursor_read_float_partial_array+0x4f0>
    7500:	mov	r0, r8
    7504:	mov	r1, r9
    7508:	mov	r3, r6
    750c:	mov	r2, r5
    7510:	bl	1a90 <read_int64_partial_array>
    7514:	subs	r8, r0, #0
    7518:	bne	7744 <coda_cursor_read_float_partial_array+0x4cc>
    751c:	cmp	r5, #0
    7520:	ble	7404 <coda_cursor_read_float_partial_array+0x18c>
    7524:	add	r4, r6, r4
    7528:	add	r5, r7, r5, lsl #2
    752c:	ldrd	r0, [r4, #-8]!
    7530:	bl	0 <__aeabi_l2f>
    7534:	cmp	r4, r6
    7538:	str	r0, [r5, #-4]!
    753c:	bne	752c <coda_cursor_read_float_partial_array+0x2b4>
    7540:	b	7404 <coda_cursor_read_float_partial_array+0x18c>
    7544:	mov	r1, r9
    7548:	mov	r0, r8
    754c:	mov	r3, r7
    7550:	mov	r2, r5
    7554:	bl	19e0 <read_uint32_partial_array>
    7558:	cmp	r0, #0
    755c:	bne	7384 <coda_cursor_read_float_partial_array+0x10c>
    7560:	cmp	r5, #0
    7564:	ble	745c <coda_cursor_read_float_partial_array+0x1e4>
    7568:	add	r2, r7, r5, lsl #2
    756c:	vldr	s15, [r2, #-4]
    7570:	vcvt.f32.u32	s15, s15
    7574:	vstmdb	r2!, {s15}
    7578:	cmp	r2, r7
    757c:	bne	756c <coda_cursor_read_float_partial_array+0x2f4>
    7580:	b	745c <coda_cursor_read_float_partial_array+0x1e4>
    7584:	mov	r1, r9
    7588:	mov	r0, r8
    758c:	mov	r3, r7
    7590:	mov	r2, r5
    7594:	bl	1924 <read_int32_partial_array>
    7598:	cmp	r0, #0
    759c:	bne	7384 <coda_cursor_read_float_partial_array+0x10c>
    75a0:	cmp	r5, #0
    75a4:	ble	745c <coda_cursor_read_float_partial_array+0x1e4>
    75a8:	add	r2, r7, r5, lsl #2
    75ac:	vldr	s15, [r2, #-4]
    75b0:	vcvt.f32.s32	s15, s15
    75b4:	vstmdb	r2!, {s15}
    75b8:	cmp	r2, r7
    75bc:	bne	75ac <coda_cursor_read_float_partial_array+0x334>
    75c0:	b	745c <coda_cursor_read_float_partial_array+0x1e4>
    75c4:	mov	r1, r9
    75c8:	mov	r0, r8
    75cc:	mov	r3, r7
    75d0:	mov	r2, r5
    75d4:	bl	1874 <read_uint16_partial_array>
    75d8:	cmp	r0, #0
    75dc:	bne	7384 <coda_cursor_read_float_partial_array+0x10c>
    75e0:	cmp	r5, #0
    75e4:	ble	745c <coda_cursor_read_float_partial_array+0x1e4>
    75e8:	add	r3, r7, r5, lsl #1
    75ec:	add	r2, r7, r5, lsl #2
    75f0:	ldrh	r1, [r3, #-2]!
    75f4:	cmp	r3, r7
    75f8:	vmov	s15, r1
    75fc:	vcvt.f32.u32	s15, s15
    7600:	vstmdb	r2!, {s15}
    7604:	bne	75f0 <coda_cursor_read_float_partial_array+0x378>
    7608:	b	745c <coda_cursor_read_float_partial_array+0x1e4>
    760c:	mov	r1, r9
    7610:	mov	r0, r8
    7614:	mov	r3, r7
    7618:	mov	r2, r5
    761c:	bl	17b8 <read_int16_partial_array>
    7620:	cmp	r0, #0
    7624:	bne	7384 <coda_cursor_read_float_partial_array+0x10c>
    7628:	cmp	r5, #0
    762c:	ble	745c <coda_cursor_read_float_partial_array+0x1e4>
    7630:	add	r3, r7, r5, lsl #1
    7634:	add	r2, r7, r5, lsl #2
    7638:	ldrsh	r1, [r3, #-2]!
    763c:	cmp	r7, r3
    7640:	vmov	s15, r1
    7644:	vcvt.f32.s32	s15, s15
    7648:	vstmdb	r2!, {s15}
    764c:	bne	7638 <coda_cursor_read_float_partial_array+0x3c0>
    7650:	b	745c <coda_cursor_read_float_partial_array+0x1e4>
    7654:	mov	r1, r9
    7658:	mov	r0, r8
    765c:	mov	r3, r7
    7660:	mov	r2, r5
    7664:	bl	1708 <read_uint8_partial_array>
    7668:	cmp	r0, #0
    766c:	bne	7384 <coda_cursor_read_float_partial_array+0x10c>
    7670:	cmp	r5, #0
    7674:	ble	745c <coda_cursor_read_float_partial_array+0x1e4>
    7678:	add	r3, r7, r5
    767c:	add	r2, r7, r5, lsl #2
    7680:	ldrb	r1, [r3, #-1]!
    7684:	cmp	r7, r3
    7688:	vmov	s15, r1
    768c:	vcvt.f32.u32	s15, s15
    7690:	vstmdb	r2!, {s15}
    7694:	bne	7680 <coda_cursor_read_float_partial_array+0x408>
    7698:	b	745c <coda_cursor_read_float_partial_array+0x1e4>
    769c:	lsl	r4, r5, #3
    76a0:	mov	r0, r4
    76a4:	bl	0 <malloc>
    76a8:	subs	r6, r0, #0
    76ac:	beq	7768 <coda_cursor_read_float_partial_array+0x4f0>
    76b0:	mov	r0, r8
    76b4:	mov	r1, r9
    76b8:	mov	r3, r6
    76bc:	mov	r2, r5
    76c0:	bl	1b40 <read_uint64_partial_array>
    76c4:	subs	r8, r0, #0
    76c8:	bne	7744 <coda_cursor_read_float_partial_array+0x4cc>
    76cc:	cmp	r5, #0
    76d0:	addgt	r4, r6, r4
    76d4:	addgt	r5, r7, r5, lsl #2
    76d8:	ble	7404 <coda_cursor_read_float_partial_array+0x18c>
    76dc:	ldrd	r0, [r4, #-8]!
    76e0:	bl	0 <__aeabi_ul2f>
    76e4:	cmp	r4, r6
    76e8:	str	r0, [r5, #-4]!
    76ec:	bne	76dc <coda_cursor_read_float_partial_array+0x464>
    76f0:	b	7404 <coda_cursor_read_float_partial_array+0x18c>
    76f4:	bl	0 <coda_type_get_class_name>
    76f8:	ldr	r1, [pc, #208]	; 77d0 <coda_cursor_read_float_partial_array+0x558>
    76fc:	mvn	r8, #0
    7700:	mov	r2, r0
    7704:	mvn	r0, #104	; 0x68
    7708:	bl	0 <coda_set_error>
    770c:	b	740c <coda_cursor_read_float_partial_array+0x194>
    7710:	ldr	r3, [pc, #188]	; 77d4 <coda_cursor_read_float_partial_array+0x55c>
    7714:	ldr	r2, [pc, #188]	; 77d8 <coda_cursor_read_float_partial_array+0x560>
    7718:	ldr	r1, [pc, #188]	; 77dc <coda_cursor_read_float_partial_array+0x564>
    771c:	mvn	r0, #99	; 0x63
    7720:	bl	0 <coda_set_error>
    7724:	mvn	r8, #0
    7728:	b	740c <coda_cursor_read_float_partial_array+0x194>
    772c:	bl	0 <coda_type_get_native_type_name>
    7730:	ldr	r1, [pc, #168]	; 77e0 <coda_cursor_read_float_partial_array+0x568>
    7734:	mov	r2, r0
    7738:	mvn	r0, #104	; 0x68
    773c:	bl	0 <coda_set_error>
    7740:	b	7384 <coda_cursor_read_float_partial_array+0x10c>
    7744:	mov	r0, r6
    7748:	bl	0 <free>
    774c:	mvn	r8, #0
    7750:	b	740c <coda_cursor_read_float_partial_array+0x194>
    7754:	mov	r2, r9
    7758:	ldr	r1, [pc, #132]	; 77e4 <coda_cursor_read_float_partial_array+0x56c>
    775c:	mvn	r0, #106	; 0x6a
    7760:	bl	0 <coda_set_error>
    7764:	b	7384 <coda_cursor_read_float_partial_array+0x10c>
    7768:	mov	r2, r4
    776c:	ldr	r1, [pc, #116]	; 77e8 <coda_cursor_read_float_partial_array+0x570>
    7770:	mvn	r0, #0
    7774:	bl	0 <coda_set_error>
    7778:	mvn	r8, #0
    777c:	b	740c <coda_cursor_read_float_partial_array+0x194>
    7780:	ldr	r3, [pc, #100]	; 77ec <coda_cursor_read_float_partial_array+0x574>
    7784:	ldr	r2, [pc, #76]	; 77d8 <coda_cursor_read_float_partial_array+0x560>
    7788:	ldr	r1, [pc, #96]	; 77f0 <coda_cursor_read_float_partial_array+0x578>
    778c:	mvn	r0, #99	; 0x63
    7790:	bl	0 <coda_set_error>
    7794:	mvn	r8, #0
    7798:	b	740c <coda_cursor_read_float_partial_array+0x194>
    779c:	mov	r0, r4
    77a0:	bl	0 <free>
    77a4:	mvn	r8, #0
    77a8:	b	740c <coda_cursor_read_float_partial_array+0x194>
    77ac:	mov	r2, r6
    77b0:	ldr	r1, [pc, #48]	; 77e8 <coda_cursor_read_float_partial_array+0x570>
    77b4:	mvn	r0, #0
    77b8:	bl	0 <coda_set_error>
    77bc:	mvn	r8, #0
    77c0:	b	740c <coda_cursor_read_float_partial_array+0x194>
    77c4:	.word	0x000004e0
    77c8:	.word	0x000004e8
    77cc:	.word	0x00000430
    77d0:	.word	0x00000480
    77d4:	.word	0x000013f1
    77d8:	.word	0x00000000
    77dc:	.word	0x000000e0
    77e0:	.word	0x000002cc
    77e4:	.word	0x000004b8
    77e8:	.word	0x00000528
    77ec:	.word	0x000013f6
    77f0:	.word	0x00000100

000077f4 <coda_cursor_read_char_partial_array>:
    77f4:	push	{r4, r5, r6, lr}
    77f8:	subs	r5, r0, #0
    77fc:	sub	sp, sp, #24
    7800:	beq	7a0c <coda_cursor_read_char_partial_array+0x218>
    7804:	mov	r6, r1
    7808:	ldr	r1, [r5, #4]
    780c:	cmp	r1, #0
    7810:	ble	7a0c <coda_cursor_read_char_partial_array+0x218>
    7814:	add	r1, r5, r1, lsl #4
    7818:	ldr	r1, [r1, #-8]
    781c:	cmp	r1, #0
    7820:	beq	7a0c <coda_cursor_read_char_partial_array+0x218>
    7824:	cmp	r3, #0
    7828:	beq	7a40 <coda_cursor_read_char_partial_array+0x24c>
    782c:	ldr	r0, [r1]
    7830:	cmp	r0, #99	; 0x63
    7834:	movls	r4, r1
    7838:	ldrhi	r4, [r1, #4]
    783c:	ldr	r0, [r4, #8]
    7840:	cmp	r0, #1
    7844:	bne	79f0 <coda_cursor_read_char_partial_array+0x1fc>
    7848:	ldr	r1, [pc, #524]	; 7a5c <coda_cursor_read_char_partial_array+0x268>
    784c:	bl	0 <__aeabi_read_tp>
    7850:	ldr	r1, [pc, r1]
    7854:	ldr	r1, [r0, r1]
    7858:	cmp	r1, #0
    785c:	bne	78f4 <coda_cursor_read_char_partial_array+0x100>
    7860:	ldr	r4, [r4, #40]	; 0x28
    7864:	ldr	r1, [r4, #8]
    7868:	sub	r1, r1, #2
    786c:	cmp	r1, #1
    7870:	bls	7954 <coda_cursor_read_char_partial_array+0x160>
    7874:	ldr	r0, [r4, #12]
    7878:	cmp	r0, #10
    787c:	bne	797c <coda_cursor_read_char_partial_array+0x188>
    7880:	ldr	r1, [r5, #4]
    7884:	add	r1, r5, r1, lsl #4
    7888:	ldr	r1, [r1, #-8]
    788c:	ldr	r1, [r1]
    7890:	cmp	r1, #100	; 0x64
    7894:	beq	79d0 <coda_cursor_read_char_partial_array+0x1dc>
    7898:	bls	78c8 <coda_cursor_read_char_partial_array+0xd4>
    789c:	cmp	r1, #103	; 0x67
    78a0:	beq	79e0 <coda_cursor_read_char_partial_array+0x1ec>
    78a4:	cmp	r1, #104	; 0x68
    78a8:	beq	79a8 <coda_cursor_read_char_partial_array+0x1b4>
    78ac:	cmp	r1, #101	; 0x65
    78b0:	beq	79b8 <coda_cursor_read_char_partial_array+0x1c4>
    78b4:	ldr	r3, [pc, #420]	; 7a60 <coda_cursor_read_char_partial_array+0x26c>
    78b8:	ldr	r2, [pc, #420]	; 7a64 <coda_cursor_read_char_partial_array+0x270>
    78bc:	ldr	r1, [pc, #420]	; 7a68 <coda_cursor_read_char_partial_array+0x274>
    78c0:	ldr	r0, [pc, #420]	; 7a6c <coda_cursor_read_char_partial_array+0x278>
    78c4:	bl	0 <__assert_fail>
    78c8:	cmp	r1, #0
    78cc:	beq	7998 <coda_cursor_read_char_partial_array+0x1a4>
    78d0:	cmp	r1, #1
    78d4:	bne	78b4 <coda_cursor_read_char_partial_array+0xc0>
    78d8:	mov	r1, r6
    78dc:	mov	r0, r5
    78e0:	bl	0 <coda_bin_cursor_read_char_partial_array>
    78e4:	adds	r0, r0, #0
    78e8:	mvnne	r0, #0
    78ec:	add	sp, sp, #24
    78f0:	pop	{r4, r5, r6, pc}
    78f4:	add	r1, sp, #20
    78f8:	mov	r0, r5
    78fc:	str	r3, [sp, #12]
    7900:	str	r2, [sp, #8]
    7904:	bl	0 <coda_cursor_get_num_elements>
    7908:	cmp	r0, #0
    790c:	bne	7990 <coda_cursor_read_char_partial_array+0x19c>
    7910:	cmp	r6, #0
    7914:	ldr	r1, [sp, #20]
    7918:	ldr	r2, [sp, #8]
    791c:	ldr	r3, [sp, #12]
    7920:	blt	7a28 <coda_cursor_read_char_partial_array+0x234>
    7924:	cmp	r6, r1
    7928:	bge	7a28 <coda_cursor_read_char_partial_array+0x234>
    792c:	add	r0, r6, r2
    7930:	cmp	r1, r0
    7934:	bge	7860 <coda_cursor_read_char_partial_array+0x6c>
    7938:	str	r1, [sp]
    793c:	mov	r3, r2
    7940:	ldr	r1, [pc, #296]	; 7a70 <coda_cursor_read_char_partial_array+0x27c>
    7944:	mov	r2, r6
    7948:	mvn	r0, #106	; 0x6a
    794c:	bl	0 <coda_set_error>
    7950:	b	7990 <coda_cursor_read_char_partial_array+0x19c>
    7954:	ldr	r1, [pc, #280]	; 7a74 <coda_cursor_read_char_partial_array+0x280>
    7958:	bl	0 <__aeabi_read_tp>
    795c:	ldr	r1, [pc, r1]
    7960:	ldr	r1, [r0, r1]
    7964:	cmp	r1, #0
    7968:	beq	7874 <coda_cursor_read_char_partial_array+0x80>
    796c:	ldr	r1, [r4, #48]	; 0x30
    7970:	cmp	r1, #0
    7974:	movne	r0, #9
    7978:	beq	7874 <coda_cursor_read_char_partial_array+0x80>
    797c:	bl	0 <coda_type_get_native_type_name>
    7980:	ldr	r1, [pc, #240]	; 7a78 <coda_cursor_read_char_partial_array+0x284>
    7984:	mov	r2, r0
    7988:	mvn	r0, #104	; 0x68
    798c:	bl	0 <coda_set_error>
    7990:	mvn	r0, #0
    7994:	b	78ec <coda_cursor_read_char_partial_array+0xf8>
    7998:	mov	r1, r6
    799c:	mov	r0, r5
    79a0:	bl	0 <coda_ascii_cursor_read_char_partial_array>
    79a4:	b	78e4 <coda_cursor_read_char_partial_array+0xf0>
    79a8:	mov	r1, r6
    79ac:	mov	r0, r5
    79b0:	bl	0 <coda_netcdf_cursor_read_char_partial_array>
    79b4:	b	78e4 <coda_cursor_read_char_partial_array+0xf0>
    79b8:	mov	r1, #0
    79bc:	mvn	r0, #10
    79c0:	bl	0 <coda_set_error>
    79c4:	mvn	r0, #0
    79c8:	add	sp, sp, #24
    79cc:	pop	{r4, r5, r6, pc}
    79d0:	mov	r1, r6
    79d4:	mov	r0, r5
    79d8:	bl	0 <coda_mem_cursor_read_char_partial_array>
    79dc:	b	78e4 <coda_cursor_read_char_partial_array+0xf0>
    79e0:	mov	r1, r6
    79e4:	mov	r0, r5
    79e8:	bl	0 <coda_cdf_cursor_read_char_partial_array>
    79ec:	b	78e4 <coda_cursor_read_char_partial_array+0xf0>
    79f0:	bl	0 <coda_type_get_class_name>
    79f4:	ldr	r1, [pc, #128]	; 7a7c <coda_cursor_read_char_partial_array+0x288>
    79f8:	mov	r2, r0
    79fc:	mvn	r0, #104	; 0x68
    7a00:	bl	0 <coda_set_error>
    7a04:	mvn	r0, #0
    7a08:	b	78ec <coda_cursor_read_char_partial_array+0xf8>
    7a0c:	mvn	r0, #99	; 0x63
    7a10:	ldr	r3, [pc, #104]	; 7a80 <coda_cursor_read_char_partial_array+0x28c>
    7a14:	ldr	r2, [pc, #76]	; 7a68 <coda_cursor_read_char_partial_array+0x274>
    7a18:	ldr	r1, [pc, #100]	; 7a84 <coda_cursor_read_char_partial_array+0x290>
    7a1c:	bl	0 <coda_set_error>
    7a20:	mvn	r0, #0
    7a24:	b	78ec <coda_cursor_read_char_partial_array+0xf8>
    7a28:	mov	r3, r1
    7a2c:	mov	r2, r6
    7a30:	ldr	r1, [pc, #80]	; 7a88 <coda_cursor_read_char_partial_array+0x294>
    7a34:	mvn	r0, #106	; 0x6a
    7a38:	bl	0 <coda_set_error>
    7a3c:	b	7990 <coda_cursor_read_char_partial_array+0x19c>
    7a40:	mvn	r0, #99	; 0x63
    7a44:	ldr	r3, [pc, #64]	; 7a8c <coda_cursor_read_char_partial_array+0x298>
    7a48:	ldr	r2, [pc, #24]	; 7a68 <coda_cursor_read_char_partial_array+0x274>
    7a4c:	ldr	r1, [pc, #60]	; 7a90 <coda_cursor_read_char_partial_array+0x29c>
    7a50:	bl	0 <coda_set_error>
    7a54:	mvn	r0, #0
    7a58:	b	78ec <coda_cursor_read_char_partial_array+0xf8>
    7a5c:	.word	0x00000204
    7a60:	.word	0x00000274
    7a64:	.word	0x000006d4
    7a68:	.word	0x00000000
    7a6c:	.word	0x00000050
    7a70:	.word	0x000004e8
    7a74:	.word	0x00000110
    7a78:	.word	0x00000334
    7a7c:	.word	0x00000480
    7a80:	.word	0x000015a6
    7a84:	.word	0x000000e0
    7a88:	.word	0x000004b8
    7a8c:	.word	0x000015ab
    7a90:	.word	0x00000100

00007a94 <coda_cursor_read_complex_double_pair>:
    7a94:	subs	r3, r0, #0
    7a98:	push	{r4, lr}
    7a9c:	beq	7acc <coda_cursor_read_complex_double_pair+0x38>
    7aa0:	ldr	r2, [r3, #4]
    7aa4:	cmp	r2, #0
    7aa8:	ble	7acc <coda_cursor_read_complex_double_pair+0x38>
    7aac:	add	r3, r3, r2, lsl #4
    7ab0:	ldr	r3, [r3, #-8]
    7ab4:	cmp	r3, #0
    7ab8:	beq	7acc <coda_cursor_read_complex_double_pair+0x38>
    7abc:	cmp	r1, #0
    7ac0:	beq	7ae8 <coda_cursor_read_complex_double_pair+0x54>
    7ac4:	pop	{r4, lr}
    7ac8:	b	31fc <read_double_pair>
    7acc:	ldr	r3, [pc, #48]	; 7b04 <coda_cursor_read_complex_double_pair+0x70>
    7ad0:	ldr	r2, [pc, #48]	; 7b08 <coda_cursor_read_complex_double_pair+0x74>
    7ad4:	ldr	r1, [pc, #48]	; 7b0c <coda_cursor_read_complex_double_pair+0x78>
    7ad8:	mvn	r0, #99	; 0x63
    7adc:	bl	0 <coda_set_error>
    7ae0:	mvn	r0, #0
    7ae4:	pop	{r4, pc}
    7ae8:	ldr	r3, [pc, #32]	; 7b10 <coda_cursor_read_complex_double_pair+0x7c>
    7aec:	ldr	r2, [pc, #20]	; 7b08 <coda_cursor_read_complex_double_pair+0x74>
    7af0:	ldr	r1, [pc, #28]	; 7b14 <coda_cursor_read_complex_double_pair+0x80>
    7af4:	mvn	r0, #99	; 0x63
    7af8:	bl	0 <coda_set_error>
    7afc:	mvn	r0, #0
    7b00:	pop	{r4, pc}
    7b04:	.word	0x000015f1
    7b08:	.word	0x00000000
    7b0c:	.word	0x000000e0
    7b10:	.word	0x000015f6
    7b14:	.word	0x00000100

00007b18 <coda_cursor_read_complex_double_pairs_array>:
    7b18:	cmp	r0, #0
    7b1c:	push	{lr}		; (str lr, [sp, #-4]!)
    7b20:	sub	sp, sp, #12
    7b24:	beq	7ba0 <coda_cursor_read_complex_double_pairs_array+0x88>
    7b28:	ldr	r3, [r0, #4]
    7b2c:	cmp	r3, #0
    7b30:	ble	7ba0 <coda_cursor_read_complex_double_pairs_array+0x88>
    7b34:	add	r3, r0, r3, lsl #4
    7b38:	ldr	r3, [r3, #-8]
    7b3c:	cmp	r3, #0
    7b40:	beq	7ba0 <coda_cursor_read_complex_double_pairs_array+0x88>
    7b44:	cmp	r1, #0
    7b48:	beq	7bbc <coda_cursor_read_complex_double_pairs_array+0xa4>
    7b4c:	ldr	ip, [r3]
    7b50:	cmp	ip, #99	; 0x63
    7b54:	ldrhi	r3, [r3, #4]
    7b58:	ldr	r3, [r3, #8]
    7b5c:	cmp	r3, #1
    7b60:	bne	7b80 <coda_cursor_read_complex_double_pairs_array+0x68>
    7b64:	str	r2, [sp]
    7b68:	mov	r3, #16
    7b6c:	mov	r2, r1
    7b70:	ldr	r1, [pc, #96]	; 7bd8 <coda_cursor_read_complex_double_pairs_array+0xc0>
    7b74:	bl	12a0 <read_array>
    7b78:	add	sp, sp, #12
    7b7c:	pop	{pc}		; (ldr pc, [sp], #4)
    7b80:	mov	r0, r3
    7b84:	bl	0 <coda_type_get_class_name>
    7b88:	ldr	r1, [pc, #76]	; 7bdc <coda_cursor_read_complex_double_pairs_array+0xc4>
    7b8c:	mov	r2, r0
    7b90:	mvn	r0, #104	; 0x68
    7b94:	bl	0 <coda_set_error>
    7b98:	mvn	r0, #0
    7b9c:	b	7b78 <coda_cursor_read_complex_double_pairs_array+0x60>
    7ba0:	mvn	r0, #99	; 0x63
    7ba4:	ldr	r3, [pc, #52]	; 7be0 <coda_cursor_read_complex_double_pairs_array+0xc8>
    7ba8:	ldr	r2, [pc, #52]	; 7be4 <coda_cursor_read_complex_double_pairs_array+0xcc>
    7bac:	ldr	r1, [pc, #52]	; 7be8 <coda_cursor_read_complex_double_pairs_array+0xd0>
    7bb0:	bl	0 <coda_set_error>
    7bb4:	mvn	r0, #0
    7bb8:	b	7b78 <coda_cursor_read_complex_double_pairs_array+0x60>
    7bbc:	mvn	r0, #99	; 0x63
    7bc0:	ldr	r3, [pc, #36]	; 7bec <coda_cursor_read_complex_double_pairs_array+0xd4>
    7bc4:	ldr	r2, [pc, #24]	; 7be4 <coda_cursor_read_complex_double_pairs_array+0xcc>
    7bc8:	ldr	r1, [pc, #32]	; 7bf0 <coda_cursor_read_complex_double_pairs_array+0xd8>
    7bcc:	bl	0 <coda_set_error>
    7bd0:	mvn	r0, #0
    7bd4:	b	7b78 <coda_cursor_read_complex_double_pairs_array+0x60>
    7bd8:	.word	0x00000000
    7bdc:	.word	0x00000480
    7be0:	.word	0x00001611
    7be4:	.word	0x00000000
    7be8:	.word	0x000000e0
    7bec:	.word	0x00001616
    7bf0:	.word	0x00000100

00007bf4 <coda_cursor_read_complex_double_split>:
    7bf4:	push	{r4, r5, r6, r7, lr}
    7bf8:	sub	sp, sp, #20
    7bfc:	mov	r5, r1
    7c00:	mov	r1, sp
    7c04:	mov	r4, r2
    7c08:	bl	7a94 <coda_cursor_read_complex_double_pair>
    7c0c:	cmp	r0, #0
    7c10:	mvnne	r0, #0
    7c14:	ldrdeq	r6, [sp]
    7c18:	ldrdeq	r2, [sp, #8]
    7c1c:	strdeq	r6, [r5]
    7c20:	strdeq	r2, [r4]
    7c24:	add	sp, sp, #20
    7c28:	pop	{r4, r5, r6, r7, pc}

00007c2c <coda_cursor_read_complex_double_split_array>:
    7c2c:	cmp	r0, #0
    7c30:	push	{r4, lr}
    7c34:	beq	7ca4 <coda_cursor_read_complex_double_split_array+0x78>
    7c38:	ldr	ip, [r0, #4]
    7c3c:	cmp	ip, #0
    7c40:	ble	7ca4 <coda_cursor_read_complex_double_split_array+0x78>
    7c44:	add	ip, r0, ip, lsl #4
    7c48:	ldr	ip, [ip, #-8]
    7c4c:	cmp	ip, #0
    7c50:	beq	7ca4 <coda_cursor_read_complex_double_split_array+0x78>
    7c54:	cmp	r1, #0
    7c58:	beq	7cdc <coda_cursor_read_complex_double_split_array+0xb0>
    7c5c:	cmp	r2, #0
    7c60:	beq	7cc0 <coda_cursor_read_complex_double_split_array+0x94>
    7c64:	ldr	lr, [ip]
    7c68:	cmp	lr, #99	; 0x63
    7c6c:	ldrhi	ip, [ip, #4]
    7c70:	ldr	ip, [ip, #8]
    7c74:	cmp	ip, #1
    7c78:	bne	7c84 <coda_cursor_read_complex_double_split_array+0x58>
    7c7c:	pop	{r4, lr}
    7c80:	b	32c4 <read_split_array.constprop.2>
    7c84:	mov	r0, ip
    7c88:	bl	0 <coda_type_get_class_name>
    7c8c:	ldr	r1, [pc, #100]	; 7cf8 <coda_cursor_read_complex_double_split_array+0xcc>
    7c90:	mov	r2, r0
    7c94:	mvn	r0, #104	; 0x68
    7c98:	bl	0 <coda_set_error>
    7c9c:	mvn	r0, #0
    7ca0:	pop	{r4, pc}
    7ca4:	ldr	r3, [pc, #80]	; 7cfc <coda_cursor_read_complex_double_split_array+0xd0>
    7ca8:	ldr	r2, [pc, #80]	; 7d00 <coda_cursor_read_complex_double_split_array+0xd4>
    7cac:	ldr	r1, [pc, #80]	; 7d04 <coda_cursor_read_complex_double_split_array+0xd8>
    7cb0:	mvn	r0, #99	; 0x63
    7cb4:	bl	0 <coda_set_error>
    7cb8:	mvn	r0, #0
    7cbc:	pop	{r4, pc}
    7cc0:	ldr	r3, [pc, #64]	; 7d08 <coda_cursor_read_complex_double_split_array+0xdc>
    7cc4:	ldr	r2, [pc, #52]	; 7d00 <coda_cursor_read_complex_double_split_array+0xd4>
    7cc8:	ldr	r1, [pc, #60]	; 7d0c <coda_cursor_read_complex_double_split_array+0xe0>
    7ccc:	mvn	r0, #99	; 0x63
    7cd0:	bl	0 <coda_set_error>
    7cd4:	mvn	r0, #0
    7cd8:	pop	{r4, pc}
    7cdc:	ldr	r3, [pc, #44]	; 7d10 <coda_cursor_read_complex_double_split_array+0xe4>
    7ce0:	ldr	r2, [pc, #24]	; 7d00 <coda_cursor_read_complex_double_split_array+0xd4>
    7ce4:	ldr	r1, [pc, #40]	; 7d14 <coda_cursor_read_complex_double_split_array+0xe8>
    7ce8:	mvn	r0, #99	; 0x63
    7cec:	bl	0 <coda_set_error>
    7cf0:	mvn	r0, #0
    7cf4:	pop	{r4, pc}
    7cf8:	.word	0x00000480
    7cfc:	.word	0x00001651
    7d00:	.word	0x00000000
    7d04:	.word	0x000000e0
    7d08:	.word	0x0000165b
    7d0c:	.word	0x00000578
    7d10:	.word	0x00001656
    7d14:	.word	0x00000558
