
../compcert-repos/stcorp-coda-3a25f25/CMakeFiles/coda_static.dir/libcoda/coda-xml.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <coda_xml_reopen>:
   0:	push	{fp, lr}
   4:	add	fp, sp, #4
   8:	sub	sp, sp, #24
   c:	str	r0, [fp, #-16]
  10:	mov	r0, #56	; 0x38
  14:	bl	0 <malloc>
  18:	mov	r3, r0
  1c:	str	r3, [fp, #-8]
  20:	ldr	r3, [fp, #-8]
  24:	cmp	r3, #0
  28:	bne	60 <coda_xml_reopen+0x60>
  2c:	mov	r3, #53	; 0x35
  30:	str	r3, [sp]
  34:	ldr	r3, [pc, #324]	; 180 <coda_xml_reopen+0x180>
  38:	mov	r2, #56	; 0x38
  3c:	ldr	r1, [pc, #320]	; 184 <coda_xml_reopen+0x184>
  40:	mvn	r0, #0
  44:	bl	0 <coda_set_error>
  48:	ldr	r3, [fp, #-16]
  4c:	ldr	r3, [r3]
  50:	mov	r0, r3
  54:	bl	0 <coda_close>
  58:	mvn	r3, #0
  5c:	b	174 <coda_xml_reopen+0x174>
  60:	ldr	r3, [fp, #-8]
  64:	mov	r2, #0
  68:	str	r2, [r3]
  6c:	ldr	r3, [fp, #-16]
  70:	ldr	r3, [r3]
  74:	ldrd	r2, [r3, #8]
  78:	ldr	r1, [fp, #-8]
  7c:	strd	r2, [r1, #8]
  80:	ldr	r3, [fp, #-8]
  84:	mov	r2, #2
  88:	str	r2, [r3, #16]
  8c:	ldr	r3, [fp, #-8]
  90:	mov	r2, #0
  94:	str	r2, [r3, #20]
  98:	ldr	r3, [fp, #-8]
  9c:	mov	r2, #0
  a0:	str	r2, [r3, #24]
  a4:	ldr	r3, [fp, #-8]
  a8:	mov	r2, #0
  ac:	str	r2, [r3, #28]
  b0:	ldr	r3, [fp, #-8]
  b4:	mov	r2, #0
  b8:	str	r2, [r3, #32]
  bc:	ldr	r1, [fp, #-8]
  c0:	mov	r2, #0
  c4:	mov	r3, #0
  c8:	strd	r2, [r1, #40]	; 0x28
  cc:	ldr	r3, [fp, #-8]
  d0:	mov	r2, #0
  d4:	str	r2, [r3, #48]	; 0x30
  d8:	ldr	r3, [fp, #-16]
  dc:	ldr	r2, [r3]
  e0:	ldr	r3, [fp, #-8]
  e4:	str	r2, [r3, #52]	; 0x34
  e8:	ldr	r3, [fp, #-16]
  ec:	ldr	r3, [r3]
  f0:	ldr	r3, [r3]
  f4:	mov	r0, r3
  f8:	bl	0 <strdup>
  fc:	mov	r3, r0
 100:	mov	r2, r3
 104:	ldr	r3, [fp, #-8]
 108:	str	r2, [r3]
 10c:	ldr	r3, [fp, #-8]
 110:	ldr	r3, [r3]
 114:	cmp	r3, #0
 118:	bne	140 <coda_xml_reopen+0x140>
 11c:	mov	r3, #72	; 0x48
 120:	ldr	r2, [pc, #88]	; 180 <coda_xml_reopen+0x180>
 124:	ldr	r1, [pc, #92]	; 188 <coda_xml_reopen+0x188>
 128:	mvn	r0, #0
 12c:	bl	0 <coda_set_error>
 130:	ldr	r0, [fp, #-8]
 134:	bl	0 <coda_close>
 138:	mvn	r3, #0
 13c:	b	174 <coda_xml_reopen+0x174>
 140:	ldr	r0, [fp, #-8]
 144:	bl	0 <coda_xml_parse>
 148:	mov	r3, r0
 14c:	cmp	r3, #0
 150:	beq	164 <coda_xml_reopen+0x164>
 154:	ldr	r0, [fp, #-8]
 158:	bl	0 <coda_close>
 15c:	mvn	r3, #0
 160:	b	174 <coda_xml_reopen+0x174>
 164:	ldr	r3, [fp, #-16]
 168:	ldr	r2, [fp, #-8]
 16c:	str	r2, [r3]
 170:	mov	r3, #0
 174:	mov	r0, r3
 178:	sub	sp, fp, #4
 17c:	pop	{fp, pc}
 180:	.word	0x00000000
 184:	.word	0x00000048
 188:	.word	0x00000080

0000018c <coda_xml_reopen_with_definition>:
 18c:	push	{fp, lr}
 190:	add	fp, sp, #4
 194:	sub	sp, sp, #16
 198:	str	r0, [fp, #-16]
 19c:	str	r1, [fp, #-20]	; 0xffffffec
 1a0:	ldr	r3, [fp, #-16]
 1a4:	ldr	r3, [r3]
 1a8:	str	r3, [fp, #-8]
 1ac:	ldr	r3, [fp, #-20]	; 0xffffffec
 1b0:	cmp	r3, #0
 1b4:	bne	1cc <coda_xml_reopen_with_definition+0x40>
 1b8:	ldr	r3, [pc, #228]	; 2a4 <coda_xml_reopen_with_definition+0x118>
 1bc:	mov	r2, #92	; 0x5c
 1c0:	ldr	r1, [pc, #224]	; 2a8 <coda_xml_reopen_with_definition+0x11c>
 1c4:	ldr	r0, [pc, #224]	; 2ac <coda_xml_reopen_with_definition+0x120>
 1c8:	bl	0 <__assert_fail>
 1cc:	ldr	r3, [fp, #-8]
 1d0:	ldr	r3, [r3, #16]
 1d4:	cmp	r3, #2
 1d8:	beq	1f0 <coda_xml_reopen_with_definition+0x64>
 1dc:	ldr	r3, [pc, #192]	; 2a4 <coda_xml_reopen_with_definition+0x118>
 1e0:	mov	r2, #93	; 0x5d
 1e4:	ldr	r1, [pc, #188]	; 2a8 <coda_xml_reopen_with_definition+0x11c>
 1e8:	ldr	r0, [pc, #192]	; 2b0 <coda_xml_reopen_with_definition+0x124>
 1ec:	bl	0 <__assert_fail>
 1f0:	ldr	r3, [fp, #-20]	; 0xffffffec
 1f4:	ldr	r3, [r3]
 1f8:	cmp	r3, #2
 1fc:	beq	214 <coda_xml_reopen_with_definition+0x88>
 200:	ldr	r3, [pc, #156]	; 2a4 <coda_xml_reopen_with_definition+0x118>
 204:	mov	r2, #94	; 0x5e
 208:	ldr	r1, [pc, #152]	; 2a8 <coda_xml_reopen_with_definition+0x11c>
 20c:	ldr	r0, [pc, #160]	; 2b4 <coda_xml_reopen_with_definition+0x128>
 210:	bl	0 <__assert_fail>
 214:	ldr	r3, [fp, #-8]
 218:	ldr	r3, [r3, #20]
 21c:	mov	r0, r3
 220:	bl	0 <coda_dynamic_type_delete>
 224:	ldr	r3, [fp, #-8]
 228:	mov	r2, #0
 22c:	str	r2, [r3, #20]
 230:	ldr	r1, [fp, #-8]
 234:	mov	r2, #0
 238:	mov	r3, #0
 23c:	strd	r2, [r1, #40]	; 0x28
 240:	ldr	r3, [fp, #-8]
 244:	ldr	r3, [r3, #48]	; 0x30
 248:	cmp	r3, #0
 24c:	beq	26c <coda_xml_reopen_with_definition+0xe0>
 250:	ldr	r3, [fp, #-8]
 254:	ldr	r3, [r3, #48]	; 0x30
 258:	mov	r0, r3
 25c:	bl	0 <free>
 260:	ldr	r3, [fp, #-8]
 264:	mov	r2, #0
 268:	str	r2, [r3, #48]	; 0x30
 26c:	ldr	r3, [fp, #-8]
 270:	ldr	r2, [fp, #-20]	; 0xffffffec
 274:	str	r2, [r3, #24]
 278:	ldr	r0, [fp, #-8]
 27c:	bl	0 <coda_xml_parse>
 280:	mov	r3, r0
 284:	cmp	r3, #0
 288:	beq	294 <coda_xml_reopen_with_definition+0x108>
 28c:	mvn	r3, #0
 290:	b	298 <coda_xml_reopen_with_definition+0x10c>
 294:	mov	r3, #0
 298:	mov	r0, r3
 29c:	sub	sp, fp, #4
 2a0:	pop	{fp, pc}
 2a4:	.word	0x00000120
 2a8:	.word	0x00000000
 2ac:	.word	0x000000bc
 2b0:	.word	0x000000d0
 2b4:	.word	0x000000f8

000002b8 <coda_xml_close>:
 2b8:	push	{fp, lr}
 2bc:	add	fp, sp, #4
 2c0:	sub	sp, sp, #16
 2c4:	str	r0, [fp, #-16]
 2c8:	ldr	r3, [fp, #-16]
 2cc:	str	r3, [fp, #-8]
 2d0:	ldr	r3, [fp, #-8]
 2d4:	ldr	r3, [r3]
 2d8:	cmp	r3, #0
 2dc:	beq	2f0 <coda_xml_close+0x38>
 2e0:	ldr	r3, [fp, #-8]
 2e4:	ldr	r3, [r3]
 2e8:	mov	r0, r3
 2ec:	bl	0 <free>
 2f0:	ldr	r3, [fp, #-8]
 2f4:	ldr	r3, [r3, #20]
 2f8:	cmp	r3, #0
 2fc:	beq	310 <coda_xml_close+0x58>
 300:	ldr	r3, [fp, #-8]
 304:	ldr	r3, [r3, #20]
 308:	mov	r0, r3
 30c:	bl	0 <coda_dynamic_type_delete>
 310:	ldr	r3, [fp, #-8]
 314:	ldr	r3, [r3, #48]	; 0x30
 318:	cmp	r3, #0
 31c:	beq	330 <coda_xml_close+0x78>
 320:	ldr	r3, [fp, #-8]
 324:	ldr	r3, [r3, #48]	; 0x30
 328:	mov	r0, r3
 32c:	bl	0 <free>
 330:	ldr	r3, [fp, #-8]
 334:	ldr	r3, [r3, #52]	; 0x34
 338:	cmp	r3, #0
 33c:	beq	350 <coda_xml_close+0x98>
 340:	ldr	r3, [fp, #-8]
 344:	ldr	r3, [r3, #52]	; 0x34
 348:	mov	r0, r3
 34c:	bl	0 <coda_bin_close>
 350:	ldr	r0, [fp, #-8]
 354:	bl	0 <free>
 358:	mov	r3, #0
 35c:	mov	r0, r3
 360:	sub	sp, fp, #4
 364:	pop	{fp, pc}

00000368 <coda_xml_cursor_set_product>:
 368:	push	{fp}		; (str fp, [sp, #-4]!)
 36c:	add	fp, sp, #0
 370:	sub	sp, sp, #12
 374:	str	r0, [fp, #-8]
 378:	str	r1, [fp, #-12]
 37c:	ldr	r3, [fp, #-8]
 380:	ldr	r2, [fp, #-12]
 384:	str	r2, [r3]
 388:	ldr	r3, [fp, #-8]
 38c:	mov	r2, #1
 390:	str	r2, [r3, #4]
 394:	ldr	r3, [fp, #-12]
 398:	ldr	r2, [r3, #20]
 39c:	ldr	r3, [fp, #-8]
 3a0:	str	r2, [r3, #8]
 3a4:	ldr	r3, [fp, #-8]
 3a8:	mvn	r2, #0
 3ac:	str	r2, [r3, #12]
 3b0:	ldr	r1, [fp, #-8]
 3b4:	mov	r2, #0
 3b8:	mov	r3, #0
 3bc:	strd	r2, [r1, #16]
 3c0:	mov	r3, #0
 3c4:	mov	r0, r3
 3c8:	add	sp, fp, #0
 3cc:	pop	{fp}		; (ldr fp, [sp], #4)
 3d0:	bx	lr
