
../compcert-repos/stcorp-coda-3a25f25/CMakeFiles/codaeval.dir/tools/codaeval/codaeval.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <generate_escaped_string>:
       0:	str	fp, [sp, #-8]!
       4:	str	lr, [sp, #4]
       8:	add	fp, sp, #4
       c:	sub	sp, sp, #16
      10:	str	r0, [fp, #-16]
      14:	str	r1, [fp, #-20]	; 0xffffffec
      18:	mov	r3, #0
      1c:	str	r3, [fp, #-8]
      20:	ldr	r3, [fp, #-20]	; 0xffffffec
      24:	cmp	r3, #0
      28:	beq	304 <generate_escaped_string+0x304>
      2c:	ldr	r3, [fp, #-16]
      30:	cmp	r3, #0
      34:	beq	304 <generate_escaped_string+0x304>
      38:	ldr	r3, [fp, #-20]	; 0xffffffec
      3c:	cmp	r3, #0
      40:	bge	2f0 <generate_escaped_string+0x2f0>
      44:	ldr	r0, [fp, #-16]
      48:	bl	0 <strlen>
      4c:	mov	r3, r0
      50:	str	r3, [fp, #-20]	; 0xffffffec
      54:	b	2f0 <generate_escaped_string+0x2f0>
      58:	ldr	r3, [fp, #-8]
      5c:	ldr	r2, [fp, #-16]
      60:	add	r3, r2, r3
      64:	ldrb	r3, [r3]
      68:	sub	r3, r3, #7
      6c:	cmp	r3, #85	; 0x55
      70:	ldrls	pc, [pc, r3, lsl #2]
      74:	b	270 <generate_escaped_string+0x270>
      78:	.word	0x000001e0
      7c:	.word	0x000001f0
      80:	.word	0x00000230
      84:	.word	0x00000210
      88:	.word	0x00000240
      8c:	.word	0x00000200
      90:	.word	0x00000220
      94:	.word	0x00000270
      98:	.word	0x00000270
      9c:	.word	0x00000270
      a0:	.word	0x00000270
      a4:	.word	0x00000270
      a8:	.word	0x00000270
      ac:	.word	0x00000270
      b0:	.word	0x00000270
      b4:	.word	0x00000270
      b8:	.word	0x00000270
      bc:	.word	0x00000270
      c0:	.word	0x00000270
      c4:	.word	0x00000270
      c8:	.word	0x000001d0
      cc:	.word	0x00000270
      d0:	.word	0x00000270
      d4:	.word	0x00000270
      d8:	.word	0x00000270
      dc:	.word	0x00000270
      e0:	.word	0x00000270
      e4:	.word	0x00000260
      e8:	.word	0x00000270
      ec:	.word	0x00000270
      f0:	.word	0x00000270
      f4:	.word	0x00000270
      f8:	.word	0x00000270
      fc:	.word	0x00000270
     100:	.word	0x00000270
     104:	.word	0x00000270
     108:	.word	0x00000270
     10c:	.word	0x00000270
     110:	.word	0x00000270
     114:	.word	0x00000270
     118:	.word	0x00000270
     11c:	.word	0x00000270
     120:	.word	0x00000270
     124:	.word	0x00000270
     128:	.word	0x00000270
     12c:	.word	0x00000270
     130:	.word	0x00000270
     134:	.word	0x00000270
     138:	.word	0x00000270
     13c:	.word	0x00000270
     140:	.word	0x00000270
     144:	.word	0x00000270
     148:	.word	0x00000270
     14c:	.word	0x00000270
     150:	.word	0x00000270
     154:	.word	0x00000270
     158:	.word	0x00000270
     15c:	.word	0x00000270
     160:	.word	0x00000270
     164:	.word	0x00000270
     168:	.word	0x00000270
     16c:	.word	0x00000270
     170:	.word	0x00000270
     174:	.word	0x00000270
     178:	.word	0x00000270
     17c:	.word	0x00000270
     180:	.word	0x00000270
     184:	.word	0x00000270
     188:	.word	0x00000270
     18c:	.word	0x00000270
     190:	.word	0x00000270
     194:	.word	0x00000270
     198:	.word	0x00000270
     19c:	.word	0x00000270
     1a0:	.word	0x00000270
     1a4:	.word	0x00000270
     1a8:	.word	0x00000270
     1ac:	.word	0x00000270
     1b0:	.word	0x00000270
     1b4:	.word	0x00000270
     1b8:	.word	0x00000270
     1bc:	.word	0x00000270
     1c0:	.word	0x00000270
     1c4:	.word	0x00000270
     1c8:	.word	0x00000270
     1cc:	.word	0x00000250
     1d0:	movw	r0, #0
     1d4:	movt	r0, #0
     1d8:	bl	0 <printf>
     1dc:	b	2e4 <generate_escaped_string+0x2e4>
     1e0:	movw	r0, #0
     1e4:	movt	r0, #0
     1e8:	bl	0 <printf>
     1ec:	b	2e4 <generate_escaped_string+0x2e4>
     1f0:	movw	r0, #0
     1f4:	movt	r0, #0
     1f8:	bl	0 <printf>
     1fc:	b	2e4 <generate_escaped_string+0x2e4>
     200:	movw	r0, #0
     204:	movt	r0, #0
     208:	bl	0 <printf>
     20c:	b	2e4 <generate_escaped_string+0x2e4>
     210:	movw	r0, #0
     214:	movt	r0, #0
     218:	bl	0 <printf>
     21c:	b	2e4 <generate_escaped_string+0x2e4>
     220:	movw	r0, #0
     224:	movt	r0, #0
     228:	bl	0 <printf>
     22c:	b	2e4 <generate_escaped_string+0x2e4>
     230:	movw	r0, #0
     234:	movt	r0, #0
     238:	bl	0 <printf>
     23c:	b	2e4 <generate_escaped_string+0x2e4>
     240:	movw	r0, #0
     244:	movt	r0, #0
     248:	bl	0 <printf>
     24c:	b	2e4 <generate_escaped_string+0x2e4>
     250:	movw	r0, #0
     254:	movt	r0, #0
     258:	bl	0 <printf>
     25c:	b	2e4 <generate_escaped_string+0x2e4>
     260:	movw	r0, #0
     264:	movt	r0, #0
     268:	bl	0 <printf>
     26c:	b	2e4 <generate_escaped_string+0x2e4>
     270:	bl	0 <__ctype_b_loc>
     274:	mov	r3, r0
     278:	ldr	r2, [r3]
     27c:	ldr	r3, [fp, #-8]
     280:	ldr	r1, [fp, #-16]
     284:	add	r3, r1, r3
     288:	ldrb	r3, [r3]
     28c:	lsl	r3, r3, #1
     290:	add	r3, r2, r3
     294:	ldrh	r3, [r3]
     298:	and	r3, r3, #16384	; 0x4000
     29c:	cmp	r3, #0
     2a0:	bne	2c8 <generate_escaped_string+0x2c8>
     2a4:	ldr	r3, [fp, #-8]
     2a8:	ldr	r2, [fp, #-16]
     2ac:	add	r3, r2, r3
     2b0:	ldrb	r3, [r3]
     2b4:	mov	r1, r3
     2b8:	movw	r0, #0
     2bc:	movt	r0, #0
     2c0:	bl	0 <printf>
     2c4:	b	2e0 <generate_escaped_string+0x2e0>
     2c8:	ldr	r3, [fp, #-8]
     2cc:	ldr	r2, [fp, #-16]
     2d0:	add	r3, r2, r3
     2d4:	ldrb	r3, [r3]
     2d8:	mov	r0, r3
     2dc:	bl	0 <putchar>
     2e0:	nop	{0}
     2e4:	ldr	r3, [fp, #-8]
     2e8:	add	r3, r3, #1
     2ec:	str	r3, [fp, #-8]
     2f0:	ldr	r2, [fp, #-8]
     2f4:	ldr	r3, [fp, #-20]	; 0xffffffec
     2f8:	cmp	r2, r3
     2fc:	blt	58 <generate_escaped_string+0x58>
     300:	b	308 <generate_escaped_string+0x308>
     304:	nop	{0}
     308:	sub	sp, fp, #4
     30c:	ldr	fp, [sp]
     310:	add	sp, sp, #4
     314:	pop	{pc}		; (ldr pc, [sp], #4)

00000318 <print_version>:
     318:	str	fp, [sp, #-8]!
     31c:	str	lr, [sp, #4]
     320:	add	fp, sp, #4
     324:	bl	0 <coda_get_libcoda_version>
     328:	mov	r3, r0
     32c:	mov	r1, r3
     330:	movw	r0, #0
     334:	movt	r0, #0
     338:	bl	0 <printf>
     33c:	movw	r0, #0
     340:	movt	r0, #0
     344:	bl	0 <puts>
     348:	mov	r0, #10
     34c:	bl	0 <putchar>
     350:	nop	{0}
     354:	sub	sp, fp, #4
     358:	ldr	fp, [sp]
     35c:	add	sp, sp, #4
     360:	pop	{pc}		; (ldr pc, [sp], #4)

00000364 <print_help>:
     364:	str	fp, [sp, #-8]!
     368:	str	lr, [sp, #4]
     36c:	add	fp, sp, #4
     370:	movw	r0, #0
     374:	movt	r0, #0
     378:	bl	0 <puts>
     37c:	movw	r0, #0
     380:	movt	r0, #0
     384:	bl	0 <puts>
     388:	movw	r0, #0
     38c:	movt	r0, #0
     390:	bl	0 <puts>
     394:	movw	r0, #0
     398:	movt	r0, #0
     39c:	bl	0 <puts>
     3a0:	movw	r0, #0
     3a4:	movt	r0, #0
     3a8:	bl	0 <puts>
     3ac:	movw	r0, #0
     3b0:	movt	r0, #0
     3b4:	bl	0 <puts>
     3b8:	movw	r0, #0
     3bc:	movt	r0, #0
     3c0:	bl	0 <puts>
     3c4:	mov	r0, #10
     3c8:	bl	0 <putchar>
     3cc:	movw	r0, #0
     3d0:	movt	r0, #0
     3d4:	bl	0 <puts>
     3d8:	movw	r0, #0
     3dc:	movt	r0, #0
     3e0:	bl	0 <puts>
     3e4:	movw	r0, #0
     3e8:	movt	r0, #0
     3ec:	bl	0 <puts>
     3f0:	movw	r0, #0
     3f4:	movt	r0, #0
     3f8:	bl	0 <puts>
     3fc:	movw	r0, #0
     400:	movt	r0, #0
     404:	bl	0 <puts>
     408:	movw	r0, #0
     40c:	movt	r0, #0
     410:	bl	0 <puts>
     414:	movw	r0, #0
     418:	movt	r0, #0
     41c:	bl	0 <puts>
     420:	movw	r0, #0
     424:	movt	r0, #0
     428:	bl	0 <puts>
     42c:	movw	r0, #0
     430:	movt	r0, #0
     434:	bl	0 <puts>
     438:	movw	r0, #0
     43c:	movt	r0, #0
     440:	bl	0 <puts>
     444:	movw	r0, #0
     448:	movt	r0, #0
     44c:	bl	0 <puts>
     450:	movw	r0, #0
     454:	movt	r0, #0
     458:	bl	0 <puts>
     45c:	mov	r0, #10
     460:	bl	0 <putchar>
     464:	movw	r0, #0
     468:	movt	r0, #0
     46c:	bl	0 <puts>
     470:	movw	r0, #0
     474:	movt	r0, #0
     478:	bl	0 <puts>
     47c:	mov	r0, #10
     480:	bl	0 <putchar>
     484:	movw	r0, #0
     488:	movt	r0, #0
     48c:	bl	0 <puts>
     490:	movw	r0, #0
     494:	movt	r0, #0
     498:	bl	0 <puts>
     49c:	mov	r0, #10
     4a0:	bl	0 <putchar>
     4a4:	movw	r0, #0
     4a8:	movt	r0, #0
     4ac:	bl	0 <puts>
     4b0:	movw	r0, #0
     4b4:	movt	r0, #0
     4b8:	bl	0 <puts>
     4bc:	mov	r0, #10
     4c0:	bl	0 <putchar>
     4c4:	movw	r0, #0
     4c8:	movt	r0, #0
     4cc:	bl	0 <puts>
     4d0:	movw	r0, #0
     4d4:	movt	r0, #0
     4d8:	bl	0 <puts>
     4dc:	movw	r0, #0
     4e0:	movt	r0, #0
     4e4:	bl	0 <puts>
     4e8:	movw	r0, #0
     4ec:	movt	r0, #0
     4f0:	bl	0 <puts>
     4f4:	movw	r0, #0
     4f8:	movt	r0, #0
     4fc:	bl	0 <puts>
     500:	movw	r0, #0
     504:	movt	r0, #0
     508:	bl	0 <puts>
     50c:	movw	r0, #0
     510:	movt	r0, #0
     514:	bl	0 <puts>
     518:	mov	r0, #10
     51c:	bl	0 <putchar>
     520:	nop	{0}
     524:	sub	sp, fp, #4
     528:	ldr	fp, [sp]
     52c:	add	sp, sp, #4
     530:	pop	{pc}		; (ldr pc, [sp], #4)

00000534 <eval_expression>:
     534:	str	fp, [sp, #-8]!
     538:	str	lr, [sp, #4]
     53c:	add	fp, sp, #4
     540:	sub	sp, sp, #64	; 0x40
     544:	str	r0, [fp, #-64]	; 0xffffffc0
     548:	movw	r3, #0
     54c:	movt	r3, #0
     550:	ldr	r3, [r3]
     554:	cmp	r3, #5
     558:	ldrls	pc, [pc, r3, lsl #2]
     55c:	b	7ac <eval_expression+0x278>
     560:	.word	0x00000578
     564:	.word	0x00000600
     568:	.word	0x0000067c
     56c:	.word	0x000006ec
     570:	.word	0x00000788
     574:	.word	0x00000788
     578:	movw	r3, #0
     57c:	movt	r3, #0
     580:	ldr	r3, [r3]
     584:	sub	r2, fp, #8
     588:	ldr	r1, [fp, #-64]	; 0xffffffc0
     58c:	mov	r0, r3
     590:	bl	0 <coda_expression_eval_bool>
     594:	mov	r3, r0
     598:	cmp	r3, #0
     59c:	beq	5d4 <eval_expression+0xa0>
     5a0:	bl	0 <coda_get_errno>
     5a4:	mov	r3, r0
     5a8:	ldr	r3, [r3]
     5ac:	mov	r0, r3
     5b0:	bl	0 <coda_errno_to_string>
     5b4:	mov	r3, r0
     5b8:	mov	r2, r3
     5bc:	movw	r1, #0
     5c0:	movt	r1, #0
     5c4:	mvn	r0, #400	; 0x190
     5c8:	bl	0 <coda_set_error>
     5cc:	mvn	r3, #0
     5d0:	b	7b0 <eval_expression+0x27c>
     5d4:	ldr	r3, [fp, #-8]
     5d8:	cmp	r3, #0
     5dc:	beq	5ec <eval_expression+0xb8>
     5e0:	movw	r3, #0
     5e4:	movt	r3, #0
     5e8:	b	5f4 <eval_expression+0xc0>
     5ec:	movw	r3, #0
     5f0:	movt	r3, #0
     5f4:	mov	r0, r3
     5f8:	bl	0 <puts>
     5fc:	b	7ac <eval_expression+0x278>
     600:	movw	r3, #0
     604:	movt	r3, #0
     608:	ldr	r3, [r3]
     60c:	sub	r2, fp, #20
     610:	ldr	r1, [fp, #-64]	; 0xffffffc0
     614:	mov	r0, r3
     618:	bl	0 <coda_expression_eval_integer>
     61c:	mov	r3, r0
     620:	cmp	r3, #0
     624:	beq	65c <eval_expression+0x128>
     628:	bl	0 <coda_get_errno>
     62c:	mov	r3, r0
     630:	ldr	r3, [r3]
     634:	mov	r0, r3
     638:	bl	0 <coda_errno_to_string>
     63c:	mov	r3, r0
     640:	mov	r2, r3
     644:	movw	r1, #0
     648:	movt	r1, #0
     64c:	mvn	r0, #400	; 0x190
     650:	bl	0 <coda_set_error>
     654:	mvn	r3, #0
     658:	b	7b0 <eval_expression+0x27c>
     65c:	ldrd	r0, [fp, #-20]	; 0xffffffec
     660:	sub	r3, fp, #44	; 0x2c
     664:	mov	r2, r3
     668:	bl	0 <coda_str64>
     66c:	sub	r3, fp, #44	; 0x2c
     670:	mov	r0, r3
     674:	bl	0 <puts>
     678:	b	7ac <eval_expression+0x278>
     67c:	movw	r3, #0
     680:	movt	r3, #0
     684:	ldr	r3, [r3]
     688:	sub	r2, fp, #52	; 0x34
     68c:	ldr	r1, [fp, #-64]	; 0xffffffc0
     690:	mov	r0, r3
     694:	bl	0 <coda_expression_eval_float>
     698:	mov	r3, r0
     69c:	cmp	r3, #0
     6a0:	beq	6d8 <eval_expression+0x1a4>
     6a4:	bl	0 <coda_get_errno>
     6a8:	mov	r3, r0
     6ac:	ldr	r3, [r3]
     6b0:	mov	r0, r3
     6b4:	bl	0 <coda_errno_to_string>
     6b8:	mov	r3, r0
     6bc:	mov	r2, r3
     6c0:	movw	r1, #0
     6c4:	movt	r1, #0
     6c8:	mvn	r0, #400	; 0x190
     6cc:	bl	0 <coda_set_error>
     6d0:	mvn	r3, #0
     6d4:	b	7b0 <eval_expression+0x27c>
     6d8:	ldrd	r2, [fp, #-52]	; 0xffffffcc
     6dc:	movw	r0, #0
     6e0:	movt	r0, #0
     6e4:	bl	0 <printf>
     6e8:	b	7ac <eval_expression+0x278>
     6ec:	mov	r3, #0
     6f0:	str	r3, [fp, #-56]	; 0xffffffc8
     6f4:	movw	r3, #0
     6f8:	movt	r3, #0
     6fc:	ldr	r0, [r3]
     700:	sub	r3, fp, #60	; 0x3c
     704:	sub	r2, fp, #56	; 0x38
     708:	ldr	r1, [fp, #-64]	; 0xffffffc0
     70c:	bl	0 <coda_expression_eval_string>
     710:	mov	r3, r0
     714:	cmp	r3, #0
     718:	beq	750 <eval_expression+0x21c>
     71c:	bl	0 <coda_get_errno>
     720:	mov	r3, r0
     724:	ldr	r3, [r3]
     728:	mov	r0, r3
     72c:	bl	0 <coda_errno_to_string>
     730:	mov	r3, r0
     734:	mov	r2, r3
     738:	movw	r1, #0
     73c:	movt	r1, #0
     740:	mvn	r0, #400	; 0x190
     744:	bl	0 <coda_set_error>
     748:	mvn	r3, #0
     74c:	b	7b0 <eval_expression+0x27c>
     750:	ldr	r3, [fp, #-56]	; 0xffffffc8
     754:	ldr	r2, [fp, #-60]	; 0xffffffc4
     758:	mov	r1, r2
     75c:	mov	r0, r3
     760:	bl	0 <generate_escaped_string>
     764:	mov	r0, #10
     768:	bl	0 <putchar>
     76c:	ldr	r3, [fp, #-56]	; 0xffffffc8
     770:	cmp	r3, #0
     774:	beq	7a8 <eval_expression+0x274>
     778:	ldr	r3, [fp, #-56]	; 0xffffffc8
     77c:	mov	r0, r3
     780:	bl	0 <free>
     784:	b	7a8 <eval_expression+0x274>
     788:	movw	r3, #0
     78c:	movt	r3, #0
     790:	mov	r2, #230	; 0xe6
     794:	movw	r1, #0
     798:	movt	r1, #0
     79c:	movw	r0, #0
     7a0:	movt	r0, #0
     7a4:	bl	0 <__assert_fail>
     7a8:	nop	{0}
     7ac:	mov	r3, #0
     7b0:	mov	r0, r3
     7b4:	sub	sp, fp, #4
     7b8:	ldr	fp, [sp]
     7bc:	add	sp, sp, #4
     7c0:	pop	{pc}		; (ldr pc, [sp], #4)

000007c4 <eval_expression_for_file>:
     7c4:	str	r4, [sp, #-12]!
     7c8:	str	fp, [sp, #4]
     7cc:	str	lr, [sp, #8]
     7d0:	add	fp, sp, #8
     7d4:	sub	sp, sp, #540	; 0x21c
     7d8:	str	r0, [fp, #-544]	; 0xfffffde0
     7dc:	mov	r3, #0
     7e0:	str	r3, [fp, #-16]
     7e4:	sub	r3, fp, #16
     7e8:	mov	r1, r3
     7ec:	ldr	r0, [fp, #-544]	; 0xfffffde0
     7f0:	bl	0 <coda_open>
     7f4:	mov	r3, r0
     7f8:	cmp	r3, #0
     7fc:	beq	808 <eval_expression_for_file+0x44>
     800:	mov	r3, #1
     804:	b	938 <eval_expression_for_file+0x174>
     808:	ldr	r2, [fp, #-16]
     80c:	sub	r3, fp, #540	; 0x21c
     810:	mov	r1, r2
     814:	mov	r0, r3
     818:	bl	0 <coda_cursor_set_product>
     81c:	mov	r3, r0
     820:	cmp	r3, #0
     824:	beq	83c <eval_expression_for_file+0x78>
     828:	ldr	r3, [fp, #-16]
     82c:	mov	r0, r3
     830:	bl	0 <coda_close>
     834:	mov	r3, #1
     838:	b	938 <eval_expression_for_file+0x174>
     83c:	movw	r3, #0
     840:	movt	r3, #0
     844:	ldr	r3, [r3]
     848:	cmp	r3, #0
     84c:	beq	8c4 <eval_expression_for_file+0x100>
     850:	movw	r3, #0
     854:	movt	r3, #0
     858:	ldr	r3, [r3]
     85c:	sub	r2, fp, #540	; 0x21c
     860:	mov	r1, r2
     864:	mov	r0, r3
     868:	bl	0 <coda_expression_eval_node>
     86c:	mov	r3, r0
     870:	cmp	r3, #0
     874:	beq	8c4 <eval_expression_for_file+0x100>
     878:	movw	r3, #0
     87c:	movt	r3, #0
     880:	ldr	r4, [r3]
     884:	bl	0 <coda_get_errno>
     888:	mov	r3, r0
     88c:	ldr	r3, [r3]
     890:	mov	r0, r3
     894:	bl	0 <coda_errno_to_string>
     898:	mov	r3, r0
     89c:	mov	r2, r3
     8a0:	movw	r1, #0
     8a4:	movt	r1, #0
     8a8:	mov	r0, r4
     8ac:	bl	0 <fprintf>
     8b0:	ldr	r3, [fp, #-16]
     8b4:	mov	r0, r3
     8b8:	bl	0 <coda_close>
     8bc:	mov	r3, #0
     8c0:	b	938 <eval_expression_for_file+0x174>
     8c4:	sub	r3, fp, #540	; 0x21c
     8c8:	mov	r0, r3
     8cc:	bl	534 <eval_expression>
     8d0:	mov	r3, r0
     8d4:	cmp	r3, #0
     8d8:	beq	914 <eval_expression_for_file+0x150>
     8dc:	movw	r3, #0
     8e0:	movt	r3, #0
     8e4:	ldr	r4, [r3]
     8e8:	bl	0 <coda_get_errno>
     8ec:	mov	r3, r0
     8f0:	ldr	r3, [r3]
     8f4:	mov	r0, r3
     8f8:	bl	0 <coda_errno_to_string>
     8fc:	mov	r2, r0
     900:	ldr	r3, [fp, #-544]	; 0xfffffde0
     904:	movw	r1, #0
     908:	movt	r1, #0
     90c:	mov	r0, r4
     910:	bl	0 <fprintf>
     914:	ldr	r3, [fp, #-16]
     918:	mov	r0, r3
     91c:	bl	0 <coda_close>
     920:	mov	r3, r0
     924:	cmp	r3, #0
     928:	beq	934 <eval_expression_for_file+0x170>
     92c:	mov	r3, #1
     930:	b	938 <eval_expression_for_file+0x174>
     934:	mov	r3, #0
     938:	mov	r0, r3
     93c:	sub	sp, fp, #8
     940:	ldr	r4, [sp]
     944:	ldr	fp, [sp, #4]
     948:	add	sp, sp, #8
     94c:	pop	{pc}		; (ldr pc, [sp], #4)

00000950 <callback>:
     950:	str	fp, [sp, #-8]!
     954:	str	lr, [sp, #4]
     958:	add	fp, sp, #4
     95c:	sub	sp, sp, #16
     960:	str	r0, [fp, #-8]
     964:	str	r1, [fp, #-12]
     968:	str	r2, [fp, #-16]
     96c:	str	r3, [fp, #-20]	; 0xffffffec
     970:	ldr	r3, [fp, #-12]
     974:	cmp	r3, #0
     978:	bne	9a0 <callback+0x50>
     97c:	movw	r3, #0
     980:	movt	r3, #0
     984:	ldr	r0, [r3]
     988:	ldr	r3, [fp, #-8]
     98c:	ldr	r2, [fp, #-16]
     990:	movw	r1, #0
     994:	movt	r1, #0
     998:	bl	0 <fprintf>
     99c:	b	9fc <callback+0xac>
     9a0:	ldr	r3, [fp, #-12]
     9a4:	cmp	r3, #2
     9a8:	bne	9d0 <callback+0x80>
     9ac:	movw	r3, #0
     9b0:	movt	r3, #0
     9b4:	ldr	r3, [r3]
     9b8:	ldr	r2, [fp, #-8]
     9bc:	movw	r1, #0
     9c0:	movt	r1, #0
     9c4:	mov	r0, r3
     9c8:	bl	0 <fprintf>
     9cc:	b	9fc <callback+0xac>
     9d0:	ldr	r3, [fp, #-12]
     9d4:	cmp	r3, #1
     9d8:	bne	9fc <callback+0xac>
     9dc:	movw	r3, #0
     9e0:	movt	r3, #0
     9e4:	ldr	r0, [r3]
     9e8:	ldr	r3, [fp, #-16]
     9ec:	ldr	r2, [fp, #-8]
     9f0:	movw	r1, #0
     9f4:	movt	r1, #0
     9f8:	bl	0 <fprintf>
     9fc:	ldr	r3, [fp, #-12]
     a00:	cmp	r3, #4
     a04:	bne	a18 <callback+0xc8>
     a08:	ldr	r0, [fp, #-8]
     a0c:	bl	7c4 <eval_expression_for_file>
     a10:	mov	r3, r0
     a14:	b	a1c <callback+0xcc>
     a18:	mov	r3, #0
     a1c:	mov	r0, r3
     a20:	sub	sp, fp, #4
     a24:	ldr	fp, [sp]
     a28:	add	sp, sp, #4
     a2c:	pop	{pc}		; (ldr pc, [sp], #4)

00000a30 <main>:
     a30:	str	r4, [sp, #-12]!
     a34:	str	fp, [sp, #4]
     a38:	str	lr, [sp, #8]
     a3c:	add	fp, sp, #8
     a40:	sub	sp, sp, #36	; 0x24
     a44:	str	r0, [fp, #-32]	; 0xffffffe0
     a48:	str	r1, [fp, #-36]	; 0xffffffdc
     a4c:	mov	r3, #1
     a50:	str	r3, [fp, #-16]
     a54:	mov	r3, #0
     a58:	str	r3, [fp, #-20]	; 0xffffffec
     a5c:	ldr	r3, [fp, #-32]	; 0xffffffe0
     a60:	cmp	r3, #1
     a64:	beq	ab8 <main+0x88>
     a68:	ldr	r3, [fp, #-36]	; 0xffffffdc
     a6c:	add	r3, r3, #4
     a70:	ldr	r3, [r3]
     a74:	movw	r1, #0
     a78:	movt	r1, #0
     a7c:	mov	r0, r3
     a80:	bl	0 <strcmp>
     a84:	mov	r3, r0
     a88:	cmp	r3, #0
     a8c:	beq	ab8 <main+0x88>
     a90:	ldr	r3, [fp, #-36]	; 0xffffffdc
     a94:	add	r3, r3, #4
     a98:	ldr	r3, [r3]
     a9c:	movw	r1, #0
     aa0:	movt	r1, #0
     aa4:	mov	r0, r3
     aa8:	bl	0 <strcmp>
     aac:	mov	r3, r0
     ab0:	cmp	r3, #0
     ab4:	bne	ac4 <main+0x94>
     ab8:	bl	364 <print_help>
     abc:	mov	r0, #0
     ac0:	bl	0 <exit>
     ac4:	ldr	r3, [fp, #-36]	; 0xffffffdc
     ac8:	add	r3, r3, #4
     acc:	ldr	r3, [r3]
     ad0:	movw	r1, #0
     ad4:	movt	r1, #0
     ad8:	mov	r0, r3
     adc:	bl	0 <strcmp>
     ae0:	mov	r3, r0
     ae4:	cmp	r3, #0
     ae8:	beq	b14 <main+0xe4>
     aec:	ldr	r3, [fp, #-36]	; 0xffffffdc
     af0:	add	r3, r3, #4
     af4:	ldr	r3, [r3]
     af8:	movw	r1, #0
     afc:	movt	r1, #0
     b00:	mov	r0, r3
     b04:	bl	0 <strcmp>
     b08:	mov	r3, r0
     b0c:	cmp	r3, #0
     b10:	bne	b20 <main+0xf0>
     b14:	bl	318 <print_version>
     b18:	mov	r0, #0
     b1c:	bl	0 <exit>
     b20:	mov	r3, #1
     b24:	str	r3, [fp, #-24]	; 0xffffffe8
     b28:	ldr	r3, [fp, #-24]	; 0xffffffe8
     b2c:	add	r3, r3, #1
     b30:	ldr	r2, [fp, #-32]	; 0xffffffe0
     b34:	cmp	r2, r3
     b38:	ble	b9c <main+0x16c>
     b3c:	ldr	r3, [fp, #-24]	; 0xffffffe8
     b40:	lsl	r3, r3, #2
     b44:	ldr	r2, [fp, #-36]	; 0xffffffdc
     b48:	add	r3, r2, r3
     b4c:	ldr	r3, [r3]
     b50:	movw	r1, #0
     b54:	movt	r1, #0
     b58:	mov	r0, r3
     b5c:	bl	0 <strcmp>
     b60:	mov	r3, r0
     b64:	cmp	r3, #0
     b68:	bne	b9c <main+0x16c>
     b6c:	ldr	r3, [fp, #-24]	; 0xffffffe8
     b70:	add	r3, r3, #1
     b74:	lsl	r3, r3, #2
     b78:	ldr	r2, [fp, #-36]	; 0xffffffdc
     b7c:	add	r3, r2, r3
     b80:	ldr	r3, [r3]
     b84:	mov	r0, r3
     b88:	bl	0 <coda_set_definition_path>
     b8c:	ldr	r3, [fp, #-24]	; 0xffffffe8
     b90:	add	r3, r3, #2
     b94:	str	r3, [fp, #-24]	; 0xffffffe8
     b98:	b	c0c <main+0x1dc>
     b9c:	movw	r3, #0
     ba0:	movt	r3, #0
     ba4:	str	r3, [fp, #-28]	; 0xffffffe4
     ba8:	ldr	r3, [fp, #-36]	; 0xffffffdc
     bac:	ldr	r3, [r3]
     bb0:	ldr	r2, [fp, #-28]	; 0xffffffe4
     bb4:	mov	r1, #0
     bb8:	mov	r0, r3
     bbc:	bl	0 <coda_set_definition_path_conditional>
     bc0:	mov	r3, r0
     bc4:	cmp	r3, #0
     bc8:	beq	e2c <main+0x3fc>
     bcc:	movw	r3, #0
     bd0:	movt	r3, #0
     bd4:	ldr	r4, [r3]
     bd8:	bl	0 <coda_get_errno>
     bdc:	mov	r3, r0
     be0:	ldr	r3, [r3]
     be4:	mov	r0, r3
     be8:	bl	0 <coda_errno_to_string>
     bec:	mov	r3, r0
     bf0:	mov	r2, r3
     bf4:	movw	r1, #0
     bf8:	movt	r1, #0
     bfc:	mov	r0, r4
     c00:	bl	0 <fprintf>
     c04:	mov	r0, #1
     c08:	bl	0 <exit>
     c0c:	b	e2c <main+0x3fc>
     c10:	ldr	r3, [fp, #-24]	; 0xffffffe8
     c14:	lsl	r3, r3, #2
     c18:	ldr	r2, [fp, #-36]	; 0xffffffdc
     c1c:	add	r3, r2, r3
     c20:	ldr	r3, [r3]
     c24:	movw	r1, #0
     c28:	movt	r1, #0
     c2c:	mov	r0, r3
     c30:	bl	0 <strcmp>
     c34:	mov	r3, r0
     c38:	cmp	r3, #0
     c3c:	beq	c70 <main+0x240>
     c40:	ldr	r3, [fp, #-24]	; 0xffffffe8
     c44:	lsl	r3, r3, #2
     c48:	ldr	r2, [fp, #-36]	; 0xffffffdc
     c4c:	add	r3, r2, r3
     c50:	ldr	r3, [r3]
     c54:	movw	r1, #0
     c58:	movt	r1, #0
     c5c:	mov	r0, r3
     c60:	bl	0 <strcmp>
     c64:	mov	r3, r0
     c68:	cmp	r3, #0
     c6c:	bne	c7c <main+0x24c>
     c70:	mov	r3, #1
     c74:	str	r3, [fp, #-20]	; 0xffffffec
     c78:	b	e20 <main+0x3f0>
     c7c:	ldr	r3, [fp, #-24]	; 0xffffffe8
     c80:	lsl	r3, r3, #2
     c84:	ldr	r2, [fp, #-36]	; 0xffffffdc
     c88:	add	r3, r2, r3
     c8c:	ldr	r3, [r3]
     c90:	movw	r1, #0
     c94:	movt	r1, #0
     c98:	mov	r0, r3
     c9c:	bl	0 <strcmp>
     ca0:	mov	r3, r0
     ca4:	cmp	r3, #0
     ca8:	beq	cdc <main+0x2ac>
     cac:	ldr	r3, [fp, #-24]	; 0xffffffe8
     cb0:	lsl	r3, r3, #2
     cb4:	ldr	r2, [fp, #-36]	; 0xffffffdc
     cb8:	add	r3, r2, r3
     cbc:	ldr	r3, [r3]
     cc0:	movw	r1, #0
     cc4:	movt	r1, #0
     cc8:	mov	r0, r3
     ccc:	bl	0 <strcmp>
     cd0:	mov	r3, r0
     cd4:	cmp	r3, #0
     cd8:	bne	ce8 <main+0x2b8>
     cdc:	mov	r3, #0
     ce0:	str	r3, [fp, #-16]
     ce4:	b	e20 <main+0x3f0>
     ce8:	ldr	r3, [fp, #-24]	; 0xffffffe8
     cec:	lsl	r3, r3, #2
     cf0:	ldr	r2, [fp, #-36]	; 0xffffffdc
     cf4:	add	r3, r2, r3
     cf8:	ldr	r3, [r3]
     cfc:	movw	r1, #0
     d00:	movt	r1, #0
     d04:	mov	r0, r3
     d08:	bl	0 <strcmp>
     d0c:	mov	r3, r0
     d10:	cmp	r3, #0
     d14:	bne	dd4 <main+0x3a4>
     d18:	ldr	r3, [fp, #-24]	; 0xffffffe8
     d1c:	add	r3, r3, #1
     d20:	ldr	r2, [fp, #-32]	; 0xffffffe0
     d24:	cmp	r2, r3
     d28:	ble	dd4 <main+0x3a4>
     d2c:	ldr	r3, [fp, #-24]	; 0xffffffe8
     d30:	add	r3, r3, #1
     d34:	lsl	r3, r3, #2
     d38:	ldr	r2, [fp, #-36]	; 0xffffffdc
     d3c:	add	r3, r2, r3
     d40:	ldr	r3, [r3]
     d44:	ldrb	r3, [r3]
     d48:	cmp	r3, #45	; 0x2d
     d4c:	beq	dd4 <main+0x3a4>
     d50:	ldr	r3, [fp, #-24]	; 0xffffffe8
     d54:	add	r3, r3, #1
     d58:	lsl	r3, r3, #2
     d5c:	ldr	r2, [fp, #-36]	; 0xffffffdc
     d60:	add	r3, r2, r3
     d64:	ldr	r3, [r3]
     d68:	movw	r1, #0
     d6c:	movt	r1, #0
     d70:	mov	r0, r3
     d74:	bl	0 <coda_expression_from_string>
     d78:	mov	r3, r0
     d7c:	cmp	r3, #0
     d80:	beq	dc4 <main+0x394>
     d84:	movw	r3, #0
     d88:	movt	r3, #0
     d8c:	ldr	r4, [r3]
     d90:	bl	0 <coda_get_errno>
     d94:	mov	r3, r0
     d98:	ldr	r3, [r3]
     d9c:	mov	r0, r3
     da0:	bl	0 <coda_errno_to_string>
     da4:	mov	r3, r0
     da8:	mov	r2, r3
     dac:	movw	r1, #0
     db0:	movt	r1, #0
     db4:	mov	r0, r4
     db8:	bl	0 <fprintf>
     dbc:	mov	r0, #1
     dc0:	bl	0 <exit>
     dc4:	ldr	r3, [fp, #-24]	; 0xffffffe8
     dc8:	add	r3, r3, #1
     dcc:	str	r3, [fp, #-24]	; 0xffffffe8
     dd0:	b	e20 <main+0x3f0>
     dd4:	ldr	r3, [fp, #-24]	; 0xffffffe8
     dd8:	lsl	r3, r3, #2
     ddc:	ldr	r2, [fp, #-36]	; 0xffffffdc
     de0:	add	r3, r2, r3
     de4:	ldr	r3, [r3]
     de8:	ldrb	r3, [r3]
     dec:	cmp	r3, #45	; 0x2d
     df0:	bne	e40 <main+0x410>
     df4:	movw	r3, #0
     df8:	movt	r3, #0
     dfc:	ldr	r3, [r3]
     e00:	mov	r2, #25
     e04:	mov	r1, #1
     e08:	movw	r0, #0
     e0c:	movt	r0, #0
     e10:	bl	0 <fwrite>
     e14:	bl	364 <print_help>
     e18:	mov	r0, #1
     e1c:	bl	0 <exit>
     e20:	ldr	r3, [fp, #-24]	; 0xffffffe8
     e24:	add	r3, r3, #1
     e28:	str	r3, [fp, #-24]	; 0xffffffe8
     e2c:	ldr	r2, [fp, #-24]	; 0xffffffe8
     e30:	ldr	r3, [fp, #-32]	; 0xffffffe0
     e34:	cmp	r2, r3
     e38:	blt	c10 <main+0x1e0>
     e3c:	b	e44 <main+0x414>
     e40:	nop	{0}
     e44:	ldr	r2, [fp, #-24]	; 0xffffffe8
     e48:	ldr	r3, [fp, #-32]	; 0xffffffe0
     e4c:	cmp	r2, r3
     e50:	blt	e80 <main+0x450>
     e54:	movw	r3, #0
     e58:	movt	r3, #0
     e5c:	ldr	r3, [r3]
     e60:	mov	r2, #25
     e64:	mov	r1, #1
     e68:	movw	r0, #0
     e6c:	movt	r0, #0
     e70:	bl	0 <fwrite>
     e74:	bl	364 <print_help>
     e78:	mov	r0, #1
     e7c:	bl	0 <exit>
     e80:	ldr	r3, [fp, #-24]	; 0xffffffe8
     e84:	lsl	r3, r3, #2
     e88:	ldr	r2, [fp, #-36]	; 0xffffffdc
     e8c:	add	r3, r2, r3
     e90:	ldr	r3, [r3]
     e94:	movw	r1, #0
     e98:	movt	r1, #0
     e9c:	mov	r0, r3
     ea0:	bl	0 <coda_expression_from_string>
     ea4:	mov	r3, r0
     ea8:	cmp	r3, #0
     eac:	beq	ef0 <main+0x4c0>
     eb0:	movw	r3, #0
     eb4:	movt	r3, #0
     eb8:	ldr	r4, [r3]
     ebc:	bl	0 <coda_get_errno>
     ec0:	mov	r3, r0
     ec4:	ldr	r3, [r3]
     ec8:	mov	r0, r3
     ecc:	bl	0 <coda_errno_to_string>
     ed0:	mov	r3, r0
     ed4:	mov	r2, r3
     ed8:	movw	r1, #0
     edc:	movt	r1, #0
     ee0:	mov	r0, r4
     ee4:	bl	0 <fprintf>
     ee8:	mov	r0, #1
     eec:	bl	0 <exit>
     ef0:	ldr	r3, [fp, #-24]	; 0xffffffe8
     ef4:	add	r3, r3, #1
     ef8:	str	r3, [fp, #-24]	; 0xffffffe8
     efc:	movw	r3, #0
     f00:	movt	r3, #0
     f04:	ldr	r3, [r3]
     f08:	movw	r1, #0
     f0c:	movt	r1, #0
     f10:	mov	r0, r3
     f14:	bl	0 <coda_expression_get_type>
     f18:	mov	r3, r0
     f1c:	cmp	r3, #0
     f20:	beq	f64 <main+0x534>
     f24:	movw	r3, #0
     f28:	movt	r3, #0
     f2c:	ldr	r4, [r3]
     f30:	bl	0 <coda_get_errno>
     f34:	mov	r3, r0
     f38:	ldr	r3, [r3]
     f3c:	mov	r0, r3
     f40:	bl	0 <coda_errno_to_string>
     f44:	mov	r3, r0
     f48:	mov	r2, r3
     f4c:	movw	r1, #0
     f50:	movt	r1, #0
     f54:	mov	r0, r4
     f58:	bl	0 <fprintf>
     f5c:	mov	r0, #1
     f60:	bl	0 <exit>
     f64:	movw	r3, #0
     f68:	movt	r3, #0
     f6c:	ldr	r3, [r3]
     f70:	cmp	r3, #4
     f74:	beq	f8c <main+0x55c>
     f78:	movw	r3, #0
     f7c:	movt	r3, #0
     f80:	ldr	r3, [r3]
     f84:	cmp	r3, #5
     f88:	bne	fcc <main+0x59c>
     f8c:	movw	r3, #0
     f90:	movt	r3, #0
     f94:	ldr	r4, [r3]
     f98:	movw	r3, #0
     f9c:	movt	r3, #0
     fa0:	ldr	r3, [r3]
     fa4:	mov	r0, r3
     fa8:	bl	0 <coda_expression_get_type_name>
     fac:	mov	r3, r0
     fb0:	mov	r2, r3
     fb4:	movw	r1, #0
     fb8:	movt	r1, #0
     fbc:	mov	r0, r4
     fc0:	bl	0 <fprintf>
     fc4:	mov	r0, #1
     fc8:	bl	0 <exit>
     fcc:	ldr	r3, [fp, #-20]	; 0xffffffec
     fd0:	cmp	r3, #0
     fd4:	beq	101c <main+0x5ec>
     fd8:	movw	r3, #0
     fdc:	movt	r3, #0
     fe0:	ldr	r3, [r3]
     fe4:	mov	r0, r3
     fe8:	bl	0 <coda_expression_delete>
     fec:	movw	r3, #0
     ff0:	movt	r3, #0
     ff4:	ldr	r3, [r3]
     ff8:	cmp	r3, #0
     ffc:	beq	1014 <main+0x5e4>
    1000:	movw	r3, #0
    1004:	movt	r3, #0
    1008:	ldr	r3, [r3]
    100c:	mov	r0, r3
    1010:	bl	0 <coda_expression_delete>
    1014:	mov	r3, #0
    1018:	b	1224 <main+0x7f4>
    101c:	ldr	r2, [fp, #-24]	; 0xffffffe8
    1020:	ldr	r3, [fp, #-32]	; 0xffffffe0
    1024:	cmp	r2, r3
    1028:	bge	110c <main+0x6dc>
    102c:	bl	0 <coda_init>
    1030:	mov	r3, r0
    1034:	cmp	r3, #0
    1038:	beq	107c <main+0x64c>
    103c:	movw	r3, #0
    1040:	movt	r3, #0
    1044:	ldr	r4, [r3]
    1048:	bl	0 <coda_get_errno>
    104c:	mov	r3, r0
    1050:	ldr	r3, [r3]
    1054:	mov	r0, r3
    1058:	bl	0 <coda_errno_to_string>
    105c:	mov	r3, r0
    1060:	mov	r2, r3
    1064:	movw	r1, #0
    1068:	movt	r1, #0
    106c:	mov	r0, r4
    1070:	bl	0 <fprintf>
    1074:	mov	r0, #1
    1078:	bl	0 <exit>
    107c:	ldr	r0, [fp, #-16]
    1080:	bl	0 <coda_set_option_perform_conversions>
    1084:	ldr	r2, [fp, #-32]	; 0xffffffe0
    1088:	ldr	r3, [fp, #-24]	; 0xffffffe8
    108c:	sub	r1, r2, r3
    1090:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1094:	lsl	r3, r3, #2
    1098:	ldr	r2, [fp, #-36]	; 0xffffffdc
    109c:	add	r2, r2, r3
    10a0:	mov	r3, #0
    10a4:	str	r3, [sp]
    10a8:	movw	r3, #0
    10ac:	movt	r3, #0
    10b0:	mov	r0, #0
    10b4:	bl	0 <coda_match_filefilter>
    10b8:	mov	r3, r0
    10bc:	cmp	r3, #0
    10c0:	beq	1104 <main+0x6d4>
    10c4:	movw	r3, #0
    10c8:	movt	r3, #0
    10cc:	ldr	r4, [r3]
    10d0:	bl	0 <coda_get_errno>
    10d4:	mov	r3, r0
    10d8:	ldr	r3, [r3]
    10dc:	mov	r0, r3
    10e0:	bl	0 <coda_errno_to_string>
    10e4:	mov	r3, r0
    10e8:	mov	r2, r3
    10ec:	movw	r1, #0
    10f0:	movt	r1, #0
    10f4:	mov	r0, r4
    10f8:	bl	0 <fprintf>
    10fc:	mov	r0, #1
    1100:	bl	0 <exit>
    1104:	bl	0 <coda_done>
    1108:	b	11e4 <main+0x7b4>
    110c:	movw	r3, #0
    1110:	movt	r3, #0
    1114:	ldr	r3, [r3]
    1118:	cmp	r3, #0
    111c:	beq	1148 <main+0x718>
    1120:	movw	r3, #0
    1124:	movt	r3, #0
    1128:	ldr	r3, [r3]
    112c:	mov	r2, #96	; 0x60
    1130:	mov	r1, #1
    1134:	movw	r0, #0
    1138:	movt	r0, #0
    113c:	bl	0 <fwrite>
    1140:	mov	r0, #1
    1144:	bl	0 <exit>
    1148:	movw	r3, #0
    114c:	movt	r3, #0
    1150:	ldr	r3, [r3]
    1154:	mov	r0, r3
    1158:	bl	0 <coda_expression_is_constant>
    115c:	mov	r3, r0
    1160:	cmp	r3, #0
    1164:	bne	1190 <main+0x760>
    1168:	movw	r3, #0
    116c:	movt	r3, #0
    1170:	ldr	r3, [r3]
    1174:	mov	r2, #111	; 0x6f
    1178:	mov	r1, #1
    117c:	movw	r0, #0
    1180:	movt	r0, #0
    1184:	bl	0 <fwrite>
    1188:	mov	r0, #1
    118c:	bl	0 <exit>
    1190:	mov	r0, #0
    1194:	bl	534 <eval_expression>
    1198:	mov	r3, r0
    119c:	cmp	r3, #0
    11a0:	beq	11e4 <main+0x7b4>
    11a4:	movw	r3, #0
    11a8:	movt	r3, #0
    11ac:	ldr	r4, [r3]
    11b0:	bl	0 <coda_get_errno>
    11b4:	mov	r3, r0
    11b8:	ldr	r3, [r3]
    11bc:	mov	r0, r3
    11c0:	bl	0 <coda_errno_to_string>
    11c4:	mov	r3, r0
    11c8:	mov	r2, r3
    11cc:	movw	r1, #0
    11d0:	movt	r1, #0
    11d4:	mov	r0, r4
    11d8:	bl	0 <fprintf>
    11dc:	mov	r0, #1
    11e0:	bl	0 <exit>
    11e4:	movw	r3, #0
    11e8:	movt	r3, #0
    11ec:	ldr	r3, [r3]
    11f0:	mov	r0, r3
    11f4:	bl	0 <coda_expression_delete>
    11f8:	movw	r3, #0
    11fc:	movt	r3, #0
    1200:	ldr	r3, [r3]
    1204:	cmp	r3, #0
    1208:	beq	1220 <main+0x7f0>
    120c:	movw	r3, #0
    1210:	movt	r3, #0
    1214:	ldr	r3, [r3]
    1218:	mov	r0, r3
    121c:	bl	0 <coda_expression_delete>
    1220:	mov	r3, #0
    1224:	mov	r0, r3
    1228:	sub	sp, fp, #8
    122c:	ldr	r4, [sp]
    1230:	ldr	fp, [sp, #4]
    1234:	add	sp, sp, #8
    1238:	pop	{pc}		; (ldr pc, [sp], #4)
