
../compcert-repos/prog2/CMakeFiles/0.6.dir/Aula00_Conceitos_base/06.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <main>:
   0:	push	{fp, lr}
   4:	mov	fp, sp
   8:	sub	sp, sp, #64	; 0x40
   c:	movw	r0, #0
  10:	str	r0, [fp, #-4]
  14:	str	r0, [fp, #-20]	; 0xffffffec
  18:	str	r0, [fp, #-24]	; 0xffffffe8
  1c:	str	r0, [fp, #-28]	; 0xffffffe4
  20:	movw	r0, #0
  24:	movt	r0, #0
  28:	bl	0 <printf>
  2c:	movw	r1, #1
  30:	str	r0, [sp, #32]
  34:	mov	r0, r1
  38:	bl	0 <malloc>
  3c:	str	r0, [fp, #-12]
  40:	movw	r0, #1
  44:	bl	0 <malloc>
  48:	str	r0, [fp, #-16]
  4c:	movw	r0, #0
  50:	movt	r0, #0
  54:	sub	r1, fp, #5
  58:	bl	0 <__isoc99_scanf>
  5c:	cmp	r0, #1
  60:	bne	158 <main+0x158>
  64:	ldrb	r0, [fp, #-5]
  68:	cmp	r0, #32
  6c:	beq	7c <main+0x7c>
  70:	ldrb	r0, [fp, #-5]
  74:	cmp	r0, #10
  78:	bne	10c <main+0x10c>
  7c:	ldr	r0, [fp, #-16]
  80:	bl	0 <strlen>
  84:	ldr	r1, [fp, #-12]
  88:	str	r0, [sp, #28]
  8c:	mov	r0, r1
  90:	bl	0 <strlen>
  94:	ldr	r1, [sp, #28]
  98:	cmp	r1, r0
  9c:	bls	e4 <main+0xe4>
  a0:	ldr	r0, [fp, #-12]
  a4:	ldr	r1, [fp, #-16]
  a8:	str	r0, [sp, #24]
  ac:	mov	r0, r1
  b0:	bl	0 <strlen>
  b4:	mov	r1, r0
  b8:	ldr	r2, [sp, #24]
  bc:	str	r0, [sp, #20]
  c0:	mov	r0, r2
  c4:	ldr	r3, [sp, #20]
  c8:	str	r1, [sp, #16]
  cc:	mov	r1, r3
  d0:	bl	0 <realloc>
  d4:	str	r0, [fp, #-12]
  d8:	ldr	r0, [fp, #-12]
  dc:	ldr	r1, [fp, #-16]
  e0:	bl	0 <strcpy>
  e4:	ldr	r0, [fp, #-20]	; 0xffffffec
  e8:	add	r0, r0, #1
  ec:	str	r0, [fp, #-20]	; 0xffffffec
  f0:	movw	r0, #0
  f4:	str	r0, [fp, #-28]	; 0xffffffe4
  f8:	ldrb	r0, [fp, #-5]
  fc:	cmp	r0, #10
 100:	bne	108 <main+0x108>
 104:	b	158 <main+0x158>
 108:	b	154 <main+0x154>
 10c:	ldr	r0, [fp, #-16]
 110:	ldr	r1, [fp, #-28]	; 0xffffffe4
 114:	add	r1, r1, #1
 118:	mov	r2, r1
 11c:	str	r2, [sp, #12]
 120:	bl	0 <realloc>
 124:	str	r0, [fp, #-16]
 128:	ldrb	r0, [fp, #-5]
 12c:	ldr	r1, [fp, #-16]
 130:	ldr	r2, [fp, #-28]	; 0xffffffe4
 134:	add	r1, r1, r2
 138:	strb	r0, [r1]
 13c:	ldr	r0, [fp, #-24]	; 0xffffffe8
 140:	add	r0, r0, #1
 144:	str	r0, [fp, #-24]	; 0xffffffe8
 148:	ldr	r0, [fp, #-28]	; 0xffffffe4
 14c:	add	r0, r0, #1
 150:	str	r0, [fp, #-28]	; 0xffffffe4
 154:	b	4c <main+0x4c>
 158:	ldr	r1, [fp, #-20]	; 0xffffffec
 15c:	movw	r0, #0
 160:	movt	r0, #0
 164:	bl	0 <printf>
 168:	ldr	r1, [fp, #-12]
 16c:	movw	r2, #0
 170:	movt	r2, #0
 174:	str	r0, [sp, #8]
 178:	mov	r0, r2
 17c:	bl	0 <printf>
 180:	ldr	r1, [fp, #-24]	; 0xffffffe8
 184:	vmov	s0, r1
 188:	vcvt.f32.s32	s0, s0
 18c:	ldr	r1, [fp, #-20]	; 0xffffffec
 190:	vmov	s2, r1
 194:	vcvt.f32.s32	s2, s2
 198:	vdiv.f32	s0, s0, s2
 19c:	vcvt.f64.f32	d16, s0
 1a0:	movw	r1, #0
 1a4:	movt	r1, #0
 1a8:	str	r0, [sp, #4]
 1ac:	mov	r0, r1
 1b0:	vmov	r2, r3, d16
 1b4:	bl	0 <printf>
 1b8:	movw	r1, #0
 1bc:	str	r0, [sp]
 1c0:	mov	r0, r1
 1c4:	mov	sp, fp
 1c8:	pop	{fp, pc}
