
../compcert-repos/stcorp-coda-3a25f25/CMakeFiles/codacmp.dir/tools/codacmp/codacmp.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <main>:
       0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
       4:	add	fp, sp, #28
       8:	sub	sp, sp, #44	; 0x2c
       c:	sub	sp, sp, #1024	; 0x400
      10:	movw	r9, #0
      14:	mov	r6, r0
      18:	mov	r0, #0
      1c:	movt	r9, #0
      20:	cmp	r6, #1
      24:	str	r0, [r9]
      28:	beq	6ac <main+0x6ac>
      2c:	ldr	r4, [r1, #4]
      30:	mov	r5, r1
      34:	movw	r1, #0
      38:	movt	r1, #0
      3c:	mov	r0, r4
      40:	bl	0 <strcmp>
      44:	cmp	r0, #0
      48:	beq	6ac <main+0x6ac>
      4c:	movw	r1, #0
      50:	mov	r0, r4
      54:	movt	r1, #0
      58:	bl	0 <strcmp>
      5c:	cmp	r0, #0
      60:	beq	6ac <main+0x6ac>
      64:	movw	r1, #0
      68:	mov	r0, r4
      6c:	movt	r1, #0
      70:	bl	0 <strcmp>
      74:	cmp	r0, #0
      78:	beq	6b8 <main+0x6b8>
      7c:	movw	r1, #0
      80:	mov	r0, r4
      84:	movt	r1, #0
      88:	bl	0 <strcmp>
      8c:	cmp	r0, #0
      90:	beq	6b8 <main+0x6b8>
      94:	movw	r0, #0
      98:	vmov.i32	q8, #0	; 0x00000000
      9c:	cmp	r6, #3
      a0:	movt	r0, #0
      a4:	vst1.32	{d16-d17}, [r0]
      a8:	blt	c4 <main+0xc4>
      ac:	ldr	r0, [r5, #4]
      b0:	movw	r1, #0
      b4:	movt	r1, #0
      b8:	bl	0 <strcmp>
      bc:	cmp	r0, #0
      c0:	beq	2b0 <main+0x2b0>
      c4:	ldr	r0, [r5]
      c8:	movw	r2, #0
      cc:	mov	r1, #0
      d0:	movt	r2, #0
      d4:	bl	0 <coda_set_definition_path_conditional>
      d8:	mov	sl, #1
      dc:	cmp	r0, #0
      e0:	bne	6c4 <main+0x6c4>
      e4:	cmp	sl, r6
      e8:	bge	2c4 <main+0x2c4>
      ec:	movw	r7, #0
      f0:	mov	r0, #0
      f4:	mov	r4, #1
      f8:	movt	r7, #0
      fc:	str	r0, [sp, #8]
     100:	mov	r0, #1
     104:	str	r0, [sp, #12]
     108:	b	11c <main+0x11c>
     10c:	str	r4, [r9]
     110:	add	sl, sl, #1
     114:	cmp	sl, r6
     118:	bge	2d4 <main+0x2d4>
     11c:	ldr	r8, [r5, sl, lsl #2]
     120:	mov	r1, r7
     124:	mov	r0, r8
     128:	bl	0 <strcmp>
     12c:	cmp	r0, #0
     130:	beq	10c <main+0x10c>
     134:	movw	r1, #0
     138:	mov	r0, r8
     13c:	movt	r1, #0
     140:	bl	0 <strcmp>
     144:	cmp	r0, #0
     148:	beq	10c <main+0x10c>
     14c:	movw	r1, #0
     150:	mov	r0, r8
     154:	movt	r1, #0
     158:	bl	0 <strcmp>
     15c:	cmp	r0, #0
     160:	beq	298 <main+0x298>
     164:	movw	r1, #0
     168:	mov	r0, r8
     16c:	movt	r1, #0
     170:	bl	0 <strcmp>
     174:	cmp	r0, #0
     178:	beq	298 <main+0x298>
     17c:	movw	r1, #0
     180:	mov	r0, r8
     184:	movt	r1, #0
     188:	bl	0 <strcmp>
     18c:	cmp	r0, #0
     190:	beq	1ac <main+0x1ac>
     194:	movw	r1, #0
     198:	mov	r0, r8
     19c:	movt	r1, #0
     1a0:	bl	0 <strcmp>
     1a4:	cmp	r0, #0
     1a8:	bne	1c8 <main+0x1c8>
     1ac:	add	r0, sl, #1
     1b0:	cmp	r0, r6
     1b4:	bge	1c8 <main+0x1c8>
     1b8:	ldr	r1, [r5, r0, lsl #2]
     1bc:	ldrb	r2, [r1]
     1c0:	cmp	r2, #45	; 0x2d
     1c4:	bne	2a4 <main+0x2a4>
     1c8:	movw	r1, #0
     1cc:	mov	r0, r8
     1d0:	movt	r1, #0
     1d4:	bl	0 <strcmp>
     1d8:	cmp	r0, #0
     1dc:	beq	1f8 <main+0x1f8>
     1e0:	movw	r1, #0
     1e4:	mov	r0, r8
     1e8:	movt	r1, #0
     1ec:	bl	0 <strcmp>
     1f0:	cmp	r0, #0
     1f4:	bne	4f8 <main+0x4f8>
     1f8:	add	r9, sl, #2
     1fc:	cmp	r9, r6
     200:	bge	4f8 <main+0x4f8>
     204:	movw	r7, #0
     208:	add	r0, r5, sl, lsl #2
     20c:	ldr	r8, [r5, r9, lsl #2]
     210:	movt	r7, #0
     214:	ldr	r4, [r0, #4]
     218:	ldr	r0, [r7]
     21c:	tst	r0, #15
     220:	bne	260 <main+0x260>
     224:	mov	sl, #64	; 0x40
     228:	add	r1, sl, r0, lsl #2
     22c:	ldr	r0, [r7, #4]
     230:	bl	0 <realloc>
     234:	cmp	r0, #0
     238:	beq	670 <main+0x670>
     23c:	str	r0, [r7, #4]
     240:	ldr	r1, [r7]
     244:	ldr	r0, [r7, #8]
     248:	add	r1, sl, r1, lsl #2
     24c:	bl	0 <realloc>
     250:	cmp	r0, #0
     254:	beq	678 <main+0x678>
     258:	str	r0, [r7, #8]
     25c:	ldr	r0, [r7]
     260:	ldr	r1, [r7, #4]
     264:	mov	sl, r9
     268:	str	r4, [r1, r0, lsl #2]
     26c:	mov	r4, #1
     270:	ldr	r1, [r7, #8]
     274:	str	r8, [r1, r0, lsl #2]
     278:	add	r0, r0, #1
     27c:	str	r0, [r7]
     280:	movw	r7, #0
     284:	movt	r7, #0
     288:	mov	r9, r7
     28c:	movw	r7, #0
     290:	movt	r7, #0
     294:	b	110 <main+0x110>
     298:	mov	r0, #0
     29c:	str	r0, [sp, #12]
     2a0:	b	110 <main+0x110>
     2a4:	str	r1, [sp, #8]
     2a8:	mov	sl, r0
     2ac:	b	110 <main+0x110>
     2b0:	ldr	r0, [r5, #8]
     2b4:	bl	0 <coda_set_definition_path>
     2b8:	mov	sl, #3
     2bc:	cmp	sl, r6
     2c0:	blt	ec <main+0xec>
     2c4:	mov	r0, #1
     2c8:	str	r0, [sp, #12]
     2cc:	mov	r0, #0
     2d0:	str	r0, [sp, #8]
     2d4:	sub	r0, r6, #2
     2d8:	cmp	sl, r0
     2dc:	bne	504 <main+0x504>
     2e0:	bl	0 <coda_init>
     2e4:	cmp	r0, #0
     2e8:	bne	6c4 <main+0x6c4>
     2ec:	mov	r0, #0
     2f0:	bl	0 <coda_set_option_perform_boundary_checks>
     2f4:	ldr	r0, [sp, #12]
     2f8:	bl	0 <coda_set_option_perform_conversions>
     2fc:	add	r0, r5, r6, lsl #2
     300:	ldr	r5, [r5, sl, lsl #2]
     304:	sub	r1, fp, #36	; 0x24
     308:	ldr	r4, [r0, #-4]
     30c:	mov	r0, r5
     310:	bl	0 <coda_open>
     314:	cmp	r0, #0
     318:	beq	354 <main+0x354>
     31c:	bl	0 <coda_get_errno>
     320:	ldr	r0, [r0]
     324:	cmn	r0, #21
     328:	bne	530 <main+0x530>
     32c:	mov	r0, #0
     330:	bl	0 <coda_set_option_use_mmap>
     334:	sub	r1, fp, #36	; 0x24
     338:	mov	r0, r5
     33c:	bl	0 <coda_open>
     340:	mov	r5, r0
     344:	mov	r0, #1
     348:	bl	0 <coda_set_option_use_mmap>
     34c:	cmp	r5, #0
     350:	bne	530 <main+0x530>
     354:	movw	r6, #0
     358:	movt	r6, #0
     35c:	ldr	r0, [r6]
     360:	cmp	r0, #0
     364:	beq	42c <main+0x42c>
     368:	ldr	r0, [fp, #-36]	; 0xffffffdc
     36c:	add	r1, sp, #536	; 0x218
     370:	bl	0 <coda_get_product_root_type>
     374:	cmp	r0, #0
     378:	bne	3ec <main+0x3ec>
     37c:	ldr	r0, [sp, #536]	; 0x218
     380:	bl	0 <coda_tree_node_new>
     384:	cmp	r0, #0
     388:	str	r0, [r6, #12]
     38c:	beq	3ec <main+0x3ec>
     390:	ldr	r1, [r6]
     394:	cmp	r1, #1
     398:	blt	42c <main+0x42c>
     39c:	ldmib	r6, {r1, r2}
     3a0:	ldr	r2, [r2]
     3a4:	mov	r3, #0
     3a8:	ldr	r1, [r1]
     3ac:	bl	0 <coda_tree_node_add_item_for_path>
     3b0:	cmp	r0, #0
     3b4:	bne	3ec <main+0x3ec>
     3b8:	mov	r5, #1
     3bc:	ldr	r0, [r6]
     3c0:	cmp	r5, r0
     3c4:	bge	42c <main+0x42c>
     3c8:	ldmib	r6, {r1, r2}
     3cc:	ldr	r0, [r6, #12]
     3d0:	ldr	r2, [r2, r5, lsl #2]
     3d4:	mov	r3, #0
     3d8:	ldr	r1, [r1, r5, lsl #2]
     3dc:	bl	0 <coda_tree_node_add_item_for_path>
     3e0:	add	r5, r5, #1
     3e4:	cmp	r0, #0
     3e8:	beq	3bc <main+0x3bc>
     3ec:	movw	r0, #0
     3f0:	movt	r0, #0
     3f4:	ldr	r4, [r0]
     3f8:	movw	r0, #0
     3fc:	movt	r0, #0
     400:	ldr	r5, [r0]
     404:	bl	0 <coda_get_errno>
     408:	ldr	r0, [r0]
     40c:	bl	0 <coda_errno_to_string>
     410:	movw	r1, #0
     414:	mov	r3, r0
     418:	mov	r0, r4
     41c:	mov	r2, r5
     420:	movt	r1, #0
     424:	bl	0 <fprintf>
     428:	b	61c <main+0x61c>
     42c:	sub	r1, fp, #40	; 0x28
     430:	mov	r0, r4
     434:	bl	0 <coda_open>
     438:	cmp	r0, #0
     43c:	beq	478 <main+0x478>
     440:	bl	0 <coda_get_errno>
     444:	ldr	r0, [r0]
     448:	cmn	r0, #21
     44c:	bne	5d8 <main+0x5d8>
     450:	mov	r0, #0
     454:	bl	0 <coda_set_option_use_mmap>
     458:	sub	r1, fp, #40	; 0x28
     45c:	mov	r0, r4
     460:	bl	0 <coda_open>
     464:	mov	r4, r0
     468:	mov	r0, #1
     46c:	bl	0 <coda_set_option_use_mmap>
     470:	cmp	r4, #0
     474:	bne	5d8 <main+0x5d8>
     478:	ldr	r1, [fp, #-36]	; 0xffffffdc
     47c:	add	r0, sp, #536	; 0x218
     480:	bl	0 <coda_cursor_set_product>
     484:	cmp	r0, #0
     488:	bne	57c <main+0x57c>
     48c:	ldr	r1, [fp, #-40]	; 0xffffffd8
     490:	add	r0, sp, #16
     494:	bl	0 <coda_cursor_set_product>
     498:	cmp	r0, #0
     49c:	bne	58c <main+0x58c>
     4a0:	ldr	r4, [sp, #8]
     4a4:	cmp	r4, #0
     4a8:	beq	4d4 <main+0x4d4>
     4ac:	add	r0, sp, #536	; 0x218
     4b0:	mov	r1, r4
     4b4:	bl	0 <coda_cursor_goto>
     4b8:	cmp	r0, #0
     4bc:	bne	57c <main+0x57c>
     4c0:	add	r0, sp, #16
     4c4:	mov	r1, r4
     4c8:	bl	0 <coda_cursor_goto>
     4cc:	cmp	r0, #0
     4d0:	bne	58c <main+0x58c>
     4d4:	add	r0, sp, #536	; 0x218
     4d8:	add	r1, sp, #16
     4dc:	bl	8cc <compare_data>
     4e0:	mov	r4, r0
     4e4:	ldr	r0, [fp, #-36]	; 0xffffffdc
     4e8:	bl	0 <coda_close>
     4ec:	ldr	r0, [fp, #-40]	; 0xffffffd8
     4f0:	bl	0 <coda_close>
     4f4:	b	620 <main+0x620>
     4f8:	ldrb	r0, [r8]
     4fc:	cmp	r0, #45	; 0x2d
     500:	bne	2d4 <main+0x2d4>
     504:	movw	r0, #0
     508:	mov	r1, #25
     50c:	mov	r2, #1
     510:	movt	r0, #0
     514:	ldr	r3, [r0]
     518:	movw	r0, #0
     51c:	movt	r0, #0
     520:	bl	0 <fwrite>
     524:	bl	6f8 <print_help>
     528:	mov	r0, #1
     52c:	bl	0 <exit>
     530:	movw	r0, #0
     534:	movt	r0, #0
     538:	ldr	r4, [r0]
     53c:	movw	r0, #0
     540:	movt	r0, #0
     544:	ldr	r5, [r0]
     548:	bl	0 <coda_get_errno>
     54c:	ldr	r0, [r0]
     550:	bl	0 <coda_errno_to_string>
     554:	movw	r1, #0
     558:	mov	r3, r0
     55c:	mov	r0, r5
     560:	mov	r2, r4
     564:	movt	r1, #0
     568:	bl	0 <fprintf>
     56c:	movw	r6, #0
     570:	mvn	r4, #0
     574:	movt	r6, #0
     578:	b	620 <main+0x620>
     57c:	movw	r0, #0
     580:	movt	r0, #0
     584:	ldr	r4, [r0]
     588:	b	598 <main+0x598>
     58c:	movw	r0, #0
     590:	movt	r0, #0
     594:	ldr	r4, [r0, #4]
     598:	movw	r0, #0
     59c:	movt	r0, #0
     5a0:	ldr	r5, [r0]
     5a4:	bl	0 <coda_get_errno>
     5a8:	ldr	r0, [r0]
     5ac:	bl	0 <coda_errno_to_string>
     5b0:	movw	r1, #0
     5b4:	mov	r3, r0
     5b8:	mov	r0, r5
     5bc:	mov	r2, r4
     5c0:	movt	r1, #0
     5c4:	bl	0 <fprintf>
     5c8:	ldr	r0, [fp, #-36]	; 0xffffffdc
     5cc:	bl	0 <coda_close>
     5d0:	ldr	r0, [fp, #-40]	; 0xffffffd8
     5d4:	b	618 <main+0x618>
     5d8:	movw	r0, #0
     5dc:	movt	r0, #0
     5e0:	ldr	r4, [r0, #4]
     5e4:	movw	r0, #0
     5e8:	movt	r0, #0
     5ec:	ldr	r5, [r0]
     5f0:	bl	0 <coda_get_errno>
     5f4:	ldr	r0, [r0]
     5f8:	bl	0 <coda_errno_to_string>
     5fc:	movw	r1, #0
     600:	mov	r3, r0
     604:	mov	r0, r5
     608:	mov	r2, r4
     60c:	movt	r1, #0
     610:	bl	0 <fprintf>
     614:	ldr	r0, [fp, #-36]	; 0xffffffdc
     618:	bl	0 <coda_close>
     61c:	mvn	r4, #0
     620:	bl	0 <coda_done>
     624:	ldr	r0, [r6, #4]
     628:	cmp	r0, #0
     62c:	beq	634 <main+0x634>
     630:	bl	0 <free>
     634:	ldr	r0, [r6, #8]
     638:	cmp	r0, #0
     63c:	beq	644 <main+0x644>
     640:	bl	0 <free>
     644:	ldr	r0, [r6, #12]
     648:	cmp	r0, #0
     64c:	beq	658 <main+0x658>
     650:	mov	r1, #0
     654:	bl	0 <coda_tree_node_delete>
     658:	mov	r5, #0
     65c:	cmp	r4, #0
     660:	bne	6f0 <main+0x6f0>
     664:	mov	r0, r5
     668:	sub	sp, fp, #28
     66c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
     670:	mov	r0, #198	; 0xc6
     674:	b	67c <main+0x67c>
     678:	mov	r0, #207	; 0xcf
     67c:	ldr	r1, [r7]
     680:	str	r0, [sp]
     684:	mov	r0, #64	; 0x40
     688:	movw	r3, #0
     68c:	mvn	r5, #0
     690:	movt	r3, #0
     694:	add	r2, r0, r1, lsl #2
     698:	movw	r1, #0
     69c:	mvn	r0, #0
     6a0:	movt	r1, #0
     6a4:	bl	0 <coda_set_error>
     6a8:	b	664 <main+0x664>
     6ac:	bl	6f8 <print_help>
     6b0:	mov	r0, #0
     6b4:	bl	0 <exit>
     6b8:	bl	898 <print_version>
     6bc:	mov	r0, #0
     6c0:	bl	0 <exit>
     6c4:	movw	r0, #0
     6c8:	movt	r0, #0
     6cc:	ldr	r4, [r0]
     6d0:	bl	0 <coda_get_errno>
     6d4:	ldr	r0, [r0]
     6d8:	bl	0 <coda_errno_to_string>
     6dc:	movw	r1, #0
     6e0:	mov	r2, r0
     6e4:	mov	r0, r4
     6e8:	movt	r1, #0
     6ec:	bl	0 <fprintf>
     6f0:	mov	r0, #1
     6f4:	bl	0 <exit>

000006f8 <print_help>:
     6f8:	push	{fp, lr}
     6fc:	mov	fp, sp
     700:	movw	r0, #0
     704:	movt	r0, #0
     708:	bl	0 <puts>
     70c:	movw	r0, #0
     710:	movt	r0, #0
     714:	bl	0 <puts>
     718:	movw	r0, #0
     71c:	movt	r0, #0
     720:	bl	0 <puts>
     724:	movw	r0, #0
     728:	movt	r0, #0
     72c:	bl	0 <puts>
     730:	movw	r0, #0
     734:	movt	r0, #0
     738:	bl	0 <puts>
     73c:	movw	r0, #0
     740:	movt	r0, #0
     744:	bl	0 <puts>
     748:	movw	r0, #0
     74c:	movt	r0, #0
     750:	bl	0 <puts>
     754:	movw	r0, #0
     758:	movt	r0, #0
     75c:	bl	0 <puts>
     760:	movw	r0, #0
     764:	movt	r0, #0
     768:	bl	0 <puts>
     76c:	movw	r0, #0
     770:	movt	r0, #0
     774:	bl	0 <puts>
     778:	movw	r0, #0
     77c:	movt	r0, #0
     780:	bl	0 <puts>
     784:	movw	r0, #0
     788:	movt	r0, #0
     78c:	bl	0 <puts>
     790:	movw	r0, #0
     794:	movt	r0, #0
     798:	bl	0 <puts>
     79c:	movw	r0, #0
     7a0:	movt	r0, #0
     7a4:	bl	0 <puts>
     7a8:	movw	r0, #0
     7ac:	movt	r0, #0
     7b0:	bl	0 <puts>
     7b4:	movw	r0, #0
     7b8:	movt	r0, #0
     7bc:	bl	0 <puts>
     7c0:	movw	r0, #0
     7c4:	movt	r0, #0
     7c8:	bl	0 <puts>
     7cc:	movw	r0, #0
     7d0:	movt	r0, #0
     7d4:	bl	0 <puts>
     7d8:	movw	r0, #0
     7dc:	movt	r0, #0
     7e0:	bl	0 <puts>
     7e4:	movw	r0, #0
     7e8:	movt	r0, #0
     7ec:	bl	0 <puts>
     7f0:	mov	r0, #10
     7f4:	bl	0 <putchar>
     7f8:	movw	r0, #0
     7fc:	movt	r0, #0
     800:	bl	0 <puts>
     804:	movw	r0, #0
     808:	movt	r0, #0
     80c:	bl	0 <puts>
     810:	mov	r0, #10
     814:	bl	0 <putchar>
     818:	movw	r0, #0
     81c:	movt	r0, #0
     820:	bl	0 <puts>
     824:	movw	r0, #0
     828:	movt	r0, #0
     82c:	bl	0 <puts>
     830:	mov	r0, #10
     834:	bl	0 <putchar>
     838:	movw	r0, #0
     83c:	movt	r0, #0
     840:	bl	0 <puts>
     844:	movw	r0, #0
     848:	movt	r0, #0
     84c:	bl	0 <puts>
     850:	movw	r0, #0
     854:	movt	r0, #0
     858:	bl	0 <puts>
     85c:	movw	r0, #0
     860:	movt	r0, #0
     864:	bl	0 <puts>
     868:	movw	r0, #0
     86c:	movt	r0, #0
     870:	bl	0 <puts>
     874:	movw	r0, #0
     878:	movt	r0, #0
     87c:	bl	0 <puts>
     880:	movw	r0, #0
     884:	movt	r0, #0
     888:	bl	0 <puts>
     88c:	mov	r0, #10
     890:	pop	{fp, lr}
     894:	b	0 <putchar>

00000898 <print_version>:
     898:	push	{fp, lr}
     89c:	mov	fp, sp
     8a0:	bl	0 <coda_get_libcoda_version>
     8a4:	mov	r1, r0
     8a8:	movw	r0, #0
     8ac:	movt	r0, #0
     8b0:	bl	0 <printf>
     8b4:	movw	r0, #0
     8b8:	movt	r0, #0
     8bc:	bl	0 <puts>
     8c0:	mov	r0, #10
     8c4:	pop	{fp, lr}
     8c8:	b	0 <putchar>

000008cc <compare_data>:
     8cc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
     8d0:	add	fp, sp, #28
     8d4:	sub	sp, sp, #596	; 0x254
     8d8:	mov	sl, r1
     8dc:	add	r1, sp, #20
     8e0:	mov	r4, r0
     8e4:	bl	0 <coda_cursor_get_type_class>
     8e8:	cmp	r0, #0
     8ec:	bne	178c <compare_data+0xec0>
     8f0:	add	r1, sp, #16
     8f4:	mov	r0, sl
     8f8:	bl	0 <coda_cursor_get_type_class>
     8fc:	cmp	r0, #0
     900:	bne	17a4 <compare_data+0xed8>
     904:	ldr	r0, [sp, #20]
     908:	ldr	r1, [sp, #16]
     90c:	cmp	r0, r1
     910:	bne	a5c <compare_data+0x190>
     914:	cmp	r0, #6
     918:	bhi	11bc <compare_data+0x8f0>
     91c:	add	r1, pc, #0
     920:	ldr	pc, [r1, r0, lsl #2]
     924:	.word	0x00000ae4
     928:	.word	0x00000c00
     92c:	.word	0x00000940
     930:	.word	0x00000940
     934:	.word	0x00000e74
     938:	.word	0x00000c3c
     93c:	.word	0x00000e00
     940:	sub	r1, fp, #36	; 0x24
     944:	mov	r0, r4
     948:	bl	0 <coda_cursor_get_read_type>
     94c:	cmp	r0, #0
     950:	bne	1248 <compare_data+0x97c>
     954:	sub	r1, fp, #40	; 0x28
     958:	mov	r0, sl
     95c:	bl	0 <coda_cursor_get_read_type>
     960:	movw	r7, #0
     964:	cmp	r0, #0
     968:	movt	r7, #0
     96c:	bne	1554 <compare_data+0xc88>
     970:	ldr	r0, [fp, #-36]	; 0xffffffdc
     974:	ldr	r1, [fp, #-40]	; 0xffffffd8
     978:	cmp	r0, r1
     97c:	bne	fa4 <compare_data+0x6d8>
     980:	cmp	r0, #9
     984:	bhi	1b08 <compare_data+0x123c>
     988:	mov	r1, #1
     98c:	mov	r2, #85	; 0x55
     990:	tst	r2, r1, lsl r0
     994:	bne	10f8 <compare_data+0x82c>
     998:	mov	r2, #170	; 0xaa
     99c:	tst	r2, r1, lsl r0
     9a0:	beq	1414 <compare_data+0xb48>
     9a4:	add	r1, sp, #32
     9a8:	mov	r0, r4
     9ac:	bl	0 <coda_cursor_read_uint64>
     9b0:	cmp	r0, #0
     9b4:	bne	181c <compare_data+0xf50>
     9b8:	add	r1, sp, #24
     9bc:	mov	r0, sl
     9c0:	bl	0 <coda_cursor_read_uint64>
     9c4:	cmp	r0, #0
     9c8:	bne	1850 <compare_data+0xf84>
     9cc:	add	r3, sp, #24
     9d0:	ldm	r3, {r0, r1, r2, r3}
     9d4:	eor	r1, r3, r1
     9d8:	eor	r0, r2, r0
     9dc:	orrs	r0, r0, r1
     9e0:	beq	11bc <compare_data+0x8f0>
     9e4:	movw	r0, #0
     9e8:	movt	r0, #0
     9ec:	bl	0 <printf>
     9f0:	movw	r1, #0
     9f4:	mov	r0, r4
     9f8:	movt	r1, #0
     9fc:	bl	0 <coda_cursor_print_path>
     a00:	mov	r0, #10
     a04:	bl	0 <putchar>
     a08:	movw	r0, #0
     a0c:	movt	r0, #0
     a10:	ldr	r0, [r0]
     a14:	cmp	r0, #0
     a18:	beq	11bc <compare_data+0x8f0>
     a1c:	ldr	r0, [sp, #32]
     a20:	ldr	r1, [sp, #36]	; 0x24
     a24:	add	r5, sp, #56	; 0x38
     a28:	mov	r2, r5
     a2c:	bl	0 <coda_str64u>
     a30:	movw	r6, #0
     a34:	ldr	r1, [r7]
     a38:	mov	r2, r5
     a3c:	movt	r6, #0
     a40:	mov	r0, r6
     a44:	bl	0 <printf>
     a48:	ldr	r0, [sp, #24]
     a4c:	ldr	r1, [sp, #28]
     a50:	mov	r2, r5
     a54:	bl	0 <coda_str64u>
     a58:	b	11ac <compare_data+0x8e0>
     a5c:	movw	r0, #0
     a60:	movt	r0, #0
     a64:	bl	0 <printf>
     a68:	movw	r1, #0
     a6c:	mov	r0, r4
     a70:	movt	r1, #0
     a74:	bl	0 <coda_cursor_print_path>
     a78:	mov	r0, #10
     a7c:	bl	0 <putchar>
     a80:	movw	r0, #0
     a84:	mov	r6, #0
     a88:	movt	r0, #0
     a8c:	ldr	r0, [r0]
     a90:	cmp	r0, #0
     a94:	beq	17ec <compare_data+0xf20>
     a98:	movw	r7, #0
     a9c:	ldr	r0, [sp, #20]
     aa0:	movt	r7, #0
     aa4:	ldr	r4, [r7]
     aa8:	bl	0 <coda_type_get_class_name>
     aac:	movw	r5, #0
     ab0:	mov	r2, r0
     ab4:	mov	r1, r4
     ab8:	movt	r5, #0
     abc:	mov	r0, r5
     ac0:	bl	0 <printf>
     ac4:	ldr	r0, [sp, #16]
     ac8:	ldr	r4, [r7, #4]
     acc:	bl	0 <coda_type_get_class_name>
     ad0:	mov	r2, r0
     ad4:	mov	r0, r5
     ad8:	mov	r1, r4
     adc:	bl	0 <printf>
     ae0:	b	17ec <compare_data+0xf20>
     ae4:	add	r1, sp, #32
     ae8:	mov	r0, r4
     aec:	bl	0 <coda_cursor_get_type>
     af0:	cmp	r0, #0
     af4:	bne	178c <compare_data+0xec0>
     af8:	add	r1, sp, #24
     afc:	mov	r0, sl
     b00:	bl	0 <coda_cursor_get_type>
     b04:	cmp	r0, #0
     b08:	bne	17a4 <compare_data+0xed8>
     b0c:	sub	r1, fp, #36	; 0x24
     b10:	mov	r0, r4
     b14:	bl	0 <coda_cursor_get_num_elements>
     b18:	cmp	r0, #0
     b1c:	bne	178c <compare_data+0xec0>
     b20:	sub	r1, fp, #40	; 0x28
     b24:	mov	r0, sl
     b28:	bl	0 <coda_cursor_get_num_elements>
     b2c:	cmp	r0, #0
     b30:	bne	17a4 <compare_data+0xed8>
     b34:	ldr	r0, [fp, #-36]	; 0xffffffdc
     b38:	cmp	r0, #1
     b3c:	blt	12d8 <compare_data+0xa0c>
     b40:	movw	r5, #0
     b44:	movw	r9, #0
     b48:	mov	r1, #0
     b4c:	mov	r8, #1
     b50:	add	r6, sp, #56	; 0x38
     b54:	sub	r7, fp, #48	; 0x30
     b58:	movt	r5, #0
     b5c:	movt	r9, #0
     b60:	str	r1, [fp, #-44]	; 0xffffffd4
     b64:	b	b80 <compare_data+0x2b4>
     b68:	ldr	r0, [fp, #-44]	; 0xffffffd4
     b6c:	add	r1, r0, #1
     b70:	ldr	r0, [fp, #-36]	; 0xffffffdc
     b74:	str	r1, [fp, #-44]	; 0xffffffd4
     b78:	cmp	r1, r0
     b7c:	bge	12dc <compare_data+0xa10>
     b80:	ldr	r0, [sp, #32]
     b84:	mov	r2, r6
     b88:	bl	0 <coda_type_get_record_field_name>
     b8c:	cmp	r0, #0
     b90:	bne	12c8 <compare_data+0x9fc>
     b94:	ldr	r1, [sp, #56]	; 0x38
     b98:	ldr	r0, [sp, #24]
     b9c:	mov	r2, r7
     ba0:	bl	0 <coda_type_get_record_field_index_from_name>
     ba4:	cmp	r0, #0
     ba8:	beq	b68 <compare_data+0x29c>
     bac:	cmp	r8, #0
     bb0:	beq	bd8 <compare_data+0x30c>
     bb4:	movw	r0, #0
     bb8:	movt	r0, #0
     bbc:	bl	0 <printf>
     bc0:	movw	r1, #0
     bc4:	mov	r0, r4
     bc8:	movt	r1, #0
     bcc:	bl	0 <coda_cursor_print_path>
     bd0:	mov	r0, #10
     bd4:	bl	0 <putchar>
     bd8:	ldr	r0, [r5]
     bdc:	mov	r8, #0
     be0:	cmp	r0, #0
     be4:	beq	b68 <compare_data+0x29c>
     be8:	ldr	r1, [r9]
     bec:	ldr	r2, [sp, #56]	; 0x38
     bf0:	movw	r0, #0
     bf4:	movt	r0, #0
     bf8:	bl	0 <printf>
     bfc:	b	b68 <compare_data+0x29c>
     c00:	movw	r0, #0
     c04:	add	r2, sp, #56	; 0x38
     c08:	mov	r1, r4
     c0c:	movt	r0, #0
     c10:	ldr	r0, [r0, #12]
     c14:	bl	0 <coda_tree_node_get_item_for_cursor>
     c18:	cmp	r0, #0
     c1c:	bne	178c <compare_data+0xec0>
     c20:	ldr	r2, [sp, #56]	; 0x38
     c24:	cmp	r2, #0
     c28:	beq	1254 <compare_data+0x988>
     c2c:	mov	r0, r4
     c30:	mov	r1, sl
     c34:	bl	1b28 <compare_arrays_as_records>
     c38:	b	e64 <compare_data+0x598>
     c3c:	add	r1, sp, #32
     c40:	mov	r0, r4
     c44:	bl	0 <coda_cursor_get_bit_size>
     c48:	cmp	r0, #0
     c4c:	bne	178c <compare_data+0xec0>
     c50:	ldr	r0, [sp, #32]
     c54:	ldr	r1, [sp, #36]	; 0x24
     c58:	lsr	r2, r0, #3
     c5c:	orr	r2, r2, r1, lsl #29
     c60:	asr	r1, r1, #3
     c64:	adds	r7, r2, #1
     c68:	adc	r5, r1, #0
     c6c:	ands	r0, r0, #7
     c70:	mov	r0, sl
     c74:	moveq	r5, r1
     c78:	add	r1, sp, #24
     c7c:	moveq	r7, r2
     c80:	bl	0 <coda_cursor_get_bit_size>
     c84:	cmp	r0, #0
     c88:	bne	17a4 <compare_data+0xed8>
     c8c:	ldr	r8, [sp, #24]
     c90:	ldr	r0, [sp, #32]
     c94:	ldr	r6, [sp, #28]
     c98:	ldr	r1, [sp, #36]	; 0x24
     c9c:	eor	r1, r1, r6
     ca0:	eor	r0, r0, r8
     ca4:	orr	r0, r0, r1
     ca8:	lsr	r1, r8, #3
     cac:	orr	r1, r1, r6, lsl #29
     cb0:	adds	r9, r1, #1
     cb4:	ands	r2, r8, #7
     cb8:	moveq	r9, r1
     cbc:	cmp	r0, #0
     cc0:	bne	101c <compare_data+0x750>
     cc4:	subs	r0, r8, #1
     cc8:	sbcs	r0, r6, #0
     ccc:	blt	11bc <compare_data+0x8f0>
     cd0:	mov	r0, r7
     cd4:	bl	0 <malloc>
     cd8:	cmp	r0, #0
     cdc:	str	r0, [sp, #8]
     ce0:	beq	19bc <compare_data+0x10f0>
     ce4:	mov	r0, r9
     ce8:	bl	0 <malloc>
     cec:	cmp	r0, #0
     cf0:	str	r0, [sp, #12]
     cf4:	beq	1a2c <compare_data+0x1160>
     cf8:	str	r8, [sp]
     cfc:	ldr	r8, [sp, #8]
     d00:	mov	r0, r4
     d04:	mov	r2, #0
     d08:	mov	r3, #0
     d0c:	str	r6, [sp, #4]
     d10:	mov	r1, r8
     d14:	bl	0 <coda_cursor_read_bits>
     d18:	cmp	r0, #0
     d1c:	bne	1aa4 <compare_data+0x11d8>
     d20:	ldr	r0, [sp, #24]
     d24:	ldr	r6, [sp, #12]
     d28:	ldr	r1, [sp, #28]
     d2c:	mov	r2, #0
     d30:	mov	r3, #0
     d34:	stm	sp, {r0, r1}
     d38:	mov	r0, sl
     d3c:	mov	r1, r6
     d40:	bl	0 <coda_cursor_read_bits>
     d44:	cmp	r0, #0
     d48:	bne	1804 <compare_data+0xf38>
     d4c:	mov	r0, r8
     d50:	mov	r1, r6
     d54:	mov	r2, r7
     d58:	bl	0 <bcmp>
     d5c:	cmp	r0, #0
     d60:	beq	f90 <compare_data+0x6c4>
     d64:	movw	r0, #0
     d68:	movt	r0, #0
     d6c:	bl	0 <printf>
     d70:	movw	r1, #0
     d74:	mov	r0, r4
     d78:	movt	r1, #0
     d7c:	bl	0 <coda_cursor_print_path>
     d80:	mov	r0, #10
     d84:	bl	0 <putchar>
     d88:	rsbs	r0, r7, #256	; 0x100
     d8c:	rscs	r0, r5, #0
     d90:	blt	f90 <compare_data+0x6c4>
     d94:	movw	r0, #0
     d98:	movt	r0, #0
     d9c:	ldr	r0, [r0]
     da0:	cmp	r0, #0
     da4:	beq	f90 <compare_data+0x6c4>
     da8:	movw	r6, #0
     dac:	movw	r5, #0
     db0:	movt	r6, #0
     db4:	movt	r5, #0
     db8:	ldr	r1, [r6]
     dbc:	mov	r0, r5
     dc0:	bl	0 <printf>
     dc4:	mov	r0, r8
     dc8:	mov	r1, r7
     dcc:	bl	23b0 <print_escaped>
     dd0:	mov	r0, #10
     dd4:	bl	0 <putchar>
     dd8:	ldr	r1, [r6, #4]
     ddc:	ldr	r6, [sp, #12]
     de0:	mov	r0, r5
     de4:	bl	0 <printf>
     de8:	mov	r0, r6
     dec:	mov	r1, r9
     df0:	bl	23b0 <print_escaped>
     df4:	mov	r0, #10
     df8:	bl	0 <putchar>
     dfc:	b	f90 <compare_data+0x6c4>
     e00:	add	r1, sp, #56	; 0x38
     e04:	mov	r0, r4
     e08:	bl	0 <coda_cursor_get_special_type>
     e0c:	cmp	r0, #0
     e10:	bne	178c <compare_data+0xec0>
     e14:	add	r1, sp, #32
     e18:	mov	r0, sl
     e1c:	bl	0 <coda_cursor_get_special_type>
     e20:	cmp	r0, #0
     e24:	bne	17a4 <compare_data+0xed8>
     e28:	ldr	r0, [sp, #32]
     e2c:	ldr	r1, [sp, #56]	; 0x38
     e30:	cmp	r1, r0
     e34:	bne	1080 <compare_data+0x7b4>
     e38:	mov	r0, r4
     e3c:	bl	0 <coda_cursor_use_base_type_of_special_type>
     e40:	cmp	r0, #0
     e44:	bne	178c <compare_data+0xec0>
     e48:	mov	r0, sl
     e4c:	bl	0 <coda_cursor_use_base_type_of_special_type>
     e50:	cmp	r0, #0
     e54:	bne	17a4 <compare_data+0xed8>
     e58:	mov	r0, r4
     e5c:	mov	r1, sl
     e60:	bl	8cc <compare_data>
     e64:	mvn	r6, #0
     e68:	cmp	r0, #0
     e6c:	bne	17ec <compare_data+0xf20>
     e70:	b	11bc <compare_data+0x8f0>
     e74:	add	r1, sp, #56	; 0x38
     e78:	mov	r0, r4
     e7c:	bl	0 <coda_cursor_get_string_length>
     e80:	cmp	r0, #0
     e84:	bne	178c <compare_data+0xec0>
     e88:	add	r1, sp, #32
     e8c:	mov	r0, sl
     e90:	bl	0 <coda_cursor_get_string_length>
     e94:	cmp	r0, #0
     e98:	bne	17a4 <compare_data+0xed8>
     e9c:	ldr	r5, [sp, #56]	; 0x38
     ea0:	add	r7, r5, #1
     ea4:	mov	r0, r7
     ea8:	bl	0 <malloc>
     eac:	cmp	r0, #0
     eb0:	beq	182c <compare_data+0xf60>
     eb4:	ldr	r5, [sp, #32]
     eb8:	mov	r8, r0
     ebc:	add	r0, r5, #1
     ec0:	bl	0 <malloc>
     ec4:	cmp	r0, #0
     ec8:	beq	18b0 <compare_data+0xfe4>
     ecc:	mov	r6, r0
     ed0:	mov	r0, r4
     ed4:	mov	r1, r8
     ed8:	mov	r2, r7
     edc:	bl	0 <coda_cursor_read_string>
     ee0:	cmp	r0, #0
     ee4:	bne	1928 <compare_data+0x105c>
     ee8:	ldr	r0, [sp, #32]
     eec:	mov	r1, r6
     ef0:	add	r2, r0, #1
     ef4:	mov	r0, sl
     ef8:	bl	0 <coda_cursor_read_string>
     efc:	cmp	r0, #0
     f00:	bne	1804 <compare_data+0xf38>
     f04:	ldr	r2, [sp, #56]	; 0x38
     f08:	ldr	r0, [sp, #32]
     f0c:	cmp	r2, r0
     f10:	bne	f28 <compare_data+0x65c>
     f14:	mov	r0, r8
     f18:	mov	r1, r6
     f1c:	bl	0 <bcmp>
     f20:	cmp	r0, #0
     f24:	beq	f90 <compare_data+0x6c4>
     f28:	movw	r0, #0
     f2c:	movt	r0, #0
     f30:	bl	0 <printf>
     f34:	movw	r1, #0
     f38:	mov	r0, r4
     f3c:	movt	r1, #0
     f40:	bl	0 <coda_cursor_print_path>
     f44:	mov	r0, #10
     f48:	bl	0 <putchar>
     f4c:	movw	r0, #0
     f50:	movt	r0, #0
     f54:	ldr	r0, [r0]
     f58:	cmp	r0, #0
     f5c:	beq	f90 <compare_data+0x6c4>
     f60:	movw	r7, #0
     f64:	movw	r5, #0
     f68:	mov	r2, r8
     f6c:	movt	r7, #0
     f70:	movt	r5, #0
     f74:	ldr	r1, [r7]
     f78:	mov	r0, r5
     f7c:	bl	0 <printf>
     f80:	ldr	r1, [r7, #4]
     f84:	mov	r0, r5
     f88:	mov	r2, r6
     f8c:	bl	0 <printf>
     f90:	mov	r0, r8
     f94:	bl	0 <free>
     f98:	mov	r0, r6
     f9c:	bl	0 <free>
     fa0:	b	11bc <compare_data+0x8f0>
     fa4:	movw	r0, #0
     fa8:	movt	r0, #0
     fac:	bl	0 <printf>
     fb0:	movw	r1, #0
     fb4:	mov	r0, r4
     fb8:	movt	r1, #0
     fbc:	bl	0 <coda_cursor_print_path>
     fc0:	mov	r0, #10
     fc4:	bl	0 <putchar>
     fc8:	movw	r0, #0
     fcc:	movt	r0, #0
     fd0:	ldr	r0, [r0]
     fd4:	cmp	r0, #0
     fd8:	beq	11bc <compare_data+0x8f0>
     fdc:	ldr	r0, [fp, #-36]	; 0xffffffdc
     fe0:	ldr	r5, [r7]
     fe4:	bl	0 <coda_type_get_native_type_name>
     fe8:	movw	r6, #0
     fec:	mov	r2, r0
     ff0:	mov	r1, r5
     ff4:	movt	r6, #0
     ff8:	mov	r0, r6
     ffc:	bl	0 <printf>
    1000:	ldr	r0, [fp, #-40]	; 0xffffffd8
    1004:	ldr	r5, [r7, #4]
    1008:	bl	0 <coda_type_get_native_type_name>
    100c:	mov	r2, r0
    1010:	mov	r0, r6
    1014:	mov	r1, r5
    1018:	b	11b8 <compare_data+0x8ec>
    101c:	movw	r0, #0
    1020:	movt	r0, #0
    1024:	bl	0 <printf>
    1028:	movw	r1, #0
    102c:	mov	r0, r4
    1030:	movt	r1, #0
    1034:	bl	0 <coda_cursor_print_path>
    1038:	mov	r0, #10
    103c:	bl	0 <putchar>
    1040:	movw	r0, #0
    1044:	movt	r0, #0
    1048:	ldr	r0, [r0]
    104c:	cmp	r0, #0
    1050:	beq	11bc <compare_data+0x8f0>
    1054:	ldr	r0, [sp, #32]
    1058:	ldr	r1, [sp, #36]	; 0x24
    105c:	add	r5, sp, #56	; 0x38
    1060:	mov	r2, r5
    1064:	bl	0 <coda_str64>
    1068:	movw	r7, #0
    106c:	movw	r6, #0
    1070:	movt	r7, #0
    1074:	movt	r6, #0
    1078:	ldr	r1, [r7]
    107c:	b	1190 <compare_data+0x8c4>
    1080:	movw	r0, #0
    1084:	movt	r0, #0
    1088:	bl	0 <printf>
    108c:	movw	r1, #0
    1090:	mov	r0, r4
    1094:	movt	r1, #0
    1098:	bl	0 <coda_cursor_print_path>
    109c:	mov	r0, #10
    10a0:	bl	0 <putchar>
    10a4:	movw	r0, #0
    10a8:	mov	r6, #0
    10ac:	movt	r0, #0
    10b0:	ldr	r0, [r0]
    10b4:	cmp	r0, #0
    10b8:	beq	17ec <compare_data+0xf20>
    10bc:	movw	r7, #0
    10c0:	ldr	r0, [sp, #56]	; 0x38
    10c4:	movt	r7, #0
    10c8:	ldr	r4, [r7]
    10cc:	bl	0 <coda_type_get_special_type_name>
    10d0:	movw	r5, #0
    10d4:	mov	r2, r0
    10d8:	mov	r1, r4
    10dc:	movt	r5, #0
    10e0:	mov	r0, r5
    10e4:	bl	0 <printf>
    10e8:	ldr	r0, [sp, #32]
    10ec:	ldr	r4, [r7, #4]
    10f0:	bl	0 <coda_type_get_special_type_name>
    10f4:	b	ad0 <compare_data+0x204>
    10f8:	add	r1, sp, #32
    10fc:	mov	r0, r4
    1100:	bl	0 <coda_cursor_read_int64>
    1104:	cmp	r0, #0
    1108:	bne	181c <compare_data+0xf50>
    110c:	add	r1, sp, #24
    1110:	mov	r0, sl
    1114:	bl	0 <coda_cursor_read_int64>
    1118:	cmp	r0, #0
    111c:	bne	1850 <compare_data+0xf84>
    1120:	add	r3, sp, #24
    1124:	ldm	r3, {r0, r1, r2, r3}
    1128:	eor	r1, r3, r1
    112c:	eor	r0, r2, r0
    1130:	orrs	r0, r0, r1
    1134:	beq	11bc <compare_data+0x8f0>
    1138:	movw	r0, #0
    113c:	movt	r0, #0
    1140:	bl	0 <printf>
    1144:	movw	r1, #0
    1148:	mov	r0, r4
    114c:	movt	r1, #0
    1150:	bl	0 <coda_cursor_print_path>
    1154:	mov	r0, #10
    1158:	bl	0 <putchar>
    115c:	movw	r0, #0
    1160:	movt	r0, #0
    1164:	ldr	r0, [r0]
    1168:	cmp	r0, #0
    116c:	beq	11bc <compare_data+0x8f0>
    1170:	ldr	r0, [sp, #32]
    1174:	ldr	r1, [sp, #36]	; 0x24
    1178:	add	r5, sp, #56	; 0x38
    117c:	mov	r2, r5
    1180:	bl	0 <coda_str64>
    1184:	ldr	r1, [r7]
    1188:	movw	r6, #0
    118c:	movt	r6, #0
    1190:	mov	r0, r6
    1194:	mov	r2, r5
    1198:	bl	0 <printf>
    119c:	ldr	r0, [sp, #24]
    11a0:	ldr	r1, [sp, #28]
    11a4:	mov	r2, r5
    11a8:	bl	0 <coda_str64>
    11ac:	ldr	r1, [r7, #4]
    11b0:	mov	r0, r6
    11b4:	mov	r2, r5
    11b8:	bl	0 <printf>
    11bc:	add	r1, sp, #56	; 0x38
    11c0:	mov	r0, r4
    11c4:	bl	0 <coda_cursor_has_attributes>
    11c8:	cmp	r0, #0
    11cc:	bne	1248 <compare_data+0x97c>
    11d0:	add	r1, sp, #32
    11d4:	mov	r0, sl
    11d8:	bl	0 <coda_cursor_has_attributes>
    11dc:	movw	r5, #0
    11e0:	cmp	r0, #0
    11e4:	movt	r5, #0
    11e8:	bne	13a4 <compare_data+0xad8>
    11ec:	ldr	r0, [sp, #56]	; 0x38
    11f0:	ldr	r1, [sp, #32]
    11f4:	orrs	r0, r1, r0
    11f8:	beq	1240 <compare_data+0x974>
    11fc:	mov	r0, r4
    1200:	bl	0 <coda_cursor_goto_attributes>
    1204:	cmp	r0, #0
    1208:	bne	155c <compare_data+0xc90>
    120c:	mov	r0, sl
    1210:	bl	0 <coda_cursor_goto_attributes>
    1214:	cmp	r0, #0
    1218:	bne	14d8 <compare_data+0xc0c>
    121c:	mov	r0, r4
    1220:	mov	r1, sl
    1224:	bl	8cc <compare_data>
    1228:	cmp	r0, #0
    122c:	bne	17e8 <compare_data+0xf1c>
    1230:	mov	r0, r4
    1234:	bl	0 <coda_cursor_goto_parent>
    1238:	mov	r0, sl
    123c:	bl	0 <coda_cursor_goto_parent>
    1240:	mov	r6, #0
    1244:	b	17ec <compare_data+0xf20>
    1248:	movw	r5, #0
    124c:	movt	r5, #0
    1250:	b	155c <compare_data+0xc90>
    1254:	add	r1, sp, #32
    1258:	mov	r0, r4
    125c:	bl	0 <coda_cursor_get_num_elements>
    1260:	cmp	r0, #0
    1264:	bne	178c <compare_data+0xec0>
    1268:	add	r1, sp, #24
    126c:	mov	r0, sl
    1270:	bl	0 <coda_cursor_get_num_elements>
    1274:	cmp	r0, #0
    1278:	bne	17a4 <compare_data+0xed8>
    127c:	ldr	r0, [sp, #32]
    1280:	ldr	r1, [sp, #24]
    1284:	cmp	r0, r1
    1288:	bne	14ec <compare_data+0xc20>
    128c:	cmp	r0, #1
    1290:	blt	11bc <compare_data+0x8f0>
    1294:	mov	r0, r4
    1298:	bl	0 <coda_cursor_goto_first_array_element>
    129c:	cmp	r0, #0
    12a0:	bne	178c <compare_data+0xec0>
    12a4:	mov	r0, sl
    12a8:	bl	0 <coda_cursor_goto_first_array_element>
    12ac:	cmp	r0, #0
    12b0:	bne	1b00 <compare_data+0x1234>
    12b4:	ldr	r0, [sp, #32]
    12b8:	cmp	r0, #1
    12bc:	blt	19a0 <compare_data+0x10d4>
    12c0:	mov	r5, #0
    12c4:	b	13bc <compare_data+0xaf0>
    12c8:	mov	r0, r4
    12cc:	bl	0 <coda_cursor_add_to_error_message>
    12d0:	ldr	r4, [r9]
    12d4:	b	17b8 <compare_data+0xeec>
    12d8:	mov	r8, #1
    12dc:	ldr	r1, [fp, #-40]	; 0xffffffd8
    12e0:	cmp	r1, #1
    12e4:	blt	1570 <compare_data+0xca4>
    12e8:	movw	r5, #0
    12ec:	movw	r9, #0
    12f0:	mov	r1, #0
    12f4:	add	r6, sp, #56	; 0x38
    12f8:	sub	r7, fp, #44	; 0x2c
    12fc:	movt	r5, #0
    1300:	movt	r9, #0
    1304:	str	r1, [fp, #-48]	; 0xffffffd0
    1308:	b	1324 <compare_data+0xa58>
    130c:	ldr	r0, [fp, #-48]	; 0xffffffd0
    1310:	add	r1, r0, #1
    1314:	ldr	r0, [fp, #-40]	; 0xffffffd8
    1318:	str	r1, [fp, #-48]	; 0xffffffd0
    131c:	cmp	r1, r0
    1320:	bge	156c <compare_data+0xca0>
    1324:	ldr	r0, [sp, #24]
    1328:	mov	r2, r6
    132c:	bl	0 <coda_type_get_record_field_name>
    1330:	cmp	r0, #0
    1334:	bne	1404 <compare_data+0xb38>
    1338:	ldr	r1, [sp, #56]	; 0x38
    133c:	ldr	r0, [sp, #32]
    1340:	mov	r2, r7
    1344:	bl	0 <coda_type_get_record_field_index_from_name>
    1348:	cmp	r0, #0
    134c:	beq	130c <compare_data+0xa40>
    1350:	cmp	r8, #0
    1354:	beq	137c <compare_data+0xab0>
    1358:	movw	r0, #0
    135c:	movt	r0, #0
    1360:	bl	0 <printf>
    1364:	movw	r1, #0
    1368:	mov	r0, r4
    136c:	movt	r1, #0
    1370:	bl	0 <coda_cursor_print_path>
    1374:	mov	r0, #10
    1378:	bl	0 <putchar>
    137c:	ldr	r0, [r5]
    1380:	mov	r8, #0
    1384:	cmp	r0, #0
    1388:	beq	130c <compare_data+0xa40>
    138c:	ldr	r1, [r9, #4]
    1390:	ldr	r2, [sp, #56]	; 0x38
    1394:	movw	r0, #0
    1398:	movt	r0, #0
    139c:	bl	0 <printf>
    13a0:	b	130c <compare_data+0xa40>
    13a4:	add	r5, r5, #4
    13a8:	b	1558 <compare_data+0xc8c>
    13ac:	ldr	r0, [sp, #32]
    13b0:	add	r5, r5, #1
    13b4:	cmp	r5, r0
    13b8:	bge	19a0 <compare_data+0x10d4>
    13bc:	mov	r0, r4
    13c0:	mov	r1, sl
    13c4:	bl	8cc <compare_data>
    13c8:	cmp	r0, #0
    13cc:	bne	17e8 <compare_data+0xf1c>
    13d0:	ldr	r0, [sp, #32]
    13d4:	sub	r1, r0, #1
    13d8:	cmp	r5, r1
    13dc:	bge	13b0 <compare_data+0xae4>
    13e0:	mov	r0, r4
    13e4:	bl	0 <coda_cursor_goto_next_array_element>
    13e8:	cmp	r0, #0
    13ec:	bne	178c <compare_data+0xec0>
    13f0:	mov	r0, sl
    13f4:	bl	0 <coda_cursor_goto_next_array_element>
    13f8:	cmp	r0, #0
    13fc:	beq	13ac <compare_data+0xae0>
    1400:	b	17a4 <compare_data+0xed8>
    1404:	mov	r0, sl
    1408:	bl	0 <coda_cursor_add_to_error_message>
    140c:	ldr	r4, [r9, #4]
    1410:	b	17b8 <compare_data+0xeec>
    1414:	add	r1, sp, #56	; 0x38
    1418:	mov	r0, r4
    141c:	bl	0 <coda_cursor_read_double>
    1420:	cmp	r0, #0
    1424:	bne	181c <compare_data+0xf50>
    1428:	add	r1, sp, #32
    142c:	mov	r0, sl
    1430:	bl	0 <coda_cursor_read_double>
    1434:	cmp	r0, #0
    1438:	bne	1850 <compare_data+0xf84>
    143c:	vldr	d0, [sp, #56]	; 0x38
    1440:	vldr	d16, [sp, #32]
    1444:	vcmp.f64	d0, d16
    1448:	vmrs	APSR_nzcv, fpscr
    144c:	beq	11bc <compare_data+0x8f0>
    1450:	bl	0 <coda_isNaN>
    1454:	cmp	r0, #0
    1458:	beq	146c <compare_data+0xba0>
    145c:	vldr	d0, [sp, #32]
    1460:	bl	0 <coda_isNaN>
    1464:	cmp	r0, #0
    1468:	bne	11bc <compare_data+0x8f0>
    146c:	movw	r0, #0
    1470:	movt	r0, #0
    1474:	bl	0 <printf>
    1478:	movw	r1, #0
    147c:	mov	r0, r4
    1480:	movt	r1, #0
    1484:	bl	0 <coda_cursor_print_path>
    1488:	mov	r0, #10
    148c:	bl	0 <putchar>
    1490:	movw	r0, #0
    1494:	movt	r0, #0
    1498:	ldr	r0, [r0]
    149c:	cmp	r0, #0
    14a0:	beq	11bc <compare_data+0x8f0>
    14a4:	vldr	d16, [sp, #56]	; 0x38
    14a8:	movw	r5, #0
    14ac:	ldr	r1, [r7]
    14b0:	movt	r5, #0
    14b4:	mov	r0, r5
    14b8:	vmov	r2, r3, d16
    14bc:	bl	0 <printf>
    14c0:	vldr	d16, [sp, #32]
    14c4:	ldr	r1, [r7, #4]
    14c8:	mov	r0, r5
    14cc:	vmov	r2, r3, d16
    14d0:	bl	0 <printf>
    14d4:	b	11bc <compare_data+0x8f0>
    14d8:	movw	r0, #0
    14dc:	mov	r4, sl
    14e0:	movt	r0, #0
    14e4:	add	r5, r0, #4
    14e8:	b	155c <compare_data+0xc90>
    14ec:	movw	r0, #0
    14f0:	movt	r0, #0
    14f4:	bl	0 <printf>
    14f8:	movw	r1, #0
    14fc:	mov	r0, r4
    1500:	movt	r1, #0
    1504:	bl	0 <coda_cursor_print_path>
    1508:	mov	r0, #10
    150c:	bl	0 <putchar>
    1510:	movw	r0, #0
    1514:	movt	r0, #0
    1518:	ldr	r0, [r0]
    151c:	cmp	r0, #0
    1520:	beq	11bc <compare_data+0x8f0>
    1524:	movw	r6, #0
    1528:	movw	r5, #0
    152c:	ldr	r2, [sp, #32]
    1530:	movt	r6, #0
    1534:	movt	r5, #0
    1538:	ldr	r1, [r6]
    153c:	mov	r0, r5
    1540:	bl	0 <printf>
    1544:	ldr	r1, [r6, #4]
    1548:	ldr	r2, [sp, #24]
    154c:	mov	r0, r5
    1550:	b	11b8 <compare_data+0x8ec>
    1554:	add	r5, r7, #4
    1558:	mov	r4, sl
    155c:	mov	r0, r4
    1560:	bl	0 <coda_cursor_add_to_error_message>
    1564:	ldr	r4, [r5]
    1568:	b	17b8 <compare_data+0xeec>
    156c:	ldr	r0, [fp, #-36]	; 0xffffffdc
    1570:	cmp	r0, #1
    1574:	blt	11bc <compare_data+0x8f0>
    1578:	add	r0, sp, #56	; 0x38
    157c:	mov	r1, r4
    1580:	mov	r2, #520	; 0x208
    1584:	bl	0 <memcpy>
    1588:	mov	r0, r4
    158c:	bl	0 <coda_cursor_goto_first_record_field>
    1590:	cmp	r0, #0
    1594:	bne	178c <compare_data+0xec0>
    1598:	ldr	r0, [fp, #-36]	; 0xffffffdc
    159c:	mov	r1, #0
    15a0:	str	r1, [fp, #-44]	; 0xffffffd4
    15a4:	cmp	r0, #1
    15a8:	blt	17f8 <compare_data+0xf2c>
    15ac:	add	r6, sp, #56	; 0x38
    15b0:	add	r7, sp, #48	; 0x30
    15b4:	add	r8, sp, #52	; 0x34
    15b8:	sub	r9, fp, #48	; 0x30
    15bc:	add	r5, sp, #44	; 0x2c
    15c0:	b	15dc <compare_data+0xd10>
    15c4:	ldr	r0, [fp, #-36]	; 0xffffffdc
    15c8:	ldr	r1, [fp, #-44]	; 0xffffffd4
    15cc:	add	r1, r1, #1
    15d0:	cmp	r1, r0
    15d4:	str	r1, [fp, #-44]	; 0xffffffd4
    15d8:	bge	17f8 <compare_data+0xf2c>
    15dc:	mov	r0, r6
    15e0:	mov	r2, r7
    15e4:	bl	0 <coda_cursor_get_record_field_available_status>
    15e8:	cmp	r0, #0
    15ec:	bne	19b4 <compare_data+0x10e8>
    15f0:	ldr	r1, [fp, #-44]	; 0xffffffd4
    15f4:	ldr	r0, [sp, #32]
    15f8:	mov	r2, r8
    15fc:	bl	0 <coda_type_get_record_field_name>
    1600:	cmp	r0, #0
    1604:	bne	178c <compare_data+0xec0>
    1608:	ldr	r1, [sp, #52]	; 0x34
    160c:	ldr	r0, [sp, #24]
    1610:	mov	r2, r9
    1614:	bl	0 <coda_type_get_record_field_index_from_name>
    1618:	cmp	r0, #0
    161c:	beq	1648 <compare_data+0xd7c>
    1620:	ldr	r0, [fp, #-36]	; 0xffffffdc
    1624:	ldr	r1, [fp, #-44]	; 0xffffffd4
    1628:	sub	r2, r0, #1
    162c:	cmp	r1, r2
    1630:	bge	15cc <compare_data+0xd00>
    1634:	mov	r0, r4
    1638:	bl	0 <coda_cursor_goto_next_record_field>
    163c:	cmp	r0, #0
    1640:	beq	15c4 <compare_data+0xcf8>
    1644:	b	178c <compare_data+0xec0>
    1648:	ldr	r1, [fp, #-48]	; 0xffffffd0
    164c:	mov	r0, sl
    1650:	mov	r2, r5
    1654:	bl	0 <coda_cursor_get_record_field_available_status>
    1658:	cmp	r0, #0
    165c:	bne	17a4 <compare_data+0xed8>
    1660:	ldr	r1, [sp, #48]	; 0x30
    1664:	ldr	r0, [sp, #44]	; 0x2c
    1668:	cmp	r1, #0
    166c:	beq	16ac <compare_data+0xde0>
    1670:	cmp	r0, #0
    1674:	beq	1720 <compare_data+0xe54>
    1678:	ldr	r1, [fp, #-48]	; 0xffffffd0
    167c:	mov	r0, sl
    1680:	bl	0 <coda_cursor_goto_record_field_by_index>
    1684:	cmp	r0, #0
    1688:	bne	17a4 <compare_data+0xed8>
    168c:	mov	r0, r4
    1690:	mov	r1, sl
    1694:	bl	8cc <compare_data>
    1698:	cmp	r0, #0
    169c:	bne	17e8 <compare_data+0xf1c>
    16a0:	mov	r0, sl
    16a4:	bl	0 <coda_cursor_goto_parent>
    16a8:	b	1620 <compare_data+0xd54>
    16ac:	cmp	r0, #0
    16b0:	beq	1620 <compare_data+0xd54>
    16b4:	movw	r0, #0
    16b8:	movt	r0, #0
    16bc:	bl	0 <printf>
    16c0:	movw	r1, #0
    16c4:	mov	r0, r4
    16c8:	movt	r1, #0
    16cc:	bl	0 <coda_cursor_print_path>
    16d0:	mov	r0, #10
    16d4:	bl	0 <putchar>
    16d8:	movw	r0, #0
    16dc:	movt	r0, #0
    16e0:	ldr	r0, [r0]
    16e4:	cmp	r0, #0
    16e8:	beq	1620 <compare_data+0xd54>
    16ec:	movw	r0, #0
    16f0:	movt	r0, #0
    16f4:	ldr	r1, [r0]
    16f8:	movw	r0, #0
    16fc:	movt	r0, #0
    1700:	bl	0 <printf>
    1704:	movw	r0, #0
    1708:	movt	r0, #0
    170c:	ldr	r1, [r0, #4]
    1710:	movw	r0, #0
    1714:	movt	r0, #0
    1718:	bl	0 <printf>
    171c:	b	1620 <compare_data+0xd54>
    1720:	movw	r0, #0
    1724:	movt	r0, #0
    1728:	bl	0 <printf>
    172c:	movw	r1, #0
    1730:	mov	r0, r4
    1734:	movt	r1, #0
    1738:	bl	0 <coda_cursor_print_path>
    173c:	mov	r0, #10
    1740:	bl	0 <putchar>
    1744:	movw	r0, #0
    1748:	movt	r0, #0
    174c:	ldr	r0, [r0]
    1750:	cmp	r0, #0
    1754:	beq	1620 <compare_data+0xd54>
    1758:	movw	r0, #0
    175c:	movt	r0, #0
    1760:	ldr	r1, [r0]
    1764:	movw	r0, #0
    1768:	movt	r0, #0
    176c:	bl	0 <printf>
    1770:	movw	r0, #0
    1774:	movt	r0, #0
    1778:	ldr	r1, [r0, #4]
    177c:	movw	r0, #0
    1780:	movt	r0, #0
    1784:	bl	0 <printf>
    1788:	b	1620 <compare_data+0xd54>
    178c:	mov	r0, r4
    1790:	bl	0 <coda_cursor_add_to_error_message>
    1794:	movw	r0, #0
    1798:	movt	r0, #0
    179c:	ldr	r4, [r0]
    17a0:	b	17b8 <compare_data+0xeec>
    17a4:	mov	r0, sl
    17a8:	bl	0 <coda_cursor_add_to_error_message>
    17ac:	movw	r0, #0
    17b0:	movt	r0, #0
    17b4:	ldr	r4, [r0, #4]
    17b8:	movw	r0, #0
    17bc:	movt	r0, #0
    17c0:	ldr	r5, [r0]
    17c4:	bl	0 <coda_get_errno>
    17c8:	ldr	r0, [r0]
    17cc:	bl	0 <coda_errno_to_string>
    17d0:	movw	r1, #0
    17d4:	mov	r3, r0
    17d8:	mov	r0, r5
    17dc:	mov	r2, r4
    17e0:	movt	r1, #0
    17e4:	bl	0 <fprintf>
    17e8:	mvn	r6, #0
    17ec:	mov	r0, r6
    17f0:	sub	sp, fp, #28
    17f4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    17f8:	mov	r0, r4
    17fc:	bl	0 <coda_cursor_goto_parent>
    1800:	b	11bc <compare_data+0x8f0>
    1804:	mov	r0, sl
    1808:	bl	0 <coda_cursor_add_to_error_message>
    180c:	movw	r0, #0
    1810:	movt	r0, #0
    1814:	ldr	r5, [r0, #4]
    1818:	b	193c <compare_data+0x1070>
    181c:	mov	r0, r4
    1820:	bl	0 <coda_cursor_add_to_error_message>
    1824:	ldr	r5, [r7]
    1828:	b	185c <compare_data+0xf90>
    182c:	movw	r1, #0
    1830:	movw	r3, #0
    1834:	movw	r0, #978	; 0x3d2
    1838:	mvn	r6, #0
    183c:	mov	r2, r5
    1840:	movt	r1, #0
    1844:	movt	r3, #0
    1848:	str	r0, [sp]
    184c:	b	19dc <compare_data+0x1110>
    1850:	mov	r0, sl
    1854:	bl	0 <coda_cursor_add_to_error_message>
    1858:	ldr	r5, [r7, #4]
    185c:	movw	r0, #0
    1860:	movt	r0, #0
    1864:	ldr	r6, [r0]
    1868:	bl	0 <coda_get_errno>
    186c:	ldr	r0, [r0]
    1870:	bl	0 <coda_errno_to_string>
    1874:	movw	r1, #0
    1878:	mov	r3, r0
    187c:	mov	r0, r6
    1880:	mov	r2, r5
    1884:	movt	r1, #0
    1888:	bl	0 <fprintf>
    188c:	bl	0 <coda_get_errno>
    1890:	ldr	r0, [r0]
    1894:	cmn	r0, #300	; 0x12c
    1898:	beq	11bc <compare_data+0x8f0>
    189c:	bl	0 <coda_get_errno>
    18a0:	ldr	r0, [r0]
    18a4:	cmn	r0, #103	; 0x67
    18a8:	beq	11bc <compare_data+0x8f0>
    18ac:	b	17e8 <compare_data+0xf1c>
    18b0:	movw	r1, #0
    18b4:	movw	r3, #0
    18b8:	movw	r0, #986	; 0x3da
    18bc:	mov	r2, r5
    18c0:	mvn	r6, #0
    18c4:	movt	r1, #0
    18c8:	movt	r3, #0
    18cc:	str	r0, [sp]
    18d0:	mvn	r0, #0
    18d4:	bl	0 <coda_set_error>
    18d8:	mov	r0, sl
    18dc:	bl	0 <coda_cursor_add_to_error_message>
    18e0:	movw	r0, #0
    18e4:	movt	r0, #0
    18e8:	ldr	r4, [r0, #4]
    18ec:	movw	r0, #0
    18f0:	movt	r0, #0
    18f4:	ldr	r5, [r0]
    18f8:	bl	0 <coda_get_errno>
    18fc:	ldr	r0, [r0]
    1900:	bl	0 <coda_errno_to_string>
    1904:	movw	r1, #0
    1908:	mov	r3, r0
    190c:	mov	r0, r5
    1910:	mov	r2, r4
    1914:	movt	r1, #0
    1918:	bl	0 <fprintf>
    191c:	mov	r0, r8
    1920:	bl	0 <free>
    1924:	b	17ec <compare_data+0xf20>
    1928:	mov	r0, r4
    192c:	bl	0 <coda_cursor_add_to_error_message>
    1930:	movw	r0, #0
    1934:	movt	r0, #0
    1938:	ldr	r5, [r0]
    193c:	movw	r0, #0
    1940:	movt	r0, #0
    1944:	ldr	r7, [r0]
    1948:	bl	0 <coda_get_errno>
    194c:	ldr	r0, [r0]
    1950:	bl	0 <coda_errno_to_string>
    1954:	movw	r1, #0
    1958:	mov	r3, r0
    195c:	mov	r0, r7
    1960:	mov	r2, r5
    1964:	movt	r1, #0
    1968:	bl	0 <fprintf>
    196c:	bl	0 <coda_get_errno>
    1970:	ldr	r0, [r0]
    1974:	cmn	r0, #300	; 0x12c
    1978:	beq	f90 <compare_data+0x6c4>
    197c:	bl	0 <coda_get_errno>
    1980:	ldr	r0, [r0]
    1984:	cmn	r0, #103	; 0x67
    1988:	beq	f90 <compare_data+0x6c4>
    198c:	mov	r0, r8
    1990:	bl	0 <free>
    1994:	mov	r0, r6
    1998:	bl	0 <free>
    199c:	b	17e8 <compare_data+0xf1c>
    19a0:	mov	r0, r4
    19a4:	bl	0 <coda_cursor_goto_parent>
    19a8:	mov	r0, sl
    19ac:	bl	0 <coda_cursor_goto_parent>
    19b0:	b	11bc <compare_data+0x8f0>
    19b4:	add	r0, sp, #56	; 0x38
    19b8:	b	1790 <compare_data+0xec4>
    19bc:	movw	r1, #0
    19c0:	movw	r3, #0
    19c4:	mov	r0, #1072	; 0x430
    19c8:	mvn	r6, #0
    19cc:	mov	r2, r7
    19d0:	str	r0, [sp]
    19d4:	movt	r1, #0
    19d8:	movt	r3, #0
    19dc:	mvn	r0, #0
    19e0:	bl	0 <coda_set_error>
    19e4:	mov	r0, r4
    19e8:	bl	0 <coda_cursor_add_to_error_message>
    19ec:	movw	r0, #0
    19f0:	movt	r0, #0
    19f4:	ldr	r4, [r0]
    19f8:	movw	r0, #0
    19fc:	movt	r0, #0
    1a00:	ldr	r5, [r0]
    1a04:	bl	0 <coda_get_errno>
    1a08:	ldr	r0, [r0]
    1a0c:	bl	0 <coda_errno_to_string>
    1a10:	movw	r1, #0
    1a14:	mov	r3, r0
    1a18:	mov	r0, r5
    1a1c:	mov	r2, r4
    1a20:	movt	r1, #0
    1a24:	bl	0 <fprintf>
    1a28:	b	17ec <compare_data+0xf20>
    1a2c:	movw	r1, #0
    1a30:	movw	r3, #0
    1a34:	movw	r0, #1080	; 0x438
    1a38:	mov	r2, r9
    1a3c:	mvn	r6, #0
    1a40:	movt	r1, #0
    1a44:	movt	r3, #0
    1a48:	str	r0, [sp]
    1a4c:	mvn	r0, #0
    1a50:	bl	0 <coda_set_error>
    1a54:	mov	r0, sl
    1a58:	bl	0 <coda_cursor_add_to_error_message>
    1a5c:	movw	r0, #0
    1a60:	movt	r0, #0
    1a64:	ldr	r4, [r0, #4]
    1a68:	movw	r0, #0
    1a6c:	movt	r0, #0
    1a70:	ldr	r5, [r0]
    1a74:	bl	0 <coda_get_errno>
    1a78:	ldr	r0, [r0]
    1a7c:	bl	0 <coda_errno_to_string>
    1a80:	movw	r1, #0
    1a84:	mov	r3, r0
    1a88:	mov	r0, r5
    1a8c:	mov	r2, r4
    1a90:	movt	r1, #0
    1a94:	bl	0 <fprintf>
    1a98:	ldr	r0, [sp, #8]
    1a9c:	bl	0 <free>
    1aa0:	b	17ec <compare_data+0xf20>
    1aa4:	mov	r0, r4
    1aa8:	bl	0 <coda_cursor_add_to_error_message>
    1aac:	movw	r0, #0
    1ab0:	movt	r0, #0
    1ab4:	ldr	r5, [r0]
    1ab8:	movw	r0, #0
    1abc:	movt	r0, #0
    1ac0:	ldr	r7, [r0]
    1ac4:	bl	0 <coda_get_errno>
    1ac8:	ldr	r0, [r0]
    1acc:	bl	0 <coda_errno_to_string>
    1ad0:	movw	r1, #0
    1ad4:	mov	r3, r0
    1ad8:	mov	r0, r7
    1adc:	mov	r2, r5
    1ae0:	movt	r1, #0
    1ae4:	bl	0 <fprintf>
    1ae8:	bl	0 <coda_get_errno>
    1aec:	ldr	r0, [r0]
    1af0:	ldr	r6, [sp, #12]
    1af4:	cmn	r0, #300	; 0x12c
    1af8:	beq	f90 <compare_data+0x6c4>
    1afc:	b	197c <compare_data+0x10b0>
    1b00:	mov	r0, sl
    1b04:	b	1790 <compare_data+0xec4>
    1b08:	movw	r0, #0
    1b0c:	movw	r1, #0
    1b10:	movw	r3, #0
    1b14:	movw	r2, #950	; 0x3b6
    1b18:	movt	r0, #0
    1b1c:	movt	r1, #0
    1b20:	movt	r3, #0
    1b24:	bl	0 <__assert_fail>

00001b28 <compare_arrays_as_records>:
    1b28:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1b2c:	add	fp, sp, #28
    1b30:	sub	sp, sp, #44	; 0x2c
    1b34:	mov	r6, r1
    1b38:	mov	r1, #0
    1b3c:	mov	r4, r2
    1b40:	str	r0, [sp, #24]
    1b44:	str	r1, [sp, #36]	; 0x24
    1b48:	add	r1, sp, #32
    1b4c:	bl	0 <coda_cursor_get_num_elements>
    1b50:	cmp	r0, #0
    1b54:	bne	1e64 <compare_arrays_as_records+0x33c>
    1b58:	add	r1, sp, #28
    1b5c:	mov	r0, r6
    1b60:	bl	0 <coda_cursor_get_num_elements>
    1b64:	cmp	r0, #0
    1b68:	bne	1e7c <compare_arrays_as_records+0x354>
    1b6c:	add	r1, sp, #36	; 0x24
    1b70:	mov	r0, r4
    1b74:	bl	0 <coda_expression_from_string>
    1b78:	cmp	r0, #0
    1b7c:	bne	1ec8 <compare_arrays_as_records+0x3a0>
    1b80:	ldr	r5, [sp, #32]
    1b84:	lsl	r4, r5, #2
    1b88:	mov	r0, r4
    1b8c:	bl	0 <malloc>
    1b90:	cmp	r0, #0
    1b94:	beq	1efc <compare_arrays_as_records+0x3d4>
    1b98:	mov	sl, r0
    1b9c:	cmp	r5, #1
    1ba0:	blt	1bb4 <compare_arrays_as_records+0x8c>
    1ba4:	mov	r0, sl
    1ba8:	mov	r1, #0
    1bac:	mov	r2, r4
    1bb0:	bl	0 <memset>
    1bb4:	ldr	r5, [sp, #28]
    1bb8:	lsl	r4, r5, #2
    1bbc:	mov	r0, r4
    1bc0:	bl	0 <malloc>
    1bc4:	cmp	r0, #0
    1bc8:	beq	1f74 <compare_arrays_as_records+0x44c>
    1bcc:	mov	r7, r0
    1bd0:	cmp	r5, #1
    1bd4:	blt	1be8 <compare_arrays_as_records+0xc0>
    1bd8:	mov	r0, r7
    1bdc:	mov	r1, #0
    1be0:	mov	r2, r4
    1be4:	bl	0 <memset>
    1be8:	mov	r0, #1
    1bec:	bl	0 <coda_hashtable_new>
    1bf0:	cmp	r0, #0
    1bf4:	str	r0, [sp, #20]
    1bf8:	beq	1ff4 <compare_arrays_as_records+0x4cc>
    1bfc:	mov	r0, #1
    1c00:	bl	0 <coda_hashtable_new>
    1c04:	cmp	r0, #0
    1c08:	str	r0, [sp, #16]
    1c0c:	beq	2064 <compare_arrays_as_records+0x53c>
    1c10:	ldr	r0, [sp, #32]
    1c14:	ldr	r8, [sp, #28]
    1c18:	ldr	r9, [sp, #36]	; 0x24
    1c1c:	cmp	r0, #1
    1c20:	str	r0, [sp, #12]
    1c24:	blt	1cec <compare_arrays_as_records+0x1c4>
    1c28:	ldr	r0, [sp, #24]
    1c2c:	bl	0 <coda_cursor_goto_first_array_element>
    1c30:	cmp	r0, #0
    1c34:	bne	2340 <compare_arrays_as_records+0x818>
    1c38:	ldr	r0, [sp, #12]
    1c3c:	stmib	sp, {r6, r7}
    1c40:	mov	r7, #0
    1c44:	sub	r6, fp, #32
    1c48:	mov	r4, sl
    1c4c:	sub	r5, r0, #1
    1c50:	b	1c68 <compare_arrays_as_records+0x140>
    1c54:	ldr	r0, [sp, #12]
    1c58:	add	r7, r7, #1
    1c5c:	add	r4, r4, #4
    1c60:	cmp	r0, r7
    1c64:	beq	1ce0 <compare_arrays_as_records+0x1b8>
    1c68:	ldr	r1, [sp, #24]
    1c6c:	mov	r0, r9
    1c70:	mov	r2, r4
    1c74:	mov	r3, r6
    1c78:	bl	0 <coda_expression_eval_string>
    1c7c:	cmp	r0, #0
    1c80:	bne	1cd0 <compare_arrays_as_records+0x1a8>
    1c84:	ldr	r1, [r4]
    1c88:	ldr	r0, [sp, #20]
    1c8c:	bl	0 <coda_hashtable_add_name>
    1c90:	cmp	r0, #0
    1c94:	bne	1cbc <compare_arrays_as_records+0x194>
    1c98:	cmp	r7, r5
    1c9c:	bge	1c54 <compare_arrays_as_records+0x12c>
    1ca0:	ldr	r0, [sp, #24]
    1ca4:	bl	0 <coda_cursor_goto_next_array_element>
    1ca8:	cmp	r0, #0
    1cac:	beq	1c54 <compare_arrays_as_records+0x12c>
    1cb0:	ldr	r0, [sp, #24]
    1cb4:	bl	0 <coda_cursor_add_to_error_message>
    1cb8:	b	1cd0 <compare_arrays_as_records+0x1a8>
    1cbc:	ldr	r2, [r4]
    1cc0:	movw	r1, #0
    1cc4:	mvn	r0, #99	; 0x63
    1cc8:	movt	r1, #0
    1ccc:	bl	0 <coda_set_error>
    1cd0:	movw	r0, #0
    1cd4:	movt	r0, #0
    1cd8:	ldr	r4, [r0]
    1cdc:	b	1d9c <compare_arrays_as_records+0x274>
    1ce0:	ldr	r0, [sp, #24]
    1ce4:	bl	0 <coda_cursor_goto_parent>
    1ce8:	ldmib	sp, {r6, r7}
    1cec:	cmp	r8, #1
    1cf0:	blt	2104 <compare_arrays_as_records+0x5dc>
    1cf4:	mov	r0, r6
    1cf8:	bl	0 <coda_cursor_goto_first_array_element>
    1cfc:	cmp	r0, #0
    1d00:	bne	2358 <compare_arrays_as_records+0x830>
    1d04:	mov	r4, r7
    1d08:	sub	r5, r8, #1
    1d0c:	mov	r7, #0
    1d10:	str	r4, [sp, #8]
    1d14:	b	1d28 <compare_arrays_as_records+0x200>
    1d18:	add	r7, r7, #1
    1d1c:	add	r4, r4, #4
    1d20:	cmp	r8, r7
    1d24:	beq	20f8 <compare_arrays_as_records+0x5d0>
    1d28:	mov	r0, r9
    1d2c:	mov	r1, r6
    1d30:	mov	r2, r4
    1d34:	sub	r3, fp, #32
    1d38:	bl	0 <coda_expression_eval_string>
    1d3c:	cmp	r0, #0
    1d40:	bne	1d90 <compare_arrays_as_records+0x268>
    1d44:	ldr	r1, [r4]
    1d48:	ldr	r0, [sp, #16]
    1d4c:	bl	0 <coda_hashtable_add_name>
    1d50:	cmp	r0, #0
    1d54:	bne	1d7c <compare_arrays_as_records+0x254>
    1d58:	cmp	r7, r5
    1d5c:	bge	1d18 <compare_arrays_as_records+0x1f0>
    1d60:	mov	r0, r6
    1d64:	bl	0 <coda_cursor_goto_next_array_element>
    1d68:	cmp	r0, #0
    1d6c:	beq	1d18 <compare_arrays_as_records+0x1f0>
    1d70:	mov	r0, r6
    1d74:	bl	0 <coda_cursor_add_to_error_message>
    1d78:	b	1d90 <compare_arrays_as_records+0x268>
    1d7c:	ldr	r2, [r4]
    1d80:	movw	r1, #0
    1d84:	mvn	r0, #99	; 0x63
    1d88:	movt	r1, #0
    1d8c:	bl	0 <coda_set_error>
    1d90:	movw	r0, #0
    1d94:	movt	r0, #0
    1d98:	ldr	r4, [r0, #4]
    1d9c:	movw	r0, #0
    1da0:	movt	r0, #0
    1da4:	ldr	r6, [r0]
    1da8:	bl	0 <coda_get_errno>
    1dac:	ldr	r0, [r0]
    1db0:	bl	0 <coda_errno_to_string>
    1db4:	movw	r1, #0
    1db8:	mov	r3, r0
    1dbc:	mov	r0, r6
    1dc0:	mov	r2, r4
    1dc4:	movt	r1, #0
    1dc8:	bl	0 <fprintf>
    1dcc:	ldr	r7, [sp, #8]
    1dd0:	mvn	r6, #0
    1dd4:	ldr	r0, [sp, #36]	; 0x24
    1dd8:	bl	0 <coda_expression_delete>
    1ddc:	ldr	r0, [sp, #20]
    1de0:	bl	0 <coda_hashtable_delete>
    1de4:	ldr	r0, [sp, #16]
    1de8:	bl	0 <coda_hashtable_delete>
    1dec:	ldr	r1, [sp, #32]
    1df0:	cmp	r1, #1
    1df4:	blt	1e24 <compare_arrays_as_records+0x2fc>
    1df8:	mov	r4, #0
    1dfc:	b	1e0c <compare_arrays_as_records+0x2e4>
    1e00:	add	r4, r4, #1
    1e04:	cmp	r4, r1
    1e08:	bge	1e24 <compare_arrays_as_records+0x2fc>
    1e0c:	ldr	r0, [sl, r4, lsl #2]
    1e10:	cmp	r0, #0
    1e14:	beq	1e00 <compare_arrays_as_records+0x2d8>
    1e18:	bl	0 <coda_free>
    1e1c:	ldr	r1, [sp, #32]
    1e20:	b	1e00 <compare_arrays_as_records+0x2d8>
    1e24:	mov	r0, sl
    1e28:	bl	0 <free>
    1e2c:	ldr	r1, [sp, #28]
    1e30:	cmp	r1, #1
    1e34:	blt	20e4 <compare_arrays_as_records+0x5bc>
    1e38:	mov	r4, #0
    1e3c:	b	1e4c <compare_arrays_as_records+0x324>
    1e40:	add	r4, r4, #1
    1e44:	cmp	r4, r1
    1e48:	bge	20e4 <compare_arrays_as_records+0x5bc>
    1e4c:	ldr	r0, [r7, r4, lsl #2]
    1e50:	cmp	r0, #0
    1e54:	beq	1e40 <compare_arrays_as_records+0x318>
    1e58:	bl	0 <coda_free>
    1e5c:	ldr	r1, [sp, #28]
    1e60:	b	1e40 <compare_arrays_as_records+0x318>
    1e64:	ldr	r0, [sp, #24]
    1e68:	bl	0 <coda_cursor_add_to_error_message>
    1e6c:	movw	r0, #0
    1e70:	movt	r0, #0
    1e74:	ldr	r4, [r0]
    1e78:	b	1e90 <compare_arrays_as_records+0x368>
    1e7c:	mov	r0, r6
    1e80:	bl	0 <coda_cursor_add_to_error_message>
    1e84:	movw	r0, #0
    1e88:	movt	r0, #0
    1e8c:	ldr	r4, [r0, #4]
    1e90:	movw	r0, #0
    1e94:	movt	r0, #0
    1e98:	ldr	r5, [r0]
    1e9c:	bl	0 <coda_get_errno>
    1ea0:	ldr	r0, [r0]
    1ea4:	bl	0 <coda_errno_to_string>
    1ea8:	movw	r1, #0
    1eac:	mov	r3, r0
    1eb0:	mov	r0, r5
    1eb4:	mov	r2, r4
    1eb8:	movt	r1, #0
    1ebc:	bl	0 <fprintf>
    1ec0:	mvn	r6, #0
    1ec4:	b	20ec <compare_arrays_as_records+0x5c4>
    1ec8:	movw	r0, #0
    1ecc:	movt	r0, #0
    1ed0:	ldr	r4, [r0]
    1ed4:	bl	0 <coda_get_errno>
    1ed8:	ldr	r0, [r0]
    1edc:	bl	0 <coda_errno_to_string>
    1ee0:	movw	r1, #0
    1ee4:	mov	r2, r0
    1ee8:	mov	r0, r4
    1eec:	movt	r1, #0
    1ef0:	bl	0 <fprintf>
    1ef4:	mvn	r6, #0
    1ef8:	b	20ec <compare_arrays_as_records+0x5c4>
    1efc:	movw	r1, #0
    1f00:	movw	r3, #0
    1f04:	movw	r0, #461	; 0x1cd
    1f08:	mov	r2, r4
    1f0c:	mvn	r6, #0
    1f10:	movt	r1, #0
    1f14:	movt	r3, #0
    1f18:	str	r0, [sp]
    1f1c:	mvn	r0, #0
    1f20:	bl	0 <coda_set_error>
    1f24:	ldr	r0, [sp, #24]
    1f28:	bl	0 <coda_cursor_add_to_error_message>
    1f2c:	movw	r0, #0
    1f30:	movt	r0, #0
    1f34:	ldr	r4, [r0]
    1f38:	movw	r0, #0
    1f3c:	movt	r0, #0
    1f40:	ldr	r5, [r0]
    1f44:	bl	0 <coda_get_errno>
    1f48:	ldr	r0, [r0]
    1f4c:	bl	0 <coda_errno_to_string>
    1f50:	movw	r1, #0
    1f54:	mov	r3, r0
    1f58:	mov	r0, r5
    1f5c:	mov	r2, r4
    1f60:	movt	r1, #0
    1f64:	bl	0 <fprintf>
    1f68:	ldr	r0, [sp, #36]	; 0x24
    1f6c:	bl	0 <coda_expression_delete>
    1f70:	b	20ec <compare_arrays_as_records+0x5c4>
    1f74:	movw	r1, #0
    1f78:	movw	r3, #0
    1f7c:	movw	r0, #475	; 0x1db
    1f80:	mov	r2, r4
    1f84:	mov	r5, r6
    1f88:	mvn	r6, #0
    1f8c:	movt	r1, #0
    1f90:	movt	r3, #0
    1f94:	str	r0, [sp]
    1f98:	mvn	r0, #0
    1f9c:	bl	0 <coda_set_error>
    1fa0:	mov	r0, r5
    1fa4:	bl	0 <coda_cursor_add_to_error_message>
    1fa8:	movw	r0, #0
    1fac:	movt	r0, #0
    1fb0:	ldr	r4, [r0, #4]
    1fb4:	movw	r0, #0
    1fb8:	movt	r0, #0
    1fbc:	ldr	r5, [r0]
    1fc0:	bl	0 <coda_get_errno>
    1fc4:	ldr	r0, [r0]
    1fc8:	bl	0 <coda_errno_to_string>
    1fcc:	movw	r1, #0
    1fd0:	mov	r3, r0
    1fd4:	mov	r0, r5
    1fd8:	mov	r2, r4
    1fdc:	movt	r1, #0
    1fe0:	bl	0 <fprintf>
    1fe4:	ldr	r0, [sp, #36]	; 0x24
    1fe8:	bl	0 <coda_expression_delete>
    1fec:	mov	r0, sl
    1ff0:	b	20e8 <compare_arrays_as_records+0x5c0>
    1ff4:	movw	r1, #0
    1ff8:	movw	r2, #0
    1ffc:	mvn	r0, #0
    2000:	movw	r3, #489	; 0x1e9
    2004:	mvn	r6, #0
    2008:	movt	r1, #0
    200c:	movt	r2, #0
    2010:	bl	0 <coda_set_error>
    2014:	ldr	r0, [sp, #24]
    2018:	bl	0 <coda_cursor_add_to_error_message>
    201c:	movw	r0, #0
    2020:	movt	r0, #0
    2024:	ldr	r8, [r0]
    2028:	movw	r0, #0
    202c:	movt	r0, #0
    2030:	ldr	r4, [r0]
    2034:	bl	0 <coda_get_errno>
    2038:	ldr	r0, [r0]
    203c:	bl	0 <coda_errno_to_string>
    2040:	movw	r1, #0
    2044:	mov	r3, r0
    2048:	mov	r0, r4
    204c:	mov	r2, r8
    2050:	movt	r1, #0
    2054:	bl	0 <fprintf>
    2058:	ldr	r0, [sp, #36]	; 0x24
    205c:	bl	0 <coda_expression_delete>
    2060:	b	20dc <compare_arrays_as_records+0x5b4>
    2064:	movw	r1, #0
    2068:	movw	r2, #0
    206c:	mvn	r0, #0
    2070:	mov	r3, #500	; 0x1f4
    2074:	mov	r4, r6
    2078:	mvn	r6, #0
    207c:	movt	r1, #0
    2080:	movt	r2, #0
    2084:	bl	0 <coda_set_error>
    2088:	mov	r0, r4
    208c:	bl	0 <coda_cursor_add_to_error_message>
    2090:	movw	r0, #0
    2094:	movt	r0, #0
    2098:	ldr	r8, [r0, #4]
    209c:	movw	r0, #0
    20a0:	movt	r0, #0
    20a4:	ldr	r4, [r0]
    20a8:	bl	0 <coda_get_errno>
    20ac:	ldr	r0, [r0]
    20b0:	bl	0 <coda_errno_to_string>
    20b4:	movw	r1, #0
    20b8:	mov	r3, r0
    20bc:	mov	r0, r4
    20c0:	mov	r2, r8
    20c4:	movt	r1, #0
    20c8:	bl	0 <fprintf>
    20cc:	ldr	r0, [sp, #36]	; 0x24
    20d0:	bl	0 <coda_expression_delete>
    20d4:	ldr	r0, [sp, #20]
    20d8:	bl	0 <coda_hashtable_delete>
    20dc:	mov	r0, sl
    20e0:	bl	0 <free>
    20e4:	mov	r0, r7
    20e8:	bl	0 <free>
    20ec:	mov	r0, r6
    20f0:	sub	sp, fp, #28
    20f4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    20f8:	mov	r0, r6
    20fc:	bl	0 <coda_cursor_goto_parent>
    2100:	ldr	r7, [sp, #8]
    2104:	ldr	r5, [sp, #12]
    2108:	str	r6, [sp, #4]
    210c:	movw	r6, #0
    2110:	movt	r6, #0
    2114:	cmp	r5, r8
    2118:	beq	217c <compare_arrays_as_records+0x654>
    211c:	movw	r0, #0
    2120:	movt	r0, #0
    2124:	bl	0 <printf>
    2128:	ldr	r0, [sp, #24]
    212c:	movw	r1, #0
    2130:	movt	r1, #0
    2134:	bl	0 <coda_cursor_print_path>
    2138:	mov	r0, #10
    213c:	bl	0 <putchar>
    2140:	ldr	r0, [r6]
    2144:	cmp	r0, #0
    2148:	beq	217c <compare_arrays_as_records+0x654>
    214c:	movw	r9, #0
    2150:	movw	r4, #0
    2154:	mov	r2, r5
    2158:	movt	r9, #0
    215c:	movt	r4, #0
    2160:	ldr	r1, [r9]
    2164:	mov	r0, r4
    2168:	bl	0 <printf>
    216c:	ldr	r1, [r9, #4]
    2170:	mov	r0, r4
    2174:	mov	r2, r8
    2178:	bl	0 <printf>
    217c:	cmp	r5, #1
    2180:	blt	2210 <compare_arrays_as_records+0x6e8>
    2184:	mov	r9, r5
    2188:	mov	r4, #1
    218c:	mov	r5, sl
    2190:	b	21a0 <compare_arrays_as_records+0x678>
    2194:	subs	r9, r9, #1
    2198:	add	sl, sl, #4
    219c:	beq	2218 <compare_arrays_as_records+0x6f0>
    21a0:	ldr	r1, [sl]
    21a4:	ldr	r0, [sp, #16]
    21a8:	bl	0 <coda_hashtable_get_index_from_name>
    21ac:	cmn	r0, #1
    21b0:	bgt	2194 <compare_arrays_as_records+0x66c>
    21b4:	cmp	r4, #0
    21b8:	beq	21e0 <compare_arrays_as_records+0x6b8>
    21bc:	movw	r0, #0
    21c0:	movt	r0, #0
    21c4:	bl	0 <printf>
    21c8:	ldr	r0, [sp, #24]
    21cc:	movw	r1, #0
    21d0:	movt	r1, #0
    21d4:	bl	0 <coda_cursor_print_path>
    21d8:	mov	r0, #10
    21dc:	bl	0 <putchar>
    21e0:	ldr	r0, [r6]
    21e4:	mov	r4, #0
    21e8:	cmp	r0, #0
    21ec:	beq	2194 <compare_arrays_as_records+0x66c>
    21f0:	movw	r0, #0
    21f4:	ldr	r2, [sl]
    21f8:	movt	r0, #0
    21fc:	ldr	r1, [r0]
    2200:	movw	r0, #0
    2204:	movt	r0, #0
    2208:	bl	0 <printf>
    220c:	b	2194 <compare_arrays_as_records+0x66c>
    2210:	mov	r5, sl
    2214:	mov	r4, #1
    2218:	cmp	r8, #1
    221c:	mov	sl, r5
    2220:	blt	22ac <compare_arrays_as_records+0x784>
    2224:	movw	r9, #0
    2228:	mov	r5, r7
    222c:	movt	r9, #0
    2230:	b	2240 <compare_arrays_as_records+0x718>
    2234:	subs	r8, r8, #1
    2238:	add	r5, r5, #4
    223c:	beq	22ac <compare_arrays_as_records+0x784>
    2240:	ldr	r1, [r5]
    2244:	ldr	r0, [sp, #20]
    2248:	bl	0 <coda_hashtable_get_index_from_name>
    224c:	cmn	r0, #1
    2250:	bgt	2234 <compare_arrays_as_records+0x70c>
    2254:	cmp	r4, #0
    2258:	beq	227c <compare_arrays_as_records+0x754>
    225c:	movw	r0, #0
    2260:	movt	r0, #0
    2264:	bl	0 <printf>
    2268:	ldr	r0, [sp, #24]
    226c:	mov	r1, r9
    2270:	bl	0 <coda_cursor_print_path>
    2274:	mov	r0, #10
    2278:	bl	0 <putchar>
    227c:	ldr	r0, [r6]
    2280:	mov	r4, #0
    2284:	cmp	r0, #0
    2288:	beq	2234 <compare_arrays_as_records+0x70c>
    228c:	movw	r0, #0
    2290:	ldr	r2, [r5]
    2294:	movt	r0, #0
    2298:	ldr	r1, [r0, #4]
    229c:	movw	r0, #0
    22a0:	movt	r0, #0
    22a4:	bl	0 <printf>
    22a8:	b	2234 <compare_arrays_as_records+0x70c>
    22ac:	ldr	r4, [sp, #12]
    22b0:	cmp	r4, #1
    22b4:	blt	23a8 <compare_arrays_as_records+0x880>
    22b8:	ldr	r0, [sp, #24]
    22bc:	bl	0 <coda_cursor_goto_first_array_element>
    22c0:	cmp	r0, #0
    22c4:	bne	2340 <compare_arrays_as_records+0x818>
    22c8:	ldr	r6, [sp, #4]
    22cc:	sub	r8, r4, #1
    22d0:	mov	r5, #0
    22d4:	b	22e4 <compare_arrays_as_records+0x7bc>
    22d8:	add	r5, r5, #1
    22dc:	cmp	r4, r5
    22e0:	beq	23a0 <compare_arrays_as_records+0x878>
    22e4:	ldr	r1, [sl, r5, lsl #2]
    22e8:	ldr	r0, [sp, #16]
    22ec:	bl	0 <coda_hashtable_get_index_from_name>
    22f0:	cmp	r0, #0
    22f4:	bmi	2328 <compare_arrays_as_records+0x800>
    22f8:	mov	r1, r0
    22fc:	mov	r0, r6
    2300:	bl	0 <coda_cursor_goto_array_element_by_index>
    2304:	cmp	r0, #0
    2308:	bne	2358 <compare_arrays_as_records+0x830>
    230c:	ldr	r0, [sp, #24]
    2310:	mov	r1, r6
    2314:	bl	8cc <compare_data>
    2318:	cmp	r0, #0
    231c:	bne	1dd0 <compare_arrays_as_records+0x2a8>
    2320:	mov	r0, r6
    2324:	bl	0 <coda_cursor_goto_parent>
    2328:	cmp	r5, r8
    232c:	bge	22d8 <compare_arrays_as_records+0x7b0>
    2330:	ldr	r0, [sp, #24]
    2334:	bl	0 <coda_cursor_goto_next_array_element>
    2338:	cmp	r0, #0
    233c:	beq	22d8 <compare_arrays_as_records+0x7b0>
    2340:	ldr	r0, [sp, #24]
    2344:	bl	0 <coda_cursor_add_to_error_message>
    2348:	movw	r0, #0
    234c:	movt	r0, #0
    2350:	ldr	r4, [r0]
    2354:	b	236c <compare_arrays_as_records+0x844>
    2358:	mov	r0, r6
    235c:	bl	0 <coda_cursor_add_to_error_message>
    2360:	movw	r0, #0
    2364:	movt	r0, #0
    2368:	ldr	r4, [r0, #4]
    236c:	movw	r0, #0
    2370:	movt	r0, #0
    2374:	ldr	r6, [r0]
    2378:	bl	0 <coda_get_errno>
    237c:	ldr	r0, [r0]
    2380:	bl	0 <coda_errno_to_string>
    2384:	movw	r1, #0
    2388:	mov	r3, r0
    238c:	mov	r0, r6
    2390:	mov	r2, r4
    2394:	movt	r1, #0
    2398:	bl	0 <fprintf>
    239c:	b	1dd0 <compare_arrays_as_records+0x2a8>
    23a0:	ldr	r0, [sp, #24]
    23a4:	bl	0 <coda_cursor_goto_parent>
    23a8:	mov	r6, #0
    23ac:	b	1dd4 <compare_arrays_as_records+0x2ac>

000023b0 <print_escaped>:
    23b0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    23b4:	add	fp, sp, #28
    23b8:	sub	sp, sp, #4
    23bc:	cmp	r1, #1
    23c0:	blt	24b8 <print_escaped+0x108>
    23c4:	movw	r7, #0
    23c8:	movw	r8, #0
    23cc:	movw	r9, #0
    23d0:	movw	sl, #0
    23d4:	movw	r6, #0
    23d8:	mov	r4, r1
    23dc:	mov	r5, r0
    23e0:	movt	r7, #0
    23e4:	movt	r8, #0
    23e8:	movt	r9, #0
    23ec:	movt	sl, #0
    23f0:	movt	r6, #0
    23f4:	b	2410 <print_escaped+0x60>
    23f8:	movw	r0, #0
    23fc:	movt	r0, #0
    2400:	bl	0 <printf>
    2404:	add	r5, r5, #1
    2408:	subs	r4, r4, #1
    240c:	beq	24b8 <print_escaped+0x108>
    2410:	ldrb	r1, [r5]
    2414:	sub	r0, r1, #7
    2418:	cmp	r0, #6
    241c:	bhi	2450 <print_escaped+0xa0>
    2420:	add	r1, pc, #0
    2424:	ldr	pc, [r1, r0, lsl #2]
    2428:	.word	0x00002444
    242c:	.word	0x00002474
    2430:	.word	0x00002480
    2434:	.word	0x00002488
    2438:	.word	0x00002490
    243c:	.word	0x00002498
    2440:	.word	0x000024a0
    2444:	movw	r0, #0
    2448:	movt	r0, #0
    244c:	b	2400 <print_escaped+0x50>
    2450:	cmp	r1, #92	; 0x5c
    2454:	beq	23f8 <print_escaped+0x48>
    2458:	sub	r0, r1, #32
    245c:	uxtb	r0, r0
    2460:	cmp	r0, #94	; 0x5e
    2464:	bhi	24a8 <print_escaped+0xf8>
    2468:	mov	r0, r1
    246c:	bl	0 <putchar>
    2470:	b	2404 <print_escaped+0x54>
    2474:	movw	r0, #0
    2478:	movt	r0, #0
    247c:	b	2400 <print_escaped+0x50>
    2480:	mov	r0, r7
    2484:	b	2400 <print_escaped+0x50>
    2488:	mov	r0, r8
    248c:	b	2400 <print_escaped+0x50>
    2490:	mov	r0, r9
    2494:	b	2400 <print_escaped+0x50>
    2498:	mov	r0, sl
    249c:	b	2400 <print_escaped+0x50>
    24a0:	mov	r0, r6
    24a4:	b	2400 <print_escaped+0x50>
    24a8:	movw	r0, #0
    24ac:	movt	r0, #0
    24b0:	bl	0 <printf>
    24b4:	b	2404 <print_escaped+0x54>
    24b8:	sub	sp, fp, #28
    24bc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
