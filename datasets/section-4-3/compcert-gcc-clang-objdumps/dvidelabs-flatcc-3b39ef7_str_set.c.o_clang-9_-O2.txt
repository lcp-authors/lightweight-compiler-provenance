
../compcert-repos/dvidelabs-flatcc-3b39ef7/src/compiler/CMakeFiles/flatcc.dir/__/__/external/hash/str_set.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <str_set_clear>:
   0:	push	{r4, sl, fp, lr}
   4:	add	fp, sp, #8
   8:	mov	r4, r0
   c:	ldr	r0, [r0]
  10:	cmp	r0, #0
  14:	beq	1c <str_set_clear+0x1c>
  18:	bl	0 <free>
  1c:	vmov.i32	q8, #0	; 0x00000000
  20:	vst1.32	{d16-d17}, [r4]
  24:	pop	{r4, sl, fp, pc}

00000028 <str_set_destroy>:
  28:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
  2c:	add	fp, sp, #24
  30:	mov	r4, r0
  34:	cmp	r1, #0
  38:	beq	88 <str_set_destroy+0x60>
  3c:	ldr	r0, [r4, #12]
  40:	cmp	r0, #0
  44:	beq	88 <str_set_destroy+0x60>
  48:	ldr	r7, [r4]
  4c:	mov	r8, r2
  50:	mov	r6, r1
  54:	mov	r5, #0
  58:	b	68 <str_set_destroy+0x40>
  5c:	add	r5, r5, #1
  60:	cmp	r5, r0
  64:	bcs	88 <str_set_destroy+0x60>
  68:	ldr	r1, [r7, r5, lsl #2]
  6c:	orr	r2, r1, #2
  70:	cmp	r2, #2
  74:	beq	5c <str_set_destroy+0x34>
  78:	mov	r0, r8
  7c:	blx	r6
  80:	ldr	r0, [r4, #12]
  84:	b	5c <str_set_destroy+0x34>
  88:	ldr	r0, [r4]
  8c:	cmp	r0, #0
  90:	beq	98 <str_set_destroy+0x70>
  94:	bl	0 <free>
  98:	vmov.i32	q8, #0	; 0x00000000
  9c:	vst1.32	{d16-d17}, [r4]
  a0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

000000a4 <str_set_init>:
  a4:	push	{r4, r5, fp, lr}
  a8:	add	fp, sp, #8
  ac:	mov	r4, r0
  b0:	mov	r2, #4
  b4:	mov	r0, #179	; 0xb3
  b8:	mul	r3, r2, r0
  bc:	mov	r5, r2
  c0:	lsl	r2, r2, #1
  c4:	cmp	r1, r3, lsr #8
  c8:	bhi	b8 <str_set_init+0x14>
  cc:	mov	r0, r5
  d0:	mov	r1, #4
  d4:	bl	0 <calloc>
  d8:	cmp	r0, #0
  dc:	str	r0, [r4]
  e0:	mvneq	r0, #0
  e4:	movne	r0, #0
  e8:	strne	r0, [r4, #4]
  ec:	strne	r0, [r4, #8]
  f0:	strne	r5, [r4, #12]
  f4:	pop	{r4, r5, fp, pc}

000000f8 <str_set_resize>:
  f8:	b	fc <ht_resize>

000000fc <ht_resize>:
  fc:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
 100:	add	fp, sp, #24
 104:	sub	sp, sp, #24
 108:	mov	r4, r0
 10c:	ldr	r5, [r0]
 110:	ldr	r0, [r0, #8]
 114:	mov	r2, #4
 118:	cmp	r0, r1
 11c:	movhi	r1, r0
 120:	mov	r0, #179	; 0xb3
 124:	mul	r3, r2, r0
 128:	mov	r6, r2
 12c:	lsl	r2, r2, #1
 130:	cmp	r1, r3, lsr #8
 134:	bhi	124 <ht_resize+0x28>
 138:	mov	r0, r6
 13c:	mov	r1, #4
 140:	bl	0 <calloc>
 144:	cmp	r0, #0
 148:	str	r0, [sp, #8]
 14c:	beq	1bc <ht_resize+0xc0>
 150:	str	r6, [sp, #20]
 154:	mov	r6, #0
 158:	str	r6, [sp, #12]
 15c:	str	r6, [sp, #16]
 160:	ldr	r0, [r4, #12]
 164:	cmp	r0, #0
 168:	beq	1cc <ht_resize+0xd0>
 16c:	mov	r9, #3
 170:	add	r8, sp, #8
 174:	b	184 <ht_resize+0x88>
 178:	add	r6, r6, #1
 17c:	cmp	r6, r0
 180:	bcs	1c8 <ht_resize+0xcc>
 184:	ldr	r7, [r5, r6, lsl #2]
 188:	orr	r1, r7, #2
 18c:	cmp	r1, #2
 190:	beq	178 <ht_resize+0x7c>
 194:	mov	r0, r7
 198:	bl	0 <strlen>
 19c:	mov	r2, r0
 1a0:	mov	r0, r8
 1a4:	mov	r1, r7
 1a8:	mov	r3, r7
 1ac:	str	r9, [sp]
 1b0:	bl	1f8 <ht_insert>
 1b4:	ldr	r0, [r4, #12]
 1b8:	b	178 <ht_resize+0x7c>
 1bc:	mvn	r0, #0
 1c0:	sub	sp, fp, #24
 1c4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
 1c8:	ldr	r5, [r4]
 1cc:	cmp	r5, #0
 1d0:	beq	1dc <ht_resize+0xe0>
 1d4:	mov	r0, r5
 1d8:	bl	0 <free>
 1dc:	add	r0, sp, #8
 1e0:	vld1.64	{d16-d17}, [r0]
 1e4:	mov	r0, #0
 1e8:	vst1.32	{d16-d17}, [r4]
 1ec:	sub	sp, fp, #24
 1f0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}

000001f4 <str_set_insert>:
 1f4:	b	1f8 <ht_insert>

000001f8 <ht_insert>:
 1f8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
 1fc:	add	fp, sp, #28
 200:	sub	sp, sp, #36	; 0x24
 204:	cmp	r3, #2
 208:	str	r2, [sp, #20]
 20c:	beq	36c <ht_insert+0x174>
 210:	mov	sl, r3
 214:	cmp	r3, #1
 218:	beq	384 <ht_insert+0x18c>
 21c:	cmp	sl, #0
 220:	beq	39c <ht_insert+0x1a4>
 224:	mov	r5, r0
 228:	mov	r7, r1
 22c:	ldr	r0, [r0, #8]
 230:	mov	r1, #179	; 0xb3
 234:	ldr	r4, [r5, #12]
 238:	mul	r1, r4, r1
 23c:	cmp	r0, r1, lsr #8
 240:	bcc	25c <ht_insert+0x64>
 244:	lsl	r1, r0, #1
 248:	mov	r0, r5
 24c:	bl	fc <ht_resize>
 250:	cmp	r0, #0
 254:	bne	3bc <ht_insert+0x1c4>
 258:	ldr	r4, [r5, #12]
 25c:	ldr	r2, [sp, #20]
 260:	movw	r1, #15186	; 0x3b52
 264:	ldr	r9, [r5]
 268:	add	r0, sp, #24
 26c:	mov	r3, #0
 270:	mov	r8, #0
 274:	movt	r1, #12137	; 0x2f69
 278:	str	r0, [sp, #4]
 27c:	mov	r0, r7
 280:	str	r1, [sp]
 284:	bl	0 <cmetrohash64_1>
 288:	ldr	r2, [fp, #8]
 28c:	ldr	r1, [sp, #24]
 290:	sub	r6, r4, #1
 294:	orr	r2, r2, #1
 298:	and	r0, r6, r1
 29c:	cmp	r2, #3
 2a0:	bne	2d0 <ht_insert+0xd8>
 2a4:	ldr	r2, [r5, #8]
 2a8:	add	r2, r2, #1
 2ac:	str	r2, [r5, #8]
 2b0:	mov	r5, r9
 2b4:	add	r1, r1, #1
 2b8:	ldr	r0, [r5, r0, lsl #2]!
 2bc:	orr	r0, r0, #2
 2c0:	cmp	r0, #2
 2c4:	beq	334 <ht_insert+0x13c>
 2c8:	and	r0, r1, r6
 2cc:	b	2b0 <ht_insert+0xb8>
 2d0:	str	sl, [sp, #16]
 2d4:	add	sl, r1, #1
 2d8:	str	r5, [sp, #12]
 2dc:	b	2f0 <ht_insert+0xf8>
 2e0:	cmp	r8, #0
 2e4:	moveq	r8, r5
 2e8:	and	r0, sl, r6
 2ec:	add	sl, sl, #1
 2f0:	mov	r5, r9
 2f4:	ldr	r4, [r5, r0, lsl #2]!
 2f8:	cmp	r4, #2
 2fc:	beq	2e0 <ht_insert+0xe8>
 300:	cmp	r4, #0
 304:	beq	33c <ht_insert+0x144>
 308:	ldr	r2, [sp, #20]
 30c:	mov	r0, r7
 310:	mov	r1, r4
 314:	bl	0 <strncmp>
 318:	cmp	r0, #0
 31c:	bne	2e8 <ht_insert+0xf0>
 320:	ldr	r0, [fp, #8]
 324:	ldr	sl, [sp, #16]
 328:	cmp	r0, #0
 32c:	streq	sl, [r5]
 330:	b	360 <ht_insert+0x168>
 334:	mov	r4, #0
 338:	b	35c <ht_insert+0x164>
 33c:	ldr	r1, [sp, #12]
 340:	ldr	sl, [sp, #16]
 344:	cmp	r8, #0
 348:	mov	r4, #0
 34c:	movne	r5, r8
 350:	ldr	r0, [r1, #8]
 354:	add	r0, r0, #1
 358:	str	r0, [r1, #8]
 35c:	str	sl, [r5]
 360:	mov	r0, r4
 364:	sub	sp, fp, #28
 368:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
 36c:	movw	r0, #0
 370:	movw	r1, #0
 374:	movw	r3, #0
 378:	mov	r2, #115	; 0x73
 37c:	movt	r0, #0
 380:	b	3b0 <ht_insert+0x1b8>
 384:	movw	r0, #0
 388:	movw	r1, #0
 38c:	movw	r3, #0
 390:	mov	r2, #116	; 0x74
 394:	movt	r0, #0
 398:	b	3b0 <ht_insert+0x1b8>
 39c:	movw	r0, #0
 3a0:	movw	r1, #0
 3a4:	movw	r3, #0
 3a8:	mov	r2, #114	; 0x72
 3ac:	movt	r0, #0
 3b0:	movt	r1, #0
 3b4:	movt	r3, #0
 3b8:	bl	0 <__assert_fail>
 3bc:	movw	r0, #0
 3c0:	movw	r1, #0
 3c4:	movw	r2, #0
 3c8:	movt	r0, #0
 3cc:	movt	r1, #0
 3d0:	movt	r2, #0
 3d4:	ldr	r0, [r0]
 3d8:	bl	0 <fprintf>
 3dc:	mov	r0, #1
 3e0:	bl	0 <exit>

000003e4 <str_set_insert_item>:
 3e4:	push	{r4, r5, r6, sl, fp, lr}
 3e8:	add	fp, sp, #16
 3ec:	sub	sp, sp, #8
 3f0:	mov	r6, r0
 3f4:	mov	r0, r1
 3f8:	mov	r4, r2
 3fc:	mov	r5, r1
 400:	bl	0 <strlen>
 404:	mov	r2, r0
 408:	mov	r0, r6
 40c:	mov	r1, r5
 410:	mov	r3, r5
 414:	str	r4, [sp]
 418:	bl	1f8 <ht_insert>
 41c:	sub	sp, fp, #16
 420:	pop	{r4, r5, r6, sl, fp, pc}

00000424 <str_set_find>:
 424:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
 428:	add	fp, sp, #24
 42c:	sub	sp, sp, #16
 430:	ldr	r7, [r0]
 434:	cmp	r7, #0
 438:	beq	4ac <str_set_find+0x88>
 43c:	mov	r9, r1
 440:	movw	r1, #15186	; 0x3b52
 444:	ldr	r5, [r0, #12]
 448:	add	r0, sp, #8
 44c:	mov	r3, #0
 450:	mov	r8, r2
 454:	movt	r1, #12137	; 0x2f69
 458:	str	r0, [sp, #4]
 45c:	mov	r0, r9
 460:	str	r1, [sp]
 464:	bl	0 <cmetrohash64_1>
 468:	ldr	r4, [sp, #8]
 46c:	sub	r5, r5, #1
 470:	b	478 <str_set_find+0x54>
 474:	add	r4, r4, #1
 478:	and	r0, r4, r5
 47c:	ldr	r6, [r7, r0, lsl #2]
 480:	cmp	r6, #2
 484:	beq	474 <str_set_find+0x50>
 488:	cmp	r6, #0
 48c:	beq	4ac <str_set_find+0x88>
 490:	mov	r0, r9
 494:	mov	r1, r6
 498:	mov	r2, r8
 49c:	bl	0 <strncmp>
 4a0:	cmp	r0, #0
 4a4:	bne	474 <str_set_find+0x50>
 4a8:	b	4b0 <str_set_find+0x8c>
 4ac:	mov	r6, #0
 4b0:	mov	r0, r6
 4b4:	sub	sp, fp, #24
 4b8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}

000004bc <str_set_find_item>:
 4bc:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
 4c0:	add	fp, sp, #24
 4c4:	sub	sp, sp, #16
 4c8:	mov	r6, r0
 4cc:	mov	r0, r1
 4d0:	mov	r9, r1
 4d4:	bl	0 <strlen>
 4d8:	ldr	r7, [r6]
 4dc:	cmp	r7, #0
 4e0:	beq	554 <str_set_find_item+0x98>
 4e4:	movw	r1, #15186	; 0x3b52
 4e8:	ldr	r4, [r6, #12]
 4ec:	mov	r8, r0
 4f0:	add	r0, sp, #8
 4f4:	mov	r3, #0
 4f8:	movt	r1, #12137	; 0x2f69
 4fc:	str	r0, [sp, #4]
 500:	mov	r0, r9
 504:	mov	r2, r8
 508:	str	r1, [sp]
 50c:	bl	0 <cmetrohash64_1>
 510:	ldr	r5, [sp, #8]
 514:	sub	r4, r4, #1
 518:	b	520 <str_set_find_item+0x64>
 51c:	add	r5, r5, #1
 520:	and	r0, r5, r4
 524:	ldr	r6, [r7, r0, lsl #2]
 528:	cmp	r6, #2
 52c:	beq	51c <str_set_find_item+0x60>
 530:	cmp	r6, #0
 534:	beq	554 <str_set_find_item+0x98>
 538:	mov	r0, r9
 53c:	mov	r1, r6
 540:	mov	r2, r8
 544:	bl	0 <strncmp>
 548:	cmp	r0, #0
 54c:	bne	51c <str_set_find_item+0x60>
 550:	b	558 <str_set_find_item+0x9c>
 554:	mov	r6, #0
 558:	mov	r0, r6
 55c:	sub	sp, fp, #24
 560:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}

00000564 <str_set_remove>:
 564:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
 568:	add	fp, sp, #28
 56c:	sub	sp, sp, #28
 570:	ldr	r4, [r0]
 574:	cmp	r4, #0
 578:	beq	608 <str_set_remove+0xa4>
 57c:	mov	sl, r1
 580:	movw	r1, #15186	; 0x3b52
 584:	ldr	r6, [r0, #12]
 588:	str	r0, [sp, #12]
 58c:	add	r0, sp, #16
 590:	mov	r3, #0
 594:	mov	r9, r2
 598:	movt	r1, #12137	; 0x2f69
 59c:	str	r0, [sp, #4]
 5a0:	mov	r0, sl
 5a4:	str	r1, [sp]
 5a8:	bl	0 <cmetrohash64_1>
 5ac:	ldr	r5, [sp, #16]
 5b0:	sub	r6, r6, #1
 5b4:	b	5bc <str_set_remove+0x58>
 5b8:	add	r5, r5, #1
 5bc:	and	r8, r5, r6
 5c0:	ldr	r7, [r4, r8, lsl #2]
 5c4:	cmp	r7, #2
 5c8:	beq	5b8 <str_set_remove+0x54>
 5cc:	cmp	r7, #0
 5d0:	beq	608 <str_set_remove+0xa4>
 5d4:	mov	r0, sl
 5d8:	mov	r1, r7
 5dc:	mov	r2, r9
 5e0:	bl	0 <strncmp>
 5e4:	cmp	r0, #0
 5e8:	bne	5b8 <str_set_remove+0x54>
 5ec:	ldr	r1, [sp, #12]
 5f0:	mov	r0, #2
 5f4:	str	r0, [r4, r8, lsl #2]
 5f8:	ldr	r0, [r1, #8]
 5fc:	sub	r0, r0, #1
 600:	str	r0, [r1, #8]
 604:	b	60c <str_set_remove+0xa8>
 608:	mov	r7, #0
 60c:	mov	r0, r7
 610:	sub	sp, fp, #28
 614:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

00000618 <str_set_remove_item>:
 618:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
 61c:	add	fp, sp, #28
 620:	sub	sp, sp, #28
 624:	mov	r5, r0
 628:	mov	r0, r1
 62c:	mov	sl, r1
 630:	bl	0 <strlen>
 634:	ldr	r4, [r5]
 638:	cmp	r4, #0
 63c:	beq	6cc <str_set_remove_item+0xb4>
 640:	movw	r1, #15186	; 0x3b52
 644:	str	r5, [sp, #12]
 648:	ldr	r5, [r5, #12]
 64c:	mov	r9, r0
 650:	add	r0, sp, #16
 654:	mov	r3, #0
 658:	movt	r1, #12137	; 0x2f69
 65c:	str	r0, [sp, #4]
 660:	mov	r0, sl
 664:	mov	r2, r9
 668:	str	r1, [sp]
 66c:	bl	0 <cmetrohash64_1>
 670:	ldr	r6, [sp, #16]
 674:	sub	r5, r5, #1
 678:	b	680 <str_set_remove_item+0x68>
 67c:	add	r6, r6, #1
 680:	and	r8, r6, r5
 684:	ldr	r7, [r4, r8, lsl #2]
 688:	cmp	r7, #2
 68c:	beq	67c <str_set_remove_item+0x64>
 690:	cmp	r7, #0
 694:	beq	6cc <str_set_remove_item+0xb4>
 698:	mov	r0, sl
 69c:	mov	r1, r7
 6a0:	mov	r2, r9
 6a4:	bl	0 <strncmp>
 6a8:	cmp	r0, #0
 6ac:	bne	67c <str_set_remove_item+0x64>
 6b0:	ldr	r1, [sp, #12]
 6b4:	mov	r0, #2
 6b8:	str	r0, [r4, r8, lsl #2]
 6bc:	ldr	r0, [r1, #8]
 6c0:	sub	r0, r0, #1
 6c4:	str	r0, [r1, #8]
 6c8:	b	6d0 <str_set_remove_item+0xb8>
 6cc:	mov	r7, #0
 6d0:	mov	r0, r7
 6d4:	sub	sp, fp, #28
 6d8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

000006dc <str_set_visit>:
 6dc:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
 6e0:	add	fp, sp, #24
 6e4:	mov	r6, r0
 6e8:	ldr	r0, [r0, #12]
 6ec:	cmp	r0, #0
 6f0:	beq	734 <str_set_visit+0x58>
 6f4:	ldr	r7, [r6]
 6f8:	mov	r8, r2
 6fc:	mov	r5, r1
 700:	mov	r4, #0
 704:	b	714 <str_set_visit+0x38>
 708:	add	r4, r4, #1
 70c:	cmp	r4, r0
 710:	bcs	734 <str_set_visit+0x58>
 714:	ldr	r1, [r7, r4, lsl #2]
 718:	orr	r2, r1, #2
 71c:	cmp	r2, #2
 720:	beq	708 <str_set_visit+0x2c>
 724:	mov	r0, r8
 728:	blx	r5
 72c:	ldr	r0, [r6, #12]
 730:	b	708 <str_set_visit+0x2c>
 734:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
