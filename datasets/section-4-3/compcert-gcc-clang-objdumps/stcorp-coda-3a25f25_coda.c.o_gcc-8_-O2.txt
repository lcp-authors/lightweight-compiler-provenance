
../compcert-repos/stcorp-coda-3a25f25/CMakeFiles/coda_static.dir/libcoda/coda.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <coda_get_libcoda_version>:
   0:	ldr	r2, [pc, #8]	; 10 <coda_get_libcoda_version+0x10>
   4:	mrc	15, 0, r3, cr13, cr0, {3}
   8:	ldr	r0, [r2, r3]
   c:	bx	lr
  10:	.word	0x00000000

00000014 <coda_set_option_bypass_special_types>:
  14:	cmp	r0, #1
  18:	mov	r2, r0
  1c:	bhi	34 <coda_set_option_bypass_special_types+0x20>
  20:	ldr	r1, [pc, #52]	; 5c <coda_set_option_bypass_special_types+0x48>
  24:	mrc	15, 0, r3, cr13, cr0, {3}
  28:	mov	r0, #0
  2c:	str	r2, [r3, r1]
  30:	bx	lr
  34:	mvn	r0, #99	; 0x63
  38:	movw	r1, #0
  3c:	movt	r1, #0
  40:	str	r4, [sp, #-8]!
  44:	str	lr, [sp, #4]
  48:	bl	0 <coda_set_error>
  4c:	ldr	r4, [sp]
  50:	add	sp, sp, #4
  54:	mvn	r0, #0
  58:	pop	{pc}		; (ldr pc, [sp], #4)
  5c:	.word	0x00000000

00000060 <coda_get_option_bypass_special_types>:
  60:	ldr	r2, [pc, #8]	; 70 <coda_get_option_bypass_special_types+0x10>
  64:	mrc	15, 0, r3, cr13, cr0, {3}
  68:	ldr	r0, [r2, r3]
  6c:	bx	lr
  70:	.word	0x00000000

00000074 <coda_set_option_perform_boundary_checks>:
  74:	cmp	r0, #1
  78:	mov	r2, r0
  7c:	bhi	98 <coda_set_option_perform_boundary_checks+0x24>
  80:	ldr	r1, [pc, #56]	; c0 <coda_set_option_perform_boundary_checks+0x4c>
  84:	mrc	15, 0, r3, cr13, cr0, {3}
  88:	mov	r0, #0
  8c:	add	r3, r3, r1
  90:	str	r2, [r3, #4]
  94:	bx	lr
  98:	mvn	r0, #99	; 0x63
  9c:	movw	r1, #0
  a0:	movt	r1, #0
  a4:	str	r4, [sp, #-8]!
  a8:	str	lr, [sp, #4]
  ac:	bl	0 <coda_set_error>
  b0:	ldr	r4, [sp]
  b4:	add	sp, sp, #4
  b8:	mvn	r0, #0
  bc:	pop	{pc}		; (ldr pc, [sp], #4)
  c0:	.word	0x00000000

000000c4 <coda_get_option_perform_boundary_checks>:
  c4:	ldr	r2, [pc, #12]	; d8 <coda_get_option_perform_boundary_checks+0x14>
  c8:	mrc	15, 0, r3, cr13, cr0, {3}
  cc:	add	r3, r3, r2
  d0:	ldr	r0, [r3, #4]
  d4:	bx	lr
  d8:	.word	0x00000000

000000dc <coda_set_option_perform_conversions>:
  dc:	cmp	r0, #1
  e0:	mov	r2, r0
  e4:	bhi	100 <coda_set_option_perform_conversions+0x24>
  e8:	ldr	r1, [pc, #56]	; 128 <coda_set_option_perform_conversions+0x4c>
  ec:	mrc	15, 0, r3, cr13, cr0, {3}
  f0:	mov	r0, #0
  f4:	add	r3, r3, r1
  f8:	str	r2, [r3, #8]
  fc:	bx	lr
 100:	mvn	r0, #99	; 0x63
 104:	movw	r1, #0
 108:	movt	r1, #0
 10c:	str	r4, [sp, #-8]!
 110:	str	lr, [sp, #4]
 114:	bl	0 <coda_set_error>
 118:	ldr	r4, [sp]
 11c:	add	sp, sp, #4
 120:	mvn	r0, #0
 124:	pop	{pc}		; (ldr pc, [sp], #4)
 128:	.word	0x00000000

0000012c <coda_get_option_perform_conversions>:
 12c:	ldr	r2, [pc, #12]	; 140 <coda_get_option_perform_conversions+0x14>
 130:	mrc	15, 0, r3, cr13, cr0, {3}
 134:	add	r3, r3, r2
 138:	ldr	r0, [r3, #8]
 13c:	bx	lr
 140:	.word	0x00000000

00000144 <coda_set_option_use_fast_size_expressions>:
 144:	cmp	r0, #1
 148:	mov	r2, r0
 14c:	bhi	168 <coda_set_option_use_fast_size_expressions+0x24>
 150:	ldr	r1, [pc, #56]	; 190 <coda_set_option_use_fast_size_expressions+0x4c>
 154:	mrc	15, 0, r3, cr13, cr0, {3}
 158:	mov	r0, #0
 15c:	add	r3, r3, r1
 160:	str	r2, [r3, #12]
 164:	bx	lr
 168:	mvn	r0, #99	; 0x63
 16c:	movw	r1, #0
 170:	movt	r1, #0
 174:	str	r4, [sp, #-8]!
 178:	str	lr, [sp, #4]
 17c:	bl	0 <coda_set_error>
 180:	ldr	r4, [sp]
 184:	add	sp, sp, #4
 188:	mvn	r0, #0
 18c:	pop	{pc}		; (ldr pc, [sp], #4)
 190:	.word	0x00000000

00000194 <coda_get_option_use_fast_size_expressions>:
 194:	ldr	r2, [pc, #12]	; 1a8 <coda_get_option_use_fast_size_expressions+0x14>
 198:	mrc	15, 0, r3, cr13, cr0, {3}
 19c:	add	r3, r3, r2
 1a0:	ldr	r0, [r3, #12]
 1a4:	bx	lr
 1a8:	.word	0x00000000

000001ac <coda_set_option_use_mmap>:
 1ac:	cmp	r0, #1
 1b0:	mov	r2, r0
 1b4:	bhi	1d0 <coda_set_option_use_mmap+0x24>
 1b8:	ldr	r1, [pc, #56]	; 1f8 <coda_set_option_use_mmap+0x4c>
 1bc:	mrc	15, 0, r3, cr13, cr0, {3}
 1c0:	mov	r0, #0
 1c4:	add	r3, r3, r1
 1c8:	str	r2, [r3, #16]
 1cc:	bx	lr
 1d0:	mvn	r0, #99	; 0x63
 1d4:	movw	r1, #0
 1d8:	movt	r1, #0
 1dc:	str	r4, [sp, #-8]!
 1e0:	str	lr, [sp, #4]
 1e4:	bl	0 <coda_set_error>
 1e8:	ldr	r4, [sp]
 1ec:	add	sp, sp, #4
 1f0:	mvn	r0, #0
 1f4:	pop	{pc}		; (ldr pc, [sp], #4)
 1f8:	.word	0x00000000

000001fc <coda_get_option_use_mmap>:
 1fc:	ldr	r2, [pc, #12]	; 210 <coda_get_option_use_mmap+0x14>
 200:	mrc	15, 0, r3, cr13, cr0, {3}
 204:	add	r3, r3, r2
 208:	ldr	r0, [r3, #16]
 20c:	bx	lr
 210:	.word	0x00000000

00000214 <coda_set_definition_path>:
 214:	strd	r4, [sp, #-24]!	; 0xffffffe8
 218:	mrc	15, 0, r5, cr13, cr0, {3}
 21c:	ldr	r4, [pc, #132]	; 2a8 <coda_set_definition_path+0x94>
 220:	strd	r6, [sp, #8]
 224:	mov	r6, r0
 228:	str	r8, [sp, #16]
 22c:	str	lr, [sp, #20]
 230:	add	r7, r4, r5
 234:	ldr	r0, [r7, #4]
 238:	cmp	r0, #0
 23c:	beq	24c <coda_set_definition_path+0x38>
 240:	bl	0 <free>
 244:	mov	r3, #0
 248:	str	r3, [r7, #4]
 24c:	cmp	r6, #0
 250:	beq	26c <coda_set_definition_path+0x58>
 254:	mov	r0, r6
 258:	add	r4, r4, r5
 25c:	bl	0 <strdup>
 260:	cmp	r0, #0
 264:	str	r0, [r4, #4]
 268:	beq	284 <coda_set_definition_path+0x70>
 26c:	mov	r0, #0
 270:	ldrd	r4, [sp]
 274:	ldrd	r6, [sp, #8]
 278:	ldr	r8, [sp, #16]
 27c:	add	sp, sp, #20
 280:	pop	{pc}		; (ldr pc, [sp], #4)
 284:	mvn	r0, #0
 288:	movw	r2, #0
 28c:	movt	r2, #0
 290:	movw	r1, #0
 294:	movt	r1, #0
 298:	movw	r3, #385	; 0x181
 29c:	bl	0 <coda_set_error>
 2a0:	mvn	r0, #0
 2a4:	b	270 <coda_set_definition_path+0x5c>
 2a8:	.word	0x00000000

000002ac <coda_set_definition_path_conditional>:
 2ac:	strd	r4, [sp, #-16]!
 2b0:	mov	r5, r0
 2b4:	movw	r0, #0
 2b8:	movt	r0, #0
 2bc:	str	r6, [sp, #8]
 2c0:	mov	r4, r1
 2c4:	str	lr, [sp, #12]
 2c8:	sub	sp, sp, #8
 2cc:	mov	r6, r2
 2d0:	bl	0 <getenv>
 2d4:	cmp	r0, #0
 2d8:	beq	2f8 <coda_set_definition_path_conditional+0x4c>
 2dc:	mov	r4, #0
 2e0:	mov	r0, r4
 2e4:	add	sp, sp, #8
 2e8:	ldrd	r4, [sp]
 2ec:	ldr	r6, [sp, #8]
 2f0:	add	sp, sp, #12
 2f4:	pop	{pc}		; (ldr pc, [sp], #4)
 2f8:	cmp	r4, #0
 2fc:	beq	360 <coda_set_definition_path_conditional+0xb4>
 300:	mov	r1, r5
 304:	mov	r0, r4
 308:	mov	r2, sp
 30c:	bl	0 <coda_path_find_file>
 310:	cmp	r0, #0
 314:	bne	374 <coda_set_definition_path_conditional+0xc8>
 318:	ldr	r0, [sp]
 31c:	cmp	r0, #0
 320:	beq	2dc <coda_set_definition_path_conditional+0x30>
 324:	mov	r2, r6
 328:	add	r3, sp, #4
 32c:	mov	r1, #1
 330:	bl	0 <coda_path_from_path>
 334:	cmp	r0, #0
 338:	ldr	r0, [sp]
 33c:	bne	37c <coda_set_definition_path_conditional+0xd0>
 340:	bl	0 <free>
 344:	ldr	r0, [sp, #4]
 348:	bl	214 <coda_set_definition_path>
 34c:	subs	r4, r0, #0
 350:	ldr	r0, [sp, #4]
 354:	bne	37c <coda_set_definition_path_conditional+0xd0>
 358:	bl	0 <free>
 35c:	b	2e0 <coda_set_definition_path_conditional+0x34>
 360:	mov	r0, r5
 364:	mov	r1, sp
 368:	bl	0 <coda_path_for_program>
 36c:	cmp	r0, #0
 370:	beq	318 <coda_set_definition_path_conditional+0x6c>
 374:	mvn	r4, #0
 378:	b	2e0 <coda_set_definition_path_conditional+0x34>
 37c:	bl	0 <free>
 380:	b	374 <coda_set_definition_path_conditional+0xc8>

00000384 <coda_init>:
 384:	strd	r4, [sp, #-16]!
 388:	mrc	15, 0, r5, cr13, cr0, {3}
 38c:	ldr	r4, [pc, #240]	; 484 <coda_init+0x100>
 390:	str	r6, [sp, #8]
 394:	str	lr, [sp, #12]
 398:	add	r6, r4, r5
 39c:	ldr	r3, [r6, #8]
 3a0:	cmp	r3, #0
 3a4:	beq	3c8 <coda_init+0x44>
 3a8:	add	r4, r4, r5
 3ac:	add	r3, r3, #1
 3b0:	mov	r0, #0
 3b4:	str	r3, [r4, #8]
 3b8:	ldrd	r4, [sp]
 3bc:	ldr	r6, [sp, #8]
 3c0:	add	sp, sp, #12
 3c4:	pop	{pc}		; (ldr pc, [sp], #4)
 3c8:	bl	0 <coda_leap_second_table_init>
 3cc:	cmp	r0, #0
 3d0:	bne	47c <coda_init+0xf8>
 3d4:	bl	0 <coda_data_dictionary_init>
 3d8:	cmp	r0, #0
 3dc:	bne	478 <coda_init+0xf4>
 3e0:	ldr	r0, [r6, #4]
 3e4:	cmp	r0, #0
 3e8:	beq	418 <coda_init+0x94>
 3ec:	bl	0 <coda_read_definitions>
 3f0:	cmp	r0, #0
 3f4:	bne	474 <coda_init+0xf0>
 3f8:	ldr	r2, [pc, #136]	; 488 <coda_init+0x104>
 3fc:	mov	r1, #1
 400:	add	r3, r4, r5
 404:	ldr	r3, [r3, #8]
 408:	add	r2, r2, r5
 40c:	str	r1, [r2, #4]
 410:	str	r1, [r2, #8]
 414:	b	3a8 <coda_init+0x24>
 418:	movw	r0, #0
 41c:	movt	r0, #0
 420:	bl	0 <getenv>
 424:	cmp	r0, #0
 428:	beq	3f8 <coda_init+0x74>
 42c:	movw	r0, #0
 430:	movt	r0, #0
 434:	bl	0 <getenv>
 438:	bl	0 <strdup>
 43c:	cmp	r0, #0
 440:	str	r0, [r6, #4]
 444:	bne	3ec <coda_init+0x68>
 448:	bl	0 <coda_data_dictionary_done>
 44c:	bl	0 <coda_leap_second_table_done>
 450:	mvn	r0, #0
 454:	movw	r2, #0
 458:	movt	r2, #0
 45c:	movw	r1, #0
 460:	movt	r1, #0
 464:	mov	r3, #512	; 0x200
 468:	bl	0 <coda_set_error>
 46c:	mvn	r0, #0
 470:	b	3b8 <coda_init+0x34>
 474:	bl	0 <coda_data_dictionary_done>
 478:	bl	0 <coda_leap_second_table_done>
 47c:	mvn	r0, #0
 480:	b	3b8 <coda_init+0x34>
	...

0000048c <coda_done>:
 48c:	ldr	r3, [pc, #124]	; 510 <coda_done+0x84>
 490:	strd	r4, [sp, #-16]!
 494:	mrc	15, 0, r4, cr13, cr0, {3}
 498:	add	r4, r4, r3
 49c:	ldr	r3, [r4, #8]
 4a0:	str	r6, [sp, #8]
 4a4:	str	lr, [sp, #12]
 4a8:	cmp	r3, #0
 4ac:	ble	4c0 <coda_done+0x34>
 4b0:	sub	r5, r3, #1
 4b4:	cmp	r5, #0
 4b8:	str	r5, [r4, #8]
 4bc:	beq	4d0 <coda_done+0x44>
 4c0:	ldrd	r4, [sp]
 4c4:	ldr	r6, [sp, #8]
 4c8:	add	sp, sp, #12
 4cc:	pop	{pc}		; (ldr pc, [sp], #4)
 4d0:	bl	0 <coda_sp3_done>
 4d4:	bl	0 <coda_rinex_done>
 4d8:	bl	0 <coda_grib_done>
 4dc:	bl	0 <coda_data_dictionary_done>
 4e0:	ldr	r0, [r4, #4]
 4e4:	cmp	r0, #0
 4e8:	beq	4f4 <coda_done+0x68>
 4ec:	bl	0 <free>
 4f0:	str	r5, [r4, #4]
 4f4:	bl	0 <coda_mem_done>
 4f8:	bl	0 <coda_type_done>
 4fc:	ldrd	r4, [sp]
 500:	ldr	r6, [sp, #8]
 504:	ldr	lr, [sp, #12]
 508:	add	sp, sp, #16
 50c:	b	0 <coda_leap_second_table_done>
 510:	.word	0x00000000

00000514 <coda_free>:
 514:	b	0 <free>
