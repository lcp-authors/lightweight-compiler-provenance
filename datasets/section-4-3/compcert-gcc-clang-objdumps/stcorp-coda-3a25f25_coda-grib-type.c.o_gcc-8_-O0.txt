
../compcert-repos/stcorp-coda-3a25f25/CMakeFiles/coda_static.dir/libcoda/coda-grib-type.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <fpow>:
   0:	push	{fp}		; (str fp, [sp, #-4]!)
   4:	add	fp, sp, #0
   8:	sub	sp, sp, #20
   c:	str	r0, [fp, #-16]
  10:	str	r1, [fp, #-20]	; 0xffffffec
  14:	mov	r2, #0
  18:	mov	r3, #0
  1c:	movt	r3, #16368	; 0x3ff0
  20:	strd	r2, [fp, #-12]
  24:	ldr	r3, [fp, #-20]	; 0xffffffec
  28:	cmp	r3, #0
  2c:	bge	94 <fpow+0x94>
  30:	ldr	r3, [fp, #-20]	; 0xffffffec
  34:	rsb	r3, r3, #0
  38:	str	r3, [fp, #-20]	; 0xffffffec
  3c:	b	58 <fpow+0x58>
  40:	ldr	r3, [fp, #-16]
  44:	vmov	s15, r3
  48:	vcvt.f64.s32	d7, s15
  4c:	vldr	d6, [fp, #-12]
  50:	vmul.f64	d7, d6, d7
  54:	vstr	d7, [fp, #-12]
  58:	ldr	r3, [fp, #-20]	; 0xffffffec
  5c:	sub	r2, r3, #1
  60:	str	r2, [fp, #-20]	; 0xffffffec
  64:	cmp	r3, #0
  68:	bne	40 <fpow+0x40>
  6c:	vldr	d5, [pc, #76]	; c0 <fpow+0xc0>
  70:	vldr	d6, [fp, #-12]
  74:	vdiv.f64	d7, d5, d6
  78:	b	ac <fpow+0xac>
  7c:	ldr	r3, [fp, #-16]
  80:	vmov	s15, r3
  84:	vcvt.f64.s32	d7, s15
  88:	vldr	d6, [fp, #-12]
  8c:	vmul.f64	d7, d6, d7
  90:	vstr	d7, [fp, #-12]
  94:	ldr	r3, [fp, #-20]	; 0xffffffec
  98:	sub	r2, r3, #1
  9c:	str	r2, [fp, #-20]	; 0xffffffec
  a0:	cmp	r3, #0
  a4:	bne	7c <fpow+0x7c>
  a8:	vldr	d7, [fp, #-12]
  ac:	vmov.f64	d0, d7
  b0:	add	sp, fp, #0
  b4:	pop	{fp}		; (ldr fp, [sp], #4)
  b8:	bx	lr
  bc:	nop	{0}
  c0:	.word	0x00000000
  c4:	.word	0x3ff00000

000000c8 <coda_grib_type_delete>:
  c8:	str	fp, [sp, #-8]!
  cc:	str	lr, [sp, #4]
  d0:	add	fp, sp, #4
  d4:	sub	sp, sp, #8
  d8:	str	r0, [fp, #-8]
  dc:	ldr	r3, [fp, #-8]
  e0:	cmp	r3, #0
  e4:	bne	108 <coda_grib_type_delete+0x40>
  e8:	movw	r3, #0
  ec:	movt	r3, #0
  f0:	mov	r2, #61	; 0x3d
  f4:	movw	r1, #0
  f8:	movt	r1, #0
  fc:	movw	r0, #0
 100:	movt	r0, #0
 104:	bl	0 <__assert_fail>
 108:	ldr	r3, [fp, #-8]
 10c:	ldr	r3, [r3]
 110:	cmp	r3, #105	; 0x69
 114:	beq	138 <coda_grib_type_delete+0x70>
 118:	movw	r3, #0
 11c:	movt	r3, #0
 120:	mov	r2, #62	; 0x3e
 124:	movw	r1, #0
 128:	movt	r1, #0
 12c:	movw	r0, #0
 130:	movt	r0, #0
 134:	bl	0 <__assert_fail>
 138:	ldr	r3, [fp, #-8]
 13c:	ldr	r3, [r3, #4]
 140:	ldr	r3, [r3, #8]
 144:	cmp	r3, #1
 148:	bne	1ac <coda_grib_type_delete+0xe4>
 14c:	ldr	r3, [fp, #-8]
 150:	ldr	r3, [r3, #12]
 154:	cmp	r3, #0
 158:	beq	16c <coda_grib_type_delete+0xa4>
 15c:	ldr	r3, [fp, #-8]
 160:	ldr	r3, [r3, #12]
 164:	mov	r0, r3
 168:	bl	0 <coda_dynamic_type_delete>
 16c:	ldr	r3, [fp, #-8]
 170:	ldr	r3, [r3, #56]	; 0x38
 174:	cmp	r3, #0
 178:	beq	18c <coda_grib_type_delete+0xc4>
 17c:	ldr	r3, [fp, #-8]
 180:	ldr	r3, [r3, #56]	; 0x38
 184:	mov	r0, r3
 188:	bl	0 <free>
 18c:	ldr	r3, [fp, #-8]
 190:	ldr	r3, [r3, #60]	; 0x3c
 194:	cmp	r3, #0
 198:	beq	1ac <coda_grib_type_delete+0xe4>
 19c:	ldr	r3, [fp, #-8]
 1a0:	ldr	r3, [r3, #60]	; 0x3c
 1a4:	mov	r0, r3
 1a8:	bl	0 <free>
 1ac:	ldr	r3, [fp, #-8]
 1b0:	ldr	r3, [r3, #4]
 1b4:	cmp	r3, #0
 1b8:	beq	1cc <coda_grib_type_delete+0x104>
 1bc:	ldr	r3, [fp, #-8]
 1c0:	ldr	r3, [r3, #4]
 1c4:	mov	r0, r3
 1c8:	bl	0 <coda_type_release>
 1cc:	ldr	r0, [fp, #-8]
 1d0:	bl	0 <free>
 1d4:	nop	{0}
 1d8:	sub	sp, fp, #4
 1dc:	ldr	fp, [sp]
 1e0:	add	sp, sp, #4
 1e4:	pop	{pc}		; (ldr pc, [sp], #4)

000001e8 <coda_grib_value_array_new>:
 1e8:	str	fp, [sp, #-8]!
 1ec:	str	lr, [sp, #4]
 1f0:	add	fp, sp, #4
 1f4:	sub	sp, sp, #32
 1f8:	str	r0, [fp, #-16]
 1fc:	str	r1, [fp, #-20]	; 0xffffffec
 200:	strd	r2, [fp, #-28]	; 0xffffffe4
 204:	ldr	r3, [fp, #-16]
 208:	cmp	r3, #0
 20c:	bne	234 <coda_grib_value_array_new+0x4c>
 210:	mov	r3, #92	; 0x5c
 214:	movw	r2, #0
 218:	movt	r2, #0
 21c:	movw	r1, #0
 220:	movt	r1, #0
 224:	mvn	r0, #99	; 0x63
 228:	bl	0 <coda_set_error>
 22c:	mov	r3, #0
 230:	b	438 <coda_grib_value_array_new+0x250>
 234:	ldr	r3, [fp, #-16]
 238:	ldr	r3, [r3, #40]	; 0x28
 23c:	ldr	r3, [r3, #8]
 240:	cmp	r3, #3
 244:	beq	280 <coda_grib_value_array_new+0x98>
 248:	ldr	r3, [fp, #-16]
 24c:	ldr	r3, [r3, #40]	; 0x28
 250:	ldr	r3, [r3, #8]
 254:	mov	r0, r3
 258:	bl	0 <coda_type_get_class_name>
 25c:	mov	r3, r0
 260:	mov	r2, r3
 264:	movw	r1, #0
 268:	movt	r1, #0
 26c:	movw	r0, #65136	; 0xfe70
 270:	movt	r0, #65535	; 0xffff
 274:	bl	0 <coda_set_error>
 278:	mov	r3, #0
 27c:	b	438 <coda_grib_value_array_new+0x250>
 280:	mov	r0, #64	; 0x40
 284:	bl	0 <malloc>
 288:	mov	r3, r0
 28c:	str	r3, [fp, #-8]
 290:	ldr	r3, [fp, #-8]
 294:	cmp	r3, #0
 298:	bne	2c8 <coda_grib_value_array_new+0xe0>
 29c:	mov	r3, #106	; 0x6a
 2a0:	str	r3, [sp]
 2a4:	movw	r3, #0
 2a8:	movt	r3, #0
 2ac:	mov	r2, #64	; 0x40
 2b0:	movw	r1, #0
 2b4:	movt	r1, #0
 2b8:	mvn	r0, #0
 2bc:	bl	0 <coda_set_error>
 2c0:	mov	r3, #0
 2c4:	b	438 <coda_grib_value_array_new+0x250>
 2c8:	ldr	r3, [fp, #-8]
 2cc:	mov	r2, #105	; 0x69
 2d0:	str	r2, [r3]
 2d4:	ldr	r3, [fp, #-8]
 2d8:	ldr	r2, [fp, #-16]
 2dc:	str	r2, [r3, #4]
 2e0:	ldr	r3, [fp, #-16]
 2e4:	ldr	r3, [r3, #4]
 2e8:	add	r2, r3, #1
 2ec:	ldr	r3, [fp, #-16]
 2f0:	str	r2, [r3, #4]
 2f4:	ldr	r3, [fp, #-8]
 2f8:	ldr	r2, [fp, #-20]	; 0xffffffec
 2fc:	str	r2, [r3, #8]
 300:	ldr	r3, [fp, #-8]
 304:	mov	r2, #0
 308:	str	r2, [r3, #12]
 30c:	ldrd	r0, [fp, #-28]	; 0xffffffe4
 310:	mov	r2, #0
 314:	mov	r3, #0
 318:	lsl	r3, r1, #3
 31c:	orr	r3, r3, r0, lsr #29
 320:	lsl	r2, r0, #3
 324:	ldr	r1, [fp, #-8]
 328:	strd	r2, [r1, #16]
 32c:	ldr	r3, [fp, #-8]
 330:	mov	r2, #0
 334:	str	r2, [r3, #24]
 338:	ldr	r3, [fp, #-8]
 33c:	mov	r2, #32
 340:	str	r2, [r3, #28]
 344:	ldr	r3, [fp, #-8]
 348:	mov	r2, #0
 34c:	strh	r2, [r3, #32]
 350:	ldr	r3, [fp, #-8]
 354:	mov	r2, #0
 358:	strh	r2, [r3, #34]	; 0x22
 35c:	ldr	r3, [fp, #-8]
 360:	mov	r2, #0
 364:	str	r2, [r3, #36]	; 0x24
 368:	ldr	r1, [fp, #-8]
 36c:	mov	r2, #0
 370:	mov	r3, #0
 374:	strd	r2, [r1, #40]	; 0x28
 378:	ldr	r1, [fp, #-8]
 37c:	mov	r2, #0
 380:	mov	r3, #0
 384:	strd	r2, [r1, #48]	; 0x30
 388:	ldr	r3, [fp, #-8]
 38c:	mov	r2, #0
 390:	str	r2, [r3, #56]	; 0x38
 394:	ldr	r3, [fp, #-8]
 398:	mov	r2, #0
 39c:	str	r2, [r3, #60]	; 0x3c
 3a0:	mov	r0, #8
 3a4:	bl	0 <malloc>
 3a8:	mov	r3, r0
 3ac:	mov	r2, r3
 3b0:	ldr	r3, [fp, #-8]
 3b4:	str	r2, [r3, #12]
 3b8:	ldr	r3, [fp, #-8]
 3bc:	ldr	r3, [r3, #12]
 3c0:	cmp	r3, #0
 3c4:	bne	3fc <coda_grib_value_array_new+0x214>
 3c8:	ldr	r0, [fp, #-8]
 3cc:	bl	c8 <coda_grib_type_delete>
 3d0:	mov	r3, #130	; 0x82
 3d4:	str	r3, [sp]
 3d8:	movw	r3, #0
 3dc:	movt	r3, #0
 3e0:	mov	r2, #8
 3e4:	movw	r1, #0
 3e8:	movt	r1, #0
 3ec:	mvn	r0, #0
 3f0:	bl	0 <coda_set_error>
 3f4:	mov	r3, #0
 3f8:	b	438 <coda_grib_value_array_new+0x250>
 3fc:	ldr	r3, [fp, #-8]
 400:	ldr	r3, [r3, #12]
 404:	mov	r2, #105	; 0x69
 408:	str	r2, [r3]
 40c:	ldr	r3, [fp, #-8]
 410:	ldr	r3, [r3, #12]
 414:	ldr	r2, [fp, #-16]
 418:	ldr	r2, [r2, #40]	; 0x28
 41c:	str	r2, [r3, #4]
 420:	ldr	r3, [fp, #-16]
 424:	ldr	r3, [r3, #40]	; 0x28
 428:	ldr	r2, [r3, #4]
 42c:	add	r2, r2, #1
 430:	str	r2, [r3, #4]
 434:	ldr	r3, [fp, #-8]
 438:	mov	r0, r3
 43c:	sub	sp, fp, #4
 440:	ldr	fp, [sp]
 444:	add	sp, sp, #4
 448:	pop	{pc}		; (ldr pc, [sp], #4)

0000044c <coda_grib_value_array_simple_packing_new>:
 44c:	str	fp, [sp, #-8]!
 450:	str	lr, [sp, #4]
 454:	vpush	{d8}
 458:	add	fp, sp, #12
 45c:	sub	sp, sp, #48	; 0x30
 460:	str	r0, [fp, #-32]	; 0xffffffe0
 464:	str	r1, [fp, #-36]	; 0xffffffdc
 468:	strd	r2, [fp, #-44]	; 0xffffffd4
 46c:	vstr	s0, [fp, #-48]	; 0xffffffd0
 470:	ldrd	r2, [fp, #-44]	; 0xffffffd4
 474:	ldr	r1, [fp, #-36]	; 0xffffffdc
 478:	ldr	r0, [fp, #-32]	; 0xffffffe0
 47c:	bl	1e8 <coda_grib_value_array_new>
 480:	str	r0, [fp, #-20]	; 0xffffffec
 484:	ldr	r3, [fp, #-20]	; 0xffffffec
 488:	cmp	r3, #0
 48c:	bne	498 <coda_grib_value_array_simple_packing_new+0x4c>
 490:	mov	r3, #0
 494:	b	7d8 <coda_grib_value_array_simple_packing_new+0x38c>
 498:	ldr	r3, [fp, #-20]	; 0xffffffec
 49c:	mov	r2, #1
 4a0:	str	r2, [r3, #24]
 4a4:	ldr	r3, [fp, #-20]	; 0xffffffec
 4a8:	ldr	r2, [fp, #4]
 4ac:	str	r2, [r3, #28]
 4b0:	ldr	r3, [fp, #-20]	; 0xffffffec
 4b4:	ldrh	r2, [fp, #8]
 4b8:	strh	r2, [r3, #32]
 4bc:	ldr	r3, [fp, #-20]	; 0xffffffec
 4c0:	ldrh	r2, [fp, #12]
 4c4:	strh	r2, [r3, #34]	; 0x22
 4c8:	ldr	r3, [fp, #-20]	; 0xffffffec
 4cc:	ldr	r2, [fp, #-48]	; 0xffffffd0
 4d0:	str	r2, [r3, #36]	; 0x24
 4d4:	ldrsh	r3, [fp, #12]
 4d8:	mov	r1, r3
 4dc:	mov	r0, #2
 4e0:	bl	0 <fpow>
 4e4:	vmov.f64	d8, d0
 4e8:	ldrsh	r3, [fp, #8]
 4ec:	rsb	r3, r3, #0
 4f0:	mov	r1, r3
 4f4:	mov	r0, #10
 4f8:	bl	0 <fpow>
 4fc:	vmov.f64	d7, d0
 500:	vmul.f64	d7, d8, d7
 504:	ldr	r3, [fp, #-20]	; 0xffffffec
 508:	vstr	d7, [r3, #40]	; 0x28
 50c:	vldr	s15, [fp, #-48]	; 0xffffffd0
 510:	vcvt.f64.f32	d8, s15
 514:	ldrsh	r3, [fp, #8]
 518:	rsb	r3, r3, #0
 51c:	mov	r1, r3
 520:	mov	r0, #10
 524:	bl	0 <fpow>
 528:	vmov.f64	d7, d0
 52c:	vmul.f64	d7, d8, d7
 530:	ldr	r3, [fp, #-20]	; 0xffffffec
 534:	vstr	d7, [r3, #48]	; 0x30
 538:	ldr	r3, [fp, #-20]	; 0xffffffec
 53c:	mov	r2, #0
 540:	str	r2, [r3, #56]	; 0x38
 544:	ldr	r3, [fp, #-20]	; 0xffffffec
 548:	mov	r2, #0
 54c:	str	r2, [r3, #60]	; 0x3c
 550:	ldr	r3, [fp, #16]
 554:	cmp	r3, #0
 558:	beq	7d4 <coda_grib_value_array_simple_packing_new+0x388>
 55c:	ldr	r3, [fp, #-36]	; 0xffffffdc
 560:	asr	r3, r3, #3
 564:	ldr	r2, [fp, #-36]	; 0xffffffdc
 568:	uxtb	r2, r2
 56c:	and	r2, r2, #7
 570:	cmp	r2, #0
 574:	movne	r2, #1
 578:	moveq	r2, #0
 57c:	uxtb	r2, r2
 580:	add	r3, r3, r2
 584:	str	r3, [fp, #-24]	; 0xffffffe8
 588:	ldr	r3, [fp, #-24]	; 0xffffffe8
 58c:	mov	r0, r3
 590:	bl	0 <malloc>
 594:	mov	r3, r0
 598:	mov	r2, r3
 59c:	ldr	r3, [fp, #-20]	; 0xffffffec
 5a0:	str	r2, [r3, #56]	; 0x38
 5a4:	ldr	r3, [fp, #-20]	; 0xffffffec
 5a8:	ldr	r3, [r3, #56]	; 0x38
 5ac:	cmp	r3, #0
 5b0:	bne	5e8 <coda_grib_value_array_simple_packing_new+0x19c>
 5b4:	ldr	r0, [fp, #-20]	; 0xffffffec
 5b8:	bl	c8 <coda_grib_type_delete>
 5bc:	mov	r3, #173	; 0xad
 5c0:	str	r3, [sp]
 5c4:	movw	r3, #0
 5c8:	movt	r3, #0
 5cc:	ldr	r2, [fp, #-24]	; 0xffffffe8
 5d0:	movw	r1, #0
 5d4:	movt	r1, #0
 5d8:	mvn	r0, #0
 5dc:	bl	0 <coda_set_error>
 5e0:	mov	r3, #0
 5e4:	b	7d8 <coda_grib_value_array_simple_packing_new+0x38c>
 5e8:	ldr	r3, [fp, #-20]	; 0xffffffec
 5ec:	ldr	r3, [r3, #56]	; 0x38
 5f0:	ldr	r2, [fp, #-24]	; 0xffffffe8
 5f4:	ldr	r1, [fp, #16]
 5f8:	mov	r0, r3
 5fc:	bl	0 <memcpy>
 600:	ldr	r3, [fp, #-24]	; 0xffffffe8
 604:	mov	r0, r3
 608:	bl	0 <malloc>
 60c:	mov	r3, r0
 610:	mov	r2, r3
 614:	ldr	r3, [fp, #-20]	; 0xffffffec
 618:	str	r2, [r3, #60]	; 0x3c
 61c:	ldr	r3, [fp, #-20]	; 0xffffffec
 620:	ldr	r3, [r3, #60]	; 0x3c
 624:	cmp	r3, #0
 628:	bne	660 <coda_grib_value_array_simple_packing_new+0x214>
 62c:	ldr	r0, [fp, #-20]	; 0xffffffec
 630:	bl	c8 <coda_grib_type_delete>
 634:	mov	r3, #183	; 0xb7
 638:	str	r3, [sp]
 63c:	movw	r3, #0
 640:	movt	r3, #0
 644:	ldr	r2, [fp, #-24]	; 0xffffffe8
 648:	movw	r1, #0
 64c:	movt	r1, #0
 650:	mvn	r0, #0
 654:	bl	0 <coda_set_error>
 658:	mov	r3, #0
 65c:	b	7d8 <coda_grib_value_array_simple_packing_new+0x38c>
 660:	mov	r3, #0
 664:	str	r3, [fp, #-16]
 668:	b	7c4 <coda_grib_value_array_simple_packing_new+0x378>
 66c:	ldr	r3, [fp, #-20]	; 0xffffffec
 670:	ldr	r2, [r3, #56]	; 0x38
 674:	ldr	r3, [fp, #-16]
 678:	add	r3, r2, r3
 67c:	ldrb	r3, [r3]
 680:	strb	r3, [fp, #-25]	; 0xffffffe7
 684:	ldrb	r3, [fp, #-25]	; 0xffffffe7
 688:	lsr	r3, r3, #7
 68c:	uxtb	r2, r3
 690:	ldrb	r3, [fp, #-25]	; 0xffffffe7
 694:	lsr	r3, r3, #6
 698:	uxtb	r3, r3
 69c:	and	r3, r3, #1
 6a0:	uxtb	r3, r3
 6a4:	add	r3, r2, r3
 6a8:	uxtb	r2, r3
 6ac:	ldrb	r3, [fp, #-25]	; 0xffffffe7
 6b0:	lsr	r3, r3, #5
 6b4:	uxtb	r3, r3
 6b8:	and	r3, r3, #1
 6bc:	uxtb	r3, r3
 6c0:	add	r3, r2, r3
 6c4:	uxtb	r2, r3
 6c8:	ldrb	r3, [fp, #-25]	; 0xffffffe7
 6cc:	lsr	r3, r3, #4
 6d0:	uxtb	r3, r3
 6d4:	and	r3, r3, #1
 6d8:	uxtb	r3, r3
 6dc:	add	r3, r2, r3
 6e0:	uxtb	r2, r3
 6e4:	ldrb	r3, [fp, #-25]	; 0xffffffe7
 6e8:	lsr	r3, r3, #3
 6ec:	uxtb	r3, r3
 6f0:	and	r3, r3, #1
 6f4:	uxtb	r3, r3
 6f8:	add	r3, r2, r3
 6fc:	uxtb	r2, r3
 700:	ldrb	r3, [fp, #-25]	; 0xffffffe7
 704:	lsr	r3, r3, #2
 708:	uxtb	r3, r3
 70c:	and	r3, r3, #1
 710:	uxtb	r3, r3
 714:	add	r3, r2, r3
 718:	uxtb	r2, r3
 71c:	ldrb	r3, [fp, #-25]	; 0xffffffe7
 720:	lsr	r3, r3, #1
 724:	uxtb	r3, r3
 728:	and	r3, r3, #1
 72c:	uxtb	r3, r3
 730:	add	r3, r2, r3
 734:	uxtb	r1, r3
 738:	ldrb	r3, [fp, #-25]	; 0xffffffe7
 73c:	and	r3, r3, #1
 740:	uxtb	r2, r3
 744:	ldr	r3, [fp, #-20]	; 0xffffffec
 748:	ldr	r0, [r3, #60]	; 0x3c
 74c:	ldr	r3, [fp, #-16]
 750:	add	r3, r0, r3
 754:	add	r2, r1, r2
 758:	uxtb	r2, r2
 75c:	strb	r2, [r3]
 760:	ldr	r3, [fp, #-16]
 764:	and	r3, r3, #15
 768:	cmp	r3, #0
 76c:	beq	7b8 <coda_grib_value_array_simple_packing_new+0x36c>
 770:	ldr	r3, [fp, #-20]	; 0xffffffec
 774:	ldr	r2, [r3, #60]	; 0x3c
 778:	ldr	r3, [fp, #-16]
 77c:	add	r3, r2, r3
 780:	ldrb	r1, [r3]
 784:	ldr	r3, [fp, #-20]	; 0xffffffec
 788:	ldr	r2, [r3, #60]	; 0x3c
 78c:	ldr	r3, [fp, #-16]
 790:	sub	r3, r3, #1
 794:	add	r3, r2, r3
 798:	ldrb	r2, [r3]
 79c:	ldr	r3, [fp, #-20]	; 0xffffffec
 7a0:	ldr	r0, [r3, #60]	; 0x3c
 7a4:	ldr	r3, [fp, #-16]
 7a8:	add	r3, r0, r3
 7ac:	add	r2, r1, r2
 7b0:	uxtb	r2, r2
 7b4:	strb	r2, [r3]
 7b8:	ldr	r3, [fp, #-16]
 7bc:	add	r3, r3, #1
 7c0:	str	r3, [fp, #-16]
 7c4:	ldr	r2, [fp, #-16]
 7c8:	ldr	r3, [fp, #-24]	; 0xffffffe8
 7cc:	cmp	r2, r3
 7d0:	blt	66c <coda_grib_value_array_simple_packing_new+0x220>
 7d4:	ldr	r3, [fp, #-20]	; 0xffffffec
 7d8:	mov	r0, r3
 7dc:	sub	sp, fp, #12
 7e0:	vpop	{d8}
 7e4:	ldr	fp, [sp]
 7e8:	add	sp, sp, #4
 7ec:	pop	{pc}		; (ldr pc, [sp], #4)
