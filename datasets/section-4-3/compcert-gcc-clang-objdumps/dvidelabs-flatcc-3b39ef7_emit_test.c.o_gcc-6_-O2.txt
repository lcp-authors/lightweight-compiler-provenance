
../compcert-repos/dvidelabs-flatcc-3b39ef7/test/emit_test/CMakeFiles/emit_test.dir/emit_test.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <dbg_emitter>:
   0:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   4:	mov	r7, r2
   8:	mov	r6, r3
   c:	mov	r2, r3
  10:	mov	r8, r1
  14:	ldr	r3, [sp, #40]	; 0x28
  18:	mov	r1, r7
  1c:	ldr	r0, [pc, #124]	; a0 <dbg_emitter+0xa0>
  20:	bl	0 <printf>
  24:	cmp	r7, #0
  28:	ble	6c <dbg_emitter+0x6c>
  2c:	ldr	fp, [pc, #112]	; a4 <dbg_emitter+0xa4>
  30:	ldr	sl, [pc, #112]	; a8 <dbg_emitter+0xa8>
  34:	ldr	r9, [pc, #112]	; ac <dbg_emitter+0xac>
  38:	mov	r5, r8
  3c:	mov	r4, #0
  40:	ldr	r3, [r8, r4, lsl #3]
  44:	cmp	r3, fp
  48:	beq	88 <dbg_emitter+0x88>
  4c:	cmp	r3, #0
  50:	add	r4, r4, #1
  54:	beq	74 <dbg_emitter+0x74>
  58:	ldr	r3, [r5, #4]
  5c:	cmp	r7, r4
  60:	add	r6, r6, r3
  64:	add	r5, r5, #8
  68:	bne	40 <dbg_emitter+0x40>
  6c:	mov	r0, #0
  70:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  74:	ldr	r2, [r5, #4]
  78:	mov	r1, r6
  7c:	mov	r0, r9
  80:	bl	0 <printf>
  84:	b	58 <dbg_emitter+0x58>
  88:	ldr	r2, [r5, #4]
  8c:	mov	r1, r6
  90:	mov	r0, sl
  94:	bl	0 <printf>
  98:	ldr	r3, [r8, r4, lsl #3]
  9c:	b	4c <dbg_emitter+0x4c>
	...
  a8:	.word	0x00000034
  ac:	.word	0x00000058

000000b0 <debug_test>:
  b0:	push	{r4, r5, lr}
  b4:	sub	sp, sp, #284	; 0x11c
  b8:	mov	r2, #40	; 0x28
  bc:	mov	r1, #0
  c0:	add	r0, sp, #8
  c4:	mov	r4, #0
  c8:	bl	0 <memset>
  cc:	ldr	r0, [pc, #312]	; 20c <debug_test+0x15c>
  d0:	bl	0 <puts>
  d4:	mov	r3, r4
  d8:	mov	r2, r4
  dc:	ldr	r1, [pc, #300]	; 210 <debug_test+0x160>
  e0:	add	r0, sp, #48	; 0x30
  e4:	str	r4, [sp]
  e8:	bl	0 <flatcc_builder_custom_init>
  ec:	mov	r3, #4
  f0:	mvn	r2, #-1073741824	; 0xc0000000
  f4:	add	r1, sp, #8
  f8:	str	r2, [sp, #4]
  fc:	str	r3, [sp]
 100:	mov	r2, #10
 104:	add	r0, sp, #48	; 0x30
 108:	bl	0 <flatcc_builder_create_vector>
 10c:	mov	r3, r4
 110:	mov	r2, r4
 114:	mov	r1, r4
 118:	mov	r5, r0
 11c:	add	r0, sp, #48	; 0x30
 120:	bl	0 <flatcc_builder_start_buffer>
 124:	cmp	r0, r4
 128:	beq	140 <debug_test+0x90>
 12c:	add	r0, sp, #48	; 0x30
 130:	bl	0 <flatcc_builder_clear>
 134:	mov	r0, #0
 138:	add	sp, sp, #284	; 0x11c
 13c:	pop	{r4, r5, pc}
 140:	mov	r1, #3
 144:	add	r0, sp, #48	; 0x30
 148:	bl	0 <flatcc_builder_start_table>
 14c:	subs	r4, r0, #0
 150:	bne	184 <debug_test+0xd4>
 154:	mov	r3, #8
 158:	mov	r2, r3
 15c:	mov	r1, r4
 160:	add	r0, sp, #48	; 0x30
 164:	bl	0 <flatcc_builder_table_add>
 168:	cmp	r0, #0
 16c:	beq	184 <debug_test+0xd4>
 170:	mov	r2, #42	; 0x2a
 174:	mov	r3, #0
 178:	cmp	r5, #0
 17c:	strd	r2, [r0]
 180:	bne	194 <debug_test+0xe4>
 184:	mov	r1, #0
 188:	add	r0, sp, #48	; 0x30
 18c:	bl	0 <flatcc_builder_end_buffer>
 190:	b	12c <debug_test+0x7c>
 194:	mov	r1, #2
 198:	add	r0, sp, #48	; 0x30
 19c:	bl	0 <flatcc_builder_table_add_offset>
 1a0:	cmp	r0, #0
 1a4:	beq	184 <debug_test+0xd4>
 1a8:	mov	r3, #1
 1ac:	str	r5, [r0]
 1b0:	mov	r2, r3
 1b4:	mov	r1, r3
 1b8:	add	r0, sp, #48	; 0x30
 1bc:	bl	0 <flatcc_builder_table_add>
 1c0:	cmp	r0, #0
 1c4:	beq	184 <debug_test+0xd4>
 1c8:	mov	r3, #1
 1cc:	strb	r3, [r0]
 1d0:	mov	r2, r4
 1d4:	ldr	r1, [pc, #56]	; 214 <debug_test+0x164>
 1d8:	add	r0, sp, #48	; 0x30
 1dc:	bl	0 <flatcc_builder_check_required>
 1e0:	cmp	r0, #0
 1e4:	beq	1f8 <debug_test+0x148>
 1e8:	add	r0, sp, #48	; 0x30
 1ec:	bl	0 <flatcc_builder_end_table>
 1f0:	mov	r1, r0
 1f4:	b	188 <debug_test+0xd8>
 1f8:	ldr	r3, [pc, #24]	; 218 <debug_test+0x168>
 1fc:	mov	r2, #21
 200:	ldr	r1, [pc, #20]	; 21c <debug_test+0x16c>
 204:	ldr	r0, [pc, #20]	; 220 <debug_test+0x170>
 208:	bl	0 <__assert_fail>
 20c:	.word	0x00000088
	...
 218:	.word	0x00000004
 21c:	.word	0x000000dc
 220:	.word	0x00000144

00000224 <emit_test>:
 224:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
 228:	sub	sp, sp, #348	; 0x15c
 22c:	ldr	r4, [pc, #1112]	; 68c <emit_test+0x468>
 230:	add	ip, sp, #52	; 0x34
 234:	add	r5, sp, #16
 238:	ldm	r4!, {r0, r1, r2, r3}
 23c:	stmia	ip!, {r0, r1, r2, r3}
 240:	ldm	r4!, {r0, r1, r2, r3}
 244:	stmia	ip!, {r0, r1, r2, r3}
 248:	ldm	r4!, {r0, r1, r2, r3}
 24c:	stmia	ip!, {r0, r1, r2, r3}
 250:	add	r3, r4, #12
 254:	ldm	r4, {r0, r1, r2}
 258:	lsr	lr, r2, #16
 25c:	stmia	ip!, {r0, r1}
 260:	strh	r2, [ip], #2
 264:	strb	lr, [ip]
 268:	ldm	r3, {r0, r1, r2, r3}
 26c:	stm	r5, {r0, r1, r2, r3}
 270:	add	r0, sp, #112	; 0x70
 274:	bl	0 <flatcc_builder_init>
 278:	add	r0, sp, #112	; 0x70
 27c:	bl	0 <flatcc_builder_get_emit_context>
 280:	mov	r3, #4
 284:	mvn	r2, #-1073741824	; 0xc0000000
 288:	mov	r1, r5
 28c:	str	r2, [sp, #4]
 290:	str	r3, [sp]
 294:	mov	r2, r3
 298:	mov	r6, r0
 29c:	add	r0, sp, #112	; 0x70
 2a0:	bl	0 <flatcc_builder_create_vector>
 2a4:	mov	r3, #0
 2a8:	mov	r2, r3
 2ac:	mov	r1, r3
 2b0:	mov	r5, r0
 2b4:	add	r0, sp, #112	; 0x70
 2b8:	bl	0 <flatcc_builder_start_buffer>
 2bc:	cmp	r0, #0
 2c0:	beq	2e4 <emit_test+0xc0>
 2c4:	ldr	r2, [r6, #4]
 2c8:	ldr	r3, [r6]
 2cc:	cmp	r2, r3
 2d0:	beq	344 <emit_test+0x120>
 2d4:	mvn	r4, #0
 2d8:	mov	r0, r4
 2dc:	add	sp, sp, #348	; 0x15c
 2e0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
 2e4:	mov	r1, #3
 2e8:	add	r0, sp, #112	; 0x70
 2ec:	bl	0 <flatcc_builder_start_table>
 2f0:	subs	r7, r0, #0
 2f4:	bne	328 <emit_test+0x104>
 2f8:	mov	r3, #8
 2fc:	mov	r2, r3
 300:	mov	r1, r7
 304:	add	r0, sp, #112	; 0x70
 308:	bl	0 <flatcc_builder_table_add>
 30c:	cmp	r0, #0
 310:	beq	328 <emit_test+0x104>
 314:	mov	r2, #42	; 0x2a
 318:	mov	r3, #0
 31c:	cmp	r5, #0
 320:	strd	r2, [r0]
 324:	bne	5c0 <emit_test+0x39c>
 328:	mov	r1, #0
 32c:	add	r0, sp, #112	; 0x70
 330:	bl	0 <flatcc_builder_end_buffer>
 334:	ldr	r2, [r6, #4]
 338:	ldr	r3, [r6]
 33c:	cmp	r2, r3
 340:	bne	2d4 <emit_test+0xb0>
 344:	ldr	r3, [r6, #8]
 348:	ldr	r4, [r6, #24]
 34c:	cmp	r3, #0
 350:	str	r3, [sp, #12]
 354:	beq	2d4 <emit_test+0xb0>
 358:	add	r0, sp, #112	; 0x70
 35c:	bl	0 <flatcc_builder_get_buffer_size>
 360:	cmp	r0, r4
 364:	mov	r8, r0
 368:	bne	624 <emit_test+0x400>
 36c:	ldr	r4, [pc, #796]	; 690 <emit_test+0x46c>
 370:	mov	r2, r0
 374:	ldr	r1, [pc, #792]	; 694 <emit_test+0x470>
 378:	ldr	r0, [r4]
 37c:	bl	0 <fprintf>
 380:	ldr	r6, [r4]
 384:	ldr	r2, [pc, #780]	; 698 <emit_test+0x474>
 388:	mov	r0, r6
 38c:	ldr	r1, [pc, #776]	; 69c <emit_test+0x478>
 390:	bl	0 <fprintf>
 394:	cmp	r8, #0
 398:	beq	59c <emit_test+0x378>
 39c:	ldr	r3, [sp, #12]
 3a0:	mov	r4, #0
 3a4:	ldr	fp, [pc, #756]	; 6a0 <emit_test+0x47c>
 3a8:	ldr	sl, [pc, #756]	; 6a4 <emit_test+0x480>
 3ac:	mov	r9, r4
 3b0:	sub	r7, r3, #1
 3b4:	b	41c <emit_test+0x1f8>
 3b8:	cmp	r4, #0
 3bc:	beq	3d0 <emit_test+0x1ac>
 3c0:	add	r2, sp, #32
 3c4:	ldr	r1, [pc, #732]	; 6a8 <emit_test+0x484>
 3c8:	mov	r0, r6
 3cc:	bl	0 <fprintf>
 3d0:	mov	r2, r4
 3d4:	mov	r1, fp
 3d8:	mov	r0, r6
 3dc:	bl	0 <fprintf>
 3e0:	ldrb	r2, [r7, #1]
 3e4:	mov	r1, sl
 3e8:	mov	r0, r6
 3ec:	bl	0 <fprintf>
 3f0:	ldrb	r2, [r7, #1]!
 3f4:	add	r4, r4, #1
 3f8:	sub	r3, r2, #32
 3fc:	cmp	r3, #94	; 0x5e
 400:	add	r3, sp, #344	; 0x158
 404:	add	r3, r3, r5
 408:	movhi	r2, #46	; 0x2e
 40c:	cmp	r8, r4
 410:	strb	r2, [r3, #-312]	; 0xfffffec8
 414:	strb	r9, [r3, #-311]	; 0xfffffec9
 418:	beq	43c <emit_test+0x218>
 41c:	ands	r5, r4, #15
 420:	beq	3b8 <emit_test+0x194>
 424:	tst	r4, #7
 428:	bne	3e0 <emit_test+0x1bc>
 42c:	mov	r1, r6
 430:	mov	r0, #32
 434:	bl	0 <fputc>
 438:	b	3e0 <emit_test+0x1bc>
 43c:	tst	r8, #15
 440:	beq	470 <emit_test+0x24c>
 444:	ldr	r9, [pc, #608]	; 6ac <emit_test+0x488>
 448:	mov	r7, #3
 44c:	mov	r5, #1
 450:	add	r4, r4, #1
 454:	mov	r3, r6
 458:	mov	r2, r7
 45c:	mov	r1, r5
 460:	mov	r0, r9
 464:	bl	0 <fwrite>
 468:	tst	r4, #15
 46c:	bne	450 <emit_test+0x22c>
 470:	add	r2, sp, #32
 474:	mov	r0, r6
 478:	ldr	r1, [pc, #552]	; 6a8 <emit_test+0x484>
 47c:	bl	0 <fprintf>
 480:	cmp	r8, #58	; 0x3a
 484:	bne	5ac <emit_test+0x388>
 488:	mov	r2, r8
 48c:	add	r1, sp, #52	; 0x34
 490:	ldr	r0, [sp, #12]
 494:	bl	0 <memcmp>
 498:	subs	r4, r0, #0
 49c:	bne	64c <emit_test+0x428>
 4a0:	ldr	r3, [sp, #12]
 4a4:	ldr	r2, [r3]
 4a8:	adds	r3, r3, r2
 4ac:	beq	638 <emit_test+0x414>
 4b0:	ldr	r1, [sp, #12]
 4b4:	ldr	r2, [r1, r2]
 4b8:	sub	r2, r3, r2
 4bc:	ldrh	r1, [r2]
 4c0:	cmp	r1, #5
 4c4:	bhi	4dc <emit_test+0x2b8>
 4c8:	ldr	r3, [pc, #480]	; 6b0 <emit_test+0x48c>
 4cc:	mov	r2, #112	; 0x70
 4d0:	ldr	r1, [pc, #476]	; 6b4 <emit_test+0x490>
 4d4:	ldr	r0, [pc, #476]	; 6b8 <emit_test+0x494>
 4d8:	bl	0 <__assert_fail>
 4dc:	ldrh	r0, [r2, #4]
 4e0:	cmp	r0, #0
 4e4:	beq	4c8 <emit_test+0x2a4>
 4e8:	ldrd	r6, [r3, r0]
 4ec:	cmp	r7, #0
 4f0:	cmpeq	r6, #42	; 0x2a
 4f4:	bne	4c8 <emit_test+0x2a4>
 4f8:	cmp	r1, #7
 4fc:	bhi	514 <emit_test+0x2f0>
 500:	ldr	r3, [pc, #424]	; 6b0 <emit_test+0x48c>
 504:	mov	r2, #113	; 0x71
 508:	ldr	r1, [pc, #420]	; 6b4 <emit_test+0x490>
 50c:	ldr	r0, [pc, #420]	; 6b8 <emit_test+0x494>
 510:	bl	0 <__assert_fail>
 514:	ldrh	r0, [r2, #6]
 518:	cmp	r0, #0
 51c:	beq	500 <emit_test+0x2dc>
 520:	ldrb	r0, [r3, r0]
 524:	cmp	r0, #1
 528:	bne	500 <emit_test+0x2dc>
 52c:	cmp	r1, #9
 530:	bhi	548 <emit_test+0x324>
 534:	ldr	r3, [pc, #372]	; 6b0 <emit_test+0x48c>
 538:	mov	r2, #114	; 0x72
 53c:	ldr	r1, [pc, #368]	; 6b4 <emit_test+0x490>
 540:	ldr	r0, [pc, #368]	; 6b8 <emit_test+0x494>
 544:	bl	0 <__assert_fail>
 548:	ldrh	r1, [r2, #8]
 54c:	cmp	r1, #0
 550:	beq	534 <emit_test+0x310>
 554:	ldr	r2, [r3, r1]
 558:	add	r3, r3, r1
 55c:	add	r2, r2, #4
 560:	adds	r3, r3, r2
 564:	beq	534 <emit_test+0x310>
 568:	ldr	r2, [r3, #-4]
 56c:	cmp	r2, #4
 570:	bne	534 <emit_test+0x310>
 574:	vldr	s15, [pc, #268]	; 688 <emit_test+0x464>
 578:	vldr	s14, [r3, #8]
 57c:	vcmp.f32	s14, s15
 580:	vmrs	APSR_nzcv, fpscr
 584:	bne	660 <emit_test+0x43c>
 588:	add	r0, sp, #112	; 0x70
 58c:	bl	0 <flatcc_builder_clear>
 590:	mov	r0, r4
 594:	add	sp, sp, #348	; 0x15c
 598:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
 59c:	mov	r0, r6
 5a0:	add	r2, sp, #32
 5a4:	ldr	r1, [pc, #252]	; 6a8 <emit_test+0x484>
 5a8:	bl	0 <fprintf>
 5ac:	ldr	r3, [pc, #252]	; 6b0 <emit_test+0x48c>
 5b0:	mov	r2, #106	; 0x6a
 5b4:	ldr	r1, [pc, #248]	; 6b4 <emit_test+0x490>
 5b8:	ldr	r0, [pc, #248]	; 6b8 <emit_test+0x494>
 5bc:	bl	0 <__assert_fail>
 5c0:	mov	r1, #2
 5c4:	add	r0, sp, #112	; 0x70
 5c8:	bl	0 <flatcc_builder_table_add_offset>
 5cc:	cmp	r0, #0
 5d0:	beq	328 <emit_test+0x104>
 5d4:	mov	r3, #1
 5d8:	str	r5, [r0]
 5dc:	mov	r2, r3
 5e0:	mov	r1, r3
 5e4:	add	r0, sp, #112	; 0x70
 5e8:	bl	0 <flatcc_builder_table_add>
 5ec:	cmp	r0, #0
 5f0:	beq	328 <emit_test+0x104>
 5f4:	mov	r3, #1
 5f8:	strb	r3, [r0]
 5fc:	mov	r2, r7
 600:	sub	r1, r4, #64	; 0x40
 604:	add	r0, sp, #112	; 0x70
 608:	bl	0 <flatcc_builder_check_required>
 60c:	cmp	r0, #0
 610:	beq	674 <emit_test+0x450>
 614:	add	r0, sp, #112	; 0x70
 618:	bl	0 <flatcc_builder_end_table>
 61c:	mov	r1, r0
 620:	b	32c <emit_test+0x108>
 624:	ldr	r3, [pc, #132]	; 6b0 <emit_test+0x48c>
 628:	mov	r2, #101	; 0x65
 62c:	ldr	r1, [pc, #128]	; 6b4 <emit_test+0x490>
 630:	ldr	r0, [pc, #128]	; 6b8 <emit_test+0x494>
 634:	bl	0 <__assert_fail>
 638:	ldr	r3, [pc, #124]	; 6bc <emit_test+0x498>
 63c:	mov	r2, #41	; 0x29
 640:	ldr	r1, [pc, #120]	; 6c0 <emit_test+0x49c>
 644:	ldr	r0, [pc, #120]	; 6c4 <emit_test+0x4a0>
 648:	bl	0 <__assert_fail>
 64c:	ldr	r3, [pc, #92]	; 6b0 <emit_test+0x48c>
 650:	mov	r2, #108	; 0x6c
 654:	ldr	r1, [pc, #88]	; 6b4 <emit_test+0x490>
 658:	ldr	r0, [pc, #88]	; 6b8 <emit_test+0x494>
 65c:	bl	0 <__assert_fail>
 660:	ldr	r3, [pc, #72]	; 6b0 <emit_test+0x48c>
 664:	mov	r2, #115	; 0x73
 668:	ldr	r1, [pc, #68]	; 6b4 <emit_test+0x490>
 66c:	ldr	r0, [pc, #68]	; 6b8 <emit_test+0x494>
 670:	bl	0 <__assert_fail>
 674:	sub	r3, r4, #60	; 0x3c
 678:	mov	r2, #21
 67c:	ldr	r1, [pc, #68]	; 6c8 <emit_test+0x4a4>
 680:	ldr	r0, [pc, #68]	; 6cc <emit_test+0x4a8>
 684:	bl	0 <__assert_fail>
 688:	.word	0x3f99999a
 68c:	.word	0x00000010
 690:	.word	0x00000000
 694:	.word	0x00000208
 698:	.word	0x0000021c
 69c:	.word	0x00000228
 6a0:	.word	0x00000238
 6a4:	.word	0x00000240
 6a8:	.word	0x00000230
 6ac:	.word	0x00000248
 6b0:	.word	0x0000005c
 6b4:	.word	0x000001b0
 6b8:	.word	0x00000204
 6bc:	.word	0x00000068
 6c0:	.word	0x0000024c
 6c4:	.word	0x000002b4
 6c8:	.word	0x000000dc
 6cc:	.word	0x00000144

Disassembly of section .text.startup:

00000000 <main>:
   0:	push	{r4, lr}
   4:	bl	b0 <debug_test>
   8:	mov	r4, r0
   c:	bl	224 <emit_test>
  10:	orr	r0, r4, r0
  14:	pop	{r4, pc}
