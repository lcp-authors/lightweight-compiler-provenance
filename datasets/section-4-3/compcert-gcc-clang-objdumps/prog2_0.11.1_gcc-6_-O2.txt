
../compcert-repos/prog2/0.11.1:     file format elf32-littlearm


Disassembly of section .init:

00010598 <.init>:
   10598:	push	{r3, lr}
   1059c:	bl	1075c <_start@@Base+0x3c>
   105a0:	pop	{r3, pc}

Disassembly of section .plt:

000105a4 <printf@plt-0x14>:
   105a4:	push	{lr}		; (str lr, [sp, #-4]!)
   105a8:	ldr	lr, [pc, #4]	; 105b4 <printf@plt-0x4>
   105ac:	add	lr, pc, lr
   105b0:	ldr	pc, [lr, #8]!
   105b4:	andeq	r0, r1, ip, asr #20

000105b8 <printf@plt>:
   105b8:	add	ip, pc, #0, 12
   105bc:	add	ip, ip, #16, 20	; 0x10000
   105c0:	ldr	pc, [ip, #2636]!	; 0xa4c

000105c4 <__libc_start_main@plt>:
   105c4:	add	ip, pc, #0, 12
   105c8:	add	ip, ip, #16, 20	; 0x10000
   105cc:	ldr	pc, [ip, #2628]!	; 0xa44

000105d0 <__gmon_start__@plt>:
   105d0:	add	ip, pc, #0, 12
   105d4:	add	ip, ip, #16, 20	; 0x10000
   105d8:	ldr	pc, [ip, #2620]!	; 0xa3c

000105dc <__isoc99_scanf@plt>:
   105dc:	add	ip, pc, #0, 12
   105e0:	add	ip, ip, #16, 20	; 0x10000
   105e4:	ldr	pc, [ip, #2612]!	; 0xa34

000105e8 <abort@plt>:
   105e8:	add	ip, pc, #0, 12
   105ec:	add	ip, ip, #16, 20	; 0x10000
   105f0:	ldr	pc, [ip, #2604]!	; 0xa2c

Disassembly of section .text:

000105f4 <main@@Base>:
   105f4:	push	{r4, r5, r6, r7, r8, lr}
   105f8:	sub	sp, sp, #16
   105fc:	add	r1, sp, #4
   10600:	ldr	r0, [pc, #264]	; 10710 <main@@Base+0x11c>
   10604:	bl	105dc <__isoc99_scanf@plt>
   10608:	ldr	r3, [sp, #4]
   1060c:	cmp	r3, #0
   10610:	ble	106e8 <main@@Base+0xf4>
   10614:	mov	r4, #0
   10618:	ldr	r7, [pc, #244]	; 10714 <main@@Base+0x120>
   1061c:	ldr	r8, [pc, #244]	; 10718 <main@@Base+0x124>
   10620:	ldr	r6, [pc, #244]	; 1071c <main@@Base+0x128>
   10624:	mov	r5, r4
   10628:	add	r2, sp, #12
   1062c:	add	r1, sp, #8
   10630:	mov	r0, r7
   10634:	bl	105dc <__isoc99_scanf@plt>
   10638:	ldr	r0, [sp, #8]
   1063c:	cmp	r0, #0
   10640:	beq	106f4 <main@@Base+0x100>
   10644:	mov	r2, r5
   10648:	smull	r1, r3, r8, r0
   1064c:	asr	r1, r0, #31
   10650:	rsb	r1, r1, r3, asr #2
   10654:	add	r3, r2, r2, lsl #2
   10658:	add	ip, r1, r1, lsl #2
   1065c:	sub	ip, r0, ip, lsl #1
   10660:	subs	r0, r1, #0
   10664:	add	r2, ip, r3, lsl #1
   10668:	bne	10648 <main@@Base+0x54>
   1066c:	ldr	r1, [sp, #12]
   10670:	cmp	r1, #0
   10674:	beq	10708 <main@@Base+0x114>
   10678:	mov	r3, r5
   1067c:	smull	r0, ip, r8, r1
   10680:	asr	r0, r1, #31
   10684:	rsb	r0, r0, ip, asr #2
   10688:	add	r3, r3, r3, lsl #2
   1068c:	add	ip, r0, r0, lsl #2
   10690:	sub	ip, r1, ip, lsl #1
   10694:	subs	r1, r0, #0
   10698:	add	r3, ip, r3, lsl #1
   1069c:	bne	1067c <main@@Base+0x88>
   106a0:	adds	r3, r2, r3
   106a4:	mov	r1, r5
   106a8:	beq	106d0 <main@@Base+0xdc>
   106ac:	smull	r2, r0, r8, r3
   106b0:	asr	r2, r3, #31
   106b4:	rsb	r2, r2, r0, asr #2
   106b8:	add	r1, r1, r1, lsl #2
   106bc:	add	r0, r2, r2, lsl #2
   106c0:	sub	r0, r3, r0, lsl #1
   106c4:	subs	r3, r2, #0
   106c8:	add	r1, r0, r1, lsl #1
   106cc:	bne	106ac <main@@Base+0xb8>
   106d0:	mov	r0, r6
   106d4:	bl	105b8 <printf@plt>
   106d8:	ldr	r3, [sp, #4]
   106dc:	add	r4, r4, #1
   106e0:	cmp	r3, r4
   106e4:	bgt	10628 <main@@Base+0x34>
   106e8:	mov	r0, #0
   106ec:	add	sp, sp, #16
   106f0:	pop	{r4, r5, r6, r7, r8, pc}
   106f4:	ldr	r1, [sp, #12]
   106f8:	cmp	r1, #0
   106fc:	movne	r2, r5
   10700:	bne	10678 <main@@Base+0x84>
   10704:	b	106d0 <main@@Base+0xdc>
   10708:	mov	r3, r5
   1070c:	b	106a0 <main@@Base+0xac>
   10710:	strdeq	r0, [r1], -ip
   10714:	andeq	r0, r1, r0, lsl #18
   10718:	strbtvs	r6, [r6], -r7, ror #12
   1071c:	andeq	r0, r1, r8, lsl #18

00010720 <_start@@Base>:
   10720:	mov	fp, #0
   10724:	mov	lr, #0
   10728:	pop	{r1}		; (ldr r1, [sp], #4)
   1072c:	mov	r2, sp
   10730:	push	{r2}		; (str r2, [sp, #-4]!)
   10734:	push	{r0}		; (str r0, [sp, #-4]!)
   10738:	ldr	ip, [pc, #16]	; 10750 <_start@@Base+0x30>
   1073c:	push	{ip}		; (str ip, [sp, #-4]!)
   10740:	ldr	r0, [pc, #12]	; 10754 <_start@@Base+0x34>
   10744:	ldr	r3, [pc, #12]	; 10758 <_start@@Base+0x38>
   10748:	bl	105c4 <__libc_start_main@plt>
   1074c:	bl	105e8 <abort@plt>
   10750:	andeq	r0, r1, ip, ror #17
   10754:	strdeq	r0, [r1], -r4
   10758:	andeq	r0, r1, ip, lsl #17
   1075c:	ldr	r3, [pc, #20]	; 10778 <_start@@Base+0x58>
   10760:	ldr	r2, [pc, #20]	; 1077c <_start@@Base+0x5c>
   10764:	add	r3, pc, r3
   10768:	ldr	r2, [r3, r2]
   1076c:	cmp	r2, #0
   10770:	bxeq	lr
   10774:	b	105d0 <__gmon_start__@plt>
   10778:	muleq	r1, r4, r8
   1077c:	andeq	r0, r0, r0, lsr #32
   10780:	ldr	r3, [pc, #28]	; 107a4 <_start@@Base+0x84>
   10784:	ldr	r0, [pc, #28]	; 107a8 <_start@@Base+0x88>
   10788:	sub	r3, r3, r0
   1078c:	cmp	r3, #6
   10790:	bxls	lr
   10794:	ldr	r3, [pc, #16]	; 107ac <_start@@Base+0x8c>
   10798:	cmp	r3, #0
   1079c:	bxeq	lr
   107a0:	bx	r3
   107a4:	andeq	r1, r2, pc, lsr #32
   107a8:	andeq	r1, r2, ip, lsr #32
   107ac:	andeq	r0, r0, r0
   107b0:	ldr	r1, [pc, #36]	; 107dc <_start@@Base+0xbc>
   107b4:	ldr	r0, [pc, #36]	; 107e0 <_start@@Base+0xc0>
   107b8:	sub	r1, r1, r0
   107bc:	asr	r1, r1, #2
   107c0:	add	r1, r1, r1, lsr #31
   107c4:	asrs	r1, r1, #1
   107c8:	bxeq	lr
   107cc:	ldr	r3, [pc, #16]	; 107e4 <_start@@Base+0xc4>
   107d0:	cmp	r3, #0
   107d4:	bxeq	lr
   107d8:	bx	r3
   107dc:	andeq	r1, r2, ip, lsr #32
   107e0:	andeq	r1, r2, ip, lsr #32
   107e4:	andeq	r0, r0, r0
   107e8:	push	{r4, lr}
   107ec:	ldr	r4, [pc, #24]	; 1080c <_start@@Base+0xec>
   107f0:	ldrb	r3, [r4]
   107f4:	cmp	r3, #0
   107f8:	popne	{r4, pc}
   107fc:	bl	10780 <_start@@Base+0x60>
   10800:	mov	r3, #1
   10804:	strb	r3, [r4]
   10808:	pop	{r4, pc}
   1080c:	andeq	r1, r2, ip, lsr #32
   10810:	ldr	r0, [pc, #40]	; 10840 <_start@@Base+0x120>
   10814:	ldr	r3, [r0]
   10818:	cmp	r3, #0
   1081c:	bne	10824 <_start@@Base+0x104>
   10820:	b	107b0 <_start@@Base+0x90>
   10824:	ldr	r3, [pc, #24]	; 10844 <_start@@Base+0x124>
   10828:	cmp	r3, #0
   1082c:	beq	10820 <_start@@Base+0x100>
   10830:	push	{r4, lr}
   10834:	blx	r3
   10838:	pop	{r4, lr}
   1083c:	b	107b0 <_start@@Base+0x90>
   10840:	andeq	r0, r2, r4, lsl pc
   10844:	andeq	r0, r0, r0

00010848 <invert@@Base>:
   10848:	subs	r2, r0, #0
   1084c:	beq	10880 <invert@@Base+0x38>
   10850:	ldr	ip, [pc, #48]	; 10888 <invert@@Base+0x40>
   10854:	mov	r0, #0
   10858:	smull	r3, r1, ip, r2
   1085c:	asr	r3, r2, #31
   10860:	rsb	r3, r3, r1, asr #2
   10864:	add	r0, r0, r0, lsl #2
   10868:	add	r1, r3, r3, lsl #2
   1086c:	sub	r1, r2, r1, lsl #1
   10870:	subs	r2, r3, #0
   10874:	add	r0, r1, r0, lsl #1
   10878:	bne	10858 <invert@@Base+0x10>
   1087c:	bx	lr
   10880:	mov	r0, r2
   10884:	bx	lr
   10888:	strbtvs	r6, [r6], -r7, ror #12

0001088c <__libc_csu_init@@Base>:
   1088c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   10890:	mov	r7, r0
   10894:	ldr	r6, [pc, #72]	; 108e4 <__libc_csu_init@@Base+0x58>
   10898:	ldr	r5, [pc, #72]	; 108e8 <__libc_csu_init@@Base+0x5c>
   1089c:	add	r6, pc, r6
   108a0:	add	r5, pc, r5
   108a4:	sub	r6, r6, r5
   108a8:	mov	r8, r1
   108ac:	mov	r9, r2
   108b0:	bl	10598 <printf@plt-0x20>
   108b4:	asrs	r6, r6, #2
   108b8:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   108bc:	mov	r4, #0
   108c0:	add	r4, r4, #1
   108c4:	ldr	r3, [r5], #4
   108c8:	mov	r2, r9
   108cc:	mov	r1, r8
   108d0:	mov	r0, r7
   108d4:	blx	r3
   108d8:	cmp	r6, r4
   108dc:	bne	108c0 <__libc_csu_init@@Base+0x34>
   108e0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   108e4:	andeq	r0, r1, ip, ror #12
   108e8:	andeq	r0, r1, r4, ror #12

000108ec <__libc_csu_fini@@Base>:
   108ec:	bx	lr

Disassembly of section .fini:

000108f0 <.fini>:
   108f0:	push	{r3, lr}
   108f4:	pop	{r3, pc}
