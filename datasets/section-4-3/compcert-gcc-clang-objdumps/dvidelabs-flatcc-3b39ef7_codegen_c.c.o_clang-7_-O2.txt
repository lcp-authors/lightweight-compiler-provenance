
../compcert-repos/dvidelabs-flatcc-3b39ef7/src/compiler/CMakeFiles/flatcc.dir/codegen_c.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <__flatcc_fb_open_output_file>:
   0:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   4:	add	fp, sp, #24
   8:	sub	sp, sp, #8
   c:	mov	r4, r0
  10:	mov	r9, r1
  14:	ldr	r0, [r0, #204]	; 0xcc
  18:	movw	r6, #0
  1c:	mov	r5, #0
  20:	ldr	r1, [r4, #212]	; 0xd4
  24:	movt	r6, #0
  28:	ldr	r1, [r1, #216]	; 0xd8
  2c:	cmp	r1, #0
  30:	movne	r6, r1
  34:	cmp	r0, #0
  38:	bne	9c <__flatcc_fb_open_output_file+0x9c>
  3c:	mov	r0, r6
  40:	mov	r7, r3
  44:	mov	r8, r2
  48:	bl	0 <strlen>
  4c:	mov	r1, r0
  50:	mov	r0, #1
  54:	mov	r2, r9
  58:	mov	r3, r8
  5c:	str	r7, [sp]
  60:	str	r0, [sp, #4]
  64:	mov	r0, r6
  68:	bl	0 <__flatcc_fb_create_join_path_n>
  6c:	cmp	r0, #0
  70:	beq	cc <__flatcc_fb_open_output_file+0xcc>
  74:	movw	r1, #0
  78:	mov	r6, r0
  7c:	movt	r1, #0
  80:	bl	0 <fopen>
  84:	mov	r5, #0
  88:	cmp	r0, #0
  8c:	str	r0, [r4, #204]	; 0xcc
  90:	beq	a8 <__flatcc_fb_open_output_file+0xa8>
  94:	mov	r0, r6
  98:	bl	0 <free>
  9c:	mov	r0, r5
  a0:	sub	sp, fp, #24
  a4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
  a8:	movw	r0, #0
  ac:	movw	r1, #0
  b0:	mov	r2, r6
  b4:	movt	r0, #0
  b8:	movt	r1, #0
  bc:	ldr	r0, [r0]
  c0:	bl	0 <fprintf>
  c4:	mvn	r5, #0
  c8:	b	94 <__flatcc_fb_open_output_file+0x94>
  cc:	movw	r0, #0
  d0:	mov	r1, #34	; 0x22
  d4:	mov	r2, #1
  d8:	movt	r0, #0
  dc:	ldr	r3, [r0]
  e0:	movw	r0, #0
  e4:	movt	r0, #0
  e8:	bl	0 <fwrite>
  ec:	mov	r0, #1
  f0:	bl	0 <exit>

000000f4 <__flatcc_fb_close_output_file>:
  f4:	push	{r4, sl, fp, lr}
  f8:	add	fp, sp, #8
  fc:	mov	r4, r0
 100:	ldr	r0, [r0, #212]	; 0xd4
 104:	ldr	r1, [r0, #124]	; 0x7c
 108:	cmp	r1, #0
 10c:	bne	11c <__flatcc_fb_close_output_file+0x28>
 110:	ldr	r0, [r0, #108]	; 0x6c
 114:	cmp	r0, #0
 118:	beq	120 <__flatcc_fb_close_output_file+0x2c>
 11c:	pop	{r4, sl, fp, pc}
 120:	ldr	r0, [r4, #204]	; 0xcc
 124:	cmp	r0, #0
 128:	popeq	{r4, sl, fp, pc}
 12c:	bl	0 <fclose>
 130:	mov	r0, #0
 134:	str	r0, [r4, #204]	; 0xcc
 138:	pop	{r4, sl, fp, pc}

0000013c <__flatcc_fb_end_output_c>:
 13c:	push	{r4, sl, fp, lr}
 140:	add	fp, sp, #8
 144:	mov	r4, r0
 148:	ldr	r0, [r0, #204]	; 0xcc
 14c:	cmp	r0, #0
 150:	movwne	r1, #0
 154:	movtne	r1, #0
 158:	ldrne	r1, [r1]
 15c:	cmpne	r0, r1
 160:	beq	168 <__flatcc_fb_end_output_c+0x2c>
 164:	bl	0 <fclose>
 168:	mov	r0, #0
 16c:	str	r0, [r4, #204]	; 0xcc
 170:	pop	{r4, sl, fp, pc}

00000174 <__flatcc_fb_init_output_c>:
 174:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
 178:	add	fp, sp, #28
 17c:	sub	sp, sp, #4
 180:	ldr	r5, [r1, #128]	; 0x80
 184:	ldr	r7, [r1, #216]	; 0xd8
 188:	mov	r6, r1
 18c:	mov	r1, #0
 190:	mov	r2, #232	; 0xe8
 194:	mov	sl, r0
 198:	mov	r4, #0
 19c:	bl	0 <memset>
 1a0:	movw	r0, #0
 1a4:	movw	r8, #0
 1a8:	movw	r9, #0
 1ac:	cmp	r5, #0
 1b0:	str	r6, [sl, #212]	; 0xd4
 1b4:	movt	r0, #0
 1b8:	movt	r8, #0
 1bc:	movt	r9, #0
 1c0:	moveq	r8, r0
 1c4:	cmp	r7, #0
 1c8:	movne	r9, r7
 1cc:	ldr	r7, [r6, #196]	; 0xc4
 1d0:	cmp	r7, #0
 1d4:	beq	210 <__flatcc_fb_init_output_c+0x9c>
 1d8:	mov	r0, r7
 1dc:	bl	0 <strlen>
 1e0:	mov	r5, r0
 1e4:	cmp	r0, #101	; 0x65
 1e8:	bcc	21c <__flatcc_fb_init_output_c+0xa8>
 1ec:	movw	r0, #0
 1f0:	movw	r1, #0
 1f4:	mov	r2, #100	; 0x64
 1f8:	movt	r0, #0
 1fc:	movt	r1, #0
 200:	ldr	r0, [r0]
 204:	bl	0 <fprintf>
 208:	mvn	r7, #0
 20c:	b	2fc <__flatcc_fb_init_output_c+0x188>
 210:	movw	r7, #0
 214:	mov	r5, #11
 218:	movt	r7, #0
 21c:	mov	r0, sl
 220:	mov	r1, r7
 224:	mov	r2, #100	; 0x64
 228:	bl	0 <strncpy>
 22c:	cmp	r5, #0
 230:	strb	r4, [sl, #100]	; 0x64
 234:	mov	r4, sl
 238:	addne	r0, sl, r5
 23c:	movne	r1, #95	; 0x5f
 240:	strhne	r1, [r0]
 244:	ldrb	r7, [r4], #102	; 0x66
 248:	cmp	r7, #0
 24c:	beq	274 <__flatcc_fb_init_output_c+0x100>
 250:	bl	0 <__ctype_toupper_loc>
 254:	ldr	r1, [r0]
 258:	uxtb	r2, r7
 25c:	ldr	r1, [r1, r2, lsl #2]
 260:	strb	r1, [r4]
 264:	ldrb	r7, [r4, #-101]	; 0xffffff9b
 268:	add	r4, r4, #1
 26c:	cmp	r7, #0
 270:	bne	254 <__flatcc_fb_init_output_c+0xe0>
 274:	mov	r7, #0
 278:	add	r0, sl, r5
 27c:	strb	r7, [r4]
 280:	strb	r7, [r0, #102]	; 0x66
 284:	ldr	r0, [r6, #176]	; 0xb0
 288:	str	r0, [sl, #224]	; 0xe0
 28c:	ldr	r0, [r6, #108]	; 0x6c
 290:	cmp	r0, #0
 294:	beq	2ac <__flatcc_fb_init_output_c+0x138>
 298:	movw	r0, #0
 29c:	movt	r0, #0
 2a0:	ldr	r0, [r0]
 2a4:	str	r0, [sl, #204]	; 0xcc
 2a8:	b	2fc <__flatcc_fb_init_output_c+0x188>
 2ac:	ldr	r0, [sl, #212]	; 0xd4
 2b0:	ldr	r1, [r0, #124]	; 0x7c
 2b4:	cmp	r1, #0
 2b8:	beq	2fc <__flatcc_fb_init_output_c+0x188>
 2bc:	movw	r2, #0
 2c0:	mov	r0, r9
 2c4:	mov	r3, #1
 2c8:	movt	r2, #0
 2cc:	bl	0 <__flatcc_fb_create_join_path>
 2d0:	cmp	r0, #0
 2d4:	beq	32c <__flatcc_fb_init_output_c+0x1b8>
 2d8:	mov	r1, r8
 2dc:	mov	r5, r0
 2e0:	bl	0 <fopen>
 2e4:	mov	r7, #0
 2e8:	cmp	r0, #0
 2ec:	str	r0, [sl, #204]	; 0xcc
 2f0:	beq	308 <__flatcc_fb_init_output_c+0x194>
 2f4:	mov	r0, r5
 2f8:	bl	0 <free>
 2fc:	mov	r0, r7
 300:	sub	sp, fp, #28
 304:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
 308:	movw	r0, #0
 30c:	movw	r1, #0
 310:	mov	r2, r5
 314:	movt	r0, #0
 318:	movt	r1, #0
 31c:	ldr	r0, [r0]
 320:	bl	0 <fprintf>
 324:	mvn	r7, #0
 328:	b	2f4 <__flatcc_fb_init_output_c+0x180>
 32c:	movw	r0, #0
 330:	mov	r1, #34	; 0x22
 334:	mov	r2, #1
 338:	movt	r0, #0
 33c:	ldr	r3, [r0]
 340:	movw	r0, #0
 344:	movt	r0, #0
 348:	bl	0 <fwrite>
 34c:	mov	r0, #1
 350:	bl	0 <exit>

00000354 <__flatcc_fb_gen_c_includes>:
 354:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
 358:	add	fp, sp, #28
 35c:	sub	sp, sp, #36	; 0x24
 360:	mov	r6, r0
 364:	ldr	r0, [r0, #208]	; 0xd0
 368:	vmov.i32	q8, #0	; 0x00000000
 36c:	add	r4, sp, #16
 370:	str	r2, [sp, #12]
 374:	str	r1, [sp, #8]
 378:	ldr	r8, [r0]
 37c:	vst1.64	{d16-d17}, [r4]
 380:	ldr	r0, [r0, #164]	; 0xa4
 384:	bl	0 <__flatcc_fb_copy_path>
 388:	mov	r1, r0
 38c:	mov	r0, r4
 390:	mov	r2, #1
 394:	bl	0 <str_set_insert_item>
 398:	cmp	r8, #0
 39c:	beq	460 <__flatcc_fb_gen_c_includes+0x10c>
 3a0:	add	r7, sp, #16
 3a4:	ldr	r2, [r6, #212]	; 0xd4
 3a8:	ldrd	r0, [r8, #8]
 3ac:	ldr	r2, [r2, #96]	; 0x60
 3b0:	bl	0 <__flatcc_fb_create_basename>
 3b4:	cmp	r0, #0
 3b8:	beq	47c <__flatcc_fb_gen_c_includes+0x128>
 3bc:	ldr	r8, [r8]
 3c0:	mov	r4, r0
 3c4:	bl	0 <__flatcc_fb_copy_path>
 3c8:	cmp	r0, #0
 3cc:	beq	47c <__flatcc_fb_gen_c_includes+0x128>
 3d0:	ldrb	r9, [r0]
 3d4:	mov	r5, r0
 3d8:	cmp	r9, #0
 3dc:	beq	408 <__flatcc_fb_gen_c_includes+0xb4>
 3e0:	add	sl, r5, #1
 3e4:	bl	0 <__ctype_toupper_loc>
 3e8:	ldr	r1, [r0]
 3ec:	uxtb	r2, r9
 3f0:	ldr	r1, [r1, r2, lsl #2]
 3f4:	strb	r1, [sl, #-1]
 3f8:	ldrb	r9, [sl]
 3fc:	add	sl, sl, #1
 400:	cmp	r9, #0
 404:	bne	3e8 <__flatcc_fb_gen_c_includes+0x94>
 408:	mov	r0, r7
 40c:	mov	r1, r5
 410:	mov	r2, #1
 414:	bl	0 <str_set_insert_item>
 418:	cmp	r0, #0
 41c:	beq	42c <__flatcc_fb_gen_c_includes+0xd8>
 420:	mov	r0, r5
 424:	bl	0 <free>
 428:	b	450 <__flatcc_fb_gen_c_includes+0xfc>
 42c:	ldr	r1, [sp, #8]
 430:	ldr	r0, [r6, #204]	; 0xcc
 434:	ldr	r3, [sp, #12]
 438:	mov	r2, r5
 43c:	str	r4, [sp]
 440:	str	r1, [sp, #4]
 444:	movw	r1, #0
 448:	movt	r1, #0
 44c:	bl	0 <fprintf>
 450:	mov	r0, r4
 454:	bl	0 <free>
 458:	cmp	r8, #0
 45c:	bne	3a4 <__flatcc_fb_gen_c_includes+0x50>
 460:	movw	r1, #0
 464:	add	r0, sp, #16
 468:	mov	r2, #0
 46c:	movt	r1, #0
 470:	bl	0 <str_set_destroy>
 474:	sub	sp, fp, #28
 478:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
 47c:	movw	r0, #0
 480:	mov	r1, #34	; 0x22
 484:	mov	r2, #1
 488:	movt	r0, #0
 48c:	ldr	r3, [r0]
 490:	movw	r0, #0
 494:	movt	r0, #0
 498:	bl	0 <fwrite>
 49c:	mov	r0, #1
 4a0:	bl	0 <exit>

000004a4 <_str_set_destructor>:
 4a4:	mov	r0, r1
 4a8:	b	0 <free>

000004ac <__flatcc_fb_copy_scope>:
 4ac:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
 4b0:	add	fp, sp, #24
 4b4:	mov	r4, r1
 4b8:	ldr	r1, [r0]
 4bc:	ldr	r5, [r0, #24]
 4c0:	mov	r6, r0
 4c4:	cmp	r1, #0
 4c8:	mov	r0, r5
 4cc:	beq	4f4 <__flatcc_fb_copy_scope+0x48>
 4d0:	mov	r0, r5
 4d4:	ldr	r2, [r1]
 4d8:	ldr	r1, [r1, #4]
 4dc:	ldr	r1, [r1, #4]
 4e0:	cmp	r2, #0
 4e4:	add	r0, r0, r1
 4e8:	mov	r1, r2
 4ec:	add	r0, r0, #1
 4f0:	bne	4d4 <__flatcc_fb_copy_scope+0x28>
 4f4:	cmp	r0, #101	; 0x65
 4f8:	bls	504 <__flatcc_fb_copy_scope+0x58>
 4fc:	mvn	r5, #0
 500:	b	554 <__flatcc_fb_copy_scope+0xa8>
 504:	ldr	r1, [r6, #20]
 508:	mov	r0, r4
 50c:	mov	r2, r5
 510:	bl	0 <memcpy>
 514:	ldr	r7, [r6]
 518:	cmp	r7, #0
 51c:	beq	550 <__flatcc_fb_copy_scope+0xa4>
 520:	mov	r8, #95	; 0x5f
 524:	ldr	r2, [r7, #4]
 528:	add	r0, r4, r5
 52c:	ldm	r2, {r1, r6}
 530:	mov	r2, r6
 534:	bl	0 <memcpy>
 538:	add	r0, r6, r5
 53c:	strb	r8, [r4, r0]
 540:	add	r5, r0, #1
 544:	ldr	r7, [r7]
 548:	cmp	r7, #0
 54c:	bne	524 <__flatcc_fb_copy_scope+0x78>
 550:	add	r4, r4, r5
 554:	mov	r0, #0
 558:	strb	r0, [r4]
 55c:	mov	r0, r5
 560:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

00000564 <__flatcc_fb_scoped_symbol_name>:
 564:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
 568:	add	fp, sp, #24
 56c:	mov	r6, r0
 570:	ldr	r0, [r2, #204]	; 0xcc
 574:	ldr	r8, [r1, #4]
 578:	mov	r4, r2
 57c:	cmp	r0, r6
 580:	beq	628 <__flatcc_fb_scoped_symbol_name+0xc4>
 584:	ldr	r1, [r6]
 588:	ldr	r5, [r6, #24]
 58c:	cmp	r1, #0
 590:	mov	r0, r5
 594:	beq	5bc <__flatcc_fb_scoped_symbol_name+0x58>
 598:	mov	r0, r5
 59c:	ldr	r2, [r1]
 5a0:	ldr	r1, [r1, #4]
 5a4:	ldr	r1, [r1, #4]
 5a8:	cmp	r2, #0
 5ac:	add	r0, r0, r1
 5b0:	mov	r1, r2
 5b4:	add	r0, r0, #1
 5b8:	bne	59c <__flatcc_fb_scoped_symbol_name+0x38>
 5bc:	cmp	r0, #102	; 0x66
 5c0:	bcs	694 <__flatcc_fb_scoped_symbol_name+0x130>
 5c4:	ldr	r1, [r6, #20]
 5c8:	mov	r0, r4
 5cc:	mov	r2, r5
 5d0:	bl	0 <memcpy>
 5d4:	ldr	r7, [r6]
 5d8:	cmp	r7, #0
 5dc:	beq	610 <__flatcc_fb_scoped_symbol_name+0xac>
 5e0:	mov	r9, #95	; 0x5f
 5e4:	ldr	r2, [r7, #4]
 5e8:	add	r0, r4, r5
 5ec:	ldm	r2, {r1, r6}
 5f0:	mov	r2, r6
 5f4:	bl	0 <memcpy>
 5f8:	add	r0, r6, r5
 5fc:	strb	r9, [r4, r0]
 600:	add	r5, r0, #1
 604:	ldr	r7, [r7]
 608:	cmp	r7, #0
 60c:	bne	5e4 <__flatcc_fb_scoped_symbol_name+0x80>
 610:	mov	r0, #0
 614:	cmn	r5, #1
 618:	strb	r0, [r4, r5]
 61c:	mov	r0, r4
 620:	str	r5, [r0, #208]!	; 0xd0
 624:	ble	6a8 <__flatcc_fb_scoped_symbol_name+0x144>
 628:	ldr	r2, [r8, #4]
 62c:	ldr	r0, [r4, #208]	; 0xd0
 630:	add	r1, r0, r2
 634:	str	r2, [r4, #212]	; 0xd4
 638:	cmp	r1, #203	; 0xcb
 63c:	str	r1, [r4, #216]	; 0xd8
 640:	bgt	660 <__flatcc_fb_scoped_symbol_name+0xfc>
 644:	ldr	r1, [r8]
 648:	add	r0, r4, r0
 64c:	bl	0 <memcpy>
 650:	ldr	r0, [r4, #216]	; 0xd8
 654:	mov	r1, #0
 658:	strb	r1, [r4, r0]
 65c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
 660:	movw	r0, #0
 664:	ldr	r3, [r8]
 668:	movw	r1, #0
 66c:	movt	r0, #0
 670:	movt	r1, #0
 674:	ldr	r0, [r0]
 678:	bl	0 <fprintf>
 67c:	ldr	r0, [r4, #208]	; 0xd0
 680:	mov	r1, #203	; 0xcb
 684:	rsb	r2, r0, #203	; 0xcb
 688:	str	r2, [r4, #212]	; 0xd4
 68c:	str	r1, [r4, #216]	; 0xd8
 690:	b	644 <__flatcc_fb_scoped_symbol_name+0xe0>
 694:	mov	r0, #0
 698:	mvn	r1, #0
 69c:	strb	r0, [r4]
 6a0:	mov	r0, r4
 6a4:	str	r1, [r0, #208]!	; 0xd0
 6a8:	mov	r1, #0
 6ac:	mov	r2, #1
 6b0:	str	r1, [r0]
 6b4:	movw	r0, #0
 6b8:	mov	r1, #28
 6bc:	movt	r0, #0
 6c0:	ldr	r3, [r0]
 6c4:	movw	r0, #0
 6c8:	movt	r0, #0
 6cc:	bl	0 <fwrite>
 6d0:	b	628 <__flatcc_fb_scoped_symbol_name+0xc4>

000006d4 <__flatcc_fb_codegen_common_c>:
 6d4:	push	{r4, r5, r6, sl, fp, lr}
 6d8:	add	fp, sp, #16
 6dc:	mov	r4, r0
 6e0:	bl	0 <strlen>
 6e4:	sub	r5, r0, #1
 6e8:	ldr	r0, [r4, #212]	; 0xd4
 6ec:	ldr	r1, [r0, #144]	; 0x90
 6f0:	cmp	r1, #0
 6f4:	beq	768 <__flatcc_fb_codegen_common_c+0x94>
 6f8:	movw	r3, #0
 6fc:	mov	r0, r4
 700:	mov	r1, r4
 704:	mov	r2, r5
 708:	movt	r3, #0
 70c:	bl	0 <__flatcc_fb_open_output_file>
 710:	mvn	r6, #0
 714:	cmp	r0, #0
 718:	bne	798 <__flatcc_fb_codegen_common_c+0xc4>
 71c:	mov	r0, r4
 720:	bl	0 <__flatcc_fb_gen_common_c_header>
 724:	mov	r6, r0
 728:	ldr	r0, [r4, #212]	; 0xd4
 72c:	ldr	r1, [r0, #124]	; 0x7c
 730:	cmp	r1, #0
 734:	bne	75c <__flatcc_fb_codegen_common_c+0x88>
 738:	ldr	r0, [r0, #108]	; 0x6c
 73c:	cmp	r0, #0
 740:	bne	75c <__flatcc_fb_codegen_common_c+0x88>
 744:	ldr	r0, [r4, #204]	; 0xcc
 748:	cmp	r0, #0
 74c:	beq	75c <__flatcc_fb_codegen_common_c+0x88>
 750:	bl	0 <fclose>
 754:	mov	r0, #0
 758:	str	r0, [r4, #204]	; 0xcc
 75c:	cmp	r6, #0
 760:	bne	798 <__flatcc_fb_codegen_common_c+0xc4>
 764:	ldr	r0, [r4, #212]	; 0xd4
 768:	ldr	r0, [r0, #148]	; 0x94
 76c:	cmp	r0, #0
 770:	beq	7c4 <__flatcc_fb_codegen_common_c+0xf0>
 774:	movw	r3, #0
 778:	mov	r0, r4
 77c:	mov	r1, r4
 780:	mov	r2, r5
 784:	movt	r3, #0
 788:	bl	0 <__flatcc_fb_open_output_file>
 78c:	mvn	r6, #0
 790:	cmp	r0, #0
 794:	beq	7a0 <__flatcc_fb_codegen_common_c+0xcc>
 798:	mov	r0, r6
 79c:	pop	{r4, r5, r6, sl, fp, pc}
 7a0:	mov	r0, r4
 7a4:	bl	0 <__flatcc_fb_gen_common_c_builder_header>
 7a8:	ldr	r0, [r4, #212]	; 0xd4
 7ac:	ldr	r1, [r0, #124]	; 0x7c
 7b0:	cmp	r1, #0
 7b4:	bne	7c4 <__flatcc_fb_codegen_common_c+0xf0>
 7b8:	ldr	r0, [r0, #108]	; 0x6c
 7bc:	cmp	r0, #0
 7c0:	beq	7d0 <__flatcc_fb_codegen_common_c+0xfc>
 7c4:	mov	r6, #0
 7c8:	mov	r0, r6
 7cc:	pop	{r4, r5, r6, sl, fp, pc}
 7d0:	ldr	r0, [r4, #204]	; 0xcc
 7d4:	mov	r6, #0
 7d8:	cmp	r0, #0
 7dc:	beq	798 <__flatcc_fb_codegen_common_c+0xc4>
 7e0:	bl	0 <fclose>
 7e4:	mov	r6, #0
 7e8:	str	r6, [r4, #204]	; 0xcc
 7ec:	mov	r0, r6
 7f0:	pop	{r4, r5, r6, sl, fp, pc}

000007f4 <__flatcc_fb_codegen_c>:
 7f4:	push	{r4, r5, r6, sl, fp, lr}
 7f8:	add	fp, sp, #16
 7fc:	str	r1, [r0, #208]	; 0xd0
 800:	mov	r4, r0
 804:	mov	r2, #0
 808:	ldr	r0, [r1, #60]	; 0x3c
 80c:	mov	r1, #0
 810:	bl	0 <fb_scope_table_find>
 814:	str	r0, [r4, #216]	; 0xd8
 818:	ldr	r0, [r4, #208]	; 0xd0
 81c:	ldr	r6, [r0, #160]	; 0xa0
 820:	mov	r0, r6
 824:	bl	0 <strlen>
 828:	ldr	r1, [r4, #212]	; 0xd4
 82c:	mov	r5, r0
 830:	ldr	r0, [r1, #152]	; 0x98
 834:	cmp	r0, #0
 838:	beq	8ac <__flatcc_fb_codegen_c+0xb8>
 83c:	movw	r3, #0
 840:	mov	r0, r4
 844:	mov	r1, r6
 848:	mov	r2, r5
 84c:	movt	r3, #0
 850:	bl	0 <__flatcc_fb_open_output_file>
 854:	mov	r1, r0
 858:	mvn	r0, #0
 85c:	cmp	r1, #0
 860:	bne	a74 <__flatcc_fb_codegen_c+0x280>
 864:	mov	r0, r4
 868:	bl	0 <__flatcc_fb_gen_c_reader>
 86c:	cmp	r0, #0
 870:	bne	a74 <__flatcc_fb_codegen_c+0x280>
 874:	ldr	r1, [r4, #212]	; 0xd4
 878:	ldr	r0, [r1, #124]	; 0x7c
 87c:	cmp	r0, #0
 880:	bne	8ac <__flatcc_fb_codegen_c+0xb8>
 884:	ldr	r0, [r1, #108]	; 0x6c
 888:	cmp	r0, #0
 88c:	bne	8ac <__flatcc_fb_codegen_c+0xb8>
 890:	ldr	r0, [r4, #204]	; 0xcc
 894:	cmp	r0, #0
 898:	beq	8ac <__flatcc_fb_codegen_c+0xb8>
 89c:	bl	0 <fclose>
 8a0:	mov	r0, #0
 8a4:	str	r0, [r4, #204]	; 0xcc
 8a8:	ldr	r1, [r4, #212]	; 0xd4
 8ac:	ldr	r0, [r1, #156]	; 0x9c
 8b0:	cmp	r0, #0
 8b4:	beq	92c <__flatcc_fb_codegen_c+0x138>
 8b8:	ldr	r0, [r4, #208]	; 0xd0
 8bc:	movw	r3, #0
 8c0:	mov	r2, r5
 8c4:	movt	r3, #0
 8c8:	ldr	r1, [r0, #160]	; 0xa0
 8cc:	mov	r0, r4
 8d0:	bl	0 <__flatcc_fb_open_output_file>
 8d4:	mov	r1, r0
 8d8:	mvn	r0, #0
 8dc:	cmp	r1, #0
 8e0:	bne	a74 <__flatcc_fb_codegen_c+0x280>
 8e4:	mov	r0, r4
 8e8:	bl	0 <__flatcc_fb_gen_c_builder>
 8ec:	cmp	r0, #0
 8f0:	bne	a74 <__flatcc_fb_codegen_c+0x280>
 8f4:	ldr	r1, [r4, #212]	; 0xd4
 8f8:	ldr	r0, [r1, #124]	; 0x7c
 8fc:	cmp	r0, #0
 900:	bne	92c <__flatcc_fb_codegen_c+0x138>
 904:	ldr	r0, [r1, #108]	; 0x6c
 908:	cmp	r0, #0
 90c:	bne	92c <__flatcc_fb_codegen_c+0x138>
 910:	ldr	r0, [r4, #204]	; 0xcc
 914:	cmp	r0, #0
 918:	beq	92c <__flatcc_fb_codegen_c+0x138>
 91c:	bl	0 <fclose>
 920:	mov	r0, #0
 924:	str	r0, [r4, #204]	; 0xcc
 928:	ldr	r1, [r4, #212]	; 0xd4
 92c:	ldr	r0, [r1, #160]	; 0xa0
 930:	cmp	r0, #0
 934:	beq	9ac <__flatcc_fb_codegen_c+0x1b8>
 938:	ldr	r0, [r4, #208]	; 0xd0
 93c:	movw	r3, #0
 940:	mov	r2, r5
 944:	movt	r3, #0
 948:	ldr	r1, [r0, #160]	; 0xa0
 94c:	mov	r0, r4
 950:	bl	0 <__flatcc_fb_open_output_file>
 954:	mov	r1, r0
 958:	mvn	r0, #0
 95c:	cmp	r1, #0
 960:	bne	a74 <__flatcc_fb_codegen_c+0x280>
 964:	mov	r0, r4
 968:	bl	0 <__flatcc_fb_gen_c_verifier>
 96c:	cmp	r0, #0
 970:	bne	a74 <__flatcc_fb_codegen_c+0x280>
 974:	ldr	r1, [r4, #212]	; 0xd4
 978:	ldr	r0, [r1, #124]	; 0x7c
 97c:	cmp	r0, #0
 980:	bne	9ac <__flatcc_fb_codegen_c+0x1b8>
 984:	ldr	r0, [r1, #108]	; 0x6c
 988:	cmp	r0, #0
 98c:	bne	9ac <__flatcc_fb_codegen_c+0x1b8>
 990:	ldr	r0, [r4, #204]	; 0xcc
 994:	cmp	r0, #0
 998:	beq	9ac <__flatcc_fb_codegen_c+0x1b8>
 99c:	bl	0 <fclose>
 9a0:	mov	r0, #0
 9a4:	str	r0, [r4, #204]	; 0xcc
 9a8:	ldr	r1, [r4, #212]	; 0xd4
 9ac:	ldr	r0, [r1, #164]	; 0xa4
 9b0:	cmp	r0, #0
 9b4:	beq	a2c <__flatcc_fb_codegen_c+0x238>
 9b8:	ldr	r0, [r4, #208]	; 0xd0
 9bc:	movw	r3, #0
 9c0:	mov	r2, r5
 9c4:	movt	r3, #0
 9c8:	ldr	r1, [r0, #160]	; 0xa0
 9cc:	mov	r0, r4
 9d0:	bl	0 <__flatcc_fb_open_output_file>
 9d4:	mov	r1, r0
 9d8:	mvn	r0, #0
 9dc:	cmp	r1, #0
 9e0:	bne	a74 <__flatcc_fb_codegen_c+0x280>
 9e4:	mov	r0, r4
 9e8:	bl	0 <__flatcc_fb_gen_c_json_parser>
 9ec:	cmp	r0, #0
 9f0:	bne	a74 <__flatcc_fb_codegen_c+0x280>
 9f4:	ldr	r1, [r4, #212]	; 0xd4
 9f8:	ldr	r0, [r1, #124]	; 0x7c
 9fc:	cmp	r0, #0
 a00:	bne	a2c <__flatcc_fb_codegen_c+0x238>
 a04:	ldr	r0, [r1, #108]	; 0x6c
 a08:	cmp	r0, #0
 a0c:	bne	a2c <__flatcc_fb_codegen_c+0x238>
 a10:	ldr	r0, [r4, #204]	; 0xcc
 a14:	cmp	r0, #0
 a18:	beq	a2c <__flatcc_fb_codegen_c+0x238>
 a1c:	bl	0 <fclose>
 a20:	mov	r0, #0
 a24:	str	r0, [r4, #204]	; 0xcc
 a28:	ldr	r1, [r4, #212]	; 0xd4
 a2c:	ldr	r0, [r1, #168]	; 0xa8
 a30:	cmp	r0, #0
 a34:	beq	a94 <__flatcc_fb_codegen_c+0x2a0>
 a38:	ldr	r0, [r4, #208]	; 0xd0
 a3c:	movw	r3, #0
 a40:	mov	r2, r5
 a44:	movt	r3, #0
 a48:	ldr	r1, [r0, #160]	; 0xa0
 a4c:	mov	r0, r4
 a50:	bl	0 <__flatcc_fb_open_output_file>
 a54:	mov	r1, r0
 a58:	mvn	r0, #0
 a5c:	cmp	r1, #0
 a60:	bne	a74 <__flatcc_fb_codegen_c+0x280>
 a64:	mov	r0, r4
 a68:	bl	0 <__flatcc_fb_gen_c_json_printer>
 a6c:	cmp	r0, #0
 a70:	beq	a78 <__flatcc_fb_codegen_c+0x284>
 a74:	pop	{r4, r5, r6, sl, fp, pc}
 a78:	ldr	r0, [r4, #212]	; 0xd4
 a7c:	ldr	r1, [r0, #124]	; 0x7c
 a80:	cmp	r1, #0
 a84:	bne	a94 <__flatcc_fb_codegen_c+0x2a0>
 a88:	ldr	r0, [r0, #108]	; 0x6c
 a8c:	cmp	r0, #0
 a90:	beq	a9c <__flatcc_fb_codegen_c+0x2a8>
 a94:	mov	r0, #0
 a98:	pop	{r4, r5, r6, sl, fp, pc}
 a9c:	ldr	r1, [r4, #204]	; 0xcc
 aa0:	mov	r0, #0
 aa4:	cmp	r1, #0
 aa8:	popeq	{r4, r5, r6, sl, fp, pc}
 aac:	mov	r0, r1
 ab0:	bl	0 <fclose>
 ab4:	mov	r0, #0
 ab8:	str	r0, [r4, #204]	; 0xcc
 abc:	pop	{r4, r5, r6, sl, fp, pc}
