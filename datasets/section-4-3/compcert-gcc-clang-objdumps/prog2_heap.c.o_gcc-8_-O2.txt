
../compcert-repos/prog2/CMakeFiles/MT2E1-2.dir/Extras/Miniteste2-Exemplo1/prob2/heap.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <heap_nova>:
   0:	strd	r4, [sp, #-16]!
   4:	mov	r5, r0
   8:	mov	r0, #12
   c:	str	r6, [sp, #8]
  10:	str	lr, [sp, #12]
  14:	bl	0 <malloc>
  18:	subs	r4, r0, #0
  1c:	beq	44 <heap_nova+0x44>
  20:	mov	r3, #0
  24:	mov	r0, r5
  28:	mov	r1, #4
  2c:	stm	r4, {r3, r5}
  30:	bl	0 <calloc>
  34:	cmp	r0, #0
  38:	mov	r3, r0
  3c:	str	r0, [r4, #8]
  40:	beq	58 <heap_nova+0x58>
  44:	mov	r0, r4
  48:	ldrd	r4, [sp]
  4c:	ldr	r6, [sp, #8]
  50:	add	sp, sp, #12
  54:	pop	{pc}		; (ldr pc, [sp], #4)
  58:	mov	r0, r4
  5c:	mov	r4, r3
  60:	bl	0 <free>
  64:	b	44 <heap_nova+0x44>

00000068 <heap_apaga>:
  68:	strd	r4, [sp, #-16]!
  6c:	subs	r5, r0, #0
  70:	str	r6, [sp, #8]
  74:	str	lr, [sp, #12]
  78:	beq	e0 <heap_apaga+0x78>
  7c:	ldr	r3, [r5]
  80:	ldr	r0, [r5, #8]
  84:	cmp	r3, #0
  88:	ble	c4 <heap_apaga+0x5c>
  8c:	mov	r4, #0
  90:	mov	r6, r4
  94:	ldr	r3, [r0, r4, lsl #2]
  98:	ldr	r0, [r3, #4]
  9c:	bl	0 <free>
  a0:	ldr	r3, [r5, #8]
  a4:	ldr	r0, [r3, r4, lsl #2]
  a8:	bl	0 <free>
  ac:	ldr	r3, [r5]
  b0:	ldr	r0, [r5, #8]
  b4:	str	r6, [r0, r4, lsl #2]
  b8:	add	r4, r4, #1
  bc:	cmp	r3, r4
  c0:	bgt	94 <heap_apaga+0x2c>
  c4:	bl	0 <free>
  c8:	mov	r0, r5
  cc:	ldrd	r4, [sp]
  d0:	ldr	r6, [sp, #8]
  d4:	ldr	lr, [sp, #12]
  d8:	add	sp, sp, #16
  dc:	b	0 <free>
  e0:	ldrd	r4, [sp]
  e4:	ldr	r6, [sp, #8]
  e8:	add	sp, sp, #12
  ec:	pop	{pc}		; (ldr pc, [sp], #4)

000000f0 <elemento_cria>:
  f0:	strd	r4, [sp, #-24]!	; 0xffffffe8
  f4:	mov	r5, r1
  f8:	strd	r6, [sp, #8]
  fc:	mov	r7, r0
 100:	mov	r0, #8
 104:	str	r8, [sp, #16]
 108:	str	lr, [sp, #20]
 10c:	bl	0 <malloc>
 110:	subs	r4, r0, #0
 114:	beq	150 <elemento_cria+0x60>
 118:	mov	r0, r5
 11c:	bl	0 <strlen>
 120:	add	r6, r0, #1
 124:	mov	r1, #1
 128:	mov	r0, r6
 12c:	bl	0 <calloc>
 130:	cmp	r0, #0
 134:	mov	r3, r0
 138:	str	r0, [r4, #4]
 13c:	beq	168 <elemento_cria+0x78>
 140:	mov	r2, r6
 144:	mov	r1, r5
 148:	bl	0 <memcpy>
 14c:	str	r7, [r4]
 150:	mov	r0, r4
 154:	ldrd	r4, [sp]
 158:	ldrd	r6, [sp, #8]
 15c:	ldr	r8, [sp, #16]
 160:	add	sp, sp, #20
 164:	pop	{pc}		; (ldr pc, [sp], #4)
 168:	mov	r0, r4
 16c:	mov	r4, r3
 170:	bl	0 <free>
 174:	b	150 <elemento_cria+0x60>

00000178 <heap_insere>:
 178:	ldr	ip, [r0]
 17c:	ldr	r3, [r0, #4]
 180:	cmp	ip, r3
 184:	blt	190 <heap_insere+0x18>
 188:	mov	r0, #0
 18c:	bx	lr
 190:	strd	r4, [sp, #-16]!
 194:	mov	r4, r0
 198:	mov	r0, r2
 19c:	str	r6, [sp, #8]
 1a0:	str	lr, [sp, #12]
 1a4:	bl	f0 <elemento_cria>
 1a8:	cmp	r0, #0
 1ac:	moveq	r0, #0
 1b0:	beq	244 <heap_insere+0xcc>
 1b4:	ldr	r3, [r4]
 1b8:	ldr	r2, [r4, #8]
 1bc:	add	r1, r3, #1
 1c0:	cmp	r3, #0
 1c4:	add	r5, r2, r3, lsl #2
 1c8:	str	r0, [r2, r3, lsl #2]
 1cc:	str	r1, [r4]
 1d0:	beq	240 <heap_insere+0xc8>
 1d4:	sub	r3, r3, #1
 1d8:	add	r3, r3, r3, lsr #31
 1dc:	asr	r3, r3, #1
 1e0:	ldr	r1, [r2, r3, lsl #2]
 1e4:	lsl	ip, r3, #2
 1e8:	add	r4, r2, ip
 1ec:	cmp	r1, #0
 1f0:	beq	240 <heap_insere+0xc8>
 1f4:	ldr	r6, [r0]
 1f8:	ldr	lr, [r1]
 1fc:	cmp	r6, lr
 200:	bge	240 <heap_insere+0xc8>
 204:	sub	lr, r3, #1
 208:	cmp	r3, #0
 20c:	str	r0, [r4]
 210:	add	lr, lr, lr, lsr #31
 214:	str	r1, [r5]
 218:	add	r5, r2, ip
 21c:	beq	240 <heap_insere+0xc8>
 220:	asr	r3, lr, #1
 224:	ldr	r0, [r2, ip]
 228:	ldr	r1, [r2, r3, lsl #2]
 22c:	lsl	ip, r3, #2
 230:	add	r4, r2, ip
 234:	cmp	r1, #0
 238:	cmpne	r0, #0
 23c:	bne	1f4 <heap_insere+0x7c>
 240:	mov	r0, #1
 244:	ldrd	r4, [sp]
 248:	ldr	r6, [sp, #8]
 24c:	add	sp, sp, #12
 250:	pop	{pc}		; (ldr pc, [sp], #4)

00000254 <heap_remove>:
 254:	strd	r4, [sp, #-32]!	; 0xffffffe0
 258:	subs	r4, r0, #0
 25c:	strd	r6, [sp, #8]
 260:	strd	r8, [sp, #16]
 264:	str	sl, [sp, #24]
 268:	str	lr, [sp, #28]
 26c:	beq	35c <heap_remove+0x108>
 270:	ldr	r3, [r4]
 274:	cmp	r3, #0
 278:	ble	35c <heap_remove+0x108>
 27c:	ldr	r3, [r4, #8]
 280:	ldr	r3, [r3]
 284:	mov	r0, r3
 288:	ldr	r6, [r3, #4]
 28c:	bl	0 <free>
 290:	ldr	lr, [r4]
 294:	mov	r1, #0
 298:	ldr	r3, [r4, #8]
 29c:	sub	lr, lr, #1
 2a0:	cmp	lr, #1
 2a4:	ldr	r2, [r3, lr, lsl #2]
 2a8:	str	lr, [r4]
 2ac:	str	r2, [r3]
 2b0:	str	r1, [r3, lr, lsl #2]
 2b4:	ble	340 <heap_remove+0xec>
 2b8:	mov	r2, #1
 2bc:	add	r0, r1, #1
 2c0:	lsl	r4, r1, #2
 2c4:	lsl	ip, r0, #1
 2c8:	add	r5, r3, r0, lsl #3
 2cc:	cmp	lr, ip
 2d0:	ble	2f8 <heap_remove+0xa4>
 2d4:	ldr	r5, [r5, #-4]
 2d8:	ldr	r0, [r3, r0, lsl #3]
 2dc:	cmp	r0, #0
 2e0:	cmpne	r5, #0
 2e4:	beq	2f8 <heap_remove+0xa4>
 2e8:	ldr	r7, [r0]
 2ec:	ldr	r0, [r5]
 2f0:	cmp	r7, r0
 2f4:	movlt	r2, ip
 2f8:	ldr	r5, [r3, r1, lsl #2]
 2fc:	lsl	ip, r2, #1
 300:	mov	r1, r2
 304:	lsl	r7, r2, #2
 308:	ldr	r0, [r3, r2, lsl #2]
 30c:	add	ip, ip, #1
 310:	mov	r2, ip
 314:	cmp	r5, #0
 318:	cmpne	r0, #0
 31c:	beq	340 <heap_remove+0xec>
 320:	ldr	r9, [r0]
 324:	ldr	r8, [r5]
 328:	cmp	r9, r8
 32c:	bge	340 <heap_remove+0xec>
 330:	cmp	lr, ip
 334:	str	r5, [r3, r7]
 338:	str	r0, [r3, r4]
 33c:	bgt	2bc <heap_remove+0x68>
 340:	mov	r0, r6
 344:	ldrd	r4, [sp]
 348:	ldrd	r6, [sp, #8]
 34c:	ldrd	r8, [sp, #16]
 350:	ldr	sl, [sp, #24]
 354:	add	sp, sp, #28
 358:	pop	{pc}		; (ldr pc, [sp], #4)
 35c:	mov	r6, #0
 360:	b	340 <heap_remove+0xec>

00000364 <mostraHeap>:
 364:	strd	r4, [sp, #-32]!	; 0xffffffe0
 368:	movw	r5, #0
 36c:	movt	r5, #0
 370:	strd	r6, [sp, #8]
 374:	mov	r7, r0
 378:	mov	r6, r1
 37c:	ldr	r3, [r7]
 380:	strd	r8, [sp, #16]
 384:	movw	r8, #0
 388:	movt	r8, #0
 38c:	str	sl, [sp, #24]
 390:	str	lr, [sp, #28]
 394:	cmp	r3, r6
 398:	ble	40c <mostraHeap+0xa8>
 39c:	lsl	r9, r6, #1
 3a0:	cmp	r6, #0
 3a4:	add	r1, r9, #1
 3a8:	ble	42c <mostraHeap+0xc8>
 3ac:	mov	r4, r6
 3b0:	mov	r3, #0
 3b4:	sub	r4, r4, #1
 3b8:	add	r3, r3, #1
 3bc:	asrs	r4, r4, #1
 3c0:	bne	3b4 <mostraHeap+0x50>
 3c4:	mov	r0, r7
 3c8:	add	sl, r3, r3, lsl #1
 3cc:	bl	364 <mostraHeap>
 3d0:	add	r4, r4, #1
 3d4:	mov	r0, r5
 3d8:	bl	0 <printf>
 3dc:	cmp	r4, sl
 3e0:	blt	3d0 <mostraHeap+0x6c>
 3e4:	ldr	r3, [r7, #8]
 3e8:	mov	r0, r8
 3ec:	ldr	r3, [r3, r6, lsl #2]
 3f0:	add	r6, r9, #2
 3f4:	ldr	r2, [r3]
 3f8:	ldr	r1, [r3, #4]
 3fc:	bl	0 <printf>
 400:	ldr	r3, [r7]
 404:	cmp	r3, r6
 408:	bgt	39c <mostraHeap+0x38>
 40c:	mov	r0, #10
 410:	ldrd	r4, [sp]
 414:	ldrd	r6, [sp, #8]
 418:	ldrd	r8, [sp, #16]
 41c:	ldr	sl, [sp, #24]
 420:	ldr	lr, [sp, #28]
 424:	add	sp, sp, #32
 428:	b	0 <putchar>
 42c:	mov	r0, r7
 430:	bl	364 <mostraHeap>
 434:	ldr	r3, [r7, #8]
 438:	movw	r0, #0
 43c:	movt	r0, #0
 440:	ldr	r3, [r3, r6, lsl #2]
 444:	ldr	r2, [r3]
 448:	ldr	r1, [r3, #4]
 44c:	bl	0 <printf>
 450:	add	r1, r9, #2
 454:	mov	r0, r7
 458:	bl	364 <mostraHeap>
 45c:	b	40c <mostraHeap+0xa8>

00000460 <menor_que>:
 460:	cmp	r1, #0
 464:	cmpne	r0, #0
 468:	beq	484 <menor_que+0x24>
 46c:	ldr	r0, [r0]
 470:	ldr	r3, [r1]
 474:	cmp	r0, r3
 478:	movge	r0, #0
 47c:	movlt	r0, #1
 480:	bx	lr
 484:	mov	r0, #0
 488:	bx	lr
