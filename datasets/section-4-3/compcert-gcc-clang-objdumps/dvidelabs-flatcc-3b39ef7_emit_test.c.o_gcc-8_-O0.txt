
../compcert-repos/dvidelabs-flatcc-3b39ef7/test/emit_test/CMakeFiles/emit_test.dir/emit_test.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <flatbuffers_uint8_cast_from_pe>:
       0:	push	{fp}		; (str fp, [sp, #-4]!)
       4:	add	fp, sp, #0
       8:	sub	sp, sp, #12
       c:	mov	r3, r0
      10:	strb	r3, [fp, #-5]
      14:	ldrb	r3, [fp, #-5]
      18:	mov	r0, r3
      1c:	add	sp, fp, #0
      20:	pop	{fp}		; (ldr fp, [sp], #4)
      24:	bx	lr

00000028 <flatbuffers_uint8_cast_to_pe>:
      28:	push	{fp}		; (str fp, [sp, #-4]!)
      2c:	add	fp, sp, #0
      30:	sub	sp, sp, #12
      34:	mov	r3, r0
      38:	strb	r3, [fp, #-5]
      3c:	ldrb	r3, [fp, #-5]
      40:	mov	r0, r3
      44:	add	sp, fp, #0
      48:	pop	{fp}		; (ldr fp, [sp], #4)
      4c:	bx	lr

00000050 <flatbuffers_uint8_read_from_pe>:
      50:	str	fp, [sp, #-8]!
      54:	str	lr, [sp, #4]
      58:	add	fp, sp, #4
      5c:	sub	sp, sp, #8
      60:	str	r0, [fp, #-8]
      64:	ldr	r3, [fp, #-8]
      68:	ldrb	r3, [r3]
      6c:	mov	r0, r3
      70:	bl	0 <flatbuffers_uint8_cast_from_pe>
      74:	mov	r3, r0
      78:	mov	r0, r3
      7c:	sub	sp, fp, #4
      80:	ldr	fp, [sp]
      84:	add	sp, sp, #4
      88:	pop	{pc}		; (ldr pc, [sp], #4)

0000008c <flatbuffers_int64_cast_from_pe>:
      8c:	push	{fp}		; (str fp, [sp, #-4]!)
      90:	add	fp, sp, #0
      94:	sub	sp, sp, #12
      98:	strd	r0, [fp, #-12]
      9c:	ldrd	r2, [fp, #-12]
      a0:	mov	r0, r2
      a4:	mov	r1, r3
      a8:	add	sp, fp, #0
      ac:	pop	{fp}		; (ldr fp, [sp], #4)
      b0:	bx	lr

000000b4 <flatbuffers_int64_cast_to_pe>:
      b4:	push	{fp}		; (str fp, [sp, #-4]!)
      b8:	add	fp, sp, #0
      bc:	sub	sp, sp, #12
      c0:	strd	r0, [fp, #-12]
      c4:	ldrd	r2, [fp, #-12]
      c8:	mov	r0, r2
      cc:	mov	r1, r3
      d0:	add	sp, fp, #0
      d4:	pop	{fp}		; (ldr fp, [sp], #4)
      d8:	bx	lr

000000dc <flatbuffers_int64_read_from_pe>:
      dc:	str	fp, [sp, #-8]!
      e0:	str	lr, [sp, #4]
      e4:	add	fp, sp, #4
      e8:	sub	sp, sp, #8
      ec:	str	r0, [fp, #-8]
      f0:	ldr	r3, [fp, #-8]
      f4:	ldrd	r2, [r3]
      f8:	mov	r0, r2
      fc:	mov	r1, r3
     100:	bl	8c <flatbuffers_int64_cast_from_pe>
     104:	mov	r2, r0
     108:	mov	r3, r1
     10c:	mov	r0, r2
     110:	mov	r1, r3
     114:	sub	sp, fp, #4
     118:	ldr	fp, [sp]
     11c:	add	sp, sp, #4
     120:	pop	{pc}		; (ldr pc, [sp], #4)

00000124 <flatbuffers_float_cast_from_pe>:
     124:	push	{fp}		; (str fp, [sp, #-4]!)
     128:	add	fp, sp, #0
     12c:	sub	sp, sp, #20
     130:	vstr	s0, [fp, #-16]
     134:	ldr	r3, [fp, #-16]
     138:	str	r3, [fp, #-8]
     13c:	ldr	r3, [fp, #-8]
     140:	str	r3, [fp, #-8]
     144:	ldr	r3, [fp, #-8]
     148:	vmov	s15, r3
     14c:	vmov.f32	s0, s15
     150:	add	sp, fp, #0
     154:	pop	{fp}		; (ldr fp, [sp], #4)
     158:	bx	lr

0000015c <flatbuffers_float_read_from_pe>:
     15c:	str	fp, [sp, #-8]!
     160:	str	lr, [sp, #4]
     164:	add	fp, sp, #4
     168:	sub	sp, sp, #8
     16c:	str	r0, [fp, #-8]
     170:	ldr	r3, [fp, #-8]
     174:	vldr	s15, [r3]
     178:	vmov.f32	s0, s15
     17c:	bl	124 <flatbuffers_float_cast_from_pe>
     180:	vmov.f32	s15, s0
     184:	vmov.f32	s0, s15
     188:	sub	sp, fp, #4
     18c:	ldr	fp, [sp]
     190:	add	sp, sp, #4
     194:	pop	{pc}		; (ldr pc, [sp], #4)

00000198 <__flatbuffers_uoffset_cast_from_pe>:
     198:	push	{fp}		; (str fp, [sp, #-4]!)
     19c:	add	fp, sp, #0
     1a0:	sub	sp, sp, #12
     1a4:	str	r0, [fp, #-8]
     1a8:	ldr	r3, [fp, #-8]
     1ac:	mov	r0, r3
     1b0:	add	sp, fp, #0
     1b4:	pop	{fp}		; (ldr fp, [sp], #4)
     1b8:	bx	lr

000001bc <__flatbuffers_uoffset_read_from_pe>:
     1bc:	str	fp, [sp, #-8]!
     1c0:	str	lr, [sp, #4]
     1c4:	add	fp, sp, #4
     1c8:	sub	sp, sp, #8
     1cc:	str	r0, [fp, #-8]
     1d0:	ldr	r3, [fp, #-8]
     1d4:	ldr	r3, [r3]
     1d8:	mov	r0, r3
     1dc:	bl	198 <__flatbuffers_uoffset_cast_from_pe>
     1e0:	mov	r3, r0
     1e4:	mov	r0, r3
     1e8:	sub	sp, fp, #4
     1ec:	ldr	fp, [sp]
     1f0:	add	sp, sp, #4
     1f4:	pop	{pc}		; (ldr pc, [sp], #4)

000001f8 <__flatbuffers_soffset_cast_from_pe>:
     1f8:	push	{fp}		; (str fp, [sp, #-4]!)
     1fc:	add	fp, sp, #0
     200:	sub	sp, sp, #12
     204:	str	r0, [fp, #-8]
     208:	ldr	r3, [fp, #-8]
     20c:	mov	r0, r3
     210:	add	sp, fp, #0
     214:	pop	{fp}		; (ldr fp, [sp], #4)
     218:	bx	lr

0000021c <__flatbuffers_soffset_read_from_pe>:
     21c:	str	fp, [sp, #-8]!
     220:	str	lr, [sp, #4]
     224:	add	fp, sp, #4
     228:	sub	sp, sp, #8
     22c:	str	r0, [fp, #-8]
     230:	ldr	r3, [fp, #-8]
     234:	ldr	r3, [r3]
     238:	mov	r0, r3
     23c:	bl	1f8 <__flatbuffers_soffset_cast_from_pe>
     240:	mov	r3, r0
     244:	mov	r0, r3
     248:	sub	sp, fp, #4
     24c:	ldr	fp, [sp]
     250:	add	sp, sp, #4
     254:	pop	{pc}		; (ldr pc, [sp], #4)

00000258 <__flatbuffers_voffset_cast_from_pe>:
     258:	push	{fp}		; (str fp, [sp, #-4]!)
     25c:	add	fp, sp, #0
     260:	sub	sp, sp, #12
     264:	mov	r3, r0
     268:	strh	r3, [fp, #-6]
     26c:	ldrh	r3, [fp, #-6]
     270:	mov	r0, r3
     274:	add	sp, fp, #0
     278:	pop	{fp}		; (ldr fp, [sp], #4)
     27c:	bx	lr

00000280 <__flatbuffers_voffset_read_from_pe>:
     280:	str	fp, [sp, #-8]!
     284:	str	lr, [sp, #4]
     288:	add	fp, sp, #4
     28c:	sub	sp, sp, #8
     290:	str	r0, [fp, #-8]
     294:	ldr	r3, [fp, #-8]
     298:	ldrh	r3, [r3]
     29c:	mov	r0, r3
     2a0:	bl	258 <__flatbuffers_voffset_cast_from_pe>
     2a4:	mov	r3, r0
     2a8:	mov	r0, r3
     2ac:	sub	sp, fp, #4
     2b0:	ldr	fp, [sp]
     2b4:	add	sp, sp, #4
     2b8:	pop	{pc}		; (ldr pc, [sp], #4)

000002bc <__flatbuffers_thash_cast_from_pe>:
     2bc:	push	{fp}		; (str fp, [sp, #-4]!)
     2c0:	add	fp, sp, #0
     2c4:	sub	sp, sp, #12
     2c8:	str	r0, [fp, #-8]
     2cc:	ldr	r3, [fp, #-8]
     2d0:	mov	r0, r3
     2d4:	add	sp, fp, #0
     2d8:	pop	{fp}		; (ldr fp, [sp], #4)
     2dc:	bx	lr

000002e0 <__flatbuffers_thash_cast_from_le>:
     2e0:	push	{fp}		; (str fp, [sp, #-4]!)
     2e4:	add	fp, sp, #0
     2e8:	sub	sp, sp, #12
     2ec:	str	r0, [fp, #-8]
     2f0:	ldr	r3, [fp, #-8]
     2f4:	mov	r0, r3
     2f8:	add	sp, fp, #0
     2fc:	pop	{fp}		; (ldr fp, [sp], #4)
     300:	bx	lr

00000304 <__flatbuffers_thash_read_from_pe>:
     304:	str	fp, [sp, #-8]!
     308:	str	lr, [sp, #4]
     30c:	add	fp, sp, #4
     310:	sub	sp, sp, #8
     314:	str	r0, [fp, #-8]
     318:	ldr	r3, [fp, #-8]
     31c:	ldr	r3, [r3]
     320:	mov	r0, r3
     324:	bl	2bc <__flatbuffers_thash_cast_from_pe>
     328:	mov	r3, r0
     32c:	mov	r0, r3
     330:	sub	sp, fp, #4
     334:	ldr	fp, [sp]
     338:	add	sp, sp, #4
     33c:	pop	{pc}		; (ldr pc, [sp], #4)

00000340 <flatbuffers_vec_len>:
     340:	str	fp, [sp, #-8]!
     344:	str	lr, [sp, #4]
     348:	add	fp, sp, #4
     34c:	sub	sp, sp, #8
     350:	str	r0, [fp, #-8]
     354:	ldr	r3, [fp, #-8]
     358:	cmp	r3, #0
     35c:	beq	378 <flatbuffers_vec_len+0x38>
     360:	ldr	r3, [fp, #-8]
     364:	sub	r3, r3, #4
     368:	mov	r0, r3
     36c:	bl	1bc <__flatbuffers_uoffset_read_from_pe>
     370:	mov	r3, r0
     374:	b	37c <flatbuffers_vec_len+0x3c>
     378:	mov	r3, #0
     37c:	mov	r0, r3
     380:	sub	sp, fp, #4
     384:	ldr	fp, [sp]
     388:	add	sp, sp, #4
     38c:	pop	{pc}		; (ldr pc, [sp], #4)

00000390 <flatbuffers_float_vec_len>:
     390:	str	fp, [sp, #-8]!
     394:	str	lr, [sp, #4]
     398:	add	fp, sp, #4
     39c:	sub	sp, sp, #8
     3a0:	str	r0, [fp, #-8]
     3a4:	ldr	r0, [fp, #-8]
     3a8:	bl	340 <flatbuffers_vec_len>
     3ac:	mov	r3, r0
     3b0:	mov	r0, r3
     3b4:	sub	sp, fp, #4
     3b8:	ldr	fp, [sp]
     3bc:	add	sp, sp, #4
     3c0:	pop	{pc}		; (ldr pc, [sp], #4)

000003c4 <flatbuffers_float_vec_at>:
     3c4:	str	fp, [sp, #-8]!
     3c8:	str	lr, [sp, #4]
     3cc:	add	fp, sp, #4
     3d0:	sub	sp, sp, #8
     3d4:	str	r0, [fp, #-8]
     3d8:	str	r1, [fp, #-12]
     3dc:	ldr	r0, [fp, #-8]
     3e0:	bl	340 <flatbuffers_vec_len>
     3e4:	mov	r2, r0
     3e8:	ldr	r3, [fp, #-12]
     3ec:	cmp	r3, r2
     3f0:	bcc	414 <flatbuffers_float_vec_at+0x50>
     3f4:	movw	r3, #0
     3f8:	movt	r3, #0
     3fc:	movw	r2, #403	; 0x193
     400:	movw	r1, #0
     404:	movt	r1, #0
     408:	movw	r0, #0
     40c:	movt	r0, #0
     410:	bl	0 <__assert_fail>
     414:	ldr	r3, [fp, #-12]
     418:	lsl	r3, r3, #2
     41c:	ldr	r2, [fp, #-8]
     420:	add	r3, r2, r3
     424:	mov	r0, r3
     428:	bl	15c <flatbuffers_float_read_from_pe>
     42c:	vmov.f32	s15, s0
     430:	vmov.f32	s0, s15
     434:	sub	sp, fp, #4
     438:	ldr	fp, [sp]
     43c:	add	sp, sp, #4
     440:	pop	{pc}		; (ldr pc, [sp], #4)

00000444 <flatbuffers_has_identifier>:
     444:	str	fp, [sp, #-8]!
     448:	str	lr, [sp, #4]
     44c:	add	fp, sp, #4
     450:	sub	sp, sp, #16
     454:	str	r0, [fp, #-16]
     458:	str	r1, [fp, #-20]	; 0xffffffec
     45c:	mov	r3, #0
     460:	str	r3, [fp, #-12]
     464:	ldr	r3, [fp, #-20]	; 0xffffffec
     468:	cmp	r3, #0
     46c:	bne	478 <flatbuffers_has_identifier+0x34>
     470:	mov	r3, #1
     474:	b	4dc <flatbuffers_has_identifier+0x98>
     478:	sub	r3, fp, #12
     47c:	mov	r2, #4
     480:	ldr	r1, [fp, #-20]	; 0xffffffec
     484:	mov	r0, r3
     488:	bl	0 <strncpy>
     48c:	ldr	r3, [fp, #-12]
     490:	mov	r0, r3
     494:	bl	2e0 <__flatbuffers_thash_cast_from_le>
     498:	mov	r3, r0
     49c:	str	r3, [fp, #-12]
     4a0:	ldr	r3, [fp, #-16]
     4a4:	add	r3, r3, #4
     4a8:	mov	r0, r3
     4ac:	bl	304 <__flatbuffers_thash_read_from_pe>
     4b0:	str	r0, [fp, #-8]
     4b4:	ldr	r3, [fp, #-12]
     4b8:	cmp	r3, #0
     4bc:	beq	4d0 <flatbuffers_has_identifier+0x8c>
     4c0:	ldr	r3, [fp, #-12]
     4c4:	ldr	r2, [fp, #-8]
     4c8:	cmp	r2, r3
     4cc:	bne	4d8 <flatbuffers_has_identifier+0x94>
     4d0:	mov	r3, #1
     4d4:	b	4dc <flatbuffers_has_identifier+0x98>
     4d8:	mov	r3, #0
     4dc:	mov	r0, r3
     4e0:	sub	sp, fp, #4
     4e4:	ldr	fp, [sp]
     4e8:	add	sp, sp, #4
     4ec:	pop	{pc}		; (ldr pc, [sp], #4)

000004f0 <main_as_root>:
     4f0:	str	fp, [sp, #-8]!
     4f4:	str	lr, [sp, #4]
     4f8:	add	fp, sp, #4
     4fc:	sub	sp, sp, #16
     500:	str	r0, [fp, #-16]
     504:	mov	r3, #0
     508:	str	r3, [fp, #-8]
     50c:	ldr	r3, [fp, #-16]
     510:	cmp	r3, #0
     514:	beq	548 <main_as_root+0x58>
     518:	ldr	r1, [fp, #-8]
     51c:	ldr	r0, [fp, #-16]
     520:	bl	444 <flatbuffers_has_identifier>
     524:	mov	r3, r0
     528:	cmp	r3, #0
     52c:	beq	548 <main_as_root+0x58>
     530:	ldr	r0, [fp, #-16]
     534:	bl	1bc <__flatbuffers_uoffset_read_from_pe>
     538:	mov	r2, r0
     53c:	ldr	r3, [fp, #-16]
     540:	add	r3, r3, r2
     544:	b	54c <main_as_root+0x5c>
     548:	mov	r3, #0
     54c:	mov	r0, r3
     550:	sub	sp, fp, #4
     554:	ldr	fp, [sp]
     558:	add	sp, sp, #4
     55c:	pop	{pc}		; (ldr pc, [sp], #4)

00000560 <main_time>:
     560:	str	fp, [sp, #-8]!
     564:	str	lr, [sp, #4]
     568:	add	fp, sp, #4
     56c:	sub	sp, sp, #16
     570:	str	r0, [fp, #-16]
     574:	mov	r3, #0
     578:	strh	r3, [fp, #-6]
     57c:	ldr	r3, [fp, #-16]
     580:	cmp	r3, #0
     584:	bne	5a8 <main_time+0x48>
     588:	movw	r3, #0
     58c:	movt	r3, #0
     590:	mov	r2, #41	; 0x29
     594:	movw	r1, #0
     598:	movt	r1, #0
     59c:	movw	r0, #0
     5a0:	movt	r0, #0
     5a4:	bl	0 <__assert_fail>
     5a8:	mov	r3, #0
     5ac:	strh	r3, [fp, #-8]
     5b0:	ldr	r0, [fp, #-16]
     5b4:	bl	21c <__flatbuffers_soffset_read_from_pe>
     5b8:	mov	r3, r0
     5bc:	rsb	r3, r3, #0
     5c0:	ldr	r2, [fp, #-16]
     5c4:	add	r3, r2, r3
     5c8:	str	r3, [fp, #-12]
     5cc:	ldr	r0, [fp, #-12]
     5d0:	bl	280 <__flatbuffers_voffset_read_from_pe>
     5d4:	mov	r3, r0
     5d8:	mov	r2, r3
     5dc:	ldrh	r3, [fp, #-8]
     5e0:	add	r3, r3, #3
     5e4:	lsl	r3, r3, #1
     5e8:	cmp	r2, r3
     5ec:	bcc	614 <main_time+0xb4>
     5f0:	ldrh	r3, [fp, #-8]
     5f4:	add	r3, r3, #2
     5f8:	lsl	r3, r3, #1
     5fc:	ldr	r2, [fp, #-12]
     600:	add	r3, r2, r3
     604:	mov	r0, r3
     608:	bl	280 <__flatbuffers_voffset_read_from_pe>
     60c:	mov	r3, r0
     610:	strh	r3, [fp, #-6]
     614:	ldrh	r3, [fp, #-6]
     618:	cmp	r3, #0
     61c:	beq	640 <main_time+0xe0>
     620:	ldrh	r3, [fp, #-6]
     624:	ldr	r2, [fp, #-16]
     628:	add	r3, r2, r3
     62c:	mov	r0, r3
     630:	bl	dc <flatbuffers_int64_read_from_pe>
     634:	mov	r2, r0
     638:	mov	r3, r1
     63c:	b	648 <main_time+0xe8>
     640:	mov	r2, #0
     644:	mov	r3, #0
     648:	mov	r0, r2
     64c:	mov	r1, r3
     650:	sub	sp, fp, #4
     654:	ldr	fp, [sp]
     658:	add	sp, sp, #4
     65c:	pop	{pc}		; (ldr pc, [sp], #4)

00000660 <main_device>:
     660:	str	fp, [sp, #-8]!
     664:	str	lr, [sp, #4]
     668:	add	fp, sp, #4
     66c:	sub	sp, sp, #16
     670:	str	r0, [fp, #-16]
     674:	mov	r3, #0
     678:	strh	r3, [fp, #-6]
     67c:	ldr	r3, [fp, #-16]
     680:	cmp	r3, #0
     684:	bne	6a8 <main_device+0x48>
     688:	movw	r3, #0
     68c:	movt	r3, #0
     690:	mov	r2, #42	; 0x2a
     694:	movw	r1, #0
     698:	movt	r1, #0
     69c:	movw	r0, #0
     6a0:	movt	r0, #0
     6a4:	bl	0 <__assert_fail>
     6a8:	mov	r3, #1
     6ac:	strh	r3, [fp, #-8]
     6b0:	ldr	r0, [fp, #-16]
     6b4:	bl	21c <__flatbuffers_soffset_read_from_pe>
     6b8:	mov	r3, r0
     6bc:	rsb	r3, r3, #0
     6c0:	ldr	r2, [fp, #-16]
     6c4:	add	r3, r2, r3
     6c8:	str	r3, [fp, #-12]
     6cc:	ldr	r0, [fp, #-12]
     6d0:	bl	280 <__flatbuffers_voffset_read_from_pe>
     6d4:	mov	r3, r0
     6d8:	mov	r2, r3
     6dc:	ldrh	r3, [fp, #-8]
     6e0:	add	r3, r3, #3
     6e4:	lsl	r3, r3, #1
     6e8:	cmp	r2, r3
     6ec:	bcc	714 <main_device+0xb4>
     6f0:	ldrh	r3, [fp, #-8]
     6f4:	add	r3, r3, #2
     6f8:	lsl	r3, r3, #1
     6fc:	ldr	r2, [fp, #-12]
     700:	add	r3, r2, r3
     704:	mov	r0, r3
     708:	bl	280 <__flatbuffers_voffset_read_from_pe>
     70c:	mov	r3, r0
     710:	strh	r3, [fp, #-6]
     714:	ldrh	r3, [fp, #-6]
     718:	cmp	r3, #0
     71c:	beq	73c <main_device+0xdc>
     720:	ldrh	r3, [fp, #-6]
     724:	ldr	r2, [fp, #-16]
     728:	add	r3, r2, r3
     72c:	mov	r0, r3
     730:	bl	50 <flatbuffers_uint8_read_from_pe>
     734:	mov	r3, r0
     738:	b	740 <main_device+0xe0>
     73c:	mov	r3, #0
     740:	mov	r0, r3
     744:	sub	sp, fp, #4
     748:	ldr	fp, [sp]
     74c:	add	sp, sp, #4
     750:	pop	{pc}		; (ldr pc, [sp], #4)

00000754 <main_samples>:
     754:	str	fp, [sp, #-8]!
     758:	str	lr, [sp, #4]
     75c:	add	fp, sp, #4
     760:	sub	sp, sp, #24
     764:	str	r0, [fp, #-24]	; 0xffffffe8
     768:	mov	r3, #0
     76c:	strh	r3, [fp, #-6]
     770:	ldr	r3, [fp, #-24]	; 0xffffffe8
     774:	cmp	r3, #0
     778:	bne	79c <main_samples+0x48>
     77c:	movw	r3, #0
     780:	movt	r3, #0
     784:	mov	r2, #43	; 0x2b
     788:	movw	r1, #0
     78c:	movt	r1, #0
     790:	movw	r0, #0
     794:	movt	r0, #0
     798:	bl	0 <__assert_fail>
     79c:	mov	r3, #2
     7a0:	strh	r3, [fp, #-8]
     7a4:	ldr	r0, [fp, #-24]	; 0xffffffe8
     7a8:	bl	21c <__flatbuffers_soffset_read_from_pe>
     7ac:	mov	r3, r0
     7b0:	rsb	r3, r3, #0
     7b4:	ldr	r2, [fp, #-24]	; 0xffffffe8
     7b8:	add	r3, r2, r3
     7bc:	str	r3, [fp, #-12]
     7c0:	ldr	r0, [fp, #-12]
     7c4:	bl	280 <__flatbuffers_voffset_read_from_pe>
     7c8:	mov	r3, r0
     7cc:	mov	r2, r3
     7d0:	ldrh	r3, [fp, #-8]
     7d4:	add	r3, r3, #3
     7d8:	lsl	r3, r3, #1
     7dc:	cmp	r2, r3
     7e0:	bcc	808 <main_samples+0xb4>
     7e4:	ldrh	r3, [fp, #-8]
     7e8:	add	r3, r3, #2
     7ec:	lsl	r3, r3, #1
     7f0:	ldr	r2, [fp, #-12]
     7f4:	add	r3, r2, r3
     7f8:	mov	r0, r3
     7fc:	bl	280 <__flatbuffers_voffset_read_from_pe>
     800:	mov	r3, r0
     804:	strh	r3, [fp, #-6]
     808:	ldrh	r3, [fp, #-6]
     80c:	cmp	r3, #0
     810:	beq	840 <main_samples+0xec>
     814:	ldrh	r3, [fp, #-6]
     818:	ldr	r2, [fp, #-24]	; 0xffffffe8
     81c:	add	r3, r2, r3
     820:	str	r3, [fp, #-16]
     824:	ldr	r0, [fp, #-16]
     828:	bl	1bc <__flatbuffers_uoffset_read_from_pe>
     82c:	mov	r3, r0
     830:	add	r3, r3, #4
     834:	ldr	r2, [fp, #-16]
     838:	add	r3, r2, r3
     83c:	b	844 <main_samples+0xf0>
     840:	mov	r3, #0
     844:	mov	r0, r3
     848:	sub	sp, fp, #4
     84c:	ldr	fp, [sp]
     850:	add	sp, sp, #4
     854:	pop	{pc}		; (ldr pc, [sp], #4)

00000858 <flatcc_emitter_get_buffer_size>:
     858:	push	{fp}		; (str fp, [sp, #-4]!)
     85c:	add	fp, sp, #0
     860:	sub	sp, sp, #12
     864:	str	r0, [fp, #-8]
     868:	ldr	r3, [fp, #-8]
     86c:	ldr	r3, [r3, #24]
     870:	mov	r0, r3
     874:	add	sp, fp, #0
     878:	pop	{fp}		; (ldr fp, [sp], #4)
     87c:	bx	lr

00000880 <flatcc_emitter_get_direct_buffer>:
     880:	push	{fp}		; (str fp, [sp, #-4]!)
     884:	add	fp, sp, #0
     888:	sub	sp, sp, #12
     88c:	str	r0, [fp, #-8]
     890:	str	r1, [fp, #-12]
     894:	ldr	r3, [fp, #-8]
     898:	ldr	r2, [r3]
     89c:	ldr	r3, [fp, #-8]
     8a0:	ldr	r3, [r3, #4]
     8a4:	cmp	r2, r3
     8a8:	bne	8d4 <flatcc_emitter_get_direct_buffer+0x54>
     8ac:	ldr	r3, [fp, #-12]
     8b0:	cmp	r3, #0
     8b4:	beq	8c8 <flatcc_emitter_get_direct_buffer+0x48>
     8b8:	ldr	r3, [fp, #-8]
     8bc:	ldr	r2, [r3, #24]
     8c0:	ldr	r3, [fp, #-12]
     8c4:	str	r2, [r3]
     8c8:	ldr	r3, [fp, #-8]
     8cc:	ldr	r3, [r3, #8]
     8d0:	b	8f0 <flatcc_emitter_get_direct_buffer+0x70>
     8d4:	ldr	r3, [fp, #-12]
     8d8:	cmp	r3, #0
     8dc:	beq	8ec <flatcc_emitter_get_direct_buffer+0x6c>
     8e0:	ldr	r3, [fp, #-12]
     8e4:	mov	r2, #0
     8e8:	str	r2, [r3]
     8ec:	mov	r3, #0
     8f0:	mov	r0, r3
     8f4:	add	sp, fp, #0
     8f8:	pop	{fp}		; (ldr fp, [sp], #4)
     8fc:	bx	lr

00000900 <flatbuffers_uint8_assign_to_pe>:
     900:	str	fp, [sp, #-8]!
     904:	str	lr, [sp, #4]
     908:	add	fp, sp, #4
     90c:	sub	sp, sp, #8
     910:	str	r0, [fp, #-8]
     914:	mov	r3, r1
     918:	strb	r3, [fp, #-9]
     91c:	ldrb	r3, [fp, #-9]
     920:	mov	r0, r3
     924:	bl	28 <flatbuffers_uint8_cast_to_pe>
     928:	mov	r3, r0
     92c:	mov	r2, r3
     930:	ldr	r3, [fp, #-8]
     934:	strb	r2, [r3]
     938:	ldr	r3, [fp, #-8]
     93c:	mov	r0, r3
     940:	sub	sp, fp, #4
     944:	ldr	fp, [sp]
     948:	add	sp, sp, #4
     94c:	pop	{pc}		; (ldr pc, [sp], #4)

00000950 <flatbuffers_int64_assign_to_pe>:
     950:	str	fp, [sp, #-8]!
     954:	str	lr, [sp, #4]
     958:	add	fp, sp, #4
     95c:	sub	sp, sp, #16
     960:	str	r0, [fp, #-8]
     964:	strd	r2, [fp, #-20]	; 0xffffffec
     968:	ldrd	r0, [fp, #-20]	; 0xffffffec
     96c:	bl	b4 <flatbuffers_int64_cast_to_pe>
     970:	mov	r2, r0
     974:	mov	r3, r1
     978:	ldr	r1, [fp, #-8]
     97c:	strd	r2, [r1]
     980:	ldr	r3, [fp, #-8]
     984:	mov	r0, r3
     988:	sub	sp, fp, #4
     98c:	ldr	fp, [sp]
     990:	add	sp, sp, #4
     994:	pop	{pc}		; (ldr pc, [sp], #4)

00000998 <flatbuffers_float_vec_create>:
     998:	str	fp, [sp, #-8]!
     99c:	str	lr, [sp, #4]
     9a0:	add	fp, sp, #4
     9a4:	sub	sp, sp, #24
     9a8:	str	r0, [fp, #-8]
     9ac:	str	r1, [fp, #-12]
     9b0:	str	r2, [fp, #-16]
     9b4:	mvn	r3, #-1073741824	; 0xc0000000
     9b8:	str	r3, [sp, #4]
     9bc:	mov	r3, #4
     9c0:	str	r3, [sp]
     9c4:	mov	r3, #4
     9c8:	ldr	r2, [fp, #-16]
     9cc:	ldr	r1, [fp, #-12]
     9d0:	ldr	r0, [fp, #-8]
     9d4:	bl	0 <flatcc_builder_create_vector>
     9d8:	mov	r3, r0
     9dc:	mov	r0, r3
     9e0:	sub	sp, fp, #4
     9e4:	ldr	fp, [sp]
     9e8:	add	sp, sp, #4
     9ec:	pop	{pc}		; (ldr pc, [sp], #4)

000009f0 <flatbuffers_buffer_start>:
     9f0:	str	fp, [sp, #-8]!
     9f4:	str	lr, [sp, #4]
     9f8:	add	fp, sp, #4
     9fc:	sub	sp, sp, #8
     a00:	str	r0, [fp, #-8]
     a04:	str	r1, [fp, #-12]
     a08:	mov	r3, #0
     a0c:	mov	r2, #0
     a10:	ldr	r1, [fp, #-12]
     a14:	ldr	r0, [fp, #-8]
     a18:	bl	0 <flatcc_builder_start_buffer>
     a1c:	mov	r3, r0
     a20:	mov	r0, r3
     a24:	sub	sp, fp, #4
     a28:	ldr	fp, [sp]
     a2c:	add	sp, sp, #4
     a30:	pop	{pc}		; (ldr pc, [sp], #4)

00000a34 <flatbuffers_buffer_end>:
     a34:	str	fp, [sp, #-8]!
     a38:	str	lr, [sp, #4]
     a3c:	add	fp, sp, #4
     a40:	sub	sp, sp, #8
     a44:	str	r0, [fp, #-8]
     a48:	str	r1, [fp, #-12]
     a4c:	ldr	r1, [fp, #-12]
     a50:	ldr	r0, [fp, #-8]
     a54:	bl	0 <flatcc_builder_end_buffer>
     a58:	mov	r3, r0
     a5c:	mov	r0, r3
     a60:	sub	sp, fp, #4
     a64:	ldr	fp, [sp]
     a68:	add	sp, sp, #4
     a6c:	pop	{pc}		; (ldr pc, [sp], #4)

00000a70 <main_start>:
     a70:	str	fp, [sp, #-8]!
     a74:	str	lr, [sp, #4]
     a78:	add	fp, sp, #4
     a7c:	sub	sp, sp, #8
     a80:	str	r0, [fp, #-8]
     a84:	mov	r1, #3
     a88:	ldr	r0, [fp, #-8]
     a8c:	bl	0 <flatcc_builder_start_table>
     a90:	mov	r3, r0
     a94:	mov	r0, r3
     a98:	sub	sp, fp, #4
     a9c:	ldr	fp, [sp]
     aa0:	add	sp, sp, #4
     aa4:	pop	{pc}		; (ldr pc, [sp], #4)

00000aa8 <main_end>:
     aa8:	str	fp, [sp, #-8]!
     aac:	str	lr, [sp, #4]
     ab0:	add	fp, sp, #4
     ab4:	sub	sp, sp, #8
     ab8:	str	r0, [fp, #-8]
     abc:	mov	r2, #0
     ac0:	movw	r1, #0
     ac4:	movt	r1, #0
     ac8:	ldr	r0, [fp, #-8]
     acc:	bl	0 <flatcc_builder_check_required>
     ad0:	mov	r3, r0
     ad4:	cmp	r3, #0
     ad8:	bne	afc <main_end+0x54>
     adc:	movw	r3, #0
     ae0:	movt	r3, #0
     ae4:	mov	r2, #21
     ae8:	movw	r1, #0
     aec:	movt	r1, #0
     af0:	movw	r0, #0
     af4:	movt	r0, #0
     af8:	bl	0 <__assert_fail>
     afc:	ldr	r0, [fp, #-8]
     b00:	bl	0 <flatcc_builder_end_table>
     b04:	mov	r3, r0
     b08:	mov	r0, r3
     b0c:	sub	sp, fp, #4
     b10:	ldr	fp, [sp]
     b14:	add	sp, sp, #4
     b18:	pop	{pc}		; (ldr pc, [sp], #4)

00000b1c <main_time_add>:
     b1c:	str	fp, [sp, #-8]!
     b20:	str	lr, [sp, #4]
     b24:	add	fp, sp, #4
     b28:	sub	sp, sp, #24
     b2c:	str	r0, [fp, #-16]
     b30:	strd	r2, [fp, #-28]	; 0xffffffe4
     b34:	ldrd	r2, [fp, #-28]	; 0xffffffe4
     b38:	orrs	r3, r2, r3
     b3c:	bne	b48 <main_time_add+0x2c>
     b40:	mov	r3, #0
     b44:	b	b84 <main_time_add+0x68>
     b48:	mov	r3, #8
     b4c:	mov	r2, #8
     b50:	mov	r1, #0
     b54:	ldr	r0, [fp, #-16]
     b58:	bl	0 <flatcc_builder_table_add>
     b5c:	str	r0, [fp, #-8]
     b60:	ldr	r3, [fp, #-8]
     b64:	cmp	r3, #0
     b68:	bne	b74 <main_time_add+0x58>
     b6c:	mvn	r3, #0
     b70:	b	b84 <main_time_add+0x68>
     b74:	ldrd	r2, [fp, #-28]	; 0xffffffe4
     b78:	ldr	r0, [fp, #-8]
     b7c:	bl	950 <flatbuffers_int64_assign_to_pe>
     b80:	mov	r3, #0
     b84:	mov	r0, r3
     b88:	sub	sp, fp, #4
     b8c:	ldr	fp, [sp]
     b90:	add	sp, sp, #4
     b94:	pop	{pc}		; (ldr pc, [sp], #4)

00000b98 <main_device_add>:
     b98:	str	fp, [sp, #-8]!
     b9c:	str	lr, [sp, #4]
     ba0:	add	fp, sp, #4
     ba4:	sub	sp, sp, #16
     ba8:	str	r0, [fp, #-16]
     bac:	mov	r3, r1
     bb0:	strb	r3, [fp, #-17]	; 0xffffffef
     bb4:	ldrb	r3, [fp, #-17]	; 0xffffffef
     bb8:	cmp	r3, #0
     bbc:	bne	bc8 <main_device_add+0x30>
     bc0:	mov	r3, #0
     bc4:	b	c08 <main_device_add+0x70>
     bc8:	mov	r3, #1
     bcc:	mov	r2, #1
     bd0:	mov	r1, #1
     bd4:	ldr	r0, [fp, #-16]
     bd8:	bl	0 <flatcc_builder_table_add>
     bdc:	str	r0, [fp, #-8]
     be0:	ldr	r3, [fp, #-8]
     be4:	cmp	r3, #0
     be8:	bne	bf4 <main_device_add+0x5c>
     bec:	mvn	r3, #0
     bf0:	b	c08 <main_device_add+0x70>
     bf4:	ldrb	r3, [fp, #-17]	; 0xffffffef
     bf8:	mov	r1, r3
     bfc:	ldr	r0, [fp, #-8]
     c00:	bl	900 <flatbuffers_uint8_assign_to_pe>
     c04:	mov	r3, #0
     c08:	mov	r0, r3
     c0c:	sub	sp, fp, #4
     c10:	ldr	fp, [sp]
     c14:	add	sp, sp, #4
     c18:	pop	{pc}		; (ldr pc, [sp], #4)

00000c1c <main_samples_add>:
     c1c:	str	fp, [sp, #-8]!
     c20:	str	lr, [sp, #4]
     c24:	add	fp, sp, #4
     c28:	sub	sp, sp, #16
     c2c:	str	r0, [fp, #-16]
     c30:	str	r1, [fp, #-20]	; 0xffffffec
     c34:	ldr	r3, [fp, #-20]	; 0xffffffec
     c38:	cmp	r3, #0
     c3c:	beq	c70 <main_samples_add+0x54>
     c40:	mov	r1, #2
     c44:	ldr	r0, [fp, #-16]
     c48:	bl	0 <flatcc_builder_table_add_offset>
     c4c:	str	r0, [fp, #-8]
     c50:	ldr	r3, [fp, #-8]
     c54:	cmp	r3, #0
     c58:	beq	c70 <main_samples_add+0x54>
     c5c:	ldr	r3, [fp, #-8]
     c60:	ldr	r2, [fp, #-20]	; 0xffffffec
     c64:	str	r2, [r3]
     c68:	mov	r3, #0
     c6c:	b	c74 <main_samples_add+0x58>
     c70:	mvn	r3, #0
     c74:	mov	r0, r3
     c78:	sub	sp, fp, #4
     c7c:	ldr	fp, [sp]
     c80:	add	sp, sp, #4
     c84:	pop	{pc}		; (ldr pc, [sp], #4)

00000c88 <main_create>:
     c88:	str	fp, [sp, #-8]!
     c8c:	str	lr, [sp, #4]
     c90:	add	fp, sp, #4
     c94:	sub	sp, sp, #16
     c98:	str	r0, [fp, #-8]
     c9c:	strd	r2, [fp, #-20]	; 0xffffffec
     ca0:	ldr	r0, [fp, #-8]
     ca4:	bl	a70 <main_start>
     ca8:	mov	r3, r0
     cac:	cmp	r3, #0
     cb0:	bne	d00 <main_create+0x78>
     cb4:	ldrd	r2, [fp, #-20]	; 0xffffffec
     cb8:	ldr	r0, [fp, #-8]
     cbc:	bl	b1c <main_time_add>
     cc0:	mov	r3, r0
     cc4:	cmp	r3, #0
     cc8:	bne	d00 <main_create+0x78>
     ccc:	ldr	r1, [fp, #8]
     cd0:	ldr	r0, [fp, #-8]
     cd4:	bl	c1c <main_samples_add>
     cd8:	mov	r3, r0
     cdc:	cmp	r3, #0
     ce0:	bne	d00 <main_create+0x78>
     ce4:	ldrb	r3, [fp, #4]
     ce8:	mov	r1, r3
     cec:	ldr	r0, [fp, #-8]
     cf0:	bl	b98 <main_device_add>
     cf4:	mov	r3, r0
     cf8:	cmp	r3, #0
     cfc:	beq	d08 <main_create+0x80>
     d00:	mov	r3, #0
     d04:	b	d14 <main_create+0x8c>
     d08:	ldr	r0, [fp, #-8]
     d0c:	bl	aa8 <main_end>
     d10:	mov	r3, r0
     d14:	mov	r0, r3
     d18:	sub	sp, fp, #4
     d1c:	ldr	fp, [sp]
     d20:	add	sp, sp, #4
     d24:	pop	{pc}		; (ldr pc, [sp], #4)

00000d28 <main_create_as_root>:
     d28:	str	fp, [sp, #-8]!
     d2c:	str	lr, [sp, #4]
     d30:	add	fp, sp, #4
     d34:	sub	sp, sp, #24
     d38:	str	r0, [fp, #-8]
     d3c:	strd	r2, [fp, #-20]	; 0xffffffec
     d40:	mov	r1, #0
     d44:	ldr	r0, [fp, #-8]
     d48:	bl	9f0 <flatbuffers_buffer_start>
     d4c:	mov	r3, r0
     d50:	cmp	r3, #0
     d54:	beq	d60 <main_create_as_root+0x38>
     d58:	mov	r3, #0
     d5c:	b	d90 <main_create_as_root+0x68>
     d60:	ldr	r3, [fp, #8]
     d64:	str	r3, [sp, #4]
     d68:	ldrb	r3, [fp, #4]
     d6c:	str	r3, [sp]
     d70:	ldrd	r2, [fp, #-20]	; 0xffffffec
     d74:	ldr	r0, [fp, #-8]
     d78:	bl	c88 <main_create>
     d7c:	mov	r3, r0
     d80:	mov	r1, r3
     d84:	ldr	r0, [fp, #-8]
     d88:	bl	a34 <flatbuffers_buffer_end>
     d8c:	mov	r3, r0
     d90:	mov	r0, r3
     d94:	sub	sp, fp, #4
     d98:	ldr	fp, [sp]
     d9c:	add	sp, sp, #4
     da0:	pop	{pc}		; (ldr pc, [sp], #4)

00000da4 <hexdump>:
     da4:	str	fp, [sp, #-8]!
     da8:	str	lr, [sp, #4]
     dac:	add	fp, sp, #4
     db0:	sub	sp, sp, #48	; 0x30
     db4:	str	r0, [fp, #-40]	; 0xffffffd8
     db8:	str	r1, [fp, #-44]	; 0xffffffd4
     dbc:	str	r2, [fp, #-48]	; 0xffffffd0
     dc0:	str	r3, [fp, #-52]	; 0xffffffcc
     dc4:	ldr	r3, [fp, #-44]	; 0xffffffd4
     dc8:	str	r3, [fp, #-12]
     dcc:	ldr	r3, [fp, #-40]	; 0xffffffd8
     dd0:	cmp	r3, #0
     dd4:	beq	dec <hexdump+0x48>
     dd8:	ldr	r2, [fp, #-40]	; 0xffffffd8
     ddc:	movw	r1, #0
     de0:	movt	r1, #0
     de4:	ldr	r0, [fp, #-52]	; 0xffffffcc
     de8:	bl	0 <fprintf>
     dec:	mov	r3, #0
     df0:	str	r3, [fp, #-8]
     df4:	b	f1c <hexdump+0x178>
     df8:	ldr	r3, [fp, #-8]
     dfc:	and	r3, r3, #15
     e00:	cmp	r3, #0
     e04:	bne	e44 <hexdump+0xa0>
     e08:	ldr	r3, [fp, #-8]
     e0c:	cmp	r3, #0
     e10:	beq	e2c <hexdump+0x88>
     e14:	sub	r3, fp, #32
     e18:	mov	r2, r3
     e1c:	movw	r1, #0
     e20:	movt	r1, #0
     e24:	ldr	r0, [fp, #-52]	; 0xffffffcc
     e28:	bl	0 <fprintf>
     e2c:	ldr	r2, [fp, #-8]
     e30:	movw	r1, #0
     e34:	movt	r1, #0
     e38:	ldr	r0, [fp, #-52]	; 0xffffffcc
     e3c:	bl	0 <fprintf>
     e40:	b	e60 <hexdump+0xbc>
     e44:	ldr	r3, [fp, #-8]
     e48:	and	r3, r3, #7
     e4c:	cmp	r3, #0
     e50:	bne	e60 <hexdump+0xbc>
     e54:	ldr	r1, [fp, #-52]	; 0xffffffcc
     e58:	mov	r0, #32
     e5c:	bl	0 <fputc>
     e60:	ldr	r2, [fp, #-12]
     e64:	ldr	r3, [fp, #-8]
     e68:	add	r3, r2, r3
     e6c:	ldrb	r3, [r3]
     e70:	mov	r2, r3
     e74:	movw	r1, #0
     e78:	movt	r1, #0
     e7c:	ldr	r0, [fp, #-52]	; 0xffffffcc
     e80:	bl	0 <fprintf>
     e84:	ldr	r2, [fp, #-12]
     e88:	ldr	r3, [fp, #-8]
     e8c:	add	r3, r2, r3
     e90:	ldrb	r3, [r3]
     e94:	cmp	r3, #31
     e98:	bls	eb4 <hexdump+0x110>
     e9c:	ldr	r2, [fp, #-12]
     ea0:	ldr	r3, [fp, #-8]
     ea4:	add	r3, r2, r3
     ea8:	ldrb	r3, [r3]
     eac:	cmp	r3, #126	; 0x7e
     eb0:	bls	ed0 <hexdump+0x12c>
     eb4:	ldr	r3, [fp, #-8]
     eb8:	and	r3, r3, #15
     ebc:	sub	r2, fp, #4
     ec0:	add	r3, r2, r3
     ec4:	mov	r2, #46	; 0x2e
     ec8:	strb	r2, [r3, #-28]	; 0xffffffe4
     ecc:	b	ef4 <hexdump+0x150>
     ed0:	ldr	r2, [fp, #-12]
     ed4:	ldr	r3, [fp, #-8]
     ed8:	add	r2, r2, r3
     edc:	ldr	r3, [fp, #-8]
     ee0:	and	r3, r3, #15
     ee4:	ldrb	r2, [r2]
     ee8:	sub	r1, fp, #4
     eec:	add	r3, r1, r3
     ef0:	strb	r2, [r3, #-28]	; 0xffffffe4
     ef4:	ldr	r3, [fp, #-8]
     ef8:	and	r3, r3, #15
     efc:	add	r3, r3, #1
     f00:	sub	r2, fp, #4
     f04:	add	r3, r2, r3
     f08:	mov	r2, #0
     f0c:	strb	r2, [r3, #-28]	; 0xffffffe4
     f10:	ldr	r3, [fp, #-8]
     f14:	add	r3, r3, #1
     f18:	str	r3, [fp, #-8]
     f1c:	ldr	r2, [fp, #-8]
     f20:	ldr	r3, [fp, #-48]	; 0xffffffd0
     f24:	cmp	r2, r3
     f28:	bcc	df8 <hexdump+0x54>
     f2c:	b	f54 <hexdump+0x1b0>
     f30:	ldr	r3, [fp, #-52]	; 0xffffffcc
     f34:	mov	r2, #3
     f38:	mov	r1, #1
     f3c:	movw	r0, #0
     f40:	movt	r0, #0
     f44:	bl	0 <fwrite>
     f48:	ldr	r3, [fp, #-8]
     f4c:	add	r3, r3, #1
     f50:	str	r3, [fp, #-8]
     f54:	ldr	r3, [fp, #-8]
     f58:	and	r3, r3, #15
     f5c:	cmp	r3, #0
     f60:	bne	f30 <hexdump+0x18c>
     f64:	sub	r3, fp, #32
     f68:	mov	r2, r3
     f6c:	movw	r1, #0
     f70:	movt	r1, #0
     f74:	ldr	r0, [fp, #-52]	; 0xffffffcc
     f78:	bl	0 <fprintf>
     f7c:	nop	{0}
     f80:	sub	sp, fp, #4
     f84:	ldr	fp, [sp]
     f88:	add	sp, sp, #4
     f8c:	pop	{pc}		; (ldr pc, [sp], #4)

00000f90 <dbg_emitter>:
     f90:	str	fp, [sp, #-8]!
     f94:	str	lr, [sp, #4]
     f98:	add	fp, sp, #4
     f9c:	sub	sp, sp, #24
     fa0:	str	r0, [fp, #-16]
     fa4:	str	r1, [fp, #-20]	; 0xffffffec
     fa8:	str	r2, [fp, #-24]	; 0xffffffe8
     fac:	str	r3, [fp, #-28]	; 0xffffffe4
     fb0:	ldr	r3, [fp, #4]
     fb4:	ldr	r2, [fp, #-28]	; 0xffffffe4
     fb8:	ldr	r1, [fp, #-24]	; 0xffffffe8
     fbc:	movw	r0, #0
     fc0:	movt	r0, #0
     fc4:	bl	0 <printf>
     fc8:	mov	r3, #0
     fcc:	str	r3, [fp, #-8]
     fd0:	b	1094 <dbg_emitter+0x104>
     fd4:	ldr	r3, [fp, #-8]
     fd8:	lsl	r3, r3, #3
     fdc:	ldr	r2, [fp, #-20]	; 0xffffffec
     fe0:	add	r3, r2, r3
     fe4:	ldr	r2, [r3]
     fe8:	movw	r3, #0
     fec:	movt	r3, #0
     ff0:	cmp	r2, r3
     ff4:	bne	1020 <dbg_emitter+0x90>
     ff8:	ldr	r3, [fp, #-8]
     ffc:	lsl	r3, r3, #3
    1000:	ldr	r2, [fp, #-20]	; 0xffffffec
    1004:	add	r3, r2, r3
    1008:	ldr	r3, [r3, #4]
    100c:	mov	r2, r3
    1010:	ldr	r1, [fp, #-28]	; 0xffffffe4
    1014:	movw	r0, #0
    1018:	movt	r0, #0
    101c:	bl	0 <printf>
    1020:	ldr	r3, [fp, #-8]
    1024:	lsl	r3, r3, #3
    1028:	ldr	r2, [fp, #-20]	; 0xffffffec
    102c:	add	r3, r2, r3
    1030:	ldr	r3, [r3]
    1034:	cmp	r3, #0
    1038:	bne	1064 <dbg_emitter+0xd4>
    103c:	ldr	r3, [fp, #-8]
    1040:	lsl	r3, r3, #3
    1044:	ldr	r2, [fp, #-20]	; 0xffffffec
    1048:	add	r3, r2, r3
    104c:	ldr	r3, [r3, #4]
    1050:	mov	r2, r3
    1054:	ldr	r1, [fp, #-28]	; 0xffffffe4
    1058:	movw	r0, #0
    105c:	movt	r0, #0
    1060:	bl	0 <printf>
    1064:	ldr	r3, [fp, #-8]
    1068:	lsl	r3, r3, #3
    106c:	ldr	r2, [fp, #-20]	; 0xffffffec
    1070:	add	r3, r2, r3
    1074:	ldr	r3, [r3, #4]
    1078:	mov	r2, r3
    107c:	ldr	r3, [fp, #-28]	; 0xffffffe4
    1080:	add	r3, r3, r2
    1084:	str	r3, [fp, #-28]	; 0xffffffe4
    1088:	ldr	r3, [fp, #-8]
    108c:	add	r3, r3, #1
    1090:	str	r3, [fp, #-8]
    1094:	ldr	r2, [fp, #-8]
    1098:	ldr	r3, [fp, #-24]	; 0xffffffe8
    109c:	cmp	r2, r3
    10a0:	blt	fd4 <dbg_emitter+0x44>
    10a4:	mov	r3, #0
    10a8:	mov	r0, r3
    10ac:	sub	sp, fp, #4
    10b0:	ldr	fp, [sp]
    10b4:	add	sp, sp, #4
    10b8:	pop	{pc}		; (ldr pc, [sp], #4)

000010bc <debug_test>:
    10bc:	str	fp, [sp, #-8]!
    10c0:	str	lr, [sp, #4]
    10c4:	add	fp, sp, #4
    10c8:	sub	sp, sp, #288	; 0x120
    10cc:	sub	r1, fp, #280	; 0x118
    10d0:	mov	r2, #0
    10d4:	mov	r3, #0
    10d8:	strd	r2, [r1]
    10dc:	strd	r2, [r1, #8]
    10e0:	strd	r2, [r1, #16]
    10e4:	strd	r2, [r1, #24]
    10e8:	strd	r2, [r1, #32]
    10ec:	sub	r3, fp, #240	; 0xf0
    10f0:	str	r3, [fp, #-8]
    10f4:	movw	r0, #0
    10f8:	movt	r0, #0
    10fc:	bl	0 <puts>
    1100:	mov	r3, #0
    1104:	str	r3, [sp]
    1108:	mov	r3, #0
    110c:	mov	r2, #0
    1110:	movw	r1, #0
    1114:	movt	r1, #0
    1118:	ldr	r0, [fp, #-8]
    111c:	bl	0 <flatcc_builder_custom_init>
    1120:	sub	r3, fp, #280	; 0x118
    1124:	mov	r2, #10
    1128:	mov	r1, r3
    112c:	ldr	r0, [fp, #-8]
    1130:	bl	998 <flatbuffers_float_vec_create>
    1134:	mov	r3, r0
    1138:	str	r3, [sp, #4]
    113c:	mov	r3, #1
    1140:	str	r3, [sp]
    1144:	mov	r2, #42	; 0x2a
    1148:	mov	r3, #0
    114c:	ldr	r0, [fp, #-8]
    1150:	bl	d28 <main_create_as_root>
    1154:	ldr	r0, [fp, #-8]
    1158:	bl	0 <flatcc_builder_clear>
    115c:	mov	r3, #0
    1160:	mov	r0, r3
    1164:	sub	sp, fp, #4
    1168:	ldr	fp, [sp]
    116c:	add	sp, sp, #4
    1170:	pop	{pc}		; (ldr pc, [sp], #4)

00001174 <emit_test>:
    1174:	str	fp, [sp, #-8]!
    1178:	str	lr, [sp, #4]
    117c:	add	fp, sp, #4
    1180:	sub	sp, sp, #352	; 0x160
    1184:	movw	r2, #0
    1188:	movt	r2, #0
    118c:	sub	r3, fp, #96	; 0x60
    1190:	ldrd	r0, [r2]
    1194:	strd	r0, [r3]
    1198:	ldrd	r0, [r2, #8]
    119c:	strd	r0, [r3, #8]
    11a0:	ldrd	r0, [r2, #16]
    11a4:	strd	r0, [r3, #16]
    11a8:	ldrd	r0, [r2, #24]
    11ac:	strd	r0, [r3, #24]
    11b0:	ldrd	r0, [r2, #32]
    11b4:	strd	r0, [r3, #32]
    11b8:	ldrd	r0, [r2, #40]	; 0x28
    11bc:	strd	r0, [r3, #40]	; 0x28
    11c0:	ldrd	r0, [r2, #48]	; 0x30
    11c4:	strd	r0, [r3, #48]	; 0x30
    11c8:	ldrh	r1, [r2, #56]	; 0x38
    11cc:	strh	r1, [r3, #56]	; 0x38
    11d0:	ldrb	r2, [r2, #58]	; 0x3a
    11d4:	strb	r2, [r3, #58]	; 0x3a
    11d8:	movw	r3, #0
    11dc:	movt	r3, #0
    11e0:	sub	r1, fp, #348	; 0x15c
    11e4:	mov	r0, r3
    11e8:	ldrd	r2, [r0]
    11ec:	strd	r2, [r1]
    11f0:	ldrd	r2, [r0, #8]
    11f4:	strd	r2, [r1, #8]
    11f8:	sub	r3, fp, #332	; 0x14c
    11fc:	str	r3, [fp, #-8]
    1200:	ldr	r0, [fp, #-8]
    1204:	bl	0 <flatcc_builder_init>
    1208:	ldr	r0, [fp, #-8]
    120c:	bl	0 <flatcc_builder_get_emit_context>
    1210:	str	r0, [fp, #-12]
    1214:	sub	r3, fp, #348	; 0x15c
    1218:	mov	r2, #4
    121c:	mov	r1, r3
    1220:	ldr	r0, [fp, #-8]
    1224:	bl	998 <flatbuffers_float_vec_create>
    1228:	str	r0, [fp, #-16]
    122c:	ldr	r3, [fp, #-16]
    1230:	str	r3, [sp, #4]
    1234:	mov	r3, #1
    1238:	str	r3, [sp]
    123c:	mov	r2, #42	; 0x2a
    1240:	mov	r3, #0
    1244:	ldr	r0, [fp, #-8]
    1248:	bl	d28 <main_create_as_root>
    124c:	sub	r3, fp, #100	; 0x64
    1250:	mov	r1, r3
    1254:	ldr	r0, [fp, #-12]
    1258:	bl	880 <flatcc_emitter_get_direct_buffer>
    125c:	str	r0, [fp, #-20]	; 0xffffffec
    1260:	ldr	r3, [fp, #-20]	; 0xffffffec
    1264:	cmp	r3, #0
    1268:	bne	1274 <emit_test+0x100>
    126c:	mvn	r3, #0
    1270:	b	14d8 <emit_test+0x364>
    1274:	ldr	r0, [fp, #-12]
    1278:	bl	858 <flatcc_emitter_get_buffer_size>
    127c:	mov	r2, r0
    1280:	ldr	r3, [fp, #-100]	; 0xffffff9c
    1284:	cmp	r2, r3
    1288:	beq	12ac <emit_test+0x138>
    128c:	movw	r3, #0
    1290:	movt	r3, #0
    1294:	mov	r2, #100	; 0x64
    1298:	movw	r1, #0
    129c:	movt	r1, #0
    12a0:	movw	r0, #0
    12a4:	movt	r0, #0
    12a8:	bl	0 <__assert_fail>
    12ac:	ldr	r0, [fp, #-8]
    12b0:	bl	0 <flatcc_builder_get_buffer_size>
    12b4:	mov	r2, r0
    12b8:	ldr	r3, [fp, #-100]	; 0xffffff9c
    12bc:	cmp	r2, r3
    12c0:	beq	12e4 <emit_test+0x170>
    12c4:	movw	r3, #0
    12c8:	movt	r3, #0
    12cc:	mov	r2, #101	; 0x65
    12d0:	movw	r1, #0
    12d4:	movt	r1, #0
    12d8:	movw	r0, #0
    12dc:	movt	r0, #0
    12e0:	bl	0 <__assert_fail>
    12e4:	movw	r3, #0
    12e8:	movt	r3, #0
    12ec:	ldr	r3, [r3]
    12f0:	ldr	r2, [fp, #-100]	; 0xffffff9c
    12f4:	movw	r1, #0
    12f8:	movt	r1, #0
    12fc:	mov	r0, r3
    1300:	bl	0 <fprintf>
    1304:	ldr	r2, [fp, #-100]	; 0xffffff9c
    1308:	movw	r3, #0
    130c:	movt	r3, #0
    1310:	ldr	r3, [r3]
    1314:	ldr	r1, [fp, #-20]	; 0xffffffec
    1318:	movw	r0, #0
    131c:	movt	r0, #0
    1320:	bl	da4 <hexdump>
    1324:	ldr	r3, [fp, #-100]	; 0xffffff9c
    1328:	cmp	r3, #58	; 0x3a
    132c:	beq	1350 <emit_test+0x1dc>
    1330:	movw	r3, #0
    1334:	movt	r3, #0
    1338:	mov	r2, #106	; 0x6a
    133c:	movw	r1, #0
    1340:	movt	r1, #0
    1344:	movw	r0, #0
    1348:	movt	r0, #0
    134c:	bl	0 <__assert_fail>
    1350:	ldr	r3, [fp, #-100]	; 0xffffff9c
    1354:	cmp	r3, #58	; 0x3a
    1358:	beq	137c <emit_test+0x208>
    135c:	movw	r3, #0
    1360:	movt	r3, #0
    1364:	mov	r2, #107	; 0x6b
    1368:	movw	r1, #0
    136c:	movt	r1, #0
    1370:	movw	r0, #0
    1374:	movt	r0, #0
    1378:	bl	0 <__assert_fail>
    137c:	ldr	r2, [fp, #-100]	; 0xffffff9c
    1380:	sub	r3, fp, #96	; 0x60
    1384:	mov	r1, r3
    1388:	ldr	r0, [fp, #-20]	; 0xffffffec
    138c:	bl	0 <memcmp>
    1390:	mov	r3, r0
    1394:	cmp	r3, #0
    1398:	beq	13bc <emit_test+0x248>
    139c:	movw	r3, #0
    13a0:	movt	r3, #0
    13a4:	mov	r2, #108	; 0x6c
    13a8:	movw	r1, #0
    13ac:	movt	r1, #0
    13b0:	movw	r0, #0
    13b4:	movt	r0, #0
    13b8:	bl	0 <__assert_fail>
    13bc:	ldr	r0, [fp, #-20]	; 0xffffffec
    13c0:	bl	4f0 <main_as_root>
    13c4:	str	r0, [fp, #-24]	; 0xffffffe8
    13c8:	ldr	r0, [fp, #-24]	; 0xffffffe8
    13cc:	bl	560 <main_time>
    13d0:	mov	r2, r0
    13d4:	mov	r3, r1
    13d8:	strd	r2, [fp, #-36]	; 0xffffffdc
    13dc:	ldrd	r2, [fp, #-36]	; 0xffffffdc
    13e0:	cmp	r3, #0
    13e4:	cmpeq	r2, #42	; 0x2a
    13e8:	beq	140c <emit_test+0x298>
    13ec:	movw	r3, #0
    13f0:	movt	r3, #0
    13f4:	mov	r2, #112	; 0x70
    13f8:	movw	r1, #0
    13fc:	movt	r1, #0
    1400:	movw	r0, #0
    1404:	movt	r0, #0
    1408:	bl	0 <__assert_fail>
    140c:	ldr	r0, [fp, #-24]	; 0xffffffe8
    1410:	bl	660 <main_device>
    1414:	mov	r3, r0
    1418:	cmp	r3, #1
    141c:	beq	1440 <emit_test+0x2cc>
    1420:	movw	r3, #0
    1424:	movt	r3, #0
    1428:	mov	r2, #113	; 0x71
    142c:	movw	r1, #0
    1430:	movt	r1, #0
    1434:	movw	r0, #0
    1438:	movt	r0, #0
    143c:	bl	0 <__assert_fail>
    1440:	ldr	r0, [fp, #-24]	; 0xffffffe8
    1444:	bl	754 <main_samples>
    1448:	mov	r3, r0
    144c:	mov	r0, r3
    1450:	bl	390 <flatbuffers_float_vec_len>
    1454:	mov	r3, r0
    1458:	cmp	r3, #4
    145c:	beq	1480 <emit_test+0x30c>
    1460:	movw	r3, #0
    1464:	movt	r3, #0
    1468:	mov	r2, #114	; 0x72
    146c:	movw	r1, #0
    1470:	movt	r1, #0
    1474:	movw	r0, #0
    1478:	movt	r0, #0
    147c:	bl	0 <__assert_fail>
    1480:	ldr	r0, [fp, #-24]	; 0xffffffe8
    1484:	bl	754 <main_samples>
    1488:	mov	r3, r0
    148c:	mov	r1, #2
    1490:	mov	r0, r3
    1494:	bl	3c4 <flatbuffers_float_vec_at>
    1498:	vmov.f32	s14, s0
    149c:	vldr	s15, [pc, #72]	; 14ec <emit_test+0x378>
    14a0:	vcmp.f32	s14, s15
    14a4:	vmrs	APSR_nzcv, fpscr
    14a8:	beq	14cc <emit_test+0x358>
    14ac:	movw	r3, #0
    14b0:	movt	r3, #0
    14b4:	mov	r2, #115	; 0x73
    14b8:	movw	r1, #0
    14bc:	movt	r1, #0
    14c0:	movw	r0, #0
    14c4:	movt	r0, #0
    14c8:	bl	0 <__assert_fail>
    14cc:	ldr	r0, [fp, #-8]
    14d0:	bl	0 <flatcc_builder_clear>
    14d4:	mov	r3, #0
    14d8:	mov	r0, r3
    14dc:	sub	sp, fp, #4
    14e0:	ldr	fp, [sp]
    14e4:	add	sp, sp, #4
    14e8:	pop	{pc}		; (ldr pc, [sp], #4)
    14ec:	.word	0x3f99999a

000014f0 <main>:
    14f0:	str	fp, [sp, #-8]!
    14f4:	str	lr, [sp, #4]
    14f8:	add	fp, sp, #4
    14fc:	sub	sp, sp, #16
    1500:	str	r0, [fp, #-16]
    1504:	str	r1, [fp, #-20]	; 0xffffffec
    1508:	mov	r3, #0
    150c:	str	r3, [fp, #-8]
    1510:	bl	10bc <debug_test>
    1514:	mov	r2, r0
    1518:	ldr	r3, [fp, #-8]
    151c:	orr	r3, r3, r2
    1520:	str	r3, [fp, #-8]
    1524:	bl	1174 <emit_test>
    1528:	mov	r2, r0
    152c:	ldr	r3, [fp, #-8]
    1530:	orr	r3, r3, r2
    1534:	str	r3, [fp, #-8]
    1538:	ldr	r3, [fp, #-8]
    153c:	mov	r0, r3
    1540:	sub	sp, fp, #4
    1544:	ldr	fp, [sp]
    1548:	add	sp, sp, #4
    154c:	pop	{pc}		; (ldr pc, [sp], #4)
