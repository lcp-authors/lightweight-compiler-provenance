
../compcert-repos/stcorp-coda-3a25f25/codaeval:     file format elf32-littlearm


Disassembly of section .init:

00010c84 <.init>:
   10c84:	push	{r3, lr}
   10c88:	bl	1132c <_start@@Base+0x3c>
   10c8c:	pop	{r3, pc}

Disassembly of section .plt:

00010c90 <coda_match_filefilter@plt-0x14>:
   10c90:	push	{lr}		; (str lr, [sp, #-4]!)
   10c94:	ldr	lr, [pc, #4]	; 10ca0 <coda_match_filefilter@plt-0x4>
   10c98:	add	lr, pc, lr
   10c9c:	ldr	pc, [lr, #8]!
   10ca0:	andeq	r2, r1, r0, ror #6

00010ca4 <coda_match_filefilter@plt>:
   10ca4:	add	ip, pc, #0, 12
   10ca8:	add	ip, ip, #73728	; 0x12000
   10cac:	ldr	pc, [ip, #864]!	; 0x360

00010cb0 <coda_expression_eval_integer@plt>:
   10cb0:	add	ip, pc, #0, 12
   10cb4:	add	ip, ip, #73728	; 0x12000
   10cb8:	ldr	pc, [ip, #856]!	; 0x358

00010cbc <strcmp@plt>:
   10cbc:	add	ip, pc, #0, 12
   10cc0:	add	ip, ip, #73728	; 0x12000
   10cc4:	ldr	pc, [ip, #848]!	; 0x350

00010cc8 <printf@plt>:
   10cc8:	add	ip, pc, #0, 12
   10ccc:	add	ip, ip, #73728	; 0x12000
   10cd0:	ldr	pc, [ip, #840]!	; 0x348

00010cd4 <coda_set_error@plt>:
   10cd4:	add	ip, pc, #0, 12
   10cd8:	add	ip, ip, #73728	; 0x12000
   10cdc:	ldr	pc, [ip, #832]!	; 0x340

00010ce0 <coda_open@plt>:
   10ce0:	add	ip, pc, #0, 12
   10ce4:	add	ip, ip, #73728	; 0x12000
   10ce8:	ldr	pc, [ip, #824]!	; 0x338

00010cec <free@plt>:
   10cec:	add	ip, pc, #0, 12
   10cf0:	add	ip, ip, #73728	; 0x12000
   10cf4:	ldr	pc, [ip, #816]!	; 0x330

00010cf8 <coda_set_definition_path_conditional@plt>:
   10cf8:	add	ip, pc, #0, 12
   10cfc:	add	ip, ip, #73728	; 0x12000
   10d00:	ldr	pc, [ip, #808]!	; 0x328

00010d04 <coda_set_definition_path@plt>:
   10d04:	add	ip, pc, #0, 12
   10d08:	add	ip, ip, #73728	; 0x12000
   10d0c:	ldr	pc, [ip, #800]!	; 0x320

00010d10 <fwrite@plt>:
   10d10:	add	ip, pc, #0, 12
   10d14:	add	ip, ip, #73728	; 0x12000
   10d18:	ldr	pc, [ip, #792]!	; 0x318

00010d1c <coda_expression_eval_bool@plt>:
   10d1c:	add	ip, pc, #0, 12
   10d20:	add	ip, ip, #73728	; 0x12000
   10d24:	ldr	pc, [ip, #784]!	; 0x310

00010d28 <coda_cursor_set_product@plt>:
   10d28:	add	ip, pc, #0, 12
   10d2c:	add	ip, ip, #73728	; 0x12000
   10d30:	ldr	pc, [ip, #776]!	; 0x308

00010d34 <coda_done@plt>:
   10d34:	add	ip, pc, #0, 12
   10d38:	add	ip, ip, #73728	; 0x12000
   10d3c:	ldr	pc, [ip, #768]!	; 0x300

00010d40 <puts@plt>:
   10d40:	add	ip, pc, #0, 12
   10d44:	add	ip, ip, #73728	; 0x12000
   10d48:	ldr	pc, [ip, #760]!	; 0x2f8

00010d4c <__libc_start_main@plt>:
   10d4c:	add	ip, pc, #0, 12
   10d50:	add	ip, ip, #73728	; 0x12000
   10d54:	ldr	pc, [ip, #752]!	; 0x2f0

00010d58 <coda_expression_delete@plt>:
   10d58:	add	ip, pc, #0, 12
   10d5c:	add	ip, ip, #73728	; 0x12000
   10d60:	ldr	pc, [ip, #744]!	; 0x2e8

00010d64 <__gmon_start__@plt>:
   10d64:	add	ip, pc, #0, 12
   10d68:	add	ip, ip, #73728	; 0x12000
   10d6c:	ldr	pc, [ip, #736]!	; 0x2e0

00010d70 <__ctype_b_loc@plt>:
   10d70:	add	ip, pc, #0, 12
   10d74:	add	ip, ip, #73728	; 0x12000
   10d78:	ldr	pc, [ip, #728]!	; 0x2d8

00010d7c <exit@plt>:
   10d7c:	add	ip, pc, #0, 12
   10d80:	add	ip, ip, #73728	; 0x12000
   10d84:	ldr	pc, [ip, #720]!	; 0x2d0

00010d88 <strlen@plt>:
   10d88:	add	ip, pc, #0, 12
   10d8c:	add	ip, ip, #73728	; 0x12000
   10d90:	ldr	pc, [ip, #712]!	; 0x2c8

00010d94 <fprintf@plt>:
   10d94:	add	ip, pc, #0, 12
   10d98:	add	ip, ip, #73728	; 0x12000
   10d9c:	ldr	pc, [ip, #704]!	; 0x2c0

00010da0 <coda_init@plt>:
   10da0:	add	ip, pc, #0, 12
   10da4:	add	ip, ip, #73728	; 0x12000
   10da8:	ldr	pc, [ip, #696]!	; 0x2b8

00010dac <coda_set_option_perform_conversions@plt>:
   10dac:	add	ip, pc, #0, 12
   10db0:	add	ip, ip, #73728	; 0x12000
   10db4:	ldr	pc, [ip, #688]!	; 0x2b0

00010db8 <coda_expression_eval_string@plt>:
   10db8:	add	ip, pc, #0, 12
   10dbc:	add	ip, ip, #73728	; 0x12000
   10dc0:	ldr	pc, [ip, #680]!	; 0x2a8

00010dc4 <putchar@plt>:
   10dc4:	add	ip, pc, #0, 12
   10dc8:	add	ip, ip, #73728	; 0x12000
   10dcc:	ldr	pc, [ip, #672]!	; 0x2a0

00010dd0 <coda_expression_get_type@plt>:
   10dd0:	add	ip, pc, #0, 12
   10dd4:	add	ip, ip, #73728	; 0x12000
   10dd8:	ldr	pc, [ip, #664]!	; 0x298

00010ddc <coda_close@plt>:
   10ddc:	add	ip, pc, #0, 12
   10de0:	add	ip, ip, #73728	; 0x12000
   10de4:	ldr	pc, [ip, #656]!	; 0x290

00010de8 <coda_expression_is_constant@plt>:
   10de8:	add	ip, pc, #0, 12
   10dec:	add	ip, ip, #73728	; 0x12000
   10df0:	ldr	pc, [ip, #648]!	; 0x288

00010df4 <coda_expression_eval_float@plt>:
   10df4:	add	ip, pc, #0, 12
   10df8:	add	ip, ip, #73728	; 0x12000
   10dfc:	ldr	pc, [ip, #640]!	; 0x280

00010e00 <coda_expression_eval_node@plt>:
   10e00:	add	ip, pc, #0, 12
   10e04:	add	ip, ip, #73728	; 0x12000
   10e08:	ldr	pc, [ip, #632]!	; 0x278

00010e0c <coda_errno_to_string@plt>:
   10e0c:	add	ip, pc, #0, 12
   10e10:	add	ip, ip, #73728	; 0x12000
   10e14:	ldr	pc, [ip, #624]!	; 0x270

00010e18 <coda_expression_get_type_name@plt>:
   10e18:	add	ip, pc, #0, 12
   10e1c:	add	ip, ip, #73728	; 0x12000
   10e20:	ldr	pc, [ip, #616]!	; 0x268

00010e24 <coda_expression_from_string@plt>:
   10e24:	add	ip, pc, #0, 12
   10e28:	add	ip, ip, #73728	; 0x12000
   10e2c:	ldr	pc, [ip, #608]!	; 0x260

00010e30 <coda_get_libcoda_version@plt>:
   10e30:	add	ip, pc, #0, 12
   10e34:	add	ip, ip, #73728	; 0x12000
   10e38:	ldr	pc, [ip, #600]!	; 0x258

00010e3c <coda_get_errno@plt>:
   10e3c:	add	ip, pc, #0, 12
   10e40:	add	ip, ip, #73728	; 0x12000
   10e44:	ldr	pc, [ip, #592]!	; 0x250

00010e48 <abort@plt>:
   10e48:	add	ip, pc, #0, 12
   10e4c:	add	ip, ip, #73728	; 0x12000
   10e50:	ldr	pc, [ip, #584]!	; 0x248

00010e54 <coda_str64@plt>:
   10e54:	add	ip, pc, #0, 12
   10e58:	add	ip, ip, #73728	; 0x12000
   10e5c:	ldr	pc, [ip, #576]!	; 0x240

00010e60 <__assert_fail@plt>:
   10e60:	add	ip, pc, #0, 12
   10e64:	add	ip, ip, #73728	; 0x12000
   10e68:	ldr	pc, [ip, #568]!	; 0x238

Disassembly of section .text:

00010e6c <main@@Base>:
   10e6c:	cmp	r0, #1
   10e70:	strd	r4, [sp, #-36]!	; 0xffffffdc
   10e74:	strd	r6, [sp, #8]
   10e78:	strd	r8, [sp, #16]
   10e7c:	strd	sl, [sp, #24]
   10e80:	str	lr, [sp, #32]
   10e84:	sub	sp, sp, #28
   10e88:	beq	10eb0 <main@@Base+0x44>
   10e8c:	mov	r6, r1
   10e90:	mov	r5, r0
   10e94:	ldr	r4, [r6, #4]
   10e98:	movw	r1, #9560	; 0x2558
   10e9c:	movt	r1, #1
   10ea0:	mov	r0, r4
   10ea4:	bl	10cbc <strcmp@plt>
   10ea8:	cmp	r0, #0
   10eac:	bne	10ebc <main@@Base+0x50>
   10eb0:	bl	113e0 <_start@@Base+0xf0>
   10eb4:	mov	r0, #0
   10eb8:	bl	10d7c <exit@plt>
   10ebc:	movw	r1, #8492	; 0x212c
   10ec0:	movt	r1, #1
   10ec4:	mov	r0, r4
   10ec8:	bl	10cbc <strcmp@plt>
   10ecc:	cmp	r0, #0
   10ed0:	beq	10eb0 <main@@Base+0x44>
   10ed4:	movw	r1, #9564	; 0x255c
   10ed8:	movt	r1, #1
   10edc:	mov	r0, r4
   10ee0:	bl	10cbc <strcmp@plt>
   10ee4:	cmp	r0, #0
   10ee8:	beq	11034 <main@@Base+0x1c8>
   10eec:	movw	r1, #9568	; 0x2560
   10ef0:	movt	r1, #1
   10ef4:	mov	r0, r4
   10ef8:	bl	10cbc <strcmp@plt>
   10efc:	cmp	r0, #0
   10f00:	beq	11034 <main@@Base+0x1c8>
   10f04:	cmp	r5, #2
   10f08:	ble	11064 <main@@Base+0x1f8>
   10f0c:	mov	r0, r4
   10f10:	movw	r1, #9644	; 0x25ac
   10f14:	movt	r1, #1
   10f18:	bl	10cbc <strcmp@plt>
   10f1c:	cmp	r0, #0
   10f20:	beq	110c0 <main@@Base+0x254>
   10f24:	movw	r2, #9648	; 0x25b0
   10f28:	movt	r2, #1
   10f2c:	ldr	r0, [r6]
   10f30:	mov	r1, #0
   10f34:	bl	10cf8 <coda_set_definition_path_conditional@plt>
   10f38:	cmp	r0, #0
   10f3c:	bne	11284 <main@@Base+0x418>
   10f40:	mov	fp, #1
   10f44:	movw	r3, #9692	; 0x25dc
   10f48:	movt	r3, #1
   10f4c:	movw	r8, #9688	; 0x25d8
   10f50:	movt	r8, #1
   10f54:	str	r3, [sp, #12]
   10f58:	mov	r3, #1
   10f5c:	movw	sl, #7772	; 0x1e5c
   10f60:	movt	sl, #1
   10f64:	mov	r9, #0
   10f68:	str	r3, [sp, #16]
   10f6c:	b	11010 <main@@Base+0x1a4>
   10f70:	mov	r1, sl
   10f74:	mov	r0, r4
   10f78:	bl	10cbc <strcmp@plt>
   10f7c:	cmp	r0, #0
   10f80:	beq	1102c <main@@Base+0x1c0>
   10f84:	mov	r0, r4
   10f88:	ldr	r1, [sp, #12]
   10f8c:	bl	10cbc <strcmp@plt>
   10f90:	cmp	r0, #0
   10f94:	beq	110b8 <main@@Base+0x24c>
   10f98:	movw	r1, #7956	; 0x1f14
   10f9c:	movt	r1, #1
   10fa0:	mov	r0, r4
   10fa4:	bl	10cbc <strcmp@plt>
   10fa8:	cmp	r0, #0
   10fac:	beq	110b8 <main@@Base+0x24c>
   10fb0:	movw	r1, #9696	; 0x25e0
   10fb4:	movt	r1, #1
   10fb8:	mov	r0, r4
   10fbc:	bl	10cbc <strcmp@plt>
   10fc0:	cmp	r0, #0
   10fc4:	bne	110d0 <main@@Base+0x264>
   10fc8:	add	r2, fp, #1
   10fcc:	cmp	r2, r5
   10fd0:	str	r2, [sp, #20]
   10fd4:	bge	110d0 <main@@Base+0x264>
   10fd8:	add	r7, r6, r7
   10fdc:	ldr	r0, [r7, #4]
   10fe0:	ldrb	r1, [r0]
   10fe4:	cmp	r1, #45	; 0x2d
   10fe8:	beq	110d0 <main@@Base+0x264>
   10fec:	ldr	r1, [pc, #760]	; 112ec <main@@Base+0x480>
   10ff0:	bl	10e24 <coda_expression_from_string@plt>
   10ff4:	cmp	r0, #0
   10ff8:	ldr	r2, [sp, #20]
   10ffc:	bne	112b8 <main@@Base+0x44c>
   11000:	mov	fp, r2
   11004:	add	fp, fp, #1
   11008:	cmp	r5, fp
   1100c:	ble	1108c <main@@Base+0x220>
   11010:	ldr	r4, [r6, fp, lsl #2]
   11014:	mov	r1, r8
   11018:	lsl	r7, fp, #2
   1101c:	mov	r0, r4
   11020:	bl	10cbc <strcmp@plt>
   11024:	cmp	r0, #0
   11028:	bne	10f70 <main@@Base+0x104>
   1102c:	mov	r9, #1
   11030:	b	11004 <main@@Base+0x198>
   11034:	bl	10e30 <coda_get_libcoda_version@plt>
   11038:	mov	r1, r0
   1103c:	movw	r0, #9580	; 0x256c
   11040:	movt	r0, #1
   11044:	bl	10cc8 <printf@plt>
   11048:	movw	r0, #9596	; 0x257c
   1104c:	movt	r0, #1
   11050:	bl	10d40 <puts@plt>
   11054:	mov	r0, #10
   11058:	bl	10dc4 <putchar@plt>
   1105c:	mov	r0, #0
   11060:	bl	10d7c <exit@plt>
   11064:	movw	r2, #9648	; 0x25b0
   11068:	movt	r2, #1
   1106c:	ldr	r0, [r6]
   11070:	mov	r1, #0
   11074:	bl	10cf8 <coda_set_definition_path_conditional@plt>
   11078:	cmp	r0, #0
   1107c:	moveq	fp, #1
   11080:	bne	11284 <main@@Base+0x418>
   11084:	cmp	fp, r5
   11088:	blt	10f44 <main@@Base+0xd8>
   1108c:	movw	r3, #12464	; 0x30b0
   11090:	movt	r3, #2
   11094:	mov	r2, #25
   11098:	mov	r1, #1
   1109c:	ldr	r3, [r3]
   110a0:	movw	r0, #9740	; 0x260c
   110a4:	movt	r0, #1
   110a8:	bl	10d10 <fwrite@plt>
   110ac:	bl	113e0 <_start@@Base+0xf0>
   110b0:	mov	r0, #1
   110b4:	bl	10d7c <exit@plt>
   110b8:	str	r0, [sp, #16]
   110bc:	b	11004 <main@@Base+0x198>
   110c0:	ldr	r0, [r6, #8]
   110c4:	mov	fp, #3
   110c8:	bl	10d04 <coda_set_definition_path@plt>
   110cc:	b	11084 <main@@Base+0x218>
   110d0:	ldrb	r2, [r4]
   110d4:	cmp	r2, #45	; 0x2d
   110d8:	beq	1108c <main@@Base+0x220>
   110dc:	movw	r7, #12472	; 0x30b8
   110e0:	movt	r7, #2
   110e4:	mov	r0, r4
   110e8:	add	r1, r7, #4
   110ec:	bl	10e24 <coda_expression_from_string@plt>
   110f0:	cmp	r0, #0
   110f4:	bne	111d4 <main@@Base+0x368>
   110f8:	mov	r1, r7
   110fc:	ldr	r0, [r7, #4]
   11100:	add	fp, fp, #1
   11104:	bl	10dd0 <coda_expression_get_type@plt>
   11108:	cmp	r0, #0
   1110c:	bne	11284 <main@@Base+0x418>
   11110:	ldr	r0, [r7]
   11114:	sub	r3, r0, #4
   11118:	cmp	r3, #1
   1111c:	bls	11230 <main@@Base+0x3c4>
   11120:	cmp	r9, #0
   11124:	bne	1115c <main@@Base+0x2f0>
   11128:	cmp	r5, fp
   1112c:	bgt	11194 <main@@Base+0x328>
   11130:	ldr	r3, [r7, #8]
   11134:	cmp	r3, #0
   11138:	bne	1125c <main@@Base+0x3f0>
   1113c:	ldr	r0, [r7, #4]
   11140:	bl	10de8 <coda_expression_is_constant@plt>
   11144:	cmp	r0, #0
   11148:	beq	11208 <main@@Base+0x39c>
   1114c:	mov	r0, r9
   11150:	bl	115a4 <_start@@Base+0x2b4>
   11154:	cmp	r0, #0
   11158:	bne	11284 <main@@Base+0x418>
   1115c:	ldr	r0, [r7, #4]
   11160:	bl	10d58 <coda_expression_delete@plt>
   11164:	ldr	r0, [r7, #8]
   11168:	cmp	r0, #0
   1116c:	beq	11174 <main@@Base+0x308>
   11170:	bl	10d58 <coda_expression_delete@plt>
   11174:	mov	r0, #0
   11178:	add	sp, sp, #28
   1117c:	ldrd	r4, [sp]
   11180:	ldrd	r6, [sp, #8]
   11184:	ldrd	r8, [sp, #16]
   11188:	ldrd	sl, [sp, #24]
   1118c:	add	sp, sp, #32
   11190:	pop	{pc}		; (ldr pc, [sp], #4)
   11194:	bl	10da0 <coda_init@plt>
   11198:	cmp	r0, #0
   1119c:	bne	11284 <main@@Base+0x418>
   111a0:	ldr	r0, [sp, #16]
   111a4:	bl	10dac <coda_set_option_perform_conversions@plt>
   111a8:	add	r2, r6, fp, lsl #2
   111ac:	sub	r1, r5, fp
   111b0:	mov	r0, r9
   111b4:	movw	r3, #6992	; 0x1b50
   111b8:	movt	r3, #1
   111bc:	str	r9, [sp]
   111c0:	bl	10ca4 <coda_match_filefilter@plt>
   111c4:	cmp	r0, #0
   111c8:	bne	11284 <main@@Base+0x418>
   111cc:	bl	10d34 <coda_done@plt>
   111d0:	b	1115c <main@@Base+0x2f0>
   111d4:	movw	r3, #12464	; 0x30b0
   111d8:	movt	r3, #2
   111dc:	ldr	r4, [r3]
   111e0:	bl	10e3c <coda_get_errno@plt>
   111e4:	ldr	r0, [r0]
   111e8:	bl	10e0c <coda_errno_to_string@plt>
   111ec:	mov	r2, r0
   111f0:	movw	r1, #9768	; 0x2628
   111f4:	movt	r1, #1
   111f8:	mov	r0, r4
   111fc:	bl	10d94 <fprintf@plt>
   11200:	mov	r0, #1
   11204:	bl	10d7c <exit@plt>
   11208:	movw	r3, #12464	; 0x30b0
   1120c:	movt	r3, #2
   11210:	movw	r0, #9948	; 0x26dc
   11214:	movt	r0, #1
   11218:	ldr	r3, [r3]
   1121c:	mov	r2, #111	; 0x6f
   11220:	mov	r1, #1
   11224:	bl	10d10 <fwrite@plt>
   11228:	mov	r0, #1
   1122c:	bl	10d7c <exit@plt>
   11230:	movw	r3, #12464	; 0x30b0
   11234:	movt	r3, #2
   11238:	ldr	r4, [r3]
   1123c:	bl	10e18 <coda_expression_get_type_name@plt>
   11240:	mov	r2, r0
   11244:	movw	r1, #9800	; 0x2648
   11248:	movt	r1, #1
   1124c:	mov	r0, r4
   11250:	bl	10d94 <fprintf@plt>
   11254:	mov	r0, #1
   11258:	bl	10d7c <exit@plt>
   1125c:	movw	r3, #12464	; 0x30b0
   11260:	movt	r3, #2
   11264:	movw	r0, #9848	; 0x2678
   11268:	movt	r0, #1
   1126c:	ldr	r3, [r3]
   11270:	mov	r2, #96	; 0x60
   11274:	mov	r1, #1
   11278:	bl	10d10 <fwrite@plt>
   1127c:	mov	r0, #1
   11280:	bl	10d7c <exit@plt>
   11284:	movw	r3, #12464	; 0x30b0
   11288:	movt	r3, #2
   1128c:	ldr	r4, [r3]
   11290:	bl	10e3c <coda_get_errno@plt>
   11294:	ldr	r0, [r0]
   11298:	bl	10e0c <coda_errno_to_string@plt>
   1129c:	mov	r2, r0
   112a0:	movw	r1, #9676	; 0x25cc
   112a4:	movt	r1, #1
   112a8:	mov	r0, r4
   112ac:	bl	10d94 <fprintf@plt>
   112b0:	mov	r0, #1
   112b4:	bl	10d7c <exit@plt>
   112b8:	movw	r3, #12464	; 0x30b0
   112bc:	movt	r3, #2
   112c0:	ldr	r4, [r3]
   112c4:	bl	10e3c <coda_get_errno@plt>
   112c8:	ldr	r0, [r0]
   112cc:	bl	10e0c <coda_errno_to_string@plt>
   112d0:	mov	r2, r0
   112d4:	movw	r1, #9700	; 0x25e4
   112d8:	movt	r1, #1
   112dc:	mov	r0, r4
   112e0:	bl	10d94 <fprintf@plt>
   112e4:	mov	r0, #1
   112e8:	bl	10d7c <exit@plt>
   112ec:	andeq	r3, r2, r0, asr #1

000112f0 <_start@@Base>:
   112f0:	mov	fp, #0
   112f4:	mov	lr, #0
   112f8:	pop	{r1}		; (ldr r1, [sp], #4)
   112fc:	mov	r2, sp
   11300:	push	{r2}		; (str r2, [sp, #-4]!)
   11304:	push	{r0}		; (str r0, [sp, #-4]!)
   11308:	ldr	ip, [pc, #16]	; 11320 <_start@@Base+0x30>
   1130c:	push	{ip}		; (str ip, [sp, #-4]!)
   11310:	ldr	r0, [pc, #12]	; 11324 <_start@@Base+0x34>
   11314:	ldr	r3, [pc, #12]	; 11328 <_start@@Base+0x38>
   11318:	bl	10d4c <__libc_start_main@plt>
   1131c:	bl	10e48 <abort@plt>
   11320:	andeq	r1, r1, r4, lsl #25
   11324:	andeq	r0, r1, ip, ror #28
   11328:	andeq	r1, r1, r4, lsr #24
   1132c:	ldr	r3, [pc, #20]	; 11348 <_start@@Base+0x58>
   11330:	ldr	r2, [pc, #20]	; 1134c <_start@@Base+0x5c>
   11334:	add	r3, pc, r3
   11338:	ldr	r2, [r3, r2]
   1133c:	cmp	r2, #0
   11340:	bxeq	lr
   11344:	b	10d64 <__gmon_start__@plt>
   11348:	andeq	r1, r1, r4, asr #25
   1134c:	andeq	r0, r0, r4, lsr #1
   11350:	ldr	r0, [pc, #24]	; 11370 <_start@@Base+0x80>
   11354:	ldr	r3, [pc, #24]	; 11374 <_start@@Base+0x84>
   11358:	cmp	r3, r0
   1135c:	bxeq	lr
   11360:	ldr	r3, [pc, #16]	; 11378 <_start@@Base+0x88>
   11364:	cmp	r3, #0
   11368:	bxeq	lr
   1136c:	bx	r3
   11370:	strheq	r3, [r2], -r0
   11374:	strheq	r3, [r2], -r0
   11378:	andeq	r0, r0, r0
   1137c:	ldr	r0, [pc, #36]	; 113a8 <_start@@Base+0xb8>
   11380:	ldr	r1, [pc, #36]	; 113ac <_start@@Base+0xbc>
   11384:	sub	r1, r1, r0
   11388:	asr	r1, r1, #2
   1138c:	add	r1, r1, r1, lsr #31
   11390:	asrs	r1, r1, #1
   11394:	bxeq	lr
   11398:	ldr	r3, [pc, #16]	; 113b0 <_start@@Base+0xc0>
   1139c:	cmp	r3, #0
   113a0:	bxeq	lr
   113a4:	bx	r3
   113a8:	strheq	r3, [r2], -r0
   113ac:	strheq	r3, [r2], -r0
   113b0:	andeq	r0, r0, r0
   113b4:	push	{r4, lr}
   113b8:	ldr	r4, [pc, #24]	; 113d8 <_start@@Base+0xe8>
   113bc:	ldrb	r3, [r4]
   113c0:	cmp	r3, #0
   113c4:	popne	{r4, pc}
   113c8:	bl	11350 <_start@@Base+0x60>
   113cc:	mov	r3, #1
   113d0:	strb	r3, [r4]
   113d4:	pop	{r4, pc}
   113d8:	strheq	r3, [r2], -r4
   113dc:	b	1137c <_start@@Base+0x8c>
   113e0:	movw	r0, #7332	; 0x1ca4
   113e4:	movt	r0, #1
   113e8:	str	r4, [sp, #-8]!
   113ec:	str	lr, [sp, #4]
   113f0:	bl	10d40 <puts@plt>
   113f4:	movw	r0, #7340	; 0x1cac
   113f8:	movt	r0, #1
   113fc:	bl	10d40 <puts@plt>
   11400:	movw	r0, #7420	; 0x1cfc
   11404:	movt	r0, #1
   11408:	bl	10d40 <puts@plt>
   1140c:	movw	r0, #7500	; 0x1d4c
   11410:	movt	r0, #1
   11414:	bl	10d40 <puts@plt>
   11418:	movw	r0, #7536	; 0x1d70
   1141c:	movt	r0, #1
   11420:	bl	10d40 <puts@plt>
   11424:	movw	r0, #7612	; 0x1dbc
   11428:	movt	r0, #1
   1142c:	bl	10d40 <puts@plt>
   11430:	movw	r0, #7688	; 0x1e08
   11434:	movt	r0, #1
   11438:	bl	10d40 <puts@plt>
   1143c:	mov	r0, #10
   11440:	bl	10dc4 <putchar@plt>
   11444:	movw	r0, #7736	; 0x1e38
   11448:	movt	r0, #1
   1144c:	bl	10d40 <puts@plt>
   11450:	movw	r0, #7756	; 0x1e4c
   11454:	movt	r0, #1
   11458:	bl	10d40 <puts@plt>
   1145c:	movw	r0, #7780	; 0x1e64
   11460:	movt	r0, #1
   11464:	bl	10d40 <puts@plt>
   11468:	movw	r0, #7860	; 0x1eb4
   1146c:	movt	r0, #1
   11470:	bl	10d40 <puts@plt>
   11474:	movw	r0, #7940	; 0x1f04
   11478:	movt	r0, #1
   1147c:	bl	10d40 <puts@plt>
   11480:	movw	r0, #7980	; 0x1f2c
   11484:	movt	r0, #1
   11488:	bl	10d40 <puts@plt>
   1148c:	movw	r0, #8040	; 0x1f68
   11490:	movt	r0, #1
   11494:	bl	10d40 <puts@plt>
   11498:	movw	r0, #8064	; 0x1f80
   1149c:	movt	r0, #1
   114a0:	bl	10d40 <puts@plt>
   114a4:	movw	r0, #8140	; 0x1fcc
   114a8:	movt	r0, #1
   114ac:	bl	10d40 <puts@plt>
   114b0:	movw	r0, #8216	; 0x2018
   114b4:	movt	r0, #1
   114b8:	bl	10d40 <puts@plt>
   114bc:	movw	r0, #8248	; 0x2038
   114c0:	movt	r0, #1
   114c4:	bl	10d40 <puts@plt>
   114c8:	movw	r0, #8324	; 0x2084
   114cc:	movt	r0, #1
   114d0:	bl	10d40 <puts@plt>
   114d4:	mov	r0, #10
   114d8:	bl	10dc4 <putchar@plt>
   114dc:	movw	r0, #8372	; 0x20b4
   114e0:	movt	r0, #1
   114e4:	bl	10d40 <puts@plt>
   114e8:	movw	r0, #8452	; 0x2104
   114ec:	movt	r0, #1
   114f0:	bl	10d40 <puts@plt>
   114f4:	mov	r0, #10
   114f8:	bl	10dc4 <putchar@plt>
   114fc:	movw	r0, #8476	; 0x211c
   11500:	movt	r0, #1
   11504:	bl	10d40 <puts@plt>
   11508:	movw	r0, #8500	; 0x2134
   1150c:	movt	r0, #1
   11510:	bl	10d40 <puts@plt>
   11514:	mov	r0, #10
   11518:	bl	10dc4 <putchar@plt>
   1151c:	movw	r0, #8532	; 0x2154
   11520:	movt	r0, #1
   11524:	bl	10d40 <puts@plt>
   11528:	movw	r0, #8560	; 0x2170
   1152c:	movt	r0, #1
   11530:	bl	10d40 <puts@plt>
   11534:	mov	r0, #10
   11538:	bl	10dc4 <putchar@plt>
   1153c:	movw	r0, #8612	; 0x21a4
   11540:	movt	r0, #1
   11544:	bl	10d40 <puts@plt>
   11548:	movw	r0, #8688	; 0x21f0
   1154c:	movt	r0, #1
   11550:	bl	10d40 <puts@plt>
   11554:	movw	r0, #8764	; 0x223c
   11558:	movt	r0, #1
   1155c:	bl	10d40 <puts@plt>
   11560:	movw	r0, #8812	; 0x226c
   11564:	movt	r0, #1
   11568:	bl	10d40 <puts@plt>
   1156c:	movw	r0, #8888	; 0x22b8
   11570:	movt	r0, #1
   11574:	bl	10d40 <puts@plt>
   11578:	movw	r0, #8964	; 0x2304
   1157c:	movt	r0, #1
   11580:	bl	10d40 <puts@plt>
   11584:	movw	r0, #9028	; 0x2344
   11588:	movt	r0, #1
   1158c:	bl	10d40 <puts@plt>
   11590:	mov	r0, #10
   11594:	ldr	r4, [sp]
   11598:	ldr	lr, [sp, #4]
   1159c:	add	sp, sp, #8
   115a0:	b	10dc4 <putchar@plt>
   115a4:	movw	r3, #12472	; 0x30b8
   115a8:	movt	r3, #2
   115ac:	strd	r4, [sp, #-32]!	; 0xffffffe0
   115b0:	ldr	r2, [r3]
   115b4:	strd	r6, [sp, #8]
   115b8:	strd	r8, [sp, #16]
   115bc:	str	sl, [sp, #24]
   115c0:	str	lr, [sp, #28]
   115c4:	sub	sp, sp, #32
   115c8:	cmp	r2, #5
   115cc:	ldrls	pc, [pc, r2, lsl #2]
   115d0:	b	11a30 <_start@@Base+0x740>
   115d4:			; <UNDEFINED> instruction: 0x000117b8
   115d8:	andeq	r1, r1, r4, lsl r8
   115dc:	andeq	r1, r1, r4, asr #16
   115e0:	andeq	r1, r1, ip, ror #11
   115e4:	andeq	r1, r1, r0, ror r9
   115e8:	andeq	r1, r1, r0, ror r9
   115ec:	mov	ip, #0
   115f0:	mov	r1, r0
   115f4:	ldr	r0, [r3, #4]
   115f8:	mov	r2, sp
   115fc:	add	r3, sp, #8
   11600:	str	ip, [sp]
   11604:	bl	10db8 <coda_expression_eval_string@plt>
   11608:	subs	r6, r0, #0
   1160c:	bne	119e0 <_start@@Base+0x6f0>
   11610:	ldr	r4, [sp]
   11614:	ldr	r7, [sp, #8]
   11618:	cmp	r4, #0
   1161c:	cmpne	r7, #0
   11620:	beq	11880 <_start@@Base+0x590>
   11624:	cmp	r7, #0
   11628:	blt	11950 <_start@@Base+0x660>
   1162c:	sub	r4, r4, #1
   11630:	movw	r9, #9324	; 0x246c
   11634:	movt	r9, #1
   11638:	movw	sl, #9320	; 0x2468
   1163c:	movt	sl, #1
   11640:	movw	r8, #9316	; 0x2464
   11644:	movt	r8, #1
   11648:	add	r7, r4, r7
   1164c:	ldrb	r5, [r4, #1]!
   11650:	sub	r3, r5, #7
   11654:	cmp	r3, #85	; 0x55
   11658:	ldrls	pc, [pc, r3, lsl #2]
   1165c:	b	11928 <_start@@Base+0x638>
   11660:	strdeq	r1, [r1], -r8
   11664:	andeq	r1, r1, r8, lsl r9
   11668:	andeq	r1, r1, r8, lsl #18
   1166c:	andeq	r1, r1, r8, ror #17
   11670:	ldrdeq	r1, [r1], -r8
   11674:	andeq	r1, r1, r8, asr #17
   11678:			; <UNDEFINED> instruction: 0x000118b8
   1167c:	andeq	r1, r1, r8, lsr #18
   11680:	andeq	r1, r1, r8, lsr #18
   11684:	andeq	r1, r1, r8, lsr #18
   11688:	andeq	r1, r1, r8, lsr #18
   1168c:	andeq	r1, r1, r8, lsr #18
   11690:	andeq	r1, r1, r8, lsr #18
   11694:	andeq	r1, r1, r8, lsr #18
   11698:	andeq	r1, r1, r8, lsr #18
   1169c:	andeq	r1, r1, r8, lsr #18
   116a0:	andeq	r1, r1, r8, lsr #18
   116a4:	andeq	r1, r1, r8, lsr #18
   116a8:	andeq	r1, r1, r8, lsr #18
   116ac:	andeq	r1, r1, r8, lsr #18
   116b0:	andeq	r1, r1, r8, lsr #17
   116b4:	andeq	r1, r1, r8, lsr #18
   116b8:	andeq	r1, r1, r8, lsr #18
   116bc:	andeq	r1, r1, r8, lsr #18
   116c0:	andeq	r1, r1, r8, lsr #18
   116c4:	andeq	r1, r1, r8, lsr #18
   116c8:	andeq	r1, r1, r8, lsr #18
   116cc:	muleq	r1, ip, r8
   116d0:	andeq	r1, r1, r8, lsr #18
   116d4:	andeq	r1, r1, r8, lsr #18
   116d8:	andeq	r1, r1, r8, lsr #18
   116dc:	andeq	r1, r1, r8, lsr #18
   116e0:	andeq	r1, r1, r8, lsr #18
   116e4:	andeq	r1, r1, r8, lsr #18
   116e8:	andeq	r1, r1, r8, lsr #18
   116ec:	andeq	r1, r1, r8, lsr #18
   116f0:	andeq	r1, r1, r8, lsr #18
   116f4:	andeq	r1, r1, r8, lsr #18
   116f8:	andeq	r1, r1, r8, lsr #18
   116fc:	andeq	r1, r1, r8, lsr #18
   11700:	andeq	r1, r1, r8, lsr #18
   11704:	andeq	r1, r1, r8, lsr #18
   11708:	andeq	r1, r1, r8, lsr #18
   1170c:	andeq	r1, r1, r8, lsr #18
   11710:	andeq	r1, r1, r8, lsr #18
   11714:	andeq	r1, r1, r8, lsr #18
   11718:	andeq	r1, r1, r8, lsr #18
   1171c:	andeq	r1, r1, r8, lsr #18
   11720:	andeq	r1, r1, r8, lsr #18
   11724:	andeq	r1, r1, r8, lsr #18
   11728:	andeq	r1, r1, r8, lsr #18
   1172c:	andeq	r1, r1, r8, lsr #18
   11730:	andeq	r1, r1, r8, lsr #18
   11734:	andeq	r1, r1, r8, lsr #18
   11738:	andeq	r1, r1, r8, lsr #18
   1173c:	andeq	r1, r1, r8, lsr #18
   11740:	andeq	r1, r1, r8, lsr #18
   11744:	andeq	r1, r1, r8, lsr #18
   11748:	andeq	r1, r1, r8, lsr #18
   1174c:	andeq	r1, r1, r8, lsr #18
   11750:	andeq	r1, r1, r8, lsr #18
   11754:	andeq	r1, r1, r8, lsr #18
   11758:	andeq	r1, r1, r8, lsr #18
   1175c:	andeq	r1, r1, r8, lsr #18
   11760:	andeq	r1, r1, r8, lsr #18
   11764:	andeq	r1, r1, r8, lsr #18
   11768:	andeq	r1, r1, r8, lsr #18
   1176c:	andeq	r1, r1, r8, lsr #18
   11770:	andeq	r1, r1, r8, lsr #18
   11774:	andeq	r1, r1, r8, lsr #18
   11778:	andeq	r1, r1, r8, lsr #18
   1177c:	andeq	r1, r1, r8, lsr #18
   11780:	andeq	r1, r1, r8, lsr #18
   11784:	andeq	r1, r1, r8, lsr #18
   11788:	andeq	r1, r1, r8, lsr #18
   1178c:	andeq	r1, r1, r8, lsr #18
   11790:	andeq	r1, r1, r8, lsr #18
   11794:	andeq	r1, r1, r8, lsr #18
   11798:	andeq	r1, r1, r8, lsr #18
   1179c:	andeq	r1, r1, r8, lsr #18
   117a0:	andeq	r1, r1, r8, lsr #18
   117a4:	andeq	r1, r1, r8, lsr #18
   117a8:	andeq	r1, r1, r8, lsr #18
   117ac:	andeq	r1, r1, r8, lsr #18
   117b0:	andeq	r1, r1, r8, lsr #18
   117b4:	andeq	r1, r1, r0, ror r8
   117b8:	mov	r1, r0
   117bc:	add	r2, sp, #8
   117c0:	ldr	r0, [r3, #4]
   117c4:	bl	10d1c <coda_expression_eval_bool@plt>
   117c8:	subs	r6, r0, #0
   117cc:	bne	11a08 <_start@@Base+0x718>
   117d0:	ldr	r0, [sp, #8]
   117d4:	movw	r2, #9092	; 0x2384
   117d8:	movt	r2, #1
   117dc:	movw	r3, #9100	; 0x238c
   117e0:	movt	r3, #1
   117e4:	cmp	r0, #0
   117e8:	movne	r0, r2
   117ec:	moveq	r0, r3
   117f0:	bl	10d40 <puts@plt>
   117f4:	mov	r0, r6
   117f8:	add	sp, sp, #32
   117fc:	ldrd	r4, [sp]
   11800:	ldrd	r6, [sp, #8]
   11804:	ldrd	r8, [sp, #16]
   11808:	ldr	sl, [sp, #24]
   1180c:	add	sp, sp, #28
   11810:	pop	{pc}		; (ldr pc, [sp], #4)
   11814:	mov	r1, r0
   11818:	mov	r2, sp
   1181c:	ldr	r0, [r3, #4]
   11820:	bl	10cb0 <coda_expression_eval_integer@plt>
   11824:	subs	r6, r0, #0
   11828:	bne	119b8 <_start@@Base+0x6c8>
   1182c:	add	r2, sp, #8
   11830:	ldrd	r0, [sp]
   11834:	bl	10e54 <coda_str64@plt>
   11838:	add	r0, sp, #8
   1183c:	bl	10d40 <puts@plt>
   11840:	b	117f4 <_start@@Base+0x504>
   11844:	mov	r1, r0
   11848:	add	r2, sp, #8
   1184c:	ldr	r0, [r3, #4]
   11850:	bl	10df4 <coda_expression_eval_float@plt>
   11854:	subs	r6, r0, #0
   11858:	bne	11990 <_start@@Base+0x6a0>
   1185c:	movw	r0, #9236	; 0x2414
   11860:	movt	r0, #1
   11864:	ldrd	r2, [sp, #8]
   11868:	bl	10cc8 <printf@plt>
   1186c:	b	117f4 <_start@@Base+0x504>
   11870:	mov	r0, r8
   11874:	bl	10cc8 <printf@plt>
   11878:	cmp	r4, r7
   1187c:	bne	1164c <_start@@Base+0x35c>
   11880:	mov	r0, #10
   11884:	bl	10dc4 <putchar@plt>
   11888:	ldr	r0, [sp]
   1188c:	cmp	r0, #0
   11890:	beq	117f4 <_start@@Base+0x504>
   11894:	bl	10cec <free@plt>
   11898:	b	117f4 <_start@@Base+0x504>
   1189c:	mov	r0, sl
   118a0:	bl	10cc8 <printf@plt>
   118a4:	b	11878 <_start@@Base+0x588>
   118a8:	movw	r0, #9284	; 0x2444
   118ac:	movt	r0, #1
   118b0:	bl	10cc8 <printf@plt>
   118b4:	b	11878 <_start@@Base+0x588>
   118b8:	movw	r0, #9304	; 0x2458
   118bc:	movt	r0, #1
   118c0:	bl	10cc8 <printf@plt>
   118c4:	b	11878 <_start@@Base+0x588>
   118c8:	movw	r0, #9296	; 0x2450
   118cc:	movt	r0, #1
   118d0:	bl	10cc8 <printf@plt>
   118d4:	b	11878 <_start@@Base+0x588>
   118d8:	movw	r0, #9312	; 0x2460
   118dc:	movt	r0, #1
   118e0:	bl	10cc8 <printf@plt>
   118e4:	b	11878 <_start@@Base+0x588>
   118e8:	movw	r0, #9300	; 0x2454
   118ec:	movt	r0, #1
   118f0:	bl	10cc8 <printf@plt>
   118f4:	b	11878 <_start@@Base+0x588>
   118f8:	movw	r0, #9288	; 0x2448
   118fc:	movt	r0, #1
   11900:	bl	10cc8 <printf@plt>
   11904:	b	11878 <_start@@Base+0x588>
   11908:	movw	r0, #9308	; 0x245c
   1190c:	movt	r0, #1
   11910:	bl	10cc8 <printf@plt>
   11914:	b	11878 <_start@@Base+0x588>
   11918:	movw	r0, #9292	; 0x244c
   1191c:	movt	r0, #1
   11920:	bl	10cc8 <printf@plt>
   11924:	b	11878 <_start@@Base+0x588>
   11928:	bl	10d70 <__ctype_b_loc@plt>
   1192c:	ldr	r2, [r0]
   11930:	lsl	r3, r5, #1
   11934:	ldrh	r3, [r2, r3]
   11938:	tst	r3, #16384	; 0x4000
   1193c:	bne	11964 <_start@@Base+0x674>
   11940:	mov	r1, r5
   11944:	mov	r0, r9
   11948:	bl	10cc8 <printf@plt>
   1194c:	b	11878 <_start@@Base+0x588>
   11950:	mov	r0, r4
   11954:	bl	10d88 <strlen@plt>
   11958:	subs	r7, r0, #0
   1195c:	bne	1162c <_start@@Base+0x33c>
   11960:	b	11880 <_start@@Base+0x590>
   11964:	mov	r0, r5
   11968:	bl	10dc4 <putchar@plt>
   1196c:	b	11878 <_start@@Base+0x588>
   11970:	movw	r3, #7316	; 0x1c94
   11974:	movt	r3, #1
   11978:	movw	r1, #9332	; 0x2474
   1197c:	movt	r1, #1
   11980:	movw	r0, #9412	; 0x24c4
   11984:	movt	r0, #1
   11988:	mov	r2, #230	; 0xe6
   1198c:	bl	10e60 <__assert_fail@plt>
   11990:	bl	10e3c <coda_get_errno@plt>
   11994:	ldr	r0, [r0]
   11998:	mvn	r6, #0
   1199c:	bl	10e0c <coda_errno_to_string@plt>
   119a0:	mov	r2, r0
   119a4:	movw	r1, #9188	; 0x23e4
   119a8:	movt	r1, #1
   119ac:	mvn	r0, #400	; 0x190
   119b0:	bl	10cd4 <coda_set_error@plt>
   119b4:	b	117f4 <_start@@Base+0x504>
   119b8:	bl	10e3c <coda_get_errno@plt>
   119bc:	ldr	r0, [r0]
   119c0:	mvn	r6, #0
   119c4:	bl	10e0c <coda_errno_to_string@plt>
   119c8:	mov	r2, r0
   119cc:	movw	r1, #9148	; 0x23bc
   119d0:	movt	r1, #1
   119d4:	mvn	r0, #400	; 0x190
   119d8:	bl	10cd4 <coda_set_error@plt>
   119dc:	b	117f4 <_start@@Base+0x504>
   119e0:	bl	10e3c <coda_get_errno@plt>
   119e4:	ldr	r0, [r0]
   119e8:	mvn	r6, #0
   119ec:	bl	10e0c <coda_errno_to_string@plt>
   119f0:	mov	r2, r0
   119f4:	movw	r1, #9244	; 0x241c
   119f8:	movt	r1, #1
   119fc:	mvn	r0, #400	; 0x190
   11a00:	bl	10cd4 <coda_set_error@plt>
   11a04:	b	117f4 <_start@@Base+0x504>
   11a08:	bl	10e3c <coda_get_errno@plt>
   11a0c:	ldr	r0, [r0]
   11a10:	mvn	r6, #0
   11a14:	bl	10e0c <coda_errno_to_string@plt>
   11a18:	mov	r2, r0
   11a1c:	movw	r1, #9108	; 0x2394
   11a20:	movt	r1, #1
   11a24:	mvn	r0, #400	; 0x190
   11a28:	bl	10cd4 <coda_set_error@plt>
   11a2c:	b	117f4 <_start@@Base+0x504>
   11a30:	mov	r6, #0
   11a34:	b	117f4 <_start@@Base+0x504>
   11a38:	mov	r3, #0
   11a3c:	strd	r4, [sp, #-12]!
   11a40:	mov	r5, r0
   11a44:	str	lr, [sp, #8]
   11a48:	sub	sp, sp, #532	; 0x214
   11a4c:	add	r1, sp, #4
   11a50:	str	r3, [sp, #4]
   11a54:	bl	10ce0 <coda_open@plt>
   11a58:	cmp	r0, #0
   11a5c:	movne	r4, #1
   11a60:	beq	11a78 <_start@@Base+0x788>
   11a64:	mov	r0, r4
   11a68:	add	sp, sp, #532	; 0x214
   11a6c:	ldrd	r4, [sp]
   11a70:	add	sp, sp, #8
   11a74:	pop	{pc}		; (ldr pc, [sp], #4)
   11a78:	add	r0, sp, #8
   11a7c:	ldr	r1, [sp, #4]
   11a80:	bl	10d28 <coda_cursor_set_product@plt>
   11a84:	subs	r4, r0, #0
   11a88:	bne	11b08 <_start@@Base+0x818>
   11a8c:	movw	r3, #12472	; 0x30b8
   11a90:	movt	r3, #2
   11a94:	ldr	r0, [r3, #8]
   11a98:	cmp	r0, #0
   11a9c:	beq	11ab0 <_start@@Base+0x7c0>
   11aa0:	add	r1, sp, #8
   11aa4:	bl	10e00 <coda_expression_eval_node@plt>
   11aa8:	cmp	r0, #0
   11aac:	bne	11b18 <_start@@Base+0x828>
   11ab0:	add	r0, sp, #8
   11ab4:	bl	115a4 <_start@@Base+0x2b4>
   11ab8:	cmp	r0, #0
   11abc:	bne	11ad4 <_start@@Base+0x7e4>
   11ac0:	ldr	r0, [sp, #4]
   11ac4:	bl	10ddc <coda_close@plt>
   11ac8:	adds	r4, r0, #0
   11acc:	movne	r4, #1
   11ad0:	b	11a64 <_start@@Base+0x774>
   11ad4:	movw	r3, #12464	; 0x30b0
   11ad8:	movt	r3, #2
   11adc:	ldr	r4, [r3]
   11ae0:	bl	10e3c <coda_get_errno@plt>
   11ae4:	ldr	r0, [r0]
   11ae8:	bl	10e0c <coda_errno_to_string@plt>
   11aec:	mov	r2, r0
   11af0:	mov	r3, r5
   11af4:	movw	r1, #9464	; 0x24f8
   11af8:	movt	r1, #1
   11afc:	mov	r0, r4
   11b00:	bl	10d94 <fprintf@plt>
   11b04:	b	11ac0 <_start@@Base+0x7d0>
   11b08:	ldr	r0, [sp, #4]
   11b0c:	mov	r4, #1
   11b10:	bl	10ddc <coda_close@plt>
   11b14:	b	11a64 <_start@@Base+0x774>
   11b18:	movw	r3, #12464	; 0x30b0
   11b1c:	movt	r3, #2
   11b20:	ldr	r5, [r3]
   11b24:	bl	10e3c <coda_get_errno@plt>
   11b28:	ldr	r0, [r0]
   11b2c:	bl	10e0c <coda_errno_to_string@plt>
   11b30:	mov	r2, r0
   11b34:	movw	r1, #9416	; 0x24c8
   11b38:	movt	r1, #1
   11b3c:	mov	r0, r5
   11b40:	bl	10d94 <fprintf@plt>
   11b44:	ldr	r0, [sp, #4]
   11b48:	bl	10ddc <coda_close@plt>
   11b4c:	b	11a64 <_start@@Base+0x774>

00011b50 <callback@@Base>:
   11b50:	cmp	r1, #0
   11b54:	mov	ip, r0
   11b58:	str	r4, [sp, #-8]!
   11b5c:	str	lr, [sp, #4]
   11b60:	beq	11b8c <callback@@Base+0x3c>
   11b64:	cmp	r1, #2
   11b68:	beq	11be8 <callback@@Base+0x98>
   11b6c:	cmp	r1, #1
   11b70:	beq	11bb8 <callback@@Base+0x68>
   11b74:	cmp	r1, #4
   11b78:	beq	11c14 <callback@@Base+0xc4>
   11b7c:	ldr	r4, [sp]
   11b80:	add	sp, sp, #4
   11b84:	mov	r0, #0
   11b88:	pop	{pc}		; (ldr pc, [sp], #4)
   11b8c:	movw	r0, #12464	; 0x30b0
   11b90:	movt	r0, #2
   11b94:	mov	r3, ip
   11b98:	movw	r1, #9464	; 0x24f8
   11b9c:	movt	r1, #1
   11ba0:	ldr	r0, [r0]
   11ba4:	bl	10d94 <fprintf@plt>
   11ba8:	ldr	r4, [sp]
   11bac:	add	sp, sp, #4
   11bb0:	mov	r0, #0
   11bb4:	pop	{pc}		; (ldr pc, [sp], #4)
   11bb8:	movw	r1, #12464	; 0x30b0
   11bbc:	movt	r1, #2
   11bc0:	mov	r3, r2
   11bc4:	mov	r2, r0
   11bc8:	ldr	r0, [r1]
   11bcc:	movw	r1, #9524	; 0x2534
   11bd0:	movt	r1, #1
   11bd4:	bl	10d94 <fprintf@plt>
   11bd8:	ldr	r4, [sp]
   11bdc:	add	sp, sp, #4
   11be0:	mov	r0, #0
   11be4:	pop	{pc}		; (ldr pc, [sp], #4)
   11be8:	movw	r3, #12464	; 0x30b0
   11bec:	movt	r3, #2
   11bf0:	mov	r2, r0
   11bf4:	movw	r1, #9484	; 0x250c
   11bf8:	movt	r1, #1
   11bfc:	ldr	r0, [r3]
   11c00:	bl	10d94 <fprintf@plt>
   11c04:	ldr	r4, [sp]
   11c08:	add	sp, sp, #4
   11c0c:	mov	r0, #0
   11c10:	pop	{pc}		; (ldr pc, [sp], #4)
   11c14:	ldr	r4, [sp]
   11c18:	ldr	lr, [sp, #4]
   11c1c:	add	sp, sp, #8
   11c20:	b	11a38 <_start@@Base+0x748>

00011c24 <__libc_csu_init@@Base>:
   11c24:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   11c28:	mov	r7, r0
   11c2c:	ldr	r6, [pc, #72]	; 11c7c <__libc_csu_init@@Base+0x58>
   11c30:	ldr	r5, [pc, #72]	; 11c80 <__libc_csu_init@@Base+0x5c>
   11c34:	add	r6, pc, r6
   11c38:	add	r5, pc, r5
   11c3c:	sub	r6, r6, r5
   11c40:	mov	r8, r1
   11c44:	mov	r9, r2
   11c48:	bl	10c84 <coda_match_filefilter@plt-0x20>
   11c4c:	asrs	r6, r6, #2
   11c50:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   11c54:	mov	r4, #0
   11c58:	add	r4, r4, #1
   11c5c:	ldr	r3, [r5], #4
   11c60:	mov	r2, r9
   11c64:	mov	r1, r8
   11c68:	mov	r0, r7
   11c6c:	blx	r3
   11c70:	cmp	r6, r4
   11c74:	bne	11c58 <__libc_csu_init@@Base+0x34>
   11c78:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   11c7c:	andeq	r1, r1, r0, asr #5
   11c80:			; <UNDEFINED> instruction: 0x000112b8

00011c84 <__libc_csu_fini@@Base>:
   11c84:	bx	lr

Disassembly of section .fini:

00011c88 <.fini>:
   11c88:	push	{r3, lr}
   11c8c:	pop	{r3, pc}
