
../compcert-repos/stcorp-coda-3a25f25/CMakeFiles/coda_static.dir/libcoda/coda-cursor-read.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <coda_cursor_read_int8>:
       0:	push	{r4, sl, fp, lr}
       4:	add	fp, sp, #8
       8:	cmp	r0, #0
       c:	beq	a8 <coda_cursor_read_int8+0xa8>
      10:	mov	r2, r0
      14:	ldr	r0, [r0, #4]
      18:	cmp	r0, #1
      1c:	blt	a8 <coda_cursor_read_int8+0xa8>
      20:	add	r0, r2, r0, lsl #4
      24:	ldr	r4, [r0, #-8]
      28:	cmp	r4, #0
      2c:	beq	a8 <coda_cursor_read_int8+0xa8>
      30:	cmp	r1, #0
      34:	beq	cc <coda_cursor_read_int8+0xcc>
      38:	ldr	r0, [r4]
      3c:	cmp	r0, #99	; 0x63
      40:	ldrhi	r4, [r4, #4]
      44:	bl	0 <__aeabi_read_tp>
      48:	ldr	r3, [r4, #8]
      4c:	bic	r3, r3, #1
      50:	cmp	r3, #2
      54:	bne	7c <coda_cursor_read_int8+0x7c>
      58:	ldr	r3, [pc, #152]	; f8 <coda_cursor_read_int8+0xf8>
      5c:	ldr	r3, [pc, r3]
      60:	ldr	r0, [r0, r3]
      64:	cmp	r0, #0
      68:	beq	7c <coda_cursor_read_int8+0x7c>
      6c:	ldr	r3, [r4, #48]	; 0x30
      70:	mov	r0, #9
      74:	cmp	r3, #0
      78:	bne	88 <coda_cursor_read_int8+0x88>
      7c:	ldr	r0, [r4, #12]
      80:	cmp	r0, #0
      84:	beq	e4 <coda_cursor_read_int8+0xe4>
      88:	bl	0 <coda_type_get_native_type_name>
      8c:	movw	r1, #0
      90:	mov	r2, r0
      94:	mvn	r0, #104	; 0x68
      98:	movt	r1, #0
      9c:	bl	0 <coda_set_error>
      a0:	mvn	r0, #0
      a4:	pop	{r4, sl, fp, pc}
      a8:	movw	r1, #0
      ac:	movw	r2, #0
      b0:	mvn	r0, #99	; 0x63
      b4:	movw	r3, #1773	; 0x6ed
      b8:	movt	r1, #0
      bc:	movt	r2, #0
      c0:	bl	0 <coda_set_error>
      c4:	mvn	r0, #0
      c8:	pop	{r4, sl, fp, pc}
      cc:	movw	r1, #0
      d0:	movw	r2, #0
      d4:	mvn	r0, #99	; 0x63
      d8:	movw	r3, #1778	; 0x6f2
      dc:	movt	r1, #0
      e0:	b	bc <coda_cursor_read_int8+0xbc>
      e4:	mov	r0, r2
      e8:	bl	fc <read_int8>
      ec:	cmp	r0, #0
      f0:	mvnne	r0, #0
      f4:	pop	{r4, sl, fp, pc}
      f8:	.word	0x00000094

000000fc <read_int8>:
      fc:	push	{fp, lr}
     100:	mov	fp, sp
     104:	ldr	r2, [r0, #4]
     108:	add	r2, r0, r2, lsl #4
     10c:	ldr	r2, [r2, #-8]
     110:	ldr	r2, [r2]
     114:	sub	r3, r2, #100	; 0x64
     118:	cmp	r3, #4
     11c:	bhi	144 <read_int8+0x48>
     120:	add	r2, pc, #0
     124:	ldr	pc, [r2, r3, lsl #2]
     128:	.word	0x0000013c
     12c:	.word	0x00000174
     130:	.word	0x00000164
     134:	.word	0x0000016c
     138:	.word	0x0000015c
     13c:	pop	{fp, lr}
     140:	b	0 <coda_mem_cursor_read_int8>
     144:	cmp	r2, #1
     148:	beq	188 <read_int8+0x8c>
     14c:	cmp	r2, #0
     150:	bne	190 <read_int8+0x94>
     154:	pop	{fp, lr}
     158:	b	0 <coda_ascii_cursor_read_int8>
     15c:	pop	{fp, lr}
     160:	b	0 <coda_netcdf_cursor_read_int8>
     164:	mvn	r0, #12
     168:	b	178 <read_int8+0x7c>
     16c:	pop	{fp, lr}
     170:	b	0 <coda_cdf_cursor_read_int8>
     174:	mvn	r0, #10
     178:	mov	r1, #0
     17c:	bl	0 <coda_set_error>
     180:	mvn	r0, #0
     184:	pop	{fp, pc}
     188:	pop	{fp, lr}
     18c:	b	0 <coda_bin_cursor_read_int8>
     190:	movw	r0, #0
     194:	movw	r1, #0
     198:	movw	r3, #0
     19c:	movw	r2, #359	; 0x167
     1a0:	movt	r0, #0
     1a4:	movt	r1, #0
     1a8:	movt	r3, #0
     1ac:	bl	0 <__assert_fail>

000001b0 <coda_cursor_read_uint8>:
     1b0:	push	{r4, sl, fp, lr}
     1b4:	add	fp, sp, #8
     1b8:	cmp	r0, #0
     1bc:	beq	24c <coda_cursor_read_uint8+0x9c>
     1c0:	mov	r2, r0
     1c4:	ldr	r0, [r0, #4]
     1c8:	cmp	r0, #1
     1cc:	blt	24c <coda_cursor_read_uint8+0x9c>
     1d0:	add	r0, r2, r0, lsl #4
     1d4:	ldr	r4, [r0, #-8]
     1d8:	cmp	r4, #0
     1dc:	beq	24c <coda_cursor_read_uint8+0x9c>
     1e0:	cmp	r1, #0
     1e4:	beq	290 <coda_cursor_read_uint8+0xe0>
     1e8:	ldr	r0, [r4]
     1ec:	cmp	r0, #99	; 0x63
     1f0:	ldrhi	r4, [r4, #4]
     1f4:	bl	0 <__aeabi_read_tp>
     1f8:	ldr	r3, [r4, #8]
     1fc:	bic	r3, r3, #1
     200:	cmp	r3, #2
     204:	bne	22c <coda_cursor_read_uint8+0x7c>
     208:	ldr	r3, [pc, #152]	; 2a8 <coda_cursor_read_uint8+0xf8>
     20c:	ldr	r3, [pc, r3]
     210:	ldr	r0, [r0, r3]
     214:	cmp	r0, #0
     218:	beq	22c <coda_cursor_read_uint8+0x7c>
     21c:	ldr	r3, [r4, #48]	; 0x30
     220:	mov	r0, #9
     224:	cmp	r3, #0
     228:	bne	270 <coda_cursor_read_uint8+0xc0>
     22c:	ldr	r0, [r4, #12]
     230:	cmp	r0, #1
     234:	bne	270 <coda_cursor_read_uint8+0xc0>
     238:	mov	r0, r2
     23c:	bl	2ac <read_uint8>
     240:	cmp	r0, #0
     244:	mvnne	r0, #0
     248:	pop	{r4, sl, fp, pc}
     24c:	movw	r1, #0
     250:	movw	r2, #0
     254:	mvn	r0, #99	; 0x63
     258:	movw	r3, #1820	; 0x71c
     25c:	movt	r1, #0
     260:	movt	r2, #0
     264:	bl	0 <coda_set_error>
     268:	mvn	r0, #0
     26c:	pop	{r4, sl, fp, pc}
     270:	bl	0 <coda_type_get_native_type_name>
     274:	movw	r1, #0
     278:	mov	r2, r0
     27c:	mvn	r0, #104	; 0x68
     280:	movt	r1, #0
     284:	bl	0 <coda_set_error>
     288:	mvn	r0, #0
     28c:	pop	{r4, sl, fp, pc}
     290:	movw	r1, #0
     294:	movw	r2, #0
     298:	mvn	r0, #99	; 0x63
     29c:	movw	r3, #1825	; 0x721
     2a0:	movt	r1, #0
     2a4:	b	260 <coda_cursor_read_uint8+0xb0>
     2a8:	.word	0x00000094

000002ac <read_uint8>:
     2ac:	push	{fp, lr}
     2b0:	mov	fp, sp
     2b4:	ldr	r2, [r0, #4]
     2b8:	add	r2, r0, r2, lsl #4
     2bc:	ldr	r2, [r2, #-8]
     2c0:	ldr	r2, [r2]
     2c4:	sub	r3, r2, #100	; 0x64
     2c8:	cmp	r3, #3
     2cc:	bhi	2f0 <read_uint8+0x44>
     2d0:	add	r2, pc, #0
     2d4:	ldr	pc, [r2, r3, lsl #2]
     2d8:	.word	0x000002e8
     2dc:	.word	0x00000310
     2e0:	.word	0x00000308
     2e4:	.word	0x00000324
     2e8:	pop	{fp, lr}
     2ec:	b	0 <coda_mem_cursor_read_uint8>
     2f0:	cmp	r2, #1
     2f4:	beq	32c <read_uint8+0x80>
     2f8:	cmp	r2, #0
     2fc:	bne	334 <read_uint8+0x88>
     300:	pop	{fp, lr}
     304:	b	0 <coda_ascii_cursor_read_uint8>
     308:	mvn	r0, #12
     30c:	b	314 <read_uint8+0x68>
     310:	mvn	r0, #10
     314:	mov	r1, #0
     318:	bl	0 <coda_set_error>
     31c:	mvn	r0, #0
     320:	pop	{fp, pc}
     324:	pop	{fp, lr}
     328:	b	0 <coda_cdf_cursor_read_uint8>
     32c:	pop	{fp, lr}
     330:	b	0 <coda_bin_cursor_read_uint8>
     334:	movw	r0, #0
     338:	movw	r1, #0
     33c:	movw	r3, #0
     340:	movw	r2, #394	; 0x18a
     344:	movt	r0, #0
     348:	movt	r1, #0
     34c:	movt	r3, #0
     350:	bl	0 <__assert_fail>

00000354 <coda_cursor_read_int16>:
     354:	push	{r4, sl, fp, lr}
     358:	add	fp, sp, #8
     35c:	sub	sp, sp, #8
     360:	cmp	r0, #0
     364:	beq	410 <coda_cursor_read_int16+0xbc>
     368:	mov	r2, r0
     36c:	ldr	r0, [r0, #4]
     370:	cmp	r0, #1
     374:	blt	410 <coda_cursor_read_int16+0xbc>
     378:	add	r0, r2, r0, lsl #4
     37c:	mov	r4, r1
     380:	ldr	r1, [r0, #-8]
     384:	cmp	r1, #0
     388:	beq	410 <coda_cursor_read_int16+0xbc>
     38c:	cmp	r4, #0
     390:	beq	438 <coda_cursor_read_int16+0xe4>
     394:	ldr	r0, [r1]
     398:	cmp	r0, #99	; 0x63
     39c:	ldrhi	r1, [r1, #4]
     3a0:	bl	0 <__aeabi_read_tp>
     3a4:	ldr	r3, [r1, #8]
     3a8:	bic	r3, r3, #1
     3ac:	cmp	r3, #2
     3b0:	bne	3d8 <coda_cursor_read_int16+0x84>
     3b4:	ldr	r3, [pc, #248]	; 4b4 <coda_cursor_read_int16+0x160>
     3b8:	ldr	r3, [pc, r3]
     3bc:	ldr	r0, [r0, r3]
     3c0:	cmp	r0, #0
     3c4:	beq	3d8 <coda_cursor_read_int16+0x84>
     3c8:	ldr	r3, [r1, #48]	; 0x30
     3cc:	mov	r0, #9
     3d0:	cmp	r3, #0
     3d4:	bne	450 <coda_cursor_read_int16+0xfc>
     3d8:	ldr	r0, [r1, #12]
     3dc:	cmp	r0, #2
     3e0:	beq	46c <coda_cursor_read_int16+0x118>
     3e4:	cmp	r0, #1
     3e8:	beq	48c <coda_cursor_read_int16+0x138>
     3ec:	cmp	r0, #0
     3f0:	bne	450 <coda_cursor_read_int16+0xfc>
     3f4:	add	r1, sp, #7
     3f8:	mov	r0, r2
     3fc:	bl	fc <read_int8>
     400:	cmp	r0, #0
     404:	bne	42c <coda_cursor_read_int16+0xd8>
     408:	ldrsb	r0, [sp, #7]
     40c:	b	4a4 <coda_cursor_read_int16+0x150>
     410:	movw	r1, #0
     414:	movw	r2, #0
     418:	mvn	r0, #99	; 0x63
     41c:	movw	r3, #1869	; 0x74d
     420:	movt	r1, #0
     424:	movt	r2, #0
     428:	bl	0 <coda_set_error>
     42c:	mvn	r0, #0
     430:	sub	sp, fp, #8
     434:	pop	{r4, sl, fp, pc}
     438:	movw	r1, #0
     43c:	movw	r2, #0
     440:	mvn	r0, #99	; 0x63
     444:	movw	r3, #1874	; 0x752
     448:	movt	r1, #0
     44c:	b	424 <coda_cursor_read_int16+0xd0>
     450:	bl	0 <coda_type_get_native_type_name>
     454:	movw	r1, #0
     458:	mov	r2, r0
     45c:	mvn	r0, #104	; 0x68
     460:	movt	r1, #0
     464:	bl	0 <coda_set_error>
     468:	b	42c <coda_cursor_read_int16+0xd8>
     46c:	mov	r0, r2
     470:	mov	r1, r4
     474:	bl	4b8 <read_int16>
     478:	mov	r1, r0
     47c:	mvn	r0, #0
     480:	cmp	r1, #0
     484:	bne	430 <coda_cursor_read_int16+0xdc>
     488:	b	4a8 <coda_cursor_read_int16+0x154>
     48c:	add	r1, sp, #6
     490:	mov	r0, r2
     494:	bl	2ac <read_uint8>
     498:	cmp	r0, #0
     49c:	bne	42c <coda_cursor_read_int16+0xd8>
     4a0:	ldrb	r0, [sp, #6]
     4a4:	strh	r0, [r4]
     4a8:	mov	r0, #0
     4ac:	sub	sp, fp, #8
     4b0:	pop	{r4, sl, fp, pc}
     4b4:	.word	0x000000f4

000004b8 <read_int16>:
     4b8:	push	{fp, lr}
     4bc:	mov	fp, sp
     4c0:	ldr	r2, [r0, #4]
     4c4:	add	r2, r0, r2, lsl #4
     4c8:	ldr	r2, [r2, #-8]
     4cc:	ldr	r3, [r2]
     4d0:	sub	r2, r3, #100	; 0x64
     4d4:	cmp	r2, #5
     4d8:	bhi	504 <read_int16+0x4c>
     4dc:	add	r3, pc, #0
     4e0:	ldr	pc, [r3, r2, lsl #2]
     4e4:	.word	0x000004fc
     4e8:	.word	0x00000538
     4ec:	.word	0x00000530
     4f0:	.word	0x00000550
     4f4:	.word	0x00000528
     4f8:	.word	0x00000558
     4fc:	pop	{fp, lr}
     500:	b	0 <coda_mem_cursor_read_int16>
     504:	cmp	r3, #1
     508:	beq	520 <read_int16+0x68>
     50c:	mov	r2, #0
     510:	cmp	r3, #0
     514:	bne	548 <read_int16+0x90>
     518:	pop	{fp, lr}
     51c:	b	0 <coda_ascii_cursor_read_int16>
     520:	pop	{fp, lr}
     524:	b	0 <coda_bin_cursor_read_int16>
     528:	pop	{fp, lr}
     52c:	b	0 <coda_netcdf_cursor_read_int16>
     530:	mvn	r0, #12
     534:	b	53c <read_int16+0x84>
     538:	mvn	r0, #10
     53c:	mov	r1, #0
     540:	bl	0 <coda_set_error>
     544:	mvn	r2, #0
     548:	mov	r0, r2
     54c:	pop	{fp, pc}
     550:	pop	{fp, lr}
     554:	b	0 <coda_cdf_cursor_read_int16>
     558:	movw	r0, #0
     55c:	movw	r1, #0
     560:	movw	r3, #0
     564:	movw	r2, #427	; 0x1ab
     568:	movt	r0, #0
     56c:	movt	r1, #0
     570:	movt	r3, #0
     574:	bl	0 <__assert_fail>

00000578 <coda_cursor_read_uint16>:
     578:	push	{r4, sl, fp, lr}
     57c:	add	fp, sp, #8
     580:	sub	sp, sp, #8
     584:	cmp	r0, #0
     588:	beq	638 <coda_cursor_read_uint16+0xc0>
     58c:	mov	r2, r0
     590:	ldr	r0, [r0, #4]
     594:	cmp	r0, #1
     598:	blt	638 <coda_cursor_read_uint16+0xc0>
     59c:	add	r0, r2, r0, lsl #4
     5a0:	mov	r4, r1
     5a4:	ldr	r1, [r0, #-8]
     5a8:	cmp	r1, #0
     5ac:	beq	638 <coda_cursor_read_uint16+0xc0>
     5b0:	cmp	r4, #0
     5b4:	beq	660 <coda_cursor_read_uint16+0xe8>
     5b8:	ldr	r0, [r1]
     5bc:	cmp	r0, #99	; 0x63
     5c0:	ldrhi	r1, [r1, #4]
     5c4:	bl	0 <__aeabi_read_tp>
     5c8:	ldr	r3, [r1, #8]
     5cc:	bic	r3, r3, #1
     5d0:	cmp	r3, #2
     5d4:	bne	5fc <coda_cursor_read_uint16+0x84>
     5d8:	ldr	r3, [pc, #216]	; 6b8 <coda_cursor_read_uint16+0x140>
     5dc:	ldr	r3, [pc, r3]
     5e0:	ldr	r0, [r0, r3]
     5e4:	cmp	r0, #0
     5e8:	beq	5fc <coda_cursor_read_uint16+0x84>
     5ec:	ldr	r3, [r1, #48]	; 0x30
     5f0:	mov	r0, #9
     5f4:	cmp	r3, #0
     5f8:	bne	678 <coda_cursor_read_uint16+0x100>
     5fc:	ldr	r0, [r1, #12]
     600:	cmp	r0, #3
     604:	beq	694 <coda_cursor_read_uint16+0x11c>
     608:	cmp	r0, #1
     60c:	bne	678 <coda_cursor_read_uint16+0x100>
     610:	add	r1, sp, #7
     614:	mov	r0, r2
     618:	bl	2ac <read_uint8>
     61c:	cmp	r0, #0
     620:	bne	654 <coda_cursor_read_uint16+0xdc>
     624:	ldrb	r0, [sp, #7]
     628:	strh	r0, [r4]
     62c:	mov	r0, #0
     630:	sub	sp, fp, #8
     634:	pop	{r4, sl, fp, pc}
     638:	movw	r1, #0
     63c:	movw	r2, #0
     640:	mvn	r0, #99	; 0x63
     644:	movw	r3, #1939	; 0x793
     648:	movt	r1, #0
     64c:	movt	r2, #0
     650:	bl	0 <coda_set_error>
     654:	mvn	r0, #0
     658:	sub	sp, fp, #8
     65c:	pop	{r4, sl, fp, pc}
     660:	movw	r1, #0
     664:	movw	r2, #0
     668:	mvn	r0, #99	; 0x63
     66c:	movw	r3, #1944	; 0x798
     670:	movt	r1, #0
     674:	b	64c <coda_cursor_read_uint16+0xd4>
     678:	bl	0 <coda_type_get_native_type_name>
     67c:	movw	r1, #0
     680:	mov	r2, r0
     684:	mvn	r0, #104	; 0x68
     688:	movt	r1, #0
     68c:	bl	0 <coda_set_error>
     690:	b	654 <coda_cursor_read_uint16+0xdc>
     694:	mov	r0, r2
     698:	mov	r1, r4
     69c:	bl	6bc <read_uint16>
     6a0:	mov	r1, r0
     6a4:	mvn	r0, #0
     6a8:	cmp	r1, #0
     6ac:	moveq	r0, #0
     6b0:	sub	sp, fp, #8
     6b4:	pop	{r4, sl, fp, pc}
     6b8:	.word	0x000000d4

000006bc <read_uint16>:
     6bc:	push	{fp, lr}
     6c0:	mov	fp, sp
     6c4:	ldr	r2, [r0, #4]
     6c8:	add	r2, r0, r2, lsl #4
     6cc:	ldr	r2, [r2, #-8]
     6d0:	ldr	r2, [r2]
     6d4:	sub	r3, r2, #100	; 0x64
     6d8:	cmp	r3, #3
     6dc:	bhi	700 <read_uint16+0x44>
     6e0:	add	r2, pc, #0
     6e4:	ldr	pc, [r2, r3, lsl #2]
     6e8:	.word	0x000006f8
     6ec:	.word	0x00000720
     6f0:	.word	0x00000718
     6f4:	.word	0x00000734
     6f8:	pop	{fp, lr}
     6fc:	b	0 <coda_mem_cursor_read_uint16>
     700:	cmp	r2, #1
     704:	beq	73c <read_uint16+0x80>
     708:	cmp	r2, #0
     70c:	bne	744 <read_uint16+0x88>
     710:	pop	{fp, lr}
     714:	b	0 <coda_ascii_cursor_read_uint16>
     718:	mvn	r0, #12
     71c:	b	724 <read_uint16+0x68>
     720:	mvn	r0, #10
     724:	mov	r1, #0
     728:	bl	0 <coda_set_error>
     72c:	mvn	r0, #0
     730:	pop	{fp, pc}
     734:	pop	{fp, lr}
     738:	b	0 <coda_cdf_cursor_read_uint16>
     73c:	pop	{fp, lr}
     740:	b	0 <coda_bin_cursor_read_uint16>
     744:	movw	r0, #0
     748:	movw	r1, #0
     74c:	movw	r3, #0
     750:	movw	r2, #465	; 0x1d1
     754:	movt	r0, #0
     758:	movt	r1, #0
     75c:	movt	r3, #0
     760:	bl	0 <__assert_fail>

00000764 <coda_cursor_read_int32>:
     764:	push	{r4, sl, fp, lr}
     768:	add	fp, sp, #8
     76c:	sub	sp, sp, #8
     770:	cmp	r0, #0
     774:	beq	82c <coda_cursor_read_int32+0xc8>
     778:	mov	r2, r0
     77c:	ldr	r0, [r0, #4]
     780:	cmp	r0, #1
     784:	blt	82c <coda_cursor_read_int32+0xc8>
     788:	add	r0, r2, r0, lsl #4
     78c:	mov	r4, r1
     790:	ldr	r1, [r0, #-8]
     794:	cmp	r1, #0
     798:	beq	82c <coda_cursor_read_int32+0xc8>
     79c:	cmp	r4, #0
     7a0:	beq	854 <coda_cursor_read_int32+0xf0>
     7a4:	ldr	r0, [r1]
     7a8:	cmp	r0, #99	; 0x63
     7ac:	ldrhi	r1, [r1, #4]
     7b0:	bl	0 <__aeabi_read_tp>
     7b4:	ldr	r3, [r1, #8]
     7b8:	bic	r3, r3, #1
     7bc:	cmp	r3, #2
     7c0:	bne	7e8 <coda_cursor_read_int32+0x84>
     7c4:	ldr	r3, [pc, #320]	; 90c <coda_cursor_read_int32+0x1a8>
     7c8:	ldr	r3, [pc, r3]
     7cc:	ldr	r0, [r0, r3]
     7d0:	cmp	r0, #0
     7d4:	beq	7e8 <coda_cursor_read_int32+0x84>
     7d8:	ldr	r3, [r1, #48]	; 0x30
     7dc:	mov	r0, #9
     7e0:	cmp	r3, #0
     7e4:	bne	86c <coda_cursor_read_int32+0x108>
     7e8:	ldr	r0, [r1, #12]
     7ec:	cmp	r0, #4
     7f0:	bhi	86c <coda_cursor_read_int32+0x108>
     7f4:	add	r1, pc, #0
     7f8:	ldr	pc, [r1, r0, lsl #2]
     7fc:	.word	0x00000810
     800:	.word	0x00000888
     804:	.word	0x000008a4
     808:	.word	0x000008c0
     80c:	.word	0x000008e8
     810:	add	r1, sp, #7
     814:	mov	r0, r2
     818:	bl	fc <read_int8>
     81c:	cmp	r0, #0
     820:	bne	848 <coda_cursor_read_int32+0xe4>
     824:	ldrsb	r0, [sp, #7]
     828:	b	8d8 <coda_cursor_read_int32+0x174>
     82c:	movw	r1, #0
     830:	movw	r2, #0
     834:	mvn	r0, #99	; 0x63
     838:	movw	r3, #2001	; 0x7d1
     83c:	movt	r1, #0
     840:	movt	r2, #0
     844:	bl	0 <coda_set_error>
     848:	mvn	r0, #0
     84c:	sub	sp, fp, #8
     850:	pop	{r4, sl, fp, pc}
     854:	movw	r1, #0
     858:	movw	r2, #0
     85c:	mvn	r0, #99	; 0x63
     860:	movw	r3, #2006	; 0x7d6
     864:	movt	r1, #0
     868:	b	840 <coda_cursor_read_int32+0xdc>
     86c:	bl	0 <coda_type_get_native_type_name>
     870:	movw	r1, #0
     874:	mov	r2, r0
     878:	mvn	r0, #104	; 0x68
     87c:	movt	r1, #0
     880:	bl	0 <coda_set_error>
     884:	b	848 <coda_cursor_read_int32+0xe4>
     888:	add	r1, sp, #6
     88c:	mov	r0, r2
     890:	bl	2ac <read_uint8>
     894:	cmp	r0, #0
     898:	bne	848 <coda_cursor_read_int32+0xe4>
     89c:	ldrb	r0, [sp, #6]
     8a0:	b	8d8 <coda_cursor_read_int32+0x174>
     8a4:	add	r1, sp, #4
     8a8:	mov	r0, r2
     8ac:	bl	4b8 <read_int16>
     8b0:	cmp	r0, #0
     8b4:	bne	848 <coda_cursor_read_int32+0xe4>
     8b8:	ldrsh	r0, [sp, #4]
     8bc:	b	8d8 <coda_cursor_read_int32+0x174>
     8c0:	add	r1, sp, #2
     8c4:	mov	r0, r2
     8c8:	bl	6bc <read_uint16>
     8cc:	cmp	r0, #0
     8d0:	bne	848 <coda_cursor_read_int32+0xe4>
     8d4:	ldrh	r0, [sp, #2]
     8d8:	str	r0, [r4]
     8dc:	mov	r0, #0
     8e0:	sub	sp, fp, #8
     8e4:	pop	{r4, sl, fp, pc}
     8e8:	mov	r0, r2
     8ec:	mov	r1, r4
     8f0:	bl	910 <read_int32>
     8f4:	mov	r1, r0
     8f8:	mvn	r0, #0
     8fc:	cmp	r1, #0
     900:	moveq	r0, #0
     904:	sub	sp, fp, #8
     908:	pop	{r4, sl, fp, pc}
     90c:	.word	0x0000013c

00000910 <read_int32>:
     910:	push	{fp, lr}
     914:	mov	fp, sp
     918:	ldr	r2, [r0, #4]
     91c:	add	r2, r0, r2, lsl #4
     920:	ldr	r2, [r2, #-8]
     924:	ldr	r3, [r2]
     928:	sub	r2, r3, #100	; 0x64
     92c:	cmp	r2, #5
     930:	bhi	95c <read_int32+0x4c>
     934:	add	r3, pc, #0
     938:	ldr	pc, [r3, r2, lsl #2]
     93c:	.word	0x00000954
     940:	.word	0x00000990
     944:	.word	0x00000988
     948:	.word	0x000009a8
     94c:	.word	0x00000980
     950:	.word	0x000009b0
     954:	pop	{fp, lr}
     958:	b	0 <coda_mem_cursor_read_int32>
     95c:	cmp	r3, #1
     960:	beq	978 <read_int32+0x68>
     964:	mov	r2, #0
     968:	cmp	r3, #0
     96c:	bne	9a0 <read_int32+0x90>
     970:	pop	{fp, lr}
     974:	b	0 <coda_ascii_cursor_read_int32>
     978:	pop	{fp, lr}
     97c:	b	0 <coda_bin_cursor_read_int32>
     980:	pop	{fp, lr}
     984:	b	0 <coda_netcdf_cursor_read_int32>
     988:	mvn	r0, #12
     98c:	b	994 <read_int32+0x84>
     990:	mvn	r0, #10
     994:	mov	r1, #0
     998:	bl	0 <coda_set_error>
     99c:	mvn	r2, #0
     9a0:	mov	r0, r2
     9a4:	pop	{fp, pc}
     9a8:	pop	{fp, lr}
     9ac:	b	0 <coda_cdf_cursor_read_int32>
     9b0:	movw	r0, #0
     9b4:	movw	r1, #0
     9b8:	movw	r3, #0
     9bc:	movw	r2, #499	; 0x1f3
     9c0:	movt	r0, #0
     9c4:	movt	r1, #0
     9c8:	movt	r3, #0
     9cc:	bl	0 <__assert_fail>

000009d0 <coda_cursor_read_uint32>:
     9d0:	push	{r4, sl, fp, lr}
     9d4:	add	fp, sp, #8
     9d8:	sub	sp, sp, #8
     9dc:	cmp	r0, #0
     9e0:	beq	a8c <coda_cursor_read_uint32+0xbc>
     9e4:	mov	r2, r0
     9e8:	ldr	r0, [r0, #4]
     9ec:	cmp	r0, #1
     9f0:	blt	a8c <coda_cursor_read_uint32+0xbc>
     9f4:	add	r0, r2, r0, lsl #4
     9f8:	mov	r4, r1
     9fc:	ldr	r1, [r0, #-8]
     a00:	cmp	r1, #0
     a04:	beq	a8c <coda_cursor_read_uint32+0xbc>
     a08:	cmp	r4, #0
     a0c:	beq	ab4 <coda_cursor_read_uint32+0xe4>
     a10:	ldr	r0, [r1]
     a14:	cmp	r0, #99	; 0x63
     a18:	ldrhi	r1, [r1, #4]
     a1c:	bl	0 <__aeabi_read_tp>
     a20:	ldr	r3, [r1, #8]
     a24:	bic	r3, r3, #1
     a28:	cmp	r3, #2
     a2c:	bne	a54 <coda_cursor_read_uint32+0x84>
     a30:	ldr	r3, [pc, #252]	; b34 <coda_cursor_read_uint32+0x164>
     a34:	ldr	r3, [pc, r3]
     a38:	ldr	r0, [r0, r3]
     a3c:	cmp	r0, #0
     a40:	beq	a54 <coda_cursor_read_uint32+0x84>
     a44:	ldr	r3, [r1, #48]	; 0x30
     a48:	mov	r0, #9
     a4c:	cmp	r3, #0
     a50:	bne	acc <coda_cursor_read_uint32+0xfc>
     a54:	ldr	r0, [r1, #12]
     a58:	cmp	r0, #5
     a5c:	beq	ae8 <coda_cursor_read_uint32+0x118>
     a60:	cmp	r0, #3
     a64:	beq	b0c <coda_cursor_read_uint32+0x13c>
     a68:	cmp	r0, #1
     a6c:	bne	acc <coda_cursor_read_uint32+0xfc>
     a70:	add	r1, sp, #7
     a74:	mov	r0, r2
     a78:	bl	2ac <read_uint8>
     a7c:	cmp	r0, #0
     a80:	bne	aa8 <coda_cursor_read_uint32+0xd8>
     a84:	ldrb	r0, [sp, #7]
     a88:	b	b24 <coda_cursor_read_uint32+0x154>
     a8c:	movw	r1, #0
     a90:	movw	r2, #0
     a94:	mvn	r0, #99	; 0x63
     a98:	movw	r3, #2094	; 0x82e
     a9c:	movt	r1, #0
     aa0:	movt	r2, #0
     aa4:	bl	0 <coda_set_error>
     aa8:	mvn	r0, #0
     aac:	sub	sp, fp, #8
     ab0:	pop	{r4, sl, fp, pc}
     ab4:	movw	r1, #0
     ab8:	movw	r2, #0
     abc:	mvn	r0, #99	; 0x63
     ac0:	movw	r3, #2099	; 0x833
     ac4:	movt	r1, #0
     ac8:	b	aa0 <coda_cursor_read_uint32+0xd0>
     acc:	bl	0 <coda_type_get_native_type_name>
     ad0:	movw	r1, #0
     ad4:	mov	r2, r0
     ad8:	mvn	r0, #104	; 0x68
     adc:	movt	r1, #0
     ae0:	bl	0 <coda_set_error>
     ae4:	b	aa8 <coda_cursor_read_uint32+0xd8>
     ae8:	mov	r0, r2
     aec:	mov	r1, r4
     af0:	bl	b38 <read_uint32>
     af4:	mov	r1, r0
     af8:	mvn	r0, #0
     afc:	cmp	r1, #0
     b00:	moveq	r0, #0
     b04:	sub	sp, fp, #8
     b08:	pop	{r4, sl, fp, pc}
     b0c:	add	r1, sp, #4
     b10:	mov	r0, r2
     b14:	bl	6bc <read_uint16>
     b18:	cmp	r0, #0
     b1c:	bne	aa8 <coda_cursor_read_uint32+0xd8>
     b20:	ldrh	r0, [sp, #4]
     b24:	str	r0, [r4]
     b28:	mov	r0, #0
     b2c:	sub	sp, fp, #8
     b30:	pop	{r4, sl, fp, pc}
     b34:	.word	0x000000f8

00000b38 <read_uint32>:
     b38:	push	{fp, lr}
     b3c:	mov	fp, sp
     b40:	ldr	r2, [r0, #4]
     b44:	add	r2, r0, r2, lsl #4
     b48:	ldr	r2, [r2, #-8]
     b4c:	ldr	r2, [r2]
     b50:	sub	r3, r2, #100	; 0x64
     b54:	cmp	r3, #3
     b58:	bhi	b7c <read_uint32+0x44>
     b5c:	add	r2, pc, #0
     b60:	ldr	pc, [r2, r3, lsl #2]
     b64:	.word	0x00000b74
     b68:	.word	0x00000b9c
     b6c:	.word	0x00000b94
     b70:	.word	0x00000bb0
     b74:	pop	{fp, lr}
     b78:	b	0 <coda_mem_cursor_read_uint32>
     b7c:	cmp	r2, #1
     b80:	beq	bb8 <read_uint32+0x80>
     b84:	cmp	r2, #0
     b88:	bne	bc0 <read_uint32+0x88>
     b8c:	pop	{fp, lr}
     b90:	b	0 <coda_ascii_cursor_read_uint32>
     b94:	mvn	r0, #12
     b98:	b	ba0 <read_uint32+0x68>
     b9c:	mvn	r0, #10
     ba0:	mov	r1, #0
     ba4:	bl	0 <coda_set_error>
     ba8:	mvn	r0, #0
     bac:	pop	{fp, pc}
     bb0:	pop	{fp, lr}
     bb4:	b	0 <coda_cdf_cursor_read_uint32>
     bb8:	pop	{fp, lr}
     bbc:	b	0 <coda_bin_cursor_read_uint32>
     bc0:	movw	r0, #0
     bc4:	movw	r1, #0
     bc8:	movw	r3, #0
     bcc:	movw	r2, #537	; 0x219
     bd0:	movt	r0, #0
     bd4:	movt	r1, #0
     bd8:	movt	r3, #0
     bdc:	bl	0 <__assert_fail>

00000be0 <coda_cursor_read_int64>:
     be0:	push	{r4, sl, fp, lr}
     be4:	add	fp, sp, #8
     be8:	sub	sp, sp, #16
     bec:	cmp	r0, #0
     bf0:	beq	cb0 <coda_cursor_read_int64+0xd0>
     bf4:	mov	r2, r0
     bf8:	ldr	r0, [r0, #4]
     bfc:	cmp	r0, #1
     c00:	blt	cb0 <coda_cursor_read_int64+0xd0>
     c04:	add	r0, r2, r0, lsl #4
     c08:	mov	r4, r1
     c0c:	ldr	r1, [r0, #-8]
     c10:	cmp	r1, #0
     c14:	beq	cb0 <coda_cursor_read_int64+0xd0>
     c18:	cmp	r4, #0
     c1c:	beq	cd8 <coda_cursor_read_int64+0xf8>
     c20:	ldr	r0, [r1]
     c24:	cmp	r0, #99	; 0x63
     c28:	ldrhi	r1, [r1, #4]
     c2c:	bl	0 <__aeabi_read_tp>
     c30:	ldr	r3, [r1, #8]
     c34:	bic	r3, r3, #1
     c38:	cmp	r3, #2
     c3c:	bne	c64 <coda_cursor_read_int64+0x84>
     c40:	ldr	r3, [pc, #392]	; dd0 <coda_cursor_read_int64+0x1f0>
     c44:	ldr	r3, [pc, r3]
     c48:	ldr	r0, [r0, r3]
     c4c:	cmp	r0, #0
     c50:	beq	c64 <coda_cursor_read_int64+0x84>
     c54:	ldr	r3, [r1, #48]	; 0x30
     c58:	mov	r0, #9
     c5c:	cmp	r3, #0
     c60:	bne	cf0 <coda_cursor_read_int64+0x110>
     c64:	ldr	r0, [r1, #12]
     c68:	cmp	r0, #6
     c6c:	bhi	cf0 <coda_cursor_read_int64+0x110>
     c70:	add	r1, pc, #0
     c74:	ldr	pc, [r1, r0, lsl #2]
     c78:	.word	0x00000c94
     c7c:	.word	0x00000d0c
     c80:	.word	0x00000d28
     c84:	.word	0x00000d44
     c88:	.word	0x00000d60
     c8c:	.word	0x00000d80
     c90:	.word	0x00000dac
     c94:	sub	r1, fp, #9
     c98:	mov	r0, r2
     c9c:	bl	fc <read_int8>
     ca0:	cmp	r0, #0
     ca4:	bne	ccc <coda_cursor_read_int64+0xec>
     ca8:	ldrsb	r0, [fp, #-9]
     cac:	b	d78 <coda_cursor_read_int64+0x198>
     cb0:	movw	r1, #0
     cb4:	movw	r2, #0
     cb8:	mvn	r0, #99	; 0x63
     cbc:	movw	r3, #2169	; 0x879
     cc0:	movt	r1, #0
     cc4:	movt	r2, #0
     cc8:	bl	0 <coda_set_error>
     ccc:	mvn	r0, #0
     cd0:	sub	sp, fp, #8
     cd4:	pop	{r4, sl, fp, pc}
     cd8:	movw	r1, #0
     cdc:	movw	r2, #0
     ce0:	mvn	r0, #99	; 0x63
     ce4:	movw	r3, #2174	; 0x87e
     ce8:	movt	r1, #0
     cec:	b	cc4 <coda_cursor_read_int64+0xe4>
     cf0:	bl	0 <coda_type_get_native_type_name>
     cf4:	movw	r1, #0
     cf8:	mov	r2, r0
     cfc:	mvn	r0, #104	; 0x68
     d00:	movt	r1, #0
     d04:	bl	0 <coda_set_error>
     d08:	b	ccc <coda_cursor_read_int64+0xec>
     d0c:	sub	r1, fp, #10
     d10:	mov	r0, r2
     d14:	bl	2ac <read_uint8>
     d18:	cmp	r0, #0
     d1c:	bne	ccc <coda_cursor_read_int64+0xec>
     d20:	ldrb	r0, [fp, #-10]
     d24:	b	d98 <coda_cursor_read_int64+0x1b8>
     d28:	add	r1, sp, #12
     d2c:	mov	r0, r2
     d30:	bl	4b8 <read_int16>
     d34:	cmp	r0, #0
     d38:	bne	ccc <coda_cursor_read_int64+0xec>
     d3c:	ldrsh	r0, [sp, #12]
     d40:	b	d78 <coda_cursor_read_int64+0x198>
     d44:	add	r1, sp, #10
     d48:	mov	r0, r2
     d4c:	bl	6bc <read_uint16>
     d50:	cmp	r0, #0
     d54:	bne	ccc <coda_cursor_read_int64+0xec>
     d58:	ldrh	r0, [sp, #10]
     d5c:	b	d98 <coda_cursor_read_int64+0x1b8>
     d60:	add	r1, sp, #4
     d64:	mov	r0, r2
     d68:	bl	910 <read_int32>
     d6c:	cmp	r0, #0
     d70:	bne	ccc <coda_cursor_read_int64+0xec>
     d74:	ldr	r0, [sp, #4]
     d78:	asr	r1, r0, #31
     d7c:	b	d9c <coda_cursor_read_int64+0x1bc>
     d80:	mov	r1, sp
     d84:	mov	r0, r2
     d88:	bl	b38 <read_uint32>
     d8c:	cmp	r0, #0
     d90:	bne	ccc <coda_cursor_read_int64+0xec>
     d94:	ldr	r0, [sp]
     d98:	mov	r1, #0
     d9c:	strd	r0, [r4]
     da0:	mov	r0, #0
     da4:	sub	sp, fp, #8
     da8:	pop	{r4, sl, fp, pc}
     dac:	mov	r0, r2
     db0:	mov	r1, r4
     db4:	bl	dd4 <read_int64>
     db8:	mov	r1, r0
     dbc:	mvn	r0, #0
     dc0:	cmp	r1, #0
     dc4:	moveq	r0, #0
     dc8:	sub	sp, fp, #8
     dcc:	pop	{r4, sl, fp, pc}
     dd0:	.word	0x00000184

00000dd4 <read_int64>:
     dd4:	push	{fp, lr}
     dd8:	mov	fp, sp
     ddc:	ldr	r2, [r0, #4]
     de0:	add	r2, r0, r2, lsl #4
     de4:	ldr	r2, [r2, #-8]
     de8:	ldr	r2, [r2]
     dec:	sub	r3, r2, #100	; 0x64
     df0:	cmp	r3, #3
     df4:	bhi	e18 <read_int64+0x44>
     df8:	add	r2, pc, #0
     dfc:	ldr	pc, [r2, r3, lsl #2]
     e00:	.word	0x00000e10
     e04:	.word	0x00000e38
     e08:	.word	0x00000e30
     e0c:	.word	0x00000e4c
     e10:	pop	{fp, lr}
     e14:	b	0 <coda_mem_cursor_read_int64>
     e18:	cmp	r2, #1
     e1c:	beq	e54 <read_int64+0x80>
     e20:	cmp	r2, #0
     e24:	bne	e5c <read_int64+0x88>
     e28:	pop	{fp, lr}
     e2c:	b	0 <coda_ascii_cursor_read_int64>
     e30:	mvn	r0, #12
     e34:	b	e3c <read_int64+0x68>
     e38:	mvn	r0, #10
     e3c:	mov	r1, #0
     e40:	bl	0 <coda_set_error>
     e44:	mvn	r0, #0
     e48:	pop	{fp, pc}
     e4c:	pop	{fp, lr}
     e50:	b	0 <coda_cdf_cursor_read_int64>
     e54:	pop	{fp, lr}
     e58:	b	0 <coda_bin_cursor_read_int64>
     e5c:	movw	r0, #0
     e60:	movw	r1, #0
     e64:	movw	r3, #0
     e68:	mov	r2, #572	; 0x23c
     e6c:	movt	r0, #0
     e70:	movt	r1, #0
     e74:	movt	r3, #0
     e78:	bl	0 <__assert_fail>

00000e7c <coda_cursor_read_uint64>:
     e7c:	push	{r4, sl, fp, lr}
     e80:	add	fp, sp, #8
     e84:	sub	sp, sp, #8
     e88:	cmp	r0, #0
     e8c:	beq	f1c <coda_cursor_read_uint64+0xa0>
     e90:	mov	r2, r0
     e94:	ldr	r0, [r0, #4]
     e98:	cmp	r0, #1
     e9c:	blt	f1c <coda_cursor_read_uint64+0xa0>
     ea0:	add	r0, r2, r0, lsl #4
     ea4:	mov	r4, r1
     ea8:	ldr	r1, [r0, #-8]
     eac:	cmp	r1, #0
     eb0:	beq	f1c <coda_cursor_read_uint64+0xa0>
     eb4:	cmp	r4, #0
     eb8:	beq	f94 <coda_cursor_read_uint64+0x118>
     ebc:	ldr	r0, [r1]
     ec0:	cmp	r0, #99	; 0x63
     ec4:	ldrhi	r1, [r1, #4]
     ec8:	bl	0 <__aeabi_read_tp>
     ecc:	ldr	r3, [r1, #8]
     ed0:	bic	r3, r3, #1
     ed4:	cmp	r3, #2
     ed8:	bne	f44 <coda_cursor_read_uint64+0xc8>
     edc:	ldr	r3, [pc, #308]	; 1018 <coda_cursor_read_uint64+0x19c>
     ee0:	ldr	r3, [pc, r3]
     ee4:	ldr	r0, [r0, r3]
     ee8:	cmp	r0, #0
     eec:	beq	f44 <coda_cursor_read_uint64+0xc8>
     ef0:	ldr	r3, [r1, #48]	; 0x30
     ef4:	mov	r0, #9
     ef8:	cmp	r3, #0
     efc:	beq	f44 <coda_cursor_read_uint64+0xc8>
     f00:	bl	0 <coda_type_get_native_type_name>
     f04:	movw	r1, #0
     f08:	mov	r2, r0
     f0c:	mvn	r0, #104	; 0x68
     f10:	movt	r1, #0
     f14:	bl	0 <coda_set_error>
     f18:	b	f38 <coda_cursor_read_uint64+0xbc>
     f1c:	movw	r1, #0
     f20:	movw	r2, #0
     f24:	mvn	r0, #99	; 0x63
     f28:	movw	r3, #2285	; 0x8ed
     f2c:	movt	r1, #0
     f30:	movt	r2, #0
     f34:	bl	0 <coda_set_error>
     f38:	mvn	r0, #0
     f3c:	sub	sp, fp, #8
     f40:	pop	{r4, sl, fp, pc}
     f44:	ldr	r0, [r1, #12]
     f48:	sub	r1, r0, #1
     f4c:	cmp	r1, #6
     f50:	bhi	f00 <coda_cursor_read_uint64+0x84>
     f54:	add	r3, pc, #0
     f58:	ldr	pc, [r3, r1, lsl #2]
     f5c:	.word	0x00000f78
     f60:	.word	0x00000f00
     f64:	.word	0x00000fac
     f68:	.word	0x00000f00
     f6c:	.word	0x00000fc8
     f70:	.word	0x00000f00
     f74:	.word	0x00000ff4
     f78:	add	r1, sp, #7
     f7c:	mov	r0, r2
     f80:	bl	2ac <read_uint8>
     f84:	cmp	r0, #0
     f88:	bne	f38 <coda_cursor_read_uint64+0xbc>
     f8c:	ldrb	r0, [sp, #7]
     f90:	b	fe0 <coda_cursor_read_uint64+0x164>
     f94:	movw	r1, #0
     f98:	movw	r2, #0
     f9c:	mvn	r0, #99	; 0x63
     fa0:	movw	r3, #2290	; 0x8f2
     fa4:	movt	r1, #0
     fa8:	b	f30 <coda_cursor_read_uint64+0xb4>
     fac:	add	r1, sp, #4
     fb0:	mov	r0, r2
     fb4:	bl	6bc <read_uint16>
     fb8:	cmp	r0, #0
     fbc:	bne	f38 <coda_cursor_read_uint64+0xbc>
     fc0:	ldrh	r0, [sp, #4]
     fc4:	b	fe0 <coda_cursor_read_uint64+0x164>
     fc8:	mov	r1, sp
     fcc:	mov	r0, r2
     fd0:	bl	b38 <read_uint32>
     fd4:	cmp	r0, #0
     fd8:	bne	f38 <coda_cursor_read_uint64+0xbc>
     fdc:	ldr	r0, [sp]
     fe0:	mov	r1, #0
     fe4:	strd	r0, [r4]
     fe8:	mov	r0, #0
     fec:	sub	sp, fp, #8
     ff0:	pop	{r4, sl, fp, pc}
     ff4:	mov	r0, r2
     ff8:	mov	r1, r4
     ffc:	bl	101c <read_uint64>
    1000:	mov	r1, r0
    1004:	mvn	r0, #0
    1008:	cmp	r1, #0
    100c:	moveq	r0, #0
    1010:	sub	sp, fp, #8
    1014:	pop	{r4, sl, fp, pc}
    1018:	.word	0x00000130

0000101c <read_uint64>:
    101c:	push	{fp, lr}
    1020:	mov	fp, sp
    1024:	ldr	r2, [r0, #4]
    1028:	add	r2, r0, r2, lsl #4
    102c:	ldr	r2, [r2, #-8]
    1030:	ldr	r2, [r2]
    1034:	cmp	r2, #99	; 0x63
    1038:	ble	1054 <read_uint64+0x38>
    103c:	cmp	r2, #100	; 0x64
    1040:	beq	1064 <read_uint64+0x48>
    1044:	cmp	r2, #101	; 0x65
    1048:	bne	106c <read_uint64+0x50>
    104c:	mvn	r0, #10
    1050:	b	1078 <read_uint64+0x5c>
    1054:	cmp	r2, #0
    1058:	bne	1088 <read_uint64+0x6c>
    105c:	pop	{fp, lr}
    1060:	b	0 <coda_ascii_cursor_read_uint64>
    1064:	pop	{fp, lr}
    1068:	b	0 <coda_mem_cursor_read_uint64>
    106c:	cmp	r2, #102	; 0x66
    1070:	bne	1098 <read_uint64+0x7c>
    1074:	mvn	r0, #12
    1078:	mov	r1, #0
    107c:	bl	0 <coda_set_error>
    1080:	mvn	r0, #0
    1084:	pop	{fp, pc}
    1088:	cmp	r2, #1
    108c:	bne	1098 <read_uint64+0x7c>
    1090:	pop	{fp, lr}
    1094:	b	0 <coda_bin_cursor_read_uint64>
    1098:	movw	r0, #0
    109c:	movw	r1, #0
    10a0:	movw	r3, #0
    10a4:	movw	r2, #606	; 0x25e
    10a8:	movt	r0, #0
    10ac:	movt	r1, #0
    10b0:	movt	r3, #0
    10b4:	bl	0 <__assert_fail>

000010b8 <coda_cursor_read_float>:
    10b8:	push	{r4, r6, fp, lr}
    10bc:	add	fp, sp, #8
    10c0:	sub	sp, sp, #8
    10c4:	cmp	r0, #0
    10c8:	beq	1168 <coda_cursor_read_float+0xb0>
    10cc:	mov	r2, r0
    10d0:	ldr	r0, [r0, #4]
    10d4:	cmp	r0, #1
    10d8:	blt	1168 <coda_cursor_read_float+0xb0>
    10dc:	add	r0, r2, r0, lsl #4
    10e0:	mov	r4, r1
    10e4:	ldr	r1, [r0, #-8]
    10e8:	cmp	r1, #0
    10ec:	beq	1168 <coda_cursor_read_float+0xb0>
    10f0:	cmp	r4, #0
    10f4:	beq	11e4 <coda_cursor_read_float+0x12c>
    10f8:	ldr	r0, [r1]
    10fc:	cmp	r0, #99	; 0x63
    1100:	ldrhi	r1, [r1, #4]
    1104:	bl	0 <__aeabi_read_tp>
    1108:	ldr	r6, [r1, #8]
    110c:	ldr	r3, [r1, #12]
    1110:	bic	r6, r6, #1
    1114:	cmp	r6, #2
    1118:	bne	1190 <coda_cursor_read_float+0xd8>
    111c:	ldr	r6, [pc, #540]	; 1340 <coda_cursor_read_float+0x288>
    1120:	ldr	r6, [pc, r6]
    1124:	ldr	r0, [r0, r6]
    1128:	cmp	r0, #0
    112c:	beq	1190 <coda_cursor_read_float+0xd8>
    1130:	ldr	r0, [r1, #48]	; 0x30
    1134:	cmp	r0, #0
    1138:	beq	1190 <coda_cursor_read_float+0xd8>
    113c:	mov	r1, sp
    1140:	mov	r0, r2
    1144:	bl	1344 <coda_cursor_read_double>
    1148:	mov	r1, r0
    114c:	mvn	r0, #0
    1150:	cmp	r1, #0
    1154:	bne	12fc <coda_cursor_read_float+0x244>
    1158:	vldr	d16, [sp]
    115c:	vcvt.f32.f64	s0, d16
    1160:	vstr	s0, [r4]
    1164:	b	12f8 <coda_cursor_read_float+0x240>
    1168:	movw	r1, #0
    116c:	movw	r2, #0
    1170:	mvn	r0, #99	; 0x63
    1174:	movw	r3, #2375	; 0x947
    1178:	movt	r1, #0
    117c:	movt	r2, #0
    1180:	bl	0 <coda_set_error>
    1184:	mvn	r0, #0
    1188:	sub	sp, fp, #8
    118c:	pop	{r4, r6, fp, pc}
    1190:	cmp	r3, #9
    1194:	bhi	11fc <coda_cursor_read_float+0x144>
    1198:	add	r0, pc, #0
    119c:	ldr	pc, [r0, r3, lsl #2]
    11a0:	.word	0x000011c8
    11a4:	.word	0x0000121c
    11a8:	.word	0x00001238
    11ac:	.word	0x00001258
    11b0:	.word	0x00001278
    11b4:	.word	0x0000129c
    11b8:	.word	0x000012c0
    11bc:	.word	0x000012d8
    11c0:	.word	0x00001304
    11c4:	.word	0x00001328
    11c8:	mov	r1, sp
    11cc:	mov	r0, r2
    11d0:	bl	fc <read_int8>
    11d4:	cmp	r0, #0
    11d8:	bne	1184 <coda_cursor_read_float+0xcc>
    11dc:	ldrsb	r0, [sp]
    11e0:	b	1250 <coda_cursor_read_float+0x198>
    11e4:	movw	r1, #0
    11e8:	movw	r2, #0
    11ec:	mvn	r0, #99	; 0x63
    11f0:	movw	r3, #2380	; 0x94c
    11f4:	movt	r1, #0
    11f8:	b	117c <coda_cursor_read_float+0xc4>
    11fc:	mov	r0, r3
    1200:	bl	0 <coda_type_get_native_type_name>
    1204:	movw	r1, #0
    1208:	mov	r2, r0
    120c:	mvn	r0, #104	; 0x68
    1210:	movt	r1, #0
    1214:	bl	0 <coda_set_error>
    1218:	b	1184 <coda_cursor_read_float+0xcc>
    121c:	mov	r1, sp
    1220:	mov	r0, r2
    1224:	bl	2ac <read_uint8>
    1228:	cmp	r0, #0
    122c:	bne	1184 <coda_cursor_read_float+0xcc>
    1230:	ldrb	r0, [sp]
    1234:	b	1270 <coda_cursor_read_float+0x1b8>
    1238:	mov	r1, sp
    123c:	mov	r0, r2
    1240:	bl	4b8 <read_int16>
    1244:	cmp	r0, #0
    1248:	bne	1184 <coda_cursor_read_float+0xcc>
    124c:	ldrsh	r0, [sp]
    1250:	vmov	s0, r0
    1254:	b	1290 <coda_cursor_read_float+0x1d8>
    1258:	mov	r1, sp
    125c:	mov	r0, r2
    1260:	bl	6bc <read_uint16>
    1264:	cmp	r0, #0
    1268:	bne	1184 <coda_cursor_read_float+0xcc>
    126c:	ldrh	r0, [sp]
    1270:	vmov	s0, r0
    1274:	b	12b4 <coda_cursor_read_float+0x1fc>
    1278:	mov	r1, sp
    127c:	mov	r0, r2
    1280:	bl	910 <read_int32>
    1284:	cmp	r0, #0
    1288:	bne	1184 <coda_cursor_read_float+0xcc>
    128c:	vldr	s0, [sp]
    1290:	vcvt.f32.s32	s0, s0
    1294:	vstr	s0, [r4]
    1298:	b	12f8 <coda_cursor_read_float+0x240>
    129c:	mov	r1, sp
    12a0:	mov	r0, r2
    12a4:	bl	b38 <read_uint32>
    12a8:	cmp	r0, #0
    12ac:	bne	1184 <coda_cursor_read_float+0xcc>
    12b0:	vldr	s0, [sp]
    12b4:	vcvt.f32.u32	s0, s0
    12b8:	vstr	s0, [r4]
    12bc:	b	12f8 <coda_cursor_read_float+0x240>
    12c0:	mov	r1, sp
    12c4:	mov	r0, r2
    12c8:	bl	dd4 <read_int64>
    12cc:	cmp	r0, #0
    12d0:	bne	1184 <coda_cursor_read_float+0xcc>
    12d4:	b	12ec <coda_cursor_read_float+0x234>
    12d8:	mov	r1, sp
    12dc:	mov	r0, r2
    12e0:	bl	101c <read_uint64>
    12e4:	cmp	r0, #0
    12e8:	bne	1184 <coda_cursor_read_float+0xcc>
    12ec:	ldm	sp, {r0, r1}
    12f0:	bl	0 <__aeabi_l2f>
    12f4:	str	r0, [r4]
    12f8:	mov	r0, #0
    12fc:	sub	sp, fp, #8
    1300:	pop	{r4, r6, fp, pc}
    1304:	mov	r0, r2
    1308:	mov	r1, r4
    130c:	bl	15d4 <read_float>
    1310:	mov	r1, r0
    1314:	mvn	r0, #0
    1318:	cmp	r1, #0
    131c:	moveq	r0, #0
    1320:	sub	sp, fp, #8
    1324:	pop	{r4, r6, fp, pc}
    1328:	mov	r1, sp
    132c:	mov	r0, r2
    1330:	bl	1694 <read_double>
    1334:	cmp	r0, #0
    1338:	bne	1184 <coda_cursor_read_float+0xcc>
    133c:	b	1158 <coda_cursor_read_float+0xa0>
    1340:	.word	0x00000218

00001344 <coda_cursor_read_double>:
    1344:	push	{r4, r5, r6, sl, fp, lr}
    1348:	add	fp, sp, #16
    134c:	sub	sp, sp, #8
    1350:	cmp	r0, #0
    1354:	beq	1414 <coda_cursor_read_double+0xd0>
    1358:	mov	r2, r0
    135c:	ldr	r0, [r0, #4]
    1360:	cmp	r0, #1
    1364:	blt	1414 <coda_cursor_read_double+0xd0>
    1368:	add	r0, r2, r0, lsl #4
    136c:	mov	r4, r1
    1370:	ldr	r1, [r0, #-8]
    1374:	cmp	r1, #0
    1378:	beq	1414 <coda_cursor_read_double+0xd0>
    137c:	cmp	r4, #0
    1380:	beq	1440 <coda_cursor_read_double+0xfc>
    1384:	ldr	r0, [r1]
    1388:	cmp	r0, #99	; 0x63
    138c:	ldrhi	r1, [r1, #4]
    1390:	bl	0 <__aeabi_read_tp>
    1394:	ldr	r6, [r1, #8]
    1398:	ldr	r3, [r1, #12]
    139c:	bic	r5, r6, #1
    13a0:	mov	r6, #0
    13a4:	cmp	r5, #2
    13a8:	bne	13c0 <coda_cursor_read_double+0x7c>
    13ac:	ldr	r5, [pc, #540]	; 15d0 <coda_cursor_read_double+0x28c>
    13b0:	ldr	r5, [pc, r5]
    13b4:	ldr	r0, [r0, r5]
    13b8:	cmp	r0, #0
    13bc:	ldrne	r6, [r1, #48]	; 0x30
    13c0:	cmp	r3, #9
    13c4:	bhi	1458 <coda_cursor_read_double+0x114>
    13c8:	add	r0, pc, #0
    13cc:	ldr	pc, [r0, r3, lsl #2]
    13d0:	.word	0x000013f8
    13d4:	.word	0x00001478
    13d8:	.word	0x00001494
    13dc:	.word	0x000014b4
    13e0:	.word	0x000014d4
    13e4:	.word	0x000014f4
    13e8:	.word	0x00001514
    13ec:	.word	0x0000152c
    13f0:	.word	0x00001550
    13f4:	.word	0x0000159c
    13f8:	mov	r1, sp
    13fc:	mov	r0, r2
    1400:	bl	fc <read_int8>
    1404:	cmp	r0, #0
    1408:	bne	1430 <coda_cursor_read_double+0xec>
    140c:	ldrsb	r0, [sp]
    1410:	b	14ac <coda_cursor_read_double+0x168>
    1414:	movw	r1, #0
    1418:	movw	r2, #0
    141c:	mvn	r0, #99	; 0x63
    1420:	movw	r3, #2543	; 0x9ef
    1424:	movt	r1, #0
    1428:	movt	r2, #0
    142c:	bl	0 <coda_set_error>
    1430:	mvn	r5, #0
    1434:	mov	r0, r5
    1438:	sub	sp, fp, #16
    143c:	pop	{r4, r5, r6, sl, fp, pc}
    1440:	movw	r1, #0
    1444:	movw	r2, #0
    1448:	mvn	r0, #99	; 0x63
    144c:	movw	r3, #2548	; 0x9f4
    1450:	movt	r1, #0
    1454:	b	1428 <coda_cursor_read_double+0xe4>
    1458:	mov	r0, r3
    145c:	bl	0 <coda_type_get_native_type_name>
    1460:	movw	r1, #0
    1464:	mov	r2, r0
    1468:	mvn	r0, #104	; 0x68
    146c:	movt	r1, #0
    1470:	bl	0 <coda_set_error>
    1474:	b	1430 <coda_cursor_read_double+0xec>
    1478:	mov	r1, sp
    147c:	mov	r0, r2
    1480:	bl	2ac <read_uint8>
    1484:	cmp	r0, #0
    1488:	bne	1430 <coda_cursor_read_double+0xec>
    148c:	ldrb	r0, [sp]
    1490:	b	14cc <coda_cursor_read_double+0x188>
    1494:	mov	r1, sp
    1498:	mov	r0, r2
    149c:	bl	4b8 <read_int16>
    14a0:	cmp	r0, #0
    14a4:	bne	1430 <coda_cursor_read_double+0xec>
    14a8:	ldrsh	r0, [sp]
    14ac:	vmov	s0, r0
    14b0:	b	14ec <coda_cursor_read_double+0x1a8>
    14b4:	mov	r1, sp
    14b8:	mov	r0, r2
    14bc:	bl	6bc <read_uint16>
    14c0:	cmp	r0, #0
    14c4:	bne	1430 <coda_cursor_read_double+0xec>
    14c8:	ldrh	r0, [sp]
    14cc:	vmov	s0, r0
    14d0:	b	150c <coda_cursor_read_double+0x1c8>
    14d4:	mov	r1, sp
    14d8:	mov	r0, r2
    14dc:	bl	910 <read_int32>
    14e0:	cmp	r0, #0
    14e4:	bne	1430 <coda_cursor_read_double+0xec>
    14e8:	vldr	s0, [sp]
    14ec:	vcvt.f64.s32	d16, s0
    14f0:	b	156c <coda_cursor_read_double+0x228>
    14f4:	mov	r1, sp
    14f8:	mov	r0, r2
    14fc:	bl	b38 <read_uint32>
    1500:	cmp	r0, #0
    1504:	bne	1430 <coda_cursor_read_double+0xec>
    1508:	vldr	s0, [sp]
    150c:	vcvt.f64.u32	d16, s0
    1510:	b	156c <coda_cursor_read_double+0x228>
    1514:	mov	r1, sp
    1518:	mov	r0, r2
    151c:	bl	dd4 <read_int64>
    1520:	cmp	r0, #0
    1524:	bne	1430 <coda_cursor_read_double+0xec>
    1528:	b	1540 <coda_cursor_read_double+0x1fc>
    152c:	mov	r1, sp
    1530:	mov	r0, r2
    1534:	bl	101c <read_uint64>
    1538:	cmp	r0, #0
    153c:	bne	1430 <coda_cursor_read_double+0xec>
    1540:	ldm	sp, {r0, r1}
    1544:	bl	0 <__aeabi_l2d>
    1548:	strd	r0, [r4]
    154c:	b	1570 <coda_cursor_read_double+0x22c>
    1550:	mov	r1, sp
    1554:	mov	r0, r2
    1558:	bl	15d4 <read_float>
    155c:	cmp	r0, #0
    1560:	bne	1430 <coda_cursor_read_double+0xec>
    1564:	vldr	s0, [sp]
    1568:	vcvt.f64.f32	d16, s0
    156c:	vstr	d16, [r4]
    1570:	mov	r5, #0
    1574:	cmp	r6, #0
    1578:	beq	1434 <coda_cursor_read_double+0xf0>
    157c:	vldr	d16, [r4]
    1580:	vldr	d17, [r6, #24]
    1584:	vcmp.f64	d16, d17
    1588:	vmrs	APSR_nzcv, fpscr
    158c:	bne	15b8 <coda_cursor_read_double+0x274>
    1590:	bl	0 <coda_NaN>
    1594:	vstr	d0, [r4]
    1598:	b	1434 <coda_cursor_read_double+0xf0>
    159c:	mov	r0, r2
    15a0:	mov	r1, r4
    15a4:	bl	1694 <read_double>
    15a8:	mvn	r5, #0
    15ac:	cmp	r0, #0
    15b0:	bne	1434 <coda_cursor_read_double+0xf0>
    15b4:	b	1570 <coda_cursor_read_double+0x22c>
    15b8:	vldmia	r6, {d17-d19}
    15bc:	vmul.f64	d16, d16, d17
    15c0:	vdiv.f64	d16, d16, d18
    15c4:	vadd.f64	d16, d16, d19
    15c8:	vstr	d16, [r4]
    15cc:	b	1434 <coda_cursor_read_double+0xf0>
    15d0:	.word	0x00000218

000015d4 <read_float>:
    15d4:	push	{fp, lr}
    15d8:	mov	fp, sp
    15dc:	ldr	r2, [r0, #4]
    15e0:	add	r2, r0, r2, lsl #4
    15e4:	ldr	r2, [r2, #-8]
    15e8:	ldr	r2, [r2]
    15ec:	sub	r3, r2, #100	; 0x64
    15f0:	cmp	r3, #5
    15f4:	bhi	1620 <read_float+0x4c>
    15f8:	add	r2, pc, #0
    15fc:	ldr	pc, [r2, r3, lsl #2]
    1600:	.word	0x00001618
    1604:	.word	0x00001658
    1608:	.word	0x00001640
    160c:	.word	0x00001650
    1610:	.word	0x00001638
    1614:	.word	0x0000166c
    1618:	pop	{fp, lr}
    161c:	b	0 <coda_mem_cursor_read_float>
    1620:	cmp	r2, #1
    1624:	beq	1648 <read_float+0x74>
    1628:	cmp	r2, #0
    162c:	bne	1674 <read_float+0xa0>
    1630:	pop	{fp, lr}
    1634:	b	0 <coda_ascii_cursor_read_float>
    1638:	pop	{fp, lr}
    163c:	b	0 <coda_netcdf_cursor_read_float>
    1640:	mvn	r0, #12
    1644:	b	165c <read_float+0x88>
    1648:	pop	{fp, lr}
    164c:	b	0 <coda_bin_cursor_read_float>
    1650:	pop	{fp, lr}
    1654:	b	0 <coda_cdf_cursor_read_float>
    1658:	mvn	r0, #10
    165c:	mov	r1, #0
    1660:	bl	0 <coda_set_error>
    1664:	mvn	r0, #0
    1668:	pop	{fp, pc}
    166c:	pop	{fp, lr}
    1670:	b	0 <coda_grib_cursor_read_float>
    1674:	movw	r0, #0
    1678:	movw	r1, #0
    167c:	movw	r3, #0
    1680:	movw	r2, #642	; 0x282
    1684:	movt	r0, #0
    1688:	movt	r1, #0
    168c:	movt	r3, #0
    1690:	bl	0 <__assert_fail>

00001694 <read_double>:
    1694:	push	{r4, r5, r6, sl, fp, lr}
    1698:	add	fp, sp, #16
    169c:	sub	sp, sp, #536	; 0x218
    16a0:	mov	r4, r1
    16a4:	mov	r1, r0
    16a8:	ldr	r0, [r0, #4]
    16ac:	add	r0, r1, r0, lsl #4
    16b0:	ldr	r6, [r0, #-8]
    16b4:	ldr	r0, [r6]
    16b8:	cmp	r0, #99	; 0x63
    16bc:	bhi	16c8 <read_double+0x34>
    16c0:	mov	r2, r6
    16c4:	b	16cc <read_double+0x38>
    16c8:	ldr	r2, [r6, #4]
    16cc:	ldr	r3, [r2, #8]
    16d0:	cmp	r3, #6
    16d4:	bne	1730 <read_double+0x9c>
    16d8:	ldr	r2, [r2, #40]	; 0x28
    16dc:	cmp	r2, #1
    16e0:	beq	1790 <read_double+0xfc>
    16e4:	cmp	r2, #2
    16e8:	bne	1730 <read_double+0x9c>
    16ec:	add	r0, sp, #16
    16f0:	mov	r2, #520	; 0x208
    16f4:	bl	0 <memcpy>
    16f8:	ldr	r0, [r6]
    16fc:	cmp	r0, #99	; 0x63
    1700:	add	r0, sp, #16
    1704:	ldrhi	r6, [r6, #4]
    1708:	bl	0 <coda_cursor_use_base_type_of_special_type>
    170c:	mvn	r5, #0
    1710:	cmp	r0, #0
    1714:	bne	18b4 <read_double+0x220>
    1718:	ldr	r0, [r6, #52]	; 0x34
    171c:	add	r1, sp, #16
    1720:	mov	r2, r4
    1724:	bl	0 <coda_expression_eval_float>
    1728:	mov	r5, r0
    172c:	b	18b4 <read_double+0x220>
    1730:	sub	r2, r0, #100	; 0x64
    1734:	cmp	r2, #4
    1738:	bhi	176c <read_double+0xd8>
    173c:	add	r0, pc, #0
    1740:	ldr	pc, [r0, r2, lsl #2]
    1744:	.word	0x00001758
    1748:	.word	0x000018a4
    174c:	.word	0x00001888
    1750:	.word	0x00001890
    1754:	.word	0x00001874
    1758:	mov	r0, r1
    175c:	mov	r1, r4
    1760:	sub	sp, fp, #16
    1764:	pop	{r4, r5, r6, sl, fp, lr}
    1768:	b	0 <coda_mem_cursor_read_double>
    176c:	cmp	r0, #1
    1770:	beq	18c0 <read_double+0x22c>
    1774:	cmp	r0, #0
    1778:	bne	1938 <read_double+0x2a4>
    177c:	mov	r0, r1
    1780:	mov	r1, r4
    1784:	sub	sp, fp, #16
    1788:	pop	{r4, r5, r6, sl, fp, lr}
    178c:	b	0 <coda_ascii_cursor_read_double>
    1790:	add	r5, sp, #16
    1794:	mov	r2, #520	; 0x208
    1798:	mov	r0, r5
    179c:	bl	0 <memcpy>
    17a0:	mov	r0, r5
    17a4:	bl	0 <coda_cursor_use_base_type_of_special_type>
    17a8:	mvn	r5, #0
    17ac:	cmp	r0, #0
    17b0:	bne	18b4 <read_double+0x220>
    17b4:	add	r0, sp, #16
    17b8:	bl	0 <coda_cursor_goto_first_record_field>
    17bc:	cmp	r0, #0
    17c0:	bne	18b4 <read_double+0x220>
    17c4:	add	r0, sp, #16
    17c8:	add	r1, sp, #12
    17cc:	bl	764 <coda_cursor_read_int32>
    17d0:	cmp	r0, #0
    17d4:	bne	18b4 <read_double+0x220>
    17d8:	add	r0, sp, #16
    17dc:	bl	0 <coda_cursor_goto_next_record_field>
    17e0:	cmp	r0, #0
    17e4:	bne	18b4 <read_double+0x220>
    17e8:	add	r0, sp, #16
    17ec:	mov	r1, sp
    17f0:	bl	1344 <coda_cursor_read_double>
    17f4:	cmp	r0, #0
    17f8:	bne	18b4 <read_double+0x220>
    17fc:	ldr	r1, [sp, #12]
    1800:	vldr	d16, [sp]
    1804:	rsb	r0, r1, #0
    1808:	cmp	r1, #1
    180c:	blt	18d4 <read_double+0x240>
    1810:	vmov.f64	d17, #112	; 0x3f800000  1.0
    1814:	ands	r3, r1, #3
    1818:	sub	r2, r1, #1
    181c:	beq	1838 <read_double+0x1a4>
    1820:	vmov.f64	d18, #36	; 0x41200000  10.0
    1824:	vmul.f64	d17, d17, d18
    1828:	sub	r1, r1, #1
    182c:	subs	r3, r3, #1
    1830:	bne	1824 <read_double+0x190>
    1834:	rsb	r0, r1, #0
    1838:	cmp	r2, #3
    183c:	bcc	185c <read_double+0x1c8>
    1840:	vmov.f64	d18, #36	; 0x41200000  10.0
    1844:	vmul.f64	d17, d17, d18
    1848:	adds	r0, r0, #4
    184c:	vmul.f64	d17, d17, d18
    1850:	vmul.f64	d17, d17, d18
    1854:	vmul.f64	d17, d17, d18
    1858:	bne	1844 <read_double+0x1b0>
    185c:	vmov.f64	d18, #112	; 0x3f800000  1.0
    1860:	vdiv.f64	d17, d18, d17
    1864:	vmul.f64	d16, d16, d17
    1868:	mov	r5, #0
    186c:	vstr	d16, [r4]
    1870:	b	18b4 <read_double+0x220>
    1874:	mov	r0, r1
    1878:	mov	r1, r4
    187c:	sub	sp, fp, #16
    1880:	pop	{r4, r5, r6, sl, fp, lr}
    1884:	b	0 <coda_netcdf_cursor_read_double>
    1888:	mvn	r0, #12
    188c:	b	18a8 <read_double+0x214>
    1890:	mov	r0, r1
    1894:	mov	r1, r4
    1898:	sub	sp, fp, #16
    189c:	pop	{r4, r5, r6, sl, fp, lr}
    18a0:	b	0 <coda_cdf_cursor_read_double>
    18a4:	mvn	r0, #10
    18a8:	mov	r1, #0
    18ac:	bl	0 <coda_set_error>
    18b0:	mvn	r5, #0
    18b4:	mov	r0, r5
    18b8:	sub	sp, fp, #16
    18bc:	pop	{r4, r5, r6, sl, fp, pc}
    18c0:	mov	r0, r1
    18c4:	mov	r1, r4
    18c8:	sub	sp, fp, #16
    18cc:	pop	{r4, r5, r6, sl, fp, lr}
    18d0:	b	0 <coda_bin_cursor_read_double>
    18d4:	cmp	r1, #0
    18d8:	beq	1930 <read_double+0x29c>
    18dc:	vmov.f64	d17, #112	; 0x3f800000  1.0
    18e0:	rsb	r2, r1, #0
    18e4:	ands	r2, r2, #3
    18e8:	beq	1908 <read_double+0x274>
    18ec:	vmov.f64	d18, #36	; 0x41200000  10.0
    18f0:	mov	r0, r1
    18f4:	vmul.f64	d17, d17, d18
    18f8:	add	r0, r0, #1
    18fc:	subs	r2, r2, #1
    1900:	bne	18f4 <read_double+0x260>
    1904:	rsb	r0, r0, #0
    1908:	cmn	r1, #4
    190c:	bhi	1864 <read_double+0x1d0>
    1910:	vmov.f64	d18, #36	; 0x41200000  10.0
    1914:	vmul.f64	d17, d17, d18
    1918:	subs	r0, r0, #4
    191c:	vmul.f64	d17, d17, d18
    1920:	vmul.f64	d17, d17, d18
    1924:	vmul.f64	d17, d17, d18
    1928:	bne	1914 <read_double+0x280>
    192c:	b	1864 <read_double+0x1d0>
    1930:	vmov.f64	d17, #112	; 0x3f800000  1.0
    1934:	b	1864 <read_double+0x1d0>
    1938:	movw	r0, #0
    193c:	movw	r1, #0
    1940:	movw	r3, #0
    1944:	mov	r2, #692	; 0x2b4
    1948:	movt	r0, #0
    194c:	movt	r1, #0
    1950:	movt	r3, #0
    1954:	bl	0 <__assert_fail>

00001958 <coda_cursor_read_char>:
    1958:	push	{r4, r5, fp, lr}
    195c:	add	fp, sp, #8
    1960:	cmp	r0, #0
    1964:	beq	1a14 <coda_cursor_read_char+0xbc>
    1968:	mov	r2, r0
    196c:	ldr	r0, [r0, #4]
    1970:	cmp	r0, #1
    1974:	blt	1a14 <coda_cursor_read_char+0xbc>
    1978:	add	r0, r2, r0, lsl #4
    197c:	ldr	r4, [r0, #-8]
    1980:	cmp	r4, #0
    1984:	beq	1a14 <coda_cursor_read_char+0xbc>
    1988:	cmp	r1, #0
    198c:	beq	1a58 <coda_cursor_read_char+0x100>
    1990:	ldr	r5, [r4]
    1994:	cmp	r5, #99	; 0x63
    1998:	ldrhi	r4, [r4, #4]
    199c:	bl	0 <__aeabi_read_tp>
    19a0:	ldr	r3, [r4, #8]
    19a4:	bic	r3, r3, #1
    19a8:	cmp	r3, #2
    19ac:	bne	19d4 <coda_cursor_read_char+0x7c>
    19b0:	ldr	r3, [pc, #308]	; 1aec <coda_cursor_read_char+0x194>
    19b4:	ldr	r3, [pc, r3]
    19b8:	ldr	r0, [r0, r3]
    19bc:	cmp	r0, #0
    19c0:	beq	19d4 <coda_cursor_read_char+0x7c>
    19c4:	ldr	r3, [r4, #48]	; 0x30
    19c8:	mov	r0, #9
    19cc:	cmp	r3, #0
    19d0:	bne	1a38 <coda_cursor_read_char+0xe0>
    19d4:	ldr	r0, [r4, #12]
    19d8:	cmp	r0, #10
    19dc:	bne	1a38 <coda_cursor_read_char+0xe0>
    19e0:	sub	r0, r5, #100	; 0x64
    19e4:	cmp	r0, #4
    19e8:	bhi	1a70 <coda_cursor_read_char+0x118>
    19ec:	add	r3, pc, #0
    19f0:	ldr	pc, [r3, r0, lsl #2]
    19f4:	.word	0x00001a08
    19f8:	.word	0x00001a98
    19fc:	.word	0x00001acc
    1a00:	.word	0x00001ab8
    1a04:	.word	0x00001a8c
    1a08:	mov	r0, r2
    1a0c:	bl	0 <coda_mem_cursor_read_char>
    1a10:	b	1ac0 <coda_cursor_read_char+0x168>
    1a14:	movw	r1, #0
    1a18:	movw	r2, #0
    1a1c:	mvn	r0, #99	; 0x63
    1a20:	movw	r3, #2698	; 0xa8a
    1a24:	movt	r1, #0
    1a28:	movt	r2, #0
    1a2c:	bl	0 <coda_set_error>
    1a30:	mvn	r0, #0
    1a34:	pop	{r4, r5, fp, pc}
    1a38:	bl	0 <coda_type_get_native_type_name>
    1a3c:	movw	r1, #0
    1a40:	mov	r2, r0
    1a44:	mvn	r0, #104	; 0x68
    1a48:	movt	r1, #0
    1a4c:	bl	0 <coda_set_error>
    1a50:	mvn	r0, #0
    1a54:	pop	{r4, r5, fp, pc}
    1a58:	movw	r1, #0
    1a5c:	movw	r2, #0
    1a60:	mvn	r0, #99	; 0x63
    1a64:	movw	r3, #2703	; 0xa8f
    1a68:	movt	r1, #0
    1a6c:	b	1a28 <coda_cursor_read_char+0xd0>
    1a70:	cmp	r5, #1
    1a74:	beq	1aac <coda_cursor_read_char+0x154>
    1a78:	cmp	r5, #0
    1a7c:	bne	1acc <coda_cursor_read_char+0x174>
    1a80:	mov	r0, r2
    1a84:	bl	0 <coda_ascii_cursor_read_char>
    1a88:	b	1ac0 <coda_cursor_read_char+0x168>
    1a8c:	mov	r0, r2
    1a90:	bl	0 <coda_netcdf_cursor_read_char>
    1a94:	b	1ac0 <coda_cursor_read_char+0x168>
    1a98:	mvn	r0, #10
    1a9c:	mov	r1, #0
    1aa0:	bl	0 <coda_set_error>
    1aa4:	mvn	r0, #0
    1aa8:	pop	{r4, r5, fp, pc}
    1aac:	mov	r0, r2
    1ab0:	bl	0 <coda_bin_cursor_read_char>
    1ab4:	b	1ac0 <coda_cursor_read_char+0x168>
    1ab8:	mov	r0, r2
    1abc:	bl	0 <coda_cdf_cursor_read_char>
    1ac0:	cmp	r0, #0
    1ac4:	mvnne	r0, #0
    1ac8:	pop	{r4, r5, fp, pc}
    1acc:	movw	r0, #0
    1ad0:	movw	r1, #0
    1ad4:	movw	r3, #0
    1ad8:	movw	r2, #722	; 0x2d2
    1adc:	movt	r0, #0
    1ae0:	movt	r1, #0
    1ae4:	movt	r3, #0
    1ae8:	bl	0 <__assert_fail>
    1aec:	.word	0x00000130

00001af0 <coda_cursor_read_string>:
    1af0:	push	{r4, r5, r6, r7, fp, lr}
    1af4:	add	fp, sp, #16
    1af8:	sub	sp, sp, #8
    1afc:	cmp	r1, #0
    1b00:	beq	1b84 <coda_cursor_read_string+0x94>
    1b04:	mov	r5, r2
    1b08:	cmp	r2, #0
    1b0c:	ble	1ba0 <coda_cursor_read_string+0xb0>
    1b10:	mov	r6, r1
    1b14:	add	r1, sp, #4
    1b18:	mov	r7, r0
    1b1c:	bl	0 <coda_cursor_has_ascii_content>
    1b20:	mvn	r4, #0
    1b24:	cmp	r0, #0
    1b28:	bne	1bc8 <coda_cursor_read_string+0xd8>
    1b2c:	ldr	r0, [sp, #4]
    1b30:	cmp	r0, #0
    1b34:	beq	1bd4 <coda_cursor_read_string+0xe4>
    1b38:	ldr	r0, [r7, #4]
    1b3c:	add	r0, r7, r0, lsl #4
    1b40:	ldr	r0, [r0, #-8]
    1b44:	ldr	r0, [r0]
    1b48:	sub	r1, r0, #100	; 0x64
    1b4c:	cmp	r1, #4
    1b50:	bhi	1be8 <coda_cursor_read_string+0xf8>
    1b54:	add	r0, pc, #0
    1b58:	ldr	pc, [r0, r1, lsl #2]
    1b5c:	.word	0x00001b70
    1b60:	.word	0x00001c28
    1b64:	.word	0x00001c20
    1b68:	.word	0x00001c38
    1b6c:	.word	0x00001c0c
    1b70:	mov	r0, r7
    1b74:	mov	r1, r6
    1b78:	mov	r2, r5
    1b7c:	bl	0 <coda_mem_cursor_read_string>
    1b80:	b	1c5c <coda_cursor_read_string+0x16c>
    1b84:	movw	r1, #0
    1b88:	movw	r2, #0
    1b8c:	mvn	r0, #99	; 0x63
    1b90:	movw	r3, #2747	; 0xabb
    1b94:	movt	r1, #0
    1b98:	movt	r2, #0
    1b9c:	b	1bc0 <coda_cursor_read_string+0xd0>
    1ba0:	movw	r1, #0
    1ba4:	movw	r3, #0
    1ba8:	movw	r0, #2753	; 0xac1
    1bac:	mov	r2, r5
    1bb0:	str	r0, [sp]
    1bb4:	movt	r1, #0
    1bb8:	movt	r3, #0
    1bbc:	mvn	r0, #99	; 0x63
    1bc0:	bl	0 <coda_set_error>
    1bc4:	mvn	r4, #0
    1bc8:	mov	r0, r4
    1bcc:	sub	sp, fp, #16
    1bd0:	pop	{r4, r5, r6, r7, fp, pc}
    1bd4:	movw	r1, #0
    1bd8:	mvn	r0, #104	; 0x68
    1bdc:	movt	r1, #0
    1be0:	bl	0 <coda_set_error>
    1be4:	b	1bc8 <coda_cursor_read_string+0xd8>
    1be8:	cmp	r0, #1
    1bec:	beq	1c4c <coda_cursor_read_string+0x15c>
    1bf0:	cmp	r0, #0
    1bf4:	bne	1c64 <coda_cursor_read_string+0x174>
    1bf8:	mov	r0, r7
    1bfc:	mov	r1, r6
    1c00:	mov	r2, r5
    1c04:	bl	0 <coda_ascii_cursor_read_string>
    1c08:	b	1c5c <coda_cursor_read_string+0x16c>
    1c0c:	mov	r0, r7
    1c10:	mov	r1, r6
    1c14:	mov	r2, r5
    1c18:	bl	0 <coda_netcdf_cursor_read_string>
    1c1c:	b	1c5c <coda_cursor_read_string+0x16c>
    1c20:	mvn	r0, #12
    1c24:	b	1c2c <coda_cursor_read_string+0x13c>
    1c28:	mvn	r0, #10
    1c2c:	mov	r1, #0
    1c30:	bl	0 <coda_set_error>
    1c34:	b	1bc8 <coda_cursor_read_string+0xd8>
    1c38:	mov	r0, r7
    1c3c:	mov	r1, r6
    1c40:	mov	r2, r5
    1c44:	bl	0 <coda_cdf_cursor_read_string>
    1c48:	b	1c5c <coda_cursor_read_string+0x16c>
    1c4c:	mov	r0, r7
    1c50:	mov	r1, r6
    1c54:	mov	r2, r5
    1c58:	bl	0 <coda_bin_cursor_read_string>
    1c5c:	mov	r4, r0
    1c60:	b	1bc8 <coda_cursor_read_string+0xd8>
    1c64:	movw	r0, #0
    1c68:	movw	r1, #0
    1c6c:	movw	r3, #0
    1c70:	movw	r2, #758	; 0x2f6
    1c74:	movt	r0, #0
    1c78:	movt	r1, #0
    1c7c:	movt	r3, #0
    1c80:	bl	0 <__assert_fail>

00001c84 <coda_cursor_read_bits>:
    1c84:	push	{r4, sl, fp, lr}
    1c88:	add	fp, sp, #8
    1c8c:	cmp	r0, #0
    1c90:	beq	1cf4 <coda_cursor_read_bits+0x70>
    1c94:	ldr	ip, [r0, #4]
    1c98:	cmp	ip, #1
    1c9c:	blt	1cf4 <coda_cursor_read_bits+0x70>
    1ca0:	add	ip, r0, ip, lsl #4
    1ca4:	ldr	ip, [ip, #-8]
    1ca8:	cmp	ip, #0
    1cac:	beq	1cf4 <coda_cursor_read_bits+0x70>
    1cb0:	cmp	r1, #0
    1cb4:	beq	1d18 <coda_cursor_read_bits+0x94>
    1cb8:	ldr	lr, [fp, #12]
    1cbc:	cmn	lr, #1
    1cc0:	ble	1d30 <coda_cursor_read_bits+0xac>
    1cc4:	ldr	r4, [fp, #8]
    1cc8:	orrs	r4, r4, lr
    1ccc:	beq	1d48 <coda_cursor_read_bits+0xc4>
    1cd0:	ldr	ip, [ip]
    1cd4:	cmp	ip, #100	; 0x64
    1cd8:	beq	1d50 <coda_cursor_read_bits+0xcc>
    1cdc:	cmp	ip, #1
    1ce0:	beq	1d58 <coda_cursor_read_bits+0xd4>
    1ce4:	cmp	ip, #0
    1ce8:	bne	1d60 <coda_cursor_read_bits+0xdc>
    1cec:	pop	{r4, sl, fp, lr}
    1cf0:	b	0 <coda_ascii_cursor_read_bits>
    1cf4:	movw	r1, #0
    1cf8:	movw	r2, #0
    1cfc:	mvn	r0, #99	; 0x63
    1d00:	movw	r3, #2789	; 0xae5
    1d04:	movt	r1, #0
    1d08:	movt	r2, #0
    1d0c:	bl	0 <coda_set_error>
    1d10:	mvn	r0, #0
    1d14:	pop	{r4, sl, fp, pc}
    1d18:	movw	r1, #0
    1d1c:	movw	r2, #0
    1d20:	mvn	r0, #99	; 0x63
    1d24:	movw	r3, #2794	; 0xaea
    1d28:	movt	r1, #0
    1d2c:	b	1d08 <coda_cursor_read_bits+0x84>
    1d30:	movw	r1, #0
    1d34:	movw	r2, #0
    1d38:	mvn	r0, #99	; 0x63
    1d3c:	movw	r3, #2799	; 0xaef
    1d40:	movt	r1, #0
    1d44:	b	1d08 <coda_cursor_read_bits+0x84>
    1d48:	mov	r0, #0
    1d4c:	pop	{r4, sl, fp, pc}
    1d50:	pop	{r4, sl, fp, lr}
    1d54:	b	0 <coda_mem_cursor_read_bits>
    1d58:	pop	{r4, sl, fp, lr}
    1d5c:	b	0 <coda_bin_cursor_read_bits>
    1d60:	movw	r1, #0
    1d64:	mvn	r0, #104	; 0x68
    1d68:	movt	r1, #0
    1d6c:	bl	0 <coda_set_error>
    1d70:	mvn	r0, #0
    1d74:	pop	{r4, sl, fp, pc}

00001d78 <coda_cursor_read_bytes>:
    1d78:	push	{r4, sl, fp, lr}
    1d7c:	add	fp, sp, #8
    1d80:	cmp	r0, #0
    1d84:	beq	1df0 <coda_cursor_read_bytes+0x78>
    1d88:	ldr	ip, [r0, #4]
    1d8c:	cmp	ip, #1
    1d90:	blt	1df0 <coda_cursor_read_bytes+0x78>
    1d94:	add	ip, r0, ip, lsl #4
    1d98:	ldr	ip, [ip, #-8]
    1d9c:	cmp	ip, #0
    1da0:	beq	1df0 <coda_cursor_read_bytes+0x78>
    1da4:	cmp	r1, #0
    1da8:	beq	1e14 <coda_cursor_read_bytes+0x9c>
    1dac:	cmn	r3, #1
    1db0:	ble	1e2c <coda_cursor_read_bytes+0xb4>
    1db4:	ldr	lr, [fp, #12]
    1db8:	cmn	lr, #1
    1dbc:	ble	1e44 <coda_cursor_read_bytes+0xcc>
    1dc0:	ldr	r4, [fp, #8]
    1dc4:	orrs	r4, r4, lr
    1dc8:	beq	1e5c <coda_cursor_read_bytes+0xe4>
    1dcc:	ldr	ip, [ip]
    1dd0:	cmp	ip, #100	; 0x64
    1dd4:	beq	1e64 <coda_cursor_read_bytes+0xec>
    1dd8:	cmp	ip, #1
    1ddc:	beq	1e6c <coda_cursor_read_bytes+0xf4>
    1de0:	cmp	ip, #0
    1de4:	bne	1e74 <coda_cursor_read_bytes+0xfc>
    1de8:	pop	{r4, sl, fp, lr}
    1dec:	b	0 <coda_ascii_cursor_read_bytes>
    1df0:	movw	r1, #0
    1df4:	movw	r2, #0
    1df8:	mvn	r0, #99	; 0x63
    1dfc:	movw	r3, #2845	; 0xb1d
    1e00:	movt	r1, #0
    1e04:	movt	r2, #0
    1e08:	bl	0 <coda_set_error>
    1e0c:	mvn	r0, #0
    1e10:	pop	{r4, sl, fp, pc}
    1e14:	movw	r1, #0
    1e18:	movw	r2, #0
    1e1c:	mvn	r0, #99	; 0x63
    1e20:	movw	r3, #2850	; 0xb22
    1e24:	movt	r1, #0
    1e28:	b	1e04 <coda_cursor_read_bytes+0x8c>
    1e2c:	movw	r1, #0
    1e30:	movw	r2, #0
    1e34:	mvn	r0, #99	; 0x63
    1e38:	movw	r3, #2855	; 0xb27
    1e3c:	movt	r1, #0
    1e40:	b	1e04 <coda_cursor_read_bytes+0x8c>
    1e44:	movw	r1, #0
    1e48:	movw	r2, #0
    1e4c:	mvn	r0, #99	; 0x63
    1e50:	movw	r3, #2860	; 0xb2c
    1e54:	movt	r1, #0
    1e58:	b	1e04 <coda_cursor_read_bytes+0x8c>
    1e5c:	mov	r0, #0
    1e60:	pop	{r4, sl, fp, pc}
    1e64:	pop	{r4, sl, fp, lr}
    1e68:	b	0 <coda_mem_cursor_read_bytes>
    1e6c:	pop	{r4, sl, fp, lr}
    1e70:	b	0 <coda_bin_cursor_read_bytes>
    1e74:	movw	r1, #0
    1e78:	mvn	r0, #104	; 0x68
    1e7c:	movt	r1, #0
    1e80:	bl	0 <coda_set_error>
    1e84:	mvn	r0, #0
    1e88:	pop	{r4, sl, fp, pc}

00001e8c <coda_cursor_read_int8_array>:
    1e8c:	push	{r4, sl, fp, lr}
    1e90:	add	fp, sp, #8
    1e94:	cmp	r0, #0
    1e98:	beq	1f38 <coda_cursor_read_int8_array+0xac>
    1e9c:	mov	r3, r0
    1ea0:	ldr	r0, [r0, #4]
    1ea4:	cmp	r0, #1
    1ea8:	blt	1f38 <coda_cursor_read_int8_array+0xac>
    1eac:	add	r0, r3, r0, lsl #4
    1eb0:	ldr	r4, [r0, #-8]
    1eb4:	cmp	r4, #0
    1eb8:	beq	1f38 <coda_cursor_read_int8_array+0xac>
    1ebc:	cmp	r1, #0
    1ec0:	beq	1f5c <coda_cursor_read_int8_array+0xd0>
    1ec4:	ldr	r0, [r4]
    1ec8:	cmp	r0, #99	; 0x63
    1ecc:	ldrhi	r4, [r4, #4]
    1ed0:	ldr	r0, [r4, #8]
    1ed4:	cmp	r0, #1
    1ed8:	bne	1f74 <coda_cursor_read_int8_array+0xe8>
    1edc:	bl	0 <__aeabi_read_tp>
    1ee0:	ldr	ip, [r4, #40]	; 0x28
    1ee4:	ldr	r4, [ip, #8]
    1ee8:	bic	r4, r4, #1
    1eec:	cmp	r4, #2
    1ef0:	bne	1f18 <coda_cursor_read_int8_array+0x8c>
    1ef4:	ldr	r4, [pc, #172]	; 1fa8 <coda_cursor_read_int8_array+0x11c>
    1ef8:	ldr	r4, [pc, r4]
    1efc:	ldr	r0, [r0, r4]
    1f00:	cmp	r0, #0
    1f04:	beq	1f18 <coda_cursor_read_int8_array+0x8c>
    1f08:	ldr	r4, [ip, #48]	; 0x30
    1f0c:	mov	r0, #9
    1f10:	cmp	r4, #0
    1f14:	bne	1f24 <coda_cursor_read_int8_array+0x98>
    1f18:	ldr	r0, [ip, #12]
    1f1c:	cmp	r0, #0
    1f20:	beq	1f94 <coda_cursor_read_int8_array+0x108>
    1f24:	bl	0 <coda_type_get_native_type_name>
    1f28:	movw	r1, #0
    1f2c:	mov	r2, r0
    1f30:	movt	r1, #0
    1f34:	b	1f84 <coda_cursor_read_int8_array+0xf8>
    1f38:	movw	r1, #0
    1f3c:	movw	r2, #0
    1f40:	mvn	r0, #99	; 0x63
    1f44:	movw	r3, #2908	; 0xb5c
    1f48:	movt	r1, #0
    1f4c:	movt	r2, #0
    1f50:	bl	0 <coda_set_error>
    1f54:	mvn	r0, #0
    1f58:	pop	{r4, sl, fp, pc}
    1f5c:	movw	r1, #0
    1f60:	movw	r2, #0
    1f64:	mvn	r0, #99	; 0x63
    1f68:	movw	r3, #2913	; 0xb61
    1f6c:	movt	r1, #0
    1f70:	b	1f4c <coda_cursor_read_int8_array+0xc0>
    1f74:	bl	0 <coda_type_get_class_name>
    1f78:	movw	r1, #0
    1f7c:	mov	r2, r0
    1f80:	movt	r1, #0
    1f84:	mvn	r0, #104	; 0x68
    1f88:	bl	0 <coda_set_error>
    1f8c:	mvn	r0, #0
    1f90:	pop	{r4, sl, fp, pc}
    1f94:	mov	r0, r3
    1f98:	bl	1fac <read_int8_array>
    1f9c:	cmp	r0, #0
    1fa0:	mvnne	r0, #0
    1fa4:	pop	{r4, sl, fp, pc}
    1fa8:	.word	0x000000a8

00001fac <read_int8_array>:
    1fac:	push	{r4, r5, r6, sl, fp, lr}
    1fb0:	add	fp, sp, #16
    1fb4:	mov	r6, r0
    1fb8:	ldr	r0, [r0, #4]
    1fbc:	mov	r4, r1
    1fc0:	mov	r5, r2
    1fc4:	add	r0, r6, r0, lsl #4
    1fc8:	ldr	r0, [r0, #-8]
    1fcc:	ldr	r0, [r0]
    1fd0:	sub	r1, r0, #100	; 0x64
    1fd4:	cmp	r1, #5
    1fd8:	bhi	2010 <read_int8_array+0x64>
    1fdc:	add	r0, pc, #0
    1fe0:	ldr	pc, [r0, r1, lsl #2]
    1fe4:	.word	0x00001ffc
    1fe8:	.word	0x00002060
    1fec:	.word	0x00002058
    1ff0:	.word	0x00002074
    1ff4:	.word	0x00002048
    1ff8:	.word	0x000020b4
    1ffc:	mov	r0, r6
    2000:	mov	r1, r4
    2004:	mov	r2, r5
    2008:	pop	{r4, r5, r6, sl, fp, lr}
    200c:	b	0 <coda_mem_cursor_read_int8_array>
    2010:	cmp	r0, #1
    2014:	beq	2034 <read_int8_array+0x88>
    2018:	cmp	r0, #0
    201c:	bne	2090 <read_int8_array+0xe4>
    2020:	mov	r0, r6
    2024:	mov	r1, r4
    2028:	mov	r2, r5
    202c:	pop	{r4, r5, r6, sl, fp, lr}
    2030:	b	0 <coda_ascii_cursor_read_int8_array>
    2034:	mov	r0, r6
    2038:	mov	r1, r4
    203c:	mov	r2, r5
    2040:	pop	{r4, r5, r6, sl, fp, lr}
    2044:	b	0 <coda_bin_cursor_read_int8_array>
    2048:	mov	r0, r6
    204c:	mov	r1, r4
    2050:	bl	0 <coda_netcdf_cursor_read_int8_array>
    2054:	b	2080 <read_int8_array+0xd4>
    2058:	mvn	r0, #12
    205c:	b	2064 <read_int8_array+0xb8>
    2060:	mvn	r0, #10
    2064:	mov	r1, #0
    2068:	bl	0 <coda_set_error>
    206c:	mvn	r0, #0
    2070:	pop	{r4, r5, r6, sl, fp, pc}
    2074:	mov	r0, r6
    2078:	mov	r1, r4
    207c:	bl	0 <coda_cdf_cursor_read_int8_array>
    2080:	mov	r1, r0
    2084:	mvn	r0, #0
    2088:	cmp	r1, #0
    208c:	popne	{r4, r5, r6, sl, fp, pc}
    2090:	cmp	r5, #0
    2094:	beq	20ac <read_int8_array+0x100>
    2098:	mov	r0, r6
    209c:	mov	r1, r4
    20a0:	mov	r2, #1
    20a4:	pop	{r4, r5, r6, sl, fp, lr}
    20a8:	b	9fa0 <transpose_array>
    20ac:	mov	r0, #0
    20b0:	pop	{r4, r5, r6, sl, fp, pc}
    20b4:	movw	r0, #0
    20b8:	movw	r1, #0
    20bc:	movw	r3, #0
    20c0:	movw	r2, #807	; 0x327
    20c4:	movt	r0, #0
    20c8:	movt	r1, #0
    20cc:	movt	r3, #0
    20d0:	bl	0 <__assert_fail>

000020d4 <coda_cursor_read_uint8_array>:
    20d4:	push	{r4, sl, fp, lr}
    20d8:	add	fp, sp, #8
    20dc:	cmp	r0, #0
    20e0:	beq	2180 <coda_cursor_read_uint8_array+0xac>
    20e4:	mov	r3, r0
    20e8:	ldr	r0, [r0, #4]
    20ec:	cmp	r0, #1
    20f0:	blt	2180 <coda_cursor_read_uint8_array+0xac>
    20f4:	add	r0, r3, r0, lsl #4
    20f8:	ldr	r4, [r0, #-8]
    20fc:	cmp	r4, #0
    2100:	beq	2180 <coda_cursor_read_uint8_array+0xac>
    2104:	cmp	r1, #0
    2108:	beq	21a4 <coda_cursor_read_uint8_array+0xd0>
    210c:	ldr	r0, [r4]
    2110:	cmp	r0, #99	; 0x63
    2114:	ldrhi	r4, [r4, #4]
    2118:	ldr	r0, [r4, #8]
    211c:	cmp	r0, #1
    2120:	bne	21bc <coda_cursor_read_uint8_array+0xe8>
    2124:	bl	0 <__aeabi_read_tp>
    2128:	ldr	ip, [r4, #40]	; 0x28
    212c:	ldr	r4, [ip, #8]
    2130:	bic	r4, r4, #1
    2134:	cmp	r4, #2
    2138:	bne	2160 <coda_cursor_read_uint8_array+0x8c>
    213c:	ldr	r4, [pc, #172]	; 21f0 <coda_cursor_read_uint8_array+0x11c>
    2140:	ldr	r4, [pc, r4]
    2144:	ldr	r0, [r0, r4]
    2148:	cmp	r0, #0
    214c:	beq	2160 <coda_cursor_read_uint8_array+0x8c>
    2150:	ldr	r4, [ip, #48]	; 0x30
    2154:	mov	r0, #9
    2158:	cmp	r4, #0
    215c:	bne	21d0 <coda_cursor_read_uint8_array+0xfc>
    2160:	ldr	r0, [ip, #12]
    2164:	cmp	r0, #1
    2168:	bne	21d0 <coda_cursor_read_uint8_array+0xfc>
    216c:	mov	r0, r3
    2170:	bl	21f4 <read_uint8_array>
    2174:	cmp	r0, #0
    2178:	mvnne	r0, #0
    217c:	pop	{r4, sl, fp, pc}
    2180:	movw	r1, #0
    2184:	movw	r2, #0
    2188:	mvn	r0, #99	; 0x63
    218c:	movw	r3, #2967	; 0xb97
    2190:	movt	r1, #0
    2194:	movt	r2, #0
    2198:	bl	0 <coda_set_error>
    219c:	mvn	r0, #0
    21a0:	pop	{r4, sl, fp, pc}
    21a4:	movw	r1, #0
    21a8:	movw	r2, #0
    21ac:	mvn	r0, #99	; 0x63
    21b0:	movw	r3, #2972	; 0xb9c
    21b4:	movt	r1, #0
    21b8:	b	2194 <coda_cursor_read_uint8_array+0xc0>
    21bc:	bl	0 <coda_type_get_class_name>
    21c0:	movw	r1, #0
    21c4:	mov	r2, r0
    21c8:	movt	r1, #0
    21cc:	b	21e0 <coda_cursor_read_uint8_array+0x10c>
    21d0:	bl	0 <coda_type_get_native_type_name>
    21d4:	movw	r1, #0
    21d8:	mov	r2, r0
    21dc:	movt	r1, #0
    21e0:	mvn	r0, #104	; 0x68
    21e4:	bl	0 <coda_set_error>
    21e8:	mvn	r0, #0
    21ec:	pop	{r4, sl, fp, pc}
    21f0:	.word	0x000000a8

000021f4 <read_uint8_array>:
    21f4:	push	{r4, r5, r6, sl, fp, lr}
    21f8:	add	fp, sp, #16
    21fc:	mov	r6, r0
    2200:	ldr	r0, [r0, #4]
    2204:	mov	r4, r1
    2208:	mov	r5, r2
    220c:	add	r0, r6, r0, lsl #4
    2210:	ldr	r0, [r0, #-8]
    2214:	ldr	r0, [r0]
    2218:	sub	r1, r0, #100	; 0x64
    221c:	cmp	r1, #5
    2220:	bhi	2258 <read_uint8_array+0x64>
    2224:	add	r0, pc, #0
    2228:	ldr	pc, [r0, r1, lsl #2]
    222c:	.word	0x00002244
    2230:	.word	0x0000227c
    2234:	.word	0x00002284
    2238:	.word	0x00002298
    223c:	.word	0x000022ec
    2240:	.word	0x000022ec
    2244:	mov	r0, r6
    2248:	mov	r1, r4
    224c:	mov	r2, r5
    2250:	pop	{r4, r5, r6, sl, fp, lr}
    2254:	b	0 <coda_mem_cursor_read_uint8_array>
    2258:	cmp	r0, #1
    225c:	beq	22d0 <read_uint8_array+0xdc>
    2260:	cmp	r0, #0
    2264:	bne	22b4 <read_uint8_array+0xc0>
    2268:	mov	r0, r6
    226c:	mov	r1, r4
    2270:	mov	r2, r5
    2274:	pop	{r4, r5, r6, sl, fp, lr}
    2278:	b	0 <coda_ascii_cursor_read_uint8_array>
    227c:	mvn	r0, #10
    2280:	b	2288 <read_uint8_array+0x94>
    2284:	mvn	r0, #12
    2288:	mov	r1, #0
    228c:	bl	0 <coda_set_error>
    2290:	mvn	r0, #0
    2294:	pop	{r4, r5, r6, sl, fp, pc}
    2298:	mov	r0, r6
    229c:	mov	r1, r4
    22a0:	bl	0 <coda_cdf_cursor_read_uint8_array>
    22a4:	mov	r1, r0
    22a8:	mvn	r0, #0
    22ac:	cmp	r1, #0
    22b0:	popne	{r4, r5, r6, sl, fp, pc}
    22b4:	cmp	r5, #0
    22b8:	beq	22e4 <read_uint8_array+0xf0>
    22bc:	mov	r0, r6
    22c0:	mov	r1, r4
    22c4:	mov	r2, #1
    22c8:	pop	{r4, r5, r6, sl, fp, lr}
    22cc:	b	9fa0 <transpose_array>
    22d0:	mov	r0, r6
    22d4:	mov	r1, r4
    22d8:	mov	r2, r5
    22dc:	pop	{r4, r5, r6, sl, fp, lr}
    22e0:	b	0 <coda_bin_cursor_read_uint8_array>
    22e4:	mov	r0, #0
    22e8:	pop	{r4, r5, r6, sl, fp, pc}
    22ec:	movw	r0, #0
    22f0:	movw	r1, #0
    22f4:	movw	r3, #0
    22f8:	movw	r2, #859	; 0x35b
    22fc:	movt	r0, #0
    2300:	movt	r1, #0
    2304:	movt	r3, #0
    2308:	bl	0 <__assert_fail>

0000230c <coda_cursor_read_int16_array>:
    230c:	push	{r4, r5, r6, sl, fp, lr}
    2310:	add	fp, sp, #16
    2314:	sub	sp, sp, #8
    2318:	cmp	r0, #0
    231c:	beq	2488 <coda_cursor_read_int16_array+0x17c>
    2320:	mov	r5, r0
    2324:	ldr	r0, [r0, #4]
    2328:	cmp	r0, #1
    232c:	blt	2488 <coda_cursor_read_int16_array+0x17c>
    2330:	add	r0, r5, r0, lsl #4
    2334:	mov	r4, r1
    2338:	ldr	r1, [r0, #-8]
    233c:	cmp	r1, #0
    2340:	beq	2488 <coda_cursor_read_int16_array+0x17c>
    2344:	cmp	r4, #0
    2348:	beq	24b4 <coda_cursor_read_int16_array+0x1a8>
    234c:	ldr	r0, [r1]
    2350:	cmp	r0, #99	; 0x63
    2354:	ldrhi	r1, [r1, #4]
    2358:	ldr	r0, [r1, #8]
    235c:	cmp	r0, #1
    2360:	bne	24cc <coda_cursor_read_int16_array+0x1c0>
    2364:	bl	0 <__aeabi_read_tp>
    2368:	ldr	r1, [r1, #40]	; 0x28
    236c:	ldr	r3, [r1, #8]
    2370:	bic	r3, r3, #1
    2374:	cmp	r3, #2
    2378:	bne	23a0 <coda_cursor_read_int16_array+0x94>
    237c:	ldr	r3, [pc, #696]	; 263c <coda_cursor_read_int16_array+0x330>
    2380:	ldr	r3, [pc, r3]
    2384:	ldr	r0, [r0, r3]
    2388:	cmp	r0, #0
    238c:	beq	23a0 <coda_cursor_read_int16_array+0x94>
    2390:	ldr	r3, [r1, #48]	; 0x30
    2394:	mov	r0, #9
    2398:	cmp	r3, #0
    239c:	bne	24e0 <coda_cursor_read_int16_array+0x1d4>
    23a0:	ldr	r0, [r1, #12]
    23a4:	cmp	r0, #2
    23a8:	beq	24fc <coda_cursor_read_int16_array+0x1f0>
    23ac:	cmp	r0, #1
    23b0:	beq	2518 <coda_cursor_read_int16_array+0x20c>
    23b4:	cmp	r0, #0
    23b8:	bne	24e0 <coda_cursor_read_int16_array+0x1d4>
    23bc:	mov	r0, r5
    23c0:	mov	r1, r4
    23c4:	bl	1fac <read_int8_array>
    23c8:	mvn	r6, #0
    23cc:	cmp	r0, #0
    23d0:	bne	24a8 <coda_cursor_read_int16_array+0x19c>
    23d4:	add	r1, sp, #4
    23d8:	mov	r0, r5
    23dc:	bl	0 <coda_cursor_get_num_elements>
    23e0:	cmp	r0, #0
    23e4:	bne	24a8 <coda_cursor_read_int16_array+0x19c>
    23e8:	ldr	r0, [sp, #4]
    23ec:	cmp	r0, #1
    23f0:	blt	2634 <coda_cursor_read_int16_array+0x328>
    23f4:	cmp	r0, #8
    23f8:	bcc	25e4 <coda_cursor_read_int16_array+0x2d8>
    23fc:	sub	r1, r0, #1
    2400:	mov	r2, #0
    2404:	add	r6, r4, r1, lsl #1
    2408:	adds	r3, r1, r1
    240c:	adc	r2, r2, #0
    2410:	cmp	r3, r6
    2414:	bhi	25e4 <coda_cursor_read_int16_array+0x2d8>
    2418:	cmp	r2, #0
    241c:	bne	25e4 <coda_cursor_read_int16_array+0x2d8>
    2420:	add	r2, r4, r1
    2424:	cmp	r1, r2
    2428:	bhi	25e4 <coda_cursor_read_int16_array+0x2d8>
    242c:	add	r3, r4, r0
    2430:	add	r2, r4, r0, lsl #1
    2434:	cmp	r3, r4
    2438:	cmphi	r2, r4
    243c:	bhi	25e4 <coda_cursor_read_int16_array+0x2d8>
    2440:	bic	ip, r0, #7
    2444:	sub	r6, r2, #16
    2448:	sub	r3, r3, #8
    244c:	mvn	lr, #7
    2450:	mvn	r2, #15
    2454:	sub	r1, r0, ip
    2458:	mov	r5, ip
    245c:	vld1.8	{d16}, [r3], lr
    2460:	subs	r5, r5, #8
    2464:	vrev64.8	d16, d16
    2468:	vmovl.s8	q8, d16
    246c:	vrev64.16	q8, q8
    2470:	vext.8	q8, q8, q8, #8
    2474:	vst1.16	{d16-d17}, [r6], r2
    2478:	bne	245c <coda_cursor_read_int16_array+0x150>
    247c:	cmp	r0, ip
    2480:	bne	25e8 <coda_cursor_read_int16_array+0x2dc>
    2484:	b	2634 <coda_cursor_read_int16_array+0x328>
    2488:	movw	r1, #0
    248c:	movw	r2, #0
    2490:	mvn	r0, #99	; 0x63
    2494:	movw	r3, #3030	; 0xbd6
    2498:	movt	r1, #0
    249c:	movt	r2, #0
    24a0:	bl	0 <coda_set_error>
    24a4:	mvn	r6, #0
    24a8:	mov	r0, r6
    24ac:	sub	sp, fp, #16
    24b0:	pop	{r4, r5, r6, sl, fp, pc}
    24b4:	movw	r1, #0
    24b8:	movw	r2, #0
    24bc:	mvn	r0, #99	; 0x63
    24c0:	movw	r3, #3035	; 0xbdb
    24c4:	movt	r1, #0
    24c8:	b	249c <coda_cursor_read_int16_array+0x190>
    24cc:	bl	0 <coda_type_get_class_name>
    24d0:	movw	r1, #0
    24d4:	mov	r2, r0
    24d8:	movt	r1, #0
    24dc:	b	24f0 <coda_cursor_read_int16_array+0x1e4>
    24e0:	bl	0 <coda_type_get_native_type_name>
    24e4:	movw	r1, #0
    24e8:	mov	r2, r0
    24ec:	movt	r1, #0
    24f0:	mvn	r0, #104	; 0x68
    24f4:	bl	0 <coda_set_error>
    24f8:	b	24a4 <coda_cursor_read_int16_array+0x198>
    24fc:	mov	r0, r5
    2500:	mov	r1, r4
    2504:	bl	2640 <read_int16_array>
    2508:	cmp	r0, #0
    250c:	mvn	r6, #0
    2510:	moveq	r6, #0
    2514:	b	24a8 <coda_cursor_read_int16_array+0x19c>
    2518:	mov	r0, r5
    251c:	mov	r1, r4
    2520:	bl	21f4 <read_uint8_array>
    2524:	mvn	r6, #0
    2528:	cmp	r0, #0
    252c:	bne	24a8 <coda_cursor_read_int16_array+0x19c>
    2530:	add	r1, sp, #4
    2534:	mov	r0, r5
    2538:	bl	0 <coda_cursor_get_num_elements>
    253c:	cmp	r0, #0
    2540:	bne	24a8 <coda_cursor_read_int16_array+0x19c>
    2544:	ldr	r0, [sp, #4]
    2548:	cmp	r0, #1
    254c:	blt	2634 <coda_cursor_read_int16_array+0x328>
    2550:	cmp	r0, #8
    2554:	bcc	2610 <coda_cursor_read_int16_array+0x304>
    2558:	sub	r1, r0, #1
    255c:	mov	r2, #0
    2560:	add	r6, r4, r1, lsl #1
    2564:	adds	r3, r1, r1
    2568:	adc	r2, r2, #0
    256c:	cmp	r3, r6
    2570:	bhi	2610 <coda_cursor_read_int16_array+0x304>
    2574:	cmp	r2, #0
    2578:	bne	2610 <coda_cursor_read_int16_array+0x304>
    257c:	add	r2, r4, r1
    2580:	cmp	r1, r2
    2584:	bhi	2610 <coda_cursor_read_int16_array+0x304>
    2588:	add	r3, r4, r0
    258c:	add	r2, r4, r0, lsl #1
    2590:	cmp	r3, r4
    2594:	cmphi	r2, r4
    2598:	bhi	2610 <coda_cursor_read_int16_array+0x304>
    259c:	bic	ip, r0, #7
    25a0:	sub	r6, r2, #16
    25a4:	sub	r3, r3, #8
    25a8:	mvn	lr, #7
    25ac:	mvn	r2, #15
    25b0:	sub	r1, r0, ip
    25b4:	mov	r5, ip
    25b8:	vld1.8	{d16}, [r3], lr
    25bc:	subs	r5, r5, #8
    25c0:	vrev64.8	d16, d16
    25c4:	vmovl.u8	q8, d16
    25c8:	vrev64.16	q8, q8
    25cc:	vext.8	q8, q8, q8, #8
    25d0:	vst1.16	{d16-d17}, [r6], r2
    25d4:	bne	25b8 <coda_cursor_read_int16_array+0x2ac>
    25d8:	cmp	r0, ip
    25dc:	bne	2614 <coda_cursor_read_int16_array+0x308>
    25e0:	b	2634 <coda_cursor_read_int16_array+0x328>
    25e4:	mov	r1, r0
    25e8:	add	r0, r4, r1, lsl #1
    25ec:	sub	r2, r4, #1
    25f0:	sub	r0, r0, #2
    25f4:	add	r3, r2, r1
    25f8:	sub	r1, r1, #1
    25fc:	ldrsb	r3, [r3]
    2600:	cmp	r1, #0
    2604:	strh	r3, [r0], #-2
    2608:	bgt	25f4 <coda_cursor_read_int16_array+0x2e8>
    260c:	b	2634 <coda_cursor_read_int16_array+0x328>
    2610:	mov	r1, r0
    2614:	add	r0, r4, r1, lsl #1
    2618:	sub	r2, r4, #1
    261c:	sub	r0, r0, #2
    2620:	ldrb	r3, [r2, r1]
    2624:	sub	r1, r1, #1
    2628:	cmp	r1, #0
    262c:	strh	r3, [r0], #-2
    2630:	bgt	2620 <coda_cursor_read_int16_array+0x314>
    2634:	mov	r6, #0
    2638:	b	24a8 <coda_cursor_read_int16_array+0x19c>
    263c:	.word	0x000002b4

00002640 <read_int16_array>:
    2640:	push	{r4, r5, r6, sl, fp, lr}
    2644:	add	fp, sp, #16
    2648:	mov	r6, r0
    264c:	ldr	r0, [r0, #4]
    2650:	mov	r4, r1
    2654:	mov	r5, r2
    2658:	add	r0, r6, r0, lsl #4
    265c:	ldr	r0, [r0, #-8]
    2660:	ldr	r0, [r0]
    2664:	sub	r1, r0, #100	; 0x64
    2668:	cmp	r1, #5
    266c:	bhi	26a4 <read_int16_array+0x64>
    2670:	add	r0, pc, #0
    2674:	ldr	pc, [r0, r1, lsl #2]
    2678:	.word	0x00002690
    267c:	.word	0x000026f4
    2680:	.word	0x000026ec
    2684:	.word	0x00002708
    2688:	.word	0x000026dc
    268c:	.word	0x00002748
    2690:	mov	r0, r6
    2694:	mov	r1, r4
    2698:	mov	r2, r5
    269c:	pop	{r4, r5, r6, sl, fp, lr}
    26a0:	b	0 <coda_mem_cursor_read_int16_array>
    26a4:	cmp	r0, #1
    26a8:	beq	26c8 <read_int16_array+0x88>
    26ac:	cmp	r0, #0
    26b0:	bne	2724 <read_int16_array+0xe4>
    26b4:	mov	r0, r6
    26b8:	mov	r1, r4
    26bc:	mov	r2, r5
    26c0:	pop	{r4, r5, r6, sl, fp, lr}
    26c4:	b	0 <coda_ascii_cursor_read_int16_array>
    26c8:	mov	r0, r6
    26cc:	mov	r1, r4
    26d0:	mov	r2, r5
    26d4:	pop	{r4, r5, r6, sl, fp, lr}
    26d8:	b	0 <coda_bin_cursor_read_int16_array>
    26dc:	mov	r0, r6
    26e0:	mov	r1, r4
    26e4:	bl	0 <coda_netcdf_cursor_read_int16_array>
    26e8:	b	2714 <read_int16_array+0xd4>
    26ec:	mvn	r0, #12
    26f0:	b	26f8 <read_int16_array+0xb8>
    26f4:	mvn	r0, #10
    26f8:	mov	r1, #0
    26fc:	bl	0 <coda_set_error>
    2700:	mvn	r0, #0
    2704:	pop	{r4, r5, r6, sl, fp, pc}
    2708:	mov	r0, r6
    270c:	mov	r1, r4
    2710:	bl	0 <coda_cdf_cursor_read_int16_array>
    2714:	mov	r1, r0
    2718:	mvn	r0, #0
    271c:	cmp	r1, #0
    2720:	popne	{r4, r5, r6, sl, fp, pc}
    2724:	cmp	r5, #0
    2728:	beq	2740 <read_int16_array+0x100>
    272c:	mov	r0, r6
    2730:	mov	r1, r4
    2734:	mov	r2, #2
    2738:	pop	{r4, r5, r6, sl, fp, lr}
    273c:	b	9fa0 <transpose_array>
    2740:	mov	r0, #0
    2744:	pop	{r4, r5, r6, sl, fp, pc}
    2748:	movw	r0, #0
    274c:	movw	r1, #0
    2750:	movw	r3, #0
    2754:	mov	r2, #916	; 0x394
    2758:	movt	r0, #0
    275c:	movt	r1, #0
    2760:	movt	r3, #0
    2764:	bl	0 <__assert_fail>

00002768 <coda_cursor_read_uint16_array>:
    2768:	push	{r4, r5, r6, sl, fp, lr}
    276c:	add	fp, sp, #16
    2770:	sub	sp, sp, #8
    2774:	cmp	r0, #0
    2778:	beq	28dc <coda_cursor_read_uint16_array+0x174>
    277c:	mov	r5, r0
    2780:	ldr	r0, [r0, #4]
    2784:	cmp	r0, #1
    2788:	blt	28dc <coda_cursor_read_uint16_array+0x174>
    278c:	add	r0, r5, r0, lsl #4
    2790:	mov	r4, r1
    2794:	ldr	r1, [r0, #-8]
    2798:	cmp	r1, #0
    279c:	beq	28dc <coda_cursor_read_uint16_array+0x174>
    27a0:	cmp	r4, #0
    27a4:	beq	2908 <coda_cursor_read_uint16_array+0x1a0>
    27a8:	ldr	r0, [r1]
    27ac:	cmp	r0, #99	; 0x63
    27b0:	ldrhi	r1, [r1, #4]
    27b4:	ldr	r0, [r1, #8]
    27b8:	cmp	r0, #1
    27bc:	bne	2920 <coda_cursor_read_uint16_array+0x1b8>
    27c0:	bl	0 <__aeabi_read_tp>
    27c4:	ldr	r1, [r1, #40]	; 0x28
    27c8:	ldr	r3, [r1, #8]
    27cc:	bic	r3, r3, #1
    27d0:	cmp	r3, #2
    27d4:	bne	27fc <coda_cursor_read_uint16_array+0x94>
    27d8:	ldr	r3, [pc, #440]	; 2998 <coda_cursor_read_uint16_array+0x230>
    27dc:	ldr	r3, [pc, r3]
    27e0:	ldr	r0, [r0, r3]
    27e4:	cmp	r0, #0
    27e8:	beq	27fc <coda_cursor_read_uint16_array+0x94>
    27ec:	ldr	r3, [r1, #48]	; 0x30
    27f0:	mov	r0, #9
    27f4:	cmp	r3, #0
    27f8:	bne	2934 <coda_cursor_read_uint16_array+0x1cc>
    27fc:	ldr	r0, [r1, #12]
    2800:	cmp	r0, #3
    2804:	beq	2950 <coda_cursor_read_uint16_array+0x1e8>
    2808:	cmp	r0, #1
    280c:	bne	2934 <coda_cursor_read_uint16_array+0x1cc>
    2810:	mov	r0, r5
    2814:	mov	r1, r4
    2818:	bl	21f4 <read_uint8_array>
    281c:	mvn	r6, #0
    2820:	cmp	r0, #0
    2824:	bne	28fc <coda_cursor_read_uint16_array+0x194>
    2828:	add	r1, sp, #4
    282c:	mov	r0, r5
    2830:	bl	0 <coda_cursor_get_num_elements>
    2834:	cmp	r0, #0
    2838:	bne	28fc <coda_cursor_read_uint16_array+0x194>
    283c:	ldr	r0, [sp, #4]
    2840:	cmp	r0, #1
    2844:	blt	2990 <coda_cursor_read_uint16_array+0x228>
    2848:	cmp	r0, #8
    284c:	bcc	296c <coda_cursor_read_uint16_array+0x204>
    2850:	sub	r1, r0, #1
    2854:	mov	r2, #0
    2858:	add	r6, r4, r1, lsl #1
    285c:	adds	r3, r1, r1
    2860:	adc	r2, r2, #0
    2864:	cmp	r3, r6
    2868:	bhi	296c <coda_cursor_read_uint16_array+0x204>
    286c:	cmp	r2, #0
    2870:	bne	296c <coda_cursor_read_uint16_array+0x204>
    2874:	add	r2, r4, r1
    2878:	cmp	r1, r2
    287c:	bhi	296c <coda_cursor_read_uint16_array+0x204>
    2880:	add	r3, r4, r0
    2884:	add	r2, r4, r0, lsl #1
    2888:	cmp	r3, r4
    288c:	cmphi	r2, r4
    2890:	bhi	296c <coda_cursor_read_uint16_array+0x204>
    2894:	bic	ip, r0, #7
    2898:	sub	r6, r2, #16
    289c:	sub	r3, r3, #8
    28a0:	mvn	lr, #7
    28a4:	mvn	r2, #15
    28a8:	sub	r1, r0, ip
    28ac:	mov	r5, ip
    28b0:	vld1.8	{d16}, [r3], lr
    28b4:	subs	r5, r5, #8
    28b8:	vrev64.8	d16, d16
    28bc:	vmovl.u8	q8, d16
    28c0:	vrev64.16	q8, q8
    28c4:	vext.8	q8, q8, q8, #8
    28c8:	vst1.16	{d16-d17}, [r6], r2
    28cc:	bne	28b0 <coda_cursor_read_uint16_array+0x148>
    28d0:	cmp	r0, ip
    28d4:	bne	2970 <coda_cursor_read_uint16_array+0x208>
    28d8:	b	2990 <coda_cursor_read_uint16_array+0x228>
    28dc:	movw	r1, #0
    28e0:	movw	r2, #0
    28e4:	mvn	r0, #99	; 0x63
    28e8:	mov	r3, #3120	; 0xc30
    28ec:	movt	r1, #0
    28f0:	movt	r2, #0
    28f4:	bl	0 <coda_set_error>
    28f8:	mvn	r6, #0
    28fc:	mov	r0, r6
    2900:	sub	sp, fp, #16
    2904:	pop	{r4, r5, r6, sl, fp, pc}
    2908:	movw	r1, #0
    290c:	movw	r2, #0
    2910:	mvn	r0, #99	; 0x63
    2914:	movw	r3, #3125	; 0xc35
    2918:	movt	r1, #0
    291c:	b	28f0 <coda_cursor_read_uint16_array+0x188>
    2920:	bl	0 <coda_type_get_class_name>
    2924:	movw	r1, #0
    2928:	mov	r2, r0
    292c:	movt	r1, #0
    2930:	b	2944 <coda_cursor_read_uint16_array+0x1dc>
    2934:	bl	0 <coda_type_get_native_type_name>
    2938:	movw	r1, #0
    293c:	mov	r2, r0
    2940:	movt	r1, #0
    2944:	mvn	r0, #104	; 0x68
    2948:	bl	0 <coda_set_error>
    294c:	b	28f8 <coda_cursor_read_uint16_array+0x190>
    2950:	mov	r0, r5
    2954:	mov	r1, r4
    2958:	bl	299c <read_uint16_array>
    295c:	cmp	r0, #0
    2960:	mvn	r6, #0
    2964:	moveq	r6, #0
    2968:	b	28fc <coda_cursor_read_uint16_array+0x194>
    296c:	mov	r1, r0
    2970:	add	r0, r4, r1, lsl #1
    2974:	sub	r2, r4, #1
    2978:	sub	r0, r0, #2
    297c:	ldrb	r3, [r2, r1]
    2980:	sub	r1, r1, #1
    2984:	cmp	r1, #0
    2988:	strh	r3, [r0], #-2
    298c:	bgt	297c <coda_cursor_read_uint16_array+0x214>
    2990:	mov	r6, #0
    2994:	b	28fc <coda_cursor_read_uint16_array+0x194>
    2998:	.word	0x000001b4

0000299c <read_uint16_array>:
    299c:	push	{r4, r5, r6, sl, fp, lr}
    29a0:	add	fp, sp, #16
    29a4:	mov	r6, r0
    29a8:	ldr	r0, [r0, #4]
    29ac:	mov	r4, r1
    29b0:	mov	r5, r2
    29b4:	add	r0, r6, r0, lsl #4
    29b8:	ldr	r0, [r0, #-8]
    29bc:	ldr	r0, [r0]
    29c0:	sub	r1, r0, #100	; 0x64
    29c4:	cmp	r1, #5
    29c8:	bhi	2a00 <read_uint16_array+0x64>
    29cc:	add	r0, pc, #0
    29d0:	ldr	pc, [r0, r1, lsl #2]
    29d4:	.word	0x000029ec
    29d8:	.word	0x00002a24
    29dc:	.word	0x00002a2c
    29e0:	.word	0x00002a40
    29e4:	.word	0x00002a94
    29e8:	.word	0x00002a94
    29ec:	mov	r0, r6
    29f0:	mov	r1, r4
    29f4:	mov	r2, r5
    29f8:	pop	{r4, r5, r6, sl, fp, lr}
    29fc:	b	0 <coda_mem_cursor_read_uint16_array>
    2a00:	cmp	r0, #1
    2a04:	beq	2a78 <read_uint16_array+0xdc>
    2a08:	cmp	r0, #0
    2a0c:	bne	2a5c <read_uint16_array+0xc0>
    2a10:	mov	r0, r6
    2a14:	mov	r1, r4
    2a18:	mov	r2, r5
    2a1c:	pop	{r4, r5, r6, sl, fp, lr}
    2a20:	b	0 <coda_ascii_cursor_read_uint16_array>
    2a24:	mvn	r0, #10
    2a28:	b	2a30 <read_uint16_array+0x94>
    2a2c:	mvn	r0, #12
    2a30:	mov	r1, #0
    2a34:	bl	0 <coda_set_error>
    2a38:	mvn	r0, #0
    2a3c:	pop	{r4, r5, r6, sl, fp, pc}
    2a40:	mov	r0, r6
    2a44:	mov	r1, r4
    2a48:	bl	0 <coda_cdf_cursor_read_uint16_array>
    2a4c:	mov	r1, r0
    2a50:	mvn	r0, #0
    2a54:	cmp	r1, #0
    2a58:	popne	{r4, r5, r6, sl, fp, pc}
    2a5c:	cmp	r5, #0
    2a60:	beq	2a8c <read_uint16_array+0xf0>
    2a64:	mov	r0, r6
    2a68:	mov	r1, r4
    2a6c:	mov	r2, #2
    2a70:	pop	{r4, r5, r6, sl, fp, lr}
    2a74:	b	9fa0 <transpose_array>
    2a78:	mov	r0, r6
    2a7c:	mov	r1, r4
    2a80:	mov	r2, r5
    2a84:	pop	{r4, r5, r6, sl, fp, lr}
    2a88:	b	0 <coda_bin_cursor_read_uint16_array>
    2a8c:	mov	r0, #0
    2a90:	pop	{r4, r5, r6, sl, fp, pc}
    2a94:	movw	r0, #0
    2a98:	movw	r1, #0
    2a9c:	movw	r3, #0
    2aa0:	mov	r2, #968	; 0x3c8
    2aa4:	movt	r0, #0
    2aa8:	movt	r1, #0
    2aac:	movt	r3, #0
    2ab0:	bl	0 <__assert_fail>

00002ab4 <coda_cursor_read_int32_array>:
    2ab4:	push	{r4, r5, r6, r7, fp, lr}
    2ab8:	add	fp, sp, #16
    2abc:	sub	sp, sp, #16
    2ac0:	cmp	r0, #0
    2ac4:	beq	2c54 <coda_cursor_read_int32_array+0x1a0>
    2ac8:	mov	r5, r0
    2acc:	ldr	r0, [r0, #4]
    2ad0:	cmp	r0, #1
    2ad4:	blt	2c54 <coda_cursor_read_int32_array+0x1a0>
    2ad8:	add	r0, r5, r0, lsl #4
    2adc:	mov	r4, r1
    2ae0:	ldr	r1, [r0, #-8]
    2ae4:	cmp	r1, #0
    2ae8:	beq	2c54 <coda_cursor_read_int32_array+0x1a0>
    2aec:	cmp	r4, #0
    2af0:	beq	2c80 <coda_cursor_read_int32_array+0x1cc>
    2af4:	ldr	r0, [r1]
    2af8:	cmp	r0, #99	; 0x63
    2afc:	ldrhi	r1, [r1, #4]
    2b00:	ldr	r0, [r1, #8]
    2b04:	cmp	r0, #1
    2b08:	bne	2c98 <coda_cursor_read_int32_array+0x1e4>
    2b0c:	bl	0 <__aeabi_read_tp>
    2b10:	ldr	r1, [r1, #40]	; 0x28
    2b14:	ldr	r3, [r1, #8]
    2b18:	bic	r3, r3, #1
    2b1c:	cmp	r3, #2
    2b20:	bne	2b48 <coda_cursor_read_int32_array+0x94>
    2b24:	ldr	r3, [pc, #1124]	; 2f90 <coda_cursor_read_int32_array+0x4dc>
    2b28:	ldr	r3, [pc, r3]
    2b2c:	ldr	r0, [r0, r3]
    2b30:	cmp	r0, #0
    2b34:	beq	2b48 <coda_cursor_read_int32_array+0x94>
    2b38:	ldr	r3, [r1, #48]	; 0x30
    2b3c:	mov	r0, #9
    2b40:	cmp	r3, #0
    2b44:	bne	2cac <coda_cursor_read_int32_array+0x1f8>
    2b48:	ldr	r0, [r1, #12]
    2b4c:	cmp	r0, #4
    2b50:	bhi	2cac <coda_cursor_read_int32_array+0x1f8>
    2b54:	add	r1, pc, #0
    2b58:	ldr	pc, [r1, r0, lsl #2]
    2b5c:	.word	0x00002b70
    2b60:	.word	0x00002cc8
    2b64:	.word	0x00002dac
    2b68:	.word	0x00002df4
    2b6c:	.word	0x00002e3c
    2b70:	mov	r0, r5
    2b74:	mov	r1, r4
    2b78:	bl	1fac <read_int8_array>
    2b7c:	mvn	r6, #0
    2b80:	cmp	r0, #0
    2b84:	bne	2c74 <coda_cursor_read_int32_array+0x1c0>
    2b88:	add	r1, sp, #12
    2b8c:	mov	r0, r5
    2b90:	bl	0 <coda_cursor_get_num_elements>
    2b94:	cmp	r0, #0
    2b98:	bne	2c74 <coda_cursor_read_int32_array+0x1c0>
    2b9c:	ldr	r0, [sp, #12]
    2ba0:	cmp	r0, #1
    2ba4:	blt	2f88 <coda_cursor_read_int32_array+0x4d4>
    2ba8:	cmp	r0, #4
    2bac:	bcc	2e58 <coda_cursor_read_int32_array+0x3a4>
    2bb0:	sub	r1, r0, #1
    2bb4:	bic	r2, r1, #-1073741824	; 0xc0000000
    2bb8:	add	r3, r4, r1, lsl #2
    2bbc:	lsl	r6, r1, #2
    2bc0:	subs	r2, r1, r2
    2bc4:	movwne	r2, #1
    2bc8:	cmp	r6, r3
    2bcc:	bhi	2e58 <coda_cursor_read_int32_array+0x3a4>
    2bd0:	cmp	r2, #0
    2bd4:	bne	2e58 <coda_cursor_read_int32_array+0x3a4>
    2bd8:	add	r2, r4, r1
    2bdc:	cmp	r1, r2
    2be0:	bhi	2e58 <coda_cursor_read_int32_array+0x3a4>
    2be4:	add	r2, r4, r0
    2be8:	add	r1, r4, r0, lsl #2
    2bec:	cmp	r2, r4
    2bf0:	cmphi	r1, r4
    2bf4:	bhi	2e58 <coda_cursor_read_int32_array+0x3a4>
    2bf8:	bic	ip, r0, #3
    2bfc:	sub	r3, r2, #4
    2c00:	sub	r6, r1, #16
    2c04:	add	r5, sp, #4
    2c08:	mvn	r2, #15
    2c0c:	sub	lr, r0, ip
    2c10:	mov	r1, ip
    2c14:	ldr	r7, [r3], #-4
    2c18:	subs	r1, r1, #4
    2c1c:	str	r7, [sp, #4]
    2c20:	vld1.32	{d16[0]}, [r5 :32]
    2c24:	vmovl.u8	q8, d16
    2c28:	vrev64.16	d16, d16
    2c2c:	vmovl.u16	q8, d16
    2c30:	vshl.s32	q8, q8, #24
    2c34:	vshr.s32	q8, q8, #24
    2c38:	vrev64.32	q8, q8
    2c3c:	vext.8	q8, q8, q8, #8
    2c40:	vst1.32	{d16-d17}, [r6], r2
    2c44:	bne	2c14 <coda_cursor_read_int32_array+0x160>
    2c48:	cmp	r0, ip
    2c4c:	bne	2e5c <coda_cursor_read_int32_array+0x3a8>
    2c50:	b	2f88 <coda_cursor_read_int32_array+0x4d4>
    2c54:	movw	r1, #0
    2c58:	movw	r2, #0
    2c5c:	mvn	r0, #99	; 0x63
    2c60:	movw	r3, #3199	; 0xc7f
    2c64:	movt	r1, #0
    2c68:	movt	r2, #0
    2c6c:	bl	0 <coda_set_error>
    2c70:	mvn	r6, #0
    2c74:	mov	r0, r6
    2c78:	sub	sp, fp, #16
    2c7c:	pop	{r4, r5, r6, r7, fp, pc}
    2c80:	movw	r1, #0
    2c84:	movw	r2, #0
    2c88:	mvn	r0, #99	; 0x63
    2c8c:	movw	r3, #3204	; 0xc84
    2c90:	movt	r1, #0
    2c94:	b	2c68 <coda_cursor_read_int32_array+0x1b4>
    2c98:	bl	0 <coda_type_get_class_name>
    2c9c:	movw	r1, #0
    2ca0:	mov	r2, r0
    2ca4:	movt	r1, #0
    2ca8:	b	2cbc <coda_cursor_read_int32_array+0x208>
    2cac:	bl	0 <coda_type_get_native_type_name>
    2cb0:	movw	r1, #0
    2cb4:	mov	r2, r0
    2cb8:	movt	r1, #0
    2cbc:	mvn	r0, #104	; 0x68
    2cc0:	bl	0 <coda_set_error>
    2cc4:	b	2c70 <coda_cursor_read_int32_array+0x1bc>
    2cc8:	mov	r0, r5
    2ccc:	mov	r1, r4
    2cd0:	bl	21f4 <read_uint8_array>
    2cd4:	mvn	r6, #0
    2cd8:	cmp	r0, #0
    2cdc:	bne	2c74 <coda_cursor_read_int32_array+0x1c0>
    2ce0:	add	r1, sp, #12
    2ce4:	mov	r0, r5
    2ce8:	bl	0 <coda_cursor_get_num_elements>
    2cec:	cmp	r0, #0
    2cf0:	bne	2c74 <coda_cursor_read_int32_array+0x1c0>
    2cf4:	ldr	r0, [sp, #12]
    2cf8:	cmp	r0, #1
    2cfc:	blt	2f88 <coda_cursor_read_int32_array+0x4d4>
    2d00:	cmp	r0, #4
    2d04:	bcc	2e80 <coda_cursor_read_int32_array+0x3cc>
    2d08:	sub	r1, r0, #1
    2d0c:	bic	r2, r1, #-1073741824	; 0xc0000000
    2d10:	add	r3, r4, r1, lsl #2
    2d14:	lsl	r7, r1, #2
    2d18:	subs	r2, r1, r2
    2d1c:	movwne	r2, #1
    2d20:	cmp	r7, r3
    2d24:	bhi	2e80 <coda_cursor_read_int32_array+0x3cc>
    2d28:	cmp	r2, #0
    2d2c:	bne	2e80 <coda_cursor_read_int32_array+0x3cc>
    2d30:	add	r2, r4, r1
    2d34:	cmp	r1, r2
    2d38:	bhi	2e80 <coda_cursor_read_int32_array+0x3cc>
    2d3c:	add	r2, r4, r0
    2d40:	add	r1, r4, r0, lsl #2
    2d44:	cmp	r2, r4
    2d48:	cmphi	r1, r4
    2d4c:	bhi	2e80 <coda_cursor_read_int32_array+0x3cc>
    2d50:	vmov.i32	q8, #255	; 0x000000ff
    2d54:	bic	ip, r0, #3
    2d58:	sub	r3, r2, #4
    2d5c:	sub	r6, r1, #16
    2d60:	add	r5, sp, #8
    2d64:	mvn	r2, #15
    2d68:	sub	lr, r0, ip
    2d6c:	mov	r1, ip
    2d70:	ldr	r7, [r3], #-4
    2d74:	subs	r1, r1, #4
    2d78:	str	r7, [sp, #8]
    2d7c:	vld1.32	{d18[0]}, [r5 :32]
    2d80:	vmovl.u8	q9, d18
    2d84:	vrev64.16	d18, d18
    2d88:	vmovl.u16	q9, d18
    2d8c:	vand	q9, q9, q8
    2d90:	vrev64.32	q9, q9
    2d94:	vext.8	q9, q9, q9, #8
    2d98:	vst1.32	{d18-d19}, [r6], r2
    2d9c:	bne	2d70 <coda_cursor_read_int32_array+0x2bc>
    2da0:	cmp	r0, ip
    2da4:	bne	2e84 <coda_cursor_read_int32_array+0x3d0>
    2da8:	b	2f88 <coda_cursor_read_int32_array+0x4d4>
    2dac:	mov	r0, r5
    2db0:	mov	r1, r4
    2db4:	bl	2640 <read_int16_array>
    2db8:	mvn	r6, #0
    2dbc:	cmp	r0, #0
    2dc0:	bne	2c74 <coda_cursor_read_int32_array+0x1c0>
    2dc4:	add	r1, sp, #12
    2dc8:	mov	r0, r5
    2dcc:	bl	0 <coda_cursor_get_num_elements>
    2dd0:	cmp	r0, #0
    2dd4:	bne	2c74 <coda_cursor_read_int32_array+0x1c0>
    2dd8:	ldr	lr, [sp, #12]
    2ddc:	cmp	lr, #1
    2de0:	blt	2f88 <coda_cursor_read_int32_array+0x4d4>
    2de4:	cmp	lr, #4
    2de8:	bcs	2ea4 <coda_cursor_read_int32_array+0x3f0>
    2dec:	mov	r0, lr
    2df0:	b	2ef0 <coda_cursor_read_int32_array+0x43c>
    2df4:	mov	r0, r5
    2df8:	mov	r1, r4
    2dfc:	bl	299c <read_uint16_array>
    2e00:	mvn	r6, #0
    2e04:	cmp	r0, #0
    2e08:	bne	2c74 <coda_cursor_read_int32_array+0x1c0>
    2e0c:	add	r1, sp, #12
    2e10:	mov	r0, r5
    2e14:	bl	0 <coda_cursor_get_num_elements>
    2e18:	cmp	r0, #0
    2e1c:	bne	2c74 <coda_cursor_read_int32_array+0x1c0>
    2e20:	ldr	lr, [sp, #12]
    2e24:	cmp	lr, #1
    2e28:	blt	2f88 <coda_cursor_read_int32_array+0x4d4>
    2e2c:	cmp	lr, #4
    2e30:	bcs	2f18 <coda_cursor_read_int32_array+0x464>
    2e34:	mov	r0, lr
    2e38:	b	2f64 <coda_cursor_read_int32_array+0x4b0>
    2e3c:	mov	r0, r5
    2e40:	mov	r1, r4
    2e44:	bl	2f94 <read_int32_array>
    2e48:	cmp	r0, #0
    2e4c:	mvn	r6, #0
    2e50:	moveq	r6, #0
    2e54:	b	2c74 <coda_cursor_read_int32_array+0x1c0>
    2e58:	mov	lr, r0
    2e5c:	sub	r0, lr, #1
    2e60:	add	r1, r4, r0
    2e64:	cmp	r0, #0
    2e68:	ldrsb	r1, [r1]
    2e6c:	str	r1, [r4, r0, lsl #2]
    2e70:	sub	r1, r0, #1
    2e74:	mov	r0, r1
    2e78:	bgt	2e60 <coda_cursor_read_int32_array+0x3ac>
    2e7c:	b	2f88 <coda_cursor_read_int32_array+0x4d4>
    2e80:	mov	lr, r0
    2e84:	sub	r0, lr, #1
    2e88:	ldrb	r1, [r4, r0]
    2e8c:	cmp	r0, #0
    2e90:	str	r1, [r4, r0, lsl #2]
    2e94:	sub	r1, r0, #1
    2e98:	mov	r0, r1
    2e9c:	bgt	2e88 <coda_cursor_read_int32_array+0x3d4>
    2ea0:	b	2f88 <coda_cursor_read_int32_array+0x4d4>
    2ea4:	add	r1, r4, lr, lsl #1
    2ea8:	bic	ip, lr, #3
    2eac:	mvn	r5, #7
    2eb0:	mvn	r2, #15
    2eb4:	sub	r0, lr, ip
    2eb8:	sub	r3, r1, #8
    2ebc:	add	r1, r4, lr, lsl #2
    2ec0:	sub	r6, r1, #16
    2ec4:	mov	r1, ip
    2ec8:	vld1.16	{d16}, [r3], r5
    2ecc:	subs	r1, r1, #4
    2ed0:	vrev64.16	d16, d16
    2ed4:	vmovl.s16	q8, d16
    2ed8:	vrev64.32	q8, q8
    2edc:	vext.8	q8, q8, q8, #8
    2ee0:	vst1.32	{d16-d17}, [r6], r2
    2ee4:	bne	2ec8 <coda_cursor_read_int32_array+0x414>
    2ee8:	cmp	lr, ip
    2eec:	beq	2f88 <coda_cursor_read_int32_array+0x4d4>
    2ef0:	mvn	r1, #1
    2ef4:	add	r1, r1, r0, lsl #1
    2ef8:	add	r2, r4, r1
    2efc:	sub	r0, r0, #1
    2f00:	ldrsh	r2, [r2]
    2f04:	cmp	r0, #0
    2f08:	str	r2, [r4, r1, lsl #1]
    2f0c:	sub	r1, r1, #2
    2f10:	bgt	2ef8 <coda_cursor_read_int32_array+0x444>
    2f14:	b	2f88 <coda_cursor_read_int32_array+0x4d4>
    2f18:	add	r1, r4, lr, lsl #1
    2f1c:	bic	ip, lr, #3
    2f20:	mvn	r5, #7
    2f24:	mvn	r2, #15
    2f28:	sub	r0, lr, ip
    2f2c:	sub	r3, r1, #8
    2f30:	add	r1, r4, lr, lsl #2
    2f34:	sub	r6, r1, #16
    2f38:	mov	r1, ip
    2f3c:	vld1.16	{d16}, [r3], r5
    2f40:	subs	r1, r1, #4
    2f44:	vrev64.16	d16, d16
    2f48:	vmovl.u16	q8, d16
    2f4c:	vrev64.32	q8, q8
    2f50:	vext.8	q8, q8, q8, #8
    2f54:	vst1.32	{d16-d17}, [r6], r2
    2f58:	bne	2f3c <coda_cursor_read_int32_array+0x488>
    2f5c:	cmp	lr, ip
    2f60:	beq	2f88 <coda_cursor_read_int32_array+0x4d4>
    2f64:	mvn	r1, #1
    2f68:	add	r1, r1, r0, lsl #1
    2f6c:	add	r2, r4, r1
    2f70:	sub	r0, r0, #1
    2f74:	ldrh	r2, [r2]
    2f78:	cmp	r0, #0
    2f7c:	str	r2, [r4, r1, lsl #1]
    2f80:	sub	r1, r1, #2
    2f84:	bgt	2f6c <coda_cursor_read_int32_array+0x4b8>
    2f88:	mov	r6, #0
    2f8c:	b	2c74 <coda_cursor_read_int32_array+0x1c0>
    2f90:	.word	0x00000460

00002f94 <read_int32_array>:
    2f94:	push	{r4, r5, r6, sl, fp, lr}
    2f98:	add	fp, sp, #16
    2f9c:	mov	r6, r0
    2fa0:	ldr	r0, [r0, #4]
    2fa4:	mov	r4, r1
    2fa8:	mov	r5, r2
    2fac:	add	r0, r6, r0, lsl #4
    2fb0:	ldr	r0, [r0, #-8]
    2fb4:	ldr	r0, [r0]
    2fb8:	sub	r1, r0, #100	; 0x64
    2fbc:	cmp	r1, #5
    2fc0:	bhi	2ff8 <read_int32_array+0x64>
    2fc4:	add	r0, pc, #0
    2fc8:	ldr	pc, [r0, r1, lsl #2]
    2fcc:	.word	0x00002fe4
    2fd0:	.word	0x00003048
    2fd4:	.word	0x00003040
    2fd8:	.word	0x0000305c
    2fdc:	.word	0x00003030
    2fe0:	.word	0x0000309c
    2fe4:	mov	r0, r6
    2fe8:	mov	r1, r4
    2fec:	mov	r2, r5
    2ff0:	pop	{r4, r5, r6, sl, fp, lr}
    2ff4:	b	0 <coda_mem_cursor_read_int32_array>
    2ff8:	cmp	r0, #1
    2ffc:	beq	301c <read_int32_array+0x88>
    3000:	cmp	r0, #0
    3004:	bne	3078 <read_int32_array+0xe4>
    3008:	mov	r0, r6
    300c:	mov	r1, r4
    3010:	mov	r2, r5
    3014:	pop	{r4, r5, r6, sl, fp, lr}
    3018:	b	0 <coda_ascii_cursor_read_int32_array>
    301c:	mov	r0, r6
    3020:	mov	r1, r4
    3024:	mov	r2, r5
    3028:	pop	{r4, r5, r6, sl, fp, lr}
    302c:	b	0 <coda_bin_cursor_read_int32_array>
    3030:	mov	r0, r6
    3034:	mov	r1, r4
    3038:	bl	0 <coda_netcdf_cursor_read_int32_array>
    303c:	b	3068 <read_int32_array+0xd4>
    3040:	mvn	r0, #12
    3044:	b	304c <read_int32_array+0xb8>
    3048:	mvn	r0, #10
    304c:	mov	r1, #0
    3050:	bl	0 <coda_set_error>
    3054:	mvn	r0, #0
    3058:	pop	{r4, r5, r6, sl, fp, pc}
    305c:	mov	r0, r6
    3060:	mov	r1, r4
    3064:	bl	0 <coda_cdf_cursor_read_int32_array>
    3068:	mov	r1, r0
    306c:	mvn	r0, #0
    3070:	cmp	r1, #0
    3074:	popne	{r4, r5, r6, sl, fp, pc}
    3078:	cmp	r5, #0
    307c:	beq	3094 <read_int32_array+0x100>
    3080:	mov	r0, r6
    3084:	mov	r1, r4
    3088:	mov	r2, #4
    308c:	pop	{r4, r5, r6, sl, fp, lr}
    3090:	b	9fa0 <transpose_array>
    3094:	mov	r0, #0
    3098:	pop	{r4, r5, r6, sl, fp, pc}
    309c:	movw	r0, #0
    30a0:	movw	r1, #0
    30a4:	movw	r3, #0
    30a8:	movw	r2, #1025	; 0x401
    30ac:	movt	r0, #0
    30b0:	movt	r1, #0
    30b4:	movt	r3, #0
    30b8:	bl	0 <__assert_fail>

000030bc <coda_cursor_read_uint32_array>:
    30bc:	push	{r4, r5, r6, r7, fp, lr}
    30c0:	add	fp, sp, #16
    30c4:	sub	sp, sp, #8
    30c8:	cmp	r0, #0
    30cc:	beq	3250 <coda_cursor_read_uint32_array+0x194>
    30d0:	mov	r5, r0
    30d4:	ldr	r0, [r0, #4]
    30d8:	cmp	r0, #1
    30dc:	blt	3250 <coda_cursor_read_uint32_array+0x194>
    30e0:	add	r0, r5, r0, lsl #4
    30e4:	mov	r4, r1
    30e8:	ldr	r1, [r0, #-8]
    30ec:	cmp	r1, #0
    30f0:	beq	3250 <coda_cursor_read_uint32_array+0x194>
    30f4:	cmp	r4, #0
    30f8:	beq	327c <coda_cursor_read_uint32_array+0x1c0>
    30fc:	ldr	r0, [r1]
    3100:	cmp	r0, #99	; 0x63
    3104:	ldrhi	r1, [r1, #4]
    3108:	ldr	r0, [r1, #8]
    310c:	cmp	r0, #1
    3110:	bne	3294 <coda_cursor_read_uint32_array+0x1d8>
    3114:	bl	0 <__aeabi_read_tp>
    3118:	ldr	r1, [r1, #40]	; 0x28
    311c:	ldr	r3, [r1, #8]
    3120:	bic	r3, r3, #1
    3124:	cmp	r3, #2
    3128:	bne	3150 <coda_cursor_read_uint32_array+0x94>
    312c:	ldr	r3, [pc, #656]	; 33c4 <coda_cursor_read_uint32_array+0x308>
    3130:	ldr	r3, [pc, r3]
    3134:	ldr	r0, [r0, r3]
    3138:	cmp	r0, #0
    313c:	beq	3150 <coda_cursor_read_uint32_array+0x94>
    3140:	ldr	r3, [r1, #48]	; 0x30
    3144:	mov	r0, #9
    3148:	cmp	r3, #0
    314c:	bne	32a8 <coda_cursor_read_uint32_array+0x1ec>
    3150:	ldr	r0, [r1, #12]
    3154:	cmp	r0, #5
    3158:	beq	32c4 <coda_cursor_read_uint32_array+0x208>
    315c:	cmp	r0, #3
    3160:	beq	32e0 <coda_cursor_read_uint32_array+0x224>
    3164:	cmp	r0, #1
    3168:	bne	32a8 <coda_cursor_read_uint32_array+0x1ec>
    316c:	mov	r0, r5
    3170:	mov	r1, r4
    3174:	bl	21f4 <read_uint8_array>
    3178:	mvn	r6, #0
    317c:	cmp	r0, #0
    3180:	bne	3270 <coda_cursor_read_uint32_array+0x1b4>
    3184:	add	r1, sp, #4
    3188:	mov	r0, r5
    318c:	bl	0 <coda_cursor_get_num_elements>
    3190:	cmp	r0, #0
    3194:	bne	3270 <coda_cursor_read_uint32_array+0x1b4>
    3198:	ldr	r0, [sp, #4]
    319c:	cmp	r0, #1
    31a0:	blt	33bc <coda_cursor_read_uint32_array+0x300>
    31a4:	cmp	r0, #4
    31a8:	bcc	3328 <coda_cursor_read_uint32_array+0x26c>
    31ac:	sub	r1, r0, #1
    31b0:	bic	r2, r1, #-1073741824	; 0xc0000000
    31b4:	add	r3, r4, r1, lsl #2
    31b8:	lsl	r6, r1, #2
    31bc:	subs	r2, r1, r2
    31c0:	movwne	r2, #1
    31c4:	cmp	r6, r3
    31c8:	bhi	3328 <coda_cursor_read_uint32_array+0x26c>
    31cc:	cmp	r2, #0
    31d0:	bne	3328 <coda_cursor_read_uint32_array+0x26c>
    31d4:	add	r2, r4, r1
    31d8:	cmp	r1, r2
    31dc:	bhi	3328 <coda_cursor_read_uint32_array+0x26c>
    31e0:	add	r2, r4, r0
    31e4:	add	r1, r4, r0, lsl #2
    31e8:	cmp	r2, r4
    31ec:	cmphi	r1, r4
    31f0:	bhi	3328 <coda_cursor_read_uint32_array+0x26c>
    31f4:	vmov.i32	q8, #255	; 0x000000ff
    31f8:	bic	ip, r0, #3
    31fc:	sub	r3, r2, #4
    3200:	sub	r6, r1, #16
    3204:	mov	r5, sp
    3208:	mvn	r2, #15
    320c:	sub	lr, r0, ip
    3210:	mov	r1, ip
    3214:	ldr	r7, [r3], #-4
    3218:	subs	r1, r1, #4
    321c:	str	r7, [sp]
    3220:	vld1.32	{d18[0]}, [r5 :32]
    3224:	vmovl.u8	q9, d18
    3228:	vrev64.16	d18, d18
    322c:	vmovl.u16	q9, d18
    3230:	vand	q9, q9, q8
    3234:	vrev64.32	q9, q9
    3238:	vext.8	q9, q9, q9, #8
    323c:	vst1.32	{d18-d19}, [r6], r2
    3240:	bne	3214 <coda_cursor_read_uint32_array+0x158>
    3244:	cmp	r0, ip
    3248:	bne	332c <coda_cursor_read_uint32_array+0x270>
    324c:	b	33bc <coda_cursor_read_uint32_array+0x300>
    3250:	movw	r1, #0
    3254:	movw	r2, #0
    3258:	mvn	r0, #99	; 0x63
    325c:	movw	r3, #3318	; 0xcf6
    3260:	movt	r1, #0
    3264:	movt	r2, #0
    3268:	bl	0 <coda_set_error>
    326c:	mvn	r6, #0
    3270:	mov	r0, r6
    3274:	sub	sp, fp, #16
    3278:	pop	{r4, r5, r6, r7, fp, pc}
    327c:	movw	r1, #0
    3280:	movw	r2, #0
    3284:	mvn	r0, #99	; 0x63
    3288:	movw	r3, #3323	; 0xcfb
    328c:	movt	r1, #0
    3290:	b	3264 <coda_cursor_read_uint32_array+0x1a8>
    3294:	bl	0 <coda_type_get_class_name>
    3298:	movw	r1, #0
    329c:	mov	r2, r0
    32a0:	movt	r1, #0
    32a4:	b	32b8 <coda_cursor_read_uint32_array+0x1fc>
    32a8:	bl	0 <coda_type_get_native_type_name>
    32ac:	movw	r1, #0
    32b0:	mov	r2, r0
    32b4:	movt	r1, #0
    32b8:	mvn	r0, #104	; 0x68
    32bc:	bl	0 <coda_set_error>
    32c0:	b	326c <coda_cursor_read_uint32_array+0x1b0>
    32c4:	mov	r0, r5
    32c8:	mov	r1, r4
    32cc:	bl	33c8 <read_uint32_array>
    32d0:	cmp	r0, #0
    32d4:	mvn	r6, #0
    32d8:	moveq	r6, #0
    32dc:	b	3270 <coda_cursor_read_uint32_array+0x1b4>
    32e0:	mov	r0, r5
    32e4:	mov	r1, r4
    32e8:	bl	299c <read_uint16_array>
    32ec:	mvn	r6, #0
    32f0:	cmp	r0, #0
    32f4:	bne	3270 <coda_cursor_read_uint32_array+0x1b4>
    32f8:	add	r1, sp, #4
    32fc:	mov	r0, r5
    3300:	bl	0 <coda_cursor_get_num_elements>
    3304:	cmp	r0, #0
    3308:	bne	3270 <coda_cursor_read_uint32_array+0x1b4>
    330c:	ldr	lr, [sp, #4]
    3310:	cmp	lr, #1
    3314:	blt	33bc <coda_cursor_read_uint32_array+0x300>
    3318:	cmp	lr, #4
    331c:	bcs	334c <coda_cursor_read_uint32_array+0x290>
    3320:	mov	r0, lr
    3324:	b	3398 <coda_cursor_read_uint32_array+0x2dc>
    3328:	mov	lr, r0
    332c:	sub	r0, lr, #1
    3330:	ldrb	r1, [r4, r0]
    3334:	cmp	r0, #0
    3338:	str	r1, [r4, r0, lsl #2]
    333c:	sub	r1, r0, #1
    3340:	mov	r0, r1
    3344:	bgt	3330 <coda_cursor_read_uint32_array+0x274>
    3348:	b	33bc <coda_cursor_read_uint32_array+0x300>
    334c:	add	r1, r4, lr, lsl #1
    3350:	bic	ip, lr, #3
    3354:	mvn	r5, #7
    3358:	mvn	r2, #15
    335c:	sub	r0, lr, ip
    3360:	sub	r3, r1, #8
    3364:	add	r1, r4, lr, lsl #2
    3368:	sub	r6, r1, #16
    336c:	mov	r1, ip
    3370:	vld1.16	{d16}, [r3], r5
    3374:	subs	r1, r1, #4
    3378:	vrev64.16	d16, d16
    337c:	vmovl.u16	q8, d16
    3380:	vrev64.32	q8, q8
    3384:	vext.8	q8, q8, q8, #8
    3388:	vst1.32	{d16-d17}, [r6], r2
    338c:	bne	3370 <coda_cursor_read_uint32_array+0x2b4>
    3390:	cmp	lr, ip
    3394:	beq	33bc <coda_cursor_read_uint32_array+0x300>
    3398:	mvn	r1, #1
    339c:	add	r1, r1, r0, lsl #1
    33a0:	add	r2, r4, r1
    33a4:	sub	r0, r0, #1
    33a8:	ldrh	r2, [r2]
    33ac:	cmp	r0, #0
    33b0:	str	r2, [r4, r1, lsl #1]
    33b4:	sub	r1, r1, #2
    33b8:	bgt	33a0 <coda_cursor_read_uint32_array+0x2e4>
    33bc:	mov	r6, #0
    33c0:	b	3270 <coda_cursor_read_uint32_array+0x1b4>
    33c4:	.word	0x0000028c

000033c8 <read_uint32_array>:
    33c8:	push	{r4, r5, r6, sl, fp, lr}
    33cc:	add	fp, sp, #16
    33d0:	mov	r6, r0
    33d4:	ldr	r0, [r0, #4]
    33d8:	mov	r4, r1
    33dc:	mov	r5, r2
    33e0:	add	r0, r6, r0, lsl #4
    33e4:	ldr	r0, [r0, #-8]
    33e8:	ldr	r0, [r0]
    33ec:	sub	r1, r0, #100	; 0x64
    33f0:	cmp	r1, #5
    33f4:	bhi	342c <read_uint32_array+0x64>
    33f8:	add	r0, pc, #0
    33fc:	ldr	pc, [r0, r1, lsl #2]
    3400:	.word	0x00003418
    3404:	.word	0x00003450
    3408:	.word	0x00003458
    340c:	.word	0x0000346c
    3410:	.word	0x000034c0
    3414:	.word	0x000034c0
    3418:	mov	r0, r6
    341c:	mov	r1, r4
    3420:	mov	r2, r5
    3424:	pop	{r4, r5, r6, sl, fp, lr}
    3428:	b	0 <coda_mem_cursor_read_uint32_array>
    342c:	cmp	r0, #1
    3430:	beq	34a4 <read_uint32_array+0xdc>
    3434:	cmp	r0, #0
    3438:	bne	3488 <read_uint32_array+0xc0>
    343c:	mov	r0, r6
    3440:	mov	r1, r4
    3444:	mov	r2, r5
    3448:	pop	{r4, r5, r6, sl, fp, lr}
    344c:	b	0 <coda_ascii_cursor_read_uint32_array>
    3450:	mvn	r0, #10
    3454:	b	345c <read_uint32_array+0x94>
    3458:	mvn	r0, #12
    345c:	mov	r1, #0
    3460:	bl	0 <coda_set_error>
    3464:	mvn	r0, #0
    3468:	pop	{r4, r5, r6, sl, fp, pc}
    346c:	mov	r0, r6
    3470:	mov	r1, r4
    3474:	bl	0 <coda_cdf_cursor_read_uint32_array>
    3478:	mov	r1, r0
    347c:	mvn	r0, #0
    3480:	cmp	r1, #0
    3484:	popne	{r4, r5, r6, sl, fp, pc}
    3488:	cmp	r5, #0
    348c:	beq	34b8 <read_uint32_array+0xf0>
    3490:	mov	r0, r6
    3494:	mov	r1, r4
    3498:	mov	r2, #4
    349c:	pop	{r4, r5, r6, sl, fp, lr}
    34a0:	b	9fa0 <transpose_array>
    34a4:	mov	r0, r6
    34a8:	mov	r1, r4
    34ac:	mov	r2, r5
    34b0:	pop	{r4, r5, r6, sl, fp, lr}
    34b4:	b	0 <coda_bin_cursor_read_uint32_array>
    34b8:	mov	r0, #0
    34bc:	pop	{r4, r5, r6, sl, fp, pc}
    34c0:	movw	r0, #0
    34c4:	movw	r1, #0
    34c8:	movw	r3, #0
    34cc:	movw	r2, #1077	; 0x435
    34d0:	movt	r0, #0
    34d4:	movt	r1, #0
    34d8:	movt	r3, #0
    34dc:	bl	0 <__assert_fail>

000034e0 <coda_cursor_read_int64_array>:
    34e0:	push	{r4, r5, r6, r7, fp, lr}
    34e4:	add	fp, sp, #16
    34e8:	sub	sp, sp, #24
    34ec:	cmp	r0, #0
    34f0:	beq	368c <coda_cursor_read_int64_array+0x1ac>
    34f4:	mov	r5, r0
    34f8:	ldr	r0, [r0, #4]
    34fc:	cmp	r0, #1
    3500:	blt	368c <coda_cursor_read_int64_array+0x1ac>
    3504:	add	r0, r5, r0, lsl #4
    3508:	mov	r4, r1
    350c:	ldr	r1, [r0, #-8]
    3510:	cmp	r1, #0
    3514:	beq	368c <coda_cursor_read_int64_array+0x1ac>
    3518:	cmp	r4, #0
    351c:	beq	36b8 <coda_cursor_read_int64_array+0x1d8>
    3520:	ldr	r0, [r1]
    3524:	cmp	r0, #99	; 0x63
    3528:	ldrhi	r1, [r1, #4]
    352c:	ldr	r0, [r1, #8]
    3530:	cmp	r0, #1
    3534:	bne	36d0 <coda_cursor_read_int64_array+0x1f0>
    3538:	bl	0 <__aeabi_read_tp>
    353c:	ldr	r1, [r1, #40]	; 0x28
    3540:	ldr	r3, [r1, #8]
    3544:	bic	r3, r3, #1
    3548:	cmp	r3, #2
    354c:	bne	3574 <coda_cursor_read_int64_array+0x94>
    3550:	ldr	r3, [pc, #1600]	; 3b98 <coda_cursor_read_int64_array+0x6b8>
    3554:	ldr	r3, [pc, r3]
    3558:	ldr	r0, [r0, r3]
    355c:	cmp	r0, #0
    3560:	beq	3574 <coda_cursor_read_int64_array+0x94>
    3564:	ldr	r3, [r1, #48]	; 0x30
    3568:	mov	r0, #9
    356c:	cmp	r3, #0
    3570:	bne	36e4 <coda_cursor_read_int64_array+0x204>
    3574:	ldr	r0, [r1, #12]
    3578:	cmp	r0, #6
    357c:	bhi	36e4 <coda_cursor_read_int64_array+0x204>
    3580:	add	r1, pc, #0
    3584:	ldr	pc, [r1, r0, lsl #2]
    3588:	.word	0x000035a4
    358c:	.word	0x00003700
    3590:	.word	0x000037e8
    3594:	.word	0x0000382c
    3598:	.word	0x00003870
    359c:	.word	0x000038b4
    35a0:	.word	0x000038f8
    35a4:	mov	r0, r5
    35a8:	mov	r1, r4
    35ac:	bl	1fac <read_int8_array>
    35b0:	mvn	r6, #0
    35b4:	cmp	r0, #0
    35b8:	bne	36ac <coda_cursor_read_int64_array+0x1cc>
    35bc:	add	r1, sp, #20
    35c0:	mov	r0, r5
    35c4:	bl	0 <coda_cursor_get_num_elements>
    35c8:	cmp	r0, #0
    35cc:	bne	36ac <coda_cursor_read_int64_array+0x1cc>
    35d0:	ldr	r0, [sp, #20]
    35d4:	cmp	r0, #1
    35d8:	blt	3b90 <coda_cursor_read_int64_array+0x6b0>
    35dc:	beq	3914 <coda_cursor_read_int64_array+0x434>
    35e0:	sub	r1, r0, #1
    35e4:	bic	r2, r1, #-536870912	; 0xe0000000
    35e8:	add	r3, r4, r1, lsl #3
    35ec:	lsl	r6, r1, #3
    35f0:	subs	r2, r1, r2
    35f4:	movwne	r2, #1
    35f8:	cmp	r6, r3
    35fc:	bhi	3914 <coda_cursor_read_int64_array+0x434>
    3600:	cmp	r2, #0
    3604:	bne	3914 <coda_cursor_read_int64_array+0x434>
    3608:	add	r2, r4, r1
    360c:	cmp	r1, r2
    3610:	bhi	3914 <coda_cursor_read_int64_array+0x434>
    3614:	add	r1, r4, r0
    3618:	cmp	r1, r4
    361c:	addhi	r1, r4, r0, lsl #3
    3620:	cmphi	r1, r4
    3624:	bhi	3914 <coda_cursor_read_int64_array+0x434>
    3628:	sub	r1, r0, #2
    362c:	bic	ip, r0, #1
    3630:	add	lr, sp, #4
    3634:	mvn	r3, #15
    3638:	add	r6, r4, r1, lsl #3
    363c:	add	r2, r4, r1
    3640:	sub	r1, r0, ip
    3644:	mov	r5, ip
    3648:	ldrh	r7, [r2], #-2
    364c:	subs	r5, r5, #2
    3650:	strh	r7, [sp, #4]
    3654:	vld1.16	{d16[0]}, [lr :16]
    3658:	vmovl.u8	q8, d16
    365c:	vmovl.u16	q8, d16
    3660:	vrev64.32	d16, d16
    3664:	vmovl.u32	q8, d16
    3668:	vshl.s64	q8, q8, #56	; 0x38
    366c:	vshr.s64	q8, q8, #56
    3670:	vorr	d18, d17, d17
    3674:	vorr	d19, d16, d16
    3678:	vst1.64	{d18-d19}, [r6], r3
    367c:	bne	3648 <coda_cursor_read_int64_array+0x168>
    3680:	cmp	r0, ip
    3684:	bne	3918 <coda_cursor_read_int64_array+0x438>
    3688:	b	3b90 <coda_cursor_read_int64_array+0x6b0>
    368c:	movw	r1, #0
    3690:	movw	r2, #0
    3694:	mvn	r0, #99	; 0x63
    3698:	movw	r3, #3413	; 0xd55
    369c:	movt	r1, #0
    36a0:	movt	r2, #0
    36a4:	bl	0 <coda_set_error>
    36a8:	mvn	r6, #0
    36ac:	mov	r0, r6
    36b0:	sub	sp, fp, #16
    36b4:	pop	{r4, r5, r6, r7, fp, pc}
    36b8:	movw	r1, #0
    36bc:	movw	r2, #0
    36c0:	mvn	r0, #99	; 0x63
    36c4:	movw	r3, #3418	; 0xd5a
    36c8:	movt	r1, #0
    36cc:	b	36a0 <coda_cursor_read_int64_array+0x1c0>
    36d0:	bl	0 <coda_type_get_class_name>
    36d4:	movw	r1, #0
    36d8:	mov	r2, r0
    36dc:	movt	r1, #0
    36e0:	b	36f4 <coda_cursor_read_int64_array+0x214>
    36e4:	bl	0 <coda_type_get_native_type_name>
    36e8:	movw	r1, #0
    36ec:	mov	r2, r0
    36f0:	movt	r1, #0
    36f4:	mvn	r0, #104	; 0x68
    36f8:	bl	0 <coda_set_error>
    36fc:	b	36a8 <coda_cursor_read_int64_array+0x1c8>
    3700:	mov	r0, r5
    3704:	mov	r1, r4
    3708:	bl	21f4 <read_uint8_array>
    370c:	mvn	r6, #0
    3710:	cmp	r0, #0
    3714:	bne	36ac <coda_cursor_read_int64_array+0x1cc>
    3718:	add	r1, sp, #20
    371c:	mov	r0, r5
    3720:	bl	0 <coda_cursor_get_num_elements>
    3724:	cmp	r0, #0
    3728:	bne	36ac <coda_cursor_read_int64_array+0x1cc>
    372c:	ldr	r0, [sp, #20]
    3730:	cmp	r0, #1
    3734:	blt	3b90 <coda_cursor_read_int64_array+0x6b0>
    3738:	beq	3948 <coda_cursor_read_int64_array+0x468>
    373c:	sub	r1, r0, #1
    3740:	bic	r2, r1, #-536870912	; 0xe0000000
    3744:	add	r3, r4, r1, lsl #3
    3748:	lsl	r7, r1, #3
    374c:	subs	r2, r1, r2
    3750:	movwne	r2, #1
    3754:	cmp	r7, r3
    3758:	bhi	3948 <coda_cursor_read_int64_array+0x468>
    375c:	cmp	r2, #0
    3760:	bne	3948 <coda_cursor_read_int64_array+0x468>
    3764:	add	r2, r4, r1
    3768:	cmp	r1, r2
    376c:	bhi	3948 <coda_cursor_read_int64_array+0x468>
    3770:	add	r1, r4, r0
    3774:	cmp	r1, r4
    3778:	addhi	r1, r4, r0, lsl #3
    377c:	cmphi	r1, r4
    3780:	bhi	3948 <coda_cursor_read_int64_array+0x468>
    3784:	sub	r1, r0, #2
    3788:	vmov.i64	q8, #0x00000000000000ff
    378c:	bic	ip, r0, #1
    3790:	add	lr, sp, #8
    3794:	mvn	r3, #15
    3798:	add	r6, r4, r1, lsl #3
    379c:	add	r2, r4, r1
    37a0:	sub	r1, r0, ip
    37a4:	mov	r5, ip
    37a8:	ldrh	r7, [r2], #-2
    37ac:	subs	r5, r5, #2
    37b0:	strh	r7, [sp, #8]
    37b4:	vld1.16	{d18[0]}, [lr :16]
    37b8:	vmovl.u8	q9, d18
    37bc:	vmovl.u16	q9, d18
    37c0:	vrev64.32	d18, d18
    37c4:	vmovl.u32	q9, d18
    37c8:	vand	q9, q9, q8
    37cc:	vorr	d20, d19, d19
    37d0:	vorr	d21, d18, d18
    37d4:	vst1.64	{d20-d21}, [r6], r3
    37d8:	bne	37a8 <coda_cursor_read_int64_array+0x2c8>
    37dc:	cmp	r0, ip
    37e0:	bne	394c <coda_cursor_read_int64_array+0x46c>
    37e4:	b	3b90 <coda_cursor_read_int64_array+0x6b0>
    37e8:	mov	r0, r5
    37ec:	mov	r1, r4
    37f0:	bl	2640 <read_int16_array>
    37f4:	mvn	r6, #0
    37f8:	cmp	r0, #0
    37fc:	bne	36ac <coda_cursor_read_int64_array+0x1cc>
    3800:	add	r1, sp, #20
    3804:	mov	r0, r5
    3808:	bl	0 <coda_cursor_get_num_elements>
    380c:	cmp	r0, #0
    3810:	bne	36ac <coda_cursor_read_int64_array+0x1cc>
    3814:	ldr	lr, [sp, #20]
    3818:	cmp	lr, #1
    381c:	blt	3b90 <coda_cursor_read_int64_array+0x6b0>
    3820:	bne	397c <coda_cursor_read_int64_array+0x49c>
    3824:	mov	r0, lr
    3828:	b	39dc <coda_cursor_read_int64_array+0x4fc>
    382c:	mov	r0, r5
    3830:	mov	r1, r4
    3834:	bl	299c <read_uint16_array>
    3838:	mvn	r6, #0
    383c:	cmp	r0, #0
    3840:	bne	36ac <coda_cursor_read_int64_array+0x1cc>
    3844:	add	r1, sp, #20
    3848:	mov	r0, r5
    384c:	bl	0 <coda_cursor_get_num_elements>
    3850:	cmp	r0, #0
    3854:	bne	36ac <coda_cursor_read_int64_array+0x1cc>
    3858:	ldr	lr, [sp, #20]
    385c:	cmp	lr, #1
    3860:	blt	3b90 <coda_cursor_read_int64_array+0x6b0>
    3864:	bne	3a0c <coda_cursor_read_int64_array+0x52c>
    3868:	mov	r0, lr
    386c:	b	3a6c <coda_cursor_read_int64_array+0x58c>
    3870:	mov	r0, r5
    3874:	mov	r1, r4
    3878:	bl	2f94 <read_int32_array>
    387c:	mvn	r6, #0
    3880:	cmp	r0, #0
    3884:	bne	36ac <coda_cursor_read_int64_array+0x1cc>
    3888:	add	r1, sp, #20
    388c:	mov	r0, r5
    3890:	bl	0 <coda_cursor_get_num_elements>
    3894:	cmp	r0, #0
    3898:	bne	36ac <coda_cursor_read_int64_array+0x1cc>
    389c:	ldr	lr, [sp, #20]
    38a0:	cmp	lr, #1
    38a4:	blt	3b90 <coda_cursor_read_int64_array+0x6b0>
    38a8:	bne	3aa0 <coda_cursor_read_int64_array+0x5c0>
    38ac:	mov	r0, lr
    38b0:	b	3aec <coda_cursor_read_int64_array+0x60c>
    38b4:	mov	r0, r5
    38b8:	mov	r1, r4
    38bc:	bl	33c8 <read_uint32_array>
    38c0:	mvn	r6, #0
    38c4:	cmp	r0, #0
    38c8:	bne	36ac <coda_cursor_read_int64_array+0x1cc>
    38cc:	add	r1, sp, #20
    38d0:	mov	r0, r5
    38d4:	bl	0 <coda_cursor_get_num_elements>
    38d8:	cmp	r0, #0
    38dc:	bne	36ac <coda_cursor_read_int64_array+0x1cc>
    38e0:	ldr	lr, [sp, #20]
    38e4:	cmp	lr, #1
    38e8:	blt	3b90 <coda_cursor_read_int64_array+0x6b0>
    38ec:	bne	3b18 <coda_cursor_read_int64_array+0x638>
    38f0:	mov	r0, lr
    38f4:	b	3b64 <coda_cursor_read_int64_array+0x684>
    38f8:	mov	r0, r5
    38fc:	mov	r1, r4
    3900:	bl	3b9c <read_int64_array>
    3904:	cmp	r0, #0
    3908:	mvn	r6, #0
    390c:	moveq	r6, #0
    3910:	b	36ac <coda_cursor_read_int64_array+0x1cc>
    3914:	mov	r1, r0
    3918:	add	r0, r4, r1, lsl #3
    391c:	sub	r2, r4, #1
    3920:	sub	r0, r0, #8
    3924:	add	r3, r2, r1
    3928:	sub	r1, r1, #1
    392c:	ldrsb	r4, [r3]
    3930:	cmp	r1, #0
    3934:	asr	r5, r4, #31
    3938:	strd	r4, [r0]
    393c:	sub	r0, r0, #8
    3940:	bgt	3924 <coda_cursor_read_int64_array+0x444>
    3944:	b	3b90 <coda_cursor_read_int64_array+0x6b0>
    3948:	mov	r1, r0
    394c:	add	r0, r4, r1, lsl #3
    3950:	sub	r2, r4, #1
    3954:	mov	r3, #0
    3958:	sub	r0, r0, #8
    395c:	ldrb	r4, [r2, r1]
    3960:	sub	r1, r1, #1
    3964:	cmp	r1, #0
    3968:	str	r4, [r0]
    396c:	str	r3, [r0, #4]
    3970:	sub	r0, r0, #8
    3974:	bgt	395c <coda_cursor_read_int64_array+0x47c>
    3978:	b	3b90 <coda_cursor_read_int64_array+0x6b0>
    397c:	add	r1, r4, lr, lsl #1
    3980:	bic	ip, lr, #1
    3984:	add	r5, sp, #12
    3988:	mvn	r2, #15
    398c:	sub	r0, lr, ip
    3990:	sub	r3, r1, #4
    3994:	add	r1, r4, lr, lsl #3
    3998:	sub	r6, r1, #16
    399c:	mov	r1, ip
    39a0:	ldr	r7, [r3], #-4
    39a4:	subs	r1, r1, #2
    39a8:	str	r7, [sp, #12]
    39ac:	vld1.32	{d16[0]}, [r5 :32]
    39b0:	vmovl.u16	q8, d16
    39b4:	vrev64.32	d16, d16
    39b8:	vmovl.u32	q8, d16
    39bc:	vshl.s64	q8, q8, #48	; 0x30
    39c0:	vshr.s64	q8, q8, #48
    39c4:	vorr	d18, d17, d17
    39c8:	vorr	d19, d16, d16
    39cc:	vst1.64	{d18-d19}, [r6], r2
    39d0:	bne	39a0 <coda_cursor_read_int64_array+0x4c0>
    39d4:	cmp	lr, ip
    39d8:	beq	3b90 <coda_cursor_read_int64_array+0x6b0>
    39dc:	add	r1, r4, r0, lsl #1
    39e0:	add	r2, r4, r0, lsl #3
    39e4:	sub	r1, r1, #2
    39e8:	sub	r2, r2, #8
    39ec:	ldrsh	r4, [r1], #-2
    39f0:	sub	r0, r0, #1
    39f4:	cmp	r0, #0
    39f8:	asr	r5, r4, #31
    39fc:	strd	r4, [r2]
    3a00:	sub	r2, r2, #8
    3a04:	bgt	39ec <coda_cursor_read_int64_array+0x50c>
    3a08:	b	3b90 <coda_cursor_read_int64_array+0x6b0>
    3a0c:	add	r1, r4, lr, lsl #1
    3a10:	vmov.i64	q8, #0x000000000000ffff
    3a14:	bic	ip, lr, #1
    3a18:	add	r5, sp, #16
    3a1c:	mvn	r2, #15
    3a20:	sub	r0, lr, ip
    3a24:	sub	r3, r1, #4
    3a28:	add	r1, r4, lr, lsl #3
    3a2c:	sub	r6, r1, #16
    3a30:	mov	r1, ip
    3a34:	ldr	r7, [r3], #-4
    3a38:	subs	r1, r1, #2
    3a3c:	str	r7, [sp, #16]
    3a40:	vld1.32	{d18[0]}, [r5 :32]
    3a44:	vmovl.u16	q9, d18
    3a48:	vrev64.32	d18, d18
    3a4c:	vmovl.u32	q9, d18
    3a50:	vand	q9, q9, q8
    3a54:	vorr	d20, d19, d19
    3a58:	vorr	d21, d18, d18
    3a5c:	vst1.64	{d20-d21}, [r6], r2
    3a60:	bne	3a34 <coda_cursor_read_int64_array+0x554>
    3a64:	cmp	lr, ip
    3a68:	beq	3b90 <coda_cursor_read_int64_array+0x6b0>
    3a6c:	add	r1, r4, r0, lsl #1
    3a70:	add	r2, r4, r0, lsl #3
    3a74:	mov	r3, #0
    3a78:	sub	r1, r1, #2
    3a7c:	sub	r2, r2, #8
    3a80:	ldrh	r4, [r1], #-2
    3a84:	sub	r0, r0, #1
    3a88:	cmp	r0, #0
    3a8c:	str	r4, [r2]
    3a90:	str	r3, [r2, #4]
    3a94:	sub	r2, r2, #8
    3a98:	bgt	3a80 <coda_cursor_read_int64_array+0x5a0>
    3a9c:	b	3b90 <coda_cursor_read_int64_array+0x6b0>
    3aa0:	add	r1, r4, lr, lsl #2
    3aa4:	bic	ip, lr, #1
    3aa8:	mvn	r5, #7
    3aac:	mvn	r2, #15
    3ab0:	sub	r0, lr, ip
    3ab4:	sub	r3, r1, #8
    3ab8:	add	r1, r4, lr, lsl #3
    3abc:	sub	r6, r1, #16
    3ac0:	mov	r1, ip
    3ac4:	vld1.32	{d16}, [r3], r5
    3ac8:	subs	r1, r1, #2
    3acc:	vrev64.32	d16, d16
    3ad0:	vmovl.s32	q8, d16
    3ad4:	vorr	d18, d17, d17
    3ad8:	vorr	d19, d16, d16
    3adc:	vst1.64	{d18-d19}, [r6], r2
    3ae0:	bne	3ac4 <coda_cursor_read_int64_array+0x5e4>
    3ae4:	cmp	lr, ip
    3ae8:	beq	3b90 <coda_cursor_read_int64_array+0x6b0>
    3aec:	add	r1, r4, r0, lsl #3
    3af0:	sub	r2, r4, #4
    3af4:	sub	r1, r1, #8
    3af8:	ldr	r4, [r2, r0, lsl #2]
    3afc:	sub	r0, r0, #1
    3b00:	cmp	r0, #0
    3b04:	asr	r5, r4, #31
    3b08:	strd	r4, [r1]
    3b0c:	sub	r1, r1, #8
    3b10:	bgt	3af8 <coda_cursor_read_int64_array+0x618>
    3b14:	b	3b90 <coda_cursor_read_int64_array+0x6b0>
    3b18:	add	r1, r4, lr, lsl #2
    3b1c:	bic	ip, lr, #1
    3b20:	mvn	r5, #7
    3b24:	mvn	r2, #15
    3b28:	sub	r0, lr, ip
    3b2c:	sub	r3, r1, #8
    3b30:	add	r1, r4, lr, lsl #3
    3b34:	sub	r6, r1, #16
    3b38:	mov	r1, ip
    3b3c:	vld1.32	{d16}, [r3], r5
    3b40:	subs	r1, r1, #2
    3b44:	vrev64.32	d16, d16
    3b48:	vmovl.u32	q8, d16
    3b4c:	vorr	d18, d17, d17
    3b50:	vorr	d19, d16, d16
    3b54:	vst1.64	{d18-d19}, [r6], r2
    3b58:	bne	3b3c <coda_cursor_read_int64_array+0x65c>
    3b5c:	cmp	lr, ip
    3b60:	beq	3b90 <coda_cursor_read_int64_array+0x6b0>
    3b64:	add	r1, r4, r0, lsl #3
    3b68:	sub	r2, r4, #4
    3b6c:	mov	r3, #0
    3b70:	sub	r1, r1, #8
    3b74:	ldr	r4, [r2, r0, lsl #2]
    3b78:	sub	r0, r0, #1
    3b7c:	cmp	r0, #0
    3b80:	str	r4, [r1]
    3b84:	str	r3, [r1, #4]
    3b88:	sub	r1, r1, #8
    3b8c:	bgt	3b74 <coda_cursor_read_int64_array+0x694>
    3b90:	mov	r6, #0
    3b94:	b	36ac <coda_cursor_read_int64_array+0x1cc>
    3b98:	.word	0x0000063c

00003b9c <read_int64_array>:
    3b9c:	push	{r4, r5, r6, sl, fp, lr}
    3ba0:	add	fp, sp, #16
    3ba4:	mov	r6, r0
    3ba8:	ldr	r0, [r0, #4]
    3bac:	mov	r4, r1
    3bb0:	mov	r5, r2
    3bb4:	add	r0, r6, r0, lsl #4
    3bb8:	ldr	r0, [r0, #-8]
    3bbc:	ldr	r0, [r0]
    3bc0:	sub	r1, r0, #100	; 0x64
    3bc4:	cmp	r1, #5
    3bc8:	bhi	3c00 <read_int64_array+0x64>
    3bcc:	add	r0, pc, #0
    3bd0:	ldr	pc, [r0, r1, lsl #2]
    3bd4:	.word	0x00003bec
    3bd8:	.word	0x00003c24
    3bdc:	.word	0x00003c2c
    3be0:	.word	0x00003c40
    3be4:	.word	0x00003c94
    3be8:	.word	0x00003c94
    3bec:	mov	r0, r6
    3bf0:	mov	r1, r4
    3bf4:	mov	r2, r5
    3bf8:	pop	{r4, r5, r6, sl, fp, lr}
    3bfc:	b	0 <coda_mem_cursor_read_int64_array>
    3c00:	cmp	r0, #1
    3c04:	beq	3c78 <read_int64_array+0xdc>
    3c08:	cmp	r0, #0
    3c0c:	bne	3c5c <read_int64_array+0xc0>
    3c10:	mov	r0, r6
    3c14:	mov	r1, r4
    3c18:	mov	r2, r5
    3c1c:	pop	{r4, r5, r6, sl, fp, lr}
    3c20:	b	0 <coda_ascii_cursor_read_int64_array>
    3c24:	mvn	r0, #10
    3c28:	b	3c30 <read_int64_array+0x94>
    3c2c:	mvn	r0, #12
    3c30:	mov	r1, #0
    3c34:	bl	0 <coda_set_error>
    3c38:	mvn	r0, #0
    3c3c:	pop	{r4, r5, r6, sl, fp, pc}
    3c40:	mov	r0, r6
    3c44:	mov	r1, r4
    3c48:	bl	0 <coda_cdf_cursor_read_int64_array>
    3c4c:	mov	r1, r0
    3c50:	mvn	r0, #0
    3c54:	cmp	r1, #0
    3c58:	popne	{r4, r5, r6, sl, fp, pc}
    3c5c:	cmp	r5, #0
    3c60:	beq	3c8c <read_int64_array+0xf0>
    3c64:	mov	r0, r6
    3c68:	mov	r1, r4
    3c6c:	mov	r2, #8
    3c70:	pop	{r4, r5, r6, sl, fp, lr}
    3c74:	b	9fa0 <transpose_array>
    3c78:	mov	r0, r6
    3c7c:	mov	r1, r4
    3c80:	mov	r2, r5
    3c84:	pop	{r4, r5, r6, sl, fp, lr}
    3c88:	b	0 <coda_bin_cursor_read_int64_array>
    3c8c:	mov	r0, #0
    3c90:	pop	{r4, r5, r6, sl, fp, pc}
    3c94:	movw	r0, #0
    3c98:	movw	r1, #0
    3c9c:	movw	r3, #0
    3ca0:	movw	r2, #1129	; 0x469
    3ca4:	movt	r0, #0
    3ca8:	movt	r1, #0
    3cac:	movt	r3, #0
    3cb0:	bl	0 <__assert_fail>

00003cb4 <coda_cursor_read_uint64_array>:
    3cb4:	push	{r4, r5, r6, r7, fp, lr}
    3cb8:	add	fp, sp, #16
    3cbc:	sub	sp, sp, #16
    3cc0:	cmp	r0, #0
    3cc4:	beq	3d5c <coda_cursor_read_uint64_array+0xa8>
    3cc8:	mov	r5, r0
    3ccc:	ldr	r0, [r0, #4]
    3cd0:	cmp	r0, #1
    3cd4:	blt	3d5c <coda_cursor_read_uint64_array+0xa8>
    3cd8:	add	r0, r5, r0, lsl #4
    3cdc:	mov	r4, r1
    3ce0:	ldr	r1, [r0, #-8]
    3ce4:	cmp	r1, #0
    3ce8:	beq	3d5c <coda_cursor_read_uint64_array+0xa8>
    3cec:	cmp	r4, #0
    3cf0:	beq	3d88 <coda_cursor_read_uint64_array+0xd4>
    3cf4:	ldr	r0, [r1]
    3cf8:	cmp	r0, #99	; 0x63
    3cfc:	ldrhi	r1, [r1, #4]
    3d00:	ldr	r0, [r1, #8]
    3d04:	cmp	r0, #1
    3d08:	bne	3da0 <coda_cursor_read_uint64_array+0xec>
    3d0c:	bl	0 <__aeabi_read_tp>
    3d10:	ldr	r1, [r1, #40]	; 0x28
    3d14:	ldr	r3, [r1, #8]
    3d18:	bic	r3, r3, #1
    3d1c:	cmp	r3, #2
    3d20:	bne	3dbc <coda_cursor_read_uint64_array+0x108>
    3d24:	ldr	r3, [pc, #920]	; 40c4 <coda_cursor_read_uint64_array+0x410>
    3d28:	ldr	r3, [pc, r3]
    3d2c:	ldr	r0, [r0, r3]
    3d30:	cmp	r0, #0
    3d34:	beq	3dbc <coda_cursor_read_uint64_array+0x108>
    3d38:	ldr	r3, [r1, #48]	; 0x30
    3d3c:	mov	r0, #9
    3d40:	cmp	r3, #0
    3d44:	beq	3dbc <coda_cursor_read_uint64_array+0x108>
    3d48:	bl	0 <coda_type_get_native_type_name>
    3d4c:	movw	r1, #0
    3d50:	mov	r2, r0
    3d54:	movt	r1, #0
    3d58:	b	3db0 <coda_cursor_read_uint64_array+0xfc>
    3d5c:	movw	r1, #0
    3d60:	movw	r2, #0
    3d64:	mvn	r0, #99	; 0x63
    3d68:	movw	r3, #3561	; 0xde9
    3d6c:	movt	r1, #0
    3d70:	movt	r2, #0
    3d74:	bl	0 <coda_set_error>
    3d78:	mvn	r6, #0
    3d7c:	mov	r0, r6
    3d80:	sub	sp, fp, #16
    3d84:	pop	{r4, r5, r6, r7, fp, pc}
    3d88:	movw	r1, #0
    3d8c:	movw	r2, #0
    3d90:	mvn	r0, #99	; 0x63
    3d94:	movw	r3, #3566	; 0xdee
    3d98:	movt	r1, #0
    3d9c:	b	3d70 <coda_cursor_read_uint64_array+0xbc>
    3da0:	bl	0 <coda_type_get_class_name>
    3da4:	movw	r1, #0
    3da8:	mov	r2, r0
    3dac:	movt	r1, #0
    3db0:	mvn	r0, #104	; 0x68
    3db4:	bl	0 <coda_set_error>
    3db8:	b	3d78 <coda_cursor_read_uint64_array+0xc4>
    3dbc:	ldr	r0, [r1, #12]
    3dc0:	sub	r1, r0, #1
    3dc4:	cmp	r1, #6
    3dc8:	bhi	3d48 <coda_cursor_read_uint64_array+0x94>
    3dcc:	add	r3, pc, #0
    3dd0:	ldr	pc, [r3, r1, lsl #2]
    3dd4:	.word	0x00003df0
    3dd8:	.word	0x00003d48
    3ddc:	.word	0x00003ed8
    3de0:	.word	0x00003d48
    3de4:	.word	0x00003f1c
    3de8:	.word	0x00003d48
    3dec:	.word	0x00003f60
    3df0:	mov	r0, r5
    3df4:	mov	r1, r4
    3df8:	bl	21f4 <read_uint8_array>
    3dfc:	mvn	r6, #0
    3e00:	cmp	r0, #0
    3e04:	bne	3d7c <coda_cursor_read_uint64_array+0xc8>
    3e08:	add	r1, sp, #12
    3e0c:	mov	r0, r5
    3e10:	bl	0 <coda_cursor_get_num_elements>
    3e14:	cmp	r0, #0
    3e18:	bne	3d7c <coda_cursor_read_uint64_array+0xc8>
    3e1c:	ldr	r0, [sp, #12]
    3e20:	cmp	r0, #1
    3e24:	blt	40bc <coda_cursor_read_uint64_array+0x408>
    3e28:	beq	3f7c <coda_cursor_read_uint64_array+0x2c8>
    3e2c:	sub	r1, r0, #1
    3e30:	bic	r2, r1, #-536870912	; 0xe0000000
    3e34:	add	r3, r4, r1, lsl #3
    3e38:	lsl	r6, r1, #3
    3e3c:	subs	r2, r1, r2
    3e40:	movwne	r2, #1
    3e44:	cmp	r6, r3
    3e48:	bhi	3f7c <coda_cursor_read_uint64_array+0x2c8>
    3e4c:	cmp	r2, #0
    3e50:	bne	3f7c <coda_cursor_read_uint64_array+0x2c8>
    3e54:	add	r2, r4, r1
    3e58:	cmp	r1, r2
    3e5c:	bhi	3f7c <coda_cursor_read_uint64_array+0x2c8>
    3e60:	add	r1, r4, r0
    3e64:	cmp	r1, r4
    3e68:	addhi	r1, r4, r0, lsl #3
    3e6c:	cmphi	r1, r4
    3e70:	bhi	3f7c <coda_cursor_read_uint64_array+0x2c8>
    3e74:	sub	r1, r0, #2
    3e78:	vmov.i64	q8, #0x00000000000000ff
    3e7c:	bic	ip, r0, #1
    3e80:	add	lr, sp, #4
    3e84:	mvn	r3, #15
    3e88:	add	r6, r4, r1, lsl #3
    3e8c:	add	r2, r4, r1
    3e90:	sub	r1, r0, ip
    3e94:	mov	r5, ip
    3e98:	ldrh	r7, [r2], #-2
    3e9c:	subs	r5, r5, #2
    3ea0:	strh	r7, [sp, #4]
    3ea4:	vld1.16	{d18[0]}, [lr :16]
    3ea8:	vmovl.u8	q9, d18
    3eac:	vmovl.u16	q9, d18
    3eb0:	vrev64.32	d18, d18
    3eb4:	vmovl.u32	q9, d18
    3eb8:	vand	q9, q9, q8
    3ebc:	vorr	d20, d19, d19
    3ec0:	vorr	d21, d18, d18
    3ec4:	vst1.64	{d20-d21}, [r6], r3
    3ec8:	bne	3e98 <coda_cursor_read_uint64_array+0x1e4>
    3ecc:	cmp	r0, ip
    3ed0:	bne	3f80 <coda_cursor_read_uint64_array+0x2cc>
    3ed4:	b	40bc <coda_cursor_read_uint64_array+0x408>
    3ed8:	mov	r0, r5
    3edc:	mov	r1, r4
    3ee0:	bl	299c <read_uint16_array>
    3ee4:	mvn	r6, #0
    3ee8:	cmp	r0, #0
    3eec:	bne	3d7c <coda_cursor_read_uint64_array+0xc8>
    3ef0:	add	r1, sp, #12
    3ef4:	mov	r0, r5
    3ef8:	bl	0 <coda_cursor_get_num_elements>
    3efc:	cmp	r0, #0
    3f00:	bne	3d7c <coda_cursor_read_uint64_array+0xc8>
    3f04:	ldr	lr, [sp, #12]
    3f08:	cmp	lr, #1
    3f0c:	blt	40bc <coda_cursor_read_uint64_array+0x408>
    3f10:	bne	3fb0 <coda_cursor_read_uint64_array+0x2fc>
    3f14:	mov	r0, lr
    3f18:	b	4010 <coda_cursor_read_uint64_array+0x35c>
    3f1c:	mov	r0, r5
    3f20:	mov	r1, r4
    3f24:	bl	33c8 <read_uint32_array>
    3f28:	mvn	r6, #0
    3f2c:	cmp	r0, #0
    3f30:	bne	3d7c <coda_cursor_read_uint64_array+0xc8>
    3f34:	add	r1, sp, #12
    3f38:	mov	r0, r5
    3f3c:	bl	0 <coda_cursor_get_num_elements>
    3f40:	cmp	r0, #0
    3f44:	bne	3d7c <coda_cursor_read_uint64_array+0xc8>
    3f48:	ldr	lr, [sp, #12]
    3f4c:	cmp	lr, #1
    3f50:	blt	40bc <coda_cursor_read_uint64_array+0x408>
    3f54:	bne	4044 <coda_cursor_read_uint64_array+0x390>
    3f58:	mov	r0, lr
    3f5c:	b	4090 <coda_cursor_read_uint64_array+0x3dc>
    3f60:	mov	r0, r5
    3f64:	mov	r1, r4
    3f68:	bl	40c8 <read_uint64_array>
    3f6c:	cmp	r0, #0
    3f70:	mvn	r6, #0
    3f74:	moveq	r6, #0
    3f78:	b	3d7c <coda_cursor_read_uint64_array+0xc8>
    3f7c:	mov	r1, r0
    3f80:	add	r0, r4, r1, lsl #3
    3f84:	sub	r2, r4, #1
    3f88:	mov	r3, #0
    3f8c:	sub	r0, r0, #8
    3f90:	ldrb	r4, [r2, r1]
    3f94:	sub	r1, r1, #1
    3f98:	cmp	r1, #0
    3f9c:	str	r4, [r0]
    3fa0:	str	r3, [r0, #4]
    3fa4:	sub	r0, r0, #8
    3fa8:	bgt	3f90 <coda_cursor_read_uint64_array+0x2dc>
    3fac:	b	40bc <coda_cursor_read_uint64_array+0x408>
    3fb0:	add	r1, r4, lr, lsl #1
    3fb4:	vmov.i64	q8, #0x000000000000ffff
    3fb8:	bic	ip, lr, #1
    3fbc:	add	r5, sp, #8
    3fc0:	mvn	r2, #15
    3fc4:	sub	r0, lr, ip
    3fc8:	sub	r3, r1, #4
    3fcc:	add	r1, r4, lr, lsl #3
    3fd0:	sub	r6, r1, #16
    3fd4:	mov	r1, ip
    3fd8:	ldr	r7, [r3], #-4
    3fdc:	subs	r1, r1, #2
    3fe0:	str	r7, [sp, #8]
    3fe4:	vld1.32	{d18[0]}, [r5 :32]
    3fe8:	vmovl.u16	q9, d18
    3fec:	vrev64.32	d18, d18
    3ff0:	vmovl.u32	q9, d18
    3ff4:	vand	q9, q9, q8
    3ff8:	vorr	d20, d19, d19
    3ffc:	vorr	d21, d18, d18
    4000:	vst1.64	{d20-d21}, [r6], r2
    4004:	bne	3fd8 <coda_cursor_read_uint64_array+0x324>
    4008:	cmp	lr, ip
    400c:	beq	40bc <coda_cursor_read_uint64_array+0x408>
    4010:	add	r1, r4, r0, lsl #1
    4014:	add	r2, r4, r0, lsl #3
    4018:	mov	r3, #0
    401c:	sub	r1, r1, #2
    4020:	sub	r2, r2, #8
    4024:	ldrh	r4, [r1], #-2
    4028:	sub	r0, r0, #1
    402c:	cmp	r0, #0
    4030:	str	r4, [r2]
    4034:	str	r3, [r2, #4]
    4038:	sub	r2, r2, #8
    403c:	bgt	4024 <coda_cursor_read_uint64_array+0x370>
    4040:	b	40bc <coda_cursor_read_uint64_array+0x408>
    4044:	add	r1, r4, lr, lsl #2
    4048:	bic	ip, lr, #1
    404c:	mvn	r5, #7
    4050:	mvn	r2, #15
    4054:	sub	r0, lr, ip
    4058:	sub	r3, r1, #8
    405c:	add	r1, r4, lr, lsl #3
    4060:	sub	r6, r1, #16
    4064:	mov	r1, ip
    4068:	vld1.32	{d16}, [r3], r5
    406c:	subs	r1, r1, #2
    4070:	vrev64.32	d16, d16
    4074:	vmovl.u32	q8, d16
    4078:	vorr	d18, d17, d17
    407c:	vorr	d19, d16, d16
    4080:	vst1.64	{d18-d19}, [r6], r2
    4084:	bne	4068 <coda_cursor_read_uint64_array+0x3b4>
    4088:	cmp	lr, ip
    408c:	beq	40bc <coda_cursor_read_uint64_array+0x408>
    4090:	add	r1, r4, r0, lsl #3
    4094:	sub	r2, r4, #4
    4098:	mov	r3, #0
    409c:	sub	r1, r1, #8
    40a0:	ldr	r4, [r2, r0, lsl #2]
    40a4:	sub	r0, r0, #1
    40a8:	cmp	r0, #0
    40ac:	str	r4, [r1]
    40b0:	str	r3, [r1, #4]
    40b4:	sub	r1, r1, #8
    40b8:	bgt	40a0 <coda_cursor_read_uint64_array+0x3ec>
    40bc:	mov	r6, #0
    40c0:	b	3d7c <coda_cursor_read_uint64_array+0xc8>
    40c4:	.word	0x00000394

000040c8 <read_uint64_array>:
    40c8:	push	{fp, lr}
    40cc:	mov	fp, sp
    40d0:	ldr	r3, [r0, #4]
    40d4:	add	r3, r0, r3, lsl #4
    40d8:	ldr	r3, [r3, #-8]
    40dc:	ldr	r3, [r3]
    40e0:	sub	ip, r3, #100	; 0x64
    40e4:	cmp	ip, #5
    40e8:	bhi	4114 <read_uint64_array+0x4c>
    40ec:	add	r3, pc, #0
    40f0:	ldr	pc, [r3, ip, lsl #2]
    40f4:	.word	0x0000410c
    40f8:	.word	0x0000412c
    40fc:	.word	0x00004134
    4100:	.word	0x0000416c
    4104:	.word	0x0000416c
    4108:	.word	0x0000416c
    410c:	pop	{fp, lr}
    4110:	b	0 <coda_mem_cursor_read_uint64_array>
    4114:	cmp	r3, #1
    4118:	beq	4148 <read_uint64_array+0x80>
    411c:	cmp	r3, #0
    4120:	bne	4150 <read_uint64_array+0x88>
    4124:	pop	{fp, lr}
    4128:	b	0 <coda_ascii_cursor_read_uint64_array>
    412c:	mvn	r0, #10
    4130:	b	4138 <read_uint64_array+0x70>
    4134:	mvn	r0, #12
    4138:	mov	r1, #0
    413c:	bl	0 <coda_set_error>
    4140:	mvn	r0, #0
    4144:	pop	{fp, pc}
    4148:	pop	{fp, lr}
    414c:	b	0 <coda_bin_cursor_read_uint64_array>
    4150:	cmp	r2, #0
    4154:	beq	4164 <read_uint64_array+0x9c>
    4158:	mov	r2, #8
    415c:	pop	{fp, lr}
    4160:	b	9fa0 <transpose_array>
    4164:	mov	r0, #0
    4168:	pop	{fp, pc}
    416c:	movw	r0, #0
    4170:	movw	r1, #0
    4174:	movw	r3, #0
    4178:	movw	r2, #1176	; 0x498
    417c:	movt	r0, #0
    4180:	movt	r1, #0
    4184:	movt	r3, #0
    4188:	bl	0 <__assert_fail>

0000418c <coda_cursor_read_float_array>:
    418c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
    4190:	add	fp, sp, #24
    4194:	sub	sp, sp, #16
    4198:	cmp	r0, #0
    419c:	beq	427c <coda_cursor_read_float_array+0xf0>
    41a0:	mov	r6, r0
    41a4:	ldr	r0, [r0, #4]
    41a8:	cmp	r0, #1
    41ac:	blt	427c <coda_cursor_read_float_array+0xf0>
    41b0:	add	r0, r6, r0, lsl #4
    41b4:	mov	r4, r1
    41b8:	ldr	r1, [r0, #-8]
    41bc:	cmp	r1, #0
    41c0:	beq	427c <coda_cursor_read_float_array+0xf0>
    41c4:	cmp	r4, #0
    41c8:	beq	42a8 <coda_cursor_read_float_array+0x11c>
    41cc:	ldr	r0, [r1]
    41d0:	mov	r7, r2
    41d4:	cmp	r0, #99	; 0x63
    41d8:	ldrhi	r1, [r1, #4]
    41dc:	ldr	r0, [r1, #8]
    41e0:	cmp	r0, #1
    41e4:	bne	42c0 <coda_cursor_read_float_array+0x134>
    41e8:	bl	0 <__aeabi_read_tp>
    41ec:	ldr	r2, [r1, #40]	; 0x28
    41f0:	ldr	r8, [r2, #8]
    41f4:	ldr	r1, [r2, #12]
    41f8:	bic	r3, r8, #1
    41fc:	cmp	r3, #2
    4200:	bne	42dc <coda_cursor_read_float_array+0x150>
    4204:	ldr	r3, [pc, #2492]	; 4bc8 <coda_cursor_read_float_array+0xa3c>
    4208:	ldr	r3, [pc, r3]
    420c:	ldr	r0, [r0, r3]
    4210:	cmp	r0, #0
    4214:	beq	42dc <coda_cursor_read_float_array+0x150>
    4218:	ldr	r0, [r2, #48]	; 0x30
    421c:	cmp	r0, #0
    4220:	beq	42dc <coda_cursor_read_float_array+0x150>
    4224:	add	r1, sp, #12
    4228:	mov	r0, r6
    422c:	bl	0 <coda_cursor_get_num_elements>
    4230:	mvn	r5, #0
    4234:	cmp	r0, #0
    4238:	bne	429c <coda_cursor_read_float_array+0x110>
    423c:	ldr	r0, [sp, #12]
    4240:	lsl	r9, r0, #3
    4244:	mov	r0, r9
    4248:	bl	0 <malloc>
    424c:	cmp	r0, #0
    4250:	beq	48f4 <coda_cursor_read_float_array+0x768>
    4254:	mov	r8, r0
    4258:	mov	r0, r6
    425c:	mov	r2, r7
    4260:	mov	r1, r8
    4264:	bl	4bcc <coda_cursor_read_double_array>
    4268:	cmp	r0, #0
    426c:	beq	4920 <coda_cursor_read_float_array+0x794>
    4270:	mov	r0, r8
    4274:	bl	0 <free>
    4278:	b	429c <coda_cursor_read_float_array+0x110>
    427c:	movw	r1, #0
    4280:	movw	r2, #0
    4284:	mvn	r0, #99	; 0x63
    4288:	movw	r3, #3673	; 0xe59
    428c:	movt	r1, #0
    4290:	movt	r2, #0
    4294:	bl	0 <coda_set_error>
    4298:	mvn	r5, #0
    429c:	mov	r0, r5
    42a0:	sub	sp, fp, #24
    42a4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
    42a8:	movw	r1, #0
    42ac:	movw	r2, #0
    42b0:	mvn	r0, #99	; 0x63
    42b4:	movw	r3, #3678	; 0xe5e
    42b8:	movt	r1, #0
    42bc:	b	4290 <coda_cursor_read_float_array+0x104>
    42c0:	bl	0 <coda_type_get_class_name>
    42c4:	movw	r1, #0
    42c8:	mov	r2, r0
    42cc:	movt	r1, #0
    42d0:	mvn	r0, #104	; 0x68
    42d4:	bl	0 <coda_set_error>
    42d8:	b	4298 <coda_cursor_read_float_array+0x10c>
    42dc:	cmp	r1, #9
    42e0:	bhi	4400 <coda_cursor_read_float_array+0x274>
    42e4:	add	r0, pc, #0
    42e8:	ldr	pc, [r0, r1, lsl #2]
    42ec:	.word	0x00004314
    42f0:	.word	0x00004418
    42f4:	.word	0x00004500
    42f8:	.word	0x0000454c
    42fc:	.word	0x00004598
    4300:	.word	0x00004640
    4304:	.word	0x000046e8
    4308:	.word	0x000047ac
    430c:	.word	0x00004870
    4310:	.word	0x00004890
    4314:	mov	r0, r6
    4318:	mov	r1, r4
    431c:	mov	r2, r7
    4320:	bl	1fac <read_int8_array>
    4324:	mvn	r5, #0
    4328:	cmp	r0, #0
    432c:	bne	429c <coda_cursor_read_float_array+0x110>
    4330:	add	r1, sp, #12
    4334:	mov	r0, r6
    4338:	bl	0 <coda_cursor_get_num_elements>
    433c:	cmp	r0, #0
    4340:	bne	429c <coda_cursor_read_float_array+0x110>
    4344:	ldr	r0, [sp, #12]
    4348:	cmp	r0, #1
    434c:	blt	49d0 <coda_cursor_read_float_array+0x844>
    4350:	cmp	r0, #4
    4354:	bcc	49d8 <coda_cursor_read_float_array+0x84c>
    4358:	sub	r1, r0, #1
    435c:	bic	r2, r1, #-1073741824	; 0xc0000000
    4360:	add	r3, r4, r1, lsl #2
    4364:	lsl	r7, r1, #2
    4368:	subs	r2, r1, r2
    436c:	movwne	r2, #1
    4370:	cmp	r7, r3
    4374:	bhi	49d8 <coda_cursor_read_float_array+0x84c>
    4378:	cmp	r2, #0
    437c:	bne	49d8 <coda_cursor_read_float_array+0x84c>
    4380:	add	r2, r4, r1
    4384:	cmp	r1, r2
    4388:	bhi	49d8 <coda_cursor_read_float_array+0x84c>
    438c:	add	r3, r4, r0
    4390:	add	r2, r4, r0, lsl #2
    4394:	cmp	r3, r4
    4398:	cmphi	r2, r4
    439c:	bhi	49d8 <coda_cursor_read_float_array+0x84c>
    43a0:	bic	ip, r0, #3
    43a4:	sub	r7, r2, #16
    43a8:	sub	r3, r3, #4
    43ac:	add	lr, sp, #4
    43b0:	mvn	r5, #15
    43b4:	sub	r1, r0, ip
    43b8:	mov	r2, ip
    43bc:	ldr	r6, [r3], #-4
    43c0:	subs	r2, r2, #4
    43c4:	str	r6, [sp, #4]
    43c8:	vld1.32	{d16[0]}, [lr :32]
    43cc:	vmovl.u8	q8, d16
    43d0:	vrev64.16	d16, d16
    43d4:	vshl.s16	d16, d16, #8
    43d8:	vshr.s16	d16, d16, #8
    43dc:	vmovl.s16	q8, d16
    43e0:	vcvt.f32.s32	q8, q8
    43e4:	vrev64.32	q8, q8
    43e8:	vext.8	q8, q8, q8, #8
    43ec:	vst1.32	{d16-d17}, [r7], r5
    43f0:	bne	43bc <coda_cursor_read_float_array+0x230>
    43f4:	cmp	r0, ip
    43f8:	beq	49d0 <coda_cursor_read_float_array+0x844>
    43fc:	b	49dc <coda_cursor_read_float_array+0x850>
    4400:	mov	r0, r1
    4404:	bl	0 <coda_type_get_native_type_name>
    4408:	movw	r1, #0
    440c:	mov	r2, r0
    4410:	movt	r1, #0
    4414:	b	42d0 <coda_cursor_read_float_array+0x144>
    4418:	mov	r0, r6
    441c:	mov	r1, r4
    4420:	mov	r2, r7
    4424:	bl	21f4 <read_uint8_array>
    4428:	mvn	r5, #0
    442c:	cmp	r0, #0
    4430:	bne	429c <coda_cursor_read_float_array+0x110>
    4434:	add	r1, sp, #12
    4438:	mov	r0, r6
    443c:	bl	0 <coda_cursor_get_num_elements>
    4440:	cmp	r0, #0
    4444:	bne	429c <coda_cursor_read_float_array+0x110>
    4448:	ldr	r0, [sp, #12]
    444c:	cmp	r0, #1
    4450:	blt	49d0 <coda_cursor_read_float_array+0x844>
    4454:	cmp	r0, #4
    4458:	bcc	4a10 <coda_cursor_read_float_array+0x884>
    445c:	sub	r1, r0, #1
    4460:	bic	r2, r1, #-1073741824	; 0xc0000000
    4464:	add	r3, r4, r1, lsl #2
    4468:	lsl	r7, r1, #2
    446c:	subs	r2, r1, r2
    4470:	movwne	r2, #1
    4474:	cmp	r7, r3
    4478:	bhi	4a10 <coda_cursor_read_float_array+0x884>
    447c:	cmp	r2, #0
    4480:	bne	4a10 <coda_cursor_read_float_array+0x884>
    4484:	add	r2, r4, r1
    4488:	cmp	r1, r2
    448c:	bhi	4a10 <coda_cursor_read_float_array+0x884>
    4490:	add	r3, r4, r0
    4494:	add	r2, r4, r0, lsl #2
    4498:	cmp	r3, r4
    449c:	cmphi	r2, r4
    44a0:	bhi	4a10 <coda_cursor_read_float_array+0x884>
    44a4:	bic	ip, r0, #3
    44a8:	sub	r7, r2, #16
    44ac:	sub	r3, r3, #4
    44b0:	add	lr, sp, #8
    44b4:	mvn	r5, #15
    44b8:	sub	r1, r0, ip
    44bc:	mov	r2, ip
    44c0:	ldr	r6, [r3], #-4
    44c4:	subs	r2, r2, #4
    44c8:	str	r6, [sp, #8]
    44cc:	vld1.32	{d16[0]}, [lr :32]
    44d0:	vmovl.u8	q8, d16
    44d4:	vrev64.16	d16, d16
    44d8:	vbic.i16	d16, #65280	; 0xff00
    44dc:	vmovl.u16	q8, d16
    44e0:	vcvt.f32.u32	q8, q8
    44e4:	vrev64.32	q8, q8
    44e8:	vext.8	q8, q8, q8, #8
    44ec:	vst1.32	{d16-d17}, [r7], r5
    44f0:	bne	44c0 <coda_cursor_read_float_array+0x334>
    44f4:	cmp	r0, ip
    44f8:	beq	49d0 <coda_cursor_read_float_array+0x844>
    44fc:	b	4a14 <coda_cursor_read_float_array+0x888>
    4500:	mov	r0, r6
    4504:	mov	r1, r4
    4508:	mov	r2, r7
    450c:	bl	2640 <read_int16_array>
    4510:	mvn	r5, #0
    4514:	cmp	r0, #0
    4518:	bne	429c <coda_cursor_read_float_array+0x110>
    451c:	add	r1, sp, #12
    4520:	mov	r0, r6
    4524:	bl	0 <coda_cursor_get_num_elements>
    4528:	cmp	r0, #0
    452c:	bne	429c <coda_cursor_read_float_array+0x110>
    4530:	ldr	r1, [sp, #12]
    4534:	cmp	r1, #1
    4538:	blt	49d0 <coda_cursor_read_float_array+0x844>
    453c:	cmp	r1, #4
    4540:	bcs	4a44 <coda_cursor_read_float_array+0x8b8>
    4544:	mov	r0, r1
    4548:	b	4a94 <coda_cursor_read_float_array+0x908>
    454c:	mov	r0, r6
    4550:	mov	r1, r4
    4554:	mov	r2, r7
    4558:	bl	299c <read_uint16_array>
    455c:	mvn	r5, #0
    4560:	cmp	r0, #0
    4564:	bne	429c <coda_cursor_read_float_array+0x110>
    4568:	add	r1, sp, #12
    456c:	mov	r0, r6
    4570:	bl	0 <coda_cursor_get_num_elements>
    4574:	cmp	r0, #0
    4578:	bne	429c <coda_cursor_read_float_array+0x110>
    457c:	ldr	r1, [sp, #12]
    4580:	cmp	r1, #1
    4584:	blt	49d0 <coda_cursor_read_float_array+0x844>
    4588:	cmp	r1, #4
    458c:	bcs	4ac8 <coda_cursor_read_float_array+0x93c>
    4590:	mov	r0, r1
    4594:	b	4b18 <coda_cursor_read_float_array+0x98c>
    4598:	mov	r0, r6
    459c:	mov	r1, r4
    45a0:	mov	r2, r7
    45a4:	bl	2f94 <read_int32_array>
    45a8:	mvn	r5, #0
    45ac:	cmp	r0, #0
    45b0:	bne	429c <coda_cursor_read_float_array+0x110>
    45b4:	add	r1, sp, #12
    45b8:	mov	r0, r6
    45bc:	bl	0 <coda_cursor_get_num_elements>
    45c0:	cmp	r0, #0
    45c4:	bne	429c <coda_cursor_read_float_array+0x110>
    45c8:	ldr	r0, [sp, #12]
    45cc:	cmp	r0, #1
    45d0:	blt	49d0 <coda_cursor_read_float_array+0x844>
    45d4:	tst	r0, #1
    45d8:	mov	r1, r0
    45dc:	beq	45f8 <coda_cursor_read_float_array+0x46c>
    45e0:	sub	r1, r0, #1
    45e4:	mov	r2, r4
    45e8:	ldr	r3, [r2, r1, lsl #2]!
    45ec:	vmov	s0, r3
    45f0:	vcvt.f32.s32	s0, s0
    45f4:	vstr	s0, [r2]
    45f8:	cmp	r0, #1
    45fc:	beq	49d0 <coda_cursor_read_float_array+0x844>
    4600:	add	r0, r4, r1, lsl #2
    4604:	sub	r1, r1, #1
    4608:	sub	r0, r0, #8
    460c:	vldr	s0, [r0]
    4610:	vldr	s2, [r0, #4]
    4614:	sub	r2, r1, #2
    4618:	sub	r1, r1, #1
    461c:	cmp	r1, #0
    4620:	mov	r1, r2
    4624:	vcvt.f32.s32	s2, s2
    4628:	vcvt.f32.s32	s0, s0
    462c:	vstr	s0, [r0]
    4630:	vstr	s2, [r0, #4]
    4634:	sub	r0, r0, #8
    4638:	bgt	460c <coda_cursor_read_float_array+0x480>
    463c:	b	49d0 <coda_cursor_read_float_array+0x844>
    4640:	mov	r0, r6
    4644:	mov	r1, r4
    4648:	mov	r2, r7
    464c:	bl	33c8 <read_uint32_array>
    4650:	mvn	r5, #0
    4654:	cmp	r0, #0
    4658:	bne	429c <coda_cursor_read_float_array+0x110>
    465c:	add	r1, sp, #12
    4660:	mov	r0, r6
    4664:	bl	0 <coda_cursor_get_num_elements>
    4668:	cmp	r0, #0
    466c:	bne	429c <coda_cursor_read_float_array+0x110>
    4670:	ldr	r0, [sp, #12]
    4674:	cmp	r0, #1
    4678:	blt	49d0 <coda_cursor_read_float_array+0x844>
    467c:	tst	r0, #1
    4680:	mov	r1, r0
    4684:	beq	46a0 <coda_cursor_read_float_array+0x514>
    4688:	sub	r1, r0, #1
    468c:	mov	r2, r4
    4690:	ldr	r3, [r2, r1, lsl #2]!
    4694:	vmov	s0, r3
    4698:	vcvt.f32.u32	s0, s0
    469c:	vstr	s0, [r2]
    46a0:	cmp	r0, #1
    46a4:	beq	49d0 <coda_cursor_read_float_array+0x844>
    46a8:	add	r0, r4, r1, lsl #2
    46ac:	sub	r1, r1, #1
    46b0:	sub	r0, r0, #8
    46b4:	vldr	s0, [r0]
    46b8:	vldr	s2, [r0, #4]
    46bc:	sub	r2, r1, #2
    46c0:	sub	r1, r1, #1
    46c4:	cmp	r1, #0
    46c8:	mov	r1, r2
    46cc:	vcvt.f32.u32	s2, s2
    46d0:	vcvt.f32.u32	s0, s0
    46d4:	vstr	s0, [r0]
    46d8:	vstr	s2, [r0, #4]
    46dc:	sub	r0, r0, #8
    46e0:	bgt	46b4 <coda_cursor_read_float_array+0x528>
    46e4:	b	49d0 <coda_cursor_read_float_array+0x844>
    46e8:	add	r1, sp, #12
    46ec:	mov	r0, r6
    46f0:	bl	0 <coda_cursor_get_num_elements>
    46f4:	mvn	r5, #0
    46f8:	cmp	r0, #0
    46fc:	bne	429c <coda_cursor_read_float_array+0x110>
    4700:	ldr	r0, [sp, #12]
    4704:	lsl	r9, r0, #3
    4708:	mov	r0, r9
    470c:	bl	0 <malloc>
    4710:	cmp	r0, #0
    4714:	beq	4938 <coda_cursor_read_float_array+0x7ac>
    4718:	mov	r8, r0
    471c:	mov	r0, r6
    4720:	mov	r2, r7
    4724:	mov	r1, r8
    4728:	bl	3b9c <read_int64_array>
    472c:	cmp	r0, #0
    4730:	bne	4270 <coda_cursor_read_float_array+0xe4>
    4734:	ldr	r6, [sp, #12]
    4738:	cmp	r6, #1
    473c:	blt	49c8 <coda_cursor_read_float_array+0x83c>
    4740:	tst	r6, #1
    4744:	mov	r5, r6
    4748:	beq	4764 <coda_cursor_read_float_array+0x5d8>
    474c:	sub	r5, r6, #1
    4750:	mov	r1, r8
    4754:	ldr	r0, [r1, r5, lsl #3]!
    4758:	ldr	r1, [r1, #4]
    475c:	bl	0 <__aeabi_l2f>
    4760:	str	r0, [r4, r5, lsl #2]
    4764:	cmp	r6, #1
    4768:	beq	49c8 <coda_cursor_read_float_array+0x83c>
    476c:	add	r0, r4, r5, lsl #2
    4770:	sub	r4, r0, #4
    4774:	add	r0, r8, r5, lsl #3
    4778:	sub	r6, r0, #8
    477c:	ldrd	r0, [r6]
    4780:	bl	0 <__aeabi_l2f>
    4784:	str	r0, [r4]
    4788:	ldrd	r0, [r6, #-8]
    478c:	bl	0 <__aeabi_l2f>
    4790:	sub	r5, r5, #2
    4794:	str	r0, [r4, #-4]
    4798:	sub	r4, r4, #8
    479c:	sub	r6, r6, #16
    47a0:	cmp	r5, #0
    47a4:	bgt	477c <coda_cursor_read_float_array+0x5f0>
    47a8:	b	49c8 <coda_cursor_read_float_array+0x83c>
    47ac:	add	r1, sp, #12
    47b0:	mov	r0, r6
    47b4:	bl	0 <coda_cursor_get_num_elements>
    47b8:	mvn	r5, #0
    47bc:	cmp	r0, #0
    47c0:	bne	429c <coda_cursor_read_float_array+0x110>
    47c4:	ldr	r0, [sp, #12]
    47c8:	lsl	r9, r0, #3
    47cc:	mov	r0, r9
    47d0:	bl	0 <malloc>
    47d4:	cmp	r0, #0
    47d8:	beq	4940 <coda_cursor_read_float_array+0x7b4>
    47dc:	mov	r8, r0
    47e0:	mov	r0, r6
    47e4:	mov	r2, r7
    47e8:	mov	r1, r8
    47ec:	bl	40c8 <read_uint64_array>
    47f0:	cmp	r0, #0
    47f4:	bne	4270 <coda_cursor_read_float_array+0xe4>
    47f8:	ldr	r6, [sp, #12]
    47fc:	cmp	r6, #1
    4800:	blt	49c8 <coda_cursor_read_float_array+0x83c>
    4804:	tst	r6, #1
    4808:	mov	r5, r6
    480c:	beq	4828 <coda_cursor_read_float_array+0x69c>
    4810:	sub	r5, r6, #1
    4814:	mov	r1, r8
    4818:	ldr	r0, [r1, r5, lsl #3]!
    481c:	ldr	r1, [r1, #4]
    4820:	bl	0 <__aeabi_ul2f>
    4824:	str	r0, [r4, r5, lsl #2]
    4828:	cmp	r6, #1
    482c:	beq	49c8 <coda_cursor_read_float_array+0x83c>
    4830:	add	r0, r4, r5, lsl #2
    4834:	sub	r4, r0, #4
    4838:	add	r0, r8, r5, lsl #3
    483c:	sub	r6, r0, #8
    4840:	ldrd	r0, [r6]
    4844:	bl	0 <__aeabi_ul2f>
    4848:	str	r0, [r4]
    484c:	ldrd	r0, [r6, #-8]
    4850:	bl	0 <__aeabi_ul2f>
    4854:	sub	r5, r5, #2
    4858:	str	r0, [r4, #-4]
    485c:	sub	r4, r4, #8
    4860:	sub	r6, r6, #16
    4864:	cmp	r5, #0
    4868:	bgt	4840 <coda_cursor_read_float_array+0x6b4>
    486c:	b	49c8 <coda_cursor_read_float_array+0x83c>
    4870:	mov	r0, r6
    4874:	mov	r1, r4
    4878:	mov	r2, r7
    487c:	bl	5518 <read_float_array>
    4880:	cmp	r0, #0
    4884:	mvn	r5, #0
    4888:	moveq	r5, #0
    488c:	b	429c <coda_cursor_read_float_array+0x110>
    4890:	add	r1, sp, #12
    4894:	mov	r0, r6
    4898:	bl	0 <coda_cursor_get_num_elements>
    489c:	mvn	r5, #0
    48a0:	cmp	r0, #0
    48a4:	bne	429c <coda_cursor_read_float_array+0x110>
    48a8:	ldr	r0, [sp, #12]
    48ac:	lsl	r9, r0, #3
    48b0:	mov	r0, r9
    48b4:	bl	0 <malloc>
    48b8:	cmp	r0, #0
    48bc:	beq	4948 <coda_cursor_read_float_array+0x7bc>
    48c0:	mov	r8, r0
    48c4:	mov	r0, r6
    48c8:	mov	r2, r7
    48cc:	mov	r1, r8
    48d0:	bl	5630 <read_double_array>
    48d4:	cmp	r0, #0
    48d8:	bne	4270 <coda_cursor_read_float_array+0xe4>
    48dc:	ldr	r1, [sp, #12]
    48e0:	cmp	r1, #1
    48e4:	blt	49c8 <coda_cursor_read_float_array+0x83c>
    48e8:	bne	4b4c <coda_cursor_read_float_array+0x9c0>
    48ec:	mov	r0, r1
    48f0:	b	4b94 <coda_cursor_read_float_array+0xa08>
    48f4:	movw	r0, #3707	; 0xe7b
    48f8:	movw	r1, #0
    48fc:	movw	r3, #0
    4900:	str	r0, [sp]
    4904:	mvn	r0, #0
    4908:	mov	r2, r9
    490c:	mvn	r5, #0
    4910:	movt	r1, #0
    4914:	movt	r3, #0
    4918:	bl	0 <coda_set_error>
    491c:	b	429c <coda_cursor_read_float_array+0x110>
    4920:	ldr	r1, [sp, #12]
    4924:	cmp	r1, #1
    4928:	blt	49c8 <coda_cursor_read_float_array+0x83c>
    492c:	bne	4950 <coda_cursor_read_float_array+0x7c4>
    4930:	mov	r0, r1
    4934:	b	4998 <coda_cursor_read_float_array+0x80c>
    4938:	movw	r0, #3820	; 0xeec
    493c:	b	48f8 <coda_cursor_read_float_array+0x76c>
    4940:	movw	r0, #3847	; 0xf07
    4944:	b	48f8 <coda_cursor_read_float_array+0x76c>
    4948:	movw	r0, #3880	; 0xf28
    494c:	b	48f8 <coda_cursor_read_float_array+0x76c>
    4950:	add	r2, r8, r1, lsl #3
    4954:	bic	ip, r1, #1
    4958:	mvn	r6, #15
    495c:	mvn	r5, #7
    4960:	sub	r0, r1, ip
    4964:	sub	r3, r2, #16
    4968:	add	r2, r4, r1, lsl #2
    496c:	sub	r7, r2, #8
    4970:	mov	r2, ip
    4974:	vld1.64	{d1-d2}, [r3], r6
    4978:	subs	r2, r2, #2
    497c:	vorr	d3, d1, d1
    4980:	vcvt.f32.f64	s1, d2
    4984:	vcvt.f32.f64	s0, d3
    4988:	vst1.32	{d0}, [r7], r5
    498c:	bne	4974 <coda_cursor_read_float_array+0x7e8>
    4990:	cmp	r1, ip
    4994:	beq	49c8 <coda_cursor_read_float_array+0x83c>
    4998:	add	r1, r8, r0, lsl #3
    499c:	add	r2, r4, r0, lsl #2
    49a0:	sub	r1, r1, #8
    49a4:	sub	r2, r2, #4
    49a8:	vldr	d16, [r1]
    49ac:	sub	r0, r0, #1
    49b0:	sub	r1, r1, #8
    49b4:	cmp	r0, #0
    49b8:	vcvt.f32.f64	s0, d16
    49bc:	vstr	s0, [r2]
    49c0:	sub	r2, r2, #4
    49c4:	bgt	49a8 <coda_cursor_read_float_array+0x81c>
    49c8:	mov	r0, r8
    49cc:	bl	0 <free>
    49d0:	mov	r5, #0
    49d4:	b	429c <coda_cursor_read_float_array+0x110>
    49d8:	mov	r1, r0
    49dc:	add	r0, r4, r1, lsl #2
    49e0:	sub	r2, r4, #1
    49e4:	sub	r0, r0, #4
    49e8:	add	r3, r2, r1
    49ec:	sub	r1, r1, #1
    49f0:	ldrsb	r3, [r3]
    49f4:	cmp	r1, #0
    49f8:	vmov	s0, r3
    49fc:	vcvt.f32.s32	s0, s0
    4a00:	vstr	s0, [r0]
    4a04:	sub	r0, r0, #4
    4a08:	bgt	49e8 <coda_cursor_read_float_array+0x85c>
    4a0c:	b	49d0 <coda_cursor_read_float_array+0x844>
    4a10:	mov	r1, r0
    4a14:	add	r0, r4, r1, lsl #2
    4a18:	sub	r2, r4, #1
    4a1c:	sub	r0, r0, #4
    4a20:	ldrb	r3, [r2, r1]
    4a24:	sub	r1, r1, #1
    4a28:	cmp	r1, #0
    4a2c:	vmov	s0, r3
    4a30:	vcvt.f32.u32	s0, s0
    4a34:	vstr	s0, [r0]
    4a38:	sub	r0, r0, #4
    4a3c:	bgt	4a20 <coda_cursor_read_float_array+0x894>
    4a40:	b	49d0 <coda_cursor_read_float_array+0x844>
    4a44:	add	r2, r4, r1, lsl #1
    4a48:	bic	ip, r1, #3
    4a4c:	mvn	r6, #7
    4a50:	mvn	r5, #15
    4a54:	sub	r0, r1, ip
    4a58:	sub	r3, r2, #8
    4a5c:	add	r2, r4, r1, lsl #2
    4a60:	sub	r7, r2, #16
    4a64:	mov	r2, ip
    4a68:	vld1.16	{d16}, [r3], r6
    4a6c:	subs	r2, r2, #4
    4a70:	vrev64.16	d16, d16
    4a74:	vmovl.s16	q8, d16
    4a78:	vcvt.f32.s32	q8, q8
    4a7c:	vrev64.32	q8, q8
    4a80:	vext.8	q8, q8, q8, #8
    4a84:	vst1.32	{d16-d17}, [r7], r5
    4a88:	bne	4a68 <coda_cursor_read_float_array+0x8dc>
    4a8c:	cmp	r1, ip
    4a90:	beq	49d0 <coda_cursor_read_float_array+0x844>
    4a94:	add	r1, r4, r0, lsl #1
    4a98:	add	r2, r4, r0, lsl #2
    4a9c:	sub	r1, r1, #2
    4aa0:	sub	r2, r2, #4
    4aa4:	ldrsh	r3, [r1], #-2
    4aa8:	sub	r0, r0, #1
    4aac:	cmp	r0, #0
    4ab0:	vmov	s0, r3
    4ab4:	vcvt.f32.s32	s0, s0
    4ab8:	vstr	s0, [r2]
    4abc:	sub	r2, r2, #4
    4ac0:	bgt	4aa4 <coda_cursor_read_float_array+0x918>
    4ac4:	b	49d0 <coda_cursor_read_float_array+0x844>
    4ac8:	add	r2, r4, r1, lsl #1
    4acc:	bic	ip, r1, #3
    4ad0:	mvn	r6, #7
    4ad4:	mvn	r5, #15
    4ad8:	sub	r0, r1, ip
    4adc:	sub	r3, r2, #8
    4ae0:	add	r2, r4, r1, lsl #2
    4ae4:	sub	r7, r2, #16
    4ae8:	mov	r2, ip
    4aec:	vld1.16	{d16}, [r3], r6
    4af0:	subs	r2, r2, #4
    4af4:	vrev64.16	d16, d16
    4af8:	vmovl.u16	q8, d16
    4afc:	vcvt.f32.u32	q8, q8
    4b00:	vrev64.32	q8, q8
    4b04:	vext.8	q8, q8, q8, #8
    4b08:	vst1.32	{d16-d17}, [r7], r5
    4b0c:	bne	4aec <coda_cursor_read_float_array+0x960>
    4b10:	cmp	r1, ip
    4b14:	beq	49d0 <coda_cursor_read_float_array+0x844>
    4b18:	add	r1, r4, r0, lsl #1
    4b1c:	add	r2, r4, r0, lsl #2
    4b20:	sub	r1, r1, #2
    4b24:	sub	r2, r2, #4
    4b28:	ldrh	r3, [r1], #-2
    4b2c:	sub	r0, r0, #1
    4b30:	cmp	r0, #0
    4b34:	vmov	s0, r3
    4b38:	vcvt.f32.u32	s0, s0
    4b3c:	vstr	s0, [r2]
    4b40:	sub	r2, r2, #4
    4b44:	bgt	4b28 <coda_cursor_read_float_array+0x99c>
    4b48:	b	49d0 <coda_cursor_read_float_array+0x844>
    4b4c:	add	r2, r8, r1, lsl #3
    4b50:	bic	ip, r1, #1
    4b54:	mvn	r6, #15
    4b58:	mvn	r5, #7
    4b5c:	sub	r0, r1, ip
    4b60:	sub	r3, r2, #16
    4b64:	add	r2, r4, r1, lsl #2
    4b68:	sub	r7, r2, #8
    4b6c:	mov	r2, ip
    4b70:	vld1.64	{d1-d2}, [r3], r6
    4b74:	subs	r2, r2, #2
    4b78:	vorr	d3, d1, d1
    4b7c:	vcvt.f32.f64	s1, d2
    4b80:	vcvt.f32.f64	s0, d3
    4b84:	vst1.32	{d0}, [r7], r5
    4b88:	bne	4b70 <coda_cursor_read_float_array+0x9e4>
    4b8c:	cmp	r1, ip
    4b90:	beq	49c8 <coda_cursor_read_float_array+0x83c>
    4b94:	add	r1, r8, r0, lsl #3
    4b98:	add	r2, r4, r0, lsl #2
    4b9c:	sub	r1, r1, #8
    4ba0:	sub	r2, r2, #4
    4ba4:	vldr	d16, [r1]
    4ba8:	sub	r0, r0, #1
    4bac:	sub	r1, r1, #8
    4bb0:	cmp	r0, #0
    4bb4:	vcvt.f32.f64	s0, d16
    4bb8:	vstr	s0, [r2]
    4bbc:	sub	r2, r2, #4
    4bc0:	bgt	4ba4 <coda_cursor_read_float_array+0xa18>
    4bc4:	b	49c8 <coda_cursor_read_float_array+0x83c>
    4bc8:	.word	0x000009b8

00004bcc <coda_cursor_read_double_array>:
    4bcc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4bd0:	add	fp, sp, #28
    4bd4:	sub	sp, sp, #20
    4bd8:	cmp	r0, #0
    4bdc:	beq	4d74 <coda_cursor_read_double_array+0x1a8>
    4be0:	mov	r5, r0
    4be4:	ldr	r0, [r0, #4]
    4be8:	cmp	r0, #1
    4bec:	blt	4d74 <coda_cursor_read_double_array+0x1a8>
    4bf0:	add	r0, r5, r0, lsl #4
    4bf4:	mov	r4, r1
    4bf8:	ldr	r1, [r0, #-8]
    4bfc:	cmp	r1, #0
    4c00:	beq	4d74 <coda_cursor_read_double_array+0x1a8>
    4c04:	cmp	r4, #0
    4c08:	beq	4da0 <coda_cursor_read_double_array+0x1d4>
    4c0c:	ldr	r0, [r1]
    4c10:	cmp	r0, #99	; 0x63
    4c14:	ldrhi	r1, [r1, #4]
    4c18:	ldr	r0, [r1, #8]
    4c1c:	cmp	r0, #1
    4c20:	bne	4db8 <coda_cursor_read_double_array+0x1ec>
    4c24:	bl	0 <__aeabi_read_tp>
    4c28:	ldr	r3, [r1, #40]	; 0x28
    4c2c:	mov	r8, #0
    4c30:	ldr	r6, [r3, #8]
    4c34:	ldr	r1, [r3, #12]
    4c38:	bic	r7, r6, #1
    4c3c:	cmp	r7, #2
    4c40:	bne	4c58 <coda_cursor_read_double_array+0x8c>
    4c44:	ldr	r7, [pc, #2248]	; 5514 <coda_cursor_read_double_array+0x948>
    4c48:	ldr	r7, [pc, r7]
    4c4c:	ldr	r0, [r0, r7]
    4c50:	cmp	r0, #0
    4c54:	ldrne	r8, [r3, #48]	; 0x30
    4c58:	cmp	r1, #9
    4c5c:	bhi	4dd4 <coda_cursor_read_double_array+0x208>
    4c60:	add	r0, pc, #0
    4c64:	ldr	pc, [r0, r1, lsl #2]
    4c68:	.word	0x00004c90
    4c6c:	.word	0x00004dec
    4c70:	.word	0x00004ed0
    4c74:	.word	0x00004f14
    4c78:	.word	0x00004f58
    4c7c:	.word	0x00004f9c
    4c80:	.word	0x00004fe0
    4c84:	.word	0x00005090
    4c88:	.word	0x00005140
    4c8c:	.word	0x00005184
    4c90:	mov	r0, r5
    4c94:	mov	r1, r4
    4c98:	bl	1fac <read_int8_array>
    4c9c:	mvn	r6, #0
    4ca0:	cmp	r0, #0
    4ca4:	bne	4d94 <coda_cursor_read_double_array+0x1c8>
    4ca8:	add	r1, sp, #16
    4cac:	mov	r0, r5
    4cb0:	bl	0 <coda_cursor_get_num_elements>
    4cb4:	cmp	r0, #0
    4cb8:	bne	4d94 <coda_cursor_read_double_array+0x1c8>
    4cbc:	ldr	r0, [sp, #16]
    4cc0:	cmp	r0, #1
    4cc4:	blt	519c <coda_cursor_read_double_array+0x5d0>
    4cc8:	beq	521c <coda_cursor_read_double_array+0x650>
    4ccc:	sub	r1, r0, #1
    4cd0:	bic	r2, r1, #-536870912	; 0xe0000000
    4cd4:	add	r3, r4, r1, lsl #3
    4cd8:	lsl	r7, r1, #3
    4cdc:	subs	r2, r1, r2
    4ce0:	movwne	r2, #1
    4ce4:	cmp	r7, r3
    4ce8:	bhi	521c <coda_cursor_read_double_array+0x650>
    4cec:	cmp	r2, #0
    4cf0:	bne	521c <coda_cursor_read_double_array+0x650>
    4cf4:	add	r2, r4, r1
    4cf8:	cmp	r1, r2
    4cfc:	bhi	521c <coda_cursor_read_double_array+0x650>
    4d00:	add	r1, r4, r0
    4d04:	cmp	r1, r4
    4d08:	addhi	r1, r4, r0, lsl #3
    4d0c:	cmphi	r1, r4
    4d10:	bhi	521c <coda_cursor_read_double_array+0x650>
    4d14:	sub	r1, r0, #2
    4d18:	bic	ip, r0, #1
    4d1c:	mov	lr, sp
    4d20:	mvn	r9, #15
    4d24:	add	r7, r4, r1, lsl #3
    4d28:	add	r2, r4, r1
    4d2c:	sub	r1, r0, ip
    4d30:	mov	r6, ip
    4d34:	ldrh	r3, [r2], #-2
    4d38:	subs	r6, r6, #2
    4d3c:	strh	r3, [sp]
    4d40:	vld1.16	{d16[0]}, [lr :16]
    4d44:	vmovl.u8	q8, d16
    4d48:	vmovl.u16	q8, d16
    4d4c:	vrev64.32	d16, d16
    4d50:	vshl.s32	d16, d16, #24
    4d54:	vshr.s32	d0, d16, #24
    4d58:	vcvt.f64.s32	d17, s0
    4d5c:	vcvt.f64.s32	d16, s1
    4d60:	vst1.64	{d16-d17}, [r7], r9
    4d64:	bne	4d34 <coda_cursor_read_double_array+0x168>
    4d68:	cmp	r0, ip
    4d6c:	beq	519c <coda_cursor_read_double_array+0x5d0>
    4d70:	b	5220 <coda_cursor_read_double_array+0x654>
    4d74:	movw	r1, #0
    4d78:	movw	r2, #0
    4d7c:	mvn	r0, #99	; 0x63
    4d80:	movw	r3, #3937	; 0xf61
    4d84:	movt	r1, #0
    4d88:	movt	r2, #0
    4d8c:	bl	0 <coda_set_error>
    4d90:	mvn	r6, #0
    4d94:	mov	r0, r6
    4d98:	sub	sp, fp, #28
    4d9c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4da0:	movw	r1, #0
    4da4:	movw	r2, #0
    4da8:	mvn	r0, #99	; 0x63
    4dac:	movw	r3, #3942	; 0xf66
    4db0:	movt	r1, #0
    4db4:	b	4d88 <coda_cursor_read_double_array+0x1bc>
    4db8:	bl	0 <coda_type_get_class_name>
    4dbc:	movw	r1, #0
    4dc0:	mov	r2, r0
    4dc4:	movt	r1, #0
    4dc8:	mvn	r0, #104	; 0x68
    4dcc:	bl	0 <coda_set_error>
    4dd0:	b	4d90 <coda_cursor_read_double_array+0x1c4>
    4dd4:	mov	r0, r1
    4dd8:	bl	0 <coda_type_get_native_type_name>
    4ddc:	movw	r1, #0
    4de0:	mov	r2, r0
    4de4:	movt	r1, #0
    4de8:	b	4dc8 <coda_cursor_read_double_array+0x1fc>
    4dec:	mov	r0, r5
    4df0:	mov	r1, r4
    4df4:	bl	21f4 <read_uint8_array>
    4df8:	mvn	r6, #0
    4dfc:	cmp	r0, #0
    4e00:	bne	4d94 <coda_cursor_read_double_array+0x1c8>
    4e04:	add	r1, sp, #16
    4e08:	mov	r0, r5
    4e0c:	bl	0 <coda_cursor_get_num_elements>
    4e10:	cmp	r0, #0
    4e14:	bne	4d94 <coda_cursor_read_double_array+0x1c8>
    4e18:	ldr	r0, [sp, #16]
    4e1c:	cmp	r0, #1
    4e20:	blt	519c <coda_cursor_read_double_array+0x5d0>
    4e24:	beq	5254 <coda_cursor_read_double_array+0x688>
    4e28:	sub	r1, r0, #1
    4e2c:	bic	r2, r1, #-536870912	; 0xe0000000
    4e30:	add	r3, r4, r1, lsl #3
    4e34:	lsl	r7, r1, #3
    4e38:	subs	r2, r1, r2
    4e3c:	movwne	r2, #1
    4e40:	cmp	r7, r3
    4e44:	bhi	5254 <coda_cursor_read_double_array+0x688>
    4e48:	cmp	r2, #0
    4e4c:	bne	5254 <coda_cursor_read_double_array+0x688>
    4e50:	add	r2, r4, r1
    4e54:	cmp	r1, r2
    4e58:	bhi	5254 <coda_cursor_read_double_array+0x688>
    4e5c:	add	r1, r4, r0
    4e60:	cmp	r1, r4
    4e64:	addhi	r1, r4, r0, lsl #3
    4e68:	cmphi	r1, r4
    4e6c:	bhi	5254 <coda_cursor_read_double_array+0x688>
    4e70:	sub	r1, r0, #2
    4e74:	vmov.i32	d16, #255	; 0x000000ff
    4e78:	bic	ip, r0, #1
    4e7c:	add	lr, sp, #4
    4e80:	mvn	r9, #15
    4e84:	add	r7, r4, r1, lsl #3
    4e88:	add	r2, r4, r1
    4e8c:	sub	r1, r0, ip
    4e90:	mov	r6, ip
    4e94:	ldrh	r3, [r2], #-2
    4e98:	subs	r6, r6, #2
    4e9c:	strh	r3, [sp, #4]
    4ea0:	vld1.16	{d17[0]}, [lr :16]
    4ea4:	vmovl.u8	q9, d17
    4ea8:	vmovl.u16	q9, d18
    4eac:	vrev64.32	d17, d18
    4eb0:	vand	d0, d17, d16
    4eb4:	vcvt.f64.u32	d19, s0
    4eb8:	vcvt.f64.u32	d18, s1
    4ebc:	vst1.64	{d18-d19}, [r7], r9
    4ec0:	bne	4e94 <coda_cursor_read_double_array+0x2c8>
    4ec4:	cmp	r0, ip
    4ec8:	beq	519c <coda_cursor_read_double_array+0x5d0>
    4ecc:	b	5258 <coda_cursor_read_double_array+0x68c>
    4ed0:	mov	r0, r5
    4ed4:	mov	r1, r4
    4ed8:	bl	2640 <read_int16_array>
    4edc:	mvn	r6, #0
    4ee0:	cmp	r0, #0
    4ee4:	bne	4d94 <coda_cursor_read_double_array+0x1c8>
    4ee8:	add	r1, sp, #16
    4eec:	mov	r0, r5
    4ef0:	bl	0 <coda_cursor_get_num_elements>
    4ef4:	cmp	r0, #0
    4ef8:	bne	4d94 <coda_cursor_read_double_array+0x1c8>
    4efc:	ldr	lr, [sp, #16]
    4f00:	cmp	lr, #1
    4f04:	blt	519c <coda_cursor_read_double_array+0x5d0>
    4f08:	bne	5288 <coda_cursor_read_double_array+0x6bc>
    4f0c:	mov	r0, lr
    4f10:	b	52e4 <coda_cursor_read_double_array+0x718>
    4f14:	mov	r0, r5
    4f18:	mov	r1, r4
    4f1c:	bl	299c <read_uint16_array>
    4f20:	mvn	r6, #0
    4f24:	cmp	r0, #0
    4f28:	bne	4d94 <coda_cursor_read_double_array+0x1c8>
    4f2c:	add	r1, sp, #16
    4f30:	mov	r0, r5
    4f34:	bl	0 <coda_cursor_get_num_elements>
    4f38:	cmp	r0, #0
    4f3c:	bne	4d94 <coda_cursor_read_double_array+0x1c8>
    4f40:	ldr	lr, [sp, #16]
    4f44:	cmp	lr, #1
    4f48:	blt	519c <coda_cursor_read_double_array+0x5d0>
    4f4c:	bne	5318 <coda_cursor_read_double_array+0x74c>
    4f50:	mov	r0, lr
    4f54:	b	5374 <coda_cursor_read_double_array+0x7a8>
    4f58:	mov	r0, r5
    4f5c:	mov	r1, r4
    4f60:	bl	2f94 <read_int32_array>
    4f64:	mvn	r6, #0
    4f68:	cmp	r0, #0
    4f6c:	bne	4d94 <coda_cursor_read_double_array+0x1c8>
    4f70:	add	r1, sp, #16
    4f74:	mov	r0, r5
    4f78:	bl	0 <coda_cursor_get_num_elements>
    4f7c:	cmp	r0, #0
    4f80:	bne	4d94 <coda_cursor_read_double_array+0x1c8>
    4f84:	ldr	lr, [sp, #16]
    4f88:	cmp	lr, #1
    4f8c:	blt	519c <coda_cursor_read_double_array+0x5d0>
    4f90:	bne	53a8 <coda_cursor_read_double_array+0x7dc>
    4f94:	mov	r0, lr
    4f98:	b	53f0 <coda_cursor_read_double_array+0x824>
    4f9c:	mov	r0, r5
    4fa0:	mov	r1, r4
    4fa4:	bl	33c8 <read_uint32_array>
    4fa8:	mvn	r6, #0
    4fac:	cmp	r0, #0
    4fb0:	bne	4d94 <coda_cursor_read_double_array+0x1c8>
    4fb4:	add	r1, sp, #16
    4fb8:	mov	r0, r5
    4fbc:	bl	0 <coda_cursor_get_num_elements>
    4fc0:	cmp	r0, #0
    4fc4:	bne	4d94 <coda_cursor_read_double_array+0x1c8>
    4fc8:	ldr	lr, [sp, #16]
    4fcc:	cmp	lr, #1
    4fd0:	blt	519c <coda_cursor_read_double_array+0x5d0>
    4fd4:	bne	5420 <coda_cursor_read_double_array+0x854>
    4fd8:	mov	r0, lr
    4fdc:	b	5468 <coda_cursor_read_double_array+0x89c>
    4fe0:	mov	r0, r5
    4fe4:	mov	r1, r4
    4fe8:	bl	3b9c <read_int64_array>
    4fec:	mvn	r6, #0
    4ff0:	cmp	r0, #0
    4ff4:	bne	4d94 <coda_cursor_read_double_array+0x1c8>
    4ff8:	add	r1, sp, #16
    4ffc:	mov	r0, r5
    5000:	bl	0 <coda_cursor_get_num_elements>
    5004:	cmp	r0, #0
    5008:	bne	4d94 <coda_cursor_read_double_array+0x1c8>
    500c:	ldr	r6, [sp, #16]
    5010:	cmp	r6, #1
    5014:	blt	519c <coda_cursor_read_double_array+0x5d0>
    5018:	tst	r6, #1
    501c:	mov	r9, r6
    5020:	beq	503c <coda_cursor_read_double_array+0x470>
    5024:	sub	r9, r6, #1
    5028:	mov	r7, r4
    502c:	ldr	r0, [r7, r9, lsl #3]!
    5030:	ldr	r1, [r7, #4]
    5034:	bl	0 <__aeabi_l2d>
    5038:	strd	r0, [r7]
    503c:	cmp	r6, #1
    5040:	beq	519c <coda_cursor_read_double_array+0x5d0>
    5044:	add	r0, r4, r9, lsl #3
    5048:	sub	r7, r9, #1
    504c:	sub	r6, r0, #16
    5050:	ldr	r0, [r6, #8]
    5054:	ldr	r1, [r6, #12]
    5058:	ldm	r6, {r9, sl}
    505c:	bl	0 <__aeabi_l2d>
    5060:	strd	r0, [r6, #8]
    5064:	mov	r0, r9
    5068:	mov	r1, sl
    506c:	bl	0 <__aeabi_l2d>
    5070:	strd	r0, [r6]
    5074:	sub	r1, r7, #1
    5078:	sub	r0, r7, #2
    507c:	sub	r6, r6, #16
    5080:	cmp	r1, #0
    5084:	mov	r7, r0
    5088:	bgt	5050 <coda_cursor_read_double_array+0x484>
    508c:	b	519c <coda_cursor_read_double_array+0x5d0>
    5090:	mov	r0, r5
    5094:	mov	r1, r4
    5098:	bl	40c8 <read_uint64_array>
    509c:	mvn	r6, #0
    50a0:	cmp	r0, #0
    50a4:	bne	4d94 <coda_cursor_read_double_array+0x1c8>
    50a8:	add	r1, sp, #16
    50ac:	mov	r0, r5
    50b0:	bl	0 <coda_cursor_get_num_elements>
    50b4:	cmp	r0, #0
    50b8:	bne	4d94 <coda_cursor_read_double_array+0x1c8>
    50bc:	ldr	r6, [sp, #16]
    50c0:	cmp	r6, #1
    50c4:	blt	519c <coda_cursor_read_double_array+0x5d0>
    50c8:	tst	r6, #1
    50cc:	mov	r9, r6
    50d0:	beq	50ec <coda_cursor_read_double_array+0x520>
    50d4:	sub	r9, r6, #1
    50d8:	mov	r7, r4
    50dc:	ldr	r0, [r7, r9, lsl #3]!
    50e0:	ldr	r1, [r7, #4]
    50e4:	bl	0 <__aeabi_ul2d>
    50e8:	strd	r0, [r7]
    50ec:	cmp	r6, #1
    50f0:	beq	519c <coda_cursor_read_double_array+0x5d0>
    50f4:	add	r0, r4, r9, lsl #3
    50f8:	sub	r7, r9, #1
    50fc:	sub	r6, r0, #16
    5100:	ldr	r0, [r6, #8]
    5104:	ldr	r1, [r6, #12]
    5108:	ldm	r6, {r9, sl}
    510c:	bl	0 <__aeabi_ul2d>
    5110:	strd	r0, [r6, #8]
    5114:	mov	r0, r9
    5118:	mov	r1, sl
    511c:	bl	0 <__aeabi_ul2d>
    5120:	strd	r0, [r6]
    5124:	sub	r1, r7, #1
    5128:	sub	r0, r7, #2
    512c:	sub	r6, r6, #16
    5130:	cmp	r1, #0
    5134:	mov	r7, r0
    5138:	bgt	5100 <coda_cursor_read_double_array+0x534>
    513c:	b	519c <coda_cursor_read_double_array+0x5d0>
    5140:	mov	r0, r5
    5144:	mov	r1, r4
    5148:	bl	5518 <read_float_array>
    514c:	mvn	r6, #0
    5150:	cmp	r0, #0
    5154:	bne	4d94 <coda_cursor_read_double_array+0x1c8>
    5158:	add	r1, sp, #16
    515c:	mov	r0, r5
    5160:	bl	0 <coda_cursor_get_num_elements>
    5164:	cmp	r0, #0
    5168:	bne	4d94 <coda_cursor_read_double_array+0x1c8>
    516c:	ldr	lr, [sp, #16]
    5170:	cmp	lr, #1
    5174:	blt	519c <coda_cursor_read_double_array+0x5d0>
    5178:	bne	5498 <coda_cursor_read_double_array+0x8cc>
    517c:	mov	r0, lr
    5180:	b	54e0 <coda_cursor_read_double_array+0x914>
    5184:	mov	r0, r5
    5188:	mov	r1, r4
    518c:	bl	5630 <read_double_array>
    5190:	mvn	r6, #0
    5194:	cmp	r0, #0
    5198:	bne	4d94 <coda_cursor_read_double_array+0x1c8>
    519c:	mov	r6, #0
    51a0:	cmp	r8, #0
    51a4:	beq	4d94 <coda_cursor_read_double_array+0x1c8>
    51a8:	add	r1, sp, #16
    51ac:	mov	r0, r5
    51b0:	bl	0 <coda_cursor_get_num_elements>
    51b4:	mvn	r6, #0
    51b8:	cmp	r0, #0
    51bc:	bne	4d94 <coda_cursor_read_double_array+0x1c8>
    51c0:	ldr	r0, [sp, #16]
    51c4:	mov	r6, #0
    51c8:	cmp	r0, #1
    51cc:	blt	4d94 <coda_cursor_read_double_array+0x1c8>
    51d0:	mov	r5, #0
    51d4:	mov	r6, #0
    51d8:	b	51fc <coda_cursor_read_double_array+0x630>
    51dc:	vldmia	r8, {d17-d19}
    51e0:	vmul.f64	d16, d16, d17
    51e4:	vdiv.f64	d16, d16, d18
    51e8:	vadd.f64	d0, d16, d19
    51ec:	add	r5, r5, #1
    51f0:	vstmia	r4!, {d0}
    51f4:	cmp	r5, r0
    51f8:	bge	4d94 <coda_cursor_read_double_array+0x1c8>
    51fc:	vldr	d16, [r4]
    5200:	vldr	d17, [r8, #24]
    5204:	vcmp.f64	d16, d17
    5208:	vmrs	APSR_nzcv, fpscr
    520c:	bne	51dc <coda_cursor_read_double_array+0x610>
    5210:	bl	0 <coda_NaN>
    5214:	ldr	r0, [sp, #16]
    5218:	b	51ec <coda_cursor_read_double_array+0x620>
    521c:	mov	r1, r0
    5220:	add	r0, r4, r1, lsl #3
    5224:	sub	r2, r4, #1
    5228:	sub	r0, r0, #8
    522c:	add	r3, r2, r1
    5230:	sub	r1, r1, #1
    5234:	ldrsb	r3, [r3]
    5238:	cmp	r1, #0
    523c:	vmov	s0, r3
    5240:	vcvt.f64.s32	d16, s0
    5244:	vstr	d16, [r0]
    5248:	sub	r0, r0, #8
    524c:	bgt	522c <coda_cursor_read_double_array+0x660>
    5250:	b	519c <coda_cursor_read_double_array+0x5d0>
    5254:	mov	r1, r0
    5258:	add	r0, r4, r1, lsl #3
    525c:	sub	r2, r4, #1
    5260:	sub	r0, r0, #8
    5264:	ldrb	r3, [r2, r1]
    5268:	sub	r1, r1, #1
    526c:	cmp	r1, #0
    5270:	vmov	s0, r3
    5274:	vcvt.f64.u32	d16, s0
    5278:	vstr	d16, [r0]
    527c:	sub	r0, r0, #8
    5280:	bgt	5264 <coda_cursor_read_double_array+0x698>
    5284:	b	519c <coda_cursor_read_double_array+0x5d0>
    5288:	add	r1, r4, lr, lsl #1
    528c:	bic	ip, lr, #1
    5290:	add	r9, sp, #8
    5294:	mvn	r2, #15
    5298:	sub	r0, lr, ip
    529c:	sub	r3, r1, #4
    52a0:	add	r1, r4, lr, lsl #3
    52a4:	sub	r7, r1, #16
    52a8:	mov	r1, ip
    52ac:	ldr	r6, [r3], #-4
    52b0:	subs	r1, r1, #2
    52b4:	str	r6, [sp, #8]
    52b8:	vld1.32	{d16[0]}, [r9 :32]
    52bc:	vmovl.u16	q8, d16
    52c0:	vrev64.32	d16, d16
    52c4:	vshl.s32	d16, d16, #16
    52c8:	vshr.s32	d0, d16, #16
    52cc:	vcvt.f64.s32	d17, s0
    52d0:	vcvt.f64.s32	d16, s1
    52d4:	vst1.64	{d16-d17}, [r7], r2
    52d8:	bne	52ac <coda_cursor_read_double_array+0x6e0>
    52dc:	cmp	lr, ip
    52e0:	beq	519c <coda_cursor_read_double_array+0x5d0>
    52e4:	add	r1, r4, r0, lsl #1
    52e8:	add	r2, r4, r0, lsl #3
    52ec:	sub	r1, r1, #2
    52f0:	sub	r2, r2, #8
    52f4:	ldrsh	r3, [r1], #-2
    52f8:	sub	r0, r0, #1
    52fc:	cmp	r0, #0
    5300:	vmov	s0, r3
    5304:	vcvt.f64.s32	d16, s0
    5308:	vstr	d16, [r2]
    530c:	sub	r2, r2, #8
    5310:	bgt	52f4 <coda_cursor_read_double_array+0x728>
    5314:	b	519c <coda_cursor_read_double_array+0x5d0>
    5318:	add	r1, r4, lr, lsl #1
    531c:	vmov.i32	d16, #65535	; 0x0000ffff
    5320:	bic	ip, lr, #1
    5324:	add	r9, sp, #12
    5328:	mvn	r2, #15
    532c:	sub	r0, lr, ip
    5330:	sub	r3, r1, #4
    5334:	add	r1, r4, lr, lsl #3
    5338:	sub	r7, r1, #16
    533c:	mov	r1, ip
    5340:	ldr	r6, [r3], #-4
    5344:	subs	r1, r1, #2
    5348:	str	r6, [sp, #12]
    534c:	vld1.32	{d17[0]}, [r9 :32]
    5350:	vmovl.u16	q9, d17
    5354:	vrev64.32	d17, d18
    5358:	vand	d0, d17, d16
    535c:	vcvt.f64.u32	d19, s0
    5360:	vcvt.f64.u32	d18, s1
    5364:	vst1.64	{d18-d19}, [r7], r2
    5368:	bne	5340 <coda_cursor_read_double_array+0x774>
    536c:	cmp	lr, ip
    5370:	beq	519c <coda_cursor_read_double_array+0x5d0>
    5374:	add	r1, r4, r0, lsl #1
    5378:	add	r2, r4, r0, lsl #3
    537c:	sub	r1, r1, #2
    5380:	sub	r2, r2, #8
    5384:	ldrh	r3, [r1], #-2
    5388:	sub	r0, r0, #1
    538c:	cmp	r0, #0
    5390:	vmov	s0, r3
    5394:	vcvt.f64.u32	d16, s0
    5398:	vstr	d16, [r2]
    539c:	sub	r2, r2, #8
    53a0:	bgt	5384 <coda_cursor_read_double_array+0x7b8>
    53a4:	b	519c <coda_cursor_read_double_array+0x5d0>
    53a8:	add	r1, r4, lr, lsl #2
    53ac:	bic	ip, lr, #1
    53b0:	mvn	r6, #7
    53b4:	mvn	r2, #15
    53b8:	sub	r0, lr, ip
    53bc:	sub	r3, r1, #8
    53c0:	add	r1, r4, lr, lsl #3
    53c4:	sub	r7, r1, #16
    53c8:	mov	r1, ip
    53cc:	vld1.32	{d16}, [r3], r6
    53d0:	subs	r1, r1, #2
    53d4:	vrev64.32	d0, d16
    53d8:	vcvt.f64.s32	d17, s0
    53dc:	vcvt.f64.s32	d16, s1
    53e0:	vst1.64	{d16-d17}, [r7], r2
    53e4:	bne	53cc <coda_cursor_read_double_array+0x800>
    53e8:	cmp	lr, ip
    53ec:	beq	519c <coda_cursor_read_double_array+0x5d0>
    53f0:	add	r1, r4, r0, lsl #3
    53f4:	sub	r2, r4, #4
    53f8:	sub	r1, r1, #8
    53fc:	add	r3, r2, r0, lsl #2
    5400:	sub	r0, r0, #1
    5404:	cmp	r0, #0
    5408:	vldr	s0, [r3]
    540c:	vcvt.f64.s32	d16, s0
    5410:	vstr	d16, [r1]
    5414:	sub	r1, r1, #8
    5418:	bgt	53fc <coda_cursor_read_double_array+0x830>
    541c:	b	519c <coda_cursor_read_double_array+0x5d0>
    5420:	add	r1, r4, lr, lsl #2
    5424:	bic	ip, lr, #1
    5428:	mvn	r6, #7
    542c:	mvn	r2, #15
    5430:	sub	r0, lr, ip
    5434:	sub	r3, r1, #8
    5438:	add	r1, r4, lr, lsl #3
    543c:	sub	r7, r1, #16
    5440:	mov	r1, ip
    5444:	vld1.32	{d16}, [r3], r6
    5448:	subs	r1, r1, #2
    544c:	vrev64.32	d0, d16
    5450:	vcvt.f64.u32	d17, s0
    5454:	vcvt.f64.u32	d16, s1
    5458:	vst1.64	{d16-d17}, [r7], r2
    545c:	bne	5444 <coda_cursor_read_double_array+0x878>
    5460:	cmp	lr, ip
    5464:	beq	519c <coda_cursor_read_double_array+0x5d0>
    5468:	add	r1, r4, r0, lsl #3
    546c:	sub	r2, r4, #4
    5470:	sub	r1, r1, #8
    5474:	add	r3, r2, r0, lsl #2
    5478:	sub	r0, r0, #1
    547c:	cmp	r0, #0
    5480:	vldr	s0, [r3]
    5484:	vcvt.f64.u32	d16, s0
    5488:	vstr	d16, [r1]
    548c:	sub	r1, r1, #8
    5490:	bgt	5474 <coda_cursor_read_double_array+0x8a8>
    5494:	b	519c <coda_cursor_read_double_array+0x5d0>
    5498:	add	r1, r4, lr, lsl #2
    549c:	bic	ip, lr, #1
    54a0:	mvn	r6, #7
    54a4:	mvn	r2, #15
    54a8:	sub	r0, lr, ip
    54ac:	sub	r3, r1, #8
    54b0:	add	r1, r4, lr, lsl #3
    54b4:	sub	r7, r1, #16
    54b8:	mov	r1, ip
    54bc:	vld1.32	{d16}, [r3], r6
    54c0:	subs	r1, r1, #2
    54c4:	vrev64.32	d0, d16
    54c8:	vcvt.f64.f32	d17, s0
    54cc:	vcvt.f64.f32	d16, s1
    54d0:	vst1.64	{d16-d17}, [r7], r2
    54d4:	bne	54bc <coda_cursor_read_double_array+0x8f0>
    54d8:	cmp	lr, ip
    54dc:	beq	519c <coda_cursor_read_double_array+0x5d0>
    54e0:	add	r1, r4, r0, lsl #2
    54e4:	add	r2, r4, r0, lsl #3
    54e8:	sub	r1, r1, #4
    54ec:	sub	r2, r2, #8
    54f0:	vldr	s0, [r1]
    54f4:	sub	r0, r0, #1
    54f8:	sub	r1, r1, #4
    54fc:	cmp	r0, #0
    5500:	vcvt.f64.f32	d16, s0
    5504:	vstr	d16, [r2]
    5508:	sub	r2, r2, #8
    550c:	bgt	54f0 <coda_cursor_read_double_array+0x924>
    5510:	b	519c <coda_cursor_read_double_array+0x5d0>
    5514:	.word	0x000008c4

00005518 <read_float_array>:
    5518:	push	{r4, r5, r6, sl, fp, lr}
    551c:	add	fp, sp, #16
    5520:	mov	r6, r0
    5524:	ldr	r0, [r0, #4]
    5528:	mov	r4, r1
    552c:	mov	r5, r2
    5530:	add	r0, r6, r0, lsl #4
    5534:	ldr	r0, [r0, #-8]
    5538:	ldr	r0, [r0]
    553c:	sub	r1, r0, #100	; 0x64
    5540:	cmp	r1, #5
    5544:	bhi	557c <read_float_array+0x64>
    5548:	add	r0, pc, #0
    554c:	ldr	pc, [r0, r1, lsl #2]
    5550:	.word	0x00005568
    5554:	.word	0x000055a0
    5558:	.word	0x000055a8
    555c:	.word	0x000055bc
    5560:	.word	0x000055cc
    5564:	.word	0x000055dc
    5568:	mov	r0, r6
    556c:	mov	r1, r4
    5570:	mov	r2, r5
    5574:	pop	{r4, r5, r6, sl, fp, lr}
    5578:	b	0 <coda_mem_cursor_read_float_array>
    557c:	cmp	r0, #1
    5580:	beq	561c <read_float_array+0x104>
    5584:	cmp	r0, #0
    5588:	bne	55f8 <read_float_array+0xe0>
    558c:	mov	r0, r6
    5590:	mov	r1, r4
    5594:	mov	r2, r5
    5598:	pop	{r4, r5, r6, sl, fp, lr}
    559c:	b	0 <coda_ascii_cursor_read_float_array>
    55a0:	mvn	r0, #10
    55a4:	b	55ac <read_float_array+0x94>
    55a8:	mvn	r0, #12
    55ac:	mov	r1, #0
    55b0:	bl	0 <coda_set_error>
    55b4:	mvn	r0, #0
    55b8:	pop	{r4, r5, r6, sl, fp, pc}
    55bc:	mov	r0, r6
    55c0:	mov	r1, r4
    55c4:	bl	0 <coda_cdf_cursor_read_float_array>
    55c8:	b	55e8 <read_float_array+0xd0>
    55cc:	mov	r0, r6
    55d0:	mov	r1, r4
    55d4:	bl	0 <coda_netcdf_cursor_read_float_array>
    55d8:	b	55e8 <read_float_array+0xd0>
    55dc:	mov	r0, r6
    55e0:	mov	r1, r4
    55e4:	bl	0 <coda_grib_cursor_read_float_array>
    55e8:	mov	r1, r0
    55ec:	mvn	r0, #0
    55f0:	cmp	r1, #0
    55f4:	popne	{r4, r5, r6, sl, fp, pc}
    55f8:	cmp	r5, #0
    55fc:	beq	5614 <read_float_array+0xfc>
    5600:	mov	r0, r6
    5604:	mov	r1, r4
    5608:	mov	r2, #4
    560c:	pop	{r4, r5, r6, sl, fp, lr}
    5610:	b	9fa0 <transpose_array>
    5614:	mov	r0, #0
    5618:	pop	{r4, r5, r6, sl, fp, pc}
    561c:	mov	r0, r6
    5620:	mov	r1, r4
    5624:	mov	r2, r5
    5628:	pop	{r4, r5, r6, sl, fp, lr}
    562c:	b	0 <coda_bin_cursor_read_float_array>

00005630 <read_double_array>:
    5630:	push	{r4, r5, r6, sl, fp, lr}
    5634:	add	fp, sp, #16
    5638:	sub	sp, sp, #8
    563c:	mov	r6, r0
    5640:	ldr	r0, [r0, #4]
    5644:	mov	r4, r1
    5648:	mov	r5, r2
    564c:	add	r0, r6, r0, lsl #4
    5650:	ldr	r1, [r0, #-8]
    5654:	ldr	r0, [r1]
    5658:	cmp	r0, #99	; 0x63
    565c:	ldrhi	r1, [r1, #4]
    5660:	ldr	r1, [r1, #40]	; 0x28
    5664:	ldr	r1, [r1, #8]
    5668:	cmp	r1, #6
    566c:	bne	5694 <read_double_array+0x64>
    5670:	movw	r1, #0
    5674:	mov	r0, r6
    5678:	mov	r2, r4
    567c:	mov	r3, #8
    5680:	str	r5, [sp]
    5684:	movt	r1, #0
    5688:	bl	97b8 <read_array>
    568c:	sub	sp, fp, #16
    5690:	pop	{r4, r5, r6, sl, fp, pc}
    5694:	sub	r1, r0, #100	; 0x64
    5698:	cmp	r1, #5
    569c:	bhi	56d8 <read_double_array+0xa8>
    56a0:	add	r0, pc, #0
    56a4:	ldr	pc, [r0, r1, lsl #2]
    56a8:	.word	0x000056c0
    56ac:	.word	0x00005730
    56b0:	.word	0x00005728
    56b4:	.word	0x00005748
    56b8:	.word	0x00005718
    56bc:	.word	0x00005798
    56c0:	mov	r0, r6
    56c4:	mov	r1, r4
    56c8:	mov	r2, r5
    56cc:	sub	sp, fp, #16
    56d0:	pop	{r4, r5, r6, sl, fp, lr}
    56d4:	b	0 <coda_mem_cursor_read_double_array>
    56d8:	cmp	r0, #1
    56dc:	beq	5700 <read_double_array+0xd0>
    56e0:	cmp	r0, #0
    56e4:	bne	576c <read_double_array+0x13c>
    56e8:	mov	r0, r6
    56ec:	mov	r1, r4
    56f0:	mov	r2, r5
    56f4:	sub	sp, fp, #16
    56f8:	pop	{r4, r5, r6, sl, fp, lr}
    56fc:	b	0 <coda_ascii_cursor_read_double_array>
    5700:	mov	r0, r6
    5704:	mov	r1, r4
    5708:	mov	r2, r5
    570c:	sub	sp, fp, #16
    5710:	pop	{r4, r5, r6, sl, fp, lr}
    5714:	b	0 <coda_bin_cursor_read_double_array>
    5718:	mov	r0, r6
    571c:	mov	r1, r4
    5720:	bl	0 <coda_netcdf_cursor_read_double_array>
    5724:	b	5754 <read_double_array+0x124>
    5728:	mvn	r0, #12
    572c:	b	5734 <read_double_array+0x104>
    5730:	mvn	r0, #10
    5734:	mov	r1, #0
    5738:	bl	0 <coda_set_error>
    573c:	mvn	r0, #0
    5740:	sub	sp, fp, #16
    5744:	pop	{r4, r5, r6, sl, fp, pc}
    5748:	mov	r0, r6
    574c:	mov	r1, r4
    5750:	bl	0 <coda_cdf_cursor_read_double_array>
    5754:	mov	r1, r0
    5758:	mvn	r0, #0
    575c:	cmp	r1, #0
    5760:	beq	576c <read_double_array+0x13c>
    5764:	sub	sp, fp, #16
    5768:	pop	{r4, r5, r6, sl, fp, pc}
    576c:	cmp	r5, #0
    5770:	beq	578c <read_double_array+0x15c>
    5774:	mov	r0, r6
    5778:	mov	r1, r4
    577c:	mov	r2, #8
    5780:	sub	sp, fp, #16
    5784:	pop	{r4, r5, r6, sl, fp, lr}
    5788:	b	9fa0 <transpose_array>
    578c:	mov	r0, #0
    5790:	sub	sp, fp, #16
    5794:	pop	{r4, r5, r6, sl, fp, pc}
    5798:	movw	r0, #0
    579c:	movw	r1, #0
    57a0:	movw	r3, #0
    57a4:	movw	r2, #1301	; 0x515
    57a8:	movt	r0, #0
    57ac:	movt	r1, #0
    57b0:	movt	r3, #0
    57b4:	bl	0 <__assert_fail>

000057b8 <coda_cursor_read_char_array>:
    57b8:	push	{r4, r5, r6, sl, fp, lr}
    57bc:	add	fp, sp, #16
    57c0:	cmp	r0, #0
    57c4:	beq	5898 <coda_cursor_read_char_array+0xe0>
    57c8:	mov	r6, r0
    57cc:	ldr	r0, [r0, #4]
    57d0:	cmp	r0, #1
    57d4:	blt	5898 <coda_cursor_read_char_array+0xe0>
    57d8:	add	r0, r6, r0, lsl #4
    57dc:	mov	r5, r2
    57e0:	ldr	r2, [r0, #-8]
    57e4:	cmp	r2, #0
    57e8:	beq	5898 <coda_cursor_read_char_array+0xe0>
    57ec:	mov	r4, r1
    57f0:	cmp	r1, #0
    57f4:	beq	58bc <coda_cursor_read_char_array+0x104>
    57f8:	ldr	r1, [r2]
    57fc:	cmp	r1, #99	; 0x63
    5800:	ldrhi	r2, [r2, #4]
    5804:	ldr	r0, [r2, #8]
    5808:	cmp	r0, #1
    580c:	bne	58d4 <coda_cursor_read_char_array+0x11c>
    5810:	bl	0 <__aeabi_read_tp>
    5814:	ldr	r2, [r2, #40]	; 0x28
    5818:	ldr	r3, [r2, #8]
    581c:	bic	r3, r3, #1
    5820:	cmp	r3, #2
    5824:	bne	584c <coda_cursor_read_char_array+0x94>
    5828:	ldr	r3, [pc, #408]	; 59c8 <coda_cursor_read_char_array+0x210>
    582c:	ldr	r3, [pc, r3]
    5830:	ldr	r0, [r0, r3]
    5834:	cmp	r0, #0
    5838:	beq	584c <coda_cursor_read_char_array+0x94>
    583c:	ldr	r3, [r2, #48]	; 0x30
    5840:	mov	r0, #9
    5844:	cmp	r3, #0
    5848:	bne	58e8 <coda_cursor_read_char_array+0x130>
    584c:	ldr	r0, [r2, #12]
    5850:	cmp	r0, #10
    5854:	bne	58e8 <coda_cursor_read_char_array+0x130>
    5858:	sub	r0, r1, #100	; 0x64
    585c:	cmp	r0, #5
    5860:	bhi	5904 <coda_cursor_read_char_array+0x14c>
    5864:	add	r1, pc, #0
    5868:	ldr	pc, [r1, r0, lsl #2]
    586c:	.word	0x00005884
    5870:	.word	0x00005928
    5874:	.word	0x000059a8
    5878:	.word	0x0000594c
    587c:	.word	0x0000595c
    5880:	.word	0x000059a8
    5884:	mov	r0, r6
    5888:	mov	r1, r4
    588c:	mov	r2, r5
    5890:	bl	0 <coda_mem_cursor_read_char_array>
    5894:	b	5990 <coda_cursor_read_char_array+0x1d8>
    5898:	movw	r1, #0
    589c:	movw	r2, #0
    58a0:	mvn	r0, #99	; 0x63
    58a4:	movw	r3, #4136	; 0x1028
    58a8:	movt	r1, #0
    58ac:	movt	r2, #0
    58b0:	bl	0 <coda_set_error>
    58b4:	mvn	r0, #0
    58b8:	pop	{r4, r5, r6, sl, fp, pc}
    58bc:	movw	r1, #0
    58c0:	movw	r2, #0
    58c4:	mvn	r0, #99	; 0x63
    58c8:	movw	r3, #4141	; 0x102d
    58cc:	movt	r1, #0
    58d0:	b	58ac <coda_cursor_read_char_array+0xf4>
    58d4:	bl	0 <coda_type_get_class_name>
    58d8:	movw	r1, #0
    58dc:	mov	r2, r0
    58e0:	movt	r1, #0
    58e4:	b	58f8 <coda_cursor_read_char_array+0x140>
    58e8:	bl	0 <coda_type_get_native_type_name>
    58ec:	movw	r1, #0
    58f0:	mov	r2, r0
    58f4:	movt	r1, #0
    58f8:	mvn	r0, #104	; 0x68
    58fc:	bl	0 <coda_set_error>
    5900:	b	58b4 <coda_cursor_read_char_array+0xfc>
    5904:	cmp	r1, #1
    5908:	beq	5938 <coda_cursor_read_char_array+0x180>
    590c:	cmp	r1, #0
    5910:	bne	5978 <coda_cursor_read_char_array+0x1c0>
    5914:	mov	r0, r6
    5918:	mov	r1, r4
    591c:	mov	r2, r5
    5920:	bl	0 <coda_ascii_cursor_read_char_array>
    5924:	b	5990 <coda_cursor_read_char_array+0x1d8>
    5928:	mvn	r0, #10
    592c:	mov	r1, #0
    5930:	bl	0 <coda_set_error>
    5934:	b	58b4 <coda_cursor_read_char_array+0xfc>
    5938:	mov	r0, r6
    593c:	mov	r1, r4
    5940:	mov	r2, r5
    5944:	bl	0 <coda_bin_cursor_read_char_array>
    5948:	b	5990 <coda_cursor_read_char_array+0x1d8>
    594c:	mov	r0, r6
    5950:	mov	r1, r4
    5954:	bl	0 <coda_cdf_cursor_read_char_array>
    5958:	b	5968 <coda_cursor_read_char_array+0x1b0>
    595c:	mov	r0, r6
    5960:	mov	r1, r4
    5964:	bl	0 <coda_netcdf_cursor_read_char_array>
    5968:	mov	r1, r0
    596c:	mvn	r0, #0
    5970:	cmp	r1, #0
    5974:	bne	58b8 <coda_cursor_read_char_array+0x100>
    5978:	cmp	r5, #0
    597c:	beq	59a0 <coda_cursor_read_char_array+0x1e8>
    5980:	mov	r0, r6
    5984:	mov	r1, r4
    5988:	mov	r2, #1
    598c:	bl	9fa0 <transpose_array>
    5990:	mov	r1, r0
    5994:	mvn	r0, #0
    5998:	cmp	r1, #0
    599c:	popne	{r4, r5, r6, sl, fp, pc}
    59a0:	mov	r0, #0
    59a4:	pop	{r4, r5, r6, sl, fp, pc}
    59a8:	movw	r0, #0
    59ac:	movw	r1, #0
    59b0:	movw	r3, #0
    59b4:	movw	r2, #1348	; 0x544
    59b8:	movt	r0, #0
    59bc:	movt	r1, #0
    59c0:	movt	r3, #0
    59c4:	bl	0 <__assert_fail>
    59c8:	.word	0x00000194

000059cc <coda_cursor_read_int8_partial_array>:
    59cc:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
    59d0:	add	fp, sp, #24
    59d4:	sub	sp, sp, #8
    59d8:	cmp	r0, #0
    59dc:	beq	5a94 <coda_cursor_read_int8_partial_array+0xc8>
    59e0:	mov	r7, r0
    59e4:	ldr	r0, [r0, #4]
    59e8:	cmp	r0, #1
    59ec:	blt	5a94 <coda_cursor_read_int8_partial_array+0xc8>
    59f0:	add	r0, r7, r0, lsl #4
    59f4:	ldr	r5, [r0, #-8]
    59f8:	cmp	r5, #0
    59fc:	beq	5a94 <coda_cursor_read_int8_partial_array+0xc8>
    5a00:	mov	r6, r3
    5a04:	cmp	r3, #0
    5a08:	beq	5abc <coda_cursor_read_int8_partial_array+0xf0>
    5a0c:	ldr	r0, [r5]
    5a10:	mov	r8, r2
    5a14:	mov	r4, r1
    5a18:	cmp	r0, #99	; 0x63
    5a1c:	ldrhi	r5, [r5, #4]
    5a20:	ldr	r0, [r5, #8]
    5a24:	cmp	r0, #1
    5a28:	bne	5ad4 <coda_cursor_read_int8_partial_array+0x108>
    5a2c:	ldr	r0, [pc, #336]	; 5b84 <coda_cursor_read_int8_partial_array+0x1b8>
    5a30:	ldr	r1, [pc, r0]
    5a34:	bl	0 <__aeabi_read_tp>
    5a38:	ldr	r0, [r0, r1]
    5a3c:	cmp	r0, #0
    5a40:	beq	5ae8 <coda_cursor_read_int8_partial_array+0x11c>
    5a44:	add	r1, sp, #4
    5a48:	mov	r0, r7
    5a4c:	bl	0 <coda_cursor_get_num_elements>
    5a50:	cmp	r0, #0
    5a54:	bne	5ab0 <coda_cursor_read_int8_partial_array+0xe4>
    5a58:	ldr	r3, [sp, #4]
    5a5c:	cmp	r4, #0
    5a60:	bmi	5b4c <coda_cursor_read_int8_partial_array+0x180>
    5a64:	cmp	r3, r4
    5a68:	ble	5b4c <coda_cursor_read_int8_partial_array+0x180>
    5a6c:	add	r0, r8, r4
    5a70:	cmp	r0, r3
    5a74:	ble	5ae8 <coda_cursor_read_int8_partial_array+0x11c>
    5a78:	movw	r1, #0
    5a7c:	str	r3, [sp]
    5a80:	mvn	r0, #106	; 0x6a
    5a84:	mov	r2, r4
    5a88:	mov	r3, r8
    5a8c:	movt	r1, #0
    5a90:	b	5aac <coda_cursor_read_int8_partial_array+0xe0>
    5a94:	movw	r1, #0
    5a98:	movw	r2, #0
    5a9c:	mvn	r0, #99	; 0x63
    5aa0:	movw	r3, #4199	; 0x1067
    5aa4:	movt	r1, #0
    5aa8:	movt	r2, #0
    5aac:	bl	0 <coda_set_error>
    5ab0:	mvn	r0, #0
    5ab4:	sub	sp, fp, #24
    5ab8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
    5abc:	movw	r1, #0
    5ac0:	movw	r2, #0
    5ac4:	mvn	r0, #99	; 0x63
    5ac8:	movw	r3, #4204	; 0x106c
    5acc:	movt	r1, #0
    5ad0:	b	5aa8 <coda_cursor_read_int8_partial_array+0xdc>
    5ad4:	bl	0 <coda_type_get_class_name>
    5ad8:	movw	r1, #0
    5adc:	mov	r2, r0
    5ae0:	movt	r1, #0
    5ae4:	b	5b40 <coda_cursor_read_int8_partial_array+0x174>
    5ae8:	bl	0 <__aeabi_read_tp>
    5aec:	ldr	r1, [r5, #40]	; 0x28
    5af0:	ldr	r2, [r1, #8]
    5af4:	bic	r2, r2, #1
    5af8:	cmp	r2, #2
    5afc:	bne	5b24 <coda_cursor_read_int8_partial_array+0x158>
    5b00:	ldr	r2, [pc, #128]	; 5b88 <coda_cursor_read_int8_partial_array+0x1bc>
    5b04:	ldr	r2, [pc, r2]
    5b08:	ldr	r0, [r0, r2]
    5b0c:	cmp	r0, #0
    5b10:	beq	5b24 <coda_cursor_read_int8_partial_array+0x158>
    5b14:	ldr	r2, [r1, #48]	; 0x30
    5b18:	mov	r0, #9
    5b1c:	cmp	r2, #0
    5b20:	bne	5b30 <coda_cursor_read_int8_partial_array+0x164>
    5b24:	ldr	r0, [r1, #12]
    5b28:	cmp	r0, #0
    5b2c:	beq	5b60 <coda_cursor_read_int8_partial_array+0x194>
    5b30:	bl	0 <coda_type_get_native_type_name>
    5b34:	movw	r1, #0
    5b38:	mov	r2, r0
    5b3c:	movt	r1, #0
    5b40:	mvn	r0, #104	; 0x68
    5b44:	bl	0 <coda_set_error>
    5b48:	b	5ab0 <coda_cursor_read_int8_partial_array+0xe4>
    5b4c:	movw	r1, #0
    5b50:	mvn	r0, #106	; 0x6a
    5b54:	mov	r2, r4
    5b58:	movt	r1, #0
    5b5c:	b	5aac <coda_cursor_read_int8_partial_array+0xe0>
    5b60:	mov	r0, r7
    5b64:	mov	r1, r4
    5b68:	mov	r2, r8
    5b6c:	mov	r3, r6
    5b70:	bl	5b8c <read_int8_partial_array>
    5b74:	cmp	r0, #0
    5b78:	mvnne	r0, #0
    5b7c:	sub	sp, fp, #24
    5b80:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
    5b84:	.word	0x0000014c
    5b88:	.word	0x0000007c

00005b8c <read_int8_partial_array>:
    5b8c:	push	{fp, lr}
    5b90:	mov	fp, sp
    5b94:	ldr	ip, [r0, #4]
    5b98:	add	ip, r0, ip, lsl #4
    5b9c:	ldr	ip, [ip, #-8]
    5ba0:	ldr	ip, [ip]
    5ba4:	sub	lr, ip, #100	; 0x64
    5ba8:	cmp	lr, #4
    5bac:	bhi	5bd4 <read_int8_partial_array+0x48>
    5bb0:	add	ip, pc, #0
    5bb4:	ldr	pc, [ip, lr, lsl #2]
    5bb8:	.word	0x00005bcc
    5bbc:	.word	0x00005c04
    5bc0:	.word	0x00005bf4
    5bc4:	.word	0x00005bfc
    5bc8:	.word	0x00005bec
    5bcc:	pop	{fp, lr}
    5bd0:	b	0 <coda_mem_cursor_read_int8_partial_array>
    5bd4:	cmp	ip, #1
    5bd8:	beq	5c18 <read_int8_partial_array+0x8c>
    5bdc:	cmp	ip, #0
    5be0:	bne	5c20 <read_int8_partial_array+0x94>
    5be4:	pop	{fp, lr}
    5be8:	b	0 <coda_ascii_cursor_read_int8_partial_array>
    5bec:	pop	{fp, lr}
    5bf0:	b	0 <coda_netcdf_cursor_read_int8_partial_array>
    5bf4:	mvn	r0, #12
    5bf8:	b	5c08 <read_int8_partial_array+0x7c>
    5bfc:	pop	{fp, lr}
    5c00:	b	0 <coda_cdf_cursor_read_int8_partial_array>
    5c04:	mvn	r0, #10
    5c08:	mov	r1, #0
    5c0c:	bl	0 <coda_set_error>
    5c10:	mvn	r0, #0
    5c14:	pop	{fp, pc}
    5c18:	pop	{fp, lr}
    5c1c:	b	0 <coda_bin_cursor_read_int8_partial_array>
    5c20:	movw	r0, #0
    5c24:	movw	r1, #0
    5c28:	movw	r3, #0
    5c2c:	mov	r2, #1392	; 0x570
    5c30:	movt	r0, #0
    5c34:	movt	r1, #0
    5c38:	movt	r3, #0
    5c3c:	bl	0 <__assert_fail>

00005c40 <coda_cursor_read_uint8_partial_array>:
    5c40:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
    5c44:	add	fp, sp, #24
    5c48:	sub	sp, sp, #8
    5c4c:	cmp	r0, #0
    5c50:	beq	5d08 <coda_cursor_read_uint8_partial_array+0xc8>
    5c54:	mov	r7, r0
    5c58:	ldr	r0, [r0, #4]
    5c5c:	cmp	r0, #1
    5c60:	blt	5d08 <coda_cursor_read_uint8_partial_array+0xc8>
    5c64:	add	r0, r7, r0, lsl #4
    5c68:	ldr	r5, [r0, #-8]
    5c6c:	cmp	r5, #0
    5c70:	beq	5d08 <coda_cursor_read_uint8_partial_array+0xc8>
    5c74:	mov	r6, r3
    5c78:	cmp	r3, #0
    5c7c:	beq	5d30 <coda_cursor_read_uint8_partial_array+0xf0>
    5c80:	ldr	r0, [r5]
    5c84:	mov	r8, r2
    5c88:	mov	r4, r1
    5c8c:	cmp	r0, #99	; 0x63
    5c90:	ldrhi	r5, [r5, #4]
    5c94:	ldr	r0, [r5, #8]
    5c98:	cmp	r0, #1
    5c9c:	bne	5d48 <coda_cursor_read_uint8_partial_array+0x108>
    5ca0:	ldr	r0, [pc, #336]	; 5df8 <coda_cursor_read_uint8_partial_array+0x1b8>
    5ca4:	ldr	r1, [pc, r0]
    5ca8:	bl	0 <__aeabi_read_tp>
    5cac:	ldr	r0, [r0, r1]
    5cb0:	cmp	r0, #0
    5cb4:	beq	5d5c <coda_cursor_read_uint8_partial_array+0x11c>
    5cb8:	add	r1, sp, #4
    5cbc:	mov	r0, r7
    5cc0:	bl	0 <coda_cursor_get_num_elements>
    5cc4:	cmp	r0, #0
    5cc8:	bne	5d24 <coda_cursor_read_uint8_partial_array+0xe4>
    5ccc:	ldr	r3, [sp, #4]
    5cd0:	cmp	r4, #0
    5cd4:	bmi	5de4 <coda_cursor_read_uint8_partial_array+0x1a4>
    5cd8:	cmp	r3, r4
    5cdc:	ble	5de4 <coda_cursor_read_uint8_partial_array+0x1a4>
    5ce0:	add	r0, r8, r4
    5ce4:	cmp	r0, r3
    5ce8:	ble	5d5c <coda_cursor_read_uint8_partial_array+0x11c>
    5cec:	movw	r1, #0
    5cf0:	str	r3, [sp]
    5cf4:	mvn	r0, #106	; 0x6a
    5cf8:	mov	r2, r4
    5cfc:	mov	r3, r8
    5d00:	movt	r1, #0
    5d04:	b	5d20 <coda_cursor_read_uint8_partial_array+0xe0>
    5d08:	movw	r1, #0
    5d0c:	movw	r2, #0
    5d10:	mvn	r0, #99	; 0x63
    5d14:	movw	r3, #4285	; 0x10bd
    5d18:	movt	r1, #0
    5d1c:	movt	r2, #0
    5d20:	bl	0 <coda_set_error>
    5d24:	mvn	r0, #0
    5d28:	sub	sp, fp, #24
    5d2c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
    5d30:	movw	r1, #0
    5d34:	movw	r2, #0
    5d38:	mvn	r0, #99	; 0x63
    5d3c:	movw	r3, #4290	; 0x10c2
    5d40:	movt	r1, #0
    5d44:	b	5d1c <coda_cursor_read_uint8_partial_array+0xdc>
    5d48:	bl	0 <coda_type_get_class_name>
    5d4c:	movw	r1, #0
    5d50:	mov	r2, r0
    5d54:	movt	r1, #0
    5d58:	b	5dd8 <coda_cursor_read_uint8_partial_array+0x198>
    5d5c:	bl	0 <__aeabi_read_tp>
    5d60:	ldr	r1, [r5, #40]	; 0x28
    5d64:	ldr	r2, [r1, #8]
    5d68:	bic	r2, r2, #1
    5d6c:	cmp	r2, #2
    5d70:	bne	5d98 <coda_cursor_read_uint8_partial_array+0x158>
    5d74:	ldr	r2, [pc, #128]	; 5dfc <coda_cursor_read_uint8_partial_array+0x1bc>
    5d78:	ldr	r2, [pc, r2]
    5d7c:	ldr	r0, [r0, r2]
    5d80:	cmp	r0, #0
    5d84:	beq	5d98 <coda_cursor_read_uint8_partial_array+0x158>
    5d88:	ldr	r2, [r1, #48]	; 0x30
    5d8c:	mov	r0, #9
    5d90:	cmp	r2, #0
    5d94:	bne	5dc8 <coda_cursor_read_uint8_partial_array+0x188>
    5d98:	ldr	r0, [r1, #12]
    5d9c:	cmp	r0, #1
    5da0:	bne	5dc8 <coda_cursor_read_uint8_partial_array+0x188>
    5da4:	mov	r0, r7
    5da8:	mov	r1, r4
    5dac:	mov	r2, r8
    5db0:	mov	r3, r6
    5db4:	bl	5e00 <read_uint8_partial_array>
    5db8:	cmp	r0, #0
    5dbc:	mvnne	r0, #0
    5dc0:	sub	sp, fp, #24
    5dc4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
    5dc8:	bl	0 <coda_type_get_native_type_name>
    5dcc:	movw	r1, #0
    5dd0:	mov	r2, r0
    5dd4:	movt	r1, #0
    5dd8:	mvn	r0, #104	; 0x68
    5ddc:	bl	0 <coda_set_error>
    5de0:	b	5d24 <coda_cursor_read_uint8_partial_array+0xe4>
    5de4:	movw	r1, #0
    5de8:	mvn	r0, #106	; 0x6a
    5dec:	mov	r2, r4
    5df0:	movt	r1, #0
    5df4:	b	5d20 <coda_cursor_read_uint8_partial_array+0xe0>
    5df8:	.word	0x0000014c
    5dfc:	.word	0x0000007c

00005e00 <read_uint8_partial_array>:
    5e00:	push	{fp, lr}
    5e04:	mov	fp, sp
    5e08:	ldr	ip, [r0, #4]
    5e0c:	add	ip, r0, ip, lsl #4
    5e10:	ldr	ip, [ip, #-8]
    5e14:	ldr	ip, [ip]
    5e18:	sub	lr, ip, #100	; 0x64
    5e1c:	cmp	lr, #3
    5e20:	bhi	5e44 <read_uint8_partial_array+0x44>
    5e24:	add	ip, pc, #0
    5e28:	ldr	pc, [ip, lr, lsl #2]
    5e2c:	.word	0x00005e3c
    5e30:	.word	0x00005e64
    5e34:	.word	0x00005e5c
    5e38:	.word	0x00005e78
    5e3c:	pop	{fp, lr}
    5e40:	b	0 <coda_mem_cursor_read_uint8_partial_array>
    5e44:	cmp	ip, #1
    5e48:	beq	5e80 <read_uint8_partial_array+0x80>
    5e4c:	cmp	ip, #0
    5e50:	bne	5e88 <read_uint8_partial_array+0x88>
    5e54:	pop	{fp, lr}
    5e58:	b	0 <coda_ascii_cursor_read_uint8_partial_array>
    5e5c:	mvn	r0, #12
    5e60:	b	5e68 <read_uint8_partial_array+0x68>
    5e64:	mvn	r0, #10
    5e68:	mov	r1, #0
    5e6c:	bl	0 <coda_set_error>
    5e70:	mvn	r0, #0
    5e74:	pop	{fp, pc}
    5e78:	pop	{fp, lr}
    5e7c:	b	0 <coda_cdf_cursor_read_uint8_partial_array>
    5e80:	pop	{fp, lr}
    5e84:	b	0 <coda_bin_cursor_read_uint8_partial_array>
    5e88:	movw	r0, #0
    5e8c:	movw	r1, #0
    5e90:	movw	r3, #0
    5e94:	movw	r2, #1427	; 0x593
    5e98:	movt	r0, #0
    5e9c:	movt	r1, #0
    5ea0:	movt	r3, #0
    5ea4:	bl	0 <__assert_fail>

00005ea8 <coda_cursor_read_int16_partial_array>:
    5ea8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
    5eac:	add	fp, sp, #24
    5eb0:	sub	sp, sp, #8
    5eb4:	cmp	r0, #0
    5eb8:	beq	5f70 <coda_cursor_read_int16_partial_array+0xc8>
    5ebc:	mov	r7, r0
    5ec0:	ldr	r0, [r0, #4]
    5ec4:	cmp	r0, #1
    5ec8:	blt	5f70 <coda_cursor_read_int16_partial_array+0xc8>
    5ecc:	add	r0, r7, r0, lsl #4
    5ed0:	ldr	r5, [r0, #-8]
    5ed4:	cmp	r5, #0
    5ed8:	beq	5f70 <coda_cursor_read_int16_partial_array+0xc8>
    5edc:	mov	r4, r3
    5ee0:	cmp	r3, #0
    5ee4:	beq	5f98 <coda_cursor_read_int16_partial_array+0xf0>
    5ee8:	ldr	r0, [r5]
    5eec:	mov	r8, r2
    5ef0:	mov	r6, r1
    5ef4:	cmp	r0, #99	; 0x63
    5ef8:	ldrhi	r5, [r5, #4]
    5efc:	ldr	r0, [r5, #8]
    5f00:	cmp	r0, #1
    5f04:	bne	5fb0 <coda_cursor_read_int16_partial_array+0x108>
    5f08:	ldr	r0, [pc, #836]	; 6254 <coda_cursor_read_int16_partial_array+0x3ac>
    5f0c:	ldr	r1, [pc, r0]
    5f10:	bl	0 <__aeabi_read_tp>
    5f14:	ldr	r0, [r0, r1]
    5f18:	cmp	r0, #0
    5f1c:	beq	5fcc <coda_cursor_read_int16_partial_array+0x124>
    5f20:	add	r1, sp, #4
    5f24:	mov	r0, r7
    5f28:	bl	0 <coda_cursor_get_num_elements>
    5f2c:	cmp	r0, #0
    5f30:	bne	5f8c <coda_cursor_read_int16_partial_array+0xe4>
    5f34:	ldr	r3, [sp, #4]
    5f38:	cmp	r6, #0
    5f3c:	bmi	60f8 <coda_cursor_read_int16_partial_array+0x250>
    5f40:	cmp	r3, r6
    5f44:	ble	60f8 <coda_cursor_read_int16_partial_array+0x250>
    5f48:	add	r0, r8, r6
    5f4c:	cmp	r0, r3
    5f50:	ble	5fcc <coda_cursor_read_int16_partial_array+0x124>
    5f54:	movw	r1, #0
    5f58:	str	r3, [sp]
    5f5c:	mvn	r0, #106	; 0x6a
    5f60:	mov	r2, r6
    5f64:	mov	r3, r8
    5f68:	movt	r1, #0
    5f6c:	b	5f88 <coda_cursor_read_int16_partial_array+0xe0>
    5f70:	movw	r1, #0
    5f74:	movw	r2, #0
    5f78:	mvn	r0, #99	; 0x63
    5f7c:	movw	r3, #4374	; 0x1116
    5f80:	movt	r1, #0
    5f84:	movt	r2, #0
    5f88:	bl	0 <coda_set_error>
    5f8c:	mvn	r0, #0
    5f90:	sub	sp, fp, #24
    5f94:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
    5f98:	movw	r1, #0
    5f9c:	movw	r2, #0
    5fa0:	mvn	r0, #99	; 0x63
    5fa4:	movw	r3, #4379	; 0x111b
    5fa8:	movt	r1, #0
    5fac:	b	5f84 <coda_cursor_read_int16_partial_array+0xdc>
    5fb0:	bl	0 <coda_type_get_class_name>
    5fb4:	movw	r1, #0
    5fb8:	mov	r2, r0
    5fbc:	movt	r1, #0
    5fc0:	mvn	r0, #104	; 0x68
    5fc4:	bl	0 <coda_set_error>
    5fc8:	b	5f8c <coda_cursor_read_int16_partial_array+0xe4>
    5fcc:	bl	0 <__aeabi_read_tp>
    5fd0:	ldr	r1, [r5, #40]	; 0x28
    5fd4:	ldr	r2, [r1, #8]
    5fd8:	bic	r2, r2, #1
    5fdc:	cmp	r2, #2
    5fe0:	bne	6008 <coda_cursor_read_int16_partial_array+0x160>
    5fe4:	ldr	r2, [pc, #620]	; 6258 <coda_cursor_read_int16_partial_array+0x3b0>
    5fe8:	ldr	r2, [pc, r2]
    5fec:	ldr	r0, [r0, r2]
    5ff0:	cmp	r0, #0
    5ff4:	beq	6008 <coda_cursor_read_int16_partial_array+0x160>
    5ff8:	ldr	r2, [r1, #48]	; 0x30
    5ffc:	mov	r0, #9
    6000:	cmp	r2, #0
    6004:	bne	60e4 <coda_cursor_read_int16_partial_array+0x23c>
    6008:	ldr	r0, [r1, #12]
    600c:	cmp	r0, #2
    6010:	beq	610c <coda_cursor_read_int16_partial_array+0x264>
    6014:	cmp	r0, #1
    6018:	beq	6138 <coda_cursor_read_int16_partial_array+0x290>
    601c:	cmp	r0, #0
    6020:	bne	60e4 <coda_cursor_read_int16_partial_array+0x23c>
    6024:	mov	r0, r7
    6028:	mov	r1, r6
    602c:	mov	r2, r8
    6030:	mov	r3, r4
    6034:	bl	5b8c <read_int8_partial_array>
    6038:	mov	r1, r0
    603c:	mvn	r0, #0
    6040:	cmp	r1, #0
    6044:	bne	624c <coda_cursor_read_int16_partial_array+0x3a4>
    6048:	cmp	r8, #1
    604c:	blt	6248 <coda_cursor_read_int16_partial_array+0x3a0>
    6050:	cmp	r8, #8
    6054:	bcc	61f8 <coda_cursor_read_int16_partial_array+0x350>
    6058:	sub	r0, r8, #1
    605c:	mov	r1, #0
    6060:	add	r3, r4, r0, lsl #1
    6064:	adds	r2, r0, r0
    6068:	adc	r1, r1, #0
    606c:	cmp	r2, r3
    6070:	bhi	61f8 <coda_cursor_read_int16_partial_array+0x350>
    6074:	cmp	r1, #0
    6078:	bne	61f8 <coda_cursor_read_int16_partial_array+0x350>
    607c:	add	r1, r4, r0
    6080:	cmp	r0, r1
    6084:	bhi	61f8 <coda_cursor_read_int16_partial_array+0x350>
    6088:	add	r2, r4, r8
    608c:	add	r1, r4, r8, lsl #1
    6090:	cmp	r2, r4
    6094:	cmphi	r1, r4
    6098:	bhi	61f8 <coda_cursor_read_int16_partial_array+0x350>
    609c:	bic	r5, r8, #7
    60a0:	sub	r3, r1, #16
    60a4:	sub	r2, r2, #8
    60a8:	mvn	r7, #7
    60ac:	mvn	r6, #15
    60b0:	sub	r0, r8, r5
    60b4:	mov	r1, r5
    60b8:	vld1.8	{d16}, [r2], r7
    60bc:	subs	r1, r1, #8
    60c0:	vrev64.8	d16, d16
    60c4:	vmovl.s8	q8, d16
    60c8:	vrev64.16	q8, q8
    60cc:	vext.8	q8, q8, q8, #8
    60d0:	vst1.16	{d16-d17}, [r3], r6
    60d4:	bne	60b8 <coda_cursor_read_int16_partial_array+0x210>
    60d8:	cmp	r5, r8
    60dc:	bne	61fc <coda_cursor_read_int16_partial_array+0x354>
    60e0:	b	6248 <coda_cursor_read_int16_partial_array+0x3a0>
    60e4:	bl	0 <coda_type_get_native_type_name>
    60e8:	movw	r1, #0
    60ec:	mov	r2, r0
    60f0:	movt	r1, #0
    60f4:	b	5fc0 <coda_cursor_read_int16_partial_array+0x118>
    60f8:	movw	r1, #0
    60fc:	mvn	r0, #106	; 0x6a
    6100:	mov	r2, r6
    6104:	movt	r1, #0
    6108:	b	5f88 <coda_cursor_read_int16_partial_array+0xe0>
    610c:	mov	r0, r7
    6110:	mov	r1, r6
    6114:	mov	r2, r8
    6118:	mov	r3, r4
    611c:	bl	625c <read_int16_partial_array>
    6120:	mov	r1, r0
    6124:	mvn	r0, #0
    6128:	cmp	r1, #0
    612c:	moveq	r0, #0
    6130:	sub	sp, fp, #24
    6134:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
    6138:	mov	r0, r7
    613c:	mov	r1, r6
    6140:	mov	r2, r8
    6144:	mov	r3, r4
    6148:	bl	5e00 <read_uint8_partial_array>
    614c:	mov	r1, r0
    6150:	mvn	r0, #0
    6154:	cmp	r1, #0
    6158:	bne	624c <coda_cursor_read_int16_partial_array+0x3a4>
    615c:	cmp	r8, #1
    6160:	blt	6248 <coda_cursor_read_int16_partial_array+0x3a0>
    6164:	cmp	r8, #8
    6168:	bcc	6224 <coda_cursor_read_int16_partial_array+0x37c>
    616c:	sub	r0, r8, #1
    6170:	mov	r1, #0
    6174:	add	r3, r4, r0, lsl #1
    6178:	adds	r2, r0, r0
    617c:	adc	r1, r1, #0
    6180:	cmp	r2, r3
    6184:	bhi	6224 <coda_cursor_read_int16_partial_array+0x37c>
    6188:	cmp	r1, #0
    618c:	bne	6224 <coda_cursor_read_int16_partial_array+0x37c>
    6190:	add	r1, r4, r0
    6194:	cmp	r0, r1
    6198:	bhi	6224 <coda_cursor_read_int16_partial_array+0x37c>
    619c:	add	r2, r4, r8
    61a0:	add	r1, r4, r8, lsl #1
    61a4:	cmp	r2, r4
    61a8:	cmphi	r1, r4
    61ac:	bhi	6224 <coda_cursor_read_int16_partial_array+0x37c>
    61b0:	bic	r5, r8, #7
    61b4:	sub	r3, r1, #16
    61b8:	sub	r2, r2, #8
    61bc:	mvn	r7, #7
    61c0:	mvn	r6, #15
    61c4:	sub	r0, r8, r5
    61c8:	mov	r1, r5
    61cc:	vld1.8	{d16}, [r2], r7
    61d0:	subs	r1, r1, #8
    61d4:	vrev64.8	d16, d16
    61d8:	vmovl.u8	q8, d16
    61dc:	vrev64.16	q8, q8
    61e0:	vext.8	q8, q8, q8, #8
    61e4:	vst1.16	{d16-d17}, [r3], r6
    61e8:	bne	61cc <coda_cursor_read_int16_partial_array+0x324>
    61ec:	cmp	r5, r8
    61f0:	bne	6228 <coda_cursor_read_int16_partial_array+0x380>
    61f4:	b	6248 <coda_cursor_read_int16_partial_array+0x3a0>
    61f8:	mov	r0, r8
    61fc:	add	r1, r4, r0, lsl #1
    6200:	sub	r2, r4, #1
    6204:	sub	r1, r1, #2
    6208:	add	r3, r2, r0
    620c:	sub	r0, r0, #1
    6210:	ldrsb	r3, [r3]
    6214:	cmp	r0, #0
    6218:	strh	r3, [r1], #-2
    621c:	bgt	6208 <coda_cursor_read_int16_partial_array+0x360>
    6220:	b	6248 <coda_cursor_read_int16_partial_array+0x3a0>
    6224:	mov	r0, r8
    6228:	add	r1, r4, r0, lsl #1
    622c:	sub	r2, r4, #1
    6230:	sub	r1, r1, #2
    6234:	ldrb	r3, [r2, r0]
    6238:	sub	r0, r0, #1
    623c:	cmp	r0, #0
    6240:	strh	r3, [r1], #-2
    6244:	bgt	6234 <coda_cursor_read_int16_partial_array+0x38c>
    6248:	mov	r0, #0
    624c:	sub	sp, fp, #24
    6250:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
    6254:	.word	0x00000340
    6258:	.word	0x00000268

0000625c <read_int16_partial_array>:
    625c:	push	{fp, lr}
    6260:	mov	fp, sp
    6264:	ldr	ip, [r0, #4]
    6268:	add	ip, r0, ip, lsl #4
    626c:	ldr	ip, [ip, #-8]
    6270:	ldr	ip, [ip]
    6274:	sub	lr, ip, #100	; 0x64
    6278:	cmp	lr, #4
    627c:	bhi	62a4 <read_int16_partial_array+0x48>
    6280:	add	ip, pc, #0
    6284:	ldr	pc, [ip, lr, lsl #2]
    6288:	.word	0x0000629c
    628c:	.word	0x000062d4
    6290:	.word	0x000062c4
    6294:	.word	0x000062cc
    6298:	.word	0x000062bc
    629c:	pop	{fp, lr}
    62a0:	b	0 <coda_mem_cursor_read_int16_partial_array>
    62a4:	cmp	ip, #1
    62a8:	beq	62e8 <read_int16_partial_array+0x8c>
    62ac:	cmp	ip, #0
    62b0:	bne	62f0 <read_int16_partial_array+0x94>
    62b4:	pop	{fp, lr}
    62b8:	b	0 <coda_ascii_cursor_read_int16_partial_array>
    62bc:	pop	{fp, lr}
    62c0:	b	0 <coda_netcdf_cursor_read_int16_partial_array>
    62c4:	mvn	r0, #12
    62c8:	b	62d8 <read_int16_partial_array+0x7c>
    62cc:	pop	{fp, lr}
    62d0:	b	0 <coda_cdf_cursor_read_int16_partial_array>
    62d4:	mvn	r0, #10
    62d8:	mov	r1, #0
    62dc:	bl	0 <coda_set_error>
    62e0:	mvn	r0, #0
    62e4:	pop	{fp, pc}
    62e8:	pop	{fp, lr}
    62ec:	b	0 <coda_bin_cursor_read_int16_partial_array>
    62f0:	movw	r0, #0
    62f4:	movw	r1, #0
    62f8:	movw	r3, #0
    62fc:	movw	r2, #1463	; 0x5b7
    6300:	movt	r0, #0
    6304:	movt	r1, #0
    6308:	movt	r3, #0
    630c:	bl	0 <__assert_fail>

00006310 <coda_cursor_read_uint16_partial_array>:
    6310:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
    6314:	add	fp, sp, #24
    6318:	sub	sp, sp, #8
    631c:	cmp	r0, #0
    6320:	beq	63d8 <coda_cursor_read_uint16_partial_array+0xc8>
    6324:	mov	r7, r0
    6328:	ldr	r0, [r0, #4]
    632c:	cmp	r0, #1
    6330:	blt	63d8 <coda_cursor_read_uint16_partial_array+0xc8>
    6334:	add	r0, r7, r0, lsl #4
    6338:	ldr	r5, [r0, #-8]
    633c:	cmp	r5, #0
    6340:	beq	63d8 <coda_cursor_read_uint16_partial_array+0xc8>
    6344:	mov	r4, r3
    6348:	cmp	r3, #0
    634c:	beq	6400 <coda_cursor_read_uint16_partial_array+0xf0>
    6350:	ldr	r0, [r5]
    6354:	mov	r8, r2
    6358:	mov	r6, r1
    635c:	cmp	r0, #99	; 0x63
    6360:	ldrhi	r5, [r5, #4]
    6364:	ldr	r0, [r5, #8]
    6368:	cmp	r0, #1
    636c:	bne	6418 <coda_cursor_read_uint16_partial_array+0x108>
    6370:	ldr	r0, [pc, #592]	; 65c8 <coda_cursor_read_uint16_partial_array+0x2b8>
    6374:	ldr	r1, [pc, r0]
    6378:	bl	0 <__aeabi_read_tp>
    637c:	ldr	r0, [r0, r1]
    6380:	cmp	r0, #0
    6384:	beq	6434 <coda_cursor_read_uint16_partial_array+0x124>
    6388:	add	r1, sp, #4
    638c:	mov	r0, r7
    6390:	bl	0 <coda_cursor_get_num_elements>
    6394:	cmp	r0, #0
    6398:	bne	63f4 <coda_cursor_read_uint16_partial_array+0xe4>
    639c:	ldr	r3, [sp, #4]
    63a0:	cmp	r6, #0
    63a4:	bmi	6558 <coda_cursor_read_uint16_partial_array+0x248>
    63a8:	cmp	r3, r6
    63ac:	ble	6558 <coda_cursor_read_uint16_partial_array+0x248>
    63b0:	add	r0, r8, r6
    63b4:	cmp	r0, r3
    63b8:	ble	6434 <coda_cursor_read_uint16_partial_array+0x124>
    63bc:	movw	r1, #0
    63c0:	str	r3, [sp]
    63c4:	mvn	r0, #106	; 0x6a
    63c8:	mov	r2, r6
    63cc:	mov	r3, r8
    63d0:	movt	r1, #0
    63d4:	b	63f0 <coda_cursor_read_uint16_partial_array+0xe0>
    63d8:	movw	r1, #0
    63dc:	movw	r2, #0
    63e0:	mvn	r0, #99	; 0x63
    63e4:	movw	r3, #4483	; 0x1183
    63e8:	movt	r1, #0
    63ec:	movt	r2, #0
    63f0:	bl	0 <coda_set_error>
    63f4:	mvn	r0, #0
    63f8:	sub	sp, fp, #24
    63fc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
    6400:	movw	r1, #0
    6404:	movw	r2, #0
    6408:	mvn	r0, #99	; 0x63
    640c:	movw	r3, #4488	; 0x1188
    6410:	movt	r1, #0
    6414:	b	63ec <coda_cursor_read_uint16_partial_array+0xdc>
    6418:	bl	0 <coda_type_get_class_name>
    641c:	movw	r1, #0
    6420:	mov	r2, r0
    6424:	movt	r1, #0
    6428:	mvn	r0, #104	; 0x68
    642c:	bl	0 <coda_set_error>
    6430:	b	63f4 <coda_cursor_read_uint16_partial_array+0xe4>
    6434:	bl	0 <__aeabi_read_tp>
    6438:	ldr	r1, [r5, #40]	; 0x28
    643c:	ldr	r2, [r1, #8]
    6440:	bic	r2, r2, #1
    6444:	cmp	r2, #2
    6448:	bne	6470 <coda_cursor_read_uint16_partial_array+0x160>
    644c:	ldr	r2, [pc, #376]	; 65cc <coda_cursor_read_uint16_partial_array+0x2bc>
    6450:	ldr	r2, [pc, r2]
    6454:	ldr	r0, [r0, r2]
    6458:	cmp	r0, #0
    645c:	beq	6470 <coda_cursor_read_uint16_partial_array+0x160>
    6460:	ldr	r2, [r1, #48]	; 0x30
    6464:	mov	r0, #9
    6468:	cmp	r2, #0
    646c:	bne	6544 <coda_cursor_read_uint16_partial_array+0x234>
    6470:	ldr	r0, [r1, #12]
    6474:	cmp	r0, #3
    6478:	beq	656c <coda_cursor_read_uint16_partial_array+0x25c>
    647c:	cmp	r0, #1
    6480:	bne	6544 <coda_cursor_read_uint16_partial_array+0x234>
    6484:	mov	r0, r7
    6488:	mov	r1, r6
    648c:	mov	r2, r8
    6490:	mov	r3, r4
    6494:	bl	5e00 <read_uint8_partial_array>
    6498:	mov	r1, r0
    649c:	mvn	r0, #0
    64a0:	cmp	r1, #0
    64a4:	bne	65c0 <coda_cursor_read_uint16_partial_array+0x2b0>
    64a8:	cmp	r8, #1
    64ac:	blt	65bc <coda_cursor_read_uint16_partial_array+0x2ac>
    64b0:	cmp	r8, #8
    64b4:	bcc	6598 <coda_cursor_read_uint16_partial_array+0x288>
    64b8:	sub	r0, r8, #1
    64bc:	mov	r1, #0
    64c0:	add	r3, r4, r0, lsl #1
    64c4:	adds	r2, r0, r0
    64c8:	adc	r1, r1, #0
    64cc:	cmp	r2, r3
    64d0:	bhi	6598 <coda_cursor_read_uint16_partial_array+0x288>
    64d4:	cmp	r1, #0
    64d8:	bne	6598 <coda_cursor_read_uint16_partial_array+0x288>
    64dc:	add	r1, r4, r0
    64e0:	cmp	r0, r1
    64e4:	bhi	6598 <coda_cursor_read_uint16_partial_array+0x288>
    64e8:	add	r2, r4, r8
    64ec:	add	r1, r4, r8, lsl #1
    64f0:	cmp	r2, r4
    64f4:	cmphi	r1, r4
    64f8:	bhi	6598 <coda_cursor_read_uint16_partial_array+0x288>
    64fc:	bic	r5, r8, #7
    6500:	sub	r3, r1, #16
    6504:	sub	r2, r2, #8
    6508:	mvn	r7, #7
    650c:	mvn	r6, #15
    6510:	sub	r0, r8, r5
    6514:	mov	r1, r5
    6518:	vld1.8	{d16}, [r2], r7
    651c:	subs	r1, r1, #8
    6520:	vrev64.8	d16, d16
    6524:	vmovl.u8	q8, d16
    6528:	vrev64.16	q8, q8
    652c:	vext.8	q8, q8, q8, #8
    6530:	vst1.16	{d16-d17}, [r3], r6
    6534:	bne	6518 <coda_cursor_read_uint16_partial_array+0x208>
    6538:	cmp	r5, r8
    653c:	bne	659c <coda_cursor_read_uint16_partial_array+0x28c>
    6540:	b	65bc <coda_cursor_read_uint16_partial_array+0x2ac>
    6544:	bl	0 <coda_type_get_native_type_name>
    6548:	movw	r1, #0
    654c:	mov	r2, r0
    6550:	movt	r1, #0
    6554:	b	6428 <coda_cursor_read_uint16_partial_array+0x118>
    6558:	movw	r1, #0
    655c:	mvn	r0, #106	; 0x6a
    6560:	mov	r2, r6
    6564:	movt	r1, #0
    6568:	b	63f0 <coda_cursor_read_uint16_partial_array+0xe0>
    656c:	mov	r0, r7
    6570:	mov	r1, r6
    6574:	mov	r2, r8
    6578:	mov	r3, r4
    657c:	bl	65d0 <read_uint16_partial_array>
    6580:	mov	r1, r0
    6584:	mvn	r0, #0
    6588:	cmp	r1, #0
    658c:	moveq	r0, #0
    6590:	sub	sp, fp, #24
    6594:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
    6598:	mov	r0, r8
    659c:	add	r1, r4, r0, lsl #1
    65a0:	sub	r2, r4, #1
    65a4:	sub	r1, r1, #2
    65a8:	ldrb	r3, [r2, r0]
    65ac:	sub	r0, r0, #1
    65b0:	cmp	r0, #0
    65b4:	strh	r3, [r1], #-2
    65b8:	bgt	65a8 <coda_cursor_read_uint16_partial_array+0x298>
    65bc:	mov	r0, #0
    65c0:	sub	sp, fp, #24
    65c4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
    65c8:	.word	0x0000024c
    65cc:	.word	0x00000174

000065d0 <read_uint16_partial_array>:
    65d0:	push	{fp, lr}
    65d4:	mov	fp, sp
    65d8:	ldr	ip, [r0, #4]
    65dc:	add	ip, r0, ip, lsl #4
    65e0:	ldr	ip, [ip, #-8]
    65e4:	ldr	ip, [ip]
    65e8:	sub	lr, ip, #100	; 0x64
    65ec:	cmp	lr, #3
    65f0:	bhi	6614 <read_uint16_partial_array+0x44>
    65f4:	add	ip, pc, #0
    65f8:	ldr	pc, [ip, lr, lsl #2]
    65fc:	.word	0x0000660c
    6600:	.word	0x00006634
    6604:	.word	0x0000662c
    6608:	.word	0x00006648
    660c:	pop	{fp, lr}
    6610:	b	0 <coda_mem_cursor_read_uint16_partial_array>
    6614:	cmp	ip, #1
    6618:	beq	6650 <read_uint16_partial_array+0x80>
    661c:	cmp	ip, #0
    6620:	bne	6658 <read_uint16_partial_array+0x88>
    6624:	pop	{fp, lr}
    6628:	b	0 <coda_ascii_cursor_read_uint16_partial_array>
    662c:	mvn	r0, #12
    6630:	b	6638 <read_uint16_partial_array+0x68>
    6634:	mvn	r0, #10
    6638:	mov	r1, #0
    663c:	bl	0 <coda_set_error>
    6640:	mvn	r0, #0
    6644:	pop	{fp, pc}
    6648:	pop	{fp, lr}
    664c:	b	0 <coda_cdf_cursor_read_uint16_partial_array>
    6650:	pop	{fp, lr}
    6654:	b	0 <coda_bin_cursor_read_uint16_partial_array>
    6658:	movw	r0, #0
    665c:	movw	r1, #0
    6660:	movw	r3, #0
    6664:	movw	r2, #1498	; 0x5da
    6668:	movt	r0, #0
    666c:	movt	r1, #0
    6670:	movt	r3, #0
    6674:	bl	0 <__assert_fail>

00006678 <coda_cursor_read_int32_partial_array>:
    6678:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
    667c:	add	fp, sp, #24
    6680:	sub	sp, sp, #16
    6684:	cmp	r0, #0
    6688:	beq	6740 <coda_cursor_read_int32_partial_array+0xc8>
    668c:	mov	r7, r0
    6690:	ldr	r0, [r0, #4]
    6694:	cmp	r0, #1
    6698:	blt	6740 <coda_cursor_read_int32_partial_array+0xc8>
    669c:	add	r0, r7, r0, lsl #4
    66a0:	ldr	r5, [r0, #-8]
    66a4:	cmp	r5, #0
    66a8:	beq	6740 <coda_cursor_read_int32_partial_array+0xc8>
    66ac:	mov	r4, r3
    66b0:	cmp	r3, #0
    66b4:	beq	6768 <coda_cursor_read_int32_partial_array+0xf0>
    66b8:	ldr	r0, [r5]
    66bc:	mov	r8, r2
    66c0:	mov	r6, r1
    66c4:	cmp	r0, #99	; 0x63
    66c8:	ldrhi	r5, [r5, #4]
    66cc:	ldr	r0, [r5, #8]
    66d0:	cmp	r0, #1
    66d4:	bne	6780 <coda_cursor_read_int32_partial_array+0x108>
    66d8:	ldr	r0, [pc, #1240]	; 6bb8 <coda_cursor_read_int32_partial_array+0x540>
    66dc:	ldr	r1, [pc, r0]
    66e0:	bl	0 <__aeabi_read_tp>
    66e4:	ldr	r0, [r0, r1]
    66e8:	cmp	r0, #0
    66ec:	beq	679c <coda_cursor_read_int32_partial_array+0x124>
    66f0:	add	r1, sp, #12
    66f4:	mov	r0, r7
    66f8:	bl	0 <coda_cursor_get_num_elements>
    66fc:	cmp	r0, #0
    6700:	bne	675c <coda_cursor_read_int32_partial_array+0xe4>
    6704:	ldr	r3, [sp, #12]
    6708:	cmp	r6, #0
    670c:	bmi	68ec <coda_cursor_read_int32_partial_array+0x274>
    6710:	cmp	r3, r6
    6714:	ble	68ec <coda_cursor_read_int32_partial_array+0x274>
    6718:	add	r0, r8, r6
    671c:	cmp	r0, r3
    6720:	ble	679c <coda_cursor_read_int32_partial_array+0x124>
    6724:	movw	r1, #0
    6728:	str	r3, [sp]
    672c:	mvn	r0, #106	; 0x6a
    6730:	mov	r2, r6
    6734:	mov	r3, r8
    6738:	movt	r1, #0
    673c:	b	6758 <coda_cursor_read_int32_partial_array+0xe0>
    6740:	movw	r1, #0
    6744:	movw	r2, #0
    6748:	mvn	r0, #99	; 0x63
    674c:	movw	r3, #4584	; 0x11e8
    6750:	movt	r1, #0
    6754:	movt	r2, #0
    6758:	bl	0 <coda_set_error>
    675c:	mvn	r0, #0
    6760:	sub	sp, fp, #24
    6764:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
    6768:	movw	r1, #0
    676c:	movw	r2, #0
    6770:	mvn	r0, #99	; 0x63
    6774:	movw	r3, #4589	; 0x11ed
    6778:	movt	r1, #0
    677c:	b	6754 <coda_cursor_read_int32_partial_array+0xdc>
    6780:	bl	0 <coda_type_get_class_name>
    6784:	movw	r1, #0
    6788:	mov	r2, r0
    678c:	movt	r1, #0
    6790:	mvn	r0, #104	; 0x68
    6794:	bl	0 <coda_set_error>
    6798:	b	675c <coda_cursor_read_int32_partial_array+0xe4>
    679c:	bl	0 <__aeabi_read_tp>
    67a0:	ldr	r1, [r5, #40]	; 0x28
    67a4:	ldr	r2, [r1, #8]
    67a8:	bic	r2, r2, #1
    67ac:	cmp	r2, #2
    67b0:	bne	67d8 <coda_cursor_read_int32_partial_array+0x160>
    67b4:	ldr	r2, [pc, #1024]	; 6bbc <coda_cursor_read_int32_partial_array+0x544>
    67b8:	ldr	r2, [pc, r2]
    67bc:	ldr	r0, [r0, r2]
    67c0:	cmp	r0, #0
    67c4:	beq	67d8 <coda_cursor_read_int32_partial_array+0x160>
    67c8:	ldr	r2, [r1, #48]	; 0x30
    67cc:	mov	r0, #9
    67d0:	cmp	r2, #0
    67d4:	bne	68d8 <coda_cursor_read_int32_partial_array+0x260>
    67d8:	ldr	r0, [r1, #12]
    67dc:	cmp	r0, #4
    67e0:	bhi	68d8 <coda_cursor_read_int32_partial_array+0x260>
    67e4:	add	r1, pc, #0
    67e8:	ldr	pc, [r1, r0, lsl #2]
    67ec:	.word	0x00006800
    67f0:	.word	0x00006900
    67f4:	.word	0x000069d8
    67f8:	.word	0x00006a14
    67fc:	.word	0x00006a50
    6800:	mov	r0, r7
    6804:	mov	r1, r6
    6808:	mov	r2, r8
    680c:	mov	r3, r4
    6810:	bl	5b8c <read_int8_partial_array>
    6814:	mov	r1, r0
    6818:	mvn	r0, #0
    681c:	cmp	r1, #0
    6820:	bne	6bb0 <coda_cursor_read_int32_partial_array+0x538>
    6824:	cmp	r8, #1
    6828:	blt	6bac <coda_cursor_read_int32_partial_array+0x534>
    682c:	cmp	r8, #4
    6830:	bcc	6a7c <coda_cursor_read_int32_partial_array+0x404>
    6834:	sub	r0, r8, #1
    6838:	bic	r1, r0, #-1073741824	; 0xc0000000
    683c:	add	r2, r4, r0, lsl #2
    6840:	lsl	r3, r0, #2
    6844:	subs	r1, r0, r1
    6848:	movwne	r1, #1
    684c:	cmp	r3, r2
    6850:	bhi	6a7c <coda_cursor_read_int32_partial_array+0x404>
    6854:	cmp	r1, #0
    6858:	bne	6a7c <coda_cursor_read_int32_partial_array+0x404>
    685c:	add	r1, r4, r0
    6860:	cmp	r0, r1
    6864:	bhi	6a7c <coda_cursor_read_int32_partial_array+0x404>
    6868:	add	r2, r4, r8
    686c:	add	r1, r4, r8, lsl #2
    6870:	cmp	r2, r4
    6874:	cmphi	r1, r4
    6878:	bhi	6a7c <coda_cursor_read_int32_partial_array+0x404>
    687c:	bic	ip, r8, #3
    6880:	sub	r3, r1, #16
    6884:	sub	r2, r2, #4
    6888:	add	r7, sp, #4
    688c:	mvn	r6, #15
    6890:	sub	r0, r8, ip
    6894:	mov	r1, ip
    6898:	ldr	r5, [r2], #-4
    689c:	subs	r1, r1, #4
    68a0:	str	r5, [sp, #4]
    68a4:	vld1.32	{d16[0]}, [r7 :32]
    68a8:	vmovl.u8	q8, d16
    68ac:	vrev64.16	d16, d16
    68b0:	vmovl.u16	q8, d16
    68b4:	vshl.s32	q8, q8, #24
    68b8:	vshr.s32	q8, q8, #24
    68bc:	vrev64.32	q8, q8
    68c0:	vext.8	q8, q8, q8, #8
    68c4:	vst1.32	{d16-d17}, [r3], r6
    68c8:	bne	6898 <coda_cursor_read_int32_partial_array+0x220>
    68cc:	cmp	ip, r8
    68d0:	bne	6a80 <coda_cursor_read_int32_partial_array+0x408>
    68d4:	b	6bac <coda_cursor_read_int32_partial_array+0x534>
    68d8:	bl	0 <coda_type_get_native_type_name>
    68dc:	movw	r1, #0
    68e0:	mov	r2, r0
    68e4:	movt	r1, #0
    68e8:	b	6790 <coda_cursor_read_int32_partial_array+0x118>
    68ec:	movw	r1, #0
    68f0:	mvn	r0, #106	; 0x6a
    68f4:	mov	r2, r6
    68f8:	movt	r1, #0
    68fc:	b	6758 <coda_cursor_read_int32_partial_array+0xe0>
    6900:	mov	r0, r7
    6904:	mov	r1, r6
    6908:	mov	r2, r8
    690c:	mov	r3, r4
    6910:	bl	5e00 <read_uint8_partial_array>
    6914:	mov	r1, r0
    6918:	mvn	r0, #0
    691c:	cmp	r1, #0
    6920:	bne	6bb0 <coda_cursor_read_int32_partial_array+0x538>
    6924:	cmp	r8, #1
    6928:	blt	6bac <coda_cursor_read_int32_partial_array+0x534>
    692c:	cmp	r8, #4
    6930:	bcc	6aa4 <coda_cursor_read_int32_partial_array+0x42c>
    6934:	sub	r0, r8, #1
    6938:	bic	r1, r0, #-1073741824	; 0xc0000000
    693c:	add	r2, r4, r0, lsl #2
    6940:	lsl	r3, r0, #2
    6944:	subs	r1, r0, r1
    6948:	movwne	r1, #1
    694c:	cmp	r3, r2
    6950:	bhi	6aa4 <coda_cursor_read_int32_partial_array+0x42c>
    6954:	cmp	r1, #0
    6958:	bne	6aa4 <coda_cursor_read_int32_partial_array+0x42c>
    695c:	add	r1, r4, r0
    6960:	cmp	r0, r1
    6964:	bhi	6aa4 <coda_cursor_read_int32_partial_array+0x42c>
    6968:	add	r2, r4, r8
    696c:	add	r1, r4, r8, lsl #2
    6970:	cmp	r2, r4
    6974:	cmphi	r1, r4
    6978:	bhi	6aa4 <coda_cursor_read_int32_partial_array+0x42c>
    697c:	vmov.i32	q8, #255	; 0x000000ff
    6980:	bic	ip, r8, #3
    6984:	sub	r3, r1, #16
    6988:	sub	r2, r2, #4
    698c:	add	r7, sp, #8
    6990:	mvn	r6, #15
    6994:	sub	r0, r8, ip
    6998:	mov	r1, ip
    699c:	ldr	r5, [r2], #-4
    69a0:	subs	r1, r1, #4
    69a4:	str	r5, [sp, #8]
    69a8:	vld1.32	{d18[0]}, [r7 :32]
    69ac:	vmovl.u8	q9, d18
    69b0:	vrev64.16	d18, d18
    69b4:	vmovl.u16	q9, d18
    69b8:	vand	q9, q9, q8
    69bc:	vrev64.32	q9, q9
    69c0:	vext.8	q9, q9, q9, #8
    69c4:	vst1.32	{d18-d19}, [r3], r6
    69c8:	bne	699c <coda_cursor_read_int32_partial_array+0x324>
    69cc:	cmp	ip, r8
    69d0:	bne	6aa8 <coda_cursor_read_int32_partial_array+0x430>
    69d4:	b	6bac <coda_cursor_read_int32_partial_array+0x534>
    69d8:	mov	r0, r7
    69dc:	mov	r1, r6
    69e0:	mov	r2, r8
    69e4:	mov	r3, r4
    69e8:	bl	625c <read_int16_partial_array>
    69ec:	mov	r1, r0
    69f0:	mvn	r0, #0
    69f4:	cmp	r1, #0
    69f8:	bne	6bb0 <coda_cursor_read_int32_partial_array+0x538>
    69fc:	cmp	r8, #1
    6a00:	blt	6bac <coda_cursor_read_int32_partial_array+0x534>
    6a04:	cmp	r8, #4
    6a08:	bcs	6ac8 <coda_cursor_read_int32_partial_array+0x450>
    6a0c:	mov	r0, r8
    6a10:	b	6b14 <coda_cursor_read_int32_partial_array+0x49c>
    6a14:	mov	r0, r7
    6a18:	mov	r1, r6
    6a1c:	mov	r2, r8
    6a20:	mov	r3, r4
    6a24:	bl	65d0 <read_uint16_partial_array>
    6a28:	mov	r1, r0
    6a2c:	mvn	r0, #0
    6a30:	cmp	r1, #0
    6a34:	bne	6bb0 <coda_cursor_read_int32_partial_array+0x538>
    6a38:	cmp	r8, #1
    6a3c:	blt	6bac <coda_cursor_read_int32_partial_array+0x534>
    6a40:	cmp	r8, #4
    6a44:	bcs	6b3c <coda_cursor_read_int32_partial_array+0x4c4>
    6a48:	mov	r0, r8
    6a4c:	b	6b88 <coda_cursor_read_int32_partial_array+0x510>
    6a50:	mov	r0, r7
    6a54:	mov	r1, r6
    6a58:	mov	r2, r8
    6a5c:	mov	r3, r4
    6a60:	bl	6bc0 <read_int32_partial_array>
    6a64:	mov	r1, r0
    6a68:	mvn	r0, #0
    6a6c:	cmp	r1, #0
    6a70:	moveq	r0, #0
    6a74:	sub	sp, fp, #24
    6a78:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
    6a7c:	mov	r0, r8
    6a80:	sub	r0, r0, #1
    6a84:	add	r1, r4, r0
    6a88:	cmp	r0, #0
    6a8c:	ldrsb	r1, [r1]
    6a90:	str	r1, [r4, r0, lsl #2]
    6a94:	sub	r1, r0, #1
    6a98:	mov	r0, r1
    6a9c:	bgt	6a84 <coda_cursor_read_int32_partial_array+0x40c>
    6aa0:	b	6bac <coda_cursor_read_int32_partial_array+0x534>
    6aa4:	mov	r0, r8
    6aa8:	sub	r0, r0, #1
    6aac:	ldrb	r1, [r4, r0]
    6ab0:	cmp	r0, #0
    6ab4:	str	r1, [r4, r0, lsl #2]
    6ab8:	sub	r1, r0, #1
    6abc:	mov	r0, r1
    6ac0:	bgt	6aac <coda_cursor_read_int32_partial_array+0x434>
    6ac4:	b	6bac <coda_cursor_read_int32_partial_array+0x534>
    6ac8:	add	r1, r4, r8, lsl #1
    6acc:	bic	r5, r8, #3
    6ad0:	mvn	r7, #7
    6ad4:	mvn	r6, #15
    6ad8:	sub	r0, r8, r5
    6adc:	sub	r2, r1, #8
    6ae0:	add	r1, r4, r8, lsl #2
    6ae4:	sub	r3, r1, #16
    6ae8:	mov	r1, r5
    6aec:	vld1.16	{d16}, [r2], r7
    6af0:	subs	r1, r1, #4
    6af4:	vrev64.16	d16, d16
    6af8:	vmovl.s16	q8, d16
    6afc:	vrev64.32	q8, q8
    6b00:	vext.8	q8, q8, q8, #8
    6b04:	vst1.32	{d16-d17}, [r3], r6
    6b08:	bne	6aec <coda_cursor_read_int32_partial_array+0x474>
    6b0c:	cmp	r5, r8
    6b10:	beq	6bac <coda_cursor_read_int32_partial_array+0x534>
    6b14:	mvn	r1, #1
    6b18:	add	r1, r1, r0, lsl #1
    6b1c:	add	r2, r4, r1
    6b20:	sub	r0, r0, #1
    6b24:	ldrsh	r2, [r2]
    6b28:	cmp	r0, #0
    6b2c:	str	r2, [r4, r1, lsl #1]
    6b30:	sub	r1, r1, #2
    6b34:	bgt	6b1c <coda_cursor_read_int32_partial_array+0x4a4>
    6b38:	b	6bac <coda_cursor_read_int32_partial_array+0x534>
    6b3c:	add	r1, r4, r8, lsl #1
    6b40:	bic	r5, r8, #3
    6b44:	mvn	r7, #7
    6b48:	mvn	r6, #15
    6b4c:	sub	r0, r8, r5
    6b50:	sub	r2, r1, #8
    6b54:	add	r1, r4, r8, lsl #2
    6b58:	sub	r3, r1, #16
    6b5c:	mov	r1, r5
    6b60:	vld1.16	{d16}, [r2], r7
    6b64:	subs	r1, r1, #4
    6b68:	vrev64.16	d16, d16
    6b6c:	vmovl.u16	q8, d16
    6b70:	vrev64.32	q8, q8
    6b74:	vext.8	q8, q8, q8, #8
    6b78:	vst1.32	{d16-d17}, [r3], r6
    6b7c:	bne	6b60 <coda_cursor_read_int32_partial_array+0x4e8>
    6b80:	cmp	r5, r8
    6b84:	beq	6bac <coda_cursor_read_int32_partial_array+0x534>
    6b88:	mvn	r1, #1
    6b8c:	add	r1, r1, r0, lsl #1
    6b90:	add	r2, r4, r1
    6b94:	sub	r0, r0, #1
    6b98:	ldrh	r2, [r2]
    6b9c:	cmp	r0, #0
    6ba0:	str	r2, [r4, r1, lsl #1]
    6ba4:	sub	r1, r1, #2
    6ba8:	bgt	6b90 <coda_cursor_read_int32_partial_array+0x518>
    6bac:	mov	r0, #0
    6bb0:	sub	sp, fp, #24
    6bb4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
    6bb8:	.word	0x000004d4
    6bbc:	.word	0x000003fc

00006bc0 <read_int32_partial_array>:
    6bc0:	push	{fp, lr}
    6bc4:	mov	fp, sp
    6bc8:	ldr	ip, [r0, #4]
    6bcc:	add	ip, r0, ip, lsl #4
    6bd0:	ldr	ip, [ip, #-8]
    6bd4:	ldr	ip, [ip]
    6bd8:	sub	lr, ip, #100	; 0x64
    6bdc:	cmp	lr, #4
    6be0:	bhi	6c08 <read_int32_partial_array+0x48>
    6be4:	add	ip, pc, #0
    6be8:	ldr	pc, [ip, lr, lsl #2]
    6bec:	.word	0x00006c00
    6bf0:	.word	0x00006c38
    6bf4:	.word	0x00006c28
    6bf8:	.word	0x00006c30
    6bfc:	.word	0x00006c20
    6c00:	pop	{fp, lr}
    6c04:	b	0 <coda_mem_cursor_read_int32_partial_array>
    6c08:	cmp	ip, #1
    6c0c:	beq	6c4c <read_int32_partial_array+0x8c>
    6c10:	cmp	ip, #0
    6c14:	bne	6c54 <read_int32_partial_array+0x94>
    6c18:	pop	{fp, lr}
    6c1c:	b	0 <coda_ascii_cursor_read_int32_partial_array>
    6c20:	pop	{fp, lr}
    6c24:	b	0 <coda_netcdf_cursor_read_int32_partial_array>
    6c28:	mvn	r0, #12
    6c2c:	b	6c3c <read_int32_partial_array+0x7c>
    6c30:	pop	{fp, lr}
    6c34:	b	0 <coda_cdf_cursor_read_int32_partial_array>
    6c38:	mvn	r0, #10
    6c3c:	mov	r1, #0
    6c40:	bl	0 <coda_set_error>
    6c44:	mvn	r0, #0
    6c48:	pop	{fp, pc}
    6c4c:	pop	{fp, lr}
    6c50:	b	0 <coda_bin_cursor_read_int32_partial_array>
    6c54:	movw	r0, #0
    6c58:	movw	r1, #0
    6c5c:	movw	r3, #0
    6c60:	movw	r2, #1534	; 0x5fe
    6c64:	movt	r0, #0
    6c68:	movt	r1, #0
    6c6c:	movt	r3, #0
    6c70:	bl	0 <__assert_fail>

00006c74 <coda_cursor_read_uint32_partial_array>:
    6c74:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
    6c78:	add	fp, sp, #24
    6c7c:	sub	sp, sp, #16
    6c80:	cmp	r0, #0
    6c84:	beq	6d3c <coda_cursor_read_uint32_partial_array+0xc8>
    6c88:	mov	r7, r0
    6c8c:	ldr	r0, [r0, #4]
    6c90:	cmp	r0, #1
    6c94:	blt	6d3c <coda_cursor_read_uint32_partial_array+0xc8>
    6c98:	add	r0, r7, r0, lsl #4
    6c9c:	ldr	r5, [r0, #-8]
    6ca0:	cmp	r5, #0
    6ca4:	beq	6d3c <coda_cursor_read_uint32_partial_array+0xc8>
    6ca8:	mov	r4, r3
    6cac:	cmp	r3, #0
    6cb0:	beq	6d64 <coda_cursor_read_uint32_partial_array+0xf0>
    6cb4:	ldr	r0, [r5]
    6cb8:	mov	r8, r2
    6cbc:	mov	r6, r1
    6cc0:	cmp	r0, #99	; 0x63
    6cc4:	ldrhi	r5, [r5, #4]
    6cc8:	ldr	r0, [r5, #8]
    6ccc:	cmp	r0, #1
    6cd0:	bne	6d7c <coda_cursor_read_uint32_partial_array+0x108>
    6cd4:	ldr	r0, [pc, #796]	; 6ff8 <coda_cursor_read_uint32_partial_array+0x384>
    6cd8:	ldr	r1, [pc, r0]
    6cdc:	bl	0 <__aeabi_read_tp>
    6ce0:	ldr	r0, [r0, r1]
    6ce4:	cmp	r0, #0
    6ce8:	beq	6d98 <coda_cursor_read_uint32_partial_array+0x124>
    6cec:	add	r1, sp, #12
    6cf0:	mov	r0, r7
    6cf4:	bl	0 <coda_cursor_get_num_elements>
    6cf8:	cmp	r0, #0
    6cfc:	bne	6d58 <coda_cursor_read_uint32_partial_array+0xe4>
    6d00:	ldr	r3, [sp, #12]
    6d04:	cmp	r6, #0
    6d08:	bmi	6edc <coda_cursor_read_uint32_partial_array+0x268>
    6d0c:	cmp	r3, r6
    6d10:	ble	6edc <coda_cursor_read_uint32_partial_array+0x268>
    6d14:	add	r0, r8, r6
    6d18:	cmp	r0, r3
    6d1c:	ble	6d98 <coda_cursor_read_uint32_partial_array+0x124>
    6d20:	movw	r1, #0
    6d24:	str	r3, [sp]
    6d28:	mvn	r0, #106	; 0x6a
    6d2c:	mov	r2, r6
    6d30:	mov	r3, r8
    6d34:	movt	r1, #0
    6d38:	b	6d54 <coda_cursor_read_uint32_partial_array+0xe0>
    6d3c:	movw	r1, #0
    6d40:	movw	r2, #0
    6d44:	mvn	r0, #99	; 0x63
    6d48:	movw	r3, #4714	; 0x126a
    6d4c:	movt	r1, #0
    6d50:	movt	r2, #0
    6d54:	bl	0 <coda_set_error>
    6d58:	mvn	r0, #0
    6d5c:	sub	sp, fp, #24
    6d60:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
    6d64:	movw	r1, #0
    6d68:	movw	r2, #0
    6d6c:	mvn	r0, #99	; 0x63
    6d70:	movw	r3, #4719	; 0x126f
    6d74:	movt	r1, #0
    6d78:	b	6d50 <coda_cursor_read_uint32_partial_array+0xdc>
    6d7c:	bl	0 <coda_type_get_class_name>
    6d80:	movw	r1, #0
    6d84:	mov	r2, r0
    6d88:	movt	r1, #0
    6d8c:	mvn	r0, #104	; 0x68
    6d90:	bl	0 <coda_set_error>
    6d94:	b	6d58 <coda_cursor_read_uint32_partial_array+0xe4>
    6d98:	bl	0 <__aeabi_read_tp>
    6d9c:	ldr	r1, [r5, #40]	; 0x28
    6da0:	ldr	r2, [r1, #8]
    6da4:	bic	r2, r2, #1
    6da8:	cmp	r2, #2
    6dac:	bne	6dd4 <coda_cursor_read_uint32_partial_array+0x160>
    6db0:	ldr	r2, [pc, #580]	; 6ffc <coda_cursor_read_uint32_partial_array+0x388>
    6db4:	ldr	r2, [pc, r2]
    6db8:	ldr	r0, [r0, r2]
    6dbc:	cmp	r0, #0
    6dc0:	beq	6dd4 <coda_cursor_read_uint32_partial_array+0x160>
    6dc4:	ldr	r2, [r1, #48]	; 0x30
    6dc8:	mov	r0, #9
    6dcc:	cmp	r2, #0
    6dd0:	bne	6ec8 <coda_cursor_read_uint32_partial_array+0x254>
    6dd4:	ldr	r0, [r1, #12]
    6dd8:	cmp	r0, #5
    6ddc:	beq	6ef0 <coda_cursor_read_uint32_partial_array+0x27c>
    6de0:	cmp	r0, #3
    6de4:	beq	6f1c <coda_cursor_read_uint32_partial_array+0x2a8>
    6de8:	cmp	r0, #1
    6dec:	bne	6ec8 <coda_cursor_read_uint32_partial_array+0x254>
    6df0:	mov	r0, r7
    6df4:	mov	r1, r6
    6df8:	mov	r2, r8
    6dfc:	mov	r3, r4
    6e00:	bl	5e00 <read_uint8_partial_array>
    6e04:	mov	r1, r0
    6e08:	mvn	r0, #0
    6e0c:	cmp	r1, #0
    6e10:	bne	6ff0 <coda_cursor_read_uint32_partial_array+0x37c>
    6e14:	cmp	r8, #1
    6e18:	blt	6fec <coda_cursor_read_uint32_partial_array+0x378>
    6e1c:	cmp	r8, #4
    6e20:	bcc	6f58 <coda_cursor_read_uint32_partial_array+0x2e4>
    6e24:	sub	r0, r8, #1
    6e28:	bic	r1, r0, #-1073741824	; 0xc0000000
    6e2c:	add	r2, r4, r0, lsl #2
    6e30:	lsl	r3, r0, #2
    6e34:	subs	r1, r0, r1
    6e38:	movwne	r1, #1
    6e3c:	cmp	r3, r2
    6e40:	bhi	6f58 <coda_cursor_read_uint32_partial_array+0x2e4>
    6e44:	cmp	r1, #0
    6e48:	bne	6f58 <coda_cursor_read_uint32_partial_array+0x2e4>
    6e4c:	add	r1, r4, r0
    6e50:	cmp	r0, r1
    6e54:	bhi	6f58 <coda_cursor_read_uint32_partial_array+0x2e4>
    6e58:	add	r2, r4, r8
    6e5c:	add	r1, r4, r8, lsl #2
    6e60:	cmp	r2, r4
    6e64:	cmphi	r1, r4
    6e68:	bhi	6f58 <coda_cursor_read_uint32_partial_array+0x2e4>
    6e6c:	vmov.i32	q8, #255	; 0x000000ff
    6e70:	bic	ip, r8, #3
    6e74:	sub	r3, r1, #16
    6e78:	sub	r2, r2, #4
    6e7c:	add	r7, sp, #8
    6e80:	mvn	r6, #15
    6e84:	sub	r0, r8, ip
    6e88:	mov	r1, ip
    6e8c:	ldr	r5, [r2], #-4
    6e90:	subs	r1, r1, #4
    6e94:	str	r5, [sp, #8]
    6e98:	vld1.32	{d18[0]}, [r7 :32]
    6e9c:	vmovl.u8	q9, d18
    6ea0:	vrev64.16	d18, d18
    6ea4:	vmovl.u16	q9, d18
    6ea8:	vand	q9, q9, q8
    6eac:	vrev64.32	q9, q9
    6eb0:	vext.8	q9, q9, q9, #8
    6eb4:	vst1.32	{d18-d19}, [r3], r6
    6eb8:	bne	6e8c <coda_cursor_read_uint32_partial_array+0x218>
    6ebc:	cmp	ip, r8
    6ec0:	bne	6f5c <coda_cursor_read_uint32_partial_array+0x2e8>
    6ec4:	b	6fec <coda_cursor_read_uint32_partial_array+0x378>
    6ec8:	bl	0 <coda_type_get_native_type_name>
    6ecc:	movw	r1, #0
    6ed0:	mov	r2, r0
    6ed4:	movt	r1, #0
    6ed8:	b	6d8c <coda_cursor_read_uint32_partial_array+0x118>
    6edc:	movw	r1, #0
    6ee0:	mvn	r0, #106	; 0x6a
    6ee4:	mov	r2, r6
    6ee8:	movt	r1, #0
    6eec:	b	6d54 <coda_cursor_read_uint32_partial_array+0xe0>
    6ef0:	mov	r0, r7
    6ef4:	mov	r1, r6
    6ef8:	mov	r2, r8
    6efc:	mov	r3, r4
    6f00:	bl	7000 <read_uint32_partial_array>
    6f04:	mov	r1, r0
    6f08:	mvn	r0, #0
    6f0c:	cmp	r1, #0
    6f10:	moveq	r0, #0
    6f14:	sub	sp, fp, #24
    6f18:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
    6f1c:	mov	r0, r7
    6f20:	mov	r1, r6
    6f24:	mov	r2, r8
    6f28:	mov	r3, r4
    6f2c:	bl	65d0 <read_uint16_partial_array>
    6f30:	mov	r1, r0
    6f34:	mvn	r0, #0
    6f38:	cmp	r1, #0
    6f3c:	bne	6ff0 <coda_cursor_read_uint32_partial_array+0x37c>
    6f40:	cmp	r8, #1
    6f44:	blt	6fec <coda_cursor_read_uint32_partial_array+0x378>
    6f48:	cmp	r8, #4
    6f4c:	bcs	6f7c <coda_cursor_read_uint32_partial_array+0x308>
    6f50:	mov	r0, r8
    6f54:	b	6fc8 <coda_cursor_read_uint32_partial_array+0x354>
    6f58:	mov	r0, r8
    6f5c:	sub	r0, r0, #1
    6f60:	ldrb	r1, [r4, r0]
    6f64:	cmp	r0, #0
    6f68:	str	r1, [r4, r0, lsl #2]
    6f6c:	sub	r1, r0, #1
    6f70:	mov	r0, r1
    6f74:	bgt	6f60 <coda_cursor_read_uint32_partial_array+0x2ec>
    6f78:	b	6fec <coda_cursor_read_uint32_partial_array+0x378>
    6f7c:	add	r1, r4, r8, lsl #1
    6f80:	bic	r5, r8, #3
    6f84:	mvn	r7, #7
    6f88:	mvn	r6, #15
    6f8c:	sub	r0, r8, r5
    6f90:	sub	r2, r1, #8
    6f94:	add	r1, r4, r8, lsl #2
    6f98:	sub	r3, r1, #16
    6f9c:	mov	r1, r5
    6fa0:	vld1.16	{d16}, [r2], r7
    6fa4:	subs	r1, r1, #4
    6fa8:	vrev64.16	d16, d16
    6fac:	vmovl.u16	q8, d16
    6fb0:	vrev64.32	q8, q8
    6fb4:	vext.8	q8, q8, q8, #8
    6fb8:	vst1.32	{d16-d17}, [r3], r6
    6fbc:	bne	6fa0 <coda_cursor_read_uint32_partial_array+0x32c>
    6fc0:	cmp	r5, r8
    6fc4:	beq	6fec <coda_cursor_read_uint32_partial_array+0x378>
    6fc8:	mvn	r1, #1
    6fcc:	add	r1, r1, r0, lsl #1
    6fd0:	add	r2, r4, r1
    6fd4:	sub	r0, r0, #1
    6fd8:	ldrh	r2, [r2]
    6fdc:	cmp	r0, #0
    6fe0:	str	r2, [r4, r1, lsl #1]
    6fe4:	sub	r1, r1, #2
    6fe8:	bgt	6fd0 <coda_cursor_read_uint32_partial_array+0x35c>
    6fec:	mov	r0, #0
    6ff0:	sub	sp, fp, #24
    6ff4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
    6ff8:	.word	0x00000318
    6ffc:	.word	0x00000240

00007000 <read_uint32_partial_array>:
    7000:	push	{fp, lr}
    7004:	mov	fp, sp
    7008:	ldr	ip, [r0, #4]
    700c:	add	ip, r0, ip, lsl #4
    7010:	ldr	ip, [ip, #-8]
    7014:	ldr	ip, [ip]
    7018:	sub	lr, ip, #100	; 0x64
    701c:	cmp	lr, #3
    7020:	bhi	7044 <read_uint32_partial_array+0x44>
    7024:	add	ip, pc, #0
    7028:	ldr	pc, [ip, lr, lsl #2]
    702c:	.word	0x0000703c
    7030:	.word	0x00007064
    7034:	.word	0x0000705c
    7038:	.word	0x00007078
    703c:	pop	{fp, lr}
    7040:	b	0 <coda_mem_cursor_read_uint32_partial_array>
    7044:	cmp	ip, #1
    7048:	beq	7080 <read_uint32_partial_array+0x80>
    704c:	cmp	ip, #0
    7050:	bne	7088 <read_uint32_partial_array+0x88>
    7054:	pop	{fp, lr}
    7058:	b	0 <coda_ascii_cursor_read_uint32_partial_array>
    705c:	mvn	r0, #12
    7060:	b	7068 <read_uint32_partial_array+0x68>
    7064:	mvn	r0, #10
    7068:	mov	r1, #0
    706c:	bl	0 <coda_set_error>
    7070:	mvn	r0, #0
    7074:	pop	{fp, pc}
    7078:	pop	{fp, lr}
    707c:	b	0 <coda_cdf_cursor_read_uint32_partial_array>
    7080:	pop	{fp, lr}
    7084:	b	0 <coda_bin_cursor_read_uint32_partial_array>
    7088:	movw	r0, #0
    708c:	movw	r1, #0
    7090:	movw	r3, #0
    7094:	movw	r2, #1569	; 0x621
    7098:	movt	r0, #0
    709c:	movt	r1, #0
    70a0:	movt	r3, #0
    70a4:	bl	0 <__assert_fail>

000070a8 <coda_cursor_read_int64_partial_array>:
    70a8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
    70ac:	add	fp, sp, #24
    70b0:	sub	sp, sp, #24
    70b4:	cmp	r0, #0
    70b8:	beq	7170 <coda_cursor_read_int64_partial_array+0xc8>
    70bc:	mov	r7, r0
    70c0:	ldr	r0, [r0, #4]
    70c4:	cmp	r0, #1
    70c8:	blt	7170 <coda_cursor_read_int64_partial_array+0xc8>
    70cc:	add	r0, r7, r0, lsl #4
    70d0:	ldr	r5, [r0, #-8]
    70d4:	cmp	r5, #0
    70d8:	beq	7170 <coda_cursor_read_int64_partial_array+0xc8>
    70dc:	mov	r4, r3
    70e0:	cmp	r3, #0
    70e4:	beq	7198 <coda_cursor_read_int64_partial_array+0xf0>
    70e8:	ldr	r0, [r5]
    70ec:	mov	r8, r2
    70f0:	mov	r6, r1
    70f4:	cmp	r0, #99	; 0x63
    70f8:	ldrhi	r5, [r5, #4]
    70fc:	ldr	r0, [r5, #8]
    7100:	cmp	r0, #1
    7104:	bne	71b0 <coda_cursor_read_int64_partial_array+0x108>
    7108:	ldr	r0, [pc, #1692]	; 77ac <coda_cursor_read_int64_partial_array+0x704>
    710c:	ldr	r1, [pc, r0]
    7110:	bl	0 <__aeabi_read_tp>
    7114:	ldr	r0, [r0, r1]
    7118:	cmp	r0, #0
    711c:	beq	71cc <coda_cursor_read_int64_partial_array+0x124>
    7120:	add	r1, sp, #20
    7124:	mov	r0, r7
    7128:	bl	0 <coda_cursor_get_num_elements>
    712c:	cmp	r0, #0
    7130:	bne	718c <coda_cursor_read_int64_partial_array+0xe4>
    7134:	ldr	r3, [sp, #20]
    7138:	cmp	r6, #0
    713c:	bmi	7328 <coda_cursor_read_int64_partial_array+0x280>
    7140:	cmp	r3, r6
    7144:	ble	7328 <coda_cursor_read_int64_partial_array+0x280>
    7148:	add	r0, r8, r6
    714c:	cmp	r0, r3
    7150:	ble	71cc <coda_cursor_read_int64_partial_array+0x124>
    7154:	movw	r1, #0
    7158:	str	r3, [sp]
    715c:	mvn	r0, #106	; 0x6a
    7160:	mov	r2, r6
    7164:	mov	r3, r8
    7168:	movt	r1, #0
    716c:	b	7188 <coda_cursor_read_int64_partial_array+0xe0>
    7170:	movw	r1, #0
    7174:	movw	r2, #0
    7178:	mvn	r0, #99	; 0x63
    717c:	movw	r3, #4827	; 0x12db
    7180:	movt	r1, #0
    7184:	movt	r2, #0
    7188:	bl	0 <coda_set_error>
    718c:	mvn	r0, #0
    7190:	sub	sp, fp, #24
    7194:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
    7198:	movw	r1, #0
    719c:	movw	r2, #0
    71a0:	mvn	r0, #99	; 0x63
    71a4:	movw	r3, #4832	; 0x12e0
    71a8:	movt	r1, #0
    71ac:	b	7184 <coda_cursor_read_int64_partial_array+0xdc>
    71b0:	bl	0 <coda_type_get_class_name>
    71b4:	movw	r1, #0
    71b8:	mov	r2, r0
    71bc:	movt	r1, #0
    71c0:	mvn	r0, #104	; 0x68
    71c4:	bl	0 <coda_set_error>
    71c8:	b	718c <coda_cursor_read_int64_partial_array+0xe4>
    71cc:	bl	0 <__aeabi_read_tp>
    71d0:	ldr	r1, [r5, #40]	; 0x28
    71d4:	ldr	r2, [r1, #8]
    71d8:	bic	r2, r2, #1
    71dc:	cmp	r2, #2
    71e0:	bne	7208 <coda_cursor_read_int64_partial_array+0x160>
    71e4:	ldr	r2, [pc, #1476]	; 77b0 <coda_cursor_read_int64_partial_array+0x708>
    71e8:	ldr	r2, [pc, r2]
    71ec:	ldr	r0, [r0, r2]
    71f0:	cmp	r0, #0
    71f4:	beq	7208 <coda_cursor_read_int64_partial_array+0x160>
    71f8:	ldr	r2, [r1, #48]	; 0x30
    71fc:	mov	r0, #9
    7200:	cmp	r2, #0
    7204:	bne	7314 <coda_cursor_read_int64_partial_array+0x26c>
    7208:	ldr	r0, [r1, #12]
    720c:	cmp	r0, #6
    7210:	bhi	7314 <coda_cursor_read_int64_partial_array+0x26c>
    7214:	add	r1, pc, #0
    7218:	ldr	pc, [r1, r0, lsl #2]
    721c:	.word	0x00007238
    7220:	.word	0x0000733c
    7224:	.word	0x00007418
    7228:	.word	0x00007450
    722c:	.word	0x00007488
    7230:	.word	0x000074c0
    7234:	.word	0x000074f8
    7238:	mov	r0, r7
    723c:	mov	r1, r6
    7240:	mov	r2, r8
    7244:	mov	r3, r4
    7248:	bl	5b8c <read_int8_partial_array>
    724c:	mov	r1, r0
    7250:	mvn	r0, #0
    7254:	cmp	r1, #0
    7258:	bne	77a4 <coda_cursor_read_int64_partial_array+0x6fc>
    725c:	cmp	r8, #1
    7260:	blt	77a0 <coda_cursor_read_int64_partial_array+0x6f8>
    7264:	beq	7524 <coda_cursor_read_int64_partial_array+0x47c>
    7268:	sub	r0, r8, #1
    726c:	bic	r1, r0, #-536870912	; 0xe0000000
    7270:	add	r2, r4, r0, lsl #3
    7274:	lsl	r3, r0, #3
    7278:	subs	r1, r0, r1
    727c:	movwne	r1, #1
    7280:	cmp	r3, r2
    7284:	bhi	7524 <coda_cursor_read_int64_partial_array+0x47c>
    7288:	cmp	r1, #0
    728c:	bne	7524 <coda_cursor_read_int64_partial_array+0x47c>
    7290:	add	r1, r4, r0
    7294:	cmp	r0, r1
    7298:	bhi	7524 <coda_cursor_read_int64_partial_array+0x47c>
    729c:	add	r0, r4, r8
    72a0:	cmp	r0, r4
    72a4:	addhi	r0, r4, r8, lsl #3
    72a8:	cmphi	r0, r4
    72ac:	bhi	7524 <coda_cursor_read_int64_partial_array+0x47c>
    72b0:	sub	r0, r8, #2
    72b4:	bic	ip, r8, #1
    72b8:	add	r7, sp, #4
    72bc:	mvn	r6, #15
    72c0:	add	r3, r4, r0, lsl #3
    72c4:	add	r1, r4, r0
    72c8:	sub	r0, r8, ip
    72cc:	mov	r2, ip
    72d0:	ldrh	r5, [r1], #-2
    72d4:	subs	r2, r2, #2
    72d8:	strh	r5, [sp, #4]
    72dc:	vld1.16	{d16[0]}, [r7 :16]
    72e0:	vmovl.u8	q8, d16
    72e4:	vmovl.u16	q8, d16
    72e8:	vrev64.32	d16, d16
    72ec:	vmovl.u32	q8, d16
    72f0:	vshl.s64	q8, q8, #56	; 0x38
    72f4:	vshr.s64	q8, q8, #56
    72f8:	vorr	d18, d17, d17
    72fc:	vorr	d19, d16, d16
    7300:	vst1.64	{d18-d19}, [r3], r6
    7304:	bne	72d0 <coda_cursor_read_int64_partial_array+0x228>
    7308:	cmp	ip, r8
    730c:	bne	7528 <coda_cursor_read_int64_partial_array+0x480>
    7310:	b	77a0 <coda_cursor_read_int64_partial_array+0x6f8>
    7314:	bl	0 <coda_type_get_native_type_name>
    7318:	movw	r1, #0
    731c:	mov	r2, r0
    7320:	movt	r1, #0
    7324:	b	71c0 <coda_cursor_read_int64_partial_array+0x118>
    7328:	movw	r1, #0
    732c:	mvn	r0, #106	; 0x6a
    7330:	mov	r2, r6
    7334:	movt	r1, #0
    7338:	b	7188 <coda_cursor_read_int64_partial_array+0xe0>
    733c:	mov	r0, r7
    7340:	mov	r1, r6
    7344:	mov	r2, r8
    7348:	mov	r3, r4
    734c:	bl	5e00 <read_uint8_partial_array>
    7350:	mov	r1, r0
    7354:	mvn	r0, #0
    7358:	cmp	r1, #0
    735c:	bne	77a4 <coda_cursor_read_int64_partial_array+0x6fc>
    7360:	cmp	r8, #1
    7364:	blt	77a0 <coda_cursor_read_int64_partial_array+0x6f8>
    7368:	beq	7558 <coda_cursor_read_int64_partial_array+0x4b0>
    736c:	sub	r0, r8, #1
    7370:	bic	r1, r0, #-536870912	; 0xe0000000
    7374:	add	r2, r4, r0, lsl #3
    7378:	lsl	r3, r0, #3
    737c:	subs	r1, r0, r1
    7380:	movwne	r1, #1
    7384:	cmp	r3, r2
    7388:	bhi	7558 <coda_cursor_read_int64_partial_array+0x4b0>
    738c:	cmp	r1, #0
    7390:	bne	7558 <coda_cursor_read_int64_partial_array+0x4b0>
    7394:	add	r1, r4, r0
    7398:	cmp	r0, r1
    739c:	bhi	7558 <coda_cursor_read_int64_partial_array+0x4b0>
    73a0:	add	r0, r4, r8
    73a4:	cmp	r0, r4
    73a8:	addhi	r0, r4, r8, lsl #3
    73ac:	cmphi	r0, r4
    73b0:	bhi	7558 <coda_cursor_read_int64_partial_array+0x4b0>
    73b4:	sub	r0, r8, #2
    73b8:	vmov.i64	q8, #0x00000000000000ff
    73bc:	bic	ip, r8, #1
    73c0:	add	r7, sp, #8
    73c4:	mvn	r6, #15
    73c8:	add	r3, r4, r0, lsl #3
    73cc:	add	r1, r4, r0
    73d0:	sub	r0, r8, ip
    73d4:	mov	r2, ip
    73d8:	ldrh	r5, [r1], #-2
    73dc:	subs	r2, r2, #2
    73e0:	strh	r5, [sp, #8]
    73e4:	vld1.16	{d18[0]}, [r7 :16]
    73e8:	vmovl.u8	q9, d18
    73ec:	vmovl.u16	q9, d18
    73f0:	vrev64.32	d18, d18
    73f4:	vmovl.u32	q9, d18
    73f8:	vand	q9, q9, q8
    73fc:	vorr	d20, d19, d19
    7400:	vorr	d21, d18, d18
    7404:	vst1.64	{d20-d21}, [r3], r6
    7408:	bne	73d8 <coda_cursor_read_int64_partial_array+0x330>
    740c:	cmp	ip, r8
    7410:	bne	755c <coda_cursor_read_int64_partial_array+0x4b4>
    7414:	b	77a0 <coda_cursor_read_int64_partial_array+0x6f8>
    7418:	mov	r0, r7
    741c:	mov	r1, r6
    7420:	mov	r2, r8
    7424:	mov	r3, r4
    7428:	bl	625c <read_int16_partial_array>
    742c:	mov	r1, r0
    7430:	mvn	r0, #0
    7434:	cmp	r1, #0
    7438:	bne	77a4 <coda_cursor_read_int64_partial_array+0x6fc>
    743c:	cmp	r8, #1
    7440:	blt	77a0 <coda_cursor_read_int64_partial_array+0x6f8>
    7444:	bne	758c <coda_cursor_read_int64_partial_array+0x4e4>
    7448:	mov	r0, r8
    744c:	b	75ec <coda_cursor_read_int64_partial_array+0x544>
    7450:	mov	r0, r7
    7454:	mov	r1, r6
    7458:	mov	r2, r8
    745c:	mov	r3, r4
    7460:	bl	65d0 <read_uint16_partial_array>
    7464:	mov	r1, r0
    7468:	mvn	r0, #0
    746c:	cmp	r1, #0
    7470:	bne	77a4 <coda_cursor_read_int64_partial_array+0x6fc>
    7474:	cmp	r8, #1
    7478:	blt	77a0 <coda_cursor_read_int64_partial_array+0x6f8>
    747c:	bne	761c <coda_cursor_read_int64_partial_array+0x574>
    7480:	mov	r0, r8
    7484:	b	767c <coda_cursor_read_int64_partial_array+0x5d4>
    7488:	mov	r0, r7
    748c:	mov	r1, r6
    7490:	mov	r2, r8
    7494:	mov	r3, r4
    7498:	bl	6bc0 <read_int32_partial_array>
    749c:	mov	r1, r0
    74a0:	mvn	r0, #0
    74a4:	cmp	r1, #0
    74a8:	bne	77a4 <coda_cursor_read_int64_partial_array+0x6fc>
    74ac:	cmp	r8, #1
    74b0:	blt	77a0 <coda_cursor_read_int64_partial_array+0x6f8>
    74b4:	bne	76b0 <coda_cursor_read_int64_partial_array+0x608>
    74b8:	mov	r0, r8
    74bc:	b	76fc <coda_cursor_read_int64_partial_array+0x654>
    74c0:	mov	r0, r7
    74c4:	mov	r1, r6
    74c8:	mov	r2, r8
    74cc:	mov	r3, r4
    74d0:	bl	7000 <read_uint32_partial_array>
    74d4:	mov	r1, r0
    74d8:	mvn	r0, #0
    74dc:	cmp	r1, #0
    74e0:	bne	77a4 <coda_cursor_read_int64_partial_array+0x6fc>
    74e4:	cmp	r8, #1
    74e8:	blt	77a0 <coda_cursor_read_int64_partial_array+0x6f8>
    74ec:	bne	7728 <coda_cursor_read_int64_partial_array+0x680>
    74f0:	mov	r0, r8
    74f4:	b	7774 <coda_cursor_read_int64_partial_array+0x6cc>
    74f8:	mov	r0, r7
    74fc:	mov	r1, r6
    7500:	mov	r2, r8
    7504:	mov	r3, r4
    7508:	bl	77b4 <read_int64_partial_array>
    750c:	mov	r1, r0
    7510:	mvn	r0, #0
    7514:	cmp	r1, #0
    7518:	moveq	r0, #0
    751c:	sub	sp, fp, #24
    7520:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
    7524:	mov	r0, r8
    7528:	add	r1, r4, r0, lsl #3
    752c:	sub	r2, r4, #1
    7530:	sub	r1, r1, #8
    7534:	add	r3, r2, r0
    7538:	sub	r0, r0, #1
    753c:	ldrsb	r4, [r3]
    7540:	cmp	r0, #0
    7544:	asr	r5, r4, #31
    7548:	strd	r4, [r1]
    754c:	sub	r1, r1, #8
    7550:	bgt	7534 <coda_cursor_read_int64_partial_array+0x48c>
    7554:	b	77a0 <coda_cursor_read_int64_partial_array+0x6f8>
    7558:	mov	r0, r8
    755c:	add	r1, r4, r0, lsl #3
    7560:	sub	r2, r4, #1
    7564:	mov	r3, #0
    7568:	sub	r1, r1, #8
    756c:	ldrb	r4, [r2, r0]
    7570:	sub	r0, r0, #1
    7574:	cmp	r0, #0
    7578:	str	r4, [r1]
    757c:	str	r3, [r1, #4]
    7580:	sub	r1, r1, #8
    7584:	bgt	756c <coda_cursor_read_int64_partial_array+0x4c4>
    7588:	b	77a0 <coda_cursor_read_int64_partial_array+0x6f8>
    758c:	add	r1, r4, r8, lsl #1
    7590:	bic	ip, r8, #1
    7594:	add	r7, sp, #12
    7598:	mvn	r6, #15
    759c:	sub	r0, r8, ip
    75a0:	sub	r2, r1, #4
    75a4:	add	r1, r4, r8, lsl #3
    75a8:	sub	r3, r1, #16
    75ac:	mov	r1, ip
    75b0:	ldr	r5, [r2], #-4
    75b4:	subs	r1, r1, #2
    75b8:	str	r5, [sp, #12]
    75bc:	vld1.32	{d16[0]}, [r7 :32]
    75c0:	vmovl.u16	q8, d16
    75c4:	vrev64.32	d16, d16
    75c8:	vmovl.u32	q8, d16
    75cc:	vshl.s64	q8, q8, #48	; 0x30
    75d0:	vshr.s64	q8, q8, #48
    75d4:	vorr	d18, d17, d17
    75d8:	vorr	d19, d16, d16
    75dc:	vst1.64	{d18-d19}, [r3], r6
    75e0:	bne	75b0 <coda_cursor_read_int64_partial_array+0x508>
    75e4:	cmp	ip, r8
    75e8:	beq	77a0 <coda_cursor_read_int64_partial_array+0x6f8>
    75ec:	add	r1, r4, r0, lsl #1
    75f0:	add	r2, r4, r0, lsl #3
    75f4:	sub	r1, r1, #2
    75f8:	sub	r2, r2, #8
    75fc:	ldrsh	r4, [r1], #-2
    7600:	sub	r0, r0, #1
    7604:	cmp	r0, #0
    7608:	asr	r5, r4, #31
    760c:	strd	r4, [r2]
    7610:	sub	r2, r2, #8
    7614:	bgt	75fc <coda_cursor_read_int64_partial_array+0x554>
    7618:	b	77a0 <coda_cursor_read_int64_partial_array+0x6f8>
    761c:	add	r1, r4, r8, lsl #1
    7620:	vmov.i64	q8, #0x000000000000ffff
    7624:	bic	ip, r8, #1
    7628:	add	r7, sp, #16
    762c:	mvn	r6, #15
    7630:	sub	r0, r8, ip
    7634:	sub	r2, r1, #4
    7638:	add	r1, r4, r8, lsl #3
    763c:	sub	r3, r1, #16
    7640:	mov	r1, ip
    7644:	ldr	r5, [r2], #-4
    7648:	subs	r1, r1, #2
    764c:	str	r5, [sp, #16]
    7650:	vld1.32	{d18[0]}, [r7 :32]
    7654:	vmovl.u16	q9, d18
    7658:	vrev64.32	d18, d18
    765c:	vmovl.u32	q9, d18
    7660:	vand	q9, q9, q8
    7664:	vorr	d20, d19, d19
    7668:	vorr	d21, d18, d18
    766c:	vst1.64	{d20-d21}, [r3], r6
    7670:	bne	7644 <coda_cursor_read_int64_partial_array+0x59c>
    7674:	cmp	ip, r8
    7678:	beq	77a0 <coda_cursor_read_int64_partial_array+0x6f8>
    767c:	add	r1, r4, r0, lsl #1
    7680:	add	r2, r4, r0, lsl #3
    7684:	mov	r3, #0
    7688:	sub	r1, r1, #2
    768c:	sub	r2, r2, #8
    7690:	ldrh	r4, [r1], #-2
    7694:	sub	r0, r0, #1
    7698:	cmp	r0, #0
    769c:	str	r4, [r2]
    76a0:	str	r3, [r2, #4]
    76a4:	sub	r2, r2, #8
    76a8:	bgt	7690 <coda_cursor_read_int64_partial_array+0x5e8>
    76ac:	b	77a0 <coda_cursor_read_int64_partial_array+0x6f8>
    76b0:	add	r1, r4, r8, lsl #2
    76b4:	bic	r5, r8, #1
    76b8:	mvn	r7, #7
    76bc:	mvn	r6, #15
    76c0:	sub	r0, r8, r5
    76c4:	sub	r2, r1, #8
    76c8:	add	r1, r4, r8, lsl #3
    76cc:	sub	r3, r1, #16
    76d0:	mov	r1, r5
    76d4:	vld1.32	{d16}, [r2], r7
    76d8:	subs	r1, r1, #2
    76dc:	vrev64.32	d16, d16
    76e0:	vmovl.s32	q8, d16
    76e4:	vorr	d18, d17, d17
    76e8:	vorr	d19, d16, d16
    76ec:	vst1.64	{d18-d19}, [r3], r6
    76f0:	bne	76d4 <coda_cursor_read_int64_partial_array+0x62c>
    76f4:	cmp	r5, r8
    76f8:	beq	77a0 <coda_cursor_read_int64_partial_array+0x6f8>
    76fc:	add	r1, r4, r0, lsl #3
    7700:	sub	r2, r4, #4
    7704:	sub	r1, r1, #8
    7708:	ldr	r4, [r2, r0, lsl #2]
    770c:	sub	r0, r0, #1
    7710:	cmp	r0, #0
    7714:	asr	r5, r4, #31
    7718:	strd	r4, [r1]
    771c:	sub	r1, r1, #8
    7720:	bgt	7708 <coda_cursor_read_int64_partial_array+0x660>
    7724:	b	77a0 <coda_cursor_read_int64_partial_array+0x6f8>
    7728:	add	r1, r4, r8, lsl #2
    772c:	bic	r5, r8, #1
    7730:	mvn	r7, #7
    7734:	mvn	r6, #15
    7738:	sub	r0, r8, r5
    773c:	sub	r2, r1, #8
    7740:	add	r1, r4, r8, lsl #3
    7744:	sub	r3, r1, #16
    7748:	mov	r1, r5
    774c:	vld1.32	{d16}, [r2], r7
    7750:	subs	r1, r1, #2
    7754:	vrev64.32	d16, d16
    7758:	vmovl.u32	q8, d16
    775c:	vorr	d18, d17, d17
    7760:	vorr	d19, d16, d16
    7764:	vst1.64	{d18-d19}, [r3], r6
    7768:	bne	774c <coda_cursor_read_int64_partial_array+0x6a4>
    776c:	cmp	r5, r8
    7770:	beq	77a0 <coda_cursor_read_int64_partial_array+0x6f8>
    7774:	add	r1, r4, r0, lsl #3
    7778:	sub	r2, r4, #4
    777c:	mov	r3, #0
    7780:	sub	r1, r1, #8
    7784:	ldr	r4, [r2, r0, lsl #2]
    7788:	sub	r0, r0, #1
    778c:	cmp	r0, #0
    7790:	str	r4, [r1]
    7794:	str	r3, [r1, #4]
    7798:	sub	r1, r1, #8
    779c:	bgt	7784 <coda_cursor_read_int64_partial_array+0x6dc>
    77a0:	mov	r0, #0
    77a4:	sub	sp, fp, #24
    77a8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
    77ac:	.word	0x00000698
    77b0:	.word	0x000005c0

000077b4 <read_int64_partial_array>:
    77b4:	push	{fp, lr}
    77b8:	mov	fp, sp
    77bc:	ldr	ip, [r0, #4]
    77c0:	add	ip, r0, ip, lsl #4
    77c4:	ldr	ip, [ip, #-8]
    77c8:	ldr	ip, [ip]
    77cc:	sub	lr, ip, #100	; 0x64
    77d0:	cmp	lr, #3
    77d4:	bhi	77f8 <read_int64_partial_array+0x44>
    77d8:	add	ip, pc, #0
    77dc:	ldr	pc, [ip, lr, lsl #2]
    77e0:	.word	0x000077f0
    77e4:	.word	0x00007818
    77e8:	.word	0x00007810
    77ec:	.word	0x0000782c
    77f0:	pop	{fp, lr}
    77f4:	b	0 <coda_mem_cursor_read_int64_partial_array>
    77f8:	cmp	ip, #1
    77fc:	beq	7834 <read_int64_partial_array+0x80>
    7800:	cmp	ip, #0
    7804:	bne	783c <read_int64_partial_array+0x88>
    7808:	pop	{fp, lr}
    780c:	b	0 <coda_ascii_cursor_read_int64_partial_array>
    7810:	mvn	r0, #12
    7814:	b	781c <read_int64_partial_array+0x68>
    7818:	mvn	r0, #10
    781c:	mov	r1, #0
    7820:	bl	0 <coda_set_error>
    7824:	mvn	r0, #0
    7828:	pop	{fp, pc}
    782c:	pop	{fp, lr}
    7830:	b	0 <coda_cdf_cursor_read_int64_partial_array>
    7834:	pop	{fp, lr}
    7838:	b	0 <coda_bin_cursor_read_int64_partial_array>
    783c:	movw	r0, #0
    7840:	movw	r1, #0
    7844:	movw	r3, #0
    7848:	movw	r2, #1604	; 0x644
    784c:	movt	r0, #0
    7850:	movt	r1, #0
    7854:	movt	r3, #0
    7858:	bl	0 <__assert_fail>

0000785c <coda_cursor_read_uint64_partial_array>:
    785c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
    7860:	add	fp, sp, #24
    7864:	sub	sp, sp, #16
    7868:	cmp	r0, #0
    786c:	beq	7924 <coda_cursor_read_uint64_partial_array+0xc8>
    7870:	mov	r7, r0
    7874:	ldr	r0, [r0, #4]
    7878:	cmp	r0, #1
    787c:	blt	7924 <coda_cursor_read_uint64_partial_array+0xc8>
    7880:	add	r0, r7, r0, lsl #4
    7884:	ldr	r5, [r0, #-8]
    7888:	cmp	r5, #0
    788c:	beq	7924 <coda_cursor_read_uint64_partial_array+0xc8>
    7890:	mov	r4, r3
    7894:	cmp	r3, #0
    7898:	beq	794c <coda_cursor_read_uint64_partial_array+0xf0>
    789c:	ldr	r0, [r5]
    78a0:	mov	r8, r2
    78a4:	mov	r6, r1
    78a8:	cmp	r0, #99	; 0x63
    78ac:	ldrhi	r5, [r5, #4]
    78b0:	ldr	r0, [r5, #8]
    78b4:	cmp	r0, #1
    78b8:	bne	7964 <coda_cursor_read_uint64_partial_array+0x108>
    78bc:	ldr	r0, [pc, #1048]	; 7cdc <coda_cursor_read_uint64_partial_array+0x480>
    78c0:	ldr	r1, [pc, r0]
    78c4:	bl	0 <__aeabi_read_tp>
    78c8:	ldr	r0, [r0, r1]
    78cc:	cmp	r0, #0
    78d0:	beq	7980 <coda_cursor_read_uint64_partial_array+0x124>
    78d4:	add	r1, sp, #12
    78d8:	mov	r0, r7
    78dc:	bl	0 <coda_cursor_get_num_elements>
    78e0:	cmp	r0, #0
    78e4:	bne	7940 <coda_cursor_read_uint64_partial_array+0xe4>
    78e8:	ldr	r3, [sp, #12]
    78ec:	cmp	r6, #0
    78f0:	bmi	7ae0 <coda_cursor_read_uint64_partial_array+0x284>
    78f4:	cmp	r3, r6
    78f8:	ble	7ae0 <coda_cursor_read_uint64_partial_array+0x284>
    78fc:	add	r0, r8, r6
    7900:	cmp	r0, r3
    7904:	ble	7980 <coda_cursor_read_uint64_partial_array+0x124>
    7908:	movw	r1, #0
    790c:	str	r3, [sp]
    7910:	mvn	r0, #106	; 0x6a
    7914:	mov	r2, r6
    7918:	mov	r3, r8
    791c:	movt	r1, #0
    7920:	b	793c <coda_cursor_read_uint64_partial_array+0xe0>
    7924:	movw	r1, #0
    7928:	movw	r2, #0
    792c:	mvn	r0, #99	; 0x63
    7930:	movw	r3, #4978	; 0x1372
    7934:	movt	r1, #0
    7938:	movt	r2, #0
    793c:	bl	0 <coda_set_error>
    7940:	mvn	r0, #0
    7944:	sub	sp, fp, #24
    7948:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
    794c:	movw	r1, #0
    7950:	movw	r2, #0
    7954:	mvn	r0, #99	; 0x63
    7958:	movw	r3, #4983	; 0x1377
    795c:	movt	r1, #0
    7960:	b	7938 <coda_cursor_read_uint64_partial_array+0xdc>
    7964:	bl	0 <coda_type_get_class_name>
    7968:	movw	r1, #0
    796c:	mov	r2, r0
    7970:	movt	r1, #0
    7974:	mvn	r0, #104	; 0x68
    7978:	bl	0 <coda_set_error>
    797c:	b	7940 <coda_cursor_read_uint64_partial_array+0xe4>
    7980:	bl	0 <__aeabi_read_tp>
    7984:	ldr	r1, [r5, #40]	; 0x28
    7988:	ldr	r2, [r1, #8]
    798c:	bic	r2, r2, #1
    7990:	cmp	r2, #2
    7994:	bne	79d0 <coda_cursor_read_uint64_partial_array+0x174>
    7998:	ldr	r2, [pc, #832]	; 7ce0 <coda_cursor_read_uint64_partial_array+0x484>
    799c:	ldr	r2, [pc, r2]
    79a0:	ldr	r0, [r0, r2]
    79a4:	cmp	r0, #0
    79a8:	beq	79d0 <coda_cursor_read_uint64_partial_array+0x174>
    79ac:	ldr	r2, [r1, #48]	; 0x30
    79b0:	mov	r0, #9
    79b4:	cmp	r2, #0
    79b8:	beq	79d0 <coda_cursor_read_uint64_partial_array+0x174>
    79bc:	bl	0 <coda_type_get_native_type_name>
    79c0:	movw	r1, #0
    79c4:	mov	r2, r0
    79c8:	movt	r1, #0
    79cc:	b	7974 <coda_cursor_read_uint64_partial_array+0x118>
    79d0:	ldr	r0, [r1, #12]
    79d4:	sub	r1, r0, #1
    79d8:	cmp	r1, #6
    79dc:	bhi	79bc <coda_cursor_read_uint64_partial_array+0x160>
    79e0:	add	r2, pc, #0
    79e4:	ldr	pc, [r2, r1, lsl #2]
    79e8:	.word	0x00007a04
    79ec:	.word	0x000079bc
    79f0:	.word	0x00007af4
    79f4:	.word	0x000079bc
    79f8:	.word	0x00007b2c
    79fc:	.word	0x000079bc
    7a00:	.word	0x00007b64
    7a04:	mov	r0, r7
    7a08:	mov	r1, r6
    7a0c:	mov	r2, r8
    7a10:	mov	r3, r4
    7a14:	bl	5e00 <read_uint8_partial_array>
    7a18:	mov	r1, r0
    7a1c:	mvn	r0, #0
    7a20:	cmp	r1, #0
    7a24:	bne	7cd4 <coda_cursor_read_uint64_partial_array+0x478>
    7a28:	cmp	r8, #1
    7a2c:	blt	7cd0 <coda_cursor_read_uint64_partial_array+0x474>
    7a30:	beq	7b90 <coda_cursor_read_uint64_partial_array+0x334>
    7a34:	sub	r0, r8, #1
    7a38:	bic	r1, r0, #-536870912	; 0xe0000000
    7a3c:	add	r2, r4, r0, lsl #3
    7a40:	lsl	r3, r0, #3
    7a44:	subs	r1, r0, r1
    7a48:	movwne	r1, #1
    7a4c:	cmp	r3, r2
    7a50:	bhi	7b90 <coda_cursor_read_uint64_partial_array+0x334>
    7a54:	cmp	r1, #0
    7a58:	bne	7b90 <coda_cursor_read_uint64_partial_array+0x334>
    7a5c:	add	r1, r4, r0
    7a60:	cmp	r0, r1
    7a64:	bhi	7b90 <coda_cursor_read_uint64_partial_array+0x334>
    7a68:	add	r0, r4, r8
    7a6c:	cmp	r0, r4
    7a70:	addhi	r0, r4, r8, lsl #3
    7a74:	cmphi	r0, r4
    7a78:	bhi	7b90 <coda_cursor_read_uint64_partial_array+0x334>
    7a7c:	sub	r0, r8, #2
    7a80:	vmov.i64	q8, #0x00000000000000ff
    7a84:	bic	ip, r8, #1
    7a88:	add	r7, sp, #4
    7a8c:	mvn	r6, #15
    7a90:	add	r3, r4, r0, lsl #3
    7a94:	add	r1, r4, r0
    7a98:	sub	r0, r8, ip
    7a9c:	mov	r2, ip
    7aa0:	ldrh	r5, [r1], #-2
    7aa4:	subs	r2, r2, #2
    7aa8:	strh	r5, [sp, #4]
    7aac:	vld1.16	{d18[0]}, [r7 :16]
    7ab0:	vmovl.u8	q9, d18
    7ab4:	vmovl.u16	q9, d18
    7ab8:	vrev64.32	d18, d18
    7abc:	vmovl.u32	q9, d18
    7ac0:	vand	q9, q9, q8
    7ac4:	vorr	d20, d19, d19
    7ac8:	vorr	d21, d18, d18
    7acc:	vst1.64	{d20-d21}, [r3], r6
    7ad0:	bne	7aa0 <coda_cursor_read_uint64_partial_array+0x244>
    7ad4:	cmp	ip, r8
    7ad8:	bne	7b94 <coda_cursor_read_uint64_partial_array+0x338>
    7adc:	b	7cd0 <coda_cursor_read_uint64_partial_array+0x474>
    7ae0:	movw	r1, #0
    7ae4:	mvn	r0, #106	; 0x6a
    7ae8:	mov	r2, r6
    7aec:	movt	r1, #0
    7af0:	b	793c <coda_cursor_read_uint64_partial_array+0xe0>
    7af4:	mov	r0, r7
    7af8:	mov	r1, r6
    7afc:	mov	r2, r8
    7b00:	mov	r3, r4
    7b04:	bl	65d0 <read_uint16_partial_array>
    7b08:	mov	r1, r0
    7b0c:	mvn	r0, #0
    7b10:	cmp	r1, #0
    7b14:	bne	7cd4 <coda_cursor_read_uint64_partial_array+0x478>
    7b18:	cmp	r8, #1
    7b1c:	blt	7cd0 <coda_cursor_read_uint64_partial_array+0x474>
    7b20:	bne	7bc4 <coda_cursor_read_uint64_partial_array+0x368>
    7b24:	mov	r0, r8
    7b28:	b	7c24 <coda_cursor_read_uint64_partial_array+0x3c8>
    7b2c:	mov	r0, r7
    7b30:	mov	r1, r6
    7b34:	mov	r2, r8
    7b38:	mov	r3, r4
    7b3c:	bl	7000 <read_uint32_partial_array>
    7b40:	mov	r1, r0
    7b44:	mvn	r0, #0
    7b48:	cmp	r1, #0
    7b4c:	bne	7cd4 <coda_cursor_read_uint64_partial_array+0x478>
    7b50:	cmp	r8, #1
    7b54:	blt	7cd0 <coda_cursor_read_uint64_partial_array+0x474>
    7b58:	bne	7c58 <coda_cursor_read_uint64_partial_array+0x3fc>
    7b5c:	mov	r0, r8
    7b60:	b	7ca4 <coda_cursor_read_uint64_partial_array+0x448>
    7b64:	mov	r0, r7
    7b68:	mov	r1, r6
    7b6c:	mov	r2, r8
    7b70:	mov	r3, r4
    7b74:	bl	7ce4 <read_uint64_partial_array>
    7b78:	mov	r1, r0
    7b7c:	mvn	r0, #0
    7b80:	cmp	r1, #0
    7b84:	moveq	r0, #0
    7b88:	sub	sp, fp, #24
    7b8c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
    7b90:	mov	r0, r8
    7b94:	add	r1, r4, r0, lsl #3
    7b98:	sub	r2, r4, #1
    7b9c:	mov	r3, #0
    7ba0:	sub	r1, r1, #8
    7ba4:	ldrb	r4, [r2, r0]
    7ba8:	sub	r0, r0, #1
    7bac:	cmp	r0, #0
    7bb0:	str	r4, [r1]
    7bb4:	str	r3, [r1, #4]
    7bb8:	sub	r1, r1, #8
    7bbc:	bgt	7ba4 <coda_cursor_read_uint64_partial_array+0x348>
    7bc0:	b	7cd0 <coda_cursor_read_uint64_partial_array+0x474>
    7bc4:	add	r1, r4, r8, lsl #1
    7bc8:	vmov.i64	q8, #0x000000000000ffff
    7bcc:	bic	ip, r8, #1
    7bd0:	add	r7, sp, #8
    7bd4:	mvn	r6, #15
    7bd8:	sub	r0, r8, ip
    7bdc:	sub	r2, r1, #4
    7be0:	add	r1, r4, r8, lsl #3
    7be4:	sub	r3, r1, #16
    7be8:	mov	r1, ip
    7bec:	ldr	r5, [r2], #-4
    7bf0:	subs	r1, r1, #2
    7bf4:	str	r5, [sp, #8]
    7bf8:	vld1.32	{d18[0]}, [r7 :32]
    7bfc:	vmovl.u16	q9, d18
    7c00:	vrev64.32	d18, d18
    7c04:	vmovl.u32	q9, d18
    7c08:	vand	q9, q9, q8
    7c0c:	vorr	d20, d19, d19
    7c10:	vorr	d21, d18, d18
    7c14:	vst1.64	{d20-d21}, [r3], r6
    7c18:	bne	7bec <coda_cursor_read_uint64_partial_array+0x390>
    7c1c:	cmp	ip, r8
    7c20:	beq	7cd0 <coda_cursor_read_uint64_partial_array+0x474>
    7c24:	add	r1, r4, r0, lsl #1
    7c28:	add	r2, r4, r0, lsl #3
    7c2c:	mov	r3, #0
    7c30:	sub	r1, r1, #2
    7c34:	sub	r2, r2, #8
    7c38:	ldrh	r4, [r1], #-2
    7c3c:	sub	r0, r0, #1
    7c40:	cmp	r0, #0
    7c44:	str	r4, [r2]
    7c48:	str	r3, [r2, #4]
    7c4c:	sub	r2, r2, #8
    7c50:	bgt	7c38 <coda_cursor_read_uint64_partial_array+0x3dc>
    7c54:	b	7cd0 <coda_cursor_read_uint64_partial_array+0x474>
    7c58:	add	r1, r4, r8, lsl #2
    7c5c:	bic	r5, r8, #1
    7c60:	mvn	r7, #7
    7c64:	mvn	r6, #15
    7c68:	sub	r0, r8, r5
    7c6c:	sub	r2, r1, #8
    7c70:	add	r1, r4, r8, lsl #3
    7c74:	sub	r3, r1, #16
    7c78:	mov	r1, r5
    7c7c:	vld1.32	{d16}, [r2], r7
    7c80:	subs	r1, r1, #2
    7c84:	vrev64.32	d16, d16
    7c88:	vmovl.u32	q8, d16
    7c8c:	vorr	d18, d17, d17
    7c90:	vorr	d19, d16, d16
    7c94:	vst1.64	{d18-d19}, [r3], r6
    7c98:	bne	7c7c <coda_cursor_read_uint64_partial_array+0x420>
    7c9c:	cmp	r5, r8
    7ca0:	beq	7cd0 <coda_cursor_read_uint64_partial_array+0x474>
    7ca4:	add	r1, r4, r0, lsl #3
    7ca8:	sub	r2, r4, #4
    7cac:	mov	r3, #0
    7cb0:	sub	r1, r1, #8
    7cb4:	ldr	r4, [r2, r0, lsl #2]
    7cb8:	sub	r0, r0, #1
    7cbc:	cmp	r0, #0
    7cc0:	str	r4, [r1]
    7cc4:	str	r3, [r1, #4]
    7cc8:	sub	r1, r1, #8
    7ccc:	bgt	7cb4 <coda_cursor_read_uint64_partial_array+0x458>
    7cd0:	mov	r0, #0
    7cd4:	sub	sp, fp, #24
    7cd8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
    7cdc:	.word	0x00000414
    7ce0:	.word	0x0000033c

00007ce4 <read_uint64_partial_array>:
    7ce4:	push	{fp, lr}
    7ce8:	mov	fp, sp
    7cec:	ldr	ip, [r0, #4]
    7cf0:	add	ip, r0, ip, lsl #4
    7cf4:	ldr	ip, [ip, #-8]
    7cf8:	ldr	ip, [ip]
    7cfc:	cmp	ip, #99	; 0x63
    7d00:	ble	7d1c <read_uint64_partial_array+0x38>
    7d04:	cmp	ip, #100	; 0x64
    7d08:	beq	7d2c <read_uint64_partial_array+0x48>
    7d0c:	cmp	ip, #101	; 0x65
    7d10:	bne	7d34 <read_uint64_partial_array+0x50>
    7d14:	mvn	r0, #10
    7d18:	b	7d40 <read_uint64_partial_array+0x5c>
    7d1c:	cmp	ip, #0
    7d20:	bne	7d50 <read_uint64_partial_array+0x6c>
    7d24:	pop	{fp, lr}
    7d28:	b	0 <coda_ascii_cursor_read_uint64_partial_array>
    7d2c:	pop	{fp, lr}
    7d30:	b	0 <coda_mem_cursor_read_uint64_partial_array>
    7d34:	cmp	ip, #102	; 0x66
    7d38:	bne	7d60 <read_uint64_partial_array+0x7c>
    7d3c:	mvn	r0, #12
    7d40:	mov	r1, #0
    7d44:	bl	0 <coda_set_error>
    7d48:	mvn	r0, #0
    7d4c:	pop	{fp, pc}
    7d50:	cmp	ip, #1
    7d54:	bne	7d60 <read_uint64_partial_array+0x7c>
    7d58:	pop	{fp, lr}
    7d5c:	b	0 <coda_bin_cursor_read_uint64_partial_array>
    7d60:	movw	r0, #0
    7d64:	movw	r1, #0
    7d68:	movw	r3, #0
    7d6c:	movw	r2, #1638	; 0x666
    7d70:	movt	r0, #0
    7d74:	movt	r1, #0
    7d78:	movt	r3, #0
    7d7c:	bl	0 <__assert_fail>

00007d80 <coda_cursor_read_float_partial_array>:
    7d80:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7d84:	add	fp, sp, #28
    7d88:	sub	sp, sp, #20
    7d8c:	cmp	r0, #0
    7d90:	beq	7e48 <coda_cursor_read_float_partial_array+0xc8>
    7d94:	mov	r7, r0
    7d98:	ldr	r0, [r0, #4]
    7d9c:	cmp	r0, #1
    7da0:	blt	7e48 <coda_cursor_read_float_partial_array+0xc8>
    7da4:	add	r0, r7, r0, lsl #4
    7da8:	ldr	r5, [r0, #-8]
    7dac:	cmp	r5, #0
    7db0:	beq	7e48 <coda_cursor_read_float_partial_array+0xc8>
    7db4:	mov	r4, r3
    7db8:	cmp	r3, #0
    7dbc:	beq	7e74 <coda_cursor_read_float_partial_array+0xf4>
    7dc0:	ldr	r0, [r5]
    7dc4:	mov	sl, r2
    7dc8:	mov	r6, r1
    7dcc:	cmp	r0, #99	; 0x63
    7dd0:	ldrhi	r5, [r5, #4]
    7dd4:	ldr	r0, [r5, #8]
    7dd8:	cmp	r0, #1
    7ddc:	bne	7e8c <coda_cursor_read_float_partial_array+0x10c>
    7de0:	ldr	r0, [pc, #2380]	; 8734 <coda_cursor_read_float_partial_array+0x9b4>
    7de4:	ldr	r1, [pc, r0]
    7de8:	bl	0 <__aeabi_read_tp>
    7dec:	ldr	r0, [r0, r1]
    7df0:	cmp	r0, #0
    7df4:	beq	7ea8 <coda_cursor_read_float_partial_array+0x128>
    7df8:	add	r1, sp, #16
    7dfc:	mov	r0, r7
    7e00:	bl	0 <coda_cursor_get_num_elements>
    7e04:	cmp	r0, #0
    7e08:	bne	7e64 <coda_cursor_read_float_partial_array+0xe4>
    7e0c:	ldr	r3, [sp, #16]
    7e10:	cmp	r6, #0
    7e14:	bmi	8034 <coda_cursor_read_float_partial_array+0x2b4>
    7e18:	cmp	r3, r6
    7e1c:	ble	8034 <coda_cursor_read_float_partial_array+0x2b4>
    7e20:	add	r0, sl, r6
    7e24:	cmp	r0, r3
    7e28:	ble	7ea8 <coda_cursor_read_float_partial_array+0x128>
    7e2c:	movw	r1, #0
    7e30:	str	r3, [sp]
    7e34:	mvn	r0, #106	; 0x6a
    7e38:	mov	r2, r6
    7e3c:	mov	r3, sl
    7e40:	movt	r1, #0
    7e44:	b	7e60 <coda_cursor_read_float_partial_array+0xe0>
    7e48:	movw	r1, #0
    7e4c:	movw	r2, #0
    7e50:	mvn	r0, #99	; 0x63
    7e54:	movw	r3, #5105	; 0x13f1
    7e58:	movt	r1, #0
    7e5c:	movt	r2, #0
    7e60:	bl	0 <coda_set_error>
    7e64:	mvn	r6, #0
    7e68:	mov	r0, r6
    7e6c:	sub	sp, fp, #28
    7e70:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7e74:	movw	r1, #0
    7e78:	movw	r2, #0
    7e7c:	mvn	r0, #99	; 0x63
    7e80:	movw	r3, #5110	; 0x13f6
    7e84:	movt	r1, #0
    7e88:	b	7e5c <coda_cursor_read_float_partial_array+0xdc>
    7e8c:	bl	0 <coda_type_get_class_name>
    7e90:	movw	r1, #0
    7e94:	mov	r2, r0
    7e98:	movt	r1, #0
    7e9c:	mvn	r0, #104	; 0x68
    7ea0:	bl	0 <coda_set_error>
    7ea4:	b	7e64 <coda_cursor_read_float_partial_array+0xe4>
    7ea8:	bl	0 <__aeabi_read_tp>
    7eac:	ldr	r2, [r5, #40]	; 0x28
    7eb0:	ldr	r8, [r2, #8]
    7eb4:	ldr	r1, [r2, #12]
    7eb8:	bic	r3, r8, #1
    7ebc:	cmp	r3, #2
    7ec0:	bne	7f24 <coda_cursor_read_float_partial_array+0x1a4>
    7ec4:	ldr	r3, [pc, #2156]	; 8738 <coda_cursor_read_float_partial_array+0x9b8>
    7ec8:	ldr	r3, [pc, r3]
    7ecc:	ldr	r0, [r0, r3]
    7ed0:	cmp	r0, #0
    7ed4:	beq	7f24 <coda_cursor_read_float_partial_array+0x1a4>
    7ed8:	ldr	r0, [r2, #48]	; 0x30
    7edc:	cmp	r0, #0
    7ee0:	beq	7f24 <coda_cursor_read_float_partial_array+0x1a4>
    7ee4:	lsl	r9, sl, #3
    7ee8:	mov	r0, r9
    7eec:	bl	0 <malloc>
    7ef0:	cmp	r0, #0
    7ef4:	beq	849c <coda_cursor_read_float_partial_array+0x71c>
    7ef8:	mov	r8, r0
    7efc:	mov	r0, r7
    7f00:	mov	r1, r6
    7f04:	mov	r2, sl
    7f08:	mov	r3, r8
    7f0c:	bl	873c <coda_cursor_read_double_partial_array>
    7f10:	cmp	r0, #0
    7f14:	beq	8048 <coda_cursor_read_float_partial_array+0x2c8>
    7f18:	mov	r0, r8
    7f1c:	bl	0 <free>
    7f20:	b	7e64 <coda_cursor_read_float_partial_array+0xe4>
    7f24:	cmp	r1, #9
    7f28:	bhi	805c <coda_cursor_read_float_partial_array+0x2dc>
    7f2c:	add	r0, pc, #0
    7f30:	ldr	pc, [r0, r1, lsl #2]
    7f34:	.word	0x00007f5c
    7f38:	.word	0x00008074
    7f3c:	.word	0x00008148
    7f40:	.word	0x00008180
    7f44:	.word	0x000081b8
    7f48:	.word	0x0000824c
    7f4c:	.word	0x000082e0
    7f50:	.word	0x00008388
    7f54:	.word	0x00008430
    7f58:	.word	0x00008454
    7f5c:	mov	r0, r7
    7f60:	mov	r1, r6
    7f64:	mov	r2, sl
    7f68:	mov	r3, r4
    7f6c:	bl	5b8c <read_int8_partial_array>
    7f70:	mvn	r6, #0
    7f74:	cmp	r0, #0
    7f78:	bne	7e68 <coda_cursor_read_float_partial_array+0xe8>
    7f7c:	cmp	sl, #1
    7f80:	blt	86b0 <coda_cursor_read_float_partial_array+0x930>
    7f84:	cmp	sl, #4
    7f88:	bcc	8540 <coda_cursor_read_float_partial_array+0x7c0>
    7f8c:	sub	r0, sl, #1
    7f90:	bic	r1, r0, #-1073741824	; 0xc0000000
    7f94:	add	r2, r4, r0, lsl #2
    7f98:	lsl	r3, r0, #2
    7f9c:	subs	r1, r0, r1
    7fa0:	movwne	r1, #1
    7fa4:	cmp	r3, r2
    7fa8:	bhi	8540 <coda_cursor_read_float_partial_array+0x7c0>
    7fac:	cmp	r1, #0
    7fb0:	bne	8540 <coda_cursor_read_float_partial_array+0x7c0>
    7fb4:	add	r1, r4, r0
    7fb8:	cmp	r0, r1
    7fbc:	bhi	8540 <coda_cursor_read_float_partial_array+0x7c0>
    7fc0:	add	r2, r4, sl
    7fc4:	add	r1, r4, sl, lsl #2
    7fc8:	cmp	r2, r4
    7fcc:	cmphi	r1, r4
    7fd0:	bhi	8540 <coda_cursor_read_float_partial_array+0x7c0>
    7fd4:	bic	ip, sl, #3
    7fd8:	sub	r3, r1, #16
    7fdc:	sub	r2, r2, #4
    7fe0:	add	r7, sp, #8
    7fe4:	mvn	r6, #15
    7fe8:	sub	r0, sl, ip
    7fec:	mov	r1, ip
    7ff0:	ldr	r5, [r2], #-4
    7ff4:	subs	r1, r1, #4
    7ff8:	str	r5, [sp, #8]
    7ffc:	vld1.32	{d16[0]}, [r7 :32]
    8000:	vmovl.u8	q8, d16
    8004:	vrev64.16	d16, d16
    8008:	vshl.s16	d16, d16, #8
    800c:	vshr.s16	d16, d16, #8
    8010:	vmovl.s16	q8, d16
    8014:	vcvt.f32.s32	q8, q8
    8018:	vrev64.32	q8, q8
    801c:	vext.8	q8, q8, q8, #8
    8020:	vst1.32	{d16-d17}, [r3], r6
    8024:	bne	7ff0 <coda_cursor_read_float_partial_array+0x270>
    8028:	cmp	ip, sl
    802c:	bne	8544 <coda_cursor_read_float_partial_array+0x7c4>
    8030:	b	86b0 <coda_cursor_read_float_partial_array+0x930>
    8034:	movw	r1, #0
    8038:	mvn	r0, #106	; 0x6a
    803c:	mov	r2, r6
    8040:	movt	r1, #0
    8044:	b	7e60 <coda_cursor_read_float_partial_array+0xe0>
    8048:	cmp	sl, #1
    804c:	blt	8530 <coda_cursor_read_float_partial_array+0x7b0>
    8050:	bne	84b8 <coda_cursor_read_float_partial_array+0x738>
    8054:	mov	r0, sl
    8058:	b	8500 <coda_cursor_read_float_partial_array+0x780>
    805c:	mov	r0, r1
    8060:	bl	0 <coda_type_get_native_type_name>
    8064:	movw	r1, #0
    8068:	mov	r2, r0
    806c:	movt	r1, #0
    8070:	b	7e9c <coda_cursor_read_float_partial_array+0x11c>
    8074:	mov	r0, r7
    8078:	mov	r1, r6
    807c:	mov	r2, sl
    8080:	mov	r3, r4
    8084:	bl	5e00 <read_uint8_partial_array>
    8088:	mvn	r6, #0
    808c:	cmp	r0, #0
    8090:	bne	7e68 <coda_cursor_read_float_partial_array+0xe8>
    8094:	cmp	sl, #1
    8098:	blt	86b0 <coda_cursor_read_float_partial_array+0x930>
    809c:	cmp	sl, #4
    80a0:	bcc	8578 <coda_cursor_read_float_partial_array+0x7f8>
    80a4:	sub	r0, sl, #1
    80a8:	bic	r1, r0, #-1073741824	; 0xc0000000
    80ac:	add	r2, r4, r0, lsl #2
    80b0:	lsl	r3, r0, #2
    80b4:	subs	r1, r0, r1
    80b8:	movwne	r1, #1
    80bc:	cmp	r3, r2
    80c0:	bhi	8578 <coda_cursor_read_float_partial_array+0x7f8>
    80c4:	cmp	r1, #0
    80c8:	bne	8578 <coda_cursor_read_float_partial_array+0x7f8>
    80cc:	add	r1, r4, r0
    80d0:	cmp	r0, r1
    80d4:	bhi	8578 <coda_cursor_read_float_partial_array+0x7f8>
    80d8:	add	r2, r4, sl
    80dc:	add	r1, r4, sl, lsl #2
    80e0:	cmp	r2, r4
    80e4:	cmphi	r1, r4
    80e8:	bhi	8578 <coda_cursor_read_float_partial_array+0x7f8>
    80ec:	bic	ip, sl, #3
    80f0:	sub	r3, r1, #16
    80f4:	sub	r2, r2, #4
    80f8:	add	r7, sp, #12
    80fc:	mvn	r6, #15
    8100:	sub	r0, sl, ip
    8104:	mov	r1, ip
    8108:	ldr	r5, [r2], #-4
    810c:	subs	r1, r1, #4
    8110:	str	r5, [sp, #12]
    8114:	vld1.32	{d16[0]}, [r7 :32]
    8118:	vmovl.u8	q8, d16
    811c:	vrev64.16	d16, d16
    8120:	vbic.i16	d16, #65280	; 0xff00
    8124:	vmovl.u16	q8, d16
    8128:	vcvt.f32.u32	q8, q8
    812c:	vrev64.32	q8, q8
    8130:	vext.8	q8, q8, q8, #8
    8134:	vst1.32	{d16-d17}, [r3], r6
    8138:	bne	8108 <coda_cursor_read_float_partial_array+0x388>
    813c:	cmp	ip, sl
    8140:	bne	857c <coda_cursor_read_float_partial_array+0x7fc>
    8144:	b	86b0 <coda_cursor_read_float_partial_array+0x930>
    8148:	mov	r0, r7
    814c:	mov	r1, r6
    8150:	mov	r2, sl
    8154:	mov	r3, r4
    8158:	bl	625c <read_int16_partial_array>
    815c:	mvn	r6, #0
    8160:	cmp	r0, #0
    8164:	bne	7e68 <coda_cursor_read_float_partial_array+0xe8>
    8168:	cmp	sl, #1
    816c:	blt	86b0 <coda_cursor_read_float_partial_array+0x930>
    8170:	cmp	sl, #4
    8174:	bcs	85ac <coda_cursor_read_float_partial_array+0x82c>
    8178:	mov	r0, sl
    817c:	b	85fc <coda_cursor_read_float_partial_array+0x87c>
    8180:	mov	r0, r7
    8184:	mov	r1, r6
    8188:	mov	r2, sl
    818c:	mov	r3, r4
    8190:	bl	65d0 <read_uint16_partial_array>
    8194:	mvn	r6, #0
    8198:	cmp	r0, #0
    819c:	bne	7e68 <coda_cursor_read_float_partial_array+0xe8>
    81a0:	cmp	sl, #1
    81a4:	blt	86b0 <coda_cursor_read_float_partial_array+0x930>
    81a8:	cmp	sl, #4
    81ac:	bcs	8630 <coda_cursor_read_float_partial_array+0x8b0>
    81b0:	mov	r0, sl
    81b4:	b	8680 <coda_cursor_read_float_partial_array+0x900>
    81b8:	mov	r0, r7
    81bc:	mov	r1, r6
    81c0:	mov	r2, sl
    81c4:	mov	r3, r4
    81c8:	bl	6bc0 <read_int32_partial_array>
    81cc:	mvn	r6, #0
    81d0:	cmp	r0, #0
    81d4:	bne	7e68 <coda_cursor_read_float_partial_array+0xe8>
    81d8:	cmp	sl, #1
    81dc:	blt	86b0 <coda_cursor_read_float_partial_array+0x930>
    81e0:	tst	sl, #1
    81e4:	mov	r1, sl
    81e8:	beq	8204 <coda_cursor_read_float_partial_array+0x484>
    81ec:	sub	r1, sl, #1
    81f0:	mov	r0, r4
    81f4:	ldr	r2, [r0, r1, lsl #2]!
    81f8:	vmov	s0, r2
    81fc:	vcvt.f32.s32	s0, s0
    8200:	vstr	s0, [r0]
    8204:	cmp	sl, #1
    8208:	beq	86b0 <coda_cursor_read_float_partial_array+0x930>
    820c:	add	r0, r4, r1, lsl #2
    8210:	sub	r1, r1, #1
    8214:	sub	r0, r0, #8
    8218:	vldr	s0, [r0]
    821c:	vldr	s2, [r0, #4]
    8220:	sub	r2, r1, #2
    8224:	sub	r1, r1, #1
    8228:	cmp	r1, #0
    822c:	mov	r1, r2
    8230:	vcvt.f32.s32	s2, s2
    8234:	vcvt.f32.s32	s0, s0
    8238:	vstr	s0, [r0]
    823c:	vstr	s2, [r0, #4]
    8240:	sub	r0, r0, #8
    8244:	bgt	8218 <coda_cursor_read_float_partial_array+0x498>
    8248:	b	86b0 <coda_cursor_read_float_partial_array+0x930>
    824c:	mov	r0, r7
    8250:	mov	r1, r6
    8254:	mov	r2, sl
    8258:	mov	r3, r4
    825c:	bl	7000 <read_uint32_partial_array>
    8260:	mvn	r6, #0
    8264:	cmp	r0, #0
    8268:	bne	7e68 <coda_cursor_read_float_partial_array+0xe8>
    826c:	cmp	sl, #1
    8270:	blt	86b0 <coda_cursor_read_float_partial_array+0x930>
    8274:	tst	sl, #1
    8278:	mov	r1, sl
    827c:	beq	8298 <coda_cursor_read_float_partial_array+0x518>
    8280:	sub	r1, sl, #1
    8284:	mov	r0, r4
    8288:	ldr	r2, [r0, r1, lsl #2]!
    828c:	vmov	s0, r2
    8290:	vcvt.f32.u32	s0, s0
    8294:	vstr	s0, [r0]
    8298:	cmp	sl, #1
    829c:	beq	86b0 <coda_cursor_read_float_partial_array+0x930>
    82a0:	add	r0, r4, r1, lsl #2
    82a4:	sub	r1, r1, #1
    82a8:	sub	r0, r0, #8
    82ac:	vldr	s0, [r0]
    82b0:	vldr	s2, [r0, #4]
    82b4:	sub	r2, r1, #2
    82b8:	sub	r1, r1, #1
    82bc:	cmp	r1, #0
    82c0:	mov	r1, r2
    82c4:	vcvt.f32.u32	s2, s2
    82c8:	vcvt.f32.u32	s0, s0
    82cc:	vstr	s0, [r0]
    82d0:	vstr	s2, [r0, #4]
    82d4:	sub	r0, r0, #8
    82d8:	bgt	82ac <coda_cursor_read_float_partial_array+0x52c>
    82dc:	b	86b0 <coda_cursor_read_float_partial_array+0x930>
    82e0:	lsl	r9, sl, #3
    82e4:	mov	r0, r9
    82e8:	bl	0 <malloc>
    82ec:	cmp	r0, #0
    82f0:	beq	849c <coda_cursor_read_float_partial_array+0x71c>
    82f4:	mov	r8, r0
    82f8:	mov	r0, r7
    82fc:	mov	r1, r6
    8300:	mov	r2, sl
    8304:	mov	r3, r8
    8308:	bl	77b4 <read_int64_partial_array>
    830c:	cmp	r0, #0
    8310:	bne	7f18 <coda_cursor_read_float_partial_array+0x198>
    8314:	cmp	sl, #1
    8318:	blt	8530 <coda_cursor_read_float_partial_array+0x7b0>
    831c:	tst	sl, #1
    8320:	mov	r5, sl
    8324:	beq	8340 <coda_cursor_read_float_partial_array+0x5c0>
    8328:	sub	r5, sl, #1
    832c:	mov	r1, r8
    8330:	ldr	r0, [r1, r5, lsl #3]!
    8334:	ldr	r1, [r1, #4]
    8338:	bl	0 <__aeabi_l2f>
    833c:	str	r0, [r4, r5, lsl #2]
    8340:	cmp	sl, #1
    8344:	beq	8530 <coda_cursor_read_float_partial_array+0x7b0>
    8348:	add	r0, r4, r5, lsl #2
    834c:	sub	r4, r0, #4
    8350:	add	r0, r8, r5, lsl #3
    8354:	sub	r6, r0, #8
    8358:	ldrd	r0, [r6]
    835c:	bl	0 <__aeabi_l2f>
    8360:	str	r0, [r4]
    8364:	ldrd	r0, [r6, #-8]
    8368:	bl	0 <__aeabi_l2f>
    836c:	sub	r5, r5, #2
    8370:	str	r0, [r4, #-4]
    8374:	sub	r4, r4, #8
    8378:	sub	r6, r6, #16
    837c:	cmp	r5, #0
    8380:	bgt	8358 <coda_cursor_read_float_partial_array+0x5d8>
    8384:	b	8530 <coda_cursor_read_float_partial_array+0x7b0>
    8388:	lsl	r9, sl, #3
    838c:	mov	r0, r9
    8390:	bl	0 <malloc>
    8394:	cmp	r0, #0
    8398:	beq	849c <coda_cursor_read_float_partial_array+0x71c>
    839c:	mov	r8, r0
    83a0:	mov	r0, r7
    83a4:	mov	r1, r6
    83a8:	mov	r2, sl
    83ac:	mov	r3, r8
    83b0:	bl	7ce4 <read_uint64_partial_array>
    83b4:	cmp	r0, #0
    83b8:	bne	7f18 <coda_cursor_read_float_partial_array+0x198>
    83bc:	cmp	sl, #1
    83c0:	blt	8530 <coda_cursor_read_float_partial_array+0x7b0>
    83c4:	tst	sl, #1
    83c8:	mov	r5, sl
    83cc:	beq	83e8 <coda_cursor_read_float_partial_array+0x668>
    83d0:	sub	r5, sl, #1
    83d4:	mov	r1, r8
    83d8:	ldr	r0, [r1, r5, lsl #3]!
    83dc:	ldr	r1, [r1, #4]
    83e0:	bl	0 <__aeabi_ul2f>
    83e4:	str	r0, [r4, r5, lsl #2]
    83e8:	cmp	sl, #1
    83ec:	beq	8530 <coda_cursor_read_float_partial_array+0x7b0>
    83f0:	add	r0, r4, r5, lsl #2
    83f4:	sub	r4, r0, #4
    83f8:	add	r0, r8, r5, lsl #3
    83fc:	sub	r6, r0, #8
    8400:	ldrd	r0, [r6]
    8404:	bl	0 <__aeabi_ul2f>
    8408:	str	r0, [r4]
    840c:	ldrd	r0, [r6, #-8]
    8410:	bl	0 <__aeabi_ul2f>
    8414:	sub	r5, r5, #2
    8418:	str	r0, [r4, #-4]
    841c:	sub	r4, r4, #8
    8420:	sub	r6, r6, #16
    8424:	cmp	r5, #0
    8428:	bgt	8400 <coda_cursor_read_float_partial_array+0x680>
    842c:	b	8530 <coda_cursor_read_float_partial_array+0x7b0>
    8430:	mov	r0, r7
    8434:	mov	r1, r6
    8438:	mov	r2, sl
    843c:	mov	r3, r4
    8440:	bl	9074 <read_float_partial_array>
    8444:	cmp	r0, #0
    8448:	mvn	r6, #0
    844c:	moveq	r6, #0
    8450:	b	7e68 <coda_cursor_read_float_partial_array+0xe8>
    8454:	lsl	r9, sl, #3
    8458:	mov	r0, r9
    845c:	bl	0 <malloc>
    8460:	cmp	r0, #0
    8464:	beq	849c <coda_cursor_read_float_partial_array+0x71c>
    8468:	mov	r8, r0
    846c:	mov	r0, r7
    8470:	mov	r1, r6
    8474:	mov	r2, sl
    8478:	mov	r3, r8
    847c:	bl	9134 <read_double_partial_array>
    8480:	cmp	r0, #0
    8484:	bne	7f18 <coda_cursor_read_float_partial_array+0x198>
    8488:	cmp	sl, #1
    848c:	blt	8530 <coda_cursor_read_float_partial_array+0x7b0>
    8490:	bne	86b8 <coda_cursor_read_float_partial_array+0x938>
    8494:	mov	r0, sl
    8498:	b	8700 <coda_cursor_read_float_partial_array+0x980>
    849c:	movw	r1, #0
    84a0:	mvn	r0, #0
    84a4:	mov	r2, r9
    84a8:	mvn	r6, #0
    84ac:	movt	r1, #0
    84b0:	bl	0 <coda_set_error>
    84b4:	b	7e68 <coda_cursor_read_float_partial_array+0xe8>
    84b8:	add	r1, r8, sl, lsl #3
    84bc:	bic	r5, sl, #1
    84c0:	mvn	r7, #15
    84c4:	mvn	r6, #7
    84c8:	sub	r0, sl, r5
    84cc:	sub	r2, r1, #16
    84d0:	add	r1, r4, sl, lsl #2
    84d4:	sub	r3, r1, #8
    84d8:	mov	r1, r5
    84dc:	vld1.64	{d1-d2}, [r2], r7
    84e0:	subs	r1, r1, #2
    84e4:	vorr	d3, d1, d1
    84e8:	vcvt.f32.f64	s1, d2
    84ec:	vcvt.f32.f64	s0, d3
    84f0:	vst1.32	{d0}, [r3], r6
    84f4:	bne	84dc <coda_cursor_read_float_partial_array+0x75c>
    84f8:	cmp	r5, sl
    84fc:	beq	8530 <coda_cursor_read_float_partial_array+0x7b0>
    8500:	add	r1, r8, r0, lsl #3
    8504:	add	r2, r4, r0, lsl #2
    8508:	sub	r1, r1, #8
    850c:	sub	r2, r2, #4
    8510:	vldr	d16, [r1]
    8514:	sub	r0, r0, #1
    8518:	sub	r1, r1, #8
    851c:	cmp	r0, #0
    8520:	vcvt.f32.f64	s0, d16
    8524:	vstr	s0, [r2]
    8528:	sub	r2, r2, #4
    852c:	bgt	8510 <coda_cursor_read_float_partial_array+0x790>
    8530:	mov	r0, r8
    8534:	bl	0 <free>
    8538:	mov	r6, #0
    853c:	b	7e68 <coda_cursor_read_float_partial_array+0xe8>
    8540:	mov	r0, sl
    8544:	add	r1, r4, r0, lsl #2
    8548:	sub	r2, r4, #1
    854c:	sub	r1, r1, #4
    8550:	add	r3, r2, r0
    8554:	sub	r0, r0, #1
    8558:	ldrsb	r3, [r3]
    855c:	cmp	r0, #0
    8560:	vmov	s0, r3
    8564:	vcvt.f32.s32	s0, s0
    8568:	vstr	s0, [r1]
    856c:	sub	r1, r1, #4
    8570:	bgt	8550 <coda_cursor_read_float_partial_array+0x7d0>
    8574:	b	86b0 <coda_cursor_read_float_partial_array+0x930>
    8578:	mov	r0, sl
    857c:	add	r1, r4, r0, lsl #2
    8580:	sub	r2, r4, #1
    8584:	sub	r1, r1, #4
    8588:	ldrb	r3, [r2, r0]
    858c:	sub	r0, r0, #1
    8590:	cmp	r0, #0
    8594:	vmov	s0, r3
    8598:	vcvt.f32.u32	s0, s0
    859c:	vstr	s0, [r1]
    85a0:	sub	r1, r1, #4
    85a4:	bgt	8588 <coda_cursor_read_float_partial_array+0x808>
    85a8:	b	86b0 <coda_cursor_read_float_partial_array+0x930>
    85ac:	add	r1, r4, sl, lsl #1
    85b0:	bic	r5, sl, #3
    85b4:	mvn	r7, #7
    85b8:	mvn	r6, #15
    85bc:	sub	r0, sl, r5
    85c0:	sub	r2, r1, #8
    85c4:	add	r1, r4, sl, lsl #2
    85c8:	sub	r3, r1, #16
    85cc:	mov	r1, r5
    85d0:	vld1.16	{d16}, [r2], r7
    85d4:	subs	r1, r1, #4
    85d8:	vrev64.16	d16, d16
    85dc:	vmovl.s16	q8, d16
    85e0:	vcvt.f32.s32	q8, q8
    85e4:	vrev64.32	q8, q8
    85e8:	vext.8	q8, q8, q8, #8
    85ec:	vst1.32	{d16-d17}, [r3], r6
    85f0:	bne	85d0 <coda_cursor_read_float_partial_array+0x850>
    85f4:	cmp	r5, sl
    85f8:	beq	86b0 <coda_cursor_read_float_partial_array+0x930>
    85fc:	add	r1, r4, r0, lsl #1
    8600:	add	r2, r4, r0, lsl #2
    8604:	sub	r1, r1, #2
    8608:	sub	r2, r2, #4
    860c:	ldrsh	r3, [r1], #-2
    8610:	sub	r0, r0, #1
    8614:	cmp	r0, #0
    8618:	vmov	s0, r3
    861c:	vcvt.f32.s32	s0, s0
    8620:	vstr	s0, [r2]
    8624:	sub	r2, r2, #4
    8628:	bgt	860c <coda_cursor_read_float_partial_array+0x88c>
    862c:	b	86b0 <coda_cursor_read_float_partial_array+0x930>
    8630:	add	r1, r4, sl, lsl #1
    8634:	bic	r5, sl, #3
    8638:	mvn	r7, #7
    863c:	mvn	r6, #15
    8640:	sub	r0, sl, r5
    8644:	sub	r2, r1, #8
    8648:	add	r1, r4, sl, lsl #2
    864c:	sub	r3, r1, #16
    8650:	mov	r1, r5
    8654:	vld1.16	{d16}, [r2], r7
    8658:	subs	r1, r1, #4
    865c:	vrev64.16	d16, d16
    8660:	vmovl.u16	q8, d16
    8664:	vcvt.f32.u32	q8, q8
    8668:	vrev64.32	q8, q8
    866c:	vext.8	q8, q8, q8, #8
    8670:	vst1.32	{d16-d17}, [r3], r6
    8674:	bne	8654 <coda_cursor_read_float_partial_array+0x8d4>
    8678:	cmp	r5, sl
    867c:	beq	86b0 <coda_cursor_read_float_partial_array+0x930>
    8680:	add	r1, r4, r0, lsl #1
    8684:	add	r2, r4, r0, lsl #2
    8688:	sub	r1, r1, #2
    868c:	sub	r2, r2, #4
    8690:	ldrh	r3, [r1], #-2
    8694:	sub	r0, r0, #1
    8698:	cmp	r0, #0
    869c:	vmov	s0, r3
    86a0:	vcvt.f32.u32	s0, s0
    86a4:	vstr	s0, [r2]
    86a8:	sub	r2, r2, #4
    86ac:	bgt	8690 <coda_cursor_read_float_partial_array+0x910>
    86b0:	mov	r6, #0
    86b4:	b	7e68 <coda_cursor_read_float_partial_array+0xe8>
    86b8:	add	r1, r8, sl, lsl #3
    86bc:	bic	r5, sl, #1
    86c0:	mvn	r7, #15
    86c4:	mvn	r6, #7
    86c8:	sub	r0, sl, r5
    86cc:	sub	r2, r1, #16
    86d0:	add	r1, r4, sl, lsl #2
    86d4:	sub	r3, r1, #8
    86d8:	mov	r1, r5
    86dc:	vld1.64	{d1-d2}, [r2], r7
    86e0:	subs	r1, r1, #2
    86e4:	vorr	d3, d1, d1
    86e8:	vcvt.f32.f64	s1, d2
    86ec:	vcvt.f32.f64	s0, d3
    86f0:	vst1.32	{d0}, [r3], r6
    86f4:	bne	86dc <coda_cursor_read_float_partial_array+0x95c>
    86f8:	cmp	r5, sl
    86fc:	beq	8530 <coda_cursor_read_float_partial_array+0x7b0>
    8700:	add	r1, r8, r0, lsl #3
    8704:	add	r2, r4, r0, lsl #2
    8708:	sub	r1, r1, #8
    870c:	sub	r2, r2, #4
    8710:	vldr	d16, [r1]
    8714:	sub	r0, r0, #1
    8718:	sub	r1, r1, #8
    871c:	cmp	r0, #0
    8720:	vcvt.f32.f64	s0, d16
    8724:	vstr	s0, [r2]
    8728:	sub	r2, r2, #4
    872c:	bgt	8710 <coda_cursor_read_float_partial_array+0x990>
    8730:	b	8530 <coda_cursor_read_float_partial_array+0x7b0>
    8734:	.word	0x00000948
    8738:	.word	0x00000868

0000873c <coda_cursor_read_double_partial_array>:
    873c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8740:	add	fp, sp, #28
    8744:	sub	sp, sp, #28
    8748:	cmp	r0, #0
    874c:	beq	8804 <coda_cursor_read_double_partial_array+0xc8>
    8750:	mov	r7, r0
    8754:	ldr	r0, [r0, #4]
    8758:	cmp	r0, #1
    875c:	blt	8804 <coda_cursor_read_double_partial_array+0xc8>
    8760:	add	r0, r7, r0, lsl #4
    8764:	ldr	r4, [r0, #-8]
    8768:	cmp	r4, #0
    876c:	beq	8804 <coda_cursor_read_double_partial_array+0xc8>
    8770:	mov	r5, r3
    8774:	cmp	r3, #0
    8778:	beq	8830 <coda_cursor_read_double_partial_array+0xf4>
    877c:	ldr	r0, [r4]
    8780:	mov	r9, r2
    8784:	mov	r6, r1
    8788:	cmp	r0, #99	; 0x63
    878c:	ldrhi	r4, [r4, #4]
    8790:	ldr	r0, [r4, #8]
    8794:	cmp	r0, #1
    8798:	bne	8848 <coda_cursor_read_double_partial_array+0x10c>
    879c:	ldr	r0, [pc, #2248]	; 906c <coda_cursor_read_double_partial_array+0x930>
    87a0:	ldr	r1, [pc, r0]
    87a4:	bl	0 <__aeabi_read_tp>
    87a8:	ldr	r0, [r0, r1]
    87ac:	cmp	r0, #0
    87b0:	beq	8864 <coda_cursor_read_double_partial_array+0x128>
    87b4:	add	r1, sp, #24
    87b8:	mov	r0, r7
    87bc:	bl	0 <coda_cursor_get_num_elements>
    87c0:	cmp	r0, #0
    87c4:	bne	8820 <coda_cursor_read_double_partial_array+0xe4>
    87c8:	ldr	r3, [sp, #24]
    87cc:	cmp	r6, #0
    87d0:	bmi	89ec <coda_cursor_read_double_partial_array+0x2b0>
    87d4:	cmp	r3, r6
    87d8:	ble	89ec <coda_cursor_read_double_partial_array+0x2b0>
    87dc:	add	r0, r9, r6
    87e0:	cmp	r0, r3
    87e4:	ble	8864 <coda_cursor_read_double_partial_array+0x128>
    87e8:	movw	r1, #0
    87ec:	str	r3, [sp]
    87f0:	mvn	r0, #106	; 0x6a
    87f4:	mov	r2, r6
    87f8:	mov	r3, r9
    87fc:	movt	r1, #0
    8800:	b	881c <coda_cursor_read_double_partial_array+0xe0>
    8804:	movw	r1, #0
    8808:	movw	r2, #0
    880c:	mvn	r0, #99	; 0x63
    8810:	movw	r3, #5355	; 0x14eb
    8814:	movt	r1, #0
    8818:	movt	r2, #0
    881c:	bl	0 <coda_set_error>
    8820:	mvn	r6, #0
    8824:	mov	r0, r6
    8828:	sub	sp, fp, #28
    882c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8830:	movw	r1, #0
    8834:	movw	r2, #0
    8838:	mvn	r0, #99	; 0x63
    883c:	movw	r3, #5360	; 0x14f0
    8840:	movt	r1, #0
    8844:	b	8818 <coda_cursor_read_double_partial_array+0xdc>
    8848:	bl	0 <coda_type_get_class_name>
    884c:	movw	r1, #0
    8850:	mov	r2, r0
    8854:	movt	r1, #0
    8858:	mvn	r0, #104	; 0x68
    885c:	bl	0 <coda_set_error>
    8860:	b	8820 <coda_cursor_read_double_partial_array+0xe4>
    8864:	bl	0 <__aeabi_read_tp>
    8868:	ldr	r2, [r4, #40]	; 0x28
    886c:	mov	r8, #0
    8870:	ldr	r4, [r2, #8]
    8874:	ldr	r1, [r2, #12]
    8878:	bic	r3, r4, #1
    887c:	cmp	r3, #2
    8880:	bne	8898 <coda_cursor_read_double_partial_array+0x15c>
    8884:	ldr	r3, [pc, #2020]	; 9070 <coda_cursor_read_double_partial_array+0x934>
    8888:	ldr	r3, [pc, r3]
    888c:	ldr	r0, [r0, r3]
    8890:	cmp	r0, #0
    8894:	ldrne	r8, [r2, #48]	; 0x30
    8898:	cmp	r1, #9
    889c:	bhi	8a00 <coda_cursor_read_double_partial_array+0x2c4>
    88a0:	add	r0, pc, #0
    88a4:	ldr	pc, [r0, r1, lsl #2]
    88a8:	.word	0x000088d0
    88ac:	.word	0x00008a18
    88b0:	.word	0x00008b30
    88b4:	.word	0x00008bf0
    88b8:	.word	0x00008cb0
    88bc:	.word	0x00008d58
    88c0:	.word	0x00008e00
    88c4:	.word	0x00008ea4
    88c8:	.word	0x00008f48
    88cc:	.word	0x00008ffc
    88d0:	mov	r0, r7
    88d4:	mov	r1, r6
    88d8:	mov	r2, r9
    88dc:	mov	r3, r5
    88e0:	bl	5b8c <read_int8_partial_array>
    88e4:	mvn	r6, #0
    88e8:	cmp	r0, #0
    88ec:	bne	8824 <coda_cursor_read_double_partial_array+0xe8>
    88f0:	cmp	r9, #1
    88f4:	blt	8ff4 <coda_cursor_read_double_partial_array+0x8b8>
    88f8:	mov	r0, r9
    88fc:	beq	89b8 <coda_cursor_read_double_partial_array+0x27c>
    8900:	sub	r1, r9, #1
    8904:	bic	r0, r1, #-536870912	; 0xe0000000
    8908:	lsl	r3, r1, #3
    890c:	subs	r2, r1, r0
    8910:	add	r0, r5, r1, lsl #3
    8914:	movwne	r2, #1
    8918:	cmp	r3, r0
    891c:	mov	r0, r9
    8920:	bhi	89b8 <coda_cursor_read_double_partial_array+0x27c>
    8924:	cmp	r2, #0
    8928:	mov	r0, r9
    892c:	bne	89b8 <coda_cursor_read_double_partial_array+0x27c>
    8930:	add	r0, r5, r1
    8934:	cmp	r1, r0
    8938:	mov	r0, r9
    893c:	bhi	89b8 <coda_cursor_read_double_partial_array+0x27c>
    8940:	add	r0, r5, r9
    8944:	cmp	r0, r5
    8948:	bls	895c <coda_cursor_read_double_partial_array+0x220>
    894c:	add	r0, r5, r9, lsl #3
    8950:	cmp	r0, r5
    8954:	mov	r0, r9
    8958:	bhi	89b8 <coda_cursor_read_double_partial_array+0x27c>
    895c:	sub	r0, r9, #2
    8960:	bic	ip, r9, #1
    8964:	add	r7, sp, #8
    8968:	mvn	r6, #15
    896c:	add	r3, r5, r0, lsl #3
    8970:	add	r1, r5, r0
    8974:	sub	r0, r9, ip
    8978:	mov	r2, ip
    897c:	ldrh	r4, [r1], #-2
    8980:	subs	r2, r2, #2
    8984:	strh	r4, [sp, #8]
    8988:	vld1.16	{d16[0]}, [r7 :16]
    898c:	vmovl.u8	q8, d16
    8990:	vmovl.u16	q8, d16
    8994:	vrev64.32	d16, d16
    8998:	vshl.s32	d16, d16, #24
    899c:	vshr.s32	d0, d16, #24
    89a0:	vcvt.f64.s32	d17, s0
    89a4:	vcvt.f64.s32	d16, s1
    89a8:	vst1.64	{d16-d17}, [r3], r6
    89ac:	bne	897c <coda_cursor_read_double_partial_array+0x240>
    89b0:	cmp	ip, r9
    89b4:	beq	901c <coda_cursor_read_double_partial_array+0x8e0>
    89b8:	add	r1, r5, r0, lsl #3
    89bc:	sub	r2, r5, #1
    89c0:	sub	r1, r1, #8
    89c4:	add	r3, r2, r0
    89c8:	sub	r0, r0, #1
    89cc:	ldrsb	r3, [r3]
    89d0:	cmp	r0, #0
    89d4:	vmov	s0, r3
    89d8:	vcvt.f64.s32	d16, s0
    89dc:	vstr	d16, [r1]
    89e0:	sub	r1, r1, #8
    89e4:	bgt	89c4 <coda_cursor_read_double_partial_array+0x288>
    89e8:	b	901c <coda_cursor_read_double_partial_array+0x8e0>
    89ec:	movw	r1, #0
    89f0:	mvn	r0, #106	; 0x6a
    89f4:	mov	r2, r6
    89f8:	movt	r1, #0
    89fc:	b	881c <coda_cursor_read_double_partial_array+0xe0>
    8a00:	mov	r0, r1
    8a04:	bl	0 <coda_type_get_native_type_name>
    8a08:	movw	r1, #0
    8a0c:	mov	r2, r0
    8a10:	movt	r1, #0
    8a14:	b	8858 <coda_cursor_read_double_partial_array+0x11c>
    8a18:	mov	r0, r7
    8a1c:	mov	r1, r6
    8a20:	mov	r2, r9
    8a24:	mov	r3, r5
    8a28:	bl	5e00 <read_uint8_partial_array>
    8a2c:	mvn	r6, #0
    8a30:	cmp	r0, #0
    8a34:	bne	8824 <coda_cursor_read_double_partial_array+0xe8>
    8a38:	cmp	r9, #1
    8a3c:	blt	8ff4 <coda_cursor_read_double_partial_array+0x8b8>
    8a40:	mov	r0, r9
    8a44:	beq	8b00 <coda_cursor_read_double_partial_array+0x3c4>
    8a48:	sub	r1, r9, #1
    8a4c:	bic	r0, r1, #-536870912	; 0xe0000000
    8a50:	lsl	r3, r1, #3
    8a54:	subs	r2, r1, r0
    8a58:	add	r0, r5, r1, lsl #3
    8a5c:	movwne	r2, #1
    8a60:	cmp	r3, r0
    8a64:	mov	r0, r9
    8a68:	bhi	8b00 <coda_cursor_read_double_partial_array+0x3c4>
    8a6c:	cmp	r2, #0
    8a70:	mov	r0, r9
    8a74:	bne	8b00 <coda_cursor_read_double_partial_array+0x3c4>
    8a78:	add	r0, r5, r1
    8a7c:	cmp	r1, r0
    8a80:	mov	r0, r9
    8a84:	bhi	8b00 <coda_cursor_read_double_partial_array+0x3c4>
    8a88:	add	r0, r5, r9
    8a8c:	cmp	r0, r5
    8a90:	bls	8aa4 <coda_cursor_read_double_partial_array+0x368>
    8a94:	add	r0, r5, r9, lsl #3
    8a98:	cmp	r0, r5
    8a9c:	mov	r0, r9
    8aa0:	bhi	8b00 <coda_cursor_read_double_partial_array+0x3c4>
    8aa4:	sub	r0, r9, #2
    8aa8:	vmov.i32	d16, #255	; 0x000000ff
    8aac:	bic	ip, r9, #1
    8ab0:	add	r7, sp, #12
    8ab4:	mvn	r6, #15
    8ab8:	add	r3, r5, r0, lsl #3
    8abc:	add	r1, r5, r0
    8ac0:	sub	r0, r9, ip
    8ac4:	mov	r2, ip
    8ac8:	ldrh	r4, [r1], #-2
    8acc:	subs	r2, r2, #2
    8ad0:	strh	r4, [sp, #12]
    8ad4:	vld1.16	{d17[0]}, [r7 :16]
    8ad8:	vmovl.u8	q9, d17
    8adc:	vmovl.u16	q9, d18
    8ae0:	vrev64.32	d17, d18
    8ae4:	vand	d0, d17, d16
    8ae8:	vcvt.f64.u32	d19, s0
    8aec:	vcvt.f64.u32	d18, s1
    8af0:	vst1.64	{d18-d19}, [r3], r6
    8af4:	bne	8ac8 <coda_cursor_read_double_partial_array+0x38c>
    8af8:	cmp	ip, r9
    8afc:	beq	901c <coda_cursor_read_double_partial_array+0x8e0>
    8b00:	add	r1, r5, r0, lsl #3
    8b04:	sub	r2, r5, #1
    8b08:	sub	r1, r1, #8
    8b0c:	ldrb	r3, [r2, r0]
    8b10:	sub	r0, r0, #1
    8b14:	cmp	r0, #0
    8b18:	vmov	s0, r3
    8b1c:	vcvt.f64.u32	d16, s0
    8b20:	vstr	d16, [r1]
    8b24:	sub	r1, r1, #8
    8b28:	bgt	8b0c <coda_cursor_read_double_partial_array+0x3d0>
    8b2c:	b	901c <coda_cursor_read_double_partial_array+0x8e0>
    8b30:	mov	r0, r7
    8b34:	mov	r1, r6
    8b38:	mov	r2, r9
    8b3c:	mov	r3, r5
    8b40:	bl	625c <read_int16_partial_array>
    8b44:	mvn	r6, #0
    8b48:	cmp	r0, #0
    8b4c:	bne	8824 <coda_cursor_read_double_partial_array+0xe8>
    8b50:	cmp	r9, #1
    8b54:	blt	8ff4 <coda_cursor_read_double_partial_array+0x8b8>
    8b58:	mov	r0, r9
    8b5c:	beq	8bbc <coda_cursor_read_double_partial_array+0x480>
    8b60:	add	r1, r5, r9, lsl #1
    8b64:	bic	ip, r9, #1
    8b68:	add	r7, sp, #16
    8b6c:	mvn	r6, #15
    8b70:	sub	r0, r9, ip
    8b74:	sub	r2, r1, #4
    8b78:	add	r1, r5, r9, lsl #3
    8b7c:	sub	r3, r1, #16
    8b80:	mov	r1, ip
    8b84:	ldr	r4, [r2], #-4
    8b88:	subs	r1, r1, #2
    8b8c:	str	r4, [sp, #16]
    8b90:	vld1.32	{d16[0]}, [r7 :32]
    8b94:	vmovl.u16	q8, d16
    8b98:	vrev64.32	d16, d16
    8b9c:	vshl.s32	d16, d16, #16
    8ba0:	vshr.s32	d0, d16, #16
    8ba4:	vcvt.f64.s32	d17, s0
    8ba8:	vcvt.f64.s32	d16, s1
    8bac:	vst1.64	{d16-d17}, [r3], r6
    8bb0:	bne	8b84 <coda_cursor_read_double_partial_array+0x448>
    8bb4:	cmp	ip, r9
    8bb8:	beq	901c <coda_cursor_read_double_partial_array+0x8e0>
    8bbc:	add	r1, r5, r0, lsl #1
    8bc0:	add	r2, r5, r0, lsl #3
    8bc4:	sub	r1, r1, #2
    8bc8:	sub	r2, r2, #8
    8bcc:	ldrsh	r3, [r1], #-2
    8bd0:	sub	r0, r0, #1
    8bd4:	cmp	r0, #0
    8bd8:	vmov	s0, r3
    8bdc:	vcvt.f64.s32	d16, s0
    8be0:	vstr	d16, [r2]
    8be4:	sub	r2, r2, #8
    8be8:	bgt	8bcc <coda_cursor_read_double_partial_array+0x490>
    8bec:	b	901c <coda_cursor_read_double_partial_array+0x8e0>
    8bf0:	mov	r0, r7
    8bf4:	mov	r1, r6
    8bf8:	mov	r2, r9
    8bfc:	mov	r3, r5
    8c00:	bl	65d0 <read_uint16_partial_array>
    8c04:	mvn	r6, #0
    8c08:	cmp	r0, #0
    8c0c:	bne	8824 <coda_cursor_read_double_partial_array+0xe8>
    8c10:	cmp	r9, #1
    8c14:	blt	8ff4 <coda_cursor_read_double_partial_array+0x8b8>
    8c18:	mov	r0, r9
    8c1c:	beq	8c7c <coda_cursor_read_double_partial_array+0x540>
    8c20:	add	r1, r5, r9, lsl #1
    8c24:	vmov.i32	d16, #65535	; 0x0000ffff
    8c28:	bic	ip, r9, #1
    8c2c:	add	r7, sp, #20
    8c30:	mvn	r6, #15
    8c34:	sub	r0, r9, ip
    8c38:	sub	r2, r1, #4
    8c3c:	add	r1, r5, r9, lsl #3
    8c40:	sub	r3, r1, #16
    8c44:	mov	r1, ip
    8c48:	ldr	r4, [r2], #-4
    8c4c:	subs	r1, r1, #2
    8c50:	str	r4, [sp, #20]
    8c54:	vld1.32	{d17[0]}, [r7 :32]
    8c58:	vmovl.u16	q9, d17
    8c5c:	vrev64.32	d17, d18
    8c60:	vand	d0, d17, d16
    8c64:	vcvt.f64.u32	d19, s0
    8c68:	vcvt.f64.u32	d18, s1
    8c6c:	vst1.64	{d18-d19}, [r3], r6
    8c70:	bne	8c48 <coda_cursor_read_double_partial_array+0x50c>
    8c74:	cmp	ip, r9
    8c78:	beq	901c <coda_cursor_read_double_partial_array+0x8e0>
    8c7c:	add	r1, r5, r0, lsl #1
    8c80:	add	r2, r5, r0, lsl #3
    8c84:	sub	r1, r1, #2
    8c88:	sub	r2, r2, #8
    8c8c:	ldrh	r3, [r1], #-2
    8c90:	sub	r0, r0, #1
    8c94:	cmp	r0, #0
    8c98:	vmov	s0, r3
    8c9c:	vcvt.f64.u32	d16, s0
    8ca0:	vstr	d16, [r2]
    8ca4:	sub	r2, r2, #8
    8ca8:	bgt	8c8c <coda_cursor_read_double_partial_array+0x550>
    8cac:	b	901c <coda_cursor_read_double_partial_array+0x8e0>
    8cb0:	mov	r0, r7
    8cb4:	mov	r1, r6
    8cb8:	mov	r2, r9
    8cbc:	mov	r3, r5
    8cc0:	bl	6bc0 <read_int32_partial_array>
    8cc4:	mvn	r6, #0
    8cc8:	cmp	r0, #0
    8ccc:	bne	8824 <coda_cursor_read_double_partial_array+0xe8>
    8cd0:	cmp	r9, #1
    8cd4:	blt	8ff4 <coda_cursor_read_double_partial_array+0x8b8>
    8cd8:	mov	r0, r9
    8cdc:	beq	8d28 <coda_cursor_read_double_partial_array+0x5ec>
    8ce0:	add	r1, r5, r9, lsl #2
    8ce4:	bic	r4, r9, #1
    8ce8:	mvn	r7, #7
    8cec:	mvn	r6, #15
    8cf0:	sub	r0, r9, r4
    8cf4:	sub	r2, r1, #8
    8cf8:	add	r1, r5, r9, lsl #3
    8cfc:	sub	r3, r1, #16
    8d00:	mov	r1, r4
    8d04:	vld1.32	{d16}, [r2], r7
    8d08:	subs	r1, r1, #2
    8d0c:	vrev64.32	d0, d16
    8d10:	vcvt.f64.s32	d17, s0
    8d14:	vcvt.f64.s32	d16, s1
    8d18:	vst1.64	{d16-d17}, [r3], r6
    8d1c:	bne	8d04 <coda_cursor_read_double_partial_array+0x5c8>
    8d20:	cmp	r4, r9
    8d24:	beq	901c <coda_cursor_read_double_partial_array+0x8e0>
    8d28:	add	r1, r5, r0, lsl #3
    8d2c:	sub	r2, r5, #4
    8d30:	sub	r1, r1, #8
    8d34:	add	r3, r2, r0, lsl #2
    8d38:	sub	r0, r0, #1
    8d3c:	cmp	r0, #0
    8d40:	vldr	s0, [r3]
    8d44:	vcvt.f64.s32	d16, s0
    8d48:	vstr	d16, [r1]
    8d4c:	sub	r1, r1, #8
    8d50:	bgt	8d34 <coda_cursor_read_double_partial_array+0x5f8>
    8d54:	b	901c <coda_cursor_read_double_partial_array+0x8e0>
    8d58:	mov	r0, r7
    8d5c:	mov	r1, r6
    8d60:	mov	r2, r9
    8d64:	mov	r3, r5
    8d68:	bl	7000 <read_uint32_partial_array>
    8d6c:	mvn	r6, #0
    8d70:	cmp	r0, #0
    8d74:	bne	8824 <coda_cursor_read_double_partial_array+0xe8>
    8d78:	cmp	r9, #1
    8d7c:	blt	8ff4 <coda_cursor_read_double_partial_array+0x8b8>
    8d80:	mov	r0, r9
    8d84:	beq	8dd0 <coda_cursor_read_double_partial_array+0x694>
    8d88:	add	r1, r5, r9, lsl #2
    8d8c:	bic	r4, r9, #1
    8d90:	mvn	r7, #7
    8d94:	mvn	r6, #15
    8d98:	sub	r0, r9, r4
    8d9c:	sub	r2, r1, #8
    8da0:	add	r1, r5, r9, lsl #3
    8da4:	sub	r3, r1, #16
    8da8:	mov	r1, r4
    8dac:	vld1.32	{d16}, [r2], r7
    8db0:	subs	r1, r1, #2
    8db4:	vrev64.32	d0, d16
    8db8:	vcvt.f64.u32	d17, s0
    8dbc:	vcvt.f64.u32	d16, s1
    8dc0:	vst1.64	{d16-d17}, [r3], r6
    8dc4:	bne	8dac <coda_cursor_read_double_partial_array+0x670>
    8dc8:	cmp	r4, r9
    8dcc:	beq	901c <coda_cursor_read_double_partial_array+0x8e0>
    8dd0:	add	r1, r5, r0, lsl #3
    8dd4:	sub	r2, r5, #4
    8dd8:	sub	r1, r1, #8
    8ddc:	add	r3, r2, r0, lsl #2
    8de0:	sub	r0, r0, #1
    8de4:	cmp	r0, #0
    8de8:	vldr	s0, [r3]
    8dec:	vcvt.f64.u32	d16, s0
    8df0:	vstr	d16, [r1]
    8df4:	sub	r1, r1, #8
    8df8:	bgt	8ddc <coda_cursor_read_double_partial_array+0x6a0>
    8dfc:	b	901c <coda_cursor_read_double_partial_array+0x8e0>
    8e00:	mov	r0, r7
    8e04:	mov	r1, r6
    8e08:	mov	r2, r9
    8e0c:	mov	r3, r5
    8e10:	bl	77b4 <read_int64_partial_array>
    8e14:	mvn	r6, #0
    8e18:	cmp	r0, #0
    8e1c:	bne	8824 <coda_cursor_read_double_partial_array+0xe8>
    8e20:	cmp	r9, #1
    8e24:	blt	8ff4 <coda_cursor_read_double_partial_array+0x8b8>
    8e28:	tst	r9, #1
    8e2c:	mov	r6, r9
    8e30:	beq	8e4c <coda_cursor_read_double_partial_array+0x710>
    8e34:	sub	r6, r9, #1
    8e38:	mov	r4, r5
    8e3c:	ldr	r0, [r4, r6, lsl #3]!
    8e40:	ldr	r1, [r4, #4]
    8e44:	bl	0 <__aeabi_l2d>
    8e48:	strd	r0, [r4]
    8e4c:	cmp	r9, #1
    8e50:	beq	901c <coda_cursor_read_double_partial_array+0x8e0>
    8e54:	add	r0, r5, r6, lsl #3
    8e58:	sub	r6, r6, #1
    8e5c:	sub	r4, r0, #16
    8e60:	ldr	r0, [r4, #8]
    8e64:	ldr	r1, [r4, #12]
    8e68:	ldr	sl, [r4]
    8e6c:	ldr	r7, [r4, #4]
    8e70:	bl	0 <__aeabi_l2d>
    8e74:	strd	r0, [r4, #8]
    8e78:	mov	r0, sl
    8e7c:	mov	r1, r7
    8e80:	bl	0 <__aeabi_l2d>
    8e84:	strd	r0, [r4]
    8e88:	sub	r1, r6, #1
    8e8c:	sub	r0, r6, #2
    8e90:	sub	r4, r4, #16
    8e94:	cmp	r1, #0
    8e98:	mov	r6, r0
    8e9c:	bgt	8e60 <coda_cursor_read_double_partial_array+0x724>
    8ea0:	b	901c <coda_cursor_read_double_partial_array+0x8e0>
    8ea4:	mov	r0, r7
    8ea8:	mov	r1, r6
    8eac:	mov	r2, r9
    8eb0:	mov	r3, r5
    8eb4:	bl	7ce4 <read_uint64_partial_array>
    8eb8:	mvn	r6, #0
    8ebc:	cmp	r0, #0
    8ec0:	bne	8824 <coda_cursor_read_double_partial_array+0xe8>
    8ec4:	cmp	r9, #1
    8ec8:	blt	8ff4 <coda_cursor_read_double_partial_array+0x8b8>
    8ecc:	tst	r9, #1
    8ed0:	mov	r6, r9
    8ed4:	beq	8ef0 <coda_cursor_read_double_partial_array+0x7b4>
    8ed8:	sub	r6, r9, #1
    8edc:	mov	r4, r5
    8ee0:	ldr	r0, [r4, r6, lsl #3]!
    8ee4:	ldr	r1, [r4, #4]
    8ee8:	bl	0 <__aeabi_ul2d>
    8eec:	strd	r0, [r4]
    8ef0:	cmp	r9, #1
    8ef4:	beq	901c <coda_cursor_read_double_partial_array+0x8e0>
    8ef8:	add	r0, r5, r6, lsl #3
    8efc:	sub	r6, r6, #1
    8f00:	sub	r4, r0, #16
    8f04:	ldr	r0, [r4, #8]
    8f08:	ldr	r1, [r4, #12]
    8f0c:	ldr	sl, [r4]
    8f10:	ldr	r7, [r4, #4]
    8f14:	bl	0 <__aeabi_ul2d>
    8f18:	strd	r0, [r4, #8]
    8f1c:	mov	r0, sl
    8f20:	mov	r1, r7
    8f24:	bl	0 <__aeabi_ul2d>
    8f28:	strd	r0, [r4]
    8f2c:	sub	r1, r6, #1
    8f30:	sub	r0, r6, #2
    8f34:	sub	r4, r4, #16
    8f38:	cmp	r1, #0
    8f3c:	mov	r6, r0
    8f40:	bgt	8f04 <coda_cursor_read_double_partial_array+0x7c8>
    8f44:	b	901c <coda_cursor_read_double_partial_array+0x8e0>
    8f48:	mov	r0, r7
    8f4c:	mov	r1, r6
    8f50:	mov	r2, r9
    8f54:	mov	r3, r5
    8f58:	bl	9074 <read_float_partial_array>
    8f5c:	mvn	r6, #0
    8f60:	cmp	r0, #0
    8f64:	bne	8824 <coda_cursor_read_double_partial_array+0xe8>
    8f68:	cmp	r9, #1
    8f6c:	blt	8ff4 <coda_cursor_read_double_partial_array+0x8b8>
    8f70:	mov	r0, r9
    8f74:	beq	8fc0 <coda_cursor_read_double_partial_array+0x884>
    8f78:	add	r1, r5, r9, lsl #2
    8f7c:	bic	r4, r9, #1
    8f80:	mvn	r7, #7
    8f84:	mvn	r6, #15
    8f88:	sub	r0, r9, r4
    8f8c:	sub	r2, r1, #8
    8f90:	add	r1, r5, r9, lsl #3
    8f94:	sub	r3, r1, #16
    8f98:	mov	r1, r4
    8f9c:	vld1.32	{d16}, [r2], r7
    8fa0:	subs	r1, r1, #2
    8fa4:	vrev64.32	d0, d16
    8fa8:	vcvt.f64.f32	d17, s0
    8fac:	vcvt.f64.f32	d16, s1
    8fb0:	vst1.64	{d16-d17}, [r3], r6
    8fb4:	bne	8f9c <coda_cursor_read_double_partial_array+0x860>
    8fb8:	cmp	r4, r9
    8fbc:	beq	901c <coda_cursor_read_double_partial_array+0x8e0>
    8fc0:	add	r1, r5, r0, lsl #2
    8fc4:	add	r2, r5, r0, lsl #3
    8fc8:	sub	r1, r1, #4
    8fcc:	sub	r2, r2, #8
    8fd0:	vldr	s0, [r1]
    8fd4:	sub	r0, r0, #1
    8fd8:	sub	r1, r1, #4
    8fdc:	cmp	r0, #0
    8fe0:	vcvt.f64.f32	d16, s0
    8fe4:	vstr	d16, [r2]
    8fe8:	sub	r2, r2, #8
    8fec:	bgt	8fd0 <coda_cursor_read_double_partial_array+0x894>
    8ff0:	b	901c <coda_cursor_read_double_partial_array+0x8e0>
    8ff4:	mov	r6, #0
    8ff8:	b	8824 <coda_cursor_read_double_partial_array+0xe8>
    8ffc:	mov	r0, r7
    9000:	mov	r1, r6
    9004:	mov	r2, r9
    9008:	mov	r3, r5
    900c:	bl	9134 <read_double_partial_array>
    9010:	mvn	r6, #0
    9014:	cmp	r0, #0
    9018:	bne	8824 <coda_cursor_read_double_partial_array+0xe8>
    901c:	mov	r6, #0
    9020:	cmp	r8, #0
    9024:	beq	8824 <coda_cursor_read_double_partial_array+0xe8>
    9028:	cmp	r9, #1
    902c:	bge	9050 <coda_cursor_read_double_partial_array+0x914>
    9030:	b	8824 <coda_cursor_read_double_partial_array+0xe8>
    9034:	vldmia	r8, {d17-d19}
    9038:	vmul.f64	d16, d16, d17
    903c:	vdiv.f64	d16, d16, d18
    9040:	vadd.f64	d0, d16, d19
    9044:	vstmia	r5!, {d0}
    9048:	subs	r9, r9, #1
    904c:	beq	8824 <coda_cursor_read_double_partial_array+0xe8>
    9050:	vldr	d16, [r5]
    9054:	vldr	d17, [r8, #24]
    9058:	vcmp.f64	d16, d17
    905c:	vmrs	APSR_nzcv, fpscr
    9060:	bne	9034 <coda_cursor_read_double_partial_array+0x8f8>
    9064:	bl	0 <coda_NaN>
    9068:	b	9044 <coda_cursor_read_double_partial_array+0x908>
    906c:	.word	0x000008c4
    9070:	.word	0x000007e0

00009074 <read_float_partial_array>:
    9074:	push	{fp, lr}
    9078:	mov	fp, sp
    907c:	ldr	ip, [r0, #4]
    9080:	add	ip, r0, ip, lsl #4
    9084:	ldr	ip, [ip, #-8]
    9088:	ldr	ip, [ip]
    908c:	sub	lr, ip, #100	; 0x64
    9090:	cmp	lr, #5
    9094:	bhi	90c0 <read_float_partial_array+0x4c>
    9098:	add	ip, pc, #0
    909c:	ldr	pc, [ip, lr, lsl #2]
    90a0:	.word	0x000090b8
    90a4:	.word	0x000090f8
    90a8:	.word	0x000090e0
    90ac:	.word	0x000090f0
    90b0:	.word	0x000090d8
    90b4:	.word	0x0000910c
    90b8:	pop	{fp, lr}
    90bc:	b	0 <coda_mem_cursor_read_float_partial_array>
    90c0:	cmp	ip, #1
    90c4:	beq	90e8 <read_float_partial_array+0x74>
    90c8:	cmp	ip, #0
    90cc:	bne	9114 <read_float_partial_array+0xa0>
    90d0:	pop	{fp, lr}
    90d4:	b	0 <coda_ascii_cursor_read_float_partial_array>
    90d8:	pop	{fp, lr}
    90dc:	b	0 <coda_netcdf_cursor_read_float_partial_array>
    90e0:	mvn	r0, #12
    90e4:	b	90fc <read_float_partial_array+0x88>
    90e8:	pop	{fp, lr}
    90ec:	b	0 <coda_bin_cursor_read_float_partial_array>
    90f0:	pop	{fp, lr}
    90f4:	b	0 <coda_cdf_cursor_read_float_partial_array>
    90f8:	mvn	r0, #10
    90fc:	mov	r1, #0
    9100:	bl	0 <coda_set_error>
    9104:	mvn	r0, #0
    9108:	pop	{fp, pc}
    910c:	pop	{fp, lr}
    9110:	b	0 <coda_grib_cursor_read_float_partial_array>
    9114:	movw	r0, #0
    9118:	movw	r1, #0
    911c:	movw	r3, #0
    9120:	movw	r2, #1674	; 0x68a
    9124:	movt	r0, #0
    9128:	movt	r1, #0
    912c:	movt	r3, #0
    9130:	bl	0 <__assert_fail>

00009134 <read_double_partial_array>:
    9134:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
    9138:	add	fp, sp, #24
    913c:	sub	sp, sp, #528	; 0x210
    9140:	mov	r6, r1
    9144:	mov	r1, r0
    9148:	ldr	r0, [r0, #4]
    914c:	mov	r5, r2
    9150:	mov	r4, r3
    9154:	add	r0, r1, r0, lsl #4
    9158:	ldr	r2, [r0, #-8]
    915c:	ldr	r0, [r2]
    9160:	cmp	r0, #99	; 0x63
    9164:	ldrhi	r2, [r2, #4]
    9168:	ldr	r2, [r2, #40]	; 0x28
    916c:	ldr	r2, [r2, #8]
    9170:	cmp	r2, #6
    9174:	bne	91f4 <read_double_partial_array+0xc0>
    9178:	mov	r0, sp
    917c:	mov	r2, #520	; 0x208
    9180:	bl	0 <memcpy>
    9184:	cmp	r5, #1
    9188:	blt	9238 <read_double_partial_array+0x104>
    918c:	mov	r0, sp
    9190:	mov	r1, r6
    9194:	bl	0 <coda_cursor_goto_array_element_by_index>
    9198:	mvn	r8, #0
    919c:	cmp	r0, #0
    91a0:	bne	92bc <read_double_partial_array+0x188>
    91a4:	sub	r6, r5, #1
    91a8:	mov	r7, #0
    91ac:	mov	r9, sp
    91b0:	b	91c4 <read_double_partial_array+0x90>
    91b4:	add	r7, r7, #1
    91b8:	add	r4, r4, #8
    91bc:	cmp	r5, r7
    91c0:	beq	9238 <read_double_partial_array+0x104>
    91c4:	mov	r0, r9
    91c8:	mov	r1, r4
    91cc:	bl	1694 <read_double>
    91d0:	cmp	r0, #0
    91d4:	bne	92bc <read_double_partial_array+0x188>
    91d8:	cmp	r7, r6
    91dc:	bge	91b4 <read_double_partial_array+0x80>
    91e0:	mov	r0, r9
    91e4:	bl	0 <coda_cursor_goto_next_array_element>
    91e8:	cmp	r0, #0
    91ec:	beq	91b4 <read_double_partial_array+0x80>
    91f0:	b	92bc <read_double_partial_array+0x188>
    91f4:	sub	r2, r0, #100	; 0x64
    91f8:	cmp	r2, #4
    91fc:	bhi	9240 <read_double_partial_array+0x10c>
    9200:	add	r0, pc, #0
    9204:	ldr	pc, [r0, r2, lsl #2]
    9208:	.word	0x0000921c
    920c:	.word	0x000092ac
    9210:	.word	0x00009288
    9214:	.word	0x00009290
    9218:	.word	0x0000926c
    921c:	mov	r0, r1
    9220:	mov	r1, r6
    9224:	mov	r2, r5
    9228:	mov	r3, r4
    922c:	sub	sp, fp, #24
    9230:	pop	{r4, r5, r6, r7, r8, r9, fp, lr}
    9234:	b	0 <coda_mem_cursor_read_double_partial_array>
    9238:	mov	r8, #0
    923c:	b	92bc <read_double_partial_array+0x188>
    9240:	cmp	r0, #1
    9244:	beq	92c8 <read_double_partial_array+0x194>
    9248:	cmp	r0, #0
    924c:	bne	92e4 <read_double_partial_array+0x1b0>
    9250:	mov	r0, r1
    9254:	mov	r1, r6
    9258:	mov	r2, r5
    925c:	mov	r3, r4
    9260:	sub	sp, fp, #24
    9264:	pop	{r4, r5, r6, r7, r8, r9, fp, lr}
    9268:	b	0 <coda_ascii_cursor_read_double_partial_array>
    926c:	mov	r0, r1
    9270:	mov	r1, r6
    9274:	mov	r2, r5
    9278:	mov	r3, r4
    927c:	sub	sp, fp, #24
    9280:	pop	{r4, r5, r6, r7, r8, r9, fp, lr}
    9284:	b	0 <coda_netcdf_cursor_read_double_partial_array>
    9288:	mvn	r0, #12
    928c:	b	92b0 <read_double_partial_array+0x17c>
    9290:	mov	r0, r1
    9294:	mov	r1, r6
    9298:	mov	r2, r5
    929c:	mov	r3, r4
    92a0:	sub	sp, fp, #24
    92a4:	pop	{r4, r5, r6, r7, r8, r9, fp, lr}
    92a8:	b	0 <coda_cdf_cursor_read_double_partial_array>
    92ac:	mvn	r0, #10
    92b0:	mov	r1, #0
    92b4:	bl	0 <coda_set_error>
    92b8:	mvn	r8, #0
    92bc:	mov	r0, r8
    92c0:	sub	sp, fp, #24
    92c4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
    92c8:	mov	r0, r1
    92cc:	mov	r1, r6
    92d0:	mov	r2, r5
    92d4:	mov	r3, r4
    92d8:	sub	sp, fp, #24
    92dc:	pop	{r4, r5, r6, r7, r8, r9, fp, lr}
    92e0:	b	0 <coda_bin_cursor_read_double_partial_array>
    92e4:	movw	r0, #0
    92e8:	movw	r1, #0
    92ec:	movw	r3, #0
    92f0:	movw	r2, #1718	; 0x6b6
    92f4:	movt	r0, #0
    92f8:	movt	r1, #0
    92fc:	movt	r3, #0
    9300:	bl	0 <__assert_fail>

00009304 <coda_cursor_read_char_partial_array>:
    9304:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
    9308:	add	fp, sp, #24
    930c:	sub	sp, sp, #8
    9310:	cmp	r0, #0
    9314:	beq	93cc <coda_cursor_read_char_partial_array+0xc8>
    9318:	mov	r7, r0
    931c:	ldr	r0, [r0, #4]
    9320:	cmp	r0, #1
    9324:	blt	93cc <coda_cursor_read_char_partial_array+0xc8>
    9328:	add	r0, r7, r0, lsl #4
    932c:	ldr	r4, [r0, #-8]
    9330:	cmp	r4, #0
    9334:	beq	93cc <coda_cursor_read_char_partial_array+0xc8>
    9338:	mov	r6, r3
    933c:	cmp	r3, #0
    9340:	beq	93f4 <coda_cursor_read_char_partial_array+0xf0>
    9344:	ldr	r0, [r4]
    9348:	mov	r8, r2
    934c:	mov	r5, r1
    9350:	cmp	r0, #99	; 0x63
    9354:	ldrhi	r4, [r4, #4]
    9358:	ldr	r0, [r4, #8]
    935c:	cmp	r0, #1
    9360:	bne	940c <coda_cursor_read_char_partial_array+0x108>
    9364:	ldr	r0, [pc, #552]	; 9594 <coda_cursor_read_char_partial_array+0x290>
    9368:	ldr	r1, [pc, r0]
    936c:	bl	0 <__aeabi_read_tp>
    9370:	ldr	r0, [r0, r1]
    9374:	cmp	r0, #0
    9378:	beq	9420 <coda_cursor_read_char_partial_array+0x11c>
    937c:	add	r1, sp, #4
    9380:	mov	r0, r7
    9384:	bl	0 <coda_cursor_get_num_elements>
    9388:	cmp	r0, #0
    938c:	bne	93e8 <coda_cursor_read_char_partial_array+0xe4>
    9390:	ldr	r3, [sp, #4]
    9394:	cmp	r5, #0
    9398:	bmi	94d4 <coda_cursor_read_char_partial_array+0x1d0>
    939c:	cmp	r3, r5
    93a0:	ble	94d4 <coda_cursor_read_char_partial_array+0x1d0>
    93a4:	add	r0, r8, r5
    93a8:	cmp	r0, r3
    93ac:	ble	9420 <coda_cursor_read_char_partial_array+0x11c>
    93b0:	movw	r1, #0
    93b4:	str	r3, [sp]
    93b8:	mvn	r0, #106	; 0x6a
    93bc:	mov	r2, r5
    93c0:	mov	r3, r8
    93c4:	movt	r1, #0
    93c8:	b	93e4 <coda_cursor_read_char_partial_array+0xe0>
    93cc:	movw	r1, #0
    93d0:	movw	r2, #0
    93d4:	mvn	r0, #99	; 0x63
    93d8:	movw	r3, #5542	; 0x15a6
    93dc:	movt	r1, #0
    93e0:	movt	r2, #0
    93e4:	bl	0 <coda_set_error>
    93e8:	mvn	r0, #0
    93ec:	sub	sp, fp, #24
    93f0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
    93f4:	movw	r1, #0
    93f8:	movw	r2, #0
    93fc:	mvn	r0, #99	; 0x63
    9400:	movw	r3, #5547	; 0x15ab
    9404:	movt	r1, #0
    9408:	b	93e0 <coda_cursor_read_char_partial_array+0xdc>
    940c:	bl	0 <coda_type_get_class_name>
    9410:	movw	r1, #0
    9414:	mov	r2, r0
    9418:	movt	r1, #0
    941c:	b	94c8 <coda_cursor_read_char_partial_array+0x1c4>
    9420:	bl	0 <__aeabi_read_tp>
    9424:	ldr	r1, [r4, #40]	; 0x28
    9428:	ldr	r2, [r1, #8]
    942c:	bic	r2, r2, #1
    9430:	cmp	r2, #2
    9434:	bne	945c <coda_cursor_read_char_partial_array+0x158>
    9438:	ldr	r2, [pc, #344]	; 9598 <coda_cursor_read_char_partial_array+0x294>
    943c:	ldr	r2, [pc, r2]
    9440:	ldr	r0, [r0, r2]
    9444:	cmp	r0, #0
    9448:	beq	945c <coda_cursor_read_char_partial_array+0x158>
    944c:	ldr	r2, [r1, #48]	; 0x30
    9450:	mov	r0, #9
    9454:	cmp	r2, #0
    9458:	bne	94b8 <coda_cursor_read_char_partial_array+0x1b4>
    945c:	ldr	r0, [r1, #12]
    9460:	cmp	r0, #10
    9464:	bne	94b8 <coda_cursor_read_char_partial_array+0x1b4>
    9468:	ldr	r0, [r7, #4]
    946c:	add	r0, r7, r0, lsl #4
    9470:	ldr	r0, [r0, #-8]
    9474:	ldr	r0, [r0]
    9478:	sub	r1, r0, #100	; 0x64
    947c:	cmp	r1, #4
    9480:	bhi	94e8 <coda_cursor_read_char_partial_array+0x1e4>
    9484:	add	r0, pc, #0
    9488:	ldr	pc, [r0, r1, lsl #2]
    948c:	.word	0x000094a0
    9490:	.word	0x00009528
    9494:	.word	0x00009574
    9498:	.word	0x00009550
    949c:	.word	0x00009510
    94a0:	mov	r0, r7
    94a4:	mov	r1, r5
    94a8:	mov	r2, r8
    94ac:	mov	r3, r6
    94b0:	bl	0 <coda_mem_cursor_read_char_partial_array>
    94b4:	b	9564 <coda_cursor_read_char_partial_array+0x260>
    94b8:	bl	0 <coda_type_get_native_type_name>
    94bc:	movw	r1, #0
    94c0:	mov	r2, r0
    94c4:	movt	r1, #0
    94c8:	mvn	r0, #104	; 0x68
    94cc:	bl	0 <coda_set_error>
    94d0:	b	93e8 <coda_cursor_read_char_partial_array+0xe4>
    94d4:	movw	r1, #0
    94d8:	mvn	r0, #106	; 0x6a
    94dc:	mov	r2, r5
    94e0:	movt	r1, #0
    94e4:	b	93e4 <coda_cursor_read_char_partial_array+0xe0>
    94e8:	cmp	r0, #1
    94ec:	beq	9538 <coda_cursor_read_char_partial_array+0x234>
    94f0:	cmp	r0, #0
    94f4:	bne	9574 <coda_cursor_read_char_partial_array+0x270>
    94f8:	mov	r0, r7
    94fc:	mov	r1, r5
    9500:	mov	r2, r8
    9504:	mov	r3, r6
    9508:	bl	0 <coda_ascii_cursor_read_char_partial_array>
    950c:	b	9564 <coda_cursor_read_char_partial_array+0x260>
    9510:	mov	r0, r7
    9514:	mov	r1, r5
    9518:	mov	r2, r8
    951c:	mov	r3, r6
    9520:	bl	0 <coda_netcdf_cursor_read_char_partial_array>
    9524:	b	9564 <coda_cursor_read_char_partial_array+0x260>
    9528:	mvn	r0, #10
    952c:	mov	r1, #0
    9530:	bl	0 <coda_set_error>
    9534:	b	93e8 <coda_cursor_read_char_partial_array+0xe4>
    9538:	mov	r0, r7
    953c:	mov	r1, r5
    9540:	mov	r2, r8
    9544:	mov	r3, r6
    9548:	bl	0 <coda_bin_cursor_read_char_partial_array>
    954c:	b	9564 <coda_cursor_read_char_partial_array+0x260>
    9550:	mov	r0, r7
    9554:	mov	r1, r5
    9558:	mov	r2, r8
    955c:	mov	r3, r6
    9560:	bl	0 <coda_cdf_cursor_read_char_partial_array>
    9564:	cmp	r0, #0
    9568:	mvnne	r0, #0
    956c:	sub	sp, fp, #24
    9570:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
    9574:	movw	r0, #0
    9578:	movw	r1, #0
    957c:	movw	r3, #0
    9580:	movw	r2, #1748	; 0x6d4
    9584:	movt	r0, #0
    9588:	movt	r1, #0
    958c:	movt	r3, #0
    9590:	bl	0 <__assert_fail>
    9594:	.word	0x00000224
    9598:	.word	0x00000154

0000959c <coda_cursor_read_complex_double_pair>:
    959c:	push	{fp, lr}
    95a0:	mov	fp, sp
    95a4:	cmp	r0, #0
    95a8:	beq	95d8 <coda_cursor_read_complex_double_pair+0x3c>
    95ac:	ldr	r2, [r0, #4]
    95b0:	cmp	r2, #1
    95b4:	blt	95d8 <coda_cursor_read_complex_double_pair+0x3c>
    95b8:	add	r2, r0, r2, lsl #4
    95bc:	ldr	r2, [r2, #-8]
    95c0:	cmp	r2, #0
    95c4:	beq	95d8 <coda_cursor_read_complex_double_pair+0x3c>
    95c8:	cmp	r1, #0
    95cc:	beq	95fc <coda_cursor_read_complex_double_pair+0x60>
    95d0:	pop	{fp, lr}
    95d4:	b	9614 <read_double_pair>
    95d8:	movw	r1, #0
    95dc:	movw	r2, #0
    95e0:	mvn	r0, #99	; 0x63
    95e4:	movw	r3, #5617	; 0x15f1
    95e8:	movt	r1, #0
    95ec:	movt	r2, #0
    95f0:	bl	0 <coda_set_error>
    95f4:	mvn	r0, #0
    95f8:	pop	{fp, pc}
    95fc:	movw	r1, #0
    9600:	movw	r2, #0
    9604:	mvn	r0, #99	; 0x63
    9608:	movw	r3, #5622	; 0x15f6
    960c:	movt	r1, #0
    9610:	b	95ec <coda_cursor_read_complex_double_pair+0x50>

00009614 <read_double_pair>:
    9614:	push	{r4, r5, r6, r7, fp, lr}
    9618:	add	fp, sp, #16
    961c:	sub	sp, sp, #520	; 0x208
    9620:	mov	r4, r1
    9624:	mov	r1, r0
    9628:	ldr	r0, [r0, #4]
    962c:	add	r0, r1, r0, lsl #4
    9630:	ldr	r0, [r0, #-8]
    9634:	ldr	r2, [r0, #8]
    9638:	cmp	r2, #6
    963c:	bne	96c4 <read_double_pair+0xb0>
    9640:	ldr	r0, [r0, #40]	; 0x28
    9644:	cmp	r0, #3
    9648:	bne	96c4 <read_double_pair+0xb0>
    964c:	mov	r5, sp
    9650:	mov	r2, #520	; 0x208
    9654:	mov	r0, r5
    9658:	bl	0 <memcpy>
    965c:	mov	r0, r5
    9660:	bl	0 <coda_cursor_use_base_type_of_special_type>
    9664:	mvn	r5, #0
    9668:	cmp	r0, #0
    966c:	bne	96d8 <read_double_pair+0xc4>
    9670:	mov	r0, sp
    9674:	mov	r1, #0
    9678:	bl	0 <coda_cursor_goto_record_field_by_index>
    967c:	cmp	r0, #0
    9680:	bne	96d8 <read_double_pair+0xc4>
    9684:	mov	r0, sp
    9688:	mov	r1, r4
    968c:	bl	1344 <coda_cursor_read_double>
    9690:	cmp	r0, #0
    9694:	bne	96d8 <read_double_pair+0xc4>
    9698:	mov	r0, sp
    969c:	bl	0 <coda_cursor_goto_next_record_field>
    96a0:	cmp	r0, #0
    96a4:	bne	96d8 <read_double_pair+0xc4>
    96a8:	add	r1, r4, #8
    96ac:	mov	r0, sp
    96b0:	bl	1344 <coda_cursor_read_double>
    96b4:	cmp	r0, #0
    96b8:	mov	r5, r0
    96bc:	mvnne	r5, #0
    96c0:	b	96d8 <read_double_pair+0xc4>
    96c4:	movw	r1, #0
    96c8:	mvn	r0, #104	; 0x68
    96cc:	movt	r1, #0
    96d0:	bl	0 <coda_set_error>
    96d4:	mvn	r5, #0
    96d8:	mov	r0, r5
    96dc:	sub	sp, fp, #16
    96e0:	pop	{r4, r5, r6, r7, fp, pc}

000096e4 <coda_cursor_read_complex_double_pairs_array>:
    96e4:	push	{fp, lr}
    96e8:	mov	fp, sp
    96ec:	sub	sp, sp, #8
    96f0:	cmp	r0, #0
    96f4:	beq	9758 <coda_cursor_read_complex_double_pairs_array+0x74>
    96f8:	mov	ip, r1
    96fc:	ldr	r1, [r0, #4]
    9700:	cmp	r1, #1
    9704:	blt	9758 <coda_cursor_read_complex_double_pairs_array+0x74>
    9708:	add	r1, r0, r1, lsl #4
    970c:	ldr	r1, [r1, #-8]
    9710:	cmp	r1, #0
    9714:	beq	9758 <coda_cursor_read_complex_double_pairs_array+0x74>
    9718:	cmp	ip, #0
    971c:	beq	9780 <coda_cursor_read_complex_double_pairs_array+0x9c>
    9720:	ldr	r3, [r1]
    9724:	cmp	r3, #99	; 0x63
    9728:	ldrhi	r1, [r1, #4]
    972c:	ldr	r1, [r1, #8]
    9730:	cmp	r1, #1
    9734:	bne	9798 <coda_cursor_read_complex_double_pairs_array+0xb4>
    9738:	movw	r1, #0
    973c:	str	r2, [sp]
    9740:	mov	r2, ip
    9744:	mov	r3, #16
    9748:	movt	r1, #0
    974c:	bl	97b8 <read_array>
    9750:	mov	sp, fp
    9754:	pop	{fp, pc}
    9758:	movw	r1, #0
    975c:	movw	r2, #0
    9760:	mvn	r0, #99	; 0x63
    9764:	movw	r3, #5649	; 0x1611
    9768:	movt	r1, #0
    976c:	movt	r2, #0
    9770:	bl	0 <coda_set_error>
    9774:	mvn	r0, #0
    9778:	mov	sp, fp
    977c:	pop	{fp, pc}
    9780:	movw	r1, #0
    9784:	movw	r2, #0
    9788:	mvn	r0, #99	; 0x63
    978c:	movw	r3, #5654	; 0x1616
    9790:	movt	r1, #0
    9794:	b	976c <coda_cursor_read_complex_double_pairs_array+0x88>
    9798:	mov	r0, r1
    979c:	bl	0 <coda_type_get_class_name>
    97a0:	movw	r1, #0
    97a4:	mov	r2, r0
    97a8:	mvn	r0, #104	; 0x68
    97ac:	movt	r1, #0
    97b0:	bl	0 <coda_set_error>
    97b4:	b	9774 <coda_cursor_read_complex_double_pairs_array+0x90>

000097b8 <read_array>:
    97b8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    97bc:	add	fp, sp, #28
    97c0:	sub	sp, sp, #604	; 0x25c
    97c4:	add	r5, sp, #48	; 0x30
    97c8:	mov	r8, r2
    97cc:	mov	sl, r1
    97d0:	add	r1, sp, #44	; 0x2c
    97d4:	mov	r6, r3
    97d8:	mov	r4, r0
    97dc:	mov	r2, r5
    97e0:	bl	0 <coda_cursor_get_array_dim>
    97e4:	cmp	r0, #0
    97e8:	beq	97f8 <read_array+0x40>
    97ec:	mvn	r0, #0
    97f0:	sub	sp, fp, #28
    97f4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    97f8:	mov	r9, r6
    97fc:	ldr	r6, [fp, #8]
    9800:	add	r0, sp, #80	; 0x50
    9804:	mov	r1, r4
    9808:	mov	r2, #520	; 0x208
    980c:	bl	0 <memcpy>
    9810:	ldr	r0, [sp, #44]	; 0x2c
    9814:	cmp	r6, #1
    9818:	bne	9960 <read_array+0x1a8>
    981c:	cmp	r0, #1
    9820:	ble	9960 <read_array+0x1a8>
    9824:	and	r6, r0, #1
    9828:	add	ip, sp, #8
    982c:	mov	r1, #1
    9830:	add	r2, r5, #4
    9834:	sub	r7, r6, r0
    9838:	add	r3, ip, #4
    983c:	str	r1, [sp, #8]
    9840:	ldr	r5, [r2, #-4]
    9844:	ldr	r4, [r2]
    9848:	adds	r7, r7, #2
    984c:	add	r2, r2, #8
    9850:	mul	r5, r5, r1
    9854:	mul	r1, r4, r5
    9858:	str	r5, [r3]
    985c:	str	r1, [r3, #4]
    9860:	add	r3, r3, #8
    9864:	bne	9840 <read_array+0x88>
    9868:	mov	r7, sl
    986c:	cmp	r6, #0
    9870:	beq	9880 <read_array+0xc8>
    9874:	ldr	r2, [r2, #-4]
    9878:	mul	r1, r2, r1
    987c:	str	r1, [r3]
    9880:	ldr	r4, [ip, r0, lsl #2]
    9884:	cmp	r4, #1
    9888:	blt	9ad4 <read_array+0x31c>
    988c:	add	r0, ip, r0, lsl #2
    9890:	mov	r1, #0
    9894:	mov	r5, r9
    9898:	mov	r9, #0
    989c:	mov	sl, ip
    98a0:	ldr	r6, [r0, #-4]
    98a4:	add	r0, sp, #80	; 0x50
    98a8:	bl	0 <coda_cursor_goto_array_element_by_index>
    98ac:	cmp	r0, #0
    98b0:	bne	97ec <read_array+0x34>
    98b4:	sub	r0, sl, #4
    98b8:	mov	sl, #0
    98bc:	str	r0, [sp, #4]
    98c0:	mla	r1, sl, r5, r8
    98c4:	add	r0, sp, #80	; 0x50
    98c8:	blx	r7
    98cc:	cmp	r0, #0
    98d0:	bne	97ec <read_array+0x34>
    98d4:	add	r9, r9, #1
    98d8:	cmp	r9, r4
    98dc:	bge	98f0 <read_array+0x138>
    98e0:	add	r0, sp, #80	; 0x50
    98e4:	bl	0 <coda_cursor_goto_next_array_element>
    98e8:	cmp	r0, #0
    98ec:	bne	97ec <read_array+0x34>
    98f0:	add	sl, sl, r6
    98f4:	cmp	sl, r4
    98f8:	blt	98c0 <read_array+0x108>
    98fc:	cmp	r9, r4
    9900:	add	r2, sp, #8
    9904:	beq	9ad4 <read_array+0x31c>
    9908:	ldr	r1, [sp, #44]	; 0x2c
    990c:	ldr	r0, [r2, r1, lsl #2]
    9910:	add	r2, r2, r1, lsl #2
    9914:	ldr	r2, [r2, #-8]
    9918:	add	r2, r2, sl
    991c:	sub	sl, r2, r0
    9920:	subs	r0, r1, #3
    9924:	bmi	98c0 <read_array+0x108>
    9928:	ldr	r0, [sp, #4]
    992c:	add	r0, r0, r1, lsl #2
    9930:	sub	r1, r1, #2
    9934:	ldr	r2, [r0]
    9938:	cmp	sl, r2
    993c:	blt	98c0 <read_array+0x108>
    9940:	ldr	r3, [r0, #-8]
    9944:	sub	r2, sl, r2
    9948:	sub	r1, r1, #1
    994c:	sub	r0, r0, #4
    9950:	cmp	r1, #0
    9954:	add	sl, r2, r3
    9958:	bgt	9934 <read_array+0x17c>
    995c:	b	98c0 <read_array+0x108>
    9960:	cmp	r0, #1
    9964:	blt	9980 <read_array+0x1c8>
    9968:	cmp	r0, #4
    996c:	bcs	998c <read_array+0x1d4>
    9970:	mov	r4, #1
    9974:	mov	lr, #0
    9978:	mov	r5, r9
    997c:	b	9a48 <read_array+0x290>
    9980:	mov	r4, #1
    9984:	mov	r5, r9
    9988:	b	9a6c <read_array+0x2b4>
    998c:	bic	lr, r0, #3
    9990:	mov	r2, #1
    9994:	vmov.i32	q8, #1	; 0x00000001
    9998:	sub	r7, lr, #4
    999c:	add	r3, r2, r7, lsr #2
    99a0:	cmp	r7, #12
    99a4:	and	ip, r3, #3
    99a8:	bcs	99bc <read_array+0x204>
    99ac:	mov	r3, #0
    99b0:	cmp	ip, #0
    99b4:	bne	9a10 <read_array+0x258>
    99b8:	b	9a2c <read_array+0x274>
    99bc:	sub	r6, r3, ip
    99c0:	mov	r3, #0
    99c4:	mov	r4, #64	; 0x40
    99c8:	mov	r7, r5
    99cc:	vld1.32	{d18-d19}, [r7], r4
    99d0:	add	r1, r5, #16
    99d4:	add	r2, r5, #32
    99d8:	subs	r6, r6, #4
    99dc:	add	r3, r3, #16
    99e0:	vld1.32	{d20-d21}, [r1]
    99e4:	add	r1, r5, #48	; 0x30
    99e8:	mov	r5, r7
    99ec:	vmul.i32	q8, q9, q8
    99f0:	vld1.32	{d18-d19}, [r2]
    99f4:	vmul.i32	q8, q10, q8
    99f8:	vld1.32	{d20-d21}, [r1]
    99fc:	vmul.i32	q8, q9, q8
    9a00:	vmul.i32	q8, q10, q8
    9a04:	bne	99cc <read_array+0x214>
    9a08:	cmp	ip, #0
    9a0c:	beq	9a2c <read_array+0x274>
    9a10:	add	r1, sp, #48	; 0x30
    9a14:	rsb	r2, ip, #0
    9a18:	add	r3, r1, r3, lsl #2
    9a1c:	vld1.32	{d18-d19}, [r3]!
    9a20:	adds	r2, r2, #1
    9a24:	vmul.i32	q8, q9, q8
    9a28:	bcc	9a1c <read_array+0x264>
    9a2c:	vext.8	q9, q8, q8, #8
    9a30:	cmp	r0, lr
    9a34:	mov	r5, r9
    9a38:	vmul.i32	q0, q8, q9
    9a3c:	vmul.i32	q8, q0, d0[1]
    9a40:	vmov.32	r4, d16[0]
    9a44:	beq	9a64 <read_array+0x2ac>
    9a48:	add	r1, sp, #48	; 0x30
    9a4c:	sub	r0, r0, lr
    9a50:	add	r2, r1, lr, lsl #2
    9a54:	ldr	r1, [r2], #4
    9a58:	subs	r0, r0, #1
    9a5c:	mul	r4, r1, r4
    9a60:	bne	9a54 <read_array+0x29c>
    9a64:	cmp	r4, #1
    9a68:	blt	9ad4 <read_array+0x31c>
    9a6c:	add	r0, sp, #80	; 0x50
    9a70:	mov	r1, #0
    9a74:	mov	r6, #0
    9a78:	bl	0 <coda_cursor_goto_array_element_by_index>
    9a7c:	cmp	r0, #0
    9a80:	bne	97ec <read_array+0x34>
    9a84:	sub	r7, r4, #1
    9a88:	add	r9, sp, #80	; 0x50
    9a8c:	b	9aa4 <read_array+0x2ec>
    9a90:	add	r6, r6, #1
    9a94:	add	r8, r8, r5
    9a98:	mov	r0, #0
    9a9c:	cmp	r4, r6
    9aa0:	beq	97f0 <read_array+0x38>
    9aa4:	mov	r0, r9
    9aa8:	mov	r1, r8
    9aac:	blx	sl
    9ab0:	cmp	r0, #0
    9ab4:	bne	97ec <read_array+0x34>
    9ab8:	cmp	r6, r7
    9abc:	bge	9a90 <read_array+0x2d8>
    9ac0:	mov	r0, r9
    9ac4:	bl	0 <coda_cursor_goto_next_array_element>
    9ac8:	cmp	r0, #0
    9acc:	beq	9a90 <read_array+0x2d8>
    9ad0:	b	97ec <read_array+0x34>
    9ad4:	mov	r0, #0
    9ad8:	sub	sp, fp, #28
    9adc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

00009ae0 <coda_cursor_read_complex_double_split>:
    9ae0:	push	{r4, r5, fp, lr}
    9ae4:	add	fp, sp, #8
    9ae8:	sub	sp, sp, #16
    9aec:	cmp	r0, #0
    9af0:	beq	9b38 <coda_cursor_read_complex_double_split+0x58>
    9af4:	mov	r5, r1
    9af8:	ldr	r1, [r0, #4]
    9afc:	cmp	r1, #1
    9b00:	blt	9b38 <coda_cursor_read_complex_double_split+0x58>
    9b04:	add	r1, r0, r1, lsl #4
    9b08:	ldr	r1, [r1, #-8]
    9b0c:	cmp	r1, #0
    9b10:	beq	9b38 <coda_cursor_read_complex_double_split+0x58>
    9b14:	mov	r1, sp
    9b18:	mov	r4, r2
    9b1c:	bl	9614 <read_double_pair>
    9b20:	mov	r1, r0
    9b24:	mvn	r0, #0
    9b28:	cmp	r1, #0
    9b2c:	beq	9b60 <coda_cursor_read_complex_double_split+0x80>
    9b30:	sub	sp, fp, #8
    9b34:	pop	{r4, r5, fp, pc}
    9b38:	movw	r1, #0
    9b3c:	movw	r2, #0
    9b40:	mvn	r0, #99	; 0x63
    9b44:	movw	r3, #5617	; 0x15f1
    9b48:	movt	r1, #0
    9b4c:	movt	r2, #0
    9b50:	bl	0 <coda_set_error>
    9b54:	mvn	r0, #0
    9b58:	sub	sp, fp, #8
    9b5c:	pop	{r4, r5, fp, pc}
    9b60:	vldr	d16, [sp]
    9b64:	mov	r0, #0
    9b68:	vstr	d16, [r5]
    9b6c:	vldr	d16, [sp, #8]
    9b70:	vstr	d16, [r4]
    9b74:	sub	sp, fp, #8
    9b78:	pop	{r4, r5, fp, pc}

00009b7c <coda_cursor_read_complex_double_split_array>:
    9b7c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9b80:	add	fp, sp, #28
    9b84:	sub	sp, sp, #628	; 0x274
    9b88:	cmp	r0, #0
    9b8c:	beq	9d94 <coda_cursor_read_complex_double_split_array+0x218>
    9b90:	mov	r4, r0
    9b94:	ldr	r0, [r0, #4]
    9b98:	cmp	r0, #1
    9b9c:	blt	9d94 <coda_cursor_read_complex_double_split_array+0x218>
    9ba0:	add	r0, r4, r0, lsl #4
    9ba4:	ldr	r0, [r0, #-8]
    9ba8:	cmp	r0, #0
    9bac:	beq	9d94 <coda_cursor_read_complex_double_split_array+0x218>
    9bb0:	mov	r5, r1
    9bb4:	cmp	r1, #0
    9bb8:	beq	9dc0 <coda_cursor_read_complex_double_split_array+0x244>
    9bbc:	mov	r9, r2
    9bc0:	cmp	r2, #0
    9bc4:	beq	9dd8 <coda_cursor_read_complex_double_split_array+0x25c>
    9bc8:	ldr	r1, [r0]
    9bcc:	mov	r7, r3
    9bd0:	cmp	r1, #99	; 0x63
    9bd4:	ldrhi	r0, [r0, #4]
    9bd8:	ldr	r0, [r0, #8]
    9bdc:	cmp	r0, #1
    9be0:	bne	9df0 <coda_cursor_read_complex_double_split_array+0x274>
    9be4:	add	r8, sp, #56	; 0x38
    9be8:	add	r1, sp, #52	; 0x34
    9bec:	mov	r0, r4
    9bf0:	mov	r2, r8
    9bf4:	bl	0 <coda_cursor_get_array_dim>
    9bf8:	mvn	r6, #0
    9bfc:	cmp	r0, #0
    9c00:	bne	9db4 <coda_cursor_read_complex_double_split_array+0x238>
    9c04:	add	r0, sp, #104	; 0x68
    9c08:	mov	r1, r4
    9c0c:	mov	r2, #520	; 0x208
    9c10:	bl	0 <memcpy>
    9c14:	ldr	ip, [sp, #52]	; 0x34
    9c18:	cmp	r7, #1
    9c1c:	bne	9e0c <coda_cursor_read_complex_double_split_array+0x290>
    9c20:	cmp	ip, #1
    9c24:	ble	9e0c <coda_cursor_read_complex_double_split_array+0x290>
    9c28:	and	lr, ip, #1
    9c2c:	add	r2, r8, #4
    9c30:	add	r8, sp, #16
    9c34:	mov	r1, #1
    9c38:	sub	r4, lr, ip
    9c3c:	add	r3, r8, #4
    9c40:	str	r1, [sp, #16]
    9c44:	ldmda	r2, {r0, r7}
    9c48:	adds	r4, r4, #2
    9c4c:	add	r2, r2, #8
    9c50:	mul	r0, r0, r1
    9c54:	mul	r1, r7, r0
    9c58:	stm	r3, {r0, r1}
    9c5c:	add	r3, r3, #8
    9c60:	bne	9c44 <coda_cursor_read_complex_double_split_array+0xc8>
    9c64:	cmp	lr, #0
    9c68:	beq	9c78 <coda_cursor_read_complex_double_split_array+0xfc>
    9c6c:	ldr	r0, [r2, #-4]
    9c70:	mul	r0, r0, r1
    9c74:	str	r0, [r3]
    9c78:	ldr	r4, [r8, ip, lsl #2]
    9c7c:	cmp	r4, #1
    9c80:	blt	9f98 <coda_cursor_read_complex_double_split_array+0x41c>
    9c84:	add	r7, sp, #16
    9c88:	mov	r1, #0
    9c8c:	mov	r8, #0
    9c90:	add	r0, r7, ip, lsl #2
    9c94:	mov	sl, r7
    9c98:	ldr	r7, [r0, #-4]
    9c9c:	add	r0, sp, #104	; 0x68
    9ca0:	bl	0 <coda_cursor_goto_array_element_by_index>
    9ca4:	cmp	r0, #0
    9ca8:	bne	9db4 <coda_cursor_read_complex_double_split_array+0x238>
    9cac:	sub	r0, sl, #4
    9cb0:	str	r7, [sp, #8]
    9cb4:	add	r7, sp, #104	; 0x68
    9cb8:	mov	sl, #0
    9cbc:	str	r0, [sp, #4]
    9cc0:	add	r0, sp, #88	; 0x58
    9cc4:	add	r0, r0, #8
    9cc8:	str	r0, [sp, #12]
    9ccc:	mov	r0, r7
    9cd0:	add	r1, sp, #88	; 0x58
    9cd4:	bl	9614 <read_double_pair>
    9cd8:	ldr	r0, [sp, #88]	; 0x58
    9cdc:	mov	r2, r5
    9ce0:	ldr	r1, [sp, #92]	; 0x5c
    9ce4:	add	r8, r8, #1
    9ce8:	cmp	r8, r4
    9cec:	str	r0, [r2, sl, lsl #3]!
    9cf0:	ldr	r0, [sp, #12]
    9cf4:	str	r1, [r2, #4]
    9cf8:	mov	r2, r9
    9cfc:	ldrd	r0, [r0]
    9d00:	str	r0, [r2, sl, lsl #3]!
    9d04:	str	r1, [r2, #4]
    9d08:	bge	9d1c <coda_cursor_read_complex_double_split_array+0x1a0>
    9d0c:	mov	r0, r7
    9d10:	bl	0 <coda_cursor_goto_next_array_element>
    9d14:	cmp	r0, #0
    9d18:	bne	9db4 <coda_cursor_read_complex_double_split_array+0x238>
    9d1c:	ldr	r0, [sp, #8]
    9d20:	add	sl, sl, r0
    9d24:	cmp	sl, r4
    9d28:	blt	9ccc <coda_cursor_read_complex_double_split_array+0x150>
    9d2c:	cmp	r8, r4
    9d30:	beq	9f98 <coda_cursor_read_complex_double_split_array+0x41c>
    9d34:	ldr	r1, [sp, #52]	; 0x34
    9d38:	add	r0, sp, #16
    9d3c:	mov	r2, r0
    9d40:	add	r2, r2, r1, lsl #2
    9d44:	ldr	r0, [r0, r1, lsl #2]
    9d48:	ldr	r2, [r2, #-8]
    9d4c:	add	r2, r2, sl
    9d50:	sub	sl, r2, r0
    9d54:	subs	r0, r1, #3
    9d58:	bmi	9ccc <coda_cursor_read_complex_double_split_array+0x150>
    9d5c:	ldr	r0, [sp, #4]
    9d60:	add	r0, r0, r1, lsl #2
    9d64:	sub	r1, r1, #2
    9d68:	ldr	r2, [r0]
    9d6c:	cmp	sl, r2
    9d70:	blt	9ccc <coda_cursor_read_complex_double_split_array+0x150>
    9d74:	ldr	r3, [r0, #-8]
    9d78:	sub	r2, sl, r2
    9d7c:	sub	r1, r1, #1
    9d80:	sub	r0, r0, #4
    9d84:	cmp	r1, #0
    9d88:	add	sl, r3, r2
    9d8c:	bgt	9d68 <coda_cursor_read_complex_double_split_array+0x1ec>
    9d90:	b	9ccc <coda_cursor_read_complex_double_split_array+0x150>
    9d94:	movw	r1, #0
    9d98:	movw	r2, #0
    9d9c:	mvn	r0, #99	; 0x63
    9da0:	movw	r3, #5713	; 0x1651
    9da4:	movt	r1, #0
    9da8:	movt	r2, #0
    9dac:	bl	0 <coda_set_error>
    9db0:	mvn	r6, #0
    9db4:	mov	r0, r6
    9db8:	sub	sp, fp, #28
    9dbc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9dc0:	movw	r1, #0
    9dc4:	movw	r2, #0
    9dc8:	mvn	r0, #99	; 0x63
    9dcc:	movw	r3, #5718	; 0x1656
    9dd0:	movt	r1, #0
    9dd4:	b	9da8 <coda_cursor_read_complex_double_split_array+0x22c>
    9dd8:	movw	r1, #0
    9ddc:	movw	r2, #0
    9de0:	mvn	r0, #99	; 0x63
    9de4:	movw	r3, #5723	; 0x165b
    9de8:	movt	r1, #0
    9dec:	b	9da8 <coda_cursor_read_complex_double_split_array+0x22c>
    9df0:	bl	0 <coda_type_get_class_name>
    9df4:	movw	r1, #0
    9df8:	mov	r2, r0
    9dfc:	mvn	r0, #104	; 0x68
    9e00:	movt	r1, #0
    9e04:	bl	0 <coda_set_error>
    9e08:	b	9db0 <coda_cursor_read_complex_double_split_array+0x234>
    9e0c:	cmp	ip, #1
    9e10:	blt	9e28 <coda_cursor_read_complex_double_split_array+0x2ac>
    9e14:	cmp	ip, #4
    9e18:	bcs	9e30 <coda_cursor_read_complex_double_split_array+0x2b4>
    9e1c:	mov	r4, #1
    9e20:	mov	lr, #0
    9e24:	b	9ee8 <coda_cursor_read_complex_double_split_array+0x36c>
    9e28:	mov	r4, #1
    9e2c:	b	9f0c <coda_cursor_read_complex_double_split_array+0x390>
    9e30:	bic	lr, ip, #3
    9e34:	mov	r2, #1
    9e38:	vmov.i32	q8, #1	; 0x00000001
    9e3c:	sub	r3, lr, #4
    9e40:	add	r2, r2, r3, lsr #2
    9e44:	cmp	r3, #12
    9e48:	and	r0, r2, #3
    9e4c:	bcs	9e60 <coda_cursor_read_complex_double_split_array+0x2e4>
    9e50:	mov	r3, #0
    9e54:	cmp	r0, #0
    9e58:	bne	9eb4 <coda_cursor_read_complex_double_split_array+0x338>
    9e5c:	b	9ed0 <coda_cursor_read_complex_double_split_array+0x354>
    9e60:	sub	r7, r2, r0
    9e64:	mov	r3, #0
    9e68:	mov	sl, #64	; 0x40
    9e6c:	mov	r2, r8
    9e70:	vld1.32	{d18-d19}, [r2], sl
    9e74:	add	r4, r8, #16
    9e78:	add	r1, r8, #32
    9e7c:	subs	r7, r7, #4
    9e80:	add	r3, r3, #16
    9e84:	vld1.32	{d20-d21}, [r4]
    9e88:	vmul.i32	q8, q9, q8
    9e8c:	vld1.32	{d18-d19}, [r1]
    9e90:	add	r1, r8, #48	; 0x30
    9e94:	mov	r8, r2
    9e98:	vmul.i32	q8, q10, q8
    9e9c:	vld1.32	{d20-d21}, [r1]
    9ea0:	vmul.i32	q8, q9, q8
    9ea4:	vmul.i32	q8, q10, q8
    9ea8:	bne	9e70 <coda_cursor_read_complex_double_split_array+0x2f4>
    9eac:	cmp	r0, #0
    9eb0:	beq	9ed0 <coda_cursor_read_complex_double_split_array+0x354>
    9eb4:	add	r1, sp, #56	; 0x38
    9eb8:	add	r2, r1, r3, lsl #2
    9ebc:	rsb	r3, r0, #0
    9ec0:	vld1.32	{d18-d19}, [r2]!
    9ec4:	adds	r3, r3, #1
    9ec8:	vmul.i32	q8, q9, q8
    9ecc:	bcc	9ec0 <coda_cursor_read_complex_double_split_array+0x344>
    9ed0:	vext.8	q9, q8, q8, #8
    9ed4:	cmp	ip, lr
    9ed8:	vmul.i32	q0, q8, q9
    9edc:	vmul.i32	q8, q0, d0[1]
    9ee0:	vmov.32	r4, d16[0]
    9ee4:	beq	9f04 <coda_cursor_read_complex_double_split_array+0x388>
    9ee8:	add	r1, sp, #56	; 0x38
    9eec:	sub	r0, ip, lr
    9ef0:	add	r2, r1, lr, lsl #2
    9ef4:	ldr	r1, [r2], #4
    9ef8:	subs	r0, r0, #1
    9efc:	mul	r4, r1, r4
    9f00:	bne	9ef4 <coda_cursor_read_complex_double_split_array+0x378>
    9f04:	cmp	r4, #1
    9f08:	blt	9f98 <coda_cursor_read_complex_double_split_array+0x41c>
    9f0c:	add	r0, sp, #104	; 0x68
    9f10:	mov	r1, #0
    9f14:	mov	r7, #0
    9f18:	bl	0 <coda_cursor_goto_array_element_by_index>
    9f1c:	cmp	r0, #0
    9f20:	bne	9db4 <coda_cursor_read_complex_double_split_array+0x238>
    9f24:	sub	r0, r4, #1
    9f28:	add	r8, sp, #104	; 0x68
    9f2c:	str	r0, [sp, #12]
    9f30:	add	r0, sp, #88	; 0x58
    9f34:	add	sl, r0, #8
    9f38:	b	9f50 <coda_cursor_read_complex_double_split_array+0x3d4>
    9f3c:	add	r7, r7, #1
    9f40:	add	r5, r5, #8
    9f44:	add	r9, r9, #8
    9f48:	cmp	r4, r7
    9f4c:	beq	9f98 <coda_cursor_read_complex_double_split_array+0x41c>
    9f50:	mov	r0, r8
    9f54:	add	r1, sp, #88	; 0x58
    9f58:	bl	9614 <read_double_pair>
    9f5c:	ldr	r0, [sp, #88]	; 0x58
    9f60:	ldr	r1, [sp, #92]	; 0x5c
    9f64:	str	r1, [r5, #4]
    9f68:	str	r0, [r5]
    9f6c:	ldrd	r0, [sl]
    9f70:	str	r0, [r9]
    9f74:	ldr	r0, [sp, #12]
    9f78:	str	r1, [r9, #4]
    9f7c:	cmp	r7, r0
    9f80:	bge	9f3c <coda_cursor_read_complex_double_split_array+0x3c0>
    9f84:	mov	r0, r8
    9f88:	bl	0 <coda_cursor_goto_next_array_element>
    9f8c:	cmp	r0, #0
    9f90:	beq	9f3c <coda_cursor_read_complex_double_split_array+0x3c0>
    9f94:	b	9db4 <coda_cursor_read_complex_double_split_array+0x238>
    9f98:	mov	r6, #0
    9f9c:	b	9db4 <coda_cursor_read_complex_double_split_array+0x238>

00009fa0 <transpose_array>:
    9fa0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9fa4:	add	fp, sp, #28
    9fa8:	sub	sp, sp, #180	; 0xb4
    9fac:	sub	r6, fp, #60	; 0x3c
    9fb0:	mov	r8, r2
    9fb4:	str	r1, [sp, #32]
    9fb8:	sub	r1, fp, #64	; 0x40
    9fbc:	mov	r2, r6
    9fc0:	bl	0 <coda_cursor_get_array_dim>
    9fc4:	mvn	r7, #0
    9fc8:	cmp	r0, #0
    9fcc:	bne	a474 <transpose_array+0x4d4>
    9fd0:	ldr	r5, [fp, #-64]	; 0xffffffc0
    9fd4:	mov	r7, #0
    9fd8:	cmp	r5, #2
    9fdc:	blt	a474 <transpose_array+0x4d4>
    9fe0:	add	r9, sp, #72	; 0x48
    9fe4:	lsl	r2, r5, #2
    9fe8:	mov	r1, #0
    9fec:	mov	r7, #0
    9ff0:	mov	r0, r9
    9ff4:	bl	0 <memset>
    9ff8:	mov	r4, #1
    9ffc:	cmp	r5, #4
    a000:	bcc	a058 <transpose_array+0xb8>
    a004:	add	r0, r6, r5, lsl #2
    a008:	vmov.i32	q8, #1	; 0x00000001
    a00c:	bic	r7, r5, #3
    a010:	add	r1, sp, #36	; 0x24
    a014:	mvn	r2, #15
    a018:	mov	r3, r7
    a01c:	sub	r0, r0, #16
    a020:	vld1.32	{d18-d19}, [r0], r2
    a024:	vld1.32	{d20-d21}, [r6]!
    a028:	subs	r3, r3, #4
    a02c:	vrev64.32	q9, q9
    a030:	vmul.i32	q8, q10, q8
    a034:	vext.8	q9, q9, q9, #8
    a038:	vst1.32	{d18-d19}, [r1]!
    a03c:	bne	a020 <transpose_array+0x80>
    a040:	vext.8	q9, q8, q8, #8
    a044:	cmp	r5, r7
    a048:	vmul.i32	q0, q8, q9
    a04c:	vmul.i32	q8, q0, d0[1]
    a050:	vmov.32	r4, d16[0]
    a054:	beq	a088 <transpose_array+0xe8>
    a058:	sub	r0, r7, r5
    a05c:	sub	r1, fp, #60	; 0x3c
    a060:	add	r2, sp, #36	; 0x24
    a064:	add	r0, r0, #1
    a068:	ldr	r3, [r1, -r0, lsl #2]
    a06c:	add	r0, r0, #1
    a070:	cmp	r0, #1
    a074:	str	r3, [r2, r7, lsl #2]
    a078:	ldr	r3, [r1, r7, lsl #2]
    a07c:	add	r7, r7, #1
    a080:	mul	r4, r3, r4
    a084:	bne	a068 <transpose_array+0xc8>
    a088:	mov	r7, #0
    a08c:	cmp	r4, #2
    a090:	blt	a474 <transpose_array+0x4d4>
    a094:	cmp	r5, #1
    a098:	mov	r1, #1
    a09c:	sub	r6, fp, #100	; 0x64
    a0a0:	add	sl, sp, #36	; 0x24
    a0a4:	subge	r0, r5, #1
    a0a8:	str	r1, [r6, r5, lsl #2]
    a0ac:	str	r1, [sl, r5, lsl #2]
    a0b0:	strge	r1, [r6, r0, lsl #2]
    a0b4:	cmpge	r0, #1
    a0b8:	bge	a200 <transpose_array+0x260>
    a0bc:	mov	r0, #0
    a0c0:	str	r0, [r9, r5, lsl #2]
    a0c4:	str	r0, [sl, r5, lsl #2]
    a0c8:	mul	r5, r4, r8
    a0cc:	mov	r0, r5
    a0d0:	bl	0 <malloc>
    a0d4:	cmp	r0, #0
    a0d8:	str	r0, [sp, #28]
    a0dc:	beq	a1d4 <transpose_array+0x234>
    a0e0:	sub	r0, r8, #1
    a0e4:	str	r5, [sp, #8]
    a0e8:	cmp	r0, #7
    a0ec:	bhi	a4e0 <transpose_array+0x540>
    a0f0:	add	r1, pc, #0
    a0f4:	ldr	pc, [r1, r0, lsl #2]
    a0f8:	.word	0x0000a118
    a0fc:	.word	0x0000a2dc
    a100:	.word	0x0000a4e0
    a104:	.word	0x0000a39c
    a108:	.word	0x0000a4e0
    a10c:	.word	0x0000a4e0
    a110:	.word	0x0000a4e0
    a114:	.word	0x0000a21c
    a118:	cmp	r4, #1
    a11c:	blt	a454 <transpose_array+0x4b4>
    a120:	add	r0, r6, #4
    a124:	ldr	ip, [sp, #36]	; 0x24
    a128:	ldr	lr, [fp, #-100]	; 0xffffff9c
    a12c:	mov	r3, #0
    a130:	mov	r1, #0
    a134:	str	r0, [sp, #20]
    a138:	add	r0, sl, #4
    a13c:	str	r0, [sp, #16]
    a140:	orr	r0, r9, #4
    a144:	str	r0, [sp, #12]
    a148:	mov	r0, #0
    a14c:	str	ip, [sp, #24]
    a150:	b	a164 <transpose_array+0x1c4>
    a154:	ldr	ip, [sp, #24]
    a158:	add	r0, r0, #1
    a15c:	cmp	r0, r4
    a160:	beq	a454 <transpose_array+0x4b4>
    a164:	ldr	r2, [sp, #32]
    a168:	ldr	r7, [sp, #28]
    a16c:	ldrb	r2, [r2, r0]
    a170:	strb	r2, [r7, r1]
    a174:	ldr	r2, [sp, #72]	; 0x48
    a178:	add	r1, lr, r1
    a17c:	add	r2, r2, #1
    a180:	cmp	r2, ip
    a184:	str	r2, [sp, #72]	; 0x48
    a188:	bne	a154 <transpose_array+0x1b4>
    a18c:	ldr	r2, [sp, #20]
    a190:	ldr	r6, [sp, #16]
    a194:	ldr	r8, [sp, #12]
    a198:	mov	r5, lr
    a19c:	ldr	sl, [r2], #4
    a1a0:	str	r3, [r8, #-4]
    a1a4:	ldr	r9, [r8]
    a1a8:	add	r1, sl, r1
    a1ac:	mls	r1, r5, ip, r1
    a1b0:	ldr	r5, [r6], #4
    a1b4:	add	r7, r9, #1
    a1b8:	str	r7, [r8]
    a1bc:	add	r8, r8, #4
    a1c0:	mov	ip, r7
    a1c4:	cmp	r7, r5
    a1c8:	mov	r5, sl
    a1cc:	beq	a19c <transpose_array+0x1fc>
    a1d0:	b	a154 <transpose_array+0x1b4>
    a1d4:	movw	r1, #0
    a1d8:	movw	r3, #0
    a1dc:	mov	r0, #93	; 0x5d
    a1e0:	mov	r2, r5
    a1e4:	mvn	r7, #0
    a1e8:	movt	r1, #0
    a1ec:	movt	r3, #0
    a1f0:	str	r0, [sp]
    a1f4:	mvn	r0, #0
    a1f8:	bl	0 <coda_set_error>
    a1fc:	b	a474 <transpose_array+0x4d4>
    a200:	sub	r3, r5, #1
    a204:	mov	r2, #1
    a208:	cmp	r5, #2
    a20c:	and	ip, r3, #1
    a210:	bne	a480 <transpose_array+0x4e0>
    a214:	mov	lr, r6
    a218:	b	a4c0 <transpose_array+0x520>
    a21c:	cmp	r4, #1
    a220:	blt	a454 <transpose_array+0x4b4>
    a224:	ldr	ip, [sp, #36]	; 0x24
    a228:	ldr	lr, [fp, #-100]	; 0xffffff9c
    a22c:	add	r0, r6, #4
    a230:	mov	r1, #0
    a234:	str	r0, [sp, #24]
    a238:	add	r0, sl, #4
    a23c:	mov	sl, #0
    a240:	str	r0, [sp, #20]
    a244:	orr	r0, r9, #4
    a248:	mov	r9, #0
    a24c:	str	r0, [sp, #16]
    a250:	b	a260 <transpose_array+0x2c0>
    a254:	add	sl, sl, #1
    a258:	cmp	sl, r4
    a25c:	beq	a454 <transpose_array+0x4b4>
    a260:	ldr	r2, [sp, #32]
    a264:	ldr	r6, [sp, #28]
    a268:	ldr	r5, [r2, sl, lsl #3]!
    a26c:	ldr	r2, [r2, #4]
    a270:	str	r5, [r6, r1, lsl #3]!
    a274:	add	r1, lr, r1
    a278:	str	r2, [r6, #4]
    a27c:	ldr	r2, [sp, #72]	; 0x48
    a280:	add	r2, r2, #1
    a284:	cmp	r2, ip
    a288:	str	r2, [sp, #72]	; 0x48
    a28c:	bne	a254 <transpose_array+0x2b4>
    a290:	ldr	r2, [sp, #24]
    a294:	ldr	r6, [sp, #20]
    a298:	ldr	r8, [sp, #16]
    a29c:	mov	r5, lr
    a2a0:	mov	r7, ip
    a2a4:	ldr	r3, [r2], #4
    a2a8:	str	r9, [r8, #-4]
    a2ac:	ldr	r0, [r8]
    a2b0:	add	r1, r3, r1
    a2b4:	mls	r1, r5, r7, r1
    a2b8:	ldr	r5, [r6], #4
    a2bc:	add	r0, r0, #1
    a2c0:	str	r0, [r8]
    a2c4:	add	r8, r8, #4
    a2c8:	mov	r7, r0
    a2cc:	cmp	r0, r5
    a2d0:	mov	r5, r3
    a2d4:	beq	a2a4 <transpose_array+0x304>
    a2d8:	b	a254 <transpose_array+0x2b4>
    a2dc:	cmp	r4, #1
    a2e0:	blt	a454 <transpose_array+0x4b4>
    a2e4:	ldr	ip, [sp, #36]	; 0x24
    a2e8:	ldr	lr, [fp, #-100]	; 0xffffff9c
    a2ec:	add	r0, r6, #4
    a2f0:	mov	r1, #0
    a2f4:	str	r0, [sp, #24]
    a2f8:	add	r0, sl, #4
    a2fc:	mov	sl, #0
    a300:	str	r0, [sp, #20]
    a304:	orr	r0, r9, #4
    a308:	mov	r9, #0
    a30c:	str	r0, [sp, #16]
    a310:	b	a320 <transpose_array+0x380>
    a314:	add	sl, sl, #1
    a318:	cmp	sl, r4
    a31c:	beq	a454 <transpose_array+0x4b4>
    a320:	ldr	r0, [sp, #28]
    a324:	add	r2, r0, r1, lsl #1
    a328:	ldr	r0, [sp, #32]
    a32c:	add	r1, lr, r1
    a330:	add	r5, r0, sl, lsl #1
    a334:	ldrh	r5, [r5]
    a338:	strh	r5, [r2]
    a33c:	ldr	r2, [sp, #72]	; 0x48
    a340:	add	r2, r2, #1
    a344:	cmp	r2, ip
    a348:	str	r2, [sp, #72]	; 0x48
    a34c:	bne	a314 <transpose_array+0x374>
    a350:	ldr	r2, [sp, #24]
    a354:	ldr	r6, [sp, #20]
    a358:	ldr	r8, [sp, #16]
    a35c:	mov	r5, lr
    a360:	mov	r7, ip
    a364:	ldr	r3, [r2], #4
    a368:	str	r9, [r8, #-4]
    a36c:	ldr	r0, [r8]
    a370:	add	r1, r3, r1
    a374:	mls	r1, r5, r7, r1
    a378:	ldr	r5, [r6], #4
    a37c:	add	r0, r0, #1
    a380:	str	r0, [r8]
    a384:	add	r8, r8, #4
    a388:	mov	r7, r0
    a38c:	cmp	r0, r5
    a390:	mov	r5, r3
    a394:	beq	a364 <transpose_array+0x3c4>
    a398:	b	a314 <transpose_array+0x374>
    a39c:	cmp	r4, #1
    a3a0:	blt	a454 <transpose_array+0x4b4>
    a3a4:	ldr	ip, [sp, #36]	; 0x24
    a3a8:	ldr	lr, [fp, #-100]	; 0xffffff9c
    a3ac:	add	r0, r6, #4
    a3b0:	mov	r1, #0
    a3b4:	str	r0, [sp, #24]
    a3b8:	add	r0, sl, #4
    a3bc:	mov	sl, #0
    a3c0:	str	r0, [sp, #20]
    a3c4:	orr	r0, r9, #4
    a3c8:	mov	r9, #0
    a3cc:	str	r0, [sp, #16]
    a3d0:	b	a3e0 <transpose_array+0x440>
    a3d4:	add	sl, sl, #1
    a3d8:	cmp	sl, r4
    a3dc:	beq	a454 <transpose_array+0x4b4>
    a3e0:	ldr	r0, [sp, #32]
    a3e4:	ldr	r2, [r0, sl, lsl #2]
    a3e8:	ldr	r0, [sp, #28]
    a3ec:	str	r2, [r0, r1, lsl #2]
    a3f0:	ldr	r2, [sp, #72]	; 0x48
    a3f4:	add	r1, lr, r1
    a3f8:	add	r2, r2, #1
    a3fc:	cmp	r2, ip
    a400:	str	r2, [sp, #72]	; 0x48
    a404:	bne	a3d4 <transpose_array+0x434>
    a408:	ldr	r2, [sp, #24]
    a40c:	ldr	r6, [sp, #20]
    a410:	ldr	r8, [sp, #16]
    a414:	mov	r5, lr
    a418:	mov	r7, ip
    a41c:	ldr	r3, [r2], #4
    a420:	str	r9, [r8, #-4]
    a424:	ldr	r0, [r8]
    a428:	add	r1, r3, r1
    a42c:	mls	r1, r5, r7, r1
    a430:	ldr	r5, [r6], #4
    a434:	add	r0, r0, #1
    a438:	str	r0, [r8]
    a43c:	add	r8, r8, #4
    a440:	mov	r7, r0
    a444:	cmp	r0, r5
    a448:	mov	r5, r3
    a44c:	beq	a41c <transpose_array+0x47c>
    a450:	b	a3d4 <transpose_array+0x434>
    a454:	ldr	r4, [sp, #28]
    a458:	ldr	r0, [sp, #32]
    a45c:	ldr	r2, [sp, #8]
    a460:	mov	r1, r4
    a464:	bl	0 <memcpy>
    a468:	mov	r0, r4
    a46c:	bl	0 <free>
    a470:	mov	r7, #0
    a474:	mov	r0, r7
    a478:	sub	sp, fp, #28
    a47c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a480:	add	r2, r6, r5, lsl #2
    a484:	add	r3, sl, r3, lsl #2
    a488:	mov	lr, r6
    a48c:	sub	r6, r2, #12
    a490:	mov	r2, #1
    a494:	ldr	r1, [r3]
    a498:	ldr	r7, [r3, #-4]
    a49c:	sub	r0, r0, #2
    a4a0:	sub	r3, r3, #8
    a4a4:	cmp	ip, r0
    a4a8:	mul	r1, r1, r2
    a4ac:	mul	r2, r7, r1
    a4b0:	str	r2, [r6]
    a4b4:	str	r1, [r6, #4]
    a4b8:	sub	r6, r6, #8
    a4bc:	bne	a494 <transpose_array+0x4f4>
    a4c0:	cmp	ip, #0
    a4c4:	mov	r6, lr
    a4c8:	beq	a0bc <transpose_array+0x11c>
    a4cc:	add	r1, r6, r0, lsl #2
    a4d0:	ldr	r0, [sl, r0, lsl #2]
    a4d4:	mul	r0, r0, r2
    a4d8:	str	r0, [r1, #-4]
    a4dc:	b	a0bc <transpose_array+0x11c>
    a4e0:	movw	r0, #0
    a4e4:	movw	r1, #0
    a4e8:	movw	r3, #0
    a4ec:	mov	r2, #172	; 0xac
    a4f0:	movt	r0, #0
    a4f4:	movt	r1, #0
    a4f8:	movt	r3, #0
    a4fc:	bl	0 <__assert_fail>
