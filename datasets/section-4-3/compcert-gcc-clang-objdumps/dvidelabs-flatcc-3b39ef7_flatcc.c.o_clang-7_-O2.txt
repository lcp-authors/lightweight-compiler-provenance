
../compcert-repos/dvidelabs-flatcc-3b39ef7/src/compiler/CMakeFiles/flatcc.dir/flatcc.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <flatcc_init_options>:
   0:	push	{r4, r5, fp, lr}
   4:	add	fp, sp, #8
   8:	mov	r1, #0
   c:	mov	r2, #224	; 0xe0
  10:	mov	r4, r0
  14:	mov	r5, #0
  18:	bl	0 <memset>
  1c:	add	r0, pc, #172	; 0xac
  20:	add	r1, pc, #184	; 0xb8
  24:	mov	r2, #100	; 0x64
  28:	vmov.i32	q8, #1	; 0x00000001
  2c:	movw	r3, #0
  30:	movw	ip, #65534	; 0xfffe
  34:	mov	lr, #4
  38:	vmov.i32	q9, #0	; 0x00000000
  3c:	vld1.64	{d20-d21}, [r1 :128]
  40:	mov	r1, #65536	; 0x10000
  44:	vld1.64	{d22-d23}, [r0 :128]
  48:	movw	r0, #0
  4c:	movt	r3, #0
  50:	stm	r4, {r1, r2}
  54:	add	r1, r4, #16
  58:	str	r2, [r4, #8]
  5c:	mov	r2, #1
  60:	movt	r0, #0
  64:	vst1.64	{d16-d17}, [r1]
  68:	add	r1, r4, #32
  6c:	vst1.64	{d16-d17}, [r1]
  70:	movw	r1, #0
  74:	str	lr, [r4, #64]	; 0x40
  78:	str	r2, [r4, #84]	; 0x54
  7c:	str	ip, [r4, #88]	; 0x58
  80:	str	r5, [r4, #92]	; 0x5c
  84:	str	r3, [r4, #96]	; 0x60
  88:	str	r0, [r4, #100]	; 0x64
  8c:	add	r0, r4, #144	; 0x90
  90:	movt	r1, #0
  94:	str	r1, [r4, #104]	; 0x68
  98:	str	r5, [r4, #132]	; 0x84
  9c:	str	r2, [r4, #136]	; 0x88
  a0:	str	r2, [r4, #140]	; 0x8c
  a4:	str	r5, [r4, #164]	; 0xa4
  a8:	vst1.64	{d18-d19}, [r0]
  ac:	add	r0, r4, #48	; 0x30
  b0:	vst1.64	{d20-d21}, [r0]
  b4:	add	r0, r4, #68	; 0x44
  b8:	vst1.32	{d22-d23}, [r0]
  bc:	str	lr, [r4, #176]	; 0xb0
  c0:	str	r5, [r4, #180]	; 0xb4
  c4:	str	r2, [r4, #184]	; 0xb8
  c8:	str	r5, [r4, #188]	; 0xbc
  cc:	pop	{r4, r5, fp, pc}
  d0:	.word	0x00000002
  d4:	.word	0x00000001
  d8:	.word	0x00000001
  dc:	.word	0x00000000
  e0:	.word	0x00000001
  e4:	.word	0x00000001
	...

000000f0 <flatcc_create_context>:
  f0:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
  f4:	add	fp, sp, #24
  f8:	sub	sp, sp, #8
  fc:	mov	r6, r0
 100:	mov	r0, #560	; 0x230
 104:	mov	r7, r3
 108:	mov	r8, r2
 10c:	mov	r9, r1
 110:	bl	0 <malloc>
 114:	cmp	r0, #0
 118:	beq	150 <flatcc_create_context+0x60>
 11c:	mov	r4, #0
 120:	mov	r1, r6
 124:	mov	r2, r9
 128:	mov	r3, r8
 12c:	mov	r5, r0
 130:	str	r7, [sp]
 134:	str	r4, [sp, #4]
 138:	bl	0 <__flatcc_fb_init_parser>
 13c:	cmp	r0, #0
 140:	beq	158 <flatcc_create_context+0x68>
 144:	mov	r0, r5
 148:	bl	0 <free>
 14c:	b	15c <flatcc_create_context+0x6c>
 150:	mov	r4, #0
 154:	b	15c <flatcc_create_context+0x6c>
 158:	mov	r4, r5
 15c:	mov	r0, r4
 160:	sub	sp, fp, #24
 164:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}

00000168 <flatcc_parse_buffer>:
 168:	push	{r4, r5, r6, sl, fp, lr}
 16c:	add	fp, sp, #16
 170:	mov	r4, r0
 174:	mov	r0, #1
 178:	mov	r5, r2
 17c:	mov	r6, r1
 180:	str	r0, [r4, #140]	; 0x8c
 184:	ldr	r0, [r4, #128]	; 0x80
 188:	cmp	r0, r2
 18c:	bcs	1b0 <flatcc_parse_buffer+0x48>
 190:	cmp	r0, #0
 194:	beq	1b0 <flatcc_parse_buffer+0x48>
 198:	movw	r1, #0
 19c:	mov	r0, r4
 1a0:	movt	r1, #0
 1a4:	bl	0 <__flatcc_fb_print_error>
 1a8:	mvn	r0, #0
 1ac:	pop	{r4, r5, r6, sl, fp, pc}
 1b0:	add	r0, r4, #524	; 0x20c
 1b4:	add	r1, r4, #352	; 0x160
 1b8:	mov	r2, #1
 1bc:	bl	0 <ptr_set_insert_item>
 1c0:	mov	r0, r4
 1c4:	mov	r1, r6
 1c8:	mov	r2, r5
 1cc:	mov	r3, #0
 1d0:	bl	0 <__flatcc_fb_parse>
 1d4:	mov	r1, r0
 1d8:	mvn	r0, #0
 1dc:	cmp	r1, #0
 1e0:	popne	{r4, r5, r6, sl, fp, pc}
 1e4:	mov	r0, r4
 1e8:	bl	0 <__flatcc_fb_build_schema>
 1ec:	cmp	r0, #0
 1f0:	mvnne	r0, #0
 1f4:	pop	{r4, r5, r6, sl, fp, pc}

000001f8 <flatcc_parse_file>:
 1f8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
 1fc:	add	fp, sp, #28
 200:	sub	sp, sp, #20
 204:	mov	r5, r0
 208:	mov	r0, r1
 20c:	mov	r7, r1
 210:	bl	0 <strlen>
 214:	mov	r8, r0
 218:	ldr	r0, [r5, #412]	; 0x19c
 21c:	add	r4, r5, #352	; 0x160
 220:	mov	r2, #1
 224:	mov	r1, r4
 228:	add	r0, r0, #32
 22c:	bl	0 <fb_schema_table_insert_item>
 230:	mov	r6, #0
 234:	cmp	r0, #0
 238:	bne	74c <flatcc_parse_file+0x554>
 23c:	ldr	r0, [r5, #552]	; 0x228
 240:	cmp	r0, #0
 244:	str	r0, [sp, #12]
 248:	beq	398 <flatcc_parse_file+0x1a0>
 24c:	ldr	r0, [r5, #336]	; 0x150
 250:	str	r4, [sp, #8]
 254:	cmp	r0, #1
 258:	blt	2ec <flatcc_parse_file+0xf4>
 25c:	mov	r9, #0
 260:	add	r4, sp, #16
 264:	ldr	r0, [r5, #328]	; 0x148
 268:	ldr	r6, [r0, r9, lsl #2]
 26c:	mov	r0, r6
 270:	bl	0 <strlen>
 274:	mov	r1, r0
 278:	movw	r0, #0
 27c:	mov	r2, r7
 280:	mov	r3, r8
 284:	movt	r0, #0
 288:	str	r0, [sp]
 28c:	mov	r0, #1
 290:	str	r0, [sp, #4]
 294:	mov	r0, r6
 298:	bl	0 <__flatcc_fb_create_join_path_n>
 29c:	cmp	r0, #0
 2a0:	beq	790 <flatcc_parse_file+0x598>
 2a4:	ldr	r1, [r5, #128]	; 0x80
 2a8:	mov	r2, r4
 2ac:	mov	r6, r0
 2b0:	bl	0 <__flatcc_fb_read_file>
 2b4:	cmp	r0, #0
 2b8:	bne	3cc <flatcc_parse_file+0x1d4>
 2bc:	mov	r0, r6
 2c0:	bl	0 <free>
 2c4:	ldr	r0, [r5, #128]	; 0x80
 2c8:	ldr	r1, [sp, #16]
 2cc:	cmp	r1, r0
 2d0:	bls	2dc <flatcc_parse_file+0xe4>
 2d4:	cmp	r0, #0
 2d8:	bne	700 <flatcc_parse_file+0x508>
 2dc:	ldr	r0, [r5, #336]	; 0x150
 2e0:	add	r9, r9, #1
 2e4:	cmp	r9, r0
 2e8:	blt	264 <flatcc_parse_file+0x6c>
 2ec:	ldr	r0, [sp, #12]
 2f0:	cmp	r0, #0
 2f4:	beq	37c <flatcc_parse_file+0x184>
 2f8:	ldr	r6, [r5, #552]	; 0x228
 2fc:	mov	r0, r6
 300:	bl	0 <strlen>
 304:	mov	r1, r0
 308:	mov	r0, r6
 30c:	bl	0 <__flatcc_fb_find_basename>
 310:	movw	r2, #0
 314:	mov	r1, r0
 318:	mov	r0, #1
 31c:	mov	r3, r8
 320:	movt	r2, #0
 324:	str	r0, [sp, #4]
 328:	mov	r0, r6
 32c:	str	r2, [sp]
 330:	mov	r2, r7
 334:	bl	0 <__flatcc_fb_create_join_path_n>
 338:	cmp	r0, #0
 33c:	beq	790 <flatcc_parse_file+0x598>
 340:	ldr	r1, [r5, #128]	; 0x80
 344:	add	r2, sp, #16
 348:	mov	r6, r0
 34c:	bl	0 <__flatcc_fb_read_file>
 350:	ldr	r4, [sp, #8]
 354:	cmp	r0, #0
 358:	bne	3d0 <flatcc_parse_file+0x1d8>
 35c:	mov	r0, r6
 360:	bl	0 <free>
 364:	ldr	r0, [r5, #128]	; 0x80
 368:	ldr	r1, [sp, #16]
 36c:	cmp	r1, r0
 370:	bls	37c <flatcc_parse_file+0x184>
 374:	cmp	r0, #0
 378:	bne	700 <flatcc_parse_file+0x508>
 37c:	movw	r1, #0
 380:	mov	r0, r5
 384:	mov	r2, r7
 388:	movt	r1, #0
 38c:	bl	0 <__flatcc_fb_print_error>
 390:	mvn	r6, #0
 394:	b	74c <flatcc_parse_file+0x554>
 398:	ldr	r1, [r5, #128]	; 0x80
 39c:	add	r2, sp, #16
 3a0:	mov	r0, r7
 3a4:	bl	0 <__flatcc_fb_read_file>
 3a8:	cmp	r0, #0
 3ac:	beq	6dc <flatcc_parse_file+0x4e4>
 3b0:	mov	sl, r0
 3b4:	mov	r0, r7
 3b8:	bl	0 <__flatcc_fb_copy_path>
 3bc:	cmp	r0, #0
 3c0:	beq	790 <flatcc_parse_file+0x598>
 3c4:	mov	r6, r0
 3c8:	b	3d4 <flatcc_parse_file+0x1dc>
 3cc:	ldr	r4, [sp, #8]
 3d0:	mov	sl, r0
 3d4:	ldr	r0, [r5, #412]	; 0x19c
 3d8:	ldr	r2, [sp, #16]
 3dc:	mov	r3, #1
 3e0:	ldr	r1, [r0, #56]	; 0x38
 3e4:	add	r1, r1, r2
 3e8:	str	r1, [r0, #56]	; 0x38
 3ec:	mov	r0, r5
 3f0:	mov	r1, sl
 3f4:	str	r6, [r5, #548]	; 0x224
 3f8:	bl	0 <__flatcc_fb_parse>
 3fc:	cmp	r0, #0
 400:	bne	748 <flatcc_parse_file+0x550>
 404:	ldr	r6, [r4]
 408:	mov	r8, r4
 40c:	cmp	r6, #0
 410:	beq	544 <flatcc_parse_file+0x34c>
 414:	add	r0, r5, #128	; 0x80
 418:	str	r0, [sp, #8]
 41c:	ldrd	r0, [r6, #8]
 420:	bl	0 <__flatcc_fb_copy_path_n>
 424:	cmp	r0, #0
 428:	beq	790 <flatcc_parse_file+0x598>
 42c:	ldr	sl, [r5, #412]	; 0x19c
 430:	mov	r9, r0
 434:	ldr	r0, [r5, #132]	; 0x84
 438:	ldr	r1, [sl, #52]	; 0x34
 43c:	cmp	r1, r0
 440:	cmpge	r0, #1
 444:	bge	718 <flatcc_parse_file+0x520>
 448:	ldr	r0, [r5, #136]	; 0x88
 44c:	ldr	r1, [sl, #48]	; 0x30
 450:	cmp	r1, r0
 454:	cmpge	r0, #1
 458:	bge	724 <flatcc_parse_file+0x52c>
 45c:	mov	r0, #560	; 0x230
 460:	bl	0 <malloc>
 464:	cmp	r0, #0
 468:	beq	740 <flatcc_parse_file+0x548>
 46c:	ldr	r3, [r5, #8]
 470:	ldr	r1, [r5, #12]
 474:	mov	r2, r9
 478:	mov	r7, r0
 47c:	stm	sp, {r1, sl}
 480:	ldr	r1, [sp, #8]
 484:	bl	0 <__flatcc_fb_init_parser>
 488:	cmp	r0, #0
 48c:	bne	738 <flatcc_parse_file+0x540>
 490:	add	r0, sl, #32
 494:	add	r1, r7, #352	; 0x160
 498:	bl	0 <fb_schema_table_find_item>
 49c:	cmp	r0, #0
 4a0:	beq	4dc <flatcc_parse_file+0x2e4>
 4a4:	movw	r1, #0
 4a8:	add	r0, r0, #172	; 0xac
 4ac:	mov	r2, r8
 4b0:	movt	r1, #0
 4b4:	bl	0 <ptr_set_visit>
 4b8:	ldr	r4, [r7]
 4bc:	mov	r0, r7
 4c0:	bl	0 <__flatcc_fb_clear_parser>
 4c4:	mov	r0, r7
 4c8:	bl	0 <free>
 4cc:	cmp	r4, #0
 4d0:	mov	r7, r4
 4d4:	bne	4b8 <flatcc_parse_file+0x2c0>
 4d8:	b	530 <flatcc_parse_file+0x338>
 4dc:	ldr	r0, [r5]
 4e0:	str	r0, [r7]
 4e4:	str	r7, [r5]
 4e8:	ldr	r0, [r5, #548]	; 0x224
 4ec:	str	r0, [r7, #552]	; 0x228
 4f0:	ldr	r0, [sl, #48]	; 0x30
 4f4:	ldr	r1, [sl, #52]	; 0x34
 4f8:	add	r0, r0, #1
 4fc:	add	r1, r1, #1
 500:	str	r0, [sl, #48]	; 0x30
 504:	str	r1, [sl, #52]	; 0x34
 508:	mov	r0, r7
 50c:	mov	r1, r9
 510:	bl	1f8 <flatcc_parse_file>
 514:	cmp	r0, #0
 518:	bne	740 <flatcc_parse_file+0x548>
 51c:	movw	r1, #0
 520:	add	r0, r7, #524	; 0x20c
 524:	mov	r2, r8
 528:	movt	r1, #0
 52c:	bl	0 <ptr_set_visit>
 530:	mov	r0, r9
 534:	bl	0 <free>
 538:	ldr	r6, [r6]
 53c:	cmp	r6, #0
 540:	bne	41c <flatcc_parse_file+0x224>
 544:	add	r0, r5, #524	; 0x20c
 548:	mov	r1, r8
 54c:	mov	r2, #1
 550:	bl	0 <ptr_set_insert_item>
 554:	mov	r0, r5
 558:	bl	0 <__flatcc_fb_build_schema>
 55c:	cmp	r0, #0
 560:	bne	748 <flatcc_parse_file+0x550>
 564:	ldr	r0, [sp, #12]
 568:	mov	r6, #0
 56c:	cmp	r0, #0
 570:	bne	74c <flatcc_parse_file+0x554>
 574:	ldr	r0, [r5, #240]	; 0xf0
 578:	cmp	r0, #0
 57c:	beq	74c <flatcc_parse_file+0x554>
 580:	ldr	r0, [r5, #552]	; 0x228
 584:	cmp	r0, #0
 588:	bne	7b8 <flatcc_parse_file+0x5c0>
 58c:	ldr	r1, [r5, #244]	; 0xf4
 590:	ldr	r3, [r5, #344]	; 0x158
 594:	movw	r2, #0
 598:	movw	r6, #0
 59c:	ldr	r7, [r5, #248]	; 0xf8
 5a0:	ldr	ip, [r5, #512]	; 0x200
 5a4:	movt	r6, #0
 5a8:	movt	r2, #0
 5ac:	mov	r0, r6
 5b0:	mov	r4, r6
 5b4:	cmp	r1, #0
 5b8:	movne	r2, r6
 5bc:	cmp	r3, #0
 5c0:	moveq	r3, r6
 5c4:	cmp	r1, #0
 5c8:	moveq	r0, r3
 5cc:	moveq	r1, ip
 5d0:	cmp	r7, #0
 5d4:	bne	5fc <flatcc_parse_file+0x404>
 5d8:	ldr	r7, [r5, #308]	; 0x134
 5dc:	movw	r4, #0
 5e0:	movw	r6, #0
 5e4:	movt	r4, #0
 5e8:	movt	r6, #0
 5ec:	cmp	r7, #0
 5f0:	mov	r7, ip
 5f4:	moveq	r6, r4
 5f8:	mov	r4, r3
 5fc:	mov	r3, #1
 600:	bl	0 <__flatcc_fb_create_join_path>
 604:	cmp	r0, #0
 608:	beq	790 <flatcc_parse_file+0x598>
 60c:	mov	r8, r0
 610:	mov	r0, r4
 614:	mov	r1, r7
 618:	mov	r2, r6
 61c:	mov	r3, #1
 620:	bl	0 <__flatcc_fb_create_join_path>
 624:	cmp	r0, #0
 628:	beq	790 <flatcc_parse_file+0x598>
 62c:	mov	r4, r0
 630:	bl	0 <__flatcc_fb_create_make_path>
 634:	cmp	r0, #0
 638:	mov	r6, #0
 63c:	beq	790 <flatcc_parse_file+0x598>
 640:	mov	r9, r0
 644:	mov	r0, r4
 648:	bl	0 <free>
 64c:	movw	r1, #0
 650:	mov	r0, r8
 654:	movt	r1, #0
 658:	bl	0 <fopen>
 65c:	mov	r7, r0
 660:	cmp	r0, #0
 664:	beq	758 <flatcc_parse_file+0x560>
 668:	movw	r1, #0
 66c:	mov	r0, r7
 670:	mov	r2, r9
 674:	movt	r1, #0
 678:	bl	0 <fprintf>
 67c:	ldr	r6, [r5]
 680:	cmp	r6, #0
 684:	beq	6c8 <flatcc_parse_file+0x4d0>
 688:	movw	r5, #0
 68c:	movt	r5, #0
 690:	ldr	r0, [r6, #548]	; 0x224
 694:	bl	0 <__flatcc_fb_create_make_path>
 698:	cmp	r0, #0
 69c:	beq	790 <flatcc_parse_file+0x598>
 6a0:	mov	r4, r0
 6a4:	mov	r0, r7
 6a8:	mov	r1, r5
 6ac:	mov	r2, r4
 6b0:	bl	0 <fprintf>
 6b4:	ldr	r6, [r6]
 6b8:	mov	r0, r4
 6bc:	bl	0 <free>
 6c0:	cmp	r6, #0
 6c4:	bne	690 <flatcc_parse_file+0x498>
 6c8:	mov	r0, #10
 6cc:	mov	r1, r7
 6d0:	bl	0 <fputc_unlocked>
 6d4:	mov	r6, #0
 6d8:	b	76c <flatcc_parse_file+0x574>
 6dc:	ldr	r1, [r5, #412]	; 0x19c
 6e0:	ldr	r2, [sp, #16]
 6e4:	ldr	r0, [r5, #128]	; 0x80
 6e8:	ldr	r1, [r1, #56]	; 0x38
 6ec:	add	r1, r1, r2
 6f0:	cmp	r1, r0
 6f4:	bls	24c <flatcc_parse_file+0x54>
 6f8:	cmp	r0, #0
 6fc:	beq	24c <flatcc_parse_file+0x54>
 700:	movw	r1, #0
 704:	mov	r0, r5
 708:	movt	r1, #0
 70c:	bl	0 <__flatcc_fb_print_error>
 710:	mvn	r6, #0
 714:	b	74c <flatcc_parse_file+0x554>
 718:	movw	r1, #0
 71c:	movt	r1, #0
 720:	b	72c <flatcc_parse_file+0x534>
 724:	movw	r1, #0
 728:	movt	r1, #0
 72c:	mov	r0, r5
 730:	bl	0 <__flatcc_fb_print_error>
 734:	b	740 <flatcc_parse_file+0x548>
 738:	mov	r0, r7
 73c:	bl	0 <free>
 740:	mov	r0, r9
 744:	bl	0 <free>
 748:	mov	r6, #0
 74c:	mov	r0, r6
 750:	sub	sp, fp, #28
 754:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
 758:	movw	r1, #0
 75c:	mov	r0, r5
 760:	mov	r2, r8
 764:	movt	r1, #0
 768:	bl	0 <__flatcc_fb_print_error>
 76c:	mov	r0, r8
 770:	bl	0 <free>
 774:	mov	r0, r9
 778:	bl	0 <free>
 77c:	cmp	r7, #0
 780:	beq	74c <flatcc_parse_file+0x554>
 784:	mov	r0, r7
 788:	bl	0 <fclose>
 78c:	b	74c <flatcc_parse_file+0x554>
 790:	movw	r0, #0
 794:	mov	r1, #34	; 0x22
 798:	mov	r2, #1
 79c:	movt	r0, #0
 7a0:	ldr	r3, [r0]
 7a4:	movw	r0, #0
 7a8:	movt	r0, #0
 7ac:	bl	0 <fwrite>
 7b0:	mov	r0, #1
 7b4:	bl	0 <exit>
 7b8:	movw	r0, #0
 7bc:	movw	r1, #0
 7c0:	movw	r3, #0
 7c4:	mov	r2, #220	; 0xdc
 7c8:	movt	r0, #0
 7cc:	movt	r1, #0
 7d0:	movt	r3, #0
 7d4:	bl	0 <__assert_fail>

000007d8 <flatcc_generate_binary_schema_to_buffer>:
 7d8:	push	{fp, lr}
 7dc:	mov	fp, sp
 7e0:	sub	sp, sp, #8
 7e4:	mov	ip, r1
 7e8:	str	r2, [sp, #4]
 7ec:	add	r2, r0, #128	; 0x80
 7f0:	add	r1, r0, #352	; 0x160
 7f4:	add	r3, sp, #4
 7f8:	mov	r0, r2
 7fc:	mov	r2, ip
 800:	bl	0 <__flatcc_fb_codegen_bfbs_to_buffer>
 804:	ldr	r1, [sp, #4]
 808:	cmp	r0, #0
 80c:	mvneq	r1, #0
 810:	mov	r0, r1
 814:	mov	sp, fp
 818:	pop	{fp, pc}

0000081c <flatcc_generate_binary_schema>:
 81c:	add	r3, r0, #128	; 0x80
 820:	mov	r2, r1
 824:	add	r1, r0, #352	; 0x160
 828:	mov	r0, r3
 82c:	b	0 <__flatcc_fb_codegen_bfbs_alloc_buffer>

00000830 <flatcc_generate_files>:
 830:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
 834:	add	fp, sp, #24
 838:	sub	sp, sp, #232	; 0xe8
 83c:	mvn	r4, #0
 840:	cmp	r0, #0
 844:	beq	858 <flatcc_generate_files+0x28>
 848:	mov	r5, r0
 84c:	ldr	r0, [r0, #108]	; 0x6c
 850:	cmp	r0, #0
 854:	beq	864 <flatcc_generate_files+0x34>
 858:	mov	r0, r4
 85c:	sub	sp, fp, #24
 860:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
 864:	mov	r0, #0
 868:	mov	r1, r5
 86c:	str	r0, [r1, #4]
 870:	mov	r7, r1
 874:	ldr	r1, [r1]
 878:	mov	r0, r7
 87c:	cmp	r1, #0
 880:	bne	86c <flatcc_generate_files+0x3c>
 884:	ldr	r0, [r5, #308]	; 0x134
 888:	add	r6, r5, #128	; 0x80
 88c:	cmp	r0, #0
 890:	beq	8a8 <flatcc_generate_files+0x78>
 894:	add	r1, r5, #352	; 0x160
 898:	mov	r0, r6
 89c:	bl	0 <__flatcc_fb_codegen_bfbs_to_file>
 8a0:	cmp	r0, #0
 8a4:	bne	858 <flatcc_generate_files+0x28>
 8a8:	mov	r0, sp
 8ac:	mov	r1, r6
 8b0:	bl	0 <__flatcc_fb_init_output_c>
 8b4:	cmp	r0, #0
 8b8:	bne	858 <flatcc_generate_files+0x28>
 8bc:	ldr	r0, [r5, #256]	; 0x100
 8c0:	cmp	r0, #0
 8c4:	beq	92c <flatcc_generate_files+0xfc>
 8c8:	ldr	r0, [r5, #120]	; 0x78
 8cc:	mov	r4, #0
 8d0:	cmp	r0, #0
 8d4:	beq	95c <flatcc_generate_files+0x12c>
 8d8:	ldr	r0, [r5, #300]	; 0x12c
 8dc:	cmp	r0, #0
 8e0:	beq	944 <flatcc_generate_files+0x114>
 8e4:	cmp	r7, #0
 8e8:	beq	95c <flatcc_generate_files+0x12c>
 8ec:	mov	r5, sp
 8f0:	ldr	r0, [r7, #108]	; 0x6c
 8f4:	cmp	r0, #0
 8f8:	bne	958 <flatcc_generate_files+0x128>
 8fc:	add	r1, r7, #352	; 0x160
 900:	mov	r0, r5
 904:	bl	0 <__flatcc_fb_codegen_c>
 908:	ldr	r7, [r7, #4]
 90c:	cmp	r0, #0
 910:	mov	r4, r0
 914:	movwne	r4, #1
 918:	cmp	r7, #0
 91c:	beq	95c <flatcc_generate_files+0x12c>
 920:	cmp	r0, #0
 924:	beq	8f0 <flatcc_generate_files+0xc0>
 928:	b	95c <flatcc_generate_files+0x12c>
 92c:	mov	r0, sp
 930:	bl	0 <__flatcc_fb_codegen_common_c>
 934:	mov	r4, r0
 938:	cmp	r0, #0
 93c:	bne	95c <flatcc_generate_files+0x12c>
 940:	b	8c8 <flatcc_generate_files+0x98>
 944:	add	r1, r5, #352	; 0x160
 948:	mov	r0, sp
 94c:	bl	0 <__flatcc_fb_codegen_c>
 950:	mov	r4, r0
 954:	b	95c <flatcc_generate_files+0x12c>
 958:	mov	r4, #1
 95c:	mov	r0, sp
 960:	bl	0 <__flatcc_fb_end_output_c>
 964:	b	858 <flatcc_generate_files+0x28>

00000968 <flatcc_destroy_context>:
 968:	push	{r4, r5, fp, lr}
 96c:	add	fp, sp, #8
 970:	cmp	r0, #0
 974:	popeq	{r4, r5, fp, pc}
 978:	mov	r4, r0
 97c:	ldr	r5, [r4]
 980:	mov	r0, r4
 984:	bl	0 <__flatcc_fb_clear_parser>
 988:	mov	r0, r4
 98c:	bl	0 <free>
 990:	cmp	r5, #0
 994:	mov	r4, r5
 998:	bne	97c <flatcc_destroy_context+0x14>
 99c:	pop	{r4, r5, fp, pc}

000009a0 <visit_dep>:
 9a0:	add	r0, r0, #172	; 0xac
 9a4:	mov	r2, #1
 9a8:	b	0 <ptr_set_insert_item>
