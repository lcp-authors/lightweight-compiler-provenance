
../compcert-repos/dvidelabs-flatcc-3b39ef7/test/json_test/CMakeFiles/test_basic_parse.dir/test_basic_parse.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <test>:
       0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
       4:	sub	sp, sp, #196	; 0xc4
       8:	mov	r6, r1
       c:	mov	r8, r0
      10:	mov	r5, r2
      14:	mov	r1, #0
      18:	mov	r2, #44	; 0x2c
      1c:	add	r0, sp, #148	; 0x94
      20:	mov	r9, r3
      24:	bl	0 <memset>
      28:	mov	r3, #0
      2c:	mov	r2, r3
      30:	mov	ip, #1
      34:	mov	r0, r8
      38:	ldr	r1, [pc, #1432]	; 5d8 <test+0x5d8>
      3c:	str	r6, [sp, #152]	; 0x98
      40:	str	ip, [sp, #164]	; 0xa4
      44:	bl	0 <flatcc_builder_start_buffer>
      48:	sub	r3, r5, r6
      4c:	cmp	r3, #1
      50:	ble	64 <test+0x64>
      54:	ldrb	r3, [r6]
      58:	cmp	r3, #32
      5c:	bhi	78 <test+0x78>
      60:	beq	130 <test+0x130>
      64:	mov	r1, r6
      68:	mov	r2, r5
      6c:	add	r0, sp, #148	; 0x94
      70:	bl	0 <flatcc_json_parser_space_ext>
      74:	mov	r6, r0
      78:	cmp	r5, r6
      7c:	beq	57c <test+0x57c>
      80:	bls	90 <test+0x90>
      84:	ldrb	r3, [r6]
      88:	cmp	r3, #123	; 0x7b
      8c:	beq	144 <test+0x144>
      90:	ldr	sl, [pc, #1348]	; 5dc <test+0x5dc>
      94:	mov	r2, #123	; 0x7b
      98:	ldr	r1, [pc, #1344]	; 5e0 <test+0x5e0>
      9c:	ldr	r0, [sl]
      a0:	bl	0 <fprintf>
      a4:	mov	r2, r5
      a8:	mov	r1, r6
      ac:	add	r0, sp, #148	; 0x94
      b0:	mov	r3, #17
      b4:	bl	0 <flatcc_json_parser_set_error>
      b8:	mov	r4, r0
      bc:	ldr	r0, [sp, #172]	; 0xac
      c0:	cmp	r0, #0
      c4:	bne	f0 <test+0xf0>
      c8:	ldr	r3, [sl]
      cc:	mov	r2, #15
      d0:	mov	r1, #1
      d4:	ldr	r0, [pc, #1288]	; 5e4 <test+0x5e4>
      d8:	bl	0 <fwrite>
      dc:	ldr	r3, [sp, #172]	; 0xac
      e0:	mov	r0, r4
      e4:	str	r3, [r9]
      e8:	add	sp, sp, #196	; 0xc4
      ec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
      f0:	ldr	r3, [sp, #152]	; 0x98
      f4:	ldr	r5, [sp, #184]	; 0xb8
      f8:	ldr	r6, [sl]
      fc:	sub	r5, r5, r3
     100:	ldr	r7, [sp, #164]	; 0xa4
     104:	bl	0 <flatcc_json_parser_error_string>
     108:	add	r5, r5, #1
     10c:	mov	r3, r5
     110:	mov	r2, r7
     114:	ldr	r1, [pc, #1228]	; 5e8 <test+0x5e8>
     118:	str	r0, [sp]
     11c:	mov	r0, r6
     120:	bl	0 <fprintf>
     124:	mov	r0, r8
     128:	bl	0 <flatcc_builder_reset>
     12c:	b	dc <test+0xdc>
     130:	ldrb	r3, [r6, #1]
     134:	cmp	r3, #32
     138:	addhi	r6, r6, #1
     13c:	bls	64 <test+0x64>
     140:	b	78 <test+0x78>
     144:	add	r4, r6, #1
     148:	sub	r3, r5, r4
     14c:	cmp	r3, #1
     150:	ble	174 <test+0x174>
     154:	ldrb	r3, [r6, #1]
     158:	cmp	r3, #32
     15c:	bhi	188 <test+0x188>
     160:	bne	174 <test+0x174>
     164:	ldrb	r3, [r6, #2]
     168:	cmp	r3, #32
     16c:	addhi	r4, r6, #2
     170:	bhi	188 <test+0x188>
     174:	mov	r1, r4
     178:	mov	r2, r5
     17c:	add	r0, sp, #148	; 0x94
     180:	bl	0 <flatcc_json_parser_space_ext>
     184:	mov	r4, r0
     188:	cmp	r5, r4
     18c:	beq	c00 <test+0xc00>
     190:	mov	r1, #11
     194:	mov	r0, r8
     198:	bl	0 <flatcc_builder_start_table>
     19c:	ldrb	r3, [r4]
     1a0:	cmp	r3, #34	; 0x22
     1a4:	beq	b94 <test+0xb94>
     1a8:	cmp	r3, #46	; 0x2e
     1ac:	movne	r3, #1
     1b0:	subne	r1, r5, r4
     1b4:	strne	r3, [sp, #160]	; 0xa0
     1b8:	beq	cc0 <test+0xcc0>
     1bc:	cmp	r1, #8
     1c0:	bls	54c <test+0x54c>
     1c4:	ldrb	r2, [r4, #7]
     1c8:	mov	r3, #0
     1cc:	ldrb	r6, [r4, #6]
     1d0:	lsr	r0, r6, #24
     1d4:	str	r0, [sp, #60]	; 0x3c
     1d8:	lsl	r0, r6, #8
     1dc:	str	r0, [sp, #56]	; 0x38
     1e0:	ldrd	r6, [sp, #56]	; 0x38
     1e4:	orr	r6, r6, r2
     1e8:	orr	r7, r7, r3
     1ec:	mov	r2, r6
     1f0:	mov	r3, r7
     1f4:	ldrb	r6, [r4, #5]
     1f8:	lsr	r0, r6, #16
     1fc:	str	r0, [sp, #52]	; 0x34
     200:	lsl	r0, r6, #16
     204:	str	r0, [sp, #48]	; 0x30
     208:	ldrd	r6, [sp, #48]	; 0x30
     20c:	orr	r6, r6, r2
     210:	orr	r7, r7, r3
     214:	mov	r2, r6
     218:	mov	r3, r7
     21c:	ldrb	r6, [r4, #4]
     220:	lsr	r0, r6, #8
     224:	str	r0, [sp, #36]	; 0x24
     228:	lsl	r0, r6, #24
     22c:	str	r0, [sp, #32]
     230:	ldrd	r6, [sp, #32]
     234:	orr	r6, r6, r2
     238:	orr	r7, r7, r3
     23c:	mov	r2, r6
     240:	mov	r3, r7
     244:	ldrb	r0, [r4, #3]
     248:	str	r0, [sp, #44]	; 0x2c
     24c:	mov	r0, #0
     250:	str	r0, [sp, #40]	; 0x28
     254:	ldrd	r6, [sp, #40]	; 0x28
     258:	orr	r6, r6, r2
     25c:	orr	r7, r7, r3
     260:	mov	r2, r6
     264:	mov	r3, r7
     268:	ldrb	r6, [r4, #2]
     26c:	lsl	r0, r6, #8
     270:	str	r0, [sp, #28]
     274:	mov	r0, #0
     278:	str	r0, [sp, #24]
     27c:	ldrd	r6, [sp, #24]
     280:	orr	r6, r6, r2
     284:	orr	r7, r7, r3
     288:	mov	r2, r6
     28c:	mov	r3, r7
     290:	ldrb	r0, [r4]
     294:	ldrb	r6, [r4, #1]
     298:	mov	sl, #0
     29c:	cmp	r1, #8
     2a0:	lsl	r1, r0, #24
     2a4:	str	r1, [sp, #20]
     2a8:	str	sl, [sp, #16]
     2ac:	ldrd	r0, [sp, #16]
     2b0:	lsl	fp, r6, #16
     2b4:	orr	r2, r2, sl
     2b8:	orr	r3, r3, fp
     2bc:	orr	r0, r0, r2
     2c0:	orr	r1, r1, r3
     2c4:	strd	r0, [sp, #8]
     2c8:	bgt	530 <test+0x530>
     2cc:	ldrd	r2, [sp, #8]
     2d0:	ldr	r0, [pc, #788]	; 5ec <test+0x5ec>
     2d4:	mvn	r1, #0
     2d8:	and	r2, r2, r0
     2dc:	and	r3, r3, r1
     2e0:	mov	ip, r5
     2e4:	add	r1, pc, #692	; 0x2b4
     2e8:	ldrd	r0, [r1]
     2ec:	cmp	r3, r1
     2f0:	cmpeq	r2, r0
     2f4:	bhi	374 <test+0x374>
     2f8:	add	r3, pc, #680	; 0x2a8
     2fc:	ldrd	r2, [r3]
     300:	ldrd	r0, [sp, #8]
     304:	and	r0, r0, #-16777216	; 0xff000000
     308:	cmp	r1, r3
     30c:	cmpeq	r0, r2
     310:	bne	12e4 <test+0x12e4>
     314:	ldr	r3, [sp, #160]	; 0xa0
     318:	add	r1, r4, #5
     31c:	cmp	r3, #0
     320:	bne	7e8 <test+0x7e8>
     324:	cmp	r5, r1
     328:	beq	bac <test+0xbac>
     32c:	ldrb	r2, [r4, #5]
     330:	cmp	r2, #34	; 0x22
     334:	bne	354 <test+0x354>
     338:	b	bd0 <test+0xbd0>
     33c:	add	r1, r3, #1
     340:	cmp	r5, r1
     344:	beq	ba8 <test+0xba8>
     348:	ldrb	r2, [r3, #1]
     34c:	cmp	r2, #34	; 0x22
     350:	beq	bd0 <test+0xbd0>
     354:	cmp	r2, #92	; 0x5c
     358:	mov	r3, r1
     35c:	bne	33c <test+0x33c>
     360:	sub	r3, r5, r1
     364:	cmp	r3, #1
     368:	ble	bc4 <test+0xbc4>
     36c:	add	r3, r1, #1
     370:	b	33c <test+0x33c>
     374:	add	r7, pc, #564	; 0x234
     378:	ldrd	r6, [r7]
     37c:	ldrd	r0, [sp, #8]
     380:	mov	r0, #0
     384:	cmp	r1, r7
     388:	cmpeq	r0, r6
     38c:	bhi	5f4 <test+0x5f4>
     390:	ldrd	r0, [sp, #8]
     394:	add	r7, pc, #540	; 0x21c
     398:	ldrd	r6, [r7]
     39c:	cmp	r1, r7
     3a0:	cmpeq	r0, r6
     3a4:	bls	a1c <test+0xa1c>
     3a8:	ldrd	r2, [sp, #8]
     3ac:	add	r1, pc, #524	; 0x20c
     3b0:	ldrd	r0, [r1]
     3b4:	cmp	r3, r1
     3b8:	cmpeq	r2, r0
     3bc:	bne	12e4 <test+0x12e4>
     3c0:	sub	r3, r5, ip
     3c4:	cmp	r3, #8
     3c8:	bls	e4c <test+0xe4c>
     3cc:	ldrb	r2, [ip, #6]
     3d0:	mov	r1, #0
     3d4:	lsr	lr, r2, #24
     3d8:	lsl	r3, r2, #8
     3dc:	str	lr, [sp, #124]	; 0x7c
     3e0:	str	r3, [sp, #120]	; 0x78
     3e4:	ldrd	r2, [sp, #120]	; 0x78
     3e8:	orr	r3, r3, r1
     3ec:	ldrb	r0, [ip, #5]
     3f0:	lsr	lr, r0, #16
     3f4:	lsl	r1, r0, #16
     3f8:	str	lr, [sp, #108]	; 0x6c
     3fc:	str	r1, [sp, #104]	; 0x68
     400:	ldrd	r0, [sp, #104]	; 0x68
     404:	orr	r1, r1, r3
     408:	mov	r3, r1
     40c:	ldrb	r0, [ip, #4]
     410:	lsr	lr, r0, #8
     414:	lsl	r1, r0, #24
     418:	str	lr, [sp, #92]	; 0x5c
     41c:	str	r1, [sp, #88]	; 0x58
     420:	ldrd	r0, [sp, #88]	; 0x58
     424:	orr	r1, r1, r3
     428:	mov	r3, r1
     42c:	ldrb	r1, [ip, #3]
     430:	str	r1, [sp, #100]	; 0x64
     434:	mov	r1, #0
     438:	str	r1, [sp, #96]	; 0x60
     43c:	ldrd	r0, [sp, #96]	; 0x60
     440:	orr	r1, r1, r3
     444:	mov	r3, r1
     448:	ldrb	r0, [ip, #2]
     44c:	lsl	r1, r0, #8
     450:	str	r1, [sp, #84]	; 0x54
     454:	mov	r1, #0
     458:	str	r1, [sp, #80]	; 0x50
     45c:	ldrd	r0, [sp, #80]	; 0x50
     460:	orr	r1, r1, r3
     464:	mov	r3, r1
     468:	ldrb	r0, [ip, #1]
     46c:	lsl	r1, r0, #16
     470:	str	r1, [sp, #76]	; 0x4c
     474:	mov	r1, #0
     478:	str	r1, [sp, #72]	; 0x48
     47c:	ldrd	r0, [sp, #72]	; 0x48
     480:	orr	r1, r1, r3
     484:	mov	r3, r1
     488:	ldrb	r0, [ip]
     48c:	mov	r2, #0
     490:	lsl	r1, r0, #24
     494:	str	r1, [sp, #68]	; 0x44
     498:	mov	r1, #0
     49c:	str	r1, [sp, #64]	; 0x40
     4a0:	ldrd	r6, [sp, #64]	; 0x40
     4a4:	add	r1, pc, #284	; 0x11c
     4a8:	ldrd	r0, [r1]
     4ac:	orr	r7, r7, r3
     4b0:	cmp	r7, r1
     4b4:	cmpeq	r2, r0
     4b8:	bls	eac <test+0xeac>
     4bc:	add	r1, pc, #268	; 0x10c
     4c0:	ldrd	r0, [r1]
     4c4:	cmp	r7, r1
     4c8:	cmpeq	r2, r0
     4cc:	bne	14f0 <test+0x14f0>
     4d0:	ldr	r3, [sp, #160]	; 0xa0
     4d4:	add	r1, ip, #4
     4d8:	cmp	r3, #0
     4dc:	bne	1138 <test+0x1138>
     4e0:	cmp	r5, r1
     4e4:	beq	1320 <test+0x1320>
     4e8:	ldrb	r2, [ip, #4]
     4ec:	cmp	r2, #34	; 0x22
     4f0:	bne	510 <test+0x510>
     4f4:	b	1394 <test+0x1394>
     4f8:	add	r1, r3, #1
     4fc:	cmp	r5, r1
     500:	beq	131c <test+0x131c>
     504:	ldrb	r2, [r3, #1]
     508:	cmp	r2, #34	; 0x22
     50c:	beq	1394 <test+0x1394>
     510:	cmp	r2, #92	; 0x5c
     514:	mov	r3, r1
     518:	bne	4f8 <test+0x4f8>
     51c:	sub	r3, r5, r1
     520:	cmp	r3, #1
     524:	ble	1388 <test+0x1388>
     528:	add	r3, r1, #1
     52c:	b	4f8 <test+0x4f8>
     530:	ldrd	r2, [sp, #8]
     534:	ldr	r0, [pc, #176]	; 5ec <test+0x5ec>
     538:	mvn	r1, #0
     53c:	and	r2, r2, r0
     540:	and	r3, r3, r1
     544:	add	ip, r4, #8
     548:	b	2e4 <test+0x2e4>
     54c:	sub	r3, r1, #1
     550:	cmp	r3, #7
     554:	ldrls	pc, [pc, r3, lsl #2]
     558:	b	12e4 <test+0x12e4>
     55c:	.word	0x00000af4
     560:	.word	0x00000b0c
     564:	.word	0x00000b3c
     568:	.word	0x00000b30
     56c:	.word	0x00000b24
     570:	.word	0x00000b18
     574:	.word	0x00000b48
     578:	.word	0x000001c4
     57c:	ldr	sl, [pc, #88]	; 5dc <test+0x5dc>
     580:	mov	r2, #13
     584:	mov	r1, #1
     588:	ldr	r3, [sl]
     58c:	ldr	r0, [pc, #92]	; 5f0 <test+0x5f0>
     590:	mov	r4, r5
     594:	bl	0 <fwrite>
     598:	b	bc <test+0xbc>
     59c:	nop			; (mov r0, r0)
     5a0:	.word	0x6e63ffff
     5a4:	.word	0x7365636f
     5a8:	.word	0x74000000
     5ac:	.word	0x66697273
     5b0:	.word	0xffffffff
     5b4:	.word	0x7a756c74
     5b8:	.word	0x6e64731f
     5bc:	.word	0x7365636f
     5c0:	.word	0x6e647320
     5c4:	.word	0x7365636f
     5c8:	.word	0xffffffff
     5cc:	.word	0x6c656673
     5d0:	.word	0x00000000
     5d4:	.word	0x6c656674
	...
     5e0:	.word	0x00000018
     5e4:	.word	0x00000058
     5e8:	.word	0x0000004c
     5ec:	.word	0xffff0000
     5f0:	.word	0x00000008
     5f4:	add	r3, pc, #476	; 0x1dc
     5f8:	ldrd	r2, [r3]
     5fc:	cmp	r1, r3
     600:	cmpeq	r0, r2
     604:	bne	12e4 <test+0x12e4>
     608:	ldr	r3, [sp, #160]	; 0xa0
     60c:	add	r1, r4, #4
     610:	cmp	r3, #0
     614:	beq	a90 <test+0xa90>
     618:	cmp	r5, r1
     61c:	beq	688 <test+0x688>
     620:	ldrb	r3, [r4, #4]
     624:	cmp	r3, #32
     628:	bls	66c <test+0x66c>
     62c:	add	r4, r4, #5
     630:	cmp	r3, #46	; 0x2e
     634:	cmpne	r3, #95	; 0x5f
     638:	sub	r1, r4, #1
     63c:	beq	b74 <test+0xb74>
     640:	sub	r2, r3, #48	; 0x30
     644:	tst	r3, #128	; 0x80
     648:	uxtb	r2, r2
     64c:	bne	b74 <test+0xb74>
     650:	orr	r0, r3, #32
     654:	sub	r0, r0, #97	; 0x61
     658:	cmp	r2, #9
     65c:	uxtb	r0, r0
     660:	bls	b74 <test+0xb74>
     664:	cmp	r0, #25
     668:	bls	b74 <test+0xb74>
     66c:	sub	r3, r5, r1
     670:	cmp	r3, #1
     674:	ble	688 <test+0x688>
     678:	ldrb	r3, [r1]
     67c:	cmp	r3, #32
     680:	bhi	698 <test+0x698>
     684:	beq	f70 <test+0xf70>
     688:	mov	r2, r5
     68c:	add	r0, sp, #148	; 0x94
     690:	bl	0 <flatcc_json_parser_space_ext>
     694:	mov	r1, r0
     698:	cmp	r5, r1
     69c:	beq	57c <test+0x57c>
     6a0:	bls	f60 <test+0xf60>
     6a4:	ldrb	r3, [r1]
     6a8:	cmp	r3, #58	; 0x3a
     6ac:	bne	f60 <test+0xf60>
     6b0:	add	r4, r1, #1
     6b4:	sub	r3, r5, r4
     6b8:	cmp	r3, #1
     6bc:	ble	6d0 <test+0x6d0>
     6c0:	ldrb	r3, [r1, #1]
     6c4:	cmp	r3, #32
     6c8:	bhi	6e4 <test+0x6e4>
     6cc:	beq	f84 <test+0xf84>
     6d0:	mov	r1, r4
     6d4:	mov	r2, r5
     6d8:	add	r0, sp, #148	; 0x94
     6dc:	bl	0 <flatcc_json_parser_space_ext>
     6e0:	mov	r4, r0
     6e4:	cmp	r5, r4
     6e8:	beq	c00 <test+0xc00>
     6ec:	ldrb	r3, [r4]
     6f0:	cmp	r3, #34	; 0x22
     6f4:	addeq	r7, r4, #1
     6f8:	beq	714 <test+0x714>
     6fc:	mov	r1, r4
     700:	mov	r3, #16
     704:	mov	r2, r5
     708:	add	r0, sp, #148	; 0x94
     70c:	bl	0 <flatcc_json_parser_set_error>
     710:	mov	r7, r0
     714:	mov	r2, r5
     718:	mov	r1, r7
     71c:	add	r0, sp, #148	; 0x94
     720:	bl	0 <flatcc_json_parser_string_part>
     724:	cmp	r5, r0
     728:	mov	r4, r0
     72c:	beq	7cc <test+0x7cc>
     730:	ldrb	r3, [r0]
     734:	cmp	r3, #34	; 0x22
     738:	beq	cf4 <test+0xcf4>
     73c:	mov	r0, r8
     740:	sub	r6, r4, r7
     744:	bl	0 <flatcc_builder_start_string>
     748:	mov	r1, r6
     74c:	mov	r0, r8
     750:	bl	0 <flatcc_builder_extend_string>
     754:	cmp	r0, #0
     758:	beq	7cc <test+0x7cc>
     75c:	mov	r2, r6
     760:	mov	r1, r7
     764:	bl	0 <memcpy>
     768:	b	77c <test+0x77c>
     76c:	bl	0 <flatcc_builder_append_string>
     770:	ldrb	r3, [r4]
     774:	cmp	r3, #34	; 0x22
     778:	beq	c38 <test+0xc38>
     77c:	mov	r1, r4
     780:	add	r3, sp, #128	; 0x80
     784:	mov	r2, r5
     788:	add	r0, sp, #148	; 0x94
     78c:	bl	0 <flatcc_json_parser_string_escape>
     790:	ldrb	r2, [sp, #128]	; 0x80
     794:	add	r1, sp, #129	; 0x81
     798:	mov	r6, r0
     79c:	mov	r0, r8
     7a0:	bl	0 <flatcc_builder_append_string>
     7a4:	mov	r2, r5
     7a8:	mov	r1, r6
     7ac:	add	r0, sp, #148	; 0x94
     7b0:	bl	0 <flatcc_json_parser_string_part>
     7b4:	mov	r1, r6
     7b8:	mov	r4, r0
     7bc:	cmp	r5, r4
     7c0:	sub	r2, r0, r6
     7c4:	mov	r0, r8
     7c8:	bne	76c <test+0x76c>
     7cc:	ldr	sl, [pc, #12]	; 7e0 <test+0x7e0>
     7d0:	b	bc <test+0xbc>
     7d4:	nop			; (mov r0, r0)
     7d8:	.word	0x00000000
     7dc:	.word	0x7a756c75
     7e0:	.word	0x00000000
     7e4:	.word	0x00000018
     7e8:	cmp	r5, r1
     7ec:	beq	858 <test+0x858>
     7f0:	ldrb	r3, [r4, #5]
     7f4:	cmp	r3, #32
     7f8:	bls	83c <test+0x83c>
     7fc:	add	r4, r4, #6
     800:	cmp	r3, #46	; 0x2e
     804:	cmpne	r3, #95	; 0x5f
     808:	sub	r1, r4, #1
     80c:	beq	9fc <test+0x9fc>
     810:	sub	r2, r3, #48	; 0x30
     814:	tst	r3, #128	; 0x80
     818:	uxtb	r2, r2
     81c:	bne	9fc <test+0x9fc>
     820:	orr	r0, r3, #32
     824:	sub	r0, r0, #97	; 0x61
     828:	cmp	r2, #9
     82c:	uxtb	r0, r0
     830:	bls	9fc <test+0x9fc>
     834:	cmp	r0, #25
     838:	bls	9fc <test+0x9fc>
     83c:	sub	r3, r5, r1
     840:	cmp	r3, #1
     844:	ble	858 <test+0x858>
     848:	ldrb	r3, [r1]
     84c:	cmp	r3, #32
     850:	bhi	868 <test+0x868>
     854:	beq	c94 <test+0xc94>
     858:	mov	r2, r5
     85c:	add	r0, sp, #148	; 0x94
     860:	bl	0 <flatcc_json_parser_space_ext>
     864:	mov	r1, r0
     868:	cmp	r5, r1
     86c:	beq	57c <test+0x57c>
     870:	bls	f60 <test+0xf60>
     874:	ldrb	r3, [r1]
     878:	cmp	r3, #58	; 0x3a
     87c:	bne	f60 <test+0xf60>
     880:	add	r4, r1, #1
     884:	sub	r3, r5, r4
     888:	cmp	r3, #1
     88c:	ble	8a0 <test+0x8a0>
     890:	ldrb	r3, [r1, #1]
     894:	cmp	r3, #32
     898:	bhi	8b4 <test+0x8b4>
     89c:	beq	ae0 <test+0xae0>
     8a0:	mov	r1, r4
     8a4:	mov	r2, r5
     8a8:	add	r0, sp, #148	; 0x94
     8ac:	bl	0 <flatcc_json_parser_space_ext>
     8b0:	mov	r4, r0
     8b4:	cmp	r5, r4
     8b8:	beq	c00 <test+0xc00>
     8bc:	mov	r3, #1
     8c0:	mov	r2, r3
     8c4:	mov	r1, #0
     8c8:	mov	r0, r8
     8cc:	bl	0 <flatcc_builder_table_add>
     8d0:	subs	r6, r0, #0
     8d4:	beq	7cc <test+0x7cc>
     8d8:	add	ip, sp, #192	; 0xc0
     8dc:	mov	r2, #0
     8e0:	mov	r3, #0
     8e4:	mov	r1, #0
     8e8:	add	r0, sp, #136	; 0x88
     8ec:	str	r1, [ip, #-60]!	; 0xffffffc4
     8f0:	strd	r2, [sp, #136]	; 0x88
     8f4:	strb	r1, [r6]
     8f8:	mov	r2, r5
     8fc:	str	r0, [sp]
     900:	mov	r3, ip
     904:	mov	r1, r4
     908:	add	r0, sp, #148	; 0x94
     90c:	bl	0 <flatcc_json_parser_integer>
     910:	cmp	r4, r0
     914:	beq	7cc <test+0x7cc>
     918:	ldr	r3, [sp, #132]	; 0x84
     91c:	cmp	r3, #0
     920:	bne	ca8 <test+0xca8>
     924:	ldrd	r2, [sp, #136]	; 0x88
     928:	cmp	r3, #0
     92c:	cmpeq	r2, #255	; 0xff
     930:	strbls	r2, [r6]
     934:	bhi	b54 <test+0xb54>
     938:	sub	r3, r5, r0
     93c:	cmp	r3, #1
     940:	ble	954 <test+0x954>
     944:	ldrb	r3, [r0]
     948:	cmp	r3, #32
     94c:	bhi	964 <test+0x964>
     950:	beq	bd8 <test+0xbd8>
     954:	mov	r1, r0
     958:	mov	r2, r5
     95c:	add	r0, sp, #148	; 0x94
     960:	bl	0 <flatcc_json_parser_space_ext>
     964:	cmp	r5, r0
     968:	beq	57c <test+0x57c>
     96c:	ldrb	r3, [r0]
     970:	cmp	r3, #44	; 0x2c
     974:	bne	139c <test+0x139c>
     978:	add	r4, r0, #1
     97c:	sub	r3, r5, r4
     980:	cmp	r3, #1
     984:	ble	998 <test+0x998>
     988:	ldrb	r3, [r0, #1]
     98c:	cmp	r3, #32
     990:	bhi	9ac <test+0x9ac>
     994:	beq	bec <test+0xbec>
     998:	mov	r1, r4
     99c:	mov	r2, r5
     9a0:	add	r0, sp, #148	; 0x94
     9a4:	bl	0 <flatcc_json_parser_space_ext>
     9a8:	mov	r4, r0
     9ac:	cmp	r5, r4
     9b0:	beq	c00 <test+0xc00>
     9b4:	ldrb	r3, [r4]
     9b8:	cmp	r3, #125	; 0x7d
     9bc:	bne	19c <test+0x19c>
     9c0:	cmp	r5, r4
     9c4:	mov	r7, r4
     9c8:	bhi	13b0 <test+0x13b0>
     9cc:	ldr	sl, [pc, #-500]	; 7e0 <test+0x7e0>
     9d0:	mov	r2, #125	; 0x7d
     9d4:	ldr	r1, [pc, #-504]	; 7e4 <test+0x7e4>
     9d8:	ldr	r0, [sl]
     9dc:	bl	0 <fprintf>
     9e0:	mov	r2, r5
     9e4:	mov	r1, r7
     9e8:	add	r0, sp, #148	; 0x94
     9ec:	mov	r3, #17
     9f0:	bl	0 <flatcc_json_parser_set_error>
     9f4:	mov	r4, r0
     9f8:	b	bc <test+0xbc>
     9fc:	cmp	r5, r4
     a00:	mov	r1, r4
     a04:	beq	f20 <test+0xf20>
     a08:	ldrb	r2, [r4], #1
     a0c:	cmp	r2, #32
     a10:	bls	1490 <test+0x1490>
     a14:	mov	r3, r2
     a18:	b	800 <test+0x800>
     a1c:	add	r1, pc, #748	; 0x2ec
     a20:	ldrd	r0, [r1]
     a24:	cmp	r3, r1
     a28:	cmpeq	r2, r0
     a2c:	bne	12e4 <test+0x12e4>
     a30:	ldr	r3, [sp, #160]	; 0xa0
     a34:	add	r1, r4, #6
     a38:	cmp	r3, #0
     a3c:	bne	d20 <test+0xd20>
     a40:	cmp	r5, r1
     a44:	beq	f48 <test+0xf48>
     a48:	ldrb	r2, [r4, #6]
     a4c:	cmp	r2, #34	; 0x22
     a50:	bne	a70 <test+0xa70>
     a54:	b	fa4 <test+0xfa4>
     a58:	add	r1, r3, #1
     a5c:	cmp	r5, r1
     a60:	beq	f44 <test+0xf44>
     a64:	ldrb	r2, [r3, #1]
     a68:	cmp	r2, #34	; 0x22
     a6c:	beq	fa4 <test+0xfa4>
     a70:	cmp	r2, #92	; 0x5c
     a74:	mov	r3, r1
     a78:	bne	a58 <test+0xa58>
     a7c:	sub	r3, r5, r1
     a80:	cmp	r3, #1
     a84:	ble	f98 <test+0xf98>
     a88:	add	r3, r1, #1
     a8c:	b	a58 <test+0xa58>
     a90:	cmp	r5, r1
     a94:	beq	c20 <test+0xc20>
     a98:	ldrb	r2, [r4, #4]
     a9c:	cmp	r2, #34	; 0x22
     aa0:	bne	ac0 <test+0xac0>
     aa4:	b	cec <test+0xcec>
     aa8:	add	r1, r3, #1
     aac:	cmp	r5, r1
     ab0:	beq	c1c <test+0xc1c>
     ab4:	ldrb	r2, [r3, #1]
     ab8:	cmp	r2, #34	; 0x22
     abc:	beq	cec <test+0xcec>
     ac0:	cmp	r2, #92	; 0x5c
     ac4:	mov	r3, r1
     ac8:	bne	aa8 <test+0xaa8>
     acc:	sub	r3, r5, r1
     ad0:	cmp	r3, #1
     ad4:	ble	ce0 <test+0xce0>
     ad8:	add	r3, r1, #1
     adc:	b	aa8 <test+0xaa8>
     ae0:	ldrb	r3, [r1, #2]
     ae4:	cmp	r3, #32
     ae8:	addhi	r4, r1, #2
     aec:	bls	8a0 <test+0x8a0>
     af0:	b	8b4 <test+0x8b4>
     af4:	ldrb	r2, [r4]
     af8:	lsl	r3, r2, #24
     afc:	str	r3, [sp, #12]
     b00:	mov	r3, #0
     b04:	str	r3, [sp, #8]
     b08:	b	2cc <test+0x2cc>
     b0c:	mov	r2, #0
     b10:	mov	r3, #0
     b14:	b	290 <test+0x290>
     b18:	mov	r2, #0
     b1c:	mov	r3, #0
     b20:	b	1f4 <test+0x1f4>
     b24:	mov	r2, #0
     b28:	mov	r3, #0
     b2c:	b	21c <test+0x21c>
     b30:	mov	r2, #0
     b34:	mov	r3, #0
     b38:	b	244 <test+0x244>
     b3c:	mov	r2, #0
     b40:	mov	r3, #0
     b44:	b	268 <test+0x268>
     b48:	mov	r2, #0
     b4c:	mov	r3, #0
     b50:	b	1cc <test+0x1cc>
     b54:	mov	r1, r0
     b58:	mov	r3, #7
     b5c:	mov	r2, r5
     b60:	add	r0, sp, #148	; 0x94
     b64:	bl	0 <flatcc_json_parser_set_error>
     b68:	cmp	r4, r0
     b6c:	bne	938 <test+0x938>
     b70:	b	7cc <test+0x7cc>
     b74:	cmp	r5, r4
     b78:	mov	r1, r4
     b7c:	beq	12c0 <test+0x12c0>
     b80:	ldrb	r2, [r4], #1
     b84:	cmp	r2, #32
     b88:	bls	14e4 <test+0x14e4>
     b8c:	mov	r3, r2
     b90:	b	630 <test+0x630>
     b94:	add	r4, r4, #1
     b98:	mov	r3, #0
     b9c:	sub	r1, r5, r4
     ba0:	str	r3, [sp, #160]	; 0xa0
     ba4:	b	1bc <test+0x1bc>
     ba8:	mov	r1, r5
     bac:	mov	r3, #20
     bb0:	mov	r2, r5
     bb4:	add	r0, sp, #148	; 0x94
     bb8:	bl	0 <flatcc_json_parser_set_error>
     bbc:	mov	r1, r0
     bc0:	b	83c <test+0x83c>
     bc4:	ldrb	r3, [r1]
     bc8:	cmp	r3, #34	; 0x22
     bcc:	bne	bac <test+0xbac>
     bd0:	add	r1, r1, #1
     bd4:	b	83c <test+0x83c>
     bd8:	ldrb	r3, [r0, #1]
     bdc:	cmp	r3, #32
     be0:	addhi	r0, r0, #1
     be4:	bls	954 <test+0x954>
     be8:	b	964 <test+0x964>
     bec:	ldrb	r3, [r0, #2]
     bf0:	cmp	r3, #32
     bf4:	addhi	r4, r0, #2
     bf8:	bls	998 <test+0x998>
     bfc:	b	9ac <test+0x9ac>
     c00:	ldr	sl, [pc, #272]	; d18 <test+0xd18>
     c04:	mov	r2, #13
     c08:	mov	r1, #1
     c0c:	ldr	r3, [sl]
     c10:	ldr	r0, [pc, #260]	; d1c <test+0xd1c>
     c14:	bl	0 <fwrite>
     c18:	b	bc <test+0xbc>
     c1c:	mov	r1, r5
     c20:	mov	r3, #20
     c24:	mov	r2, r5
     c28:	add	r0, sp, #148	; 0x94
     c2c:	bl	0 <flatcc_json_parser_set_error>
     c30:	mov	r1, r0
     c34:	b	66c <test+0x66c>
     c38:	mov	r0, r8
     c3c:	bl	0 <flatcc_builder_end_string>
     c40:	mov	r6, r0
     c44:	cmp	r6, #0
     c48:	beq	7cc <test+0x7cc>
     c4c:	mov	r1, #10
     c50:	mov	r0, r8
     c54:	bl	0 <flatcc_builder_table_add_offset>
     c58:	cmp	r0, #0
     c5c:	beq	7cc <test+0x7cc>
     c60:	cmp	r4, r5
     c64:	str	r6, [r0]
     c68:	beq	c7c <test+0xc7c>
     c6c:	ldrb	r3, [r4]
     c70:	cmp	r3, #34	; 0x22
     c74:	addeq	r0, r4, #1
     c78:	beq	938 <test+0x938>
     c7c:	mov	r1, r4
     c80:	mov	r3, #20
     c84:	mov	r2, r5
     c88:	add	r0, sp, #148	; 0x94
     c8c:	bl	0 <flatcc_json_parser_set_error>
     c90:	b	938 <test+0x938>
     c94:	ldrb	r3, [r1, #1]
     c98:	cmp	r3, #32
     c9c:	addhi	r1, r1, #1
     ca0:	bls	858 <test+0x858>
     ca4:	b	868 <test+0x868>
     ca8:	mov	r1, r0
     cac:	mov	r3, #8
     cb0:	mov	r2, r5
     cb4:	add	r0, sp, #148	; 0x94
     cb8:	bl	0 <flatcc_json_parser_set_error>
     cbc:	b	b68 <test+0xb68>
     cc0:	mov	r1, r4
     cc4:	mov	r3, #5
     cc8:	mov	r2, r5
     ccc:	add	r0, sp, #148	; 0x94
     cd0:	bl	0 <flatcc_json_parser_set_error>
     cd4:	mov	r4, r0
     cd8:	sub	r1, r5, r0
     cdc:	b	1bc <test+0x1bc>
     ce0:	ldrb	r3, [r1]
     ce4:	cmp	r3, #34	; 0x22
     ce8:	bne	c20 <test+0xc20>
     cec:	add	r1, r1, #1
     cf0:	b	66c <test+0x66c>
     cf4:	sub	r2, r0, r7
     cf8:	mov	r1, r7
     cfc:	mov	r0, r8
     d00:	bl	0 <flatcc_builder_create_string>
     d04:	mov	r6, r0
     d08:	b	c44 <test+0xc44>
     d0c:	nop			; (mov r0, r0)
     d10:	.word	0x6e640000
     d14:	.word	0x7365636f
     d18:	.word	0x00000000
     d1c:	.word	0x00000008
     d20:	cmp	r5, r1
     d24:	beq	d90 <test+0xd90>
     d28:	ldrb	r3, [r4, #6]
     d2c:	cmp	r3, #32
     d30:	bls	d74 <test+0xd74>
     d34:	add	r4, r4, #7
     d38:	cmp	r3, #46	; 0x2e
     d3c:	cmpne	r3, #95	; 0x5f
     d40:	sub	r1, r4, #1
     d44:	beq	e2c <test+0xe2c>
     d48:	sub	r2, r3, #48	; 0x30
     d4c:	tst	r3, #128	; 0x80
     d50:	uxtb	r2, r2
     d54:	bne	e2c <test+0xe2c>
     d58:	orr	r0, r3, #32
     d5c:	sub	r0, r0, #97	; 0x61
     d60:	cmp	r2, #9
     d64:	uxtb	r0, r0
     d68:	bls	e2c <test+0xe2c>
     d6c:	cmp	r0, #25
     d70:	bls	e2c <test+0xe2c>
     d74:	sub	r3, r5, r1
     d78:	cmp	r3, #1
     d7c:	ble	d90 <test+0xd90>
     d80:	ldrb	r3, [r1]
     d84:	cmp	r3, #32
     d88:	bhi	da0 <test+0xda0>
     d8c:	beq	1338 <test+0x1338>
     d90:	mov	r2, r5
     d94:	add	r0, sp, #148	; 0x94
     d98:	bl	0 <flatcc_json_parser_space_ext>
     d9c:	mov	r1, r0
     da0:	cmp	r5, r1
     da4:	beq	57c <test+0x57c>
     da8:	bls	f60 <test+0xf60>
     dac:	ldrb	r3, [r1]
     db0:	cmp	r3, #58	; 0x3a
     db4:	bne	f60 <test+0xf60>
     db8:	add	r4, r1, #1
     dbc:	sub	r3, r5, r4
     dc0:	cmp	r3, #1
     dc4:	ble	dd8 <test+0xdd8>
     dc8:	ldrb	r3, [r1, #1]
     dcc:	cmp	r3, #32
     dd0:	bhi	dec <test+0xdec>
     dd4:	beq	134c <test+0x134c>
     dd8:	mov	r1, r4
     ddc:	mov	r2, r5
     de0:	add	r0, sp, #148	; 0x94
     de4:	bl	0 <flatcc_json_parser_space_ext>
     de8:	mov	r4, r0
     dec:	cmp	r5, r4
     df0:	beq	c00 <test+0xc00>
     df4:	mov	r3, #8
     df8:	mov	r2, r3
     dfc:	mov	r1, #1
     e00:	mov	r0, r8
     e04:	bl	0 <flatcc_builder_table_add>
     e08:	subs	r3, r0, #0
     e0c:	beq	7cc <test+0x7cc>
     e10:	mov	r2, r5
     e14:	mov	r1, r4
     e18:	add	r0, sp, #148	; 0x94
     e1c:	bl	0 <flatcc_json_parser_double>
     e20:	cmp	r0, r4
     e24:	bne	938 <test+0x938>
     e28:	b	7cc <test+0x7cc>
     e2c:	cmp	r5, r4
     e30:	mov	r1, r4
     e34:	beq	141c <test+0x141c>
     e38:	ldrb	r2, [r4], #1
     e3c:	cmp	r2, #32
     e40:	bls	14fc <test+0x14fc>
     e44:	mov	r3, r2
     e48:	b	d38 <test+0xd38>
     e4c:	sub	r3, r3, #1
     e50:	cmp	r3, #7
     e54:	ldrls	pc, [pc, r3, lsl #2]
     e58:	b	14f0 <test+0x14f0>
     e5c:	.word	0x00000ea4
     e60:	.word	0x00000e9c
     e64:	.word	0x00000e94
     e68:	.word	0x00000e8c
     e6c:	.word	0x00000e84
     e70:	.word	0x00000e7c
     e74:	.word	0x000003cc
     e78:	.word	0x000003cc
     e7c:	mov	r3, #0
     e80:	b	3ec <test+0x3ec>
     e84:	mov	r3, #0
     e88:	b	40c <test+0x40c>
     e8c:	mov	r3, #0
     e90:	b	42c <test+0x42c>
     e94:	mov	r3, #0
     e98:	b	448 <test+0x448>
     e9c:	mov	r3, #0
     ea0:	b	468 <test+0x468>
     ea4:	mov	r3, #0
     ea8:	b	488 <test+0x488>
     eac:	add	r1, pc, #628	; 0x274
     eb0:	ldrd	r0, [r1]
     eb4:	cmp	r7, r1
     eb8:	cmpeq	r2, r0
     ebc:	bne	14f0 <test+0x14f0>
     ec0:	ldr	r3, [sp, #160]	; 0xa0
     ec4:	add	r1, ip, #4
     ec8:	cmp	r3, #0
     ecc:	bne	fac <test+0xfac>
     ed0:	cmp	r5, r1
     ed4:	beq	1304 <test+0x1304>
     ed8:	ldrb	r2, [ip, #4]
     edc:	cmp	r2, #34	; 0x22
     ee0:	bne	f00 <test+0xf00>
     ee4:	b	1380 <test+0x1380>
     ee8:	add	r1, r3, #1
     eec:	cmp	r5, r1
     ef0:	beq	1300 <test+0x1300>
     ef4:	ldrb	r2, [r3, #1]
     ef8:	cmp	r2, #34	; 0x22
     efc:	beq	1380 <test+0x1380>
     f00:	cmp	r2, #92	; 0x5c
     f04:	mov	r3, r1
     f08:	bne	ee8 <test+0xee8>
     f0c:	sub	r3, r5, r1
     f10:	cmp	r3, #1
     f14:	ble	1374 <test+0x1374>
     f18:	add	r3, r1, #1
     f1c:	b	ee8 <test+0xee8>
     f20:	cmp	r3, #46	; 0x2e
     f24:	mov	r1, r5
     f28:	bne	858 <test+0x858>
     f2c:	mov	r3, #5
     f30:	mov	r2, r5
     f34:	add	r0, sp, #148	; 0x94
     f38:	bl	0 <flatcc_json_parser_set_error>
     f3c:	mov	r1, r0
     f40:	b	83c <test+0x83c>
     f44:	mov	r1, r5
     f48:	mov	r3, #20
     f4c:	mov	r2, r5
     f50:	add	r0, sp, #148	; 0x94
     f54:	bl	0 <flatcc_json_parser_set_error>
     f58:	mov	r1, r0
     f5c:	b	d74 <test+0xd74>
     f60:	mov	r6, r1
     f64:	ldr	sl, [pc, #452]	; 1130 <test+0x1130>
     f68:	mov	r2, #58	; 0x3a
     f6c:	b	98 <test+0x98>
     f70:	ldrb	r3, [r1, #1]
     f74:	cmp	r3, #32
     f78:	addhi	r1, r1, #1
     f7c:	bls	688 <test+0x688>
     f80:	b	698 <test+0x698>
     f84:	ldrb	r3, [r1, #2]
     f88:	cmp	r3, #32
     f8c:	addhi	r4, r1, #2
     f90:	bls	6d0 <test+0x6d0>
     f94:	b	6e4 <test+0x6e4>
     f98:	ldrb	r3, [r1]
     f9c:	cmp	r3, #34	; 0x22
     fa0:	bne	f48 <test+0xf48>
     fa4:	add	r1, r1, #1
     fa8:	b	d74 <test+0xd74>
     fac:	cmp	r5, r1
     fb0:	beq	101c <test+0x101c>
     fb4:	ldrb	r3, [ip, #4]
     fb8:	cmp	r3, #32
     fbc:	bls	1000 <test+0x1000>
     fc0:	add	ip, ip, #5
     fc4:	cmp	r3, #46	; 0x2e
     fc8:	cmpne	r3, #95	; 0x5f
     fcc:	sub	r1, ip, #1
     fd0:	beq	1104 <test+0x1104>
     fd4:	sub	r2, r3, #48	; 0x30
     fd8:	tst	r3, #128	; 0x80
     fdc:	uxtb	r2, r2
     fe0:	bne	1104 <test+0x1104>
     fe4:	orr	r0, r3, #32
     fe8:	sub	r0, r0, #97	; 0x61
     fec:	cmp	r2, #9
     ff0:	uxtb	r0, r0
     ff4:	bls	1104 <test+0x1104>
     ff8:	cmp	r0, #25
     ffc:	bls	1104 <test+0x1104>
    1000:	sub	r3, r5, r1
    1004:	cmp	r3, #1
    1008:	ble	101c <test+0x101c>
    100c:	ldrb	r3, [r1]
    1010:	cmp	r3, #32
    1014:	bhi	102c <test+0x102c>
    1018:	beq	1454 <test+0x1454>
    101c:	mov	r2, r5
    1020:	add	r0, sp, #148	; 0x94
    1024:	bl	0 <flatcc_json_parser_space_ext>
    1028:	mov	r1, r0
    102c:	cmp	r5, r1
    1030:	beq	57c <test+0x57c>
    1034:	bls	f60 <test+0xf60>
    1038:	ldrb	r3, [r1]
    103c:	cmp	r3, #58	; 0x3a
    1040:	bne	f60 <test+0xf60>
    1044:	add	r4, r1, #1
    1048:	sub	r3, r5, r4
    104c:	cmp	r3, #1
    1050:	ble	1064 <test+0x1064>
    1054:	ldrb	r3, [r1, #1]
    1058:	cmp	r3, #32
    105c:	bhi	1078 <test+0x1078>
    1060:	beq	147c <test+0x147c>
    1064:	mov	r1, r4
    1068:	mov	r2, r5
    106c:	add	r0, sp, #148	; 0x94
    1070:	bl	0 <flatcc_json_parser_space_ext>
    1074:	mov	r4, r0
    1078:	cmp	r5, r4
    107c:	beq	c00 <test+0xc00>
    1080:	mov	r3, #8
    1084:	mov	r2, r3
    1088:	mov	r1, #3
    108c:	mov	r0, r8
    1090:	bl	0 <flatcc_builder_table_add>
    1094:	subs	r6, r0, #0
    1098:	beq	7cc <test+0x7cc>
    109c:	mov	r0, #0
    10a0:	mov	r1, #0
    10a4:	add	r3, sp, #192	; 0xc0
    10a8:	mov	ip, #0
    10ac:	add	r2, sp, #136	; 0x88
    10b0:	strd	r0, [sp, #136]	; 0x88
    10b4:	str	ip, [r3, #-60]!	; 0xffffffc4
    10b8:	strd	r0, [r6]
    10bc:	str	r2, [sp]
    10c0:	mov	r1, r4
    10c4:	mov	r2, r5
    10c8:	add	r0, sp, #148	; 0x94
    10cc:	bl	0 <flatcc_json_parser_integer>
    10d0:	cmp	r4, r0
    10d4:	beq	7cc <test+0x7cc>
    10d8:	ldr	r1, [sp, #132]	; 0x84
    10dc:	ldrd	r2, [sp, #136]	; 0x88
    10e0:	cmp	r1, #0
    10e4:	beq	1360 <test+0x1360>
    10e8:	cmp	r3, #-2147483648	; 0x80000000
    10ec:	cmpeq	r2, #0
    10f0:	bhi	ca8 <test+0xca8>
    10f4:	rsbs	r2, r2, #0
    10f8:	rsc	r3, r3, #0
    10fc:	strd	r2, [r6]
    1100:	b	938 <test+0x938>
    1104:	cmp	r5, ip
    1108:	mov	r1, ip
    110c:	beq	149c <test+0x149c>
    1110:	ldrb	r2, [ip], #1
    1114:	cmp	r2, #32
    1118:	bls	1508 <test+0x1508>
    111c:	mov	r3, r2
    1120:	b	fc4 <test+0xfc4>
    1124:	nop			; (mov r0, r0)
    1128:	.word	0x00000000
    112c:	.word	0x6c656164
    1130:	.word	0x00000000
    1134:	.word	0x00000030
    1138:	cmp	r5, r1
    113c:	beq	11a8 <test+0x11a8>
    1140:	ldrb	r3, [ip, #4]
    1144:	cmp	r3, #32
    1148:	bls	118c <test+0x118c>
    114c:	add	ip, ip, #5
    1150:	cmp	r3, #46	; 0x2e
    1154:	cmpne	r3, #95	; 0x5f
    1158:	sub	r1, ip, #1
    115c:	beq	12a0 <test+0x12a0>
    1160:	sub	r2, r3, #48	; 0x30
    1164:	tst	r3, #128	; 0x80
    1168:	uxtb	r2, r2
    116c:	bne	12a0 <test+0x12a0>
    1170:	orr	r0, r3, #32
    1174:	sub	r0, r0, #97	; 0x61
    1178:	cmp	r2, #9
    117c:	uxtb	r0, r0
    1180:	bls	12a0 <test+0x12a0>
    1184:	cmp	r0, #25
    1188:	bls	12a0 <test+0x12a0>
    118c:	sub	r3, r5, r1
    1190:	cmp	r3, #1
    1194:	ble	11a8 <test+0x11a8>
    1198:	ldrb	r3, [r1]
    119c:	cmp	r3, #32
    11a0:	bhi	11b8 <test+0x11b8>
    11a4:	beq	1440 <test+0x1440>
    11a8:	mov	r2, r5
    11ac:	add	r0, sp, #148	; 0x94
    11b0:	bl	0 <flatcc_json_parser_space_ext>
    11b4:	mov	r1, r0
    11b8:	cmp	r5, r1
    11bc:	beq	57c <test+0x57c>
    11c0:	bls	f60 <test+0xf60>
    11c4:	ldrb	r3, [r1]
    11c8:	cmp	r3, #58	; 0x3a
    11cc:	bne	f60 <test+0xf60>
    11d0:	add	r4, r1, #1
    11d4:	sub	r3, r5, r4
    11d8:	cmp	r3, #1
    11dc:	ble	11f0 <test+0x11f0>
    11e0:	ldrb	r3, [r1, #1]
    11e4:	cmp	r3, #32
    11e8:	bhi	1204 <test+0x1204>
    11ec:	beq	1468 <test+0x1468>
    11f0:	mov	r1, r4
    11f4:	mov	r2, r5
    11f8:	add	r0, sp, #148	; 0x94
    11fc:	bl	0 <flatcc_json_parser_space_ext>
    1200:	mov	r4, r0
    1204:	cmp	r5, r4
    1208:	beq	c00 <test+0xc00>
    120c:	mov	r3, #4
    1210:	mov	r2, r3
    1214:	mov	r1, #2
    1218:	mov	r0, r8
    121c:	bl	0 <flatcc_builder_table_add>
    1220:	subs	r3, r0, #0
    1224:	str	r3, [sp, #116]	; 0x74
    1228:	beq	7cc <test+0x7cc>
    122c:	add	ip, sp, #192	; 0xc0
    1230:	mov	r2, #0
    1234:	mov	r3, #0
    1238:	mov	r1, #0
    123c:	str	r1, [ip, #-60]!	; 0xffffffc4
    1240:	strd	r2, [sp, #136]	; 0x88
    1244:	mov	r3, ip
    1248:	ldr	ip, [sp, #116]	; 0x74
    124c:	add	r0, sp, #136	; 0x88
    1250:	mov	r2, r5
    1254:	str	r1, [ip]
    1258:	str	r0, [sp]
    125c:	mov	r1, r4
    1260:	add	r0, sp, #148	; 0x94
    1264:	bl	0 <flatcc_json_parser_integer>
    1268:	cmp	r4, r0
    126c:	beq	7cc <test+0x7cc>
    1270:	ldr	r3, [sp, #132]	; 0x84
    1274:	cmp	r3, #0
    1278:	bne	ca8 <test+0xca8>
    127c:	ldrd	r2, [sp, #136]	; 0x88
    1280:	mov	r7, #0
    1284:	mvn	r6, #0
    1288:	cmp	r3, r7
    128c:	cmpeq	r2, r6
    1290:	bhi	b54 <test+0xb54>
    1294:	ldr	r1, [sp, #116]	; 0x74
    1298:	str	r2, [r1]
    129c:	b	938 <test+0x938>
    12a0:	cmp	r5, ip
    12a4:	mov	r1, ip
    12a8:	beq	14c0 <test+0x14c0>
    12ac:	ldrb	r2, [ip], #1
    12b0:	cmp	r2, #32
    12b4:	bls	1514 <test+0x1514>
    12b8:	mov	r3, r2
    12bc:	b	1150 <test+0x1150>
    12c0:	cmp	r3, #46	; 0x2e
    12c4:	mov	r1, r5
    12c8:	bne	688 <test+0x688>
    12cc:	mov	r3, #5
    12d0:	mov	r2, r5
    12d4:	add	r0, sp, #148	; 0x94
    12d8:	bl	0 <flatcc_json_parser_set_error>
    12dc:	mov	r1, r0
    12e0:	b	66c <test+0x66c>
    12e4:	mov	r2, r5
    12e8:	mov	r1, r4
    12ec:	add	r0, sp, #148	; 0x94
    12f0:	mov	r3, #13
    12f4:	bl	0 <flatcc_json_parser_set_error>
    12f8:	mov	r4, r0
    12fc:	b	7cc <test+0x7cc>
    1300:	mov	r1, r5
    1304:	mov	r3, #20
    1308:	mov	r2, r5
    130c:	add	r0, sp, #148	; 0x94
    1310:	bl	0 <flatcc_json_parser_set_error>
    1314:	mov	r1, r0
    1318:	b	1000 <test+0x1000>
    131c:	mov	r1, r5
    1320:	mov	r3, #20
    1324:	mov	r2, r5
    1328:	add	r0, sp, #148	; 0x94
    132c:	bl	0 <flatcc_json_parser_set_error>
    1330:	mov	r1, r0
    1334:	b	118c <test+0x118c>
    1338:	ldrb	r3, [r1, #1]
    133c:	cmp	r3, #32
    1340:	addhi	r1, r1, #1
    1344:	bls	d90 <test+0xd90>
    1348:	b	da0 <test+0xda0>
    134c:	ldrb	r3, [r1, #2]
    1350:	cmp	r3, #32
    1354:	addhi	r4, r1, #2
    1358:	bls	dd8 <test+0xdd8>
    135c:	b	dec <test+0xdec>
    1360:	cmp	r2, #0
    1364:	sbcs	r1, r3, #0
    1368:	blt	b54 <test+0xb54>
    136c:	strd	r2, [r6]
    1370:	b	938 <test+0x938>
    1374:	ldrb	r3, [r1]
    1378:	cmp	r3, #34	; 0x22
    137c:	bne	1304 <test+0x1304>
    1380:	add	r1, r1, #1
    1384:	b	1000 <test+0x1000>
    1388:	ldrb	r3, [r1]
    138c:	cmp	r3, #34	; 0x22
    1390:	bne	1320 <test+0x1320>
    1394:	add	r1, r1, #1
    1398:	b	118c <test+0x118c>
    139c:	cmp	r5, r0
    13a0:	mov	r7, r0
    13a4:	bls	9cc <test+0x9cc>
    13a8:	cmp	r3, #125	; 0x7d
    13ac:	bne	9cc <test+0x9cc>
    13b0:	mov	r0, r8
    13b4:	bl	0 <flatcc_builder_end_table>
    13b8:	add	r4, r7, #1
    13bc:	mov	r1, r0
    13c0:	mov	r0, r8
    13c4:	bl	0 <flatcc_builder_end_buffer>
    13c8:	sub	r3, r5, r4
    13cc:	cmp	r3, #1
    13d0:	ble	13e4 <test+0x13e4>
    13d4:	ldrb	r3, [r7, #1]
    13d8:	cmp	r3, #32
    13dc:	bhi	13f8 <test+0x13f8>
    13e0:	beq	1520 <test+0x1520>
    13e4:	mov	r1, r4
    13e8:	add	r0, sp, #148	; 0x94
    13ec:	mov	r2, r5
    13f0:	bl	0 <flatcc_json_parser_space_ext>
    13f4:	mov	r4, r0
    13f8:	cmp	r5, r4
    13fc:	ldr	sl, [pc, #-724]	; 1130 <test+0x1130>
    1400:	beq	bc <test+0xbc>
    1404:	mov	r2, #26
    1408:	mov	r1, #1
    140c:	ldr	r3, [sl]
    1410:	ldr	r0, [pc, #-740]	; 1134 <test+0x1134>
    1414:	bl	0 <fwrite>
    1418:	b	bc <test+0xbc>
    141c:	cmp	r3, #46	; 0x2e
    1420:	mov	r1, r5
    1424:	bne	d90 <test+0xd90>
    1428:	mov	r3, #5
    142c:	mov	r2, r5
    1430:	add	r0, sp, #148	; 0x94
    1434:	bl	0 <flatcc_json_parser_set_error>
    1438:	mov	r1, r0
    143c:	b	d74 <test+0xd74>
    1440:	ldrb	r3, [r1, #1]
    1444:	cmp	r3, #32
    1448:	addhi	r1, r1, #1
    144c:	bls	11a8 <test+0x11a8>
    1450:	b	11b8 <test+0x11b8>
    1454:	ldrb	r3, [r1, #1]
    1458:	cmp	r3, #32
    145c:	addhi	r1, r1, #1
    1460:	bls	101c <test+0x101c>
    1464:	b	102c <test+0x102c>
    1468:	ldrb	r3, [r1, #2]
    146c:	cmp	r3, #32
    1470:	addhi	r4, r1, #2
    1474:	bls	11f0 <test+0x11f0>
    1478:	b	1204 <test+0x1204>
    147c:	ldrb	r3, [r1, #2]
    1480:	cmp	r3, #32
    1484:	addhi	r4, r1, #2
    1488:	bls	1064 <test+0x1064>
    148c:	b	1078 <test+0x1078>
    1490:	cmp	r3, #46	; 0x2e
    1494:	beq	f2c <test+0xf2c>
    1498:	b	83c <test+0x83c>
    149c:	cmp	r3, #46	; 0x2e
    14a0:	mov	r1, r5
    14a4:	bne	101c <test+0x101c>
    14a8:	mov	r3, #5
    14ac:	mov	r2, r5
    14b0:	add	r0, sp, #148	; 0x94
    14b4:	bl	0 <flatcc_json_parser_set_error>
    14b8:	mov	r1, r0
    14bc:	b	1000 <test+0x1000>
    14c0:	cmp	r3, #46	; 0x2e
    14c4:	mov	r1, r5
    14c8:	bne	11a8 <test+0x11a8>
    14cc:	mov	r3, #5
    14d0:	mov	r2, r5
    14d4:	add	r0, sp, #148	; 0x94
    14d8:	bl	0 <flatcc_json_parser_set_error>
    14dc:	mov	r1, r0
    14e0:	b	118c <test+0x118c>
    14e4:	cmp	r3, #46	; 0x2e
    14e8:	beq	12cc <test+0x12cc>
    14ec:	b	66c <test+0x66c>
    14f0:	mov	r2, r5
    14f4:	mov	r1, ip
    14f8:	b	12ec <test+0x12ec>
    14fc:	cmp	r3, #46	; 0x2e
    1500:	beq	1428 <test+0x1428>
    1504:	b	d74 <test+0xd74>
    1508:	cmp	r3, #46	; 0x2e
    150c:	beq	14a8 <test+0x14a8>
    1510:	b	1000 <test+0x1000>
    1514:	cmp	r3, #46	; 0x2e
    1518:	beq	14cc <test+0x14cc>
    151c:	b	118c <test+0x118c>
    1520:	ldrb	r3, [r7, #2]
    1524:	cmp	r3, #32
    1528:	addhi	r4, r7, #2
    152c:	bls	13e4 <test+0x13e4>
    1530:	b	13f8 <test+0x13f8>

Disassembly of section .text.startup:

00000000 <main>:
   0:	push	{lr}		; (str lr, [sp, #-4]!)
   4:	sub	sp, sp, #244	; 0xf4
   8:	mvn	r3, #0
   c:	add	r0, sp, #8
  10:	str	r3, [sp, #4]
  14:	bl	0 <flatcc_builder_init>
  18:	ldr	r1, [pc, #36]	; 44 <main+0x44>
  1c:	add	r3, sp, #4
  20:	add	r2, r1, #644	; 0x284
  24:	add	r2, r2, #1
  28:	add	r0, sp, #8
  2c:	bl	0 <main>
  30:	add	r0, sp, #8
  34:	bl	0 <flatcc_builder_clear>
  38:	ldr	r0, [sp, #4]
  3c:	add	sp, sp, #244	; 0xf4
  40:	pop	{pc}		; (ldr pc, [sp], #4)
  44:	.word	0x00000000
