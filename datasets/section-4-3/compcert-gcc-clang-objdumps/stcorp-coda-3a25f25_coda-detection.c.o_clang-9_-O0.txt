
../compcert-repos/stcorp-coda-3a25f25/CMakeFiles/coda_static.dir/libcoda/coda-detection.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <coda_detection_rule_entry_delete>:
       0:	push	{fp, lr}
       4:	mov	fp, sp
       8:	sub	sp, sp, #8
       c:	str	r0, [sp, #4]
      10:	ldr	r0, [sp, #4]
      14:	ldr	r0, [r0]
      18:	movw	r1, #0
      1c:	cmp	r0, r1
      20:	beq	30 <coda_detection_rule_entry_delete+0x30>
      24:	ldr	r0, [sp, #4]
      28:	ldr	r0, [r0]
      2c:	bl	0 <free>
      30:	ldr	r0, [sp, #4]
      34:	ldr	r0, [r0, #4]
      38:	movw	r1, #0
      3c:	cmp	r0, r1
      40:	beq	50 <coda_detection_rule_entry_delete+0x50>
      44:	ldr	r0, [sp, #4]
      48:	ldr	r0, [r0, #4]
      4c:	bl	0 <coda_expression_delete>
      50:	ldr	r0, [sp, #4]
      54:	bl	0 <free>
      58:	mov	sp, fp
      5c:	pop	{fp, pc}

00000060 <coda_detection_rule_entry_new>:
      60:	push	{fp, lr}
      64:	mov	fp, sp
      68:	sub	sp, sp, #24
      6c:	str	r0, [fp, #-8]
      70:	ldr	r0, [fp, #-8]
      74:	movw	r1, #0
      78:	cmp	r0, r1
      7c:	beq	fc <coda_detection_rule_entry_new+0x9c>
      80:	ldr	r0, [fp, #-8]
      84:	add	r1, sp, #4
      88:	bl	0 <coda_expression_from_string>
      8c:	cmp	r0, #0
      90:	beq	a0 <coda_detection_rule_entry_new+0x40>
      94:	movw	r0, #0
      98:	str	r0, [fp, #-4]
      9c:	b	1c8 <coda_detection_rule_entry_new+0x168>
      a0:	ldr	r0, [sp, #4]
      a4:	add	r1, sp, #8
      a8:	bl	0 <coda_expression_get_type>
      ac:	cmp	r0, #0
      b0:	beq	c8 <coda_detection_rule_entry_new+0x68>
      b4:	ldr	r0, [sp, #4]
      b8:	bl	0 <coda_expression_delete>
      bc:	movw	r0, #0
      c0:	str	r0, [fp, #-4]
      c4:	b	1c8 <coda_detection_rule_entry_new+0x168>
      c8:	ldr	r0, [sp, #4]
      cc:	bl	0 <coda_expression_delete>
      d0:	ldr	r0, [sp, #8]
      d4:	cmp	r0, #4
      d8:	beq	f8 <coda_detection_rule_entry_new+0x98>
      dc:	ldr	r0, [pc, #240]	; 1d4 <coda_detection_rule_entry_new+0x174>
      e0:	movw	r1, #0
      e4:	movt	r1, #0
      e8:	bl	0 <coda_set_error>
      ec:	movw	r0, #0
      f0:	str	r0, [fp, #-4]
      f4:	b	1c8 <coda_detection_rule_entry_new+0x168>
      f8:	b	fc <coda_detection_rule_entry_new+0x9c>
      fc:	movw	r0, #8
     100:	bl	0 <malloc>
     104:	str	r0, [sp, #12]
     108:	ldr	r0, [sp, #12]
     10c:	movw	r1, #0
     110:	cmp	r0, r1
     114:	bne	148 <coda_detection_rule_entry_new+0xe8>
     118:	mvn	r0, #0
     11c:	movw	r1, #0
     120:	movt	r1, #0
     124:	movw	r2, #8
     128:	movw	r3, #0
     12c:	movt	r3, #0
     130:	movw	ip, #82	; 0x52
     134:	str	ip, [sp]
     138:	bl	0 <coda_set_error>
     13c:	movw	r0, #0
     140:	str	r0, [fp, #-4]
     144:	b	1c8 <coda_detection_rule_entry_new+0x168>
     148:	ldr	r0, [sp, #12]
     14c:	movw	r1, #0
     150:	str	r1, [r0]
     154:	ldr	r0, [sp, #12]
     158:	str	r1, [r0, #4]
     15c:	ldr	r0, [fp, #-8]
     160:	cmp	r0, r1
     164:	beq	1c0 <coda_detection_rule_entry_new+0x160>
     168:	ldr	r0, [fp, #-8]
     16c:	bl	0 <strdup>
     170:	ldr	r1, [sp, #12]
     174:	str	r0, [r1]
     178:	ldr	r0, [sp, #12]
     17c:	ldr	r0, [r0]
     180:	movw	r1, #0
     184:	cmp	r0, r1
     188:	bne	1bc <coda_detection_rule_entry_new+0x15c>
     18c:	mvn	r0, #0
     190:	movw	r1, #0
     194:	movt	r1, #0
     198:	movw	r2, #0
     19c:	movt	r2, #0
     1a0:	movw	r3, #94	; 0x5e
     1a4:	bl	0 <coda_set_error>
     1a8:	ldr	r0, [sp, #12]
     1ac:	bl	0 <free>
     1b0:	movw	r0, #0
     1b4:	str	r0, [fp, #-4]
     1b8:	b	1c8 <coda_detection_rule_entry_new+0x168>
     1bc:	b	1c0 <coda_detection_rule_entry_new+0x160>
     1c0:	ldr	r0, [sp, #12]
     1c4:	str	r0, [fp, #-4]
     1c8:	ldr	r0, [fp, #-4]
     1cc:	mov	sp, fp
     1d0:	pop	{fp, pc}
     1d4:	.word	0xfffffe70

000001d8 <coda_detection_rule_entry_set_expression>:
     1d8:	push	{fp, lr}
     1dc:	mov	fp, sp
     1e0:	sub	sp, sp, #16
     1e4:	str	r0, [sp, #8]
     1e8:	str	r1, [sp, #4]
     1ec:	ldr	r0, [sp, #8]
     1f0:	ldr	r0, [r0, #4]
     1f4:	movw	r1, #0
     1f8:	cmp	r0, r1
     1fc:	beq	21c <coda_detection_rule_entry_set_expression+0x44>
     200:	ldr	r0, [pc, #52]	; 23c <coda_detection_rule_entry_set_expression+0x64>
     204:	movw	r1, #0
     208:	movt	r1, #0
     20c:	bl	0 <coda_set_error>
     210:	mvn	r0, #0
     214:	str	r0, [fp, #-4]
     218:	b	230 <coda_detection_rule_entry_set_expression+0x58>
     21c:	ldr	r0, [sp, #4]
     220:	ldr	r1, [sp, #8]
     224:	str	r0, [r1, #4]
     228:	movw	r0, #0
     22c:	str	r0, [fp, #-4]
     230:	ldr	r0, [fp, #-4]
     234:	mov	sp, fp
     238:	pop	{fp, pc}
     23c:	.word	0xfffffe70

00000240 <coda_detection_rule_delete>:
     240:	push	{fp, lr}
     244:	mov	fp, sp
     248:	sub	sp, sp, #8
     24c:	str	r0, [sp, #4]
     250:	ldr	r0, [sp, #4]
     254:	ldr	r0, [r0, #4]
     258:	movw	r1, #0
     25c:	cmp	r0, r1
     260:	beq	2d8 <coda_detection_rule_delete+0x98>
     264:	movw	r0, #0
     268:	str	r0, [sp]
     26c:	ldr	r0, [sp]
     270:	ldr	r1, [sp, #4]
     274:	ldr	r1, [r1]
     278:	cmp	r0, r1
     27c:	bge	2cc <coda_detection_rule_delete+0x8c>
     280:	ldr	r0, [sp, #4]
     284:	ldr	r0, [r0, #4]
     288:	ldr	r1, [sp]
     28c:	add	r0, r0, r1, lsl #2
     290:	ldr	r0, [r0]
     294:	movw	r1, #0
     298:	cmp	r0, r1
     29c:	beq	2b8 <coda_detection_rule_delete+0x78>
     2a0:	ldr	r0, [sp, #4]
     2a4:	ldr	r0, [r0, #4]
     2a8:	ldr	r1, [sp]
     2ac:	add	r0, r0, r1, lsl #2
     2b0:	ldr	r0, [r0]
     2b4:	bl	0 <coda_detection_rule_entry_delete>
     2b8:	b	2bc <coda_detection_rule_delete+0x7c>
     2bc:	ldr	r0, [sp]
     2c0:	add	r0, r0, #1
     2c4:	str	r0, [sp]
     2c8:	b	26c <coda_detection_rule_delete+0x2c>
     2cc:	ldr	r0, [sp, #4]
     2d0:	ldr	r0, [r0, #4]
     2d4:	bl	0 <free>
     2d8:	ldr	r0, [sp, #4]
     2dc:	bl	0 <free>
     2e0:	mov	sp, fp
     2e4:	pop	{fp, pc}

000002e8 <coda_detection_rule_new>:
     2e8:	push	{fp, lr}
     2ec:	mov	fp, sp
     2f0:	sub	sp, sp, #16
     2f4:	movw	r0, #12
     2f8:	bl	0 <malloc>
     2fc:	str	r0, [sp, #8]
     300:	ldr	r0, [sp, #8]
     304:	movw	r1, #0
     308:	cmp	r0, r1
     30c:	bne	340 <coda_detection_rule_new+0x58>
     310:	mvn	r0, #0
     314:	movw	r1, #0
     318:	movt	r1, #0
     31c:	movw	r2, #12
     320:	movw	r3, #0
     324:	movt	r3, #0
     328:	movw	ip, #141	; 0x8d
     32c:	str	ip, [sp]
     330:	bl	0 <coda_set_error>
     334:	movw	r0, #0
     338:	str	r0, [fp, #-4]
     33c:	b	364 <coda_detection_rule_new+0x7c>
     340:	ldr	r0, [sp, #8]
     344:	movw	r1, #0
     348:	str	r1, [r0]
     34c:	ldr	r0, [sp, #8]
     350:	str	r1, [r0, #4]
     354:	ldr	r0, [sp, #8]
     358:	str	r1, [r0, #8]
     35c:	ldr	r0, [sp, #8]
     360:	str	r0, [fp, #-4]
     364:	ldr	r0, [fp, #-4]
     368:	mov	sp, fp
     36c:	pop	{fp, pc}

00000370 <coda_detection_rule_add_entry>:
     370:	push	{fp, lr}
     374:	mov	fp, sp
     378:	sub	sp, sp, #24
     37c:	str	r0, [fp, #-8]
     380:	str	r1, [sp, #12]
     384:	ldr	r0, [sp, #12]
     388:	ldr	r0, [r0]
     38c:	movw	r1, #0
     390:	cmp	r0, r1
     394:	bne	3c8 <coda_detection_rule_add_entry+0x58>
     398:	ldr	r0, [sp, #12]
     39c:	ldr	r0, [r0, #4]
     3a0:	movw	r1, #0
     3a4:	cmp	r0, r1
     3a8:	bne	3c8 <coda_detection_rule_add_entry+0x58>
     3ac:	ldr	r0, [pc, #200]	; 47c <coda_detection_rule_add_entry+0x10c>
     3b0:	movw	r1, #0
     3b4:	movt	r1, #0
     3b8:	bl	0 <coda_set_error>
     3bc:	mvn	r0, #0
     3c0:	str	r0, [fp, #-4]
     3c4:	b	470 <coda_detection_rule_add_entry+0x100>
     3c8:	ldr	r0, [fp, #-8]
     3cc:	ldr	r1, [r0]
     3d0:	ldr	r0, [r0, #4]
     3d4:	add	r1, r1, #1
     3d8:	lsl	r1, r1, #2
     3dc:	bl	0 <realloc>
     3e0:	str	r0, [sp, #8]
     3e4:	ldr	r0, [sp, #8]
     3e8:	movw	r1, #0
     3ec:	cmp	r0, r1
     3f0:	bne	430 <coda_detection_rule_add_entry+0xc0>
     3f4:	ldr	r0, [fp, #-8]
     3f8:	ldr	r0, [r0]
     3fc:	add	r0, r0, #1
     400:	lsl	r2, r0, #2
     404:	mvn	r0, #0
     408:	movw	r1, #0
     40c:	movt	r1, #0
     410:	movw	r3, #0
     414:	movt	r3, #0
     418:	movw	ip, #165	; 0xa5
     41c:	str	ip, [sp]
     420:	bl	0 <coda_set_error>
     424:	mvn	r0, #0
     428:	str	r0, [fp, #-4]
     42c:	b	470 <coda_detection_rule_add_entry+0x100>
     430:	ldr	r0, [sp, #8]
     434:	ldr	r1, [fp, #-8]
     438:	str	r0, [r1, #4]
     43c:	ldr	r0, [fp, #-8]
     440:	ldr	r1, [r0]
     444:	add	r1, r1, #1
     448:	str	r1, [r0]
     44c:	ldr	r0, [sp, #12]
     450:	ldr	r1, [fp, #-8]
     454:	ldr	r2, [r1]
     458:	ldr	r1, [r1, #4]
     45c:	sub	r2, r2, #1
     460:	add	r1, r1, r2, lsl #2
     464:	str	r0, [r1]
     468:	movw	r0, #0
     46c:	str	r0, [fp, #-4]
     470:	ldr	r0, [fp, #-4]
     474:	mov	sp, fp
     478:	pop	{fp, pc}
     47c:	.word	0xfffffe70

00000480 <coda_detection_tree_delete>:
     480:	push	{fp, lr}
     484:	mov	fp, sp
     488:	sub	sp, sp, #8
     48c:	str	r0, [sp, #4]
     490:	ldr	r0, [sp, #4]
     494:	bl	4a0 <delete_detection_node>
     498:	mov	sp, fp
     49c:	pop	{fp, pc}

000004a0 <delete_detection_node>:
     4a0:	push	{fp, lr}
     4a4:	mov	fp, sp
     4a8:	sub	sp, sp, #8
     4ac:	str	r0, [sp, #4]
     4b0:	ldr	r0, [sp, #4]
     4b4:	ldr	r0, [r0]
     4b8:	movw	r1, #0
     4bc:	cmp	r0, r1
     4c0:	beq	4d0 <delete_detection_node+0x30>
     4c4:	ldr	r0, [sp, #4]
     4c8:	ldr	r0, [r0]
     4cc:	bl	0 <free>
     4d0:	ldr	r0, [sp, #4]
     4d4:	ldr	r0, [r0, #16]
     4d8:	movw	r1, #0
     4dc:	cmp	r0, r1
     4e0:	beq	534 <delete_detection_node+0x94>
     4e4:	movw	r0, #0
     4e8:	str	r0, [sp]
     4ec:	ldr	r0, [sp]
     4f0:	ldr	r1, [sp, #4]
     4f4:	ldr	r1, [r1, #12]
     4f8:	cmp	r0, r1
     4fc:	bge	528 <delete_detection_node+0x88>
     500:	ldr	r0, [sp, #4]
     504:	ldr	r0, [r0, #16]
     508:	ldr	r1, [sp]
     50c:	add	r0, r0, r1, lsl #2
     510:	ldr	r0, [r0]
     514:	bl	4a0 <delete_detection_node>
     518:	ldr	r0, [sp]
     51c:	add	r0, r0, #1
     520:	str	r0, [sp]
     524:	b	4ec <delete_detection_node+0x4c>
     528:	ldr	r0, [sp, #4]
     52c:	ldr	r0, [r0, #16]
     530:	bl	0 <free>
     534:	ldr	r0, [sp, #4]
     538:	bl	0 <free>
     53c:	mov	sp, fp
     540:	pop	{fp, pc}

00000544 <coda_detection_tree_add_rule>:
     544:	push	{fp, lr}
     548:	mov	fp, sp
     54c:	sub	sp, sp, #24
     550:	str	r0, [fp, #-8]
     554:	str	r1, [sp, #12]
     558:	ldr	r0, [sp, #12]
     55c:	ldr	r0, [r0]
     560:	cmp	r0, #0
     564:	bne	590 <coda_detection_tree_add_rule+0x4c>
     568:	ldr	r0, [pc, #340]	; 6c4 <coda_detection_tree_add_rule+0x180>
     56c:	ldr	r1, [sp, #12]
     570:	ldr	r1, [r1, #8]
     574:	ldr	r2, [r1, #8]
     578:	movw	r1, #0
     57c:	movt	r1, #0
     580:	bl	0 <coda_set_error>
     584:	mvn	r0, #0
     588:	str	r0, [fp, #-4]
     58c:	b	6b8 <coda_detection_tree_add_rule+0x174>
     590:	ldr	r0, [fp, #-8]
     594:	ldr	r0, [r0]
     598:	str	r0, [sp, #8]
     59c:	ldr	r0, [sp, #8]
     5a0:	movw	r1, #0
     5a4:	cmp	r0, r1
     5a8:	bne	5dc <coda_detection_tree_add_rule+0x98>
     5ac:	bl	6c8 <detection_node_new>
     5b0:	str	r0, [sp, #8]
     5b4:	ldr	r0, [sp, #8]
     5b8:	movw	r1, #0
     5bc:	cmp	r0, r1
     5c0:	bne	5d0 <coda_detection_tree_add_rule+0x8c>
     5c4:	mvn	r0, #0
     5c8:	str	r0, [fp, #-4]
     5cc:	b	6b8 <coda_detection_tree_add_rule+0x174>
     5d0:	ldr	r0, [sp, #8]
     5d4:	ldr	r1, [fp, #-8]
     5d8:	str	r0, [r1]
     5dc:	movw	r0, #0
     5e0:	str	r0, [sp, #4]
     5e4:	ldr	r0, [sp, #4]
     5e8:	ldr	r1, [sp, #12]
     5ec:	ldr	r1, [r1]
     5f0:	cmp	r0, r1
     5f4:	bge	658 <coda_detection_tree_add_rule+0x114>
     5f8:	ldr	r0, [sp, #8]
     5fc:	ldr	r1, [sp, #12]
     600:	ldr	r1, [r1, #4]
     604:	ldr	r2, [sp, #4]
     608:	ldr	r2, [r1, r2, lsl #2]!
     60c:	ldr	r2, [r2]
     610:	ldr	r1, [r1]
     614:	str	r1, [sp]
     618:	mov	r1, r2
     61c:	ldr	r2, [sp]
     620:	bl	760 <get_node_for_entry>
     624:	str	r0, [sp, #8]
     628:	ldr	r0, [sp, #8]
     62c:	movw	r1, #0
     630:	cmp	r0, r1
     634:	bne	644 <coda_detection_tree_add_rule+0x100>
     638:	mvn	r0, #0
     63c:	str	r0, [fp, #-4]
     640:	b	6b8 <coda_detection_tree_add_rule+0x174>
     644:	b	648 <coda_detection_tree_add_rule+0x104>
     648:	ldr	r0, [sp, #4]
     64c:	add	r0, r0, #1
     650:	str	r0, [sp, #4]
     654:	b	5e4 <coda_detection_tree_add_rule+0xa0>
     658:	ldr	r0, [sp, #8]
     65c:	ldr	r0, [r0, #8]
     660:	movw	r1, #0
     664:	cmp	r0, r1
     668:	beq	6a4 <coda_detection_tree_add_rule+0x160>
     66c:	ldr	r0, [pc, #80]	; 6c4 <coda_detection_tree_add_rule+0x180>
     670:	ldr	r1, [sp, #12]
     674:	ldr	r1, [r1, #8]
     678:	ldr	r2, [r1, #8]
     67c:	ldr	r1, [sp, #8]
     680:	ldr	r1, [r1, #8]
     684:	ldr	r1, [r1, #8]
     688:	ldr	r3, [r1, #8]
     68c:	movw	r1, #0
     690:	movt	r1, #0
     694:	bl	0 <coda_set_error>
     698:	mvn	r0, #0
     69c:	str	r0, [fp, #-4]
     6a0:	b	6b8 <coda_detection_tree_add_rule+0x174>
     6a4:	ldr	r0, [sp, #12]
     6a8:	ldr	r1, [sp, #8]
     6ac:	str	r0, [r1, #8]
     6b0:	movw	r0, #0
     6b4:	str	r0, [fp, #-4]
     6b8:	ldr	r0, [fp, #-4]
     6bc:	mov	sp, fp
     6c0:	pop	{fp, pc}
     6c4:	.word	0xfffffe70

000006c8 <detection_node_new>:
     6c8:	push	{fp, lr}
     6cc:	mov	fp, sp
     6d0:	sub	sp, sp, #16
     6d4:	movw	r0, #20
     6d8:	bl	0 <malloc>
     6dc:	str	r0, [sp, #8]
     6e0:	ldr	r0, [sp, #8]
     6e4:	movw	r1, #0
     6e8:	cmp	r0, r1
     6ec:	bne	720 <detection_node_new+0x58>
     6f0:	mvn	r0, #0
     6f4:	movw	r1, #0
     6f8:	movt	r1, #0
     6fc:	movw	r2, #20
     700:	movw	r3, #0
     704:	movt	r3, #0
     708:	movw	ip, #202	; 0xca
     70c:	str	ip, [sp]
     710:	bl	0 <coda_set_error>
     714:	movw	r0, #0
     718:	str	r0, [fp, #-4]
     71c:	b	754 <detection_node_new+0x8c>
     720:	ldr	r0, [sp, #8]
     724:	movw	r1, #0
     728:	str	r1, [r0]
     72c:	ldr	r0, [sp, #8]
     730:	str	r1, [r0, #4]
     734:	ldr	r0, [sp, #8]
     738:	str	r1, [r0, #8]
     73c:	ldr	r0, [sp, #8]
     740:	str	r1, [r0, #12]
     744:	ldr	r0, [sp, #8]
     748:	str	r1, [r0, #16]
     74c:	ldr	r0, [sp, #8]
     750:	str	r0, [fp, #-4]
     754:	ldr	r0, [fp, #-4]
     758:	mov	sp, fp
     75c:	pop	{fp, pc}

00000760 <get_node_for_entry>:
     760:	push	{fp, lr}
     764:	mov	fp, sp
     768:	sub	sp, sp, #48	; 0x30
     76c:	str	r0, [fp, #-8]
     770:	str	r1, [fp, #-12]
     774:	str	r2, [fp, #-16]
     778:	ldr	r0, [fp, #-12]
     77c:	movw	r1, #0
     780:	cmp	r0, r1
     784:	beq	7a0 <get_node_for_entry+0x40>
     788:	ldr	r0, [fp, #-12]
     78c:	ldrb	r0, [r0]
     790:	cmp	r0, #0
     794:	bne	7a0 <get_node_for_entry+0x40>
     798:	movw	r0, #0
     79c:	str	r0, [fp, #-12]
     7a0:	movw	r0, #0
     7a4:	str	r0, [sp, #20]
     7a8:	ldr	r0, [sp, #20]
     7ac:	ldr	r1, [fp, #-8]
     7b0:	ldr	r1, [r1, #12]
     7b4:	cmp	r0, r1
     7b8:	bge	d3c <get_node_for_entry+0x5dc>
     7bc:	ldr	r0, [fp, #-12]
     7c0:	movw	r1, #0
     7c4:	cmp	r0, r1
     7c8:	beq	cb4 <get_node_for_entry+0x554>
     7cc:	ldr	r0, [fp, #-8]
     7d0:	ldr	r0, [r0, #16]
     7d4:	ldr	r1, [sp, #20]
     7d8:	add	r0, r0, r1, lsl #2
     7dc:	ldr	r0, [r0]
     7e0:	ldr	r0, [r0]
     7e4:	movw	r1, #0
     7e8:	cmp	r0, r1
     7ec:	bne	7f4 <get_node_for_entry+0x94>
     7f0:	b	d2c <get_node_for_entry+0x5cc>
     7f4:	ldr	r0, [fp, #-8]
     7f8:	ldr	r0, [r0, #16]
     7fc:	ldr	r1, [sp, #20]
     800:	add	r0, r0, r1, lsl #2
     804:	ldr	r0, [r0]
     808:	ldr	r0, [r0]
     80c:	ldr	r1, [fp, #-12]
     810:	add	r2, sp, #24
     814:	bl	1038 <pathcmp>
     818:	cmp	r0, #0
     81c:	bne	878 <get_node_for_entry+0x118>
     820:	ldr	r0, [fp, #-16]
     824:	ldr	r0, [r0, #4]
     828:	movw	r1, #0
     82c:	cmp	r0, r1
     830:	beq	85c <get_node_for_entry+0xfc>
     834:	ldr	r0, [fp, #-8]
     838:	ldr	r0, [r0, #16]
     83c:	ldr	r1, [sp, #20]
     840:	add	r0, r0, r1, lsl #2
     844:	ldr	r0, [r0]
     848:	ldr	r2, [fp, #-16]
     84c:	movw	r1, #0
     850:	bl	760 <get_node_for_entry>
     854:	str	r0, [fp, #-4]
     858:	b	e3c <get_node_for_entry+0x6dc>
     85c:	ldr	r0, [fp, #-8]
     860:	ldr	r0, [r0, #16]
     864:	ldr	r1, [sp, #20]
     868:	add	r0, r0, r1, lsl #2
     86c:	ldr	r0, [r0]
     870:	str	r0, [fp, #-4]
     874:	b	e3c <get_node_for_entry+0x6dc>
     878:	ldr	r0, [fp, #-8]
     87c:	ldr	r0, [r0, #16]
     880:	ldr	r1, [sp, #20]
     884:	add	r0, r0, r1, lsl #2
     888:	ldr	r0, [r0]
     88c:	ldr	r0, [r0]
     890:	ldr	r1, [sp, #24]
     894:	add	r0, r0, r1
     898:	ldrb	r0, [r0]
     89c:	cmp	r0, #0
     8a0:	bne	944 <get_node_for_entry+0x1e4>
     8a4:	ldr	r0, [fp, #-12]
     8a8:	ldr	r1, [sp, #24]
     8ac:	add	r0, r0, r1
     8b0:	ldrb	r0, [r0]
     8b4:	cmp	r0, #47	; 0x2f
     8b8:	beq	8ec <get_node_for_entry+0x18c>
     8bc:	ldr	r0, [fp, #-12]
     8c0:	ldr	r1, [sp, #24]
     8c4:	add	r0, r0, r1
     8c8:	ldrb	r0, [r0]
     8cc:	cmp	r0, #64	; 0x40
     8d0:	beq	8ec <get_node_for_entry+0x18c>
     8d4:	ldr	r0, [fp, #-12]
     8d8:	ldr	r1, [sp, #24]
     8dc:	add	r0, r0, r1
     8e0:	ldrb	r0, [r0]
     8e4:	cmp	r0, #91	; 0x5b
     8e8:	bne	940 <get_node_for_entry+0x1e0>
     8ec:	ldr	r0, [fp, #-8]
     8f0:	ldr	r0, [r0, #16]
     8f4:	ldr	r1, [sp, #20]
     8f8:	add	r0, r0, r1, lsl #2
     8fc:	ldr	r0, [r0]
     900:	ldr	r1, [fp, #-12]
     904:	ldr	r2, [sp, #24]
     908:	ldr	r3, [fp, #-12]
     90c:	ldr	ip, [sp, #24]
     910:	add	r3, r3, ip
     914:	ldrb	r3, [r3]
     918:	cmp	r3, #47	; 0x2f
     91c:	movw	r3, #0
     920:	moveq	r3, #1
     924:	and	r3, r3, #1
     928:	add	r2, r2, r3
     92c:	add	r1, r1, r2
     930:	ldr	r2, [fp, #-16]
     934:	bl	760 <get_node_for_entry>
     938:	str	r0, [fp, #-4]
     93c:	b	e3c <get_node_for_entry+0x6dc>
     940:	b	cb0 <get_node_for_entry+0x550>
     944:	ldr	r0, [sp, #24]
     948:	cmp	r0, #1
     94c:	ble	998 <get_node_for_entry+0x238>
     950:	ldr	r0, [fp, #-12]
     954:	ldr	r1, [sp, #24]
     958:	sub	r1, r1, #1
     95c:	add	r0, r0, r1
     960:	ldrb	r0, [r0]
     964:	cmp	r0, #47	; 0x2f
     968:	beq	988 <get_node_for_entry+0x228>
     96c:	ldr	r0, [fp, #-12]
     970:	ldr	r1, [sp, #24]
     974:	sub	r1, r1, #1
     978:	add	r0, r0, r1
     97c:	ldrb	r0, [r0]
     980:	cmp	r0, #91	; 0x5b
     984:	bne	998 <get_node_for_entry+0x238>
     988:	ldr	r0, [sp, #24]
     98c:	mvn	r1, #0
     990:	add	r0, r0, r1
     994:	str	r0, [sp, #24]
     998:	ldr	r0, [sp, #24]
     99c:	cmp	r0, #0
     9a0:	ble	cac <get_node_for_entry+0x54c>
     9a4:	ldr	r0, [fp, #-12]
     9a8:	ldr	r1, [sp, #24]
     9ac:	add	r0, r0, r1
     9b0:	ldrb	r0, [r0]
     9b4:	cmp	r0, #47	; 0x2f
     9b8:	beq	9ec <get_node_for_entry+0x28c>
     9bc:	ldr	r0, [fp, #-12]
     9c0:	ldr	r1, [sp, #24]
     9c4:	add	r0, r0, r1
     9c8:	ldrb	r0, [r0]
     9cc:	cmp	r0, #64	; 0x40
     9d0:	beq	9ec <get_node_for_entry+0x28c>
     9d4:	ldr	r0, [fp, #-12]
     9d8:	ldr	r1, [sp, #24]
     9dc:	add	r0, r0, r1
     9e0:	ldrb	r0, [r0]
     9e4:	cmp	r0, #91	; 0x5b
     9e8:	bne	cac <get_node_for_entry+0x54c>
     9ec:	ldr	r0, [fp, #-8]
     9f0:	ldr	r0, [r0, #16]
     9f4:	ldr	r1, [sp, #20]
     9f8:	add	r0, r0, r1, lsl #2
     9fc:	ldr	r0, [r0]
     a00:	ldr	r0, [r0]
     a04:	ldr	r1, [sp, #24]
     a08:	add	r0, r0, r1
     a0c:	ldrb	r0, [r0]
     a10:	cmp	r0, #47	; 0x2f
     a14:	beq	a70 <get_node_for_entry+0x310>
     a18:	ldr	r0, [fp, #-8]
     a1c:	ldr	r0, [r0, #16]
     a20:	ldr	r1, [sp, #20]
     a24:	add	r0, r0, r1, lsl #2
     a28:	ldr	r0, [r0]
     a2c:	ldr	r0, [r0]
     a30:	ldr	r1, [sp, #24]
     a34:	add	r0, r0, r1
     a38:	ldrb	r0, [r0]
     a3c:	cmp	r0, #64	; 0x40
     a40:	beq	a70 <get_node_for_entry+0x310>
     a44:	ldr	r0, [fp, #-8]
     a48:	ldr	r0, [r0, #16]
     a4c:	ldr	r1, [sp, #20]
     a50:	add	r0, r0, r1, lsl #2
     a54:	ldr	r0, [r0]
     a58:	ldr	r0, [r0]
     a5c:	ldr	r1, [sp, #24]
     a60:	add	r0, r0, r1
     a64:	ldrb	r0, [r0]
     a68:	cmp	r0, #91	; 0x5b
     a6c:	bne	cac <get_node_for_entry+0x54c>
     a70:	ldr	r0, [sp, #24]
     a74:	ldr	r1, [fp, #-8]
     a78:	ldr	r1, [r1, #16]
     a7c:	ldr	r2, [sp, #20]
     a80:	add	r1, r1, r2, lsl #2
     a84:	ldr	r1, [r1]
     a88:	ldr	r1, [r1]
     a8c:	ldr	r2, [sp, #24]
     a90:	add	r1, r1, r2
     a94:	ldrb	r1, [r1]
     a98:	cmp	r1, #47	; 0x2f
     a9c:	movw	r1, #0
     aa0:	moveq	r1, #1
     aa4:	and	r1, r1, #1
     aa8:	add	r0, r0, r1
     aac:	str	r0, [sp, #16]
     ab0:	ldr	r0, [sp, #24]
     ab4:	ldr	r1, [fp, #-12]
     ab8:	ldr	r2, [sp, #24]
     abc:	add	r1, r1, r2
     ac0:	ldrb	r1, [r1]
     ac4:	cmp	r1, #47	; 0x2f
     ac8:	movw	r1, #0
     acc:	moveq	r1, #1
     ad0:	and	r1, r1, #1
     ad4:	add	r0, r0, r1
     ad8:	str	r0, [sp, #12]
     adc:	bl	6c8 <detection_node_new>
     ae0:	str	r0, [fp, #-20]	; 0xffffffec
     ae4:	ldr	r0, [fp, #-20]	; 0xffffffec
     ae8:	movw	r1, #0
     aec:	cmp	r0, r1
     af0:	bne	b00 <get_node_for_entry+0x3a0>
     af4:	movw	r0, #0
     af8:	str	r0, [fp, #-4]
     afc:	b	e3c <get_node_for_entry+0x6dc>
     b00:	ldr	r0, [sp, #24]
     b04:	add	r0, r0, #1
     b08:	bl	0 <malloc>
     b0c:	ldr	r1, [fp, #-20]	; 0xffffffec
     b10:	str	r0, [r1]
     b14:	ldr	r0, [fp, #-20]	; 0xffffffec
     b18:	ldr	r0, [r0]
     b1c:	movw	r1, #0
     b20:	cmp	r0, r1
     b24:	bne	b58 <get_node_for_entry+0x3f8>
     b28:	ldr	r2, [sp, #24]
     b2c:	mvn	r0, #0
     b30:	movw	r1, #0
     b34:	movt	r1, #0
     b38:	movw	r3, #0
     b3c:	movt	r3, #0
     b40:	movw	ip, #331	; 0x14b
     b44:	str	ip, [sp]
     b48:	bl	0 <coda_set_error>
     b4c:	movw	r0, #0
     b50:	str	r0, [fp, #-4]
     b54:	b	e3c <get_node_for_entry+0x6dc>
     b58:	ldr	r0, [fp, #-20]	; 0xffffffec
     b5c:	ldr	r0, [r0]
     b60:	ldr	r1, [fp, #-12]
     b64:	ldr	r2, [sp, #24]
     b68:	bl	0 <memcpy>
     b6c:	ldr	r1, [fp, #-20]	; 0xffffffec
     b70:	ldr	r1, [r1]
     b74:	ldr	r2, [sp, #24]
     b78:	mov	r3, #0
     b7c:	strb	r3, [r1, r2]
     b80:	ldr	r1, [fp, #-20]	; 0xffffffec
     b84:	ldr	r2, [fp, #-8]
     b88:	ldr	r2, [r2, #16]
     b8c:	ldr	r3, [sp, #20]
     b90:	add	r2, r2, r3, lsl #2
     b94:	ldr	r2, [r2]
     b98:	str	r0, [sp, #4]
     b9c:	mov	r0, r1
     ba0:	mov	r1, r2
     ba4:	bl	1120 <detection_node_add_node>
     ba8:	cmp	r0, #0
     bac:	beq	bc4 <get_node_for_entry+0x464>
     bb0:	ldr	r0, [fp, #-20]	; 0xffffffec
     bb4:	bl	4a0 <delete_detection_node>
     bb8:	movw	r0, #0
     bbc:	str	r0, [fp, #-4]
     bc0:	b	e3c <get_node_for_entry+0x6dc>
     bc4:	ldr	r0, [sp, #16]
     bc8:	str	r0, [sp, #8]
     bcc:	ldr	r0, [fp, #-8]
     bd0:	ldr	r0, [r0, #16]
     bd4:	ldr	r1, [sp, #20]
     bd8:	add	r0, r0, r1, lsl #2
     bdc:	ldr	r0, [r0]
     be0:	ldr	r0, [r0]
     be4:	ldr	r1, [sp, #8]
     be8:	add	r0, r0, r1
     bec:	ldrb	r0, [r0]
     bf0:	cmp	r0, #0
     bf4:	beq	c40 <get_node_for_entry+0x4e0>
     bf8:	ldr	r0, [fp, #-8]
     bfc:	ldr	r0, [r0, #16]
     c00:	ldr	r1, [sp, #20]
     c04:	ldr	r1, [r0, r1, lsl #2]!
     c08:	ldr	r1, [r1]
     c0c:	ldr	r2, [sp, #8]
     c10:	ldrb	r1, [r1, r2]
     c14:	ldr	r0, [r0]
     c18:	ldr	r0, [r0]
     c1c:	ldr	r2, [sp, #8]
     c20:	ldr	r3, [sp, #16]
     c24:	sub	r2, r2, r3
     c28:	add	r0, r0, r2
     c2c:	strb	r1, [r0]
     c30:	ldr	r0, [sp, #8]
     c34:	add	r0, r0, #1
     c38:	str	r0, [sp, #8]
     c3c:	b	bcc <get_node_for_entry+0x46c>
     c40:	ldr	r0, [fp, #-8]
     c44:	ldr	r0, [r0, #16]
     c48:	ldr	r1, [sp, #20]
     c4c:	ldr	r0, [r0, r1, lsl #2]
     c50:	ldr	r0, [r0]
     c54:	ldr	r1, [sp, #8]
     c58:	ldr	r2, [sp, #16]
     c5c:	sub	r1, r1, r2
     c60:	mov	r2, #0
     c64:	strb	r2, [r0, r1]
     c68:	ldr	r0, [fp, #-20]	; 0xffffffec
     c6c:	ldr	r1, [fp, #-8]
     c70:	ldr	r1, [r1, #16]
     c74:	ldr	r2, [sp, #20]
     c78:	str	r0, [r1, r2, lsl #2]
     c7c:	ldr	r0, [fp, #-8]
     c80:	ldr	r0, [r0, #16]
     c84:	ldr	r1, [sp, #20]
     c88:	add	r0, r0, r1, lsl #2
     c8c:	ldr	r0, [r0]
     c90:	ldr	r1, [fp, #-12]
     c94:	ldr	r2, [sp, #12]
     c98:	add	r1, r1, r2
     c9c:	ldr	r2, [fp, #-16]
     ca0:	bl	760 <get_node_for_entry>
     ca4:	str	r0, [fp, #-4]
     ca8:	b	e3c <get_node_for_entry+0x6dc>
     cac:	b	cb0 <get_node_for_entry+0x550>
     cb0:	b	d28 <get_node_for_entry+0x5c8>
     cb4:	ldr	r0, [fp, #-8]
     cb8:	ldr	r0, [r0, #16]
     cbc:	ldr	r1, [sp, #20]
     cc0:	add	r0, r0, r1, lsl #2
     cc4:	ldr	r0, [r0]
     cc8:	ldr	r0, [r0]
     ccc:	movw	r1, #0
     cd0:	cmp	r0, r1
     cd4:	beq	cdc <get_node_for_entry+0x57c>
     cd8:	b	d2c <get_node_for_entry+0x5cc>
     cdc:	ldr	r0, [fp, #-16]
     ce0:	ldr	r0, [r0, #4]
     ce4:	ldr	r1, [fp, #-8]
     ce8:	ldr	r1, [r1, #16]
     cec:	ldr	r2, [sp, #20]
     cf0:	add	r1, r1, r2, lsl #2
     cf4:	ldr	r1, [r1]
     cf8:	ldr	r1, [r1, #4]
     cfc:	bl	0 <coda_expression_is_equal>
     d00:	cmp	r0, #0
     d04:	beq	d24 <get_node_for_entry+0x5c4>
     d08:	ldr	r0, [fp, #-8]
     d0c:	ldr	r0, [r0, #16]
     d10:	ldr	r1, [sp, #20]
     d14:	add	r0, r0, r1, lsl #2
     d18:	ldr	r0, [r0]
     d1c:	str	r0, [fp, #-4]
     d20:	b	e3c <get_node_for_entry+0x6dc>
     d24:	b	d28 <get_node_for_entry+0x5c8>
     d28:	b	d2c <get_node_for_entry+0x5cc>
     d2c:	ldr	r0, [sp, #20]
     d30:	add	r0, r0, #1
     d34:	str	r0, [sp, #20]
     d38:	b	7a8 <get_node_for_entry+0x48>
     d3c:	bl	6c8 <detection_node_new>
     d40:	str	r0, [fp, #-20]	; 0xffffffec
     d44:	ldr	r0, [fp, #-20]	; 0xffffffec
     d48:	movw	r1, #0
     d4c:	cmp	r0, r1
     d50:	bne	d60 <get_node_for_entry+0x600>
     d54:	movw	r0, #0
     d58:	str	r0, [fp, #-4]
     d5c:	b	e3c <get_node_for_entry+0x6dc>
     d60:	ldr	r0, [fp, #-12]
     d64:	movw	r1, #0
     d68:	cmp	r0, r1
     d6c:	beq	dc0 <get_node_for_entry+0x660>
     d70:	ldr	r0, [fp, #-12]
     d74:	bl	0 <strdup>
     d78:	ldr	r1, [fp, #-20]	; 0xffffffec
     d7c:	str	r0, [r1]
     d80:	ldr	r0, [fp, #-20]	; 0xffffffec
     d84:	ldr	r0, [r0]
     d88:	movw	r1, #0
     d8c:	cmp	r0, r1
     d90:	bne	dbc <get_node_for_entry+0x65c>
     d94:	mvn	r0, #0
     d98:	movw	r1, #0
     d9c:	movt	r1, #0
     da0:	movw	r2, #0
     da4:	movt	r2, #0
     da8:	movw	r3, #383	; 0x17f
     dac:	bl	0 <coda_set_error>
     db0:	movw	r0, #0
     db4:	str	r0, [fp, #-4]
     db8:	b	e3c <get_node_for_entry+0x6dc>
     dbc:	b	dd0 <get_node_for_entry+0x670>
     dc0:	ldr	r0, [fp, #-16]
     dc4:	ldr	r0, [r0, #4]
     dc8:	ldr	r1, [fp, #-20]	; 0xffffffec
     dcc:	str	r0, [r1, #4]
     dd0:	ldr	r0, [fp, #-8]
     dd4:	ldr	r1, [fp, #-20]	; 0xffffffec
     dd8:	bl	1120 <detection_node_add_node>
     ddc:	cmp	r0, #0
     de0:	beq	df8 <get_node_for_entry+0x698>
     de4:	ldr	r0, [fp, #-20]	; 0xffffffec
     de8:	bl	4a0 <delete_detection_node>
     dec:	movw	r0, #0
     df0:	str	r0, [fp, #-4]
     df4:	b	e3c <get_node_for_entry+0x6dc>
     df8:	ldr	r0, [fp, #-12]
     dfc:	movw	r1, #0
     e00:	cmp	r0, r1
     e04:	beq	e34 <get_node_for_entry+0x6d4>
     e08:	ldr	r0, [fp, #-16]
     e0c:	ldr	r0, [r0, #4]
     e10:	movw	r1, #0
     e14:	cmp	r0, r1
     e18:	beq	e34 <get_node_for_entry+0x6d4>
     e1c:	ldr	r0, [fp, #-20]	; 0xffffffec
     e20:	ldr	r2, [fp, #-16]
     e24:	movw	r1, #0
     e28:	bl	760 <get_node_for_entry>
     e2c:	str	r0, [fp, #-4]
     e30:	b	e3c <get_node_for_entry+0x6dc>
     e34:	ldr	r0, [fp, #-20]	; 0xffffffec
     e38:	str	r0, [fp, #-4]
     e3c:	ldr	r0, [fp, #-4]
     e40:	mov	sp, fp
     e44:	pop	{fp, pc}

00000e48 <coda_evaluate_detection_node>:
     e48:	push	{r4, r5, fp, lr}
     e4c:	add	fp, sp, #8
     e50:	sub	sp, sp, #560	; 0x230
     e54:	str	r0, [fp, #-16]
     e58:	str	r1, [fp, #-20]	; 0xffffffec
     e5c:	str	r2, [fp, #-24]	; 0xffffffe8
     e60:	ldr	r0, [fp, #-20]	; 0xffffffec
     e64:	add	r1, sp, #24
     e68:	str	r0, [sp, #12]
     e6c:	mov	r0, r1
     e70:	ldr	r1, [sp, #12]
     e74:	movw	r2, #520	; 0x208
     e78:	bl	0 <memcpy>
     e7c:	ldr	r0, [fp, #-24]	; 0xffffffe8
     e80:	movw	r1, #0
     e84:	str	r1, [r0]
     e88:	ldr	r0, [fp, #-16]
     e8c:	cmp	r0, r1
     e90:	bne	ea0 <coda_evaluate_detection_node+0x58>
     e94:	movw	r0, #0
     e98:	str	r0, [fp, #-12]
     e9c:	b	1024 <coda_evaluate_detection_node+0x1dc>
     ea0:	ldr	r0, [fp, #-16]
     ea4:	ldr	r0, [r0]
     ea8:	movw	r1, #0
     eac:	cmp	r0, r1
     eb0:	beq	ef8 <coda_evaluate_detection_node+0xb0>
     eb4:	ldr	r0, [fp, #-16]
     eb8:	ldr	r1, [r0]
     ebc:	add	r0, sp, #24
     ec0:	bl	0 <coda_cursor_goto>
     ec4:	cmp	r0, #0
     ec8:	beq	ef4 <coda_evaluate_detection_node+0xac>
     ecc:	ldr	r0, [pc, #352]	; 1034 <coda_evaluate_detection_node+0x1ec>
     ed0:	ldr	r0, [pc, r0]
     ed4:	str	r0, [sp, #8]
     ed8:	bl	0 <__aeabi_read_tp>
     edc:	mov	r1, #0
     ee0:	ldr	r2, [sp, #8]
     ee4:	str	r1, [r0, r2]
     ee8:	movw	r0, #0
     eec:	str	r0, [fp, #-12]
     ef0:	b	1024 <coda_evaluate_detection_node+0x1dc>
     ef4:	b	f70 <coda_evaluate_detection_node+0x128>
     ef8:	ldr	r0, [fp, #-16]
     efc:	ldr	r0, [r0, #4]
     f00:	movw	r1, #0
     f04:	cmp	r0, r1
     f08:	beq	f6c <coda_evaluate_detection_node+0x124>
     f0c:	ldr	r0, [fp, #-16]
     f10:	ldr	r0, [r0, #4]
     f14:	add	r1, sp, #24
     f18:	add	r2, sp, #16
     f1c:	bl	0 <coda_expression_eval_bool>
     f20:	cmp	r0, #0
     f24:	beq	f50 <coda_evaluate_detection_node+0x108>
     f28:	ldr	r0, [pc, #256]	; 1030 <coda_evaluate_detection_node+0x1e8>
     f2c:	ldr	r0, [pc, r0]
     f30:	str	r0, [sp, #4]
     f34:	bl	0 <__aeabi_read_tp>
     f38:	mov	r1, #0
     f3c:	ldr	r2, [sp, #4]
     f40:	str	r1, [r0, r2]
     f44:	movw	r0, #0
     f48:	str	r0, [fp, #-12]
     f4c:	b	1024 <coda_evaluate_detection_node+0x1dc>
     f50:	ldr	r0, [sp, #16]
     f54:	cmp	r0, #0
     f58:	bne	f68 <coda_evaluate_detection_node+0x120>
     f5c:	movw	r0, #0
     f60:	str	r0, [fp, #-12]
     f64:	b	1024 <coda_evaluate_detection_node+0x1dc>
     f68:	b	f6c <coda_evaluate_detection_node+0x124>
     f6c:	b	f70 <coda_evaluate_detection_node+0x128>
     f70:	movw	r0, #0
     f74:	str	r0, [sp, #20]
     f78:	ldr	r0, [sp, #20]
     f7c:	ldr	r1, [fp, #-16]
     f80:	ldr	r1, [r1, #12]
     f84:	cmp	r0, r1
     f88:	bge	ff4 <coda_evaluate_detection_node+0x1ac>
     f8c:	ldr	r0, [fp, #-16]
     f90:	ldr	r0, [r0, #16]
     f94:	ldr	r1, [sp, #20]
     f98:	add	r0, r0, r1, lsl #2
     f9c:	ldr	r0, [r0]
     fa0:	ldr	r2, [fp, #-24]	; 0xffffffe8
     fa4:	add	r1, sp, #24
     fa8:	bl	e48 <coda_evaluate_detection_node>
     fac:	cmp	r0, #0
     fb0:	beq	fc0 <coda_evaluate_detection_node+0x178>
     fb4:	mvn	r0, #0
     fb8:	str	r0, [fp, #-12]
     fbc:	b	1024 <coda_evaluate_detection_node+0x1dc>
     fc0:	ldr	r0, [fp, #-24]	; 0xffffffe8
     fc4:	ldr	r0, [r0]
     fc8:	movw	r1, #0
     fcc:	cmp	r0, r1
     fd0:	beq	fe0 <coda_evaluate_detection_node+0x198>
     fd4:	movw	r0, #0
     fd8:	str	r0, [fp, #-12]
     fdc:	b	1024 <coda_evaluate_detection_node+0x1dc>
     fe0:	b	fe4 <coda_evaluate_detection_node+0x19c>
     fe4:	ldr	r0, [sp, #20]
     fe8:	add	r0, r0, #1
     fec:	str	r0, [sp, #20]
     ff0:	b	f78 <coda_evaluate_detection_node+0x130>
     ff4:	ldr	r0, [fp, #-16]
     ff8:	ldr	r0, [r0, #8]
     ffc:	movw	r1, #0
    1000:	cmp	r0, r1
    1004:	beq	101c <coda_evaluate_detection_node+0x1d4>
    1008:	ldr	r0, [fp, #-16]
    100c:	ldr	r0, [r0, #8]
    1010:	ldr	r0, [r0, #8]
    1014:	ldr	r1, [fp, #-24]	; 0xffffffe8
    1018:	str	r0, [r1]
    101c:	movw	r0, #0
    1020:	str	r0, [fp, #-12]
    1024:	ldr	r0, [fp, #-12]
    1028:	sub	sp, fp, #8
    102c:	pop	{r4, r5, fp, pc}
    1030:	.word	0x000000fc
    1034:	.word	0x0000015c

00001038 <pathcmp>:
    1038:	sub	sp, sp, #20
    103c:	str	r0, [sp, #12]
    1040:	str	r1, [sp, #8]
    1044:	str	r2, [sp, #4]
    1048:	ldr	r0, [sp, #4]
    104c:	movw	r1, #0
    1050:	str	r1, [r0]
    1054:	ldr	r0, [sp, #12]
    1058:	ldr	r1, [sp, #4]
    105c:	ldr	r1, [r1]
    1060:	add	r0, r0, r1
    1064:	ldrb	r0, [r0]
    1068:	cmp	r0, #0
    106c:	movw	r0, #0
    1070:	str	r0, [sp]
    1074:	beq	10b0 <pathcmp+0x78>
    1078:	ldr	r0, [sp, #12]
    107c:	ldr	r1, [sp, #4]
    1080:	ldr	r1, [r1]
    1084:	add	r0, r0, r1
    1088:	ldrb	r0, [r0]
    108c:	ldr	r1, [sp, #8]
    1090:	ldr	r2, [sp, #4]
    1094:	ldr	r2, [r2]
    1098:	add	r1, r1, r2
    109c:	ldrb	r1, [r1]
    10a0:	cmp	r0, r1
    10a4:	movw	r0, #0
    10a8:	moveq	r0, #1
    10ac:	str	r0, [sp]
    10b0:	ldr	r0, [sp]
    10b4:	tst	r0, #1
    10b8:	beq	10d0 <pathcmp+0x98>
    10bc:	ldr	r0, [sp, #4]
    10c0:	ldr	r1, [r0]
    10c4:	add	r1, r1, #1
    10c8:	str	r1, [r0]
    10cc:	b	1054 <pathcmp+0x1c>
    10d0:	ldr	r0, [sp, #12]
    10d4:	ldr	r1, [sp, #4]
    10d8:	ldr	r1, [r1]
    10dc:	add	r0, r0, r1
    10e0:	ldrb	r0, [r0]
    10e4:	ldr	r1, [sp, #8]
    10e8:	ldr	r2, [sp, #4]
    10ec:	ldr	r2, [r2]
    10f0:	add	r1, r1, r2
    10f4:	ldrb	r1, [r1]
    10f8:	cmp	r0, r1
    10fc:	bne	110c <pathcmp+0xd4>
    1100:	movw	r0, #0
    1104:	str	r0, [sp, #16]
    1108:	b	1114 <pathcmp+0xdc>
    110c:	movw	r0, #1
    1110:	str	r0, [sp, #16]
    1114:	ldr	r0, [sp, #16]
    1118:	add	sp, sp, #20
    111c:	bx	lr

00001120 <detection_node_add_node>:
    1120:	push	{fp, lr}
    1124:	mov	fp, sp
    1128:	sub	sp, sp, #32
    112c:	str	r0, [fp, #-8]
    1130:	str	r1, [fp, #-12]
    1134:	ldr	r0, [fp, #-8]
    1138:	ldr	r0, [r0, #12]
    113c:	asr	r1, r0, #31
    1140:	add	r1, r0, r1, lsr #28
    1144:	bic	r1, r1, #15
    1148:	sub	r0, r0, r1
    114c:	cmp	r0, #0
    1150:	bne	11c8 <detection_node_add_node+0xa8>
    1154:	ldr	r0, [fp, #-8]
    1158:	ldr	r1, [r0, #12]
    115c:	ldr	r0, [r0, #16]
    1160:	add	r1, r1, #16
    1164:	lsl	r1, r1, #2
    1168:	bl	0 <realloc>
    116c:	str	r0, [sp, #12]
    1170:	ldr	r0, [sp, #12]
    1174:	movw	r1, #0
    1178:	cmp	r0, r1
    117c:	bne	11bc <detection_node_add_node+0x9c>
    1180:	ldr	r0, [fp, #-8]
    1184:	ldr	r0, [r0, #12]
    1188:	add	r0, r0, #16
    118c:	lsl	r2, r0, #2
    1190:	mvn	r0, #0
    1194:	movw	r1, #0
    1198:	movt	r1, #0
    119c:	movw	r3, #0
    11a0:	movt	r3, #0
    11a4:	movw	ip, #226	; 0xe2
    11a8:	str	ip, [sp]
    11ac:	bl	0 <coda_set_error>
    11b0:	mvn	r0, #0
    11b4:	str	r0, [fp, #-4]
    11b8:	b	12e0 <detection_node_add_node+0x1c0>
    11bc:	ldr	r0, [sp, #12]
    11c0:	ldr	r1, [fp, #-8]
    11c4:	str	r0, [r1, #16]
    11c8:	ldr	r0, [fp, #-12]
    11cc:	ldr	r1, [fp, #-8]
    11d0:	ldr	r2, [r1, #12]
    11d4:	ldr	r1, [r1, #16]
    11d8:	add	r1, r1, r2, lsl #2
    11dc:	str	r0, [r1]
    11e0:	ldr	r0, [fp, #-8]
    11e4:	ldr	r1, [r0, #12]
    11e8:	add	r1, r1, #1
    11ec:	str	r1, [r0, #12]
    11f0:	ldr	r0, [fp, #-8]
    11f4:	ldr	r0, [r0, #12]
    11f8:	sub	r0, r0, #1
    11fc:	str	r0, [sp, #16]
    1200:	ldr	r0, [sp, #16]
    1204:	cmp	r0, #0
    1208:	movw	r0, #0
    120c:	str	r0, [sp, #4]
    1210:	ble	1270 <detection_node_add_node+0x150>
    1214:	ldr	r0, [fp, #-8]
    1218:	ldr	r0, [r0, #16]
    121c:	ldr	r1, [sp, #16]
    1220:	add	r0, r0, r1, lsl #2
    1224:	ldr	r0, [r0]
    1228:	ldr	r0, [r0]
    122c:	movw	r1, #0
    1230:	cmp	r0, r1
    1234:	movw	r0, #0
    1238:	str	r0, [sp, #4]
    123c:	beq	1270 <detection_node_add_node+0x150>
    1240:	ldr	r0, [fp, #-8]
    1244:	ldr	r0, [r0, #16]
    1248:	ldr	r1, [sp, #16]
    124c:	sub	r1, r1, #1
    1250:	add	r0, r0, r1, lsl #2
    1254:	ldr	r0, [r0]
    1258:	ldr	r0, [r0, #4]
    125c:	movw	r1, #0
    1260:	cmp	r0, r1
    1264:	movw	r0, #0
    1268:	movne	r0, #1
    126c:	str	r0, [sp, #4]
    1270:	ldr	r0, [sp, #4]
    1274:	tst	r0, #1
    1278:	beq	12d8 <detection_node_add_node+0x1b8>
    127c:	ldr	r0, [fp, #-8]
    1280:	ldr	r0, [r0, #16]
    1284:	ldr	r1, [sp, #16]
    1288:	ldr	r0, [r0, r1, lsl #2]
    128c:	str	r0, [sp, #8]
    1290:	ldr	r0, [fp, #-8]
    1294:	ldr	r0, [r0, #16]
    1298:	ldr	r1, [sp, #16]
    129c:	add	r2, r0, r1, lsl #2
    12a0:	ldr	r2, [r2, #-4]
    12a4:	str	r2, [r0, r1, lsl #2]
    12a8:	ldr	r0, [sp, #8]
    12ac:	ldr	r1, [fp, #-8]
    12b0:	ldr	r1, [r1, #16]
    12b4:	ldr	r2, [sp, #16]
    12b8:	sub	r2, r2, #1
    12bc:	add	r1, r1, r2, lsl #2
    12c0:	str	r0, [r1]
    12c4:	ldr	r0, [sp, #16]
    12c8:	mvn	r1, #0
    12cc:	add	r0, r0, r1
    12d0:	str	r0, [sp, #16]
    12d4:	b	1200 <detection_node_add_node+0xe0>
    12d8:	movw	r0, #0
    12dc:	str	r0, [fp, #-4]
    12e0:	ldr	r0, [fp, #-4]
    12e4:	mov	sp, fp
    12e8:	pop	{fp, pc}
