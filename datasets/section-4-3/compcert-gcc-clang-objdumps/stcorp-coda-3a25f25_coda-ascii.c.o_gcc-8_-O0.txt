
../compcert-repos/stcorp-coda-3a25f25/CMakeFiles/coda_static.dir/libcoda/coda-ascii.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <read_bytes>:
   0:	strd	r4, [sp, #-24]!	; 0xffffffe8
   4:	strd	r6, [sp, #8]
   8:	str	fp, [sp, #16]
   c:	str	lr, [sp, #20]
  10:	add	fp, sp, #20
  14:	sub	sp, sp, #96	; 0x60
  18:	str	r0, [fp, #-96]	; 0xffffffa0
  1c:	strd	r2, [fp, #-108]	; 0xffffff94
  20:	ldr	r3, [fp, #-96]	; 0xffffffa0
  24:	ldr	r3, [r3, #48]	; 0x30
  28:	cmp	r3, #0
  2c:	beq	110 <read_bytes+0x110>
  30:	ldrd	r0, [fp, #-108]	; 0xffffff94
  34:	ldrd	r2, [fp, #4]
  38:	adds	r6, r0, r2
  3c:	adc	r7, r1, r3
  40:	ldr	r3, [fp, #-96]	; 0xffffffa0
  44:	ldrd	r2, [r3, #40]	; 0x28
  48:	cmp	r7, r3
  4c:	cmpeq	r6, r2
  50:	bls	ec <read_bytes+0xec>
  54:	ldr	r3, [fp, #-96]	; 0xffffffa0
  58:	ldr	r3, [r3, #16]
  5c:	cmp	r3, #0
  60:	beq	74 <read_bytes+0x74>
  64:	ldr	r3, [fp, #-96]	; 0xffffffa0
  68:	ldr	r3, [r3, #16]
  6c:	cmp	r3, #1
  70:	bne	8c <read_bytes+0x8c>
  74:	movw	r1, #0
  78:	movt	r1, #0
  7c:	mvn	r0, #300	; 0x12c
  80:	bl	0 <coda_set_error>
  84:	mvn	r3, #0
  88:	b	1e8 <read_bytes+0x1e8>
  8c:	sub	r3, fp, #44	; 0x2c
  90:	mov	r2, r3
  94:	ldrd	r0, [fp, #4]
  98:	bl	0 <coda_str64>
  9c:	sub	r3, fp, #68	; 0x44
  a0:	mov	r2, r3
  a4:	ldrd	r0, [fp, #-108]	; 0xffffff94
  a8:	bl	0 <coda_str64>
  ac:	ldr	r3, [fp, #-96]	; 0xffffffa0
  b0:	ldrd	r0, [r3, #40]	; 0x28
  b4:	sub	r3, fp, #92	; 0x5c
  b8:	mov	r2, r3
  bc:	bl	0 <coda_str64>
  c0:	sub	r1, fp, #68	; 0x44
  c4:	sub	r2, fp, #44	; 0x2c
  c8:	sub	r3, fp, #92	; 0x5c
  cc:	str	r3, [sp]
  d0:	mov	r3, r1
  d4:	movw	r1, #0
  d8:	movt	r1, #0
  dc:	mvn	r0, #300	; 0x12c
  e0:	bl	0 <coda_set_error>
  e4:	mvn	r3, #0
  e8:	b	1e8 <read_bytes+0x1e8>
  ec:	ldr	r3, [fp, #-96]	; 0xffffffa0
  f0:	ldr	r2, [r3, #48]	; 0x30
  f4:	ldr	r3, [fp, #-108]	; 0xffffff94
  f8:	add	r3, r2, r3
  fc:	ldr	r2, [fp, #4]
 100:	mov	r1, r3
 104:	ldr	r0, [fp, #12]
 108:	bl	0 <memcpy>
 10c:	b	1e4 <read_bytes+0x1e4>
 110:	ldr	r3, [fp, #-96]	; 0xffffffa0
 114:	ldr	r3, [r3, #16]
 118:	cmp	r3, #0
 11c:	beq	150 <read_bytes+0x150>
 120:	ldr	r3, [fp, #-96]	; 0xffffffa0
 124:	ldr	r3, [r3, #16]
 128:	cmp	r3, #1
 12c:	beq	150 <read_bytes+0x150>
 130:	movw	r3, #0
 134:	movt	r3, #0
 138:	mov	r2, #83	; 0x53
 13c:	movw	r1, #0
 140:	movt	r1, #0
 144:	movw	r0, #0
 148:	movt	r0, #0
 14c:	bl	0 <__assert_fail>
 150:	ldrd	r0, [fp, #-108]	; 0xffffff94
 154:	ldrd	r2, [fp, #4]
 158:	adds	r4, r0, r2
 15c:	adc	r5, r1, r3
 160:	ldr	r3, [fp, #-96]	; 0xffffffa0
 164:	ldrd	r2, [r3, #8]
 168:	cmp	r5, r3
 16c:	cmpeq	r4, r2
 170:	bls	18c <read_bytes+0x18c>
 174:	movw	r1, #0
 178:	movt	r1, #0
 17c:	mvn	r0, #300	; 0x12c
 180:	bl	0 <coda_set_error>
 184:	mvn	r3, #0
 188:	b	1e8 <read_bytes+0x1e8>
 18c:	ldr	r3, [fp, #-96]	; 0xffffffa0
 190:	ldr	r0, [r3, #56]	; 0x38
 194:	ldr	r2, [fp, #4]
 198:	ldr	r3, [fp, #-108]	; 0xffffff94
 19c:	ldr	r1, [fp, #12]
 1a0:	bl	0 <pread>
 1a4:	mov	r3, r0
 1a8:	cmp	r3, #0
 1ac:	bge	1e4 <read_bytes+0x1e4>
 1b0:	bl	0 <__errno_location>
 1b4:	mov	r3, r0
 1b8:	ldr	r3, [r3]
 1bc:	mov	r0, r3
 1c0:	bl	0 <strerror>
 1c4:	mov	r3, r0
 1c8:	mov	r2, r3
 1cc:	movw	r1, #0
 1d0:	movt	r1, #0
 1d4:	mvn	r0, #21
 1d8:	bl	0 <coda_set_error>
 1dc:	mvn	r3, #0
 1e0:	b	1e8 <read_bytes+0x1e8>
 1e4:	mov	r3, #0
 1e8:	mov	r0, r3
 1ec:	sub	sp, fp, #20
 1f0:	ldrd	r4, [sp]
 1f4:	ldrd	r6, [sp, #8]
 1f8:	ldr	fp, [sp, #16]
 1fc:	add	sp, sp, #20
 200:	pop	{pc}		; (ldr pc, [sp], #4)

00000204 <coda_ascii_reopen_with_definition>:
 204:	str	fp, [sp, #-8]!
 208:	str	lr, [sp, #4]
 20c:	add	fp, sp, #4
 210:	sub	sp, sp, #24
 214:	str	r0, [fp, #-16]
 218:	str	r1, [fp, #-20]	; 0xffffffec
 21c:	ldr	r3, [fp, #-20]	; 0xffffffec
 220:	cmp	r3, #0
 224:	bne	248 <coda_ascii_reopen_with_definition+0x44>
 228:	movw	r3, #0
 22c:	movt	r3, #0
 230:	mov	r2, #52	; 0x34
 234:	movw	r1, #0
 238:	movt	r1, #0
 23c:	movw	r0, #0
 240:	movt	r0, #0
 244:	bl	0 <__assert_fail>
 248:	ldr	r3, [fp, #-16]
 24c:	ldr	r3, [r3]
 250:	ldr	r3, [r3, #16]
 254:	cmp	r3, #1
 258:	beq	27c <coda_ascii_reopen_with_definition+0x78>
 25c:	movw	r3, #0
 260:	movt	r3, #0
 264:	mov	r2, #53	; 0x35
 268:	movw	r1, #0
 26c:	movt	r1, #0
 270:	movw	r0, #0
 274:	movt	r0, #0
 278:	bl	0 <__assert_fail>
 27c:	ldr	r3, [fp, #-20]	; 0xffffffec
 280:	ldr	r3, [r3]
 284:	cmp	r3, #0
 288:	beq	2ac <coda_ascii_reopen_with_definition+0xa8>
 28c:	movw	r3, #0
 290:	movt	r3, #0
 294:	mov	r2, #54	; 0x36
 298:	movw	r1, #0
 29c:	movt	r1, #0
 2a0:	movw	r0, #0
 2a4:	movt	r0, #0
 2a8:	bl	0 <__assert_fail>
 2ac:	mov	r0, #80	; 0x50
 2b0:	bl	0 <malloc>
 2b4:	mov	r3, r0
 2b8:	str	r3, [fp, #-8]
 2bc:	ldr	r3, [fp, #-8]
 2c0:	cmp	r3, #0
 2c4:	bne	2f4 <coda_ascii_reopen_with_definition+0xf0>
 2c8:	mov	r3, #61	; 0x3d
 2cc:	str	r3, [sp]
 2d0:	movw	r3, #0
 2d4:	movt	r3, #0
 2d8:	mov	r2, #80	; 0x50
 2dc:	movw	r1, #0
 2e0:	movt	r1, #0
 2e4:	mvn	r0, #0
 2e8:	bl	0 <coda_set_error>
 2ec:	mvn	r3, #0
 2f0:	b	498 <coda_ascii_reopen_with_definition+0x294>
 2f4:	ldr	r3, [fp, #-8]
 2f8:	mov	r2, #0
 2fc:	str	r2, [r3]
 300:	ldr	r3, [fp, #-16]
 304:	ldr	r3, [r3]
 308:	ldrd	r2, [r3, #8]
 30c:	ldr	r1, [fp, #-8]
 310:	strd	r2, [r1, #8]
 314:	ldr	r3, [fp, #-20]	; 0xffffffec
 318:	ldr	r2, [r3]
 31c:	ldr	r3, [fp, #-8]
 320:	str	r2, [r3, #16]
 324:	ldr	r3, [fp, #-20]	; 0xffffffec
 328:	ldr	r2, [r3, #28]
 32c:	ldr	r3, [fp, #-8]
 330:	str	r2, [r3, #20]
 334:	ldr	r3, [fp, #-8]
 338:	ldr	r2, [fp, #-20]	; 0xffffffec
 33c:	str	r2, [r3, #24]
 340:	ldr	r3, [fp, #-8]
 344:	mov	r2, #0
 348:	str	r2, [r3, #28]
 34c:	ldr	r3, [fp, #-8]
 350:	mov	r2, #0
 354:	str	r2, [r3, #32]
 358:	ldr	r3, [fp, #-16]
 35c:	ldr	r3, [r3]
 360:	ldrd	r2, [r3, #40]	; 0x28
 364:	ldr	r1, [fp, #-8]
 368:	strd	r2, [r1, #40]	; 0x28
 36c:	ldr	r3, [fp, #-16]
 370:	ldr	r1, [r3]
 374:	mov	r2, #0
 378:	mov	r3, #0
 37c:	strd	r2, [r1, #40]	; 0x28
 380:	ldr	r3, [fp, #-16]
 384:	ldr	r3, [r3]
 388:	ldr	r2, [r3, #48]	; 0x30
 38c:	ldr	r3, [fp, #-8]
 390:	str	r2, [r3, #48]	; 0x30
 394:	ldr	r3, [fp, #-16]
 398:	ldr	r3, [r3]
 39c:	mov	r2, #0
 3a0:	str	r2, [r3, #48]	; 0x30
 3a4:	ldr	r3, [fp, #-16]
 3a8:	ldr	r3, [r3]
 3ac:	ldr	r2, [r3, #52]	; 0x34
 3b0:	ldr	r3, [fp, #-8]
 3b4:	str	r2, [r3, #52]	; 0x34
 3b8:	ldr	r3, [fp, #-16]
 3bc:	ldr	r3, [r3]
 3c0:	ldr	r2, [r3, #56]	; 0x38
 3c4:	ldr	r3, [fp, #-8]
 3c8:	str	r2, [r3, #56]	; 0x38
 3cc:	ldr	r3, [fp, #-16]
 3d0:	ldr	r3, [r3]
 3d4:	mvn	r2, #0
 3d8:	str	r2, [r3, #56]	; 0x38
 3dc:	ldr	r3, [fp, #-8]
 3e0:	mov	r2, #0
 3e4:	str	r2, [r3, #60]	; 0x3c
 3e8:	ldr	r3, [fp, #-8]
 3ec:	mvn	r2, #0
 3f0:	str	r2, [r3, #64]	; 0x40
 3f4:	ldr	r3, [fp, #-8]
 3f8:	mov	r2, #0
 3fc:	str	r2, [r3, #68]	; 0x44
 400:	ldr	r3, [fp, #-8]
 404:	mov	r2, #0
 408:	str	r2, [r3, #72]	; 0x48
 40c:	ldr	r3, [fp, #-8]
 410:	mov	r2, #0
 414:	str	r2, [r3, #76]	; 0x4c
 418:	ldr	r3, [fp, #-16]
 41c:	ldr	r3, [r3]
 420:	ldr	r3, [r3]
 424:	mov	r0, r3
 428:	bl	0 <strdup>
 42c:	mov	r3, r0
 430:	mov	r2, r3
 434:	ldr	r3, [fp, #-8]
 438:	str	r2, [r3]
 43c:	ldr	r3, [fp, #-8]
 440:	ldr	r3, [r3]
 444:	cmp	r3, #0
 448:	bne	478 <coda_ascii_reopen_with_definition+0x274>
 44c:	mov	r3, #97	; 0x61
 450:	movw	r2, #0
 454:	movt	r2, #0
 458:	movw	r1, #0
 45c:	movt	r1, #0
 460:	mvn	r0, #0
 464:	bl	0 <coda_set_error>
 468:	ldr	r0, [fp, #-8]
 46c:	bl	0 <free>
 470:	mvn	r3, #0
 474:	b	498 <coda_ascii_reopen_with_definition+0x294>
 478:	ldr	r3, [fp, #-16]
 47c:	ldr	r3, [r3]
 480:	mov	r0, r3
 484:	bl	0 <coda_close>
 488:	ldr	r3, [fp, #-16]
 48c:	ldr	r2, [fp, #-8]
 490:	str	r2, [r3]
 494:	mov	r3, #0
 498:	mov	r0, r3
 49c:	sub	sp, fp, #4
 4a0:	ldr	fp, [sp]
 4a4:	add	sp, sp, #4
 4a8:	pop	{pc}		; (ldr pc, [sp], #4)

000004ac <coda_ascii_close>:
 4ac:	str	fp, [sp, #-8]!
 4b0:	str	lr, [sp, #4]
 4b4:	add	fp, sp, #4
 4b8:	sub	sp, sp, #16
 4bc:	str	r0, [fp, #-16]
 4c0:	ldr	r3, [fp, #-16]
 4c4:	str	r3, [fp, #-8]
 4c8:	ldr	r0, [fp, #-8]
 4cc:	bl	0 <coda_bin_product_close>
 4d0:	mov	r3, r0
 4d4:	cmp	r3, #0
 4d8:	beq	4e4 <coda_ascii_close+0x38>
 4dc:	mvn	r3, #0
 4e0:	b	550 <coda_ascii_close+0xa4>
 4e4:	ldr	r3, [fp, #-8]
 4e8:	ldr	r3, [r3]
 4ec:	cmp	r3, #0
 4f0:	beq	504 <coda_ascii_close+0x58>
 4f4:	ldr	r3, [fp, #-8]
 4f8:	ldr	r3, [r3]
 4fc:	mov	r0, r3
 500:	bl	0 <free>
 504:	ldr	r3, [fp, #-8]
 508:	ldr	r3, [r3, #68]	; 0x44
 50c:	cmp	r3, #0
 510:	beq	524 <coda_ascii_close+0x78>
 514:	ldr	r3, [fp, #-8]
 518:	ldr	r3, [r3, #68]	; 0x44
 51c:	mov	r0, r3
 520:	bl	0 <free>
 524:	ldr	r3, [fp, #-8]
 528:	ldr	r3, [r3, #76]	; 0x4c
 52c:	cmp	r3, #0
 530:	beq	544 <coda_ascii_close+0x98>
 534:	ldr	r3, [fp, #-8]
 538:	ldr	r3, [r3, #76]	; 0x4c
 53c:	mov	r0, r3
 540:	bl	0 <coda_type_release>
 544:	ldr	r0, [fp, #-8]
 548:	bl	0 <free>
 54c:	mov	r3, #0
 550:	mov	r0, r3
 554:	sub	sp, fp, #4
 558:	ldr	fp, [sp]
 55c:	add	sp, sp, #4
 560:	pop	{pc}		; (ldr pc, [sp], #4)

00000564 <eol_type_to_string>:
 564:	str	fp, [sp, #-8]!
 568:	str	lr, [sp, #4]
 56c:	add	fp, sp, #4
 570:	sub	sp, sp, #8
 574:	str	r0, [fp, #-8]
 578:	ldr	r3, [fp, #-8]
 57c:	cmp	r3, #2
 580:	beq	5c0 <eol_type_to_string+0x5c>
 584:	ldr	r3, [fp, #-8]
 588:	cmp	r3, #3
 58c:	beq	5d8 <eol_type_to_string+0x74>
 590:	ldr	r3, [fp, #-8]
 594:	cmp	r3, #1
 598:	beq	5cc <eol_type_to_string+0x68>
 59c:	nop	{0}
 5a0:	movw	r3, #0
 5a4:	movt	r3, #0
 5a8:	mov	r2, #150	; 0x96
 5ac:	movw	r1, #0
 5b0:	movt	r1, #0
 5b4:	movw	r0, #0
 5b8:	movt	r0, #0
 5bc:	bl	0 <__assert_fail>
 5c0:	movw	r3, #0
 5c4:	movt	r3, #0
 5c8:	b	5e0 <eol_type_to_string+0x7c>
 5cc:	movw	r3, #0
 5d0:	movt	r3, #0
 5d4:	b	5e0 <eol_type_to_string+0x7c>
 5d8:	movw	r3, #0
 5dc:	movt	r3, #0
 5e0:	mov	r0, r3
 5e4:	sub	sp, fp, #4
 5e8:	ldr	fp, [sp]
 5ec:	add	sp, sp, #4
 5f0:	pop	{pc}		; (ldr pc, [sp], #4)

000005f4 <verify_eol_type>:
 5f4:	str	r4, [sp, #-12]!
 5f8:	str	fp, [sp, #4]
 5fc:	str	lr, [sp, #8]
 600:	add	fp, sp, #8
 604:	sub	sp, sp, #12
 608:	str	r0, [fp, #-16]
 60c:	str	r1, [fp, #-20]	; 0xffffffec
 610:	ldr	r3, [fp, #-20]	; 0xffffffec
 614:	cmp	r3, #0
 618:	bne	63c <verify_eol_type+0x48>
 61c:	movw	r3, #0
 620:	movt	r3, #0
 624:	mov	r2, #156	; 0x9c
 628:	movw	r1, #0
 62c:	movt	r1, #0
 630:	movw	r0, #0
 634:	movt	r0, #0
 638:	bl	0 <__assert_fail>
 63c:	ldr	r3, [fp, #-16]
 640:	ldr	r3, [r3, #60]	; 0x3c
 644:	cmp	r3, #0
 648:	bne	660 <verify_eol_type+0x6c>
 64c:	ldr	r3, [fp, #-16]
 650:	ldr	r2, [fp, #-20]	; 0xffffffec
 654:	str	r2, [r3, #60]	; 0x3c
 658:	mov	r3, #0
 65c:	b	6b8 <verify_eol_type+0xc4>
 660:	ldr	r3, [fp, #-16]
 664:	ldr	r3, [r3, #60]	; 0x3c
 668:	ldr	r2, [fp, #-20]	; 0xffffffec
 66c:	cmp	r2, r3
 670:	beq	6b4 <verify_eol_type+0xc0>
 674:	ldr	r0, [fp, #-20]	; 0xffffffec
 678:	bl	564 <eol_type_to_string>
 67c:	mov	r4, r0
 680:	ldr	r3, [fp, #-16]
 684:	ldr	r3, [r3, #60]	; 0x3c
 688:	mov	r0, r3
 68c:	bl	564 <eol_type_to_string>
 690:	mov	r3, r0
 694:	mov	r2, r4
 698:	movw	r1, #0
 69c:	movt	r1, #0
 6a0:	movw	r0, #65236	; 0xfed4
 6a4:	movt	r0, #65535	; 0xffff
 6a8:	bl	0 <coda_set_error>
 6ac:	mvn	r3, #0
 6b0:	b	6b8 <verify_eol_type+0xc4>
 6b4:	mov	r3, #0
 6b8:	mov	r0, r3
 6bc:	sub	sp, fp, #8
 6c0:	ldr	r4, [sp]
 6c4:	ldr	fp, [sp, #4]
 6c8:	add	sp, sp, #8
 6cc:	pop	{pc}		; (ldr pc, [sp], #4)

000006d0 <coda_ascii_init_asciilines>:
 6d0:	strd	r4, [sp, #-32]!	; 0xffffffe0
 6d4:	strd	r6, [sp, #8]
 6d8:	strd	r8, [sp, #16]
 6dc:	str	fp, [sp, #24]
 6e0:	str	lr, [sp, #28]
 6e4:	add	fp, sp, #28
 6e8:	sub	sp, sp, #4160	; 0x1040
 6ec:	sub	sp, sp, #40	; 0x28
 6f0:	sub	r3, fp, #4096	; 0x1000
 6f4:	sub	r3, r3, #28
 6f8:	str	r0, [r3, #-52]	; 0xffffffcc
 6fc:	sub	r3, fp, #4096	; 0x1000
 700:	sub	r3, r3, #28
 704:	ldr	r3, [r3, #-52]	; 0xffffffcc
 708:	str	r3, [fp, #-68]	; 0xffffffbc
 70c:	mov	r3, #0
 710:	str	r3, [fp, #-32]	; 0xffffffe0
 714:	mov	r3, #0
 718:	str	r3, [fp, #-36]	; 0xffffffdc
 71c:	mov	r2, #0
 720:	mov	r3, #0
 724:	strd	r2, [fp, #-44]	; 0xffffffd4
 728:	mov	r3, #0
 72c:	strb	r3, [fp, #-45]	; 0xffffffd3
 730:	mov	r3, #0
 734:	str	r3, [fp, #-52]	; 0xffffffcc
 738:	ldr	r3, [fp, #-68]	; 0xffffffbc
 73c:	ldr	r3, [r3, #64]	; 0x40
 740:	cmn	r3, #1
 744:	beq	768 <coda_ascii_init_asciilines+0x98>
 748:	movw	r3, #0
 74c:	movt	r3, #0
 750:	mov	r2, #185	; 0xb9
 754:	movw	r1, #0
 758:	movt	r1, #0
 75c:	movw	r0, #0
 760:	movt	r0, #0
 764:	bl	0 <__assert_fail>
 768:	ldr	r3, [fp, #-68]	; 0xffffffbc
 76c:	ldr	r3, [r3, #52]	; 0x34
 770:	cmp	r3, #0
 774:	bne	7d0 <coda_ascii_init_asciilines+0x100>
 778:	ldr	r3, [fp, #-68]	; 0xffffffbc
 77c:	ldr	r3, [r3, #56]	; 0x38
 780:	mov	r2, #0
 784:	mov	r1, #0
 788:	mov	r0, r3
 78c:	bl	0 <lseek>
 790:	mov	r3, r0
 794:	cmp	r3, #0
 798:	bge	7d0 <coda_ascii_init_asciilines+0x100>
 79c:	bl	0 <__errno_location>
 7a0:	mov	r3, r0
 7a4:	ldr	r3, [r3]
 7a8:	mov	r0, r3
 7ac:	bl	0 <strerror>
 7b0:	mov	r3, r0
 7b4:	mov	r2, r3
 7b8:	movw	r1, #0
 7bc:	movt	r1, #0
 7c0:	mvn	r0, #21
 7c4:	bl	0 <coda_set_error>
 7c8:	mvn	r3, #0
 7cc:	b	d08 <coda_ascii_init_asciilines+0x638>
 7d0:	mov	r2, #4096	; 0x1000
 7d4:	mov	r3, #0
 7d8:	strd	r2, [fp, #-60]	; 0xffffffc4
 7dc:	ldrd	r0, [fp, #-44]	; 0xffffffd4
 7e0:	ldrd	r2, [fp, #-60]	; 0xffffffc4
 7e4:	adds	r8, r0, r2
 7e8:	adc	r9, r1, r3
 7ec:	ldr	r3, [fp, #-68]	; 0xffffffbc
 7f0:	ldrd	r2, [r3, #8]
 7f4:	cmp	r2, r8
 7f8:	sbcs	r3, r3, r9
 7fc:	bge	83c <coda_ascii_init_asciilines+0x16c>
 800:	ldr	r3, [fp, #-68]	; 0xffffffbc
 804:	ldrd	r0, [r3, #8]
 808:	ldrd	r2, [fp, #-44]	; 0xffffffd4
 80c:	subs	ip, r0, r2
 810:	sub	lr, fp, #4160	; 0x1040
 814:	sub	lr, lr, #52	; 0x34
 818:	str	ip, [lr]
 81c:	sbc	r3, r1, r3
 820:	sub	r2, fp, #4160	; 0x1040
 824:	sub	r2, r2, #48	; 0x30
 828:	str	r3, [r2]
 82c:	sub	r3, fp, #4160	; 0x1040
 830:	sub	r3, r3, #52	; 0x34
 834:	ldrd	r2, [r3]
 838:	strd	r2, [fp, #-60]	; 0xffffffc4
 83c:	ldrd	r2, [fp, #-60]	; 0xffffffc4
 840:	orrs	r3, r2, r3
 844:	beq	ca8 <coda_ascii_init_asciilines+0x5d8>
 848:	sub	r3, fp, #4096	; 0x1000
 84c:	sub	r3, r3, #28
 850:	sub	r3, r3, #48	; 0x30
 854:	str	r3, [sp, #8]
 858:	ldrd	r2, [fp, #-60]	; 0xffffffc4
 85c:	strd	r2, [sp]
 860:	ldrd	r2, [fp, #-44]	; 0xffffffd4
 864:	ldr	r0, [fp, #-68]	; 0xffffffbc
 868:	bl	0 <read_bytes>
 86c:	mov	r3, r0
 870:	cmp	r3, #0
 874:	beq	880 <coda_ascii_init_asciilines+0x1b0>
 878:	mvn	r3, #0
 87c:	b	d08 <coda_ascii_init_asciilines+0x638>
 880:	ldrb	r3, [fp, #-45]	; 0xffffffd3
 884:	cmp	r3, #13
 888:	bne	8c8 <coda_ascii_init_asciilines+0x1f8>
 88c:	sub	r3, fp, #4096	; 0x1000
 890:	sub	r3, r3, #28
 894:	ldrb	r3, [r3, #-48]	; 0xffffffd0
 898:	cmp	r3, #10
 89c:	beq	8c8 <coda_ascii_init_asciilines+0x1f8>
 8a0:	mov	r1, #2
 8a4:	ldr	r0, [fp, #-68]	; 0xffffffbc
 8a8:	bl	5f4 <verify_eol_type>
 8ac:	mov	r3, r0
 8b0:	cmp	r3, #0
 8b4:	beq	8c8 <coda_ascii_init_asciilines+0x1f8>
 8b8:	ldr	r0, [fp, #-36]	; 0xffffffdc
 8bc:	bl	0 <free>
 8c0:	mvn	r3, #0
 8c4:	b	d08 <coda_ascii_init_asciilines+0x638>
 8c8:	mov	r3, #0
 8cc:	str	r3, [fp, #-64]	; 0xffffffc0
 8d0:	b	c50 <coda_ascii_init_asciilines+0x580>
 8d4:	ldr	r3, [fp, #-64]	; 0xffffffc0
 8d8:	cmp	r3, #0
 8dc:	bne	950 <coda_ascii_init_asciilines+0x280>
 8e0:	ldrb	r3, [fp, #-45]	; 0xffffffd3
 8e4:	cmp	r3, #13
 8e8:	bne	950 <coda_ascii_init_asciilines+0x280>
 8ec:	sub	r3, fp, #4096	; 0x1000
 8f0:	sub	r3, r3, #28
 8f4:	ldrb	r3, [r3, #-48]	; 0xffffffd0
 8f8:	cmp	r3, #10
 8fc:	bne	950 <coda_ascii_init_asciilines+0x280>
 900:	ldr	r3, [fp, #-32]	; 0xffffffe0
 904:	sub	r3, r3, #-1073741823	; 0xc0000001
 908:	lsl	r2, r3, #2
 90c:	ldr	r3, [fp, #-36]	; 0xffffffdc
 910:	add	r2, r3, r2
 914:	ldr	r3, [r2]
 918:	add	r3, r3, #1
 91c:	str	r3, [r2]
 920:	mov	r3, #3
 924:	str	r3, [fp, #-52]	; 0xffffffcc
 928:	mov	r1, #3
 92c:	ldr	r0, [fp, #-68]	; 0xffffffbc
 930:	bl	5f4 <verify_eol_type>
 934:	mov	r3, r0
 938:	cmp	r3, #0
 93c:	beq	c44 <coda_ascii_init_asciilines+0x574>
 940:	ldr	r0, [fp, #-36]	; 0xffffffdc
 944:	bl	0 <free>
 948:	mvn	r3, #0
 94c:	b	d08 <coda_ascii_init_asciilines+0x638>
 950:	sub	r3, fp, #4096	; 0x1000
 954:	sub	r3, r3, #28
 958:	mov	r2, r3
 95c:	ldr	r3, [fp, #-64]	; 0xffffffc0
 960:	add	r3, r2, r3
 964:	sub	r3, r3, #48	; 0x30
 968:	ldrb	r3, [r3]
 96c:	cmp	r3, #13
 970:	beq	a14 <coda_ascii_init_asciilines+0x344>
 974:	sub	r3, fp, #4096	; 0x1000
 978:	sub	r3, r3, #28
 97c:	mov	r2, r3
 980:	ldr	r3, [fp, #-64]	; 0xffffffc0
 984:	add	r3, r2, r3
 988:	sub	r3, r3, #48	; 0x30
 98c:	ldrb	r3, [r3]
 990:	cmp	r3, #10
 994:	beq	a14 <coda_ascii_init_asciilines+0x344>
 998:	ldr	r3, [fp, #-64]	; 0xffffffc0
 99c:	mov	r0, r3
 9a0:	asr	r1, r0, #31
 9a4:	ldrd	r2, [fp, #-44]	; 0xffffffd4
 9a8:	adds	ip, r0, r2
 9ac:	sub	lr, fp, #4160	; 0x1040
 9b0:	sub	lr, lr, #28
 9b4:	str	ip, [lr]
 9b8:	adc	r3, r1, r3
 9bc:	sub	r2, fp, #4160	; 0x1040
 9c0:	sub	r2, r2, #24
 9c4:	str	r3, [r2]
 9c8:	ldr	r3, [fp, #-68]	; 0xffffffbc
 9cc:	ldrd	r2, [r3, #8]
 9d0:	subs	r1, r2, #1
 9d4:	sub	r0, fp, #4160	; 0x1040
 9d8:	sub	r0, r0, #36	; 0x24
 9dc:	str	r1, [r0]
 9e0:	sbc	r3, r3, #0
 9e4:	sub	r2, fp, #4160	; 0x1040
 9e8:	sub	r2, r2, #32
 9ec:	str	r3, [r2]
 9f0:	sub	r3, fp, #4160	; 0x1040
 9f4:	sub	r3, r3, #28
 9f8:	ldrd	r2, [r3]
 9fc:	sub	r1, fp, #4160	; 0x1040
 a00:	sub	r1, r1, #36	; 0x24
 a04:	ldrd	r0, [r1]
 a08:	cmp	r3, r1
 a0c:	cmpeq	r2, r0
 a10:	bne	c44 <coda_ascii_init_asciilines+0x574>
 a14:	ldr	r3, [fp, #-32]	; 0xffffffe0
 a18:	and	r3, r3, #15
 a1c:	cmp	r3, #0
 a20:	bne	a9c <coda_ascii_init_asciilines+0x3cc>
 a24:	ldr	r3, [fp, #-32]	; 0xffffffe0
 a28:	add	r3, r3, #16
 a2c:	lsl	r3, r3, #2
 a30:	mov	r1, r3
 a34:	ldr	r0, [fp, #-36]	; 0xffffffdc
 a38:	bl	0 <realloc>
 a3c:	str	r0, [fp, #-72]	; 0xffffffb8
 a40:	ldr	r3, [fp, #-72]	; 0xffffffb8
 a44:	cmp	r3, #0
 a48:	bne	a94 <coda_ascii_init_asciilines+0x3c4>
 a4c:	ldr	r3, [fp, #-32]	; 0xffffffe0
 a50:	add	r3, r3, #16
 a54:	lsl	r2, r3, #2
 a58:	mov	r3, #245	; 0xf5
 a5c:	str	r3, [sp]
 a60:	movw	r3, #0
 a64:	movt	r3, #0
 a68:	movw	r1, #0
 a6c:	movt	r1, #0
 a70:	mvn	r0, #0
 a74:	bl	0 <coda_set_error>
 a78:	ldr	r3, [fp, #-36]	; 0xffffffdc
 a7c:	cmp	r3, #0
 a80:	beq	a8c <coda_ascii_init_asciilines+0x3bc>
 a84:	ldr	r0, [fp, #-36]	; 0xffffffdc
 a88:	bl	0 <free>
 a8c:	mvn	r3, #0
 a90:	b	d08 <coda_ascii_init_asciilines+0x638>
 a94:	ldr	r3, [fp, #-72]	; 0xffffffb8
 a98:	str	r3, [fp, #-36]	; 0xffffffdc
 a9c:	ldr	r2, [fp, #-44]	; 0xffffffd4
 aa0:	ldr	r3, [fp, #-64]	; 0xffffffc0
 aa4:	add	r1, r2, r3
 aa8:	ldr	r3, [fp, #-32]	; 0xffffffe0
 aac:	lsl	r2, r3, #2
 ab0:	ldr	r3, [fp, #-36]	; 0xffffffdc
 ab4:	add	r2, r3, r2
 ab8:	add	r3, r1, #1
 abc:	str	r3, [r2]
 ac0:	ldr	r3, [fp, #-32]	; 0xffffffe0
 ac4:	add	r3, r3, #1
 ac8:	str	r3, [fp, #-32]	; 0xffffffe0
 acc:	mov	r3, #0
 ad0:	str	r3, [fp, #-52]	; 0xffffffcc
 ad4:	sub	r3, fp, #4096	; 0x1000
 ad8:	sub	r3, r3, #28
 adc:	mov	r2, r3
 ae0:	ldr	r3, [fp, #-64]	; 0xffffffc0
 ae4:	add	r3, r2, r3
 ae8:	sub	r3, r3, #48	; 0x30
 aec:	ldrb	r3, [r3]
 af0:	cmp	r3, #10
 af4:	bne	b28 <coda_ascii_init_asciilines+0x458>
 af8:	mov	r3, #1
 afc:	str	r3, [fp, #-52]	; 0xffffffcc
 b00:	mov	r1, #1
 b04:	ldr	r0, [fp, #-68]	; 0xffffffbc
 b08:	bl	5f4 <verify_eol_type>
 b0c:	mov	r3, r0
 b10:	cmp	r3, #0
 b14:	beq	c44 <coda_ascii_init_asciilines+0x574>
 b18:	ldr	r0, [fp, #-36]	; 0xffffffdc
 b1c:	bl	0 <free>
 b20:	mvn	r3, #0
 b24:	b	d08 <coda_ascii_init_asciilines+0x638>
 b28:	sub	r3, fp, #4096	; 0x1000
 b2c:	sub	r3, r3, #28
 b30:	mov	r2, r3
 b34:	ldr	r3, [fp, #-64]	; 0xffffffc0
 b38:	add	r3, r2, r3
 b3c:	sub	r3, r3, #48	; 0x30
 b40:	ldrb	r3, [r3]
 b44:	cmp	r3, #13
 b48:	bne	c44 <coda_ascii_init_asciilines+0x574>
 b4c:	mov	r3, #2
 b50:	str	r3, [fp, #-52]	; 0xffffffcc
 b54:	ldr	r3, [fp, #-64]	; 0xffffffc0
 b58:	mov	r0, r3
 b5c:	asr	r1, r0, #31
 b60:	ldrd	r2, [fp, #-60]	; 0xffffffc4
 b64:	subs	ip, r2, #1
 b68:	sub	lr, fp, #4160	; 0x1040
 b6c:	sub	lr, lr, #44	; 0x2c
 b70:	str	ip, [lr]
 b74:	sbc	r3, r3, #0
 b78:	sub	r2, fp, #4160	; 0x1040
 b7c:	sub	r2, r2, #40	; 0x28
 b80:	str	r3, [r2]
 b84:	sub	r3, fp, #4160	; 0x1040
 b88:	sub	r3, r3, #44	; 0x2c
 b8c:	ldrd	r2, [r3]
 b90:	cmp	r0, r2
 b94:	sbcs	r3, r1, r3
 b98:	bge	c44 <coda_ascii_init_asciilines+0x574>
 b9c:	ldr	r3, [fp, #-64]	; 0xffffffc0
 ba0:	add	r2, r3, #1
 ba4:	sub	r3, fp, #4096	; 0x1000
 ba8:	sub	r3, r3, #28
 bac:	add	r3, r3, r2
 bb0:	ldrb	r3, [r3, #-48]	; 0xffffffd0
 bb4:	cmp	r3, #10
 bb8:	bne	c1c <coda_ascii_init_asciilines+0x54c>
 bbc:	mov	r3, #3
 bc0:	str	r3, [fp, #-52]	; 0xffffffcc
 bc4:	mov	r1, #3
 bc8:	ldr	r0, [fp, #-68]	; 0xffffffbc
 bcc:	bl	5f4 <verify_eol_type>
 bd0:	mov	r3, r0
 bd4:	cmp	r3, #0
 bd8:	beq	bec <coda_ascii_init_asciilines+0x51c>
 bdc:	ldr	r0, [fp, #-36]	; 0xffffffdc
 be0:	bl	0 <free>
 be4:	mvn	r3, #0
 be8:	b	d08 <coda_ascii_init_asciilines+0x638>
 bec:	ldr	r3, [fp, #-32]	; 0xffffffe0
 bf0:	sub	r3, r3, #-1073741823	; 0xc0000001
 bf4:	lsl	r2, r3, #2
 bf8:	ldr	r3, [fp, #-36]	; 0xffffffdc
 bfc:	add	r2, r3, r2
 c00:	ldr	r3, [r2]
 c04:	add	r3, r3, #1
 c08:	str	r3, [r2]
 c0c:	ldr	r3, [fp, #-64]	; 0xffffffc0
 c10:	add	r3, r3, #1
 c14:	str	r3, [fp, #-64]	; 0xffffffc0
 c18:	b	c44 <coda_ascii_init_asciilines+0x574>
 c1c:	mov	r1, #2
 c20:	ldr	r0, [fp, #-68]	; 0xffffffbc
 c24:	bl	5f4 <verify_eol_type>
 c28:	mov	r3, r0
 c2c:	cmp	r3, #0
 c30:	beq	c44 <coda_ascii_init_asciilines+0x574>
 c34:	ldr	r0, [fp, #-36]	; 0xffffffdc
 c38:	bl	0 <free>
 c3c:	mvn	r3, #0
 c40:	b	d08 <coda_ascii_init_asciilines+0x638>
 c44:	ldr	r3, [fp, #-64]	; 0xffffffc0
 c48:	add	r3, r3, #1
 c4c:	str	r3, [fp, #-64]	; 0xffffffc0
 c50:	ldr	r3, [fp, #-64]	; 0xffffffc0
 c54:	mov	r0, r3
 c58:	asr	r1, r0, #31
 c5c:	ldrd	r2, [fp, #-60]	; 0xffffffc4
 c60:	cmp	r0, r2
 c64:	sbcs	r3, r1, r3
 c68:	blt	8d4 <coda_ascii_init_asciilines+0x204>
 c6c:	ldrd	r2, [fp, #-60]	; 0xffffffc4
 c70:	subs	r6, r2, #1
 c74:	sbc	r7, r3, #0
 c78:	sub	r3, fp, #4096	; 0x1000
 c7c:	sub	r3, r3, #28
 c80:	add	r3, r3, r6
 c84:	sub	r3, r3, #48	; 0x30
 c88:	ldrb	r3, [r3]
 c8c:	strb	r3, [fp, #-45]	; 0xffffffd3
 c90:	ldrd	r0, [fp, #-44]	; 0xffffffd4
 c94:	ldrd	r2, [fp, #-60]	; 0xffffffc4
 c98:	adds	r4, r0, r2
 c9c:	adc	r5, r1, r3
 ca0:	strd	r4, [fp, #-44]	; 0xffffffd4
 ca4:	b	7d0 <coda_ascii_init_asciilines+0x100>
 ca8:	nop	{0}
 cac:	ldrb	r3, [fp, #-45]	; 0xffffffd3
 cb0:	cmp	r3, #13
 cb4:	bne	ce0 <coda_ascii_init_asciilines+0x610>
 cb8:	mov	r1, #2
 cbc:	ldr	r0, [fp, #-68]	; 0xffffffbc
 cc0:	bl	5f4 <verify_eol_type>
 cc4:	mov	r3, r0
 cc8:	cmp	r3, #0
 ccc:	beq	ce0 <coda_ascii_init_asciilines+0x610>
 cd0:	ldr	r0, [fp, #-36]	; 0xffffffdc
 cd4:	bl	0 <free>
 cd8:	mvn	r3, #0
 cdc:	b	d08 <coda_ascii_init_asciilines+0x638>
 ce0:	ldr	r3, [fp, #-68]	; 0xffffffbc
 ce4:	ldr	r2, [fp, #-32]	; 0xffffffe0
 ce8:	str	r2, [r3, #64]	; 0x40
 cec:	ldr	r3, [fp, #-68]	; 0xffffffbc
 cf0:	ldr	r2, [fp, #-36]	; 0xffffffdc
 cf4:	str	r2, [r3, #68]	; 0x44
 cf8:	ldr	r3, [fp, #-68]	; 0xffffffbc
 cfc:	ldr	r2, [fp, #-52]	; 0xffffffcc
 d00:	str	r2, [r3, #72]	; 0x48
 d04:	mov	r3, #0
 d08:	mov	r0, r3
 d0c:	sub	sp, fp, #28
 d10:	ldrd	r4, [sp]
 d14:	ldrd	r6, [sp, #8]
 d18:	ldrd	r8, [sp, #16]
 d1c:	ldr	fp, [sp, #24]
 d20:	add	sp, sp, #28
 d24:	pop	{pc}		; (ldr pc, [sp], #4)
