
../compcert-repos/stcorp-coda-3a25f25/CMakeFiles/coda_static.dir/libcoda/coda-grib-type.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <coda_grib_type_delete>:
   0:	push	{r4, sl, fp, lr}
   4:	add	fp, sp, #8
   8:	cmp	r0, #0
   c:	beq	7c <coda_grib_type_delete+0x7c>
  10:	mov	r4, r0
  14:	ldr	r0, [r0]
  18:	cmp	r0, #105	; 0x69
  1c:	bne	94 <coda_grib_type_delete+0x94>
  20:	ldr	r0, [r4, #4]
  24:	ldr	r1, [r0, #8]
  28:	cmp	r1, #1
  2c:	bne	64 <coda_grib_type_delete+0x64>
  30:	ldr	r0, [r4, #12]
  34:	cmp	r0, #0
  38:	beq	40 <coda_grib_type_delete+0x40>
  3c:	bl	0 <coda_dynamic_type_delete>
  40:	ldr	r0, [r4, #56]	; 0x38
  44:	cmp	r0, #0
  48:	beq	50 <coda_grib_type_delete+0x50>
  4c:	bl	0 <free>
  50:	ldr	r0, [r4, #60]	; 0x3c
  54:	cmp	r0, #0
  58:	beq	60 <coda_grib_type_delete+0x60>
  5c:	bl	0 <free>
  60:	ldr	r0, [r4, #4]
  64:	cmp	r0, #0
  68:	beq	70 <coda_grib_type_delete+0x70>
  6c:	bl	0 <coda_type_release>
  70:	mov	r0, r4
  74:	pop	{r4, sl, fp, lr}
  78:	b	0 <free>
  7c:	movw	r0, #0
  80:	movw	r1, #0
  84:	movw	r3, #0
  88:	mov	r2, #61	; 0x3d
  8c:	movt	r0, #0
  90:	b	a8 <coda_grib_type_delete+0xa8>
  94:	movw	r0, #0
  98:	movw	r1, #0
  9c:	movw	r3, #0
  a0:	mov	r2, #62	; 0x3e
  a4:	movt	r0, #0
  a8:	movt	r1, #0
  ac:	movt	r3, #0
  b0:	bl	0 <__assert_fail>

000000b4 <coda_grib_value_array_new>:
  b4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
  b8:	add	fp, sp, #28
  bc:	sub	sp, sp, #4
  c0:	cmp	r0, #0
  c4:	beq	180 <coda_grib_value_array_new+0xcc>
  c8:	ldr	r9, [r0, #40]	; 0x28
  cc:	mov	r6, r0
  d0:	ldr	r0, [r9, #8]
  d4:	cmp	r0, #3
  d8:	bne	19c <coda_grib_value_array_new+0xe8>
  dc:	mov	r0, #64	; 0x40
  e0:	mov	r7, r3
  e4:	mov	r4, r2
  e8:	mov	r8, r1
  ec:	bl	0 <malloc>
  f0:	cmp	r0, #0
  f4:	beq	1bc <coda_grib_value_array_new+0x108>
  f8:	mov	sl, #105	; 0x69
  fc:	str	r6, [r0, #4]
 100:	mov	r5, r0
 104:	vmov.i32	q8, #0	; 0x00000000
 108:	lsl	r1, r4, #3
 10c:	str	sl, [r0]
 110:	add	r2, r5, #32
 114:	ldr	r0, [r6, #4]
 118:	add	r0, r0, #1
 11c:	str	r0, [r6, #4]
 120:	lsl	r0, r7, #3
 124:	vst1.64	{d16-d17}, [r2]
 128:	mov	r2, #32
 12c:	str	r1, [r5, #16]
 130:	orr	r0, r0, r4, lsr #29
 134:	mov	r4, #0
 138:	str	r0, [r5, #20]
 13c:	add	r0, r5, #48	; 0x30
 140:	str	r4, [r5, #24]
 144:	str	r2, [r5, #28]
 148:	str	r8, [r5, #8]
 14c:	vst1.64	{d16-d17}, [r0]
 150:	mov	r0, #8
 154:	bl	0 <malloc>
 158:	cmp	r0, #0
 15c:	str	r0, [r5, #12]
 160:	beq	1f0 <coda_grib_value_array_new+0x13c>
 164:	str	sl, [r0]
 168:	str	r9, [r0, #4]
 16c:	mov	r4, r5
 170:	ldr	r0, [r9, #4]
 174:	add	r0, r0, #1
 178:	str	r0, [r9, #4]
 17c:	b	1e4 <coda_grib_value_array_new+0x130>
 180:	movw	r1, #0
 184:	movw	r2, #0
 188:	mvn	r0, #99	; 0x63
 18c:	mov	r3, #92	; 0x5c
 190:	movt	r1, #0
 194:	movt	r2, #0
 198:	b	1dc <coda_grib_value_array_new+0x128>
 19c:	bl	0 <coda_type_get_class_name>
 1a0:	movw	r1, #0
 1a4:	mov	r2, r0
 1a8:	movw	r0, #65136	; 0xfe70
 1ac:	movt	r0, #65535	; 0xffff
 1b0:	movt	r1, #0
 1b4:	bl	0 <coda_set_error>
 1b8:	b	1e0 <coda_grib_value_array_new+0x12c>
 1bc:	movw	r1, #0
 1c0:	movw	r3, #0
 1c4:	mov	r0, #106	; 0x6a
 1c8:	mov	r2, #64	; 0x40
 1cc:	str	r0, [sp]
 1d0:	movt	r1, #0
 1d4:	movt	r3, #0
 1d8:	mvn	r0, #0
 1dc:	bl	0 <coda_set_error>
 1e0:	mov	r4, #0
 1e4:	mov	r0, r4
 1e8:	sub	sp, fp, #28
 1ec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
 1f0:	mov	r0, r5
 1f4:	bl	0 <coda_grib_type_delete>
 1f8:	movw	r1, #0
 1fc:	movw	r3, #0
 200:	mov	r0, #130	; 0x82
 204:	mov	r2, #8
 208:	movt	r1, #0
 20c:	movt	r3, #0
 210:	str	r0, [sp]
 214:	mvn	r0, #0
 218:	bl	0 <coda_set_error>
 21c:	b	1e4 <coda_grib_value_array_new+0x130>

00000220 <coda_grib_value_array_simple_packing_new>:
 220:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
 224:	add	fp, sp, #24
 228:	vpush	{d8}
 22c:	sub	sp, sp, #8
 230:	vmov.f32	s16, s0
 234:	mov	r5, r1
 238:	bl	b4 <coda_grib_value_array_new>
 23c:	cmp	r0, #0
 240:	beq	5b8 <coda_grib_value_array_simple_packing_new+0x398>
 244:	ldr	r1, [fp, #16]
 248:	mov	r4, r0
 24c:	ldr	r0, [fp, #12]
 250:	ldr	r3, [fp, #8]
 254:	mov	r2, #1
 258:	vstr	s16, [r4, #36]	; 0x24
 25c:	cmp	r1, #0
 260:	strh	r1, [r4, #34]	; 0x22
 264:	strh	r0, [r4, #32]
 268:	strd	r2, [r4, #24]
 26c:	bmi	2b8 <coda_grib_value_array_simple_packing_new+0x98>
 270:	beq	314 <coda_grib_value_array_simple_packing_new+0xf4>
 274:	vmov.f64	d16, #112	; 0x3f800000  1.0
 278:	ands	r3, r1, #3
 27c:	sub	r2, r1, #1
 280:	beq	294 <coda_grib_value_array_simple_packing_new+0x74>
 284:	vadd.f64	d16, d16, d16
 288:	subs	r3, r3, #1
 28c:	sub	r1, r1, #1
 290:	bne	284 <coda_grib_value_array_simple_packing_new+0x64>
 294:	cmp	r2, #3
 298:	bcc	318 <coda_grib_value_array_simple_packing_new+0xf8>
 29c:	vadd.f64	d16, d16, d16
 2a0:	subs	r1, r1, #4
 2a4:	vadd.f64	d16, d16, d16
 2a8:	vadd.f64	d16, d16, d16
 2ac:	vadd.f64	d16, d16, d16
 2b0:	bne	29c <coda_grib_value_array_simple_packing_new+0x7c>
 2b4:	b	318 <coda_grib_value_array_simple_packing_new+0xf8>
 2b8:	vmov.f64	d16, #112	; 0x3f800000  1.0
 2bc:	rsb	r2, r1, #0
 2c0:	ands	r3, r2, #3
 2c4:	beq	2e0 <coda_grib_value_array_simple_packing_new+0xc0>
 2c8:	mov	r2, r1
 2cc:	vadd.f64	d16, d16, d16
 2d0:	add	r2, r2, #1
 2d4:	subs	r3, r3, #1
 2d8:	bne	2cc <coda_grib_value_array_simple_packing_new+0xac>
 2dc:	rsb	r2, r2, #0
 2e0:	uxth	r1, r1
 2e4:	movw	r3, #65532	; 0xfffc
 2e8:	cmp	r1, r3
 2ec:	bhi	308 <coda_grib_value_array_simple_packing_new+0xe8>
 2f0:	vadd.f64	d16, d16, d16
 2f4:	subs	r2, r2, #4
 2f8:	vadd.f64	d16, d16, d16
 2fc:	vadd.f64	d16, d16, d16
 300:	vadd.f64	d16, d16, d16
 304:	bne	2f0 <coda_grib_value_array_simple_packing_new+0xd0>
 308:	vmov.f64	d17, #112	; 0x3f800000  1.0
 30c:	vdiv.f64	d16, d17, d16
 310:	b	318 <coda_grib_value_array_simple_packing_new+0xf8>
 314:	vmov.f64	d16, #112	; 0x3f800000  1.0
 318:	ldr	r8, [fp, #20]
 31c:	rsb	r1, r0, #0
 320:	cmp	r0, #1
 324:	blt	35c <coda_grib_value_array_simple_packing_new+0x13c>
 328:	vmov.f64	d17, #112	; 0x3f800000  1.0
 32c:	ands	r7, r0, #3
 330:	sub	r3, r0, #1
 334:	beq	390 <coda_grib_value_array_simple_packing_new+0x170>
 338:	vmov.f64	d18, #36	; 0x41200000  10.0
 33c:	mov	r2, r0
 340:	vmul.f64	d17, d17, d18
 344:	subs	r7, r7, #1
 348:	sub	r2, r2, #1
 34c:	bne	340 <coda_grib_value_array_simple_packing_new+0x120>
 350:	cmp	r3, #3
 354:	bcs	39c <coda_grib_value_array_simple_packing_new+0x17c>
 358:	b	3b8 <coda_grib_value_array_simple_packing_new+0x198>
 35c:	cmp	r0, #0
 360:	beq	488 <coda_grib_value_array_simple_packing_new+0x268>
 364:	vmov.f64	d17, #112	; 0x3f800000  1.0
 368:	ands	r2, r1, #3
 36c:	beq	5cc <coda_grib_value_array_simple_packing_new+0x3ac>
 370:	vmov.f64	d18, #36	; 0x41200000  10.0
 374:	mov	r3, r0
 378:	vmul.f64	d17, d17, d18
 37c:	add	r3, r3, #1
 380:	subs	r2, r2, #1
 384:	bne	378 <coda_grib_value_array_simple_packing_new+0x158>
 388:	rsb	r2, r3, #0
 38c:	b	5d0 <coda_grib_value_array_simple_packing_new+0x3b0>
 390:	mov	r2, r0
 394:	cmp	r3, #3
 398:	bcc	3b8 <coda_grib_value_array_simple_packing_new+0x198>
 39c:	vmov.f64	d18, #36	; 0x41200000  10.0
 3a0:	vmul.f64	d17, d17, d18
 3a4:	subs	r2, r2, #4
 3a8:	vmul.f64	d17, d17, d18
 3ac:	vmul.f64	d17, d17, d18
 3b0:	vmul.f64	d17, d17, d18
 3b4:	bne	3a0 <coda_grib_value_array_simple_packing_new+0x180>
 3b8:	vmov.f64	d18, #112	; 0x3f800000  1.0
 3bc:	vdiv.f64	d17, d18, d17
 3c0:	vmul.f64	d16, d16, d17
 3c4:	vcvt.f64.f32	d17, s16
 3c8:	cmp	r0, #1
 3cc:	vstr	d16, [r4, #40]	; 0x28
 3d0:	blt	428 <coda_grib_value_array_simple_packing_new+0x208>
 3d4:	vmov.f64	d16, #112	; 0x3f800000  1.0
 3d8:	ands	r2, r0, #3
 3dc:	sub	r1, r0, #1
 3e0:	beq	3f8 <coda_grib_value_array_simple_packing_new+0x1d8>
 3e4:	vmov.f64	d18, #36	; 0x41200000  10.0
 3e8:	vmul.f64	d16, d16, d18
 3ec:	subs	r2, r2, #1
 3f0:	sub	r0, r0, #1
 3f4:	bne	3e8 <coda_grib_value_array_simple_packing_new+0x1c8>
 3f8:	cmp	r1, #3
 3fc:	bcc	41c <coda_grib_value_array_simple_packing_new+0x1fc>
 400:	vmov.f64	d18, #36	; 0x41200000  10.0
 404:	vmul.f64	d16, d16, d18
 408:	subs	r0, r0, #4
 40c:	vmul.f64	d16, d16, d18
 410:	vmul.f64	d16, d16, d18
 414:	vmul.f64	d16, d16, d18
 418:	bne	404 <coda_grib_value_array_simple_packing_new+0x1e4>
 41c:	vmov.f64	d18, #112	; 0x3f800000  1.0
 420:	vdiv.f64	d18, d18, d16
 424:	b	494 <coda_grib_value_array_simple_packing_new+0x274>
 428:	vmov.f64	d18, #112	; 0x3f800000  1.0
 42c:	cmp	r0, #0
 430:	beq	494 <coda_grib_value_array_simple_packing_new+0x274>
 434:	ands	r2, r1, #3
 438:	beq	458 <coda_grib_value_array_simple_packing_new+0x238>
 43c:	vmov.f64	d16, #36	; 0x41200000  10.0
 440:	mov	r1, r0
 444:	vmul.f64	d18, d18, d16
 448:	add	r1, r1, #1
 44c:	subs	r2, r2, #1
 450:	bne	444 <coda_grib_value_array_simple_packing_new+0x224>
 454:	rsb	r1, r1, #0
 458:	uxth	r0, r0
 45c:	movw	r2, #65532	; 0xfffc
 460:	cmp	r0, r2
 464:	bhi	494 <coda_grib_value_array_simple_packing_new+0x274>
 468:	vmov.f64	d16, #36	; 0x41200000  10.0
 46c:	vmul.f64	d18, d18, d16
 470:	subs	r1, r1, #4
 474:	vmul.f64	d18, d18, d16
 478:	vmul.f64	d18, d18, d16
 47c:	vmul.f64	d18, d18, d16
 480:	bne	46c <coda_grib_value_array_simple_packing_new+0x24c>
 484:	b	494 <coda_grib_value_array_simple_packing_new+0x274>
 488:	vmov.f64	d18, #112	; 0x3f800000  1.0
 48c:	vcvt.f64.f32	d17, s16
 490:	vstr	d16, [r4, #40]	; 0x28
 494:	vmul.f64	d16, d17, d18
 498:	mov	r0, #0
 49c:	cmp	r8, #0
 4a0:	str	r0, [r4, #56]	; 0x38
 4a4:	str	r0, [r4, #60]	; 0x3c
 4a8:	vstr	d16, [r4, #48]	; 0x30
 4ac:	beq	5bc <coda_grib_value_array_simple_packing_new+0x39c>
 4b0:	ands	r6, r5, #7
 4b4:	movwne	r6, #1
 4b8:	add	r7, r6, r5, asr #3
 4bc:	mov	r0, r7
 4c0:	bl	0 <malloc>
 4c4:	cmp	r0, #0
 4c8:	str	r0, [r4, #56]	; 0x38
 4cc:	beq	57c <coda_grib_value_array_simple_packing_new+0x35c>
 4d0:	mov	r1, r8
 4d4:	mov	r2, r7
 4d8:	bl	0 <memcpy>
 4dc:	mov	r0, r7
 4e0:	bl	0 <malloc>
 4e4:	cmp	r0, #0
 4e8:	str	r0, [r4, #60]	; 0x3c
 4ec:	beq	58c <coda_grib_value_array_simple_packing_new+0x36c>
 4f0:	cmp	r7, #1
 4f4:	blt	5bc <coda_grib_value_array_simple_packing_new+0x39c>
 4f8:	asr	r1, r5, #3
 4fc:	mov	r2, #0
 500:	add	r1, r1, r6
 504:	sub	r1, r1, #1
 508:	ldr	r3, [r4, #56]	; 0x38
 50c:	tst	r2, #15
 510:	ldrb	r3, [r3, r2]
 514:	and	r7, r3, #1
 518:	ubfx	r6, r3, #6, #1
 51c:	add	r7, r7, r3, lsr #7
 520:	add	r7, r7, r6
 524:	ubfx	r6, r3, #5, #1
 528:	add	r7, r7, r6
 52c:	ubfx	r6, r3, #4, #1
 530:	add	r7, r7, r6
 534:	ubfx	r6, r3, #3, #1
 538:	add	r7, r7, r6
 53c:	ubfx	r6, r3, #2, #1
 540:	ubfx	r3, r3, #1, #1
 544:	add	r7, r7, r6
 548:	add	r3, r7, r3
 54c:	strb	r3, [r0, r2]
 550:	beq	568 <coda_grib_value_array_simple_packing_new+0x348>
 554:	ldr	r0, [r4, #60]	; 0x3c
 558:	ldrb	r3, [r0, r2]!
 55c:	ldrb	r7, [r0, #-1]
 560:	add	r3, r3, r7
 564:	strb	r3, [r0]
 568:	cmp	r1, r2
 56c:	beq	5bc <coda_grib_value_array_simple_packing_new+0x39c>
 570:	ldr	r0, [r4, #60]	; 0x3c
 574:	add	r2, r2, #1
 578:	b	508 <coda_grib_value_array_simple_packing_new+0x2e8>
 57c:	mov	r0, r4
 580:	bl	0 <coda_grib_type_delete>
 584:	mov	r0, #173	; 0xad
 588:	b	598 <coda_grib_value_array_simple_packing_new+0x378>
 58c:	mov	r0, r4
 590:	bl	0 <coda_grib_type_delete>
 594:	mov	r0, #183	; 0xb7
 598:	movw	r1, #0
 59c:	movw	r3, #0
 5a0:	str	r0, [sp]
 5a4:	mvn	r0, #0
 5a8:	mov	r2, r7
 5ac:	movt	r1, #0
 5b0:	movt	r3, #0
 5b4:	bl	0 <coda_set_error>
 5b8:	mov	r4, #0
 5bc:	mov	r0, r4
 5c0:	sub	sp, fp, #32
 5c4:	vpop	{d8}
 5c8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
 5cc:	mov	r2, r1
 5d0:	uxth	r3, r0
 5d4:	movw	r7, #65532	; 0xfffc
 5d8:	cmp	r3, r7
 5dc:	bhi	3c0 <coda_grib_value_array_simple_packing_new+0x1a0>
 5e0:	vmov.f64	d18, #36	; 0x41200000  10.0
 5e4:	vmul.f64	d17, d17, d18
 5e8:	subs	r2, r2, #4
 5ec:	vmul.f64	d17, d17, d18
 5f0:	vmul.f64	d17, d17, d18
 5f4:	vmul.f64	d17, d17, d18
 5f8:	bne	5e4 <coda_grib_value_array_simple_packing_new+0x3c4>
 5fc:	b	3c0 <coda_grib_value_array_simple_packing_new+0x1a0>
