
../compcert-repos/prog2/1.1.3:     file format elf32-littlearm


Disassembly of section .init:

000105c0 <.init>:
   105c0:	push	{r3, lr}
   105c4:	bl	10738 <_start@@Base+0x3c>
   105c8:	pop	{r3, pc}

Disassembly of section .plt:

000105cc <printf@plt-0x14>:
   105cc:	push	{lr}		; (str lr, [sp, #-4]!)
   105d0:	ldr	lr, [pc, #4]	; 105dc <printf@plt-0x4>
   105d4:	add	lr, pc, lr
   105d8:	ldr	pc, [lr, #8]!
   105dc:	andeq	r0, r1, r4, lsr #20

000105e0 <printf@plt>:
   105e0:	add	ip, pc, #0, 12
   105e4:	add	ip, ip, #16, 20	; 0x10000
   105e8:	ldr	pc, [ip, #2596]!	; 0xa24

000105ec <fopen@plt>:
   105ec:	add	ip, pc, #0, 12
   105f0:	add	ip, ip, #16, 20	; 0x10000
   105f4:	ldr	pc, [ip, #2588]!	; 0xa1c

000105f8 <__libc_start_main@plt>:
   105f8:	add	ip, pc, #0, 12
   105fc:	add	ip, ip, #16, 20	; 0x10000
   10600:	ldr	pc, [ip, #2580]!	; 0xa14

00010604 <__gmon_start__@plt>:
   10604:	add	ip, pc, #0, 12
   10608:	add	ip, ip, #16, 20	; 0x10000
   1060c:	ldr	pc, [ip, #2572]!	; 0xa0c

00010610 <fclose@plt>:
   10610:	add	ip, pc, #0, 12
   10614:	add	ip, ip, #16, 20	; 0x10000
   10618:	ldr	pc, [ip, #2564]!	; 0xa04

0001061c <abort@plt>:
   1061c:	add	ip, pc, #0, 12
   10620:	add	ip, ip, #16, 20	; 0x10000
   10624:	ldr	pc, [ip, #2556]!	; 0x9fc

00010628 <getc@plt>:
   10628:	add	ip, pc, #0, 12
   1062c:	add	ip, ip, #16, 20	; 0x10000
   10630:	ldr	pc, [ip, #2548]!	; 0x9f4

Disassembly of section .text:

00010634 <main@@Base>:
   10634:	push	{r4, r5, r6, r7, r8, lr}
   10638:	mov	r5, #0
   1063c:	ldr	r1, [pc, #168]	; 106ec <main@@Base+0xb8>
   10640:	ldr	r0, [pc, #168]	; 106f0 <main@@Base+0xbc>
   10644:	bl	105ec <fopen@plt>
   10648:	mov	r7, r5
   1064c:	mov	r6, r5
   10650:	mov	r4, r0
   10654:	mov	r0, r4
   10658:	bl	10628 <getc@plt>
   1065c:	cmp	r0, #195	; 0xc3
   10660:	beq	106ac <main@@Base+0x78>
   10664:	cmn	r0, #1
   10668:	bne	10654 <main@@Base+0x20>
   1066c:	mov	r0, r4
   10670:	bl	10610 <fclose@plt>
   10674:	mov	r2, r5
   10678:	mov	r1, #65	; 0x41
   1067c:	ldr	r0, [pc, #112]	; 106f4 <main@@Base+0xc0>
   10680:	bl	105e0 <printf@plt>
   10684:	mov	r2, r6
   10688:	mov	r1, #79	; 0x4f
   1068c:	ldr	r0, [pc, #96]	; 106f4 <main@@Base+0xc0>
   10690:	bl	105e0 <printf@plt>
   10694:	mov	r2, r7
   10698:	mov	r1, #67	; 0x43
   1069c:	ldr	r0, [pc, #84]	; 106f8 <main@@Base+0xc4>
   106a0:	bl	105e0 <printf@plt>
   106a4:	mov	r0, #0
   106a8:	pop	{r4, r5, r6, r7, r8, pc}
   106ac:	mov	r0, r4
   106b0:	bl	10628 <getc@plt>
   106b4:	bic	r3, r0, #32
   106b8:	cmp	r3, #131	; 0x83
   106bc:	beq	106e4 <main@@Base+0xb0>
   106c0:	cmp	r0, #0
   106c4:	beq	106e4 <main@@Base+0xb0>
   106c8:	cmp	r3, #149	; 0x95
   106cc:	beq	106dc <main@@Base+0xa8>
   106d0:	cmp	r3, #135	; 0x87
   106d4:	addeq	r7, r7, #1
   106d8:	b	10664 <main@@Base+0x30>
   106dc:	add	r6, r6, #1
   106e0:	b	10664 <main@@Base+0x30>
   106e4:	add	r5, r5, #1
   106e8:	b	10664 <main@@Base+0x30>
   106ec:	ldrdeq	r0, [r1], -r8
   106f0:	ldrdeq	r0, [r1], -ip
   106f4:	strdeq	r0, [r1], -r8
   106f8:	andeq	r0, r1, r0, lsl r9

000106fc <_start@@Base>:
   106fc:	mov	fp, #0
   10700:	mov	lr, #0
   10704:	pop	{r1}		; (ldr r1, [sp], #4)
   10708:	mov	r2, sp
   1070c:	push	{r2}		; (str r2, [sp, #-4]!)
   10710:	push	{r0}		; (str r0, [sp, #-4]!)
   10714:	ldr	ip, [pc, #16]	; 1072c <_start@@Base+0x30>
   10718:	push	{ip}		; (str ip, [sp, #-4]!)
   1071c:	ldr	r0, [pc, #12]	; 10730 <_start@@Base+0x34>
   10720:	ldr	r3, [pc, #12]	; 10734 <_start@@Base+0x38>
   10724:	bl	105f8 <__libc_start_main@plt>
   10728:	bl	1061c <abort@plt>
   1072c:	andeq	r0, r1, r8, asr #17
   10730:	andeq	r0, r1, r4, lsr r6
   10734:	andeq	r0, r1, r8, ror #16
   10738:	ldr	r3, [pc, #20]	; 10754 <_start@@Base+0x58>
   1073c:	ldr	r2, [pc, #20]	; 10758 <_start@@Base+0x5c>
   10740:	add	r3, pc, r3
   10744:	ldr	r2, [r3, r2]
   10748:	cmp	r2, #0
   1074c:	bxeq	lr
   10750:	b	10604 <__gmon_start__@plt>
   10754:			; <UNDEFINED> instruction: 0x000108b8
   10758:	andeq	r0, r0, r8, lsr #32
   1075c:	ldr	r3, [pc, #28]	; 10780 <_start@@Base+0x84>
   10760:	ldr	r0, [pc, #28]	; 10784 <_start@@Base+0x88>
   10764:	sub	r3, r3, r0
   10768:	cmp	r3, #6
   1076c:	bxls	lr
   10770:	ldr	r3, [pc, #16]	; 10788 <_start@@Base+0x8c>
   10774:	cmp	r3, #0
   10778:	bxeq	lr
   1077c:	bx	r3
   10780:	andeq	r1, r2, r7, lsr r0
   10784:	andeq	r1, r2, r4, lsr r0
   10788:	andeq	r0, r0, r0
   1078c:	ldr	r1, [pc, #36]	; 107b8 <_start@@Base+0xbc>
   10790:	ldr	r0, [pc, #36]	; 107bc <_start@@Base+0xc0>
   10794:	sub	r1, r1, r0
   10798:	asr	r1, r1, #2
   1079c:	add	r1, r1, r1, lsr #31
   107a0:	asrs	r1, r1, #1
   107a4:	bxeq	lr
   107a8:	ldr	r3, [pc, #16]	; 107c0 <_start@@Base+0xc4>
   107ac:	cmp	r3, #0
   107b0:	bxeq	lr
   107b4:	bx	r3
   107b8:	andeq	r1, r2, r4, lsr r0
   107bc:	andeq	r1, r2, r4, lsr r0
   107c0:	andeq	r0, r0, r0
   107c4:	push	{r4, lr}
   107c8:	ldr	r4, [pc, #24]	; 107e8 <_start@@Base+0xec>
   107cc:	ldrb	r3, [r4]
   107d0:	cmp	r3, #0
   107d4:	popne	{r4, pc}
   107d8:	bl	1075c <_start@@Base+0x60>
   107dc:	mov	r3, #1
   107e0:	strb	r3, [r4]
   107e4:	pop	{r4, pc}
   107e8:	andeq	r1, r2, r4, lsr r0
   107ec:	ldr	r0, [pc, #40]	; 1081c <_start@@Base+0x120>
   107f0:	ldr	r3, [r0]
   107f4:	cmp	r3, #0
   107f8:	bne	10800 <_start@@Base+0x104>
   107fc:	b	1078c <_start@@Base+0x90>
   10800:	ldr	r3, [pc, #24]	; 10820 <_start@@Base+0x124>
   10804:	cmp	r3, #0
   10808:	beq	107fc <_start@@Base+0x100>
   1080c:	push	{r4, lr}
   10810:	blx	r3
   10814:	pop	{r4, lr}
   10818:	b	1078c <_start@@Base+0x90>
   1081c:	andeq	r0, r2, r4, lsl pc
   10820:	andeq	r0, r0, r0

00010824 <in_array@@Base>:
   10824:	cmp	r2, #0
   10828:	blt	10858 <in_array@@Base+0x34>
   1082c:	ldr	r3, [r1]
   10830:	cmp	r0, r3
   10834:	beq	10860 <in_array@@Base+0x3c>
   10838:	mov	r3, #0
   1083c:	b	1084c <in_array@@Base+0x28>
   10840:	ldr	ip, [r1, #4]!
   10844:	cmp	ip, r0
   10848:	beq	10860 <in_array@@Base+0x3c>
   1084c:	add	r3, r3, #1
   10850:	cmp	r2, r3
   10854:	bge	10840 <in_array@@Base+0x1c>
   10858:	mov	r0, #0
   1085c:	bx	lr
   10860:	mov	r0, #1
   10864:	bx	lr

00010868 <__libc_csu_init@@Base>:
   10868:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1086c:	mov	r7, r0
   10870:	ldr	r6, [pc, #72]	; 108c0 <__libc_csu_init@@Base+0x58>
   10874:	ldr	r5, [pc, #72]	; 108c4 <__libc_csu_init@@Base+0x5c>
   10878:	add	r6, pc, r6
   1087c:	add	r5, pc, r5
   10880:	sub	r6, r6, r5
   10884:	mov	r8, r1
   10888:	mov	r9, r2
   1088c:	bl	105c0 <printf@plt-0x20>
   10890:	asrs	r6, r6, #2
   10894:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   10898:	mov	r4, #0
   1089c:	add	r4, r4, #1
   108a0:	ldr	r3, [r5], #4
   108a4:	mov	r2, r9
   108a8:	mov	r1, r8
   108ac:	mov	r0, r7
   108b0:	blx	r3
   108b4:	cmp	r6, r4
   108b8:	bne	1089c <__libc_csu_init@@Base+0x34>
   108bc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   108c0:	muleq	r1, r0, r6
   108c4:	andeq	r0, r1, r8, lsl #13

000108c8 <__libc_csu_fini@@Base>:
   108c8:	bx	lr

Disassembly of section .fini:

000108cc <.fini>:
   108cc:	push	{r3, lr}
   108d0:	pop	{r3, pc}
