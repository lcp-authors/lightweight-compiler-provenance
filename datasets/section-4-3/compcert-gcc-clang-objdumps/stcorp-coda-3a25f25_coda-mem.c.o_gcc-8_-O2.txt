
../compcert-repos/stcorp-coda-3a25f25/CMakeFiles/coda_static.dir/libcoda/coda-mem.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <coda_mem_empty_record>:
   0:	cmp	r0, #10
   4:	strd	r4, [sp, #-16]!
   8:	str	r6, [sp, #8]
   c:	str	lr, [sp, #12]
  10:	bhi	80 <coda_mem_empty_record+0x80>
  14:	ldr	r3, [pc, #132]	; a0 <coda_mem_empty_record+0xa0>
  18:	mrc	15, 0, r4, cr13, cr0, {3}
  1c:	mov	r6, r0
  20:	add	r4, r4, r3
  24:	ldr	r5, [r4, r0, lsl #2]
  28:	cmp	r5, #0
  2c:	beq	44 <coda_mem_empty_record+0x44>
  30:	mov	r0, r5
  34:	ldrd	r4, [sp]
  38:	ldr	r6, [sp, #8]
  3c:	add	sp, sp, #12
  40:	pop	{pc}		; (ldr pc, [sp], #4)
  44:	bl	0 <coda_type_empty_record>
  48:	mov	r1, r5
  4c:	bl	0 <coda_mem_record_new>
  50:	cmp	r0, #0
  54:	mov	r5, r0
  58:	str	r0, [r4, r6, lsl #2]
  5c:	bne	30 <coda_mem_empty_record+0x30>
  60:	movw	r3, #0
  64:	movt	r3, #0
  68:	movw	r1, #0
  6c:	movt	r1, #0
  70:	movw	r0, #0
  74:	movt	r0, #0
  78:	mov	r2, #53	; 0x35
  7c:	bl	0 <__assert_fail>
  80:	movw	r3, #0
  84:	movt	r3, #0
  88:	movw	r1, #0
  8c:	movt	r1, #0
  90:	movw	r0, #0
  94:	movt	r0, #0
  98:	mov	r2, #49	; 0x31
  9c:	bl	0 <__assert_fail>
  a0:	.word	0x00000000

000000a4 <coda_no_data_singleton>:
  a4:	cmp	r0, #10
  a8:	str	r4, [sp, #-8]!
  ac:	str	lr, [sp, #4]
  b0:	bhi	110 <coda_no_data_singleton+0x6c>
  b4:	ldr	r2, [pc, #112]	; 12c <coda_no_data_singleton+0x88>
  b8:	mrc	15, 0, r4, cr13, cr0, {3}
  bc:	add	r4, r4, r2
  c0:	add	r4, r4, r0, lsl #2
  c4:	ldr	r3, [r4, #44]	; 0x2c
  c8:	cmp	r3, #0
  cc:	beq	e0 <coda_no_data_singleton+0x3c>
  d0:	ldr	r4, [sp]
  d4:	add	sp, sp, #4
  d8:	mov	r0, r3
  dc:	pop	{pc}		; (ldr pc, [sp], #4)
  e0:	bl	0 <coda_mem_no_data_new>
  e4:	cmp	r0, #0
  e8:	mov	r3, r0
  ec:	str	r0, [r4, #44]	; 0x2c
  f0:	bne	d0 <coda_no_data_singleton+0x2c>
  f4:	movw	r1, #0
  f8:	movt	r1, #0
  fc:	ldr	r3, [pc, #44]	; 130 <coda_no_data_singleton+0x8c>
 100:	movw	r0, #0
 104:	movt	r0, #0
 108:	mov	r2, #65	; 0x41
 10c:	bl	0 <__assert_fail>
 110:	movw	r1, #0
 114:	movt	r1, #0
 118:	ldr	r3, [pc, #16]	; 130 <coda_no_data_singleton+0x8c>
 11c:	movw	r0, #0
 120:	movt	r0, #0
 124:	mov	r2, #61	; 0x3d
 128:	bl	0 <__assert_fail>
 12c:	.word	0x00000000
 130:	.word	0x00000018

00000134 <coda_mem_done>:
 134:	strd	r4, [sp, #-24]!	; 0xffffffe8
 138:	ldr	r5, [pc, #116]	; 1b4 <coda_mem_done+0x80>
 13c:	strd	r6, [sp, #8]
 140:	mov	r7, #0
 144:	str	r8, [sp, #16]
 148:	mrc	15, 0, r8, cr13, cr0, {3}
 14c:	str	lr, [sp, #20]
 150:	add	r4, r5, r8
 154:	add	r6, r4, #44	; 0x2c
 158:	ldr	r3, [r4], #4
 15c:	subs	r0, r3, #0
 160:	beq	168 <coda_mem_done+0x34>
 164:	bl	0 <coda_mem_type_delete>
 168:	cmp	r4, r6
 16c:	str	r7, [r4, #-4]
 170:	bne	158 <coda_mem_done+0x24>
 174:	add	r5, r5, r8
 178:	mov	r6, #0
 17c:	add	r4, r5, #44	; 0x2c
 180:	add	r5, r5, #88	; 0x58
 184:	ldr	r3, [r4], #4
 188:	subs	r0, r3, #0
 18c:	beq	194 <coda_mem_done+0x60>
 190:	bl	0 <coda_mem_type_delete>
 194:	cmp	r4, r5
 198:	str	r6, [r4, #-4]
 19c:	bne	184 <coda_mem_done+0x50>
 1a0:	ldrd	r4, [sp]
 1a4:	ldrd	r6, [sp, #8]
 1a8:	ldr	r8, [sp, #16]
 1ac:	add	sp, sp, #20
 1b0:	pop	{pc}		; (ldr pc, [sp], #4)
 1b4:	.word	0x00000000
