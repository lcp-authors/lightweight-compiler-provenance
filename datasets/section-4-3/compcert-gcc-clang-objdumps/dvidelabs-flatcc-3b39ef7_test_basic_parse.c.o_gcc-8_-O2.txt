
../compcert-repos/dvidelabs-flatcc-3b39ef7/test/json_test/CMakeFiles/test_basic_parse.dir/test_basic_parse.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <test>:
       0:	strd	r4, [sp, #-36]!	; 0xffffffdc
       4:	mov	ip, #0
       8:	mov	r5, r2
       c:	strd	r6, [sp, #8]
      10:	mov	r2, ip
      14:	mov	r7, r1
      18:	strd	r8, [sp, #16]
      1c:	mov	r9, r3
      20:	mov	r3, ip
      24:	strd	sl, [sp, #24]
      28:	mov	r6, r0
      2c:	str	lr, [sp, #32]
      30:	sub	sp, sp, #116	; 0x74
      34:	mov	lr, #1
      38:	str	ip, [sp, #68]	; 0x44
      3c:	str	r1, [sp, #72]	; 0x48
      40:	movw	r1, #0
      44:	movt	r1, #0
      48:	str	ip, [sp, #76]	; 0x4c
      4c:	str	ip, [sp, #80]	; 0x50
      50:	str	lr, [sp, #84]	; 0x54
      54:	str	ip, [sp, #88]	; 0x58
      58:	str	ip, [sp, #92]	; 0x5c
      5c:	str	ip, [sp, #96]	; 0x60
      60:	str	ip, [sp, #100]	; 0x64
      64:	str	ip, [sp, #104]	; 0x68
      68:	str	ip, [sp, #108]	; 0x6c
      6c:	bl	0 <flatcc_builder_start_buffer>
      70:	sub	r3, r5, r7
      74:	cmp	r3, #1
      78:	ble	8c <test+0x8c>
      7c:	ldrb	r3, [r7]
      80:	cmp	r3, #32
      84:	bhi	a0 <test+0xa0>
      88:	beq	418 <test+0x418>
      8c:	mov	r1, r7
      90:	mov	r2, r5
      94:	add	r0, sp, #68	; 0x44
      98:	bl	0 <flatcc_json_parser_space_ext>
      9c:	mov	r7, r0
      a0:	cmp	r5, r7
      a4:	beq	834 <test+0x834>
      a8:	bls	b8 <test+0xb8>
      ac:	ldrb	r3, [r7]
      b0:	cmp	r3, #123	; 0x7b
      b4:	beq	17c <test+0x17c>
      b8:	movw	r8, #0
      bc:	movt	r8, #0
      c0:	ldr	r0, [r8]
      c4:	movw	r1, #0
      c8:	movt	r1, #0
      cc:	mov	r2, #123	; 0x7b
      d0:	bl	0 <fprintf>
      d4:	mov	r1, r7
      d8:	mov	r2, r5
      dc:	add	r0, sp, #68	; 0x44
      e0:	mov	r3, #17
      e4:	bl	0 <flatcc_json_parser_set_error>
      e8:	ldr	r7, [r8]
      ec:	mov	r4, r0
      f0:	ldr	r0, [sp, #92]	; 0x5c
      f4:	cmp	r0, #0
      f8:	bne	13c <test+0x13c>
      fc:	movw	r0, #0
     100:	movt	r0, #0
     104:	mov	r3, r7
     108:	mov	r2, #15
     10c:	mov	r1, #1
     110:	bl	0 <fwrite>
     114:	ldr	r3, [sp, #92]	; 0x5c
     118:	mov	r0, r4
     11c:	str	r3, [r9]
     120:	add	sp, sp, #116	; 0x74
     124:	ldrd	r4, [sp]
     128:	ldrd	r6, [sp, #8]
     12c:	ldrd	r8, [sp, #16]
     130:	ldrd	sl, [sp, #24]
     134:	add	sp, sp, #32
     138:	pop	{pc}		; (ldr pc, [sp], #4)
     13c:	ldr	r3, [sp, #72]	; 0x48
     140:	ldr	r8, [sp, #84]	; 0x54
     144:	ldr	r5, [sp, #104]	; 0x68
     148:	sub	r5, r5, r3
     14c:	add	r5, r5, #1
     150:	bl	0 <flatcc_json_parser_error_string>
     154:	mov	r3, r5
     158:	mov	r2, r8
     15c:	str	r0, [sp]
     160:	movw	r1, #0
     164:	movt	r1, #0
     168:	mov	r0, r7
     16c:	bl	0 <fprintf>
     170:	mov	r0, r6
     174:	bl	0 <flatcc_builder_reset>
     178:	b	114 <test+0x114>
     17c:	add	r4, r7, #1
     180:	sub	r3, r5, r4
     184:	cmp	r3, #1
     188:	ble	19c <test+0x19c>
     18c:	ldrb	r3, [r7, #1]
     190:	cmp	r3, #32
     194:	bhi	1b0 <test+0x1b0>
     198:	beq	1114 <test+0x1114>
     19c:	mov	r1, r4
     1a0:	mov	r2, r5
     1a4:	add	r0, sp, #68	; 0x44
     1a8:	bl	0 <flatcc_json_parser_space_ext>
     1ac:	mov	r4, r0
     1b0:	cmp	r5, r4
     1b4:	beq	ce0 <test+0xce0>
     1b8:	mov	r1, #11
     1bc:	mov	r0, r6
     1c0:	bl	0 <flatcc_builder_start_table>
     1c4:	str	r6, [sp, #24]
     1c8:	str	r9, [sp, #28]
     1cc:	ldrb	r3, [r4]
     1d0:	cmp	r3, #34	; 0x22
     1d4:	moveq	r3, #0
     1d8:	addeq	r4, r4, #1
     1dc:	streq	r3, [sp, #80]	; 0x50
     1e0:	beq	1f4 <test+0x1f4>
     1e4:	cmp	r3, #46	; 0x2e
     1e8:	movne	r3, #1
     1ec:	strne	r3, [sp, #80]	; 0x50
     1f0:	beq	10ec <test+0x10ec>
     1f4:	sub	ip, r5, r4
     1f8:	cmp	ip, #8
     1fc:	bls	6c8 <test+0x6c8>
     200:	ldrb	r2, [r4, #7]
     204:	mov	r3, #0
     208:	mov	lr, r3
     20c:	ldrb	r0, [r4, #6]
     210:	orr	r1, r2, r0, lsl #8
     214:	ldrb	r2, [r4, #5]
     218:	mov	r0, lr
     21c:	orr	r1, r1, r2, lsl #16
     220:	ldrb	r2, [r4, #4]
     224:	mov	lr, r0
     228:	orr	r2, r1, r2, lsl #24
     22c:	ldrb	r0, [r4, #3]
     230:	orr	r3, lr, r0
     234:	ldrb	r0, [r4, #2]
     238:	orr	r3, r3, r0, lsl #8
     23c:	ldrb	r0, [r4, #1]
     240:	mov	sl, r2
     244:	cmp	ip, #8
     248:	addgt	ip, r4, #8
     24c:	movle	ip, r5
     250:	ldrb	r2, [r4]
     254:	orr	r0, r3, r0, lsl #16
     258:	orr	fp, r0, r2, lsl #24
     25c:	add	r3, pc, #684	; 0x2ac
     260:	ldrd	r2, [r3]
     264:	lsr	r8, sl, #16
     268:	lsl	r8, r8, #16
     26c:	cmp	fp, r3
     270:	cmpeq	r8, r2
     274:	bhi	42c <test+0x42c>
     278:	and	r1, sl, #-16777216	; 0xff000000
     27c:	add	r3, pc, #660	; 0x294
     280:	ldrd	r2, [r3]
     284:	str	r1, [sp, #16]
     288:	str	fp, [sp, #20]
     28c:	ldrd	r0, [sp, #16]
     290:	cmp	r1, r3
     294:	cmpeq	r0, r2
     298:	bne	1370 <test+0x1370>
     29c:	ldr	r3, [sp, #80]	; 0x50
     2a0:	add	r0, r4, #5
     2a4:	cmp	r3, #0
     2a8:	bne	7a0 <test+0x7a0>
     2ac:	cmp	r0, r5
     2b0:	beq	1478 <test+0x1478>
     2b4:	ldrb	r2, [r4, #5]
     2b8:	cmp	r2, #34	; 0x22
     2bc:	ldrne	r6, [sp, #24]
     2c0:	bne	2e0 <test+0x2e0>
     2c4:	b	c28 <test+0xc28>
     2c8:	add	r0, r3, #1
     2cc:	cmp	r5, r0
     2d0:	beq	c30 <test+0xc30>
     2d4:	ldrb	r2, [r3, #1]
     2d8:	cmp	r2, #34	; 0x22
     2dc:	beq	c24 <test+0xc24>
     2e0:	cmp	r2, #92	; 0x5c
     2e4:	mov	r3, r0
     2e8:	bne	2c8 <test+0x2c8>
     2ec:	sub	r2, r5, r0
     2f0:	add	r3, r0, #1
     2f4:	cmp	r2, #1
     2f8:	bgt	2c8 <test+0x2c8>
     2fc:	cmp	r5, r0
     300:	str	r6, [sp, #24]
     304:	beq	314 <test+0x314>
     308:	ldrb	r3, [r0]
     30c:	cmp	r3, #34	; 0x22
     310:	beq	c28 <test+0xc28>
     314:	mov	r1, r0
     318:	mov	r3, #20
     31c:	mov	r2, r5
     320:	add	r0, sp, #68	; 0x44
     324:	bl	0 <flatcc_json_parser_set_error>
     328:	sub	r3, r5, r0
     32c:	cmp	r3, #1
     330:	ble	344 <test+0x344>
     334:	ldrb	r3, [r0]
     338:	cmp	r3, #32
     33c:	bhi	354 <test+0x354>
     340:	beq	d08 <test+0xd08>
     344:	mov	r1, r0
     348:	mov	r2, r5
     34c:	add	r0, sp, #68	; 0x44
     350:	bl	0 <flatcc_json_parser_space_ext>
     354:	cmp	r5, r0
     358:	beq	82c <test+0x82c>
     35c:	bls	118c <test+0x118c>
     360:	ldrb	r3, [r0]
     364:	cmp	r3, #58	; 0x3a
     368:	bne	118c <test+0x118c>
     36c:	add	r4, r0, #1
     370:	sub	r3, r5, r4
     374:	cmp	r3, #1
     378:	ble	38c <test+0x38c>
     37c:	ldrb	r3, [r0, #1]
     380:	cmp	r3, #32
     384:	bhi	3a0 <test+0x3a0>
     388:	beq	d1c <test+0xd1c>
     38c:	mov	r1, r4
     390:	mov	r2, r5
     394:	add	r0, sp, #68	; 0x44
     398:	bl	0 <flatcc_json_parser_space_ext>
     39c:	mov	r4, r0
     3a0:	cmp	r5, r4
     3a4:	beq	cd8 <test+0xcd8>
     3a8:	mov	r3, #1
     3ac:	mov	r1, #0
     3b0:	ldr	r0, [sp, #24]
     3b4:	mov	r2, r3
     3b8:	bl	0 <flatcc_builder_table_add>
     3bc:	subs	r7, r0, #0
     3c0:	beq	400 <test+0x400>
     3c4:	mov	lr, #0
     3c8:	add	ip, sp, #56	; 0x38
     3cc:	mov	r0, #0
     3d0:	mov	r1, #0
     3d4:	add	r3, sp, #52	; 0x34
     3d8:	mov	r2, r5
     3dc:	str	lr, [sp, #52]	; 0x34
     3e0:	strd	r0, [sp, #56]	; 0x38
     3e4:	mov	r1, r4
     3e8:	add	r0, sp, #68	; 0x44
     3ec:	strb	lr, [r7]
     3f0:	str	ip, [sp]
     3f4:	bl	0 <flatcc_json_parser_integer>
     3f8:	cmp	r4, r0
     3fc:	bne	be4 <test+0xbe4>
     400:	ldr	r6, [sp, #24]
     404:	movw	r3, #0
     408:	movt	r3, #0
     40c:	ldr	r7, [r3]
     410:	ldr	r9, [sp, #28]
     414:	b	f0 <test+0xf0>
     418:	ldrb	r3, [r7, #1]
     41c:	cmp	r3, #32
     420:	addhi	r7, r7, #1
     424:	bls	8c <test+0x8c>
     428:	b	a0 <test+0xa0>
     42c:	mov	r3, #0
     430:	add	r1, pc, #232	; 0xe8
     434:	ldrd	r0, [r1]
     438:	str	r3, [sp, #8]
     43c:	str	fp, [sp, #12]
     440:	ldrd	r2, [sp, #8]
     444:	cmp	r3, r1
     448:	cmpeq	r2, r0
     44c:	bhi	6f8 <test+0x6f8>
     450:	add	r3, pc, #208	; 0xd0
     454:	ldrd	r2, [r3]
     458:	cmp	fp, r3
     45c:	cmpeq	sl, r2
     460:	bls	860 <test+0x860>
     464:	add	r3, pc, #196	; 0xc4
     468:	ldrd	r2, [r3]
     46c:	cmp	fp, r3
     470:	cmpeq	sl, r2
     474:	bne	1370 <test+0x1370>
     478:	sub	r3, r5, ip
     47c:	cmp	r3, #8
     480:	bls	e64 <test+0xe64>
     484:	mov	r3, #0
     488:	mov	lr, r3
     48c:	ldrb	r2, [ip, #3]
     490:	orr	lr, lr, r2
     494:	ldrb	r2, [ip, #2]
     498:	orr	lr, lr, r2, lsl #8
     49c:	ldrb	r2, [ip, #1]
     4a0:	orr	lr, lr, r2, lsl #16
     4a4:	ldrb	r0, [ip]
     4a8:	mov	r1, #0
     4ac:	str	r1, [sp, #32]
     4b0:	add	r3, pc, #128	; 0x80
     4b4:	ldrd	r2, [r3]
     4b8:	orr	r1, lr, r0, lsl #24
     4bc:	str	r1, [sp, #36]	; 0x24
     4c0:	ldrd	r0, [sp, #32]
     4c4:	cmp	r1, r3
     4c8:	cmpeq	r0, r2
     4cc:	bhi	e94 <test+0xe94>
     4d0:	add	r3, pc, #104	; 0x68
     4d4:	ldrd	r2, [r3]
     4d8:	cmp	r1, r3
     4dc:	cmpeq	r0, r2
     4e0:	bne	14e8 <test+0x14e8>
     4e4:	ldr	r3, [sp, #80]	; 0x50
     4e8:	add	r0, ip, #4
     4ec:	cmp	r3, #0
     4f0:	bne	11b4 <test+0x11b4>
     4f4:	cmp	r0, r5
     4f8:	beq	1528 <test+0x1528>
     4fc:	ldrb	r2, [ip, #4]
     500:	cmp	r2, #34	; 0x22
     504:	ldrne	r6, [sp, #24]
     508:	bne	570 <test+0x570>
     50c:	b	13e8 <test+0x13e8>
     510:	.word	0x6e63ffff
     514:	.word	0x7365636f
     518:	.word	0x74000000
     51c:	.word	0x66697273
     520:	.word	0xffffffff
     524:	.word	0x7a756c74
     528:	.word	0x6e64731f
     52c:	.word	0x7365636f
     530:	.word	0x6e647320
     534:	.word	0x7365636f
     538:	.word	0xffffffff
     53c:	.word	0x6c656673
     540:	.word	0x00000000
     544:	.word	0x6c656164
     548:	.word	0x00000000
     54c:	.word	0x7a756c75
     550:	.word	0x6e640000
     554:	.word	0x7365636f
     558:	add	r0, r3, #1
     55c:	cmp	r5, r0
     560:	beq	13f8 <test+0x13f8>
     564:	ldrb	r2, [r3, #1]
     568:	cmp	r2, #34	; 0x22
     56c:	beq	13e4 <test+0x13e4>
     570:	cmp	r2, #92	; 0x5c
     574:	mov	r3, r0
     578:	bne	558 <test+0x558>
     57c:	sub	r2, r5, r0
     580:	add	r3, r0, #1
     584:	cmp	r2, #1
     588:	bgt	558 <test+0x558>
     58c:	cmp	r0, r5
     590:	str	r6, [sp, #24]
     594:	beq	5a4 <test+0x5a4>
     598:	ldrb	r3, [r0]
     59c:	cmp	r3, #34	; 0x22
     5a0:	beq	13e8 <test+0x13e8>
     5a4:	mov	r1, r0
     5a8:	mov	r3, #20
     5ac:	mov	r2, r5
     5b0:	add	r0, sp, #68	; 0x44
     5b4:	bl	0 <flatcc_json_parser_set_error>
     5b8:	sub	r3, r5, r0
     5bc:	cmp	r3, #1
     5c0:	ble	5d4 <test+0x5d4>
     5c4:	ldrb	r3, [r0]
     5c8:	cmp	r3, #32
     5cc:	bhi	5e4 <test+0x5e4>
     5d0:	beq	1434 <test+0x1434>
     5d4:	mov	r1, r0
     5d8:	mov	r2, r5
     5dc:	add	r0, sp, #68	; 0x44
     5e0:	bl	0 <flatcc_json_parser_space_ext>
     5e4:	cmp	r5, r0
     5e8:	beq	82c <test+0x82c>
     5ec:	bls	118c <test+0x118c>
     5f0:	ldrb	r3, [r0]
     5f4:	cmp	r3, #58	; 0x3a
     5f8:	bne	118c <test+0x118c>
     5fc:	add	r4, r0, #1
     600:	sub	r3, r5, r4
     604:	cmp	r3, #1
     608:	ble	61c <test+0x61c>
     60c:	ldrb	r3, [r0, #1]
     610:	cmp	r3, #32
     614:	bhi	630 <test+0x630>
     618:	beq	1448 <test+0x1448>
     61c:	mov	r1, r4
     620:	mov	r2, r5
     624:	add	r0, sp, #68	; 0x44
     628:	bl	0 <flatcc_json_parser_space_ext>
     62c:	mov	r4, r0
     630:	cmp	r5, r4
     634:	beq	cd8 <test+0xcd8>
     638:	mov	r3, #8
     63c:	mov	r1, #3
     640:	ldr	r0, [sp, #24]
     644:	mov	r2, r3
     648:	bl	0 <flatcc_builder_table_add>
     64c:	subs	r3, r0, #0
     650:	str	r3, [sp, #40]	; 0x28
     654:	beq	400 <test+0x400>
     658:	ldr	r0, [sp, #40]	; 0x28
     65c:	mov	r2, #0
     660:	add	ip, sp, #56	; 0x38
     664:	mov	r6, #0
     668:	mov	r7, #0
     66c:	add	r3, sp, #52	; 0x34
     670:	mov	r1, r4
     674:	str	r2, [sp, #52]	; 0x34
     678:	mov	r2, r5
     67c:	strd	r6, [sp, #56]	; 0x38
     680:	strd	r6, [r0]
     684:	add	r0, sp, #68	; 0x44
     688:	str	ip, [sp]
     68c:	bl	0 <flatcc_json_parser_integer>
     690:	cmp	r4, r0
     694:	beq	400 <test+0x400>
     698:	ldr	r1, [sp, #52]	; 0x34
     69c:	ldrd	r2, [sp, #56]	; 0x38
     6a0:	cmp	r1, #0
     6a4:	beq	1480 <test+0x1480>
     6a8:	cmp	r3, #-2147483648	; 0x80000000
     6ac:	cmpeq	r2, #0
     6b0:	bhi	12e0 <test+0x12e0>
     6b4:	ldr	r1, [sp, #40]	; 0x28
     6b8:	rsbs	r2, r2, #0
     6bc:	rsc	r3, r3, #0
     6c0:	strd	r2, [r1]
     6c4:	b	a78 <test+0xa78>
     6c8:	sub	r3, ip, #1
     6cc:	cmp	r3, #7
     6d0:	ldrls	pc, [pc, r3, lsl #2]
     6d4:	b	1370 <test+0x1370>
     6d8:	.word	0x00001078
     6dc:	.word	0x0000106c
     6e0:	.word	0x00001060
     6e4:	.word	0x00001054
     6e8:	.word	0x00001098
     6ec:	.word	0x0000108c
     6f0:	.word	0x00001048
     6f4:	.word	0x00000200
     6f8:	sub	r1, pc, #440	; 0x1b8
     6fc:	ldrd	r0, [r1]
     700:	ldrd	r2, [sp, #8]
     704:	cmp	r3, r1
     708:	cmpeq	r2, r0
     70c:	bne	1370 <test+0x1370>
     710:	ldr	r3, [sp, #80]	; 0x50
     714:	add	r0, r4, #4
     718:	cmp	r3, #0
     71c:	bne	8e8 <test+0x8e8>
     720:	cmp	r0, r5
     724:	beq	14d8 <test+0x14d8>
     728:	ldrb	r2, [r4, #4]
     72c:	cmp	r2, #34	; 0x22
     730:	ldrne	r6, [sp, #24]
     734:	bne	754 <test+0x754>
     738:	b	110c <test+0x110c>
     73c:	add	r0, r3, #1
     740:	cmp	r5, r0
     744:	beq	1128 <test+0x1128>
     748:	ldrb	r2, [r3, #1]
     74c:	cmp	r2, #34	; 0x22
     750:	beq	1108 <test+0x1108>
     754:	cmp	r2, #92	; 0x5c
     758:	mov	r3, r0
     75c:	bne	73c <test+0x73c>
     760:	sub	r2, r5, r0
     764:	add	r3, r0, #1
     768:	cmp	r2, #1
     76c:	bgt	73c <test+0x73c>
     770:	cmp	r5, r0
     774:	str	r6, [sp, #24]
     778:	beq	788 <test+0x788>
     77c:	ldrb	r3, [r0]
     780:	cmp	r3, #34	; 0x22
     784:	beq	110c <test+0x110c>
     788:	mov	r1, r0
     78c:	mov	r3, #20
     790:	mov	r2, r5
     794:	add	r0, sp, #68	; 0x44
     798:	bl	0 <flatcc_json_parser_set_error>
     79c:	b	948 <test+0x948>
     7a0:	cmp	r0, r5
     7a4:	beq	1470 <test+0x1470>
     7a8:	ldrb	r3, [r4, #5]
     7ac:	cmp	r3, #32
     7b0:	bls	328 <test+0x328>
     7b4:	ldr	r6, [sp, #24]
     7b8:	mov	ip, r0
     7bc:	sub	r2, r3, #48	; 0x30
     7c0:	cmp	r3, #46	; 0x2e
     7c4:	cmpne	r3, #95	; 0x5f
     7c8:	uxtb	r2, r2
     7cc:	add	r1, ip, #1
     7d0:	mov	r0, ip
     7d4:	beq	808 <test+0x808>
     7d8:	orr	ip, r3, #32
     7dc:	tst	r3, #128	; 0x80
     7e0:	sub	ip, ip, #97	; 0x61
     7e4:	bne	808 <test+0x808>
     7e8:	cmp	r2, #9
     7ec:	uxtb	ip, ip
     7f0:	bls	808 <test+0x808>
     7f4:	cmp	ip, #25
     7f8:	bls	804 <test+0x804>
     7fc:	str	r6, [sp, #24]
     800:	b	328 <test+0x328>
     804:	add	r1, r0, #1
     808:	cmp	r5, r1
     80c:	mov	r0, r1
     810:	mov	ip, r1
     814:	beq	1130 <test+0x1130>
     818:	ldrb	r2, [r1]
     81c:	cmp	r2, #32
     820:	bls	1130 <test+0x1130>
     824:	mov	r3, r2
     828:	b	7bc <test+0x7bc>
     82c:	ldr	r6, [sp, #24]
     830:	ldr	r9, [sp, #28]
     834:	movw	r7, #0
     838:	movt	r7, #0
     83c:	movw	r0, #0
     840:	movt	r0, #0
     844:	ldr	r3, [r7]
     848:	mov	r2, #13
     84c:	mov	r1, #1
     850:	bl	0 <fwrite>
     854:	mov	r4, r5
     858:	ldr	r7, [r7]
     85c:	b	f0 <test+0xf0>
     860:	sub	r3, pc, #792	; 0x318
     864:	ldrd	r2, [r3]
     868:	cmp	fp, r3
     86c:	cmpeq	r8, r2
     870:	bne	1370 <test+0x1370>
     874:	ldr	r3, [sp, #80]	; 0x50
     878:	add	r0, r4, #6
     87c:	cmp	r3, #0
     880:	beq	d30 <test+0xd30>
     884:	cmp	r0, r5
     888:	beq	1504 <test+0x1504>
     88c:	ldrb	r3, [r4, #6]
     890:	cmp	r3, #32
     894:	bls	dac <test+0xdac>
     898:	ldr	r6, [sp, #24]
     89c:	mov	ip, r0
     8a0:	sub	r2, r3, #48	; 0x30
     8a4:	cmp	r3, #46	; 0x2e
     8a8:	cmpne	r3, #95	; 0x5f
     8ac:	uxtb	r2, r2
     8b0:	add	r1, ip, #1
     8b4:	mov	r0, ip
     8b8:	beq	10c8 <test+0x10c8>
     8bc:	orr	ip, r3, #32
     8c0:	tst	r3, #128	; 0x80
     8c4:	sub	ip, ip, #97	; 0x61
     8c8:	bne	10c8 <test+0x10c8>
     8cc:	cmp	r2, #9
     8d0:	uxtb	ip, ip
     8d4:	bls	10c8 <test+0x10c8>
     8d8:	cmp	ip, #25
     8dc:	bls	10c4 <test+0x10c4>
     8e0:	str	r6, [sp, #24]
     8e4:	b	dac <test+0xdac>
     8e8:	cmp	r0, r5
     8ec:	beq	14e0 <test+0x14e0>
     8f0:	ldrb	r3, [r4, #4]
     8f4:	cmp	r3, #32
     8f8:	bls	948 <test+0x948>
     8fc:	ldr	r6, [sp, #24]
     900:	mov	ip, r0
     904:	sub	r2, r3, #48	; 0x30
     908:	cmp	r3, #46	; 0x2e
     90c:	cmpne	r3, #95	; 0x5f
     910:	uxtb	r2, r2
     914:	add	r1, ip, #1
     918:	mov	r0, ip
     91c:	beq	b98 <test+0xb98>
     920:	orr	ip, r3, #32
     924:	tst	r3, #128	; 0x80
     928:	sub	ip, ip, #97	; 0x61
     92c:	bne	b98 <test+0xb98>
     930:	cmp	r2, #9
     934:	uxtb	ip, ip
     938:	bls	b98 <test+0xb98>
     93c:	cmp	ip, #25
     940:	bls	b94 <test+0xb94>
     944:	str	r6, [sp, #24]
     948:	sub	r3, r5, r0
     94c:	cmp	r3, #1
     950:	ble	964 <test+0x964>
     954:	ldrb	r3, [r0]
     958:	cmp	r3, #32
     95c:	bhi	974 <test+0x974>
     960:	beq	1164 <test+0x1164>
     964:	mov	r1, r0
     968:	mov	r2, r5
     96c:	add	r0, sp, #68	; 0x44
     970:	bl	0 <flatcc_json_parser_space_ext>
     974:	cmp	r5, r0
     978:	beq	82c <test+0x82c>
     97c:	bls	118c <test+0x118c>
     980:	ldrb	r3, [r0]
     984:	cmp	r3, #58	; 0x3a
     988:	bne	118c <test+0x118c>
     98c:	add	r4, r0, #1
     990:	sub	r3, r5, r4
     994:	cmp	r3, #1
     998:	ble	9ac <test+0x9ac>
     99c:	ldrb	r3, [r0, #1]
     9a0:	cmp	r3, #32
     9a4:	bhi	9c0 <test+0x9c0>
     9a8:	beq	1178 <test+0x1178>
     9ac:	mov	r1, r4
     9b0:	mov	r2, r5
     9b4:	add	r0, sp, #68	; 0x44
     9b8:	bl	0 <flatcc_json_parser_space_ext>
     9bc:	mov	r4, r0
     9c0:	cmp	r5, r4
     9c4:	beq	cd8 <test+0xcd8>
     9c8:	ldrb	r3, [r4]
     9cc:	cmp	r3, #34	; 0x22
     9d0:	addeq	r7, r4, #1
     9d4:	beq	9f0 <test+0x9f0>
     9d8:	mov	r1, r4
     9dc:	mov	r3, #16
     9e0:	mov	r2, r5
     9e4:	add	r0, sp, #68	; 0x44
     9e8:	bl	0 <flatcc_json_parser_set_error>
     9ec:	mov	r7, r0
     9f0:	mov	r2, r5
     9f4:	mov	r1, r7
     9f8:	add	r0, sp, #68	; 0x44
     9fc:	bl	0 <flatcc_json_parser_string_part>
     a00:	cmp	r5, r0
     a04:	mov	r4, r0
     a08:	beq	400 <test+0x400>
     a0c:	ldrb	r3, [r0]
     a10:	sub	r2, r0, r7
     a14:	cmp	r3, #34	; 0x22
     a18:	bne	c38 <test+0xc38>
     a1c:	mov	r1, r7
     a20:	ldr	r0, [sp, #24]
     a24:	bl	0 <flatcc_builder_create_string>
     a28:	mov	r7, r0
     a2c:	cmp	r7, #0
     a30:	beq	400 <test+0x400>
     a34:	mov	r1, #10
     a38:	ldr	r0, [sp, #24]
     a3c:	bl	0 <flatcc_builder_table_add_offset>
     a40:	cmp	r0, #0
     a44:	beq	400 <test+0x400>
     a48:	cmp	r4, r5
     a4c:	str	r7, [r0]
     a50:	beq	a64 <test+0xa64>
     a54:	ldrb	r3, [r4]
     a58:	cmp	r3, #34	; 0x22
     a5c:	addeq	r0, r4, #1
     a60:	beq	a78 <test+0xa78>
     a64:	mov	r1, r4
     a68:	mov	r3, #20
     a6c:	mov	r2, r5
     a70:	add	r0, sp, #68	; 0x44
     a74:	bl	0 <flatcc_json_parser_set_error>
     a78:	sub	r3, r5, r0
     a7c:	cmp	r3, #1
     a80:	ble	a94 <test+0xa94>
     a84:	ldrb	r3, [r0]
     a88:	cmp	r3, #32
     a8c:	bhi	aa4 <test+0xaa4>
     a90:	beq	bbc <test+0xbbc>
     a94:	mov	r1, r0
     a98:	mov	r2, r5
     a9c:	add	r0, sp, #68	; 0x44
     aa0:	bl	0 <flatcc_json_parser_space_ext>
     aa4:	cmp	r5, r0
     aa8:	beq	82c <test+0x82c>
     aac:	ldrb	r3, [r0]
     ab0:	cmp	r3, #44	; 0x2c
     ab4:	bne	13b4 <test+0x13b4>
     ab8:	add	r4, r0, #1
     abc:	sub	r3, r5, r4
     ac0:	cmp	r3, #1
     ac4:	ble	ad8 <test+0xad8>
     ac8:	ldrb	r3, [r0, #1]
     acc:	cmp	r3, #32
     ad0:	bhi	aec <test+0xaec>
     ad4:	beq	bd0 <test+0xbd0>
     ad8:	mov	r1, r4
     adc:	mov	r2, r5
     ae0:	add	r0, sp, #68	; 0x44
     ae4:	bl	0 <flatcc_json_parser_space_ext>
     ae8:	mov	r4, r0
     aec:	cmp	r5, r4
     af0:	beq	cd8 <test+0xcd8>
     af4:	ldrb	r3, [r4]
     af8:	cmp	r3, #125	; 0x7d
     afc:	bne	1cc <test+0x1cc>
     b00:	cmp	r5, r4
     b04:	ldr	r6, [sp, #24]
     b08:	movls	r8, r4
     b0c:	ldr	r9, [sp, #28]
     b10:	bls	1300 <test+0x1300>
     b14:	mov	r0, r6
     b18:	add	r7, r4, #1
     b1c:	bl	0 <flatcc_builder_end_table>
     b20:	mov	r1, r0
     b24:	mov	r0, r6
     b28:	bl	0 <flatcc_builder_end_buffer>
     b2c:	sub	r3, r5, r7
     b30:	cmp	r3, #1
     b34:	ble	b4c <test+0xb4c>
     b38:	ldrb	r3, [r4, #1]
     b3c:	cmp	r3, #32
     b40:	movhi	r4, r7
     b44:	bhi	b60 <test+0xb60>
     b48:	beq	150c <test+0x150c>
     b4c:	mov	r1, r7
     b50:	add	r0, sp, #68	; 0x44
     b54:	mov	r2, r5
     b58:	bl	0 <flatcc_json_parser_space_ext>
     b5c:	mov	r4, r0
     b60:	cmp	r5, r4
     b64:	movw	r5, #0
     b68:	movt	r5, #0
     b6c:	ldr	r7, [r5]
     b70:	beq	f0 <test+0xf0>
     b74:	mov	r3, r7
     b78:	movw	r0, #0
     b7c:	movt	r0, #0
     b80:	mov	r2, #26
     b84:	mov	r1, #1
     b88:	bl	0 <fwrite>
     b8c:	ldr	r7, [r5]
     b90:	b	f0 <test+0xf0>
     b94:	add	r1, r0, #1
     b98:	cmp	r5, r1
     b9c:	mov	r0, r1
     ba0:	mov	ip, r1
     ba4:	beq	133c <test+0x133c>
     ba8:	ldrb	r2, [r1]
     bac:	cmp	r2, #32
     bb0:	bls	133c <test+0x133c>
     bb4:	mov	r3, r2
     bb8:	b	904 <test+0x904>
     bbc:	ldrb	r3, [r0, #1]
     bc0:	cmp	r3, #32
     bc4:	addhi	r0, r0, #1
     bc8:	bls	a94 <test+0xa94>
     bcc:	b	aa4 <test+0xaa4>
     bd0:	ldrb	r3, [r0, #2]
     bd4:	cmp	r3, #32
     bd8:	addhi	r4, r0, #2
     bdc:	bls	ad8 <test+0xad8>
     be0:	b	aec <test+0xaec>
     be4:	ldr	r3, [sp, #52]	; 0x34
     be8:	cmp	r3, #0
     bec:	bne	12e0 <test+0x12e0>
     bf0:	ldrd	r2, [sp, #56]	; 0x38
     bf4:	cmp	r3, #0
     bf8:	cmpeq	r2, #255	; 0xff
     bfc:	strbls	r2, [r7]
     c00:	bls	a78 <test+0xa78>
     c04:	mov	r1, r0
     c08:	mov	r3, #7
     c0c:	mov	r2, r5
     c10:	add	r0, sp, #68	; 0x44
     c14:	bl	0 <flatcc_json_parser_set_error>
     c18:	cmp	r4, r0
     c1c:	bne	a78 <test+0xa78>
     c20:	b	400 <test+0x400>
     c24:	str	r6, [sp, #24]
     c28:	add	r0, r0, #1
     c2c:	b	328 <test+0x328>
     c30:	str	r6, [sp, #24]
     c34:	b	314 <test+0x314>
     c38:	ldr	r6, [sp, #24]
     c3c:	str	r2, [sp, #40]	; 0x28
     c40:	mov	r0, r6
     c44:	bl	0 <flatcc_builder_start_string>
     c48:	ldr	r2, [sp, #40]	; 0x28
     c4c:	mov	r0, r6
     c50:	mov	r1, r2
     c54:	bl	0 <flatcc_builder_extend_string>
     c58:	cmp	r0, #0
     c5c:	ldr	r2, [sp, #40]	; 0x28
     c60:	beq	400 <test+0x400>
     c64:	mov	r1, r7
     c68:	bl	0 <memcpy>
     c6c:	ldr	r6, [sp, #24]
     c70:	b	c84 <test+0xc84>
     c74:	bl	0 <flatcc_builder_append_string>
     c78:	ldrb	r3, [r4]
     c7c:	cmp	r3, #34	; 0x22
     c80:	beq	1150 <test+0x1150>
     c84:	mov	r1, r4
     c88:	add	r3, sp, #48	; 0x30
     c8c:	mov	r2, r5
     c90:	add	r0, sp, #68	; 0x44
     c94:	bl	0 <flatcc_json_parser_string_escape>
     c98:	mov	r7, r0
     c9c:	ldrb	r2, [sp, #48]	; 0x30
     ca0:	add	r1, sp, #49	; 0x31
     ca4:	mov	r0, r6
     ca8:	bl	0 <flatcc_builder_append_string>
     cac:	mov	r2, r5
     cb0:	mov	r1, r7
     cb4:	add	r0, sp, #68	; 0x44
     cb8:	bl	0 <flatcc_json_parser_string_part>
     cbc:	mov	r4, r0
     cc0:	sub	r2, r0, r7
     cc4:	cmp	r5, r4
     cc8:	mov	r1, r7
     ccc:	mov	r0, r6
     cd0:	bne	c74 <test+0xc74>
     cd4:	b	404 <test+0x404>
     cd8:	ldr	r6, [sp, #24]
     cdc:	ldr	r9, [sp, #28]
     ce0:	movw	r5, #0
     ce4:	movt	r5, #0
     ce8:	movw	r0, #0
     cec:	movt	r0, #0
     cf0:	ldr	r3, [r5]
     cf4:	mov	r2, #13
     cf8:	mov	r1, #1
     cfc:	bl	0 <fwrite>
     d00:	ldr	r7, [r5]
     d04:	b	f0 <test+0xf0>
     d08:	ldrb	r3, [r0, #1]
     d0c:	cmp	r3, #32
     d10:	addhi	r0, r0, #1
     d14:	bls	344 <test+0x344>
     d18:	b	354 <test+0x354>
     d1c:	ldrb	r3, [r0, #2]
     d20:	cmp	r3, #32
     d24:	addhi	r4, r0, #2
     d28:	bls	38c <test+0x38c>
     d2c:	b	3a0 <test+0x3a0>
     d30:	cmp	r0, r5
     d34:	beq	14fc <test+0x14fc>
     d38:	ldrb	r2, [r4, #6]
     d3c:	cmp	r2, #34	; 0x22
     d40:	ldrne	r6, [sp, #24]
     d44:	bne	d64 <test+0xd64>
     d48:	b	12d8 <test+0x12d8>
     d4c:	add	r0, r3, #1
     d50:	cmp	r5, r0
     d54:	beq	12f8 <test+0x12f8>
     d58:	ldrb	r2, [r3, #1]
     d5c:	cmp	r2, #34	; 0x22
     d60:	beq	12d4 <test+0x12d4>
     d64:	cmp	r2, #92	; 0x5c
     d68:	mov	r3, r0
     d6c:	bne	d4c <test+0xd4c>
     d70:	sub	r2, r5, r0
     d74:	add	r3, r0, #1
     d78:	cmp	r2, #1
     d7c:	bgt	d4c <test+0xd4c>
     d80:	cmp	r5, r0
     d84:	str	r6, [sp, #24]
     d88:	beq	d98 <test+0xd98>
     d8c:	ldrb	r3, [r0]
     d90:	cmp	r3, #34	; 0x22
     d94:	beq	12d8 <test+0x12d8>
     d98:	mov	r1, r0
     d9c:	mov	r3, #20
     da0:	mov	r2, r5
     da4:	add	r0, sp, #68	; 0x44
     da8:	bl	0 <flatcc_json_parser_set_error>
     dac:	sub	r3, r5, r0
     db0:	cmp	r3, #1
     db4:	ble	dc8 <test+0xdc8>
     db8:	ldrb	r3, [r0]
     dbc:	cmp	r3, #32
     dc0:	bhi	dd8 <test+0xdd8>
     dc4:	beq	135c <test+0x135c>
     dc8:	mov	r1, r0
     dcc:	mov	r2, r5
     dd0:	add	r0, sp, #68	; 0x44
     dd4:	bl	0 <flatcc_json_parser_space_ext>
     dd8:	cmp	r5, r0
     ddc:	beq	82c <test+0x82c>
     de0:	bls	118c <test+0x118c>
     de4:	ldrb	r3, [r0]
     de8:	cmp	r3, #58	; 0x3a
     dec:	bne	118c <test+0x118c>
     df0:	add	r4, r0, #1
     df4:	sub	r3, r5, r4
     df8:	cmp	r3, #1
     dfc:	ble	e10 <test+0xe10>
     e00:	ldrb	r3, [r0, #1]
     e04:	cmp	r3, #32
     e08:	bhi	e24 <test+0xe24>
     e0c:	beq	13a0 <test+0x13a0>
     e10:	mov	r1, r4
     e14:	mov	r2, r5
     e18:	add	r0, sp, #68	; 0x44
     e1c:	bl	0 <flatcc_json_parser_space_ext>
     e20:	mov	r4, r0
     e24:	cmp	r5, r4
     e28:	beq	cd8 <test+0xcd8>
     e2c:	mov	r3, #8
     e30:	mov	r1, #1
     e34:	ldr	r0, [sp, #24]
     e38:	mov	r2, r3
     e3c:	bl	0 <flatcc_builder_table_add>
     e40:	subs	r3, r0, #0
     e44:	beq	400 <test+0x400>
     e48:	mov	r2, r5
     e4c:	mov	r1, r4
     e50:	add	r0, sp, #68	; 0x44
     e54:	bl	0 <flatcc_json_parser_double>
     e58:	cmp	r0, r4
     e5c:	bne	a78 <test+0xa78>
     e60:	b	400 <test+0x400>
     e64:	sub	r3, r3, #1
     e68:	cmp	r3, #7
     e6c:	ldrls	pc, [pc, r3, lsl #2]
     e70:	b	14e8 <test+0x14e8>
     e74:	.word	0x000010bc
     e78:	.word	0x000010b4
     e7c:	.word	0x000010ac
     e80:	.word	0x000010a4
     e84:	.word	0x000010a4
     e88:	.word	0x000010a4
     e8c:	.word	0x00000484
     e90:	.word	0x00000484
     e94:	add	r3, pc, #932	; 0x3a4
     e98:	ldrd	r2, [r3]
     e9c:	ldrd	r0, [sp, #32]
     ea0:	cmp	r1, r3
     ea4:	cmpeq	r0, r2
     ea8:	bne	14e8 <test+0x14e8>
     eac:	ldr	r3, [sp, #80]	; 0x50
     eb0:	add	r0, ip, #4
     eb4:	cmp	r3, #0
     eb8:	bne	1248 <test+0x1248>
     ebc:	cmp	r0, r5
     ec0:	beq	1530 <test+0x1530>
     ec4:	ldrb	r2, [ip, #4]
     ec8:	cmp	r2, #34	; 0x22
     ecc:	ldrne	r6, [sp, #24]
     ed0:	bne	ef0 <test+0xef0>
     ed4:	b	13dc <test+0x13dc>
     ed8:	add	r0, r3, #1
     edc:	cmp	r5, r0
     ee0:	beq	13f0 <test+0x13f0>
     ee4:	ldrb	r2, [r3, #1]
     ee8:	cmp	r2, #34	; 0x22
     eec:	beq	13d8 <test+0x13d8>
     ef0:	cmp	r2, #92	; 0x5c
     ef4:	mov	r3, r0
     ef8:	bne	ed8 <test+0xed8>
     efc:	sub	r2, r5, r0
     f00:	add	r3, r0, #1
     f04:	cmp	r2, #1
     f08:	bgt	ed8 <test+0xed8>
     f0c:	cmp	r5, r0
     f10:	str	r6, [sp, #24]
     f14:	beq	f24 <test+0xf24>
     f18:	ldrb	r3, [r0]
     f1c:	cmp	r3, #34	; 0x22
     f20:	beq	13dc <test+0x13dc>
     f24:	mov	r1, r0
     f28:	mov	r3, #20
     f2c:	mov	r2, r5
     f30:	add	r0, sp, #68	; 0x44
     f34:	bl	0 <flatcc_json_parser_set_error>
     f38:	sub	r3, r5, r0
     f3c:	cmp	r3, #1
     f40:	ble	f54 <test+0xf54>
     f44:	ldrb	r3, [r0]
     f48:	cmp	r3, #32
     f4c:	bhi	f64 <test+0xf64>
     f50:	beq	1420 <test+0x1420>
     f54:	mov	r1, r0
     f58:	mov	r2, r5
     f5c:	add	r0, sp, #68	; 0x44
     f60:	bl	0 <flatcc_json_parser_space_ext>
     f64:	cmp	r5, r0
     f68:	beq	82c <test+0x82c>
     f6c:	bls	118c <test+0x118c>
     f70:	ldrb	r3, [r0]
     f74:	cmp	r3, #58	; 0x3a
     f78:	bne	118c <test+0x118c>
     f7c:	add	r4, r0, #1
     f80:	sub	r3, r5, r4
     f84:	cmp	r3, #1
     f88:	ble	f9c <test+0xf9c>
     f8c:	ldrb	r3, [r0, #1]
     f90:	cmp	r3, #32
     f94:	bhi	fb0 <test+0xfb0>
     f98:	beq	145c <test+0x145c>
     f9c:	mov	r1, r4
     fa0:	mov	r2, r5
     fa4:	add	r0, sp, #68	; 0x44
     fa8:	bl	0 <flatcc_json_parser_space_ext>
     fac:	mov	r4, r0
     fb0:	cmp	r5, r4
     fb4:	beq	cd8 <test+0xcd8>
     fb8:	mov	r3, #4
     fbc:	mov	r1, #2
     fc0:	ldr	r0, [sp, #24]
     fc4:	mov	r2, r3
     fc8:	bl	0 <flatcc_builder_table_add>
     fcc:	subs	r3, r0, #0
     fd0:	str	r3, [sp, #40]	; 0x28
     fd4:	beq	400 <test+0x400>
     fd8:	ldr	lr, [sp, #40]	; 0x28
     fdc:	mov	r0, #0
     fe0:	add	ip, sp, #56	; 0x38
     fe4:	mov	r6, #0
     fe8:	mov	r7, #0
     fec:	add	r3, sp, #52	; 0x34
     ff0:	mov	r2, r5
     ff4:	str	r0, [sp, #52]	; 0x34
     ff8:	mov	r1, r4
     ffc:	strd	r6, [sp, #56]	; 0x38
    1000:	str	r0, [lr]
    1004:	add	r0, sp, #68	; 0x44
    1008:	str	ip, [sp]
    100c:	bl	0 <flatcc_json_parser_integer>
    1010:	cmp	r4, r0
    1014:	beq	400 <test+0x400>
    1018:	ldr	r3, [sp, #52]	; 0x34
    101c:	cmp	r3, #0
    1020:	bne	12e0 <test+0x12e0>
    1024:	ldrd	r2, [sp, #56]	; 0x38
    1028:	mov	r7, #0
    102c:	mvn	r6, #0
    1030:	cmp	r3, r7
    1034:	cmpeq	r2, r6
    1038:	bhi	c04 <test+0xc04>
    103c:	ldr	r1, [sp, #40]	; 0x28
    1040:	str	r2, [r1]
    1044:	b	a78 <test+0xa78>
    1048:	mov	r2, #0
    104c:	mov	r3, #0
    1050:	b	208 <test+0x208>
    1054:	mov	r2, #0
    1058:	mov	lr, r2
    105c:	b	22c <test+0x22c>
    1060:	mov	r2, #0
    1064:	mov	r3, r2
    1068:	b	234 <test+0x234>
    106c:	mov	r2, #0
    1070:	mov	r3, r2
    1074:	b	23c <test+0x23c>
    1078:	ldrb	r2, [r4]
    107c:	mov	sl, #0
    1080:	mov	ip, r5
    1084:	lsl	fp, r2, #24
    1088:	b	25c <test+0x25c>
    108c:	mov	r1, #0
    1090:	mov	lr, r1
    1094:	b	214 <test+0x214>
    1098:	mov	r1, #0
    109c:	mov	r0, r1
    10a0:	b	220 <test+0x220>
    10a4:	mov	lr, #0
    10a8:	b	48c <test+0x48c>
    10ac:	mov	lr, #0
    10b0:	b	494 <test+0x494>
    10b4:	mov	lr, #0
    10b8:	b	49c <test+0x49c>
    10bc:	mov	lr, #0
    10c0:	b	4a4 <test+0x4a4>
    10c4:	add	r1, r0, #1
    10c8:	cmp	r5, r1
    10cc:	mov	r0, r1
    10d0:	mov	ip, r1
    10d4:	beq	1400 <test+0x1400>
    10d8:	ldrb	r2, [r1]
    10dc:	cmp	r2, #32
    10e0:	bls	1400 <test+0x1400>
    10e4:	mov	r3, r2
    10e8:	b	8a0 <test+0x8a0>
    10ec:	mov	r1, r4
    10f0:	mov	r3, #5
    10f4:	mov	r2, r5
    10f8:	add	r0, sp, #68	; 0x44
    10fc:	bl	0 <flatcc_json_parser_set_error>
    1100:	mov	r4, r0
    1104:	b	1f4 <test+0x1f4>
    1108:	str	r6, [sp, #24]
    110c:	add	r0, r0, #1
    1110:	b	948 <test+0x948>
    1114:	ldrb	r3, [r7, #2]
    1118:	cmp	r3, #32
    111c:	addhi	r4, r7, #2
    1120:	bls	19c <test+0x19c>
    1124:	b	1b0 <test+0x1b0>
    1128:	str	r6, [sp, #24]
    112c:	b	788 <test+0x788>
    1130:	cmp	r3, #46	; 0x2e
    1134:	str	r6, [sp, #24]
    1138:	bne	328 <test+0x328>
    113c:	mov	r3, #5
    1140:	mov	r2, r5
    1144:	add	r0, sp, #68	; 0x44
    1148:	bl	0 <flatcc_json_parser_set_error>
    114c:	b	328 <test+0x328>
    1150:	mov	r0, r6
    1154:	str	r6, [sp, #24]
    1158:	bl	0 <flatcc_builder_end_string>
    115c:	mov	r7, r0
    1160:	b	a2c <test+0xa2c>
    1164:	ldrb	r3, [r0, #1]
    1168:	cmp	r3, #32
    116c:	addhi	r0, r0, #1
    1170:	bls	964 <test+0x964>
    1174:	b	974 <test+0x974>
    1178:	ldrb	r3, [r0, #2]
    117c:	cmp	r3, #32
    1180:	addhi	r4, r0, #2
    1184:	bls	9ac <test+0x9ac>
    1188:	b	9c0 <test+0x9c0>
    118c:	movw	r8, #0
    1190:	movt	r8, #0
    1194:	ldr	r6, [sp, #24]
    1198:	mov	r7, r0
    119c:	movw	r1, #0
    11a0:	movt	r1, #0
    11a4:	mov	r2, #58	; 0x3a
    11a8:	ldr	r0, [r8]
    11ac:	ldr	r9, [sp, #28]
    11b0:	b	d0 <test+0xd0>
    11b4:	cmp	r0, r5
    11b8:	beq	1520 <test+0x1520>
    11bc:	ldrb	r3, [ip, #4]
    11c0:	cmp	r3, #32
    11c4:	bls	5b8 <test+0x5b8>
    11c8:	ldr	r6, [sp, #24]
    11cc:	mov	ip, r0
    11d0:	sub	r2, r3, #48	; 0x30
    11d4:	cmp	r3, #46	; 0x2e
    11d8:	cmpne	r3, #95	; 0x5f
    11dc:	uxtb	r2, r2
    11e0:	add	r1, ip, #1
    11e4:	mov	r0, ip
    11e8:	beq	121c <test+0x121c>
    11ec:	orr	ip, r3, #32
    11f0:	tst	r3, #128	; 0x80
    11f4:	sub	ip, ip, #97	; 0x61
    11f8:	bne	121c <test+0x121c>
    11fc:	cmp	r2, #9
    1200:	uxtb	ip, ip
    1204:	bls	121c <test+0x121c>
    1208:	cmp	ip, #25
    120c:	bls	1218 <test+0x1218>
    1210:	str	r6, [sp, #24]
    1214:	b	5b8 <test+0x5b8>
    1218:	add	r1, r0, #1
    121c:	cmp	r5, r1
    1220:	mov	r0, r1
    1224:	mov	ip, r1
    1228:	beq	14b8 <test+0x14b8>
    122c:	ldrb	r2, [r1]
    1230:	cmp	r2, #32
    1234:	bls	14b8 <test+0x14b8>
    1238:	mov	r3, r2
    123c:	b	11d0 <test+0x11d0>
    1240:	.word	0x00000000
    1244:	.word	0x6c656674
    1248:	cmp	r0, r5
    124c:	beq	1538 <test+0x1538>
    1250:	ldrb	r3, [ip, #4]
    1254:	cmp	r3, #32
    1258:	bls	f38 <test+0xf38>
    125c:	ldr	r6, [sp, #24]
    1260:	mov	ip, r0
    1264:	sub	r2, r3, #48	; 0x30
    1268:	cmp	r3, #46	; 0x2e
    126c:	cmpne	r3, #95	; 0x5f
    1270:	uxtb	r2, r2
    1274:	add	r1, ip, #1
    1278:	mov	r0, ip
    127c:	beq	12b0 <test+0x12b0>
    1280:	orr	ip, r3, #32
    1284:	tst	r3, #128	; 0x80
    1288:	sub	ip, ip, #97	; 0x61
    128c:	bne	12b0 <test+0x12b0>
    1290:	cmp	r2, #9
    1294:	uxtb	ip, ip
    1298:	bls	12b0 <test+0x12b0>
    129c:	cmp	ip, #25
    12a0:	bls	12ac <test+0x12ac>
    12a4:	str	r6, [sp, #24]
    12a8:	b	f38 <test+0xf38>
    12ac:	add	r1, r0, #1
    12b0:	cmp	r5, r1
    12b4:	mov	r0, r1
    12b8:	mov	ip, r1
    12bc:	beq	1498 <test+0x1498>
    12c0:	ldrb	r2, [r1]
    12c4:	cmp	r2, #32
    12c8:	bls	1498 <test+0x1498>
    12cc:	mov	r3, r2
    12d0:	b	1264 <test+0x1264>
    12d4:	str	r6, [sp, #24]
    12d8:	add	r0, r0, #1
    12dc:	b	dac <test+0xdac>
    12e0:	mov	r1, r0
    12e4:	mov	r3, #8
    12e8:	mov	r2, r5
    12ec:	add	r0, sp, #68	; 0x44
    12f0:	bl	0 <flatcc_json_parser_set_error>
    12f4:	b	c18 <test+0xc18>
    12f8:	str	r6, [sp, #24]
    12fc:	b	d98 <test+0xd98>
    1300:	movw	r7, #0
    1304:	movt	r7, #0
    1308:	mov	r2, #125	; 0x7d
    130c:	movw	r1, #0
    1310:	movt	r1, #0
    1314:	ldr	r0, [r7]
    1318:	bl	0 <fprintf>
    131c:	mov	r2, r5
    1320:	mov	r1, r8
    1324:	add	r0, sp, #68	; 0x44
    1328:	mov	r3, #17
    132c:	bl	0 <flatcc_json_parser_set_error>
    1330:	mov	r4, r0
    1334:	ldr	r7, [r7]
    1338:	b	f0 <test+0xf0>
    133c:	cmp	r3, #46	; 0x2e
    1340:	str	r6, [sp, #24]
    1344:	bne	948 <test+0x948>
    1348:	mov	r3, #5
    134c:	mov	r2, r5
    1350:	add	r0, sp, #68	; 0x44
    1354:	bl	0 <flatcc_json_parser_set_error>
    1358:	b	948 <test+0x948>
    135c:	ldrb	r3, [r0, #1]
    1360:	cmp	r3, #32
    1364:	addhi	r0, r0, #1
    1368:	bls	dc8 <test+0xdc8>
    136c:	b	dd8 <test+0xdd8>
    1370:	ldr	r6, [sp, #24]
    1374:	mov	r2, r5
    1378:	mov	r1, r4
    137c:	ldr	r9, [sp, #28]
    1380:	mov	r3, #13
    1384:	add	r0, sp, #68	; 0x44
    1388:	bl	0 <flatcc_json_parser_set_error>
    138c:	movw	r3, #0
    1390:	movt	r3, #0
    1394:	mov	r4, r0
    1398:	ldr	r7, [r3]
    139c:	b	f0 <test+0xf0>
    13a0:	ldrb	r3, [r0, #2]
    13a4:	cmp	r3, #32
    13a8:	addhi	r4, r0, #2
    13ac:	bls	e10 <test+0xe10>
    13b0:	b	e24 <test+0xe24>
    13b4:	cmp	r5, r0
    13b8:	mov	r8, r0
    13bc:	ldr	r6, [sp, #24]
    13c0:	ldr	r9, [sp, #28]
    13c4:	bls	1300 <test+0x1300>
    13c8:	cmp	r3, #125	; 0x7d
    13cc:	bne	1300 <test+0x1300>
    13d0:	mov	r4, r0
    13d4:	b	b14 <test+0xb14>
    13d8:	str	r6, [sp, #24]
    13dc:	add	r0, r0, #1
    13e0:	b	f38 <test+0xf38>
    13e4:	str	r6, [sp, #24]
    13e8:	add	r0, r0, #1
    13ec:	b	5b8 <test+0x5b8>
    13f0:	str	r6, [sp, #24]
    13f4:	b	f24 <test+0xf24>
    13f8:	str	r6, [sp, #24]
    13fc:	b	5a4 <test+0x5a4>
    1400:	cmp	r3, #46	; 0x2e
    1404:	str	r6, [sp, #24]
    1408:	bne	dac <test+0xdac>
    140c:	mov	r3, #5
    1410:	mov	r2, r5
    1414:	add	r0, sp, #68	; 0x44
    1418:	bl	0 <flatcc_json_parser_set_error>
    141c:	b	dac <test+0xdac>
    1420:	ldrb	r3, [r0, #1]
    1424:	cmp	r3, #32
    1428:	addhi	r0, r0, #1
    142c:	bls	f54 <test+0xf54>
    1430:	b	f64 <test+0xf64>
    1434:	ldrb	r3, [r0, #1]
    1438:	cmp	r3, #32
    143c:	addhi	r0, r0, #1
    1440:	bls	5d4 <test+0x5d4>
    1444:	b	5e4 <test+0x5e4>
    1448:	ldrb	r3, [r0, #2]
    144c:	cmp	r3, #32
    1450:	addhi	r4, r0, #2
    1454:	bls	61c <test+0x61c>
    1458:	b	630 <test+0x630>
    145c:	ldrb	r3, [r0, #2]
    1460:	cmp	r3, #32
    1464:	addhi	r4, r0, #2
    1468:	bls	f9c <test+0xf9c>
    146c:	b	fb0 <test+0xfb0>
    1470:	mov	r0, r5
    1474:	b	344 <test+0x344>
    1478:	mov	r0, r5
    147c:	b	314 <test+0x314>
    1480:	cmp	r2, #0
    1484:	sbcs	r1, r3, #0
    1488:	blt	c04 <test+0xc04>
    148c:	ldr	r1, [sp, #40]	; 0x28
    1490:	strd	r2, [r1]
    1494:	b	a78 <test+0xa78>
    1498:	cmp	r3, #46	; 0x2e
    149c:	str	r6, [sp, #24]
    14a0:	bne	f38 <test+0xf38>
    14a4:	mov	r3, #5
    14a8:	mov	r2, r5
    14ac:	add	r0, sp, #68	; 0x44
    14b0:	bl	0 <flatcc_json_parser_set_error>
    14b4:	b	f38 <test+0xf38>
    14b8:	cmp	r3, #46	; 0x2e
    14bc:	str	r6, [sp, #24]
    14c0:	bne	5b8 <test+0x5b8>
    14c4:	mov	r3, #5
    14c8:	mov	r2, r5
    14cc:	add	r0, sp, #68	; 0x44
    14d0:	bl	0 <flatcc_json_parser_set_error>
    14d4:	b	5b8 <test+0x5b8>
    14d8:	mov	r0, r5
    14dc:	b	788 <test+0x788>
    14e0:	mov	r0, r5
    14e4:	b	964 <test+0x964>
    14e8:	mov	r2, r5
    14ec:	mov	r1, ip
    14f0:	ldr	r6, [sp, #24]
    14f4:	ldr	r9, [sp, #28]
    14f8:	b	1380 <test+0x1380>
    14fc:	mov	r0, r5
    1500:	b	d98 <test+0xd98>
    1504:	mov	r0, r5
    1508:	b	dc8 <test+0xdc8>
    150c:	ldrb	r3, [r4, #2]
    1510:	cmp	r3, #32
    1514:	addhi	r4, r4, #2
    1518:	bls	b4c <test+0xb4c>
    151c:	b	b60 <test+0xb60>
    1520:	mov	r0, r5
    1524:	b	5d4 <test+0x5d4>
    1528:	mov	r0, r5
    152c:	b	5a4 <test+0x5a4>
    1530:	mov	r0, r5
    1534:	b	f24 <test+0xf24>
    1538:	mov	r0, r5
    153c:	b	f54 <test+0xf54>

Disassembly of section .text.startup:

00000000 <main>:
   0:	mvn	r3, #0
   4:	push	{lr}		; (str lr, [sp, #-4]!)
   8:	sub	sp, sp, #244	; 0xf4
   c:	add	r0, sp, #8
  10:	str	r3, [sp, #4]
  14:	bl	0 <flatcc_builder_init>
  18:	movw	r1, #0
  1c:	movt	r1, #0
  20:	add	r2, r1, #644	; 0x284
  24:	add	r3, sp, #4
  28:	add	r2, r2, #1
  2c:	add	r0, sp, #8
  30:	bl	0 <main>
  34:	add	r0, sp, #8
  38:	bl	0 <flatcc_builder_clear>
  3c:	ldr	r0, [sp, #4]
  40:	add	sp, sp, #244	; 0xf4
  44:	pop	{pc}		; (ldr pc, [sp], #4)
