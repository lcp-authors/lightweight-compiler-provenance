
../compcert-repos/prog2/CMakeFiles/0.8.dir/Aula00_Conceitos_base/08.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <lerpontuacoes>:
   0:	push	{fp, lr}
   4:	mov	fp, sp
   8:	sub	sp, sp, #24
   c:	str	r0, [fp, #-4]
  10:	str	r1, [fp, #-8]
  14:	movw	r0, #0
  18:	movt	r0, #0
  1c:	add	r1, sp, #12
  20:	bl	0 <__isoc99_scanf>
  24:	movw	r1, #0
  28:	str	r1, [sp, #8]
  2c:	ldr	r0, [sp, #8]
  30:	ldr	r1, [sp, #12]
  34:	cmp	r0, r1
  38:	bge	7c <lerpontuacoes+0x7c>
  3c:	ldr	r0, [fp, #-4]
  40:	ldr	r1, [sp, #8]
  44:	mov	r2, #50	; 0x32
  48:	mla	r0, r1, r2, r0
  4c:	ldr	r2, [fp, #-8]
  50:	add	r2, r2, r1, lsl #2
  54:	movw	r1, #0
  58:	movt	r1, #0
  5c:	str	r0, [sp, #4]
  60:	mov	r0, r1
  64:	ldr	r1, [sp, #4]
  68:	bl	0 <__isoc99_scanf>
  6c:	ldr	r0, [sp, #8]
  70:	add	r0, r0, #1
  74:	str	r0, [sp, #8]
  78:	b	2c <lerpontuacoes+0x2c>
  7c:	ldr	r0, [sp, #12]
  80:	mov	sp, fp
  84:	pop	{fp, pc}

00000088 <primeiroUltimo>:
  88:	push	{fp, lr}
  8c:	mov	fp, sp
  90:	sub	sp, sp, #32
  94:	ldr	ip, [fp, #8]
  98:	str	r0, [fp, #-4]
  9c:	str	r1, [fp, #-8]
  a0:	str	r2, [fp, #-12]
  a4:	str	r3, [sp, #16]
  a8:	ldr	r0, [fp, #-8]
  ac:	ldr	r0, [r0]
  b0:	str	r0, [sp, #8]
  b4:	ldr	r0, [fp, #-8]
  b8:	ldr	r0, [r0]
  bc:	str	r0, [sp, #4]
  c0:	movw	r0, #1
  c4:	str	r0, [sp, #12]
  c8:	ldr	r0, [sp, #12]
  cc:	ldr	r1, [fp, #-12]
  d0:	cmp	r0, r1
  d4:	bge	184 <primeiroUltimo+0xfc>
  d8:	ldr	r0, [fp, #-8]
  dc:	ldr	r1, [sp, #12]
  e0:	add	r0, r0, r1, lsl #2
  e4:	ldr	r0, [r0]
  e8:	ldr	r1, [sp, #8]
  ec:	cmp	r0, r1
  f0:	ble	124 <primeiroUltimo+0x9c>
  f4:	ldr	r0, [fp, #-8]
  f8:	ldr	r1, [sp, #12]
  fc:	add	r0, r0, r1, lsl #2
 100:	ldr	r0, [r0]
 104:	str	r0, [sp, #8]
 108:	ldr	r0, [sp, #16]
 10c:	ldr	r1, [fp, #-4]
 110:	ldr	r2, [sp, #12]
 114:	movw	r3, #50	; 0x32
 118:	mul	r2, r2, r3
 11c:	add	r1, r1, r2
 120:	bl	0 <strcpy>
 124:	ldr	r0, [fp, #-8]
 128:	ldr	r1, [sp, #12]
 12c:	add	r0, r0, r1, lsl #2
 130:	ldr	r0, [r0]
 134:	ldr	r1, [sp, #4]
 138:	cmp	r0, r1
 13c:	bge	170 <primeiroUltimo+0xe8>
 140:	ldr	r0, [fp, #-8]
 144:	ldr	r1, [sp, #12]
 148:	add	r0, r0, r1, lsl #2
 14c:	ldr	r0, [r0]
 150:	str	r0, [sp, #4]
 154:	ldr	r0, [fp, #8]
 158:	ldr	r1, [fp, #-4]
 15c:	ldr	r2, [sp, #12]
 160:	movw	r3, #50	; 0x32
 164:	mul	r2, r2, r3
 168:	add	r1, r1, r2
 16c:	bl	0 <strcpy>
 170:	b	174 <primeiroUltimo+0xec>
 174:	ldr	r0, [sp, #12]
 178:	add	r0, r0, #1
 17c:	str	r0, [sp, #12]
 180:	b	c8 <primeiroUltimo+0x40>
 184:	mov	sp, fp
 188:	pop	{fp, pc}

0000018c <main>:
 18c:	push	{r4, r5, fp, lr}
 190:	add	fp, sp, #8
 194:	sub	sp, sp, #1232	; 0x4d0
 198:	sub	r0, fp, #96	; 0x60
 19c:	add	r1, sp, #144	; 0x90
 1a0:	movw	r2, #0
 1a4:	str	r2, [fp, #-12]
 1a8:	mov	r2, r0
 1ac:	str	r0, [sp, #40]	; 0x28
 1b0:	mov	r0, r2
 1b4:	movw	r2, #0
 1b8:	and	r3, r2, #255	; 0xff
 1bc:	str	r1, [sp, #36]	; 0x24
 1c0:	mov	r1, r3
 1c4:	movw	r3, #80	; 0x50
 1c8:	str	r2, [sp, #32]
 1cc:	mov	r2, r3
 1d0:	bl	0 <memset>
 1d4:	ldr	r0, [sp, #36]	; 0x24
 1d8:	ldr	r1, [sp, #32]
 1dc:	and	r1, r1, #255	; 0xff
 1e0:	movw	r2, #1000	; 0x3e8
 1e4:	bl	0 <memset>
 1e8:	add	r0, sp, #94	; 0x5e
 1ec:	ldr	r1, [sp, #32]
 1f0:	and	r1, r1, #255	; 0xff
 1f4:	movw	r2, #50	; 0x32
 1f8:	str	r2, [sp, #28]
 1fc:	bl	0 <memset>
 200:	add	r0, sp, #44	; 0x2c
 204:	ldr	r1, [sp, #32]
 208:	and	r1, r1, #255	; 0xff
 20c:	ldr	r2, [sp, #28]
 210:	bl	0 <memset>
 214:	ldr	r0, [sp, #36]	; 0x24
 218:	ldr	r1, [sp, #40]	; 0x28
 21c:	bl	0 <lerpontuacoes>
 220:	add	r1, sp, #44	; 0x2c
 224:	add	r3, sp, #94	; 0x5e
 228:	sub	r2, fp, #96	; 0x60
 22c:	add	ip, sp, #144	; 0x90
 230:	str	r0, [fp, #-16]
 234:	ldr	r0, [fp, #-16]
 238:	str	r0, [sp, #24]
 23c:	mov	r0, ip
 240:	str	r1, [sp, #20]
 244:	mov	r1, r2
 248:	ldr	r2, [sp, #24]
 24c:	ldr	ip, [sp, #20]
 250:	str	ip, [sp]
 254:	bl	88 <primeiroUltimo>
 258:	ldr	r1, [fp, #-16]
 25c:	movw	r0, #0
 260:	movt	r0, #0
 264:	bl	0 <printf>
 268:	add	r1, sp, #94	; 0x5e
 26c:	movw	r2, #0
 270:	movt	r2, #0
 274:	str	r0, [sp, #16]
 278:	mov	r0, r2
 27c:	bl	0 <printf>
 280:	add	r1, sp, #44	; 0x2c
 284:	movw	r2, #0
 288:	movt	r2, #0
 28c:	str	r0, [sp, #12]
 290:	mov	r0, r2
 294:	bl	0 <printf>
 298:	movw	r1, #0
 29c:	str	r0, [sp, #8]
 2a0:	mov	r0, r1
 2a4:	sub	sp, fp, #8
 2a8:	pop	{r4, r5, fp, pc}
