
../compcert-repos/prog2/3.2:     file format elf32-littlearm


Disassembly of section .init:

00010690 <.init>:
   10690:	push	{r3, lr}
   10694:	bl	10734 <_start@@Base+0x3c>
   10698:	pop	{r3, pc}

Disassembly of section .plt:

0001069c <printf@plt-0x14>:
   1069c:	push	{lr}		; (str lr, [sp, #-4]!)
   106a0:	ldr	lr, [pc, #4]	; 106ac <printf@plt-0x4>
   106a4:	add	lr, pc, lr
   106a8:	ldr	pc, [lr, #8]!
   106ac:	andeq	r1, r1, r4, asr r9

000106b0 <printf@plt>:
   106b0:	add	ip, pc, #0, 12
   106b4:	add	ip, ip, #69632	; 0x11000
   106b8:	ldr	pc, [ip, #2388]!	; 0x954

000106bc <puts@plt>:
   106bc:	add	ip, pc, #0, 12
   106c0:	add	ip, ip, #69632	; 0x11000
   106c4:	ldr	pc, [ip, #2380]!	; 0x94c

000106c8 <__libc_start_main@plt>:
   106c8:	add	ip, pc, #0, 12
   106cc:	add	ip, ip, #69632	; 0x11000
   106d0:	ldr	pc, [ip, #2372]!	; 0x944

000106d4 <__gmon_start__@plt>:
   106d4:	add	ip, pc, #0, 12
   106d8:	add	ip, ip, #69632	; 0x11000
   106dc:	ldr	pc, [ip, #2364]!	; 0x93c

000106e0 <strlen@plt>:
   106e0:	add	ip, pc, #0, 12
   106e4:	add	ip, ip, #69632	; 0x11000
   106e8:	ldr	pc, [ip, #2356]!	; 0x934

000106ec <abort@plt>:
   106ec:	add	ip, pc, #0, 12
   106f0:	add	ip, ip, #69632	; 0x11000
   106f4:	ldr	pc, [ip, #2348]!	; 0x92c

Disassembly of section .text:

000106f8 <_start@@Base>:
   106f8:	mov	fp, #0
   106fc:	mov	lr, #0
   10700:	pop	{r1}		; (ldr r1, [sp], #4)
   10704:	mov	r2, sp
   10708:	push	{r2}		; (str r2, [sp, #-4]!)
   1070c:	push	{r0}		; (str r0, [sp, #-4]!)
   10710:	ldr	ip, [pc, #16]	; 10728 <_start@@Base+0x30>
   10714:	push	{ip}		; (str ip, [sp, #-4]!)
   10718:	ldr	r0, [pc, #12]	; 1072c <_start@@Base+0x34>
   1071c:	ldr	r3, [pc, #12]	; 10730 <_start@@Base+0x38>
   10720:	bl	106c8 <__libc_start_main@plt>
   10724:	bl	106ec <abort@plt>
   10728:	andeq	r1, r1, ip, ror #2
   1072c:	andeq	r0, r1, r8, asr sp
   10730:	andeq	r1, r1, ip, lsl #2
   10734:	ldr	r3, [pc, #20]	; 10750 <_start@@Base+0x58>
   10738:	ldr	r2, [pc, #20]	; 10754 <_start@@Base+0x5c>
   1073c:	add	r3, pc, r3
   10740:	ldr	r2, [r3, r2]
   10744:	cmp	r2, #0
   10748:	bxeq	lr
   1074c:	b	106d4 <__gmon_start__@plt>
   10750:			; <UNDEFINED> instruction: 0x000118bc
   10754:	andeq	r0, r0, r4, lsr #32
   10758:	ldr	r3, [pc, #28]	; 1077c <_start@@Base+0x84>
   1075c:	ldr	r0, [pc, #28]	; 10780 <_start@@Base+0x88>
   10760:	sub	r3, r3, r0
   10764:	cmp	r3, #6
   10768:	bxls	lr
   1076c:	ldr	r3, [pc, #16]	; 10784 <_start@@Base+0x8c>
   10770:	cmp	r3, #0
   10774:	bxeq	lr
   10778:	bx	r3
   1077c:	andeq	r2, r2, r3, lsr r0
   10780:	andeq	r2, r2, r0, lsr r0
   10784:	andeq	r0, r0, r0
   10788:	ldr	r1, [pc, #36]	; 107b4 <_start@@Base+0xbc>
   1078c:	ldr	r0, [pc, #36]	; 107b8 <_start@@Base+0xc0>
   10790:	sub	r1, r1, r0
   10794:	asr	r1, r1, #2
   10798:	add	r1, r1, r1, lsr #31
   1079c:	asrs	r1, r1, #1
   107a0:	bxeq	lr
   107a4:	ldr	r3, [pc, #16]	; 107bc <_start@@Base+0xc4>
   107a8:	cmp	r3, #0
   107ac:	bxeq	lr
   107b0:	bx	r3
   107b4:	andeq	r2, r2, r0, lsr r0
   107b8:	andeq	r2, r2, r0, lsr r0
   107bc:	andeq	r0, r0, r0
   107c0:	push	{r4, lr}
   107c4:	ldr	r4, [pc, #24]	; 107e4 <_start@@Base+0xec>
   107c8:	ldrb	r3, [r4]
   107cc:	cmp	r3, #0
   107d0:	popne	{r4, pc}
   107d4:	bl	10758 <_start@@Base+0x60>
   107d8:	mov	r3, #1
   107dc:	strb	r3, [r4]
   107e0:	pop	{r4, pc}
   107e4:	andeq	r2, r2, r0, lsr r0
   107e8:	ldr	r0, [pc, #40]	; 10818 <_start@@Base+0x120>
   107ec:	ldr	r3, [r0]
   107f0:	cmp	r3, #0
   107f4:	bne	107fc <_start@@Base+0x104>
   107f8:	b	10788 <_start@@Base+0x90>
   107fc:	ldr	r3, [pc, #24]	; 1081c <_start@@Base+0x124>
   10800:	cmp	r3, #0
   10804:	beq	107f8 <_start@@Base+0x100>
   10808:	push	{r4, lr}
   1080c:	blx	r3
   10810:	pop	{r4, lr}
   10814:	b	10788 <_start@@Base+0x90>
   10818:	andeq	r1, r2, r4, lsl pc
   1081c:	andeq	r0, r0, r0

00010820 <comp_int_asc@@Base>:
   10820:	push	{fp}		; (str fp, [sp, #-4]!)
   10824:	add	fp, sp, #0
   10828:	sub	sp, sp, #20
   1082c:	str	r0, [fp, #-16]
   10830:	str	r1, [fp, #-20]	; 0xffffffec
   10834:	ldr	r3, [fp, #-16]
   10838:	ldr	r3, [r3]
   1083c:	str	r3, [fp, #-8]
   10840:	ldr	r3, [fp, #-20]	; 0xffffffec
   10844:	ldr	r3, [r3]
   10848:	str	r3, [fp, #-12]
   1084c:	ldr	r2, [fp, #-12]
   10850:	ldr	r3, [fp, #-8]
   10854:	cmp	r2, r3
   10858:	ble	10864 <comp_int_asc@@Base+0x44>
   1085c:	mvn	r3, #0
   10860:	b	10880 <comp_int_asc@@Base+0x60>
   10864:	ldr	r2, [fp, #-8]
   10868:	ldr	r3, [fp, #-12]
   1086c:	cmp	r2, r3
   10870:	ble	1087c <comp_int_asc@@Base+0x5c>
   10874:	mov	r3, #1
   10878:	b	10880 <comp_int_asc@@Base+0x60>
   1087c:	mov	r3, #0
   10880:	mov	r0, r3
   10884:	add	sp, fp, #0
   10888:	pop	{fp}		; (ldr fp, [sp], #4)
   1088c:	bx	lr

00010890 <get_elem@@Base>:
   10890:	push	{fp}		; (str fp, [sp, #-4]!)
   10894:	add	fp, sp, #0
   10898:	sub	sp, sp, #20
   1089c:	str	r0, [fp, #-8]
   108a0:	str	r1, [fp, #-12]
   108a4:	str	r2, [fp, #-16]
   108a8:	ldr	r3, [fp, #-12]
   108ac:	ldr	r2, [fp, #-16]
   108b0:	mul	r3, r2, r3
   108b4:	mov	r2, r3
   108b8:	ldr	r3, [fp, #-8]
   108bc:	add	r3, r3, r2
   108c0:	mov	r0, r3
   108c4:	add	sp, fp, #0
   108c8:	pop	{fp}		; (ldr fp, [sp], #4)
   108cc:	bx	lr

000108d0 <swap@@Base>:
   108d0:	push	{fp}		; (str fp, [sp, #-4]!)
   108d4:	add	fp, sp, #0
   108d8:	sub	sp, sp, #28
   108dc:	str	r0, [fp, #-16]
   108e0:	str	r1, [fp, #-20]	; 0xffffffec
   108e4:	str	r2, [fp, #-24]	; 0xffffffe8
   108e8:	mov	r3, #0
   108ec:	str	r3, [fp, #-8]
   108f0:	b	10948 <swap@@Base+0x78>
   108f4:	ldr	r3, [fp, #-8]
   108f8:	ldr	r2, [fp, #-16]
   108fc:	add	r3, r2, r3
   10900:	ldrb	r3, [r3]
   10904:	strb	r3, [fp, #-9]
   10908:	ldr	r3, [fp, #-8]
   1090c:	ldr	r2, [fp, #-16]
   10910:	add	r3, r2, r3
   10914:	ldr	r2, [fp, #-8]
   10918:	ldr	r1, [fp, #-20]	; 0xffffffec
   1091c:	add	r2, r1, r2
   10920:	ldrb	r2, [r2]
   10924:	strb	r2, [r3]
   10928:	ldr	r3, [fp, #-8]
   1092c:	ldr	r2, [fp, #-20]	; 0xffffffec
   10930:	add	r3, r2, r3
   10934:	ldrb	r2, [fp, #-9]
   10938:	strb	r2, [r3]
   1093c:	ldr	r3, [fp, #-8]
   10940:	add	r3, r3, #1
   10944:	str	r3, [fp, #-8]
   10948:	ldr	r2, [fp, #-8]
   1094c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   10950:	cmp	r2, r3
   10954:	blt	108f4 <swap@@Base+0x24>
   10958:	nop			; (mov r0, r0)
   1095c:	add	sp, fp, #0
   10960:	pop	{fp}		; (ldr fp, [sp], #4)
   10964:	bx	lr

00010968 <sort@@Base>:
   10968:	push	{fp, lr}
   1096c:	add	fp, sp, #4
   10970:	sub	sp, sp, #40	; 0x28
   10974:	str	r0, [fp, #-32]	; 0xffffffe0
   10978:	str	r1, [fp, #-36]	; 0xffffffdc
   1097c:	str	r2, [fp, #-40]	; 0xffffffd8
   10980:	str	r3, [fp, #-44]	; 0xffffffd4
   10984:	mov	r3, #0
   10988:	str	r3, [fp, #-12]
   1098c:	b	10a2c <sort@@Base+0xc4>
   10990:	ldr	r2, [fp, #-40]	; 0xffffffd8
   10994:	ldr	r1, [fp, #-12]
   10998:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1099c:	bl	10890 <get_elem@@Base>
   109a0:	str	r0, [fp, #-20]	; 0xffffffec
   109a4:	ldr	r3, [fp, #-20]	; 0xffffffec
   109a8:	str	r3, [fp, #-16]
   109ac:	ldr	r3, [fp, #-12]
   109b0:	add	r3, r3, #1
   109b4:	str	r3, [fp, #-8]
   109b8:	b	10a00 <sort@@Base+0x98>
   109bc:	ldr	r2, [fp, #-40]	; 0xffffffd8
   109c0:	ldr	r1, [fp, #-8]
   109c4:	ldr	r0, [fp, #-32]	; 0xffffffe0
   109c8:	bl	10890 <get_elem@@Base>
   109cc:	str	r0, [fp, #-24]	; 0xffffffe8
   109d0:	ldr	r3, [fp, #-44]	; 0xffffffd4
   109d4:	ldr	r1, [fp, #-16]
   109d8:	ldr	r0, [fp, #-24]	; 0xffffffe8
   109dc:	blx	r3
   109e0:	mov	r3, r0
   109e4:	cmp	r3, #0
   109e8:	bge	109f4 <sort@@Base+0x8c>
   109ec:	ldr	r3, [fp, #-24]	; 0xffffffe8
   109f0:	str	r3, [fp, #-16]
   109f4:	ldr	r3, [fp, #-8]
   109f8:	add	r3, r3, #1
   109fc:	str	r3, [fp, #-8]
   10a00:	ldr	r2, [fp, #-8]
   10a04:	ldr	r3, [fp, #-36]	; 0xffffffdc
   10a08:	cmp	r2, r3
   10a0c:	blt	109bc <sort@@Base+0x54>
   10a10:	ldr	r2, [fp, #-40]	; 0xffffffd8
   10a14:	ldr	r1, [fp, #-20]	; 0xffffffec
   10a18:	ldr	r0, [fp, #-16]
   10a1c:	bl	108d0 <swap@@Base>
   10a20:	ldr	r3, [fp, #-12]
   10a24:	add	r3, r3, #1
   10a28:	str	r3, [fp, #-12]
   10a2c:	ldr	r2, [fp, #-12]
   10a30:	ldr	r3, [fp, #-36]	; 0xffffffdc
   10a34:	cmp	r2, r3
   10a38:	blt	10990 <sort@@Base+0x28>
   10a3c:	nop			; (mov r0, r0)
   10a40:	sub	sp, fp, #4
   10a44:	pop	{fp, pc}

00010a48 <linear_search@@Base>:
   10a48:	push	{fp, lr}
   10a4c:	add	fp, sp, #4
   10a50:	sub	sp, sp, #24
   10a54:	str	r0, [fp, #-16]
   10a58:	str	r1, [fp, #-20]	; 0xffffffec
   10a5c:	str	r2, [fp, #-24]	; 0xffffffe8
   10a60:	str	r3, [fp, #-28]	; 0xffffffe4
   10a64:	mov	r3, #0
   10a68:	str	r3, [fp, #-8]
   10a6c:	b	10ac4 <linear_search@@Base+0x7c>
   10a70:	ldr	r2, [fp, #-24]	; 0xffffffe8
   10a74:	ldr	r1, [fp, #-8]
   10a78:	ldr	r0, [fp, #-20]	; 0xffffffec
   10a7c:	bl	10890 <get_elem@@Base>
   10a80:	mov	r2, r0
   10a84:	ldr	r3, [fp, #4]
   10a88:	ldr	r1, [fp, #-16]
   10a8c:	mov	r0, r2
   10a90:	blx	r3
   10a94:	mov	r3, r0
   10a98:	cmp	r3, #0
   10a9c:	bne	10ab8 <linear_search@@Base+0x70>
   10aa0:	ldr	r2, [fp, #-28]	; 0xffffffe4
   10aa4:	ldr	r1, [fp, #-8]
   10aa8:	ldr	r0, [fp, #-20]	; 0xffffffec
   10aac:	bl	10890 <get_elem@@Base>
   10ab0:	mov	r3, r0
   10ab4:	b	10ad8 <linear_search@@Base+0x90>
   10ab8:	ldr	r3, [fp, #-8]
   10abc:	add	r3, r3, #1
   10ac0:	str	r3, [fp, #-8]
   10ac4:	ldr	r2, [fp, #-8]
   10ac8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   10acc:	cmp	r2, r3
   10ad0:	blt	10a70 <linear_search@@Base+0x28>
   10ad4:	mov	r3, #0
   10ad8:	mov	r0, r3
   10adc:	sub	sp, fp, #4
   10ae0:	pop	{fp, pc}

00010ae4 <binary_search@@Base>:
   10ae4:	push	{fp, lr}
   10ae8:	add	fp, sp, #4
   10aec:	sub	sp, sp, #32
   10af0:	str	r0, [fp, #-24]	; 0xffffffe8
   10af4:	str	r1, [fp, #-28]	; 0xffffffe4
   10af8:	str	r2, [fp, #-32]	; 0xffffffe0
   10afc:	str	r3, [fp, #-36]	; 0xffffffdc
   10b00:	mov	r3, #0
   10b04:	str	r3, [fp, #-8]
   10b08:	ldr	r3, [fp, #-32]	; 0xffffffe0
   10b0c:	sub	r3, r3, #1
   10b10:	str	r3, [fp, #-12]
   10b14:	b	10bc8 <binary_search@@Base+0xe4>
   10b18:	ldr	r2, [fp, #-8]
   10b1c:	ldr	r3, [fp, #-12]
   10b20:	add	r3, r2, r3
   10b24:	lsr	r2, r3, #31
   10b28:	add	r3, r2, r3
   10b2c:	asr	r3, r3, #1
   10b30:	str	r3, [fp, #-16]
   10b34:	ldr	r2, [fp, #-36]	; 0xffffffdc
   10b38:	ldr	r1, [fp, #-16]
   10b3c:	ldr	r0, [fp, #-28]	; 0xffffffe4
   10b40:	bl	10890 <get_elem@@Base>
   10b44:	mov	r2, r0
   10b48:	ldr	r3, [fp, #4]
   10b4c:	mov	r1, r2
   10b50:	ldr	r0, [fp, #-24]	; 0xffffffe8
   10b54:	blx	r3
   10b58:	mov	r3, r0
   10b5c:	cmp	r3, #0
   10b60:	beq	10b7c <binary_search@@Base+0x98>
   10b64:	ldr	r2, [fp, #-36]	; 0xffffffdc
   10b68:	ldr	r1, [fp, #-16]
   10b6c:	ldr	r0, [fp, #-28]	; 0xffffffe4
   10b70:	bl	10890 <get_elem@@Base>
   10b74:	mov	r3, r0
   10b78:	b	10bdc <binary_search@@Base+0xf8>
   10b7c:	ldr	r2, [fp, #-36]	; 0xffffffdc
   10b80:	ldr	r1, [fp, #-16]
   10b84:	ldr	r0, [fp, #-28]	; 0xffffffe4
   10b88:	bl	10890 <get_elem@@Base>
   10b8c:	mov	r2, r0
   10b90:	ldr	r3, [fp, #4]
   10b94:	mov	r1, r2
   10b98:	ldr	r0, [fp, #-24]	; 0xffffffe8
   10b9c:	blx	r3
   10ba0:	mov	r3, r0
   10ba4:	cmn	r3, #1
   10ba8:	bne	10bbc <binary_search@@Base+0xd8>
   10bac:	ldr	r3, [fp, #-16]
   10bb0:	sub	r3, r3, #1
   10bb4:	str	r3, [fp, #-12]
   10bb8:	b	10bc8 <binary_search@@Base+0xe4>
   10bbc:	ldr	r3, [fp, #-16]
   10bc0:	add	r3, r3, #1
   10bc4:	str	r3, [fp, #-8]
   10bc8:	ldr	r2, [fp, #-8]
   10bcc:	ldr	r3, [fp, #-12]
   10bd0:	cmp	r2, r3
   10bd4:	ble	10b18 <binary_search@@Base+0x34>
   10bd8:	mov	r3, #0
   10bdc:	mov	r0, r3
   10be0:	sub	sp, fp, #4
   10be4:	pop	{fp, pc}

00010be8 <insertion_sort@@Base>:
   10be8:	push	{r4, fp, lr}
   10bec:	add	fp, sp, #8
   10bf0:	sub	sp, sp, #28
   10bf4:	str	r0, [fp, #-24]	; 0xffffffe8
   10bf8:	str	r1, [fp, #-28]	; 0xffffffe4
   10bfc:	str	r2, [fp, #-32]	; 0xffffffe0
   10c00:	str	r3, [fp, #-36]	; 0xffffffdc
   10c04:	mov	r3, #1
   10c08:	str	r3, [fp, #-16]
   10c0c:	b	10ccc <insertion_sort@@Base+0xe4>
   10c10:	ldr	r3, [fp, #-16]
   10c14:	str	r3, [fp, #-20]	; 0xffffffec
   10c18:	b	10c68 <insertion_sort@@Base+0x80>
   10c1c:	ldr	r2, [fp, #-32]	; 0xffffffe0
   10c20:	ldr	r1, [fp, #-20]	; 0xffffffec
   10c24:	ldr	r0, [fp, #-24]	; 0xffffffe8
   10c28:	bl	10890 <get_elem@@Base>
   10c2c:	mov	r4, r0
   10c30:	ldr	r3, [fp, #-20]	; 0xffffffec
   10c34:	sub	r3, r3, #1
   10c38:	ldr	r2, [fp, #-32]	; 0xffffffe0
   10c3c:	mov	r1, r3
   10c40:	ldr	r0, [fp, #-24]	; 0xffffffe8
   10c44:	bl	10890 <get_elem@@Base>
   10c48:	mov	r3, r0
   10c4c:	ldr	r2, [fp, #-32]	; 0xffffffe0
   10c50:	mov	r1, r3
   10c54:	mov	r0, r4
   10c58:	bl	108d0 <swap@@Base>
   10c5c:	ldr	r3, [fp, #-20]	; 0xffffffec
   10c60:	sub	r3, r3, #1
   10c64:	str	r3, [fp, #-20]	; 0xffffffec
   10c68:	ldr	r3, [fp, #-20]	; 0xffffffec
   10c6c:	cmp	r3, #0
   10c70:	ble	10cc0 <insertion_sort@@Base+0xd8>
   10c74:	ldr	r2, [fp, #-32]	; 0xffffffe0
   10c78:	ldr	r1, [fp, #-20]	; 0xffffffec
   10c7c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   10c80:	bl	10890 <get_elem@@Base>
   10c84:	mov	r4, r0
   10c88:	ldr	r3, [fp, #-20]	; 0xffffffec
   10c8c:	sub	r3, r3, #1
   10c90:	ldr	r2, [fp, #-32]	; 0xffffffe0
   10c94:	mov	r1, r3
   10c98:	ldr	r0, [fp, #-24]	; 0xffffffe8
   10c9c:	bl	10890 <get_elem@@Base>
   10ca0:	mov	r2, r0
   10ca4:	ldr	r3, [fp, #-36]	; 0xffffffdc
   10ca8:	mov	r1, r2
   10cac:	mov	r0, r4
   10cb0:	blx	r3
   10cb4:	mov	r3, r0
   10cb8:	cmn	r3, #1
   10cbc:	beq	10c1c <insertion_sort@@Base+0x34>
   10cc0:	ldr	r3, [fp, #-16]
   10cc4:	add	r3, r3, #1
   10cc8:	str	r3, [fp, #-16]
   10ccc:	ldr	r2, [fp, #-16]
   10cd0:	ldr	r3, [fp, #-28]	; 0xffffffe4
   10cd4:	cmp	r2, r3
   10cd8:	blt	10c10 <insertion_sort@@Base+0x28>
   10cdc:	nop			; (mov r0, r0)
   10ce0:	sub	sp, fp, #8
   10ce4:	pop	{r4, fp, pc}

00010ce8 <comp_char_desc@@Base>:
   10ce8:	push	{fp}		; (str fp, [sp, #-4]!)
   10cec:	add	fp, sp, #0
   10cf0:	sub	sp, sp, #20
   10cf4:	str	r0, [fp, #-16]
   10cf8:	str	r1, [fp, #-20]	; 0xffffffec
   10cfc:	ldr	r3, [fp, #-16]
   10d00:	ldrb	r3, [r3]
   10d04:	strb	r3, [fp, #-5]
   10d08:	ldr	r3, [fp, #-20]	; 0xffffffec
   10d0c:	ldrb	r3, [r3]
   10d10:	strb	r3, [fp, #-6]
   10d14:	ldrb	r2, [fp, #-5]
   10d18:	ldrb	r3, [fp, #-6]
   10d1c:	cmp	r2, r3
   10d20:	bcs	10d2c <comp_char_desc@@Base+0x44>
   10d24:	mov	r3, #1
   10d28:	b	10d48 <comp_char_desc@@Base+0x60>
   10d2c:	ldrb	r2, [fp, #-5]
   10d30:	ldrb	r3, [fp, #-6]
   10d34:	cmp	r2, r3
   10d38:	bls	10d44 <comp_char_desc@@Base+0x5c>
   10d3c:	mvn	r3, #0
   10d40:	b	10d48 <comp_char_desc@@Base+0x60>
   10d44:	mov	r3, #0
   10d48:	mov	r0, r3
   10d4c:	add	sp, fp, #0
   10d50:	pop	{fp}		; (ldr fp, [sp], #4)
   10d54:	bx	lr

00010d58 <main@@Base>:
   10d58:	push	{fp, lr}
   10d5c:	add	fp, sp, #4
   10d60:	sub	sp, sp, #80	; 0x50
   10d64:	ldr	r3, [pc, #868]	; 110d0 <main@@Base+0x378>
   10d68:	sub	ip, fp, #36	; 0x24
   10d6c:	mov	lr, r3
   10d70:	ldm	lr!, {r0, r1, r2, r3}
   10d74:	stmia	ip!, {r0, r1, r2, r3}
   10d78:	ldm	lr, {r0, r1}
   10d7c:	stm	ip, {r0, r1}
   10d80:	sub	ip, fp, #60	; 0x3c
   10d84:	sub	lr, fp, #36	; 0x24
   10d88:	ldm	lr!, {r0, r1, r2, r3}
   10d8c:	stmia	ip!, {r0, r1, r2, r3}
   10d90:	ldm	lr, {r0, r1}
   10d94:	stm	ip, {r0, r1}
   10d98:	ldr	r0, [pc, #820]	; 110d4 <main@@Base+0x37c>
   10d9c:	bl	106bc <puts@plt>
   10da0:	ldr	r0, [pc, #816]	; 110d8 <main@@Base+0x380>
   10da4:	bl	106b0 <printf@plt>
   10da8:	mov	r3, #0
   10dac:	str	r3, [fp, #-8]
   10db0:	b	10de0 <main@@Base+0x88>
   10db4:	ldr	r3, [fp, #-8]
   10db8:	lsl	r3, r3, #2
   10dbc:	sub	r2, fp, #4
   10dc0:	add	r3, r2, r3
   10dc4:	ldr	r3, [r3, #-56]	; 0xffffffc8
   10dc8:	mov	r1, r3
   10dcc:	ldr	r0, [pc, #776]	; 110dc <main@@Base+0x384>
   10dd0:	bl	106b0 <printf@plt>
   10dd4:	ldr	r3, [fp, #-8]
   10dd8:	add	r3, r3, #1
   10ddc:	str	r3, [fp, #-8]
   10de0:	ldr	r3, [fp, #-8]
   10de4:	cmp	r3, #5
   10de8:	ble	10db4 <main@@Base+0x5c>
   10dec:	ldr	r0, [pc, #748]	; 110e0 <main@@Base+0x388>
   10df0:	bl	106bc <puts@plt>
   10df4:	sub	r0, fp, #60	; 0x3c
   10df8:	ldr	r3, [pc, #740]	; 110e4 <main@@Base+0x38c>
   10dfc:	mov	r2, #4
   10e00:	mov	r1, #6
   10e04:	bl	10968 <sort@@Base>
   10e08:	ldr	r0, [pc, #728]	; 110e8 <main@@Base+0x390>
   10e0c:	bl	106b0 <printf@plt>
   10e10:	mov	r3, #0
   10e14:	str	r3, [fp, #-8]
   10e18:	b	10e48 <main@@Base+0xf0>
   10e1c:	ldr	r3, [fp, #-8]
   10e20:	lsl	r3, r3, #2
   10e24:	sub	r2, fp, #4
   10e28:	add	r3, r2, r3
   10e2c:	ldr	r3, [r3, #-56]	; 0xffffffc8
   10e30:	mov	r1, r3
   10e34:	ldr	r0, [pc, #672]	; 110dc <main@@Base+0x384>
   10e38:	bl	106b0 <printf@plt>
   10e3c:	ldr	r3, [fp, #-8]
   10e40:	add	r3, r3, #1
   10e44:	str	r3, [fp, #-8]
   10e48:	ldr	r3, [fp, #-8]
   10e4c:	cmp	r3, #5
   10e50:	ble	10e1c <main@@Base+0xc4>
   10e54:	ldr	r0, [pc, #644]	; 110e0 <main@@Base+0x388>
   10e58:	bl	106bc <puts@plt>
   10e5c:	sub	ip, fp, #60	; 0x3c
   10e60:	sub	lr, fp, #36	; 0x24
   10e64:	ldm	lr!, {r0, r1, r2, r3}
   10e68:	stmia	ip!, {r0, r1, r2, r3}
   10e6c:	ldm	lr, {r0, r1}
   10e70:	stm	ip, {r0, r1}
   10e74:	ldr	r0, [pc, #624]	; 110ec <main@@Base+0x394>
   10e78:	bl	106bc <puts@plt>
   10e7c:	mov	r3, #4
   10e80:	str	r3, [fp, #-64]	; 0xffffffc0
   10e84:	sub	r1, fp, #60	; 0x3c
   10e88:	sub	r0, fp, #64	; 0x40
   10e8c:	ldr	r3, [pc, #592]	; 110e4 <main@@Base+0x38c>
   10e90:	str	r3, [sp]
   10e94:	mov	r3, #4
   10e98:	mov	r2, #6
   10e9c:	bl	10a48 <linear_search@@Base>
   10ea0:	str	r0, [fp, #-12]
   10ea4:	ldr	r3, [fp, #-12]
   10ea8:	cmp	r3, #0
   10eac:	beq	10ed4 <main@@Base+0x17c>
   10eb0:	ldr	r1, [fp, #-64]	; 0xffffffc0
   10eb4:	ldr	r2, [fp, #-12]
   10eb8:	sub	r3, fp, #60	; 0x3c
   10ebc:	sub	r3, r2, r3
   10ec0:	asr	r3, r3, #2
   10ec4:	mov	r2, r3
   10ec8:	ldr	r0, [pc, #544]	; 110f0 <main@@Base+0x398>
   10ecc:	bl	106b0 <printf@plt>
   10ed0:	b	10ee4 <main@@Base+0x18c>
   10ed4:	ldr	r3, [fp, #-64]	; 0xffffffc0
   10ed8:	mov	r1, r3
   10edc:	ldr	r0, [pc, #528]	; 110f4 <main@@Base+0x39c>
   10ee0:	bl	106b0 <printf@plt>
   10ee4:	sub	ip, fp, #60	; 0x3c
   10ee8:	sub	lr, fp, #36	; 0x24
   10eec:	ldm	lr!, {r0, r1, r2, r3}
   10ef0:	stmia	ip!, {r0, r1, r2, r3}
   10ef4:	ldm	lr, {r0, r1}
   10ef8:	stm	ip, {r0, r1}
   10efc:	sub	r0, fp, #60	; 0x3c
   10f00:	ldr	r3, [pc, #476]	; 110e4 <main@@Base+0x38c>
   10f04:	mov	r2, #4
   10f08:	mov	r1, #6
   10f0c:	bl	10968 <sort@@Base>
   10f10:	ldr	r0, [pc, #480]	; 110f8 <main@@Base+0x3a0>
   10f14:	bl	106bc <puts@plt>
   10f18:	sub	r1, fp, #60	; 0x3c
   10f1c:	sub	r0, fp, #64	; 0x40
   10f20:	ldr	r3, [pc, #444]	; 110e4 <main@@Base+0x38c>
   10f24:	str	r3, [sp]
   10f28:	mov	r3, #4
   10f2c:	mov	r2, #6
   10f30:	bl	10ae4 <binary_search@@Base>
   10f34:	str	r0, [fp, #-12]
   10f38:	ldr	r3, [fp, #-12]
   10f3c:	cmp	r3, #0
   10f40:	beq	10f68 <main@@Base+0x210>
   10f44:	ldr	r1, [fp, #-64]	; 0xffffffc0
   10f48:	ldr	r2, [fp, #-12]
   10f4c:	sub	r3, fp, #60	; 0x3c
   10f50:	sub	r3, r2, r3
   10f54:	asr	r3, r3, #2
   10f58:	mov	r2, r3
   10f5c:	ldr	r0, [pc, #396]	; 110f0 <main@@Base+0x398>
   10f60:	bl	106b0 <printf@plt>
   10f64:	b	10f78 <main@@Base+0x220>
   10f68:	ldr	r3, [fp, #-64]	; 0xffffffc0
   10f6c:	mov	r1, r3
   10f70:	ldr	r0, [pc, #380]	; 110f4 <main@@Base+0x39c>
   10f74:	bl	106b0 <printf@plt>
   10f78:	sub	ip, fp, #60	; 0x3c
   10f7c:	sub	lr, fp, #36	; 0x24
   10f80:	ldm	lr!, {r0, r1, r2, r3}
   10f84:	stmia	ip!, {r0, r1, r2, r3}
   10f88:	ldm	lr, {r0, r1}
   10f8c:	stm	ip, {r0, r1}
   10f90:	ldr	r0, [pc, #356]	; 110fc <main@@Base+0x3a4>
   10f94:	bl	106bc <puts@plt>
   10f98:	ldr	r0, [pc, #312]	; 110d8 <main@@Base+0x380>
   10f9c:	bl	106b0 <printf@plt>
   10fa0:	mov	r3, #0
   10fa4:	str	r3, [fp, #-8]
   10fa8:	b	10fd8 <main@@Base+0x280>
   10fac:	ldr	r3, [fp, #-8]
   10fb0:	lsl	r3, r3, #2
   10fb4:	sub	r2, fp, #4
   10fb8:	add	r3, r2, r3
   10fbc:	ldr	r3, [r3, #-56]	; 0xffffffc8
   10fc0:	mov	r1, r3
   10fc4:	ldr	r0, [pc, #272]	; 110dc <main@@Base+0x384>
   10fc8:	bl	106b0 <printf@plt>
   10fcc:	ldr	r3, [fp, #-8]
   10fd0:	add	r3, r3, #1
   10fd4:	str	r3, [fp, #-8]
   10fd8:	ldr	r3, [fp, #-8]
   10fdc:	cmp	r3, #5
   10fe0:	ble	10fac <main@@Base+0x254>
   10fe4:	ldr	r0, [pc, #244]	; 110e0 <main@@Base+0x388>
   10fe8:	bl	106bc <puts@plt>
   10fec:	sub	r0, fp, #60	; 0x3c
   10ff0:	ldr	r3, [pc, #236]	; 110e4 <main@@Base+0x38c>
   10ff4:	mov	r2, #4
   10ff8:	mov	r1, #6
   10ffc:	bl	10be8 <insertion_sort@@Base>
   11000:	ldr	r0, [pc, #224]	; 110e8 <main@@Base+0x390>
   11004:	bl	106b0 <printf@plt>
   11008:	mov	r3, #0
   1100c:	str	r3, [fp, #-8]
   11010:	b	11040 <main@@Base+0x2e8>
   11014:	ldr	r3, [fp, #-8]
   11018:	lsl	r3, r3, #2
   1101c:	sub	r2, fp, #4
   11020:	add	r3, r2, r3
   11024:	ldr	r3, [r3, #-56]	; 0xffffffc8
   11028:	mov	r1, r3
   1102c:	ldr	r0, [pc, #168]	; 110dc <main@@Base+0x384>
   11030:	bl	106b0 <printf@plt>
   11034:	ldr	r3, [fp, #-8]
   11038:	add	r3, r3, #1
   1103c:	str	r3, [fp, #-8]
   11040:	ldr	r3, [fp, #-8]
   11044:	cmp	r3, #5
   11048:	ble	11014 <main@@Base+0x2bc>
   1104c:	ldr	r0, [pc, #140]	; 110e0 <main@@Base+0x388>
   11050:	bl	106bc <puts@plt>
   11054:	ldr	r0, [pc, #164]	; 11100 <main@@Base+0x3a8>
   11058:	bl	106bc <puts@plt>
   1105c:	ldr	r2, [pc, #160]	; 11104 <main@@Base+0x3ac>
   11060:	sub	r3, fp, #72	; 0x48
   11064:	ldm	r2, {r0, r1}
   11068:	str	r0, [r3]
   1106c:	add	r3, r3, #4
   11070:	strb	r1, [r3]
   11074:	ldr	r0, [pc, #92]	; 110d8 <main@@Base+0x380>
   11078:	bl	106b0 <printf@plt>
   1107c:	sub	r3, fp, #72	; 0x48
   11080:	mov	r0, r3
   11084:	bl	106bc <puts@plt>
   11088:	sub	r3, fp, #72	; 0x48
   1108c:	mov	r0, r3
   11090:	bl	106e0 <strlen@plt>
   11094:	mov	r3, r0
   11098:	mov	r1, r3
   1109c:	sub	r0, fp, #72	; 0x48
   110a0:	ldr	r3, [pc, #96]	; 11108 <main@@Base+0x3b0>
   110a4:	mov	r2, #1
   110a8:	bl	10968 <sort@@Base>
   110ac:	ldr	r0, [pc, #52]	; 110e8 <main@@Base+0x390>
   110b0:	bl	106b0 <printf@plt>
   110b4:	sub	r3, fp, #72	; 0x48
   110b8:	mov	r0, r3
   110bc:	bl	106bc <puts@plt>
   110c0:	mov	r3, #0
   110c4:	mov	r0, r3
   110c8:	sub	sp, fp, #4
   110cc:	pop	{fp, pc}
   110d0:	andeq	r1, r1, r8, lsr #4
   110d4:	andeq	r1, r1, ip, ror r1
   110d8:	andeq	r1, r1, ip, lsl #3
   110dc:	muleq	r1, r4, r1
   110e0:	muleq	r1, r8, r1
   110e4:	andeq	r0, r1, r0, lsr #16
   110e8:	muleq	r1, ip, r1
   110ec:	andeq	r1, r1, r4, lsr #3
   110f0:			; <UNDEFINED> instruction: 0x000111b0
   110f4:	andeq	r1, r1, r0, ror #3
   110f8:	andeq	r1, r1, r4, lsl #4
   110fc:	andeq	r1, r1, r0, lsl r2
   11100:	andeq	r1, r1, ip, lsl r2
   11104:	andeq	r1, r1, r0, asr #4
   11108:	andeq	r0, r1, r8, ror #25

0001110c <__libc_csu_init@@Base>:
   1110c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   11110:	mov	r7, r0
   11114:	ldr	r6, [pc, #72]	; 11164 <__libc_csu_init@@Base+0x58>
   11118:	ldr	r5, [pc, #72]	; 11168 <__libc_csu_init@@Base+0x5c>
   1111c:	add	r6, pc, r6
   11120:	add	r5, pc, r5
   11124:	sub	r6, r6, r5
   11128:	mov	r8, r1
   1112c:	mov	r9, r2
   11130:	bl	10690 <printf@plt-0x20>
   11134:	asrs	r6, r6, #2
   11138:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1113c:	mov	r4, #0
   11140:	add	r4, r4, #1
   11144:	ldr	r3, [r5], #4
   11148:	mov	r2, r9
   1114c:	mov	r1, r8
   11150:	mov	r0, r7
   11154:	blx	r3
   11158:	cmp	r6, r4
   1115c:	bne	11140 <__libc_csu_init@@Base+0x34>
   11160:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   11164:	andeq	r0, r1, ip, ror #27
   11168:	andeq	r0, r1, r4, ror #27

0001116c <__libc_csu_fini@@Base>:
   1116c:	bx	lr

Disassembly of section .fini:

00011170 <.fini>:
   11170:	push	{r3, lr}
   11174:	pop	{r3, pc}
