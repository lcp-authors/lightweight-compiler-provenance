
../compcert-repos/stcorp-coda-3a25f25/CMakeFiles/coda_static.dir/libcoda/coda-check.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <read_bytes>:
       0:	strd	r4, [sp, #-24]!	; 0xffffffe8
       4:	strd	r6, [sp, #8]
       8:	str	fp, [sp, #16]
       c:	str	lr, [sp, #20]
      10:	add	fp, sp, #20
      14:	sub	sp, sp, #96	; 0x60
      18:	str	r0, [fp, #-96]	; 0xffffffa0
      1c:	strd	r2, [fp, #-108]	; 0xffffff94
      20:	ldr	r3, [fp, #-96]	; 0xffffffa0
      24:	ldr	r3, [r3, #48]	; 0x30
      28:	cmp	r3, #0
      2c:	beq	110 <read_bytes+0x110>
      30:	ldrd	r0, [fp, #-108]	; 0xffffff94
      34:	ldrd	r2, [fp, #4]
      38:	adds	r6, r0, r2
      3c:	adc	r7, r1, r3
      40:	ldr	r3, [fp, #-96]	; 0xffffffa0
      44:	ldrd	r2, [r3, #40]	; 0x28
      48:	cmp	r7, r3
      4c:	cmpeq	r6, r2
      50:	bls	ec <read_bytes+0xec>
      54:	ldr	r3, [fp, #-96]	; 0xffffffa0
      58:	ldr	r3, [r3, #16]
      5c:	cmp	r3, #0
      60:	beq	74 <read_bytes+0x74>
      64:	ldr	r3, [fp, #-96]	; 0xffffffa0
      68:	ldr	r3, [r3, #16]
      6c:	cmp	r3, #1
      70:	bne	8c <read_bytes+0x8c>
      74:	movw	r1, #0
      78:	movt	r1, #0
      7c:	mvn	r0, #300	; 0x12c
      80:	bl	0 <coda_set_error>
      84:	mvn	r3, #0
      88:	b	1e8 <read_bytes+0x1e8>
      8c:	sub	r3, fp, #44	; 0x2c
      90:	mov	r2, r3
      94:	ldrd	r0, [fp, #4]
      98:	bl	0 <coda_str64>
      9c:	sub	r3, fp, #68	; 0x44
      a0:	mov	r2, r3
      a4:	ldrd	r0, [fp, #-108]	; 0xffffff94
      a8:	bl	0 <coda_str64>
      ac:	ldr	r3, [fp, #-96]	; 0xffffffa0
      b0:	ldrd	r0, [r3, #40]	; 0x28
      b4:	sub	r3, fp, #92	; 0x5c
      b8:	mov	r2, r3
      bc:	bl	0 <coda_str64>
      c0:	sub	r1, fp, #68	; 0x44
      c4:	sub	r2, fp, #44	; 0x2c
      c8:	sub	r3, fp, #92	; 0x5c
      cc:	str	r3, [sp]
      d0:	mov	r3, r1
      d4:	movw	r1, #0
      d8:	movt	r1, #0
      dc:	mvn	r0, #300	; 0x12c
      e0:	bl	0 <coda_set_error>
      e4:	mvn	r3, #0
      e8:	b	1e8 <read_bytes+0x1e8>
      ec:	ldr	r3, [fp, #-96]	; 0xffffffa0
      f0:	ldr	r2, [r3, #48]	; 0x30
      f4:	ldr	r3, [fp, #-108]	; 0xffffff94
      f8:	add	r3, r2, r3
      fc:	ldr	r2, [fp, #4]
     100:	mov	r1, r3
     104:	ldr	r0, [fp, #12]
     108:	bl	0 <memcpy>
     10c:	b	1e4 <read_bytes+0x1e4>
     110:	ldr	r3, [fp, #-96]	; 0xffffffa0
     114:	ldr	r3, [r3, #16]
     118:	cmp	r3, #0
     11c:	beq	150 <read_bytes+0x150>
     120:	ldr	r3, [fp, #-96]	; 0xffffffa0
     124:	ldr	r3, [r3, #16]
     128:	cmp	r3, #1
     12c:	beq	150 <read_bytes+0x150>
     130:	movw	r3, #0
     134:	movt	r3, #0
     138:	mov	r2, #83	; 0x53
     13c:	movw	r1, #0
     140:	movt	r1, #0
     144:	movw	r0, #0
     148:	movt	r0, #0
     14c:	bl	0 <__assert_fail>
     150:	ldrd	r0, [fp, #-108]	; 0xffffff94
     154:	ldrd	r2, [fp, #4]
     158:	adds	r4, r0, r2
     15c:	adc	r5, r1, r3
     160:	ldr	r3, [fp, #-96]	; 0xffffffa0
     164:	ldrd	r2, [r3, #8]
     168:	cmp	r5, r3
     16c:	cmpeq	r4, r2
     170:	bls	18c <read_bytes+0x18c>
     174:	movw	r1, #0
     178:	movt	r1, #0
     17c:	mvn	r0, #300	; 0x12c
     180:	bl	0 <coda_set_error>
     184:	mvn	r3, #0
     188:	b	1e8 <read_bytes+0x1e8>
     18c:	ldr	r3, [fp, #-96]	; 0xffffffa0
     190:	ldr	r0, [r3, #56]	; 0x38
     194:	ldr	r2, [fp, #4]
     198:	ldr	r3, [fp, #-108]	; 0xffffff94
     19c:	ldr	r1, [fp, #12]
     1a0:	bl	0 <pread>
     1a4:	mov	r3, r0
     1a8:	cmp	r3, #0
     1ac:	bge	1e4 <read_bytes+0x1e4>
     1b0:	bl	0 <__errno_location>
     1b4:	mov	r3, r0
     1b8:	ldr	r3, [r3]
     1bc:	mov	r0, r3
     1c0:	bl	0 <strerror>
     1c4:	mov	r3, r0
     1c8:	mov	r2, r3
     1cc:	movw	r1, #0
     1d0:	movt	r1, #0
     1d4:	mvn	r0, #21
     1d8:	bl	0 <coda_set_error>
     1dc:	mvn	r3, #0
     1e0:	b	1e8 <read_bytes+0x1e8>
     1e4:	mov	r3, #0
     1e8:	mov	r0, r3
     1ec:	sub	sp, fp, #20
     1f0:	ldrd	r4, [sp]
     1f4:	ldrd	r6, [sp, #8]
     1f8:	ldr	fp, [sp, #16]
     1fc:	add	sp, sp, #20
     200:	pop	{pc}		; (ldr pc, [sp], #4)

00000204 <check_definition>:
     204:	str	r4, [sp, #-12]!
     208:	str	fp, [sp, #4]
     20c:	str	lr, [sp, #8]
     210:	add	fp, sp, #8
     214:	sub	sp, sp, #148	; 0x94
     218:	str	r0, [fp, #-136]	; 0xffffff78
     21c:	str	r1, [fp, #-140]	; 0xffffff74
     220:	str	r2, [fp, #-144]	; 0xffffff70
     224:	str	r3, [fp, #-148]	; 0xffffff6c
     228:	ldr	r3, [fp, #-140]	; 0xffffff74
     22c:	ldr	r3, [r3]
     230:	cmp	r3, #0
     234:	bne	240 <check_definition+0x3c>
     238:	mov	r3, #0
     23c:	b	d44 <check_definition+0xb40>
     240:	sub	r3, fp, #40	; 0x28
     244:	mov	r1, r3
     248:	ldr	r0, [fp, #-136]	; 0xffffff78
     24c:	bl	0 <coda_cursor_get_type_class>
     250:	mov	r3, r0
     254:	cmp	r3, #0
     258:	beq	264 <check_definition+0x60>
     25c:	mvn	r3, #0
     260:	b	d44 <check_definition+0xb40>
     264:	ldr	r3, [fp, #-140]	; 0xffffff74
     268:	ldr	r3, [r3]
     26c:	sub	r2, fp, #36	; 0x24
     270:	mov	r1, r2
     274:	mov	r0, r3
     278:	bl	0 <coda_type_get_class>
     27c:	mov	r3, r0
     280:	cmp	r3, #0
     284:	beq	290 <check_definition+0x8c>
     288:	mvn	r3, #0
     28c:	b	d44 <check_definition+0xb40>
     290:	ldr	r2, [fp, #-40]	; 0xffffffd8
     294:	ldr	r3, [fp, #-36]	; 0xffffffdc
     298:	cmp	r2, r3
     29c:	beq	32c <check_definition+0x128>
     2a0:	ldr	r3, [fp, #-40]	; 0xffffffd8
     2a4:	mov	r0, r3
     2a8:	bl	0 <coda_type_get_class_name>
     2ac:	mov	r4, r0
     2b0:	ldr	r3, [fp, #-36]	; 0xffffffdc
     2b4:	mov	r0, r3
     2b8:	bl	0 <coda_type_get_class_name>
     2bc:	mov	r3, r0
     2c0:	mov	r2, r4
     2c4:	movw	r1, #0
     2c8:	movt	r1, #0
     2cc:	movw	r0, #65236	; 0xfed4
     2d0:	movt	r0, #65535	; 0xffff
     2d4:	bl	0 <coda_set_error>
     2d8:	ldr	r3, [pc, #2684]	; d5c <check_definition+0xb58>
     2dc:	ldr	r3, [pc, r3]
     2e0:	mrc	15, 0, r2, cr13, cr0, {3}
     2e4:	ldr	r3, [r2, r3]
     2e8:	mov	r0, r3
     2ec:	bl	0 <coda_errno_to_string>
     2f0:	mov	r1, r0
     2f4:	ldr	r3, [fp, #-144]	; 0xffffff70
     2f8:	ldr	r2, [fp, #-148]	; 0xffffff6c
     2fc:	ldr	r0, [fp, #-136]	; 0xffffff78
     300:	blx	r3
     304:	ldr	r3, [pc, #2644]	; d60 <check_definition+0xb5c>
     308:	ldr	r3, [pc, r3]
     30c:	mrc	15, 0, r2, cr13, cr0, {3}
     310:	mov	r1, #0
     314:	str	r1, [r2, r3]
     318:	ldr	r3, [fp, #-140]	; 0xffffff74
     31c:	mov	r2, #0
     320:	str	r2, [r3]
     324:	mov	r3, #0
     328:	b	d44 <check_definition+0xb40>
     32c:	ldr	r3, [fp, #-40]	; 0xffffffd8
     330:	cmp	r3, #6
     334:	ldrls	pc, [pc, r3, lsl #2]
     338:	b	d40 <check_definition+0xb3c>
     33c:	.word	0x00000668
     340:	.word	0x00000358
     344:	.word	0x00000b94
     348:	.word	0x00000b94
     34c:	.word	0x00000d40
     350:	.word	0x00000d40
     354:	.word	0x00000c54
     358:	ldr	r3, [fp, #-140]	; 0xffffff74
     35c:	ldr	r3, [r3]
     360:	str	r3, [fp, #-24]	; 0xffffffe8
     364:	sub	r2, fp, #128	; 0x80
     368:	sub	r3, fp, #44	; 0x2c
     36c:	mov	r1, r3
     370:	ldr	r0, [fp, #-136]	; 0xffffff78
     374:	bl	0 <coda_cursor_get_array_dim>
     378:	mov	r3, r0
     37c:	cmp	r3, #0
     380:	beq	38c <check_definition+0x188>
     384:	mvn	r3, #0
     388:	b	d44 <check_definition+0xb40>
     38c:	ldr	r3, [fp, #-24]	; 0xffffffe8
     390:	ldr	r2, [r3, #48]	; 0x30
     394:	ldr	r3, [fp, #-44]	; 0xffffffd4
     398:	cmp	r2, r3
     39c:	beq	408 <check_definition+0x204>
     3a0:	ldr	r2, [fp, #-44]	; 0xffffffd4
     3a4:	ldr	r3, [fp, #-24]	; 0xffffffe8
     3a8:	ldr	r3, [r3, #48]	; 0x30
     3ac:	movw	r1, #0
     3b0:	movt	r1, #0
     3b4:	movw	r0, #65236	; 0xfed4
     3b8:	movt	r0, #65535	; 0xffff
     3bc:	bl	0 <coda_set_error>
     3c0:	ldr	r3, [pc, #2460]	; d64 <check_definition+0xb60>
     3c4:	ldr	r3, [pc, r3]
     3c8:	mrc	15, 0, r2, cr13, cr0, {3}
     3cc:	ldr	r3, [r2, r3]
     3d0:	mov	r0, r3
     3d4:	bl	0 <coda_errno_to_string>
     3d8:	mov	r1, r0
     3dc:	ldr	r3, [fp, #-144]	; 0xffffff70
     3e0:	ldr	r2, [fp, #-148]	; 0xffffff6c
     3e4:	ldr	r0, [fp, #-136]	; 0xffffff78
     3e8:	blx	r3
     3ec:	ldr	r3, [pc, #2420]	; d68 <check_definition+0xb64>
     3f0:	ldr	r3, [pc, r3]
     3f4:	mrc	15, 0, r2, cr13, cr0, {3}
     3f8:	mov	r1, #0
     3fc:	str	r1, [r2, r3]
     400:	mov	r3, #0
     404:	b	d44 <check_definition+0xb40>
     408:	mov	r3, #0
     40c:	str	r3, [fp, #-16]
     410:	b	654 <check_definition+0x450>
     414:	ldr	r2, [fp, #-24]	; 0xffffffe8
     418:	ldr	r3, [fp, #-16]
     41c:	add	r3, r3, #12
     420:	lsl	r3, r3, #2
     424:	add	r3, r2, r3
     428:	ldr	r3, [r3, #4]
     42c:	cmp	r3, #0
     430:	blt	4f8 <check_definition+0x2f4>
     434:	ldr	r3, [fp, #-16]
     438:	lsl	r3, r3, #2
     43c:	sub	r2, fp, #12
     440:	add	r3, r2, r3
     444:	ldr	r2, [r3, #-116]	; 0xffffff8c
     448:	ldr	r1, [fp, #-24]	; 0xffffffe8
     44c:	ldr	r3, [fp, #-16]
     450:	add	r3, r3, #12
     454:	lsl	r3, r3, #2
     458:	add	r3, r1, r3
     45c:	ldr	r3, [r3, #4]
     460:	cmp	r2, r3
     464:	beq	648 <check_definition+0x444>
     468:	ldr	r3, [fp, #-16]
     46c:	lsl	r3, r3, #2
     470:	sub	r2, fp, #12
     474:	add	r3, r2, r3
     478:	ldr	r1, [r3, #-116]	; 0xffffff8c
     47c:	ldr	r2, [fp, #-24]	; 0xffffffe8
     480:	ldr	r3, [fp, #-16]
     484:	add	r3, r3, #12
     488:	lsl	r3, r3, #2
     48c:	add	r3, r2, r3
     490:	ldr	r3, [r3, #4]
     494:	str	r3, [sp]
     498:	mov	r3, r1
     49c:	ldr	r2, [fp, #-16]
     4a0:	movw	r1, #0
     4a4:	movt	r1, #0
     4a8:	movw	r0, #65236	; 0xfed4
     4ac:	movt	r0, #65535	; 0xffff
     4b0:	bl	0 <coda_set_error>
     4b4:	ldr	r3, [pc, #2224]	; d6c <check_definition+0xb68>
     4b8:	ldr	r3, [pc, r3]
     4bc:	mrc	15, 0, r2, cr13, cr0, {3}
     4c0:	ldr	r3, [r2, r3]
     4c4:	mov	r0, r3
     4c8:	bl	0 <coda_errno_to_string>
     4cc:	mov	r1, r0
     4d0:	ldr	r3, [fp, #-144]	; 0xffffff70
     4d4:	ldr	r2, [fp, #-148]	; 0xffffff6c
     4d8:	ldr	r0, [fp, #-136]	; 0xffffff78
     4dc:	blx	r3
     4e0:	ldr	r3, [pc, #2184]	; d70 <check_definition+0xb6c>
     4e4:	ldr	r3, [pc, r3]
     4e8:	mrc	15, 0, r2, cr13, cr0, {3}
     4ec:	mov	r1, #0
     4f0:	str	r1, [r2, r3]
     4f4:	b	648 <check_definition+0x444>
     4f8:	ldr	r2, [fp, #-24]	; 0xffffffe8
     4fc:	ldr	r3, [fp, #-16]
     500:	add	r3, r3, #20
     504:	lsl	r3, r3, #2
     508:	add	r3, r2, r3
     50c:	ldr	r3, [r3, #4]
     510:	cmp	r3, #0
     514:	beq	648 <check_definition+0x444>
     518:	ldr	r2, [fp, #-24]	; 0xffffffe8
     51c:	ldr	r3, [fp, #-16]
     520:	add	r3, r3, #20
     524:	lsl	r3, r3, #2
     528:	add	r3, r2, r3
     52c:	ldr	r3, [r3, #4]
     530:	sub	r2, fp, #52	; 0x34
     534:	ldr	r1, [fp, #-136]	; 0xffffff78
     538:	mov	r0, r3
     53c:	bl	0 <coda_expression_eval_integer>
     540:	mov	r3, r0
     544:	cmp	r3, #0
     548:	beq	5a0 <check_definition+0x39c>
     54c:	ldr	r1, [fp, #-16]
     550:	movw	r0, #0
     554:	movt	r0, #0
     558:	bl	0 <coda_add_error_message>
     55c:	ldr	r3, [pc, #2064]	; d74 <check_definition+0xb70>
     560:	ldr	r3, [pc, r3]
     564:	mrc	15, 0, r2, cr13, cr0, {3}
     568:	ldr	r3, [r2, r3]
     56c:	mov	r0, r3
     570:	bl	0 <coda_errno_to_string>
     574:	mov	r1, r0
     578:	ldr	r3, [fp, #-144]	; 0xffffff70
     57c:	ldr	r2, [fp, #-148]	; 0xffffff6c
     580:	ldr	r0, [fp, #-136]	; 0xffffff78
     584:	blx	r3
     588:	ldr	r3, [pc, #2024]	; d78 <check_definition+0xb74>
     58c:	ldr	r3, [pc, r3]
     590:	mrc	15, 0, r2, cr13, cr0, {3}
     594:	mov	r1, #0
     598:	str	r1, [r2, r3]
     59c:	b	648 <check_definition+0x444>
     5a0:	ldr	r3, [fp, #-16]
     5a4:	lsl	r3, r3, #2
     5a8:	sub	r2, fp, #12
     5ac:	add	r3, r2, r3
     5b0:	ldr	r3, [r3, #-116]	; 0xffffff8c
     5b4:	mov	r0, r3
     5b8:	asr	r1, r0, #31
     5bc:	ldrd	r2, [fp, #-52]	; 0xffffffcc
     5c0:	cmp	r1, r3
     5c4:	cmpeq	r0, r2
     5c8:	beq	648 <check_definition+0x444>
     5cc:	ldr	r3, [fp, #-16]
     5d0:	lsl	r3, r3, #2
     5d4:	sub	r2, fp, #12
     5d8:	add	r3, r2, r3
     5dc:	ldr	r1, [r3, #-116]	; 0xffffff8c
     5e0:	ldrd	r2, [fp, #-52]	; 0xffffffcc
     5e4:	mov	r3, r2
     5e8:	str	r3, [sp]
     5ec:	mov	r3, r1
     5f0:	ldr	r2, [fp, #-16]
     5f4:	movw	r1, #0
     5f8:	movt	r1, #0
     5fc:	movw	r0, #65236	; 0xfed4
     600:	movt	r0, #65535	; 0xffff
     604:	bl	0 <coda_set_error>
     608:	ldr	r3, [pc, #1900]	; d7c <check_definition+0xb78>
     60c:	ldr	r3, [pc, r3]
     610:	mrc	15, 0, r2, cr13, cr0, {3}
     614:	ldr	r3, [r2, r3]
     618:	mov	r0, r3
     61c:	bl	0 <coda_errno_to_string>
     620:	mov	r1, r0
     624:	ldr	r3, [fp, #-144]	; 0xffffff70
     628:	ldr	r2, [fp, #-148]	; 0xffffff6c
     62c:	ldr	r0, [fp, #-136]	; 0xffffff78
     630:	blx	r3
     634:	ldr	r3, [pc, #1860]	; d80 <check_definition+0xb7c>
     638:	ldr	r3, [pc, r3]
     63c:	mrc	15, 0, r2, cr13, cr0, {3}
     640:	mov	r1, #0
     644:	str	r1, [r2, r3]
     648:	ldr	r3, [fp, #-16]
     64c:	add	r3, r3, #1
     650:	str	r3, [fp, #-16]
     654:	ldr	r3, [fp, #-44]	; 0xffffffd4
     658:	ldr	r2, [fp, #-16]
     65c:	cmp	r2, r3
     660:	blt	414 <check_definition+0x210>
     664:	b	d40 <check_definition+0xb3c>
     668:	ldr	r3, [fp, #-140]	; 0xffffff74
     66c:	ldr	r3, [r3]
     670:	str	r3, [fp, #-28]	; 0xffffffe4
     674:	sub	r3, fp, #56	; 0x38
     678:	mov	r1, r3
     67c:	ldr	r0, [fp, #-136]	; 0xffffff78
     680:	bl	0 <coda_cursor_get_type>
     684:	mov	r3, r0
     688:	cmp	r3, #0
     68c:	beq	698 <check_definition+0x494>
     690:	mvn	r3, #0
     694:	b	d44 <check_definition+0xb40>
     698:	mov	r3, #0
     69c:	str	r3, [fp, #-20]	; 0xffffffec
     6a0:	b	a70 <check_definition+0x86c>
     6a4:	mov	r3, #1
     6a8:	str	r3, [fp, #-64]	; 0xffffffc0
     6ac:	mov	r3, #1
     6b0:	str	r3, [fp, #-68]	; 0xffffffbc
     6b4:	ldr	r3, [fp, #-28]	; 0xffffffe4
     6b8:	ldr	r2, [r3, #52]	; 0x34
     6bc:	ldr	r3, [fp, #-20]	; 0xffffffec
     6c0:	lsl	r3, r3, #2
     6c4:	add	r3, r2, r3
     6c8:	ldr	r3, [r3]
     6cc:	ldr	r3, [r3]
     6d0:	sub	r2, fp, #72	; 0x48
     6d4:	mov	r1, r3
     6d8:	ldr	r0, [fp, #-136]	; 0xffffff78
     6dc:	bl	0 <coda_cursor_get_record_field_index_from_name>
     6e0:	mov	r3, r0
     6e4:	cmp	r3, #0
     6e8:	beq	72c <check_definition+0x528>
     6ec:	ldr	r3, [pc, #1680]	; d84 <check_definition+0xb80>
     6f0:	ldr	r3, [pc, r3]
     6f4:	mrc	15, 0, r2, cr13, cr0, {3}
     6f8:	ldr	r3, [r2, r3]
     6fc:	cmn	r3, #102	; 0x66
     700:	beq	70c <check_definition+0x508>
     704:	mvn	r3, #0
     708:	b	d44 <check_definition+0xb40>
     70c:	ldr	r3, [pc, #1652]	; d88 <check_definition+0xb84>
     710:	ldr	r3, [pc, r3]
     714:	mrc	15, 0, r2, cr13, cr0, {3}
     718:	mov	r1, #0
     71c:	str	r1, [r2, r3]
     720:	mov	r3, #0
     724:	str	r3, [fp, #-68]	; 0xffffffbc
     728:	b	754 <check_definition+0x550>
     72c:	ldr	r3, [fp, #-72]	; 0xffffffb8
     730:	sub	r2, fp, #68	; 0x44
     734:	mov	r1, r3
     738:	ldr	r0, [fp, #-136]	; 0xffffff78
     73c:	bl	0 <coda_cursor_get_record_field_available_status>
     740:	mov	r3, r0
     744:	cmp	r3, #0
     748:	beq	754 <check_definition+0x550>
     74c:	mvn	r3, #0
     750:	b	d44 <check_definition+0xb40>
     754:	ldr	r3, [fp, #-28]	; 0xffffffe4
     758:	ldr	r2, [r3, #52]	; 0x34
     75c:	ldr	r3, [fp, #-20]	; 0xffffffec
     760:	lsl	r3, r3, #2
     764:	add	r3, r2, r3
     768:	ldr	r3, [r3]
     76c:	ldrb	r3, [r3, #16]
     770:	cmp	r3, #0
     774:	beq	84c <check_definition+0x648>
     778:	ldr	r3, [fp, #-28]	; 0xffffffe4
     77c:	ldr	r2, [r3, #52]	; 0x34
     780:	ldr	r3, [fp, #-20]	; 0xffffffec
     784:	lsl	r3, r3, #2
     788:	add	r3, r2, r3
     78c:	ldr	r3, [r3]
     790:	ldr	r3, [r3, #20]
     794:	cmp	r3, #0
     798:	beq	844 <check_definition+0x640>
     79c:	ldr	r3, [fp, #-28]	; 0xffffffe4
     7a0:	ldr	r2, [r3, #52]	; 0x34
     7a4:	ldr	r3, [fp, #-20]	; 0xffffffec
     7a8:	lsl	r3, r3, #2
     7ac:	add	r3, r2, r3
     7b0:	ldr	r3, [r3]
     7b4:	ldr	r3, [r3, #20]
     7b8:	sub	r2, fp, #64	; 0x40
     7bc:	ldr	r1, [fp, #-136]	; 0xffffff78
     7c0:	mov	r0, r3
     7c4:	bl	0 <coda_expression_eval_bool>
     7c8:	mov	r3, r0
     7cc:	cmp	r3, #0
     7d0:	beq	84c <check_definition+0x648>
     7d4:	ldr	r3, [fp, #-28]	; 0xffffffe4
     7d8:	ldr	r2, [r3, #52]	; 0x34
     7dc:	ldr	r3, [fp, #-20]	; 0xffffffec
     7e0:	lsl	r3, r3, #2
     7e4:	add	r3, r2, r3
     7e8:	ldr	r3, [r3]
     7ec:	ldr	r3, [r3]
     7f0:	mov	r1, r3
     7f4:	movw	r0, #0
     7f8:	movt	r0, #0
     7fc:	bl	0 <coda_add_error_message>
     800:	ldr	r3, [pc, #1412]	; d8c <check_definition+0xb88>
     804:	ldr	r3, [pc, r3]
     808:	mrc	15, 0, r2, cr13, cr0, {3}
     80c:	ldr	r3, [r2, r3]
     810:	mov	r0, r3
     814:	bl	0 <coda_errno_to_string>
     818:	mov	r1, r0
     81c:	ldr	r3, [fp, #-144]	; 0xffffff70
     820:	ldr	r2, [fp, #-148]	; 0xffffff6c
     824:	ldr	r0, [fp, #-136]	; 0xffffff78
     828:	blx	r3
     82c:	ldr	r3, [pc, #1372]	; d90 <check_definition+0xb8c>
     830:	ldr	r3, [pc, r3]
     834:	mrc	15, 0, r2, cr13, cr0, {3}
     838:	mov	r1, #0
     83c:	str	r1, [r2, r3]
     840:	b	84c <check_definition+0x648>
     844:	mvn	r3, #0
     848:	str	r3, [fp, #-64]	; 0xffffffc0
     84c:	ldr	r3, [fp, #-64]	; 0xffffffc0
     850:	cmn	r3, #1
     854:	beq	924 <check_definition+0x720>
     858:	ldr	r2, [fp, #-68]	; 0xffffffbc
     85c:	ldr	r3, [fp, #-64]	; 0xffffffc0
     860:	cmp	r2, r3
     864:	beq	924 <check_definition+0x720>
     868:	ldr	r3, [fp, #-28]	; 0xffffffe4
     86c:	ldr	r2, [r3, #52]	; 0x34
     870:	ldr	r3, [fp, #-20]	; 0xffffffec
     874:	lsl	r3, r3, #2
     878:	add	r3, r2, r3
     87c:	ldr	r3, [r3]
     880:	ldr	r1, [r3]
     884:	ldr	r3, [fp, #-68]	; 0xffffffbc
     888:	cmp	r3, #0
     88c:	beq	89c <check_definition+0x698>
     890:	movw	r2, #0
     894:	movt	r2, #0
     898:	b	8a4 <check_definition+0x6a0>
     89c:	movw	r2, #0
     8a0:	movt	r2, #0
     8a4:	ldr	r3, [fp, #-64]	; 0xffffffc0
     8a8:	cmp	r3, #0
     8ac:	beq	8bc <check_definition+0x6b8>
     8b0:	movw	r3, #0
     8b4:	movt	r3, #0
     8b8:	b	8c4 <check_definition+0x6c0>
     8bc:	movw	r3, #0
     8c0:	movt	r3, #0
     8c4:	str	r3, [sp]
     8c8:	mov	r3, r2
     8cc:	mov	r2, r1
     8d0:	movw	r1, #0
     8d4:	movt	r1, #0
     8d8:	movw	r0, #65236	; 0xfed4
     8dc:	movt	r0, #65535	; 0xffff
     8e0:	bl	0 <coda_set_error>
     8e4:	ldr	r3, [pc, #1192]	; d94 <check_definition+0xb90>
     8e8:	ldr	r3, [pc, r3]
     8ec:	mrc	15, 0, r2, cr13, cr0, {3}
     8f0:	ldr	r3, [r2, r3]
     8f4:	mov	r0, r3
     8f8:	bl	0 <coda_errno_to_string>
     8fc:	mov	r1, r0
     900:	ldr	r3, [fp, #-144]	; 0xffffff70
     904:	ldr	r2, [fp, #-148]	; 0xffffff6c
     908:	ldr	r0, [fp, #-136]	; 0xffffff78
     90c:	blx	r3
     910:	ldr	r3, [pc, #1152]	; d98 <check_definition+0xb94>
     914:	ldr	r3, [pc, r3]
     918:	mrc	15, 0, r2, cr13, cr0, {3}
     91c:	mov	r1, #0
     920:	str	r1, [r2, r3]
     924:	ldr	r3, [fp, #-68]	; 0xffffffbc
     928:	cmp	r3, #0
     92c:	beq	a64 <check_definition+0x860>
     930:	ldr	r3, [fp, #-64]	; 0xffffffc0
     934:	cmp	r3, #0
     938:	beq	a64 <check_definition+0x860>
     93c:	ldr	r3, [fp, #-56]	; 0xffffffc8
     940:	ldr	r1, [fp, #-72]	; 0xffffffb8
     944:	sub	r2, fp, #76	; 0x4c
     948:	mov	r0, r3
     94c:	bl	0 <coda_type_get_record_field_real_name>
     950:	mov	r3, r0
     954:	cmp	r3, #0
     958:	beq	964 <check_definition+0x760>
     95c:	mvn	r3, #0
     960:	b	d44 <check_definition+0xb40>
     964:	ldr	r3, [fp, #-28]	; 0xffffffe4
     968:	ldr	r2, [r3, #52]	; 0x34
     96c:	ldr	r3, [fp, #-20]	; 0xffffffec
     970:	lsl	r3, r3, #2
     974:	add	r3, r2, r3
     978:	ldr	r3, [r3]
     97c:	ldr	r3, [r3, #4]
     980:	cmp	r3, #0
     984:	beq	9a8 <check_definition+0x7a4>
     988:	ldr	r3, [fp, #-28]	; 0xffffffe4
     98c:	ldr	r2, [r3, #52]	; 0x34
     990:	ldr	r3, [fp, #-20]	; 0xffffffec
     994:	lsl	r3, r3, #2
     998:	add	r3, r2, r3
     99c:	ldr	r3, [r3]
     9a0:	ldr	r3, [r3, #4]
     9a4:	b	9c4 <check_definition+0x7c0>
     9a8:	ldr	r3, [fp, #-28]	; 0xffffffe4
     9ac:	ldr	r2, [r3, #52]	; 0x34
     9b0:	ldr	r3, [fp, #-20]	; 0xffffffec
     9b4:	lsl	r3, r3, #2
     9b8:	add	r3, r2, r3
     9bc:	ldr	r3, [r3]
     9c0:	ldr	r3, [r3]
     9c4:	str	r3, [fp, #-32]	; 0xffffffe0
     9c8:	ldr	r3, [fp, #-76]	; 0xffffffb4
     9cc:	ldr	r1, [fp, #-32]	; 0xffffffe0
     9d0:	mov	r0, r3
     9d4:	bl	0 <strcmp>
     9d8:	mov	r3, r0
     9dc:	cmp	r3, #0
     9e0:	beq	a64 <check_definition+0x860>
     9e4:	ldr	r3, [fp, #-28]	; 0xffffffe4
     9e8:	ldr	r2, [r3, #52]	; 0x34
     9ec:	ldr	r3, [fp, #-20]	; 0xffffffec
     9f0:	lsl	r3, r3, #2
     9f4:	add	r3, r2, r3
     9f8:	ldr	r3, [r3]
     9fc:	ldr	r2, [r3]
     a00:	ldr	r1, [fp, #-76]	; 0xffffffb4
     a04:	ldr	r3, [fp, #-32]	; 0xffffffe0
     a08:	str	r3, [sp]
     a0c:	mov	r3, r1
     a10:	movw	r1, #0
     a14:	movt	r1, #0
     a18:	movw	r0, #65236	; 0xfed4
     a1c:	movt	r0, #65535	; 0xffff
     a20:	bl	0 <coda_set_error>
     a24:	ldr	r3, [pc, #880]	; d9c <check_definition+0xb98>
     a28:	ldr	r3, [pc, r3]
     a2c:	mrc	15, 0, r2, cr13, cr0, {3}
     a30:	ldr	r3, [r2, r3]
     a34:	mov	r0, r3
     a38:	bl	0 <coda_errno_to_string>
     a3c:	mov	r1, r0
     a40:	ldr	r3, [fp, #-144]	; 0xffffff70
     a44:	ldr	r2, [fp, #-148]	; 0xffffff6c
     a48:	ldr	r0, [fp, #-136]	; 0xffffff78
     a4c:	blx	r3
     a50:	ldr	r3, [pc, #840]	; da0 <check_definition+0xb9c>
     a54:	ldr	r3, [pc, r3]
     a58:	mrc	15, 0, r2, cr13, cr0, {3}
     a5c:	mov	r1, #0
     a60:	str	r1, [r2, r3]
     a64:	ldr	r3, [fp, #-20]	; 0xffffffec
     a68:	add	r3, r3, #1
     a6c:	str	r3, [fp, #-20]	; 0xffffffec
     a70:	ldr	r3, [fp, #-28]	; 0xffffffe4
     a74:	ldr	r3, [r3, #48]	; 0x30
     a78:	ldr	r2, [fp, #-20]	; 0xffffffec
     a7c:	cmp	r2, r3
     a80:	blt	6a4 <check_definition+0x4a0>
     a84:	sub	r3, fp, #60	; 0x3c
     a88:	mov	r1, r3
     a8c:	ldr	r0, [fp, #-136]	; 0xffffff78
     a90:	bl	0 <coda_cursor_get_num_elements>
     a94:	mov	r3, r0
     a98:	cmp	r3, #0
     a9c:	beq	aa8 <check_definition+0x8a4>
     aa0:	mvn	r3, #0
     aa4:	b	d44 <check_definition+0xb40>
     aa8:	mov	r3, #0
     aac:	str	r3, [fp, #-20]	; 0xffffffec
     ab0:	b	b80 <check_definition+0x97c>
     ab4:	ldr	r3, [fp, #-56]	; 0xffffffc8
     ab8:	sub	r2, fp, #80	; 0x50
     abc:	ldr	r1, [fp, #-20]	; 0xffffffec
     ac0:	mov	r0, r3
     ac4:	bl	0 <coda_type_get_record_field_name>
     ac8:	mov	r3, r0
     acc:	cmp	r3, #0
     ad0:	beq	adc <check_definition+0x8d8>
     ad4:	mvn	r3, #0
     ad8:	b	d44 <check_definition+0xb40>
     adc:	ldr	r3, [fp, #-140]	; 0xffffff74
     ae0:	ldr	r3, [r3]
     ae4:	ldr	r1, [fp, #-80]	; 0xffffffb0
     ae8:	sub	r2, fp, #84	; 0x54
     aec:	mov	r0, r3
     af0:	bl	0 <coda_type_get_record_field_index_from_name>
     af4:	mov	r3, r0
     af8:	cmp	r3, #0
     afc:	beq	b74 <check_definition+0x970>
     b00:	ldr	r3, [pc, #668]	; da4 <check_definition+0xba0>
     b04:	ldr	r3, [pc, r3]
     b08:	mrc	15, 0, r2, cr13, cr0, {3}
     b0c:	ldr	r3, [r2, r3]
     b10:	cmn	r3, #102	; 0x66
     b14:	bne	b74 <check_definition+0x970>
     b18:	ldr	r3, [fp, #-80]	; 0xffffffb0
     b1c:	mov	r2, r3
     b20:	movw	r1, #0
     b24:	movt	r1, #0
     b28:	movw	r0, #65236	; 0xfed4
     b2c:	movt	r0, #65535	; 0xffff
     b30:	bl	0 <coda_set_error>
     b34:	ldr	r3, [pc, #620]	; da8 <check_definition+0xba4>
     b38:	ldr	r3, [pc, r3]
     b3c:	mrc	15, 0, r2, cr13, cr0, {3}
     b40:	ldr	r3, [r2, r3]
     b44:	mov	r0, r3
     b48:	bl	0 <coda_errno_to_string>
     b4c:	mov	r1, r0
     b50:	ldr	r3, [fp, #-144]	; 0xffffff70
     b54:	ldr	r2, [fp, #-148]	; 0xffffff6c
     b58:	ldr	r0, [fp, #-136]	; 0xffffff78
     b5c:	blx	r3
     b60:	ldr	r3, [pc, #580]	; dac <check_definition+0xba8>
     b64:	ldr	r3, [pc, r3]
     b68:	mrc	15, 0, r2, cr13, cr0, {3}
     b6c:	mov	r1, #0
     b70:	str	r1, [r2, r3]
     b74:	ldr	r3, [fp, #-20]	; 0xffffffec
     b78:	add	r3, r3, #1
     b7c:	str	r3, [fp, #-20]	; 0xffffffec
     b80:	ldr	r3, [fp, #-60]	; 0xffffffc4
     b84:	ldr	r2, [fp, #-20]	; 0xffffffec
     b88:	cmp	r2, r3
     b8c:	blt	ab4 <check_definition+0x8b0>
     b90:	b	d40 <check_definition+0xb3c>
     b94:	sub	r3, fp, #88	; 0x58
     b98:	mov	r1, r3
     b9c:	ldr	r0, [fp, #-136]	; 0xffffff78
     ba0:	bl	0 <coda_cursor_get_read_type>
     ba4:	mov	r3, r0
     ba8:	cmp	r3, #0
     bac:	beq	bb8 <check_definition+0x9b4>
     bb0:	mvn	r3, #0
     bb4:	b	d44 <check_definition+0xb40>
     bb8:	ldr	r3, [fp, #-140]	; 0xffffff74
     bbc:	ldr	r3, [r3]
     bc0:	ldr	r2, [r3, #12]
     bc4:	ldr	r3, [fp, #-88]	; 0xffffffa8
     bc8:	cmp	r2, r3
     bcc:	beq	d3c <check_definition+0xb38>
     bd0:	ldr	r3, [fp, #-88]	; 0xffffffa8
     bd4:	mov	r0, r3
     bd8:	bl	0 <coda_type_get_native_type_name>
     bdc:	mov	r4, r0
     be0:	ldr	r3, [fp, #-140]	; 0xffffff74
     be4:	ldr	r3, [r3]
     be8:	ldr	r3, [r3, #12]
     bec:	mov	r0, r3
     bf0:	bl	0 <coda_type_get_native_type_name>
     bf4:	mov	r3, r0
     bf8:	mov	r2, r4
     bfc:	movw	r1, #0
     c00:	movt	r1, #0
     c04:	movw	r0, #65236	; 0xfed4
     c08:	movt	r0, #65535	; 0xffff
     c0c:	bl	0 <coda_set_error>
     c10:	ldr	r3, [pc, #408]	; db0 <check_definition+0xbac>
     c14:	ldr	r3, [pc, r3]
     c18:	mrc	15, 0, r2, cr13, cr0, {3}
     c1c:	ldr	r3, [r2, r3]
     c20:	mov	r0, r3
     c24:	bl	0 <coda_errno_to_string>
     c28:	mov	r1, r0
     c2c:	ldr	r3, [fp, #-144]	; 0xffffff70
     c30:	ldr	r2, [fp, #-148]	; 0xffffff6c
     c34:	ldr	r0, [fp, #-136]	; 0xffffff78
     c38:	blx	r3
     c3c:	ldr	r3, [pc, #368]	; db4 <check_definition+0xbb0>
     c40:	ldr	r3, [pc, r3]
     c44:	mrc	15, 0, r2, cr13, cr0, {3}
     c48:	mov	r1, #0
     c4c:	str	r1, [r2, r3]
     c50:	b	d3c <check_definition+0xb38>
     c54:	sub	r3, fp, #92	; 0x5c
     c58:	mov	r1, r3
     c5c:	ldr	r0, [fp, #-136]	; 0xffffff78
     c60:	bl	0 <coda_cursor_get_special_type>
     c64:	mov	r3, r0
     c68:	cmp	r3, #0
     c6c:	beq	c78 <check_definition+0xa74>
     c70:	mvn	r3, #0
     c74:	b	d44 <check_definition+0xb40>
     c78:	ldr	r3, [fp, #-140]	; 0xffffff74
     c7c:	ldr	r3, [r3]
     c80:	sub	r2, fp, #96	; 0x60
     c84:	mov	r1, r2
     c88:	mov	r0, r3
     c8c:	bl	0 <coda_type_get_special_type>
     c90:	mov	r3, r0
     c94:	cmp	r3, #0
     c98:	beq	ca4 <check_definition+0xaa0>
     c9c:	mvn	r3, #0
     ca0:	b	d44 <check_definition+0xb40>
     ca4:	ldr	r2, [fp, #-92]	; 0xffffffa4
     ca8:	ldr	r3, [fp, #-96]	; 0xffffffa0
     cac:	cmp	r2, r3
     cb0:	beq	d2c <check_definition+0xb28>
     cb4:	ldr	r3, [fp, #-92]	; 0xffffffa4
     cb8:	mov	r0, r3
     cbc:	bl	0 <coda_type_get_special_type_name>
     cc0:	mov	r4, r0
     cc4:	ldr	r3, [fp, #-96]	; 0xffffffa0
     cc8:	mov	r0, r3
     ccc:	bl	0 <coda_type_get_special_type_name>
     cd0:	mov	r3, r0
     cd4:	mov	r2, r4
     cd8:	movw	r1, #0
     cdc:	movt	r1, #0
     ce0:	movw	r0, #65236	; 0xfed4
     ce4:	movt	r0, #65535	; 0xffff
     ce8:	bl	0 <coda_set_error>
     cec:	ldr	r3, [pc, #196]	; db8 <check_definition+0xbb4>
     cf0:	ldr	r3, [pc, r3]
     cf4:	mrc	15, 0, r2, cr13, cr0, {3}
     cf8:	ldr	r3, [r2, r3]
     cfc:	mov	r0, r3
     d00:	bl	0 <coda_errno_to_string>
     d04:	mov	r1, r0
     d08:	ldr	r3, [fp, #-144]	; 0xffffff70
     d0c:	ldr	r2, [fp, #-148]	; 0xffffff6c
     d10:	ldr	r0, [fp, #-136]	; 0xffffff78
     d14:	blx	r3
     d18:	ldr	r3, [pc, #156]	; dbc <check_definition+0xbb8>
     d1c:	ldr	r3, [pc, r3]
     d20:	mrc	15, 0, r2, cr13, cr0, {3}
     d24:	mov	r1, #0
     d28:	str	r1, [r2, r3]
     d2c:	ldr	r3, [fp, #-140]	; 0xffffff74
     d30:	mov	r2, #0
     d34:	str	r2, [r3]
     d38:	b	d40 <check_definition+0xb3c>
     d3c:	nop	{0}
     d40:	mov	r3, #0
     d44:	mov	r0, r3
     d48:	sub	sp, fp, #8
     d4c:	ldr	r4, [sp]
     d50:	ldr	fp, [sp, #4]
     d54:	add	sp, sp, #8
     d58:	pop	{pc}		; (ldr pc, [sp], #4)
     d5c:	.word	0x00000a78
     d60:	.word	0x00000a50
     d64:	.word	0x00000998
     d68:	.word	0x00000970
     d6c:	.word	0x000008ac
     d70:	.word	0x00000884
     d74:	.word	0x0000080c
     d78:	.word	0x000007e4
     d7c:	.word	0x00000768
     d80:	.word	0x00000740
     d84:	.word	0x0000068c
     d88:	.word	0x00000670
     d8c:	.word	0x00000580
     d90:	.word	0x00000558
     d94:	.word	0x000004a4
     d98:	.word	0x0000047c
     d9c:	.word	0x0000036c
     da0:	.word	0x00000344
     da4:	.word	0x00000298
     da8:	.word	0x00000268
     dac:	.word	0x00000240
     db0:	.word	0x00000194
     db4:	.word	0x0000016c
     db8:	.word	0x000000c0
     dbc:	.word	0x00000098

00000dc0 <check_data>:
     dc0:	strd	r4, [sp, #-32]!	; 0xffffffe0
     dc4:	strd	r6, [sp, #8]
     dc8:	strd	r8, [sp, #16]
     dcc:	str	fp, [sp, #24]
     dd0:	str	lr, [sp, #28]
     dd4:	add	fp, sp, #28
     dd8:	sub	sp, sp, #1200	; 0x4b0
     ddc:	sub	sp, sp, #8
     de0:	str	r0, [fp, #-1136]	; 0xfffffb90
     de4:	str	r1, [fp, #-1140]	; 0xfffffb8c
     de8:	str	r2, [fp, #-1144]	; 0xfffffb88
     dec:	str	r3, [fp, #-1148]	; 0xfffffb84
     df0:	mov	r3, #0
     df4:	str	r3, [fp, #-32]	; 0xffffffe0
     df8:	ldr	r3, [fp, #4]
     dfc:	cmp	r3, #0
     e00:	bne	e24 <check_data+0x64>
     e04:	movw	r3, #0
     e08:	movt	r3, #0
     e0c:	movw	r2, #306	; 0x132
     e10:	movw	r1, #0
     e14:	movt	r1, #0
     e18:	movw	r0, #0
     e1c:	movt	r0, #0
     e20:	bl	0 <__assert_fail>
     e24:	sub	r3, fp, #108	; 0x6c
     e28:	mov	r1, r3
     e2c:	ldr	r0, [fp, #-1136]	; 0xfffffb90
     e30:	bl	0 <coda_cursor_get_type>
     e34:	mov	r3, r0
     e38:	cmp	r3, #0
     e3c:	beq	e48 <check_data+0x88>
     e40:	mvn	r3, #0
     e44:	b	2408 <check_data+0x1648>
     e48:	ldr	r2, [fp, #-108]	; 0xffffff94
     e4c:	sub	r3, fp, #100	; 0x64
     e50:	mov	r1, r3
     e54:	mov	r0, r2
     e58:	bl	0 <coda_type_get_class>
     e5c:	mov	r3, r0
     e60:	cmp	r3, #0
     e64:	beq	e70 <check_data+0xb0>
     e68:	mvn	r3, #0
     e6c:	b	2408 <check_data+0x1648>
     e70:	ldr	r3, [fp, #12]
     e74:	ldr	r2, [fp, #8]
     e78:	ldr	r1, [fp, #-1140]	; 0xfffffb8c
     e7c:	ldr	r0, [fp, #-1136]	; 0xfffffb90
     e80:	bl	204 <check_definition>
     e84:	mov	r3, r0
     e88:	cmp	r3, #0
     e8c:	beq	e98 <check_data+0xd8>
     e90:	mvn	r3, #0
     e94:	b	2408 <check_data+0x1648>
     e98:	ldr	r3, [fp, #-1148]	; 0xfffffb84
     e9c:	cmp	r3, #0
     ea0:	beq	f04 <check_data+0x144>
     ea4:	ldr	r3, [fp, #-100]	; 0xffffff9c
     ea8:	cmp	r3, #6
     eac:	ldrls	pc, [pc, r3, lsl #2]
     eb0:	b	f10 <check_data+0x150>
     eb4:	.word	0x00000ed0
     eb8:	.word	0x00000ed0
     ebc:	.word	0x00000ee4
     ec0:	.word	0x00000ee4
     ec4:	.word	0x00000ee4
     ec8:	.word	0x00000ee4
     ecc:	.word	0x00000ed0
     ed0:	ldr	r1, [fp, #4]
     ed4:	mov	r2, #0
     ed8:	mov	r3, #0
     edc:	strd	r2, [r1]
     ee0:	b	f10 <check_data+0x150>
     ee4:	ldr	r1, [fp, #4]
     ee8:	ldr	r0, [fp, #-1136]	; 0xfffffb90
     eec:	bl	0 <coda_cursor_get_bit_size>
     ef0:	mov	r3, r0
     ef4:	cmp	r3, #0
     ef8:	beq	f0c <check_data+0x14c>
     efc:	mvn	r3, #0
     f00:	b	2408 <check_data+0x1648>
     f04:	nop	{0}
     f08:	b	f10 <check_data+0x150>
     f0c:	nop	{0}
     f10:	ldr	r3, [fp, #-1144]	; 0xfffffb88
     f14:	cmp	r3, #0
     f18:	beq	16d0 <check_data+0x910>
     f1c:	ldr	r3, [fp, #-100]	; 0xffffff9c
     f20:	cmp	r3, #6
     f24:	ldrls	pc, [pc, r3, lsl #2]
     f28:	b	16f4 <check_data+0x934>
     f2c:	.word	0x000016f4
     f30:	.word	0x000016f4
     f34:	.word	0x00000f48
     f38:	.word	0x00000f48
     f3c:	.word	0x00000fe4
     f40:	.word	0x00001360
     f44:	.word	0x00001604
     f48:	sub	r3, fp, #116	; 0x74
     f4c:	mov	r1, r3
     f50:	ldr	r0, [fp, #-1136]	; 0xfffffb90
     f54:	bl	0 <coda_cursor_read_double>
     f58:	mov	r3, r0
     f5c:	cmp	r3, #0
     f60:	beq	16d8 <check_data+0x918>
     f64:	ldr	r2, [pc, #3988]	; 1f00 <check_data+0x1140>
     f68:	ldr	r2, [pc, r2]
     f6c:	mrc	15, 0, r3, cr13, cr0, {3}
     f70:	ldr	r3, [r3, r2]
     f74:	cmn	r3, #300	; 0x12c
     f78:	beq	fb4 <check_data+0x1f4>
     f7c:	ldr	r2, [pc, #3968]	; 1f04 <check_data+0x1144>
     f80:	ldr	r2, [pc, r2]
     f84:	mrc	15, 0, r3, cr13, cr0, {3}
     f88:	ldr	r3, [r3, r2]
     f8c:	cmn	r3, #103	; 0x67
     f90:	beq	fb4 <check_data+0x1f4>
     f94:	ldr	r2, [pc, #3948]	; 1f08 <check_data+0x1148>
     f98:	ldr	r2, [pc, r2]
     f9c:	mrc	15, 0, r3, cr13, cr0, {3}
     fa0:	ldr	r3, [r3, r2]
     fa4:	cmn	r3, #104	; 0x68
     fa8:	beq	fb4 <check_data+0x1f4>
     fac:	mvn	r3, #0
     fb0:	b	2408 <check_data+0x1648>
     fb4:	ldr	r2, [pc, #3920]	; 1f0c <check_data+0x114c>
     fb8:	ldr	r2, [pc, r2]
     fbc:	mrc	15, 0, r3, cr13, cr0, {3}
     fc0:	ldr	r3, [r3, r2]
     fc4:	mov	r0, r3
     fc8:	bl	0 <coda_errno_to_string>
     fcc:	mov	r1, r0
     fd0:	ldr	r3, [fp, #8]
     fd4:	ldr	r2, [fp, #12]
     fd8:	ldr	r0, [fp, #-1136]	; 0xfffffb90
     fdc:	blx	r3
     fe0:	b	16d8 <check_data+0x918>
     fe4:	mov	r3, #0
     fe8:	str	r3, [fp, #-36]	; 0xffffffdc
     fec:	sub	r3, fp, #120	; 0x78
     ff0:	mov	r1, r3
     ff4:	ldr	r0, [fp, #-1136]	; 0xfffffb90
     ff8:	bl	0 <coda_cursor_get_string_length>
     ffc:	mov	r3, r0
    1000:	cmp	r3, #0
    1004:	beq	1090 <check_data+0x2d0>
    1008:	ldr	r2, [pc, #3840]	; 1f10 <check_data+0x1150>
    100c:	ldr	r2, [pc, r2]
    1010:	mrc	15, 0, r3, cr13, cr0, {3}
    1014:	ldr	r3, [r3, r2]
    1018:	cmn	r3, #300	; 0x12c
    101c:	beq	1058 <check_data+0x298>
    1020:	ldr	r2, [pc, #3820]	; 1f14 <check_data+0x1154>
    1024:	ldr	r2, [pc, r2]
    1028:	mrc	15, 0, r3, cr13, cr0, {3}
    102c:	ldr	r3, [r3, r2]
    1030:	cmn	r3, #103	; 0x67
    1034:	beq	1058 <check_data+0x298>
    1038:	ldr	r2, [pc, #3800]	; 1f18 <check_data+0x1158>
    103c:	ldr	r2, [pc, r2]
    1040:	mrc	15, 0, r3, cr13, cr0, {3}
    1044:	ldr	r3, [r3, r2]
    1048:	cmn	r3, #104	; 0x68
    104c:	beq	1058 <check_data+0x298>
    1050:	mvn	r3, #0
    1054:	b	2408 <check_data+0x1648>
    1058:	ldr	r2, [pc, #3772]	; 1f1c <check_data+0x115c>
    105c:	ldr	r2, [pc, r2]
    1060:	mrc	15, 0, r3, cr13, cr0, {3}
    1064:	ldr	r3, [r3, r2]
    1068:	mov	r0, r3
    106c:	bl	0 <coda_errno_to_string>
    1070:	mov	r1, r0
    1074:	ldr	r3, [fp, #8]
    1078:	ldr	r2, [fp, #12]
    107c:	ldr	r0, [fp, #-1136]	; 0xfffffb90
    1080:	blx	r3
    1084:	mov	r3, #1
    1088:	str	r3, [fp, #-32]	; 0xffffffe0
    108c:	b	16f4 <check_data+0x934>
    1090:	ldr	r3, [fp, #-120]	; 0xffffff88
    1094:	cmp	r3, #0
    1098:	bge	10c4 <check_data+0x304>
    109c:	ldr	r3, [fp, #8]
    10a0:	ldr	r2, [fp, #12]
    10a4:	movw	r1, #0
    10a8:	movt	r1, #0
    10ac:	ldr	r0, [fp, #-1136]	; 0xfffffb90
    10b0:	blx	r3
    10b4:	mov	r3, #1
    10b8:	str	r3, [fp, #-32]	; 0xffffffe0
    10bc:	nop	{0}
    10c0:	b	16f4 <check_data+0x934>
    10c4:	ldr	r3, [fp, #-1140]	; 0xfffffb8c
    10c8:	ldr	r3, [r3]
    10cc:	cmp	r3, #0
    10d0:	beq	10e0 <check_data+0x320>
    10d4:	ldr	r3, [fp, #-1140]	; 0xfffffb8c
    10d8:	ldr	r0, [r3]
    10dc:	b	10e4 <check_data+0x324>
    10e0:	ldr	r0, [fp, #-108]	; 0xffffff94
    10e4:	sub	r2, fp, #128	; 0x80
    10e8:	sub	r3, fp, #124	; 0x7c
    10ec:	mov	r1, r3
    10f0:	bl	0 <coda_type_get_fixed_value>
    10f4:	mov	r3, r0
    10f8:	cmp	r3, #0
    10fc:	beq	1108 <check_data+0x348>
    1100:	mvn	r3, #0
    1104:	b	2408 <check_data+0x1648>
    1108:	ldr	r3, [fp, #-120]	; 0xffffff88
    110c:	cmp	r3, #0
    1110:	ble	119c <check_data+0x3dc>
    1114:	ldr	r3, [fp, #-120]	; 0xffffff88
    1118:	add	r3, r3, #1
    111c:	mov	r0, r3
    1120:	bl	0 <malloc>
    1124:	mov	r3, r0
    1128:	str	r3, [fp, #-36]	; 0xffffffdc
    112c:	ldr	r3, [fp, #-36]	; 0xffffffdc
    1130:	cmp	r3, #0
    1134:	bne	1168 <check_data+0x3a8>
    1138:	ldr	r3, [fp, #-120]	; 0xffffff88
    113c:	add	r2, r3, #1
    1140:	movw	r3, #411	; 0x19b
    1144:	str	r3, [sp]
    1148:	movw	r3, #0
    114c:	movt	r3, #0
    1150:	movw	r1, #0
    1154:	movt	r1, #0
    1158:	mvn	r0, #0
    115c:	bl	0 <coda_set_error>
    1160:	mvn	r3, #0
    1164:	b	2408 <check_data+0x1648>
    1168:	ldr	r3, [fp, #-120]	; 0xffffff88
    116c:	add	r3, r3, #1
    1170:	mov	r2, r3
    1174:	ldr	r1, [fp, #-36]	; 0xffffffdc
    1178:	ldr	r0, [fp, #-1136]	; 0xfffffb90
    117c:	bl	0 <coda_cursor_read_string>
    1180:	mov	r3, r0
    1184:	cmp	r3, #0
    1188:	beq	119c <check_data+0x3dc>
    118c:	ldr	r0, [fp, #-36]	; 0xffffffdc
    1190:	bl	0 <free>
    1194:	mvn	r3, #0
    1198:	b	2408 <check_data+0x1648>
    119c:	ldr	r3, [fp, #-124]	; 0xffffff84
    11a0:	cmp	r3, #0
    11a4:	beq	1218 <check_data+0x458>
    11a8:	ldr	r2, [fp, #-120]	; 0xffffff88
    11ac:	ldr	r3, [fp, #-128]	; 0xffffff80
    11b0:	cmp	r2, r3
    11b4:	beq	11d4 <check_data+0x414>
    11b8:	ldr	r3, [fp, #8]
    11bc:	ldr	r2, [fp, #12]
    11c0:	movw	r1, #0
    11c4:	movt	r1, #0
    11c8:	ldr	r0, [fp, #-1136]	; 0xfffffb90
    11cc:	blx	r3
    11d0:	b	1218 <check_data+0x458>
    11d4:	ldr	r3, [fp, #-120]	; 0xffffff88
    11d8:	cmp	r3, #0
    11dc:	ble	1218 <check_data+0x458>
    11e0:	ldr	r1, [fp, #-124]	; 0xffffff84
    11e4:	ldr	r3, [fp, #-128]	; 0xffffff80
    11e8:	mov	r2, r3
    11ec:	ldr	r0, [fp, #-36]	; 0xffffffdc
    11f0:	bl	0 <memcmp>
    11f4:	mov	r3, r0
    11f8:	cmp	r3, #0
    11fc:	beq	1218 <check_data+0x458>
    1200:	ldr	r3, [fp, #8]
    1204:	ldr	r2, [fp, #12]
    1208:	movw	r1, #0
    120c:	movt	r1, #0
    1210:	ldr	r0, [fp, #-1136]	; 0xfffffb90
    1214:	blx	r3
    1218:	ldr	r3, [fp, #-108]	; 0xffffff94
    121c:	ldr	r3, [r3, #44]	; 0x2c
    1220:	cmp	r3, #1
    1224:	bne	132c <check_data+0x56c>
    1228:	ldr	r3, [fp, #-1136]	; 0xfffffb90
    122c:	ldr	r3, [r3]
    1230:	ldr	r3, [r3, #60]	; 0x3c
    1234:	cmp	r3, #3
    1238:	ldrls	pc, [pc, r3, lsl #2]
    123c:	b	1348 <check_data+0x588>
    1240:	.word	0x0000130c
    1244:	.word	0x00001250
    1248:	.word	0x00001288
    124c:	.word	0x000012c0
    1250:	ldr	r3, [fp, #-120]	; 0xffffff88
    1254:	cmp	r3, #1
    1258:	bne	126c <check_data+0x4ac>
    125c:	ldr	r3, [fp, #-36]	; 0xffffffdc
    1260:	ldrb	r3, [r3]
    1264:	cmp	r3, #10
    1268:	beq	1334 <check_data+0x574>
    126c:	ldr	r3, [fp, #8]
    1270:	ldr	r2, [fp, #12]
    1274:	movw	r1, #0
    1278:	movt	r1, #0
    127c:	ldr	r0, [fp, #-1136]	; 0xfffffb90
    1280:	blx	r3
    1284:	b	1334 <check_data+0x574>
    1288:	ldr	r3, [fp, #-120]	; 0xffffff88
    128c:	cmp	r3, #1
    1290:	bne	12a4 <check_data+0x4e4>
    1294:	ldr	r3, [fp, #-36]	; 0xffffffdc
    1298:	ldrb	r3, [r3]
    129c:	cmp	r3, #13
    12a0:	beq	133c <check_data+0x57c>
    12a4:	ldr	r3, [fp, #8]
    12a8:	ldr	r2, [fp, #12]
    12ac:	movw	r1, #0
    12b0:	movt	r1, #0
    12b4:	ldr	r0, [fp, #-1136]	; 0xfffffb90
    12b8:	blx	r3
    12bc:	b	133c <check_data+0x57c>
    12c0:	ldr	r3, [fp, #-120]	; 0xffffff88
    12c4:	cmp	r3, #2
    12c8:	bne	12f0 <check_data+0x530>
    12cc:	ldr	r3, [fp, #-36]	; 0xffffffdc
    12d0:	ldrb	r3, [r3]
    12d4:	cmp	r3, #13
    12d8:	bne	12f0 <check_data+0x530>
    12dc:	ldr	r3, [fp, #-36]	; 0xffffffdc
    12e0:	add	r3, r3, #1
    12e4:	ldrb	r3, [r3]
    12e8:	cmp	r3, #10
    12ec:	beq	1344 <check_data+0x584>
    12f0:	ldr	r3, [fp, #8]
    12f4:	ldr	r2, [fp, #12]
    12f8:	movw	r1, #0
    12fc:	movt	r1, #0
    1300:	ldr	r0, [fp, #-1136]	; 0xfffffb90
    1304:	blx	r3
    1308:	b	1344 <check_data+0x584>
    130c:	movw	r3, #0
    1310:	movt	r3, #0
    1314:	movw	r2, #462	; 0x1ce
    1318:	movw	r1, #0
    131c:	movt	r1, #0
    1320:	movw	r0, #0
    1324:	movt	r0, #0
    1328:	bl	0 <__assert_fail>
    132c:	nop	{0}
    1330:	b	1348 <check_data+0x588>
    1334:	nop	{0}
    1338:	b	1348 <check_data+0x588>
    133c:	nop	{0}
    1340:	b	1348 <check_data+0x588>
    1344:	nop	{0}
    1348:	ldr	r3, [fp, #-36]	; 0xffffffdc
    134c:	cmp	r3, #0
    1350:	beq	16e0 <check_data+0x920>
    1354:	ldr	r0, [fp, #-36]	; 0xffffffdc
    1358:	bl	0 <free>
    135c:	b	16e0 <check_data+0x920>
    1360:	ldr	r3, [fp, #-1148]	; 0xfffffb84
    1364:	cmp	r3, #0
    1368:	bne	140c <check_data+0x64c>
    136c:	ldr	r1, [fp, #4]
    1370:	ldr	r0, [fp, #-1136]	; 0xfffffb90
    1374:	bl	0 <coda_cursor_get_bit_size>
    1378:	mov	r3, r0
    137c:	cmp	r3, #0
    1380:	beq	140c <check_data+0x64c>
    1384:	ldr	r2, [pc, #2964]	; 1f20 <check_data+0x1160>
    1388:	ldr	r2, [pc, r2]
    138c:	mrc	15, 0, r3, cr13, cr0, {3}
    1390:	ldr	r3, [r3, r2]
    1394:	cmn	r3, #300	; 0x12c
    1398:	beq	13d4 <check_data+0x614>
    139c:	ldr	r2, [pc, #2944]	; 1f24 <check_data+0x1164>
    13a0:	ldr	r2, [pc, r2]
    13a4:	mrc	15, 0, r3, cr13, cr0, {3}
    13a8:	ldr	r3, [r3, r2]
    13ac:	cmn	r3, #103	; 0x67
    13b0:	beq	13d4 <check_data+0x614>
    13b4:	ldr	r2, [pc, #2924]	; 1f28 <check_data+0x1168>
    13b8:	ldr	r2, [pc, r2]
    13bc:	mrc	15, 0, r3, cr13, cr0, {3}
    13c0:	ldr	r3, [r3, r2]
    13c4:	cmn	r3, #104	; 0x68
    13c8:	beq	13d4 <check_data+0x614>
    13cc:	mvn	r3, #0
    13d0:	b	2408 <check_data+0x1648>
    13d4:	ldr	r2, [pc, #2896]	; 1f2c <check_data+0x116c>
    13d8:	ldr	r2, [pc, r2]
    13dc:	mrc	15, 0, r3, cr13, cr0, {3}
    13e0:	ldr	r3, [r3, r2]
    13e4:	mov	r0, r3
    13e8:	bl	0 <coda_errno_to_string>
    13ec:	mov	r1, r0
    13f0:	ldr	r3, [fp, #8]
    13f4:	ldr	r2, [fp, #12]
    13f8:	ldr	r0, [fp, #-1136]	; 0xfffffb90
    13fc:	blx	r3
    1400:	mov	r3, #1
    1404:	str	r3, [fp, #-32]	; 0xffffffe0
    1408:	b	16f4 <check_data+0x934>
    140c:	ldr	r3, [fp, #4]
    1410:	ldrd	r2, [r3]
    1414:	cmp	r2, #0
    1418:	sbcs	r3, r3, #0
    141c:	bge	1448 <check_data+0x688>
    1420:	ldr	r3, [fp, #8]
    1424:	ldr	r2, [fp, #12]
    1428:	movw	r1, #0
    142c:	movt	r1, #0
    1430:	ldr	r0, [fp, #-1136]	; 0xfffffb90
    1434:	blx	r3
    1438:	mov	r3, #1
    143c:	str	r3, [fp, #-32]	; 0xffffffe0
    1440:	nop	{0}
    1444:	b	16f4 <check_data+0x934>
    1448:	ldr	r3, [fp, #4]
    144c:	ldrd	r2, [r3]
    1450:	mov	r4, #0
    1454:	mov	r5, #0
    1458:	lsr	r4, r2, #3
    145c:	orr	r4, r4, r3, lsl #29
    1460:	asr	r5, r3, #3
    1464:	ldr	r3, [fp, #4]
    1468:	ldrd	r0, [r3]
    146c:	mov	r2, #7
    1470:	mov	r3, #0
    1474:	and	r6, r0, r2
    1478:	and	r7, r1, r3
    147c:	orrs	r3, r6, r7
    1480:	beq	1490 <check_data+0x6d0>
    1484:	mov	r2, #1
    1488:	mov	r3, #0
    148c:	b	1498 <check_data+0x6d8>
    1490:	mov	r2, #0
    1494:	mov	r3, #0
    1498:	adds	r8, r2, r4
    149c:	adc	r9, r3, r5
    14a0:	strd	r8, [fp, #-60]	; 0xffffffc4
    14a4:	ldr	r3, [fp, #-1140]	; 0xfffffb8c
    14a8:	ldr	r3, [r3]
    14ac:	cmp	r3, #0
    14b0:	beq	14c0 <check_data+0x700>
    14b4:	ldr	r3, [fp, #-1140]	; 0xfffffb8c
    14b8:	ldr	r0, [r3]
    14bc:	b	14c4 <check_data+0x704>
    14c0:	ldr	r0, [fp, #-108]	; 0xffffff94
    14c4:	sub	r2, fp, #136	; 0x88
    14c8:	sub	r3, fp, #132	; 0x84
    14cc:	mov	r1, r3
    14d0:	bl	0 <coda_type_get_fixed_value>
    14d4:	mov	r3, r0
    14d8:	cmp	r3, #0
    14dc:	beq	14e8 <check_data+0x728>
    14e0:	mvn	r3, #0
    14e4:	b	2408 <check_data+0x1648>
    14e8:	ldr	r3, [fp, #-132]	; 0xffffff7c
    14ec:	cmp	r3, #0
    14f0:	beq	16e8 <check_data+0x928>
    14f4:	ldr	r3, [fp, #-136]	; 0xffffff78
    14f8:	mov	r0, r3
    14fc:	asr	r1, r0, #31
    1500:	ldrd	r2, [fp, #-60]	; 0xffffffc4
    1504:	cmp	r3, r1
    1508:	cmpeq	r2, r0
    150c:	beq	152c <check_data+0x76c>
    1510:	ldr	r3, [fp, #8]
    1514:	ldr	r2, [fp, #12]
    1518:	movw	r1, #0
    151c:	movt	r1, #0
    1520:	ldr	r0, [fp, #-1136]	; 0xfffffb90
    1524:	blx	r3
    1528:	b	16e8 <check_data+0x928>
    152c:	ldr	r3, [fp, #-136]	; 0xffffff78
    1530:	cmp	r3, #0
    1534:	ble	16e8 <check_data+0x928>
    1538:	ldr	r3, [fp, #-60]	; 0xffffffc4
    153c:	mov	r0, r3
    1540:	bl	0 <malloc>
    1544:	mov	r3, r0
    1548:	str	r3, [fp, #-64]	; 0xffffffc0
    154c:	ldr	r3, [fp, #-64]	; 0xffffffc0
    1550:	cmp	r3, #0
    1554:	bne	1584 <check_data+0x7c4>
    1558:	ldr	r2, [fp, #-60]	; 0xffffffc4
    155c:	mov	r3, #524	; 0x20c
    1560:	str	r3, [sp]
    1564:	movw	r3, #0
    1568:	movt	r3, #0
    156c:	movw	r1, #0
    1570:	movt	r1, #0
    1574:	mvn	r0, #0
    1578:	bl	0 <coda_set_error>
    157c:	mvn	r3, #0
    1580:	b	2408 <check_data+0x1648>
    1584:	ldr	r3, [fp, #4]
    1588:	ldrd	r2, [r3]
    158c:	strd	r2, [sp]
    1590:	mov	r2, #0
    1594:	mov	r3, #0
    1598:	ldr	r1, [fp, #-64]	; 0xffffffc0
    159c:	ldr	r0, [fp, #-1136]	; 0xfffffb90
    15a0:	bl	0 <coda_cursor_read_bits>
    15a4:	mov	r3, r0
    15a8:	cmp	r3, #0
    15ac:	beq	15c0 <check_data+0x800>
    15b0:	ldr	r0, [fp, #-64]	; 0xffffffc0
    15b4:	bl	0 <free>
    15b8:	mvn	r3, #0
    15bc:	b	2408 <check_data+0x1648>
    15c0:	ldr	r1, [fp, #-132]	; 0xffffff7c
    15c4:	ldr	r3, [fp, #-136]	; 0xffffff78
    15c8:	mov	r2, r3
    15cc:	ldr	r0, [fp, #-64]	; 0xffffffc0
    15d0:	bl	0 <memcmp>
    15d4:	mov	r3, r0
    15d8:	cmp	r3, #0
    15dc:	beq	15f8 <check_data+0x838>
    15e0:	ldr	r3, [fp, #8]
    15e4:	ldr	r2, [fp, #12]
    15e8:	movw	r1, #0
    15ec:	movt	r1, #0
    15f0:	ldr	r0, [fp, #-1136]	; 0xfffffb90
    15f4:	blx	r3
    15f8:	ldr	r0, [fp, #-64]	; 0xffffffc0
    15fc:	bl	0 <free>
    1600:	b	16e8 <check_data+0x928>
    1604:	sub	r3, fp, #140	; 0x8c
    1608:	mov	r1, r3
    160c:	ldr	r0, [fp, #-1136]	; 0xfffffb90
    1610:	bl	0 <coda_cursor_get_special_type>
    1614:	mov	r3, r0
    1618:	cmp	r3, #0
    161c:	beq	1628 <check_data+0x868>
    1620:	mvn	r3, #0
    1624:	b	2408 <check_data+0x1648>
    1628:	ldr	r3, [fp, #-140]	; 0xffffff74
    162c:	cmp	r3, #2
    1630:	bne	16f0 <check_data+0x930>
    1634:	sub	r3, fp, #148	; 0x94
    1638:	mov	r1, r3
    163c:	ldr	r0, [fp, #-1136]	; 0xfffffb90
    1640:	bl	0 <coda_cursor_read_double>
    1644:	mov	r3, r0
    1648:	cmp	r3, #0
    164c:	beq	16f0 <check_data+0x930>
    1650:	ldr	r2, [pc, #2264]	; 1f30 <check_data+0x1170>
    1654:	ldr	r2, [pc, r2]
    1658:	mrc	15, 0, r3, cr13, cr0, {3}
    165c:	ldr	r3, [r3, r2]
    1660:	cmn	r3, #300	; 0x12c
    1664:	beq	16a0 <check_data+0x8e0>
    1668:	ldr	r2, [pc, #2244]	; 1f34 <check_data+0x1174>
    166c:	ldr	r2, [pc, r2]
    1670:	mrc	15, 0, r3, cr13, cr0, {3}
    1674:	ldr	r3, [r3, r2]
    1678:	cmn	r3, #103	; 0x67
    167c:	beq	16a0 <check_data+0x8e0>
    1680:	ldr	r2, [pc, #2224]	; 1f38 <check_data+0x1178>
    1684:	ldr	r2, [pc, r2]
    1688:	mrc	15, 0, r3, cr13, cr0, {3}
    168c:	ldr	r3, [r3, r2]
    1690:	cmn	r3, #104	; 0x68
    1694:	beq	16a0 <check_data+0x8e0>
    1698:	mvn	r3, #0
    169c:	b	2408 <check_data+0x1648>
    16a0:	ldr	r2, [pc, #2196]	; 1f3c <check_data+0x117c>
    16a4:	ldr	r2, [pc, r2]
    16a8:	mrc	15, 0, r3, cr13, cr0, {3}
    16ac:	ldr	r3, [r3, r2]
    16b0:	mov	r0, r3
    16b4:	bl	0 <coda_errno_to_string>
    16b8:	mov	r1, r0
    16bc:	ldr	r3, [fp, #8]
    16c0:	ldr	r2, [fp, #12]
    16c4:	ldr	r0, [fp, #-1136]	; 0xfffffb90
    16c8:	blx	r3
    16cc:	b	16f0 <check_data+0x930>
    16d0:	nop	{0}
    16d4:	b	16f4 <check_data+0x934>
    16d8:	nop	{0}
    16dc:	b	16f4 <check_data+0x934>
    16e0:	nop	{0}
    16e4:	b	16f4 <check_data+0x934>
    16e8:	nop	{0}
    16ec:	b	16f4 <check_data+0x934>
    16f0:	nop	{0}
    16f4:	sub	r3, fp, #104	; 0x68
    16f8:	mov	r1, r3
    16fc:	ldr	r0, [fp, #-1136]	; 0xfffffb90
    1700:	bl	0 <coda_cursor_has_attributes>
    1704:	mov	r3, r0
    1708:	cmp	r3, #0
    170c:	beq	1718 <check_data+0x958>
    1710:	mvn	r3, #0
    1714:	b	2408 <check_data+0x1648>
    1718:	ldr	r3, [fp, #-104]	; 0xffffff98
    171c:	cmp	r3, #0
    1720:	beq	17f4 <check_data+0xa34>
    1724:	mov	r3, #0
    1728:	str	r3, [fp, #-152]	; 0xffffff68
    172c:	ldr	r3, [fp, #-1140]	; 0xfffffb8c
    1730:	ldr	r3, [r3]
    1734:	cmp	r3, #0
    1738:	beq	1768 <check_data+0x9a8>
    173c:	ldr	r3, [fp, #-1140]	; 0xfffffb8c
    1740:	ldr	r2, [r3]
    1744:	sub	r3, fp, #152	; 0x98
    1748:	mov	r1, r3
    174c:	mov	r0, r2
    1750:	bl	0 <coda_type_get_attributes>
    1754:	mov	r3, r0
    1758:	cmp	r3, #0
    175c:	beq	1768 <check_data+0x9a8>
    1760:	mvn	r3, #0
    1764:	b	2408 <check_data+0x1648>
    1768:	ldr	r0, [fp, #-1136]	; 0xfffffb90
    176c:	bl	0 <coda_cursor_goto_attributes>
    1770:	mov	r3, r0
    1774:	cmp	r3, #0
    1778:	beq	1784 <check_data+0x9c4>
    177c:	mvn	r3, #0
    1780:	b	2408 <check_data+0x1648>
    1784:	sub	r1, fp, #152	; 0x98
    1788:	ldr	r3, [fp, #12]
    178c:	str	r3, [sp, #8]
    1790:	ldr	r3, [fp, #8]
    1794:	str	r3, [sp, #4]
    1798:	sub	r3, fp, #164	; 0xa4
    179c:	str	r3, [sp]
    17a0:	mov	r3, #0
    17a4:	ldr	r2, [fp, #-1144]	; 0xfffffb88
    17a8:	ldr	r0, [fp, #-1136]	; 0xfffffb90
    17ac:	bl	dc0 <check_data>
    17b0:	mov	r3, r0
    17b4:	cmp	r3, #0
    17b8:	beq	17c4 <check_data+0xa04>
    17bc:	mvn	r3, #0
    17c0:	b	2408 <check_data+0x1648>
    17c4:	ldr	r0, [fp, #-1136]	; 0xfffffb90
    17c8:	bl	0 <coda_cursor_goto_parent>
    17cc:	ldr	r3, [fp, #-1140]	; 0xfffffb8c
    17d0:	ldr	r3, [r3]
    17d4:	cmp	r3, #0
    17d8:	beq	17f4 <check_data+0xa34>
    17dc:	ldr	r3, [fp, #-152]	; 0xffffff68
    17e0:	cmp	r3, #0
    17e4:	bne	17f4 <check_data+0xa34>
    17e8:	ldr	r2, [fp, #-1140]	; 0xfffffb8c
    17ec:	mov	r3, #0
    17f0:	str	r3, [r2]
    17f4:	ldr	r3, [fp, #-1140]	; 0xfffffb8c
    17f8:	ldr	r3, [r3]
    17fc:	cmp	r3, #0
    1800:	bne	181c <check_data+0xa5c>
    1804:	ldr	r3, [fp, #-1144]	; 0xfffffb88
    1808:	cmp	r3, #0
    180c:	bne	181c <check_data+0xa5c>
    1810:	ldr	r3, [fp, #-1148]	; 0xfffffb84
    1814:	cmp	r3, #0
    1818:	beq	1f4c <check_data+0x118c>
    181c:	ldr	r3, [fp, #-100]	; 0xffffff9c
    1820:	cmp	r3, #6
    1824:	ldrls	pc, [pc, r3, lsl #2]
    1828:	b	1f4c <check_data+0x118c>
    182c:	.word	0x000019e0
    1830:	.word	0x00001848
    1834:	.word	0x00001f4c
    1838:	.word	0x00001f4c
    183c:	.word	0x00001f4c
    1840:	.word	0x00001f4c
    1844:	.word	0x00001e00
    1848:	mov	r3, #0
    184c:	str	r3, [fp, #-176]	; 0xffffff50
    1850:	ldr	r3, [fp, #-1140]	; 0xfffffb8c
    1854:	ldr	r3, [r3]
    1858:	cmp	r3, #0
    185c:	beq	188c <check_data+0xacc>
    1860:	ldr	r3, [fp, #-1140]	; 0xfffffb8c
    1864:	ldr	r2, [r3]
    1868:	sub	r3, fp, #176	; 0xb0
    186c:	mov	r1, r3
    1870:	mov	r0, r2
    1874:	bl	0 <coda_type_get_array_base_type>
    1878:	mov	r3, r0
    187c:	cmp	r3, #0
    1880:	beq	188c <check_data+0xacc>
    1884:	mvn	r3, #0
    1888:	b	2408 <check_data+0x1648>
    188c:	sub	r3, fp, #180	; 0xb4
    1890:	mov	r1, r3
    1894:	ldr	r0, [fp, #-1136]	; 0xfffffb90
    1898:	bl	0 <coda_cursor_get_num_elements>
    189c:	mov	r3, r0
    18a0:	cmp	r3, #0
    18a4:	beq	18b0 <check_data+0xaf0>
    18a8:	mvn	r3, #0
    18ac:	b	2408 <check_data+0x1648>
    18b0:	ldr	r3, [fp, #-180]	; 0xffffff4c
    18b4:	cmp	r3, #0
    18b8:	ble	1ef0 <check_data+0x1130>
    18bc:	ldr	r0, [fp, #-1136]	; 0xfffffb90
    18c0:	bl	0 <coda_cursor_goto_first_array_element>
    18c4:	mov	r3, r0
    18c8:	cmp	r3, #0
    18cc:	beq	18d8 <check_data+0xb18>
    18d0:	mvn	r3, #0
    18d4:	b	2408 <check_data+0x1648>
    18d8:	mov	r3, #0
    18dc:	str	r3, [fp, #-40]	; 0xffffffd8
    18e0:	b	199c <check_data+0xbdc>
    18e4:	sub	r1, fp, #176	; 0xb0
    18e8:	ldr	r3, [fp, #12]
    18ec:	str	r3, [sp, #8]
    18f0:	ldr	r3, [fp, #8]
    18f4:	str	r3, [sp, #4]
    18f8:	sub	r3, fp, #172	; 0xac
    18fc:	str	r3, [sp]
    1900:	ldr	r3, [fp, #-1148]	; 0xfffffb84
    1904:	ldr	r2, [fp, #-1144]	; 0xfffffb88
    1908:	ldr	r0, [fp, #-1136]	; 0xfffffb90
    190c:	bl	dc0 <check_data>
    1910:	mov	r3, r0
    1914:	cmp	r3, #0
    1918:	beq	1924 <check_data+0xb64>
    191c:	mvn	r3, #0
    1920:	b	2408 <check_data+0x1648>
    1924:	ldr	r3, [fp, #-1148]	; 0xfffffb84
    1928:	cmp	r3, #0
    192c:	beq	1960 <check_data+0xba0>
    1930:	ldr	r3, [fp, #4]
    1934:	ldrd	r0, [r3]
    1938:	ldrd	r2, [fp, #-172]	; 0xffffff54
    193c:	adds	ip, r0, r2
    1940:	str	ip, [fp, #-1156]	; 0xfffffb7c
    1944:	adc	r3, r1, r3
    1948:	str	r3, [fp, #-1152]	; 0xfffffb80
    194c:	ldr	r3, [fp, #4]
    1950:	sub	r2, fp, #1152	; 0x480
    1954:	sub	r2, r2, #4
    1958:	ldrd	r0, [r2]
    195c:	strd	r0, [r3]
    1960:	ldr	r3, [fp, #-180]	; 0xffffff4c
    1964:	sub	r3, r3, #1
    1968:	ldr	r2, [fp, #-40]	; 0xffffffd8
    196c:	cmp	r2, r3
    1970:	bge	1990 <check_data+0xbd0>
    1974:	ldr	r0, [fp, #-1136]	; 0xfffffb90
    1978:	bl	0 <coda_cursor_goto_next_array_element>
    197c:	mov	r3, r0
    1980:	cmp	r3, #0
    1984:	beq	1990 <check_data+0xbd0>
    1988:	mvn	r3, #0
    198c:	b	2408 <check_data+0x1648>
    1990:	ldr	r3, [fp, #-40]	; 0xffffffd8
    1994:	add	r3, r3, #1
    1998:	str	r3, [fp, #-40]	; 0xffffffd8
    199c:	ldr	r3, [fp, #-180]	; 0xffffff4c
    19a0:	ldr	r2, [fp, #-40]	; 0xffffffd8
    19a4:	cmp	r2, r3
    19a8:	blt	18e4 <check_data+0xb24>
    19ac:	ldr	r0, [fp, #-1136]	; 0xfffffb90
    19b0:	bl	0 <coda_cursor_goto_parent>
    19b4:	ldr	r3, [fp, #-1140]	; 0xfffffb8c
    19b8:	ldr	r3, [r3]
    19bc:	cmp	r3, #0
    19c0:	beq	1ef0 <check_data+0x1130>
    19c4:	ldr	r3, [fp, #-176]	; 0xffffff50
    19c8:	cmp	r3, #0
    19cc:	bne	1ef0 <check_data+0x1130>
    19d0:	ldr	r3, [fp, #-1140]	; 0xfffffb8c
    19d4:	mov	r2, #0
    19d8:	str	r2, [r3]
    19dc:	b	1ef0 <check_data+0x1130>
    19e0:	ldr	r3, [fp, #-1136]	; 0xfffffb90
    19e4:	sub	r0, fp, #876	; 0x36c
    19e8:	mov	r1, r3
    19ec:	mov	r3, #520	; 0x208
    19f0:	mov	r2, r3
    19f4:	bl	0 <memcpy>
    19f8:	sub	r2, fp, #184	; 0xb8
    19fc:	sub	r3, fp, #876	; 0x36c
    1a00:	mov	r1, r2
    1a04:	mov	r0, r3
    1a08:	bl	0 <coda_cursor_get_num_elements>
    1a0c:	mov	r3, r0
    1a10:	cmp	r3, #0
    1a14:	beq	1a20 <check_data+0xc60>
    1a18:	mvn	r3, #0
    1a1c:	b	2408 <check_data+0x1648>
    1a20:	ldr	r3, [fp, #-184]	; 0xffffff48
    1a24:	cmp	r3, #0
    1a28:	ble	1c08 <check_data+0xe48>
    1a2c:	ldr	r0, [fp, #-1136]	; 0xfffffb90
    1a30:	bl	0 <coda_cursor_goto_first_record_field>
    1a34:	mov	r3, r0
    1a38:	cmp	r3, #0
    1a3c:	beq	1a48 <check_data+0xc88>
    1a40:	mvn	r3, #0
    1a44:	b	2408 <check_data+0x1648>
    1a48:	mov	r3, #0
    1a4c:	str	r3, [fp, #-44]	; 0xffffffd4
    1a50:	b	1bf0 <check_data+0xe30>
    1a54:	mov	r3, #0
    1a58:	str	r3, [fp, #-188]	; 0xffffff44
    1a5c:	sub	r3, fp, #192	; 0xc0
    1a60:	sub	r0, fp, #876	; 0x36c
    1a64:	mov	r2, r3
    1a68:	ldr	r1, [fp, #-44]	; 0xffffffd4
    1a6c:	bl	0 <coda_cursor_get_record_field_available_status>
    1a70:	mov	r3, r0
    1a74:	cmp	r3, #0
    1a78:	beq	1a84 <check_data+0xcc4>
    1a7c:	mvn	r3, #0
    1a80:	b	2408 <check_data+0x1648>
    1a84:	ldr	r3, [fp, #-192]	; 0xffffff40
    1a88:	cmp	r3, #0
    1a8c:	beq	1bac <check_data+0xdec>
    1a90:	ldr	r3, [fp, #-1140]	; 0xfffffb8c
    1a94:	ldr	r3, [r3]
    1a98:	cmp	r3, #0
    1a9c:	beq	1b30 <check_data+0xd70>
    1aa0:	ldr	r0, [fp, #-108]	; 0xffffff94
    1aa4:	sub	r3, fp, #196	; 0xc4
    1aa8:	mov	r2, r3
    1aac:	ldr	r1, [fp, #-44]	; 0xffffffd4
    1ab0:	bl	0 <coda_type_get_record_field_name>
    1ab4:	mov	r3, r0
    1ab8:	cmp	r3, #0
    1abc:	beq	1ac8 <check_data+0xd08>
    1ac0:	mvn	r3, #0
    1ac4:	b	1bec <check_data+0xe2c>
    1ac8:	ldr	r3, [fp, #-1140]	; 0xfffffb8c
    1acc:	ldr	r0, [r3]
    1ad0:	ldr	r1, [fp, #-196]	; 0xffffff3c
    1ad4:	sub	r3, fp, #200	; 0xc8
    1ad8:	mov	r2, r3
    1adc:	bl	0 <coda_type_get_record_field_index_from_name>
    1ae0:	mov	r3, r0
    1ae4:	cmp	r3, #0
    1ae8:	beq	1b04 <check_data+0xd44>
    1aec:	ldr	r1, [pc, #1100]	; 1f40 <check_data+0x1180>
    1af0:	ldr	r1, [pc, r1]
    1af4:	mrc	15, 0, r2, cr13, cr0, {3}
    1af8:	mov	r3, #0
    1afc:	str	r3, [r2, r1]
    1b00:	b	1b30 <check_data+0xd70>
    1b04:	ldr	r3, [fp, #-1140]	; 0xfffffb8c
    1b08:	ldr	r0, [r3]
    1b0c:	ldr	r1, [fp, #-200]	; 0xffffff38
    1b10:	sub	r3, fp, #188	; 0xbc
    1b14:	mov	r2, r3
    1b18:	bl	0 <coda_type_get_record_field_type>
    1b1c:	mov	r3, r0
    1b20:	cmp	r3, #0
    1b24:	beq	1b30 <check_data+0xd70>
    1b28:	mvn	r3, #0
    1b2c:	b	1bec <check_data+0xe2c>
    1b30:	sub	r1, fp, #188	; 0xbc
    1b34:	ldr	r3, [fp, #12]
    1b38:	str	r3, [sp, #8]
    1b3c:	ldr	r3, [fp, #8]
    1b40:	str	r3, [sp, #4]
    1b44:	sub	r3, fp, #172	; 0xac
    1b48:	str	r3, [sp]
    1b4c:	ldr	r3, [fp, #-1148]	; 0xfffffb84
    1b50:	ldr	r2, [fp, #-1144]	; 0xfffffb88
    1b54:	ldr	r0, [fp, #-1136]	; 0xfffffb90
    1b58:	bl	dc0 <check_data>
    1b5c:	mov	r3, r0
    1b60:	cmp	r3, #0
    1b64:	beq	1b70 <check_data+0xdb0>
    1b68:	mvn	r3, #0
    1b6c:	b	1bec <check_data+0xe2c>
    1b70:	ldr	r3, [fp, #-1148]	; 0xfffffb84
    1b74:	cmp	r3, #0
    1b78:	beq	1bac <check_data+0xdec>
    1b7c:	ldr	r3, [fp, #4]
    1b80:	ldrd	r0, [r3]
    1b84:	ldrd	r2, [fp, #-172]	; 0xffffff54
    1b88:	adds	ip, r0, r2
    1b8c:	str	ip, [fp, #-1164]	; 0xfffffb74
    1b90:	adc	r3, r1, r3
    1b94:	str	r3, [fp, #-1160]	; 0xfffffb78
    1b98:	ldr	r3, [fp, #4]
    1b9c:	sub	r2, fp, #1152	; 0x480
    1ba0:	sub	r2, r2, #12
    1ba4:	ldrd	r0, [r2]
    1ba8:	strd	r0, [r3]
    1bac:	ldr	r3, [fp, #-184]	; 0xffffff48
    1bb0:	sub	r2, r3, #1
    1bb4:	ldr	r3, [fp, #-44]	; 0xffffffd4
    1bb8:	cmp	r3, r2
    1bbc:	bge	1bdc <check_data+0xe1c>
    1bc0:	ldr	r0, [fp, #-1136]	; 0xfffffb90
    1bc4:	bl	0 <coda_cursor_goto_next_record_field>
    1bc8:	mov	r3, r0
    1bcc:	cmp	r3, #0
    1bd0:	beq	1bdc <check_data+0xe1c>
    1bd4:	mvn	r3, #0
    1bd8:	b	1bec <check_data+0xe2c>
    1bdc:	ldr	r3, [fp, #-44]	; 0xffffffd4
    1be0:	add	r3, r3, #1
    1be4:	str	r3, [fp, #-44]	; 0xffffffd4
    1be8:	b	1bf0 <check_data+0xe30>
    1bec:	b	2408 <check_data+0x1648>
    1bf0:	ldr	r2, [fp, #-184]	; 0xffffff48
    1bf4:	ldr	r3, [fp, #-44]	; 0xffffffd4
    1bf8:	cmp	r3, r2
    1bfc:	blt	1a54 <check_data+0xc94>
    1c00:	ldr	r0, [fp, #-1136]	; 0xfffffb90
    1c04:	bl	0 <coda_cursor_goto_parent>
    1c08:	ldr	r3, [fp, #-1148]	; 0xfffffb84
    1c0c:	cmp	r3, #0
    1c10:	beq	1ef8 <check_data+0x1138>
    1c14:	ldr	r3, [fp, #-108]	; 0xffffff94
    1c18:	ldr	r3, [r3, #32]
    1c1c:	cmp	r3, #0
    1c20:	beq	1ef8 <check_data+0x1138>
    1c24:	bl	0 <coda_get_option_use_fast_size_expressions>
    1c28:	str	r0, [fp, #-68]	; 0xffffffbc
    1c2c:	mov	r0, #1
    1c30:	bl	0 <coda_set_option_use_fast_size_expressions>
    1c34:	sub	r3, fp, #212	; 0xd4
    1c38:	mov	r1, r3
    1c3c:	ldr	r0, [fp, #-1136]	; 0xfffffb90
    1c40:	bl	0 <coda_cursor_get_bit_size>
    1c44:	mov	r3, r0
    1c48:	cmp	r3, #0
    1c4c:	beq	1c88 <check_data+0xec8>
    1c50:	ldr	r3, [pc, #748]	; 1f44 <check_data+0x1184>
    1c54:	ldr	r3, [pc, r3]
    1c58:	mrc	15, 0, r2, cr13, cr0, {3}
    1c5c:	ldr	r3, [r2, r3]
    1c60:	mov	r0, r3
    1c64:	bl	0 <coda_errno_to_string>
    1c68:	mov	r1, r0
    1c6c:	ldr	r3, [fp, #8]
    1c70:	ldr	r2, [fp, #12]
    1c74:	ldr	r0, [fp, #-1136]	; 0xfffffb90
    1c78:	blx	r3
    1c7c:	mov	r3, #1
    1c80:	str	r3, [fp, #-32]	; 0xffffffe0
    1c84:	b	1df4 <check_data+0x1034>
    1c88:	ldr	r3, [fp, #4]
    1c8c:	ldrd	r0, [r3]
    1c90:	ldrd	r2, [fp, #-212]	; 0xffffff2c
    1c94:	cmp	r1, r3
    1c98:	cmpeq	r0, r2
    1c9c:	beq	1df4 <check_data+0x1034>
    1ca0:	ldr	r3, [fp, #4]
    1ca4:	ldrd	r2, [r3]
    1ca8:	mov	r0, #0
    1cac:	mov	r1, #0
    1cb0:	lsr	r0, r2, #3
    1cb4:	orr	r0, r0, r3, lsl #29
    1cb8:	asr	r1, r3, #3
    1cbc:	sub	r3, fp, #244	; 0xf4
    1cc0:	mov	r2, r3
    1cc4:	bl	0 <coda_str64>
    1cc8:	ldr	r3, [fp, #4]
    1ccc:	ldrd	r0, [r3]
    1cd0:	mov	r2, #7
    1cd4:	mov	r3, #0
    1cd8:	and	ip, r0, r2
    1cdc:	str	ip, [fp, #-1172]	; 0xfffffb6c
    1ce0:	and	r3, r1, r3
    1ce4:	str	r3, [fp, #-1168]	; 0xfffffb70
    1ce8:	sub	r3, fp, #1168	; 0x490
    1cec:	sub	r3, r3, #4
    1cf0:	ldrd	r2, [r3]
    1cf4:	orrs	r3, r2, r3
    1cf8:	beq	1d34 <check_data+0xf74>
    1cfc:	sub	r3, fp, #244	; 0xf4
    1d00:	mov	r0, r3
    1d04:	bl	0 <strlen>
    1d08:	mov	r2, r0
    1d0c:	sub	r3, fp, #244	; 0xf4
    1d10:	add	r0, r3, r2
    1d14:	ldr	r3, [fp, #4]
    1d18:	ldrd	r2, [r3]
    1d1c:	mov	r3, r2
    1d20:	and	r3, r3, #7
    1d24:	mov	r2, r3
    1d28:	movw	r1, #0
    1d2c:	movt	r1, #0
    1d30:	bl	0 <sprintf>
    1d34:	ldrd	r2, [fp, #-212]	; 0xffffff2c
    1d38:	mov	r0, #0
    1d3c:	mov	r1, #0
    1d40:	lsr	r0, r2, #3
    1d44:	orr	r0, r0, r3, lsl #29
    1d48:	asr	r1, r3, #3
    1d4c:	sub	r3, fp, #276	; 0x114
    1d50:	mov	r2, r3
    1d54:	bl	0 <coda_str64>
    1d58:	ldrd	r0, [fp, #-212]	; 0xffffff2c
    1d5c:	mov	r2, #7
    1d60:	mov	r3, #0
    1d64:	and	ip, r0, r2
    1d68:	str	ip, [fp, #-1180]	; 0xfffffb64
    1d6c:	and	r3, r1, r3
    1d70:	str	r3, [fp, #-1176]	; 0xfffffb68
    1d74:	sub	r3, fp, #1168	; 0x490
    1d78:	sub	r3, r3, #12
    1d7c:	ldrd	r2, [r3]
    1d80:	orrs	r3, r2, r3
    1d84:	beq	1dbc <check_data+0xffc>
    1d88:	sub	r3, fp, #276	; 0x114
    1d8c:	mov	r0, r3
    1d90:	bl	0 <strlen>
    1d94:	mov	r2, r0
    1d98:	sub	r3, fp, #276	; 0x114
    1d9c:	add	r0, r3, r2
    1da0:	ldrd	r2, [fp, #-212]	; 0xffffff2c
    1da4:	mov	r3, r2
    1da8:	and	r3, r3, #7
    1dac:	mov	r2, r3
    1db0:	movw	r1, #0
    1db4:	movt	r1, #0
    1db8:	bl	0 <sprintf>
    1dbc:	sub	r3, fp, #276	; 0x114
    1dc0:	sub	r2, fp, #244	; 0xf4
    1dc4:	sub	r0, fp, #1120	; 0x460
    1dc8:	sub	r0, r0, #12
    1dcc:	movw	r1, #0
    1dd0:	movt	r1, #0
    1dd4:	bl	0 <sprintf>
    1dd8:	sub	r3, fp, #1120	; 0x460
    1ddc:	sub	r3, r3, #12
    1de0:	ldr	r4, [fp, #8]
    1de4:	ldr	r2, [fp, #12]
    1de8:	mov	r1, r3
    1dec:	ldr	r0, [fp, #-1136]	; 0xfffffb90
    1df0:	blx	r4
    1df4:	ldr	r0, [fp, #-68]	; 0xffffffbc
    1df8:	bl	0 <coda_set_option_use_fast_size_expressions>
    1dfc:	b	1ef8 <check_data+0x1138>
    1e00:	mov	r3, #0
    1e04:	str	r3, [fp, #-284]	; 0xfffffee4
    1e08:	sub	r3, fp, #280	; 0x118
    1e0c:	mov	r1, r3
    1e10:	ldr	r0, [fp, #-1136]	; 0xfffffb90
    1e14:	bl	0 <coda_cursor_get_special_type>
    1e18:	mov	r3, r0
    1e1c:	cmp	r3, #0
    1e20:	beq	1e2c <check_data+0x106c>
    1e24:	mvn	r3, #0
    1e28:	b	2408 <check_data+0x1648>
    1e2c:	ldr	r3, [fp, #-280]	; 0xfffffee8
    1e30:	cmp	r3, #0
    1e34:	bne	1e58 <check_data+0x1098>
    1e38:	movw	r3, #0
    1e3c:	movt	r3, #0
    1e40:	movw	r2, #778	; 0x30a
    1e44:	movw	r1, #0
    1e48:	movt	r1, #0
    1e4c:	movw	r0, #0
    1e50:	movt	r0, #0
    1e54:	bl	0 <__assert_fail>
    1e58:	ldr	r3, [fp, #-1140]	; 0xfffffb8c
    1e5c:	ldr	r3, [r3]
    1e60:	cmp	r3, #0
    1e64:	beq	1e94 <check_data+0x10d4>
    1e68:	ldr	r3, [fp, #-1140]	; 0xfffffb8c
    1e6c:	ldr	r3, [r3]
    1e70:	sub	r2, fp, #284	; 0x11c
    1e74:	mov	r1, r2
    1e78:	mov	r0, r3
    1e7c:	bl	0 <coda_type_get_special_base_type>
    1e80:	mov	r3, r0
    1e84:	cmp	r3, #0
    1e88:	beq	1e94 <check_data+0x10d4>
    1e8c:	mvn	r3, #0
    1e90:	b	2408 <check_data+0x1648>
    1e94:	ldr	r0, [fp, #-1136]	; 0xfffffb90
    1e98:	bl	0 <coda_cursor_use_base_type_of_special_type>
    1e9c:	mov	r3, r0
    1ea0:	cmp	r3, #0
    1ea4:	beq	1eb0 <check_data+0x10f0>
    1ea8:	mvn	r3, #0
    1eac:	b	2408 <check_data+0x1648>
    1eb0:	sub	r1, fp, #284	; 0x11c
    1eb4:	ldr	r3, [fp, #12]
    1eb8:	str	r3, [sp, #8]
    1ebc:	ldr	r3, [fp, #8]
    1ec0:	str	r3, [sp, #4]
    1ec4:	ldr	r3, [fp, #4]
    1ec8:	str	r3, [sp]
    1ecc:	ldr	r3, [fp, #-1148]	; 0xfffffb84
    1ed0:	ldr	r2, [fp, #-1144]	; 0xfffffb88
    1ed4:	ldr	r0, [fp, #-1136]	; 0xfffffb90
    1ed8:	bl	dc0 <check_data>
    1edc:	mov	r3, r0
    1ee0:	cmp	r3, #0
    1ee4:	beq	1f48 <check_data+0x1188>
    1ee8:	mvn	r3, #0
    1eec:	b	2408 <check_data+0x1648>
    1ef0:	nop	{0}
    1ef4:	b	1f4c <check_data+0x118c>
    1ef8:	nop	{0}
    1efc:	b	1f4c <check_data+0x118c>
    1f00:	.word	0x00000f90
    1f04:	.word	0x00000f7c
    1f08:	.word	0x00000f68
    1f0c:	.word	0x00000f4c
    1f10:	.word	0x00000efc
    1f14:	.word	0x00000ee8
    1f18:	.word	0x00000ed4
    1f1c:	.word	0x00000eb8
    1f20:	.word	0x00000b90
    1f24:	.word	0x00000b7c
    1f28:	.word	0x00000b68
    1f2c:	.word	0x00000b4c
    1f30:	.word	0x000008d4
    1f34:	.word	0x000008c0
    1f38:	.word	0x000008ac
    1f3c:	.word	0x00000890
    1f40:	.word	0x00000448
    1f44:	.word	0x000002e8
    1f48:	nop	{0}
    1f4c:	ldr	r3, [fp, #-1148]	; 0xfffffb84
    1f50:	cmp	r3, #0
    1f54:	beq	2404 <check_data+0x1644>
    1f58:	ldr	r3, [fp, #-32]	; 0xffffffe0
    1f5c:	cmp	r3, #0
    1f60:	bne	2404 <check_data+0x1644>
    1f64:	ldr	r3, [fp, #-1136]	; 0xfffffb90
    1f68:	ldr	r3, [r3, #4]
    1f6c:	sub	r3, r3, #1
    1f70:	ldr	r2, [fp, #-1136]	; 0xfffffb90
    1f74:	lsl	r3, r3, #4
    1f78:	add	r3, r2, r3
    1f7c:	ldr	r3, [r3, #8]
    1f80:	ldr	r3, [r3]
    1f84:	cmp	r3, #100	; 0x64
    1f88:	bne	2404 <check_data+0x1644>
    1f8c:	ldr	r3, [fp, #-1136]	; 0xfffffb90
    1f90:	ldr	r3, [r3, #4]
    1f94:	sub	r3, r3, #1
    1f98:	ldr	r2, [fp, #-1136]	; 0xfffffb90
    1f9c:	lsl	r3, r3, #4
    1fa0:	add	r3, r2, r3
    1fa4:	ldr	r3, [r3, #8]
    1fa8:	ldr	r3, [r3, #8]
    1fac:	cmp	r3, #2
    1fb0:	bne	2404 <check_data+0x1644>
    1fb4:	ldr	r3, [fp, #-1136]	; 0xfffffb90
    1fb8:	ldr	r3, [r3, #4]
    1fbc:	sub	r3, r3, #1
    1fc0:	ldr	r2, [fp, #-1136]	; 0xfffffb90
    1fc4:	lsl	r3, r3, #4
    1fc8:	add	r3, r2, r3
    1fcc:	ldr	r3, [r3, #8]
    1fd0:	ldr	r3, [r3, #16]
    1fd4:	mov	r2, r3
    1fd8:	asr	r3, r2, #31
    1fdc:	strd	r2, [fp, #-76]	; 0xffffffb4
    1fe0:	sub	r3, fp, #284	; 0x11c
    1fe4:	mov	r1, r3
    1fe8:	mov	r2, #0
    1fec:	mov	r3, #0
    1ff0:	strd	r2, [r1, #-8]
    1ff4:	ldr	r3, [fp, #4]
    1ff8:	cmp	r3, #0
    1ffc:	beq	2014 <check_data+0x1254>
    2000:	ldr	r3, [fp, #4]
    2004:	ldrd	r2, [r3]
    2008:	sub	r1, fp, #284	; 0x11c
    200c:	strd	r2, [r1, #-8]
    2010:	b	2038 <check_data+0x1278>
    2014:	sub	r3, fp, #292	; 0x124
    2018:	mov	r1, r3
    201c:	ldr	r0, [fp, #-1136]	; 0xfffffb90
    2020:	bl	0 <coda_cursor_get_bit_size>
    2024:	mov	r3, r0
    2028:	cmp	r3, #0
    202c:	beq	2038 <check_data+0x1278>
    2030:	mvn	r3, #0
    2034:	b	2408 <check_data+0x1648>
    2038:	ldr	r3, [fp, #-1136]	; 0xfffffb90
    203c:	ldr	r3, [r3]
    2040:	ldr	r3, [r3, #16]
    2044:	cmp	r3, #2
    2048:	bne	22c4 <check_data+0x1504>
    204c:	sub	r3, fp, #284	; 0x11c
    2050:	ldrd	r2, [r3, #-8]
    2054:	mov	r0, #0
    2058:	mov	r1, #0
    205c:	lsr	r0, r2, #3
    2060:	orr	r0, r0, r3, lsl #29
    2064:	asr	r1, r3, #3
    2068:	sub	r3, fp, #284	; 0x11c
    206c:	ldrd	r2, [r3, #-8]
    2070:	uxtb	r3, r2
    2074:	and	r3, r3, #7
    2078:	cmp	r3, #0
    207c:	movne	r3, #1
    2080:	moveq	r3, #0
    2084:	uxtb	r3, r3
    2088:	uxtb	r2, r3
    208c:	mov	r3, #0
    2090:	adds	ip, r0, r2
    2094:	str	ip, [fp, #-1188]	; 0xfffffb5c
    2098:	adc	r3, r1, r3
    209c:	str	r3, [fp, #-1184]	; 0xfffffb60
    20a0:	ldrd	r2, [fp, #-76]	; 0xffffffb4
    20a4:	sub	r1, fp, #1184	; 0x4a0
    20a8:	sub	r1, r1, #4
    20ac:	ldrd	r0, [r1]
    20b0:	cmp	r0, r2
    20b4:	sbcs	r3, r1, r3
    20b8:	bge	22c4 <check_data+0x1504>
    20bc:	ldr	r3, [fp, #-1136]	; 0xfffffb90
    20c0:	ldr	r3, [r3, #4]
    20c4:	sub	r3, r3, #1
    20c8:	ldr	r2, [fp, #-1136]	; 0xfffffb90
    20cc:	lsl	r3, r3, #4
    20d0:	add	r3, r2, r3
    20d4:	ldr	r3, [r3, #8]
    20d8:	ldrd	r2, [r3, #24]
    20dc:	mov	r3, r2
    20e0:	str	r3, [fp, #-80]	; 0xffffffb0
    20e4:	sub	r3, fp, #284	; 0x11c
    20e8:	ldrd	r0, [r3, #-8]
    20ec:	mov	r2, #0
    20f0:	mov	r3, #0
    20f4:	lsr	r2, r0, #3
    20f8:	orr	r2, r2, r1, lsl #29
    20fc:	asr	r3, r1, #3
    2100:	ldrd	r0, [fp, #-76]	; 0xffffffb4
    2104:	subs	ip, r0, r2
    2108:	str	ip, [fp, #-1220]	; 0xfffffb3c
    210c:	sbc	r3, r1, r3
    2110:	str	r3, [fp, #-1216]	; 0xfffffb40
    2114:	sub	r3, fp, #1216	; 0x4c0
    2118:	sub	r3, r3, #4
    211c:	ldrd	r2, [r3]
    2120:	strd	r2, [fp, #-92]	; 0xffffffa4
    2124:	ldr	r3, [fp, #-92]	; 0xffffffa4
    2128:	add	r3, r3, #1
    212c:	mov	r0, r3
    2130:	bl	0 <malloc>
    2134:	mov	r3, r0
    2138:	str	r3, [fp, #-96]	; 0xffffffa0
    213c:	ldr	r3, [fp, #-96]	; 0xffffffa0
    2140:	cmp	r3, #0
    2144:	bne	2174 <check_data+0x13b4>
    2148:	ldr	r2, [fp, #-92]	; 0xffffffa4
    214c:	movw	r3, #831	; 0x33f
    2150:	str	r3, [sp]
    2154:	movw	r3, #0
    2158:	movt	r3, #0
    215c:	movw	r1, #0
    2160:	movt	r1, #0
    2164:	mvn	r0, #0
    2168:	bl	0 <coda_set_error>
    216c:	mvn	r3, #0
    2170:	b	2408 <check_data+0x1648>
    2174:	ldr	r3, [fp, #-1136]	; 0xfffffb90
    2178:	ldr	ip, [r3]
    217c:	ldr	r3, [fp, #-80]	; 0xffffffb0
    2180:	mov	r4, r3
    2184:	asr	r5, r4, #31
    2188:	sub	r3, fp, #284	; 0x11c
    218c:	ldrd	r0, [r3, #-8]
    2190:	mov	r2, #0
    2194:	mov	r3, #0
    2198:	lsr	r2, r0, #3
    219c:	orr	r2, r2, r1, lsl #29
    21a0:	asr	r3, r1, #3
    21a4:	adds	r1, r4, r2
    21a8:	str	r1, [fp, #-1196]	; 0xfffffb54
    21ac:	adc	r3, r5, r3
    21b0:	str	r3, [fp, #-1192]	; 0xfffffb58
    21b4:	ldr	r3, [fp, #-96]	; 0xffffffa0
    21b8:	str	r3, [sp, #8]
    21bc:	ldrd	r2, [fp, #-92]	; 0xffffffa4
    21c0:	strd	r2, [sp]
    21c4:	sub	r3, fp, #1184	; 0x4a0
    21c8:	sub	r3, r3, #12
    21cc:	ldrd	r2, [r3]
    21d0:	mov	r0, ip
    21d4:	bl	0 <read_bytes>
    21d8:	mov	r3, r0
    21dc:	cmp	r3, #0
    21e0:	beq	21f4 <check_data+0x1434>
    21e4:	ldr	r0, [fp, #-96]	; 0xffffffa0
    21e8:	bl	0 <free>
    21ec:	mvn	r3, #0
    21f0:	b	2408 <check_data+0x1648>
    21f4:	ldr	r3, [fp, #-92]	; 0xffffffa4
    21f8:	ldr	r2, [fp, #-96]	; 0xffffffa0
    21fc:	add	r3, r2, r3
    2200:	mov	r2, #0
    2204:	strb	r2, [r3]
    2208:	mov	r3, #0
    220c:	str	r3, [fp, #-48]	; 0xffffffd0
    2210:	b	229c <check_data+0x14dc>
    2214:	ldr	r3, [fp, #-48]	; 0xffffffd0
    2218:	ldr	r2, [fp, #-96]	; 0xffffffa0
    221c:	add	r3, r2, r3
    2220:	ldrb	r3, [r3]
    2224:	cmp	r3, #32
    2228:	beq	2290 <check_data+0x14d0>
    222c:	ldr	r3, [fp, #-48]	; 0xffffffd0
    2230:	ldr	r2, [fp, #-96]	; 0xffffffa0
    2234:	add	r3, r2, r3
    2238:	ldrb	r3, [r3]
    223c:	cmp	r3, #9
    2240:	beq	2290 <check_data+0x14d0>
    2244:	ldr	r3, [fp, #-48]	; 0xffffffd0
    2248:	ldr	r2, [fp, #-96]	; 0xffffffa0
    224c:	add	r3, r2, r3
    2250:	ldrb	r3, [r3]
    2254:	cmp	r3, #10
    2258:	beq	2290 <check_data+0x14d0>
    225c:	ldr	r3, [fp, #-48]	; 0xffffffd0
    2260:	ldr	r2, [fp, #-96]	; 0xffffffa0
    2264:	add	r3, r2, r3
    2268:	ldrb	r3, [r3]
    226c:	cmp	r3, #13
    2270:	beq	2290 <check_data+0x14d0>
    2274:	ldr	r3, [fp, #8]
    2278:	ldr	r2, [fp, #12]
    227c:	movw	r1, #0
    2280:	movt	r1, #0
    2284:	ldr	r0, [fp, #-1136]	; 0xfffffb90
    2288:	blx	r3
    228c:	b	22b8 <check_data+0x14f8>
    2290:	ldr	r3, [fp, #-48]	; 0xffffffd0
    2294:	add	r3, r3, #1
    2298:	str	r3, [fp, #-48]	; 0xffffffd0
    229c:	ldr	r3, [fp, #-48]	; 0xffffffd0
    22a0:	mov	r0, r3
    22a4:	asr	r1, r0, #31
    22a8:	ldrd	r2, [fp, #-92]	; 0xffffffa4
    22ac:	cmp	r0, r2
    22b0:	sbcs	r3, r1, r3
    22b4:	blt	2214 <check_data+0x1454>
    22b8:	ldr	r0, [fp, #-96]	; 0xffffffa0
    22bc:	bl	0 <free>
    22c0:	b	2404 <check_data+0x1644>
    22c4:	sub	r3, fp, #284	; 0x11c
    22c8:	ldrd	r0, [r3, #-8]
    22cc:	mov	r2, #0
    22d0:	mov	r3, #0
    22d4:	lsr	r2, r0, #3
    22d8:	orr	r2, r2, r1, lsl #29
    22dc:	asr	r3, r1, #3
    22e0:	sub	r1, fp, #284	; 0x11c
    22e4:	ldrd	r0, [r1, #-8]
    22e8:	uxtb	r1, r0
    22ec:	and	r1, r1, #7
    22f0:	cmp	r1, #0
    22f4:	movne	r1, #1
    22f8:	moveq	r1, #0
    22fc:	uxtb	r1, r1
    2300:	uxtb	r0, r1
    2304:	mov	r1, #0
    2308:	adds	ip, r2, r0
    230c:	str	ip, [fp, #-1204]	; 0xfffffb4c
    2310:	adc	r3, r3, r1
    2314:	str	r3, [fp, #-1200]	; 0xfffffb50
    2318:	ldrd	r2, [fp, #-76]	; 0xffffffb4
    231c:	sub	r1, fp, #1200	; 0x4b0
    2320:	sub	r1, r1, #4
    2324:	ldrd	r0, [r1]
    2328:	cmp	r3, r1
    232c:	cmpeq	r2, r0
    2330:	beq	2404 <check_data+0x1644>
    2334:	sub	r3, fp, #324	; 0x144
    2338:	mov	r2, r3
    233c:	ldrd	r0, [fp, #-76]	; 0xffffffb4
    2340:	bl	0 <coda_str64>
    2344:	sub	r3, fp, #284	; 0x11c
    2348:	ldrd	r2, [r3, #-8]
    234c:	mov	r0, #0
    2350:	mov	r1, #0
    2354:	lsr	r0, r2, #3
    2358:	orr	r0, r0, r3, lsl #29
    235c:	asr	r1, r3, #3
    2360:	sub	r3, fp, #356	; 0x164
    2364:	mov	r2, r3
    2368:	bl	0 <coda_str64>
    236c:	sub	r3, fp, #284	; 0x11c
    2370:	ldrd	r2, [r3, #-8]
    2374:	mov	r0, #7
    2378:	mov	r1, #0
    237c:	and	ip, r2, r0
    2380:	str	ip, [fp, #-1212]	; 0xfffffb44
    2384:	and	r3, r3, r1
    2388:	str	r3, [fp, #-1208]	; 0xfffffb48
    238c:	sub	r3, fp, #1200	; 0x4b0
    2390:	sub	r3, r3, #12
    2394:	ldrd	r2, [r3]
    2398:	orrs	r3, r2, r3
    239c:	beq	23d8 <check_data+0x1618>
    23a0:	sub	r3, fp, #356	; 0x164
    23a4:	mov	r0, r3
    23a8:	bl	0 <strlen>
    23ac:	mov	r2, r0
    23b0:	sub	r3, fp, #356	; 0x164
    23b4:	add	r0, r3, r2
    23b8:	sub	r3, fp, #284	; 0x11c
    23bc:	ldrd	r2, [r3, #-8]
    23c0:	mov	r3, r2
    23c4:	and	r3, r3, #7
    23c8:	mov	r2, r3
    23cc:	movw	r1, #0
    23d0:	movt	r1, #0
    23d4:	bl	0 <sprintf>
    23d8:	sub	r3, fp, #356	; 0x164
    23dc:	sub	r2, fp, #324	; 0x144
    23e0:	sub	r0, fp, #876	; 0x36c
    23e4:	movw	r1, #0
    23e8:	movt	r1, #0
    23ec:	bl	0 <sprintf>
    23f0:	sub	r1, fp, #876	; 0x36c
    23f4:	ldr	r3, [fp, #8]
    23f8:	ldr	r2, [fp, #12]
    23fc:	ldr	r0, [fp, #-1136]	; 0xfffffb90
    2400:	blx	r3
    2404:	mov	r3, #0
    2408:	mov	r0, r3
    240c:	sub	sp, fp, #28
    2410:	ldrd	r4, [sp]
    2414:	ldrd	r6, [sp, #8]
    2418:	ldrd	r8, [sp, #16]
    241c:	ldr	fp, [sp, #24]
    2420:	add	sp, sp, #28
    2424:	pop	{pc}		; (ldr pc, [sp], #4)

00002428 <coda_product_check>:
    2428:	strd	r4, [sp, #-16]!
    242c:	str	fp, [sp, #8]
    2430:	str	lr, [sp, #12]
    2434:	add	fp, sp, #12
    2438:	sub	sp, sp, #896	; 0x380
    243c:	str	r0, [fp, #-880]	; 0xfffffc90
    2440:	str	r1, [fp, #-884]	; 0xfffffc8c
    2444:	str	r2, [fp, #-888]	; 0xfffffc88
    2448:	str	r3, [fp, #-892]	; 0xfffffc84
    244c:	mov	r3, #0
    2450:	str	r3, [fp, #-24]	; 0xffffffe8
    2454:	sub	r3, fp, #556	; 0x22c
    2458:	mov	r1, r3
    245c:	mov	r2, #0
    2460:	mov	r3, #0
    2464:	strd	r2, [r1, #-8]
    2468:	sub	r3, fp, #572	; 0x23c
    246c:	mov	r1, r3
    2470:	mov	r2, #0
    2474:	mov	r3, #0
    2478:	strd	r2, [r1]
    247c:	sub	r3, fp, #548	; 0x224
    2480:	ldr	r1, [fp, #-880]	; 0xfffffc90
    2484:	mov	r0, r3
    2488:	bl	0 <coda_cursor_set_product>
    248c:	mov	r3, r0
    2490:	cmp	r3, #0
    2494:	beq	24a0 <coda_product_check+0x78>
    2498:	mvn	r3, #0
    249c:	b	2738 <coda_product_check+0x310>
    24a0:	sub	r3, fp, #552	; 0x228
    24a4:	mov	r1, r3
    24a8:	ldr	r0, [fp, #-880]	; 0xfffffc90
    24ac:	bl	0 <coda_get_product_format>
    24b0:	mov	r3, r0
    24b4:	cmp	r3, #0
    24b8:	beq	24c4 <coda_product_check+0x9c>
    24bc:	mvn	r3, #0
    24c0:	b	2738 <coda_product_check+0x310>
    24c4:	ldr	r3, [fp, #-552]	; 0xfffffdd8
    24c8:	cmp	r3, #0
    24cc:	beq	251c <coda_product_check+0xf4>
    24d0:	ldr	r3, [fp, #-552]	; 0xfffffdd8
    24d4:	cmp	r3, #1
    24d8:	beq	251c <coda_product_check+0xf4>
    24dc:	ldr	r3, [fp, #-552]	; 0xfffffdd8
    24e0:	cmp	r3, #2
    24e4:	beq	251c <coda_product_check+0xf4>
    24e8:	ldr	r3, [fp, #-880]	; 0xfffffc90
    24ec:	ldr	r3, [r3, #24]
    24f0:	cmp	r3, #0
    24f4:	beq	251c <coda_product_check+0xf4>
    24f8:	ldr	r3, [fp, #-880]	; 0xfffffc90
    24fc:	ldr	r3, [r3, #24]
    2500:	ldr	r3, [r3, #28]
    2504:	cmp	r3, #0
    2508:	beq	251c <coda_product_check+0xf4>
    250c:	ldr	r3, [fp, #-880]	; 0xfffffc90
    2510:	ldr	r3, [r3, #24]
    2514:	ldr	r3, [r3, #28]
    2518:	str	r3, [fp, #-24]	; 0xffffffe8
    251c:	ldr	r3, [fp, #-552]	; 0xfffffdd8
    2520:	cmp	r3, #0
    2524:	beq	2534 <coda_product_check+0x10c>
    2528:	ldr	r3, [fp, #-552]	; 0xfffffdd8
    252c:	cmp	r3, #1
    2530:	bne	253c <coda_product_check+0x114>
    2534:	mov	r3, #1
    2538:	b	2540 <coda_product_check+0x118>
    253c:	mov	r3, #0
    2540:	str	r3, [fp, #-16]
    2544:	ldr	r3, [fp, #-16]
    2548:	cmp	r3, #0
    254c:	beq	2598 <coda_product_check+0x170>
    2550:	sub	r3, fp, #564	; 0x234
    2554:	mov	r1, r3
    2558:	ldr	r0, [fp, #-880]	; 0xfffffc90
    255c:	bl	0 <coda_get_product_file_size>
    2560:	mov	r3, r0
    2564:	cmp	r3, #0
    2568:	beq	2574 <coda_product_check+0x14c>
    256c:	mvn	r3, #0
    2570:	b	2738 <coda_product_check+0x310>
    2574:	sub	r3, fp, #556	; 0x22c
    2578:	ldrd	r0, [r3, #-8]
    257c:	mov	r2, #0
    2580:	mov	r3, #0
    2584:	lsl	r3, r1, #3
    2588:	orr	r3, r3, r0, lsr #29
    258c:	lsl	r2, r0, #3
    2590:	sub	r1, fp, #556	; 0x22c
    2594:	strd	r2, [r1, #-8]
    2598:	ldr	r3, [fp, #-16]
    259c:	cmp	r3, #0
    25a0:	beq	25fc <coda_product_check+0x1d4>
    25a4:	ldr	r3, [fp, #-884]	; 0xfffffc8c
    25a8:	cmp	r3, #0
    25ac:	bne	25fc <coda_product_check+0x1d4>
    25b0:	bl	0 <coda_get_option_use_fast_size_expressions>
    25b4:	str	r0, [fp, #-20]	; 0xffffffec
    25b8:	mov	r0, #0
    25bc:	bl	0 <coda_set_option_use_fast_size_expressions>
    25c0:	sub	r2, fp, #572	; 0x23c
    25c4:	sub	r3, fp, #548	; 0x224
    25c8:	mov	r1, r2
    25cc:	mov	r0, r3
    25d0:	bl	0 <coda_cursor_get_bit_size>
    25d4:	mov	r3, r0
    25d8:	cmp	r3, #0
    25dc:	beq	25f0 <coda_product_check+0x1c8>
    25e0:	ldr	r0, [fp, #-20]	; 0xffffffec
    25e4:	bl	0 <coda_set_option_use_fast_size_expressions>
    25e8:	mvn	r3, #0
    25ec:	b	2738 <coda_product_check+0x310>
    25f0:	ldr	r0, [fp, #-20]	; 0xffffffec
    25f4:	bl	0 <coda_set_option_use_fast_size_expressions>
    25f8:	b	263c <coda_product_check+0x214>
    25fc:	sub	r1, fp, #24
    2600:	sub	r0, fp, #548	; 0x224
    2604:	ldr	r3, [fp, #-892]	; 0xfffffc84
    2608:	str	r3, [sp, #8]
    260c:	ldr	r3, [fp, #-888]	; 0xfffffc88
    2610:	str	r3, [sp, #4]
    2614:	sub	r3, fp, #572	; 0x23c
    2618:	str	r3, [sp]
    261c:	ldr	r3, [fp, #-16]
    2620:	ldr	r2, [fp, #-884]	; 0xfffffc8c
    2624:	bl	dc0 <check_data>
    2628:	mov	r3, r0
    262c:	cmp	r3, #0
    2630:	beq	263c <coda_product_check+0x214>
    2634:	mvn	r3, #0
    2638:	b	2738 <coda_product_check+0x310>
    263c:	ldr	r3, [fp, #-16]
    2640:	cmp	r3, #0
    2644:	beq	2734 <coda_product_check+0x30c>
    2648:	sub	r3, fp, #556	; 0x22c
    264c:	ldrd	r0, [r3, #-8]
    2650:	sub	r3, fp, #572	; 0x23c
    2654:	ldrd	r2, [r3]
    2658:	cmp	r1, r3
    265c:	cmpeq	r0, r2
    2660:	beq	2734 <coda_product_check+0x30c>
    2664:	sub	r3, fp, #556	; 0x22c
    2668:	ldrd	r2, [r3, #-8]
    266c:	mov	r0, #0
    2670:	mov	r1, #0
    2674:	lsr	r0, r2, #3
    2678:	orr	r0, r0, r3, lsl #29
    267c:	asr	r1, r3, #3
    2680:	sub	r3, fp, #596	; 0x254
    2684:	mov	r2, r3
    2688:	bl	0 <coda_str64>
    268c:	sub	r3, fp, #572	; 0x23c
    2690:	ldrd	r2, [r3]
    2694:	mov	r0, #0
    2698:	mov	r1, #0
    269c:	lsr	r0, r2, #3
    26a0:	orr	r0, r0, r3, lsl #29
    26a4:	asr	r1, r3, #3
    26a8:	sub	r3, fp, #620	; 0x26c
    26ac:	mov	r2, r3
    26b0:	bl	0 <coda_str64>
    26b4:	sub	r3, fp, #572	; 0x23c
    26b8:	ldrd	r2, [r3]
    26bc:	mov	r0, #7
    26c0:	mov	r1, #0
    26c4:	and	r4, r2, r0
    26c8:	and	r5, r3, r1
    26cc:	orrs	r3, r4, r5
    26d0:	beq	2708 <coda_product_check+0x2e0>
    26d4:	sub	r3, fp, #572	; 0x23c
    26d8:	ldrd	r2, [r3]
    26dc:	mov	r3, r2
    26e0:	and	r3, r3, #7
    26e4:	sub	r1, fp, #620	; 0x26c
    26e8:	sub	r2, fp, #596	; 0x254
    26ec:	sub	r0, fp, #876	; 0x36c
    26f0:	str	r3, [sp]
    26f4:	mov	r3, r1
    26f8:	movw	r1, #0
    26fc:	movt	r1, #0
    2700:	bl	0 <sprintf>
    2704:	b	2720 <coda_product_check+0x2f8>
    2708:	sub	r3, fp, #620	; 0x26c
    270c:	sub	r2, fp, #596	; 0x254
    2710:	sub	r0, fp, #876	; 0x36c
    2714:	movw	r1, #0
    2718:	movt	r1, #0
    271c:	bl	0 <sprintf>
    2720:	sub	r1, fp, #876	; 0x36c
    2724:	ldr	r3, [fp, #-888]	; 0xfffffc88
    2728:	ldr	r2, [fp, #-892]	; 0xfffffc84
    272c:	mov	r0, #0
    2730:	blx	r3
    2734:	mov	r3, #0
    2738:	mov	r0, r3
    273c:	sub	sp, fp, #12
    2740:	ldrd	r4, [sp]
    2744:	ldr	fp, [sp, #8]
    2748:	add	sp, sp, #12
    274c:	pop	{pc}		; (ldr pc, [sp], #4)
