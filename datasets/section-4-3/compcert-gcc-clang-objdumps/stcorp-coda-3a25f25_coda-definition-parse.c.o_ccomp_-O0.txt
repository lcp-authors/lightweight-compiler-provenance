
../repos/stcorp-coda-3a25f25/CMakeFiles/coda.dir/libcoda/coda-definition-parse.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <xml_element_name>:
       0:	mov	ip, sp
       4:	sub	sp, sp, #8
       8:	str	ip, [sp]
       c:	str	lr, [sp, #4]
      10:	cmn	r0, #1
      14:	bne	20 <xml_element_name+0x20>
      18:	ldr	r0, [pc, #48]	; 50 <xml_element_name+0x50>
      1c:	b	40 <xml_element_name+0x40>
      20:	ldr	r1, [pc, #36]	; 4c <xml_element_name+0x4c>
      24:	ldr	r1, [r1, r0, lsl #2]
      28:	ldrb	r2, [r1]
      2c:	cmp	r2, #32
      30:	beq	3c <xml_element_name+0x3c>
      34:	add	r1, r1, #1
      38:	b	28 <xml_element_name+0x28>
      3c:	add	r0, r1, #1
      40:	ldr	lr, [sp, #4]
      44:	add	sp, sp, #8
      48:	bx	lr
      4c:	.word	0x00000000
      50:	.word	0x0000150e

00000054 <handle_ziparchive_error>:
      54:	mov	ip, sp
      58:	push	{r0, r1, r2, r3}
      5c:	sub	sp, sp, #24
      60:	str	ip, [sp]
      64:	str	lr, [sp, #4]
      68:	str	r4, [sp, #8]
      6c:	mov	r4, r0
      70:	movw	r0, #65136	; 0xfe70
      74:	movt	r0, #65535	; 0xffff
      78:	ldr	r1, [pc, #40]	; a8 <handle_ziparchive_error+0x54>
      7c:	bl	0 <coda_set_error>
      80:	add	r2, sp, #16
      84:	add	lr, sp, #28
      88:	str	lr, [r2]
      8c:	ldr	r1, [sp, #16]
      90:	mov	r0, r4
      94:	bl	0 <coda_add_error_message_vargs>
      98:	ldr	r4, [sp, #8]
      9c:	ldr	lr, [sp, #4]
      a0:	add	sp, sp, #40	; 0x28
      a4:	bx	lr
      a8:	.word	0x0000030c

000000ac <is_whitespace>:
      ac:	mov	ip, sp
      b0:	sub	sp, sp, #16
      b4:	str	ip, [sp]
      b8:	str	lr, [sp, #4]
      bc:	str	r4, [sp, #8]
      c0:	str	r5, [sp, #12]
      c4:	mov	r4, r1
      c8:	mov	r5, r0
      cc:	cmp	r5, #0
      d0:	bne	e8 <is_whitespace+0x3c>
      d4:	ldr	r0, [pc, #180]	; 190 <is_whitespace+0xe4>
      d8:	ldr	r1, [pc, #168]	; 188 <is_whitespace+0xdc>
      dc:	movw	r2, #290	; 0x122
      e0:	ldr	r3, [pc, #164]	; 18c <is_whitespace+0xe0>
      e4:	bl	0 <__assert_fail>
      e8:	mov	r3, #0
      ec:	cmp	r3, r4
      f0:	bge	170 <is_whitespace+0xc4>
      f4:	ldrb	r0, [r5, r3]
      f8:	cmp	r0, #32
      fc:	beq	114 <is_whitespace+0x68>
     100:	ldrb	r2, [r5, r3]
     104:	cmp	r2, #9
     108:	movne	ip, #1
     10c:	moveq	ip, #0
     110:	b	118 <is_whitespace+0x6c>
     114:	mov	ip, #0
     118:	cmp	ip, #0
     11c:	beq	134 <is_whitespace+0x88>
     120:	ldrb	ip, [r5, r3]
     124:	cmp	ip, #10
     128:	movne	r0, #1
     12c:	moveq	r0, #0
     130:	b	138 <is_whitespace+0x8c>
     134:	mov	r0, #0
     138:	cmp	r0, #0
     13c:	beq	154 <is_whitespace+0xa8>
     140:	ldrb	r1, [r5, r3]
     144:	cmp	r1, #13
     148:	movne	ip, #1
     14c:	moveq	ip, #0
     150:	b	158 <is_whitespace+0xac>
     154:	mov	ip, #0
     158:	cmp	ip, #0
     15c:	beq	168 <is_whitespace+0xbc>
     160:	mov	r0, #0
     164:	b	174 <is_whitespace+0xc8>
     168:	add	r3, r3, #1
     16c:	b	ec <is_whitespace+0x40>
     170:	mov	r0, #1
     174:	ldr	r4, [sp, #8]
     178:	ldr	r5, [sp, #12]
     17c:	ldr	lr, [sp, #4]
     180:	add	sp, sp, #16
     184:	bx	lr
     188:	.word	0x00001939
     18c:	.word	0x00002093
     190:	.word	0x00000a3b

00000194 <regexp_match_string>:
     194:	mov	ip, sp
     198:	sub	sp, sp, #32
     19c:	str	ip, [sp, #4]
     1a0:	str	lr, [sp, #8]
     1a4:	str	r4, [sp, #16]
     1a8:	str	r5, [sp, #20]
     1ac:	str	r6, [sp, #24]
     1b0:	mov	r5, r0
     1b4:	mov	r0, r5
     1b8:	bl	0 <strlen>
     1bc:	mov	r4, r0
     1c0:	mov	r6, #0
     1c4:	mov	ip, #0
     1c8:	cmp	ip, r4
     1cc:	bge	268 <regexp_match_string+0xd4>
     1d0:	ldrb	r0, [r5, ip]
     1d4:	cmp	r0, #63	; 0x3f
     1d8:	bcs	21c <regexp_match_string+0x88>
     1dc:	cmp	r0, #42	; 0x2a
     1e0:	bcs	200 <regexp_match_string+0x6c>
     1e4:	cmp	r0, #36	; 0x24
     1e8:	beq	258 <regexp_match_string+0xc4>
     1ec:	cmp	r0, #40	; 0x28
     1f0:	beq	258 <regexp_match_string+0xc4>
     1f4:	cmp	r0, #41	; 0x29
     1f8:	beq	258 <regexp_match_string+0xc4>
     1fc:	b	25c <regexp_match_string+0xc8>
     200:	cmp	r0, #42	; 0x2a
     204:	beq	258 <regexp_match_string+0xc4>
     208:	cmp	r0, #43	; 0x2b
     20c:	beq	258 <regexp_match_string+0xc4>
     210:	cmp	r0, #46	; 0x2e
     214:	beq	258 <regexp_match_string+0xc4>
     218:	b	25c <regexp_match_string+0xc8>
     21c:	cmp	r0, #94	; 0x5e
     220:	bcs	240 <regexp_match_string+0xac>
     224:	cmp	r0, #63	; 0x3f
     228:	beq	258 <regexp_match_string+0xc4>
     22c:	cmp	r0, #91	; 0x5b
     230:	beq	258 <regexp_match_string+0xc4>
     234:	cmp	r0, #92	; 0x5c
     238:	beq	258 <regexp_match_string+0xc4>
     23c:	b	25c <regexp_match_string+0xc8>
     240:	cmp	r0, #94	; 0x5e
     244:	beq	258 <regexp_match_string+0xc4>
     248:	cmp	r0, #123	; 0x7b
     24c:	beq	258 <regexp_match_string+0xc4>
     250:	cmp	r0, #124	; 0x7c
     254:	bne	25c <regexp_match_string+0xc8>
     258:	add	r6, r6, #1
     25c:	add	r6, r6, #1
     260:	add	ip, ip, #1
     264:	b	1c8 <regexp_match_string+0x34>
     268:	add	r0, r6, #1
     26c:	bl	0 <malloc>
     270:	cmp	r0, #0
     274:	bne	29c <regexp_match_string+0x108>
     278:	mvn	r0, #0
     27c:	ldr	r1, [pc, #256]	; 384 <regexp_match_string+0x1f0>
     280:	add	r2, r6, #1
     284:	ldr	r3, [pc, #244]	; 380 <regexp_match_string+0x1ec>
     288:	movw	ip, #339	; 0x153
     28c:	str	ip, [sp]
     290:	bl	0 <coda_set_error>
     294:	mov	r0, #0
     298:	b	368 <regexp_match_string+0x1d4>
     29c:	mov	r1, #0
     2a0:	mov	ip, #0
     2a4:	cmp	ip, r4
     2a8:	bge	360 <regexp_match_string+0x1cc>
     2ac:	ldrb	r2, [r5, ip]
     2b0:	cmp	r2, #63	; 0x3f
     2b4:	bcs	2f8 <regexp_match_string+0x164>
     2b8:	cmp	r2, #42	; 0x2a
     2bc:	bcs	2dc <regexp_match_string+0x148>
     2c0:	cmp	r2, #36	; 0x24
     2c4:	beq	334 <regexp_match_string+0x1a0>
     2c8:	cmp	r2, #40	; 0x28
     2cc:	beq	334 <regexp_match_string+0x1a0>
     2d0:	cmp	r2, #41	; 0x29
     2d4:	beq	334 <regexp_match_string+0x1a0>
     2d8:	b	344 <regexp_match_string+0x1b0>
     2dc:	cmp	r2, #42	; 0x2a
     2e0:	beq	334 <regexp_match_string+0x1a0>
     2e4:	cmp	r2, #43	; 0x2b
     2e8:	beq	334 <regexp_match_string+0x1a0>
     2ec:	cmp	r2, #46	; 0x2e
     2f0:	beq	334 <regexp_match_string+0x1a0>
     2f4:	b	344 <regexp_match_string+0x1b0>
     2f8:	cmp	r2, #94	; 0x5e
     2fc:	bcs	31c <regexp_match_string+0x188>
     300:	cmp	r2, #63	; 0x3f
     304:	beq	334 <regexp_match_string+0x1a0>
     308:	cmp	r2, #91	; 0x5b
     30c:	beq	334 <regexp_match_string+0x1a0>
     310:	cmp	r2, #92	; 0x5c
     314:	beq	334 <regexp_match_string+0x1a0>
     318:	b	344 <regexp_match_string+0x1b0>
     31c:	cmp	r2, #94	; 0x5e
     320:	beq	334 <regexp_match_string+0x1a0>
     324:	cmp	r2, #123	; 0x7b
     328:	beq	334 <regexp_match_string+0x1a0>
     32c:	cmp	r2, #124	; 0x7c
     330:	bne	344 <regexp_match_string+0x1b0>
     334:	mov	r2, r1
     338:	add	r1, r2, #1
     33c:	mov	r3, #92	; 0x5c
     340:	strb	r3, [r0, r2]
     344:	mov	r2, r1
     348:	add	r1, r2, #1
     34c:	ldrb	r3, [r5, ip]
     350:	and	r3, r3, #255	; 0xff
     354:	strb	r3, [r0, r2]
     358:	add	ip, ip, #1
     35c:	b	2a4 <regexp_match_string+0x110>
     360:	mov	r3, #0
     364:	strb	r3, [r0, r1]
     368:	ldr	r4, [sp, #16]
     36c:	ldr	r5, [sp, #20]
     370:	ldr	r6, [sp, #24]
     374:	ldr	lr, [sp, #8]
     378:	add	sp, sp, #32
     37c:	bx	lr
     380:	.word	0x00001939
     384:	.word	0x00000e60

00000388 <escaped_string_length>:
     388:	mov	ip, sp
     38c:	sub	sp, sp, #16
     390:	str	ip, [sp]
     394:	str	lr, [sp, #4]
     398:	str	r4, [sp, #8]
     39c:	cmp	r0, #0
     3a0:	bne	3ac <escaped_string_length+0x24>
     3a4:	mov	r0, #0
     3a8:	b	518 <escaped_string_length+0x190>
     3ac:	mov	r4, #0
     3b0:	mov	r1, #0
     3b4:	ldrb	r3, [r0, r4]
     3b8:	cmp	r3, #0
     3bc:	beq	514 <escaped_string_length+0x18c>
     3c0:	ldrb	ip, [r0, r4]
     3c4:	cmp	ip, #92	; 0x5c
     3c8:	bne	508 <escaped_string_length+0x180>
     3cc:	add	r4, r4, #1
     3d0:	ldrb	r2, [r0, r4]
     3d4:	sub	r2, r2, #92	; 0x5c
     3d8:	cmp	r2, #27
     3dc:	bcs	45c <escaped_string_length+0xd4>
     3e0:	add	pc, pc, r2, lsl #2
     3e4:	nop	{0}
     3e8:	b	454 <escaped_string_length+0xcc>
     3ec:	b	45c <escaped_string_length+0xd4>
     3f0:	b	45c <escaped_string_length+0xd4>
     3f4:	b	45c <escaped_string_length+0xd4>
     3f8:	b	45c <escaped_string_length+0xd4>
     3fc:	b	454 <escaped_string_length+0xcc>
     400:	b	454 <escaped_string_length+0xcc>
     404:	b	45c <escaped_string_length+0xd4>
     408:	b	45c <escaped_string_length+0xd4>
     40c:	b	454 <escaped_string_length+0xcc>
     410:	b	454 <escaped_string_length+0xcc>
     414:	b	45c <escaped_string_length+0xd4>
     418:	b	45c <escaped_string_length+0xd4>
     41c:	b	45c <escaped_string_length+0xd4>
     420:	b	45c <escaped_string_length+0xd4>
     424:	b	45c <escaped_string_length+0xd4>
     428:	b	45c <escaped_string_length+0xd4>
     42c:	b	45c <escaped_string_length+0xd4>
     430:	b	454 <escaped_string_length+0xcc>
     434:	b	45c <escaped_string_length+0xd4>
     438:	b	45c <escaped_string_length+0xd4>
     43c:	b	45c <escaped_string_length+0xd4>
     440:	b	454 <escaped_string_length+0xcc>
     444:	b	45c <escaped_string_length+0xd4>
     448:	b	454 <escaped_string_length+0xcc>
     44c:	b	45c <escaped_string_length+0xd4>
     450:	b	454 <escaped_string_length+0xcc>
     454:	add	r1, r1, #1
     458:	b	50c <escaped_string_length+0x184>
     45c:	ldrb	r3, [r0, r4]
     460:	cmp	r3, #48	; 0x30
     464:	blt	47c <escaped_string_length+0xf4>
     468:	ldrb	r2, [r0, r4]
     46c:	cmp	r2, #57	; 0x39
     470:	movgt	r2, #1
     474:	movle	r2, #0
     478:	b	480 <escaped_string_length+0xf8>
     47c:	mov	r2, #1
     480:	cmp	r2, #0
     484:	beq	490 <escaped_string_length+0x108>
     488:	mvn	r0, #0
     48c:	b	518 <escaped_string_length+0x190>
     490:	add	r2, r0, r4
     494:	ldrb	r3, [r2, #1]
     498:	cmp	r3, #48	; 0x30
     49c:	blt	4b8 <escaped_string_length+0x130>
     4a0:	add	r2, r0, r4
     4a4:	ldrb	r2, [r2, #1]
     4a8:	cmp	r2, #57	; 0x39
     4ac:	movle	r2, #1
     4b0:	movgt	r2, #0
     4b4:	b	4bc <escaped_string_length+0x134>
     4b8:	mov	r2, #0
     4bc:	cmp	r2, #0
     4c0:	beq	500 <escaped_string_length+0x178>
     4c4:	add	r4, r4, #1
     4c8:	add	r2, r0, r4
     4cc:	ldrb	r2, [r2, #1]
     4d0:	cmp	r2, #48	; 0x30
     4d4:	blt	4f0 <escaped_string_length+0x168>
     4d8:	add	ip, r0, r4
     4dc:	ldrb	ip, [ip, #1]
     4e0:	cmp	ip, #57	; 0x39
     4e4:	movle	r2, #1
     4e8:	movgt	r2, #0
     4ec:	b	4f4 <escaped_string_length+0x16c>
     4f0:	mov	r2, #0
     4f4:	cmp	r2, #0
     4f8:	beq	500 <escaped_string_length+0x178>
     4fc:	add	r4, r4, #1
     500:	add	r1, r1, #1
     504:	b	50c <escaped_string_length+0x184>
     508:	add	r1, r1, #1
     50c:	add	r4, r4, #1
     510:	b	3b4 <escaped_string_length+0x2c>
     514:	mov	r0, r1
     518:	ldr	r4, [sp, #8]
     51c:	ldr	lr, [sp, #4]
     520:	add	sp, sp, #16
     524:	bx	lr

00000528 <decode_escaped_string>:
     528:	mov	ip, sp
     52c:	sub	sp, sp, #16
     530:	str	ip, [sp]
     534:	str	lr, [sp, #4]
     538:	str	r4, [sp, #8]
     53c:	cmp	r0, #0
     540:	bne	54c <decode_escaped_string+0x24>
     544:	mov	r0, #0
     548:	b	7c4 <decode_escaped_string+0x29c>
     54c:	mov	r4, #0
     550:	mov	r1, #0
     554:	ldrb	r2, [r0, r4]
     558:	cmp	r2, #0
     55c:	beq	7b8 <decode_escaped_string+0x290>
     560:	ldrb	r3, [r0, r4]
     564:	cmp	r3, #92	; 0x5c
     568:	bne	79c <decode_escaped_string+0x274>
     56c:	add	r4, r4, #1
     570:	ldrb	r2, [r0, r4]
     574:	sub	r2, r2, #92	; 0x5c
     578:	cmp	r2, #27
     57c:	bcs	6a8 <decode_escaped_string+0x180>
     580:	add	pc, pc, r2, lsl #2
     584:	nop	{0}
     588:	b	694 <decode_escaped_string+0x16c>
     58c:	b	6a8 <decode_escaped_string+0x180>
     590:	b	6a8 <decode_escaped_string+0x180>
     594:	b	6a8 <decode_escaped_string+0x180>
     598:	b	6a8 <decode_escaped_string+0x180>
     59c:	b	608 <decode_escaped_string+0xe0>
     5a0:	b	61c <decode_escaped_string+0xf4>
     5a4:	b	6a8 <decode_escaped_string+0x180>
     5a8:	b	6a8 <decode_escaped_string+0x180>
     5ac:	b	5f4 <decode_escaped_string+0xcc>
     5b0:	b	630 <decode_escaped_string+0x108>
     5b4:	b	6a8 <decode_escaped_string+0x180>
     5b8:	b	6a8 <decode_escaped_string+0x180>
     5bc:	b	6a8 <decode_escaped_string+0x180>
     5c0:	b	6a8 <decode_escaped_string+0x180>
     5c4:	b	6a8 <decode_escaped_string+0x180>
     5c8:	b	6a8 <decode_escaped_string+0x180>
     5cc:	b	6a8 <decode_escaped_string+0x180>
     5d0:	b	644 <decode_escaped_string+0x11c>
     5d4:	b	6a8 <decode_escaped_string+0x180>
     5d8:	b	6a8 <decode_escaped_string+0x180>
     5dc:	b	6a8 <decode_escaped_string+0x180>
     5e0:	b	658 <decode_escaped_string+0x130>
     5e4:	b	6a8 <decode_escaped_string+0x180>
     5e8:	b	66c <decode_escaped_string+0x144>
     5ec:	b	6a8 <decode_escaped_string+0x180>
     5f0:	b	680 <decode_escaped_string+0x158>
     5f4:	mov	r2, r1
     5f8:	add	r1, r2, #1
     5fc:	mov	r3, #27
     600:	strb	r3, [r0, r2]
     604:	b	7b0 <decode_escaped_string+0x288>
     608:	mov	r3, r1
     60c:	add	r1, r3, #1
     610:	mov	r2, #7
     614:	strb	r2, [r0, r3]
     618:	b	7b0 <decode_escaped_string+0x288>
     61c:	mov	r2, r1
     620:	add	r1, r2, #1
     624:	mov	r3, #8
     628:	strb	r3, [r0, r2]
     62c:	b	7b0 <decode_escaped_string+0x288>
     630:	mov	ip, r1
     634:	add	r1, ip, #1
     638:	mov	r2, #12
     63c:	strb	r2, [r0, ip]
     640:	b	7b0 <decode_escaped_string+0x288>
     644:	mov	ip, r1
     648:	add	r1, ip, #1
     64c:	mov	r2, #10
     650:	strb	r2, [r0, ip]
     654:	b	7b0 <decode_escaped_string+0x288>
     658:	mov	r2, r1
     65c:	add	r1, r2, #1
     660:	mov	r3, #13
     664:	strb	r3, [r0, r2]
     668:	b	7b0 <decode_escaped_string+0x288>
     66c:	mov	r2, r1
     670:	add	r1, r2, #1
     674:	mov	r3, #9
     678:	strb	r3, [r0, r2]
     67c:	b	7b0 <decode_escaped_string+0x288>
     680:	mov	r2, r1
     684:	add	r1, r2, #1
     688:	mov	r3, #11
     68c:	strb	r3, [r0, r2]
     690:	b	7b0 <decode_escaped_string+0x288>
     694:	mov	r2, r1
     698:	add	r1, r2, #1
     69c:	mov	r3, #92	; 0x5c
     6a0:	strb	r3, [r0, r2]
     6a4:	b	7b0 <decode_escaped_string+0x288>
     6a8:	ldrb	r2, [r0, r4]
     6ac:	cmp	r2, #48	; 0x30
     6b0:	blt	6c8 <decode_escaped_string+0x1a0>
     6b4:	ldrb	r2, [r0, r4]
     6b8:	cmp	r2, #57	; 0x39
     6bc:	movgt	r2, #1
     6c0:	movle	r2, #0
     6c4:	b	6cc <decode_escaped_string+0x1a4>
     6c8:	mov	r2, #1
     6cc:	cmp	r2, #0
     6d0:	beq	6dc <decode_escaped_string+0x1b4>
     6d4:	mvn	r0, #0
     6d8:	b	7c4 <decode_escaped_string+0x29c>
     6dc:	ldrb	r3, [r0, r4]
     6e0:	sub	r3, r3, #48	; 0x30
     6e4:	and	r2, r3, #255	; 0xff
     6e8:	strb	r2, [r0, r1]
     6ec:	add	r3, r0, r4
     6f0:	ldrb	r2, [r3, #1]
     6f4:	cmp	r2, #48	; 0x30
     6f8:	blt	714 <decode_escaped_string+0x1ec>
     6fc:	add	r2, r0, r4
     700:	ldrb	r3, [r2, #1]
     704:	cmp	r3, #57	; 0x39
     708:	movle	r3, #1
     70c:	movgt	r3, #0
     710:	b	718 <decode_escaped_string+0x1f0>
     714:	mov	r3, #0
     718:	cmp	r3, #0
     71c:	beq	794 <decode_escaped_string+0x26c>
     720:	add	r4, r4, #1
     724:	ldrb	ip, [r0, r1]
     728:	lsl	r2, ip, #3
     72c:	ldrb	ip, [r0, r4]
     730:	add	r2, r2, ip
     734:	sub	r2, r2, #48	; 0x30
     738:	and	r3, r2, #255	; 0xff
     73c:	strb	r3, [r0, r1]
     740:	add	r2, r0, r4
     744:	ldrb	ip, [r2, #1]
     748:	cmp	ip, #48	; 0x30
     74c:	blt	768 <decode_escaped_string+0x240>
     750:	add	r2, r0, r4
     754:	ldrb	ip, [r2, #1]
     758:	cmp	ip, #57	; 0x39
     75c:	movle	ip, #1
     760:	movgt	ip, #0
     764:	b	76c <decode_escaped_string+0x244>
     768:	mov	ip, #0
     76c:	cmp	ip, #0
     770:	beq	794 <decode_escaped_string+0x26c>
     774:	add	r4, r4, #1
     778:	ldrb	ip, [r0, r1]
     77c:	lsl	ip, ip, #3
     780:	ldrb	r2, [r0, r4]
     784:	add	r2, ip, r2
     788:	sub	r2, r2, #48	; 0x30
     78c:	and	r2, r2, #255	; 0xff
     790:	strb	r2, [r0, r1]
     794:	add	r1, r1, #1
     798:	b	7b0 <decode_escaped_string+0x288>
     79c:	mov	r3, r1
     7a0:	add	r1, r3, #1
     7a4:	ldrb	ip, [r0, r4]
     7a8:	and	r2, ip, #255	; 0xff
     7ac:	strb	r2, [r0, r3]
     7b0:	add	r4, r4, #1
     7b4:	b	554 <decode_escaped_string+0x2c>
     7b8:	mov	ip, #0
     7bc:	strb	ip, [r0, r1]
     7c0:	mov	r0, r1
     7c4:	ldr	r4, [sp, #8]
     7c8:	ldr	lr, [sp, #4]
     7cc:	add	sp, sp, #16
     7d0:	bx	lr

000007d4 <decode_xml_string>:
     7d4:	mov	ip, sp
     7d8:	sub	sp, sp, #24
     7dc:	str	ip, [sp]
     7e0:	str	lr, [sp, #4]
     7e4:	str	r4, [sp, #8]
     7e8:	str	r5, [sp, #12]
     7ec:	str	r6, [sp, #16]
     7f0:	mov	r5, r0
     7f4:	cmp	r5, #0
     7f8:	bne	804 <decode_xml_string+0x30>
     7fc:	mov	r0, #0
     800:	b	96c <decode_xml_string+0x198>
     804:	mov	r6, #0
     808:	mov	r4, #0
     80c:	ldrb	r0, [r5, r6]
     810:	cmp	r0, #0
     814:	beq	960 <decode_xml_string+0x18c>
     818:	ldrb	ip, [r5, r6]
     81c:	cmp	ip, #38	; 0x26
     820:	bne	944 <decode_xml_string+0x170>
     824:	add	r3, r5, r6
     828:	add	r0, r3, #1
     82c:	ldr	r1, [pc, #340]	; 988 <decode_xml_string+0x1b4>
     830:	mov	r2, #4
     834:	bl	0 <strncmp>
     838:	cmp	r0, #0
     83c:	beq	92c <decode_xml_string+0x158>
     840:	add	ip, r5, r6
     844:	add	r0, ip, #1
     848:	ldr	r1, [pc, #324]	; 994 <decode_xml_string+0x1c0>
     84c:	mov	r2, #5
     850:	bl	0 <strncmp>
     854:	cmp	r0, #0
     858:	beq	914 <decode_xml_string+0x140>
     85c:	add	r0, r5, r6
     860:	add	r0, r0, #1
     864:	ldr	r1, [pc, #288]	; 98c <decode_xml_string+0x1b8>
     868:	mov	r2, #3
     86c:	bl	0 <strncmp>
     870:	cmp	r0, #0
     874:	beq	8fc <decode_xml_string+0x128>
     878:	add	ip, r5, r6
     87c:	add	r0, ip, #1
     880:	ldr	r1, [pc, #264]	; 990 <decode_xml_string+0x1bc>
     884:	mov	r2, #3
     888:	bl	0 <strncmp>
     88c:	cmp	r0, #0
     890:	beq	8e4 <decode_xml_string+0x110>
     894:	add	r3, r5, r6
     898:	add	r0, r3, #1
     89c:	ldr	r1, [pc, #224]	; 984 <decode_xml_string+0x1b0>
     8a0:	mov	r2, #5
     8a4:	bl	0 <strncmp>
     8a8:	cmp	r0, #0
     8ac:	beq	8cc <decode_xml_string+0xf8>
     8b0:	mov	r2, r4
     8b4:	add	r4, r2, #1
     8b8:	ldrb	r1, [r5, r6]
     8bc:	and	r1, r1, #255	; 0xff
     8c0:	strb	r1, [r5, r2]
     8c4:	add	r6, r6, #1
     8c8:	b	80c <decode_xml_string+0x38>
     8cc:	mov	r1, r4
     8d0:	add	r4, r1, #1
     8d4:	mov	r2, #34	; 0x22
     8d8:	strb	r2, [r5, r1]
     8dc:	add	r6, r6, #6
     8e0:	b	80c <decode_xml_string+0x38>
     8e4:	mov	r1, r4
     8e8:	add	r4, r1, #1
     8ec:	mov	ip, #60	; 0x3c
     8f0:	strb	ip, [r5, r1]
     8f4:	add	r6, r6, #4
     8f8:	b	80c <decode_xml_string+0x38>
     8fc:	mov	r3, r4
     900:	add	r4, r3, #1
     904:	mov	r2, #60	; 0x3c
     908:	strb	r2, [r5, r3]
     90c:	add	r6, r6, #4
     910:	b	80c <decode_xml_string+0x38>
     914:	mov	ip, r4
     918:	add	r4, ip, #1
     91c:	mov	r1, #39	; 0x27
     920:	strb	r1, [r5, ip]
     924:	add	r6, r6, #6
     928:	b	80c <decode_xml_string+0x38>
     92c:	mov	r0, r4
     930:	add	r4, r0, #1
     934:	mov	r3, #38	; 0x26
     938:	strb	r3, [r5, r0]
     93c:	add	r6, r6, #5
     940:	b	80c <decode_xml_string+0x38>
     944:	mov	r0, r4
     948:	add	r4, r0, #1
     94c:	ldrb	r1, [r5, r6]
     950:	and	r3, r1, #255	; 0xff
     954:	strb	r3, [r5, r0]
     958:	add	r6, r6, #1
     95c:	b	80c <decode_xml_string+0x38>
     960:	mov	r2, #0
     964:	strb	r2, [r5, r4]
     968:	mov	r0, r4
     96c:	ldr	r4, [sp, #8]
     970:	ldr	r5, [sp, #12]
     974:	ldr	r6, [sp, #16]
     978:	ldr	lr, [sp, #4]
     97c:	add	sp, sp, #24
     980:	bx	lr
     984:	.word	0x00001b6c
     988:	.word	0x00000479
     98c:	.word	0x000013c3
     990:	.word	0x00001bf5
     994:	.word	0x00001e29

00000998 <get_attribute_value>:
     998:	mov	ip, sp
     99c:	sub	sp, sp, #16
     9a0:	str	ip, [sp]
     9a4:	str	lr, [sp, #4]
     9a8:	str	r4, [sp, #8]
     9ac:	str	r5, [sp, #12]
     9b0:	mov	r4, r1
     9b4:	mov	r5, r0
     9b8:	ldr	r2, [r5]
     9bc:	cmp	r2, #0
     9c0:	beq	9e8 <get_attribute_value+0x50>
     9c4:	ldr	r0, [r5]
     9c8:	mov	r1, r4
     9cc:	bl	0 <strcmp>
     9d0:	cmp	r0, #0
     9d4:	bne	9e0 <get_attribute_value+0x48>
     9d8:	ldr	r0, [r5, #4]
     9dc:	b	9ec <get_attribute_value+0x54>
     9e0:	add	r5, r5, #8
     9e4:	b	9b8 <get_attribute_value+0x20>
     9e8:	mov	r0, #0
     9ec:	ldr	r4, [sp, #8]
     9f0:	ldr	r5, [sp, #12]
     9f4:	ldr	lr, [sp, #4]
     9f8:	add	sp, sp, #16
     9fc:	bx	lr

00000a00 <get_mandatory_attribute_value>:
     a00:	mov	ip, sp
     a04:	sub	sp, sp, #24
     a08:	str	ip, [sp]
     a0c:	str	lr, [sp, #4]
     a10:	str	r4, [sp, #8]
     a14:	str	r5, [sp, #12]
     a18:	str	r6, [sp, #16]
     a1c:	mov	r5, r2
     a20:	mov	r6, r1
     a24:	mov	r1, r6
     a28:	bl	998 <get_attribute_value>
     a2c:	mov	r4, r0
     a30:	cmp	r4, #0
     a34:	bne	a58 <get_mandatory_attribute_value+0x58>
     a38:	mov	r0, r5
     a3c:	bl	0 <xml_element_name>
     a40:	mov	r3, r0
     a44:	movw	r0, #65136	; 0xfe70
     a48:	movt	r0, #65535	; 0xffff
     a4c:	ldr	r1, [pc, #32]	; a74 <get_mandatory_attribute_value+0x74>
     a50:	mov	r2, r6
     a54:	bl	0 <coda_set_error>
     a58:	mov	r0, r4
     a5c:	ldr	r4, [sp, #8]
     a60:	ldr	r5, [sp, #12]
     a64:	ldr	r6, [sp, #16]
     a68:	ldr	lr, [sp, #4]
     a6c:	add	sp, sp, #24
     a70:	bx	lr
     a74:	.word	0x00000f60

00000a78 <handle_name_attribute_for_type>:
     a78:	mov	ip, sp
     a7c:	sub	sp, sp, #16
     a80:	str	ip, [sp]
     a84:	str	lr, [sp, #4]
     a88:	str	r4, [sp, #8]
     a8c:	str	r5, [sp, #12]
     a90:	mov	r5, r0
     a94:	mov	r0, r1
     a98:	ldr	ip, [r5]
     a9c:	ldr	ip, [ip, #396]	; 0x18c
     aa0:	ldr	r1, [ip, #396]	; 0x18c
     aa4:	cmp	r1, #0
     aa8:	bne	b20 <handle_name_attribute_for_type+0xa8>
     aac:	ldr	r1, [pc, #172]	; b60 <handle_name_attribute_for_type+0xe8>
     ab0:	ldr	r2, [r5]
     ab4:	ldr	r2, [r2]
     ab8:	bl	a00 <get_mandatory_attribute_value>
     abc:	mov	r4, r0
     ac0:	cmp	r4, #0
     ac4:	bne	ad0 <handle_name_attribute_for_type+0x58>
     ac8:	mvn	r0, #0
     acc:	b	b4c <handle_name_attribute_for_type+0xd4>
     ad0:	ldr	r1, [r5, #20]
     ad4:	mov	r0, r4
     ad8:	bl	0 <strcmp>
     adc:	cmp	r0, #0
     ae0:	beq	b00 <handle_name_attribute_for_type+0x88>
     ae4:	movw	r0, #65136	; 0xfe70
     ae8:	movt	r0, #65535	; 0xffff
     aec:	ldr	r1, [pc, #116]	; b68 <handle_name_attribute_for_type+0xf0>
     af0:	ldr	r2, [r5, #20]
     af4:	bl	0 <coda_set_error>
     af8:	mvn	r0, #0
     afc:	b	b4c <handle_name_attribute_for_type+0xd4>
     b00:	ldr	r1, [r5]
     b04:	ldr	r0, [r1, #8]
     b08:	mov	r1, r4
     b0c:	bl	0 <coda_type_set_name>
     b10:	cmp	r0, #0
     b14:	beq	b48 <handle_name_attribute_for_type+0xd0>
     b18:	mvn	r0, #0
     b1c:	b	b4c <handle_name_attribute_for_type+0xd4>
     b20:	ldr	r1, [pc, #56]	; b60 <handle_name_attribute_for_type+0xe8>
     b24:	bl	998 <get_attribute_value>
     b28:	cmp	r0, #0
     b2c:	beq	b48 <handle_name_attribute_for_type+0xd0>
     b30:	movw	r0, #65136	; 0xfe70
     b34:	movt	r0, #65535	; 0xffff
     b38:	ldr	r1, [pc, #36]	; b64 <handle_name_attribute_for_type+0xec>
     b3c:	bl	0 <coda_set_error>
     b40:	mvn	r0, #0
     b44:	b	b4c <handle_name_attribute_for_type+0xd4>
     b48:	mov	r0, #0
     b4c:	ldr	r4, [sp, #8]
     b50:	ldr	r5, [sp, #12]
     b54:	ldr	lr, [sp, #4]
     b58:	add	sp, sp, #16
     b5c:	bx	lr
     b60:	.word	0x0000047e
     b64:	.word	0x00001b72
     b68:	.word	0x000017e3

00000b6c <handle_format_attribute_for_type>:
     b6c:	mov	ip, sp
     b70:	sub	sp, sp, #16
     b74:	str	ip, [sp]
     b78:	str	lr, [sp, #4]
     b7c:	str	r4, [sp, #8]
     b80:	mov	r4, r0
     b84:	mov	r0, r1
     b88:	ldr	r2, [r4]
     b8c:	ldr	ip, [r2, #396]	; 0x18c
     b90:	ldr	r1, [ip, #48]	; 0x30
     b94:	cmp	r1, #0
     b98:	bne	bd8 <handle_format_attribute_for_type+0x6c>
     b9c:	ldr	r1, [pc, #148]	; c38 <handle_format_attribute_for_type+0xcc>
     ba0:	ldr	r2, [r4]
     ba4:	ldr	r2, [r2]
     ba8:	bl	a00 <get_mandatory_attribute_value>
     bac:	cmp	r0, #0
     bb0:	bne	bbc <handle_format_attribute_for_type+0x50>
     bb4:	mvn	r0, #0
     bb8:	b	c28 <handle_format_attribute_for_type+0xbc>
     bbc:	ldr	r1, [r4]
     bc0:	add	r1, r1, #44	; 0x2c
     bc4:	bl	0 <coda_format_from_string>
     bc8:	cmp	r0, #0
     bcc:	beq	c18 <handle_format_attribute_for_type+0xac>
     bd0:	mvn	r0, #0
     bd4:	b	c28 <handle_format_attribute_for_type+0xbc>
     bd8:	ldr	r1, [pc, #88]	; c38 <handle_format_attribute_for_type+0xcc>
     bdc:	bl	998 <get_attribute_value>
     be0:	cmp	r0, #0
     be4:	beq	c04 <handle_format_attribute_for_type+0x98>
     be8:	ldr	r2, [r4]
     bec:	add	r1, r2, #44	; 0x2c
     bf0:	bl	0 <coda_format_from_string>
     bf4:	cmp	r0, #0
     bf8:	beq	c18 <handle_format_attribute_for_type+0xac>
     bfc:	mvn	r0, #0
     c00:	b	c28 <handle_format_attribute_for_type+0xbc>
     c04:	ldr	r0, [r4]
     c08:	ldr	ip, [r4]
     c0c:	ldr	r3, [ip, #396]	; 0x18c
     c10:	ldr	ip, [r3, #44]	; 0x2c
     c14:	str	ip, [r0, #44]	; 0x2c
     c18:	ldr	r1, [r4]
     c1c:	mov	r0, #1
     c20:	str	r0, [r1, #48]	; 0x30
     c24:	mov	r0, #0
     c28:	ldr	r4, [sp, #8]
     c2c:	ldr	lr, [sp, #4]
     c30:	add	sp, sp, #16
     c34:	bx	lr
     c38:	.word	0x00001746

00000c3c <handle_xml_name>:
     c3c:	mov	ip, sp
     c40:	sub	sp, sp, #16
     c44:	str	ip, [sp]
     c48:	str	lr, [sp, #4]
     c4c:	str	r4, [sp, #8]
     c50:	str	r5, [sp, #12]
     c54:	mov	r4, r1
     c58:	mov	r5, r0
     c5c:	ldr	r2, [r5]
     c60:	ldr	r2, [r2, #48]	; 0x30
     c64:	cmp	r2, #0
     c68:	bne	c80 <handle_xml_name+0x44>
     c6c:	ldr	r0, [pc, #212]	; d48 <handle_xml_name+0x10c>
     c70:	ldr	r1, [pc, #192]	; d38 <handle_xml_name+0xfc>
     c74:	mov	r2, #676	; 0x2a4
     c78:	ldr	r3, [pc, #196]	; d44 <handle_xml_name+0x108>
     c7c:	bl	0 <__assert_fail>
     c80:	ldr	ip, [r5]
     c84:	ldr	r0, [ip, #44]	; 0x2c
     c88:	cmp	r0, #2
     c8c:	beq	c98 <handle_xml_name+0x5c>
     c90:	mov	r0, #0
     c94:	b	d24 <handle_xml_name+0xe8>
     c98:	ldr	r0, [r5]
     c9c:	ldr	r5, [r0, #396]	; 0x18c
     ca0:	ldr	r1, [r5]
     ca4:	cmp	r1, #14
     ca8:	beq	cc8 <handle_xml_name+0x8c>
     cac:	ldr	r1, [r5]
     cb0:	cmn	r1, #1
     cb4:	bne	cc0 <handle_xml_name+0x84>
     cb8:	mov	r0, #0
     cbc:	b	d24 <handle_xml_name+0xe8>
     cc0:	ldr	r5, [r5, #396]	; 0x18c
     cc4:	b	ca0 <handle_xml_name+0x64>
     cc8:	ldr	r1, [pc, #112]	; d40 <handle_xml_name+0x104>
     ccc:	mov	r0, r4
     cd0:	bl	998 <get_attribute_value>
     cd4:	mov	r1, r0
     cd8:	cmp	r1, #0
     cdc:	beq	d20 <handle_xml_name+0xe4>
     ce0:	ldr	ip, [r5, #8]
     ce4:	ldr	r0, [ip, #4]
     ce8:	cmp	r0, #0
     cec:	beq	d08 <handle_xml_name+0xcc>
     cf0:	movw	r0, #65136	; 0xfe70
     cf4:	movt	r0, #65535	; 0xffff
     cf8:	ldr	r1, [pc, #60]	; d3c <handle_xml_name+0x100>
     cfc:	bl	0 <coda_set_error>
     d00:	mvn	r0, #0
     d04:	b	d24 <handle_xml_name+0xe8>
     d08:	ldr	r0, [r5, #8]
     d0c:	bl	0 <coda_type_record_field_set_real_name>
     d10:	cmp	r0, #0
     d14:	beq	d20 <handle_xml_name+0xe4>
     d18:	mvn	r0, #0
     d1c:	b	d24 <handle_xml_name+0xe8>
     d20:	mov	r0, #0
     d24:	ldr	r4, [sp, #8]
     d28:	ldr	r5, [sp, #12]
     d2c:	ldr	lr, [sp, #4]
     d30:	add	sp, sp, #16
     d34:	bx	lr
     d38:	.word	0x00001939
     d3c:	.word	0x000003a5
     d40:	.word	0x000001f6
     d44:	.word	0x000020a1
     d48:	.word	0x00001687

00000d4c <get_named_type>:
     d4c:	mov	ip, sp
     d50:	sub	sp, sp, #32
     d54:	str	ip, [sp, #4]
     d58:	str	lr, [sp, #8]
     d5c:	str	r4, [sp, #16]
     d60:	str	r5, [sp, #20]
     d64:	str	r6, [sp, #24]
     d68:	mov	r4, r2
     d6c:	mov	r5, r1
     d70:	mov	r6, r0
     d74:	ldr	ip, [r6, #24]
     d78:	cmp	ip, #0
     d7c:	bne	d94 <get_named_type+0x48>
     d80:	ldr	r0, [pc, #156]	; e24 <get_named_type+0xd8>
     d84:	ldr	r1, [pc, #148]	; e20 <get_named_type+0xd4>
     d88:	movw	r2, #710	; 0x2c6
     d8c:	ldr	r3, [pc, #136]	; e1c <get_named_type+0xd0>
     d90:	bl	0 <__assert_fail>
     d94:	ldr	r0, [r6, #24]
     d98:	mov	r1, r5
     d9c:	bl	0 <coda_product_class_has_named_type>
     da0:	cmp	r0, #0
     da4:	bne	ddc <get_named_type+0x90>
     da8:	ldr	r0, [r6, #16]
     dac:	mov	r1, #1
     db0:	ldr	r3, [r6, #24]
     db4:	ldr	r2, [r6, #28]
     db8:	str	r2, [sp]
     dbc:	mov	r2, r5
     dc0:	bl	8448 <parse_entry>
     dc4:	cmp	r0, #0
     dc8:	beq	ddc <get_named_type+0x90>
     dcc:	mov	r2, #0
     dd0:	str	r2, [r6, #44]	; 0x2c
     dd4:	mvn	r0, #0
     dd8:	b	e04 <get_named_type+0xb8>
     ddc:	ldr	r0, [r6, #24]
     de0:	mov	r1, r5
     de4:	bl	0 <coda_product_class_get_named_type>
     de8:	str	r0, [r4]
     dec:	ldr	r3, [r4]
     df0:	ldr	r1, [r4]
     df4:	ldr	r0, [r1, #4]
     df8:	add	r0, r0, #1
     dfc:	str	r0, [r3, #4]
     e00:	mov	r0, #0
     e04:	ldr	r4, [sp, #16]
     e08:	ldr	r5, [sp, #20]
     e0c:	ldr	r6, [sp, #24]
     e10:	ldr	lr, [sp, #8]
     e14:	add	sp, sp, #32
     e18:	bx	lr
     e1c:	.word	0x000020b1
     e20:	.word	0x00001939
     e24:	.word	0x0000199e

00000e28 <abort_parser>:
     e28:	mov	ip, sp
     e2c:	sub	sp, sp, #16
     e30:	str	ip, [sp]
     e34:	str	lr, [sp, #4]
     e38:	str	r4, [sp, #8]
     e3c:	mov	r4, r0
     e40:	ldr	r0, [r4, #4]
     e44:	mov	r1, #0
     e48:	bl	0 <coda_XML_StopParser>
     e4c:	mov	r1, #1
     e50:	str	r1, [r4, #36]	; 0x24
     e54:	ldr	r4, [sp, #8]
     e58:	ldr	lr, [sp, #4]
     e5c:	add	sp, sp, #16
     e60:	bx	lr

00000e64 <register_sub_element>:
     e64:	mov	ip, sp
     e68:	sub	sp, sp, #24
     e6c:	str	ip, [sp]
     e70:	str	lr, [sp, #4]
     e74:	str	r4, [sp, #8]
     e78:	str	r5, [sp, #12]
     e7c:	str	r6, [sp, #16]
     e80:	str	r7, [sp, #20]
     e84:	mov	r4, r3
     e88:	mov	r5, r2
     e8c:	mov	r6, r1
     e90:	mov	r7, r0
     e94:	cmp	r5, #0
     e98:	bne	eb0 <register_sub_element+0x4c>
     e9c:	ldr	r0, [pc, #68]	; ee8 <register_sub_element+0x84>
     ea0:	ldr	r1, [pc, #60]	; ee4 <register_sub_element+0x80>
     ea4:	movw	r2, #735	; 0x2df
     ea8:	ldr	r3, [pc, #60]	; eec <register_sub_element+0x88>
     eac:	bl	0 <__assert_fail>
     eb0:	lsl	ip, r6, #2
     eb4:	add	r1, r7, ip
     eb8:	str	r5, [r1, #52]	; 0x34
     ebc:	lsl	r0, r6, #2
     ec0:	add	r3, r7, r0
     ec4:	str	r4, [r3, #224]	; 0xe0
     ec8:	ldr	r4, [sp, #8]
     ecc:	ldr	r5, [sp, #12]
     ed0:	ldr	r6, [sp, #16]
     ed4:	ldr	r7, [sp, #20]
     ed8:	ldr	lr, [sp, #4]
     edc:	add	sp, sp, #24
     ee0:	bx	lr
     ee4:	.word	0x00001939
     ee8:	.word	0x000019ba
     eec:	.word	0x000020c0

00000ef0 <register_type_elements>:
     ef0:	mov	ip, sp
     ef4:	sub	sp, sp, #16
     ef8:	str	ip, [sp]
     efc:	str	lr, [sp, #4]
     f00:	str	r4, [sp, #8]
     f04:	str	r5, [sp, #12]
     f08:	mov	r4, r1
     f0c:	mov	r5, r0
     f10:	mov	r1, #1
     f14:	ldr	r2, [pc, #320]	; 105c <register_type_elements+0x16c>
     f18:	mov	r3, r4
     f1c:	mov	r0, r5
     f20:	bl	e64 <register_sub_element>
     f24:	mov	r1, #2
     f28:	ldr	r2, [pc, #308]	; 1064 <register_type_elements+0x174>
     f2c:	mov	r3, r4
     f30:	mov	r0, r5
     f34:	bl	e64 <register_sub_element>
     f38:	mov	r1, #3
     f3c:	ldr	r2, [pc, #308]	; 1078 <register_type_elements+0x188>
     f40:	mov	r3, r4
     f44:	mov	r0, r5
     f48:	bl	e64 <register_sub_element>
     f4c:	mov	r1, #0
     f50:	ldr	r2, [pc, #264]	; 1060 <register_type_elements+0x170>
     f54:	mov	r3, r4
     f58:	mov	r0, r5
     f5c:	bl	e64 <register_sub_element>
     f60:	mov	r1, #9
     f64:	ldr	r2, [pc, #280]	; 1084 <register_type_elements+0x194>
     f68:	mov	r3, r4
     f6c:	mov	r0, r5
     f70:	bl	e64 <register_sub_element>
     f74:	mov	r1, #17
     f78:	ldr	r2, [pc, #236]	; 106c <register_type_elements+0x17c>
     f7c:	mov	r3, r4
     f80:	mov	r0, r5
     f84:	bl	e64 <register_sub_element>
     f88:	mov	r1, #20
     f8c:	ldr	r2, [pc, #212]	; 1068 <register_type_elements+0x178>
     f90:	mov	r3, r4
     f94:	mov	r0, r5
     f98:	bl	e64 <register_sub_element>
     f9c:	mov	r1, #27
     fa0:	ldr	r2, [pc, #212]	; 107c <register_type_elements+0x18c>
     fa4:	mov	r3, r4
     fa8:	mov	r0, r5
     fac:	bl	e64 <register_sub_element>
     fb0:	mov	r1, #34	; 0x22
     fb4:	ldr	r2, [pc, #184]	; 1074 <register_type_elements+0x184>
     fb8:	mov	r3, r4
     fbc:	mov	r0, r5
     fc0:	bl	e64 <register_sub_element>
     fc4:	mov	r1, #35	; 0x23
     fc8:	ldr	r2, [pc, #132]	; 1054 <register_type_elements+0x164>
     fcc:	mov	r3, r4
     fd0:	mov	r0, r5
     fd4:	bl	e64 <register_sub_element>
     fd8:	mov	r1, #37	; 0x25
     fdc:	ldr	r2, [pc, #156]	; 1080 <register_type_elements+0x190>
     fe0:	mov	r3, r4
     fe4:	mov	r0, r5
     fe8:	bl	e64 <register_sub_element>
     fec:	mov	r1, #38	; 0x26
     ff0:	ldr	r2, [pc, #96]	; 1058 <register_type_elements+0x168>
     ff4:	mov	r3, r4
     ff8:	mov	r0, r5
     ffc:	bl	e64 <register_sub_element>
    1000:	mov	r1, #39	; 0x27
    1004:	ldr	r2, [pc, #124]	; 1088 <register_type_elements+0x198>
    1008:	mov	r3, r4
    100c:	mov	r0, r5
    1010:	bl	e64 <register_sub_element>
    1014:	mov	r1, #40	; 0x28
    1018:	ldr	r2, [pc, #48]	; 1050 <register_type_elements+0x160>
    101c:	mov	r3, r4
    1020:	mov	r0, r5
    1024:	bl	e64 <register_sub_element>
    1028:	mov	r1, #42	; 0x2a
    102c:	ldr	r2, [pc, #60]	; 1070 <register_type_elements+0x180>
    1030:	mov	r3, r4
    1034:	mov	r0, r5
    1038:	bl	e64 <register_sub_element>
    103c:	ldr	r4, [sp, #8]
    1040:	ldr	r5, [sp, #12]
    1044:	ldr	lr, [sp, #4]
    1048:	add	sp, sp, #16
    104c:	bx	lr
	...

0000108c <data_dictionary_add_product_class>:
    108c:	mov	ip, sp
    1090:	sub	sp, sp, #16
    1094:	str	ip, [sp]
    1098:	str	lr, [sp, #4]
    109c:	str	r4, [sp, #8]
    10a0:	mov	r4, r0
    10a4:	ldr	r2, [r4]
    10a8:	ldr	r0, [r2, #8]
    10ac:	bl	0 <coda_data_dictionary_add_product_class>
    10b0:	cmp	r0, #0
    10b4:	beq	10c0 <data_dictionary_add_product_class+0x34>
    10b8:	mvn	r0, #0
    10bc:	b	10d0 <data_dictionary_add_product_class+0x44>
    10c0:	ldr	r1, [r4]
    10c4:	mov	r0, #0
    10c8:	str	r0, [r1, #8]
    10cc:	mov	r0, #0
    10d0:	ldr	r4, [sp, #8]
    10d4:	ldr	lr, [sp, #4]
    10d8:	add	sp, sp, #16
    10dc:	bx	lr

000010e0 <dummy_free_handler>:
    10e0:	mov	ip, sp
    10e4:	sub	sp, sp, #8
    10e8:	str	ip, [sp]
    10ec:	str	lr, [sp, #4]
    10f0:	ldr	lr, [sp, #4]
    10f4:	add	sp, sp, #8
    10f8:	bx	lr

000010fc <dummy_init>:
    10fc:	mov	ip, sp
    1100:	sub	sp, sp, #8
    1104:	str	ip, [sp]
    1108:	str	lr, [sp, #4]
    110c:	mov	r0, #0
    1110:	ldr	lr, [sp, #4]
    1114:	add	sp, sp, #8
    1118:	bx	lr

0000111c <bool_expression_finalise>:
    111c:	mov	ip, sp
    1120:	sub	sp, sp, #24
    1124:	str	ip, [sp]
    1128:	str	lr, [sp, #4]
    112c:	str	r4, [sp, #8]
    1130:	mov	r4, r0
    1134:	ldr	r3, [r4]
    1138:	ldr	ip, [r3, #12]
    113c:	cmp	ip, #0
    1140:	beq	1180 <bool_expression_finalise+0x64>
    1144:	ldr	r2, [r4]
    1148:	ldr	r0, [r2, #12]
    114c:	bl	0 <strlen>
    1150:	mov	r1, r0
    1154:	ldr	r3, [r4]
    1158:	ldr	r0, [r3, #12]
    115c:	bl	ac <is_whitespace>
    1160:	cmp	r0, #0
    1164:	beq	1180 <bool_expression_finalise+0x64>
    1168:	ldr	r3, [r4]
    116c:	ldr	r0, [r3, #12]
    1170:	bl	0 <free>
    1174:	ldr	ip, [r4]
    1178:	mov	r0, #0
    117c:	str	r0, [ip, #12]
    1180:	ldr	r0, [r4]
    1184:	ldr	r2, [r0, #12]
    1188:	cmp	r2, #0
    118c:	bne	11a8 <bool_expression_finalise+0x8c>
    1190:	movw	r0, #65136	; 0xfe70
    1194:	movt	r0, #65535	; 0xffff
    1198:	ldr	r1, [pc, #164]	; 1244 <bool_expression_finalise+0x128>
    119c:	bl	0 <coda_set_error>
    11a0:	mvn	r0, #0
    11a4:	b	1230 <bool_expression_finalise+0x114>
    11a8:	ldr	r1, [r4]
    11ac:	ldr	r0, [r1, #12]
    11b0:	add	r1, sp, #20
    11b4:	bl	0 <coda_expression_from_string>
    11b8:	cmp	r0, #0
    11bc:	beq	11c8 <bool_expression_finalise+0xac>
    11c0:	mvn	r0, #0
    11c4:	b	1230 <bool_expression_finalise+0x114>
    11c8:	ldr	r0, [r4]
    11cc:	ldr	r0, [r0, #12]
    11d0:	bl	0 <free>
    11d4:	ldr	ip, [r4]
    11d8:	mov	r3, #0
    11dc:	str	r3, [ip, #12]
    11e0:	ldr	ip, [r4]
    11e4:	ldr	r0, [sp, #20]
    11e8:	str	r0, [ip, #8]
    11ec:	ldr	r0, [sp, #20]
    11f0:	add	r1, sp, #16
    11f4:	bl	0 <coda_expression_get_type>
    11f8:	cmp	r0, #0
    11fc:	beq	1208 <bool_expression_finalise+0xec>
    1200:	mvn	r0, #0
    1204:	b	1230 <bool_expression_finalise+0x114>
    1208:	ldr	r0, [sp, #16]
    120c:	cmp	r0, #0
    1210:	beq	122c <bool_expression_finalise+0x110>
    1214:	movw	r0, #65136	; 0xfe70
    1218:	movt	r0, #65535	; 0xffff
    121c:	ldr	r1, [pc, #28]	; 1240 <bool_expression_finalise+0x124>
    1220:	bl	0 <coda_set_error>
    1224:	mvn	r0, #0
    1228:	b	1230 <bool_expression_finalise+0x114>
    122c:	mov	r0, #0
    1230:	ldr	r4, [sp, #8]
    1234:	ldr	lr, [sp, #4]
    1238:	add	sp, sp, #24
    123c:	bx	lr
    1240:	.word	0x00000c4f
    1244:	.word	0x0000019d

00001248 <bool_expression_init>:
    1248:	mov	ip, sp
    124c:	sub	sp, sp, #8
    1250:	str	ip, [sp]
    1254:	str	lr, [sp, #4]
    1258:	ldr	r2, [r0]
    125c:	mov	r1, #1
    1260:	str	r1, [r2, #32]
    1264:	ldr	r1, [r0]
    1268:	ldr	ip, [pc, #32]	; 1290 <bool_expression_init+0x48>
    126c:	str	ip, [r1, #40]	; 0x28
    1270:	ldr	r1, [r0]
    1274:	ldr	r3, [pc, #16]	; 128c <bool_expression_init+0x44>
    1278:	str	r3, [r1, #36]	; 0x24
    127c:	mov	r0, #0
    1280:	ldr	lr, [sp, #4]
    1284:	add	sp, sp, #8
    1288:	bx	lr
	...

00001294 <integer_expression_finalise>:
    1294:	mov	ip, sp
    1298:	sub	sp, sp, #24
    129c:	str	ip, [sp]
    12a0:	str	lr, [sp, #4]
    12a4:	str	r4, [sp, #8]
    12a8:	mov	r4, r0
    12ac:	ldr	r3, [r4]
    12b0:	ldr	ip, [r3, #12]
    12b4:	cmp	ip, #0
    12b8:	beq	12f8 <integer_expression_finalise+0x64>
    12bc:	ldr	r2, [r4]
    12c0:	ldr	r0, [r2, #12]
    12c4:	bl	0 <strlen>
    12c8:	mov	r1, r0
    12cc:	ldr	r3, [r4]
    12d0:	ldr	r0, [r3, #12]
    12d4:	bl	ac <is_whitespace>
    12d8:	cmp	r0, #0
    12dc:	beq	12f8 <integer_expression_finalise+0x64>
    12e0:	ldr	r3, [r4]
    12e4:	ldr	r0, [r3, #12]
    12e8:	bl	0 <free>
    12ec:	ldr	ip, [r4]
    12f0:	mov	r0, #0
    12f4:	str	r0, [ip, #12]
    12f8:	ldr	r0, [r4]
    12fc:	ldr	r2, [r0, #12]
    1300:	cmp	r2, #0
    1304:	bne	1320 <integer_expression_finalise+0x8c>
    1308:	movw	r0, #65136	; 0xfe70
    130c:	movt	r0, #65535	; 0xffff
    1310:	ldr	r1, [pc, #160]	; 13b8 <integer_expression_finalise+0x124>
    1314:	bl	0 <coda_set_error>
    1318:	mvn	r0, #0
    131c:	b	13a8 <integer_expression_finalise+0x114>
    1320:	ldr	r1, [r4]
    1324:	ldr	r0, [r1, #12]
    1328:	add	r1, sp, #20
    132c:	bl	0 <coda_expression_from_string>
    1330:	cmp	r0, #0
    1334:	beq	1340 <integer_expression_finalise+0xac>
    1338:	mvn	r0, #0
    133c:	b	13a8 <integer_expression_finalise+0x114>
    1340:	ldr	r0, [r4]
    1344:	ldr	r0, [r0, #12]
    1348:	bl	0 <free>
    134c:	ldr	ip, [r4]
    1350:	mov	r3, #0
    1354:	str	r3, [ip, #12]
    1358:	ldr	ip, [r4]
    135c:	ldr	r0, [sp, #20]
    1360:	str	r0, [ip, #8]
    1364:	ldr	r0, [sp, #20]
    1368:	add	r1, sp, #16
    136c:	bl	0 <coda_expression_get_type>
    1370:	cmp	r0, #0
    1374:	beq	1380 <integer_expression_finalise+0xec>
    1378:	mvn	r0, #0
    137c:	b	13a8 <integer_expression_finalise+0x114>
    1380:	ldr	r0, [sp, #16]
    1384:	cmp	r0, #1
    1388:	beq	13a4 <integer_expression_finalise+0x110>
    138c:	movw	r0, #65136	; 0xfe70
    1390:	movt	r0, #65535	; 0xffff
    1394:	ldr	r1, [pc, #32]	; 13bc <integer_expression_finalise+0x128>
    1398:	bl	0 <coda_set_error>
    139c:	mvn	r0, #0
    13a0:	b	13a8 <integer_expression_finalise+0x114>
    13a4:	mov	r0, #0
    13a8:	ldr	r4, [sp, #8]
    13ac:	ldr	lr, [sp, #4]
    13b0:	add	sp, sp, #24
    13b4:	bx	lr
    13b8:	.word	0x000015b4
    13bc:	.word	0x00000e95

000013c0 <integer_expression_init>:
    13c0:	mov	ip, sp
    13c4:	sub	sp, sp, #8
    13c8:	str	ip, [sp]
    13cc:	str	lr, [sp, #4]
    13d0:	ldr	r2, [r0]
    13d4:	mov	r1, #1
    13d8:	str	r1, [r2, #32]
    13dc:	ldr	r1, [r0]
    13e0:	ldr	ip, [pc, #32]	; 1408 <integer_expression_init+0x48>
    13e4:	str	ip, [r1, #40]	; 0x28
    13e8:	ldr	r1, [r0]
    13ec:	ldr	r3, [pc, #16]	; 1404 <integer_expression_init+0x44>
    13f0:	str	r3, [r1, #36]	; 0x24
    13f4:	mov	r0, #0
    13f8:	ldr	lr, [sp, #4]
    13fc:	add	sp, sp, #8
    1400:	bx	lr
	...

0000140c <integer_constant_or_expression_finalise>:
    140c:	mov	ip, sp
    1410:	sub	sp, sp, #24
    1414:	str	ip, [sp]
    1418:	str	lr, [sp, #4]
    141c:	str	r4, [sp, #8]
    1420:	mov	r4, r0
    1424:	ldr	ip, [r4]
    1428:	ldr	r1, [ip, #12]
    142c:	cmp	r1, #0
    1430:	beq	1478 <integer_constant_or_expression_finalise+0x6c>
    1434:	ldr	r1, [r4]
    1438:	ldr	r0, [r1, #12]
    143c:	bl	0 <strlen>
    1440:	ldr	r1, [r4]
    1444:	ldr	r1, [r1, #12]
    1448:	mov	r2, r0
    144c:	mov	r0, r1
    1450:	mov	r1, r2
    1454:	bl	ac <is_whitespace>
    1458:	cmp	r0, #0
    145c:	beq	1478 <integer_constant_or_expression_finalise+0x6c>
    1460:	ldr	r3, [r4]
    1464:	ldr	r0, [r3, #12]
    1468:	bl	0 <free>
    146c:	ldr	r3, [r4]
    1470:	mov	r1, #0
    1474:	str	r1, [r3, #12]
    1478:	ldr	ip, [r4]
    147c:	ldr	ip, [ip, #12]
    1480:	cmp	ip, #0
    1484:	bne	14a0 <integer_constant_or_expression_finalise+0x94>
    1488:	movw	r0, #65136	; 0xfe70
    148c:	movt	r0, #65535	; 0xffff
    1490:	ldr	r1, [pc, #240]	; 1588 <integer_constant_or_expression_finalise+0x17c>
    1494:	bl	0 <coda_set_error>
    1498:	mvn	r0, #0
    149c:	b	1578 <integer_constant_or_expression_finalise+0x16c>
    14a0:	ldr	ip, [r4]
    14a4:	ldr	r0, [ip, #12]
    14a8:	add	r1, sp, #20
    14ac:	bl	0 <coda_expression_from_string>
    14b0:	cmp	r0, #0
    14b4:	beq	14c0 <integer_constant_or_expression_finalise+0xb4>
    14b8:	mvn	r0, #0
    14bc:	b	1578 <integer_constant_or_expression_finalise+0x16c>
    14c0:	ldr	r2, [r4]
    14c4:	ldr	r0, [r2, #12]
    14c8:	bl	0 <free>
    14cc:	ldr	r3, [r4]
    14d0:	mov	r2, #0
    14d4:	str	r2, [r3, #12]
    14d8:	ldr	r1, [r4]
    14dc:	ldr	r3, [sp, #20]
    14e0:	str	r3, [r1, #8]
    14e4:	ldr	r0, [sp, #20]
    14e8:	add	r1, sp, #16
    14ec:	bl	0 <coda_expression_get_type>
    14f0:	cmp	r0, #0
    14f4:	beq	1508 <integer_constant_or_expression_finalise+0xfc>
    14f8:	ldr	r0, [sp, #20]
    14fc:	bl	0 <coda_expression_delete>
    1500:	mvn	r0, #0
    1504:	b	1578 <integer_constant_or_expression_finalise+0x16c>
    1508:	ldr	r0, [sp, #16]
    150c:	cmp	r0, #1
    1510:	beq	152c <integer_constant_or_expression_finalise+0x120>
    1514:	movw	r0, #65136	; 0xfe70
    1518:	movt	r0, #65535	; 0xffff
    151c:	ldr	r1, [pc, #104]	; 158c <integer_constant_or_expression_finalise+0x180>
    1520:	bl	0 <coda_set_error>
    1524:	mvn	r0, #0
    1528:	b	1578 <integer_constant_or_expression_finalise+0x16c>
    152c:	ldr	r0, [sp, #20]
    1530:	bl	0 <coda_expression_is_constant>
    1534:	cmp	r0, #0
    1538:	beq	1574 <integer_constant_or_expression_finalise+0x168>
    153c:	ldr	r0, [sp, #20]
    1540:	mov	r1, #0
    1544:	ldr	r2, [r4]
    1548:	add	r2, r2, #16
    154c:	bl	0 <coda_expression_eval_integer>
    1550:	cmp	r0, #0
    1554:	beq	1560 <integer_constant_or_expression_finalise+0x154>
    1558:	mvn	r0, #0
    155c:	b	1578 <integer_constant_or_expression_finalise+0x16c>
    1560:	ldr	r2, [r4]
    1564:	mov	r3, #0
    1568:	str	r3, [r2, #8]
    156c:	ldr	r0, [sp, #20]
    1570:	bl	0 <coda_expression_delete>
    1574:	mov	r0, #0
    1578:	ldr	r4, [sp, #8]
    157c:	ldr	lr, [sp, #4]
    1580:	add	sp, sp, #24
    1584:	bx	lr
    1588:	.word	0x000015b4
    158c:	.word	0x00000e95

00001590 <integer_constant_or_expression_init>:
    1590:	mov	ip, sp
    1594:	sub	sp, sp, #8
    1598:	str	ip, [sp]
    159c:	str	lr, [sp, #4]
    15a0:	ldr	r2, [r0]
    15a4:	mov	r1, #1
    15a8:	str	r1, [r2, #32]
    15ac:	ldr	r1, [r0]
    15b0:	ldr	ip, [pc, #32]	; 15d8 <integer_constant_or_expression_init+0x48>
    15b4:	str	ip, [r1, #40]	; 0x28
    15b8:	ldr	r1, [r0]
    15bc:	ldr	r3, [pc, #16]	; 15d4 <integer_constant_or_expression_init+0x44>
    15c0:	str	r3, [r1, #36]	; 0x24
    15c4:	mov	r0, #0
    15c8:	ldr	lr, [sp, #4]
    15cc:	add	sp, sp, #8
    15d0:	bx	lr
	...

000015dc <optional_integer_constant_or_expression_finalise>:
    15dc:	mov	ip, sp
    15e0:	sub	sp, sp, #24
    15e4:	str	ip, [sp]
    15e8:	str	lr, [sp, #4]
    15ec:	str	r4, [sp, #8]
    15f0:	mov	r4, r0
    15f4:	ldr	r1, [r4]
    15f8:	ldr	r2, [r1, #12]
    15fc:	cmp	r2, #0
    1600:	beq	1648 <optional_integer_constant_or_expression_finalise+0x6c>
    1604:	ldr	ip, [r4]
    1608:	ldr	r0, [ip, #12]
    160c:	bl	0 <strlen>
    1610:	ldr	r1, [r4]
    1614:	ldr	r1, [r1, #12]
    1618:	mov	r2, r0
    161c:	mov	r0, r1
    1620:	mov	r1, r2
    1624:	bl	ac <is_whitespace>
    1628:	cmp	r0, #0
    162c:	beq	1648 <optional_integer_constant_or_expression_finalise+0x6c>
    1630:	ldr	r1, [r4]
    1634:	ldr	r0, [r1, #12]
    1638:	bl	0 <free>
    163c:	ldr	r0, [r4]
    1640:	mov	r3, #0
    1644:	str	r3, [r0, #12]
    1648:	ldr	r0, [r4]
    164c:	ldr	r2, [r0, #12]
    1650:	cmp	r2, #0
    1654:	bne	166c <optional_integer_constant_or_expression_finalise+0x90>
    1658:	ldr	ip, [r4]
    165c:	mov	r1, #1
    1660:	str	r1, [ip, #4]
    1664:	mov	r0, #0
    1668:	b	1744 <optional_integer_constant_or_expression_finalise+0x168>
    166c:	ldr	r0, [r4]
    1670:	ldr	r0, [r0, #12]
    1674:	add	r1, sp, #20
    1678:	bl	0 <coda_expression_from_string>
    167c:	cmp	r0, #0
    1680:	beq	168c <optional_integer_constant_or_expression_finalise+0xb0>
    1684:	mvn	r0, #0
    1688:	b	1744 <optional_integer_constant_or_expression_finalise+0x168>
    168c:	ldr	ip, [r4]
    1690:	ldr	r0, [ip, #12]
    1694:	bl	0 <free>
    1698:	ldr	r0, [r4]
    169c:	mov	r1, #0
    16a0:	str	r1, [r0, #12]
    16a4:	ldr	r3, [r4]
    16a8:	ldr	ip, [sp, #20]
    16ac:	str	ip, [r3, #8]
    16b0:	ldr	r0, [sp, #20]
    16b4:	add	r1, sp, #16
    16b8:	bl	0 <coda_expression_get_type>
    16bc:	cmp	r0, #0
    16c0:	beq	16d4 <optional_integer_constant_or_expression_finalise+0xf8>
    16c4:	ldr	r0, [sp, #20]
    16c8:	bl	0 <coda_expression_delete>
    16cc:	mvn	r0, #0
    16d0:	b	1744 <optional_integer_constant_or_expression_finalise+0x168>
    16d4:	ldr	ip, [sp, #16]
    16d8:	cmp	ip, #1
    16dc:	beq	16f8 <optional_integer_constant_or_expression_finalise+0x11c>
    16e0:	movw	r0, #65136	; 0xfe70
    16e4:	movt	r0, #65535	; 0xffff
    16e8:	ldr	r1, [pc, #100]	; 1754 <optional_integer_constant_or_expression_finalise+0x178>
    16ec:	bl	0 <coda_set_error>
    16f0:	mvn	r0, #0
    16f4:	b	1744 <optional_integer_constant_or_expression_finalise+0x168>
    16f8:	ldr	r0, [sp, #20]
    16fc:	bl	0 <coda_expression_is_constant>
    1700:	cmp	r0, #0
    1704:	beq	1740 <optional_integer_constant_or_expression_finalise+0x164>
    1708:	ldr	r0, [sp, #20]
    170c:	mov	r1, #0
    1710:	ldr	r2, [r4]
    1714:	add	r2, r2, #16
    1718:	bl	0 <coda_expression_eval_integer>
    171c:	cmp	r0, #0
    1720:	beq	172c <optional_integer_constant_or_expression_finalise+0x150>
    1724:	mvn	r0, #0
    1728:	b	1744 <optional_integer_constant_or_expression_finalise+0x168>
    172c:	ldr	r3, [r4]
    1730:	mov	r2, #0
    1734:	str	r2, [r3, #8]
    1738:	ldr	r0, [sp, #20]
    173c:	bl	0 <coda_expression_delete>
    1740:	mov	r0, #0
    1744:	ldr	r4, [sp, #8]
    1748:	ldr	lr, [sp, #4]
    174c:	add	sp, sp, #24
    1750:	bx	lr
    1754:	.word	0x00000e95

00001758 <optional_integer_constant_or_expression_init>:
    1758:	mov	ip, sp
    175c:	sub	sp, sp, #8
    1760:	str	ip, [sp]
    1764:	str	lr, [sp, #4]
    1768:	ldr	r2, [r0]
    176c:	mov	r1, #1
    1770:	str	r1, [r2, #32]
    1774:	ldr	r1, [r0]
    1778:	ldr	ip, [pc, #32]	; 17a0 <optional_integer_constant_or_expression_init+0x48>
    177c:	str	ip, [r1, #40]	; 0x28
    1780:	ldr	r1, [r0]
    1784:	ldr	r3, [pc, #16]	; 179c <optional_integer_constant_or_expression_init+0x44>
    1788:	str	r3, [r1, #36]	; 0x24
    178c:	mov	r0, #0
    1790:	ldr	lr, [sp, #4]
    1794:	add	sp, sp, #8
    1798:	bx	lr
	...

000017a4 <product_class_add_named_type>:
    17a4:	mov	ip, sp
    17a8:	sub	sp, sp, #16
    17ac:	str	ip, [sp]
    17b0:	str	lr, [sp, #4]
    17b4:	str	r4, [sp, #8]
    17b8:	mov	r4, r0
    17bc:	ldr	r3, [r4, #24]
    17c0:	cmp	r3, #0
    17c4:	bne	17dc <product_class_add_named_type+0x38>
    17c8:	ldr	r0, [pc, #72]	; 1818 <product_class_add_named_type+0x74>
    17cc:	ldr	r1, [pc, #60]	; 1810 <product_class_add_named_type+0x6c>
    17d0:	movw	r2, #1002	; 0x3ea
    17d4:	ldr	r3, [pc, #56]	; 1814 <product_class_add_named_type+0x70>
    17d8:	bl	0 <__assert_fail>
    17dc:	ldr	r0, [r4, #24]
    17e0:	ldr	r1, [r4]
    17e4:	ldr	r1, [r1, #8]
    17e8:	bl	0 <coda_product_class_add_named_type>
    17ec:	cmp	r0, #0
    17f0:	beq	17fc <product_class_add_named_type+0x58>
    17f4:	mvn	r0, #0
    17f8:	b	1800 <product_class_add_named_type+0x5c>
    17fc:	mov	r0, #0
    1800:	ldr	r4, [sp, #8]
    1804:	ldr	lr, [sp, #4]
    1808:	add	sp, sp, #16
    180c:	bx	lr
    1810:	.word	0x00001939
    1814:	.word	0x000020d5
    1818:	.word	0x0000199e

0000181c <string_data_finalise>:
    181c:	mov	ip, sp
    1820:	sub	sp, sp, #8
    1824:	str	ip, [sp]
    1828:	str	lr, [sp, #4]
    182c:	ldr	r0, [r0]
    1830:	ldr	r0, [r0, #12]
    1834:	bl	7d4 <decode_xml_string>
    1838:	mov	r0, #0
    183c:	ldr	lr, [sp, #4]
    1840:	add	sp, sp, #8
    1844:	bx	lr

00001848 <string_data_init>:
    1848:	mov	ip, sp
    184c:	sub	sp, sp, #8
    1850:	str	ip, [sp]
    1854:	str	lr, [sp, #4]
    1858:	ldr	r3, [r0]
    185c:	mov	r2, #1
    1860:	str	r2, [r3, #32]
    1864:	ldr	r1, [r0]
    1868:	ldr	r0, [pc, #16]	; 1880 <string_data_init+0x38>
    186c:	str	r0, [r1, #36]	; 0x24
    1870:	mov	r0, #0
    1874:	ldr	lr, [sp, #4]
    1878:	add	sp, sp, #8
    187c:	bx	lr
    1880:	.word	0x00000000

00001884 <type_set_format>:
    1884:	mov	ip, sp
    1888:	sub	sp, sp, #32
    188c:	str	ip, [sp]
    1890:	str	lr, [sp, #4]
    1894:	str	r4, [sp, #8]
    1898:	str	r5, [sp, #12]
    189c:	str	r6, [sp, #16]
    18a0:	mov	r4, r1
    18a4:	mov	r5, r0
    18a8:	str	r4, [r5]
    18ac:	ldr	r2, [r5, #8]
    18b0:	cmp	r2, #0
    18b4:	beq	18e8 <type_set_format+0x64>
    18b8:	cmp	r2, #1
    18bc:	beq	18d8 <type_set_format+0x54>
    18c0:	cmp	r2, #6
    18c4:	bne	1920 <type_set_format+0x9c>
    18c8:	ldr	r0, [r5, #44]	; 0x2c
    18cc:	mov	r1, r4
    18d0:	bl	1884 <type_set_format>
    18d4:	b	1920 <type_set_format+0x9c>
    18d8:	ldr	r0, [r5, #40]	; 0x28
    18dc:	mov	r1, r4
    18e0:	bl	1884 <type_set_format>
    18e4:	b	1920 <type_set_format+0x9c>
    18e8:	add	r1, sp, #24
    18ec:	mov	r0, r5
    18f0:	bl	0 <coda_type_get_num_record_fields>
    18f4:	mov	r6, #0
    18f8:	ldr	ip, [sp, #24]
    18fc:	cmp	r6, ip
    1900:	bge	1920 <type_set_format+0x9c>
    1904:	ldr	r3, [r5, #52]	; 0x34
    1908:	ldr	r1, [r3, r6, lsl #2]
    190c:	ldr	r0, [r1, #8]
    1910:	mov	r1, r4
    1914:	bl	1884 <type_set_format>
    1918:	add	r6, r6, #1
    191c:	b	18f8 <type_set_format+0x74>
    1920:	ldr	r1, [r5, #36]	; 0x24
    1924:	cmp	r1, #0
    1928:	beq	1938 <type_set_format+0xb4>
    192c:	ldr	r0, [r5, #36]	; 0x24
    1930:	mov	r1, r4
    1934:	bl	1884 <type_set_format>
    1938:	mov	r0, #0
    193c:	ldr	r4, [sp, #8]
    1940:	ldr	r5, [sp, #12]
    1944:	ldr	r6, [sp, #16]
    1948:	ldr	lr, [sp, #4]
    194c:	add	sp, sp, #32
    1950:	bx	lr

00001954 <type_set_description>:
    1954:	mov	ip, sp
    1958:	sub	sp, sp, #8
    195c:	str	ip, [sp]
    1960:	str	lr, [sp, #4]
    1964:	mov	r1, r0
    1968:	ldr	r2, [r1]
    196c:	ldr	r2, [r2, #12]
    1970:	cmp	r2, #0
    1974:	bne	1990 <type_set_description+0x3c>
    1978:	ldr	r0, [r1]
    197c:	ldr	r0, [r0, #396]	; 0x18c
    1980:	ldr	r0, [r0, #8]
    1984:	ldr	r1, [pc, #40]	; 19b4 <type_set_description+0x60>
    1988:	bl	0 <coda_type_set_description>
    198c:	b	19a8 <type_set_description+0x54>
    1990:	ldr	r3, [r1]
    1994:	ldr	r2, [r3, #396]	; 0x18c
    1998:	ldr	r0, [r2, #8]
    199c:	ldr	r1, [r1]
    19a0:	ldr	r1, [r1, #12]
    19a4:	bl	0 <coda_type_set_description>
    19a8:	ldr	lr, [sp, #4]
    19ac:	add	sp, sp, #8
    19b0:	bx	lr
    19b4:	.word	0x00002067

000019b8 <type_set_bit_size>:
    19b8:	mov	ip, sp
    19bc:	sub	sp, sp, #16
    19c0:	str	ip, [sp]
    19c4:	str	lr, [sp, #4]
    19c8:	str	r4, [sp, #8]
    19cc:	mov	r4, r0
    19d0:	ldr	r0, [r4]
    19d4:	ldr	r2, [r0, #8]
    19d8:	cmp	r2, #0
    19dc:	bne	1a0c <type_set_bit_size+0x54>
    19e0:	ldr	r3, [r4]
    19e4:	ldr	r1, [r3, #396]	; 0x18c
    19e8:	ldr	r0, [r1, #8]
    19ec:	ldr	r1, [r4]
    19f0:	ldr	r2, [r1, #16]
    19f4:	asr	r3, r2, #31
    19f8:	bl	0 <coda_type_set_bit_size>
    19fc:	cmp	r0, #0
    1a00:	beq	1a40 <type_set_bit_size+0x88>
    1a04:	mvn	r0, #0
    1a08:	b	1a44 <type_set_bit_size+0x8c>
    1a0c:	ldr	r3, [r4]
    1a10:	ldr	ip, [r3, #396]	; 0x18c
    1a14:	ldr	r0, [ip, #8]
    1a18:	ldr	ip, [r4]
    1a1c:	ldr	r1, [ip, #8]
    1a20:	bl	0 <coda_type_set_bit_size_expression>
    1a24:	cmp	r0, #0
    1a28:	beq	1a34 <type_set_bit_size+0x7c>
    1a2c:	mvn	r0, #0
    1a30:	b	1a44 <type_set_bit_size+0x8c>
    1a34:	ldr	r0, [r4]
    1a38:	mov	r2, #0
    1a3c:	str	r2, [r0, #8]
    1a40:	mov	r0, #0
    1a44:	ldr	r4, [sp, #8]
    1a48:	ldr	lr, [sp, #4]
    1a4c:	add	sp, sp, #16
    1a50:	bx	lr

00001a54 <type_set_byte_size>:
    1a54:	mov	ip, sp
    1a58:	sub	sp, sp, #16
    1a5c:	str	ip, [sp]
    1a60:	str	lr, [sp, #4]
    1a64:	str	r4, [sp, #8]
    1a68:	mov	r4, r0
    1a6c:	ldr	r0, [r4]
    1a70:	ldr	r2, [r0, #8]
    1a74:	cmp	r2, #0
    1a78:	bne	1aa8 <type_set_byte_size+0x54>
    1a7c:	ldr	r3, [r4]
    1a80:	ldr	r1, [r3, #396]	; 0x18c
    1a84:	ldr	r0, [r1, #8]
    1a88:	ldr	r1, [r4]
    1a8c:	ldr	r2, [r1, #16]
    1a90:	asr	r3, r2, #31
    1a94:	bl	0 <coda_type_set_byte_size>
    1a98:	cmp	r0, #0
    1a9c:	beq	1adc <type_set_byte_size+0x88>
    1aa0:	mvn	r0, #0
    1aa4:	b	1ae0 <type_set_byte_size+0x8c>
    1aa8:	ldr	r3, [r4]
    1aac:	ldr	ip, [r3, #396]	; 0x18c
    1ab0:	ldr	r0, [ip, #8]
    1ab4:	ldr	ip, [r4]
    1ab8:	ldr	r1, [ip, #8]
    1abc:	bl	0 <coda_type_set_byte_size_expression>
    1ac0:	cmp	r0, #0
    1ac4:	beq	1ad0 <type_set_byte_size+0x7c>
    1ac8:	mvn	r0, #0
    1acc:	b	1ae0 <type_set_byte_size+0x8c>
    1ad0:	ldr	r0, [r4]
    1ad4:	mov	r2, #0
    1ad8:	str	r2, [r0, #8]
    1adc:	mov	r0, #0
    1ae0:	ldr	r4, [sp, #8]
    1ae4:	ldr	lr, [sp, #4]
    1ae8:	add	sp, sp, #16
    1aec:	bx	lr

00001af0 <void_expression_finalise>:
    1af0:	mov	ip, sp
    1af4:	sub	sp, sp, #24
    1af8:	str	ip, [sp]
    1afc:	str	lr, [sp, #4]
    1b00:	str	r4, [sp, #8]
    1b04:	mov	r4, r0
    1b08:	ldr	r3, [r4]
    1b0c:	ldr	ip, [r3, #12]
    1b10:	cmp	ip, #0
    1b14:	beq	1b54 <void_expression_finalise+0x64>
    1b18:	ldr	r2, [r4]
    1b1c:	ldr	r0, [r2, #12]
    1b20:	bl	0 <strlen>
    1b24:	mov	r1, r0
    1b28:	ldr	r3, [r4]
    1b2c:	ldr	r0, [r3, #12]
    1b30:	bl	ac <is_whitespace>
    1b34:	cmp	r0, #0
    1b38:	beq	1b54 <void_expression_finalise+0x64>
    1b3c:	ldr	r3, [r4]
    1b40:	ldr	r0, [r3, #12]
    1b44:	bl	0 <free>
    1b48:	ldr	ip, [r4]
    1b4c:	mov	r0, #0
    1b50:	str	r0, [ip, #12]
    1b54:	ldr	r0, [r4]
    1b58:	ldr	r2, [r0, #12]
    1b5c:	cmp	r2, #0
    1b60:	bne	1b7c <void_expression_finalise+0x8c>
    1b64:	movw	r0, #65136	; 0xfe70
    1b68:	movt	r0, #65535	; 0xffff
    1b6c:	ldr	r1, [pc, #164]	; 1c18 <void_expression_finalise+0x128>
    1b70:	bl	0 <coda_set_error>
    1b74:	mvn	r0, #0
    1b78:	b	1c04 <void_expression_finalise+0x114>
    1b7c:	ldr	r1, [r4]
    1b80:	ldr	r0, [r1, #12]
    1b84:	add	r1, sp, #20
    1b88:	bl	0 <coda_expression_from_string>
    1b8c:	cmp	r0, #0
    1b90:	beq	1b9c <void_expression_finalise+0xac>
    1b94:	mvn	r0, #0
    1b98:	b	1c04 <void_expression_finalise+0x114>
    1b9c:	ldr	r0, [r4]
    1ba0:	ldr	r0, [r0, #12]
    1ba4:	bl	0 <free>
    1ba8:	ldr	ip, [r4]
    1bac:	mov	r3, #0
    1bb0:	str	r3, [ip, #12]
    1bb4:	ldr	ip, [r4]
    1bb8:	ldr	r0, [sp, #20]
    1bbc:	str	r0, [ip, #8]
    1bc0:	ldr	r0, [sp, #20]
    1bc4:	add	r1, sp, #16
    1bc8:	bl	0 <coda_expression_get_type>
    1bcc:	cmp	r0, #0
    1bd0:	beq	1bdc <void_expression_finalise+0xec>
    1bd4:	mvn	r0, #0
    1bd8:	b	1c04 <void_expression_finalise+0x114>
    1bdc:	ldr	r0, [sp, #16]
    1be0:	cmp	r0, #5
    1be4:	beq	1c00 <void_expression_finalise+0x110>
    1be8:	movw	r0, #65136	; 0xfe70
    1bec:	movt	r0, #65535	; 0xffff
    1bf0:	ldr	r1, [pc, #28]	; 1c14 <void_expression_finalise+0x124>
    1bf4:	bl	0 <coda_set_error>
    1bf8:	mvn	r0, #0
    1bfc:	b	1c04 <void_expression_finalise+0x114>
    1c00:	mov	r0, #0
    1c04:	ldr	r4, [sp, #8]
    1c08:	ldr	lr, [sp, #4]
    1c0c:	add	sp, sp, #24
    1c10:	bx	lr
    1c14:	.word	0x000009c9
    1c18:	.word	0x00000d36

00001c1c <void_expression_init>:
    1c1c:	mov	ip, sp
    1c20:	sub	sp, sp, #8
    1c24:	str	ip, [sp]
    1c28:	str	lr, [sp, #4]
    1c2c:	ldr	r2, [r0]
    1c30:	mov	r1, #1
    1c34:	str	r1, [r2, #32]
    1c38:	ldr	r1, [r0]
    1c3c:	ldr	ip, [pc, #32]	; 1c64 <void_expression_init+0x48>
    1c40:	str	ip, [r1, #40]	; 0x28
    1c44:	ldr	r1, [r0]
    1c48:	ldr	r3, [pc, #16]	; 1c60 <void_expression_init+0x44>
    1c4c:	str	r3, [r1, #36]	; 0x24
    1c50:	mov	r0, #0
    1c54:	ldr	lr, [sp, #4]
    1c58:	add	sp, sp, #8
    1c5c:	bx	lr
	...

00001c68 <type_add_attribute>:
    1c68:	mov	ip, sp
    1c6c:	sub	sp, sp, #16
    1c70:	str	ip, [sp]
    1c74:	str	lr, [sp, #4]
    1c78:	str	r4, [sp, #8]
    1c7c:	mov	r4, r0
    1c80:	ldr	r0, [r4]
    1c84:	ldr	r2, [r0, #396]	; 0x18c
    1c88:	ldr	r0, [r2, #8]
    1c8c:	ldr	r1, [r4]
    1c90:	ldr	r1, [r1, #8]
    1c94:	bl	0 <coda_type_add_attribute>
    1c98:	cmp	r0, #0
    1c9c:	beq	1ca8 <type_add_attribute+0x40>
    1ca0:	mvn	r0, #0
    1ca4:	b	1cb8 <type_add_attribute+0x50>
    1ca8:	ldr	r1, [r4]
    1cac:	mov	r3, #0
    1cb0:	str	r3, [r1, #8]
    1cb4:	mov	r0, #0
    1cb8:	ldr	r4, [sp, #8]
    1cbc:	ldr	lr, [sp, #4]
    1cc0:	add	sp, sp, #16
    1cc4:	bx	lr

00001cc8 <xml_root_set_field>:
    1cc8:	mov	ip, sp
    1ccc:	sub	sp, sp, #16
    1cd0:	str	ip, [sp]
    1cd4:	str	lr, [sp, #4]
    1cd8:	str	r4, [sp, #8]
    1cdc:	mov	r4, r0
    1ce0:	ldr	r0, [r4]
    1ce4:	ldr	r2, [r0, #396]	; 0x18c
    1ce8:	ldr	r0, [r2, #8]
    1cec:	ldr	r1, [r4]
    1cf0:	ldr	r1, [r1, #8]
    1cf4:	bl	0 <coda_type_record_add_field>
    1cf8:	cmp	r0, #0
    1cfc:	beq	1d08 <xml_root_set_field+0x40>
    1d00:	mvn	r0, #0
    1d04:	b	1d18 <xml_root_set_field+0x50>
    1d08:	ldr	r1, [r4]
    1d0c:	mov	r3, #0
    1d10:	str	r3, [r1, #8]
    1d14:	mov	r0, #0
    1d18:	ldr	r4, [sp, #8]
    1d1c:	ldr	lr, [sp, #4]
    1d20:	add	sp, sp, #16
    1d24:	bx	lr

00001d28 <xml_root_init>:
    1d28:	mov	ip, sp
    1d2c:	sub	sp, sp, #16
    1d30:	str	ip, [sp]
    1d34:	str	lr, [sp, #4]
    1d38:	str	r4, [sp, #8]
    1d3c:	str	r5, [sp, #12]
    1d40:	mov	r5, r1
    1d44:	mov	r4, r0
    1d48:	ldr	r0, [r4, #28]
    1d4c:	cmp	r0, #0
    1d50:	bne	1d68 <xml_root_init+0x40>
    1d54:	ldr	r0, [pc, #368]	; 1ecc <xml_root_init+0x1a4>
    1d58:	ldr	r1, [pc, #320]	; 1ea0 <xml_root_init+0x178>
    1d5c:	mov	r2, #1184	; 0x4a0
    1d60:	ldr	r3, [pc, #348]	; 1ec4 <xml_root_init+0x19c>
    1d64:	bl	0 <__assert_fail>
    1d68:	mov	r1, r5
    1d6c:	mov	r0, r4
    1d70:	bl	b6c <handle_format_attribute_for_type>
    1d74:	cmp	r0, #0
    1d78:	beq	1d84 <xml_root_init+0x5c>
    1d7c:	mvn	r0, #0
    1d80:	b	1e88 <xml_root_init+0x160>
    1d84:	ldr	ip, [r4]
    1d88:	ldr	r2, [ip, #44]	; 0x2c
    1d8c:	cmp	r2, #2
    1d90:	beq	1dcc <xml_root_init+0xa4>
    1d94:	ldr	ip, [r4]
    1d98:	ldr	r0, [ip, #44]	; 0x2c
    1d9c:	bl	0 <coda_type_get_format_name>
    1da0:	movw	r2, #65136	; 0xfe70
    1da4:	movt	r2, #65535	; 0xffff
    1da8:	ldr	r1, [pc, #236]	; 1e9c <xml_root_init+0x174>
    1dac:	ldr	ip, [r4, #28]
    1db0:	ldr	r3, [ip, #8]
    1db4:	mov	ip, r0
    1db8:	mov	r0, r2
    1dbc:	mov	r2, ip
    1dc0:	bl	0 <coda_set_error>
    1dc4:	mvn	r0, #0
    1dc8:	b	1e88 <xml_root_init+0x160>
    1dcc:	ldr	r1, [pc, #220]	; 1eb0 <xml_root_init+0x188>
    1dd0:	mov	r0, r5
    1dd4:	bl	998 <get_attribute_value>
    1dd8:	cmp	r0, #0
    1ddc:	beq	1df8 <xml_root_init+0xd0>
    1de0:	movw	r0, #65136	; 0xfe70
    1de4:	movt	r0, #65535	; 0xffff
    1de8:	ldr	r1, [pc, #216]	; 1ec8 <xml_root_init+0x1a0>
    1dec:	bl	0 <coda_set_error>
    1df0:	mvn	r0, #0
    1df4:	b	1e88 <xml_root_init+0x160>
    1df8:	ldr	r1, [pc, #188]	; 1ebc <xml_root_init+0x194>
    1dfc:	mov	r0, r5
    1e00:	bl	998 <get_attribute_value>
    1e04:	cmp	r0, #0
    1e08:	beq	1e24 <xml_root_init+0xfc>
    1e0c:	movw	r0, #65136	; 0xfe70
    1e10:	movt	r0, #65535	; 0xffff
    1e14:	ldr	r1, [pc, #164]	; 1ec0 <xml_root_init+0x198>
    1e18:	bl	0 <coda_set_error>
    1e1c:	mvn	r0, #0
    1e20:	b	1e88 <xml_root_init+0x160>
    1e24:	ldr	r2, [r4]
    1e28:	ldr	r0, [pc, #124]	; 1eac <xml_root_init+0x184>
    1e2c:	str	r0, [r2, #40]	; 0x28
    1e30:	mov	r0, #2
    1e34:	bl	0 <coda_type_record_new>
    1e38:	ldr	r1, [r4]
    1e3c:	str	r0, [r1, #8]
    1e40:	mov	r1, r5
    1e44:	mov	r0, r4
    1e48:	bl	a78 <handle_name_attribute_for_type>
    1e4c:	cmp	r0, #0
    1e50:	beq	1e5c <xml_root_init+0x134>
    1e54:	mvn	r0, #0
    1e58:	b	1e88 <xml_root_init+0x160>
    1e5c:	ldr	r0, [r4]
    1e60:	mov	r1, #11
    1e64:	ldr	r2, [pc, #60]	; 1ea8 <xml_root_init+0x180>
    1e68:	ldr	r3, [pc, #68]	; 1eb4 <xml_root_init+0x18c>
    1e6c:	bl	e64 <register_sub_element>
    1e70:	ldr	r0, [r4]
    1e74:	mov	r1, #14
    1e78:	ldr	r2, [pc, #56]	; 1eb8 <xml_root_init+0x190>
    1e7c:	ldr	r3, [pc, #32]	; 1ea4 <xml_root_init+0x17c>
    1e80:	bl	e64 <register_sub_element>
    1e84:	mov	r0, #0
    1e88:	ldr	r4, [sp, #8]
    1e8c:	ldr	r5, [sp, #12]
    1e90:	ldr	lr, [sp, #4]
    1e94:	add	sp, sp, #16
    1e98:	bx	lr
    1e9c:	.word	0x00001db4
    1ea0:	.word	0x00001939
	...
    1eb0:	.word	0x0000047e
	...
    1ebc:	.word	0x000001f6
    1ec0:	.word	0x000001fe
    1ec4:	.word	0x000020f2
    1ec8:	.word	0x00001176
    1ecc:	.word	0x00000595

00001ed0 <cd_array_set_type>:
    1ed0:	mov	ip, sp
    1ed4:	sub	sp, sp, #8
    1ed8:	str	ip, [sp]
    1edc:	str	lr, [sp, #4]
    1ee0:	mov	r1, r0
    1ee4:	ldr	r2, [r1]
    1ee8:	ldr	r2, [r2, #396]	; 0x18c
    1eec:	ldr	r0, [r2, #8]
    1ef0:	ldr	ip, [r1]
    1ef4:	ldr	r1, [ip, #8]
    1ef8:	bl	0 <coda_type_array_set_base_type>
    1efc:	ldr	lr, [sp, #4]
    1f00:	add	sp, sp, #8
    1f04:	bx	lr

00001f08 <cd_array_add_dimension>:
    1f08:	mov	ip, sp
    1f0c:	sub	sp, sp, #16
    1f10:	str	ip, [sp]
    1f14:	str	lr, [sp, #4]
    1f18:	str	r4, [sp, #8]
    1f1c:	mov	r4, r0
    1f20:	ldr	r2, [r4]
    1f24:	ldr	r1, [r2, #8]
    1f28:	cmp	r1, #0
    1f2c:	bne	1f48 <cd_array_add_dimension+0x40>
    1f30:	ldr	r1, [r4]
    1f34:	ldr	ip, [r1, #4]
    1f38:	cmp	ip, #0
    1f3c:	movne	r2, #1
    1f40:	moveq	r2, #0
    1f44:	b	1f4c <cd_array_add_dimension+0x44>
    1f48:	mov	r2, #1
    1f4c:	cmp	r2, #0
    1f50:	beq	1f8c <cd_array_add_dimension+0x84>
    1f54:	ldr	r3, [r4]
    1f58:	ldr	r3, [r3, #396]	; 0x18c
    1f5c:	ldr	r0, [r3, #8]
    1f60:	ldr	ip, [r4]
    1f64:	ldr	r1, [ip, #8]
    1f68:	bl	0 <coda_type_array_add_variable_dimension>
    1f6c:	cmp	r0, #0
    1f70:	beq	1f7c <cd_array_add_dimension+0x74>
    1f74:	mvn	r0, #0
    1f78:	b	1fb8 <cd_array_add_dimension+0xb0>
    1f7c:	ldr	r0, [r4]
    1f80:	mov	r3, #0
    1f84:	str	r3, [r0, #8]
    1f88:	b	1fb4 <cd_array_add_dimension+0xac>
    1f8c:	ldr	r2, [r4]
    1f90:	ldr	r0, [r2, #396]	; 0x18c
    1f94:	ldr	r0, [r0, #8]
    1f98:	ldr	r1, [r4]
    1f9c:	ldr	r1, [r1, #16]
    1fa0:	bl	0 <coda_type_array_add_fixed_dimension>
    1fa4:	cmp	r0, #0
    1fa8:	beq	1fb4 <cd_array_add_dimension+0xac>
    1fac:	mvn	r0, #0
    1fb0:	b	1fb8 <cd_array_add_dimension+0xb0>
    1fb4:	mov	r0, #0
    1fb8:	ldr	r4, [sp, #8]
    1fbc:	ldr	lr, [sp, #4]
    1fc0:	add	sp, sp, #16
    1fc4:	bx	lr

00001fc8 <cd_array_finalise>:
    1fc8:	mov	ip, sp
    1fcc:	sub	sp, sp, #8
    1fd0:	str	ip, [sp]
    1fd4:	str	lr, [sp, #4]
    1fd8:	ldr	r0, [r0]
    1fdc:	ldr	r0, [r0, #8]
    1fe0:	bl	0 <coda_type_array_validate>
    1fe4:	ldr	lr, [sp, #4]
    1fe8:	add	sp, sp, #8
    1fec:	bx	lr

00001ff0 <cd_array_init>:
    1ff0:	mov	ip, sp
    1ff4:	sub	sp, sp, #16
    1ff8:	str	ip, [sp]
    1ffc:	str	lr, [sp, #4]
    2000:	str	r4, [sp, #8]
    2004:	str	r5, [sp, #12]
    2008:	mov	r4, r1
    200c:	mov	r5, r0
    2010:	mov	r1, r4
    2014:	mov	r0, r5
    2018:	bl	b6c <handle_format_attribute_for_type>
    201c:	cmp	r0, #0
    2020:	beq	202c <cd_array_init+0x3c>
    2024:	mvn	r0, #0
    2028:	b	20d8 <cd_array_init+0xe8>
    202c:	ldr	r3, [r5]
    2030:	ldr	r2, [pc, #188]	; 20f4 <cd_array_init+0x104>
    2034:	str	r2, [r3, #40]	; 0x28
    2038:	ldr	ip, [r5]
    203c:	ldr	r0, [ip, #44]	; 0x2c
    2040:	bl	0 <coda_type_array_new>
    2044:	ldr	r1, [r5]
    2048:	str	r0, [r1, #8]
    204c:	ldr	ip, [r5]
    2050:	ldr	r0, [ip, #8]
    2054:	cmp	r0, #0
    2058:	bne	2064 <cd_array_init+0x74>
    205c:	mvn	r0, #0
    2060:	b	20d8 <cd_array_init+0xe8>
    2064:	mov	r1, r4
    2068:	mov	r0, r5
    206c:	bl	a78 <handle_name_attribute_for_type>
    2070:	cmp	r0, #0
    2074:	beq	2080 <cd_array_init+0x90>
    2078:	mvn	r0, #0
    207c:	b	20d8 <cd_array_init+0xe8>
    2080:	ldr	r0, [r5]
    2084:	ldr	r1, [pc, #128]	; 210c <cd_array_init+0x11c>
    2088:	bl	ef0 <register_type_elements>
    208c:	ldr	r0, [r5]
    2090:	mov	r1, #13
    2094:	ldr	r2, [pc, #92]	; 20f8 <cd_array_init+0x108>
    2098:	ldr	r3, [pc, #100]	; 2104 <cd_array_init+0x114>
    209c:	bl	e64 <register_sub_element>
    20a0:	ldr	r0, [r5]
    20a4:	mov	r1, #11
    20a8:	ldr	r2, [pc, #64]	; 20f0 <cd_array_init+0x100>
    20ac:	ldr	r3, [pc, #72]	; 20fc <cd_array_init+0x10c>
    20b0:	bl	e64 <register_sub_element>
    20b4:	ldr	r0, [r5]
    20b8:	mov	r1, #4
    20bc:	ldr	r2, [pc, #68]	; 2108 <cd_array_init+0x118>
    20c0:	ldr	r3, [pc, #36]	; 20ec <cd_array_init+0xfc>
    20c4:	bl	e64 <register_sub_element>
    20c8:	ldr	r1, [r5]
    20cc:	ldr	r0, [pc, #44]	; 2100 <cd_array_init+0x110>
    20d0:	str	r0, [r1, #36]	; 0x24
    20d4:	mov	r0, #0
    20d8:	ldr	r4, [sp, #8]
    20dc:	ldr	r5, [sp, #12]
    20e0:	ldr	lr, [sp, #4]
    20e4:	add	sp, sp, #16
    20e8:	bx	lr
	...

00002110 <cd_ascii_line_init>:
    2110:	mov	ip, sp
    2114:	sub	sp, sp, #16
    2118:	str	ip, [sp]
    211c:	str	lr, [sp, #4]
    2120:	str	r4, [sp, #8]
    2124:	str	r5, [sp, #12]
    2128:	mov	r4, r1
    212c:	mov	r5, r0
    2130:	mov	r1, r4
    2134:	mov	r0, r5
    2138:	bl	b6c <handle_format_attribute_for_type>
    213c:	cmp	r0, #0
    2140:	beq	214c <cd_ascii_line_init+0x3c>
    2144:	mvn	r0, #0
    2148:	b	21d8 <cd_ascii_line_init+0xc8>
    214c:	ldr	r2, [r5]
    2150:	ldr	r0, [pc, #152]	; 21f0 <cd_ascii_line_init+0xe0>
    2154:	str	r0, [r2, #40]	; 0x28
    2158:	ldr	r1, [r5]
    215c:	ldr	r0, [r1, #44]	; 0x2c
    2160:	bl	0 <coda_type_text_new>
    2164:	ldr	r1, [r5]
    2168:	str	r0, [r1, #8]
    216c:	ldr	r3, [r5]
    2170:	ldr	r0, [r3, #8]
    2174:	cmp	r0, #0
    2178:	bne	2184 <cd_ascii_line_init+0x74>
    217c:	mvn	r0, #0
    2180:	b	21d8 <cd_ascii_line_init+0xc8>
    2184:	ldr	ip, [r5]
    2188:	ldr	r0, [ip, #8]
    218c:	mov	r1, #3
    2190:	bl	0 <coda_type_text_set_special_text_type>
    2194:	cmp	r0, #0
    2198:	beq	21a4 <cd_ascii_line_init+0x94>
    219c:	mvn	r0, #0
    21a0:	b	21d8 <cd_ascii_line_init+0xc8>
    21a4:	mov	r1, r4
    21a8:	mov	r0, r5
    21ac:	bl	a78 <handle_name_attribute_for_type>
    21b0:	cmp	r0, #0
    21b4:	beq	21c0 <cd_ascii_line_init+0xb0>
    21b8:	mvn	r0, #0
    21bc:	b	21d8 <cd_ascii_line_init+0xc8>
    21c0:	ldr	r0, [r5]
    21c4:	mov	r1, #11
    21c8:	ldr	r2, [pc, #28]	; 21ec <cd_ascii_line_init+0xdc>
    21cc:	ldr	r3, [pc, #32]	; 21f4 <cd_ascii_line_init+0xe4>
    21d0:	bl	e64 <register_sub_element>
    21d4:	mov	r0, #0
    21d8:	ldr	r4, [sp, #8]
    21dc:	ldr	r5, [sp, #12]
    21e0:	ldr	lr, [sp, #4]
    21e4:	add	sp, sp, #16
    21e8:	bx	lr
	...

000021f8 <cd_ascii_line_separator_init>:
    21f8:	mov	ip, sp
    21fc:	sub	sp, sp, #16
    2200:	str	ip, [sp]
    2204:	str	lr, [sp, #4]
    2208:	str	r4, [sp, #8]
    220c:	str	r5, [sp, #12]
    2210:	mov	r4, r1
    2214:	mov	r5, r0
    2218:	mov	r1, r4
    221c:	mov	r0, r5
    2220:	bl	b6c <handle_format_attribute_for_type>
    2224:	cmp	r0, #0
    2228:	beq	2234 <cd_ascii_line_separator_init+0x3c>
    222c:	mvn	r0, #0
    2230:	b	22c0 <cd_ascii_line_separator_init+0xc8>
    2234:	ldr	r2, [r5]
    2238:	ldr	r0, [pc, #152]	; 22d8 <cd_ascii_line_separator_init+0xe0>
    223c:	str	r0, [r2, #40]	; 0x28
    2240:	ldr	r1, [r5]
    2244:	ldr	r0, [r1, #44]	; 0x2c
    2248:	bl	0 <coda_type_text_new>
    224c:	ldr	r1, [r5]
    2250:	str	r0, [r1, #8]
    2254:	ldr	r3, [r5]
    2258:	ldr	r0, [r3, #8]
    225c:	cmp	r0, #0
    2260:	bne	226c <cd_ascii_line_separator_init+0x74>
    2264:	mvn	r0, #0
    2268:	b	22c0 <cd_ascii_line_separator_init+0xc8>
    226c:	ldr	ip, [r5]
    2270:	ldr	r0, [ip, #8]
    2274:	mov	r1, #1
    2278:	bl	0 <coda_type_text_set_special_text_type>
    227c:	cmp	r0, #0
    2280:	beq	228c <cd_ascii_line_separator_init+0x94>
    2284:	mvn	r0, #0
    2288:	b	22c0 <cd_ascii_line_separator_init+0xc8>
    228c:	mov	r1, r4
    2290:	mov	r0, r5
    2294:	bl	a78 <handle_name_attribute_for_type>
    2298:	cmp	r0, #0
    229c:	beq	22a8 <cd_ascii_line_separator_init+0xb0>
    22a0:	mvn	r0, #0
    22a4:	b	22c0 <cd_ascii_line_separator_init+0xc8>
    22a8:	ldr	r0, [r5]
    22ac:	mov	r1, #11
    22b0:	ldr	r2, [pc, #28]	; 22d4 <cd_ascii_line_separator_init+0xdc>
    22b4:	ldr	r3, [pc, #32]	; 22dc <cd_ascii_line_separator_init+0xe4>
    22b8:	bl	e64 <register_sub_element>
    22bc:	mov	r0, #0
    22c0:	ldr	r4, [sp, #8]
    22c4:	ldr	r5, [sp, #12]
    22c8:	ldr	lr, [sp, #4]
    22cc:	add	sp, sp, #16
    22d0:	bx	lr
	...

000022e0 <cd_ascii_white_space_init>:
    22e0:	mov	ip, sp
    22e4:	sub	sp, sp, #16
    22e8:	str	ip, [sp]
    22ec:	str	lr, [sp, #4]
    22f0:	str	r4, [sp, #8]
    22f4:	str	r5, [sp, #12]
    22f8:	mov	r4, r1
    22fc:	mov	r5, r0
    2300:	mov	r1, r4
    2304:	mov	r0, r5
    2308:	bl	b6c <handle_format_attribute_for_type>
    230c:	cmp	r0, #0
    2310:	beq	231c <cd_ascii_white_space_init+0x3c>
    2314:	mvn	r0, #0
    2318:	b	23a8 <cd_ascii_white_space_init+0xc8>
    231c:	ldr	r2, [r5]
    2320:	ldr	r0, [pc, #152]	; 23c0 <cd_ascii_white_space_init+0xe0>
    2324:	str	r0, [r2, #40]	; 0x28
    2328:	ldr	r1, [r5]
    232c:	ldr	r0, [r1, #44]	; 0x2c
    2330:	bl	0 <coda_type_text_new>
    2334:	ldr	r1, [r5]
    2338:	str	r0, [r1, #8]
    233c:	ldr	r3, [r5]
    2340:	ldr	r0, [r3, #8]
    2344:	cmp	r0, #0
    2348:	bne	2354 <cd_ascii_white_space_init+0x74>
    234c:	mvn	r0, #0
    2350:	b	23a8 <cd_ascii_white_space_init+0xc8>
    2354:	ldr	ip, [r5]
    2358:	ldr	r0, [ip, #8]
    235c:	mov	r1, #4
    2360:	bl	0 <coda_type_text_set_special_text_type>
    2364:	cmp	r0, #0
    2368:	beq	2374 <cd_ascii_white_space_init+0x94>
    236c:	mvn	r0, #0
    2370:	b	23a8 <cd_ascii_white_space_init+0xc8>
    2374:	mov	r1, r4
    2378:	mov	r0, r5
    237c:	bl	a78 <handle_name_attribute_for_type>
    2380:	cmp	r0, #0
    2384:	beq	2390 <cd_ascii_white_space_init+0xb0>
    2388:	mvn	r0, #0
    238c:	b	23a8 <cd_ascii_white_space_init+0xc8>
    2390:	ldr	r0, [r5]
    2394:	mov	r1, #11
    2398:	ldr	r2, [pc, #28]	; 23bc <cd_ascii_white_space_init+0xdc>
    239c:	ldr	r3, [pc, #32]	; 23c4 <cd_ascii_white_space_init+0xe4>
    23a0:	bl	e64 <register_sub_element>
    23a4:	mov	r0, #0
    23a8:	ldr	r4, [sp, #8]
    23ac:	ldr	r5, [sp, #12]
    23b0:	ldr	lr, [sp, #4]
    23b4:	add	sp, sp, #16
    23b8:	bx	lr
	...

000023c8 <cd_attribute_set_fixed_value>:
    23c8:	mov	ip, sp
    23cc:	sub	sp, sp, #24
    23d0:	str	ip, [sp]
    23d4:	str	lr, [sp, #4]
    23d8:	str	r4, [sp, #8]
    23dc:	mov	r4, r0
    23e0:	mov	r3, #0
    23e4:	str	r3, [sp, #16]
    23e8:	ldr	r3, [r4]
    23ec:	ldr	r0, [r3, #12]
    23f0:	bl	528 <decode_escaped_string>
    23f4:	cmp	r0, #0
    23f8:	bge	2414 <cd_attribute_set_fixed_value+0x4c>
    23fc:	movw	r0, #65136	; 0xfe70
    2400:	movt	r0, #65535	; 0xffff
    2404:	ldr	r1, [pc, #268]	; 2518 <cd_attribute_set_fixed_value+0x150>
    2408:	bl	0 <coda_set_error>
    240c:	mvn	r0, #0
    2410:	b	2508 <cd_attribute_set_fixed_value+0x140>
    2414:	ldr	r0, [r4]
    2418:	ldr	r0, [r0, #396]	; 0x18c
    241c:	ldr	r0, [r0, #8]
    2420:	add	r1, sp, #16
    2424:	bl	0 <coda_type_record_field_get_type>
    2428:	cmp	r0, #0
    242c:	beq	2438 <cd_attribute_set_fixed_value+0x70>
    2430:	mvn	r0, #0
    2434:	b	2508 <cd_attribute_set_fixed_value+0x140>
    2438:	ldr	r2, [sp, #16]
    243c:	cmp	r2, #0
    2440:	beq	245c <cd_attribute_set_fixed_value+0x94>
    2444:	movw	r0, #65136	; 0xfe70
    2448:	movt	r0, #65535	; 0xffff
    244c:	ldr	r1, [pc, #200]	; 251c <cd_attribute_set_fixed_value+0x154>
    2450:	bl	0 <coda_set_error>
    2454:	mvn	r0, #0
    2458:	b	2508 <cd_attribute_set_fixed_value+0x140>
    245c:	ldr	r0, [r4]
    2460:	ldr	r3, [r0, #396]	; 0x18c
    2464:	ldr	r0, [r3, #44]	; 0x2c
    2468:	bl	0 <coda_type_text_new>
    246c:	str	r0, [sp, #16]
    2470:	ldr	r2, [sp, #16]
    2474:	cmp	r2, #0
    2478:	bne	2484 <cd_attribute_set_fixed_value+0xbc>
    247c:	mvn	r0, #0
    2480:	b	2508 <cd_attribute_set_fixed_value+0x140>
    2484:	ldr	ip, [r4]
    2488:	ldr	ip, [ip, #396]	; 0x18c
    248c:	ldr	r0, [ip, #8]
    2490:	ldr	r1, [sp, #16]
    2494:	bl	0 <coda_type_record_field_set_type>
    2498:	cmp	r0, #0
    249c:	beq	24b0 <cd_attribute_set_fixed_value+0xe8>
    24a0:	ldr	r0, [sp, #16]
    24a4:	bl	0 <coda_type_release>
    24a8:	mvn	r0, #0
    24ac:	b	2508 <cd_attribute_set_fixed_value+0x140>
    24b0:	ldr	r0, [sp, #16]
    24b4:	bl	0 <coda_type_release>
    24b8:	ldr	r0, [sp, #16]
    24bc:	ldr	r1, [r4]
    24c0:	ldr	r1, [r1, #12]
    24c4:	bl	0 <coda_type_text_set_fixed_value>
    24c8:	cmp	r0, #0
    24cc:	beq	24d8 <cd_attribute_set_fixed_value+0x110>
    24d0:	mvn	r0, #0
    24d4:	b	2508 <cd_attribute_set_fixed_value+0x140>
    24d8:	ldr	r0, [r4]
    24dc:	ldr	r0, [r0, #12]
    24e0:	bl	0 <strlen>
    24e4:	mov	r2, r0
    24e8:	ldr	r0, [sp, #16]
    24ec:	mov	r3, #0
    24f0:	bl	0 <coda_type_set_byte_size>
    24f4:	cmp	r0, #0
    24f8:	beq	2504 <cd_attribute_set_fixed_value+0x13c>
    24fc:	mvn	r0, #0
    2500:	b	2508 <cd_attribute_set_fixed_value+0x140>
    2504:	mov	r0, #0
    2508:	ldr	r4, [sp, #8]
    250c:	ldr	lr, [sp, #4]
    2510:	add	sp, sp, #24
    2514:	bx	lr
    2518:	.word	0x00000bc3
    251c:	.word	0x00001de8

00002520 <cd_attribute_finalise>:
    2520:	mov	ip, sp
    2524:	sub	sp, sp, #24
    2528:	str	ip, [sp]
    252c:	str	lr, [sp, #4]
    2530:	str	r4, [sp, #8]
    2534:	mov	r4, r0
    2538:	mov	r1, #0
    253c:	str	r1, [sp, #16]
    2540:	ldr	r1, [r4]
    2544:	ldr	r0, [r1, #8]
    2548:	add	r1, sp, #16
    254c:	bl	0 <coda_type_record_field_get_type>
    2550:	cmp	r0, #0
    2554:	beq	2560 <cd_attribute_finalise+0x40>
    2558:	mvn	r0, #0
    255c:	b	25cc <cd_attribute_finalise+0xac>
    2560:	ldr	r0, [sp, #16]
    2564:	cmp	r0, #0
    2568:	bne	25c0 <cd_attribute_finalise+0xa0>
    256c:	ldr	ip, [r4]
    2570:	ldr	r0, [ip, #44]	; 0x2c
    2574:	bl	0 <coda_type_text_new>
    2578:	str	r0, [sp, #16]
    257c:	ldr	r2, [sp, #16]
    2580:	cmp	r2, #0
    2584:	bne	2590 <cd_attribute_finalise+0x70>
    2588:	mvn	r0, #0
    258c:	b	25cc <cd_attribute_finalise+0xac>
    2590:	ldr	r3, [r4]
    2594:	ldr	r0, [r3, #8]
    2598:	ldr	r1, [sp, #16]
    259c:	bl	0 <coda_type_record_field_set_type>
    25a0:	cmp	r0, #0
    25a4:	beq	25b8 <cd_attribute_finalise+0x98>
    25a8:	ldr	r0, [sp, #16]
    25ac:	bl	0 <coda_type_release>
    25b0:	mvn	r0, #0
    25b4:	b	25cc <cd_attribute_finalise+0xac>
    25b8:	ldr	r0, [sp, #16]
    25bc:	bl	0 <coda_type_release>
    25c0:	ldr	r0, [r4]
    25c4:	ldr	r0, [r0, #8]
    25c8:	bl	0 <coda_type_record_field_validate>
    25cc:	ldr	r4, [sp, #8]
    25d0:	ldr	lr, [sp, #4]
    25d4:	add	sp, sp, #24
    25d8:	bx	lr

000025dc <cd_attribute_init>:
    25dc:	mov	ip, sp
    25e0:	sub	sp, sp, #24
    25e4:	str	ip, [sp]
    25e8:	str	lr, [sp, #4]
    25ec:	str	r4, [sp, #8]
    25f0:	str	r5, [sp, #12]
    25f4:	str	r6, [sp, #16]
    25f8:	mov	r6, r1
    25fc:	mov	r5, r0
    2600:	ldr	r1, [pc, #612]	; 286c <cd_attribute_init+0x290>
    2604:	mov	r0, r6
    2608:	bl	998 <get_attribute_value>
    260c:	cmp	r0, #0
    2610:	beq	262c <cd_attribute_init+0x50>
    2614:	movw	r0, #65136	; 0xfe70
    2618:	movt	r0, #65535	; 0xffff
    261c:	ldr	r1, [pc, #588]	; 2870 <cd_attribute_init+0x294>
    2620:	bl	0 <coda_set_error>
    2624:	mvn	r0, #0
    2628:	b	2810 <cd_attribute_init+0x234>
    262c:	ldr	r3, [r5]
    2630:	ldr	r2, [r3, #396]	; 0x18c
    2634:	ldr	ip, [r2, #48]	; 0x30
    2638:	cmp	ip, #0
    263c:	bne	2654 <cd_attribute_init+0x78>
    2640:	ldr	r0, [pc, #540]	; 2864 <cd_attribute_init+0x288>
    2644:	ldr	r1, [pc, #476]	; 2828 <cd_attribute_init+0x24c>
    2648:	movw	r2, #1439	; 0x59f
    264c:	ldr	r3, [pc, #476]	; 2830 <cd_attribute_init+0x254>
    2650:	bl	0 <__assert_fail>
    2654:	ldr	r0, [r5]
    2658:	ldr	ip, [r5]
    265c:	ldr	r1, [ip, #396]	; 0x18c
    2660:	ldr	r3, [r1, #44]	; 0x2c
    2664:	str	r3, [r0, #44]	; 0x2c
    2668:	ldr	r2, [r5]
    266c:	mov	r1, #1
    2670:	str	r1, [r2, #48]	; 0x30
    2674:	ldr	r1, [pc, #452]	; 2840 <cd_attribute_init+0x264>
    2678:	mov	r0, r6
    267c:	bl	998 <get_attribute_value>
    2680:	cmp	r0, #0
    2684:	beq	26a0 <cd_attribute_init+0xc4>
    2688:	movw	r0, #65136	; 0xfe70
    268c:	movt	r0, #65535	; 0xffff
    2690:	ldr	r1, [pc, #404]	; 282c <cd_attribute_init+0x250>
    2694:	bl	0 <coda_set_error>
    2698:	mvn	r0, #0
    269c:	b	2810 <cd_attribute_init+0x234>
    26a0:	ldr	r1, [pc, #400]	; 2838 <cd_attribute_init+0x25c>
    26a4:	ldr	r2, [r5]
    26a8:	ldr	r2, [r2]
    26ac:	mov	r0, r6
    26b0:	bl	a00 <get_mandatory_attribute_value>
    26b4:	mov	r4, r0
    26b8:	cmp	r4, #0
    26bc:	bne	26c8 <cd_attribute_init+0xec>
    26c0:	mvn	r0, #0
    26c4:	b	2810 <cd_attribute_init+0x234>
    26c8:	ldr	r1, [pc, #408]	; 2868 <cd_attribute_init+0x28c>
    26cc:	mov	r0, r6
    26d0:	bl	998 <get_attribute_value>
    26d4:	mov	r6, r0
    26d8:	ldr	r1, [r5]
    26dc:	ldr	r0, [pc, #372]	; 2858 <cd_attribute_init+0x27c>
    26e0:	str	r0, [r1, #40]	; 0x28
    26e4:	ldr	r3, [r5]
    26e8:	ldr	r0, [r3, #44]	; 0x2c
    26ec:	cmp	r0, #2
    26f0:	beq	26fc <cd_attribute_init+0x120>
    26f4:	mov	r1, #0
    26f8:	b	2708 <cd_attribute_init+0x12c>
    26fc:	cmp	r6, #0
    2700:	moveq	r1, #1
    2704:	movne	r1, #0
    2708:	cmp	r1, #0
    270c:	beq	2754 <cd_attribute_init+0x178>
    2710:	mov	r6, r4
    2714:	mov	r0, r4
    2718:	bl	0 <coda_element_name_from_xml_name>
    271c:	mov	r1, #0
    2720:	bl	0 <coda_identifier_from_name>
    2724:	mov	r4, r0
    2728:	cmp	r4, #0
    272c:	bne	2738 <cd_attribute_init+0x15c>
    2730:	mvn	r0, #0
    2734:	b	2810 <cd_attribute_init+0x234>
    2738:	mov	r0, r4
    273c:	bl	0 <coda_type_record_field_new>
    2740:	ldr	r2, [r5]
    2744:	str	r0, [r2, #8]
    2748:	mov	r0, r4
    274c:	bl	0 <free>
    2750:	b	2764 <cd_attribute_init+0x188>
    2754:	mov	r0, r4
    2758:	bl	0 <coda_type_record_field_new>
    275c:	ldr	r1, [r5]
    2760:	str	r0, [r1, #8]
    2764:	ldr	r3, [r5]
    2768:	ldr	ip, [r3, #8]
    276c:	cmp	ip, #0
    2770:	bne	277c <cd_attribute_init+0x1a0>
    2774:	mvn	r0, #0
    2778:	b	2810 <cd_attribute_init+0x234>
    277c:	cmp	r6, #0
    2780:	beq	27a4 <cd_attribute_init+0x1c8>
    2784:	ldr	r0, [r5]
    2788:	ldr	r0, [r0, #8]
    278c:	mov	r1, r6
    2790:	bl	0 <coda_type_record_field_set_real_name>
    2794:	cmp	r0, #0
    2798:	beq	27a4 <cd_attribute_init+0x1c8>
    279c:	mvn	r0, #0
    27a0:	b	2810 <cd_attribute_init+0x234>
    27a4:	ldr	r0, [r5]
    27a8:	ldr	r1, [pc, #148]	; 2844 <cd_attribute_init+0x268>
    27ac:	bl	ef0 <register_type_elements>
    27b0:	ldr	r0, [r5]
    27b4:	mov	r1, #18
    27b8:	ldr	r2, [pc, #136]	; 2848 <cd_attribute_init+0x26c>
    27bc:	ldr	r3, [pc, #120]	; 283c <cd_attribute_init+0x260>
    27c0:	bl	e64 <register_sub_element>
    27c4:	ldr	r0, [r5]
    27c8:	mov	r1, #29
    27cc:	ldr	r2, [pc, #116]	; 2848 <cd_attribute_init+0x26c>
    27d0:	ldr	r3, [pc, #116]	; 284c <cd_attribute_init+0x270>
    27d4:	bl	e64 <register_sub_element>
    27d8:	ldr	r0, [r5]
    27dc:	mov	r1, #5
    27e0:	ldr	r2, [pc, #120]	; 2860 <cd_attribute_init+0x284>
    27e4:	ldr	r3, [pc, #112]	; 285c <cd_attribute_init+0x280>
    27e8:	bl	e64 <register_sub_element>
    27ec:	ldr	r0, [r5]
    27f0:	mov	r1, #16
    27f4:	ldr	r2, [pc, #56]	; 2834 <cd_attribute_init+0x258>
    27f8:	ldr	r3, [pc, #80]	; 2850 <cd_attribute_init+0x274>
    27fc:	bl	e64 <register_sub_element>
    2800:	ldr	r0, [r5]
    2804:	ldr	r1, [pc, #72]	; 2854 <cd_attribute_init+0x278>
    2808:	str	r1, [r0, #36]	; 0x24
    280c:	mov	r0, #0
    2810:	ldr	r4, [sp, #8]
    2814:	ldr	r5, [sp, #12]
    2818:	ldr	r6, [sp, #16]
    281c:	ldr	lr, [sp, #4]
    2820:	add	sp, sp, #24
    2824:	bx	lr
    2828:	.word	0x00001939
    282c:	.word	0x00000eaf
    2830:	.word	0x00002100
    2834:	.word	0x00000000
    2838:	.word	0x0000047e
    283c:	.word	0x00000000
    2840:	.word	0x000001f6
	...
    2864:	.word	0x000009ff
    2868:	.word	0x00000a1e
    286c:	.word	0x00001746
    2870:	.word	0x00000dee

00002874 <cd_complex_set_type>:
    2874:	mov	ip, sp
    2878:	sub	sp, sp, #8
    287c:	str	ip, [sp]
    2880:	str	lr, [sp, #4]
    2884:	mov	r1, r0
    2888:	ldr	r2, [r1]
    288c:	ldr	r2, [r2, #396]	; 0x18c
    2890:	ldr	r0, [r2, #8]
    2894:	ldr	ip, [r1]
    2898:	ldr	r1, [ip, #8]
    289c:	bl	0 <coda_type_complex_set_type>
    28a0:	ldr	lr, [sp, #4]
    28a4:	add	sp, sp, #8
    28a8:	bx	lr

000028ac <cd_complex_finalise>:
    28ac:	mov	ip, sp
    28b0:	sub	sp, sp, #8
    28b4:	str	ip, [sp]
    28b8:	str	lr, [sp, #4]
    28bc:	ldr	r0, [r0]
    28c0:	ldr	r0, [r0, #8]
    28c4:	bl	0 <coda_type_complex_validate>
    28c8:	ldr	lr, [sp, #4]
    28cc:	add	sp, sp, #8
    28d0:	bx	lr

000028d4 <cd_complex_init>:
    28d4:	mov	ip, sp
    28d8:	sub	sp, sp, #16
    28dc:	str	ip, [sp]
    28e0:	str	lr, [sp, #4]
    28e4:	str	r4, [sp, #8]
    28e8:	str	r5, [sp, #12]
    28ec:	mov	r5, r1
    28f0:	mov	r4, r0
    28f4:	mov	r1, r5
    28f8:	mov	r0, r4
    28fc:	bl	b6c <handle_format_attribute_for_type>
    2900:	cmp	r0, #0
    2904:	beq	2910 <cd_complex_init+0x3c>
    2908:	mvn	r0, #0
    290c:	b	29b0 <cd_complex_init+0xdc>
    2910:	ldr	r0, [r4]
    2914:	ldr	r2, [pc, #172]	; 29c8 <cd_complex_init+0xf4>
    2918:	str	r2, [r0, #40]	; 0x28
    291c:	ldr	r1, [r4]
    2920:	ldr	r0, [r1, #44]	; 0x2c
    2924:	bl	0 <coda_type_complex_new>
    2928:	ldr	ip, [r4]
    292c:	str	r0, [ip, #8]
    2930:	ldr	r0, [r4]
    2934:	ldr	r2, [r0, #8]
    2938:	cmp	r2, #0
    293c:	bne	2948 <cd_complex_init+0x74>
    2940:	mvn	r0, #0
    2944:	b	29b0 <cd_complex_init+0xdc>
    2948:	mov	r1, r5
    294c:	mov	r0, r4
    2950:	bl	a78 <handle_name_attribute_for_type>
    2954:	cmp	r0, #0
    2958:	beq	2964 <cd_complex_init+0x90>
    295c:	mvn	r0, #0
    2960:	b	29b0 <cd_complex_init+0xdc>
    2964:	ldr	r0, [r4]
    2968:	mov	r1, #11
    296c:	ldr	r2, [pc, #80]	; 29c4 <cd_complex_init+0xf0>
    2970:	ldr	r3, [pc, #84]	; 29cc <cd_complex_init+0xf8>
    2974:	bl	e64 <register_sub_element>
    2978:	ldr	r0, [r4]
    297c:	mov	r1, #17
    2980:	ldr	r2, [pc, #76]	; 29d4 <cd_complex_init+0x100>
    2984:	ldr	r3, [pc, #76]	; 29d8 <cd_complex_init+0x104>
    2988:	bl	e64 <register_sub_element>
    298c:	ldr	r0, [r4]
    2990:	mov	r1, #20
    2994:	ldr	r2, [pc, #52]	; 29d0 <cd_complex_init+0xfc>
    2998:	ldr	r3, [pc, #56]	; 29d8 <cd_complex_init+0x104>
    299c:	bl	e64 <register_sub_element>
    29a0:	ldr	r0, [r4]
    29a4:	ldr	r1, [pc, #48]	; 29dc <cd_complex_init+0x108>
    29a8:	str	r1, [r0, #36]	; 0x24
    29ac:	mov	r0, #0
    29b0:	ldr	r4, [sp, #8]
    29b4:	ldr	r5, [sp, #12]
    29b8:	ldr	lr, [sp, #4]
    29bc:	add	sp, sp, #16
    29c0:	bx	lr
	...

000029e0 <cd_conversion_set_unit>:
    29e0:	mov	ip, sp
    29e4:	sub	sp, sp, #8
    29e8:	str	ip, [sp]
    29ec:	str	lr, [sp, #4]
    29f0:	mov	r1, r0
    29f4:	ldr	r2, [r1]
    29f8:	ldr	r2, [r2, #12]
    29fc:	cmp	r2, #0
    2a00:	bne	2a1c <cd_conversion_set_unit+0x3c>
    2a04:	ldr	r0, [r1]
    2a08:	ldr	r0, [r0, #396]	; 0x18c
    2a0c:	ldr	r0, [r0, #8]
    2a10:	ldr	r1, [pc, #40]	; 2a40 <cd_conversion_set_unit+0x60>
    2a14:	bl	0 <coda_conversion_set_unit>
    2a18:	b	2a34 <cd_conversion_set_unit+0x54>
    2a1c:	ldr	r3, [r1]
    2a20:	ldr	r2, [r3, #396]	; 0x18c
    2a24:	ldr	r0, [r2, #8]
    2a28:	ldr	r1, [r1]
    2a2c:	ldr	r1, [r1, #12]
    2a30:	bl	0 <coda_conversion_set_unit>
    2a34:	ldr	lr, [sp, #4]
    2a38:	add	sp, sp, #8
    2a3c:	bx	lr
    2a40:	.word	0x00002067

00002a44 <cd_conversion_init>:
    2a44:	mov	ip, sp
    2a48:	sub	sp, sp, #56	; 0x38
    2a4c:	str	ip, [sp]
    2a50:	str	lr, [sp, #4]
    2a54:	str	r4, [sp, #8]
    2a58:	str	r5, [sp, #12]
    2a5c:	str	r6, [sp, #16]
    2a60:	str	r7, [sp, #20]
    2a64:	mov	r5, r1
    2a68:	mov	r6, r0
    2a6c:	vldr	d1, [pc, #528]	; 2c84 <cd_conversion_init+0x240>
    2a70:	vstr	d1, [sp, #40]	; 0x28
    2a74:	bl	0 <coda_NaN>
    2a78:	vstr	d0, [sp, #48]	; 0x30
    2a7c:	ldr	r1, [pc, #508]	; 2c80 <cd_conversion_init+0x23c>
    2a80:	ldr	r3, [r6]
    2a84:	ldr	r2, [r3]
    2a88:	mov	r0, r5
    2a8c:	bl	a00 <get_mandatory_attribute_value>
    2a90:	mov	r7, r0
    2a94:	cmp	r7, #0
    2a98:	bne	2aa4 <cd_conversion_init+0x60>
    2a9c:	mvn	r0, #0
    2aa0:	b	2c3c <cd_conversion_init+0x1f8>
    2aa4:	ldr	r1, [pc, #440]	; 2c64 <cd_conversion_init+0x220>
    2aa8:	ldr	ip, [r6]
    2aac:	ldr	r2, [ip]
    2ab0:	mov	r0, r5
    2ab4:	bl	a00 <get_mandatory_attribute_value>
    2ab8:	mov	r4, r0
    2abc:	cmp	r4, #0
    2ac0:	bne	2acc <cd_conversion_init+0x88>
    2ac4:	mvn	r0, #0
    2ac8:	b	2c3c <cd_conversion_init+0x1f8>
    2acc:	mov	r0, r7
    2ad0:	bl	0 <strlen>
    2ad4:	add	r2, sp, #24
    2ad8:	mov	r3, #1
    2adc:	mov	r1, r0
    2ae0:	mov	r0, r7
    2ae4:	bl	0 <coda_ascii_parse_double>
    2ae8:	cmp	r0, #0
    2aec:	bge	2b0c <cd_conversion_init+0xc8>
    2af0:	movw	r0, #65136	; 0xfe70
    2af4:	movt	r0, #65535	; 0xffff
    2af8:	ldr	r1, [pc, #344]	; 2c58 <cd_conversion_init+0x214>
    2afc:	mov	r2, r7
    2b00:	bl	0 <coda_set_error>
    2b04:	mvn	r0, #0
    2b08:	b	2c3c <cd_conversion_init+0x1f8>
    2b0c:	mov	r0, r4
    2b10:	bl	0 <strlen>
    2b14:	mov	r1, r0
    2b18:	add	r2, sp, #32
    2b1c:	mov	r3, #1
    2b20:	mov	r0, r4
    2b24:	bl	0 <coda_ascii_parse_double>
    2b28:	cmp	r0, #0
    2b2c:	bge	2b4c <cd_conversion_init+0x108>
    2b30:	movw	r0, #65136	; 0xfe70
    2b34:	movt	r0, #65535	; 0xffff
    2b38:	ldr	r1, [pc, #308]	; 2c74 <cd_conversion_init+0x230>
    2b3c:	mov	r2, r4
    2b40:	bl	0 <coda_set_error>
    2b44:	mvn	r0, #0
    2b48:	b	2c3c <cd_conversion_init+0x1f8>
    2b4c:	ldr	r1, [pc, #296]	; 2c7c <cd_conversion_init+0x238>
    2b50:	mov	r0, r5
    2b54:	bl	998 <get_attribute_value>
    2b58:	mov	r4, r0
    2b5c:	cmp	r4, #0
    2b60:	beq	2ba4 <cd_conversion_init+0x160>
    2b64:	mov	r0, r4
    2b68:	bl	0 <strlen>
    2b6c:	add	r2, sp, #40	; 0x28
    2b70:	mov	r3, #1
    2b74:	mov	r1, r0
    2b78:	mov	r0, r4
    2b7c:	bl	0 <coda_ascii_parse_double>
    2b80:	cmp	r0, #0
    2b84:	bge	2ba4 <cd_conversion_init+0x160>
    2b88:	movw	r0, #65136	; 0xfe70
    2b8c:	movt	r0, #65535	; 0xffff
    2b90:	ldr	r1, [pc, #196]	; 2c5c <cd_conversion_init+0x218>
    2b94:	mov	r2, r4
    2b98:	bl	0 <coda_set_error>
    2b9c:	mvn	r0, #0
    2ba0:	b	2c3c <cd_conversion_init+0x1f8>
    2ba4:	ldr	r1, [pc, #188]	; 2c68 <cd_conversion_init+0x224>
    2ba8:	mov	r0, r5
    2bac:	bl	998 <get_attribute_value>
    2bb0:	mov	r4, r0
    2bb4:	cmp	r4, #0
    2bb8:	beq	2bfc <cd_conversion_init+0x1b8>
    2bbc:	mov	r0, r4
    2bc0:	bl	0 <strlen>
    2bc4:	mov	r1, r0
    2bc8:	add	r2, sp, #48	; 0x30
    2bcc:	mov	r3, #1
    2bd0:	mov	r0, r4
    2bd4:	bl	0 <coda_ascii_parse_double>
    2bd8:	cmp	r0, #0
    2bdc:	bge	2bfc <cd_conversion_init+0x1b8>
    2be0:	movw	r0, #65136	; 0xfe70
    2be4:	movt	r0, #65535	; 0xffff
    2be8:	ldr	r1, [pc, #136]	; 2c78 <cd_conversion_init+0x234>
    2bec:	mov	r2, r4
    2bf0:	bl	0 <coda_set_error>
    2bf4:	mvn	r0, #0
    2bf8:	b	2c3c <cd_conversion_init+0x1f8>
    2bfc:	ldr	r0, [r6]
    2c00:	ldr	r1, [pc, #104]	; 2c70 <cd_conversion_init+0x22c>
    2c04:	str	r1, [r0, #40]	; 0x28
    2c08:	vldr	d0, [sp, #24]
    2c0c:	vldr	d1, [sp, #32]
    2c10:	vldr	d2, [sp, #40]	; 0x28
    2c14:	vldr	d3, [sp, #48]	; 0x30
    2c18:	bl	0 <coda_conversion_new>
    2c1c:	ldr	r1, [r6]
    2c20:	str	r0, [r1, #8]
    2c24:	ldr	r0, [r6]
    2c28:	mov	r1, #41	; 0x29
    2c2c:	ldr	r2, [pc, #44]	; 2c60 <cd_conversion_init+0x21c>
    2c30:	ldr	r3, [pc, #52]	; 2c6c <cd_conversion_init+0x228>
    2c34:	bl	e64 <register_sub_element>
    2c38:	mov	r0, #0
    2c3c:	ldr	r4, [sp, #8]
    2c40:	ldr	r5, [sp, #12]
    2c44:	ldr	r6, [sp, #16]
    2c48:	ldr	r7, [sp, #20]
    2c4c:	ldr	lr, [sp, #4]
    2c50:	add	sp, sp, #56	; 0x38
    2c54:	bx	lr
    2c58:	.word	0x0000099c
    2c5c:	.word	0x00001604
    2c60:	.word	0x00000000
    2c64:	.word	0x00000edd
    2c68:	.word	0x00001ec9
	...
    2c74:	.word	0x00001d31
    2c78:	.word	0x00000039
    2c7c:	.word	0x00001ec2
    2c80:	.word	0x000012b7
	...

00002c8c <cd_detection_rule_add_entry>:
    2c8c:	mov	ip, sp
    2c90:	sub	sp, sp, #16
    2c94:	str	ip, [sp]
    2c98:	str	lr, [sp, #4]
    2c9c:	str	r4, [sp, #8]
    2ca0:	mov	r4, r0
    2ca4:	ldr	ip, [r4]
    2ca8:	ldr	r1, [ip, #8]
    2cac:	cmp	r1, #0
    2cb0:	beq	2ce8 <cd_detection_rule_add_entry+0x5c>
    2cb4:	ldr	r2, [r4]
    2cb8:	ldr	r3, [r2, #396]	; 0x18c
    2cbc:	ldr	r0, [r3, #8]
    2cc0:	ldr	r1, [r4]
    2cc4:	ldr	r1, [r1, #8]
    2cc8:	bl	0 <coda_detection_rule_add_entry>
    2ccc:	cmp	r0, #0
    2cd0:	beq	2cdc <cd_detection_rule_add_entry+0x50>
    2cd4:	mvn	r0, #0
    2cd8:	b	2cec <cd_detection_rule_add_entry+0x60>
    2cdc:	ldr	r1, [r4]
    2ce0:	mov	r2, #0
    2ce4:	str	r2, [r1, #8]
    2ce8:	mov	r0, #0
    2cec:	ldr	r4, [sp, #8]
    2cf0:	ldr	lr, [sp, #4]
    2cf4:	add	sp, sp, #16
    2cf8:	bx	lr

00002cfc <cd_detection_rule_init>:
    2cfc:	mov	ip, sp
    2d00:	sub	sp, sp, #16
    2d04:	str	ip, [sp]
    2d08:	str	lr, [sp, #4]
    2d0c:	str	r4, [sp, #8]
    2d10:	mov	r4, r0
    2d14:	ldr	r3, [r4]
    2d18:	ldr	r0, [pc, #144]	; 2db0 <cd_detection_rule_init+0xb4>
    2d1c:	str	r0, [r3, #40]	; 0x28
    2d20:	bl	0 <coda_detection_rule_new>
    2d24:	ldr	r1, [r4]
    2d28:	str	r0, [r1, #8]
    2d2c:	ldr	r0, [r4]
    2d30:	ldr	r2, [r0, #8]
    2d34:	cmp	r2, #0
    2d38:	bne	2d44 <cd_detection_rule_init+0x48>
    2d3c:	mvn	r0, #0
    2d40:	b	2d98 <cd_detection_rule_init+0x9c>
    2d44:	ldr	r0, [r4]
    2d48:	mov	r1, #23
    2d4c:	ldr	r2, [pc, #84]	; 2da8 <cd_detection_rule_init+0xac>
    2d50:	ldr	r3, [pc, #84]	; 2dac <cd_detection_rule_init+0xb0>
    2d54:	bl	e64 <register_sub_element>
    2d58:	ldr	r0, [r4]
    2d5c:	mov	r1, #24
    2d60:	ldr	r2, [pc, #76]	; 2db4 <cd_detection_rule_init+0xb8>
    2d64:	ldr	r3, [pc, #64]	; 2dac <cd_detection_rule_init+0xb0>
    2d68:	bl	e64 <register_sub_element>
    2d6c:	ldr	r0, [r4]
    2d70:	mov	r1, #25
    2d74:	ldr	r2, [pc, #64]	; 2dbc <cd_detection_rule_init+0xc0>
    2d78:	ldr	r3, [pc, #44]	; 2dac <cd_detection_rule_init+0xb0>
    2d7c:	bl	e64 <register_sub_element>
    2d80:	ldr	r0, [r4]
    2d84:	mov	r1, #26
    2d88:	ldr	r2, [pc, #40]	; 2db8 <cd_detection_rule_init+0xbc>
    2d8c:	ldr	r3, [pc, #24]	; 2dac <cd_detection_rule_init+0xb0>
    2d90:	bl	e64 <register_sub_element>
    2d94:	mov	r0, #0
    2d98:	ldr	r4, [sp, #8]
    2d9c:	ldr	lr, [sp, #4]
    2da0:	add	sp, sp, #16
    2da4:	bx	lr
	...

00002dc0 <cd_field_set_type>:
    2dc0:	mov	ip, sp
    2dc4:	sub	sp, sp, #8
    2dc8:	str	ip, [sp]
    2dcc:	str	lr, [sp, #4]
    2dd0:	mov	r1, r0
    2dd4:	ldr	r2, [r1]
    2dd8:	ldr	r2, [r2, #396]	; 0x18c
    2ddc:	ldr	r0, [r2, #8]
    2de0:	ldr	ip, [r1]
    2de4:	ldr	r1, [ip, #8]
    2de8:	bl	0 <coda_type_record_field_set_type>
    2dec:	ldr	lr, [sp, #4]
    2df0:	add	sp, sp, #8
    2df4:	bx	lr

00002df8 <cd_field_set_hidden>:
    2df8:	mov	ip, sp
    2dfc:	sub	sp, sp, #8
    2e00:	str	ip, [sp]
    2e04:	str	lr, [sp, #4]
    2e08:	ldr	r0, [r0]
    2e0c:	ldr	r0, [r0, #396]	; 0x18c
    2e10:	ldr	r0, [r0, #8]
    2e14:	bl	0 <coda_type_record_field_set_hidden>
    2e18:	ldr	lr, [sp, #4]
    2e1c:	add	sp, sp, #8
    2e20:	bx	lr

00002e24 <cd_field_set_optional>:
    2e24:	mov	ip, sp
    2e28:	sub	sp, sp, #8
    2e2c:	str	ip, [sp]
    2e30:	str	lr, [sp, #4]
    2e34:	ldr	r0, [r0]
    2e38:	ldr	r0, [r0, #396]	; 0x18c
    2e3c:	ldr	r0, [r0, #8]
    2e40:	bl	0 <coda_type_record_field_set_optional>
    2e44:	ldr	lr, [sp, #4]
    2e48:	add	sp, sp, #8
    2e4c:	bx	lr

00002e50 <cd_field_set_available>:
    2e50:	mov	ip, sp
    2e54:	sub	sp, sp, #16
    2e58:	str	ip, [sp]
    2e5c:	str	lr, [sp, #4]
    2e60:	str	r4, [sp, #8]
    2e64:	mov	r4, r0
    2e68:	ldr	r0, [r4]
    2e6c:	ldr	r2, [r0, #396]	; 0x18c
    2e70:	ldr	r0, [r2, #8]
    2e74:	ldr	r1, [r4]
    2e78:	ldr	r1, [r1, #8]
    2e7c:	bl	0 <coda_type_record_field_set_available_expression>
    2e80:	cmp	r0, #0
    2e84:	beq	2e90 <cd_field_set_available+0x40>
    2e88:	mvn	r0, #0
    2e8c:	b	2ea0 <cd_field_set_available+0x50>
    2e90:	ldr	r1, [r4]
    2e94:	mov	r3, #0
    2e98:	str	r3, [r1, #8]
    2e9c:	mov	r0, #0
    2ea0:	ldr	r4, [sp, #8]
    2ea4:	ldr	lr, [sp, #4]
    2ea8:	add	sp, sp, #16
    2eac:	bx	lr

00002eb0 <cd_field_set_bit_offset>:
    2eb0:	mov	ip, sp
    2eb4:	sub	sp, sp, #16
    2eb8:	str	ip, [sp]
    2ebc:	str	lr, [sp, #4]
    2ec0:	str	r4, [sp, #8]
    2ec4:	mov	r4, r0
    2ec8:	ldr	r0, [r4]
    2ecc:	ldr	r2, [r0, #396]	; 0x18c
    2ed0:	ldr	r0, [r2, #8]
    2ed4:	ldr	r1, [r4]
    2ed8:	ldr	r1, [r1, #8]
    2edc:	bl	0 <coda_type_record_field_set_bit_offset_expression>
    2ee0:	cmp	r0, #0
    2ee4:	beq	2ef0 <cd_field_set_bit_offset+0x40>
    2ee8:	mvn	r0, #0
    2eec:	b	2f00 <cd_field_set_bit_offset+0x50>
    2ef0:	ldr	r1, [r4]
    2ef4:	mov	r3, #0
    2ef8:	str	r3, [r1, #8]
    2efc:	mov	r0, #0
    2f00:	ldr	r4, [sp, #8]
    2f04:	ldr	lr, [sp, #4]
    2f08:	add	sp, sp, #16
    2f0c:	bx	lr

00002f10 <cd_field_finalise>:
    2f10:	mov	ip, sp
    2f14:	sub	sp, sp, #8
    2f18:	str	ip, [sp]
    2f1c:	str	lr, [sp, #4]
    2f20:	ldr	r0, [r0]
    2f24:	ldr	r0, [r0, #8]
    2f28:	bl	0 <coda_type_record_field_validate>
    2f2c:	ldr	lr, [sp, #4]
    2f30:	add	sp, sp, #8
    2f34:	bx	lr

00002f38 <cd_field_init>:
    2f38:	mov	ip, sp
    2f3c:	sub	sp, sp, #16
    2f40:	str	ip, [sp]
    2f44:	str	lr, [sp, #4]
    2f48:	str	r4, [sp, #8]
    2f4c:	str	r5, [sp, #12]
    2f50:	mov	r4, r1
    2f54:	mov	r5, r0
    2f58:	ldr	r1, [pc, #488]	; 3148 <cd_field_init+0x210>
    2f5c:	mov	r0, r4
    2f60:	bl	998 <get_attribute_value>
    2f64:	cmp	r0, #0
    2f68:	beq	2f84 <cd_field_init+0x4c>
    2f6c:	movw	r0, #65136	; 0xfe70
    2f70:	movt	r0, #65535	; 0xffff
    2f74:	ldr	r1, [pc, #452]	; 3140 <cd_field_init+0x208>
    2f78:	bl	0 <coda_set_error>
    2f7c:	mvn	r0, #0
    2f80:	b	30ec <cd_field_init+0x1b4>
    2f84:	ldr	r3, [r5]
    2f88:	ldr	r1, [r3, #396]	; 0x18c
    2f8c:	ldr	ip, [r1, #48]	; 0x30
    2f90:	cmp	ip, #0
    2f94:	bne	2fac <cd_field_init+0x74>
    2f98:	ldr	r0, [pc, #412]	; 313c <cd_field_init+0x204>
    2f9c:	ldr	r1, [pc, #348]	; 3100 <cd_field_init+0x1c8>
    2fa0:	movw	r2, #1685	; 0x695
    2fa4:	ldr	r3, [pc, #344]	; 3104 <cd_field_init+0x1cc>
    2fa8:	bl	0 <__assert_fail>
    2fac:	ldr	r1, [r5]
    2fb0:	ldr	r0, [r5]
    2fb4:	ldr	r3, [r0, #396]	; 0x18c
    2fb8:	ldr	r3, [r3, #44]	; 0x2c
    2fbc:	str	r3, [r1, #44]	; 0x2c
    2fc0:	ldr	r3, [r5]
    2fc4:	mov	r0, #1
    2fc8:	str	r0, [r3, #48]	; 0x30
    2fcc:	ldr	r1, [pc, #328]	; 311c <cd_field_init+0x1e4>
    2fd0:	mov	r0, r4
    2fd4:	bl	998 <get_attribute_value>
    2fd8:	cmp	r0, #0
    2fdc:	beq	2ff8 <cd_field_init+0xc0>
    2fe0:	movw	r0, #65136	; 0xfe70
    2fe4:	movt	r0, #65535	; 0xffff
    2fe8:	ldr	r1, [pc, #316]	; 312c <cd_field_init+0x1f4>
    2fec:	bl	0 <coda_set_error>
    2ff0:	mvn	r0, #0
    2ff4:	b	30ec <cd_field_init+0x1b4>
    2ff8:	ldr	r1, [pc, #268]	; 310c <cd_field_init+0x1d4>
    2ffc:	ldr	r2, [r5]
    3000:	ldr	r2, [r2]
    3004:	mov	r0, r4
    3008:	bl	a00 <get_mandatory_attribute_value>
    300c:	cmp	r0, #0
    3010:	bne	301c <cd_field_init+0xe4>
    3014:	mvn	r0, #0
    3018:	b	30ec <cd_field_init+0x1b4>
    301c:	ldr	r3, [r5]
    3020:	ldr	ip, [pc, #264]	; 3130 <cd_field_init+0x1f8>
    3024:	str	ip, [r3, #40]	; 0x28
    3028:	bl	0 <coda_type_record_field_new>
    302c:	ldr	r1, [r5]
    3030:	str	r0, [r1, #8]
    3034:	ldr	r3, [r5]
    3038:	ldr	r0, [r3, #8]
    303c:	cmp	r0, #0
    3040:	bne	304c <cd_field_init+0x114>
    3044:	mvn	r0, #0
    3048:	b	30ec <cd_field_init+0x1b4>
    304c:	ldr	r1, [pc, #240]	; 3144 <cd_field_init+0x20c>
    3050:	mov	r0, r4
    3054:	bl	998 <get_attribute_value>
    3058:	mov	r1, r0
    305c:	cmp	r1, #0
    3060:	beq	3080 <cd_field_init+0x148>
    3064:	ldr	r2, [r5]
    3068:	ldr	r0, [r2, #8]
    306c:	bl	0 <coda_type_record_field_set_real_name>
    3070:	cmp	r0, #0
    3074:	beq	3080 <cd_field_init+0x148>
    3078:	mvn	r0, #0
    307c:	b	30ec <cd_field_init+0x1b4>
    3080:	ldr	r0, [r5]
    3084:	ldr	r1, [pc, #148]	; 3120 <cd_field_init+0x1e8>
    3088:	bl	ef0 <register_type_elements>
    308c:	ldr	r0, [r5]
    3090:	mov	r1, #18
    3094:	ldr	r2, [pc, #136]	; 3124 <cd_field_init+0x1ec>
    3098:	ldr	r3, [pc, #112]	; 3110 <cd_field_init+0x1d8>
    309c:	bl	e64 <register_sub_element>
    30a0:	ldr	r0, [r5]
    30a4:	mov	r1, #29
    30a8:	ldr	r2, [pc, #116]	; 3124 <cd_field_init+0x1ec>
    30ac:	ldr	r3, [pc, #116]	; 3128 <cd_field_init+0x1f0>
    30b0:	bl	e64 <register_sub_element>
    30b4:	ldr	r0, [r5]
    30b8:	mov	r1, #5
    30bc:	ldr	r2, [pc, #116]	; 3138 <cd_field_init+0x200>
    30c0:	ldr	r3, [pc, #108]	; 3134 <cd_field_init+0x1fc>
    30c4:	bl	e64 <register_sub_element>
    30c8:	ldr	r0, [r5]
    30cc:	mov	r1, #6
    30d0:	ldr	r2, [pc, #48]	; 3108 <cd_field_init+0x1d0>
    30d4:	ldr	r3, [pc, #60]	; 3118 <cd_field_init+0x1e0>
    30d8:	bl	e64 <register_sub_element>
    30dc:	ldr	r2, [r5]
    30e0:	ldr	r1, [pc, #44]	; 3114 <cd_field_init+0x1dc>
    30e4:	str	r1, [r2, #36]	; 0x24
    30e8:	mov	r0, #0
    30ec:	ldr	r4, [sp, #8]
    30f0:	ldr	r5, [sp, #12]
    30f4:	ldr	lr, [sp, #4]
    30f8:	add	sp, sp, #16
    30fc:	bx	lr
    3100:	.word	0x00001939
    3104:	.word	0x00002112
    3108:	.word	0x00000000
    310c:	.word	0x0000047e
	...
    311c:	.word	0x000001f6
	...
    312c:	.word	0x00001ed1
	...
    313c:	.word	0x000009ff
    3140:	.word	0x0000009b
    3144:	.word	0x00000a1e
    3148:	.word	0x00001746

0000314c <cd_float_set_unit>:
    314c:	mov	ip, sp
    3150:	sub	sp, sp, #8
    3154:	str	ip, [sp]
    3158:	str	lr, [sp, #4]
    315c:	mov	r1, r0
    3160:	ldr	r2, [r1]
    3164:	ldr	r2, [r2, #12]
    3168:	cmp	r2, #0
    316c:	bne	3188 <cd_float_set_unit+0x3c>
    3170:	ldr	r0, [r1]
    3174:	ldr	r0, [r0, #396]	; 0x18c
    3178:	ldr	r0, [r0, #8]
    317c:	ldr	r1, [pc, #40]	; 31ac <cd_float_set_unit+0x60>
    3180:	bl	0 <coda_type_number_set_unit>
    3184:	b	31a0 <cd_float_set_unit+0x54>
    3188:	ldr	r3, [r1]
    318c:	ldr	r2, [r3, #396]	; 0x18c
    3190:	ldr	r0, [r2, #8]
    3194:	ldr	r1, [r1]
    3198:	ldr	r1, [r1, #12]
    319c:	bl	0 <coda_type_number_set_unit>
    31a0:	ldr	lr, [sp, #4]
    31a4:	add	sp, sp, #8
    31a8:	bx	lr
    31ac:	.word	0x00002067

000031b0 <cd_float_set_read_type>:
    31b0:	mov	ip, sp
    31b4:	sub	sp, sp, #8
    31b8:	str	ip, [sp]
    31bc:	str	lr, [sp, #4]
    31c0:	mov	r1, r0
    31c4:	ldr	r2, [r1]
    31c8:	ldr	r2, [r2, #396]	; 0x18c
    31cc:	ldr	r0, [r2, #8]
    31d0:	ldr	ip, [r1]
    31d4:	ldr	r1, [ip, #16]
    31d8:	bl	0 <coda_type_set_read_type>
    31dc:	ldr	lr, [sp, #4]
    31e0:	add	sp, sp, #8
    31e4:	bx	lr

000031e8 <cd_float_set_conversion>:
    31e8:	mov	ip, sp
    31ec:	sub	sp, sp, #16
    31f0:	str	ip, [sp]
    31f4:	str	lr, [sp, #4]
    31f8:	str	r4, [sp, #8]
    31fc:	mov	r4, r0
    3200:	ldr	r0, [r4]
    3204:	ldr	r2, [r0, #396]	; 0x18c
    3208:	ldr	r0, [r2, #8]
    320c:	ldr	r1, [r4]
    3210:	ldr	r1, [r1, #8]
    3214:	bl	0 <coda_type_number_set_conversion>
    3218:	cmp	r0, #0
    321c:	beq	3228 <cd_float_set_conversion+0x40>
    3220:	mvn	r0, #0
    3224:	b	3238 <cd_float_set_conversion+0x50>
    3228:	ldr	r1, [r4]
    322c:	mov	r3, #0
    3230:	str	r3, [r1, #8]
    3234:	mov	r0, #0
    3238:	ldr	r4, [sp, #8]
    323c:	ldr	lr, [sp, #4]
    3240:	add	sp, sp, #16
    3244:	bx	lr

00003248 <cd_float_set_little_endian>:
    3248:	mov	ip, sp
    324c:	sub	sp, sp, #8
    3250:	str	ip, [sp]
    3254:	str	lr, [sp, #4]
    3258:	ldr	r0, [r0]
    325c:	ldr	r0, [r0, #396]	; 0x18c
    3260:	ldr	r0, [r0, #8]
    3264:	mov	r1, #1
    3268:	bl	0 <coda_type_number_set_endianness>
    326c:	ldr	lr, [sp, #4]
    3270:	add	sp, sp, #8
    3274:	bx	lr

00003278 <cd_float_add_mapping>:
    3278:	mov	ip, sp
    327c:	sub	sp, sp, #16
    3280:	str	ip, [sp]
    3284:	str	lr, [sp, #4]
    3288:	str	r4, [sp, #8]
    328c:	mov	r4, r0
    3290:	ldr	r0, [r4]
    3294:	ldr	r2, [r0, #396]	; 0x18c
    3298:	ldr	r0, [r2, #8]
    329c:	ldr	r1, [r4]
    32a0:	ldr	r1, [r1, #8]
    32a4:	bl	0 <coda_type_number_add_ascii_float_mapping>
    32a8:	cmp	r0, #0
    32ac:	beq	32b8 <cd_float_add_mapping+0x40>
    32b0:	mvn	r0, #0
    32b4:	b	32c8 <cd_float_add_mapping+0x50>
    32b8:	ldr	r1, [r4]
    32bc:	mov	r3, #0
    32c0:	str	r3, [r1, #8]
    32c4:	mov	r0, #0
    32c8:	ldr	r4, [sp, #8]
    32cc:	ldr	lr, [sp, #4]
    32d0:	add	sp, sp, #16
    32d4:	bx	lr

000032d8 <cd_float_finalise>:
    32d8:	mov	ip, sp
    32dc:	sub	sp, sp, #8
    32e0:	str	ip, [sp]
    32e4:	str	lr, [sp, #4]
    32e8:	ldr	r0, [r0]
    32ec:	ldr	r0, [r0, #8]
    32f0:	bl	0 <coda_type_number_validate>
    32f4:	ldr	lr, [sp, #4]
    32f8:	add	sp, sp, #8
    32fc:	bx	lr

00003300 <cd_float_init>:
    3300:	mov	ip, sp
    3304:	sub	sp, sp, #16
    3308:	str	ip, [sp]
    330c:	str	lr, [sp, #4]
    3310:	str	r4, [sp, #8]
    3314:	str	r5, [sp, #12]
    3318:	mov	r5, r1
    331c:	mov	r4, r0
    3320:	mov	r1, r5
    3324:	mov	r0, r4
    3328:	bl	b6c <handle_format_attribute_for_type>
    332c:	cmp	r0, #0
    3330:	beq	333c <cd_float_init+0x3c>
    3334:	mvn	r0, #0
    3338:	b	3458 <cd_float_init+0x158>
    333c:	ldr	r2, [r4]
    3340:	ldr	r3, [pc, #312]	; 3480 <cd_float_init+0x180>
    3344:	str	r3, [r2, #40]	; 0x28
    3348:	ldr	r3, [r4]
    334c:	ldr	r0, [r3, #44]	; 0x2c
    3350:	mov	r1, #3
    3354:	bl	0 <coda_type_number_new>
    3358:	ldr	r2, [r4]
    335c:	str	r0, [r2, #8]
    3360:	ldr	ip, [r4]
    3364:	ldr	ip, [ip, #8]
    3368:	cmp	ip, #0
    336c:	bne	3378 <cd_float_init+0x78>
    3370:	mvn	r0, #0
    3374:	b	3458 <cd_float_init+0x158>
    3378:	mov	r1, r5
    337c:	mov	r0, r4
    3380:	bl	a78 <handle_name_attribute_for_type>
    3384:	cmp	r0, #0
    3388:	beq	3394 <cd_float_init+0x94>
    338c:	mvn	r0, #0
    3390:	b	3458 <cd_float_init+0x158>
    3394:	ldr	r0, [r4]
    3398:	mov	r1, #41	; 0x29
    339c:	ldr	r2, [pc, #216]	; 347c <cd_float_init+0x17c>
    33a0:	ldr	r3, [pc, #232]	; 3490 <cd_float_init+0x190>
    33a4:	bl	e64 <register_sub_element>
    33a8:	ldr	r0, [r4]
    33ac:	mov	r1, #28
    33b0:	ldr	r2, [pc, #180]	; 346c <cd_float_init+0x16c>
    33b4:	ldr	r3, [pc, #188]	; 3478 <cd_float_init+0x178>
    33b8:	bl	e64 <register_sub_element>
    33bc:	ldr	r0, [r4]
    33c0:	mov	r1, #10
    33c4:	ldr	r2, [pc, #224]	; 34ac <cd_float_init+0x1ac>
    33c8:	ldr	r3, [pc, #180]	; 3484 <cd_float_init+0x184>
    33cc:	bl	e64 <register_sub_element>
    33d0:	ldr	r0, [r4]
    33d4:	mov	r1, #7
    33d8:	ldr	r2, [pc, #208]	; 34b0 <cd_float_init+0x1b0>
    33dc:	ldr	r3, [pc, #188]	; 34a0 <cd_float_init+0x1a0>
    33e0:	bl	e64 <register_sub_element>
    33e4:	ldr	r0, [r4]
    33e8:	mov	r1, #8
    33ec:	ldr	r2, [pc, #188]	; 34b0 <cd_float_init+0x1b0>
    33f0:	ldr	r3, [pc, #172]	; 34a4 <cd_float_init+0x1a4>
    33f4:	bl	e64 <register_sub_element>
    33f8:	ldr	r0, [r4]
    33fc:	mov	r1, #21
    3400:	ldr	r2, [pc, #148]	; 349c <cd_float_init+0x19c>
    3404:	ldr	r3, [pc, #100]	; 3470 <cd_float_init+0x170>
    3408:	bl	e64 <register_sub_element>
    340c:	ldr	r0, [r4]
    3410:	mov	r1, #22
    3414:	ldr	r2, [pc, #124]	; 3498 <cd_float_init+0x198>
    3418:	ldr	r3, [pc, #108]	; 348c <cd_float_init+0x18c>
    341c:	bl	e64 <register_sub_element>
    3420:	ldr	r0, [r4]
    3424:	mov	r1, #11
    3428:	ldr	r2, [pc, #76]	; 347c <cd_float_init+0x17c>
    342c:	ldr	r3, [pc, #84]	; 3488 <cd_float_init+0x188>
    3430:	bl	e64 <register_sub_element>
    3434:	ldr	r0, [r4]
    3438:	mov	r1, #4
    343c:	ldr	r2, [pc, #100]	; 34a8 <cd_float_init+0x1a8>
    3440:	ldr	r3, [pc, #44]	; 3474 <cd_float_init+0x174>
    3444:	bl	e64 <register_sub_element>
    3448:	ldr	ip, [r4]
    344c:	ldr	r0, [pc, #64]	; 3494 <cd_float_init+0x194>
    3450:	str	r0, [ip, #36]	; 0x24
    3454:	mov	r0, #0
    3458:	ldr	r4, [sp, #8]
    345c:	ldr	r5, [sp, #12]
    3460:	ldr	lr, [sp, #4]
    3464:	add	sp, sp, #16
    3468:	bx	lr
	...

000034b4 <cd_integer_set_unit>:
    34b4:	mov	ip, sp
    34b8:	sub	sp, sp, #8
    34bc:	str	ip, [sp]
    34c0:	str	lr, [sp, #4]
    34c4:	mov	r1, r0
    34c8:	ldr	r2, [r1]
    34cc:	ldr	r2, [r2, #12]
    34d0:	cmp	r2, #0
    34d4:	bne	34f0 <cd_integer_set_unit+0x3c>
    34d8:	ldr	r0, [r1]
    34dc:	ldr	r0, [r0, #396]	; 0x18c
    34e0:	ldr	r0, [r0, #8]
    34e4:	ldr	r1, [pc, #40]	; 3514 <cd_integer_set_unit+0x60>
    34e8:	bl	0 <coda_type_number_set_unit>
    34ec:	b	3508 <cd_integer_set_unit+0x54>
    34f0:	ldr	r3, [r1]
    34f4:	ldr	r2, [r3, #396]	; 0x18c
    34f8:	ldr	r0, [r2, #8]
    34fc:	ldr	r1, [r1]
    3500:	ldr	r1, [r1, #12]
    3504:	bl	0 <coda_type_number_set_unit>
    3508:	ldr	lr, [sp, #4]
    350c:	add	sp, sp, #8
    3510:	bx	lr
    3514:	.word	0x00002067

00003518 <cd_integer_set_read_type>:
    3518:	mov	ip, sp
    351c:	sub	sp, sp, #8
    3520:	str	ip, [sp]
    3524:	str	lr, [sp, #4]
    3528:	mov	r1, r0
    352c:	ldr	r2, [r1]
    3530:	ldr	r2, [r2, #396]	; 0x18c
    3534:	ldr	r0, [r2, #8]
    3538:	ldr	ip, [r1]
    353c:	ldr	r1, [ip, #16]
    3540:	bl	0 <coda_type_set_read_type>
    3544:	ldr	lr, [sp, #4]
    3548:	add	sp, sp, #8
    354c:	bx	lr

00003550 <cd_integer_set_conversion>:
    3550:	mov	ip, sp
    3554:	sub	sp, sp, #16
    3558:	str	ip, [sp]
    355c:	str	lr, [sp, #4]
    3560:	str	r4, [sp, #8]
    3564:	mov	r4, r0
    3568:	ldr	r0, [r4]
    356c:	ldr	r2, [r0, #396]	; 0x18c
    3570:	ldr	r0, [r2, #8]
    3574:	ldr	r1, [r4]
    3578:	ldr	r1, [r1, #8]
    357c:	bl	0 <coda_type_number_set_conversion>
    3580:	cmp	r0, #0
    3584:	beq	3590 <cd_integer_set_conversion+0x40>
    3588:	mvn	r0, #0
    358c:	b	35a0 <cd_integer_set_conversion+0x50>
    3590:	ldr	r1, [r4]
    3594:	mov	r3, #0
    3598:	str	r3, [r1, #8]
    359c:	mov	r0, #0
    35a0:	ldr	r4, [sp, #8]
    35a4:	ldr	lr, [sp, #4]
    35a8:	add	sp, sp, #16
    35ac:	bx	lr

000035b0 <cd_integer_set_little_endian>:
    35b0:	mov	ip, sp
    35b4:	sub	sp, sp, #8
    35b8:	str	ip, [sp]
    35bc:	str	lr, [sp, #4]
    35c0:	ldr	r0, [r0]
    35c4:	ldr	r0, [r0, #396]	; 0x18c
    35c8:	ldr	r0, [r0, #8]
    35cc:	mov	r1, #1
    35d0:	bl	0 <coda_type_number_set_endianness>
    35d4:	ldr	lr, [sp, #4]
    35d8:	add	sp, sp, #8
    35dc:	bx	lr

000035e0 <cd_integer_add_mapping>:
    35e0:	mov	ip, sp
    35e4:	sub	sp, sp, #16
    35e8:	str	ip, [sp]
    35ec:	str	lr, [sp, #4]
    35f0:	str	r4, [sp, #8]
    35f4:	mov	r4, r0
    35f8:	ldr	r0, [r4]
    35fc:	ldr	r2, [r0, #396]	; 0x18c
    3600:	ldr	r0, [r2, #8]
    3604:	ldr	r1, [r4]
    3608:	ldr	r1, [r1, #8]
    360c:	bl	0 <coda_type_number_add_ascii_integer_mapping>
    3610:	cmp	r0, #0
    3614:	beq	3620 <cd_integer_add_mapping+0x40>
    3618:	mvn	r0, #0
    361c:	b	3630 <cd_integer_add_mapping+0x50>
    3620:	ldr	r1, [r4]
    3624:	mov	r3, #0
    3628:	str	r3, [r1, #8]
    362c:	mov	r0, #0
    3630:	ldr	r4, [sp, #8]
    3634:	ldr	lr, [sp, #4]
    3638:	add	sp, sp, #16
    363c:	bx	lr

00003640 <cd_integer_finalise>:
    3640:	mov	ip, sp
    3644:	sub	sp, sp, #8
    3648:	str	ip, [sp]
    364c:	str	lr, [sp, #4]
    3650:	ldr	r0, [r0]
    3654:	ldr	r0, [r0, #8]
    3658:	bl	0 <coda_type_number_validate>
    365c:	ldr	lr, [sp, #4]
    3660:	add	sp, sp, #8
    3664:	bx	lr

00003668 <cd_integer_init>:
    3668:	mov	ip, sp
    366c:	sub	sp, sp, #16
    3670:	str	ip, [sp]
    3674:	str	lr, [sp, #4]
    3678:	str	r4, [sp, #8]
    367c:	str	r5, [sp, #12]
    3680:	mov	r5, r1
    3684:	mov	r4, r0
    3688:	mov	r1, r5
    368c:	mov	r0, r4
    3690:	bl	b6c <handle_format_attribute_for_type>
    3694:	cmp	r0, #0
    3698:	beq	36a4 <cd_integer_init+0x3c>
    369c:	mvn	r0, #0
    36a0:	b	37c0 <cd_integer_init+0x158>
    36a4:	ldr	r2, [r4]
    36a8:	ldr	r3, [pc, #312]	; 37e8 <cd_integer_init+0x180>
    36ac:	str	r3, [r2, #40]	; 0x28
    36b0:	ldr	r3, [r4]
    36b4:	ldr	r0, [r3, #44]	; 0x2c
    36b8:	mov	r1, #2
    36bc:	bl	0 <coda_type_number_new>
    36c0:	ldr	r2, [r4]
    36c4:	str	r0, [r2, #8]
    36c8:	ldr	ip, [r4]
    36cc:	ldr	ip, [ip, #8]
    36d0:	cmp	ip, #0
    36d4:	bne	36e0 <cd_integer_init+0x78>
    36d8:	mvn	r0, #0
    36dc:	b	37c0 <cd_integer_init+0x158>
    36e0:	mov	r1, r5
    36e4:	mov	r0, r4
    36e8:	bl	a78 <handle_name_attribute_for_type>
    36ec:	cmp	r0, #0
    36f0:	beq	36fc <cd_integer_init+0x94>
    36f4:	mvn	r0, #0
    36f8:	b	37c0 <cd_integer_init+0x158>
    36fc:	ldr	r0, [r4]
    3700:	mov	r1, #11
    3704:	ldr	r2, [pc, #216]	; 37e4 <cd_integer_init+0x17c>
    3708:	ldr	r3, [pc, #228]	; 37f4 <cd_integer_init+0x18c>
    370c:	bl	e64 <register_sub_element>
    3710:	ldr	r0, [r4]
    3714:	mov	r1, #41	; 0x29
    3718:	ldr	r2, [pc, #196]	; 37e4 <cd_integer_init+0x17c>
    371c:	ldr	r3, [pc, #240]	; 3814 <cd_integer_init+0x1ac>
    3720:	bl	e64 <register_sub_element>
    3724:	ldr	r0, [r4]
    3728:	mov	r1, #8
    372c:	ldr	r2, [pc, #228]	; 3818 <cd_integer_init+0x1b0>
    3730:	ldr	r3, [pc, #208]	; 3808 <cd_integer_init+0x1a0>
    3734:	bl	e64 <register_sub_element>
    3738:	ldr	r0, [r4]
    373c:	mov	r1, #7
    3740:	ldr	r2, [pc, #208]	; 3818 <cd_integer_init+0x1b0>
    3744:	ldr	r3, [pc, #184]	; 3804 <cd_integer_init+0x19c>
    3748:	bl	e64 <register_sub_element>
    374c:	ldr	r0, [r4]
    3750:	mov	r1, #21
    3754:	ldr	r2, [pc, #160]	; 37fc <cd_integer_init+0x194>
    3758:	ldr	r3, [pc, #160]	; 3800 <cd_integer_init+0x198>
    375c:	bl	e64 <register_sub_element>
    3760:	ldr	r0, [r4]
    3764:	mov	r1, #28
    3768:	ldr	r2, [pc, #100]	; 37d4 <cd_integer_init+0x16c>
    376c:	ldr	r3, [pc, #108]	; 37e0 <cd_integer_init+0x178>
    3770:	bl	e64 <register_sub_element>
    3774:	ldr	r0, [r4]
    3778:	mov	r1, #10
    377c:	ldr	r2, [pc, #140]	; 3810 <cd_integer_init+0x1a8>
    3780:	ldr	r3, [pc, #100]	; 37ec <cd_integer_init+0x184>
    3784:	bl	e64 <register_sub_element>
    3788:	ldr	r0, [r4]
    378c:	mov	r1, #22
    3790:	ldr	r2, [pc, #96]	; 37f8 <cd_integer_init+0x190>
    3794:	ldr	r3, [pc, #84]	; 37f0 <cd_integer_init+0x188>
    3798:	bl	e64 <register_sub_element>
    379c:	ldr	r0, [r4]
    37a0:	mov	r1, #4
    37a4:	ldr	r2, [pc, #96]	; 380c <cd_integer_init+0x1a4>
    37a8:	ldr	r3, [pc, #40]	; 37d8 <cd_integer_init+0x170>
    37ac:	bl	e64 <register_sub_element>
    37b0:	ldr	ip, [r4]
    37b4:	ldr	r0, [pc, #32]	; 37dc <cd_integer_init+0x174>
    37b8:	str	r0, [ip, #36]	; 0x24
    37bc:	mov	r0, #0
    37c0:	ldr	r4, [sp, #8]
    37c4:	ldr	r5, [sp, #12]
    37c8:	ldr	lr, [sp, #4]
    37cc:	add	sp, sp, #16
    37d0:	bx	lr
	...

0000381c <cd_named_type_init>:
    381c:	mov	ip, sp
    3820:	sub	sp, sp, #24
    3824:	str	ip, [sp]
    3828:	str	lr, [sp, #4]
    382c:	str	r4, [sp, #8]
    3830:	str	r5, [sp, #12]
    3834:	mov	r4, r0
    3838:	mov	r0, r1
    383c:	ldr	r1, [pc, #172]	; 38f0 <cd_named_type_init+0xd4>
    3840:	ldr	r2, [r4]
    3844:	ldr	r2, [r2]
    3848:	bl	a00 <get_mandatory_attribute_value>
    384c:	mov	r5, r0
    3850:	cmp	r5, #0
    3854:	bne	3860 <cd_named_type_init+0x44>
    3858:	mvn	r0, #0
    385c:	b	38d8 <cd_named_type_init+0xbc>
    3860:	ldr	r0, [r4]
    3864:	ldr	r3, [pc, #136]	; 38f4 <cd_named_type_init+0xd8>
    3868:	str	r3, [r0, #40]	; 0x28
    386c:	ldr	r1, [r4, #24]
    3870:	cmp	r1, #0
    3874:	bne	388c <cd_named_type_init+0x70>
    3878:	ldr	r0, [pc, #124]	; 38fc <cd_named_type_init+0xe0>
    387c:	ldr	r1, [pc, #104]	; 38ec <cd_named_type_init+0xd0>
    3880:	movw	r2, #1889	; 0x761
    3884:	ldr	r3, [pc, #108]	; 38f8 <cd_named_type_init+0xdc>
    3888:	bl	0 <__assert_fail>
    388c:	add	r2, sp, #16
    3890:	mov	r1, r5
    3894:	mov	r0, r4
    3898:	bl	d4c <get_named_type>
    389c:	cmp	r0, #0
    38a0:	beq	38ac <cd_named_type_init+0x90>
    38a4:	mvn	r0, #0
    38a8:	b	38d8 <cd_named_type_init+0xbc>
    38ac:	ldr	r0, [r4]
    38b0:	ldr	r1, [sp, #16]
    38b4:	ldr	r2, [r1]
    38b8:	str	r2, [r0, #44]	; 0x2c
    38bc:	ldr	r1, [r4]
    38c0:	mov	ip, #1
    38c4:	str	ip, [r1, #48]	; 0x30
    38c8:	ldr	r3, [r4]
    38cc:	ldr	ip, [sp, #16]
    38d0:	str	ip, [r3, #8]
    38d4:	mov	r0, #0
    38d8:	ldr	r4, [sp, #8]
    38dc:	ldr	r5, [sp, #12]
    38e0:	ldr	lr, [sp, #4]
    38e4:	add	sp, sp, #24
    38e8:	bx	lr
    38ec:	.word	0x00001939
    38f0:	.word	0x00000c10
    38f4:	.word	0x00000000
    38f8:	.word	0x00002120
    38fc:	.word	0x0000199e

00003900 <cd_native_type_finalise>:
    3900:	mov	ip, sp
    3904:	sub	sp, sp, #16
    3908:	str	ip, [sp]
    390c:	str	lr, [sp, #4]
    3910:	str	r4, [sp, #8]
    3914:	mov	r4, r0
    3918:	ldr	ip, [r4]
    391c:	ldr	r0, [ip, #12]
    3920:	cmp	r0, #0
    3924:	bne	3940 <cd_native_type_finalise+0x40>
    3928:	movw	r0, #65136	; 0xfe70
    392c:	movt	r0, #65535	; 0xffff
    3930:	ldr	r1, [pc, #684]	; 3be4 <cd_native_type_finalise+0x2e4>
    3934:	bl	0 <coda_set_error>
    3938:	mvn	r0, #0
    393c:	b	3bc8 <cd_native_type_finalise+0x2c8>
    3940:	ldr	r3, [r4]
    3944:	ldr	r0, [r3, #12]
    3948:	ldr	r1, [pc, #700]	; 3c0c <cd_native_type_finalise+0x30c>
    394c:	bl	0 <strcmp>
    3950:	cmp	r0, #0
    3954:	beq	3bb0 <cd_native_type_finalise+0x2b0>
    3958:	ldr	r1, [r4]
    395c:	ldr	r0, [r1, #12]
    3960:	ldr	r1, [pc, #652]	; 3bf4 <cd_native_type_finalise+0x2f4>
    3964:	bl	0 <strcmp>
    3968:	cmp	r0, #0
    396c:	beq	3b98 <cd_native_type_finalise+0x298>
    3970:	ldr	r2, [r4]
    3974:	ldr	r0, [r2, #12]
    3978:	ldr	r1, [pc, #616]	; 3be8 <cd_native_type_finalise+0x2e8>
    397c:	bl	0 <strcmp>
    3980:	cmp	r0, #0
    3984:	beq	3b80 <cd_native_type_finalise+0x280>
    3988:	ldr	ip, [r4]
    398c:	ldr	r0, [ip, #12]
    3990:	ldr	r1, [pc, #600]	; 3bf0 <cd_native_type_finalise+0x2f0>
    3994:	bl	0 <strcmp>
    3998:	cmp	r0, #0
    399c:	beq	3b68 <cd_native_type_finalise+0x268>
    39a0:	ldr	ip, [r4]
    39a4:	ldr	r0, [ip, #12]
    39a8:	ldr	r1, [pc, #560]	; 3be0 <cd_native_type_finalise+0x2e0>
    39ac:	bl	0 <strcmp>
    39b0:	cmp	r0, #0
    39b4:	beq	3b50 <cd_native_type_finalise+0x250>
    39b8:	ldr	ip, [r4]
    39bc:	ldr	r0, [ip, #12]
    39c0:	ldr	r1, [pc, #560]	; 3bf8 <cd_native_type_finalise+0x2f8>
    39c4:	bl	0 <strcmp>
    39c8:	cmp	r0, #0
    39cc:	beq	3b38 <cd_native_type_finalise+0x238>
    39d0:	ldr	r1, [r4]
    39d4:	ldr	r0, [r1, #12]
    39d8:	ldr	r1, [pc, #524]	; 3bec <cd_native_type_finalise+0x2ec>
    39dc:	bl	0 <strcmp>
    39e0:	cmp	r0, #0
    39e4:	beq	3b20 <cd_native_type_finalise+0x220>
    39e8:	ldr	r2, [r4]
    39ec:	ldr	r0, [r2, #12]
    39f0:	ldr	r1, [pc, #528]	; 3c08 <cd_native_type_finalise+0x308>
    39f4:	bl	0 <strcmp>
    39f8:	cmp	r0, #0
    39fc:	beq	3b08 <cd_native_type_finalise+0x208>
    3a00:	ldr	ip, [r4]
    3a04:	ldr	r0, [ip, #12]
    3a08:	ldr	r1, [pc, #460]	; 3bdc <cd_native_type_finalise+0x2dc>
    3a0c:	bl	0 <strcmp>
    3a10:	cmp	r0, #0
    3a14:	beq	3af0 <cd_native_type_finalise+0x1f0>
    3a18:	ldr	r0, [r4]
    3a1c:	ldr	r0, [r0, #12]
    3a20:	ldr	r1, [pc, #468]	; 3bfc <cd_native_type_finalise+0x2fc>
    3a24:	bl	0 <strcmp>
    3a28:	cmp	r0, #0
    3a2c:	beq	3ad8 <cd_native_type_finalise+0x1d8>
    3a30:	ldr	r0, [r4]
    3a34:	ldr	r0, [r0, #12]
    3a38:	ldr	r1, [pc, #452]	; 3c04 <cd_native_type_finalise+0x304>
    3a3c:	bl	0 <strcmp>
    3a40:	cmp	r0, #0
    3a44:	beq	3ac0 <cd_native_type_finalise+0x1c0>
    3a48:	ldr	r1, [r4]
    3a4c:	ldr	r0, [r1, #12]
    3a50:	ldr	r1, [pc, #384]	; 3bd8 <cd_native_type_finalise+0x2d8>
    3a54:	bl	0 <strcmp>
    3a58:	cmp	r0, #0
    3a5c:	beq	3aa8 <cd_native_type_finalise+0x1a8>
    3a60:	ldr	ip, [r4]
    3a64:	ldr	r0, [ip, #12]
    3a68:	ldr	r1, [pc, #400]	; 3c00 <cd_native_type_finalise+0x300>
    3a6c:	bl	0 <strcmp>
    3a70:	cmp	r0, #0
    3a74:	beq	3a90 <cd_native_type_finalise+0x190>
    3a78:	movw	r0, #65136	; 0xfe70
    3a7c:	movt	r0, #65535	; 0xffff
    3a80:	ldr	r1, [pc, #348]	; 3be4 <cd_native_type_finalise+0x2e4>
    3a84:	bl	0 <coda_set_error>
    3a88:	mvn	r0, #0
    3a8c:	b	3bc8 <cd_native_type_finalise+0x2c8>
    3a90:	ldr	r2, [r4]
    3a94:	mov	r1, #0
    3a98:	mov	r0, #12
    3a9c:	str	r0, [r2, #16]
    3aa0:	str	r1, [r2, #20]
    3aa4:	b	3bc4 <cd_native_type_finalise+0x2c4>
    3aa8:	ldr	ip, [r4]
    3aac:	mov	r3, #0
    3ab0:	mov	r2, #11
    3ab4:	str	r2, [ip, #16]
    3ab8:	str	r3, [ip, #20]
    3abc:	b	3bc4 <cd_native_type_finalise+0x2c4>
    3ac0:	ldr	r2, [r4]
    3ac4:	mov	r1, #0
    3ac8:	mov	r0, #10
    3acc:	str	r0, [r2, #16]
    3ad0:	str	r1, [r2, #20]
    3ad4:	b	3bc4 <cd_native_type_finalise+0x2c4>
    3ad8:	ldr	r2, [r4]
    3adc:	mov	r0, #0
    3ae0:	mov	ip, #9
    3ae4:	str	ip, [r2, #16]
    3ae8:	str	r0, [r2, #20]
    3aec:	b	3bc4 <cd_native_type_finalise+0x2c4>
    3af0:	ldr	r3, [r4]
    3af4:	mov	r2, #0
    3af8:	mov	r1, #8
    3afc:	str	r1, [r3, #16]
    3b00:	str	r2, [r3, #20]
    3b04:	b	3bc4 <cd_native_type_finalise+0x2c4>
    3b08:	ldr	r1, [r4]
    3b0c:	mov	r0, #0
    3b10:	mov	ip, #7
    3b14:	str	ip, [r1, #16]
    3b18:	str	r0, [r1, #20]
    3b1c:	b	3bc4 <cd_native_type_finalise+0x2c4>
    3b20:	ldr	r2, [r4]
    3b24:	mov	ip, #0
    3b28:	mov	r3, #5
    3b2c:	str	r3, [r2, #16]
    3b30:	str	ip, [r2, #20]
    3b34:	b	3bc4 <cd_native_type_finalise+0x2c4>
    3b38:	ldr	r0, [r4]
    3b3c:	mov	ip, #0
    3b40:	mov	r3, #3
    3b44:	str	r3, [r0, #16]
    3b48:	str	ip, [r0, #20]
    3b4c:	b	3bc4 <cd_native_type_finalise+0x2c4>
    3b50:	ldr	ip, [r4]
    3b54:	mov	r3, #0
    3b58:	mov	r2, #1
    3b5c:	str	r2, [ip, #16]
    3b60:	str	r3, [ip, #20]
    3b64:	b	3bc4 <cd_native_type_finalise+0x2c4>
    3b68:	ldr	r2, [r4]
    3b6c:	mov	r1, #0
    3b70:	mov	r0, #6
    3b74:	str	r0, [r2, #16]
    3b78:	str	r1, [r2, #20]
    3b7c:	b	3bc4 <cd_native_type_finalise+0x2c4>
    3b80:	ldr	r0, [r4]
    3b84:	mov	r3, #0
    3b88:	mov	r2, #4
    3b8c:	str	r2, [r0, #16]
    3b90:	str	r3, [r0, #20]
    3b94:	b	3bc4 <cd_native_type_finalise+0x2c4>
    3b98:	ldr	r3, [r4]
    3b9c:	mov	r2, #0
    3ba0:	mov	r1, #2
    3ba4:	str	r1, [r3, #16]
    3ba8:	str	r2, [r3, #20]
    3bac:	b	3bc4 <cd_native_type_finalise+0x2c4>
    3bb0:	ldr	r2, [r4]
    3bb4:	mov	r0, #0
    3bb8:	mov	ip, #0
    3bbc:	str	ip, [r2, #16]
    3bc0:	str	r0, [r2, #20]
    3bc4:	mov	r0, #0
    3bc8:	ldr	r4, [sp, #8]
    3bcc:	ldr	lr, [sp, #4]
    3bd0:	add	sp, sp, #16
    3bd4:	bx	lr
    3bd8:	.word	0x00000a34
    3bdc:	.word	0x00000a2e
    3be0:	.word	0x00001e1d
    3be4:	.word	0x00000483
    3be8:	.word	0x00001651
    3bec:	.word	0x000011c1
    3bf0:	.word	0x00001e17
    3bf4:	.word	0x00000d30
    3bf8:	.word	0x00001a9f
    3bfc:	.word	0x00001b3e
    3c00:	.word	0x00000a28
    3c04:	.word	0x00001c3d
    3c08:	.word	0x00001e2f
    3c0c:	.word	0x00001a9a

00003c10 <cd_native_type_init>:
    3c10:	mov	ip, sp
    3c14:	sub	sp, sp, #8
    3c18:	str	ip, [sp]
    3c1c:	str	lr, [sp, #4]
    3c20:	ldr	r3, [r0]
    3c24:	mov	r2, #1
    3c28:	str	r2, [r3, #32]
    3c2c:	ldr	r1, [r0]
    3c30:	ldr	r0, [pc, #16]	; 3c48 <cd_native_type_init+0x38>
    3c34:	str	r0, [r1, #36]	; 0x24
    3c38:	mov	r0, #0
    3c3c:	ldr	lr, [sp, #4]
    3c40:	add	sp, sp, #8
    3c44:	bx	lr
    3c48:	.word	0x00000000

00003c4c <cd_mapping_init>:
    3c4c:	mov	ip, sp
    3c50:	sub	sp, sp, #40	; 0x28
    3c54:	str	ip, [sp]
    3c58:	str	lr, [sp, #4]
    3c5c:	str	r4, [sp, #8]
    3c60:	str	r5, [sp, #12]
    3c64:	str	r6, [sp, #16]
    3c68:	mov	r4, r1
    3c6c:	mov	r6, r0
    3c70:	ldr	r1, [pc, #580]	; 3ebc <cd_mapping_init+0x270>
    3c74:	ldr	ip, [r6]
    3c78:	ldr	r2, [ip]
    3c7c:	mov	r0, r4
    3c80:	bl	a00 <get_mandatory_attribute_value>
    3c84:	mov	r5, r0
    3c88:	cmp	r5, #0
    3c8c:	bne	3c98 <cd_mapping_init+0x4c>
    3c90:	mvn	r0, #0
    3c94:	b	3ea0 <cd_mapping_init+0x254>
    3c98:	ldr	r1, [pc, #544]	; 3ec0 <cd_mapping_init+0x274>
    3c9c:	ldr	r0, [r6]
    3ca0:	ldr	r2, [r0]
    3ca4:	mov	r0, r4
    3ca8:	bl	a00 <get_mandatory_attribute_value>
    3cac:	mov	r4, r0
    3cb0:	cmp	r4, #0
    3cb4:	bne	3cc0 <cd_mapping_init+0x74>
    3cb8:	mvn	r0, #0
    3cbc:	b	3ea0 <cd_mapping_init+0x254>
    3cc0:	ldr	r1, [r6]
    3cc4:	ldr	r0, [r1, #396]	; 0x18c
    3cc8:	ldr	r3, [r0]
    3ccc:	cmp	r3, #20
    3cd0:	beq	3e20 <cd_mapping_init+0x1d4>
    3cd4:	ldr	r1, [r6]
    3cd8:	ldr	r3, [r1, #396]	; 0x18c
    3cdc:	ldr	r1, [r3]
    3ce0:	cmp	r1, #17
    3ce4:	beq	3d04 <cd_mapping_init+0xb8>
    3ce8:	ldr	r2, [r6]
    3cec:	ldr	r2, [r2, #396]	; 0x18c
    3cf0:	ldr	r1, [r2]
    3cf4:	cmp	r1, #38	; 0x26
    3cf8:	moveq	r3, #1
    3cfc:	movne	r3, #0
    3d00:	b	3d08 <cd_mapping_init+0xbc>
    3d04:	mov	r3, #1
    3d08:	cmp	r3, #0
    3d0c:	beq	3e00 <cd_mapping_init+0x1b4>
    3d10:	ldr	r1, [pc, #456]	; 3ee0 <cd_mapping_init+0x294>
    3d14:	mov	r0, r4
    3d18:	bl	0 <strcasecmp>
    3d1c:	cmp	r0, #0
    3d20:	beq	3dc0 <cd_mapping_init+0x174>
    3d24:	ldr	r1, [pc, #428]	; 3ed8 <cd_mapping_init+0x28c>
    3d28:	mov	r0, r4
    3d2c:	bl	0 <strcasecmp>
    3d30:	cmp	r0, #0
    3d34:	beq	3d54 <cd_mapping_init+0x108>
    3d38:	ldr	r1, [pc, #420]	; 3ee4 <cd_mapping_init+0x298>
    3d3c:	mov	r0, r4
    3d40:	bl	0 <strcasecmp>
    3d44:	cmp	r0, #0
    3d48:	moveq	ip, #1
    3d4c:	movne	ip, #0
    3d50:	b	3d58 <cd_mapping_init+0x10c>
    3d54:	mov	ip, #1
    3d58:	cmp	ip, #0
    3d5c:	bne	3db4 <cd_mapping_init+0x168>
    3d60:	ldr	r1, [pc, #364]	; 3ed4 <cd_mapping_init+0x288>
    3d64:	mov	r0, r4
    3d68:	bl	0 <strcasecmp>
    3d6c:	cmp	r0, #0
    3d70:	beq	3da8 <cd_mapping_init+0x15c>
    3d74:	ldr	r1, [pc, #336]	; 3ecc <cd_mapping_init+0x280>
    3d78:	add	r2, sp, #32
    3d7c:	mov	r0, r4
    3d80:	bl	0 <sscanf>
    3d84:	cmp	r0, #1
    3d88:	beq	3dc8 <cd_mapping_init+0x17c>
    3d8c:	movw	r0, #65136	; 0xfe70
    3d90:	movt	r0, #65535	; 0xffff
    3d94:	ldr	r1, [pc, #296]	; 3ec4 <cd_mapping_init+0x278>
    3d98:	mov	r2, r4
    3d9c:	bl	0 <coda_set_error>
    3da0:	mvn	r0, #0
    3da4:	b	3ea0 <cd_mapping_init+0x254>
    3da8:	bl	0 <coda_MinInf>
    3dac:	vstr	d0, [sp, #32]
    3db0:	b	3dc8 <cd_mapping_init+0x17c>
    3db4:	bl	0 <coda_PlusInf>
    3db8:	vstr	d0, [sp, #32]
    3dbc:	b	3dc8 <cd_mapping_init+0x17c>
    3dc0:	bl	0 <coda_NaN>
    3dc4:	vstr	d0, [sp, #32]
    3dc8:	ldr	r1, [r6]
    3dcc:	ldr	ip, [pc, #252]	; 3ed0 <cd_mapping_init+0x284>
    3dd0:	str	ip, [r1, #40]	; 0x28
    3dd4:	vldr	d0, [sp, #32]
    3dd8:	mov	r0, r5
    3ddc:	bl	0 <coda_ascii_float_mapping_new>
    3de0:	ldr	r2, [r6]
    3de4:	str	r0, [r2, #8]
    3de8:	ldr	r0, [r6]
    3dec:	ldr	r0, [r0, #8]
    3df0:	cmp	r0, #0
    3df4:	bne	3e9c <cd_mapping_init+0x250>
    3df8:	mvn	r0, #0
    3dfc:	b	3ea0 <cd_mapping_init+0x254>
    3e00:	ldr	r0, [pc, #192]	; 3ec8 <cd_mapping_init+0x27c>
    3e04:	ldr	r1, [pc, #172]	; 3eb8 <cd_mapping_init+0x26c>
    3e08:	movw	r2, #2040	; 0x7f8
    3e0c:	ldr	r3, [pc, #212]	; 3ee8 <cd_mapping_init+0x29c>
    3e10:	bl	0 <__assert_fail>
    3e14:	mov	r0, #1
    3e18:	bl	0 <exit>
    3e1c:	b	3e9c <cd_mapping_init+0x250>
    3e20:	mov	r0, r4
    3e24:	bl	0 <strlen>
    3e28:	mov	r1, r0
    3e2c:	add	r2, sp, #24
    3e30:	mov	r3, #0
    3e34:	mov	r0, r4
    3e38:	bl	0 <coda_ascii_parse_int64>
    3e3c:	cmp	r0, #0
    3e40:	bge	3e60 <cd_mapping_init+0x214>
    3e44:	movw	r0, #65136	; 0xfe70
    3e48:	movt	r0, #65535	; 0xffff
    3e4c:	ldr	r1, [pc, #152]	; 3eec <cd_mapping_init+0x2a0>
    3e50:	mov	r2, r4
    3e54:	bl	0 <coda_set_error>
    3e58:	mvn	r0, #0
    3e5c:	b	3ea0 <cd_mapping_init+0x254>
    3e60:	ldr	r2, [r6]
    3e64:	ldr	r3, [pc, #112]	; 3edc <cd_mapping_init+0x290>
    3e68:	str	r3, [r2, #40]	; 0x28
    3e6c:	ldr	r2, [sp, #24]
    3e70:	ldr	r3, [sp, #28]
    3e74:	mov	r0, r5
    3e78:	bl	0 <coda_ascii_integer_mapping_new>
    3e7c:	ldr	r3, [r6]
    3e80:	str	r0, [r3, #8]
    3e84:	ldr	r0, [r6]
    3e88:	ldr	r0, [r0, #8]
    3e8c:	cmp	r0, #0
    3e90:	bne	3e9c <cd_mapping_init+0x250>
    3e94:	mvn	r0, #0
    3e98:	b	3ea0 <cd_mapping_init+0x254>
    3e9c:	mov	r0, #0
    3ea0:	ldr	r4, [sp, #8]
    3ea4:	ldr	r5, [sp, #12]
    3ea8:	ldr	r6, [sp, #16]
    3eac:	ldr	lr, [sp, #4]
    3eb0:	add	sp, sp, #40	; 0x28
    3eb4:	bx	lr
    3eb8:	.word	0x00001939
    3ebc:	.word	0x00000a34
    3ec0:	.word	0x00001e23
    3ec4:	.word	0x00000135
    3ec8:	.word	0x00001cc5
    3ecc:	.word	0x0000174d
    3ed0:	.word	0x00000000
    3ed4:	.word	0x00000ee9
    3ed8:	.word	0x00000232
    3edc:	.word	0x00000000
    3ee0:	.word	0x00000c13
    3ee4:	.word	0x00001854
    3ee8:	.word	0x00002133
    3eec:	.word	0x000013c7

00003ef0 <cd_match_data_finalise>:
    3ef0:	mov	ip, sp
    3ef4:	sub	sp, sp, #72	; 0x48
    3ef8:	str	ip, [sp, #8]
    3efc:	str	lr, [sp, #12]
    3f00:	str	r4, [sp, #16]
    3f04:	str	r5, [sp, #20]
    3f08:	str	r6, [sp, #24]
    3f0c:	str	r7, [sp, #28]
    3f10:	str	r8, [sp, #32]
    3f14:	mov	r6, r0
    3f18:	ldr	r0, [r6]
    3f1c:	ldr	r5, [r0, #8]
    3f20:	ldr	r2, [r6]
    3f24:	ldr	r0, [r2, #12]
    3f28:	bl	388 <escaped_string_length>
    3f2c:	mov	r7, r0
    3f30:	cmp	r7, #0
    3f34:	bge	3f50 <cd_match_data_finalise+0x60>
    3f38:	movw	r0, #65136	; 0xfe70
    3f3c:	movt	r0, #65535	; 0xffff
    3f40:	ldr	r1, [pc, #1284]	; 444c <cd_match_data_finalise+0x55c>
    3f44:	bl	0 <coda_set_error>
    3f48:	mvn	r0, #0
    3f4c:	b	4424 <cd_match_data_finalise+0x534>
    3f50:	ldr	ip, [r5, #4]
    3f54:	cmp	ip, #0
    3f58:	beq	4138 <cd_match_data_finalise+0x248>
    3f5c:	ldr	ip, [r5, #4]
    3f60:	ldr	r1, [ip]
    3f64:	cmp	r1, #20
    3f68:	bne	4420 <cd_match_data_finalise+0x530>
    3f6c:	cmp	r7, #0
    3f70:	bne	3f8c <cd_match_data_finalise+0x9c>
    3f74:	movw	r0, #65136	; 0xfe70
    3f78:	movt	r0, #65535	; 0xffff
    3f7c:	ldr	r1, [pc, #1232]	; 4454 <cd_match_data_finalise+0x564>
    3f80:	bl	0 <coda_set_error>
    3f84:	mvn	r0, #0
    3f88:	b	4424 <cd_match_data_finalise+0x534>
    3f8c:	mov	r0, #38	; 0x26
    3f90:	mov	r1, #0
    3f94:	mov	r2, #0
    3f98:	mov	r3, #0
    3f9c:	mov	r8, #0
    3fa0:	mov	ip, #0
    3fa4:	str	ip, [sp, #4]
    3fa8:	str	r8, [sp]
    3fac:	bl	0 <coda_expression_new>
    3fb0:	mov	r4, r0
    3fb4:	cmp	r4, #0
    3fb8:	bne	3fc4 <cd_match_data_finalise+0xd4>
    3fbc:	mvn	r0, #0
    3fc0:	b	4424 <cd_match_data_finalise+0x534>
    3fc4:	asr	r1, r7, #31
    3fc8:	mov	r0, r7
    3fcc:	add	r2, sp, #40	; 0x28
    3fd0:	bl	0 <coda_str64>
    3fd4:	add	r0, sp, #40	; 0x28
    3fd8:	bl	0 <strdup>
    3fdc:	mov	r1, r0
    3fe0:	cmp	r1, #0
    3fe4:	bne	400c <cd_match_data_finalise+0x11c>
    3fe8:	mvn	r0, #0
    3fec:	ldr	r1, [pc, #1108]	; 4448 <cd_match_data_finalise+0x558>
    3ff0:	ldr	r2, [pc, #1100]	; 4444 <cd_match_data_finalise+0x554>
    3ff4:	movw	r3, #2184	; 0x888
    3ff8:	bl	0 <coda_set_error>
    3ffc:	mov	r0, r4
    4000:	bl	0 <coda_expression_delete>
    4004:	mvn	r0, #0
    4008:	b	4424 <cd_match_data_finalise+0x534>
    400c:	mov	r0, #20
    4010:	mov	r2, #0
    4014:	mov	r3, #0
    4018:	mov	ip, #0
    401c:	mov	r8, #0
    4020:	str	r8, [sp, #4]
    4024:	str	ip, [sp]
    4028:	bl	0 <coda_expression_new>
    402c:	cmp	r0, #0
    4030:	bne	4044 <cd_match_data_finalise+0x154>
    4034:	mov	r0, r4
    4038:	bl	0 <coda_expression_delete>
    403c:	mvn	r0, #0
    4040:	b	4424 <cd_match_data_finalise+0x534>
    4044:	mov	r2, #16
    4048:	mov	r1, #0
    404c:	ldr	r3, [r5, #4]
    4050:	mov	ip, #0
    4054:	str	ip, [sp, #4]
    4058:	str	r0, [sp]
    405c:	mov	r0, r2
    4060:	mov	r2, r4
    4064:	bl	0 <coda_expression_new>
    4068:	mov	r4, r0
    406c:	mov	r2, #0
    4070:	str	r2, [r5, #4]
    4074:	cmp	r4, #0
    4078:	bne	4084 <cd_match_data_finalise+0x194>
    407c:	mvn	r0, #0
    4080:	b	4424 <cd_match_data_finalise+0x534>
    4084:	ldr	r1, [r6]
    4088:	ldr	r0, [r1, #12]
    408c:	bl	0 <strdup>
    4090:	mov	r1, r0
    4094:	cmp	r1, #0
    4098:	bne	40c0 <cd_match_data_finalise+0x1d0>
    409c:	mvn	r0, #0
    40a0:	ldr	r1, [pc, #928]	; 4448 <cd_match_data_finalise+0x558>
    40a4:	ldr	r2, [pc, #920]	; 4444 <cd_match_data_finalise+0x554>
    40a8:	movw	r3, #2204	; 0x89c
    40ac:	bl	0 <coda_set_error>
    40b0:	mov	r0, r4
    40b4:	bl	0 <coda_expression_delete>
    40b8:	mvn	r0, #0
    40bc:	b	4424 <cd_match_data_finalise+0x534>
    40c0:	mov	r0, #22
    40c4:	mov	r2, #0
    40c8:	mov	r3, #0
    40cc:	mov	r6, #0
    40d0:	mov	r7, #0
    40d4:	str	r7, [sp, #4]
    40d8:	str	r6, [sp]
    40dc:	bl	0 <coda_expression_new>
    40e0:	cmp	r0, #0
    40e4:	bne	40f8 <cd_match_data_finalise+0x208>
    40e8:	mov	r0, r4
    40ec:	bl	0 <coda_expression_delete>
    40f0:	mvn	r0, #0
    40f4:	b	4424 <cd_match_data_finalise+0x534>
    40f8:	mov	r2, #25
    40fc:	mov	r1, #0
    4100:	mov	ip, #0
    4104:	mov	r3, #0
    4108:	str	r3, [sp, #4]
    410c:	str	ip, [sp]
    4110:	mov	r3, r0
    4114:	mov	r0, r2
    4118:	mov	r2, r4
    411c:	bl	0 <coda_expression_new>
    4120:	str	r0, [r5, #4]
    4124:	ldr	r0, [r5, #4]
    4128:	cmp	r0, #0
    412c:	bne	4420 <cd_match_data_finalise+0x530>
    4130:	mvn	r0, #0
    4134:	b	4424 <cd_match_data_finalise+0x534>
    4138:	ldr	r3, [r5]
    413c:	cmp	r3, #0
    4140:	bne	42d4 <cd_match_data_finalise+0x3e4>
    4144:	cmp	r7, #0
    4148:	bne	4164 <cd_match_data_finalise+0x274>
    414c:	movw	r0, #65136	; 0xfe70
    4150:	movt	r0, #65535	; 0xffff
    4154:	ldr	r1, [pc, #760]	; 4454 <cd_match_data_finalise+0x564>
    4158:	bl	0 <coda_set_error>
    415c:	mvn	r0, #0
    4160:	b	4424 <cd_match_data_finalise+0x534>
    4164:	mov	r0, #38	; 0x26
    4168:	mov	r1, #0
    416c:	mov	r2, #0
    4170:	mov	r3, #0
    4174:	mov	ip, #0
    4178:	mov	r4, #0
    417c:	str	r4, [sp, #4]
    4180:	str	ip, [sp]
    4184:	bl	0 <coda_expression_new>
    4188:	mov	r4, r0
    418c:	cmp	r4, #0
    4190:	bne	419c <cd_match_data_finalise+0x2ac>
    4194:	mvn	r0, #0
    4198:	b	4424 <cd_match_data_finalise+0x534>
    419c:	ldr	r0, [pc, #684]	; 4450 <cd_match_data_finalise+0x560>
    41a0:	bl	0 <strdup>
    41a4:	mov	r1, r0
    41a8:	mov	r0, #20
    41ac:	mov	r2, #0
    41b0:	mov	r3, #0
    41b4:	mov	ip, #0
    41b8:	mov	r8, #0
    41bc:	str	r8, [sp, #4]
    41c0:	str	ip, [sp]
    41c4:	bl	0 <coda_expression_new>
    41c8:	mov	r3, r0
    41cc:	cmp	r3, #0
    41d0:	bne	41e4 <cd_match_data_finalise+0x2f4>
    41d4:	mov	r0, r4
    41d8:	bl	0 <coda_expression_delete>
    41dc:	mvn	r0, #0
    41e0:	b	4424 <cd_match_data_finalise+0x534>
    41e4:	mov	r0, #16
    41e8:	mov	r1, #0
    41ec:	mov	r7, #0
    41f0:	mov	r2, #0
    41f4:	str	r2, [sp, #4]
    41f8:	str	r7, [sp]
    41fc:	mov	r2, r4
    4200:	bl	0 <coda_expression_new>
    4204:	mov	r4, r0
    4208:	cmp	r4, #0
    420c:	bne	4218 <cd_match_data_finalise+0x328>
    4210:	mvn	r0, #0
    4214:	b	4424 <cd_match_data_finalise+0x534>
    4218:	ldr	r1, [r6]
    421c:	ldr	r0, [r1, #12]
    4220:	bl	194 <regexp_match_string>
    4224:	mov	r1, r0
    4228:	cmp	r1, #0
    422c:	bne	4240 <cd_match_data_finalise+0x350>
    4230:	mov	r0, r4
    4234:	bl	0 <coda_expression_delete>
    4238:	mvn	r0, #0
    423c:	b	4424 <cd_match_data_finalise+0x534>
    4240:	mov	r0, #21
    4244:	mov	r2, #0
    4248:	mov	r3, #0
    424c:	mov	r7, #0
    4250:	mov	ip, #0
    4254:	str	ip, [sp, #4]
    4258:	str	r7, [sp]
    425c:	bl	0 <coda_expression_new>
    4260:	mov	r2, r0
    4264:	cmp	r2, #0
    4268:	bne	427c <cd_match_data_finalise+0x38c>
    426c:	mov	r0, r4
    4270:	bl	0 <coda_expression_delete>
    4274:	mvn	r0, #0
    4278:	b	4424 <cd_match_data_finalise+0x534>
    427c:	mov	r0, #71	; 0x47
    4280:	mov	r1, #0
    4284:	mov	r3, #0
    4288:	mov	r6, #0
    428c:	str	r6, [sp, #4]
    4290:	str	r3, [sp]
    4294:	mov	r3, r4
    4298:	bl	0 <coda_expression_new>
    429c:	mov	r4, r0
    42a0:	cmp	r4, #0
    42a4:	bne	42b0 <cd_match_data_finalise+0x3c0>
    42a8:	mvn	r0, #0
    42ac:	b	4424 <cd_match_data_finalise+0x534>
    42b0:	mov	r1, r4
    42b4:	mov	r0, r5
    42b8:	bl	0 <coda_detection_rule_entry_set_expression>
    42bc:	cmp	r0, #0
    42c0:	beq	4420 <cd_match_data_finalise+0x530>
    42c4:	mov	r0, r4
    42c8:	bl	0 <coda_expression_delete>
    42cc:	mvn	r0, #0
    42d0:	b	4424 <cd_match_data_finalise+0x534>
    42d4:	cmp	r7, #0
    42d8:	bne	42e4 <cd_match_data_finalise+0x3f4>
    42dc:	mov	r0, #0
    42e0:	b	4424 <cd_match_data_finalise+0x534>
    42e4:	mov	r0, #36	; 0x24
    42e8:	mov	r1, #0
    42ec:	mov	r2, #0
    42f0:	mov	r3, #0
    42f4:	mov	r4, #0
    42f8:	mov	ip, #0
    42fc:	str	ip, [sp, #4]
    4300:	str	r4, [sp]
    4304:	bl	0 <coda_expression_new>
    4308:	mov	r2, r0
    430c:	cmp	r2, #0
    4310:	bne	431c <cd_match_data_finalise+0x42c>
    4314:	mvn	r0, #0
    4318:	b	4424 <cd_match_data_finalise+0x534>
    431c:	mov	r0, #75	; 0x4b
    4320:	mov	r1, #0
    4324:	mov	r3, #0
    4328:	mov	r4, #0
    432c:	mov	r7, #0
    4330:	str	r7, [sp, #4]
    4334:	str	r4, [sp]
    4338:	bl	0 <coda_expression_new>
    433c:	mov	r4, r0
    4340:	cmp	r4, #0
    4344:	bne	4350 <cd_match_data_finalise+0x460>
    4348:	mvn	r0, #0
    434c:	b	4424 <cd_match_data_finalise+0x534>
    4350:	ldr	r2, [r6]
    4354:	ldr	r0, [r2, #12]
    4358:	bl	0 <strdup>
    435c:	mov	r1, r0
    4360:	cmp	r1, #0
    4364:	bne	438c <cd_match_data_finalise+0x49c>
    4368:	mvn	r0, #0
    436c:	ldr	r1, [pc, #212]	; 4448 <cd_match_data_finalise+0x558>
    4370:	ldr	r2, [pc, #204]	; 4444 <cd_match_data_finalise+0x554>
    4374:	movw	r3, #2090	; 0x82a
    4378:	bl	0 <coda_set_error>
    437c:	mov	r0, r4
    4380:	bl	0 <coda_expression_delete>
    4384:	mvn	r0, #0
    4388:	b	4424 <cd_match_data_finalise+0x534>
    438c:	mov	r0, #22
    4390:	mov	r2, #0
    4394:	mov	r3, #0
    4398:	mov	r6, #0
    439c:	mov	r7, #0
    43a0:	str	r7, [sp, #4]
    43a4:	str	r6, [sp]
    43a8:	bl	0 <coda_expression_new>
    43ac:	mov	r3, r0
    43b0:	cmp	r3, #0
    43b4:	bne	43c8 <cd_match_data_finalise+0x4d8>
    43b8:	mov	r0, r4
    43bc:	bl	0 <coda_expression_delete>
    43c0:	mvn	r0, #0
    43c4:	b	4424 <cd_match_data_finalise+0x534>
    43c8:	mov	r0, #25
    43cc:	mov	r1, #0
    43d0:	mov	r2, #0
    43d4:	mov	ip, #0
    43d8:	str	ip, [sp, #4]
    43dc:	str	r2, [sp]
    43e0:	mov	r2, r4
    43e4:	bl	0 <coda_expression_new>
    43e8:	mov	r4, r0
    43ec:	cmp	r4, #0
    43f0:	bne	43fc <cd_match_data_finalise+0x50c>
    43f4:	mvn	r0, #0
    43f8:	b	4424 <cd_match_data_finalise+0x534>
    43fc:	mov	r1, r4
    4400:	mov	r0, r5
    4404:	bl	0 <coda_detection_rule_entry_set_expression>
    4408:	cmp	r0, #0
    440c:	beq	4420 <cd_match_data_finalise+0x530>
    4410:	mov	r0, r4
    4414:	bl	0 <coda_expression_delete>
    4418:	mvn	r0, #0
    441c:	b	4424 <cd_match_data_finalise+0x534>
    4420:	mov	r0, #0
    4424:	ldr	r4, [sp, #16]
    4428:	ldr	r5, [sp, #20]
    442c:	ldr	r6, [sp, #24]
    4430:	ldr	r7, [sp, #28]
    4434:	ldr	r8, [sp, #32]
    4438:	ldr	lr, [sp, #12]
    443c:	add	sp, sp, #72	; 0x48
    4440:	bx	lr
    4444:	.word	0x00001939
    4448:	.word	0x00001c42
    444c:	.word	0x00000bc3
    4450:	.word	0x00002068
    4454:	.word	0x00001462

00004458 <add_detection_rule_entry_for_path>:
    4458:	mov	ip, sp
    445c:	sub	sp, sp, #72	; 0x48
    4460:	str	ip, [sp, #8]
    4464:	str	lr, [sp, #12]
    4468:	str	r4, [sp, #36]	; 0x24
    446c:	str	r5, [sp, #40]	; 0x28
    4470:	str	r6, [sp, #44]	; 0x2c
    4474:	str	r7, [sp, #48]	; 0x30
    4478:	str	r8, [sp, #52]	; 0x34
    447c:	str	r9, [sp, #56]	; 0x38
    4480:	str	sl, [sp, #60]	; 0x3c
    4484:	str	fp, [sp, #64]	; 0x40
    4488:	str	r2, [sp, #24]
    448c:	mov	r4, r1
    4490:	str	r0, [sp, #20]
    4494:	mov	r0, #1
    4498:	str	r0, [sp, #28]
    449c:	mov	r5, #0
    44a0:	mov	r8, #0
    44a4:	cmp	r4, #0
    44a8:	bne	44c0 <add_detection_rule_entry_for_path+0x68>
    44ac:	ldr	r0, [pc, #1320]	; 49dc <add_detection_rule_entry_for_path+0x584>
    44b0:	ldr	r1, [pc, #1292]	; 49c4 <add_detection_rule_entry_for_path+0x56c>
    44b4:	movw	r2, #2236	; 0x8bc
    44b8:	ldr	r3, [pc, #1292]	; 49cc <add_detection_rule_entry_for_path+0x574>
    44bc:	bl	0 <__assert_fail>
    44c0:	mov	ip, #0
    44c4:	ldr	r1, [sp, #24]
    44c8:	str	ip, [r1]
    44cc:	mov	r0, r4
    44d0:	bl	0 <strdup>
    44d4:	str	r0, [sp, #16]
    44d8:	ldr	ip, [sp, #16]
    44dc:	cmp	ip, #0
    44e0:	bne	4500 <add_detection_rule_entry_for_path+0xa8>
    44e4:	mvn	r0, #0
    44e8:	ldr	r1, [pc, #1240]	; 49c8 <add_detection_rule_entry_for_path+0x570>
    44ec:	ldr	r2, [pc, #1232]	; 49c4 <add_detection_rule_entry_for_path+0x56c>
    44f0:	movw	r3, #2245	; 0x8c5
    44f4:	bl	0 <coda_set_error>
    44f8:	mvn	r0, #0
    44fc:	b	4998 <add_detection_rule_entry_for_path+0x540>
    4500:	ldr	r7, [sp, #16]
    4504:	mov	r0, r4
    4508:	bl	0 <strlen>
    450c:	add	r0, r0, #6
    4510:	bl	0 <malloc>
    4514:	mov	r4, r0
    4518:	cmp	r4, #0
    451c:	bne	453c <add_detection_rule_entry_for_path+0xe4>
    4520:	mvn	r0, #0
    4524:	ldr	r1, [pc, #1180]	; 49c8 <add_detection_rule_entry_for_path+0x570>
    4528:	ldr	r2, [pc, #1172]	; 49c4 <add_detection_rule_entry_for_path+0x56c>
    452c:	movw	r3, #2257	; 0x8d1
    4530:	bl	0 <coda_set_error>
    4534:	mvn	r0, #0
    4538:	b	4998 <add_detection_rule_entry_for_path+0x540>
    453c:	mov	r2, #0
    4540:	strb	r2, [r4]
    4544:	mov	r6, r4
    4548:	ldrb	r1, [r7]
    454c:	cmp	r1, #47	; 0x2f
    4550:	bne	4568 <add_detection_rule_entry_for_path+0x110>
    4554:	ldrb	r2, [r7]
    4558:	and	ip, r2, #255	; 0xff
    455c:	strb	ip, [r6]
    4560:	add	r6, r6, #1
    4564:	add	r7, r7, #1
    4568:	ldrb	r1, [r7]
    456c:	cmp	r1, #64	; 0x40
    4570:	bne	458c <add_detection_rule_entry_for_path+0x134>
    4574:	mov	r8, #1
    4578:	ldrb	r0, [r7]
    457c:	and	r2, r0, #255	; 0xff
    4580:	strb	r2, [r6]
    4584:	add	r6, r6, #1
    4588:	add	r7, r7, #1
    458c:	cmp	r5, #0
    4590:	bne	4984 <add_detection_rule_entry_for_path+0x52c>
    4594:	str	r8, [sp, #32]
    4598:	ldr	r0, [sp, #28]
    459c:	cmp	r0, #0
    45a0:	bne	45cc <add_detection_rule_entry_for_path+0x174>
    45a4:	ldr	ip, [sp, #32]
    45a8:	cmp	ip, #0
    45ac:	bne	45b8 <add_detection_rule_entry_for_path+0x160>
    45b0:	mov	r2, #47	; 0x2f
    45b4:	b	45bc <add_detection_rule_entry_for_path+0x164>
    45b8:	mov	r2, #64	; 0x40
    45bc:	and	r1, r2, #255	; 0xff
    45c0:	strb	r1, [r6]
    45c4:	add	r6, r6, #1
    45c8:	b	45d4 <add_detection_rule_entry_for_path+0x17c>
    45cc:	mov	r3, #0
    45d0:	str	r3, [sp, #28]
    45d4:	mov	r9, #0
    45d8:	ldrb	ip, [r7]
    45dc:	cmp	ip, #123	; 0x7b
    45e0:	bne	4648 <add_detection_rule_entry_for_path+0x1f0>
    45e4:	add	r0, r7, #1
    45e8:	mov	r9, r0
    45ec:	ldrb	r3, [r0]
    45f0:	cmp	r3, #125	; 0x7d
    45f4:	beq	463c <add_detection_rule_entry_for_path+0x1e4>
    45f8:	ldrb	ip, [r0]
    45fc:	cmp	ip, #0
    4600:	bne	4634 <add_detection_rule_entry_for_path+0x1dc>
    4604:	mvn	r0, #99	; 0x63
    4608:	ldr	r1, [pc, #960]	; 49d0 <add_detection_rule_entry_for_path+0x578>
    460c:	ldr	r2, [sp, #20]
    4610:	ldr	r3, [r2, #8]
    4614:	ldr	r2, [r3, #8]
    4618:	bl	0 <coda_set_error>
    461c:	mov	r0, r4
    4620:	bl	0 <free>
    4624:	ldr	r0, [sp, #16]
    4628:	bl	0 <free>
    462c:	mvn	r0, #0
    4630:	b	4998 <add_detection_rule_entry_for_path+0x540>
    4634:	add	r0, r0, #1
    4638:	b	45ec <add_detection_rule_entry_for_path+0x194>
    463c:	mov	r1, #0
    4640:	strb	r1, [r0]
    4644:	add	r7, r0, #1
    4648:	mov	r0, r7
    464c:	ldrb	r1, [r7]
    4650:	cmp	r1, #47	; 0x2f
    4654:	beq	466c <add_detection_rule_entry_for_path+0x214>
    4658:	ldrb	r3, [r7]
    465c:	cmp	r3, #64	; 0x40
    4660:	movne	r1, #1
    4664:	moveq	r1, #0
    4668:	b	4670 <add_detection_rule_entry_for_path+0x218>
    466c:	mov	r1, #0
    4670:	cmp	r1, #0
    4674:	beq	468c <add_detection_rule_entry_for_path+0x234>
    4678:	ldrb	r1, [r7]
    467c:	cmp	r1, #0
    4680:	movne	r3, #1
    4684:	moveq	r3, #0
    4688:	b	4690 <add_detection_rule_entry_for_path+0x238>
    468c:	mov	r3, #0
    4690:	cmp	r3, #0
    4694:	beq	46a0 <add_detection_rule_entry_for_path+0x248>
    4698:	add	r7, r7, #1
    469c:	b	464c <add_detection_rule_entry_for_path+0x1f4>
    46a0:	ldrb	r2, [r7]
    46a4:	cmp	r2, #64	; 0x40
    46a8:	moveq	r8, #1
    46ac:	movne	r8, #0
    46b0:	ldrb	r1, [r7]
    46b4:	cmp	r1, #0
    46b8:	moveq	r5, #1
    46bc:	movne	r5, #0
    46c0:	mov	r1, #0
    46c4:	strb	r1, [r7]
    46c8:	mov	r1, #0
    46cc:	bl	0 <coda_identifier_from_name>
    46d0:	mov	sl, r0
    46d4:	cmp	sl, #0
    46d8:	bne	46f4 <add_detection_rule_entry_for_path+0x29c>
    46dc:	mov	r0, r4
    46e0:	bl	0 <free>
    46e4:	ldr	r0, [sp, #16]
    46e8:	bl	0 <free>
    46ec:	mvn	r0, #0
    46f0:	b	4998 <add_detection_rule_entry_for_path+0x540>
    46f4:	mov	r1, sl
    46f8:	mov	r0, r6
    46fc:	bl	0 <strcpy>
    4700:	mov	r0, sl
    4704:	bl	0 <strlen>
    4708:	add	r6, r6, r0
    470c:	mov	r0, sl
    4710:	bl	0 <free>
    4714:	cmp	r9, #0
    4718:	beq	4938 <add_detection_rule_entry_for_path+0x4e0>
    471c:	mov	r0, #36	; 0x24
    4720:	mov	r1, #0
    4724:	mov	r2, #0
    4728:	mov	r3, #0
    472c:	mov	fp, #0
    4730:	mov	sl, #0
    4734:	str	sl, [sp, #4]
    4738:	str	fp, [sp]
    473c:	bl	0 <coda_expression_new>
    4740:	mov	r2, r0
    4744:	cmp	r2, #0
    4748:	bne	4764 <add_detection_rule_entry_for_path+0x30c>
    474c:	mov	r0, r4
    4750:	bl	0 <free>
    4754:	ldr	r0, [sp, #16]
    4758:	bl	0 <free>
    475c:	mvn	r0, #0
    4760:	b	4998 <add_detection_rule_entry_for_path+0x540>
    4764:	mov	r0, #75	; 0x4b
    4768:	mov	r1, #0
    476c:	mov	r3, #0
    4770:	mov	sl, #0
    4774:	mov	fp, #0
    4778:	str	fp, [sp, #4]
    477c:	str	sl, [sp]
    4780:	bl	0 <coda_expression_new>
    4784:	mov	sl, r0
    4788:	cmp	sl, #0
    478c:	bne	47a8 <add_detection_rule_entry_for_path+0x350>
    4790:	mov	r0, r4
    4794:	bl	0 <free>
    4798:	ldr	r0, [sp, #16]
    479c:	bl	0 <free>
    47a0:	mvn	r0, #0
    47a4:	b	4998 <add_detection_rule_entry_for_path+0x540>
    47a8:	mov	r0, r9
    47ac:	bl	0 <strdup>
    47b0:	mov	r1, r0
    47b4:	cmp	r1, #0
    47b8:	bne	47f0 <add_detection_rule_entry_for_path+0x398>
    47bc:	mvn	r0, #0
    47c0:	ldr	r1, [pc, #512]	; 49c8 <add_detection_rule_entry_for_path+0x570>
    47c4:	ldr	r2, [pc, #504]	; 49c4 <add_detection_rule_entry_for_path+0x56c>
    47c8:	movw	r3, #2359	; 0x937
    47cc:	bl	0 <coda_set_error>
    47d0:	mov	r0, sl
    47d4:	bl	0 <coda_expression_delete>
    47d8:	mov	r0, r4
    47dc:	bl	0 <free>
    47e0:	ldr	r0, [sp, #16]
    47e4:	bl	0 <free>
    47e8:	mvn	r0, #0
    47ec:	b	4998 <add_detection_rule_entry_for_path+0x540>
    47f0:	mov	r0, #22
    47f4:	mov	r2, #0
    47f8:	mov	r3, #0
    47fc:	mov	fp, #0
    4800:	mov	r9, #0
    4804:	str	r9, [sp, #4]
    4808:	str	fp, [sp]
    480c:	bl	0 <coda_expression_new>
    4810:	mov	r3, r0
    4814:	cmp	r3, #0
    4818:	bne	483c <add_detection_rule_entry_for_path+0x3e4>
    481c:	mov	r0, sl
    4820:	bl	0 <coda_expression_delete>
    4824:	mov	r0, r4
    4828:	bl	0 <free>
    482c:	ldr	r0, [sp, #16]
    4830:	bl	0 <free>
    4834:	mvn	r0, #0
    4838:	b	4998 <add_detection_rule_entry_for_path+0x540>
    483c:	mov	r0, #25
    4840:	mov	r1, #0
    4844:	mov	r9, #0
    4848:	mov	r2, #0
    484c:	str	r2, [sp, #4]
    4850:	str	r9, [sp]
    4854:	mov	r2, sl
    4858:	bl	0 <coda_expression_new>
    485c:	mov	r9, r0
    4860:	cmp	r9, #0
    4864:	bne	4880 <add_detection_rule_entry_for_path+0x428>
    4868:	mov	r0, r4
    486c:	bl	0 <free>
    4870:	ldr	r0, [sp, #16]
    4874:	bl	0 <free>
    4878:	mvn	r0, #0
    487c:	b	4998 <add_detection_rule_entry_for_path+0x540>
    4880:	ldr	r1, [pc, #332]	; 49d4 <add_detection_rule_entry_for_path+0x57c>
    4884:	mov	r0, r6
    4888:	bl	0 <strcpy>
    488c:	mov	r0, r4
    4890:	bl	0 <coda_detection_rule_entry_new>
    4894:	mov	sl, r0
    4898:	mov	ip, #0
    489c:	strb	ip, [r6]
    48a0:	cmp	sl, #0
    48a4:	bne	48c8 <add_detection_rule_entry_for_path+0x470>
    48a8:	mov	r0, r9
    48ac:	bl	0 <coda_expression_delete>
    48b0:	mov	r0, r4
    48b4:	bl	0 <free>
    48b8:	ldr	r0, [sp, #16]
    48bc:	bl	0 <free>
    48c0:	mvn	r0, #0
    48c4:	b	4998 <add_detection_rule_entry_for_path+0x540>
    48c8:	mov	r1, r9
    48cc:	mov	r0, sl
    48d0:	bl	0 <coda_detection_rule_entry_set_expression>
    48d4:	cmp	r0, #0
    48d8:	beq	4904 <add_detection_rule_entry_for_path+0x4ac>
    48dc:	mov	r0, sl
    48e0:	bl	0 <coda_detection_rule_entry_delete>
    48e4:	mov	r0, r9
    48e8:	bl	0 <coda_expression_delete>
    48ec:	mov	r0, r4
    48f0:	bl	0 <free>
    48f4:	ldr	r0, [sp, #16]
    48f8:	bl	0 <free>
    48fc:	mvn	r0, #0
    4900:	b	4998 <add_detection_rule_entry_for_path+0x540>
    4904:	mov	r1, sl
    4908:	ldr	r0, [sp, #20]
    490c:	bl	0 <coda_detection_rule_add_entry>
    4910:	cmp	r0, #0
    4914:	beq	4938 <add_detection_rule_entry_for_path+0x4e0>
    4918:	mov	r0, sl
    491c:	bl	0 <coda_detection_rule_entry_delete>
    4920:	mov	r0, r4
    4924:	bl	0 <free>
    4928:	ldr	r0, [sp, #16]
    492c:	bl	0 <free>
    4930:	mvn	r0, #0
    4934:	b	4998 <add_detection_rule_entry_for_path+0x540>
    4938:	cmp	r5, #0
    493c:	bne	458c <add_detection_rule_entry_for_path+0x134>
    4940:	ldr	r3, [sp, #32]
    4944:	cmp	r3, #0
    4948:	beq	497c <add_detection_rule_entry_for_path+0x524>
    494c:	mvn	r0, #99	; 0x63
    4950:	ldr	r1, [pc, #128]	; 49d8 <add_detection_rule_entry_for_path+0x580>
    4954:	ldr	r2, [sp, #20]
    4958:	ldr	r2, [r2, #8]
    495c:	ldr	r2, [r2, #8]
    4960:	bl	0 <coda_set_error>
    4964:	mov	r0, r4
    4968:	bl	0 <free>
    496c:	ldr	r0, [sp, #16]
    4970:	bl	0 <free>
    4974:	mvn	r0, #0
    4978:	b	4998 <add_detection_rule_entry_for_path+0x540>
    497c:	add	r7, r7, #1
    4980:	b	458c <add_detection_rule_entry_for_path+0x134>
    4984:	ldr	r0, [sp, #16]
    4988:	bl	0 <free>
    498c:	ldr	r2, [sp, #24]
    4990:	str	r4, [r2]
    4994:	mov	r0, #0
    4998:	ldr	r4, [sp, #36]	; 0x24
    499c:	ldr	r5, [sp, #40]	; 0x28
    49a0:	ldr	r6, [sp, #44]	; 0x2c
    49a4:	ldr	r7, [sp, #48]	; 0x30
    49a8:	ldr	r8, [sp, #52]	; 0x34
    49ac:	ldr	r9, [sp, #56]	; 0x38
    49b0:	ldr	sl, [sp, #60]	; 0x3c
    49b4:	ldr	fp, [sp, #64]	; 0x40
    49b8:	ldr	lr, [sp, #12]
    49bc:	add	sp, sp, #72	; 0x48
    49c0:	bx	lr
    49c4:	.word	0x00001939
    49c8:	.word	0x00001c42
    49cc:	.word	0x00002143
    49d0:	.word	0x00000337
    49d4:	.word	0x00000160
    49d8:	.word	0x0000136e
    49dc:	.word	0x00001d60

000049e0 <cd_match_data_init>:
    49e0:	mov	ip, sp
    49e4:	sub	sp, sp, #40	; 0x28
    49e8:	str	ip, [sp, #8]
    49ec:	str	lr, [sp, #12]
    49f0:	str	r4, [sp, #16]
    49f4:	str	r5, [sp, #20]
    49f8:	str	r6, [sp, #24]
    49fc:	str	r7, [sp, #28]
    4a00:	mov	r4, r1
    4a04:	mov	r5, r0
    4a08:	ldr	r2, [r5]
    4a0c:	ldr	r3, [pc, #452]	; 4bd8 <cd_match_data_init+0x1f8>
    4a10:	str	r3, [r2, #40]	; 0x28
    4a14:	ldr	r1, [pc, #460]	; 4be8 <cd_match_data_init+0x208>
    4a18:	mov	r0, r4
    4a1c:	bl	998 <get_attribute_value>
    4a20:	mov	r6, r0
    4a24:	ldr	r1, [pc, #440]	; 4be4 <cd_match_data_init+0x204>
    4a28:	mov	r0, r4
    4a2c:	bl	998 <get_attribute_value>
    4a30:	mov	r4, r0
    4a34:	cmp	r4, #0
    4a38:	bne	4a64 <cd_match_data_init+0x84>
    4a3c:	mov	r0, #0
    4a40:	bl	0 <coda_detection_rule_entry_new>
    4a44:	ldr	ip, [r5]
    4a48:	str	r0, [ip, #8]
    4a4c:	ldr	r3, [r5]
    4a50:	ldr	r1, [r3, #8]
    4a54:	cmp	r1, #0
    4a58:	bne	4a64 <cd_match_data_init+0x84>
    4a5c:	mvn	r0, #0
    4a60:	b	4bb0 <cd_match_data_init+0x1d0>
    4a64:	cmp	r6, #0
    4a68:	beq	4b34 <cd_match_data_init+0x154>
    4a6c:	cmp	r4, #0
    4a70:	beq	4a8c <cd_match_data_init+0xac>
    4a74:	movw	r0, #65136	; 0xfe70
    4a78:	movt	r0, #65535	; 0xffff
    4a7c:	ldr	r1, [pc, #344]	; 4bdc <cd_match_data_init+0x1fc>
    4a80:	bl	0 <coda_set_error>
    4a84:	mvn	r0, #0
    4a88:	b	4bb0 <cd_match_data_init+0x1d0>
    4a8c:	mov	r0, r6
    4a90:	bl	0 <strdup>
    4a94:	str	r0, [sp, #32]
    4a98:	ldr	r2, [sp, #32]
    4a9c:	cmp	r2, #0
    4aa0:	bne	4ac0 <cd_match_data_init+0xe0>
    4aa4:	mvn	r0, #0
    4aa8:	ldr	r1, [pc, #288]	; 4bd0 <cd_match_data_init+0x1f0>
    4aac:	ldr	r2, [pc, #280]	; 4bcc <cd_match_data_init+0x1ec>
    4ab0:	movw	r3, #2459	; 0x99b
    4ab4:	bl	0 <coda_set_error>
    4ab8:	mvn	r0, #0
    4abc:	b	4bb0 <cd_match_data_init+0x1d0>
    4ac0:	mov	r0, #20
    4ac4:	ldr	r1, [sp, #32]
    4ac8:	mov	r2, #0
    4acc:	mov	r3, #0
    4ad0:	mov	r4, #0
    4ad4:	mov	r7, #0
    4ad8:	str	r7, [sp, #4]
    4adc:	str	r4, [sp]
    4ae0:	bl	0 <coda_expression_new>
    4ae4:	mov	r4, r0
    4ae8:	cmp	r4, #0
    4aec:	bne	4b0c <cd_match_data_init+0x12c>
    4af0:	movw	r0, #65136	; 0xfe70
    4af4:	movt	r0, #65535	; 0xffff
    4af8:	ldr	r1, [pc, #212]	; 4bd4 <cd_match_data_init+0x1f4>
    4afc:	mov	r2, r6
    4b00:	bl	0 <coda_set_error>
    4b04:	mvn	r0, #0
    4b08:	b	4bb0 <cd_match_data_init+0x1d0>
    4b0c:	ldr	r1, [r5]
    4b10:	ldr	r0, [r1, #8]
    4b14:	mov	r1, r4
    4b18:	bl	0 <coda_detection_rule_entry_set_expression>
    4b1c:	cmp	r0, #0
    4b20:	beq	4b94 <cd_match_data_init+0x1b4>
    4b24:	mov	r0, r4
    4b28:	bl	0 <coda_expression_delete>
    4b2c:	mvn	r0, #0
    4b30:	b	4bb0 <cd_match_data_init+0x1d0>
    4b34:	cmp	r4, #0
    4b38:	beq	4b94 <cd_match_data_init+0x1b4>
    4b3c:	ldr	ip, [r5]
    4b40:	ldr	ip, [ip, #396]	; 0x18c
    4b44:	ldr	r0, [ip, #8]
    4b48:	add	r2, sp, #32
    4b4c:	mov	r1, r4
    4b50:	bl	4458 <add_detection_rule_entry_for_path>
    4b54:	cmp	r0, #0
    4b58:	beq	4b64 <cd_match_data_init+0x184>
    4b5c:	mvn	r0, #0
    4b60:	b	4bb0 <cd_match_data_init+0x1d0>
    4b64:	ldr	r0, [sp, #32]
    4b68:	bl	0 <coda_detection_rule_entry_new>
    4b6c:	ldr	r2, [r5]
    4b70:	str	r0, [r2, #8]
    4b74:	ldr	r0, [sp, #32]
    4b78:	bl	0 <free>
    4b7c:	ldr	r1, [r5]
    4b80:	ldr	r0, [r1, #8]
    4b84:	cmp	r0, #0
    4b88:	bne	4b94 <cd_match_data_init+0x1b4>
    4b8c:	mvn	r0, #0
    4b90:	b	4bb0 <cd_match_data_init+0x1d0>
    4b94:	ldr	r1, [r5]
    4b98:	mov	ip, #1
    4b9c:	str	ip, [r1, #32]
    4ba0:	ldr	r2, [r5]
    4ba4:	ldr	ip, [pc, #52]	; 4be0 <cd_match_data_init+0x200>
    4ba8:	str	ip, [r2, #36]	; 0x24
    4bac:	mov	r0, #0
    4bb0:	ldr	r4, [sp, #16]
    4bb4:	ldr	r5, [sp, #20]
    4bb8:	ldr	r6, [sp, #24]
    4bbc:	ldr	r7, [sp, #28]
    4bc0:	ldr	lr, [sp, #12]
    4bc4:	add	sp, sp, #40	; 0x28
    4bc8:	bx	lr
    4bcc:	.word	0x00001939
    4bd0:	.word	0x00001c42
    4bd4:	.word	0x0000206d
    4bd8:	.word	0x00000000
    4bdc:	.word	0x00001e50
    4be0:	.word	0x00000000
    4be4:	.word	0x00002010
    4be8:	.word	0x00001ec2

00004bec <cd_match_expression_finalise>:
    4bec:	mov	ip, sp
    4bf0:	sub	sp, sp, #24
    4bf4:	str	ip, [sp]
    4bf8:	str	lr, [sp, #4]
    4bfc:	str	r4, [sp, #8]
    4c00:	mov	r4, r0
    4c04:	ldr	r1, [r4]
    4c08:	ldr	r2, [r1, #12]
    4c0c:	cmp	r2, #0
    4c10:	beq	4c58 <cd_match_expression_finalise+0x6c>
    4c14:	ldr	r3, [r4]
    4c18:	ldr	r0, [r3, #12]
    4c1c:	bl	0 <strlen>
    4c20:	ldr	r1, [r4]
    4c24:	ldr	r1, [r1, #12]
    4c28:	mov	ip, r0
    4c2c:	mov	r0, r1
    4c30:	mov	r1, ip
    4c34:	bl	ac <is_whitespace>
    4c38:	cmp	r0, #0
    4c3c:	beq	4c58 <cd_match_expression_finalise+0x6c>
    4c40:	ldr	r1, [r4]
    4c44:	ldr	r0, [r1, #12]
    4c48:	bl	0 <free>
    4c4c:	ldr	r1, [r4]
    4c50:	mov	r0, #0
    4c54:	str	r0, [r1, #12]
    4c58:	ldr	r2, [r4]
    4c5c:	ldr	ip, [r2, #12]
    4c60:	cmp	ip, #0
    4c64:	bne	4c80 <cd_match_expression_finalise+0x94>
    4c68:	movw	r0, #65136	; 0xfe70
    4c6c:	movt	r0, #65535	; 0xffff
    4c70:	ldr	r1, [pc, #168]	; 4d20 <cd_match_expression_finalise+0x134>
    4c74:	bl	0 <coda_set_error>
    4c78:	mvn	r0, #0
    4c7c:	b	4d0c <cd_match_expression_finalise+0x120>
    4c80:	ldr	r0, [r4]
    4c84:	ldr	r0, [r0, #12]
    4c88:	add	r1, sp, #20
    4c8c:	bl	0 <coda_expression_from_string>
    4c90:	cmp	r0, #0
    4c94:	beq	4ca0 <cd_match_expression_finalise+0xb4>
    4c98:	mvn	r0, #0
    4c9c:	b	4d0c <cd_match_expression_finalise+0x120>
    4ca0:	ldr	r3, [r4]
    4ca4:	ldr	r0, [r3, #12]
    4ca8:	bl	0 <free>
    4cac:	ldr	r2, [r4]
    4cb0:	mov	r0, #0
    4cb4:	str	r0, [r2, #12]
    4cb8:	ldr	r0, [r4]
    4cbc:	ldr	r1, [r0, #8]
    4cc0:	ldr	r3, [sp, #20]
    4cc4:	str	r3, [r1, #4]
    4cc8:	ldr	r0, [sp, #20]
    4ccc:	add	r1, sp, #16
    4cd0:	bl	0 <coda_expression_get_type>
    4cd4:	cmp	r0, #0
    4cd8:	beq	4ce4 <cd_match_expression_finalise+0xf8>
    4cdc:	mvn	r0, #0
    4ce0:	b	4d0c <cd_match_expression_finalise+0x120>
    4ce4:	ldr	r0, [sp, #16]
    4ce8:	cmp	r0, #0
    4cec:	beq	4d08 <cd_match_expression_finalise+0x11c>
    4cf0:	movw	r0, #65136	; 0xfe70
    4cf4:	movt	r0, #65535	; 0xffff
    4cf8:	ldr	r1, [pc, #28]	; 4d1c <cd_match_expression_finalise+0x130>
    4cfc:	bl	0 <coda_set_error>
    4d00:	mvn	r0, #0
    4d04:	b	4d0c <cd_match_expression_finalise+0x120>
    4d08:	mov	r0, #0
    4d0c:	ldr	r4, [sp, #8]
    4d10:	ldr	lr, [sp, #4]
    4d14:	add	sp, sp, #24
    4d18:	bx	lr
    4d1c:	.word	0x00000c4f
    4d20:	.word	0x000011c8

00004d24 <cd_match_expression_init>:
    4d24:	mov	ip, sp
    4d28:	sub	sp, sp, #16
    4d2c:	str	ip, [sp]
    4d30:	str	lr, [sp, #4]
    4d34:	str	r4, [sp, #8]
    4d38:	mov	r4, r0
    4d3c:	ldr	r0, [pc, #112]	; 4db4 <cd_match_expression_init+0x90>
    4d40:	mov	r2, r0
    4d44:	mov	r0, r1
    4d48:	mov	r1, r2
    4d4c:	bl	998 <get_attribute_value>
    4d50:	ldr	r3, [r4]
    4d54:	ldr	r1, [pc, #80]	; 4dac <cd_match_expression_init+0x88>
    4d58:	str	r1, [r3, #40]	; 0x28
    4d5c:	bl	0 <coda_detection_rule_entry_new>
    4d60:	ldr	r1, [r4]
    4d64:	str	r0, [r1, #8]
    4d68:	ldr	r3, [r4]
    4d6c:	ldr	r1, [r3, #8]
    4d70:	cmp	r1, #0
    4d74:	bne	4d80 <cd_match_expression_init+0x5c>
    4d78:	mvn	r0, #0
    4d7c:	b	4d9c <cd_match_expression_init+0x78>
    4d80:	ldr	r2, [r4]
    4d84:	mov	ip, #1
    4d88:	str	ip, [r2, #32]
    4d8c:	ldr	r2, [r4]
    4d90:	ldr	r0, [pc, #24]	; 4db0 <cd_match_expression_init+0x8c>
    4d94:	str	r0, [r2, #36]	; 0x24
    4d98:	mov	r0, #0
    4d9c:	ldr	r4, [sp, #8]
    4da0:	ldr	lr, [sp, #4]
    4da4:	add	sp, sp, #16
    4da8:	bx	lr
	...
    4db4:	.word	0x00002010

00004db8 <cd_match_filename_finalise>:
    4db8:	mov	ip, sp
    4dbc:	sub	sp, sp, #72	; 0x48
    4dc0:	str	ip, [sp, #8]
    4dc4:	str	lr, [sp, #12]
    4dc8:	str	r4, [sp, #16]
    4dcc:	str	r5, [sp, #20]
    4dd0:	str	r6, [sp, #24]
    4dd4:	str	r7, [sp, #28]
    4dd8:	str	r8, [sp, #32]
    4ddc:	mov	r7, r0
    4de0:	ldr	r1, [r7]
    4de4:	ldr	r5, [r1, #8]
    4de8:	ldr	r1, [r7]
    4dec:	ldr	r0, [r1, #12]
    4df0:	bl	388 <escaped_string_length>
    4df4:	mov	r4, r0
    4df8:	cmp	r4, #0
    4dfc:	bge	4e18 <cd_match_filename_finalise+0x60>
    4e00:	movw	r0, #65136	; 0xfe70
    4e04:	movt	r0, #65535	; 0xffff
    4e08:	ldr	r1, [pc, #516]	; 5014 <cd_match_filename_finalise+0x25c>
    4e0c:	bl	0 <coda_set_error>
    4e10:	mvn	r0, #0
    4e14:	b	4fe8 <cd_match_filename_finalise+0x230>
    4e18:	cmp	r4, #0
    4e1c:	bne	4e38 <cd_match_filename_finalise+0x80>
    4e20:	movw	r0, #65136	; 0xfe70
    4e24:	movt	r0, #65535	; 0xffff
    4e28:	ldr	r1, [pc, #480]	; 5010 <cd_match_filename_finalise+0x258>
    4e2c:	bl	0 <coda_set_error>
    4e30:	mvn	r0, #0
    4e34:	b	4fe8 <cd_match_filename_finalise+0x230>
    4e38:	mov	r0, #28
    4e3c:	mov	r1, #0
    4e40:	mov	r2, #0
    4e44:	mov	r3, #0
    4e48:	mov	r8, #0
    4e4c:	mov	ip, #0
    4e50:	str	ip, [sp, #4]
    4e54:	str	r8, [sp]
    4e58:	bl	0 <coda_expression_new>
    4e5c:	mov	r6, r0
    4e60:	cmp	r6, #0
    4e64:	bne	4e70 <cd_match_filename_finalise+0xb8>
    4e68:	mvn	r0, #0
    4e6c:	b	4fe8 <cd_match_filename_finalise+0x230>
    4e70:	asr	r1, r4, #31
    4e74:	add	r2, sp, #40	; 0x28
    4e78:	mov	r0, r4
    4e7c:	bl	0 <coda_str64>
    4e80:	add	r0, sp, #40	; 0x28
    4e84:	bl	0 <strdup>
    4e88:	cmp	r0, #0
    4e8c:	bne	4eac <cd_match_filename_finalise+0xf4>
    4e90:	mvn	r0, #0
    4e94:	ldr	r1, [pc, #368]	; 500c <cd_match_filename_finalise+0x254>
    4e98:	ldr	r2, [pc, #360]	; 5008 <cd_match_filename_finalise+0x250>
    4e9c:	movw	r3, #2588	; 0xa1c
    4ea0:	bl	0 <coda_set_error>
    4ea4:	mvn	r0, #0
    4ea8:	b	4fe8 <cd_match_filename_finalise+0x230>
    4eac:	mov	r1, #20
    4eb0:	mov	r2, #0
    4eb4:	mov	r3, #0
    4eb8:	mov	ip, #0
    4ebc:	mov	r8, #0
    4ec0:	str	r8, [sp, #4]
    4ec4:	str	ip, [sp]
    4ec8:	mov	r4, r0
    4ecc:	mov	r0, r1
    4ed0:	mov	r1, r4
    4ed4:	bl	0 <coda_expression_new>
    4ed8:	mov	r3, r0
    4edc:	cmp	r3, #0
    4ee0:	bne	4ef4 <cd_match_filename_finalise+0x13c>
    4ee4:	mov	r0, r6
    4ee8:	bl	0 <coda_expression_delete>
    4eec:	mvn	r0, #0
    4ef0:	b	4fe8 <cd_match_filename_finalise+0x230>
    4ef4:	mov	r0, #77	; 0x4d
    4ef8:	mov	r1, #0
    4efc:	ldr	r2, [r5, #4]
    4f00:	mov	r4, #0
    4f04:	str	r4, [sp, #4]
    4f08:	str	r6, [sp]
    4f0c:	bl	0 <coda_expression_new>
    4f10:	mov	r4, r0
    4f14:	mov	r2, #0
    4f18:	str	r2, [r5, #4]
    4f1c:	cmp	r4, #0
    4f20:	bne	4f2c <cd_match_filename_finalise+0x174>
    4f24:	mvn	r0, #0
    4f28:	b	4fe8 <cd_match_filename_finalise+0x230>
    4f2c:	ldr	r0, [r7]
    4f30:	ldr	r0, [r0, #12]
    4f34:	bl	0 <strdup>
    4f38:	cmp	r0, #0
    4f3c:	bne	4f64 <cd_match_filename_finalise+0x1ac>
    4f40:	mvn	r0, #0
    4f44:	ldr	r1, [pc, #192]	; 500c <cd_match_filename_finalise+0x254>
    4f48:	ldr	r2, [pc, #184]	; 5008 <cd_match_filename_finalise+0x250>
    4f4c:	movw	r3, #2607	; 0xa2f
    4f50:	bl	0 <coda_set_error>
    4f54:	mov	r0, r4
    4f58:	bl	0 <coda_expression_delete>
    4f5c:	mvn	r0, #0
    4f60:	b	4fe8 <cd_match_filename_finalise+0x230>
    4f64:	mov	r1, #22
    4f68:	mov	r2, #0
    4f6c:	mov	r3, #0
    4f70:	mov	r7, #0
    4f74:	mov	ip, #0
    4f78:	str	ip, [sp, #4]
    4f7c:	str	r7, [sp]
    4f80:	mov	r6, r0
    4f84:	mov	r0, r1
    4f88:	mov	r1, r6
    4f8c:	bl	0 <coda_expression_new>
    4f90:	mov	r3, r0
    4f94:	cmp	r3, #0
    4f98:	bne	4fac <cd_match_filename_finalise+0x1f4>
    4f9c:	mov	r0, r4
    4fa0:	bl	0 <coda_expression_delete>
    4fa4:	mvn	r0, #0
    4fa8:	b	4fe8 <cd_match_filename_finalise+0x230>
    4fac:	mov	r0, #25
    4fb0:	mov	r1, #0
    4fb4:	mov	r2, #0
    4fb8:	mov	ip, #0
    4fbc:	str	ip, [sp, #4]
    4fc0:	str	r2, [sp]
    4fc4:	mov	r2, r4
    4fc8:	bl	0 <coda_expression_new>
    4fcc:	str	r0, [r5, #4]
    4fd0:	ldr	r0, [r5, #4]
    4fd4:	cmp	r0, #0
    4fd8:	bne	4fe4 <cd_match_filename_finalise+0x22c>
    4fdc:	mvn	r0, #0
    4fe0:	b	4fe8 <cd_match_filename_finalise+0x230>
    4fe4:	mov	r0, #0
    4fe8:	ldr	r4, [sp, #16]
    4fec:	ldr	r5, [sp, #20]
    4ff0:	ldr	r6, [sp, #24]
    4ff4:	ldr	r7, [sp, #28]
    4ff8:	ldr	r8, [sp, #32]
    4ffc:	ldr	lr, [sp, #12]
    5000:	add	sp, sp, #72	; 0x48
    5004:	bx	lr
    5008:	.word	0x00001939
    500c:	.word	0x00001c42
    5010:	.word	0x00001cc7
    5014:	.word	0x00000bc3

00005018 <cd_match_filename_init>:
    5018:	mov	ip, sp
    501c:	sub	sp, sp, #32
    5020:	str	ip, [sp, #8]
    5024:	str	lr, [sp, #12]
    5028:	str	r4, [sp, #16]
    502c:	str	r5, [sp, #20]
    5030:	str	r6, [sp, #24]
    5034:	str	r7, [sp, #28]
    5038:	mov	r6, r0
    503c:	ldr	r0, [pc, #328]	; 518c <cd_match_filename_init+0x174>
    5040:	ldr	r2, [r6]
    5044:	ldr	r2, [r2]
    5048:	mov	r3, r0
    504c:	mov	r0, r1
    5050:	mov	r1, r3
    5054:	bl	a00 <get_mandatory_attribute_value>
    5058:	mov	r4, r0
    505c:	cmp	r4, #0
    5060:	bne	506c <cd_match_filename_init+0x54>
    5064:	mvn	r0, #0
    5068:	b	515c <cd_match_filename_init+0x144>
    506c:	ldr	r3, [r6]
    5070:	ldr	r2, [pc, #268]	; 5184 <cd_match_filename_init+0x16c>
    5074:	str	r2, [r3, #40]	; 0x28
    5078:	mov	r0, #0
    507c:	bl	0 <coda_detection_rule_entry_new>
    5080:	ldr	r3, [r6]
    5084:	str	r0, [r3, #8]
    5088:	ldr	ip, [r6]
    508c:	ldr	r2, [ip, #8]
    5090:	cmp	r2, #0
    5094:	bne	50a0 <cd_match_filename_init+0x88>
    5098:	mvn	r0, #0
    509c:	b	515c <cd_match_filename_init+0x144>
    50a0:	mov	r0, r4
    50a4:	bl	0 <strdup>
    50a8:	mov	r1, r0
    50ac:	cmp	r1, #0
    50b0:	bne	50d0 <cd_match_filename_init+0xb8>
    50b4:	mvn	r0, #0
    50b8:	ldr	r1, [pc, #188]	; 517c <cd_match_filename_init+0x164>
    50bc:	ldr	r2, [pc, #180]	; 5178 <cd_match_filename_init+0x160>
    50c0:	movw	r3, #2649	; 0xa59
    50c4:	bl	0 <coda_set_error>
    50c8:	mvn	r0, #0
    50cc:	b	515c <cd_match_filename_init+0x144>
    50d0:	mov	r0, #20
    50d4:	mov	r2, #0
    50d8:	mov	r3, #0
    50dc:	mov	r7, #0
    50e0:	mov	r5, #0
    50e4:	str	r5, [sp, #4]
    50e8:	str	r7, [sp]
    50ec:	bl	0 <coda_expression_new>
    50f0:	mov	r5, r0
    50f4:	cmp	r5, #0
    50f8:	bne	5118 <cd_match_filename_init+0x100>
    50fc:	movw	r0, #65136	; 0xfe70
    5100:	movt	r0, #65535	; 0xffff
    5104:	ldr	r1, [pc, #116]	; 5180 <cd_match_filename_init+0x168>
    5108:	mov	r2, r4
    510c:	bl	0 <coda_set_error>
    5110:	mvn	r0, #0
    5114:	b	515c <cd_match_filename_init+0x144>
    5118:	ldr	r0, [r6]
    511c:	ldr	r0, [r0, #8]
    5120:	mov	r1, r5
    5124:	bl	0 <coda_detection_rule_entry_set_expression>
    5128:	cmp	r0, #0
    512c:	beq	5140 <cd_match_filename_init+0x128>
    5130:	mov	r0, r5
    5134:	bl	0 <coda_expression_delete>
    5138:	mvn	r0, #0
    513c:	b	515c <cd_match_filename_init+0x144>
    5140:	ldr	r3, [r6]
    5144:	mov	ip, #1
    5148:	str	ip, [r3, #32]
    514c:	ldr	r2, [r6]
    5150:	ldr	r1, [pc, #48]	; 5188 <cd_match_filename_init+0x170>
    5154:	str	r1, [r2, #36]	; 0x24
    5158:	mov	r0, #0
    515c:	ldr	r4, [sp, #16]
    5160:	ldr	r5, [sp, #20]
    5164:	ldr	r6, [sp, #24]
    5168:	ldr	r7, [sp, #28]
    516c:	ldr	lr, [sp, #12]
    5170:	add	sp, sp, #32
    5174:	bx	lr
    5178:	.word	0x00001939
    517c:	.word	0x00001c42
    5180:	.word	0x0000206d
	...
    518c:	.word	0x00001ec2

00005190 <cd_match_size_init>:
    5190:	mov	ip, sp
    5194:	sub	sp, sp, #32
    5198:	str	ip, [sp, #8]
    519c:	str	lr, [sp, #12]
    51a0:	str	r4, [sp, #16]
    51a4:	str	r5, [sp, #20]
    51a8:	str	r6, [sp, #24]
    51ac:	str	r7, [sp, #28]
    51b0:	mov	r4, r1
    51b4:	mov	r6, r0
    51b8:	ldr	r1, [r6]
    51bc:	ldr	r0, [pc, #396]	; 5350 <cd_match_size_init+0x1c0>
    51c0:	str	r0, [r1, #40]	; 0x28
    51c4:	mov	r0, #0
    51c8:	bl	0 <coda_detection_rule_entry_new>
    51cc:	ldr	r3, [r6]
    51d0:	str	r0, [r3, #8]
    51d4:	ldr	r2, [r6]
    51d8:	ldr	r3, [r2, #8]
    51dc:	cmp	r3, #0
    51e0:	bne	51ec <cd_match_size_init+0x5c>
    51e4:	mvn	r0, #0
    51e8:	b	532c <cd_match_size_init+0x19c>
    51ec:	ldr	r1, [pc, #356]	; 5358 <cd_match_size_init+0x1c8>
    51f0:	ldr	ip, [r6]
    51f4:	ldr	r2, [ip]
    51f8:	mov	r0, r4
    51fc:	bl	a00 <get_mandatory_attribute_value>
    5200:	mov	r4, r0
    5204:	cmp	r4, #0
    5208:	bne	5214 <cd_match_size_init+0x84>
    520c:	mvn	r0, #0
    5210:	b	532c <cd_match_size_init+0x19c>
    5214:	mov	r0, r4
    5218:	bl	0 <strdup>
    521c:	mov	r1, r0
    5220:	cmp	r1, #0
    5224:	bne	5244 <cd_match_size_init+0xb4>
    5228:	mvn	r0, #0
    522c:	ldr	r1, [pc, #280]	; 534c <cd_match_size_init+0x1bc>
    5230:	ldr	r2, [pc, #272]	; 5348 <cd_match_size_init+0x1b8>
    5234:	movw	r3, #2694	; 0xa86
    5238:	bl	0 <coda_set_error>
    523c:	mvn	r0, #0
    5240:	b	532c <cd_match_size_init+0x19c>
    5244:	mov	r0, #20
    5248:	mov	r2, #0
    524c:	mov	r3, #0
    5250:	mov	r7, #0
    5254:	mov	ip, #0
    5258:	str	ip, [sp, #4]
    525c:	str	r7, [sp]
    5260:	bl	0 <coda_expression_new>
    5264:	mov	r5, r0
    5268:	cmp	r5, #0
    526c:	bne	528c <cd_match_size_init+0xfc>
    5270:	movw	r0, #65136	; 0xfe70
    5274:	movt	r0, #65535	; 0xffff
    5278:	ldr	r1, [pc, #212]	; 5354 <cd_match_size_init+0x1c4>
    527c:	mov	r2, r4
    5280:	bl	0 <coda_set_error>
    5284:	mvn	r0, #0
    5288:	b	532c <cd_match_size_init+0x19c>
    528c:	mov	r0, #27
    5290:	mov	r1, #0
    5294:	mov	r2, #0
    5298:	mov	r3, #0
    529c:	mov	ip, #0
    52a0:	mov	r4, #0
    52a4:	str	r4, [sp, #4]
    52a8:	str	ip, [sp]
    52ac:	bl	0 <coda_expression_new>
    52b0:	mov	r2, r0
    52b4:	cmp	r2, #0
    52b8:	bne	52cc <cd_match_size_init+0x13c>
    52bc:	mov	r0, r5
    52c0:	bl	0 <coda_expression_delete>
    52c4:	mvn	r0, #0
    52c8:	b	532c <cd_match_size_init+0x19c>
    52cc:	mov	r0, #25
    52d0:	mov	r1, #0
    52d4:	mov	r3, #0
    52d8:	mov	ip, #0
    52dc:	str	ip, [sp, #4]
    52e0:	str	r3, [sp]
    52e4:	mov	r3, r5
    52e8:	bl	0 <coda_expression_new>
    52ec:	mov	r4, r0
    52f0:	cmp	r4, #0
    52f4:	bne	5300 <cd_match_size_init+0x170>
    52f8:	mvn	r0, #0
    52fc:	b	532c <cd_match_size_init+0x19c>
    5300:	ldr	r3, [r6]
    5304:	ldr	r0, [r3, #8]
    5308:	mov	r1, r4
    530c:	bl	0 <coda_detection_rule_entry_set_expression>
    5310:	cmp	r0, #0
    5314:	beq	5328 <cd_match_size_init+0x198>
    5318:	mov	r0, r4
    531c:	bl	0 <coda_expression_delete>
    5320:	mvn	r0, #0
    5324:	b	532c <cd_match_size_init+0x19c>
    5328:	mov	r0, #0
    532c:	ldr	r4, [sp, #16]
    5330:	ldr	r5, [sp, #20]
    5334:	ldr	r6, [sp, #24]
    5338:	ldr	r7, [sp, #28]
    533c:	ldr	lr, [sp, #12]
    5340:	add	sp, sp, #32
    5344:	bx	lr
    5348:	.word	0x00001939
    534c:	.word	0x00001c42
    5350:	.word	0x00000000
    5354:	.word	0x00000f92
    5358:	.word	0x00000130

0000535c <cd_product_class_set_description>:
    535c:	mov	ip, sp
    5360:	sub	sp, sp, #8
    5364:	str	ip, [sp]
    5368:	str	lr, [sp, #4]
    536c:	mov	r1, r0
    5370:	ldr	r2, [r1]
    5374:	ldr	r2, [r2, #12]
    5378:	cmp	r2, #0
    537c:	bne	5398 <cd_product_class_set_description+0x3c>
    5380:	ldr	r0, [r1]
    5384:	ldr	r0, [r0, #396]	; 0x18c
    5388:	ldr	r0, [r0, #8]
    538c:	ldr	r1, [pc, #40]	; 53bc <cd_product_class_set_description+0x60>
    5390:	bl	0 <coda_product_class_set_description>
    5394:	b	53b0 <cd_product_class_set_description+0x54>
    5398:	ldr	r3, [r1]
    539c:	ldr	r2, [r3, #396]	; 0x18c
    53a0:	ldr	r0, [r2, #8]
    53a4:	ldr	r1, [r1]
    53a8:	ldr	r1, [r1, #12]
    53ac:	bl	0 <coda_product_class_set_description>
    53b0:	ldr	lr, [sp, #4]
    53b4:	add	sp, sp, #8
    53b8:	bx	lr
    53bc:	.word	0x00002067

000053c0 <cd_product_class_add_product_type>:
    53c0:	mov	ip, sp
    53c4:	sub	sp, sp, #16
    53c8:	str	ip, [sp]
    53cc:	str	lr, [sp, #4]
    53d0:	str	r4, [sp, #8]
    53d4:	mov	r4, r0
    53d8:	ldr	r0, [r4]
    53dc:	ldr	r2, [r0, #396]	; 0x18c
    53e0:	ldr	r0, [r2, #8]
    53e4:	ldr	r1, [r4]
    53e8:	ldr	r1, [r1, #8]
    53ec:	bl	0 <coda_product_class_add_product_type>
    53f0:	cmp	r0, #0
    53f4:	beq	5400 <cd_product_class_add_product_type+0x40>
    53f8:	mvn	r0, #0
    53fc:	b	5410 <cd_product_class_add_product_type+0x50>
    5400:	ldr	r1, [r4]
    5404:	mov	r3, #0
    5408:	str	r3, [r1, #8]
    540c:	mov	r0, #0
    5410:	ldr	r4, [sp, #8]
    5414:	ldr	lr, [sp, #4]
    5418:	add	sp, sp, #16
    541c:	bx	lr

00005420 <cd_product_class_finalise>:
    5420:	mov	ip, sp
    5424:	sub	sp, sp, #8
    5428:	str	ip, [sp]
    542c:	str	lr, [sp, #4]
    5430:	mov	r1, #0
    5434:	str	r1, [r0, #24]
    5438:	mov	r0, #0
    543c:	ldr	lr, [sp, #4]
    5440:	add	sp, sp, #8
    5444:	bx	lr

00005448 <get_product_class_revision>:
    5448:	mov	ip, sp
    544c:	sub	sp, sp, #40	; 0x28
    5450:	str	ip, [sp, #4]
    5454:	str	lr, [sp, #8]
    5458:	str	r4, [sp, #16]
    545c:	str	r5, [sp, #20]
    5460:	str	r6, [sp, #24]
    5464:	str	r7, [sp, #28]
    5468:	mov	r7, r1
    546c:	ldr	r0, [r0, #16]
    5470:	ldr	r1, [pc, #268]	; 5584 <get_product_class_revision+0x13c>
    5474:	bl	0 <coda_za_get_entry_by_name>
    5478:	mov	r6, r0
    547c:	cmp	r6, #0
    5480:	bne	5494 <get_product_class_revision+0x4c>
    5484:	mov	r2, #0
    5488:	str	r2, [r7]
    548c:	mov	r0, #0
    5490:	b	5564 <get_product_class_revision+0x11c>
    5494:	mov	r0, r6
    5498:	bl	0 <coda_za_get_entry_size>
    549c:	mov	r4, r0
    54a0:	cmp	r4, #0
    54a4:	bne	54b8 <get_product_class_revision+0x70>
    54a8:	mov	r0, #0
    54ac:	str	r0, [r7]
    54b0:	mov	r0, #0
    54b4:	b	5564 <get_product_class_revision+0x11c>
    54b8:	add	r0, r4, #1
    54bc:	bl	0 <malloc>
    54c0:	mov	r5, r0
    54c4:	cmp	r5, #0
    54c8:	bne	54f0 <get_product_class_revision+0xa8>
    54cc:	mvn	r0, #0
    54d0:	ldr	r1, [pc, #176]	; 5588 <get_product_class_revision+0x140>
    54d4:	add	r2, r4, #1
    54d8:	ldr	r3, [pc, #160]	; 5580 <get_product_class_revision+0x138>
    54dc:	movw	r4, #2774	; 0xad6
    54e0:	str	r4, [sp]
    54e4:	bl	0 <coda_set_error>
    54e8:	mvn	r0, #0
    54ec:	b	5564 <get_product_class_revision+0x11c>
    54f0:	mov	r1, r5
    54f4:	mov	r0, r6
    54f8:	bl	0 <coda_za_read_entry>
    54fc:	cmp	r0, #0
    5500:	beq	5514 <get_product_class_revision+0xcc>
    5504:	mov	r0, r5
    5508:	bl	0 <free>
    550c:	mvn	r0, #0
    5510:	b	5564 <get_product_class_revision+0x11c>
    5514:	mov	r1, #0
    5518:	strb	r1, [r5, r4]
    551c:	add	r2, sp, #32
    5520:	mov	r3, #1
    5524:	mov	r1, r4
    5528:	mov	r0, r5
    552c:	bl	0 <coda_ascii_parse_int64>
    5530:	cmp	r0, #0
    5534:	bge	5550 <get_product_class_revision+0x108>
    5538:	mov	r0, r5
    553c:	bl	0 <free>
    5540:	mov	r3, #0
    5544:	str	r3, [r7]
    5548:	mov	r0, #0
    554c:	b	5564 <get_product_class_revision+0x11c>
    5550:	mov	r0, r5
    5554:	bl	0 <free>
    5558:	ldr	r0, [sp, #32]
    555c:	str	r0, [r7]
    5560:	mov	r0, #0
    5564:	ldr	r4, [sp, #16]
    5568:	ldr	r5, [sp, #20]
    556c:	ldr	r6, [sp, #24]
    5570:	ldr	r7, [sp, #28]
    5574:	ldr	lr, [sp, #8]
    5578:	add	sp, sp, #40	; 0x28
    557c:	bx	lr
    5580:	.word	0x00001939
    5584:	.word	0x000013f4
    5588:	.word	0x00000e60

0000558c <cd_product_class_init>:
    558c:	mov	ip, sp
    5590:	sub	sp, sp, #32
    5594:	str	ip, [sp]
    5598:	str	lr, [sp, #4]
    559c:	str	r4, [sp, #8]
    55a0:	str	r5, [sp, #12]
    55a4:	str	r6, [sp, #16]
    55a8:	mov	r4, r0
    55ac:	mov	r2, #0
    55b0:	str	r2, [sp, #24]
    55b4:	ldr	r0, [pc, #416]	; 575c <cd_product_class_init+0x1d0>
    55b8:	ldr	ip, [r4]
    55bc:	ldr	r2, [ip]
    55c0:	mov	r3, r0
    55c4:	mov	r0, r1
    55c8:	mov	r1, r3
    55cc:	bl	a00 <get_mandatory_attribute_value>
    55d0:	mov	r6, r0
    55d4:	cmp	r6, #0
    55d8:	bne	55e4 <cd_product_class_init+0x58>
    55dc:	mvn	r0, #0
    55e0:	b	5740 <cd_product_class_init+0x1b4>
    55e4:	add	r1, sp, #24
    55e8:	mov	r0, r4
    55ec:	bl	5448 <get_product_class_revision>
    55f0:	cmp	r0, #0
    55f4:	beq	5600 <cd_product_class_init+0x74>
    55f8:	mvn	r0, #0
    55fc:	b	5740 <cd_product_class_init+0x1b4>
    5600:	mov	r0, r6
    5604:	bl	0 <coda_data_dictionary_has_product_class>
    5608:	cmp	r0, #0
    560c:	beq	5670 <cd_product_class_init+0xe4>
    5610:	mov	r0, r6
    5614:	bl	0 <coda_data_dictionary_get_product_class>
    5618:	mov	r5, r0
    561c:	cmp	r5, #0
    5620:	bne	562c <cd_product_class_init+0xa0>
    5624:	mvn	r0, #0
    5628:	b	5740 <cd_product_class_init+0x1b4>
    562c:	mov	r0, r5
    5630:	bl	0 <coda_product_class_get_revision>
    5634:	ldr	ip, [sp, #24]
    5638:	cmp	ip, r0
    563c:	bgt	5658 <cd_product_class_init+0xcc>
    5640:	mov	ip, #1
    5644:	str	ip, [r4, #40]	; 0x28
    5648:	mov	r0, r4
    564c:	bl	e28 <abort_parser>
    5650:	mov	r0, #0
    5654:	b	5740 <cd_product_class_init+0x1b4>
    5658:	mov	r0, r5
    565c:	bl	0 <coda_data_dictionary_remove_product_class>
    5660:	cmp	r0, #0
    5664:	beq	5670 <cd_product_class_init+0xe4>
    5668:	mvn	r0, #0
    566c:	b	5740 <cd_product_class_init+0x1b4>
    5670:	ldr	r2, [r4]
    5674:	ldr	r3, [pc, #236]	; 5768 <cd_product_class_init+0x1dc>
    5678:	str	r3, [r2, #40]	; 0x28
    567c:	mov	r0, r6
    5680:	bl	0 <coda_product_class_new>
    5684:	str	r0, [r4, #24]
    5688:	ldr	r0, [r4, #24]
    568c:	cmp	r0, #0
    5690:	bne	569c <cd_product_class_init+0x110>
    5694:	mvn	r0, #0
    5698:	b	5740 <cd_product_class_init+0x1b4>
    569c:	ldr	r0, [r4, #16]
    56a0:	bl	0 <coda_za_get_filename>
    56a4:	mov	r1, r0
    56a8:	ldr	r0, [r4, #24]
    56ac:	bl	0 <coda_product_class_set_definition_file>
    56b0:	cmp	r0, #0
    56b4:	beq	56d0 <cd_product_class_init+0x144>
    56b8:	ldr	r0, [r4, #24]
    56bc:	bl	0 <coda_product_class_delete>
    56c0:	mov	ip, #0
    56c4:	str	ip, [r4, #24]
    56c8:	mvn	r0, #0
    56cc:	b	5740 <cd_product_class_init+0x1b4>
    56d0:	ldr	r0, [r4, #24]
    56d4:	ldr	r1, [sp, #24]
    56d8:	bl	0 <coda_product_class_set_revision>
    56dc:	cmp	r0, #0
    56e0:	beq	56fc <cd_product_class_init+0x170>
    56e4:	ldr	r0, [r4, #24]
    56e8:	bl	0 <coda_product_class_delete>
    56ec:	mov	r0, #0
    56f0:	str	r0, [r4, #24]
    56f4:	mvn	r0, #0
    56f8:	b	5740 <cd_product_class_init+0x1b4>
    56fc:	ldr	r0, [r4]
    5700:	ldr	r2, [r4, #24]
    5704:	str	r2, [r0, #8]
    5708:	ldr	r0, [r4]
    570c:	mov	r1, #11
    5710:	ldr	r2, [pc, #64]	; 5758 <cd_product_class_init+0x1cc>
    5714:	ldr	r3, [pc, #72]	; 5764 <cd_product_class_init+0x1d8>
    5718:	bl	e64 <register_sub_element>
    571c:	ldr	r0, [r4]
    5720:	mov	r1, #32
    5724:	ldr	r2, [pc, #68]	; 5770 <cd_product_class_init+0x1e4>
    5728:	ldr	r3, [pc, #48]	; 5760 <cd_product_class_init+0x1d4>
    572c:	bl	e64 <register_sub_element>
    5730:	ldr	r0, [r4]
    5734:	ldr	r1, [pc, #48]	; 576c <cd_product_class_init+0x1e0>
    5738:	str	r1, [r0, #36]	; 0x24
    573c:	mov	r0, #0
    5740:	ldr	r4, [sp, #8]
    5744:	ldr	r5, [sp, #12]
    5748:	ldr	r6, [sp, #16]
    574c:	ldr	lr, [sp, #4]
    5750:	add	sp, sp, #32
    5754:	bx	lr
    5758:	.word	0x00000000
    575c:	.word	0x0000047e
	...

00005774 <cd_product_definition_set_description>:
    5774:	mov	ip, sp
    5778:	sub	sp, sp, #8
    577c:	str	ip, [sp]
    5780:	str	lr, [sp, #4]
    5784:	mov	r1, r0
    5788:	ldr	r2, [r1]
    578c:	ldr	r2, [r2, #12]
    5790:	cmp	r2, #0
    5794:	bne	57b0 <cd_product_definition_set_description+0x3c>
    5798:	ldr	r0, [r1]
    579c:	ldr	r0, [r0, #396]	; 0x18c
    57a0:	ldr	r0, [r0, #8]
    57a4:	ldr	r1, [pc, #40]	; 57d4 <cd_product_definition_set_description+0x60>
    57a8:	bl	0 <coda_product_definition_set_description>
    57ac:	b	57c8 <cd_product_definition_set_description+0x54>
    57b0:	ldr	r3, [r1]
    57b4:	ldr	r2, [r3, #396]	; 0x18c
    57b8:	ldr	r0, [r2, #8]
    57bc:	ldr	r1, [r1]
    57c0:	ldr	r1, [r1, #12]
    57c4:	bl	0 <coda_product_definition_set_description>
    57c8:	ldr	lr, [sp, #4]
    57cc:	add	sp, sp, #8
    57d0:	bx	lr
    57d4:	.word	0x00002067

000057d8 <cd_product_definition_add_detection_rule>:
    57d8:	mov	ip, sp
    57dc:	sub	sp, sp, #16
    57e0:	str	ip, [sp]
    57e4:	str	lr, [sp, #4]
    57e8:	str	r4, [sp, #8]
    57ec:	mov	r4, r0
    57f0:	ldr	r0, [r4]
    57f4:	ldr	r2, [r0, #396]	; 0x18c
    57f8:	ldr	r0, [r2, #8]
    57fc:	ldr	r1, [r4]
    5800:	ldr	r1, [r1, #8]
    5804:	bl	0 <coda_product_definition_add_detection_rule>
    5808:	cmp	r0, #0
    580c:	beq	5818 <cd_product_definition_add_detection_rule+0x40>
    5810:	mvn	r0, #0
    5814:	b	5828 <cd_product_definition_add_detection_rule+0x50>
    5818:	ldr	r1, [r4]
    581c:	mov	r3, #0
    5820:	str	r3, [r1, #8]
    5824:	mov	r0, #0
    5828:	ldr	r4, [sp, #8]
    582c:	ldr	lr, [sp, #4]
    5830:	add	sp, sp, #16
    5834:	bx	lr

00005838 <cd_product_definition_set_root_type>:
    5838:	mov	ip, sp
    583c:	sub	sp, sp, #8
    5840:	str	ip, [sp]
    5844:	str	lr, [sp, #4]
    5848:	ldr	r2, [r0]
    584c:	ldr	r1, [r2, #396]	; 0x18c
    5850:	ldr	r2, [r1, #8]
    5854:	ldr	r3, [r0]
    5858:	ldr	r1, [r3, #8]
    585c:	mov	r0, r2
    5860:	bl	0 <coda_product_definition_set_root_type>
    5864:	cmp	r0, #0
    5868:	beq	5874 <cd_product_definition_set_root_type+0x3c>
    586c:	mvn	r0, #0
    5870:	b	5878 <cd_product_definition_set_root_type+0x40>
    5874:	mov	r0, #0
    5878:	ldr	lr, [sp, #4]
    587c:	add	sp, sp, #8
    5880:	bx	lr

00005884 <cd_product_definition_add_product_variable>:
    5884:	mov	ip, sp
    5888:	sub	sp, sp, #16
    588c:	str	ip, [sp]
    5890:	str	lr, [sp, #4]
    5894:	str	r4, [sp, #8]
    5898:	mov	r4, r0
    589c:	ldr	r0, [r4]
    58a0:	ldr	r2, [r0, #396]	; 0x18c
    58a4:	ldr	r0, [r2, #8]
    58a8:	ldr	r1, [r4]
    58ac:	ldr	r1, [r1, #8]
    58b0:	bl	0 <coda_product_definition_add_product_variable>
    58b4:	cmp	r0, #0
    58b8:	beq	58c4 <cd_product_definition_add_product_variable+0x40>
    58bc:	mvn	r0, #0
    58c0:	b	58d4 <cd_product_definition_add_product_variable+0x50>
    58c4:	ldr	r1, [r4]
    58c8:	mov	r3, #0
    58cc:	str	r3, [r1, #8]
    58d0:	mov	r0, #0
    58d4:	ldr	r4, [sp, #8]
    58d8:	ldr	lr, [sp, #4]
    58dc:	add	sp, sp, #16
    58e0:	bx	lr

000058e4 <cd_product_definition_finalise>:
    58e4:	mov	ip, sp
    58e8:	sub	sp, sp, #8
    58ec:	str	ip, [sp]
    58f0:	str	lr, [sp, #4]
    58f4:	ldr	r0, [r0]
    58f8:	ldr	r0, [r0, #8]
    58fc:	bl	0 <coda_product_definition_validate>
    5900:	ldr	lr, [sp, #4]
    5904:	add	sp, sp, #8
    5908:	bx	lr

0000590c <cd_product_definition_init>:
    590c:	mov	ip, sp
    5910:	sub	sp, sp, #40	; 0x28
    5914:	str	ip, [sp, #4]
    5918:	str	lr, [sp, #8]
    591c:	str	r4, [sp, #16]
    5920:	str	r5, [sp, #20]
    5924:	str	r6, [sp, #24]
    5928:	mov	r4, r1
    592c:	mov	r5, r0
    5930:	ldr	r1, [pc, #424]	; 5ae0 <cd_product_definition_init+0x1d4>
    5934:	ldr	r2, [r5]
    5938:	ldr	r2, [r2]
    593c:	mov	r0, r4
    5940:	bl	a00 <get_mandatory_attribute_value>
    5944:	mov	r6, r0
    5948:	cmp	r6, #0
    594c:	bne	5958 <cd_product_definition_init+0x4c>
    5950:	mvn	r0, #0
    5954:	b	5ac4 <cd_product_definition_init+0x1b8>
    5958:	ldr	r1, [pc, #416]	; 5b00 <cd_product_definition_init+0x1f4>
    595c:	ldr	r3, [r5]
    5960:	ldr	r2, [r3]
    5964:	mov	r0, r4
    5968:	bl	a00 <get_mandatory_attribute_value>
    596c:	cmp	r0, #0
    5970:	bne	597c <cd_product_definition_init+0x70>
    5974:	mvn	r0, #0
    5978:	b	5ac4 <cd_product_definition_init+0x1b8>
    597c:	ldr	r1, [r5]
    5980:	add	r1, r1, #44	; 0x2c
    5984:	bl	0 <coda_format_from_string>
    5988:	cmp	r0, #0
    598c:	beq	5998 <cd_product_definition_init+0x8c>
    5990:	mvn	r0, #0
    5994:	b	5ac4 <cd_product_definition_init+0x1b8>
    5998:	ldr	r3, [r5]
    599c:	mov	r2, #1
    59a0:	str	r2, [r3, #48]	; 0x30
    59a4:	ldr	r1, [pc, #328]	; 5af4 <cd_product_definition_init+0x1e8>
    59a8:	ldr	r2, [r5]
    59ac:	ldr	r2, [r2]
    59b0:	mov	r0, r4
    59b4:	bl	a00 <get_mandatory_attribute_value>
    59b8:	mov	r4, r0
    59bc:	cmp	r4, #0
    59c0:	bne	59cc <cd_product_definition_init+0xc0>
    59c4:	mvn	r0, #0
    59c8:	b	5ac4 <cd_product_definition_init+0x1b8>
    59cc:	ldr	r1, [pc, #296]	; 5afc <cd_product_definition_init+0x1f0>
    59d0:	add	r2, sp, #32
    59d4:	mov	r0, r4
    59d8:	bl	0 <sscanf>
    59dc:	cmp	r0, #1
    59e0:	beq	5a00 <cd_product_definition_init+0xf4>
    59e4:	movw	r0, #65136	; 0xfe70
    59e8:	movt	r0, #65535	; 0xffff
    59ec:	ldr	r1, [pc, #248]	; 5aec <cd_product_definition_init+0x1e0>
    59f0:	mov	r2, r4
    59f4:	bl	0 <coda_set_error>
    59f8:	mvn	r0, #0
    59fc:	b	5ac4 <cd_product_definition_init+0x1b8>
    5a00:	ldr	r1, [r5]
    5a04:	ldr	ip, [pc, #220]	; 5ae8 <cd_product_definition_init+0x1dc>
    5a08:	str	ip, [r1, #40]	; 0x28
    5a0c:	ldr	ip, [r5]
    5a10:	ldr	r1, [ip, #44]	; 0x2c
    5a14:	ldr	r2, [sp, #32]
    5a18:	mov	r0, r6
    5a1c:	bl	0 <coda_product_definition_new>
    5a20:	str	r0, [r5, #28]
    5a24:	ldr	ip, [r5, #28]
    5a28:	cmp	ip, #0
    5a2c:	bne	5a38 <cd_product_definition_init+0x12c>
    5a30:	mvn	r0, #0
    5a34:	b	5ac4 <cd_product_definition_init+0x1b8>
    5a38:	ldr	r0, [pc, #156]	; 5adc <cd_product_definition_init+0x1d0>
    5a3c:	ldr	r1, [r0]
    5a40:	cmp	r1, #0
    5a44:	beq	5a8c <cd_product_definition_init+0x180>
    5a48:	ldr	r0, [r5, #16]
    5a4c:	mov	r1, #2
    5a50:	ldr	r3, [r5, #24]
    5a54:	ldr	r2, [r5, #28]
    5a58:	str	r2, [sp]
    5a5c:	mov	r2, r6
    5a60:	bl	8448 <parse_entry>
    5a64:	cmp	r0, #0
    5a68:	beq	5a8c <cd_product_definition_init+0x180>
    5a6c:	ldr	r0, [r5, #28]
    5a70:	bl	0 <coda_product_definition_delete>
    5a74:	mov	ip, #0
    5a78:	str	ip, [r5, #28]
    5a7c:	mov	r1, #0
    5a80:	str	r1, [r5, #44]	; 0x2c
    5a84:	mvn	r0, #0
    5a88:	b	5ac4 <cd_product_definition_init+0x1b8>
    5a8c:	ldr	r0, [r5]
    5a90:	ldr	r2, [r5, #28]
    5a94:	str	r2, [r0, #8]
    5a98:	ldr	r0, [r5]
    5a9c:	mov	r1, #11
    5aa0:	ldr	r2, [pc, #60]	; 5ae4 <cd_product_definition_init+0x1d8>
    5aa4:	ldr	r3, [pc, #88]	; 5b04 <cd_product_definition_init+0x1f8>
    5aa8:	bl	e64 <register_sub_element>
    5aac:	ldr	r0, [r5]
    5ab0:	mov	r1, #12
    5ab4:	ldr	r2, [pc, #52]	; 5af0 <cd_product_definition_init+0x1e4>
    5ab8:	ldr	r3, [pc, #56]	; 5af8 <cd_product_definition_init+0x1ec>
    5abc:	bl	e64 <register_sub_element>
    5ac0:	mov	r0, #0
    5ac4:	ldr	r4, [sp, #16]
    5ac8:	ldr	r5, [sp, #20]
    5acc:	ldr	r6, [sp, #24]
    5ad0:	ldr	lr, [sp, #8]
    5ad4:	add	sp, sp, #40	; 0x28
    5ad8:	bx	lr
    5adc:	.word	0x00000000
    5ae0:	.word	0x00000c10
	...
    5aec:	.word	0x00001b45
    5af0:	.word	0x00000000
    5af4:	.word	0x00001bb8
    5af8:	.word	0x00000000
    5afc:	.word	0x00000831
    5b00:	.word	0x00001746
    5b04:	.word	0x00000000

00005b08 <cd_product_definition_sub_init>:
    5b08:	mov	ip, sp
    5b0c:	sub	sp, sp, #24
    5b10:	str	ip, [sp]
    5b14:	str	lr, [sp, #4]
    5b18:	str	r4, [sp, #8]
    5b1c:	str	r5, [sp, #12]
    5b20:	str	r6, [sp, #16]
    5b24:	mov	r4, r1
    5b28:	mov	r6, r0
    5b2c:	ldr	r3, [r6, #28]
    5b30:	cmp	r3, #0
    5b34:	bne	5b4c <cd_product_definition_sub_init+0x44>
    5b38:	ldr	r0, [pc, #424]	; 5ce8 <cd_product_definition_sub_init+0x1e0>
    5b3c:	ldr	r1, [pc, #384]	; 5cc4 <cd_product_definition_sub_init+0x1bc>
    5b40:	movw	r2, #2974	; 0xb9e
    5b44:	ldr	r3, [pc, #368]	; 5cbc <cd_product_definition_sub_init+0x1b4>
    5b48:	bl	0 <__assert_fail>
    5b4c:	ldr	r1, [r6]
    5b50:	ldr	r3, [pc, #380]	; 5cd4 <cd_product_definition_sub_init+0x1cc>
    5b54:	str	r3, [r1, #40]	; 0x28
    5b58:	ldr	r1, [r6]
    5b5c:	ldr	ip, [r6, #28]
    5b60:	str	ip, [r1, #8]
    5b64:	ldr	r1, [pc, #356]	; 5cd0 <cd_product_definition_sub_init+0x1c8>
    5b68:	ldr	r2, [r6]
    5b6c:	ldr	r2, [r2]
    5b70:	mov	r0, r4
    5b74:	bl	a00 <get_mandatory_attribute_value>
    5b78:	mov	r5, r0
    5b7c:	cmp	r5, #0
    5b80:	bne	5b8c <cd_product_definition_sub_init+0x84>
    5b84:	mvn	r0, #0
    5b88:	b	5ca4 <cd_product_definition_sub_init+0x19c>
    5b8c:	ldr	ip, [r6, #28]
    5b90:	ldr	r0, [ip, #8]
    5b94:	mov	r1, r5
    5b98:	bl	0 <strcmp>
    5b9c:	cmp	r0, #0
    5ba0:	beq	5bc8 <cd_product_definition_sub_init+0xc0>
    5ba4:	movw	r0, #65136	; 0xfe70
    5ba8:	movt	r0, #65535	; 0xffff
    5bac:	ldr	r1, [pc, #280]	; 5ccc <cd_product_definition_sub_init+0x1c4>
    5bb0:	ldr	r2, [r6, #28]
    5bb4:	ldr	r3, [r2, #8]
    5bb8:	mov	r2, r5
    5bbc:	bl	0 <coda_set_error>
    5bc0:	mvn	r0, #0
    5bc4:	b	5ca4 <cd_product_definition_sub_init+0x19c>
    5bc8:	ldr	r1, [pc, #284]	; 5cec <cd_product_definition_sub_init+0x1e4>
    5bcc:	ldr	r2, [r6]
    5bd0:	ldr	r2, [r2]
    5bd4:	mov	r0, r4
    5bd8:	bl	a00 <get_mandatory_attribute_value>
    5bdc:	cmp	r0, #0
    5be0:	bne	5bec <cd_product_definition_sub_init+0xe4>
    5be4:	mvn	r0, #0
    5be8:	b	5ca4 <cd_product_definition_sub_init+0x19c>
    5bec:	ldr	r1, [r6]
    5bf0:	add	r1, r1, #44	; 0x2c
    5bf4:	bl	0 <coda_format_from_string>
    5bf8:	cmp	r0, #0
    5bfc:	beq	5c08 <cd_product_definition_sub_init+0x100>
    5c00:	mvn	r0, #0
    5c04:	b	5ca4 <cd_product_definition_sub_init+0x19c>
    5c08:	ldr	ip, [r6]
    5c0c:	mov	r3, #1
    5c10:	str	r3, [ip, #48]	; 0x30
    5c14:	ldr	r0, [r6, #28]
    5c18:	ldr	r0, [r0]
    5c1c:	ldr	r2, [r6]
    5c20:	ldr	r2, [r2, #44]	; 0x2c
    5c24:	cmp	r0, r2
    5c28:	beq	5c4c <cd_product_definition_sub_init+0x144>
    5c2c:	movw	r0, #65136	; 0xfe70
    5c30:	movt	r0, #65535	; 0xffff
    5c34:	ldr	r1, [pc, #132]	; 5cc0 <cd_product_definition_sub_init+0x1b8>
    5c38:	ldr	r3, [r6, #28]
    5c3c:	ldr	r2, [r3, #8]
    5c40:	bl	0 <coda_set_error>
    5c44:	mvn	r0, #0
    5c48:	b	5ca4 <cd_product_definition_sub_init+0x19c>
    5c4c:	ldr	r0, [r6, #28]
    5c50:	ldr	r0, [r0]
    5c54:	cmp	r0, #2
    5c58:	bne	5c74 <cd_product_definition_sub_init+0x16c>
    5c5c:	ldr	r0, [r6]
    5c60:	mov	r1, #35	; 0x23
    5c64:	ldr	r2, [pc, #116]	; 5ce0 <cd_product_definition_sub_init+0x1d8>
    5c68:	ldr	r3, [pc, #104]	; 5cd8 <cd_product_definition_sub_init+0x1d0>
    5c6c:	bl	e64 <register_sub_element>
    5c70:	b	5c80 <cd_product_definition_sub_init+0x178>
    5c74:	ldr	r0, [r6]
    5c78:	ldr	r1, [pc, #88]	; 5cd8 <cd_product_definition_sub_init+0x1d0>
    5c7c:	bl	ef0 <register_type_elements>
    5c80:	ldr	r0, [r6]
    5c84:	mov	r1, #33	; 0x21
    5c88:	ldr	r2, [pc, #76]	; 5cdc <cd_product_definition_sub_init+0x1d4>
    5c8c:	ldr	r3, [pc, #80]	; 5ce4 <cd_product_definition_sub_init+0x1dc>
    5c90:	bl	e64 <register_sub_element>
    5c94:	ldr	r2, [r6]
    5c98:	ldr	r3, [pc, #40]	; 5cc8 <cd_product_definition_sub_init+0x1c0>
    5c9c:	str	r3, [r2, #36]	; 0x24
    5ca0:	mov	r0, #0
    5ca4:	ldr	r4, [sp, #8]
    5ca8:	ldr	r5, [sp, #12]
    5cac:	ldr	r6, [sp, #16]
    5cb0:	ldr	lr, [sp, #4]
    5cb4:	add	sp, sp, #24
    5cb8:	bx	lr
    5cbc:	.word	0x00002165
    5cc0:	.word	0x00000834
    5cc4:	.word	0x00001939
    5cc8:	.word	0x00000000
    5ccc:	.word	0x00001f29
    5cd0:	.word	0x00000c10
	...
    5ce8:	.word	0x00000595
    5cec:	.word	0x00001746

00005cf0 <cd_product_type_set_description>:
    5cf0:	mov	ip, sp
    5cf4:	sub	sp, sp, #8
    5cf8:	str	ip, [sp]
    5cfc:	str	lr, [sp, #4]
    5d00:	mov	r1, r0
    5d04:	ldr	r2, [r1]
    5d08:	ldr	r2, [r2, #12]
    5d0c:	cmp	r2, #0
    5d10:	bne	5d2c <cd_product_type_set_description+0x3c>
    5d14:	ldr	r0, [r1]
    5d18:	ldr	r0, [r0, #396]	; 0x18c
    5d1c:	ldr	r0, [r0, #8]
    5d20:	ldr	r1, [pc, #40]	; 5d50 <cd_product_type_set_description+0x60>
    5d24:	bl	0 <coda_product_type_set_description>
    5d28:	b	5d44 <cd_product_type_set_description+0x54>
    5d2c:	ldr	r3, [r1]
    5d30:	ldr	r2, [r3, #396]	; 0x18c
    5d34:	ldr	r0, [r2, #8]
    5d38:	ldr	r1, [r1]
    5d3c:	ldr	r1, [r1, #12]
    5d40:	bl	0 <coda_product_type_set_description>
    5d44:	ldr	lr, [sp, #4]
    5d48:	add	sp, sp, #8
    5d4c:	bx	lr
    5d50:	.word	0x00002067

00005d54 <cd_product_type_add_product_definition>:
    5d54:	mov	ip, sp
    5d58:	sub	sp, sp, #16
    5d5c:	str	ip, [sp]
    5d60:	str	lr, [sp, #4]
    5d64:	str	r4, [sp, #8]
    5d68:	mov	r4, r0
    5d6c:	ldr	r0, [r4]
    5d70:	ldr	r2, [r0, #396]	; 0x18c
    5d74:	ldr	r0, [r2, #8]
    5d78:	ldr	r1, [r4]
    5d7c:	ldr	r1, [r1, #8]
    5d80:	bl	0 <coda_product_type_add_product_definition>
    5d84:	cmp	r0, #0
    5d88:	beq	5d94 <cd_product_type_add_product_definition+0x40>
    5d8c:	mvn	r0, #0
    5d90:	b	5da4 <cd_product_type_add_product_definition+0x50>
    5d94:	ldr	r1, [r4]
    5d98:	mov	r3, #0
    5d9c:	str	r3, [r1, #8]
    5da0:	mov	r0, #0
    5da4:	ldr	r4, [sp, #8]
    5da8:	ldr	lr, [sp, #4]
    5dac:	add	sp, sp, #16
    5db0:	bx	lr

00005db4 <cd_product_type_init>:
    5db4:	mov	ip, sp
    5db8:	sub	sp, sp, #16
    5dbc:	str	ip, [sp]
    5dc0:	str	lr, [sp, #4]
    5dc4:	str	r4, [sp, #8]
    5dc8:	mov	r4, r0
    5dcc:	ldr	r0, [pc, #148]	; 5e68 <cd_product_type_init+0xb4>
    5dd0:	ldr	r2, [r4]
    5dd4:	ldr	r2, [r2]
    5dd8:	mov	r3, r0
    5ddc:	mov	r0, r1
    5de0:	mov	r1, r3
    5de4:	bl	a00 <get_mandatory_attribute_value>
    5de8:	cmp	r0, #0
    5dec:	bne	5df8 <cd_product_type_init+0x44>
    5df0:	mvn	r0, #0
    5df4:	b	5e54 <cd_product_type_init+0xa0>
    5df8:	ldr	r1, [r4]
    5dfc:	ldr	r2, [pc, #104]	; 5e6c <cd_product_type_init+0xb8>
    5e00:	str	r2, [r1, #40]	; 0x28
    5e04:	bl	0 <coda_product_type_new>
    5e08:	ldr	ip, [r4]
    5e0c:	str	r0, [ip, #8]
    5e10:	ldr	ip, [r4]
    5e14:	ldr	r2, [ip, #8]
    5e18:	cmp	r2, #0
    5e1c:	bne	5e28 <cd_product_type_init+0x74>
    5e20:	mvn	r0, #0
    5e24:	b	5e54 <cd_product_type_init+0xa0>
    5e28:	ldr	r0, [r4]
    5e2c:	mov	r1, #11
    5e30:	ldr	r2, [pc, #44]	; 5e64 <cd_product_type_init+0xb0>
    5e34:	ldr	r3, [pc, #56]	; 5e74 <cd_product_type_init+0xc0>
    5e38:	bl	e64 <register_sub_element>
    5e3c:	ldr	r0, [r4]
    5e40:	mov	r1, #31
    5e44:	ldr	r2, [pc, #36]	; 5e70 <cd_product_type_init+0xbc>
    5e48:	ldr	r3, [pc, #40]	; 5e78 <cd_product_type_init+0xc4>
    5e4c:	bl	e64 <register_sub_element>
    5e50:	mov	r0, #0
    5e54:	ldr	r4, [sp, #8]
    5e58:	ldr	lr, [sp, #4]
    5e5c:	add	sp, sp, #16
    5e60:	bx	lr
    5e64:	.word	0x00000000
    5e68:	.word	0x0000047e
	...

00005e7c <cd_product_variable_set_size_expression>:
    5e7c:	mov	ip, sp
    5e80:	sub	sp, sp, #16
    5e84:	str	ip, [sp]
    5e88:	str	lr, [sp, #4]
    5e8c:	str	r4, [sp, #8]
    5e90:	mov	r4, r0
    5e94:	ldr	r0, [r4]
    5e98:	ldr	r2, [r0, #396]	; 0x18c
    5e9c:	ldr	r0, [r2, #8]
    5ea0:	ldr	r1, [r4]
    5ea4:	ldr	r1, [r1, #8]
    5ea8:	bl	0 <coda_product_variable_set_size_expression>
    5eac:	cmp	r0, #0
    5eb0:	beq	5ebc <cd_product_variable_set_size_expression+0x40>
    5eb4:	mvn	r0, #0
    5eb8:	b	5ecc <cd_product_variable_set_size_expression+0x50>
    5ebc:	ldr	r1, [r4]
    5ec0:	mov	r3, #0
    5ec4:	str	r3, [r1, #8]
    5ec8:	mov	r0, #0
    5ecc:	ldr	r4, [sp, #8]
    5ed0:	ldr	lr, [sp, #4]
    5ed4:	add	sp, sp, #16
    5ed8:	bx	lr

00005edc <cd_product_variable_set_init_expression>:
    5edc:	mov	ip, sp
    5ee0:	sub	sp, sp, #16
    5ee4:	str	ip, [sp]
    5ee8:	str	lr, [sp, #4]
    5eec:	str	r4, [sp, #8]
    5ef0:	mov	r4, r0
    5ef4:	ldr	r0, [r4]
    5ef8:	ldr	r2, [r0, #396]	; 0x18c
    5efc:	ldr	r0, [r2, #8]
    5f00:	ldr	r1, [r4]
    5f04:	ldr	r1, [r1, #8]
    5f08:	bl	0 <coda_product_variable_set_init_expression>
    5f0c:	cmp	r0, #0
    5f10:	beq	5f1c <cd_product_variable_set_init_expression+0x40>
    5f14:	mvn	r0, #0
    5f18:	b	5f2c <cd_product_variable_set_init_expression+0x50>
    5f1c:	ldr	r1, [r4]
    5f20:	mov	r3, #0
    5f24:	str	r3, [r1, #8]
    5f28:	mov	r0, #0
    5f2c:	ldr	r4, [sp, #8]
    5f30:	ldr	lr, [sp, #4]
    5f34:	add	sp, sp, #16
    5f38:	bx	lr

00005f3c <cd_product_variable_finalise>:
    5f3c:	mov	ip, sp
    5f40:	sub	sp, sp, #8
    5f44:	str	ip, [sp]
    5f48:	str	lr, [sp, #4]
    5f4c:	ldr	r0, [r0]
    5f50:	ldr	r0, [r0, #8]
    5f54:	bl	0 <coda_product_variable_validate>
    5f58:	ldr	lr, [sp, #4]
    5f5c:	add	sp, sp, #8
    5f60:	bx	lr

00005f64 <cd_product_variable_init>:
    5f64:	mov	ip, sp
    5f68:	sub	sp, sp, #16
    5f6c:	str	ip, [sp]
    5f70:	str	lr, [sp, #4]
    5f74:	str	r4, [sp, #8]
    5f78:	mov	r4, r0
    5f7c:	mov	r0, r1
    5f80:	ldr	r1, [pc, #152]	; 6020 <cd_product_variable_init+0xbc>
    5f84:	ldr	r2, [r4]
    5f88:	ldr	r2, [r2]
    5f8c:	bl	a00 <get_mandatory_attribute_value>
    5f90:	cmp	r0, #0
    5f94:	bne	5fa0 <cd_product_variable_init+0x3c>
    5f98:	mvn	r0, #0
    5f9c:	b	6008 <cd_product_variable_init+0xa4>
    5fa0:	ldr	r3, [r4]
    5fa4:	ldr	r1, [pc, #128]	; 602c <cd_product_variable_init+0xc8>
    5fa8:	str	r1, [r3, #40]	; 0x28
    5fac:	bl	0 <coda_product_variable_new>
    5fb0:	ldr	r1, [r4]
    5fb4:	str	r0, [r1, #8]
    5fb8:	ldr	r3, [r4]
    5fbc:	ldr	r1, [r3, #8]
    5fc0:	cmp	r1, #0
    5fc4:	bne	5fd0 <cd_product_variable_init+0x6c>
    5fc8:	mvn	r0, #0
    5fcc:	b	6008 <cd_product_variable_init+0xa4>
    5fd0:	ldr	r0, [r4]
    5fd4:	mov	r1, #13
    5fd8:	ldr	r2, [pc, #56]	; 6018 <cd_product_variable_init+0xb4>
    5fdc:	ldr	r3, [pc, #64]	; 6024 <cd_product_variable_init+0xc0>
    5fe0:	bl	e64 <register_sub_element>
    5fe4:	ldr	r0, [r4]
    5fe8:	mov	r1, #19
    5fec:	ldr	r2, [pc, #40]	; 601c <cd_product_variable_init+0xb8>
    5ff0:	ldr	r3, [pc, #56]	; 6030 <cd_product_variable_init+0xcc>
    5ff4:	bl	e64 <register_sub_element>
    5ff8:	ldr	r0, [r4]
    5ffc:	ldr	r2, [pc, #36]	; 6028 <cd_product_variable_init+0xc4>
    6000:	str	r2, [r0, #36]	; 0x24
    6004:	mov	r0, #0
    6008:	ldr	r4, [sp, #8]
    600c:	ldr	lr, [sp, #4]
    6010:	add	sp, sp, #16
    6014:	bx	lr
	...
    6020:	.word	0x0000047e
	...

00006034 <cd_raw_set_fixed_value>:
    6034:	mov	ip, sp
    6038:	sub	sp, sp, #16
    603c:	str	ip, [sp]
    6040:	str	lr, [sp, #4]
    6044:	str	r4, [sp, #8]
    6048:	mov	r4, r0
    604c:	ldr	ip, [r4]
    6050:	ldr	r0, [ip, #12]
    6054:	bl	528 <decode_escaped_string>
    6058:	mov	r1, r0
    605c:	cmp	r1, #0
    6060:	bge	607c <cd_raw_set_fixed_value+0x48>
    6064:	movw	r0, #65136	; 0xfe70
    6068:	movt	r0, #65535	; 0xffff
    606c:	ldr	r1, [pc, #76]	; 60c0 <cd_raw_set_fixed_value+0x8c>
    6070:	bl	0 <coda_set_error>
    6074:	mvn	r0, #0
    6078:	b	60b0 <cd_raw_set_fixed_value+0x7c>
    607c:	cmp	r1, #0
    6080:	ble	60ac <cd_raw_set_fixed_value+0x78>
    6084:	ldr	r0, [r4]
    6088:	ldr	r2, [r0, #396]	; 0x18c
    608c:	ldr	r0, [r2, #8]
    6090:	ldr	r2, [r4]
    6094:	ldr	r2, [r2, #12]
    6098:	bl	0 <coda_type_raw_set_fixed_value>
    609c:	cmp	r0, #0
    60a0:	beq	60ac <cd_raw_set_fixed_value+0x78>
    60a4:	mvn	r0, #0
    60a8:	b	60b0 <cd_raw_set_fixed_value+0x7c>
    60ac:	mov	r0, #0
    60b0:	ldr	r4, [sp, #8]
    60b4:	ldr	lr, [sp, #4]
    60b8:	add	sp, sp, #16
    60bc:	bx	lr
    60c0:	.word	0x00000bc3

000060c4 <cd_raw_finalise>:
    60c4:	mov	ip, sp
    60c8:	sub	sp, sp, #8
    60cc:	str	ip, [sp]
    60d0:	str	lr, [sp, #4]
    60d4:	ldr	r0, [r0]
    60d8:	ldr	r0, [r0, #8]
    60dc:	bl	0 <coda_type_raw_validate>
    60e0:	ldr	lr, [sp, #4]
    60e4:	add	sp, sp, #8
    60e8:	bx	lr

000060ec <cd_raw_init>:
    60ec:	mov	ip, sp
    60f0:	sub	sp, sp, #16
    60f4:	str	ip, [sp]
    60f8:	str	lr, [sp, #4]
    60fc:	str	r4, [sp, #8]
    6100:	str	r5, [sp, #12]
    6104:	mov	r5, r1
    6108:	mov	r4, r0
    610c:	mov	r1, r5
    6110:	mov	r0, r4
    6114:	bl	b6c <handle_format_attribute_for_type>
    6118:	cmp	r0, #0
    611c:	beq	6128 <cd_raw_init+0x3c>
    6120:	mvn	r0, #0
    6124:	b	61c8 <cd_raw_init+0xdc>
    6128:	ldr	r0, [r4]
    612c:	ldr	r2, [pc, #172]	; 61e0 <cd_raw_init+0xf4>
    6130:	str	r2, [r0, #40]	; 0x28
    6134:	ldr	r1, [r4]
    6138:	ldr	r0, [r1, #44]	; 0x2c
    613c:	bl	0 <coda_type_raw_new>
    6140:	ldr	ip, [r4]
    6144:	str	r0, [ip, #8]
    6148:	ldr	r0, [r4]
    614c:	ldr	r2, [r0, #8]
    6150:	cmp	r2, #0
    6154:	bne	6160 <cd_raw_init+0x74>
    6158:	mvn	r0, #0
    615c:	b	61c8 <cd_raw_init+0xdc>
    6160:	mov	r1, r5
    6164:	mov	r0, r4
    6168:	bl	a78 <handle_name_attribute_for_type>
    616c:	cmp	r0, #0
    6170:	beq	617c <cd_raw_init+0x90>
    6174:	mvn	r0, #0
    6178:	b	61c8 <cd_raw_init+0xdc>
    617c:	ldr	r0, [r4]
    6180:	mov	r1, #11
    6184:	ldr	r2, [pc, #80]	; 61dc <cd_raw_init+0xf0>
    6188:	ldr	r3, [pc, #84]	; 61e4 <cd_raw_init+0xf8>
    618c:	bl	e64 <register_sub_element>
    6190:	ldr	r0, [r4]
    6194:	mov	r1, #7
    6198:	ldr	r2, [pc, #84]	; 61f4 <cd_raw_init+0x108>
    619c:	ldr	r3, [pc, #72]	; 61ec <cd_raw_init+0x100>
    61a0:	bl	e64 <register_sub_element>
    61a4:	ldr	r0, [r4]
    61a8:	mov	r1, #16
    61ac:	ldr	r2, [pc, #40]	; 61dc <cd_raw_init+0xf0>
    61b0:	ldr	r3, [pc, #48]	; 61e8 <cd_raw_init+0xfc>
    61b4:	bl	e64 <register_sub_element>
    61b8:	ldr	r0, [r4]
    61bc:	ldr	r1, [pc, #44]	; 61f0 <cd_raw_init+0x104>
    61c0:	str	r1, [r0, #36]	; 0x24
    61c4:	mov	r0, #0
    61c8:	ldr	r4, [sp, #8]
    61cc:	ldr	r5, [sp, #12]
    61d0:	ldr	lr, [sp, #4]
    61d4:	add	sp, sp, #16
    61d8:	bx	lr
	...

000061f8 <cd_record_add_field>:
    61f8:	mov	ip, sp
    61fc:	sub	sp, sp, #16
    6200:	str	ip, [sp]
    6204:	str	lr, [sp, #4]
    6208:	str	r4, [sp, #8]
    620c:	mov	r4, r0
    6210:	ldr	r0, [r4]
    6214:	ldr	r2, [r0, #396]	; 0x18c
    6218:	ldr	r0, [r2, #8]
    621c:	ldr	r1, [r4]
    6220:	ldr	r1, [r1, #8]
    6224:	bl	0 <coda_type_record_add_field>
    6228:	cmp	r0, #0
    622c:	beq	6238 <cd_record_add_field+0x40>
    6230:	mvn	r0, #0
    6234:	b	6248 <cd_record_add_field+0x50>
    6238:	ldr	r1, [r4]
    623c:	mov	r3, #0
    6240:	str	r3, [r1, #8]
    6244:	mov	r0, #0
    6248:	ldr	r4, [sp, #8]
    624c:	ldr	lr, [sp, #4]
    6250:	add	sp, sp, #16
    6254:	bx	lr

00006258 <cd_record_finalise>:
    6258:	mov	ip, sp
    625c:	sub	sp, sp, #8
    6260:	str	ip, [sp]
    6264:	str	lr, [sp, #4]
    6268:	ldr	r0, [r0]
    626c:	ldr	r0, [r0, #8]
    6270:	bl	0 <coda_type_record_validate>
    6274:	ldr	lr, [sp, #4]
    6278:	add	sp, sp, #8
    627c:	bx	lr

00006280 <cd_record_init>:
    6280:	mov	ip, sp
    6284:	sub	sp, sp, #16
    6288:	str	ip, [sp]
    628c:	str	lr, [sp, #4]
    6290:	str	r4, [sp, #8]
    6294:	str	r5, [sp, #12]
    6298:	mov	r5, r1
    629c:	mov	r4, r0
    62a0:	mov	r1, r5
    62a4:	mov	r0, r4
    62a8:	bl	b6c <handle_format_attribute_for_type>
    62ac:	cmp	r0, #0
    62b0:	beq	62bc <cd_record_init+0x3c>
    62b4:	mvn	r0, #0
    62b8:	b	638c <cd_record_init+0x10c>
    62bc:	ldr	ip, [r4]
    62c0:	ldr	r3, [pc, #232]	; 63b0 <cd_record_init+0x130>
    62c4:	str	r3, [ip, #40]	; 0x28
    62c8:	ldr	r1, [r4]
    62cc:	ldr	r0, [r1, #44]	; 0x2c
    62d0:	bl	0 <coda_type_record_new>
    62d4:	ldr	r1, [r4]
    62d8:	str	r0, [r1, #8]
    62dc:	ldr	r3, [r4]
    62e0:	ldr	r2, [r3, #8]
    62e4:	cmp	r2, #0
    62e8:	bne	62f4 <cd_record_init+0x74>
    62ec:	mvn	r0, #0
    62f0:	b	638c <cd_record_init+0x10c>
    62f4:	mov	r1, r5
    62f8:	mov	r0, r4
    62fc:	bl	a78 <handle_name_attribute_for_type>
    6300:	cmp	r0, #0
    6304:	beq	6310 <cd_record_init+0x90>
    6308:	mvn	r0, #0
    630c:	b	638c <cd_record_init+0x10c>
    6310:	ldr	r0, [r4]
    6314:	mov	r1, #11
    6318:	ldr	r2, [pc, #140]	; 63ac <cd_record_init+0x12c>
    631c:	ldr	r3, [pc, #144]	; 63b4 <cd_record_init+0x134>
    6320:	bl	e64 <register_sub_element>
    6324:	ldr	r0, [r4]
    6328:	mov	r1, #7
    632c:	ldr	r2, [pc, #116]	; 63a8 <cd_record_init+0x128>
    6330:	ldr	r3, [pc, #132]	; 63bc <cd_record_init+0x13c>
    6334:	bl	e64 <register_sub_element>
    6338:	ldr	r0, [r4]
    633c:	mov	r1, #14
    6340:	ldr	r2, [pc, #112]	; 63b8 <cd_record_init+0x138>
    6344:	ldr	r3, [pc, #120]	; 63c4 <cd_record_init+0x144>
    6348:	bl	e64 <register_sub_element>
    634c:	ldr	r0, [r4]
    6350:	mov	r1, #4
    6354:	ldr	r2, [pc, #100]	; 63c0 <cd_record_init+0x140>
    6358:	ldr	r3, [pc, #68]	; 63a4 <cd_record_init+0x124>
    635c:	bl	e64 <register_sub_element>
    6360:	ldr	r2, [r4]
    6364:	ldr	r0, [pc, #52]	; 63a0 <cd_record_init+0x120>
    6368:	str	r0, [r2, #36]	; 0x24
    636c:	mov	r1, r5
    6370:	mov	r0, r4
    6374:	bl	c3c <handle_xml_name>
    6378:	cmp	r0, #0
    637c:	beq	6388 <cd_record_init+0x108>
    6380:	mvn	r0, #0
    6384:	b	638c <cd_record_init+0x10c>
    6388:	mov	r0, #0
    638c:	ldr	r4, [sp, #8]
    6390:	ldr	r5, [sp, #12]
    6394:	ldr	lr, [sp, #4]
    6398:	add	sp, sp, #16
    639c:	bx	lr
	...

000063c8 <cd_scale_factor_set_type>:
    63c8:	mov	ip, sp
    63cc:	sub	sp, sp, #8
    63d0:	str	ip, [sp]
    63d4:	str	lr, [sp, #4]
    63d8:	ldr	r1, [r0]
    63dc:	ldr	r2, [r1, #396]	; 0x18c
    63e0:	ldr	r1, [r0]
    63e4:	ldr	ip, [r1, #8]
    63e8:	str	ip, [r2, #8]
    63ec:	ldr	r3, [r0]
    63f0:	mov	r2, #0
    63f4:	str	r2, [r3, #8]
    63f8:	mov	r0, #0
    63fc:	ldr	lr, [sp, #4]
    6400:	add	sp, sp, #8
    6404:	bx	lr

00006408 <cd_scale_factor_finalise>:
    6408:	mov	ip, sp
    640c:	sub	sp, sp, #8
    6410:	str	ip, [sp]
    6414:	str	lr, [sp, #4]
    6418:	ldr	r0, [r0]
    641c:	ldr	r0, [r0, #8]
    6420:	cmp	r0, #0
    6424:	bne	6440 <cd_scale_factor_finalise+0x38>
    6428:	movw	r0, #65136	; 0xfe70
    642c:	movt	r0, #65535	; 0xffff
    6430:	ldr	r1, [pc, #24]	; 6450 <cd_scale_factor_finalise+0x48>
    6434:	bl	0 <coda_set_error>
    6438:	mvn	r0, #0
    643c:	b	6444 <cd_scale_factor_finalise+0x3c>
    6440:	mov	r0, #0
    6444:	ldr	lr, [sp, #4]
    6448:	add	sp, sp, #8
    644c:	bx	lr
    6450:	.word	0x00001902

00006454 <cd_scale_factor_init>:
    6454:	mov	ip, sp
    6458:	sub	sp, sp, #16
    645c:	str	ip, [sp]
    6460:	str	lr, [sp, #4]
    6464:	str	r4, [sp, #8]
    6468:	str	r5, [sp, #12]
    646c:	mov	r4, r1
    6470:	mov	r5, r0
    6474:	ldr	r1, [pc, #324]	; 65c0 <cd_scale_factor_init+0x16c>
    6478:	mov	r0, r4
    647c:	bl	998 <get_attribute_value>
    6480:	cmp	r0, #0
    6484:	beq	64a0 <cd_scale_factor_init+0x4c>
    6488:	movw	r0, #65136	; 0xfe70
    648c:	movt	r0, #65535	; 0xffff
    6490:	ldr	r1, [pc, #292]	; 65bc <cd_scale_factor_init+0x168>
    6494:	bl	0 <coda_set_error>
    6498:	mvn	r0, #0
    649c:	b	657c <cd_scale_factor_init+0x128>
    64a0:	ldr	r2, [r5]
    64a4:	ldr	r3, [r2, #396]	; 0x18c
    64a8:	ldr	ip, [r3, #48]	; 0x30
    64ac:	cmp	ip, #0
    64b0:	bne	64c8 <cd_scale_factor_init+0x74>
    64b4:	ldr	r0, [pc, #248]	; 65b4 <cd_scale_factor_init+0x160>
    64b8:	ldr	r1, [pc, #212]	; 6594 <cd_scale_factor_init+0x140>
    64bc:	movw	r2, #3242	; 0xcaa
    64c0:	ldr	r3, [pc, #240]	; 65b8 <cd_scale_factor_init+0x164>
    64c4:	bl	0 <__assert_fail>
    64c8:	ldr	r1, [r5]
    64cc:	ldr	r3, [r5]
    64d0:	ldr	r0, [r3, #396]	; 0x18c
    64d4:	ldr	r0, [r0, #44]	; 0x2c
    64d8:	str	r0, [r1, #44]	; 0x2c
    64dc:	ldr	r2, [r5]
    64e0:	mov	ip, #1
    64e4:	str	ip, [r2, #48]	; 0x30
    64e8:	ldr	r1, [pc, #176]	; 65a0 <cd_scale_factor_init+0x14c>
    64ec:	mov	r0, r4
    64f0:	bl	998 <get_attribute_value>
    64f4:	cmp	r0, #0
    64f8:	beq	6514 <cd_scale_factor_init+0xc0>
    64fc:	movw	r0, #65136	; 0xfe70
    6500:	movt	r0, #65535	; 0xffff
    6504:	ldr	r1, [pc, #160]	; 65ac <cd_scale_factor_init+0x158>
    6508:	bl	0 <coda_set_error>
    650c:	mvn	r0, #0
    6510:	b	657c <cd_scale_factor_init+0x128>
    6514:	ldr	r1, [pc, #148]	; 65b0 <cd_scale_factor_init+0x15c>
    6518:	mov	r0, r4
    651c:	bl	998 <get_attribute_value>
    6520:	cmp	r0, #0
    6524:	beq	6540 <cd_scale_factor_init+0xec>
    6528:	movw	r0, #65136	; 0xfe70
    652c:	movt	r0, #65535	; 0xffff
    6530:	ldr	r1, [pc, #112]	; 65a8 <cd_scale_factor_init+0x154>
    6534:	bl	0 <coda_set_error>
    6538:	mvn	r0, #0
    653c:	b	657c <cd_scale_factor_init+0x128>
    6540:	ldr	r2, [r5]
    6544:	ldr	r1, [pc, #80]	; 659c <cd_scale_factor_init+0x148>
    6548:	str	r1, [r2, #40]	; 0x28
    654c:	ldr	r0, [r5]
    6550:	ldr	r1, [pc, #108]	; 65c4 <cd_scale_factor_init+0x170>
    6554:	bl	ef0 <register_type_elements>
    6558:	ldr	ip, [r5]
    655c:	ldr	r1, [pc, #44]	; 6590 <cd_scale_factor_init+0x13c>
    6560:	str	r1, [ip, #36]	; 0x24
    6564:	ldr	r0, [r5]
    6568:	mov	r1, #11
    656c:	ldr	r2, [pc, #36]	; 6598 <cd_scale_factor_init+0x144>
    6570:	ldr	r3, [pc, #44]	; 65a4 <cd_scale_factor_init+0x150>
    6574:	bl	e64 <register_sub_element>
    6578:	mov	r0, #0
    657c:	ldr	r4, [sp, #8]
    6580:	ldr	r5, [sp, #12]
    6584:	ldr	lr, [sp, #4]
    6588:	add	sp, sp, #16
    658c:	bx	lr
    6590:	.word	0x00000000
    6594:	.word	0x00001939
	...
    65a0:	.word	0x0000047e
    65a4:	.word	0x00000000
    65a8:	.word	0x0000103e
    65ac:	.word	0x000012cc
    65b0:	.word	0x000001f6
    65b4:	.word	0x000009ff
    65b8:	.word	0x00002184
    65bc:	.word	0x00001288
    65c0:	.word	0x00001746
    65c4:	.word	0x00000000

000065c8 <cd_text_set_fixed_value>:
    65c8:	mov	ip, sp
    65cc:	sub	sp, sp, #16
    65d0:	str	ip, [sp]
    65d4:	str	lr, [sp, #4]
    65d8:	str	r4, [sp, #8]
    65dc:	mov	r4, r0
    65e0:	ldr	r0, [r4]
    65e4:	ldr	r0, [r0, #12]
    65e8:	bl	528 <decode_escaped_string>
    65ec:	cmp	r0, #0
    65f0:	bge	660c <cd_text_set_fixed_value+0x44>
    65f4:	movw	r0, #65136	; 0xfe70
    65f8:	movt	r0, #65535	; 0xffff
    65fc:	ldr	r1, [pc, #48]	; 6634 <cd_text_set_fixed_value+0x6c>
    6600:	bl	0 <coda_set_error>
    6604:	mvn	r0, #0
    6608:	b	6624 <cd_text_set_fixed_value+0x5c>
    660c:	ldr	ip, [r4]
    6610:	ldr	r1, [ip, #396]	; 0x18c
    6614:	ldr	r0, [r1, #8]
    6618:	ldr	r1, [r4]
    661c:	ldr	r1, [r1, #12]
    6620:	bl	0 <coda_type_text_set_fixed_value>
    6624:	ldr	r4, [sp, #8]
    6628:	ldr	lr, [sp, #4]
    662c:	add	sp, sp, #16
    6630:	bx	lr
    6634:	.word	0x00000bc3

00006638 <cd_text_set_read_type>:
    6638:	mov	ip, sp
    663c:	sub	sp, sp, #8
    6640:	str	ip, [sp]
    6644:	str	lr, [sp, #4]
    6648:	mov	r1, r0
    664c:	ldr	r2, [r1]
    6650:	ldr	r2, [r2, #396]	; 0x18c
    6654:	ldr	r0, [r2, #8]
    6658:	ldr	ip, [r1]
    665c:	ldr	r1, [ip, #16]
    6660:	bl	0 <coda_type_set_read_type>
    6664:	ldr	lr, [sp, #4]
    6668:	add	sp, sp, #8
    666c:	bx	lr

00006670 <cd_text_finalise>:
    6670:	mov	ip, sp
    6674:	sub	sp, sp, #8
    6678:	str	ip, [sp]
    667c:	str	lr, [sp, #4]
    6680:	ldr	r0, [r0]
    6684:	ldr	r0, [r0, #8]
    6688:	bl	0 <coda_type_text_validate>
    668c:	ldr	lr, [sp, #4]
    6690:	add	sp, sp, #8
    6694:	bx	lr

00006698 <cd_text_init>:
    6698:	mov	ip, sp
    669c:	sub	sp, sp, #16
    66a0:	str	ip, [sp]
    66a4:	str	lr, [sp, #4]
    66a8:	str	r4, [sp, #8]
    66ac:	str	r5, [sp, #12]
    66b0:	mov	r4, r1
    66b4:	mov	r5, r0
    66b8:	mov	r1, r4
    66bc:	mov	r0, r5
    66c0:	bl	b6c <handle_format_attribute_for_type>
    66c4:	cmp	r0, #0
    66c8:	beq	66d4 <cd_text_init+0x3c>
    66cc:	mvn	r0, #0
    66d0:	b	67b8 <cd_text_init+0x120>
    66d4:	ldr	r3, [r5]
    66d8:	ldr	r1, [pc, #252]	; 67dc <cd_text_init+0x144>
    66dc:	str	r1, [r3, #40]	; 0x28
    66e0:	ldr	r0, [r5]
    66e4:	ldr	r0, [r0, #44]	; 0x2c
    66e8:	bl	0 <coda_type_text_new>
    66ec:	ldr	ip, [r5]
    66f0:	str	r0, [ip, #8]
    66f4:	ldr	r2, [r5]
    66f8:	ldr	r1, [r2, #8]
    66fc:	cmp	r1, #0
    6700:	bne	670c <cd_text_init+0x74>
    6704:	mvn	r0, #0
    6708:	b	67b8 <cd_text_init+0x120>
    670c:	mov	r1, r4
    6710:	mov	r0, r5
    6714:	bl	a78 <handle_name_attribute_for_type>
    6718:	cmp	r0, #0
    671c:	beq	6728 <cd_text_init+0x90>
    6720:	mvn	r0, #0
    6724:	b	67b8 <cd_text_init+0x120>
    6728:	ldr	r0, [r5]
    672c:	mov	r1, #11
    6730:	ldr	r2, [pc, #160]	; 67d8 <cd_text_init+0x140>
    6734:	ldr	r3, [pc, #164]	; 67e0 <cd_text_init+0x148>
    6738:	bl	e64 <register_sub_element>
    673c:	ldr	r0, [r5]
    6740:	mov	r1, #8
    6744:	ldr	r2, [pc, #168]	; 67f4 <cd_text_init+0x15c>
    6748:	ldr	r3, [pc, #156]	; 67ec <cd_text_init+0x154>
    674c:	bl	e64 <register_sub_element>
    6750:	ldr	r0, [r5]
    6754:	mov	r1, #16
    6758:	ldr	r2, [pc, #120]	; 67d8 <cd_text_init+0x140>
    675c:	ldr	r3, [pc, #108]	; 67d0 <cd_text_init+0x138>
    6760:	bl	e64 <register_sub_element>
    6764:	ldr	r0, [r5]
    6768:	mov	r1, #28
    676c:	ldr	r2, [pc, #88]	; 67cc <cd_text_init+0x134>
    6770:	ldr	r3, [pc, #112]	; 67e8 <cd_text_init+0x150>
    6774:	bl	e64 <register_sub_element>
    6778:	ldr	r0, [r5]
    677c:	mov	r1, #4
    6780:	ldr	r2, [pc, #104]	; 67f0 <cd_text_init+0x158>
    6784:	ldr	r3, [pc, #72]	; 67d4 <cd_text_init+0x13c>
    6788:	bl	e64 <register_sub_element>
    678c:	ldr	r2, [r5]
    6790:	ldr	ip, [pc, #76]	; 67e4 <cd_text_init+0x14c>
    6794:	str	ip, [r2, #36]	; 0x24
    6798:	mov	r1, r4
    679c:	mov	r0, r5
    67a0:	bl	c3c <handle_xml_name>
    67a4:	cmp	r0, #0
    67a8:	beq	67b4 <cd_text_init+0x11c>
    67ac:	mvn	r0, #0
    67b0:	b	67b8 <cd_text_init+0x120>
    67b4:	mov	r0, #0
    67b8:	ldr	r4, [sp, #8]
    67bc:	ldr	r5, [sp, #12]
    67c0:	ldr	lr, [sp, #4]
    67c4:	add	sp, sp, #16
    67c8:	bx	lr
	...

000067f8 <cd_time_set_type>:
    67f8:	mov	ip, sp
    67fc:	sub	sp, sp, #8
    6800:	str	ip, [sp]
    6804:	str	lr, [sp, #4]
    6808:	mov	r1, r0
    680c:	ldr	r2, [r1]
    6810:	ldr	r2, [r2, #396]	; 0x18c
    6814:	ldr	r0, [r2, #8]
    6818:	ldr	ip, [r1]
    681c:	ldr	r1, [ip, #8]
    6820:	bl	0 <coda_type_time_set_base_type>
    6824:	ldr	lr, [sp, #4]
    6828:	add	sp, sp, #8
    682c:	bx	lr

00006830 <cd_time_add_mapping>:
    6830:	mov	ip, sp
    6834:	sub	sp, sp, #16
    6838:	str	ip, [sp]
    683c:	str	lr, [sp, #4]
    6840:	str	r4, [sp, #8]
    6844:	mov	r4, r0
    6848:	ldr	r0, [r4]
    684c:	ldr	r2, [r0, #396]	; 0x18c
    6850:	ldr	r0, [r2, #8]
    6854:	ldr	r1, [r4]
    6858:	ldr	r1, [r1, #8]
    685c:	bl	0 <coda_type_time_add_ascii_float_mapping>
    6860:	cmp	r0, #0
    6864:	beq	6870 <cd_time_add_mapping+0x40>
    6868:	mvn	r0, #0
    686c:	b	6880 <cd_time_add_mapping+0x50>
    6870:	ldr	r1, [r4]
    6874:	mov	r3, #0
    6878:	str	r3, [r1, #8]
    687c:	mov	r0, #0
    6880:	ldr	r4, [sp, #8]
    6884:	ldr	lr, [sp, #4]
    6888:	add	sp, sp, #16
    688c:	bx	lr

00006890 <cd_time_finalise>:
    6890:	mov	ip, sp
    6894:	sub	sp, sp, #8
    6898:	str	ip, [sp]
    689c:	str	lr, [sp, #4]
    68a0:	ldr	r0, [r0]
    68a4:	ldr	r0, [r0, #8]
    68a8:	bl	0 <coda_type_time_validate>
    68ac:	ldr	lr, [sp, #4]
    68b0:	add	sp, sp, #8
    68b4:	bx	lr

000068b8 <cd_time_init>:
    68b8:	mov	ip, sp
    68bc:	sub	sp, sp, #40	; 0x28
    68c0:	str	ip, [sp]
    68c4:	str	lr, [sp, #4]
    68c8:	str	r4, [sp, #8]
    68cc:	str	r5, [sp, #12]
    68d0:	str	r6, [sp, #16]
    68d4:	str	r7, [sp, #20]
    68d8:	str	r8, [sp, #24]
    68dc:	str	r9, [sp, #28]
    68e0:	mov	r4, r1
    68e4:	mov	r5, r0
    68e8:	mov	r6, #0
    68ec:	mov	r1, r4
    68f0:	mov	r0, r5
    68f4:	bl	b6c <handle_format_attribute_for_type>
    68f8:	cmp	r0, #0
    68fc:	beq	6908 <cd_time_init+0x50>
    6900:	mvn	r0, #0
    6904:	b	73ac <cd_time_init+0xaf4>
    6908:	ldr	r1, [pc, #2860]	; 743c <cd_time_init+0xb84>
    690c:	ldr	r2, [r5]
    6910:	ldr	r2, [r2]
    6914:	mov	r0, r4
    6918:	bl	a00 <get_mandatory_attribute_value>
    691c:	mov	r8, r0
    6920:	cmp	r8, #0
    6924:	bne	6930 <cd_time_init+0x78>
    6928:	mvn	r0, #0
    692c:	b	73ac <cd_time_init+0xaf4>
    6930:	ldr	ip, [r5]
    6934:	ldr	r3, [ip, #44]	; 0x2c
    6938:	cmp	r3, #0
    693c:	beq	6eb8 <cd_time_init+0x600>
    6940:	ldr	r0, [r5]
    6944:	ldr	r0, [r0, #44]	; 0x2c
    6948:	cmp	r0, #1
    694c:	bne	71fc <cd_time_init+0x944>
    6950:	ldr	r1, [pc, #2852]	; 747c <cd_time_init+0xbc4>
    6954:	mov	r0, r8
    6958:	bl	0 <strcmp>
    695c:	cmp	r0, #0
    6960:	beq	6d38 <cd_time_init+0x480>
    6964:	ldr	r1, [pc, #2784]	; 744c <cd_time_init+0xb94>
    6968:	mov	r0, r8
    696c:	bl	0 <strcmp>
    6970:	cmp	r0, #0
    6974:	beq	6c2c <cd_time_init+0x374>
    6978:	ldr	r1, [pc, #2736]	; 7430 <cd_time_init+0xb78>
    697c:	mov	r0, r8
    6980:	bl	0 <strcmp>
    6984:	cmp	r0, #0
    6988:	beq	6b20 <cd_time_init+0x268>
    698c:	ldr	r1, [pc, #2820]	; 7498 <cd_time_init+0xbe0>
    6990:	mov	r0, r8
    6994:	bl	0 <strcmp>
    6998:	cmp	r0, #0
    699c:	bne	71fc <cd_time_init+0x944>
    69a0:	ldr	r8, [pc, #2756]	; 746c <cd_time_init+0xbb4>
    69a4:	ldr	r1, [r5]
    69a8:	ldr	r0, [r1, #44]	; 0x2c
    69ac:	bl	0 <coda_type_record_new>
    69b0:	mov	r6, r0
    69b4:	ldr	r1, [pc, #2716]	; 7458 <cd_time_init+0xba0>
    69b8:	mov	r0, r6
    69bc:	bl	0 <coda_type_set_description>
    69c0:	ldr	r2, [r5]
    69c4:	ldr	r0, [r2, #44]	; 0x2c
    69c8:	mov	r1, #2
    69cc:	bl	0 <coda_type_number_new>
    69d0:	mov	r7, r0
    69d4:	ldr	r1, [pc, #2552]	; 73d4 <cd_time_init+0xb1c>
    69d8:	mov	r0, r7
    69dc:	bl	0 <coda_type_set_description>
    69e0:	mov	r1, #3
    69e4:	mov	r0, r7
    69e8:	bl	0 <coda_type_set_read_type>
    69ec:	mov	r3, #0
    69f0:	mov	r2, #16
    69f4:	mov	r0, r7
    69f8:	bl	0 <coda_type_set_bit_size>
    69fc:	ldr	r1, [pc, #2720]	; 74a4 <cd_time_init+0xbec>
    6a00:	mov	r0, r7
    6a04:	bl	0 <coda_type_number_set_unit>
    6a08:	ldr	r0, [pc, #2596]	; 7434 <cd_time_init+0xb7c>
    6a0c:	bl	0 <coda_type_record_field_new>
    6a10:	mov	r9, r0
    6a14:	mov	r1, r7
    6a18:	mov	r0, r9
    6a1c:	bl	0 <coda_type_record_field_set_type>
    6a20:	mov	r0, r7
    6a24:	bl	0 <coda_type_release>
    6a28:	mov	r1, r9
    6a2c:	mov	r0, r6
    6a30:	bl	0 <coda_type_record_add_field>
    6a34:	ldr	r2, [r5]
    6a38:	ldr	r0, [r2, #44]	; 0x2c
    6a3c:	mov	r1, #2
    6a40:	bl	0 <coda_type_number_new>
    6a44:	mov	r9, r0
    6a48:	ldr	r1, [pc, #2672]	; 74c0 <cd_time_init+0xc08>
    6a4c:	mov	r0, r9
    6a50:	bl	0 <coda_type_set_description>
    6a54:	mov	r1, #5
    6a58:	mov	r0, r9
    6a5c:	bl	0 <coda_type_set_read_type>
    6a60:	mov	r3, #0
    6a64:	mov	r2, #32
    6a68:	mov	r0, r9
    6a6c:	bl	0 <coda_type_set_bit_size>
    6a70:	ldr	r1, [pc, #2416]	; 73e8 <cd_time_init+0xb30>
    6a74:	mov	r0, r9
    6a78:	bl	0 <coda_type_number_set_unit>
    6a7c:	ldr	r0, [pc, #2560]	; 7484 <cd_time_init+0xbcc>
    6a80:	bl	0 <coda_type_record_field_new>
    6a84:	mov	r7, r0
    6a88:	mov	r1, r9
    6a8c:	mov	r0, r7
    6a90:	bl	0 <coda_type_record_field_set_type>
    6a94:	mov	r0, r9
    6a98:	bl	0 <coda_type_release>
    6a9c:	mov	r1, r7
    6aa0:	mov	r0, r6
    6aa4:	bl	0 <coda_type_record_add_field>
    6aa8:	ldr	r0, [r5]
    6aac:	ldr	r0, [r0, #44]	; 0x2c
    6ab0:	mov	r1, #2
    6ab4:	bl	0 <coda_type_number_new>
    6ab8:	mov	r9, r0
    6abc:	ldr	r1, [pc, #2480]	; 7474 <cd_time_init+0xbbc>
    6ac0:	mov	r0, r9
    6ac4:	bl	0 <coda_type_set_description>
    6ac8:	mov	r1, #3
    6acc:	mov	r0, r9
    6ad0:	bl	0 <coda_type_set_read_type>
    6ad4:	mov	r3, #0
    6ad8:	mov	r2, #16
    6adc:	mov	r0, r9
    6ae0:	bl	0 <coda_type_set_bit_size>
    6ae4:	ldr	r1, [pc, #2532]	; 74d0 <cd_time_init+0xc18>
    6ae8:	mov	r0, r9
    6aec:	bl	0 <coda_type_number_set_unit>
    6af0:	ldr	r0, [pc, #2412]	; 7464 <cd_time_init+0xbac>
    6af4:	bl	0 <coda_type_record_field_new>
    6af8:	mov	r7, r0
    6afc:	mov	r1, r9
    6b00:	mov	r0, r7
    6b04:	bl	0 <coda_type_record_field_set_type>
    6b08:	mov	r0, r9
    6b0c:	bl	0 <coda_type_release>
    6b10:	mov	r1, r7
    6b14:	mov	r0, r6
    6b18:	bl	0 <coda_type_record_add_field>
    6b1c:	b	71fc <cd_time_init+0x944>
    6b20:	ldr	r8, [pc, #2444]	; 74b4 <cd_time_init+0xbfc>
    6b24:	ldr	r0, [r5]
    6b28:	ldr	r0, [r0, #44]	; 0x2c
    6b2c:	bl	0 <coda_type_record_new>
    6b30:	mov	r6, r0
    6b34:	ldr	r1, [pc, #2468]	; 74e0 <cd_time_init+0xc28>
    6b38:	mov	r0, r6
    6b3c:	bl	0 <coda_type_set_description>
    6b40:	ldr	r0, [r5]
    6b44:	ldr	r0, [r0, #44]	; 0x2c
    6b48:	mov	r1, #2
    6b4c:	bl	0 <coda_type_number_new>
    6b50:	mov	r7, r0
    6b54:	ldr	r1, [pc, #2168]	; 73d4 <cd_time_init+0xb1c>
    6b58:	mov	r0, r7
    6b5c:	bl	0 <coda_type_set_description>
    6b60:	mov	r1, #3
    6b64:	mov	r0, r7
    6b68:	bl	0 <coda_type_set_read_type>
    6b6c:	mov	r3, #0
    6b70:	mov	r2, #16
    6b74:	mov	r0, r7
    6b78:	bl	0 <coda_type_set_bit_size>
    6b7c:	ldr	r1, [pc, #2336]	; 74a4 <cd_time_init+0xbec>
    6b80:	mov	r0, r7
    6b84:	bl	0 <coda_type_number_set_unit>
    6b88:	ldr	r0, [pc, #2212]	; 7434 <cd_time_init+0xb7c>
    6b8c:	bl	0 <coda_type_record_field_new>
    6b90:	mov	r9, r0
    6b94:	mov	r1, r7
    6b98:	mov	r0, r9
    6b9c:	bl	0 <coda_type_record_field_set_type>
    6ba0:	mov	r0, r7
    6ba4:	bl	0 <coda_type_release>
    6ba8:	mov	r1, r9
    6bac:	mov	r0, r6
    6bb0:	bl	0 <coda_type_record_add_field>
    6bb4:	ldr	r1, [r5]
    6bb8:	ldr	r0, [r1, #44]	; 0x2c
    6bbc:	mov	r1, #2
    6bc0:	bl	0 <coda_type_number_new>
    6bc4:	mov	r7, r0
    6bc8:	ldr	r1, [pc, #2288]	; 74c0 <cd_time_init+0xc08>
    6bcc:	mov	r0, r7
    6bd0:	bl	0 <coda_type_set_description>
    6bd4:	mov	r1, #5
    6bd8:	mov	r0, r7
    6bdc:	bl	0 <coda_type_set_read_type>
    6be0:	mov	r3, #0
    6be4:	mov	r2, #32
    6be8:	mov	r0, r7
    6bec:	bl	0 <coda_type_set_bit_size>
    6bf0:	ldr	r1, [pc, #2032]	; 73e8 <cd_time_init+0xb30>
    6bf4:	mov	r0, r7
    6bf8:	bl	0 <coda_type_number_set_unit>
    6bfc:	ldr	r0, [pc, #2176]	; 7484 <cd_time_init+0xbcc>
    6c00:	bl	0 <coda_type_record_field_new>
    6c04:	mov	r9, r0
    6c08:	mov	r1, r7
    6c0c:	mov	r0, r9
    6c10:	bl	0 <coda_type_record_field_set_type>
    6c14:	mov	r0, r7
    6c18:	bl	0 <coda_type_release>
    6c1c:	mov	r1, r9
    6c20:	mov	r0, r6
    6c24:	bl	0 <coda_type_record_add_field>
    6c28:	b	71fc <cd_time_init+0x944>
    6c2c:	ldr	r8, [pc, #2076]	; 7450 <cd_time_init+0xb98>
    6c30:	ldr	ip, [r5]
    6c34:	ldr	r0, [ip, #44]	; 0x2c
    6c38:	bl	0 <coda_type_record_new>
    6c3c:	mov	r6, r0
    6c40:	ldr	r1, [pc, #2012]	; 7424 <cd_time_init+0xb6c>
    6c44:	mov	r0, r6
    6c48:	bl	0 <coda_type_set_description>
    6c4c:	ldr	r0, [r5]
    6c50:	ldr	r0, [r0, #44]	; 0x2c
    6c54:	mov	r1, #2
    6c58:	bl	0 <coda_type_number_new>
    6c5c:	mov	r9, r0
    6c60:	ldr	r1, [pc, #2128]	; 74b8 <cd_time_init+0xc00>
    6c64:	mov	r0, r9
    6c68:	bl	0 <coda_type_set_description>
    6c6c:	mov	r1, #4
    6c70:	mov	r0, r9
    6c74:	bl	0 <coda_type_set_read_type>
    6c78:	mov	r3, #0
    6c7c:	mov	r2, #32
    6c80:	mov	r0, r9
    6c84:	bl	0 <coda_type_set_bit_size>
    6c88:	ldr	r1, [pc, #2080]	; 74b0 <cd_time_init+0xbf8>
    6c8c:	mov	r0, r9
    6c90:	bl	0 <coda_type_number_set_unit>
    6c94:	ldr	r0, [pc, #1944]	; 7434 <cd_time_init+0xb7c>
    6c98:	bl	0 <coda_type_record_field_new>
    6c9c:	mov	r7, r0
    6ca0:	mov	r1, r9
    6ca4:	mov	r0, r7
    6ca8:	bl	0 <coda_type_record_field_set_type>
    6cac:	mov	r0, r9
    6cb0:	bl	0 <coda_type_release>
    6cb4:	mov	r1, r7
    6cb8:	mov	r0, r6
    6cbc:	bl	0 <coda_type_record_add_field>
    6cc0:	ldr	r0, [r5]
    6cc4:	ldr	r0, [r0, #44]	; 0x2c
    6cc8:	mov	r1, #2
    6ccc:	bl	0 <coda_type_number_new>
    6cd0:	mov	r7, r0
    6cd4:	ldr	r1, [pc, #2020]	; 74c0 <cd_time_init+0xc08>
    6cd8:	mov	r0, r7
    6cdc:	bl	0 <coda_type_set_description>
    6ce0:	mov	r1, #5
    6ce4:	mov	r0, r7
    6ce8:	bl	0 <coda_type_set_read_type>
    6cec:	mov	r3, #0
    6cf0:	mov	r2, #32
    6cf4:	mov	r0, r7
    6cf8:	bl	0 <coda_type_set_bit_size>
    6cfc:	ldr	r1, [pc, #1764]	; 73e8 <cd_time_init+0xb30>
    6d00:	mov	r0, r7
    6d04:	bl	0 <coda_type_number_set_unit>
    6d08:	ldr	r0, [pc, #1908]	; 7484 <cd_time_init+0xbcc>
    6d0c:	bl	0 <coda_type_record_field_new>
    6d10:	mov	r9, r0
    6d14:	mov	r1, r7
    6d18:	mov	r0, r9
    6d1c:	bl	0 <coda_type_record_field_set_type>
    6d20:	mov	r0, r7
    6d24:	bl	0 <coda_type_release>
    6d28:	mov	r1, r9
    6d2c:	mov	r0, r6
    6d30:	bl	0 <coda_type_record_add_field>
    6d34:	b	71fc <cd_time_init+0x944>
    6d38:	ldr	r8, [pc, #1868]	; 748c <cd_time_init+0xbd4>
    6d3c:	ldr	r0, [r5]
    6d40:	ldr	r0, [r0, #44]	; 0x2c
    6d44:	bl	0 <coda_type_record_new>
    6d48:	mov	r6, r0
    6d4c:	ldr	r1, [pc, #1676]	; 73e0 <cd_time_init+0xb28>
    6d50:	mov	r0, r6
    6d54:	bl	0 <coda_type_set_description>
    6d58:	ldr	r0, [r5]
    6d5c:	ldr	r0, [r0, #44]	; 0x2c
    6d60:	mov	r1, #2
    6d64:	bl	0 <coda_type_number_new>
    6d68:	mov	r7, r0
    6d6c:	ldr	r1, [pc, #1876]	; 74c8 <cd_time_init+0xc10>
    6d70:	mov	r0, r7
    6d74:	bl	0 <coda_type_set_description>
    6d78:	mov	r1, #4
    6d7c:	mov	r0, r7
    6d80:	bl	0 <coda_type_set_read_type>
    6d84:	mov	r3, #0
    6d88:	mov	r2, #32
    6d8c:	mov	r0, r7
    6d90:	bl	0 <coda_type_set_bit_size>
    6d94:	ldr	r1, [pc, #1800]	; 74a4 <cd_time_init+0xbec>
    6d98:	mov	r0, r7
    6d9c:	bl	0 <coda_type_number_set_unit>
    6da0:	ldr	r0, [pc, #1676]	; 7434 <cd_time_init+0xb7c>
    6da4:	bl	0 <coda_type_record_field_new>
    6da8:	mov	r9, r0
    6dac:	mov	r1, r7
    6db0:	mov	r0, r9
    6db4:	bl	0 <coda_type_record_field_set_type>
    6db8:	mov	r0, r7
    6dbc:	bl	0 <coda_type_release>
    6dc0:	mov	r1, r9
    6dc4:	mov	r0, r6
    6dc8:	bl	0 <coda_type_record_add_field>
    6dcc:	ldr	r2, [r5]
    6dd0:	ldr	r0, [r2, #44]	; 0x2c
    6dd4:	mov	r1, #2
    6dd8:	bl	0 <coda_type_number_new>
    6ddc:	mov	r7, r0
    6de0:	ldr	r1, [pc, #1540]	; 73ec <cd_time_init+0xb34>
    6de4:	mov	r0, r7
    6de8:	bl	0 <coda_type_set_description>
    6dec:	mov	r1, #5
    6df0:	mov	r0, r7
    6df4:	bl	0 <coda_type_set_read_type>
    6df8:	mov	r3, #0
    6dfc:	mov	r2, #32
    6e00:	mov	r0, r7
    6e04:	bl	0 <coda_type_set_bit_size>
    6e08:	ldr	r1, [pc, #1480]	; 73d8 <cd_time_init+0xb20>
    6e0c:	mov	r0, r7
    6e10:	bl	0 <coda_type_number_set_unit>
    6e14:	ldr	r0, [pc, #1720]	; 74d4 <cd_time_init+0xc1c>
    6e18:	bl	0 <coda_type_record_field_new>
    6e1c:	mov	r9, r0
    6e20:	mov	r1, r7
    6e24:	mov	r0, r9
    6e28:	bl	0 <coda_type_record_field_set_type>
    6e2c:	mov	r0, r7
    6e30:	bl	0 <coda_type_release>
    6e34:	mov	r1, r9
    6e38:	mov	r0, r6
    6e3c:	bl	0 <coda_type_record_add_field>
    6e40:	ldr	r3, [r5]
    6e44:	ldr	r0, [r3, #44]	; 0x2c
    6e48:	mov	r1, #2
    6e4c:	bl	0 <coda_type_number_new>
    6e50:	mov	r9, r0
    6e54:	ldr	r1, [pc, #1660]	; 74d8 <cd_time_init+0xc20>
    6e58:	mov	r0, r9
    6e5c:	bl	0 <coda_type_set_description>
    6e60:	mov	r1, #5
    6e64:	mov	r0, r9
    6e68:	bl	0 <coda_type_set_read_type>
    6e6c:	mov	r3, #0
    6e70:	mov	r2, #32
    6e74:	mov	r0, r9
    6e78:	bl	0 <coda_type_set_bit_size>
    6e7c:	ldr	r1, [pc, #1612]	; 74d0 <cd_time_init+0xc18>
    6e80:	mov	r0, r9
    6e84:	bl	0 <coda_type_number_set_unit>
    6e88:	ldr	r0, [pc, #1492]	; 7464 <cd_time_init+0xbac>
    6e8c:	bl	0 <coda_type_record_field_new>
    6e90:	mov	r7, r0
    6e94:	mov	r1, r9
    6e98:	mov	r0, r7
    6e9c:	bl	0 <coda_type_record_field_set_type>
    6ea0:	mov	r0, r9
    6ea4:	bl	0 <coda_type_release>
    6ea8:	mov	r1, r7
    6eac:	mov	r0, r6
    6eb0:	bl	0 <coda_type_record_add_field>
    6eb4:	b	71fc <cd_time_init+0x944>
    6eb8:	ldr	r1, [pc, #1308]	; 73dc <cd_time_init+0xb24>
    6ebc:	mov	r0, r8
    6ec0:	bl	0 <strcmp>
    6ec4:	cmp	r0, #0
    6ec8:	beq	71c0 <cd_time_init+0x908>
    6ecc:	ldr	r1, [pc, #1420]	; 7460 <cd_time_init+0xba8>
    6ed0:	mov	r0, r8
    6ed4:	bl	0 <strcmp>
    6ed8:	cmp	r0, #0
    6edc:	beq	7180 <cd_time_init+0x8c8>
    6ee0:	ldr	r1, [pc, #1408]	; 7468 <cd_time_init+0xbb0>
    6ee4:	mov	r0, r8
    6ee8:	bl	0 <strcmp>
    6eec:	cmp	r0, #0
    6ef0:	beq	7140 <cd_time_init+0x888>
    6ef4:	ldr	r1, [pc, #1480]	; 74c4 <cd_time_init+0xc0c>
    6ef8:	mov	r0, r8
    6efc:	bl	0 <strcmp>
    6f00:	cmp	r0, #0
    6f04:	beq	7100 <cd_time_init+0x848>
    6f08:	ldr	r1, [pc, #1248]	; 73f0 <cd_time_init+0xb38>
    6f0c:	mov	r0, r8
    6f10:	bl	0 <strcmp>
    6f14:	cmp	r0, #0
    6f18:	beq	70c0 <cd_time_init+0x808>
    6f1c:	ldr	r1, [pc, #1336]	; 745c <cd_time_init+0xba4>
    6f20:	mov	r0, r8
    6f24:	bl	0 <strcmp>
    6f28:	cmp	r0, #0
    6f2c:	beq	7080 <cd_time_init+0x7c8>
    6f30:	ldr	r1, [pc, #1268]	; 742c <cd_time_init+0xb74>
    6f34:	mov	r0, r8
    6f38:	bl	0 <strcmp>
    6f3c:	cmp	r0, #0
    6f40:	beq	7040 <cd_time_init+0x788>
    6f44:	ldr	r1, [pc, #1196]	; 73f8 <cd_time_init+0xb40>
    6f48:	mov	r0, r8
    6f4c:	bl	0 <strcmp>
    6f50:	cmp	r0, #0
    6f54:	beq	7000 <cd_time_init+0x748>
    6f58:	ldr	r1, [pc, #1196]	; 740c <cd_time_init+0xb54>
    6f5c:	mov	r0, r8
    6f60:	bl	0 <strcmp>
    6f64:	cmp	r0, #0
    6f68:	beq	6fc0 <cd_time_init+0x708>
    6f6c:	ldr	r1, [pc, #1184]	; 7414 <cd_time_init+0xb5c>
    6f70:	mov	r0, r8
    6f74:	bl	0 <strcmp>
    6f78:	cmp	r0, #0
    6f7c:	bne	71fc <cd_time_init+0x944>
    6f80:	ldr	r8, [pc, #1348]	; 74cc <cd_time_init+0xc14>
    6f84:	ldr	ip, [r5]
    6f88:	ldr	r0, [ip, #44]	; 0x2c
    6f8c:	bl	0 <coda_type_text_new>
    6f90:	mov	r6, r0
    6f94:	mov	r1, #11
    6f98:	mov	r0, r6
    6f9c:	bl	0 <coda_type_set_read_type>
    6fa0:	ldr	r1, [pc, #1108]	; 73fc <cd_time_init+0xb44>
    6fa4:	mov	r0, r6
    6fa8:	bl	0 <coda_type_set_description>
    6fac:	mov	r3, #0
    6fb0:	mov	r2, #24
    6fb4:	mov	r0, r6
    6fb8:	bl	0 <coda_type_set_byte_size>
    6fbc:	b	71fc <cd_time_init+0x944>
    6fc0:	ldr	r8, [pc, #1096]	; 7410 <cd_time_init+0xb58>
    6fc4:	ldr	ip, [r5]
    6fc8:	ldr	r0, [ip, #44]	; 0x2c
    6fcc:	bl	0 <coda_type_text_new>
    6fd0:	mov	r6, r0
    6fd4:	mov	r1, #11
    6fd8:	mov	r0, r6
    6fdc:	bl	0 <coda_type_set_read_type>
    6fe0:	ldr	r1, [pc, #1192]	; 7490 <cd_time_init+0xbd8>
    6fe4:	mov	r0, r6
    6fe8:	bl	0 <coda_type_set_description>
    6fec:	mov	r3, #0
    6ff0:	mov	r2, #17
    6ff4:	mov	r0, r6
    6ff8:	bl	0 <coda_type_set_byte_size>
    6ffc:	b	71fc <cd_time_init+0x944>
    7000:	ldr	r8, [pc, #1080]	; 7440 <cd_time_init+0xb88>
    7004:	ldr	ip, [r5]
    7008:	ldr	r0, [ip, #44]	; 0x2c
    700c:	bl	0 <coda_type_text_new>
    7010:	mov	r6, r0
    7014:	mov	r1, #11
    7018:	mov	r0, r6
    701c:	bl	0 <coda_type_set_read_type>
    7020:	ldr	r1, [pc, #1008]	; 7418 <cd_time_init+0xb60>
    7024:	mov	r0, r6
    7028:	bl	0 <coda_type_set_description>
    702c:	mov	r3, #0
    7030:	mov	r2, #30
    7034:	mov	r0, r6
    7038:	bl	0 <coda_type_set_byte_size>
    703c:	b	71fc <cd_time_init+0x944>
    7040:	ldr	r8, [pc, #1172]	; 74dc <cd_time_init+0xc24>
    7044:	ldr	r3, [r5]
    7048:	ldr	r0, [r3, #44]	; 0x2c
    704c:	bl	0 <coda_type_text_new>
    7050:	mov	r6, r0
    7054:	mov	r1, #11
    7058:	mov	r0, r6
    705c:	bl	0 <coda_type_set_read_type>
    7060:	ldr	r1, [pc, #992]	; 7448 <cd_time_init+0xb90>
    7064:	mov	r0, r6
    7068:	bl	0 <coda_type_set_description>
    706c:	mov	r3, #0
    7070:	mov	r2, #26
    7074:	mov	r0, r6
    7078:	bl	0 <coda_type_set_byte_size>
    707c:	b	71fc <cd_time_init+0x944>
    7080:	ldr	r8, [pc, #1008]	; 7478 <cd_time_init+0xbc0>
    7084:	ldr	r3, [r5]
    7088:	ldr	r0, [r3, #44]	; 0x2c
    708c:	bl	0 <coda_type_text_new>
    7090:	mov	r6, r0
    7094:	mov	r1, #11
    7098:	mov	r0, r6
    709c:	bl	0 <coda_type_set_read_type>
    70a0:	ldr	r1, [pc, #940]	; 7454 <cd_time_init+0xb9c>
    70a4:	mov	r0, r6
    70a8:	bl	0 <coda_type_set_description>
    70ac:	mov	r3, #0
    70b0:	mov	r2, #23
    70b4:	mov	r0, r6
    70b8:	bl	0 <coda_type_set_byte_size>
    70bc:	b	71fc <cd_time_init+0x944>
    70c0:	ldr	r8, [pc, #1012]	; 74bc <cd_time_init+0xc04>
    70c4:	ldr	ip, [r5]
    70c8:	ldr	r0, [ip, #44]	; 0x2c
    70cc:	bl	0 <coda_type_text_new>
    70d0:	mov	r6, r0
    70d4:	mov	r1, #11
    70d8:	mov	r0, r6
    70dc:	bl	0 <coda_type_set_read_type>
    70e0:	ldr	r1, [pc, #820]	; 741c <cd_time_init+0xb64>
    70e4:	mov	r0, r6
    70e8:	bl	0 <coda_type_set_description>
    70ec:	mov	r3, #0
    70f0:	mov	r2, #19
    70f4:	mov	r0, r6
    70f8:	bl	0 <coda_type_set_byte_size>
    70fc:	b	71fc <cd_time_init+0x944>
    7100:	ldr	r8, [pc, #896]	; 7488 <cd_time_init+0xbd0>
    7104:	ldr	r1, [r5]
    7108:	ldr	r0, [r1, #44]	; 0x2c
    710c:	bl	0 <coda_type_text_new>
    7110:	mov	r6, r0
    7114:	mov	r1, #11
    7118:	mov	r0, r6
    711c:	bl	0 <coda_type_set_read_type>
    7120:	ldr	r1, [pc, #856]	; 7480 <cd_time_init+0xbc8>
    7124:	mov	r0, r6
    7128:	bl	0 <coda_type_set_description>
    712c:	mov	r3, #0
    7130:	mov	r2, #18
    7134:	mov	r0, r6
    7138:	bl	0 <coda_type_set_byte_size>
    713c:	b	71fc <cd_time_init+0x944>
    7140:	ldr	r8, [pc, #728]	; 7420 <cd_time_init+0xb68>
    7144:	ldr	ip, [r5]
    7148:	ldr	r0, [ip, #44]	; 0x2c
    714c:	bl	0 <coda_type_text_new>
    7150:	mov	r6, r0
    7154:	mov	r1, #11
    7158:	mov	r0, r6
    715c:	bl	0 <coda_type_set_read_type>
    7160:	ldr	r1, [pc, #820]	; 749c <cd_time_init+0xbe4>
    7164:	mov	r0, r6
    7168:	bl	0 <coda_type_set_description>
    716c:	mov	r3, #0
    7170:	mov	r2, #15
    7174:	mov	r0, r6
    7178:	bl	0 <coda_type_set_byte_size>
    717c:	b	71fc <cd_time_init+0x944>
    7180:	ldr	r8, [pc, #800]	; 74a8 <cd_time_init+0xbf0>
    7184:	ldr	r2, [r5]
    7188:	ldr	r0, [r2, #44]	; 0x2c
    718c:	bl	0 <coda_type_text_new>
    7190:	mov	r6, r0
    7194:	mov	r1, #11
    7198:	mov	r0, r6
    719c:	bl	0 <coda_type_set_read_type>
    71a0:	ldr	r1, [pc, #748]	; 7494 <cd_time_init+0xbdc>
    71a4:	mov	r0, r6
    71a8:	bl	0 <coda_type_set_description>
    71ac:	mov	r3, #0
    71b0:	mov	r2, #24
    71b4:	mov	r0, r6
    71b8:	bl	0 <coda_type_set_byte_size>
    71bc:	b	71fc <cd_time_init+0x944>
    71c0:	ldr	r8, [pc, #556]	; 73f4 <cd_time_init+0xb3c>
    71c4:	ldr	r0, [r5]
    71c8:	ldr	r0, [r0, #44]	; 0x2c
    71cc:	bl	0 <coda_type_text_new>
    71d0:	mov	r6, r0
    71d4:	mov	r1, #11
    71d8:	mov	r0, r6
    71dc:	bl	0 <coda_type_set_read_type>
    71e0:	ldr	r1, [pc, #576]	; 7428 <cd_time_init+0xb70>
    71e4:	mov	r0, r6
    71e8:	bl	0 <coda_type_set_description>
    71ec:	mov	r3, #0
    71f0:	mov	r2, #27
    71f4:	mov	r0, r6
    71f8:	bl	0 <coda_type_set_byte_size>
    71fc:	add	r1, sp, #36	; 0x24
    7200:	mov	r0, r8
    7204:	bl	0 <coda_expression_from_string>
    7208:	cmp	r0, #0
    720c:	beq	7220 <cd_time_init+0x968>
    7210:	mov	r0, r6
    7214:	bl	0 <coda_type_release>
    7218:	mvn	r0, #0
    721c:	b	73ac <cd_time_init+0xaf4>
    7220:	ldr	r0, [sp, #36]	; 0x24
    7224:	add	r1, sp, #32
    7228:	bl	0 <coda_expression_get_type>
    722c:	cmp	r0, #0
    7230:	beq	724c <cd_time_init+0x994>
    7234:	mov	r0, r6
    7238:	bl	0 <coda_type_release>
    723c:	ldr	r0, [sp, #36]	; 0x24
    7240:	bl	0 <coda_expression_delete>
    7244:	mvn	r0, #0
    7248:	b	73ac <cd_time_init+0xaf4>
    724c:	ldr	r3, [sp, #32]
    7250:	cmp	r3, #2
    7254:	beq	7280 <cd_time_init+0x9c8>
    7258:	mov	r0, r6
    725c:	bl	0 <coda_type_release>
    7260:	ldr	r0, [sp, #36]	; 0x24
    7264:	bl	0 <coda_expression_delete>
    7268:	movw	r0, #65136	; 0xfe70
    726c:	movt	r0, #65535	; 0xffff
    7270:	ldr	r1, [pc, #344]	; 73d0 <cd_time_init+0xb18>
    7274:	bl	0 <coda_set_error>
    7278:	mvn	r0, #0
    727c:	b	73ac <cd_time_init+0xaf4>
    7280:	ldr	ip, [r5]
    7284:	ldr	r2, [pc, #376]	; 7404 <cd_time_init+0xb4c>
    7288:	str	r2, [ip, #40]	; 0x28
    728c:	ldr	r0, [r5]
    7290:	ldr	r0, [r0, #44]	; 0x2c
    7294:	ldr	r1, [sp, #36]	; 0x24
    7298:	bl	0 <coda_type_time_new>
    729c:	ldr	r3, [r5]
    72a0:	str	r0, [r3, #8]
    72a4:	ldr	r3, [r5]
    72a8:	ldr	r2, [r3, #8]
    72ac:	cmp	r2, #0
    72b0:	bne	72cc <cd_time_init+0xa14>
    72b4:	mov	r0, r6
    72b8:	bl	0 <coda_type_release>
    72bc:	ldr	r0, [sp, #36]	; 0x24
    72c0:	bl	0 <coda_expression_delete>
    72c4:	mvn	r0, #0
    72c8:	b	73ac <cd_time_init+0xaf4>
    72cc:	cmp	r6, #0
    72d0:	beq	7304 <cd_time_init+0xa4c>
    72d4:	ldr	r1, [r5]
    72d8:	ldr	r0, [r1, #8]
    72dc:	mov	r1, r6
    72e0:	bl	0 <coda_type_time_set_base_type>
    72e4:	cmp	r0, #0
    72e8:	beq	72fc <cd_time_init+0xa44>
    72ec:	mov	r0, r6
    72f0:	bl	0 <coda_type_release>
    72f4:	mvn	r0, #0
    72f8:	b	73ac <cd_time_init+0xaf4>
    72fc:	mov	r0, r6
    7300:	bl	0 <coda_type_release>
    7304:	mov	r1, r4
    7308:	mov	r0, r5
    730c:	bl	a78 <handle_name_attribute_for_type>
    7310:	cmp	r0, #0
    7314:	beq	7320 <cd_time_init+0xa68>
    7318:	mvn	r0, #0
    731c:	b	73ac <cd_time_init+0xaf4>
    7320:	ldr	r0, [r5]
    7324:	ldr	r1, [pc, #268]	; 7438 <cd_time_init+0xb80>
    7328:	bl	ef0 <register_type_elements>
    732c:	ldr	r0, [r5]
    7330:	mov	r1, #11
    7334:	ldr	r2, [pc, #196]	; 7400 <cd_time_init+0xb48>
    7338:	ldr	r3, [pc, #200]	; 7408 <cd_time_init+0xb50>
    733c:	bl	e64 <register_sub_element>
    7340:	ldr	r0, [r5]
    7344:	mov	r1, #22
    7348:	ldr	r2, [pc, #244]	; 7444 <cd_time_init+0xb8c>
    734c:	ldr	r3, [pc, #284]	; 7470 <cd_time_init+0xbb8>
    7350:	bl	e64 <register_sub_element>
    7354:	ldr	ip, [r5]
    7358:	ldr	r1, [ip, #44]	; 0x2c
    735c:	cmp	r1, #0
    7360:	beq	737c <cd_time_init+0xac4>
    7364:	ldr	r3, [r5]
    7368:	ldr	ip, [r3, #44]	; 0x2c
    736c:	cmp	ip, #1
    7370:	movne	r1, #1
    7374:	moveq	r1, #0
    7378:	b	7380 <cd_time_init+0xac8>
    737c:	mov	r1, #0
    7380:	cmp	r1, #0
    7384:	beq	739c <cd_time_init+0xae4>
    7388:	ldr	r0, [r5]
    738c:	mov	r1, #4
    7390:	ldr	r2, [pc, #276]	; 74ac <cd_time_init+0xbf4>
    7394:	ldr	r3, [pc, #72]	; 73e4 <cd_time_init+0xb2c>
    7398:	bl	e64 <register_sub_element>
    739c:	ldr	ip, [r5]
    73a0:	ldr	r2, [pc, #248]	; 74a0 <cd_time_init+0xbe8>
    73a4:	str	r2, [ip, #36]	; 0x24
    73a8:	mov	r0, #0
    73ac:	ldr	r4, [sp, #8]
    73b0:	ldr	r5, [sp, #12]
    73b4:	ldr	r6, [sp, #16]
    73b8:	ldr	r7, [sp, #20]
    73bc:	ldr	r8, [sp, #24]
    73c0:	ldr	r9, [sp, #28]
    73c4:	ldr	lr, [sp, #4]
    73c8:	add	sp, sp, #40	; 0x28
    73cc:	bx	lr
    73d0:	.word	0x00001add
    73d4:	.word	0x00001657
    73d8:	.word	0x000019d3
    73dc:	.word	0x00000bf9
    73e0:	.word	0x00001bf9
    73e4:	.word	0x00000000
    73e8:	.word	0x00000673
    73ec:	.word	0x00000e20
    73f0:	.word	0x00000fb6
    73f4:	.word	0x00000268
    73f8:	.word	0x000004c7
    73fc:	.word	0x000019d5
	...
    740c:	.word	0x00001e36
    7410:	.word	0x00001751
    7414:	.word	0x0000191f
    7418:	.word	0x0000087c
    741c:	.word	0x00000b56
    7420:	.word	0x0000111f
    7424:	.word	0x000005f8
    7428:	.word	0x00001140
    742c:	.word	0x000011a7
    7430:	.word	0x00000be5
    7434:	.word	0x00000e1b
    7438:	.word	0x00000000
    743c:	.word	0x000012c1
    7440:	.word	0x000016ab
    7444:	.word	0x00000000
    7448:	.word	0x00000293
    744c:	.word	0x000002f7
    7450:	.word	0x00001859
    7454:	.word	0x0000078d
    7458:	.word	0x000003ed
    745c:	.word	0x0000162e
    7460:	.word	0x0000051f
    7464:	.word	0x0000169e
    7468:	.word	0x00000a84
    746c:	.word	0x000006ee
    7470:	.word	0x00000000
    7474:	.word	0x00001551
    7478:	.word	0x000003fa
    747c:	.word	0x00000819
    7480:	.word	0x00001432
    7484:	.word	0x00001efb
    7488:	.word	0x00000244
    748c:	.word	0x00000ca5
    7490:	.word	0x000005ce
    7494:	.word	0x00000d4c
    7498:	.word	0x000011e3
    749c:	.word	0x0000056d
    74a0:	.word	0x00000000
    74a4:	.word	0x00000b40
    74a8:	.word	0x00000974
    74ac:	.word	0x00000000
    74b0:	.word	0x00000dcc
    74b4:	.word	0x00001fa3
    74b8:	.word	0x00000a55
    74bc:	.word	0x00000e3b
    74c0:	.word	0x000009df
    74c4:	.word	0x000005b6
    74c8:	.word	0x000018bf
    74cc:	.word	0x0000106e
    74d0:	.word	0x000011fc
    74d4:	.word	0x00001517
    74d8:	.word	0x00001203
    74dc:	.word	0x00001c11
    74e0:	.word	0x00000236

000074e4 <cd_type_set_type>:
    74e4:	mov	ip, sp
    74e8:	sub	sp, sp, #16
    74ec:	str	ip, [sp]
    74f0:	str	lr, [sp, #4]
    74f4:	str	r4, [sp, #8]
    74f8:	str	r5, [sp, #12]
    74fc:	mov	r5, r0
    7500:	ldr	r1, [r5]
    7504:	ldr	r0, [r1, #396]	; 0x18c
    7508:	ldr	r4, [r0, #8]
    750c:	ldr	r0, [r4, #20]
    7510:	cmp	r0, #0
    7514:	beq	7528 <cd_type_set_type+0x44>
    7518:	ldr	ip, [r5]
    751c:	ldr	r0, [ip, #8]
    7520:	ldr	r1, [r4, #20]
    7524:	bl	0 <coda_type_set_description>
    7528:	ldr	r2, [r4, #36]	; 0x24
    752c:	cmp	r2, #0
    7530:	beq	7588 <cd_type_set_type+0xa4>
    7534:	ldr	ip, [r5]
    7538:	ldr	r3, [ip, #8]
    753c:	ldr	r2, [r3, #36]	; 0x24
    7540:	cmp	r2, #0
    7544:	beq	755c <cd_type_set_type+0x78>
    7548:	ldr	r0, [pc, #124]	; 75cc <cd_type_set_type+0xe8>
    754c:	ldr	r1, [pc, #116]	; 75c8 <cd_type_set_type+0xe4>
    7550:	movw	r2, #3653	; 0xe45
    7554:	ldr	r3, [pc, #116]	; 75d0 <cd_type_set_type+0xec>
    7558:	bl	0 <__assert_fail>
    755c:	ldr	r0, [r5]
    7560:	ldr	r0, [r0, #8]
    7564:	ldr	r1, [r4, #36]	; 0x24
    7568:	str	r1, [r0, #36]	; 0x24
    756c:	ldr	r0, [r4, #36]	; 0x24
    7570:	ldr	r1, [r5]
    7574:	ldr	r3, [r1, #8]
    7578:	ldr	r1, [r3]
    757c:	bl	1884 <type_set_format>
    7580:	mov	r0, #0
    7584:	str	r0, [r4, #36]	; 0x24
    7588:	mov	r0, r4
    758c:	bl	0 <coda_type_release>
    7590:	ldr	r3, [r5]
    7594:	ldr	r2, [r3, #396]	; 0x18c
    7598:	ldr	ip, [r5]
    759c:	ldr	r1, [ip, #8]
    75a0:	str	r1, [r2, #8]
    75a4:	ldr	ip, [r5]
    75a8:	mov	r2, #0
    75ac:	str	r2, [ip, #8]
    75b0:	mov	r0, #0
    75b4:	ldr	r4, [sp, #8]
    75b8:	ldr	r5, [sp, #12]
    75bc:	ldr	lr, [sp, #4]
    75c0:	add	sp, sp, #16
    75c4:	bx	lr
    75c8:	.word	0x00001939
    75cc:	.word	0x0000067a
    75d0:	.word	0x00002199

000075d4 <cd_type_init>:
    75d4:	mov	ip, sp
    75d8:	sub	sp, sp, #16
    75dc:	str	ip, [sp]
    75e0:	str	lr, [sp, #4]
    75e4:	str	r4, [sp, #8]
    75e8:	str	r5, [sp, #12]
    75ec:	mov	r4, r1
    75f0:	mov	r5, r0
    75f4:	ldr	r1, [pc, #236]	; 76e8 <cd_type_init+0x114>
    75f8:	mov	r0, r4
    75fc:	bl	998 <get_attribute_value>
    7600:	cmp	r0, #0
    7604:	beq	7620 <cd_type_init+0x4c>
    7608:	movw	r0, #65136	; 0xfe70
    760c:	movt	r0, #65535	; 0xffff
    7610:	ldr	r1, [pc, #220]	; 76f4 <cd_type_init+0x120>
    7614:	bl	0 <coda_set_error>
    7618:	mvn	r0, #0
    761c:	b	76c8 <cd_type_init+0xf4>
    7620:	mov	r1, r4
    7624:	mov	r0, r5
    7628:	bl	b6c <handle_format_attribute_for_type>
    762c:	cmp	r0, #0
    7630:	beq	763c <cd_type_init+0x68>
    7634:	mvn	r0, #0
    7638:	b	76c8 <cd_type_init+0xf4>
    763c:	ldr	r3, [r5]
    7640:	ldr	ip, [pc, #156]	; 76e4 <cd_type_init+0x110>
    7644:	str	ip, [r3, #40]	; 0x28
    7648:	ldr	r0, [r5]
    764c:	ldr	r0, [r0, #44]	; 0x2c
    7650:	bl	0 <coda_type_text_new>
    7654:	ldr	ip, [r5]
    7658:	str	r0, [ip, #8]
    765c:	ldr	r0, [r5]
    7660:	ldr	r2, [r0, #8]
    7664:	cmp	r2, #0
    7668:	bne	7674 <cd_type_init+0xa0>
    766c:	mvn	r0, #0
    7670:	b	76c8 <cd_type_init+0xf4>
    7674:	ldr	r0, [r5]
    7678:	ldr	r1, [pc, #112]	; 76f0 <cd_type_init+0x11c>
    767c:	bl	ef0 <register_type_elements>
    7680:	ldr	r0, [r5]
    7684:	mov	r1, #11
    7688:	ldr	r2, [pc, #80]	; 76e0 <cd_type_init+0x10c>
    768c:	ldr	r3, [pc, #88]	; 76ec <cd_type_init+0x118>
    7690:	bl	e64 <register_sub_element>
    7694:	ldr	r0, [r5]
    7698:	mov	r1, #4
    769c:	ldr	r2, [pc, #84]	; 76f8 <cd_type_init+0x124>
    76a0:	ldr	r3, [pc, #52]	; 76dc <cd_type_init+0x108>
    76a4:	bl	e64 <register_sub_element>
    76a8:	mov	r1, r4
    76ac:	mov	r0, r5
    76b0:	bl	c3c <handle_xml_name>
    76b4:	cmp	r0, #0
    76b8:	beq	76c4 <cd_type_init+0xf0>
    76bc:	mvn	r0, #0
    76c0:	b	76c8 <cd_type_init+0xf4>
    76c4:	mov	r0, #0
    76c8:	ldr	r4, [sp, #8]
    76cc:	ldr	r5, [sp, #12]
    76d0:	ldr	lr, [sp, #4]
    76d4:	add	sp, sp, #16
    76d8:	bx	lr
	...
    76e8:	.word	0x0000047e
	...
    76f4:	.word	0x00001899
    76f8:	.word	0x00000000

000076fc <cd_union_set_field_expression>:
    76fc:	mov	ip, sp
    7700:	sub	sp, sp, #16
    7704:	str	ip, [sp]
    7708:	str	lr, [sp, #4]
    770c:	str	r4, [sp, #8]
    7710:	mov	r4, r0
    7714:	ldr	r0, [r4]
    7718:	ldr	r2, [r0, #396]	; 0x18c
    771c:	ldr	r0, [r2, #8]
    7720:	ldr	r1, [r4]
    7724:	ldr	r1, [r1, #8]
    7728:	bl	0 <coda_type_union_set_field_expression>
    772c:	cmp	r0, #0
    7730:	beq	773c <cd_union_set_field_expression+0x40>
    7734:	mvn	r0, #0
    7738:	b	774c <cd_union_set_field_expression+0x50>
    773c:	ldr	r1, [r4]
    7740:	mov	r3, #0
    7744:	str	r3, [r1, #8]
    7748:	mov	r0, #0
    774c:	ldr	r4, [sp, #8]
    7750:	ldr	lr, [sp, #4]
    7754:	add	sp, sp, #16
    7758:	bx	lr

0000775c <cd_union_add_field>:
    775c:	mov	ip, sp
    7760:	sub	sp, sp, #16
    7764:	str	ip, [sp]
    7768:	str	lr, [sp, #4]
    776c:	str	r4, [sp, #8]
    7770:	mov	r4, r0
    7774:	ldr	ip, [r4]
    7778:	ldr	r0, [ip, #8]
    777c:	bl	0 <coda_type_record_field_set_optional>
    7780:	ldr	r2, [r4]
    7784:	ldr	r3, [r2, #396]	; 0x18c
    7788:	ldr	r0, [r3, #8]
    778c:	ldr	r1, [r4]
    7790:	ldr	r1, [r1, #8]
    7794:	bl	0 <coda_type_record_add_field>
    7798:	cmp	r0, #0
    779c:	beq	77a8 <cd_union_add_field+0x4c>
    77a0:	mvn	r0, #0
    77a4:	b	77b8 <cd_union_add_field+0x5c>
    77a8:	ldr	r1, [r4]
    77ac:	mov	r2, #0
    77b0:	str	r2, [r1, #8]
    77b4:	mov	r0, #0
    77b8:	ldr	r4, [sp, #8]
    77bc:	ldr	lr, [sp, #4]
    77c0:	add	sp, sp, #16
    77c4:	bx	lr

000077c8 <cd_union_finalise>:
    77c8:	mov	ip, sp
    77cc:	sub	sp, sp, #8
    77d0:	str	ip, [sp]
    77d4:	str	lr, [sp, #4]
    77d8:	ldr	r0, [r0]
    77dc:	ldr	r0, [r0, #8]
    77e0:	bl	0 <coda_type_record_validate>
    77e4:	ldr	lr, [sp, #4]
    77e8:	add	sp, sp, #8
    77ec:	bx	lr

000077f0 <cd_union_init>:
    77f0:	mov	ip, sp
    77f4:	sub	sp, sp, #16
    77f8:	str	ip, [sp]
    77fc:	str	lr, [sp, #4]
    7800:	str	r4, [sp, #8]
    7804:	str	r5, [sp, #12]
    7808:	mov	r4, r1
    780c:	mov	r5, r0
    7810:	mov	r1, r4
    7814:	mov	r0, r5
    7818:	bl	b6c <handle_format_attribute_for_type>
    781c:	cmp	r0, #0
    7820:	beq	782c <cd_union_init+0x3c>
    7824:	mvn	r0, #0
    7828:	b	7910 <cd_union_init+0x120>
    782c:	ldr	r3, [r5]
    7830:	ldr	r1, [pc, #252]	; 7934 <cd_union_init+0x144>
    7834:	str	r1, [r3, #40]	; 0x28
    7838:	ldr	r0, [r5]
    783c:	ldr	r0, [r0, #44]	; 0x2c
    7840:	bl	0 <coda_type_union_new>
    7844:	ldr	ip, [r5]
    7848:	str	r0, [ip, #8]
    784c:	ldr	r2, [r5]
    7850:	ldr	r1, [r2, #8]
    7854:	cmp	r1, #0
    7858:	bne	7864 <cd_union_init+0x74>
    785c:	mvn	r0, #0
    7860:	b	7910 <cd_union_init+0x120>
    7864:	mov	r1, r4
    7868:	mov	r0, r5
    786c:	bl	a78 <handle_name_attribute_for_type>
    7870:	cmp	r0, #0
    7874:	beq	7880 <cd_union_init+0x90>
    7878:	mvn	r0, #0
    787c:	b	7910 <cd_union_init+0x120>
    7880:	ldr	r0, [r5]
    7884:	mov	r1, #11
    7888:	ldr	r2, [pc, #160]	; 7930 <cd_union_init+0x140>
    788c:	ldr	r3, [pc, #164]	; 7938 <cd_union_init+0x148>
    7890:	bl	e64 <register_sub_element>
    7894:	ldr	r0, [r5]
    7898:	mov	r1, #7
    789c:	ldr	r2, [pc, #136]	; 792c <cd_union_init+0x13c>
    78a0:	ldr	r3, [pc, #160]	; 7948 <cd_union_init+0x158>
    78a4:	bl	e64 <register_sub_element>
    78a8:	ldr	r0, [r5]
    78ac:	mov	r1, #15
    78b0:	ldr	r2, [pc, #116]	; 792c <cd_union_init+0x13c>
    78b4:	ldr	r3, [pc, #104]	; 7924 <cd_union_init+0x134>
    78b8:	bl	e64 <register_sub_element>
    78bc:	ldr	r0, [r5]
    78c0:	mov	r1, #14
    78c4:	ldr	r2, [pc, #112]	; 793c <cd_union_init+0x14c>
    78c8:	ldr	r3, [pc, #112]	; 7940 <cd_union_init+0x150>
    78cc:	bl	e64 <register_sub_element>
    78d0:	ldr	r0, [r5]
    78d4:	mov	r1, #4
    78d8:	ldr	r2, [pc, #108]	; 794c <cd_union_init+0x15c>
    78dc:	ldr	r3, [pc, #68]	; 7928 <cd_union_init+0x138>
    78e0:	bl	e64 <register_sub_element>
    78e4:	ldr	r2, [r5]
    78e8:	ldr	ip, [pc, #84]	; 7944 <cd_union_init+0x154>
    78ec:	str	ip, [r2, #36]	; 0x24
    78f0:	mov	r1, r4
    78f4:	mov	r0, r5
    78f8:	bl	c3c <handle_xml_name>
    78fc:	cmp	r0, #0
    7900:	beq	790c <cd_union_init+0x11c>
    7904:	mvn	r0, #0
    7908:	b	7910 <cd_union_init+0x120>
    790c:	mov	r0, #0
    7910:	ldr	r4, [sp, #8]
    7914:	ldr	r5, [sp, #12]
    7918:	ldr	lr, [sp, #4]
    791c:	add	sp, sp, #16
    7920:	bx	lr
	...

00007950 <cd_vsf_integer_set_type>:
    7950:	mov	ip, sp
    7954:	sub	sp, sp, #8
    7958:	str	ip, [sp]
    795c:	str	lr, [sp, #4]
    7960:	mov	r1, r0
    7964:	ldr	r2, [r1]
    7968:	ldr	r2, [r2, #396]	; 0x18c
    796c:	ldr	r0, [r2, #8]
    7970:	ldr	ip, [r1]
    7974:	ldr	r1, [ip, #8]
    7978:	bl	0 <coda_type_vsf_integer_set_type>
    797c:	ldr	lr, [sp, #4]
    7980:	add	sp, sp, #8
    7984:	bx	lr

00007988 <cd_vsf_integer_set_scale_factor>:
    7988:	mov	ip, sp
    798c:	sub	sp, sp, #8
    7990:	str	ip, [sp]
    7994:	str	lr, [sp, #4]
    7998:	mov	r1, r0
    799c:	ldr	r2, [r1]
    79a0:	ldr	r2, [r2, #396]	; 0x18c
    79a4:	ldr	r0, [r2, #8]
    79a8:	ldr	ip, [r1]
    79ac:	ldr	r1, [ip, #8]
    79b0:	bl	0 <coda_type_vsf_integer_set_scale_factor>
    79b4:	ldr	lr, [sp, #4]
    79b8:	add	sp, sp, #8
    79bc:	bx	lr

000079c0 <cd_vsf_integer_set_unit>:
    79c0:	mov	ip, sp
    79c4:	sub	sp, sp, #8
    79c8:	str	ip, [sp]
    79cc:	str	lr, [sp, #4]
    79d0:	mov	r1, r0
    79d4:	ldr	r2, [r1]
    79d8:	ldr	r2, [r2, #12]
    79dc:	cmp	r2, #0
    79e0:	bne	79fc <cd_vsf_integer_set_unit+0x3c>
    79e4:	ldr	r0, [r1]
    79e8:	ldr	r0, [r0, #396]	; 0x18c
    79ec:	ldr	r0, [r0, #8]
    79f0:	ldr	r1, [pc, #40]	; 7a20 <cd_vsf_integer_set_unit+0x60>
    79f4:	bl	0 <coda_type_vsf_integer_set_unit>
    79f8:	b	7a14 <cd_vsf_integer_set_unit+0x54>
    79fc:	ldr	r3, [r1]
    7a00:	ldr	r2, [r3, #396]	; 0x18c
    7a04:	ldr	r0, [r2, #8]
    7a08:	ldr	r1, [r1]
    7a0c:	ldr	r1, [r1, #12]
    7a10:	bl	0 <coda_type_vsf_integer_set_unit>
    7a14:	ldr	lr, [sp, #4]
    7a18:	add	sp, sp, #8
    7a1c:	bx	lr
    7a20:	.word	0x00002067

00007a24 <cd_vsf_integer_finalise>:
    7a24:	mov	ip, sp
    7a28:	sub	sp, sp, #8
    7a2c:	str	ip, [sp]
    7a30:	str	lr, [sp, #4]
    7a34:	ldr	r0, [r0]
    7a38:	ldr	r0, [r0, #8]
    7a3c:	bl	0 <coda_type_vsf_integer_validate>
    7a40:	ldr	lr, [sp, #4]
    7a44:	add	sp, sp, #8
    7a48:	bx	lr

00007a4c <cd_vsf_integer_init>:
    7a4c:	mov	ip, sp
    7a50:	sub	sp, sp, #16
    7a54:	str	ip, [sp]
    7a58:	str	lr, [sp, #4]
    7a5c:	str	r4, [sp, #8]
    7a60:	str	r5, [sp, #12]
    7a64:	mov	r4, r1
    7a68:	mov	r5, r0
    7a6c:	mov	r1, r4
    7a70:	mov	r0, r5
    7a74:	bl	b6c <handle_format_attribute_for_type>
    7a78:	cmp	r0, #0
    7a7c:	beq	7a88 <cd_vsf_integer_init+0x3c>
    7a80:	mvn	r0, #0
    7a84:	b	7b34 <cd_vsf_integer_init+0xe8>
    7a88:	ldr	r3, [r5]
    7a8c:	ldr	r2, [pc, #188]	; 7b50 <cd_vsf_integer_init+0x104>
    7a90:	str	r2, [r3, #40]	; 0x28
    7a94:	ldr	r3, [r5]
    7a98:	ldr	r0, [r3, #44]	; 0x2c
    7a9c:	bl	0 <coda_type_vsf_integer_new>
    7aa0:	ldr	r3, [r5]
    7aa4:	str	r0, [r3, #8]
    7aa8:	ldr	r0, [r5]
    7aac:	ldr	r3, [r0, #8]
    7ab0:	cmp	r3, #0
    7ab4:	bne	7ac0 <cd_vsf_integer_init+0x74>
    7ab8:	mvn	r0, #0
    7abc:	b	7b34 <cd_vsf_integer_init+0xe8>
    7ac0:	mov	r1, r4
    7ac4:	mov	r0, r5
    7ac8:	bl	a78 <handle_name_attribute_for_type>
    7acc:	cmp	r0, #0
    7ad0:	beq	7adc <cd_vsf_integer_init+0x90>
    7ad4:	mvn	r0, #0
    7ad8:	b	7b34 <cd_vsf_integer_init+0xe8>
    7adc:	ldr	r0, [r5]
    7ae0:	mov	r1, #11
    7ae4:	ldr	r2, [pc, #92]	; 7b48 <cd_vsf_integer_init+0xfc>
    7ae8:	ldr	r3, [pc, #100]	; 7b54 <cd_vsf_integer_init+0x108>
    7aec:	bl	e64 <register_sub_element>
    7af0:	ldr	r0, [r5]
    7af4:	ldr	r1, [pc, #104]	; 7b64 <cd_vsf_integer_init+0x118>
    7af8:	bl	ef0 <register_type_elements>
    7afc:	ldr	r0, [r5]
    7b00:	mov	r1, #36	; 0x24
    7b04:	ldr	r2, [pc, #64]	; 7b4c <cd_vsf_integer_init+0x100>
    7b08:	ldr	r3, [pc, #80]	; 7b60 <cd_vsf_integer_init+0x114>
    7b0c:	bl	e64 <register_sub_element>
    7b10:	ldr	r0, [r5]
    7b14:	mov	r1, #41	; 0x29
    7b18:	ldr	r2, [pc, #40]	; 7b48 <cd_vsf_integer_init+0xfc>
    7b1c:	ldr	r3, [pc, #52]	; 7b58 <cd_vsf_integer_init+0x10c>
    7b20:	bl	e64 <register_sub_element>
    7b24:	ldr	r0, [r5]
    7b28:	ldr	r2, [pc, #44]	; 7b5c <cd_vsf_integer_init+0x110>
    7b2c:	str	r2, [r0, #36]	; 0x24
    7b30:	mov	r0, #0
    7b34:	ldr	r4, [sp, #8]
    7b38:	ldr	r5, [sp, #12]
    7b3c:	ldr	lr, [sp, #4]
    7b40:	add	sp, sp, #16
    7b44:	bx	lr
	...

00007b68 <whitespace_handler>:
    7b68:	mov	ip, sp
    7b6c:	sub	sp, sp, #16
    7b70:	str	ip, [sp]
    7b74:	str	lr, [sp, #4]
    7b78:	str	r4, [sp, #8]
    7b7c:	mov	r4, r0
    7b80:	mov	r0, r1
    7b84:	mov	r1, r2
    7b88:	ldr	r2, [r4, #48]	; 0x30
    7b8c:	cmp	r2, #0
    7b90:	bgt	7bb8 <whitespace_handler+0x50>
    7b94:	bl	ac <is_whitespace>
    7b98:	cmp	r0, #0
    7b9c:	bne	7bb8 <whitespace_handler+0x50>
    7ba0:	movw	r0, #65136	; 0xfe70
    7ba4:	movt	r0, #65535	; 0xffff
    7ba8:	ldr	r1, [pc, #24]	; 7bc8 <whitespace_handler+0x60>
    7bac:	bl	0 <coda_set_error>
    7bb0:	mov	r0, r4
    7bb4:	bl	e28 <abort_parser>
    7bb8:	ldr	r4, [sp, #8]
    7bbc:	ldr	lr, [sp, #4]
    7bc0:	add	sp, sp, #16
    7bc4:	bx	lr
    7bc8:	.word	0x000004ea

00007bcc <string_handler>:
    7bcc:	mov	ip, sp
    7bd0:	sub	sp, sp, #40	; 0x28
    7bd4:	str	ip, [sp, #4]
    7bd8:	str	lr, [sp, #8]
    7bdc:	str	r4, [sp, #16]
    7be0:	str	r5, [sp, #20]
    7be4:	str	r6, [sp, #24]
    7be8:	str	r7, [sp, #28]
    7bec:	str	r8, [sp, #32]
    7bf0:	mov	r6, r2
    7bf4:	mov	r7, r1
    7bf8:	mov	r4, r0
    7bfc:	ldr	r0, [r4, #48]	; 0x30
    7c00:	cmp	r0, #0
    7c04:	bgt	7d20 <string_handler+0x154>
    7c08:	ldr	r3, [r4]
    7c0c:	ldr	r3, [r3, #12]
    7c10:	cmp	r3, #0
    7c14:	beq	7cb4 <string_handler+0xe8>
    7c18:	ldr	r1, [r4]
    7c1c:	ldr	r0, [r1, #12]
    7c20:	bl	0 <strlen>
    7c24:	mov	r5, r0
    7c28:	add	r0, r5, r6
    7c2c:	add	r0, r0, #1
    7c30:	bl	0 <malloc>
    7c34:	mov	r8, r0
    7c38:	cmp	r8, #0
    7c3c:	bne	7c6c <string_handler+0xa0>
    7c40:	mvn	r0, #0
    7c44:	ldr	r1, [pc, #248]	; 7d44 <string_handler+0x178>
    7c48:	add	r2, r5, r6
    7c4c:	add	r2, r2, #1
    7c50:	ldr	r3, [pc, #232]	; 7d40 <string_handler+0x174>
    7c54:	movw	r5, #3857	; 0xf11
    7c58:	str	r5, [sp]
    7c5c:	bl	0 <coda_set_error>
    7c60:	mov	r0, r4
    7c64:	bl	e28 <abort_parser>
    7c68:	b	7d20 <string_handler+0x154>
    7c6c:	ldr	ip, [r4]
    7c70:	ldr	r1, [ip, #12]
    7c74:	mov	r2, r5
    7c78:	mov	r0, r8
    7c7c:	bl	0 <memcpy>
    7c80:	add	r0, r8, r5
    7c84:	mov	r2, r6
    7c88:	mov	r1, r7
    7c8c:	bl	0 <memcpy>
    7c90:	add	r3, r5, r6
    7c94:	mov	r0, #0
    7c98:	strb	r0, [r8, r3]
    7c9c:	ldr	r1, [r4]
    7ca0:	ldr	r0, [r1, #12]
    7ca4:	bl	0 <free>
    7ca8:	ldr	ip, [r4]
    7cac:	str	r8, [ip, #12]
    7cb0:	b	7d20 <string_handler+0x154>
    7cb4:	add	r0, r6, #1
    7cb8:	bl	0 <malloc>
    7cbc:	ldr	r1, [r4]
    7cc0:	str	r0, [r1, #12]
    7cc4:	ldr	r0, [r4]
    7cc8:	ldr	ip, [r0, #12]
    7ccc:	cmp	ip, #0
    7cd0:	bne	7cfc <string_handler+0x130>
    7cd4:	mvn	r0, #0
    7cd8:	ldr	r1, [pc, #100]	; 7d44 <string_handler+0x178>
    7cdc:	add	r2, r6, #1
    7ce0:	ldr	r3, [pc, #88]	; 7d40 <string_handler+0x174>
    7ce4:	movw	r5, #3841	; 0xf01
    7ce8:	str	r5, [sp]
    7cec:	bl	0 <coda_set_error>
    7cf0:	mov	r0, r4
    7cf4:	bl	e28 <abort_parser>
    7cf8:	b	7d20 <string_handler+0x154>
    7cfc:	ldr	r0, [r4]
    7d00:	ldr	r0, [r0, #12]
    7d04:	mov	r2, r6
    7d08:	mov	r1, r7
    7d0c:	bl	0 <memcpy>
    7d10:	ldr	ip, [r4]
    7d14:	ldr	r3, [ip, #12]
    7d18:	mov	r2, #0
    7d1c:	strb	r2, [r3, r6]
    7d20:	ldr	r4, [sp, #16]
    7d24:	ldr	r5, [sp, #20]
    7d28:	ldr	r6, [sp, #24]
    7d2c:	ldr	r7, [sp, #28]
    7d30:	ldr	r8, [sp, #32]
    7d34:	ldr	lr, [sp, #8]
    7d38:	add	sp, sp, #40	; 0x28
    7d3c:	bx	lr
    7d40:	.word	0x00001939
    7d44:	.word	0x00000e60

00007d48 <push_node>:
    7d48:	mov	ip, sp
    7d4c:	sub	sp, sp, #24
    7d50:	str	ip, [sp]
    7d54:	str	lr, [sp, #4]
    7d58:	str	r4, [sp, #8]
    7d5c:	str	r5, [sp, #12]
    7d60:	str	r6, [sp, #16]
    7d64:	str	r7, [sp, #20]
    7d68:	mov	r4, r2
    7d6c:	mov	r5, r1
    7d70:	mov	r6, r0
    7d74:	mov	r0, #400	; 0x190
    7d78:	bl	0 <malloc>
    7d7c:	mov	r7, r0
    7d80:	cmp	r7, #0
    7d84:	bne	7d9c <push_node+0x54>
    7d88:	ldr	r0, [pc, #324]	; 7ed4 <push_node+0x18c>
    7d8c:	ldr	r1, [pc, #316]	; 7ed0 <push_node+0x188>
    7d90:	movw	r2, #3877	; 0xf25
    7d94:	ldr	r3, [pc, #304]	; 7ecc <push_node+0x184>
    7d98:	bl	0 <__assert_fail>
    7d9c:	str	r5, [r7]
    7da0:	mov	r3, #0
    7da4:	str	r3, [r7, #4]
    7da8:	mov	ip, #0
    7dac:	str	ip, [r7, #8]
    7db0:	mov	ip, #0
    7db4:	str	ip, [r7, #12]
    7db8:	mvn	r1, #0
    7dbc:	mvn	r0, #0
    7dc0:	str	r0, [r7, #16]
    7dc4:	str	r1, [r7, #20]
    7dc8:	bl	0 <coda_NaN>
    7dcc:	vstr	d0, [r7, #24]
    7dd0:	mov	r0, #0
    7dd4:	str	r0, [r7, #32]
    7dd8:	mov	r0, #0
    7ddc:	str	r0, [r7, #36]	; 0x24
    7de0:	mov	r1, #0
    7de4:	str	r1, [r7, #40]	; 0x28
    7de8:	mov	r2, #0
    7dec:	str	r2, [r7, #48]	; 0x30
    7df0:	add	r0, r7, #52	; 0x34
    7df4:	mov	r1, #0
    7df8:	mov	r2, #172	; 0xac
    7dfc:	bl	0 <memset>
    7e00:	add	r0, r7, #224	; 0xe0
    7e04:	mov	r1, #0
    7e08:	mov	r2, #172	; 0xac
    7e0c:	bl	0 <memset>
    7e10:	ldr	r2, [r6]
    7e14:	str	r2, [r7, #396]	; 0x18c
    7e18:	str	r7, [r6]
    7e1c:	ldr	r2, [r7, #396]	; 0x18c
    7e20:	cmp	r2, #0
    7e24:	beq	7e48 <push_node+0x100>
    7e28:	ldr	r2, [r7, #396]	; 0x18c
    7e2c:	lsl	r3, r5, #2
    7e30:	add	r1, r2, r3
    7e34:	ldr	r1, [r1, #52]	; 0x34
    7e38:	cmp	r1, #0
    7e3c:	movne	r2, #1
    7e40:	moveq	r2, #0
    7e44:	b	7e4c <push_node+0x104>
    7e48:	mov	r2, #0
    7e4c:	cmp	r2, #0
    7e50:	beq	7e80 <push_node+0x138>
    7e54:	ldr	ip, [r7, #396]	; 0x18c
    7e58:	lsl	r1, r5, #2
    7e5c:	add	r1, ip, r1
    7e60:	ldr	ip, [r1, #52]	; 0x34
    7e64:	mov	r1, r4
    7e68:	mov	r0, r6
    7e6c:	blx	ip
    7e70:	cmp	r0, #0
    7e74:	beq	7e80 <push_node+0x138>
    7e78:	mvn	r0, #0
    7e7c:	b	7eac <push_node+0x164>
    7e80:	ldr	ip, [r7, #32]
    7e84:	cmp	ip, #0
    7e88:	bne	7e9c <push_node+0x154>
    7e8c:	ldr	r0, [r6, #4]
    7e90:	ldr	r1, [pc, #48]	; 7ec8 <push_node+0x180>
    7e94:	bl	0 <coda_XML_SetCharacterDataHandler>
    7e98:	b	7ea8 <push_node+0x160>
    7e9c:	ldr	r0, [r6, #4]
    7ea0:	ldr	r1, [pc, #48]	; 7ed8 <push_node+0x190>
    7ea4:	bl	0 <coda_XML_SetCharacterDataHandler>
    7ea8:	mov	r0, #0
    7eac:	ldr	r4, [sp, #8]
    7eb0:	ldr	r5, [sp, #12]
    7eb4:	ldr	r6, [sp, #16]
    7eb8:	ldr	r7, [sp, #20]
    7ebc:	ldr	lr, [sp, #4]
    7ec0:	add	sp, sp, #24
    7ec4:	bx	lr
    7ec8:	.word	0x00000000
    7ecc:	.word	0x000021aa
    7ed0:	.word	0x00001939
    7ed4:	.word	0x00001f63
    7ed8:	.word	0x00000000

00007edc <pop_node>:
    7edc:	mov	ip, sp
    7ee0:	sub	sp, sp, #16
    7ee4:	str	ip, [sp]
    7ee8:	str	lr, [sp, #4]
    7eec:	str	r4, [sp, #8]
    7ef0:	str	r5, [sp, #12]
    7ef4:	mov	r5, r0
    7ef8:	ldr	r4, [r5]
    7efc:	cmp	r4, #0
    7f00:	bne	7f18 <pop_node+0x3c>
    7f04:	ldr	r0, [pc, #356]	; 8070 <pop_node+0x194>
    7f08:	ldr	r1, [pc, #348]	; 806c <pop_node+0x190>
    7f0c:	movw	r2, #3917	; 0xf4d
    7f10:	ldr	r3, [pc, #356]	; 807c <pop_node+0x1a0>
    7f14:	bl	0 <__assert_fail>
    7f18:	ldr	r1, [r4, #36]	; 0x24
    7f1c:	cmp	r1, #0
    7f20:	beq	7f40 <pop_node+0x64>
    7f24:	ldr	ip, [r4, #36]	; 0x24
    7f28:	mov	r0, r5
    7f2c:	blx	ip
    7f30:	cmp	r0, #0
    7f34:	beq	7f40 <pop_node+0x64>
    7f38:	mvn	r0, #0
    7f3c:	b	8054 <pop_node+0x178>
    7f40:	ldr	r0, [r4, #396]	; 0x18c
    7f44:	cmp	r0, #0
    7f48:	beq	7f70 <pop_node+0x94>
    7f4c:	ldr	ip, [r4, #396]	; 0x18c
    7f50:	ldr	r1, [r4]
    7f54:	lsl	r0, r1, #2
    7f58:	add	r3, ip, r0
    7f5c:	ldr	r0, [r3, #224]	; 0xe0
    7f60:	cmp	r0, #0
    7f64:	movne	ip, #1
    7f68:	moveq	ip, #0
    7f6c:	b	7f74 <pop_node+0x98>
    7f70:	mov	ip, #0
    7f74:	cmp	ip, #0
    7f78:	beq	7fa8 <pop_node+0xcc>
    7f7c:	ldr	r3, [r4, #396]	; 0x18c
    7f80:	ldr	r0, [r4]
    7f84:	lsl	ip, r0, #2
    7f88:	add	r2, r3, ip
    7f8c:	ldr	ip, [r2, #224]	; 0xe0
    7f90:	mov	r0, r5
    7f94:	blx	ip
    7f98:	cmp	r0, #0
    7f9c:	beq	7fa8 <pop_node+0xcc>
    7fa0:	mvn	r0, #0
    7fa4:	b	8054 <pop_node+0x178>
    7fa8:	ldr	r0, [r4, #8]
    7fac:	cmp	r0, #0
    7fb0:	beq	7fe0 <pop_node+0x104>
    7fb4:	ldr	r1, [r4, #40]	; 0x28
    7fb8:	cmp	r1, #0
    7fbc:	bne	7fd4 <pop_node+0xf8>
    7fc0:	ldr	r0, [pc, #172]	; 8074 <pop_node+0x198>
    7fc4:	ldr	r1, [pc, #160]	; 806c <pop_node+0x190>
    7fc8:	movw	r2, #3937	; 0xf61
    7fcc:	ldr	r3, [pc, #168]	; 807c <pop_node+0x1a0>
    7fd0:	bl	0 <__assert_fail>
    7fd4:	ldr	ip, [r4, #40]	; 0x28
    7fd8:	ldr	r0, [r4, #8]
    7fdc:	blx	ip
    7fe0:	ldr	r1, [r4, #12]
    7fe4:	cmp	r1, #0
    7fe8:	beq	7ff4 <pop_node+0x118>
    7fec:	ldr	r0, [r4, #12]
    7ff0:	bl	0 <free>
    7ff4:	ldr	r1, [r4, #396]	; 0x18c
    7ff8:	str	r1, [r5]
    7ffc:	mov	r0, r4
    8000:	bl	0 <free>
    8004:	ldr	r3, [r5]
    8008:	cmp	r3, #0
    800c:	beq	8028 <pop_node+0x14c>
    8010:	ldr	r2, [r5]
    8014:	ldr	r2, [r2, #32]
    8018:	cmp	r2, #0
    801c:	movne	ip, #1
    8020:	moveq	ip, #0
    8024:	b	802c <pop_node+0x150>
    8028:	mov	ip, #0
    802c:	cmp	ip, #0
    8030:	bne	8044 <pop_node+0x168>
    8034:	ldr	r0, [r5, #4]
    8038:	ldr	r1, [pc, #40]	; 8068 <pop_node+0x18c>
    803c:	bl	0 <coda_XML_SetCharacterDataHandler>
    8040:	b	8050 <pop_node+0x174>
    8044:	ldr	r0, [r5, #4]
    8048:	ldr	r1, [pc, #40]	; 8078 <pop_node+0x19c>
    804c:	bl	0 <coda_XML_SetCharacterDataHandler>
    8050:	mov	r0, #0
    8054:	ldr	r4, [sp, #8]
    8058:	ldr	r5, [sp, #12]
    805c:	ldr	lr, [sp, #4]
    8060:	add	sp, sp, #16
    8064:	bx	lr
    8068:	.word	0x00000000
    806c:	.word	0x00001939
    8070:	.word	0x00001f63
    8074:	.word	0x00001c75
    8078:	.word	0x00000000
    807c:	.word	0x000021b4

00008080 <start_element_handler>:
    8080:	mov	ip, sp
    8084:	sub	sp, sp, #32
    8088:	str	ip, [sp, #4]
    808c:	str	lr, [sp, #8]
    8090:	str	r4, [sp, #16]
    8094:	str	r5, [sp, #20]
    8098:	str	r6, [sp, #24]
    809c:	str	r7, [sp, #28]
    80a0:	mov	r5, r2
    80a4:	mov	r4, r1
    80a8:	mov	r7, r0
    80ac:	ldr	r2, [r7, #48]	; 0x30
    80b0:	cmp	r2, #0
    80b4:	ble	80c8 <start_element_handler+0x48>
    80b8:	ldr	r1, [r7, #48]	; 0x30
    80bc:	add	ip, r1, #1
    80c0:	str	ip, [r7, #48]	; 0x30
    80c4:	b	8248 <start_element_handler+0x1c8>
    80c8:	ldr	r0, [r7, #8]
    80cc:	mov	r1, r4
    80d0:	bl	0 <coda_hashtable_get_index_from_name>
    80d4:	mov	r6, r0
    80d8:	cmp	r6, #0
    80dc:	bge	8108 <start_element_handler+0x88>
    80e0:	ldr	r0, [pc, #388]	; 826c <start_element_handler+0x1ec>
    80e4:	bl	0 <strlen>
    80e8:	mov	r2, r0
    80ec:	ldr	r1, [pc, #376]	; 826c <start_element_handler+0x1ec>
    80f0:	mov	r0, r4
    80f4:	bl	0 <strncmp>
    80f8:	cmp	r0, #0
    80fc:	movne	ip, #1
    8100:	moveq	ip, #0
    8104:	b	810c <start_element_handler+0x8c>
    8108:	mov	ip, #0
    810c:	cmp	ip, #0
    8110:	beq	8120 <start_element_handler+0xa0>
    8114:	mov	ip, #1
    8118:	str	ip, [r7, #48]	; 0x30
    811c:	b	8248 <start_element_handler+0x1c8>
    8120:	cmp	r6, #0
    8124:	blt	8148 <start_element_handler+0xc8>
    8128:	ldr	r1, [r7]
    812c:	lsl	r2, r6, #2
    8130:	add	r3, r1, r2
    8134:	ldr	r0, [r3, #52]	; 0x34
    8138:	cmp	r0, #0
    813c:	moveq	r0, #1
    8140:	movne	r0, #0
    8144:	b	814c <start_element_handler+0xcc>
    8148:	mov	r0, #1
    814c:	cmp	r0, #0
    8150:	beq	8228 <start_element_handler+0x1a8>
    8154:	ldr	r2, [r7]
    8158:	ldr	r0, [r2]
    815c:	cmn	r0, #1
    8160:	beq	81f8 <start_element_handler+0x178>
    8164:	ldr	r1, [r7]
    8168:	ldr	ip, [r1, #48]	; 0x30
    816c:	cmp	ip, #0
    8170:	beq	81c0 <start_element_handler+0x140>
    8174:	mov	r0, r4
    8178:	bl	0 <coda_element_name_from_xml_name>
    817c:	mov	r4, r0
    8180:	ldr	r3, [r7]
    8184:	ldr	r0, [r3]
    8188:	bl	0 <xml_element_name>
    818c:	mov	r5, r0
    8190:	ldr	r3, [r7]
    8194:	ldr	r0, [r3, #44]	; 0x2c
    8198:	bl	0 <coda_type_get_format_name>
    819c:	mov	r2, r0
    81a0:	movw	r0, #65136	; 0xfe70
    81a4:	movt	r0, #65535	; 0xffff
    81a8:	ldr	r1, [pc, #184]	; 8268 <start_element_handler+0x1e8>
    81ac:	str	r2, [sp]
    81b0:	mov	r3, r5
    81b4:	mov	r2, r4
    81b8:	bl	0 <coda_set_error>
    81bc:	b	821c <start_element_handler+0x19c>
    81c0:	mov	r0, r4
    81c4:	bl	0 <coda_element_name_from_xml_name>
    81c8:	mov	r4, r0
    81cc:	ldr	ip, [r7]
    81d0:	ldr	r0, [ip]
    81d4:	bl	0 <xml_element_name>
    81d8:	movw	r2, #65136	; 0xfe70
    81dc:	movt	r2, #65535	; 0xffff
    81e0:	ldr	r1, [pc, #124]	; 8264 <start_element_handler+0x1e4>
    81e4:	mov	r3, r0
    81e8:	mov	r0, r2
    81ec:	mov	r2, r4
    81f0:	bl	0 <coda_set_error>
    81f4:	b	821c <start_element_handler+0x19c>
    81f8:	mov	r0, r4
    81fc:	bl	0 <coda_element_name_from_xml_name>
    8200:	movw	r2, #65136	; 0xfe70
    8204:	movt	r2, #65535	; 0xffff
    8208:	ldr	r1, [pc, #96]	; 8270 <start_element_handler+0x1f0>
    820c:	mov	r3, r0
    8210:	mov	r0, r2
    8214:	mov	r2, r3
    8218:	bl	0 <coda_set_error>
    821c:	mov	r0, r7
    8220:	bl	e28 <abort_parser>
    8224:	b	8248 <start_element_handler+0x1c8>
    8228:	mov	r2, r5
    822c:	mov	r1, r6
    8230:	mov	r0, r7
    8234:	bl	7d48 <push_node>
    8238:	cmp	r0, #0
    823c:	beq	8248 <start_element_handler+0x1c8>
    8240:	mov	r0, r7
    8244:	bl	e28 <abort_parser>
    8248:	ldr	r4, [sp, #16]
    824c:	ldr	r5, [sp, #20]
    8250:	ldr	r6, [sp, #24]
    8254:	ldr	r7, [sp, #28]
    8258:	ldr	lr, [sp, #8]
    825c:	add	sp, sp, #32
    8260:	bx	lr
    8264:	.word	0x0000100a
    8268:	.word	0x00000cf8
    826c:	.word	0x00000a97
    8270:	.word	0x00000497

00008274 <end_element_handler>:
    8274:	mov	ip, sp
    8278:	sub	sp, sp, #16
    827c:	str	ip, [sp]
    8280:	str	lr, [sp, #4]
    8284:	str	r4, [sp, #8]
    8288:	mov	r4, r0
    828c:	ldr	r1, [r4, #36]	; 0x24
    8290:	cmp	r1, #0
    8294:	bne	82cc <end_element_handler+0x58>
    8298:	ldr	r3, [r4, #48]	; 0x30
    829c:	cmp	r3, #0
    82a0:	ble	82b4 <end_element_handler+0x40>
    82a4:	ldr	r2, [r4, #48]	; 0x30
    82a8:	sub	r0, r2, #1
    82ac:	str	r0, [r4, #48]	; 0x30
    82b0:	b	82cc <end_element_handler+0x58>
    82b4:	mov	r0, r4
    82b8:	bl	7edc <pop_node>
    82bc:	cmp	r0, #0
    82c0:	beq	82cc <end_element_handler+0x58>
    82c4:	mov	r0, r4
    82c8:	bl	e28 <abort_parser>
    82cc:	ldr	r4, [sp, #8]
    82d0:	ldr	lr, [sp, #4]
    82d4:	add	sp, sp, #16
    82d8:	bx	lr

000082dc <parser_info_init>:
    82dc:	mov	ip, sp
    82e0:	sub	sp, sp, #8
    82e4:	str	ip, [sp]
    82e8:	str	lr, [sp, #4]
    82ec:	mov	ip, #0
    82f0:	str	ip, [r0]
    82f4:	mov	ip, #0
    82f8:	str	ip, [r0, #4]
    82fc:	mov	r2, #0
    8300:	str	r2, [r0, #8]
    8304:	mov	r3, #0
    8308:	str	r3, [r0, #12]
    830c:	mov	r1, #0
    8310:	str	r1, [r0, #16]
    8314:	mov	r3, #0
    8318:	str	r3, [r0, #24]
    831c:	mov	r1, #0
    8320:	str	r1, [r0, #28]
    8324:	mov	r2, #0
    8328:	str	r2, [r0, #32]
    832c:	mov	r1, #0
    8330:	str	r1, [r0, #36]	; 0x24
    8334:	mov	r1, #0
    8338:	str	r1, [r0, #40]	; 0x28
    833c:	mov	r1, #1
    8340:	str	r1, [r0, #44]	; 0x2c
    8344:	mov	r1, #0
    8348:	str	r1, [r0, #48]	; 0x30
    834c:	ldr	lr, [sp, #4]
    8350:	add	sp, sp, #8
    8354:	bx	lr

00008358 <parser_info_delete>:
    8358:	mov	ip, sp
    835c:	sub	sp, sp, #16
    8360:	str	ip, [sp]
    8364:	str	lr, [sp, #4]
    8368:	str	r4, [sp, #8]
    836c:	str	r5, [sp, #12]
    8370:	mov	r4, r0
    8374:	ldr	r0, [r4]
    8378:	cmp	r0, #0
    837c:	beq	83e4 <parser_info_delete+0x8c>
    8380:	ldr	r5, [r4]
    8384:	ldr	r1, [r5, #8]
    8388:	cmp	r1, #0
    838c:	beq	83bc <parser_info_delete+0x64>
    8390:	ldr	r2, [r5, #40]	; 0x28
    8394:	cmp	r2, #0
    8398:	bne	83b0 <parser_info_delete+0x58>
    839c:	ldr	r0, [pc, #156]	; 8440 <parser_info_delete+0xe8>
    83a0:	ldr	r1, [pc, #148]	; 843c <parser_info_delete+0xe4>
    83a4:	movw	r2, #4055	; 0xfd7
    83a8:	ldr	r3, [pc, #148]	; 8444 <parser_info_delete+0xec>
    83ac:	bl	0 <__assert_fail>
    83b0:	ldr	ip, [r5, #40]	; 0x28
    83b4:	ldr	r0, [r5, #8]
    83b8:	blx	ip
    83bc:	ldr	r1, [r5, #12]
    83c0:	cmp	r1, #0
    83c4:	beq	83d0 <parser_info_delete+0x78>
    83c8:	ldr	r0, [r5, #12]
    83cc:	bl	0 <free>
    83d0:	ldr	r2, [r5, #396]	; 0x18c
    83d4:	str	r2, [r4]
    83d8:	mov	r0, r5
    83dc:	bl	0 <free>
    83e0:	b	8374 <parser_info_delete+0x1c>
    83e4:	ldr	r3, [r4, #4]
    83e8:	cmp	r3, #0
    83ec:	beq	83f8 <parser_info_delete+0xa0>
    83f0:	ldr	r0, [r4, #4]
    83f4:	bl	0 <coda_XML_ParserFree>
    83f8:	ldr	ip, [r4, #8]
    83fc:	cmp	ip, #0
    8400:	beq	840c <parser_info_delete+0xb4>
    8404:	ldr	r0, [r4, #8]
    8408:	bl	0 <coda_hashtable_delete>
    840c:	ldr	r3, [r4, #12]
    8410:	cmp	r3, #0
    8414:	beq	8420 <parser_info_delete+0xc8>
    8418:	ldr	r0, [r4, #12]
    841c:	bl	0 <free>
    8420:	mov	r0, #0
    8424:	str	r0, [r4, #16]
    8428:	ldr	r4, [sp, #8]
    842c:	ldr	r5, [sp, #12]
    8430:	ldr	lr, [sp, #4]
    8434:	add	sp, sp, #16
    8438:	bx	lr
    843c:	.word	0x00001939
    8440:	.word	0x00001c75
    8444:	.word	0x000021bd

00008448 <parse_entry>:
    8448:	mov	ip, sp
    844c:	sub	sp, sp, #104	; 0x68
    8450:	str	ip, [sp, #4]
    8454:	str	lr, [sp, #8]
    8458:	str	r4, [sp, #16]
    845c:	str	r5, [sp, #20]
    8460:	str	r6, [sp, #24]
    8464:	str	r7, [sp, #28]
    8468:	str	r8, [sp, #32]
    846c:	str	r9, [sp, #36]	; 0x24
    8470:	str	sl, [sp, #40]	; 0x28
    8474:	ldr	r9, [ip]
    8478:	mov	sl, r3
    847c:	mov	r8, r2
    8480:	mov	r7, r1
    8484:	mov	r6, r0
    8488:	mov	r5, #0
    848c:	cmp	r7, #0
    8490:	beq	858c <parse_entry+0x144>
    8494:	cmp	r7, #1
    8498:	beq	8518 <parse_entry+0xd0>
    849c:	cmp	r7, #2
    84a0:	bne	85b4 <parse_entry+0x16c>
    84a4:	cmp	r8, #0
    84a8:	bne	84c0 <parse_entry+0x78>
    84ac:	ldr	r0, [pc, #1404]	; 8a30 <parse_entry+0x5e8>
    84b0:	ldr	r1, [pc, #1328]	; 89e8 <parse_entry+0x5a0>
    84b4:	movw	r2, #4111	; 0x100f
    84b8:	ldr	r3, [pc, #1416]	; 8a48 <parse_entry+0x600>
    84bc:	bl	0 <__assert_fail>
    84c0:	mov	r0, r8
    84c4:	bl	0 <strlen>
    84c8:	add	r0, r0, #14
    84cc:	bl	0 <malloc>
    84d0:	mov	r5, r0
    84d4:	cmp	r5, #0
    84d8:	bne	8504 <parse_entry+0xbc>
    84dc:	mov	r0, r8
    84e0:	bl	0 <strlen>
    84e4:	mov	ip, r0
    84e8:	mvn	r0, #0
    84ec:	ldr	r1, [pc, #1328]	; 8a24 <parse_entry+0x5dc>
    84f0:	add	r2, ip, #14
    84f4:	ldr	r3, [pc, #1260]	; 89e8 <parse_entry+0x5a0>
    84f8:	movw	r4, #4116	; 0x1014
    84fc:	str	r4, [sp]
    8500:	bl	0 <coda_set_error>
    8504:	ldr	r1, [pc, #1312]	; 8a2c <parse_entry+0x5e4>
    8508:	mov	r2, r8
    850c:	mov	r0, r5
    8510:	bl	0 <sprintf>
    8514:	b	85b4 <parse_entry+0x16c>
    8518:	cmp	r8, #0
    851c:	bne	8534 <parse_entry+0xec>
    8520:	ldr	r0, [pc, #1288]	; 8a30 <parse_entry+0x5e8>
    8524:	ldr	r1, [pc, #1212]	; 89e8 <parse_entry+0x5a0>
    8528:	movw	r2, #4101	; 0x1005
    852c:	ldr	r3, [pc, #1300]	; 8a48 <parse_entry+0x600>
    8530:	bl	0 <__assert_fail>
    8534:	mov	r0, r8
    8538:	bl	0 <strlen>
    853c:	add	r0, r0, #11
    8540:	bl	0 <malloc>
    8544:	mov	r5, r0
    8548:	cmp	r5, #0
    854c:	bne	8578 <parse_entry+0x130>
    8550:	mov	r0, r8
    8554:	bl	0 <strlen>
    8558:	mov	r2, r0
    855c:	mvn	r0, #0
    8560:	ldr	r1, [pc, #1212]	; 8a24 <parse_entry+0x5dc>
    8564:	add	r2, r2, #11
    8568:	ldr	r3, [pc, #1144]	; 89e8 <parse_entry+0x5a0>
    856c:	movw	r4, #4106	; 0x100a
    8570:	str	r4, [sp]
    8574:	bl	0 <coda_set_error>
    8578:	ldr	r1, [pc, #1140]	; 89f4 <parse_entry+0x5ac>
    857c:	mov	r2, r8
    8580:	mov	r0, r5
    8584:	bl	0 <sprintf>
    8588:	b	85b4 <parse_entry+0x16c>
    858c:	ldr	r0, [pc, #1160]	; 8a1c <parse_entry+0x5d4>
    8590:	bl	0 <strdup>
    8594:	mov	r5, r0
    8598:	cmp	r5, #0
    859c:	bne	85b4 <parse_entry+0x16c>
    85a0:	mvn	r0, #0
    85a4:	ldr	r1, [pc, #1088]	; 89ec <parse_entry+0x5a4>
    85a8:	ldr	r2, [pc, #1080]	; 89e8 <parse_entry+0x5a0>
    85ac:	movw	r3, #4097	; 0x1001
    85b0:	bl	0 <coda_set_error>
    85b4:	mov	r1, r5
    85b8:	mov	r0, r6
    85bc:	bl	0 <coda_za_get_entry_by_name>
    85c0:	mov	r4, r0
    85c4:	cmp	r4, #0
    85c8:	bne	8658 <parse_entry+0x210>
    85cc:	cmp	r7, #0
    85d0:	beq	862c <parse_entry+0x1e4>
    85d4:	cmp	r7, #1
    85d8:	beq	8608 <parse_entry+0x1c0>
    85dc:	cmp	r7, #2
    85e0:	bne	8648 <parse_entry+0x200>
    85e4:	mov	r0, r6
    85e8:	bl	0 <coda_za_get_filename>
    85ec:	mov	r2, r0
    85f0:	movw	r0, #65136	; 0xfe70
    85f4:	movt	r0, #65535	; 0xffff
    85f8:	ldr	r1, [pc, #1080]	; 8a38 <parse_entry+0x5f0>
    85fc:	mov	r3, r8
    8600:	bl	0 <coda_set_error>
    8604:	b	8648 <parse_entry+0x200>
    8608:	mov	r0, r6
    860c:	bl	0 <coda_za_get_filename>
    8610:	mov	r2, r0
    8614:	movw	r0, #65136	; 0xfe70
    8618:	movt	r0, #65535	; 0xffff
    861c:	ldr	r1, [pc, #1040]	; 8a34 <parse_entry+0x5ec>
    8620:	mov	r3, r8
    8624:	bl	0 <coda_set_error>
    8628:	b	8648 <parse_entry+0x200>
    862c:	mov	r0, r6
    8630:	bl	0 <coda_za_get_filename>
    8634:	mov	r2, r0
    8638:	movw	r0, #65136	; 0xfe70
    863c:	movt	r0, #65535	; 0xffff
    8640:	ldr	r1, [pc, #936]	; 89f0 <parse_entry+0x5a8>
    8644:	bl	0 <coda_set_error>
    8648:	mov	r0, r5
    864c:	bl	0 <free>
    8650:	mvn	r0, #0
    8654:	b	89c0 <parse_entry+0x578>
    8658:	mov	r0, r5
    865c:	bl	0 <free>
    8660:	add	r0, sp, #48	; 0x30
    8664:	bl	82dc <parser_info_init>
    8668:	str	r6, [sp, #64]	; 0x40
    866c:	str	r8, [sp, #68]	; 0x44
    8670:	str	sl, [sp, #72]	; 0x48
    8674:	str	r9, [sp, #76]	; 0x4c
    8678:	mov	r0, r4
    867c:	bl	0 <coda_za_get_entry_size>
    8680:	mov	r5, r0
    8684:	mov	r0, r5
    8688:	bl	0 <malloc>
    868c:	str	r0, [sp, #60]	; 0x3c
    8690:	ldr	r1, [sp, #60]	; 0x3c
    8694:	cmp	r1, #0
    8698:	bne	86c8 <parse_entry+0x280>
    869c:	mvn	r0, #0
    86a0:	ldr	r1, [pc, #892]	; 8a24 <parse_entry+0x5dc>
    86a4:	ldr	r3, [pc, #828]	; 89e8 <parse_entry+0x5a0>
    86a8:	movw	ip, #4156	; 0x103c
    86ac:	str	ip, [sp]
    86b0:	mov	r2, r5
    86b4:	bl	0 <coda_set_error>
    86b8:	add	r0, sp, #48	; 0x30
    86bc:	bl	8358 <parser_info_delete>
    86c0:	mvn	r0, #0
    86c4:	b	89c0 <parse_entry+0x578>
    86c8:	ldr	r1, [sp, #60]	; 0x3c
    86cc:	mov	r0, r4
    86d0:	bl	0 <coda_za_read_entry>
    86d4:	cmp	r0, #0
    86d8:	beq	86ec <parse_entry+0x2a4>
    86dc:	add	r0, sp, #48	; 0x30
    86e0:	bl	8358 <parser_info_delete>
    86e4:	mvn	r0, #0
    86e8:	b	89c0 <parse_entry+0x578>
    86ec:	mov	r0, #1
    86f0:	bl	0 <coda_hashtable_new>
    86f4:	str	r0, [sp, #56]	; 0x38
    86f8:	ldr	ip, [sp, #56]	; 0x38
    86fc:	cmp	ip, #0
    8700:	bne	8728 <parse_entry+0x2e0>
    8704:	mvn	r0, #0
    8708:	ldr	r1, [pc, #744]	; 89f8 <parse_entry+0x5b0>
    870c:	ldr	r2, [pc, #724]	; 89e8 <parse_entry+0x5a0>
    8710:	movw	r3, #4170	; 0x104a
    8714:	bl	0 <coda_set_error>
    8718:	add	r0, sp, #48	; 0x30
    871c:	bl	8358 <parser_info_delete>
    8720:	mvn	r0, #0
    8724:	b	89c0 <parse_entry+0x578>
    8728:	mov	r4, #0
    872c:	cmp	r4, #43	; 0x2b
    8730:	bge	8768 <parse_entry+0x320>
    8734:	ldr	r0, [sp, #56]	; 0x38
    8738:	ldr	ip, [pc, #728]	; 8a18 <parse_entry+0x5d0>
    873c:	ldr	r1, [ip, r4, lsl #2]
    8740:	bl	0 <coda_hashtable_add_name>
    8744:	cmp	r0, #0
    8748:	beq	8760 <parse_entry+0x318>
    874c:	ldr	r0, [pc, #700]	; 8a10 <parse_entry+0x5c8>
    8750:	ldr	r1, [pc, #656]	; 89e8 <parse_entry+0x5a0>
    8754:	movw	r2, #4178	; 0x1052
    8758:	ldr	r3, [pc, #744]	; 8a48 <parse_entry+0x600>
    875c:	bl	0 <__assert_fail>
    8760:	add	r4, r4, #1
    8764:	b	872c <parse_entry+0x2e4>
    8768:	mov	r0, #0
    876c:	mov	r1, #32
    8770:	bl	0 <coda_XML_ParserCreateNS>
    8774:	str	r0, [sp, #52]	; 0x34
    8778:	ldr	ip, [sp, #52]	; 0x34
    877c:	cmp	ip, #0
    8780:	bne	87a0 <parse_entry+0x358>
    8784:	mvn	r0, #13
    8788:	ldr	r1, [pc, #624]	; 8a00 <parse_entry+0x5b8>
    878c:	bl	0 <coda_set_error>
    8790:	add	r0, sp, #48	; 0x30
    8794:	bl	8358 <parser_info_delete>
    8798:	mvn	r0, #0
    879c:	b	89c0 <parse_entry+0x578>
    87a0:	ldr	r0, [sp, #52]	; 0x34
    87a4:	add	r1, sp, #48	; 0x30
    87a8:	bl	0 <coda_XML_SetUserData>
    87ac:	ldr	r0, [sp, #52]	; 0x34
    87b0:	ldr	r1, [pc, #660]	; 8a4c <parse_entry+0x604>
    87b4:	ldr	r2, [pc, #600]	; 8a14 <parse_entry+0x5cc>
    87b8:	bl	0 <coda_XML_SetElementHandler>
    87bc:	add	r0, sp, #48	; 0x30
    87c0:	mvn	r1, #0
    87c4:	mov	r2, #0
    87c8:	bl	7d48 <push_node>
    87cc:	ldr	r3, [sp, #48]	; 0x30
    87d0:	mov	r2, #0
    87d4:	str	r2, [r3, #48]	; 0x30
    87d8:	cmp	r7, #0
    87dc:	beq	8818 <parse_entry+0x3d0>
    87e0:	cmp	r7, #1
    87e4:	beq	8808 <parse_entry+0x3c0>
    87e8:	cmp	r7, #2
    87ec:	bne	882c <parse_entry+0x3e4>
    87f0:	ldr	r0, [sp, #48]	; 0x30
    87f4:	mov	r1, #31
    87f8:	ldr	r2, [pc, #516]	; 8a04 <parse_entry+0x5bc>
    87fc:	mov	r3, #0
    8800:	bl	e64 <register_sub_element>
    8804:	b	882c <parse_entry+0x3e4>
    8808:	ldr	r0, [sp, #48]	; 0x30
    880c:	ldr	r1, [pc, #524]	; 8a20 <parse_entry+0x5d8>
    8810:	bl	ef0 <register_type_elements>
    8814:	b	882c <parse_entry+0x3e4>
    8818:	ldr	r0, [sp, #48]	; 0x30
    881c:	mov	r1, #30
    8820:	ldr	r2, [pc, #540]	; 8a44 <parse_entry+0x5fc>
    8824:	ldr	r3, [pc, #552]	; 8a54 <parse_entry+0x60c>
    8828:	bl	e64 <register_sub_element>
    882c:	ldr	r2, [pc, #456]	; 89fc <parse_entry+0x5b4>
    8830:	mov	r3, #0
    8834:	str	r3, [r2]
    8838:	ldr	r0, [sp, #52]	; 0x34
    883c:	ldr	r1, [sp, #60]	; 0x3c
    8840:	mov	r3, #1
    8844:	mov	r2, r5
    8848:	bl	0 <coda_XML_Parse>
    884c:	cmp	r0, #0
    8850:	beq	886c <parse_entry+0x424>
    8854:	ldr	r3, [pc, #416]	; 89fc <parse_entry+0x5b4>
    8858:	ldr	r1, [r3]
    885c:	cmp	r1, #0
    8860:	movne	r2, #1
    8864:	moveq	r2, #0
    8868:	b	8870 <parse_entry+0x428>
    886c:	mov	r2, #1
    8870:	cmp	r2, #0
    8874:	beq	888c <parse_entry+0x444>
    8878:	ldr	r3, [sp, #88]	; 0x58
    887c:	cmp	r3, #0
    8880:	moveq	r1, #1
    8884:	movne	r1, #0
    8888:	b	8890 <parse_entry+0x448>
    888c:	mov	r1, #0
    8890:	cmp	r1, #0
    8894:	beq	89b4 <parse_entry+0x56c>
    8898:	ldr	r2, [pc, #348]	; 89fc <parse_entry+0x5b4>
    889c:	ldr	r0, [r2]
    88a0:	cmp	r0, #0
    88a4:	bne	88cc <parse_entry+0x484>
    88a8:	ldr	r0, [sp, #52]	; 0x34
    88ac:	bl	0 <coda_XML_GetErrorCode>
    88b0:	bl	0 <coda_XML_ErrorString>
    88b4:	movw	r3, #65136	; 0xfe70
    88b8:	movt	r3, #65535	; 0xffff
    88bc:	ldr	r1, [pc, #396]	; 8a50 <parse_entry+0x608>
    88c0:	mov	r2, r0
    88c4:	mov	r0, r3
    88c8:	bl	0 <coda_set_error>
    88cc:	ldr	r1, [pc, #296]	; 89fc <parse_entry+0x5b4>
    88d0:	ldr	ip, [r1]
    88d4:	cmn	ip, #400	; 0x190
    88d8:	beq	88f8 <parse_entry+0x4b0>
    88dc:	ldr	r1, [pc, #280]	; 89fc <parse_entry+0x5b4>
    88e0:	ldr	r0, [r1]
    88e4:	mvn	lr, #400	; 0x190
    88e8:	cmp	r0, lr
    88ec:	moveq	r0, #1
    88f0:	movne	r0, #0
    88f4:	b	88fc <parse_entry+0x4b4>
    88f8:	mov	r0, #1
    88fc:	cmp	r0, #0
    8900:	beq	8918 <parse_entry+0x4d0>
    8904:	ldr	r1, [sp, #92]	; 0x5c
    8908:	cmp	r1, #0
    890c:	movne	r3, #1
    8910:	moveq	r3, #0
    8914:	b	891c <parse_entry+0x4d4>
    8918:	mov	r3, #0
    891c:	cmp	r3, #0
    8920:	beq	89a4 <parse_entry+0x55c>
    8924:	mov	r0, r6
    8928:	bl	0 <coda_za_get_filename>
    892c:	mov	r1, r0
    8930:	ldr	r0, [pc, #264]	; 8a40 <parse_entry+0x5f8>
    8934:	bl	0 <coda_add_error_message>
    8938:	cmp	r7, #0
    893c:	beq	8970 <parse_entry+0x528>
    8940:	cmp	r7, #1
    8944:	beq	8960 <parse_entry+0x518>
    8948:	cmp	r7, #2
    894c:	bne	897c <parse_entry+0x534>
    8950:	ldr	r0, [pc, #228]	; 8a3c <parse_entry+0x5f4>
    8954:	mov	r1, r8
    8958:	bl	0 <coda_add_error_message>
    895c:	b	897c <parse_entry+0x534>
    8960:	ldr	r0, [pc, #192]	; 8a28 <parse_entry+0x5e0>
    8964:	mov	r1, r8
    8968:	bl	0 <coda_add_error_message>
    896c:	b	897c <parse_entry+0x534>
    8970:	ldr	r0, [pc, #144]	; 8a08 <parse_entry+0x5c0>
    8974:	mov	r1, #0
    8978:	bl	0 <coda_add_error_message>
    897c:	ldr	r0, [sp, #52]	; 0x34
    8980:	bl	0 <coda_XML_GetCurrentLineNumber>
    8984:	mov	r4, r0
    8988:	ldr	r0, [sp, #52]	; 0x34
    898c:	bl	0 <coda_XML_GetCurrentByteIndex>
    8990:	ldr	r1, [pc, #116]	; 8a0c <parse_entry+0x5c4>
    8994:	mov	r2, r0
    8998:	mov	r0, r1
    899c:	mov	r1, r4
    89a0:	bl	0 <coda_add_error_message>
    89a4:	add	r0, sp, #48	; 0x30
    89a8:	bl	8358 <parser_info_delete>
    89ac:	mvn	r0, #0
    89b0:	b	89c0 <parse_entry+0x578>
    89b4:	add	r0, sp, #48	; 0x30
    89b8:	bl	8358 <parser_info_delete>
    89bc:	mov	r0, #0
    89c0:	ldr	r4, [sp, #16]
    89c4:	ldr	r5, [sp, #20]
    89c8:	ldr	r6, [sp, #24]
    89cc:	ldr	r7, [sp, #28]
    89d0:	ldr	r8, [sp, #32]
    89d4:	ldr	r9, [sp, #36]	; 0x24
    89d8:	ldr	sl, [sp, #40]	; 0x28
    89dc:	ldr	lr, [sp, #8]
    89e0:	add	sp, sp, #104	; 0x68
    89e4:	bx	lr
    89e8:	.word	0x00001939
    89ec:	.word	0x00001c42
    89f0:	.word	0x000014c5
    89f4:	.word	0x00000742
    89f8:	.word	0x00001e8d
    89fc:	.word	0x00000000
    8a00:	.word	0x000014f2
    8a04:	.word	0x00000000
    8a08:	.word	0x00000ac4
    8a0c:	.word	0x00000d7c
    8a10:	.word	0x00001cc5
	...
    8a1c:	.word	0x00000cee
    8a20:	.word	0x00000000
    8a24:	.word	0x00000e60
    8a28:	.word	0x00000810
    8a2c:	.word	0x00000a45
    8a30:	.word	0x00000b82
    8a34:	.word	0x00000eee
    8a38:	.word	0x00001d71
    8a3c:	.word	0x00000de2
    8a40:	.word	0x000001ed
    8a44:	.word	0x00000000
    8a48:	.word	0x000021d0
    8a4c:	.word	0x00000000
    8a50:	.word	0x000018ee
    8a54:	.word	0x00000000

00008a58 <read_definition_file>:
    8a58:	mov	ip, sp
    8a5c:	sub	sp, sp, #24
    8a60:	str	ip, [sp, #4]
    8a64:	str	lr, [sp, #8]
    8a68:	str	r4, [sp, #16]
    8a6c:	ldr	r1, [pc, #100]	; 8ad8 <read_definition_file+0x80>
    8a70:	bl	0 <coda_za_open>
    8a74:	mov	r4, r0
    8a78:	cmp	r4, #0
    8a7c:	bne	8a88 <read_definition_file+0x30>
    8a80:	mvn	r0, #0
    8a84:	b	8ac8 <read_definition_file+0x70>
    8a88:	mov	r1, #0
    8a8c:	mov	r2, #0
    8a90:	mov	r3, #0
    8a94:	mov	r0, #0
    8a98:	str	r0, [sp]
    8a9c:	mov	r0, r4
    8aa0:	bl	8448 <parse_entry>
    8aa4:	cmp	r0, #0
    8aa8:	beq	8abc <read_definition_file+0x64>
    8aac:	mov	r0, r4
    8ab0:	bl	0 <coda_za_close>
    8ab4:	mvn	r0, #0
    8ab8:	b	8ac8 <read_definition_file+0x70>
    8abc:	mov	r0, r4
    8ac0:	bl	0 <coda_za_close>
    8ac4:	mov	r0, #0
    8ac8:	ldr	r4, [sp, #16]
    8acc:	ldr	lr, [sp, #8]
    8ad0:	add	sp, sp, #24
    8ad4:	bx	lr
    8ad8:	.word	0x00000000

00008adc <coda_read_product_definition>:
    8adc:	mov	ip, sp
    8ae0:	sub	sp, sp, #32
    8ae4:	str	ip, [sp, #4]
    8ae8:	str	lr, [sp, #8]
    8aec:	str	r4, [sp, #16]
    8af0:	str	r5, [sp, #20]
    8af4:	str	r6, [sp, #24]
    8af8:	mov	r5, r0
    8afc:	ldr	r3, [r5, #24]
    8b00:	cmp	r3, #0
    8b04:	beq	8b1c <coda_read_product_definition+0x40>
    8b08:	ldr	r0, [pc, #148]	; 8ba4 <coda_read_product_definition+0xc8>
    8b0c:	ldr	r1, [pc, #132]	; 8b98 <coda_read_product_definition+0xbc>
    8b10:	movw	r2, #4269	; 0x10ad
    8b14:	ldr	r3, [pc, #132]	; 8ba0 <coda_read_product_definition+0xc4>
    8b18:	bl	0 <__assert_fail>
    8b1c:	ldr	r1, [r5, #44]	; 0x2c
    8b20:	ldr	r6, [r1, #20]
    8b24:	ldr	r0, [r6, #8]
    8b28:	ldr	r1, [pc, #108]	; 8b9c <coda_read_product_definition+0xc0>
    8b2c:	bl	0 <coda_za_open>
    8b30:	mov	r4, r0
    8b34:	cmp	r4, #0
    8b38:	bne	8b44 <coda_read_product_definition+0x68>
    8b3c:	mvn	r0, #0
    8b40:	b	8b80 <coda_read_product_definition+0xa4>
    8b44:	mov	r1, #2
    8b48:	ldr	r2, [r5, #8]
    8b4c:	str	r5, [sp]
    8b50:	mov	r3, r6
    8b54:	mov	r0, r4
    8b58:	bl	8448 <parse_entry>
    8b5c:	cmp	r0, #0
    8b60:	beq	8b74 <coda_read_product_definition+0x98>
    8b64:	mov	r0, r4
    8b68:	bl	0 <coda_za_close>
    8b6c:	mvn	r0, #0
    8b70:	b	8b80 <coda_read_product_definition+0xa4>
    8b74:	mov	r0, r4
    8b78:	bl	0 <coda_za_close>
    8b7c:	mov	r0, #0
    8b80:	ldr	r4, [sp, #16]
    8b84:	ldr	r5, [sp, #20]
    8b88:	ldr	r6, [sp, #24]
    8b8c:	ldr	lr, [sp, #8]
    8b90:	add	sp, sp, #32
    8b94:	bx	lr
    8b98:	.word	0x00001939
    8b9c:	.word	0x00000000
    8ba0:	.word	0x000021dc
    8ba4:	.word	0x00001f08

00008ba8 <coda_read_definitions>:
    8ba8:	mov	ip, sp
    8bac:	sub	sp, sp, #136	; 0x88
    8bb0:	str	ip, [sp, #4]
    8bb4:	str	lr, [sp, #8]
    8bb8:	str	r4, [sp, #16]
    8bbc:	str	r5, [sp, #20]
    8bc0:	str	r6, [sp, #24]
    8bc4:	str	r7, [sp, #28]
    8bc8:	str	r8, [sp, #32]
    8bcc:	str	r9, [sp, #36]	; 0x24
    8bd0:	str	sl, [sp, #40]	; 0x28
    8bd4:	str	fp, [sp, #44]	; 0x2c
    8bd8:	mov	sl, #58	; 0x3a
    8bdc:	bl	0 <strdup>
    8be0:	mov	r8, r0
    8be4:	cmp	r8, #0
    8be8:	bne	8c08 <coda_read_definitions+0x60>
    8bec:	mvn	r0, #0
    8bf0:	ldr	r1, [pc, #724]	; 8ecc <coda_read_definitions+0x324>
    8bf4:	ldr	r2, [pc, #712]	; 8ec4 <coda_read_definitions+0x31c>
    8bf8:	movw	r3, #4302	; 0x10ce
    8bfc:	bl	0 <coda_set_error>
    8c00:	mvn	r0, #0
    8c04:	b	8e98 <coda_read_definitions+0x2f0>
    8c08:	mov	r7, r8
    8c0c:	ldrb	r0, [r7]
    8c10:	cmp	r0, #0
    8c14:	beq	8e8c <coda_read_definitions+0x2e4>
    8c18:	mov	r6, r7
    8c1c:	ldrb	r3, [r6]
    8c20:	cmp	r3, #0
    8c24:	beq	8c3c <coda_read_definitions+0x94>
    8c28:	ldrb	r1, [r6]
    8c2c:	cmp	r1, sl
    8c30:	movne	r1, #1
    8c34:	moveq	r1, #0
    8c38:	b	8c40 <coda_read_definitions+0x98>
    8c3c:	mov	r1, #0
    8c40:	cmp	r1, #0
    8c44:	beq	8c50 <coda_read_definitions+0xa8>
    8c48:	add	r6, r6, #1
    8c4c:	b	8c1c <coda_read_definitions+0x74>
    8c50:	ldrb	r3, [r6]
    8c54:	cmp	r3, #0
    8c58:	beq	8c68 <coda_read_definitions+0xc0>
    8c5c:	mov	r0, #0
    8c60:	strb	r0, [r6]
    8c64:	add	r6, r6, #1
    8c68:	add	r1, sp, #48	; 0x30
    8c6c:	mov	r0, r7
    8c70:	bl	0 <stat>
    8c74:	cmp	r0, #0
    8c78:	bne	8e84 <coda_read_definitions+0x2dc>
    8c7c:	ldr	ip, [sp, #64]	; 0x40
    8c80:	and	r0, ip, #16384	; 0x4000
    8c84:	cmp	r0, #0
    8c88:	beq	8e54 <coda_read_definitions+0x2ac>
    8c8c:	mov	r0, r7
    8c90:	bl	0 <opendir>
    8c94:	mov	r5, r0
    8c98:	cmp	r5, #0
    8c9c:	bne	8cd8 <coda_read_definitions+0x130>
    8ca0:	bl	0 <__errno_location>
    8ca4:	ldr	r0, [r0]
    8ca8:	bl	0 <strerror>
    8cac:	movw	r2, #65136	; 0xfe70
    8cb0:	movt	r2, #65535	; 0xffff
    8cb4:	ldr	r1, [pc, #544]	; 8edc <coda_read_definitions+0x334>
    8cb8:	mov	r3, r0
    8cbc:	mov	r0, r2
    8cc0:	mov	r2, r7
    8cc4:	bl	0 <coda_set_error>
    8cc8:	mov	r0, r8
    8ccc:	bl	0 <free>
    8cd0:	mvn	r0, #0
    8cd4:	b	8e98 <coda_read_definitions+0x2f0>
    8cd8:	mov	r0, r5
    8cdc:	bl	0 <readdir>
    8ce0:	mov	r4, r0
    8ce4:	cmp	r4, #0
    8ce8:	beq	8e48 <coda_read_definitions+0x2a0>
    8cec:	add	r0, r4, #11
    8cf0:	bl	0 <strlen>
    8cf4:	mov	fp, r0
    8cf8:	cmp	fp, #8
    8cfc:	ble	8d20 <coda_read_definitions+0x178>
    8d00:	add	ip, r4, fp
    8d04:	add	r0, ip, #3
    8d08:	ldr	r1, [pc, #452]	; 8ed4 <coda_read_definitions+0x32c>
    8d0c:	bl	0 <strcmp>
    8d10:	cmp	r0, #0
    8d14:	moveq	r0, #1
    8d18:	movne	r0, #0
    8d1c:	b	8d24 <coda_read_definitions+0x17c>
    8d20:	mov	r0, #0
    8d24:	cmp	r0, #0
    8d28:	beq	8cd8 <coda_read_definitions+0x130>
    8d2c:	mov	r0, r7
    8d30:	bl	0 <strlen>
    8d34:	add	r2, r0, fp
    8d38:	add	r0, r2, #2
    8d3c:	bl	0 <malloc>
    8d40:	mov	r9, r0
    8d44:	cmp	r9, #0
    8d48:	bne	8d90 <coda_read_definitions+0x1e8>
    8d4c:	mov	r0, r7
    8d50:	bl	0 <strlen>
    8d54:	mvn	ip, #0
    8d58:	ldr	r1, [pc, #368]	; 8ed0 <coda_read_definitions+0x328>
    8d5c:	add	r2, r0, fp
    8d60:	add	r2, r2, #2
    8d64:	ldr	r3, [pc, #344]	; 8ec4 <coda_read_definitions+0x31c>
    8d68:	movw	r0, #4427	; 0x114b
    8d6c:	str	r0, [sp]
    8d70:	mov	r0, ip
    8d74:	bl	0 <coda_set_error>
    8d78:	mov	r0, r5
    8d7c:	bl	0 <closedir>
    8d80:	mov	r0, r8
    8d84:	bl	0 <free>
    8d88:	mvn	r0, #0
    8d8c:	b	8e98 <coda_read_definitions+0x2f0>
    8d90:	ldr	r1, [pc, #304]	; 8ec8 <coda_read_definitions+0x320>
    8d94:	add	r3, r4, #11
    8d98:	mov	r2, r7
    8d9c:	mov	r0, r9
    8da0:	bl	0 <sprintf>
    8da4:	add	r1, sp, #48	; 0x30
    8da8:	mov	r0, r9
    8dac:	bl	0 <stat>
    8db0:	cmp	r0, #0
    8db4:	beq	8dfc <coda_read_definitions+0x254>
    8db8:	bl	0 <__errno_location>
    8dbc:	ldr	r0, [r0]
    8dc0:	bl	0 <strerror>
    8dc4:	mov	r3, r0
    8dc8:	movw	r0, #65136	; 0xfe70
    8dcc:	movt	r0, #65535	; 0xffff
    8dd0:	ldr	r1, [pc, #256]	; 8ed8 <coda_read_definitions+0x330>
    8dd4:	mov	r2, r9
    8dd8:	bl	0 <coda_set_error>
    8ddc:	mov	r0, r9
    8de0:	bl	0 <free>
    8de4:	mov	r0, r5
    8de8:	bl	0 <closedir>
    8dec:	mov	r0, r8
    8df0:	bl	0 <free>
    8df4:	mvn	r0, #0
    8df8:	b	8e98 <coda_read_definitions+0x2f0>
    8dfc:	ldr	r3, [sp, #64]	; 0x40
    8e00:	and	r2, r3, #32768	; 0x8000
    8e04:	cmp	r2, #0
    8e08:	beq	8e3c <coda_read_definitions+0x294>
    8e0c:	mov	r0, r9
    8e10:	bl	8a58 <read_definition_file>
    8e14:	cmp	r0, #0
    8e18:	beq	8e3c <coda_read_definitions+0x294>
    8e1c:	mov	r0, r9
    8e20:	bl	0 <free>
    8e24:	mov	r0, r5
    8e28:	bl	0 <closedir>
    8e2c:	mov	r0, r8
    8e30:	bl	0 <free>
    8e34:	mvn	r0, #0
    8e38:	b	8e98 <coda_read_definitions+0x2f0>
    8e3c:	mov	r0, r9
    8e40:	bl	0 <free>
    8e44:	b	8cd8 <coda_read_definitions+0x130>
    8e48:	mov	r0, r5
    8e4c:	bl	0 <closedir>
    8e50:	b	8e84 <coda_read_definitions+0x2dc>
    8e54:	ldr	r1, [sp, #64]	; 0x40
    8e58:	and	r0, r1, #32768	; 0x8000
    8e5c:	cmp	r0, #0
    8e60:	beq	8e84 <coda_read_definitions+0x2dc>
    8e64:	mov	r0, r7
    8e68:	bl	8a58 <read_definition_file>
    8e6c:	cmp	r0, #0
    8e70:	beq	8e84 <coda_read_definitions+0x2dc>
    8e74:	mov	r0, r8
    8e78:	bl	0 <free>
    8e7c:	mvn	r0, #0
    8e80:	b	8e98 <coda_read_definitions+0x2f0>
    8e84:	mov	r7, r6
    8e88:	b	8c0c <coda_read_definitions+0x64>
    8e8c:	mov	r0, r8
    8e90:	bl	0 <free>
    8e94:	mov	r0, #0
    8e98:	ldr	r4, [sp, #16]
    8e9c:	ldr	r5, [sp, #20]
    8ea0:	ldr	r6, [sp, #24]
    8ea4:	ldr	r7, [sp, #28]
    8ea8:	ldr	r8, [sp, #32]
    8eac:	ldr	r9, [sp, #36]	; 0x24
    8eb0:	ldr	sl, [sp, #40]	; 0x28
    8eb4:	ldr	fp, [sp, #44]	; 0x2c
    8eb8:	ldr	lr, [sp, #8]
    8ebc:	add	sp, sp, #136	; 0x88
    8ec0:	bx	lr
    8ec4:	.word	0x00001939
    8ec8:	.word	0x00000519
    8ecc:	.word	0x00001c42
    8ed0:	.word	0x00000e60
    8ed4:	.word	0x0000074f
    8ed8:	.word	0x00002015
    8edc:	.word	0x00001226
