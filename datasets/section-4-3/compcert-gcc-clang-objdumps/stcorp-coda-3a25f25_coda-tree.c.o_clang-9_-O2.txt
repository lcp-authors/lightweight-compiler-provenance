
../compcert-repos/stcorp-coda-3a25f25/CMakeFiles/coda_static.dir/libcoda/coda-tree.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <coda_tree_node_new>:
   0:	push	{r4, sl, fp, lr}
   4:	add	fp, sp, #8
   8:	sub	sp, sp, #8
   c:	mov	r4, r0
  10:	mov	r0, #28
  14:	bl	0 <malloc>
  18:	cmp	r0, #0
  1c:	beq	44 <coda_tree_node_new+0x44>
  20:	vmov.i32	q8, #0	; 0x00000000
  24:	mov	r1, #0
  28:	str	r4, [r0]
  2c:	str	r1, [r0, #20]
  30:	str	r1, [r0, #24]
  34:	add	r1, r0, #4
  38:	vst1.32	{d16-d17}, [r1]
  3c:	sub	sp, fp, #8
  40:	pop	{r4, sl, fp, pc}
  44:	movw	r1, #0
  48:	movw	r3, #0
  4c:	mov	r0, #53	; 0x35
  50:	mov	r2, #28
  54:	movt	r1, #0
  58:	movt	r3, #0
  5c:	str	r0, [sp]
  60:	mvn	r0, #0
  64:	bl	0 <coda_set_error>
  68:	mov	r0, #0
  6c:	sub	sp, fp, #8
  70:	pop	{r4, sl, fp, pc}

00000074 <coda_tree_node_delete>:
  74:	push	{r4, r5, r6, sl, fp, lr}
  78:	add	fp, sp, #16
  7c:	mov	r4, r0
  80:	ldr	r0, [r0, #12]
  84:	mov	r5, r1
  88:	cmp	r0, #0
  8c:	movne	r1, r5
  90:	blne	74 <coda_tree_node_delete>
  94:	ldr	r0, [r4, #20]
  98:	cmp	r0, #0
  9c:	beq	a4 <coda_tree_node_delete+0x30>
  a0:	bl	0 <free>
  a4:	ldr	r0, [r4, #24]
  a8:	cmp	r0, #0
  ac:	beq	f8 <coda_tree_node_delete+0x84>
  b0:	ldr	r2, [r4, #16]
  b4:	cmp	r2, #1
  b8:	blt	f4 <coda_tree_node_delete+0x80>
  bc:	mov	r6, #0
  c0:	b	d0 <coda_tree_node_delete+0x5c>
  c4:	add	r6, r6, #1
  c8:	cmp	r6, r2
  cc:	bge	f4 <coda_tree_node_delete+0x80>
  d0:	ldr	r1, [r0, r6, lsl #2]
  d4:	cmp	r1, #0
  d8:	beq	c4 <coda_tree_node_delete+0x50>
  dc:	mov	r0, r1
  e0:	mov	r1, r5
  e4:	bl	74 <coda_tree_node_delete>
  e8:	ldr	r2, [r4, #16]
  ec:	ldr	r0, [r4, #24]
  f0:	b	c4 <coda_tree_node_delete+0x50>
  f4:	bl	0 <free>
  f8:	ldr	r0, [r4, #8]
  fc:	cmp	r0, #0
 100:	beq	14c <coda_tree_node_delete+0xd8>
 104:	cmp	r5, #0
 108:	beq	148 <coda_tree_node_delete+0xd4>
 10c:	ldr	r1, [r4, #4]
 110:	cmp	r1, #1
 114:	blt	148 <coda_tree_node_delete+0xd4>
 118:	mov	r6, #0
 11c:	ldr	r0, [r0, r6, lsl #2]
 120:	cmp	r0, #0
 124:	beq	130 <coda_tree_node_delete+0xbc>
 128:	blx	r5
 12c:	ldr	r1, [r4, #4]
 130:	add	r6, r6, #1
 134:	cmp	r6, r1
 138:	bge	144 <coda_tree_node_delete+0xd0>
 13c:	ldr	r0, [r4, #8]
 140:	b	11c <coda_tree_node_delete+0xa8>
 144:	ldr	r0, [r4, #8]
 148:	bl	0 <free>
 14c:	mov	r0, r4
 150:	pop	{r4, r5, r6, sl, fp, lr}
 154:	b	0 <free>

00000158 <coda_tree_node_add_item_for_path>:
 158:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
 15c:	add	fp, sp, #28
 160:	sub	sp, sp, #4
 164:	vpush	{d8-d9}
 168:	sub	sp, sp, #32
 16c:	stmib	sp, {r2, r3}
 170:	str	r0, [sp, #20]
 174:	mov	r5, r1
 178:	mov	r9, #0
 17c:	ldrb	r0, [r1]
 180:	cmp	r0, #47	; 0x2f
 184:	bne	1c0 <coda_tree_node_add_item_for_path+0x68>
 188:	ldrb	r0, [r5, #1]
 18c:	cmp	r0, #63	; 0x3f
 190:	bgt	1a4 <coda_tree_node_add_item_for_path+0x4c>
 194:	cmp	r0, #0
 198:	beq	1bc <coda_tree_node_add_item_for_path+0x64>
 19c:	cmp	r0, #47	; 0x2f
 1a0:	b	1b0 <coda_tree_node_add_item_for_path+0x58>
 1a4:	cmp	r0, #91	; 0x5b
 1a8:	beq	1bc <coda_tree_node_add_item_for_path+0x64>
 1ac:	cmp	r0, #64	; 0x40
 1b0:	mov	r9, #0
 1b4:	moveq	r9, #1
 1b8:	b	1c0 <coda_tree_node_add_item_for_path+0x68>
 1bc:	mov	r9, #1
 1c0:	vmov.i32	q4, #0	; 0x00000000
 1c4:	add	r7, sp, #20
 1c8:	add	r4, sp, #16
 1cc:	ldrb	r0, [r5, r9]
 1d0:	cmp	r0, #64	; 0x40
 1d4:	beq	284 <coda_tree_node_add_item_for_path+0x12c>
 1d8:	cmp	r0, #0
 1dc:	beq	484 <coda_tree_node_add_item_for_path+0x32c>
 1e0:	ldr	r8, [sp, #20]
 1e4:	mov	r1, r4
 1e8:	ldr	r0, [r8]
 1ec:	bl	0 <coda_type_get_class>
 1f0:	ldr	r0, [sp, #16]
 1f4:	cmp	r0, #6
 1f8:	bne	21c <coda_tree_node_add_item_for_path+0xc4>
 1fc:	ldr	r0, [r8]
 200:	add	r1, sp, #28
 204:	bl	0 <coda_type_get_special_base_type>
 208:	cmp	r0, #0
 20c:	bne	46c <coda_tree_node_add_item_for_path+0x314>
 210:	ldr	r0, [sp, #28]
 214:	mov	r1, r4
 218:	bl	0 <coda_type_get_class>
 21c:	ldrb	r0, [r5, r9]
 220:	cmp	r0, #47	; 0x2f
 224:	beq	2a8 <coda_tree_node_add_item_for_path+0x150>
 228:	cmp	r0, #91	; 0x5b
 22c:	bne	4f4 <coda_tree_node_add_item_for_path+0x39c>
 230:	ldr	r0, [sp, #16]
 234:	mov	sl, r7
 238:	cmp	r0, #1
 23c:	beq	260 <coda_tree_node_add_item_for_path+0x108>
 240:	bl	0 <coda_type_get_class_name>
 244:	movw	r1, #0
 248:	str	r0, [sp]
 24c:	mvn	r0, #99	; 0x63
 250:	mov	r2, r9
 254:	mov	r3, r5
 258:	movt	r1, #0
 25c:	bl	0 <coda_set_error>
 260:	add	r7, r9, #1
 264:	mov	r4, r7
 268:	ldrb	r0, [r5, r4]
 26c:	cmp	r0, #0
 270:	beq	458 <coda_tree_node_add_item_for_path+0x300>
 274:	cmp	r0, #93	; 0x5d
 278:	beq	34c <coda_tree_node_add_item_for_path+0x1f4>
 27c:	add	r4, r4, #1
 280:	b	268 <coda_tree_node_add_item_for_path+0x110>
 284:	ldr	r0, [sp, #20]
 288:	mvn	r1, #0
 28c:	mov	r2, r7
 290:	mvn	r6, #0
 294:	bl	59c <tree_node_get_node_for_index>
 298:	cmp	r0, #0
 29c:	bne	470 <coda_tree_node_add_item_for_path+0x318>
 2a0:	add	r9, r9, #1
 2a4:	b	1cc <coda_tree_node_add_item_for_path+0x74>
 2a8:	ldr	r0, [sp, #16]
 2ac:	cmp	r0, #0
 2b0:	beq	2d4 <coda_tree_node_add_item_for_path+0x17c>
 2b4:	bl	0 <coda_type_get_class_name>
 2b8:	movw	r1, #0
 2bc:	str	r0, [sp]
 2c0:	mvn	r0, #99	; 0x63
 2c4:	mov	r2, r9
 2c8:	mov	r3, r5
 2cc:	movt	r1, #0
 2d0:	bl	0 <coda_set_error>
 2d4:	add	r0, r9, #1
 2d8:	mov	sl, #0
 2dc:	add	r1, r5, r0
 2e0:	ldrb	r0, [r1, sl]
 2e4:	cmp	r0, #63	; 0x3f
 2e8:	bgt	2fc <coda_tree_node_add_item_for_path+0x1a4>
 2ec:	cmp	r0, #0
 2f0:	cmpne	r0, #47	; 0x2f
 2f4:	bne	308 <coda_tree_node_add_item_for_path+0x1b0>
 2f8:	b	310 <coda_tree_node_add_item_for_path+0x1b8>
 2fc:	cmp	r0, #64	; 0x40
 300:	cmpne	r0, #91	; 0x5b
 304:	beq	310 <coda_tree_node_add_item_for_path+0x1b8>
 308:	add	sl, sl, #1
 30c:	b	2e0 <coda_tree_node_add_item_for_path+0x188>
 310:	ldr	r0, [r8]
 314:	mov	r2, sl
 318:	add	r3, sp, #12
 31c:	bl	0 <coda_type_get_record_field_index_from_name_n>
 320:	cmp	r0, #0
 324:	bne	46c <coda_tree_node_add_item_for_path+0x314>
 328:	ldr	r1, [sp, #12]
 32c:	mov	r0, r8
 330:	mov	r2, r7
 334:	bl	59c <tree_node_get_node_for_index>
 338:	cmp	r0, #0
 33c:	bne	46c <coda_tree_node_add_item_for_path+0x314>
 340:	add	r0, r9, sl
 344:	add	r9, r0, #1
 348:	b	1cc <coda_tree_node_add_item_for_path+0x74>
 34c:	cmp	r4, r7
 350:	bne	3fc <coda_tree_node_add_item_for_path+0x2a4>
 354:	ldr	r0, [r8, #12]
 358:	mov	r7, sl
 35c:	cmp	r0, #0
 360:	bne	3f4 <coda_tree_node_add_item_for_path+0x29c>
 364:	ldr	r6, [r8]
 368:	add	r1, sp, #28
 36c:	mov	r0, r6
 370:	bl	0 <coda_type_get_class>
 374:	ldr	r0, [sp, #28]
 378:	cmp	r0, #6
 37c:	bne	3a8 <coda_tree_node_add_item_for_path+0x250>
 380:	mov	r0, r6
 384:	add	r1, sp, #24
 388:	bl	0 <coda_type_get_special_base_type>
 38c:	cmp	r0, #0
 390:	bne	46c <coda_tree_node_add_item_for_path+0x314>
 394:	ldr	r6, [sp, #24]
 398:	add	r1, sp, #28
 39c:	mov	r0, r6
 3a0:	bl	0 <coda_type_get_class>
 3a4:	ldr	r0, [sp, #28]
 3a8:	cmp	r0, #1
 3ac:	bne	57c <coda_tree_node_add_item_for_path+0x424>
 3b0:	mov	r0, r6
 3b4:	add	r1, sp, #24
 3b8:	bl	0 <coda_type_get_array_base_type>
 3bc:	cmp	r0, #0
 3c0:	bne	46c <coda_tree_node_add_item_for_path+0x314>
 3c4:	ldr	r6, [sp, #24]
 3c8:	mov	r0, #28
 3cc:	bl	0 <malloc>
 3d0:	cmp	r0, #0
 3d4:	beq	54c <coda_tree_node_add_item_for_path+0x3f4>
 3d8:	mov	r1, #0
 3dc:	str	r6, [r0]
 3e0:	str	r1, [r0, #20]
 3e4:	str	r1, [r0, #24]
 3e8:	add	r1, r0, #4
 3ec:	vst1.32	{d8-d9}, [r1]
 3f0:	str	r0, [r8, #12]
 3f4:	str	r0, [sp, #20]
 3f8:	b	44c <coda_tree_node_add_item_for_path+0x2f4>
 3fc:	movw	r1, #0
 400:	add	r6, r5, r7
 404:	add	r2, sp, #12
 408:	add	r3, sp, #28
 40c:	movt	r1, #0
 410:	mov	r0, r6
 414:	bl	0 <__isoc99_sscanf>
 418:	cmp	r0, #1
 41c:	bne	530 <coda_tree_node_add_item_for_path+0x3d8>
 420:	ldr	r0, [sp, #28]
 424:	sub	r2, r4, r7
 428:	cmp	r2, r0
 42c:	bne	534 <coda_tree_node_add_item_for_path+0x3dc>
 430:	ldr	r1, [sp, #12]
 434:	mov	r0, r8
 438:	mov	r2, sl
 43c:	mov	r7, sl
 440:	bl	59c <tree_node_get_node_for_index>
 444:	cmp	r0, #0
 448:	bne	46c <coda_tree_node_add_item_for_path+0x314>
 44c:	add	r9, r4, #1
 450:	add	r4, sp, #16
 454:	b	1cc <coda_tree_node_add_item_for_path+0x74>
 458:	movw	r1, #0
 45c:	movt	r1, #0
 460:	mvn	r0, #99	; 0x63
 464:	mov	r2, r5
 468:	bl	0 <coda_set_error>
 46c:	mvn	r6, #0
 470:	mov	r0, r6
 474:	sub	sp, fp, #48	; 0x30
 478:	vpop	{d8-d9}
 47c:	add	sp, sp, #4
 480:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
 484:	ldr	r4, [sp, #20]
 488:	add	r1, sp, #16
 48c:	ldr	r0, [r4]
 490:	bl	0 <coda_type_get_class>
 494:	ldr	r0, [sp, #8]
 498:	cmp	r0, #0
 49c:	beq	4b8 <coda_tree_node_add_item_for_path+0x360>
 4a0:	ldr	r0, [sp, #16]
 4a4:	cmp	r0, #1
 4a8:	bhi	4b8 <coda_tree_node_add_item_for_path+0x360>
 4ac:	movw	r1, #0
 4b0:	movt	r1, #0
 4b4:	b	460 <coda_tree_node_add_item_for_path+0x308>
 4b8:	ldr	r1, [r4, #4]
 4bc:	ldr	r0, [r4, #8]
 4c0:	mov	r5, #4
 4c4:	add	r1, r5, r1, lsl #2
 4c8:	bl	0 <realloc>
 4cc:	cmp	r0, #0
 4d0:	beq	500 <coda_tree_node_add_item_for_path+0x3a8>
 4d4:	str	r0, [r4, #8]
 4d8:	ldr	r2, [sp, #4]
 4dc:	mov	r6, #0
 4e0:	ldr	r1, [r4, #4]
 4e4:	str	r2, [r0, r1, lsl #2]
 4e8:	add	r0, r1, #1
 4ec:	str	r0, [r4, #4]
 4f0:	b	470 <coda_tree_node_add_item_for_path+0x318>
 4f4:	movw	r1, #0
 4f8:	movt	r1, #0
 4fc:	b	460 <coda_tree_node_add_item_for_path+0x308>
 500:	ldr	r0, [r4, #4]
 504:	mov	r1, #119	; 0x77
 508:	movw	r3, #0
 50c:	mvn	r6, #0
 510:	str	r1, [sp]
 514:	movw	r1, #0
 518:	movt	r3, #0
 51c:	movt	r1, #0
 520:	add	r2, r5, r0, lsl #2
 524:	mvn	r0, #0
 528:	bl	0 <coda_set_error>
 52c:	b	470 <coda_tree_node_add_item_for_path+0x318>
 530:	sub	r2, r4, r7
 534:	movw	r1, #0
 538:	mvn	r0, #99	; 0x63
 53c:	mov	r3, r6
 540:	movt	r1, #0
 544:	bl	0 <coda_set_error>
 548:	b	46c <coda_tree_node_add_item_for_path+0x314>
 54c:	movw	r1, #0
 550:	movw	r3, #0
 554:	mov	r0, #53	; 0x35
 558:	mov	r2, #28
 55c:	movt	r1, #0
 560:	movt	r3, #0
 564:	str	r0, [sp]
 568:	mvn	r0, #0
 56c:	bl	0 <coda_set_error>
 570:	mov	r0, #0
 574:	str	r0, [r8, #12]
 578:	b	46c <coda_tree_node_add_item_for_path+0x314>
 57c:	movw	r0, #0
 580:	movw	r1, #0
 584:	movw	r3, #0
 588:	mov	r2, #149	; 0x95
 58c:	movt	r0, #0
 590:	movt	r1, #0
 594:	movt	r3, #0
 598:	bl	0 <__assert_fail>

0000059c <tree_node_get_node_for_index>:
 59c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
 5a0:	add	fp, sp, #24
 5a4:	sub	sp, sp, #16
 5a8:	ldr	ip, [r0, #16]
 5ac:	mov	r6, r1
 5b0:	mov	r8, r2
 5b4:	mov	r9, r0
 5b8:	subs	r1, ip, #1
 5bc:	blt	628 <tree_node_get_node_for_index+0x8c>
 5c0:	cmp	r1, #0
 5c4:	beq	5fc <tree_node_get_node_for_index+0x60>
 5c8:	ldr	r2, [r9, #20]
 5cc:	mov	r3, #0
 5d0:	mov	r7, #1
 5d4:	add	r5, r3, r1
 5d8:	add	r5, r5, r5, lsr #31
 5dc:	asr	r4, r5, #1
 5e0:	ldr	r0, [r2, r4, lsl #2]
 5e4:	cmp	r0, r6
 5e8:	addlt	r3, r7, r5, asr #1
 5ec:	movge	r1, r4
 5f0:	cmp	r1, r3
 5f4:	bne	5d4 <tree_node_get_node_for_index+0x38>
 5f8:	b	600 <tree_node_get_node_for_index+0x64>
 5fc:	mov	r1, #0
 600:	ldr	r0, [r9, #20]
 604:	ldr	r0, [r0, r1, lsl #2]
 608:	cmp	r0, r6
 60c:	bne	628 <tree_node_get_node_for_index+0x8c>
 610:	ldr	r0, [r9, #24]
 614:	ldr	r0, [r0, r1, lsl #2]
 618:	str	r0, [r8]
 61c:	mov	r0, #0
 620:	sub	sp, fp, #24
 624:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
 628:	ldr	r0, [r9, #20]
 62c:	mov	r5, #4
 630:	ldr	r7, [r9]
 634:	add	r1, r5, ip, lsl #2
 638:	bl	0 <realloc>
 63c:	cmp	r0, #0
 640:	beq	6cc <tree_node_get_node_for_index+0x130>
 644:	str	r0, [r9, #20]
 648:	ldr	r1, [r9, #16]
 64c:	ldr	r0, [r9, #24]
 650:	add	r1, r5, r1, lsl #2
 654:	bl	0 <realloc>
 658:	cmp	r0, #0
 65c:	beq	6e0 <tree_node_get_node_for_index+0x144>
 660:	cmn	r6, #1
 664:	str	r0, [r9, #24]
 668:	beq	718 <tree_node_get_node_for_index+0x17c>
 66c:	add	r1, sp, #8
 670:	mov	r0, r7
 674:	bl	0 <coda_type_get_class>
 678:	ldr	r0, [sp, #8]
 67c:	cmp	r0, #6
 680:	bne	6ac <tree_node_get_node_for_index+0x110>
 684:	add	r1, sp, #12
 688:	mov	r0, r7
 68c:	bl	0 <coda_type_get_special_base_type>
 690:	cmp	r0, #0
 694:	bne	70c <tree_node_get_node_for_index+0x170>
 698:	ldr	r7, [sp, #12]
 69c:	add	r1, sp, #8
 6a0:	mov	r0, r7
 6a4:	bl	0 <coda_type_get_class>
 6a8:	ldr	r0, [sp, #8]
 6ac:	cmp	r0, #1
 6b0:	bne	730 <tree_node_get_node_for_index+0x194>
 6b4:	add	r1, sp, #12
 6b8:	mov	r0, r7
 6bc:	bl	0 <coda_type_get_array_base_type>
 6c0:	cmp	r0, #0
 6c4:	bne	70c <tree_node_get_node_for_index+0x170>
 6c8:	b	748 <tree_node_get_node_for_index+0x1ac>
 6cc:	ldr	r0, [r9, #16]
 6d0:	mov	r1, #204	; 0xcc
 6d4:	str	r1, [sp]
 6d8:	add	r2, r5, r0, lsl #2
 6dc:	b	6f4 <tree_node_get_node_for_index+0x158>
 6e0:	ldr	r0, [r9, #16]
 6e4:	mov	r1, #212	; 0xd4
 6e8:	str	r1, [sp]
 6ec:	mov	r1, #4
 6f0:	add	r2, r1, r0, lsl #2
 6f4:	movw	r1, #0
 6f8:	movw	r3, #0
 6fc:	mvn	r0, #0
 700:	movt	r1, #0
 704:	movt	r3, #0
 708:	bl	0 <coda_set_error>
 70c:	mvn	r0, #0
 710:	sub	sp, fp, #24
 714:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
 718:	add	r1, sp, #12
 71c:	mov	r0, r7
 720:	bl	0 <coda_type_get_attributes>
 724:	cmp	r0, #0
 728:	bne	70c <tree_node_get_node_for_index+0x170>
 72c:	b	748 <tree_node_get_node_for_index+0x1ac>
 730:	add	r2, sp, #12
 734:	mov	r0, r7
 738:	mov	r1, r6
 73c:	bl	0 <coda_type_get_record_field_type>
 740:	cmp	r0, #0
 744:	bne	70c <tree_node_get_node_for_index+0x170>
 748:	ldr	r5, [sp, #12]
 74c:	mov	r0, #28
 750:	bl	0 <malloc>
 754:	cmp	r0, #0
 758:	beq	7ec <tree_node_get_node_for_index+0x250>
 75c:	vmov.i32	q8, #0	; 0x00000000
 760:	mov	ip, r0
 764:	str	r5, [r0]
 768:	mov	r0, #0
 76c:	add	r2, ip, #4
 770:	str	r0, [ip, #20]
 774:	str	r0, [ip, #24]
 778:	vst1.32	{d16-d17}, [r2]
 77c:	str	ip, [r8]
 780:	ldr	r2, [r9, #16]
 784:	ldr	r3, [r9, #20]
 788:	cmp	r2, #1
 78c:	blt	7d0 <tree_node_get_node_for_index+0x234>
 790:	mov	r7, #0
 794:	b	7a4 <tree_node_get_node_for_index+0x208>
 798:	add	r7, r7, #1
 79c:	cmp	r7, r2
 7a0:	bge	7d0 <tree_node_get_node_for_index+0x234>
 7a4:	ldr	r5, [r3, r7, lsl #2]
 7a8:	cmp	r6, r5
 7ac:	bge	798 <tree_node_get_node_for_index+0x1fc>
 7b0:	ldr	r4, [r9, #24]
 7b4:	ldr	r1, [r4, r7, lsl #2]
 7b8:	str	r6, [r3, r7, lsl #2]
 7bc:	str	ip, [r4, r7, lsl #2]
 7c0:	mov	r6, r5
 7c4:	ldr	r3, [r9, #20]
 7c8:	mov	ip, r1
 7cc:	b	798 <tree_node_get_node_for_index+0x1fc>
 7d0:	str	r6, [r3, r2, lsl #2]
 7d4:	ldr	r1, [r9, #24]
 7d8:	str	ip, [r1, r2, lsl #2]
 7dc:	add	r1, r2, #1
 7e0:	str	r1, [r9, #16]
 7e4:	sub	sp, fp, #24
 7e8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
 7ec:	movw	r1, #0
 7f0:	movw	r3, #0
 7f4:	mov	r0, #53	; 0x35
 7f8:	mov	r2, #28
 7fc:	str	r0, [sp]
 800:	movt	r1, #0
 804:	movt	r3, #0
 808:	mvn	r0, #0
 80c:	b	708 <tree_node_get_node_for_index+0x16c>

00000810 <coda_tree_node_get_item_for_cursor>:
 810:	push	{fp, lr}
 814:	mov	fp, sp
 818:	mov	r3, r2
 81c:	mov	r2, r1
 820:	mov	r1, #0
 824:	bl	830 <get_item_for_cursor>
 828:	mov	r0, #0
 82c:	pop	{fp, pc}

00000830 <get_item_for_cursor>:
 830:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
 834:	add	fp, sp, #28
 838:	sub	sp, sp, #4
 83c:	mov	r4, r3
 840:	cmp	r0, #0
 844:	beq	934 <get_item_for_cursor+0x104>
 848:	mov	r8, r0
 84c:	ldr	r0, [r2, #4]
 850:	mov	sl, r2
 854:	mov	r9, r1
 858:	sub	r0, r0, #1
 85c:	cmp	r0, r1
 860:	ble	8bc <get_item_for_cursor+0x8c>
 864:	ldr	r0, [r8, #16]
 868:	cmp	r0, #1
 86c:	blt	908 <get_item_for_cursor+0xd8>
 870:	add	r1, r9, #1
 874:	ldr	r3, [r8, #20]
 878:	mov	lr, r4
 87c:	subs	r0, r0, #1
 880:	add	r2, sl, r1, lsl #4
 884:	ldr	r2, [r2, #12]
 888:	beq	8d8 <get_item_for_cursor+0xa8>
 88c:	mov	r4, #0
 890:	mov	ip, #1
 894:	add	r5, r4, r0
 898:	add	r5, r5, r5, lsr #31
 89c:	asr	r7, r5, #1
 8a0:	ldr	r6, [r3, r7, lsl #2]
 8a4:	cmp	r2, r6
 8a8:	addgt	r4, ip, r5, asr #1
 8ac:	movle	r0, r7
 8b0:	cmp	r0, r4
 8b4:	bne	894 <get_item_for_cursor+0x64>
 8b8:	b	8dc <get_item_for_cursor+0xac>
 8bc:	ldr	r0, [r8, #4]
 8c0:	cmp	r0, #1
 8c4:	blt	934 <get_item_for_cursor+0x104>
 8c8:	ldr	r1, [r8, #8]
 8cc:	add	r0, r1, r0, lsl #2
 8d0:	ldr	r0, [r0, #-4]
 8d4:	b	938 <get_item_for_cursor+0x108>
 8d8:	mov	r0, #0
 8dc:	ldr	r3, [r3, r0, lsl #2]
 8e0:	mov	r4, lr
 8e4:	cmp	r2, r3
 8e8:	bne	908 <get_item_for_cursor+0xd8>
 8ec:	ldr	r2, [r8, #24]
 8f0:	mov	r3, r4
 8f4:	ldr	r0, [r2, r0, lsl #2]
 8f8:	mov	r2, sl
 8fc:	bl	830 <get_item_for_cursor>
 900:	cmp	r4, #0
 904:	bne	92c <get_item_for_cursor+0xfc>
 908:	ldr	r0, [r8, #12]
 90c:	cmp	r0, #0
 910:	beq	934 <get_item_for_cursor+0x104>
 914:	add	r1, r9, #1
 918:	mov	r2, sl
 91c:	mov	r3, r4
 920:	bl	830 <get_item_for_cursor>
 924:	cmp	r4, #0
 928:	beq	934 <get_item_for_cursor+0x104>
 92c:	sub	sp, fp, #28
 930:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
 934:	mov	r0, #0
 938:	str	r0, [r4]
 93c:	sub	sp, fp, #28
 940:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
