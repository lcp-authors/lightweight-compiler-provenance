
../compcert-repos/stcorp-coda-3a25f25/CMakeFiles/codadump.dir/tools/codadump/codadump-yaml.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <ff_printf>:
   0:	push	{r0, r1, r2, r3}
   4:	ldr	r1, [pc, #44]	; 38 <ff_printf+0x38>
   8:	push	{lr}		; (str lr, [sp, #-4]!)
   c:	sub	sp, sp, #12
  10:	add	r3, sp, #20
  14:	mov	r2, r3
  18:	ldr	r0, [r1]
  1c:	ldr	r1, [sp, #16]
  20:	str	r3, [sp, #4]
  24:	bl	0 <vfprintf>
  28:	add	sp, sp, #12
  2c:	pop	{lr}		; (ldr lr, [sp], #4)
  30:	add	sp, sp, #16
  34:	bx	lr
  38:	.word	0x00000000

0000003c <print_escaped>:
  3c:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40:	subs	r4, r1, #0
  44:	pople	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  48:	mov	fp, r0
  4c:	ldr	r8, [pc, #208]	; 124 <print_escaped+0xe8>
  50:	ldr	sl, [pc, #208]	; 128 <print_escaped+0xec>
  54:	ldr	r9, [pc, #208]	; 12c <print_escaped+0xf0>
  58:	ldr	r7, [pc, #208]	; 130 <print_escaped+0xf4>
  5c:	ldr	r6, [pc, #208]	; 134 <print_escaped+0xf8>
  60:	ldr	r5, [pc, #208]	; 138 <print_escaped+0xfc>
  64:	add	r4, r0, r4
  68:	b	a0 <print_escaped+0x64>
  6c:	cmp	r1, #9
  70:	beq	118 <print_escaped+0xdc>
  74:	cmp	r1, #10
  78:	beq	10c <print_escaped+0xd0>
  7c:	cmp	r1, #8
  80:	beq	100 <print_escaped+0xc4>
  84:	sub	r3, r1, #32
  88:	cmp	r3, #94	; 0x5e
  8c:	movls	r0, r9
  90:	movhi	r0, sl
  94:	bl	0 <ff_printf>
  98:	cmp	fp, r4
  9c:	beq	d8 <print_escaped+0x9c>
  a0:	ldrb	r1, [fp], #1
  a4:	cmp	r1, #12
  a8:	beq	dc <print_escaped+0xa0>
  ac:	bls	6c <print_escaped+0x30>
  b0:	cmp	r1, #34	; 0x22
  b4:	beq	f4 <print_escaped+0xb8>
  b8:	cmp	r1, #92	; 0x5c
  bc:	beq	e8 <print_escaped+0xac>
  c0:	cmp	r1, #13
  c4:	bne	84 <print_escaped+0x48>
  c8:	mov	r0, r5
  cc:	bl	0 <ff_printf>
  d0:	cmp	fp, r4
  d4:	bne	a0 <print_escaped+0x64>
  d8:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  dc:	mov	r0, r8
  e0:	bl	0 <ff_printf>
  e4:	b	98 <print_escaped+0x5c>
  e8:	mov	r0, r6
  ec:	bl	0 <ff_printf>
  f0:	b	98 <print_escaped+0x5c>
  f4:	mov	r0, r7
  f8:	bl	0 <ff_printf>
  fc:	b	98 <print_escaped+0x5c>
 100:	ldr	r0, [pc, #52]	; 13c <print_escaped+0x100>
 104:	bl	0 <ff_printf>
 108:	b	98 <print_escaped+0x5c>
 10c:	ldr	r0, [pc, #44]	; 140 <print_escaped+0x104>
 110:	bl	0 <ff_printf>
 114:	b	98 <print_escaped+0x5c>
 118:	ldr	r0, [pc, #36]	; 144 <print_escaped+0x108>
 11c:	bl	0 <ff_printf>
 120:	b	98 <print_escaped+0x5c>
 124:	.word	0x00000004
 128:	.word	0x00000020
 12c:	.word	0x0000001c
 130:	.word	0x00000014
 134:	.word	0x00000018
 138:	.word	0x0000000c
 13c:	.word	0x00000000
 140:	.word	0x00000008
 144:	.word	0x00000010

00000148 <indent>:
 148:	ldr	r3, [pc, #88]	; 1a8 <indent+0x60>
 14c:	push	{r4, r5, r6, r7, r8, lr}
 150:	ldr	r4, [r3]
 154:	cmp	r4, #0
 158:	blt	194 <indent+0x4c>
 15c:	beq	190 <indent+0x48>
 160:	ldr	r8, [pc, #68]	; 1ac <indent+0x64>
 164:	ldr	r7, [pc, #68]	; 1b0 <indent+0x68>
 168:	mov	r6, #2
 16c:	mov	r5, #1
 170:	ldr	r3, [r8]
 174:	mov	r2, r6
 178:	mov	r1, r5
 17c:	mov	r0, r7
 180:	bl	0 <fwrite>
 184:	subs	r4, r4, #1
 188:	bne	170 <indent+0x28>
 18c:	pop	{r4, r5, r6, r7, r8, pc}
 190:	pop	{r4, r5, r6, r7, r8, pc}
 194:	ldr	r3, [pc, #24]	; 1b4 <indent+0x6c>
 198:	mov	r2, #44	; 0x2c
 19c:	ldr	r1, [pc, #20]	; 1b8 <indent+0x70>
 1a0:	ldr	r0, [pc, #20]	; 1bc <indent+0x74>
 1a4:	bl	0 <__assert_fail>
	...
 1b0:	.word	0x00000088
 1b4:	.word	0x00000000
 1b8:	.word	0x00000028
 1bc:	.word	0x0000007c

000001c0 <fi_printf>:
 1c0:	push	{r0, r1, r2, r3}
 1c4:	push	{lr}		; (str lr, [sp, #-4]!)
 1c8:	sub	sp, sp, #12
 1cc:	bl	148 <indent>
 1d0:	ldr	r2, [pc, #36]	; 1fc <fi_printf+0x3c>
 1d4:	add	r3, sp, #20
 1d8:	ldr	r1, [sp, #16]
 1dc:	ldr	r0, [r2]
 1e0:	mov	r2, r3
 1e4:	str	r3, [sp, #4]
 1e8:	bl	0 <vfprintf>
 1ec:	add	sp, sp, #12
 1f0:	pop	{lr}		; (ldr lr, [sp], #4)
 1f4:	add	sp, sp, #16
 1f8:	bx	lr
 1fc:	.word	0x00000000

00000200 <print_data>:
 200:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
 204:	mov	r2, #0
 208:	ldr	r4, [pc, #2232]	; ac8 <print_data+0x8c8>
 20c:	sub	sp, sp, #76	; 0x4c
 210:	mov	r8, r1
 214:	ldr	r3, [r4, #4]
 218:	str	r2, [sp, #12]
 21c:	cmp	r3, r2
 220:	mov	r5, r0
 224:	bne	4e0 <print_data+0x2e0>
 228:	add	r1, sp, #8
 22c:	mov	r0, r5
 230:	bl	0 <coda_cursor_get_type_class>
 234:	cmp	r0, #0
 238:	bne	4d8 <print_data+0x2d8>
 23c:	ldr	r3, [sp, #8]
 240:	cmp	r3, #6
 244:	ldrls	pc, [pc, r3, lsl #2]
 248:	b	348 <print_data+0x148>
 24c:	.word	0x00000268
 250:	.word	0x000003f8
 254:	.word	0x00000398
 258:	.word	0x00000398
 25c:	.word	0x00000398
 260:	.word	0x00000398
 264:	.word	0x00000364
 268:	add	r1, sp, #16
 26c:	mov	r0, r5
 270:	bl	0 <coda_cursor_get_num_elements>
 274:	cmp	r0, #0
 278:	beq	280 <print_data+0x80>
 27c:	bl	0 <handle_coda_error>
 280:	ldr	r3, [sp, #16]
 284:	cmp	r3, #0
 288:	ble	770 <print_data+0x570>
 28c:	cmp	r8, #0
 290:	bne	6cc <print_data+0x4cc>
 294:	add	r1, sp, #20
 298:	mov	r0, r5
 29c:	bl	0 <coda_cursor_get_type>
 2a0:	cmp	r0, #0
 2a4:	bne	6c4 <print_data+0x4c4>
 2a8:	add	r1, sp, #24
 2ac:	ldr	r0, [sp, #20]
 2b0:	bl	0 <coda_type_get_record_union_status>
 2b4:	cmp	r0, #0
 2b8:	bne	6bc <print_data+0x4bc>
 2bc:	ldr	r3, [sp, #24]
 2c0:	cmp	r3, #0
 2c4:	beq	590 <print_data+0x390>
 2c8:	add	r1, sp, #28
 2cc:	mov	r0, r5
 2d0:	bl	0 <coda_cursor_get_available_union_field_index>
 2d4:	cmp	r0, #0
 2d8:	bne	9cc <print_data+0x7cc>
 2dc:	add	r2, sp, #40	; 0x28
 2e0:	ldr	r1, [sp, #28]
 2e4:	ldr	r0, [sp, #20]
 2e8:	bl	0 <coda_type_get_record_field_name>
 2ec:	cmp	r0, #0
 2f0:	bne	9c4 <print_data+0x7c4>
 2f4:	ldr	r1, [sp, #28]
 2f8:	mov	r0, r5
 2fc:	bl	0 <coda_cursor_goto_record_field_by_index>
 300:	cmp	r0, #0
 304:	bne	9bc <print_data+0x7bc>
 308:	cmp	r8, #0
 30c:	bne	9ac <print_data+0x7ac>
 310:	ldr	r1, [sp, #40]	; 0x28
 314:	ldr	r0, [pc, #1968]	; acc <print_data+0x8cc>
 318:	bl	0 <ff_printf>
 31c:	ldr	r3, [r4]
 320:	mov	r1, #1
 324:	add	r3, r3, r1
 328:	mov	r0, r5
 32c:	str	r3, [r4]
 330:	bl	200 <print_data>
 334:	ldr	r3, [r4]
 338:	mov	r0, r5
 33c:	sub	r3, r3, #1
 340:	str	r3, [r4]
 344:	bl	0 <coda_cursor_goto_parent>
 348:	ldr	r3, [sp, #12]
 34c:	cmp	r3, #0
 350:	ldrne	r3, [r4]
 354:	subne	r3, r3, #1
 358:	strne	r3, [r4]
 35c:	add	sp, sp, #76	; 0x4c
 360:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
 364:	add	r1, sp, #28
 368:	mov	r0, r5
 36c:	bl	0 <coda_cursor_get_special_type>
 370:	cmp	r0, #0
 374:	bne	570 <print_data+0x370>
 378:	ldr	r3, [sp, #28]
 37c:	cmp	r3, #3
 380:	ldrls	pc, [pc, r3, lsl #2]
 384:	b	348 <print_data+0x148>
 388:	.word	0x00000578
 38c:	.word	0x0000074c
 390:	.word	0x000006d8
 394:	.word	0x0000071c
 398:	add	r1, sp, #28
 39c:	mov	r0, r5
 3a0:	bl	0 <coda_cursor_get_read_type>
 3a4:	cmp	r0, #0
 3a8:	bne	568 <print_data+0x368>
 3ac:	ldr	r3, [sp, #28]
 3b0:	add	r3, r3, #1
 3b4:	cmp	r3, #13
 3b8:	ldrls	pc, [pc, r3, lsl #2]
 3bc:	b	348 <print_data+0x148>
 3c0:	.word	0x00000578
 3c4:	.word	0x00000968
 3c8:	.word	0x00000944
 3cc:	.word	0x00000968
 3d0:	.word	0x00000944
 3d4:	.word	0x00000968
 3d8:	.word	0x00000944
 3dc:	.word	0x00000914
 3e0:	.word	0x0000077c
 3e4:	.word	0x000007ac
 3e8:	.word	0x000007ac
 3ec:	.word	0x0000084c
 3f0:	.word	0x000007dc
 3f4:	.word	0x00000884
 3f8:	add	r6, sp, #40	; 0x28
 3fc:	mov	r2, r6
 400:	add	r1, sp, #32
 404:	mov	r0, r5
 408:	bl	0 <coda_cursor_get_array_dim>
 40c:	cmp	r0, #0
 410:	bne	560 <print_data+0x360>
 414:	ldr	r8, [sp, #32]
 418:	cmp	r8, #0
 41c:	blt	584 <print_data+0x384>
 420:	beq	9d4 <print_data+0x7d4>
 424:	add	r8, r6, r8, lsl #2
 428:	mov	r7, #1
 42c:	ldr	r3, [r6], #4
 430:	cmp	r6, r8
 434:	mul	r7, r3, r7
 438:	bne	42c <print_data+0x22c>
 43c:	cmp	r7, #0
 440:	subgt	r8, r7, #1
 444:	ble	584 <print_data+0x384>
 448:	ldr	r0, [pc, #1664]	; ad0 <print_data+0x8d0>
 44c:	bl	0 <ff_printf>
 450:	mov	r0, r5
 454:	bl	0 <coda_cursor_goto_first_array_element>
 458:	cmp	r0, #0
 45c:	bne	9a4 <print_data+0x7a4>
 460:	mov	r6, #0
 464:	ldr	sl, [pc, #1640]	; ad4 <print_data+0x8d4>
 468:	mov	r9, r6
 46c:	b	478 <print_data+0x278>
 470:	cmp	r7, r6
 474:	ble	4cc <print_data+0x2cc>
 478:	mov	r0, sl
 47c:	bl	1c0 <fi_printf>
 480:	ldr	r3, [r4]
 484:	mov	r0, r5
 488:	add	r3, r3, #1
 48c:	mov	r1, r9
 490:	str	r3, [r4]
 494:	bl	200 <print_data>
 498:	ldr	r3, [r4]
 49c:	cmp	r6, r8
 4a0:	sub	r3, r3, #1
 4a4:	mov	r0, r5
 4a8:	add	r6, r6, #1
 4ac:	str	r3, [r4]
 4b0:	bge	470 <print_data+0x270>
 4b4:	bl	0 <coda_cursor_goto_next_array_element>
 4b8:	cmp	r0, #0
 4bc:	beq	470 <print_data+0x270>
 4c0:	bl	0 <handle_coda_error>
 4c4:	cmp	r7, r6
 4c8:	bgt	478 <print_data+0x278>
 4cc:	mov	r0, r5
 4d0:	bl	0 <coda_cursor_goto_parent>
 4d4:	b	348 <print_data+0x148>
 4d8:	bl	0 <handle_coda_error>
 4dc:	b	23c <print_data+0x3c>
 4e0:	add	r1, sp, #12
 4e4:	bl	0 <coda_cursor_has_attributes>
 4e8:	cmp	r0, #0
 4ec:	bne	69c <print_data+0x49c>
 4f0:	ldr	r3, [sp, #12]
 4f4:	cmp	r3, #0
 4f8:	beq	228 <print_data+0x28>
 4fc:	cmp	r8, #0
 500:	bne	994 <print_data+0x794>
 504:	ldr	r0, [pc, #1484]	; ad8 <print_data+0x8d8>
 508:	bl	0 <ff_printf>
 50c:	mov	r0, r5
 510:	bl	0 <coda_cursor_goto_attributes>
 514:	cmp	r0, #0
 518:	bne	98c <print_data+0x78c>
 51c:	ldr	r3, [r4]
 520:	mov	r1, #1
 524:	add	r3, r3, r1
 528:	mov	r0, r5
 52c:	str	r3, [r4]
 530:	bl	200 <print_data>
 534:	ldr	r3, [r4]
 538:	mov	r0, r5
 53c:	sub	r3, r3, #1
 540:	str	r3, [r4]
 544:	bl	0 <coda_cursor_goto_parent>
 548:	ldr	r0, [pc, #1420]	; adc <print_data+0x8dc>
 54c:	bl	1c0 <fi_printf>
 550:	ldr	r3, [r4]
 554:	add	r3, r3, #1
 558:	str	r3, [r4]
 55c:	b	228 <print_data+0x28>
 560:	bl	0 <handle_coda_error>
 564:	b	414 <print_data+0x214>
 568:	bl	0 <handle_coda_error>
 56c:	b	3ac <print_data+0x1ac>
 570:	bl	0 <handle_coda_error>
 574:	b	378 <print_data+0x178>
 578:	ldr	r0, [pc, #1376]	; ae0 <print_data+0x8e0>
 57c:	bl	0 <ff_printf>
 580:	b	348 <print_data+0x148>
 584:	ldr	r0, [pc, #1368]	; ae4 <print_data+0x8e4>
 588:	bl	0 <ff_printf>
 58c:	b	348 <print_data+0x148>
 590:	mov	r0, r5
 594:	bl	0 <coda_cursor_goto_first_record_field>
 598:	cmp	r0, #0
 59c:	bne	9b4 <print_data+0x7b4>
 5a0:	ldr	r3, [sp, #16]
 5a4:	mov	r1, #0
 5a8:	cmp	r3, r1
 5ac:	str	r1, [sp, #28]
 5b0:	ble	4cc <print_data+0x2cc>
 5b4:	mov	r7, #1
 5b8:	ldr	sl, [pc, #1292]	; acc <print_data+0x8cc>
 5bc:	mov	r9, r7
 5c0:	add	r6, sp, #40	; 0x28
 5c4:	b	5f8 <print_data+0x3f8>
 5c8:	ldr	fp, [sp, #40]	; 0x28
 5cc:	cmp	fp, #0
 5d0:	beq	61c <print_data+0x41c>
 5d4:	ldr	r3, [sp, #16]
 5d8:	ldr	r1, [sp, #28]
 5dc:	sub	r2, r3, #1
 5e0:	cmp	r2, r1
 5e4:	bgt	680 <print_data+0x480>
 5e8:	add	r1, r1, #1
 5ec:	cmp	r1, r3
 5f0:	str	r1, [sp, #28]
 5f4:	bge	4cc <print_data+0x2cc>
 5f8:	mov	r2, r6
 5fc:	ldr	r0, [sp, #20]
 600:	bl	0 <coda_type_get_record_field_hidden_status>
 604:	cmp	r0, #0
 608:	beq	5c8 <print_data+0x3c8>
 60c:	bl	0 <handle_coda_error>
 610:	ldr	fp, [sp, #40]	; 0x28
 614:	cmp	fp, #0
 618:	bne	5d4 <print_data+0x3d4>
 61c:	add	r2, sp, #32
 620:	ldr	r1, [sp, #28]
 624:	ldr	r0, [sp, #20]
 628:	bl	0 <coda_type_get_record_field_name>
 62c:	cmp	r0, #0
 630:	bne	6b4 <print_data+0x4b4>
 634:	eor	r7, r7, #1
 638:	cmp	r8, #0
 63c:	orrne	r7, r7, #1
 640:	tst	r7, #1
 644:	bne	6ac <print_data+0x4ac>
 648:	ldr	r1, [sp, #32]
 64c:	mov	r0, sl
 650:	bl	0 <ff_printf>
 654:	ldr	r3, [r4]
 658:	mov	r1, r9
 65c:	add	r3, r3, #1
 660:	mov	r0, r5
 664:	str	r3, [r4]
 668:	bl	200 <print_data>
 66c:	ldr	r3, [r4]
 670:	mov	r7, fp
 674:	sub	r3, r3, #1
 678:	str	r3, [r4]
 67c:	b	5d4 <print_data+0x3d4>
 680:	mov	r0, r5
 684:	bl	0 <coda_cursor_goto_next_record_field>
 688:	cmp	r0, #0
 68c:	bne	6a4 <print_data+0x4a4>
 690:	ldr	r3, [sp, #16]
 694:	ldr	r1, [sp, #28]
 698:	b	5e8 <print_data+0x3e8>
 69c:	bl	0 <handle_coda_error>
 6a0:	b	4f0 <print_data+0x2f0>
 6a4:	bl	0 <handle_coda_error>
 6a8:	b	690 <print_data+0x490>
 6ac:	bl	148 <indent>
 6b0:	b	648 <print_data+0x448>
 6b4:	bl	0 <handle_coda_error>
 6b8:	b	634 <print_data+0x434>
 6bc:	bl	0 <handle_coda_error>
 6c0:	b	2bc <print_data+0xbc>
 6c4:	bl	0 <handle_coda_error>
 6c8:	b	2a8 <print_data+0xa8>
 6cc:	ldr	r0, [pc, #1020]	; ad0 <print_data+0x8d0>
 6d0:	bl	0 <ff_printf>
 6d4:	b	294 <print_data+0x94>
 6d8:	mov	r0, r5
 6dc:	add	r1, sp, #32
 6e0:	bl	0 <coda_cursor_read_double>
 6e4:	cmp	r0, #0
 6e8:	bne	9e4 <print_data+0x7e4>
 6ec:	vldr	d0, [sp, #32]
 6f0:	bl	0 <coda_isNaN>
 6f4:	cmp	r0, #0
 6f8:	bne	70c <print_data+0x50c>
 6fc:	vldr	d0, [sp, #32]
 700:	bl	0 <coda_isInf>
 704:	cmp	r0, #0
 708:	beq	a2c <print_data+0x82c>
 70c:	ldrd	r2, [sp, #32]
 710:	ldr	r0, [pc, #976]	; ae8 <print_data+0x8e8>
 714:	bl	0 <ff_printf>
 718:	b	348 <print_data+0x148>
 71c:	mov	r0, r5
 720:	add	r2, sp, #40	; 0x28
 724:	add	r1, sp, #32
 728:	bl	0 <coda_cursor_read_complex_double_split>
 72c:	cmp	r0, #0
 730:	bne	9dc <print_data+0x7dc>
 734:	ldrd	r6, [sp, #40]	; 0x28
 738:	ldrd	r2, [sp, #32]
 73c:	ldr	r0, [pc, #936]	; aec <print_data+0x8ec>
 740:	strd	r6, [sp]
 744:	bl	0 <ff_printf>
 748:	b	348 <print_data+0x148>
 74c:	mov	r0, r5
 750:	add	r1, sp, #40	; 0x28
 754:	bl	0 <coda_cursor_read_double>
 758:	cmp	r0, #0
 75c:	bne	9ec <print_data+0x7ec>
 760:	ldrd	r2, [sp, #40]	; 0x28
 764:	ldr	r0, [pc, #892]	; ae8 <print_data+0x8e8>
 768:	bl	0 <ff_printf>
 76c:	b	348 <print_data+0x148>
 770:	ldr	r0, [pc, #888]	; af0 <print_data+0x8f0>
 774:	bl	0 <ff_printf>
 778:	b	348 <print_data+0x148>
 77c:	mov	r0, r5
 780:	add	r1, sp, #32
 784:	bl	0 <coda_cursor_read_uint64>
 788:	cmp	r0, #0
 78c:	bne	9fc <print_data+0x7fc>
 790:	ldrd	r0, [sp, #32]
 794:	add	r2, sp, #40	; 0x28
 798:	bl	0 <coda_str64u>
 79c:	add	r1, sp, #40	; 0x28
 7a0:	ldr	r0, [pc, #844]	; af4 <print_data+0x8f4>
 7a4:	bl	0 <ff_printf>
 7a8:	b	348 <print_data+0x148>
 7ac:	mov	r0, r5
 7b0:	add	r1, sp, #40	; 0x28
 7b4:	bl	0 <coda_cursor_read_double>
 7b8:	cmp	r0, #0
 7bc:	bne	a14 <print_data+0x814>
 7c0:	ldr	r3, [sp, #28]
 7c4:	cmp	r3, #8
 7c8:	ldrd	r2, [sp, #40]	; 0x28
 7cc:	bne	764 <print_data+0x564>
 7d0:	ldr	r0, [pc, #800]	; af8 <print_data+0x8f8>
 7d4:	bl	0 <ff_printf>
 7d8:	b	348 <print_data+0x148>
 7dc:	add	r1, sp, #40	; 0x28
 7e0:	mov	r0, r5
 7e4:	bl	0 <coda_cursor_get_string_length>
 7e8:	cmp	r0, #0
 7ec:	bne	a0c <print_data+0x80c>
 7f0:	ldr	r0, [sp, #40]	; 0x28
 7f4:	add	r0, r0, #1
 7f8:	bl	0 <malloc>
 7fc:	subs	r6, r0, #0
 800:	beq	a78 <print_data+0x878>
 804:	ldr	r2, [sp, #40]	; 0x28
 808:	mov	r0, r5
 80c:	add	r2, r2, #1
 810:	mov	r1, r6
 814:	bl	0 <coda_cursor_read_string>
 818:	cmp	r0, #0
 81c:	bne	a04 <print_data+0x804>
 820:	ldr	r0, [pc, #724]	; afc <print_data+0x8fc>
 824:	bl	0 <ff_printf>
 828:	ldr	r1, [sp, #40]	; 0x28
 82c:	mov	r0, r6
 830:	bl	3c <print_escaped>
 834:	ldr	r1, [sp, #40]	; 0x28
 838:	ldr	r0, [pc, #704]	; b00 <print_data+0x900>
 83c:	bl	0 <ff_printf>
 840:	mov	r0, r6
 844:	bl	0 <free>
 848:	b	348 <print_data+0x148>
 84c:	add	r6, sp, #40	; 0x28
 850:	mov	r0, r5
 854:	mov	r1, r6
 858:	bl	0 <coda_cursor_read_char>
 85c:	cmp	r0, #0
 860:	bne	9f4 <print_data+0x7f4>
 864:	ldr	r0, [pc, #656]	; afc <print_data+0x8fc>
 868:	bl	0 <ff_printf>
 86c:	mov	r0, r6
 870:	mov	r1, #1
 874:	bl	3c <print_escaped>
 878:	ldr	r0, [pc, #640]	; b00 <print_data+0x900>
 87c:	bl	0 <ff_printf>
 880:	b	348 <print_data+0x148>
 884:	add	r1, sp, #40	; 0x28
 888:	mov	r0, r5
 88c:	bl	0 <coda_cursor_get_bit_size>
 890:	cmp	r0, #0
 894:	bne	a50 <print_data+0x850>
 898:	ldrd	r8, [sp, #40]	; 0x28
 89c:	mov	r3, #0
 8a0:	and	r2, r8, #7
 8a4:	orrs	r3, r2, r3
 8a8:	lsr	r6, r8, #3
 8ac:	movne	r3, #1
 8b0:	moveq	r3, #0
 8b4:	orr	r6, r6, r9, lsl #29
 8b8:	adds	r6, r6, r3
 8bc:	mov	r0, r6
 8c0:	bl	0 <malloc>
 8c4:	subs	sl, r0, #0
 8c8:	beq	aa0 <print_data+0x8a0>
 8cc:	strd	r8, [sp]
 8d0:	mov	r0, r5
 8d4:	mov	r2, #0
 8d8:	mov	r3, #0
 8dc:	mov	r1, sl
 8e0:	bl	0 <coda_cursor_read_bits>
 8e4:	cmp	r0, #0
 8e8:	bne	a58 <print_data+0x858>
 8ec:	ldr	r0, [pc, #520]	; afc <print_data+0x8fc>
 8f0:	bl	0 <ff_printf>
 8f4:	mov	r1, r6
 8f8:	mov	r0, sl
 8fc:	bl	3c <print_escaped>
 900:	ldr	r0, [pc, #504]	; b00 <print_data+0x900>
 904:	bl	0 <ff_printf>
 908:	mov	r0, sl
 90c:	bl	0 <free>
 910:	b	348 <print_data+0x148>
 914:	mov	r0, r5
 918:	add	r1, sp, #32
 91c:	bl	0 <coda_cursor_read_int64>
 920:	cmp	r0, #0
 924:	bne	a1c <print_data+0x81c>
 928:	ldrd	r0, [sp, #32]
 92c:	add	r2, sp, #40	; 0x28
 930:	bl	0 <coda_str64>
 934:	add	r1, sp, #40	; 0x28
 938:	ldr	r0, [pc, #436]	; af4 <print_data+0x8f4>
 93c:	bl	0 <ff_printf>
 940:	b	348 <print_data+0x148>
 944:	mov	r0, r5
 948:	add	r1, sp, #40	; 0x28
 94c:	bl	0 <coda_cursor_read_uint32>
 950:	cmp	r0, #0
 954:	bne	a60 <print_data+0x860>
 958:	ldr	r1, [sp, #40]	; 0x28
 95c:	ldr	r0, [pc, #416]	; b04 <print_data+0x904>
 960:	bl	0 <ff_printf>
 964:	b	348 <print_data+0x148>
 968:	mov	r0, r5
 96c:	add	r1, sp, #40	; 0x28
 970:	bl	0 <coda_cursor_read_int32>
 974:	cmp	r0, #0
 978:	bne	a24 <print_data+0x824>
 97c:	ldr	r1, [sp, #40]	; 0x28
 980:	ldr	r0, [pc, #384]	; b08 <print_data+0x908>
 984:	bl	0 <ff_printf>
 988:	b	348 <print_data+0x148>
 98c:	bl	0 <handle_coda_error>
 990:	b	51c <print_data+0x31c>
 994:	ldr	r0, [pc, #308]	; ad0 <print_data+0x8d0>
 998:	bl	0 <ff_printf>
 99c:	bl	148 <indent>
 9a0:	b	504 <print_data+0x304>
 9a4:	bl	0 <handle_coda_error>
 9a8:	b	460 <print_data+0x260>
 9ac:	bl	148 <indent>
 9b0:	b	310 <print_data+0x110>
 9b4:	bl	0 <handle_coda_error>
 9b8:	b	5a0 <print_data+0x3a0>
 9bc:	bl	0 <handle_coda_error>
 9c0:	b	308 <print_data+0x108>
 9c4:	bl	0 <handle_coda_error>
 9c8:	b	2f4 <print_data+0xf4>
 9cc:	bl	0 <handle_coda_error>
 9d0:	b	2dc <print_data+0xdc>
 9d4:	mov	r7, #1
 9d8:	b	448 <print_data+0x248>
 9dc:	bl	0 <handle_coda_error>
 9e0:	b	734 <print_data+0x534>
 9e4:	bl	0 <handle_coda_error>
 9e8:	b	6ec <print_data+0x4ec>
 9ec:	bl	0 <handle_coda_error>
 9f0:	b	760 <print_data+0x560>
 9f4:	bl	0 <handle_coda_error>
 9f8:	b	864 <print_data+0x664>
 9fc:	bl	0 <handle_coda_error>
 a00:	b	790 <print_data+0x590>
 a04:	bl	0 <handle_coda_error>
 a08:	b	820 <print_data+0x620>
 a0c:	bl	0 <handle_coda_error>
 a10:	b	7f0 <print_data+0x5f0>
 a14:	bl	0 <handle_coda_error>
 a18:	b	7c0 <print_data+0x5c0>
 a1c:	bl	0 <handle_coda_error>
 a20:	b	928 <print_data+0x728>
 a24:	bl	0 <handle_coda_error>
 a28:	b	97c <print_data+0x77c>
 a2c:	add	r1, sp, #40	; 0x28
 a30:	ldr	r0, [pc, #212]	; b0c <print_data+0x90c>
 a34:	vldr	d0, [sp, #32]
 a38:	bl	0 <coda_time_double_to_string>
 a3c:	cmp	r0, #0
 a40:	beq	a68 <print_data+0x868>
 a44:	ldr	r0, [pc, #196]	; b10 <print_data+0x910>
 a48:	bl	0 <ff_printf>
 a4c:	b	348 <print_data+0x148>
 a50:	bl	0 <handle_coda_error>
 a54:	b	898 <print_data+0x698>
 a58:	bl	0 <handle_coda_error>
 a5c:	b	8ec <print_data+0x6ec>
 a60:	bl	0 <handle_coda_error>
 a64:	b	958 <print_data+0x758>
 a68:	add	r1, sp, #40	; 0x28
 a6c:	ldr	r0, [pc, #128]	; af4 <print_data+0x8f4>
 a70:	bl	0 <ff_printf>
 a74:	b	348 <print_data+0x148>
 a78:	ldr	r2, [sp, #40]	; 0x28
 a7c:	ldr	r3, [pc, #144]	; b14 <print_data+0x914>
 a80:	add	r2, r2, #1
 a84:	str	r3, [sp]
 a88:	ldr	r1, [pc, #136]	; b18 <print_data+0x918>
 a8c:	ldr	r3, [pc, #136]	; b1c <print_data+0x91c>
 a90:	mvn	r0, #0
 a94:	bl	0 <coda_set_error>
 a98:	bl	0 <handle_coda_error>
 a9c:	b	804 <print_data+0x604>
 aa0:	mov	r3, #392	; 0x188
 aa4:	str	r3, [sp]
 aa8:	mov	r2, r6
 aac:	ldr	r3, [pc, #104]	; b1c <print_data+0x91c>
 ab0:	ldr	r1, [pc, #96]	; b18 <print_data+0x918>
 ab4:	mvn	r0, #0
 ab8:	bl	0 <coda_set_error>
 abc:	bl	0 <handle_coda_error>
 ac0:	ldrd	r8, [sp, #40]	; 0x28
 ac4:	b	8cc <print_data+0x6cc>
 ac8:	.word	0x00000000
 acc:	.word	0x000000a0
 ad0:	.word	0x0000008c
 ad4:	.word	0x000000ac
 ad8:	.word	0x00000090
 adc:	.word	0x00000098
 ae0:	.word	0x00000118
 ae4:	.word	0x000000b0
 ae8:	.word	0x00000110
 aec:	.word	0x0000015c
 af0:	.word	0x000000a8
 af4:	.word	0x00000104
 af8:	.word	0x00000108
 afc:	.word	0x000000b4
 b00:	.word	0x000000b8
 b04:	.word	0x000000fc
 b08:	.word	0x000000f4
 b0c:	.word	0x00000120
 b10:	.word	0x00000140
 b14:	.word	0x00000169
 b18:	.word	0x000000bc
 b1c:	.word	0x00000028

00000b20 <print_yaml_data>:
 b20:	push	{r4, lr}
 b24:	sub	sp, sp, #528	; 0x210
 b28:	ldr	r3, [pc, #196]	; bf4 <print_yaml_data+0xd4>
 b2c:	ldr	r4, [pc, #196]	; bf8 <print_yaml_data+0xd8>
 b30:	add	r1, sp, #4
 b34:	str	r0, [r3, #4]
 b38:	ldr	r0, [r4]
 b3c:	bl	0 <coda_open>
 b40:	cmp	r0, #0
 b44:	bne	bb0 <print_yaml_data+0x90>
 b48:	add	r0, sp, #8
 b4c:	ldr	r1, [sp, #4]
 b50:	bl	0 <coda_cursor_set_product>
 b54:	cmp	r0, #0
 b58:	bne	ba8 <print_yaml_data+0x88>
 b5c:	ldr	r3, [pc, #152]	; bfc <print_yaml_data+0xdc>
 b60:	ldr	r1, [r3]
 b64:	cmp	r1, #0
 b68:	beq	b7c <print_yaml_data+0x5c>
 b6c:	add	r0, sp, #8
 b70:	bl	0 <coda_cursor_goto>
 b74:	cmp	r0, #0
 b78:	bne	ba0 <print_yaml_data+0x80>
 b7c:	mov	r0, #0
 b80:	bl	0 <coda_set_option_perform_boundary_checks>
 b84:	add	r0, sp, #8
 b88:	mov	r1, #0
 b8c:	bl	200 <print_data>
 b90:	ldr	r0, [sp, #4]
 b94:	bl	0 <coda_close>
 b98:	add	sp, sp, #528	; 0x210
 b9c:	pop	{r4, pc}
 ba0:	bl	0 <handle_coda_error>
 ba4:	b	b7c <print_yaml_data+0x5c>
 ba8:	bl	0 <handle_coda_error>
 bac:	b	b5c <print_yaml_data+0x3c>
 bb0:	bl	0 <coda_get_errno>
 bb4:	ldr	r3, [r0]
 bb8:	cmn	r3, #21
 bbc:	beq	bc8 <print_yaml_data+0xa8>
 bc0:	bl	0 <handle_coda_error>
 bc4:	b	b48 <print_yaml_data+0x28>
 bc8:	mov	r0, #0
 bcc:	bl	0 <coda_set_option_use_mmap>
 bd0:	add	r1, sp, #4
 bd4:	ldr	r0, [r4]
 bd8:	bl	0 <coda_open>
 bdc:	mov	r4, r0
 be0:	mov	r0, #1
 be4:	bl	0 <coda_set_option_use_mmap>
 be8:	cmp	r4, #0
 bec:	bne	bc0 <print_yaml_data+0xa0>
 bf0:	b	b48 <print_yaml_data+0x28>
	...
