
../compcert-repos/dvidelabs-flatcc-3b39ef7/test/load_test/CMakeFiles/load_test.dir/load_test.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <main>:
   0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   4:	add	fp, sp, #28
   8:	sub	sp, sp, #4
   c:	vpush	{d8-d10}
  10:	sub	sp, sp, #280	; 0x118
  14:	add	r4, sp, #28
  18:	mov	r0, r4
  1c:	bl	0 <flatcc_builder_init>
  20:	mov	r0, r4
  24:	bl	5a8 <create_root_monster>
  28:	sub	r1, fp, #76	; 0x4c
  2c:	mov	r0, r4
  30:	bl	0 <flatcc_builder_finalize_buffer>
  34:	movw	r1, #0
  38:	mov	r7, r0
  3c:	movw	r0, #0
  40:	movt	r0, #0
  44:	movt	r1, #0
  48:	bl	0 <fopen>
  4c:	cmp	r0, #0
  50:	beq	d0 <main+0xd0>
  54:	ldr	r6, [fp, #-76]	; 0xffffffb4
  58:	mov	r5, r0
  5c:	mov	r0, r7
  60:	mov	r1, #1
  64:	mov	r4, #1
  68:	mov	r3, r5
  6c:	mov	r2, r6
  70:	bl	0 <fwrite_unlocked>
  74:	mov	r8, r0
  78:	mov	r0, r5
  7c:	bl	0 <fclose>
  80:	cmp	r6, r8
  84:	bne	474 <main+0x474>
  88:	ldr	r1, [fp, #-76]	; 0xffffffb4
  8c:	movw	r0, #0
  90:	movt	r0, #0
  94:	bl	0 <printf>
  98:	movw	r0, #0
  9c:	movt	r0, #0
  a0:	bl	0 <puts>
  a4:	sub	r0, fp, #72	; 0x48
  a8:	mov	r1, #0
  ac:	bl	0 <gettimeofday>
  b0:	movw	r2, #0
  b4:	movt	r2, #0
  b8:	ldr	r0, [r2]
  bc:	cmp	r0, #0
  c0:	beq	d8 <main+0xd8>
  c4:	ldr	r1, [r2, #4]
  c8:	ldr	r2, [fp, #-72]	; 0xffffffb8
  cc:	b	e8 <main+0xe8>
  d0:	mvn	r4, #0
  d4:	b	474 <main+0x474>
  d8:	ldr	r0, [fp, #-72]	; 0xffffffb8
  dc:	ldr	r1, [fp, #-68]	; 0xffffffbc
  e0:	strd	r0, [r2]
  e4:	mov	r2, r0
  e8:	sub	r0, r2, r0
  ec:	ldr	r2, [fp, #-68]	; 0xffffffbc
  f0:	vldr	d8, [pc, #1008]	; 4e8 <main+0x4e8>
  f4:	movw	sl, #0
  f8:	movw	r6, #0
  fc:	vmov	s2, r0
 100:	add	r0, r7, #8
 104:	movt	sl, #0
 108:	movt	r6, #0
 10c:	sub	r1, r2, r1
 110:	vmov	s0, r1
 114:	vcvt.f64.s32	d16, s0
 118:	vcvt.f64.s32	d17, s2
 11c:	str	r0, [sp, #8]
 120:	mov	r0, #0
 124:	str	r7, [sp, #4]
 128:	vdiv.f64	d16, d16, d8
 12c:	vadd.f64	d9, d16, d17
 130:	add	r4, sp, #28
 134:	str	r0, [sp, #12]
 138:	mov	r0, r4
 13c:	bl	5a8 <create_root_monster>
 140:	ldr	r2, [fp, #-76]	; 0xffffffb4
 144:	mov	r0, r4
 148:	mov	r1, r7
 14c:	bl	0 <flatcc_builder_copy_buffer>
 150:	cmp	r7, #0
 154:	beq	56c <main+0x56c>
 158:	ldr	r0, [r7, #4]
 15c:	movw	r1, #20301	; 0x4f4d
 160:	movt	r1, #21326	; 0x534e
 164:	cmp	r0, r1
 168:	bne	56c <main+0x56c>
 16c:	ldr	r8, [r7]
 170:	mov	r5, r7
 174:	ldr	r0, [r5, r8]!
 178:	mov	r4, r5
 17c:	ldrh	r9, [r4, -r0]!
 180:	cmp	r9, #11
 184:	bls	510 <main+0x510>
 188:	ldrh	r0, [r4, #10]
 18c:	cmp	r0, #0
 190:	beq	510 <main+0x510>
 194:	mov	r1, r5
 198:	ldr	r0, [r1, r0]!
 19c:	add	r0, r1, r0
 1a0:	movw	r1, #0
 1a4:	movt	r1, #0
 1a8:	add	r0, r0, #4
 1ac:	bl	0 <strcmp>
 1b0:	cmp	r0, #0
 1b4:	bne	578 <main+0x578>
 1b8:	cmp	r9, #28
 1bc:	bcc	558 <main+0x558>
 1c0:	ldrh	r0, [r4, #26]
 1c4:	cmp	r0, #0
 1c8:	beq	558 <main+0x558>
 1cc:	ldr	r1, [r5, r0]!
 1d0:	ldr	r2, [r5, r1]!
 1d4:	cmp	r2, #1000	; 0x3e8
 1d8:	bne	558 <main+0x558>
 1dc:	add	r1, r1, r8
 1e0:	add	r2, r5, #4
 1e4:	add	r0, r1, r0
 1e8:	ldr	r1, [sp, #8]
 1ec:	str	r2, [sp, #16]
 1f0:	add	r7, r1, r0
 1f4:	mov	r0, #0
 1f8:	ldr	r4, [sp, #16]
 1fc:	str	r0, [sp, #20]
 200:	ldr	lr, [r4, r0, lsl #2]!
 204:	ldr	r1, [r4, lr]!
 208:	mov	r0, r4
 20c:	ldrh	r2, [r0, -r1]!
 210:	cmp	r2, #12
 214:	bcc	510 <main+0x510>
 218:	ldrh	r1, [r0, #10]
 21c:	cmp	r1, #0
 220:	beq	510 <main+0x510>
 224:	mov	r3, r4
 228:	mov	r5, #0
 22c:	cmp	r2, #16
 230:	ldr	ip, [r3, r1]!
 234:	add	r3, r3, ip
 238:	add	r3, r3, #4
 23c:	bcc	254 <main+0x254>
 240:	ldrh	r2, [r0, #14]
 244:	cmp	r2, #0
 248:	ldrne	r0, [r4, r2]!
 24c:	addne	r0, r4, r0
 250:	addne	r5, r0, #4
 254:	ldr	r0, [r3, #-4]
 258:	cmp	r0, #700	; 0x2bc
 25c:	bne	544 <main+0x544>
 260:	cmp	r5, #0
 264:	beq	530 <main+0x530>
 268:	ldr	r0, [r5, #-4]
 26c:	movw	r2, #34464	; 0x86a0
 270:	movt	r2, #1
 274:	cmp	r0, r2
 278:	bne	530 <main+0x530>
 27c:	add	r0, ip, lr
 280:	mov	r4, r3
 284:	mov	r9, #0
 288:	str	r7, [sp, #24]
 28c:	add	r0, r0, r1
 290:	add	r8, r7, r0
 294:	mov	r0, r8
 298:	mov	r1, sl
 29c:	mov	r2, #7
 2a0:	bl	0 <bcmp>
 2a4:	cmp	r0, #0
 2a8:	bne	4ac <main+0x4ac>
 2ac:	add	r9, r9, #1
 2b0:	add	r8, r8, #7
 2b4:	cmp	r9, #100	; 0x64
 2b8:	bne	294 <main+0x294>
 2bc:	ldr	r7, [sp, #24]
 2c0:	mov	r4, #100	; 0x64
 2c4:	mov	r0, r5
 2c8:	mov	r1, r6
 2cc:	mov	r2, #1000	; 0x3e8
 2d0:	bl	0 <bcmp>
 2d4:	cmp	r0, #0
 2d8:	bne	4f0 <main+0x4f0>
 2dc:	add	r5, r5, #1000	; 0x3e8
 2e0:	subs	r4, r4, #1
 2e4:	bne	2c4 <main+0x2c4>
 2e8:	ldr	r0, [sp, #20]
 2ec:	add	r7, r7, #4
 2f0:	add	r0, r0, #1
 2f4:	cmp	r0, #1000	; 0x3e8
 2f8:	bne	1f8 <main+0x1f8>
 2fc:	ldr	r0, [sp, #12]
 300:	ldr	r7, [sp, #4]
 304:	add	r0, r0, #1
 308:	cmp	r0, #10
 30c:	bne	130 <main+0x130>
 310:	sub	r0, fp, #72	; 0x48
 314:	mov	r1, #0
 318:	bl	0 <gettimeofday>
 31c:	movw	r0, #0
 320:	movt	r0, #0
 324:	ldr	r6, [r0]
 328:	cmp	r6, #0
 32c:	beq	33c <main+0x33c>
 330:	ldr	r9, [r0, #4]
 334:	ldr	r8, [fp, #-72]	; 0xffffffb8
 338:	b	34c <main+0x34c>
 33c:	ldr	r6, [fp, #-72]	; 0xffffffb8
 340:	ldr	r9, [fp, #-68]	; 0xffffffbc
 344:	mov	r8, r6
 348:	stm	r0, {r6, r9}
 34c:	movw	r0, #0
 350:	movw	r1, #0
 354:	ldr	r5, [fp, #-68]	; 0xffffffbc
 358:	ldr	r4, [fp, #-76]	; 0xffffffb4
 35c:	movt	r0, #0
 360:	movt	r1, #0
 364:	bl	0 <printf>
 368:	sub	r1, r5, r9
 36c:	sub	r0, r8, r6
 370:	vmov	s0, r1
 374:	vmov	s2, r0
 378:	movw	r0, #0
 37c:	movt	r0, #0
 380:	vcvt.f64.s32	d16, s0
 384:	vcvt.f64.s32	d17, s2
 388:	vdiv.f64	d16, d16, d8
 38c:	vadd.f64	d16, d16, d17
 390:	vsub.f64	d9, d16, d9
 394:	vmov	r2, r3, d9
 398:	bl	0 <printf>
 39c:	movw	r0, #0
 3a0:	mov	r1, #10
 3a4:	movt	r0, #0
 3a8:	bl	0 <printf>
 3ac:	movw	r0, #0
 3b0:	mov	r1, r4
 3b4:	movt	r0, #0
 3b8:	bl	0 <printf>
 3bc:	vmov	s0, r4
 3c0:	vmov.f64	d10, #36	; 0x41200000  10.0
 3c4:	movw	r0, #0
 3c8:	movt	r0, #0
 3cc:	vcvt.f64.u32	d16, s0
 3d0:	vmul.f64	d16, d16, d10
 3d4:	vdiv.f64	d16, d16, d8
 3d8:	vdiv.f64	d16, d16, d9
 3dc:	vmov	r2, r3, d16
 3e0:	bl	0 <printf>
 3e4:	vdiv.f64	d16, d10, d9
 3e8:	movw	r0, #0
 3ec:	movt	r0, #0
 3f0:	vmov	r2, r3, d16
 3f4:	bl	0 <printf>
 3f8:	vldr	d17, [pc, #408]	; 598 <main+0x598>
 3fc:	vldr	d18, [pc, #412]	; 5a0 <main+0x5a0>
 400:	vmul.f64	d16, d9, d17
 404:	vdiv.f64	d16, d16, d10
 408:	vcmpe.f64	d16, d18
 40c:	vmrs	APSR_nzcv, fpscr
 410:	bpl	424 <main+0x424>
 414:	movw	r0, #0
 418:	vmov	r2, r3, d16
 41c:	movt	r0, #0
 420:	b	46c <main+0x46c>
 424:	vcmpe.f64	d16, d8
 428:	vmrs	APSR_nzcv, fpscr
 42c:	bpl	440 <main+0x440>
 430:	vdiv.f64	d16, d16, d18
 434:	movw	r0, #0
 438:	movt	r0, #0
 43c:	b	468 <main+0x468>
 440:	vcmpe.f64	d16, d17
 444:	vmrs	APSR_nzcv, fpscr
 448:	bpl	45c <main+0x45c>
 44c:	vdiv.f64	d16, d16, d8
 450:	movw	r0, #0
 454:	movt	r0, #0
 458:	b	468 <main+0x468>
 45c:	vdiv.f64	d16, d16, d17
 460:	movw	r0, #0
 464:	movt	r0, #0
 468:	vmov	r2, r3, d16
 46c:	bl	0 <printf>
 470:	mov	r4, #0
 474:	add	r0, sp, #28
 478:	bl	0 <flatcc_builder_clear>
 47c:	mov	r0, r7
 480:	bl	0 <free>
 484:	cmp	r4, #0
 488:	beq	498 <main+0x498>
 48c:	movw	r0, #0
 490:	movt	r0, #0
 494:	bl	0 <puts>
 498:	mov	r0, r4
 49c:	sub	sp, fp, #56	; 0x38
 4a0:	vpop	{d8-d10}
 4a4:	add	sp, sp, #4
 4a8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
 4ac:	movw	r0, #0
 4b0:	mov	r1, r9
 4b4:	mov	r2, r4
 4b8:	movt	r0, #0
 4bc:	bl	0 <printf>
 4c0:	ldr	r0, [sp, #4]
 4c4:	sub	r1, r8, r0
 4c8:	movw	r0, #0
 4cc:	movt	r0, #0
 4d0:	bl	0 <printf>
 4d4:	movw	r0, #0
 4d8:	movw	r1, #0
 4dc:	movw	r3, #0
 4e0:	mov	r2, #85	; 0x55
 4e4:	b	500 <main+0x500>
 4e8:	.word	0x00000000
 4ec:	.word	0x412e8480
 4f0:	movw	r0, #0
 4f4:	movw	r1, #0
 4f8:	movw	r3, #0
 4fc:	mov	r2, #91	; 0x5b
 500:	movt	r0, #0
 504:	movt	r1, #0
 508:	movt	r3, #0
 50c:	bl	0 <__assert_fail>
 510:	movw	r0, #0
 514:	movt	r0, #0
 518:	movw	r1, #0
 51c:	movw	r3, #0
 520:	movw	r2, #699	; 0x2bb
 524:	movt	r1, #0
 528:	movt	r3, #0
 52c:	bl	0 <__assert_fail>
 530:	movw	r0, #0
 534:	movw	r1, #0
 538:	movw	r3, #0
 53c:	mov	r2, #78	; 0x4e
 540:	b	500 <main+0x500>
 544:	movw	r0, #0
 548:	movw	r1, #0
 54c:	movw	r3, #0
 550:	mov	r2, #74	; 0x4a
 554:	b	500 <main+0x500>
 558:	movw	r0, #0
 55c:	movw	r1, #0
 560:	movw	r3, #0
 564:	mov	r2, #143	; 0x8f
 568:	b	588 <main+0x588>
 56c:	movw	r0, #0
 570:	movt	r0, #0
 574:	b	518 <main+0x518>
 578:	movw	r0, #0
 57c:	movw	r1, #0
 580:	movw	r3, #0
 584:	mov	r2, #139	; 0x8b
 588:	movt	r0, #0
 58c:	movt	r1, #0
 590:	movt	r3, #0
 594:	bl	0 <__assert_fail>
 598:	.word	0x00000000
 59c:	.word	0x41cdcd65
 5a0:	.word	0x00000000
 5a4:	.word	0x408f4000

000005a8 <create_root_monster>:
 5a8:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
 5ac:	add	fp, sp, #24
 5b0:	mov	r4, r0
 5b4:	bl	0 <flatcc_builder_reset>
 5b8:	movw	r1, #0
 5bc:	mov	r0, r4
 5c0:	mov	r2, #0
 5c4:	mov	r3, #0
 5c8:	movt	r1, #0
 5cc:	bl	0 <flatcc_builder_start_buffer>
 5d0:	cmp	r0, #0
 5d4:	bne	5e4 <create_root_monster+0x3c>
 5d8:	mov	r0, r4
 5dc:	mov	r1, #36	; 0x24
 5e0:	bl	0 <flatcc_builder_start_table>
 5e4:	movw	r1, #0
 5e8:	mov	r0, r4
 5ec:	movt	r1, #0
 5f0:	bl	0 <flatcc_builder_create_string_str>
 5f4:	cmp	r0, #0
 5f8:	beq	614 <create_root_monster+0x6c>
 5fc:	mov	r5, r0
 600:	mov	r0, r4
 604:	mov	r1, #3
 608:	bl	0 <flatcc_builder_table_add_offset>
 60c:	cmp	r0, #0
 610:	strne	r5, [r0]
 614:	mov	r0, r4
 618:	bl	0 <flatcc_builder_start_offset_vector>
 61c:	movw	r5, #0
 620:	movw	r6, #0
 624:	movw	r8, #0
 628:	mov	r9, #0
 62c:	movt	r5, #0
 630:	movt	r6, #0
 634:	movt	r8, #0
 638:	mov	r0, r4
 63c:	mov	r1, #36	; 0x24
 640:	bl	0 <flatcc_builder_start_table>
 644:	mov	r0, r4
 648:	bl	0 <flatcc_builder_start_string>
 64c:	mov	r7, #100	; 0x64
 650:	mov	r0, r4
 654:	mov	r1, r5
 658:	mov	r2, #7
 65c:	bl	0 <flatcc_builder_append_string>
 660:	subs	r7, r7, #1
 664:	bne	650 <create_root_monster+0xa8>
 668:	mov	r0, r4
 66c:	bl	0 <flatcc_builder_end_string>
 670:	cmp	r0, #0
 674:	beq	690 <create_root_monster+0xe8>
 678:	mov	r7, r0
 67c:	mov	r0, r4
 680:	mov	r1, #3
 684:	bl	0 <flatcc_builder_table_add_offset>
 688:	cmp	r0, #0
 68c:	strne	r7, [r0]
 690:	mov	r0, r4
 694:	mov	r1, #1
 698:	mov	r2, #1
 69c:	mvn	r3, #0
 6a0:	bl	0 <flatcc_builder_start_vector>
 6a4:	mov	r7, #100	; 0x64
 6a8:	mov	r0, r4
 6ac:	mov	r1, r6
 6b0:	mov	r2, #1000	; 0x3e8
 6b4:	bl	0 <flatcc_builder_append_vector>
 6b8:	subs	r7, r7, #1
 6bc:	bne	6a8 <create_root_monster+0x100>
 6c0:	mov	r0, r4
 6c4:	bl	0 <flatcc_builder_end_vector>
 6c8:	cmp	r0, #0
 6cc:	beq	6e8 <create_root_monster+0x140>
 6d0:	mov	r7, r0
 6d4:	mov	r0, r4
 6d8:	mov	r1, #5
 6dc:	bl	0 <flatcc_builder_table_add_offset>
 6e0:	cmp	r0, #0
 6e4:	strne	r7, [r0]
 6e8:	mov	r0, r4
 6ec:	mov	r1, r8
 6f0:	mov	r2, #1
 6f4:	bl	0 <flatcc_builder_check_required>
 6f8:	cmp	r0, #0
 6fc:	beq	784 <create_root_monster+0x1dc>
 700:	mov	r0, r4
 704:	bl	0 <flatcc_builder_end_table>
 708:	cmp	r0, #0
 70c:	beq	7a4 <create_root_monster+0x1fc>
 710:	mov	r1, r0
 714:	mov	r0, r4
 718:	bl	0 <flatcc_builder_offset_vector_push>
 71c:	add	r9, r9, #1
 720:	cmp	r9, #1000	; 0x3e8
 724:	bne	638 <create_root_monster+0x90>
 728:	mov	r0, r4
 72c:	bl	0 <flatcc_builder_end_offset_vector>
 730:	cmp	r0, #0
 734:	beq	7c4 <create_root_monster+0x21c>
 738:	mov	r5, r0
 73c:	mov	r0, r4
 740:	mov	r1, #11
 744:	bl	0 <flatcc_builder_table_add_offset>
 748:	movw	r1, #0
 74c:	cmp	r0, #0
 750:	mov	r2, #1
 754:	movt	r1, #0
 758:	strne	r5, [r0]
 75c:	mov	r0, r4
 760:	bl	0 <flatcc_builder_check_required>
 764:	cmp	r0, #0
 768:	beq	784 <create_root_monster+0x1dc>
 76c:	mov	r0, r4
 770:	bl	0 <flatcc_builder_end_table>
 774:	mov	r1, r0
 778:	mov	r0, r4
 77c:	pop	{r4, r5, r6, r7, r8, r9, fp, lr}
 780:	b	0 <flatcc_builder_end_buffer>
 784:	movw	r0, #0
 788:	movw	r1, #0
 78c:	movw	r3, #0
 790:	mov	r2, #235	; 0xeb
 794:	movt	r0, #0
 798:	movt	r1, #0
 79c:	movt	r3, #0
 7a0:	bl	0 <__assert_fail>
 7a4:	movw	r0, #0
 7a8:	movw	r1, #0
 7ac:	movw	r3, #0
 7b0:	mov	r2, #42	; 0x2a
 7b4:	movt	r0, #0
 7b8:	movt	r1, #0
 7bc:	movt	r3, #0
 7c0:	bl	0 <__assert_fail>
 7c4:	movw	r0, #0
 7c8:	movw	r1, #0
 7cc:	movw	r3, #0
 7d0:	mov	r2, #56	; 0x38
 7d4:	movt	r0, #0
 7d8:	movt	r1, #0
 7dc:	movt	r3, #0
 7e0:	bl	0 <__assert_fail>
