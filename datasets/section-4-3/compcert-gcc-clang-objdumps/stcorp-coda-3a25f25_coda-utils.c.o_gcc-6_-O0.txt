
../compcert-repos/stcorp-coda-3a25f25/CMakeFiles/coda_static.dir/libcoda/coda-utils.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <coda_format_from_string>:
       0:	push	{fp, lr}
       4:	add	fp, sp, #4
       8:	sub	sp, sp, #8
       c:	str	r0, [fp, #-8]
      10:	str	r1, [fp, #-12]
      14:	ldr	r1, [pc, #432]	; 1cc <coda_format_from_string+0x1cc>
      18:	ldr	r0, [fp, #-8]
      1c:	bl	0 <strcmp>
      20:	mov	r3, r0
      24:	cmp	r3, #0
      28:	bne	3c <coda_format_from_string+0x3c>
      2c:	ldr	r3, [fp, #-12]
      30:	mov	r2, #0
      34:	str	r2, [r3]
      38:	b	1bc <coda_format_from_string+0x1bc>
      3c:	ldr	r1, [pc, #396]	; 1d0 <coda_format_from_string+0x1d0>
      40:	ldr	r0, [fp, #-8]
      44:	bl	0 <strcmp>
      48:	mov	r3, r0
      4c:	cmp	r3, #0
      50:	bne	64 <coda_format_from_string+0x64>
      54:	ldr	r3, [fp, #-12]
      58:	mov	r2, #1
      5c:	str	r2, [r3]
      60:	b	1bc <coda_format_from_string+0x1bc>
      64:	ldr	r1, [pc, #360]	; 1d4 <coda_format_from_string+0x1d4>
      68:	ldr	r0, [fp, #-8]
      6c:	bl	0 <strcmp>
      70:	mov	r3, r0
      74:	cmp	r3, #0
      78:	bne	8c <coda_format_from_string+0x8c>
      7c:	ldr	r3, [fp, #-12]
      80:	mov	r2, #2
      84:	str	r2, [r3]
      88:	b	1bc <coda_format_from_string+0x1bc>
      8c:	ldr	r1, [pc, #324]	; 1d8 <coda_format_from_string+0x1d8>
      90:	ldr	r0, [fp, #-8]
      94:	bl	0 <strcmp>
      98:	mov	r3, r0
      9c:	cmp	r3, #0
      a0:	bne	b4 <coda_format_from_string+0xb4>
      a4:	ldr	r3, [fp, #-12]
      a8:	mov	r2, #3
      ac:	str	r2, [r3]
      b0:	b	1bc <coda_format_from_string+0x1bc>
      b4:	ldr	r1, [pc, #288]	; 1dc <coda_format_from_string+0x1dc>
      b8:	ldr	r0, [fp, #-8]
      bc:	bl	0 <strcmp>
      c0:	mov	r3, r0
      c4:	cmp	r3, #0
      c8:	bne	dc <coda_format_from_string+0xdc>
      cc:	ldr	r3, [fp, #-12]
      d0:	mov	r2, #4
      d4:	str	r2, [r3]
      d8:	b	1bc <coda_format_from_string+0x1bc>
      dc:	ldr	r1, [pc, #252]	; 1e0 <coda_format_from_string+0x1e0>
      e0:	ldr	r0, [fp, #-8]
      e4:	bl	0 <strcmp>
      e8:	mov	r3, r0
      ec:	cmp	r3, #0
      f0:	bne	104 <coda_format_from_string+0x104>
      f4:	ldr	r3, [fp, #-12]
      f8:	mov	r2, #5
      fc:	str	r2, [r3]
     100:	b	1bc <coda_format_from_string+0x1bc>
     104:	ldr	r1, [pc, #216]	; 1e4 <coda_format_from_string+0x1e4>
     108:	ldr	r0, [fp, #-8]
     10c:	bl	0 <strcmp>
     110:	mov	r3, r0
     114:	cmp	r3, #0
     118:	bne	12c <coda_format_from_string+0x12c>
     11c:	ldr	r3, [fp, #-12]
     120:	mov	r2, #6
     124:	str	r2, [r3]
     128:	b	1bc <coda_format_from_string+0x1bc>
     12c:	ldr	r1, [pc, #180]	; 1e8 <coda_format_from_string+0x1e8>
     130:	ldr	r0, [fp, #-8]
     134:	bl	0 <strcmp>
     138:	mov	r3, r0
     13c:	cmp	r3, #0
     140:	bne	154 <coda_format_from_string+0x154>
     144:	ldr	r3, [fp, #-12]
     148:	mov	r2, #7
     14c:	str	r2, [r3]
     150:	b	1bc <coda_format_from_string+0x1bc>
     154:	ldr	r1, [pc, #144]	; 1ec <coda_format_from_string+0x1ec>
     158:	ldr	r0, [fp, #-8]
     15c:	bl	0 <strcmp>
     160:	mov	r3, r0
     164:	cmp	r3, #0
     168:	bne	17c <coda_format_from_string+0x17c>
     16c:	ldr	r3, [fp, #-12]
     170:	mov	r2, #8
     174:	str	r2, [r3]
     178:	b	1bc <coda_format_from_string+0x1bc>
     17c:	ldr	r1, [pc, #108]	; 1f0 <coda_format_from_string+0x1f0>
     180:	ldr	r0, [fp, #-8]
     184:	bl	0 <strcmp>
     188:	mov	r3, r0
     18c:	cmp	r3, #0
     190:	bne	1a4 <coda_format_from_string+0x1a4>
     194:	ldr	r3, [fp, #-12]
     198:	mov	r2, #9
     19c:	str	r2, [r3]
     1a0:	b	1bc <coda_format_from_string+0x1bc>
     1a4:	ldr	r2, [fp, #-8]
     1a8:	ldr	r1, [pc, #68]	; 1f4 <coda_format_from_string+0x1f4>
     1ac:	ldr	r0, [pc, #68]	; 1f8 <coda_format_from_string+0x1f8>
     1b0:	bl	0 <coda_set_error>
     1b4:	mvn	r3, #0
     1b8:	b	1c0 <coda_format_from_string+0x1c0>
     1bc:	mov	r3, #0
     1c0:	mov	r0, r3
     1c4:	sub	sp, fp, #4
     1c8:	pop	{fp, pc}
     1cc:	.word	0x00000000
     1d0:	.word	0x00000008
     1d4:	.word	0x00000010
     1d8:	.word	0x00000014
     1dc:	.word	0x0000001c
     1e0:	.word	0x00000024
     1e4:	.word	0x00000028
     1e8:	.word	0x00000030
     1ec:	.word	0x00000038
     1f0:	.word	0x00000040
     1f4:	.word	0x00000044
     1f8:	.word	0xfffffe70

000001fc <coda_element_name_from_xml_name>:
     1fc:	push	{fp}		; (str fp, [sp, #-4]!)
     200:	add	fp, sp, #0
     204:	sub	sp, sp, #20
     208:	str	r0, [fp, #-16]
     20c:	ldr	r3, [fp, #-16]
     210:	str	r3, [fp, #-8]
     214:	b	224 <coda_element_name_from_xml_name+0x28>
     218:	ldr	r3, [fp, #-8]
     21c:	add	r3, r3, #1
     220:	str	r3, [fp, #-8]
     224:	ldr	r3, [fp, #-8]
     228:	ldrb	r3, [r3]
     22c:	cmp	r3, #32
     230:	beq	244 <coda_element_name_from_xml_name+0x48>
     234:	ldr	r3, [fp, #-8]
     238:	ldrb	r3, [r3]
     23c:	cmp	r3, #0
     240:	bne	218 <coda_element_name_from_xml_name+0x1c>
     244:	ldr	r3, [fp, #-8]
     248:	ldrb	r3, [r3]
     24c:	cmp	r3, #0
     250:	bne	25c <coda_element_name_from_xml_name+0x60>
     254:	ldr	r3, [fp, #-16]
     258:	b	26c <coda_element_name_from_xml_name+0x70>
     25c:	ldr	r3, [fp, #-8]
     260:	add	r3, r3, #1
     264:	str	r3, [fp, #-8]
     268:	ldr	r3, [fp, #-8]
     26c:	mov	r0, r3
     270:	add	sp, fp, #0
     274:	pop	{fp}		; (ldr fp, [sp], #4)
     278:	bx	lr

0000027c <coda_is_identifier>:
     27c:	push	{fp, lr}
     280:	add	fp, sp, #4
     284:	sub	sp, sp, #16
     288:	str	r0, [fp, #-16]
     28c:	ldr	r3, [fp, #-16]
     290:	cmp	r3, #0
     294:	bne	2a0 <coda_is_identifier+0x24>
     298:	mov	r3, #0
     29c:	b	35c <coda_is_identifier+0xe0>
     2a0:	bl	0 <__ctype_b_loc>
     2a4:	mov	r3, r0
     2a8:	ldr	r2, [r3]
     2ac:	ldr	r3, [fp, #-16]
     2b0:	ldrb	r3, [r3]
     2b4:	lsl	r3, r3, #1
     2b8:	add	r3, r2, r3
     2bc:	ldrh	r3, [r3]
     2c0:	and	r3, r3, #1024	; 0x400
     2c4:	cmp	r3, #0
     2c8:	bne	2d4 <coda_is_identifier+0x58>
     2cc:	mov	r3, #0
     2d0:	b	35c <coda_is_identifier+0xe0>
     2d4:	mov	r3, #1
     2d8:	str	r3, [fp, #-8]
     2dc:	b	340 <coda_is_identifier+0xc4>
     2e0:	bl	0 <__ctype_b_loc>
     2e4:	mov	r3, r0
     2e8:	ldr	r2, [r3]
     2ec:	ldr	r3, [fp, #-8]
     2f0:	ldr	r1, [fp, #-16]
     2f4:	add	r3, r1, r3
     2f8:	ldrb	r3, [r3]
     2fc:	lsl	r3, r3, #1
     300:	add	r3, r2, r3
     304:	ldrh	r3, [r3]
     308:	and	r3, r3, #8
     30c:	cmp	r3, #0
     310:	bne	334 <coda_is_identifier+0xb8>
     314:	ldr	r3, [fp, #-8]
     318:	ldr	r2, [fp, #-16]
     31c:	add	r3, r2, r3
     320:	ldrb	r3, [r3]
     324:	cmp	r3, #95	; 0x5f
     328:	beq	334 <coda_is_identifier+0xb8>
     32c:	mov	r3, #0
     330:	b	35c <coda_is_identifier+0xe0>
     334:	ldr	r3, [fp, #-8]
     338:	add	r3, r3, #1
     33c:	str	r3, [fp, #-8]
     340:	ldr	r3, [fp, #-8]
     344:	ldr	r2, [fp, #-16]
     348:	add	r3, r2, r3
     34c:	ldrb	r3, [r3]
     350:	cmp	r3, #0
     354:	bne	2e0 <coda_is_identifier+0x64>
     358:	mov	r3, #1
     35c:	mov	r0, r3
     360:	sub	sp, fp, #4
     364:	pop	{fp, pc}

00000368 <coda_identifier_from_name>:
     368:	push	{fp, lr}
     36c:	add	fp, sp, #4
     370:	sub	sp, sp, #40	; 0x28
     374:	str	r0, [fp, #-32]	; 0xffffffe0
     378:	str	r1, [fp, #-36]	; 0xffffffdc
     37c:	mov	r3, #4
     380:	str	r3, [fp, #-16]
     384:	ldr	r3, [fp, #-32]	; 0xffffffe0
     388:	cmp	r3, #0
     38c:	bne	3a8 <coda_identifier_from_name+0x40>
     390:	ldr	r3, [pc, #524]	; 5a4 <coda_identifier_from_name+0x23c>
     394:	str	r3, [fp, #-32]	; 0xffffffe0
     398:	b	3fc <coda_identifier_from_name+0x94>
     39c:	ldr	r3, [fp, #-32]	; 0xffffffe0
     3a0:	add	r3, r3, #1
     3a4:	str	r3, [fp, #-32]	; 0xffffffe0
     3a8:	ldr	r3, [fp, #-32]	; 0xffffffe0
     3ac:	ldrb	r3, [r3]
     3b0:	cmp	r3, #0
     3b4:	beq	3e4 <coda_identifier_from_name+0x7c>
     3b8:	bl	0 <__ctype_b_loc>
     3bc:	mov	r3, r0
     3c0:	ldr	r2, [r3]
     3c4:	ldr	r3, [fp, #-32]	; 0xffffffe0
     3c8:	ldrb	r3, [r3]
     3cc:	lsl	r3, r3, #1
     3d0:	add	r3, r2, r3
     3d4:	ldrh	r3, [r3]
     3d8:	and	r3, r3, #1024	; 0x400
     3dc:	cmp	r3, #0
     3e0:	beq	39c <coda_identifier_from_name+0x34>
     3e4:	ldr	r3, [fp, #-32]	; 0xffffffe0
     3e8:	ldrb	r3, [r3]
     3ec:	cmp	r3, #0
     3f0:	bne	3fc <coda_identifier_from_name+0x94>
     3f4:	ldr	r3, [pc, #424]	; 5a4 <coda_identifier_from_name+0x23c>
     3f8:	str	r3, [fp, #-32]	; 0xffffffe0
     3fc:	ldr	r0, [fp, #-32]	; 0xffffffe0
     400:	bl	0 <strlen>
     404:	mov	r3, r0
     408:	str	r3, [fp, #-20]	; 0xffffffec
     40c:	ldr	r2, [fp, #-20]	; 0xffffffec
     410:	ldr	r3, [fp, #-16]
     414:	add	r3, r2, r3
     418:	add	r3, r3, #1
     41c:	mov	r0, r3
     420:	bl	0 <malloc>
     424:	mov	r3, r0
     428:	str	r3, [fp, #-24]	; 0xffffffe8
     42c:	ldr	r3, [fp, #-24]	; 0xffffffe8
     430:	cmp	r3, #0
     434:	bne	464 <coda_identifier_from_name+0xfc>
     438:	ldr	r2, [fp, #-20]	; 0xffffffec
     43c:	ldr	r3, [fp, #-16]
     440:	add	r2, r2, r3
     444:	mov	r3, #172	; 0xac
     448:	str	r3, [sp]
     44c:	ldr	r3, [pc, #340]	; 5a8 <coda_identifier_from_name+0x240>
     450:	ldr	r1, [pc, #340]	; 5ac <coda_identifier_from_name+0x244>
     454:	mvn	r0, #0
     458:	bl	0 <coda_set_error>
     45c:	mov	r3, #0
     460:	b	598 <coda_identifier_from_name+0x230>
     464:	ldr	r3, [fp, #-32]	; 0xffffffe0
     468:	ldrb	r2, [r3]
     46c:	ldr	r3, [fp, #-24]	; 0xffffffe8
     470:	strb	r2, [r3]
     474:	mov	r3, #1
     478:	str	r3, [fp, #-8]
     47c:	b	4f8 <coda_identifier_from_name+0x190>
     480:	bl	0 <__ctype_b_loc>
     484:	mov	r3, r0
     488:	ldr	r2, [r3]
     48c:	ldr	r3, [fp, #-8]
     490:	ldr	r1, [fp, #-32]	; 0xffffffe0
     494:	add	r3, r1, r3
     498:	ldrb	r3, [r3]
     49c:	lsl	r3, r3, #1
     4a0:	add	r3, r2, r3
     4a4:	ldrh	r3, [r3]
     4a8:	and	r3, r3, #8
     4ac:	cmp	r3, #0
     4b0:	beq	4d8 <coda_identifier_from_name+0x170>
     4b4:	ldr	r3, [fp, #-8]
     4b8:	ldr	r2, [fp, #-24]	; 0xffffffe8
     4bc:	add	r3, r2, r3
     4c0:	ldr	r2, [fp, #-8]
     4c4:	ldr	r1, [fp, #-32]	; 0xffffffe0
     4c8:	add	r2, r1, r2
     4cc:	ldrb	r2, [r2]
     4d0:	strb	r2, [r3]
     4d4:	b	4ec <coda_identifier_from_name+0x184>
     4d8:	ldr	r3, [fp, #-8]
     4dc:	ldr	r2, [fp, #-24]	; 0xffffffe8
     4e0:	add	r3, r2, r3
     4e4:	mov	r2, #95	; 0x5f
     4e8:	strb	r2, [r3]
     4ec:	ldr	r3, [fp, #-8]
     4f0:	add	r3, r3, #1
     4f4:	str	r3, [fp, #-8]
     4f8:	ldr	r2, [fp, #-8]
     4fc:	ldr	r3, [fp, #-20]	; 0xffffffec
     500:	cmp	r2, r3
     504:	blt	480 <coda_identifier_from_name+0x118>
     508:	ldr	r3, [fp, #-20]	; 0xffffffec
     50c:	ldr	r2, [fp, #-24]	; 0xffffffe8
     510:	add	r3, r2, r3
     514:	mov	r2, #0
     518:	strb	r2, [r3]
     51c:	ldr	r3, [fp, #-36]	; 0xffffffdc
     520:	cmp	r3, #0
     524:	beq	594 <coda_identifier_from_name+0x22c>
     528:	mov	r3, #0
     52c:	str	r3, [fp, #-12]
     530:	b	57c <coda_identifier_from_name+0x214>
     534:	ldr	r3, [fp, #-12]
     538:	add	r3, r3, #1
     53c:	str	r3, [fp, #-12]
     540:	ldr	r3, [fp, #-12]
     544:	cmp	r3, #1000	; 0x3e8
     548:	blt	560 <coda_identifier_from_name+0x1f8>
     54c:	ldr	r3, [pc, #92]	; 5b0 <coda_identifier_from_name+0x248>
     550:	mov	r2, #203	; 0xcb
     554:	ldr	r1, [pc, #76]	; 5a8 <coda_identifier_from_name+0x240>
     558:	ldr	r0, [pc, #84]	; 5b4 <coda_identifier_from_name+0x24c>
     55c:	bl	0 <__assert_fail>
     560:	ldr	r3, [fp, #-20]	; 0xffffffec
     564:	ldr	r2, [fp, #-24]	; 0xffffffe8
     568:	add	r3, r2, r3
     56c:	ldr	r2, [fp, #-12]
     570:	ldr	r1, [pc, #64]	; 5b8 <coda_identifier_from_name+0x250>
     574:	mov	r0, r3
     578:	bl	0 <sprintf>
     57c:	ldr	r1, [fp, #-24]	; 0xffffffe8
     580:	ldr	r0, [fp, #-36]	; 0xffffffdc
     584:	bl	0 <coda_hashtable_get_index_from_name>
     588:	mov	r3, r0
     58c:	cmp	r3, #0
     590:	bge	534 <coda_identifier_from_name+0x1cc>
     594:	ldr	r3, [fp, #-24]	; 0xffffffe8
     598:	mov	r0, r3
     59c:	sub	sp, fp, #4
     5a0:	pop	{fp, pc}
     5a4:	.word	0x0000006c
     5a8:	.word	0x00000074
     5ac:	.word	0x000000c0
     5b0:	.word	0x000001b8
     5b4:	.word	0x000000f8
     5b8:	.word	0x00000108

000005bc <coda_c_index_to_fortran_index>:
     5bc:	push	{fp, lr}
     5c0:	add	fp, sp, #4
     5c4:	sub	sp, sp, #64	; 0x40
     5c8:	str	r0, [fp, #-56]	; 0xffffffc8
     5cc:	str	r1, [fp, #-60]	; 0xffffffc4
     5d0:	str	r2, [fp, #-64]	; 0xffffffc0
     5d4:	ldr	r3, [fp, #-56]	; 0xffffffc8
     5d8:	cmp	r3, #8
     5dc:	ble	5fc <coda_c_index_to_fortran_index+0x40>
     5e0:	mov	r3, #8
     5e4:	ldr	r2, [fp, #-56]	; 0xffffffc8
     5e8:	ldr	r1, [pc, #300]	; 71c <coda_c_index_to_fortran_index+0x160>
     5ec:	mvn	r0, #99	; 0x63
     5f0:	bl	0 <coda_set_error>
     5f4:	mvn	r3, #0
     5f8:	b	710 <coda_c_index_to_fortran_index+0x154>
     5fc:	ldr	r3, [fp, #-56]	; 0xffffffc8
     600:	sub	r3, r3, #1
     604:	str	r3, [fp, #-8]
     608:	b	680 <coda_c_index_to_fortran_index+0xc4>
     60c:	ldr	r3, [fp, #-8]
     610:	lsl	r3, r3, #2
     614:	ldr	r2, [fp, #-60]	; 0xffffffc4
     618:	add	r3, r2, r3
     61c:	ldr	r2, [r3]
     620:	ldr	r3, [fp, #-64]	; 0xffffffc0
     624:	mov	r1, r2
     628:	mov	r0, r3
     62c:	bl	0 <__aeabi_idivmod>
     630:	mov	r3, r1
     634:	mov	r2, r3
     638:	ldr	r3, [fp, #-8]
     63c:	lsl	r3, r3, #2
     640:	sub	r1, fp, #4
     644:	add	r3, r1, r3
     648:	str	r2, [r3, #-44]	; 0xffffffd4
     64c:	ldr	r3, [fp, #-8]
     650:	lsl	r3, r3, #2
     654:	ldr	r2, [fp, #-60]	; 0xffffffc4
     658:	add	r3, r2, r3
     65c:	ldr	r3, [r3]
     660:	mov	r1, r3
     664:	ldr	r0, [fp, #-64]	; 0xffffffc0
     668:	bl	0 <__aeabi_idiv>
     66c:	mov	r3, r0
     670:	str	r3, [fp, #-64]	; 0xffffffc0
     674:	ldr	r3, [fp, #-8]
     678:	sub	r3, r3, #1
     67c:	str	r3, [fp, #-8]
     680:	ldr	r3, [fp, #-8]
     684:	cmp	r3, #0
     688:	bge	60c <coda_c_index_to_fortran_index+0x50>
     68c:	mov	r3, #0
     690:	str	r3, [fp, #-12]
     694:	mov	r3, #1
     698:	str	r3, [fp, #-16]
     69c:	mov	r3, #0
     6a0:	str	r3, [fp, #-8]
     6a4:	b	6fc <coda_c_index_to_fortran_index+0x140>
     6a8:	ldr	r3, [fp, #-8]
     6ac:	lsl	r3, r3, #2
     6b0:	sub	r2, fp, #4
     6b4:	add	r3, r2, r3
     6b8:	ldr	r3, [r3, #-44]	; 0xffffffd4
     6bc:	ldr	r2, [fp, #-16]
     6c0:	mul	r3, r2, r3
     6c4:	ldr	r2, [fp, #-12]
     6c8:	add	r3, r2, r3
     6cc:	str	r3, [fp, #-12]
     6d0:	ldr	r3, [fp, #-8]
     6d4:	lsl	r3, r3, #2
     6d8:	ldr	r2, [fp, #-60]	; 0xffffffc4
     6dc:	add	r3, r2, r3
     6e0:	ldr	r2, [r3]
     6e4:	ldr	r3, [fp, #-16]
     6e8:	mul	r3, r2, r3
     6ec:	str	r3, [fp, #-16]
     6f0:	ldr	r3, [fp, #-8]
     6f4:	add	r3, r3, #1
     6f8:	str	r3, [fp, #-8]
     6fc:	ldr	r2, [fp, #-8]
     700:	ldr	r3, [fp, #-56]	; 0xffffffc8
     704:	cmp	r2, r3
     708:	blt	6a8 <coda_c_index_to_fortran_index+0xec>
     70c:	ldr	r3, [fp, #-12]
     710:	mov	r0, r3
     714:	sub	sp, fp, #4
     718:	pop	{fp, pc}
     71c:	.word	0x0000010c

00000720 <clean_path>:
     720:	push	{fp}		; (str fp, [sp, #-4]!)
     724:	add	fp, sp, #0
     728:	sub	sp, sp, #28
     72c:	str	r0, [fp, #-24]	; 0xffffffe8
     730:	ldr	r3, [fp, #-24]	; 0xffffffe8
     734:	cmp	r3, #0
     738:	beq	aa4 <clean_path+0x384>
     73c:	ldr	r3, [fp, #-24]	; 0xffffffe8
     740:	ldrb	r3, [r3]
     744:	cmp	r3, #0
     748:	beq	aa4 <clean_path+0x384>
     74c:	mov	r3, #0
     750:	str	r3, [fp, #-8]
     754:	mov	r3, #0
     758:	str	r3, [fp, #-12]
     75c:	b	76c <clean_path+0x4c>
     760:	ldr	r3, [fp, #-8]
     764:	add	r3, r3, #2
     768:	str	r3, [fp, #-8]
     76c:	ldr	r3, [fp, #-8]
     770:	ldr	r2, [fp, #-24]	; 0xffffffe8
     774:	add	r3, r2, r3
     778:	ldrb	r3, [r3]
     77c:	cmp	r3, #46	; 0x2e
     780:	bne	a48 <clean_path+0x328>
     784:	ldr	r3, [fp, #-8]
     788:	add	r3, r3, #1
     78c:	ldr	r2, [fp, #-24]	; 0xffffffe8
     790:	add	r3, r2, r3
     794:	ldrb	r3, [r3]
     798:	cmp	r3, #47	; 0x2f
     79c:	beq	760 <clean_path+0x40>
     7a0:	b	a48 <clean_path+0x328>
     7a4:	ldr	r3, [fp, #-8]
     7a8:	ldr	r2, [fp, #-24]	; 0xffffffe8
     7ac:	add	r3, r2, r3
     7b0:	ldrb	r3, [r3]
     7b4:	cmp	r3, #47	; 0x2f
     7b8:	beq	7d4 <clean_path+0xb4>
     7bc:	ldr	r3, [fp, #-8]
     7c0:	ldr	r2, [fp, #-24]	; 0xffffffe8
     7c4:	add	r3, r2, r3
     7c8:	ldrb	r3, [r3]
     7cc:	cmp	r3, #92	; 0x5c
     7d0:	bne	a10 <clean_path+0x2f0>
     7d4:	ldr	r3, [fp, #-8]
     7d8:	add	r3, r3, #1
     7dc:	ldr	r2, [fp, #-24]	; 0xffffffe8
     7e0:	add	r3, r2, r3
     7e4:	ldrb	r3, [r3]
     7e8:	cmp	r3, #47	; 0x2f
     7ec:	beq	80c <clean_path+0xec>
     7f0:	ldr	r3, [fp, #-8]
     7f4:	add	r3, r3, #1
     7f8:	ldr	r2, [fp, #-24]	; 0xffffffe8
     7fc:	add	r3, r2, r3
     800:	ldrb	r3, [r3]
     804:	cmp	r3, #92	; 0x5c
     808:	bne	81c <clean_path+0xfc>
     80c:	ldr	r3, [fp, #-8]
     810:	add	r3, r3, #1
     814:	str	r3, [fp, #-8]
     818:	b	a48 <clean_path+0x328>
     81c:	ldr	r3, [fp, #-8]
     820:	add	r3, r3, #1
     824:	ldr	r2, [fp, #-24]	; 0xffffffe8
     828:	add	r3, r2, r3
     82c:	ldrb	r3, [r3]
     830:	cmp	r3, #46	; 0x2e
     834:	bne	a10 <clean_path+0x2f0>
     838:	ldr	r3, [fp, #-8]
     83c:	add	r3, r3, #2
     840:	ldr	r2, [fp, #-24]	; 0xffffffe8
     844:	add	r3, r2, r3
     848:	ldrb	r3, [r3]
     84c:	cmp	r3, #0
     850:	beq	88c <clean_path+0x16c>
     854:	ldr	r3, [fp, #-8]
     858:	add	r3, r3, #2
     85c:	ldr	r2, [fp, #-24]	; 0xffffffe8
     860:	add	r3, r2, r3
     864:	ldrb	r3, [r3]
     868:	cmp	r3, #47	; 0x2f
     86c:	beq	88c <clean_path+0x16c>
     870:	ldr	r3, [fp, #-8]
     874:	add	r3, r3, #2
     878:	ldr	r2, [fp, #-24]	; 0xffffffe8
     87c:	add	r3, r2, r3
     880:	ldrb	r3, [r3]
     884:	cmp	r3, #92	; 0x5c
     888:	bne	89c <clean_path+0x17c>
     88c:	ldr	r3, [fp, #-8]
     890:	add	r3, r3, #2
     894:	str	r3, [fp, #-8]
     898:	b	a48 <clean_path+0x328>
     89c:	ldr	r3, [fp, #-8]
     8a0:	add	r3, r3, #2
     8a4:	ldr	r2, [fp, #-24]	; 0xffffffe8
     8a8:	add	r3, r2, r3
     8ac:	ldrb	r3, [r3]
     8b0:	cmp	r3, #46	; 0x2e
     8b4:	bne	a10 <clean_path+0x2f0>
     8b8:	ldr	r3, [fp, #-8]
     8bc:	add	r3, r3, #3
     8c0:	ldr	r2, [fp, #-24]	; 0xffffffe8
     8c4:	add	r3, r2, r3
     8c8:	ldrb	r3, [r3]
     8cc:	cmp	r3, #0
     8d0:	beq	90c <clean_path+0x1ec>
     8d4:	ldr	r3, [fp, #-8]
     8d8:	add	r3, r3, #3
     8dc:	ldr	r2, [fp, #-24]	; 0xffffffe8
     8e0:	add	r3, r2, r3
     8e4:	ldrb	r3, [r3]
     8e8:	cmp	r3, #47	; 0x2f
     8ec:	beq	90c <clean_path+0x1ec>
     8f0:	ldr	r3, [fp, #-8]
     8f4:	add	r3, r3, #3
     8f8:	ldr	r2, [fp, #-24]	; 0xffffffe8
     8fc:	add	r3, r2, r3
     900:	ldrb	r3, [r3]
     904:	cmp	r3, #92	; 0x5c
     908:	bne	a10 <clean_path+0x2f0>
     90c:	ldr	r3, [fp, #-12]
     910:	cmp	r3, #1
     914:	ble	994 <clean_path+0x274>
     918:	ldr	r3, [fp, #-12]
     91c:	sub	r3, r3, #1
     920:	ldr	r2, [fp, #-24]	; 0xffffffe8
     924:	add	r3, r2, r3
     928:	ldrb	r3, [r3]
     92c:	cmp	r3, #46	; 0x2e
     930:	bne	994 <clean_path+0x274>
     934:	ldr	r3, [fp, #-12]
     938:	sub	r3, r3, #2
     93c:	ldr	r2, [fp, #-24]	; 0xffffffe8
     940:	add	r3, r2, r3
     944:	ldrb	r3, [r3]
     948:	cmp	r3, #46	; 0x2e
     94c:	bne	994 <clean_path+0x274>
     950:	ldr	r3, [fp, #-12]
     954:	cmp	r3, #2
     958:	beq	a10 <clean_path+0x2f0>
     95c:	ldr	r3, [fp, #-12]
     960:	sub	r3, r3, #3
     964:	ldr	r2, [fp, #-24]	; 0xffffffe8
     968:	add	r3, r2, r3
     96c:	ldrb	r3, [r3]
     970:	cmp	r3, #47	; 0x2f
     974:	beq	a10 <clean_path+0x2f0>
     978:	ldr	r3, [fp, #-12]
     97c:	sub	r3, r3, #3
     980:	ldr	r2, [fp, #-24]	; 0xffffffe8
     984:	add	r3, r2, r3
     988:	ldrb	r3, [r3]
     98c:	cmp	r3, #92	; 0x5c
     990:	beq	a10 <clean_path+0x2f0>
     994:	ldr	r3, [fp, #-12]
     998:	sub	r3, r3, #1
     99c:	str	r3, [fp, #-16]
     9a0:	b	9b0 <clean_path+0x290>
     9a4:	ldr	r3, [fp, #-16]
     9a8:	sub	r3, r3, #1
     9ac:	str	r3, [fp, #-16]
     9b0:	ldr	r3, [fp, #-16]
     9b4:	cmp	r3, #0
     9b8:	blt	9ec <clean_path+0x2cc>
     9bc:	ldr	r3, [fp, #-16]
     9c0:	ldr	r2, [fp, #-24]	; 0xffffffe8
     9c4:	add	r3, r2, r3
     9c8:	ldrb	r3, [r3]
     9cc:	cmp	r3, #47	; 0x2f
     9d0:	beq	9ec <clean_path+0x2cc>
     9d4:	ldr	r3, [fp, #-16]
     9d8:	ldr	r2, [fp, #-24]	; 0xffffffe8
     9dc:	add	r3, r2, r3
     9e0:	ldrb	r3, [r3]
     9e4:	cmp	r3, #92	; 0x5c
     9e8:	bne	9a4 <clean_path+0x284>
     9ec:	ldr	r3, [fp, #-16]
     9f0:	cmp	r3, #0
     9f4:	blt	a10 <clean_path+0x2f0>
     9f8:	ldr	r3, [fp, #-16]
     9fc:	str	r3, [fp, #-12]
     a00:	ldr	r3, [fp, #-8]
     a04:	add	r3, r3, #3
     a08:	str	r3, [fp, #-8]
     a0c:	b	a48 <clean_path+0x328>
     a10:	ldr	r3, [fp, #-12]
     a14:	ldr	r2, [fp, #-24]	; 0xffffffe8
     a18:	add	r3, r2, r3
     a1c:	ldr	r2, [fp, #-8]
     a20:	ldr	r1, [fp, #-24]	; 0xffffffe8
     a24:	add	r2, r1, r2
     a28:	ldrb	r2, [r2]
     a2c:	strb	r2, [r3]
     a30:	ldr	r3, [fp, #-8]
     a34:	add	r3, r3, #1
     a38:	str	r3, [fp, #-8]
     a3c:	ldr	r3, [fp, #-12]
     a40:	add	r3, r3, #1
     a44:	str	r3, [fp, #-12]
     a48:	ldr	r3, [fp, #-8]
     a4c:	ldr	r2, [fp, #-24]	; 0xffffffe8
     a50:	add	r3, r2, r3
     a54:	ldrb	r3, [r3]
     a58:	cmp	r3, #0
     a5c:	bne	7a4 <clean_path+0x84>
     a60:	ldr	r3, [fp, #-12]
     a64:	cmp	r3, #0
     a68:	bne	a8c <clean_path+0x36c>
     a6c:	ldr	r3, [fp, #-12]
     a70:	ldr	r2, [fp, #-24]	; 0xffffffe8
     a74:	add	r3, r2, r3
     a78:	mov	r2, #46	; 0x2e
     a7c:	strb	r2, [r3]
     a80:	ldr	r3, [fp, #-12]
     a84:	add	r3, r3, #1
     a88:	str	r3, [fp, #-12]
     a8c:	ldr	r3, [fp, #-12]
     a90:	ldr	r2, [fp, #-24]	; 0xffffffe8
     a94:	add	r3, r2, r3
     a98:	mov	r2, #0
     a9c:	strb	r2, [r3]
     aa0:	b	aa8 <clean_path+0x388>
     aa4:	nop			; (mov r0, r0)
     aa8:	add	sp, fp, #0
     aac:	pop	{fp}		; (ldr fp, [sp], #4)
     ab0:	bx	lr

00000ab4 <coda_path_find_file>:
     ab4:	push	{fp, lr}
     ab8:	add	fp, sp, #4
     abc:	sub	sp, sp, #144	; 0x90
     ac0:	str	r0, [fp, #-136]	; 0xffffff78
     ac4:	str	r1, [fp, #-140]	; 0xffffff74
     ac8:	str	r2, [fp, #-144]	; 0xffffff70
     acc:	mov	r3, #58	; 0x3a
     ad0:	strb	r3, [fp, #-21]	; 0xffffffeb
     ad4:	mov	r3, #0
     ad8:	str	r3, [fp, #-12]
     adc:	mov	r3, #0
     ae0:	str	r3, [fp, #-16]
     ae4:	ldr	r0, [fp, #-140]	; 0xffffff74
     ae8:	bl	0 <strlen>
     aec:	mov	r3, r0
     af0:	str	r3, [fp, #-28]	; 0xffffffe4
     af4:	ldr	r3, [fp, #-136]	; 0xffffff78
     af8:	cmp	r3, #0
     afc:	beq	b10 <coda_path_find_file+0x5c>
     b00:	ldr	r3, [fp, #-136]	; 0xffffff78
     b04:	ldrb	r3, [r3]
     b08:	cmp	r3, #0
     b0c:	bne	b24 <coda_path_find_file+0x70>
     b10:	ldr	r3, [fp, #-144]	; 0xffffff70
     b14:	mov	r2, #0
     b18:	str	r2, [r3]
     b1c:	mov	r3, #0
     b20:	b	d10 <coda_path_find_file+0x25c>
     b24:	ldr	r0, [fp, #-136]	; 0xffffff78
     b28:	bl	0 <strdup>
     b2c:	mov	r3, r0
     b30:	str	r3, [fp, #-32]	; 0xffffffe0
     b34:	ldr	r3, [fp, #-32]	; 0xffffffe0
     b38:	cmp	r3, #0
     b3c:	bne	b5c <coda_path_find_file+0xa8>
     b40:	ldr	r3, [pc, #468]	; d1c <coda_path_find_file+0x268>
     b44:	ldr	r2, [pc, #468]	; d20 <coda_path_find_file+0x26c>
     b48:	ldr	r1, [pc, #468]	; d24 <coda_path_find_file+0x270>
     b4c:	mvn	r0, #0
     b50:	bl	0 <coda_set_error>
     b54:	mvn	r3, #0
     b58:	b	d10 <coda_path_find_file+0x25c>
     b5c:	ldr	r3, [fp, #-32]	; 0xffffffe0
     b60:	str	r3, [fp, #-8]
     b64:	b	cd4 <coda_path_find_file+0x220>
     b68:	ldr	r3, [fp, #-8]
     b6c:	str	r3, [fp, #-20]	; 0xffffffec
     b70:	b	b80 <coda_path_find_file+0xcc>
     b74:	ldr	r3, [fp, #-20]	; 0xffffffec
     b78:	add	r3, r3, #1
     b7c:	str	r3, [fp, #-20]	; 0xffffffec
     b80:	ldr	r3, [fp, #-20]	; 0xffffffec
     b84:	ldrb	r3, [r3]
     b88:	cmp	r3, #0
     b8c:	beq	ba4 <coda_path_find_file+0xf0>
     b90:	ldr	r3, [fp, #-20]	; 0xffffffec
     b94:	ldrb	r3, [r3]
     b98:	ldrb	r2, [fp, #-21]	; 0xffffffeb
     b9c:	cmp	r2, r3
     ba0:	bne	b74 <coda_path_find_file+0xc0>
     ba4:	ldr	r3, [fp, #-20]	; 0xffffffec
     ba8:	ldrb	r3, [r3]
     bac:	cmp	r3, #0
     bb0:	beq	bcc <coda_path_find_file+0x118>
     bb4:	ldr	r3, [fp, #-20]	; 0xffffffec
     bb8:	mov	r2, #0
     bbc:	strb	r2, [r3]
     bc0:	ldr	r3, [fp, #-20]	; 0xffffffec
     bc4:	add	r3, r3, #1
     bc8:	str	r3, [fp, #-20]	; 0xffffffec
     bcc:	ldr	r0, [fp, #-8]
     bd0:	bl	0 <strlen>
     bd4:	mov	r3, r0
     bd8:	str	r3, [fp, #-36]	; 0xffffffdc
     bdc:	ldr	r2, [fp, #-36]	; 0xffffffdc
     be0:	ldr	r3, [fp, #-28]	; 0xffffffe4
     be4:	add	r3, r2, r3
     be8:	add	r2, r3, #1
     bec:	ldr	r3, [fp, #-16]
     bf0:	cmp	r2, r3
     bf4:	ble	c70 <coda_path_find_file+0x1bc>
     bf8:	ldr	r2, [fp, #-36]	; 0xffffffdc
     bfc:	ldr	r3, [fp, #-28]	; 0xffffffe4
     c00:	add	r3, r2, r3
     c04:	add	r3, r3, #2
     c08:	mov	r1, r3
     c0c:	ldr	r0, [fp, #-12]
     c10:	bl	0 <realloc>
     c14:	str	r0, [fp, #-40]	; 0xffffffd8
     c18:	ldr	r3, [fp, #-40]	; 0xffffffd8
     c1c:	cmp	r3, #0
     c20:	bne	c54 <coda_path_find_file+0x1a0>
     c24:	ldr	r3, [pc, #252]	; d28 <coda_path_find_file+0x274>
     c28:	ldr	r2, [pc, #240]	; d20 <coda_path_find_file+0x26c>
     c2c:	ldr	r1, [pc, #240]	; d24 <coda_path_find_file+0x270>
     c30:	mvn	r0, #0
     c34:	bl	0 <coda_set_error>
     c38:	ldr	r3, [fp, #-12]
     c3c:	cmp	r3, #0
     c40:	beq	c4c <coda_path_find_file+0x198>
     c44:	ldr	r0, [fp, #-12]
     c48:	bl	0 <free>
     c4c:	mvn	r3, #0
     c50:	b	d10 <coda_path_find_file+0x25c>
     c54:	ldr	r3, [fp, #-40]	; 0xffffffd8
     c58:	str	r3, [fp, #-12]
     c5c:	ldr	r2, [fp, #-36]	; 0xffffffdc
     c60:	ldr	r3, [fp, #-28]	; 0xffffffe4
     c64:	add	r3, r2, r3
     c68:	add	r3, r3, #1
     c6c:	str	r3, [fp, #-16]
     c70:	ldr	r3, [fp, #-140]	; 0xffffff74
     c74:	ldr	r2, [fp, #-8]
     c78:	ldr	r1, [pc, #172]	; d2c <coda_path_find_file+0x278>
     c7c:	ldr	r0, [fp, #-12]
     c80:	bl	0 <sprintf>
     c84:	sub	r3, fp, #132	; 0x84
     c88:	mov	r1, r3
     c8c:	ldr	r0, [fp, #-12]
     c90:	bl	0 <stat>
     c94:	mov	r3, r0
     c98:	cmp	r3, #0
     c9c:	bne	ccc <coda_path_find_file+0x218>
     ca0:	ldr	r3, [fp, #-116]	; 0xffffff8c
     ca4:	and	r3, r3, #32768	; 0x8000
     ca8:	cmp	r3, #0
     cac:	beq	ccc <coda_path_find_file+0x218>
     cb0:	ldr	r3, [fp, #-144]	; 0xffffff70
     cb4:	ldr	r2, [fp, #-12]
     cb8:	str	r2, [r3]
     cbc:	ldr	r0, [fp, #-32]	; 0xffffffe0
     cc0:	bl	0 <free>
     cc4:	mov	r3, #0
     cc8:	b	d10 <coda_path_find_file+0x25c>
     ccc:	ldr	r3, [fp, #-20]	; 0xffffffec
     cd0:	str	r3, [fp, #-8]
     cd4:	ldr	r3, [fp, #-8]
     cd8:	ldrb	r3, [r3]
     cdc:	cmp	r3, #0
     ce0:	bne	b68 <coda_path_find_file+0xb4>
     ce4:	ldr	r3, [fp, #-12]
     ce8:	cmp	r3, #0
     cec:	beq	cf8 <coda_path_find_file+0x244>
     cf0:	ldr	r0, [fp, #-12]
     cf4:	bl	0 <free>
     cf8:	ldr	r0, [fp, #-32]	; 0xffffffe0
     cfc:	bl	0 <free>
     d00:	ldr	r3, [fp, #-144]	; 0xffffff70
     d04:	mov	r2, #0
     d08:	str	r2, [r3]
     d0c:	mov	r3, #0
     d10:	mov	r0, r3
     d14:	sub	sp, fp, #4
     d18:	pop	{fp, pc}
     d1c:	.word	0x00000187
     d20:	.word	0x00000074
     d24:	.word	0x00000138
     d28:	.word	0x000001a5
     d2c:	.word	0x0000016c

00000d30 <coda_path_from_path>:
     d30:	push	{fp, lr}
     d34:	add	fp, sp, #4
     d38:	sub	sp, sp, #32
     d3c:	str	r0, [fp, #-24]	; 0xffffffe8
     d40:	str	r1, [fp, #-28]	; 0xffffffe4
     d44:	str	r2, [fp, #-32]	; 0xffffffe0
     d48:	str	r3, [fp, #-36]	; 0xffffffdc
     d4c:	ldr	r0, [fp, #-24]	; 0xffffffe8
     d50:	bl	0 <strlen>
     d54:	mov	r3, r0
     d58:	str	r3, [fp, #-12]
     d5c:	ldr	r3, [fp, #-32]	; 0xffffffe0
     d60:	cmp	r3, #0
     d64:	beq	d78 <coda_path_from_path+0x48>
     d68:	ldr	r0, [fp, #-32]	; 0xffffffe0
     d6c:	bl	0 <strlen>
     d70:	mov	r3, r0
     d74:	b	d7c <coda_path_from_path+0x4c>
     d78:	mov	r3, #0
     d7c:	str	r3, [fp, #-16]
     d80:	ldr	r3, [fp, #-28]	; 0xffffffe4
     d84:	cmp	r3, #0
     d88:	beq	dec <coda_path_from_path+0xbc>
     d8c:	ldr	r3, [fp, #-12]
     d90:	cmp	r3, #0
     d94:	ble	dec <coda_path_from_path+0xbc>
     d98:	b	da8 <coda_path_from_path+0x78>
     d9c:	ldr	r3, [fp, #-12]
     da0:	sub	r3, r3, #1
     da4:	str	r3, [fp, #-12]
     da8:	ldr	r3, [fp, #-12]
     dac:	cmp	r3, #0
     db0:	ble	dec <coda_path_from_path+0xbc>
     db4:	ldr	r3, [fp, #-12]
     db8:	sub	r3, r3, #1
     dbc:	ldr	r2, [fp, #-24]	; 0xffffffe8
     dc0:	add	r3, r2, r3
     dc4:	ldrb	r3, [r3]
     dc8:	cmp	r3, #47	; 0x2f
     dcc:	beq	dec <coda_path_from_path+0xbc>
     dd0:	ldr	r3, [fp, #-12]
     dd4:	sub	r3, r3, #1
     dd8:	ldr	r2, [fp, #-24]	; 0xffffffe8
     ddc:	add	r3, r2, r3
     de0:	ldrb	r3, [r3]
     de4:	cmp	r3, #92	; 0x5c
     de8:	bne	d9c <coda_path_from_path+0x6c>
     dec:	ldr	r3, [fp, #-12]
     df0:	add	r2, r3, #1
     df4:	ldr	r3, [fp, #-16]
     df8:	add	r3, r2, r3
     dfc:	add	r3, r3, #1
     e00:	mov	r0, r3
     e04:	bl	0 <malloc>
     e08:	mov	r3, r0
     e0c:	mov	r2, r3
     e10:	ldr	r3, [fp, #-36]	; 0xffffffdc
     e14:	str	r2, [r3]
     e18:	ldr	r3, [fp, #-36]	; 0xffffffdc
     e1c:	ldr	r3, [r3]
     e20:	cmp	r3, #0
     e24:	bne	e44 <coda_path_from_path+0x114>
     e28:	ldr	r3, [pc, #208]	; f00 <coda_path_from_path+0x1d0>
     e2c:	ldr	r2, [pc, #208]	; f04 <coda_path_from_path+0x1d4>
     e30:	ldr	r1, [pc, #208]	; f08 <coda_path_from_path+0x1d8>
     e34:	mvn	r0, #0
     e38:	bl	0 <coda_set_error>
     e3c:	mvn	r3, #0
     e40:	b	ef4 <coda_path_from_path+0x1c4>
     e44:	ldr	r3, [fp, #-36]	; 0xffffffdc
     e48:	ldr	r3, [r3]
     e4c:	str	r3, [fp, #-8]
     e50:	ldr	r3, [fp, #-12]
     e54:	cmp	r3, #0
     e58:	ble	ea4 <coda_path_from_path+0x174>
     e5c:	ldr	r3, [fp, #-12]
     e60:	mov	r2, r3
     e64:	ldr	r1, [fp, #-24]	; 0xffffffe8
     e68:	ldr	r0, [fp, #-8]
     e6c:	bl	0 <memcpy>
     e70:	ldr	r3, [fp, #-12]
     e74:	ldr	r2, [fp, #-8]
     e78:	add	r3, r2, r3
     e7c:	str	r3, [fp, #-8]
     e80:	ldr	r3, [fp, #-16]
     e84:	cmp	r3, #0
     e88:	ble	ea4 <coda_path_from_path+0x174>
     e8c:	ldr	r3, [fp, #-8]
     e90:	mov	r2, #47	; 0x2f
     e94:	strb	r2, [r3]
     e98:	ldr	r3, [fp, #-8]
     e9c:	add	r3, r3, #1
     ea0:	str	r3, [fp, #-8]
     ea4:	ldr	r3, [fp, #-16]
     ea8:	cmp	r3, #0
     eac:	ble	ed4 <coda_path_from_path+0x1a4>
     eb0:	ldr	r3, [fp, #-16]
     eb4:	mov	r2, r3
     eb8:	ldr	r1, [fp, #-32]	; 0xffffffe0
     ebc:	ldr	r0, [fp, #-8]
     ec0:	bl	0 <memcpy>
     ec4:	ldr	r3, [fp, #-16]
     ec8:	ldr	r2, [fp, #-8]
     ecc:	add	r3, r2, r3
     ed0:	str	r3, [fp, #-8]
     ed4:	ldr	r3, [fp, #-8]
     ed8:	mov	r2, #0
     edc:	strb	r2, [r3]
     ee0:	ldr	r3, [fp, #-36]	; 0xffffffdc
     ee4:	ldr	r3, [r3]
     ee8:	mov	r0, r3
     eec:	bl	720 <clean_path>
     ef0:	mov	r3, #0
     ef4:	mov	r0, r3
     ef8:	sub	sp, fp, #4
     efc:	pop	{fp, pc}
     f00:	.word	0x000001e1
     f04:	.word	0x00000074
     f08:	.word	0x00000138

00000f0c <coda_path_for_program>:
     f0c:	push	{fp, lr}
     f10:	add	fp, sp, #4
     f14:	sub	sp, sp, #1040	; 0x410
     f18:	sub	sp, sp, #8
     f1c:	str	r0, [fp, #-1048]	; 0xfffffbe8
     f20:	str	r1, [fp, #-1052]	; 0xfffffbe4
     f24:	mov	r3, #0
     f28:	str	r3, [fp, #-12]
     f2c:	ldr	r3, [fp, #-1052]	; 0xfffffbe4
     f30:	mov	r2, #0
     f34:	str	r2, [r3]
     f38:	ldr	r3, [fp, #-1048]	; 0xfffffbe8
     f3c:	cmp	r3, #0
     f40:	bne	f4c <coda_path_for_program+0x40>
     f44:	mov	r3, #0
     f48:	b	113c <coda_path_for_program+0x230>
     f4c:	ldr	r3, [fp, #-1048]	; 0xfffffbe8
     f50:	str	r3, [fp, #-8]
     f54:	b	f90 <coda_path_for_program+0x84>
     f58:	ldr	r3, [fp, #-8]
     f5c:	ldrb	r3, [r3]
     f60:	cmp	r3, #47	; 0x2f
     f64:	beq	f78 <coda_path_for_program+0x6c>
     f68:	ldr	r3, [fp, #-8]
     f6c:	ldrb	r3, [r3]
     f70:	cmp	r3, #92	; 0x5c
     f74:	bne	f84 <coda_path_for_program+0x78>
     f78:	mov	r3, #1
     f7c:	str	r3, [fp, #-12]
     f80:	b	fa0 <coda_path_for_program+0x94>
     f84:	ldr	r3, [fp, #-8]
     f88:	add	r3, r3, #1
     f8c:	str	r3, [fp, #-8]
     f90:	ldr	r3, [fp, #-8]
     f94:	ldrb	r3, [r3]
     f98:	cmp	r3, #0
     f9c:	bne	f58 <coda_path_for_program+0x4c>
     fa0:	ldr	r3, [fp, #-12]
     fa4:	cmp	r3, #0
     fa8:	beq	ff0 <coda_path_for_program+0xe4>
     fac:	ldr	r0, [fp, #-1048]	; 0xfffffbe8
     fb0:	bl	0 <strdup>
     fb4:	mov	r3, r0
     fb8:	mov	r2, r3
     fbc:	ldr	r3, [fp, #-1052]	; 0xfffffbe4
     fc0:	str	r2, [r3]
     fc4:	ldr	r3, [fp, #-1052]	; 0xfffffbe4
     fc8:	ldr	r3, [r3]
     fcc:	cmp	r3, #0
     fd0:	bne	1040 <coda_path_for_program+0x134>
     fd4:	ldr	r3, [pc, #364]	; 1148 <coda_path_for_program+0x23c>
     fd8:	ldr	r2, [pc, #364]	; 114c <coda_path_for_program+0x240>
     fdc:	ldr	r1, [pc, #364]	; 1150 <coda_path_for_program+0x244>
     fe0:	mvn	r0, #0
     fe4:	bl	0 <coda_set_error>
     fe8:	mvn	r3, #0
     fec:	b	113c <coda_path_for_program+0x230>
     ff0:	ldr	r0, [pc, #348]	; 1154 <coda_path_for_program+0x248>
     ff4:	bl	0 <getenv>
     ff8:	mov	r3, r0
     ffc:	cmp	r3, #0
    1000:	beq	1034 <coda_path_for_program+0x128>
    1004:	ldr	r0, [pc, #328]	; 1154 <coda_path_for_program+0x248>
    1008:	bl	0 <getenv>
    100c:	mov	r3, r0
    1010:	ldr	r2, [fp, #-1052]	; 0xfffffbe4
    1014:	ldr	r1, [fp, #-1048]	; 0xfffffbe8
    1018:	mov	r0, r3
    101c:	bl	ab4 <coda_path_find_file>
    1020:	mov	r3, r0
    1024:	cmp	r3, #0
    1028:	beq	1040 <coda_path_for_program+0x134>
    102c:	mvn	r3, #0
    1030:	b	113c <coda_path_for_program+0x230>
    1034:	ldr	r3, [fp, #-1052]	; 0xfffffbe4
    1038:	mov	r2, #0
    103c:	str	r2, [r3]
    1040:	ldr	r3, [fp, #-1052]	; 0xfffffbe4
    1044:	ldr	r3, [r3]
    1048:	cmp	r3, #0
    104c:	beq	1138 <coda_path_for_program+0x22c>
    1050:	ldr	r3, [fp, #-1052]	; 0xfffffbe4
    1054:	ldr	r3, [r3]
    1058:	ldrb	r3, [r3]
    105c:	cmp	r3, #47	; 0x2f
    1060:	beq	1138 <coda_path_for_program+0x22c>
    1064:	ldr	r3, [fp, #-1052]	; 0xfffffbe4
    1068:	ldr	r3, [r3]
    106c:	ldrb	r3, [r3]
    1070:	cmp	r3, #92	; 0x5c
    1074:	beq	1138 <coda_path_for_program+0x22c>
    1078:	bl	0 <__ctype_b_loc>
    107c:	mov	r3, r0
    1080:	ldr	r2, [r3]
    1084:	ldr	r3, [fp, #-1052]	; 0xfffffbe4
    1088:	ldr	r3, [r3]
    108c:	ldrb	r3, [r3]
    1090:	lsl	r3, r3, #1
    1094:	add	r3, r2, r3
    1098:	ldrh	r3, [r3]
    109c:	and	r3, r3, #1024	; 0x400
    10a0:	cmp	r3, #0
    10a4:	beq	10c0 <coda_path_for_program+0x1b4>
    10a8:	ldr	r3, [fp, #-1052]	; 0xfffffbe4
    10ac:	ldr	r3, [r3]
    10b0:	add	r3, r3, #1
    10b4:	ldrb	r3, [r3]
    10b8:	cmp	r3, #58	; 0x3a
    10bc:	beq	1138 <coda_path_for_program+0x22c>
    10c0:	sub	r3, fp, #1040	; 0x410
    10c4:	sub	r3, r3, #4
    10c8:	mov	r1, #1024	; 0x400
    10cc:	mov	r0, r3
    10d0:	bl	0 <getcwd>
    10d4:	mov	r3, r0
    10d8:	cmp	r3, #0
    10dc:	bne	10e8 <coda_path_for_program+0x1dc>
    10e0:	mov	r3, #0
    10e4:	b	113c <coda_path_for_program+0x230>
    10e8:	mov	r3, #0
    10ec:	strb	r3, [fp, #-20]	; 0xffffffec
    10f0:	ldr	r3, [fp, #-1052]	; 0xfffffbe4
    10f4:	ldr	r3, [r3]
    10f8:	str	r3, [fp, #-16]
    10fc:	sub	r0, fp, #1040	; 0x410
    1100:	sub	r0, r0, #4
    1104:	ldr	r3, [fp, #-1052]	; 0xfffffbe4
    1108:	ldr	r2, [fp, #-16]
    110c:	mov	r1, #0
    1110:	bl	d30 <coda_path_from_path>
    1114:	mov	r3, r0
    1118:	cmp	r3, #0
    111c:	beq	1130 <coda_path_for_program+0x224>
    1120:	ldr	r0, [fp, #-16]
    1124:	bl	0 <free>
    1128:	mvn	r3, #0
    112c:	b	113c <coda_path_for_program+0x230>
    1130:	ldr	r0, [fp, #-16]
    1134:	bl	0 <free>
    1138:	mov	r3, #0
    113c:	mov	r0, r3
    1140:	sub	sp, fp, #4
    1144:	pop	{fp, pc}
    1148:	.word	0x00000219
    114c:	.word	0x00000074
    1150:	.word	0x00000138
    1154:	.word	0x00000174

00001158 <coda_isNaN>:
    1158:	push	{r4, r5, fp}
    115c:	add	fp, sp, #8
    1160:	sub	sp, sp, #36	; 0x24
    1164:	vstr	d0, [fp, #-44]	; 0xffffffd4
    1168:	ldrd	r4, [fp, #-44]	; 0xffffffd4
    116c:	strd	r4, [fp, #-36]	; 0xffffffdc
    1170:	ldr	r4, [pc, #156]	; 1214 <coda_isNaN+0xbc>
    1174:	mov	r5, #0
    1178:	strd	r4, [fp, #-20]	; 0xffffffec
    117c:	ldrd	r4, [fp, #-20]	; 0xffffffec
    1180:	lsl	r1, r4, #16
    1184:	mov	r0, #0
    1188:	strd	r0, [fp, #-20]	; 0xffffffec
    118c:	ldrd	r4, [fp, #-36]	; 0xffffffdc
    1190:	ldrd	r0, [fp, #-20]	; 0xffffffec
    1194:	and	r4, r4, r0
    1198:	and	r5, r5, r1
    119c:	ldrd	r0, [fp, #-20]	; 0xffffffec
    11a0:	cmp	r5, r1
    11a4:	cmpeq	r4, r0
    11a8:	beq	11b4 <coda_isNaN+0x5c>
    11ac:	mov	r3, #0
    11b0:	b	1204 <coda_isNaN+0xac>
    11b4:	mov	r0, #1
    11b8:	mov	r1, #0
    11bc:	strd	r0, [fp, #-28]	; 0xffffffe4
    11c0:	ldrd	r0, [fp, #-28]	; 0xffffffe4
    11c4:	lsl	r3, r0, #20
    11c8:	mov	r2, #0
    11cc:	strd	r2, [fp, #-28]	; 0xffffffe4
    11d0:	ldrd	r2, [fp, #-28]	; 0xffffffe4
    11d4:	subs	r2, r2, #1
    11d8:	sbc	r3, r3, #0
    11dc:	strd	r2, [fp, #-28]	; 0xffffffe4
    11e0:	ldrd	r0, [fp, #-36]	; 0xffffffdc
    11e4:	ldrd	r2, [fp, #-28]	; 0xffffffe4
    11e8:	and	r2, r2, r0
    11ec:	and	r3, r3, r1
    11f0:	orr	r3, r2, r3
    11f4:	cmp	r3, #0
    11f8:	movne	r3, #1
    11fc:	moveq	r3, #0
    1200:	uxtb	r3, r3
    1204:	mov	r0, r3
    1208:	sub	sp, fp, #8
    120c:	pop	{r4, r5, fp}
    1210:	bx	lr
    1214:	.word	0x00007ff0

00001218 <coda_NaN>:
    1218:	push	{fp}		; (str fp, [sp, #-4]!)
    121c:	add	fp, sp, #0
    1220:	sub	sp, sp, #12
    1224:	ldr	r0, [pc, #44]	; 1258 <coda_NaN+0x40>
    1228:	mov	r1, #0
    122c:	strd	r0, [fp, #-12]
    1230:	ldrd	r0, [fp, #-12]
    1234:	lsl	r3, r0, #16
    1238:	mov	r2, #0
    123c:	strd	r2, [fp, #-12]
    1240:	ldrd	r2, [fp, #-12]
    1244:	vmov	d7, r2, r3
    1248:	vmov.f64	d0, d7
    124c:	add	sp, fp, #0
    1250:	pop	{fp}		; (ldr fp, [sp], #4)
    1254:	bx	lr
    1258:	.word	0x00007ff8

0000125c <coda_isInf>:
    125c:	push	{fp, lr}
    1260:	add	fp, sp, #4
    1264:	sub	sp, sp, #8
    1268:	vstr	d0, [fp, #-12]
    126c:	vldr	d0, [fp, #-12]
    1270:	bl	12ac <coda_isPlusInf>
    1274:	mov	r3, r0
    1278:	cmp	r3, #0
    127c:	bne	1294 <coda_isInf+0x38>
    1280:	vldr	d0, [fp, #-12]
    1284:	bl	1310 <coda_isMinInf>
    1288:	mov	r3, r0
    128c:	cmp	r3, #0
    1290:	beq	129c <coda_isInf+0x40>
    1294:	mov	r3, #1
    1298:	b	12a0 <coda_isInf+0x44>
    129c:	mov	r3, #0
    12a0:	mov	r0, r3
    12a4:	sub	sp, fp, #4
    12a8:	pop	{fp, pc}

000012ac <coda_isPlusInf>:
    12ac:	push	{fp}		; (str fp, [sp, #-4]!)
    12b0:	add	fp, sp, #0
    12b4:	sub	sp, sp, #28
    12b8:	vstr	d0, [fp, #-28]	; 0xffffffe4
    12bc:	ldrd	r0, [fp, #-28]	; 0xffffffe4
    12c0:	strd	r0, [fp, #-20]	; 0xffffffec
    12c4:	ldr	r0, [pc, #64]	; 130c <coda_isPlusInf+0x60>
    12c8:	mov	r1, #0
    12cc:	strd	r0, [fp, #-12]
    12d0:	ldrd	r0, [fp, #-12]
    12d4:	lsl	r3, r0, #16
    12d8:	mov	r2, #0
    12dc:	strd	r2, [fp, #-12]
    12e0:	ldrd	r0, [fp, #-20]	; 0xffffffec
    12e4:	ldrd	r2, [fp, #-12]
    12e8:	cmp	r1, r3
    12ec:	cmpeq	r0, r2
    12f0:	moveq	r3, #1
    12f4:	movne	r3, #0
    12f8:	uxtb	r3, r3
    12fc:	mov	r0, r3
    1300:	add	sp, fp, #0
    1304:	pop	{fp}		; (ldr fp, [sp], #4)
    1308:	bx	lr
    130c:	.word	0x00007ff0

00001310 <coda_isMinInf>:
    1310:	push	{fp}		; (str fp, [sp, #-4]!)
    1314:	add	fp, sp, #0
    1318:	sub	sp, sp, #28
    131c:	vstr	d0, [fp, #-28]	; 0xffffffe4
    1320:	ldrd	r0, [fp, #-28]	; 0xffffffe4
    1324:	strd	r0, [fp, #-20]	; 0xffffffec
    1328:	ldr	r0, [pc, #64]	; 1370 <coda_isMinInf+0x60>
    132c:	mov	r1, #0
    1330:	strd	r0, [fp, #-12]
    1334:	ldrd	r0, [fp, #-12]
    1338:	lsl	r3, r0, #16
    133c:	mov	r2, #0
    1340:	strd	r2, [fp, #-12]
    1344:	ldrd	r0, [fp, #-20]	; 0xffffffec
    1348:	ldrd	r2, [fp, #-12]
    134c:	cmp	r1, r3
    1350:	cmpeq	r0, r2
    1354:	moveq	r3, #1
    1358:	movne	r3, #0
    135c:	uxtb	r3, r3
    1360:	mov	r0, r3
    1364:	add	sp, fp, #0
    1368:	pop	{fp}		; (ldr fp, [sp], #4)
    136c:	bx	lr
    1370:	.word	0x0000fff0

00001374 <coda_PlusInf>:
    1374:	push	{fp}		; (str fp, [sp, #-4]!)
    1378:	add	fp, sp, #0
    137c:	sub	sp, sp, #12
    1380:	ldr	r0, [pc, #44]	; 13b4 <coda_PlusInf+0x40>
    1384:	mov	r1, #0
    1388:	strd	r0, [fp, #-12]
    138c:	ldrd	r0, [fp, #-12]
    1390:	lsl	r3, r0, #16
    1394:	mov	r2, #0
    1398:	strd	r2, [fp, #-12]
    139c:	ldrd	r2, [fp, #-12]
    13a0:	vmov	d7, r2, r3
    13a4:	vmov.f64	d0, d7
    13a8:	add	sp, fp, #0
    13ac:	pop	{fp}		; (ldr fp, [sp], #4)
    13b0:	bx	lr
    13b4:	.word	0x00007ff0

000013b8 <coda_MinInf>:
    13b8:	push	{fp}		; (str fp, [sp, #-4]!)
    13bc:	add	fp, sp, #0
    13c0:	sub	sp, sp, #12
    13c4:	ldr	r0, [pc, #44]	; 13f8 <coda_MinInf+0x40>
    13c8:	mov	r1, #0
    13cc:	strd	r0, [fp, #-12]
    13d0:	ldrd	r0, [fp, #-12]
    13d4:	lsl	r3, r0, #16
    13d8:	mov	r2, #0
    13dc:	strd	r2, [fp, #-12]
    13e0:	ldrd	r2, [fp, #-12]
    13e4:	vmov	d7, r2, r3
    13e8:	vmov.f64	d0, d7
    13ec:	add	sp, fp, #0
    13f0:	pop	{fp}		; (ldr fp, [sp], #4)
    13f4:	bx	lr
    13f8:	.word	0x0000fff0

000013fc <coda_str64>:
    13fc:	push	{fp, lr}
    1400:	add	fp, sp, #4
    1404:	sub	sp, sp, #16
    1408:	strd	r0, [fp, #-12]
    140c:	str	r2, [fp, #-16]
    1410:	ldrd	r2, [fp, #-12]
    1414:	cmp	r2, #0
    1418:	sbcs	r3, r3, #0
    141c:	bge	1454 <coda_str64+0x58>
    1420:	ldr	r3, [fp, #-16]
    1424:	mov	r2, #45	; 0x2d
    1428:	strb	r2, [r3]
    142c:	ldrd	r2, [fp, #-12]
    1430:	rsbs	r2, r2, #0
    1434:	rsc	r3, r3, #0
    1438:	mov	r0, r2
    143c:	mov	r1, r3
    1440:	ldr	r3, [fp, #-16]
    1444:	add	r3, r3, #1
    1448:	mov	r2, r3
    144c:	bl	146c <coda_str64u>
    1450:	b	1460 <coda_str64+0x64>
    1454:	ldrd	r0, [fp, #-12]
    1458:	ldr	r2, [fp, #-16]
    145c:	bl	146c <coda_str64u>
    1460:	nop			; (mov r0, r0)
    1464:	sub	sp, fp, #4
    1468:	pop	{fp, pc}

0000146c <coda_str64u>:
    146c:	push	{fp, lr}
    1470:	add	fp, sp, #4
    1474:	sub	sp, sp, #32
    1478:	strd	r0, [fp, #-20]	; 0xffffffec
    147c:	str	r2, [fp, #-24]	; 0xffffffe8
    1480:	ldrd	r2, [fp, #-20]	; 0xffffffec
    1484:	mvn	r0, #0
    1488:	mov	r1, #0
    148c:	cmp	r3, r1
    1490:	cmpeq	r2, r0
    1494:	bhi	14b0 <coda_str64u+0x44>
    1498:	ldr	r3, [fp, #-20]	; 0xffffffec
    149c:	mov	r2, r3
    14a0:	ldr	r1, [pc, #200]	; 1570 <coda_str64u+0x104>
    14a4:	ldr	r0, [fp, #-24]	; 0xffffffe8
    14a8:	bl	0 <sprintf>
    14ac:	b	1558 <coda_str64u+0xec>
    14b0:	ldrd	r0, [fp, #-20]	; 0xffffffec
    14b4:	add	r3, pc, #172	; 0xac
    14b8:	ldrd	r2, [r3]
    14bc:	bl	0 <__aeabi_uldivmod>
    14c0:	mov	r3, r2
    14c4:	str	r3, [fp, #-8]
    14c8:	ldrd	r0, [fp, #-20]	; 0xffffffec
    14cc:	add	r3, pc, #148	; 0x94
    14d0:	ldrd	r2, [r3]
    14d4:	bl	0 <__aeabi_uldivmod>
    14d8:	mov	r2, r0
    14dc:	mov	r3, r1
    14e0:	strd	r2, [fp, #-20]	; 0xffffffec
    14e4:	ldrd	r0, [fp, #-20]	; 0xffffffec
    14e8:	add	r3, pc, #120	; 0x78
    14ec:	ldrd	r2, [r3]
    14f0:	bl	0 <__aeabi_uldivmod>
    14f4:	mov	r3, r2
    14f8:	str	r3, [fp, #-12]
    14fc:	ldrd	r0, [fp, #-20]	; 0xffffffec
    1500:	add	r3, pc, #96	; 0x60
    1504:	ldrd	r2, [r3]
    1508:	bl	0 <__aeabi_uldivmod>
    150c:	mov	r2, r0
    1510:	mov	r3, r1
    1514:	strd	r2, [fp, #-20]	; 0xffffffec
    1518:	ldrd	r2, [fp, #-20]	; 0xffffffec
    151c:	orrs	r3, r2, r3
    1520:	beq	1544 <coda_str64u+0xd8>
    1524:	ldr	r2, [fp, #-20]	; 0xffffffec
    1528:	ldr	r3, [fp, #-8]
    152c:	str	r3, [sp]
    1530:	ldr	r3, [fp, #-12]
    1534:	ldr	r1, [pc, #56]	; 1574 <coda_str64u+0x108>
    1538:	ldr	r0, [fp, #-24]	; 0xffffffe8
    153c:	bl	0 <sprintf>
    1540:	b	1558 <coda_str64u+0xec>
    1544:	ldr	r3, [fp, #-8]
    1548:	ldr	r2, [fp, #-12]
    154c:	ldr	r1, [pc, #36]	; 1578 <coda_str64u+0x10c>
    1550:	ldr	r0, [fp, #-24]	; 0xffffffe8
    1554:	bl	0 <sprintf>
    1558:	nop			; (mov r0, r0)
    155c:	sub	sp, fp, #4
    1560:	pop	{fp, pc}
    1564:	nop			; (mov r0, r0)
    1568:	.word	0x05f5e100
    156c:	.word	0x00000000
    1570:	.word	0x0000017c
    1574:	.word	0x00000180
    1578:	.word	0x00000190

0000157c <coda_strfl>:
    157c:	push	{fp, lr}
    1580:	add	fp, sp, #4
    1584:	sub	sp, sp, #16
    1588:	vstr	d0, [fp, #-12]
    158c:	str	r0, [fp, #-16]
    1590:	vldr	d0, [fp, #-12]
    1594:	bl	1158 <coda_isNaN>
    1598:	mov	r3, r0
    159c:	cmp	r3, #0
    15a0:	beq	15b8 <coda_strfl+0x3c>
    15a4:	ldr	r3, [fp, #-16]
    15a8:	ldr	r2, [pc, #132]	; 1634 <coda_strfl+0xb8>
    15ac:	ldr	r0, [r2]
    15b0:	str	r0, [r3]
    15b4:	b	1628 <coda_strfl+0xac>
    15b8:	vldr	d0, [fp, #-12]
    15bc:	bl	12ac <coda_isPlusInf>
    15c0:	mov	r3, r0
    15c4:	cmp	r3, #0
    15c8:	beq	15e8 <coda_strfl+0x6c>
    15cc:	ldr	r3, [fp, #-16]
    15d0:	ldr	r2, [pc, #96]	; 1638 <coda_strfl+0xbc>
    15d4:	ldr	r0, [r2]
    15d8:	str	r0, [r3]
    15dc:	ldrb	r2, [r2, #4]
    15e0:	strb	r2, [r3, #4]
    15e4:	b	1628 <coda_strfl+0xac>
    15e8:	vldr	d0, [fp, #-12]
    15ec:	bl	1310 <coda_isMinInf>
    15f0:	mov	r3, r0
    15f4:	cmp	r3, #0
    15f8:	beq	1618 <coda_strfl+0x9c>
    15fc:	ldr	r3, [fp, #-16]
    1600:	ldr	r2, [pc, #52]	; 163c <coda_strfl+0xc0>
    1604:	ldr	r0, [r2]
    1608:	str	r0, [r3]
    160c:	ldrb	r2, [r2, #4]
    1610:	strb	r2, [r3, #4]
    1614:	b	1628 <coda_strfl+0xac>
    1618:	ldrd	r2, [fp, #-12]
    161c:	ldr	r1, [pc, #28]	; 1640 <coda_strfl+0xc4>
    1620:	ldr	r0, [fp, #-16]
    1624:	bl	0 <sprintf>
    1628:	nop			; (mov r0, r0)
    162c:	sub	sp, fp, #4
    1630:	pop	{fp, pc}
    1634:	.word	0x0000019c
    1638:	.word	0x000001a0
    163c:	.word	0x000001a8
    1640:	.word	0x000001b0
