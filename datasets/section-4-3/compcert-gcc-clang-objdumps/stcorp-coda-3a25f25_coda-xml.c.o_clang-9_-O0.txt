
../compcert-repos/stcorp-coda-3a25f25/CMakeFiles/coda_static.dir/libcoda/coda-xml.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <coda_xml_reopen>:
   0:	push	{fp, lr}
   4:	mov	fp, sp
   8:	sub	sp, sp, #16
   c:	str	r0, [sp, #8]
  10:	movw	r0, #56	; 0x38
  14:	bl	0 <malloc>
  18:	str	r0, [sp, #4]
  1c:	ldr	r0, [sp, #4]
  20:	movw	r1, #0
  24:	cmp	r0, r1
  28:	bne	68 <coda_xml_reopen+0x68>
  2c:	mvn	r0, #0
  30:	movw	r1, #0
  34:	movt	r1, #0
  38:	movw	r2, #56	; 0x38
  3c:	movw	r3, #0
  40:	movt	r3, #0
  44:	movw	ip, #53	; 0x35
  48:	str	ip, [sp]
  4c:	bl	0 <coda_set_error>
  50:	ldr	r0, [sp, #8]
  54:	ldr	r0, [r0]
  58:	bl	0 <coda_close>
  5c:	mvn	r1, #0
  60:	str	r1, [fp, #-4]
  64:	b	178 <coda_xml_reopen+0x178>
  68:	ldr	r0, [sp, #4]
  6c:	mov	r1, #0
  70:	str	r1, [r0]
  74:	ldr	r0, [sp, #8]
  78:	ldr	r0, [r0]
  7c:	ldr	r2, [r0, #8]
  80:	ldr	r0, [r0, #12]
  84:	ldr	r3, [sp, #4]
  88:	str	r0, [r3, #12]
  8c:	str	r2, [r3, #8]
  90:	ldr	r0, [sp, #4]
  94:	mov	r2, #2
  98:	str	r2, [r0, #16]
  9c:	ldr	r0, [sp, #4]
  a0:	str	r1, [r0, #20]
  a4:	ldr	r0, [sp, #4]
  a8:	str	r1, [r0, #24]
  ac:	ldr	r0, [sp, #4]
  b0:	str	r1, [r0, #28]
  b4:	ldr	r0, [sp, #4]
  b8:	str	r1, [r0, #32]
  bc:	ldr	r0, [sp, #4]
  c0:	str	r1, [r0, #44]	; 0x2c
  c4:	str	r1, [r0, #40]	; 0x28
  c8:	ldr	r0, [sp, #4]
  cc:	movw	r1, #0
  d0:	str	r1, [r0, #48]	; 0x30
  d4:	ldr	r0, [sp, #8]
  d8:	ldr	r0, [r0]
  dc:	ldr	r1, [sp, #4]
  e0:	str	r0, [r1, #52]	; 0x34
  e4:	ldr	r0, [sp, #8]
  e8:	ldr	r0, [r0]
  ec:	ldr	r0, [r0]
  f0:	bl	0 <strdup>
  f4:	ldr	r1, [sp, #4]
  f8:	str	r0, [r1]
  fc:	ldr	r0, [sp, #4]
 100:	ldr	r0, [r0]
 104:	movw	r1, #0
 108:	cmp	r0, r1
 10c:	bne	140 <coda_xml_reopen+0x140>
 110:	mvn	r0, #0
 114:	movw	r1, #0
 118:	movt	r1, #0
 11c:	movw	r2, #0
 120:	movt	r2, #0
 124:	movw	r3, #72	; 0x48
 128:	bl	0 <coda_set_error>
 12c:	ldr	r0, [sp, #4]
 130:	bl	0 <coda_close>
 134:	mvn	r1, #0
 138:	str	r1, [fp, #-4]
 13c:	b	178 <coda_xml_reopen+0x178>
 140:	ldr	r0, [sp, #4]
 144:	bl	0 <coda_xml_parse>
 148:	cmp	r0, #0
 14c:	beq	164 <coda_xml_reopen+0x164>
 150:	ldr	r0, [sp, #4]
 154:	bl	0 <coda_close>
 158:	mvn	r1, #0
 15c:	str	r1, [fp, #-4]
 160:	b	178 <coda_xml_reopen+0x178>
 164:	ldr	r0, [sp, #4]
 168:	ldr	r1, [sp, #8]
 16c:	str	r0, [r1]
 170:	movw	r0, #0
 174:	str	r0, [fp, #-4]
 178:	ldr	r0, [fp, #-4]
 17c:	mov	sp, fp
 180:	pop	{fp, pc}

00000184 <coda_xml_reopen_with_definition>:
 184:	push	{fp, lr}
 188:	mov	fp, sp
 18c:	sub	sp, sp, #16
 190:	str	r0, [sp, #8]
 194:	str	r1, [sp, #4]
 198:	ldr	r0, [sp, #8]
 19c:	ldr	r0, [r0]
 1a0:	str	r0, [sp]
 1a4:	ldr	r0, [sp, #4]
 1a8:	movw	r1, #0
 1ac:	cmp	r0, r1
 1b0:	beq	1b8 <coda_xml_reopen_with_definition+0x34>
 1b4:	b	1d8 <coda_xml_reopen_with_definition+0x54>
 1b8:	movw	r0, #0
 1bc:	movt	r0, #0
 1c0:	movw	r1, #0
 1c4:	movt	r1, #0
 1c8:	movw	r2, #92	; 0x5c
 1cc:	movw	r3, #0
 1d0:	movt	r3, #0
 1d4:	bl	0 <__assert_fail>
 1d8:	ldr	r0, [sp]
 1dc:	ldr	r0, [r0, #16]
 1e0:	cmp	r0, #2
 1e4:	bne	1ec <coda_xml_reopen_with_definition+0x68>
 1e8:	b	20c <coda_xml_reopen_with_definition+0x88>
 1ec:	movw	r0, #0
 1f0:	movt	r0, #0
 1f4:	movw	r1, #0
 1f8:	movt	r1, #0
 1fc:	movw	r2, #93	; 0x5d
 200:	movw	r3, #0
 204:	movt	r3, #0
 208:	bl	0 <__assert_fail>
 20c:	ldr	r0, [sp, #4]
 210:	ldr	r0, [r0]
 214:	cmp	r0, #2
 218:	bne	220 <coda_xml_reopen_with_definition+0x9c>
 21c:	b	240 <coda_xml_reopen_with_definition+0xbc>
 220:	movw	r0, #0
 224:	movt	r0, #0
 228:	movw	r1, #0
 22c:	movt	r1, #0
 230:	movw	r2, #94	; 0x5e
 234:	movw	r3, #0
 238:	movt	r3, #0
 23c:	bl	0 <__assert_fail>
 240:	ldr	r0, [sp]
 244:	ldr	r0, [r0, #20]
 248:	bl	0 <coda_dynamic_type_delete>
 24c:	ldr	r0, [sp]
 250:	mov	r1, #0
 254:	str	r1, [r0, #20]
 258:	ldr	r0, [sp]
 25c:	str	r1, [r0, #44]	; 0x2c
 260:	str	r1, [r0, #40]	; 0x28
 264:	ldr	r0, [sp]
 268:	ldr	r0, [r0, #48]	; 0x30
 26c:	movw	r1, #0
 270:	cmp	r0, r1
 274:	beq	290 <coda_xml_reopen_with_definition+0x10c>
 278:	ldr	r0, [sp]
 27c:	ldr	r0, [r0, #48]	; 0x30
 280:	bl	0 <free>
 284:	ldr	r0, [sp]
 288:	movw	r1, #0
 28c:	str	r1, [r0, #48]	; 0x30
 290:	ldr	r0, [sp, #4]
 294:	ldr	r1, [sp]
 298:	str	r0, [r1, #24]
 29c:	ldr	r0, [sp]
 2a0:	bl	0 <coda_xml_parse>
 2a4:	cmp	r0, #0
 2a8:	beq	2b8 <coda_xml_reopen_with_definition+0x134>
 2ac:	mvn	r0, #0
 2b0:	str	r0, [fp, #-4]
 2b4:	b	2c0 <coda_xml_reopen_with_definition+0x13c>
 2b8:	movw	r0, #0
 2bc:	str	r0, [fp, #-4]
 2c0:	ldr	r0, [fp, #-4]
 2c4:	mov	sp, fp
 2c8:	pop	{fp, pc}

000002cc <coda_xml_close>:
 2cc:	push	{fp, lr}
 2d0:	mov	fp, sp
 2d4:	sub	sp, sp, #8
 2d8:	str	r0, [sp, #4]
 2dc:	ldr	r0, [sp, #4]
 2e0:	str	r0, [sp]
 2e4:	ldr	r0, [sp]
 2e8:	ldr	r0, [r0]
 2ec:	movw	r1, #0
 2f0:	cmp	r0, r1
 2f4:	beq	304 <coda_xml_close+0x38>
 2f8:	ldr	r0, [sp]
 2fc:	ldr	r0, [r0]
 300:	bl	0 <free>
 304:	ldr	r0, [sp]
 308:	ldr	r0, [r0, #20]
 30c:	movw	r1, #0
 310:	cmp	r0, r1
 314:	beq	324 <coda_xml_close+0x58>
 318:	ldr	r0, [sp]
 31c:	ldr	r0, [r0, #20]
 320:	bl	0 <coda_dynamic_type_delete>
 324:	ldr	r0, [sp]
 328:	ldr	r0, [r0, #48]	; 0x30
 32c:	movw	r1, #0
 330:	cmp	r0, r1
 334:	beq	344 <coda_xml_close+0x78>
 338:	ldr	r0, [sp]
 33c:	ldr	r0, [r0, #48]	; 0x30
 340:	bl	0 <free>
 344:	ldr	r0, [sp]
 348:	ldr	r0, [r0, #52]	; 0x34
 34c:	movw	r1, #0
 350:	cmp	r0, r1
 354:	beq	364 <coda_xml_close+0x98>
 358:	ldr	r0, [sp]
 35c:	ldr	r0, [r0, #52]	; 0x34
 360:	bl	0 <coda_bin_close>
 364:	ldr	r0, [sp]
 368:	bl	0 <free>
 36c:	movw	r0, #0
 370:	mov	sp, fp
 374:	pop	{fp, pc}

00000378 <coda_xml_cursor_set_product>:
 378:	sub	sp, sp, #8
 37c:	str	r0, [sp, #4]
 380:	str	r1, [sp]
 384:	ldr	r0, [sp]
 388:	ldr	r1, [sp, #4]
 38c:	str	r0, [r1]
 390:	ldr	r0, [sp, #4]
 394:	mov	r1, #1
 398:	str	r1, [r0, #4]
 39c:	ldr	r0, [sp]
 3a0:	ldr	r0, [r0, #20]
 3a4:	ldr	r1, [sp, #4]
 3a8:	str	r0, [r1, #8]
 3ac:	ldr	r0, [sp, #4]
 3b0:	mvn	r1, #0
 3b4:	str	r1, [r0, #12]
 3b8:	ldr	r0, [sp, #4]
 3bc:	mov	r1, #0
 3c0:	str	r1, [r0, #20]
 3c4:	str	r1, [r0, #16]
 3c8:	movw	r0, #0
 3cc:	add	sp, sp, #8
 3d0:	bx	lr
