
../compcert-repos/stcorp-coda-3a25f25/CMakeFiles/codaeval.dir/tools/codaeval/codaeval.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <callback>:
       0:	push	{fp, lr}
       4:	mov	fp, sp
       8:	sub	sp, sp, #32
       c:	str	r0, [fp, #-8]
      10:	str	r1, [fp, #-12]
      14:	str	r2, [sp, #16]
      18:	str	r3, [sp, #12]
      1c:	ldr	r0, [fp, #-12]
      20:	cmp	r0, #0
      24:	bne	50 <callback+0x50>
      28:	movw	r0, #0
      2c:	movt	r0, #0
      30:	ldr	r0, [r0]
      34:	ldr	r2, [sp, #16]
      38:	ldr	r3, [fp, #-8]
      3c:	movw	r1, #0
      40:	movt	r1, #0
      44:	bl	0 <fprintf>
      48:	str	r0, [sp, #8]
      4c:	b	b8 <callback+0xb8>
      50:	ldr	r0, [fp, #-12]
      54:	cmp	r0, #2
      58:	bne	80 <callback+0x80>
      5c:	movw	r0, #0
      60:	movt	r0, #0
      64:	ldr	r0, [r0]
      68:	ldr	r2, [fp, #-8]
      6c:	movw	r1, #0
      70:	movt	r1, #0
      74:	bl	0 <fprintf>
      78:	str	r0, [sp, #4]
      7c:	b	b4 <callback+0xb4>
      80:	ldr	r0, [fp, #-12]
      84:	cmp	r0, #1
      88:	bne	b0 <callback+0xb0>
      8c:	movw	r0, #0
      90:	movt	r0, #0
      94:	ldr	r0, [r0]
      98:	ldr	r2, [fp, #-8]
      9c:	ldr	r3, [sp, #16]
      a0:	movw	r1, #0
      a4:	movt	r1, #0
      a8:	bl	0 <fprintf>
      ac:	str	r0, [sp]
      b0:	b	b4 <callback+0xb4>
      b4:	b	b8 <callback+0xb8>
      b8:	ldr	r0, [fp, #-12]
      bc:	cmp	r0, #4
      c0:	bne	d4 <callback+0xd4>
      c4:	ldr	r0, [fp, #-8]
      c8:	bl	e8 <eval_expression_for_file>
      cc:	str	r0, [fp, #-4]
      d0:	b	dc <callback+0xdc>
      d4:	movw	r0, #0
      d8:	str	r0, [fp, #-4]
      dc:	ldr	r0, [fp, #-4]
      e0:	mov	sp, fp
      e4:	pop	{fp, pc}

000000e8 <eval_expression_for_file>:
      e8:	push	{r4, r5, fp, lr}
      ec:	add	fp, sp, #8
      f0:	sub	sp, sp, #568	; 0x238
      f4:	str	r0, [fp, #-16]
      f8:	movw	r0, #0
      fc:	str	r0, [fp, #-20]	; 0xffffffec
     100:	ldr	r0, [fp, #-16]
     104:	sub	r1, fp, #20
     108:	bl	0 <coda_open>
     10c:	cmp	r0, #0
     110:	beq	120 <eval_expression_for_file+0x38>
     114:	movw	r0, #1
     118:	str	r0, [fp, #-12]
     11c:	b	250 <eval_expression_for_file+0x168>
     120:	ldr	r1, [fp, #-20]	; 0xffffffec
     124:	add	r0, sp, #32
     128:	bl	0 <coda_cursor_set_product>
     12c:	cmp	r0, #0
     130:	beq	14c <eval_expression_for_file+0x64>
     134:	ldr	r0, [fp, #-20]	; 0xffffffec
     138:	bl	0 <coda_close>
     13c:	movw	lr, #1
     140:	str	lr, [fp, #-12]
     144:	str	r0, [sp, #28]
     148:	b	250 <eval_expression_for_file+0x168>
     14c:	movw	r0, #0
     150:	movt	r0, #0
     154:	ldr	r0, [r0]
     158:	movw	r1, #0
     15c:	cmp	r0, r1
     160:	beq	1dc <eval_expression_for_file+0xf4>
     164:	movw	r0, #0
     168:	movt	r0, #0
     16c:	ldr	r0, [r0]
     170:	add	r1, sp, #32
     174:	bl	0 <coda_expression_eval_node>
     178:	cmp	r0, #0
     17c:	beq	1d8 <eval_expression_for_file+0xf0>
     180:	movw	r0, #0
     184:	movt	r0, #0
     188:	ldr	r0, [r0]
     18c:	str	r0, [sp, #24]
     190:	bl	0 <coda_get_errno>
     194:	ldr	r0, [r0]
     198:	bl	0 <coda_errno_to_string>
     19c:	ldr	lr, [sp, #24]
     1a0:	str	r0, [sp, #20]
     1a4:	mov	r0, lr
     1a8:	movw	r1, #0
     1ac:	movt	r1, #0
     1b0:	ldr	r2, [sp, #20]
     1b4:	bl	0 <fprintf>
     1b8:	ldr	r1, [fp, #-20]	; 0xffffffec
     1bc:	str	r0, [sp, #16]
     1c0:	mov	r0, r1
     1c4:	bl	0 <coda_close>
     1c8:	movw	r1, #0
     1cc:	str	r1, [fp, #-12]
     1d0:	str	r0, [sp, #12]
     1d4:	b	250 <eval_expression_for_file+0x168>
     1d8:	b	1dc <eval_expression_for_file+0xf4>
     1dc:	add	r0, sp, #32
     1e0:	bl	9f4 <eval_expression>
     1e4:	cmp	r0, #0
     1e8:	beq	22c <eval_expression_for_file+0x144>
     1ec:	movw	r0, #0
     1f0:	movt	r0, #0
     1f4:	ldr	r0, [r0]
     1f8:	str	r0, [sp, #8]
     1fc:	bl	0 <coda_get_errno>
     200:	ldr	r0, [r0]
     204:	bl	0 <coda_errno_to_string>
     208:	ldr	r3, [fp, #-16]
     20c:	ldr	lr, [sp, #8]
     210:	str	r0, [sp, #4]
     214:	mov	r0, lr
     218:	movw	r1, #0
     21c:	movt	r1, #0
     220:	ldr	r2, [sp, #4]
     224:	bl	0 <fprintf>
     228:	str	r0, [sp]
     22c:	ldr	r0, [fp, #-20]	; 0xffffffec
     230:	bl	0 <coda_close>
     234:	cmp	r0, #0
     238:	beq	248 <eval_expression_for_file+0x160>
     23c:	movw	r0, #1
     240:	str	r0, [fp, #-12]
     244:	b	250 <eval_expression_for_file+0x168>
     248:	movw	r0, #0
     24c:	str	r0, [fp, #-12]
     250:	ldr	r0, [fp, #-12]
     254:	sub	sp, fp, #8
     258:	pop	{r4, r5, fp, pc}

0000025c <main>:
     25c:	push	{fp, lr}
     260:	mov	fp, sp
     264:	sub	sp, sp, #160	; 0xa0
     268:	movw	r2, #0
     26c:	str	r2, [fp, #-4]
     270:	str	r0, [fp, #-8]
     274:	str	r1, [fp, #-12]
     278:	movw	r0, #1
     27c:	str	r0, [fp, #-16]
     280:	str	r2, [fp, #-20]	; 0xffffffec
     284:	ldr	r0, [fp, #-8]
     288:	cmp	r0, #1
     28c:	beq	2c8 <main+0x6c>
     290:	ldr	r0, [fp, #-12]
     294:	ldr	r0, [r0, #4]
     298:	movw	r1, #0
     29c:	movt	r1, #0
     2a0:	bl	0 <strcmp>
     2a4:	cmp	r0, #0
     2a8:	beq	2c8 <main+0x6c>
     2ac:	ldr	r0, [fp, #-12]
     2b0:	ldr	r0, [r0, #4]
     2b4:	movw	r1, #0
     2b8:	movt	r1, #0
     2bc:	bl	0 <strcmp>
     2c0:	cmp	r0, #0
     2c4:	bne	2d4 <main+0x78>
     2c8:	bl	c98 <print_help>
     2cc:	movw	r0, #0
     2d0:	bl	0 <exit>
     2d4:	ldr	r0, [fp, #-12]
     2d8:	ldr	r0, [r0, #4]
     2dc:	movw	r1, #0
     2e0:	movt	r1, #0
     2e4:	bl	0 <strcmp>
     2e8:	cmp	r0, #0
     2ec:	beq	30c <main+0xb0>
     2f0:	ldr	r0, [fp, #-12]
     2f4:	ldr	r0, [r0, #4]
     2f8:	movw	r1, #0
     2fc:	movt	r1, #0
     300:	bl	0 <strcmp>
     304:	cmp	r0, #0
     308:	bne	318 <main+0xbc>
     30c:	bl	fa0 <print_version>
     310:	movw	r0, #0
     314:	bl	0 <exit>
     318:	movw	r0, #1
     31c:	str	r0, [fp, #-24]	; 0xffffffe8
     320:	ldr	r0, [fp, #-24]	; 0xffffffe8
     324:	add	r0, r0, #1
     328:	ldr	r1, [fp, #-8]
     32c:	cmp	r0, r1
     330:	bge	384 <main+0x128>
     334:	ldr	r0, [fp, #-12]
     338:	ldr	r1, [fp, #-24]	; 0xffffffe8
     33c:	add	r0, r0, r1, lsl #2
     340:	ldr	r0, [r0]
     344:	movw	r1, #0
     348:	movt	r1, #0
     34c:	bl	0 <strcmp>
     350:	cmp	r0, #0
     354:	bne	384 <main+0x128>
     358:	ldr	r0, [fp, #-12]
     35c:	ldr	r1, [fp, #-24]	; 0xffffffe8
     360:	add	r1, r1, #1
     364:	add	r0, r0, r1, lsl #2
     368:	ldr	r0, [r0]
     36c:	bl	0 <coda_set_definition_path>
     370:	ldr	r1, [fp, #-24]	; 0xffffffe8
     374:	add	r1, r1, #2
     378:	str	r1, [fp, #-24]	; 0xffffffe8
     37c:	str	r0, [fp, #-32]	; 0xffffffe0
     380:	b	3f8 <main+0x19c>
     384:	movw	r0, #0
     388:	movt	r0, #0
     38c:	str	r0, [fp, #-28]	; 0xffffffe4
     390:	ldr	r0, [fp, #-12]
     394:	ldr	r0, [r0]
     398:	ldr	r2, [fp, #-28]	; 0xffffffe4
     39c:	movw	r1, #0
     3a0:	bl	0 <coda_set_definition_path_conditional>
     3a4:	cmp	r0, #0
     3a8:	beq	3f4 <main+0x198>
     3ac:	movw	r0, #0
     3b0:	movt	r0, #0
     3b4:	ldr	r0, [r0]
     3b8:	str	r0, [fp, #-36]	; 0xffffffdc
     3bc:	bl	0 <coda_get_errno>
     3c0:	ldr	r0, [r0]
     3c4:	bl	0 <coda_errno_to_string>
     3c8:	ldr	lr, [fp, #-36]	; 0xffffffdc
     3cc:	str	r0, [fp, #-40]	; 0xffffffd8
     3d0:	mov	r0, lr
     3d4:	movw	r1, #0
     3d8:	movt	r1, #0
     3dc:	ldr	r2, [fp, #-40]	; 0xffffffd8
     3e0:	bl	0 <fprintf>
     3e4:	movw	r1, #1
     3e8:	str	r0, [fp, #-44]	; 0xffffffd4
     3ec:	mov	r0, r1
     3f0:	bl	0 <exit>
     3f4:	b	3f8 <main+0x19c>
     3f8:	b	3fc <main+0x1a0>
     3fc:	ldr	r0, [fp, #-24]	; 0xffffffe8
     400:	ldr	r1, [fp, #-8]
     404:	cmp	r0, r1
     408:	bge	5ec <main+0x390>
     40c:	ldr	r0, [fp, #-12]
     410:	ldr	r1, [fp, #-24]	; 0xffffffe8
     414:	add	r0, r0, r1, lsl #2
     418:	ldr	r0, [r0]
     41c:	movw	r1, #0
     420:	movt	r1, #0
     424:	bl	0 <strcmp>
     428:	cmp	r0, #0
     42c:	beq	454 <main+0x1f8>
     430:	ldr	r0, [fp, #-12]
     434:	ldr	r1, [fp, #-24]	; 0xffffffe8
     438:	add	r0, r0, r1, lsl #2
     43c:	ldr	r0, [r0]
     440:	movw	r1, #0
     444:	movt	r1, #0
     448:	bl	0 <strcmp>
     44c:	cmp	r0, #0
     450:	bne	460 <main+0x204>
     454:	movw	r0, #1
     458:	str	r0, [fp, #-20]	; 0xffffffec
     45c:	b	5dc <main+0x380>
     460:	ldr	r0, [fp, #-12]
     464:	ldr	r1, [fp, #-24]	; 0xffffffe8
     468:	add	r0, r0, r1, lsl #2
     46c:	ldr	r0, [r0]
     470:	movw	r1, #0
     474:	movt	r1, #0
     478:	bl	0 <strcmp>
     47c:	cmp	r0, #0
     480:	beq	4a8 <main+0x24c>
     484:	ldr	r0, [fp, #-12]
     488:	ldr	r1, [fp, #-24]	; 0xffffffe8
     48c:	add	r0, r0, r1, lsl #2
     490:	ldr	r0, [r0]
     494:	movw	r1, #0
     498:	movt	r1, #0
     49c:	bl	0 <strcmp>
     4a0:	cmp	r0, #0
     4a4:	bne	4b4 <main+0x258>
     4a8:	movw	r0, #0
     4ac:	str	r0, [fp, #-16]
     4b0:	b	5d8 <main+0x37c>
     4b4:	ldr	r0, [fp, #-12]
     4b8:	ldr	r1, [fp, #-24]	; 0xffffffe8
     4bc:	add	r0, r0, r1, lsl #2
     4c0:	ldr	r0, [r0]
     4c4:	movw	r1, #0
     4c8:	movt	r1, #0
     4cc:	bl	0 <strcmp>
     4d0:	cmp	r0, #0
     4d4:	bne	58c <main+0x330>
     4d8:	ldr	r0, [fp, #-24]	; 0xffffffe8
     4dc:	add	r0, r0, #1
     4e0:	ldr	r1, [fp, #-8]
     4e4:	cmp	r0, r1
     4e8:	bge	58c <main+0x330>
     4ec:	ldr	r0, [fp, #-12]
     4f0:	ldr	r1, [fp, #-24]	; 0xffffffe8
     4f4:	add	r1, r1, #1
     4f8:	add	r0, r0, r1, lsl #2
     4fc:	ldr	r0, [r0]
     500:	ldrb	r0, [r0]
     504:	cmp	r0, #45	; 0x2d
     508:	beq	58c <main+0x330>
     50c:	ldr	r0, [fp, #-12]
     510:	ldr	r1, [fp, #-24]	; 0xffffffe8
     514:	add	r1, r1, #1
     518:	add	r0, r0, r1, lsl #2
     51c:	ldr	r0, [r0]
     520:	movw	r1, #0
     524:	movt	r1, #0
     528:	bl	0 <coda_expression_from_string>
     52c:	cmp	r0, #0
     530:	beq	57c <main+0x320>
     534:	movw	r0, #0
     538:	movt	r0, #0
     53c:	ldr	r0, [r0]
     540:	str	r0, [fp, #-48]	; 0xffffffd0
     544:	bl	0 <coda_get_errno>
     548:	ldr	r0, [r0]
     54c:	bl	0 <coda_errno_to_string>
     550:	ldr	lr, [fp, #-48]	; 0xffffffd0
     554:	str	r0, [fp, #-52]	; 0xffffffcc
     558:	mov	r0, lr
     55c:	movw	r1, #0
     560:	movt	r1, #0
     564:	ldr	r2, [fp, #-52]	; 0xffffffcc
     568:	bl	0 <fprintf>
     56c:	movw	r1, #1
     570:	str	r0, [fp, #-56]	; 0xffffffc8
     574:	mov	r0, r1
     578:	bl	0 <exit>
     57c:	ldr	r0, [fp, #-24]	; 0xffffffe8
     580:	add	r0, r0, #1
     584:	str	r0, [fp, #-24]	; 0xffffffe8
     588:	b	5d4 <main+0x378>
     58c:	ldr	r0, [fp, #-12]
     590:	ldr	r1, [fp, #-24]	; 0xffffffe8
     594:	add	r0, r0, r1, lsl #2
     598:	ldr	r0, [r0]
     59c:	ldrb	r0, [r0]
     5a0:	cmp	r0, #45	; 0x2d
     5a4:	beq	5ac <main+0x350>
     5a8:	b	5ec <main+0x390>
     5ac:	movw	r0, #0
     5b0:	movt	r0, #0
     5b4:	ldr	r0, [r0]
     5b8:	movw	r1, #0
     5bc:	movt	r1, #0
     5c0:	bl	0 <fprintf>
     5c4:	str	r0, [fp, #-60]	; 0xffffffc4
     5c8:	bl	c98 <print_help>
     5cc:	movw	r0, #1
     5d0:	bl	0 <exit>
     5d4:	b	5d8 <main+0x37c>
     5d8:	b	5dc <main+0x380>
     5dc:	ldr	r0, [fp, #-24]	; 0xffffffe8
     5e0:	add	r0, r0, #1
     5e4:	str	r0, [fp, #-24]	; 0xffffffe8
     5e8:	b	3fc <main+0x1a0>
     5ec:	ldr	r0, [fp, #-24]	; 0xffffffe8
     5f0:	ldr	r1, [fp, #-8]
     5f4:	cmp	r0, r1
     5f8:	blt	624 <main+0x3c8>
     5fc:	movw	r0, #0
     600:	movt	r0, #0
     604:	ldr	r0, [r0]
     608:	movw	r1, #0
     60c:	movt	r1, #0
     610:	bl	0 <fprintf>
     614:	str	r0, [fp, #-64]	; 0xffffffc0
     618:	bl	c98 <print_help>
     61c:	movw	r0, #1
     620:	bl	0 <exit>
     624:	ldr	r0, [fp, #-12]
     628:	ldr	r1, [fp, #-24]	; 0xffffffe8
     62c:	add	r0, r0, r1, lsl #2
     630:	ldr	r0, [r0]
     634:	movw	r1, #0
     638:	movt	r1, #0
     63c:	bl	0 <coda_expression_from_string>
     640:	cmp	r0, #0
     644:	beq	690 <main+0x434>
     648:	movw	r0, #0
     64c:	movt	r0, #0
     650:	ldr	r0, [r0]
     654:	str	r0, [fp, #-68]	; 0xffffffbc
     658:	bl	0 <coda_get_errno>
     65c:	ldr	r0, [r0]
     660:	bl	0 <coda_errno_to_string>
     664:	ldr	lr, [fp, #-68]	; 0xffffffbc
     668:	str	r0, [fp, #-72]	; 0xffffffb8
     66c:	mov	r0, lr
     670:	movw	r1, #0
     674:	movt	r1, #0
     678:	ldr	r2, [fp, #-72]	; 0xffffffb8
     67c:	bl	0 <fprintf>
     680:	movw	r1, #1
     684:	str	r0, [fp, #-76]	; 0xffffffb4
     688:	mov	r0, r1
     68c:	bl	0 <exit>
     690:	ldr	r0, [fp, #-24]	; 0xffffffe8
     694:	add	r0, r0, #1
     698:	str	r0, [fp, #-24]	; 0xffffffe8
     69c:	movw	r0, #0
     6a0:	movt	r0, #0
     6a4:	ldr	r0, [r0]
     6a8:	movw	r1, #0
     6ac:	movt	r1, #0
     6b0:	bl	0 <coda_expression_get_type>
     6b4:	cmp	r0, #0
     6b8:	beq	704 <main+0x4a8>
     6bc:	movw	r0, #0
     6c0:	movt	r0, #0
     6c4:	ldr	r0, [r0]
     6c8:	str	r0, [sp, #80]	; 0x50
     6cc:	bl	0 <coda_get_errno>
     6d0:	ldr	r0, [r0]
     6d4:	bl	0 <coda_errno_to_string>
     6d8:	ldr	lr, [sp, #80]	; 0x50
     6dc:	str	r0, [sp, #76]	; 0x4c
     6e0:	mov	r0, lr
     6e4:	movw	r1, #0
     6e8:	movt	r1, #0
     6ec:	ldr	r2, [sp, #76]	; 0x4c
     6f0:	bl	0 <fprintf>
     6f4:	movw	r1, #1
     6f8:	str	r0, [sp, #72]	; 0x48
     6fc:	mov	r0, r1
     700:	bl	0 <exit>
     704:	movw	r0, #0
     708:	movt	r0, #0
     70c:	ldr	r0, [r0]
     710:	cmp	r0, #4
     714:	beq	72c <main+0x4d0>
     718:	movw	r0, #0
     71c:	movt	r0, #0
     720:	ldr	r0, [r0]
     724:	cmp	r0, #5
     728:	bne	77c <main+0x520>
     72c:	movw	r0, #0
     730:	movt	r0, #0
     734:	ldr	r0, [r0]
     738:	movw	r1, #0
     73c:	movt	r1, #0
     740:	ldr	r1, [r1]
     744:	str	r0, [sp, #68]	; 0x44
     748:	mov	r0, r1
     74c:	bl	0 <coda_expression_get_type_name>
     750:	ldr	r1, [sp, #68]	; 0x44
     754:	str	r0, [sp, #64]	; 0x40
     758:	mov	r0, r1
     75c:	movw	r1, #0
     760:	movt	r1, #0
     764:	ldr	r2, [sp, #64]	; 0x40
     768:	bl	0 <fprintf>
     76c:	movw	r1, #1
     770:	str	r0, [sp, #60]	; 0x3c
     774:	mov	r0, r1
     778:	bl	0 <exit>
     77c:	ldr	r0, [fp, #-20]	; 0xffffffec
     780:	cmp	r0, #0
     784:	beq	7cc <main+0x570>
     788:	movw	r0, #0
     78c:	movt	r0, #0
     790:	ldr	r0, [r0]
     794:	bl	0 <coda_expression_delete>
     798:	movw	r0, #0
     79c:	movt	r0, #0
     7a0:	ldr	r0, [r0]
     7a4:	movw	lr, #0
     7a8:	cmp	r0, lr
     7ac:	beq	7c0 <main+0x564>
     7b0:	movw	r0, #0
     7b4:	movt	r0, #0
     7b8:	ldr	r0, [r0]
     7bc:	bl	0 <coda_expression_delete>
     7c0:	movw	r0, #0
     7c4:	str	r0, [fp, #-4]
     7c8:	b	9e8 <main+0x78c>
     7cc:	ldr	r0, [fp, #-24]	; 0xffffffe8
     7d0:	ldr	r1, [fp, #-8]
     7d4:	cmp	r0, r1
     7d8:	bge	8cc <main+0x670>
     7dc:	bl	0 <coda_init>
     7e0:	cmp	r0, #0
     7e4:	beq	830 <main+0x5d4>
     7e8:	movw	r0, #0
     7ec:	movt	r0, #0
     7f0:	ldr	r0, [r0]
     7f4:	str	r0, [sp, #56]	; 0x38
     7f8:	bl	0 <coda_get_errno>
     7fc:	ldr	r0, [r0]
     800:	bl	0 <coda_errno_to_string>
     804:	ldr	lr, [sp, #56]	; 0x38
     808:	str	r0, [sp, #52]	; 0x34
     80c:	mov	r0, lr
     810:	movw	r1, #0
     814:	movt	r1, #0
     818:	ldr	r2, [sp, #52]	; 0x34
     81c:	bl	0 <fprintf>
     820:	movw	r1, #1
     824:	str	r0, [sp, #48]	; 0x30
     828:	mov	r0, r1
     82c:	bl	0 <exit>
     830:	ldr	r0, [fp, #-16]
     834:	bl	0 <coda_set_option_perform_conversions>
     838:	ldr	lr, [fp, #-8]
     83c:	ldr	r1, [fp, #-24]	; 0xffffffe8
     840:	sub	lr, lr, r1
     844:	ldr	r2, [fp, #-12]
     848:	add	r2, r2, r1, lsl #2
     84c:	movw	r1, #0
     850:	str	r0, [sp, #44]	; 0x2c
     854:	mov	r0, r1
     858:	str	r1, [sp, #40]	; 0x28
     85c:	mov	r1, lr
     860:	movw	r3, #0
     864:	movt	r3, #0
     868:	ldr	lr, [sp, #40]	; 0x28
     86c:	str	lr, [sp]
     870:	bl	0 <coda_match_filefilter>
     874:	cmp	r0, #0
     878:	beq	8c4 <main+0x668>
     87c:	movw	r0, #0
     880:	movt	r0, #0
     884:	ldr	r0, [r0]
     888:	str	r0, [sp, #36]	; 0x24
     88c:	bl	0 <coda_get_errno>
     890:	ldr	r0, [r0]
     894:	bl	0 <coda_errno_to_string>
     898:	ldr	lr, [sp, #36]	; 0x24
     89c:	str	r0, [sp, #32]
     8a0:	mov	r0, lr
     8a4:	movw	r1, #0
     8a8:	movt	r1, #0
     8ac:	ldr	r2, [sp, #32]
     8b0:	bl	0 <fprintf>
     8b4:	movw	r1, #1
     8b8:	str	r0, [sp, #28]
     8bc:	mov	r0, r1
     8c0:	bl	0 <exit>
     8c4:	bl	0 <coda_done>
     8c8:	b	9a8 <main+0x74c>
     8cc:	movw	r0, #0
     8d0:	movt	r0, #0
     8d4:	ldr	r0, [r0]
     8d8:	movw	r1, #0
     8dc:	cmp	r0, r1
     8e0:	beq	90c <main+0x6b0>
     8e4:	movw	r0, #0
     8e8:	movt	r0, #0
     8ec:	ldr	r0, [r0]
     8f0:	movw	r1, #0
     8f4:	movt	r1, #0
     8f8:	bl	0 <fprintf>
     8fc:	movw	r1, #1
     900:	str	r0, [sp, #24]
     904:	mov	r0, r1
     908:	bl	0 <exit>
     90c:	movw	r0, #0
     910:	movt	r0, #0
     914:	ldr	r0, [r0]
     918:	bl	0 <coda_expression_is_constant>
     91c:	cmp	r0, #0
     920:	bne	94c <main+0x6f0>
     924:	movw	r0, #0
     928:	movt	r0, #0
     92c:	ldr	r0, [r0]
     930:	movw	r1, #0
     934:	movt	r1, #0
     938:	bl	0 <fprintf>
     93c:	movw	r1, #1
     940:	str	r0, [sp, #20]
     944:	mov	r0, r1
     948:	bl	0 <exit>
     94c:	movw	r0, #0
     950:	bl	9f4 <eval_expression>
     954:	cmp	r0, #0
     958:	beq	9a4 <main+0x748>
     95c:	movw	r0, #0
     960:	movt	r0, #0
     964:	ldr	r0, [r0]
     968:	str	r0, [sp, #16]
     96c:	bl	0 <coda_get_errno>
     970:	ldr	r0, [r0]
     974:	bl	0 <coda_errno_to_string>
     978:	ldr	lr, [sp, #16]
     97c:	str	r0, [sp, #12]
     980:	mov	r0, lr
     984:	movw	r1, #0
     988:	movt	r1, #0
     98c:	ldr	r2, [sp, #12]
     990:	bl	0 <fprintf>
     994:	movw	r1, #1
     998:	str	r0, [sp, #8]
     99c:	mov	r0, r1
     9a0:	bl	0 <exit>
     9a4:	b	9a8 <main+0x74c>
     9a8:	movw	r0, #0
     9ac:	movt	r0, #0
     9b0:	ldr	r0, [r0]
     9b4:	bl	0 <coda_expression_delete>
     9b8:	movw	r0, #0
     9bc:	movt	r0, #0
     9c0:	ldr	r0, [r0]
     9c4:	movw	lr, #0
     9c8:	cmp	r0, lr
     9cc:	beq	9e0 <main+0x784>
     9d0:	movw	r0, #0
     9d4:	movt	r0, #0
     9d8:	ldr	r0, [r0]
     9dc:	bl	0 <coda_expression_delete>
     9e0:	movw	r0, #0
     9e4:	str	r0, [fp, #-4]
     9e8:	ldr	r0, [fp, #-4]
     9ec:	mov	sp, fp
     9f0:	pop	{fp, pc}

000009f4 <eval_expression>:
     9f4:	push	{fp, lr}
     9f8:	mov	fp, sp
     9fc:	sub	sp, sp, #104	; 0x68
     a00:	str	r0, [fp, #-8]
     a04:	movw	r0, #0
     a08:	movt	r0, #0
     a0c:	ldr	r0, [r0]
     a10:	cmp	r0, #5
     a14:	str	r0, [sp, #36]	; 0x24
     a18:	bhi	c84 <eval_expression+0x290>
     a1c:	add	r0, pc, #8
     a20:	ldr	r1, [sp, #36]	; 0x24
     a24:	ldr	r0, [r0, r1, lsl #2]
     a28:	mov	pc, r0
     a2c:	.word	0x00000a44
     a30:	.word	0x00000ae0
     a34:	.word	0x00000b5c
     a38:	.word	0x00000bcc
     a3c:	.word	0x00000c64
     a40:	.word	0x00000c64
     a44:	movw	r0, #0
     a48:	movt	r0, #0
     a4c:	ldr	r0, [r0]
     a50:	ldr	r1, [fp, #-8]
     a54:	sub	r2, fp, #12
     a58:	bl	0 <coda_expression_eval_bool>
     a5c:	cmp	r0, #0
     a60:	beq	a98 <eval_expression+0xa4>
     a64:	bl	0 <coda_get_errno>
     a68:	ldr	r0, [r0]
     a6c:	bl	0 <coda_errno_to_string>
     a70:	mvn	lr, #400	; 0x190
     a74:	str	r0, [sp, #32]
     a78:	mov	r0, lr
     a7c:	movw	r1, #0
     a80:	movt	r1, #0
     a84:	ldr	r2, [sp, #32]
     a88:	bl	0 <coda_set_error>
     a8c:	mvn	r0, #0
     a90:	str	r0, [fp, #-4]
     a94:	b	c8c <eval_expression+0x298>
     a98:	ldr	r0, [fp, #-12]
     a9c:	cmp	r0, #0
     aa0:	movw	r0, #0
     aa4:	movne	r0, #1
     aa8:	tst	r0, #1
     aac:	movw	r0, #0
     ab0:	movt	r0, #0
     ab4:	movw	r1, #0
     ab8:	movt	r1, #0
     abc:	movne	r0, r1
     ac0:	movw	r1, #0
     ac4:	movt	r1, #0
     ac8:	str	r0, [sp, #28]
     acc:	mov	r0, r1
     ad0:	ldr	r1, [sp, #28]
     ad4:	bl	0 <printf>
     ad8:	str	r0, [sp, #24]
     adc:	b	c84 <eval_expression+0x290>
     ae0:	movw	r0, #0
     ae4:	movt	r0, #0
     ae8:	ldr	r0, [r0]
     aec:	ldr	r1, [fp, #-8]
     af0:	sub	r2, fp, #24
     af4:	bl	0 <coda_expression_eval_integer>
     af8:	cmp	r0, #0
     afc:	beq	b34 <eval_expression+0x140>
     b00:	bl	0 <coda_get_errno>
     b04:	ldr	r0, [r0]
     b08:	bl	0 <coda_errno_to_string>
     b0c:	mvn	lr, #400	; 0x190
     b10:	str	r0, [sp, #20]
     b14:	mov	r0, lr
     b18:	movw	r1, #0
     b1c:	movt	r1, #0
     b20:	ldr	r2, [sp, #20]
     b24:	bl	0 <coda_set_error>
     b28:	mvn	r0, #0
     b2c:	str	r0, [fp, #-4]
     b30:	b	c8c <eval_expression+0x298>
     b34:	sub	r2, fp, #45	; 0x2d
     b38:	ldr	r0, [fp, #-24]	; 0xffffffe8
     b3c:	ldr	r1, [fp, #-20]	; 0xffffffec
     b40:	bl	0 <coda_str64>
     b44:	sub	r1, fp, #45	; 0x2d
     b48:	movw	r0, #0
     b4c:	movt	r0, #0
     b50:	bl	0 <printf>
     b54:	str	r0, [sp, #16]
     b58:	b	c84 <eval_expression+0x290>
     b5c:	movw	r0, #0
     b60:	movt	r0, #0
     b64:	ldr	r0, [r0]
     b68:	ldr	r1, [fp, #-8]
     b6c:	add	r2, sp, #48	; 0x30
     b70:	bl	0 <coda_expression_eval_float>
     b74:	cmp	r0, #0
     b78:	beq	bb0 <eval_expression+0x1bc>
     b7c:	bl	0 <coda_get_errno>
     b80:	ldr	r0, [r0]
     b84:	bl	0 <coda_errno_to_string>
     b88:	mvn	lr, #400	; 0x190
     b8c:	str	r0, [sp, #12]
     b90:	mov	r0, lr
     b94:	movw	r1, #0
     b98:	movt	r1, #0
     b9c:	ldr	r2, [sp, #12]
     ba0:	bl	0 <coda_set_error>
     ba4:	mvn	r0, #0
     ba8:	str	r0, [fp, #-4]
     bac:	b	c8c <eval_expression+0x298>
     bb0:	vldr	d16, [sp, #48]	; 0x30
     bb4:	movw	r0, #0
     bb8:	movt	r0, #0
     bbc:	vmov	r2, r3, d16
     bc0:	bl	0 <printf>
     bc4:	str	r0, [sp, #8]
     bc8:	b	c84 <eval_expression+0x290>
     bcc:	movw	r0, #0
     bd0:	str	r0, [sp, #44]	; 0x2c
     bd4:	movw	r0, #0
     bd8:	movt	r0, #0
     bdc:	ldr	r0, [r0]
     be0:	ldr	r1, [fp, #-8]
     be4:	add	r2, sp, #44	; 0x2c
     be8:	add	r3, sp, #40	; 0x28
     bec:	bl	0 <coda_expression_eval_string>
     bf0:	cmp	r0, #0
     bf4:	beq	c2c <eval_expression+0x238>
     bf8:	bl	0 <coda_get_errno>
     bfc:	ldr	r0, [r0]
     c00:	bl	0 <coda_errno_to_string>
     c04:	mvn	lr, #400	; 0x190
     c08:	str	r0, [sp, #4]
     c0c:	mov	r0, lr
     c10:	movw	r1, #0
     c14:	movt	r1, #0
     c18:	ldr	r2, [sp, #4]
     c1c:	bl	0 <coda_set_error>
     c20:	mvn	r0, #0
     c24:	str	r0, [fp, #-4]
     c28:	b	c8c <eval_expression+0x298>
     c2c:	ldr	r0, [sp, #44]	; 0x2c
     c30:	ldr	r1, [sp, #40]	; 0x28
     c34:	bl	ffc <generate_escaped_string>
     c38:	movw	r0, #0
     c3c:	movt	r0, #0
     c40:	bl	0 <printf>
     c44:	ldr	r1, [sp, #44]	; 0x2c
     c48:	movw	lr, #0
     c4c:	cmp	r1, lr
     c50:	str	r0, [sp]
     c54:	beq	c60 <eval_expression+0x26c>
     c58:	ldr	r0, [sp, #44]	; 0x2c
     c5c:	bl	0 <free>
     c60:	b	c84 <eval_expression+0x290>
     c64:	movw	r0, #0
     c68:	movt	r0, #0
     c6c:	movw	r1, #0
     c70:	movt	r1, #0
     c74:	movw	r2, #230	; 0xe6
     c78:	movw	r3, #0
     c7c:	movt	r3, #0
     c80:	bl	0 <__assert_fail>
     c84:	movw	r0, #0
     c88:	str	r0, [fp, #-4]
     c8c:	ldr	r0, [fp, #-4]
     c90:	mov	sp, fp
     c94:	pop	{fp, pc}

00000c98 <print_help>:
     c98:	push	{fp, lr}
     c9c:	mov	fp, sp
     ca0:	sub	sp, sp, #152	; 0x98
     ca4:	movw	r0, #0
     ca8:	movt	r0, #0
     cac:	bl	0 <printf>
     cb0:	movw	lr, #0
     cb4:	movt	lr, #0
     cb8:	str	r0, [fp, #-4]
     cbc:	mov	r0, lr
     cc0:	bl	0 <printf>
     cc4:	movw	lr, #0
     cc8:	movt	lr, #0
     ccc:	str	r0, [fp, #-8]
     cd0:	mov	r0, lr
     cd4:	bl	0 <printf>
     cd8:	movw	lr, #0
     cdc:	movt	lr, #0
     ce0:	str	r0, [fp, #-12]
     ce4:	mov	r0, lr
     ce8:	bl	0 <printf>
     cec:	movw	lr, #0
     cf0:	movt	lr, #0
     cf4:	str	r0, [fp, #-16]
     cf8:	mov	r0, lr
     cfc:	bl	0 <printf>
     d00:	movw	lr, #0
     d04:	movt	lr, #0
     d08:	str	r0, [fp, #-20]	; 0xffffffec
     d0c:	mov	r0, lr
     d10:	bl	0 <printf>
     d14:	movw	lr, #0
     d18:	movt	lr, #0
     d1c:	str	r0, [fp, #-24]	; 0xffffffe8
     d20:	mov	r0, lr
     d24:	bl	0 <printf>
     d28:	movw	lr, #0
     d2c:	movt	lr, #0
     d30:	str	r0, [fp, #-28]	; 0xffffffe4
     d34:	mov	r0, lr
     d38:	bl	0 <printf>
     d3c:	movw	lr, #0
     d40:	movt	lr, #0
     d44:	str	r0, [fp, #-32]	; 0xffffffe0
     d48:	mov	r0, lr
     d4c:	bl	0 <printf>
     d50:	movw	lr, #0
     d54:	movt	lr, #0
     d58:	str	r0, [fp, #-36]	; 0xffffffdc
     d5c:	mov	r0, lr
     d60:	bl	0 <printf>
     d64:	movw	lr, #0
     d68:	movt	lr, #0
     d6c:	str	r0, [fp, #-40]	; 0xffffffd8
     d70:	mov	r0, lr
     d74:	bl	0 <printf>
     d78:	movw	lr, #0
     d7c:	movt	lr, #0
     d80:	str	r0, [fp, #-44]	; 0xffffffd4
     d84:	mov	r0, lr
     d88:	bl	0 <printf>
     d8c:	movw	lr, #0
     d90:	movt	lr, #0
     d94:	str	r0, [fp, #-48]	; 0xffffffd0
     d98:	mov	r0, lr
     d9c:	bl	0 <printf>
     da0:	movw	lr, #0
     da4:	movt	lr, #0
     da8:	str	r0, [fp, #-52]	; 0xffffffcc
     dac:	mov	r0, lr
     db0:	bl	0 <printf>
     db4:	movw	lr, #0
     db8:	movt	lr, #0
     dbc:	str	r0, [fp, #-56]	; 0xffffffc8
     dc0:	mov	r0, lr
     dc4:	bl	0 <printf>
     dc8:	movw	lr, #0
     dcc:	movt	lr, #0
     dd0:	str	r0, [fp, #-60]	; 0xffffffc4
     dd4:	mov	r0, lr
     dd8:	bl	0 <printf>
     ddc:	movw	lr, #0
     de0:	movt	lr, #0
     de4:	str	r0, [fp, #-64]	; 0xffffffc0
     de8:	mov	r0, lr
     dec:	bl	0 <printf>
     df0:	movw	lr, #0
     df4:	movt	lr, #0
     df8:	str	r0, [fp, #-68]	; 0xffffffbc
     dfc:	mov	r0, lr
     e00:	bl	0 <printf>
     e04:	movw	lr, #0
     e08:	movt	lr, #0
     e0c:	str	r0, [fp, #-72]	; 0xffffffb8
     e10:	mov	r0, lr
     e14:	bl	0 <printf>
     e18:	movw	lr, #0
     e1c:	movt	lr, #0
     e20:	str	r0, [sp, #76]	; 0x4c
     e24:	mov	r0, lr
     e28:	bl	0 <printf>
     e2c:	movw	lr, #0
     e30:	movt	lr, #0
     e34:	str	r0, [sp, #72]	; 0x48
     e38:	mov	r0, lr
     e3c:	bl	0 <printf>
     e40:	movw	lr, #0
     e44:	movt	lr, #0
     e48:	str	r0, [sp, #68]	; 0x44
     e4c:	mov	r0, lr
     e50:	bl	0 <printf>
     e54:	movw	lr, #0
     e58:	movt	lr, #0
     e5c:	str	r0, [sp, #64]	; 0x40
     e60:	mov	r0, lr
     e64:	bl	0 <printf>
     e68:	movw	lr, #0
     e6c:	movt	lr, #0
     e70:	str	r0, [sp, #60]	; 0x3c
     e74:	mov	r0, lr
     e78:	bl	0 <printf>
     e7c:	movw	lr, #0
     e80:	movt	lr, #0
     e84:	str	r0, [sp, #56]	; 0x38
     e88:	mov	r0, lr
     e8c:	bl	0 <printf>
     e90:	movw	lr, #0
     e94:	movt	lr, #0
     e98:	str	r0, [sp, #52]	; 0x34
     e9c:	mov	r0, lr
     ea0:	bl	0 <printf>
     ea4:	movw	lr, #0
     ea8:	movt	lr, #0
     eac:	str	r0, [sp, #48]	; 0x30
     eb0:	mov	r0, lr
     eb4:	bl	0 <printf>
     eb8:	movw	lr, #0
     ebc:	movt	lr, #0
     ec0:	str	r0, [sp, #44]	; 0x2c
     ec4:	mov	r0, lr
     ec8:	bl	0 <printf>
     ecc:	movw	lr, #0
     ed0:	movt	lr, #0
     ed4:	str	r0, [sp, #40]	; 0x28
     ed8:	mov	r0, lr
     edc:	bl	0 <printf>
     ee0:	movw	lr, #0
     ee4:	movt	lr, #0
     ee8:	str	r0, [sp, #36]	; 0x24
     eec:	mov	r0, lr
     ef0:	bl	0 <printf>
     ef4:	movw	lr, #0
     ef8:	movt	lr, #0
     efc:	str	r0, [sp, #32]
     f00:	mov	r0, lr
     f04:	bl	0 <printf>
     f08:	movw	lr, #0
     f0c:	movt	lr, #0
     f10:	str	r0, [sp, #28]
     f14:	mov	r0, lr
     f18:	bl	0 <printf>
     f1c:	movw	lr, #0
     f20:	movt	lr, #0
     f24:	str	r0, [sp, #24]
     f28:	mov	r0, lr
     f2c:	bl	0 <printf>
     f30:	movw	lr, #0
     f34:	movt	lr, #0
     f38:	str	r0, [sp, #20]
     f3c:	mov	r0, lr
     f40:	bl	0 <printf>
     f44:	movw	lr, #0
     f48:	movt	lr, #0
     f4c:	str	r0, [sp, #16]
     f50:	mov	r0, lr
     f54:	bl	0 <printf>
     f58:	movw	lr, #0
     f5c:	movt	lr, #0
     f60:	str	r0, [sp, #12]
     f64:	mov	r0, lr
     f68:	bl	0 <printf>
     f6c:	movw	lr, #0
     f70:	movt	lr, #0
     f74:	str	r0, [sp, #8]
     f78:	mov	r0, lr
     f7c:	bl	0 <printf>
     f80:	movw	lr, #0
     f84:	movt	lr, #0
     f88:	str	r0, [sp, #4]
     f8c:	mov	r0, lr
     f90:	bl	0 <printf>
     f94:	str	r0, [sp]
     f98:	mov	sp, fp
     f9c:	pop	{fp, pc}

00000fa0 <print_version>:
     fa0:	push	{fp, lr}
     fa4:	mov	fp, sp
     fa8:	sub	sp, sp, #16
     fac:	bl	0 <coda_get_libcoda_version>
     fb0:	movw	lr, #0
     fb4:	movt	lr, #0
     fb8:	str	r0, [fp, #-4]
     fbc:	mov	r0, lr
     fc0:	ldr	r1, [fp, #-4]
     fc4:	bl	0 <printf>
     fc8:	movw	r1, #0
     fcc:	movt	r1, #0
     fd0:	str	r0, [sp, #8]
     fd4:	mov	r0, r1
     fd8:	bl	0 <printf>
     fdc:	movw	r1, #0
     fe0:	movt	r1, #0
     fe4:	str	r0, [sp, #4]
     fe8:	mov	r0, r1
     fec:	bl	0 <printf>
     ff0:	str	r0, [sp]
     ff4:	mov	sp, fp
     ff8:	pop	{fp, pc}

00000ffc <generate_escaped_string>:
     ffc:	push	{fp, lr}
    1000:	mov	fp, sp
    1004:	sub	sp, sp, #72	; 0x48
    1008:	str	r0, [fp, #-4]
    100c:	str	r1, [fp, #-8]
    1010:	movw	r0, #0
    1014:	str	r0, [fp, #-12]
    1018:	ldr	r0, [fp, #-8]
    101c:	cmp	r0, #0
    1020:	beq	1034 <generate_escaped_string+0x38>
    1024:	ldr	r0, [fp, #-4]
    1028:	movw	r1, #0
    102c:	cmp	r0, r1
    1030:	bne	1038 <generate_escaped_string+0x3c>
    1034:	b	1338 <generate_escaped_string+0x33c>
    1038:	ldr	r0, [fp, #-8]
    103c:	cmp	r0, #0
    1040:	bge	1050 <generate_escaped_string+0x54>
    1044:	ldr	r0, [fp, #-4]
    1048:	bl	0 <strlen>
    104c:	str	r0, [fp, #-8]
    1050:	b	1054 <generate_escaped_string+0x58>
    1054:	ldr	r0, [fp, #-12]
    1058:	ldr	r1, [fp, #-8]
    105c:	cmp	r0, r1
    1060:	bge	1338 <generate_escaped_string+0x33c>
    1064:	ldr	r0, [fp, #-4]
    1068:	ldr	r1, [fp, #-12]
    106c:	ldrb	r0, [r0, r1]
    1070:	sub	r0, r0, #7
    1074:	cmp	r0, #85	; 0x55
    1078:	str	r0, [fp, #-16]
    107c:	bhi	12b0 <generate_escaped_string+0x2b4>
    1080:	add	r0, pc, #8
    1084:	ldr	r1, [fp, #-16]
    1088:	ldr	r0, [r0, r1, lsl #2]
    108c:	mov	pc, r0
    1090:	.word	0x000011fc
    1094:	.word	0x00001210
    1098:	.word	0x00001260
    109c:	.word	0x00001238
    10a0:	.word	0x00001274
    10a4:	.word	0x00001224
    10a8:	.word	0x0000124c
    10ac:	.word	0x000012b0
    10b0:	.word	0x000012b0
    10b4:	.word	0x000012b0
    10b8:	.word	0x000012b0
    10bc:	.word	0x000012b0
    10c0:	.word	0x000012b0
    10c4:	.word	0x000012b0
    10c8:	.word	0x000012b0
    10cc:	.word	0x000012b0
    10d0:	.word	0x000012b0
    10d4:	.word	0x000012b0
    10d8:	.word	0x000012b0
    10dc:	.word	0x000012b0
    10e0:	.word	0x000011e8
    10e4:	.word	0x000012b0
    10e8:	.word	0x000012b0
    10ec:	.word	0x000012b0
    10f0:	.word	0x000012b0
    10f4:	.word	0x000012b0
    10f8:	.word	0x000012b0
    10fc:	.word	0x0000129c
    1100:	.word	0x000012b0
    1104:	.word	0x000012b0
    1108:	.word	0x000012b0
    110c:	.word	0x000012b0
    1110:	.word	0x000012b0
    1114:	.word	0x000012b0
    1118:	.word	0x000012b0
    111c:	.word	0x000012b0
    1120:	.word	0x000012b0
    1124:	.word	0x000012b0
    1128:	.word	0x000012b0
    112c:	.word	0x000012b0
    1130:	.word	0x000012b0
    1134:	.word	0x000012b0
    1138:	.word	0x000012b0
    113c:	.word	0x000012b0
    1140:	.word	0x000012b0
    1144:	.word	0x000012b0
    1148:	.word	0x000012b0
    114c:	.word	0x000012b0
    1150:	.word	0x000012b0
    1154:	.word	0x000012b0
    1158:	.word	0x000012b0
    115c:	.word	0x000012b0
    1160:	.word	0x000012b0
    1164:	.word	0x000012b0
    1168:	.word	0x000012b0
    116c:	.word	0x000012b0
    1170:	.word	0x000012b0
    1174:	.word	0x000012b0
    1178:	.word	0x000012b0
    117c:	.word	0x000012b0
    1180:	.word	0x000012b0
    1184:	.word	0x000012b0
    1188:	.word	0x000012b0
    118c:	.word	0x000012b0
    1190:	.word	0x000012b0
    1194:	.word	0x000012b0
    1198:	.word	0x000012b0
    119c:	.word	0x000012b0
    11a0:	.word	0x000012b0
    11a4:	.word	0x000012b0
    11a8:	.word	0x000012b0
    11ac:	.word	0x000012b0
    11b0:	.word	0x000012b0
    11b4:	.word	0x000012b0
    11b8:	.word	0x000012b0
    11bc:	.word	0x000012b0
    11c0:	.word	0x000012b0
    11c4:	.word	0x000012b0
    11c8:	.word	0x000012b0
    11cc:	.word	0x000012b0
    11d0:	.word	0x000012b0
    11d4:	.word	0x000012b0
    11d8:	.word	0x000012b0
    11dc:	.word	0x000012b0
    11e0:	.word	0x000012b0
    11e4:	.word	0x00001288
    11e8:	movw	r0, #0
    11ec:	movt	r0, #0
    11f0:	bl	0 <printf>
    11f4:	str	r0, [fp, #-20]	; 0xffffffec
    11f8:	b	1328 <generate_escaped_string+0x32c>
    11fc:	movw	r0, #0
    1200:	movt	r0, #0
    1204:	bl	0 <printf>
    1208:	str	r0, [fp, #-24]	; 0xffffffe8
    120c:	b	1328 <generate_escaped_string+0x32c>
    1210:	movw	r0, #0
    1214:	movt	r0, #0
    1218:	bl	0 <printf>
    121c:	str	r0, [fp, #-28]	; 0xffffffe4
    1220:	b	1328 <generate_escaped_string+0x32c>
    1224:	movw	r0, #0
    1228:	movt	r0, #0
    122c:	bl	0 <printf>
    1230:	str	r0, [fp, #-32]	; 0xffffffe0
    1234:	b	1328 <generate_escaped_string+0x32c>
    1238:	movw	r0, #0
    123c:	movt	r0, #0
    1240:	bl	0 <printf>
    1244:	str	r0, [sp, #36]	; 0x24
    1248:	b	1328 <generate_escaped_string+0x32c>
    124c:	movw	r0, #0
    1250:	movt	r0, #0
    1254:	bl	0 <printf>
    1258:	str	r0, [sp, #32]
    125c:	b	1328 <generate_escaped_string+0x32c>
    1260:	movw	r0, #0
    1264:	movt	r0, #0
    1268:	bl	0 <printf>
    126c:	str	r0, [sp, #28]
    1270:	b	1328 <generate_escaped_string+0x32c>
    1274:	movw	r0, #0
    1278:	movt	r0, #0
    127c:	bl	0 <printf>
    1280:	str	r0, [sp, #24]
    1284:	b	1328 <generate_escaped_string+0x32c>
    1288:	movw	r0, #0
    128c:	movt	r0, #0
    1290:	bl	0 <printf>
    1294:	str	r0, [sp, #20]
    1298:	b	1328 <generate_escaped_string+0x32c>
    129c:	movw	r0, #0
    12a0:	movt	r0, #0
    12a4:	bl	0 <printf>
    12a8:	str	r0, [sp, #16]
    12ac:	b	1328 <generate_escaped_string+0x32c>
    12b0:	bl	0 <__ctype_b_loc>
    12b4:	ldr	r0, [r0]
    12b8:	ldr	lr, [fp, #-4]
    12bc:	ldr	r1, [fp, #-12]
    12c0:	ldrb	r1, [lr, r1]
    12c4:	mov	lr, r1
    12c8:	add	r0, r0, r1, lsl #1
    12cc:	ldrh	r0, [r0]
    12d0:	and	r0, r0, #16384	; 0x4000
    12d4:	cmp	r0, #0
    12d8:	str	lr, [sp, #12]
    12dc:	bne	1304 <generate_escaped_string+0x308>
    12e0:	ldr	r0, [fp, #-4]
    12e4:	ldr	r1, [fp, #-12]
    12e8:	add	r0, r0, r1
    12ec:	ldrb	r1, [r0]
    12f0:	movw	r0, #0
    12f4:	movt	r0, #0
    12f8:	bl	0 <printf>
    12fc:	str	r0, [sp, #8]
    1300:	b	1324 <generate_escaped_string+0x328>
    1304:	ldr	r0, [fp, #-4]
    1308:	ldr	r1, [fp, #-12]
    130c:	add	r0, r0, r1
    1310:	ldrb	r1, [r0]
    1314:	movw	r0, #0
    1318:	movt	r0, #0
    131c:	bl	0 <printf>
    1320:	str	r0, [sp, #4]
    1324:	b	1328 <generate_escaped_string+0x32c>
    1328:	ldr	r0, [fp, #-12]
    132c:	add	r0, r0, #1
    1330:	str	r0, [fp, #-12]
    1334:	b	1054 <generate_escaped_string+0x58>
    1338:	mov	sp, fp
    133c:	pop	{fp, pc}
