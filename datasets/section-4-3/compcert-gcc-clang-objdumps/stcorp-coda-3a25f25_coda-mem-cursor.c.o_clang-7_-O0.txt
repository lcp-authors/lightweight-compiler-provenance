
../compcert-repos/stcorp-coda-3a25f25/CMakeFiles/coda_static.dir/libcoda/coda-mem-cursor.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <coda_mem_cursor_update_offset>:
       0:	sub	sp, sp, #4
       4:	str	r0, [sp]
       8:	ldr	r0, [sp]
       c:	add	r1, r0, #8
      10:	ldr	r0, [r0, #4]
      14:	sub	r0, r0, #1
      18:	add	r0, r1, r0, lsl #4
      1c:	ldr	r0, [r0]
      20:	ldr	r0, [r0, #8]
      24:	cmp	r0, #2
      28:	bne	58 <coda_mem_cursor_update_offset+0x58>
      2c:	ldr	r0, [sp]
      30:	ldr	r1, [r0, #4]
      34:	add	r2, r0, r1, lsl #4
      38:	ldr	r3, [r2, #-8]
      3c:	ldr	ip, [r3, #24]
      40:	ldr	r3, [r3, #28]
      44:	lsl	r3, r3, #3
      48:	orr	r3, r3, ip, lsr #29
      4c:	lsl	ip, ip, #3
      50:	str	ip, [r0, r1, lsl #4]
      54:	str	r3, [r2, #4]
      58:	add	sp, sp, #4
      5c:	bx	lr

00000060 <coda_mem_cursor_goto_record_field_by_index>:
      60:	push	{fp, lr}
      64:	mov	fp, sp
      68:	sub	sp, sp, #16
      6c:	str	r0, [sp, #8]
      70:	str	r1, [sp, #4]
      74:	ldr	r0, [sp, #8]
      78:	add	r1, r0, #8
      7c:	ldr	r0, [r0, #4]
      80:	sub	r0, r0, #1
      84:	add	r0, r1, r0, lsl #4
      88:	ldr	r0, [r0]
      8c:	str	r0, [sp]
      90:	ldr	r0, [sp]
      94:	ldr	r0, [r0, #8]
      98:	cmp	r0, #0
      9c:	bne	1a0 <coda_mem_cursor_goto_record_field_by_index+0x140>
      a0:	ldr	r0, [sp, #4]
      a4:	cmp	r0, #0
      a8:	blt	c0 <coda_mem_cursor_goto_record_field_by_index+0x60>
      ac:	ldr	r0, [sp, #4]
      b0:	ldr	r1, [sp]
      b4:	ldr	r1, [r1, #16]
      b8:	cmp	r0, r1
      bc:	blt	e8 <coda_mem_cursor_goto_record_field_by_index+0x88>
      c0:	ldr	r2, [sp, #4]
      c4:	ldr	r0, [sp]
      c8:	ldr	r3, [r0, #16]
      cc:	mvn	r0, #100	; 0x64
      d0:	movw	r1, #0
      d4:	movt	r1, #0
      d8:	bl	0 <coda_set_error>
      dc:	mvn	r0, #0
      e0:	str	r0, [fp, #-4]
      e4:	b	1e4 <coda_mem_cursor_goto_record_field_by_index+0x184>
      e8:	ldr	r0, [sp, #8]
      ec:	ldr	r1, [r0, #4]
      f0:	add	r1, r1, #1
      f4:	str	r1, [r0, #4]
      f8:	ldr	r0, [sp]
      fc:	ldr	r0, [r0, #20]
     100:	ldr	r1, [sp, #4]
     104:	add	r0, r0, r1, lsl #2
     108:	ldr	r0, [r0]
     10c:	movw	r1, #0
     110:	cmp	r0, r1
     114:	beq	144 <coda_mem_cursor_goto_record_field_by_index+0xe4>
     118:	ldr	r0, [sp]
     11c:	ldr	r0, [r0, #20]
     120:	ldr	r1, [sp, #4]
     124:	ldr	r0, [r0, r1, lsl #2]
     128:	ldr	r1, [sp, #8]
     12c:	add	r2, r1, #8
     130:	ldr	r1, [r1, #4]
     134:	sub	r1, r1, #1
     138:	add	r1, r2, r1, lsl #4
     13c:	str	r0, [r1]
     140:	b	16c <coda_mem_cursor_goto_record_field_by_index+0x10c>
     144:	ldr	r0, [sp]
     148:	ldr	r0, [r0, #4]
     14c:	ldr	r0, [r0]
     150:	bl	0 <coda_no_data_singleton>
     154:	ldr	lr, [sp, #8]
     158:	add	r1, lr, #8
     15c:	ldr	lr, [lr, #4]
     160:	sub	lr, lr, #1
     164:	add	r1, r1, lr, lsl #4
     168:	str	r0, [r1]
     16c:	ldr	r0, [sp, #4]
     170:	ldr	r1, [sp, #8]
     174:	ldr	r2, [r1, #4]
     178:	add	r1, r1, r2, lsl #4
     17c:	str	r0, [r1, #-4]
     180:	ldr	r0, [sp, #8]
     184:	ldr	r1, [r0, #4]
     188:	mvn	r2, #0
     18c:	str	r2, [r0, r1, lsl #4]!
     190:	str	r2, [r0, #4]
     194:	movw	r0, #0
     198:	str	r0, [fp, #-4]
     19c:	b	1e4 <coda_mem_cursor_goto_record_field_by_index+0x184>
     1a0:	ldr	r0, [sp]
     1a4:	ldr	r0, [r0, #8]
     1a8:	cmp	r0, #2
     1ac:	bne	1b4 <coda_mem_cursor_goto_record_field_by_index+0x154>
     1b0:	b	1d4 <coda_mem_cursor_goto_record_field_by_index+0x174>
     1b4:	movw	r0, #0
     1b8:	movt	r0, #0
     1bc:	movw	r1, #0
     1c0:	movt	r1, #0
     1c4:	movw	r2, #79	; 0x4f
     1c8:	movw	r3, #0
     1cc:	movt	r3, #0
     1d0:	bl	0 <__assert_fail>
     1d4:	ldr	r0, [sp, #8]
     1d8:	ldr	r1, [sp, #4]
     1dc:	bl	0 <coda_ascbin_cursor_goto_record_field_by_index>
     1e0:	str	r0, [fp, #-4]
     1e4:	ldr	r0, [fp, #-4]
     1e8:	mov	sp, fp
     1ec:	pop	{fp, pc}

000001f0 <coda_mem_cursor_goto_next_record_field>:
     1f0:	push	{fp, lr}
     1f4:	mov	fp, sp
     1f8:	sub	sp, sp, #16
     1fc:	str	r0, [sp, #8]
     200:	ldr	r0, [sp, #8]
     204:	add	r1, r0, #8
     208:	ldr	r0, [r0, #4]
     20c:	sub	r0, r0, #2
     210:	add	r0, r1, r0, lsl #4
     214:	ldr	r0, [r0]
     218:	str	r0, [sp, #4]
     21c:	ldr	r0, [sp, #4]
     220:	ldr	r0, [r0, #8]
     224:	cmp	r0, #0
     228:	bne	33c <coda_mem_cursor_goto_next_record_field+0x14c>
     22c:	ldr	r0, [sp, #8]
     230:	add	r1, r0, #8
     234:	ldr	r0, [r0, #4]
     238:	sub	r0, r0, #1
     23c:	add	r0, r1, r0, lsl #4
     240:	ldr	r0, [r0, #4]
     244:	add	r0, r0, #1
     248:	str	r0, [sp]
     24c:	ldr	r0, [sp]
     250:	cmp	r0, #0
     254:	blt	26c <coda_mem_cursor_goto_next_record_field+0x7c>
     258:	ldr	r0, [sp]
     25c:	ldr	r1, [sp, #4]
     260:	ldr	r1, [r1, #16]
     264:	cmp	r0, r1
     268:	blt	294 <coda_mem_cursor_goto_next_record_field+0xa4>
     26c:	ldr	r2, [sp]
     270:	ldr	r0, [sp, #4]
     274:	ldr	r3, [r0, #16]
     278:	mvn	r0, #100	; 0x64
     27c:	movw	r1, #0
     280:	movt	r1, #0
     284:	bl	0 <coda_set_error>
     288:	mvn	r0, #0
     28c:	str	r0, [fp, #-4]
     290:	b	37c <coda_mem_cursor_goto_next_record_field+0x18c>
     294:	ldr	r0, [sp, #4]
     298:	ldr	r0, [r0, #20]
     29c:	ldr	r1, [sp]
     2a0:	add	r0, r0, r1, lsl #2
     2a4:	ldr	r0, [r0]
     2a8:	movw	r1, #0
     2ac:	cmp	r0, r1
     2b0:	beq	2e0 <coda_mem_cursor_goto_next_record_field+0xf0>
     2b4:	ldr	r0, [sp, #4]
     2b8:	ldr	r0, [r0, #20]
     2bc:	ldr	r1, [sp]
     2c0:	ldr	r0, [r0, r1, lsl #2]
     2c4:	ldr	r1, [sp, #8]
     2c8:	add	r2, r1, #8
     2cc:	ldr	r1, [r1, #4]
     2d0:	sub	r1, r1, #1
     2d4:	add	r1, r2, r1, lsl #4
     2d8:	str	r0, [r1]
     2dc:	b	308 <coda_mem_cursor_goto_next_record_field+0x118>
     2e0:	ldr	r0, [sp, #4]
     2e4:	ldr	r0, [r0, #4]
     2e8:	ldr	r0, [r0]
     2ec:	bl	0 <coda_no_data_singleton>
     2f0:	ldr	lr, [sp, #8]
     2f4:	add	r1, lr, #8
     2f8:	ldr	lr, [lr, #4]
     2fc:	sub	lr, lr, #1
     300:	add	r1, r1, lr, lsl #4
     304:	str	r0, [r1]
     308:	ldr	r0, [sp]
     30c:	ldr	r1, [sp, #8]
     310:	ldr	r2, [r1, #4]
     314:	add	r1, r1, r2, lsl #4
     318:	str	r0, [r1, #-4]
     31c:	ldr	r0, [sp, #8]
     320:	ldr	r1, [r0, #4]
     324:	mvn	r2, #0
     328:	str	r2, [r0, r1, lsl #4]!
     32c:	str	r2, [r0, #4]
     330:	movw	r0, #0
     334:	str	r0, [fp, #-4]
     338:	b	37c <coda_mem_cursor_goto_next_record_field+0x18c>
     33c:	ldr	r0, [sp, #4]
     340:	ldr	r0, [r0, #8]
     344:	cmp	r0, #2
     348:	bne	350 <coda_mem_cursor_goto_next_record_field+0x160>
     34c:	b	370 <coda_mem_cursor_goto_next_record_field+0x180>
     350:	movw	r0, #0
     354:	movt	r0, #0
     358:	movw	r1, #0
     35c:	movt	r1, #0
     360:	movw	r2, #111	; 0x6f
     364:	movw	r3, #0
     368:	movt	r3, #0
     36c:	bl	0 <__assert_fail>
     370:	ldr	r0, [sp, #8]
     374:	bl	0 <coda_ascbin_cursor_goto_next_record_field>
     378:	str	r0, [fp, #-4]
     37c:	ldr	r0, [fp, #-4]
     380:	mov	sp, fp
     384:	pop	{fp, pc}

00000388 <coda_mem_cursor_goto_available_union_field>:
     388:	push	{fp, lr}
     38c:	mov	fp, sp
     390:	sub	sp, sp, #16
     394:	str	r0, [sp, #8]
     398:	ldr	r0, [sp, #8]
     39c:	add	r1, r0, #8
     3a0:	ldr	r0, [r0, #4]
     3a4:	sub	r0, r0, #1
     3a8:	add	r0, r1, r0, lsl #4
     3ac:	ldr	r0, [r0]
     3b0:	str	r0, [sp, #4]
     3b4:	ldr	r0, [sp, #4]
     3b8:	ldr	r0, [r0, #8]
     3bc:	cmp	r0, #0
     3c0:	bne	438 <coda_mem_cursor_goto_available_union_field+0xb0>
     3c4:	ldr	r0, [sp, #8]
     3c8:	mov	r1, sp
     3cc:	bl	484 <coda_mem_cursor_get_available_union_field_index>
     3d0:	cmp	r0, #0
     3d4:	beq	3e4 <coda_mem_cursor_goto_available_union_field+0x5c>
     3d8:	mvn	r0, #0
     3dc:	str	r0, [fp, #-4]
     3e0:	b	478 <coda_mem_cursor_goto_available_union_field+0xf0>
     3e4:	ldr	r0, [sp, #4]
     3e8:	ldr	r0, [r0, #20]
     3ec:	ldr	r1, [sp]
     3f0:	ldr	r0, [r0, r1, lsl #2]
     3f4:	ldr	r1, [sp, #8]
     3f8:	ldr	r2, [r1, #4]
     3fc:	add	r1, r1, r2, lsl #4
     400:	str	r0, [r1, #-8]
     404:	ldr	r0, [sp]
     408:	ldr	r1, [sp, #8]
     40c:	ldr	r2, [r1, #4]
     410:	add	r1, r1, r2, lsl #4
     414:	str	r0, [r1, #-4]
     418:	ldr	r0, [sp, #8]
     41c:	ldr	r1, [r0, #4]
     420:	mvn	r2, #0
     424:	str	r2, [r0, r1, lsl #4]!
     428:	str	r2, [r0, #4]
     42c:	movw	r0, #0
     430:	str	r0, [fp, #-4]
     434:	b	478 <coda_mem_cursor_goto_available_union_field+0xf0>
     438:	ldr	r0, [sp, #4]
     43c:	ldr	r0, [r0, #8]
     440:	cmp	r0, #2
     444:	bne	44c <coda_mem_cursor_goto_available_union_field+0xc4>
     448:	b	46c <coda_mem_cursor_goto_available_union_field+0xe4>
     44c:	movw	r0, #0
     450:	movt	r0, #0
     454:	movw	r1, #0
     458:	movt	r1, #0
     45c:	movw	r2, #134	; 0x86
     460:	movw	r3, #0
     464:	movt	r3, #0
     468:	bl	0 <__assert_fail>
     46c:	ldr	r0, [sp, #8]
     470:	bl	0 <coda_ascbin_cursor_goto_available_union_field>
     474:	str	r0, [fp, #-4]
     478:	ldr	r0, [fp, #-4]
     47c:	mov	sp, fp
     480:	pop	{fp, pc}

00000484 <coda_mem_cursor_get_available_union_field_index>:
     484:	push	{fp, lr}
     488:	mov	fp, sp
     48c:	sub	sp, sp, #24
     490:	str	r0, [fp, #-8]
     494:	str	r1, [sp, #12]
     498:	ldr	r0, [fp, #-8]
     49c:	add	r1, r0, #8
     4a0:	ldr	r0, [r0, #4]
     4a4:	sub	r0, r0, #1
     4a8:	add	r0, r1, r0, lsl #4
     4ac:	ldr	r0, [r0]
     4b0:	str	r0, [sp, #8]
     4b4:	ldr	r0, [sp, #8]
     4b8:	ldr	r0, [r0, #8]
     4bc:	cmp	r0, #0
     4c0:	bne	548 <coda_mem_cursor_get_available_union_field_index+0xc4>
     4c4:	movw	r0, #0
     4c8:	str	r0, [sp, #4]
     4cc:	ldr	r0, [sp, #4]
     4d0:	ldr	r1, [sp, #8]
     4d4:	ldr	r1, [r1, #16]
     4d8:	cmp	r0, r1
     4dc:	bge	52c <coda_mem_cursor_get_available_union_field_index+0xa8>
     4e0:	ldr	r0, [sp, #8]
     4e4:	ldr	r0, [r0, #20]
     4e8:	ldr	r1, [sp, #4]
     4ec:	add	r0, r0, r1, lsl #2
     4f0:	ldr	r0, [r0]
     4f4:	movw	r1, #0
     4f8:	cmp	r0, r1
     4fc:	beq	518 <coda_mem_cursor_get_available_union_field_index+0x94>
     500:	ldr	r0, [sp, #4]
     504:	ldr	r1, [sp, #12]
     508:	str	r0, [r1]
     50c:	movw	r0, #0
     510:	str	r0, [fp, #-4]
     514:	b	5a0 <coda_mem_cursor_get_available_union_field_index+0x11c>
     518:	b	51c <coda_mem_cursor_get_available_union_field_index+0x98>
     51c:	ldr	r0, [sp, #4]
     520:	add	r0, r0, #1
     524:	str	r0, [sp, #4]
     528:	b	4cc <coda_mem_cursor_get_available_union_field_index+0x48>
     52c:	ldr	r0, [pc, #120]	; 5ac <coda_mem_cursor_get_available_union_field_index+0x128>
     530:	movw	r1, #0
     534:	movt	r1, #0
     538:	bl	0 <coda_set_error>
     53c:	mvn	r0, #0
     540:	str	r0, [fp, #-4]
     544:	b	5a0 <coda_mem_cursor_get_available_union_field_index+0x11c>
     548:	ldr	r0, [fp, #-8]
     54c:	add	r1, r0, #8
     550:	ldr	r0, [r0, #4]
     554:	sub	r0, r0, #1
     558:	add	r0, r1, r0, lsl #4
     55c:	ldr	r0, [r0]
     560:	ldr	r0, [r0, #8]
     564:	cmp	r0, #2
     568:	bne	570 <coda_mem_cursor_get_available_union_field_index+0xec>
     56c:	b	590 <coda_mem_cursor_get_available_union_field_index+0x10c>
     570:	movw	r0, #0
     574:	movt	r0, #0
     578:	movw	r1, #0
     57c:	movt	r1, #0
     580:	movw	r2, #399	; 0x18f
     584:	movw	r3, #0
     588:	movt	r3, #0
     58c:	bl	0 <__assert_fail>
     590:	ldr	r0, [fp, #-8]
     594:	ldr	r1, [sp, #12]
     598:	bl	0 <coda_ascbin_cursor_get_available_union_field_index>
     59c:	str	r0, [fp, #-4]
     5a0:	ldr	r0, [fp, #-4]
     5a4:	mov	sp, fp
     5a8:	pop	{fp, pc}
     5ac:	.word	0xfffffed4

000005b0 <coda_mem_cursor_goto_array_element>:
     5b0:	push	{fp, lr}
     5b4:	mov	fp, sp
     5b8:	sub	sp, sp, #24
     5bc:	str	r0, [fp, #-8]
     5c0:	str	r1, [sp, #12]
     5c4:	str	r2, [sp, #8]
     5c8:	ldr	r0, [fp, #-8]
     5cc:	add	r1, r0, #8
     5d0:	ldr	r0, [r0, #4]
     5d4:	sub	r0, r0, #1
     5d8:	add	r0, r1, r0, lsl #4
     5dc:	ldr	r0, [r0]
     5e0:	str	r0, [sp, #4]
     5e4:	ldr	r0, [sp, #4]
     5e8:	ldr	r0, [r0, #8]
     5ec:	cmp	r0, #1
     5f0:	bne	704 <coda_mem_cursor_goto_array_element+0x154>
     5f4:	ldr	r0, [sp, #12]
     5f8:	cmp	r0, #1
     5fc:	beq	620 <coda_mem_cursor_goto_array_element+0x70>
     600:	ldr	r2, [sp, #12]
     604:	mvn	r0, #105	; 0x69
     608:	movw	r1, #0
     60c:	movt	r1, #0
     610:	bl	0 <coda_set_error>
     614:	mvn	r0, #0
     618:	str	r0, [fp, #-4]
     61c:	b	74c <coda_mem_cursor_goto_array_element+0x19c>
     620:	ldr	r0, [pc, #304]	; 758 <coda_mem_cursor_goto_array_element+0x1a8>
     624:	ldr	r0, [pc, r0]
     628:	str	r0, [sp]
     62c:	bl	0 <__aeabi_read_tp>
     630:	ldr	ip, [sp]
     634:	ldr	r0, [r0, ip]
     638:	cmp	r0, #0
     63c:	beq	698 <coda_mem_cursor_goto_array_element+0xe8>
     640:	ldr	r0, [sp, #8]
     644:	ldr	r0, [r0]
     648:	cmp	r0, #0
     64c:	blt	668 <coda_mem_cursor_goto_array_element+0xb8>
     650:	ldr	r0, [sp, #8]
     654:	ldr	r0, [r0]
     658:	ldr	r1, [sp, #4]
     65c:	ldr	r1, [r1, #16]
     660:	cmp	r0, r1
     664:	blt	694 <coda_mem_cursor_goto_array_element+0xe4>
     668:	ldr	r0, [sp, #8]
     66c:	ldr	r2, [r0]
     670:	ldr	r0, [sp, #4]
     674:	ldr	r3, [r0, #16]
     678:	mvn	r0, #106	; 0x6a
     67c:	movw	r1, #0
     680:	movt	r1, #0
     684:	bl	0 <coda_set_error>
     688:	mvn	r0, #0
     68c:	str	r0, [fp, #-4]
     690:	b	74c <coda_mem_cursor_goto_array_element+0x19c>
     694:	b	698 <coda_mem_cursor_goto_array_element+0xe8>
     698:	ldr	r0, [fp, #-8]
     69c:	ldr	r1, [r0, #4]
     6a0:	add	r1, r1, #1
     6a4:	str	r1, [r0, #4]
     6a8:	ldr	r0, [sp, #4]
     6ac:	ldr	r0, [r0, #20]
     6b0:	ldr	r1, [sp, #8]
     6b4:	ldr	r1, [r1]
     6b8:	ldr	r0, [r0, r1, lsl #2]
     6bc:	ldr	r1, [fp, #-8]
     6c0:	ldr	r2, [r1, #4]
     6c4:	add	r1, r1, r2, lsl #4
     6c8:	str	r0, [r1, #-8]
     6cc:	ldr	r0, [sp, #8]
     6d0:	ldr	r0, [r0]
     6d4:	ldr	r1, [fp, #-8]
     6d8:	ldr	r2, [r1, #4]
     6dc:	add	r1, r1, r2, lsl #4
     6e0:	str	r0, [r1, #-4]
     6e4:	ldr	r0, [fp, #-8]
     6e8:	ldr	r1, [r0, #4]
     6ec:	mvn	r2, #0
     6f0:	str	r2, [r0, r1, lsl #4]!
     6f4:	str	r2, [r0, #4]
     6f8:	movw	r0, #0
     6fc:	str	r0, [fp, #-4]
     700:	b	74c <coda_mem_cursor_goto_array_element+0x19c>
     704:	ldr	r0, [sp, #4]
     708:	ldr	r0, [r0, #8]
     70c:	cmp	r0, #2
     710:	bne	718 <coda_mem_cursor_goto_array_element+0x168>
     714:	b	738 <coda_mem_cursor_goto_array_element+0x188>
     718:	movw	r0, #0
     71c:	movt	r0, #0
     720:	movw	r1, #0
     724:	movt	r1, #0
     728:	movw	r2, #169	; 0xa9
     72c:	movw	r3, #0
     730:	movt	r3, #0
     734:	bl	0 <__assert_fail>
     738:	ldr	r0, [fp, #-8]
     73c:	ldr	r1, [sp, #12]
     740:	ldr	r2, [sp, #8]
     744:	bl	0 <coda_ascbin_cursor_goto_array_element>
     748:	str	r0, [fp, #-4]
     74c:	ldr	r0, [fp, #-4]
     750:	mov	sp, fp
     754:	pop	{fp, pc}
     758:	.word	0x0000012c

0000075c <coda_mem_cursor_goto_array_element_by_index>:
     75c:	push	{fp, lr}
     760:	mov	fp, sp
     764:	sub	sp, sp, #24
     768:	str	r0, [fp, #-8]
     76c:	str	r1, [sp, #12]
     770:	ldr	r0, [fp, #-8]
     774:	add	r1, r0, #8
     778:	ldr	r0, [r0, #4]
     77c:	sub	r0, r0, #1
     780:	add	r0, r1, r0, lsl #4
     784:	ldr	r0, [r0]
     788:	str	r0, [sp, #8]
     78c:	ldr	r0, [sp, #8]
     790:	ldr	r0, [r0, #8]
     794:	cmp	r0, #1
     798:	bne	86c <coda_mem_cursor_goto_array_element_by_index+0x110>
     79c:	ldr	r0, [pc, #280]	; 8bc <coda_mem_cursor_goto_array_element_by_index+0x160>
     7a0:	ldr	r0, [pc, r0]
     7a4:	str	r0, [sp, #4]
     7a8:	bl	0 <__aeabi_read_tp>
     7ac:	ldr	ip, [sp, #4]
     7b0:	ldr	r0, [r0, ip]
     7b4:	cmp	r0, #0
     7b8:	beq	808 <coda_mem_cursor_goto_array_element_by_index+0xac>
     7bc:	ldr	r0, [sp, #12]
     7c0:	cmp	r0, #0
     7c4:	blt	7dc <coda_mem_cursor_goto_array_element_by_index+0x80>
     7c8:	ldr	r0, [sp, #12]
     7cc:	ldr	r1, [sp, #8]
     7d0:	ldr	r1, [r1, #16]
     7d4:	cmp	r0, r1
     7d8:	blt	804 <coda_mem_cursor_goto_array_element_by_index+0xa8>
     7dc:	ldr	r2, [sp, #12]
     7e0:	ldr	r0, [sp, #8]
     7e4:	ldr	r3, [r0, #16]
     7e8:	mvn	r0, #106	; 0x6a
     7ec:	movw	r1, #0
     7f0:	movt	r1, #0
     7f4:	bl	0 <coda_set_error>
     7f8:	mvn	r0, #0
     7fc:	str	r0, [fp, #-4]
     800:	b	8b0 <coda_mem_cursor_goto_array_element_by_index+0x154>
     804:	b	808 <coda_mem_cursor_goto_array_element_by_index+0xac>
     808:	ldr	r0, [fp, #-8]
     80c:	ldr	r1, [r0, #4]
     810:	add	r1, r1, #1
     814:	str	r1, [r0, #4]
     818:	ldr	r0, [sp, #8]
     81c:	ldr	r0, [r0, #20]
     820:	ldr	r1, [sp, #12]
     824:	ldr	r0, [r0, r1, lsl #2]
     828:	ldr	r1, [fp, #-8]
     82c:	ldr	r2, [r1, #4]
     830:	add	r1, r1, r2, lsl #4
     834:	str	r0, [r1, #-8]
     838:	ldr	r0, [sp, #12]
     83c:	ldr	r1, [fp, #-8]
     840:	ldr	r2, [r1, #4]
     844:	add	r1, r1, r2, lsl #4
     848:	str	r0, [r1, #-4]
     84c:	ldr	r0, [fp, #-8]
     850:	ldr	r1, [r0, #4]
     854:	mvn	r2, #0
     858:	str	r2, [r0, r1, lsl #4]!
     85c:	str	r2, [r0, #4]
     860:	movw	r0, #0
     864:	str	r0, [fp, #-4]
     868:	b	8b0 <coda_mem_cursor_goto_array_element_by_index+0x154>
     86c:	ldr	r0, [sp, #8]
     870:	ldr	r0, [r0, #8]
     874:	cmp	r0, #2
     878:	bne	880 <coda_mem_cursor_goto_array_element_by_index+0x124>
     87c:	b	8a0 <coda_mem_cursor_goto_array_element_by_index+0x144>
     880:	movw	r0, #0
     884:	movt	r0, #0
     888:	movw	r1, #0
     88c:	movt	r1, #0
     890:	movw	r2, #197	; 0xc5
     894:	movw	r3, #0
     898:	movt	r3, #0
     89c:	bl	0 <__assert_fail>
     8a0:	ldr	r0, [fp, #-8]
     8a4:	ldr	r1, [sp, #12]
     8a8:	bl	0 <coda_ascbin_cursor_goto_array_element_by_index>
     8ac:	str	r0, [fp, #-4]
     8b0:	ldr	r0, [fp, #-4]
     8b4:	mov	sp, fp
     8b8:	pop	{fp, pc}
     8bc:	.word	0x00000114

000008c0 <coda_mem_cursor_goto_next_array_element>:
     8c0:	push	{fp, lr}
     8c4:	mov	fp, sp
     8c8:	sub	sp, sp, #16
     8cc:	str	r0, [sp, #8]
     8d0:	ldr	r0, [sp, #8]
     8d4:	add	r1, r0, #8
     8d8:	ldr	r0, [r0, #4]
     8dc:	sub	r0, r0, #2
     8e0:	add	r0, r1, r0, lsl #4
     8e4:	ldr	r0, [r0]
     8e8:	str	r0, [sp, #4]
     8ec:	ldr	r0, [sp, #4]
     8f0:	ldr	r0, [r0, #8]
     8f4:	cmp	r0, #1
     8f8:	bne	a0c <coda_mem_cursor_goto_next_array_element+0x14c>
     8fc:	ldr	r0, [sp, #8]
     900:	add	r1, r0, #8
     904:	ldr	r0, [r0, #4]
     908:	sub	r0, r0, #1
     90c:	add	r0, r1, r0, lsl #4
     910:	ldr	r0, [r0, #4]
     914:	add	r0, r0, #1
     918:	str	r0, [sp]
     91c:	ldr	r0, [sp]
     920:	cmp	r0, #0
     924:	blt	93c <coda_mem_cursor_goto_next_array_element+0x7c>
     928:	ldr	r0, [sp]
     92c:	ldr	r1, [sp, #4]
     930:	ldr	r1, [r1, #16]
     934:	cmp	r0, r1
     938:	blt	964 <coda_mem_cursor_goto_next_array_element+0xa4>
     93c:	ldr	r2, [sp]
     940:	ldr	r0, [sp, #4]
     944:	ldr	r3, [r0, #16]
     948:	mvn	r0, #106	; 0x6a
     94c:	movw	r1, #0
     950:	movt	r1, #0
     954:	bl	0 <coda_set_error>
     958:	mvn	r0, #0
     95c:	str	r0, [fp, #-4]
     960:	b	a4c <coda_mem_cursor_goto_next_array_element+0x18c>
     964:	ldr	r0, [sp, #4]
     968:	ldr	r0, [r0, #20]
     96c:	ldr	r1, [sp]
     970:	add	r0, r0, r1, lsl #2
     974:	ldr	r0, [r0]
     978:	movw	r1, #0
     97c:	cmp	r0, r1
     980:	beq	9b0 <coda_mem_cursor_goto_next_array_element+0xf0>
     984:	ldr	r0, [sp, #4]
     988:	ldr	r0, [r0, #20]
     98c:	ldr	r1, [sp]
     990:	ldr	r0, [r0, r1, lsl #2]
     994:	ldr	r1, [sp, #8]
     998:	add	r2, r1, #8
     99c:	ldr	r1, [r1, #4]
     9a0:	sub	r1, r1, #1
     9a4:	add	r1, r2, r1, lsl #4
     9a8:	str	r0, [r1]
     9ac:	b	9d8 <coda_mem_cursor_goto_next_array_element+0x118>
     9b0:	ldr	r0, [sp, #4]
     9b4:	ldr	r0, [r0, #4]
     9b8:	ldr	r0, [r0]
     9bc:	bl	0 <coda_no_data_singleton>
     9c0:	ldr	lr, [sp, #8]
     9c4:	add	r1, lr, #8
     9c8:	ldr	lr, [lr, #4]
     9cc:	sub	lr, lr, #1
     9d0:	add	r1, r1, lr, lsl #4
     9d4:	str	r0, [r1]
     9d8:	ldr	r0, [sp]
     9dc:	ldr	r1, [sp, #8]
     9e0:	ldr	r2, [r1, #4]
     9e4:	add	r1, r1, r2, lsl #4
     9e8:	str	r0, [r1, #-4]
     9ec:	ldr	r0, [sp, #8]
     9f0:	ldr	r1, [r0, #4]
     9f4:	mvn	r2, #0
     9f8:	str	r2, [r0, r1, lsl #4]!
     9fc:	str	r2, [r0, #4]
     a00:	movw	r0, #0
     a04:	str	r0, [fp, #-4]
     a08:	b	a4c <coda_mem_cursor_goto_next_array_element+0x18c>
     a0c:	ldr	r0, [sp, #4]
     a10:	ldr	r0, [r0, #8]
     a14:	cmp	r0, #2
     a18:	bne	a20 <coda_mem_cursor_goto_next_array_element+0x160>
     a1c:	b	a40 <coda_mem_cursor_goto_next_array_element+0x180>
     a20:	movw	r0, #0
     a24:	movt	r0, #0
     a28:	movw	r1, #0
     a2c:	movt	r1, #0
     a30:	movw	r2, #229	; 0xe5
     a34:	movw	r3, #0
     a38:	movt	r3, #0
     a3c:	bl	0 <__assert_fail>
     a40:	ldr	r0, [sp, #8]
     a44:	bl	0 <coda_ascbin_cursor_goto_next_array_element>
     a48:	str	r0, [fp, #-4]
     a4c:	ldr	r0, [fp, #-4]
     a50:	mov	sp, fp
     a54:	pop	{fp, pc}

00000a58 <coda_mem_cursor_goto_attributes>:
     a58:	push	{fp, lr}
     a5c:	mov	fp, sp
     a60:	sub	sp, sp, #8
     a64:	str	r0, [sp, #4]
     a68:	ldr	r0, [sp, #4]
     a6c:	ldr	r1, [r0, #4]
     a70:	add	r1, r1, #1
     a74:	str	r1, [r0, #4]
     a78:	ldr	r0, [sp, #4]
     a7c:	add	r1, r0, #8
     a80:	ldr	r0, [r0, #4]
     a84:	sub	r0, r0, #2
     a88:	add	r0, r1, r0, lsl #4
     a8c:	ldr	r0, [r0]
     a90:	ldr	r0, [r0, #12]
     a94:	movw	r1, #0
     a98:	cmp	r0, r1
     a9c:	beq	ac8 <coda_mem_cursor_goto_attributes+0x70>
     aa0:	ldr	r0, [sp, #4]
     aa4:	add	r1, r0, #8
     aa8:	ldr	r0, [r0, #4]
     aac:	add	r2, r1, r0, lsl #4
     ab0:	ldr	r2, [r2, #-32]	; 0xffffffe0
     ab4:	ldr	r2, [r2, #12]
     ab8:	sub	r0, r0, #1
     abc:	add	r0, r1, r0, lsl #4
     ac0:	str	r2, [r0]
     ac4:	b	afc <coda_mem_cursor_goto_attributes+0xa4>
     ac8:	ldr	r0, [sp, #4]
     acc:	ldr	r1, [r0, #4]
     ad0:	add	r0, r0, r1, lsl #4
     ad4:	ldr	r0, [r0, #-24]	; 0xffffffe8
     ad8:	ldr	r0, [r0, #4]
     adc:	ldr	r0, [r0]
     ae0:	bl	0 <coda_mem_empty_record>
     ae4:	ldr	r1, [sp, #4]
     ae8:	add	lr, r1, #8
     aec:	ldr	r1, [r1, #4]
     af0:	sub	r1, r1, #1
     af4:	add	r1, lr, r1, lsl #4
     af8:	str	r0, [r1]
     afc:	ldr	r0, [sp, #4]
     b00:	ldr	r1, [r0, #4]
     b04:	add	r0, r0, r1, lsl #4
     b08:	mvn	r1, #0
     b0c:	str	r1, [r0, #-4]
     b10:	ldr	r0, [sp, #4]
     b14:	ldr	r2, [r0, #4]
     b18:	str	r1, [r0, r2, lsl #4]!
     b1c:	str	r1, [r0, #4]
     b20:	movw	r0, #0
     b24:	mov	sp, fp
     b28:	pop	{fp, pc}

00000b2c <coda_mem_cursor_use_base_type_of_special_type>:
     b2c:	push	{fp, lr}
     b30:	mov	fp, sp
     b34:	sub	sp, sp, #16
     b38:	str	r0, [sp, #8]
     b3c:	ldr	r0, [sp, #8]
     b40:	add	r1, r0, #8
     b44:	ldr	r0, [r0, #4]
     b48:	sub	r0, r0, #1
     b4c:	add	r0, r1, r0, lsl #4
     b50:	ldr	r0, [r0]
     b54:	str	r0, [sp, #4]
     b58:	ldr	r0, [sp, #4]
     b5c:	ldr	r0, [r0, #8]
     b60:	cmp	r0, #3
     b64:	bne	b90 <coda_mem_cursor_use_base_type_of_special_type+0x64>
     b68:	ldr	r0, [sp, #8]
     b6c:	add	r1, r0, #8
     b70:	ldr	r0, [r0, #4]
     b74:	sub	r0, r0, #1
     b78:	ldr	r0, [r1, r0, lsl #4]!
     b7c:	ldr	r0, [r0, #16]
     b80:	str	r0, [r1]
     b84:	movw	r0, #0
     b88:	str	r0, [fp, #-4]
     b8c:	b	bf0 <coda_mem_cursor_use_base_type_of_special_type+0xc4>
     b90:	ldr	r0, [sp, #4]
     b94:	ldr	r0, [r0, #8]
     b98:	cmp	r0, #2
     b9c:	bne	ba4 <coda_mem_cursor_use_base_type_of_special_type+0x78>
     ba0:	b	bc4 <coda_mem_cursor_use_base_type_of_special_type+0x98>
     ba4:	movw	r0, #0
     ba8:	movt	r0, #0
     bac:	movw	r1, #0
     bb0:	movt	r1, #0
     bb4:	movw	r2, #263	; 0x107
     bb8:	movw	r3, #0
     bbc:	movt	r3, #0
     bc0:	bl	0 <__assert_fail>
     bc4:	ldr	r0, [sp, #4]
     bc8:	ldr	r0, [r0, #4]
     bcc:	ldr	r0, [r0, #44]	; 0x2c
     bd0:	ldr	r1, [sp, #8]
     bd4:	add	r2, r1, #8
     bd8:	ldr	r1, [r1, #4]
     bdc:	sub	r1, r1, #1
     be0:	add	r1, r2, r1, lsl #4
     be4:	str	r0, [r1]
     be8:	movw	r0, #0
     bec:	str	r0, [fp, #-4]
     bf0:	ldr	r0, [fp, #-4]
     bf4:	mov	sp, fp
     bf8:	pop	{fp, pc}

00000bfc <coda_mem_cursor_get_string_length>:
     bfc:	push	{fp, lr}
     c00:	mov	fp, sp
     c04:	sub	sp, sp, #24
     c08:	str	r0, [fp, #-8]
     c0c:	str	r1, [sp, #12]
     c10:	ldr	r0, [fp, #-8]
     c14:	mov	r1, sp
     c18:	bl	c7c <coda_mem_cursor_get_bit_size>
     c1c:	cmp	r0, #0
     c20:	beq	c30 <coda_mem_cursor_get_string_length+0x34>
     c24:	mvn	r0, #0
     c28:	str	r0, [fp, #-4]
     c2c:	b	c70 <coda_mem_cursor_get_string_length+0x74>
     c30:	ldr	r0, [sp, #4]
     c34:	cmn	r0, #1
     c38:	bgt	c50 <coda_mem_cursor_get_string_length+0x54>
     c3c:	b	c40 <coda_mem_cursor_get_string_length+0x44>
     c40:	ldr	r0, [sp, #12]
     c44:	mvn	r1, #0
     c48:	str	r1, [r0]
     c4c:	b	c68 <coda_mem_cursor_get_string_length+0x6c>
     c50:	ldr	r0, [sp]
     c54:	ldr	r1, [sp, #4]
     c58:	lsr	r0, r0, #3
     c5c:	orr	r0, r0, r1, lsl #29
     c60:	ldr	r1, [sp, #12]
     c64:	str	r0, [r1]
     c68:	movw	r0, #0
     c6c:	str	r0, [fp, #-4]
     c70:	ldr	r0, [fp, #-4]
     c74:	mov	sp, fp
     c78:	pop	{fp, pc}

00000c7c <coda_mem_cursor_get_bit_size>:
     c7c:	push	{r4, r5, fp, lr}
     c80:	add	fp, sp, #8
     c84:	sub	sp, sp, #544	; 0x220
     c88:	str	r0, [fp, #-16]
     c8c:	str	r1, [fp, #-20]	; 0xffffffec
     c90:	ldr	r0, [fp, #-16]
     c94:	add	r1, r0, #8
     c98:	ldr	r0, [r0, #4]
     c9c:	sub	r0, r0, #1
     ca0:	add	r0, r1, r0, lsl #4
     ca4:	ldr	r0, [r0]
     ca8:	str	r0, [fp, #-24]	; 0xffffffe8
     cac:	ldr	r0, [fp, #-24]	; 0xffffffe8
     cb0:	ldr	r0, [r0, #8]
     cb4:	cmp	r0, #3
     cb8:	bne	d14 <coda_mem_cursor_get_bit_size+0x98>
     cbc:	ldr	r0, [fp, #-16]
     cc0:	add	r1, sp, #8
     cc4:	mov	r2, r1
     cc8:	str	r0, [sp, #4]
     ccc:	mov	r0, r2
     cd0:	ldr	r2, [sp, #4]
     cd4:	str	r1, [sp]
     cd8:	mov	r1, r2
     cdc:	movw	r2, #520	; 0x208
     ce0:	bl	0 <memcpy>
     ce4:	ldr	r0, [sp]
     ce8:	bl	0 <coda_cursor_use_base_type_of_special_type>
     cec:	cmp	r0, #0
     cf0:	beq	d00 <coda_mem_cursor_get_bit_size+0x84>
     cf4:	mvn	r0, #0
     cf8:	str	r0, [fp, #-12]
     cfc:	b	dcc <coda_mem_cursor_get_bit_size+0x150>
     d00:	ldr	r1, [fp, #-20]	; 0xffffffec
     d04:	add	r0, sp, #8
     d08:	bl	0 <coda_cursor_get_bit_size>
     d0c:	str	r0, [fp, #-12]
     d10:	b	dcc <coda_mem_cursor_get_bit_size+0x150>
     d14:	ldr	r0, [fp, #-24]	; 0xffffffe8
     d18:	ldr	r0, [r0, #8]
     d1c:	cmp	r0, #2
     d20:	bne	db4 <coda_mem_cursor_get_bit_size+0x138>
     d24:	ldr	r0, [fp, #-24]	; 0xffffffe8
     d28:	ldr	r0, [r0, #4]
     d2c:	ldr	r0, [r0]
     d30:	cmp	r0, #0
     d34:	bne	d5c <coda_mem_cursor_get_bit_size+0xe0>
     d38:	ldr	r0, [fp, #-16]
     d3c:	ldr	r1, [fp, #-20]	; 0xffffffec
     d40:	bl	0 <coda_ascii_cursor_get_bit_size>
     d44:	cmp	r0, #0
     d48:	beq	d58 <coda_mem_cursor_get_bit_size+0xdc>
     d4c:	mvn	r0, #0
     d50:	str	r0, [fp, #-12]
     d54:	b	dcc <coda_mem_cursor_get_bit_size+0x150>
     d58:	b	d80 <coda_mem_cursor_get_bit_size+0x104>
     d5c:	ldr	r0, [fp, #-16]
     d60:	ldr	r1, [fp, #-20]	; 0xffffffec
     d64:	bl	0 <coda_bin_cursor_get_bit_size>
     d68:	cmp	r0, #0
     d6c:	beq	d7c <coda_mem_cursor_get_bit_size+0x100>
     d70:	mvn	r0, #0
     d74:	str	r0, [fp, #-12]
     d78:	b	dcc <coda_mem_cursor_get_bit_size+0x150>
     d7c:	b	d80 <coda_mem_cursor_get_bit_size+0x104>
     d80:	ldr	r0, [fp, #-20]	; 0xffffffec
     d84:	ldr	r0, [r0, #4]
     d88:	cmn	r0, #1
     d8c:	bgt	db0 <coda_mem_cursor_get_bit_size+0x134>
     d90:	b	d94 <coda_mem_cursor_get_bit_size+0x118>
     d94:	ldr	r0, [fp, #-24]	; 0xffffffe8
     d98:	ldr	r0, [r0, #16]
     d9c:	lsl	r1, r0, #3
     da0:	sbfx	r0, r0, #28, #1
     da4:	ldr	r2, [fp, #-20]	; 0xffffffec
     da8:	str	r0, [r2, #4]
     dac:	str	r1, [r2]
     db0:	b	dc4 <coda_mem_cursor_get_bit_size+0x148>
     db4:	ldr	r0, [fp, #-20]	; 0xffffffec
     db8:	mvn	r1, #0
     dbc:	str	r1, [r0, #4]
     dc0:	str	r1, [r0]
     dc4:	movw	r0, #0
     dc8:	str	r0, [fp, #-12]
     dcc:	ldr	r0, [fp, #-12]
     dd0:	sub	sp, fp, #8
     dd4:	pop	{r4, r5, fp, pc}

00000dd8 <coda_mem_cursor_get_num_elements>:
     dd8:	push	{fp, lr}
     ddc:	mov	fp, sp
     de0:	sub	sp, sp, #24
     de4:	str	r0, [fp, #-8]
     de8:	str	r1, [sp, #12]
     dec:	ldr	r0, [fp, #-8]
     df0:	ldr	r1, [r0, #4]
     df4:	add	r0, r0, r1, lsl #4
     df8:	ldr	r0, [r0, #-8]
     dfc:	str	r0, [sp, #8]
     e00:	ldr	r0, [sp, #8]
     e04:	ldr	r0, [r0, #8]
     e08:	cmp	r0, #3
     e0c:	str	r0, [sp, #4]
     e10:	bhi	ecc <coda_mem_cursor_get_num_elements+0xf4>
     e14:	add	r0, pc, #8
     e18:	ldr	r1, [sp, #4]
     e1c:	ldr	r0, [r0, r1, lsl #2]
     e20:	mov	pc, r0
     e24:	.word	0x00000e34
     e28:	.word	0x00000e5c
     e2c:	.word	0x00000e84
     e30:	.word	0x00000ec0
     e34:	ldr	r0, [fp, #-8]
     e38:	add	r1, r0, #8
     e3c:	ldr	r0, [r0, #4]
     e40:	sub	r0, r0, #1
     e44:	add	r0, r1, r0, lsl #4
     e48:	ldr	r0, [r0]
     e4c:	ldr	r0, [r0, #16]
     e50:	ldr	r1, [sp, #12]
     e54:	str	r0, [r1]
     e58:	b	ecc <coda_mem_cursor_get_num_elements+0xf4>
     e5c:	ldr	r0, [fp, #-8]
     e60:	add	r1, r0, #8
     e64:	ldr	r0, [r0, #4]
     e68:	sub	r0, r0, #1
     e6c:	add	r0, r1, r0, lsl #4
     e70:	ldr	r0, [r0]
     e74:	ldr	r0, [r0, #16]
     e78:	ldr	r1, [sp, #12]
     e7c:	str	r0, [r1]
     e80:	b	ecc <coda_mem_cursor_get_num_elements+0xf4>
     e84:	ldr	r0, [sp, #8]
     e88:	ldr	r0, [r0, #4]
     e8c:	ldr	r0, [r0]
     e90:	cmp	r0, #0
     e94:	bne	eac <coda_mem_cursor_get_num_elements+0xd4>
     e98:	ldr	r0, [fp, #-8]
     e9c:	ldr	r1, [sp, #12]
     ea0:	bl	0 <coda_ascii_cursor_get_num_elements>
     ea4:	str	r0, [fp, #-4]
     ea8:	b	ed4 <coda_mem_cursor_get_num_elements+0xfc>
     eac:	ldr	r0, [fp, #-8]
     eb0:	ldr	r1, [sp, #12]
     eb4:	bl	0 <coda_bin_cursor_get_num_elements>
     eb8:	str	r0, [fp, #-4]
     ebc:	b	ed4 <coda_mem_cursor_get_num_elements+0xfc>
     ec0:	ldr	r0, [sp, #12]
     ec4:	movw	r1, #1
     ec8:	str	r1, [r0]
     ecc:	movw	r0, #0
     ed0:	str	r0, [fp, #-4]
     ed4:	ldr	r0, [fp, #-4]
     ed8:	mov	sp, fp
     edc:	pop	{fp, pc}

00000ee0 <coda_mem_cursor_get_record_field_available_status>:
     ee0:	push	{fp, lr}
     ee4:	mov	fp, sp
     ee8:	sub	sp, sp, #24
     eec:	str	r0, [fp, #-8]
     ef0:	str	r1, [sp, #12]
     ef4:	str	r2, [sp, #8]
     ef8:	ldr	r0, [fp, #-8]
     efc:	add	r1, r0, #8
     f00:	ldr	r0, [r0, #4]
     f04:	sub	r0, r0, #1
     f08:	add	r0, r1, r0, lsl #4
     f0c:	ldr	r0, [r0]
     f10:	str	r0, [sp, #4]
     f14:	ldr	r0, [sp, #4]
     f18:	ldr	r0, [r0, #8]
     f1c:	cmp	r0, #2
     f20:	bne	f3c <coda_mem_cursor_get_record_field_available_status+0x5c>
     f24:	ldr	r0, [fp, #-8]
     f28:	ldr	r1, [sp, #12]
     f2c:	ldr	r2, [sp, #8]
     f30:	bl	0 <coda_ascbin_cursor_get_record_field_available_status>
     f34:	str	r0, [fp, #-4]
     f38:	b	fec <coda_mem_cursor_get_record_field_available_status+0x10c>
     f3c:	ldr	r0, [sp, #4]
     f40:	ldr	r0, [r0, #8]
     f44:	cmp	r0, #0
     f48:	bne	f50 <coda_mem_cursor_get_record_field_available_status+0x70>
     f4c:	b	f70 <coda_mem_cursor_get_record_field_available_status+0x90>
     f50:	movw	r0, #0
     f54:	movt	r0, #0
     f58:	movw	r1, #0
     f5c:	movt	r1, #0
     f60:	movw	r2, #364	; 0x16c
     f64:	movw	r3, #0
     f68:	movt	r3, #0
     f6c:	bl	0 <__assert_fail>
     f70:	ldr	r0, [sp, #12]
     f74:	cmp	r0, #0
     f78:	blt	f90 <coda_mem_cursor_get_record_field_available_status+0xb0>
     f7c:	ldr	r0, [sp, #12]
     f80:	ldr	r1, [sp, #4]
     f84:	ldr	r1, [r1, #16]
     f88:	cmp	r0, r1
     f8c:	blt	fb8 <coda_mem_cursor_get_record_field_available_status+0xd8>
     f90:	ldr	r2, [sp, #12]
     f94:	ldr	r0, [sp, #4]
     f98:	ldr	r3, [r0, #16]
     f9c:	mvn	r0, #100	; 0x64
     fa0:	movw	r1, #0
     fa4:	movt	r1, #0
     fa8:	bl	0 <coda_set_error>
     fac:	mvn	r0, #0
     fb0:	str	r0, [fp, #-4]
     fb4:	b	fec <coda_mem_cursor_get_record_field_available_status+0x10c>
     fb8:	ldr	r0, [sp, #4]
     fbc:	ldr	r0, [r0, #20]
     fc0:	ldr	r1, [sp, #12]
     fc4:	add	r0, r0, r1, lsl #2
     fc8:	ldr	r0, [r0]
     fcc:	movw	r1, #0
     fd0:	cmp	r0, r1
     fd4:	movw	r0, #0
     fd8:	movne	r0, #1
     fdc:	and	r0, r0, #1
     fe0:	ldr	r2, [sp, #8]
     fe4:	str	r0, [r2]
     fe8:	str	r1, [fp, #-4]
     fec:	ldr	r0, [fp, #-4]
     ff0:	mov	sp, fp
     ff4:	pop	{fp, pc}

00000ff8 <coda_mem_cursor_get_array_dim>:
     ff8:	push	{fp, lr}
     ffc:	mov	fp, sp
    1000:	sub	sp, sp, #32
    1004:	str	r0, [fp, #-8]
    1008:	str	r1, [fp, #-12]
    100c:	str	r2, [sp, #16]
    1010:	ldr	r0, [fp, #-8]
    1014:	add	r1, r0, #8
    1018:	ldr	r0, [r0, #4]
    101c:	sub	r0, r0, #1
    1020:	add	r0, r1, r0, lsl #4
    1024:	ldr	r0, [r0]
    1028:	str	r0, [sp, #12]
    102c:	ldr	r0, [sp, #12]
    1030:	ldr	r0, [r0, #8]
    1034:	cmp	r0, #2
    1038:	bne	1054 <coda_mem_cursor_get_array_dim+0x5c>
    103c:	ldr	r0, [fp, #-8]
    1040:	ldr	r1, [fp, #-12]
    1044:	ldr	r2, [sp, #16]
    1048:	bl	0 <coda_ascbin_cursor_get_array_dim>
    104c:	str	r0, [fp, #-4]
    1050:	b	1144 <coda_mem_cursor_get_array_dim+0x14c>
    1054:	ldr	r0, [sp, #12]
    1058:	ldr	r0, [r0, #8]
    105c:	cmp	r0, #1
    1060:	bne	1068 <coda_mem_cursor_get_array_dim+0x70>
    1064:	b	1088 <coda_mem_cursor_get_array_dim+0x90>
    1068:	movw	r0, #0
    106c:	movt	r0, #0
    1070:	movw	r1, #0
    1074:	movt	r1, #0
    1078:	movw	r2, #413	; 0x19d
    107c:	movw	r3, #0
    1080:	movt	r3, #0
    1084:	bl	0 <__assert_fail>
    1088:	ldr	r0, [fp, #-8]
    108c:	add	r1, r0, #8
    1090:	ldr	r0, [r0, #4]
    1094:	sub	r0, r0, #1
    1098:	add	r0, r1, r0, lsl #4
    109c:	ldr	r0, [r0]
    10a0:	str	r0, [sp, #8]
    10a4:	ldr	r0, [sp, #8]
    10a8:	ldr	r0, [r0, #4]
    10ac:	ldr	r0, [r0, #44]	; 0x2c
    10b0:	cmp	r0, #0
    10b4:	blt	1120 <coda_mem_cursor_get_array_dim+0x128>
    10b8:	ldr	r0, [sp, #8]
    10bc:	ldr	r0, [r0, #4]
    10c0:	ldr	r0, [r0, #48]	; 0x30
    10c4:	ldr	r1, [fp, #-12]
    10c8:	str	r0, [r1]
    10cc:	movw	r0, #0
    10d0:	str	r0, [sp, #4]
    10d4:	ldr	r0, [sp, #4]
    10d8:	ldr	r1, [sp, #8]
    10dc:	ldr	r1, [r1, #4]
    10e0:	ldr	r1, [r1, #48]	; 0x30
    10e4:	cmp	r0, r1
    10e8:	bge	111c <coda_mem_cursor_get_array_dim+0x124>
    10ec:	ldr	r0, [sp, #8]
    10f0:	ldr	r0, [r0, #4]
    10f4:	ldr	r1, [sp, #4]
    10f8:	add	r0, r0, r1, lsl #2
    10fc:	ldr	r0, [r0, #52]	; 0x34
    1100:	ldr	r2, [sp, #16]
    1104:	add	r1, r2, r1, lsl #2
    1108:	str	r0, [r1]
    110c:	ldr	r0, [sp, #4]
    1110:	add	r0, r0, #1
    1114:	str	r0, [sp, #4]
    1118:	b	10d4 <coda_mem_cursor_get_array_dim+0xdc>
    111c:	b	113c <coda_mem_cursor_get_array_dim+0x144>
    1120:	ldr	r0, [fp, #-12]
    1124:	movw	r1, #1
    1128:	str	r1, [r0]
    112c:	ldr	r0, [sp, #8]
    1130:	ldr	r0, [r0, #16]
    1134:	ldr	r1, [sp, #16]
    1138:	str	r0, [r1]
    113c:	movw	r0, #0
    1140:	str	r0, [fp, #-4]
    1144:	ldr	r0, [fp, #-4]
    1148:	mov	sp, fp
    114c:	pop	{fp, pc}

00001150 <coda_mem_cursor_read_int8>:
    1150:	push	{fp, lr}
    1154:	mov	fp, sp
    1158:	sub	sp, sp, #16
    115c:	str	r0, [sp, #8]
    1160:	str	r1, [sp, #4]
    1164:	ldr	r0, [sp, #8]
    1168:	add	r1, r0, #8
    116c:	ldr	r0, [r0, #4]
    1170:	sub	r0, r0, #1
    1174:	add	r0, r1, r0, lsl #4
    1178:	ldr	r0, [r0]
    117c:	str	r0, [sp]
    1180:	ldr	r0, [sp]
    1184:	ldr	r0, [r0, #8]
    1188:	cmp	r0, #2
    118c:	bne	1194 <coda_mem_cursor_read_int8+0x44>
    1190:	b	11b4 <coda_mem_cursor_read_int8+0x64>
    1194:	movw	r0, #0
    1198:	movt	r0, #0
    119c:	movw	r1, #0
    11a0:	movt	r1, #0
    11a4:	movw	r2, #439	; 0x1b7
    11a8:	movw	r3, #0
    11ac:	movt	r3, #0
    11b0:	bl	0 <__assert_fail>
    11b4:	ldr	r0, [sp]
    11b8:	ldr	r0, [r0, #4]
    11bc:	ldr	r0, [r0]
    11c0:	cmp	r0, #0
    11c4:	bne	11dc <coda_mem_cursor_read_int8+0x8c>
    11c8:	ldr	r0, [sp, #8]
    11cc:	ldr	r1, [sp, #4]
    11d0:	bl	0 <coda_ascii_cursor_read_int8>
    11d4:	str	r0, [fp, #-4]
    11d8:	b	11ec <coda_mem_cursor_read_int8+0x9c>
    11dc:	ldr	r0, [sp, #8]
    11e0:	ldr	r1, [sp, #4]
    11e4:	bl	0 <coda_bin_cursor_read_int8>
    11e8:	str	r0, [fp, #-4]
    11ec:	ldr	r0, [fp, #-4]
    11f0:	mov	sp, fp
    11f4:	pop	{fp, pc}

000011f8 <coda_mem_cursor_read_uint8>:
    11f8:	push	{fp, lr}
    11fc:	mov	fp, sp
    1200:	sub	sp, sp, #16
    1204:	str	r0, [sp, #8]
    1208:	str	r1, [sp, #4]
    120c:	ldr	r0, [sp, #8]
    1210:	add	r1, r0, #8
    1214:	ldr	r0, [r0, #4]
    1218:	sub	r0, r0, #1
    121c:	add	r0, r1, r0, lsl #4
    1220:	ldr	r0, [r0]
    1224:	str	r0, [sp]
    1228:	ldr	r0, [sp]
    122c:	ldr	r0, [r0, #8]
    1230:	cmp	r0, #2
    1234:	bne	123c <coda_mem_cursor_read_uint8+0x44>
    1238:	b	125c <coda_mem_cursor_read_uint8+0x64>
    123c:	movw	r0, #0
    1240:	movt	r0, #0
    1244:	movw	r1, #0
    1248:	movt	r1, #0
    124c:	movw	r2, #451	; 0x1c3
    1250:	movw	r3, #0
    1254:	movt	r3, #0
    1258:	bl	0 <__assert_fail>
    125c:	ldr	r0, [sp]
    1260:	ldr	r0, [r0, #4]
    1264:	ldr	r0, [r0]
    1268:	cmp	r0, #0
    126c:	bne	1284 <coda_mem_cursor_read_uint8+0x8c>
    1270:	ldr	r0, [sp, #8]
    1274:	ldr	r1, [sp, #4]
    1278:	bl	0 <coda_ascii_cursor_read_uint8>
    127c:	str	r0, [fp, #-4]
    1280:	b	1294 <coda_mem_cursor_read_uint8+0x9c>
    1284:	ldr	r0, [sp, #8]
    1288:	ldr	r1, [sp, #4]
    128c:	bl	0 <coda_bin_cursor_read_uint8>
    1290:	str	r0, [fp, #-4]
    1294:	ldr	r0, [fp, #-4]
    1298:	mov	sp, fp
    129c:	pop	{fp, pc}

000012a0 <coda_mem_cursor_read_int16>:
    12a0:	push	{fp, lr}
    12a4:	mov	fp, sp
    12a8:	sub	sp, sp, #16
    12ac:	str	r0, [sp, #8]
    12b0:	str	r1, [sp, #4]
    12b4:	ldr	r0, [sp, #8]
    12b8:	add	r1, r0, #8
    12bc:	ldr	r0, [r0, #4]
    12c0:	sub	r0, r0, #1
    12c4:	add	r0, r1, r0, lsl #4
    12c8:	ldr	r0, [r0]
    12cc:	str	r0, [sp]
    12d0:	ldr	r0, [sp]
    12d4:	ldr	r0, [r0, #8]
    12d8:	cmp	r0, #2
    12dc:	bne	12e4 <coda_mem_cursor_read_int16+0x44>
    12e0:	b	1304 <coda_mem_cursor_read_int16+0x64>
    12e4:	movw	r0, #0
    12e8:	movt	r0, #0
    12ec:	movw	r1, #0
    12f0:	movt	r1, #0
    12f4:	movw	r2, #463	; 0x1cf
    12f8:	movw	r3, #0
    12fc:	movt	r3, #0
    1300:	bl	0 <__assert_fail>
    1304:	ldr	r0, [sp]
    1308:	ldr	r0, [r0, #4]
    130c:	ldr	r0, [r0]
    1310:	cmp	r0, #0
    1314:	bne	132c <coda_mem_cursor_read_int16+0x8c>
    1318:	ldr	r0, [sp, #8]
    131c:	ldr	r1, [sp, #4]
    1320:	bl	0 <coda_ascii_cursor_read_int16>
    1324:	str	r0, [fp, #-4]
    1328:	b	133c <coda_mem_cursor_read_int16+0x9c>
    132c:	ldr	r0, [sp, #8]
    1330:	ldr	r1, [sp, #4]
    1334:	bl	0 <coda_bin_cursor_read_int16>
    1338:	str	r0, [fp, #-4]
    133c:	ldr	r0, [fp, #-4]
    1340:	mov	sp, fp
    1344:	pop	{fp, pc}

00001348 <coda_mem_cursor_read_uint16>:
    1348:	push	{fp, lr}
    134c:	mov	fp, sp
    1350:	sub	sp, sp, #16
    1354:	str	r0, [sp, #8]
    1358:	str	r1, [sp, #4]
    135c:	ldr	r0, [sp, #8]
    1360:	add	r1, r0, #8
    1364:	ldr	r0, [r0, #4]
    1368:	sub	r0, r0, #1
    136c:	add	r0, r1, r0, lsl #4
    1370:	ldr	r0, [r0]
    1374:	str	r0, [sp]
    1378:	ldr	r0, [sp]
    137c:	ldr	r0, [r0, #8]
    1380:	cmp	r0, #2
    1384:	bne	138c <coda_mem_cursor_read_uint16+0x44>
    1388:	b	13ac <coda_mem_cursor_read_uint16+0x64>
    138c:	movw	r0, #0
    1390:	movt	r0, #0
    1394:	movw	r1, #0
    1398:	movt	r1, #0
    139c:	movw	r2, #475	; 0x1db
    13a0:	movw	r3, #0
    13a4:	movt	r3, #0
    13a8:	bl	0 <__assert_fail>
    13ac:	ldr	r0, [sp]
    13b0:	ldr	r0, [r0, #4]
    13b4:	ldr	r0, [r0]
    13b8:	cmp	r0, #0
    13bc:	bne	13d4 <coda_mem_cursor_read_uint16+0x8c>
    13c0:	ldr	r0, [sp, #8]
    13c4:	ldr	r1, [sp, #4]
    13c8:	bl	0 <coda_ascii_cursor_read_uint16>
    13cc:	str	r0, [fp, #-4]
    13d0:	b	13e4 <coda_mem_cursor_read_uint16+0x9c>
    13d4:	ldr	r0, [sp, #8]
    13d8:	ldr	r1, [sp, #4]
    13dc:	bl	0 <coda_bin_cursor_read_uint16>
    13e0:	str	r0, [fp, #-4]
    13e4:	ldr	r0, [fp, #-4]
    13e8:	mov	sp, fp
    13ec:	pop	{fp, pc}

000013f0 <coda_mem_cursor_read_int32>:
    13f0:	push	{fp, lr}
    13f4:	mov	fp, sp
    13f8:	sub	sp, sp, #16
    13fc:	str	r0, [sp, #8]
    1400:	str	r1, [sp, #4]
    1404:	ldr	r0, [sp, #8]
    1408:	add	r1, r0, #8
    140c:	ldr	r0, [r0, #4]
    1410:	sub	r0, r0, #1
    1414:	add	r0, r1, r0, lsl #4
    1418:	ldr	r0, [r0]
    141c:	str	r0, [sp]
    1420:	ldr	r0, [sp]
    1424:	ldr	r0, [r0, #8]
    1428:	cmp	r0, #2
    142c:	bne	1434 <coda_mem_cursor_read_int32+0x44>
    1430:	b	1454 <coda_mem_cursor_read_int32+0x64>
    1434:	movw	r0, #0
    1438:	movt	r0, #0
    143c:	movw	r1, #0
    1440:	movt	r1, #0
    1444:	movw	r2, #487	; 0x1e7
    1448:	movw	r3, #0
    144c:	movt	r3, #0
    1450:	bl	0 <__assert_fail>
    1454:	ldr	r0, [sp]
    1458:	ldr	r0, [r0, #4]
    145c:	ldr	r0, [r0]
    1460:	cmp	r0, #0
    1464:	bne	147c <coda_mem_cursor_read_int32+0x8c>
    1468:	ldr	r0, [sp, #8]
    146c:	ldr	r1, [sp, #4]
    1470:	bl	0 <coda_ascii_cursor_read_int32>
    1474:	str	r0, [fp, #-4]
    1478:	b	148c <coda_mem_cursor_read_int32+0x9c>
    147c:	ldr	r0, [sp, #8]
    1480:	ldr	r1, [sp, #4]
    1484:	bl	0 <coda_bin_cursor_read_int32>
    1488:	str	r0, [fp, #-4]
    148c:	ldr	r0, [fp, #-4]
    1490:	mov	sp, fp
    1494:	pop	{fp, pc}

00001498 <coda_mem_cursor_read_uint32>:
    1498:	push	{fp, lr}
    149c:	mov	fp, sp
    14a0:	sub	sp, sp, #16
    14a4:	str	r0, [sp, #8]
    14a8:	str	r1, [sp, #4]
    14ac:	ldr	r0, [sp, #8]
    14b0:	add	r1, r0, #8
    14b4:	ldr	r0, [r0, #4]
    14b8:	sub	r0, r0, #1
    14bc:	add	r0, r1, r0, lsl #4
    14c0:	ldr	r0, [r0]
    14c4:	str	r0, [sp]
    14c8:	ldr	r0, [sp]
    14cc:	ldr	r0, [r0, #8]
    14d0:	cmp	r0, #2
    14d4:	bne	14dc <coda_mem_cursor_read_uint32+0x44>
    14d8:	b	14fc <coda_mem_cursor_read_uint32+0x64>
    14dc:	movw	r0, #0
    14e0:	movt	r0, #0
    14e4:	movw	r1, #0
    14e8:	movt	r1, #0
    14ec:	movw	r2, #499	; 0x1f3
    14f0:	movw	r3, #0
    14f4:	movt	r3, #0
    14f8:	bl	0 <__assert_fail>
    14fc:	ldr	r0, [sp]
    1500:	ldr	r0, [r0, #4]
    1504:	ldr	r0, [r0]
    1508:	cmp	r0, #0
    150c:	bne	1524 <coda_mem_cursor_read_uint32+0x8c>
    1510:	ldr	r0, [sp, #8]
    1514:	ldr	r1, [sp, #4]
    1518:	bl	0 <coda_ascii_cursor_read_uint32>
    151c:	str	r0, [fp, #-4]
    1520:	b	1534 <coda_mem_cursor_read_uint32+0x9c>
    1524:	ldr	r0, [sp, #8]
    1528:	ldr	r1, [sp, #4]
    152c:	bl	0 <coda_bin_cursor_read_uint32>
    1530:	str	r0, [fp, #-4]
    1534:	ldr	r0, [fp, #-4]
    1538:	mov	sp, fp
    153c:	pop	{fp, pc}

00001540 <coda_mem_cursor_read_int64>:
    1540:	push	{fp, lr}
    1544:	mov	fp, sp
    1548:	sub	sp, sp, #16
    154c:	str	r0, [sp, #8]
    1550:	str	r1, [sp, #4]
    1554:	ldr	r0, [sp, #8]
    1558:	add	r1, r0, #8
    155c:	ldr	r0, [r0, #4]
    1560:	sub	r0, r0, #1
    1564:	add	r0, r1, r0, lsl #4
    1568:	ldr	r0, [r0]
    156c:	str	r0, [sp]
    1570:	ldr	r0, [sp]
    1574:	ldr	r0, [r0, #8]
    1578:	cmp	r0, #2
    157c:	bne	1584 <coda_mem_cursor_read_int64+0x44>
    1580:	b	15a4 <coda_mem_cursor_read_int64+0x64>
    1584:	movw	r0, #0
    1588:	movt	r0, #0
    158c:	movw	r1, #0
    1590:	movt	r1, #0
    1594:	movw	r2, #511	; 0x1ff
    1598:	movw	r3, #0
    159c:	movt	r3, #0
    15a0:	bl	0 <__assert_fail>
    15a4:	ldr	r0, [sp]
    15a8:	ldr	r0, [r0, #4]
    15ac:	ldr	r0, [r0]
    15b0:	cmp	r0, #0
    15b4:	bne	15cc <coda_mem_cursor_read_int64+0x8c>
    15b8:	ldr	r0, [sp, #8]
    15bc:	ldr	r1, [sp, #4]
    15c0:	bl	0 <coda_ascii_cursor_read_int64>
    15c4:	str	r0, [fp, #-4]
    15c8:	b	15dc <coda_mem_cursor_read_int64+0x9c>
    15cc:	ldr	r0, [sp, #8]
    15d0:	ldr	r1, [sp, #4]
    15d4:	bl	0 <coda_bin_cursor_read_int64>
    15d8:	str	r0, [fp, #-4]
    15dc:	ldr	r0, [fp, #-4]
    15e0:	mov	sp, fp
    15e4:	pop	{fp, pc}

000015e8 <coda_mem_cursor_read_uint64>:
    15e8:	push	{fp, lr}
    15ec:	mov	fp, sp
    15f0:	sub	sp, sp, #16
    15f4:	str	r0, [sp, #8]
    15f8:	str	r1, [sp, #4]
    15fc:	ldr	r0, [sp, #8]
    1600:	add	r1, r0, #8
    1604:	ldr	r0, [r0, #4]
    1608:	sub	r0, r0, #1
    160c:	add	r0, r1, r0, lsl #4
    1610:	ldr	r0, [r0]
    1614:	str	r0, [sp]
    1618:	ldr	r0, [sp]
    161c:	ldr	r0, [r0, #8]
    1620:	cmp	r0, #2
    1624:	bne	162c <coda_mem_cursor_read_uint64+0x44>
    1628:	b	164c <coda_mem_cursor_read_uint64+0x64>
    162c:	movw	r0, #0
    1630:	movt	r0, #0
    1634:	movw	r1, #0
    1638:	movt	r1, #0
    163c:	movw	r2, #523	; 0x20b
    1640:	movw	r3, #0
    1644:	movt	r3, #0
    1648:	bl	0 <__assert_fail>
    164c:	ldr	r0, [sp]
    1650:	ldr	r0, [r0, #4]
    1654:	ldr	r0, [r0]
    1658:	cmp	r0, #0
    165c:	bne	1674 <coda_mem_cursor_read_uint64+0x8c>
    1660:	ldr	r0, [sp, #8]
    1664:	ldr	r1, [sp, #4]
    1668:	bl	0 <coda_ascii_cursor_read_uint64>
    166c:	str	r0, [fp, #-4]
    1670:	b	1684 <coda_mem_cursor_read_uint64+0x9c>
    1674:	ldr	r0, [sp, #8]
    1678:	ldr	r1, [sp, #4]
    167c:	bl	0 <coda_bin_cursor_read_uint64>
    1680:	str	r0, [fp, #-4]
    1684:	ldr	r0, [fp, #-4]
    1688:	mov	sp, fp
    168c:	pop	{fp, pc}

00001690 <coda_mem_cursor_read_float>:
    1690:	push	{fp, lr}
    1694:	mov	fp, sp
    1698:	sub	sp, sp, #16
    169c:	str	r0, [sp, #8]
    16a0:	str	r1, [sp, #4]
    16a4:	ldr	r0, [sp, #8]
    16a8:	add	r1, r0, #8
    16ac:	ldr	r0, [r0, #4]
    16b0:	sub	r0, r0, #1
    16b4:	add	r0, r1, r0, lsl #4
    16b8:	ldr	r0, [r0]
    16bc:	str	r0, [sp]
    16c0:	ldr	r0, [sp]
    16c4:	ldr	r0, [r0, #8]
    16c8:	cmp	r0, #2
    16cc:	bne	16d4 <coda_mem_cursor_read_float+0x44>
    16d0:	b	16f4 <coda_mem_cursor_read_float+0x64>
    16d4:	movw	r0, #0
    16d8:	movt	r0, #0
    16dc:	movw	r1, #0
    16e0:	movt	r1, #0
    16e4:	movw	r2, #535	; 0x217
    16e8:	movw	r3, #0
    16ec:	movt	r3, #0
    16f0:	bl	0 <__assert_fail>
    16f4:	ldr	r0, [sp]
    16f8:	ldr	r0, [r0, #4]
    16fc:	ldr	r0, [r0]
    1700:	cmp	r0, #0
    1704:	bne	171c <coda_mem_cursor_read_float+0x8c>
    1708:	ldr	r0, [sp, #8]
    170c:	ldr	r1, [sp, #4]
    1710:	bl	0 <coda_ascii_cursor_read_float>
    1714:	str	r0, [fp, #-4]
    1718:	b	172c <coda_mem_cursor_read_float+0x9c>
    171c:	ldr	r0, [sp, #8]
    1720:	ldr	r1, [sp, #4]
    1724:	bl	0 <coda_bin_cursor_read_float>
    1728:	str	r0, [fp, #-4]
    172c:	ldr	r0, [fp, #-4]
    1730:	mov	sp, fp
    1734:	pop	{fp, pc}

00001738 <coda_mem_cursor_read_double>:
    1738:	push	{fp, lr}
    173c:	mov	fp, sp
    1740:	sub	sp, sp, #16
    1744:	str	r0, [sp, #8]
    1748:	str	r1, [sp, #4]
    174c:	ldr	r0, [sp, #8]
    1750:	add	r1, r0, #8
    1754:	ldr	r0, [r0, #4]
    1758:	sub	r0, r0, #1
    175c:	add	r0, r1, r0, lsl #4
    1760:	ldr	r0, [r0]
    1764:	str	r0, [sp]
    1768:	ldr	r0, [sp]
    176c:	ldr	r0, [r0, #8]
    1770:	cmp	r0, #2
    1774:	bne	177c <coda_mem_cursor_read_double+0x44>
    1778:	b	179c <coda_mem_cursor_read_double+0x64>
    177c:	movw	r0, #0
    1780:	movt	r0, #0
    1784:	movw	r1, #0
    1788:	movt	r1, #0
    178c:	movw	r2, #547	; 0x223
    1790:	movw	r3, #0
    1794:	movt	r3, #0
    1798:	bl	0 <__assert_fail>
    179c:	ldr	r0, [sp]
    17a0:	ldr	r0, [r0, #4]
    17a4:	ldr	r0, [r0]
    17a8:	cmp	r0, #0
    17ac:	bne	17c4 <coda_mem_cursor_read_double+0x8c>
    17b0:	ldr	r0, [sp, #8]
    17b4:	ldr	r1, [sp, #4]
    17b8:	bl	0 <coda_ascii_cursor_read_double>
    17bc:	str	r0, [fp, #-4]
    17c0:	b	17d4 <coda_mem_cursor_read_double+0x9c>
    17c4:	ldr	r0, [sp, #8]
    17c8:	ldr	r1, [sp, #4]
    17cc:	bl	0 <coda_bin_cursor_read_double>
    17d0:	str	r0, [fp, #-4]
    17d4:	ldr	r0, [fp, #-4]
    17d8:	mov	sp, fp
    17dc:	pop	{fp, pc}

000017e0 <coda_mem_cursor_read_char>:
    17e0:	push	{fp, lr}
    17e4:	mov	fp, sp
    17e8:	sub	sp, sp, #16
    17ec:	str	r0, [sp, #8]
    17f0:	str	r1, [sp, #4]
    17f4:	ldr	r0, [sp, #8]
    17f8:	add	r1, r0, #8
    17fc:	ldr	r0, [r0, #4]
    1800:	sub	r0, r0, #1
    1804:	add	r0, r1, r0, lsl #4
    1808:	ldr	r0, [r0]
    180c:	str	r0, [sp]
    1810:	ldr	r0, [sp]
    1814:	ldr	r0, [r0, #8]
    1818:	cmp	r0, #2
    181c:	bne	1824 <coda_mem_cursor_read_char+0x44>
    1820:	b	1844 <coda_mem_cursor_read_char+0x64>
    1824:	movw	r0, #0
    1828:	movt	r0, #0
    182c:	movw	r1, #0
    1830:	movt	r1, #0
    1834:	movw	r2, #559	; 0x22f
    1838:	movw	r3, #0
    183c:	movt	r3, #0
    1840:	bl	0 <__assert_fail>
    1844:	ldr	r0, [sp]
    1848:	ldr	r0, [r0, #4]
    184c:	ldr	r0, [r0]
    1850:	cmp	r0, #0
    1854:	beq	186c <coda_mem_cursor_read_char+0x8c>
    1858:	ldr	r0, [sp]
    185c:	ldr	r0, [r0, #4]
    1860:	ldr	r0, [r0]
    1864:	cmp	r0, #2
    1868:	bne	1880 <coda_mem_cursor_read_char+0xa0>
    186c:	ldr	r0, [sp, #8]
    1870:	ldr	r1, [sp, #4]
    1874:	bl	0 <coda_ascii_cursor_read_char>
    1878:	str	r0, [fp, #-4]
    187c:	b	1890 <coda_mem_cursor_read_char+0xb0>
    1880:	ldr	r0, [sp, #8]
    1884:	ldr	r1, [sp, #4]
    1888:	bl	0 <coda_bin_cursor_read_char>
    188c:	str	r0, [fp, #-4]
    1890:	ldr	r0, [fp, #-4]
    1894:	mov	sp, fp
    1898:	pop	{fp, pc}

0000189c <coda_mem_cursor_read_string>:
    189c:	push	{r4, r5, fp, lr}
    18a0:	add	fp, sp, #8
    18a4:	sub	sp, sp, #552	; 0x228
    18a8:	str	r0, [fp, #-16]
    18ac:	str	r1, [fp, #-20]	; 0xffffffec
    18b0:	str	r2, [fp, #-24]	; 0xffffffe8
    18b4:	ldr	r0, [fp, #-16]
    18b8:	add	r1, r0, #8
    18bc:	ldr	r0, [r0, #4]
    18c0:	sub	r0, r0, #1
    18c4:	add	r0, r1, r0, lsl #4
    18c8:	ldr	r0, [r0]
    18cc:	str	r0, [fp, #-28]	; 0xffffffe4
    18d0:	ldr	r0, [fp, #-28]	; 0xffffffe4
    18d4:	ldr	r0, [r0, #8]
    18d8:	cmp	r0, #3
    18dc:	bne	193c <coda_mem_cursor_read_string+0xa0>
    18e0:	ldr	r0, [fp, #-16]
    18e4:	add	r1, sp, #8
    18e8:	mov	r2, r1
    18ec:	str	r0, [sp, #4]
    18f0:	mov	r0, r2
    18f4:	ldr	r2, [sp, #4]
    18f8:	str	r1, [sp]
    18fc:	mov	r1, r2
    1900:	movw	r2, #520	; 0x208
    1904:	bl	0 <memcpy>
    1908:	ldr	r0, [sp]
    190c:	bl	0 <coda_cursor_use_base_type_of_special_type>
    1910:	cmp	r0, #0
    1914:	beq	1924 <coda_mem_cursor_read_string+0x88>
    1918:	mvn	r0, #0
    191c:	str	r0, [fp, #-12]
    1920:	b	1984 <coda_mem_cursor_read_string+0xe8>
    1924:	ldr	r1, [fp, #-20]	; 0xffffffec
    1928:	ldr	r2, [fp, #-24]	; 0xffffffe8
    192c:	add	r0, sp, #8
    1930:	bl	0 <coda_cursor_read_string>
    1934:	str	r0, [fp, #-12]
    1938:	b	1984 <coda_mem_cursor_read_string+0xe8>
    193c:	ldr	r0, [fp, #-28]	; 0xffffffe4
    1940:	ldr	r0, [r0, #8]
    1944:	cmp	r0, #2
    1948:	bne	1950 <coda_mem_cursor_read_string+0xb4>
    194c:	b	1970 <coda_mem_cursor_read_string+0xd4>
    1950:	movw	r0, #0
    1954:	movt	r0, #0
    1958:	movw	r1, #0
    195c:	movt	r1, #0
    1960:	movw	r2, #582	; 0x246
    1964:	movw	r3, #0
    1968:	movt	r3, #0
    196c:	bl	0 <__assert_fail>
    1970:	ldr	r0, [fp, #-16]
    1974:	ldr	r1, [fp, #-20]	; 0xffffffec
    1978:	ldr	r2, [fp, #-24]	; 0xffffffe8
    197c:	bl	0 <coda_ascii_cursor_read_string>
    1980:	str	r0, [fp, #-12]
    1984:	ldr	r0, [fp, #-12]
    1988:	sub	sp, fp, #8
    198c:	pop	{r4, r5, fp, pc}

00001990 <coda_mem_cursor_read_bits>:
    1990:	push	{r4, sl, fp, lr}
    1994:	add	fp, sp, #8
    1998:	sub	sp, sp, #576	; 0x240
    199c:	ldr	ip, [fp, #12]
    19a0:	ldr	lr, [fp, #8]
    19a4:	str	r0, [fp, #-16]
    19a8:	str	r1, [fp, #-20]	; 0xffffffec
    19ac:	str	r3, [fp, #-28]	; 0xffffffe4
    19b0:	str	r2, [fp, #-32]	; 0xffffffe0
    19b4:	str	ip, [fp, #-36]	; 0xffffffdc
    19b8:	str	lr, [fp, #-40]	; 0xffffffd8
    19bc:	ldr	r0, [fp, #-16]
    19c0:	add	r1, r0, #8
    19c4:	ldr	r0, [r0, #4]
    19c8:	sub	r0, r0, #1
    19cc:	add	r0, r1, r0, lsl #4
    19d0:	ldr	r0, [r0]
    19d4:	str	r0, [fp, #-44]	; 0xffffffd4
    19d8:	ldr	r0, [fp, #-44]	; 0xffffffd4
    19dc:	ldr	r0, [r0, #8]
    19e0:	cmp	r0, #3
    19e4:	bne	1a5c <coda_mem_cursor_read_bits+0xcc>
    19e8:	ldr	r0, [fp, #-16]
    19ec:	add	r1, sp, #16
    19f0:	mov	r2, r1
    19f4:	str	r0, [sp, #12]
    19f8:	mov	r0, r2
    19fc:	ldr	r2, [sp, #12]
    1a00:	str	r1, [sp, #8]
    1a04:	mov	r1, r2
    1a08:	movw	r2, #520	; 0x208
    1a0c:	bl	0 <memcpy>
    1a10:	ldr	r0, [sp, #8]
    1a14:	bl	0 <coda_cursor_use_base_type_of_special_type>
    1a18:	cmp	r0, #0
    1a1c:	beq	1a2c <coda_mem_cursor_read_bits+0x9c>
    1a20:	mvn	r0, #0
    1a24:	str	r0, [fp, #-12]
    1a28:	b	1af8 <coda_mem_cursor_read_bits+0x168>
    1a2c:	ldr	r1, [fp, #-20]	; 0xffffffec
    1a30:	ldr	r2, [fp, #-32]	; 0xffffffe0
    1a34:	ldr	r3, [fp, #-28]	; 0xffffffe4
    1a38:	ldr	r0, [fp, #-40]	; 0xffffffd8
    1a3c:	ldr	ip, [fp, #-36]	; 0xffffffdc
    1a40:	mov	lr, sp
    1a44:	str	ip, [lr, #4]
    1a48:	str	r0, [lr]
    1a4c:	add	r0, sp, #16
    1a50:	bl	0 <coda_cursor_read_bits>
    1a54:	str	r0, [fp, #-12]
    1a58:	b	1af8 <coda_mem_cursor_read_bits+0x168>
    1a5c:	ldr	r0, [fp, #-44]	; 0xffffffd4
    1a60:	ldr	r0, [r0, #8]
    1a64:	cmp	r0, #2
    1a68:	bne	1ae0 <coda_mem_cursor_read_bits+0x150>
    1a6c:	ldr	r0, [fp, #-44]	; 0xffffffd4
    1a70:	ldr	r0, [r0, #4]
    1a74:	ldr	r0, [r0]
    1a78:	cmp	r0, #0
    1a7c:	bne	1ab0 <coda_mem_cursor_read_bits+0x120>
    1a80:	ldr	r0, [fp, #-16]
    1a84:	ldr	r1, [fp, #-20]	; 0xffffffec
    1a88:	ldr	r2, [fp, #-32]	; 0xffffffe0
    1a8c:	ldr	r3, [fp, #-28]	; 0xffffffe4
    1a90:	ldr	ip, [fp, #-40]	; 0xffffffd8
    1a94:	ldr	lr, [fp, #-36]	; 0xffffffdc
    1a98:	mov	r4, sp
    1a9c:	str	lr, [r4, #4]
    1aa0:	str	ip, [r4]
    1aa4:	bl	0 <coda_ascii_cursor_read_bits>
    1aa8:	str	r0, [fp, #-12]
    1aac:	b	1af8 <coda_mem_cursor_read_bits+0x168>
    1ab0:	ldr	r0, [fp, #-16]
    1ab4:	ldr	r1, [fp, #-20]	; 0xffffffec
    1ab8:	ldr	r2, [fp, #-32]	; 0xffffffe0
    1abc:	ldr	r3, [fp, #-28]	; 0xffffffe4
    1ac0:	ldr	ip, [fp, #-40]	; 0xffffffd8
    1ac4:	ldr	lr, [fp, #-36]	; 0xffffffdc
    1ac8:	mov	r4, sp
    1acc:	str	lr, [r4, #4]
    1ad0:	str	ip, [r4]
    1ad4:	bl	0 <coda_bin_cursor_read_bits>
    1ad8:	str	r0, [fp, #-12]
    1adc:	b	1af8 <coda_mem_cursor_read_bits+0x168>
    1ae0:	mvn	r0, #104	; 0x68
    1ae4:	movw	r1, #0
    1ae8:	movt	r1, #0
    1aec:	bl	0 <coda_set_error>
    1af0:	mvn	r0, #0
    1af4:	str	r0, [fp, #-12]
    1af8:	ldr	r0, [fp, #-12]
    1afc:	sub	sp, fp, #8
    1b00:	pop	{r4, sl, fp, pc}

00001b04 <coda_mem_cursor_read_bytes>:
    1b04:	push	{r4, sl, fp, lr}
    1b08:	add	fp, sp, #8
    1b0c:	sub	sp, sp, #576	; 0x240
    1b10:	ldr	ip, [fp, #12]
    1b14:	ldr	lr, [fp, #8]
    1b18:	str	r0, [fp, #-16]
    1b1c:	str	r1, [fp, #-20]	; 0xffffffec
    1b20:	str	r3, [fp, #-28]	; 0xffffffe4
    1b24:	str	r2, [fp, #-32]	; 0xffffffe0
    1b28:	str	ip, [fp, #-36]	; 0xffffffdc
    1b2c:	str	lr, [fp, #-40]	; 0xffffffd8
    1b30:	ldr	r0, [fp, #-16]
    1b34:	add	r1, r0, #8
    1b38:	ldr	r0, [r0, #4]
    1b3c:	sub	r0, r0, #1
    1b40:	add	r0, r1, r0, lsl #4
    1b44:	ldr	r0, [r0]
    1b48:	str	r0, [fp, #-44]	; 0xffffffd4
    1b4c:	ldr	r0, [fp, #-44]	; 0xffffffd4
    1b50:	ldr	r0, [r0, #8]
    1b54:	cmp	r0, #3
    1b58:	bne	1bd0 <coda_mem_cursor_read_bytes+0xcc>
    1b5c:	ldr	r0, [fp, #-16]
    1b60:	add	r1, sp, #16
    1b64:	mov	r2, r1
    1b68:	str	r0, [sp, #12]
    1b6c:	mov	r0, r2
    1b70:	ldr	r2, [sp, #12]
    1b74:	str	r1, [sp, #8]
    1b78:	mov	r1, r2
    1b7c:	movw	r2, #520	; 0x208
    1b80:	bl	0 <memcpy>
    1b84:	ldr	r0, [sp, #8]
    1b88:	bl	0 <coda_cursor_use_base_type_of_special_type>
    1b8c:	cmp	r0, #0
    1b90:	beq	1ba0 <coda_mem_cursor_read_bytes+0x9c>
    1b94:	mvn	r0, #0
    1b98:	str	r0, [fp, #-12]
    1b9c:	b	1c80 <coda_mem_cursor_read_bytes+0x17c>
    1ba0:	ldr	r1, [fp, #-20]	; 0xffffffec
    1ba4:	ldr	r2, [fp, #-32]	; 0xffffffe0
    1ba8:	ldr	r3, [fp, #-28]	; 0xffffffe4
    1bac:	ldr	r0, [fp, #-40]	; 0xffffffd8
    1bb0:	ldr	ip, [fp, #-36]	; 0xffffffdc
    1bb4:	mov	lr, sp
    1bb8:	str	ip, [lr, #4]
    1bbc:	str	r0, [lr]
    1bc0:	add	r0, sp, #16
    1bc4:	bl	0 <coda_cursor_read_bytes>
    1bc8:	str	r0, [fp, #-12]
    1bcc:	b	1c80 <coda_mem_cursor_read_bytes+0x17c>
    1bd0:	ldr	r0, [fp, #-44]	; 0xffffffd4
    1bd4:	ldr	r0, [r0, #8]
    1bd8:	cmp	r0, #2
    1bdc:	bne	1c68 <coda_mem_cursor_read_bytes+0x164>
    1be0:	ldr	r0, [fp, #-44]	; 0xffffffd4
    1be4:	ldr	r0, [r0, #4]
    1be8:	ldr	r0, [r0]
    1bec:	cmp	r0, #0
    1bf0:	beq	1c08 <coda_mem_cursor_read_bytes+0x104>
    1bf4:	ldr	r0, [fp, #-44]	; 0xffffffd4
    1bf8:	ldr	r0, [r0, #4]
    1bfc:	ldr	r0, [r0]
    1c00:	cmp	r0, #2
    1c04:	bne	1c38 <coda_mem_cursor_read_bytes+0x134>
    1c08:	ldr	r0, [fp, #-16]
    1c0c:	ldr	r1, [fp, #-20]	; 0xffffffec
    1c10:	ldr	r2, [fp, #-32]	; 0xffffffe0
    1c14:	ldr	r3, [fp, #-28]	; 0xffffffe4
    1c18:	ldr	ip, [fp, #-40]	; 0xffffffd8
    1c1c:	ldr	lr, [fp, #-36]	; 0xffffffdc
    1c20:	mov	r4, sp
    1c24:	str	lr, [r4, #4]
    1c28:	str	ip, [r4]
    1c2c:	bl	0 <coda_ascii_cursor_read_bytes>
    1c30:	str	r0, [fp, #-12]
    1c34:	b	1c80 <coda_mem_cursor_read_bytes+0x17c>
    1c38:	ldr	r0, [fp, #-16]
    1c3c:	ldr	r1, [fp, #-20]	; 0xffffffec
    1c40:	ldr	r2, [fp, #-32]	; 0xffffffe0
    1c44:	ldr	r3, [fp, #-28]	; 0xffffffe4
    1c48:	ldr	ip, [fp, #-40]	; 0xffffffd8
    1c4c:	ldr	lr, [fp, #-36]	; 0xffffffdc
    1c50:	mov	r4, sp
    1c54:	str	lr, [r4, #4]
    1c58:	str	ip, [r4]
    1c5c:	bl	0 <coda_bin_cursor_read_bytes>
    1c60:	str	r0, [fp, #-12]
    1c64:	b	1c80 <coda_mem_cursor_read_bytes+0x17c>
    1c68:	mvn	r0, #104	; 0x68
    1c6c:	movw	r1, #0
    1c70:	movt	r1, #0
    1c74:	bl	0 <coda_set_error>
    1c78:	mvn	r0, #0
    1c7c:	str	r0, [fp, #-12]
    1c80:	ldr	r0, [fp, #-12]
    1c84:	sub	sp, fp, #8
    1c88:	pop	{r4, sl, fp, pc}

00001c8c <coda_mem_cursor_read_int8_array>:
    1c8c:	push	{fp, lr}
    1c90:	mov	fp, sp
    1c94:	sub	sp, sp, #32
    1c98:	str	r0, [fp, #-8]
    1c9c:	str	r1, [fp, #-12]
    1ca0:	str	r2, [sp, #16]
    1ca4:	ldr	r0, [fp, #-8]
    1ca8:	add	r1, r0, #8
    1cac:	ldr	r0, [r0, #4]
    1cb0:	sub	r0, r0, #1
    1cb4:	add	r0, r1, r0, lsl #4
    1cb8:	ldr	r0, [r0]
    1cbc:	str	r0, [sp, #12]
    1cc0:	ldr	r0, [sp, #12]
    1cc4:	ldr	r0, [r0, #8]
    1cc8:	cmp	r0, #1
    1ccc:	bne	1d04 <coda_mem_cursor_read_int8_array+0x78>
    1cd0:	ldr	r0, [fp, #-8]
    1cd4:	ldr	r2, [fp, #-12]
    1cd8:	ldr	r1, [sp, #16]
    1cdc:	movw	r3, #0
    1ce0:	movt	r3, #0
    1ce4:	str	r1, [sp, #8]
    1ce8:	mov	r1, r3
    1cec:	movw	r3, #1
    1cf0:	ldr	ip, [sp, #8]
    1cf4:	str	ip, [sp]
    1cf8:	bl	1e3c <read_array>
    1cfc:	str	r0, [fp, #-4]
    1d00:	b	1e30 <coda_mem_cursor_read_int8_array+0x1a4>
    1d04:	ldr	r0, [sp, #12]
    1d08:	ldr	r0, [r0, #8]
    1d0c:	cmp	r0, #2
    1d10:	bne	1d18 <coda_mem_cursor_read_int8_array+0x8c>
    1d14:	b	1d38 <coda_mem_cursor_read_int8_array+0xac>
    1d18:	movw	r0, #0
    1d1c:	movt	r0, #0
    1d20:	movw	r1, #0
    1d24:	movt	r1, #0
    1d28:	movw	r2, #651	; 0x28b
    1d2c:	movw	r3, #0
    1d30:	movt	r3, #0
    1d34:	bl	0 <__assert_fail>
    1d38:	ldr	r0, [sp, #12]
    1d3c:	ldr	r0, [r0, #4]
    1d40:	ldr	r0, [r0, #40]	; 0x28
    1d44:	ldr	r0, [r0]
    1d48:	cmp	r0, #1
    1d4c:	bne	1d84 <coda_mem_cursor_read_int8_array+0xf8>
    1d50:	ldr	r0, [fp, #-8]
    1d54:	ldr	r2, [fp, #-12]
    1d58:	ldr	r1, [sp, #16]
    1d5c:	movw	r3, #0
    1d60:	movt	r3, #0
    1d64:	str	r1, [sp, #4]
    1d68:	mov	r1, r3
    1d6c:	movw	r3, #1
    1d70:	ldr	ip, [sp, #4]
    1d74:	str	ip, [sp]
    1d78:	bl	1e3c <read_array>
    1d7c:	str	r0, [fp, #-4]
    1d80:	b	1e30 <coda_mem_cursor_read_int8_array+0x1a4>
    1d84:	ldr	r0, [sp, #12]
    1d88:	ldr	r0, [r0, #4]
    1d8c:	ldr	r0, [r0, #40]	; 0x28
    1d90:	ldr	r0, [r0]
    1d94:	cmp	r0, #0
    1d98:	bne	1da0 <coda_mem_cursor_read_int8_array+0x114>
    1d9c:	b	1dc0 <coda_mem_cursor_read_int8_array+0x134>
    1da0:	movw	r0, #0
    1da4:	movt	r0, #0
    1da8:	movw	r1, #0
    1dac:	movt	r1, #0
    1db0:	movw	r2, #657	; 0x291
    1db4:	movw	r3, #0
    1db8:	movt	r3, #0
    1dbc:	bl	0 <__assert_fail>
    1dc0:	ldr	r0, [fp, #-8]
    1dc4:	ldr	r2, [fp, #-12]
    1dc8:	movw	r1, #0
    1dcc:	movt	r1, #0
    1dd0:	movw	r3, #1
    1dd4:	movw	ip, #0
    1dd8:	str	ip, [sp]
    1ddc:	bl	1e3c <read_array>
    1de0:	cmp	r0, #0
    1de4:	beq	1df4 <coda_mem_cursor_read_int8_array+0x168>
    1de8:	mvn	r0, #0
    1dec:	str	r0, [fp, #-4]
    1df0:	b	1e30 <coda_mem_cursor_read_int8_array+0x1a4>
    1df4:	ldr	r0, [sp, #16]
    1df8:	cmp	r0, #0
    1dfc:	beq	1e28 <coda_mem_cursor_read_int8_array+0x19c>
    1e00:	ldr	r0, [fp, #-8]
    1e04:	ldr	r1, [fp, #-12]
    1e08:	movw	r2, #1
    1e0c:	bl	2220 <transpose_array>
    1e10:	cmp	r0, #0
    1e14:	beq	1e24 <coda_mem_cursor_read_int8_array+0x198>
    1e18:	mvn	r0, #0
    1e1c:	str	r0, [fp, #-4]
    1e20:	b	1e30 <coda_mem_cursor_read_int8_array+0x1a4>
    1e24:	b	1e28 <coda_mem_cursor_read_int8_array+0x19c>
    1e28:	movw	r0, #0
    1e2c:	str	r0, [fp, #-4]
    1e30:	ldr	r0, [fp, #-4]
    1e34:	mov	sp, fp
    1e38:	pop	{fp, pc}

00001e3c <read_array>:
    1e3c:	push	{r4, r5, fp, lr}
    1e40:	add	fp, sp, #8
    1e44:	sub	sp, sp, #664	; 0x298
    1e48:	ldr	ip, [fp, #8]
    1e4c:	add	lr, sp, #88	; 0x58
    1e50:	str	r0, [fp, #-16]
    1e54:	str	r1, [fp, #-20]	; 0xffffffec
    1e58:	str	r2, [fp, #-24]	; 0xffffffe8
    1e5c:	str	r3, [fp, #-28]	; 0xffffffe4
    1e60:	ldr	r0, [fp, #-16]
    1e64:	add	r1, sp, #84	; 0x54
    1e68:	mov	r2, lr
    1e6c:	str	ip, [sp, #24]
    1e70:	bl	0 <coda_cursor_get_array_dim>
    1e74:	cmp	r0, #0
    1e78:	beq	1e88 <read_array+0x4c>
    1e7c:	mvn	r0, #0
    1e80:	str	r0, [fp, #-12]
    1e84:	b	2214 <read_array+0x3d8>
    1e88:	ldr	r0, [fp, #-16]
    1e8c:	add	r1, sp, #120	; 0x78
    1e90:	str	r0, [sp, #20]
    1e94:	mov	r0, r1
    1e98:	ldr	r1, [sp, #20]
    1e9c:	movw	r2, #520	; 0x208
    1ea0:	bl	0 <memcpy>
    1ea4:	ldr	r0, [sp, #84]	; 0x54
    1ea8:	cmp	r0, #1
    1eac:	ble	1ebc <read_array+0x80>
    1eb0:	ldr	r0, [fp, #8]
    1eb4:	cmp	r0, #1
    1eb8:	beq	1fdc <read_array+0x1a0>
    1ebc:	movw	r0, #1
    1ec0:	str	r0, [sp, #80]	; 0x50
    1ec4:	movw	r0, #0
    1ec8:	str	r0, [sp, #76]	; 0x4c
    1ecc:	ldr	r0, [sp, #76]	; 0x4c
    1ed0:	ldr	r1, [sp, #84]	; 0x54
    1ed4:	cmp	r0, r1
    1ed8:	bge	1f08 <read_array+0xcc>
    1edc:	ldr	r0, [sp, #76]	; 0x4c
    1ee0:	add	r1, sp, #88	; 0x58
    1ee4:	add	r0, r1, r0, lsl #2
    1ee8:	ldr	r0, [r0]
    1eec:	ldr	r1, [sp, #80]	; 0x50
    1ef0:	mul	r0, r1, r0
    1ef4:	str	r0, [sp, #80]	; 0x50
    1ef8:	ldr	r0, [sp, #76]	; 0x4c
    1efc:	add	r0, r0, #1
    1f00:	str	r0, [sp, #76]	; 0x4c
    1f04:	b	1ecc <read_array+0x90>
    1f08:	ldr	r0, [sp, #80]	; 0x50
    1f0c:	cmp	r0, #0
    1f10:	ble	1fd8 <read_array+0x19c>
    1f14:	add	r0, sp, #120	; 0x78
    1f18:	movw	r1, #0
    1f1c:	bl	0 <coda_cursor_goto_array_element_by_index>
    1f20:	cmp	r0, #0
    1f24:	beq	1f34 <read_array+0xf8>
    1f28:	mvn	r0, #0
    1f2c:	str	r0, [fp, #-12]
    1f30:	b	2214 <read_array+0x3d8>
    1f34:	movw	r0, #0
    1f38:	str	r0, [sp, #76]	; 0x4c
    1f3c:	ldr	r0, [sp, #76]	; 0x4c
    1f40:	ldr	r1, [sp, #80]	; 0x50
    1f44:	cmp	r0, r1
    1f48:	bge	1fd4 <read_array+0x198>
    1f4c:	ldr	r0, [fp, #-20]	; 0xffffffec
    1f50:	ldr	r1, [fp, #-24]	; 0xffffffe8
    1f54:	ldr	r2, [sp, #76]	; 0x4c
    1f58:	ldr	r3, [fp, #-28]	; 0xffffffe4
    1f5c:	mul	r2, r2, r3
    1f60:	add	r1, r1, r2
    1f64:	add	r2, sp, #120	; 0x78
    1f68:	str	r0, [sp, #16]
    1f6c:	mov	r0, r2
    1f70:	ldr	r2, [sp, #16]
    1f74:	blx	r2
    1f78:	cmp	r0, #0
    1f7c:	beq	1f8c <read_array+0x150>
    1f80:	mvn	r0, #0
    1f84:	str	r0, [fp, #-12]
    1f88:	b	2214 <read_array+0x3d8>
    1f8c:	ldr	r0, [sp, #76]	; 0x4c
    1f90:	ldr	r1, [sp, #80]	; 0x50
    1f94:	sub	r1, r1, #1
    1f98:	cmp	r0, r1
    1f9c:	bge	1fc0 <read_array+0x184>
    1fa0:	add	r0, sp, #120	; 0x78
    1fa4:	bl	0 <coda_cursor_goto_next_array_element>
    1fa8:	cmp	r0, #0
    1fac:	beq	1fbc <read_array+0x180>
    1fb0:	mvn	r0, #0
    1fb4:	str	r0, [fp, #-12]
    1fb8:	b	2214 <read_array+0x3d8>
    1fbc:	b	1fc0 <read_array+0x184>
    1fc0:	b	1fc4 <read_array+0x188>
    1fc4:	ldr	r0, [sp, #76]	; 0x4c
    1fc8:	add	r0, r0, #1
    1fcc:	str	r0, [sp, #76]	; 0x4c
    1fd0:	b	1f3c <read_array+0x100>
    1fd4:	b	1fd8 <read_array+0x19c>
    1fd8:	b	220c <read_array+0x3d0>
    1fdc:	movw	r0, #1
    1fe0:	str	r0, [sp, #40]	; 0x28
    1fe4:	movw	r0, #0
    1fe8:	str	r0, [sp, #76]	; 0x4c
    1fec:	ldr	r0, [sp, #76]	; 0x4c
    1ff0:	ldr	r1, [sp, #84]	; 0x54
    1ff4:	cmp	r0, r1
    1ff8:	bge	2030 <read_array+0x1f4>
    1ffc:	ldr	r0, [sp, #76]	; 0x4c
    2000:	add	r1, sp, #40	; 0x28
    2004:	ldr	r2, [r1, r0, lsl #2]
    2008:	add	r3, sp, #88	; 0x58
    200c:	ldr	r3, [r3, r0, lsl #2]
    2010:	mul	r2, r2, r3
    2014:	add	r0, r0, #1
    2018:	add	r0, r1, r0, lsl #2
    201c:	str	r2, [r0]
    2020:	ldr	r0, [sp, #76]	; 0x4c
    2024:	add	r0, r0, #1
    2028:	str	r0, [sp, #76]	; 0x4c
    202c:	b	1fec <read_array+0x1b0>
    2030:	ldr	r0, [sp, #84]	; 0x54
    2034:	add	r1, sp, #40	; 0x28
    2038:	add	r0, r1, r0, lsl #2
    203c:	ldr	r0, [r0, #-4]
    2040:	str	r0, [sp, #36]	; 0x24
    2044:	ldr	r0, [sp, #84]	; 0x54
    2048:	add	r0, r1, r0, lsl #2
    204c:	ldr	r0, [r0]
    2050:	str	r0, [sp, #80]	; 0x50
    2054:	ldr	r0, [sp, #80]	; 0x50
    2058:	cmp	r0, #0
    205c:	ble	2208 <read_array+0x3cc>
    2060:	movw	r0, #0
    2064:	str	r0, [sp, #32]
    2068:	str	r0, [sp, #28]
    206c:	add	r1, sp, #120	; 0x78
    2070:	str	r0, [sp, #12]
    2074:	mov	r0, r1
    2078:	ldr	r1, [sp, #12]
    207c:	bl	0 <coda_cursor_goto_array_element_by_index>
    2080:	cmp	r0, #0
    2084:	beq	2094 <read_array+0x258>
    2088:	mvn	r0, #0
    208c:	str	r0, [fp, #-12]
    2090:	b	2214 <read_array+0x3d8>
    2094:	b	2098 <read_array+0x25c>
    2098:	b	209c <read_array+0x260>
    209c:	ldr	r0, [fp, #-20]	; 0xffffffec
    20a0:	ldr	r1, [fp, #-24]	; 0xffffffe8
    20a4:	ldr	r2, [sp, #28]
    20a8:	ldr	r3, [fp, #-28]	; 0xffffffe4
    20ac:	mul	r2, r2, r3
    20b0:	add	r1, r1, r2
    20b4:	add	r2, sp, #120	; 0x78
    20b8:	str	r0, [sp, #8]
    20bc:	mov	r0, r2
    20c0:	ldr	r2, [sp, #8]
    20c4:	blx	r2
    20c8:	cmp	r0, #0
    20cc:	beq	20dc <read_array+0x2a0>
    20d0:	mvn	r0, #0
    20d4:	str	r0, [fp, #-12]
    20d8:	b	2214 <read_array+0x3d8>
    20dc:	ldr	r0, [sp, #32]
    20e0:	add	r0, r0, #1
    20e4:	str	r0, [sp, #32]
    20e8:	ldr	r0, [sp, #32]
    20ec:	ldr	r1, [sp, #80]	; 0x50
    20f0:	cmp	r0, r1
    20f4:	bge	2118 <read_array+0x2dc>
    20f8:	add	r0, sp, #120	; 0x78
    20fc:	bl	0 <coda_cursor_goto_next_array_element>
    2100:	cmp	r0, #0
    2104:	beq	2114 <read_array+0x2d8>
    2108:	mvn	r0, #0
    210c:	str	r0, [fp, #-12]
    2110:	b	2214 <read_array+0x3d8>
    2114:	b	2118 <read_array+0x2dc>
    2118:	ldr	r0, [sp, #36]	; 0x24
    211c:	ldr	r1, [sp, #28]
    2120:	add	r0, r1, r0
    2124:	str	r0, [sp, #28]
    2128:	ldr	r0, [sp, #28]
    212c:	ldr	r1, [sp, #80]	; 0x50
    2130:	cmp	r0, r1
    2134:	blt	209c <read_array+0x260>
    2138:	ldr	r0, [sp, #32]
    213c:	ldr	r1, [sp, #80]	; 0x50
    2140:	cmp	r0, r1
    2144:	bne	214c <read_array+0x310>
    2148:	b	2204 <read_array+0x3c8>
    214c:	ldr	r0, [sp, #84]	; 0x54
    2150:	add	r1, sp, #40	; 0x28
    2154:	add	r0, r1, r0, lsl #2
    2158:	ldr	r1, [r0, #-8]
    215c:	ldr	r0, [r0]
    2160:	sub	r0, r1, r0
    2164:	ldr	r1, [sp, #28]
    2168:	add	r0, r1, r0
    216c:	str	r0, [sp, #28]
    2170:	ldr	r0, [sp, #84]	; 0x54
    2174:	sub	r0, r0, #3
    2178:	str	r0, [sp, #76]	; 0x4c
    217c:	ldr	r0, [sp, #76]	; 0x4c
    2180:	cmp	r0, #0
    2184:	movw	r0, #0
    2188:	str	r0, [sp, #4]
    218c:	blt	21b8 <read_array+0x37c>
    2190:	ldr	r0, [sp, #28]
    2194:	ldr	r1, [sp, #76]	; 0x4c
    2198:	add	r1, r1, #2
    219c:	add	r2, sp, #40	; 0x28
    21a0:	add	r1, r2, r1, lsl #2
    21a4:	ldr	r1, [r1]
    21a8:	cmp	r0, r1
    21ac:	movw	r0, #0
    21b0:	movge	r0, #1
    21b4:	str	r0, [sp, #4]
    21b8:	ldr	r0, [sp, #4]
    21bc:	tst	r0, #1
    21c0:	beq	2200 <read_array+0x3c4>
    21c4:	ldr	r0, [sp, #76]	; 0x4c
    21c8:	add	r1, sp, #40	; 0x28
    21cc:	ldr	r2, [r1, r0, lsl #2]
    21d0:	add	r0, r0, #2
    21d4:	add	r0, r1, r0, lsl #2
    21d8:	ldr	r0, [r0]
    21dc:	sub	r0, r2, r0
    21e0:	ldr	r1, [sp, #28]
    21e4:	add	r0, r1, r0
    21e8:	str	r0, [sp, #28]
    21ec:	ldr	r0, [sp, #76]	; 0x4c
    21f0:	mvn	r1, #0
    21f4:	add	r0, r0, r1
    21f8:	str	r0, [sp, #76]	; 0x4c
    21fc:	b	217c <read_array+0x340>
    2200:	b	2098 <read_array+0x25c>
    2204:	b	2208 <read_array+0x3cc>
    2208:	b	220c <read_array+0x3d0>
    220c:	movw	r0, #0
    2210:	str	r0, [fp, #-12]
    2214:	ldr	r0, [fp, #-12]
    2218:	sub	sp, fp, #8
    221c:	pop	{r4, r5, fp, pc}

00002220 <transpose_array>:
    2220:	push	{fp, lr}
    2224:	mov	fp, sp
    2228:	sub	sp, sp, #208	; 0xd0
    222c:	sub	r3, fp, #48	; 0x30
    2230:	str	r0, [fp, #-8]
    2234:	str	r1, [fp, #-12]
    2238:	str	r2, [fp, #-16]
    223c:	movw	r0, #0
    2240:	str	r0, [sp, #40]	; 0x28
    2244:	ldr	r0, [fp, #-8]
    2248:	sub	r1, fp, #52	; 0x34
    224c:	mov	r2, r3
    2250:	bl	0 <coda_cursor_get_array_dim>
    2254:	cmp	r0, #0
    2258:	beq	2268 <transpose_array+0x48>
    225c:	mvn	r0, #0
    2260:	str	r0, [fp, #-4]
    2264:	b	28c4 <transpose_array+0x6a4>
    2268:	ldr	r0, [fp, #-52]	; 0xffffffcc
    226c:	cmp	r0, #1
    2270:	bgt	2280 <transpose_array+0x60>
    2274:	movw	r0, #0
    2278:	str	r0, [fp, #-4]
    227c:	b	28c4 <transpose_array+0x6a4>
    2280:	ldr	r0, [fp, #-12]
    2284:	str	r0, [sp, #32]
    2288:	movw	r0, #1
    228c:	str	r0, [fp, #-56]	; 0xffffffc8
    2290:	movw	r0, #0
    2294:	str	r0, [sp, #36]	; 0x24
    2298:	ldr	r0, [sp, #36]	; 0x24
    229c:	ldr	r1, [fp, #-52]	; 0xffffffcc
    22a0:	cmp	r0, r1
    22a4:	bge	2300 <transpose_array+0xe0>
    22a8:	ldr	r0, [sp, #36]	; 0x24
    22ac:	sub	r1, fp, #48	; 0x30
    22b0:	ldr	r0, [r1, r0, lsl #2]
    22b4:	ldr	r2, [fp, #-56]	; 0xffffffc8
    22b8:	mul	r0, r2, r0
    22bc:	str	r0, [fp, #-56]	; 0xffffffc8
    22c0:	ldr	r0, [sp, #36]	; 0x24
    22c4:	add	r2, sp, #80	; 0x50
    22c8:	mov	r3, #0
    22cc:	str	r3, [r2, r0, lsl #2]
    22d0:	ldr	r0, [fp, #-52]	; 0xffffffcc
    22d4:	sub	r0, r0, #1
    22d8:	ldr	r2, [sp, #36]	; 0x24
    22dc:	sub	r0, r0, r2
    22e0:	ldr	r0, [r1, r0, lsl #2]
    22e4:	add	r1, sp, #44	; 0x2c
    22e8:	add	r1, r1, r2, lsl #2
    22ec:	str	r0, [r1]
    22f0:	ldr	r0, [sp, #36]	; 0x24
    22f4:	add	r0, r0, #1
    22f8:	str	r0, [sp, #36]	; 0x24
    22fc:	b	2298 <transpose_array+0x78>
    2300:	ldr	r0, [fp, #-56]	; 0xffffffc8
    2304:	cmp	r0, #1
    2308:	bgt	2318 <transpose_array+0xf8>
    230c:	movw	r0, #0
    2310:	str	r0, [fp, #-4]
    2314:	b	28c4 <transpose_array+0x6a4>
    2318:	ldr	r0, [fp, #-52]	; 0xffffffcc
    231c:	sub	r1, fp, #92	; 0x5c
    2320:	mov	r2, #1
    2324:	str	r2, [r1, r0, lsl #2]
    2328:	ldr	r0, [fp, #-52]	; 0xffffffcc
    232c:	add	r1, sp, #44	; 0x2c
    2330:	add	r0, r1, r0, lsl #2
    2334:	movw	r1, #1
    2338:	str	r1, [r0]
    233c:	ldr	r0, [fp, #-52]	; 0xffffffcc
    2340:	str	r0, [sp, #36]	; 0x24
    2344:	ldr	r0, [sp, #36]	; 0x24
    2348:	cmp	r0, #0
    234c:	ble	2388 <transpose_array+0x168>
    2350:	ldr	r0, [sp, #36]	; 0x24
    2354:	sub	r1, fp, #92	; 0x5c
    2358:	ldr	r2, [r1, r0, lsl #2]
    235c:	add	r3, sp, #44	; 0x2c
    2360:	ldr	r3, [r3, r0, lsl #2]
    2364:	mul	r2, r2, r3
    2368:	sub	r0, r0, #1
    236c:	add	r0, r1, r0, lsl #2
    2370:	str	r2, [r0]
    2374:	ldr	r0, [sp, #36]	; 0x24
    2378:	mvn	r1, #0
    237c:	add	r0, r0, r1
    2380:	str	r0, [sp, #36]	; 0x24
    2384:	b	2344 <transpose_array+0x124>
    2388:	ldr	r0, [fp, #-52]	; 0xffffffcc
    238c:	add	r1, sp, #44	; 0x2c
    2390:	mov	r2, #0
    2394:	str	r2, [r1, r0, lsl #2]
    2398:	ldr	r0, [fp, #-52]	; 0xffffffcc
    239c:	add	r1, sp, #80	; 0x50
    23a0:	add	r0, r1, r0, lsl #2
    23a4:	movw	r1, #0
    23a8:	str	r1, [r0]
    23ac:	ldr	r0, [fp, #-56]	; 0xffffffc8
    23b0:	ldr	r1, [fp, #-16]
    23b4:	mul	r0, r0, r1
    23b8:	bl	0 <malloc>
    23bc:	str	r0, [sp, #28]
    23c0:	ldr	r0, [sp, #28]
    23c4:	movw	r1, #0
    23c8:	cmp	r0, r1
    23cc:	bne	2408 <transpose_array+0x1e8>
    23d0:	ldr	r0, [fp, #-56]	; 0xffffffc8
    23d4:	ldr	r1, [fp, #-16]
    23d8:	mul	r2, r0, r1
    23dc:	mvn	r0, #0
    23e0:	movw	r1, #0
    23e4:	movt	r1, #0
    23e8:	movw	r3, #0
    23ec:	movt	r3, #0
    23f0:	movw	ip, #93	; 0x5d
    23f4:	str	ip, [sp]
    23f8:	bl	0 <coda_set_error>
    23fc:	mvn	r0, #0
    2400:	str	r0, [fp, #-4]
    2404:	b	28c4 <transpose_array+0x6a4>
    2408:	ldr	r0, [fp, #-16]
    240c:	sub	r0, r0, #1
    2410:	cmp	r0, #7
    2414:	str	r0, [sp, #8]
    2418:	bhi	287c <transpose_array+0x65c>
    241c:	add	r0, pc, #8
    2420:	ldr	r1, [sp, #8]
    2424:	ldr	r0, [r0, r1, lsl #2]
    2428:	mov	pc, r0
    242c:	.word	0x0000244c
    2430:	.word	0x00002554
    2434:	.word	0x0000287c
    2438:	.word	0x00002664
    243c:	.word	0x0000287c
    2440:	.word	0x0000287c
    2444:	.word	0x0000287c
    2448:	.word	0x0000276c
    244c:	movw	r0, #0
    2450:	str	r0, [sp, #36]	; 0x24
    2454:	ldr	r0, [sp, #36]	; 0x24
    2458:	ldr	r1, [fp, #-56]	; 0xffffffc8
    245c:	cmp	r0, r1
    2460:	bge	2550 <transpose_array+0x330>
    2464:	mov	r0, #0
    2468:	str	r0, [sp, #24]
    246c:	ldr	r0, [sp, #32]
    2470:	ldr	r1, [sp, #36]	; 0x24
    2474:	ldrb	r0, [r0, r1]
    2478:	ldr	r1, [sp, #28]
    247c:	ldr	r2, [sp, #40]	; 0x28
    2480:	strb	r0, [r1, r2]
    2484:	ldr	r0, [sp, #24]
    2488:	sub	r1, fp, #92	; 0x5c
    248c:	ldr	r0, [r1, r0, lsl #2]
    2490:	ldr	r1, [sp, #40]	; 0x28
    2494:	add	r0, r1, r0
    2498:	str	r0, [sp, #40]	; 0x28
    249c:	ldr	r0, [sp, #24]
    24a0:	add	r1, sp, #80	; 0x50
    24a4:	add	r0, r1, r0, lsl #2
    24a8:	ldr	r1, [r0]
    24ac:	add	r1, r1, #1
    24b0:	str	r1, [r0]
    24b4:	ldr	r0, [sp, #24]
    24b8:	add	r1, sp, #80	; 0x50
    24bc:	ldr	r1, [r1, r0, lsl #2]
    24c0:	add	r2, sp, #44	; 0x2c
    24c4:	add	r0, r2, r0, lsl #2
    24c8:	ldr	r0, [r0]
    24cc:	cmp	r1, r0
    24d0:	bne	253c <transpose_array+0x31c>
    24d4:	ldr	r0, [sp, #24]
    24d8:	add	r1, sp, #80	; 0x50
    24dc:	mov	r2, #0
    24e0:	str	r2, [r1, r0, lsl #2]
    24e4:	ldr	r0, [sp, #24]
    24e8:	sub	r2, fp, #92	; 0x5c
    24ec:	ldr	r3, [r2, r0, lsl #2]
    24f0:	add	ip, sp, #44	; 0x2c
    24f4:	ldr	r0, [ip, r0, lsl #2]
    24f8:	ldr	ip, [sp, #40]	; 0x28
    24fc:	mls	r0, r3, r0, ip
    2500:	str	r0, [sp, #40]	; 0x28
    2504:	ldr	r0, [sp, #24]
    2508:	add	r0, r0, #1
    250c:	str	r0, [sp, #24]
    2510:	ldr	r0, [sp, #24]
    2514:	ldr	r0, [r2, r0, lsl #2]
    2518:	ldr	r2, [sp, #40]	; 0x28
    251c:	add	r0, r2, r0
    2520:	str	r0, [sp, #40]	; 0x28
    2524:	ldr	r0, [sp, #24]
    2528:	add	r0, r1, r0, lsl #2
    252c:	ldr	r1, [r0]
    2530:	add	r1, r1, #1
    2534:	str	r1, [r0]
    2538:	b	24b4 <transpose_array+0x294>
    253c:	b	2540 <transpose_array+0x320>
    2540:	ldr	r0, [sp, #36]	; 0x24
    2544:	add	r0, r0, #1
    2548:	str	r0, [sp, #36]	; 0x24
    254c:	b	2454 <transpose_array+0x234>
    2550:	b	289c <transpose_array+0x67c>
    2554:	movw	r0, #0
    2558:	str	r0, [sp, #36]	; 0x24
    255c:	ldr	r0, [sp, #36]	; 0x24
    2560:	ldr	r1, [fp, #-56]	; 0xffffffc8
    2564:	cmp	r0, r1
    2568:	bge	2660 <transpose_array+0x440>
    256c:	mov	r0, #0
    2570:	str	r0, [sp, #20]
    2574:	ldr	r0, [sp, #32]
    2578:	ldr	r1, [sp, #36]	; 0x24
    257c:	add	r0, r0, r1, lsl #1
    2580:	ldrh	r0, [r0]
    2584:	ldr	r1, [sp, #28]
    2588:	ldr	r2, [sp, #40]	; 0x28
    258c:	add	r1, r1, r2, lsl #1
    2590:	strh	r0, [r1]
    2594:	ldr	r0, [sp, #20]
    2598:	sub	r1, fp, #92	; 0x5c
    259c:	ldr	r0, [r1, r0, lsl #2]
    25a0:	ldr	r1, [sp, #40]	; 0x28
    25a4:	add	r0, r1, r0
    25a8:	str	r0, [sp, #40]	; 0x28
    25ac:	ldr	r0, [sp, #20]
    25b0:	add	r1, sp, #80	; 0x50
    25b4:	add	r0, r1, r0, lsl #2
    25b8:	ldr	r1, [r0]
    25bc:	add	r1, r1, #1
    25c0:	str	r1, [r0]
    25c4:	ldr	r0, [sp, #20]
    25c8:	add	r1, sp, #80	; 0x50
    25cc:	ldr	r1, [r1, r0, lsl #2]
    25d0:	add	r2, sp, #44	; 0x2c
    25d4:	add	r0, r2, r0, lsl #2
    25d8:	ldr	r0, [r0]
    25dc:	cmp	r1, r0
    25e0:	bne	264c <transpose_array+0x42c>
    25e4:	ldr	r0, [sp, #20]
    25e8:	add	r1, sp, #80	; 0x50
    25ec:	mov	r2, #0
    25f0:	str	r2, [r1, r0, lsl #2]
    25f4:	ldr	r0, [sp, #20]
    25f8:	sub	r2, fp, #92	; 0x5c
    25fc:	ldr	r3, [r2, r0, lsl #2]
    2600:	add	ip, sp, #44	; 0x2c
    2604:	ldr	r0, [ip, r0, lsl #2]
    2608:	ldr	ip, [sp, #40]	; 0x28
    260c:	mls	r0, r3, r0, ip
    2610:	str	r0, [sp, #40]	; 0x28
    2614:	ldr	r0, [sp, #20]
    2618:	add	r0, r0, #1
    261c:	str	r0, [sp, #20]
    2620:	ldr	r0, [sp, #20]
    2624:	ldr	r0, [r2, r0, lsl #2]
    2628:	ldr	r2, [sp, #40]	; 0x28
    262c:	add	r0, r2, r0
    2630:	str	r0, [sp, #40]	; 0x28
    2634:	ldr	r0, [sp, #20]
    2638:	add	r0, r1, r0, lsl #2
    263c:	ldr	r1, [r0]
    2640:	add	r1, r1, #1
    2644:	str	r1, [r0]
    2648:	b	25c4 <transpose_array+0x3a4>
    264c:	b	2650 <transpose_array+0x430>
    2650:	ldr	r0, [sp, #36]	; 0x24
    2654:	add	r0, r0, #1
    2658:	str	r0, [sp, #36]	; 0x24
    265c:	b	255c <transpose_array+0x33c>
    2660:	b	289c <transpose_array+0x67c>
    2664:	movw	r0, #0
    2668:	str	r0, [sp, #36]	; 0x24
    266c:	ldr	r0, [sp, #36]	; 0x24
    2670:	ldr	r1, [fp, #-56]	; 0xffffffc8
    2674:	cmp	r0, r1
    2678:	bge	2768 <transpose_array+0x548>
    267c:	mov	r0, #0
    2680:	str	r0, [sp, #16]
    2684:	ldr	r0, [sp, #32]
    2688:	ldr	r1, [sp, #36]	; 0x24
    268c:	ldr	r0, [r0, r1, lsl #2]
    2690:	ldr	r1, [sp, #28]
    2694:	ldr	r2, [sp, #40]	; 0x28
    2698:	str	r0, [r1, r2, lsl #2]
    269c:	ldr	r0, [sp, #16]
    26a0:	sub	r1, fp, #92	; 0x5c
    26a4:	ldr	r0, [r1, r0, lsl #2]
    26a8:	ldr	r1, [sp, #40]	; 0x28
    26ac:	add	r0, r1, r0
    26b0:	str	r0, [sp, #40]	; 0x28
    26b4:	ldr	r0, [sp, #16]
    26b8:	add	r1, sp, #80	; 0x50
    26bc:	add	r0, r1, r0, lsl #2
    26c0:	ldr	r1, [r0]
    26c4:	add	r1, r1, #1
    26c8:	str	r1, [r0]
    26cc:	ldr	r0, [sp, #16]
    26d0:	add	r1, sp, #80	; 0x50
    26d4:	ldr	r1, [r1, r0, lsl #2]
    26d8:	add	r2, sp, #44	; 0x2c
    26dc:	add	r0, r2, r0, lsl #2
    26e0:	ldr	r0, [r0]
    26e4:	cmp	r1, r0
    26e8:	bne	2754 <transpose_array+0x534>
    26ec:	ldr	r0, [sp, #16]
    26f0:	add	r1, sp, #80	; 0x50
    26f4:	mov	r2, #0
    26f8:	str	r2, [r1, r0, lsl #2]
    26fc:	ldr	r0, [sp, #16]
    2700:	sub	r2, fp, #92	; 0x5c
    2704:	ldr	r3, [r2, r0, lsl #2]
    2708:	add	ip, sp, #44	; 0x2c
    270c:	ldr	r0, [ip, r0, lsl #2]
    2710:	ldr	ip, [sp, #40]	; 0x28
    2714:	mls	r0, r3, r0, ip
    2718:	str	r0, [sp, #40]	; 0x28
    271c:	ldr	r0, [sp, #16]
    2720:	add	r0, r0, #1
    2724:	str	r0, [sp, #16]
    2728:	ldr	r0, [sp, #16]
    272c:	ldr	r0, [r2, r0, lsl #2]
    2730:	ldr	r2, [sp, #40]	; 0x28
    2734:	add	r0, r2, r0
    2738:	str	r0, [sp, #40]	; 0x28
    273c:	ldr	r0, [sp, #16]
    2740:	add	r0, r1, r0, lsl #2
    2744:	ldr	r1, [r0]
    2748:	add	r1, r1, #1
    274c:	str	r1, [r0]
    2750:	b	26cc <transpose_array+0x4ac>
    2754:	b	2758 <transpose_array+0x538>
    2758:	ldr	r0, [sp, #36]	; 0x24
    275c:	add	r0, r0, #1
    2760:	str	r0, [sp, #36]	; 0x24
    2764:	b	266c <transpose_array+0x44c>
    2768:	b	289c <transpose_array+0x67c>
    276c:	movw	r0, #0
    2770:	str	r0, [sp, #36]	; 0x24
    2774:	ldr	r0, [sp, #36]	; 0x24
    2778:	ldr	r1, [fp, #-56]	; 0xffffffc8
    277c:	cmp	r0, r1
    2780:	bge	2878 <transpose_array+0x658>
    2784:	mov	r0, #0
    2788:	str	r0, [sp, #12]
    278c:	ldr	r0, [sp, #32]
    2790:	ldr	r1, [sp, #36]	; 0x24
    2794:	ldr	r1, [r0, r1, lsl #3]!
    2798:	ldr	r0, [r0, #4]
    279c:	ldr	r2, [sp, #28]
    27a0:	ldr	r3, [sp, #40]	; 0x28
    27a4:	str	r1, [r2, r3, lsl #3]!
    27a8:	str	r0, [r2, #4]
    27ac:	ldr	r0, [sp, #12]
    27b0:	sub	r1, fp, #92	; 0x5c
    27b4:	ldr	r0, [r1, r0, lsl #2]
    27b8:	ldr	r1, [sp, #40]	; 0x28
    27bc:	add	r0, r1, r0
    27c0:	str	r0, [sp, #40]	; 0x28
    27c4:	ldr	r0, [sp, #12]
    27c8:	add	r1, sp, #80	; 0x50
    27cc:	add	r0, r1, r0, lsl #2
    27d0:	ldr	r1, [r0]
    27d4:	add	r1, r1, #1
    27d8:	str	r1, [r0]
    27dc:	ldr	r0, [sp, #12]
    27e0:	add	r1, sp, #80	; 0x50
    27e4:	ldr	r1, [r1, r0, lsl #2]
    27e8:	add	r2, sp, #44	; 0x2c
    27ec:	add	r0, r2, r0, lsl #2
    27f0:	ldr	r0, [r0]
    27f4:	cmp	r1, r0
    27f8:	bne	2864 <transpose_array+0x644>
    27fc:	ldr	r0, [sp, #12]
    2800:	add	r1, sp, #80	; 0x50
    2804:	mov	r2, #0
    2808:	str	r2, [r1, r0, lsl #2]
    280c:	ldr	r0, [sp, #12]
    2810:	sub	r2, fp, #92	; 0x5c
    2814:	ldr	r3, [r2, r0, lsl #2]
    2818:	add	ip, sp, #44	; 0x2c
    281c:	ldr	r0, [ip, r0, lsl #2]
    2820:	ldr	ip, [sp, #40]	; 0x28
    2824:	mls	r0, r3, r0, ip
    2828:	str	r0, [sp, #40]	; 0x28
    282c:	ldr	r0, [sp, #12]
    2830:	add	r0, r0, #1
    2834:	str	r0, [sp, #12]
    2838:	ldr	r0, [sp, #12]
    283c:	ldr	r0, [r2, r0, lsl #2]
    2840:	ldr	r2, [sp, #40]	; 0x28
    2844:	add	r0, r2, r0
    2848:	str	r0, [sp, #40]	; 0x28
    284c:	ldr	r0, [sp, #12]
    2850:	add	r0, r1, r0, lsl #2
    2854:	ldr	r1, [r0]
    2858:	add	r1, r1, #1
    285c:	str	r1, [r0]
    2860:	b	27dc <transpose_array+0x5bc>
    2864:	b	2868 <transpose_array+0x648>
    2868:	ldr	r0, [sp, #36]	; 0x24
    286c:	add	r0, r0, #1
    2870:	str	r0, [sp, #36]	; 0x24
    2874:	b	2774 <transpose_array+0x554>
    2878:	b	289c <transpose_array+0x67c>
    287c:	movw	r0, #0
    2880:	movt	r0, #0
    2884:	movw	r1, #0
    2888:	movt	r1, #0
    288c:	movw	r2, #172	; 0xac
    2890:	movw	r3, #0
    2894:	movt	r3, #0
    2898:	bl	0 <__assert_fail>
    289c:	ldr	r0, [fp, #-12]
    28a0:	ldr	r1, [sp, #28]
    28a4:	ldr	r2, [fp, #-56]	; 0xffffffc8
    28a8:	ldr	r3, [fp, #-16]
    28ac:	mul	r2, r2, r3
    28b0:	bl	0 <memcpy>
    28b4:	ldr	r0, [sp, #28]
    28b8:	bl	0 <free>
    28bc:	movw	r0, #0
    28c0:	str	r0, [fp, #-4]
    28c4:	ldr	r0, [fp, #-4]
    28c8:	mov	sp, fp
    28cc:	pop	{fp, pc}

000028d0 <coda_mem_cursor_read_uint8_array>:
    28d0:	push	{fp, lr}
    28d4:	mov	fp, sp
    28d8:	sub	sp, sp, #32
    28dc:	str	r0, [fp, #-8]
    28e0:	str	r1, [fp, #-12]
    28e4:	str	r2, [sp, #16]
    28e8:	ldr	r0, [fp, #-8]
    28ec:	add	r1, r0, #8
    28f0:	ldr	r0, [r0, #4]
    28f4:	sub	r0, r0, #1
    28f8:	add	r0, r1, r0, lsl #4
    28fc:	ldr	r0, [r0]
    2900:	str	r0, [sp, #12]
    2904:	ldr	r0, [sp, #12]
    2908:	ldr	r0, [r0, #8]
    290c:	cmp	r0, #1
    2910:	bne	2948 <coda_mem_cursor_read_uint8_array+0x78>
    2914:	ldr	r0, [fp, #-8]
    2918:	ldr	r2, [fp, #-12]
    291c:	ldr	r1, [sp, #16]
    2920:	movw	r3, #0
    2924:	movt	r3, #0
    2928:	str	r1, [sp, #8]
    292c:	mov	r1, r3
    2930:	movw	r3, #1
    2934:	ldr	ip, [sp, #8]
    2938:	str	ip, [sp]
    293c:	bl	1e3c <read_array>
    2940:	str	r0, [fp, #-4]
    2944:	b	2a74 <coda_mem_cursor_read_uint8_array+0x1a4>
    2948:	ldr	r0, [sp, #12]
    294c:	ldr	r0, [r0, #8]
    2950:	cmp	r0, #2
    2954:	bne	295c <coda_mem_cursor_read_uint8_array+0x8c>
    2958:	b	297c <coda_mem_cursor_read_uint8_array+0xac>
    295c:	movw	r0, #0
    2960:	movt	r0, #0
    2964:	movw	r1, #0
    2968:	movt	r1, #0
    296c:	movw	r2, #682	; 0x2aa
    2970:	movw	r3, #0
    2974:	movt	r3, #0
    2978:	bl	0 <__assert_fail>
    297c:	ldr	r0, [sp, #12]
    2980:	ldr	r0, [r0, #4]
    2984:	ldr	r0, [r0, #40]	; 0x28
    2988:	ldr	r0, [r0]
    298c:	cmp	r0, #1
    2990:	bne	29c8 <coda_mem_cursor_read_uint8_array+0xf8>
    2994:	ldr	r0, [fp, #-8]
    2998:	ldr	r2, [fp, #-12]
    299c:	ldr	r1, [sp, #16]
    29a0:	movw	r3, #0
    29a4:	movt	r3, #0
    29a8:	str	r1, [sp, #4]
    29ac:	mov	r1, r3
    29b0:	movw	r3, #1
    29b4:	ldr	ip, [sp, #4]
    29b8:	str	ip, [sp]
    29bc:	bl	1e3c <read_array>
    29c0:	str	r0, [fp, #-4]
    29c4:	b	2a74 <coda_mem_cursor_read_uint8_array+0x1a4>
    29c8:	ldr	r0, [sp, #12]
    29cc:	ldr	r0, [r0, #4]
    29d0:	ldr	r0, [r0, #40]	; 0x28
    29d4:	ldr	r0, [r0]
    29d8:	cmp	r0, #0
    29dc:	bne	29e4 <coda_mem_cursor_read_uint8_array+0x114>
    29e0:	b	2a04 <coda_mem_cursor_read_uint8_array+0x134>
    29e4:	movw	r0, #0
    29e8:	movt	r0, #0
    29ec:	movw	r1, #0
    29f0:	movt	r1, #0
    29f4:	movw	r2, #688	; 0x2b0
    29f8:	movw	r3, #0
    29fc:	movt	r3, #0
    2a00:	bl	0 <__assert_fail>
    2a04:	ldr	r0, [fp, #-8]
    2a08:	ldr	r2, [fp, #-12]
    2a0c:	movw	r1, #0
    2a10:	movt	r1, #0
    2a14:	movw	r3, #1
    2a18:	movw	ip, #0
    2a1c:	str	ip, [sp]
    2a20:	bl	1e3c <read_array>
    2a24:	cmp	r0, #0
    2a28:	beq	2a38 <coda_mem_cursor_read_uint8_array+0x168>
    2a2c:	mvn	r0, #0
    2a30:	str	r0, [fp, #-4]
    2a34:	b	2a74 <coda_mem_cursor_read_uint8_array+0x1a4>
    2a38:	ldr	r0, [sp, #16]
    2a3c:	cmp	r0, #0
    2a40:	beq	2a6c <coda_mem_cursor_read_uint8_array+0x19c>
    2a44:	ldr	r0, [fp, #-8]
    2a48:	ldr	r1, [fp, #-12]
    2a4c:	movw	r2, #1
    2a50:	bl	2220 <transpose_array>
    2a54:	cmp	r0, #0
    2a58:	beq	2a68 <coda_mem_cursor_read_uint8_array+0x198>
    2a5c:	mvn	r0, #0
    2a60:	str	r0, [fp, #-4]
    2a64:	b	2a74 <coda_mem_cursor_read_uint8_array+0x1a4>
    2a68:	b	2a6c <coda_mem_cursor_read_uint8_array+0x19c>
    2a6c:	movw	r0, #0
    2a70:	str	r0, [fp, #-4]
    2a74:	ldr	r0, [fp, #-4]
    2a78:	mov	sp, fp
    2a7c:	pop	{fp, pc}

00002a80 <coda_mem_cursor_read_int16_array>:
    2a80:	push	{fp, lr}
    2a84:	mov	fp, sp
    2a88:	sub	sp, sp, #48	; 0x30
    2a8c:	str	r0, [fp, #-8]
    2a90:	str	r1, [fp, #-12]
    2a94:	str	r2, [fp, #-16]
    2a98:	ldr	r0, [fp, #-8]
    2a9c:	add	r1, r0, #8
    2aa0:	ldr	r0, [r0, #4]
    2aa4:	sub	r0, r0, #1
    2aa8:	add	r0, r1, r0, lsl #4
    2aac:	ldr	r0, [r0]
    2ab0:	str	r0, [fp, #-20]	; 0xffffffec
    2ab4:	ldr	r0, [fp, #-20]	; 0xffffffec
    2ab8:	ldr	r0, [r0, #8]
    2abc:	cmp	r0, #1
    2ac0:	bne	2b04 <coda_mem_cursor_read_int16_array+0x84>
    2ac4:	movw	r0, #0
    2ac8:	movt	r0, #0
    2acc:	ldr	r1, [fp, #-8]
    2ad0:	ldr	r2, [fp, #-12]
    2ad4:	ldr	r3, [fp, #-16]
    2ad8:	str	r0, [sp, #24]
    2adc:	mov	r0, r1
    2ae0:	ldr	r1, [sp, #24]
    2ae4:	movw	ip, #2
    2ae8:	str	r3, [sp, #20]
    2aec:	mov	r3, ip
    2af0:	ldr	ip, [sp, #20]
    2af4:	str	ip, [sp]
    2af8:	bl	1e3c <read_array>
    2afc:	str	r0, [fp, #-4]
    2b00:	b	2c48 <coda_mem_cursor_read_int16_array+0x1c8>
    2b04:	ldr	r0, [fp, #-20]	; 0xffffffec
    2b08:	ldr	r0, [r0, #8]
    2b0c:	cmp	r0, #2
    2b10:	bne	2b18 <coda_mem_cursor_read_int16_array+0x98>
    2b14:	b	2b38 <coda_mem_cursor_read_int16_array+0xb8>
    2b18:	movw	r0, #0
    2b1c:	movt	r0, #0
    2b20:	movw	r1, #0
    2b24:	movt	r1, #0
    2b28:	movw	r2, #713	; 0x2c9
    2b2c:	movw	r3, #0
    2b30:	movt	r3, #0
    2b34:	bl	0 <__assert_fail>
    2b38:	ldr	r0, [fp, #-20]	; 0xffffffec
    2b3c:	ldr	r0, [r0, #4]
    2b40:	ldr	r0, [r0, #40]	; 0x28
    2b44:	ldr	r0, [r0]
    2b48:	cmp	r0, #1
    2b4c:	bne	2b90 <coda_mem_cursor_read_int16_array+0x110>
    2b50:	movw	r0, #0
    2b54:	movt	r0, #0
    2b58:	ldr	r1, [fp, #-8]
    2b5c:	ldr	r2, [fp, #-12]
    2b60:	ldr	r3, [fp, #-16]
    2b64:	str	r0, [sp, #16]
    2b68:	mov	r0, r1
    2b6c:	ldr	r1, [sp, #16]
    2b70:	movw	ip, #2
    2b74:	str	r3, [sp, #12]
    2b78:	mov	r3, ip
    2b7c:	ldr	ip, [sp, #12]
    2b80:	str	ip, [sp]
    2b84:	bl	1e3c <read_array>
    2b88:	str	r0, [fp, #-4]
    2b8c:	b	2c48 <coda_mem_cursor_read_int16_array+0x1c8>
    2b90:	ldr	r0, [fp, #-20]	; 0xffffffec
    2b94:	ldr	r0, [r0, #4]
    2b98:	ldr	r0, [r0, #40]	; 0x28
    2b9c:	ldr	r0, [r0]
    2ba0:	cmp	r0, #0
    2ba4:	bne	2bac <coda_mem_cursor_read_int16_array+0x12c>
    2ba8:	b	2bcc <coda_mem_cursor_read_int16_array+0x14c>
    2bac:	movw	r0, #0
    2bb0:	movt	r0, #0
    2bb4:	movw	r1, #0
    2bb8:	movt	r1, #0
    2bbc:	movw	r2, #719	; 0x2cf
    2bc0:	movw	r3, #0
    2bc4:	movt	r3, #0
    2bc8:	bl	0 <__assert_fail>
    2bcc:	movw	r0, #0
    2bd0:	movt	r0, #0
    2bd4:	ldr	r1, [fp, #-8]
    2bd8:	ldr	r2, [fp, #-12]
    2bdc:	str	r0, [sp, #8]
    2be0:	mov	r0, r1
    2be4:	ldr	r1, [sp, #8]
    2be8:	movw	r3, #2
    2bec:	movw	ip, #0
    2bf0:	str	ip, [sp]
    2bf4:	bl	1e3c <read_array>
    2bf8:	cmp	r0, #0
    2bfc:	beq	2c0c <coda_mem_cursor_read_int16_array+0x18c>
    2c00:	mvn	r0, #0
    2c04:	str	r0, [fp, #-4]
    2c08:	b	2c48 <coda_mem_cursor_read_int16_array+0x1c8>
    2c0c:	ldr	r0, [fp, #-16]
    2c10:	cmp	r0, #0
    2c14:	beq	2c40 <coda_mem_cursor_read_int16_array+0x1c0>
    2c18:	ldr	r0, [fp, #-8]
    2c1c:	ldr	r1, [fp, #-12]
    2c20:	movw	r2, #2
    2c24:	bl	2220 <transpose_array>
    2c28:	cmp	r0, #0
    2c2c:	beq	2c3c <coda_mem_cursor_read_int16_array+0x1bc>
    2c30:	mvn	r0, #0
    2c34:	str	r0, [fp, #-4]
    2c38:	b	2c48 <coda_mem_cursor_read_int16_array+0x1c8>
    2c3c:	b	2c40 <coda_mem_cursor_read_int16_array+0x1c0>
    2c40:	movw	r0, #0
    2c44:	str	r0, [fp, #-4]
    2c48:	ldr	r0, [fp, #-4]
    2c4c:	mov	sp, fp
    2c50:	pop	{fp, pc}

00002c54 <coda_mem_cursor_read_uint16_array>:
    2c54:	push	{fp, lr}
    2c58:	mov	fp, sp
    2c5c:	sub	sp, sp, #48	; 0x30
    2c60:	str	r0, [fp, #-8]
    2c64:	str	r1, [fp, #-12]
    2c68:	str	r2, [fp, #-16]
    2c6c:	ldr	r0, [fp, #-8]
    2c70:	add	r1, r0, #8
    2c74:	ldr	r0, [r0, #4]
    2c78:	sub	r0, r0, #1
    2c7c:	add	r0, r1, r0, lsl #4
    2c80:	ldr	r0, [r0]
    2c84:	str	r0, [fp, #-20]	; 0xffffffec
    2c88:	ldr	r0, [fp, #-20]	; 0xffffffec
    2c8c:	ldr	r0, [r0, #8]
    2c90:	cmp	r0, #1
    2c94:	bne	2cd8 <coda_mem_cursor_read_uint16_array+0x84>
    2c98:	movw	r0, #0
    2c9c:	movt	r0, #0
    2ca0:	ldr	r1, [fp, #-8]
    2ca4:	ldr	r2, [fp, #-12]
    2ca8:	ldr	r3, [fp, #-16]
    2cac:	str	r0, [sp, #24]
    2cb0:	mov	r0, r1
    2cb4:	ldr	r1, [sp, #24]
    2cb8:	movw	ip, #2
    2cbc:	str	r3, [sp, #20]
    2cc0:	mov	r3, ip
    2cc4:	ldr	ip, [sp, #20]
    2cc8:	str	ip, [sp]
    2ccc:	bl	1e3c <read_array>
    2cd0:	str	r0, [fp, #-4]
    2cd4:	b	2e1c <coda_mem_cursor_read_uint16_array+0x1c8>
    2cd8:	ldr	r0, [fp, #-20]	; 0xffffffec
    2cdc:	ldr	r0, [r0, #8]
    2ce0:	cmp	r0, #2
    2ce4:	bne	2cec <coda_mem_cursor_read_uint16_array+0x98>
    2ce8:	b	2d0c <coda_mem_cursor_read_uint16_array+0xb8>
    2cec:	movw	r0, #0
    2cf0:	movt	r0, #0
    2cf4:	movw	r1, #0
    2cf8:	movt	r1, #0
    2cfc:	movw	r2, #744	; 0x2e8
    2d00:	movw	r3, #0
    2d04:	movt	r3, #0
    2d08:	bl	0 <__assert_fail>
    2d0c:	ldr	r0, [fp, #-20]	; 0xffffffec
    2d10:	ldr	r0, [r0, #4]
    2d14:	ldr	r0, [r0, #40]	; 0x28
    2d18:	ldr	r0, [r0]
    2d1c:	cmp	r0, #1
    2d20:	bne	2d64 <coda_mem_cursor_read_uint16_array+0x110>
    2d24:	movw	r0, #0
    2d28:	movt	r0, #0
    2d2c:	ldr	r1, [fp, #-8]
    2d30:	ldr	r2, [fp, #-12]
    2d34:	ldr	r3, [fp, #-16]
    2d38:	str	r0, [sp, #16]
    2d3c:	mov	r0, r1
    2d40:	ldr	r1, [sp, #16]
    2d44:	movw	ip, #2
    2d48:	str	r3, [sp, #12]
    2d4c:	mov	r3, ip
    2d50:	ldr	ip, [sp, #12]
    2d54:	str	ip, [sp]
    2d58:	bl	1e3c <read_array>
    2d5c:	str	r0, [fp, #-4]
    2d60:	b	2e1c <coda_mem_cursor_read_uint16_array+0x1c8>
    2d64:	ldr	r0, [fp, #-20]	; 0xffffffec
    2d68:	ldr	r0, [r0, #4]
    2d6c:	ldr	r0, [r0, #40]	; 0x28
    2d70:	ldr	r0, [r0]
    2d74:	cmp	r0, #0
    2d78:	bne	2d80 <coda_mem_cursor_read_uint16_array+0x12c>
    2d7c:	b	2da0 <coda_mem_cursor_read_uint16_array+0x14c>
    2d80:	movw	r0, #0
    2d84:	movt	r0, #0
    2d88:	movw	r1, #0
    2d8c:	movt	r1, #0
    2d90:	movw	r2, #750	; 0x2ee
    2d94:	movw	r3, #0
    2d98:	movt	r3, #0
    2d9c:	bl	0 <__assert_fail>
    2da0:	movw	r0, #0
    2da4:	movt	r0, #0
    2da8:	ldr	r1, [fp, #-8]
    2dac:	ldr	r2, [fp, #-12]
    2db0:	str	r0, [sp, #8]
    2db4:	mov	r0, r1
    2db8:	ldr	r1, [sp, #8]
    2dbc:	movw	r3, #2
    2dc0:	movw	ip, #0
    2dc4:	str	ip, [sp]
    2dc8:	bl	1e3c <read_array>
    2dcc:	cmp	r0, #0
    2dd0:	beq	2de0 <coda_mem_cursor_read_uint16_array+0x18c>
    2dd4:	mvn	r0, #0
    2dd8:	str	r0, [fp, #-4]
    2ddc:	b	2e1c <coda_mem_cursor_read_uint16_array+0x1c8>
    2de0:	ldr	r0, [fp, #-16]
    2de4:	cmp	r0, #0
    2de8:	beq	2e14 <coda_mem_cursor_read_uint16_array+0x1c0>
    2dec:	ldr	r0, [fp, #-8]
    2df0:	ldr	r1, [fp, #-12]
    2df4:	movw	r2, #2
    2df8:	bl	2220 <transpose_array>
    2dfc:	cmp	r0, #0
    2e00:	beq	2e10 <coda_mem_cursor_read_uint16_array+0x1bc>
    2e04:	mvn	r0, #0
    2e08:	str	r0, [fp, #-4]
    2e0c:	b	2e1c <coda_mem_cursor_read_uint16_array+0x1c8>
    2e10:	b	2e14 <coda_mem_cursor_read_uint16_array+0x1c0>
    2e14:	movw	r0, #0
    2e18:	str	r0, [fp, #-4]
    2e1c:	ldr	r0, [fp, #-4]
    2e20:	mov	sp, fp
    2e24:	pop	{fp, pc}

00002e28 <coda_mem_cursor_read_int32_array>:
    2e28:	push	{fp, lr}
    2e2c:	mov	fp, sp
    2e30:	sub	sp, sp, #48	; 0x30
    2e34:	str	r0, [fp, #-8]
    2e38:	str	r1, [fp, #-12]
    2e3c:	str	r2, [fp, #-16]
    2e40:	ldr	r0, [fp, #-8]
    2e44:	add	r1, r0, #8
    2e48:	ldr	r0, [r0, #4]
    2e4c:	sub	r0, r0, #1
    2e50:	add	r0, r1, r0, lsl #4
    2e54:	ldr	r0, [r0]
    2e58:	str	r0, [fp, #-20]	; 0xffffffec
    2e5c:	ldr	r0, [fp, #-20]	; 0xffffffec
    2e60:	ldr	r0, [r0, #8]
    2e64:	cmp	r0, #1
    2e68:	bne	2eac <coda_mem_cursor_read_int32_array+0x84>
    2e6c:	movw	r0, #0
    2e70:	movt	r0, #0
    2e74:	ldr	r1, [fp, #-8]
    2e78:	ldr	r2, [fp, #-12]
    2e7c:	ldr	r3, [fp, #-16]
    2e80:	str	r0, [sp, #24]
    2e84:	mov	r0, r1
    2e88:	ldr	r1, [sp, #24]
    2e8c:	movw	ip, #4
    2e90:	str	r3, [sp, #20]
    2e94:	mov	r3, ip
    2e98:	ldr	ip, [sp, #20]
    2e9c:	str	ip, [sp]
    2ea0:	bl	1e3c <read_array>
    2ea4:	str	r0, [fp, #-4]
    2ea8:	b	2ff0 <coda_mem_cursor_read_int32_array+0x1c8>
    2eac:	ldr	r0, [fp, #-20]	; 0xffffffec
    2eb0:	ldr	r0, [r0, #8]
    2eb4:	cmp	r0, #2
    2eb8:	bne	2ec0 <coda_mem_cursor_read_int32_array+0x98>
    2ebc:	b	2ee0 <coda_mem_cursor_read_int32_array+0xb8>
    2ec0:	movw	r0, #0
    2ec4:	movt	r0, #0
    2ec8:	movw	r1, #0
    2ecc:	movt	r1, #0
    2ed0:	movw	r2, #775	; 0x307
    2ed4:	movw	r3, #0
    2ed8:	movt	r3, #0
    2edc:	bl	0 <__assert_fail>
    2ee0:	ldr	r0, [fp, #-20]	; 0xffffffec
    2ee4:	ldr	r0, [r0, #4]
    2ee8:	ldr	r0, [r0, #40]	; 0x28
    2eec:	ldr	r0, [r0]
    2ef0:	cmp	r0, #1
    2ef4:	bne	2f38 <coda_mem_cursor_read_int32_array+0x110>
    2ef8:	movw	r0, #0
    2efc:	movt	r0, #0
    2f00:	ldr	r1, [fp, #-8]
    2f04:	ldr	r2, [fp, #-12]
    2f08:	ldr	r3, [fp, #-16]
    2f0c:	str	r0, [sp, #16]
    2f10:	mov	r0, r1
    2f14:	ldr	r1, [sp, #16]
    2f18:	movw	ip, #4
    2f1c:	str	r3, [sp, #12]
    2f20:	mov	r3, ip
    2f24:	ldr	ip, [sp, #12]
    2f28:	str	ip, [sp]
    2f2c:	bl	1e3c <read_array>
    2f30:	str	r0, [fp, #-4]
    2f34:	b	2ff0 <coda_mem_cursor_read_int32_array+0x1c8>
    2f38:	ldr	r0, [fp, #-20]	; 0xffffffec
    2f3c:	ldr	r0, [r0, #4]
    2f40:	ldr	r0, [r0, #40]	; 0x28
    2f44:	ldr	r0, [r0]
    2f48:	cmp	r0, #0
    2f4c:	bne	2f54 <coda_mem_cursor_read_int32_array+0x12c>
    2f50:	b	2f74 <coda_mem_cursor_read_int32_array+0x14c>
    2f54:	movw	r0, #0
    2f58:	movt	r0, #0
    2f5c:	movw	r1, #0
    2f60:	movt	r1, #0
    2f64:	movw	r2, #781	; 0x30d
    2f68:	movw	r3, #0
    2f6c:	movt	r3, #0
    2f70:	bl	0 <__assert_fail>
    2f74:	movw	r0, #0
    2f78:	movt	r0, #0
    2f7c:	ldr	r1, [fp, #-8]
    2f80:	ldr	r2, [fp, #-12]
    2f84:	str	r0, [sp, #8]
    2f88:	mov	r0, r1
    2f8c:	ldr	r1, [sp, #8]
    2f90:	movw	r3, #4
    2f94:	movw	ip, #0
    2f98:	str	ip, [sp]
    2f9c:	bl	1e3c <read_array>
    2fa0:	cmp	r0, #0
    2fa4:	beq	2fb4 <coda_mem_cursor_read_int32_array+0x18c>
    2fa8:	mvn	r0, #0
    2fac:	str	r0, [fp, #-4]
    2fb0:	b	2ff0 <coda_mem_cursor_read_int32_array+0x1c8>
    2fb4:	ldr	r0, [fp, #-16]
    2fb8:	cmp	r0, #0
    2fbc:	beq	2fe8 <coda_mem_cursor_read_int32_array+0x1c0>
    2fc0:	ldr	r0, [fp, #-8]
    2fc4:	ldr	r1, [fp, #-12]
    2fc8:	movw	r2, #4
    2fcc:	bl	2220 <transpose_array>
    2fd0:	cmp	r0, #0
    2fd4:	beq	2fe4 <coda_mem_cursor_read_int32_array+0x1bc>
    2fd8:	mvn	r0, #0
    2fdc:	str	r0, [fp, #-4]
    2fe0:	b	2ff0 <coda_mem_cursor_read_int32_array+0x1c8>
    2fe4:	b	2fe8 <coda_mem_cursor_read_int32_array+0x1c0>
    2fe8:	movw	r0, #0
    2fec:	str	r0, [fp, #-4]
    2ff0:	ldr	r0, [fp, #-4]
    2ff4:	mov	sp, fp
    2ff8:	pop	{fp, pc}

00002ffc <coda_mem_cursor_read_uint32_array>:
    2ffc:	push	{fp, lr}
    3000:	mov	fp, sp
    3004:	sub	sp, sp, #48	; 0x30
    3008:	str	r0, [fp, #-8]
    300c:	str	r1, [fp, #-12]
    3010:	str	r2, [fp, #-16]
    3014:	ldr	r0, [fp, #-8]
    3018:	add	r1, r0, #8
    301c:	ldr	r0, [r0, #4]
    3020:	sub	r0, r0, #1
    3024:	add	r0, r1, r0, lsl #4
    3028:	ldr	r0, [r0]
    302c:	str	r0, [fp, #-20]	; 0xffffffec
    3030:	ldr	r0, [fp, #-20]	; 0xffffffec
    3034:	ldr	r0, [r0, #8]
    3038:	cmp	r0, #1
    303c:	bne	3080 <coda_mem_cursor_read_uint32_array+0x84>
    3040:	movw	r0, #0
    3044:	movt	r0, #0
    3048:	ldr	r1, [fp, #-8]
    304c:	ldr	r2, [fp, #-12]
    3050:	ldr	r3, [fp, #-16]
    3054:	str	r0, [sp, #24]
    3058:	mov	r0, r1
    305c:	ldr	r1, [sp, #24]
    3060:	movw	ip, #4
    3064:	str	r3, [sp, #20]
    3068:	mov	r3, ip
    306c:	ldr	ip, [sp, #20]
    3070:	str	ip, [sp]
    3074:	bl	1e3c <read_array>
    3078:	str	r0, [fp, #-4]
    307c:	b	31c4 <coda_mem_cursor_read_uint32_array+0x1c8>
    3080:	ldr	r0, [fp, #-20]	; 0xffffffec
    3084:	ldr	r0, [r0, #8]
    3088:	cmp	r0, #2
    308c:	bne	3094 <coda_mem_cursor_read_uint32_array+0x98>
    3090:	b	30b4 <coda_mem_cursor_read_uint32_array+0xb8>
    3094:	movw	r0, #0
    3098:	movt	r0, #0
    309c:	movw	r1, #0
    30a0:	movt	r1, #0
    30a4:	movw	r2, #806	; 0x326
    30a8:	movw	r3, #0
    30ac:	movt	r3, #0
    30b0:	bl	0 <__assert_fail>
    30b4:	ldr	r0, [fp, #-20]	; 0xffffffec
    30b8:	ldr	r0, [r0, #4]
    30bc:	ldr	r0, [r0, #40]	; 0x28
    30c0:	ldr	r0, [r0]
    30c4:	cmp	r0, #1
    30c8:	bne	310c <coda_mem_cursor_read_uint32_array+0x110>
    30cc:	movw	r0, #0
    30d0:	movt	r0, #0
    30d4:	ldr	r1, [fp, #-8]
    30d8:	ldr	r2, [fp, #-12]
    30dc:	ldr	r3, [fp, #-16]
    30e0:	str	r0, [sp, #16]
    30e4:	mov	r0, r1
    30e8:	ldr	r1, [sp, #16]
    30ec:	movw	ip, #4
    30f0:	str	r3, [sp, #12]
    30f4:	mov	r3, ip
    30f8:	ldr	ip, [sp, #12]
    30fc:	str	ip, [sp]
    3100:	bl	1e3c <read_array>
    3104:	str	r0, [fp, #-4]
    3108:	b	31c4 <coda_mem_cursor_read_uint32_array+0x1c8>
    310c:	ldr	r0, [fp, #-20]	; 0xffffffec
    3110:	ldr	r0, [r0, #4]
    3114:	ldr	r0, [r0, #40]	; 0x28
    3118:	ldr	r0, [r0]
    311c:	cmp	r0, #0
    3120:	bne	3128 <coda_mem_cursor_read_uint32_array+0x12c>
    3124:	b	3148 <coda_mem_cursor_read_uint32_array+0x14c>
    3128:	movw	r0, #0
    312c:	movt	r0, #0
    3130:	movw	r1, #0
    3134:	movt	r1, #0
    3138:	movw	r2, #812	; 0x32c
    313c:	movw	r3, #0
    3140:	movt	r3, #0
    3144:	bl	0 <__assert_fail>
    3148:	movw	r0, #0
    314c:	movt	r0, #0
    3150:	ldr	r1, [fp, #-8]
    3154:	ldr	r2, [fp, #-12]
    3158:	str	r0, [sp, #8]
    315c:	mov	r0, r1
    3160:	ldr	r1, [sp, #8]
    3164:	movw	r3, #4
    3168:	movw	ip, #0
    316c:	str	ip, [sp]
    3170:	bl	1e3c <read_array>
    3174:	cmp	r0, #0
    3178:	beq	3188 <coda_mem_cursor_read_uint32_array+0x18c>
    317c:	mvn	r0, #0
    3180:	str	r0, [fp, #-4]
    3184:	b	31c4 <coda_mem_cursor_read_uint32_array+0x1c8>
    3188:	ldr	r0, [fp, #-16]
    318c:	cmp	r0, #0
    3190:	beq	31bc <coda_mem_cursor_read_uint32_array+0x1c0>
    3194:	ldr	r0, [fp, #-8]
    3198:	ldr	r1, [fp, #-12]
    319c:	movw	r2, #4
    31a0:	bl	2220 <transpose_array>
    31a4:	cmp	r0, #0
    31a8:	beq	31b8 <coda_mem_cursor_read_uint32_array+0x1bc>
    31ac:	mvn	r0, #0
    31b0:	str	r0, [fp, #-4]
    31b4:	b	31c4 <coda_mem_cursor_read_uint32_array+0x1c8>
    31b8:	b	31bc <coda_mem_cursor_read_uint32_array+0x1c0>
    31bc:	movw	r0, #0
    31c0:	str	r0, [fp, #-4]
    31c4:	ldr	r0, [fp, #-4]
    31c8:	mov	sp, fp
    31cc:	pop	{fp, pc}

000031d0 <coda_mem_cursor_read_int64_array>:
    31d0:	push	{fp, lr}
    31d4:	mov	fp, sp
    31d8:	sub	sp, sp, #48	; 0x30
    31dc:	str	r0, [fp, #-8]
    31e0:	str	r1, [fp, #-12]
    31e4:	str	r2, [fp, #-16]
    31e8:	ldr	r0, [fp, #-8]
    31ec:	add	r1, r0, #8
    31f0:	ldr	r0, [r0, #4]
    31f4:	sub	r0, r0, #1
    31f8:	add	r0, r1, r0, lsl #4
    31fc:	ldr	r0, [r0]
    3200:	str	r0, [fp, #-20]	; 0xffffffec
    3204:	ldr	r0, [fp, #-20]	; 0xffffffec
    3208:	ldr	r0, [r0, #8]
    320c:	cmp	r0, #1
    3210:	bne	3254 <coda_mem_cursor_read_int64_array+0x84>
    3214:	movw	r0, #0
    3218:	movt	r0, #0
    321c:	ldr	r1, [fp, #-8]
    3220:	ldr	r2, [fp, #-12]
    3224:	ldr	r3, [fp, #-16]
    3228:	str	r0, [sp, #24]
    322c:	mov	r0, r1
    3230:	ldr	r1, [sp, #24]
    3234:	movw	ip, #8
    3238:	str	r3, [sp, #20]
    323c:	mov	r3, ip
    3240:	ldr	ip, [sp, #20]
    3244:	str	ip, [sp]
    3248:	bl	1e3c <read_array>
    324c:	str	r0, [fp, #-4]
    3250:	b	3398 <coda_mem_cursor_read_int64_array+0x1c8>
    3254:	ldr	r0, [fp, #-20]	; 0xffffffec
    3258:	ldr	r0, [r0, #8]
    325c:	cmp	r0, #2
    3260:	bne	3268 <coda_mem_cursor_read_int64_array+0x98>
    3264:	b	3288 <coda_mem_cursor_read_int64_array+0xb8>
    3268:	movw	r0, #0
    326c:	movt	r0, #0
    3270:	movw	r1, #0
    3274:	movt	r1, #0
    3278:	movw	r2, #837	; 0x345
    327c:	movw	r3, #0
    3280:	movt	r3, #0
    3284:	bl	0 <__assert_fail>
    3288:	ldr	r0, [fp, #-20]	; 0xffffffec
    328c:	ldr	r0, [r0, #4]
    3290:	ldr	r0, [r0, #40]	; 0x28
    3294:	ldr	r0, [r0]
    3298:	cmp	r0, #1
    329c:	bne	32e0 <coda_mem_cursor_read_int64_array+0x110>
    32a0:	movw	r0, #0
    32a4:	movt	r0, #0
    32a8:	ldr	r1, [fp, #-8]
    32ac:	ldr	r2, [fp, #-12]
    32b0:	ldr	r3, [fp, #-16]
    32b4:	str	r0, [sp, #16]
    32b8:	mov	r0, r1
    32bc:	ldr	r1, [sp, #16]
    32c0:	movw	ip, #8
    32c4:	str	r3, [sp, #12]
    32c8:	mov	r3, ip
    32cc:	ldr	ip, [sp, #12]
    32d0:	str	ip, [sp]
    32d4:	bl	1e3c <read_array>
    32d8:	str	r0, [fp, #-4]
    32dc:	b	3398 <coda_mem_cursor_read_int64_array+0x1c8>
    32e0:	ldr	r0, [fp, #-20]	; 0xffffffec
    32e4:	ldr	r0, [r0, #4]
    32e8:	ldr	r0, [r0, #40]	; 0x28
    32ec:	ldr	r0, [r0]
    32f0:	cmp	r0, #0
    32f4:	bne	32fc <coda_mem_cursor_read_int64_array+0x12c>
    32f8:	b	331c <coda_mem_cursor_read_int64_array+0x14c>
    32fc:	movw	r0, #0
    3300:	movt	r0, #0
    3304:	movw	r1, #0
    3308:	movt	r1, #0
    330c:	movw	r2, #843	; 0x34b
    3310:	movw	r3, #0
    3314:	movt	r3, #0
    3318:	bl	0 <__assert_fail>
    331c:	movw	r0, #0
    3320:	movt	r0, #0
    3324:	ldr	r1, [fp, #-8]
    3328:	ldr	r2, [fp, #-12]
    332c:	str	r0, [sp, #8]
    3330:	mov	r0, r1
    3334:	ldr	r1, [sp, #8]
    3338:	movw	r3, #8
    333c:	movw	ip, #0
    3340:	str	ip, [sp]
    3344:	bl	1e3c <read_array>
    3348:	cmp	r0, #0
    334c:	beq	335c <coda_mem_cursor_read_int64_array+0x18c>
    3350:	mvn	r0, #0
    3354:	str	r0, [fp, #-4]
    3358:	b	3398 <coda_mem_cursor_read_int64_array+0x1c8>
    335c:	ldr	r0, [fp, #-16]
    3360:	cmp	r0, #0
    3364:	beq	3390 <coda_mem_cursor_read_int64_array+0x1c0>
    3368:	ldr	r0, [fp, #-8]
    336c:	ldr	r1, [fp, #-12]
    3370:	movw	r2, #8
    3374:	bl	2220 <transpose_array>
    3378:	cmp	r0, #0
    337c:	beq	338c <coda_mem_cursor_read_int64_array+0x1bc>
    3380:	mvn	r0, #0
    3384:	str	r0, [fp, #-4]
    3388:	b	3398 <coda_mem_cursor_read_int64_array+0x1c8>
    338c:	b	3390 <coda_mem_cursor_read_int64_array+0x1c0>
    3390:	movw	r0, #0
    3394:	str	r0, [fp, #-4]
    3398:	ldr	r0, [fp, #-4]
    339c:	mov	sp, fp
    33a0:	pop	{fp, pc}

000033a4 <coda_mem_cursor_read_uint64_array>:
    33a4:	push	{fp, lr}
    33a8:	mov	fp, sp
    33ac:	sub	sp, sp, #48	; 0x30
    33b0:	str	r0, [fp, #-8]
    33b4:	str	r1, [fp, #-12]
    33b8:	str	r2, [fp, #-16]
    33bc:	ldr	r0, [fp, #-8]
    33c0:	add	r1, r0, #8
    33c4:	ldr	r0, [r0, #4]
    33c8:	sub	r0, r0, #1
    33cc:	add	r0, r1, r0, lsl #4
    33d0:	ldr	r0, [r0]
    33d4:	str	r0, [fp, #-20]	; 0xffffffec
    33d8:	ldr	r0, [fp, #-20]	; 0xffffffec
    33dc:	ldr	r0, [r0, #8]
    33e0:	cmp	r0, #1
    33e4:	bne	3428 <coda_mem_cursor_read_uint64_array+0x84>
    33e8:	movw	r0, #0
    33ec:	movt	r0, #0
    33f0:	ldr	r1, [fp, #-8]
    33f4:	ldr	r2, [fp, #-12]
    33f8:	ldr	r3, [fp, #-16]
    33fc:	str	r0, [sp, #24]
    3400:	mov	r0, r1
    3404:	ldr	r1, [sp, #24]
    3408:	movw	ip, #8
    340c:	str	r3, [sp, #20]
    3410:	mov	r3, ip
    3414:	ldr	ip, [sp, #20]
    3418:	str	ip, [sp]
    341c:	bl	1e3c <read_array>
    3420:	str	r0, [fp, #-4]
    3424:	b	356c <coda_mem_cursor_read_uint64_array+0x1c8>
    3428:	ldr	r0, [fp, #-20]	; 0xffffffec
    342c:	ldr	r0, [r0, #8]
    3430:	cmp	r0, #2
    3434:	bne	343c <coda_mem_cursor_read_uint64_array+0x98>
    3438:	b	345c <coda_mem_cursor_read_uint64_array+0xb8>
    343c:	movw	r0, #0
    3440:	movt	r0, #0
    3444:	movw	r1, #0
    3448:	movt	r1, #0
    344c:	movw	r2, #868	; 0x364
    3450:	movw	r3, #0
    3454:	movt	r3, #0
    3458:	bl	0 <__assert_fail>
    345c:	ldr	r0, [fp, #-20]	; 0xffffffec
    3460:	ldr	r0, [r0, #4]
    3464:	ldr	r0, [r0, #40]	; 0x28
    3468:	ldr	r0, [r0]
    346c:	cmp	r0, #1
    3470:	bne	34b4 <coda_mem_cursor_read_uint64_array+0x110>
    3474:	movw	r0, #0
    3478:	movt	r0, #0
    347c:	ldr	r1, [fp, #-8]
    3480:	ldr	r2, [fp, #-12]
    3484:	ldr	r3, [fp, #-16]
    3488:	str	r0, [sp, #16]
    348c:	mov	r0, r1
    3490:	ldr	r1, [sp, #16]
    3494:	movw	ip, #8
    3498:	str	r3, [sp, #12]
    349c:	mov	r3, ip
    34a0:	ldr	ip, [sp, #12]
    34a4:	str	ip, [sp]
    34a8:	bl	1e3c <read_array>
    34ac:	str	r0, [fp, #-4]
    34b0:	b	356c <coda_mem_cursor_read_uint64_array+0x1c8>
    34b4:	ldr	r0, [fp, #-20]	; 0xffffffec
    34b8:	ldr	r0, [r0, #4]
    34bc:	ldr	r0, [r0, #40]	; 0x28
    34c0:	ldr	r0, [r0]
    34c4:	cmp	r0, #0
    34c8:	bne	34d0 <coda_mem_cursor_read_uint64_array+0x12c>
    34cc:	b	34f0 <coda_mem_cursor_read_uint64_array+0x14c>
    34d0:	movw	r0, #0
    34d4:	movt	r0, #0
    34d8:	movw	r1, #0
    34dc:	movt	r1, #0
    34e0:	movw	r2, #874	; 0x36a
    34e4:	movw	r3, #0
    34e8:	movt	r3, #0
    34ec:	bl	0 <__assert_fail>
    34f0:	movw	r0, #0
    34f4:	movt	r0, #0
    34f8:	ldr	r1, [fp, #-8]
    34fc:	ldr	r2, [fp, #-12]
    3500:	str	r0, [sp, #8]
    3504:	mov	r0, r1
    3508:	ldr	r1, [sp, #8]
    350c:	movw	r3, #8
    3510:	movw	ip, #0
    3514:	str	ip, [sp]
    3518:	bl	1e3c <read_array>
    351c:	cmp	r0, #0
    3520:	beq	3530 <coda_mem_cursor_read_uint64_array+0x18c>
    3524:	mvn	r0, #0
    3528:	str	r0, [fp, #-4]
    352c:	b	356c <coda_mem_cursor_read_uint64_array+0x1c8>
    3530:	ldr	r0, [fp, #-16]
    3534:	cmp	r0, #0
    3538:	beq	3564 <coda_mem_cursor_read_uint64_array+0x1c0>
    353c:	ldr	r0, [fp, #-8]
    3540:	ldr	r1, [fp, #-12]
    3544:	movw	r2, #8
    3548:	bl	2220 <transpose_array>
    354c:	cmp	r0, #0
    3550:	beq	3560 <coda_mem_cursor_read_uint64_array+0x1bc>
    3554:	mvn	r0, #0
    3558:	str	r0, [fp, #-4]
    355c:	b	356c <coda_mem_cursor_read_uint64_array+0x1c8>
    3560:	b	3564 <coda_mem_cursor_read_uint64_array+0x1c0>
    3564:	movw	r0, #0
    3568:	str	r0, [fp, #-4]
    356c:	ldr	r0, [fp, #-4]
    3570:	mov	sp, fp
    3574:	pop	{fp, pc}

00003578 <coda_mem_cursor_read_float_array>:
    3578:	push	{fp, lr}
    357c:	mov	fp, sp
    3580:	sub	sp, sp, #48	; 0x30
    3584:	str	r0, [fp, #-8]
    3588:	str	r1, [fp, #-12]
    358c:	str	r2, [fp, #-16]
    3590:	ldr	r0, [fp, #-8]
    3594:	add	r1, r0, #8
    3598:	ldr	r0, [r0, #4]
    359c:	sub	r0, r0, #1
    35a0:	add	r0, r1, r0, lsl #4
    35a4:	ldr	r0, [r0]
    35a8:	str	r0, [fp, #-20]	; 0xffffffec
    35ac:	ldr	r0, [fp, #-20]	; 0xffffffec
    35b0:	ldr	r0, [r0, #8]
    35b4:	cmp	r0, #1
    35b8:	bne	35fc <coda_mem_cursor_read_float_array+0x84>
    35bc:	movw	r0, #0
    35c0:	movt	r0, #0
    35c4:	ldr	r1, [fp, #-8]
    35c8:	ldr	r2, [fp, #-12]
    35cc:	ldr	r3, [fp, #-16]
    35d0:	str	r0, [sp, #24]
    35d4:	mov	r0, r1
    35d8:	ldr	r1, [sp, #24]
    35dc:	movw	ip, #4
    35e0:	str	r3, [sp, #20]
    35e4:	mov	r3, ip
    35e8:	ldr	ip, [sp, #20]
    35ec:	str	ip, [sp]
    35f0:	bl	1e3c <read_array>
    35f4:	str	r0, [fp, #-4]
    35f8:	b	3740 <coda_mem_cursor_read_float_array+0x1c8>
    35fc:	ldr	r0, [fp, #-20]	; 0xffffffec
    3600:	ldr	r0, [r0, #8]
    3604:	cmp	r0, #2
    3608:	bne	3610 <coda_mem_cursor_read_float_array+0x98>
    360c:	b	3630 <coda_mem_cursor_read_float_array+0xb8>
    3610:	movw	r0, #0
    3614:	movt	r0, #0
    3618:	movw	r1, #0
    361c:	movt	r1, #0
    3620:	movw	r2, #899	; 0x383
    3624:	movw	r3, #0
    3628:	movt	r3, #0
    362c:	bl	0 <__assert_fail>
    3630:	ldr	r0, [fp, #-20]	; 0xffffffec
    3634:	ldr	r0, [r0, #4]
    3638:	ldr	r0, [r0, #40]	; 0x28
    363c:	ldr	r0, [r0]
    3640:	cmp	r0, #1
    3644:	bne	3688 <coda_mem_cursor_read_float_array+0x110>
    3648:	movw	r0, #0
    364c:	movt	r0, #0
    3650:	ldr	r1, [fp, #-8]
    3654:	ldr	r2, [fp, #-12]
    3658:	ldr	r3, [fp, #-16]
    365c:	str	r0, [sp, #16]
    3660:	mov	r0, r1
    3664:	ldr	r1, [sp, #16]
    3668:	movw	ip, #4
    366c:	str	r3, [sp, #12]
    3670:	mov	r3, ip
    3674:	ldr	ip, [sp, #12]
    3678:	str	ip, [sp]
    367c:	bl	1e3c <read_array>
    3680:	str	r0, [fp, #-4]
    3684:	b	3740 <coda_mem_cursor_read_float_array+0x1c8>
    3688:	ldr	r0, [fp, #-20]	; 0xffffffec
    368c:	ldr	r0, [r0, #4]
    3690:	ldr	r0, [r0, #40]	; 0x28
    3694:	ldr	r0, [r0]
    3698:	cmp	r0, #0
    369c:	bne	36a4 <coda_mem_cursor_read_float_array+0x12c>
    36a0:	b	36c4 <coda_mem_cursor_read_float_array+0x14c>
    36a4:	movw	r0, #0
    36a8:	movt	r0, #0
    36ac:	movw	r1, #0
    36b0:	movt	r1, #0
    36b4:	movw	r2, #905	; 0x389
    36b8:	movw	r3, #0
    36bc:	movt	r3, #0
    36c0:	bl	0 <__assert_fail>
    36c4:	movw	r0, #0
    36c8:	movt	r0, #0
    36cc:	ldr	r1, [fp, #-8]
    36d0:	ldr	r2, [fp, #-12]
    36d4:	str	r0, [sp, #8]
    36d8:	mov	r0, r1
    36dc:	ldr	r1, [sp, #8]
    36e0:	movw	r3, #4
    36e4:	movw	ip, #0
    36e8:	str	ip, [sp]
    36ec:	bl	1e3c <read_array>
    36f0:	cmp	r0, #0
    36f4:	beq	3704 <coda_mem_cursor_read_float_array+0x18c>
    36f8:	mvn	r0, #0
    36fc:	str	r0, [fp, #-4]
    3700:	b	3740 <coda_mem_cursor_read_float_array+0x1c8>
    3704:	ldr	r0, [fp, #-16]
    3708:	cmp	r0, #0
    370c:	beq	3738 <coda_mem_cursor_read_float_array+0x1c0>
    3710:	ldr	r0, [fp, #-8]
    3714:	ldr	r1, [fp, #-12]
    3718:	movw	r2, #4
    371c:	bl	2220 <transpose_array>
    3720:	cmp	r0, #0
    3724:	beq	3734 <coda_mem_cursor_read_float_array+0x1bc>
    3728:	mvn	r0, #0
    372c:	str	r0, [fp, #-4]
    3730:	b	3740 <coda_mem_cursor_read_float_array+0x1c8>
    3734:	b	3738 <coda_mem_cursor_read_float_array+0x1c0>
    3738:	movw	r0, #0
    373c:	str	r0, [fp, #-4]
    3740:	ldr	r0, [fp, #-4]
    3744:	mov	sp, fp
    3748:	pop	{fp, pc}

0000374c <coda_mem_cursor_read_double_array>:
    374c:	push	{fp, lr}
    3750:	mov	fp, sp
    3754:	sub	sp, sp, #48	; 0x30
    3758:	str	r0, [fp, #-8]
    375c:	str	r1, [fp, #-12]
    3760:	str	r2, [fp, #-16]
    3764:	ldr	r0, [fp, #-8]
    3768:	add	r1, r0, #8
    376c:	ldr	r0, [r0, #4]
    3770:	sub	r0, r0, #1
    3774:	add	r0, r1, r0, lsl #4
    3778:	ldr	r0, [r0]
    377c:	str	r0, [fp, #-20]	; 0xffffffec
    3780:	ldr	r0, [fp, #-20]	; 0xffffffec
    3784:	ldr	r0, [r0, #8]
    3788:	cmp	r0, #1
    378c:	bne	37d0 <coda_mem_cursor_read_double_array+0x84>
    3790:	movw	r0, #0
    3794:	movt	r0, #0
    3798:	ldr	r1, [fp, #-8]
    379c:	ldr	r2, [fp, #-12]
    37a0:	ldr	r3, [fp, #-16]
    37a4:	str	r0, [sp, #24]
    37a8:	mov	r0, r1
    37ac:	ldr	r1, [sp, #24]
    37b0:	movw	ip, #8
    37b4:	str	r3, [sp, #20]
    37b8:	mov	r3, ip
    37bc:	ldr	ip, [sp, #20]
    37c0:	str	ip, [sp]
    37c4:	bl	1e3c <read_array>
    37c8:	str	r0, [fp, #-4]
    37cc:	b	3914 <coda_mem_cursor_read_double_array+0x1c8>
    37d0:	ldr	r0, [fp, #-20]	; 0xffffffec
    37d4:	ldr	r0, [r0, #8]
    37d8:	cmp	r0, #2
    37dc:	bne	37e4 <coda_mem_cursor_read_double_array+0x98>
    37e0:	b	3804 <coda_mem_cursor_read_double_array+0xb8>
    37e4:	movw	r0, #0
    37e8:	movt	r0, #0
    37ec:	movw	r1, #0
    37f0:	movt	r1, #0
    37f4:	movw	r2, #930	; 0x3a2
    37f8:	movw	r3, #0
    37fc:	movt	r3, #0
    3800:	bl	0 <__assert_fail>
    3804:	ldr	r0, [fp, #-20]	; 0xffffffec
    3808:	ldr	r0, [r0, #4]
    380c:	ldr	r0, [r0, #40]	; 0x28
    3810:	ldr	r0, [r0]
    3814:	cmp	r0, #1
    3818:	bne	385c <coda_mem_cursor_read_double_array+0x110>
    381c:	movw	r0, #0
    3820:	movt	r0, #0
    3824:	ldr	r1, [fp, #-8]
    3828:	ldr	r2, [fp, #-12]
    382c:	ldr	r3, [fp, #-16]
    3830:	str	r0, [sp, #16]
    3834:	mov	r0, r1
    3838:	ldr	r1, [sp, #16]
    383c:	movw	ip, #8
    3840:	str	r3, [sp, #12]
    3844:	mov	r3, ip
    3848:	ldr	ip, [sp, #12]
    384c:	str	ip, [sp]
    3850:	bl	1e3c <read_array>
    3854:	str	r0, [fp, #-4]
    3858:	b	3914 <coda_mem_cursor_read_double_array+0x1c8>
    385c:	ldr	r0, [fp, #-20]	; 0xffffffec
    3860:	ldr	r0, [r0, #4]
    3864:	ldr	r0, [r0, #40]	; 0x28
    3868:	ldr	r0, [r0]
    386c:	cmp	r0, #0
    3870:	bne	3878 <coda_mem_cursor_read_double_array+0x12c>
    3874:	b	3898 <coda_mem_cursor_read_double_array+0x14c>
    3878:	movw	r0, #0
    387c:	movt	r0, #0
    3880:	movw	r1, #0
    3884:	movt	r1, #0
    3888:	movw	r2, #936	; 0x3a8
    388c:	movw	r3, #0
    3890:	movt	r3, #0
    3894:	bl	0 <__assert_fail>
    3898:	movw	r0, #0
    389c:	movt	r0, #0
    38a0:	ldr	r1, [fp, #-8]
    38a4:	ldr	r2, [fp, #-12]
    38a8:	str	r0, [sp, #8]
    38ac:	mov	r0, r1
    38b0:	ldr	r1, [sp, #8]
    38b4:	movw	r3, #8
    38b8:	movw	ip, #0
    38bc:	str	ip, [sp]
    38c0:	bl	1e3c <read_array>
    38c4:	cmp	r0, #0
    38c8:	beq	38d8 <coda_mem_cursor_read_double_array+0x18c>
    38cc:	mvn	r0, #0
    38d0:	str	r0, [fp, #-4]
    38d4:	b	3914 <coda_mem_cursor_read_double_array+0x1c8>
    38d8:	ldr	r0, [fp, #-16]
    38dc:	cmp	r0, #0
    38e0:	beq	390c <coda_mem_cursor_read_double_array+0x1c0>
    38e4:	ldr	r0, [fp, #-8]
    38e8:	ldr	r1, [fp, #-12]
    38ec:	movw	r2, #8
    38f0:	bl	2220 <transpose_array>
    38f4:	cmp	r0, #0
    38f8:	beq	3908 <coda_mem_cursor_read_double_array+0x1bc>
    38fc:	mvn	r0, #0
    3900:	str	r0, [fp, #-4]
    3904:	b	3914 <coda_mem_cursor_read_double_array+0x1c8>
    3908:	b	390c <coda_mem_cursor_read_double_array+0x1c0>
    390c:	movw	r0, #0
    3910:	str	r0, [fp, #-4]
    3914:	ldr	r0, [fp, #-4]
    3918:	mov	sp, fp
    391c:	pop	{fp, pc}

00003920 <coda_mem_cursor_read_char_array>:
    3920:	push	{fp, lr}
    3924:	mov	fp, sp
    3928:	sub	sp, sp, #32
    392c:	str	r0, [fp, #-8]
    3930:	str	r1, [fp, #-12]
    3934:	str	r2, [sp, #16]
    3938:	ldr	r0, [fp, #-8]
    393c:	add	r1, r0, #8
    3940:	ldr	r0, [r0, #4]
    3944:	sub	r0, r0, #1
    3948:	add	r0, r1, r0, lsl #4
    394c:	ldr	r0, [r0]
    3950:	str	r0, [sp, #12]
    3954:	ldr	r0, [sp, #12]
    3958:	ldr	r0, [r0, #8]
    395c:	cmp	r0, #1
    3960:	bne	3998 <coda_mem_cursor_read_char_array+0x78>
    3964:	ldr	r0, [fp, #-8]
    3968:	ldr	r2, [fp, #-12]
    396c:	ldr	r1, [sp, #16]
    3970:	movw	r3, #0
    3974:	movt	r3, #0
    3978:	str	r1, [sp, #8]
    397c:	mov	r1, r3
    3980:	movw	r3, #1
    3984:	ldr	ip, [sp, #8]
    3988:	str	ip, [sp]
    398c:	bl	1e3c <read_array>
    3990:	str	r0, [fp, #-4]
    3994:	b	3ac4 <coda_mem_cursor_read_char_array+0x1a4>
    3998:	ldr	r0, [sp, #12]
    399c:	ldr	r0, [r0, #8]
    39a0:	cmp	r0, #2
    39a4:	bne	39ac <coda_mem_cursor_read_char_array+0x8c>
    39a8:	b	39cc <coda_mem_cursor_read_char_array+0xac>
    39ac:	movw	r0, #0
    39b0:	movt	r0, #0
    39b4:	movw	r1, #0
    39b8:	movt	r1, #0
    39bc:	movw	r2, #960	; 0x3c0
    39c0:	movw	r3, #0
    39c4:	movt	r3, #0
    39c8:	bl	0 <__assert_fail>
    39cc:	ldr	r0, [sp, #12]
    39d0:	ldr	r0, [r0, #4]
    39d4:	ldr	r0, [r0, #40]	; 0x28
    39d8:	ldr	r0, [r0]
    39dc:	cmp	r0, #1
    39e0:	bne	3a18 <coda_mem_cursor_read_char_array+0xf8>
    39e4:	ldr	r0, [fp, #-8]
    39e8:	ldr	r2, [fp, #-12]
    39ec:	ldr	r1, [sp, #16]
    39f0:	movw	r3, #0
    39f4:	movt	r3, #0
    39f8:	str	r1, [sp, #4]
    39fc:	mov	r1, r3
    3a00:	movw	r3, #1
    3a04:	ldr	ip, [sp, #4]
    3a08:	str	ip, [sp]
    3a0c:	bl	1e3c <read_array>
    3a10:	str	r0, [fp, #-4]
    3a14:	b	3ac4 <coda_mem_cursor_read_char_array+0x1a4>
    3a18:	ldr	r0, [sp, #12]
    3a1c:	ldr	r0, [r0, #4]
    3a20:	ldr	r0, [r0, #40]	; 0x28
    3a24:	ldr	r0, [r0]
    3a28:	cmp	r0, #0
    3a2c:	bne	3a34 <coda_mem_cursor_read_char_array+0x114>
    3a30:	b	3a54 <coda_mem_cursor_read_char_array+0x134>
    3a34:	movw	r0, #0
    3a38:	movt	r0, #0
    3a3c:	movw	r1, #0
    3a40:	movt	r1, #0
    3a44:	movw	r2, #966	; 0x3c6
    3a48:	movw	r3, #0
    3a4c:	movt	r3, #0
    3a50:	bl	0 <__assert_fail>
    3a54:	ldr	r0, [fp, #-8]
    3a58:	ldr	r2, [fp, #-12]
    3a5c:	movw	r1, #0
    3a60:	movt	r1, #0
    3a64:	movw	r3, #1
    3a68:	movw	ip, #0
    3a6c:	str	ip, [sp]
    3a70:	bl	1e3c <read_array>
    3a74:	cmp	r0, #0
    3a78:	beq	3a88 <coda_mem_cursor_read_char_array+0x168>
    3a7c:	mvn	r0, #0
    3a80:	str	r0, [fp, #-4]
    3a84:	b	3ac4 <coda_mem_cursor_read_char_array+0x1a4>
    3a88:	ldr	r0, [sp, #16]
    3a8c:	cmp	r0, #0
    3a90:	beq	3abc <coda_mem_cursor_read_char_array+0x19c>
    3a94:	ldr	r0, [fp, #-8]
    3a98:	ldr	r1, [fp, #-12]
    3a9c:	movw	r2, #1
    3aa0:	bl	2220 <transpose_array>
    3aa4:	cmp	r0, #0
    3aa8:	beq	3ab8 <coda_mem_cursor_read_char_array+0x198>
    3aac:	mvn	r0, #0
    3ab0:	str	r0, [fp, #-4]
    3ab4:	b	3ac4 <coda_mem_cursor_read_char_array+0x1a4>
    3ab8:	b	3abc <coda_mem_cursor_read_char_array+0x19c>
    3abc:	movw	r0, #0
    3ac0:	str	r0, [fp, #-4]
    3ac4:	ldr	r0, [fp, #-4]
    3ac8:	mov	sp, fp
    3acc:	pop	{fp, pc}

00003ad0 <coda_mem_cursor_read_int8_partial_array>:
    3ad0:	push	{fp, lr}
    3ad4:	mov	fp, sp
    3ad8:	sub	sp, sp, #48	; 0x30
    3adc:	str	r0, [fp, #-8]
    3ae0:	str	r1, [fp, #-12]
    3ae4:	str	r2, [fp, #-16]
    3ae8:	str	r3, [fp, #-20]	; 0xffffffec
    3aec:	ldr	r0, [fp, #-8]
    3af0:	add	r1, r0, #8
    3af4:	ldr	r0, [r0, #4]
    3af8:	sub	r0, r0, #1
    3afc:	add	r0, r1, r0, lsl #4
    3b00:	ldr	r0, [r0]
    3b04:	str	r0, [sp, #24]
    3b08:	ldr	r0, [sp, #24]
    3b0c:	ldr	r0, [r0, #8]
    3b10:	cmp	r0, #1
    3b14:	bne	3b54 <coda_mem_cursor_read_int8_partial_array+0x84>
    3b18:	ldr	r0, [fp, #-8]
    3b1c:	ldr	r2, [fp, #-12]
    3b20:	ldr	r3, [fp, #-16]
    3b24:	ldr	r1, [fp, #-20]	; 0xffffffec
    3b28:	movw	ip, #0
    3b2c:	movt	ip, #0
    3b30:	str	r1, [sp, #20]
    3b34:	mov	r1, ip
    3b38:	ldr	ip, [sp, #20]
    3b3c:	str	ip, [sp]
    3b40:	movw	lr, #1
    3b44:	str	lr, [sp, #4]
    3b48:	bl	3c5c <read_partial_array>
    3b4c:	str	r0, [fp, #-4]
    3b50:	b	3c50 <coda_mem_cursor_read_int8_partial_array+0x180>
    3b54:	ldr	r0, [sp, #24]
    3b58:	ldr	r0, [r0, #8]
    3b5c:	cmp	r0, #2
    3b60:	bne	3b68 <coda_mem_cursor_read_int8_partial_array+0x98>
    3b64:	b	3b88 <coda_mem_cursor_read_int8_partial_array+0xb8>
    3b68:	movw	r0, #0
    3b6c:	movt	r0, #0
    3b70:	movw	r1, #0
    3b74:	movt	r1, #0
    3b78:	movw	r2, #991	; 0x3df
    3b7c:	movw	r3, #0
    3b80:	movt	r3, #0
    3b84:	bl	0 <__assert_fail>
    3b88:	ldr	r0, [sp, #24]
    3b8c:	ldr	r0, [r0, #4]
    3b90:	ldr	r0, [r0, #40]	; 0x28
    3b94:	ldr	r0, [r0]
    3b98:	cmp	r0, #1
    3b9c:	bne	3bdc <coda_mem_cursor_read_int8_partial_array+0x10c>
    3ba0:	ldr	r0, [fp, #-8]
    3ba4:	ldr	r2, [fp, #-12]
    3ba8:	ldr	r3, [fp, #-16]
    3bac:	ldr	r1, [fp, #-20]	; 0xffffffec
    3bb0:	movw	ip, #0
    3bb4:	movt	ip, #0
    3bb8:	str	r1, [sp, #16]
    3bbc:	mov	r1, ip
    3bc0:	ldr	ip, [sp, #16]
    3bc4:	str	ip, [sp]
    3bc8:	movw	lr, #1
    3bcc:	str	lr, [sp, #4]
    3bd0:	bl	3c5c <read_partial_array>
    3bd4:	str	r0, [fp, #-4]
    3bd8:	b	3c50 <coda_mem_cursor_read_int8_partial_array+0x180>
    3bdc:	ldr	r0, [sp, #24]
    3be0:	ldr	r0, [r0, #4]
    3be4:	ldr	r0, [r0, #40]	; 0x28
    3be8:	ldr	r0, [r0]
    3bec:	cmp	r0, #0
    3bf0:	bne	3bf8 <coda_mem_cursor_read_int8_partial_array+0x128>
    3bf4:	b	3c18 <coda_mem_cursor_read_int8_partial_array+0x148>
    3bf8:	movw	r0, #0
    3bfc:	movt	r0, #0
    3c00:	movw	r1, #0
    3c04:	movt	r1, #0
    3c08:	movw	r2, #997	; 0x3e5
    3c0c:	movw	r3, #0
    3c10:	movt	r3, #0
    3c14:	bl	0 <__assert_fail>
    3c18:	ldr	r0, [fp, #-8]
    3c1c:	ldr	r2, [fp, #-12]
    3c20:	ldr	r3, [fp, #-16]
    3c24:	ldr	r1, [fp, #-20]	; 0xffffffec
    3c28:	movw	ip, #0
    3c2c:	movt	ip, #0
    3c30:	str	r1, [sp, #12]
    3c34:	mov	r1, ip
    3c38:	ldr	ip, [sp, #12]
    3c3c:	str	ip, [sp]
    3c40:	movw	lr, #1
    3c44:	str	lr, [sp, #4]
    3c48:	bl	3c5c <read_partial_array>
    3c4c:	str	r0, [fp, #-4]
    3c50:	ldr	r0, [fp, #-4]
    3c54:	mov	sp, fp
    3c58:	pop	{fp, pc}

00003c5c <read_partial_array>:
    3c5c:	push	{r4, r5, fp, lr}
    3c60:	add	fp, sp, #8
    3c64:	sub	sp, sp, #568	; 0x238
    3c68:	ldr	ip, [fp, #12]
    3c6c:	ldr	lr, [fp, #8]
    3c70:	str	r0, [fp, #-16]
    3c74:	str	r1, [fp, #-20]	; 0xffffffec
    3c78:	str	r2, [fp, #-24]	; 0xffffffe8
    3c7c:	str	r3, [fp, #-28]	; 0xffffffe4
    3c80:	ldr	r0, [fp, #-16]
    3c84:	add	r1, sp, #24
    3c88:	str	r0, [sp, #16]
    3c8c:	mov	r0, r1
    3c90:	ldr	r1, [sp, #16]
    3c94:	movw	r2, #520	; 0x208
    3c98:	str	lr, [sp, #12]
    3c9c:	str	ip, [sp, #8]
    3ca0:	bl	0 <memcpy>
    3ca4:	ldr	r0, [fp, #-28]	; 0xffffffe4
    3ca8:	cmp	r0, #0
    3cac:	ble	3d74 <read_partial_array+0x118>
    3cb0:	ldr	r1, [fp, #-24]	; 0xffffffe8
    3cb4:	add	r0, sp, #24
    3cb8:	bl	0 <coda_cursor_goto_array_element_by_index>
    3cbc:	cmp	r0, #0
    3cc0:	beq	3cd0 <read_partial_array+0x74>
    3cc4:	mvn	r0, #0
    3cc8:	str	r0, [fp, #-12]
    3ccc:	b	3d7c <read_partial_array+0x120>
    3cd0:	movw	r0, #0
    3cd4:	str	r0, [sp, #20]
    3cd8:	ldr	r0, [sp, #20]
    3cdc:	ldr	r1, [fp, #-28]	; 0xffffffe4
    3ce0:	cmp	r0, r1
    3ce4:	bge	3d70 <read_partial_array+0x114>
    3ce8:	ldr	r0, [fp, #-20]	; 0xffffffec
    3cec:	ldr	r1, [fp, #8]
    3cf0:	ldr	r2, [sp, #20]
    3cf4:	ldr	r3, [fp, #12]
    3cf8:	mul	r2, r2, r3
    3cfc:	add	r1, r1, r2
    3d00:	add	r2, sp, #24
    3d04:	str	r0, [sp, #4]
    3d08:	mov	r0, r2
    3d0c:	ldr	r2, [sp, #4]
    3d10:	blx	r2
    3d14:	cmp	r0, #0
    3d18:	beq	3d28 <read_partial_array+0xcc>
    3d1c:	mvn	r0, #0
    3d20:	str	r0, [fp, #-12]
    3d24:	b	3d7c <read_partial_array+0x120>
    3d28:	ldr	r0, [sp, #20]
    3d2c:	ldr	r1, [fp, #-28]	; 0xffffffe4
    3d30:	sub	r1, r1, #1
    3d34:	cmp	r0, r1
    3d38:	bge	3d5c <read_partial_array+0x100>
    3d3c:	add	r0, sp, #24
    3d40:	bl	0 <coda_cursor_goto_next_array_element>
    3d44:	cmp	r0, #0
    3d48:	beq	3d58 <read_partial_array+0xfc>
    3d4c:	mvn	r0, #0
    3d50:	str	r0, [fp, #-12]
    3d54:	b	3d7c <read_partial_array+0x120>
    3d58:	b	3d5c <read_partial_array+0x100>
    3d5c:	b	3d60 <read_partial_array+0x104>
    3d60:	ldr	r0, [sp, #20]
    3d64:	add	r0, r0, #1
    3d68:	str	r0, [sp, #20]
    3d6c:	b	3cd8 <read_partial_array+0x7c>
    3d70:	b	3d74 <read_partial_array+0x118>
    3d74:	movw	r0, #0
    3d78:	str	r0, [fp, #-12]
    3d7c:	ldr	r0, [fp, #-12]
    3d80:	sub	sp, fp, #8
    3d84:	pop	{r4, r5, fp, pc}

00003d88 <coda_mem_cursor_read_uint8_partial_array>:
    3d88:	push	{fp, lr}
    3d8c:	mov	fp, sp
    3d90:	sub	sp, sp, #48	; 0x30
    3d94:	str	r0, [fp, #-8]
    3d98:	str	r1, [fp, #-12]
    3d9c:	str	r2, [fp, #-16]
    3da0:	str	r3, [fp, #-20]	; 0xffffffec
    3da4:	ldr	r0, [fp, #-8]
    3da8:	add	r1, r0, #8
    3dac:	ldr	r0, [r0, #4]
    3db0:	sub	r0, r0, #1
    3db4:	add	r0, r1, r0, lsl #4
    3db8:	ldr	r0, [r0]
    3dbc:	str	r0, [sp, #24]
    3dc0:	ldr	r0, [sp, #24]
    3dc4:	ldr	r0, [r0, #8]
    3dc8:	cmp	r0, #1
    3dcc:	bne	3e0c <coda_mem_cursor_read_uint8_partial_array+0x84>
    3dd0:	ldr	r0, [fp, #-8]
    3dd4:	ldr	r2, [fp, #-12]
    3dd8:	ldr	r3, [fp, #-16]
    3ddc:	ldr	r1, [fp, #-20]	; 0xffffffec
    3de0:	movw	ip, #0
    3de4:	movt	ip, #0
    3de8:	str	r1, [sp, #20]
    3dec:	mov	r1, ip
    3df0:	ldr	ip, [sp, #20]
    3df4:	str	ip, [sp]
    3df8:	movw	lr, #1
    3dfc:	str	lr, [sp, #4]
    3e00:	bl	3c5c <read_partial_array>
    3e04:	str	r0, [fp, #-4]
    3e08:	b	3f08 <coda_mem_cursor_read_uint8_partial_array+0x180>
    3e0c:	ldr	r0, [sp, #24]
    3e10:	ldr	r0, [r0, #8]
    3e14:	cmp	r0, #2
    3e18:	bne	3e20 <coda_mem_cursor_read_uint8_partial_array+0x98>
    3e1c:	b	3e40 <coda_mem_cursor_read_uint8_partial_array+0xb8>
    3e20:	movw	r0, #0
    3e24:	movt	r0, #0
    3e28:	movw	r1, #0
    3e2c:	movt	r1, #0
    3e30:	movw	r2, #1011	; 0x3f3
    3e34:	movw	r3, #0
    3e38:	movt	r3, #0
    3e3c:	bl	0 <__assert_fail>
    3e40:	ldr	r0, [sp, #24]
    3e44:	ldr	r0, [r0, #4]
    3e48:	ldr	r0, [r0, #40]	; 0x28
    3e4c:	ldr	r0, [r0]
    3e50:	cmp	r0, #1
    3e54:	bne	3e94 <coda_mem_cursor_read_uint8_partial_array+0x10c>
    3e58:	ldr	r0, [fp, #-8]
    3e5c:	ldr	r2, [fp, #-12]
    3e60:	ldr	r3, [fp, #-16]
    3e64:	ldr	r1, [fp, #-20]	; 0xffffffec
    3e68:	movw	ip, #0
    3e6c:	movt	ip, #0
    3e70:	str	r1, [sp, #16]
    3e74:	mov	r1, ip
    3e78:	ldr	ip, [sp, #16]
    3e7c:	str	ip, [sp]
    3e80:	movw	lr, #1
    3e84:	str	lr, [sp, #4]
    3e88:	bl	3c5c <read_partial_array>
    3e8c:	str	r0, [fp, #-4]
    3e90:	b	3f08 <coda_mem_cursor_read_uint8_partial_array+0x180>
    3e94:	ldr	r0, [sp, #24]
    3e98:	ldr	r0, [r0, #4]
    3e9c:	ldr	r0, [r0, #40]	; 0x28
    3ea0:	ldr	r0, [r0]
    3ea4:	cmp	r0, #0
    3ea8:	bne	3eb0 <coda_mem_cursor_read_uint8_partial_array+0x128>
    3eac:	b	3ed0 <coda_mem_cursor_read_uint8_partial_array+0x148>
    3eb0:	movw	r0, #0
    3eb4:	movt	r0, #0
    3eb8:	movw	r1, #0
    3ebc:	movt	r1, #0
    3ec0:	movw	r2, #1017	; 0x3f9
    3ec4:	movw	r3, #0
    3ec8:	movt	r3, #0
    3ecc:	bl	0 <__assert_fail>
    3ed0:	ldr	r0, [fp, #-8]
    3ed4:	ldr	r2, [fp, #-12]
    3ed8:	ldr	r3, [fp, #-16]
    3edc:	ldr	r1, [fp, #-20]	; 0xffffffec
    3ee0:	movw	ip, #0
    3ee4:	movt	ip, #0
    3ee8:	str	r1, [sp, #12]
    3eec:	mov	r1, ip
    3ef0:	ldr	ip, [sp, #12]
    3ef4:	str	ip, [sp]
    3ef8:	movw	lr, #1
    3efc:	str	lr, [sp, #4]
    3f00:	bl	3c5c <read_partial_array>
    3f04:	str	r0, [fp, #-4]
    3f08:	ldr	r0, [fp, #-4]
    3f0c:	mov	sp, fp
    3f10:	pop	{fp, pc}

00003f14 <coda_mem_cursor_read_int16_partial_array>:
    3f14:	push	{fp, lr}
    3f18:	mov	fp, sp
    3f1c:	sub	sp, sp, #48	; 0x30
    3f20:	str	r0, [fp, #-8]
    3f24:	str	r1, [fp, #-12]
    3f28:	str	r2, [fp, #-16]
    3f2c:	str	r3, [fp, #-20]	; 0xffffffec
    3f30:	ldr	r0, [fp, #-8]
    3f34:	add	r1, r0, #8
    3f38:	ldr	r0, [r0, #4]
    3f3c:	sub	r0, r0, #1
    3f40:	add	r0, r1, r0, lsl #4
    3f44:	ldr	r0, [r0]
    3f48:	str	r0, [sp, #24]
    3f4c:	ldr	r0, [sp, #24]
    3f50:	ldr	r0, [r0, #8]
    3f54:	cmp	r0, #1
    3f58:	bne	3f98 <coda_mem_cursor_read_int16_partial_array+0x84>
    3f5c:	movw	r0, #0
    3f60:	movt	r0, #0
    3f64:	ldr	r1, [fp, #-8]
    3f68:	ldr	r2, [fp, #-12]
    3f6c:	ldr	r3, [fp, #-16]
    3f70:	ldr	ip, [fp, #-20]	; 0xffffffec
    3f74:	str	r0, [sp, #20]
    3f78:	mov	r0, r1
    3f7c:	ldr	r1, [sp, #20]
    3f80:	str	ip, [sp]
    3f84:	movw	ip, #2
    3f88:	str	ip, [sp, #4]
    3f8c:	bl	3c5c <read_partial_array>
    3f90:	str	r0, [fp, #-4]
    3f94:	b	4094 <coda_mem_cursor_read_int16_partial_array+0x180>
    3f98:	ldr	r0, [sp, #24]
    3f9c:	ldr	r0, [r0, #8]
    3fa0:	cmp	r0, #2
    3fa4:	bne	3fac <coda_mem_cursor_read_int16_partial_array+0x98>
    3fa8:	b	3fcc <coda_mem_cursor_read_int16_partial_array+0xb8>
    3fac:	movw	r0, #0
    3fb0:	movt	r0, #0
    3fb4:	movw	r1, #0
    3fb8:	movt	r1, #0
    3fbc:	movw	r2, #1031	; 0x407
    3fc0:	movw	r3, #0
    3fc4:	movt	r3, #0
    3fc8:	bl	0 <__assert_fail>
    3fcc:	ldr	r0, [sp, #24]
    3fd0:	ldr	r0, [r0, #4]
    3fd4:	ldr	r0, [r0, #40]	; 0x28
    3fd8:	ldr	r0, [r0]
    3fdc:	cmp	r0, #1
    3fe0:	bne	4020 <coda_mem_cursor_read_int16_partial_array+0x10c>
    3fe4:	movw	r0, #0
    3fe8:	movt	r0, #0
    3fec:	ldr	r1, [fp, #-8]
    3ff0:	ldr	r2, [fp, #-12]
    3ff4:	ldr	r3, [fp, #-16]
    3ff8:	ldr	ip, [fp, #-20]	; 0xffffffec
    3ffc:	str	r0, [sp, #16]
    4000:	mov	r0, r1
    4004:	ldr	r1, [sp, #16]
    4008:	str	ip, [sp]
    400c:	movw	ip, #2
    4010:	str	ip, [sp, #4]
    4014:	bl	3c5c <read_partial_array>
    4018:	str	r0, [fp, #-4]
    401c:	b	4094 <coda_mem_cursor_read_int16_partial_array+0x180>
    4020:	ldr	r0, [sp, #24]
    4024:	ldr	r0, [r0, #4]
    4028:	ldr	r0, [r0, #40]	; 0x28
    402c:	ldr	r0, [r0]
    4030:	cmp	r0, #0
    4034:	bne	403c <coda_mem_cursor_read_int16_partial_array+0x128>
    4038:	b	405c <coda_mem_cursor_read_int16_partial_array+0x148>
    403c:	movw	r0, #0
    4040:	movt	r0, #0
    4044:	movw	r1, #0
    4048:	movt	r1, #0
    404c:	movw	r2, #1037	; 0x40d
    4050:	movw	r3, #0
    4054:	movt	r3, #0
    4058:	bl	0 <__assert_fail>
    405c:	movw	r0, #0
    4060:	movt	r0, #0
    4064:	ldr	r1, [fp, #-8]
    4068:	ldr	r2, [fp, #-12]
    406c:	ldr	r3, [fp, #-16]
    4070:	ldr	ip, [fp, #-20]	; 0xffffffec
    4074:	str	r0, [sp, #12]
    4078:	mov	r0, r1
    407c:	ldr	r1, [sp, #12]
    4080:	str	ip, [sp]
    4084:	movw	ip, #2
    4088:	str	ip, [sp, #4]
    408c:	bl	3c5c <read_partial_array>
    4090:	str	r0, [fp, #-4]
    4094:	ldr	r0, [fp, #-4]
    4098:	mov	sp, fp
    409c:	pop	{fp, pc}

000040a0 <coda_mem_cursor_read_uint16_partial_array>:
    40a0:	push	{fp, lr}
    40a4:	mov	fp, sp
    40a8:	sub	sp, sp, #48	; 0x30
    40ac:	str	r0, [fp, #-8]
    40b0:	str	r1, [fp, #-12]
    40b4:	str	r2, [fp, #-16]
    40b8:	str	r3, [fp, #-20]	; 0xffffffec
    40bc:	ldr	r0, [fp, #-8]
    40c0:	add	r1, r0, #8
    40c4:	ldr	r0, [r0, #4]
    40c8:	sub	r0, r0, #1
    40cc:	add	r0, r1, r0, lsl #4
    40d0:	ldr	r0, [r0]
    40d4:	str	r0, [sp, #24]
    40d8:	ldr	r0, [sp, #24]
    40dc:	ldr	r0, [r0, #8]
    40e0:	cmp	r0, #1
    40e4:	bne	4124 <coda_mem_cursor_read_uint16_partial_array+0x84>
    40e8:	movw	r0, #0
    40ec:	movt	r0, #0
    40f0:	ldr	r1, [fp, #-8]
    40f4:	ldr	r2, [fp, #-12]
    40f8:	ldr	r3, [fp, #-16]
    40fc:	ldr	ip, [fp, #-20]	; 0xffffffec
    4100:	str	r0, [sp, #20]
    4104:	mov	r0, r1
    4108:	ldr	r1, [sp, #20]
    410c:	str	ip, [sp]
    4110:	movw	ip, #2
    4114:	str	ip, [sp, #4]
    4118:	bl	3c5c <read_partial_array>
    411c:	str	r0, [fp, #-4]
    4120:	b	4220 <coda_mem_cursor_read_uint16_partial_array+0x180>
    4124:	ldr	r0, [sp, #24]
    4128:	ldr	r0, [r0, #8]
    412c:	cmp	r0, #2
    4130:	bne	4138 <coda_mem_cursor_read_uint16_partial_array+0x98>
    4134:	b	4158 <coda_mem_cursor_read_uint16_partial_array+0xb8>
    4138:	movw	r0, #0
    413c:	movt	r0, #0
    4140:	movw	r1, #0
    4144:	movt	r1, #0
    4148:	movw	r2, #1051	; 0x41b
    414c:	movw	r3, #0
    4150:	movt	r3, #0
    4154:	bl	0 <__assert_fail>
    4158:	ldr	r0, [sp, #24]
    415c:	ldr	r0, [r0, #4]
    4160:	ldr	r0, [r0, #40]	; 0x28
    4164:	ldr	r0, [r0]
    4168:	cmp	r0, #1
    416c:	bne	41ac <coda_mem_cursor_read_uint16_partial_array+0x10c>
    4170:	movw	r0, #0
    4174:	movt	r0, #0
    4178:	ldr	r1, [fp, #-8]
    417c:	ldr	r2, [fp, #-12]
    4180:	ldr	r3, [fp, #-16]
    4184:	ldr	ip, [fp, #-20]	; 0xffffffec
    4188:	str	r0, [sp, #16]
    418c:	mov	r0, r1
    4190:	ldr	r1, [sp, #16]
    4194:	str	ip, [sp]
    4198:	movw	ip, #2
    419c:	str	ip, [sp, #4]
    41a0:	bl	3c5c <read_partial_array>
    41a4:	str	r0, [fp, #-4]
    41a8:	b	4220 <coda_mem_cursor_read_uint16_partial_array+0x180>
    41ac:	ldr	r0, [sp, #24]
    41b0:	ldr	r0, [r0, #4]
    41b4:	ldr	r0, [r0, #40]	; 0x28
    41b8:	ldr	r0, [r0]
    41bc:	cmp	r0, #0
    41c0:	bne	41c8 <coda_mem_cursor_read_uint16_partial_array+0x128>
    41c4:	b	41e8 <coda_mem_cursor_read_uint16_partial_array+0x148>
    41c8:	movw	r0, #0
    41cc:	movt	r0, #0
    41d0:	movw	r1, #0
    41d4:	movt	r1, #0
    41d8:	movw	r2, #1057	; 0x421
    41dc:	movw	r3, #0
    41e0:	movt	r3, #0
    41e4:	bl	0 <__assert_fail>
    41e8:	movw	r0, #0
    41ec:	movt	r0, #0
    41f0:	ldr	r1, [fp, #-8]
    41f4:	ldr	r2, [fp, #-12]
    41f8:	ldr	r3, [fp, #-16]
    41fc:	ldr	ip, [fp, #-20]	; 0xffffffec
    4200:	str	r0, [sp, #12]
    4204:	mov	r0, r1
    4208:	ldr	r1, [sp, #12]
    420c:	str	ip, [sp]
    4210:	movw	ip, #2
    4214:	str	ip, [sp, #4]
    4218:	bl	3c5c <read_partial_array>
    421c:	str	r0, [fp, #-4]
    4220:	ldr	r0, [fp, #-4]
    4224:	mov	sp, fp
    4228:	pop	{fp, pc}

0000422c <coda_mem_cursor_read_int32_partial_array>:
    422c:	push	{fp, lr}
    4230:	mov	fp, sp
    4234:	sub	sp, sp, #48	; 0x30
    4238:	str	r0, [fp, #-8]
    423c:	str	r1, [fp, #-12]
    4240:	str	r2, [fp, #-16]
    4244:	str	r3, [fp, #-20]	; 0xffffffec
    4248:	ldr	r0, [fp, #-8]
    424c:	add	r1, r0, #8
    4250:	ldr	r0, [r0, #4]
    4254:	sub	r0, r0, #1
    4258:	add	r0, r1, r0, lsl #4
    425c:	ldr	r0, [r0]
    4260:	str	r0, [sp, #24]
    4264:	ldr	r0, [sp, #24]
    4268:	ldr	r0, [r0, #8]
    426c:	cmp	r0, #1
    4270:	bne	42b0 <coda_mem_cursor_read_int32_partial_array+0x84>
    4274:	movw	r0, #0
    4278:	movt	r0, #0
    427c:	ldr	r1, [fp, #-8]
    4280:	ldr	r2, [fp, #-12]
    4284:	ldr	r3, [fp, #-16]
    4288:	ldr	ip, [fp, #-20]	; 0xffffffec
    428c:	str	r0, [sp, #20]
    4290:	mov	r0, r1
    4294:	ldr	r1, [sp, #20]
    4298:	str	ip, [sp]
    429c:	movw	ip, #4
    42a0:	str	ip, [sp, #4]
    42a4:	bl	3c5c <read_partial_array>
    42a8:	str	r0, [fp, #-4]
    42ac:	b	43ac <coda_mem_cursor_read_int32_partial_array+0x180>
    42b0:	ldr	r0, [sp, #24]
    42b4:	ldr	r0, [r0, #8]
    42b8:	cmp	r0, #2
    42bc:	bne	42c4 <coda_mem_cursor_read_int32_partial_array+0x98>
    42c0:	b	42e4 <coda_mem_cursor_read_int32_partial_array+0xb8>
    42c4:	movw	r0, #0
    42c8:	movt	r0, #0
    42cc:	movw	r1, #0
    42d0:	movt	r1, #0
    42d4:	movw	r2, #1071	; 0x42f
    42d8:	movw	r3, #0
    42dc:	movt	r3, #0
    42e0:	bl	0 <__assert_fail>
    42e4:	ldr	r0, [sp, #24]
    42e8:	ldr	r0, [r0, #4]
    42ec:	ldr	r0, [r0, #40]	; 0x28
    42f0:	ldr	r0, [r0]
    42f4:	cmp	r0, #1
    42f8:	bne	4338 <coda_mem_cursor_read_int32_partial_array+0x10c>
    42fc:	movw	r0, #0
    4300:	movt	r0, #0
    4304:	ldr	r1, [fp, #-8]
    4308:	ldr	r2, [fp, #-12]
    430c:	ldr	r3, [fp, #-16]
    4310:	ldr	ip, [fp, #-20]	; 0xffffffec
    4314:	str	r0, [sp, #16]
    4318:	mov	r0, r1
    431c:	ldr	r1, [sp, #16]
    4320:	str	ip, [sp]
    4324:	movw	ip, #4
    4328:	str	ip, [sp, #4]
    432c:	bl	3c5c <read_partial_array>
    4330:	str	r0, [fp, #-4]
    4334:	b	43ac <coda_mem_cursor_read_int32_partial_array+0x180>
    4338:	ldr	r0, [sp, #24]
    433c:	ldr	r0, [r0, #4]
    4340:	ldr	r0, [r0, #40]	; 0x28
    4344:	ldr	r0, [r0]
    4348:	cmp	r0, #0
    434c:	bne	4354 <coda_mem_cursor_read_int32_partial_array+0x128>
    4350:	b	4374 <coda_mem_cursor_read_int32_partial_array+0x148>
    4354:	movw	r0, #0
    4358:	movt	r0, #0
    435c:	movw	r1, #0
    4360:	movt	r1, #0
    4364:	movw	r2, #1077	; 0x435
    4368:	movw	r3, #0
    436c:	movt	r3, #0
    4370:	bl	0 <__assert_fail>
    4374:	movw	r0, #0
    4378:	movt	r0, #0
    437c:	ldr	r1, [fp, #-8]
    4380:	ldr	r2, [fp, #-12]
    4384:	ldr	r3, [fp, #-16]
    4388:	ldr	ip, [fp, #-20]	; 0xffffffec
    438c:	str	r0, [sp, #12]
    4390:	mov	r0, r1
    4394:	ldr	r1, [sp, #12]
    4398:	str	ip, [sp]
    439c:	movw	ip, #4
    43a0:	str	ip, [sp, #4]
    43a4:	bl	3c5c <read_partial_array>
    43a8:	str	r0, [fp, #-4]
    43ac:	ldr	r0, [fp, #-4]
    43b0:	mov	sp, fp
    43b4:	pop	{fp, pc}

000043b8 <coda_mem_cursor_read_uint32_partial_array>:
    43b8:	push	{fp, lr}
    43bc:	mov	fp, sp
    43c0:	sub	sp, sp, #48	; 0x30
    43c4:	str	r0, [fp, #-8]
    43c8:	str	r1, [fp, #-12]
    43cc:	str	r2, [fp, #-16]
    43d0:	str	r3, [fp, #-20]	; 0xffffffec
    43d4:	ldr	r0, [fp, #-8]
    43d8:	add	r1, r0, #8
    43dc:	ldr	r0, [r0, #4]
    43e0:	sub	r0, r0, #1
    43e4:	add	r0, r1, r0, lsl #4
    43e8:	ldr	r0, [r0]
    43ec:	str	r0, [sp, #24]
    43f0:	ldr	r0, [sp, #24]
    43f4:	ldr	r0, [r0, #8]
    43f8:	cmp	r0, #1
    43fc:	bne	443c <coda_mem_cursor_read_uint32_partial_array+0x84>
    4400:	movw	r0, #0
    4404:	movt	r0, #0
    4408:	ldr	r1, [fp, #-8]
    440c:	ldr	r2, [fp, #-12]
    4410:	ldr	r3, [fp, #-16]
    4414:	ldr	ip, [fp, #-20]	; 0xffffffec
    4418:	str	r0, [sp, #20]
    441c:	mov	r0, r1
    4420:	ldr	r1, [sp, #20]
    4424:	str	ip, [sp]
    4428:	movw	ip, #4
    442c:	str	ip, [sp, #4]
    4430:	bl	3c5c <read_partial_array>
    4434:	str	r0, [fp, #-4]
    4438:	b	4538 <coda_mem_cursor_read_uint32_partial_array+0x180>
    443c:	ldr	r0, [sp, #24]
    4440:	ldr	r0, [r0, #8]
    4444:	cmp	r0, #2
    4448:	bne	4450 <coda_mem_cursor_read_uint32_partial_array+0x98>
    444c:	b	4470 <coda_mem_cursor_read_uint32_partial_array+0xb8>
    4450:	movw	r0, #0
    4454:	movt	r0, #0
    4458:	movw	r1, #0
    445c:	movt	r1, #0
    4460:	movw	r2, #1091	; 0x443
    4464:	movw	r3, #0
    4468:	movt	r3, #0
    446c:	bl	0 <__assert_fail>
    4470:	ldr	r0, [sp, #24]
    4474:	ldr	r0, [r0, #4]
    4478:	ldr	r0, [r0, #40]	; 0x28
    447c:	ldr	r0, [r0]
    4480:	cmp	r0, #1
    4484:	bne	44c4 <coda_mem_cursor_read_uint32_partial_array+0x10c>
    4488:	movw	r0, #0
    448c:	movt	r0, #0
    4490:	ldr	r1, [fp, #-8]
    4494:	ldr	r2, [fp, #-12]
    4498:	ldr	r3, [fp, #-16]
    449c:	ldr	ip, [fp, #-20]	; 0xffffffec
    44a0:	str	r0, [sp, #16]
    44a4:	mov	r0, r1
    44a8:	ldr	r1, [sp, #16]
    44ac:	str	ip, [sp]
    44b0:	movw	ip, #4
    44b4:	str	ip, [sp, #4]
    44b8:	bl	3c5c <read_partial_array>
    44bc:	str	r0, [fp, #-4]
    44c0:	b	4538 <coda_mem_cursor_read_uint32_partial_array+0x180>
    44c4:	ldr	r0, [sp, #24]
    44c8:	ldr	r0, [r0, #4]
    44cc:	ldr	r0, [r0, #40]	; 0x28
    44d0:	ldr	r0, [r0]
    44d4:	cmp	r0, #0
    44d8:	bne	44e0 <coda_mem_cursor_read_uint32_partial_array+0x128>
    44dc:	b	4500 <coda_mem_cursor_read_uint32_partial_array+0x148>
    44e0:	movw	r0, #0
    44e4:	movt	r0, #0
    44e8:	movw	r1, #0
    44ec:	movt	r1, #0
    44f0:	movw	r2, #1097	; 0x449
    44f4:	movw	r3, #0
    44f8:	movt	r3, #0
    44fc:	bl	0 <__assert_fail>
    4500:	movw	r0, #0
    4504:	movt	r0, #0
    4508:	ldr	r1, [fp, #-8]
    450c:	ldr	r2, [fp, #-12]
    4510:	ldr	r3, [fp, #-16]
    4514:	ldr	ip, [fp, #-20]	; 0xffffffec
    4518:	str	r0, [sp, #12]
    451c:	mov	r0, r1
    4520:	ldr	r1, [sp, #12]
    4524:	str	ip, [sp]
    4528:	movw	ip, #4
    452c:	str	ip, [sp, #4]
    4530:	bl	3c5c <read_partial_array>
    4534:	str	r0, [fp, #-4]
    4538:	ldr	r0, [fp, #-4]
    453c:	mov	sp, fp
    4540:	pop	{fp, pc}

00004544 <coda_mem_cursor_read_int64_partial_array>:
    4544:	push	{fp, lr}
    4548:	mov	fp, sp
    454c:	sub	sp, sp, #48	; 0x30
    4550:	str	r0, [fp, #-8]
    4554:	str	r1, [fp, #-12]
    4558:	str	r2, [fp, #-16]
    455c:	str	r3, [fp, #-20]	; 0xffffffec
    4560:	ldr	r0, [fp, #-8]
    4564:	add	r1, r0, #8
    4568:	ldr	r0, [r0, #4]
    456c:	sub	r0, r0, #1
    4570:	add	r0, r1, r0, lsl #4
    4574:	ldr	r0, [r0]
    4578:	str	r0, [sp, #24]
    457c:	ldr	r0, [sp, #24]
    4580:	ldr	r0, [r0, #8]
    4584:	cmp	r0, #1
    4588:	bne	45c8 <coda_mem_cursor_read_int64_partial_array+0x84>
    458c:	movw	r0, #0
    4590:	movt	r0, #0
    4594:	ldr	r1, [fp, #-8]
    4598:	ldr	r2, [fp, #-12]
    459c:	ldr	r3, [fp, #-16]
    45a0:	ldr	ip, [fp, #-20]	; 0xffffffec
    45a4:	str	r0, [sp, #20]
    45a8:	mov	r0, r1
    45ac:	ldr	r1, [sp, #20]
    45b0:	str	ip, [sp]
    45b4:	movw	ip, #8
    45b8:	str	ip, [sp, #4]
    45bc:	bl	3c5c <read_partial_array>
    45c0:	str	r0, [fp, #-4]
    45c4:	b	46c4 <coda_mem_cursor_read_int64_partial_array+0x180>
    45c8:	ldr	r0, [sp, #24]
    45cc:	ldr	r0, [r0, #8]
    45d0:	cmp	r0, #2
    45d4:	bne	45dc <coda_mem_cursor_read_int64_partial_array+0x98>
    45d8:	b	45fc <coda_mem_cursor_read_int64_partial_array+0xb8>
    45dc:	movw	r0, #0
    45e0:	movt	r0, #0
    45e4:	movw	r1, #0
    45e8:	movt	r1, #0
    45ec:	movw	r2, #1111	; 0x457
    45f0:	movw	r3, #0
    45f4:	movt	r3, #0
    45f8:	bl	0 <__assert_fail>
    45fc:	ldr	r0, [sp, #24]
    4600:	ldr	r0, [r0, #4]
    4604:	ldr	r0, [r0, #40]	; 0x28
    4608:	ldr	r0, [r0]
    460c:	cmp	r0, #1
    4610:	bne	4650 <coda_mem_cursor_read_int64_partial_array+0x10c>
    4614:	movw	r0, #0
    4618:	movt	r0, #0
    461c:	ldr	r1, [fp, #-8]
    4620:	ldr	r2, [fp, #-12]
    4624:	ldr	r3, [fp, #-16]
    4628:	ldr	ip, [fp, #-20]	; 0xffffffec
    462c:	str	r0, [sp, #16]
    4630:	mov	r0, r1
    4634:	ldr	r1, [sp, #16]
    4638:	str	ip, [sp]
    463c:	movw	ip, #8
    4640:	str	ip, [sp, #4]
    4644:	bl	3c5c <read_partial_array>
    4648:	str	r0, [fp, #-4]
    464c:	b	46c4 <coda_mem_cursor_read_int64_partial_array+0x180>
    4650:	ldr	r0, [sp, #24]
    4654:	ldr	r0, [r0, #4]
    4658:	ldr	r0, [r0, #40]	; 0x28
    465c:	ldr	r0, [r0]
    4660:	cmp	r0, #0
    4664:	bne	466c <coda_mem_cursor_read_int64_partial_array+0x128>
    4668:	b	468c <coda_mem_cursor_read_int64_partial_array+0x148>
    466c:	movw	r0, #0
    4670:	movt	r0, #0
    4674:	movw	r1, #0
    4678:	movt	r1, #0
    467c:	movw	r2, #1117	; 0x45d
    4680:	movw	r3, #0
    4684:	movt	r3, #0
    4688:	bl	0 <__assert_fail>
    468c:	movw	r0, #0
    4690:	movt	r0, #0
    4694:	ldr	r1, [fp, #-8]
    4698:	ldr	r2, [fp, #-12]
    469c:	ldr	r3, [fp, #-16]
    46a0:	ldr	ip, [fp, #-20]	; 0xffffffec
    46a4:	str	r0, [sp, #12]
    46a8:	mov	r0, r1
    46ac:	ldr	r1, [sp, #12]
    46b0:	str	ip, [sp]
    46b4:	movw	ip, #8
    46b8:	str	ip, [sp, #4]
    46bc:	bl	3c5c <read_partial_array>
    46c0:	str	r0, [fp, #-4]
    46c4:	ldr	r0, [fp, #-4]
    46c8:	mov	sp, fp
    46cc:	pop	{fp, pc}

000046d0 <coda_mem_cursor_read_uint64_partial_array>:
    46d0:	push	{fp, lr}
    46d4:	mov	fp, sp
    46d8:	sub	sp, sp, #48	; 0x30
    46dc:	str	r0, [fp, #-8]
    46e0:	str	r1, [fp, #-12]
    46e4:	str	r2, [fp, #-16]
    46e8:	str	r3, [fp, #-20]	; 0xffffffec
    46ec:	ldr	r0, [fp, #-8]
    46f0:	add	r1, r0, #8
    46f4:	ldr	r0, [r0, #4]
    46f8:	sub	r0, r0, #1
    46fc:	add	r0, r1, r0, lsl #4
    4700:	ldr	r0, [r0]
    4704:	str	r0, [sp, #24]
    4708:	ldr	r0, [sp, #24]
    470c:	ldr	r0, [r0, #8]
    4710:	cmp	r0, #1
    4714:	bne	4754 <coda_mem_cursor_read_uint64_partial_array+0x84>
    4718:	movw	r0, #0
    471c:	movt	r0, #0
    4720:	ldr	r1, [fp, #-8]
    4724:	ldr	r2, [fp, #-12]
    4728:	ldr	r3, [fp, #-16]
    472c:	ldr	ip, [fp, #-20]	; 0xffffffec
    4730:	str	r0, [sp, #20]
    4734:	mov	r0, r1
    4738:	ldr	r1, [sp, #20]
    473c:	str	ip, [sp]
    4740:	movw	ip, #8
    4744:	str	ip, [sp, #4]
    4748:	bl	3c5c <read_partial_array>
    474c:	str	r0, [fp, #-4]
    4750:	b	4850 <coda_mem_cursor_read_uint64_partial_array+0x180>
    4754:	ldr	r0, [sp, #24]
    4758:	ldr	r0, [r0, #8]
    475c:	cmp	r0, #2
    4760:	bne	4768 <coda_mem_cursor_read_uint64_partial_array+0x98>
    4764:	b	4788 <coda_mem_cursor_read_uint64_partial_array+0xb8>
    4768:	movw	r0, #0
    476c:	movt	r0, #0
    4770:	movw	r1, #0
    4774:	movt	r1, #0
    4778:	movw	r2, #1131	; 0x46b
    477c:	movw	r3, #0
    4780:	movt	r3, #0
    4784:	bl	0 <__assert_fail>
    4788:	ldr	r0, [sp, #24]
    478c:	ldr	r0, [r0, #4]
    4790:	ldr	r0, [r0, #40]	; 0x28
    4794:	ldr	r0, [r0]
    4798:	cmp	r0, #1
    479c:	bne	47dc <coda_mem_cursor_read_uint64_partial_array+0x10c>
    47a0:	movw	r0, #0
    47a4:	movt	r0, #0
    47a8:	ldr	r1, [fp, #-8]
    47ac:	ldr	r2, [fp, #-12]
    47b0:	ldr	r3, [fp, #-16]
    47b4:	ldr	ip, [fp, #-20]	; 0xffffffec
    47b8:	str	r0, [sp, #16]
    47bc:	mov	r0, r1
    47c0:	ldr	r1, [sp, #16]
    47c4:	str	ip, [sp]
    47c8:	movw	ip, #8
    47cc:	str	ip, [sp, #4]
    47d0:	bl	3c5c <read_partial_array>
    47d4:	str	r0, [fp, #-4]
    47d8:	b	4850 <coda_mem_cursor_read_uint64_partial_array+0x180>
    47dc:	ldr	r0, [sp, #24]
    47e0:	ldr	r0, [r0, #4]
    47e4:	ldr	r0, [r0, #40]	; 0x28
    47e8:	ldr	r0, [r0]
    47ec:	cmp	r0, #0
    47f0:	bne	47f8 <coda_mem_cursor_read_uint64_partial_array+0x128>
    47f4:	b	4818 <coda_mem_cursor_read_uint64_partial_array+0x148>
    47f8:	movw	r0, #0
    47fc:	movt	r0, #0
    4800:	movw	r1, #0
    4804:	movt	r1, #0
    4808:	movw	r2, #1137	; 0x471
    480c:	movw	r3, #0
    4810:	movt	r3, #0
    4814:	bl	0 <__assert_fail>
    4818:	movw	r0, #0
    481c:	movt	r0, #0
    4820:	ldr	r1, [fp, #-8]
    4824:	ldr	r2, [fp, #-12]
    4828:	ldr	r3, [fp, #-16]
    482c:	ldr	ip, [fp, #-20]	; 0xffffffec
    4830:	str	r0, [sp, #12]
    4834:	mov	r0, r1
    4838:	ldr	r1, [sp, #12]
    483c:	str	ip, [sp]
    4840:	movw	ip, #8
    4844:	str	ip, [sp, #4]
    4848:	bl	3c5c <read_partial_array>
    484c:	str	r0, [fp, #-4]
    4850:	ldr	r0, [fp, #-4]
    4854:	mov	sp, fp
    4858:	pop	{fp, pc}

0000485c <coda_mem_cursor_read_float_partial_array>:
    485c:	push	{fp, lr}
    4860:	mov	fp, sp
    4864:	sub	sp, sp, #48	; 0x30
    4868:	str	r0, [fp, #-8]
    486c:	str	r1, [fp, #-12]
    4870:	str	r2, [fp, #-16]
    4874:	str	r3, [fp, #-20]	; 0xffffffec
    4878:	ldr	r0, [fp, #-8]
    487c:	add	r1, r0, #8
    4880:	ldr	r0, [r0, #4]
    4884:	sub	r0, r0, #1
    4888:	add	r0, r1, r0, lsl #4
    488c:	ldr	r0, [r0]
    4890:	str	r0, [sp, #24]
    4894:	ldr	r0, [sp, #24]
    4898:	ldr	r0, [r0, #8]
    489c:	cmp	r0, #1
    48a0:	bne	48e0 <coda_mem_cursor_read_float_partial_array+0x84>
    48a4:	movw	r0, #0
    48a8:	movt	r0, #0
    48ac:	ldr	r1, [fp, #-8]
    48b0:	ldr	r2, [fp, #-12]
    48b4:	ldr	r3, [fp, #-16]
    48b8:	ldr	ip, [fp, #-20]	; 0xffffffec
    48bc:	str	r0, [sp, #20]
    48c0:	mov	r0, r1
    48c4:	ldr	r1, [sp, #20]
    48c8:	str	ip, [sp]
    48cc:	movw	ip, #4
    48d0:	str	ip, [sp, #4]
    48d4:	bl	3c5c <read_partial_array>
    48d8:	str	r0, [fp, #-4]
    48dc:	b	49dc <coda_mem_cursor_read_float_partial_array+0x180>
    48e0:	ldr	r0, [sp, #24]
    48e4:	ldr	r0, [r0, #8]
    48e8:	cmp	r0, #2
    48ec:	bne	48f4 <coda_mem_cursor_read_float_partial_array+0x98>
    48f0:	b	4914 <coda_mem_cursor_read_float_partial_array+0xb8>
    48f4:	movw	r0, #0
    48f8:	movt	r0, #0
    48fc:	movw	r1, #0
    4900:	movt	r1, #0
    4904:	movw	r2, #1151	; 0x47f
    4908:	movw	r3, #0
    490c:	movt	r3, #0
    4910:	bl	0 <__assert_fail>
    4914:	ldr	r0, [sp, #24]
    4918:	ldr	r0, [r0, #4]
    491c:	ldr	r0, [r0, #40]	; 0x28
    4920:	ldr	r0, [r0]
    4924:	cmp	r0, #1
    4928:	bne	4968 <coda_mem_cursor_read_float_partial_array+0x10c>
    492c:	movw	r0, #0
    4930:	movt	r0, #0
    4934:	ldr	r1, [fp, #-8]
    4938:	ldr	r2, [fp, #-12]
    493c:	ldr	r3, [fp, #-16]
    4940:	ldr	ip, [fp, #-20]	; 0xffffffec
    4944:	str	r0, [sp, #16]
    4948:	mov	r0, r1
    494c:	ldr	r1, [sp, #16]
    4950:	str	ip, [sp]
    4954:	movw	ip, #4
    4958:	str	ip, [sp, #4]
    495c:	bl	3c5c <read_partial_array>
    4960:	str	r0, [fp, #-4]
    4964:	b	49dc <coda_mem_cursor_read_float_partial_array+0x180>
    4968:	ldr	r0, [sp, #24]
    496c:	ldr	r0, [r0, #4]
    4970:	ldr	r0, [r0, #40]	; 0x28
    4974:	ldr	r0, [r0]
    4978:	cmp	r0, #0
    497c:	bne	4984 <coda_mem_cursor_read_float_partial_array+0x128>
    4980:	b	49a4 <coda_mem_cursor_read_float_partial_array+0x148>
    4984:	movw	r0, #0
    4988:	movt	r0, #0
    498c:	movw	r1, #0
    4990:	movt	r1, #0
    4994:	movw	r2, #1157	; 0x485
    4998:	movw	r3, #0
    499c:	movt	r3, #0
    49a0:	bl	0 <__assert_fail>
    49a4:	movw	r0, #0
    49a8:	movt	r0, #0
    49ac:	ldr	r1, [fp, #-8]
    49b0:	ldr	r2, [fp, #-12]
    49b4:	ldr	r3, [fp, #-16]
    49b8:	ldr	ip, [fp, #-20]	; 0xffffffec
    49bc:	str	r0, [sp, #12]
    49c0:	mov	r0, r1
    49c4:	ldr	r1, [sp, #12]
    49c8:	str	ip, [sp]
    49cc:	movw	ip, #4
    49d0:	str	ip, [sp, #4]
    49d4:	bl	3c5c <read_partial_array>
    49d8:	str	r0, [fp, #-4]
    49dc:	ldr	r0, [fp, #-4]
    49e0:	mov	sp, fp
    49e4:	pop	{fp, pc}

000049e8 <coda_mem_cursor_read_double_partial_array>:
    49e8:	push	{fp, lr}
    49ec:	mov	fp, sp
    49f0:	sub	sp, sp, #48	; 0x30
    49f4:	str	r0, [fp, #-8]
    49f8:	str	r1, [fp, #-12]
    49fc:	str	r2, [fp, #-16]
    4a00:	str	r3, [fp, #-20]	; 0xffffffec
    4a04:	ldr	r0, [fp, #-8]
    4a08:	add	r1, r0, #8
    4a0c:	ldr	r0, [r0, #4]
    4a10:	sub	r0, r0, #1
    4a14:	add	r0, r1, r0, lsl #4
    4a18:	ldr	r0, [r0]
    4a1c:	str	r0, [sp, #24]
    4a20:	ldr	r0, [sp, #24]
    4a24:	ldr	r0, [r0, #8]
    4a28:	cmp	r0, #1
    4a2c:	bne	4a6c <coda_mem_cursor_read_double_partial_array+0x84>
    4a30:	movw	r0, #0
    4a34:	movt	r0, #0
    4a38:	ldr	r1, [fp, #-8]
    4a3c:	ldr	r2, [fp, #-12]
    4a40:	ldr	r3, [fp, #-16]
    4a44:	ldr	ip, [fp, #-20]	; 0xffffffec
    4a48:	str	r0, [sp, #20]
    4a4c:	mov	r0, r1
    4a50:	ldr	r1, [sp, #20]
    4a54:	str	ip, [sp]
    4a58:	movw	ip, #8
    4a5c:	str	ip, [sp, #4]
    4a60:	bl	3c5c <read_partial_array>
    4a64:	str	r0, [fp, #-4]
    4a68:	b	4b68 <coda_mem_cursor_read_double_partial_array+0x180>
    4a6c:	ldr	r0, [sp, #24]
    4a70:	ldr	r0, [r0, #8]
    4a74:	cmp	r0, #2
    4a78:	bne	4a80 <coda_mem_cursor_read_double_partial_array+0x98>
    4a7c:	b	4aa0 <coda_mem_cursor_read_double_partial_array+0xb8>
    4a80:	movw	r0, #0
    4a84:	movt	r0, #0
    4a88:	movw	r1, #0
    4a8c:	movt	r1, #0
    4a90:	movw	r2, #1171	; 0x493
    4a94:	movw	r3, #0
    4a98:	movt	r3, #0
    4a9c:	bl	0 <__assert_fail>
    4aa0:	ldr	r0, [sp, #24]
    4aa4:	ldr	r0, [r0, #4]
    4aa8:	ldr	r0, [r0, #40]	; 0x28
    4aac:	ldr	r0, [r0]
    4ab0:	cmp	r0, #1
    4ab4:	bne	4af4 <coda_mem_cursor_read_double_partial_array+0x10c>
    4ab8:	movw	r0, #0
    4abc:	movt	r0, #0
    4ac0:	ldr	r1, [fp, #-8]
    4ac4:	ldr	r2, [fp, #-12]
    4ac8:	ldr	r3, [fp, #-16]
    4acc:	ldr	ip, [fp, #-20]	; 0xffffffec
    4ad0:	str	r0, [sp, #16]
    4ad4:	mov	r0, r1
    4ad8:	ldr	r1, [sp, #16]
    4adc:	str	ip, [sp]
    4ae0:	movw	ip, #8
    4ae4:	str	ip, [sp, #4]
    4ae8:	bl	3c5c <read_partial_array>
    4aec:	str	r0, [fp, #-4]
    4af0:	b	4b68 <coda_mem_cursor_read_double_partial_array+0x180>
    4af4:	ldr	r0, [sp, #24]
    4af8:	ldr	r0, [r0, #4]
    4afc:	ldr	r0, [r0, #40]	; 0x28
    4b00:	ldr	r0, [r0]
    4b04:	cmp	r0, #0
    4b08:	bne	4b10 <coda_mem_cursor_read_double_partial_array+0x128>
    4b0c:	b	4b30 <coda_mem_cursor_read_double_partial_array+0x148>
    4b10:	movw	r0, #0
    4b14:	movt	r0, #0
    4b18:	movw	r1, #0
    4b1c:	movt	r1, #0
    4b20:	movw	r2, #1177	; 0x499
    4b24:	movw	r3, #0
    4b28:	movt	r3, #0
    4b2c:	bl	0 <__assert_fail>
    4b30:	movw	r0, #0
    4b34:	movt	r0, #0
    4b38:	ldr	r1, [fp, #-8]
    4b3c:	ldr	r2, [fp, #-12]
    4b40:	ldr	r3, [fp, #-16]
    4b44:	ldr	ip, [fp, #-20]	; 0xffffffec
    4b48:	str	r0, [sp, #12]
    4b4c:	mov	r0, r1
    4b50:	ldr	r1, [sp, #12]
    4b54:	str	ip, [sp]
    4b58:	movw	ip, #8
    4b5c:	str	ip, [sp, #4]
    4b60:	bl	3c5c <read_partial_array>
    4b64:	str	r0, [fp, #-4]
    4b68:	ldr	r0, [fp, #-4]
    4b6c:	mov	sp, fp
    4b70:	pop	{fp, pc}

00004b74 <coda_mem_cursor_read_char_partial_array>:
    4b74:	push	{fp, lr}
    4b78:	mov	fp, sp
    4b7c:	sub	sp, sp, #48	; 0x30
    4b80:	str	r0, [fp, #-8]
    4b84:	str	r1, [fp, #-12]
    4b88:	str	r2, [fp, #-16]
    4b8c:	str	r3, [fp, #-20]	; 0xffffffec
    4b90:	ldr	r0, [fp, #-8]
    4b94:	add	r1, r0, #8
    4b98:	ldr	r0, [r0, #4]
    4b9c:	sub	r0, r0, #1
    4ba0:	add	r0, r1, r0, lsl #4
    4ba4:	ldr	r0, [r0]
    4ba8:	str	r0, [sp, #24]
    4bac:	ldr	r0, [sp, #24]
    4bb0:	ldr	r0, [r0, #8]
    4bb4:	cmp	r0, #1
    4bb8:	bne	4bf8 <coda_mem_cursor_read_char_partial_array+0x84>
    4bbc:	ldr	r0, [fp, #-8]
    4bc0:	ldr	r2, [fp, #-12]
    4bc4:	ldr	r3, [fp, #-16]
    4bc8:	ldr	r1, [fp, #-20]	; 0xffffffec
    4bcc:	movw	ip, #0
    4bd0:	movt	ip, #0
    4bd4:	str	r1, [sp, #20]
    4bd8:	mov	r1, ip
    4bdc:	ldr	ip, [sp, #20]
    4be0:	str	ip, [sp]
    4be4:	movw	lr, #1
    4be8:	str	lr, [sp, #4]
    4bec:	bl	3c5c <read_partial_array>
    4bf0:	str	r0, [fp, #-4]
    4bf4:	b	4cf4 <coda_mem_cursor_read_char_partial_array+0x180>
    4bf8:	ldr	r0, [sp, #24]
    4bfc:	ldr	r0, [r0, #8]
    4c00:	cmp	r0, #2
    4c04:	bne	4c0c <coda_mem_cursor_read_char_partial_array+0x98>
    4c08:	b	4c2c <coda_mem_cursor_read_char_partial_array+0xb8>
    4c0c:	movw	r0, #0
    4c10:	movt	r0, #0
    4c14:	movw	r1, #0
    4c18:	movt	r1, #0
    4c1c:	movw	r2, #1191	; 0x4a7
    4c20:	movw	r3, #0
    4c24:	movt	r3, #0
    4c28:	bl	0 <__assert_fail>
    4c2c:	ldr	r0, [sp, #24]
    4c30:	ldr	r0, [r0, #4]
    4c34:	ldr	r0, [r0, #40]	; 0x28
    4c38:	ldr	r0, [r0]
    4c3c:	cmp	r0, #1
    4c40:	bne	4c80 <coda_mem_cursor_read_char_partial_array+0x10c>
    4c44:	ldr	r0, [fp, #-8]
    4c48:	ldr	r2, [fp, #-12]
    4c4c:	ldr	r3, [fp, #-16]
    4c50:	ldr	r1, [fp, #-20]	; 0xffffffec
    4c54:	movw	ip, #0
    4c58:	movt	ip, #0
    4c5c:	str	r1, [sp, #16]
    4c60:	mov	r1, ip
    4c64:	ldr	ip, [sp, #16]
    4c68:	str	ip, [sp]
    4c6c:	movw	lr, #1
    4c70:	str	lr, [sp, #4]
    4c74:	bl	3c5c <read_partial_array>
    4c78:	str	r0, [fp, #-4]
    4c7c:	b	4cf4 <coda_mem_cursor_read_char_partial_array+0x180>
    4c80:	ldr	r0, [sp, #24]
    4c84:	ldr	r0, [r0, #4]
    4c88:	ldr	r0, [r0, #40]	; 0x28
    4c8c:	ldr	r0, [r0]
    4c90:	cmp	r0, #0
    4c94:	bne	4c9c <coda_mem_cursor_read_char_partial_array+0x128>
    4c98:	b	4cbc <coda_mem_cursor_read_char_partial_array+0x148>
    4c9c:	movw	r0, #0
    4ca0:	movt	r0, #0
    4ca4:	movw	r1, #0
    4ca8:	movt	r1, #0
    4cac:	movw	r2, #1197	; 0x4ad
    4cb0:	movw	r3, #0
    4cb4:	movt	r3, #0
    4cb8:	bl	0 <__assert_fail>
    4cbc:	ldr	r0, [fp, #-8]
    4cc0:	ldr	r2, [fp, #-12]
    4cc4:	ldr	r3, [fp, #-16]
    4cc8:	ldr	r1, [fp, #-20]	; 0xffffffec
    4ccc:	movw	ip, #0
    4cd0:	movt	ip, #0
    4cd4:	str	r1, [sp, #12]
    4cd8:	mov	r1, ip
    4cdc:	ldr	ip, [sp, #12]
    4ce0:	str	ip, [sp]
    4ce4:	movw	lr, #1
    4ce8:	str	lr, [sp, #4]
    4cec:	bl	3c5c <read_partial_array>
    4cf0:	str	r0, [fp, #-4]
    4cf4:	ldr	r0, [fp, #-4]
    4cf8:	mov	sp, fp
    4cfc:	pop	{fp, pc}
