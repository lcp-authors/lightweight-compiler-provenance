
../compcert-repos/stcorp-coda-3a25f25/CMakeFiles/coda_static.dir/libcoda/coda-cdf-cursor.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <coda_cdf_cursor_set_product>:
       0:	sub	sp, sp, #8
       4:	str	r0, [sp, #4]
       8:	str	r1, [sp]
       c:	ldr	r0, [sp]
      10:	ldr	r1, [sp, #4]
      14:	str	r0, [r1]
      18:	ldr	r0, [sp, #4]
      1c:	mov	r1, #1
      20:	str	r1, [r0, #4]
      24:	ldr	r0, [sp]
      28:	ldr	r0, [r0, #20]
      2c:	ldr	r1, [sp, #4]
      30:	str	r0, [r1, #8]
      34:	ldr	r0, [sp, #4]
      38:	mvn	r1, #0
      3c:	str	r1, [r0, #12]
      40:	ldr	r0, [sp, #4]
      44:	str	r1, [r0, #20]
      48:	str	r1, [r0, #16]
      4c:	movw	r0, #0
      50:	add	sp, sp, #8
      54:	bx	lr

00000058 <coda_cdf_cursor_goto_array_element>:
      58:	push	{fp, lr}
      5c:	mov	fp, sp
      60:	sub	sp, sp, #64	; 0x40
      64:	add	r3, sp, #4
      68:	str	r0, [fp, #-8]
      6c:	str	r1, [fp, #-12]
      70:	str	r2, [fp, #-16]
      74:	ldr	r0, [fp, #-8]
      78:	add	r1, r0, #8
      7c:	ldr	r0, [r0, #4]
      80:	sub	r0, r0, #1
      84:	add	r0, r1, r0, lsl #4
      88:	ldr	r0, [r0]
      8c:	ldr	r0, [r0, #4]
      90:	sub	r1, fp, #28
      94:	mov	r2, r3
      98:	bl	0 <coda_type_get_array_dim>
      9c:	cmp	r0, #0
      a0:	beq	b0 <coda_cdf_cursor_goto_array_element+0x58>
      a4:	mvn	r0, #0
      a8:	str	r0, [fp, #-4]
      ac:	b	22c <coda_cdf_cursor_goto_array_element+0x1d4>
      b0:	ldr	r0, [fp, #-12]
      b4:	ldr	r1, [fp, #-28]	; 0xffffffe4
      b8:	cmp	r0, r1
      bc:	beq	e4 <coda_cdf_cursor_goto_array_element+0x8c>
      c0:	ldr	r2, [fp, #-12]
      c4:	ldr	r3, [fp, #-28]	; 0xffffffe4
      c8:	mvn	r0, #105	; 0x69
      cc:	movw	r1, #0
      d0:	movt	r1, #0
      d4:	bl	0 <coda_set_error>
      d8:	mvn	r0, #0
      dc:	str	r0, [fp, #-4]
      e0:	b	22c <coda_cdf_cursor_goto_array_element+0x1d4>
      e4:	movw	r0, #0
      e8:	str	r0, [fp, #-24]	; 0xffffffe8
      ec:	str	r0, [sp]
      f0:	ldr	r0, [sp]
      f4:	ldr	r1, [fp, #-28]	; 0xffffffe4
      f8:	cmp	r0, r1
      fc:	bge	1c0 <coda_cdf_cursor_goto_array_element+0x168>
     100:	ldr	r0, [fp, #-16]
     104:	ldr	r1, [sp]
     108:	add	r0, r0, r1, lsl #2
     10c:	ldr	r0, [r0]
     110:	cmp	r0, #0
     114:	blt	138 <coda_cdf_cursor_goto_array_element+0xe0>
     118:	ldr	r0, [fp, #-16]
     11c:	ldr	r1, [sp]
     120:	ldr	r0, [r0, r1, lsl #2]
     124:	add	r2, sp, #4
     128:	add	r1, r2, r1, lsl #2
     12c:	ldr	r1, [r1]
     130:	cmp	r0, r1
     134:	blt	16c <coda_cdf_cursor_goto_array_element+0x114>
     138:	ldr	r0, [fp, #-16]
     13c:	ldr	r1, [sp]
     140:	ldr	r2, [r0, r1, lsl #2]
     144:	add	r0, sp, #4
     148:	add	r0, r0, r1, lsl #2
     14c:	ldr	r3, [r0]
     150:	mvn	r0, #106	; 0x6a
     154:	movw	r1, #0
     158:	movt	r1, #0
     15c:	bl	0 <coda_set_error>
     160:	mvn	r0, #0
     164:	str	r0, [fp, #-4]
     168:	b	22c <coda_cdf_cursor_goto_array_element+0x1d4>
     16c:	ldr	r0, [sp]
     170:	cmp	r0, #0
     174:	ble	194 <coda_cdf_cursor_goto_array_element+0x13c>
     178:	ldr	r0, [sp]
     17c:	add	r1, sp, #4
     180:	add	r0, r1, r0, lsl #2
     184:	ldr	r0, [r0]
     188:	ldr	r1, [fp, #-24]	; 0xffffffe8
     18c:	mul	r0, r1, r0
     190:	str	r0, [fp, #-24]	; 0xffffffe8
     194:	ldr	r0, [fp, #-16]
     198:	ldr	r1, [sp]
     19c:	add	r0, r0, r1, lsl #2
     1a0:	ldr	r0, [r0]
     1a4:	ldr	r1, [fp, #-24]	; 0xffffffe8
     1a8:	add	r0, r1, r0
     1ac:	str	r0, [fp, #-24]	; 0xffffffe8
     1b0:	ldr	r0, [sp]
     1b4:	add	r0, r0, #1
     1b8:	str	r0, [sp]
     1bc:	b	f0 <coda_cdf_cursor_goto_array_element+0x98>
     1c0:	ldr	r0, [fp, #-8]
     1c4:	ldr	r1, [r0, #4]
     1c8:	add	r0, r0, r1, lsl #4
     1cc:	ldr	r0, [r0, #-8]
     1d0:	ldr	r0, [r0, #16]
     1d4:	str	r0, [fp, #-20]	; 0xffffffec
     1d8:	ldr	r0, [fp, #-8]
     1dc:	ldr	r1, [r0, #4]
     1e0:	add	r1, r1, #1
     1e4:	str	r1, [r0, #4]
     1e8:	ldr	r0, [fp, #-20]	; 0xffffffec
     1ec:	ldr	r1, [fp, #-8]
     1f0:	ldr	r2, [r1, #4]
     1f4:	add	r1, r1, r2, lsl #4
     1f8:	str	r0, [r1, #-8]
     1fc:	ldr	r0, [fp, #-24]	; 0xffffffe8
     200:	ldr	r1, [fp, #-8]
     204:	ldr	r2, [r1, #4]
     208:	add	r1, r1, r2, lsl #4
     20c:	str	r0, [r1, #-4]
     210:	ldr	r0, [fp, #-8]
     214:	ldr	r1, [r0, #4]
     218:	mvn	r2, #0
     21c:	str	r2, [r0, r1, lsl #4]!
     220:	str	r2, [r0, #4]
     224:	movw	r0, #0
     228:	str	r0, [fp, #-4]
     22c:	ldr	r0, [fp, #-4]
     230:	mov	sp, fp
     234:	pop	{fp, pc}

00000238 <coda_cdf_cursor_goto_array_element_by_index>:
     238:	push	{fp, lr}
     23c:	mov	fp, sp
     240:	sub	sp, sp, #24
     244:	str	r0, [fp, #-8]
     248:	str	r1, [sp, #12]
     24c:	ldr	r0, [pc, #248]	; 34c <coda_cdf_cursor_goto_array_element_by_index+0x114>
     250:	ldr	r0, [pc, r0]
     254:	str	r0, [sp]
     258:	bl	0 <__aeabi_read_tp>
     25c:	ldr	r1, [sp]
     260:	ldr	r0, [r0, r1]
     264:	cmp	r0, #0
     268:	beq	2d4 <coda_cdf_cursor_goto_array_element_by_index+0x9c>
     26c:	ldr	r0, [fp, #-8]
     270:	add	r1, r0, #8
     274:	ldr	r0, [r0, #4]
     278:	sub	r0, r0, #1
     27c:	add	r0, r1, r0, lsl #4
     280:	ldr	r0, [r0]
     284:	ldr	r0, [r0, #4]
     288:	ldr	r0, [r0, #44]	; 0x2c
     28c:	str	r0, [sp, #4]
     290:	ldr	r0, [sp, #12]
     294:	cmp	r0, #0
     298:	blt	2ac <coda_cdf_cursor_goto_array_element_by_index+0x74>
     29c:	ldr	r0, [sp, #12]
     2a0:	ldr	r1, [sp, #4]
     2a4:	cmp	r0, r1
     2a8:	blt	2d0 <coda_cdf_cursor_goto_array_element_by_index+0x98>
     2ac:	ldr	r2, [sp, #12]
     2b0:	ldr	r3, [sp, #4]
     2b4:	mvn	r0, #106	; 0x6a
     2b8:	movw	r1, #0
     2bc:	movt	r1, #0
     2c0:	bl	0 <coda_set_error>
     2c4:	mvn	r0, #0
     2c8:	str	r0, [fp, #-4]
     2cc:	b	340 <coda_cdf_cursor_goto_array_element_by_index+0x108>
     2d0:	b	2d4 <coda_cdf_cursor_goto_array_element_by_index+0x9c>
     2d4:	ldr	r0, [fp, #-8]
     2d8:	ldr	r1, [r0, #4]
     2dc:	add	r0, r0, r1, lsl #4
     2e0:	ldr	r0, [r0, #-8]
     2e4:	ldr	r0, [r0, #16]
     2e8:	str	r0, [sp, #8]
     2ec:	ldr	r0, [fp, #-8]
     2f0:	ldr	r1, [r0, #4]
     2f4:	add	r1, r1, #1
     2f8:	str	r1, [r0, #4]
     2fc:	ldr	r0, [sp, #8]
     300:	ldr	r1, [fp, #-8]
     304:	ldr	r2, [r1, #4]
     308:	add	r1, r1, r2, lsl #4
     30c:	str	r0, [r1, #-8]
     310:	ldr	r0, [sp, #12]
     314:	ldr	r1, [fp, #-8]
     318:	ldr	r2, [r1, #4]
     31c:	add	r1, r1, r2, lsl #4
     320:	str	r0, [r1, #-4]
     324:	ldr	r0, [fp, #-8]
     328:	ldr	r1, [r0, #4]
     32c:	mvn	r2, #0
     330:	str	r2, [r0, r1, lsl #4]!
     334:	str	r2, [r0, #4]
     338:	movw	r0, #0
     33c:	str	r0, [fp, #-4]
     340:	ldr	r0, [fp, #-4]
     344:	mov	sp, fp
     348:	pop	{fp, pc}
     34c:	.word	0x000000f4

00000350 <coda_cdf_cursor_goto_next_array_element>:
     350:	push	{fp, lr}
     354:	mov	fp, sp
     358:	sub	sp, sp, #24
     35c:	str	r0, [fp, #-8]
     360:	ldr	r0, [pc, #204]	; 434 <coda_cdf_cursor_goto_next_array_element+0xe4>
     364:	ldr	r0, [pc, r0]
     368:	str	r0, [sp, #4]
     36c:	bl	0 <__aeabi_read_tp>
     370:	ldr	r1, [sp, #4]
     374:	ldr	r0, [r0, r1]
     378:	cmp	r0, #0
     37c:	beq	400 <coda_cdf_cursor_goto_next_array_element+0xb0>
     380:	ldr	r0, [fp, #-8]
     384:	ldr	r1, [r0, #4]
     388:	add	r0, r0, r1, lsl #4
     38c:	ldr	r0, [r0, #-4]
     390:	add	r0, r0, #1
     394:	str	r0, [sp, #8]
     398:	ldr	r0, [fp, #-8]
     39c:	add	r1, r0, #8
     3a0:	ldr	r0, [r0, #4]
     3a4:	sub	r0, r0, #2
     3a8:	add	r0, r1, r0, lsl #4
     3ac:	ldr	r0, [r0]
     3b0:	ldr	r0, [r0, #4]
     3b4:	ldr	r0, [r0, #44]	; 0x2c
     3b8:	str	r0, [sp, #12]
     3bc:	ldr	r0, [sp, #8]
     3c0:	cmp	r0, #0
     3c4:	blt	3d8 <coda_cdf_cursor_goto_next_array_element+0x88>
     3c8:	ldr	r0, [sp, #8]
     3cc:	ldr	r1, [sp, #12]
     3d0:	cmp	r0, r1
     3d4:	blt	3fc <coda_cdf_cursor_goto_next_array_element+0xac>
     3d8:	ldr	r2, [sp, #8]
     3dc:	ldr	r3, [sp, #12]
     3e0:	mvn	r0, #106	; 0x6a
     3e4:	movw	r1, #0
     3e8:	movt	r1, #0
     3ec:	bl	0 <coda_set_error>
     3f0:	mvn	r0, #0
     3f4:	str	r0, [fp, #-4]
     3f8:	b	428 <coda_cdf_cursor_goto_next_array_element+0xd8>
     3fc:	b	400 <coda_cdf_cursor_goto_next_array_element+0xb0>
     400:	ldr	r0, [fp, #-8]
     404:	add	r1, r0, #8
     408:	ldr	r0, [r0, #4]
     40c:	sub	r0, r0, #1
     410:	add	r0, r1, r0, lsl #4
     414:	ldr	r1, [r0, #4]
     418:	add	r1, r1, #1
     41c:	str	r1, [r0, #4]
     420:	movw	r0, #0
     424:	str	r0, [fp, #-4]
     428:	ldr	r0, [fp, #-4]
     42c:	mov	sp, fp
     430:	pop	{fp, pc}
     434:	.word	0x000000c8

00000438 <coda_cdf_cursor_goto_attributes>:
     438:	push	{fp, lr}
     43c:	mov	fp, sp
     440:	sub	sp, sp, #8
     444:	str	r0, [sp, #4]
     448:	ldr	r0, [sp, #4]
     44c:	add	r1, r0, #8
     450:	ldr	r0, [r0, #4]
     454:	sub	r0, r0, #1
     458:	add	r0, r1, r0, lsl #4
     45c:	ldr	r0, [r0]
     460:	str	r0, [sp]
     464:	ldr	r0, [sp, #4]
     468:	ldr	r1, [r0, #4]
     46c:	add	r1, r1, #1
     470:	str	r1, [r0, #4]
     474:	ldr	r0, [sp]
     478:	ldr	r0, [r0, #8]
     47c:	cmp	r0, #2
     480:	bne	4bc <coda_cdf_cursor_goto_attributes+0x84>
     484:	ldr	r0, [sp]
     488:	ldr	r0, [r0, #12]
     48c:	movw	r1, #0
     490:	cmp	r0, r1
     494:	beq	4bc <coda_cdf_cursor_goto_attributes+0x84>
     498:	ldr	r0, [sp]
     49c:	ldr	r0, [r0, #12]
     4a0:	ldr	r1, [sp, #4]
     4a4:	add	r2, r1, #8
     4a8:	ldr	r1, [r1, #4]
     4ac:	sub	r1, r1, #1
     4b0:	add	r1, r2, r1, lsl #4
     4b4:	str	r0, [r1]
     4b8:	b	4dc <coda_cdf_cursor_goto_attributes+0xa4>
     4bc:	mov	r0, #5
     4c0:	bl	0 <coda_mem_empty_record>
     4c4:	ldr	r1, [sp, #4]
     4c8:	add	r2, r1, #8
     4cc:	ldr	r1, [r1, #4]
     4d0:	sub	r1, r1, #1
     4d4:	add	r1, r2, r1, lsl #4
     4d8:	str	r0, [r1]
     4dc:	ldr	r0, [sp, #4]
     4e0:	ldr	r1, [r0, #4]
     4e4:	add	r0, r0, r1, lsl #4
     4e8:	mvn	r1, #0
     4ec:	str	r1, [r0, #-4]
     4f0:	ldr	r0, [sp, #4]
     4f4:	ldr	r2, [r0, #4]
     4f8:	str	r1, [r0, r2, lsl #4]!
     4fc:	str	r1, [r0, #4]
     500:	movw	r0, #0
     504:	mov	sp, fp
     508:	pop	{fp, pc}

0000050c <coda_cdf_cursor_use_base_type_of_special_type>:
     50c:	sub	sp, sp, #4
     510:	str	r0, [sp]
     514:	ldr	r0, [sp]
     518:	add	r1, r0, #8
     51c:	ldr	r0, [r0, #4]
     520:	sub	r0, r0, #1
     524:	ldr	r0, [r1, r0, lsl #4]!
     528:	ldr	r0, [r0, #12]
     52c:	str	r0, [r1]
     530:	movw	r0, #0
     534:	add	sp, sp, #4
     538:	bx	lr

0000053c <coda_cdf_cursor_get_num_elements>:
     53c:	sub	sp, sp, #8
     540:	str	r0, [sp, #4]
     544:	str	r1, [sp]
     548:	ldr	r0, [sp, #4]
     54c:	add	r1, r0, #8
     550:	ldr	r0, [r0, #4]
     554:	sub	r0, r0, #1
     558:	add	r0, r1, r0, lsl #4
     55c:	ldr	r0, [r0]
     560:	ldr	r0, [r0, #4]
     564:	ldr	r0, [r0, #8]
     568:	cmp	r0, #1
     56c:	bne	59c <coda_cdf_cursor_get_num_elements+0x60>
     570:	ldr	r0, [sp, #4]
     574:	add	r1, r0, #8
     578:	ldr	r0, [r0, #4]
     57c:	sub	r0, r0, #1
     580:	add	r0, r1, r0, lsl #4
     584:	ldr	r0, [r0]
     588:	ldr	r0, [r0, #4]
     58c:	ldr	r0, [r0, #44]	; 0x2c
     590:	ldr	r1, [sp]
     594:	str	r0, [r1]
     598:	b	5a8 <coda_cdf_cursor_get_num_elements+0x6c>
     59c:	ldr	r0, [sp]
     5a0:	movw	r1, #1
     5a4:	str	r1, [r0]
     5a8:	movw	r0, #0
     5ac:	add	sp, sp, #8
     5b0:	bx	lr

000005b4 <coda_cdf_cursor_get_string_length>:
     5b4:	push	{fp, lr}
     5b8:	mov	fp, sp
     5bc:	sub	sp, sp, #8
     5c0:	str	r0, [sp, #4]
     5c4:	str	r1, [sp]
     5c8:	ldr	r0, [sp, #4]
     5cc:	add	r1, r0, #8
     5d0:	ldr	r0, [r0, #4]
     5d4:	sub	r0, r0, #1
     5d8:	add	r0, r1, r0, lsl #4
     5dc:	ldr	r0, [r0]
     5e0:	ldr	r0, [r0, #4]
     5e4:	ldr	r1, [sp]
     5e8:	bl	0 <coda_type_get_string_length>
     5ec:	mov	sp, fp
     5f0:	pop	{fp, pc}

000005f4 <coda_cdf_cursor_get_array_dim>:
     5f4:	push	{fp, lr}
     5f8:	mov	fp, sp
     5fc:	sub	sp, sp, #16
     600:	str	r0, [fp, #-4]
     604:	str	r1, [sp, #8]
     608:	str	r2, [sp, #4]
     60c:	ldr	r0, [fp, #-4]
     610:	add	r1, r0, #8
     614:	ldr	r0, [r0, #4]
     618:	sub	r0, r0, #1
     61c:	add	r0, r1, r0, lsl #4
     620:	ldr	r0, [r0]
     624:	ldr	r0, [r0, #4]
     628:	ldr	r1, [sp, #8]
     62c:	ldr	r2, [sp, #4]
     630:	bl	0 <coda_type_get_array_dim>
     634:	mov	sp, fp
     638:	pop	{fp, pc}

0000063c <coda_cdf_cursor_read_int8>:
     63c:	push	{fp, lr}
     640:	mov	fp, sp
     644:	sub	sp, sp, #8
     648:	str	r0, [sp, #4]
     64c:	str	r1, [sp]
     650:	ldr	r0, [sp, #4]
     654:	ldr	r1, [sp]
     658:	mvn	r2, #0
     65c:	bl	668 <read_basic_type>
     660:	mov	sp, fp
     664:	pop	{fp, pc}

00000668 <read_basic_type>:
     668:	push	{r4, sl, fp, lr}
     66c:	add	fp, sp, #8
     670:	sub	sp, sp, #72	; 0x48
     674:	str	r0, [fp, #-16]
     678:	str	r1, [fp, #-20]	; 0xffffffec
     67c:	str	r2, [fp, #-24]	; 0xffffffe8
     680:	ldr	r0, [fp, #-16]
     684:	ldr	r1, [r0, #4]
     688:	add	r0, r0, r1, lsl #4
     68c:	ldr	r0, [r0, #-8]
     690:	str	r0, [fp, #-28]	; 0xffffffe4
     694:	mov	r0, #0
     698:	str	r0, [fp, #-36]	; 0xffffffdc
     69c:	ldr	r0, [fp, #-16]
     6a0:	add	r1, r0, #8
     6a4:	ldr	r0, [r0, #4]
     6a8:	sub	r0, r0, #1
     6ac:	add	r0, r1, r0, lsl #4
     6b0:	ldr	r0, [r0]
     6b4:	ldr	r0, [r0, #8]
     6b8:	cmp	r0, #0
     6bc:	bne	6f0 <read_basic_type+0x88>
     6c0:	ldr	r0, [fp, #-16]
     6c4:	ldr	r1, [r0, #4]
     6c8:	add	r0, r0, r1, lsl #4
     6cc:	ldr	r0, [r0, #-24]	; 0xffffffe8
     6d0:	str	r0, [fp, #-28]	; 0xffffffe4
     6d4:	ldr	r0, [fp, #-16]
     6d8:	add	r1, r0, #8
     6dc:	ldr	r0, [r0, #4]
     6e0:	sub	r0, r0, #1
     6e4:	add	r0, r1, r0, lsl #4
     6e8:	ldr	r0, [r0, #4]
     6ec:	str	r0, [fp, #-36]	; 0xffffffdc
     6f0:	ldr	r0, [fp, #-28]	; 0xffffffe4
     6f4:	ldr	r0, [r0, #8]
     6f8:	cmp	r0, #2
     6fc:	bne	704 <read_basic_type+0x9c>
     700:	b	724 <read_basic_type+0xbc>
     704:	movw	r0, #0
     708:	movt	r0, #0
     70c:	movw	r1, #0
     710:	movt	r1, #0
     714:	movw	r2, #403	; 0x193
     718:	movw	r3, #0
     71c:	movt	r3, #0
     720:	bl	0 <__assert_fail>
     724:	ldr	r0, [fp, #-28]	; 0xffffffe4
     728:	ldr	r0, [r0, #16]
     72c:	movw	r1, #0
     730:	cmp	r0, r1
     734:	bne	74c <read_basic_type+0xe4>
     738:	ldr	r0, [fp, #-28]	; 0xffffffe4
     73c:	ldr	r0, [r0, #4]
     740:	ldr	r0, [r0, #8]
     744:	str	r0, [fp, #-32]	; 0xffffffe0
     748:	b	760 <read_basic_type+0xf8>
     74c:	ldr	r0, [fp, #-28]	; 0xffffffe4
     750:	ldr	r0, [r0, #16]
     754:	ldr	r0, [r0, #4]
     758:	ldr	r0, [r0, #8]
     75c:	str	r0, [fp, #-32]	; 0xffffffe0
     760:	ldr	r0, [fp, #-36]	; 0xffffffdc
     764:	ldr	r1, [fp, #-28]	; 0xffffffe4
     768:	ldr	r1, [r1, #24]
     76c:	sdiv	r0, r0, r1
     770:	str	r0, [sp, #40]	; 0x28
     774:	ldr	r0, [fp, #-36]	; 0xffffffdc
     778:	ldr	r1, [sp, #40]	; 0x28
     77c:	ldr	r2, [fp, #-28]	; 0xffffffe4
     780:	ldr	r2, [r2, #24]
     784:	mls	r0, r1, r2, r0
     788:	str	r0, [sp, #36]	; 0x24
     78c:	ldr	r0, [fp, #-28]	; 0xffffffe4
     790:	ldr	r0, [r0, #28]
     794:	str	r0, [sp, #32]
     798:	ldr	r0, [fp, #-28]	; 0xffffffe4
     79c:	ldr	r0, [r0, #36]	; 0x24
     7a0:	ldr	r1, [sp, #40]	; 0x28
     7a4:	add	r0, r0, r1, lsl #3
     7a8:	ldr	r0, [r0, #4]
     7ac:	cmn	r0, #1
     7b0:	bgt	7d4 <read_basic_type+0x16c>
     7b4:	b	7b8 <read_basic_type+0x150>
     7b8:	mvn	r0, #199	; 0xc7
     7bc:	movw	r1, #0
     7c0:	movt	r1, #0
     7c4:	bl	0 <coda_set_error>
     7c8:	mvn	r0, #0
     7cc:	str	r0, [fp, #-12]
     7d0:	b	974 <read_basic_type+0x30c>
     7d4:	ldr	r0, [fp, #-28]	; 0xffffffe4
     7d8:	ldr	r1, [r0, #28]
     7dc:	ldr	r0, [r0, #36]	; 0x24
     7e0:	ldr	r2, [sp, #40]	; 0x28
     7e4:	ldr	r2, [r0, r2, lsl #3]!
     7e8:	ldr	r0, [r0, #4]
     7ec:	ldr	r3, [sp, #36]	; 0x24
     7f0:	mul	r1, r3, r1
     7f4:	adds	r2, r2, r1
     7f8:	adc	r0, r0, r1, asr #31
     7fc:	str	r2, [sp, #24]
     800:	str	r0, [sp, #28]
     804:	ldr	r0, [fp, #-24]	; 0xffffffe8
     808:	cmp	r0, #0
     80c:	blt	828 <read_basic_type+0x1c0>
     810:	ldr	r0, [fp, #-24]	; 0xffffffe8
     814:	ldr	r1, [sp, #32]
     818:	cmp	r0, r1
     81c:	bge	828 <read_basic_type+0x1c0>
     820:	ldr	r0, [fp, #-24]	; 0xffffffe8
     824:	str	r0, [sp, #32]
     828:	ldr	r0, [fp, #-28]	; 0xffffffe4
     82c:	ldr	r0, [r0, #40]	; 0x28
     830:	movw	r1, #0
     834:	cmp	r0, r1
     838:	beq	85c <read_basic_type+0x1f4>
     83c:	ldr	r0, [fp, #-20]	; 0xffffffec
     840:	ldr	r1, [fp, #-28]	; 0xffffffe4
     844:	ldr	r1, [r1, #40]	; 0x28
     848:	ldr	r2, [sp, #24]
     84c:	add	r1, r1, r2
     850:	ldr	r2, [sp, #32]
     854:	bl	0 <memcpy>
     858:	b	8a8 <read_basic_type+0x240>
     85c:	ldr	r0, [fp, #-16]
     860:	ldr	r0, [r0]
     864:	ldr	r0, [r0, #52]	; 0x34
     868:	ldr	r2, [sp, #24]
     86c:	ldr	r3, [sp, #28]
     870:	ldr	r1, [sp, #32]
     874:	asr	ip, r1, #31
     878:	ldr	lr, [fp, #-20]	; 0xffffffec
     87c:	mov	r4, sp
     880:	str	lr, [r4, #8]
     884:	str	ip, [r4, #4]
     888:	str	r1, [r4]
     88c:	bl	1718 <read_bytes>
     890:	cmp	r0, #0
     894:	beq	8a4 <read_basic_type+0x23c>
     898:	mvn	r0, #0
     89c:	str	r0, [fp, #-12]
     8a0:	b	974 <read_basic_type+0x30c>
     8a4:	b	8a8 <read_basic_type+0x240>
     8a8:	ldr	r0, [fp, #-32]	; 0xffffffe0
     8ac:	cmp	r0, #4
     8b0:	beq	96c <read_basic_type+0x304>
     8b4:	movw	r0, #0
     8b8:	str	r0, [sp, #20]
     8bc:	ldr	r0, [fp, #-16]
     8c0:	ldr	r0, [r0]
     8c4:	ldr	r0, [r0, #68]	; 0x44
     8c8:	ldr	r1, [sp, #20]
     8cc:	cmp	r0, r1
     8d0:	bne	968 <read_basic_type+0x300>
     8d4:	ldr	r0, [fp, #-28]	; 0xffffffe4
     8d8:	ldr	r0, [r0, #28]
     8dc:	sub	r0, r0, #1
     8e0:	cmp	r0, #7
     8e4:	str	r0, [sp, #16]
     8e8:	bhi	944 <read_basic_type+0x2dc>
     8ec:	add	r0, pc, #8
     8f0:	ldr	r1, [sp, #16]
     8f4:	ldr	r0, [r0, r1, lsl #2]
     8f8:	mov	pc, r0
     8fc:	.word	0x0000091c
     900:	.word	0x00000920
     904:	.word	0x00000944
     908:	.word	0x0000092c
     90c:	.word	0x00000944
     910:	.word	0x00000944
     914:	.word	0x00000944
     918:	.word	0x00000938
     91c:	b	964 <read_basic_type+0x2fc>
     920:	ldr	r0, [fp, #-20]	; 0xffffffec
     924:	bl	196c <swap2>
     928:	b	964 <read_basic_type+0x2fc>
     92c:	ldr	r0, [fp, #-20]	; 0xffffffec
     930:	bl	19d8 <swap4>
     934:	b	964 <read_basic_type+0x2fc>
     938:	ldr	r0, [fp, #-20]	; 0xffffffec
     93c:	bl	1a98 <swap8>
     940:	b	964 <read_basic_type+0x2fc>
     944:	movw	r0, #0
     948:	movt	r0, #0
     94c:	movw	r1, #0
     950:	movt	r1, #0
     954:	movw	r2, #462	; 0x1ce
     958:	movw	r3, #0
     95c:	movt	r3, #0
     960:	bl	0 <__assert_fail>
     964:	b	968 <read_basic_type+0x300>
     968:	b	96c <read_basic_type+0x304>
     96c:	movw	r0, #0
     970:	str	r0, [fp, #-12]
     974:	ldr	r0, [fp, #-12]
     978:	sub	sp, fp, #8
     97c:	pop	{r4, sl, fp, pc}

00000980 <coda_cdf_cursor_read_uint8>:
     980:	push	{fp, lr}
     984:	mov	fp, sp
     988:	sub	sp, sp, #8
     98c:	str	r0, [sp, #4]
     990:	str	r1, [sp]
     994:	ldr	r0, [sp, #4]
     998:	ldr	r1, [sp]
     99c:	mvn	r2, #0
     9a0:	bl	668 <read_basic_type>
     9a4:	mov	sp, fp
     9a8:	pop	{fp, pc}

000009ac <coda_cdf_cursor_read_int16>:
     9ac:	push	{fp, lr}
     9b0:	mov	fp, sp
     9b4:	sub	sp, sp, #8
     9b8:	str	r0, [sp, #4]
     9bc:	str	r1, [sp]
     9c0:	ldr	r0, [sp, #4]
     9c4:	ldr	r1, [sp]
     9c8:	mvn	r2, #0
     9cc:	bl	668 <read_basic_type>
     9d0:	mov	sp, fp
     9d4:	pop	{fp, pc}

000009d8 <coda_cdf_cursor_read_uint16>:
     9d8:	push	{fp, lr}
     9dc:	mov	fp, sp
     9e0:	sub	sp, sp, #8
     9e4:	str	r0, [sp, #4]
     9e8:	str	r1, [sp]
     9ec:	ldr	r0, [sp, #4]
     9f0:	ldr	r1, [sp]
     9f4:	mvn	r2, #0
     9f8:	bl	668 <read_basic_type>
     9fc:	mov	sp, fp
     a00:	pop	{fp, pc}

00000a04 <coda_cdf_cursor_read_int32>:
     a04:	push	{fp, lr}
     a08:	mov	fp, sp
     a0c:	sub	sp, sp, #8
     a10:	str	r0, [sp, #4]
     a14:	str	r1, [sp]
     a18:	ldr	r0, [sp, #4]
     a1c:	ldr	r1, [sp]
     a20:	mvn	r2, #0
     a24:	bl	668 <read_basic_type>
     a28:	mov	sp, fp
     a2c:	pop	{fp, pc}

00000a30 <coda_cdf_cursor_read_uint32>:
     a30:	push	{fp, lr}
     a34:	mov	fp, sp
     a38:	sub	sp, sp, #8
     a3c:	str	r0, [sp, #4]
     a40:	str	r1, [sp]
     a44:	ldr	r0, [sp, #4]
     a48:	ldr	r1, [sp]
     a4c:	mvn	r2, #0
     a50:	bl	668 <read_basic_type>
     a54:	mov	sp, fp
     a58:	pop	{fp, pc}

00000a5c <coda_cdf_cursor_read_int64>:
     a5c:	push	{fp, lr}
     a60:	mov	fp, sp
     a64:	sub	sp, sp, #8
     a68:	str	r0, [sp, #4]
     a6c:	str	r1, [sp]
     a70:	ldr	r0, [sp, #4]
     a74:	ldr	r1, [sp]
     a78:	mvn	r2, #0
     a7c:	bl	668 <read_basic_type>
     a80:	mov	sp, fp
     a84:	pop	{fp, pc}

00000a88 <coda_cdf_cursor_read_float>:
     a88:	push	{fp, lr}
     a8c:	mov	fp, sp
     a90:	sub	sp, sp, #8
     a94:	str	r0, [sp, #4]
     a98:	str	r1, [sp]
     a9c:	ldr	r0, [sp, #4]
     aa0:	ldr	r1, [sp]
     aa4:	mvn	r2, #0
     aa8:	bl	668 <read_basic_type>
     aac:	mov	sp, fp
     ab0:	pop	{fp, pc}

00000ab4 <coda_cdf_cursor_read_double>:
     ab4:	push	{fp, lr}
     ab8:	mov	fp, sp
     abc:	sub	sp, sp, #8
     ac0:	str	r0, [sp, #4]
     ac4:	str	r1, [sp]
     ac8:	ldr	r0, [sp, #4]
     acc:	ldr	r1, [sp]
     ad0:	mvn	r2, #0
     ad4:	bl	668 <read_basic_type>
     ad8:	mov	sp, fp
     adc:	pop	{fp, pc}

00000ae0 <coda_cdf_cursor_read_char>:
     ae0:	push	{fp, lr}
     ae4:	mov	fp, sp
     ae8:	sub	sp, sp, #8
     aec:	str	r0, [sp, #4]
     af0:	str	r1, [sp]
     af4:	ldr	r0, [sp, #4]
     af8:	ldr	r1, [sp]
     afc:	mvn	r2, #0
     b00:	bl	668 <read_basic_type>
     b04:	mov	sp, fp
     b08:	pop	{fp, pc}

00000b0c <coda_cdf_cursor_read_string>:
     b0c:	push	{fp, lr}
     b10:	mov	fp, sp
     b14:	sub	sp, sp, #16
     b18:	str	r0, [sp, #8]
     b1c:	str	r1, [sp, #4]
     b20:	str	r2, [sp]
     b24:	ldr	r0, [sp, #8]
     b28:	ldr	r1, [sp, #4]
     b2c:	ldr	r2, [sp]
     b30:	bl	668 <read_basic_type>
     b34:	cmp	r0, #0
     b38:	beq	b48 <coda_cdf_cursor_read_string+0x3c>
     b3c:	mvn	r0, #0
     b40:	str	r0, [fp, #-4]
     b44:	b	b68 <coda_cdf_cursor_read_string+0x5c>
     b48:	ldr	r0, [sp, #4]
     b4c:	ldr	r1, [sp]
     b50:	sub	r1, r1, #1
     b54:	add	r0, r0, r1
     b58:	movw	r1, #0
     b5c:	strb	r1, [r0]
     b60:	movw	r0, #0
     b64:	str	r0, [fp, #-4]
     b68:	ldr	r0, [fp, #-4]
     b6c:	mov	sp, fp
     b70:	pop	{fp, pc}

00000b74 <coda_cdf_cursor_read_int8_array>:
     b74:	push	{fp, lr}
     b78:	mov	fp, sp
     b7c:	sub	sp, sp, #8
     b80:	str	r0, [sp, #4]
     b84:	str	r1, [sp]
     b88:	ldr	r0, [sp, #4]
     b8c:	ldr	r1, [sp]
     b90:	bl	b9c <read_array>
     b94:	mov	sp, fp
     b98:	pop	{fp, pc}

00000b9c <read_array>:
     b9c:	push	{r4, r5, fp, lr}
     ba0:	add	fp, sp, #8
     ba4:	sub	sp, sp, #48	; 0x30
     ba8:	str	r0, [fp, #-16]
     bac:	str	r1, [fp, #-20]	; 0xffffffec
     bb0:	ldr	r0, [fp, #-16]
     bb4:	add	r1, r0, #8
     bb8:	ldr	r0, [r0, #4]
     bbc:	sub	r0, r0, #1
     bc0:	add	r0, r1, r0, lsl #4
     bc4:	ldr	r0, [r0]
     bc8:	str	r0, [fp, #-24]	; 0xffffffe8
     bcc:	ldr	r0, [fp, #-24]	; 0xffffffe8
     bd0:	ldr	r0, [r0, #24]
     bd4:	ldr	r1, [fp, #-24]	; 0xffffffe8
     bd8:	ldr	r1, [r1, #28]
     bdc:	mul	r0, r0, r1
     be0:	str	r0, [sp, #24]
     be4:	ldr	r0, [fp, #-24]	; 0xffffffe8
     be8:	ldr	r0, [r0, #8]
     bec:	cmp	r0, #2
     bf0:	bne	bf8 <read_array+0x5c>
     bf4:	b	c18 <read_array+0x7c>
     bf8:	movw	r0, #0
     bfc:	movt	r0, #0
     c00:	movw	r1, #0
     c04:	movt	r1, #0
     c08:	movw	r2, #215	; 0xd7
     c0c:	movw	r3, #0
     c10:	movt	r3, #0
     c14:	bl	0 <__assert_fail>
     c18:	ldr	r0, [fp, #-24]	; 0xffffffe8
     c1c:	ldr	r0, [r0, #16]
     c20:	movw	r1, #0
     c24:	cmp	r0, r1
     c28:	bne	c40 <read_array+0xa4>
     c2c:	ldr	r0, [fp, #-24]	; 0xffffffe8
     c30:	ldr	r0, [r0, #4]
     c34:	ldr	r0, [r0, #8]
     c38:	str	r0, [sp, #28]
     c3c:	b	c54 <read_array+0xb8>
     c40:	ldr	r0, [fp, #-24]	; 0xffffffe8
     c44:	ldr	r0, [r0, #16]
     c48:	ldr	r0, [r0, #4]
     c4c:	ldr	r0, [r0, #8]
     c50:	str	r0, [sp, #28]
     c54:	movw	r0, #0
     c58:	str	r0, [sp, #20]
     c5c:	ldr	r0, [sp, #20]
     c60:	ldr	r1, [fp, #-24]	; 0xffffffe8
     c64:	ldr	r1, [r1, #20]
     c68:	cmp	r0, r1
     c6c:	bge	d6c <read_array+0x1d0>
     c70:	ldr	r0, [fp, #-24]	; 0xffffffe8
     c74:	ldr	r0, [r0, #36]	; 0x24
     c78:	ldr	r1, [sp, #20]
     c7c:	add	r0, r0, r1, lsl #3
     c80:	ldr	r0, [r0, #4]
     c84:	cmn	r0, #1
     c88:	bgt	cac <read_array+0x110>
     c8c:	b	c90 <read_array+0xf4>
     c90:	mvn	r0, #199	; 0xc7
     c94:	movw	r1, #0
     c98:	movt	r1, #0
     c9c:	bl	0 <coda_set_error>
     ca0:	mvn	r0, #0
     ca4:	str	r0, [fp, #-12]
     ca8:	b	ef8 <read_array+0x35c>
     cac:	ldr	r0, [fp, #-24]	; 0xffffffe8
     cb0:	ldr	r0, [r0, #40]	; 0x28
     cb4:	movw	r1, #0
     cb8:	cmp	r0, r1
     cbc:	beq	cf0 <read_array+0x154>
     cc0:	ldr	r0, [fp, #-20]	; 0xffffffec
     cc4:	ldr	r1, [sp, #20]
     cc8:	ldr	r2, [sp, #24]
     ccc:	mla	r0, r1, r2, r0
     cd0:	ldr	r2, [fp, #-24]	; 0xffffffe8
     cd4:	ldr	r3, [r2, #36]	; 0x24
     cd8:	ldr	r2, [r2, #40]	; 0x28
     cdc:	ldr	r1, [r3, r1, lsl #3]
     ce0:	add	r1, r2, r1
     ce4:	ldr	r2, [sp, #24]
     ce8:	bl	0 <memcpy>
     cec:	b	d58 <read_array+0x1bc>
     cf0:	ldr	r0, [fp, #-16]
     cf4:	ldr	r0, [r0]
     cf8:	ldr	r0, [r0, #52]	; 0x34
     cfc:	ldr	r1, [fp, #-24]	; 0xffffffe8
     d00:	ldr	r1, [r1, #36]	; 0x24
     d04:	ldr	r2, [sp, #20]
     d08:	ldr	r2, [r1, r2, lsl #3]!
     d0c:	ldr	r3, [r1, #4]
     d10:	ldr	r1, [sp, #24]
     d14:	asr	ip, r1, #31
     d18:	ldr	lr, [fp, #-20]	; 0xffffffec
     d1c:	ldr	r4, [sp, #20]
     d20:	ldr	r5, [sp, #24]
     d24:	mul	r4, r4, r5
     d28:	add	lr, lr, r4
     d2c:	mov	r4, sp
     d30:	str	lr, [r4, #8]
     d34:	str	ip, [r4, #4]
     d38:	str	r1, [r4]
     d3c:	bl	1718 <read_bytes>
     d40:	cmp	r0, #0
     d44:	beq	d54 <read_array+0x1b8>
     d48:	mvn	r0, #0
     d4c:	str	r0, [fp, #-12]
     d50:	b	ef8 <read_array+0x35c>
     d54:	b	d58 <read_array+0x1bc>
     d58:	b	d5c <read_array+0x1c0>
     d5c:	ldr	r0, [sp, #20]
     d60:	add	r0, r0, #1
     d64:	str	r0, [sp, #20]
     d68:	b	c5c <read_array+0xc0>
     d6c:	ldr	r0, [sp, #28]
     d70:	cmp	r0, #4
     d74:	beq	ef0 <read_array+0x354>
     d78:	movw	r0, #1
     d7c:	str	r0, [sp, #16]
     d80:	ldr	r0, [fp, #-16]
     d84:	ldr	r0, [r0]
     d88:	ldr	r0, [r0, #68]	; 0x44
     d8c:	ldr	r1, [sp, #16]
     d90:	cmp	r0, r1
     d94:	beq	eec <read_array+0x350>
     d98:	ldr	r0, [fp, #-24]	; 0xffffffe8
     d9c:	ldr	r0, [r0, #28]
     da0:	sub	r0, r0, #1
     da4:	cmp	r0, #7
     da8:	str	r0, [sp, #12]
     dac:	bhi	ec8 <read_array+0x32c>
     db0:	add	r0, pc, #8
     db4:	ldr	r1, [sp, #12]
     db8:	ldr	r0, [r0, r1, lsl #2]
     dbc:	mov	pc, r0
     dc0:	.word	0x00000de0
     dc4:	.word	0x00000de4
     dc8:	.word	0x00000ec8
     dcc:	.word	0x00000e30
     dd0:	.word	0x00000ec8
     dd4:	.word	0x00000ec8
     dd8:	.word	0x00000ec8
     ddc:	.word	0x00000e7c
     de0:	b	ee8 <read_array+0x34c>
     de4:	movw	r0, #0
     de8:	str	r0, [sp, #20]
     dec:	ldr	r0, [sp, #20]
     df0:	ldr	r1, [fp, #-24]	; 0xffffffe8
     df4:	ldr	r1, [r1, #20]
     df8:	ldr	r2, [fp, #-24]	; 0xffffffe8
     dfc:	ldr	r2, [r2, #24]
     e00:	mul	r1, r1, r2
     e04:	cmp	r0, r1
     e08:	bge	e2c <read_array+0x290>
     e0c:	ldr	r0, [fp, #-20]	; 0xffffffec
     e10:	ldr	r1, [sp, #20]
     e14:	add	r0, r0, r1, lsl #1
     e18:	bl	196c <swap2>
     e1c:	ldr	r0, [sp, #20]
     e20:	add	r0, r0, #1
     e24:	str	r0, [sp, #20]
     e28:	b	dec <read_array+0x250>
     e2c:	b	ee8 <read_array+0x34c>
     e30:	movw	r0, #0
     e34:	str	r0, [sp, #20]
     e38:	ldr	r0, [sp, #20]
     e3c:	ldr	r1, [fp, #-24]	; 0xffffffe8
     e40:	ldr	r1, [r1, #20]
     e44:	ldr	r2, [fp, #-24]	; 0xffffffe8
     e48:	ldr	r2, [r2, #24]
     e4c:	mul	r1, r1, r2
     e50:	cmp	r0, r1
     e54:	bge	e78 <read_array+0x2dc>
     e58:	ldr	r0, [fp, #-20]	; 0xffffffec
     e5c:	ldr	r1, [sp, #20]
     e60:	add	r0, r0, r1, lsl #2
     e64:	bl	19d8 <swap4>
     e68:	ldr	r0, [sp, #20]
     e6c:	add	r0, r0, #1
     e70:	str	r0, [sp, #20]
     e74:	b	e38 <read_array+0x29c>
     e78:	b	ee8 <read_array+0x34c>
     e7c:	movw	r0, #0
     e80:	str	r0, [sp, #20]
     e84:	ldr	r0, [sp, #20]
     e88:	ldr	r1, [fp, #-24]	; 0xffffffe8
     e8c:	ldr	r1, [r1, #20]
     e90:	ldr	r2, [fp, #-24]	; 0xffffffe8
     e94:	ldr	r2, [r2, #24]
     e98:	mul	r1, r1, r2
     e9c:	cmp	r0, r1
     ea0:	bge	ec4 <read_array+0x328>
     ea4:	ldr	r0, [fp, #-20]	; 0xffffffec
     ea8:	ldr	r1, [sp, #20]
     eac:	add	r0, r0, r1, lsl #3
     eb0:	bl	1a98 <swap8>
     eb4:	ldr	r0, [sp, #20]
     eb8:	add	r0, r0, #1
     ebc:	str	r0, [sp, #20]
     ec0:	b	e84 <read_array+0x2e8>
     ec4:	b	ee8 <read_array+0x34c>
     ec8:	movw	r0, #0
     ecc:	movt	r0, #0
     ed0:	movw	r1, #0
     ed4:	movt	r1, #0
     ed8:	movw	r2, #278	; 0x116
     edc:	movw	r3, #0
     ee0:	movt	r3, #0
     ee4:	bl	0 <__assert_fail>
     ee8:	b	eec <read_array+0x350>
     eec:	b	ef0 <read_array+0x354>
     ef0:	movw	r0, #0
     ef4:	str	r0, [fp, #-12]
     ef8:	ldr	r0, [fp, #-12]
     efc:	sub	sp, fp, #8
     f00:	pop	{r4, r5, fp, pc}

00000f04 <coda_cdf_cursor_read_uint8_array>:
     f04:	push	{fp, lr}
     f08:	mov	fp, sp
     f0c:	sub	sp, sp, #8
     f10:	str	r0, [sp, #4]
     f14:	str	r1, [sp]
     f18:	ldr	r0, [sp, #4]
     f1c:	ldr	r1, [sp]
     f20:	bl	b9c <read_array>
     f24:	mov	sp, fp
     f28:	pop	{fp, pc}

00000f2c <coda_cdf_cursor_read_int16_array>:
     f2c:	push	{fp, lr}
     f30:	mov	fp, sp
     f34:	sub	sp, sp, #8
     f38:	str	r0, [sp, #4]
     f3c:	str	r1, [sp]
     f40:	ldr	r0, [sp, #4]
     f44:	ldr	r1, [sp]
     f48:	bl	b9c <read_array>
     f4c:	mov	sp, fp
     f50:	pop	{fp, pc}

00000f54 <coda_cdf_cursor_read_uint16_array>:
     f54:	push	{fp, lr}
     f58:	mov	fp, sp
     f5c:	sub	sp, sp, #8
     f60:	str	r0, [sp, #4]
     f64:	str	r1, [sp]
     f68:	ldr	r0, [sp, #4]
     f6c:	ldr	r1, [sp]
     f70:	bl	b9c <read_array>
     f74:	mov	sp, fp
     f78:	pop	{fp, pc}

00000f7c <coda_cdf_cursor_read_int32_array>:
     f7c:	push	{fp, lr}
     f80:	mov	fp, sp
     f84:	sub	sp, sp, #8
     f88:	str	r0, [sp, #4]
     f8c:	str	r1, [sp]
     f90:	ldr	r0, [sp, #4]
     f94:	ldr	r1, [sp]
     f98:	bl	b9c <read_array>
     f9c:	mov	sp, fp
     fa0:	pop	{fp, pc}

00000fa4 <coda_cdf_cursor_read_uint32_array>:
     fa4:	push	{fp, lr}
     fa8:	mov	fp, sp
     fac:	sub	sp, sp, #8
     fb0:	str	r0, [sp, #4]
     fb4:	str	r1, [sp]
     fb8:	ldr	r0, [sp, #4]
     fbc:	ldr	r1, [sp]
     fc0:	bl	b9c <read_array>
     fc4:	mov	sp, fp
     fc8:	pop	{fp, pc}

00000fcc <coda_cdf_cursor_read_int64_array>:
     fcc:	push	{fp, lr}
     fd0:	mov	fp, sp
     fd4:	sub	sp, sp, #8
     fd8:	str	r0, [sp, #4]
     fdc:	str	r1, [sp]
     fe0:	ldr	r0, [sp, #4]
     fe4:	ldr	r1, [sp]
     fe8:	bl	b9c <read_array>
     fec:	mov	sp, fp
     ff0:	pop	{fp, pc}

00000ff4 <coda_cdf_cursor_read_float_array>:
     ff4:	push	{fp, lr}
     ff8:	mov	fp, sp
     ffc:	sub	sp, sp, #8
    1000:	str	r0, [sp, #4]
    1004:	str	r1, [sp]
    1008:	ldr	r0, [sp, #4]
    100c:	ldr	r1, [sp]
    1010:	bl	b9c <read_array>
    1014:	mov	sp, fp
    1018:	pop	{fp, pc}

0000101c <coda_cdf_cursor_read_double_array>:
    101c:	push	{fp, lr}
    1020:	mov	fp, sp
    1024:	sub	sp, sp, #8
    1028:	str	r0, [sp, #4]
    102c:	str	r1, [sp]
    1030:	ldr	r0, [sp, #4]
    1034:	ldr	r1, [sp]
    1038:	bl	b9c <read_array>
    103c:	mov	sp, fp
    1040:	pop	{fp, pc}

00001044 <coda_cdf_cursor_read_char_array>:
    1044:	push	{fp, lr}
    1048:	mov	fp, sp
    104c:	sub	sp, sp, #8
    1050:	str	r0, [sp, #4]
    1054:	str	r1, [sp]
    1058:	ldr	r0, [sp, #4]
    105c:	ldr	r1, [sp]
    1060:	bl	b9c <read_array>
    1064:	mov	sp, fp
    1068:	pop	{fp, pc}

0000106c <coda_cdf_cursor_read_int8_partial_array>:
    106c:	push	{fp, lr}
    1070:	mov	fp, sp
    1074:	sub	sp, sp, #16
    1078:	str	r0, [fp, #-4]
    107c:	str	r1, [sp, #8]
    1080:	str	r2, [sp, #4]
    1084:	str	r3, [sp]
    1088:	ldr	r0, [fp, #-4]
    108c:	ldr	r1, [sp, #8]
    1090:	ldr	r2, [sp, #4]
    1094:	ldr	r3, [sp]
    1098:	bl	10a4 <read_partial_array>
    109c:	mov	sp, fp
    10a0:	pop	{fp, pc}

000010a4 <read_partial_array>:
    10a4:	push	{r4, sl, fp, lr}
    10a8:	add	fp, sp, #8
    10ac:	sub	sp, sp, #96	; 0x60
    10b0:	str	r0, [fp, #-16]
    10b4:	str	r1, [fp, #-20]	; 0xffffffec
    10b8:	str	r2, [fp, #-24]	; 0xffffffe8
    10bc:	str	r3, [fp, #-28]	; 0xffffffe4
    10c0:	ldr	r0, [fp, #-16]
    10c4:	add	r1, r0, #8
    10c8:	ldr	r0, [r0, #4]
    10cc:	sub	r0, r0, #1
    10d0:	add	r0, r1, r0, lsl #4
    10d4:	ldr	r0, [r0]
    10d8:	str	r0, [fp, #-32]	; 0xffffffe0
    10dc:	ldr	r0, [fp, #-32]	; 0xffffffe0
    10e0:	ldr	r0, [r0, #24]
    10e4:	ldr	r1, [fp, #-32]	; 0xffffffe0
    10e8:	ldr	r1, [r1, #28]
    10ec:	mul	r0, r0, r1
    10f0:	str	r0, [fp, #-40]	; 0xffffffd8
    10f4:	ldr	r0, [fp, #-32]	; 0xffffffe0
    10f8:	ldr	r0, [r0, #8]
    10fc:	cmp	r0, #2
    1100:	bne	1108 <read_partial_array+0x64>
    1104:	b	1128 <read_partial_array+0x84>
    1108:	movw	r0, #0
    110c:	movt	r0, #0
    1110:	movw	r1, #0
    1114:	movt	r1, #0
    1118:	movw	r2, #296	; 0x128
    111c:	movw	r3, #0
    1120:	movt	r3, #0
    1124:	bl	0 <__assert_fail>
    1128:	ldr	r0, [fp, #-32]	; 0xffffffe0
    112c:	ldr	r0, [r0, #16]
    1130:	movw	r1, #0
    1134:	cmp	r0, r1
    1138:	bne	1150 <read_partial_array+0xac>
    113c:	ldr	r0, [fp, #-32]	; 0xffffffe0
    1140:	ldr	r0, [r0, #4]
    1144:	ldr	r0, [r0, #8]
    1148:	str	r0, [fp, #-36]	; 0xffffffdc
    114c:	b	1164 <read_partial_array+0xc0>
    1150:	ldr	r0, [fp, #-32]	; 0xffffffe0
    1154:	ldr	r0, [r0, #16]
    1158:	ldr	r0, [r0, #4]
    115c:	ldr	r0, [r0, #8]
    1160:	str	r0, [fp, #-36]	; 0xffffffdc
    1164:	ldr	r0, [fp, #-20]	; 0xffffffec
    1168:	ldr	r1, [fp, #-32]	; 0xffffffe0
    116c:	ldr	r1, [r1, #24]
    1170:	sdiv	r0, r0, r1
    1174:	str	r0, [fp, #-44]	; 0xffffffd4
    1178:	ldr	r0, [fp, #-20]	; 0xffffffec
    117c:	ldr	r1, [fp, #-24]	; 0xffffffe8
    1180:	add	r0, r0, r1
    1184:	ldr	r1, [fp, #-32]	; 0xffffffe0
    1188:	ldr	r1, [r1, #24]
    118c:	sdiv	r0, r0, r1
    1190:	str	r0, [fp, #-48]	; 0xffffffd0
    1194:	mov	r0, #0
    1198:	str	r0, [sp, #52]	; 0x34
    119c:	str	r0, [sp, #48]	; 0x30
    11a0:	ldr	r0, [fp, #-44]	; 0xffffffd4
    11a4:	str	r0, [sp, #44]	; 0x2c
    11a8:	ldr	r0, [sp, #44]	; 0x2c
    11ac:	ldr	r1, [fp, #-48]	; 0xffffffd0
    11b0:	cmp	r0, r1
    11b4:	bgt	13b8 <read_partial_array+0x314>
    11b8:	mov	r0, #0
    11bc:	str	r0, [sp, #36]	; 0x24
    11c0:	str	r0, [sp, #32]
    11c4:	ldr	r0, [fp, #-40]	; 0xffffffd8
    11c8:	asr	r1, r0, #31
    11cc:	str	r0, [sp, #24]
    11d0:	str	r1, [sp, #28]
    11d4:	ldr	r0, [fp, #-32]	; 0xffffffe0
    11d8:	ldr	r0, [r0, #36]	; 0x24
    11dc:	ldr	r1, [sp, #44]	; 0x2c
    11e0:	add	r0, r0, r1, lsl #3
    11e4:	ldr	r0, [r0, #4]
    11e8:	cmn	r0, #1
    11ec:	bgt	1210 <read_partial_array+0x16c>
    11f0:	b	11f4 <read_partial_array+0x150>
    11f4:	mvn	r0, #199	; 0xc7
    11f8:	movw	r1, #0
    11fc:	movt	r1, #0
    1200:	bl	0 <coda_set_error>
    1204:	mvn	r0, #0
    1208:	str	r0, [fp, #-12]
    120c:	b	1514 <read_partial_array+0x470>
    1210:	ldr	r0, [fp, #-20]	; 0xffffffec
    1214:	ldr	r1, [fp, #-24]	; 0xffffffe8
    1218:	add	r0, r0, r1
    121c:	ldr	r1, [sp, #44]	; 0x2c
    1220:	add	r1, r1, #1
    1224:	ldr	r2, [fp, #-32]	; 0xffffffe0
    1228:	ldr	r2, [r2, #24]
    122c:	mul	r1, r1, r2
    1230:	cmp	r0, r1
    1234:	bge	1268 <read_partial_array+0x1c4>
    1238:	ldr	r0, [fp, #-20]	; 0xffffffec
    123c:	ldr	r1, [fp, #-24]	; 0xffffffe8
    1240:	add	r0, r0, r1
    1244:	ldr	r1, [sp, #44]	; 0x2c
    1248:	ldr	r2, [fp, #-32]	; 0xffffffe0
    124c:	ldr	r3, [r2, #24]
    1250:	ldr	r2, [r2, #28]
    1254:	mls	r0, r1, r3, r0
    1258:	mul	r0, r0, r2
    125c:	asr	r1, r0, #31
    1260:	str	r0, [sp, #24]
    1264:	str	r1, [sp, #28]
    1268:	ldr	r0, [fp, #-20]	; 0xffffffec
    126c:	ldr	r1, [sp, #44]	; 0x2c
    1270:	ldr	r2, [fp, #-32]	; 0xffffffe0
    1274:	ldr	r2, [r2, #24]
    1278:	mul	r1, r1, r2
    127c:	cmp	r0, r1
    1280:	ble	12cc <read_partial_array+0x228>
    1284:	ldr	r0, [fp, #-20]	; 0xffffffec
    1288:	ldr	r1, [sp, #44]	; 0x2c
    128c:	ldr	r2, [fp, #-32]	; 0xffffffe0
    1290:	ldr	r3, [r2, #24]
    1294:	ldr	r2, [r2, #28]
    1298:	mls	r0, r1, r3, r0
    129c:	mul	r0, r0, r2
    12a0:	asr	r1, r0, #31
    12a4:	str	r0, [sp, #32]
    12a8:	str	r1, [sp, #36]	; 0x24
    12ac:	ldr	r0, [sp, #32]
    12b0:	ldr	r1, [sp, #36]	; 0x24
    12b4:	ldr	r2, [sp, #24]
    12b8:	ldr	r3, [sp, #28]
    12bc:	subs	r0, r2, r0
    12c0:	sbc	r1, r3, r1
    12c4:	str	r0, [sp, #24]
    12c8:	str	r1, [sp, #28]
    12cc:	ldr	r0, [fp, #-32]	; 0xffffffe0
    12d0:	ldr	r0, [r0, #40]	; 0x28
    12d4:	movw	r1, #0
    12d8:	cmp	r0, r1
    12dc:	beq	1318 <read_partial_array+0x274>
    12e0:	ldr	r0, [fp, #-28]	; 0xffffffe4
    12e4:	ldr	r1, [sp, #48]	; 0x30
    12e8:	add	r0, r0, r1
    12ec:	ldr	r1, [fp, #-32]	; 0xffffffe0
    12f0:	ldr	r2, [r1, #36]	; 0x24
    12f4:	ldr	r1, [r1, #40]	; 0x28
    12f8:	ldr	r3, [sp, #44]	; 0x2c
    12fc:	ldr	r2, [r2, r3, lsl #3]
    1300:	ldr	r3, [sp, #32]
    1304:	add	r2, r2, r3
    1308:	add	r1, r1, r2
    130c:	ldr	r2, [sp, #24]
    1310:	bl	0 <memcpy>
    1314:	b	1388 <read_partial_array+0x2e4>
    1318:	ldr	r0, [fp, #-16]
    131c:	ldr	r0, [r0]
    1320:	ldr	r0, [r0, #52]	; 0x34
    1324:	ldr	r1, [fp, #-32]	; 0xffffffe0
    1328:	ldr	r1, [r1, #36]	; 0x24
    132c:	ldr	r2, [sp, #44]	; 0x2c
    1330:	ldr	r2, [r1, r2, lsl #3]!
    1334:	ldr	r1, [r1, #4]
    1338:	ldr	r3, [sp, #32]
    133c:	ldr	ip, [sp, #36]	; 0x24
    1340:	adds	r2, r2, r3
    1344:	adc	r3, r1, ip
    1348:	ldr	r1, [sp, #24]
    134c:	ldr	ip, [sp, #28]
    1350:	ldr	lr, [fp, #-28]	; 0xffffffe4
    1354:	ldr	r4, [sp, #48]	; 0x30
    1358:	add	lr, lr, r4
    135c:	mov	r4, sp
    1360:	str	lr, [r4, #8]
    1364:	str	ip, [r4, #4]
    1368:	str	r1, [r4]
    136c:	bl	1718 <read_bytes>
    1370:	cmp	r0, #0
    1374:	beq	1384 <read_partial_array+0x2e0>
    1378:	mvn	r0, #0
    137c:	str	r0, [fp, #-12]
    1380:	b	1514 <read_partial_array+0x470>
    1384:	b	1388 <read_partial_array+0x2e4>
    1388:	ldr	r0, [sp, #24]
    138c:	ldr	r1, [sp, #28]
    1390:	ldr	r2, [sp, #48]	; 0x30
    1394:	ldr	r3, [sp, #52]	; 0x34
    1398:	adds	r0, r2, r0
    139c:	adc	r1, r3, r1
    13a0:	str	r0, [sp, #48]	; 0x30
    13a4:	str	r1, [sp, #52]	; 0x34
    13a8:	ldr	r0, [sp, #44]	; 0x2c
    13ac:	add	r0, r0, #1
    13b0:	str	r0, [sp, #44]	; 0x2c
    13b4:	b	11a8 <read_partial_array+0x104>
    13b8:	ldr	r0, [fp, #-36]	; 0xffffffdc
    13bc:	cmp	r0, #4
    13c0:	beq	150c <read_partial_array+0x468>
    13c4:	movw	r0, #1
    13c8:	str	r0, [sp, #20]
    13cc:	ldr	r0, [fp, #-16]
    13d0:	ldr	r0, [r0]
    13d4:	ldr	r0, [r0, #68]	; 0x44
    13d8:	ldr	r1, [sp, #20]
    13dc:	cmp	r0, r1
    13e0:	beq	1508 <read_partial_array+0x464>
    13e4:	ldr	r0, [fp, #-32]	; 0xffffffe0
    13e8:	ldr	r0, [r0, #28]
    13ec:	sub	r0, r0, #1
    13f0:	cmp	r0, #7
    13f4:	str	r0, [sp, #16]
    13f8:	bhi	14e4 <read_partial_array+0x440>
    13fc:	add	r0, pc, #8
    1400:	ldr	r1, [sp, #16]
    1404:	ldr	r0, [r0, r1, lsl #2]
    1408:	mov	pc, r0
    140c:	.word	0x0000142c
    1410:	.word	0x00001430
    1414:	.word	0x000014e4
    1418:	.word	0x0000146c
    141c:	.word	0x000014e4
    1420:	.word	0x000014e4
    1424:	.word	0x000014e4
    1428:	.word	0x000014a8
    142c:	b	1504 <read_partial_array+0x460>
    1430:	movw	r0, #0
    1434:	str	r0, [sp, #44]	; 0x2c
    1438:	ldr	r0, [sp, #44]	; 0x2c
    143c:	ldr	r1, [fp, #-24]	; 0xffffffe8
    1440:	cmp	r0, r1
    1444:	bge	1468 <read_partial_array+0x3c4>
    1448:	ldr	r0, [fp, #-28]	; 0xffffffe4
    144c:	ldr	r1, [sp, #44]	; 0x2c
    1450:	add	r0, r0, r1, lsl #1
    1454:	bl	196c <swap2>
    1458:	ldr	r0, [sp, #44]	; 0x2c
    145c:	add	r0, r0, #1
    1460:	str	r0, [sp, #44]	; 0x2c
    1464:	b	1438 <read_partial_array+0x394>
    1468:	b	1504 <read_partial_array+0x460>
    146c:	movw	r0, #0
    1470:	str	r0, [sp, #44]	; 0x2c
    1474:	ldr	r0, [sp, #44]	; 0x2c
    1478:	ldr	r1, [fp, #-24]	; 0xffffffe8
    147c:	cmp	r0, r1
    1480:	bge	14a4 <read_partial_array+0x400>
    1484:	ldr	r0, [fp, #-28]	; 0xffffffe4
    1488:	ldr	r1, [sp, #44]	; 0x2c
    148c:	add	r0, r0, r1, lsl #2
    1490:	bl	19d8 <swap4>
    1494:	ldr	r0, [sp, #44]	; 0x2c
    1498:	add	r0, r0, #1
    149c:	str	r0, [sp, #44]	; 0x2c
    14a0:	b	1474 <read_partial_array+0x3d0>
    14a4:	b	1504 <read_partial_array+0x460>
    14a8:	movw	r0, #0
    14ac:	str	r0, [sp, #44]	; 0x2c
    14b0:	ldr	r0, [sp, #44]	; 0x2c
    14b4:	ldr	r1, [fp, #-24]	; 0xffffffe8
    14b8:	cmp	r0, r1
    14bc:	bge	14e0 <read_partial_array+0x43c>
    14c0:	ldr	r0, [fp, #-28]	; 0xffffffe4
    14c4:	ldr	r1, [sp, #44]	; 0x2c
    14c8:	add	r0, r0, r1, lsl #3
    14cc:	bl	1a98 <swap8>
    14d0:	ldr	r0, [sp, #44]	; 0x2c
    14d4:	add	r0, r0, #1
    14d8:	str	r0, [sp, #44]	; 0x2c
    14dc:	b	14b0 <read_partial_array+0x40c>
    14e0:	b	1504 <read_partial_array+0x460>
    14e4:	movw	r0, #0
    14e8:	movt	r0, #0
    14ec:	movw	r1, #0
    14f0:	movt	r1, #0
    14f4:	movw	r2, #379	; 0x17b
    14f8:	movw	r3, #0
    14fc:	movt	r3, #0
    1500:	bl	0 <__assert_fail>
    1504:	b	1508 <read_partial_array+0x464>
    1508:	b	150c <read_partial_array+0x468>
    150c:	movw	r0, #0
    1510:	str	r0, [fp, #-12]
    1514:	ldr	r0, [fp, #-12]
    1518:	sub	sp, fp, #8
    151c:	pop	{r4, sl, fp, pc}

00001520 <coda_cdf_cursor_read_uint8_partial_array>:
    1520:	push	{fp, lr}
    1524:	mov	fp, sp
    1528:	sub	sp, sp, #16
    152c:	str	r0, [fp, #-4]
    1530:	str	r1, [sp, #8]
    1534:	str	r2, [sp, #4]
    1538:	str	r3, [sp]
    153c:	ldr	r0, [fp, #-4]
    1540:	ldr	r1, [sp, #8]
    1544:	ldr	r2, [sp, #4]
    1548:	ldr	r3, [sp]
    154c:	bl	10a4 <read_partial_array>
    1550:	mov	sp, fp
    1554:	pop	{fp, pc}

00001558 <coda_cdf_cursor_read_int16_partial_array>:
    1558:	push	{fp, lr}
    155c:	mov	fp, sp
    1560:	sub	sp, sp, #16
    1564:	str	r0, [fp, #-4]
    1568:	str	r1, [sp, #8]
    156c:	str	r2, [sp, #4]
    1570:	str	r3, [sp]
    1574:	ldr	r0, [fp, #-4]
    1578:	ldr	r1, [sp, #8]
    157c:	ldr	r2, [sp, #4]
    1580:	ldr	r3, [sp]
    1584:	bl	10a4 <read_partial_array>
    1588:	mov	sp, fp
    158c:	pop	{fp, pc}

00001590 <coda_cdf_cursor_read_uint16_partial_array>:
    1590:	push	{fp, lr}
    1594:	mov	fp, sp
    1598:	sub	sp, sp, #16
    159c:	str	r0, [fp, #-4]
    15a0:	str	r1, [sp, #8]
    15a4:	str	r2, [sp, #4]
    15a8:	str	r3, [sp]
    15ac:	ldr	r0, [fp, #-4]
    15b0:	ldr	r1, [sp, #8]
    15b4:	ldr	r2, [sp, #4]
    15b8:	ldr	r3, [sp]
    15bc:	bl	10a4 <read_partial_array>
    15c0:	mov	sp, fp
    15c4:	pop	{fp, pc}

000015c8 <coda_cdf_cursor_read_int32_partial_array>:
    15c8:	push	{fp, lr}
    15cc:	mov	fp, sp
    15d0:	sub	sp, sp, #16
    15d4:	str	r0, [fp, #-4]
    15d8:	str	r1, [sp, #8]
    15dc:	str	r2, [sp, #4]
    15e0:	str	r3, [sp]
    15e4:	ldr	r0, [fp, #-4]
    15e8:	ldr	r1, [sp, #8]
    15ec:	ldr	r2, [sp, #4]
    15f0:	ldr	r3, [sp]
    15f4:	bl	10a4 <read_partial_array>
    15f8:	mov	sp, fp
    15fc:	pop	{fp, pc}

00001600 <coda_cdf_cursor_read_uint32_partial_array>:
    1600:	push	{fp, lr}
    1604:	mov	fp, sp
    1608:	sub	sp, sp, #16
    160c:	str	r0, [fp, #-4]
    1610:	str	r1, [sp, #8]
    1614:	str	r2, [sp, #4]
    1618:	str	r3, [sp]
    161c:	ldr	r0, [fp, #-4]
    1620:	ldr	r1, [sp, #8]
    1624:	ldr	r2, [sp, #4]
    1628:	ldr	r3, [sp]
    162c:	bl	10a4 <read_partial_array>
    1630:	mov	sp, fp
    1634:	pop	{fp, pc}

00001638 <coda_cdf_cursor_read_int64_partial_array>:
    1638:	push	{fp, lr}
    163c:	mov	fp, sp
    1640:	sub	sp, sp, #16
    1644:	str	r0, [fp, #-4]
    1648:	str	r1, [sp, #8]
    164c:	str	r2, [sp, #4]
    1650:	str	r3, [sp]
    1654:	ldr	r0, [fp, #-4]
    1658:	ldr	r1, [sp, #8]
    165c:	ldr	r2, [sp, #4]
    1660:	ldr	r3, [sp]
    1664:	bl	10a4 <read_partial_array>
    1668:	mov	sp, fp
    166c:	pop	{fp, pc}

00001670 <coda_cdf_cursor_read_float_partial_array>:
    1670:	push	{fp, lr}
    1674:	mov	fp, sp
    1678:	sub	sp, sp, #16
    167c:	str	r0, [fp, #-4]
    1680:	str	r1, [sp, #8]
    1684:	str	r2, [sp, #4]
    1688:	str	r3, [sp]
    168c:	ldr	r0, [fp, #-4]
    1690:	ldr	r1, [sp, #8]
    1694:	ldr	r2, [sp, #4]
    1698:	ldr	r3, [sp]
    169c:	bl	10a4 <read_partial_array>
    16a0:	mov	sp, fp
    16a4:	pop	{fp, pc}

000016a8 <coda_cdf_cursor_read_double_partial_array>:
    16a8:	push	{fp, lr}
    16ac:	mov	fp, sp
    16b0:	sub	sp, sp, #16
    16b4:	str	r0, [fp, #-4]
    16b8:	str	r1, [sp, #8]
    16bc:	str	r2, [sp, #4]
    16c0:	str	r3, [sp]
    16c4:	ldr	r0, [fp, #-4]
    16c8:	ldr	r1, [sp, #8]
    16cc:	ldr	r2, [sp, #4]
    16d0:	ldr	r3, [sp]
    16d4:	bl	10a4 <read_partial_array>
    16d8:	mov	sp, fp
    16dc:	pop	{fp, pc}

000016e0 <coda_cdf_cursor_read_char_partial_array>:
    16e0:	push	{fp, lr}
    16e4:	mov	fp, sp
    16e8:	sub	sp, sp, #16
    16ec:	str	r0, [fp, #-4]
    16f0:	str	r1, [sp, #8]
    16f4:	str	r2, [sp, #4]
    16f8:	str	r3, [sp]
    16fc:	ldr	r0, [fp, #-4]
    1700:	ldr	r1, [sp, #8]
    1704:	ldr	r2, [sp, #4]
    1708:	ldr	r3, [sp]
    170c:	bl	10a4 <read_partial_array>
    1710:	mov	sp, fp
    1714:	pop	{fp, pc}

00001718 <read_bytes>:
    1718:	push	{fp, lr}
    171c:	mov	fp, sp
    1720:	sub	sp, sp, #112	; 0x70
    1724:	ldr	r1, [fp, #12]
    1728:	ldr	ip, [fp, #8]
    172c:	ldr	lr, [fp, #16]
    1730:	str	r0, [fp, #-8]
    1734:	str	r3, [fp, #-12]
    1738:	str	r2, [fp, #-16]
    173c:	str	r1, [fp, #-20]	; 0xffffffec
    1740:	str	ip, [fp, #-24]	; 0xffffffe8
    1744:	ldr	r0, [fp, #-8]
    1748:	ldr	r0, [r0, #48]	; 0x30
    174c:	movw	r1, #0
    1750:	cmp	r0, r1
    1754:	beq	186c <read_bytes+0x154>
    1758:	ldr	r0, [fp, #-16]
    175c:	ldr	r1, [fp, #-12]
    1760:	ldr	r2, [fp, #-24]	; 0xffffffe8
    1764:	ldr	r3, [fp, #-20]	; 0xffffffec
    1768:	adds	r0, r0, r2
    176c:	adc	r1, r1, r3
    1770:	ldr	r2, [fp, #-8]
    1774:	ldr	r3, [r2, #40]	; 0x28
    1778:	ldr	r2, [r2, #44]	; 0x2c
    177c:	subs	r0, r3, r0
    1780:	sbcs	r1, r2, r1
    1784:	bcs	184c <read_bytes+0x134>
    1788:	b	178c <read_bytes+0x74>
    178c:	ldr	r0, [fp, #-8]
    1790:	ldr	r0, [r0, #16]
    1794:	cmp	r0, #0
    1798:	beq	17ac <read_bytes+0x94>
    179c:	ldr	r0, [fp, #-8]
    17a0:	ldr	r0, [r0, #16]
    17a4:	cmp	r0, #1
    17a8:	bne	17c8 <read_bytes+0xb0>
    17ac:	mvn	r0, #300	; 0x12c
    17b0:	movw	r1, #0
    17b4:	movt	r1, #0
    17b8:	bl	0 <coda_set_error>
    17bc:	mvn	r0, #0
    17c0:	str	r0, [fp, #-4]
    17c4:	b	1960 <read_bytes+0x248>
    17c8:	add	r2, sp, #25
    17cc:	ldr	r0, [fp, #-24]	; 0xffffffe8
    17d0:	ldr	r1, [fp, #-20]	; 0xffffffec
    17d4:	sub	r3, fp, #45	; 0x2d
    17d8:	str	r2, [sp, #20]
    17dc:	mov	r2, r3
    17e0:	bl	0 <coda_str64>
    17e4:	ldr	r0, [fp, #-16]
    17e8:	ldr	r1, [fp, #-12]
    17ec:	add	r2, sp, #46	; 0x2e
    17f0:	bl	0 <coda_str64>
    17f4:	ldr	r0, [fp, #-8]
    17f8:	ldr	r1, [r0, #40]	; 0x28
    17fc:	ldr	r0, [r0, #44]	; 0x2c
    1800:	str	r0, [sp, #16]
    1804:	mov	r0, r1
    1808:	ldr	r1, [sp, #16]
    180c:	ldr	r2, [sp, #20]
    1810:	bl	0 <coda_str64>
    1814:	add	r0, sp, #25
    1818:	add	r3, sp, #46	; 0x2e
    181c:	sub	r2, fp, #45	; 0x2d
    1820:	mvn	r1, #300	; 0x12c
    1824:	str	r0, [sp, #12]
    1828:	mov	r0, r1
    182c:	movw	r1, #0
    1830:	movt	r1, #0
    1834:	ldr	ip, [sp, #12]
    1838:	str	ip, [sp]
    183c:	bl	0 <coda_set_error>
    1840:	mvn	r0, #0
    1844:	str	r0, [fp, #-4]
    1848:	b	1960 <read_bytes+0x248>
    184c:	ldr	r0, [fp, #16]
    1850:	ldr	r1, [fp, #-8]
    1854:	ldr	r1, [r1, #48]	; 0x30
    1858:	ldr	r2, [fp, #-16]
    185c:	add	r1, r1, r2
    1860:	ldr	r2, [fp, #-24]	; 0xffffffe8
    1864:	bl	0 <memcpy>
    1868:	b	1958 <read_bytes+0x240>
    186c:	ldr	r0, [fp, #-8]
    1870:	ldr	r0, [r0, #16]
    1874:	cmp	r0, #0
    1878:	beq	188c <read_bytes+0x174>
    187c:	ldr	r0, [fp, #-8]
    1880:	ldr	r0, [r0, #16]
    1884:	cmp	r0, #1
    1888:	bne	1890 <read_bytes+0x178>
    188c:	b	18b0 <read_bytes+0x198>
    1890:	movw	r0, #0
    1894:	movt	r0, #0
    1898:	movw	r1, #0
    189c:	movt	r1, #0
    18a0:	movw	r2, #83	; 0x53
    18a4:	movw	r3, #0
    18a8:	movt	r3, #0
    18ac:	bl	0 <__assert_fail>
    18b0:	ldr	r0, [fp, #-16]
    18b4:	ldr	r1, [fp, #-12]
    18b8:	ldr	r2, [fp, #-24]	; 0xffffffe8
    18bc:	ldr	r3, [fp, #-20]	; 0xffffffec
    18c0:	adds	r0, r0, r2
    18c4:	adc	r1, r1, r3
    18c8:	ldr	r2, [fp, #-8]
    18cc:	ldr	r3, [r2, #8]
    18d0:	ldr	r2, [r2, #12]
    18d4:	subs	r0, r3, r0
    18d8:	sbcs	r1, r2, r1
    18dc:	bcs	1900 <read_bytes+0x1e8>
    18e0:	b	18e4 <read_bytes+0x1cc>
    18e4:	mvn	r0, #300	; 0x12c
    18e8:	movw	r1, #0
    18ec:	movt	r1, #0
    18f0:	bl	0 <coda_set_error>
    18f4:	mvn	r0, #0
    18f8:	str	r0, [fp, #-4]
    18fc:	b	1960 <read_bytes+0x248>
    1900:	ldr	r0, [fp, #-8]
    1904:	ldr	r0, [r0, #56]	; 0x38
    1908:	ldr	r1, [fp, #16]
    190c:	ldr	r2, [fp, #-24]	; 0xffffffe8
    1910:	ldr	r3, [fp, #-16]
    1914:	bl	0 <pread>
    1918:	cmp	r0, #0
    191c:	bge	1954 <read_bytes+0x23c>
    1920:	bl	0 <__errno_location>
    1924:	ldr	r0, [r0]
    1928:	bl	0 <strerror>
    192c:	mvn	r1, #21
    1930:	str	r0, [sp, #8]
    1934:	mov	r0, r1
    1938:	movw	r1, #0
    193c:	movt	r1, #0
    1940:	ldr	r2, [sp, #8]
    1944:	bl	0 <coda_set_error>
    1948:	mvn	r0, #0
    194c:	str	r0, [fp, #-4]
    1950:	b	1960 <read_bytes+0x248>
    1954:	b	1958 <read_bytes+0x240>
    1958:	movw	r0, #0
    195c:	str	r0, [fp, #-4]
    1960:	ldr	r0, [fp, #-4]
    1964:	mov	sp, fp
    1968:	pop	{fp, pc}

0000196c <swap2>:
    196c:	sub	sp, sp, #8
    1970:	str	r0, [sp, #4]
    1974:	ldr	r0, [sp, #4]
    1978:	str	r0, [sp]
    197c:	ldr	r0, [sp]
    1980:	ldrb	r0, [r0]
    1984:	ldr	r1, [sp]
    1988:	ldrb	r1, [r1, #1]
    198c:	eor	r0, r0, r1
    1990:	ldr	r1, [sp]
    1994:	strb	r0, [r1]
    1998:	ldr	r0, [sp]
    199c:	ldrb	r0, [r0]
    19a0:	ldr	r1, [sp]
    19a4:	ldrb	r1, [r1, #1]
    19a8:	eor	r0, r0, r1
    19ac:	ldr	r1, [sp]
    19b0:	strb	r0, [r1, #1]
    19b4:	ldr	r0, [sp]
    19b8:	ldrb	r0, [r0]
    19bc:	ldr	r1, [sp]
    19c0:	ldrb	r1, [r1, #1]
    19c4:	eor	r0, r0, r1
    19c8:	ldr	r1, [sp]
    19cc:	strb	r0, [r1]
    19d0:	add	sp, sp, #8
    19d4:	bx	lr

000019d8 <swap4>:
    19d8:	sub	sp, sp, #8
    19dc:	str	r0, [sp, #4]
    19e0:	ldr	r0, [sp, #4]
    19e4:	str	r0, [sp]
    19e8:	ldr	r0, [sp]
    19ec:	ldrb	r0, [r0]
    19f0:	ldr	r1, [sp]
    19f4:	ldrb	r1, [r1, #3]
    19f8:	eor	r0, r0, r1
    19fc:	ldr	r1, [sp]
    1a00:	strb	r0, [r1]
    1a04:	ldr	r0, [sp]
    1a08:	ldrb	r0, [r0]
    1a0c:	ldr	r1, [sp]
    1a10:	ldrb	r1, [r1, #3]
    1a14:	eor	r0, r0, r1
    1a18:	ldr	r1, [sp]
    1a1c:	strb	r0, [r1, #3]
    1a20:	ldr	r0, [sp]
    1a24:	ldrb	r0, [r0]
    1a28:	ldr	r1, [sp]
    1a2c:	ldrb	r1, [r1, #3]
    1a30:	eor	r0, r0, r1
    1a34:	ldr	r1, [sp]
    1a38:	strb	r0, [r1]
    1a3c:	ldr	r0, [sp]
    1a40:	ldrb	r0, [r0, #1]
    1a44:	ldr	r1, [sp]
    1a48:	ldrb	r1, [r1, #2]
    1a4c:	eor	r0, r0, r1
    1a50:	ldr	r1, [sp]
    1a54:	strb	r0, [r1, #1]
    1a58:	ldr	r0, [sp]
    1a5c:	ldrb	r0, [r0, #1]
    1a60:	ldr	r1, [sp]
    1a64:	ldrb	r1, [r1, #2]
    1a68:	eor	r0, r0, r1
    1a6c:	ldr	r1, [sp]
    1a70:	strb	r0, [r1, #2]
    1a74:	ldr	r0, [sp]
    1a78:	ldrb	r0, [r0, #1]
    1a7c:	ldr	r1, [sp]
    1a80:	ldrb	r1, [r1, #2]
    1a84:	eor	r0, r0, r1
    1a88:	ldr	r1, [sp]
    1a8c:	strb	r0, [r1, #1]
    1a90:	add	sp, sp, #8
    1a94:	bx	lr

00001a98 <swap8>:
    1a98:	sub	sp, sp, #8
    1a9c:	str	r0, [sp, #4]
    1aa0:	ldr	r0, [sp, #4]
    1aa4:	str	r0, [sp]
    1aa8:	ldr	r0, [sp]
    1aac:	ldrb	r0, [r0]
    1ab0:	ldr	r1, [sp]
    1ab4:	ldrb	r1, [r1, #7]
    1ab8:	eor	r0, r0, r1
    1abc:	ldr	r1, [sp]
    1ac0:	strb	r0, [r1]
    1ac4:	ldr	r0, [sp]
    1ac8:	ldrb	r0, [r0]
    1acc:	ldr	r1, [sp]
    1ad0:	ldrb	r1, [r1, #7]
    1ad4:	eor	r0, r0, r1
    1ad8:	ldr	r1, [sp]
    1adc:	strb	r0, [r1, #7]
    1ae0:	ldr	r0, [sp]
    1ae4:	ldrb	r0, [r0]
    1ae8:	ldr	r1, [sp]
    1aec:	ldrb	r1, [r1, #7]
    1af0:	eor	r0, r0, r1
    1af4:	ldr	r1, [sp]
    1af8:	strb	r0, [r1]
    1afc:	ldr	r0, [sp]
    1b00:	ldrb	r0, [r0, #1]
    1b04:	ldr	r1, [sp]
    1b08:	ldrb	r1, [r1, #6]
    1b0c:	eor	r0, r0, r1
    1b10:	ldr	r1, [sp]
    1b14:	strb	r0, [r1, #1]
    1b18:	ldr	r0, [sp]
    1b1c:	ldrb	r0, [r0, #1]
    1b20:	ldr	r1, [sp]
    1b24:	ldrb	r1, [r1, #6]
    1b28:	eor	r0, r0, r1
    1b2c:	ldr	r1, [sp]
    1b30:	strb	r0, [r1, #6]
    1b34:	ldr	r0, [sp]
    1b38:	ldrb	r0, [r0, #1]
    1b3c:	ldr	r1, [sp]
    1b40:	ldrb	r1, [r1, #6]
    1b44:	eor	r0, r0, r1
    1b48:	ldr	r1, [sp]
    1b4c:	strb	r0, [r1, #1]
    1b50:	ldr	r0, [sp]
    1b54:	ldrb	r0, [r0, #2]
    1b58:	ldr	r1, [sp]
    1b5c:	ldrb	r1, [r1, #5]
    1b60:	eor	r0, r0, r1
    1b64:	ldr	r1, [sp]
    1b68:	strb	r0, [r1, #2]
    1b6c:	ldr	r0, [sp]
    1b70:	ldrb	r0, [r0, #2]
    1b74:	ldr	r1, [sp]
    1b78:	ldrb	r1, [r1, #5]
    1b7c:	eor	r0, r0, r1
    1b80:	ldr	r1, [sp]
    1b84:	strb	r0, [r1, #5]
    1b88:	ldr	r0, [sp]
    1b8c:	ldrb	r0, [r0, #2]
    1b90:	ldr	r1, [sp]
    1b94:	ldrb	r1, [r1, #5]
    1b98:	eor	r0, r0, r1
    1b9c:	ldr	r1, [sp]
    1ba0:	strb	r0, [r1, #2]
    1ba4:	ldr	r0, [sp]
    1ba8:	ldrb	r0, [r0, #3]
    1bac:	ldr	r1, [sp]
    1bb0:	ldrb	r1, [r1, #4]
    1bb4:	eor	r0, r0, r1
    1bb8:	ldr	r1, [sp]
    1bbc:	strb	r0, [r1, #3]
    1bc0:	ldr	r0, [sp]
    1bc4:	ldrb	r0, [r0, #3]
    1bc8:	ldr	r1, [sp]
    1bcc:	ldrb	r1, [r1, #4]
    1bd0:	eor	r0, r0, r1
    1bd4:	ldr	r1, [sp]
    1bd8:	strb	r0, [r1, #4]
    1bdc:	ldr	r0, [sp]
    1be0:	ldrb	r0, [r0, #3]
    1be4:	ldr	r1, [sp]
    1be8:	ldrb	r1, [r1, #4]
    1bec:	eor	r0, r0, r1
    1bf0:	ldr	r1, [sp]
    1bf4:	strb	r0, [r1, #3]
    1bf8:	add	sp, sp, #8
    1bfc:	bx	lr
