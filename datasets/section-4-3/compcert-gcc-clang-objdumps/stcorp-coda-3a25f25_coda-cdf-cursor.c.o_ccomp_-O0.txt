
../repos/stcorp-coda-3a25f25/CMakeFiles/coda.dir/libcoda/coda-cdf-cursor.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <read_bytes>:
       0:	mov	ip, sp
       4:	sub	sp, sp, #112	; 0x70
       8:	str	ip, [sp, #4]
       c:	str	lr, [sp, #8]
      10:	str	r4, [sp, #16]
      14:	str	r5, [sp, #20]
      18:	str	r6, [sp, #24]
      1c:	str	r7, [sp, #28]
      20:	str	r8, [sp, #32]
      24:	str	r9, [sp, #36]	; 0x24
      28:	ldr	r7, [ip, #8]
      2c:	ldr	r9, [ip, #4]
      30:	ldr	r6, [ip]
      34:	mov	r8, r3
      38:	mov	r5, r2
      3c:	mov	r4, r0
      40:	ldr	r1, [r4, #48]	; 0x30
      44:	cmp	r1, #0
      48:	bne	110 <read_bytes+0x110>
      4c:	ldr	r0, [r4, #16]
      50:	cmp	r0, #0
      54:	beq	6c <read_bytes+0x6c>
      58:	ldr	r2, [r4, #16]
      5c:	cmp	r2, #1
      60:	moveq	r0, #1
      64:	movne	r0, #0
      68:	b	70 <read_bytes+0x70>
      6c:	mov	r0, #1
      70:	cmp	r0, #0
      74:	bne	8c <read_bytes+0x8c>
      78:	ldr	r0, [pc, #412]	; 21c <read_bytes+0x21c>
      7c:	ldr	r1, [pc, #404]	; 218 <read_bytes+0x218>
      80:	mov	r2, #83	; 0x53
      84:	ldr	r3, [pc, #392]	; 214 <read_bytes+0x214>
      88:	bl	0 <__assert_fail>
      8c:	adds	r0, r5, r6
      90:	adc	r3, r8, r9
      94:	ldr	r1, [r4, #8]
      98:	ldr	ip, [r4, #12]
      9c:	cmp	r3, ip
      a0:	bne	b0 <read_bytes+0xb0>
      a4:	cmp	r0, r1
      a8:	bhi	b8 <read_bytes+0xb8>
      ac:	b	cc <read_bytes+0xcc>
      b0:	cmp	r3, ip
      b4:	bls	cc <read_bytes+0xcc>
      b8:	mvn	r0, #300	; 0x12c
      bc:	ldr	r1, [pc, #328]	; 20c <read_bytes+0x20c>
      c0:	bl	0 <coda_set_error>
      c4:	mvn	r0, #0
      c8:	b	1e8 <read_bytes+0x1e8>
      cc:	ldr	r0, [r4, #56]	; 0x38
      d0:	mov	r2, r6
      d4:	mov	r3, r5
      d8:	mov	r1, r7
      dc:	bl	0 <pread>
      e0:	cmp	r0, #0
      e4:	bge	1e4 <read_bytes+0x1e4>
      e8:	bl	0 <__errno_location>
      ec:	ldr	r0, [r0]
      f0:	bl	0 <strerror>
      f4:	mvn	r3, #21
      f8:	ldr	r1, [pc, #272]	; 210 <read_bytes+0x210>
      fc:	mov	r2, r0
     100:	mov	r0, r3
     104:	bl	0 <coda_set_error>
     108:	mvn	r0, #0
     10c:	b	1e8 <read_bytes+0x1e8>
     110:	adds	ip, r5, r6
     114:	adc	r1, r8, r9
     118:	ldr	r2, [r4, #40]	; 0x28
     11c:	ldr	r3, [r4, #44]	; 0x2c
     120:	cmp	r1, r3
     124:	bne	134 <read_bytes+0x134>
     128:	cmp	ip, r2
     12c:	bhi	13c <read_bytes+0x13c>
     130:	b	1d0 <read_bytes+0x1d0>
     134:	cmp	r1, r3
     138:	bls	1d0 <read_bytes+0x1d0>
     13c:	ldr	r1, [r4, #16]
     140:	cmp	r1, #0
     144:	beq	15c <read_bytes+0x15c>
     148:	ldr	r2, [r4, #16]
     14c:	cmp	r2, #1
     150:	moveq	ip, #1
     154:	movne	ip, #0
     158:	b	160 <read_bytes+0x160>
     15c:	mov	ip, #1
     160:	cmp	ip, #0
     164:	bne	1bc <read_bytes+0x1bc>
     168:	add	r2, sp, #64	; 0x40
     16c:	mov	r1, r9
     170:	mov	r0, r6
     174:	bl	0 <coda_str64>
     178:	add	r2, sp, #88	; 0x58
     17c:	mov	r1, r8
     180:	mov	r0, r5
     184:	bl	0 <coda_str64>
     188:	ldr	r0, [r4, #40]	; 0x28
     18c:	ldr	r1, [r4, #44]	; 0x2c
     190:	add	r2, sp, #40	; 0x28
     194:	bl	0 <coda_str64>
     198:	mvn	r0, #300	; 0x12c
     19c:	ldr	r1, [pc, #124]	; 220 <read_bytes+0x220>
     1a0:	add	r2, sp, #64	; 0x40
     1a4:	add	r3, sp, #88	; 0x58
     1a8:	add	r4, sp, #40	; 0x28
     1ac:	str	r4, [sp]
     1b0:	bl	0 <coda_set_error>
     1b4:	mvn	r0, #0
     1b8:	b	1e8 <read_bytes+0x1e8>
     1bc:	mvn	r0, #300	; 0x12c
     1c0:	ldr	r1, [pc, #68]	; 20c <read_bytes+0x20c>
     1c4:	bl	0 <coda_set_error>
     1c8:	mvn	r0, #0
     1cc:	b	1e8 <read_bytes+0x1e8>
     1d0:	ldr	r2, [r4, #48]	; 0x30
     1d4:	add	r1, r2, r5
     1d8:	mov	r2, r6
     1dc:	mov	r0, r7
     1e0:	bl	0 <memcpy>
     1e4:	mov	r0, #0
     1e8:	ldr	r4, [sp, #16]
     1ec:	ldr	r5, [sp, #20]
     1f0:	ldr	r6, [sp, #24]
     1f4:	ldr	r7, [sp, #28]
     1f8:	ldr	r8, [sp, #32]
     1fc:	ldr	r9, [sp, #36]	; 0x24
     200:	ldr	lr, [sp, #8]
     204:	add	sp, sp, #112	; 0x70
     208:	bx	lr
     20c:	.word	0x0000017d
     210:	.word	0x00000050
     214:	.word	0x00000254
     218:	.word	0x0000006e
     21c:	.word	0x000001a7
     220:	.word	0x000000cd

00000224 <swap2>:
     224:	mov	ip, sp
     228:	sub	sp, sp, #8
     22c:	str	ip, [sp]
     230:	str	lr, [sp, #4]
     234:	ldrb	r3, [r0]
     238:	ldrb	ip, [r0, #1]
     23c:	eor	ip, r3, ip
     240:	and	r2, ip, #255	; 0xff
     244:	strb	r2, [r0]
     248:	ldrb	r3, [r0]
     24c:	ldrb	r1, [r0, #1]
     250:	eor	r1, r3, r1
     254:	and	r2, r1, #255	; 0xff
     258:	strb	r2, [r0, #1]
     25c:	ldrb	r2, [r0]
     260:	ldrb	r1, [r0, #1]
     264:	eor	r1, r2, r1
     268:	and	r1, r1, #255	; 0xff
     26c:	strb	r1, [r0]
     270:	ldr	lr, [sp, #4]
     274:	add	sp, sp, #8
     278:	bx	lr

0000027c <swap4>:
     27c:	mov	ip, sp
     280:	sub	sp, sp, #8
     284:	str	ip, [sp]
     288:	str	lr, [sp, #4]
     28c:	ldrb	ip, [r0]
     290:	ldrb	r3, [r0, #3]
     294:	eor	r2, ip, r3
     298:	and	r1, r2, #255	; 0xff
     29c:	strb	r1, [r0]
     2a0:	ldrb	r1, [r0]
     2a4:	ldrb	r2, [r0, #3]
     2a8:	eor	r1, r1, r2
     2ac:	and	r2, r1, #255	; 0xff
     2b0:	strb	r2, [r0, #3]
     2b4:	ldrb	ip, [r0]
     2b8:	ldrb	r1, [r0, #3]
     2bc:	eor	r1, ip, r1
     2c0:	and	ip, r1, #255	; 0xff
     2c4:	strb	ip, [r0]
     2c8:	ldrb	ip, [r0, #1]
     2cc:	ldrb	r3, [r0, #2]
     2d0:	eor	ip, ip, r3
     2d4:	and	r1, ip, #255	; 0xff
     2d8:	strb	r1, [r0, #1]
     2dc:	ldrb	r3, [r0, #1]
     2e0:	ldrb	r1, [r0, #2]
     2e4:	eor	ip, r3, r1
     2e8:	and	r1, ip, #255	; 0xff
     2ec:	strb	r1, [r0, #2]
     2f0:	ldrb	r2, [r0, #1]
     2f4:	ldrb	r1, [r0, #2]
     2f8:	eor	r2, r2, r1
     2fc:	and	r1, r2, #255	; 0xff
     300:	strb	r1, [r0, #1]
     304:	ldr	lr, [sp, #4]
     308:	add	sp, sp, #8
     30c:	bx	lr

00000310 <swap8>:
     310:	mov	ip, sp
     314:	sub	sp, sp, #8
     318:	str	ip, [sp]
     31c:	str	lr, [sp, #4]
     320:	ldrb	r1, [r0]
     324:	ldrb	r2, [r0, #7]
     328:	eor	r1, r1, r2
     32c:	and	r2, r1, #255	; 0xff
     330:	strb	r2, [r0]
     334:	ldrb	ip, [r0]
     338:	ldrb	r1, [r0, #7]
     33c:	eor	r3, ip, r1
     340:	and	r1, r3, #255	; 0xff
     344:	strb	r1, [r0, #7]
     348:	ldrb	r1, [r0]
     34c:	ldrb	r3, [r0, #7]
     350:	eor	r3, r1, r3
     354:	and	r1, r3, #255	; 0xff
     358:	strb	r1, [r0]
     35c:	ldrb	r2, [r0, #1]
     360:	ldrb	ip, [r0, #6]
     364:	eor	r1, r2, ip
     368:	and	r2, r1, #255	; 0xff
     36c:	strb	r2, [r0, #1]
     370:	ldrb	r1, [r0, #1]
     374:	ldrb	ip, [r0, #6]
     378:	eor	r2, r1, ip
     37c:	and	r3, r2, #255	; 0xff
     380:	strb	r3, [r0, #6]
     384:	ldrb	r3, [r0, #1]
     388:	ldrb	r2, [r0, #6]
     38c:	eor	ip, r3, r2
     390:	and	ip, ip, #255	; 0xff
     394:	strb	ip, [r0, #1]
     398:	ldrb	r3, [r0, #2]
     39c:	ldrb	r1, [r0, #5]
     3a0:	eor	ip, r3, r1
     3a4:	and	r3, ip, #255	; 0xff
     3a8:	strb	r3, [r0, #2]
     3ac:	ldrb	r2, [r0, #2]
     3b0:	ldrb	r1, [r0, #5]
     3b4:	eor	r1, r2, r1
     3b8:	and	r1, r1, #255	; 0xff
     3bc:	strb	r1, [r0, #5]
     3c0:	ldrb	r1, [r0, #2]
     3c4:	ldrb	r3, [r0, #5]
     3c8:	eor	ip, r1, r3
     3cc:	and	r2, ip, #255	; 0xff
     3d0:	strb	r2, [r0, #2]
     3d4:	ldrb	ip, [r0, #3]
     3d8:	ldrb	r2, [r0, #4]
     3dc:	eor	r1, ip, r2
     3e0:	and	r1, r1, #255	; 0xff
     3e4:	strb	r1, [r0, #3]
     3e8:	ldrb	r1, [r0, #3]
     3ec:	ldrb	r2, [r0, #4]
     3f0:	eor	r2, r1, r2
     3f4:	and	r1, r2, #255	; 0xff
     3f8:	strb	r1, [r0, #4]
     3fc:	ldrb	ip, [r0, #3]
     400:	ldrb	r1, [r0, #4]
     404:	eor	r1, ip, r1
     408:	and	r3, r1, #255	; 0xff
     40c:	strb	r3, [r0, #3]
     410:	ldr	lr, [sp, #4]
     414:	add	sp, sp, #8
     418:	bx	lr

0000041c <coda_cdf_cursor_set_product>:
     41c:	mov	ip, sp
     420:	sub	sp, sp, #8
     424:	str	ip, [sp]
     428:	str	lr, [sp, #4]
     42c:	str	r1, [r0]
     430:	mov	r3, #1
     434:	str	r3, [r0, #4]
     438:	ldr	r2, [r1, #20]
     43c:	str	r2, [r0, #8]
     440:	mvn	ip, #0
     444:	str	ip, [r0, #12]
     448:	mvn	r2, #0
     44c:	mvn	r1, #0
     450:	str	r1, [r0, #16]
     454:	str	r2, [r0, #20]
     458:	mov	r0, #0
     45c:	ldr	lr, [sp, #4]
     460:	add	sp, sp, #8
     464:	bx	lr

00000468 <coda_cdf_cursor_goto_array_element>:
     468:	mov	ip, sp
     46c:	sub	sp, sp, #64	; 0x40
     470:	str	ip, [sp]
     474:	str	lr, [sp, #4]
     478:	str	r4, [sp, #8]
     47c:	str	r5, [sp, #12]
     480:	str	r6, [sp, #16]
     484:	str	r7, [sp, #20]
     488:	mov	r4, r2
     48c:	mov	r5, r1
     490:	mov	r6, r0
     494:	ldr	ip, [r6, #4]
     498:	lsl	r2, ip, #4
     49c:	add	r1, r6, r2
     4a0:	sub	lr, r1, #4096	; 0x1000
     4a4:	ldr	r0, [lr, #4088]	; 0xff8
     4a8:	ldr	r0, [r0, #4]
     4ac:	add	r1, sp, #24
     4b0:	add	r2, sp, #32
     4b4:	bl	0 <coda_type_get_array_dim>
     4b8:	cmp	r0, #0
     4bc:	beq	4c8 <coda_cdf_cursor_goto_array_element+0x60>
     4c0:	mvn	r0, #0
     4c4:	b	5e8 <coda_cdf_cursor_goto_array_element+0x180>
     4c8:	ldr	r1, [sp, #24]
     4cc:	cmp	r5, r1
     4d0:	beq	4f0 <coda_cdf_cursor_goto_array_element+0x88>
     4d4:	mvn	r0, #105	; 0x69
     4d8:	ldr	r1, [pc, #296]	; 608 <coda_cdf_cursor_goto_array_element+0x1a0>
     4dc:	ldr	r3, [sp, #24]
     4e0:	mov	r2, r5
     4e4:	bl	0 <coda_set_error>
     4e8:	mvn	r0, #0
     4ec:	b	5e8 <coda_cdf_cursor_goto_array_element+0x180>
     4f0:	mov	r5, #0
     4f4:	mov	r7, #0
     4f8:	ldr	r2, [sp, #24]
     4fc:	cmp	r7, r2
     500:	bge	57c <coda_cdf_cursor_goto_array_element+0x114>
     504:	ldr	ip, [r4, r7, lsl #2]
     508:	cmp	ip, #0
     50c:	blt	52c <coda_cdf_cursor_goto_array_element+0xc4>
     510:	ldr	r1, [r4, r7, lsl #2]
     514:	add	ip, sp, #32
     518:	ldr	r2, [ip, r7, lsl #2]
     51c:	cmp	r1, r2
     520:	movge	r3, #1
     524:	movlt	r3, #0
     528:	b	530 <coda_cdf_cursor_goto_array_element+0xc8>
     52c:	mov	r3, #1
     530:	cmp	r3, #0
     534:	beq	558 <coda_cdf_cursor_goto_array_element+0xf0>
     538:	mvn	r0, #106	; 0x6a
     53c:	ldr	r1, [pc, #192]	; 604 <coda_cdf_cursor_goto_array_element+0x19c>
     540:	ldr	r2, [r4, r7, lsl #2]
     544:	add	r3, sp, #32
     548:	ldr	r3, [r3, r7, lsl #2]
     54c:	bl	0 <coda_set_error>
     550:	mvn	r0, #0
     554:	b	5e8 <coda_cdf_cursor_goto_array_element+0x180>
     558:	cmp	r7, #0
     55c:	ble	56c <coda_cdf_cursor_goto_array_element+0x104>
     560:	add	r2, sp, #32
     564:	ldr	r3, [r2, r7, lsl #2]
     568:	mul	r5, r5, r3
     56c:	ldr	r0, [r4, r7, lsl #2]
     570:	add	r5, r5, r0
     574:	add	r7, r7, #1
     578:	b	4f8 <coda_cdf_cursor_goto_array_element+0x90>
     57c:	ldr	ip, [r6, #4]
     580:	lsl	r1, ip, #4
     584:	add	r3, r6, r1
     588:	sub	lr, r3, #4096	; 0x1000
     58c:	ldr	r1, [lr, #4088]	; 0xff8
     590:	ldr	r2, [r1, #16]
     594:	ldr	r0, [r6, #4]
     598:	add	r1, r0, #1
     59c:	str	r1, [r6, #4]
     5a0:	ldr	ip, [r6, #4]
     5a4:	lsl	r3, ip, #4
     5a8:	add	r3, r6, r3
     5ac:	sub	lr, r3, #4096	; 0x1000
     5b0:	str	r2, [lr, #4088]	; 0xff8
     5b4:	ldr	r3, [r6, #4]
     5b8:	lsl	r0, r3, #4
     5bc:	add	r2, r6, r0
     5c0:	sub	lr, r2, #4096	; 0x1000
     5c4:	str	r5, [lr, #4092]	; 0xffc
     5c8:	ldr	r0, [r6, #4]
     5cc:	lsl	r2, r0, #4
     5d0:	add	ip, r6, r2
     5d4:	mvn	r1, #0
     5d8:	mvn	r0, #0
     5dc:	str	r0, [ip]
     5e0:	str	r1, [ip, #4]
     5e4:	mov	r0, #0
     5e8:	ldr	r4, [sp, #8]
     5ec:	ldr	r5, [sp, #12]
     5f0:	ldr	r6, [sp, #16]
     5f4:	ldr	r7, [sp, #20]
     5f8:	ldr	lr, [sp, #4]
     5fc:	add	sp, sp, #64	; 0x40
     600:	bx	lr
     604:	.word	0x00000000
     608:	.word	0x00000108

0000060c <coda_cdf_cursor_goto_array_element_by_index>:
     60c:	mov	ip, sp
     610:	sub	sp, sp, #16
     614:	str	ip, [sp]
     618:	str	lr, [sp, #4]
     61c:	str	r4, [sp, #8]
     620:	mov	r2, r1
     624:	ldr	r1, [pc, #220]	; 708 <coda_cdf_cursor_goto_array_element_by_index+0xfc>
     628:	ldr	r3, [r1]
     62c:	cmp	r3, #0
     630:	beq	688 <coda_cdf_cursor_goto_array_element_by_index+0x7c>
     634:	ldr	r3, [r0, #4]
     638:	lsl	r1, r3, #4
     63c:	add	r3, r0, r1
     640:	sub	lr, r3, #4096	; 0x1000
     644:	ldr	r1, [lr, #4088]	; 0xff8
     648:	ldr	r1, [r1, #4]
     64c:	ldr	r3, [r1, #44]	; 0x2c
     650:	cmp	r2, #0
     654:	blt	668 <coda_cdf_cursor_goto_array_element_by_index+0x5c>
     658:	cmp	r2, r3
     65c:	movge	r1, #1
     660:	movlt	r1, #0
     664:	b	66c <coda_cdf_cursor_goto_array_element_by_index+0x60>
     668:	mov	r1, #1
     66c:	cmp	r1, #0
     670:	beq	688 <coda_cdf_cursor_goto_array_element_by_index+0x7c>
     674:	mvn	r0, #106	; 0x6a
     678:	ldr	r1, [pc, #132]	; 704 <coda_cdf_cursor_goto_array_element_by_index+0xf8>
     67c:	bl	0 <coda_set_error>
     680:	mvn	r0, #0
     684:	b	6f4 <coda_cdf_cursor_goto_array_element_by_index+0xe8>
     688:	ldr	r3, [r0, #4]
     68c:	lsl	ip, r3, #4
     690:	add	r1, r0, ip
     694:	sub	lr, r1, #4096	; 0x1000
     698:	ldr	ip, [lr, #4088]	; 0xff8
     69c:	ldr	r4, [ip, #16]
     6a0:	ldr	ip, [r0, #4]
     6a4:	add	r1, ip, #1
     6a8:	str	r1, [r0, #4]
     6ac:	ldr	r3, [r0, #4]
     6b0:	lsl	r1, r3, #4
     6b4:	add	r3, r0, r1
     6b8:	sub	lr, r3, #4096	; 0x1000
     6bc:	str	r4, [lr, #4088]	; 0xff8
     6c0:	ldr	ip, [r0, #4]
     6c4:	lsl	r1, ip, #4
     6c8:	add	ip, r0, r1
     6cc:	sub	lr, ip, #4096	; 0x1000
     6d0:	str	r2, [lr, #4092]	; 0xffc
     6d4:	ldr	r2, [r0, #4]
     6d8:	lsl	r3, r2, #4
     6dc:	add	r3, r0, r3
     6e0:	mvn	r1, #0
     6e4:	mvn	r0, #0
     6e8:	str	r0, [r3]
     6ec:	str	r1, [r3, #4]
     6f0:	mov	r0, #0
     6f4:	ldr	r4, [sp, #8]
     6f8:	ldr	lr, [sp, #4]
     6fc:	add	sp, sp, #16
     700:	bx	lr
	...

0000070c <coda_cdf_cursor_goto_next_array_element>:
     70c:	mov	ip, sp
     710:	sub	sp, sp, #8
     714:	str	ip, [sp]
     718:	str	lr, [sp, #4]
     71c:	ldr	r1, [pc, #180]	; 7d8 <coda_cdf_cursor_goto_next_array_element+0xcc>
     720:	ldr	r1, [r1]
     724:	cmp	r1, #0
     728:	beq	798 <coda_cdf_cursor_goto_next_array_element+0x8c>
     72c:	ldr	r3, [r0, #4]
     730:	lsl	r2, r3, #4
     734:	add	r1, r0, r2
     738:	sub	lr, r1, #4096	; 0x1000
     73c:	ldr	r3, [lr, #4092]	; 0xffc
     740:	add	r2, r3, #1
     744:	ldr	r1, [r0, #4]
     748:	lsl	r1, r1, #4
     74c:	add	r3, r0, r1
     750:	sub	lr, r3, #4096	; 0x1000
     754:	ldr	ip, [lr, #4072]	; 0xfe8
     758:	ldr	ip, [ip, #4]
     75c:	ldr	r3, [ip, #44]	; 0x2c
     760:	cmp	r2, #0
     764:	blt	778 <coda_cdf_cursor_goto_next_array_element+0x6c>
     768:	cmp	r2, r3
     76c:	movge	r1, #1
     770:	movlt	r1, #0
     774:	b	77c <coda_cdf_cursor_goto_next_array_element+0x70>
     778:	mov	r1, #1
     77c:	cmp	r1, #0
     780:	beq	798 <coda_cdf_cursor_goto_next_array_element+0x8c>
     784:	mvn	r0, #106	; 0x6a
     788:	ldr	r1, [pc, #68]	; 7d4 <coda_cdf_cursor_goto_next_array_element+0xc8>
     78c:	bl	0 <coda_set_error>
     790:	mvn	r0, #0
     794:	b	7c8 <coda_cdf_cursor_goto_next_array_element+0xbc>
     798:	ldr	r1, [r0, #4]
     79c:	lsl	r2, r1, #4
     7a0:	add	r2, r0, r2
     7a4:	ldr	r1, [r0, #4]
     7a8:	lsl	r3, r1, #4
     7ac:	add	ip, r0, r3
     7b0:	sub	lr, ip, #4096	; 0x1000
     7b4:	ldr	r1, [lr, #4092]	; 0xffc
     7b8:	add	r3, r1, #1
     7bc:	sub	lr, r2, #4096	; 0x1000
     7c0:	str	r3, [lr, #4092]	; 0xffc
     7c4:	mov	r0, #0
     7c8:	ldr	lr, [sp, #4]
     7cc:	add	sp, sp, #8
     7d0:	bx	lr
	...

000007dc <coda_cdf_cursor_goto_attributes>:
     7dc:	mov	ip, sp
     7e0:	sub	sp, sp, #16
     7e4:	str	ip, [sp]
     7e8:	str	lr, [sp, #4]
     7ec:	str	r4, [sp, #8]
     7f0:	mov	r4, r0
     7f4:	ldr	r1, [r4, #4]
     7f8:	lsl	r3, r1, #4
     7fc:	add	r2, r4, r3
     800:	sub	lr, r2, #4096	; 0x1000
     804:	ldr	r1, [lr, #4088]	; 0xff8
     808:	ldr	ip, [r4, #4]
     80c:	add	r2, ip, #1
     810:	str	r2, [r4, #4]
     814:	ldr	r0, [r1, #8]
     818:	cmp	r0, #2
     81c:	bne	834 <coda_cdf_cursor_goto_attributes+0x58>
     820:	ldr	ip, [r1, #12]
     824:	cmp	ip, #0
     828:	movne	r3, #1
     82c:	moveq	r3, #0
     830:	b	838 <coda_cdf_cursor_goto_attributes+0x5c>
     834:	mov	r3, #0
     838:	cmp	r3, #0
     83c:	bne	860 <coda_cdf_cursor_goto_attributes+0x84>
     840:	mov	r0, #5
     844:	bl	0 <coda_mem_empty_record>
     848:	ldr	r1, [r4, #4]
     84c:	lsl	r3, r1, #4
     850:	add	r1, r4, r3
     854:	sub	lr, r1, #4096	; 0x1000
     858:	str	r0, [lr, #4088]	; 0xff8
     85c:	b	878 <coda_cdf_cursor_goto_attributes+0x9c>
     860:	ldr	r2, [r4, #4]
     864:	lsl	r3, r2, #4
     868:	add	r0, r4, r3
     86c:	ldr	ip, [r1, #12]
     870:	sub	lr, r0, #4096	; 0x1000
     874:	str	ip, [lr, #4088]	; 0xff8
     878:	ldr	r1, [r4, #4]
     87c:	lsl	r0, r1, #4
     880:	add	r2, r4, r0
     884:	mvn	r1, #0
     888:	sub	lr, r2, #4096	; 0x1000
     88c:	str	r1, [lr, #4092]	; 0xffc
     890:	ldr	ip, [r4, #4]
     894:	lsl	r3, ip, #4
     898:	add	r2, r4, r3
     89c:	mvn	r1, #0
     8a0:	mvn	r0, #0
     8a4:	str	r0, [r2]
     8a8:	str	r1, [r2, #4]
     8ac:	mov	r0, #0
     8b0:	ldr	r4, [sp, #8]
     8b4:	ldr	lr, [sp, #4]
     8b8:	add	sp, sp, #16
     8bc:	bx	lr

000008c0 <coda_cdf_cursor_use_base_type_of_special_type>:
     8c0:	mov	ip, sp
     8c4:	sub	sp, sp, #16
     8c8:	str	ip, [sp]
     8cc:	str	lr, [sp, #4]
     8d0:	str	r4, [sp, #8]
     8d4:	ldr	r1, [r0, #4]
     8d8:	lsl	r1, r1, #4
     8dc:	add	r4, r0, r1
     8e0:	ldr	ip, [r0, #4]
     8e4:	lsl	r1, ip, #4
     8e8:	add	r2, r0, r1
     8ec:	sub	lr, r2, #4096	; 0x1000
     8f0:	ldr	r1, [lr, #4088]	; 0xff8
     8f4:	ldr	r3, [r1, #12]
     8f8:	sub	lr, r4, #4096	; 0x1000
     8fc:	str	r3, [lr, #4088]	; 0xff8
     900:	mov	r0, #0
     904:	ldr	r4, [sp, #8]
     908:	ldr	lr, [sp, #4]
     90c:	add	sp, sp, #16
     910:	bx	lr

00000914 <coda_cdf_cursor_get_num_elements>:
     914:	mov	ip, sp
     918:	sub	sp, sp, #8
     91c:	str	ip, [sp]
     920:	str	lr, [sp, #4]
     924:	ldr	r2, [r0, #4]
     928:	lsl	r2, r2, #4
     92c:	add	r2, r0, r2
     930:	sub	lr, r2, #4096	; 0x1000
     934:	ldr	r2, [lr, #4088]	; 0xff8
     938:	ldr	r2, [r2, #4]
     93c:	ldr	r2, [r2, #8]
     940:	cmp	r2, #1
     944:	bne	96c <coda_cdf_cursor_get_num_elements+0x58>
     948:	ldr	r2, [r0, #4]
     94c:	lsl	ip, r2, #4
     950:	add	r3, r0, ip
     954:	sub	lr, r3, #4096	; 0x1000
     958:	ldr	r0, [lr, #4088]	; 0xff8
     95c:	ldr	r3, [r0, #4]
     960:	ldr	r2, [r3, #44]	; 0x2c
     964:	str	r2, [r1]
     968:	b	974 <coda_cdf_cursor_get_num_elements+0x60>
     96c:	mov	r3, #1
     970:	str	r3, [r1]
     974:	mov	r0, #0
     978:	ldr	lr, [sp, #4]
     97c:	add	sp, sp, #8
     980:	bx	lr

00000984 <coda_cdf_cursor_get_string_length>:
     984:	mov	ip, sp
     988:	sub	sp, sp, #8
     98c:	str	ip, [sp]
     990:	str	lr, [sp, #4]
     994:	ldr	r2, [r0, #4]
     998:	lsl	ip, r2, #4
     99c:	add	r0, r0, ip
     9a0:	sub	lr, r0, #4096	; 0x1000
     9a4:	ldr	r0, [lr, #4088]	; 0xff8
     9a8:	ldr	r0, [r0, #4]
     9ac:	bl	0 <coda_type_get_string_length>
     9b0:	ldr	lr, [sp, #4]
     9b4:	add	sp, sp, #8
     9b8:	bx	lr

000009bc <coda_cdf_cursor_get_array_dim>:
     9bc:	mov	ip, sp
     9c0:	sub	sp, sp, #8
     9c4:	str	ip, [sp]
     9c8:	str	lr, [sp, #4]
     9cc:	ldr	r3, [r0, #4]
     9d0:	lsl	ip, r3, #4
     9d4:	add	r3, r0, ip
     9d8:	sub	lr, r3, #4096	; 0x1000
     9dc:	ldr	r3, [lr, #4088]	; 0xff8
     9e0:	ldr	r0, [r3, #4]
     9e4:	bl	0 <coda_type_get_array_dim>
     9e8:	ldr	lr, [sp, #4]
     9ec:	add	sp, sp, #8
     9f0:	bx	lr

000009f4 <read_array>:
     9f4:	mov	ip, sp
     9f8:	sub	sp, sp, #56	; 0x38
     9fc:	str	ip, [sp, #12]
     a00:	str	lr, [sp, #16]
     a04:	str	r4, [sp, #24]
     a08:	str	r5, [sp, #28]
     a0c:	str	r6, [sp, #32]
     a10:	str	r7, [sp, #36]	; 0x24
     a14:	str	r8, [sp, #40]	; 0x28
     a18:	str	r9, [sp, #44]	; 0x2c
     a1c:	str	fp, [sp, #48]	; 0x30
     a20:	mov	r6, r1
     a24:	mov	r8, r0
     a28:	ldr	ip, [r8, #4]
     a2c:	lsl	r2, ip, #4
     a30:	add	r3, r8, r2
     a34:	sub	lr, r3, #4096	; 0x1000
     a38:	ldr	r7, [lr, #4088]	; 0xff8
     a3c:	ldr	r1, [r7, #24]
     a40:	ldr	r0, [r7, #28]
     a44:	mul	r9, r1, r0
     a48:	ldr	r2, [r7, #8]
     a4c:	cmp	r2, #2
     a50:	beq	a68 <read_array+0x74>
     a54:	ldr	r0, [pc, #496]	; c4c <read_array+0x258>
     a58:	ldr	r1, [pc, #504]	; c58 <read_array+0x264>
     a5c:	mov	r2, #215	; 0xd7
     a60:	ldr	r3, [pc, #488]	; c50 <read_array+0x25c>
     a64:	bl	0 <__assert_fail>
     a68:	ldr	r1, [r7, #16]
     a6c:	cmp	r1, #0
     a70:	beq	a84 <read_array+0x90>
     a74:	ldr	r3, [r7, #16]
     a78:	ldr	r0, [r3, #4]
     a7c:	ldr	r4, [r0, #8]
     a80:	b	a8c <read_array+0x98>
     a84:	ldr	ip, [r7, #4]
     a88:	ldr	r4, [ip, #8]
     a8c:	mov	r5, #0
     a90:	ldr	r0, [r7, #20]
     a94:	cmp	r5, r0
     a98:	bge	b3c <read_array+0x148>
     a9c:	ldr	r0, [r7, #36]	; 0x24
     aa0:	add	r1, r0, r5, lsl #3
     aa4:	ldr	r0, [r1, #4]
     aa8:	cmp	r0, #0
     aac:	bge	ac4 <read_array+0xd0>
     ab0:	mvn	r0, #199	; 0xc7
     ab4:	ldr	r1, [pc, #408]	; c54 <read_array+0x260>
     ab8:	bl	0 <coda_set_error>
     abc:	mvn	r0, #0
     ac0:	b	c20 <read_array+0x22c>
     ac4:	ldr	r1, [r7, #40]	; 0x28
     ac8:	cmp	r1, #0
     acc:	bne	b14 <read_array+0x120>
     ad0:	ldr	r3, [r8]
     ad4:	ldr	r0, [r3, #52]	; 0x34
     ad8:	ldr	ip, [r7, #36]	; 0x24
     adc:	add	r3, ip, r5, lsl #3
     ae0:	ldr	r2, [r3]
     ae4:	ldr	r3, [r3, #4]
     ae8:	asr	ip, r9, #31
     aec:	mov	r1, r9
     af0:	mla	fp, r5, r9, r6
     af4:	str	fp, [sp, #8]
     af8:	str	ip, [sp, #4]
     afc:	str	r1, [sp]
     b00:	bl	0 <read_bytes>
     b04:	cmp	r0, #0
     b08:	beq	b34 <read_array+0x140>
     b0c:	mvn	r0, #0
     b10:	b	c20 <read_array+0x22c>
     b14:	mla	r0, r5, r9, r6
     b18:	ldr	ip, [r7, #40]	; 0x28
     b1c:	ldr	r3, [r7, #36]	; 0x24
     b20:	add	r2, r3, r5, lsl #3
     b24:	ldr	r3, [r2]
     b28:	add	r1, ip, r3
     b2c:	mov	r2, r9
     b30:	bl	0 <memcpy>
     b34:	add	r5, r5, #1
     b38:	b	a90 <read_array+0x9c>
     b3c:	cmp	r4, #4
     b40:	beq	c1c <read_array+0x228>
     b44:	mov	ip, #1
     b48:	ldr	r2, [r8]
     b4c:	ldr	r1, [r2, #68]	; 0x44
     b50:	cmp	r1, ip
     b54:	beq	c1c <read_array+0x228>
     b58:	ldr	r0, [r7, #28]
     b5c:	cmp	r0, #4
     b60:	bcs	b9c <read_array+0x1a8>
     b64:	cmp	r0, #1
     b68:	beq	c1c <read_array+0x228>
     b6c:	cmp	r0, #2
     b70:	bne	bd4 <read_array+0x1e0>
     b74:	mov	r4, #0
     b78:	ldr	r3, [r7, #20]
     b7c:	ldr	r1, [r7, #24]
     b80:	mul	ip, r3, r1
     b84:	cmp	r4, ip
     b88:	bge	c1c <read_array+0x228>
     b8c:	add	r0, r6, r4, lsl #1
     b90:	bl	224 <swap2>
     b94:	add	r4, r4, #1
     b98:	b	b78 <read_array+0x184>
     b9c:	cmp	r0, #4
     ba0:	beq	bf4 <read_array+0x200>
     ba4:	cmp	r0, #8
     ba8:	bne	bd4 <read_array+0x1e0>
     bac:	mov	r4, #0
     bb0:	ldr	r1, [r7, #20]
     bb4:	ldr	r3, [r7, #24]
     bb8:	mul	r3, r1, r3
     bbc:	cmp	r4, r3
     bc0:	bge	c1c <read_array+0x228>
     bc4:	add	r0, r6, r4, lsl #3
     bc8:	bl	310 <swap8>
     bcc:	add	r4, r4, #1
     bd0:	b	bb0 <read_array+0x1bc>
     bd4:	ldr	r0, [pc, #108]	; c48 <read_array+0x254>
     bd8:	ldr	r1, [pc, #120]	; c58 <read_array+0x264>
     bdc:	movw	r2, #278	; 0x116
     be0:	ldr	r3, [pc, #104]	; c50 <read_array+0x25c>
     be4:	bl	0 <__assert_fail>
     be8:	mov	r0, #1
     bec:	bl	0 <exit>
     bf0:	b	c1c <read_array+0x228>
     bf4:	mov	r4, #0
     bf8:	ldr	r0, [r7, #20]
     bfc:	ldr	ip, [r7, #24]
     c00:	mul	ip, r0, ip
     c04:	cmp	r4, ip
     c08:	bge	c1c <read_array+0x228>
     c0c:	add	r0, r6, r4, lsl #2
     c10:	bl	27c <swap4>
     c14:	add	r4, r4, #1
     c18:	b	bf8 <read_array+0x204>
     c1c:	mov	r0, #0
     c20:	ldr	r4, [sp, #24]
     c24:	ldr	r5, [sp, #28]
     c28:	ldr	r6, [sp, #32]
     c2c:	ldr	r7, [sp, #36]	; 0x24
     c30:	ldr	r8, [sp, #40]	; 0x28
     c34:	ldr	r9, [sp, #44]	; 0x2c
     c38:	ldr	fp, [sp, #48]	; 0x30
     c3c:	ldr	lr, [sp, #16]
     c40:	add	sp, sp, #56	; 0x38
     c44:	bx	lr
     c48:	.word	0x0000017b
     c4c:	.word	0x0000002e
     c50:	.word	0x0000025f
     c54:	.word	0x0000014d
     c58:	.word	0x000001f5

00000c5c <read_partial_array>:
     c5c:	mov	ip, sp
     c60:	sub	sp, sp, #80	; 0x50
     c64:	str	ip, [sp, #12]
     c68:	str	lr, [sp, #16]
     c6c:	str	r4, [sp, #48]	; 0x30
     c70:	str	r5, [sp, #52]	; 0x34
     c74:	str	r6, [sp, #56]	; 0x38
     c78:	str	r7, [sp, #60]	; 0x3c
     c7c:	str	r8, [sp, #64]	; 0x40
     c80:	str	r9, [sp, #68]	; 0x44
     c84:	str	sl, [sp, #72]	; 0x48
     c88:	str	fp, [sp, #76]	; 0x4c
     c8c:	mov	r8, r3
     c90:	mov	r9, r2
     c94:	mov	fp, r1
     c98:	str	r0, [sp, #28]
     c9c:	ldr	ip, [sp, #28]
     ca0:	ldr	r2, [ip, #4]
     ca4:	lsl	r0, r2, #4
     ca8:	add	r3, ip, r0
     cac:	sub	lr, r3, #4096	; 0x1000
     cb0:	ldr	sl, [lr, #4088]	; 0xff8
     cb4:	ldr	r2, [sl, #24]
     cb8:	ldr	r0, [sl, #28]
     cbc:	mul	ip, r2, r0
     cc0:	str	ip, [sp, #40]	; 0x28
     cc4:	ldr	r3, [sl, #8]
     cc8:	cmp	r3, #2
     ccc:	beq	ce4 <read_partial_array+0x88>
     cd0:	ldr	r0, [pc, #704]	; f98 <read_partial_array+0x33c>
     cd4:	ldr	r1, [pc, #708]	; fa0 <read_partial_array+0x344>
     cd8:	mov	r2, #296	; 0x128
     cdc:	ldr	r3, [pc, #684]	; f90 <read_partial_array+0x334>
     ce0:	bl	0 <__assert_fail>
     ce4:	ldr	ip, [sl, #16]
     ce8:	cmp	ip, #0
     cec:	beq	d04 <read_partial_array+0xa8>
     cf0:	ldr	ip, [sl, #16]
     cf4:	ldr	r3, [ip, #4]
     cf8:	ldr	r2, [r3, #8]
     cfc:	str	r2, [sp, #36]	; 0x24
     d00:	b	d10 <read_partial_array+0xb4>
     d04:	ldr	r2, [sl, #4]
     d08:	ldr	r1, [r2, #8]
     d0c:	str	r1, [sp, #36]	; 0x24
     d10:	ldr	r1, [sl, #24]
     d14:	mov	r0, fp
     d18:	bl	0 <__aeabi_idiv>
     d1c:	mov	r6, r0
     d20:	add	r0, fp, r9
     d24:	ldr	r1, [sl, #24]
     d28:	bl	0 <__aeabi_idiv>
     d2c:	str	r0, [sp, #44]	; 0x2c
     d30:	mov	r1, #0
     d34:	mov	r7, #0
     d38:	str	r1, [sp, #32]
     d3c:	ldr	r0, [sp, #44]	; 0x2c
     d40:	cmp	r6, r0
     d44:	bgt	e9c <read_partial_array+0x240>
     d48:	mov	r2, #0
     d4c:	mov	r1, #0
     d50:	ldr	r4, [sp, #40]	; 0x28
     d54:	asr	r5, r4, #31
     d58:	ldr	r3, [sl, #36]	; 0x24
     d5c:	add	r0, r3, r6, lsl #3
     d60:	ldr	r3, [r0, #4]
     d64:	cmp	r3, #0
     d68:	bge	d80 <read_partial_array+0x124>
     d6c:	mvn	r0, #199	; 0xc7
     d70:	ldr	r1, [pc, #548]	; f9c <read_partial_array+0x340>
     d74:	bl	0 <coda_set_error>
     d78:	mvn	r0, #0
     d7c:	b	f64 <read_partial_array+0x308>
     d80:	add	ip, fp, r9
     d84:	add	r3, r6, #1
     d88:	ldr	r0, [sl, #24]
     d8c:	mul	r3, r3, r0
     d90:	cmp	ip, r3
     d94:	bge	db4 <read_partial_array+0x158>
     d98:	add	r3, fp, r9
     d9c:	ldr	ip, [sl, #24]
     da0:	mul	ip, r6, ip
     da4:	sub	ip, r3, ip
     da8:	ldr	r3, [sl, #28]
     dac:	mul	r4, ip, r3
     db0:	asr	r5, r4, #31
     db4:	ldr	r0, [sl, #24]
     db8:	mul	r3, r6, r0
     dbc:	cmp	fp, r3
     dc0:	ble	de4 <read_partial_array+0x188>
     dc4:	ldr	r1, [sl, #24]
     dc8:	mul	r0, r6, r1
     dcc:	sub	r3, fp, r0
     dd0:	ldr	r0, [sl, #28]
     dd4:	mul	r1, r3, r0
     dd8:	asr	r2, r1, #31
     ddc:	subs	r4, r4, r1
     de0:	sbc	r5, r5, r2
     de4:	ldr	r3, [sl, #40]	; 0x28
     de8:	cmp	r3, #0
     dec:	bne	e48 <read_partial_array+0x1ec>
     df0:	ldr	r3, [sp, #28]
     df4:	ldr	ip, [r3]
     df8:	ldr	r3, [ip, #52]	; 0x34
     dfc:	ldr	ip, [sl, #36]	; 0x24
     e00:	add	ip, ip, r6, lsl #3
     e04:	ldr	r0, [ip]
     e08:	ldr	ip, [ip, #4]
     e0c:	adds	lr, r0, r1
     e10:	adc	r0, ip, r2
     e14:	mov	r2, lr
     e18:	add	r1, r8, r7
     e1c:	str	r1, [sp, #8]
     e20:	str	r5, [sp, #4]
     e24:	str	r4, [sp]
     e28:	mov	ip, r0
     e2c:	mov	r0, r3
     e30:	mov	r3, ip
     e34:	bl	0 <read_bytes>
     e38:	cmp	r0, #0
     e3c:	beq	e84 <read_partial_array+0x228>
     e40:	mvn	r0, #0
     e44:	b	f64 <read_partial_array+0x308>
     e48:	add	ip, r8, r7
     e4c:	str	ip, [sp, #24]
     e50:	ldr	ip, [sl, #40]	; 0x28
     e54:	ldr	r3, [sl, #36]	; 0x24
     e58:	add	r0, r3, r6, lsl #3
     e5c:	ldr	r3, [r0]
     e60:	ldr	r0, [r0, #4]
     e64:	adds	lr, r3, r1
     e68:	adc	r1, r0, r2
     e6c:	mov	r0, lr
     e70:	add	r2, ip, r0
     e74:	mov	r1, r2
     e78:	mov	r2, r4
     e7c:	ldr	r0, [sp, #24]
     e80:	bl	0 <memcpy>
     e84:	ldr	r3, [sp, #32]
     e88:	adds	r7, r7, r4
     e8c:	adc	r2, r3, r5
     e90:	str	r2, [sp, #32]
     e94:	add	r6, r6, #1
     e98:	b	d3c <read_partial_array+0xe0>
     e9c:	ldr	r3, [sp, #36]	; 0x24
     ea0:	cmp	r3, #4
     ea4:	beq	f60 <read_partial_array+0x304>
     ea8:	mov	r1, #1
     eac:	ldr	r0, [sp, #28]
     eb0:	ldr	r0, [r0]
     eb4:	ldr	r2, [r0, #68]	; 0x44
     eb8:	cmp	r2, r1
     ebc:	beq	f60 <read_partial_array+0x304>
     ec0:	ldr	ip, [sl, #28]
     ec4:	cmp	ip, #4
     ec8:	bcs	ef8 <read_partial_array+0x29c>
     ecc:	cmp	ip, #1
     ed0:	beq	f60 <read_partial_array+0x304>
     ed4:	cmp	ip, #2
     ed8:	bne	f24 <read_partial_array+0x2c8>
     edc:	mov	r4, #0
     ee0:	cmp	r4, r9
     ee4:	bge	f60 <read_partial_array+0x304>
     ee8:	add	r0, r8, r4, lsl #1
     eec:	bl	224 <swap2>
     ef0:	add	r4, r4, #1
     ef4:	b	ee0 <read_partial_array+0x284>
     ef8:	cmp	ip, #4
     efc:	beq	f44 <read_partial_array+0x2e8>
     f00:	cmp	ip, #8
     f04:	bne	f24 <read_partial_array+0x2c8>
     f08:	mov	r4, #0
     f0c:	cmp	r4, r9
     f10:	bge	f60 <read_partial_array+0x304>
     f14:	add	r0, r8, r4, lsl #3
     f18:	bl	310 <swap8>
     f1c:	add	r4, r4, #1
     f20:	b	f0c <read_partial_array+0x2b0>
     f24:	ldr	r0, [pc, #104]	; f94 <read_partial_array+0x338>
     f28:	ldr	r1, [pc, #112]	; fa0 <read_partial_array+0x344>
     f2c:	movw	r2, #379	; 0x17b
     f30:	ldr	r3, [pc, #88]	; f90 <read_partial_array+0x334>
     f34:	bl	0 <__assert_fail>
     f38:	mov	r0, #1
     f3c:	bl	0 <exit>
     f40:	b	f60 <read_partial_array+0x304>
     f44:	mov	r4, #0
     f48:	cmp	r4, r9
     f4c:	bge	f60 <read_partial_array+0x304>
     f50:	add	r0, r8, r4, lsl #2
     f54:	bl	27c <swap4>
     f58:	add	r4, r4, #1
     f5c:	b	f48 <read_partial_array+0x2ec>
     f60:	mov	r0, #0
     f64:	ldr	r4, [sp, #48]	; 0x30
     f68:	ldr	r5, [sp, #52]	; 0x34
     f6c:	ldr	r6, [sp, #56]	; 0x38
     f70:	ldr	r7, [sp, #60]	; 0x3c
     f74:	ldr	r8, [sp, #64]	; 0x40
     f78:	ldr	r9, [sp, #68]	; 0x44
     f7c:	ldr	sl, [sp, #72]	; 0x48
     f80:	ldr	fp, [sp, #76]	; 0x4c
     f84:	ldr	lr, [sp, #16]
     f88:	add	sp, sp, #80	; 0x50
     f8c:	bx	lr
     f90:	.word	0x0000026a
     f94:	.word	0x0000017b
     f98:	.word	0x0000002e
     f9c:	.word	0x0000014d
     fa0:	.word	0x000001f5

00000fa4 <read_basic_type>:
     fa4:	mov	ip, sp
     fa8:	sub	sp, sp, #48	; 0x30
     fac:	str	ip, [sp, #12]
     fb0:	str	lr, [sp, #16]
     fb4:	str	r4, [sp, #24]
     fb8:	str	r5, [sp, #28]
     fbc:	str	r6, [sp, #32]
     fc0:	str	r7, [sp, #36]	; 0x24
     fc4:	str	r8, [sp, #40]	; 0x28
     fc8:	str	r9, [sp, #44]	; 0x2c
     fcc:	mov	r5, r2
     fd0:	mov	r7, r1
     fd4:	mov	r6, r0
     fd8:	ldr	r3, [r6, #4]
     fdc:	lsl	r0, r3, #4
     fe0:	add	r0, r6, r0
     fe4:	sub	lr, r0, #4096	; 0x1000
     fe8:	ldr	r8, [lr, #4088]	; 0xff8
     fec:	mov	r4, #0
     ff0:	ldr	r2, [r6, #4]
     ff4:	lsl	r2, r2, #4
     ff8:	add	r0, r6, r2
     ffc:	sub	lr, r0, #4096	; 0x1000
    1000:	ldr	r1, [lr, #4088]	; 0xff8
    1004:	ldr	r0, [r1, #8]
    1008:	cmp	r0, #0
    100c:	bne	1038 <read_basic_type+0x94>
    1010:	ldr	r0, [r6, #4]
    1014:	lsl	r0, r0, #4
    1018:	add	ip, r6, r0
    101c:	sub	lr, ip, #4096	; 0x1000
    1020:	ldr	r8, [lr, #4072]	; 0xfe8
    1024:	ldr	r1, [r6, #4]
    1028:	lsl	r0, r1, #4
    102c:	add	r2, r6, r0
    1030:	sub	lr, r2, #4096	; 0x1000
    1034:	ldr	r4, [lr, #4092]	; 0xffc
    1038:	ldr	r1, [r8, #8]
    103c:	cmp	r1, #2
    1040:	beq	1058 <read_basic_type+0xb4>
    1044:	ldr	r0, [pc, #448]	; 120c <read_basic_type+0x268>
    1048:	ldr	r1, [pc, #456]	; 1218 <read_basic_type+0x274>
    104c:	movw	r2, #403	; 0x193
    1050:	ldr	r3, [pc, #444]	; 1214 <read_basic_type+0x270>
    1054:	bl	0 <__assert_fail>
    1058:	ldr	ip, [r8, #16]
    105c:	cmp	ip, #0
    1060:	beq	1074 <read_basic_type+0xd0>
    1064:	ldr	ip, [r8, #16]
    1068:	ldr	r3, [ip, #4]
    106c:	ldr	r9, [r3, #8]
    1070:	b	107c <read_basic_type+0xd8>
    1074:	ldr	r2, [r8, #4]
    1078:	ldr	r9, [r2, #8]
    107c:	ldr	r1, [r8, #24]
    1080:	mov	r0, r4
    1084:	bl	0 <__aeabi_idiv>
    1088:	ldr	r1, [r8, #24]
    108c:	mul	r2, r0, r1
    1090:	sub	r2, r4, r2
    1094:	ldr	ip, [r8, #28]
    1098:	ldr	r1, [r8, #36]	; 0x24
    109c:	add	r1, r1, r0, lsl #3
    10a0:	ldr	r1, [r1, #4]
    10a4:	cmp	r1, #0
    10a8:	bge	10c0 <read_basic_type+0x11c>
    10ac:	mvn	r0, #199	; 0xc7
    10b0:	ldr	r1, [pc, #344]	; 1210 <read_basic_type+0x26c>
    10b4:	bl	0 <coda_set_error>
    10b8:	mvn	r0, #0
    10bc:	b	11e4 <read_basic_type+0x240>
    10c0:	ldr	r3, [r8, #36]	; 0x24
    10c4:	add	r3, r3, r0, lsl #3
    10c8:	ldr	r1, [r3]
    10cc:	ldr	r4, [r3, #4]
    10d0:	ldr	r0, [r8, #28]
    10d4:	mul	r2, r2, r0
    10d8:	asr	r3, r2, #31
    10dc:	adds	r2, r1, r2
    10e0:	adc	r3, r4, r3
    10e4:	cmp	r5, #0
    10e8:	bge	10f4 <read_basic_type+0x150>
    10ec:	mov	r0, #0
    10f0:	b	1100 <read_basic_type+0x15c>
    10f4:	cmp	r5, ip
    10f8:	movlt	r0, #1
    10fc:	movge	r0, #0
    1100:	cmp	r0, #0
    1104:	beq	110c <read_basic_type+0x168>
    1108:	mov	ip, r5
    110c:	ldr	r0, [r8, #40]	; 0x28
    1110:	cmp	r0, #0
    1114:	bne	1144 <read_basic_type+0x1a0>
    1118:	ldr	r0, [r6]
    111c:	ldr	r0, [r0, #52]	; 0x34
    1120:	asr	r1, ip, #31
    1124:	str	r7, [sp, #8]
    1128:	str	r1, [sp, #4]
    112c:	str	ip, [sp]
    1130:	bl	0 <read_bytes>
    1134:	cmp	r0, #0
    1138:	beq	1158 <read_basic_type+0x1b4>
    113c:	mvn	r0, #0
    1140:	b	11e4 <read_basic_type+0x240>
    1144:	ldr	r1, [r8, #40]	; 0x28
    1148:	add	r1, r1, r2
    114c:	mov	r2, ip
    1150:	mov	r0, r7
    1154:	bl	0 <memcpy>
    1158:	cmp	r9, #4
    115c:	beq	11e0 <read_basic_type+0x23c>
    1160:	mov	r0, #0
    1164:	ldr	ip, [r6]
    1168:	ldr	ip, [ip, #68]	; 0x44
    116c:	cmp	ip, r0
    1170:	bne	11e0 <read_basic_type+0x23c>
    1174:	ldr	r2, [r8, #28]
    1178:	cmp	r2, #4
    117c:	bcs	119c <read_basic_type+0x1f8>
    1180:	cmp	r2, #1
    1184:	beq	11e0 <read_basic_type+0x23c>
    1188:	cmp	r2, #2
    118c:	bne	11b8 <read_basic_type+0x214>
    1190:	mov	r0, r7
    1194:	bl	224 <swap2>
    1198:	b	11e0 <read_basic_type+0x23c>
    119c:	cmp	r2, #4
    11a0:	beq	11d8 <read_basic_type+0x234>
    11a4:	cmp	r2, #8
    11a8:	bne	11b8 <read_basic_type+0x214>
    11ac:	mov	r0, r7
    11b0:	bl	310 <swap8>
    11b4:	b	11e0 <read_basic_type+0x23c>
    11b8:	ldr	r0, [pc, #72]	; 1208 <read_basic_type+0x264>
    11bc:	ldr	r1, [pc, #84]	; 1218 <read_basic_type+0x274>
    11c0:	movw	r2, #462	; 0x1ce
    11c4:	ldr	r3, [pc, #72]	; 1214 <read_basic_type+0x270>
    11c8:	bl	0 <__assert_fail>
    11cc:	mov	r0, #1
    11d0:	bl	0 <exit>
    11d4:	b	11e0 <read_basic_type+0x23c>
    11d8:	mov	r0, r7
    11dc:	bl	27c <swap4>
    11e0:	mov	r0, #0
    11e4:	ldr	r4, [sp, #24]
    11e8:	ldr	r5, [sp, #28]
    11ec:	ldr	r6, [sp, #32]
    11f0:	ldr	r7, [sp, #36]	; 0x24
    11f4:	ldr	r8, [sp, #40]	; 0x28
    11f8:	ldr	r9, [sp, #44]	; 0x2c
    11fc:	ldr	lr, [sp, #16]
    1200:	add	sp, sp, #48	; 0x30
    1204:	bx	lr
    1208:	.word	0x0000017b
    120c:	.word	0x0000002e
    1210:	.word	0x0000014d
    1214:	.word	0x0000027d
    1218:	.word	0x000001f5

0000121c <coda_cdf_cursor_read_int8>:
    121c:	mov	ip, sp
    1220:	sub	sp, sp, #8
    1224:	str	ip, [sp]
    1228:	str	lr, [sp, #4]
    122c:	mvn	r2, #0
    1230:	bl	fa4 <read_basic_type>
    1234:	ldr	lr, [sp, #4]
    1238:	add	sp, sp, #8
    123c:	bx	lr

00001240 <coda_cdf_cursor_read_uint8>:
    1240:	mov	ip, sp
    1244:	sub	sp, sp, #8
    1248:	str	ip, [sp]
    124c:	str	lr, [sp, #4]
    1250:	mvn	r2, #0
    1254:	bl	fa4 <read_basic_type>
    1258:	ldr	lr, [sp, #4]
    125c:	add	sp, sp, #8
    1260:	bx	lr

00001264 <coda_cdf_cursor_read_int16>:
    1264:	mov	ip, sp
    1268:	sub	sp, sp, #8
    126c:	str	ip, [sp]
    1270:	str	lr, [sp, #4]
    1274:	mvn	r2, #0
    1278:	bl	fa4 <read_basic_type>
    127c:	ldr	lr, [sp, #4]
    1280:	add	sp, sp, #8
    1284:	bx	lr

00001288 <coda_cdf_cursor_read_uint16>:
    1288:	mov	ip, sp
    128c:	sub	sp, sp, #8
    1290:	str	ip, [sp]
    1294:	str	lr, [sp, #4]
    1298:	mvn	r2, #0
    129c:	bl	fa4 <read_basic_type>
    12a0:	ldr	lr, [sp, #4]
    12a4:	add	sp, sp, #8
    12a8:	bx	lr

000012ac <coda_cdf_cursor_read_int32>:
    12ac:	mov	ip, sp
    12b0:	sub	sp, sp, #8
    12b4:	str	ip, [sp]
    12b8:	str	lr, [sp, #4]
    12bc:	mvn	r2, #0
    12c0:	bl	fa4 <read_basic_type>
    12c4:	ldr	lr, [sp, #4]
    12c8:	add	sp, sp, #8
    12cc:	bx	lr

000012d0 <coda_cdf_cursor_read_uint32>:
    12d0:	mov	ip, sp
    12d4:	sub	sp, sp, #8
    12d8:	str	ip, [sp]
    12dc:	str	lr, [sp, #4]
    12e0:	mvn	r2, #0
    12e4:	bl	fa4 <read_basic_type>
    12e8:	ldr	lr, [sp, #4]
    12ec:	add	sp, sp, #8
    12f0:	bx	lr

000012f4 <coda_cdf_cursor_read_int64>:
    12f4:	mov	ip, sp
    12f8:	sub	sp, sp, #8
    12fc:	str	ip, [sp]
    1300:	str	lr, [sp, #4]
    1304:	mvn	r2, #0
    1308:	bl	fa4 <read_basic_type>
    130c:	ldr	lr, [sp, #4]
    1310:	add	sp, sp, #8
    1314:	bx	lr

00001318 <coda_cdf_cursor_read_float>:
    1318:	mov	ip, sp
    131c:	sub	sp, sp, #8
    1320:	str	ip, [sp]
    1324:	str	lr, [sp, #4]
    1328:	mvn	r2, #0
    132c:	bl	fa4 <read_basic_type>
    1330:	ldr	lr, [sp, #4]
    1334:	add	sp, sp, #8
    1338:	bx	lr

0000133c <coda_cdf_cursor_read_double>:
    133c:	mov	ip, sp
    1340:	sub	sp, sp, #8
    1344:	str	ip, [sp]
    1348:	str	lr, [sp, #4]
    134c:	mvn	r2, #0
    1350:	bl	fa4 <read_basic_type>
    1354:	ldr	lr, [sp, #4]
    1358:	add	sp, sp, #8
    135c:	bx	lr

00001360 <coda_cdf_cursor_read_char>:
    1360:	mov	ip, sp
    1364:	sub	sp, sp, #8
    1368:	str	ip, [sp]
    136c:	str	lr, [sp, #4]
    1370:	mvn	r2, #0
    1374:	bl	fa4 <read_basic_type>
    1378:	ldr	lr, [sp, #4]
    137c:	add	sp, sp, #8
    1380:	bx	lr

00001384 <coda_cdf_cursor_read_string>:
    1384:	mov	ip, sp
    1388:	sub	sp, sp, #16
    138c:	str	ip, [sp]
    1390:	str	lr, [sp, #4]
    1394:	str	r4, [sp, #8]
    1398:	str	r5, [sp, #12]
    139c:	mov	r4, r2
    13a0:	mov	r5, r1
    13a4:	mov	r2, r4
    13a8:	mov	r1, r5
    13ac:	bl	fa4 <read_basic_type>
    13b0:	cmp	r0, #0
    13b4:	beq	13c0 <coda_cdf_cursor_read_string+0x3c>
    13b8:	mvn	r0, #0
    13bc:	b	13d4 <coda_cdf_cursor_read_string+0x50>
    13c0:	add	r3, r5, r4
    13c4:	mov	r1, #0
    13c8:	sub	lr, r3, #4096	; 0x1000
    13cc:	strb	r1, [lr, #4095]	; 0xfff
    13d0:	mov	r0, #0
    13d4:	ldr	r4, [sp, #8]
    13d8:	ldr	r5, [sp, #12]
    13dc:	ldr	lr, [sp, #4]
    13e0:	add	sp, sp, #16
    13e4:	bx	lr

000013e8 <coda_cdf_cursor_read_int8_array>:
    13e8:	mov	ip, sp
    13ec:	sub	sp, sp, #8
    13f0:	str	ip, [sp]
    13f4:	str	lr, [sp, #4]
    13f8:	bl	9f4 <read_array>
    13fc:	ldr	lr, [sp, #4]
    1400:	add	sp, sp, #8
    1404:	bx	lr

00001408 <coda_cdf_cursor_read_uint8_array>:
    1408:	mov	ip, sp
    140c:	sub	sp, sp, #8
    1410:	str	ip, [sp]
    1414:	str	lr, [sp, #4]
    1418:	bl	9f4 <read_array>
    141c:	ldr	lr, [sp, #4]
    1420:	add	sp, sp, #8
    1424:	bx	lr

00001428 <coda_cdf_cursor_read_int16_array>:
    1428:	mov	ip, sp
    142c:	sub	sp, sp, #8
    1430:	str	ip, [sp]
    1434:	str	lr, [sp, #4]
    1438:	bl	9f4 <read_array>
    143c:	ldr	lr, [sp, #4]
    1440:	add	sp, sp, #8
    1444:	bx	lr

00001448 <coda_cdf_cursor_read_uint16_array>:
    1448:	mov	ip, sp
    144c:	sub	sp, sp, #8
    1450:	str	ip, [sp]
    1454:	str	lr, [sp, #4]
    1458:	bl	9f4 <read_array>
    145c:	ldr	lr, [sp, #4]
    1460:	add	sp, sp, #8
    1464:	bx	lr

00001468 <coda_cdf_cursor_read_int32_array>:
    1468:	mov	ip, sp
    146c:	sub	sp, sp, #8
    1470:	str	ip, [sp]
    1474:	str	lr, [sp, #4]
    1478:	bl	9f4 <read_array>
    147c:	ldr	lr, [sp, #4]
    1480:	add	sp, sp, #8
    1484:	bx	lr

00001488 <coda_cdf_cursor_read_uint32_array>:
    1488:	mov	ip, sp
    148c:	sub	sp, sp, #8
    1490:	str	ip, [sp]
    1494:	str	lr, [sp, #4]
    1498:	bl	9f4 <read_array>
    149c:	ldr	lr, [sp, #4]
    14a0:	add	sp, sp, #8
    14a4:	bx	lr

000014a8 <coda_cdf_cursor_read_int64_array>:
    14a8:	mov	ip, sp
    14ac:	sub	sp, sp, #8
    14b0:	str	ip, [sp]
    14b4:	str	lr, [sp, #4]
    14b8:	bl	9f4 <read_array>
    14bc:	ldr	lr, [sp, #4]
    14c0:	add	sp, sp, #8
    14c4:	bx	lr

000014c8 <coda_cdf_cursor_read_float_array>:
    14c8:	mov	ip, sp
    14cc:	sub	sp, sp, #8
    14d0:	str	ip, [sp]
    14d4:	str	lr, [sp, #4]
    14d8:	bl	9f4 <read_array>
    14dc:	ldr	lr, [sp, #4]
    14e0:	add	sp, sp, #8
    14e4:	bx	lr

000014e8 <coda_cdf_cursor_read_double_array>:
    14e8:	mov	ip, sp
    14ec:	sub	sp, sp, #8
    14f0:	str	ip, [sp]
    14f4:	str	lr, [sp, #4]
    14f8:	bl	9f4 <read_array>
    14fc:	ldr	lr, [sp, #4]
    1500:	add	sp, sp, #8
    1504:	bx	lr

00001508 <coda_cdf_cursor_read_char_array>:
    1508:	mov	ip, sp
    150c:	sub	sp, sp, #8
    1510:	str	ip, [sp]
    1514:	str	lr, [sp, #4]
    1518:	bl	9f4 <read_array>
    151c:	ldr	lr, [sp, #4]
    1520:	add	sp, sp, #8
    1524:	bx	lr

00001528 <coda_cdf_cursor_read_int8_partial_array>:
    1528:	mov	ip, sp
    152c:	sub	sp, sp, #8
    1530:	str	ip, [sp]
    1534:	str	lr, [sp, #4]
    1538:	bl	c5c <read_partial_array>
    153c:	ldr	lr, [sp, #4]
    1540:	add	sp, sp, #8
    1544:	bx	lr

00001548 <coda_cdf_cursor_read_uint8_partial_array>:
    1548:	mov	ip, sp
    154c:	sub	sp, sp, #8
    1550:	str	ip, [sp]
    1554:	str	lr, [sp, #4]
    1558:	bl	c5c <read_partial_array>
    155c:	ldr	lr, [sp, #4]
    1560:	add	sp, sp, #8
    1564:	bx	lr

00001568 <coda_cdf_cursor_read_int16_partial_array>:
    1568:	mov	ip, sp
    156c:	sub	sp, sp, #8
    1570:	str	ip, [sp]
    1574:	str	lr, [sp, #4]
    1578:	bl	c5c <read_partial_array>
    157c:	ldr	lr, [sp, #4]
    1580:	add	sp, sp, #8
    1584:	bx	lr

00001588 <coda_cdf_cursor_read_uint16_partial_array>:
    1588:	mov	ip, sp
    158c:	sub	sp, sp, #8
    1590:	str	ip, [sp]
    1594:	str	lr, [sp, #4]
    1598:	bl	c5c <read_partial_array>
    159c:	ldr	lr, [sp, #4]
    15a0:	add	sp, sp, #8
    15a4:	bx	lr

000015a8 <coda_cdf_cursor_read_int32_partial_array>:
    15a8:	mov	ip, sp
    15ac:	sub	sp, sp, #8
    15b0:	str	ip, [sp]
    15b4:	str	lr, [sp, #4]
    15b8:	bl	c5c <read_partial_array>
    15bc:	ldr	lr, [sp, #4]
    15c0:	add	sp, sp, #8
    15c4:	bx	lr

000015c8 <coda_cdf_cursor_read_uint32_partial_array>:
    15c8:	mov	ip, sp
    15cc:	sub	sp, sp, #8
    15d0:	str	ip, [sp]
    15d4:	str	lr, [sp, #4]
    15d8:	bl	c5c <read_partial_array>
    15dc:	ldr	lr, [sp, #4]
    15e0:	add	sp, sp, #8
    15e4:	bx	lr

000015e8 <coda_cdf_cursor_read_int64_partial_array>:
    15e8:	mov	ip, sp
    15ec:	sub	sp, sp, #8
    15f0:	str	ip, [sp]
    15f4:	str	lr, [sp, #4]
    15f8:	bl	c5c <read_partial_array>
    15fc:	ldr	lr, [sp, #4]
    1600:	add	sp, sp, #8
    1604:	bx	lr

00001608 <coda_cdf_cursor_read_float_partial_array>:
    1608:	mov	ip, sp
    160c:	sub	sp, sp, #8
    1610:	str	ip, [sp]
    1614:	str	lr, [sp, #4]
    1618:	bl	c5c <read_partial_array>
    161c:	ldr	lr, [sp, #4]
    1620:	add	sp, sp, #8
    1624:	bx	lr

00001628 <coda_cdf_cursor_read_double_partial_array>:
    1628:	mov	ip, sp
    162c:	sub	sp, sp, #8
    1630:	str	ip, [sp]
    1634:	str	lr, [sp, #4]
    1638:	bl	c5c <read_partial_array>
    163c:	ldr	lr, [sp, #4]
    1640:	add	sp, sp, #8
    1644:	bx	lr

00001648 <coda_cdf_cursor_read_char_partial_array>:
    1648:	mov	ip, sp
    164c:	sub	sp, sp, #8
    1650:	str	ip, [sp]
    1654:	str	lr, [sp, #4]
    1658:	bl	c5c <read_partial_array>
    165c:	ldr	lr, [sp, #4]
    1660:	add	sp, sp, #8
    1664:	bx	lr
