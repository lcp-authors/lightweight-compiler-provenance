
../compcert-repos/prog2/CMakeFiles/0.9.dir/Aula00_Conceitos_base/09.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <ler_albuns>:
   0:	mov	r3, #0
   4:	strd	r4, [sp, #-24]!	; 0xffffffe8
   8:	mov	r4, r0
   c:	strd	r6, [sp, #8]
  10:	movw	r7, #0
  14:	movt	r7, #0
  18:	str	r8, [sp, #16]
  1c:	mov	r6, r3
  20:	mov	r8, #32
  24:	str	lr, [sp, #20]
  28:	sub	sp, sp, #24
  2c:	str	r3, [sp, #8]
  30:	str	r3, [sp, #12]
  34:	str	r3, [sp, #16]
  38:	str	r3, [sp, #19]
  3c:	b	68 <ler_albuns+0x68>
  40:	cmp	r6, #100	; 0x64
  44:	beq	a0 <ler_albuns+0xa0>
  48:	bl	0 <strlen>
  4c:	mov	r3, r0
  50:	add	r0, r0, #1
  54:	add	r1, sp, #8
  58:	add	r0, r5, r0
  5c:	strb	r8, [r5, r3]
  60:	add	r6, r6, #1
  64:	bl	0 <strcpy>
  68:	add	ip, r4, #204	; 0xcc
  6c:	add	lr, r4, #200	; 0xc8
  70:	add	r3, r4, #100	; 0x64
  74:	mov	r1, r4
  78:	add	r2, sp, #8
  7c:	mov	r0, r7
  80:	str	lr, [sp]
  84:	str	ip, [sp, #4]
  88:	mov	r5, r4
  8c:	add	r4, r4, #208	; 0xd0
  90:	bl	0 <__isoc99_scanf>
  94:	cmp	r0, #5
  98:	mov	r0, r5
  9c:	beq	40 <ler_albuns+0x40>
  a0:	mov	r0, r6
  a4:	add	sp, sp, #24
  a8:	ldrd	r4, [sp]
  ac:	ldrd	r6, [sp, #8]
  b0:	ldr	r8, [sp, #16]
  b4:	add	sp, sp, #20
  b8:	pop	{pc}		; (ldr pc, [sp], #4)

000000bc <lista_albuns>:
  bc:	strd	r4, [sp, #-16]!
  c0:	subs	r5, r1, #0
  c4:	str	r6, [sp, #8]
  c8:	str	lr, [sp, #12]
  cc:	sub	sp, sp, #8
  d0:	ble	110 <lista_albuns+0x54>
  d4:	mov	r1, #208	; 0xd0
  d8:	movw	r6, #0
  dc:	movt	r6, #0
  e0:	mov	r4, r0
  e4:	mla	r5, r1, r5, r0
  e8:	add	r2, r4, #100	; 0x64
  ec:	mov	r1, r4
  f0:	ldr	r3, [r4, #200]	; 0xc8
  f4:	mov	r0, r6
  f8:	add	r4, r4, #208	; 0xd0
  fc:	ldr	ip, [r4, #-4]
 100:	str	ip, [sp]
 104:	bl	0 <printf>
 108:	cmp	r4, r5
 10c:	bne	e8 <lista_albuns+0x2c>
 110:	add	sp, sp, #8
 114:	ldrd	r4, [sp]
 118:	ldr	r6, [sp, #8]
 11c:	add	sp, sp, #12
 120:	pop	{pc}		; (ldr pc, [sp], #4)

00000124 <albuns_artista>:
 124:	strd	r4, [sp, #-24]!	; 0xffffffe8
 128:	strd	r6, [sp, #8]
 12c:	mov	r6, r2
 130:	str	r8, [sp, #16]
 134:	subs	r8, r3, #0
 138:	str	lr, [sp, #20]
 13c:	beq	1a0 <albuns_artista+0x7c>
 140:	cmp	r1, #0
 144:	movle	r7, #0
 148:	ble	188 <albuns_artista+0x64>
 14c:	mov	r5, #208	; 0xd0
 150:	mov	r4, r0
 154:	mov	r7, #0
 158:	mla	r5, r5, r1, r0
 15c:	mov	r1, r4
 160:	mov	r0, r6
 164:	bl	0 <strcmp>
 168:	cmp	r0, #0
 16c:	bne	17c <albuns_artista+0x58>
 170:	ldr	r3, [r4, #204]	; 0xcc
 174:	cmp	r8, r3
 178:	addeq	r7, r7, #1
 17c:	add	r4, r4, #208	; 0xd0
 180:	cmp	r5, r4
 184:	bne	15c <albuns_artista+0x38>
 188:	mov	r0, r7
 18c:	ldrd	r4, [sp]
 190:	ldrd	r6, [sp, #8]
 194:	ldr	r8, [sp, #16]
 198:	add	sp, sp, #20
 19c:	pop	{pc}		; (ldr pc, [sp], #4)
 1a0:	cmp	r1, #0
 1a4:	ble	1dc <albuns_artista+0xb8>
 1a8:	mov	r5, #208	; 0xd0
 1ac:	mov	r4, r0
 1b0:	mov	r7, r8
 1b4:	mla	r5, r5, r1, r0
 1b8:	mov	r1, r4
 1bc:	mov	r0, r6
 1c0:	bl	0 <strcmp>
 1c4:	cmp	r0, #0
 1c8:	add	r4, r4, #208	; 0xd0
 1cc:	addeq	r7, r7, #1
 1d0:	cmp	r5, r4
 1d4:	bne	1b8 <albuns_artista+0x94>
 1d8:	b	188 <albuns_artista+0x64>
 1dc:	mov	r7, r8
 1e0:	b	188 <albuns_artista+0x64>

Disassembly of section .text.startup:

00000000 <main>:
   0:	strd	r4, [sp, #-24]!	; 0xffffffe8
   4:	strd	r6, [sp, #8]
   8:	str	r8, [sp, #16]
   c:	str	lr, [sp, #20]
  10:	sub	sp, sp, #20736	; 0x5100
  14:	sub	sp, sp, #64	; 0x40
  18:	mov	r0, sp
  1c:	bl	0 <main>
  20:	mov	r4, r0
  24:	mov	r1, r0
  28:	mov	r0, sp
  2c:	bl	bc <main+0xbc>
  30:	mov	r1, r4
  34:	movw	r0, #0
  38:	movt	r0, #0
  3c:	bl	0 <printf>
  40:	cmp	r4, #0
  44:	ble	e4 <main+0xe4>
  48:	mov	r7, #208	; 0xd0
  4c:	mov	r5, sp
  50:	movw	r8, #0
  54:	movt	r8, #0
  58:	mla	r7, r7, r4, r5
  5c:	mov	r6, #0
  60:	mov	r1, r5
  64:	mov	r0, r8
  68:	bl	0 <strcmp>
  6c:	cmp	r0, #0
  70:	bne	80 <main+0x80>
  74:	ldr	r3, [r5, #204]	; 0xcc
  78:	cmp	r3, #1
  7c:	addeq	r6, r6, #1
  80:	add	r5, r5, #208	; 0xd0
  84:	cmp	r5, r7
  88:	bne	60 <main+0x60>
  8c:	mov	r1, r6
  90:	movw	r0, #0
  94:	movt	r0, #0
  98:	bl	0 <printf>
  9c:	mov	r1, r4
  a0:	mov	r3, #0
  a4:	mov	r0, sp
  a8:	movw	r2, #0
  ac:	movt	r2, #0
  b0:	bl	124 <albuns_artista>
  b4:	mov	r1, r0
  b8:	movw	r0, #0
  bc:	movt	r0, #0
  c0:	bl	0 <printf>
  c4:	mov	r0, #0
  c8:	add	sp, sp, #20736	; 0x5100
  cc:	add	sp, sp, #64	; 0x40
  d0:	ldrd	r4, [sp]
  d4:	ldrd	r6, [sp, #8]
  d8:	ldr	r8, [sp, #16]
  dc:	add	sp, sp, #20
  e0:	pop	{pc}		; (ldr pc, [sp], #4)
  e4:	mov	r6, #0
  e8:	b	8c <main+0x8c>
