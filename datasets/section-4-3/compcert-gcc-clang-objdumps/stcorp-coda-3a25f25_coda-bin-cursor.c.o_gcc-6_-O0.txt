
../compcert-repos/stcorp-coda-3a25f25/CMakeFiles/coda_static.dir/libcoda/coda-bin-cursor.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <read_bytes>:
       0:	push	{fp, lr}
       4:	add	fp, sp, #4
       8:	sub	sp, sp, #96	; 0x60
       c:	str	r0, [fp, #-80]	; 0xffffffb0
      10:	strd	r2, [fp, #-92]	; 0xffffffa4
      14:	ldr	r3, [fp, #-80]	; 0xffffffb0
      18:	ldr	r3, [r3, #48]	; 0x30
      1c:	cmp	r3, #0
      20:	beq	fc <read_bytes+0xfc>
      24:	ldrd	r0, [fp, #-92]	; 0xffffffa4
      28:	ldrd	r2, [fp, #4]
      2c:	adds	r2, r2, r0
      30:	adc	r3, r3, r1
      34:	ldr	r1, [fp, #-80]	; 0xffffffb0
      38:	ldrd	r0, [r1, #40]	; 0x28
      3c:	cmp	r3, r1
      40:	cmpeq	r2, r0
      44:	bls	d8 <read_bytes+0xd8>
      48:	ldr	r3, [fp, #-80]	; 0xffffffb0
      4c:	ldr	r3, [r3, #16]
      50:	cmp	r3, #0
      54:	beq	68 <read_bytes+0x68>
      58:	ldr	r3, [fp, #-80]	; 0xffffffb0
      5c:	ldr	r3, [r3, #16]
      60:	cmp	r3, #1
      64:	bne	7c <read_bytes+0x7c>
      68:	ldr	r1, [pc, #348]	; 1cc <read_bytes+0x1cc>
      6c:	mvn	r0, #300	; 0x12c
      70:	bl	0 <coda_set_error>
      74:	mvn	r3, #0
      78:	b	1c0 <read_bytes+0x1c0>
      7c:	sub	r3, fp, #28
      80:	mov	r2, r3
      84:	ldrd	r0, [fp, #4]
      88:	bl	0 <coda_str64>
      8c:	sub	r3, fp, #52	; 0x34
      90:	mov	r2, r3
      94:	ldrd	r0, [fp, #-92]	; 0xffffffa4
      98:	bl	0 <coda_str64>
      9c:	ldr	r3, [fp, #-80]	; 0xffffffb0
      a0:	ldrd	r0, [r3, #40]	; 0x28
      a4:	sub	r3, fp, #76	; 0x4c
      a8:	mov	r2, r3
      ac:	bl	0 <coda_str64>
      b0:	sub	r1, fp, #52	; 0x34
      b4:	sub	r2, fp, #28
      b8:	sub	r3, fp, #76	; 0x4c
      bc:	str	r3, [sp]
      c0:	mov	r3, r1
      c4:	ldr	r1, [pc, #260]	; 1d0 <read_bytes+0x1d0>
      c8:	mvn	r0, #300	; 0x12c
      cc:	bl	0 <coda_set_error>
      d0:	mvn	r3, #0
      d4:	b	1c0 <read_bytes+0x1c0>
      d8:	ldr	r3, [fp, #-80]	; 0xffffffb0
      dc:	ldr	r2, [r3, #48]	; 0x30
      e0:	ldr	r3, [fp, #-92]	; 0xffffffa4
      e4:	add	r3, r2, r3
      e8:	ldr	r2, [fp, #4]
      ec:	mov	r1, r3
      f0:	ldr	r0, [fp, #12]
      f4:	bl	0 <memcpy>
      f8:	b	1bc <read_bytes+0x1bc>
      fc:	ldr	r3, [fp, #-80]	; 0xffffffb0
     100:	ldr	r3, [r3, #16]
     104:	cmp	r3, #0
     108:	beq	130 <read_bytes+0x130>
     10c:	ldr	r3, [fp, #-80]	; 0xffffffb0
     110:	ldr	r3, [r3, #16]
     114:	cmp	r3, #1
     118:	beq	130 <read_bytes+0x130>
     11c:	ldr	r3, [pc, #176]	; 1d4 <read_bytes+0x1d4>
     120:	mov	r2, #83	; 0x53
     124:	ldr	r1, [pc, #172]	; 1d8 <read_bytes+0x1d8>
     128:	ldr	r0, [pc, #172]	; 1dc <read_bytes+0x1dc>
     12c:	bl	0 <__assert_fail>
     130:	ldrd	r0, [fp, #-92]	; 0xffffffa4
     134:	ldrd	r2, [fp, #4]
     138:	adds	r2, r2, r0
     13c:	adc	r3, r3, r1
     140:	ldr	r1, [fp, #-80]	; 0xffffffb0
     144:	ldrd	r0, [r1, #8]
     148:	cmp	r3, r1
     14c:	cmpeq	r2, r0
     150:	bls	168 <read_bytes+0x168>
     154:	ldr	r1, [pc, #112]	; 1cc <read_bytes+0x1cc>
     158:	mvn	r0, #300	; 0x12c
     15c:	bl	0 <coda_set_error>
     160:	mvn	r3, #0
     164:	b	1c0 <read_bytes+0x1c0>
     168:	ldr	r3, [fp, #-80]	; 0xffffffb0
     16c:	ldr	r0, [r3, #56]	; 0x38
     170:	ldr	r2, [fp, #4]
     174:	ldr	r3, [fp, #-92]	; 0xffffffa4
     178:	ldr	r1, [fp, #12]
     17c:	bl	0 <pread>
     180:	mov	r3, r0
     184:	cmp	r3, #0
     188:	bge	1bc <read_bytes+0x1bc>
     18c:	bl	0 <__errno_location>
     190:	mov	r3, r0
     194:	ldr	r3, [r3]
     198:	mov	r0, r3
     19c:	bl	0 <strerror>
     1a0:	mov	r3, r0
     1a4:	mov	r2, r3
     1a8:	ldr	r1, [pc, #48]	; 1e0 <read_bytes+0x1e0>
     1ac:	mvn	r0, #21
     1b0:	bl	0 <coda_set_error>
     1b4:	mvn	r3, #0
     1b8:	b	1c0 <read_bytes+0x1c0>
     1bc:	mov	r3, #0
     1c0:	mov	r0, r3
     1c4:	sub	sp, fp, #4
     1c8:	pop	{fp, pc}
     1cc:	.word	0x00000000
     1d0:	.word	0x0000002c
     1d4:	.word	0x000006a4
     1d8:	.word	0x00000068
     1dc:	.word	0x000000b8
     1e0:	.word	0x00000108

000001e4 <read_bits>:
     1e4:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
     1e8:	add	fp, sp, #28
     1ec:	sub	sp, sp, #104	; 0x68
     1f0:	str	r0, [fp, #-80]	; 0xffffffb0
     1f4:	strd	r2, [fp, #-92]	; 0xffffffa4
     1f8:	ldrd	r0, [fp, #-92]	; 0xffffffa4
     1fc:	mov	r2, #7
     200:	mov	r3, #0
     204:	and	r0, r0, r2
     208:	and	r1, r1, r3
     20c:	ldrd	r2, [fp, #4]
     210:	adds	r2, r2, r0
     214:	adc	r3, r3, r1
     218:	strd	r2, [fp, #-44]	; 0xffffffd4
     21c:	ldr	r3, [fp, #-44]	; 0xffffffd4
     220:	rsb	r3, r3, #0
     224:	and	r3, r3, #7
     228:	str	r3, [fp, #-48]	; 0xffffffd0
     22c:	ldrd	r2, [fp, #-44]	; 0xffffffd4
     230:	cmp	r2, #9
     234:	sbcs	r3, r3, #0
     238:	bge	318 <read_bits+0x134>
     23c:	ldrd	r2, [fp, #-92]	; 0xffffffa4
     240:	lsr	r1, r2, #3
     244:	str	r1, [fp, #-100]	; 0xffffff9c
     248:	ldr	r1, [fp, #-100]	; 0xffffff9c
     24c:	orr	r1, r1, r3, lsl #29
     250:	str	r1, [fp, #-100]	; 0xffffff9c
     254:	asr	r3, r3, #3
     258:	str	r3, [fp, #-96]	; 0xffffffa0
     25c:	ldr	r3, [fp, #12]
     260:	str	r3, [sp, #8]
     264:	mov	r2, #1
     268:	mov	r3, #0
     26c:	strd	r2, [sp]
     270:	ldrd	r2, [fp, #-100]	; 0xffffff9c
     274:	ldr	r0, [fp, #-80]	; 0xffffffb0
     278:	bl	0 <read_bytes>
     27c:	mov	r3, r0
     280:	cmp	r3, #0
     284:	beq	290 <read_bits+0xac>
     288:	mvn	r3, #0
     28c:	b	798 <read_bits+0x5b4>
     290:	ldr	r3, [fp, #-48]	; 0xffffffd0
     294:	cmp	r3, #0
     298:	beq	2bc <read_bits+0xd8>
     29c:	ldr	r3, [fp, #12]
     2a0:	ldrb	r3, [r3]
     2a4:	mov	r2, r3
     2a8:	ldr	r3, [fp, #-48]	; 0xffffffd0
     2ac:	asr	r3, r2, r3
     2b0:	uxtb	r2, r3
     2b4:	ldr	r3, [fp, #12]
     2b8:	strb	r2, [r3]
     2bc:	ldrd	r2, [fp, #4]
     2c0:	mov	r0, #7
     2c4:	mov	r1, #0
     2c8:	and	r2, r2, r0
     2cc:	and	r3, r3, r1
     2d0:	orrs	r3, r2, r3
     2d4:	beq	794 <read_bits+0x5b0>
     2d8:	ldr	r3, [fp, #12]
     2dc:	ldrb	r3, [r3]
     2e0:	sxtb	r2, r3
     2e4:	ldr	r3, [fp, #4]
     2e8:	mov	r1, #1
     2ec:	lsl	r3, r1, r3
     2f0:	uxtb	r3, r3
     2f4:	sub	r3, r3, #1
     2f8:	uxtb	r3, r3
     2fc:	sxtb	r3, r3
     300:	and	r3, r3, r2
     304:	sxtb	r3, r3
     308:	uxtb	r2, r3
     30c:	ldr	r3, [fp, #12]
     310:	strb	r2, [r3]
     314:	b	794 <read_bits+0x5b0>
     318:	ldr	r3, [fp, #-48]	; 0xffffffd0
     31c:	cmp	r3, #0
     320:	bne	488 <read_bits+0x2a4>
     324:	ldrd	r2, [fp, #4]
     328:	mov	r0, #7
     32c:	mov	r1, #0
     330:	and	r2, r2, r0
     334:	and	r3, r3, r1
     338:	orrs	r3, r2, r3
     33c:	beq	41c <read_bits+0x238>
     340:	ldrd	r2, [fp, #-92]	; 0xffffffa4
     344:	lsr	r1, r2, #3
     348:	str	r1, [fp, #-108]	; 0xffffff94
     34c:	ldr	r1, [fp, #-108]	; 0xffffff94
     350:	orr	r1, r1, r3, lsl #29
     354:	str	r1, [fp, #-108]	; 0xffffff94
     358:	asr	r3, r3, #3
     35c:	str	r3, [fp, #-104]	; 0xffffff98
     360:	sub	r3, fp, #65	; 0x41
     364:	str	r3, [sp, #8]
     368:	mov	r2, #1
     36c:	mov	r3, #0
     370:	strd	r2, [sp]
     374:	ldrd	r2, [fp, #-108]	; 0xffffff94
     378:	ldr	r0, [fp, #-80]	; 0xffffffb0
     37c:	bl	0 <read_bytes>
     380:	mov	r3, r0
     384:	cmp	r3, #0
     388:	beq	394 <read_bits+0x1b0>
     38c:	mvn	r3, #0
     390:	b	798 <read_bits+0x5b4>
     394:	ldr	r3, [fp, #4]
     398:	and	r3, r3, #7
     39c:	str	r3, [fp, #-52]	; 0xffffffcc
     3a0:	mov	r2, #1
     3a4:	ldr	r3, [fp, #-52]	; 0xffffffcc
     3a8:	lsl	r3, r2, r3
     3ac:	uxtb	r3, r3
     3b0:	sub	r3, r3, #1
     3b4:	uxtb	r3, r3
     3b8:	sxtb	r2, r3
     3bc:	ldrb	r3, [fp, #-65]	; 0xffffffbf
     3c0:	sxtb	r3, r3
     3c4:	and	r3, r3, r2
     3c8:	sxtb	r3, r3
     3cc:	uxtb	r2, r3
     3d0:	ldr	r3, [fp, #12]
     3d4:	strb	r2, [r3]
     3d8:	ldr	r3, [fp, #12]
     3dc:	add	r3, r3, #1
     3e0:	str	r3, [fp, #12]
     3e4:	ldr	r3, [fp, #-52]	; 0xffffffcc
     3e8:	mov	r2, r3
     3ec:	mov	r3, #0
     3f0:	ldrd	r0, [fp, #-92]	; 0xffffffa4
     3f4:	adds	r2, r2, r0
     3f8:	adc	r3, r3, r1
     3fc:	strd	r2, [fp, #-92]	; 0xffffffa4
     400:	ldr	r3, [fp, #-52]	; 0xffffffcc
     404:	mov	r2, r3
     408:	mov	r3, #0
     40c:	ldrd	r0, [fp, #4]
     410:	subs	r2, r0, r2
     414:	sbc	r3, r1, r3
     418:	strd	r2, [fp, #4]
     41c:	ldrd	r2, [fp, #4]
     420:	cmp	r2, #1
     424:	sbcs	r3, r3, #0
     428:	blt	794 <read_bits+0x5b0>
     42c:	ldrd	r2, [fp, #-92]	; 0xffffffa4
     430:	lsr	r1, r2, #3
     434:	str	r1, [fp, #-116]	; 0xffffff8c
     438:	ldr	r1, [fp, #-116]	; 0xffffff8c
     43c:	orr	r1, r1, r3, lsl #29
     440:	str	r1, [fp, #-116]	; 0xffffff8c
     444:	asr	r3, r3, #3
     448:	str	r3, [fp, #-112]	; 0xffffff90
     44c:	ldrd	r2, [fp, #4]
     450:	lsr	r4, r2, #3
     454:	orr	r4, r4, r3, lsl #29
     458:	asr	r5, r3, #3
     45c:	ldr	r3, [fp, #12]
     460:	str	r3, [sp, #8]
     464:	strd	r4, [sp]
     468:	ldrd	r2, [fp, #-116]	; 0xffffff8c
     46c:	ldr	r0, [fp, #-80]	; 0xffffffb0
     470:	bl	0 <read_bytes>
     474:	mov	r3, r0
     478:	cmp	r3, #0
     47c:	beq	794 <read_bits+0x5b0>
     480:	mvn	r3, #0
     484:	b	798 <read_bits+0x5b4>
     488:	ldrd	r0, [fp, #4]
     48c:	mov	r2, #24
     490:	mov	r3, #0
     494:	bl	0 <__aeabi_ldivmod>
     498:	orrs	r3, r2, r3
     49c:	beq	784 <read_bits+0x5a0>
     4a0:	ldrd	r0, [fp, #4]
     4a4:	mov	r2, #24
     4a8:	mov	r3, #0
     4ac:	bl	0 <__aeabi_ldivmod>
     4b0:	mov	r3, r2
     4b4:	str	r3, [fp, #-56]	; 0xffffffc8
     4b8:	ldr	r3, [fp, #-92]	; 0xffffffa4
     4bc:	and	r2, r3, #7
     4c0:	ldr	r3, [fp, #-56]	; 0xffffffc8
     4c4:	add	r3, r2, r3
     4c8:	lsr	r3, r3, #3
     4cc:	ldrb	r2, [fp, #-92]	; 0xffffffa4
     4d0:	and	r2, r2, #7
     4d4:	uxtb	r1, r2
     4d8:	ldr	r2, [fp, #-56]	; 0xffffffc8
     4dc:	uxtb	r2, r2
     4e0:	add	r2, r1, r2
     4e4:	uxtb	r2, r2
     4e8:	and	r2, r2, #7
     4ec:	cmp	r2, #0
     4f0:	movne	r2, #1
     4f4:	moveq	r2, #0
     4f8:	uxtb	r2, r2
     4fc:	add	r3, r3, r2
     500:	str	r3, [fp, #-60]	; 0xffffffc4
     504:	ldr	r3, [fp, #-56]	; 0xffffffc8
     508:	lsr	r3, r3, #3
     50c:	ldr	r2, [fp, #-56]	; 0xffffffc8
     510:	uxtb	r2, r2
     514:	and	r2, r2, #7
     518:	cmp	r2, #0
     51c:	movne	r2, #1
     520:	moveq	r2, #0
     524:	uxtb	r2, r2
     528:	add	r3, r3, r2
     52c:	str	r3, [fp, #-64]	; 0xffffffc0
     530:	ldrd	r2, [fp, #-92]	; 0xffffffa4
     534:	lsr	r8, r2, #3
     538:	orr	r8, r8, r3, lsl #29
     53c:	asr	r9, r3, #3
     540:	ldr	r3, [fp, #-60]	; 0xffffffc4
     544:	mov	r2, r3
     548:	mov	r3, #0
     54c:	sub	r1, fp, #72	; 0x48
     550:	str	r1, [sp, #8]
     554:	strd	r2, [sp]
     558:	mov	r2, r8
     55c:	mov	r3, r9
     560:	ldr	r0, [fp, #-80]	; 0xffffffb0
     564:	bl	0 <read_bytes>
     568:	mov	r3, r0
     56c:	cmp	r3, #0
     570:	beq	57c <read_bits+0x398>
     574:	mvn	r3, #0
     578:	b	798 <read_bits+0x5b4>
     57c:	mov	r3, #0
     580:	str	r3, [fp, #-76]	; 0xffffffb4
     584:	mov	r3, #0
     588:	str	r3, [fp, #-32]	; 0xffffffe0
     58c:	b	5c0 <read_bits+0x3dc>
     590:	ldr	r3, [fp, #-32]	; 0xffffffe0
     594:	rsb	r3, r3, #3
     598:	sub	r1, fp, #72	; 0x48
     59c:	ldr	r2, [fp, #-32]	; 0xffffffe0
     5a0:	add	r2, r1, r2
     5a4:	ldrb	r2, [r2]
     5a8:	sub	r1, fp, #28
     5ac:	add	r3, r1, r3
     5b0:	strb	r2, [r3, #-48]	; 0xffffffd0
     5b4:	ldr	r3, [fp, #-32]	; 0xffffffe0
     5b8:	add	r3, r3, #1
     5bc:	str	r3, [fp, #-32]	; 0xffffffe0
     5c0:	ldr	r2, [fp, #-32]	; 0xffffffe0
     5c4:	ldr	r3, [fp, #-60]	; 0xffffffc4
     5c8:	cmp	r2, r3
     5cc:	bcc	590 <read_bits+0x3ac>
     5d0:	ldr	r1, [fp, #-76]	; 0xffffffb4
     5d4:	ldr	r2, [fp, #-60]	; 0xffffffc4
     5d8:	mov	r3, r2
     5dc:	lsl	r3, r3, #29
     5e0:	sub	r3, r3, r2
     5e4:	lsl	r3, r3, #3
     5e8:	mov	r2, r3
     5ec:	ldr	r3, [fp, #-48]	; 0xffffffd0
     5f0:	add	r3, r2, r3
     5f4:	add	r3, r3, #32
     5f8:	lsr	r3, r1, r3
     5fc:	mov	r1, #1
     600:	ldr	r2, [fp, #-56]	; 0xffffffc8
     604:	lsl	r2, r1, r2
     608:	sub	r2, r2, #1
     60c:	and	r3, r3, r2
     610:	str	r3, [fp, #-76]	; 0xffffffb4
     614:	mov	r3, #0
     618:	str	r3, [fp, #-32]	; 0xffffffe0
     61c:	b	658 <read_bits+0x474>
     620:	ldr	r2, [fp, #12]
     624:	ldr	r3, [fp, #-32]	; 0xffffffe0
     628:	add	r3, r2, r3
     62c:	ldr	r1, [fp, #-64]	; 0xffffffc0
     630:	ldr	r2, [fp, #-32]	; 0xffffffe0
     634:	sub	r2, r1, r2
     638:	sub	r2, r2, #1
     63c:	sub	r1, fp, #28
     640:	add	r2, r1, r2
     644:	ldrb	r2, [r2, #-48]	; 0xffffffd0
     648:	strb	r2, [r3]
     64c:	ldr	r3, [fp, #-32]	; 0xffffffe0
     650:	add	r3, r3, #1
     654:	str	r3, [fp, #-32]	; 0xffffffe0
     658:	ldr	r2, [fp, #-32]	; 0xffffffe0
     65c:	ldr	r3, [fp, #-64]	; 0xffffffc0
     660:	cmp	r2, r3
     664:	bcc	620 <read_bits+0x43c>
     668:	ldr	r2, [fp, #12]
     66c:	ldr	r3, [fp, #-64]	; 0xffffffc0
     670:	add	r3, r2, r3
     674:	str	r3, [fp, #12]
     678:	ldr	r3, [fp, #-56]	; 0xffffffc8
     67c:	mov	r2, r3
     680:	mov	r3, #0
     684:	ldrd	r0, [fp, #-92]	; 0xffffffa4
     688:	adds	r2, r2, r0
     68c:	adc	r3, r3, r1
     690:	strd	r2, [fp, #-92]	; 0xffffffa4
     694:	ldr	r3, [fp, #-56]	; 0xffffffc8
     698:	mov	r2, r3
     69c:	mov	r3, #0
     6a0:	ldrd	r0, [fp, #4]
     6a4:	subs	r2, r0, r2
     6a8:	sbc	r3, r1, r3
     6ac:	strd	r2, [fp, #4]
     6b0:	b	784 <read_bits+0x5a0>
     6b4:	ldrd	r2, [fp, #-92]	; 0xffffffa4
     6b8:	lsr	r6, r2, #3
     6bc:	orr	r6, r6, r3, lsl #29
     6c0:	asr	r7, r3, #3
     6c4:	sub	r3, fp, #72	; 0x48
     6c8:	str	r3, [sp, #8]
     6cc:	mov	r2, #4
     6d0:	mov	r3, #0
     6d4:	strd	r2, [sp]
     6d8:	mov	r2, r6
     6dc:	mov	r3, r7
     6e0:	ldr	r0, [fp, #-80]	; 0xffffffb0
     6e4:	bl	0 <read_bytes>
     6e8:	mov	r3, r0
     6ec:	cmp	r3, #0
     6f0:	beq	6fc <read_bits+0x518>
     6f4:	mvn	r3, #0
     6f8:	b	798 <read_bits+0x5b4>
     6fc:	ldrb	r3, [fp, #-69]	; 0xffffffbb
     700:	strb	r3, [fp, #-76]	; 0xffffffb4
     704:	ldrb	r3, [fp, #-70]	; 0xffffffba
     708:	strb	r3, [fp, #-75]	; 0xffffffb5
     70c:	ldrb	r3, [fp, #-71]	; 0xffffffb9
     710:	strb	r3, [fp, #-74]	; 0xffffffb6
     714:	ldrb	r3, [fp, #-72]	; 0xffffffb8
     718:	strb	r3, [fp, #-73]	; 0xffffffb7
     71c:	ldr	r2, [fp, #-76]	; 0xffffffb4
     720:	ldr	r3, [fp, #-48]	; 0xffffffd0
     724:	lsr	r3, r2, r3
     728:	str	r3, [fp, #-76]	; 0xffffffb4
     72c:	ldrb	r2, [fp, #-74]	; 0xffffffb6
     730:	ldr	r3, [fp, #12]
     734:	strb	r2, [r3]
     738:	ldr	r3, [fp, #12]
     73c:	add	r3, r3, #1
     740:	ldrb	r2, [fp, #-75]	; 0xffffffb5
     744:	strb	r2, [r3]
     748:	ldr	r3, [fp, #12]
     74c:	add	r3, r3, #2
     750:	ldrb	r2, [fp, #-76]	; 0xffffffb4
     754:	strb	r2, [r3]
     758:	ldr	r3, [fp, #12]
     75c:	add	r3, r3, #3
     760:	str	r3, [fp, #12]
     764:	ldrd	r2, [fp, #-92]	; 0xffffffa4
     768:	adds	r2, r2, #24
     76c:	adc	r3, r3, #0
     770:	strd	r2, [fp, #-92]	; 0xffffffa4
     774:	ldrd	r2, [fp, #4]
     778:	subs	r2, r2, #24
     77c:	sbc	r3, r3, #0
     780:	strd	r2, [fp, #4]
     784:	ldrd	r2, [fp, #4]
     788:	cmp	r2, #1
     78c:	sbcs	r3, r3, #0
     790:	bge	6b4 <read_bits+0x4d0>
     794:	mov	r3, #0
     798:	mov	r0, r3
     79c:	sub	sp, fp, #28
     7a0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}

000007a4 <read_array>:
     7a4:	push	{fp, lr}
     7a8:	add	fp, sp, #4
     7ac:	sub	sp, sp, #632	; 0x278
     7b0:	str	r0, [fp, #-624]	; 0xfffffd90
     7b4:	str	r1, [fp, #-628]	; 0xfffffd8c
     7b8:	str	r2, [fp, #-632]	; 0xfffffd88
     7bc:	str	r3, [fp, #-636]	; 0xfffffd84
     7c0:	sub	r2, fp, #580	; 0x244
     7c4:	sub	r3, fp, #584	; 0x248
     7c8:	mov	r1, r3
     7cc:	ldr	r0, [fp, #-624]	; 0xfffffd90
     7d0:	bl	0 <coda_cursor_get_array_dim>
     7d4:	mov	r3, r0
     7d8:	cmp	r3, #0
     7dc:	beq	7e8 <read_array+0x44>
     7e0:	mvn	r3, #0
     7e4:	b	b94 <read_array+0x3f0>
     7e8:	ldr	r2, [fp, #-624]	; 0xfffffd90
     7ec:	sub	r3, fp, #548	; 0x224
     7f0:	mov	r1, r2
     7f4:	mov	r2, #520	; 0x208
     7f8:	mov	r0, r3
     7fc:	bl	0 <memcpy>
     800:	ldr	r3, [fp, #-584]	; 0xfffffdb8
     804:	cmp	r3, #1
     808:	ble	818 <read_array+0x74>
     80c:	ldr	r3, [fp, #4]
     810:	cmp	r3, #1
     814:	beq	934 <read_array+0x190>
     818:	mov	r3, #1
     81c:	str	r3, [fp, #-8]
     820:	mov	r3, #0
     824:	str	r3, [fp, #-12]
     828:	b	858 <read_array+0xb4>
     82c:	ldr	r3, [fp, #-12]
     830:	lsl	r3, r3, #2
     834:	sub	r2, fp, #4
     838:	add	r3, r2, r3
     83c:	ldr	r2, [r3, #-576]	; 0xfffffdc0
     840:	ldr	r3, [fp, #-8]
     844:	mul	r3, r2, r3
     848:	str	r3, [fp, #-8]
     84c:	ldr	r3, [fp, #-12]
     850:	add	r3, r3, #1
     854:	str	r3, [fp, #-12]
     858:	ldr	r3, [fp, #-584]	; 0xfffffdb8
     85c:	ldr	r2, [fp, #-12]
     860:	cmp	r2, r3
     864:	blt	82c <read_array+0x88>
     868:	ldr	r3, [fp, #-8]
     86c:	cmp	r3, #0
     870:	ble	b90 <read_array+0x3ec>
     874:	sub	r3, fp, #548	; 0x224
     878:	mov	r1, #0
     87c:	mov	r0, r3
     880:	bl	0 <coda_cursor_goto_array_element_by_index>
     884:	mov	r3, r0
     888:	cmp	r3, #0
     88c:	beq	898 <read_array+0xf4>
     890:	mvn	r3, #0
     894:	b	b94 <read_array+0x3f0>
     898:	mov	r3, #0
     89c:	str	r3, [fp, #-12]
     8a0:	b	920 <read_array+0x17c>
     8a4:	ldr	r3, [fp, #-12]
     8a8:	ldr	r2, [fp, #-636]	; 0xfffffd84
     8ac:	mul	r3, r2, r3
     8b0:	mov	r2, r3
     8b4:	ldr	r3, [fp, #-632]	; 0xfffffd88
     8b8:	add	r1, r3, r2
     8bc:	sub	r2, fp, #548	; 0x224
     8c0:	ldr	r3, [fp, #-628]	; 0xfffffd8c
     8c4:	mov	r0, r2
     8c8:	blx	r3
     8cc:	mov	r3, r0
     8d0:	cmp	r3, #0
     8d4:	beq	8e0 <read_array+0x13c>
     8d8:	mvn	r3, #0
     8dc:	b	b94 <read_array+0x3f0>
     8e0:	ldr	r3, [fp, #-8]
     8e4:	sub	r2, r3, #1
     8e8:	ldr	r3, [fp, #-12]
     8ec:	cmp	r2, r3
     8f0:	ble	914 <read_array+0x170>
     8f4:	sub	r3, fp, #548	; 0x224
     8f8:	mov	r0, r3
     8fc:	bl	0 <coda_cursor_goto_next_array_element>
     900:	mov	r3, r0
     904:	cmp	r3, #0
     908:	beq	914 <read_array+0x170>
     90c:	mvn	r3, #0
     910:	b	b94 <read_array+0x3f0>
     914:	ldr	r3, [fp, #-12]
     918:	add	r3, r3, #1
     91c:	str	r3, [fp, #-12]
     920:	ldr	r2, [fp, #-12]
     924:	ldr	r3, [fp, #-8]
     928:	cmp	r2, r3
     92c:	blt	8a4 <read_array+0x100>
     930:	b	b90 <read_array+0x3ec>
     934:	mov	r3, #1
     938:	str	r3, [fp, #-620]	; 0xfffffd94
     93c:	mov	r3, #0
     940:	str	r3, [fp, #-12]
     944:	b	998 <read_array+0x1f4>
     948:	ldr	r3, [fp, #-12]
     94c:	add	r1, r3, #1
     950:	ldr	r3, [fp, #-12]
     954:	lsl	r3, r3, #2
     958:	sub	r2, fp, #4
     95c:	add	r3, r2, r3
     960:	ldr	r2, [r3, #-616]	; 0xfffffd98
     964:	ldr	r3, [fp, #-12]
     968:	lsl	r3, r3, #2
     96c:	sub	r0, fp, #4
     970:	add	r3, r0, r3
     974:	ldr	r3, [r3, #-576]	; 0xfffffdc0
     978:	mul	r2, r3, r2
     97c:	lsl	r3, r1, #2
     980:	sub	r1, fp, #4
     984:	add	r3, r1, r3
     988:	str	r2, [r3, #-616]	; 0xfffffd98
     98c:	ldr	r3, [fp, #-12]
     990:	add	r3, r3, #1
     994:	str	r3, [fp, #-12]
     998:	ldr	r3, [fp, #-584]	; 0xfffffdb8
     99c:	ldr	r2, [fp, #-12]
     9a0:	cmp	r2, r3
     9a4:	blt	948 <read_array+0x1a4>
     9a8:	ldr	r3, [fp, #-584]	; 0xfffffdb8
     9ac:	sub	r3, r3, #1
     9b0:	lsl	r3, r3, #2
     9b4:	sub	r2, fp, #4
     9b8:	add	r3, r2, r3
     9bc:	ldr	r3, [r3, #-616]	; 0xfffffd98
     9c0:	str	r3, [fp, #-24]	; 0xffffffe8
     9c4:	ldr	r3, [fp, #-584]	; 0xfffffdb8
     9c8:	lsl	r3, r3, #2
     9cc:	sub	r2, fp, #4
     9d0:	add	r3, r2, r3
     9d4:	ldr	r3, [r3, #-616]	; 0xfffffd98
     9d8:	str	r3, [fp, #-8]
     9dc:	ldr	r3, [fp, #-8]
     9e0:	cmp	r3, #0
     9e4:	ble	b90 <read_array+0x3ec>
     9e8:	mov	r3, #0
     9ec:	str	r3, [fp, #-16]
     9f0:	mov	r3, #0
     9f4:	str	r3, [fp, #-20]	; 0xffffffec
     9f8:	sub	r3, fp, #548	; 0x224
     9fc:	mov	r1, #0
     a00:	mov	r0, r3
     a04:	bl	0 <coda_cursor_goto_array_element_by_index>
     a08:	mov	r3, r0
     a0c:	cmp	r3, #0
     a10:	beq	a1c <read_array+0x278>
     a14:	mvn	r3, #0
     a18:	b	b94 <read_array+0x3f0>
     a1c:	ldr	r3, [fp, #-20]	; 0xffffffec
     a20:	ldr	r2, [fp, #-636]	; 0xfffffd84
     a24:	mul	r3, r2, r3
     a28:	mov	r2, r3
     a2c:	ldr	r3, [fp, #-632]	; 0xfffffd88
     a30:	add	r1, r3, r2
     a34:	sub	r2, fp, #548	; 0x224
     a38:	ldr	r3, [fp, #-628]	; 0xfffffd8c
     a3c:	mov	r0, r2
     a40:	blx	r3
     a44:	mov	r3, r0
     a48:	cmp	r3, #0
     a4c:	beq	a58 <read_array+0x2b4>
     a50:	mvn	r3, #0
     a54:	b	b94 <read_array+0x3f0>
     a58:	ldr	r3, [fp, #-16]
     a5c:	add	r3, r3, #1
     a60:	str	r3, [fp, #-16]
     a64:	ldr	r2, [fp, #-16]
     a68:	ldr	r3, [fp, #-8]
     a6c:	cmp	r2, r3
     a70:	bge	a94 <read_array+0x2f0>
     a74:	sub	r3, fp, #548	; 0x224
     a78:	mov	r0, r3
     a7c:	bl	0 <coda_cursor_goto_next_array_element>
     a80:	mov	r3, r0
     a84:	cmp	r3, #0
     a88:	beq	a94 <read_array+0x2f0>
     a8c:	mvn	r3, #0
     a90:	b	b94 <read_array+0x3f0>
     a94:	ldr	r2, [fp, #-20]	; 0xffffffec
     a98:	ldr	r3, [fp, #-24]	; 0xffffffe8
     a9c:	add	r3, r2, r3
     aa0:	str	r3, [fp, #-20]	; 0xffffffec
     aa4:	ldr	r2, [fp, #-20]	; 0xffffffec
     aa8:	ldr	r3, [fp, #-8]
     aac:	cmp	r2, r3
     ab0:	blt	a1c <read_array+0x278>
     ab4:	ldr	r2, [fp, #-16]
     ab8:	ldr	r3, [fp, #-8]
     abc:	cmp	r2, r3
     ac0:	beq	b8c <read_array+0x3e8>
     ac4:	ldr	r3, [fp, #-584]	; 0xfffffdb8
     ac8:	sub	r3, r3, #2
     acc:	lsl	r3, r3, #2
     ad0:	sub	r2, fp, #4
     ad4:	add	r3, r2, r3
     ad8:	ldr	r2, [r3, #-616]	; 0xfffffd98
     adc:	ldr	r3, [fp, #-584]	; 0xfffffdb8
     ae0:	lsl	r3, r3, #2
     ae4:	sub	r1, fp, #4
     ae8:	add	r3, r1, r3
     aec:	ldr	r3, [r3, #-616]	; 0xfffffd98
     af0:	sub	r3, r2, r3
     af4:	ldr	r2, [fp, #-20]	; 0xffffffec
     af8:	add	r3, r2, r3
     afc:	str	r3, [fp, #-20]	; 0xffffffec
     b00:	ldr	r3, [fp, #-584]	; 0xfffffdb8
     b04:	sub	r3, r3, #3
     b08:	str	r3, [fp, #-12]
     b0c:	b	b58 <read_array+0x3b4>
     b10:	ldr	r3, [fp, #-12]
     b14:	lsl	r3, r3, #2
     b18:	sub	r2, fp, #4
     b1c:	add	r3, r2, r3
     b20:	ldr	r2, [r3, #-616]	; 0xfffffd98
     b24:	ldr	r3, [fp, #-12]
     b28:	add	r3, r3, #2
     b2c:	lsl	r3, r3, #2
     b30:	sub	r1, fp, #4
     b34:	add	r3, r1, r3
     b38:	ldr	r3, [r3, #-616]	; 0xfffffd98
     b3c:	sub	r3, r2, r3
     b40:	ldr	r2, [fp, #-20]	; 0xffffffec
     b44:	add	r3, r2, r3
     b48:	str	r3, [fp, #-20]	; 0xffffffec
     b4c:	ldr	r3, [fp, #-12]
     b50:	sub	r3, r3, #1
     b54:	str	r3, [fp, #-12]
     b58:	ldr	r3, [fp, #-12]
     b5c:	cmp	r3, #0
     b60:	blt	a1c <read_array+0x278>
     b64:	ldr	r3, [fp, #-12]
     b68:	add	r3, r3, #2
     b6c:	lsl	r3, r3, #2
     b70:	sub	r2, fp, #4
     b74:	add	r3, r2, r3
     b78:	ldr	r2, [r3, #-616]	; 0xfffffd98
     b7c:	ldr	r3, [fp, #-20]	; 0xffffffec
     b80:	cmp	r2, r3
     b84:	ble	b10 <read_array+0x36c>
     b88:	b	a1c <read_array+0x278>
     b8c:	nop			; (mov r0, r0)
     b90:	mov	r3, #0
     b94:	mov	r0, r3
     b98:	sub	sp, fp, #4
     b9c:	pop	{fp, pc}

00000ba0 <read_partial_array>:
     ba0:	push	{fp, lr}
     ba4:	add	fp, sp, #4
     ba8:	sub	sp, sp, #544	; 0x220
     bac:	str	r0, [fp, #-536]	; 0xfffffde8
     bb0:	str	r1, [fp, #-540]	; 0xfffffde4
     bb4:	str	r2, [fp, #-544]	; 0xfffffde0
     bb8:	str	r3, [fp, #-548]	; 0xfffffddc
     bbc:	ldr	r2, [fp, #-536]	; 0xfffffde8
     bc0:	sub	r3, fp, #532	; 0x214
     bc4:	mov	r1, r2
     bc8:	mov	r2, #520	; 0x208
     bcc:	mov	r0, r3
     bd0:	bl	0 <memcpy>
     bd4:	ldr	r3, [fp, #-548]	; 0xfffffddc
     bd8:	cmp	r3, #0
     bdc:	ble	c9c <read_partial_array+0xfc>
     be0:	sub	r3, fp, #532	; 0x214
     be4:	ldr	r1, [fp, #-544]	; 0xfffffde0
     be8:	mov	r0, r3
     bec:	bl	0 <coda_cursor_goto_array_element_by_index>
     bf0:	mov	r3, r0
     bf4:	cmp	r3, #0
     bf8:	beq	c04 <read_partial_array+0x64>
     bfc:	mvn	r3, #0
     c00:	b	ca0 <read_partial_array+0x100>
     c04:	mov	r3, #0
     c08:	str	r3, [fp, #-8]
     c0c:	b	c8c <read_partial_array+0xec>
     c10:	ldr	r3, [fp, #-8]
     c14:	ldr	r2, [fp, #8]
     c18:	mul	r3, r2, r3
     c1c:	mov	r2, r3
     c20:	ldr	r3, [fp, #4]
     c24:	add	r1, r3, r2
     c28:	sub	r2, fp, #532	; 0x214
     c2c:	ldr	r3, [fp, #-540]	; 0xfffffde4
     c30:	mov	r0, r2
     c34:	blx	r3
     c38:	mov	r3, r0
     c3c:	cmp	r3, #0
     c40:	beq	c4c <read_partial_array+0xac>
     c44:	mvn	r3, #0
     c48:	b	ca0 <read_partial_array+0x100>
     c4c:	ldr	r3, [fp, #-548]	; 0xfffffddc
     c50:	sub	r2, r3, #1
     c54:	ldr	r3, [fp, #-8]
     c58:	cmp	r2, r3
     c5c:	ble	c80 <read_partial_array+0xe0>
     c60:	sub	r3, fp, #532	; 0x214
     c64:	mov	r0, r3
     c68:	bl	0 <coda_cursor_goto_next_array_element>
     c6c:	mov	r3, r0
     c70:	cmp	r3, #0
     c74:	beq	c80 <read_partial_array+0xe0>
     c78:	mvn	r3, #0
     c7c:	b	ca0 <read_partial_array+0x100>
     c80:	ldr	r3, [fp, #-8]
     c84:	add	r3, r3, #1
     c88:	str	r3, [fp, #-8]
     c8c:	ldr	r2, [fp, #-8]
     c90:	ldr	r3, [fp, #-548]	; 0xfffffddc
     c94:	cmp	r2, r3
     c98:	blt	c10 <read_partial_array+0x70>
     c9c:	mov	r3, #0
     ca0:	mov	r0, r3
     ca4:	sub	sp, fp, #4
     ca8:	pop	{fp, pc}

00000cac <transpose_array>:
     cac:	push	{fp, lr}
     cb0:	add	fp, sp, #4
     cb4:	sub	sp, sp, #208	; 0xd0
     cb8:	str	r0, [fp, #-192]	; 0xffffff40
     cbc:	str	r1, [fp, #-196]	; 0xffffff3c
     cc0:	str	r2, [fp, #-200]	; 0xffffff38
     cc4:	mov	r3, #0
     cc8:	str	r3, [fp, #-12]
     ccc:	sub	r2, fp, #72	; 0x48
     cd0:	sub	r3, fp, #76	; 0x4c
     cd4:	mov	r1, r3
     cd8:	ldr	r0, [fp, #-192]	; 0xffffff40
     cdc:	bl	0 <coda_cursor_get_array_dim>
     ce0:	mov	r3, r0
     ce4:	cmp	r3, #0
     ce8:	beq	cf4 <transpose_array+0x48>
     cec:	mvn	r3, #0
     cf0:	b	1554 <transpose_array+0x8a8>
     cf4:	ldr	r3, [fp, #-76]	; 0xffffffb4
     cf8:	cmp	r3, #1
     cfc:	bgt	d08 <transpose_array+0x5c>
     d00:	mov	r3, #0
     d04:	b	1554 <transpose_array+0x8a8>
     d08:	ldr	r3, [fp, #-196]	; 0xffffff3c
     d0c:	str	r3, [fp, #-36]	; 0xffffffdc
     d10:	mov	r3, #1
     d14:	str	r3, [fp, #-8]
     d18:	mov	r3, #0
     d1c:	str	r3, [fp, #-16]
     d20:	b	d9c <transpose_array+0xf0>
     d24:	ldr	r3, [fp, #-16]
     d28:	lsl	r3, r3, #2
     d2c:	sub	r2, fp, #4
     d30:	add	r3, r2, r3
     d34:	ldr	r2, [r3, #-68]	; 0xffffffbc
     d38:	ldr	r3, [fp, #-8]
     d3c:	mul	r3, r2, r3
     d40:	str	r3, [fp, #-8]
     d44:	ldr	r3, [fp, #-16]
     d48:	lsl	r3, r3, #2
     d4c:	sub	r2, fp, #4
     d50:	add	r3, r2, r3
     d54:	mov	r2, #0
     d58:	str	r2, [r3, #-144]	; 0xffffff70
     d5c:	ldr	r3, [fp, #-76]	; 0xffffffb4
     d60:	sub	r2, r3, #1
     d64:	ldr	r3, [fp, #-16]
     d68:	sub	r3, r2, r3
     d6c:	lsl	r3, r3, #2
     d70:	sub	r2, fp, #4
     d74:	add	r3, r2, r3
     d78:	ldr	r2, [r3, #-68]	; 0xffffffbc
     d7c:	ldr	r3, [fp, #-16]
     d80:	lsl	r3, r3, #2
     d84:	sub	r1, fp, #4
     d88:	add	r3, r1, r3
     d8c:	str	r2, [r3, #-180]	; 0xffffff4c
     d90:	ldr	r3, [fp, #-16]
     d94:	add	r3, r3, #1
     d98:	str	r3, [fp, #-16]
     d9c:	ldr	r3, [fp, #-76]	; 0xffffffb4
     da0:	ldr	r2, [fp, #-16]
     da4:	cmp	r2, r3
     da8:	blt	d24 <transpose_array+0x78>
     dac:	ldr	r3, [fp, #-8]
     db0:	cmp	r3, #1
     db4:	bgt	dc0 <transpose_array+0x114>
     db8:	mov	r3, #0
     dbc:	b	1554 <transpose_array+0x8a8>
     dc0:	ldr	r3, [fp, #-76]	; 0xffffffb4
     dc4:	lsl	r3, r3, #2
     dc8:	sub	r2, fp, #4
     dcc:	add	r3, r2, r3
     dd0:	mov	r2, #1
     dd4:	str	r2, [r3, #-108]	; 0xffffff94
     dd8:	ldr	r3, [fp, #-76]	; 0xffffffb4
     ddc:	lsl	r3, r3, #2
     de0:	sub	r2, fp, #4
     de4:	add	r3, r2, r3
     de8:	mov	r2, #1
     dec:	str	r2, [r3, #-180]	; 0xffffff4c
     df0:	ldr	r3, [fp, #-76]	; 0xffffffb4
     df4:	str	r3, [fp, #-16]
     df8:	b	e4c <transpose_array+0x1a0>
     dfc:	ldr	r3, [fp, #-16]
     e00:	sub	r1, r3, #1
     e04:	ldr	r3, [fp, #-16]
     e08:	lsl	r3, r3, #2
     e0c:	sub	r2, fp, #4
     e10:	add	r3, r2, r3
     e14:	ldr	r2, [r3, #-108]	; 0xffffff94
     e18:	ldr	r3, [fp, #-16]
     e1c:	lsl	r3, r3, #2
     e20:	sub	r0, fp, #4
     e24:	add	r3, r0, r3
     e28:	ldr	r3, [r3, #-180]	; 0xffffff4c
     e2c:	mul	r2, r3, r2
     e30:	lsl	r3, r1, #2
     e34:	sub	r1, fp, #4
     e38:	add	r3, r1, r3
     e3c:	str	r2, [r3, #-108]	; 0xffffff94
     e40:	ldr	r3, [fp, #-16]
     e44:	sub	r3, r3, #1
     e48:	str	r3, [fp, #-16]
     e4c:	ldr	r3, [fp, #-16]
     e50:	cmp	r3, #0
     e54:	bgt	dfc <transpose_array+0x150>
     e58:	ldr	r3, [fp, #-76]	; 0xffffffb4
     e5c:	lsl	r3, r3, #2
     e60:	sub	r2, fp, #4
     e64:	add	r3, r2, r3
     e68:	mov	r2, #0
     e6c:	str	r2, [r3, #-180]	; 0xffffff4c
     e70:	ldr	r3, [fp, #-76]	; 0xffffffb4
     e74:	lsl	r3, r3, #2
     e78:	sub	r2, fp, #4
     e7c:	add	r3, r2, r3
     e80:	mov	r2, #0
     e84:	str	r2, [r3, #-144]	; 0xffffff70
     e88:	ldr	r3, [fp, #-8]
     e8c:	ldr	r2, [fp, #-200]	; 0xffffff38
     e90:	mul	r3, r2, r3
     e94:	mov	r0, r3
     e98:	bl	0 <malloc>
     e9c:	mov	r3, r0
     ea0:	str	r3, [fp, #-40]	; 0xffffffd8
     ea4:	ldr	r3, [fp, #-40]	; 0xffffffd8
     ea8:	cmp	r3, #0
     eac:	bne	edc <transpose_array+0x230>
     eb0:	ldr	r3, [fp, #-8]
     eb4:	ldr	r2, [fp, #-200]	; 0xffffff38
     eb8:	mul	r2, r2, r3
     ebc:	mov	r3, #93	; 0x5d
     ec0:	str	r3, [sp]
     ec4:	ldr	r3, [pc, #1684]	; 1560 <transpose_array+0x8b4>
     ec8:	ldr	r1, [pc, #1684]	; 1564 <transpose_array+0x8b8>
     ecc:	mvn	r0, #0
     ed0:	bl	0 <coda_set_error>
     ed4:	mvn	r3, #0
     ed8:	b	1554 <transpose_array+0x8a8>
     edc:	ldr	r3, [fp, #-200]	; 0xffffff38
     ee0:	sub	r3, r3, #1
     ee4:	cmp	r3, #7
     ee8:	ldrls	pc, [pc, r3, lsl #2]
     eec:	b	1518 <transpose_array+0x86c>
     ef0:	.word	0x00000f10
     ef4:	.word	0x0000108c
     ef8:	.word	0x00001518
     efc:	.word	0x00001210
     f00:	.word	0x00001518
     f04:	.word	0x00001518
     f08:	.word	0x00001518
     f0c:	.word	0x00001394
     f10:	mov	r3, #0
     f14:	str	r3, [fp, #-16]
     f18:	b	1078 <transpose_array+0x3cc>
     f1c:	mov	r3, #0
     f20:	str	r3, [fp, #-20]	; 0xffffffec
     f24:	ldr	r3, [fp, #-12]
     f28:	ldr	r2, [fp, #-40]	; 0xffffffd8
     f2c:	add	r3, r2, r3
     f30:	ldr	r2, [fp, #-16]
     f34:	ldr	r1, [fp, #-36]	; 0xffffffdc
     f38:	add	r2, r1, r2
     f3c:	ldrb	r2, [r2]
     f40:	strb	r2, [r3]
     f44:	ldr	r3, [fp, #-20]	; 0xffffffec
     f48:	lsl	r3, r3, #2
     f4c:	sub	r2, fp, #4
     f50:	add	r3, r2, r3
     f54:	ldr	r3, [r3, #-108]	; 0xffffff94
     f58:	ldr	r2, [fp, #-12]
     f5c:	add	r3, r2, r3
     f60:	str	r3, [fp, #-12]
     f64:	ldr	r3, [fp, #-20]	; 0xffffffec
     f68:	lsl	r3, r3, #2
     f6c:	sub	r2, fp, #4
     f70:	add	r3, r2, r3
     f74:	ldr	r3, [r3, #-144]	; 0xffffff70
     f78:	add	r2, r3, #1
     f7c:	ldr	r3, [fp, #-20]	; 0xffffffec
     f80:	lsl	r3, r3, #2
     f84:	sub	r1, fp, #4
     f88:	add	r3, r1, r3
     f8c:	str	r2, [r3, #-144]	; 0xffffff70
     f90:	b	103c <transpose_array+0x390>
     f94:	ldr	r3, [fp, #-20]	; 0xffffffec
     f98:	lsl	r3, r3, #2
     f9c:	sub	r2, fp, #4
     fa0:	add	r3, r2, r3
     fa4:	mov	r2, #0
     fa8:	str	r2, [r3, #-144]	; 0xffffff70
     fac:	ldr	r3, [fp, #-20]	; 0xffffffec
     fb0:	lsl	r3, r3, #2
     fb4:	sub	r2, fp, #4
     fb8:	add	r3, r2, r3
     fbc:	ldr	r2, [r3, #-108]	; 0xffffff94
     fc0:	ldr	r3, [fp, #-20]	; 0xffffffec
     fc4:	lsl	r3, r3, #2
     fc8:	sub	r1, fp, #4
     fcc:	add	r3, r1, r3
     fd0:	ldr	r3, [r3, #-180]	; 0xffffff4c
     fd4:	mul	r3, r3, r2
     fd8:	ldr	r2, [fp, #-12]
     fdc:	sub	r3, r2, r3
     fe0:	str	r3, [fp, #-12]
     fe4:	ldr	r3, [fp, #-20]	; 0xffffffec
     fe8:	add	r3, r3, #1
     fec:	str	r3, [fp, #-20]	; 0xffffffec
     ff0:	ldr	r3, [fp, #-20]	; 0xffffffec
     ff4:	lsl	r3, r3, #2
     ff8:	sub	r2, fp, #4
     ffc:	add	r3, r2, r3
    1000:	ldr	r3, [r3, #-108]	; 0xffffff94
    1004:	ldr	r2, [fp, #-12]
    1008:	add	r3, r2, r3
    100c:	str	r3, [fp, #-12]
    1010:	ldr	r3, [fp, #-20]	; 0xffffffec
    1014:	lsl	r3, r3, #2
    1018:	sub	r2, fp, #4
    101c:	add	r3, r2, r3
    1020:	ldr	r3, [r3, #-144]	; 0xffffff70
    1024:	add	r2, r3, #1
    1028:	ldr	r3, [fp, #-20]	; 0xffffffec
    102c:	lsl	r3, r3, #2
    1030:	sub	r1, fp, #4
    1034:	add	r3, r1, r3
    1038:	str	r2, [r3, #-144]	; 0xffffff70
    103c:	ldr	r3, [fp, #-20]	; 0xffffffec
    1040:	lsl	r3, r3, #2
    1044:	sub	r2, fp, #4
    1048:	add	r3, r2, r3
    104c:	ldr	r2, [r3, #-144]	; 0xffffff70
    1050:	ldr	r3, [fp, #-20]	; 0xffffffec
    1054:	lsl	r3, r3, #2
    1058:	sub	r1, fp, #4
    105c:	add	r3, r1, r3
    1060:	ldr	r3, [r3, #-180]	; 0xffffff4c
    1064:	cmp	r2, r3
    1068:	beq	f94 <transpose_array+0x2e8>
    106c:	ldr	r3, [fp, #-16]
    1070:	add	r3, r3, #1
    1074:	str	r3, [fp, #-16]
    1078:	ldr	r2, [fp, #-16]
    107c:	ldr	r3, [fp, #-8]
    1080:	cmp	r2, r3
    1084:	blt	f1c <transpose_array+0x270>
    1088:	b	152c <transpose_array+0x880>
    108c:	mov	r3, #0
    1090:	str	r3, [fp, #-16]
    1094:	b	11fc <transpose_array+0x550>
    1098:	mov	r3, #0
    109c:	str	r3, [fp, #-24]	; 0xffffffe8
    10a0:	ldr	r3, [fp, #-12]
    10a4:	lsl	r3, r3, #1
    10a8:	ldr	r2, [fp, #-40]	; 0xffffffd8
    10ac:	add	r3, r2, r3
    10b0:	ldr	r2, [fp, #-16]
    10b4:	lsl	r2, r2, #1
    10b8:	ldr	r1, [fp, #-36]	; 0xffffffdc
    10bc:	add	r2, r1, r2
    10c0:	ldrh	r2, [r2]
    10c4:	strh	r2, [r3]
    10c8:	ldr	r3, [fp, #-24]	; 0xffffffe8
    10cc:	lsl	r3, r3, #2
    10d0:	sub	r2, fp, #4
    10d4:	add	r3, r2, r3
    10d8:	ldr	r3, [r3, #-108]	; 0xffffff94
    10dc:	ldr	r2, [fp, #-12]
    10e0:	add	r3, r2, r3
    10e4:	str	r3, [fp, #-12]
    10e8:	ldr	r3, [fp, #-24]	; 0xffffffe8
    10ec:	lsl	r3, r3, #2
    10f0:	sub	r2, fp, #4
    10f4:	add	r3, r2, r3
    10f8:	ldr	r3, [r3, #-144]	; 0xffffff70
    10fc:	add	r2, r3, #1
    1100:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1104:	lsl	r3, r3, #2
    1108:	sub	r1, fp, #4
    110c:	add	r3, r1, r3
    1110:	str	r2, [r3, #-144]	; 0xffffff70
    1114:	b	11c0 <transpose_array+0x514>
    1118:	ldr	r3, [fp, #-24]	; 0xffffffe8
    111c:	lsl	r3, r3, #2
    1120:	sub	r2, fp, #4
    1124:	add	r3, r2, r3
    1128:	mov	r2, #0
    112c:	str	r2, [r3, #-144]	; 0xffffff70
    1130:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1134:	lsl	r3, r3, #2
    1138:	sub	r2, fp, #4
    113c:	add	r3, r2, r3
    1140:	ldr	r2, [r3, #-108]	; 0xffffff94
    1144:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1148:	lsl	r3, r3, #2
    114c:	sub	r1, fp, #4
    1150:	add	r3, r1, r3
    1154:	ldr	r3, [r3, #-180]	; 0xffffff4c
    1158:	mul	r3, r3, r2
    115c:	ldr	r2, [fp, #-12]
    1160:	sub	r3, r2, r3
    1164:	str	r3, [fp, #-12]
    1168:	ldr	r3, [fp, #-24]	; 0xffffffe8
    116c:	add	r3, r3, #1
    1170:	str	r3, [fp, #-24]	; 0xffffffe8
    1174:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1178:	lsl	r3, r3, #2
    117c:	sub	r2, fp, #4
    1180:	add	r3, r2, r3
    1184:	ldr	r3, [r3, #-108]	; 0xffffff94
    1188:	ldr	r2, [fp, #-12]
    118c:	add	r3, r2, r3
    1190:	str	r3, [fp, #-12]
    1194:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1198:	lsl	r3, r3, #2
    119c:	sub	r2, fp, #4
    11a0:	add	r3, r2, r3
    11a4:	ldr	r3, [r3, #-144]	; 0xffffff70
    11a8:	add	r2, r3, #1
    11ac:	ldr	r3, [fp, #-24]	; 0xffffffe8
    11b0:	lsl	r3, r3, #2
    11b4:	sub	r1, fp, #4
    11b8:	add	r3, r1, r3
    11bc:	str	r2, [r3, #-144]	; 0xffffff70
    11c0:	ldr	r3, [fp, #-24]	; 0xffffffe8
    11c4:	lsl	r3, r3, #2
    11c8:	sub	r2, fp, #4
    11cc:	add	r3, r2, r3
    11d0:	ldr	r2, [r3, #-144]	; 0xffffff70
    11d4:	ldr	r3, [fp, #-24]	; 0xffffffe8
    11d8:	lsl	r3, r3, #2
    11dc:	sub	r1, fp, #4
    11e0:	add	r3, r1, r3
    11e4:	ldr	r3, [r3, #-180]	; 0xffffff4c
    11e8:	cmp	r2, r3
    11ec:	beq	1118 <transpose_array+0x46c>
    11f0:	ldr	r3, [fp, #-16]
    11f4:	add	r3, r3, #1
    11f8:	str	r3, [fp, #-16]
    11fc:	ldr	r2, [fp, #-16]
    1200:	ldr	r3, [fp, #-8]
    1204:	cmp	r2, r3
    1208:	blt	1098 <transpose_array+0x3ec>
    120c:	b	152c <transpose_array+0x880>
    1210:	mov	r3, #0
    1214:	str	r3, [fp, #-16]
    1218:	b	1380 <transpose_array+0x6d4>
    121c:	mov	r3, #0
    1220:	str	r3, [fp, #-28]	; 0xffffffe4
    1224:	ldr	r3, [fp, #-12]
    1228:	lsl	r3, r3, #2
    122c:	ldr	r2, [fp, #-40]	; 0xffffffd8
    1230:	add	r3, r2, r3
    1234:	ldr	r2, [fp, #-16]
    1238:	lsl	r2, r2, #2
    123c:	ldr	r1, [fp, #-36]	; 0xffffffdc
    1240:	add	r2, r1, r2
    1244:	ldr	r2, [r2]
    1248:	str	r2, [r3]
    124c:	ldr	r3, [fp, #-28]	; 0xffffffe4
    1250:	lsl	r3, r3, #2
    1254:	sub	r2, fp, #4
    1258:	add	r3, r2, r3
    125c:	ldr	r3, [r3, #-108]	; 0xffffff94
    1260:	ldr	r2, [fp, #-12]
    1264:	add	r3, r2, r3
    1268:	str	r3, [fp, #-12]
    126c:	ldr	r3, [fp, #-28]	; 0xffffffe4
    1270:	lsl	r3, r3, #2
    1274:	sub	r2, fp, #4
    1278:	add	r3, r2, r3
    127c:	ldr	r3, [r3, #-144]	; 0xffffff70
    1280:	add	r2, r3, #1
    1284:	ldr	r3, [fp, #-28]	; 0xffffffe4
    1288:	lsl	r3, r3, #2
    128c:	sub	r1, fp, #4
    1290:	add	r3, r1, r3
    1294:	str	r2, [r3, #-144]	; 0xffffff70
    1298:	b	1344 <transpose_array+0x698>
    129c:	ldr	r3, [fp, #-28]	; 0xffffffe4
    12a0:	lsl	r3, r3, #2
    12a4:	sub	r2, fp, #4
    12a8:	add	r3, r2, r3
    12ac:	mov	r2, #0
    12b0:	str	r2, [r3, #-144]	; 0xffffff70
    12b4:	ldr	r3, [fp, #-28]	; 0xffffffe4
    12b8:	lsl	r3, r3, #2
    12bc:	sub	r2, fp, #4
    12c0:	add	r3, r2, r3
    12c4:	ldr	r2, [r3, #-108]	; 0xffffff94
    12c8:	ldr	r3, [fp, #-28]	; 0xffffffe4
    12cc:	lsl	r3, r3, #2
    12d0:	sub	r1, fp, #4
    12d4:	add	r3, r1, r3
    12d8:	ldr	r3, [r3, #-180]	; 0xffffff4c
    12dc:	mul	r3, r3, r2
    12e0:	ldr	r2, [fp, #-12]
    12e4:	sub	r3, r2, r3
    12e8:	str	r3, [fp, #-12]
    12ec:	ldr	r3, [fp, #-28]	; 0xffffffe4
    12f0:	add	r3, r3, #1
    12f4:	str	r3, [fp, #-28]	; 0xffffffe4
    12f8:	ldr	r3, [fp, #-28]	; 0xffffffe4
    12fc:	lsl	r3, r3, #2
    1300:	sub	r2, fp, #4
    1304:	add	r3, r2, r3
    1308:	ldr	r3, [r3, #-108]	; 0xffffff94
    130c:	ldr	r2, [fp, #-12]
    1310:	add	r3, r2, r3
    1314:	str	r3, [fp, #-12]
    1318:	ldr	r3, [fp, #-28]	; 0xffffffe4
    131c:	lsl	r3, r3, #2
    1320:	sub	r2, fp, #4
    1324:	add	r3, r2, r3
    1328:	ldr	r3, [r3, #-144]	; 0xffffff70
    132c:	add	r2, r3, #1
    1330:	ldr	r3, [fp, #-28]	; 0xffffffe4
    1334:	lsl	r3, r3, #2
    1338:	sub	r1, fp, #4
    133c:	add	r3, r1, r3
    1340:	str	r2, [r3, #-144]	; 0xffffff70
    1344:	ldr	r3, [fp, #-28]	; 0xffffffe4
    1348:	lsl	r3, r3, #2
    134c:	sub	r2, fp, #4
    1350:	add	r3, r2, r3
    1354:	ldr	r2, [r3, #-144]	; 0xffffff70
    1358:	ldr	r3, [fp, #-28]	; 0xffffffe4
    135c:	lsl	r3, r3, #2
    1360:	sub	r1, fp, #4
    1364:	add	r3, r1, r3
    1368:	ldr	r3, [r3, #-180]	; 0xffffff4c
    136c:	cmp	r2, r3
    1370:	beq	129c <transpose_array+0x5f0>
    1374:	ldr	r3, [fp, #-16]
    1378:	add	r3, r3, #1
    137c:	str	r3, [fp, #-16]
    1380:	ldr	r2, [fp, #-16]
    1384:	ldr	r3, [fp, #-8]
    1388:	cmp	r2, r3
    138c:	blt	121c <transpose_array+0x570>
    1390:	b	152c <transpose_array+0x880>
    1394:	mov	r3, #0
    1398:	str	r3, [fp, #-16]
    139c:	b	1504 <transpose_array+0x858>
    13a0:	mov	r3, #0
    13a4:	str	r3, [fp, #-32]	; 0xffffffe0
    13a8:	ldr	r3, [fp, #-12]
    13ac:	lsl	r3, r3, #3
    13b0:	ldr	r2, [fp, #-40]	; 0xffffffd8
    13b4:	add	r1, r2, r3
    13b8:	ldr	r3, [fp, #-16]
    13bc:	lsl	r3, r3, #3
    13c0:	ldr	r2, [fp, #-36]	; 0xffffffdc
    13c4:	add	r3, r2, r3
    13c8:	ldrd	r2, [r3]
    13cc:	strd	r2, [r1]
    13d0:	ldr	r3, [fp, #-32]	; 0xffffffe0
    13d4:	lsl	r3, r3, #2
    13d8:	sub	r2, fp, #4
    13dc:	add	r3, r2, r3
    13e0:	ldr	r3, [r3, #-108]	; 0xffffff94
    13e4:	ldr	r2, [fp, #-12]
    13e8:	add	r3, r2, r3
    13ec:	str	r3, [fp, #-12]
    13f0:	ldr	r3, [fp, #-32]	; 0xffffffe0
    13f4:	lsl	r3, r3, #2
    13f8:	sub	r2, fp, #4
    13fc:	add	r3, r2, r3
    1400:	ldr	r3, [r3, #-144]	; 0xffffff70
    1404:	add	r2, r3, #1
    1408:	ldr	r3, [fp, #-32]	; 0xffffffe0
    140c:	lsl	r3, r3, #2
    1410:	sub	r1, fp, #4
    1414:	add	r3, r1, r3
    1418:	str	r2, [r3, #-144]	; 0xffffff70
    141c:	b	14c8 <transpose_array+0x81c>
    1420:	ldr	r3, [fp, #-32]	; 0xffffffe0
    1424:	lsl	r3, r3, #2
    1428:	sub	r2, fp, #4
    142c:	add	r3, r2, r3
    1430:	mov	r2, #0
    1434:	str	r2, [r3, #-144]	; 0xffffff70
    1438:	ldr	r3, [fp, #-32]	; 0xffffffe0
    143c:	lsl	r3, r3, #2
    1440:	sub	r2, fp, #4
    1444:	add	r3, r2, r3
    1448:	ldr	r2, [r3, #-108]	; 0xffffff94
    144c:	ldr	r3, [fp, #-32]	; 0xffffffe0
    1450:	lsl	r3, r3, #2
    1454:	sub	r1, fp, #4
    1458:	add	r3, r1, r3
    145c:	ldr	r3, [r3, #-180]	; 0xffffff4c
    1460:	mul	r3, r3, r2
    1464:	ldr	r2, [fp, #-12]
    1468:	sub	r3, r2, r3
    146c:	str	r3, [fp, #-12]
    1470:	ldr	r3, [fp, #-32]	; 0xffffffe0
    1474:	add	r3, r3, #1
    1478:	str	r3, [fp, #-32]	; 0xffffffe0
    147c:	ldr	r3, [fp, #-32]	; 0xffffffe0
    1480:	lsl	r3, r3, #2
    1484:	sub	r2, fp, #4
    1488:	add	r3, r2, r3
    148c:	ldr	r3, [r3, #-108]	; 0xffffff94
    1490:	ldr	r2, [fp, #-12]
    1494:	add	r3, r2, r3
    1498:	str	r3, [fp, #-12]
    149c:	ldr	r3, [fp, #-32]	; 0xffffffe0
    14a0:	lsl	r3, r3, #2
    14a4:	sub	r2, fp, #4
    14a8:	add	r3, r2, r3
    14ac:	ldr	r3, [r3, #-144]	; 0xffffff70
    14b0:	add	r2, r3, #1
    14b4:	ldr	r3, [fp, #-32]	; 0xffffffe0
    14b8:	lsl	r3, r3, #2
    14bc:	sub	r1, fp, #4
    14c0:	add	r3, r1, r3
    14c4:	str	r2, [r3, #-144]	; 0xffffff70
    14c8:	ldr	r3, [fp, #-32]	; 0xffffffe0
    14cc:	lsl	r3, r3, #2
    14d0:	sub	r2, fp, #4
    14d4:	add	r3, r2, r3
    14d8:	ldr	r2, [r3, #-144]	; 0xffffff70
    14dc:	ldr	r3, [fp, #-32]	; 0xffffffe0
    14e0:	lsl	r3, r3, #2
    14e4:	sub	r1, fp, #4
    14e8:	add	r3, r1, r3
    14ec:	ldr	r3, [r3, #-180]	; 0xffffff4c
    14f0:	cmp	r2, r3
    14f4:	beq	1420 <transpose_array+0x774>
    14f8:	ldr	r3, [fp, #-16]
    14fc:	add	r3, r3, #1
    1500:	str	r3, [fp, #-16]
    1504:	ldr	r2, [fp, #-16]
    1508:	ldr	r3, [fp, #-8]
    150c:	cmp	r2, r3
    1510:	blt	13a0 <transpose_array+0x6f4>
    1514:	b	152c <transpose_array+0x880>
    1518:	ldr	r3, [pc, #72]	; 1568 <transpose_array+0x8bc>
    151c:	mov	r2, #172	; 0xac
    1520:	ldr	r1, [pc, #56]	; 1560 <transpose_array+0x8b4>
    1524:	ldr	r0, [pc, #64]	; 156c <transpose_array+0x8c0>
    1528:	bl	0 <__assert_fail>
    152c:	ldr	r3, [fp, #-8]
    1530:	ldr	r2, [fp, #-200]	; 0xffffff38
    1534:	mul	r3, r2, r3
    1538:	mov	r2, r3
    153c:	ldr	r1, [fp, #-40]	; 0xffffffd8
    1540:	ldr	r0, [fp, #-196]	; 0xffffff3c
    1544:	bl	0 <memcpy>
    1548:	ldr	r0, [fp, #-40]	; 0xffffffd8
    154c:	bl	0 <free>
    1550:	mov	r3, #0
    1554:	mov	r0, r3
    1558:	sub	sp, fp, #4
    155c:	pop	{fp, pc}
    1560:	.word	0x00000128
    1564:	.word	0x0000017c
    1568:	.word	0x000006b0
    156c:	.word	0x000001b4

00001570 <coda_bin_cursor_get_bit_size>:
    1570:	push	{r4, r5, fp, lr}
    1574:	add	fp, sp, #12
    1578:	sub	sp, sp, #536	; 0x218
    157c:	str	r0, [fp, #-544]	; 0xfffffde0
    1580:	str	r1, [fp, #-548]	; 0xfffffddc
    1584:	ldr	r3, [fp, #-544]	; 0xfffffde0
    1588:	ldr	r3, [r3, #4]
    158c:	sub	r3, r3, #1
    1590:	ldr	r2, [fp, #-544]	; 0xfffffde0
    1594:	lsl	r3, r3, #4
    1598:	add	r3, r2, r3
    159c:	ldr	r3, [r3, #8]
    15a0:	ldr	r3, [r3]
    15a4:	cmp	r3, #99	; 0x63
    15a8:	bhi	15cc <coda_bin_cursor_get_bit_size+0x5c>
    15ac:	ldr	r3, [fp, #-544]	; 0xfffffde0
    15b0:	ldr	r3, [r3, #4]
    15b4:	sub	r3, r3, #1
    15b8:	ldr	r2, [fp, #-544]	; 0xfffffde0
    15bc:	lsl	r3, r3, #4
    15c0:	add	r3, r2, r3
    15c4:	ldr	r3, [r3, #8]
    15c8:	b	15ec <coda_bin_cursor_get_bit_size+0x7c>
    15cc:	ldr	r3, [fp, #-544]	; 0xfffffde0
    15d0:	ldr	r3, [r3, #4]
    15d4:	sub	r3, r3, #1
    15d8:	ldr	r2, [fp, #-544]	; 0xfffffde0
    15dc:	lsl	r3, r3, #4
    15e0:	add	r3, r2, r3
    15e4:	ldr	r3, [r3, #8]
    15e8:	ldr	r3, [r3, #4]
    15ec:	str	r3, [fp, #-16]
    15f0:	ldr	r3, [fp, #-16]
    15f4:	ldrd	r2, [r3, #24]
    15f8:	cmp	r2, #0
    15fc:	sbcs	r3, r3, #0
    1600:	blt	161c <coda_bin_cursor_get_bit_size+0xac>
    1604:	ldr	r3, [fp, #-16]
    1608:	ldrd	r2, [r3, #24]
    160c:	ldr	r1, [fp, #-548]	; 0xfffffddc
    1610:	strd	r2, [r1]
    1614:	mov	r3, #0
    1618:	b	17a4 <coda_bin_cursor_get_bit_size+0x234>
    161c:	ldr	r3, [fp, #-16]
    1620:	ldr	r3, [r3, #8]
    1624:	cmp	r3, #6
    1628:	ldrls	pc, [pc, r3, lsl #2]
    162c:	b	17a0 <coda_bin_cursor_get_bit_size+0x230>
    1630:	.word	0x0000164c
    1634:	.word	0x0000164c
    1638:	.word	0x00001660
    163c:	.word	0x00001660
    1640:	.word	0x00001660
    1644:	.word	0x00001660
    1648:	.word	0x00001738
    164c:	ldr	r1, [fp, #-548]	; 0xfffffddc
    1650:	ldr	r0, [fp, #-544]	; 0xfffffde0
    1654:	bl	0 <coda_ascbin_cursor_get_bit_size>
    1658:	mov	r3, r0
    165c:	b	17a4 <coda_bin_cursor_get_bit_size+0x234>
    1660:	ldr	r3, [fp, #-16]
    1664:	ldr	r3, [r3, #32]
    1668:	cmp	r3, #0
    166c:	bne	1684 <coda_bin_cursor_get_bit_size+0x114>
    1670:	ldr	r1, [fp, #-548]	; 0xfffffddc
    1674:	mvn	r2, #0
    1678:	mvn	r3, #0
    167c:	strd	r2, [r1]
    1680:	b	1794 <coda_bin_cursor_get_bit_size+0x224>
    1684:	ldr	r3, [fp, #-16]
    1688:	ldr	r3, [r3, #32]
    168c:	ldr	r2, [fp, #-548]	; 0xfffffddc
    1690:	ldr	r1, [fp, #-544]	; 0xfffffde0
    1694:	mov	r0, r3
    1698:	bl	0 <coda_expression_eval_integer>
    169c:	mov	r3, r0
    16a0:	cmp	r3, #0
    16a4:	beq	16c0 <coda_bin_cursor_get_bit_size+0x150>
    16a8:	ldr	r0, [pc, #256]	; 17b0 <coda_bin_cursor_get_bit_size+0x240>
    16ac:	bl	0 <coda_add_error_message>
    16b0:	ldr	r0, [fp, #-544]	; 0xfffffde0
    16b4:	bl	0 <coda_cursor_add_to_error_message>
    16b8:	mvn	r3, #0
    16bc:	b	17a4 <coda_bin_cursor_get_bit_size+0x234>
    16c0:	ldr	r3, [fp, #-16]
    16c4:	ldrd	r2, [r3, #24]
    16c8:	mvn	r0, #7
    16cc:	mvn	r1, #0
    16d0:	cmp	r3, r1
    16d4:	cmpeq	r2, r0
    16d8:	bne	16f8 <coda_bin_cursor_get_bit_size+0x188>
    16dc:	ldr	r3, [fp, #-548]	; 0xfffffddc
    16e0:	ldrd	r2, [r3]
    16e4:	lsl	r5, r3, #3
    16e8:	orr	r5, r5, r2, lsr #29
    16ec:	lsl	r4, r2, #3
    16f0:	ldr	r3, [fp, #-548]	; 0xfffffddc
    16f4:	strd	r4, [r3]
    16f8:	ldr	r3, [fp, #-548]	; 0xfffffddc
    16fc:	ldrd	r2, [r3]
    1700:	cmp	r2, #0
    1704:	sbcs	r3, r3, #0
    1708:	bge	1794 <coda_bin_cursor_get_bit_size+0x224>
    170c:	ldr	r3, [fp, #-548]	; 0xfffffddc
    1710:	ldrd	r2, [r3]
    1714:	mov	r3, r2
    1718:	mov	r2, r3
    171c:	ldr	r1, [pc, #144]	; 17b4 <coda_bin_cursor_get_bit_size+0x244>
    1720:	ldr	r0, [pc, #144]	; 17b8 <coda_bin_cursor_get_bit_size+0x248>
    1724:	bl	0 <coda_set_error>
    1728:	ldr	r0, [fp, #-544]	; 0xfffffde0
    172c:	bl	0 <coda_cursor_add_to_error_message>
    1730:	mvn	r3, #0
    1734:	b	17a4 <coda_bin_cursor_get_bit_size+0x234>
    1738:	ldr	r2, [fp, #-544]	; 0xfffffde0
    173c:	sub	r3, fp, #540	; 0x21c
    1740:	mov	r1, r2
    1744:	mov	r2, #520	; 0x208
    1748:	mov	r0, r3
    174c:	bl	0 <memcpy>
    1750:	sub	r3, fp, #540	; 0x21c
    1754:	mov	r0, r3
    1758:	bl	0 <coda_ascbin_cursor_use_base_type_of_special_type>
    175c:	mov	r3, r0
    1760:	cmp	r3, #0
    1764:	beq	1770 <coda_bin_cursor_get_bit_size+0x200>
    1768:	mvn	r3, #0
    176c:	b	17a4 <coda_bin_cursor_get_bit_size+0x234>
    1770:	sub	r3, fp, #540	; 0x21c
    1774:	ldr	r1, [fp, #-548]	; 0xfffffddc
    1778:	mov	r0, r3
    177c:	bl	0 <coda_cursor_get_bit_size>
    1780:	mov	r3, r0
    1784:	cmp	r3, #0
    1788:	beq	179c <coda_bin_cursor_get_bit_size+0x22c>
    178c:	mvn	r3, #0
    1790:	b	17a4 <coda_bin_cursor_get_bit_size+0x234>
    1794:	nop			; (mov r0, r0)
    1798:	b	17a0 <coda_bin_cursor_get_bit_size+0x230>
    179c:	nop			; (mov r0, r0)
    17a0:	mov	r3, #0
    17a4:	mov	r0, r3
    17a8:	sub	sp, fp, #12
    17ac:	pop	{r4, r5, fp, pc}
    17b0:	.word	0x000001b8
    17b4:	.word	0x000001d0
    17b8:	.word	0xfffffed4

000017bc <coda_bin_cursor_get_string_length>:
    17bc:	push	{r4, r5, fp, lr}
    17c0:	add	fp, sp, #12
    17c4:	sub	sp, sp, #16
    17c8:	str	r0, [fp, #-24]	; 0xffffffe8
    17cc:	str	r1, [fp, #-28]	; 0xffffffe4
    17d0:	sub	r3, fp, #20
    17d4:	mov	r1, r3
    17d8:	ldr	r0, [fp, #-24]	; 0xffffffe8
    17dc:	bl	1570 <coda_bin_cursor_get_bit_size>
    17e0:	mov	r3, r0
    17e4:	cmp	r3, #0
    17e8:	beq	17f4 <coda_bin_cursor_get_string_length+0x38>
    17ec:	mvn	r3, #0
    17f0:	b	1834 <coda_bin_cursor_get_string_length+0x78>
    17f4:	ldrd	r2, [fp, #-20]	; 0xffffffec
    17f8:	cmp	r2, #0
    17fc:	sbcs	r3, r3, #0
    1800:	bge	1814 <coda_bin_cursor_get_string_length+0x58>
    1804:	ldr	r3, [fp, #-28]	; 0xffffffe4
    1808:	mvn	r2, #0
    180c:	str	r2, [r3]
    1810:	b	1830 <coda_bin_cursor_get_string_length+0x74>
    1814:	ldrd	r2, [fp, #-20]	; 0xffffffec
    1818:	lsr	r4, r2, #3
    181c:	orr	r4, r4, r3, lsl #29
    1820:	asr	r5, r3, #3
    1824:	mov	r2, r4
    1828:	ldr	r3, [fp, #-28]	; 0xffffffe4
    182c:	str	r2, [r3]
    1830:	mov	r3, #0
    1834:	mov	r0, r3
    1838:	sub	sp, fp, #12
    183c:	pop	{r4, r5, fp, pc}

00001840 <coda_bin_cursor_get_num_elements>:
    1840:	push	{fp, lr}
    1844:	add	fp, sp, #4
    1848:	sub	sp, sp, #8
    184c:	str	r0, [fp, #-8]
    1850:	str	r1, [fp, #-12]
    1854:	ldr	r3, [fp, #-8]
    1858:	ldr	r3, [r3, #4]
    185c:	sub	r3, r3, #1
    1860:	ldr	r2, [fp, #-8]
    1864:	lsl	r3, r3, #4
    1868:	add	r3, r2, r3
    186c:	ldr	r3, [r3, #8]
    1870:	ldr	r3, [r3]
    1874:	cmp	r3, #99	; 0x63
    1878:	bhi	189c <coda_bin_cursor_get_num_elements+0x5c>
    187c:	ldr	r3, [fp, #-8]
    1880:	ldr	r3, [r3, #4]
    1884:	sub	r3, r3, #1
    1888:	ldr	r2, [fp, #-8]
    188c:	lsl	r3, r3, #4
    1890:	add	r3, r2, r3
    1894:	ldr	r3, [r3, #8]
    1898:	b	18bc <coda_bin_cursor_get_num_elements+0x7c>
    189c:	ldr	r3, [fp, #-8]
    18a0:	ldr	r3, [r3, #4]
    18a4:	sub	r3, r3, #1
    18a8:	ldr	r2, [fp, #-8]
    18ac:	lsl	r3, r3, #4
    18b0:	add	r3, r2, r3
    18b4:	ldr	r3, [r3, #8]
    18b8:	ldr	r3, [r3, #4]
    18bc:	ldr	r3, [r3, #8]
    18c0:	cmp	r3, #1
    18c4:	bhi	18dc <coda_bin_cursor_get_num_elements+0x9c>
    18c8:	ldr	r1, [fp, #-12]
    18cc:	ldr	r0, [fp, #-8]
    18d0:	bl	0 <coda_ascbin_cursor_get_num_elements>
    18d4:	mov	r3, r0
    18d8:	b	18f0 <coda_bin_cursor_get_num_elements+0xb0>
    18dc:	ldr	r3, [fp, #-12]
    18e0:	mov	r2, #1
    18e4:	str	r2, [r3]
    18e8:	nop			; (mov r0, r0)
    18ec:	mov	r3, #0
    18f0:	mov	r0, r3
    18f4:	sub	sp, fp, #4
    18f8:	pop	{fp, pc}

000018fc <coda_bin_cursor_read_int8>:
    18fc:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
    1900:	add	fp, sp, #28
    1904:	sub	sp, sp, #104	; 0x68
    1908:	str	r0, [fp, #-112]	; 0xffffff90
    190c:	str	r1, [fp, #-116]	; 0xffffff8c
    1910:	ldr	r3, [fp, #-112]	; 0xffffff90
    1914:	ldr	r3, [r3, #4]
    1918:	sub	r3, r3, #1
    191c:	ldr	r2, [fp, #-112]	; 0xffffff90
    1920:	lsl	r3, r3, #4
    1924:	add	r3, r2, r3
    1928:	ldr	r3, [r3, #8]
    192c:	ldr	r3, [r3]
    1930:	cmp	r3, #99	; 0x63
    1934:	bhi	1958 <coda_bin_cursor_read_int8+0x5c>
    1938:	ldr	r3, [fp, #-112]	; 0xffffff90
    193c:	ldr	r3, [r3, #4]
    1940:	sub	r3, r3, #1
    1944:	ldr	r2, [fp, #-112]	; 0xffffff90
    1948:	lsl	r3, r3, #4
    194c:	add	r3, r2, r3
    1950:	ldr	r3, [r3, #8]
    1954:	b	1978 <coda_bin_cursor_read_int8+0x7c>
    1958:	ldr	r3, [fp, #-112]	; 0xffffff90
    195c:	ldr	r3, [r3, #4]
    1960:	sub	r3, r3, #1
    1964:	ldr	r2, [fp, #-112]	; 0xffffff90
    1968:	lsl	r3, r3, #4
    196c:	add	r3, r2, r3
    1970:	ldr	r3, [r3, #8]
    1974:	ldr	r3, [r3, #4]
    1978:	str	r3, [fp, #-32]	; 0xffffffe0
    197c:	ldr	r3, [fp, #-32]	; 0xffffffe0
    1980:	ldrd	r2, [r3, #24]
    1984:	strd	r2, [fp, #-60]	; 0xffffffc4
    1988:	ldr	r3, [fp, #-112]	; 0xffffff90
    198c:	ldr	r3, [r3, #4]
    1990:	sub	r3, r3, #1
    1994:	ldr	r2, [fp, #-112]	; 0xffffff90
    1998:	add	r3, r3, #1
    199c:	lsl	r3, r3, #4
    19a0:	add	r3, r2, r3
    19a4:	ldrd	r2, [r3]
    19a8:	strd	r2, [fp, #-44]	; 0xffffffd4
    19ac:	ldrd	r2, [fp, #-60]	; 0xffffffc4
    19b0:	cmp	r2, #0
    19b4:	sbcs	r3, r3, #0
    19b8:	bge	1a9c <coda_bin_cursor_read_int8+0x1a0>
    19bc:	sub	r3, fp, #60	; 0x3c
    19c0:	mov	r1, r3
    19c4:	ldr	r0, [fp, #-112]	; 0xffffff90
    19c8:	bl	1570 <coda_bin_cursor_get_bit_size>
    19cc:	mov	r3, r0
    19d0:	cmp	r3, #0
    19d4:	beq	19e0 <coda_bin_cursor_read_int8+0xe4>
    19d8:	mvn	r3, #0
    19dc:	b	1c24 <coda_bin_cursor_read_int8+0x328>
    19e0:	ldrd	r2, [fp, #-60]	; 0xffffffc4
    19e4:	cmp	r2, #0
    19e8:	sbcs	r3, r3, #0
    19ec:	blt	1a00 <coda_bin_cursor_read_int8+0x104>
    19f0:	ldrd	r2, [fp, #-60]	; 0xffffffc4
    19f4:	cmp	r2, #9
    19f8:	sbcs	r3, r3, #0
    19fc:	blt	1a9c <coda_bin_cursor_read_int8+0x1a0>
    1a00:	ldrd	r0, [fp, #-60]	; 0xffffffc4
    1a04:	sub	r3, fp, #84	; 0x54
    1a08:	mov	r2, r3
    1a0c:	bl	0 <coda_str64>
    1a10:	ldr	r3, [fp, #-112]	; 0xffffff90
    1a14:	ldr	r3, [r3, #4]
    1a18:	sub	r3, r3, #1
    1a1c:	ldr	r2, [fp, #-112]	; 0xffffff90
    1a20:	add	r3, r3, #1
    1a24:	lsl	r3, r3, #4
    1a28:	add	r3, r2, r3
    1a2c:	ldrd	r2, [r3]
    1a30:	lsr	r8, r2, #3
    1a34:	orr	r8, r8, r3, lsl #29
    1a38:	asr	r9, r3, #3
    1a3c:	sub	r3, fp, #108	; 0x6c
    1a40:	mov	r2, r3
    1a44:	mov	r0, r8
    1a48:	mov	r1, r9
    1a4c:	bl	0 <coda_str64>
    1a50:	ldr	r3, [fp, #-112]	; 0xffffff90
    1a54:	ldr	r3, [r3, #4]
    1a58:	sub	r3, r3, #1
    1a5c:	ldr	r2, [fp, #-112]	; 0xffffff90
    1a60:	add	r3, r3, #1
    1a64:	lsl	r3, r3, #4
    1a68:	add	r3, r2, r3
    1a6c:	ldrd	r2, [r3]
    1a70:	mov	r3, r2
    1a74:	and	r3, r3, #7
    1a78:	sub	r1, fp, #108	; 0x6c
    1a7c:	sub	r2, fp, #84	; 0x54
    1a80:	str	r3, [sp]
    1a84:	mov	r3, r1
    1a88:	ldr	r1, [pc, #416]	; 1c30 <coda_bin_cursor_read_int8+0x334>
    1a8c:	ldr	r0, [pc, #416]	; 1c34 <coda_bin_cursor_read_int8+0x338>
    1a90:	bl	0 <coda_set_error>
    1a94:	mvn	r3, #0
    1a98:	b	1c24 <coda_bin_cursor_read_int8+0x328>
    1a9c:	ldrd	r2, [fp, #-44]	; 0xffffffd4
    1aa0:	mov	r0, #7
    1aa4:	mov	r1, #0
    1aa8:	and	r2, r2, r0
    1aac:	and	r3, r3, r1
    1ab0:	orrs	r3, r2, r3
    1ab4:	bne	1ac8 <coda_bin_cursor_read_int8+0x1cc>
    1ab8:	ldrd	r2, [fp, #-60]	; 0xffffffc4
    1abc:	cmp	r3, #0
    1ac0:	cmpeq	r2, #8
    1ac4:	beq	1b64 <coda_bin_cursor_read_int8+0x268>
    1ac8:	ldrd	r2, [fp, #-60]	; 0xffffffc4
    1acc:	lsr	r4, r2, #3
    1ad0:	orr	r4, r4, r3, lsl #29
    1ad4:	asr	r5, r3, #3
    1ad8:	ldrd	r2, [fp, #-60]	; 0xffffffc4
    1adc:	uxtb	r3, r2
    1ae0:	and	r3, r3, #7
    1ae4:	cmp	r3, #0
    1ae8:	movne	r3, #1
    1aec:	moveq	r3, #0
    1af0:	uxtb	r3, r3
    1af4:	uxtb	r2, r3
    1af8:	mov	r3, #0
    1afc:	adds	r2, r2, r4
    1b00:	adc	r3, r3, r5
    1b04:	cmp	r2, #2
    1b08:	sbcs	r3, r3, #0
    1b0c:	blt	1b24 <coda_bin_cursor_read_int8+0x228>
    1b10:	ldr	r3, [pc, #288]	; 1c38 <coda_bin_cursor_read_int8+0x33c>
    1b14:	mov	r2, #177	; 0xb1
    1b18:	ldr	r1, [pc, #284]	; 1c3c <coda_bin_cursor_read_int8+0x340>
    1b1c:	ldr	r0, [pc, #284]	; 1c40 <coda_bin_cursor_read_int8+0x344>
    1b20:	bl	0 <__assert_fail>
    1b24:	ldr	r3, [fp, #-116]	; 0xffffff8c
    1b28:	mov	r2, #0
    1b2c:	strb	r2, [r3]
    1b30:	ldr	r3, [fp, #-112]	; 0xffffff90
    1b34:	ldr	r0, [r3]
    1b38:	ldrd	r2, [fp, #-60]	; 0xffffffc4
    1b3c:	ldr	r1, [fp, #-116]	; 0xffffff8c
    1b40:	str	r1, [sp, #8]
    1b44:	strd	r2, [sp]
    1b48:	ldrd	r2, [fp, #-44]	; 0xffffffd4
    1b4c:	bl	1e4 <read_bits>
    1b50:	mov	r3, r0
    1b54:	cmp	r3, #0
    1b58:	beq	1bb4 <coda_bin_cursor_read_int8+0x2b8>
    1b5c:	mvn	r3, #0
    1b60:	b	1c24 <coda_bin_cursor_read_int8+0x328>
    1b64:	ldr	r3, [fp, #-112]	; 0xffffff90
    1b68:	ldr	r1, [r3]
    1b6c:	ldrd	r2, [fp, #-44]	; 0xffffffd4
    1b70:	lsr	r6, r2, #3
    1b74:	orr	r6, r6, r3, lsl #29
    1b78:	asr	r7, r3, #3
    1b7c:	ldr	r3, [fp, #-116]	; 0xffffff8c
    1b80:	str	r3, [sp, #8]
    1b84:	mov	r2, #1
    1b88:	mov	r3, #0
    1b8c:	strd	r2, [sp]
    1b90:	mov	r2, r6
    1b94:	mov	r3, r7
    1b98:	mov	r0, r1
    1b9c:	bl	0 <read_bytes>
    1ba0:	mov	r3, r0
    1ba4:	cmp	r3, #0
    1ba8:	beq	1bb4 <coda_bin_cursor_read_int8+0x2b8>
    1bac:	mvn	r3, #0
    1bb0:	b	1c24 <coda_bin_cursor_read_int8+0x328>
    1bb4:	ldrd	r2, [fp, #-60]	; 0xffffffc4
    1bb8:	cmp	r2, #8
    1bbc:	sbcs	r3, r3, #0
    1bc0:	bge	1c20 <coda_bin_cursor_read_int8+0x324>
    1bc4:	ldr	r3, [fp, #-116]	; 0xffffff8c
    1bc8:	ldrb	r3, [r3]
    1bcc:	strb	r3, [fp, #-45]	; 0xffffffd3
    1bd0:	ldrb	r1, [fp, #-45]	; 0xffffffd3
    1bd4:	ldrd	r2, [fp, #-60]	; 0xffffffc4
    1bd8:	mov	r3, r2
    1bdc:	sub	r3, r3, #1
    1be0:	asr	r3, r1, r3
    1be4:	and	r3, r3, #1
    1be8:	cmp	r3, #0
    1bec:	beq	1c20 <coda_bin_cursor_read_int8+0x324>
    1bf0:	ldrd	r2, [fp, #-60]	; 0xffffffc4
    1bf4:	mov	r3, #1
    1bf8:	lsl	r3, r3, r2
    1bfc:	uxtb	r3, r3
    1c00:	rsb	r3, r3, #0
    1c04:	uxtb	r3, r3
    1c08:	sxtb	r2, r3
    1c0c:	ldrsb	r3, [fp, #-45]	; 0xffffffd3
    1c10:	orr	r3, r2, r3
    1c14:	sxtb	r2, r3
    1c18:	ldr	r3, [fp, #-116]	; 0xffffff8c
    1c1c:	strb	r2, [r3]
    1c20:	mov	r3, #0
    1c24:	mov	r0, r3
    1c28:	sub	sp, fp, #28
    1c2c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
    1c30:	.word	0x000001f8
    1c34:	.word	0xfffffed4
    1c38:	.word	0x000006c0
    1c3c:	.word	0x00000264
    1c40:	.word	0x000002b4

00001c44 <coda_bin_cursor_read_uint8>:
    1c44:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
    1c48:	add	fp, sp, #28
    1c4c:	sub	sp, sp, #96	; 0x60
    1c50:	str	r0, [fp, #-104]	; 0xffffff98
    1c54:	str	r1, [fp, #-108]	; 0xffffff94
    1c58:	ldr	r3, [fp, #-104]	; 0xffffff98
    1c5c:	ldr	r3, [r3, #4]
    1c60:	sub	r3, r3, #1
    1c64:	ldr	r2, [fp, #-104]	; 0xffffff98
    1c68:	lsl	r3, r3, #4
    1c6c:	add	r3, r2, r3
    1c70:	ldr	r3, [r3, #8]
    1c74:	ldr	r3, [r3]
    1c78:	cmp	r3, #99	; 0x63
    1c7c:	bhi	1ca0 <coda_bin_cursor_read_uint8+0x5c>
    1c80:	ldr	r3, [fp, #-104]	; 0xffffff98
    1c84:	ldr	r3, [r3, #4]
    1c88:	sub	r3, r3, #1
    1c8c:	ldr	r2, [fp, #-104]	; 0xffffff98
    1c90:	lsl	r3, r3, #4
    1c94:	add	r3, r2, r3
    1c98:	ldr	r3, [r3, #8]
    1c9c:	b	1cc0 <coda_bin_cursor_read_uint8+0x7c>
    1ca0:	ldr	r3, [fp, #-104]	; 0xffffff98
    1ca4:	ldr	r3, [r3, #4]
    1ca8:	sub	r3, r3, #1
    1cac:	ldr	r2, [fp, #-104]	; 0xffffff98
    1cb0:	lsl	r3, r3, #4
    1cb4:	add	r3, r2, r3
    1cb8:	ldr	r3, [r3, #8]
    1cbc:	ldr	r3, [r3, #4]
    1cc0:	str	r3, [fp, #-32]	; 0xffffffe0
    1cc4:	ldr	r3, [fp, #-32]	; 0xffffffe0
    1cc8:	ldrd	r2, [r3, #24]
    1ccc:	strd	r2, [fp, #-52]	; 0xffffffcc
    1cd0:	ldr	r3, [fp, #-104]	; 0xffffff98
    1cd4:	ldr	r3, [r3, #4]
    1cd8:	sub	r3, r3, #1
    1cdc:	ldr	r2, [fp, #-104]	; 0xffffff98
    1ce0:	add	r3, r3, #1
    1ce4:	lsl	r3, r3, #4
    1ce8:	add	r3, r2, r3
    1cec:	ldrd	r2, [r3]
    1cf0:	strd	r2, [fp, #-44]	; 0xffffffd4
    1cf4:	ldrd	r2, [fp, #-52]	; 0xffffffcc
    1cf8:	mvn	r0, #0
    1cfc:	mvn	r1, #0
    1d00:	cmp	r3, r1
    1d04:	cmpeq	r2, r0
    1d08:	bne	1dec <coda_bin_cursor_read_uint8+0x1a8>
    1d0c:	sub	r3, fp, #52	; 0x34
    1d10:	mov	r1, r3
    1d14:	ldr	r0, [fp, #-104]	; 0xffffff98
    1d18:	bl	1570 <coda_bin_cursor_get_bit_size>
    1d1c:	mov	r3, r0
    1d20:	cmp	r3, #0
    1d24:	beq	1d30 <coda_bin_cursor_read_uint8+0xec>
    1d28:	mvn	r3, #0
    1d2c:	b	1f08 <coda_bin_cursor_read_uint8+0x2c4>
    1d30:	ldrd	r2, [fp, #-52]	; 0xffffffcc
    1d34:	cmp	r2, #0
    1d38:	sbcs	r3, r3, #0
    1d3c:	blt	1d50 <coda_bin_cursor_read_uint8+0x10c>
    1d40:	ldrd	r2, [fp, #-52]	; 0xffffffcc
    1d44:	cmp	r2, #9
    1d48:	sbcs	r3, r3, #0
    1d4c:	blt	1dec <coda_bin_cursor_read_uint8+0x1a8>
    1d50:	ldrd	r0, [fp, #-52]	; 0xffffffcc
    1d54:	sub	r3, fp, #76	; 0x4c
    1d58:	mov	r2, r3
    1d5c:	bl	0 <coda_str64>
    1d60:	ldr	r3, [fp, #-104]	; 0xffffff98
    1d64:	ldr	r3, [r3, #4]
    1d68:	sub	r3, r3, #1
    1d6c:	ldr	r2, [fp, #-104]	; 0xffffff98
    1d70:	add	r3, r3, #1
    1d74:	lsl	r3, r3, #4
    1d78:	add	r3, r2, r3
    1d7c:	ldrd	r2, [r3]
    1d80:	lsr	r8, r2, #3
    1d84:	orr	r8, r8, r3, lsl #29
    1d88:	asr	r9, r3, #3
    1d8c:	sub	r3, fp, #100	; 0x64
    1d90:	mov	r2, r3
    1d94:	mov	r0, r8
    1d98:	mov	r1, r9
    1d9c:	bl	0 <coda_str64>
    1da0:	ldr	r3, [fp, #-104]	; 0xffffff98
    1da4:	ldr	r3, [r3, #4]
    1da8:	sub	r3, r3, #1
    1dac:	ldr	r2, [fp, #-104]	; 0xffffff98
    1db0:	add	r3, r3, #1
    1db4:	lsl	r3, r3, #4
    1db8:	add	r3, r2, r3
    1dbc:	ldrd	r2, [r3]
    1dc0:	mov	r3, r2
    1dc4:	and	r3, r3, #7
    1dc8:	sub	r1, fp, #100	; 0x64
    1dcc:	sub	r2, fp, #76	; 0x4c
    1dd0:	str	r3, [sp]
    1dd4:	mov	r3, r1
    1dd8:	ldr	r1, [pc, #308]	; 1f14 <coda_bin_cursor_read_uint8+0x2d0>
    1ddc:	ldr	r0, [pc, #308]	; 1f18 <coda_bin_cursor_read_uint8+0x2d4>
    1de0:	bl	0 <coda_set_error>
    1de4:	mvn	r3, #0
    1de8:	b	1f08 <coda_bin_cursor_read_uint8+0x2c4>
    1dec:	ldrd	r2, [fp, #-44]	; 0xffffffd4
    1df0:	mov	r0, #7
    1df4:	mov	r1, #0
    1df8:	and	r2, r2, r0
    1dfc:	and	r3, r3, r1
    1e00:	orrs	r3, r2, r3
    1e04:	bne	1e18 <coda_bin_cursor_read_uint8+0x1d4>
    1e08:	ldrd	r2, [fp, #-52]	; 0xffffffcc
    1e0c:	cmp	r3, #0
    1e10:	cmpeq	r2, #8
    1e14:	beq	1eb4 <coda_bin_cursor_read_uint8+0x270>
    1e18:	ldrd	r2, [fp, #-52]	; 0xffffffcc
    1e1c:	lsr	r4, r2, #3
    1e20:	orr	r4, r4, r3, lsl #29
    1e24:	asr	r5, r3, #3
    1e28:	ldrd	r2, [fp, #-52]	; 0xffffffcc
    1e2c:	uxtb	r3, r2
    1e30:	and	r3, r3, #7
    1e34:	cmp	r3, #0
    1e38:	movne	r3, #1
    1e3c:	moveq	r3, #0
    1e40:	uxtb	r3, r3
    1e44:	uxtb	r2, r3
    1e48:	mov	r3, #0
    1e4c:	adds	r2, r2, r4
    1e50:	adc	r3, r3, r5
    1e54:	cmp	r2, #2
    1e58:	sbcs	r3, r3, #0
    1e5c:	blt	1e74 <coda_bin_cursor_read_uint8+0x230>
    1e60:	ldr	r3, [pc, #180]	; 1f1c <coda_bin_cursor_read_uint8+0x2d8>
    1e64:	mov	r2, #233	; 0xe9
    1e68:	ldr	r1, [pc, #176]	; 1f20 <coda_bin_cursor_read_uint8+0x2dc>
    1e6c:	ldr	r0, [pc, #176]	; 1f24 <coda_bin_cursor_read_uint8+0x2e0>
    1e70:	bl	0 <__assert_fail>
    1e74:	ldr	r3, [fp, #-108]	; 0xffffff94
    1e78:	mov	r2, #0
    1e7c:	strb	r2, [r3]
    1e80:	ldr	r3, [fp, #-104]	; 0xffffff98
    1e84:	ldr	r0, [r3]
    1e88:	ldrd	r2, [fp, #-52]	; 0xffffffcc
    1e8c:	ldr	r1, [fp, #-108]	; 0xffffff94
    1e90:	str	r1, [sp, #8]
    1e94:	strd	r2, [sp]
    1e98:	ldrd	r2, [fp, #-44]	; 0xffffffd4
    1e9c:	bl	1e4 <read_bits>
    1ea0:	mov	r3, r0
    1ea4:	cmp	r3, #0
    1ea8:	beq	1f04 <coda_bin_cursor_read_uint8+0x2c0>
    1eac:	mvn	r3, #0
    1eb0:	b	1f08 <coda_bin_cursor_read_uint8+0x2c4>
    1eb4:	ldr	r3, [fp, #-104]	; 0xffffff98
    1eb8:	ldr	r1, [r3]
    1ebc:	ldrd	r2, [fp, #-44]	; 0xffffffd4
    1ec0:	lsr	r6, r2, #3
    1ec4:	orr	r6, r6, r3, lsl #29
    1ec8:	asr	r7, r3, #3
    1ecc:	ldr	r3, [fp, #-108]	; 0xffffff94
    1ed0:	str	r3, [sp, #8]
    1ed4:	mov	r2, #1
    1ed8:	mov	r3, #0
    1edc:	strd	r2, [sp]
    1ee0:	mov	r2, r6
    1ee4:	mov	r3, r7
    1ee8:	mov	r0, r1
    1eec:	bl	0 <read_bytes>
    1ef0:	mov	r3, r0
    1ef4:	cmp	r3, #0
    1ef8:	beq	1f04 <coda_bin_cursor_read_uint8+0x2c0>
    1efc:	mvn	r3, #0
    1f00:	b	1f08 <coda_bin_cursor_read_uint8+0x2c4>
    1f04:	mov	r3, #0
    1f08:	mov	r0, r3
    1f0c:	sub	sp, fp, #28
    1f10:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
    1f14:	.word	0x000002dc
    1f18:	.word	0xfffffed4
    1f1c:	.word	0x000006dc
    1f20:	.word	0x00000264
    1f24:	.word	0x000002b4

00001f28 <coda_bin_cursor_read_int16>:
    1f28:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
    1f2c:	add	fp, sp, #28
    1f30:	sub	sp, sp, #112	; 0x70
    1f34:	str	r0, [fp, #-120]	; 0xffffff88
    1f38:	str	r1, [fp, #-124]	; 0xffffff84
    1f3c:	ldr	r3, [fp, #-120]	; 0xffffff88
    1f40:	ldr	r3, [r3, #4]
    1f44:	sub	r3, r3, #1
    1f48:	ldr	r2, [fp, #-120]	; 0xffffff88
    1f4c:	lsl	r3, r3, #4
    1f50:	add	r3, r2, r3
    1f54:	ldr	r3, [r3, #8]
    1f58:	ldr	r3, [r3]
    1f5c:	cmp	r3, #99	; 0x63
    1f60:	bhi	1f84 <coda_bin_cursor_read_int16+0x5c>
    1f64:	ldr	r3, [fp, #-120]	; 0xffffff88
    1f68:	ldr	r3, [r3, #4]
    1f6c:	sub	r3, r3, #1
    1f70:	ldr	r2, [fp, #-120]	; 0xffffff88
    1f74:	lsl	r3, r3, #4
    1f78:	add	r3, r2, r3
    1f7c:	ldr	r3, [r3, #8]
    1f80:	b	1fa4 <coda_bin_cursor_read_int16+0x7c>
    1f84:	ldr	r3, [fp, #-120]	; 0xffffff88
    1f88:	ldr	r3, [r3, #4]
    1f8c:	sub	r3, r3, #1
    1f90:	ldr	r2, [fp, #-120]	; 0xffffff88
    1f94:	lsl	r3, r3, #4
    1f98:	add	r3, r2, r3
    1f9c:	ldr	r3, [r3, #8]
    1fa0:	ldr	r3, [r3, #4]
    1fa4:	str	r3, [fp, #-36]	; 0xffffffdc
    1fa8:	ldr	r3, [fp, #-36]	; 0xffffffdc
    1fac:	ldrd	r2, [r3, #24]
    1fb0:	strd	r2, [fp, #-60]	; 0xffffffc4
    1fb4:	ldr	r3, [fp, #-120]	; 0xffffff88
    1fb8:	ldr	r3, [r3, #4]
    1fbc:	sub	r3, r3, #1
    1fc0:	ldr	r2, [fp, #-120]	; 0xffffff88
    1fc4:	add	r3, r3, #1
    1fc8:	lsl	r3, r3, #4
    1fcc:	add	r3, r2, r3
    1fd0:	ldrd	r2, [r3]
    1fd4:	strd	r2, [fp, #-44]	; 0xffffffd4
    1fd8:	ldr	r3, [fp, #-36]	; 0xffffffdc
    1fdc:	ldr	r3, [r3, #44]	; 0x2c
    1fe0:	str	r3, [fp, #-48]	; 0xffffffd0
    1fe4:	ldrd	r2, [fp, #-60]	; 0xffffffc4
    1fe8:	mvn	r0, #0
    1fec:	mvn	r1, #0
    1ff0:	cmp	r3, r1
    1ff4:	cmpeq	r2, r0
    1ff8:	bne	20dc <coda_bin_cursor_read_int16+0x1b4>
    1ffc:	sub	r3, fp, #60	; 0x3c
    2000:	mov	r1, r3
    2004:	ldr	r0, [fp, #-120]	; 0xffffff88
    2008:	bl	1570 <coda_bin_cursor_get_bit_size>
    200c:	mov	r3, r0
    2010:	cmp	r3, #0
    2014:	beq	2020 <coda_bin_cursor_read_int16+0xf8>
    2018:	mvn	r3, #0
    201c:	b	2294 <coda_bin_cursor_read_int16+0x36c>
    2020:	ldrd	r2, [fp, #-60]	; 0xffffffc4
    2024:	cmp	r2, #0
    2028:	sbcs	r3, r3, #0
    202c:	blt	2040 <coda_bin_cursor_read_int16+0x118>
    2030:	ldrd	r2, [fp, #-60]	; 0xffffffc4
    2034:	cmp	r2, #17
    2038:	sbcs	r3, r3, #0
    203c:	blt	20dc <coda_bin_cursor_read_int16+0x1b4>
    2040:	ldrd	r0, [fp, #-60]	; 0xffffffc4
    2044:	sub	r3, fp, #84	; 0x54
    2048:	mov	r2, r3
    204c:	bl	0 <coda_str64>
    2050:	ldr	r3, [fp, #-120]	; 0xffffff88
    2054:	ldr	r3, [r3, #4]
    2058:	sub	r3, r3, #1
    205c:	ldr	r2, [fp, #-120]	; 0xffffff88
    2060:	add	r3, r3, #1
    2064:	lsl	r3, r3, #4
    2068:	add	r3, r2, r3
    206c:	ldrd	r2, [r3]
    2070:	lsr	r8, r2, #3
    2074:	orr	r8, r8, r3, lsl #29
    2078:	asr	r9, r3, #3
    207c:	sub	r3, fp, #108	; 0x6c
    2080:	mov	r2, r3
    2084:	mov	r0, r8
    2088:	mov	r1, r9
    208c:	bl	0 <coda_str64>
    2090:	ldr	r3, [fp, #-120]	; 0xffffff88
    2094:	ldr	r3, [r3, #4]
    2098:	sub	r3, r3, #1
    209c:	ldr	r2, [fp, #-120]	; 0xffffff88
    20a0:	add	r3, r3, #1
    20a4:	lsl	r3, r3, #4
    20a8:	add	r3, r2, r3
    20ac:	ldrd	r2, [r3]
    20b0:	mov	r3, r2
    20b4:	and	r3, r3, #7
    20b8:	sub	r1, fp, #108	; 0x6c
    20bc:	sub	r2, fp, #84	; 0x54
    20c0:	str	r3, [sp]
    20c4:	mov	r3, r1
    20c8:	ldr	r1, [pc, #464]	; 22a0 <coda_bin_cursor_read_int16+0x378>
    20cc:	ldr	r0, [pc, #464]	; 22a4 <coda_bin_cursor_read_int16+0x37c>
    20d0:	bl	0 <coda_set_error>
    20d4:	mvn	r3, #0
    20d8:	b	2294 <coda_bin_cursor_read_int16+0x36c>
    20dc:	ldrd	r2, [fp, #-44]	; 0xffffffd4
    20e0:	mov	r0, #7
    20e4:	mov	r1, #0
    20e8:	and	r2, r2, r0
    20ec:	and	r3, r3, r1
    20f0:	orrs	r3, r2, r3
    20f4:	bne	2108 <coda_bin_cursor_read_int16+0x1e0>
    20f8:	ldrd	r2, [fp, #-60]	; 0xffffffc4
    20fc:	cmp	r3, #0
    2100:	cmpeq	r2, #16
    2104:	beq	21a0 <coda_bin_cursor_read_int16+0x278>
    2108:	ldr	r3, [fp, #-124]	; 0xffffff84
    210c:	str	r3, [fp, #-32]	; 0xffffffe0
    2110:	ldr	r3, [fp, #-48]	; 0xffffffd0
    2114:	cmp	r3, #0
    2118:	bne	2160 <coda_bin_cursor_read_int16+0x238>
    211c:	ldrd	r2, [fp, #-60]	; 0xffffffc4
    2120:	lsr	r6, r2, #3
    2124:	orr	r6, r6, r3, lsl #29
    2128:	asr	r7, r3, #3
    212c:	mov	r1, r6
    2130:	ldrd	r2, [fp, #-60]	; 0xffffffc4
    2134:	uxtb	r3, r2
    2138:	and	r3, r3, #7
    213c:	cmp	r3, #0
    2140:	movne	r3, #1
    2144:	moveq	r3, #0
    2148:	uxtb	r3, r3
    214c:	add	r3, r1, r3
    2150:	rsb	r3, r3, #2
    2154:	ldr	r2, [fp, #-124]	; 0xffffff84
    2158:	add	r3, r2, r3
    215c:	str	r3, [fp, #-32]	; 0xffffffe0
    2160:	ldr	r3, [fp, #-124]	; 0xffffff84
    2164:	mov	r2, #0
    2168:	strh	r2, [r3]
    216c:	ldr	r3, [fp, #-120]	; 0xffffff88
    2170:	ldr	r0, [r3]
    2174:	ldrd	r2, [fp, #-60]	; 0xffffffc4
    2178:	ldr	r1, [fp, #-32]	; 0xffffffe0
    217c:	str	r1, [sp, #8]
    2180:	strd	r2, [sp]
    2184:	ldrd	r2, [fp, #-44]	; 0xffffffd4
    2188:	bl	1e4 <read_bits>
    218c:	mov	r3, r0
    2190:	cmp	r3, #0
    2194:	beq	21f0 <coda_bin_cursor_read_int16+0x2c8>
    2198:	mvn	r3, #0
    219c:	b	2294 <coda_bin_cursor_read_int16+0x36c>
    21a0:	ldr	r3, [fp, #-120]	; 0xffffff88
    21a4:	ldr	r1, [r3]
    21a8:	ldrd	r2, [fp, #-44]	; 0xffffffd4
    21ac:	lsr	r4, r2, #3
    21b0:	orr	r4, r4, r3, lsl #29
    21b4:	asr	r5, r3, #3
    21b8:	ldr	r3, [fp, #-124]	; 0xffffff84
    21bc:	str	r3, [sp, #8]
    21c0:	mov	r2, #2
    21c4:	mov	r3, #0
    21c8:	strd	r2, [sp]
    21cc:	mov	r2, r4
    21d0:	mov	r3, r5
    21d4:	mov	r0, r1
    21d8:	bl	0 <read_bytes>
    21dc:	mov	r3, r0
    21e0:	cmp	r3, #0
    21e4:	beq	21f4 <coda_bin_cursor_read_int16+0x2cc>
    21e8:	mvn	r3, #0
    21ec:	b	2294 <coda_bin_cursor_read_int16+0x36c>
    21f0:	nop			; (mov r0, r0)
    21f4:	ldr	r3, [fp, #-48]	; 0xffffffd0
    21f8:	cmp	r3, #0
    21fc:	bne	2224 <coda_bin_cursor_read_int16+0x2fc>
    2200:	ldr	r3, [fp, #-124]	; 0xffffff84
    2204:	ldrb	r3, [r3, #1]
    2208:	strb	r3, [fp, #-112]	; 0xffffff90
    220c:	ldr	r3, [fp, #-124]	; 0xffffff84
    2210:	ldrb	r3, [r3]
    2214:	strb	r3, [fp, #-111]	; 0xffffff91
    2218:	ldrsh	r2, [fp, #-112]	; 0xffffff90
    221c:	ldr	r3, [fp, #-124]	; 0xffffff84
    2220:	strh	r2, [r3]
    2224:	ldrd	r2, [fp, #-60]	; 0xffffffc4
    2228:	cmp	r2, #16
    222c:	sbcs	r3, r3, #0
    2230:	bge	2290 <coda_bin_cursor_read_int16+0x368>
    2234:	ldr	r3, [fp, #-124]	; 0xffffff84
    2238:	ldrh	r3, [r3]
    223c:	strh	r3, [fp, #-50]	; 0xffffffce
    2240:	ldrh	r1, [fp, #-50]	; 0xffffffce
    2244:	ldrd	r2, [fp, #-60]	; 0xffffffc4
    2248:	mov	r3, r2
    224c:	sub	r3, r3, #1
    2250:	asr	r3, r1, r3
    2254:	and	r3, r3, #1
    2258:	cmp	r3, #0
    225c:	beq	2290 <coda_bin_cursor_read_int16+0x368>
    2260:	ldrd	r2, [fp, #-60]	; 0xffffffc4
    2264:	mov	r3, #1
    2268:	lsl	r3, r3, r2
    226c:	uxth	r3, r3
    2270:	rsb	r3, r3, #0
    2274:	uxth	r3, r3
    2278:	sxth	r2, r3
    227c:	ldrsh	r3, [fp, #-50]	; 0xffffffce
    2280:	orr	r3, r2, r3
    2284:	sxth	r2, r3
    2288:	ldr	r3, [fp, #-124]	; 0xffffff84
    228c:	strh	r2, [r3]
    2290:	mov	r3, #0
    2294:	mov	r0, r3
    2298:	sub	sp, fp, #28
    229c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
    22a0:	.word	0x00000348
    22a4:	.word	0xfffffed4

000022a8 <coda_bin_cursor_read_uint16>:
    22a8:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
    22ac:	add	fp, sp, #28
    22b0:	sub	sp, sp, #112	; 0x70
    22b4:	str	r0, [fp, #-120]	; 0xffffff88
    22b8:	str	r1, [fp, #-124]	; 0xffffff84
    22bc:	ldr	r3, [fp, #-120]	; 0xffffff88
    22c0:	ldr	r3, [r3, #4]
    22c4:	sub	r3, r3, #1
    22c8:	ldr	r2, [fp, #-120]	; 0xffffff88
    22cc:	lsl	r3, r3, #4
    22d0:	add	r3, r2, r3
    22d4:	ldr	r3, [r3, #8]
    22d8:	ldr	r3, [r3]
    22dc:	cmp	r3, #99	; 0x63
    22e0:	bhi	2304 <coda_bin_cursor_read_uint16+0x5c>
    22e4:	ldr	r3, [fp, #-120]	; 0xffffff88
    22e8:	ldr	r3, [r3, #4]
    22ec:	sub	r3, r3, #1
    22f0:	ldr	r2, [fp, #-120]	; 0xffffff88
    22f4:	lsl	r3, r3, #4
    22f8:	add	r3, r2, r3
    22fc:	ldr	r3, [r3, #8]
    2300:	b	2324 <coda_bin_cursor_read_uint16+0x7c>
    2304:	ldr	r3, [fp, #-120]	; 0xffffff88
    2308:	ldr	r3, [r3, #4]
    230c:	sub	r3, r3, #1
    2310:	ldr	r2, [fp, #-120]	; 0xffffff88
    2314:	lsl	r3, r3, #4
    2318:	add	r3, r2, r3
    231c:	ldr	r3, [r3, #8]
    2320:	ldr	r3, [r3, #4]
    2324:	str	r3, [fp, #-36]	; 0xffffffdc
    2328:	ldr	r3, [fp, #-36]	; 0xffffffdc
    232c:	ldrd	r2, [r3, #24]
    2330:	strd	r2, [fp, #-60]	; 0xffffffc4
    2334:	ldr	r3, [fp, #-120]	; 0xffffff88
    2338:	ldr	r3, [r3, #4]
    233c:	sub	r3, r3, #1
    2340:	ldr	r2, [fp, #-120]	; 0xffffff88
    2344:	add	r3, r3, #1
    2348:	lsl	r3, r3, #4
    234c:	add	r3, r2, r3
    2350:	ldrd	r2, [r3]
    2354:	strd	r2, [fp, #-44]	; 0xffffffd4
    2358:	ldr	r3, [fp, #-36]	; 0xffffffdc
    235c:	ldr	r3, [r3, #44]	; 0x2c
    2360:	str	r3, [fp, #-48]	; 0xffffffd0
    2364:	ldrd	r2, [fp, #-60]	; 0xffffffc4
    2368:	mvn	r0, #0
    236c:	mvn	r1, #0
    2370:	cmp	r3, r1
    2374:	cmpeq	r2, r0
    2378:	bne	245c <coda_bin_cursor_read_uint16+0x1b4>
    237c:	sub	r3, fp, #60	; 0x3c
    2380:	mov	r1, r3
    2384:	ldr	r0, [fp, #-120]	; 0xffffff88
    2388:	bl	1570 <coda_bin_cursor_get_bit_size>
    238c:	mov	r3, r0
    2390:	cmp	r3, #0
    2394:	beq	23a0 <coda_bin_cursor_read_uint16+0xf8>
    2398:	mvn	r3, #0
    239c:	b	25a8 <coda_bin_cursor_read_uint16+0x300>
    23a0:	ldrd	r2, [fp, #-60]	; 0xffffffc4
    23a4:	cmp	r2, #0
    23a8:	sbcs	r3, r3, #0
    23ac:	blt	23c0 <coda_bin_cursor_read_uint16+0x118>
    23b0:	ldrd	r2, [fp, #-60]	; 0xffffffc4
    23b4:	cmp	r2, #17
    23b8:	sbcs	r3, r3, #0
    23bc:	blt	245c <coda_bin_cursor_read_uint16+0x1b4>
    23c0:	ldrd	r0, [fp, #-60]	; 0xffffffc4
    23c4:	sub	r3, fp, #84	; 0x54
    23c8:	mov	r2, r3
    23cc:	bl	0 <coda_str64>
    23d0:	ldr	r3, [fp, #-120]	; 0xffffff88
    23d4:	ldr	r3, [r3, #4]
    23d8:	sub	r3, r3, #1
    23dc:	ldr	r2, [fp, #-120]	; 0xffffff88
    23e0:	add	r3, r3, #1
    23e4:	lsl	r3, r3, #4
    23e8:	add	r3, r2, r3
    23ec:	ldrd	r2, [r3]
    23f0:	lsr	r8, r2, #3
    23f4:	orr	r8, r8, r3, lsl #29
    23f8:	asr	r9, r3, #3
    23fc:	sub	r3, fp, #108	; 0x6c
    2400:	mov	r2, r3
    2404:	mov	r0, r8
    2408:	mov	r1, r9
    240c:	bl	0 <coda_str64>
    2410:	ldr	r3, [fp, #-120]	; 0xffffff88
    2414:	ldr	r3, [r3, #4]
    2418:	sub	r3, r3, #1
    241c:	ldr	r2, [fp, #-120]	; 0xffffff88
    2420:	add	r3, r3, #1
    2424:	lsl	r3, r3, #4
    2428:	add	r3, r2, r3
    242c:	ldrd	r2, [r3]
    2430:	mov	r3, r2
    2434:	and	r3, r3, #7
    2438:	sub	r1, fp, #108	; 0x6c
    243c:	sub	r2, fp, #84	; 0x54
    2440:	str	r3, [sp]
    2444:	mov	r3, r1
    2448:	ldr	r1, [pc, #356]	; 25b4 <coda_bin_cursor_read_uint16+0x30c>
    244c:	ldr	r0, [pc, #356]	; 25b8 <coda_bin_cursor_read_uint16+0x310>
    2450:	bl	0 <coda_set_error>
    2454:	mvn	r3, #0
    2458:	b	25a8 <coda_bin_cursor_read_uint16+0x300>
    245c:	ldrd	r2, [fp, #-44]	; 0xffffffd4
    2460:	mov	r0, #7
    2464:	mov	r1, #0
    2468:	and	r2, r2, r0
    246c:	and	r3, r3, r1
    2470:	orrs	r3, r2, r3
    2474:	bne	2488 <coda_bin_cursor_read_uint16+0x1e0>
    2478:	ldrd	r2, [fp, #-60]	; 0xffffffc4
    247c:	cmp	r3, #0
    2480:	cmpeq	r2, #16
    2484:	beq	2520 <coda_bin_cursor_read_uint16+0x278>
    2488:	ldr	r3, [fp, #-124]	; 0xffffff84
    248c:	str	r3, [fp, #-32]	; 0xffffffe0
    2490:	ldr	r3, [fp, #-48]	; 0xffffffd0
    2494:	cmp	r3, #0
    2498:	bne	24e0 <coda_bin_cursor_read_uint16+0x238>
    249c:	ldrd	r2, [fp, #-60]	; 0xffffffc4
    24a0:	lsr	r6, r2, #3
    24a4:	orr	r6, r6, r3, lsl #29
    24a8:	asr	r7, r3, #3
    24ac:	mov	r1, r6
    24b0:	ldrd	r2, [fp, #-60]	; 0xffffffc4
    24b4:	uxtb	r3, r2
    24b8:	and	r3, r3, #7
    24bc:	cmp	r3, #0
    24c0:	movne	r3, #1
    24c4:	moveq	r3, #0
    24c8:	uxtb	r3, r3
    24cc:	add	r3, r1, r3
    24d0:	rsb	r3, r3, #2
    24d4:	ldr	r2, [fp, #-124]	; 0xffffff84
    24d8:	add	r3, r2, r3
    24dc:	str	r3, [fp, #-32]	; 0xffffffe0
    24e0:	ldr	r3, [fp, #-124]	; 0xffffff84
    24e4:	mov	r2, #0
    24e8:	strh	r2, [r3]
    24ec:	ldr	r3, [fp, #-120]	; 0xffffff88
    24f0:	ldr	r0, [r3]
    24f4:	ldrd	r2, [fp, #-60]	; 0xffffffc4
    24f8:	ldr	r1, [fp, #-32]	; 0xffffffe0
    24fc:	str	r1, [sp, #8]
    2500:	strd	r2, [sp]
    2504:	ldrd	r2, [fp, #-44]	; 0xffffffd4
    2508:	bl	1e4 <read_bits>
    250c:	mov	r3, r0
    2510:	cmp	r3, #0
    2514:	beq	2570 <coda_bin_cursor_read_uint16+0x2c8>
    2518:	mvn	r3, #0
    251c:	b	25a8 <coda_bin_cursor_read_uint16+0x300>
    2520:	ldr	r3, [fp, #-120]	; 0xffffff88
    2524:	ldr	r1, [r3]
    2528:	ldrd	r2, [fp, #-44]	; 0xffffffd4
    252c:	lsr	r4, r2, #3
    2530:	orr	r4, r4, r3, lsl #29
    2534:	asr	r5, r3, #3
    2538:	ldr	r3, [fp, #-124]	; 0xffffff84
    253c:	str	r3, [sp, #8]
    2540:	mov	r2, #2
    2544:	mov	r3, #0
    2548:	strd	r2, [sp]
    254c:	mov	r2, r4
    2550:	mov	r3, r5
    2554:	mov	r0, r1
    2558:	bl	0 <read_bytes>
    255c:	mov	r3, r0
    2560:	cmp	r3, #0
    2564:	beq	2574 <coda_bin_cursor_read_uint16+0x2cc>
    2568:	mvn	r3, #0
    256c:	b	25a8 <coda_bin_cursor_read_uint16+0x300>
    2570:	nop			; (mov r0, r0)
    2574:	ldr	r3, [fp, #-48]	; 0xffffffd0
    2578:	cmp	r3, #0
    257c:	bne	25a4 <coda_bin_cursor_read_uint16+0x2fc>
    2580:	ldr	r3, [fp, #-124]	; 0xffffff84
    2584:	ldrb	r3, [r3, #1]
    2588:	strb	r3, [fp, #-112]	; 0xffffff90
    258c:	ldr	r3, [fp, #-124]	; 0xffffff84
    2590:	ldrb	r3, [r3]
    2594:	strb	r3, [fp, #-111]	; 0xffffff91
    2598:	ldrh	r2, [fp, #-112]	; 0xffffff90
    259c:	ldr	r3, [fp, #-124]	; 0xffffff84
    25a0:	strh	r2, [r3]
    25a4:	mov	r3, #0
    25a8:	mov	r0, r3
    25ac:	sub	sp, fp, #28
    25b0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
    25b4:	.word	0x000003b4
    25b8:	.word	0xfffffed4

000025bc <coda_bin_cursor_read_int32>:
    25bc:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
    25c0:	add	fp, sp, #28
    25c4:	sub	sp, sp, #112	; 0x70
    25c8:	str	r0, [fp, #-120]	; 0xffffff88
    25cc:	str	r1, [fp, #-124]	; 0xffffff84
    25d0:	ldr	r3, [fp, #-120]	; 0xffffff88
    25d4:	ldr	r3, [r3, #4]
    25d8:	sub	r3, r3, #1
    25dc:	ldr	r2, [fp, #-120]	; 0xffffff88
    25e0:	lsl	r3, r3, #4
    25e4:	add	r3, r2, r3
    25e8:	ldr	r3, [r3, #8]
    25ec:	ldr	r3, [r3]
    25f0:	cmp	r3, #99	; 0x63
    25f4:	bhi	2618 <coda_bin_cursor_read_int32+0x5c>
    25f8:	ldr	r3, [fp, #-120]	; 0xffffff88
    25fc:	ldr	r3, [r3, #4]
    2600:	sub	r3, r3, #1
    2604:	ldr	r2, [fp, #-120]	; 0xffffff88
    2608:	lsl	r3, r3, #4
    260c:	add	r3, r2, r3
    2610:	ldr	r3, [r3, #8]
    2614:	b	2638 <coda_bin_cursor_read_int32+0x7c>
    2618:	ldr	r3, [fp, #-120]	; 0xffffff88
    261c:	ldr	r3, [r3, #4]
    2620:	sub	r3, r3, #1
    2624:	ldr	r2, [fp, #-120]	; 0xffffff88
    2628:	lsl	r3, r3, #4
    262c:	add	r3, r2, r3
    2630:	ldr	r3, [r3, #8]
    2634:	ldr	r3, [r3, #4]
    2638:	str	r3, [fp, #-36]	; 0xffffffdc
    263c:	ldr	r3, [fp, #-36]	; 0xffffffdc
    2640:	ldrd	r2, [r3, #24]
    2644:	strd	r2, [fp, #-60]	; 0xffffffc4
    2648:	ldr	r3, [fp, #-120]	; 0xffffff88
    264c:	ldr	r3, [r3, #4]
    2650:	sub	r3, r3, #1
    2654:	ldr	r2, [fp, #-120]	; 0xffffff88
    2658:	add	r3, r3, #1
    265c:	lsl	r3, r3, #4
    2660:	add	r3, r2, r3
    2664:	ldrd	r2, [r3]
    2668:	strd	r2, [fp, #-44]	; 0xffffffd4
    266c:	ldr	r3, [fp, #-36]	; 0xffffffdc
    2670:	ldr	r3, [r3, #44]	; 0x2c
    2674:	str	r3, [fp, #-48]	; 0xffffffd0
    2678:	ldrd	r2, [fp, #-60]	; 0xffffffc4
    267c:	mvn	r0, #0
    2680:	mvn	r1, #0
    2684:	cmp	r3, r1
    2688:	cmpeq	r2, r0
    268c:	bne	2770 <coda_bin_cursor_read_int32+0x1b4>
    2690:	sub	r3, fp, #60	; 0x3c
    2694:	mov	r1, r3
    2698:	ldr	r0, [fp, #-120]	; 0xffffff88
    269c:	bl	1570 <coda_bin_cursor_get_bit_size>
    26a0:	mov	r3, r0
    26a4:	cmp	r3, #0
    26a8:	beq	26b4 <coda_bin_cursor_read_int32+0xf8>
    26ac:	mvn	r3, #0
    26b0:	b	2940 <coda_bin_cursor_read_int32+0x384>
    26b4:	ldrd	r2, [fp, #-60]	; 0xffffffc4
    26b8:	cmp	r2, #0
    26bc:	sbcs	r3, r3, #0
    26c0:	blt	26d4 <coda_bin_cursor_read_int32+0x118>
    26c4:	ldrd	r2, [fp, #-60]	; 0xffffffc4
    26c8:	cmp	r2, #33	; 0x21
    26cc:	sbcs	r3, r3, #0
    26d0:	blt	2770 <coda_bin_cursor_read_int32+0x1b4>
    26d4:	ldrd	r0, [fp, #-60]	; 0xffffffc4
    26d8:	sub	r3, fp, #84	; 0x54
    26dc:	mov	r2, r3
    26e0:	bl	0 <coda_str64>
    26e4:	ldr	r3, [fp, #-120]	; 0xffffff88
    26e8:	ldr	r3, [r3, #4]
    26ec:	sub	r3, r3, #1
    26f0:	ldr	r2, [fp, #-120]	; 0xffffff88
    26f4:	add	r3, r3, #1
    26f8:	lsl	r3, r3, #4
    26fc:	add	r3, r2, r3
    2700:	ldrd	r2, [r3]
    2704:	lsr	r8, r2, #3
    2708:	orr	r8, r8, r3, lsl #29
    270c:	asr	r9, r3, #3
    2710:	sub	r3, fp, #108	; 0x6c
    2714:	mov	r2, r3
    2718:	mov	r0, r8
    271c:	mov	r1, r9
    2720:	bl	0 <coda_str64>
    2724:	ldr	r3, [fp, #-120]	; 0xffffff88
    2728:	ldr	r3, [r3, #4]
    272c:	sub	r3, r3, #1
    2730:	ldr	r2, [fp, #-120]	; 0xffffff88
    2734:	add	r3, r3, #1
    2738:	lsl	r3, r3, #4
    273c:	add	r3, r2, r3
    2740:	ldrd	r2, [r3]
    2744:	mov	r3, r2
    2748:	and	r3, r3, #7
    274c:	sub	r1, fp, #108	; 0x6c
    2750:	sub	r2, fp, #84	; 0x54
    2754:	str	r3, [sp]
    2758:	mov	r3, r1
    275c:	ldr	r1, [pc, #488]	; 294c <coda_bin_cursor_read_int32+0x390>
    2760:	ldr	r0, [pc, #488]	; 2950 <coda_bin_cursor_read_int32+0x394>
    2764:	bl	0 <coda_set_error>
    2768:	mvn	r3, #0
    276c:	b	2940 <coda_bin_cursor_read_int32+0x384>
    2770:	ldrd	r2, [fp, #-44]	; 0xffffffd4
    2774:	mov	r0, #7
    2778:	mov	r1, #0
    277c:	and	r2, r2, r0
    2780:	and	r3, r3, r1
    2784:	orrs	r3, r2, r3
    2788:	bne	279c <coda_bin_cursor_read_int32+0x1e0>
    278c:	ldrd	r2, [fp, #-60]	; 0xffffffc4
    2790:	cmp	r3, #0
    2794:	cmpeq	r2, #32
    2798:	beq	2834 <coda_bin_cursor_read_int32+0x278>
    279c:	ldr	r3, [fp, #-124]	; 0xffffff84
    27a0:	str	r3, [fp, #-32]	; 0xffffffe0
    27a4:	ldr	r3, [fp, #-48]	; 0xffffffd0
    27a8:	cmp	r3, #0
    27ac:	bne	27f4 <coda_bin_cursor_read_int32+0x238>
    27b0:	ldrd	r2, [fp, #-60]	; 0xffffffc4
    27b4:	lsr	r6, r2, #3
    27b8:	orr	r6, r6, r3, lsl #29
    27bc:	asr	r7, r3, #3
    27c0:	mov	r1, r6
    27c4:	ldrd	r2, [fp, #-60]	; 0xffffffc4
    27c8:	uxtb	r3, r2
    27cc:	and	r3, r3, #7
    27d0:	cmp	r3, #0
    27d4:	movne	r3, #1
    27d8:	moveq	r3, #0
    27dc:	uxtb	r3, r3
    27e0:	add	r3, r1, r3
    27e4:	rsb	r3, r3, #4
    27e8:	ldr	r2, [fp, #-124]	; 0xffffff84
    27ec:	add	r3, r2, r3
    27f0:	str	r3, [fp, #-32]	; 0xffffffe0
    27f4:	ldr	r3, [fp, #-124]	; 0xffffff84
    27f8:	mov	r2, #0
    27fc:	str	r2, [r3]
    2800:	ldr	r3, [fp, #-120]	; 0xffffff88
    2804:	ldr	r0, [r3]
    2808:	ldrd	r2, [fp, #-60]	; 0xffffffc4
    280c:	ldr	r1, [fp, #-32]	; 0xffffffe0
    2810:	str	r1, [sp, #8]
    2814:	strd	r2, [sp]
    2818:	ldrd	r2, [fp, #-44]	; 0xffffffd4
    281c:	bl	1e4 <read_bits>
    2820:	mov	r3, r0
    2824:	cmp	r3, #0
    2828:	beq	2884 <coda_bin_cursor_read_int32+0x2c8>
    282c:	mvn	r3, #0
    2830:	b	2940 <coda_bin_cursor_read_int32+0x384>
    2834:	ldr	r3, [fp, #-120]	; 0xffffff88
    2838:	ldr	r1, [r3]
    283c:	ldrd	r2, [fp, #-44]	; 0xffffffd4
    2840:	lsr	r4, r2, #3
    2844:	orr	r4, r4, r3, lsl #29
    2848:	asr	r5, r3, #3
    284c:	ldr	r3, [fp, #-124]	; 0xffffff84
    2850:	str	r3, [sp, #8]
    2854:	mov	r2, #4
    2858:	mov	r3, #0
    285c:	strd	r2, [sp]
    2860:	mov	r2, r4
    2864:	mov	r3, r5
    2868:	mov	r0, r1
    286c:	bl	0 <read_bytes>
    2870:	mov	r3, r0
    2874:	cmp	r3, #0
    2878:	beq	2888 <coda_bin_cursor_read_int32+0x2cc>
    287c:	mvn	r3, #0
    2880:	b	2940 <coda_bin_cursor_read_int32+0x384>
    2884:	nop			; (mov r0, r0)
    2888:	ldr	r3, [fp, #-48]	; 0xffffffd0
    288c:	cmp	r3, #0
    2890:	bne	28d0 <coda_bin_cursor_read_int32+0x314>
    2894:	ldr	r3, [fp, #-124]	; 0xffffff84
    2898:	ldrb	r3, [r3, #3]
    289c:	strb	r3, [fp, #-112]	; 0xffffff90
    28a0:	ldr	r3, [fp, #-124]	; 0xffffff84
    28a4:	ldrb	r3, [r3, #2]
    28a8:	strb	r3, [fp, #-111]	; 0xffffff91
    28ac:	ldr	r3, [fp, #-124]	; 0xffffff84
    28b0:	ldrb	r3, [r3, #1]
    28b4:	strb	r3, [fp, #-110]	; 0xffffff92
    28b8:	ldr	r3, [fp, #-124]	; 0xffffff84
    28bc:	ldrb	r3, [r3]
    28c0:	strb	r3, [fp, #-109]	; 0xffffff93
    28c4:	ldr	r2, [fp, #-112]	; 0xffffff90
    28c8:	ldr	r3, [fp, #-124]	; 0xffffff84
    28cc:	str	r2, [r3]
    28d0:	ldrd	r2, [fp, #-60]	; 0xffffffc4
    28d4:	cmp	r2, #32
    28d8:	sbcs	r3, r3, #0
    28dc:	bge	293c <coda_bin_cursor_read_int32+0x380>
    28e0:	ldr	r3, [fp, #-124]	; 0xffffff84
    28e4:	ldr	r3, [r3]
    28e8:	str	r3, [fp, #-52]	; 0xffffffcc
    28ec:	ldrd	r2, [fp, #-60]	; 0xffffffc4
    28f0:	mov	r3, r2
    28f4:	sub	r3, r3, #1
    28f8:	mov	r2, #1
    28fc:	lsl	r3, r2, r3
    2900:	mov	r2, r3
    2904:	ldr	r3, [fp, #-52]	; 0xffffffcc
    2908:	and	r3, r3, r2
    290c:	cmp	r3, #0
    2910:	beq	293c <coda_bin_cursor_read_int32+0x380>
    2914:	ldrd	r2, [fp, #-60]	; 0xffffffc4
    2918:	mov	r3, #1
    291c:	lsl	r3, r3, r2
    2920:	rsb	r3, r3, #0
    2924:	mov	r2, r3
    2928:	ldr	r3, [fp, #-52]	; 0xffffffcc
    292c:	orr	r3, r2, r3
    2930:	mov	r2, r3
    2934:	ldr	r3, [fp, #-124]	; 0xffffff84
    2938:	str	r2, [r3]
    293c:	mov	r3, #0
    2940:	mov	r0, r3
    2944:	sub	sp, fp, #28
    2948:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
    294c:	.word	0x00000420
    2950:	.word	0xfffffed4

00002954 <coda_bin_cursor_read_uint32>:
    2954:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
    2958:	add	fp, sp, #28
    295c:	sub	sp, sp, #112	; 0x70
    2960:	str	r0, [fp, #-120]	; 0xffffff88
    2964:	str	r1, [fp, #-124]	; 0xffffff84
    2968:	ldr	r3, [fp, #-120]	; 0xffffff88
    296c:	ldr	r3, [r3, #4]
    2970:	sub	r3, r3, #1
    2974:	ldr	r2, [fp, #-120]	; 0xffffff88
    2978:	lsl	r3, r3, #4
    297c:	add	r3, r2, r3
    2980:	ldr	r3, [r3, #8]
    2984:	ldr	r3, [r3]
    2988:	cmp	r3, #99	; 0x63
    298c:	bhi	29b0 <coda_bin_cursor_read_uint32+0x5c>
    2990:	ldr	r3, [fp, #-120]	; 0xffffff88
    2994:	ldr	r3, [r3, #4]
    2998:	sub	r3, r3, #1
    299c:	ldr	r2, [fp, #-120]	; 0xffffff88
    29a0:	lsl	r3, r3, #4
    29a4:	add	r3, r2, r3
    29a8:	ldr	r3, [r3, #8]
    29ac:	b	29d0 <coda_bin_cursor_read_uint32+0x7c>
    29b0:	ldr	r3, [fp, #-120]	; 0xffffff88
    29b4:	ldr	r3, [r3, #4]
    29b8:	sub	r3, r3, #1
    29bc:	ldr	r2, [fp, #-120]	; 0xffffff88
    29c0:	lsl	r3, r3, #4
    29c4:	add	r3, r2, r3
    29c8:	ldr	r3, [r3, #8]
    29cc:	ldr	r3, [r3, #4]
    29d0:	str	r3, [fp, #-36]	; 0xffffffdc
    29d4:	ldr	r3, [fp, #-36]	; 0xffffffdc
    29d8:	ldrd	r2, [r3, #24]
    29dc:	strd	r2, [fp, #-60]	; 0xffffffc4
    29e0:	ldr	r3, [fp, #-120]	; 0xffffff88
    29e4:	ldr	r3, [r3, #4]
    29e8:	sub	r3, r3, #1
    29ec:	ldr	r2, [fp, #-120]	; 0xffffff88
    29f0:	add	r3, r3, #1
    29f4:	lsl	r3, r3, #4
    29f8:	add	r3, r2, r3
    29fc:	ldrd	r2, [r3]
    2a00:	strd	r2, [fp, #-44]	; 0xffffffd4
    2a04:	ldr	r3, [fp, #-36]	; 0xffffffdc
    2a08:	ldr	r3, [r3, #44]	; 0x2c
    2a0c:	str	r3, [fp, #-48]	; 0xffffffd0
    2a10:	ldrd	r2, [fp, #-60]	; 0xffffffc4
    2a14:	mvn	r0, #0
    2a18:	mvn	r1, #0
    2a1c:	cmp	r3, r1
    2a20:	cmpeq	r2, r0
    2a24:	bne	2b08 <coda_bin_cursor_read_uint32+0x1b4>
    2a28:	sub	r3, fp, #60	; 0x3c
    2a2c:	mov	r1, r3
    2a30:	ldr	r0, [fp, #-120]	; 0xffffff88
    2a34:	bl	1570 <coda_bin_cursor_get_bit_size>
    2a38:	mov	r3, r0
    2a3c:	cmp	r3, #0
    2a40:	beq	2a4c <coda_bin_cursor_read_uint32+0xf8>
    2a44:	mvn	r3, #0
    2a48:	b	2c6c <coda_bin_cursor_read_uint32+0x318>
    2a4c:	ldrd	r2, [fp, #-60]	; 0xffffffc4
    2a50:	cmp	r2, #0
    2a54:	sbcs	r3, r3, #0
    2a58:	blt	2a6c <coda_bin_cursor_read_uint32+0x118>
    2a5c:	ldrd	r2, [fp, #-60]	; 0xffffffc4
    2a60:	cmp	r2, #33	; 0x21
    2a64:	sbcs	r3, r3, #0
    2a68:	blt	2b08 <coda_bin_cursor_read_uint32+0x1b4>
    2a6c:	ldrd	r0, [fp, #-60]	; 0xffffffc4
    2a70:	sub	r3, fp, #84	; 0x54
    2a74:	mov	r2, r3
    2a78:	bl	0 <coda_str64>
    2a7c:	ldr	r3, [fp, #-120]	; 0xffffff88
    2a80:	ldr	r3, [r3, #4]
    2a84:	sub	r3, r3, #1
    2a88:	ldr	r2, [fp, #-120]	; 0xffffff88
    2a8c:	add	r3, r3, #1
    2a90:	lsl	r3, r3, #4
    2a94:	add	r3, r2, r3
    2a98:	ldrd	r2, [r3]
    2a9c:	lsr	r8, r2, #3
    2aa0:	orr	r8, r8, r3, lsl #29
    2aa4:	asr	r9, r3, #3
    2aa8:	sub	r3, fp, #108	; 0x6c
    2aac:	mov	r2, r3
    2ab0:	mov	r0, r8
    2ab4:	mov	r1, r9
    2ab8:	bl	0 <coda_str64>
    2abc:	ldr	r3, [fp, #-120]	; 0xffffff88
    2ac0:	ldr	r3, [r3, #4]
    2ac4:	sub	r3, r3, #1
    2ac8:	ldr	r2, [fp, #-120]	; 0xffffff88
    2acc:	add	r3, r3, #1
    2ad0:	lsl	r3, r3, #4
    2ad4:	add	r3, r2, r3
    2ad8:	ldrd	r2, [r3]
    2adc:	mov	r3, r2
    2ae0:	and	r3, r3, #7
    2ae4:	sub	r1, fp, #108	; 0x6c
    2ae8:	sub	r2, fp, #84	; 0x54
    2aec:	str	r3, [sp]
    2af0:	mov	r3, r1
    2af4:	ldr	r1, [pc, #380]	; 2c78 <coda_bin_cursor_read_uint32+0x324>
    2af8:	ldr	r0, [pc, #380]	; 2c7c <coda_bin_cursor_read_uint32+0x328>
    2afc:	bl	0 <coda_set_error>
    2b00:	mvn	r3, #0
    2b04:	b	2c6c <coda_bin_cursor_read_uint32+0x318>
    2b08:	ldrd	r2, [fp, #-44]	; 0xffffffd4
    2b0c:	mov	r0, #7
    2b10:	mov	r1, #0
    2b14:	and	r2, r2, r0
    2b18:	and	r3, r3, r1
    2b1c:	orrs	r3, r2, r3
    2b20:	bne	2b34 <coda_bin_cursor_read_uint32+0x1e0>
    2b24:	ldrd	r2, [fp, #-60]	; 0xffffffc4
    2b28:	cmp	r3, #0
    2b2c:	cmpeq	r2, #32
    2b30:	beq	2bcc <coda_bin_cursor_read_uint32+0x278>
    2b34:	ldr	r3, [fp, #-124]	; 0xffffff84
    2b38:	str	r3, [fp, #-32]	; 0xffffffe0
    2b3c:	ldr	r3, [fp, #-48]	; 0xffffffd0
    2b40:	cmp	r3, #0
    2b44:	bne	2b8c <coda_bin_cursor_read_uint32+0x238>
    2b48:	ldrd	r2, [fp, #-60]	; 0xffffffc4
    2b4c:	lsr	r6, r2, #3
    2b50:	orr	r6, r6, r3, lsl #29
    2b54:	asr	r7, r3, #3
    2b58:	mov	r1, r6
    2b5c:	ldrd	r2, [fp, #-60]	; 0xffffffc4
    2b60:	uxtb	r3, r2
    2b64:	and	r3, r3, #7
    2b68:	cmp	r3, #0
    2b6c:	movne	r3, #1
    2b70:	moveq	r3, #0
    2b74:	uxtb	r3, r3
    2b78:	add	r3, r1, r3
    2b7c:	rsb	r3, r3, #4
    2b80:	ldr	r2, [fp, #-124]	; 0xffffff84
    2b84:	add	r3, r2, r3
    2b88:	str	r3, [fp, #-32]	; 0xffffffe0
    2b8c:	ldr	r3, [fp, #-124]	; 0xffffff84
    2b90:	mov	r2, #0
    2b94:	str	r2, [r3]
    2b98:	ldr	r3, [fp, #-120]	; 0xffffff88
    2b9c:	ldr	r0, [r3]
    2ba0:	ldrd	r2, [fp, #-60]	; 0xffffffc4
    2ba4:	ldr	r1, [fp, #-32]	; 0xffffffe0
    2ba8:	str	r1, [sp, #8]
    2bac:	strd	r2, [sp]
    2bb0:	ldrd	r2, [fp, #-44]	; 0xffffffd4
    2bb4:	bl	1e4 <read_bits>
    2bb8:	mov	r3, r0
    2bbc:	cmp	r3, #0
    2bc0:	beq	2c1c <coda_bin_cursor_read_uint32+0x2c8>
    2bc4:	mvn	r3, #0
    2bc8:	b	2c6c <coda_bin_cursor_read_uint32+0x318>
    2bcc:	ldr	r3, [fp, #-120]	; 0xffffff88
    2bd0:	ldr	r1, [r3]
    2bd4:	ldrd	r2, [fp, #-44]	; 0xffffffd4
    2bd8:	lsr	r4, r2, #3
    2bdc:	orr	r4, r4, r3, lsl #29
    2be0:	asr	r5, r3, #3
    2be4:	ldr	r3, [fp, #-124]	; 0xffffff84
    2be8:	str	r3, [sp, #8]
    2bec:	mov	r2, #4
    2bf0:	mov	r3, #0
    2bf4:	strd	r2, [sp]
    2bf8:	mov	r2, r4
    2bfc:	mov	r3, r5
    2c00:	mov	r0, r1
    2c04:	bl	0 <read_bytes>
    2c08:	mov	r3, r0
    2c0c:	cmp	r3, #0
    2c10:	beq	2c20 <coda_bin_cursor_read_uint32+0x2cc>
    2c14:	mvn	r3, #0
    2c18:	b	2c6c <coda_bin_cursor_read_uint32+0x318>
    2c1c:	nop			; (mov r0, r0)
    2c20:	ldr	r3, [fp, #-48]	; 0xffffffd0
    2c24:	cmp	r3, #0
    2c28:	bne	2c68 <coda_bin_cursor_read_uint32+0x314>
    2c2c:	ldr	r3, [fp, #-124]	; 0xffffff84
    2c30:	ldrb	r3, [r3, #3]
    2c34:	strb	r3, [fp, #-112]	; 0xffffff90
    2c38:	ldr	r3, [fp, #-124]	; 0xffffff84
    2c3c:	ldrb	r3, [r3, #2]
    2c40:	strb	r3, [fp, #-111]	; 0xffffff91
    2c44:	ldr	r3, [fp, #-124]	; 0xffffff84
    2c48:	ldrb	r3, [r3, #1]
    2c4c:	strb	r3, [fp, #-110]	; 0xffffff92
    2c50:	ldr	r3, [fp, #-124]	; 0xffffff84
    2c54:	ldrb	r3, [r3]
    2c58:	strb	r3, [fp, #-109]	; 0xffffff93
    2c5c:	ldr	r2, [fp, #-112]	; 0xffffff90
    2c60:	ldr	r3, [fp, #-124]	; 0xffffff84
    2c64:	str	r2, [r3]
    2c68:	mov	r3, #0
    2c6c:	mov	r0, r3
    2c70:	sub	sp, fp, #28
    2c74:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
    2c78:	.word	0x0000048c
    2c7c:	.word	0xfffffed4

00002c80 <coda_bin_cursor_read_int64>:
    2c80:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
    2c84:	add	fp, sp, #28
    2c88:	sub	sp, sp, #128	; 0x80
    2c8c:	str	r0, [fp, #-128]	; 0xffffff80
    2c90:	str	r1, [fp, #-132]	; 0xffffff7c
    2c94:	ldr	r3, [fp, #-128]	; 0xffffff80
    2c98:	ldr	r3, [r3, #4]
    2c9c:	sub	r3, r3, #1
    2ca0:	ldr	r2, [fp, #-128]	; 0xffffff80
    2ca4:	lsl	r3, r3, #4
    2ca8:	add	r3, r2, r3
    2cac:	ldr	r3, [r3, #8]
    2cb0:	ldr	r3, [r3]
    2cb4:	cmp	r3, #99	; 0x63
    2cb8:	bhi	2cdc <coda_bin_cursor_read_int64+0x5c>
    2cbc:	ldr	r3, [fp, #-128]	; 0xffffff80
    2cc0:	ldr	r3, [r3, #4]
    2cc4:	sub	r3, r3, #1
    2cc8:	ldr	r2, [fp, #-128]	; 0xffffff80
    2ccc:	lsl	r3, r3, #4
    2cd0:	add	r3, r2, r3
    2cd4:	ldr	r3, [r3, #8]
    2cd8:	b	2cfc <coda_bin_cursor_read_int64+0x7c>
    2cdc:	ldr	r3, [fp, #-128]	; 0xffffff80
    2ce0:	ldr	r3, [r3, #4]
    2ce4:	sub	r3, r3, #1
    2ce8:	ldr	r2, [fp, #-128]	; 0xffffff80
    2cec:	lsl	r3, r3, #4
    2cf0:	add	r3, r2, r3
    2cf4:	ldr	r3, [r3, #8]
    2cf8:	ldr	r3, [r3, #4]
    2cfc:	str	r3, [fp, #-36]	; 0xffffffdc
    2d00:	ldr	r3, [fp, #-36]	; 0xffffffdc
    2d04:	ldrd	r2, [r3, #24]
    2d08:	strd	r2, [fp, #-68]	; 0xffffffbc
    2d0c:	ldr	r3, [fp, #-128]	; 0xffffff80
    2d10:	ldr	r3, [r3, #4]
    2d14:	sub	r3, r3, #1
    2d18:	ldr	r2, [fp, #-128]	; 0xffffff80
    2d1c:	add	r3, r3, #1
    2d20:	lsl	r3, r3, #4
    2d24:	add	r3, r2, r3
    2d28:	ldrd	r2, [r3]
    2d2c:	strd	r2, [fp, #-44]	; 0xffffffd4
    2d30:	ldr	r3, [fp, #-36]	; 0xffffffdc
    2d34:	ldr	r3, [r3, #44]	; 0x2c
    2d38:	str	r3, [fp, #-48]	; 0xffffffd0
    2d3c:	ldrd	r2, [fp, #-68]	; 0xffffffbc
    2d40:	mvn	r0, #0
    2d44:	mvn	r1, #0
    2d48:	cmp	r3, r1
    2d4c:	cmpeq	r2, r0
    2d50:	bne	2e40 <coda_bin_cursor_read_int64+0x1c0>
    2d54:	sub	r3, fp, #68	; 0x44
    2d58:	mov	r1, r3
    2d5c:	ldr	r0, [fp, #-128]	; 0xffffff80
    2d60:	bl	1570 <coda_bin_cursor_get_bit_size>
    2d64:	mov	r3, r0
    2d68:	cmp	r3, #0
    2d6c:	beq	2d78 <coda_bin_cursor_read_int64+0xf8>
    2d70:	mvn	r3, #0
    2d74:	b	3060 <coda_bin_cursor_read_int64+0x3e0>
    2d78:	ldrd	r2, [fp, #-68]	; 0xffffffbc
    2d7c:	cmp	r2, #0
    2d80:	sbcs	r3, r3, #0
    2d84:	blt	2d98 <coda_bin_cursor_read_int64+0x118>
    2d88:	ldrd	r2, [fp, #-68]	; 0xffffffbc
    2d8c:	cmp	r2, #65	; 0x41
    2d90:	sbcs	r3, r3, #0
    2d94:	blt	2e40 <coda_bin_cursor_read_int64+0x1c0>
    2d98:	ldrd	r0, [fp, #-68]	; 0xffffffbc
    2d9c:	sub	r3, fp, #92	; 0x5c
    2da0:	mov	r2, r3
    2da4:	bl	0 <coda_str64>
    2da8:	ldr	r3, [fp, #-128]	; 0xffffff80
    2dac:	ldr	r3, [r3, #4]
    2db0:	sub	r3, r3, #1
    2db4:	ldr	r2, [fp, #-128]	; 0xffffff80
    2db8:	add	r3, r3, #1
    2dbc:	lsl	r3, r3, #4
    2dc0:	add	r3, r2, r3
    2dc4:	ldrd	r2, [r3]
    2dc8:	lsr	r1, r2, #3
    2dcc:	str	r1, [fp, #-140]	; 0xffffff74
    2dd0:	ldr	r1, [fp, #-140]	; 0xffffff74
    2dd4:	orr	r1, r1, r3, lsl #29
    2dd8:	str	r1, [fp, #-140]	; 0xffffff74
    2ddc:	asr	r3, r3, #3
    2de0:	str	r3, [fp, #-136]	; 0xffffff78
    2de4:	sub	r3, fp, #116	; 0x74
    2de8:	mov	r2, r3
    2dec:	ldrd	r0, [fp, #-140]	; 0xffffff74
    2df0:	bl	0 <coda_str64>
    2df4:	ldr	r3, [fp, #-128]	; 0xffffff80
    2df8:	ldr	r3, [r3, #4]
    2dfc:	sub	r3, r3, #1
    2e00:	ldr	r2, [fp, #-128]	; 0xffffff80
    2e04:	add	r3, r3, #1
    2e08:	lsl	r3, r3, #4
    2e0c:	add	r3, r2, r3
    2e10:	ldrd	r2, [r3]
    2e14:	mov	r3, r2
    2e18:	and	r3, r3, #7
    2e1c:	sub	r1, fp, #116	; 0x74
    2e20:	sub	r2, fp, #92	; 0x5c
    2e24:	str	r3, [sp]
    2e28:	mov	r3, r1
    2e2c:	ldr	r1, [pc, #568]	; 306c <coda_bin_cursor_read_int64+0x3ec>
    2e30:	ldr	r0, [pc, #568]	; 3070 <coda_bin_cursor_read_int64+0x3f0>
    2e34:	bl	0 <coda_set_error>
    2e38:	mvn	r3, #0
    2e3c:	b	3060 <coda_bin_cursor_read_int64+0x3e0>
    2e40:	ldrd	r2, [fp, #-44]	; 0xffffffd4
    2e44:	mov	r0, #7
    2e48:	mov	r1, #0
    2e4c:	and	r2, r2, r0
    2e50:	and	r3, r3, r1
    2e54:	orrs	r3, r2, r3
    2e58:	bne	2e6c <coda_bin_cursor_read_int64+0x1ec>
    2e5c:	ldrd	r2, [fp, #-68]	; 0xffffffbc
    2e60:	cmp	r3, #0
    2e64:	cmpeq	r2, #64	; 0x40
    2e68:	beq	2f08 <coda_bin_cursor_read_int64+0x288>
    2e6c:	ldr	r3, [fp, #-132]	; 0xffffff7c
    2e70:	str	r3, [fp, #-32]	; 0xffffffe0
    2e74:	ldr	r3, [fp, #-48]	; 0xffffffd0
    2e78:	cmp	r3, #0
    2e7c:	bne	2ec4 <coda_bin_cursor_read_int64+0x244>
    2e80:	ldrd	r2, [fp, #-68]	; 0xffffffbc
    2e84:	lsr	r8, r2, #3
    2e88:	orr	r8, r8, r3, lsl #29
    2e8c:	asr	r9, r3, #3
    2e90:	mov	r1, r8
    2e94:	ldrd	r2, [fp, #-68]	; 0xffffffbc
    2e98:	uxtb	r3, r2
    2e9c:	and	r3, r3, #7
    2ea0:	cmp	r3, #0
    2ea4:	movne	r3, #1
    2ea8:	moveq	r3, #0
    2eac:	uxtb	r3, r3
    2eb0:	add	r3, r1, r3
    2eb4:	rsb	r3, r3, #8
    2eb8:	ldr	r2, [fp, #-132]	; 0xffffff7c
    2ebc:	add	r3, r2, r3
    2ec0:	str	r3, [fp, #-32]	; 0xffffffe0
    2ec4:	ldr	r1, [fp, #-132]	; 0xffffff7c
    2ec8:	mov	r2, #0
    2ecc:	mov	r3, #0
    2ed0:	strd	r2, [r1]
    2ed4:	ldr	r3, [fp, #-128]	; 0xffffff80
    2ed8:	ldr	r0, [r3]
    2edc:	ldrd	r2, [fp, #-68]	; 0xffffffbc
    2ee0:	ldr	r1, [fp, #-32]	; 0xffffffe0
    2ee4:	str	r1, [sp, #8]
    2ee8:	strd	r2, [sp]
    2eec:	ldrd	r2, [fp, #-44]	; 0xffffffd4
    2ef0:	bl	1e4 <read_bits>
    2ef4:	mov	r3, r0
    2ef8:	cmp	r3, #0
    2efc:	beq	2f58 <coda_bin_cursor_read_int64+0x2d8>
    2f00:	mvn	r3, #0
    2f04:	b	3060 <coda_bin_cursor_read_int64+0x3e0>
    2f08:	ldr	r3, [fp, #-128]	; 0xffffff80
    2f0c:	ldr	r1, [r3]
    2f10:	ldrd	r2, [fp, #-44]	; 0xffffffd4
    2f14:	lsr	r6, r2, #3
    2f18:	orr	r6, r6, r3, lsl #29
    2f1c:	asr	r7, r3, #3
    2f20:	ldr	r3, [fp, #-132]	; 0xffffff7c
    2f24:	str	r3, [sp, #8]
    2f28:	mov	r2, #8
    2f2c:	mov	r3, #0
    2f30:	strd	r2, [sp]
    2f34:	mov	r2, r6
    2f38:	mov	r3, r7
    2f3c:	mov	r0, r1
    2f40:	bl	0 <read_bytes>
    2f44:	mov	r3, r0
    2f48:	cmp	r3, #0
    2f4c:	beq	2f5c <coda_bin_cursor_read_int64+0x2dc>
    2f50:	mvn	r3, #0
    2f54:	b	3060 <coda_bin_cursor_read_int64+0x3e0>
    2f58:	nop			; (mov r0, r0)
    2f5c:	ldr	r3, [fp, #-48]	; 0xffffffd0
    2f60:	cmp	r3, #0
    2f64:	bne	2fd4 <coda_bin_cursor_read_int64+0x354>
    2f68:	ldr	r3, [fp, #-132]	; 0xffffff7c
    2f6c:	ldrb	r3, [r3, #7]
    2f70:	strb	r3, [fp, #-124]	; 0xffffff84
    2f74:	ldr	r3, [fp, #-132]	; 0xffffff7c
    2f78:	ldrb	r3, [r3, #6]
    2f7c:	strb	r3, [fp, #-123]	; 0xffffff85
    2f80:	ldr	r3, [fp, #-132]	; 0xffffff7c
    2f84:	ldrb	r3, [r3, #5]
    2f88:	strb	r3, [fp, #-122]	; 0xffffff86
    2f8c:	ldr	r3, [fp, #-132]	; 0xffffff7c
    2f90:	ldrb	r3, [r3, #4]
    2f94:	strb	r3, [fp, #-121]	; 0xffffff87
    2f98:	ldr	r3, [fp, #-132]	; 0xffffff7c
    2f9c:	ldrb	r3, [r3, #3]
    2fa0:	strb	r3, [fp, #-120]	; 0xffffff88
    2fa4:	ldr	r3, [fp, #-132]	; 0xffffff7c
    2fa8:	ldrb	r3, [r3, #2]
    2fac:	strb	r3, [fp, #-119]	; 0xffffff89
    2fb0:	ldr	r3, [fp, #-132]	; 0xffffff7c
    2fb4:	ldrb	r3, [r3, #1]
    2fb8:	strb	r3, [fp, #-118]	; 0xffffff8a
    2fbc:	ldr	r3, [fp, #-132]	; 0xffffff7c
    2fc0:	ldrb	r3, [r3]
    2fc4:	strb	r3, [fp, #-117]	; 0xffffff8b
    2fc8:	ldrd	r2, [fp, #-124]	; 0xffffff84
    2fcc:	ldr	r1, [fp, #-132]	; 0xffffff7c
    2fd0:	strd	r2, [r1]
    2fd4:	ldrd	r2, [fp, #-68]	; 0xffffffbc
    2fd8:	cmp	r2, #64	; 0x40
    2fdc:	sbcs	r3, r3, #0
    2fe0:	bge	305c <coda_bin_cursor_read_int64+0x3dc>
    2fe4:	ldr	r3, [fp, #-132]	; 0xffffff7c
    2fe8:	ldrd	r2, [r3]
    2fec:	strd	r2, [fp, #-60]	; 0xffffffc4
    2ff0:	ldrd	r2, [fp, #-68]	; 0xffffffbc
    2ff4:	mov	r3, r2
    2ff8:	sub	r1, r3, #1
    2ffc:	ldrd	r2, [fp, #-60]	; 0xffffffc4
    3000:	rsb	ip, r1, #32
    3004:	sub	r0, r1, #32
    3008:	lsr	r4, r2, r1
    300c:	orr	r4, r4, r3, lsl ip
    3010:	orr	r4, r4, r3, lsr r0
    3014:	lsr	r5, r3, r1
    3018:	mov	r2, #1
    301c:	mov	r3, #0
    3020:	and	r2, r2, r4
    3024:	and	r3, r3, r5
    3028:	orrs	r3, r2, r3
    302c:	beq	305c <coda_bin_cursor_read_int64+0x3dc>
    3030:	ldrd	r2, [fp, #-68]	; 0xffffffbc
    3034:	mov	r3, #1
    3038:	lsl	r3, r3, r2
    303c:	rsb	r3, r3, #0
    3040:	mov	r0, r3
    3044:	asr	r1, r0, #31
    3048:	ldrd	r2, [fp, #-60]	; 0xffffffc4
    304c:	orr	r2, r2, r0
    3050:	orr	r3, r3, r1
    3054:	ldr	r1, [fp, #-132]	; 0xffffff7c
    3058:	strd	r2, [r1]
    305c:	mov	r3, #0
    3060:	mov	r0, r3
    3064:	sub	sp, fp, #28
    3068:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
    306c:	.word	0x000004f8
    3070:	.word	0xfffffed4

00003074 <coda_bin_cursor_read_uint64>:
    3074:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
    3078:	add	fp, sp, #28
    307c:	sub	sp, sp, #112	; 0x70
    3080:	str	r0, [fp, #-120]	; 0xffffff88
    3084:	str	r1, [fp, #-124]	; 0xffffff84
    3088:	ldr	r3, [fp, #-120]	; 0xffffff88
    308c:	ldr	r3, [r3, #4]
    3090:	sub	r3, r3, #1
    3094:	ldr	r2, [fp, #-120]	; 0xffffff88
    3098:	lsl	r3, r3, #4
    309c:	add	r3, r2, r3
    30a0:	ldr	r3, [r3, #8]
    30a4:	ldr	r3, [r3]
    30a8:	cmp	r3, #99	; 0x63
    30ac:	bhi	30d0 <coda_bin_cursor_read_uint64+0x5c>
    30b0:	ldr	r3, [fp, #-120]	; 0xffffff88
    30b4:	ldr	r3, [r3, #4]
    30b8:	sub	r3, r3, #1
    30bc:	ldr	r2, [fp, #-120]	; 0xffffff88
    30c0:	lsl	r3, r3, #4
    30c4:	add	r3, r2, r3
    30c8:	ldr	r3, [r3, #8]
    30cc:	b	30f0 <coda_bin_cursor_read_uint64+0x7c>
    30d0:	ldr	r3, [fp, #-120]	; 0xffffff88
    30d4:	ldr	r3, [r3, #4]
    30d8:	sub	r3, r3, #1
    30dc:	ldr	r2, [fp, #-120]	; 0xffffff88
    30e0:	lsl	r3, r3, #4
    30e4:	add	r3, r2, r3
    30e8:	ldr	r3, [r3, #8]
    30ec:	ldr	r3, [r3, #4]
    30f0:	str	r3, [fp, #-36]	; 0xffffffdc
    30f4:	ldr	r3, [fp, #-36]	; 0xffffffdc
    30f8:	ldrd	r2, [r3, #24]
    30fc:	strd	r2, [fp, #-60]	; 0xffffffc4
    3100:	ldr	r3, [fp, #-120]	; 0xffffff88
    3104:	ldr	r3, [r3, #4]
    3108:	sub	r3, r3, #1
    310c:	ldr	r2, [fp, #-120]	; 0xffffff88
    3110:	add	r3, r3, #1
    3114:	lsl	r3, r3, #4
    3118:	add	r3, r2, r3
    311c:	ldrd	r2, [r3]
    3120:	strd	r2, [fp, #-44]	; 0xffffffd4
    3124:	ldr	r3, [fp, #-36]	; 0xffffffdc
    3128:	ldr	r3, [r3, #44]	; 0x2c
    312c:	str	r3, [fp, #-48]	; 0xffffffd0
    3130:	ldrd	r2, [fp, #-60]	; 0xffffffc4
    3134:	mvn	r0, #0
    3138:	mvn	r1, #0
    313c:	cmp	r3, r1
    3140:	cmpeq	r2, r0
    3144:	bne	3228 <coda_bin_cursor_read_uint64+0x1b4>
    3148:	sub	r3, fp, #60	; 0x3c
    314c:	mov	r1, r3
    3150:	ldr	r0, [fp, #-120]	; 0xffffff88
    3154:	bl	1570 <coda_bin_cursor_get_bit_size>
    3158:	mov	r3, r0
    315c:	cmp	r3, #0
    3160:	beq	316c <coda_bin_cursor_read_uint64+0xf8>
    3164:	mvn	r3, #0
    3168:	b	33c0 <coda_bin_cursor_read_uint64+0x34c>
    316c:	ldrd	r2, [fp, #-60]	; 0xffffffc4
    3170:	cmp	r2, #0
    3174:	sbcs	r3, r3, #0
    3178:	blt	318c <coda_bin_cursor_read_uint64+0x118>
    317c:	ldrd	r2, [fp, #-60]	; 0xffffffc4
    3180:	cmp	r2, #65	; 0x41
    3184:	sbcs	r3, r3, #0
    3188:	blt	3228 <coda_bin_cursor_read_uint64+0x1b4>
    318c:	ldrd	r0, [fp, #-60]	; 0xffffffc4
    3190:	sub	r3, fp, #84	; 0x54
    3194:	mov	r2, r3
    3198:	bl	0 <coda_str64>
    319c:	ldr	r3, [fp, #-120]	; 0xffffff88
    31a0:	ldr	r3, [r3, #4]
    31a4:	sub	r3, r3, #1
    31a8:	ldr	r2, [fp, #-120]	; 0xffffff88
    31ac:	add	r3, r3, #1
    31b0:	lsl	r3, r3, #4
    31b4:	add	r3, r2, r3
    31b8:	ldrd	r2, [r3]
    31bc:	lsr	r8, r2, #3
    31c0:	orr	r8, r8, r3, lsl #29
    31c4:	asr	r9, r3, #3
    31c8:	sub	r3, fp, #108	; 0x6c
    31cc:	mov	r2, r3
    31d0:	mov	r0, r8
    31d4:	mov	r1, r9
    31d8:	bl	0 <coda_str64>
    31dc:	ldr	r3, [fp, #-120]	; 0xffffff88
    31e0:	ldr	r3, [r3, #4]
    31e4:	sub	r3, r3, #1
    31e8:	ldr	r2, [fp, #-120]	; 0xffffff88
    31ec:	add	r3, r3, #1
    31f0:	lsl	r3, r3, #4
    31f4:	add	r3, r2, r3
    31f8:	ldrd	r2, [r3]
    31fc:	mov	r3, r2
    3200:	and	r3, r3, #7
    3204:	sub	r1, fp, #108	; 0x6c
    3208:	sub	r2, fp, #84	; 0x54
    320c:	str	r3, [sp]
    3210:	mov	r3, r1
    3214:	ldr	r1, [pc, #432]	; 33cc <coda_bin_cursor_read_uint64+0x358>
    3218:	ldr	r0, [pc, #432]	; 33d0 <coda_bin_cursor_read_uint64+0x35c>
    321c:	bl	0 <coda_set_error>
    3220:	mvn	r3, #0
    3224:	b	33c0 <coda_bin_cursor_read_uint64+0x34c>
    3228:	ldrd	r2, [fp, #-44]	; 0xffffffd4
    322c:	mov	r0, #7
    3230:	mov	r1, #0
    3234:	and	r2, r2, r0
    3238:	and	r3, r3, r1
    323c:	orrs	r3, r2, r3
    3240:	bne	3254 <coda_bin_cursor_read_uint64+0x1e0>
    3244:	ldrd	r2, [fp, #-60]	; 0xffffffc4
    3248:	cmp	r3, #0
    324c:	cmpeq	r2, #64	; 0x40
    3250:	beq	32f0 <coda_bin_cursor_read_uint64+0x27c>
    3254:	ldr	r3, [fp, #-124]	; 0xffffff84
    3258:	str	r3, [fp, #-32]	; 0xffffffe0
    325c:	ldr	r3, [fp, #-48]	; 0xffffffd0
    3260:	cmp	r3, #0
    3264:	bne	32ac <coda_bin_cursor_read_uint64+0x238>
    3268:	ldrd	r2, [fp, #-60]	; 0xffffffc4
    326c:	lsr	r6, r2, #3
    3270:	orr	r6, r6, r3, lsl #29
    3274:	asr	r7, r3, #3
    3278:	mov	r1, r6
    327c:	ldrd	r2, [fp, #-60]	; 0xffffffc4
    3280:	uxtb	r3, r2
    3284:	and	r3, r3, #7
    3288:	cmp	r3, #0
    328c:	movne	r3, #1
    3290:	moveq	r3, #0
    3294:	uxtb	r3, r3
    3298:	add	r3, r1, r3
    329c:	rsb	r3, r3, #8
    32a0:	ldr	r2, [fp, #-124]	; 0xffffff84
    32a4:	add	r3, r2, r3
    32a8:	str	r3, [fp, #-32]	; 0xffffffe0
    32ac:	ldr	r1, [fp, #-124]	; 0xffffff84
    32b0:	mov	r2, #0
    32b4:	mov	r3, #0
    32b8:	strd	r2, [r1]
    32bc:	ldr	r3, [fp, #-120]	; 0xffffff88
    32c0:	ldr	r0, [r3]
    32c4:	ldrd	r2, [fp, #-60]	; 0xffffffc4
    32c8:	ldr	r1, [fp, #-32]	; 0xffffffe0
    32cc:	str	r1, [sp, #8]
    32d0:	strd	r2, [sp]
    32d4:	ldrd	r2, [fp, #-44]	; 0xffffffd4
    32d8:	bl	1e4 <read_bits>
    32dc:	mov	r3, r0
    32e0:	cmp	r3, #0
    32e4:	beq	3340 <coda_bin_cursor_read_uint64+0x2cc>
    32e8:	mvn	r3, #0
    32ec:	b	33c0 <coda_bin_cursor_read_uint64+0x34c>
    32f0:	ldr	r3, [fp, #-120]	; 0xffffff88
    32f4:	ldr	r1, [r3]
    32f8:	ldrd	r2, [fp, #-44]	; 0xffffffd4
    32fc:	lsr	r4, r2, #3
    3300:	orr	r4, r4, r3, lsl #29
    3304:	asr	r5, r3, #3
    3308:	ldr	r3, [fp, #-124]	; 0xffffff84
    330c:	str	r3, [sp, #8]
    3310:	mov	r2, #8
    3314:	mov	r3, #0
    3318:	strd	r2, [sp]
    331c:	mov	r2, r4
    3320:	mov	r3, r5
    3324:	mov	r0, r1
    3328:	bl	0 <read_bytes>
    332c:	mov	r3, r0
    3330:	cmp	r3, #0
    3334:	beq	3344 <coda_bin_cursor_read_uint64+0x2d0>
    3338:	mvn	r3, #0
    333c:	b	33c0 <coda_bin_cursor_read_uint64+0x34c>
    3340:	nop			; (mov r0, r0)
    3344:	ldr	r3, [fp, #-48]	; 0xffffffd0
    3348:	cmp	r3, #0
    334c:	bne	33bc <coda_bin_cursor_read_uint64+0x348>
    3350:	ldr	r3, [fp, #-124]	; 0xffffff84
    3354:	ldrb	r3, [r3, #7]
    3358:	strb	r3, [fp, #-116]	; 0xffffff8c
    335c:	ldr	r3, [fp, #-124]	; 0xffffff84
    3360:	ldrb	r3, [r3, #6]
    3364:	strb	r3, [fp, #-115]	; 0xffffff8d
    3368:	ldr	r3, [fp, #-124]	; 0xffffff84
    336c:	ldrb	r3, [r3, #5]
    3370:	strb	r3, [fp, #-114]	; 0xffffff8e
    3374:	ldr	r3, [fp, #-124]	; 0xffffff84
    3378:	ldrb	r3, [r3, #4]
    337c:	strb	r3, [fp, #-113]	; 0xffffff8f
    3380:	ldr	r3, [fp, #-124]	; 0xffffff84
    3384:	ldrb	r3, [r3, #3]
    3388:	strb	r3, [fp, #-112]	; 0xffffff90
    338c:	ldr	r3, [fp, #-124]	; 0xffffff84
    3390:	ldrb	r3, [r3, #2]
    3394:	strb	r3, [fp, #-111]	; 0xffffff91
    3398:	ldr	r3, [fp, #-124]	; 0xffffff84
    339c:	ldrb	r3, [r3, #1]
    33a0:	strb	r3, [fp, #-110]	; 0xffffff92
    33a4:	ldr	r3, [fp, #-124]	; 0xffffff84
    33a8:	ldrb	r3, [r3]
    33ac:	strb	r3, [fp, #-109]	; 0xffffff93
    33b0:	ldrd	r2, [fp, #-116]	; 0xffffff8c
    33b4:	ldr	r1, [fp, #-124]	; 0xffffff84
    33b8:	strd	r2, [r1]
    33bc:	mov	r3, #0
    33c0:	mov	r0, r3
    33c4:	sub	sp, fp, #28
    33c8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
    33cc:	.word	0x00000564
    33d0:	.word	0xfffffed4

000033d4 <coda_bin_cursor_read_float>:
    33d4:	push	{r4, r5, fp, lr}
    33d8:	add	fp, sp, #12
    33dc:	sub	sp, sp, #48	; 0x30
    33e0:	str	r0, [fp, #-40]	; 0xffffffd8
    33e4:	str	r1, [fp, #-44]	; 0xffffffd4
    33e8:	ldr	r1, [fp, #-40]	; 0xffffffd8
    33ec:	ldr	r1, [r1, #4]
    33f0:	sub	r1, r1, #1
    33f4:	ldr	r0, [fp, #-40]	; 0xffffffd8
    33f8:	lsl	r1, r1, #4
    33fc:	add	r1, r0, r1
    3400:	ldr	r1, [r1, #8]
    3404:	ldr	r1, [r1]
    3408:	cmp	r1, #99	; 0x63
    340c:	bhi	3430 <coda_bin_cursor_read_float+0x5c>
    3410:	ldr	r1, [fp, #-40]	; 0xffffffd8
    3414:	ldr	r1, [r1, #4]
    3418:	sub	r1, r1, #1
    341c:	ldr	r0, [fp, #-40]	; 0xffffffd8
    3420:	lsl	r1, r1, #4
    3424:	add	r1, r0, r1
    3428:	ldr	r1, [r1, #8]
    342c:	b	3450 <coda_bin_cursor_read_float+0x7c>
    3430:	ldr	r1, [fp, #-40]	; 0xffffffd8
    3434:	ldr	r1, [r1, #4]
    3438:	sub	r1, r1, #1
    343c:	ldr	r0, [fp, #-40]	; 0xffffffd8
    3440:	lsl	r1, r1, #4
    3444:	add	r1, r0, r1
    3448:	ldr	r1, [r1, #8]
    344c:	ldr	r1, [r1, #4]
    3450:	str	r1, [fp, #-16]
    3454:	ldr	r1, [fp, #-40]	; 0xffffffd8
    3458:	ldr	r1, [r1, #4]
    345c:	sub	r1, r1, #1
    3460:	ldr	r0, [fp, #-40]	; 0xffffffd8
    3464:	add	r1, r1, #1
    3468:	lsl	r1, r1, #4
    346c:	add	r1, r0, r1
    3470:	ldrd	r0, [r1]
    3474:	strd	r0, [fp, #-28]	; 0xffffffe4
    3478:	ldr	r1, [fp, #-16]
    347c:	ldr	r1, [r1, #44]	; 0x2c
    3480:	str	r1, [fp, #-32]	; 0xffffffe0
    3484:	ldrd	r0, [fp, #-28]	; 0xffffffe4
    3488:	mov	r4, #7
    348c:	mov	r5, #0
    3490:	and	r0, r0, r4
    3494:	and	r1, r1, r5
    3498:	orrs	r1, r0, r1
    349c:	beq	34dc <coda_bin_cursor_read_float+0x108>
    34a0:	ldr	r3, [fp, #-40]	; 0xffffffd8
    34a4:	ldr	r1, [r3]
    34a8:	ldr	r3, [fp, #-44]	; 0xffffffd4
    34ac:	str	r3, [sp, #8]
    34b0:	mov	r2, #32
    34b4:	mov	r3, #0
    34b8:	strd	r2, [sp]
    34bc:	ldrd	r2, [fp, #-28]	; 0xffffffe4
    34c0:	mov	r0, r1
    34c4:	bl	1e4 <read_bits>
    34c8:	mov	r3, r0
    34cc:	cmp	r3, #0
    34d0:	beq	3524 <coda_bin_cursor_read_float+0x150>
    34d4:	mvn	r3, #0
    34d8:	b	3570 <coda_bin_cursor_read_float+0x19c>
    34dc:	ldr	r1, [fp, #-40]	; 0xffffffd8
    34e0:	ldr	ip, [r1]
    34e4:	ldrd	r0, [fp, #-28]	; 0xffffffe4
    34e8:	lsr	r2, r0, #3
    34ec:	orr	r2, r2, r1, lsl #29
    34f0:	asr	r3, r1, #3
    34f4:	ldr	r1, [fp, #-44]	; 0xffffffd4
    34f8:	str	r1, [sp, #8]
    34fc:	mov	r0, #4
    3500:	mov	r1, #0
    3504:	strd	r0, [sp]
    3508:	mov	r0, ip
    350c:	bl	0 <read_bytes>
    3510:	mov	r3, r0
    3514:	cmp	r3, #0
    3518:	beq	3524 <coda_bin_cursor_read_float+0x150>
    351c:	mvn	r3, #0
    3520:	b	3570 <coda_bin_cursor_read_float+0x19c>
    3524:	ldr	r3, [fp, #-32]	; 0xffffffe0
    3528:	cmp	r3, #0
    352c:	bne	356c <coda_bin_cursor_read_float+0x198>
    3530:	ldr	r3, [fp, #-44]	; 0xffffffd4
    3534:	ldrb	r3, [r3, #3]
    3538:	strb	r3, [fp, #-36]	; 0xffffffdc
    353c:	ldr	r3, [fp, #-44]	; 0xffffffd4
    3540:	ldrb	r3, [r3, #2]
    3544:	strb	r3, [fp, #-35]	; 0xffffffdd
    3548:	ldr	r3, [fp, #-44]	; 0xffffffd4
    354c:	ldrb	r3, [r3, #1]
    3550:	strb	r3, [fp, #-34]	; 0xffffffde
    3554:	ldr	r3, [fp, #-44]	; 0xffffffd4
    3558:	ldrb	r3, [r3]
    355c:	strb	r3, [fp, #-33]	; 0xffffffdf
    3560:	ldr	r2, [fp, #-36]	; 0xffffffdc
    3564:	ldr	r3, [fp, #-44]	; 0xffffffd4
    3568:	str	r2, [r3]
    356c:	mov	r3, #0
    3570:	mov	r0, r3
    3574:	sub	sp, fp, #12
    3578:	pop	{r4, r5, fp, pc}

0000357c <read_double>:
    357c:	push	{r4, r5, fp, lr}
    3580:	add	fp, sp, #12
    3584:	sub	sp, sp, #56	; 0x38
    3588:	str	r0, [fp, #-48]	; 0xffffffd0
    358c:	str	r1, [fp, #-52]	; 0xffffffcc
    3590:	ldr	r1, [fp, #-48]	; 0xffffffd0
    3594:	ldr	r1, [r1, #4]
    3598:	sub	r1, r1, #1
    359c:	ldr	r0, [fp, #-48]	; 0xffffffd0
    35a0:	lsl	r1, r1, #4
    35a4:	add	r1, r0, r1
    35a8:	ldr	r1, [r1, #8]
    35ac:	ldr	r1, [r1]
    35b0:	cmp	r1, #99	; 0x63
    35b4:	bhi	35d8 <read_double+0x5c>
    35b8:	ldr	r1, [fp, #-48]	; 0xffffffd0
    35bc:	ldr	r1, [r1, #4]
    35c0:	sub	r1, r1, #1
    35c4:	ldr	r0, [fp, #-48]	; 0xffffffd0
    35c8:	lsl	r1, r1, #4
    35cc:	add	r1, r0, r1
    35d0:	ldr	r1, [r1, #8]
    35d4:	b	35f8 <read_double+0x7c>
    35d8:	ldr	r1, [fp, #-48]	; 0xffffffd0
    35dc:	ldr	r1, [r1, #4]
    35e0:	sub	r1, r1, #1
    35e4:	ldr	r0, [fp, #-48]	; 0xffffffd0
    35e8:	lsl	r1, r1, #4
    35ec:	add	r1, r0, r1
    35f0:	ldr	r1, [r1, #8]
    35f4:	ldr	r1, [r1, #4]
    35f8:	str	r1, [fp, #-16]
    35fc:	ldr	r1, [fp, #-48]	; 0xffffffd0
    3600:	ldr	r1, [r1, #4]
    3604:	sub	r1, r1, #1
    3608:	ldr	r0, [fp, #-48]	; 0xffffffd0
    360c:	add	r1, r1, #1
    3610:	lsl	r1, r1, #4
    3614:	add	r1, r0, r1
    3618:	ldrd	r0, [r1]
    361c:	strd	r0, [fp, #-28]	; 0xffffffe4
    3620:	ldr	r1, [fp, #-16]
    3624:	ldr	r1, [r1, #44]	; 0x2c
    3628:	str	r1, [fp, #-32]	; 0xffffffe0
    362c:	ldrd	r0, [fp, #-28]	; 0xffffffe4
    3630:	mov	r4, #7
    3634:	mov	r5, #0
    3638:	and	r0, r0, r4
    363c:	and	r1, r1, r5
    3640:	orrs	r1, r0, r1
    3644:	beq	3684 <read_double+0x108>
    3648:	ldr	r3, [fp, #-48]	; 0xffffffd0
    364c:	ldr	r1, [r3]
    3650:	ldr	r3, [fp, #-52]	; 0xffffffcc
    3654:	str	r3, [sp, #8]
    3658:	mov	r2, #64	; 0x40
    365c:	mov	r3, #0
    3660:	strd	r2, [sp]
    3664:	ldrd	r2, [fp, #-28]	; 0xffffffe4
    3668:	mov	r0, r1
    366c:	bl	1e4 <read_bits>
    3670:	mov	r3, r0
    3674:	cmp	r3, #0
    3678:	beq	36cc <read_double+0x150>
    367c:	mvn	r3, #0
    3680:	b	3748 <read_double+0x1cc>
    3684:	ldr	r1, [fp, #-48]	; 0xffffffd0
    3688:	ldr	ip, [r1]
    368c:	ldrd	r0, [fp, #-28]	; 0xffffffe4
    3690:	lsr	r2, r0, #3
    3694:	orr	r2, r2, r1, lsl #29
    3698:	asr	r3, r1, #3
    369c:	ldr	r1, [fp, #-52]	; 0xffffffcc
    36a0:	str	r1, [sp, #8]
    36a4:	mov	r0, #8
    36a8:	mov	r1, #0
    36ac:	strd	r0, [sp]
    36b0:	mov	r0, ip
    36b4:	bl	0 <read_bytes>
    36b8:	mov	r3, r0
    36bc:	cmp	r3, #0
    36c0:	beq	36cc <read_double+0x150>
    36c4:	mvn	r3, #0
    36c8:	b	3748 <read_double+0x1cc>
    36cc:	ldr	r3, [fp, #-32]	; 0xffffffe0
    36d0:	cmp	r3, #0
    36d4:	bne	3744 <read_double+0x1c8>
    36d8:	ldr	r3, [fp, #-52]	; 0xffffffcc
    36dc:	ldrb	r3, [r3, #7]
    36e0:	strb	r3, [fp, #-44]	; 0xffffffd4
    36e4:	ldr	r3, [fp, #-52]	; 0xffffffcc
    36e8:	ldrb	r3, [r3, #6]
    36ec:	strb	r3, [fp, #-43]	; 0xffffffd5
    36f0:	ldr	r3, [fp, #-52]	; 0xffffffcc
    36f4:	ldrb	r3, [r3, #5]
    36f8:	strb	r3, [fp, #-42]	; 0xffffffd6
    36fc:	ldr	r3, [fp, #-52]	; 0xffffffcc
    3700:	ldrb	r3, [r3, #4]
    3704:	strb	r3, [fp, #-41]	; 0xffffffd7
    3708:	ldr	r3, [fp, #-52]	; 0xffffffcc
    370c:	ldrb	r3, [r3, #3]
    3710:	strb	r3, [fp, #-40]	; 0xffffffd8
    3714:	ldr	r3, [fp, #-52]	; 0xffffffcc
    3718:	ldrb	r3, [r3, #2]
    371c:	strb	r3, [fp, #-39]	; 0xffffffd9
    3720:	ldr	r3, [fp, #-52]	; 0xffffffcc
    3724:	ldrb	r3, [r3, #1]
    3728:	strb	r3, [fp, #-38]	; 0xffffffda
    372c:	ldr	r3, [fp, #-52]	; 0xffffffcc
    3730:	ldrb	r3, [r3]
    3734:	strb	r3, [fp, #-37]	; 0xffffffdb
    3738:	ldrd	r2, [fp, #-44]	; 0xffffffd4
    373c:	ldr	r1, [fp, #-52]	; 0xffffffcc
    3740:	strd	r2, [r1]
    3744:	mov	r3, #0
    3748:	mov	r0, r3
    374c:	sub	sp, fp, #12
    3750:	pop	{r4, r5, fp, pc}

00003754 <coda_bin_cursor_read_double>:
    3754:	push	{fp, lr}
    3758:	add	fp, sp, #4
    375c:	sub	sp, sp, #8
    3760:	str	r0, [fp, #-8]
    3764:	str	r1, [fp, #-12]
    3768:	ldr	r1, [fp, #-12]
    376c:	ldr	r0, [fp, #-8]
    3770:	bl	357c <read_double>
    3774:	mov	r3, r0
    3778:	mov	r0, r3
    377c:	sub	sp, fp, #4
    3780:	pop	{fp, pc}

00003784 <coda_bin_cursor_read_char>:
    3784:	push	{fp, lr}
    3788:	add	fp, sp, #4
    378c:	sub	sp, sp, #8
    3790:	str	r0, [fp, #-8]
    3794:	str	r1, [fp, #-12]
    3798:	ldr	r1, [fp, #-12]
    379c:	ldr	r0, [fp, #-8]
    37a0:	bl	1c44 <coda_bin_cursor_read_uint8>
    37a4:	mov	r3, r0
    37a8:	mov	r0, r3
    37ac:	sub	sp, fp, #4
    37b0:	pop	{fp, pc}

000037b4 <coda_bin_cursor_read_string>:
    37b4:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
    37b8:	add	fp, sp, #28
    37bc:	sub	sp, sp, #120	; 0x78
    37c0:	str	r0, [fp, #-112]	; 0xffffff90
    37c4:	str	r1, [fp, #-116]	; 0xffffff8c
    37c8:	str	r2, [fp, #-120]	; 0xffffff88
    37cc:	ldr	r3, [fp, #-112]	; 0xffffff90
    37d0:	ldr	r3, [r3, #4]
    37d4:	sub	r3, r3, #1
    37d8:	ldr	r2, [fp, #-112]	; 0xffffff90
    37dc:	lsl	r3, r3, #4
    37e0:	add	r3, r2, r3
    37e4:	ldr	r3, [r3, #8]
    37e8:	ldr	r3, [r3]
    37ec:	cmp	r3, #99	; 0x63
    37f0:	bhi	3814 <coda_bin_cursor_read_string+0x60>
    37f4:	ldr	r3, [fp, #-112]	; 0xffffff90
    37f8:	ldr	r3, [r3, #4]
    37fc:	sub	r3, r3, #1
    3800:	ldr	r2, [fp, #-112]	; 0xffffff90
    3804:	lsl	r3, r3, #4
    3808:	add	r3, r2, r3
    380c:	ldr	r3, [r3, #8]
    3810:	b	3834 <coda_bin_cursor_read_string+0x80>
    3814:	ldr	r3, [fp, #-112]	; 0xffffff90
    3818:	ldr	r3, [r3, #4]
    381c:	sub	r3, r3, #1
    3820:	ldr	r2, [fp, #-112]	; 0xffffff90
    3824:	lsl	r3, r3, #4
    3828:	add	r3, r2, r3
    382c:	ldr	r3, [r3, #8]
    3830:	ldr	r3, [r3, #4]
    3834:	str	r3, [fp, #-40]	; 0xffffffd8
    3838:	ldr	r3, [fp, #-112]	; 0xffffff90
    383c:	ldr	r3, [r3, #4]
    3840:	sub	r3, r3, #1
    3844:	ldr	r2, [fp, #-112]	; 0xffffff90
    3848:	add	r3, r3, #1
    384c:	lsl	r3, r3, #4
    3850:	add	r3, r2, r3
    3854:	ldrd	r2, [r3]
    3858:	strd	r2, [fp, #-52]	; 0xffffffcc
    385c:	mov	r2, #0
    3860:	mov	r3, #0
    3864:	strd	r2, [fp, #-36]	; 0xffffffdc
    3868:	ldr	r3, [fp, #-40]	; 0xffffffd8
    386c:	ldrd	r2, [r3, #24]
    3870:	cmp	r2, #0
    3874:	sbcs	r3, r3, #0
    3878:	bge	39a0 <coda_bin_cursor_read_string+0x1ec>
    387c:	sub	r3, fp, #60	; 0x3c
    3880:	mov	r1, r3
    3884:	ldr	r0, [fp, #-112]	; 0xffffff90
    3888:	bl	1570 <coda_bin_cursor_get_bit_size>
    388c:	mov	r3, r0
    3890:	cmp	r3, #0
    3894:	beq	38a0 <coda_bin_cursor_read_string+0xec>
    3898:	mvn	r3, #0
    389c:	b	3a6c <coda_bin_cursor_read_string+0x2b8>
    38a0:	ldrd	r2, [fp, #-60]	; 0xffffffc4
    38a4:	cmp	r2, #0
    38a8:	sbcs	r3, r3, #0
    38ac:	bge	3958 <coda_bin_cursor_read_string+0x1a4>
    38b0:	ldrd	r0, [fp, #-60]	; 0xffffffc4
    38b4:	sub	r3, fp, #84	; 0x54
    38b8:	mov	r2, r3
    38bc:	bl	0 <coda_str64>
    38c0:	ldr	r3, [fp, #-112]	; 0xffffff90
    38c4:	ldr	r3, [r3, #4]
    38c8:	sub	r3, r3, #1
    38cc:	ldr	r2, [fp, #-112]	; 0xffffff90
    38d0:	add	r3, r3, #1
    38d4:	lsl	r3, r3, #4
    38d8:	add	r3, r2, r3
    38dc:	ldrd	r2, [r3]
    38e0:	lsr	r1, r2, #3
    38e4:	str	r1, [fp, #-132]	; 0xffffff7c
    38e8:	ldr	r1, [fp, #-132]	; 0xffffff7c
    38ec:	orr	r1, r1, r3, lsl #29
    38f0:	str	r1, [fp, #-132]	; 0xffffff7c
    38f4:	asr	r3, r3, #3
    38f8:	str	r3, [fp, #-128]	; 0xffffff80
    38fc:	sub	r3, fp, #108	; 0x6c
    3900:	mov	r2, r3
    3904:	ldrd	r0, [fp, #-132]	; 0xffffff7c
    3908:	bl	0 <coda_str64>
    390c:	ldr	r3, [fp, #-112]	; 0xffffff90
    3910:	ldr	r3, [r3, #4]
    3914:	sub	r3, r3, #1
    3918:	ldr	r2, [fp, #-112]	; 0xffffff90
    391c:	add	r3, r3, #1
    3920:	lsl	r3, r3, #4
    3924:	add	r3, r2, r3
    3928:	ldrd	r2, [r3]
    392c:	mov	r3, r2
    3930:	and	r3, r3, #7
    3934:	sub	r1, fp, #108	; 0x6c
    3938:	sub	r2, fp, #84	; 0x54
    393c:	str	r3, [sp]
    3940:	mov	r3, r1
    3944:	ldr	r1, [pc, #300]	; 3a78 <coda_bin_cursor_read_string+0x2c4>
    3948:	ldr	r0, [pc, #300]	; 3a7c <coda_bin_cursor_read_string+0x2c8>
    394c:	bl	0 <coda_set_error>
    3950:	mvn	r3, #0
    3954:	b	3a6c <coda_bin_cursor_read_string+0x2b8>
    3958:	ldrd	r2, [fp, #-60]	; 0xffffffc4
    395c:	mov	r0, #7
    3960:	mov	r1, #0
    3964:	and	r2, r2, r0
    3968:	and	r3, r3, r1
    396c:	orrs	r3, r2, r3
    3970:	beq	3988 <coda_bin_cursor_read_string+0x1d4>
    3974:	ldr	r1, [pc, #260]	; 3a80 <coda_bin_cursor_read_string+0x2cc>
    3978:	ldr	r0, [pc, #252]	; 3a7c <coda_bin_cursor_read_string+0x2c8>
    397c:	bl	0 <coda_set_error>
    3980:	mvn	r3, #0
    3984:	b	3a6c <coda_bin_cursor_read_string+0x2b8>
    3988:	ldrd	r2, [fp, #-60]	; 0xffffffc4
    398c:	lsr	r8, r2, #3
    3990:	orr	r8, r8, r3, lsl #29
    3994:	asr	r9, r3, #3
    3998:	strd	r8, [fp, #-36]	; 0xffffffdc
    399c:	b	39b8 <coda_bin_cursor_read_string+0x204>
    39a0:	ldr	r3, [fp, #-40]	; 0xffffffd8
    39a4:	ldrd	r2, [r3, #24]
    39a8:	lsr	r6, r2, #3
    39ac:	orr	r6, r6, r3, lsl #29
    39b0:	asr	r7, r3, #3
    39b4:	strd	r6, [fp, #-36]	; 0xffffffdc
    39b8:	ldrd	r2, [fp, #-36]	; 0xffffffdc
    39bc:	adds	r2, r2, #1
    39c0:	adc	r3, r3, #0
    39c4:	ldr	r1, [fp, #-120]	; 0xffffff88
    39c8:	mov	r0, r1
    39cc:	asr	r1, r0, #31
    39d0:	cmp	r0, r2
    39d4:	sbcs	r3, r1, r3
    39d8:	bge	39f0 <coda_bin_cursor_read_string+0x23c>
    39dc:	ldr	r3, [fp, #-120]	; 0xffffff88
    39e0:	sub	r3, r3, #1
    39e4:	mov	r2, r3
    39e8:	asr	r3, r2, #31
    39ec:	strd	r2, [fp, #-36]	; 0xffffffdc
    39f0:	ldrd	r2, [fp, #-36]	; 0xffffffdc
    39f4:	cmp	r2, #1
    39f8:	sbcs	r3, r3, #0
    39fc:	blt	3a5c <coda_bin_cursor_read_string+0x2a8>
    3a00:	ldr	r3, [fp, #-112]	; 0xffffff90
    3a04:	ldr	r1, [r3]
    3a08:	ldrd	r2, [fp, #-36]	; 0xffffffdc
    3a0c:	lsl	r5, r3, #3
    3a10:	orr	r5, r5, r2, lsr #29
    3a14:	lsl	r4, r2, #3
    3a18:	ldr	r3, [fp, #-116]	; 0xffffff8c
    3a1c:	str	r3, [sp, #8]
    3a20:	strd	r4, [sp]
    3a24:	ldrd	r2, [fp, #-52]	; 0xffffffcc
    3a28:	mov	r0, r1
    3a2c:	bl	1e4 <read_bits>
    3a30:	mov	r3, r0
    3a34:	cmp	r3, #0
    3a38:	beq	3a44 <coda_bin_cursor_read_string+0x290>
    3a3c:	mvn	r3, #0
    3a40:	b	3a6c <coda_bin_cursor_read_string+0x2b8>
    3a44:	ldr	r3, [fp, #-36]	; 0xffffffdc
    3a48:	ldr	r2, [fp, #-116]	; 0xffffff8c
    3a4c:	add	r3, r2, r3
    3a50:	mov	r2, #0
    3a54:	strb	r2, [r3]
    3a58:	b	3a68 <coda_bin_cursor_read_string+0x2b4>
    3a5c:	ldr	r3, [fp, #-116]	; 0xffffff8c
    3a60:	mov	r2, #0
    3a64:	strb	r2, [r3]
    3a68:	mov	r3, #0
    3a6c:	mov	r0, r3
    3a70:	sub	sp, fp, #28
    3a74:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
    3a78:	.word	0x000005d0
    3a7c:	.word	0xfffffed4
    3a80:	.word	0x00000634

00003a84 <coda_bin_cursor_read_bits>:
    3a84:	push	{fp, lr}
    3a88:	add	fp, sp, #4
    3a8c:	sub	sp, sp, #32
    3a90:	str	r0, [fp, #-8]
    3a94:	str	r1, [fp, #-12]
    3a98:	strd	r2, [fp, #-20]	; 0xffffffec
    3a9c:	ldr	r3, [fp, #-8]
    3aa0:	ldr	ip, [r3]
    3aa4:	ldr	r3, [fp, #-8]
    3aa8:	ldr	r3, [r3, #4]
    3aac:	sub	r3, r3, #1
    3ab0:	ldr	r2, [fp, #-8]
    3ab4:	add	r3, r3, #1
    3ab8:	lsl	r3, r3, #4
    3abc:	add	r3, r2, r3
    3ac0:	ldrd	r0, [r3]
    3ac4:	ldrd	r2, [fp, #-20]	; 0xffffffec
    3ac8:	adds	r0, r0, r2
    3acc:	adc	r1, r1, r3
    3ad0:	ldr	r3, [fp, #-12]
    3ad4:	str	r3, [sp, #8]
    3ad8:	ldrd	r2, [fp, #4]
    3adc:	strd	r2, [sp]
    3ae0:	mov	r2, r0
    3ae4:	mov	r3, r1
    3ae8:	mov	r0, ip
    3aec:	bl	1e4 <read_bits>
    3af0:	mov	r3, r0
    3af4:	mov	r0, r3
    3af8:	sub	sp, fp, #4
    3afc:	pop	{fp, pc}

00003b00 <coda_bin_cursor_read_bytes>:
    3b00:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
    3b04:	add	fp, sp, #28
    3b08:	sub	sp, sp, #32
    3b0c:	str	r0, [fp, #-32]	; 0xffffffe0
    3b10:	str	r1, [fp, #-36]	; 0xffffffdc
    3b14:	strd	r2, [fp, #-44]	; 0xffffffd4
    3b18:	ldr	r3, [fp, #-32]	; 0xffffffe0
    3b1c:	ldr	r3, [r3, #4]
    3b20:	sub	r3, r3, #1
    3b24:	ldr	r2, [fp, #-32]	; 0xffffffe0
    3b28:	add	r3, r3, #1
    3b2c:	lsl	r3, r3, #4
    3b30:	add	r3, r2, r3
    3b34:	ldrd	r2, [r3]
    3b38:	mov	r0, #7
    3b3c:	mov	r1, #0
    3b40:	and	r2, r2, r0
    3b44:	and	r3, r3, r1
    3b48:	orrs	r3, r2, r3
    3b4c:	beq	3b90 <coda_bin_cursor_read_bytes+0x90>
    3b50:	ldrd	r2, [fp, #-44]	; 0xffffffd4
    3b54:	lsl	r9, r3, #3
    3b58:	orr	r9, r9, r2, lsr #29
    3b5c:	lsl	r8, r2, #3
    3b60:	ldrd	r2, [fp, #4]
    3b64:	lsl	r7, r3, #3
    3b68:	orr	r7, r7, r2, lsr #29
    3b6c:	lsl	r6, r2, #3
    3b70:	strd	r6, [sp]
    3b74:	mov	r2, r8
    3b78:	mov	r3, r9
    3b7c:	ldr	r1, [fp, #-36]	; 0xffffffdc
    3b80:	ldr	r0, [fp, #-32]	; 0xffffffe0
    3b84:	bl	3a84 <coda_bin_cursor_read_bits>
    3b88:	mov	r3, r0
    3b8c:	b	3bf4 <coda_bin_cursor_read_bytes+0xf4>
    3b90:	ldr	r3, [fp, #-32]	; 0xffffffe0
    3b94:	ldr	ip, [r3]
    3b98:	ldr	r3, [fp, #-32]	; 0xffffffe0
    3b9c:	ldr	r3, [r3, #4]
    3ba0:	sub	r3, r3, #1
    3ba4:	ldr	r2, [fp, #-32]	; 0xffffffe0
    3ba8:	add	r3, r3, #1
    3bac:	lsl	r3, r3, #4
    3bb0:	add	r3, r2, r3
    3bb4:	ldrd	r2, [r3]
    3bb8:	lsr	r4, r2, #3
    3bbc:	orr	r4, r4, r3, lsl #29
    3bc0:	asr	r5, r3, #3
    3bc4:	ldrd	r2, [fp, #-44]	; 0xffffffd4
    3bc8:	adds	r0, r4, r2
    3bcc:	adc	r1, r5, r3
    3bd0:	ldr	r3, [fp, #-36]	; 0xffffffdc
    3bd4:	str	r3, [sp, #8]
    3bd8:	ldrd	r2, [fp, #4]
    3bdc:	strd	r2, [sp]
    3be0:	mov	r2, r0
    3be4:	mov	r3, r1
    3be8:	mov	r0, ip
    3bec:	bl	0 <read_bytes>
    3bf0:	mov	r3, r0
    3bf4:	mov	r0, r3
    3bf8:	sub	sp, fp, #28
    3bfc:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}

00003c00 <coda_bin_cursor_read_int8_array>:
    3c00:	push	{fp, lr}
    3c04:	add	fp, sp, #4
    3c08:	sub	sp, sp, #32
    3c0c:	str	r0, [fp, #-16]
    3c10:	str	r1, [fp, #-20]	; 0xffffffec
    3c14:	str	r2, [fp, #-24]	; 0xffffffe8
    3c18:	ldr	r3, [fp, #-16]
    3c1c:	ldr	r3, [r3, #4]
    3c20:	sub	r3, r3, #1
    3c24:	ldr	r2, [fp, #-16]
    3c28:	lsl	r3, r3, #4
    3c2c:	add	r3, r2, r3
    3c30:	ldr	r3, [r3, #8]
    3c34:	ldr	r3, [r3]
    3c38:	cmp	r3, #99	; 0x63
    3c3c:	bhi	3c60 <coda_bin_cursor_read_int8_array+0x60>
    3c40:	ldr	r3, [fp, #-16]
    3c44:	ldr	r3, [r3, #4]
    3c48:	sub	r3, r3, #1
    3c4c:	ldr	r2, [fp, #-16]
    3c50:	lsl	r3, r3, #4
    3c54:	add	r3, r2, r3
    3c58:	ldr	r3, [r3, #8]
    3c5c:	b	3c80 <coda_bin_cursor_read_int8_array+0x80>
    3c60:	ldr	r3, [fp, #-16]
    3c64:	ldr	r3, [r3, #4]
    3c68:	sub	r3, r3, #1
    3c6c:	ldr	r2, [fp, #-16]
    3c70:	lsl	r3, r3, #4
    3c74:	add	r3, r2, r3
    3c78:	ldr	r3, [r3, #8]
    3c7c:	ldr	r3, [r3, #4]
    3c80:	str	r3, [fp, #-8]
    3c84:	ldr	r3, [fp, #-8]
    3c88:	ldr	r3, [r3, #40]	; 0x28
    3c8c:	ldr	r3, [r3]
    3c90:	cmp	r3, #1
    3c94:	bne	3cbc <coda_bin_cursor_read_int8_array+0xbc>
    3c98:	ldr	r3, [fp, #-24]	; 0xffffffe8
    3c9c:	str	r3, [sp]
    3ca0:	mov	r3, #1
    3ca4:	ldr	r2, [fp, #-20]	; 0xffffffec
    3ca8:	ldr	r1, [pc, #164]	; 3d54 <coda_bin_cursor_read_int8_array+0x154>
    3cac:	ldr	r0, [fp, #-16]
    3cb0:	bl	7a4 <read_array>
    3cb4:	mov	r3, r0
    3cb8:	b	3d48 <coda_bin_cursor_read_int8_array+0x148>
    3cbc:	ldr	r3, [fp, #-8]
    3cc0:	ldr	r3, [r3, #40]	; 0x28
    3cc4:	ldr	r3, [r3]
    3cc8:	cmp	r3, #0
    3ccc:	beq	3ce4 <coda_bin_cursor_read_int8_array+0xe4>
    3cd0:	ldr	r3, [pc, #128]	; 3d58 <coda_bin_cursor_read_int8_array+0x158>
    3cd4:	ldr	r2, [pc, #128]	; 3d5c <coda_bin_cursor_read_int8_array+0x15c>
    3cd8:	ldr	r1, [pc, #128]	; 3d60 <coda_bin_cursor_read_int8_array+0x160>
    3cdc:	ldr	r0, [pc, #128]	; 3d64 <coda_bin_cursor_read_int8_array+0x164>
    3ce0:	bl	0 <__assert_fail>
    3ce4:	mov	r3, #0
    3ce8:	str	r3, [sp]
    3cec:	mov	r3, #1
    3cf0:	ldr	r2, [fp, #-20]	; 0xffffffec
    3cf4:	ldr	r1, [pc, #108]	; 3d68 <coda_bin_cursor_read_int8_array+0x168>
    3cf8:	ldr	r0, [fp, #-16]
    3cfc:	bl	7a4 <read_array>
    3d00:	mov	r3, r0
    3d04:	cmp	r3, #0
    3d08:	beq	3d14 <coda_bin_cursor_read_int8_array+0x114>
    3d0c:	mvn	r3, #0
    3d10:	b	3d48 <coda_bin_cursor_read_int8_array+0x148>
    3d14:	ldr	r3, [fp, #-24]	; 0xffffffe8
    3d18:	cmp	r3, #0
    3d1c:	beq	3d44 <coda_bin_cursor_read_int8_array+0x144>
    3d20:	mov	r2, #1
    3d24:	ldr	r1, [fp, #-20]	; 0xffffffec
    3d28:	ldr	r0, [fp, #-16]
    3d2c:	bl	cac <transpose_array>
    3d30:	mov	r3, r0
    3d34:	cmp	r3, #0
    3d38:	beq	3d44 <coda_bin_cursor_read_int8_array+0x144>
    3d3c:	mvn	r3, #0
    3d40:	b	3d48 <coda_bin_cursor_read_int8_array+0x148>
    3d44:	mov	r3, #0
    3d48:	mov	r0, r3
    3d4c:	sub	sp, fp, #4
    3d50:	pop	{fp, pc}
    3d54:	.word	0x00000000
    3d58:	.word	0x000006f8
    3d5c:	.word	0x0000038a
    3d60:	.word	0x00000264
    3d64:	.word	0x00000674
    3d68:	.word	0x00000000

00003d6c <coda_bin_cursor_read_uint8_array>:
    3d6c:	push	{fp, lr}
    3d70:	add	fp, sp, #4
    3d74:	sub	sp, sp, #32
    3d78:	str	r0, [fp, #-16]
    3d7c:	str	r1, [fp, #-20]	; 0xffffffec
    3d80:	str	r2, [fp, #-24]	; 0xffffffe8
    3d84:	ldr	r3, [fp, #-16]
    3d88:	ldr	r3, [r3, #4]
    3d8c:	sub	r3, r3, #1
    3d90:	ldr	r2, [fp, #-16]
    3d94:	lsl	r3, r3, #4
    3d98:	add	r3, r2, r3
    3d9c:	ldr	r3, [r3, #8]
    3da0:	ldr	r3, [r3]
    3da4:	cmp	r3, #99	; 0x63
    3da8:	bhi	3dcc <coda_bin_cursor_read_uint8_array+0x60>
    3dac:	ldr	r3, [fp, #-16]
    3db0:	ldr	r3, [r3, #4]
    3db4:	sub	r3, r3, #1
    3db8:	ldr	r2, [fp, #-16]
    3dbc:	lsl	r3, r3, #4
    3dc0:	add	r3, r2, r3
    3dc4:	ldr	r3, [r3, #8]
    3dc8:	b	3dec <coda_bin_cursor_read_uint8_array+0x80>
    3dcc:	ldr	r3, [fp, #-16]
    3dd0:	ldr	r3, [r3, #4]
    3dd4:	sub	r3, r3, #1
    3dd8:	ldr	r2, [fp, #-16]
    3ddc:	lsl	r3, r3, #4
    3de0:	add	r3, r2, r3
    3de4:	ldr	r3, [r3, #8]
    3de8:	ldr	r3, [r3, #4]
    3dec:	str	r3, [fp, #-8]
    3df0:	ldr	r3, [fp, #-8]
    3df4:	ldr	r3, [r3, #40]	; 0x28
    3df8:	ldr	r3, [r3]
    3dfc:	cmp	r3, #1
    3e00:	bne	3e28 <coda_bin_cursor_read_uint8_array+0xbc>
    3e04:	ldr	r3, [fp, #-24]	; 0xffffffe8
    3e08:	str	r3, [sp]
    3e0c:	mov	r3, #1
    3e10:	ldr	r2, [fp, #-20]	; 0xffffffec
    3e14:	ldr	r1, [pc, #164]	; 3ec0 <coda_bin_cursor_read_uint8_array+0x154>
    3e18:	ldr	r0, [fp, #-16]
    3e1c:	bl	7a4 <read_array>
    3e20:	mov	r3, r0
    3e24:	b	3eb4 <coda_bin_cursor_read_uint8_array+0x148>
    3e28:	ldr	r3, [fp, #-8]
    3e2c:	ldr	r3, [r3, #40]	; 0x28
    3e30:	ldr	r3, [r3]
    3e34:	cmp	r3, #0
    3e38:	beq	3e50 <coda_bin_cursor_read_uint8_array+0xe4>
    3e3c:	ldr	r3, [pc, #128]	; 3ec4 <coda_bin_cursor_read_uint8_array+0x158>
    3e40:	mov	r2, #932	; 0x3a4
    3e44:	ldr	r1, [pc, #124]	; 3ec8 <coda_bin_cursor_read_uint8_array+0x15c>
    3e48:	ldr	r0, [pc, #124]	; 3ecc <coda_bin_cursor_read_uint8_array+0x160>
    3e4c:	bl	0 <__assert_fail>
    3e50:	mov	r3, #0
    3e54:	str	r3, [sp]
    3e58:	mov	r3, #1
    3e5c:	ldr	r2, [fp, #-20]	; 0xffffffec
    3e60:	ldr	r1, [pc, #104]	; 3ed0 <coda_bin_cursor_read_uint8_array+0x164>
    3e64:	ldr	r0, [fp, #-16]
    3e68:	bl	7a4 <read_array>
    3e6c:	mov	r3, r0
    3e70:	cmp	r3, #0
    3e74:	beq	3e80 <coda_bin_cursor_read_uint8_array+0x114>
    3e78:	mvn	r3, #0
    3e7c:	b	3eb4 <coda_bin_cursor_read_uint8_array+0x148>
    3e80:	ldr	r3, [fp, #-24]	; 0xffffffe8
    3e84:	cmp	r3, #0
    3e88:	beq	3eb0 <coda_bin_cursor_read_uint8_array+0x144>
    3e8c:	mov	r2, #1
    3e90:	ldr	r1, [fp, #-20]	; 0xffffffec
    3e94:	ldr	r0, [fp, #-16]
    3e98:	bl	cac <transpose_array>
    3e9c:	mov	r3, r0
    3ea0:	cmp	r3, #0
    3ea4:	beq	3eb0 <coda_bin_cursor_read_uint8_array+0x144>
    3ea8:	mvn	r3, #0
    3eac:	b	3eb4 <coda_bin_cursor_read_uint8_array+0x148>
    3eb0:	mov	r3, #0
    3eb4:	mov	r0, r3
    3eb8:	sub	sp, fp, #4
    3ebc:	pop	{fp, pc}
    3ec0:	.word	0x00000000
    3ec4:	.word	0x00000718
    3ec8:	.word	0x00000264
    3ecc:	.word	0x00000674
    3ed0:	.word	0x00000000

00003ed4 <coda_bin_cursor_read_int16_array>:
    3ed4:	push	{fp, lr}
    3ed8:	add	fp, sp, #4
    3edc:	sub	sp, sp, #32
    3ee0:	str	r0, [fp, #-16]
    3ee4:	str	r1, [fp, #-20]	; 0xffffffec
    3ee8:	str	r2, [fp, #-24]	; 0xffffffe8
    3eec:	ldr	r3, [fp, #-16]
    3ef0:	ldr	r3, [r3, #4]
    3ef4:	sub	r3, r3, #1
    3ef8:	ldr	r2, [fp, #-16]
    3efc:	lsl	r3, r3, #4
    3f00:	add	r3, r2, r3
    3f04:	ldr	r3, [r3, #8]
    3f08:	ldr	r3, [r3]
    3f0c:	cmp	r3, #99	; 0x63
    3f10:	bhi	3f34 <coda_bin_cursor_read_int16_array+0x60>
    3f14:	ldr	r3, [fp, #-16]
    3f18:	ldr	r3, [r3, #4]
    3f1c:	sub	r3, r3, #1
    3f20:	ldr	r2, [fp, #-16]
    3f24:	lsl	r3, r3, #4
    3f28:	add	r3, r2, r3
    3f2c:	ldr	r3, [r3, #8]
    3f30:	b	3f54 <coda_bin_cursor_read_int16_array+0x80>
    3f34:	ldr	r3, [fp, #-16]
    3f38:	ldr	r3, [r3, #4]
    3f3c:	sub	r3, r3, #1
    3f40:	ldr	r2, [fp, #-16]
    3f44:	lsl	r3, r3, #4
    3f48:	add	r3, r2, r3
    3f4c:	ldr	r3, [r3, #8]
    3f50:	ldr	r3, [r3, #4]
    3f54:	str	r3, [fp, #-8]
    3f58:	ldr	r3, [fp, #-8]
    3f5c:	ldr	r3, [r3, #40]	; 0x28
    3f60:	ldr	r3, [r3]
    3f64:	cmp	r3, #1
    3f68:	bne	3f90 <coda_bin_cursor_read_int16_array+0xbc>
    3f6c:	ldr	r3, [fp, #-24]	; 0xffffffe8
    3f70:	str	r3, [sp]
    3f74:	mov	r3, #2
    3f78:	ldr	r2, [fp, #-20]	; 0xffffffec
    3f7c:	ldr	r1, [pc, #164]	; 4028 <coda_bin_cursor_read_int16_array+0x154>
    3f80:	ldr	r0, [fp, #-16]
    3f84:	bl	7a4 <read_array>
    3f88:	mov	r3, r0
    3f8c:	b	401c <coda_bin_cursor_read_int16_array+0x148>
    3f90:	ldr	r3, [fp, #-8]
    3f94:	ldr	r3, [r3, #40]	; 0x28
    3f98:	ldr	r3, [r3]
    3f9c:	cmp	r3, #0
    3fa0:	beq	3fb8 <coda_bin_cursor_read_int16_array+0xe4>
    3fa4:	ldr	r3, [pc, #128]	; 402c <coda_bin_cursor_read_int16_array+0x158>
    3fa8:	ldr	r2, [pc, #128]	; 4030 <coda_bin_cursor_read_int16_array+0x15c>
    3fac:	ldr	r1, [pc, #128]	; 4034 <coda_bin_cursor_read_int16_array+0x160>
    3fb0:	ldr	r0, [pc, #128]	; 4038 <coda_bin_cursor_read_int16_array+0x164>
    3fb4:	bl	0 <__assert_fail>
    3fb8:	mov	r3, #0
    3fbc:	str	r3, [sp]
    3fc0:	mov	r3, #2
    3fc4:	ldr	r2, [fp, #-20]	; 0xffffffec
    3fc8:	ldr	r1, [pc, #108]	; 403c <coda_bin_cursor_read_int16_array+0x168>
    3fcc:	ldr	r0, [fp, #-16]
    3fd0:	bl	7a4 <read_array>
    3fd4:	mov	r3, r0
    3fd8:	cmp	r3, #0
    3fdc:	beq	3fe8 <coda_bin_cursor_read_int16_array+0x114>
    3fe0:	mvn	r3, #0
    3fe4:	b	401c <coda_bin_cursor_read_int16_array+0x148>
    3fe8:	ldr	r3, [fp, #-24]	; 0xffffffe8
    3fec:	cmp	r3, #0
    3ff0:	beq	4018 <coda_bin_cursor_read_int16_array+0x144>
    3ff4:	mov	r2, #2
    3ff8:	ldr	r1, [fp, #-20]	; 0xffffffec
    3ffc:	ldr	r0, [fp, #-16]
    4000:	bl	cac <transpose_array>
    4004:	mov	r3, r0
    4008:	cmp	r3, #0
    400c:	beq	4018 <coda_bin_cursor_read_int16_array+0x144>
    4010:	mvn	r3, #0
    4014:	b	401c <coda_bin_cursor_read_int16_array+0x148>
    4018:	mov	r3, #0
    401c:	mov	r0, r3
    4020:	sub	sp, fp, #4
    4024:	pop	{fp, pc}
    4028:	.word	0x00000000
    402c:	.word	0x0000073c
    4030:	.word	0x000003be
    4034:	.word	0x00000264
    4038:	.word	0x00000674
    403c:	.word	0x00000000

00004040 <coda_bin_cursor_read_uint16_array>:
    4040:	push	{fp, lr}
    4044:	add	fp, sp, #4
    4048:	sub	sp, sp, #32
    404c:	str	r0, [fp, #-16]
    4050:	str	r1, [fp, #-20]	; 0xffffffec
    4054:	str	r2, [fp, #-24]	; 0xffffffe8
    4058:	ldr	r3, [fp, #-16]
    405c:	ldr	r3, [r3, #4]
    4060:	sub	r3, r3, #1
    4064:	ldr	r2, [fp, #-16]
    4068:	lsl	r3, r3, #4
    406c:	add	r3, r2, r3
    4070:	ldr	r3, [r3, #8]
    4074:	ldr	r3, [r3]
    4078:	cmp	r3, #99	; 0x63
    407c:	bhi	40a0 <coda_bin_cursor_read_uint16_array+0x60>
    4080:	ldr	r3, [fp, #-16]
    4084:	ldr	r3, [r3, #4]
    4088:	sub	r3, r3, #1
    408c:	ldr	r2, [fp, #-16]
    4090:	lsl	r3, r3, #4
    4094:	add	r3, r2, r3
    4098:	ldr	r3, [r3, #8]
    409c:	b	40c0 <coda_bin_cursor_read_uint16_array+0x80>
    40a0:	ldr	r3, [fp, #-16]
    40a4:	ldr	r3, [r3, #4]
    40a8:	sub	r3, r3, #1
    40ac:	ldr	r2, [fp, #-16]
    40b0:	lsl	r3, r3, #4
    40b4:	add	r3, r2, r3
    40b8:	ldr	r3, [r3, #8]
    40bc:	ldr	r3, [r3, #4]
    40c0:	str	r3, [fp, #-8]
    40c4:	ldr	r3, [fp, #-8]
    40c8:	ldr	r3, [r3, #40]	; 0x28
    40cc:	ldr	r3, [r3]
    40d0:	cmp	r3, #1
    40d4:	bne	40fc <coda_bin_cursor_read_uint16_array+0xbc>
    40d8:	ldr	r3, [fp, #-24]	; 0xffffffe8
    40dc:	str	r3, [sp]
    40e0:	mov	r3, #2
    40e4:	ldr	r2, [fp, #-20]	; 0xffffffec
    40e8:	ldr	r1, [pc, #164]	; 4194 <coda_bin_cursor_read_uint16_array+0x154>
    40ec:	ldr	r0, [fp, #-16]
    40f0:	bl	7a4 <read_array>
    40f4:	mov	r3, r0
    40f8:	b	4188 <coda_bin_cursor_read_uint16_array+0x148>
    40fc:	ldr	r3, [fp, #-8]
    4100:	ldr	r3, [r3, #40]	; 0x28
    4104:	ldr	r3, [r3]
    4108:	cmp	r3, #0
    410c:	beq	4124 <coda_bin_cursor_read_uint16_array+0xe4>
    4110:	ldr	r3, [pc, #128]	; 4198 <coda_bin_cursor_read_uint16_array+0x158>
    4114:	mov	r2, #984	; 0x3d8
    4118:	ldr	r1, [pc, #124]	; 419c <coda_bin_cursor_read_uint16_array+0x15c>
    411c:	ldr	r0, [pc, #124]	; 41a0 <coda_bin_cursor_read_uint16_array+0x160>
    4120:	bl	0 <__assert_fail>
    4124:	mov	r3, #0
    4128:	str	r3, [sp]
    412c:	mov	r3, #2
    4130:	ldr	r2, [fp, #-20]	; 0xffffffec
    4134:	ldr	r1, [pc, #104]	; 41a4 <coda_bin_cursor_read_uint16_array+0x164>
    4138:	ldr	r0, [fp, #-16]
    413c:	bl	7a4 <read_array>
    4140:	mov	r3, r0
    4144:	cmp	r3, #0
    4148:	beq	4154 <coda_bin_cursor_read_uint16_array+0x114>
    414c:	mvn	r3, #0
    4150:	b	4188 <coda_bin_cursor_read_uint16_array+0x148>
    4154:	ldr	r3, [fp, #-24]	; 0xffffffe8
    4158:	cmp	r3, #0
    415c:	beq	4184 <coda_bin_cursor_read_uint16_array+0x144>
    4160:	mov	r2, #2
    4164:	ldr	r1, [fp, #-20]	; 0xffffffec
    4168:	ldr	r0, [fp, #-16]
    416c:	bl	cac <transpose_array>
    4170:	mov	r3, r0
    4174:	cmp	r3, #0
    4178:	beq	4184 <coda_bin_cursor_read_uint16_array+0x144>
    417c:	mvn	r3, #0
    4180:	b	4188 <coda_bin_cursor_read_uint16_array+0x148>
    4184:	mov	r3, #0
    4188:	mov	r0, r3
    418c:	sub	sp, fp, #4
    4190:	pop	{fp, pc}
    4194:	.word	0x00000000
    4198:	.word	0x00000760
    419c:	.word	0x00000264
    41a0:	.word	0x00000674
    41a4:	.word	0x00000000

000041a8 <coda_bin_cursor_read_int32_array>:
    41a8:	push	{fp, lr}
    41ac:	add	fp, sp, #4
    41b0:	sub	sp, sp, #32
    41b4:	str	r0, [fp, #-16]
    41b8:	str	r1, [fp, #-20]	; 0xffffffec
    41bc:	str	r2, [fp, #-24]	; 0xffffffe8
    41c0:	ldr	r3, [fp, #-16]
    41c4:	ldr	r3, [r3, #4]
    41c8:	sub	r3, r3, #1
    41cc:	ldr	r2, [fp, #-16]
    41d0:	lsl	r3, r3, #4
    41d4:	add	r3, r2, r3
    41d8:	ldr	r3, [r3, #8]
    41dc:	ldr	r3, [r3]
    41e0:	cmp	r3, #99	; 0x63
    41e4:	bhi	4208 <coda_bin_cursor_read_int32_array+0x60>
    41e8:	ldr	r3, [fp, #-16]
    41ec:	ldr	r3, [r3, #4]
    41f0:	sub	r3, r3, #1
    41f4:	ldr	r2, [fp, #-16]
    41f8:	lsl	r3, r3, #4
    41fc:	add	r3, r2, r3
    4200:	ldr	r3, [r3, #8]
    4204:	b	4228 <coda_bin_cursor_read_int32_array+0x80>
    4208:	ldr	r3, [fp, #-16]
    420c:	ldr	r3, [r3, #4]
    4210:	sub	r3, r3, #1
    4214:	ldr	r2, [fp, #-16]
    4218:	lsl	r3, r3, #4
    421c:	add	r3, r2, r3
    4220:	ldr	r3, [r3, #8]
    4224:	ldr	r3, [r3, #4]
    4228:	str	r3, [fp, #-8]
    422c:	ldr	r3, [fp, #-8]
    4230:	ldr	r3, [r3, #40]	; 0x28
    4234:	ldr	r3, [r3]
    4238:	cmp	r3, #1
    423c:	bne	4264 <coda_bin_cursor_read_int32_array+0xbc>
    4240:	ldr	r3, [fp, #-24]	; 0xffffffe8
    4244:	str	r3, [sp]
    4248:	mov	r3, #4
    424c:	ldr	r2, [fp, #-20]	; 0xffffffec
    4250:	ldr	r1, [pc, #164]	; 42fc <coda_bin_cursor_read_int32_array+0x154>
    4254:	ldr	r0, [fp, #-16]
    4258:	bl	7a4 <read_array>
    425c:	mov	r3, r0
    4260:	b	42f0 <coda_bin_cursor_read_int32_array+0x148>
    4264:	ldr	r3, [fp, #-8]
    4268:	ldr	r3, [r3, #40]	; 0x28
    426c:	ldr	r3, [r3]
    4270:	cmp	r3, #0
    4274:	beq	428c <coda_bin_cursor_read_int32_array+0xe4>
    4278:	ldr	r3, [pc, #128]	; 4300 <coda_bin_cursor_read_int32_array+0x158>
    427c:	ldr	r2, [pc, #128]	; 4304 <coda_bin_cursor_read_int32_array+0x15c>
    4280:	ldr	r1, [pc, #128]	; 4308 <coda_bin_cursor_read_int32_array+0x160>
    4284:	ldr	r0, [pc, #128]	; 430c <coda_bin_cursor_read_int32_array+0x164>
    4288:	bl	0 <__assert_fail>
    428c:	mov	r3, #0
    4290:	str	r3, [sp]
    4294:	mov	r3, #4
    4298:	ldr	r2, [fp, #-20]	; 0xffffffec
    429c:	ldr	r1, [pc, #108]	; 4310 <coda_bin_cursor_read_int32_array+0x168>
    42a0:	ldr	r0, [fp, #-16]
    42a4:	bl	7a4 <read_array>
    42a8:	mov	r3, r0
    42ac:	cmp	r3, #0
    42b0:	beq	42bc <coda_bin_cursor_read_int32_array+0x114>
    42b4:	mvn	r3, #0
    42b8:	b	42f0 <coda_bin_cursor_read_int32_array+0x148>
    42bc:	ldr	r3, [fp, #-24]	; 0xffffffe8
    42c0:	cmp	r3, #0
    42c4:	beq	42ec <coda_bin_cursor_read_int32_array+0x144>
    42c8:	mov	r2, #4
    42cc:	ldr	r1, [fp, #-20]	; 0xffffffec
    42d0:	ldr	r0, [fp, #-16]
    42d4:	bl	cac <transpose_array>
    42d8:	mov	r3, r0
    42dc:	cmp	r3, #0
    42e0:	beq	42ec <coda_bin_cursor_read_int32_array+0x144>
    42e4:	mvn	r3, #0
    42e8:	b	42f0 <coda_bin_cursor_read_int32_array+0x148>
    42ec:	mov	r3, #0
    42f0:	mov	r0, r3
    42f4:	sub	sp, fp, #4
    42f8:	pop	{fp, pc}
    42fc:	.word	0x00000000
    4300:	.word	0x00000784
    4304:	.word	0x000003f2
    4308:	.word	0x00000264
    430c:	.word	0x00000674
    4310:	.word	0x00000000

00004314 <coda_bin_cursor_read_uint32_array>:
    4314:	push	{fp, lr}
    4318:	add	fp, sp, #4
    431c:	sub	sp, sp, #32
    4320:	str	r0, [fp, #-16]
    4324:	str	r1, [fp, #-20]	; 0xffffffec
    4328:	str	r2, [fp, #-24]	; 0xffffffe8
    432c:	ldr	r3, [fp, #-16]
    4330:	ldr	r3, [r3, #4]
    4334:	sub	r3, r3, #1
    4338:	ldr	r2, [fp, #-16]
    433c:	lsl	r3, r3, #4
    4340:	add	r3, r2, r3
    4344:	ldr	r3, [r3, #8]
    4348:	ldr	r3, [r3]
    434c:	cmp	r3, #99	; 0x63
    4350:	bhi	4374 <coda_bin_cursor_read_uint32_array+0x60>
    4354:	ldr	r3, [fp, #-16]
    4358:	ldr	r3, [r3, #4]
    435c:	sub	r3, r3, #1
    4360:	ldr	r2, [fp, #-16]
    4364:	lsl	r3, r3, #4
    4368:	add	r3, r2, r3
    436c:	ldr	r3, [r3, #8]
    4370:	b	4394 <coda_bin_cursor_read_uint32_array+0x80>
    4374:	ldr	r3, [fp, #-16]
    4378:	ldr	r3, [r3, #4]
    437c:	sub	r3, r3, #1
    4380:	ldr	r2, [fp, #-16]
    4384:	lsl	r3, r3, #4
    4388:	add	r3, r2, r3
    438c:	ldr	r3, [r3, #8]
    4390:	ldr	r3, [r3, #4]
    4394:	str	r3, [fp, #-8]
    4398:	ldr	r3, [fp, #-8]
    439c:	ldr	r3, [r3, #40]	; 0x28
    43a0:	ldr	r3, [r3]
    43a4:	cmp	r3, #1
    43a8:	bne	43d0 <coda_bin_cursor_read_uint32_array+0xbc>
    43ac:	ldr	r3, [fp, #-24]	; 0xffffffe8
    43b0:	str	r3, [sp]
    43b4:	mov	r3, #4
    43b8:	ldr	r2, [fp, #-20]	; 0xffffffec
    43bc:	ldr	r1, [pc, #164]	; 4468 <coda_bin_cursor_read_uint32_array+0x154>
    43c0:	ldr	r0, [fp, #-16]
    43c4:	bl	7a4 <read_array>
    43c8:	mov	r3, r0
    43cc:	b	445c <coda_bin_cursor_read_uint32_array+0x148>
    43d0:	ldr	r3, [fp, #-8]
    43d4:	ldr	r3, [r3, #40]	; 0x28
    43d8:	ldr	r3, [r3]
    43dc:	cmp	r3, #0
    43e0:	beq	43f8 <coda_bin_cursor_read_uint32_array+0xe4>
    43e4:	ldr	r3, [pc, #128]	; 446c <coda_bin_cursor_read_uint32_array+0x158>
    43e8:	ldr	r2, [pc, #128]	; 4470 <coda_bin_cursor_read_uint32_array+0x15c>
    43ec:	ldr	r1, [pc, #128]	; 4474 <coda_bin_cursor_read_uint32_array+0x160>
    43f0:	ldr	r0, [pc, #128]	; 4478 <coda_bin_cursor_read_uint32_array+0x164>
    43f4:	bl	0 <__assert_fail>
    43f8:	mov	r3, #0
    43fc:	str	r3, [sp]
    4400:	mov	r3, #4
    4404:	ldr	r2, [fp, #-20]	; 0xffffffec
    4408:	ldr	r1, [pc, #108]	; 447c <coda_bin_cursor_read_uint32_array+0x168>
    440c:	ldr	r0, [fp, #-16]
    4410:	bl	7a4 <read_array>
    4414:	mov	r3, r0
    4418:	cmp	r3, #0
    441c:	beq	4428 <coda_bin_cursor_read_uint32_array+0x114>
    4420:	mvn	r3, #0
    4424:	b	445c <coda_bin_cursor_read_uint32_array+0x148>
    4428:	ldr	r3, [fp, #-24]	; 0xffffffe8
    442c:	cmp	r3, #0
    4430:	beq	4458 <coda_bin_cursor_read_uint32_array+0x144>
    4434:	mov	r2, #4
    4438:	ldr	r1, [fp, #-20]	; 0xffffffec
    443c:	ldr	r0, [fp, #-16]
    4440:	bl	cac <transpose_array>
    4444:	mov	r3, r0
    4448:	cmp	r3, #0
    444c:	beq	4458 <coda_bin_cursor_read_uint32_array+0x144>
    4450:	mvn	r3, #0
    4454:	b	445c <coda_bin_cursor_read_uint32_array+0x148>
    4458:	mov	r3, #0
    445c:	mov	r0, r3
    4460:	sub	sp, fp, #4
    4464:	pop	{fp, pc}
    4468:	.word	0x00000000
    446c:	.word	0x000007a8
    4470:	.word	0x0000040c
    4474:	.word	0x00000264
    4478:	.word	0x00000674
    447c:	.word	0x00000000

00004480 <coda_bin_cursor_read_int64_array>:
    4480:	push	{fp, lr}
    4484:	add	fp, sp, #4
    4488:	sub	sp, sp, #32
    448c:	str	r0, [fp, #-16]
    4490:	str	r1, [fp, #-20]	; 0xffffffec
    4494:	str	r2, [fp, #-24]	; 0xffffffe8
    4498:	ldr	r3, [fp, #-16]
    449c:	ldr	r3, [r3, #4]
    44a0:	sub	r3, r3, #1
    44a4:	ldr	r2, [fp, #-16]
    44a8:	lsl	r3, r3, #4
    44ac:	add	r3, r2, r3
    44b0:	ldr	r3, [r3, #8]
    44b4:	ldr	r3, [r3]
    44b8:	cmp	r3, #99	; 0x63
    44bc:	bhi	44e0 <coda_bin_cursor_read_int64_array+0x60>
    44c0:	ldr	r3, [fp, #-16]
    44c4:	ldr	r3, [r3, #4]
    44c8:	sub	r3, r3, #1
    44cc:	ldr	r2, [fp, #-16]
    44d0:	lsl	r3, r3, #4
    44d4:	add	r3, r2, r3
    44d8:	ldr	r3, [r3, #8]
    44dc:	b	4500 <coda_bin_cursor_read_int64_array+0x80>
    44e0:	ldr	r3, [fp, #-16]
    44e4:	ldr	r3, [r3, #4]
    44e8:	sub	r3, r3, #1
    44ec:	ldr	r2, [fp, #-16]
    44f0:	lsl	r3, r3, #4
    44f4:	add	r3, r2, r3
    44f8:	ldr	r3, [r3, #8]
    44fc:	ldr	r3, [r3, #4]
    4500:	str	r3, [fp, #-8]
    4504:	ldr	r3, [fp, #-8]
    4508:	ldr	r3, [r3, #40]	; 0x28
    450c:	ldr	r3, [r3]
    4510:	cmp	r3, #1
    4514:	bne	453c <coda_bin_cursor_read_int64_array+0xbc>
    4518:	ldr	r3, [fp, #-24]	; 0xffffffe8
    451c:	str	r3, [sp]
    4520:	mov	r3, #8
    4524:	ldr	r2, [fp, #-20]	; 0xffffffec
    4528:	ldr	r1, [pc, #164]	; 45d4 <coda_bin_cursor_read_int64_array+0x154>
    452c:	ldr	r0, [fp, #-16]
    4530:	bl	7a4 <read_array>
    4534:	mov	r3, r0
    4538:	b	45c8 <coda_bin_cursor_read_int64_array+0x148>
    453c:	ldr	r3, [fp, #-8]
    4540:	ldr	r3, [r3, #40]	; 0x28
    4544:	ldr	r3, [r3]
    4548:	cmp	r3, #0
    454c:	beq	4564 <coda_bin_cursor_read_int64_array+0xe4>
    4550:	ldr	r3, [pc, #128]	; 45d8 <coda_bin_cursor_read_int64_array+0x158>
    4554:	ldr	r2, [pc, #128]	; 45dc <coda_bin_cursor_read_int64_array+0x15c>
    4558:	ldr	r1, [pc, #128]	; 45e0 <coda_bin_cursor_read_int64_array+0x160>
    455c:	ldr	r0, [pc, #128]	; 45e4 <coda_bin_cursor_read_int64_array+0x164>
    4560:	bl	0 <__assert_fail>
    4564:	mov	r3, #0
    4568:	str	r3, [sp]
    456c:	mov	r3, #8
    4570:	ldr	r2, [fp, #-20]	; 0xffffffec
    4574:	ldr	r1, [pc, #108]	; 45e8 <coda_bin_cursor_read_int64_array+0x168>
    4578:	ldr	r0, [fp, #-16]
    457c:	bl	7a4 <read_array>
    4580:	mov	r3, r0
    4584:	cmp	r3, #0
    4588:	beq	4594 <coda_bin_cursor_read_int64_array+0x114>
    458c:	mvn	r3, #0
    4590:	b	45c8 <coda_bin_cursor_read_int64_array+0x148>
    4594:	ldr	r3, [fp, #-24]	; 0xffffffe8
    4598:	cmp	r3, #0
    459c:	beq	45c4 <coda_bin_cursor_read_int64_array+0x144>
    45a0:	mov	r2, #8
    45a4:	ldr	r1, [fp, #-20]	; 0xffffffec
    45a8:	ldr	r0, [fp, #-16]
    45ac:	bl	cac <transpose_array>
    45b0:	mov	r3, r0
    45b4:	cmp	r3, #0
    45b8:	beq	45c4 <coda_bin_cursor_read_int64_array+0x144>
    45bc:	mvn	r3, #0
    45c0:	b	45c8 <coda_bin_cursor_read_int64_array+0x148>
    45c4:	mov	r3, #0
    45c8:	mov	r0, r3
    45cc:	sub	sp, fp, #4
    45d0:	pop	{fp, pc}
    45d4:	.word	0x00000000
    45d8:	.word	0x000007cc
    45dc:	.word	0x00000426
    45e0:	.word	0x00000264
    45e4:	.word	0x00000674
    45e8:	.word	0x00000000

000045ec <coda_bin_cursor_read_uint64_array>:
    45ec:	push	{fp, lr}
    45f0:	add	fp, sp, #4
    45f4:	sub	sp, sp, #32
    45f8:	str	r0, [fp, #-16]
    45fc:	str	r1, [fp, #-20]	; 0xffffffec
    4600:	str	r2, [fp, #-24]	; 0xffffffe8
    4604:	ldr	r3, [fp, #-16]
    4608:	ldr	r3, [r3, #4]
    460c:	sub	r3, r3, #1
    4610:	ldr	r2, [fp, #-16]
    4614:	lsl	r3, r3, #4
    4618:	add	r3, r2, r3
    461c:	ldr	r3, [r3, #8]
    4620:	ldr	r3, [r3]
    4624:	cmp	r3, #99	; 0x63
    4628:	bhi	464c <coda_bin_cursor_read_uint64_array+0x60>
    462c:	ldr	r3, [fp, #-16]
    4630:	ldr	r3, [r3, #4]
    4634:	sub	r3, r3, #1
    4638:	ldr	r2, [fp, #-16]
    463c:	lsl	r3, r3, #4
    4640:	add	r3, r2, r3
    4644:	ldr	r3, [r3, #8]
    4648:	b	466c <coda_bin_cursor_read_uint64_array+0x80>
    464c:	ldr	r3, [fp, #-16]
    4650:	ldr	r3, [r3, #4]
    4654:	sub	r3, r3, #1
    4658:	ldr	r2, [fp, #-16]
    465c:	lsl	r3, r3, #4
    4660:	add	r3, r2, r3
    4664:	ldr	r3, [r3, #8]
    4668:	ldr	r3, [r3, #4]
    466c:	str	r3, [fp, #-8]
    4670:	ldr	r3, [fp, #-8]
    4674:	ldr	r3, [r3, #40]	; 0x28
    4678:	ldr	r3, [r3]
    467c:	cmp	r3, #1
    4680:	bne	46a8 <coda_bin_cursor_read_uint64_array+0xbc>
    4684:	ldr	r3, [fp, #-24]	; 0xffffffe8
    4688:	str	r3, [sp]
    468c:	mov	r3, #8
    4690:	ldr	r2, [fp, #-20]	; 0xffffffec
    4694:	ldr	r1, [pc, #164]	; 4740 <coda_bin_cursor_read_uint64_array+0x154>
    4698:	ldr	r0, [fp, #-16]
    469c:	bl	7a4 <read_array>
    46a0:	mov	r3, r0
    46a4:	b	4734 <coda_bin_cursor_read_uint64_array+0x148>
    46a8:	ldr	r3, [fp, #-8]
    46ac:	ldr	r3, [r3, #40]	; 0x28
    46b0:	ldr	r3, [r3]
    46b4:	cmp	r3, #0
    46b8:	beq	46d0 <coda_bin_cursor_read_uint64_array+0xe4>
    46bc:	ldr	r3, [pc, #128]	; 4744 <coda_bin_cursor_read_uint64_array+0x158>
    46c0:	mov	r2, #1088	; 0x440
    46c4:	ldr	r1, [pc, #124]	; 4748 <coda_bin_cursor_read_uint64_array+0x15c>
    46c8:	ldr	r0, [pc, #124]	; 474c <coda_bin_cursor_read_uint64_array+0x160>
    46cc:	bl	0 <__assert_fail>
    46d0:	mov	r3, #0
    46d4:	str	r3, [sp]
    46d8:	mov	r3, #8
    46dc:	ldr	r2, [fp, #-20]	; 0xffffffec
    46e0:	ldr	r1, [pc, #104]	; 4750 <coda_bin_cursor_read_uint64_array+0x164>
    46e4:	ldr	r0, [fp, #-16]
    46e8:	bl	7a4 <read_array>
    46ec:	mov	r3, r0
    46f0:	cmp	r3, #0
    46f4:	beq	4700 <coda_bin_cursor_read_uint64_array+0x114>
    46f8:	mvn	r3, #0
    46fc:	b	4734 <coda_bin_cursor_read_uint64_array+0x148>
    4700:	ldr	r3, [fp, #-24]	; 0xffffffe8
    4704:	cmp	r3, #0
    4708:	beq	4730 <coda_bin_cursor_read_uint64_array+0x144>
    470c:	mov	r2, #8
    4710:	ldr	r1, [fp, #-20]	; 0xffffffec
    4714:	ldr	r0, [fp, #-16]
    4718:	bl	cac <transpose_array>
    471c:	mov	r3, r0
    4720:	cmp	r3, #0
    4724:	beq	4730 <coda_bin_cursor_read_uint64_array+0x144>
    4728:	mvn	r3, #0
    472c:	b	4734 <coda_bin_cursor_read_uint64_array+0x148>
    4730:	mov	r3, #0
    4734:	mov	r0, r3
    4738:	sub	sp, fp, #4
    473c:	pop	{fp, pc}
    4740:	.word	0x00000000
    4744:	.word	0x000007f0
    4748:	.word	0x00000264
    474c:	.word	0x00000674
    4750:	.word	0x00000000

00004754 <coda_bin_cursor_read_float_array>:
    4754:	push	{fp, lr}
    4758:	add	fp, sp, #4
    475c:	sub	sp, sp, #32
    4760:	str	r0, [fp, #-16]
    4764:	str	r1, [fp, #-20]	; 0xffffffec
    4768:	str	r2, [fp, #-24]	; 0xffffffe8
    476c:	ldr	r3, [fp, #-16]
    4770:	ldr	r3, [r3, #4]
    4774:	sub	r3, r3, #1
    4778:	ldr	r2, [fp, #-16]
    477c:	lsl	r3, r3, #4
    4780:	add	r3, r2, r3
    4784:	ldr	r3, [r3, #8]
    4788:	ldr	r3, [r3]
    478c:	cmp	r3, #99	; 0x63
    4790:	bhi	47b4 <coda_bin_cursor_read_float_array+0x60>
    4794:	ldr	r3, [fp, #-16]
    4798:	ldr	r3, [r3, #4]
    479c:	sub	r3, r3, #1
    47a0:	ldr	r2, [fp, #-16]
    47a4:	lsl	r3, r3, #4
    47a8:	add	r3, r2, r3
    47ac:	ldr	r3, [r3, #8]
    47b0:	b	47d4 <coda_bin_cursor_read_float_array+0x80>
    47b4:	ldr	r3, [fp, #-16]
    47b8:	ldr	r3, [r3, #4]
    47bc:	sub	r3, r3, #1
    47c0:	ldr	r2, [fp, #-16]
    47c4:	lsl	r3, r3, #4
    47c8:	add	r3, r2, r3
    47cc:	ldr	r3, [r3, #8]
    47d0:	ldr	r3, [r3, #4]
    47d4:	str	r3, [fp, #-8]
    47d8:	ldr	r3, [fp, #-8]
    47dc:	ldr	r3, [r3, #40]	; 0x28
    47e0:	ldr	r3, [r3]
    47e4:	cmp	r3, #1
    47e8:	bne	4810 <coda_bin_cursor_read_float_array+0xbc>
    47ec:	ldr	r3, [fp, #-24]	; 0xffffffe8
    47f0:	str	r3, [sp]
    47f4:	mov	r3, #4
    47f8:	ldr	r2, [fp, #-20]	; 0xffffffec
    47fc:	ldr	r1, [pc, #164]	; 48a8 <coda_bin_cursor_read_float_array+0x154>
    4800:	ldr	r0, [fp, #-16]
    4804:	bl	7a4 <read_array>
    4808:	mov	r3, r0
    480c:	b	489c <coda_bin_cursor_read_float_array+0x148>
    4810:	ldr	r3, [fp, #-8]
    4814:	ldr	r3, [r3, #40]	; 0x28
    4818:	ldr	r3, [r3]
    481c:	cmp	r3, #0
    4820:	beq	4838 <coda_bin_cursor_read_float_array+0xe4>
    4824:	ldr	r3, [pc, #128]	; 48ac <coda_bin_cursor_read_float_array+0x158>
    4828:	ldr	r2, [pc, #128]	; 48b0 <coda_bin_cursor_read_float_array+0x15c>
    482c:	ldr	r1, [pc, #128]	; 48b4 <coda_bin_cursor_read_float_array+0x160>
    4830:	ldr	r0, [pc, #128]	; 48b8 <coda_bin_cursor_read_float_array+0x164>
    4834:	bl	0 <__assert_fail>
    4838:	mov	r3, #0
    483c:	str	r3, [sp]
    4840:	mov	r3, #4
    4844:	ldr	r2, [fp, #-20]	; 0xffffffec
    4848:	ldr	r1, [pc, #108]	; 48bc <coda_bin_cursor_read_float_array+0x168>
    484c:	ldr	r0, [fp, #-16]
    4850:	bl	7a4 <read_array>
    4854:	mov	r3, r0
    4858:	cmp	r3, #0
    485c:	beq	4868 <coda_bin_cursor_read_float_array+0x114>
    4860:	mvn	r3, #0
    4864:	b	489c <coda_bin_cursor_read_float_array+0x148>
    4868:	ldr	r3, [fp, #-24]	; 0xffffffe8
    486c:	cmp	r3, #0
    4870:	beq	4898 <coda_bin_cursor_read_float_array+0x144>
    4874:	mov	r2, #4
    4878:	ldr	r1, [fp, #-20]	; 0xffffffec
    487c:	ldr	r0, [fp, #-16]
    4880:	bl	cac <transpose_array>
    4884:	mov	r3, r0
    4888:	cmp	r3, #0
    488c:	beq	4898 <coda_bin_cursor_read_float_array+0x144>
    4890:	mvn	r3, #0
    4894:	b	489c <coda_bin_cursor_read_float_array+0x148>
    4898:	mov	r3, #0
    489c:	mov	r0, r3
    48a0:	sub	sp, fp, #4
    48a4:	pop	{fp, pc}
    48a8:	.word	0x00000000
    48ac:	.word	0x00000814
    48b0:	.word	0x0000045a
    48b4:	.word	0x00000264
    48b8:	.word	0x00000674
    48bc:	.word	0x00000000

000048c0 <coda_bin_cursor_read_double_array>:
    48c0:	push	{fp, lr}
    48c4:	add	fp, sp, #4
    48c8:	sub	sp, sp, #32
    48cc:	str	r0, [fp, #-16]
    48d0:	str	r1, [fp, #-20]	; 0xffffffec
    48d4:	str	r2, [fp, #-24]	; 0xffffffe8
    48d8:	ldr	r3, [fp, #-16]
    48dc:	ldr	r3, [r3, #4]
    48e0:	sub	r3, r3, #1
    48e4:	ldr	r2, [fp, #-16]
    48e8:	lsl	r3, r3, #4
    48ec:	add	r3, r2, r3
    48f0:	ldr	r3, [r3, #8]
    48f4:	ldr	r3, [r3]
    48f8:	cmp	r3, #99	; 0x63
    48fc:	bhi	4920 <coda_bin_cursor_read_double_array+0x60>
    4900:	ldr	r3, [fp, #-16]
    4904:	ldr	r3, [r3, #4]
    4908:	sub	r3, r3, #1
    490c:	ldr	r2, [fp, #-16]
    4910:	lsl	r3, r3, #4
    4914:	add	r3, r2, r3
    4918:	ldr	r3, [r3, #8]
    491c:	b	4940 <coda_bin_cursor_read_double_array+0x80>
    4920:	ldr	r3, [fp, #-16]
    4924:	ldr	r3, [r3, #4]
    4928:	sub	r3, r3, #1
    492c:	ldr	r2, [fp, #-16]
    4930:	lsl	r3, r3, #4
    4934:	add	r3, r2, r3
    4938:	ldr	r3, [r3, #8]
    493c:	ldr	r3, [r3, #4]
    4940:	str	r3, [fp, #-8]
    4944:	ldr	r3, [fp, #-8]
    4948:	ldr	r3, [r3, #40]	; 0x28
    494c:	ldr	r3, [r3]
    4950:	cmp	r3, #1
    4954:	bne	497c <coda_bin_cursor_read_double_array+0xbc>
    4958:	ldr	r3, [fp, #-24]	; 0xffffffe8
    495c:	str	r3, [sp]
    4960:	mov	r3, #8
    4964:	ldr	r2, [fp, #-20]	; 0xffffffec
    4968:	ldr	r1, [pc, #164]	; 4a14 <coda_bin_cursor_read_double_array+0x154>
    496c:	ldr	r0, [fp, #-16]
    4970:	bl	7a4 <read_array>
    4974:	mov	r3, r0
    4978:	b	4a08 <coda_bin_cursor_read_double_array+0x148>
    497c:	ldr	r3, [fp, #-8]
    4980:	ldr	r3, [r3, #40]	; 0x28
    4984:	ldr	r3, [r3]
    4988:	cmp	r3, #0
    498c:	beq	49a4 <coda_bin_cursor_read_double_array+0xe4>
    4990:	ldr	r3, [pc, #128]	; 4a18 <coda_bin_cursor_read_double_array+0x158>
    4994:	ldr	r2, [pc, #128]	; 4a1c <coda_bin_cursor_read_double_array+0x15c>
    4998:	ldr	r1, [pc, #128]	; 4a20 <coda_bin_cursor_read_double_array+0x160>
    499c:	ldr	r0, [pc, #128]	; 4a24 <coda_bin_cursor_read_double_array+0x164>
    49a0:	bl	0 <__assert_fail>
    49a4:	mov	r3, #0
    49a8:	str	r3, [sp]
    49ac:	mov	r3, #8
    49b0:	ldr	r2, [fp, #-20]	; 0xffffffec
    49b4:	ldr	r1, [pc, #108]	; 4a28 <coda_bin_cursor_read_double_array+0x168>
    49b8:	ldr	r0, [fp, #-16]
    49bc:	bl	7a4 <read_array>
    49c0:	mov	r3, r0
    49c4:	cmp	r3, #0
    49c8:	beq	49d4 <coda_bin_cursor_read_double_array+0x114>
    49cc:	mvn	r3, #0
    49d0:	b	4a08 <coda_bin_cursor_read_double_array+0x148>
    49d4:	ldr	r3, [fp, #-24]	; 0xffffffe8
    49d8:	cmp	r3, #0
    49dc:	beq	4a04 <coda_bin_cursor_read_double_array+0x144>
    49e0:	mov	r2, #8
    49e4:	ldr	r1, [fp, #-20]	; 0xffffffec
    49e8:	ldr	r0, [fp, #-16]
    49ec:	bl	cac <transpose_array>
    49f0:	mov	r3, r0
    49f4:	cmp	r3, #0
    49f8:	beq	4a04 <coda_bin_cursor_read_double_array+0x144>
    49fc:	mvn	r3, #0
    4a00:	b	4a08 <coda_bin_cursor_read_double_array+0x148>
    4a04:	mov	r3, #0
    4a08:	mov	r0, r3
    4a0c:	sub	sp, fp, #4
    4a10:	pop	{fp, pc}
    4a14:	.word	0x00000000
    4a18:	.word	0x00000838
    4a1c:	.word	0x00000474
    4a20:	.word	0x00000264
    4a24:	.word	0x00000674
    4a28:	.word	0x00000000

00004a2c <coda_bin_cursor_read_char_array>:
    4a2c:	push	{fp, lr}
    4a30:	add	fp, sp, #4
    4a34:	sub	sp, sp, #32
    4a38:	str	r0, [fp, #-16]
    4a3c:	str	r1, [fp, #-20]	; 0xffffffec
    4a40:	str	r2, [fp, #-24]	; 0xffffffe8
    4a44:	ldr	r3, [fp, #-16]
    4a48:	ldr	r3, [r3, #4]
    4a4c:	sub	r3, r3, #1
    4a50:	ldr	r2, [fp, #-16]
    4a54:	lsl	r3, r3, #4
    4a58:	add	r3, r2, r3
    4a5c:	ldr	r3, [r3, #8]
    4a60:	ldr	r3, [r3]
    4a64:	cmp	r3, #99	; 0x63
    4a68:	bhi	4a8c <coda_bin_cursor_read_char_array+0x60>
    4a6c:	ldr	r3, [fp, #-16]
    4a70:	ldr	r3, [r3, #4]
    4a74:	sub	r3, r3, #1
    4a78:	ldr	r2, [fp, #-16]
    4a7c:	lsl	r3, r3, #4
    4a80:	add	r3, r2, r3
    4a84:	ldr	r3, [r3, #8]
    4a88:	b	4aac <coda_bin_cursor_read_char_array+0x80>
    4a8c:	ldr	r3, [fp, #-16]
    4a90:	ldr	r3, [r3, #4]
    4a94:	sub	r3, r3, #1
    4a98:	ldr	r2, [fp, #-16]
    4a9c:	lsl	r3, r3, #4
    4aa0:	add	r3, r2, r3
    4aa4:	ldr	r3, [r3, #8]
    4aa8:	ldr	r3, [r3, #4]
    4aac:	str	r3, [fp, #-8]
    4ab0:	ldr	r3, [fp, #-8]
    4ab4:	ldr	r3, [r3, #40]	; 0x28
    4ab8:	ldr	r3, [r3]
    4abc:	cmp	r3, #1
    4ac0:	bne	4ae8 <coda_bin_cursor_read_char_array+0xbc>
    4ac4:	ldr	r3, [fp, #-24]	; 0xffffffe8
    4ac8:	str	r3, [sp]
    4acc:	mov	r3, #1
    4ad0:	ldr	r2, [fp, #-20]	; 0xffffffec
    4ad4:	ldr	r1, [pc, #164]	; 4b80 <coda_bin_cursor_read_char_array+0x154>
    4ad8:	ldr	r0, [fp, #-16]
    4adc:	bl	7a4 <read_array>
    4ae0:	mov	r3, r0
    4ae4:	b	4b74 <coda_bin_cursor_read_char_array+0x148>
    4ae8:	ldr	r3, [fp, #-8]
    4aec:	ldr	r3, [r3, #40]	; 0x28
    4af0:	ldr	r3, [r3]
    4af4:	cmp	r3, #0
    4af8:	beq	4b10 <coda_bin_cursor_read_char_array+0xe4>
    4afc:	ldr	r3, [pc, #128]	; 4b84 <coda_bin_cursor_read_char_array+0x158>
    4b00:	ldr	r2, [pc, #128]	; 4b88 <coda_bin_cursor_read_char_array+0x15c>
    4b04:	ldr	r1, [pc, #128]	; 4b8c <coda_bin_cursor_read_char_array+0x160>
    4b08:	ldr	r0, [pc, #128]	; 4b90 <coda_bin_cursor_read_char_array+0x164>
    4b0c:	bl	0 <__assert_fail>
    4b10:	mov	r3, #0
    4b14:	str	r3, [sp]
    4b18:	mov	r3, #1
    4b1c:	ldr	r2, [fp, #-20]	; 0xffffffec
    4b20:	ldr	r1, [pc, #108]	; 4b94 <coda_bin_cursor_read_char_array+0x168>
    4b24:	ldr	r0, [fp, #-16]
    4b28:	bl	7a4 <read_array>
    4b2c:	mov	r3, r0
    4b30:	cmp	r3, #0
    4b34:	beq	4b40 <coda_bin_cursor_read_char_array+0x114>
    4b38:	mvn	r3, #0
    4b3c:	b	4b74 <coda_bin_cursor_read_char_array+0x148>
    4b40:	ldr	r3, [fp, #-24]	; 0xffffffe8
    4b44:	cmp	r3, #0
    4b48:	beq	4b70 <coda_bin_cursor_read_char_array+0x144>
    4b4c:	mov	r2, #1
    4b50:	ldr	r1, [fp, #-20]	; 0xffffffec
    4b54:	ldr	r0, [fp, #-16]
    4b58:	bl	cac <transpose_array>
    4b5c:	mov	r3, r0
    4b60:	cmp	r3, #0
    4b64:	beq	4b70 <coda_bin_cursor_read_char_array+0x144>
    4b68:	mvn	r3, #0
    4b6c:	b	4b74 <coda_bin_cursor_read_char_array+0x148>
    4b70:	mov	r3, #0
    4b74:	mov	r0, r3
    4b78:	sub	sp, fp, #4
    4b7c:	pop	{fp, pc}
    4b80:	.word	0x00000000
    4b84:	.word	0x0000085c
    4b88:	.word	0x0000048e
    4b8c:	.word	0x00000264
    4b90:	.word	0x00000674
    4b94:	.word	0x00000000

00004b98 <coda_bin_cursor_read_int8_partial_array>:
    4b98:	push	{fp, lr}
    4b9c:	add	fp, sp, #4
    4ba0:	sub	sp, sp, #32
    4ba4:	str	r0, [fp, #-16]
    4ba8:	str	r1, [fp, #-20]	; 0xffffffec
    4bac:	str	r2, [fp, #-24]	; 0xffffffe8
    4bb0:	str	r3, [fp, #-28]	; 0xffffffe4
    4bb4:	ldr	r3, [fp, #-16]
    4bb8:	ldr	r3, [r3, #4]
    4bbc:	sub	r3, r3, #1
    4bc0:	ldr	r2, [fp, #-16]
    4bc4:	lsl	r3, r3, #4
    4bc8:	add	r3, r2, r3
    4bcc:	ldr	r3, [r3, #8]
    4bd0:	ldr	r3, [r3]
    4bd4:	cmp	r3, #99	; 0x63
    4bd8:	bhi	4bfc <coda_bin_cursor_read_int8_partial_array+0x64>
    4bdc:	ldr	r3, [fp, #-16]
    4be0:	ldr	r3, [r3, #4]
    4be4:	sub	r3, r3, #1
    4be8:	ldr	r2, [fp, #-16]
    4bec:	lsl	r3, r3, #4
    4bf0:	add	r3, r2, r3
    4bf4:	ldr	r3, [r3, #8]
    4bf8:	b	4c1c <coda_bin_cursor_read_int8_partial_array+0x84>
    4bfc:	ldr	r3, [fp, #-16]
    4c00:	ldr	r3, [r3, #4]
    4c04:	sub	r3, r3, #1
    4c08:	ldr	r2, [fp, #-16]
    4c0c:	lsl	r3, r3, #4
    4c10:	add	r3, r2, r3
    4c14:	ldr	r3, [r3, #8]
    4c18:	ldr	r3, [r3, #4]
    4c1c:	str	r3, [fp, #-8]
    4c20:	ldr	r3, [fp, #-8]
    4c24:	ldr	r3, [r3, #40]	; 0x28
    4c28:	ldr	r3, [r3]
    4c2c:	cmp	r3, #1
    4c30:	bne	4c60 <coda_bin_cursor_read_int8_partial_array+0xc8>
    4c34:	mov	r3, #1
    4c38:	str	r3, [sp, #4]
    4c3c:	ldr	r3, [fp, #-28]	; 0xffffffe4
    4c40:	str	r3, [sp]
    4c44:	ldr	r3, [fp, #-24]	; 0xffffffe8
    4c48:	ldr	r2, [fp, #-20]	; 0xffffffec
    4c4c:	ldr	r1, [pc, #104]	; 4cbc <coda_bin_cursor_read_int8_partial_array+0x124>
    4c50:	ldr	r0, [fp, #-16]
    4c54:	bl	ba0 <read_partial_array>
    4c58:	mov	r3, r0
    4c5c:	b	4cb0 <coda_bin_cursor_read_int8_partial_array+0x118>
    4c60:	ldr	r3, [fp, #-8]
    4c64:	ldr	r3, [r3, #40]	; 0x28
    4c68:	ldr	r3, [r3]
    4c6c:	cmp	r3, #0
    4c70:	beq	4c88 <coda_bin_cursor_read_int8_partial_array+0xf0>
    4c74:	ldr	r3, [pc, #68]	; 4cc0 <coda_bin_cursor_read_int8_partial_array+0x128>
    4c78:	ldr	r2, [pc, #68]	; 4cc4 <coda_bin_cursor_read_int8_partial_array+0x12c>
    4c7c:	ldr	r1, [pc, #68]	; 4cc8 <coda_bin_cursor_read_int8_partial_array+0x130>
    4c80:	ldr	r0, [pc, #68]	; 4ccc <coda_bin_cursor_read_int8_partial_array+0x134>
    4c84:	bl	0 <__assert_fail>
    4c88:	mov	r3, #1
    4c8c:	str	r3, [sp, #4]
    4c90:	ldr	r3, [fp, #-28]	; 0xffffffe4
    4c94:	str	r3, [sp]
    4c98:	ldr	r3, [fp, #-24]	; 0xffffffe8
    4c9c:	ldr	r2, [fp, #-20]	; 0xffffffec
    4ca0:	ldr	r1, [pc, #40]	; 4cd0 <coda_bin_cursor_read_int8_partial_array+0x138>
    4ca4:	ldr	r0, [fp, #-16]
    4ca8:	bl	ba0 <read_partial_array>
    4cac:	mov	r3, r0
    4cb0:	mov	r0, r3
    4cb4:	sub	sp, fp, #4
    4cb8:	pop	{fp, pc}
    4cbc:	.word	0x00000000
    4cc0:	.word	0x0000087c
    4cc4:	.word	0x000004a8
    4cc8:	.word	0x00000264
    4ccc:	.word	0x00000674
    4cd0:	.word	0x00000000

00004cd4 <coda_bin_cursor_read_uint8_partial_array>:
    4cd4:	push	{fp, lr}
    4cd8:	add	fp, sp, #4
    4cdc:	sub	sp, sp, #32
    4ce0:	str	r0, [fp, #-16]
    4ce4:	str	r1, [fp, #-20]	; 0xffffffec
    4ce8:	str	r2, [fp, #-24]	; 0xffffffe8
    4cec:	str	r3, [fp, #-28]	; 0xffffffe4
    4cf0:	ldr	r3, [fp, #-16]
    4cf4:	ldr	r3, [r3, #4]
    4cf8:	sub	r3, r3, #1
    4cfc:	ldr	r2, [fp, #-16]
    4d00:	lsl	r3, r3, #4
    4d04:	add	r3, r2, r3
    4d08:	ldr	r3, [r3, #8]
    4d0c:	ldr	r3, [r3]
    4d10:	cmp	r3, #99	; 0x63
    4d14:	bhi	4d38 <coda_bin_cursor_read_uint8_partial_array+0x64>
    4d18:	ldr	r3, [fp, #-16]
    4d1c:	ldr	r3, [r3, #4]
    4d20:	sub	r3, r3, #1
    4d24:	ldr	r2, [fp, #-16]
    4d28:	lsl	r3, r3, #4
    4d2c:	add	r3, r2, r3
    4d30:	ldr	r3, [r3, #8]
    4d34:	b	4d58 <coda_bin_cursor_read_uint8_partial_array+0x84>
    4d38:	ldr	r3, [fp, #-16]
    4d3c:	ldr	r3, [r3, #4]
    4d40:	sub	r3, r3, #1
    4d44:	ldr	r2, [fp, #-16]
    4d48:	lsl	r3, r3, #4
    4d4c:	add	r3, r2, r3
    4d50:	ldr	r3, [r3, #8]
    4d54:	ldr	r3, [r3, #4]
    4d58:	str	r3, [fp, #-8]
    4d5c:	ldr	r3, [fp, #-8]
    4d60:	ldr	r3, [r3, #40]	; 0x28
    4d64:	ldr	r3, [r3]
    4d68:	cmp	r3, #1
    4d6c:	bne	4d9c <coda_bin_cursor_read_uint8_partial_array+0xc8>
    4d70:	mov	r3, #1
    4d74:	str	r3, [sp, #4]
    4d78:	ldr	r3, [fp, #-28]	; 0xffffffe4
    4d7c:	str	r3, [sp]
    4d80:	ldr	r3, [fp, #-24]	; 0xffffffe8
    4d84:	ldr	r2, [fp, #-20]	; 0xffffffec
    4d88:	ldr	r1, [pc, #104]	; 4df8 <coda_bin_cursor_read_uint8_partial_array+0x124>
    4d8c:	ldr	r0, [fp, #-16]
    4d90:	bl	ba0 <read_partial_array>
    4d94:	mov	r3, r0
    4d98:	b	4dec <coda_bin_cursor_read_uint8_partial_array+0x118>
    4d9c:	ldr	r3, [fp, #-8]
    4da0:	ldr	r3, [r3, #40]	; 0x28
    4da4:	ldr	r3, [r3]
    4da8:	cmp	r3, #0
    4dac:	beq	4dc4 <coda_bin_cursor_read_uint8_partial_array+0xf0>
    4db0:	ldr	r3, [pc, #68]	; 4dfc <coda_bin_cursor_read_uint8_partial_array+0x128>
    4db4:	ldr	r2, [pc, #68]	; 4e00 <coda_bin_cursor_read_uint8_partial_array+0x12c>
    4db8:	ldr	r1, [pc, #68]	; 4e04 <coda_bin_cursor_read_uint8_partial_array+0x130>
    4dbc:	ldr	r0, [pc, #68]	; 4e08 <coda_bin_cursor_read_uint8_partial_array+0x134>
    4dc0:	bl	0 <__assert_fail>
    4dc4:	mov	r3, #1
    4dc8:	str	r3, [sp, #4]
    4dcc:	ldr	r3, [fp, #-28]	; 0xffffffe4
    4dd0:	str	r3, [sp]
    4dd4:	ldr	r3, [fp, #-24]	; 0xffffffe8
    4dd8:	ldr	r2, [fp, #-20]	; 0xffffffec
    4ddc:	ldr	r1, [pc, #40]	; 4e0c <coda_bin_cursor_read_uint8_partial_array+0x138>
    4de0:	ldr	r0, [fp, #-16]
    4de4:	bl	ba0 <read_partial_array>
    4de8:	mov	r3, r0
    4dec:	mov	r0, r3
    4df0:	sub	sp, fp, #4
    4df4:	pop	{fp, pc}
    4df8:	.word	0x00000000
    4dfc:	.word	0x000008a4
    4e00:	.word	0x000004b6
    4e04:	.word	0x00000264
    4e08:	.word	0x00000674
    4e0c:	.word	0x00000000

00004e10 <coda_bin_cursor_read_int16_partial_array>:
    4e10:	push	{fp, lr}
    4e14:	add	fp, sp, #4
    4e18:	sub	sp, sp, #32
    4e1c:	str	r0, [fp, #-16]
    4e20:	str	r1, [fp, #-20]	; 0xffffffec
    4e24:	str	r2, [fp, #-24]	; 0xffffffe8
    4e28:	str	r3, [fp, #-28]	; 0xffffffe4
    4e2c:	ldr	r3, [fp, #-16]
    4e30:	ldr	r3, [r3, #4]
    4e34:	sub	r3, r3, #1
    4e38:	ldr	r2, [fp, #-16]
    4e3c:	lsl	r3, r3, #4
    4e40:	add	r3, r2, r3
    4e44:	ldr	r3, [r3, #8]
    4e48:	ldr	r3, [r3]
    4e4c:	cmp	r3, #99	; 0x63
    4e50:	bhi	4e74 <coda_bin_cursor_read_int16_partial_array+0x64>
    4e54:	ldr	r3, [fp, #-16]
    4e58:	ldr	r3, [r3, #4]
    4e5c:	sub	r3, r3, #1
    4e60:	ldr	r2, [fp, #-16]
    4e64:	lsl	r3, r3, #4
    4e68:	add	r3, r2, r3
    4e6c:	ldr	r3, [r3, #8]
    4e70:	b	4e94 <coda_bin_cursor_read_int16_partial_array+0x84>
    4e74:	ldr	r3, [fp, #-16]
    4e78:	ldr	r3, [r3, #4]
    4e7c:	sub	r3, r3, #1
    4e80:	ldr	r2, [fp, #-16]
    4e84:	lsl	r3, r3, #4
    4e88:	add	r3, r2, r3
    4e8c:	ldr	r3, [r3, #8]
    4e90:	ldr	r3, [r3, #4]
    4e94:	str	r3, [fp, #-8]
    4e98:	ldr	r3, [fp, #-8]
    4e9c:	ldr	r3, [r3, #40]	; 0x28
    4ea0:	ldr	r3, [r3]
    4ea4:	cmp	r3, #1
    4ea8:	bne	4ed8 <coda_bin_cursor_read_int16_partial_array+0xc8>
    4eac:	mov	r3, #2
    4eb0:	str	r3, [sp, #4]
    4eb4:	ldr	r3, [fp, #-28]	; 0xffffffe4
    4eb8:	str	r3, [sp]
    4ebc:	ldr	r3, [fp, #-24]	; 0xffffffe8
    4ec0:	ldr	r2, [fp, #-20]	; 0xffffffec
    4ec4:	ldr	r1, [pc, #104]	; 4f34 <coda_bin_cursor_read_int16_partial_array+0x124>
    4ec8:	ldr	r0, [fp, #-16]
    4ecc:	bl	ba0 <read_partial_array>
    4ed0:	mov	r3, r0
    4ed4:	b	4f28 <coda_bin_cursor_read_int16_partial_array+0x118>
    4ed8:	ldr	r3, [fp, #-8]
    4edc:	ldr	r3, [r3, #40]	; 0x28
    4ee0:	ldr	r3, [r3]
    4ee4:	cmp	r3, #0
    4ee8:	beq	4f00 <coda_bin_cursor_read_int16_partial_array+0xf0>
    4eec:	ldr	r3, [pc, #68]	; 4f38 <coda_bin_cursor_read_int16_partial_array+0x128>
    4ef0:	ldr	r2, [pc, #68]	; 4f3c <coda_bin_cursor_read_int16_partial_array+0x12c>
    4ef4:	ldr	r1, [pc, #68]	; 4f40 <coda_bin_cursor_read_int16_partial_array+0x130>
    4ef8:	ldr	r0, [pc, #68]	; 4f44 <coda_bin_cursor_read_int16_partial_array+0x134>
    4efc:	bl	0 <__assert_fail>
    4f00:	mov	r3, #2
    4f04:	str	r3, [sp, #4]
    4f08:	ldr	r3, [fp, #-28]	; 0xffffffe4
    4f0c:	str	r3, [sp]
    4f10:	ldr	r3, [fp, #-24]	; 0xffffffe8
    4f14:	ldr	r2, [fp, #-20]	; 0xffffffec
    4f18:	ldr	r1, [pc, #40]	; 4f48 <coda_bin_cursor_read_int16_partial_array+0x138>
    4f1c:	ldr	r0, [fp, #-16]
    4f20:	bl	ba0 <read_partial_array>
    4f24:	mov	r3, r0
    4f28:	mov	r0, r3
    4f2c:	sub	sp, fp, #4
    4f30:	pop	{fp, pc}
    4f34:	.word	0x00000000
    4f38:	.word	0x000008d0
    4f3c:	.word	0x000004c4
    4f40:	.word	0x00000264
    4f44:	.word	0x00000674
    4f48:	.word	0x00000000

00004f4c <coda_bin_cursor_read_uint16_partial_array>:
    4f4c:	push	{fp, lr}
    4f50:	add	fp, sp, #4
    4f54:	sub	sp, sp, #32
    4f58:	str	r0, [fp, #-16]
    4f5c:	str	r1, [fp, #-20]	; 0xffffffec
    4f60:	str	r2, [fp, #-24]	; 0xffffffe8
    4f64:	str	r3, [fp, #-28]	; 0xffffffe4
    4f68:	ldr	r3, [fp, #-16]
    4f6c:	ldr	r3, [r3, #4]
    4f70:	sub	r3, r3, #1
    4f74:	ldr	r2, [fp, #-16]
    4f78:	lsl	r3, r3, #4
    4f7c:	add	r3, r2, r3
    4f80:	ldr	r3, [r3, #8]
    4f84:	ldr	r3, [r3]
    4f88:	cmp	r3, #99	; 0x63
    4f8c:	bhi	4fb0 <coda_bin_cursor_read_uint16_partial_array+0x64>
    4f90:	ldr	r3, [fp, #-16]
    4f94:	ldr	r3, [r3, #4]
    4f98:	sub	r3, r3, #1
    4f9c:	ldr	r2, [fp, #-16]
    4fa0:	lsl	r3, r3, #4
    4fa4:	add	r3, r2, r3
    4fa8:	ldr	r3, [r3, #8]
    4fac:	b	4fd0 <coda_bin_cursor_read_uint16_partial_array+0x84>
    4fb0:	ldr	r3, [fp, #-16]
    4fb4:	ldr	r3, [r3, #4]
    4fb8:	sub	r3, r3, #1
    4fbc:	ldr	r2, [fp, #-16]
    4fc0:	lsl	r3, r3, #4
    4fc4:	add	r3, r2, r3
    4fc8:	ldr	r3, [r3, #8]
    4fcc:	ldr	r3, [r3, #4]
    4fd0:	str	r3, [fp, #-8]
    4fd4:	ldr	r3, [fp, #-8]
    4fd8:	ldr	r3, [r3, #40]	; 0x28
    4fdc:	ldr	r3, [r3]
    4fe0:	cmp	r3, #1
    4fe4:	bne	5014 <coda_bin_cursor_read_uint16_partial_array+0xc8>
    4fe8:	mov	r3, #2
    4fec:	str	r3, [sp, #4]
    4ff0:	ldr	r3, [fp, #-28]	; 0xffffffe4
    4ff4:	str	r3, [sp]
    4ff8:	ldr	r3, [fp, #-24]	; 0xffffffe8
    4ffc:	ldr	r2, [fp, #-20]	; 0xffffffec
    5000:	ldr	r1, [pc, #104]	; 5070 <coda_bin_cursor_read_uint16_partial_array+0x124>
    5004:	ldr	r0, [fp, #-16]
    5008:	bl	ba0 <read_partial_array>
    500c:	mov	r3, r0
    5010:	b	5064 <coda_bin_cursor_read_uint16_partial_array+0x118>
    5014:	ldr	r3, [fp, #-8]
    5018:	ldr	r3, [r3, #40]	; 0x28
    501c:	ldr	r3, [r3]
    5020:	cmp	r3, #0
    5024:	beq	503c <coda_bin_cursor_read_uint16_partial_array+0xf0>
    5028:	ldr	r3, [pc, #68]	; 5074 <coda_bin_cursor_read_uint16_partial_array+0x128>
    502c:	ldr	r2, [pc, #68]	; 5078 <coda_bin_cursor_read_uint16_partial_array+0x12c>
    5030:	ldr	r1, [pc, #68]	; 507c <coda_bin_cursor_read_uint16_partial_array+0x130>
    5034:	ldr	r0, [pc, #68]	; 5080 <coda_bin_cursor_read_uint16_partial_array+0x134>
    5038:	bl	0 <__assert_fail>
    503c:	mov	r3, #2
    5040:	str	r3, [sp, #4]
    5044:	ldr	r3, [fp, #-28]	; 0xffffffe4
    5048:	str	r3, [sp]
    504c:	ldr	r3, [fp, #-24]	; 0xffffffe8
    5050:	ldr	r2, [fp, #-20]	; 0xffffffec
    5054:	ldr	r1, [pc, #40]	; 5084 <coda_bin_cursor_read_uint16_partial_array+0x138>
    5058:	ldr	r0, [fp, #-16]
    505c:	bl	ba0 <read_partial_array>
    5060:	mov	r3, r0
    5064:	mov	r0, r3
    5068:	sub	sp, fp, #4
    506c:	pop	{fp, pc}
    5070:	.word	0x00000000
    5074:	.word	0x000008fc
    5078:	.word	0x000004d2
    507c:	.word	0x00000264
    5080:	.word	0x00000674
    5084:	.word	0x00000000

00005088 <coda_bin_cursor_read_int32_partial_array>:
    5088:	push	{fp, lr}
    508c:	add	fp, sp, #4
    5090:	sub	sp, sp, #32
    5094:	str	r0, [fp, #-16]
    5098:	str	r1, [fp, #-20]	; 0xffffffec
    509c:	str	r2, [fp, #-24]	; 0xffffffe8
    50a0:	str	r3, [fp, #-28]	; 0xffffffe4
    50a4:	ldr	r3, [fp, #-16]
    50a8:	ldr	r3, [r3, #4]
    50ac:	sub	r3, r3, #1
    50b0:	ldr	r2, [fp, #-16]
    50b4:	lsl	r3, r3, #4
    50b8:	add	r3, r2, r3
    50bc:	ldr	r3, [r3, #8]
    50c0:	ldr	r3, [r3]
    50c4:	cmp	r3, #99	; 0x63
    50c8:	bhi	50ec <coda_bin_cursor_read_int32_partial_array+0x64>
    50cc:	ldr	r3, [fp, #-16]
    50d0:	ldr	r3, [r3, #4]
    50d4:	sub	r3, r3, #1
    50d8:	ldr	r2, [fp, #-16]
    50dc:	lsl	r3, r3, #4
    50e0:	add	r3, r2, r3
    50e4:	ldr	r3, [r3, #8]
    50e8:	b	510c <coda_bin_cursor_read_int32_partial_array+0x84>
    50ec:	ldr	r3, [fp, #-16]
    50f0:	ldr	r3, [r3, #4]
    50f4:	sub	r3, r3, #1
    50f8:	ldr	r2, [fp, #-16]
    50fc:	lsl	r3, r3, #4
    5100:	add	r3, r2, r3
    5104:	ldr	r3, [r3, #8]
    5108:	ldr	r3, [r3, #4]
    510c:	str	r3, [fp, #-8]
    5110:	ldr	r3, [fp, #-8]
    5114:	ldr	r3, [r3, #40]	; 0x28
    5118:	ldr	r3, [r3]
    511c:	cmp	r3, #1
    5120:	bne	5150 <coda_bin_cursor_read_int32_partial_array+0xc8>
    5124:	mov	r3, #4
    5128:	str	r3, [sp, #4]
    512c:	ldr	r3, [fp, #-28]	; 0xffffffe4
    5130:	str	r3, [sp]
    5134:	ldr	r3, [fp, #-24]	; 0xffffffe8
    5138:	ldr	r2, [fp, #-20]	; 0xffffffec
    513c:	ldr	r1, [pc, #104]	; 51ac <coda_bin_cursor_read_int32_partial_array+0x124>
    5140:	ldr	r0, [fp, #-16]
    5144:	bl	ba0 <read_partial_array>
    5148:	mov	r3, r0
    514c:	b	51a0 <coda_bin_cursor_read_int32_partial_array+0x118>
    5150:	ldr	r3, [fp, #-8]
    5154:	ldr	r3, [r3, #40]	; 0x28
    5158:	ldr	r3, [r3]
    515c:	cmp	r3, #0
    5160:	beq	5178 <coda_bin_cursor_read_int32_partial_array+0xf0>
    5164:	ldr	r3, [pc, #68]	; 51b0 <coda_bin_cursor_read_int32_partial_array+0x128>
    5168:	mov	r2, #1248	; 0x4e0
    516c:	ldr	r1, [pc, #64]	; 51b4 <coda_bin_cursor_read_int32_partial_array+0x12c>
    5170:	ldr	r0, [pc, #64]	; 51b8 <coda_bin_cursor_read_int32_partial_array+0x130>
    5174:	bl	0 <__assert_fail>
    5178:	mov	r3, #4
    517c:	str	r3, [sp, #4]
    5180:	ldr	r3, [fp, #-28]	; 0xffffffe4
    5184:	str	r3, [sp]
    5188:	ldr	r3, [fp, #-24]	; 0xffffffe8
    518c:	ldr	r2, [fp, #-20]	; 0xffffffec
    5190:	ldr	r1, [pc, #36]	; 51bc <coda_bin_cursor_read_int32_partial_array+0x134>
    5194:	ldr	r0, [fp, #-16]
    5198:	bl	ba0 <read_partial_array>
    519c:	mov	r3, r0
    51a0:	mov	r0, r3
    51a4:	sub	sp, fp, #4
    51a8:	pop	{fp, pc}
    51ac:	.word	0x00000000
    51b0:	.word	0x00000928
    51b4:	.word	0x00000264
    51b8:	.word	0x00000674
    51bc:	.word	0x00000000

000051c0 <coda_bin_cursor_read_uint32_partial_array>:
    51c0:	push	{fp, lr}
    51c4:	add	fp, sp, #4
    51c8:	sub	sp, sp, #32
    51cc:	str	r0, [fp, #-16]
    51d0:	str	r1, [fp, #-20]	; 0xffffffec
    51d4:	str	r2, [fp, #-24]	; 0xffffffe8
    51d8:	str	r3, [fp, #-28]	; 0xffffffe4
    51dc:	ldr	r3, [fp, #-16]
    51e0:	ldr	r3, [r3, #4]
    51e4:	sub	r3, r3, #1
    51e8:	ldr	r2, [fp, #-16]
    51ec:	lsl	r3, r3, #4
    51f0:	add	r3, r2, r3
    51f4:	ldr	r3, [r3, #8]
    51f8:	ldr	r3, [r3]
    51fc:	cmp	r3, #99	; 0x63
    5200:	bhi	5224 <coda_bin_cursor_read_uint32_partial_array+0x64>
    5204:	ldr	r3, [fp, #-16]
    5208:	ldr	r3, [r3, #4]
    520c:	sub	r3, r3, #1
    5210:	ldr	r2, [fp, #-16]
    5214:	lsl	r3, r3, #4
    5218:	add	r3, r2, r3
    521c:	ldr	r3, [r3, #8]
    5220:	b	5244 <coda_bin_cursor_read_uint32_partial_array+0x84>
    5224:	ldr	r3, [fp, #-16]
    5228:	ldr	r3, [r3, #4]
    522c:	sub	r3, r3, #1
    5230:	ldr	r2, [fp, #-16]
    5234:	lsl	r3, r3, #4
    5238:	add	r3, r2, r3
    523c:	ldr	r3, [r3, #8]
    5240:	ldr	r3, [r3, #4]
    5244:	str	r3, [fp, #-8]
    5248:	ldr	r3, [fp, #-8]
    524c:	ldr	r3, [r3, #40]	; 0x28
    5250:	ldr	r3, [r3]
    5254:	cmp	r3, #1
    5258:	bne	5288 <coda_bin_cursor_read_uint32_partial_array+0xc8>
    525c:	mov	r3, #4
    5260:	str	r3, [sp, #4]
    5264:	ldr	r3, [fp, #-28]	; 0xffffffe4
    5268:	str	r3, [sp]
    526c:	ldr	r3, [fp, #-24]	; 0xffffffe8
    5270:	ldr	r2, [fp, #-20]	; 0xffffffec
    5274:	ldr	r1, [pc, #104]	; 52e4 <coda_bin_cursor_read_uint32_partial_array+0x124>
    5278:	ldr	r0, [fp, #-16]
    527c:	bl	ba0 <read_partial_array>
    5280:	mov	r3, r0
    5284:	b	52d8 <coda_bin_cursor_read_uint32_partial_array+0x118>
    5288:	ldr	r3, [fp, #-8]
    528c:	ldr	r3, [r3, #40]	; 0x28
    5290:	ldr	r3, [r3]
    5294:	cmp	r3, #0
    5298:	beq	52b0 <coda_bin_cursor_read_uint32_partial_array+0xf0>
    529c:	ldr	r3, [pc, #68]	; 52e8 <coda_bin_cursor_read_uint32_partial_array+0x128>
    52a0:	ldr	r2, [pc, #68]	; 52ec <coda_bin_cursor_read_uint32_partial_array+0x12c>
    52a4:	ldr	r1, [pc, #68]	; 52f0 <coda_bin_cursor_read_uint32_partial_array+0x130>
    52a8:	ldr	r0, [pc, #68]	; 52f4 <coda_bin_cursor_read_uint32_partial_array+0x134>
    52ac:	bl	0 <__assert_fail>
    52b0:	mov	r3, #4
    52b4:	str	r3, [sp, #4]
    52b8:	ldr	r3, [fp, #-28]	; 0xffffffe4
    52bc:	str	r3, [sp]
    52c0:	ldr	r3, [fp, #-24]	; 0xffffffe8
    52c4:	ldr	r2, [fp, #-20]	; 0xffffffec
    52c8:	ldr	r1, [pc, #40]	; 52f8 <coda_bin_cursor_read_uint32_partial_array+0x138>
    52cc:	ldr	r0, [fp, #-16]
    52d0:	bl	ba0 <read_partial_array>
    52d4:	mov	r3, r0
    52d8:	mov	r0, r3
    52dc:	sub	sp, fp, #4
    52e0:	pop	{fp, pc}
    52e4:	.word	0x00000000
    52e8:	.word	0x00000954
    52ec:	.word	0x000004ee
    52f0:	.word	0x00000264
    52f4:	.word	0x00000674
    52f8:	.word	0x00000000

000052fc <coda_bin_cursor_read_int64_partial_array>:
    52fc:	push	{fp, lr}
    5300:	add	fp, sp, #4
    5304:	sub	sp, sp, #32
    5308:	str	r0, [fp, #-16]
    530c:	str	r1, [fp, #-20]	; 0xffffffec
    5310:	str	r2, [fp, #-24]	; 0xffffffe8
    5314:	str	r3, [fp, #-28]	; 0xffffffe4
    5318:	ldr	r3, [fp, #-16]
    531c:	ldr	r3, [r3, #4]
    5320:	sub	r3, r3, #1
    5324:	ldr	r2, [fp, #-16]
    5328:	lsl	r3, r3, #4
    532c:	add	r3, r2, r3
    5330:	ldr	r3, [r3, #8]
    5334:	ldr	r3, [r3]
    5338:	cmp	r3, #99	; 0x63
    533c:	bhi	5360 <coda_bin_cursor_read_int64_partial_array+0x64>
    5340:	ldr	r3, [fp, #-16]
    5344:	ldr	r3, [r3, #4]
    5348:	sub	r3, r3, #1
    534c:	ldr	r2, [fp, #-16]
    5350:	lsl	r3, r3, #4
    5354:	add	r3, r2, r3
    5358:	ldr	r3, [r3, #8]
    535c:	b	5380 <coda_bin_cursor_read_int64_partial_array+0x84>
    5360:	ldr	r3, [fp, #-16]
    5364:	ldr	r3, [r3, #4]
    5368:	sub	r3, r3, #1
    536c:	ldr	r2, [fp, #-16]
    5370:	lsl	r3, r3, #4
    5374:	add	r3, r2, r3
    5378:	ldr	r3, [r3, #8]
    537c:	ldr	r3, [r3, #4]
    5380:	str	r3, [fp, #-8]
    5384:	ldr	r3, [fp, #-8]
    5388:	ldr	r3, [r3, #40]	; 0x28
    538c:	ldr	r3, [r3]
    5390:	cmp	r3, #1
    5394:	bne	53c4 <coda_bin_cursor_read_int64_partial_array+0xc8>
    5398:	mov	r3, #8
    539c:	str	r3, [sp, #4]
    53a0:	ldr	r3, [fp, #-28]	; 0xffffffe4
    53a4:	str	r3, [sp]
    53a8:	ldr	r3, [fp, #-24]	; 0xffffffe8
    53ac:	ldr	r2, [fp, #-20]	; 0xffffffec
    53b0:	ldr	r1, [pc, #104]	; 5420 <coda_bin_cursor_read_int64_partial_array+0x124>
    53b4:	ldr	r0, [fp, #-16]
    53b8:	bl	ba0 <read_partial_array>
    53bc:	mov	r3, r0
    53c0:	b	5414 <coda_bin_cursor_read_int64_partial_array+0x118>
    53c4:	ldr	r3, [fp, #-8]
    53c8:	ldr	r3, [r3, #40]	; 0x28
    53cc:	ldr	r3, [r3]
    53d0:	cmp	r3, #0
    53d4:	beq	53ec <coda_bin_cursor_read_int64_partial_array+0xf0>
    53d8:	ldr	r3, [pc, #68]	; 5424 <coda_bin_cursor_read_int64_partial_array+0x128>
    53dc:	ldr	r2, [pc, #68]	; 5428 <coda_bin_cursor_read_int64_partial_array+0x12c>
    53e0:	ldr	r1, [pc, #68]	; 542c <coda_bin_cursor_read_int64_partial_array+0x130>
    53e4:	ldr	r0, [pc, #68]	; 5430 <coda_bin_cursor_read_int64_partial_array+0x134>
    53e8:	bl	0 <__assert_fail>
    53ec:	mov	r3, #8
    53f0:	str	r3, [sp, #4]
    53f4:	ldr	r3, [fp, #-28]	; 0xffffffe4
    53f8:	str	r3, [sp]
    53fc:	ldr	r3, [fp, #-24]	; 0xffffffe8
    5400:	ldr	r2, [fp, #-20]	; 0xffffffec
    5404:	ldr	r1, [pc, #40]	; 5434 <coda_bin_cursor_read_int64_partial_array+0x138>
    5408:	ldr	r0, [fp, #-16]
    540c:	bl	ba0 <read_partial_array>
    5410:	mov	r3, r0
    5414:	mov	r0, r3
    5418:	sub	sp, fp, #4
    541c:	pop	{fp, pc}
    5420:	.word	0x00000000
    5424:	.word	0x00000980
    5428:	.word	0x000004fc
    542c:	.word	0x00000264
    5430:	.word	0x00000674
    5434:	.word	0x00000000

00005438 <coda_bin_cursor_read_uint64_partial_array>:
    5438:	push	{fp, lr}
    543c:	add	fp, sp, #4
    5440:	sub	sp, sp, #32
    5444:	str	r0, [fp, #-16]
    5448:	str	r1, [fp, #-20]	; 0xffffffec
    544c:	str	r2, [fp, #-24]	; 0xffffffe8
    5450:	str	r3, [fp, #-28]	; 0xffffffe4
    5454:	ldr	r3, [fp, #-16]
    5458:	ldr	r3, [r3, #4]
    545c:	sub	r3, r3, #1
    5460:	ldr	r2, [fp, #-16]
    5464:	lsl	r3, r3, #4
    5468:	add	r3, r2, r3
    546c:	ldr	r3, [r3, #8]
    5470:	ldr	r3, [r3]
    5474:	cmp	r3, #99	; 0x63
    5478:	bhi	549c <coda_bin_cursor_read_uint64_partial_array+0x64>
    547c:	ldr	r3, [fp, #-16]
    5480:	ldr	r3, [r3, #4]
    5484:	sub	r3, r3, #1
    5488:	ldr	r2, [fp, #-16]
    548c:	lsl	r3, r3, #4
    5490:	add	r3, r2, r3
    5494:	ldr	r3, [r3, #8]
    5498:	b	54bc <coda_bin_cursor_read_uint64_partial_array+0x84>
    549c:	ldr	r3, [fp, #-16]
    54a0:	ldr	r3, [r3, #4]
    54a4:	sub	r3, r3, #1
    54a8:	ldr	r2, [fp, #-16]
    54ac:	lsl	r3, r3, #4
    54b0:	add	r3, r2, r3
    54b4:	ldr	r3, [r3, #8]
    54b8:	ldr	r3, [r3, #4]
    54bc:	str	r3, [fp, #-8]
    54c0:	ldr	r3, [fp, #-8]
    54c4:	ldr	r3, [r3, #40]	; 0x28
    54c8:	ldr	r3, [r3]
    54cc:	cmp	r3, #1
    54d0:	bne	5500 <coda_bin_cursor_read_uint64_partial_array+0xc8>
    54d4:	mov	r3, #8
    54d8:	str	r3, [sp, #4]
    54dc:	ldr	r3, [fp, #-28]	; 0xffffffe4
    54e0:	str	r3, [sp]
    54e4:	ldr	r3, [fp, #-24]	; 0xffffffe8
    54e8:	ldr	r2, [fp, #-20]	; 0xffffffec
    54ec:	ldr	r1, [pc, #104]	; 555c <coda_bin_cursor_read_uint64_partial_array+0x124>
    54f0:	ldr	r0, [fp, #-16]
    54f4:	bl	ba0 <read_partial_array>
    54f8:	mov	r3, r0
    54fc:	b	5550 <coda_bin_cursor_read_uint64_partial_array+0x118>
    5500:	ldr	r3, [fp, #-8]
    5504:	ldr	r3, [r3, #40]	; 0x28
    5508:	ldr	r3, [r3]
    550c:	cmp	r3, #0
    5510:	beq	5528 <coda_bin_cursor_read_uint64_partial_array+0xf0>
    5514:	ldr	r3, [pc, #68]	; 5560 <coda_bin_cursor_read_uint64_partial_array+0x128>
    5518:	ldr	r2, [pc, #68]	; 5564 <coda_bin_cursor_read_uint64_partial_array+0x12c>
    551c:	ldr	r1, [pc, #68]	; 5568 <coda_bin_cursor_read_uint64_partial_array+0x130>
    5520:	ldr	r0, [pc, #68]	; 556c <coda_bin_cursor_read_uint64_partial_array+0x134>
    5524:	bl	0 <__assert_fail>
    5528:	mov	r3, #8
    552c:	str	r3, [sp, #4]
    5530:	ldr	r3, [fp, #-28]	; 0xffffffe4
    5534:	str	r3, [sp]
    5538:	ldr	r3, [fp, #-24]	; 0xffffffe8
    553c:	ldr	r2, [fp, #-20]	; 0xffffffec
    5540:	ldr	r1, [pc, #40]	; 5570 <coda_bin_cursor_read_uint64_partial_array+0x138>
    5544:	ldr	r0, [fp, #-16]
    5548:	bl	ba0 <read_partial_array>
    554c:	mov	r3, r0
    5550:	mov	r0, r3
    5554:	sub	sp, fp, #4
    5558:	pop	{fp, pc}
    555c:	.word	0x00000000
    5560:	.word	0x000009ac
    5564:	.word	0x0000050a
    5568:	.word	0x00000264
    556c:	.word	0x00000674
    5570:	.word	0x00000000

00005574 <coda_bin_cursor_read_float_partial_array>:
    5574:	push	{fp, lr}
    5578:	add	fp, sp, #4
    557c:	sub	sp, sp, #32
    5580:	str	r0, [fp, #-16]
    5584:	str	r1, [fp, #-20]	; 0xffffffec
    5588:	str	r2, [fp, #-24]	; 0xffffffe8
    558c:	str	r3, [fp, #-28]	; 0xffffffe4
    5590:	ldr	r3, [fp, #-16]
    5594:	ldr	r3, [r3, #4]
    5598:	sub	r3, r3, #1
    559c:	ldr	r2, [fp, #-16]
    55a0:	lsl	r3, r3, #4
    55a4:	add	r3, r2, r3
    55a8:	ldr	r3, [r3, #8]
    55ac:	ldr	r3, [r3]
    55b0:	cmp	r3, #99	; 0x63
    55b4:	bhi	55d8 <coda_bin_cursor_read_float_partial_array+0x64>
    55b8:	ldr	r3, [fp, #-16]
    55bc:	ldr	r3, [r3, #4]
    55c0:	sub	r3, r3, #1
    55c4:	ldr	r2, [fp, #-16]
    55c8:	lsl	r3, r3, #4
    55cc:	add	r3, r2, r3
    55d0:	ldr	r3, [r3, #8]
    55d4:	b	55f8 <coda_bin_cursor_read_float_partial_array+0x84>
    55d8:	ldr	r3, [fp, #-16]
    55dc:	ldr	r3, [r3, #4]
    55e0:	sub	r3, r3, #1
    55e4:	ldr	r2, [fp, #-16]
    55e8:	lsl	r3, r3, #4
    55ec:	add	r3, r2, r3
    55f0:	ldr	r3, [r3, #8]
    55f4:	ldr	r3, [r3, #4]
    55f8:	str	r3, [fp, #-8]
    55fc:	ldr	r3, [fp, #-8]
    5600:	ldr	r3, [r3, #40]	; 0x28
    5604:	ldr	r3, [r3]
    5608:	cmp	r3, #1
    560c:	bne	563c <coda_bin_cursor_read_float_partial_array+0xc8>
    5610:	mov	r3, #4
    5614:	str	r3, [sp, #4]
    5618:	ldr	r3, [fp, #-28]	; 0xffffffe4
    561c:	str	r3, [sp]
    5620:	ldr	r3, [fp, #-24]	; 0xffffffe8
    5624:	ldr	r2, [fp, #-20]	; 0xffffffec
    5628:	ldr	r1, [pc, #104]	; 5698 <coda_bin_cursor_read_float_partial_array+0x124>
    562c:	ldr	r0, [fp, #-16]
    5630:	bl	ba0 <read_partial_array>
    5634:	mov	r3, r0
    5638:	b	568c <coda_bin_cursor_read_float_partial_array+0x118>
    563c:	ldr	r3, [fp, #-8]
    5640:	ldr	r3, [r3, #40]	; 0x28
    5644:	ldr	r3, [r3]
    5648:	cmp	r3, #0
    564c:	beq	5664 <coda_bin_cursor_read_float_partial_array+0xf0>
    5650:	ldr	r3, [pc, #68]	; 569c <coda_bin_cursor_read_float_partial_array+0x128>
    5654:	ldr	r2, [pc, #68]	; 56a0 <coda_bin_cursor_read_float_partial_array+0x12c>
    5658:	ldr	r1, [pc, #68]	; 56a4 <coda_bin_cursor_read_float_partial_array+0x130>
    565c:	ldr	r0, [pc, #68]	; 56a8 <coda_bin_cursor_read_float_partial_array+0x134>
    5660:	bl	0 <__assert_fail>
    5664:	mov	r3, #4
    5668:	str	r3, [sp, #4]
    566c:	ldr	r3, [fp, #-28]	; 0xffffffe4
    5670:	str	r3, [sp]
    5674:	ldr	r3, [fp, #-24]	; 0xffffffe8
    5678:	ldr	r2, [fp, #-20]	; 0xffffffec
    567c:	ldr	r1, [pc, #40]	; 56ac <coda_bin_cursor_read_float_partial_array+0x138>
    5680:	ldr	r0, [fp, #-16]
    5684:	bl	ba0 <read_partial_array>
    5688:	mov	r3, r0
    568c:	mov	r0, r3
    5690:	sub	sp, fp, #4
    5694:	pop	{fp, pc}
    5698:	.word	0x00000000
    569c:	.word	0x000009d8
    56a0:	.word	0x00000518
    56a4:	.word	0x00000264
    56a8:	.word	0x00000674
    56ac:	.word	0x00000000

000056b0 <coda_bin_cursor_read_double_partial_array>:
    56b0:	push	{fp, lr}
    56b4:	add	fp, sp, #4
    56b8:	sub	sp, sp, #32
    56bc:	str	r0, [fp, #-16]
    56c0:	str	r1, [fp, #-20]	; 0xffffffec
    56c4:	str	r2, [fp, #-24]	; 0xffffffe8
    56c8:	str	r3, [fp, #-28]	; 0xffffffe4
    56cc:	ldr	r3, [fp, #-16]
    56d0:	ldr	r3, [r3, #4]
    56d4:	sub	r3, r3, #1
    56d8:	ldr	r2, [fp, #-16]
    56dc:	lsl	r3, r3, #4
    56e0:	add	r3, r2, r3
    56e4:	ldr	r3, [r3, #8]
    56e8:	ldr	r3, [r3]
    56ec:	cmp	r3, #99	; 0x63
    56f0:	bhi	5714 <coda_bin_cursor_read_double_partial_array+0x64>
    56f4:	ldr	r3, [fp, #-16]
    56f8:	ldr	r3, [r3, #4]
    56fc:	sub	r3, r3, #1
    5700:	ldr	r2, [fp, #-16]
    5704:	lsl	r3, r3, #4
    5708:	add	r3, r2, r3
    570c:	ldr	r3, [r3, #8]
    5710:	b	5734 <coda_bin_cursor_read_double_partial_array+0x84>
    5714:	ldr	r3, [fp, #-16]
    5718:	ldr	r3, [r3, #4]
    571c:	sub	r3, r3, #1
    5720:	ldr	r2, [fp, #-16]
    5724:	lsl	r3, r3, #4
    5728:	add	r3, r2, r3
    572c:	ldr	r3, [r3, #8]
    5730:	ldr	r3, [r3, #4]
    5734:	str	r3, [fp, #-8]
    5738:	ldr	r3, [fp, #-8]
    573c:	ldr	r3, [r3, #40]	; 0x28
    5740:	ldr	r3, [r3]
    5744:	cmp	r3, #1
    5748:	bne	5778 <coda_bin_cursor_read_double_partial_array+0xc8>
    574c:	mov	r3, #8
    5750:	str	r3, [sp, #4]
    5754:	ldr	r3, [fp, #-28]	; 0xffffffe4
    5758:	str	r3, [sp]
    575c:	ldr	r3, [fp, #-24]	; 0xffffffe8
    5760:	ldr	r2, [fp, #-20]	; 0xffffffec
    5764:	ldr	r1, [pc, #104]	; 57d4 <coda_bin_cursor_read_double_partial_array+0x124>
    5768:	ldr	r0, [fp, #-16]
    576c:	bl	ba0 <read_partial_array>
    5770:	mov	r3, r0
    5774:	b	57c8 <coda_bin_cursor_read_double_partial_array+0x118>
    5778:	ldr	r3, [fp, #-8]
    577c:	ldr	r3, [r3, #40]	; 0x28
    5780:	ldr	r3, [r3]
    5784:	cmp	r3, #0
    5788:	beq	57a0 <coda_bin_cursor_read_double_partial_array+0xf0>
    578c:	ldr	r3, [pc, #68]	; 57d8 <coda_bin_cursor_read_double_partial_array+0x128>
    5790:	ldr	r2, [pc, #68]	; 57dc <coda_bin_cursor_read_double_partial_array+0x12c>
    5794:	ldr	r1, [pc, #68]	; 57e0 <coda_bin_cursor_read_double_partial_array+0x130>
    5798:	ldr	r0, [pc, #68]	; 57e4 <coda_bin_cursor_read_double_partial_array+0x134>
    579c:	bl	0 <__assert_fail>
    57a0:	mov	r3, #8
    57a4:	str	r3, [sp, #4]
    57a8:	ldr	r3, [fp, #-28]	; 0xffffffe4
    57ac:	str	r3, [sp]
    57b0:	ldr	r3, [fp, #-24]	; 0xffffffe8
    57b4:	ldr	r2, [fp, #-20]	; 0xffffffec
    57b8:	ldr	r1, [pc, #40]	; 57e8 <coda_bin_cursor_read_double_partial_array+0x138>
    57bc:	ldr	r0, [fp, #-16]
    57c0:	bl	ba0 <read_partial_array>
    57c4:	mov	r3, r0
    57c8:	mov	r0, r3
    57cc:	sub	sp, fp, #4
    57d0:	pop	{fp, pc}
    57d4:	.word	0x00000000
    57d8:	.word	0x00000a04
    57dc:	.word	0x00000526
    57e0:	.word	0x00000264
    57e4:	.word	0x00000674
    57e8:	.word	0x00000000

000057ec <coda_bin_cursor_read_char_partial_array>:
    57ec:	push	{fp, lr}
    57f0:	add	fp, sp, #4
    57f4:	sub	sp, sp, #32
    57f8:	str	r0, [fp, #-16]
    57fc:	str	r1, [fp, #-20]	; 0xffffffec
    5800:	str	r2, [fp, #-24]	; 0xffffffe8
    5804:	str	r3, [fp, #-28]	; 0xffffffe4
    5808:	ldr	r3, [fp, #-16]
    580c:	ldr	r3, [r3, #4]
    5810:	sub	r3, r3, #1
    5814:	ldr	r2, [fp, #-16]
    5818:	lsl	r3, r3, #4
    581c:	add	r3, r2, r3
    5820:	ldr	r3, [r3, #8]
    5824:	ldr	r3, [r3]
    5828:	cmp	r3, #99	; 0x63
    582c:	bhi	5850 <coda_bin_cursor_read_char_partial_array+0x64>
    5830:	ldr	r3, [fp, #-16]
    5834:	ldr	r3, [r3, #4]
    5838:	sub	r3, r3, #1
    583c:	ldr	r2, [fp, #-16]
    5840:	lsl	r3, r3, #4
    5844:	add	r3, r2, r3
    5848:	ldr	r3, [r3, #8]
    584c:	b	5870 <coda_bin_cursor_read_char_partial_array+0x84>
    5850:	ldr	r3, [fp, #-16]
    5854:	ldr	r3, [r3, #4]
    5858:	sub	r3, r3, #1
    585c:	ldr	r2, [fp, #-16]
    5860:	lsl	r3, r3, #4
    5864:	add	r3, r2, r3
    5868:	ldr	r3, [r3, #8]
    586c:	ldr	r3, [r3, #4]
    5870:	str	r3, [fp, #-8]
    5874:	ldr	r3, [fp, #-8]
    5878:	ldr	r3, [r3, #40]	; 0x28
    587c:	ldr	r3, [r3]
    5880:	cmp	r3, #1
    5884:	bne	58b4 <coda_bin_cursor_read_char_partial_array+0xc8>
    5888:	mov	r3, #1
    588c:	str	r3, [sp, #4]
    5890:	ldr	r3, [fp, #-28]	; 0xffffffe4
    5894:	str	r3, [sp]
    5898:	ldr	r3, [fp, #-24]	; 0xffffffe8
    589c:	ldr	r2, [fp, #-20]	; 0xffffffec
    58a0:	ldr	r1, [pc, #104]	; 5910 <coda_bin_cursor_read_char_partial_array+0x124>
    58a4:	ldr	r0, [fp, #-16]
    58a8:	bl	ba0 <read_partial_array>
    58ac:	mov	r3, r0
    58b0:	b	5904 <coda_bin_cursor_read_char_partial_array+0x118>
    58b4:	ldr	r3, [fp, #-8]
    58b8:	ldr	r3, [r3, #40]	; 0x28
    58bc:	ldr	r3, [r3]
    58c0:	cmp	r3, #0
    58c4:	beq	58dc <coda_bin_cursor_read_char_partial_array+0xf0>
    58c8:	ldr	r3, [pc, #68]	; 5914 <coda_bin_cursor_read_char_partial_array+0x128>
    58cc:	ldr	r2, [pc, #68]	; 5918 <coda_bin_cursor_read_char_partial_array+0x12c>
    58d0:	ldr	r1, [pc, #68]	; 591c <coda_bin_cursor_read_char_partial_array+0x130>
    58d4:	ldr	r0, [pc, #68]	; 5920 <coda_bin_cursor_read_char_partial_array+0x134>
    58d8:	bl	0 <__assert_fail>
    58dc:	mov	r3, #1
    58e0:	str	r3, [sp, #4]
    58e4:	ldr	r3, [fp, #-28]	; 0xffffffe4
    58e8:	str	r3, [sp]
    58ec:	ldr	r3, [fp, #-24]	; 0xffffffe8
    58f0:	ldr	r2, [fp, #-20]	; 0xffffffec
    58f4:	ldr	r1, [pc, #40]	; 5924 <coda_bin_cursor_read_char_partial_array+0x138>
    58f8:	ldr	r0, [fp, #-16]
    58fc:	bl	ba0 <read_partial_array>
    5900:	mov	r3, r0
    5904:	mov	r0, r3
    5908:	sub	sp, fp, #4
    590c:	pop	{fp, pc}
    5910:	.word	0x00000000
    5914:	.word	0x00000a30
    5918:	.word	0x00000534
    591c:	.word	0x00000264
    5920:	.word	0x00000674
    5924:	.word	0x00000000
