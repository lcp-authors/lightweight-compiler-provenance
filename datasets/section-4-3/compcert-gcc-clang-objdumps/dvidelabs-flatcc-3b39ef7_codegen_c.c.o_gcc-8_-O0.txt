
../compcert-repos/dvidelabs-flatcc-3b39ef7/src/compiler/CMakeFiles/flatcc.dir/codegen_c.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <checkmem>:
   0:	str	fp, [sp, #-8]!
   4:	str	lr, [sp, #4]
   8:	add	fp, sp, #4
   c:	sub	sp, sp, #8
  10:	str	r0, [fp, #-8]
  14:	ldr	r3, [fp, #-8]
  18:	cmp	r3, #0
  1c:	bne	48 <checkmem+0x48>
  20:	movw	r3, #0
  24:	movt	r3, #0
  28:	ldr	r3, [r3]
  2c:	mov	r2, #34	; 0x22
  30:	mov	r1, #1
  34:	movw	r0, #0
  38:	movt	r0, #0
  3c:	bl	0 <fwrite>
  40:	mov	r0, #1
  44:	bl	0 <exit>
  48:	nop	{0}
  4c:	sub	sp, fp, #4
  50:	ldr	fp, [sp]
  54:	add	sp, sp, #4
  58:	pop	{pc}		; (ldr pc, [sp], #4)

0000005c <error_tok_2>:
  5c:	str	fp, [sp, #-8]!
  60:	str	lr, [sp, #4]
  64:	add	fp, sp, #4
  68:	sub	sp, sp, #24
  6c:	str	r0, [fp, #-8]
  70:	str	r1, [fp, #-12]
  74:	str	r2, [fp, #-16]
  78:	str	r3, [fp, #-20]	; 0xffffffec
  7c:	mov	r3, #0
  80:	str	r3, [sp, #4]
  84:	mov	r3, #0
  88:	str	r3, [sp]
  8c:	ldr	r3, [fp, #-20]	; 0xffffffec
  90:	ldr	r2, [fp, #-16]
  94:	ldr	r1, [fp, #-12]
  98:	ldr	r0, [fp, #-8]
  9c:	bl	0 <__flatcc_error_report>
  a0:	nop	{0}
  a4:	sub	sp, fp, #4
  a8:	ldr	fp, [sp]
  ac:	add	sp, sp, #4
  b0:	pop	{pc}		; (ldr pc, [sp], #4)

000000b4 <pstrcpyupper>:
  b4:	str	fp, [sp, #-8]!
  b8:	str	lr, [sp, #4]
  bc:	add	fp, sp, #4
  c0:	sub	sp, sp, #16
  c4:	str	r0, [fp, #-16]
  c8:	str	r1, [fp, #-20]	; 0xffffffec
  cc:	ldr	r3, [fp, #-16]
  d0:	str	r3, [fp, #-8]
  d4:	b	108 <pstrcpyupper+0x54>
  d8:	ldr	r3, [fp, #-20]	; 0xffffffec
  dc:	add	r2, r3, #1
  e0:	str	r2, [fp, #-20]	; 0xffffffec
  e4:	ldrb	r3, [r3]
  e8:	mov	r0, r3
  ec:	bl	0 <toupper>
  f0:	mov	r1, r0
  f4:	ldr	r3, [fp, #-8]
  f8:	add	r2, r3, #1
  fc:	str	r2, [fp, #-8]
 100:	uxtb	r2, r1
 104:	strb	r2, [r3]
 108:	ldr	r3, [fp, #-20]	; 0xffffffec
 10c:	ldrb	r3, [r3]
 110:	cmp	r3, #0
 114:	bne	d8 <pstrcpyupper+0x24>
 118:	ldr	r3, [fp, #-8]
 11c:	mov	r2, #0
 120:	strb	r2, [r3]
 124:	ldr	r3, [fp, #-16]
 128:	mov	r0, r3
 12c:	sub	sp, fp, #4
 130:	ldr	fp, [sp]
 134:	add	sp, sp, #4
 138:	pop	{pc}		; (ldr pc, [sp], #4)

0000013c <__flatcc_fb_open_output_file>:
 13c:	str	fp, [sp, #-8]!
 140:	str	lr, [sp, #4]
 144:	add	fp, sp, #4
 148:	sub	sp, sp, #40	; 0x28
 14c:	str	r0, [fp, #-24]	; 0xffffffe8
 150:	str	r1, [fp, #-28]	; 0xffffffe4
 154:	str	r2, [fp, #-32]	; 0xffffffe0
 158:	str	r3, [fp, #-36]	; 0xffffffdc
 15c:	ldr	r3, [fp, #-24]	; 0xffffffe8
 160:	ldr	r3, [r3, #212]	; 0xd4
 164:	ldr	r3, [r3, #216]	; 0xd8
 168:	cmp	r3, #0
 16c:	beq	180 <__flatcc_fb_open_output_file+0x44>
 170:	ldr	r3, [fp, #-24]	; 0xffffffe8
 174:	ldr	r3, [r3, #212]	; 0xd4
 178:	ldr	r3, [r3, #216]	; 0xd8
 17c:	b	188 <__flatcc_fb_open_output_file+0x4c>
 180:	movw	r3, #0
 184:	movt	r3, #0
 188:	str	r3, [fp, #-12]
 18c:	ldr	r0, [fp, #-12]
 190:	bl	0 <strlen>
 194:	str	r0, [fp, #-16]
 198:	ldr	r3, [fp, #-24]	; 0xffffffe8
 19c:	ldr	r3, [r3, #204]	; 0xcc
 1a0:	cmp	r3, #0
 1a4:	beq	1b0 <__flatcc_fb_open_output_file+0x74>
 1a8:	mov	r3, #0
 1ac:	b	248 <__flatcc_fb_open_output_file+0x10c>
 1b0:	mov	r3, #1
 1b4:	str	r3, [sp, #4]
 1b8:	ldr	r3, [fp, #-36]	; 0xffffffdc
 1bc:	str	r3, [sp]
 1c0:	ldr	r3, [fp, #-32]	; 0xffffffe0
 1c4:	ldr	r2, [fp, #-28]	; 0xffffffe4
 1c8:	ldr	r1, [fp, #-16]
 1cc:	ldr	r0, [fp, #-12]
 1d0:	bl	0 <__flatcc_fb_create_join_path_n>
 1d4:	str	r0, [fp, #-20]	; 0xffffffec
 1d8:	ldr	r0, [fp, #-20]	; 0xffffffec
 1dc:	bl	0 <checkmem>
 1e0:	movw	r1, #0
 1e4:	movt	r1, #0
 1e8:	ldr	r0, [fp, #-20]	; 0xffffffec
 1ec:	bl	0 <fopen>
 1f0:	mov	r2, r0
 1f4:	ldr	r3, [fp, #-24]	; 0xffffffe8
 1f8:	str	r2, [r3, #204]	; 0xcc
 1fc:	mov	r3, #0
 200:	str	r3, [fp, #-8]
 204:	ldr	r3, [fp, #-24]	; 0xffffffe8
 208:	ldr	r3, [r3, #204]	; 0xcc
 20c:	cmp	r3, #0
 210:	bne	23c <__flatcc_fb_open_output_file+0x100>
 214:	movw	r3, #0
 218:	movt	r3, #0
 21c:	ldr	r3, [r3]
 220:	ldr	r2, [fp, #-20]	; 0xffffffec
 224:	movw	r1, #0
 228:	movt	r1, #0
 22c:	mov	r0, r3
 230:	bl	0 <fprintf>
 234:	mvn	r3, #0
 238:	str	r3, [fp, #-8]
 23c:	ldr	r0, [fp, #-20]	; 0xffffffec
 240:	bl	0 <free>
 244:	ldr	r3, [fp, #-8]
 248:	mov	r0, r3
 24c:	sub	sp, fp, #4
 250:	ldr	fp, [sp]
 254:	add	sp, sp, #4
 258:	pop	{pc}		; (ldr pc, [sp], #4)

0000025c <__flatcc_fb_close_output_file>:
 25c:	str	fp, [sp, #-8]!
 260:	str	lr, [sp, #4]
 264:	add	fp, sp, #4
 268:	sub	sp, sp, #8
 26c:	str	r0, [fp, #-8]
 270:	ldr	r3, [fp, #-8]
 274:	ldr	r3, [r3, #212]	; 0xd4
 278:	ldr	r3, [r3, #124]	; 0x7c
 27c:	cmp	r3, #0
 280:	bne	2c4 <__flatcc_fb_close_output_file+0x68>
 284:	ldr	r3, [fp, #-8]
 288:	ldr	r3, [r3, #212]	; 0xd4
 28c:	ldr	r3, [r3, #108]	; 0x6c
 290:	cmp	r3, #0
 294:	bne	2c4 <__flatcc_fb_close_output_file+0x68>
 298:	ldr	r3, [fp, #-8]
 29c:	ldr	r3, [r3, #204]	; 0xcc
 2a0:	cmp	r3, #0
 2a4:	beq	2c4 <__flatcc_fb_close_output_file+0x68>
 2a8:	ldr	r3, [fp, #-8]
 2ac:	ldr	r3, [r3, #204]	; 0xcc
 2b0:	mov	r0, r3
 2b4:	bl	0 <fclose>
 2b8:	ldr	r3, [fp, #-8]
 2bc:	mov	r2, #0
 2c0:	str	r2, [r3, #204]	; 0xcc
 2c4:	nop	{0}
 2c8:	sub	sp, fp, #4
 2cc:	ldr	fp, [sp]
 2d0:	add	sp, sp, #4
 2d4:	pop	{pc}		; (ldr pc, [sp], #4)

000002d8 <__flatcc_fb_end_output_c>:
 2d8:	str	fp, [sp, #-8]!
 2dc:	str	lr, [sp, #4]
 2e0:	add	fp, sp, #4
 2e4:	sub	sp, sp, #8
 2e8:	str	r0, [fp, #-8]
 2ec:	ldr	r3, [fp, #-8]
 2f0:	ldr	r2, [r3, #204]	; 0xcc
 2f4:	movw	r3, #0
 2f8:	movt	r3, #0
 2fc:	ldr	r3, [r3]
 300:	cmp	r2, r3
 304:	beq	328 <__flatcc_fb_end_output_c+0x50>
 308:	ldr	r3, [fp, #-8]
 30c:	ldr	r3, [r3, #204]	; 0xcc
 310:	cmp	r3, #0
 314:	beq	328 <__flatcc_fb_end_output_c+0x50>
 318:	ldr	r3, [fp, #-8]
 31c:	ldr	r3, [r3, #204]	; 0xcc
 320:	mov	r0, r3
 324:	bl	0 <fclose>
 328:	ldr	r3, [fp, #-8]
 32c:	mov	r2, #0
 330:	str	r2, [r3, #204]	; 0xcc
 334:	nop	{0}
 338:	sub	sp, fp, #4
 33c:	ldr	fp, [sp]
 340:	add	sp, sp, #4
 344:	pop	{pc}		; (ldr pc, [sp], #4)

00000348 <__flatcc_fb_init_output_c>:
 348:	str	fp, [sp, #-8]!
 34c:	str	lr, [sp, #4]
 350:	add	fp, sp, #4
 354:	sub	sp, sp, #32
 358:	str	r0, [fp, #-32]	; 0xffffffe0
 35c:	str	r1, [fp, #-36]	; 0xffffffdc
 360:	mov	r3, #0
 364:	str	r3, [fp, #-20]	; 0xffffffec
 368:	ldr	r3, [fp, #-36]	; 0xffffffdc
 36c:	ldr	r3, [r3, #128]	; 0x80
 370:	cmp	r3, #0
 374:	beq	384 <__flatcc_fb_init_output_c+0x3c>
 378:	movw	r3, #0
 37c:	movt	r3, #0
 380:	b	38c <__flatcc_fb_init_output_c+0x44>
 384:	movw	r3, #0
 388:	movt	r3, #0
 38c:	str	r3, [fp, #-24]	; 0xffffffe8
 390:	ldr	r3, [fp, #-36]	; 0xffffffdc
 394:	ldr	r3, [r3, #216]	; 0xd8
 398:	cmp	r3, #0
 39c:	beq	3ac <__flatcc_fb_init_output_c+0x64>
 3a0:	ldr	r3, [fp, #-36]	; 0xffffffdc
 3a4:	ldr	r3, [r3, #216]	; 0xd8
 3a8:	b	3b4 <__flatcc_fb_init_output_c+0x6c>
 3ac:	movw	r3, #0
 3b0:	movt	r3, #0
 3b4:	str	r3, [fp, #-28]	; 0xffffffe4
 3b8:	mvn	r3, #0
 3bc:	str	r3, [fp, #-16]
 3c0:	mov	r2, #232	; 0xe8
 3c4:	mov	r1, #0
 3c8:	ldr	r0, [fp, #-32]	; 0xffffffe0
 3cc:	bl	0 <memset>
 3d0:	ldr	r3, [fp, #-32]	; 0xffffffe0
 3d4:	ldr	r2, [fp, #-36]	; 0xffffffdc
 3d8:	str	r2, [r3, #212]	; 0xd4
 3dc:	ldr	r3, [fp, #-36]	; 0xffffffdc
 3e0:	ldr	r3, [r3, #196]	; 0xc4
 3e4:	str	r3, [fp, #-8]
 3e8:	ldr	r3, [fp, #-8]
 3ec:	cmp	r3, #0
 3f0:	beq	43c <__flatcc_fb_init_output_c+0xf4>
 3f4:	ldr	r3, [fp, #-36]	; 0xffffffdc
 3f8:	ldr	r3, [r3, #196]	; 0xc4
 3fc:	mov	r0, r3
 400:	bl	0 <strlen>
 404:	str	r0, [fp, #-12]
 408:	ldr	r3, [fp, #-12]
 40c:	cmp	r3, #100	; 0x64
 410:	bls	454 <__flatcc_fb_init_output_c+0x10c>
 414:	movw	r3, #0
 418:	movt	r3, #0
 41c:	ldr	r3, [r3]
 420:	mov	r2, #100	; 0x64
 424:	movw	r1, #0
 428:	movt	r1, #0
 42c:	mov	r0, r3
 430:	bl	0 <fprintf>
 434:	mvn	r3, #0
 438:	b	5d0 <__flatcc_fb_init_output_c+0x288>
 43c:	movw	r3, #0
 440:	movt	r3, #0
 444:	str	r3, [fp, #-8]
 448:	ldr	r0, [fp, #-8]
 44c:	bl	0 <strlen>
 450:	str	r0, [fp, #-12]
 454:	ldr	r3, [fp, #-32]	; 0xffffffe0
 458:	mov	r2, #100	; 0x64
 45c:	ldr	r1, [fp, #-8]
 460:	mov	r0, r3
 464:	bl	0 <strncpy>
 468:	ldr	r3, [fp, #-32]	; 0xffffffe0
 46c:	mov	r2, #0
 470:	strb	r2, [r3, #100]	; 0x64
 474:	ldr	r3, [fp, #-12]
 478:	cmp	r3, #0
 47c:	beq	4a8 <__flatcc_fb_init_output_c+0x160>
 480:	ldr	r2, [fp, #-32]	; 0xffffffe0
 484:	ldr	r3, [fp, #-12]
 488:	add	r3, r2, r3
 48c:	mov	r2, #95	; 0x5f
 490:	strb	r2, [r3]
 494:	ldr	r3, [fp, #-12]
 498:	add	r3, r3, #1
 49c:	ldr	r2, [fp, #-32]	; 0xffffffe0
 4a0:	mov	r1, #0
 4a4:	strb	r1, [r2, r3]
 4a8:	ldr	r3, [fp, #-32]	; 0xffffffe0
 4ac:	add	r3, r3, #102	; 0x66
 4b0:	ldr	r2, [fp, #-32]	; 0xffffffe0
 4b4:	mov	r1, r2
 4b8:	mov	r0, r3
 4bc:	bl	b4 <pstrcpyupper>
 4c0:	ldr	r2, [fp, #-32]	; 0xffffffe0
 4c4:	ldr	r3, [fp, #-12]
 4c8:	add	r3, r2, r3
 4cc:	add	r3, r3, #102	; 0x66
 4d0:	mov	r2, #0
 4d4:	strb	r2, [r3]
 4d8:	ldr	r3, [fp, #-36]	; 0xffffffdc
 4dc:	ldr	r2, [r3, #176]	; 0xb0
 4e0:	ldr	r3, [fp, #-32]	; 0xffffffe0
 4e4:	str	r2, [r3, #224]	; 0xe0
 4e8:	ldr	r3, [fp, #-36]	; 0xffffffdc
 4ec:	ldr	r3, [r3, #108]	; 0x6c
 4f0:	cmp	r3, #0
 4f4:	beq	514 <__flatcc_fb_init_output_c+0x1cc>
 4f8:	movw	r3, #0
 4fc:	movt	r3, #0
 500:	ldr	r2, [r3]
 504:	ldr	r3, [fp, #-32]	; 0xffffffe0
 508:	str	r2, [r3, #204]	; 0xcc
 50c:	mov	r3, #0
 510:	b	5d0 <__flatcc_fb_init_output_c+0x288>
 514:	ldr	r3, [fp, #-32]	; 0xffffffe0
 518:	ldr	r3, [r3, #212]	; 0xd4
 51c:	ldr	r3, [r3, #124]	; 0x7c
 520:	cmp	r3, #0
 524:	bne	530 <__flatcc_fb_init_output_c+0x1e8>
 528:	mov	r3, #0
 52c:	b	5d0 <__flatcc_fb_init_output_c+0x288>
 530:	ldr	r3, [fp, #-32]	; 0xffffffe0
 534:	ldr	r3, [r3, #212]	; 0xd4
 538:	ldr	r1, [r3, #124]	; 0x7c
 53c:	mov	r3, #1
 540:	movw	r2, #0
 544:	movt	r2, #0
 548:	ldr	r0, [fp, #-28]	; 0xffffffe4
 54c:	bl	0 <__flatcc_fb_create_join_path>
 550:	str	r0, [fp, #-20]	; 0xffffffec
 554:	ldr	r0, [fp, #-20]	; 0xffffffec
 558:	bl	0 <checkmem>
 55c:	ldr	r1, [fp, #-24]	; 0xffffffe8
 560:	ldr	r0, [fp, #-20]	; 0xffffffec
 564:	bl	0 <fopen>
 568:	mov	r2, r0
 56c:	ldr	r3, [fp, #-32]	; 0xffffffe0
 570:	str	r2, [r3, #204]	; 0xcc
 574:	ldr	r3, [fp, #-32]	; 0xffffffe0
 578:	ldr	r3, [r3, #204]	; 0xcc
 57c:	cmp	r3, #0
 580:	bne	5b0 <__flatcc_fb_init_output_c+0x268>
 584:	movw	r3, #0
 588:	movt	r3, #0
 58c:	ldr	r3, [r3]
 590:	ldr	r2, [fp, #-20]	; 0xffffffec
 594:	movw	r1, #0
 598:	movt	r1, #0
 59c:	mov	r0, r3
 5a0:	bl	0 <fprintf>
 5a4:	mvn	r3, #0
 5a8:	str	r3, [fp, #-16]
 5ac:	b	5b8 <__flatcc_fb_init_output_c+0x270>
 5b0:	mov	r3, #0
 5b4:	str	r3, [fp, #-16]
 5b8:	ldr	r3, [fp, #-20]	; 0xffffffec
 5bc:	cmp	r3, #0
 5c0:	beq	5cc <__flatcc_fb_init_output_c+0x284>
 5c4:	ldr	r0, [fp, #-20]	; 0xffffffec
 5c8:	bl	0 <free>
 5cc:	ldr	r3, [fp, #-16]
 5d0:	mov	r0, r3
 5d4:	sub	sp, fp, #4
 5d8:	ldr	fp, [sp]
 5dc:	add	sp, sp, #4
 5e0:	pop	{pc}		; (ldr pc, [sp], #4)

000005e4 <_str_set_destructor>:
 5e4:	str	fp, [sp, #-8]!
 5e8:	str	lr, [sp, #4]
 5ec:	add	fp, sp, #4
 5f0:	sub	sp, sp, #8
 5f4:	str	r0, [fp, #-8]
 5f8:	str	r1, [fp, #-12]
 5fc:	ldr	r0, [fp, #-12]
 600:	bl	0 <free>
 604:	nop	{0}
 608:	sub	sp, fp, #4
 60c:	ldr	fp, [sp]
 610:	add	sp, sp, #4
 614:	pop	{pc}		; (ldr pc, [sp], #4)

00000618 <__flatcc_fb_gen_c_includes>:
 618:	str	fp, [sp, #-8]!
 61c:	str	lr, [sp, #4]
 620:	add	fp, sp, #4
 624:	sub	sp, sp, #56	; 0x38
 628:	str	r0, [fp, #-40]	; 0xffffffd8
 62c:	str	r1, [fp, #-44]	; 0xffffffd4
 630:	str	r2, [fp, #-48]	; 0xffffffd0
 634:	ldr	r3, [fp, #-40]	; 0xffffffd8
 638:	ldr	r3, [r3, #208]	; 0xd0
 63c:	ldr	r3, [r3]
 640:	str	r3, [fp, #-8]
 644:	sub	r3, fp, #36	; 0x24
 648:	mov	r2, #16
 64c:	mov	r1, #0
 650:	mov	r0, r3
 654:	bl	0 <memset>
 658:	ldr	r3, [fp, #-40]	; 0xffffffd8
 65c:	ldr	r3, [r3, #208]	; 0xd0
 660:	ldr	r3, [r3, #164]	; 0xa4
 664:	mov	r0, r3
 668:	bl	0 <__flatcc_fb_copy_path>
 66c:	mov	r1, r0
 670:	sub	r3, fp, #36	; 0x24
 674:	mov	r2, #1
 678:	mov	r0, r3
 67c:	bl	0 <str_set_insert_item>
 680:	b	788 <__flatcc_fb_gen_c_includes+0x170>
 684:	ldr	r3, [fp, #-8]
 688:	ldr	r0, [r3, #8]
 68c:	ldr	r3, [fp, #-8]
 690:	ldr	r3, [r3, #12]
 694:	mov	r1, r3
 698:	ldr	r3, [fp, #-40]	; 0xffffffd8
 69c:	ldr	r3, [r3, #212]	; 0xd4
 6a0:	ldr	r3, [r3, #96]	; 0x60
 6a4:	mov	r2, r3
 6a8:	bl	0 <__flatcc_fb_create_basename>
 6ac:	str	r0, [fp, #-16]
 6b0:	ldr	r0, [fp, #-16]
 6b4:	bl	0 <checkmem>
 6b8:	ldr	r3, [fp, #-8]
 6bc:	ldr	r3, [r3]
 6c0:	str	r3, [fp, #-8]
 6c4:	ldr	r0, [fp, #-16]
 6c8:	bl	0 <__flatcc_fb_copy_path>
 6cc:	str	r0, [fp, #-20]	; 0xffffffec
 6d0:	ldr	r0, [fp, #-20]	; 0xffffffec
 6d4:	bl	0 <checkmem>
 6d8:	ldr	r3, [fp, #-20]	; 0xffffffec
 6dc:	str	r3, [fp, #-12]
 6e0:	b	710 <__flatcc_fb_gen_c_includes+0xf8>
 6e4:	ldr	r3, [fp, #-12]
 6e8:	ldrb	r3, [r3]
 6ec:	mov	r0, r3
 6f0:	bl	0 <toupper>
 6f4:	mov	r3, r0
 6f8:	uxtb	r2, r3
 6fc:	ldr	r3, [fp, #-12]
 700:	strb	r2, [r3]
 704:	ldr	r3, [fp, #-12]
 708:	add	r3, r3, #1
 70c:	str	r3, [fp, #-12]
 710:	ldr	r3, [fp, #-12]
 714:	ldrb	r3, [r3]
 718:	cmp	r3, #0
 71c:	bne	6e4 <__flatcc_fb_gen_c_includes+0xcc>
 720:	sub	r3, fp, #36	; 0x24
 724:	mov	r2, #1
 728:	ldr	r1, [fp, #-20]	; 0xffffffec
 72c:	mov	r0, r3
 730:	bl	0 <str_set_insert_item>
 734:	mov	r3, r0
 738:	cmp	r3, #0
 73c:	beq	754 <__flatcc_fb_gen_c_includes+0x13c>
 740:	ldr	r0, [fp, #-20]	; 0xffffffec
 744:	bl	0 <free>
 748:	ldr	r0, [fp, #-16]
 74c:	bl	0 <free>
 750:	b	788 <__flatcc_fb_gen_c_includes+0x170>
 754:	ldr	r3, [fp, #-40]	; 0xffffffd8
 758:	ldr	r0, [r3, #204]	; 0xcc
 75c:	ldr	r3, [fp, #-44]	; 0xffffffd4
 760:	str	r3, [sp, #4]
 764:	ldr	r3, [fp, #-16]
 768:	str	r3, [sp]
 76c:	ldr	r3, [fp, #-48]	; 0xffffffd0
 770:	ldr	r2, [fp, #-20]	; 0xffffffec
 774:	movw	r1, #0
 778:	movt	r1, #0
 77c:	bl	0 <fprintf>
 780:	ldr	r0, [fp, #-16]
 784:	bl	0 <free>
 788:	ldr	r3, [fp, #-8]
 78c:	cmp	r3, #0
 790:	bne	684 <__flatcc_fb_gen_c_includes+0x6c>
 794:	sub	r3, fp, #36	; 0x24
 798:	mov	r2, #0
 79c:	movw	r1, #0
 7a0:	movt	r1, #0
 7a4:	mov	r0, r3
 7a8:	bl	0 <str_set_destroy>
 7ac:	nop	{0}
 7b0:	sub	sp, fp, #4
 7b4:	ldr	fp, [sp]
 7b8:	add	sp, sp, #4
 7bc:	pop	{pc}		; (ldr pc, [sp], #4)

000007c0 <__flatcc_fb_copy_scope>:
 7c0:	str	fp, [sp, #-8]!
 7c4:	str	lr, [sp, #4]
 7c8:	add	fp, sp, #4
 7cc:	sub	sp, sp, #24
 7d0:	str	r0, [fp, #-24]	; 0xffffffe8
 7d4:	str	r1, [fp, #-28]	; 0xffffffe4
 7d8:	ldr	r3, [fp, #-24]	; 0xffffffe8
 7dc:	ldr	r3, [r3, #24]
 7e0:	str	r3, [fp, #-8]
 7e4:	ldr	r3, [fp, #-24]	; 0xffffffe8
 7e8:	ldr	r3, [r3]
 7ec:	str	r3, [fp, #-12]
 7f0:	b	824 <__flatcc_fb_copy_scope+0x64>
 7f4:	ldr	r3, [fp, #-12]
 7f8:	ldr	r3, [r3, #4]
 7fc:	ldr	r3, [r3, #4]
 800:	str	r3, [fp, #-16]
 804:	ldr	r2, [fp, #-16]
 808:	ldr	r3, [fp, #-8]
 80c:	add	r3, r2, r3
 810:	add	r3, r3, #1
 814:	str	r3, [fp, #-8]
 818:	ldr	r3, [fp, #-12]
 81c:	ldr	r3, [r3]
 820:	str	r3, [fp, #-12]
 824:	ldr	r3, [fp, #-12]
 828:	cmp	r3, #0
 82c:	bne	7f4 <__flatcc_fb_copy_scope+0x34>
 830:	ldr	r3, [fp, #-8]
 834:	cmp	r3, #101	; 0x65
 838:	bls	850 <__flatcc_fb_copy_scope+0x90>
 83c:	ldr	r3, [fp, #-28]	; 0xffffffe4
 840:	mov	r2, #0
 844:	strb	r2, [r3]
 848:	mvn	r3, #0
 84c:	b	914 <__flatcc_fb_copy_scope+0x154>
 850:	ldr	r3, [fp, #-24]	; 0xffffffe8
 854:	ldr	r3, [r3, #24]
 858:	str	r3, [fp, #-8]
 85c:	ldr	r3, [fp, #-24]	; 0xffffffe8
 860:	ldr	r3, [r3, #20]
 864:	ldr	r2, [fp, #-8]
 868:	mov	r1, r3
 86c:	ldr	r0, [fp, #-28]	; 0xffffffe4
 870:	bl	0 <memcpy>
 874:	ldr	r3, [fp, #-24]	; 0xffffffe8
 878:	ldr	r3, [r3]
 87c:	str	r3, [fp, #-12]
 880:	b	8f0 <__flatcc_fb_copy_scope+0x130>
 884:	ldr	r3, [fp, #-12]
 888:	ldr	r3, [r3, #4]
 88c:	ldr	r3, [r3, #4]
 890:	str	r3, [fp, #-16]
 894:	ldr	r2, [fp, #-28]	; 0xffffffe4
 898:	ldr	r3, [fp, #-8]
 89c:	add	r0, r2, r3
 8a0:	ldr	r3, [fp, #-12]
 8a4:	ldr	r3, [r3, #4]
 8a8:	ldr	r3, [r3]
 8ac:	ldr	r2, [fp, #-16]
 8b0:	mov	r1, r3
 8b4:	bl	0 <memcpy>
 8b8:	ldr	r2, [fp, #-16]
 8bc:	ldr	r3, [fp, #-8]
 8c0:	add	r3, r2, r3
 8c4:	add	r3, r3, #1
 8c8:	str	r3, [fp, #-8]
 8cc:	ldr	r3, [fp, #-8]
 8d0:	sub	r3, r3, #1
 8d4:	ldr	r2, [fp, #-28]	; 0xffffffe4
 8d8:	add	r3, r2, r3
 8dc:	mov	r2, #95	; 0x5f
 8e0:	strb	r2, [r3]
 8e4:	ldr	r3, [fp, #-12]
 8e8:	ldr	r3, [r3]
 8ec:	str	r3, [fp, #-12]
 8f0:	ldr	r3, [fp, #-12]
 8f4:	cmp	r3, #0
 8f8:	bne	884 <__flatcc_fb_copy_scope+0xc4>
 8fc:	ldr	r2, [fp, #-28]	; 0xffffffe4
 900:	ldr	r3, [fp, #-8]
 904:	add	r3, r2, r3
 908:	mov	r2, #0
 90c:	strb	r2, [r3]
 910:	ldr	r3, [fp, #-8]
 914:	mov	r0, r3
 918:	sub	sp, fp, #4
 91c:	ldr	fp, [sp]
 920:	add	sp, sp, #4
 924:	pop	{pc}		; (ldr pc, [sp], #4)

00000928 <__flatcc_fb_scoped_symbol_name>:
 928:	str	fp, [sp, #-8]!
 92c:	str	lr, [sp, #4]
 930:	add	fp, sp, #4
 934:	sub	sp, sp, #24
 938:	str	r0, [fp, #-16]
 93c:	str	r1, [fp, #-20]	; 0xffffffec
 940:	str	r2, [fp, #-24]	; 0xffffffe8
 944:	ldr	r3, [fp, #-20]	; 0xffffffec
 948:	ldr	r3, [r3, #4]
 94c:	str	r3, [fp, #-8]
 950:	ldr	r3, [fp, #-24]	; 0xffffffe8
 954:	ldr	r3, [r3, #204]	; 0xcc
 958:	ldr	r2, [fp, #-16]
 95c:	cmp	r2, r3
 960:	beq	9bc <__flatcc_fb_scoped_symbol_name+0x94>
 964:	ldr	r3, [fp, #-24]	; 0xffffffe8
 968:	mov	r1, r3
 96c:	ldr	r0, [fp, #-16]
 970:	bl	7c0 <__flatcc_fb_copy_scope>
 974:	mov	r2, r0
 978:	ldr	r3, [fp, #-24]	; 0xffffffe8
 97c:	str	r2, [r3, #208]	; 0xd0
 980:	ldr	r3, [fp, #-24]	; 0xffffffe8
 984:	ldr	r3, [r3, #208]	; 0xd0
 988:	cmp	r3, #0
 98c:	bge	9bc <__flatcc_fb_scoped_symbol_name+0x94>
 990:	ldr	r3, [fp, #-24]	; 0xffffffe8
 994:	mov	r2, #0
 998:	str	r2, [r3, #208]	; 0xd0
 99c:	movw	r3, #0
 9a0:	movt	r3, #0
 9a4:	ldr	r3, [r3]
 9a8:	mov	r2, #28
 9ac:	mov	r1, #1
 9b0:	movw	r0, #0
 9b4:	movt	r0, #0
 9b8:	bl	0 <fwrite>
 9bc:	ldr	r3, [fp, #-8]
 9c0:	ldr	r2, [r3, #4]
 9c4:	ldr	r3, [fp, #-24]	; 0xffffffe8
 9c8:	str	r2, [r3, #212]	; 0xd4
 9cc:	ldr	r3, [fp, #-24]	; 0xffffffe8
 9d0:	ldr	r2, [r3, #208]	; 0xd0
 9d4:	ldr	r3, [fp, #-24]	; 0xffffffe8
 9d8:	ldr	r3, [r3, #212]	; 0xd4
 9dc:	add	r2, r2, r3
 9e0:	ldr	r3, [fp, #-24]	; 0xffffffe8
 9e4:	str	r2, [r3, #216]	; 0xd8
 9e8:	ldr	r3, [fp, #-24]	; 0xffffffe8
 9ec:	ldr	r3, [r3, #216]	; 0xd8
 9f0:	cmp	r3, #203	; 0xcb
 9f4:	ble	a50 <__flatcc_fb_scoped_symbol_name+0x128>
 9f8:	movw	r3, #0
 9fc:	movt	r3, #0
 a00:	ldr	r0, [r3]
 a04:	ldr	r3, [fp, #-24]	; 0xffffffe8
 a08:	ldr	r2, [r3, #212]	; 0xd4
 a0c:	ldr	r3, [fp, #-8]
 a10:	ldr	r3, [r3]
 a14:	movw	r1, #0
 a18:	movt	r1, #0
 a1c:	bl	0 <fprintf>
 a20:	ldr	r3, [fp, #-24]	; 0xffffffe8
 a24:	ldr	r3, [r3, #208]	; 0xd0
 a28:	rsb	r2, r3, #203	; 0xcb
 a2c:	ldr	r3, [fp, #-24]	; 0xffffffe8
 a30:	str	r2, [r3, #212]	; 0xd4
 a34:	ldr	r3, [fp, #-24]	; 0xffffffe8
 a38:	ldr	r2, [r3, #208]	; 0xd0
 a3c:	ldr	r3, [fp, #-24]	; 0xffffffe8
 a40:	ldr	r3, [r3, #212]	; 0xd4
 a44:	add	r2, r2, r3
 a48:	ldr	r3, [fp, #-24]	; 0xffffffe8
 a4c:	str	r2, [r3, #216]	; 0xd8
 a50:	ldr	r3, [fp, #-24]	; 0xffffffe8
 a54:	ldr	r2, [fp, #-24]	; 0xffffffe8
 a58:	ldr	r2, [r2, #208]	; 0xd0
 a5c:	add	r0, r3, r2
 a60:	ldr	r3, [fp, #-8]
 a64:	ldr	r1, [r3]
 a68:	ldr	r3, [fp, #-24]	; 0xffffffe8
 a6c:	ldr	r3, [r3, #212]	; 0xd4
 a70:	mov	r2, r3
 a74:	bl	0 <memcpy>
 a78:	ldr	r3, [fp, #-24]	; 0xffffffe8
 a7c:	ldr	r3, [r3, #216]	; 0xd8
 a80:	ldr	r2, [fp, #-24]	; 0xffffffe8
 a84:	mov	r1, #0
 a88:	strb	r1, [r2, r3]
 a8c:	nop	{0}
 a90:	sub	sp, fp, #4
 a94:	ldr	fp, [sp]
 a98:	add	sp, sp, #4
 a9c:	pop	{pc}		; (ldr pc, [sp], #4)

00000aa0 <__flatcc_fb_codegen_common_c>:
 aa0:	str	fp, [sp, #-8]!
 aa4:	str	lr, [sp, #4]
 aa8:	add	fp, sp, #4
 aac:	sub	sp, sp, #16
 ab0:	str	r0, [fp, #-16]
 ab4:	ldr	r3, [fp, #-16]
 ab8:	mov	r0, r3
 abc:	bl	0 <strlen>
 ac0:	mov	r3, r0
 ac4:	sub	r3, r3, #1
 ac8:	str	r3, [fp, #-12]
 acc:	mov	r3, #0
 ad0:	str	r3, [fp, #-8]
 ad4:	ldr	r3, [fp, #-16]
 ad8:	ldr	r3, [r3, #212]	; 0xd4
 adc:	ldr	r3, [r3, #144]	; 0x90
 ae0:	cmp	r3, #0
 ae4:	beq	b28 <__flatcc_fb_codegen_common_c+0x88>
 ae8:	ldr	r1, [fp, #-16]
 aec:	movw	r3, #0
 af0:	movt	r3, #0
 af4:	ldr	r2, [fp, #-12]
 af8:	ldr	r0, [fp, #-16]
 afc:	bl	13c <__flatcc_fb_open_output_file>
 b00:	mov	r3, r0
 b04:	cmp	r3, #0
 b08:	beq	b14 <__flatcc_fb_codegen_common_c+0x74>
 b0c:	mvn	r3, #0
 b10:	b	b88 <__flatcc_fb_codegen_common_c+0xe8>
 b14:	ldr	r0, [fp, #-16]
 b18:	bl	0 <__flatcc_fb_gen_common_c_header>
 b1c:	str	r0, [fp, #-8]
 b20:	ldr	r0, [fp, #-16]
 b24:	bl	25c <__flatcc_fb_close_output_file>
 b28:	ldr	r3, [fp, #-8]
 b2c:	cmp	r3, #0
 b30:	bne	b84 <__flatcc_fb_codegen_common_c+0xe4>
 b34:	ldr	r3, [fp, #-16]
 b38:	ldr	r3, [r3, #212]	; 0xd4
 b3c:	ldr	r3, [r3, #148]	; 0x94
 b40:	cmp	r3, #0
 b44:	beq	b84 <__flatcc_fb_codegen_common_c+0xe4>
 b48:	ldr	r1, [fp, #-16]
 b4c:	movw	r3, #0
 b50:	movt	r3, #0
 b54:	ldr	r2, [fp, #-12]
 b58:	ldr	r0, [fp, #-16]
 b5c:	bl	13c <__flatcc_fb_open_output_file>
 b60:	mov	r3, r0
 b64:	cmp	r3, #0
 b68:	beq	b74 <__flatcc_fb_codegen_common_c+0xd4>
 b6c:	mvn	r3, #0
 b70:	b	b88 <__flatcc_fb_codegen_common_c+0xe8>
 b74:	ldr	r0, [fp, #-16]
 b78:	bl	0 <__flatcc_fb_gen_common_c_builder_header>
 b7c:	ldr	r0, [fp, #-16]
 b80:	bl	25c <__flatcc_fb_close_output_file>
 b84:	ldr	r3, [fp, #-8]
 b88:	mov	r0, r3
 b8c:	sub	sp, fp, #4
 b90:	ldr	fp, [sp]
 b94:	add	sp, sp, #4
 b98:	pop	{pc}		; (ldr pc, [sp], #4)

00000b9c <__flatcc_fb_codegen_c>:
 b9c:	str	fp, [sp, #-8]!
 ba0:	str	lr, [sp, #4]
 ba4:	add	fp, sp, #4
 ba8:	sub	sp, sp, #16
 bac:	str	r0, [fp, #-16]
 bb0:	str	r1, [fp, #-20]	; 0xffffffec
 bb4:	mov	r3, #0
 bb8:	str	r3, [fp, #-8]
 bbc:	ldr	r3, [fp, #-16]
 bc0:	ldr	r2, [fp, #-20]	; 0xffffffec
 bc4:	str	r2, [r3, #208]	; 0xd0
 bc8:	ldr	r3, [fp, #-20]	; 0xffffffec
 bcc:	ldr	r3, [r3, #60]	; 0x3c
 bd0:	mov	r2, #0
 bd4:	mov	r1, #0
 bd8:	mov	r0, r3
 bdc:	bl	0 <fb_scope_table_find>
 be0:	mov	r2, r0
 be4:	ldr	r3, [fp, #-16]
 be8:	str	r2, [r3, #216]	; 0xd8
 bec:	ldr	r3, [fp, #-16]
 bf0:	ldr	r3, [r3, #208]	; 0xd0
 bf4:	ldr	r3, [r3, #160]	; 0xa0
 bf8:	mov	r0, r3
 bfc:	bl	0 <strlen>
 c00:	str	r0, [fp, #-12]
 c04:	ldr	r3, [fp, #-16]
 c08:	ldr	r3, [r3, #212]	; 0xd4
 c0c:	ldr	r3, [r3, #152]	; 0x98
 c10:	cmp	r3, #0
 c14:	beq	c70 <__flatcc_fb_codegen_c+0xd4>
 c18:	ldr	r3, [fp, #-16]
 c1c:	ldr	r3, [r3, #208]	; 0xd0
 c20:	ldr	r1, [r3, #160]	; 0xa0
 c24:	movw	r3, #0
 c28:	movt	r3, #0
 c2c:	ldr	r2, [fp, #-12]
 c30:	ldr	r0, [fp, #-16]
 c34:	bl	13c <__flatcc_fb_open_output_file>
 c38:	mov	r3, r0
 c3c:	cmp	r3, #0
 c40:	beq	c50 <__flatcc_fb_codegen_c+0xb4>
 c44:	mvn	r3, #0
 c48:	str	r3, [fp, #-8]
 c4c:	b	e50 <__flatcc_fb_codegen_c+0x2b4>
 c50:	ldr	r0, [fp, #-16]
 c54:	bl	0 <__flatcc_fb_gen_c_reader>
 c58:	str	r0, [fp, #-8]
 c5c:	ldr	r3, [fp, #-8]
 c60:	cmp	r3, #0
 c64:	bne	e24 <__flatcc_fb_codegen_c+0x288>
 c68:	ldr	r0, [fp, #-16]
 c6c:	bl	25c <__flatcc_fb_close_output_file>
 c70:	ldr	r3, [fp, #-16]
 c74:	ldr	r3, [r3, #212]	; 0xd4
 c78:	ldr	r3, [r3, #156]	; 0x9c
 c7c:	cmp	r3, #0
 c80:	beq	cdc <__flatcc_fb_codegen_c+0x140>
 c84:	ldr	r3, [fp, #-16]
 c88:	ldr	r3, [r3, #208]	; 0xd0
 c8c:	ldr	r1, [r3, #160]	; 0xa0
 c90:	movw	r3, #0
 c94:	movt	r3, #0
 c98:	ldr	r2, [fp, #-12]
 c9c:	ldr	r0, [fp, #-16]
 ca0:	bl	13c <__flatcc_fb_open_output_file>
 ca4:	mov	r3, r0
 ca8:	cmp	r3, #0
 cac:	beq	cbc <__flatcc_fb_codegen_c+0x120>
 cb0:	mvn	r3, #0
 cb4:	str	r3, [fp, #-8]
 cb8:	b	e50 <__flatcc_fb_codegen_c+0x2b4>
 cbc:	ldr	r0, [fp, #-16]
 cc0:	bl	0 <__flatcc_fb_gen_c_builder>
 cc4:	str	r0, [fp, #-8]
 cc8:	ldr	r3, [fp, #-8]
 ccc:	cmp	r3, #0
 cd0:	bne	e2c <__flatcc_fb_codegen_c+0x290>
 cd4:	ldr	r0, [fp, #-16]
 cd8:	bl	25c <__flatcc_fb_close_output_file>
 cdc:	ldr	r3, [fp, #-16]
 ce0:	ldr	r3, [r3, #212]	; 0xd4
 ce4:	ldr	r3, [r3, #160]	; 0xa0
 ce8:	cmp	r3, #0
 cec:	beq	d48 <__flatcc_fb_codegen_c+0x1ac>
 cf0:	ldr	r3, [fp, #-16]
 cf4:	ldr	r3, [r3, #208]	; 0xd0
 cf8:	ldr	r1, [r3, #160]	; 0xa0
 cfc:	movw	r3, #0
 d00:	movt	r3, #0
 d04:	ldr	r2, [fp, #-12]
 d08:	ldr	r0, [fp, #-16]
 d0c:	bl	13c <__flatcc_fb_open_output_file>
 d10:	mov	r3, r0
 d14:	cmp	r3, #0
 d18:	beq	d28 <__flatcc_fb_codegen_c+0x18c>
 d1c:	mvn	r3, #0
 d20:	str	r3, [fp, #-8]
 d24:	b	e50 <__flatcc_fb_codegen_c+0x2b4>
 d28:	ldr	r0, [fp, #-16]
 d2c:	bl	0 <__flatcc_fb_gen_c_verifier>
 d30:	str	r0, [fp, #-8]
 d34:	ldr	r3, [fp, #-8]
 d38:	cmp	r3, #0
 d3c:	bne	e34 <__flatcc_fb_codegen_c+0x298>
 d40:	ldr	r0, [fp, #-16]
 d44:	bl	25c <__flatcc_fb_close_output_file>
 d48:	ldr	r3, [fp, #-16]
 d4c:	ldr	r3, [r3, #212]	; 0xd4
 d50:	ldr	r3, [r3, #164]	; 0xa4
 d54:	cmp	r3, #0
 d58:	beq	db4 <__flatcc_fb_codegen_c+0x218>
 d5c:	ldr	r3, [fp, #-16]
 d60:	ldr	r3, [r3, #208]	; 0xd0
 d64:	ldr	r1, [r3, #160]	; 0xa0
 d68:	movw	r3, #0
 d6c:	movt	r3, #0
 d70:	ldr	r2, [fp, #-12]
 d74:	ldr	r0, [fp, #-16]
 d78:	bl	13c <__flatcc_fb_open_output_file>
 d7c:	mov	r3, r0
 d80:	cmp	r3, #0
 d84:	beq	d94 <__flatcc_fb_codegen_c+0x1f8>
 d88:	mvn	r3, #0
 d8c:	str	r3, [fp, #-8]
 d90:	b	e50 <__flatcc_fb_codegen_c+0x2b4>
 d94:	ldr	r0, [fp, #-16]
 d98:	bl	0 <__flatcc_fb_gen_c_json_parser>
 d9c:	str	r0, [fp, #-8]
 da0:	ldr	r3, [fp, #-8]
 da4:	cmp	r3, #0
 da8:	bne	e3c <__flatcc_fb_codegen_c+0x2a0>
 dac:	ldr	r0, [fp, #-16]
 db0:	bl	25c <__flatcc_fb_close_output_file>
 db4:	ldr	r3, [fp, #-16]
 db8:	ldr	r3, [r3, #212]	; 0xd4
 dbc:	ldr	r3, [r3, #168]	; 0xa8
 dc0:	cmp	r3, #0
 dc4:	beq	e44 <__flatcc_fb_codegen_c+0x2a8>
 dc8:	ldr	r3, [fp, #-16]
 dcc:	ldr	r3, [r3, #208]	; 0xd0
 dd0:	ldr	r1, [r3, #160]	; 0xa0
 dd4:	movw	r3, #0
 dd8:	movt	r3, #0
 ddc:	ldr	r2, [fp, #-12]
 de0:	ldr	r0, [fp, #-16]
 de4:	bl	13c <__flatcc_fb_open_output_file>
 de8:	mov	r3, r0
 dec:	cmp	r3, #0
 df0:	beq	e00 <__flatcc_fb_codegen_c+0x264>
 df4:	mvn	r3, #0
 df8:	str	r3, [fp, #-8]
 dfc:	b	e50 <__flatcc_fb_codegen_c+0x2b4>
 e00:	ldr	r0, [fp, #-16]
 e04:	bl	0 <__flatcc_fb_gen_c_json_printer>
 e08:	str	r0, [fp, #-8]
 e0c:	ldr	r3, [fp, #-8]
 e10:	cmp	r3, #0
 e14:	bne	e4c <__flatcc_fb_codegen_c+0x2b0>
 e18:	ldr	r0, [fp, #-16]
 e1c:	bl	25c <__flatcc_fb_close_output_file>
 e20:	b	e50 <__flatcc_fb_codegen_c+0x2b4>
 e24:	nop	{0}
 e28:	b	e50 <__flatcc_fb_codegen_c+0x2b4>
 e2c:	nop	{0}
 e30:	b	e50 <__flatcc_fb_codegen_c+0x2b4>
 e34:	nop	{0}
 e38:	b	e50 <__flatcc_fb_codegen_c+0x2b4>
 e3c:	nop	{0}
 e40:	b	e50 <__flatcc_fb_codegen_c+0x2b4>
 e44:	nop	{0}
 e48:	b	e50 <__flatcc_fb_codegen_c+0x2b4>
 e4c:	nop	{0}
 e50:	ldr	r3, [fp, #-8]
 e54:	mov	r0, r3
 e58:	sub	sp, fp, #4
 e5c:	ldr	fp, [sp]
 e60:	add	sp, sp, #4
 e64:	pop	{pc}		; (ldr pc, [sp], #4)
