
../compcert-repos/stcorp-coda-3a25f25/CMakeFiles/coda_static.dir/libcoda/coda-definition-parse.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <escaped_string_length>:
       0:	subs	ip, r0, #0
       4:	beq	bc <escaped_string_length+0xbc>
       8:	ldrb	r2, [ip]
       c:	cmp	r2, #0
      10:	beq	c4 <escaped_string_length+0xc4>
      14:	mov	r1, #1
      18:	push	{r4, r5, lr}
      1c:	mov	r3, #0
      20:	ldr	r5, [pc, #164]	; cc <escaped_string_length+0xcc>
      24:	mov	r4, r1
      28:	b	40 <escaped_string_length+0x40>
      2c:	add	r3, r3, #1
      30:	add	r1, r1, #1
      34:	ldrb	r2, [ip, r3]
      38:	cmp	r2, #0
      3c:	beq	b0 <escaped_string_length+0xb0>
      40:	cmp	r2, #92	; 0x5c
      44:	movne	r0, r1
      48:	bne	2c <escaped_string_length+0x2c>
      4c:	add	r2, r3, #1
      50:	ldrb	lr, [ip, r2]
      54:	sub	r0, lr, #92	; 0x5c
      58:	uxtb	r0, r0
      5c:	cmp	r0, #26
      60:	bhi	6c <escaped_string_length+0x6c>
      64:	ands	r0, r5, r4, lsl r0
      68:	bne	a4 <escaped_string_length+0xa4>
      6c:	sub	lr, lr, #48	; 0x30
      70:	cmp	lr, #9
      74:	bhi	b4 <escaped_string_length+0xb4>
      78:	add	r0, ip, r2
      7c:	ldrb	r0, [r0, #1]
      80:	sub	r0, r0, #48	; 0x30
      84:	cmp	r0, #9
      88:	bhi	a4 <escaped_string_length+0xa4>
      8c:	add	r2, r3, #2
      90:	add	r0, ip, r2
      94:	ldrb	r0, [r0, #1]
      98:	sub	r0, r0, #48	; 0x30
      9c:	cmp	r0, #9
      a0:	addls	r2, r3, #3
      a4:	mov	r3, r2
      a8:	mov	r0, r1
      ac:	b	2c <escaped_string_length+0x2c>
      b0:	pop	{r4, r5, pc}
      b4:	mvn	r0, #0
      b8:	pop	{r4, r5, pc}
      bc:	mov	r0, ip
      c0:	bx	lr
      c4:	mov	r0, r2
      c8:	bx	lr
      cc:	.word	0x05440661

000000d0 <decode_escaped_string>:
      d0:	subs	ip, r0, #0
      d4:	beq	2d8 <decode_escaped_string+0x208>
      d8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
      dc:	ldrb	lr, [ip]
      e0:	cmp	lr, #0
      e4:	beq	2e8 <decode_escaped_string+0x218>
      e8:	mov	r2, ip
      ec:	mov	r1, #1
      f0:	mov	r3, #0
      f4:	mov	sl, #92	; 0x5c
      f8:	mov	r9, #11
      fc:	mov	r8, #9
     100:	mov	r7, #13
     104:	mov	r6, #10
     108:	mov	fp, #27
     10c:	b	128 <decode_escaped_string+0x58>
     110:	add	r3, r3, #1
     114:	add	r1, r1, #1
     118:	ldrb	lr, [ip, r3]
     11c:	add	r2, r2, #1
     120:	cmp	lr, #0
     124:	beq	2c8 <decode_escaped_string+0x1f8>
     128:	cmp	lr, #92	; 0x5c
     12c:	movne	r0, r1
     130:	strbne	lr, [r2]
     134:	bne	110 <decode_escaped_string+0x40>
     138:	add	r0, r3, #1
     13c:	ldrb	lr, [ip, r0]
     140:	sub	r4, lr, #92	; 0x5c
     144:	cmp	r4, #26
     148:	ldrls	pc, [pc, r4, lsl #2]
     14c:	b	258 <decode_escaped_string+0x188>
     150:	.word	0x00000248
     154:	.word	0x00000258
     158:	.word	0x00000258
     15c:	.word	0x00000258
     160:	.word	0x00000258
     164:	.word	0x00000234
     168:	.word	0x00000220
     16c:	.word	0x00000258
     170:	.word	0x00000258
     174:	.word	0x00000210
     178:	.word	0x000001fc
     17c:	.word	0x00000258
     180:	.word	0x00000258
     184:	.word	0x00000258
     188:	.word	0x00000258
     18c:	.word	0x00000258
     190:	.word	0x00000258
     194:	.word	0x00000258
     198:	.word	0x000001ec
     19c:	.word	0x00000258
     1a0:	.word	0x00000258
     1a4:	.word	0x00000258
     1a8:	.word	0x000001dc
     1ac:	.word	0x00000258
     1b0:	.word	0x000001cc
     1b4:	.word	0x00000258
     1b8:	.word	0x000001bc
     1bc:	mov	r3, r0
     1c0:	strb	r9, [r2]
     1c4:	mov	r0, r1
     1c8:	b	110 <decode_escaped_string+0x40>
     1cc:	mov	r3, r0
     1d0:	strb	r8, [r2]
     1d4:	mov	r0, r1
     1d8:	b	110 <decode_escaped_string+0x40>
     1dc:	mov	r3, r0
     1e0:	strb	r7, [r2]
     1e4:	mov	r0, r1
     1e8:	b	110 <decode_escaped_string+0x40>
     1ec:	mov	r3, r0
     1f0:	strb	r6, [r2]
     1f4:	mov	r0, r1
     1f8:	b	110 <decode_escaped_string+0x40>
     1fc:	mov	r3, #12
     200:	strb	r3, [r2]
     204:	mov	r3, r0
     208:	mov	r0, r1
     20c:	b	110 <decode_escaped_string+0x40>
     210:	mov	r3, r0
     214:	strb	fp, [r2]
     218:	mov	r0, r1
     21c:	b	110 <decode_escaped_string+0x40>
     220:	mov	r3, #8
     224:	strb	r3, [r2]
     228:	mov	r3, r0
     22c:	mov	r0, r1
     230:	b	110 <decode_escaped_string+0x40>
     234:	mov	r3, #7
     238:	strb	r3, [r2]
     23c:	mov	r3, r0
     240:	mov	r0, r1
     244:	b	110 <decode_escaped_string+0x40>
     248:	mov	r3, r0
     24c:	strb	sl, [r2]
     250:	mov	r0, r1
     254:	b	110 <decode_escaped_string+0x40>
     258:	sub	lr, lr, #48	; 0x30
     25c:	uxtb	lr, lr
     260:	cmp	lr, #9
     264:	bhi	2e0 <decode_escaped_string+0x210>
     268:	add	r4, ip, r0
     26c:	strb	lr, [r2]
     270:	ldrb	r4, [r4, #1]
     274:	sub	r4, r4, #48	; 0x30
     278:	cmp	r4, #9
     27c:	bhi	2bc <decode_escaped_string+0x1ec>
     280:	add	r0, r3, #2
     284:	mov	r5, ip
     288:	ldrb	r4, [r5, r0]!
     28c:	sub	r4, r4, #48	; 0x30
     290:	add	lr, r4, lr, lsl #3
     294:	uxtb	lr, lr
     298:	strb	lr, [r2]
     29c:	ldrb	r4, [r5, #1]
     2a0:	sub	r4, r4, #48	; 0x30
     2a4:	cmp	r4, #9
     2a8:	addls	r0, r3, #3
     2ac:	ldrbls	r3, [ip, r0]
     2b0:	subls	r3, r3, #48	; 0x30
     2b4:	addls	lr, r3, lr, lsl #3
     2b8:	strbls	lr, [r2]
     2bc:	mov	r3, r0
     2c0:	mov	r0, r1
     2c4:	b	110 <decode_escaped_string+0x40>
     2c8:	mov	lr, r0
     2cc:	mov	r3, #0
     2d0:	strb	r3, [ip, lr]
     2d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
     2d8:	mov	r0, ip
     2dc:	bx	lr
     2e0:	mvn	r0, #0
     2e4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
     2e8:	mov	r0, lr
     2ec:	b	2cc <decode_escaped_string+0x1fc>

000002f0 <dummy_free_handler>:
     2f0:	bx	lr

000002f4 <dummy_init>:
     2f4:	mov	r0, #0
     2f8:	bx	lr

000002fc <bool_expression_init>:
     2fc:	ldr	r3, [r0]
     300:	ldr	r1, [pc, #24]	; 320 <bool_expression_init+0x24>
     304:	ldr	r2, [pc, #24]	; 324 <bool_expression_init+0x28>
     308:	mov	r0, #1
     30c:	str	r0, [r3, #32]
     310:	str	r1, [r3, #40]	; 0x28
     314:	str	r2, [r3, #36]	; 0x24
     318:	mov	r0, #0
     31c:	bx	lr
	...

00000328 <integer_expression_init>:
     328:	ldr	r3, [r0]
     32c:	ldr	r1, [pc, #24]	; 34c <integer_expression_init+0x24>
     330:	ldr	r2, [pc, #24]	; 350 <integer_expression_init+0x28>
     334:	mov	r0, #1
     338:	str	r0, [r3, #32]
     33c:	str	r1, [r3, #40]	; 0x28
     340:	str	r2, [r3, #36]	; 0x24
     344:	mov	r0, #0
     348:	bx	lr
	...

00000354 <integer_constant_or_expression_init>:
     354:	ldr	r3, [r0]
     358:	ldr	r1, [pc, #24]	; 378 <integer_constant_or_expression_init+0x24>
     35c:	ldr	r2, [pc, #24]	; 37c <integer_constant_or_expression_init+0x28>
     360:	mov	r0, #1
     364:	str	r0, [r3, #32]
     368:	str	r1, [r3, #40]	; 0x28
     36c:	str	r2, [r3, #36]	; 0x24
     370:	mov	r0, #0
     374:	bx	lr
	...

00000380 <optional_integer_constant_or_expression_init>:
     380:	ldr	r3, [r0]
     384:	ldr	r1, [pc, #24]	; 3a4 <optional_integer_constant_or_expression_init+0x24>
     388:	ldr	r2, [pc, #24]	; 3a8 <optional_integer_constant_or_expression_init+0x28>
     38c:	mov	r0, #1
     390:	str	r0, [r3, #32]
     394:	str	r1, [r3, #40]	; 0x28
     398:	str	r2, [r3, #36]	; 0x24
     39c:	mov	r0, #0
     3a0:	bx	lr
	...

000003ac <string_data_init>:
     3ac:	ldr	r3, [r0]
     3b0:	ldr	r2, [pc, #16]	; 3c8 <string_data_init+0x1c>
     3b4:	mov	r1, #1
     3b8:	str	r1, [r3, #32]
     3bc:	str	r2, [r3, #36]	; 0x24
     3c0:	mov	r0, #0
     3c4:	bx	lr
     3c8:	.word	0x00000000

000003cc <void_expression_init>:
     3cc:	ldr	r3, [r0]
     3d0:	ldr	r1, [pc, #24]	; 3f0 <void_expression_init+0x24>
     3d4:	ldr	r2, [pc, #24]	; 3f4 <void_expression_init+0x28>
     3d8:	mov	r0, #1
     3dc:	str	r0, [r3, #32]
     3e0:	str	r1, [r3, #40]	; 0x28
     3e4:	str	r2, [r3, #36]	; 0x24
     3e8:	mov	r0, #0
     3ec:	bx	lr
	...

000003f8 <cd_native_type_init>:
     3f8:	ldr	r3, [r0]
     3fc:	ldr	r2, [pc, #16]	; 414 <cd_native_type_init+0x1c>
     400:	mov	r1, #1
     404:	str	r1, [r3, #32]
     408:	str	r2, [r3, #36]	; 0x24
     40c:	mov	r0, #0
     410:	bx	lr
     414:	.word	0x00000000

00000418 <cd_product_class_finalise>:
     418:	mov	r3, #0
     41c:	str	r3, [r0, #24]
     420:	mov	r0, r3
     424:	bx	lr

00000428 <cd_scale_factor_set_type>:
     428:	ldr	r3, [r0]
     42c:	mov	r2, #0
     430:	mov	r0, r2
     434:	ldr	r1, [r3, #396]	; 0x18c
     438:	ldr	ip, [r3, #8]
     43c:	str	ip, [r1, #8]
     440:	str	r2, [r3, #8]
     444:	bx	lr

00000448 <handle_ziparchive_error>:
     448:	push	{r0, r1, r2, r3}
     44c:	ldr	r1, [pc, #48]	; 484 <handle_ziparchive_error+0x3c>
     450:	push	{lr}		; (str lr, [sp, #-4]!)
     454:	sub	sp, sp, #12
     458:	ldr	r0, [pc, #40]	; 488 <handle_ziparchive_error+0x40>
     45c:	bl	0 <coda_set_error>
     460:	add	r3, sp, #20
     464:	ldr	r0, [sp, #16]
     468:	mov	r1, r3
     46c:	str	r3, [sp, #4]
     470:	bl	0 <coda_add_error_message_vargs>
     474:	add	sp, sp, #12
     478:	pop	{lr}		; (ldr lr, [sp], #4)
     47c:	add	sp, sp, #16
     480:	bx	lr
     484:	.word	0x00000000
     488:	.word	0xfffffe70

0000048c <cd_scale_factor_init>:
     48c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
     490:	mov	r9, r0
     494:	ldr	r4, [r1]
     498:	cmp	r4, #0
     49c:	beq	688 <cd_scale_factor_init+0x1fc>
     4a0:	mov	r6, r1
     4a4:	ldr	r8, [pc, #536]	; 6c4 <cd_scale_factor_init+0x238>
     4a8:	mov	r7, r1
     4ac:	mov	r5, r1
     4b0:	mov	r0, r4
     4b4:	b	4c4 <cd_scale_factor_init+0x38>
     4b8:	ldr	r0, [r5, #8]!
     4bc:	cmp	r0, #0
     4c0:	beq	4e0 <cd_scale_factor_init+0x54>
     4c4:	mov	r1, r8
     4c8:	bl	0 <strcmp>
     4cc:	cmp	r0, #0
     4d0:	bne	4b8 <cd_scale_factor_init+0x2c>
     4d4:	ldr	r3, [r5, #4]
     4d8:	cmp	r3, #0
     4dc:	bne	64c <cd_scale_factor_init+0x1c0>
     4e0:	ldr	r5, [r9]
     4e4:	ldr	r3, [r5, #396]	; 0x18c
     4e8:	ldr	r2, [r3, #48]	; 0x30
     4ec:	cmp	r2, #0
     4f0:	beq	6b0 <cd_scale_factor_init+0x224>
     4f4:	ldr	r2, [r3, #44]	; 0x2c
     4f8:	mov	r3, #1
     4fc:	str	r2, [r5, #44]	; 0x2c
     500:	str	r3, [r5, #48]	; 0x30
     504:	mov	r0, r4
     508:	ldr	r8, [pc, #440]	; 6c8 <cd_scale_factor_init+0x23c>
     50c:	b	51c <cd_scale_factor_init+0x90>
     510:	ldr	r0, [r6, #8]!
     514:	cmp	r0, #0
     518:	beq	538 <cd_scale_factor_init+0xac>
     51c:	mov	r1, r8
     520:	bl	0 <strcmp>
     524:	cmp	r0, #0
     528:	bne	510 <cd_scale_factor_init+0x84>
     52c:	ldr	r3, [r6, #4]
     530:	cmp	r3, #0
     534:	bne	660 <cd_scale_factor_init+0x1d4>
     538:	ldr	r6, [pc, #396]	; 6cc <cd_scale_factor_init+0x240>
     53c:	b	54c <cd_scale_factor_init+0xc0>
     540:	ldr	r4, [r7, #8]!
     544:	cmp	r4, #0
     548:	beq	56c <cd_scale_factor_init+0xe0>
     54c:	mov	r0, r4
     550:	mov	r1, r6
     554:	bl	0 <strcmp>
     558:	cmp	r0, #0
     55c:	bne	540 <cd_scale_factor_init+0xb4>
     560:	ldr	r3, [r7, #4]
     564:	cmp	r3, #0
     568:	bne	674 <cd_scale_factor_init+0x1e8>
     56c:	ldr	r3, [pc, #348]	; 6d0 <cd_scale_factor_init+0x244>
     570:	ldr	ip, [pc, #348]	; 6d4 <cd_scale_factor_init+0x248>
     574:	ldr	r0, [pc, #348]	; 6d8 <cd_scale_factor_init+0x24c>
     578:	ldr	r1, [pc, #348]	; 6dc <cd_scale_factor_init+0x250>
     57c:	ldr	r2, [pc, #348]	; 6e0 <cd_scale_factor_init+0x254>
     580:	str	ip, [r5, #40]	; 0x28
     584:	str	r0, [r5, #56]	; 0x38
     588:	str	r3, [r5, #228]	; 0xe4
     58c:	str	r3, [r5, #232]	; 0xe8
     590:	str	r3, [r5, #236]	; 0xec
     594:	str	r3, [r5, #224]	; 0xe0
     598:	str	r3, [r5, #260]	; 0x104
     59c:	str	r3, [r5, #292]	; 0x124
     5a0:	str	r3, [r5, #304]	; 0x130
     5a4:	str	r3, [r5, #332]	; 0x14c
     5a8:	str	r3, [r5, #360]	; 0x168
     5ac:	str	r3, [r5, #364]	; 0x16c
     5b0:	str	r3, [r5, #372]	; 0x174
     5b4:	str	r3, [r5, #376]	; 0x178
     5b8:	str	r3, [r5, #380]	; 0x17c
     5bc:	str	r3, [r5, #384]	; 0x180
     5c0:	str	r3, [r5, #392]	; 0x188
     5c4:	str	r1, [r5, #60]	; 0x3c
     5c8:	str	r2, [r5, #64]	; 0x40
     5cc:	ldr	r4, [pc, #272]	; 6e4 <cd_scale_factor_init+0x258>
     5d0:	ldr	lr, [pc, #272]	; 6e8 <cd_scale_factor_init+0x25c>
     5d4:	ldr	ip, [pc, #272]	; 6ec <cd_scale_factor_init+0x260>
     5d8:	ldr	r0, [pc, #272]	; 6f0 <cd_scale_factor_init+0x264>
     5dc:	ldr	r1, [pc, #272]	; 6f4 <cd_scale_factor_init+0x268>
     5e0:	ldr	r2, [pc, #272]	; 6f8 <cd_scale_factor_init+0x26c>
     5e4:	ldr	r3, [pc, #272]	; 6fc <cd_scale_factor_init+0x270>
     5e8:	str	r4, [r5, #88]	; 0x58
     5ec:	str	lr, [r5, #120]	; 0x78
     5f0:	str	ip, [r5, #132]	; 0x84
     5f4:	str	r0, [r5, #160]	; 0xa0
     5f8:	str	r1, [r5, #188]	; 0xbc
     5fc:	str	r2, [r5, #192]	; 0xc0
     600:	str	r3, [r5, #200]	; 0xc8
     604:	ldr	r6, [pc, #244]	; 700 <cd_scale_factor_init+0x274>
     608:	ldr	r4, [pc, #244]	; 704 <cd_scale_factor_init+0x278>
     60c:	ldr	lr, [pc, #244]	; 708 <cd_scale_factor_init+0x27c>
     610:	ldr	ip, [pc, #244]	; 70c <cd_scale_factor_init+0x280>
     614:	ldr	r0, [pc, #244]	; 710 <cd_scale_factor_init+0x284>
     618:	ldr	r1, [pc, #244]	; 714 <cd_scale_factor_init+0x288>
     61c:	ldr	r2, [pc, #244]	; 718 <cd_scale_factor_init+0x28c>
     620:	ldr	r3, [pc, #244]	; 71c <cd_scale_factor_init+0x290>
     624:	str	r0, [r5, #220]	; 0xdc
     628:	str	r6, [r5, #52]	; 0x34
     62c:	str	r4, [r5, #204]	; 0xcc
     630:	str	lr, [r5, #208]	; 0xd0
     634:	str	ip, [r5, #212]	; 0xd4
     638:	str	r1, [r5, #36]	; 0x24
     63c:	mov	r0, #0
     640:	str	r2, [r5, #96]	; 0x60
     644:	str	r3, [r5, #268]	; 0x10c
     648:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
     64c:	ldr	r1, [pc, #204]	; 720 <cd_scale_factor_init+0x294>
     650:	ldr	r0, [pc, #204]	; 724 <cd_scale_factor_init+0x298>
     654:	bl	0 <coda_set_error>
     658:	mvn	r0, #0
     65c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
     660:	ldr	r1, [pc, #192]	; 728 <cd_scale_factor_init+0x29c>
     664:	ldr	r0, [pc, #184]	; 724 <cd_scale_factor_init+0x298>
     668:	bl	0 <coda_set_error>
     66c:	mvn	r0, #0
     670:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
     674:	ldr	r1, [pc, #176]	; 72c <cd_scale_factor_init+0x2a0>
     678:	ldr	r0, [pc, #164]	; 724 <cd_scale_factor_init+0x298>
     67c:	bl	0 <coda_set_error>
     680:	mvn	r0, #0
     684:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
     688:	ldr	r5, [r0]
     68c:	ldr	r3, [r5, #396]	; 0x18c
     690:	ldr	r2, [r3, #48]	; 0x30
     694:	cmp	r2, #0
     698:	beq	6b0 <cd_scale_factor_init+0x224>
     69c:	ldr	r2, [r3, #44]	; 0x2c
     6a0:	mov	r3, #1
     6a4:	str	r2, [r5, #44]	; 0x2c
     6a8:	str	r3, [r5, #48]	; 0x30
     6ac:	b	56c <cd_scale_factor_init+0xe0>
     6b0:	ldr	r3, [pc, #120]	; 730 <cd_scale_factor_init+0x2a4>
     6b4:	ldr	r2, [pc, #120]	; 734 <cd_scale_factor_init+0x2a8>
     6b8:	ldr	r1, [pc, #120]	; 738 <cd_scale_factor_init+0x2ac>
     6bc:	ldr	r0, [pc, #120]	; 73c <cd_scale_factor_init+0x2b0>
     6c0:	bl	0 <__assert_fail>
     6c4:	.word	0x0000002c
     6c8:	.word	0x000000d8
     6cc:	.word	0x00000110
	...
     720:	.word	0x00000034
     724:	.word	0xfffffe70
     728:	.word	0x000000e0
     72c:	.word	0x00000118
     730:	.word	0x00000000
     734:	.word	0x00000caa
     738:	.word	0x00000064
     73c:	.word	0x000000b8

00000740 <cd_native_type_finalise>:
     740:	push	{r4, r5, r6, lr}
     744:	ldr	r5, [r0]
     748:	ldr	r4, [r5, #12]
     74c:	cmp	r4, #0
     750:	beq	908 <cd_native_type_finalise+0x1c8>
     754:	ldr	r1, [pc, #480]	; 93c <cd_native_type_finalise+0x1fc>
     758:	mov	r0, r4
     75c:	bl	0 <strcmp>
     760:	cmp	r0, #0
     764:	beq	878 <cd_native_type_finalise+0x138>
     768:	ldr	r1, [pc, #464]	; 940 <cd_native_type_finalise+0x200>
     76c:	mov	r0, r4
     770:	bl	0 <strcmp>
     774:	cmp	r0, #0
     778:	beq	868 <cd_native_type_finalise+0x128>
     77c:	ldr	r1, [pc, #448]	; 944 <cd_native_type_finalise+0x204>
     780:	mov	r0, r4
     784:	bl	0 <strcmp>
     788:	cmp	r0, #0
     78c:	beq	898 <cd_native_type_finalise+0x158>
     790:	ldr	r1, [pc, #432]	; 948 <cd_native_type_finalise+0x208>
     794:	mov	r0, r4
     798:	bl	0 <strcmp>
     79c:	cmp	r0, #0
     7a0:	beq	888 <cd_native_type_finalise+0x148>
     7a4:	ldr	r1, [pc, #416]	; 94c <cd_native_type_finalise+0x20c>
     7a8:	mov	r0, r4
     7ac:	bl	0 <strcmp>
     7b0:	cmp	r0, #0
     7b4:	beq	8a8 <cd_native_type_finalise+0x168>
     7b8:	ldr	r1, [pc, #400]	; 950 <cd_native_type_finalise+0x210>
     7bc:	mov	r0, r4
     7c0:	bl	0 <strcmp>
     7c4:	cmp	r0, #0
     7c8:	beq	8c8 <cd_native_type_finalise+0x188>
     7cc:	ldr	r1, [pc, #384]	; 954 <cd_native_type_finalise+0x214>
     7d0:	mov	r0, r4
     7d4:	bl	0 <strcmp>
     7d8:	cmp	r0, #0
     7dc:	beq	8b8 <cd_native_type_finalise+0x178>
     7e0:	ldr	r1, [pc, #368]	; 958 <cd_native_type_finalise+0x218>
     7e4:	mov	r0, r4
     7e8:	bl	0 <strcmp>
     7ec:	cmp	r0, #0
     7f0:	beq	8d8 <cd_native_type_finalise+0x198>
     7f4:	ldr	r1, [pc, #352]	; 95c <cd_native_type_finalise+0x21c>
     7f8:	mov	r0, r4
     7fc:	bl	0 <strcmp>
     800:	cmp	r0, #0
     804:	beq	8e8 <cd_native_type_finalise+0x1a8>
     808:	ldr	r1, [pc, #336]	; 960 <cd_native_type_finalise+0x220>
     80c:	mov	r0, r4
     810:	bl	0 <strcmp>
     814:	cmp	r0, #0
     818:	beq	8f8 <cd_native_type_finalise+0x1b8>
     81c:	ldr	r1, [pc, #320]	; 964 <cd_native_type_finalise+0x224>
     820:	mov	r0, r4
     824:	bl	0 <strcmp>
     828:	cmp	r0, #0
     82c:	beq	91c <cd_native_type_finalise+0x1dc>
     830:	ldr	r1, [pc, #304]	; 968 <cd_native_type_finalise+0x228>
     834:	mov	r0, r4
     838:	bl	0 <strcmp>
     83c:	cmp	r0, #0
     840:	beq	92c <cd_native_type_finalise+0x1ec>
     844:	mov	r0, r4
     848:	ldr	r1, [pc, #284]	; 96c <cd_native_type_finalise+0x22c>
     84c:	bl	0 <strcmp>
     850:	cmp	r0, #0
     854:	bne	908 <cd_native_type_finalise+0x1c8>
     858:	mov	r2, #12
     85c:	mov	r3, #0
     860:	strd	r2, [r5, #16]
     864:	pop	{r4, r5, r6, pc}
     868:	mov	r2, #2
     86c:	mov	r3, #0
     870:	strd	r2, [r5, #16]
     874:	pop	{r4, r5, r6, pc}
     878:	mov	r2, #0
     87c:	mov	r3, #0
     880:	strd	r2, [r5, #16]
     884:	pop	{r4, r5, r6, pc}
     888:	mov	r2, #6
     88c:	mov	r3, #0
     890:	strd	r2, [r5, #16]
     894:	pop	{r4, r5, r6, pc}
     898:	mov	r2, #4
     89c:	mov	r3, #0
     8a0:	strd	r2, [r5, #16]
     8a4:	pop	{r4, r5, r6, pc}
     8a8:	mov	r2, #1
     8ac:	mov	r3, #0
     8b0:	strd	r2, [r5, #16]
     8b4:	pop	{r4, r5, r6, pc}
     8b8:	mov	r2, #5
     8bc:	mov	r3, #0
     8c0:	strd	r2, [r5, #16]
     8c4:	pop	{r4, r5, r6, pc}
     8c8:	mov	r2, #3
     8cc:	mov	r3, #0
     8d0:	strd	r2, [r5, #16]
     8d4:	pop	{r4, r5, r6, pc}
     8d8:	mov	r2, #7
     8dc:	mov	r3, #0
     8e0:	strd	r2, [r5, #16]
     8e4:	pop	{r4, r5, r6, pc}
     8e8:	mov	r2, #8
     8ec:	mov	r3, #0
     8f0:	strd	r2, [r5, #16]
     8f4:	pop	{r4, r5, r6, pc}
     8f8:	mov	r2, #9
     8fc:	mov	r3, #0
     900:	strd	r2, [r5, #16]
     904:	pop	{r4, r5, r6, pc}
     908:	ldr	r1, [pc, #96]	; 970 <cd_native_type_finalise+0x230>
     90c:	ldr	r0, [pc, #96]	; 974 <cd_native_type_finalise+0x234>
     910:	bl	0 <coda_set_error>
     914:	mvn	r0, #0
     918:	pop	{r4, r5, r6, pc}
     91c:	mov	r2, #10
     920:	mov	r3, #0
     924:	strd	r2, [r5, #16]
     928:	pop	{r4, r5, r6, pc}
     92c:	mov	r2, #11
     930:	mov	r3, #0
     934:	strd	r2, [r5, #16]
     938:	pop	{r4, r5, r6, pc}
     93c:	.word	0x0000015c
     940:	.word	0x00000164
     944:	.word	0x0000016c
     948:	.word	0x00000174
     94c:	.word	0x0000017c
     950:	.word	0x00000184
     954:	.word	0x0000018c
     958:	.word	0x00000194
     95c:	.word	0x0000019c
     960:	.word	0x000001a4
     964:	.word	0x000001ac
     968:	.word	0x000001b4
     96c:	.word	0x000001bc
     970:	.word	0x00000148
     974:	.word	0xfffffe70

00000978 <cd_product_definition_finalise>:
     978:	ldr	r3, [r0]
     97c:	ldr	r0, [r3, #8]
     980:	b	0 <coda_product_definition_validate>

00000984 <cd_product_definition_add_product_variable>:
     984:	ldr	r3, [r0]
     988:	push	{r4, lr}
     98c:	mov	r4, r0
     990:	ldr	r2, [r3, #396]	; 0x18c
     994:	ldr	r1, [r3, #8]
     998:	ldr	r0, [r2, #8]
     99c:	bl	0 <coda_product_definition_add_product_variable>
     9a0:	cmp	r0, #0
     9a4:	mvnne	r0, #0
     9a8:	ldreq	r3, [r4]
     9ac:	streq	r0, [r3, #8]
     9b0:	pop	{r4, pc}

000009b4 <cd_product_variable_finalise>:
     9b4:	ldr	r3, [r0]
     9b8:	ldr	r0, [r3, #8]
     9bc:	b	0 <coda_product_variable_validate>

000009c0 <cd_product_variable_set_init_expression>:
     9c0:	ldr	r3, [r0]
     9c4:	push	{r4, lr}
     9c8:	mov	r4, r0
     9cc:	ldr	r2, [r3, #396]	; 0x18c
     9d0:	ldr	r1, [r3, #8]
     9d4:	ldr	r0, [r2, #8]
     9d8:	bl	0 <coda_product_variable_set_init_expression>
     9dc:	cmp	r0, #0
     9e0:	mvnne	r0, #0
     9e4:	ldreq	r3, [r4]
     9e8:	streq	r0, [r3, #8]
     9ec:	pop	{r4, pc}

000009f0 <cd_product_variable_set_size_expression>:
     9f0:	ldr	r3, [r0]
     9f4:	push	{r4, lr}
     9f8:	mov	r4, r0
     9fc:	ldr	r2, [r3, #396]	; 0x18c
     a00:	ldr	r1, [r3, #8]
     a04:	ldr	r0, [r2, #8]
     a08:	bl	0 <coda_product_variable_set_size_expression>
     a0c:	cmp	r0, #0
     a10:	mvnne	r0, #0
     a14:	ldreq	r3, [r4]
     a18:	streq	r0, [r3, #8]
     a1c:	pop	{r4, pc}

00000a20 <cd_product_definition_set_root_type>:
     a20:	ldr	r3, [r0]
     a24:	push	{r4, lr}
     a28:	ldr	r2, [r3, #396]	; 0x18c
     a2c:	ldr	r1, [r3, #8]
     a30:	ldr	r0, [r2, #8]
     a34:	bl	0 <coda_product_definition_set_root_type>
     a38:	adds	r0, r0, #0
     a3c:	mvnne	r0, #0
     a40:	pop	{r4, pc}

00000a44 <cd_record_add_field>:
     a44:	ldr	r3, [r0]
     a48:	push	{r4, lr}
     a4c:	mov	r4, r0
     a50:	ldr	r2, [r3, #396]	; 0x18c
     a54:	ldr	r1, [r3, #8]
     a58:	ldr	r0, [r2, #8]
     a5c:	bl	0 <coda_type_record_add_field>
     a60:	cmp	r0, #0
     a64:	mvnne	r0, #0
     a68:	ldreq	r3, [r4]
     a6c:	streq	r0, [r3, #8]
     a70:	pop	{r4, pc}

00000a74 <xml_root_set_field>:
     a74:	b	a44 <cd_record_add_field>

00000a78 <cd_field_finalise>:
     a78:	ldr	r3, [r0]
     a7c:	ldr	r0, [r3, #8]
     a80:	b	0 <coda_type_record_field_validate>

00000a84 <cd_field_set_bit_offset>:
     a84:	ldr	r3, [r0]
     a88:	push	{r4, lr}
     a8c:	mov	r4, r0
     a90:	ldr	r2, [r3, #396]	; 0x18c
     a94:	ldr	r1, [r3, #8]
     a98:	ldr	r0, [r2, #8]
     a9c:	bl	0 <coda_type_record_field_set_bit_offset_expression>
     aa0:	cmp	r0, #0
     aa4:	mvnne	r0, #0
     aa8:	ldreq	r3, [r4]
     aac:	streq	r0, [r3, #8]
     ab0:	pop	{r4, pc}

00000ab4 <cd_field_set_available>:
     ab4:	ldr	r3, [r0]
     ab8:	push	{r4, lr}
     abc:	mov	r4, r0
     ac0:	ldr	r2, [r3, #396]	; 0x18c
     ac4:	ldr	r1, [r3, #8]
     ac8:	ldr	r0, [r2, #8]
     acc:	bl	0 <coda_type_record_field_set_available_expression>
     ad0:	cmp	r0, #0
     ad4:	mvnne	r0, #0
     ad8:	ldreq	r3, [r4]
     adc:	streq	r0, [r3, #8]
     ae0:	pop	{r4, pc}

00000ae4 <cd_field_set_optional>:
     ae4:	ldr	r3, [r0]
     ae8:	ldr	r3, [r3, #396]	; 0x18c
     aec:	ldr	r0, [r3, #8]
     af0:	b	0 <coda_type_record_field_set_optional>

00000af4 <cd_union_add_field>:
     af4:	ldr	r3, [r0]
     af8:	push	{r4, lr}
     afc:	mov	r4, r0
     b00:	ldr	r0, [r3, #8]
     b04:	bl	0 <coda_type_record_field_set_optional>
     b08:	ldr	r3, [r4]
     b0c:	ldr	r2, [r3, #396]	; 0x18c
     b10:	ldr	r1, [r3, #8]
     b14:	ldr	r0, [r2, #8]
     b18:	bl	0 <coda_type_record_add_field>
     b1c:	cmp	r0, #0
     b20:	mvnne	r0, #0
     b24:	ldreq	r3, [r4]
     b28:	streq	r0, [r3, #8]
     b2c:	pop	{r4, pc}

00000b30 <cd_field_set_hidden>:
     b30:	ldr	r3, [r0]
     b34:	ldr	r3, [r3, #396]	; 0x18c
     b38:	ldr	r0, [r3, #8]
     b3c:	b	0 <coda_type_record_field_set_hidden>

00000b40 <cd_field_set_type>:
     b40:	ldr	r3, [r0]
     b44:	ldr	r2, [r3, #396]	; 0x18c
     b48:	ldr	r1, [r3, #8]
     b4c:	ldr	r0, [r2, #8]
     b50:	b	0 <coda_type_record_field_set_type>

00000b54 <type_set_description>:
     b54:	ldr	r3, [r0]
     b58:	ldr	r1, [r3, #12]
     b5c:	ldr	r3, [r3, #396]	; 0x18c
     b60:	cmp	r1, #0
     b64:	beq	b70 <type_set_description+0x1c>
     b68:	ldr	r0, [r3, #8]
     b6c:	b	0 <coda_type_set_description>
     b70:	ldr	r1, [pc, #4]	; b7c <type_set_description+0x28>
     b74:	ldr	r0, [r3, #8]
     b78:	b	0 <coda_type_set_description>
     b7c:	.word	0x000001c4

00000b80 <string_data_finalise>:
     b80:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     b84:	ldr	r3, [r0]
     b88:	ldr	sl, [r3, #12]
     b8c:	cmp	sl, #0
     b90:	beq	c24 <string_data_finalise+0xa4>
     b94:	mov	r7, sl
     b98:	mov	r6, #1
     b9c:	mov	r5, #0
     ba0:	mov	fp, #4
     ba4:	b	bb0 <string_data_finalise+0x30>
     ba8:	add	r6, r6, #1
     bac:	add	r7, r7, #1
     bb0:	ldrb	r4, [sl, r5]
     bb4:	sub	r2, r6, #1
     bb8:	cmp	r4, #0
     bbc:	beq	c20 <string_data_finalise+0xa0>
     bc0:	cmp	r4, #38	; 0x26
     bc4:	addne	r5, r5, #1
     bc8:	strbne	r4, [r7]
     bcc:	bne	ba8 <string_data_finalise+0x28>
     bd0:	add	r9, r5, #1
     bd4:	add	r8, sl, r9
     bd8:	mov	r0, r8
     bdc:	mov	r2, fp
     be0:	ldr	r1, [pc, #176]	; c98 <string_data_finalise+0x118>
     be4:	bl	0 <strncmp>
     be8:	cmp	r0, #0
     bec:	strbeq	r4, [r7]
     bf0:	addeq	r5, r5, #5
     bf4:	beq	ba8 <string_data_finalise+0x28>
     bf8:	mov	r2, #5
     bfc:	ldr	r1, [pc, #152]	; c9c <string_data_finalise+0x11c>
     c00:	mov	r0, r8
     c04:	bl	0 <strncmp>
     c08:	cmp	r0, #0
     c0c:	bne	c2c <string_data_finalise+0xac>
     c10:	mov	r3, #39	; 0x27
     c14:	strb	r3, [r7]
     c18:	add	r5, r5, #6
     c1c:	b	ba8 <string_data_finalise+0x28>
     c20:	strb	r4, [sl, r2]
     c24:	mov	r0, #0
     c28:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
     c2c:	mov	r2, #3
     c30:	ldr	r1, [pc, #104]	; ca0 <string_data_finalise+0x120>
     c34:	mov	r0, r8
     c38:	bl	0 <strncmp>
     c3c:	cmp	r0, #0
     c40:	bne	c54 <string_data_finalise+0xd4>
     c44:	mov	r3, #60	; 0x3c
     c48:	strb	r3, [r7]
     c4c:	add	r5, r5, #4
     c50:	b	ba8 <string_data_finalise+0x28>
     c54:	mov	r2, #3
     c58:	ldr	r1, [pc, #68]	; ca4 <string_data_finalise+0x124>
     c5c:	mov	r0, r8
     c60:	bl	0 <strncmp>
     c64:	cmp	r0, #0
     c68:	beq	c44 <string_data_finalise+0xc4>
     c6c:	mov	r0, r8
     c70:	mov	r2, #5
     c74:	ldr	r1, [pc, #44]	; ca8 <string_data_finalise+0x128>
     c78:	bl	0 <strncmp>
     c7c:	cmp	r0, #0
     c80:	moveq	r3, #34	; 0x22
     c84:	strbeq	r3, [r7]
     c88:	addeq	r5, r5, #6
     c8c:	strbne	r4, [r7]
     c90:	movne	r5, r9
     c94:	b	ba8 <string_data_finalise+0x28>
     c98:	.word	0x000001c8
     c9c:	.word	0x000001d0
     ca0:	.word	0x000001d8
     ca4:	.word	0x000001dc
     ca8:	.word	0x000001e0

00000cac <data_dictionary_add_product_class>:
     cac:	ldr	r3, [r0]
     cb0:	push	{r4, lr}
     cb4:	mov	r4, r0
     cb8:	ldr	r0, [r3, #8]
     cbc:	bl	0 <coda_data_dictionary_add_product_class>
     cc0:	cmp	r0, #0
     cc4:	mvnne	r0, #0
     cc8:	ldreq	r3, [r4]
     ccc:	streq	r0, [r3, #8]
     cd0:	pop	{r4, pc}

00000cd4 <cd_product_class_add_product_type>:
     cd4:	ldr	r3, [r0]
     cd8:	push	{r4, lr}
     cdc:	mov	r4, r0
     ce0:	ldr	r2, [r3, #396]	; 0x18c
     ce4:	ldr	r1, [r3, #8]
     ce8:	ldr	r0, [r2, #8]
     cec:	bl	0 <coda_product_class_add_product_type>
     cf0:	cmp	r0, #0
     cf4:	mvnne	r0, #0
     cf8:	ldreq	r3, [r4]
     cfc:	streq	r0, [r3, #8]
     d00:	pop	{r4, pc}

00000d04 <cd_product_type_add_product_definition>:
     d04:	ldr	r3, [r0]
     d08:	push	{r4, lr}
     d0c:	mov	r4, r0
     d10:	ldr	r2, [r3, #396]	; 0x18c
     d14:	ldr	r1, [r3, #8]
     d18:	ldr	r0, [r2, #8]
     d1c:	bl	0 <coda_product_type_add_product_definition>
     d20:	cmp	r0, #0
     d24:	mvnne	r0, #0
     d28:	ldreq	r3, [r4]
     d2c:	streq	r0, [r3, #8]
     d30:	pop	{r4, pc}

00000d34 <cd_product_definition_add_detection_rule>:
     d34:	ldr	r3, [r0]
     d38:	push	{r4, lr}
     d3c:	mov	r4, r0
     d40:	ldr	r2, [r3, #396]	; 0x18c
     d44:	ldr	r1, [r3, #8]
     d48:	ldr	r0, [r2, #8]
     d4c:	bl	0 <coda_product_definition_add_detection_rule>
     d50:	cmp	r0, #0
     d54:	mvnne	r0, #0
     d58:	ldreq	r3, [r4]
     d5c:	streq	r0, [r3, #8]
     d60:	pop	{r4, pc}

00000d64 <cd_detection_rule_init>:
     d64:	push	{r4, r5, r6, lr}
     d68:	mov	r5, r0
     d6c:	ldr	r4, [r0]
     d70:	ldr	r3, [pc, #92]	; dd4 <cd_detection_rule_init+0x70>
     d74:	str	r3, [r4, #40]	; 0x28
     d78:	bl	0 <coda_detection_rule_new>
     d7c:	ldr	r3, [r5]
     d80:	str	r0, [r4, #8]
     d84:	ldr	r2, [r3, #8]
     d88:	cmp	r2, #0
     d8c:	beq	dcc <cd_detection_rule_init+0x68>
     d90:	ldr	r2, [pc, #64]	; dd8 <cd_detection_rule_init+0x74>
     d94:	ldr	lr, [pc, #64]	; ddc <cd_detection_rule_init+0x78>
     d98:	ldr	ip, [pc, #64]	; de0 <cd_detection_rule_init+0x7c>
     d9c:	ldr	r0, [pc, #64]	; de4 <cd_detection_rule_init+0x80>
     da0:	ldr	r1, [pc, #64]	; de8 <cd_detection_rule_init+0x84>
     da4:	str	r0, [r3, #152]	; 0x98
     da8:	str	lr, [r3, #144]	; 0x90
     dac:	str	r2, [r3, #316]	; 0x13c
     db0:	str	r2, [r3, #320]	; 0x140
     db4:	str	r2, [r3, #324]	; 0x144
     db8:	str	r2, [r3, #328]	; 0x148
     dbc:	str	ip, [r3, #148]	; 0x94
     dc0:	str	r1, [r3, #156]	; 0x9c
     dc4:	mov	r0, #0
     dc8:	pop	{r4, r5, r6, pc}
     dcc:	mvn	r0, #0
     dd0:	pop	{r4, r5, r6, pc}
	...

00000dec <cd_match_expression_init>:
     dec:	push	{r4, r5, r6, lr}
     df0:	mov	r6, r0
     df4:	ldr	r0, [r1]
     df8:	cmp	r0, #0
     dfc:	beq	e2c <cd_match_expression_init+0x40>
     e00:	ldr	r5, [pc, #96]	; e68 <cd_match_expression_init+0x7c>
     e04:	mov	r4, r1
     e08:	b	e18 <cd_match_expression_init+0x2c>
     e0c:	ldr	r0, [r4, #8]!
     e10:	cmp	r0, #0
     e14:	beq	e2c <cd_match_expression_init+0x40>
     e18:	mov	r1, r5
     e1c:	bl	0 <strcmp>
     e20:	cmp	r0, #0
     e24:	bne	e0c <cd_match_expression_init+0x20>
     e28:	ldr	r0, [r4, #4]
     e2c:	ldr	r4, [r6]
     e30:	ldr	r3, [pc, #52]	; e6c <cd_match_expression_init+0x80>
     e34:	str	r3, [r4, #40]	; 0x28
     e38:	bl	0 <coda_detection_rule_entry_new>
     e3c:	ldr	r3, [r6]
     e40:	str	r0, [r4, #8]
     e44:	ldr	r2, [r3, #8]
     e48:	cmp	r2, #0
     e4c:	movne	r2, #1
     e50:	ldrne	r1, [pc, #24]	; e70 <cd_match_expression_init+0x84>
     e54:	movne	r0, #0
     e58:	strne	r1, [r3, #36]	; 0x24
     e5c:	strne	r2, [r3, #32]
     e60:	mvneq	r0, #0
     e64:	pop	{r4, r5, r6, pc}
     e68:	.word	0x000001e8
	...

00000e74 <cd_match_filename_finalise>:
     e74:	ldr	r3, [r0]
     e78:	push	{r4, r5, r6, r7, r8, lr}
     e7c:	mov	r6, r0
     e80:	sub	sp, sp, #40	; 0x28
     e84:	ldr	r0, [r3, #12]
     e88:	ldr	r5, [r3, #8]
     e8c:	bl	0 <escaped_string_length>
     e90:	subs	r7, r0, #0
     e94:	blt	ff4 <cd_match_filename_finalise+0x180>
     e98:	beq	fb4 <cd_match_filename_finalise+0x140>
     e9c:	mov	r4, #0
     ea0:	str	r4, [sp, #4]
     ea4:	str	r4, [sp]
     ea8:	mov	r3, r4
     eac:	mov	r2, r4
     eb0:	mov	r1, r4
     eb4:	mov	r0, #28
     eb8:	bl	0 <coda_expression_new>
     ebc:	subs	r8, r0, #0
     ec0:	beq	fac <cd_match_filename_finalise+0x138>
     ec4:	asr	r1, r7, #31
     ec8:	add	r2, sp, #12
     ecc:	mov	r0, r7
     ed0:	bl	0 <coda_str64>
     ed4:	add	r0, sp, #12
     ed8:	bl	0 <strdup>
     edc:	subs	r1, r0, #0
     ee0:	beq	fd8 <cd_match_filename_finalise+0x164>
     ee4:	mov	r3, r4
     ee8:	str	r4, [sp, #4]
     eec:	str	r4, [sp]
     ef0:	mov	r2, r4
     ef4:	mov	r0, #20
     ef8:	bl	0 <coda_expression_new>
     efc:	subs	r3, r0, #0
     f00:	beq	fc8 <cd_match_filename_finalise+0x154>
     f04:	ldr	r2, [r5, #4]
     f08:	mov	r1, r4
     f0c:	str	r4, [sp, #4]
     f10:	str	r8, [sp]
     f14:	mov	r0, #77	; 0x4d
     f18:	bl	0 <coda_expression_new>
     f1c:	str	r4, [r5, #4]
     f20:	subs	r7, r0, #0
     f24:	beq	fac <cd_match_filename_finalise+0x138>
     f28:	ldr	r3, [r6]
     f2c:	ldr	r0, [r3, #12]
     f30:	bl	0 <strdup>
     f34:	subs	r1, r0, #0
     f38:	beq	f90 <cd_match_filename_finalise+0x11c>
     f3c:	mov	r3, r4
     f40:	str	r4, [sp, #4]
     f44:	str	r4, [sp]
     f48:	mov	r2, r4
     f4c:	mov	r0, #22
     f50:	bl	0 <coda_expression_new>
     f54:	subs	r3, r0, #0
     f58:	beq	fa4 <cd_match_filename_finalise+0x130>
     f5c:	str	r4, [sp, #4]
     f60:	str	r4, [sp]
     f64:	mov	r2, r7
     f68:	mov	r1, r4
     f6c:	mov	r0, #25
     f70:	bl	0 <coda_expression_new>
     f74:	cmp	r0, #0
     f78:	mov	r3, r0
     f7c:	movne	r0, #0
     f80:	mvneq	r0, #0
     f84:	str	r3, [r5, #4]
     f88:	add	sp, sp, #40	; 0x28
     f8c:	pop	{r4, r5, r6, r7, r8, pc}
     f90:	ldr	r3, [pc, #112]	; 1008 <cd_match_filename_finalise+0x194>
     f94:	ldr	r2, [pc, #112]	; 100c <cd_match_filename_finalise+0x198>
     f98:	ldr	r1, [pc, #112]	; 1010 <cd_match_filename_finalise+0x19c>
     f9c:	mvn	r0, #0
     fa0:	bl	0 <coda_set_error>
     fa4:	mov	r0, r7
     fa8:	bl	0 <coda_expression_delete>
     fac:	mvn	r0, #0
     fb0:	b	f88 <cd_match_filename_finalise+0x114>
     fb4:	ldr	r0, [pc, #88]	; 1014 <cd_match_filename_finalise+0x1a0>
     fb8:	ldr	r1, [pc, #88]	; 1018 <cd_match_filename_finalise+0x1a4>
     fbc:	bl	0 <coda_set_error>
     fc0:	mvn	r0, #0
     fc4:	b	f88 <cd_match_filename_finalise+0x114>
     fc8:	mov	r0, r8
     fcc:	bl	0 <coda_expression_delete>
     fd0:	mvn	r0, #0
     fd4:	b	f88 <cd_match_filename_finalise+0x114>
     fd8:	mvn	r0, #0
     fdc:	ldr	r3, [pc, #56]	; 101c <cd_match_filename_finalise+0x1a8>
     fe0:	ldr	r2, [pc, #36]	; 100c <cd_match_filename_finalise+0x198>
     fe4:	ldr	r1, [pc, #36]	; 1010 <cd_match_filename_finalise+0x19c>
     fe8:	bl	0 <coda_set_error>
     fec:	mvn	r0, #0
     ff0:	b	f88 <cd_match_filename_finalise+0x114>
     ff4:	ldr	r0, [pc, #24]	; 1014 <cd_match_filename_finalise+0x1a0>
     ff8:	ldr	r1, [pc, #32]	; 1020 <cd_match_filename_finalise+0x1ac>
     ffc:	bl	0 <coda_set_error>
    1000:	mvn	r0, #0
    1004:	b	f88 <cd_match_filename_finalise+0x114>
    1008:	.word	0x00000a2f
    100c:	.word	0x00000064
    1010:	.word	0x00000248
    1014:	.word	0xfffffe70
    1018:	.word	0x00000214
    101c:	.word	0x00000a1c
    1020:	.word	0x000001f0

00001024 <cd_match_data_finalise>:
    1024:	ldr	r3, [r0]
    1028:	push	{r4, r5, r6, r7, r8, r9, lr}
    102c:	mov	r6, r0
    1030:	sub	sp, sp, #44	; 0x2c
    1034:	ldr	r0, [r3, #12]
    1038:	ldr	r5, [r3, #8]
    103c:	bl	0 <escaped_string_length>
    1040:	subs	r8, r0, #0
    1044:	blt	1664 <cd_match_data_finalise+0x640>
    1048:	ldr	r4, [r5, #4]
    104c:	cmp	r4, #0
    1050:	beq	1164 <cd_match_data_finalise+0x140>
    1054:	ldr	r7, [r4]
    1058:	cmp	r7, #20
    105c:	beq	106c <cd_match_data_finalise+0x48>
    1060:	mov	r0, #0
    1064:	add	sp, sp, #44	; 0x2c
    1068:	pop	{r4, r5, r6, r7, r8, r9, pc}
    106c:	cmp	r8, #0
    1070:	beq	1654 <cd_match_data_finalise+0x630>
    1074:	mov	r4, #0
    1078:	str	r4, [sp, #4]
    107c:	str	r4, [sp]
    1080:	mov	r3, r4
    1084:	mov	r2, r4
    1088:	mov	r1, r4
    108c:	mov	r0, #38	; 0x26
    1090:	bl	0 <coda_expression_new>
    1094:	subs	r9, r0, #0
    1098:	beq	115c <cd_match_data_finalise+0x138>
    109c:	asr	r1, r8, #31
    10a0:	add	r2, sp, #12
    10a4:	mov	r0, r8
    10a8:	bl	0 <coda_str64>
    10ac:	add	r0, sp, #12
    10b0:	bl	0 <strdup>
    10b4:	subs	r1, r0, #0
    10b8:	beq	1678 <cd_match_data_finalise+0x654>
    10bc:	str	r4, [sp, #4]
    10c0:	str	r4, [sp]
    10c4:	mov	r0, r7
    10c8:	mov	r3, r4
    10cc:	mov	r2, r4
    10d0:	bl	0 <coda_expression_new>
    10d4:	cmp	r0, #0
    10d8:	beq	1698 <cd_match_data_finalise+0x674>
    10dc:	ldr	r3, [r5, #4]
    10e0:	mov	r2, r9
    10e4:	stm	sp, {r0, r4}
    10e8:	mov	r1, r4
    10ec:	mov	r0, #16
    10f0:	bl	0 <coda_expression_new>
    10f4:	str	r4, [r5, #4]
    10f8:	subs	r7, r0, #0
    10fc:	beq	115c <cd_match_data_finalise+0x138>
    1100:	ldr	r3, [r6]
    1104:	ldr	r0, [r3, #12]
    1108:	bl	0 <strdup>
    110c:	subs	r1, r0, #0
    1110:	beq	16a4 <cd_match_data_finalise+0x680>
    1114:	mov	r3, r4
    1118:	str	r4, [sp, #4]
    111c:	str	r4, [sp]
    1120:	mov	r2, r4
    1124:	mov	r0, #22
    1128:	bl	0 <coda_expression_new>
    112c:	subs	r3, r0, #0
    1130:	beq	16c4 <cd_match_data_finalise+0x6a0>
    1134:	mov	r4, #0
    1138:	mov	r2, r7
    113c:	str	r4, [sp, #4]
    1140:	str	r4, [sp]
    1144:	mov	r1, r4
    1148:	mov	r0, #25
    114c:	bl	0 <coda_expression_new>
    1150:	cmp	r0, r4
    1154:	str	r0, [r5, #4]
    1158:	bne	1060 <cd_match_data_finalise+0x3c>
    115c:	mvn	r0, #0
    1160:	b	1064 <cd_match_data_finalise+0x40>
    1164:	ldr	r7, [r5]
    1168:	cmp	r7, #0
    116c:	beq	1234 <cd_match_data_finalise+0x210>
    1170:	cmp	r8, #0
    1174:	beq	1060 <cd_match_data_finalise+0x3c>
    1178:	mov	r2, r4
    117c:	str	r4, [sp, #4]
    1180:	str	r4, [sp]
    1184:	mov	r3, r4
    1188:	mov	r1, r4
    118c:	mov	r0, #36	; 0x24
    1190:	bl	0 <coda_expression_new>
    1194:	subs	r2, r0, #0
    1198:	beq	115c <cd_match_data_finalise+0x138>
    119c:	str	r4, [sp, #4]
    11a0:	str	r4, [sp]
    11a4:	mov	r3, r4
    11a8:	mov	r1, r4
    11ac:	mov	r0, #75	; 0x4b
    11b0:	bl	0 <coda_expression_new>
    11b4:	subs	r7, r0, #0
    11b8:	beq	115c <cd_match_data_finalise+0x138>
    11bc:	ldr	r3, [r6]
    11c0:	ldr	r0, [r3, #12]
    11c4:	bl	0 <strdup>
    11c8:	subs	r1, r0, #0
    11cc:	beq	170c <cd_match_data_finalise+0x6e8>
    11d0:	mov	r3, r4
    11d4:	str	r4, [sp, #4]
    11d8:	str	r4, [sp]
    11dc:	mov	r2, r4
    11e0:	mov	r0, #22
    11e4:	bl	0 <coda_expression_new>
    11e8:	subs	r3, r0, #0
    11ec:	beq	16fc <cd_match_data_finalise+0x6d8>
    11f0:	str	r4, [sp, #4]
    11f4:	str	r4, [sp]
    11f8:	mov	r1, r4
    11fc:	mov	r2, r7
    1200:	mov	r0, #25
    1204:	bl	0 <coda_expression_new>
    1208:	subs	r4, r0, #0
    120c:	beq	115c <cd_match_data_finalise+0x138>
    1210:	mov	r0, r5
    1214:	mov	r1, r4
    1218:	bl	0 <coda_detection_rule_entry_set_expression>
    121c:	cmp	r0, #0
    1220:	beq	1060 <cd_match_data_finalise+0x3c>
    1224:	mov	r0, r4
    1228:	bl	0 <coda_expression_delete>
    122c:	mvn	r0, #0
    1230:	b	1064 <cd_match_data_finalise+0x40>
    1234:	cmp	r8, #0
    1238:	beq	16e8 <cd_match_data_finalise+0x6c4>
    123c:	str	r7, [sp, #4]
    1240:	str	r7, [sp]
    1244:	mov	r3, r7
    1248:	mov	r2, r7
    124c:	mov	r1, r7
    1250:	mov	r0, #38	; 0x26
    1254:	bl	0 <coda_expression_new>
    1258:	subs	r4, r0, #0
    125c:	beq	115c <cd_match_data_finalise+0x138>
    1260:	ldr	r0, [pc, #1272]	; 1760 <cd_match_data_finalise+0x73c>
    1264:	bl	0 <strdup>
    1268:	mov	r3, r7
    126c:	str	r7, [sp, #4]
    1270:	str	r7, [sp]
    1274:	mov	r2, r7
    1278:	mov	r1, r0
    127c:	mov	r0, #20
    1280:	bl	0 <coda_expression_new>
    1284:	subs	r3, r0, #0
    1288:	beq	1224 <cd_match_data_finalise+0x200>
    128c:	mov	r2, r4
    1290:	str	r7, [sp, #4]
    1294:	str	r7, [sp]
    1298:	mov	r1, r7
    129c:	mov	r0, #16
    12a0:	bl	0 <coda_expression_new>
    12a4:	subs	r4, r0, #0
    12a8:	beq	115c <cd_match_data_finalise+0x138>
    12ac:	ldr	r3, [r6]
    12b0:	ldr	r8, [r3, #12]
    12b4:	mov	r0, r8
    12b8:	bl	0 <strlen>
    12bc:	cmp	r0, #0
    12c0:	ble	16d0 <cd_match_data_finalise+0x6ac>
    12c4:	add	r0, r8, r0
    12c8:	mov	r6, r8
    12cc:	ldrb	r3, [r6], #1
    12d0:	mov	r2, r7
    12d4:	sub	r3, r3, #36	; 0x24
    12d8:	cmp	r3, #88	; 0x58
    12dc:	ldrls	pc, [pc, r3, lsl #2]
    12e0:	b	144c <cd_match_data_finalise+0x428>
    12e4:	.word	0x00001448
    12e8:	.word	0x0000144c
    12ec:	.word	0x0000144c
    12f0:	.word	0x0000144c
    12f4:	.word	0x00001448
    12f8:	.word	0x00001448
    12fc:	.word	0x00001448
    1300:	.word	0x00001448
    1304:	.word	0x0000144c
    1308:	.word	0x0000144c
    130c:	.word	0x00001448
    1310:	.word	0x0000144c
    1314:	.word	0x0000144c
    1318:	.word	0x0000144c
    131c:	.word	0x0000144c
    1320:	.word	0x0000144c
    1324:	.word	0x0000144c
    1328:	.word	0x0000144c
    132c:	.word	0x0000144c
    1330:	.word	0x0000144c
    1334:	.word	0x0000144c
    1338:	.word	0x0000144c
    133c:	.word	0x0000144c
    1340:	.word	0x0000144c
    1344:	.word	0x0000144c
    1348:	.word	0x0000144c
    134c:	.word	0x0000144c
    1350:	.word	0x00001448
    1354:	.word	0x0000144c
    1358:	.word	0x0000144c
    135c:	.word	0x0000144c
    1360:	.word	0x0000144c
    1364:	.word	0x0000144c
    1368:	.word	0x0000144c
    136c:	.word	0x0000144c
    1370:	.word	0x0000144c
    1374:	.word	0x0000144c
    1378:	.word	0x0000144c
    137c:	.word	0x0000144c
    1380:	.word	0x0000144c
    1384:	.word	0x0000144c
    1388:	.word	0x0000144c
    138c:	.word	0x0000144c
    1390:	.word	0x0000144c
    1394:	.word	0x0000144c
    1398:	.word	0x0000144c
    139c:	.word	0x0000144c
    13a0:	.word	0x0000144c
    13a4:	.word	0x0000144c
    13a8:	.word	0x0000144c
    13ac:	.word	0x0000144c
    13b0:	.word	0x0000144c
    13b4:	.word	0x0000144c
    13b8:	.word	0x0000144c
    13bc:	.word	0x0000144c
    13c0:	.word	0x00001448
    13c4:	.word	0x00001448
    13c8:	.word	0x0000144c
    13cc:	.word	0x00001448
    13d0:	.word	0x0000144c
    13d4:	.word	0x0000144c
    13d8:	.word	0x0000144c
    13dc:	.word	0x0000144c
    13e0:	.word	0x0000144c
    13e4:	.word	0x0000144c
    13e8:	.word	0x0000144c
    13ec:	.word	0x0000144c
    13f0:	.word	0x0000144c
    13f4:	.word	0x0000144c
    13f8:	.word	0x0000144c
    13fc:	.word	0x0000144c
    1400:	.word	0x0000144c
    1404:	.word	0x0000144c
    1408:	.word	0x0000144c
    140c:	.word	0x0000144c
    1410:	.word	0x0000144c
    1414:	.word	0x0000144c
    1418:	.word	0x0000144c
    141c:	.word	0x0000144c
    1420:	.word	0x0000144c
    1424:	.word	0x0000144c
    1428:	.word	0x0000144c
    142c:	.word	0x0000144c
    1430:	.word	0x0000144c
    1434:	.word	0x0000144c
    1438:	.word	0x0000144c
    143c:	.word	0x0000144c
    1440:	.word	0x00001448
    1444:	.word	0x00001448
    1448:	add	r2, r7, #1
    144c:	cmp	r0, r6
    1450:	add	r7, r2, #1
    1454:	bne	12cc <cd_match_data_finalise+0x2a8>
    1458:	add	r7, r2, #2
    145c:	mov	r0, r7
    1460:	bl	0 <malloc>
    1464:	subs	r1, r0, #0
    1468:	beq	1734 <cd_match_data_finalise+0x710>
    146c:	mov	r3, #0
    1470:	mov	r0, #92	; 0x5c
    1474:	ldrb	ip, [r8], #1
    1478:	mov	r2, r3
    147c:	sub	lr, ip, #36	; 0x24
    1480:	cmp	lr, #88	; 0x58
    1484:	ldrls	pc, [pc, lr, lsl #2]
    1488:	b	15f8 <cd_match_data_finalise+0x5d4>
    148c:	.word	0x000015f0
    1490:	.word	0x000015f8
    1494:	.word	0x000015f8
    1498:	.word	0x000015f8
    149c:	.word	0x000015f0
    14a0:	.word	0x000015f0
    14a4:	.word	0x000015f0
    14a8:	.word	0x000015f0
    14ac:	.word	0x000015f8
    14b0:	.word	0x000015f8
    14b4:	.word	0x000015f0
    14b8:	.word	0x000015f8
    14bc:	.word	0x000015f8
    14c0:	.word	0x000015f8
    14c4:	.word	0x000015f8
    14c8:	.word	0x000015f8
    14cc:	.word	0x000015f8
    14d0:	.word	0x000015f8
    14d4:	.word	0x000015f8
    14d8:	.word	0x000015f8
    14dc:	.word	0x000015f8
    14e0:	.word	0x000015f8
    14e4:	.word	0x000015f8
    14e8:	.word	0x000015f8
    14ec:	.word	0x000015f8
    14f0:	.word	0x000015f8
    14f4:	.word	0x000015f8
    14f8:	.word	0x000015f0
    14fc:	.word	0x000015f8
    1500:	.word	0x000015f8
    1504:	.word	0x000015f8
    1508:	.word	0x000015f8
    150c:	.word	0x000015f8
    1510:	.word	0x000015f8
    1514:	.word	0x000015f8
    1518:	.word	0x000015f8
    151c:	.word	0x000015f8
    1520:	.word	0x000015f8
    1524:	.word	0x000015f8
    1528:	.word	0x000015f8
    152c:	.word	0x000015f8
    1530:	.word	0x000015f8
    1534:	.word	0x000015f8
    1538:	.word	0x000015f8
    153c:	.word	0x000015f8
    1540:	.word	0x000015f8
    1544:	.word	0x000015f8
    1548:	.word	0x000015f8
    154c:	.word	0x000015f8
    1550:	.word	0x000015f8
    1554:	.word	0x000015f8
    1558:	.word	0x000015f8
    155c:	.word	0x000015f8
    1560:	.word	0x000015f8
    1564:	.word	0x000015f8
    1568:	.word	0x000015f0
    156c:	.word	0x000015f0
    1570:	.word	0x000015f8
    1574:	.word	0x000015f0
    1578:	.word	0x000015f8
    157c:	.word	0x000015f8
    1580:	.word	0x000015f8
    1584:	.word	0x000015f8
    1588:	.word	0x000015f8
    158c:	.word	0x000015f8
    1590:	.word	0x000015f8
    1594:	.word	0x000015f8
    1598:	.word	0x000015f8
    159c:	.word	0x000015f8
    15a0:	.word	0x000015f8
    15a4:	.word	0x000015f8
    15a8:	.word	0x000015f8
    15ac:	.word	0x000015f8
    15b0:	.word	0x000015f8
    15b4:	.word	0x000015f8
    15b8:	.word	0x000015f8
    15bc:	.word	0x000015f8
    15c0:	.word	0x000015f8
    15c4:	.word	0x000015f8
    15c8:	.word	0x000015f8
    15cc:	.word	0x000015f8
    15d0:	.word	0x000015f8
    15d4:	.word	0x000015f8
    15d8:	.word	0x000015f8
    15dc:	.word	0x000015f8
    15e0:	.word	0x000015f8
    15e4:	.word	0x000015f8
    15e8:	.word	0x000015f0
    15ec:	.word	0x000015f0
    15f0:	add	r2, r3, #1
    15f4:	strb	r0, [r1, r3]
    15f8:	cmp	r6, r8
    15fc:	strb	ip, [r1, r2]
    1600:	add	r3, r2, #1
    1604:	bne	1474 <cd_match_data_finalise+0x450>
    1608:	mov	r6, #0
    160c:	strb	r6, [r1, r3]
    1610:	mov	r2, r6
    1614:	str	r6, [sp, #4]
    1618:	str	r6, [sp]
    161c:	mov	r3, r6
    1620:	mov	r0, #21
    1624:	bl	0 <coda_expression_new>
    1628:	subs	r2, r0, #0
    162c:	beq	1224 <cd_match_data_finalise+0x200>
    1630:	mov	r3, r4
    1634:	str	r6, [sp, #4]
    1638:	str	r6, [sp]
    163c:	mov	r1, r6
    1640:	mov	r0, #71	; 0x47
    1644:	bl	0 <coda_expression_new>
    1648:	subs	r4, r0, #0
    164c:	bne	1210 <cd_match_data_finalise+0x1ec>
    1650:	b	115c <cd_match_data_finalise+0x138>
    1654:	ldr	r1, [pc, #264]	; 1764 <cd_match_data_finalise+0x740>
    1658:	ldr	r0, [pc, #264]	; 1768 <cd_match_data_finalise+0x744>
    165c:	bl	0 <coda_set_error>
    1660:	b	115c <cd_match_data_finalise+0x138>
    1664:	ldr	r0, [pc, #252]	; 1768 <cd_match_data_finalise+0x744>
    1668:	ldr	r1, [pc, #252]	; 176c <cd_match_data_finalise+0x748>
    166c:	bl	0 <coda_set_error>
    1670:	mvn	r0, #0
    1674:	b	1064 <cd_match_data_finalise+0x40>
    1678:	ldr	r3, [pc, #240]	; 1770 <cd_match_data_finalise+0x74c>
    167c:	ldr	r2, [pc, #240]	; 1774 <cd_match_data_finalise+0x750>
    1680:	ldr	r1, [pc, #240]	; 1778 <cd_match_data_finalise+0x754>
    1684:	mvn	r0, #0
    1688:	bl	0 <coda_set_error>
    168c:	mov	r0, r9
    1690:	bl	0 <coda_expression_delete>
    1694:	b	115c <cd_match_data_finalise+0x138>
    1698:	mov	r0, r9
    169c:	bl	0 <coda_expression_delete>
    16a0:	b	115c <cd_match_data_finalise+0x138>
    16a4:	ldr	r3, [pc, #208]	; 177c <cd_match_data_finalise+0x758>
    16a8:	ldr	r2, [pc, #196]	; 1774 <cd_match_data_finalise+0x750>
    16ac:	ldr	r1, [pc, #196]	; 1778 <cd_match_data_finalise+0x754>
    16b0:	mvn	r0, #0
    16b4:	bl	0 <coda_set_error>
    16b8:	mov	r0, r7
    16bc:	bl	0 <coda_expression_delete>
    16c0:	b	115c <cd_match_data_finalise+0x138>
    16c4:	mov	r0, r7
    16c8:	bl	0 <coda_expression_delete>
    16cc:	b	115c <cd_match_data_finalise+0x138>
    16d0:	mov	r0, #1
    16d4:	bl	0 <malloc>
    16d8:	subs	r1, r0, #0
    16dc:	beq	1730 <cd_match_data_finalise+0x70c>
    16e0:	mov	r3, r7
    16e4:	b	1608 <cd_match_data_finalise+0x5e4>
    16e8:	ldr	r0, [pc, #120]	; 1768 <cd_match_data_finalise+0x744>
    16ec:	ldr	r1, [pc, #112]	; 1764 <cd_match_data_finalise+0x740>
    16f0:	bl	0 <coda_set_error>
    16f4:	mvn	r0, #0
    16f8:	b	1064 <cd_match_data_finalise+0x40>
    16fc:	mov	r0, r7
    1700:	bl	0 <coda_expression_delete>
    1704:	mvn	r0, #0
    1708:	b	1064 <cd_match_data_finalise+0x40>
    170c:	ldr	r3, [pc, #108]	; 1780 <cd_match_data_finalise+0x75c>
    1710:	ldr	r2, [pc, #92]	; 1774 <cd_match_data_finalise+0x750>
    1714:	ldr	r1, [pc, #92]	; 1778 <cd_match_data_finalise+0x754>
    1718:	mvn	r0, #0
    171c:	bl	0 <coda_set_error>
    1720:	mov	r0, r7
    1724:	bl	0 <coda_expression_delete>
    1728:	mvn	r0, #0
    172c:	b	1064 <cd_match_data_finalise+0x40>
    1730:	mov	r7, #1
    1734:	ldr	r3, [pc, #72]	; 1784 <cd_match_data_finalise+0x760>
    1738:	mov	r2, r7
    173c:	str	r3, [sp]
    1740:	ldr	r1, [pc, #64]	; 1788 <cd_match_data_finalise+0x764>
    1744:	ldr	r3, [pc, #40]	; 1774 <cd_match_data_finalise+0x750>
    1748:	mvn	r0, #0
    174c:	bl	0 <coda_set_error>
    1750:	mov	r0, r4
    1754:	bl	0 <coda_expression_delete>
    1758:	mvn	r0, #0
    175c:	b	1064 <cd_match_data_finalise+0x40>
    1760:	.word	0x000002ac
    1764:	.word	0x0000027c
    1768:	.word	0xfffffe70
    176c:	.word	0x000001f0
    1770:	.word	0x00000888
    1774:	.word	0x00000064
    1778:	.word	0x00000248
    177c:	.word	0x0000089c
    1780:	.word	0x0000082a
    1784:	.word	0x00000153
    1788:	.word	0x000002b4

0000178c <cd_detection_rule_add_entry>:
    178c:	ldr	r3, [r0]
    1790:	ldr	r1, [r3, #8]
    1794:	cmp	r1, #0
    1798:	beq	17c4 <cd_detection_rule_add_entry+0x38>
    179c:	ldr	r3, [r3, #396]	; 0x18c
    17a0:	push	{r4, lr}
    17a4:	mov	r4, r0
    17a8:	ldr	r0, [r3, #8]
    17ac:	bl	0 <coda_detection_rule_add_entry>
    17b0:	cmp	r0, #0
    17b4:	bne	17cc <cd_detection_rule_add_entry+0x40>
    17b8:	ldr	r3, [r4]
    17bc:	str	r0, [r3, #8]
    17c0:	pop	{r4, pc}
    17c4:	mov	r0, r1
    17c8:	bx	lr
    17cc:	mvn	r0, #0
    17d0:	pop	{r4, pc}

000017d4 <cd_match_data_init>:
    17d4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    17d8:	mov	r8, r0
    17dc:	ldr	r5, [r1]
    17e0:	ldr	sl, [r0]
    17e4:	ldr	r3, [pc, #1296]	; 1cfc <cd_match_data_init+0x528>
    17e8:	cmp	r5, #0
    17ec:	sub	sp, sp, #36	; 0x24
    17f0:	str	r3, [sl, #40]	; 0x28
    17f4:	beq	1bbc <cd_match_data_init+0x3e8>
    17f8:	mov	r7, r1
    17fc:	ldr	r9, [pc, #1276]	; 1d00 <cd_match_data_init+0x52c>
    1800:	mov	r6, r1
    1804:	mov	r0, r5
    1808:	b	1818 <cd_match_data_init+0x44>
    180c:	ldr	r0, [r6, #8]!
    1810:	cmp	r0, #0
    1814:	beq	1af4 <cd_match_data_init+0x320>
    1818:	mov	r1, r9
    181c:	bl	0 <strcmp>
    1820:	cmp	r0, #0
    1824:	bne	180c <cd_match_data_init+0x38>
    1828:	ldr	r4, [r6, #4]
    182c:	ldr	r9, [pc, #1232]	; 1d04 <cd_match_data_init+0x530>
    1830:	mov	r0, r5
    1834:	b	1844 <cd_match_data_init+0x70>
    1838:	ldr	r0, [r7, #8]!
    183c:	cmp	r0, #0
    1840:	beq	1bdc <cd_match_data_init+0x408>
    1844:	mov	r1, r9
    1848:	bl	0 <strcmp>
    184c:	cmp	r0, #0
    1850:	bne	1838 <cd_match_data_init+0x64>
    1854:	ldr	r5, [r7, #4]
    1858:	mov	r6, r0
    185c:	cmp	r5, #0
    1860:	beq	1bdc <cd_match_data_init+0x408>
    1864:	cmp	r4, #0
    1868:	bne	1afc <cd_match_data_init+0x328>
    186c:	ldr	r3, [sl, #396]	; 0x18c
    1870:	mov	r0, r5
    1874:	ldr	r3, [r3, #8]
    1878:	str	r3, [sp, #16]
    187c:	bl	0 <strdup>
    1880:	subs	r3, r0, #0
    1884:	str	r3, [sp, #8]
    1888:	beq	1cf4 <cd_match_data_init+0x520>
    188c:	mov	r0, r5
    1890:	bl	0 <strlen>
    1894:	add	r0, r0, #6
    1898:	bl	0 <malloc>
    189c:	subs	r3, r0, #0
    18a0:	str	r3, [sp, #12]
    18a4:	beq	1b70 <cd_match_data_init+0x39c>
    18a8:	ldr	r3, [sp, #8]
    18ac:	str	r8, [sp, #28]
    18b0:	mov	fp, #0
    18b4:	ldrb	r5, [r3]
    18b8:	ldr	r3, [sp, #12]
    18bc:	str	r6, [sp, #24]
    18c0:	cmp	r5, #47	; 0x2f
    18c4:	moveq	r9, r3
    18c8:	strb	r4, [r3]
    18cc:	ldreq	r3, [sp, #8]
    18d0:	strbeq	r5, [r9], #1
    18d4:	addeq	r0, r3, #1
    18d8:	ldrbeq	r5, [r3, #1]
    18dc:	ldrne	r9, [sp, #12]
    18e0:	ldrne	r0, [sp, #8]
    18e4:	cmp	r5, #64	; 0x40
    18e8:	strbeq	r5, [r9], #1
    18ec:	ldrbeq	r5, [r0, #1]
    18f0:	moveq	r3, #1
    18f4:	streq	r3, [sp, #20]
    18f8:	addeq	r0, r0, r3
    18fc:	strne	r6, [sp, #20]
    1900:	cmp	r5, #123	; 0x7b
    1904:	mov	r7, r9
    1908:	movne	r8, r4
    190c:	beq	1ab0 <cd_match_data_init+0x2dc>
    1910:	cmp	r5, #47	; 0x2f
    1914:	cmpne	r5, #64	; 0x40
    1918:	beq	1c54 <cd_match_data_init+0x480>
    191c:	cmp	r5, #0
    1920:	beq	1c68 <cd_match_data_init+0x494>
    1924:	mov	r6, r0
    1928:	b	1934 <cd_match_data_init+0x160>
    192c:	cmp	r5, #0
    1930:	beq	1b14 <cd_match_data_init+0x340>
    1934:	ldrb	r5, [r6, #1]!
    1938:	cmp	r5, #47	; 0x2f
    193c:	cmpne	r5, #64	; 0x40
    1940:	bne	192c <cd_match_data_init+0x158>
    1944:	sub	sl, r5, #64	; 0x40
    1948:	clz	sl, sl
    194c:	lsr	sl, sl, #5
    1950:	strb	fp, [r6]
    1954:	mov	r1, #0
    1958:	bl	0 <coda_identifier_from_name>
    195c:	subs	r9, r0, #0
    1960:	beq	1ba8 <cd_match_data_init+0x3d4>
    1964:	mov	r1, r9
    1968:	mov	r0, r7
    196c:	bl	0 <strcpy>
    1970:	mov	r0, r9
    1974:	bl	0 <strlen>
    1978:	add	r7, r7, r0
    197c:	mov	r0, r9
    1980:	bl	0 <free>
    1984:	cmp	r8, #0
    1988:	beq	1a78 <cd_match_data_init+0x2a4>
    198c:	mov	r2, #0
    1990:	mov	r1, r2
    1994:	str	fp, [sp, #4]
    1998:	str	fp, [sp]
    199c:	mov	r3, fp
    19a0:	mov	r0, #36	; 0x24
    19a4:	bl	0 <coda_expression_new>
    19a8:	subs	r2, r0, #0
    19ac:	beq	1ba8 <cd_match_data_init+0x3d4>
    19b0:	str	fp, [sp, #4]
    19b4:	str	fp, [sp]
    19b8:	mov	r3, fp
    19bc:	mov	r1, #0
    19c0:	mov	r0, #75	; 0x4b
    19c4:	bl	0 <coda_expression_new>
    19c8:	subs	r9, r0, #0
    19cc:	beq	1ba8 <cd_match_data_init+0x3d4>
    19d0:	mov	r0, r8
    19d4:	bl	0 <strdup>
    19d8:	subs	r1, r0, #0
    19dc:	beq	1cb0 <cd_match_data_init+0x4dc>
    19e0:	mov	r3, fp
    19e4:	str	fp, [sp, #4]
    19e8:	str	fp, [sp]
    19ec:	mov	r2, #0
    19f0:	mov	r0, #22
    19f4:	bl	0 <coda_expression_new>
    19f8:	subs	r3, r0, #0
    19fc:	beq	1c7c <cd_match_data_init+0x4a8>
    1a00:	mov	r2, r9
    1a04:	str	fp, [sp, #4]
    1a08:	str	fp, [sp]
    1a0c:	mov	r1, fp
    1a10:	mov	r0, #25
    1a14:	bl	0 <coda_expression_new>
    1a18:	subs	r9, r0, #0
    1a1c:	beq	1ba8 <cd_match_data_init+0x3d4>
    1a20:	ldr	r3, [pc, #736]	; 1d08 <cd_match_data_init+0x534>
    1a24:	ldr	r1, [pc, #732]	; 1d08 <cd_match_data_init+0x534>
    1a28:	ldrh	r2, [r3, #4]
    1a2c:	ldrb	r3, [r3, #6]
    1a30:	ldr	r0, [r1]
    1a34:	strh	r2, [r7, #4]
    1a38:	str	r0, [r7]
    1a3c:	strb	r3, [r7, #6]
    1a40:	ldr	r0, [sp, #12]
    1a44:	bl	0 <coda_detection_rule_entry_new>
    1a48:	strb	fp, [r7]
    1a4c:	subs	r8, r0, #0
    1a50:	beq	1c7c <cd_match_data_init+0x4a8>
    1a54:	mov	r1, r9
    1a58:	bl	0 <coda_detection_rule_entry_set_expression>
    1a5c:	cmp	r0, #0
    1a60:	bne	1c74 <cd_match_data_init+0x4a0>
    1a64:	mov	r1, r8
    1a68:	ldr	r0, [sp, #16]
    1a6c:	bl	0 <coda_detection_rule_add_entry>
    1a70:	cmp	r0, #0
    1a74:	bne	1ce8 <cd_match_data_init+0x514>
    1a78:	cmp	r5, #0
    1a7c:	beq	1b1c <cd_match_data_init+0x348>
    1a80:	ldr	r3, [sp, #20]
    1a84:	cmp	r3, #0
    1a88:	bne	1cd8 <cd_match_data_init+0x504>
    1a8c:	cmp	r5, #64	; 0x40
    1a90:	movne	r5, #47	; 0x2f
    1a94:	strb	r5, [r7], #1
    1a98:	ldrb	r5, [r6, #1]
    1a9c:	str	sl, [sp, #20]
    1aa0:	add	r0, r6, #1
    1aa4:	cmp	r5, #123	; 0x7b
    1aa8:	movne	r8, r4
    1aac:	bne	1910 <cd_match_data_init+0x13c>
    1ab0:	ldrb	r3, [r0, #1]
    1ab4:	add	r8, r0, #1
    1ab8:	cmp	r3, #125	; 0x7d
    1abc:	beq	1cd0 <cd_match_data_init+0x4fc>
    1ac0:	cmp	r3, #0
    1ac4:	beq	1b90 <cd_match_data_init+0x3bc>
    1ac8:	mov	r2, r8
    1acc:	b	1ad8 <cd_match_data_init+0x304>
    1ad0:	cmp	r3, #0
    1ad4:	beq	1b90 <cd_match_data_init+0x3bc>
    1ad8:	ldrb	r3, [r2, #1]!
    1adc:	cmp	r3, #125	; 0x7d
    1ae0:	bne	1ad0 <cd_match_data_init+0x2fc>
    1ae4:	mov	r0, r2
    1ae8:	strb	fp, [r0], #1
    1aec:	ldrb	r5, [r2, #1]
    1af0:	b	1910 <cd_match_data_init+0x13c>
    1af4:	mov	r4, r0
    1af8:	b	182c <cd_match_data_init+0x58>
    1afc:	ldr	r0, [pc, #520]	; 1d0c <cd_match_data_init+0x538>
    1b00:	ldr	r1, [pc, #520]	; 1d10 <cd_match_data_init+0x53c>
    1b04:	bl	0 <coda_set_error>
    1b08:	mvn	r0, #0
    1b0c:	add	sp, sp, #36	; 0x24
    1b10:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1b14:	ldr	sl, [sp, #24]
    1b18:	b	1950 <cd_match_data_init+0x17c>
    1b1c:	ldr	r0, [sp, #8]
    1b20:	ldr	r8, [sp, #28]
    1b24:	bl	0 <free>
    1b28:	ldr	r5, [sp, #12]
    1b2c:	ldr	r4, [r8]
    1b30:	mov	r0, r5
    1b34:	bl	0 <coda_detection_rule_entry_new>
    1b38:	str	r0, [r4, #8]
    1b3c:	mov	r0, r5
    1b40:	bl	0 <free>
    1b44:	ldr	r3, [r8]
    1b48:	ldr	r2, [r3, #8]
    1b4c:	cmp	r2, #0
    1b50:	beq	1b84 <cd_match_data_init+0x3b0>
    1b54:	ldr	r1, [pc, #440]	; 1d14 <cd_match_data_init+0x540>
    1b58:	mov	r2, #1
    1b5c:	mov	r0, #0
    1b60:	str	r1, [r3, #36]	; 0x24
    1b64:	str	r2, [r3, #32]
    1b68:	add	sp, sp, #36	; 0x24
    1b6c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1b70:	ldr	r3, [pc, #416]	; 1d18 <cd_match_data_init+0x544>
    1b74:	ldr	r2, [pc, #416]	; 1d1c <cd_match_data_init+0x548>
    1b78:	ldr	r1, [pc, #416]	; 1d20 <cd_match_data_init+0x54c>
    1b7c:	mvn	r0, #0
    1b80:	bl	0 <coda_set_error>
    1b84:	mvn	r0, #0
    1b88:	add	sp, sp, #36	; 0x24
    1b8c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1b90:	ldr	r3, [sp, #16]
    1b94:	ldr	r1, [pc, #392]	; 1d24 <cd_match_data_init+0x550>
    1b98:	ldr	r3, [r3, #8]
    1b9c:	mvn	r0, #99	; 0x63
    1ba0:	ldr	r2, [r3, #8]
    1ba4:	bl	0 <coda_set_error>
    1ba8:	ldr	r0, [sp, #12]
    1bac:	bl	0 <free>
    1bb0:	ldr	r0, [sp, #8]
    1bb4:	bl	0 <free>
    1bb8:	b	1b84 <cd_match_data_init+0x3b0>
    1bbc:	mov	r0, r5
    1bc0:	bl	0 <coda_detection_rule_entry_new>
    1bc4:	ldr	r3, [r8]
    1bc8:	str	r0, [sl, #8]
    1bcc:	ldr	r2, [r3, #8]
    1bd0:	cmp	r2, #0
    1bd4:	beq	1b84 <cd_match_data_init+0x3b0>
    1bd8:	b	1b54 <cd_match_data_init+0x380>
    1bdc:	mov	r0, #0
    1be0:	bl	0 <coda_detection_rule_entry_new>
    1be4:	ldr	r3, [r8]
    1be8:	str	r0, [sl, #8]
    1bec:	ldr	r2, [r3, #8]
    1bf0:	cmp	r2, #0
    1bf4:	beq	1b84 <cd_match_data_init+0x3b0>
    1bf8:	cmp	r4, #0
    1bfc:	beq	1b54 <cd_match_data_init+0x380>
    1c00:	mov	r0, r4
    1c04:	bl	0 <strdup>
    1c08:	subs	r1, r0, #0
    1c0c:	ldreq	r3, [pc, #276]	; 1d28 <cd_match_data_init+0x554>
    1c10:	beq	1b74 <cd_match_data_init+0x3a0>
    1c14:	mov	r3, #0
    1c18:	str	r3, [sp, #4]
    1c1c:	str	r3, [sp]
    1c20:	mov	r2, r3
    1c24:	mov	r0, #20
    1c28:	bl	0 <coda_expression_new>
    1c2c:	subs	r5, r0, #0
    1c30:	beq	1c98 <cd_match_data_init+0x4c4>
    1c34:	ldr	r3, [r8]
    1c38:	mov	r1, r5
    1c3c:	ldr	r0, [r3, #8]
    1c40:	bl	0 <coda_detection_rule_entry_set_expression>
    1c44:	cmp	r0, #0
    1c48:	bne	1c88 <cd_match_data_init+0x4b4>
    1c4c:	ldr	r3, [r8]
    1c50:	b	1b54 <cd_match_data_init+0x380>
    1c54:	sub	sl, r5, #64	; 0x40
    1c58:	mov	r6, r0
    1c5c:	clz	sl, sl
    1c60:	lsr	sl, sl, #5
    1c64:	b	1950 <cd_match_data_init+0x17c>
    1c68:	ldr	sl, [sp, #24]
    1c6c:	mov	r6, r0
    1c70:	b	1950 <cd_match_data_init+0x17c>
    1c74:	mov	r0, r8
    1c78:	bl	0 <coda_detection_rule_entry_delete>
    1c7c:	mov	r0, r9
    1c80:	bl	0 <coda_expression_delete>
    1c84:	b	1ba8 <cd_match_data_init+0x3d4>
    1c88:	mov	r0, r5
    1c8c:	bl	0 <coda_expression_delete>
    1c90:	mvn	r0, #0
    1c94:	b	1b0c <cd_match_data_init+0x338>
    1c98:	sub	r0, r0, #400	; 0x190
    1c9c:	mov	r2, r4
    1ca0:	ldr	r1, [pc, #132]	; 1d2c <cd_match_data_init+0x558>
    1ca4:	bl	0 <coda_set_error>
    1ca8:	mvn	r0, #0
    1cac:	b	1b0c <cd_match_data_init+0x338>
    1cb0:	ldr	r3, [pc, #120]	; 1d30 <cd_match_data_init+0x55c>
    1cb4:	ldr	r2, [pc, #96]	; 1d1c <cd_match_data_init+0x548>
    1cb8:	ldr	r1, [pc, #96]	; 1d20 <cd_match_data_init+0x54c>
    1cbc:	mvn	r0, #0
    1cc0:	bl	0 <coda_set_error>
    1cc4:	mov	r0, r9
    1cc8:	bl	0 <coda_expression_delete>
    1ccc:	b	1ba8 <cd_match_data_init+0x3d4>
    1cd0:	mov	r2, r8
    1cd4:	b	1ae4 <cd_match_data_init+0x310>
    1cd8:	ldr	r3, [sp, #16]
    1cdc:	ldr	r1, [pc, #80]	; 1d34 <cd_match_data_init+0x560>
    1ce0:	ldr	r3, [r3, #8]
    1ce4:	b	1b9c <cd_match_data_init+0x3c8>
    1ce8:	mov	r0, r8
    1cec:	bl	0 <coda_detection_rule_entry_delete>
    1cf0:	b	1ba8 <cd_match_data_init+0x3d4>
    1cf4:	ldr	r3, [pc, #60]	; 1d38 <cd_match_data_init+0x564>
    1cf8:	b	1b74 <cd_match_data_init+0x3a0>
    1cfc:	.word	0x00000000
    1d00:	.word	0x000002ec
    1d04:	.word	0x000001e8
    1d08:	.word	0x00000390
    1d0c:	.word	0xfffffe70
    1d10:	.word	0x000002f4
    1d14:	.word	0x00000000
    1d18:	.word	0x000008d1
    1d1c:	.word	0x00000064
    1d20:	.word	0x00000248
    1d24:	.word	0x0000035c
    1d28:	.word	0x0000099b
    1d2c:	.word	0x00000334
    1d30:	.word	0x00000937
    1d34:	.word	0x00000398
    1d38:	.word	0x000008c5

00001d3c <cd_product_definition_set_description>:
    1d3c:	ldr	r3, [r0]
    1d40:	ldr	r1, [r3, #12]
    1d44:	ldr	r3, [r3, #396]	; 0x18c
    1d48:	cmp	r1, #0
    1d4c:	beq	1d58 <cd_product_definition_set_description+0x1c>
    1d50:	ldr	r0, [r3, #8]
    1d54:	b	0 <coda_product_definition_set_description>
    1d58:	ldr	r1, [pc, #4]	; 1d64 <cd_product_definition_set_description+0x28>
    1d5c:	ldr	r0, [r3, #8]
    1d60:	b	0 <coda_product_definition_set_description>
    1d64:	.word	0x000001c4

00001d68 <cd_product_type_set_description>:
    1d68:	ldr	r3, [r0]
    1d6c:	ldr	r1, [r3, #12]
    1d70:	ldr	r3, [r3, #396]	; 0x18c
    1d74:	cmp	r1, #0
    1d78:	beq	1d84 <cd_product_type_set_description+0x1c>
    1d7c:	ldr	r0, [r3, #8]
    1d80:	b	0 <coda_product_type_set_description>
    1d84:	ldr	r1, [pc, #4]	; 1d90 <cd_product_type_set_description+0x28>
    1d88:	ldr	r0, [r3, #8]
    1d8c:	b	0 <coda_product_type_set_description>
    1d90:	.word	0x000001c4

00001d94 <cd_product_class_set_description>:
    1d94:	ldr	r3, [r0]
    1d98:	ldr	r1, [r3, #12]
    1d9c:	ldr	r3, [r3, #396]	; 0x18c
    1da0:	cmp	r1, #0
    1da4:	beq	1db0 <cd_product_class_set_description+0x1c>
    1da8:	ldr	r0, [r3, #8]
    1dac:	b	0 <coda_product_class_set_description>
    1db0:	ldr	r1, [pc, #4]	; 1dbc <cd_product_class_set_description+0x28>
    1db4:	ldr	r0, [r3, #8]
    1db8:	b	0 <coda_product_class_set_description>
    1dbc:	.word	0x000001c4

00001dc0 <push_node>:
    1dc0:	push	{r4, r5, r6, r7, r8, lr}
    1dc4:	mov	r6, r0
    1dc8:	mov	r0, #400	; 0x190
    1dcc:	mov	r7, r1
    1dd0:	mov	r8, r2
    1dd4:	bl	0 <malloc>
    1dd8:	subs	r4, r0, #0
    1ddc:	beq	1eb0 <push_node+0xf0>
    1de0:	mvn	r3, #0
    1de4:	mvn	r2, #0
    1de8:	mov	r5, #0
    1dec:	strd	r2, [r4, #16]
    1df0:	str	r7, [r4]
    1df4:	str	r5, [r4, #4]
    1df8:	str	r5, [r4, #8]
    1dfc:	str	r5, [r4, #12]
    1e00:	bl	0 <coda_NaN>
    1e04:	mov	r1, r5
    1e08:	mov	r2, #172	; 0xac
    1e0c:	str	r5, [r4, #32]
    1e10:	str	r5, [r4, #36]	; 0x24
    1e14:	str	r5, [r4, #40]	; 0x28
    1e18:	str	r5, [r4, #48]	; 0x30
    1e1c:	add	r0, r4, #52	; 0x34
    1e20:	vstr	d0, [r4, #24]
    1e24:	bl	0 <memset>
    1e28:	mov	r1, r5
    1e2c:	mov	r2, #172	; 0xac
    1e30:	add	r0, r4, #224	; 0xe0
    1e34:	bl	0 <memset>
    1e38:	ldr	r1, [r6]
    1e3c:	str	r4, [r6]
    1e40:	cmp	r1, r5
    1e44:	str	r1, [r4, #396]	; 0x18c
    1e48:	beq	1e90 <push_node+0xd0>
    1e4c:	add	r1, r1, r7, lsl #2
    1e50:	ldr	r3, [r1, #52]	; 0x34
    1e54:	cmp	r3, r5
    1e58:	beq	1e90 <push_node+0xd0>
    1e5c:	mov	r1, r8
    1e60:	mov	r0, r6
    1e64:	blx	r3
    1e68:	subs	r5, r0, #0
    1e6c:	bne	1ea8 <push_node+0xe8>
    1e70:	ldr	r3, [r4, #32]
    1e74:	cmp	r3, #0
    1e78:	beq	1e90 <push_node+0xd0>
    1e7c:	ldr	r0, [r6, #4]
    1e80:	ldr	r1, [pc, #60]	; 1ec4 <push_node+0x104>
    1e84:	bl	0 <coda_XML_SetCharacterDataHandler>
    1e88:	mov	r0, r5
    1e8c:	pop	{r4, r5, r6, r7, r8, pc}
    1e90:	ldr	r0, [r6, #4]
    1e94:	ldr	r1, [pc, #44]	; 1ec8 <push_node+0x108>
    1e98:	bl	0 <coda_XML_SetCharacterDataHandler>
    1e9c:	mov	r5, #0
    1ea0:	mov	r0, r5
    1ea4:	pop	{r4, r5, r6, r7, r8, pc}
    1ea8:	mvn	r5, #0
    1eac:	b	1ea0 <push_node+0xe0>
    1eb0:	ldr	r3, [pc, #20]	; 1ecc <push_node+0x10c>
    1eb4:	ldr	r2, [pc, #20]	; 1ed0 <push_node+0x110>
    1eb8:	ldr	r1, [pc, #20]	; 1ed4 <push_node+0x114>
    1ebc:	ldr	r0, [pc, #20]	; 1ed8 <push_node+0x118>
    1ec0:	bl	0 <__assert_fail>
	...
    1ecc:	.word	0x00000018
    1ed0:	.word	0x00000f25
    1ed4:	.word	0x00000064
    1ed8:	.word	0x000003f0

00001edc <cd_vsf_integer_finalise>:
    1edc:	ldr	r3, [r0]
    1ee0:	ldr	r0, [r3, #8]
    1ee4:	b	0 <coda_type_vsf_integer_validate>

00001ee8 <cd_vsf_integer_set_unit>:
    1ee8:	ldr	r3, [r0]
    1eec:	ldr	r1, [r3, #12]
    1ef0:	ldr	r3, [r3, #396]	; 0x18c
    1ef4:	cmp	r1, #0
    1ef8:	beq	1f04 <cd_vsf_integer_set_unit+0x1c>
    1efc:	ldr	r0, [r3, #8]
    1f00:	b	0 <coda_type_vsf_integer_set_unit>
    1f04:	ldr	r1, [pc, #4]	; 1f10 <cd_vsf_integer_set_unit+0x28>
    1f08:	ldr	r0, [r3, #8]
    1f0c:	b	0 <coda_type_vsf_integer_set_unit>
    1f10:	.word	0x000001c4

00001f14 <cd_vsf_integer_set_scale_factor>:
    1f14:	ldr	r3, [r0]
    1f18:	ldr	r2, [r3, #396]	; 0x18c
    1f1c:	ldr	r1, [r3, #8]
    1f20:	ldr	r0, [r2, #8]
    1f24:	b	0 <coda_type_vsf_integer_set_scale_factor>

00001f28 <cd_vsf_integer_set_type>:
    1f28:	ldr	r3, [r0]
    1f2c:	ldr	r2, [r3, #396]	; 0x18c
    1f30:	ldr	r1, [r3, #8]
    1f34:	ldr	r0, [r2, #8]
    1f38:	b	0 <coda_type_vsf_integer_set_type>

00001f3c <cd_union_finalise>:
    1f3c:	ldr	r3, [r0]
    1f40:	ldr	r0, [r3, #8]
    1f44:	b	0 <coda_type_record_validate>

00001f48 <cd_record_finalise>:
    1f48:	b	1f3c <cd_union_finalise>

00001f4c <type_add_attribute>:
    1f4c:	ldr	r3, [r0]
    1f50:	push	{r4, lr}
    1f54:	mov	r4, r0
    1f58:	ldr	r2, [r3, #396]	; 0x18c
    1f5c:	ldr	r1, [r3, #8]
    1f60:	ldr	r0, [r2, #8]
    1f64:	bl	0 <coda_type_add_attribute>
    1f68:	cmp	r0, #0
    1f6c:	mvnne	r0, #0
    1f70:	ldreq	r3, [r4]
    1f74:	streq	r0, [r3, #8]
    1f78:	pop	{r4, pc}

00001f7c <cd_attribute_finalise>:
    1f7c:	push	{r4, lr}
    1f80:	sub	sp, sp, #8
    1f84:	ldr	r3, [r0]
    1f88:	add	r1, sp, #8
    1f8c:	mov	r2, #0
    1f90:	mov	r4, r0
    1f94:	str	r2, [r1, #-4]!
    1f98:	ldr	r0, [r3, #8]
    1f9c:	bl	0 <coda_type_record_field_get_type>
    1fa0:	cmp	r0, #0
    1fa4:	bne	2008 <cd_attribute_finalise+0x8c>
    1fa8:	ldr	r3, [sp, #4]
    1fac:	cmp	r3, #0
    1fb0:	beq	1fc8 <cd_attribute_finalise+0x4c>
    1fb4:	ldr	r3, [r4]
    1fb8:	ldr	r0, [r3, #8]
    1fbc:	bl	0 <coda_type_record_field_validate>
    1fc0:	add	sp, sp, #8
    1fc4:	pop	{r4, pc}
    1fc8:	ldr	r3, [r4]
    1fcc:	ldr	r0, [r3, #44]	; 0x2c
    1fd0:	bl	0 <coda_type_text_new>
    1fd4:	cmp	r0, #0
    1fd8:	str	r0, [sp, #4]
    1fdc:	beq	2008 <cd_attribute_finalise+0x8c>
    1fe0:	ldr	r3, [r4]
    1fe4:	mov	r1, r0
    1fe8:	ldr	r0, [r3, #8]
    1fec:	bl	0 <coda_type_record_field_set_type>
    1ff0:	cmp	r0, #0
    1ff4:	ldr	r0, [sp, #4]
    1ff8:	bne	2004 <cd_attribute_finalise+0x88>
    1ffc:	bl	0 <coda_type_release>
    2000:	b	1fb4 <cd_attribute_finalise+0x38>
    2004:	bl	0 <coda_type_release>
    2008:	mvn	r0, #0
    200c:	b	1fc0 <cd_attribute_finalise+0x44>

00002010 <cd_attribute_set_fixed_value>:
    2010:	ldr	r3, [r0]
    2014:	push	{r4, r5, lr}
    2018:	sub	sp, sp, #12
    201c:	mov	r2, #0
    2020:	mov	r4, r0
    2024:	ldr	r0, [r3, #12]
    2028:	str	r2, [sp, #4]
    202c:	bl	d0 <decode_escaped_string>
    2030:	cmp	r0, #0
    2034:	blt	2108 <cd_attribute_set_fixed_value+0xf8>
    2038:	ldr	r3, [r4]
    203c:	add	r1, sp, #4
    2040:	ldr	r3, [r3, #396]	; 0x18c
    2044:	ldr	r0, [r3, #8]
    2048:	bl	0 <coda_type_record_field_get_type>
    204c:	cmp	r0, #0
    2050:	bne	20f0 <cd_attribute_set_fixed_value+0xe0>
    2054:	ldr	r3, [sp, #4]
    2058:	cmp	r3, #0
    205c:	bne	20e4 <cd_attribute_set_fixed_value+0xd4>
    2060:	ldr	r3, [r4]
    2064:	ldr	r3, [r3, #396]	; 0x18c
    2068:	ldr	r0, [r3, #44]	; 0x2c
    206c:	bl	0 <coda_type_text_new>
    2070:	cmp	r0, #0
    2074:	str	r0, [sp, #4]
    2078:	beq	20f0 <cd_attribute_set_fixed_value+0xe0>
    207c:	ldr	r3, [r4]
    2080:	mov	r1, r0
    2084:	ldr	r3, [r3, #396]	; 0x18c
    2088:	ldr	r0, [r3, #8]
    208c:	bl	0 <coda_type_record_field_set_type>
    2090:	cmp	r0, #0
    2094:	ldr	r0, [sp, #4]
    2098:	bne	20fc <cd_attribute_set_fixed_value+0xec>
    209c:	bl	0 <coda_type_release>
    20a0:	ldr	r3, [r4]
    20a4:	ldr	r0, [sp, #4]
    20a8:	ldr	r1, [r3, #12]
    20ac:	bl	0 <coda_type_text_set_fixed_value>
    20b0:	subs	r5, r0, #0
    20b4:	bne	20f0 <cd_attribute_set_fixed_value+0xe0>
    20b8:	ldr	r3, [r4]
    20bc:	ldr	r0, [r3, #12]
    20c0:	bl	0 <strlen>
    20c4:	mov	r3, r5
    20c8:	mov	r2, r0
    20cc:	ldr	r0, [sp, #4]
    20d0:	bl	0 <coda_type_set_byte_size>
    20d4:	adds	r0, r0, #0
    20d8:	mvnne	r0, #0
    20dc:	add	sp, sp, #12
    20e0:	pop	{r4, r5, pc}
    20e4:	ldr	r1, [pc, #48]	; 211c <cd_attribute_set_fixed_value+0x10c>
    20e8:	ldr	r0, [pc, #48]	; 2120 <cd_attribute_set_fixed_value+0x110>
    20ec:	bl	0 <coda_set_error>
    20f0:	mvn	r0, #0
    20f4:	add	sp, sp, #12
    20f8:	pop	{r4, r5, pc}
    20fc:	bl	0 <coda_type_release>
    2100:	mvn	r0, #0
    2104:	b	20dc <cd_attribute_set_fixed_value+0xcc>
    2108:	ldr	r0, [pc, #16]	; 2120 <cd_attribute_set_fixed_value+0x110>
    210c:	ldr	r1, [pc, #16]	; 2124 <cd_attribute_set_fixed_value+0x114>
    2110:	bl	0 <coda_set_error>
    2114:	mvn	r0, #0
    2118:	b	20dc <cd_attribute_set_fixed_value+0xcc>
    211c:	.word	0x00000400
    2120:	.word	0xfffffe70
    2124:	.word	0x000001f0

00002128 <cd_union_set_field_expression>:
    2128:	ldr	r3, [r0]
    212c:	push	{r4, lr}
    2130:	mov	r4, r0
    2134:	ldr	r2, [r3, #396]	; 0x18c
    2138:	ldr	r1, [r3, #8]
    213c:	ldr	r0, [r2, #8]
    2140:	bl	0 <coda_type_union_set_field_expression>
    2144:	cmp	r0, #0
    2148:	mvnne	r0, #0
    214c:	ldreq	r3, [r4]
    2150:	streq	r0, [r3, #8]
    2154:	pop	{r4, pc}

00002158 <type_set_bit_size>:
    2158:	ldr	r3, [r0]
    215c:	push	{r4, lr}
    2160:	ldr	r1, [r3, #8]
    2164:	cmp	r1, #0
    2168:	beq	2190 <type_set_bit_size+0x38>
    216c:	ldr	r3, [r3, #396]	; 0x18c
    2170:	mov	r4, r0
    2174:	ldr	r0, [r3, #8]
    2178:	bl	0 <coda_type_set_bit_size_expression>
    217c:	cmp	r0, #0
    2180:	bne	21b0 <type_set_bit_size+0x58>
    2184:	ldr	r3, [r4]
    2188:	str	r0, [r3, #8]
    218c:	pop	{r4, pc}
    2190:	ldr	r1, [r3, #396]	; 0x18c
    2194:	ldr	r2, [r3, #16]
    2198:	ldr	r0, [r1, #8]
    219c:	asr	r3, r2, #31
    21a0:	bl	0 <coda_type_set_bit_size>
    21a4:	adds	r0, r0, #0
    21a8:	mvnne	r0, #0
    21ac:	pop	{r4, pc}
    21b0:	mvn	r0, #0
    21b4:	pop	{r4, pc}

000021b8 <type_set_format>:
    21b8:	ldr	r3, [r0, #8]
    21bc:	push	{r4, r5, r6, lr}
    21c0:	cmp	r3, #1
    21c4:	sub	sp, sp, #8
    21c8:	mov	r5, r0
    21cc:	mov	r6, r1
    21d0:	str	r1, [r0]
    21d4:	beq	2250 <type_set_format+0x98>
    21d8:	bcc	2210 <type_set_format+0x58>
    21dc:	cmp	r3, #6
    21e0:	beq	2204 <type_set_format+0x4c>
    21e4:	ldr	r0, [r5, #36]	; 0x24
    21e8:	cmp	r0, #0
    21ec:	beq	21f8 <type_set_format+0x40>
    21f0:	mov	r1, r6
    21f4:	bl	21b8 <type_set_format>
    21f8:	mov	r0, #0
    21fc:	add	sp, sp, #8
    2200:	pop	{r4, r5, r6, pc}
    2204:	ldr	r0, [r0, #44]	; 0x2c
    2208:	bl	21b8 <type_set_format>
    220c:	b	21e4 <type_set_format+0x2c>
    2210:	add	r1, sp, #4
    2214:	bl	0 <coda_type_get_num_record_fields>
    2218:	ldr	r3, [sp, #4]
    221c:	cmp	r3, #0
    2220:	ble	21e4 <type_set_format+0x2c>
    2224:	mov	r4, #0
    2228:	ldr	r3, [r5, #52]	; 0x34
    222c:	mov	r1, r6
    2230:	ldr	r3, [r3, r4, lsl #2]
    2234:	add	r4, r4, #1
    2238:	ldr	r0, [r3, #8]
    223c:	bl	21b8 <type_set_format>
    2240:	ldr	r3, [sp, #4]
    2244:	cmp	r3, r4
    2248:	bgt	2228 <type_set_format+0x70>
    224c:	b	21e4 <type_set_format+0x2c>
    2250:	ldr	r0, [r0, #40]	; 0x28
    2254:	bl	21b8 <type_set_format>
    2258:	b	21e4 <type_set_format+0x2c>

0000225c <cd_text_set_read_type>:
    225c:	ldr	r3, [r0]
    2260:	ldr	r2, [r3, #396]	; 0x18c
    2264:	ldr	r1, [r3, #16]
    2268:	ldr	r0, [r2, #8]
    226c:	b	0 <coda_type_set_read_type>

00002270 <cd_integer_set_read_type>:
    2270:	b	225c <cd_text_set_read_type>

00002274 <cd_float_set_read_type>:
    2274:	b	225c <cd_text_set_read_type>

00002278 <cd_integer_set_unit>:
    2278:	ldr	r3, [r0]
    227c:	ldr	r1, [r3, #12]
    2280:	ldr	r3, [r3, #396]	; 0x18c
    2284:	cmp	r1, #0
    2288:	beq	2294 <cd_integer_set_unit+0x1c>
    228c:	ldr	r0, [r3, #8]
    2290:	b	0 <coda_type_number_set_unit>
    2294:	ldr	r1, [pc, #4]	; 22a0 <cd_integer_set_unit+0x28>
    2298:	ldr	r0, [r3, #8]
    229c:	b	0 <coda_type_number_set_unit>
    22a0:	.word	0x000001c4

000022a4 <cd_float_set_unit>:
    22a4:	b	2278 <cd_integer_set_unit>

000022a8 <cd_time_set_type>:
    22a8:	ldr	r3, [r0]
    22ac:	ldr	r2, [r3, #396]	; 0x18c
    22b0:	ldr	r1, [r3, #8]
    22b4:	ldr	r0, [r2, #8]
    22b8:	b	0 <coda_type_time_set_base_type>

000022bc <cd_time_finalise>:
    22bc:	ldr	r3, [r0]
    22c0:	ldr	r0, [r3, #8]
    22c4:	b	0 <coda_type_time_validate>

000022c8 <cd_time_add_mapping>:
    22c8:	ldr	r3, [r0]
    22cc:	push	{r4, lr}
    22d0:	mov	r4, r0
    22d4:	ldr	r2, [r3, #396]	; 0x18c
    22d8:	ldr	r1, [r3, #8]
    22dc:	ldr	r0, [r2, #8]
    22e0:	bl	0 <coda_type_time_add_ascii_float_mapping>
    22e4:	cmp	r0, #0
    22e8:	mvnne	r0, #0
    22ec:	ldreq	r3, [r4]
    22f0:	streq	r0, [r3, #8]
    22f4:	pop	{r4, pc}

000022f8 <cd_text_finalise>:
    22f8:	ldr	r3, [r0]
    22fc:	ldr	r0, [r3, #8]
    2300:	b	0 <coda_type_text_validate>

00002304 <type_set_byte_size>:
    2304:	ldr	r3, [r0]
    2308:	push	{r4, lr}
    230c:	ldr	r1, [r3, #8]
    2310:	cmp	r1, #0
    2314:	beq	233c <type_set_byte_size+0x38>
    2318:	ldr	r3, [r3, #396]	; 0x18c
    231c:	mov	r4, r0
    2320:	ldr	r0, [r3, #8]
    2324:	bl	0 <coda_type_set_byte_size_expression>
    2328:	cmp	r0, #0
    232c:	bne	235c <type_set_byte_size+0x58>
    2330:	ldr	r3, [r4]
    2334:	str	r0, [r3, #8]
    2338:	pop	{r4, pc}
    233c:	ldr	r1, [r3, #396]	; 0x18c
    2340:	ldr	r2, [r3, #16]
    2344:	ldr	r0, [r1, #8]
    2348:	asr	r3, r2, #31
    234c:	bl	0 <coda_type_set_byte_size>
    2350:	adds	r0, r0, #0
    2354:	mvnne	r0, #0
    2358:	pop	{r4, pc}
    235c:	mvn	r0, #0
    2360:	pop	{r4, pc}

00002364 <cd_raw_finalise>:
    2364:	ldr	r3, [r0]
    2368:	ldr	r0, [r3, #8]
    236c:	b	0 <coda_type_raw_validate>

00002370 <cd_integer_finalise>:
    2370:	ldr	r3, [r0]
    2374:	ldr	r0, [r3, #8]
    2378:	b	0 <coda_type_number_validate>

0000237c <cd_float_finalise>:
    237c:	b	2370 <cd_integer_finalise>

00002380 <cd_integer_add_mapping>:
    2380:	ldr	r3, [r0]
    2384:	push	{r4, lr}
    2388:	mov	r4, r0
    238c:	ldr	r2, [r3, #396]	; 0x18c
    2390:	ldr	r1, [r3, #8]
    2394:	ldr	r0, [r2, #8]
    2398:	bl	0 <coda_type_number_add_ascii_integer_mapping>
    239c:	cmp	r0, #0
    23a0:	mvnne	r0, #0
    23a4:	ldreq	r3, [r4]
    23a8:	streq	r0, [r3, #8]
    23ac:	pop	{r4, pc}

000023b0 <cd_integer_set_conversion>:
    23b0:	ldr	r3, [r0]
    23b4:	push	{r4, lr}
    23b8:	mov	r4, r0
    23bc:	ldr	r2, [r3, #396]	; 0x18c
    23c0:	ldr	r1, [r3, #8]
    23c4:	ldr	r0, [r2, #8]
    23c8:	bl	0 <coda_type_number_set_conversion>
    23cc:	cmp	r0, #0
    23d0:	mvnne	r0, #0
    23d4:	ldreq	r3, [r4]
    23d8:	streq	r0, [r3, #8]
    23dc:	pop	{r4, pc}

000023e0 <cd_float_set_conversion>:
    23e0:	b	23b0 <cd_integer_set_conversion>

000023e4 <cd_conversion_set_unit>:
    23e4:	ldr	r3, [r0]
    23e8:	ldr	r1, [r3, #12]
    23ec:	ldr	r3, [r3, #396]	; 0x18c
    23f0:	cmp	r1, #0
    23f4:	beq	2400 <cd_conversion_set_unit+0x1c>
    23f8:	ldr	r0, [r3, #8]
    23fc:	b	0 <coda_conversion_set_unit>
    2400:	ldr	r1, [pc, #4]	; 240c <cd_conversion_set_unit+0x28>
    2404:	ldr	r0, [r3, #8]
    2408:	b	0 <coda_conversion_set_unit>
    240c:	.word	0x000001c4

00002410 <cd_integer_set_little_endian>:
    2410:	ldr	r3, [r0]
    2414:	mov	r1, #1
    2418:	ldr	r3, [r3, #396]	; 0x18c
    241c:	ldr	r0, [r3, #8]
    2420:	b	0 <coda_type_number_set_endianness>

00002424 <cd_float_set_little_endian>:
    2424:	b	2410 <cd_integer_set_little_endian>

00002428 <cd_float_add_mapping>:
    2428:	ldr	r3, [r0]
    242c:	push	{r4, lr}
    2430:	mov	r4, r0
    2434:	ldr	r2, [r3, #396]	; 0x18c
    2438:	ldr	r1, [r3, #8]
    243c:	ldr	r0, [r2, #8]
    2440:	bl	0 <coda_type_number_add_ascii_float_mapping>
    2444:	cmp	r0, #0
    2448:	mvnne	r0, #0
    244c:	ldreq	r3, [r4]
    2450:	streq	r0, [r3, #8]
    2454:	pop	{r4, pc}

00002458 <cd_complex_finalise>:
    2458:	ldr	r3, [r0]
    245c:	ldr	r0, [r3, #8]
    2460:	b	0 <coda_type_complex_validate>

00002464 <cd_complex_set_type>:
    2464:	ldr	r3, [r0]
    2468:	ldr	r2, [r3, #396]	; 0x18c
    246c:	ldr	r1, [r3, #8]
    2470:	ldr	r0, [r2, #8]
    2474:	b	0 <coda_type_complex_set_type>

00002478 <cd_array_finalise>:
    2478:	ldr	r3, [r0]
    247c:	ldr	r0, [r3, #8]
    2480:	b	0 <coda_type_array_validate>

00002484 <cd_array_add_dimension>:
    2484:	ldr	r3, [r0]
    2488:	push	{r4, lr}
    248c:	mov	r4, r0
    2490:	ldr	r1, [r3, #8]
    2494:	cmp	r1, #0
    2498:	beq	24bc <cd_array_add_dimension+0x38>
    249c:	ldr	r3, [r3, #396]	; 0x18c
    24a0:	ldr	r0, [r3, #8]
    24a4:	bl	0 <coda_type_array_add_variable_dimension>
    24a8:	cmp	r0, #0
    24ac:	bne	24e4 <cd_array_add_dimension+0x60>
    24b0:	ldr	r3, [r4]
    24b4:	str	r0, [r3, #8]
    24b8:	pop	{r4, pc}
    24bc:	ldr	r2, [r3, #4]
    24c0:	cmp	r2, #0
    24c4:	bne	249c <cd_array_add_dimension+0x18>
    24c8:	ldr	r2, [r3, #396]	; 0x18c
    24cc:	ldr	r1, [r3, #16]
    24d0:	ldr	r0, [r2, #8]
    24d4:	bl	0 <coda_type_array_add_fixed_dimension>
    24d8:	adds	r0, r0, #0
    24dc:	mvnne	r0, #0
    24e0:	pop	{r4, pc}
    24e4:	mvn	r0, #0
    24e8:	pop	{r4, pc}

000024ec <cd_array_set_type>:
    24ec:	ldr	r3, [r0]
    24f0:	ldr	r2, [r3, #396]	; 0x18c
    24f4:	ldr	r1, [r3, #8]
    24f8:	ldr	r0, [r2, #8]
    24fc:	b	0 <coda_type_array_set_base_type>

00002500 <parser_info_delete>:
    2500:	push	{r4, r5, r6, lr}
    2504:	mov	r5, r0
    2508:	ldr	r4, [r0]
    250c:	cmp	r4, #0
    2510:	beq	255c <parser_info_delete+0x5c>
    2514:	ldr	r0, [r4, #8]
    2518:	cmp	r0, #0
    251c:	beq	2530 <parser_info_delete+0x30>
    2520:	ldr	r3, [r4, #40]	; 0x28
    2524:	cmp	r3, #0
    2528:	beq	2598 <parser_info_delete+0x98>
    252c:	blx	r3
    2530:	ldr	r0, [r4, #12]
    2534:	cmp	r0, #0
    2538:	beq	2540 <parser_info_delete+0x40>
    253c:	bl	0 <free>
    2540:	ldr	r3, [r4, #396]	; 0x18c
    2544:	mov	r0, r4
    2548:	str	r3, [r5]
    254c:	bl	0 <free>
    2550:	ldr	r4, [r5]
    2554:	cmp	r4, #0
    2558:	bne	2514 <parser_info_delete+0x14>
    255c:	ldr	r0, [r5, #4]
    2560:	cmp	r0, #0
    2564:	beq	256c <parser_info_delete+0x6c>
    2568:	bl	0 <coda_XML_ParserFree>
    256c:	ldr	r0, [r5, #8]
    2570:	cmp	r0, #0
    2574:	beq	257c <parser_info_delete+0x7c>
    2578:	bl	0 <coda_hashtable_delete>
    257c:	ldr	r0, [r5, #12]
    2580:	cmp	r0, #0
    2584:	beq	258c <parser_info_delete+0x8c>
    2588:	bl	0 <free>
    258c:	mov	r3, #0
    2590:	str	r3, [r5, #16]
    2594:	pop	{r4, r5, r6, pc}
    2598:	ldr	r3, [pc, #12]	; 25ac <parser_info_delete+0xac>
    259c:	ldr	r2, [pc, #12]	; 25b0 <parser_info_delete+0xb0>
    25a0:	ldr	r1, [pc, #12]	; 25b4 <parser_info_delete+0xb4>
    25a4:	ldr	r0, [pc, #12]	; 25b8 <parser_info_delete+0xb8>
    25a8:	bl	0 <__assert_fail>
    25ac:	.word	0x00000024
    25b0:	.word	0x00000fd7
    25b4:	.word	0x00000064
    25b8:	.word	0x00000430

000025bc <parse_entry>:
    25bc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    25c0:	sub	sp, sp, #68	; 0x44
    25c4:	cmp	r1, #1
    25c8:	mov	r6, r1
    25cc:	mov	r7, r2
    25d0:	mov	r9, r3
    25d4:	mov	r8, r0
    25d8:	ldr	sl, [sp, #104]	; 0x68
    25dc:	beq	286c <parse_entry+0x2b0>
    25e0:	bcc	28e0 <parse_entry+0x324>
    25e4:	cmp	r1, #2
    25e8:	bne	27b4 <parse_entry+0x1f8>
    25ec:	cmp	r2, #0
    25f0:	beq	2b7c <parse_entry+0x5c0>
    25f4:	mov	r0, r2
    25f8:	bl	0 <strlen>
    25fc:	add	r4, r0, #14
    2600:	mov	r0, r4
    2604:	bl	0 <malloc>
    2608:	subs	r5, r0, #0
    260c:	beq	2a44 <parse_entry+0x488>
    2610:	mov	r2, r7
    2614:	ldr	r1, [pc, #1396]	; 2b90 <parse_entry+0x5d4>
    2618:	mov	r0, r5
    261c:	bl	0 <sprintf>
    2620:	mov	r1, r5
    2624:	mov	r0, r8
    2628:	bl	0 <coda_za_get_entry_by_name>
    262c:	subs	r4, r0, #0
    2630:	beq	27e4 <parse_entry+0x228>
    2634:	mov	r0, r5
    2638:	bl	0 <free>
    263c:	mov	r5, #1
    2640:	mov	r3, #0
    2644:	mov	r0, r4
    2648:	str	r9, [sp, #36]	; 0x24
    264c:	str	r3, [sp, #12]
    2650:	str	r3, [sp, #16]
    2654:	str	r3, [sp, #20]
    2658:	str	r3, [sp, #24]
    265c:	str	r3, [sp, #44]	; 0x2c
    2660:	str	r3, [sp, #48]	; 0x30
    2664:	str	r3, [sp, #52]	; 0x34
    2668:	str	r3, [sp, #60]	; 0x3c
    266c:	str	r8, [sp, #28]
    2670:	str	r7, [sp, #32]
    2674:	str	sl, [sp, #40]	; 0x28
    2678:	str	r5, [sp, #56]	; 0x38
    267c:	bl	0 <coda_za_get_entry_size>
    2680:	mov	r9, r0
    2684:	bl	0 <malloc>
    2688:	cmp	r0, #0
    268c:	mov	r1, r0
    2690:	str	r0, [sp, #24]
    2694:	beq	2a80 <parse_entry+0x4c4>
    2698:	mov	r0, r4
    269c:	bl	0 <coda_za_read_entry>
    26a0:	cmp	r0, #0
    26a4:	bne	29f0 <parse_entry+0x434>
    26a8:	mov	r0, r5
    26ac:	bl	0 <coda_hashtable_new>
    26b0:	cmp	r0, #0
    26b4:	str	r0, [sp, #20]
    26b8:	beq	2b14 <parse_entry+0x558>
    26bc:	ldr	r4, [pc, #1232]	; 2b94 <parse_entry+0x5d8>
    26c0:	ldr	r1, [pc, #1232]	; 2b98 <parse_entry+0x5dc>
    26c4:	add	r5, r4, #168	; 0xa8
    26c8:	b	26d4 <parse_entry+0x118>
    26cc:	ldr	r0, [sp, #20]
    26d0:	ldr	r1, [r4, #4]!
    26d4:	bl	0 <coda_hashtable_add_name>
    26d8:	subs	sl, r0, #0
    26dc:	bne	2a18 <parse_entry+0x45c>
    26e0:	cmp	r4, r5
    26e4:	bne	26cc <parse_entry+0x110>
    26e8:	mov	r1, #32
    26ec:	bl	0 <coda_XML_ParserCreateNS>
    26f0:	cmp	r0, #0
    26f4:	str	r0, [sp, #16]
    26f8:	beq	2a64 <parse_entry+0x4a8>
    26fc:	add	r4, sp, #12
    2700:	mov	r1, r4
    2704:	bl	0 <coda_XML_SetUserData>
    2708:	ldr	r2, [pc, #1164]	; 2b9c <parse_entry+0x5e0>
    270c:	ldr	r1, [pc, #1164]	; 2ba0 <parse_entry+0x5e4>
    2710:	ldr	r0, [sp, #16]
    2714:	bl	0 <coda_XML_SetElementHandler>
    2718:	mov	r2, sl
    271c:	mov	r0, r4
    2720:	mvn	r1, #0
    2724:	bl	1dc0 <push_node>
    2728:	ldr	r3, [sp, #12]
    272c:	cmp	r6, #1
    2730:	str	sl, [r3, #48]	; 0x30
    2734:	beq	2934 <parse_entry+0x378>
    2738:	bcc	2920 <parse_entry+0x364>
    273c:	cmp	r6, #2
    2740:	ldreq	r2, [pc, #1116]	; 2ba4 <parse_entry+0x5e8>
    2744:	streq	sl, [r3, #348]	; 0x15c
    2748:	streq	r2, [r3, #176]	; 0xb0
    274c:	ldr	r5, [pc, #1108]	; 2ba8 <parse_entry+0x5ec>
    2750:	bl	0 <__aeabi_read_tp>
    2754:	mov	fp, r0
    2758:	ldr	r5, [pc, r5]
    275c:	mov	r0, #0
    2760:	mov	r2, r9
    2764:	str	r0, [fp, r5]
    2768:	mov	r3, #1
    276c:	ldr	r1, [sp, #24]
    2770:	ldr	r0, [sp, #16]
    2774:	bl	0 <coda_XML_Parse>
    2778:	cmp	r0, #0
    277c:	beq	2804 <parse_entry+0x248>
    2780:	ldr	r3, [pc, #1060]	; 2bac <parse_entry+0x5f0>
    2784:	ldr	r3, [pc, r3]
    2788:	ldr	r3, [fp, r3]
    278c:	cmp	r3, #0
    2790:	beq	27a0 <parse_entry+0x1e4>
    2794:	ldr	r2, [sp, #52]	; 0x34
    2798:	cmp	r2, #0
    279c:	beq	284c <parse_entry+0x290>
    27a0:	mov	r0, r4
    27a4:	bl	2500 <parser_info_delete>
    27a8:	mov	r0, sl
    27ac:	add	sp, sp, #68	; 0x44
    27b0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    27b4:	mov	r1, #0
    27b8:	bl	0 <coda_za_get_entry_by_name>
    27bc:	subs	r4, r0, #0
    27c0:	movne	r5, #0
    27c4:	bne	2634 <parse_entry+0x78>
    27c8:	cmp	r6, #1
    27cc:	beq	2b74 <parse_entry+0x5b8>
    27d0:	bcc	2b48 <parse_entry+0x58c>
    27d4:	cmp	r6, #2
    27d8:	movne	r5, r4
    27dc:	bne	28d0 <parse_entry+0x314>
    27e0:	mov	r5, r4
    27e4:	mov	r0, r8
    27e8:	bl	0 <coda_za_get_filename>
    27ec:	mov	r3, r7
    27f0:	ldr	r1, [pc, #952]	; 2bb0 <parse_entry+0x5f4>
    27f4:	mov	r2, r0
    27f8:	ldr	r0, [pc, #948]	; 2bb4 <parse_entry+0x5f8>
    27fc:	bl	0 <coda_set_error>
    2800:	b	28d0 <parse_entry+0x314>
    2804:	ldr	r3, [sp, #52]	; 0x34
    2808:	cmp	r3, #0
    280c:	bne	27a0 <parse_entry+0x1e4>
    2810:	ldr	r3, [pc, #928]	; 2bb8 <parse_entry+0x5fc>
    2814:	ldr	r3, [pc, r3]
    2818:	ldr	r3, [fp, r3]
    281c:	cmp	r3, #0
    2820:	bne	284c <parse_entry+0x290>
    2824:	ldr	r0, [sp, #16]
    2828:	bl	0 <coda_XML_GetErrorCode>
    282c:	bl	0 <coda_XML_ErrorString>
    2830:	ldr	r1, [pc, #900]	; 2bbc <parse_entry+0x600>
    2834:	mov	r2, r0
    2838:	ldr	r0, [pc, #884]	; 2bb4 <parse_entry+0x5f8>
    283c:	bl	0 <coda_set_error>
    2840:	ldr	r3, [pc, #888]	; 2bc0 <parse_entry+0x604>
    2844:	ldr	r3, [pc, r3]
    2848:	ldr	r3, [fp, r3]
    284c:	add	r3, r3, #400	; 0x190
    2850:	add	r3, r3, #1
    2854:	cmp	r3, #1
    2858:	bls	2aac <parse_entry+0x4f0>
    285c:	mov	r0, r4
    2860:	bl	2500 <parser_info_delete>
    2864:	mvn	sl, #0
    2868:	b	27a8 <parse_entry+0x1ec>
    286c:	cmp	r2, #0
    2870:	beq	2b60 <parse_entry+0x5a4>
    2874:	mov	r0, r2
    2878:	bl	0 <strlen>
    287c:	add	r4, r0, #11
    2880:	mov	r0, r4
    2884:	bl	0 <malloc>
    2888:	subs	r5, r0, #0
    288c:	beq	29f8 <parse_entry+0x43c>
    2890:	mov	r2, r7
    2894:	ldr	r1, [pc, #808]	; 2bc4 <parse_entry+0x608>
    2898:	mov	r0, r5
    289c:	bl	0 <sprintf>
    28a0:	mov	r1, r5
    28a4:	mov	r0, r8
    28a8:	bl	0 <coda_za_get_entry_by_name>
    28ac:	subs	r4, r0, #0
    28b0:	bne	2634 <parse_entry+0x78>
    28b4:	mov	r0, r8
    28b8:	bl	0 <coda_za_get_filename>
    28bc:	mov	r3, r7
    28c0:	ldr	r1, [pc, #768]	; 2bc8 <parse_entry+0x60c>
    28c4:	mov	r2, r0
    28c8:	ldr	r0, [pc, #740]	; 2bb4 <parse_entry+0x5f8>
    28cc:	bl	0 <coda_set_error>
    28d0:	mov	r0, r5
    28d4:	bl	0 <free>
    28d8:	mvn	sl, #0
    28dc:	b	27a8 <parse_entry+0x1ec>
    28e0:	ldr	r0, [pc, #740]	; 2bcc <parse_entry+0x610>
    28e4:	bl	0 <strdup>
    28e8:	subs	r5, r0, #0
    28ec:	beq	2a2c <parse_entry+0x470>
    28f0:	mov	r1, r5
    28f4:	mov	r0, r8
    28f8:	bl	0 <coda_za_get_entry_by_name>
    28fc:	subs	r4, r0, #0
    2900:	bne	2634 <parse_entry+0x78>
    2904:	mov	r0, r8
    2908:	bl	0 <coda_za_get_filename>
    290c:	ldr	r1, [pc, #700]	; 2bd0 <parse_entry+0x614>
    2910:	mov	r2, r0
    2914:	ldr	r0, [pc, #664]	; 2bb4 <parse_entry+0x5f8>
    2918:	bl	0 <coda_set_error>
    291c:	b	28d0 <parse_entry+0x314>
    2920:	ldr	r1, [pc, #684]	; 2bd4 <parse_entry+0x618>
    2924:	ldr	r2, [pc, #684]	; 2bd8 <parse_entry+0x61c>
    2928:	str	r1, [r3, #172]	; 0xac
    292c:	str	r2, [r3, #344]	; 0x158
    2930:	b	274c <parse_entry+0x190>
    2934:	ldr	r1, [pc, #672]	; 2bdc <parse_entry+0x620>
    2938:	ldr	r2, [pc, #672]	; 2be0 <parse_entry+0x624>
    293c:	str	r1, [r3, #56]	; 0x38
    2940:	ldr	r1, [pc, #668]	; 2be4 <parse_entry+0x628>
    2944:	str	r2, [r3, #228]	; 0xe4
    2948:	str	r2, [r3, #232]	; 0xe8
    294c:	str	r2, [r3, #236]	; 0xec
    2950:	str	r2, [r3, #224]	; 0xe0
    2954:	str	r2, [r3, #260]	; 0x104
    2958:	str	r2, [r3, #292]	; 0x124
    295c:	str	r2, [r3, #304]	; 0x130
    2960:	str	r2, [r3, #332]	; 0x14c
    2964:	str	r2, [r3, #360]	; 0x168
    2968:	str	r2, [r3, #364]	; 0x16c
    296c:	str	r2, [r3, #372]	; 0x174
    2970:	str	r2, [r3, #376]	; 0x178
    2974:	str	r2, [r3, #380]	; 0x17c
    2978:	str	r2, [r3, #384]	; 0x180
    297c:	str	r2, [r3, #392]	; 0x188
    2980:	str	r1, [r3, #60]	; 0x3c
    2984:	ldr	r2, [pc, #604]	; 2be8 <parse_entry+0x62c>
    2988:	ldr	r1, [pc, #604]	; 2bec <parse_entry+0x630>
    298c:	str	r2, [r3, #88]	; 0x58
    2990:	str	r1, [r3, #52]	; 0x34
    2994:	ldr	r2, [pc, #596]	; 2bf0 <parse_entry+0x634>
    2998:	ldr	r1, [pc, #596]	; 2bf4 <parse_entry+0x638>
    299c:	str	r2, [r3, #132]	; 0x84
    29a0:	str	r1, [r3, #120]	; 0x78
    29a4:	ldr	r2, [pc, #588]	; 2bf8 <parse_entry+0x63c>
    29a8:	ldr	r1, [pc, #588]	; 2bfc <parse_entry+0x640>
    29ac:	str	r2, [r3, #188]	; 0xbc
    29b0:	str	r1, [r3, #160]	; 0xa0
    29b4:	ldr	r2, [pc, #580]	; 2c00 <parse_entry+0x644>
    29b8:	ldr	r1, [pc, #580]	; 2c04 <parse_entry+0x648>
    29bc:	str	r2, [r3, #200]	; 0xc8
    29c0:	str	r1, [r3, #192]	; 0xc0
    29c4:	ldr	r2, [pc, #572]	; 2c08 <parse_entry+0x64c>
    29c8:	ldr	r1, [pc, #572]	; 2c0c <parse_entry+0x650>
    29cc:	ldr	r0, [pc, #572]	; 2c10 <parse_entry+0x654>
    29d0:	str	r1, [r3, #204]	; 0xcc
    29d4:	str	r2, [r3, #208]	; 0xd0
    29d8:	ldr	r1, [pc, #564]	; 2c14 <parse_entry+0x658>
    29dc:	ldr	r2, [pc, #564]	; 2c18 <parse_entry+0x65c>
    29e0:	str	r0, [r3, #64]	; 0x40
    29e4:	str	r1, [r3, #212]	; 0xd4
    29e8:	str	r2, [r3, #220]	; 0xdc
    29ec:	b	274c <parse_entry+0x190>
    29f0:	add	r4, sp, #12
    29f4:	b	285c <parse_entry+0x2a0>
    29f8:	ldr	r3, [pc, #540]	; 2c1c <parse_entry+0x660>
    29fc:	mov	r2, r4
    2a00:	str	r3, [sp]
    2a04:	ldr	r1, [pc, #532]	; 2c20 <parse_entry+0x664>
    2a08:	ldr	r3, [pc, #532]	; 2c24 <parse_entry+0x668>
    2a0c:	mvn	r0, #0
    2a10:	bl	0 <coda_set_error>
    2a14:	b	2890 <parse_entry+0x2d4>
    2a18:	ldr	r3, [pc, #520]	; 2c28 <parse_entry+0x66c>
    2a1c:	ldr	r2, [pc, #520]	; 2c2c <parse_entry+0x670>
    2a20:	ldr	r1, [pc, #508]	; 2c24 <parse_entry+0x668>
    2a24:	ldr	r0, [pc, #516]	; 2c30 <parse_entry+0x674>
    2a28:	bl	0 <__assert_fail>
    2a2c:	ldr	r3, [pc, #512]	; 2c34 <parse_entry+0x678>
    2a30:	ldr	r2, [pc, #492]	; 2c24 <parse_entry+0x668>
    2a34:	ldr	r1, [pc, #508]	; 2c38 <parse_entry+0x67c>
    2a38:	mvn	r0, #0
    2a3c:	bl	0 <coda_set_error>
    2a40:	b	28f0 <parse_entry+0x334>
    2a44:	ldr	r3, [pc, #496]	; 2c3c <parse_entry+0x680>
    2a48:	mov	r2, r4
    2a4c:	str	r3, [sp]
    2a50:	ldr	r1, [pc, #456]	; 2c20 <parse_entry+0x664>
    2a54:	ldr	r3, [pc, #456]	; 2c24 <parse_entry+0x668>
    2a58:	mvn	r0, #0
    2a5c:	bl	0 <coda_set_error>
    2a60:	b	2610 <parse_entry+0x54>
    2a64:	ldr	r1, [pc, #468]	; 2c40 <parse_entry+0x684>
    2a68:	mvn	r0, #13
    2a6c:	bl	0 <coda_set_error>
    2a70:	add	r0, sp, #12
    2a74:	bl	2500 <parser_info_delete>
    2a78:	mvn	sl, #0
    2a7c:	b	27a8 <parse_entry+0x1ec>
    2a80:	ldr	r3, [pc, #444]	; 2c44 <parse_entry+0x688>
    2a84:	mov	r2, r9
    2a88:	str	r3, [sp]
    2a8c:	ldr	r1, [pc, #396]	; 2c20 <parse_entry+0x664>
    2a90:	ldr	r3, [pc, #396]	; 2c24 <parse_entry+0x668>
    2a94:	mvn	r0, #0
    2a98:	bl	0 <coda_set_error>
    2a9c:	add	r0, sp, #12
    2aa0:	bl	2500 <parser_info_delete>
    2aa4:	mvn	sl, #0
    2aa8:	b	27a8 <parse_entry+0x1ec>
    2aac:	ldr	r3, [sp, #56]	; 0x38
    2ab0:	cmp	r3, #0
    2ab4:	beq	285c <parse_entry+0x2a0>
    2ab8:	mov	r0, r8
    2abc:	bl	0 <coda_za_get_filename>
    2ac0:	mov	r1, r0
    2ac4:	ldr	r0, [pc, #380]	; 2c48 <parse_entry+0x68c>
    2ac8:	bl	0 <coda_add_error_message>
    2acc:	cmp	r6, #1
    2ad0:	beq	2b38 <parse_entry+0x57c>
    2ad4:	bcc	2b50 <parse_entry+0x594>
    2ad8:	cmp	r6, #2
    2adc:	bne	2aec <parse_entry+0x530>
    2ae0:	mov	r1, r7
    2ae4:	ldr	r0, [pc, #352]	; 2c4c <parse_entry+0x690>
    2ae8:	bl	0 <coda_add_error_message>
    2aec:	ldr	r0, [sp, #16]
    2af0:	bl	0 <coda_XML_GetCurrentLineNumber>
    2af4:	mov	r5, r0
    2af8:	ldr	r0, [sp, #16]
    2afc:	bl	0 <coda_XML_GetCurrentByteIndex>
    2b00:	mov	r1, r5
    2b04:	mov	r2, r0
    2b08:	ldr	r0, [pc, #320]	; 2c50 <parse_entry+0x694>
    2b0c:	bl	0 <coda_add_error_message>
    2b10:	b	285c <parse_entry+0x2a0>
    2b14:	ldr	r3, [pc, #312]	; 2c54 <parse_entry+0x698>
    2b18:	ldr	r2, [pc, #260]	; 2c24 <parse_entry+0x668>
    2b1c:	ldr	r1, [pc, #308]	; 2c58 <parse_entry+0x69c>
    2b20:	mvn	r0, #0
    2b24:	bl	0 <coda_set_error>
    2b28:	add	r0, sp, #12
    2b2c:	bl	2500 <parser_info_delete>
    2b30:	mvn	sl, #0
    2b34:	b	27a8 <parse_entry+0x1ec>
    2b38:	mov	r1, r7
    2b3c:	ldr	r0, [pc, #280]	; 2c5c <parse_entry+0x6a0>
    2b40:	bl	0 <coda_add_error_message>
    2b44:	b	2aec <parse_entry+0x530>
    2b48:	mov	r5, r4
    2b4c:	b	2904 <parse_entry+0x348>
    2b50:	mov	r1, #0
    2b54:	ldr	r0, [pc, #260]	; 2c60 <parse_entry+0x6a4>
    2b58:	bl	0 <coda_add_error_message>
    2b5c:	b	2aec <parse_entry+0x530>
    2b60:	ldr	r3, [pc, #192]	; 2c28 <parse_entry+0x66c>
    2b64:	ldr	r2, [pc, #248]	; 2c64 <parse_entry+0x6a8>
    2b68:	ldr	r1, [pc, #180]	; 2c24 <parse_entry+0x668>
    2b6c:	ldr	r0, [pc, #244]	; 2c68 <parse_entry+0x6ac>
    2b70:	bl	0 <__assert_fail>
    2b74:	mov	r5, r4
    2b78:	b	28b4 <parse_entry+0x2f8>
    2b7c:	ldr	r3, [pc, #164]	; 2c28 <parse_entry+0x66c>
    2b80:	ldr	r2, [pc, #228]	; 2c6c <parse_entry+0x6b0>
    2b84:	ldr	r1, [pc, #152]	; 2c24 <parse_entry+0x668>
    2b88:	ldr	r0, [pc, #216]	; 2c68 <parse_entry+0x6ac>
    2b8c:	bl	0 <__assert_fail>
    2b90:	.word	0x000004a8
    2b94:	.word	0x00000044
    2b98:	.word	0x00000448
	...
    2ba8:	.word	0x00000448
    2bac:	.word	0x00000420
    2bb0:	.word	0x00000528
    2bb4:	.word	0xfffffe70
    2bb8:	.word	0x0000039c
    2bbc:	.word	0x000005c4
    2bc0:	.word	0x00000374
    2bc4:	.word	0x00000498
    2bc8:	.word	0x000004e8
    2bcc:	.word	0x0000047c
    2bd0:	.word	0x000004b8
	...
    2c1c:	.word	0x0000100a
    2c20:	.word	0x000002b4
    2c24:	.word	0x00000064
    2c28:	.word	0x00000038
    2c2c:	.word	0x00001052
    2c30:	.word	0x000005a4
    2c34:	.word	0x00001001
    2c38:	.word	0x00000248
    2c3c:	.word	0x00001014
    2c40:	.word	0x000005a8
    2c44:	.word	0x0000103c
    2c48:	.word	0x000005d8
    2c4c:	.word	0x000005f8
    2c50:	.word	0x00000604
    2c54:	.word	0x0000104a
    2c58:	.word	0x0000056c
    2c5c:	.word	0x000005ec
    2c60:	.word	0x000005e4
    2c64:	.word	0x00001005
    2c68:	.word	0x00000488
    2c6c:	.word	0x0000100f

00002c70 <read_definition_file>:
    2c70:	push	{r4, r5, lr}
    2c74:	sub	sp, sp, #12
    2c78:	ldr	r1, [pc, #76]	; 2ccc <read_definition_file+0x5c>
    2c7c:	bl	0 <coda_za_open>
    2c80:	subs	r5, r0, #0
    2c84:	beq	2cc4 <read_definition_file+0x54>
    2c88:	mov	r3, #0
    2c8c:	str	r3, [sp]
    2c90:	mov	r2, r3
    2c94:	mov	r1, r3
    2c98:	bl	25bc <parse_entry>
    2c9c:	subs	r4, r0, #0
    2ca0:	mov	r0, r5
    2ca4:	bne	2cb8 <read_definition_file+0x48>
    2ca8:	bl	0 <coda_za_close>
    2cac:	mov	r0, r4
    2cb0:	add	sp, sp, #12
    2cb4:	pop	{r4, r5, pc}
    2cb8:	bl	0 <coda_za_close>
    2cbc:	mvn	r4, #0
    2cc0:	b	2cac <read_definition_file+0x3c>
    2cc4:	mvn	r4, #0
    2cc8:	b	2cac <read_definition_file+0x3c>
    2ccc:	.word	0x00000000

00002cd0 <is_whitespace>:
    2cd0:	cmp	r0, #0
    2cd4:	beq	2d48 <is_whitespace+0x78>
    2cd8:	cmp	r1, #0
    2cdc:	ble	2d40 <is_whitespace+0x70>
    2ce0:	ldrb	r3, [r0]
    2ce4:	sub	r3, r3, #9
    2ce8:	uxtb	r3, r3
    2cec:	cmp	r3, #23
    2cf0:	bhi	2d38 <is_whitespace+0x68>
    2cf4:	ldr	r2, [pc, #100]	; 2d60 <is_whitespace+0x90>
    2cf8:	mvn	r3, r2, lsr r3
    2cfc:	tst	r3, #1
    2d00:	addeq	r1, r0, r1
    2d04:	addeq	r0, r0, #1
    2d08:	beq	2d1c <is_whitespace+0x4c>
    2d0c:	b	2d38 <is_whitespace+0x68>
    2d10:	mvn	r3, r2, lsr r3
    2d14:	tst	r3, #1
    2d18:	bne	2d38 <is_whitespace+0x68>
    2d1c:	cmp	r1, r0
    2d20:	beq	2d40 <is_whitespace+0x70>
    2d24:	ldrb	r3, [r0], #1
    2d28:	sub	r3, r3, #9
    2d2c:	uxtb	r3, r3
    2d30:	cmp	r3, #23
    2d34:	bls	2d10 <is_whitespace+0x40>
    2d38:	mov	r0, #0
    2d3c:	bx	lr
    2d40:	mov	r0, #1
    2d44:	bx	lr
    2d48:	push	{r4, lr}
    2d4c:	ldr	r3, [pc, #16]	; 2d64 <is_whitespace+0x94>
    2d50:	ldr	r2, [pc, #16]	; 2d68 <is_whitespace+0x98>
    2d54:	ldr	r1, [pc, #16]	; 2d6c <is_whitespace+0x9c>
    2d58:	ldr	r0, [pc, #16]	; 2d70 <is_whitespace+0xa0>
    2d5c:	bl	0 <__assert_fail>
    2d60:	.word	0x00800013
    2d64:	.word	0x000000f0
    2d68:	.word	0x00000122
    2d6c:	.word	0x00000064
    2d70:	.word	0x00000624

00002d74 <void_expression_finalise>:
    2d74:	ldr	r3, [r0]
    2d78:	push	{r4, r5, lr}
    2d7c:	sub	sp, sp, #12
    2d80:	ldr	r4, [r3, #12]
    2d84:	cmp	r4, #0
    2d88:	beq	2e10 <void_expression_finalise+0x9c>
    2d8c:	mov	r5, r0
    2d90:	mov	r0, r4
    2d94:	bl	0 <strlen>
    2d98:	mov	r1, r0
    2d9c:	mov	r0, r4
    2da0:	bl	2cd0 <is_whitespace>
    2da4:	cmp	r0, #0
    2da8:	mov	r0, r4
    2dac:	bne	2e00 <void_expression_finalise+0x8c>
    2db0:	add	r1, sp, #4
    2db4:	bl	0 <coda_expression_from_string>
    2db8:	subs	r4, r0, #0
    2dbc:	bne	2e1c <void_expression_finalise+0xa8>
    2dc0:	ldr	r3, [r5]
    2dc4:	ldr	r0, [r3, #12]
    2dc8:	bl	0 <free>
    2dcc:	ldr	r3, [r5]
    2dd0:	ldr	r0, [sp, #4]
    2dd4:	mov	r1, sp
    2dd8:	str	r4, [r3, #12]
    2ddc:	str	r0, [r3, #8]
    2de0:	bl	0 <coda_expression_get_type>
    2de4:	cmp	r0, #0
    2de8:	bne	2e1c <void_expression_finalise+0xa8>
    2dec:	ldr	r3, [sp]
    2df0:	cmp	r3, #5
    2df4:	bne	2e28 <void_expression_finalise+0xb4>
    2df8:	add	sp, sp, #12
    2dfc:	pop	{r4, r5, pc}
    2e00:	bl	0 <free>
    2e04:	ldr	r3, [r5]
    2e08:	mov	r2, #0
    2e0c:	str	r2, [r3, #12]
    2e10:	ldr	r1, [pc, #36]	; 2e3c <void_expression_finalise+0xc8>
    2e14:	ldr	r0, [pc, #36]	; 2e40 <void_expression_finalise+0xcc>
    2e18:	bl	0 <coda_set_error>
    2e1c:	mvn	r0, #0
    2e20:	add	sp, sp, #12
    2e24:	pop	{r4, r5, pc}
    2e28:	ldr	r0, [pc, #16]	; 2e40 <void_expression_finalise+0xcc>
    2e2c:	ldr	r1, [pc, #16]	; 2e44 <void_expression_finalise+0xd0>
    2e30:	bl	0 <coda_set_error>
    2e34:	mvn	r0, #0
    2e38:	b	2df8 <void_expression_finalise+0x84>
    2e3c:	.word	0x00000648
    2e40:	.word	0xfffffe70
    2e44:	.word	0x00000630

00002e48 <integer_expression_finalise>:
    2e48:	ldr	r3, [r0]
    2e4c:	push	{r4, r5, lr}
    2e50:	sub	sp, sp, #12
    2e54:	ldr	r4, [r3, #12]
    2e58:	cmp	r4, #0
    2e5c:	beq	2ee4 <integer_expression_finalise+0x9c>
    2e60:	mov	r5, r0
    2e64:	mov	r0, r4
    2e68:	bl	0 <strlen>
    2e6c:	mov	r1, r0
    2e70:	mov	r0, r4
    2e74:	bl	2cd0 <is_whitespace>
    2e78:	cmp	r0, #0
    2e7c:	mov	r0, r4
    2e80:	bne	2ed4 <integer_expression_finalise+0x8c>
    2e84:	add	r1, sp, #4
    2e88:	bl	0 <coda_expression_from_string>
    2e8c:	subs	r4, r0, #0
    2e90:	bne	2ef0 <integer_expression_finalise+0xa8>
    2e94:	ldr	r3, [r5]
    2e98:	ldr	r0, [r3, #12]
    2e9c:	bl	0 <free>
    2ea0:	ldr	r3, [r5]
    2ea4:	ldr	r0, [sp, #4]
    2ea8:	mov	r1, sp
    2eac:	str	r4, [r3, #12]
    2eb0:	str	r0, [r3, #8]
    2eb4:	bl	0 <coda_expression_get_type>
    2eb8:	cmp	r0, #0
    2ebc:	bne	2ef0 <integer_expression_finalise+0xa8>
    2ec0:	ldr	r3, [sp]
    2ec4:	cmp	r3, #1
    2ec8:	bne	2efc <integer_expression_finalise+0xb4>
    2ecc:	add	sp, sp, #12
    2ed0:	pop	{r4, r5, pc}
    2ed4:	bl	0 <free>
    2ed8:	ldr	r3, [r5]
    2edc:	mov	r2, #0
    2ee0:	str	r2, [r3, #12]
    2ee4:	ldr	r1, [pc, #36]	; 2f10 <integer_expression_finalise+0xc8>
    2ee8:	ldr	r0, [pc, #36]	; 2f14 <integer_expression_finalise+0xcc>
    2eec:	bl	0 <coda_set_error>
    2ef0:	mvn	r0, #0
    2ef4:	add	sp, sp, #12
    2ef8:	pop	{r4, r5, pc}
    2efc:	ldr	r0, [pc, #16]	; 2f14 <integer_expression_finalise+0xcc>
    2f00:	ldr	r1, [pc, #16]	; 2f18 <integer_expression_finalise+0xd0>
    2f04:	bl	0 <coda_set_error>
    2f08:	mvn	r0, #0
    2f0c:	b	2ecc <integer_expression_finalise+0x84>
    2f10:	.word	0x0000067c
    2f14:	.word	0xfffffe70
    2f18:	.word	0x00000660

00002f1c <bool_expression_finalise>:
    2f1c:	ldr	r3, [r0]
    2f20:	push	{r4, r5, lr}
    2f24:	sub	sp, sp, #12
    2f28:	ldr	r4, [r3, #12]
    2f2c:	cmp	r4, #0
    2f30:	beq	2fb8 <bool_expression_finalise+0x9c>
    2f34:	mov	r5, r0
    2f38:	mov	r0, r4
    2f3c:	bl	0 <strlen>
    2f40:	mov	r1, r0
    2f44:	mov	r0, r4
    2f48:	bl	2cd0 <is_whitespace>
    2f4c:	cmp	r0, #0
    2f50:	mov	r0, r4
    2f54:	bne	2fa8 <bool_expression_finalise+0x8c>
    2f58:	add	r1, sp, #4
    2f5c:	bl	0 <coda_expression_from_string>
    2f60:	subs	r4, r0, #0
    2f64:	bne	2fc4 <bool_expression_finalise+0xa8>
    2f68:	ldr	r3, [r5]
    2f6c:	ldr	r0, [r3, #12]
    2f70:	bl	0 <free>
    2f74:	ldr	r3, [r5]
    2f78:	ldr	r0, [sp, #4]
    2f7c:	mov	r1, sp
    2f80:	str	r4, [r3, #12]
    2f84:	str	r0, [r3, #8]
    2f88:	bl	0 <coda_expression_get_type>
    2f8c:	cmp	r0, #0
    2f90:	bne	2fc4 <bool_expression_finalise+0xa8>
    2f94:	ldr	r3, [sp]
    2f98:	cmp	r3, #0
    2f9c:	bne	2fd0 <bool_expression_finalise+0xb4>
    2fa0:	add	sp, sp, #12
    2fa4:	pop	{r4, r5, pc}
    2fa8:	bl	0 <free>
    2fac:	ldr	r3, [r5]
    2fb0:	mov	r2, #0
    2fb4:	str	r2, [r3, #12]
    2fb8:	ldr	r1, [pc, #36]	; 2fe4 <bool_expression_finalise+0xc8>
    2fbc:	ldr	r0, [pc, #36]	; 2fe8 <bool_expression_finalise+0xcc>
    2fc0:	bl	0 <coda_set_error>
    2fc4:	mvn	r0, #0
    2fc8:	add	sp, sp, #12
    2fcc:	pop	{r4, r5, pc}
    2fd0:	ldr	r0, [pc, #16]	; 2fe8 <bool_expression_finalise+0xcc>
    2fd4:	ldr	r1, [pc, #16]	; 2fec <bool_expression_finalise+0xd0>
    2fd8:	bl	0 <coda_set_error>
    2fdc:	mvn	r0, #0
    2fe0:	b	2fa0 <bool_expression_finalise+0x84>
    2fe4:	.word	0x000006b4
    2fe8:	.word	0xfffffe70
    2fec:	.word	0x00000698

00002ff0 <cd_match_expression_finalise>:
    2ff0:	ldr	r3, [r0]
    2ff4:	push	{r4, r5, lr}
    2ff8:	sub	sp, sp, #12
    2ffc:	ldr	r4, [r3, #12]
    3000:	cmp	r4, #0
    3004:	beq	3094 <cd_match_expression_finalise+0xa4>
    3008:	mov	r5, r0
    300c:	mov	r0, r4
    3010:	bl	0 <strlen>
    3014:	mov	r1, r0
    3018:	mov	r0, r4
    301c:	bl	2cd0 <is_whitespace>
    3020:	cmp	r0, #0
    3024:	mov	r0, r4
    3028:	bne	3084 <cd_match_expression_finalise+0x94>
    302c:	add	r1, sp, #4
    3030:	bl	0 <coda_expression_from_string>
    3034:	subs	r4, r0, #0
    3038:	bne	30a0 <cd_match_expression_finalise+0xb0>
    303c:	ldr	r3, [r5]
    3040:	ldr	r0, [r3, #12]
    3044:	bl	0 <free>
    3048:	ldr	r2, [r5]
    304c:	ldr	r3, [sp, #4]
    3050:	mov	r1, sp
    3054:	ldr	ip, [r2, #8]
    3058:	str	r4, [r2, #12]
    305c:	mov	r0, r3
    3060:	str	r3, [ip, #4]
    3064:	bl	0 <coda_expression_get_type>
    3068:	cmp	r0, #0
    306c:	bne	30a0 <cd_match_expression_finalise+0xb0>
    3070:	ldr	r3, [sp]
    3074:	cmp	r3, #0
    3078:	bne	30ac <cd_match_expression_finalise+0xbc>
    307c:	add	sp, sp, #12
    3080:	pop	{r4, r5, pc}
    3084:	bl	0 <free>
    3088:	ldr	r3, [r5]
    308c:	mov	r2, #0
    3090:	str	r2, [r3, #12]
    3094:	ldr	r1, [pc, #36]	; 30c0 <cd_match_expression_finalise+0xd0>
    3098:	ldr	r0, [pc, #36]	; 30c4 <cd_match_expression_finalise+0xd4>
    309c:	bl	0 <coda_set_error>
    30a0:	mvn	r0, #0
    30a4:	add	sp, sp, #12
    30a8:	pop	{r4, r5, pc}
    30ac:	ldr	r0, [pc, #16]	; 30c4 <cd_match_expression_finalise+0xd4>
    30b0:	ldr	r1, [pc, #16]	; 30c8 <cd_match_expression_finalise+0xd8>
    30b4:	bl	0 <coda_set_error>
    30b8:	mvn	r0, #0
    30bc:	b	307c <cd_match_expression_finalise+0x8c>
    30c0:	.word	0x000006d0
    30c4:	.word	0xfffffe70
    30c8:	.word	0x00000698

000030cc <integer_constant_or_expression_finalise>:
    30cc:	ldr	r3, [r0]
    30d0:	push	{r4, r5, r6, lr}
    30d4:	sub	sp, sp, #8
    30d8:	ldr	r5, [r3, #12]
    30dc:	cmp	r5, #0
    30e0:	beq	317c <integer_constant_or_expression_finalise+0xb0>
    30e4:	mov	r4, r0
    30e8:	mov	r0, r5
    30ec:	bl	0 <strlen>
    30f0:	mov	r1, r0
    30f4:	mov	r0, r5
    30f8:	bl	2cd0 <is_whitespace>
    30fc:	cmp	r0, #0
    3100:	mov	r0, r5
    3104:	bne	316c <integer_constant_or_expression_finalise+0xa0>
    3108:	add	r1, sp, #4
    310c:	bl	0 <coda_expression_from_string>
    3110:	subs	r5, r0, #0
    3114:	bne	3188 <integer_constant_or_expression_finalise+0xbc>
    3118:	ldr	r3, [r4]
    311c:	ldr	r0, [r3, #12]
    3120:	bl	0 <free>
    3124:	ldr	r3, [r4]
    3128:	ldr	r0, [sp, #4]
    312c:	mov	r1, sp
    3130:	str	r5, [r3, #12]
    3134:	str	r0, [r3, #8]
    3138:	bl	0 <coda_expression_get_type>
    313c:	subs	r6, r0, #0
    3140:	bne	31e4 <integer_constant_or_expression_finalise+0x118>
    3144:	ldr	r3, [sp]
    3148:	cmp	r3, #1
    314c:	bne	31d0 <integer_constant_or_expression_finalise+0x104>
    3150:	ldr	r0, [sp, #4]
    3154:	bl	0 <coda_expression_is_constant>
    3158:	subs	r5, r0, #0
    315c:	bne	3198 <integer_constant_or_expression_finalise+0xcc>
    3160:	mov	r0, r5
    3164:	add	sp, sp, #8
    3168:	pop	{r4, r5, r6, pc}
    316c:	bl	0 <free>
    3170:	ldr	r3, [r4]
    3174:	mov	r2, #0
    3178:	str	r2, [r3, #12]
    317c:	ldr	r1, [pc, #112]	; 31f4 <integer_constant_or_expression_finalise+0x128>
    3180:	ldr	r0, [pc, #112]	; 31f8 <integer_constant_or_expression_finalise+0x12c>
    3184:	bl	0 <coda_set_error>
    3188:	mvn	r5, #0
    318c:	mov	r0, r5
    3190:	add	sp, sp, #8
    3194:	pop	{r4, r5, r6, pc}
    3198:	ldr	r2, [r4]
    319c:	mov	r1, r6
    31a0:	add	r2, r2, #16
    31a4:	ldr	r0, [sp, #4]
    31a8:	bl	0 <coda_expression_eval_integer>
    31ac:	subs	r5, r0, #0
    31b0:	bne	3188 <integer_constant_or_expression_finalise+0xbc>
    31b4:	ldr	r3, [r4]
    31b8:	ldr	r0, [sp, #4]
    31bc:	str	r5, [r3, #8]
    31c0:	bl	0 <coda_expression_delete>
    31c4:	mov	r0, r5
    31c8:	add	sp, sp, #8
    31cc:	pop	{r4, r5, r6, pc}
    31d0:	ldr	r1, [pc, #36]	; 31fc <integer_constant_or_expression_finalise+0x130>
    31d4:	ldr	r0, [pc, #28]	; 31f8 <integer_constant_or_expression_finalise+0x12c>
    31d8:	bl	0 <coda_set_error>
    31dc:	mvn	r5, #0
    31e0:	b	3160 <integer_constant_or_expression_finalise+0x94>
    31e4:	ldr	r0, [sp, #4]
    31e8:	bl	0 <coda_expression_delete>
    31ec:	mvn	r5, #0
    31f0:	b	3160 <integer_constant_or_expression_finalise+0x94>
    31f4:	.word	0x0000067c
    31f8:	.word	0xfffffe70
    31fc:	.word	0x00000660

00003200 <optional_integer_constant_or_expression_finalise>:
    3200:	ldr	r3, [r0]
    3204:	push	{r4, r5, r6, lr}
    3208:	sub	sp, sp, #8
    320c:	ldr	r5, [r3, #12]
    3210:	cmp	r5, #0
    3214:	beq	32b0 <optional_integer_constant_or_expression_finalise+0xb0>
    3218:	mov	r4, r0
    321c:	mov	r0, r5
    3220:	bl	0 <strlen>
    3224:	mov	r1, r0
    3228:	mov	r0, r5
    322c:	bl	2cd0 <is_whitespace>
    3230:	cmp	r0, #0
    3234:	mov	r0, r5
    3238:	bne	32a0 <optional_integer_constant_or_expression_finalise+0xa0>
    323c:	add	r1, sp, #4
    3240:	bl	0 <coda_expression_from_string>
    3244:	subs	r5, r0, #0
    3248:	bne	3300 <optional_integer_constant_or_expression_finalise+0x100>
    324c:	ldr	r3, [r4]
    3250:	ldr	r0, [r3, #12]
    3254:	bl	0 <free>
    3258:	ldr	r3, [r4]
    325c:	ldr	r0, [sp, #4]
    3260:	mov	r1, sp
    3264:	str	r5, [r3, #12]
    3268:	str	r0, [r3, #8]
    326c:	bl	0 <coda_expression_get_type>
    3270:	subs	r6, r0, #0
    3274:	bne	331c <optional_integer_constant_or_expression_finalise+0x11c>
    3278:	ldr	r3, [sp]
    327c:	cmp	r3, #1
    3280:	bne	3308 <optional_integer_constant_or_expression_finalise+0x108>
    3284:	ldr	r0, [sp, #4]
    3288:	bl	0 <coda_expression_is_constant>
    328c:	subs	r5, r0, #0
    3290:	bne	32c8 <optional_integer_constant_or_expression_finalise+0xc8>
    3294:	mov	r0, r5
    3298:	add	sp, sp, #8
    329c:	pop	{r4, r5, r6, pc}
    32a0:	bl	0 <free>
    32a4:	ldr	r3, [r4]
    32a8:	mov	r2, #0
    32ac:	str	r2, [r3, #12]
    32b0:	mov	r5, #0
    32b4:	mov	r2, #1
    32b8:	mov	r0, r5
    32bc:	str	r2, [r3, #4]
    32c0:	add	sp, sp, #8
    32c4:	pop	{r4, r5, r6, pc}
    32c8:	ldr	r2, [r4]
    32cc:	mov	r1, r6
    32d0:	add	r2, r2, #16
    32d4:	ldr	r0, [sp, #4]
    32d8:	bl	0 <coda_expression_eval_integer>
    32dc:	subs	r5, r0, #0
    32e0:	bne	3300 <optional_integer_constant_or_expression_finalise+0x100>
    32e4:	ldr	r3, [r4]
    32e8:	ldr	r0, [sp, #4]
    32ec:	str	r5, [r3, #8]
    32f0:	bl	0 <coda_expression_delete>
    32f4:	mov	r0, r5
    32f8:	add	sp, sp, #8
    32fc:	pop	{r4, r5, r6, pc}
    3300:	mvn	r5, #0
    3304:	b	3294 <optional_integer_constant_or_expression_finalise+0x94>
    3308:	ldr	r1, [pc, #28]	; 332c <optional_integer_constant_or_expression_finalise+0x12c>
    330c:	ldr	r0, [pc, #28]	; 3330 <optional_integer_constant_or_expression_finalise+0x130>
    3310:	bl	0 <coda_set_error>
    3314:	mvn	r5, #0
    3318:	b	3294 <optional_integer_constant_or_expression_finalise+0x94>
    331c:	ldr	r0, [sp, #4]
    3320:	bl	0 <coda_expression_delete>
    3324:	mvn	r5, #0
    3328:	b	3294 <optional_integer_constant_or_expression_finalise+0x94>
    332c:	.word	0x00000660
    3330:	.word	0xfffffe70

00003334 <cd_scale_factor_finalise>:
    3334:	ldr	r3, [r0]
    3338:	ldr	r3, [r3, #8]
    333c:	cmp	r3, #0
    3340:	beq	334c <cd_scale_factor_finalise+0x18>
    3344:	mov	r0, #0
    3348:	bx	lr
    334c:	push	{r4, lr}
    3350:	ldr	r1, [pc, #12]	; 3364 <cd_scale_factor_finalise+0x30>
    3354:	ldr	r0, [pc, #12]	; 3368 <cd_scale_factor_finalise+0x34>
    3358:	bl	0 <coda_set_error>
    335c:	mvn	r0, #0
    3360:	pop	{r4, pc}
    3364:	.word	0x000006ec
    3368:	.word	0xfffffe70

0000336c <get_mandatory_attribute_value>:
    336c:	push	{r4, r5, r6, lr}
    3370:	mov	r4, r0
    3374:	ldr	r0, [r0]
    3378:	mov	r5, r1
    337c:	cmp	r0, #0
    3380:	mov	r6, r2
    3384:	bne	3398 <get_mandatory_attribute_value+0x2c>
    3388:	b	33b4 <get_mandatory_attribute_value+0x48>
    338c:	ldr	r0, [r4, #8]!
    3390:	cmp	r0, #0
    3394:	beq	33b4 <get_mandatory_attribute_value+0x48>
    3398:	mov	r1, r5
    339c:	bl	0 <strcmp>
    33a0:	cmp	r0, #0
    33a4:	bne	338c <get_mandatory_attribute_value+0x20>
    33a8:	ldr	r0, [r4, #4]
    33ac:	cmp	r0, #0
    33b0:	popne	{r4, r5, r6, pc}
    33b4:	cmn	r6, #1
    33b8:	beq	33fc <get_mandatory_attribute_value+0x90>
    33bc:	ldr	r3, [pc, #64]	; 3404 <get_mandatory_attribute_value+0x98>
    33c0:	add	r6, r3, r6, lsl #2
    33c4:	ldr	r3, [r6, #68]	; 0x44
    33c8:	ldrb	r2, [r3]
    33cc:	cmp	r2, #32
    33d0:	beq	33e0 <get_mandatory_attribute_value+0x74>
    33d4:	ldrb	r2, [r3, #1]!
    33d8:	cmp	r2, #32
    33dc:	bne	33d4 <get_mandatory_attribute_value+0x68>
    33e0:	add	r3, r3, #1
    33e4:	mov	r2, r5
    33e8:	ldr	r1, [pc, #24]	; 3408 <get_mandatory_attribute_value+0x9c>
    33ec:	ldr	r0, [pc, #24]	; 340c <get_mandatory_attribute_value+0xa0>
    33f0:	bl	0 <coda_set_error>
    33f4:	mov	r0, #0
    33f8:	pop	{r4, r5, r6, pc}
    33fc:	ldr	r3, [pc, #12]	; 3410 <get_mandatory_attribute_value+0xa4>
    3400:	b	33e4 <get_mandatory_attribute_value+0x78>
    3404:	.word	0x00000000
    3408:	.word	0x00000718
    340c:	.word	0xfffffe70
    3410:	.word	0x0000070c

00003414 <cd_product_definition_sub_init>:
    3414:	ldr	r2, [r0, #28]
    3418:	push	{r4, r5, r6, r7, r8, lr}
    341c:	cmp	r2, #0
    3420:	beq	35e4 <cd_product_definition_sub_init+0x1d0>
    3424:	ldr	r3, [r0]
    3428:	mov	r4, r0
    342c:	ldr	r0, [pc, #452]	; 35f8 <cd_product_definition_sub_init+0x1e4>
    3430:	mov	r5, r1
    3434:	str	r2, [r3, #8]
    3438:	str	r0, [r3, #40]	; 0x28
    343c:	ldr	r1, [pc, #440]	; 35fc <cd_product_definition_sub_init+0x1e8>
    3440:	ldr	r2, [r3]
    3444:	mov	r0, r5
    3448:	bl	336c <get_mandatory_attribute_value>
    344c:	subs	r6, r0, #0
    3450:	beq	35c4 <cd_product_definition_sub_init+0x1b0>
    3454:	ldr	r3, [r4, #28]
    3458:	mov	r1, r6
    345c:	ldr	r7, [r3, #8]
    3460:	mov	r0, r7
    3464:	bl	0 <strcmp>
    3468:	cmp	r0, #0
    346c:	bne	35b0 <cd_product_definition_sub_init+0x19c>
    3470:	ldr	r3, [r4]
    3474:	mov	r0, r5
    3478:	ldr	r1, [pc, #384]	; 3600 <cd_product_definition_sub_init+0x1ec>
    347c:	ldr	r2, [r3]
    3480:	bl	336c <get_mandatory_attribute_value>
    3484:	cmp	r0, #0
    3488:	beq	35c4 <cd_product_definition_sub_init+0x1b0>
    348c:	ldr	r1, [r4]
    3490:	add	r1, r1, #44	; 0x2c
    3494:	bl	0 <coda_format_from_string>
    3498:	cmp	r0, #0
    349c:	bne	35c4 <cd_product_definition_sub_init+0x1b0>
    34a0:	ldr	r3, [r4]
    34a4:	ldr	r1, [r4, #28]
    34a8:	mov	lr, #1
    34ac:	ldr	ip, [r3, #44]	; 0x2c
    34b0:	ldr	r2, [r1]
    34b4:	str	lr, [r3, #48]	; 0x30
    34b8:	cmp	r2, ip
    34bc:	bne	35cc <cd_product_definition_sub_init+0x1b8>
    34c0:	cmp	r2, #2
    34c4:	beq	359c <cd_product_definition_sub_init+0x188>
    34c8:	ldr	r2, [pc, #308]	; 3604 <cd_product_definition_sub_init+0x1f0>
    34cc:	ldr	ip, [pc, #308]	; 3608 <cd_product_definition_sub_init+0x1f4>
    34d0:	ldr	r1, [pc, #308]	; 360c <cd_product_definition_sub_init+0x1f8>
    34d4:	ldr	r5, [pc, #308]	; 3610 <cd_product_definition_sub_init+0x1fc>
    34d8:	ldr	r4, [pc, #308]	; 3614 <cd_product_definition_sub_init+0x200>
    34dc:	ldr	lr, [pc, #308]	; 3618 <cd_product_definition_sub_init+0x204>
    34e0:	str	ip, [r3, #56]	; 0x38
    34e4:	str	r2, [r3, #228]	; 0xe4
    34e8:	ldr	ip, [pc, #300]	; 361c <cd_product_definition_sub_init+0x208>
    34ec:	str	r2, [r3, #232]	; 0xe8
    34f0:	str	r2, [r3, #236]	; 0xec
    34f4:	str	r2, [r3, #224]	; 0xe0
    34f8:	str	r2, [r3, #260]	; 0x104
    34fc:	str	r2, [r3, #292]	; 0x124
    3500:	str	r2, [r3, #304]	; 0x130
    3504:	str	r2, [r3, #332]	; 0x14c
    3508:	str	r2, [r3, #360]	; 0x168
    350c:	str	r2, [r3, #364]	; 0x16c
    3510:	str	r2, [r3, #372]	; 0x174
    3514:	str	r2, [r3, #376]	; 0x178
    3518:	str	r2, [r3, #380]	; 0x17c
    351c:	str	r2, [r3, #384]	; 0x180
    3520:	str	r2, [r3, #392]	; 0x188
    3524:	str	r1, [r3, #60]	; 0x3c
    3528:	ldr	r2, [pc, #240]	; 3620 <cd_product_definition_sub_init+0x20c>
    352c:	ldr	r1, [pc, #240]	; 3624 <cd_product_definition_sub_init+0x210>
    3530:	ldr	r6, [pc, #240]	; 3628 <cd_product_definition_sub_init+0x214>
    3534:	str	r5, [r3, #52]	; 0x34
    3538:	str	r4, [r3, #88]	; 0x58
    353c:	ldr	r5, [pc, #232]	; 362c <cd_product_definition_sub_init+0x218>
    3540:	ldr	r4, [pc, #232]	; 3630 <cd_product_definition_sub_init+0x21c>
    3544:	str	lr, [r3, #120]	; 0x78
    3548:	str	ip, [r3, #132]	; 0x84
    354c:	ldr	lr, [pc, #224]	; 3634 <cd_product_definition_sub_init+0x220>
    3550:	ldr	ip, [pc, #224]	; 3638 <cd_product_definition_sub_init+0x224>
    3554:	str	r1, [r3, #160]	; 0xa0
    3558:	str	r2, [r3, #188]	; 0xbc
    355c:	ldr	r1, [pc, #216]	; 363c <cd_product_definition_sub_init+0x228>
    3560:	ldr	r2, [pc, #216]	; 3640 <cd_product_definition_sub_init+0x22c>
    3564:	str	r6, [r3, #64]	; 0x40
    3568:	str	r5, [r3, #192]	; 0xc0
    356c:	str	r4, [r3, #200]	; 0xc8
    3570:	str	lr, [r3, #204]	; 0xcc
    3574:	str	ip, [r3, #208]	; 0xd0
    3578:	str	r1, [r3, #212]	; 0xd4
    357c:	str	r2, [r3, #220]	; 0xdc
    3580:	ldr	ip, [pc, #188]	; 3644 <cd_product_definition_sub_init+0x230>
    3584:	ldr	r1, [pc, #188]	; 3648 <cd_product_definition_sub_init+0x234>
    3588:	ldr	r2, [pc, #188]	; 364c <cd_product_definition_sub_init+0x238>
    358c:	str	ip, [r3, #184]	; 0xb8
    3590:	str	r1, [r3, #356]	; 0x164
    3594:	str	r2, [r3, #36]	; 0x24
    3598:	pop	{r4, r5, r6, r7, r8, pc}
    359c:	ldr	r1, [pc, #172]	; 3650 <cd_product_definition_sub_init+0x23c>
    35a0:	ldr	r2, [pc, #92]	; 3604 <cd_product_definition_sub_init+0x1f0>
    35a4:	str	r1, [r3, #192]	; 0xc0
    35a8:	str	r2, [r3, #364]	; 0x16c
    35ac:	b	3580 <cd_product_definition_sub_init+0x16c>
    35b0:	mov	r3, r7
    35b4:	mov	r2, r6
    35b8:	ldr	r1, [pc, #148]	; 3654 <cd_product_definition_sub_init+0x240>
    35bc:	ldr	r0, [pc, #148]	; 3658 <cd_product_definition_sub_init+0x244>
    35c0:	bl	0 <coda_set_error>
    35c4:	mvn	r0, #0
    35c8:	pop	{r4, r5, r6, r7, r8, pc}
    35cc:	ldr	r2, [r1, #8]
    35d0:	ldr	r0, [pc, #128]	; 3658 <cd_product_definition_sub_init+0x244>
    35d4:	ldr	r1, [pc, #128]	; 365c <cd_product_definition_sub_init+0x248>
    35d8:	bl	0 <coda_set_error>
    35dc:	mvn	r0, #0
    35e0:	pop	{r4, r5, r6, r7, r8, pc}
    35e4:	ldr	r3, [pc, #116]	; 3660 <cd_product_definition_sub_init+0x24c>
    35e8:	ldr	r2, [pc, #116]	; 3664 <cd_product_definition_sub_init+0x250>
    35ec:	ldr	r1, [pc, #116]	; 3668 <cd_product_definition_sub_init+0x254>
    35f0:	ldr	r0, [pc, #116]	; 366c <cd_product_definition_sub_init+0x258>
    35f4:	bl	0 <__assert_fail>
    35f8:	.word	0x00000000
    35fc:	.word	0x00000770
    3600:	.word	0x0000002c
	...
    3654:	.word	0x00000774
    3658:	.word	0xfffffe70
    365c:	.word	0x000007b0
    3660:	.word	0x00000100
    3664:	.word	0x00000b9e
    3668:	.word	0x00000064
    366c:	.word	0x0000074c

00003670 <cd_product_variable_init>:
    3670:	ldr	r3, [r0]
    3674:	push	{r4, r5, r6, lr}
    3678:	mov	r4, r0
    367c:	ldr	r2, [r3]
    3680:	mov	r0, r1
    3684:	ldr	r1, [pc, #100]	; 36f0 <cd_product_variable_init+0x80>
    3688:	bl	336c <get_mandatory_attribute_value>
    368c:	cmp	r0, #0
    3690:	beq	36e8 <cd_product_variable_init+0x78>
    3694:	ldr	r5, [r4]
    3698:	ldr	r3, [pc, #84]	; 36f4 <cd_product_variable_init+0x84>
    369c:	str	r3, [r5, #40]	; 0x28
    36a0:	bl	0 <coda_product_variable_new>
    36a4:	ldr	r3, [r4]
    36a8:	str	r0, [r5, #8]
    36ac:	ldr	r2, [r3, #8]
    36b0:	cmp	r2, #0
    36b4:	beq	36e8 <cd_product_variable_init+0x78>
    36b8:	ldr	r4, [pc, #56]	; 36f8 <cd_product_variable_init+0x88>
    36bc:	ldr	lr, [pc, #56]	; 36fc <cd_product_variable_init+0x8c>
    36c0:	ldr	ip, [pc, #56]	; 3700 <cd_product_variable_init+0x90>
    36c4:	ldr	r1, [pc, #56]	; 3704 <cd_product_variable_init+0x94>
    36c8:	ldr	r2, [pc, #56]	; 3708 <cd_product_variable_init+0x98>
    36cc:	mov	r0, #0
    36d0:	str	r4, [r3, #104]	; 0x68
    36d4:	str	lr, [r3, #276]	; 0x114
    36d8:	str	ip, [r3, #128]	; 0x80
    36dc:	str	r1, [r3, #300]	; 0x12c
    36e0:	str	r2, [r3, #36]	; 0x24
    36e4:	pop	{r4, r5, r6, pc}
    36e8:	mvn	r0, #0
    36ec:	pop	{r4, r5, r6, pc}
    36f0:	.word	0x000000d8
	...

0000370c <cd_field_init>:
    370c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    3710:	mov	r8, r1
    3714:	ldr	r4, [r1]
    3718:	mov	r7, r0
    371c:	cmp	r4, #0
    3720:	beq	3970 <cd_field_init+0x264>
    3724:	ldr	r9, [pc, #648]	; 39b4 <cd_field_init+0x2a8>
    3728:	mov	r6, r1
    372c:	mov	r5, r1
    3730:	mov	r0, r4
    3734:	b	3744 <cd_field_init+0x38>
    3738:	ldr	r0, [r5, #8]!
    373c:	cmp	r0, #0
    3740:	beq	3760 <cd_field_init+0x54>
    3744:	mov	r1, r9
    3748:	bl	0 <strcmp>
    374c:	cmp	r0, #0
    3750:	bne	3738 <cd_field_init+0x2c>
    3754:	ldr	r3, [r5, #4]
    3758:	cmp	r3, #0
    375c:	bne	395c <cd_field_init+0x250>
    3760:	ldr	r9, [r7]
    3764:	ldr	r3, [r9, #396]	; 0x18c
    3768:	ldr	r2, [r3, #48]	; 0x30
    376c:	cmp	r2, #0
    3770:	beq	39a0 <cd_field_init+0x294>
    3774:	ldr	r2, [r3, #44]	; 0x2c
    3778:	mov	r3, #1
    377c:	str	r2, [r9, #44]	; 0x2c
    3780:	str	r3, [r9, #48]	; 0x30
    3784:	ldr	r5, [pc, #556]	; 39b8 <cd_field_init+0x2ac>
    3788:	b	3798 <cd_field_init+0x8c>
    378c:	ldr	r4, [r6, #8]!
    3790:	cmp	r4, #0
    3794:	beq	37b8 <cd_field_init+0xac>
    3798:	mov	r0, r4
    379c:	mov	r1, r5
    37a0:	bl	0 <strcmp>
    37a4:	cmp	r0, #0
    37a8:	bne	378c <cd_field_init+0x80>
    37ac:	ldr	r3, [r6, #4]
    37b0:	cmp	r3, #0
    37b4:	bne	3948 <cd_field_init+0x23c>
    37b8:	ldr	r2, [r9]
    37bc:	ldr	r1, [pc, #504]	; 39bc <cd_field_init+0x2b0>
    37c0:	mov	r0, r8
    37c4:	bl	336c <get_mandatory_attribute_value>
    37c8:	cmp	r0, #0
    37cc:	beq	3998 <cd_field_init+0x28c>
    37d0:	ldr	r5, [r7]
    37d4:	ldr	r3, [pc, #484]	; 39c0 <cd_field_init+0x2b4>
    37d8:	str	r3, [r5, #40]	; 0x28
    37dc:	bl	0 <coda_type_record_field_new>
    37e0:	ldr	r4, [r7]
    37e4:	str	r0, [r5, #8]
    37e8:	ldr	r9, [r4, #8]
    37ec:	cmp	r9, #0
    37f0:	beq	3998 <cd_field_init+0x28c>
    37f4:	ldr	r0, [r8]
    37f8:	cmp	r0, #0
    37fc:	beq	3844 <cd_field_init+0x138>
    3800:	ldr	r6, [pc, #444]	; 39c4 <cd_field_init+0x2b8>
    3804:	b	3814 <cd_field_init+0x108>
    3808:	ldr	r0, [r8, #8]!
    380c:	cmp	r0, #0
    3810:	beq	3844 <cd_field_init+0x138>
    3814:	mov	r1, r6
    3818:	bl	0 <strcmp>
    381c:	cmp	r0, #0
    3820:	bne	3808 <cd_field_init+0xfc>
    3824:	ldr	r1, [r8, #4]
    3828:	cmp	r1, #0
    382c:	beq	3844 <cd_field_init+0x138>
    3830:	mov	r0, r9
    3834:	bl	0 <coda_type_record_field_set_real_name>
    3838:	cmp	r0, #0
    383c:	bne	3998 <cd_field_init+0x28c>
    3840:	ldr	r4, [r7]
    3844:	ldr	r1, [pc, #380]	; 39c8 <cd_field_init+0x2bc>
    3848:	ldr	r2, [pc, #380]	; 39cc <cd_field_init+0x2c0>
    384c:	ldr	r3, [pc, #380]	; 39d0 <cd_field_init+0x2c4>
    3850:	str	r1, [r4, #56]	; 0x38
    3854:	str	r2, [r4, #64]	; 0x40
    3858:	ldr	r5, [pc, #372]	; 39d4 <cd_field_init+0x2c8>
    385c:	ldr	lr, [pc, #372]	; 39d8 <cd_field_init+0x2cc>
    3860:	ldr	ip, [pc, #372]	; 39dc <cd_field_init+0x2d0>
    3864:	ldr	r0, [pc, #372]	; 39e0 <cd_field_init+0x2d4>
    3868:	ldr	r1, [pc, #372]	; 39e4 <cd_field_init+0x2d8>
    386c:	ldr	r2, [pc, #372]	; 39e8 <cd_field_init+0x2dc>
    3870:	str	r3, [r4, #228]	; 0xe4
    3874:	str	r3, [r4, #232]	; 0xe8
    3878:	str	r3, [r4, #236]	; 0xec
    387c:	str	r3, [r4, #224]	; 0xe0
    3880:	str	r3, [r4, #260]	; 0x104
    3884:	str	r3, [r4, #292]	; 0x124
    3888:	str	r3, [r4, #304]	; 0x130
    388c:	str	r3, [r4, #332]	; 0x14c
    3890:	str	r3, [r4, #360]	; 0x168
    3894:	str	r3, [r4, #364]	; 0x16c
    3898:	str	r3, [r4, #372]	; 0x174
    389c:	str	r3, [r4, #376]	; 0x178
    38a0:	str	r3, [r4, #380]	; 0x17c
    38a4:	str	r3, [r4, #384]	; 0x180
    38a8:	str	r3, [r4, #392]	; 0x188
    38ac:	str	r5, [r4, #52]	; 0x34
    38b0:	str	lr, [r4, #88]	; 0x58
    38b4:	str	ip, [r4, #120]	; 0x78
    38b8:	str	r0, [r4, #132]	; 0x84
    38bc:	str	r1, [r4, #160]	; 0xa0
    38c0:	str	r2, [r4, #192]	; 0xc0
    38c4:	ldr	r3, [pc, #288]	; 39ec <cd_field_init+0x2e0>
    38c8:	ldr	r5, [pc, #288]	; 39f0 <cd_field_init+0x2e4>
    38cc:	ldr	lr, [pc, #288]	; 39f4 <cd_field_init+0x2e8>
    38d0:	ldr	ip, [pc, #288]	; 39f8 <cd_field_init+0x2ec>
    38d4:	ldr	r0, [pc, #288]	; 39fc <cd_field_init+0x2f0>
    38d8:	ldr	r1, [pc, #288]	; 3a00 <cd_field_init+0x2f4>
    38dc:	ldr	r2, [pc, #288]	; 3a04 <cd_field_init+0x2f8>
    38e0:	str	r3, [r4, #188]	; 0xbc
    38e4:	str	r5, [r4, #200]	; 0xc8
    38e8:	ldr	r3, [pc, #280]	; 3a08 <cd_field_init+0x2fc>
    38ec:	str	lr, [r4, #204]	; 0xcc
    38f0:	str	ip, [r4, #208]	; 0xd0
    38f4:	str	r0, [r4, #212]	; 0xd4
    38f8:	str	r1, [r4, #220]	; 0xdc
    38fc:	str	r2, [r4, #296]	; 0x128
    3900:	ldr	r6, [pc, #260]	; 3a0c <cd_field_init+0x300>
    3904:	ldr	r5, [pc, #260]	; 3a10 <cd_field_init+0x304>
    3908:	ldr	lr, [pc, #260]	; 3a14 <cd_field_init+0x308>
    390c:	ldr	ip, [pc, #260]	; 3a18 <cd_field_init+0x30c>
    3910:	ldr	r0, [pc, #260]	; 3a1c <cd_field_init+0x310>
    3914:	ldr	r1, [pc, #260]	; 3a20 <cd_field_init+0x314>
    3918:	ldr	r2, [pc, #260]	; 3a24 <cd_field_init+0x318>
    391c:	str	r6, [r4, #60]	; 0x3c
    3920:	str	r3, [r4, #124]	; 0x7c
    3924:	str	r3, [r4, #168]	; 0xa8
    3928:	str	r0, [r4, #76]	; 0x4c
    392c:	str	r5, [r4, #340]	; 0x154
    3930:	str	lr, [r4, #72]	; 0x48
    3934:	str	ip, [r4, #244]	; 0xf4
    3938:	str	r1, [r4, #248]	; 0xf8
    393c:	str	r2, [r4, #36]	; 0x24
    3940:	mov	r0, #0
    3944:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    3948:	ldr	r1, [pc, #216]	; 3a28 <cd_field_init+0x31c>
    394c:	ldr	r0, [pc, #216]	; 3a2c <cd_field_init+0x320>
    3950:	bl	0 <coda_set_error>
    3954:	mvn	r0, #0
    3958:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    395c:	ldr	r1, [pc, #204]	; 3a30 <cd_field_init+0x324>
    3960:	ldr	r0, [pc, #196]	; 3a2c <cd_field_init+0x320>
    3964:	bl	0 <coda_set_error>
    3968:	mvn	r0, #0
    396c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    3970:	ldr	r9, [r0]
    3974:	ldr	r3, [r9, #396]	; 0x18c
    3978:	ldr	r2, [r3, #48]	; 0x30
    397c:	cmp	r2, #0
    3980:	beq	39a0 <cd_field_init+0x294>
    3984:	ldr	r2, [r3, #44]	; 0x2c
    3988:	mov	r3, #1
    398c:	str	r2, [r9, #44]	; 0x2c
    3990:	str	r3, [r9, #48]	; 0x30
    3994:	b	37b8 <cd_field_init+0xac>
    3998:	mvn	r0, #0
    399c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    39a0:	ldr	r3, [pc, #140]	; 3a34 <cd_field_init+0x328>
    39a4:	ldr	r2, [pc, #140]	; 3a38 <cd_field_init+0x32c>
    39a8:	ldr	r1, [pc, #140]	; 3a3c <cd_field_init+0x330>
    39ac:	ldr	r0, [pc, #140]	; 3a40 <cd_field_init+0x334>
    39b0:	bl	0 <__assert_fail>
    39b4:	.word	0x0000002c
    39b8:	.word	0x00000110
    39bc:	.word	0x000000d8
    39c0:	.word	0x00000000
    39c4:	.word	0x00000850
	...
    3a28:	.word	0x00000824
    3a2c:	.word	0xfffffe70
    3a30:	.word	0x000007f8
    3a34:	.word	0x00000120
    3a38:	.word	0x00000695
    3a3c:	.word	0x00000064
    3a40:	.word	0x000000b8

00003a44 <cd_product_type_init>:
    3a44:	ldr	r3, [r0]
    3a48:	push	{r4, r5, r6, lr}
    3a4c:	mov	r4, r0
    3a50:	ldr	r2, [r3]
    3a54:	mov	r0, r1
    3a58:	ldr	r1, [pc, #92]	; 3abc <cd_product_type_init+0x78>
    3a5c:	bl	336c <get_mandatory_attribute_value>
    3a60:	cmp	r0, #0
    3a64:	beq	3ab4 <cd_product_type_init+0x70>
    3a68:	ldr	r5, [r4]
    3a6c:	ldr	r3, [pc, #76]	; 3ac0 <cd_product_type_init+0x7c>
    3a70:	str	r3, [r5, #40]	; 0x28
    3a74:	bl	0 <coda_product_type_new>
    3a78:	ldr	r3, [r4]
    3a7c:	str	r0, [r5, #8]
    3a80:	ldr	r2, [r3, #8]
    3a84:	cmp	r2, #0
    3a88:	beq	3ab4 <cd_product_type_init+0x70>
    3a8c:	ldr	lr, [pc, #48]	; 3ac4 <cd_product_type_init+0x80>
    3a90:	ldr	ip, [pc, #48]	; 3ac8 <cd_product_type_init+0x84>
    3a94:	ldr	r1, [pc, #48]	; 3acc <cd_product_type_init+0x88>
    3a98:	ldr	r2, [pc, #48]	; 3ad0 <cd_product_type_init+0x8c>
    3a9c:	mov	r0, #0
    3aa0:	str	lr, [r3, #96]	; 0x60
    3aa4:	str	ip, [r3, #268]	; 0x10c
    3aa8:	str	r1, [r3, #176]	; 0xb0
    3aac:	str	r2, [r3, #348]	; 0x15c
    3ab0:	pop	{r4, r5, r6, pc}
    3ab4:	mvn	r0, #0
    3ab8:	pop	{r4, r5, r6, pc}
    3abc:	.word	0x000000d8
	...

00003ad4 <cd_match_size_init>:
    3ad4:	push	{r4, r5, r6, r7, lr}
    3ad8:	mov	r5, r0
    3adc:	ldr	r4, [r0]
    3ae0:	ldr	r3, [pc, #292]	; 3c0c <cd_match_size_init+0x138>
    3ae4:	sub	sp, sp, #12
    3ae8:	str	r3, [r4, #40]	; 0x28
    3aec:	mov	r0, #0
    3af0:	mov	r6, r1
    3af4:	bl	0 <coda_detection_rule_entry_new>
    3af8:	ldr	r3, [r5]
    3afc:	str	r0, [r4, #8]
    3b00:	ldr	r2, [r3, #8]
    3b04:	cmp	r2, #0
    3b08:	beq	3bc0 <cd_match_size_init+0xec>
    3b0c:	ldr	r2, [r3]
    3b10:	mov	r0, r6
    3b14:	ldr	r1, [pc, #244]	; 3c10 <cd_match_size_init+0x13c>
    3b18:	bl	336c <get_mandatory_attribute_value>
    3b1c:	subs	r7, r0, #0
    3b20:	beq	3bc0 <cd_match_size_init+0xec>
    3b24:	bl	0 <strdup>
    3b28:	subs	r1, r0, #0
    3b2c:	beq	3bc8 <cd_match_size_init+0xf4>
    3b30:	mov	r4, #0
    3b34:	str	r4, [sp, #4]
    3b38:	str	r4, [sp]
    3b3c:	mov	r3, r4
    3b40:	mov	r2, r4
    3b44:	mov	r0, #20
    3b48:	bl	0 <coda_expression_new>
    3b4c:	subs	r6, r0, #0
    3b50:	beq	3be4 <cd_match_size_init+0x110>
    3b54:	mov	r2, r4
    3b58:	str	r4, [sp, #4]
    3b5c:	str	r4, [sp]
    3b60:	mov	r3, r4
    3b64:	mov	r1, r4
    3b68:	mov	r0, #27
    3b6c:	bl	0 <coda_expression_new>
    3b70:	subs	r2, r0, #0
    3b74:	beq	3bfc <cd_match_size_init+0x128>
    3b78:	str	r4, [sp, #4]
    3b7c:	str	r4, [sp]
    3b80:	mov	r1, r4
    3b84:	mov	r3, r6
    3b88:	mov	r0, #25
    3b8c:	bl	0 <coda_expression_new>
    3b90:	subs	r4, r0, #0
    3b94:	beq	3bc0 <cd_match_size_init+0xec>
    3b98:	ldr	r3, [r5]
    3b9c:	mov	r1, r4
    3ba0:	ldr	r0, [r3, #8]
    3ba4:	bl	0 <coda_detection_rule_entry_set_expression>
    3ba8:	cmp	r0, #0
    3bac:	bne	3bb8 <cd_match_size_init+0xe4>
    3bb0:	add	sp, sp, #12
    3bb4:	pop	{r4, r5, r6, r7, pc}
    3bb8:	mov	r0, r4
    3bbc:	bl	0 <coda_expression_delete>
    3bc0:	mvn	r0, #0
    3bc4:	b	3bb0 <cd_match_size_init+0xdc>
    3bc8:	mvn	r0, #0
    3bcc:	ldr	r3, [pc, #64]	; 3c14 <cd_match_size_init+0x140>
    3bd0:	ldr	r2, [pc, #64]	; 3c18 <cd_match_size_init+0x144>
    3bd4:	ldr	r1, [pc, #64]	; 3c1c <cd_match_size_init+0x148>
    3bd8:	bl	0 <coda_set_error>
    3bdc:	mvn	r0, #0
    3be0:	b	3bb0 <cd_match_size_init+0xdc>
    3be4:	sub	r0, r0, #400	; 0x190
    3be8:	mov	r2, r7
    3bec:	ldr	r1, [pc, #44]	; 3c20 <cd_match_size_init+0x14c>
    3bf0:	bl	0 <coda_set_error>
    3bf4:	mvn	r0, #0
    3bf8:	b	3bb0 <cd_match_size_init+0xdc>
    3bfc:	mov	r0, r6
    3c00:	bl	0 <coda_expression_delete>
    3c04:	mvn	r0, #0
    3c08:	b	3bb0 <cd_match_size_init+0xdc>
    3c0c:	.word	0x00000000
    3c10:	.word	0x0000085c
    3c14:	.word	0x00000a86
    3c18:	.word	0x00000064
    3c1c:	.word	0x00000248
    3c20:	.word	0x00000864

00003c24 <cd_match_filename_init>:
    3c24:	ldr	r3, [r0]
    3c28:	push	{r4, r5, r6, lr}
    3c2c:	mov	r4, r0
    3c30:	sub	sp, sp, #8
    3c34:	mov	r0, r1
    3c38:	ldr	r2, [r3]
    3c3c:	ldr	r1, [pc, #216]	; 3d1c <cd_match_filename_init+0xf8>
    3c40:	bl	336c <get_mandatory_attribute_value>
    3c44:	subs	r6, r0, #0
    3c48:	beq	3ce8 <cd_match_filename_init+0xc4>
    3c4c:	ldr	r5, [r4]
    3c50:	ldr	r3, [pc, #200]	; 3d20 <cd_match_filename_init+0xfc>
    3c54:	mov	r0, #0
    3c58:	str	r3, [r5, #40]	; 0x28
    3c5c:	bl	0 <coda_detection_rule_entry_new>
    3c60:	ldr	r3, [r4]
    3c64:	str	r0, [r5, #8]
    3c68:	ldr	r3, [r3, #8]
    3c6c:	cmp	r3, #0
    3c70:	beq	3ce8 <cd_match_filename_init+0xc4>
    3c74:	mov	r0, r6
    3c78:	bl	0 <strdup>
    3c7c:	subs	r1, r0, #0
    3c80:	beq	3d00 <cd_match_filename_init+0xdc>
    3c84:	mov	r3, #0
    3c88:	str	r3, [sp, #4]
    3c8c:	str	r3, [sp]
    3c90:	mov	r2, r3
    3c94:	mov	r0, #20
    3c98:	bl	0 <coda_expression_new>
    3c9c:	subs	r5, r0, #0
    3ca0:	beq	3cd8 <cd_match_filename_init+0xb4>
    3ca4:	ldr	r3, [r4]
    3ca8:	mov	r1, r5
    3cac:	ldr	r0, [r3, #8]
    3cb0:	bl	0 <coda_detection_rule_entry_set_expression>
    3cb4:	cmp	r0, #0
    3cb8:	bne	3cf0 <cd_match_filename_init+0xcc>
    3cbc:	ldr	r3, [r4]
    3cc0:	ldr	r2, [pc, #92]	; 3d24 <cd_match_filename_init+0x100>
    3cc4:	mov	r1, #1
    3cc8:	str	r1, [r3, #32]
    3ccc:	str	r2, [r3, #36]	; 0x24
    3cd0:	add	sp, sp, #8
    3cd4:	pop	{r4, r5, r6, pc}
    3cd8:	mov	r2, r6
    3cdc:	ldr	r1, [pc, #68]	; 3d28 <cd_match_filename_init+0x104>
    3ce0:	sub	r0, r0, #400	; 0x190
    3ce4:	bl	0 <coda_set_error>
    3ce8:	mvn	r0, #0
    3cec:	b	3cd0 <cd_match_filename_init+0xac>
    3cf0:	mov	r0, r5
    3cf4:	bl	0 <coda_expression_delete>
    3cf8:	mvn	r0, #0
    3cfc:	b	3cd0 <cd_match_filename_init+0xac>
    3d00:	mvn	r0, #0
    3d04:	ldr	r3, [pc, #32]	; 3d2c <cd_match_filename_init+0x108>
    3d08:	ldr	r2, [pc, #32]	; 3d30 <cd_match_filename_init+0x10c>
    3d0c:	ldr	r1, [pc, #32]	; 3d34 <cd_match_filename_init+0x110>
    3d10:	bl	0 <coda_set_error>
    3d14:	mvn	r0, #0
    3d18:	b	3cd0 <cd_match_filename_init+0xac>
    3d1c:	.word	0x000002ec
	...
    3d28:	.word	0x00000334
    3d2c:	.word	0x00000a59
    3d30:	.word	0x00000064
    3d34:	.word	0x00000248

00003d38 <cd_attribute_init>:
    3d38:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    3d3c:	mov	r8, r1
    3d40:	ldr	r4, [r1]
    3d44:	mov	r7, r0
    3d48:	cmp	r4, #0
    3d4c:	beq	3fec <cd_attribute_init+0x2b4>
    3d50:	ldr	r9, [pc, #788]	; 406c <cd_attribute_init+0x334>
    3d54:	mov	r6, r1
    3d58:	mov	r5, r1
    3d5c:	mov	r0, r4
    3d60:	b	3d70 <cd_attribute_init+0x38>
    3d64:	ldr	r0, [r5, #8]!
    3d68:	cmp	r0, #0
    3d6c:	beq	3d8c <cd_attribute_init+0x54>
    3d70:	mov	r1, r9
    3d74:	bl	0 <strcmp>
    3d78:	cmp	r0, #0
    3d7c:	bne	3d64 <cd_attribute_init+0x2c>
    3d80:	ldr	r3, [r5, #4]
    3d84:	cmp	r3, #0
    3d88:	bne	3fd8 <cd_attribute_init+0x2a0>
    3d8c:	ldr	r9, [r7]
    3d90:	ldr	r3, [r9, #396]	; 0x18c
    3d94:	ldr	r2, [r3, #48]	; 0x30
    3d98:	cmp	r2, #0
    3d9c:	beq	4058 <cd_attribute_init+0x320>
    3da0:	ldr	r2, [r3, #44]	; 0x2c
    3da4:	mov	r3, #1
    3da8:	str	r2, [r9, #44]	; 0x2c
    3dac:	str	r3, [r9, #48]	; 0x30
    3db0:	ldr	r5, [pc, #696]	; 4070 <cd_attribute_init+0x338>
    3db4:	b	3dc4 <cd_attribute_init+0x8c>
    3db8:	ldr	r4, [r6, #8]!
    3dbc:	cmp	r4, #0
    3dc0:	beq	3de4 <cd_attribute_init+0xac>
    3dc4:	mov	r0, r4
    3dc8:	mov	r1, r5
    3dcc:	bl	0 <strcmp>
    3dd0:	cmp	r0, #0
    3dd4:	bne	3db8 <cd_attribute_init+0x80>
    3dd8:	ldr	r3, [r6, #4]
    3ddc:	cmp	r3, #0
    3de0:	bne	3fc4 <cd_attribute_init+0x28c>
    3de4:	ldr	r2, [r9]
    3de8:	ldr	r1, [pc, #644]	; 4074 <cd_attribute_init+0x33c>
    3dec:	mov	r0, r8
    3df0:	bl	336c <get_mandatory_attribute_value>
    3df4:	subs	r6, r0, #0
    3df8:	beq	3fbc <cd_attribute_init+0x284>
    3dfc:	ldr	r0, [r8]
    3e00:	cmp	r0, #0
    3e04:	beq	3f88 <cd_attribute_init+0x250>
    3e08:	ldr	r5, [pc, #616]	; 4078 <cd_attribute_init+0x340>
    3e0c:	b	3e1c <cd_attribute_init+0xe4>
    3e10:	ldr	r0, [r8, #8]!
    3e14:	cmp	r0, #0
    3e18:	beq	3f88 <cd_attribute_init+0x250>
    3e1c:	mov	r1, r5
    3e20:	bl	0 <strcmp>
    3e24:	cmp	r0, #0
    3e28:	bne	3e10 <cd_attribute_init+0xd8>
    3e2c:	ldr	r5, [r7]
    3e30:	ldr	r4, [r8, #4]
    3e34:	ldr	r2, [pc, #576]	; 407c <cd_attribute_init+0x344>
    3e38:	ldr	r3, [r5, #44]	; 0x2c
    3e3c:	str	r2, [r5, #40]	; 0x28
    3e40:	cmp	r3, #2
    3e44:	cmpeq	r4, #0
    3e48:	beq	4014 <cd_attribute_init+0x2dc>
    3e4c:	mov	r0, r6
    3e50:	bl	0 <coda_type_record_field_new>
    3e54:	ldr	r3, [r7]
    3e58:	str	r0, [r5, #8]
    3e5c:	ldr	r0, [r3, #8]
    3e60:	cmp	r0, #0
    3e64:	beq	3fbc <cd_attribute_init+0x284>
    3e68:	cmp	r4, #0
    3e6c:	beq	3e84 <cd_attribute_init+0x14c>
    3e70:	mov	r1, r4
    3e74:	bl	0 <coda_type_record_field_set_real_name>
    3e78:	cmp	r0, #0
    3e7c:	bne	3fbc <cd_attribute_init+0x284>
    3e80:	ldr	r3, [r7]
    3e84:	ldr	r0, [pc, #500]	; 4080 <cd_attribute_init+0x348>
    3e88:	ldr	r1, [pc, #500]	; 4084 <cd_attribute_init+0x34c>
    3e8c:	ldr	r2, [pc, #500]	; 4088 <cd_attribute_init+0x350>
    3e90:	str	r0, [r3, #56]	; 0x38
    3e94:	str	r1, [r3, #64]	; 0x40
    3e98:	ldr	r5, [pc, #492]	; 408c <cd_attribute_init+0x354>
    3e9c:	ldr	r4, [pc, #492]	; 4090 <cd_attribute_init+0x358>
    3ea0:	ldr	lr, [pc, #492]	; 4094 <cd_attribute_init+0x35c>
    3ea4:	ldr	ip, [pc, #492]	; 4098 <cd_attribute_init+0x360>
    3ea8:	ldr	r0, [pc, #492]	; 409c <cd_attribute_init+0x364>
    3eac:	ldr	r1, [pc, #492]	; 40a0 <cd_attribute_init+0x368>
    3eb0:	str	r2, [r3, #228]	; 0xe4
    3eb4:	str	r2, [r3, #232]	; 0xe8
    3eb8:	str	r2, [r3, #236]	; 0xec
    3ebc:	str	r2, [r3, #224]	; 0xe0
    3ec0:	str	r2, [r3, #260]	; 0x104
    3ec4:	str	r2, [r3, #292]	; 0x124
    3ec8:	str	r2, [r3, #304]	; 0x130
    3ecc:	str	r2, [r3, #332]	; 0x14c
    3ed0:	str	r2, [r3, #360]	; 0x168
    3ed4:	str	r2, [r3, #364]	; 0x16c
    3ed8:	str	r2, [r3, #372]	; 0x174
    3edc:	str	r2, [r3, #376]	; 0x178
    3ee0:	str	r2, [r3, #380]	; 0x17c
    3ee4:	str	r2, [r3, #384]	; 0x180
    3ee8:	str	r2, [r3, #392]	; 0x188
    3eec:	str	r5, [r3, #52]	; 0x34
    3ef0:	str	r4, [r3, #88]	; 0x58
    3ef4:	str	lr, [r3, #120]	; 0x78
    3ef8:	str	ip, [r3, #132]	; 0x84
    3efc:	str	r0, [r3, #160]	; 0xa0
    3f00:	str	r1, [r3, #192]	; 0xc0
    3f04:	ldr	r2, [pc, #408]	; 40a4 <cd_attribute_init+0x36c>
    3f08:	ldr	r5, [pc, #408]	; 40a8 <cd_attribute_init+0x370>
    3f0c:	ldr	r4, [pc, #408]	; 40ac <cd_attribute_init+0x374>
    3f10:	ldr	lr, [pc, #408]	; 40b0 <cd_attribute_init+0x378>
    3f14:	ldr	ip, [pc, #408]	; 40b4 <cd_attribute_init+0x37c>
    3f18:	ldr	r0, [pc, #408]	; 40b8 <cd_attribute_init+0x380>
    3f1c:	ldr	r1, [pc, #408]	; 40bc <cd_attribute_init+0x384>
    3f20:	str	r2, [r3, #188]	; 0xbc
    3f24:	str	r5, [r3, #200]	; 0xc8
    3f28:	ldr	r2, [pc, #400]	; 40c0 <cd_attribute_init+0x388>
    3f2c:	str	r4, [r3, #204]	; 0xcc
    3f30:	str	lr, [r3, #208]	; 0xd0
    3f34:	str	ip, [r3, #212]	; 0xd4
    3f38:	str	r0, [r3, #220]	; 0xdc
    3f3c:	str	r1, [r3, #296]	; 0x128
    3f40:	ldr	r6, [pc, #380]	; 40c4 <cd_attribute_init+0x38c>
    3f44:	ldr	r5, [pc, #380]	; 40c8 <cd_attribute_init+0x390>
    3f48:	ldr	r4, [pc, #380]	; 40cc <cd_attribute_init+0x394>
    3f4c:	ldr	lr, [pc, #380]	; 40d0 <cd_attribute_init+0x398>
    3f50:	ldr	ip, [pc, #380]	; 40d4 <cd_attribute_init+0x39c>
    3f54:	ldr	r0, [pc, #380]	; 40d8 <cd_attribute_init+0x3a0>
    3f58:	ldr	r1, [pc, #380]	; 40dc <cd_attribute_init+0x3a4>
    3f5c:	str	r6, [r3, #60]	; 0x3c
    3f60:	str	r2, [r3, #124]	; 0x7c
    3f64:	str	r2, [r3, #168]	; 0xa8
    3f68:	str	r0, [r3, #288]	; 0x120
    3f6c:	str	r5, [r3, #340]	; 0x154
    3f70:	str	r4, [r3, #72]	; 0x48
    3f74:	str	lr, [r3, #244]	; 0xf4
    3f78:	str	ip, [r3, #116]	; 0x74
    3f7c:	str	r1, [r3, #36]	; 0x24
    3f80:	mov	r0, #0
    3f84:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    3f88:	ldr	r4, [r7]
    3f8c:	ldr	r2, [pc, #232]	; 407c <cd_attribute_init+0x344>
    3f90:	ldr	r3, [r4, #44]	; 0x2c
    3f94:	str	r2, [r4, #40]	; 0x28
    3f98:	cmp	r3, #2
    3f9c:	beq	4014 <cd_attribute_init+0x2dc>
    3fa0:	mov	r0, r6
    3fa4:	bl	0 <coda_type_record_field_new>
    3fa8:	ldr	r3, [r7]
    3fac:	str	r0, [r4, #8]
    3fb0:	ldr	r2, [r3, #8]
    3fb4:	cmp	r2, #0
    3fb8:	bne	3e84 <cd_attribute_init+0x14c>
    3fbc:	mvn	r0, #0
    3fc0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    3fc4:	ldr	r1, [pc, #276]	; 40e0 <cd_attribute_init+0x3a8>
    3fc8:	ldr	r0, [pc, #276]	; 40e4 <cd_attribute_init+0x3ac>
    3fcc:	bl	0 <coda_set_error>
    3fd0:	mvn	r0, #0
    3fd4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    3fd8:	ldr	r1, [pc, #264]	; 40e8 <cd_attribute_init+0x3b0>
    3fdc:	ldr	r0, [pc, #256]	; 40e4 <cd_attribute_init+0x3ac>
    3fe0:	bl	0 <coda_set_error>
    3fe4:	mvn	r0, #0
    3fe8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    3fec:	ldr	r9, [r0]
    3ff0:	ldr	r3, [r9, #396]	; 0x18c
    3ff4:	ldr	r2, [r3, #48]	; 0x30
    3ff8:	cmp	r2, #0
    3ffc:	beq	4058 <cd_attribute_init+0x320>
    4000:	ldr	r2, [r3, #44]	; 0x2c
    4004:	mov	r3, #1
    4008:	str	r2, [r9, #44]	; 0x2c
    400c:	str	r3, [r9, #48]	; 0x30
    4010:	b	3de4 <cd_attribute_init+0xac>
    4014:	mov	r0, r6
    4018:	bl	0 <coda_element_name_from_xml_name>
    401c:	mov	r1, #0
    4020:	bl	0 <coda_identifier_from_name>
    4024:	subs	r4, r0, #0
    4028:	beq	3fbc <cd_attribute_init+0x284>
    402c:	ldr	r5, [r7]
    4030:	bl	0 <coda_type_record_field_new>
    4034:	str	r0, [r5, #8]
    4038:	mov	r0, r4
    403c:	bl	0 <free>
    4040:	ldr	r3, [r7]
    4044:	ldr	r0, [r3, #8]
    4048:	cmp	r0, #0
    404c:	beq	3fbc <cd_attribute_init+0x284>
    4050:	mov	r4, r6
    4054:	b	3e70 <cd_attribute_init+0x138>
    4058:	ldr	r3, [pc, #140]	; 40ec <cd_attribute_init+0x3b4>
    405c:	ldr	r2, [pc, #140]	; 40f0 <cd_attribute_init+0x3b8>
    4060:	ldr	r1, [pc, #140]	; 40f4 <cd_attribute_init+0x3bc>
    4064:	ldr	r0, [pc, #140]	; 40f8 <cd_attribute_init+0x3c0>
    4068:	bl	0 <__assert_fail>
    406c:	.word	0x0000002c
    4070:	.word	0x00000110
    4074:	.word	0x000000d8
    4078:	.word	0x00000850
	...
    40e0:	.word	0x000008b8
    40e4:	.word	0xfffffe70
    40e8:	.word	0x00000888
    40ec:	.word	0x00000130
    40f0:	.word	0x0000059f
    40f4:	.word	0x00000064
    40f8:	.word	0x000000b8

000040fc <cd_mapping_init>:
    40fc:	ldr	r3, [r0]
    4100:	push	{r4, r5, r6, lr}
    4104:	mov	r4, r0
    4108:	sub	sp, sp, #8
    410c:	mov	r0, r1
    4110:	mov	r5, r1
    4114:	ldr	r2, [r3]
    4118:	ldr	r1, [pc, #380]	; 429c <cd_mapping_init+0x1a0>
    411c:	bl	336c <get_mandatory_attribute_value>
    4120:	subs	r6, r0, #0
    4124:	beq	4230 <cd_mapping_init+0x134>
    4128:	ldr	r3, [r4]
    412c:	mov	r0, r5
    4130:	ldr	r1, [pc, #360]	; 42a0 <cd_mapping_init+0x1a4>
    4134:	ldr	r2, [r3]
    4138:	bl	336c <get_mandatory_attribute_value>
    413c:	subs	r5, r0, #0
    4140:	beq	4230 <cd_mapping_init+0x134>
    4144:	ldr	r3, [r4]
    4148:	ldr	r3, [r3, #396]	; 0x18c
    414c:	ldr	r3, [r3]
    4150:	cmp	r3, #20
    4154:	beq	4238 <cd_mapping_init+0x13c>
    4158:	cmp	r3, #38	; 0x26
    415c:	cmpne	r3, #17
    4160:	bne	4288 <cd_mapping_init+0x18c>
    4164:	ldr	r1, [pc, #312]	; 42a4 <cd_mapping_init+0x1a8>
    4168:	bl	0 <strcasecmp>
    416c:	cmp	r0, #0
    4170:	beq	41f8 <cd_mapping_init+0xfc>
    4174:	ldr	r1, [pc, #300]	; 42a8 <cd_mapping_init+0x1ac>
    4178:	mov	r0, r5
    417c:	bl	0 <strcasecmp>
    4180:	cmp	r0, #0
    4184:	beq	41bc <cd_mapping_init+0xc0>
    4188:	ldr	r1, [pc, #284]	; 42ac <cd_mapping_init+0x1b0>
    418c:	mov	r0, r5
    4190:	bl	0 <strcasecmp>
    4194:	cmp	r0, #0
    4198:	beq	41bc <cd_mapping_init+0xc0>
    419c:	ldr	r1, [pc, #268]	; 42b0 <cd_mapping_init+0x1b4>
    41a0:	mov	r0, r5
    41a4:	bl	0 <strcasecmp>
    41a8:	cmp	r0, #0
    41ac:	bne	4204 <cd_mapping_init+0x108>
    41b0:	bl	0 <coda_MinInf>
    41b4:	vstr	d0, [sp]
    41b8:	b	41c4 <cd_mapping_init+0xc8>
    41bc:	bl	0 <coda_PlusInf>
    41c0:	vstr	d0, [sp]
    41c4:	ldr	r5, [r4]
    41c8:	ldr	r3, [pc, #228]	; 42b4 <cd_mapping_init+0x1b8>
    41cc:	mov	r0, r6
    41d0:	str	r3, [r5, #40]	; 0x28
    41d4:	bl	0 <coda_ascii_float_mapping_new>
    41d8:	ldr	r3, [r4]
    41dc:	str	r0, [r5, #8]
    41e0:	ldr	r3, [r3, #8]
    41e4:	cmp	r3, #0
    41e8:	beq	4230 <cd_mapping_init+0x134>
    41ec:	mov	r0, #0
    41f0:	add	sp, sp, #8
    41f4:	pop	{r4, r5, r6, pc}
    41f8:	bl	0 <coda_NaN>
    41fc:	vstr	d0, [sp]
    4200:	b	41c4 <cd_mapping_init+0xc8>
    4204:	mov	r2, sp
    4208:	ldr	r1, [pc, #168]	; 42b8 <cd_mapping_init+0x1bc>
    420c:	mov	r0, r5
    4210:	bl	0 <__isoc99_sscanf>
    4214:	cmp	r0, #1
    4218:	vldreq	d0, [sp]
    421c:	beq	41c4 <cd_mapping_init+0xc8>
    4220:	mov	r2, r5
    4224:	ldr	r1, [pc, #144]	; 42bc <cd_mapping_init+0x1c0>
    4228:	ldr	r0, [pc, #144]	; 42c0 <cd_mapping_init+0x1c4>
    422c:	bl	0 <coda_set_error>
    4230:	mvn	r0, #0
    4234:	b	41f0 <cd_mapping_init+0xf4>
    4238:	bl	0 <strlen>
    423c:	mov	r3, #0
    4240:	mov	r2, sp
    4244:	mov	r1, r0
    4248:	mov	r0, r5
    424c:	bl	0 <coda_ascii_parse_int64>
    4250:	cmp	r0, #0
    4254:	blt	4274 <cd_mapping_init+0x178>
    4258:	ldr	r5, [r4]
    425c:	ldr	r3, [pc, #96]	; 42c4 <cd_mapping_init+0x1c8>
    4260:	mov	r0, r6
    4264:	str	r3, [r5, #40]	; 0x28
    4268:	ldrd	r2, [sp]
    426c:	bl	0 <coda_ascii_integer_mapping_new>
    4270:	b	41d8 <cd_mapping_init+0xdc>
    4274:	mov	r2, r5
    4278:	ldr	r1, [pc, #72]	; 42c8 <cd_mapping_init+0x1cc>
    427c:	ldr	r0, [pc, #60]	; 42c0 <cd_mapping_init+0x1c4>
    4280:	bl	0 <coda_set_error>
    4284:	b	4230 <cd_mapping_init+0x134>
    4288:	ldr	r3, [pc, #60]	; 42cc <cd_mapping_init+0x1d0>
    428c:	ldr	r2, [pc, #60]	; 42d0 <cd_mapping_init+0x1d4>
    4290:	ldr	r1, [pc, #60]	; 42d4 <cd_mapping_init+0x1d8>
    4294:	ldr	r0, [pc, #60]	; 42d8 <cd_mapping_init+0x1dc>
    4298:	bl	0 <__assert_fail>
    429c:	.word	0x000001b4
    42a0:	.word	0x000008e8
    42a4:	.word	0x00000920
    42a8:	.word	0x00000924
    42ac:	.word	0x00000928
    42b0:	.word	0x00000930
    42b4:	.word	0x00000000
    42b8:	.word	0x00000938
    42bc:	.word	0x0000093c
    42c0:	.word	0xfffffe70
    42c4:	.word	0x00000000
    42c8:	.word	0x000008f0
    42cc:	.word	0x00000144
    42d0:	.word	0x000007f8
    42d4:	.word	0x00000064
    42d8:	.word	0x000005a4

000042dc <cd_conversion_init>:
    42dc:	push	{r4, r5, r6, r7, r8, r9, lr}
    42e0:	mov	r2, #0
    42e4:	sub	sp, sp, #36	; 0x24
    42e8:	mov	r3, #0
    42ec:	mov	r9, r0
    42f0:	mov	r8, r1
    42f4:	strd	r2, [sp, #16]
    42f8:	bl	0 <coda_NaN>
    42fc:	ldr	r3, [r9]
    4300:	mov	r0, r8
    4304:	ldr	r1, [pc, #492]	; 44f8 <cd_conversion_init+0x21c>
    4308:	ldr	r2, [r3]
    430c:	vstr	d0, [sp, #24]
    4310:	bl	336c <get_mandatory_attribute_value>
    4314:	subs	r4, r0, #0
    4318:	beq	44c0 <cd_conversion_init+0x1e4>
    431c:	ldr	r3, [r9]
    4320:	ldr	r1, [pc, #468]	; 44fc <cd_conversion_init+0x220>
    4324:	mov	r0, r8
    4328:	ldr	r2, [r3]
    432c:	bl	336c <get_mandatory_attribute_value>
    4330:	subs	r5, r0, #0
    4334:	beq	44c0 <cd_conversion_init+0x1e4>
    4338:	mov	r0, r4
    433c:	bl	0 <strlen>
    4340:	mov	r3, #1
    4344:	mov	r2, sp
    4348:	mov	r1, r0
    434c:	mov	r0, r4
    4350:	bl	0 <coda_ascii_parse_double>
    4354:	cmp	r0, #0
    4358:	blt	44c8 <cd_conversion_init+0x1ec>
    435c:	mov	r0, r5
    4360:	bl	0 <strlen>
    4364:	mov	r3, #1
    4368:	add	r2, sp, #8
    436c:	mov	r1, r0
    4370:	mov	r0, r5
    4374:	bl	0 <coda_ascii_parse_double>
    4378:	cmp	r0, #0
    437c:	blt	44e0 <cd_conversion_init+0x204>
    4380:	ldr	r4, [r8]
    4384:	cmp	r4, #0
    4388:	beq	4450 <cd_conversion_init+0x174>
    438c:	ldr	r7, [pc, #364]	; 4500 <cd_conversion_init+0x224>
    4390:	mov	r6, r8
    4394:	mov	r5, r8
    4398:	mov	r0, r4
    439c:	b	43ac <cd_conversion_init+0xd0>
    43a0:	ldr	r0, [r5, #8]!
    43a4:	cmp	r0, #0
    43a8:	beq	43f8 <cd_conversion_init+0x11c>
    43ac:	mov	r1, r7
    43b0:	bl	0 <strcmp>
    43b4:	cmp	r0, #0
    43b8:	bne	43a0 <cd_conversion_init+0xc4>
    43bc:	ldr	r5, [r5, #4]
    43c0:	cmp	r5, #0
    43c4:	beq	43f8 <cd_conversion_init+0x11c>
    43c8:	mov	r0, r5
    43cc:	bl	0 <strlen>
    43d0:	mov	r3, #1
    43d4:	add	r2, sp, #16
    43d8:	mov	r1, r0
    43dc:	mov	r0, r5
    43e0:	bl	0 <coda_ascii_parse_double>
    43e4:	cmp	r0, #0
    43e8:	blt	44b0 <cd_conversion_init+0x1d4>
    43ec:	ldr	r4, [r8]
    43f0:	cmp	r4, #0
    43f4:	beq	4450 <cd_conversion_init+0x174>
    43f8:	ldr	r5, [pc, #260]	; 4504 <cd_conversion_init+0x228>
    43fc:	b	440c <cd_conversion_init+0x130>
    4400:	ldr	r4, [r6, #8]!
    4404:	cmp	r4, #0
    4408:	beq	4450 <cd_conversion_init+0x174>
    440c:	mov	r0, r4
    4410:	mov	r1, r5
    4414:	bl	0 <strcmp>
    4418:	cmp	r0, #0
    441c:	bne	4400 <cd_conversion_init+0x124>
    4420:	ldr	r4, [r6, #4]
    4424:	cmp	r4, #0
    4428:	beq	4450 <cd_conversion_init+0x174>
    442c:	mov	r0, r4
    4430:	bl	0 <strlen>
    4434:	mov	r3, #1
    4438:	add	r2, sp, #24
    443c:	mov	r1, r0
    4440:	mov	r0, r4
    4444:	bl	0 <coda_ascii_parse_double>
    4448:	cmp	r0, #0
    444c:	blt	4498 <cd_conversion_init+0x1bc>
    4450:	ldr	r4, [r9]
    4454:	ldr	r3, [pc, #172]	; 4508 <cd_conversion_init+0x22c>
    4458:	vldr	d3, [sp, #24]
    445c:	str	r3, [r4, #40]	; 0x28
    4460:	vldr	d2, [sp, #16]
    4464:	vldr	d1, [sp, #8]
    4468:	vldr	d0, [sp]
    446c:	bl	0 <coda_conversion_new>
    4470:	ldr	r3, [r9]
    4474:	ldr	r1, [pc, #144]	; 450c <cd_conversion_init+0x230>
    4478:	ldr	r2, [pc, #144]	; 4510 <cd_conversion_init+0x234>
    447c:	mov	ip, #0
    4480:	str	r0, [r4, #8]
    4484:	str	r1, [r3, #216]	; 0xd8
    4488:	str	r2, [r3, #388]	; 0x184
    448c:	mov	r0, ip
    4490:	add	sp, sp, #36	; 0x24
    4494:	pop	{r4, r5, r6, r7, r8, r9, pc}
    4498:	mov	r2, r4
    449c:	ldr	r1, [pc, #112]	; 4514 <cd_conversion_init+0x238>
    44a0:	ldr	r0, [pc, #112]	; 4518 <cd_conversion_init+0x23c>
    44a4:	bl	0 <coda_set_error>
    44a8:	mvn	ip, #0
    44ac:	b	448c <cd_conversion_init+0x1b0>
    44b0:	mov	r2, r5
    44b4:	ldr	r1, [pc, #96]	; 451c <cd_conversion_init+0x240>
    44b8:	ldr	r0, [pc, #88]	; 4518 <cd_conversion_init+0x23c>
    44bc:	bl	0 <coda_set_error>
    44c0:	mvn	ip, #0
    44c4:	b	448c <cd_conversion_init+0x1b0>
    44c8:	mov	r2, r4
    44cc:	ldr	r1, [pc, #76]	; 4520 <cd_conversion_init+0x244>
    44d0:	ldr	r0, [pc, #64]	; 4518 <cd_conversion_init+0x23c>
    44d4:	bl	0 <coda_set_error>
    44d8:	mvn	ip, #0
    44dc:	b	448c <cd_conversion_init+0x1b0>
    44e0:	mov	r2, r5
    44e4:	ldr	r1, [pc, #56]	; 4524 <cd_conversion_init+0x248>
    44e8:	ldr	r0, [pc, #40]	; 4518 <cd_conversion_init+0x23c>
    44ec:	bl	0 <coda_set_error>
    44f0:	mvn	ip, #0
    44f4:	b	448c <cd_conversion_init+0x1b0>
    44f8:	.word	0x00000968
    44fc:	.word	0x00000974
    4500:	.word	0x000002ec
    4504:	.word	0x00000a0c
	...
    4514:	.word	0x00000a14
    4518:	.word	0xfffffe70
    451c:	.word	0x000009e0
    4520:	.word	0x00000980
    4524:	.word	0x000009b0

00004528 <cd_product_definition_init>:
    4528:	ldr	r3, [r0]
    452c:	push	{r4, r5, r6, r7, lr}
    4530:	mov	r4, r0
    4534:	sub	sp, sp, #20
    4538:	mov	r0, r1
    453c:	mov	r5, r1
    4540:	ldr	r2, [r3]
    4544:	ldr	r1, [pc, #324]	; 4690 <cd_product_definition_init+0x168>
    4548:	bl	336c <get_mandatory_attribute_value>
    454c:	subs	r7, r0, #0
    4550:	beq	4644 <cd_product_definition_init+0x11c>
    4554:	ldr	r3, [r4]
    4558:	ldr	r1, [pc, #308]	; 4694 <cd_product_definition_init+0x16c>
    455c:	mov	r0, r5
    4560:	ldr	r2, [r3]
    4564:	bl	336c <get_mandatory_attribute_value>
    4568:	cmp	r0, #0
    456c:	beq	4644 <cd_product_definition_init+0x11c>
    4570:	ldr	r1, [r4]
    4574:	add	r1, r1, #44	; 0x2c
    4578:	bl	0 <coda_format_from_string>
    457c:	subs	r6, r0, #0
    4580:	bne	4644 <cd_product_definition_init+0x11c>
    4584:	ldr	r3, [r4]
    4588:	mov	r2, #1
    458c:	mov	r0, r5
    4590:	str	r2, [r3, #48]	; 0x30
    4594:	ldr	r1, [pc, #252]	; 4698 <cd_product_definition_init+0x170>
    4598:	ldr	r2, [r3]
    459c:	bl	336c <get_mandatory_attribute_value>
    45a0:	subs	r5, r0, #0
    45a4:	beq	4644 <cd_product_definition_init+0x11c>
    45a8:	add	r2, sp, #12
    45ac:	ldr	r1, [pc, #232]	; 469c <cd_product_definition_init+0x174>
    45b0:	bl	0 <__isoc99_sscanf>
    45b4:	cmp	r0, #1
    45b8:	bne	4634 <cd_product_definition_init+0x10c>
    45bc:	ldr	r3, [r4]
    45c0:	ldr	r1, [pc, #216]	; 46a0 <cd_product_definition_init+0x178>
    45c4:	ldr	r2, [sp, #12]
    45c8:	str	r1, [r3, #40]	; 0x28
    45cc:	mov	r0, r7
    45d0:	ldr	r1, [r3, #44]	; 0x2c
    45d4:	bl	0 <coda_product_definition_new>
    45d8:	cmp	r0, #0
    45dc:	mov	r2, r0
    45e0:	str	r0, [r4, #28]
    45e4:	beq	4644 <cd_product_definition_init+0x11c>
    45e8:	ldr	r3, [pc, #180]	; 46a4 <cd_product_definition_init+0x17c>
    45ec:	bl	0 <__aeabi_read_tp>
    45f0:	ldr	r3, [pc, r3]
    45f4:	ldr	r3, [r0, r3]
    45f8:	cmp	r3, #0
    45fc:	bne	4654 <cd_product_definition_init+0x12c>
    4600:	ldr	r3, [r4]
    4604:	ldr	lr, [pc, #156]	; 46a8 <cd_product_definition_init+0x180>
    4608:	ldr	ip, [pc, #156]	; 46ac <cd_product_definition_init+0x184>
    460c:	ldr	r0, [pc, #156]	; 46b0 <cd_product_definition_init+0x188>
    4610:	ldr	r1, [pc, #156]	; 46b4 <cd_product_definition_init+0x18c>
    4614:	str	r2, [r3, #8]
    4618:	str	lr, [r3, #96]	; 0x60
    461c:	str	ip, [r3, #268]	; 0x10c
    4620:	str	r0, [r3, #100]	; 0x64
    4624:	str	r1, [r3, #272]	; 0x110
    4628:	mov	r0, r6
    462c:	add	sp, sp, #20
    4630:	pop	{r4, r5, r6, r7, pc}
    4634:	mov	r2, r5
    4638:	ldr	r1, [pc, #120]	; 46b8 <cd_product_definition_init+0x190>
    463c:	ldr	r0, [pc, #120]	; 46bc <cd_product_definition_init+0x194>
    4640:	bl	0 <coda_set_error>
    4644:	mvn	r6, #0
    4648:	mov	r0, r6
    464c:	add	sp, sp, #20
    4650:	pop	{r4, r5, r6, r7, pc}
    4654:	ldr	r3, [r4, #24]
    4658:	ldr	r0, [r4, #16]
    465c:	mov	r1, #2
    4660:	str	r2, [sp]
    4664:	mov	r2, r7
    4668:	bl	25bc <parse_entry>
    466c:	cmp	r0, #0
    4670:	ldreq	r2, [r4, #28]
    4674:	beq	4600 <cd_product_definition_init+0xd8>
    4678:	ldr	r0, [r4, #28]
    467c:	bl	0 <coda_product_definition_delete>
    4680:	str	r6, [r4, #28]
    4684:	str	r6, [r4, #44]	; 0x2c
    4688:	mvn	r6, #0
    468c:	b	4628 <cd_product_definition_init+0x100>
    4690:	.word	0x00000770
    4694:	.word	0x0000002c
    4698:	.word	0x00000a40
    469c:	.word	0x00000a48
    46a0:	.word	0x00000000
    46a4:	.word	0x000000ac
	...
    46b8:	.word	0x00000a4c
    46bc:	.word	0xfffffe70

000046c0 <handle_format_attribute_for_type.isra.4>:
    46c0:	push	{r4, r5, r6, r7, r8, lr}
    46c4:	mov	r7, r0
    46c8:	ldr	r6, [r0]
    46cc:	ldr	r8, [r6, #396]	; 0x18c
    46d0:	ldr	r3, [r8, #48]	; 0x30
    46d4:	cmp	r3, #0
    46d8:	beq	4740 <handle_format_attribute_for_type.isra.4+0x80>
    46dc:	ldr	r0, [r1]
    46e0:	cmp	r0, #0
    46e4:	movne	r4, r1
    46e8:	ldrne	r5, [pc, #144]	; 4780 <handle_format_attribute_for_type.isra.4+0xc0>
    46ec:	bne	4700 <handle_format_attribute_for_type.isra.4+0x40>
    46f0:	b	4774 <handle_format_attribute_for_type.isra.4+0xb4>
    46f4:	ldr	r0, [r4, #8]!
    46f8:	cmp	r0, #0
    46fc:	beq	4774 <handle_format_attribute_for_type.isra.4+0xb4>
    4700:	mov	r1, r5
    4704:	bl	0 <strcmp>
    4708:	cmp	r0, #0
    470c:	bne	46f4 <handle_format_attribute_for_type.isra.4+0x34>
    4710:	ldr	r0, [r4, #4]
    4714:	cmp	r0, #0
    4718:	beq	4774 <handle_format_attribute_for_type.isra.4+0xb4>
    471c:	add	r1, r6, #44	; 0x2c
    4720:	bl	0 <coda_format_from_string>
    4724:	cmp	r0, #0
    4728:	bne	476c <handle_format_attribute_for_type.isra.4+0xac>
    472c:	ldr	r6, [r7]
    4730:	mov	r3, #1
    4734:	mov	r0, #0
    4738:	str	r3, [r6, #48]	; 0x30
    473c:	pop	{r4, r5, r6, r7, r8, pc}
    4740:	mov	r0, r1
    4744:	ldr	r2, [r6]
    4748:	ldr	r1, [pc, #48]	; 4780 <handle_format_attribute_for_type.isra.4+0xc0>
    474c:	bl	336c <get_mandatory_attribute_value>
    4750:	cmp	r0, #0
    4754:	beq	476c <handle_format_attribute_for_type.isra.4+0xac>
    4758:	ldr	r1, [r7]
    475c:	add	r1, r1, #44	; 0x2c
    4760:	bl	0 <coda_format_from_string>
    4764:	cmp	r0, #0
    4768:	beq	472c <handle_format_attribute_for_type.isra.4+0x6c>
    476c:	mvn	r0, #0
    4770:	pop	{r4, r5, r6, r7, r8, pc}
    4774:	ldr	r3, [r8, #44]	; 0x2c
    4778:	str	r3, [r6, #44]	; 0x2c
    477c:	b	4730 <handle_format_attribute_for_type.isra.4+0x70>
    4780:	.word	0x0000002c

00004784 <handle_xml_name.isra.5>:
    4784:	ldr	r3, [r0, #48]	; 0x30
    4788:	push	{r4, r5, r6, lr}
    478c:	cmp	r3, #0
    4790:	beq	4848 <handle_xml_name.isra.5+0xc4>
    4794:	ldr	r3, [r0, #44]	; 0x2c
    4798:	cmp	r3, #2
    479c:	beq	47a8 <handle_xml_name.isra.5+0x24>
    47a0:	mov	r0, #0
    47a4:	pop	{r4, r5, r6, pc}
    47a8:	ldr	r4, [r0, #396]	; 0x18c
    47ac:	ldr	r3, [r4]
    47b0:	cmp	r3, #14
    47b4:	beq	47d0 <handle_xml_name.isra.5+0x4c>
    47b8:	cmn	r3, #1
    47bc:	beq	47a0 <handle_xml_name.isra.5+0x1c>
    47c0:	ldr	r4, [r4, #396]	; 0x18c
    47c4:	ldr	r3, [r4]
    47c8:	cmp	r3, #14
    47cc:	bne	47b8 <handle_xml_name.isra.5+0x34>
    47d0:	ldr	r0, [r1]
    47d4:	cmp	r0, #0
    47d8:	popeq	{r4, r5, r6, pc}
    47dc:	ldr	r6, [pc, #124]	; 4860 <handle_xml_name.isra.5+0xdc>
    47e0:	mov	r5, r1
    47e4:	b	47f4 <handle_xml_name.isra.5+0x70>
    47e8:	ldr	r0, [r5, #8]!
    47ec:	cmp	r0, #0
    47f0:	beq	4830 <handle_xml_name.isra.5+0xac>
    47f4:	mov	r1, r6
    47f8:	bl	0 <strcmp>
    47fc:	cmp	r0, #0
    4800:	bne	47e8 <handle_xml_name.isra.5+0x64>
    4804:	ldr	r1, [r5, #4]
    4808:	cmp	r1, #0
    480c:	beq	485c <handle_xml_name.isra.5+0xd8>
    4810:	ldr	r0, [r4, #8]
    4814:	ldr	r3, [r0, #4]
    4818:	cmp	r3, #0
    481c:	bne	4834 <handle_xml_name.isra.5+0xb0>
    4820:	bl	0 <coda_type_record_field_set_real_name>
    4824:	adds	r0, r0, #0
    4828:	mvnne	r0, #0
    482c:	pop	{r4, r5, r6, pc}
    4830:	pop	{r4, r5, r6, pc}
    4834:	ldr	r1, [pc, #40]	; 4864 <handle_xml_name.isra.5+0xe0>
    4838:	ldr	r0, [pc, #40]	; 4868 <handle_xml_name.isra.5+0xe4>
    483c:	bl	0 <coda_set_error>
    4840:	mvn	r0, #0
    4844:	pop	{r4, r5, r6, pc}
    4848:	ldr	r3, [pc, #28]	; 486c <handle_xml_name.isra.5+0xe8>
    484c:	mov	r2, #676	; 0x2a4
    4850:	ldr	r1, [pc, #24]	; 4870 <handle_xml_name.isra.5+0xec>
    4854:	ldr	r0, [pc, #24]	; 4874 <handle_xml_name.isra.5+0xf0>
    4858:	bl	0 <__assert_fail>
    485c:	pop	{r4, r5, r6, pc}
    4860:	.word	0x00000110
    4864:	.word	0x00000a8c
    4868:	.word	0xfffffe70
    486c:	.word	0x00000154
    4870:	.word	0x00000064
    4874:	.word	0x00000a74

00004878 <cd_type_init>:
    4878:	push	{r4, r5, r6, r7, r8, lr}
    487c:	mov	r7, r0
    4880:	ldr	r0, [r1]
    4884:	mov	r6, r1
    4888:	cmp	r0, #0
    488c:	beq	48c4 <cd_type_init+0x4c>
    4890:	ldr	r5, [pc, #372]	; 4a0c <cd_type_init+0x194>
    4894:	mov	r4, r1
    4898:	b	48a8 <cd_type_init+0x30>
    489c:	ldr	r0, [r4, #8]!
    48a0:	cmp	r0, #0
    48a4:	beq	48c4 <cd_type_init+0x4c>
    48a8:	mov	r1, r5
    48ac:	bl	0 <strcmp>
    48b0:	cmp	r0, #0
    48b4:	bne	489c <cd_type_init+0x24>
    48b8:	ldr	r3, [r4, #4]
    48bc:	cmp	r3, #0
    48c0:	bne	49f0 <cd_type_init+0x178>
    48c4:	mov	r1, r6
    48c8:	mov	r0, r7
    48cc:	bl	46c0 <handle_format_attribute_for_type.isra.4>
    48d0:	cmp	r0, #0
    48d4:	bne	4a04 <cd_type_init+0x18c>
    48d8:	ldr	r4, [r7]
    48dc:	ldr	r3, [pc, #300]	; 4a10 <cd_type_init+0x198>
    48e0:	ldr	r0, [r4, #44]	; 0x2c
    48e4:	str	r3, [r4, #40]	; 0x28
    48e8:	bl	0 <coda_type_text_new>
    48ec:	ldr	r3, [r7]
    48f0:	str	r0, [r4, #8]
    48f4:	ldr	r2, [r3, #8]
    48f8:	cmp	r2, #0
    48fc:	beq	4a04 <cd_type_init+0x18c>
    4900:	ldr	r2, [pc, #268]	; 4a14 <cd_type_init+0x19c>
    4904:	ldr	lr, [pc, #268]	; 4a18 <cd_type_init+0x1a0>
    4908:	ldr	ip, [pc, #268]	; 4a1c <cd_type_init+0x1a4>
    490c:	ldr	r0, [pc, #268]	; 4a20 <cd_type_init+0x1a8>
    4910:	str	lr, [r3, #56]	; 0x38
    4914:	str	r2, [r3, #228]	; 0xe4
    4918:	str	r2, [r3, #232]	; 0xe8
    491c:	str	r2, [r3, #236]	; 0xec
    4920:	str	r2, [r3, #224]	; 0xe0
    4924:	str	r2, [r3, #260]	; 0x104
    4928:	str	r2, [r3, #292]	; 0x124
    492c:	str	r2, [r3, #304]	; 0x130
    4930:	str	r2, [r3, #332]	; 0x14c
    4934:	str	r2, [r3, #360]	; 0x168
    4938:	str	r2, [r3, #364]	; 0x16c
    493c:	str	r2, [r3, #372]	; 0x174
    4940:	str	r2, [r3, #376]	; 0x178
    4944:	str	r2, [r3, #380]	; 0x17c
    4948:	str	r2, [r3, #384]	; 0x180
    494c:	str	r2, [r3, #392]	; 0x188
    4950:	str	ip, [r3, #60]	; 0x3c
    4954:	str	r0, [r3, #64]	; 0x40
    4958:	ldr	r4, [pc, #196]	; 4a24 <cd_type_init+0x1ac>
    495c:	ldr	lr, [pc, #196]	; 4a28 <cd_type_init+0x1b0>
    4960:	ldr	ip, [pc, #196]	; 4a2c <cd_type_init+0x1b4>
    4964:	ldr	r0, [pc, #196]	; 4a30 <cd_type_init+0x1b8>
    4968:	ldr	r2, [pc, #196]	; 4a34 <cd_type_init+0x1bc>
    496c:	str	r4, [r3, #88]	; 0x58
    4970:	str	lr, [r3, #120]	; 0x78
    4974:	str	ip, [r3, #132]	; 0x84
    4978:	str	r0, [r3, #160]	; 0xa0
    497c:	str	r2, [r3, #188]	; 0xbc
    4980:	ldr	r4, [pc, #176]	; 4a38 <cd_type_init+0x1c0>
    4984:	ldr	lr, [pc, #176]	; 4a3c <cd_type_init+0x1c4>
    4988:	ldr	ip, [pc, #176]	; 4a40 <cd_type_init+0x1c8>
    498c:	ldr	r0, [pc, #176]	; 4a44 <cd_type_init+0x1cc>
    4990:	ldr	r2, [pc, #176]	; 4a48 <cd_type_init+0x1d0>
    4994:	str	r4, [r3, #192]	; 0xc0
    4998:	str	lr, [r3, #200]	; 0xc8
    499c:	str	ip, [r3, #204]	; 0xcc
    49a0:	ldr	lr, [pc, #164]	; 4a4c <cd_type_init+0x1d4>
    49a4:	ldr	ip, [pc, #164]	; 4a50 <cd_type_init+0x1d8>
    49a8:	str	r0, [r3, #208]	; 0xd0
    49ac:	str	r2, [r3, #212]	; 0xd4
    49b0:	ldr	r5, [pc, #156]	; 4a54 <cd_type_init+0x1dc>
    49b4:	ldr	r2, [pc, #156]	; 4a58 <cd_type_init+0x1e0>
    49b8:	ldr	r4, [pc, #156]	; 4a5c <cd_type_init+0x1e4>
    49bc:	ldr	r0, [pc, #156]	; 4a60 <cd_type_init+0x1e8>
    49c0:	str	r5, [r3, #52]	; 0x34
    49c4:	str	r4, [r3, #220]	; 0xdc
    49c8:	str	lr, [r3, #96]	; 0x60
    49cc:	str	ip, [r3, #268]	; 0x10c
    49d0:	mov	r1, r6
    49d4:	str	r0, [r3, #68]	; 0x44
    49d8:	ldr	r0, [r7]
    49dc:	str	r2, [r3, #240]	; 0xf0
    49e0:	bl	4784 <handle_xml_name.isra.5>
    49e4:	adds	r0, r0, #0
    49e8:	mvnne	r0, #0
    49ec:	pop	{r4, r5, r6, r7, r8, pc}
    49f0:	ldr	r1, [pc, #108]	; 4a64 <cd_type_init+0x1ec>
    49f4:	ldr	r0, [pc, #108]	; 4a68 <cd_type_init+0x1f0>
    49f8:	bl	0 <coda_set_error>
    49fc:	mvn	r0, #0
    4a00:	pop	{r4, r5, r6, r7, r8, pc}
    4a04:	mvn	r0, #0
    4a08:	pop	{r4, r5, r6, r7, r8, pc}
    4a0c:	.word	0x000000d8
	...
    4a64:	.word	0x00000ad4
    4a68:	.word	0xfffffe70

00004a6c <handle_name_attribute_for_type.isra.6>:
    4a6c:	ldr	r3, [r0]
    4a70:	push	{r4, r5, r6, r7, r8, lr}
    4a74:	mov	r4, r2
    4a78:	ldr	r2, [r3, #396]	; 0x18c
    4a7c:	ldr	r2, [r2, #396]	; 0x18c
    4a80:	cmp	r2, #0
    4a84:	beq	4adc <handle_name_attribute_for_type.isra.6+0x70>
    4a88:	ldr	r0, [r4]
    4a8c:	cmp	r0, #0
    4a90:	ldrne	r5, [pc, #184]	; 4b50 <handle_name_attribute_for_type.isra.6+0xe4>
    4a94:	bne	4aa8 <handle_name_attribute_for_type.isra.6+0x3c>
    4a98:	b	4b2c <handle_name_attribute_for_type.isra.6+0xc0>
    4a9c:	ldr	r0, [r4, #8]!
    4aa0:	cmp	r0, #0
    4aa4:	beq	4ad8 <handle_name_attribute_for_type.isra.6+0x6c>
    4aa8:	mov	r1, r5
    4aac:	bl	0 <strcmp>
    4ab0:	cmp	r0, #0
    4ab4:	bne	4a9c <handle_name_attribute_for_type.isra.6+0x30>
    4ab8:	ldr	r3, [r4, #4]
    4abc:	cmp	r3, #0
    4ac0:	popeq	{r4, r5, r6, r7, r8, pc}
    4ac4:	ldr	r1, [pc, #136]	; 4b54 <handle_name_attribute_for_type.isra.6+0xe8>
    4ac8:	ldr	r0, [pc, #136]	; 4b58 <handle_name_attribute_for_type.isra.6+0xec>
    4acc:	bl	0 <coda_set_error>
    4ad0:	mvn	r0, #0
    4ad4:	pop	{r4, r5, r6, r7, r8, pc}
    4ad8:	pop	{r4, r5, r6, r7, r8, pc}
    4adc:	mov	r5, r0
    4ae0:	mov	r6, r1
    4ae4:	ldr	r2, [r3]
    4ae8:	mov	r0, r4
    4aec:	ldr	r1, [pc, #92]	; 4b50 <handle_name_attribute_for_type.isra.6+0xe4>
    4af0:	bl	336c <get_mandatory_attribute_value>
    4af4:	subs	r7, r0, #0
    4af8:	beq	4b48 <handle_name_attribute_for_type.isra.6+0xdc>
    4afc:	ldr	r4, [r6]
    4b00:	mov	r1, r4
    4b04:	bl	0 <strcmp>
    4b08:	cmp	r0, #0
    4b0c:	bne	4b30 <handle_name_attribute_for_type.isra.6+0xc4>
    4b10:	ldr	r3, [r5]
    4b14:	mov	r1, r7
    4b18:	ldr	r0, [r3, #8]
    4b1c:	bl	0 <coda_type_set_name>
    4b20:	adds	r0, r0, #0
    4b24:	mvnne	r0, #0
    4b28:	pop	{r4, r5, r6, r7, r8, pc}
    4b2c:	pop	{r4, r5, r6, r7, r8, pc}
    4b30:	mov	r2, r4
    4b34:	ldr	r1, [pc, #32]	; 4b5c <handle_name_attribute_for_type.isra.6+0xf0>
    4b38:	ldr	r0, [pc, #24]	; 4b58 <handle_name_attribute_for_type.isra.6+0xec>
    4b3c:	bl	0 <coda_set_error>
    4b40:	mvn	r0, #0
    4b44:	pop	{r4, r5, r6, r7, r8, pc}
    4b48:	mvn	r0, #0
    4b4c:	pop	{r4, r5, r6, r7, r8, pc}
    4b50:	.word	0x000000d8
    4b54:	.word	0x00000b3c
    4b58:	.word	0xfffffe70
    4b5c:	.word	0x00000afc

00004b60 <xml_root_init>:
    4b60:	ldr	r3, [r0, #28]
    4b64:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    4b68:	cmp	r3, #0
    4b6c:	beq	4cb0 <xml_root_init+0x150>
    4b70:	mov	r8, r0
    4b74:	mov	r9, r1
    4b78:	bl	46c0 <handle_format_attribute_for_type.isra.4>
    4b7c:	cmp	r0, #0
    4b80:	bne	4c84 <xml_root_init+0x124>
    4b84:	ldr	sl, [r8]
    4b88:	ldr	r0, [sl, #44]	; 0x2c
    4b8c:	cmp	r0, #2
    4b90:	bne	4c8c <xml_root_init+0x12c>
    4b94:	ldr	r4, [r9]
    4b98:	cmp	r4, #0
    4b9c:	beq	4c10 <xml_root_init+0xb0>
    4ba0:	ldr	r7, [pc, #284]	; 4cc4 <xml_root_init+0x164>
    4ba4:	mov	r6, r9
    4ba8:	mov	r5, r9
    4bac:	mov	r0, r4
    4bb0:	b	4bc0 <xml_root_init+0x60>
    4bb4:	ldr	r0, [r5, #8]!
    4bb8:	cmp	r0, #0
    4bbc:	beq	4bdc <xml_root_init+0x7c>
    4bc0:	mov	r1, r7
    4bc4:	bl	0 <strcmp>
    4bc8:	cmp	r0, #0
    4bcc:	bne	4bb4 <xml_root_init+0x54>
    4bd0:	ldr	r3, [r5, #4]
    4bd4:	cmp	r3, #0
    4bd8:	bne	4c78 <xml_root_init+0x118>
    4bdc:	ldr	r5, [pc, #228]	; 4cc8 <xml_root_init+0x168>
    4be0:	b	4bf0 <xml_root_init+0x90>
    4be4:	ldr	r4, [r6, #8]!
    4be8:	cmp	r4, #0
    4bec:	beq	4c10 <xml_root_init+0xb0>
    4bf0:	mov	r0, r4
    4bf4:	mov	r1, r5
    4bf8:	bl	0 <strcmp>
    4bfc:	cmp	r0, #0
    4c00:	bne	4be4 <xml_root_init+0x84>
    4c04:	ldr	r3, [r6, #4]
    4c08:	cmp	r3, #0
    4c0c:	bne	4c64 <xml_root_init+0x104>
    4c10:	ldr	r3, [pc, #180]	; 4ccc <xml_root_init+0x16c>
    4c14:	mov	r0, #2
    4c18:	str	r3, [sl, #40]	; 0x28
    4c1c:	bl	0 <coda_type_record_new>
    4c20:	mov	r2, r9
    4c24:	add	r1, r8, #20
    4c28:	str	r0, [sl, #8]
    4c2c:	mov	r0, r8
    4c30:	bl	4a6c <handle_name_attribute_for_type.isra.6>
    4c34:	cmp	r0, #0
    4c38:	bne	4c84 <xml_root_init+0x124>
    4c3c:	ldr	r3, [r8]
    4c40:	ldr	lr, [pc, #136]	; 4cd0 <xml_root_init+0x170>
    4c44:	ldr	ip, [pc, #136]	; 4cd4 <xml_root_init+0x174>
    4c48:	ldr	r1, [pc, #136]	; 4cd8 <xml_root_init+0x178>
    4c4c:	ldr	r2, [pc, #136]	; 4cdc <xml_root_init+0x17c>
    4c50:	str	lr, [r3, #96]	; 0x60
    4c54:	str	ip, [r3, #268]	; 0x10c
    4c58:	str	r1, [r3, #108]	; 0x6c
    4c5c:	str	r2, [r3, #280]	; 0x118
    4c60:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    4c64:	ldr	r1, [pc, #116]	; 4ce0 <xml_root_init+0x180>
    4c68:	ldr	r0, [pc, #116]	; 4ce4 <xml_root_init+0x184>
    4c6c:	bl	0 <coda_set_error>
    4c70:	mvn	r0, #0
    4c74:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    4c78:	ldr	r1, [pc, #104]	; 4ce8 <xml_root_init+0x188>
    4c7c:	ldr	r0, [pc, #96]	; 4ce4 <xml_root_init+0x184>
    4c80:	bl	0 <coda_set_error>
    4c84:	mvn	r0, #0
    4c88:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    4c8c:	bl	0 <coda_type_get_format_name>
    4c90:	ldr	r3, [r8, #28]
    4c94:	ldr	r1, [pc, #80]	; 4cec <xml_root_init+0x18c>
    4c98:	ldr	r3, [r3, #8]
    4c9c:	mov	r2, r0
    4ca0:	ldr	r0, [pc, #60]	; 4ce4 <xml_root_init+0x184>
    4ca4:	bl	0 <coda_set_error>
    4ca8:	mvn	r0, #0
    4cac:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    4cb0:	ldr	r3, [pc, #56]	; 4cf0 <xml_root_init+0x190>
    4cb4:	mov	r2, #1184	; 0x4a0
    4cb8:	ldr	r1, [pc, #52]	; 4cf4 <xml_root_init+0x194>
    4cbc:	ldr	r0, [pc, #52]	; 4cf8 <xml_root_init+0x198>
    4cc0:	bl	0 <__assert_fail>
    4cc4:	.word	0x000000d8
    4cc8:	.word	0x00000110
	...
    4ce0:	.word	0x00000bec
    4ce4:	.word	0xfffffe70
    4ce8:	.word	0x00000bb8
    4cec:	.word	0x00000b84
    4cf0:	.word	0x00000164
    4cf4:	.word	0x00000064
    4cf8:	.word	0x0000074c

00004cfc <cd_record_init>:
    4cfc:	push	{r4, r5, r6, lr}
    4d00:	mov	r4, r0
    4d04:	mov	r6, r1
    4d08:	bl	46c0 <handle_format_attribute_for_type.isra.4>
    4d0c:	cmp	r0, #0
    4d10:	bne	4db4 <cd_record_init+0xb8>
    4d14:	ldr	r5, [r4]
    4d18:	ldr	r3, [pc, #156]	; 4dbc <cd_record_init+0xc0>
    4d1c:	ldr	r0, [r5, #44]	; 0x2c
    4d20:	str	r3, [r5, #40]	; 0x28
    4d24:	bl	0 <coda_type_record_new>
    4d28:	ldr	r3, [r4]
    4d2c:	str	r0, [r5, #8]
    4d30:	ldr	r3, [r3, #8]
    4d34:	cmp	r3, #0
    4d38:	beq	4db4 <cd_record_init+0xb8>
    4d3c:	mov	r2, r6
    4d40:	add	r1, r4, #20
    4d44:	mov	r0, r4
    4d48:	bl	4a6c <handle_name_attribute_for_type.isra.6>
    4d4c:	cmp	r0, #0
    4d50:	bne	4db4 <cd_record_init+0xb8>
    4d54:	ldr	r0, [r4]
    4d58:	ldr	ip, [pc, #96]	; 4dc0 <cd_record_init+0xc4>
    4d5c:	ldr	r2, [pc, #96]	; 4dc4 <cd_record_init+0xc8>
    4d60:	ldr	r3, [pc, #96]	; 4dc8 <cd_record_init+0xcc>
    4d64:	ldr	lr, [pc, #96]	; 4dcc <cd_record_init+0xd0>
    4d68:	ldr	r5, [pc, #96]	; 4dd0 <cd_record_init+0xd4>
    4d6c:	ldr	r4, [pc, #96]	; 4dd4 <cd_record_init+0xd8>
    4d70:	str	ip, [r0, #96]	; 0x60
    4d74:	str	r2, [r0, #268]	; 0x10c
    4d78:	ldr	ip, [pc, #88]	; 4dd8 <cd_record_init+0xdc>
    4d7c:	ldr	r2, [pc, #88]	; 4ddc <cd_record_init+0xe0>
    4d80:	str	r3, [r0, #80]	; 0x50
    4d84:	ldr	r3, [pc, #84]	; 4de0 <cd_record_init+0xe4>
    4d88:	mov	r1, r6
    4d8c:	str	r5, [r0, #252]	; 0xfc
    4d90:	str	r4, [r0, #108]	; 0x6c
    4d94:	str	lr, [r0, #280]	; 0x118
    4d98:	str	ip, [r0, #68]	; 0x44
    4d9c:	str	r2, [r0, #240]	; 0xf0
    4da0:	str	r3, [r0, #36]	; 0x24
    4da4:	bl	4784 <handle_xml_name.isra.5>
    4da8:	adds	r0, r0, #0
    4dac:	mvnne	r0, #0
    4db0:	pop	{r4, r5, r6, pc}
    4db4:	mvn	r0, #0
    4db8:	pop	{r4, r5, r6, pc}
	...

00004de4 <cd_vsf_integer_init>:
    4de4:	push	{r4, r5, r6, lr}
    4de8:	mov	r4, r0
    4dec:	mov	r6, r1
    4df0:	bl	46c0 <handle_format_attribute_for_type.isra.4>
    4df4:	cmp	r0, #0
    4df8:	bne	4f30 <cd_vsf_integer_init+0x14c>
    4dfc:	ldr	r5, [r4]
    4e00:	ldr	r3, [pc, #304]	; 4f38 <cd_vsf_integer_init+0x154>
    4e04:	ldr	r0, [r5, #44]	; 0x2c
    4e08:	str	r3, [r5, #40]	; 0x28
    4e0c:	bl	0 <coda_type_vsf_integer_new>
    4e10:	ldr	r3, [r4]
    4e14:	str	r0, [r5, #8]
    4e18:	ldr	r3, [r3, #8]
    4e1c:	cmp	r3, #0
    4e20:	beq	4f30 <cd_vsf_integer_init+0x14c>
    4e24:	mov	r2, r6
    4e28:	add	r1, r4, #20
    4e2c:	mov	r0, r4
    4e30:	bl	4a6c <handle_name_attribute_for_type.isra.6>
    4e34:	cmp	r0, #0
    4e38:	bne	4f30 <cd_vsf_integer_init+0x14c>
    4e3c:	ldr	r3, [r4]
    4e40:	ldr	r5, [pc, #244]	; 4f3c <cd_vsf_integer_init+0x158>
    4e44:	ldr	r4, [pc, #244]	; 4f40 <cd_vsf_integer_init+0x15c>
    4e48:	ldr	lr, [pc, #244]	; 4f44 <cd_vsf_integer_init+0x160>
    4e4c:	ldr	ip, [pc, #244]	; 4f48 <cd_vsf_integer_init+0x164>
    4e50:	str	r5, [r3, #268]	; 0x10c
    4e54:	str	r4, [r3, #56]	; 0x38
    4e58:	str	lr, [r3, #60]	; 0x3c
    4e5c:	str	ip, [r3, #64]	; 0x40
    4e60:	ldr	r1, [pc, #228]	; 4f4c <cd_vsf_integer_init+0x168>
    4e64:	ldr	r2, [pc, #228]	; 4f50 <cd_vsf_integer_init+0x16c>
    4e68:	ldr	r5, [pc, #228]	; 4f54 <cd_vsf_integer_init+0x170>
    4e6c:	ldr	r4, [pc, #228]	; 4f58 <cd_vsf_integer_init+0x174>
    4e70:	ldr	lr, [pc, #228]	; 4f5c <cd_vsf_integer_init+0x178>
    4e74:	ldr	ip, [pc, #228]	; 4f60 <cd_vsf_integer_init+0x17c>
    4e78:	str	r1, [r3, #52]	; 0x34
    4e7c:	str	r2, [r3, #88]	; 0x58
    4e80:	str	r5, [r3, #120]	; 0x78
    4e84:	str	r4, [r3, #132]	; 0x84
    4e88:	str	lr, [r3, #160]	; 0xa0
    4e8c:	str	ip, [r3, #188]	; 0xbc
    4e90:	ldr	r1, [pc, #204]	; 4f64 <cd_vsf_integer_init+0x180>
    4e94:	ldr	r2, [pc, #204]	; 4f68 <cd_vsf_integer_init+0x184>
    4e98:	ldr	r5, [pc, #204]	; 4f6c <cd_vsf_integer_init+0x188>
    4e9c:	ldr	r4, [pc, #204]	; 4f70 <cd_vsf_integer_init+0x18c>
    4ea0:	ldr	lr, [pc, #204]	; 4f74 <cd_vsf_integer_init+0x190>
    4ea4:	ldr	ip, [pc, #204]	; 4f78 <cd_vsf_integer_init+0x194>
    4ea8:	str	r1, [r3, #192]	; 0xc0
    4eac:	str	r2, [r3, #200]	; 0xc8
    4eb0:	ldr	r1, [pc, #196]	; 4f7c <cd_vsf_integer_init+0x198>
    4eb4:	ldr	r2, [pc, #196]	; 4f80 <cd_vsf_integer_init+0x19c>
    4eb8:	str	r5, [r3, #204]	; 0xcc
    4ebc:	str	r4, [r3, #208]	; 0xd0
    4ec0:	str	lr, [r3, #212]	; 0xd4
    4ec4:	str	ip, [r3, #220]	; 0xdc
    4ec8:	ldr	r5, [pc, #180]	; 4f84 <cd_vsf_integer_init+0x1a0>
    4ecc:	ldr	r4, [pc, #180]	; 4f88 <cd_vsf_integer_init+0x1a4>
    4ed0:	ldr	lr, [pc, #180]	; 4f8c <cd_vsf_integer_init+0x1a8>
    4ed4:	ldr	ip, [pc, #180]	; 4f90 <cd_vsf_integer_init+0x1ac>
    4ed8:	str	r1, [r3, #96]	; 0x60
    4edc:	str	r2, [r3, #228]	; 0xe4
    4ee0:	str	r2, [r3, #232]	; 0xe8
    4ee4:	str	r2, [r3, #236]	; 0xec
    4ee8:	str	r2, [r3, #224]	; 0xe0
    4eec:	str	r2, [r3, #260]	; 0x104
    4ef0:	str	r2, [r3, #292]	; 0x124
    4ef4:	str	r2, [r3, #304]	; 0x130
    4ef8:	str	r2, [r3, #332]	; 0x14c
    4efc:	str	r2, [r3, #360]	; 0x168
    4f00:	str	r2, [r3, #364]	; 0x16c
    4f04:	str	r2, [r3, #372]	; 0x174
    4f08:	str	r2, [r3, #376]	; 0x178
    4f0c:	str	r2, [r3, #380]	; 0x17c
    4f10:	str	r2, [r3, #384]	; 0x180
    4f14:	str	r2, [r3, #392]	; 0x188
    4f18:	str	r1, [r3, #216]	; 0xd8
    4f1c:	str	r5, [r3, #196]	; 0xc4
    4f20:	str	r4, [r3, #368]	; 0x170
    4f24:	str	lr, [r3, #388]	; 0x184
    4f28:	str	ip, [r3, #36]	; 0x24
    4f2c:	pop	{r4, r5, r6, pc}
    4f30:	mvn	r0, #0
    4f34:	pop	{r4, r5, r6, pc}
	...

00004f94 <cd_union_init>:
    4f94:	push	{r4, r5, r6, lr}
    4f98:	mov	r4, r0
    4f9c:	mov	r6, r1
    4fa0:	bl	46c0 <handle_format_attribute_for_type.isra.4>
    4fa4:	cmp	r0, #0
    4fa8:	bne	5058 <cd_union_init+0xc4>
    4fac:	ldr	r5, [r4]
    4fb0:	ldr	r3, [pc, #168]	; 5060 <cd_union_init+0xcc>
    4fb4:	ldr	r0, [r5, #44]	; 0x2c
    4fb8:	str	r3, [r5, #40]	; 0x28
    4fbc:	bl	0 <coda_type_union_new>
    4fc0:	ldr	r3, [r4]
    4fc4:	str	r0, [r5, #8]
    4fc8:	ldr	r3, [r3, #8]
    4fcc:	cmp	r3, #0
    4fd0:	beq	5058 <cd_union_init+0xc4>
    4fd4:	mov	r2, r6
    4fd8:	add	r1, r4, #20
    4fdc:	mov	r0, r4
    4fe0:	bl	4a6c <handle_name_attribute_for_type.isra.6>
    4fe4:	cmp	r0, #0
    4fe8:	bne	5058 <cd_union_init+0xc4>
    4fec:	ldr	r0, [r4]
    4ff0:	ldr	lr, [pc, #108]	; 5064 <cd_union_init+0xd0>
    4ff4:	ldr	ip, [pc, #108]	; 5068 <cd_union_init+0xd4>
    4ff8:	ldr	r2, [pc, #108]	; 506c <cd_union_init+0xd8>
    4ffc:	ldr	r3, [pc, #108]	; 5070 <cd_union_init+0xdc>
    5000:	ldr	r5, [pc, #108]	; 5074 <cd_union_init+0xe0>
    5004:	ldr	r4, [pc, #108]	; 5078 <cd_union_init+0xe4>
    5008:	str	lr, [r0, #96]	; 0x60
    500c:	str	ip, [r0, #268]	; 0x10c
    5010:	ldr	lr, [pc, #100]	; 507c <cd_union_init+0xe8>
    5014:	ldr	ip, [pc, #100]	; 5080 <cd_union_init+0xec>
    5018:	str	r2, [r0, #252]	; 0xfc
    501c:	str	r3, [r0, #284]	; 0x11c
    5020:	ldr	r2, [pc, #92]	; 5084 <cd_union_init+0xf0>
    5024:	ldr	r3, [pc, #92]	; 5088 <cd_union_init+0xf4>
    5028:	mov	r1, r6
    502c:	str	r5, [r0, #108]	; 0x6c
    5030:	str	r4, [r0, #280]	; 0x118
    5034:	str	lr, [r0, #68]	; 0x44
    5038:	str	ip, [r0, #240]	; 0xf0
    503c:	str	r2, [r0, #36]	; 0x24
    5040:	str	r3, [r0, #80]	; 0x50
    5044:	str	r3, [r0, #112]	; 0x70
    5048:	bl	4784 <handle_xml_name.isra.5>
    504c:	adds	r0, r0, #0
    5050:	mvnne	r0, #0
    5054:	pop	{r4, r5, r6, pc}
    5058:	mvn	r0, #0
    505c:	pop	{r4, r5, r6, pc}
	...

0000508c <cd_text_init>:
    508c:	push	{r4, r5, r6, lr}
    5090:	mov	r4, r0
    5094:	mov	r6, r1
    5098:	bl	46c0 <handle_format_attribute_for_type.isra.4>
    509c:	cmp	r0, #0
    50a0:	bne	5150 <cd_text_init+0xc4>
    50a4:	ldr	r5, [r4]
    50a8:	ldr	r3, [pc, #168]	; 5158 <cd_text_init+0xcc>
    50ac:	ldr	r0, [r5, #44]	; 0x2c
    50b0:	str	r3, [r5, #40]	; 0x28
    50b4:	bl	0 <coda_type_text_new>
    50b8:	ldr	r3, [r4]
    50bc:	str	r0, [r5, #8]
    50c0:	ldr	r3, [r3, #8]
    50c4:	cmp	r3, #0
    50c8:	beq	5150 <cd_text_init+0xc4>
    50cc:	mov	r2, r6
    50d0:	add	r1, r4, #20
    50d4:	mov	r0, r4
    50d8:	bl	4a6c <handle_name_attribute_for_type.isra.6>
    50dc:	cmp	r0, #0
    50e0:	bne	5150 <cd_text_init+0xc4>
    50e4:	ldr	r0, [r4]
    50e8:	ldr	lr, [pc, #108]	; 515c <cd_text_init+0xd0>
    50ec:	ldr	ip, [pc, #108]	; 5160 <cd_text_init+0xd4>
    50f0:	ldr	r2, [pc, #108]	; 5164 <cd_text_init+0xd8>
    50f4:	ldr	r3, [pc, #108]	; 5168 <cd_text_init+0xdc>
    50f8:	ldr	r5, [pc, #108]	; 516c <cd_text_init+0xe0>
    50fc:	ldr	r4, [pc, #108]	; 5170 <cd_text_init+0xe4>
    5100:	str	lr, [r0, #268]	; 0x10c
    5104:	str	ip, [r0, #84]	; 0x54
    5108:	ldr	lr, [pc, #100]	; 5174 <cd_text_init+0xe8>
    510c:	ldr	ip, [pc, #100]	; 5178 <cd_text_init+0xec>
    5110:	str	r2, [r0, #256]	; 0x100
    5114:	str	r3, [r0, #288]	; 0x120
    5118:	ldr	r2, [pc, #92]	; 517c <cd_text_init+0xf0>
    511c:	ldr	r3, [pc, #92]	; 5180 <cd_text_init+0xf4>
    5120:	mov	r1, r6
    5124:	str	r5, [r0, #164]	; 0xa4
    5128:	str	r4, [r0, #336]	; 0x150
    512c:	str	lr, [r0, #68]	; 0x44
    5130:	str	ip, [r0, #240]	; 0xf0
    5134:	str	r2, [r0, #36]	; 0x24
    5138:	str	r3, [r0, #96]	; 0x60
    513c:	str	r3, [r0, #116]	; 0x74
    5140:	bl	4784 <handle_xml_name.isra.5>
    5144:	adds	r0, r0, #0
    5148:	mvnne	r0, #0
    514c:	pop	{r4, r5, r6, pc}
    5150:	mvn	r0, #0
    5154:	pop	{r4, r5, r6, pc}
	...

00005184 <cd_integer_init>:
    5184:	push	{r4, r5, r6, lr}
    5188:	mov	r4, r0
    518c:	mov	r6, r1
    5190:	bl	46c0 <handle_format_attribute_for_type.isra.4>
    5194:	cmp	r0, #0
    5198:	bne	5278 <cd_integer_init+0xf4>
    519c:	ldr	r5, [r4]
    51a0:	ldr	r3, [pc, #216]	; 5280 <cd_integer_init+0xfc>
    51a4:	mov	r1, #2
    51a8:	str	r3, [r5, #40]	; 0x28
    51ac:	ldr	r0, [r5, #44]	; 0x2c
    51b0:	bl	0 <coda_type_number_new>
    51b4:	ldr	r3, [r4]
    51b8:	str	r0, [r5, #8]
    51bc:	ldr	r3, [r3, #8]
    51c0:	cmp	r3, #0
    51c4:	beq	5278 <cd_integer_init+0xf4>
    51c8:	mov	r2, r6
    51cc:	add	r1, r4, #20
    51d0:	mov	r0, r4
    51d4:	bl	4a6c <handle_name_attribute_for_type.isra.6>
    51d8:	cmp	r0, #0
    51dc:	bne	5278 <cd_integer_init+0xf4>
    51e0:	ldr	r3, [r4]
    51e4:	ldr	lr, [pc, #152]	; 5284 <cd_integer_init+0x100>
    51e8:	ldr	r4, [pc, #152]	; 5288 <cd_integer_init+0x104>
    51ec:	ldr	ip, [pc, #152]	; 528c <cd_integer_init+0x108>
    51f0:	ldr	r1, [pc, #152]	; 5290 <cd_integer_init+0x10c>
    51f4:	ldr	r2, [pc, #152]	; 5294 <cd_integer_init+0x110>
    51f8:	ldr	r5, [pc, #152]	; 5298 <cd_integer_init+0x114>
    51fc:	str	r4, [r3, #268]	; 0x10c
    5200:	str	lr, [r3, #388]	; 0x184
    5204:	ldr	r4, [pc, #144]	; 529c <cd_integer_init+0x118>
    5208:	ldr	lr, [pc, #144]	; 52a0 <cd_integer_init+0x11c>
    520c:	str	ip, [r3, #256]	; 0x100
    5210:	str	r1, [r3, #252]	; 0xfc
    5214:	ldr	ip, [pc, #136]	; 52a4 <cd_integer_init+0x120>
    5218:	ldr	r1, [pc, #136]	; 52a8 <cd_integer_init+0x124>
    521c:	str	r2, [r3, #136]	; 0x88
    5220:	ldr	r2, [pc, #132]	; 52ac <cd_integer_init+0x128>
    5224:	str	r5, [r3, #308]	; 0x134
    5228:	str	r4, [r3, #164]	; 0xa4
    522c:	ldr	r5, [pc, #124]	; 52b0 <cd_integer_init+0x12c>
    5230:	ldr	r4, [pc, #124]	; 52b4 <cd_integer_init+0x130>
    5234:	str	lr, [r3, #336]	; 0x150
    5238:	str	ip, [r3, #92]	; 0x5c
    523c:	ldr	lr, [pc, #116]	; 52b8 <cd_integer_init+0x134>
    5240:	ldr	ip, [pc, #116]	; 52bc <cd_integer_init+0x138>
    5244:	str	r1, [r3, #264]	; 0x108
    5248:	str	r2, [r3, #140]	; 0x8c
    524c:	ldr	r1, [pc, #108]	; 52c0 <cd_integer_init+0x13c>
    5250:	ldr	r2, [pc, #108]	; 52c4 <cd_integer_init+0x140>
    5254:	str	r5, [r3, #312]	; 0x138
    5258:	str	r4, [r3, #68]	; 0x44
    525c:	str	lr, [r3, #240]	; 0xf0
    5260:	str	ip, [r3, #36]	; 0x24
    5264:	str	r1, [r3, #96]	; 0x60
    5268:	str	r1, [r3, #216]	; 0xd8
    526c:	str	r2, [r3, #84]	; 0x54
    5270:	str	r2, [r3, #80]	; 0x50
    5274:	pop	{r4, r5, r6, pc}
    5278:	mvn	r0, #0
    527c:	pop	{r4, r5, r6, pc}
	...

000052c8 <cd_float_init>:
    52c8:	push	{r4, r5, r6, lr}
    52cc:	mov	r4, r0
    52d0:	mov	r6, r1
    52d4:	bl	46c0 <handle_format_attribute_for_type.isra.4>
    52d8:	cmp	r0, #0
    52dc:	bne	53bc <cd_float_init+0xf4>
    52e0:	ldr	r5, [r4]
    52e4:	ldr	r3, [pc, #216]	; 53c4 <cd_float_init+0xfc>
    52e8:	mov	r1, #3
    52ec:	str	r3, [r5, #40]	; 0x28
    52f0:	ldr	r0, [r5, #44]	; 0x2c
    52f4:	bl	0 <coda_type_number_new>
    52f8:	ldr	r3, [r4]
    52fc:	str	r0, [r5, #8]
    5300:	ldr	r3, [r3, #8]
    5304:	cmp	r3, #0
    5308:	beq	53bc <cd_float_init+0xf4>
    530c:	mov	r2, r6
    5310:	add	r1, r4, #20
    5314:	mov	r0, r4
    5318:	bl	4a6c <handle_name_attribute_for_type.isra.6>
    531c:	cmp	r0, #0
    5320:	bne	53bc <cd_float_init+0xf4>
    5324:	ldr	r3, [r4]
    5328:	ldr	lr, [pc, #152]	; 53c8 <cd_float_init+0x100>
    532c:	ldr	r4, [pc, #152]	; 53cc <cd_float_init+0x104>
    5330:	ldr	ip, [pc, #152]	; 53d0 <cd_float_init+0x108>
    5334:	ldr	r1, [pc, #152]	; 53d4 <cd_float_init+0x10c>
    5338:	ldr	r2, [pc, #152]	; 53d8 <cd_float_init+0x110>
    533c:	ldr	r5, [pc, #152]	; 53dc <cd_float_init+0x114>
    5340:	str	r4, [r3, #388]	; 0x184
    5344:	str	lr, [r3, #164]	; 0xa4
    5348:	ldr	r4, [pc, #144]	; 53e0 <cd_float_init+0x118>
    534c:	ldr	lr, [pc, #144]	; 53e4 <cd_float_init+0x11c>
    5350:	str	ip, [r3, #336]	; 0x150
    5354:	str	r1, [r3, #92]	; 0x5c
    5358:	ldr	ip, [pc, #136]	; 53e8 <cd_float_init+0x120>
    535c:	ldr	r1, [pc, #136]	; 53ec <cd_float_init+0x124>
    5360:	str	r2, [r3, #264]	; 0x108
    5364:	ldr	r2, [pc, #132]	; 53f0 <cd_float_init+0x128>
    5368:	str	r5, [r3, #252]	; 0xfc
    536c:	str	r4, [r3, #256]	; 0x100
    5370:	ldr	r5, [pc, #124]	; 53f4 <cd_float_init+0x12c>
    5374:	ldr	r4, [pc, #124]	; 53f8 <cd_float_init+0x130>
    5378:	str	lr, [r3, #136]	; 0x88
    537c:	str	ip, [r3, #308]	; 0x134
    5380:	ldr	lr, [pc, #116]	; 53fc <cd_float_init+0x134>
    5384:	ldr	ip, [pc, #116]	; 5400 <cd_float_init+0x138>
    5388:	str	r1, [r3, #140]	; 0x8c
    538c:	str	r2, [r3, #312]	; 0x138
    5390:	ldr	r1, [pc, #108]	; 5404 <cd_float_init+0x13c>
    5394:	ldr	r2, [pc, #108]	; 5408 <cd_float_init+0x140>
    5398:	str	r5, [r3, #268]	; 0x10c
    539c:	str	r4, [r3, #68]	; 0x44
    53a0:	str	lr, [r3, #240]	; 0xf0
    53a4:	str	ip, [r3, #36]	; 0x24
    53a8:	str	r1, [r3, #216]	; 0xd8
    53ac:	str	r1, [r3, #96]	; 0x60
    53b0:	str	r2, [r3, #80]	; 0x50
    53b4:	str	r2, [r3, #84]	; 0x54
    53b8:	pop	{r4, r5, r6, pc}
    53bc:	mvn	r0, #0
    53c0:	pop	{r4, r5, r6, pc}
	...

0000540c <cd_time_init>:
    540c:	push	{r4, r5, r6, r7, r8, r9, lr}
    5410:	sub	sp, sp, #12
    5414:	mov	r4, r0
    5418:	mov	r7, r1
    541c:	bl	46c0 <handle_format_attribute_for_type.isra.4>
    5420:	subs	r5, r0, #0
    5424:	bne	5738 <cd_time_init+0x32c>
    5428:	ldr	r3, [r4]
    542c:	ldr	r1, [pc, #2548]	; 5e28 <cd_time_init+0xa1c>
    5430:	mov	r0, r7
    5434:	ldr	r2, [r3]
    5438:	bl	336c <get_mandatory_attribute_value>
    543c:	subs	r6, r0, #0
    5440:	beq	5738 <cd_time_init+0x32c>
    5444:	ldr	r3, [r4]
    5448:	ldr	r8, [r3, #44]	; 0x2c
    544c:	cmp	r8, #0
    5450:	beq	55f8 <cd_time_init+0x1ec>
    5454:	cmp	r8, #1
    5458:	beq	5778 <cd_time_init+0x36c>
    545c:	mov	r0, r6
    5460:	add	r1, sp, #4
    5464:	bl	0 <coda_expression_from_string>
    5468:	cmp	r0, #0
    546c:	bne	5c44 <cd_time_init+0x838>
    5470:	mov	r1, sp
    5474:	ldr	r0, [sp, #4]
    5478:	bl	0 <coda_expression_get_type>
    547c:	cmp	r0, #0
    5480:	bne	5728 <cd_time_init+0x31c>
    5484:	ldr	r3, [sp]
    5488:	cmp	r3, #2
    548c:	bne	595c <cd_time_init+0x550>
    5490:	ldr	r6, [r4]
    5494:	ldr	r3, [pc, #2448]	; 5e2c <cd_time_init+0xa20>
    5498:	ldr	r1, [sp, #4]
    549c:	str	r3, [r6, #40]	; 0x28
    54a0:	ldr	r0, [r6, #44]	; 0x2c
    54a4:	bl	0 <coda_type_time_new>
    54a8:	ldr	r3, [r4]
    54ac:	str	r0, [r6, #8]
    54b0:	ldr	r0, [r3, #8]
    54b4:	cmp	r0, #0
    54b8:	beq	5728 <cd_time_init+0x31c>
    54bc:	cmp	r5, #0
    54c0:	beq	54dc <cd_time_init+0xd0>
    54c4:	mov	r1, r5
    54c8:	bl	0 <coda_type_time_set_base_type>
    54cc:	cmp	r0, #0
    54d0:	mov	r0, r5
    54d4:	bne	5d80 <cd_time_init+0x974>
    54d8:	bl	0 <coda_type_release>
    54dc:	mov	r2, r7
    54e0:	add	r1, r4, #20
    54e4:	mov	r0, r4
    54e8:	bl	4a6c <handle_name_attribute_for_type.isra.6>
    54ec:	cmp	r0, #0
    54f0:	bne	5738 <cd_time_init+0x32c>
    54f4:	ldr	r3, [r4]
    54f8:	ldr	r5, [pc, #2352]	; 5e30 <cd_time_init+0xa24>
    54fc:	ldr	r4, [pc, #2352]	; 5e34 <cd_time_init+0xa28>
    5500:	ldr	lr, [pc, #2352]	; 5e38 <cd_time_init+0xa2c>
    5504:	ldr	ip, [pc, #2352]	; 5e3c <cd_time_init+0xa30>
    5508:	ldr	r2, [pc, #2352]	; 5e40 <cd_time_init+0xa34>
    550c:	ldr	r1, [pc, #2352]	; 5e44 <cd_time_init+0xa38>
    5510:	str	r5, [r3, #56]	; 0x38
    5514:	str	r4, [r3, #60]	; 0x3c
    5518:	ldr	r5, [pc, #2344]	; 5e48 <cd_time_init+0xa3c>
    551c:	ldr	r4, [pc, #2344]	; 5e4c <cd_time_init+0xa40>
    5520:	str	lr, [r3, #64]	; 0x40
    5524:	str	ip, [r3, #52]	; 0x34
    5528:	ldr	lr, [pc, #2336]	; 5e50 <cd_time_init+0xa44>
    552c:	ldr	ip, [pc, #2336]	; 5e54 <cd_time_init+0xa48>
    5530:	str	r2, [r3, #88]	; 0x58
    5534:	str	r1, [r3, #120]	; 0x78
    5538:	ldr	r2, [pc, #2328]	; 5e58 <cd_time_init+0xa4c>
    553c:	ldr	r1, [pc, #2328]	; 5e5c <cd_time_init+0xa50>
    5540:	str	r5, [r3, #132]	; 0x84
    5544:	str	r4, [r3, #160]	; 0xa0
    5548:	str	lr, [r3, #188]	; 0xbc
    554c:	str	ip, [r3, #192]	; 0xc0
    5550:	str	r2, [r3, #200]	; 0xc8
    5554:	ldr	ip, [pc, #2308]	; 5e60 <cd_time_init+0xa54>
    5558:	ldr	r2, [pc, #2308]	; 5e64 <cd_time_init+0xa58>
    555c:	str	r1, [r3, #204]	; 0xcc
    5560:	ldr	r5, [pc, #2304]	; 5e68 <cd_time_init+0xa5c>
    5564:	ldr	r1, [pc, #2304]	; 5e6c <cd_time_init+0xa60>
    5568:	ldr	r4, [pc, #2304]	; 5e70 <cd_time_init+0xa64>
    556c:	ldr	lr, [pc, #2304]	; 5e74 <cd_time_init+0xa68>
    5570:	str	ip, [r3, #96]	; 0x60
    5574:	str	r2, [r3, #228]	; 0xe4
    5578:	str	r2, [r3, #232]	; 0xe8
    557c:	str	r2, [r3, #236]	; 0xec
    5580:	str	r2, [r3, #224]	; 0xe0
    5584:	str	r2, [r3, #260]	; 0x104
    5588:	str	r2, [r3, #292]	; 0x124
    558c:	str	r2, [r3, #304]	; 0x130
    5590:	str	r2, [r3, #332]	; 0x14c
    5594:	str	r2, [r3, #360]	; 0x168
    5598:	str	r2, [r3, #364]	; 0x16c
    559c:	str	r2, [r3, #372]	; 0x174
    55a0:	str	r2, [r3, #376]	; 0x178
    55a4:	str	r2, [r3, #380]	; 0x17c
    55a8:	str	r2, [r3, #384]	; 0x180
    55ac:	str	r2, [r3, #392]	; 0x188
    55b0:	str	r5, [r3, #208]	; 0xd0
    55b4:	str	r4, [r3, #212]	; 0xd4
    55b8:	str	lr, [r3, #220]	; 0xdc
    55bc:	str	r1, [r3, #268]	; 0x10c
    55c0:	ldr	ip, [r3, #44]	; 0x2c
    55c4:	ldr	r2, [pc, #2220]	; 5e78 <cd_time_init+0xa6c>
    55c8:	cmp	ip, #1
    55cc:	ldr	r1, [pc, #2216]	; 5e7c <cd_time_init+0xa70>
    55d0:	str	r2, [r3, #312]	; 0x138
    55d4:	ldrhi	r2, [pc, #2212]	; 5e80 <cd_time_init+0xa74>
    55d8:	str	r1, [r3, #140]	; 0x8c
    55dc:	strhi	r2, [r3, #240]	; 0xf0
    55e0:	ldrhi	r1, [pc, #2204]	; 5e84 <cd_time_init+0xa78>
    55e4:	ldr	r2, [pc, #2204]	; 5e88 <cd_time_init+0xa7c>
    55e8:	strhi	r1, [r3, #68]	; 0x44
    55ec:	str	r2, [r3, #36]	; 0x24
    55f0:	add	sp, sp, #12
    55f4:	pop	{r4, r5, r6, r7, r8, r9, pc}
    55f8:	ldr	r1, [pc, #2188]	; 5e8c <cd_time_init+0xa80>
    55fc:	bl	0 <strcmp>
    5600:	cmp	r0, #0
    5604:	beq	5744 <cd_time_init+0x338>
    5608:	ldr	r1, [pc, #2176]	; 5e90 <cd_time_init+0xa84>
    560c:	mov	r0, r6
    5610:	bl	0 <strcmp>
    5614:	cmp	r0, #0
    5618:	beq	5928 <cd_time_init+0x51c>
    561c:	ldr	r1, [pc, #2160]	; 5e94 <cd_time_init+0xa88>
    5620:	mov	r0, r6
    5624:	bl	0 <strcmp>
    5628:	cmp	r0, #0
    562c:	beq	56f4 <cd_time_init+0x2e8>
    5630:	ldr	r1, [pc, #2144]	; 5e98 <cd_time_init+0xa8c>
    5634:	mov	r0, r6
    5638:	bl	0 <strcmp>
    563c:	cmp	r0, #0
    5640:	beq	5aac <cd_time_init+0x6a0>
    5644:	ldr	r1, [pc, #2128]	; 5e9c <cd_time_init+0xa90>
    5648:	mov	r0, r6
    564c:	bl	0 <strcmp>
    5650:	cmp	r0, #0
    5654:	beq	5c54 <cd_time_init+0x848>
    5658:	ldr	r1, [pc, #2112]	; 5ea0 <cd_time_init+0xa94>
    565c:	mov	r0, r6
    5660:	bl	0 <strcmp>
    5664:	cmp	r0, #0
    5668:	beq	5d8c <cd_time_init+0x980>
    566c:	ldr	r1, [pc, #2096]	; 5ea4 <cd_time_init+0xa98>
    5670:	mov	r0, r6
    5674:	bl	0 <strcmp>
    5678:	cmp	r0, #0
    567c:	beq	5a78 <cd_time_init+0x66c>
    5680:	ldr	r1, [pc, #2080]	; 5ea8 <cd_time_init+0xa9c>
    5684:	mov	r0, r6
    5688:	bl	0 <strcmp>
    568c:	cmp	r0, #0
    5690:	beq	5dc0 <cd_time_init+0x9b4>
    5694:	ldr	r1, [pc, #2064]	; 5eac <cd_time_init+0xaa0>
    5698:	mov	r0, r6
    569c:	bl	0 <strcmp>
    56a0:	cmp	r0, #0
    56a4:	beq	5df4 <cd_time_init+0x9e8>
    56a8:	ldr	r1, [pc, #2048]	; 5eb0 <cd_time_init+0xaa4>
    56ac:	mov	r0, r6
    56b0:	bl	0 <strcmp>
    56b4:	cmp	r0, #0
    56b8:	movne	r5, #0
    56bc:	bne	545c <cd_time_init+0x50>
    56c0:	bl	0 <coda_type_text_new>
    56c4:	mov	r1, #11
    56c8:	ldr	r6, [pc, #2020]	; 5eb4 <cd_time_init+0xaa8>
    56cc:	mov	r5, r0
    56d0:	bl	0 <coda_type_set_read_type>
    56d4:	ldr	r1, [pc, #2012]	; 5eb8 <cd_time_init+0xaac>
    56d8:	mov	r0, r5
    56dc:	bl	0 <coda_type_set_description>
    56e0:	mov	r0, r5
    56e4:	mov	r2, #24
    56e8:	mov	r3, #0
    56ec:	bl	0 <coda_type_set_byte_size>
    56f0:	b	545c <cd_time_init+0x50>
    56f4:	bl	0 <coda_type_text_new>
    56f8:	mov	r1, #11
    56fc:	ldr	r6, [pc, #1976]	; 5ebc <cd_time_init+0xab0>
    5700:	mov	r5, r0
    5704:	bl	0 <coda_type_set_read_type>
    5708:	ldr	r1, [pc, #1968]	; 5ec0 <cd_time_init+0xab4>
    570c:	mov	r0, r5
    5710:	bl	0 <coda_type_set_description>
    5714:	mov	r0, r5
    5718:	mov	r2, #15
    571c:	mov	r3, #0
    5720:	bl	0 <coda_type_set_byte_size>
    5724:	b	545c <cd_time_init+0x50>
    5728:	mov	r0, r5
    572c:	bl	0 <coda_type_release>
    5730:	ldr	r0, [sp, #4]
    5734:	bl	0 <coda_expression_delete>
    5738:	mvn	r0, #0
    573c:	add	sp, sp, #12
    5740:	pop	{r4, r5, r6, r7, r8, r9, pc}
    5744:	bl	0 <coda_type_text_new>
    5748:	mov	r1, #11
    574c:	ldr	r6, [pc, #1904]	; 5ec4 <cd_time_init+0xab8>
    5750:	mov	r5, r0
    5754:	bl	0 <coda_type_set_read_type>
    5758:	ldr	r1, [pc, #1896]	; 5ec8 <cd_time_init+0xabc>
    575c:	mov	r0, r5
    5760:	bl	0 <coda_type_set_description>
    5764:	mov	r0, r5
    5768:	mov	r2, #27
    576c:	mov	r3, #0
    5770:	bl	0 <coda_type_set_byte_size>
    5774:	b	545c <cd_time_init+0x50>
    5778:	ldr	r1, [pc, #1868]	; 5ecc <cd_time_init+0xac0>
    577c:	bl	0 <strcmp>
    5780:	cmp	r0, #0
    5784:	beq	5ae0 <cd_time_init+0x6d4>
    5788:	ldr	r1, [pc, #1856]	; 5ed0 <cd_time_init+0xac4>
    578c:	mov	r0, r6
    5790:	bl	0 <strcmp>
    5794:	cmp	r0, #0
    5798:	beq	5c88 <cd_time_init+0x87c>
    579c:	ldr	r1, [pc, #1840]	; 5ed4 <cd_time_init+0xac8>
    57a0:	mov	r0, r6
    57a4:	bl	0 <strcmp>
    57a8:	cmp	r0, #0
    57ac:	beq	5980 <cd_time_init+0x574>
    57b0:	ldr	r1, [pc, #1824]	; 5ed8 <cd_time_init+0xacc>
    57b4:	mov	r0, r6
    57b8:	bl	0 <strcmp>
    57bc:	cmp	r0, #0
    57c0:	bne	545c <cd_time_init+0x50>
    57c4:	mov	r0, r8
    57c8:	bl	0 <coda_type_record_new>
    57cc:	ldr	r1, [pc, #1800]	; 5edc <cd_time_init+0xad0>
    57d0:	mov	r8, r0
    57d4:	bl	0 <coda_type_set_description>
    57d8:	ldr	r3, [r4]
    57dc:	mov	r1, #2
    57e0:	mov	r5, r8
    57e4:	ldr	r0, [r3, #44]	; 0x2c
    57e8:	bl	0 <coda_type_number_new>
    57ec:	ldr	r1, [pc, #1772]	; 5ee0 <cd_time_init+0xad4>
    57f0:	mov	r6, r0
    57f4:	bl	0 <coda_type_set_description>
    57f8:	mov	r1, #3
    57fc:	mov	r0, r6
    5800:	bl	0 <coda_type_set_read_type>
    5804:	mov	r2, #16
    5808:	mov	r3, #0
    580c:	mov	r0, r6
    5810:	bl	0 <coda_type_set_bit_size>
    5814:	ldr	r1, [pc, #1736]	; 5ee4 <cd_time_init+0xad8>
    5818:	mov	r0, r6
    581c:	bl	0 <coda_type_number_set_unit>
    5820:	ldr	r0, [pc, #1728]	; 5ee8 <cd_time_init+0xadc>
    5824:	bl	0 <coda_type_record_field_new>
    5828:	mov	r1, r6
    582c:	mov	r9, r0
    5830:	bl	0 <coda_type_record_field_set_type>
    5834:	mov	r0, r6
    5838:	bl	0 <coda_type_release>
    583c:	mov	r1, r9
    5840:	mov	r0, r8
    5844:	bl	0 <coda_type_record_add_field>
    5848:	ldr	r3, [r4]
    584c:	mov	r1, #2
    5850:	ldr	r0, [r3, #44]	; 0x2c
    5854:	bl	0 <coda_type_number_new>
    5858:	ldr	r1, [pc, #1676]	; 5eec <cd_time_init+0xae0>
    585c:	mov	r6, r0
    5860:	bl	0 <coda_type_set_description>
    5864:	mov	r1, #5
    5868:	mov	r0, r6
    586c:	bl	0 <coda_type_set_read_type>
    5870:	mov	r2, #32
    5874:	mov	r3, #0
    5878:	mov	r0, r6
    587c:	bl	0 <coda_type_set_bit_size>
    5880:	ldr	r1, [pc, #1640]	; 5ef0 <cd_time_init+0xae4>
    5884:	mov	r0, r6
    5888:	bl	0 <coda_type_number_set_unit>
    588c:	ldr	r0, [pc, #1632]	; 5ef4 <cd_time_init+0xae8>
    5890:	bl	0 <coda_type_record_field_new>
    5894:	mov	r1, r6
    5898:	mov	r9, r0
    589c:	bl	0 <coda_type_record_field_set_type>
    58a0:	mov	r0, r6
    58a4:	bl	0 <coda_type_release>
    58a8:	mov	r1, r9
    58ac:	mov	r0, r8
    58b0:	bl	0 <coda_type_record_add_field>
    58b4:	ldr	r3, [r4]
    58b8:	mov	r1, #2
    58bc:	ldr	r0, [r3, #44]	; 0x2c
    58c0:	bl	0 <coda_type_number_new>
    58c4:	ldr	r1, [pc, #1580]	; 5ef8 <cd_time_init+0xaec>
    58c8:	mov	r6, r0
    58cc:	bl	0 <coda_type_set_description>
    58d0:	mov	r1, #3
    58d4:	mov	r0, r6
    58d8:	bl	0 <coda_type_set_read_type>
    58dc:	mov	r2, #16
    58e0:	mov	r3, #0
    58e4:	mov	r0, r6
    58e8:	bl	0 <coda_type_set_bit_size>
    58ec:	ldr	r1, [pc, #1544]	; 5efc <cd_time_init+0xaf0>
    58f0:	mov	r0, r6
    58f4:	bl	0 <coda_type_number_set_unit>
    58f8:	ldr	r0, [pc, #1536]	; 5f00 <cd_time_init+0xaf4>
    58fc:	bl	0 <coda_type_record_field_new>
    5900:	mov	r1, r6
    5904:	mov	r9, r0
    5908:	bl	0 <coda_type_record_field_set_type>
    590c:	mov	r0, r6
    5910:	bl	0 <coda_type_release>
    5914:	mov	r1, r9
    5918:	mov	r0, r8
    591c:	bl	0 <coda_type_record_add_field>
    5920:	ldr	r6, [pc, #1500]	; 5f04 <cd_time_init+0xaf8>
    5924:	b	545c <cd_time_init+0x50>
    5928:	bl	0 <coda_type_text_new>
    592c:	mov	r1, #11
    5930:	ldr	r6, [pc, #1488]	; 5f08 <cd_time_init+0xafc>
    5934:	mov	r5, r0
    5938:	bl	0 <coda_type_set_read_type>
    593c:	ldr	r1, [pc, #1480]	; 5f0c <cd_time_init+0xb00>
    5940:	mov	r0, r5
    5944:	bl	0 <coda_type_set_description>
    5948:	mov	r0, r5
    594c:	mov	r2, #24
    5950:	mov	r3, #0
    5954:	bl	0 <coda_type_set_byte_size>
    5958:	b	545c <cd_time_init+0x50>
    595c:	mov	r0, r5
    5960:	bl	0 <coda_type_release>
    5964:	ldr	r0, [sp, #4]
    5968:	bl	0 <coda_expression_delete>
    596c:	ldr	r0, [pc, #1436]	; 5f10 <cd_time_init+0xb04>
    5970:	ldr	r1, [pc, #1436]	; 5f14 <cd_time_init+0xb08>
    5974:	bl	0 <coda_set_error>
    5978:	mvn	r0, #0
    597c:	b	55f0 <cd_time_init+0x1e4>
    5980:	mov	r0, r8
    5984:	bl	0 <coda_type_record_new>
    5988:	ldr	r1, [pc, #1416]	; 5f18 <cd_time_init+0xb0c>
    598c:	mov	r8, r0
    5990:	bl	0 <coda_type_set_description>
    5994:	ldr	r3, [r4]
    5998:	mov	r1, #2
    599c:	mov	r5, r8
    59a0:	ldr	r0, [r3, #44]	; 0x2c
    59a4:	bl	0 <coda_type_number_new>
    59a8:	ldr	r1, [pc, #1328]	; 5ee0 <cd_time_init+0xad4>
    59ac:	mov	r6, r0
    59b0:	bl	0 <coda_type_set_description>
    59b4:	mov	r1, #3
    59b8:	mov	r0, r6
    59bc:	bl	0 <coda_type_set_read_type>
    59c0:	mov	r2, #16
    59c4:	mov	r3, #0
    59c8:	mov	r0, r6
    59cc:	bl	0 <coda_type_set_bit_size>
    59d0:	ldr	r1, [pc, #1292]	; 5ee4 <cd_time_init+0xad8>
    59d4:	mov	r0, r6
    59d8:	bl	0 <coda_type_number_set_unit>
    59dc:	ldr	r0, [pc, #1284]	; 5ee8 <cd_time_init+0xadc>
    59e0:	bl	0 <coda_type_record_field_new>
    59e4:	mov	r1, r6
    59e8:	mov	r9, r0
    59ec:	bl	0 <coda_type_record_field_set_type>
    59f0:	mov	r0, r6
    59f4:	bl	0 <coda_type_release>
    59f8:	mov	r1, r9
    59fc:	mov	r0, r8
    5a00:	bl	0 <coda_type_record_add_field>
    5a04:	ldr	r3, [r4]
    5a08:	mov	r1, #2
    5a0c:	ldr	r0, [r3, #44]	; 0x2c
    5a10:	bl	0 <coda_type_number_new>
    5a14:	ldr	r1, [pc, #1232]	; 5eec <cd_time_init+0xae0>
    5a18:	mov	r6, r0
    5a1c:	bl	0 <coda_type_set_description>
    5a20:	mov	r1, #5
    5a24:	mov	r0, r6
    5a28:	bl	0 <coda_type_set_read_type>
    5a2c:	mov	r2, #32
    5a30:	mov	r3, #0
    5a34:	mov	r0, r6
    5a38:	bl	0 <coda_type_set_bit_size>
    5a3c:	ldr	r1, [pc, #1196]	; 5ef0 <cd_time_init+0xae4>
    5a40:	mov	r0, r6
    5a44:	bl	0 <coda_type_number_set_unit>
    5a48:	ldr	r0, [pc, #1188]	; 5ef4 <cd_time_init+0xae8>
    5a4c:	bl	0 <coda_type_record_field_new>
    5a50:	mov	r1, r6
    5a54:	mov	r9, r0
    5a58:	bl	0 <coda_type_record_field_set_type>
    5a5c:	mov	r0, r6
    5a60:	bl	0 <coda_type_release>
    5a64:	mov	r1, r9
    5a68:	mov	r0, r8
    5a6c:	bl	0 <coda_type_record_add_field>
    5a70:	ldr	r6, [pc, #1188]	; 5f1c <cd_time_init+0xb10>
    5a74:	b	545c <cd_time_init+0x50>
    5a78:	bl	0 <coda_type_text_new>
    5a7c:	mov	r1, #11
    5a80:	ldr	r6, [pc, #1176]	; 5f20 <cd_time_init+0xb14>
    5a84:	mov	r5, r0
    5a88:	bl	0 <coda_type_set_read_type>
    5a8c:	ldr	r1, [pc, #1168]	; 5f24 <cd_time_init+0xb18>
    5a90:	mov	r0, r5
    5a94:	bl	0 <coda_type_set_description>
    5a98:	mov	r0, r5
    5a9c:	mov	r2, #26
    5aa0:	mov	r3, #0
    5aa4:	bl	0 <coda_type_set_byte_size>
    5aa8:	b	545c <cd_time_init+0x50>
    5aac:	bl	0 <coda_type_text_new>
    5ab0:	mov	r1, #11
    5ab4:	ldr	r6, [pc, #1132]	; 5f28 <cd_time_init+0xb1c>
    5ab8:	mov	r5, r0
    5abc:	bl	0 <coda_type_set_read_type>
    5ac0:	ldr	r1, [pc, #1124]	; 5f2c <cd_time_init+0xb20>
    5ac4:	mov	r0, r5
    5ac8:	bl	0 <coda_type_set_description>
    5acc:	mov	r0, r5
    5ad0:	mov	r2, #18
    5ad4:	mov	r3, #0
    5ad8:	bl	0 <coda_type_set_byte_size>
    5adc:	b	545c <cd_time_init+0x50>
    5ae0:	mov	r0, r8
    5ae4:	bl	0 <coda_type_record_new>
    5ae8:	ldr	r1, [pc, #1088]	; 5f30 <cd_time_init+0xb24>
    5aec:	mov	r8, r0
    5af0:	bl	0 <coda_type_set_description>
    5af4:	ldr	r3, [r4]
    5af8:	mov	r1, #2
    5afc:	mov	r5, r8
    5b00:	ldr	r0, [r3, #44]	; 0x2c
    5b04:	bl	0 <coda_type_number_new>
    5b08:	ldr	r1, [pc, #1060]	; 5f34 <cd_time_init+0xb28>
    5b0c:	mov	r6, r0
    5b10:	bl	0 <coda_type_set_description>
    5b14:	mov	r1, #4
    5b18:	mov	r0, r6
    5b1c:	bl	0 <coda_type_set_read_type>
    5b20:	mov	r2, #32
    5b24:	mov	r3, #0
    5b28:	mov	r0, r6
    5b2c:	bl	0 <coda_type_set_bit_size>
    5b30:	ldr	r1, [pc, #940]	; 5ee4 <cd_time_init+0xad8>
    5b34:	mov	r0, r6
    5b38:	bl	0 <coda_type_number_set_unit>
    5b3c:	ldr	r0, [pc, #932]	; 5ee8 <cd_time_init+0xadc>
    5b40:	bl	0 <coda_type_record_field_new>
    5b44:	mov	r1, r6
    5b48:	mov	r9, r0
    5b4c:	bl	0 <coda_type_record_field_set_type>
    5b50:	mov	r0, r6
    5b54:	bl	0 <coda_type_release>
    5b58:	mov	r1, r9
    5b5c:	mov	r0, r8
    5b60:	bl	0 <coda_type_record_add_field>
    5b64:	ldr	r3, [r4]
    5b68:	mov	r1, #2
    5b6c:	ldr	r0, [r3, #44]	; 0x2c
    5b70:	bl	0 <coda_type_number_new>
    5b74:	ldr	r1, [pc, #956]	; 5f38 <cd_time_init+0xb2c>
    5b78:	mov	r6, r0
    5b7c:	bl	0 <coda_type_set_description>
    5b80:	mov	r1, #5
    5b84:	mov	r0, r6
    5b88:	bl	0 <coda_type_set_read_type>
    5b8c:	mov	r2, #32
    5b90:	mov	r3, #0
    5b94:	mov	r0, r6
    5b98:	bl	0 <coda_type_set_bit_size>
    5b9c:	ldr	r1, [pc, #920]	; 5f3c <cd_time_init+0xb30>
    5ba0:	mov	r0, r6
    5ba4:	bl	0 <coda_type_number_set_unit>
    5ba8:	ldr	r0, [pc, #912]	; 5f40 <cd_time_init+0xb34>
    5bac:	bl	0 <coda_type_record_field_new>
    5bb0:	mov	r1, r6
    5bb4:	mov	r9, r0
    5bb8:	bl	0 <coda_type_record_field_set_type>
    5bbc:	mov	r0, r6
    5bc0:	bl	0 <coda_type_release>
    5bc4:	mov	r1, r9
    5bc8:	mov	r0, r8
    5bcc:	bl	0 <coda_type_record_add_field>
    5bd0:	ldr	r3, [r4]
    5bd4:	mov	r1, #2
    5bd8:	ldr	r0, [r3, #44]	; 0x2c
    5bdc:	bl	0 <coda_type_number_new>
    5be0:	ldr	r1, [pc, #860]	; 5f44 <cd_time_init+0xb38>
    5be4:	mov	r6, r0
    5be8:	bl	0 <coda_type_set_description>
    5bec:	mov	r1, #5
    5bf0:	mov	r0, r6
    5bf4:	bl	0 <coda_type_set_read_type>
    5bf8:	mov	r2, #32
    5bfc:	mov	r3, #0
    5c00:	mov	r0, r6
    5c04:	bl	0 <coda_type_set_bit_size>
    5c08:	ldr	r1, [pc, #748]	; 5efc <cd_time_init+0xaf0>
    5c0c:	mov	r0, r6
    5c10:	bl	0 <coda_type_number_set_unit>
    5c14:	ldr	r0, [pc, #740]	; 5f00 <cd_time_init+0xaf4>
    5c18:	bl	0 <coda_type_record_field_new>
    5c1c:	mov	r1, r6
    5c20:	mov	r9, r0
    5c24:	bl	0 <coda_type_record_field_set_type>
    5c28:	mov	r0, r6
    5c2c:	bl	0 <coda_type_release>
    5c30:	mov	r1, r9
    5c34:	mov	r0, r8
    5c38:	bl	0 <coda_type_record_add_field>
    5c3c:	ldr	r6, [pc, #772]	; 5f48 <cd_time_init+0xb3c>
    5c40:	b	545c <cd_time_init+0x50>
    5c44:	mov	r0, r5
    5c48:	bl	0 <coda_type_release>
    5c4c:	mvn	r0, #0
    5c50:	b	55f0 <cd_time_init+0x1e4>
    5c54:	bl	0 <coda_type_text_new>
    5c58:	mov	r1, #11
    5c5c:	ldr	r6, [pc, #744]	; 5f4c <cd_time_init+0xb40>
    5c60:	mov	r5, r0
    5c64:	bl	0 <coda_type_set_read_type>
    5c68:	ldr	r1, [pc, #736]	; 5f50 <cd_time_init+0xb44>
    5c6c:	mov	r0, r5
    5c70:	bl	0 <coda_type_set_description>
    5c74:	mov	r0, r5
    5c78:	mov	r2, #19
    5c7c:	mov	r3, #0
    5c80:	bl	0 <coda_type_set_byte_size>
    5c84:	b	545c <cd_time_init+0x50>
    5c88:	mov	r0, r8
    5c8c:	bl	0 <coda_type_record_new>
    5c90:	ldr	r1, [pc, #700]	; 5f54 <cd_time_init+0xb48>
    5c94:	mov	r8, r0
    5c98:	bl	0 <coda_type_set_description>
    5c9c:	ldr	r3, [r4]
    5ca0:	mov	r1, #2
    5ca4:	mov	r5, r8
    5ca8:	ldr	r0, [r3, #44]	; 0x2c
    5cac:	bl	0 <coda_type_number_new>
    5cb0:	ldr	r1, [pc, #672]	; 5f58 <cd_time_init+0xb4c>
    5cb4:	mov	r6, r0
    5cb8:	bl	0 <coda_type_set_description>
    5cbc:	mov	r1, #4
    5cc0:	mov	r0, r6
    5cc4:	bl	0 <coda_type_set_read_type>
    5cc8:	mov	r2, #32
    5ccc:	mov	r3, #0
    5cd0:	mov	r0, r6
    5cd4:	bl	0 <coda_type_set_bit_size>
    5cd8:	ldr	r1, [pc, #636]	; 5f5c <cd_time_init+0xb50>
    5cdc:	mov	r0, r6
    5ce0:	bl	0 <coda_type_number_set_unit>
    5ce4:	ldr	r0, [pc, #508]	; 5ee8 <cd_time_init+0xadc>
    5ce8:	bl	0 <coda_type_record_field_new>
    5cec:	mov	r1, r6
    5cf0:	mov	r9, r0
    5cf4:	bl	0 <coda_type_record_field_set_type>
    5cf8:	mov	r0, r6
    5cfc:	bl	0 <coda_type_release>
    5d00:	mov	r1, r9
    5d04:	mov	r0, r8
    5d08:	bl	0 <coda_type_record_add_field>
    5d0c:	ldr	r3, [r4]
    5d10:	mov	r1, #2
    5d14:	ldr	r0, [r3, #44]	; 0x2c
    5d18:	bl	0 <coda_type_number_new>
    5d1c:	ldr	r1, [pc, #456]	; 5eec <cd_time_init+0xae0>
    5d20:	mov	r6, r0
    5d24:	bl	0 <coda_type_set_description>
    5d28:	mov	r1, #5
    5d2c:	mov	r0, r6
    5d30:	bl	0 <coda_type_set_read_type>
    5d34:	mov	r2, #32
    5d38:	mov	r3, #0
    5d3c:	mov	r0, r6
    5d40:	bl	0 <coda_type_set_bit_size>
    5d44:	ldr	r1, [pc, #420]	; 5ef0 <cd_time_init+0xae4>
    5d48:	mov	r0, r6
    5d4c:	bl	0 <coda_type_number_set_unit>
    5d50:	ldr	r0, [pc, #412]	; 5ef4 <cd_time_init+0xae8>
    5d54:	bl	0 <coda_type_record_field_new>
    5d58:	mov	r1, r6
    5d5c:	mov	r9, r0
    5d60:	bl	0 <coda_type_record_field_set_type>
    5d64:	mov	r0, r6
    5d68:	bl	0 <coda_type_release>
    5d6c:	mov	r1, r9
    5d70:	mov	r0, r8
    5d74:	bl	0 <coda_type_record_add_field>
    5d78:	ldr	r6, [pc, #480]	; 5f60 <cd_time_init+0xb54>
    5d7c:	b	545c <cd_time_init+0x50>
    5d80:	bl	0 <coda_type_release>
    5d84:	mvn	r0, #0
    5d88:	b	55f0 <cd_time_init+0x1e4>
    5d8c:	bl	0 <coda_type_text_new>
    5d90:	mov	r1, #11
    5d94:	ldr	r6, [pc, #456]	; 5f64 <cd_time_init+0xb58>
    5d98:	mov	r5, r0
    5d9c:	bl	0 <coda_type_set_read_type>
    5da0:	ldr	r1, [pc, #448]	; 5f68 <cd_time_init+0xb5c>
    5da4:	mov	r0, r5
    5da8:	bl	0 <coda_type_set_description>
    5dac:	mov	r0, r5
    5db0:	mov	r2, #23
    5db4:	mov	r3, #0
    5db8:	bl	0 <coda_type_set_byte_size>
    5dbc:	b	545c <cd_time_init+0x50>
    5dc0:	bl	0 <coda_type_text_new>
    5dc4:	mov	r1, #11
    5dc8:	ldr	r6, [pc, #412]	; 5f6c <cd_time_init+0xb60>
    5dcc:	mov	r5, r0
    5dd0:	bl	0 <coda_type_set_read_type>
    5dd4:	ldr	r1, [pc, #404]	; 5f70 <cd_time_init+0xb64>
    5dd8:	mov	r0, r5
    5ddc:	bl	0 <coda_type_set_description>
    5de0:	mov	r0, r5
    5de4:	mov	r2, #30
    5de8:	mov	r3, #0
    5dec:	bl	0 <coda_type_set_byte_size>
    5df0:	b	545c <cd_time_init+0x50>
    5df4:	bl	0 <coda_type_text_new>
    5df8:	mov	r1, #11
    5dfc:	ldr	r6, [pc, #368]	; 5f74 <cd_time_init+0xb68>
    5e00:	mov	r5, r0
    5e04:	bl	0 <coda_type_set_read_type>
    5e08:	ldr	r1, [pc, #360]	; 5f78 <cd_time_init+0xb6c>
    5e0c:	mov	r0, r5
    5e10:	bl	0 <coda_type_set_description>
    5e14:	mov	r0, r5
    5e18:	mov	r2, #17
    5e1c:	mov	r3, #0
    5e20:	bl	0 <coda_type_set_byte_size>
    5e24:	b	545c <cd_time_init+0x50>
    5e28:	.word	0x0000101c
	...
    5e8c:	.word	0x00001028
    5e90:	.word	0x00001078
    5e94:	.word	0x000010bc
    5e98:	.word	0x000010f8
    5e9c:	.word	0x00001140
    5ea0:	.word	0x00001188
    5ea4:	.word	0x00001230
    5ea8:	.word	0x00001280
    5eac:	.word	0x00001330
    5eb0:	.word	0x00001378
    5eb4:	.word	0x00000d8c
    5eb8:	.word	0x00001394
    5ebc:	.word	0x00000ff8
    5ec0:	.word	0x000010d0
    5ec4:	.word	0x00000d60
    5ec8:	.word	0x00001040
    5ecc:	.word	0x00001424
    5ed0:	.word	0x00001508
    5ed4:	.word	0x000015b8
    5ed8:	.word	0x0000160c
    5edc:	.word	0x00001628
    5ee0:	.word	0x000015dc
    5ee4:	.word	0x00001484
    5ee8:	.word	0x0000149c
    5eec:	.word	0x00001580
    5ef0:	.word	0x000015a0
    5ef4:	.word	0x000015a8
    5ef8:	.word	0x00001638
    5efc:	.word	0x000014f0
    5f00:	.word	0x000014f8
    5f04:	.word	0x00000d0c
    5f08:	.word	0x00000c20
    5f0c:	.word	0x0000108c
    5f10:	.word	0xfffffe70
    5f14:	.word	0x00001660
    5f18:	.word	0x000015cc
    5f1c:	.word	0x00000cd4
    5f20:	.word	0x00000f00
    5f24:	.word	0x0000124c
    5f28:	.word	0x00000fd4
    5f2c:	.word	0x00001110
    5f30:	.word	0x0000143c
    5f34:	.word	0x00001454
    5f38:	.word	0x000014a4
    5f3c:	.word	0x000014c0
    5f40:	.word	0x000014c4
    5f44:	.word	0x000014cc
    5f48:	.word	0x00000c48
    5f4c:	.word	0x00000fac
    5f50:	.word	0x0000115c
    5f54:	.word	0x00001520
    5f58:	.word	0x00001538
    5f5c:	.word	0x00001568
    5f60:	.word	0x00000c94
    5f64:	.word	0x00000f2c
    5f68:	.word	0x000011ac
    5f6c:	.word	0x00000e64
    5f70:	.word	0x000012a4
    5f74:	.word	0x00000e40
    5f78:	.word	0x0000134c

00005f7c <cd_raw_init>:
    5f7c:	push	{r4, r5, r6, lr}
    5f80:	mov	r4, r0
    5f84:	mov	r6, r1
    5f88:	bl	46c0 <handle_format_attribute_for_type.isra.4>
    5f8c:	cmp	r0, #0
    5f90:	bne	6010 <cd_raw_init+0x94>
    5f94:	ldr	r5, [r4]
    5f98:	ldr	r3, [pc, #120]	; 6018 <cd_raw_init+0x9c>
    5f9c:	ldr	r0, [r5, #44]	; 0x2c
    5fa0:	str	r3, [r5, #40]	; 0x28
    5fa4:	bl	0 <coda_type_raw_new>
    5fa8:	ldr	r3, [r4]
    5fac:	str	r0, [r5, #8]
    5fb0:	ldr	r3, [r3, #8]
    5fb4:	cmp	r3, #0
    5fb8:	beq	6010 <cd_raw_init+0x94>
    5fbc:	mov	r2, r6
    5fc0:	add	r1, r4, #20
    5fc4:	mov	r0, r4
    5fc8:	bl	4a6c <handle_name_attribute_for_type.isra.6>
    5fcc:	cmp	r0, #0
    5fd0:	bne	6010 <cd_raw_init+0x94>
    5fd4:	ldr	r3, [r4]
    5fd8:	ldr	r2, [pc, #60]	; 601c <cd_raw_init+0xa0>
    5fdc:	ldr	r5, [pc, #60]	; 6020 <cd_raw_init+0xa4>
    5fe0:	ldr	r4, [pc, #60]	; 6024 <cd_raw_init+0xa8>
    5fe4:	ldr	lr, [pc, #60]	; 6028 <cd_raw_init+0xac>
    5fe8:	ldr	ip, [pc, #60]	; 602c <cd_raw_init+0xb0>
    5fec:	ldr	r1, [pc, #60]	; 6030 <cd_raw_init+0xb4>
    5ff0:	str	r5, [r3, #268]	; 0x10c
    5ff4:	str	r4, [r3, #80]	; 0x50
    5ff8:	str	lr, [r3, #252]	; 0xfc
    5ffc:	str	ip, [r3, #288]	; 0x120
    6000:	str	r1, [r3, #36]	; 0x24
    6004:	str	r2, [r3, #96]	; 0x60
    6008:	str	r2, [r3, #116]	; 0x74
    600c:	pop	{r4, r5, r6, pc}
    6010:	mvn	r0, #0
    6014:	pop	{r4, r5, r6, pc}
	...

00006034 <cd_complex_init>:
    6034:	push	{r4, r5, r6, lr}
    6038:	mov	r4, r0
    603c:	mov	r6, r1
    6040:	bl	46c0 <handle_format_attribute_for_type.isra.4>
    6044:	cmp	r0, #0
    6048:	bne	60c8 <cd_complex_init+0x94>
    604c:	ldr	r5, [r4]
    6050:	ldr	r3, [pc, #120]	; 60d0 <cd_complex_init+0x9c>
    6054:	ldr	r0, [r5, #44]	; 0x2c
    6058:	str	r3, [r5, #40]	; 0x28
    605c:	bl	0 <coda_type_complex_new>
    6060:	ldr	r3, [r4]
    6064:	str	r0, [r5, #8]
    6068:	ldr	r3, [r3, #8]
    606c:	cmp	r3, #0
    6070:	beq	60c8 <cd_complex_init+0x94>
    6074:	mov	r2, r6
    6078:	add	r1, r4, #20
    607c:	mov	r0, r4
    6080:	bl	4a6c <handle_name_attribute_for_type.isra.6>
    6084:	cmp	r0, #0
    6088:	bne	60c8 <cd_complex_init+0x94>
    608c:	ldr	r3, [r4]
    6090:	ldr	r2, [pc, #60]	; 60d4 <cd_complex_init+0xa0>
    6094:	ldr	r5, [pc, #60]	; 60d8 <cd_complex_init+0xa4>
    6098:	ldr	r4, [pc, #60]	; 60dc <cd_complex_init+0xa8>
    609c:	ldr	lr, [pc, #60]	; 60e0 <cd_complex_init+0xac>
    60a0:	ldr	ip, [pc, #60]	; 60e4 <cd_complex_init+0xb0>
    60a4:	ldr	r1, [pc, #60]	; 60e8 <cd_complex_init+0xb4>
    60a8:	str	r5, [r3, #96]	; 0x60
    60ac:	str	r4, [r3, #268]	; 0x10c
    60b0:	str	lr, [r3, #120]	; 0x78
    60b4:	str	ip, [r3, #132]	; 0x84
    60b8:	str	r1, [r3, #36]	; 0x24
    60bc:	str	r2, [r3, #292]	; 0x124
    60c0:	str	r2, [r3, #304]	; 0x130
    60c4:	pop	{r4, r5, r6, pc}
    60c8:	mvn	r0, #0
    60cc:	pop	{r4, r5, r6, pc}
	...

000060ec <cd_array_init>:
    60ec:	push	{r4, r5, r6, lr}
    60f0:	mov	r4, r0
    60f4:	mov	r6, r1
    60f8:	bl	46c0 <handle_format_attribute_for_type.isra.4>
    60fc:	cmp	r0, #0
    6100:	bne	623c <cd_array_init+0x150>
    6104:	ldr	r5, [r4]
    6108:	ldr	r3, [pc, #308]	; 6244 <cd_array_init+0x158>
    610c:	ldr	r0, [r5, #44]	; 0x2c
    6110:	str	r3, [r5, #40]	; 0x28
    6114:	bl	0 <coda_type_array_new>
    6118:	ldr	r3, [r4]
    611c:	str	r0, [r5, #8]
    6120:	ldr	r3, [r3, #8]
    6124:	cmp	r3, #0
    6128:	beq	623c <cd_array_init+0x150>
    612c:	mov	r2, r6
    6130:	add	r1, r4, #20
    6134:	mov	r0, r4
    6138:	bl	4a6c <handle_name_attribute_for_type.isra.6>
    613c:	cmp	r0, #0
    6140:	bne	623c <cd_array_init+0x150>
    6144:	ldr	r3, [r4]
    6148:	ldr	lr, [pc, #248]	; 6248 <cd_array_init+0x15c>
    614c:	ldr	r4, [pc, #248]	; 624c <cd_array_init+0x160>
    6150:	ldr	ip, [pc, #248]	; 6250 <cd_array_init+0x164>
    6154:	ldr	r1, [pc, #248]	; 6254 <cd_array_init+0x168>
    6158:	str	r4, [r3, #56]	; 0x38
    615c:	str	lr, [r3, #60]	; 0x3c
    6160:	str	ip, [r3, #64]	; 0x40
    6164:	str	r1, [r3, #52]	; 0x34
    6168:	ldr	r2, [pc, #232]	; 6258 <cd_array_init+0x16c>
    616c:	ldr	r5, [pc, #232]	; 625c <cd_array_init+0x170>
    6170:	ldr	r4, [pc, #232]	; 6260 <cd_array_init+0x174>
    6174:	ldr	lr, [pc, #232]	; 6264 <cd_array_init+0x178>
    6178:	ldr	ip, [pc, #232]	; 6268 <cd_array_init+0x17c>
    617c:	ldr	r1, [pc, #232]	; 626c <cd_array_init+0x180>
    6180:	str	r2, [r3, #88]	; 0x58
    6184:	str	r5, [r3, #120]	; 0x78
    6188:	str	r4, [r3, #132]	; 0x84
    618c:	str	lr, [r3, #160]	; 0xa0
    6190:	str	ip, [r3, #188]	; 0xbc
    6194:	str	r1, [r3, #192]	; 0xc0
    6198:	ldr	r2, [pc, #208]	; 6270 <cd_array_init+0x184>
    619c:	ldr	r5, [pc, #208]	; 6274 <cd_array_init+0x188>
    61a0:	ldr	r4, [pc, #208]	; 6278 <cd_array_init+0x18c>
    61a4:	ldr	lr, [pc, #208]	; 627c <cd_array_init+0x190>
    61a8:	ldr	ip, [pc, #208]	; 6280 <cd_array_init+0x194>
    61ac:	ldr	r1, [pc, #208]	; 6284 <cd_array_init+0x198>
    61b0:	str	r2, [r3, #200]	; 0xc8
    61b4:	str	r5, [r3, #204]	; 0xcc
    61b8:	ldr	r2, [pc, #200]	; 6288 <cd_array_init+0x19c>
    61bc:	str	r4, [r3, #208]	; 0xd0
    61c0:	str	lr, [r3, #212]	; 0xd4
    61c4:	str	ip, [r3, #220]	; 0xdc
    61c8:	str	r1, [r3, #104]	; 0x68
    61cc:	ldr	r6, [pc, #184]	; 628c <cd_array_init+0x1a0>
    61d0:	ldr	r5, [pc, #184]	; 6290 <cd_array_init+0x1a4>
    61d4:	ldr	r4, [pc, #184]	; 6294 <cd_array_init+0x1a8>
    61d8:	ldr	lr, [pc, #184]	; 6298 <cd_array_init+0x1ac>
    61dc:	ldr	ip, [pc, #184]	; 629c <cd_array_init+0x1b0>
    61e0:	ldr	r1, [pc, #184]	; 62a0 <cd_array_init+0x1b4>
    61e4:	str	r2, [r3, #228]	; 0xe4
    61e8:	str	r2, [r3, #232]	; 0xe8
    61ec:	str	r2, [r3, #236]	; 0xec
    61f0:	str	r2, [r3, #224]	; 0xe0
    61f4:	str	r2, [r3, #260]	; 0x104
    61f8:	str	r2, [r3, #292]	; 0x124
    61fc:	str	r2, [r3, #304]	; 0x130
    6200:	str	r2, [r3, #332]	; 0x14c
    6204:	str	r2, [r3, #360]	; 0x168
    6208:	str	r2, [r3, #364]	; 0x16c
    620c:	str	r2, [r3, #372]	; 0x174
    6210:	str	r2, [r3, #376]	; 0x178
    6214:	str	r2, [r3, #380]	; 0x17c
    6218:	str	r2, [r3, #384]	; 0x180
    621c:	str	r2, [r3, #392]	; 0x188
    6220:	str	r6, [r3, #276]	; 0x114
    6224:	str	r5, [r3, #96]	; 0x60
    6228:	str	r4, [r3, #268]	; 0x10c
    622c:	str	lr, [r3, #68]	; 0x44
    6230:	str	ip, [r3, #240]	; 0xf0
    6234:	str	r1, [r3, #36]	; 0x24
    6238:	pop	{r4, r5, r6, pc}
    623c:	mvn	r0, #0
    6240:	pop	{r4, r5, r6, pc}
	...

000062a4 <cd_ascii_white_space_init>:
    62a4:	push	{r4, r5, r6, lr}
    62a8:	mov	r4, r0
    62ac:	mov	r6, r1
    62b0:	bl	46c0 <handle_format_attribute_for_type.isra.4>
    62b4:	cmp	r0, #0
    62b8:	bne	6324 <cd_ascii_white_space_init+0x80>
    62bc:	ldr	r5, [r4]
    62c0:	ldr	r3, [pc, #100]	; 632c <cd_ascii_white_space_init+0x88>
    62c4:	ldr	r0, [r5, #44]	; 0x2c
    62c8:	str	r3, [r5, #40]	; 0x28
    62cc:	bl	0 <coda_type_text_new>
    62d0:	ldr	r3, [r4]
    62d4:	str	r0, [r5, #8]
    62d8:	ldr	r0, [r3, #8]
    62dc:	cmp	r0, #0
    62e0:	beq	6324 <cd_ascii_white_space_init+0x80>
    62e4:	mov	r1, #4
    62e8:	bl	0 <coda_type_text_set_special_text_type>
    62ec:	cmp	r0, #0
    62f0:	bne	6324 <cd_ascii_white_space_init+0x80>
    62f4:	mov	r2, r6
    62f8:	add	r1, r4, #20
    62fc:	mov	r0, r4
    6300:	bl	4a6c <handle_name_attribute_for_type.isra.6>
    6304:	cmp	r0, #0
    6308:	bne	6324 <cd_ascii_white_space_init+0x80>
    630c:	ldr	r3, [r4]
    6310:	ldr	r1, [pc, #24]	; 6330 <cd_ascii_white_space_init+0x8c>
    6314:	ldr	r2, [pc, #24]	; 6334 <cd_ascii_white_space_init+0x90>
    6318:	str	r1, [r3, #96]	; 0x60
    631c:	str	r2, [r3, #268]	; 0x10c
    6320:	pop	{r4, r5, r6, pc}
    6324:	mvn	r0, #0
    6328:	pop	{r4, r5, r6, pc}
	...

00006338 <cd_ascii_line_separator_init>:
    6338:	push	{r4, r5, r6, lr}
    633c:	mov	r4, r0
    6340:	mov	r6, r1
    6344:	bl	46c0 <handle_format_attribute_for_type.isra.4>
    6348:	cmp	r0, #0
    634c:	bne	63b8 <cd_ascii_line_separator_init+0x80>
    6350:	ldr	r5, [r4]
    6354:	ldr	r3, [pc, #100]	; 63c0 <cd_ascii_line_separator_init+0x88>
    6358:	ldr	r0, [r5, #44]	; 0x2c
    635c:	str	r3, [r5, #40]	; 0x28
    6360:	bl	0 <coda_type_text_new>
    6364:	ldr	r3, [r4]
    6368:	str	r0, [r5, #8]
    636c:	ldr	r0, [r3, #8]
    6370:	cmp	r0, #0
    6374:	beq	63b8 <cd_ascii_line_separator_init+0x80>
    6378:	mov	r1, #1
    637c:	bl	0 <coda_type_text_set_special_text_type>
    6380:	cmp	r0, #0
    6384:	bne	63b8 <cd_ascii_line_separator_init+0x80>
    6388:	mov	r2, r6
    638c:	add	r1, r4, #20
    6390:	mov	r0, r4
    6394:	bl	4a6c <handle_name_attribute_for_type.isra.6>
    6398:	cmp	r0, #0
    639c:	bne	63b8 <cd_ascii_line_separator_init+0x80>
    63a0:	ldr	r3, [r4]
    63a4:	ldr	r1, [pc, #24]	; 63c4 <cd_ascii_line_separator_init+0x8c>
    63a8:	ldr	r2, [pc, #24]	; 63c8 <cd_ascii_line_separator_init+0x90>
    63ac:	str	r1, [r3, #96]	; 0x60
    63b0:	str	r2, [r3, #268]	; 0x10c
    63b4:	pop	{r4, r5, r6, pc}
    63b8:	mvn	r0, #0
    63bc:	pop	{r4, r5, r6, pc}
	...

000063cc <cd_ascii_line_init>:
    63cc:	push	{r4, r5, r6, lr}
    63d0:	mov	r4, r0
    63d4:	mov	r6, r1
    63d8:	bl	46c0 <handle_format_attribute_for_type.isra.4>
    63dc:	cmp	r0, #0
    63e0:	bne	644c <cd_ascii_line_init+0x80>
    63e4:	ldr	r5, [r4]
    63e8:	ldr	r3, [pc, #100]	; 6454 <cd_ascii_line_init+0x88>
    63ec:	ldr	r0, [r5, #44]	; 0x2c
    63f0:	str	r3, [r5, #40]	; 0x28
    63f4:	bl	0 <coda_type_text_new>
    63f8:	ldr	r3, [r4]
    63fc:	str	r0, [r5, #8]
    6400:	ldr	r0, [r3, #8]
    6404:	cmp	r0, #0
    6408:	beq	644c <cd_ascii_line_init+0x80>
    640c:	mov	r1, #3
    6410:	bl	0 <coda_type_text_set_special_text_type>
    6414:	cmp	r0, #0
    6418:	bne	644c <cd_ascii_line_init+0x80>
    641c:	mov	r2, r6
    6420:	add	r1, r4, #20
    6424:	mov	r0, r4
    6428:	bl	4a6c <handle_name_attribute_for_type.isra.6>
    642c:	cmp	r0, #0
    6430:	bne	644c <cd_ascii_line_init+0x80>
    6434:	ldr	r3, [r4]
    6438:	ldr	r1, [pc, #24]	; 6458 <cd_ascii_line_init+0x8c>
    643c:	ldr	r2, [pc, #24]	; 645c <cd_ascii_line_init+0x90>
    6440:	str	r1, [r3, #96]	; 0x60
    6444:	str	r2, [r3, #268]	; 0x10c
    6448:	pop	{r4, r5, r6, pc}
    644c:	mvn	r0, #0
    6450:	pop	{r4, r5, r6, pc}
	...

00006460 <product_class_add_named_type>:
    6460:	ldr	r3, [r0, #24]
    6464:	push	{r4, lr}
    6468:	cmp	r3, #0
    646c:	beq	648c <product_class_add_named_type+0x2c>
    6470:	ldr	r2, [r0]
    6474:	mov	r0, r3
    6478:	ldr	r1, [r2, #8]
    647c:	bl	0 <coda_product_class_add_named_type>
    6480:	adds	r0, r0, #0
    6484:	mvnne	r0, #0
    6488:	pop	{r4, pc}
    648c:	ldr	r3, [pc, #12]	; 64a0 <product_class_add_named_type+0x40>
    6490:	ldr	r2, [pc, #12]	; 64a4 <product_class_add_named_type+0x44>
    6494:	ldr	r1, [pc, #12]	; 64a8 <product_class_add_named_type+0x48>
    6498:	ldr	r0, [pc, #12]	; 64ac <product_class_add_named_type+0x4c>
    649c:	bl	0 <__assert_fail>
    64a0:	.word	0x00000174
    64a4:	.word	0x000003ea
    64a8:	.word	0x00000064
    64ac:	.word	0x0000168c

000064b0 <cd_product_class_init>:
    64b0:	ldr	r3, [r0]
    64b4:	push	{r4, r5, r6, r7, r8, r9, lr}
    64b8:	mov	r4, r0
    64bc:	sub	sp, sp, #20
    64c0:	mov	r0, r1
    64c4:	ldr	r2, [r3]
    64c8:	ldr	r1, [pc, #472]	; 66a8 <cd_product_class_init+0x1f8>
    64cc:	bl	336c <get_mandatory_attribute_value>
    64d0:	subs	r5, r0, #0
    64d4:	beq	65c8 <cd_product_class_init+0x118>
    64d8:	ldr	r1, [pc, #460]	; 66ac <cd_product_class_init+0x1fc>
    64dc:	ldr	r0, [r4, #16]
    64e0:	bl	0 <coda_za_get_entry_by_name>
    64e4:	subs	r6, r0, #0
    64e8:	beq	64f8 <cd_product_class_init+0x48>
    64ec:	bl	0 <coda_za_get_entry_size>
    64f0:	subs	r7, r0, #0
    64f4:	bne	65d0 <cd_product_class_init+0x120>
    64f8:	mov	r6, #0
    64fc:	mov	r0, r5
    6500:	bl	0 <coda_data_dictionary_has_product_class>
    6504:	cmp	r0, #0
    6508:	bne	659c <cd_product_class_init+0xec>
    650c:	ldr	r3, [r4]
    6510:	ldr	r2, [pc, #408]	; 66b0 <cd_product_class_init+0x200>
    6514:	mov	r0, r5
    6518:	str	r2, [r3, #40]	; 0x28
    651c:	bl	0 <coda_product_class_new>
    6520:	cmp	r0, #0
    6524:	mov	r5, r0
    6528:	str	r0, [r4, #24]
    652c:	beq	65c8 <cd_product_class_init+0x118>
    6530:	ldr	r0, [r4, #16]
    6534:	bl	0 <coda_za_get_filename>
    6538:	mov	r1, r0
    653c:	mov	r0, r5
    6540:	bl	0 <coda_product_class_set_definition_file>
    6544:	subs	r5, r0, #0
    6548:	bne	6654 <cd_product_class_init+0x1a4>
    654c:	mov	r1, r6
    6550:	ldr	r0, [r4, #24]
    6554:	bl	0 <coda_product_class_set_revision>
    6558:	cmp	r0, #0
    655c:	bne	6678 <cd_product_class_init+0x1c8>
    6560:	ldr	r3, [r4]
    6564:	ldr	r5, [r4, #24]
    6568:	ldr	lr, [pc, #324]	; 66b4 <cd_product_class_init+0x204>
    656c:	ldr	r4, [pc, #324]	; 66b8 <cd_product_class_init+0x208>
    6570:	ldr	ip, [pc, #324]	; 66bc <cd_product_class_init+0x20c>
    6574:	ldr	r1, [pc, #324]	; 66c0 <cd_product_class_init+0x210>
    6578:	ldr	r2, [pc, #324]	; 66c4 <cd_product_class_init+0x214>
    657c:	str	r5, [r3, #8]
    6580:	str	r4, [r3, #96]	; 0x60
    6584:	str	lr, [r3, #268]	; 0x10c
    6588:	str	ip, [r3, #180]	; 0xb4
    658c:	str	r1, [r3, #352]	; 0x160
    6590:	str	r2, [r3, #36]	; 0x24
    6594:	add	sp, sp, #20
    6598:	pop	{r4, r5, r6, r7, r8, r9, pc}
    659c:	mov	r0, r5
    65a0:	bl	0 <coda_data_dictionary_get_product_class>
    65a4:	subs	r7, r0, #0
    65a8:	beq	65c8 <cd_product_class_init+0x118>
    65ac:	bl	0 <coda_product_class_get_revision>
    65b0:	cmp	r0, r6
    65b4:	bge	6628 <cd_product_class_init+0x178>
    65b8:	mov	r0, r7
    65bc:	bl	0 <coda_data_dictionary_remove_product_class>
    65c0:	cmp	r0, #0
    65c4:	beq	650c <cd_product_class_init+0x5c>
    65c8:	mvn	r0, #0
    65cc:	b	6594 <cd_product_class_init+0xe4>
    65d0:	add	r9, r7, #1
    65d4:	mov	r0, r9
    65d8:	bl	0 <malloc>
    65dc:	subs	r8, r0, #0
    65e0:	beq	6688 <cd_product_class_init+0x1d8>
    65e4:	mov	r0, r6
    65e8:	mov	r1, r8
    65ec:	bl	0 <coda_za_read_entry>
    65f0:	subs	r6, r0, #0
    65f4:	bne	666c <cd_product_class_init+0x1bc>
    65f8:	strb	r6, [r8, r7]
    65fc:	mov	r1, r7
    6600:	mov	r3, #1
    6604:	add	r2, sp, #8
    6608:	mov	r0, r8
    660c:	bl	0 <coda_ascii_parse_int64>
    6610:	cmp	r0, #0
    6614:	mov	r0, r8
    6618:	blt	664c <cd_product_class_init+0x19c>
    661c:	bl	0 <free>
    6620:	ldr	r6, [sp, #8]
    6624:	b	64fc <cd_product_class_init+0x4c>
    6628:	mov	r5, #1
    662c:	str	r5, [r4, #40]	; 0x28
    6630:	mov	r1, #0
    6634:	ldr	r0, [r4, #4]
    6638:	bl	0 <coda_XML_StopParser>
    663c:	mov	r0, #0
    6640:	str	r5, [r4, #36]	; 0x24
    6644:	add	sp, sp, #20
    6648:	pop	{r4, r5, r6, r7, r8, r9, pc}
    664c:	bl	0 <free>
    6650:	b	64fc <cd_product_class_init+0x4c>
    6654:	ldr	r0, [r4, #24]
    6658:	bl	0 <coda_product_class_delete>
    665c:	mov	r3, #0
    6660:	str	r3, [r4, #24]
    6664:	mvn	r0, #0
    6668:	b	6594 <cd_product_class_init+0xe4>
    666c:	mov	r0, r8
    6670:	bl	0 <free>
    6674:	b	65c8 <cd_product_class_init+0x118>
    6678:	ldr	r0, [r4, #24]
    667c:	bl	0 <coda_product_class_delete>
    6680:	str	r5, [r4, #24]
    6684:	b	65c8 <cd_product_class_init+0x118>
    6688:	ldr	r3, [pc, #56]	; 66c8 <cd_product_class_init+0x218>
    668c:	mov	r2, r9
    6690:	str	r3, [sp]
    6694:	ldr	r1, [pc, #48]	; 66cc <cd_product_class_init+0x21c>
    6698:	ldr	r3, [pc, #48]	; 66d0 <cd_product_class_init+0x220>
    669c:	mvn	r0, #0
    66a0:	bl	0 <coda_set_error>
    66a4:	b	65c8 <cd_product_class_init+0x118>
    66a8:	.word	0x000000d8
    66ac:	.word	0x000016a8
	...
    66c8:	.word	0x00000ad6
    66cc:	.word	0x000002b4
    66d0:	.word	0x00000064

000066d4 <whitespace_handler>:
    66d4:	ldr	r3, [r0, #48]	; 0x30
    66d8:	cmp	r3, #0
    66dc:	bxgt	lr
    66e0:	mov	r3, r1
    66e4:	push	{r4, r5, r6, lr}
    66e8:	mov	r1, r2
    66ec:	mov	r4, r0
    66f0:	mov	r0, r3
    66f4:	bl	2cd0 <is_whitespace>
    66f8:	subs	r5, r0, #0
    66fc:	popne	{r4, r5, r6, pc}
    6700:	ldr	r1, [pc, #28]	; 6724 <whitespace_handler+0x50>
    6704:	sub	r0, r0, #400	; 0x190
    6708:	bl	0 <coda_set_error>
    670c:	mov	r1, r5
    6710:	ldr	r0, [r4, #4]
    6714:	bl	0 <coda_XML_StopParser>
    6718:	mov	r3, #1
    671c:	str	r3, [r4, #36]	; 0x24
    6720:	pop	{r4, r5, r6, pc}
    6724:	.word	0x000016b0

00006728 <end_element_handler>:
    6728:	ldr	r2, [r0, #36]	; 0x24
    672c:	cmp	r2, #0
    6730:	bxne	lr
    6734:	ldr	r2, [r0, #48]	; 0x30
    6738:	push	{r4, r5, r6, lr}
    673c:	cmp	r2, #0
    6740:	mov	r4, r0
    6744:	ble	6754 <end_element_handler+0x2c>
    6748:	sub	r2, r2, #1
    674c:	str	r2, [r0, #48]	; 0x30
    6750:	pop	{r4, r5, r6, pc}
    6754:	ldr	r5, [r0]
    6758:	cmp	r5, #0
    675c:	beq	6834 <end_element_handler+0x10c>
    6760:	ldr	r3, [r5, #36]	; 0x24
    6764:	cmp	r3, #0
    6768:	beq	6778 <end_element_handler+0x50>
    676c:	blx	r3
    6770:	cmp	r0, #0
    6774:	bne	680c <end_element_handler+0xe4>
    6778:	ldr	r2, [r5, #396]	; 0x18c
    677c:	cmp	r2, #0
    6780:	beq	67a8 <end_element_handler+0x80>
    6784:	ldr	r3, [r5]
    6788:	add	r3, r3, #56	; 0x38
    678c:	ldr	r3, [r2, r3, lsl #2]
    6790:	cmp	r3, #0
    6794:	beq	67a8 <end_element_handler+0x80>
    6798:	mov	r0, r4
    679c:	blx	r3
    67a0:	cmp	r0, #0
    67a4:	bne	680c <end_element_handler+0xe4>
    67a8:	ldr	r0, [r5, #8]
    67ac:	cmp	r0, #0
    67b0:	beq	67c4 <end_element_handler+0x9c>
    67b4:	ldr	r3, [r5, #40]	; 0x28
    67b8:	cmp	r3, #0
    67bc:	beq	6848 <end_element_handler+0x120>
    67c0:	blx	r3
    67c4:	ldr	r0, [r5, #12]
    67c8:	cmp	r0, #0
    67cc:	beq	67d4 <end_element_handler+0xac>
    67d0:	bl	0 <free>
    67d4:	ldr	r3, [r5, #396]	; 0x18c
    67d8:	mov	r0, r5
    67dc:	str	r3, [r4]
    67e0:	bl	0 <free>
    67e4:	ldr	r3, [r4]
    67e8:	cmp	r3, #0
    67ec:	beq	67fc <end_element_handler+0xd4>
    67f0:	ldr	r3, [r3, #32]
    67f4:	cmp	r3, #0
    67f8:	bne	6824 <end_element_handler+0xfc>
    67fc:	ldr	r0, [r4, #4]
    6800:	ldr	r1, [pc, #84]	; 685c <end_element_handler+0x134>
    6804:	pop	{r4, r5, r6, lr}
    6808:	b	0 <coda_XML_SetCharacterDataHandler>
    680c:	mov	r1, #0
    6810:	ldr	r0, [r4, #4]
    6814:	bl	0 <coda_XML_StopParser>
    6818:	mov	r3, #1
    681c:	str	r3, [r4, #36]	; 0x24
    6820:	pop	{r4, r5, r6, pc}
    6824:	ldr	r0, [r4, #4]
    6828:	ldr	r1, [pc, #48]	; 6860 <end_element_handler+0x138>
    682c:	pop	{r4, r5, r6, lr}
    6830:	b	0 <coda_XML_SetCharacterDataHandler>
    6834:	ldr	r3, [pc, #40]	; 6864 <end_element_handler+0x13c>
    6838:	ldr	r2, [pc, #40]	; 6868 <end_element_handler+0x140>
    683c:	ldr	r1, [pc, #40]	; 686c <end_element_handler+0x144>
    6840:	ldr	r0, [pc, #40]	; 6870 <end_element_handler+0x148>
    6844:	bl	0 <__assert_fail>
    6848:	ldr	r3, [pc, #20]	; 6864 <end_element_handler+0x13c>
    684c:	ldr	r2, [pc, #32]	; 6874 <end_element_handler+0x14c>
    6850:	ldr	r1, [pc, #20]	; 686c <end_element_handler+0x144>
    6854:	ldr	r0, [pc, #28]	; 6878 <end_element_handler+0x150>
    6858:	bl	0 <__assert_fail>
	...
    6864:	.word	0x00000194
    6868:	.word	0x00000f4d
    686c:	.word	0x00000064
    6870:	.word	0x000003f0
    6874:	.word	0x00000f61
    6878:	.word	0x00000430

0000687c <string_handler>:
    687c:	ldr	r3, [r0, #48]	; 0x30
    6880:	cmp	r3, #0
    6884:	bxgt	lr
    6888:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    688c:	mov	r7, r2
    6890:	ldr	sl, [r0]
    6894:	sub	sp, sp, #20
    6898:	mov	r6, r1
    689c:	ldr	r5, [sl, #12]
    68a0:	mov	r4, r0
    68a4:	cmp	r5, #0
    68a8:	beq	6914 <string_handler+0x98>
    68ac:	mov	r0, r5
    68b0:	bl	0 <strlen>
    68b4:	add	fp, r0, r7
    68b8:	add	r2, fp, #1
    68bc:	mov	r8, r0
    68c0:	mov	r0, r2
    68c4:	str	r2, [sp, #12]
    68c8:	bl	0 <malloc>
    68cc:	ldr	r2, [sp, #12]
    68d0:	subs	r9, r0, #0
    68d4:	beq	697c <string_handler+0x100>
    68d8:	mov	r1, r5
    68dc:	mov	r2, r8
    68e0:	bl	0 <memcpy>
    68e4:	mov	r2, r7
    68e8:	mov	r1, r6
    68ec:	add	r0, r9, r8
    68f0:	bl	0 <memcpy>
    68f4:	mov	r3, #0
    68f8:	strb	r3, [r9, fp]
    68fc:	ldr	r0, [sl, #12]
    6900:	bl	0 <free>
    6904:	ldr	r3, [r4]
    6908:	str	r9, [r3, #12]
    690c:	add	sp, sp, #20
    6910:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6914:	add	r9, r2, #1
    6918:	mov	r0, r9
    691c:	bl	0 <malloc>
    6920:	cmp	r0, #0
    6924:	mov	r8, r0
    6928:	str	r0, [sl, #12]
    692c:	beq	6948 <string_handler+0xcc>
    6930:	mov	r1, r6
    6934:	mov	r2, r7
    6938:	bl	0 <memcpy>
    693c:	ldr	r3, [sl, #12]
    6940:	strb	r5, [r3, r7]
    6944:	b	690c <string_handler+0x90>
    6948:	ldr	r3, [pc, #92]	; 69ac <string_handler+0x130>
    694c:	mov	r2, r9
    6950:	str	r3, [sp]
    6954:	ldr	r1, [pc, #84]	; 69b0 <string_handler+0x134>
    6958:	ldr	r3, [pc, #84]	; 69b4 <string_handler+0x138>
    695c:	mvn	r0, #0
    6960:	bl	0 <coda_set_error>
    6964:	mov	r1, r8
    6968:	ldr	r0, [r4, #4]
    696c:	bl	0 <coda_XML_StopParser>
    6970:	mov	r3, #1
    6974:	str	r3, [r4, #36]	; 0x24
    6978:	b	690c <string_handler+0x90>
    697c:	ldr	r3, [pc, #52]	; 69b8 <string_handler+0x13c>
    6980:	ldr	r1, [pc, #40]	; 69b0 <string_handler+0x134>
    6984:	str	r3, [sp]
    6988:	mvn	r0, #0
    698c:	ldr	r3, [pc, #32]	; 69b4 <string_handler+0x138>
    6990:	bl	0 <coda_set_error>
    6994:	mov	r1, r9
    6998:	ldr	r0, [r4, #4]
    699c:	bl	0 <coda_XML_StopParser>
    69a0:	mov	r3, #1
    69a4:	str	r3, [r4, #36]	; 0x24
    69a8:	b	690c <string_handler+0x90>
    69ac:	.word	0x00000f01
    69b0:	.word	0x000002b4
    69b4:	.word	0x00000064
    69b8:	.word	0x00000f11

000069bc <start_element_handler>:
    69bc:	ldr	r3, [r0, #48]	; 0x30
    69c0:	cmp	r3, #0
    69c4:	ble	69d4 <start_element_handler+0x18>
    69c8:	add	r3, r3, #1
    69cc:	str	r3, [r0, #48]	; 0x30
    69d0:	bx	lr
    69d4:	push	{r4, r5, r6, lr}
    69d8:	mov	r4, r0
    69dc:	sub	sp, sp, #8
    69e0:	ldr	r0, [r0, #8]
    69e4:	mov	r6, r1
    69e8:	mov	r5, r2
    69ec:	bl	0 <coda_hashtable_get_index_from_name>
    69f0:	subs	r1, r0, #0
    69f4:	blt	6a28 <start_element_handler+0x6c>
    69f8:	ldr	r3, [r4]
    69fc:	add	r2, r3, r1, lsl #2
    6a00:	ldr	r2, [r2, #52]	; 0x34
    6a04:	cmp	r2, #0
    6a08:	beq	6a4c <start_element_handler+0x90>
    6a0c:	mov	r2, r5
    6a10:	mov	r0, r4
    6a14:	bl	1dc0 <push_node>
    6a18:	cmp	r0, #0
    6a1c:	bne	6ac8 <start_element_handler+0x10c>
    6a20:	add	sp, sp, #8
    6a24:	pop	{r4, r5, r6, pc}
    6a28:	mov	r2, #44	; 0x2c
    6a2c:	ldr	r1, [pc, #300]	; 6b60 <start_element_handler+0x1a4>
    6a30:	mov	r0, r6
    6a34:	bl	0 <strncmp>
    6a38:	cmp	r0, #0
    6a3c:	movne	r3, #1
    6a40:	strne	r3, [r4, #48]	; 0x30
    6a44:	bne	6a20 <start_element_handler+0x64>
    6a48:	ldr	r3, [r4]
    6a4c:	ldr	r2, [r3]
    6a50:	cmn	r2, #1
    6a54:	beq	6b34 <start_element_handler+0x178>
    6a58:	ldr	r3, [r3, #48]	; 0x30
    6a5c:	mov	r0, r6
    6a60:	cmp	r3, #0
    6a64:	beq	6ae4 <start_element_handler+0x128>
    6a68:	bl	0 <coda_element_name_from_xml_name>
    6a6c:	mov	r6, r0
    6a70:	ldr	r0, [r4]
    6a74:	ldr	r1, [r0]
    6a78:	cmn	r1, #1
    6a7c:	beq	6b50 <start_element_handler+0x194>
    6a80:	ldr	r3, [pc, #220]	; 6b64 <start_element_handler+0x1a8>
    6a84:	add	r3, r3, r1, lsl #2
    6a88:	ldr	r3, [r3, #68]	; 0x44
    6a8c:	ldrb	r2, [r3]
    6a90:	cmp	r2, #32
    6a94:	beq	6aa4 <start_element_handler+0xe8>
    6a98:	ldrb	r1, [r3, #1]!
    6a9c:	cmp	r1, #32
    6aa0:	bne	6a98 <start_element_handler+0xdc>
    6aa4:	add	r5, r3, #1
    6aa8:	ldr	r0, [r0, #44]	; 0x2c
    6aac:	bl	0 <coda_type_get_format_name>
    6ab0:	mov	r3, r5
    6ab4:	mov	r2, r6
    6ab8:	ldr	r1, [pc, #168]	; 6b68 <start_element_handler+0x1ac>
    6abc:	str	r0, [sp]
    6ac0:	ldr	r0, [pc, #164]	; 6b6c <start_element_handler+0x1b0>
    6ac4:	bl	0 <coda_set_error>
    6ac8:	mov	r1, #0
    6acc:	ldr	r0, [r4, #4]
    6ad0:	bl	0 <coda_XML_StopParser>
    6ad4:	mov	r3, #1
    6ad8:	str	r3, [r4, #36]	; 0x24
    6adc:	add	sp, sp, #8
    6ae0:	pop	{r4, r5, r6, pc}
    6ae4:	bl	0 <coda_element_name_from_xml_name>
    6ae8:	ldr	r3, [r4]
    6aec:	ldr	r1, [r3]
    6af0:	cmn	r1, #1
    6af4:	mov	r2, r0
    6af8:	beq	6b58 <start_element_handler+0x19c>
    6afc:	ldr	r3, [pc, #96]	; 6b64 <start_element_handler+0x1a8>
    6b00:	add	r3, r3, r1, lsl #2
    6b04:	ldr	r3, [r3, #68]	; 0x44
    6b08:	ldrb	r1, [r3]
    6b0c:	cmp	r1, #32
    6b10:	beq	6b20 <start_element_handler+0x164>
    6b14:	ldrb	r1, [r3, #1]!
    6b18:	cmp	r1, #32
    6b1c:	bne	6b14 <start_element_handler+0x158>
    6b20:	add	r3, r3, #1
    6b24:	ldr	r1, [pc, #68]	; 6b70 <start_element_handler+0x1b4>
    6b28:	ldr	r0, [pc, #60]	; 6b6c <start_element_handler+0x1b0>
    6b2c:	bl	0 <coda_set_error>
    6b30:	b	6ac8 <start_element_handler+0x10c>
    6b34:	mov	r0, r6
    6b38:	bl	0 <coda_element_name_from_xml_name>
    6b3c:	ldr	r1, [pc, #48]	; 6b74 <start_element_handler+0x1b8>
    6b40:	mov	r2, r0
    6b44:	ldr	r0, [pc, #32]	; 6b6c <start_element_handler+0x1b0>
    6b48:	bl	0 <coda_set_error>
    6b4c:	b	6ac8 <start_element_handler+0x10c>
    6b50:	ldr	r5, [pc, #32]	; 6b78 <start_element_handler+0x1bc>
    6b54:	b	6aa8 <start_element_handler+0xec>
    6b58:	ldr	r3, [pc, #24]	; 6b78 <start_element_handler+0x1bc>
    6b5c:	b	6b24 <start_element_handler+0x168>
    6b60:	.word	0x000016e0
    6b64:	.word	0x00000000
    6b68:	.word	0x00001740
    6b6c:	.word	0xfffffe70
    6b70:	.word	0x00001778
    6b74:	.word	0x00001710
    6b78:	.word	0x0000070c

00006b7c <cd_type_set_type>:
    6b7c:	ldr	r3, [r0]
    6b80:	push	{r4, r5, r6, lr}
    6b84:	mov	r5, r0
    6b88:	ldr	r2, [r3, #396]	; 0x18c
    6b8c:	ldr	r4, [r2, #8]
    6b90:	ldr	r1, [r4, #20]
    6b94:	cmp	r1, #0
    6b98:	beq	6ba4 <cd_type_set_type+0x28>
    6b9c:	ldr	r0, [r3, #8]
    6ba0:	bl	0 <coda_type_set_description>
    6ba4:	ldr	r2, [r4, #36]	; 0x24
    6ba8:	cmp	r2, #0
    6bac:	beq	6bd8 <cd_type_set_type+0x5c>
    6bb0:	ldr	r3, [r5]
    6bb4:	ldr	r3, [r3, #8]
    6bb8:	ldr	r6, [r3, #36]	; 0x24
    6bbc:	cmp	r6, #0
    6bc0:	bne	6c00 <cd_type_set_type+0x84>
    6bc4:	str	r2, [r3, #36]	; 0x24
    6bc8:	ldr	r1, [r3]
    6bcc:	ldr	r0, [r4, #36]	; 0x24
    6bd0:	bl	21b8 <type_set_format>
    6bd4:	str	r6, [r4, #36]	; 0x24
    6bd8:	mov	r0, r4
    6bdc:	bl	0 <coda_type_release>
    6be0:	ldr	r3, [r5]
    6be4:	mov	r2, #0
    6be8:	mov	r0, r2
    6bec:	ldr	r1, [r3, #396]	; 0x18c
    6bf0:	ldr	ip, [r3, #8]
    6bf4:	str	ip, [r1, #8]
    6bf8:	str	r2, [r3, #8]
    6bfc:	pop	{r4, r5, r6, pc}
    6c00:	ldr	r3, [pc, #12]	; 6c14 <cd_type_set_type+0x98>
    6c04:	ldr	r2, [pc, #12]	; 6c18 <cd_type_set_type+0x9c>
    6c08:	ldr	r1, [pc, #12]	; 6c1c <cd_type_set_type+0xa0>
    6c0c:	ldr	r0, [pc, #12]	; 6c20 <cd_type_set_type+0xa4>
    6c10:	bl	0 <__assert_fail>
    6c14:	.word	0x000001a0
    6c18:	.word	0x00000e45
    6c1c:	.word	0x00000064
    6c20:	.word	0x000017ac

00006c24 <cd_raw_set_fixed_value>:
    6c24:	ldr	r3, [r0]
    6c28:	push	{r4, lr}
    6c2c:	mov	r4, r0
    6c30:	ldr	r0, [r3, #12]
    6c34:	bl	d0 <decode_escaped_string>
    6c38:	subs	r1, r0, #0
    6c3c:	blt	6c6c <cd_raw_set_fixed_value+0x48>
    6c40:	beq	6c64 <cd_raw_set_fixed_value+0x40>
    6c44:	ldr	r3, [r4]
    6c48:	ldr	r0, [r3, #396]	; 0x18c
    6c4c:	ldr	r2, [r3, #12]
    6c50:	ldr	r0, [r0, #8]
    6c54:	bl	0 <coda_type_raw_set_fixed_value>
    6c58:	adds	r0, r0, #0
    6c5c:	mvnne	r0, #0
    6c60:	pop	{r4, pc}
    6c64:	mov	r0, r1
    6c68:	pop	{r4, pc}
    6c6c:	ldr	r1, [pc, #12]	; 6c80 <cd_raw_set_fixed_value+0x5c>
    6c70:	ldr	r0, [pc, #12]	; 6c84 <cd_raw_set_fixed_value+0x60>
    6c74:	bl	0 <coda_set_error>
    6c78:	mvn	r0, #0
    6c7c:	pop	{r4, pc}
    6c80:	.word	0x000001f0
    6c84:	.word	0xfffffe70

00006c88 <cd_named_type_init>:
    6c88:	ldr	r3, [r0]
    6c8c:	push	{r4, r5, r6, lr}
    6c90:	mov	r4, r0
    6c94:	sub	sp, sp, #8
    6c98:	mov	r0, r1
    6c9c:	ldr	r2, [r3]
    6ca0:	ldr	r1, [pc, #188]	; 6d64 <cd_named_type_init+0xdc>
    6ca4:	bl	336c <get_mandatory_attribute_value>
    6ca8:	subs	r5, r0, #0
    6cac:	beq	6d48 <cd_named_type_init+0xc0>
    6cb0:	ldr	r0, [r4, #24]
    6cb4:	ldr	r3, [r4]
    6cb8:	ldr	r2, [pc, #168]	; 6d68 <cd_named_type_init+0xe0>
    6cbc:	cmp	r0, #0
    6cc0:	str	r2, [r3, #40]	; 0x28
    6cc4:	beq	6d50 <cd_named_type_init+0xc8>
    6cc8:	mov	r1, r5
    6ccc:	bl	0 <coda_product_class_has_named_type>
    6cd0:	subs	r6, r0, #0
    6cd4:	beq	6d18 <cd_named_type_init+0x90>
    6cd8:	mov	r1, r5
    6cdc:	ldr	r0, [r4, #24]
    6ce0:	bl	0 <coda_product_class_get_named_type>
    6ce4:	ldr	r2, [r4]
    6ce8:	mov	ip, #1
    6cec:	ldr	r1, [r0, #4]
    6cf0:	ldr	lr, [r0]
    6cf4:	add	r1, r1, #1
    6cf8:	str	r1, [r0, #4]
    6cfc:	mov	r3, r0
    6d00:	mov	r0, #0
    6d04:	str	lr, [r2, #44]	; 0x2c
    6d08:	str	r3, [r2, #8]
    6d0c:	str	ip, [r2, #48]	; 0x30
    6d10:	add	sp, sp, #8
    6d14:	pop	{r4, r5, r6, pc}
    6d18:	ldr	r2, [r4, #28]
    6d1c:	ldr	r3, [r4, #24]
    6d20:	ldr	r0, [r4, #16]
    6d24:	mov	r1, #1
    6d28:	str	r2, [sp]
    6d2c:	mov	r2, r5
    6d30:	bl	25bc <parse_entry>
    6d34:	cmp	r0, #0
    6d38:	strne	r6, [r4, #44]	; 0x2c
    6d3c:	mvnne	r0, #0
    6d40:	beq	6cd8 <cd_named_type_init+0x50>
    6d44:	b	6d10 <cd_named_type_init+0x88>
    6d48:	mvn	r0, #0
    6d4c:	b	6d10 <cd_named_type_init+0x88>
    6d50:	ldr	r3, [pc, #20]	; 6d6c <cd_named_type_init+0xe4>
    6d54:	ldr	r2, [pc, #20]	; 6d70 <cd_named_type_init+0xe8>
    6d58:	ldr	r1, [pc, #20]	; 6d74 <cd_named_type_init+0xec>
    6d5c:	ldr	r0, [pc, #20]	; 6d78 <cd_named_type_init+0xf0>
    6d60:	bl	0 <__assert_fail>
    6d64:	.word	0x00000770
    6d68:	.word	0x00000000
    6d6c:	.word	0x000001b4
    6d70:	.word	0x00000761
    6d74:	.word	0x00000064
    6d78:	.word	0x0000168c

00006d7c <cd_text_set_fixed_value>:
    6d7c:	ldr	r3, [r0]
    6d80:	push	{r4, lr}
    6d84:	mov	r4, r0
    6d88:	ldr	r0, [r3, #12]
    6d8c:	bl	d0 <decode_escaped_string>
    6d90:	cmp	r0, #0
    6d94:	blt	6db0 <cd_text_set_fixed_value+0x34>
    6d98:	ldr	r3, [r4]
    6d9c:	pop	{r4, lr}
    6da0:	ldr	r2, [r3, #396]	; 0x18c
    6da4:	ldr	r1, [r3, #12]
    6da8:	ldr	r0, [r2, #8]
    6dac:	b	0 <coda_type_text_set_fixed_value>
    6db0:	ldr	r1, [pc, #12]	; 6dc4 <cd_text_set_fixed_value+0x48>
    6db4:	ldr	r0, [pc, #12]	; 6dc8 <cd_text_set_fixed_value+0x4c>
    6db8:	bl	0 <coda_set_error>
    6dbc:	mvn	r0, #0
    6dc0:	pop	{r4, pc}
    6dc4:	.word	0x000001f0
    6dc8:	.word	0xfffffe70

00006dcc <coda_read_product_definition>:
    6dcc:	ldr	r3, [r0, #24]
    6dd0:	push	{r4, r5, r6, lr}
    6dd4:	cmp	r3, #0
    6dd8:	sub	sp, sp, #8
    6ddc:	bne	6e44 <coda_read_product_definition+0x78>
    6de0:	ldr	r3, [r0, #44]	; 0x2c
    6de4:	mov	r4, r0
    6de8:	ldr	r1, [pc, #104]	; 6e58 <coda_read_product_definition+0x8c>
    6dec:	ldr	r5, [r3, #20]
    6df0:	ldr	r0, [r5, #8]
    6df4:	bl	0 <coda_za_open>
    6df8:	subs	r6, r0, #0
    6dfc:	beq	6e3c <coda_read_product_definition+0x70>
    6e00:	ldr	r2, [r4, #8]
    6e04:	mov	r3, r5
    6e08:	str	r4, [sp]
    6e0c:	mov	r1, #2
    6e10:	bl	25bc <parse_entry>
    6e14:	subs	r4, r0, #0
    6e18:	mov	r0, r6
    6e1c:	bne	6e30 <coda_read_product_definition+0x64>
    6e20:	bl	0 <coda_za_close>
    6e24:	mov	r0, r4
    6e28:	add	sp, sp, #8
    6e2c:	pop	{r4, r5, r6, pc}
    6e30:	bl	0 <coda_za_close>
    6e34:	mvn	r4, #0
    6e38:	b	6e24 <coda_read_product_definition+0x58>
    6e3c:	mvn	r4, #0
    6e40:	b	6e24 <coda_read_product_definition+0x58>
    6e44:	ldr	r3, [pc, #16]	; 6e5c <coda_read_product_definition+0x90>
    6e48:	ldr	r2, [pc, #16]	; 6e60 <coda_read_product_definition+0x94>
    6e4c:	ldr	r1, [pc, #16]	; 6e64 <coda_read_product_definition+0x98>
    6e50:	ldr	r0, [pc, #16]	; 6e68 <coda_read_product_definition+0x9c>
    6e54:	bl	0 <__assert_fail>
    6e58:	.word	0x00000000
    6e5c:	.word	0x000001c8
    6e60:	.word	0x000010ad
    6e64:	.word	0x00000064
    6e68:	.word	0x000017e0

00006e6c <coda_read_definitions>:
    6e6c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6e70:	sub	sp, sp, #108	; 0x6c
    6e74:	bl	0 <strdup>
    6e78:	subs	r3, r0, #0
    6e7c:	str	r3, [sp, #12]
    6e80:	beq	70c0 <coda_read_definitions+0x254>
    6e84:	ldrb	r3, [r3]
    6e88:	cmp	r3, #0
    6e8c:	beq	6fe8 <coda_read_definitions+0x17c>
    6e90:	ldr	r9, [sp, #12]
    6e94:	cmp	r3, #58	; 0x3a
    6e98:	mov	sl, #3
    6e9c:	ldr	r8, [pc, #568]	; 70dc <coda_read_definitions+0x270>
    6ea0:	mov	r4, r9
    6ea4:	beq	6f08 <coda_read_definitions+0x9c>
    6ea8:	ldrb	r3, [r4, #1]!
    6eac:	cmp	r3, #0
    6eb0:	cmpne	r3, #58	; 0x3a
    6eb4:	bne	6ea8 <coda_read_definitions+0x3c>
    6eb8:	cmp	r3, #0
    6ebc:	bne	6f08 <coda_read_definitions+0x9c>
    6ec0:	add	r2, sp, #16
    6ec4:	mov	r1, r9
    6ec8:	mov	r0, sl
    6ecc:	bl	0 <__xstat>
    6ed0:	cmp	r0, #0
    6ed4:	bne	6eec <coda_read_definitions+0x80>
    6ed8:	ldr	r3, [sp, #32]
    6edc:	tst	r3, #16384	; 0x4000
    6ee0:	bne	6f14 <coda_read_definitions+0xa8>
    6ee4:	tst	r3, #32768	; 0x8000
    6ee8:	bne	6ffc <coda_read_definitions+0x190>
    6eec:	ldrb	r3, [r4]
    6ef0:	cmp	r3, #0
    6ef4:	beq	6fe8 <coda_read_definitions+0x17c>
    6ef8:	mov	r9, r4
    6efc:	cmp	r3, #58	; 0x3a
    6f00:	mov	r4, r9
    6f04:	bne	6ea8 <coda_read_definitions+0x3c>
    6f08:	mov	r3, #0
    6f0c:	strb	r3, [r4], #1
    6f10:	b	6ec0 <coda_read_definitions+0x54>
    6f14:	mov	r0, r9
    6f18:	bl	0 <opendir>
    6f1c:	subs	r7, r0, #0
    6f20:	beq	7094 <coda_read_definitions+0x228>
    6f24:	mov	r0, r7
    6f28:	bl	0 <readdir>
    6f2c:	subs	r6, r0, #0
    6f30:	add	fp, r6, #11
    6f34:	mov	r0, fp
    6f38:	beq	6fd4 <coda_read_definitions+0x168>
    6f3c:	bl	0 <strlen>
    6f40:	mov	r1, r8
    6f44:	mov	r5, r0
    6f48:	cmp	r5, #8
    6f4c:	add	r0, r0, #3
    6f50:	add	r0, r6, r0
    6f54:	ble	6f24 <coda_read_definitions+0xb8>
    6f58:	bl	0 <strcmp>
    6f5c:	cmp	r0, #0
    6f60:	bne	6f24 <coda_read_definitions+0xb8>
    6f64:	mov	r0, r9
    6f68:	bl	0 <strlen>
    6f6c:	mov	r6, r0
    6f70:	add	r0, r5, #2
    6f74:	add	r0, r0, r6
    6f78:	bl	0 <malloc>
    6f7c:	mov	r3, fp
    6f80:	mov	r2, r9
    6f84:	ldr	r1, [pc, #340]	; 70e0 <coda_read_definitions+0x274>
    6f88:	subs	fp, r0, #0
    6f8c:	beq	7058 <coda_read_definitions+0x1ec>
    6f90:	bl	0 <sprintf>
    6f94:	add	r2, sp, #16
    6f98:	mov	r1, fp
    6f9c:	mov	r0, sl
    6fa0:	bl	0 <__xstat>
    6fa4:	cmp	r0, #0
    6fa8:	mov	r0, fp
    6fac:	bne	7020 <coda_read_definitions+0x1b4>
    6fb0:	ldr	r3, [sp, #32]
    6fb4:	tst	r3, #32768	; 0x8000
    6fb8:	beq	6fc8 <coda_read_definitions+0x15c>
    6fbc:	bl	2c70 <read_definition_file>
    6fc0:	cmp	r0, #0
    6fc4:	bne	708c <coda_read_definitions+0x220>
    6fc8:	mov	r0, fp
    6fcc:	bl	0 <free>
    6fd0:	b	6f24 <coda_read_definitions+0xb8>
    6fd4:	mov	r0, r7
    6fd8:	bl	0 <closedir>
    6fdc:	ldrb	r3, [r4]
    6fe0:	cmp	r3, #0
    6fe4:	bne	6ef8 <coda_read_definitions+0x8c>
    6fe8:	ldr	r0, [sp, #12]
    6fec:	bl	0 <free>
    6ff0:	mov	r0, #0
    6ff4:	add	sp, sp, #108	; 0x6c
    6ff8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6ffc:	mov	r0, r9
    7000:	bl	2c70 <read_definition_file>
    7004:	cmp	r0, #0
    7008:	beq	6eec <coda_read_definitions+0x80>
    700c:	ldr	r0, [sp, #12]
    7010:	bl	0 <free>
    7014:	mvn	r0, #0
    7018:	add	sp, sp, #108	; 0x6c
    701c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7020:	bl	0 <__errno_location>
    7024:	mov	r6, fp
    7028:	ldr	r0, [r0]
    702c:	bl	0 <strerror>
    7030:	mov	r2, fp
    7034:	ldr	r1, [pc, #168]	; 70e4 <coda_read_definitions+0x278>
    7038:	mov	r3, r0
    703c:	ldr	r0, [pc, #164]	; 70e8 <coda_read_definitions+0x27c>
    7040:	bl	0 <coda_set_error>
    7044:	mov	r0, r6
    7048:	bl	0 <free>
    704c:	mov	r0, r7
    7050:	bl	0 <closedir>
    7054:	b	700c <coda_read_definitions+0x1a0>
    7058:	ldr	r3, [pc, #140]	; 70ec <coda_read_definitions+0x280>
    705c:	add	r2, r5, r6
    7060:	add	r2, r2, #2
    7064:	str	r3, [sp]
    7068:	ldr	r1, [pc, #128]	; 70f0 <coda_read_definitions+0x284>
    706c:	ldr	r3, [pc, #128]	; 70f4 <coda_read_definitions+0x288>
    7070:	mvn	r0, #0
    7074:	bl	0 <coda_set_error>
    7078:	mov	r0, r7
    707c:	bl	0 <closedir>
    7080:	ldr	r0, [sp, #12]
    7084:	bl	0 <free>
    7088:	b	7014 <coda_read_definitions+0x1a8>
    708c:	mov	r6, fp
    7090:	b	7044 <coda_read_definitions+0x1d8>
    7094:	bl	0 <__errno_location>
    7098:	ldr	r0, [r0]
    709c:	bl	0 <strerror>
    70a0:	mov	r2, r9
    70a4:	ldr	r1, [pc, #76]	; 70f8 <coda_read_definitions+0x28c>
    70a8:	mov	r3, r0
    70ac:	ldr	r0, [pc, #52]	; 70e8 <coda_read_definitions+0x27c>
    70b0:	bl	0 <coda_set_error>
    70b4:	ldr	r0, [sp, #12]
    70b8:	bl	0 <free>
    70bc:	b	7014 <coda_read_definitions+0x1a8>
    70c0:	mvn	r0, #0
    70c4:	ldr	r3, [pc, #48]	; 70fc <coda_read_definitions+0x290>
    70c8:	ldr	r2, [pc, #36]	; 70f4 <coda_read_definitions+0x288>
    70cc:	ldr	r1, [pc, #44]	; 7100 <coda_read_definitions+0x294>
    70d0:	bl	0 <coda_set_error>
    70d4:	mvn	r0, #0
    70d8:	b	7018 <coda_read_definitions+0x1ac>
    70dc:	.word	0x0000182c
    70e0:	.word	0x00001838
    70e4:	.word	0x00001840
    70e8:	.word	0xfffffe70
    70ec:	.word	0x0000114b
    70f0:	.word	0x000002b4
    70f4:	.word	0x00000064
    70f8:	.word	0x00001804
    70fc:	.word	0x000010ce
    7100:	.word	0x00000248
