
../compcert-repos/stcorp-coda-3a25f25/CMakeFiles/coda_static.dir/libcoda/coda-ascii-cursor.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <get_bit_size_boundary>:
       0:	ldr	ip, [r0]
       4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
       8:	mov	r5, r3
       c:	ldr	r3, [r0, #4]
      10:	cmp	r2, #0
      14:	ldr	lr, [ip, #16]
      18:	mov	r4, r2
      1c:	sbcs	r2, r5, #0
      20:	lsl	r2, r3, #4
      24:	movlt	r4, #0
      28:	movlt	r5, #0
      2c:	cmp	lr, #1
      30:	sub	sp, sp, #104	; 0x68
      34:	sub	r3, r3, #1
      38:	ldrd	r6, [r0, r2]
      3c:	bls	10c <get_bit_size_boundary+0x10c>
      40:	cmp	r3, #0
      44:	ble	158 <get_bit_size_boundary+0x158>
      48:	add	ip, r0, r3, lsl #4
      4c:	ldr	ip, [ip, #8]
      50:	ldr	lr, [ip]
      54:	cmp	lr, #1
      58:	addls	r2, r0, r2
      5c:	bls	78 <get_bit_size_boundary+0x78>
      60:	b	88 <get_bit_size_boundary+0x88>
      64:	ldr	ip, [r2, #-24]	; 0xffffffe8
      68:	sub	r2, r2, #16
      6c:	ldr	lr, [ip]
      70:	cmp	lr, #1
      74:	bhi	88 <get_bit_size_boundary+0x88>
      78:	subs	r3, r3, #1
      7c:	bne	64 <get_bit_size_boundary+0x64>
      80:	ldr	ip, [r0, #8]
      84:	ldr	lr, [ip]
      88:	cmp	lr, #100	; 0x64
      8c:	bne	15c <get_bit_size_boundary+0x15c>
      90:	ldr	r3, [ip, #8]
      94:	cmp	r3, #2
      98:	bne	15c <get_bit_size_boundary+0x15c>
      9c:	ldr	r0, [ip, #24]
      a0:	ldr	lr, [ip, #28]
      a4:	ldr	sl, [ip, #16]
      a8:	lsl	r2, r0, #3
      ac:	lsl	r3, lr, #3
      b0:	lsl	sl, sl, #3
      b4:	orr	r3, r3, r0, lsr #29
      b8:	subs	r6, r6, r2
      bc:	sbc	r7, r7, r3
      c0:	asr	r9, sl, #31
      c4:	cmp	sl, r6
      c8:	sbcs	r3, r9, r7
      cc:	movlt	r3, #1
      d0:	movge	r3, #0
      d4:	orrs	r3, r3, r7, lsr #31
      d8:	mov	r8, sl
      dc:	bne	170 <get_bit_size_boundary+0x170>
      e0:	adds	r2, r4, r6
      e4:	adc	r3, r5, r7
      e8:	cmp	sl, r2
      ec:	sbcs	r3, r9, r3
      f0:	blt	1e0 <get_bit_size_boundary+0x1e0>
      f4:	subs	r6, r8, r6
      f8:	sbc	r7, r9, r7
      fc:	mov	r0, #0
     100:	strd	r6, [r1]
     104:	add	sp, sp, #104	; 0x68
     108:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
     10c:	ldr	r3, [ip, #48]	; 0x30
     110:	cmp	r3, #0
     114:	ldrne	r3, [ip, #40]	; 0x28
     118:	ldreq	r3, [ip, #8]
     11c:	ldrne	r2, [ip, #44]	; 0x2c
     120:	ldreq	r2, [ip, #12]
     124:	lsl	r8, r3, #3
     128:	adds	r4, r4, r6
     12c:	lsl	r9, r2, #3
     130:	adc	r5, r5, r7
     134:	orr	r9, r9, r3, lsr #29
     138:	cmp	r4, r8
     13c:	sbcs	r3, r5, r9
     140:	blt	f4 <get_bit_size_boundary+0xf4>
     144:	mvn	r0, #300	; 0x12c
     148:	ldr	r1, [pc, #332]	; 29c <get_bit_size_boundary+0x29c>
     14c:	bl	0 <coda_set_error>
     150:	mvn	r0, #0
     154:	b	104 <get_bit_size_boundary+0x104>
     158:	beq	80 <get_bit_size_boundary+0x80>
     15c:	ldr	r3, [pc, #316]	; 2a0 <get_bit_size_boundary+0x2a0>
     160:	mov	r2, #122	; 0x7a
     164:	ldr	r1, [pc, #312]	; 2a4 <get_bit_size_boundary+0x2a4>
     168:	ldr	r0, [pc, #312]	; 2a8 <get_bit_size_boundary+0x2a8>
     16c:	bl	0 <__assert_fail>
     170:	lsr	r0, r6, #3
     174:	add	r2, sp, #72	; 0x48
     178:	orr	r0, r0, r7, lsl #29
     17c:	asr	r1, r7, #3
     180:	bl	0 <coda_str64>
     184:	and	r2, r6, #7
     188:	mov	r3, #0
     18c:	orrs	r3, r2, r3
     190:	beq	1b0 <get_bit_size_boundary+0x1b0>
     194:	add	r0, sp, #72	; 0x48
     198:	bl	0 <strlen>
     19c:	add	r3, sp, #72	; 0x48
     1a0:	and	r2, r6, #7
     1a4:	ldr	r1, [pc, #256]	; 2ac <get_bit_size_boundary+0x2ac>
     1a8:	add	r0, r3, r0
     1ac:	bl	0 <sprintf>
     1b0:	lsr	r0, sl, #3
     1b4:	orr	r0, r0, r9, lsl #29
     1b8:	asr	r1, r9, #3
     1bc:	add	r2, sp, #40	; 0x28
     1c0:	bl	0 <coda_str64>
     1c4:	mvn	r0, #300	; 0x12c
     1c8:	add	r3, sp, #40	; 0x28
     1cc:	add	r2, sp, #72	; 0x48
     1d0:	ldr	r1, [pc, #216]	; 2b0 <get_bit_size_boundary+0x2b0>
     1d4:	bl	0 <coda_set_error>
     1d8:	mvn	r0, #0
     1dc:	b	104 <get_bit_size_boundary+0x104>
     1e0:	lsr	r0, r4, #3
     1e4:	add	r2, sp, #8
     1e8:	orr	r0, r0, r5, lsl #29
     1ec:	asr	r1, r5, #3
     1f0:	bl	0 <coda_str64>
     1f4:	and	r2, r4, #7
     1f8:	mov	r3, #0
     1fc:	orrs	r3, r2, r3
     200:	bne	27c <get_bit_size_boundary+0x27c>
     204:	lsr	r0, r6, #3
     208:	add	r2, sp, #40	; 0x28
     20c:	orr	r0, r0, r7, lsl #29
     210:	asr	r1, r7, #3
     214:	bl	0 <coda_str64>
     218:	and	r2, r6, #7
     21c:	mov	r3, #0
     220:	orrs	r3, r2, r3
     224:	beq	244 <get_bit_size_boundary+0x244>
     228:	add	r0, sp, #40	; 0x28
     22c:	bl	0 <strlen>
     230:	add	r3, sp, #40	; 0x28
     234:	and	r2, r6, #7
     238:	ldr	r1, [pc, #108]	; 2ac <get_bit_size_boundary+0x2ac>
     23c:	add	r0, r3, r0
     240:	bl	0 <sprintf>
     244:	add	r4, sp, #72	; 0x48
     248:	lsr	r0, sl, #3
     24c:	orr	r0, r0, r9, lsl #29
     250:	asr	r1, r9, #3
     254:	mov	r2, r4
     258:	bl	0 <coda_str64>
     25c:	mvn	r0, #300	; 0x12c
     260:	str	r4, [sp]
     264:	add	r3, sp, #40	; 0x28
     268:	add	r2, sp, #8
     26c:	ldr	r1, [pc, #64]	; 2b4 <get_bit_size_boundary+0x2b4>
     270:	bl	0 <coda_set_error>
     274:	mvn	r0, #0
     278:	b	104 <get_bit_size_boundary+0x104>
     27c:	add	r0, sp, #8
     280:	bl	0 <strlen>
     284:	add	r3, sp, #8
     288:	and	r2, r4, #7
     28c:	ldr	r1, [pc, #24]	; 2ac <get_bit_size_boundary+0x2ac>
     290:	add	r0, r3, r0
     294:	bl	0 <sprintf>
     298:	b	204 <get_bit_size_boundary+0x204>
	...
     2a4:	.word	0x0000002c
     2a8:	.word	0x0000007c
     2ac:	.word	0x00000100
     2b0:	.word	0x00000104
     2b4:	.word	0x00000138

000002b8 <read_bytes>:
     2b8:	push	{r4, r5, r6, r7, r8, r9, lr}
     2bc:	sub	sp, sp, #84	; 0x54
     2c0:	ldr	r5, [r0, #48]	; 0x30
     2c4:	mov	r6, r2
     2c8:	cmp	r5, #0
     2cc:	mov	r7, r3
     2d0:	mov	r4, r0
     2d4:	ldrd	r2, [sp, #112]	; 0x70
     2d8:	beq	384 <read_bytes+0xcc>
     2dc:	ldrd	r8, [r0, #40]	; 0x28
     2e0:	adds	r0, r6, r2
     2e4:	adc	r1, r7, r3
     2e8:	cmp	r1, r9
     2ec:	cmpeq	r0, r8
     2f0:	bls	36c <read_bytes+0xb4>
     2f4:	ldr	r1, [r4, #16]
     2f8:	cmp	r1, #1
     2fc:	bls	354 <read_bytes+0x9c>
     300:	mov	r1, r3
     304:	mov	r0, r2
     308:	add	r2, sp, #8
     30c:	bl	0 <coda_str64>
     310:	add	r5, sp, #56	; 0x38
     314:	mov	r0, r6
     318:	mov	r1, r7
     31c:	add	r2, sp, #32
     320:	bl	0 <coda_str64>
     324:	ldrd	r0, [r4, #40]	; 0x28
     328:	mov	r2, r5
     32c:	bl	0 <coda_str64>
     330:	mvn	r0, #300	; 0x12c
     334:	str	r5, [sp]
     338:	add	r3, sp, #32
     33c:	add	r2, sp, #8
     340:	ldr	r1, [pc, #180]	; 3fc <read_bytes+0x144>
     344:	bl	0 <coda_set_error>
     348:	mvn	r0, #0
     34c:	add	sp, sp, #84	; 0x54
     350:	pop	{r4, r5, r6, r7, r8, r9, pc}
     354:	ldr	r1, [pc, #164]	; 400 <read_bytes+0x148>
     358:	mvn	r0, #300	; 0x12c
     35c:	bl	0 <coda_set_error>
     360:	mvn	r0, #0
     364:	add	sp, sp, #84	; 0x54
     368:	pop	{r4, r5, r6, r7, r8, r9, pc}
     36c:	add	r1, r5, r6
     370:	ldr	r0, [sp, #120]	; 0x78
     374:	bl	0 <memcpy>
     378:	mov	r0, #0
     37c:	add	sp, sp, #84	; 0x54
     380:	pop	{r4, r5, r6, r7, r8, r9, pc}
     384:	ldr	r1, [r0, #16]
     388:	cmp	r1, #1
     38c:	bhi	3e8 <read_bytes+0x130>
     390:	ldrd	r8, [r0, #8]
     394:	adds	r0, r6, r2
     398:	adc	r1, r7, r3
     39c:	cmp	r1, r9
     3a0:	cmpeq	r0, r8
     3a4:	bhi	354 <read_bytes+0x9c>
     3a8:	mov	r3, r6
     3ac:	ldr	r0, [r4, #56]	; 0x38
     3b0:	ldr	r1, [sp, #120]	; 0x78
     3b4:	bl	0 <pread>
     3b8:	cmp	r0, #0
     3bc:	movge	r0, r5
     3c0:	bge	34c <read_bytes+0x94>
     3c4:	bl	0 <__errno_location>
     3c8:	ldr	r0, [r0]
     3cc:	bl	0 <strerror>
     3d0:	ldr	r1, [pc, #44]	; 404 <read_bytes+0x14c>
     3d4:	mov	r2, r0
     3d8:	mvn	r0, #21
     3dc:	bl	0 <coda_set_error>
     3e0:	mvn	r0, #0
     3e4:	b	34c <read_bytes+0x94>
     3e8:	ldr	r3, [pc, #24]	; 408 <read_bytes+0x150>
     3ec:	mov	r2, #83	; 0x53
     3f0:	ldr	r1, [pc, #20]	; 40c <read_bytes+0x154>
     3f4:	ldr	r0, [pc, #20]	; 410 <read_bytes+0x158>
     3f8:	bl	0 <__assert_fail>
     3fc:	.word	0x00000138
     400:	.word	0x00000000
     404:	.word	0x00000214
     408:	.word	0x00000018
     40c:	.word	0x00000174
     410:	.word	0x000001c4

00000414 <read_partial_array>:
     414:	push	{r4, r5, r6, r7, r8, r9, lr}
     418:	sub	sp, sp, #524	; 0x20c
     41c:	mov	r6, r3
     420:	mov	r7, r1
     424:	mov	r4, r2
     428:	mov	r1, r0
     42c:	mov	r2, #520	; 0x208
     430:	mov	r0, sp
     434:	ldr	r8, [sp, #556]	; 0x22c
     438:	bl	0 <memcpy>
     43c:	cmp	r6, #0
     440:	ble	49c <read_partial_array+0x88>
     444:	mov	r1, r4
     448:	mov	r0, sp
     44c:	bl	0 <coda_cursor_goto_array_element_by_index>
     450:	subs	r4, r0, #0
     454:	subeq	r9, r6, #1
     458:	ldreq	r5, [sp, #552]	; 0x228
     45c:	bne	4a8 <read_partial_array+0x94>
     460:	mov	r1, r5
     464:	mov	r0, sp
     468:	blx	r7
     46c:	add	r5, r5, r8
     470:	cmp	r0, #0
     474:	mov	r0, sp
     478:	bne	4a8 <read_partial_array+0x94>
     47c:	cmp	r9, r4
     480:	add	r4, r4, #1
     484:	ble	494 <read_partial_array+0x80>
     488:	bl	0 <coda_cursor_goto_next_array_element>
     48c:	cmp	r0, #0
     490:	bne	4a8 <read_partial_array+0x94>
     494:	cmp	r6, r4
     498:	bne	460 <read_partial_array+0x4c>
     49c:	mov	r0, #0
     4a0:	add	sp, sp, #524	; 0x20c
     4a4:	pop	{r4, r5, r6, r7, r8, r9, pc}
     4a8:	mvn	r0, #0
     4ac:	add	sp, sp, #524	; 0x20c
     4b0:	pop	{r4, r5, r6, r7, r8, r9, pc}

000004b4 <transpose_array>:
     4b4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
     4b8:	sub	sp, sp, #172	; 0xac
     4bc:	add	r4, sp, #28
     4c0:	str	r1, [sp, #12]
     4c4:	mov	r7, r2
     4c8:	add	r1, sp, #24
     4cc:	mov	r2, r4
     4d0:	bl	0 <coda_cursor_get_array_dim>
     4d4:	subs	r3, r0, #0
     4d8:	str	r3, [sp, #16]
     4dc:	bne	5d0 <transpose_array+0x11c>
     4e0:	ldr	r8, [sp, #24]
     4e4:	cmp	r8, #1
     4e8:	ble	5d8 <transpose_array+0x124>
     4ec:	lsl	r2, r8, #2
     4f0:	mov	r9, r3
     4f4:	add	ip, sp, #96	; 0x60
     4f8:	add	r3, r4, r2
     4fc:	add	r0, sp, #132	; 0x84
     500:	mov	r1, r4
     504:	mov	r5, #1
     508:	ldr	lr, [r3, #-4]!
     50c:	ldr	r6, [r1], #4
     510:	cmp	r4, r3
     514:	str	r9, [ip], #4
     518:	mul	r5, r6, r5
     51c:	str	lr, [r0], #4
     520:	bne	508 <transpose_array+0x54>
     524:	cmp	r5, #1
     528:	ble	5d8 <transpose_array+0x124>
     52c:	add	r3, sp, #168	; 0xa8
     530:	lsl	r8, r8, #2
     534:	add	lr, r3, r8
     538:	mov	ip, #1
     53c:	add	r0, sp, #60	; 0x3c
     540:	add	r6, sp, #132	; 0x84
     544:	add	r4, r0, r2
     548:	mov	r1, ip
     54c:	mov	r3, ip
     550:	add	r2, r6, r2
     554:	str	ip, [lr, #-108]	; 0xffffff94
     558:	str	ip, [lr, #-36]	; 0xffffffdc
     55c:	b	564 <transpose_array+0xb0>
     560:	ldr	r1, [r2, #-4]!
     564:	mul	r3, r1, r3
     568:	str	r3, [r4, #-4]!
     56c:	cmp	r4, r0
     570:	bne	560 <transpose_array+0xac>
     574:	mul	r3, r7, r5
     578:	mov	r0, r3
     57c:	str	r3, [sp, #8]
     580:	add	r3, sp, #168	; 0xa8
     584:	add	r8, r3, r8
     588:	mov	r3, #0
     58c:	str	r3, [r8, #-36]	; 0xffffffdc
     590:	str	r3, [r8, #-72]	; 0xffffffb8
     594:	bl	0 <malloc>
     598:	subs	r6, r0, #0
     59c:	beq	858 <transpose_array+0x3a4>
     5a0:	sub	r7, r7, #1
     5a4:	cmp	r7, #7
     5a8:	ldrls	pc, [pc, r7, lsl #2]
     5ac:	b	844 <transpose_array+0x390>
     5b0:	.word	0x00000694
     5b4:	.word	0x00000728
     5b8:	.word	0x00000844
     5bc:	.word	0x000007b8
     5c0:	.word	0x00000844
     5c4:	.word	0x00000844
     5c8:	.word	0x00000844
     5cc:	.word	0x000005e4
     5d0:	mvn	r3, #0
     5d4:	str	r3, [sp, #16]
     5d8:	ldr	r0, [sp, #16]
     5dc:	add	sp, sp, #172	; 0xac
     5e0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
     5e4:	ldr	r2, [sp, #12]
     5e8:	mov	r3, #0
     5ec:	ldr	r8, [sp, #132]	; 0x84
     5f0:	ldr	r7, [sp, #60]	; 0x3c
     5f4:	add	r1, r2, r5, lsl #3
     5f8:	mov	r9, r2
     5fc:	mov	r5, r3
     600:	str	r1, [sp, #20]
     604:	ldr	ip, [sp, #96]	; 0x60
     608:	ldrd	r0, [r9], #8
     60c:	add	ip, ip, #1
     610:	lsl	r2, r3, #3
     614:	cmp	ip, r8
     618:	str	ip, [sp, #96]	; 0x60
     61c:	strd	r0, [r6, r2]
     620:	add	r3, r3, r7
     624:	bne	664 <transpose_array+0x1b0>
     628:	add	fp, sp, #132	; 0x84
     62c:	mov	sl, r4
     630:	add	r1, sp, #96	; 0x60
     634:	mov	lr, r7
     638:	mul	r0, lr, ip
     63c:	str	r5, [r1]
     640:	ldr	r2, [r1, #4]!
     644:	ldr	ip, [fp, #4]!
     648:	add	r2, r2, #1
     64c:	ldr	lr, [sl, #4]!
     650:	sub	r3, r3, r0
     654:	cmp	ip, r2
     658:	add	r3, r3, lr
     65c:	str	r2, [r1]
     660:	beq	638 <transpose_array+0x184>
     664:	ldr	r2, [sp, #20]
     668:	cmp	r9, r2
     66c:	bne	604 <transpose_array+0x150>
     670:	ldr	r2, [sp, #8]
     674:	mov	r1, r6
     678:	ldr	r0, [sp, #12]
     67c:	bl	0 <memcpy>
     680:	mov	r0, r6
     684:	bl	0 <free>
     688:	ldr	r0, [sp, #16]
     68c:	add	sp, sp, #172	; 0xac
     690:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
     694:	ldr	r3, [sp, #132]	; 0x84
     698:	ldr	r2, [sp, #12]
     69c:	mov	r9, #0
     6a0:	ldr	fp, [sp, #60]	; 0x3c
     6a4:	str	r3, [sp, #20]
     6a8:	mov	r8, r9
     6ac:	mov	r3, r9
     6b0:	sub	sl, r2, #1
     6b4:	ldr	ip, [sp, #96]	; 0x60
     6b8:	ldrb	r2, [sl, #1]!
     6bc:	ldr	r1, [sp, #20]
     6c0:	add	ip, ip, #1
     6c4:	cmp	ip, r1
     6c8:	strb	r2, [r6, r3]
     6cc:	str	ip, [sp, #96]	; 0x60
     6d0:	add	r3, r3, fp
     6d4:	bne	714 <transpose_array+0x260>
     6d8:	add	r7, sp, #132	; 0x84
     6dc:	mov	r5, r4
     6e0:	add	r0, sp, #96	; 0x60
     6e4:	mov	lr, fp
     6e8:	mul	r1, lr, ip
     6ec:	str	r8, [r0]
     6f0:	ldr	r2, [r0, #4]!
     6f4:	ldr	ip, [r7, #4]!
     6f8:	add	r2, r2, #1
     6fc:	ldr	lr, [r5, #4]!
     700:	sub	r3, r3, r1
     704:	cmp	ip, r2
     708:	add	r3, r3, lr
     70c:	str	r2, [r0]
     710:	beq	6e8 <transpose_array+0x234>
     714:	ldr	r2, [sp, #8]
     718:	add	r9, r9, #1
     71c:	cmp	r2, r9
     720:	bgt	6b4 <transpose_array+0x200>
     724:	b	670 <transpose_array+0x1bc>
     728:	ldr	r2, [sp, #12]
     72c:	mov	r3, #0
     730:	ldr	fp, [sp, #132]	; 0x84
     734:	ldr	sl, [sp, #60]	; 0x3c
     738:	mov	r8, r3
     73c:	mov	r9, r2
     740:	add	r1, r2, r5, lsl #1
     744:	str	r1, [sp, #20]
     748:	ldr	ip, [sp, #96]	; 0x60
     74c:	ldrh	r1, [r9], #2
     750:	add	ip, ip, #1
     754:	lsl	r2, r3, #1
     758:	cmp	ip, fp
     75c:	str	ip, [sp, #96]	; 0x60
     760:	strh	r1, [r6, r2]
     764:	add	r3, r3, sl
     768:	bne	7a8 <transpose_array+0x2f4>
     76c:	add	r7, sp, #132	; 0x84
     770:	mov	r5, r4
     774:	add	r0, sp, #96	; 0x60
     778:	mov	lr, sl
     77c:	mul	r1, lr, ip
     780:	str	r8, [r0]
     784:	ldr	r2, [r0, #4]!
     788:	ldr	ip, [r7, #4]!
     78c:	add	r2, r2, #1
     790:	ldr	lr, [r5, #4]!
     794:	sub	r3, r3, r1
     798:	cmp	ip, r2
     79c:	add	r3, r3, lr
     7a0:	str	r2, [r0]
     7a4:	beq	77c <transpose_array+0x2c8>
     7a8:	ldr	r2, [sp, #20]
     7ac:	cmp	r9, r2
     7b0:	bne	748 <transpose_array+0x294>
     7b4:	b	670 <transpose_array+0x1bc>
     7b8:	ldr	r2, [sp, #12]
     7bc:	mov	r3, #0
     7c0:	ldr	fp, [sp, #132]	; 0x84
     7c4:	ldr	sl, [sp, #60]	; 0x3c
     7c8:	mov	r8, r3
     7cc:	mov	r9, r2
     7d0:	add	r1, r2, r5, lsl #2
     7d4:	str	r1, [sp, #20]
     7d8:	ldr	ip, [sp, #96]	; 0x60
     7dc:	ldr	r2, [r9], #4
     7e0:	add	ip, ip, #1
     7e4:	cmp	ip, fp
     7e8:	str	r2, [r6, r3, lsl #2]
     7ec:	str	ip, [sp, #96]	; 0x60
     7f0:	add	r3, r3, sl
     7f4:	bne	834 <transpose_array+0x380>
     7f8:	add	r7, sp, #132	; 0x84
     7fc:	mov	r5, r4
     800:	add	r0, sp, #96	; 0x60
     804:	mov	lr, sl
     808:	mul	r1, lr, ip
     80c:	str	r8, [r0]
     810:	ldr	r2, [r0, #4]!
     814:	ldr	ip, [r7, #4]!
     818:	add	r2, r2, #1
     81c:	ldr	lr, [r5, #4]!
     820:	sub	r3, r3, r1
     824:	cmp	ip, r2
     828:	add	r3, r3, lr
     82c:	str	r2, [r0]
     830:	beq	808 <transpose_array+0x354>
     834:	ldr	r2, [sp, #20]
     838:	cmp	r2, r9
     83c:	bne	7d8 <transpose_array+0x324>
     840:	b	670 <transpose_array+0x1bc>
     844:	ldr	r3, [pc, #52]	; 880 <transpose_array+0x3cc>
     848:	mov	r2, #172	; 0xac
     84c:	ldr	r1, [pc, #48]	; 884 <transpose_array+0x3d0>
     850:	ldr	r0, [pc, #48]	; 888 <transpose_array+0x3d4>
     854:	bl	0 <__assert_fail>
     858:	mov	r3, #93	; 0x5d
     85c:	str	r3, [sp]
     860:	ldr	r2, [sp, #8]
     864:	ldr	r3, [pc, #24]	; 884 <transpose_array+0x3d0>
     868:	ldr	r1, [pc, #28]	; 88c <transpose_array+0x3d8>
     86c:	mvn	r0, #0
     870:	bl	0 <coda_set_error>
     874:	mvn	r3, #0
     878:	str	r3, [sp, #16]
     87c:	b	5d8 <transpose_array+0x124>
     880:	.word	0x00000024
     884:	.word	0x00000234
     888:	.word	0x000002c0
     88c:	.word	0x00000288

00000890 <parse_integer_mapping.isra.0>:
     890:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
     894:	subs	r9, r2, #0
     898:	ble	928 <parse_integer_mapping.isra.0+0x98>
     89c:	ldr	r7, [r3]
     8a0:	mov	r8, r1
     8a4:	mov	sl, r0
     8a8:	mov	r4, #0
     8ac:	sub	r7, r7, #4
     8b0:	b	8c4 <parse_integer_mapping.isra.0+0x34>
     8b4:	cmp	r8, #0
     8b8:	beq	914 <parse_integer_mapping.isra.0+0x84>
     8bc:	cmp	r4, r9
     8c0:	beq	928 <parse_integer_mapping.isra.0+0x98>
     8c4:	ldr	r6, [r7, #4]!
     8c8:	add	r4, r4, #1
     8cc:	ldr	r5, [r6]
     8d0:	cmp	r5, #0
     8d4:	beq	8b4 <parse_integer_mapping.isra.0+0x24>
     8d8:	cmp	r5, r8
     8dc:	mov	r2, r5
     8e0:	mov	r1, sl
     8e4:	bgt	8bc <parse_integer_mapping.isra.0+0x2c>
     8e8:	ldr	r0, [r6, #4]
     8ec:	bl	0 <memcmp>
     8f0:	cmp	r0, #0
     8f4:	bne	8bc <parse_integer_mapping.isra.0+0x2c>
     8f8:	cmp	r5, r8
     8fc:	ldr	r3, [sp, #32]
     900:	clz	r3, r3
     904:	lsr	r3, r3, #5
     908:	moveq	r3, #0
     90c:	cmp	r3, #0
     910:	bne	930 <parse_integer_mapping.isra.0+0xa0>
     914:	ldrd	r2, [r6, #8]
     918:	ldr	r1, [sp, #36]	; 0x24
     91c:	mov	r0, #1
     920:	strd	r2, [r1]
     924:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
     928:	mov	r0, #0
     92c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
     930:	ldr	r1, [pc, #12]	; 944 <parse_integer_mapping.isra.0+0xb4>
     934:	mvn	r0, #102	; 0x66
     938:	bl	0 <coda_set_error>
     93c:	mvn	r0, #0
     940:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
     944:	.word	0x000002c4

00000948 <read_bytes_in_bounds>:
     948:	push	{r4, lr}
     94c:	mov	r3, r2
     950:	ldr	r4, [r0, #48]	; 0x30
     954:	ldr	r2, [sp, #8]
     958:	cmp	r4, #0
     95c:	beq	974 <read_bytes_in_bounds+0x2c>
     960:	add	r1, r4, r3
     964:	ldr	r0, [sp, #16]
     968:	bl	0 <memcpy>
     96c:	mov	r0, #0
     970:	pop	{r4, pc}
     974:	ldr	r1, [r0, #16]
     978:	cmp	r1, #1
     97c:	bhi	9b8 <read_bytes_in_bounds+0x70>
     980:	ldr	r0, [r0, #56]	; 0x38
     984:	ldr	r1, [sp, #16]
     988:	bl	0 <pread>
     98c:	cmp	r0, #0
     990:	bge	96c <read_bytes_in_bounds+0x24>
     994:	bl	0 <__errno_location>
     998:	ldr	r0, [r0]
     99c:	bl	0 <strerror>
     9a0:	ldr	r1, [pc, #36]	; 9cc <read_bytes_in_bounds+0x84>
     9a4:	mov	r2, r0
     9a8:	mvn	r0, #21
     9ac:	bl	0 <coda_set_error>
     9b0:	mvn	r0, #0
     9b4:	pop	{r4, pc}
     9b8:	ldr	r3, [pc, #16]	; 9d0 <read_bytes_in_bounds+0x88>
     9bc:	mov	r2, #62	; 0x3e
     9c0:	ldr	r1, [pc, #12]	; 9d4 <read_bytes_in_bounds+0x8c>
     9c4:	ldr	r0, [pc, #12]	; 9d8 <read_bytes_in_bounds+0x90>
     9c8:	bl	0 <__assert_fail>
     9cc:	.word	0x00000214
     9d0:	.word	0x00000034
     9d4:	.word	0x000002e8
     9d8:	.word	0x000001c4

000009dc <coda_ascii_cursor_read_char>:
     9dc:	push	{r4, r5, r6, r7, r8, r9, lr}
     9e0:	sub	sp, sp, #28
     9e4:	mov	r7, r1
     9e8:	mov	r2, #8
     9ec:	mov	r3, #0
     9f0:	add	r1, sp, #16
     9f4:	mov	r6, r0
     9f8:	bl	0 <get_bit_size_boundary>
     9fc:	cmp	r0, #0
     a00:	bne	a4c <coda_ascii_cursor_read_char+0x70>
     a04:	ldr	r3, [r6, #4]
     a08:	lsl	r3, r3, #4
     a0c:	ldrd	r4, [r6, r3]
     a10:	mov	r3, #0
     a14:	and	r2, r4, #7
     a18:	orrs	r3, r2, r3
     a1c:	bne	a54 <coda_ascii_cursor_read_char+0x78>
     a20:	mov	r8, #1
     a24:	mov	r9, #0
     a28:	lsr	r2, r4, #3
     a2c:	ldr	r0, [r6]
     a30:	orr	r2, r2, r5, lsl #29
     a34:	str	r7, [sp, #8]
     a38:	strd	r8, [sp]
     a3c:	asr	r3, r5, #3
     a40:	bl	948 <read_bytes_in_bounds>
     a44:	add	sp, sp, #28
     a48:	pop	{r4, r5, r6, r7, r8, r9, pc}
     a4c:	mvn	r0, #0
     a50:	b	a44 <coda_ascii_cursor_read_char+0x68>
     a54:	sub	r0, r0, #300	; 0x12c
     a58:	ldr	r1, [pc, #8]	; a68 <coda_ascii_cursor_read_char+0x8c>
     a5c:	bl	0 <coda_set_error>
     a60:	mvn	r0, #0
     a64:	b	a44 <coda_ascii_cursor_read_char+0x68>
     a68:	.word	0x00000340

00000a6c <read_array.constprop.12>:
     a6c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
     a70:	sub	sp, sp, #560	; 0x230
     a74:	mov	r7, r1
     a78:	mov	r6, r2
     a7c:	add	r1, sp, #4
     a80:	add	r2, sp, #8
     a84:	mov	r8, r3
     a88:	mov	r4, r0
     a8c:	bl	0 <coda_cursor_get_array_dim>
     a90:	subs	r9, r0, #0
     a94:	bne	b38 <read_array.constprop.12+0xcc>
     a98:	mov	r1, r4
     a9c:	add	r0, sp, #40	; 0x28
     aa0:	mov	r2, #520	; 0x208
     aa4:	bl	0 <memcpy>
     aa8:	ldr	r1, [sp, #4]
     aac:	cmp	r1, #0
     ab0:	ble	b48 <read_array.constprop.12+0xdc>
     ab4:	add	r3, sp, #8
     ab8:	add	r1, r3, r1, lsl #2
     abc:	mov	r5, #1
     ac0:	ldr	r2, [r3], #4
     ac4:	cmp	r3, r1
     ac8:	mul	r5, r2, r5
     acc:	bne	ac0 <read_array.constprop.12+0x54>
     ad0:	cmp	r5, #0
     ad4:	ble	b2c <read_array.constprop.12+0xc0>
     ad8:	mov	r1, #0
     adc:	add	r0, sp, #40	; 0x28
     ae0:	bl	0 <coda_cursor_goto_array_element_by_index>
     ae4:	subs	r4, r0, #0
     ae8:	bne	b38 <read_array.constprop.12+0xcc>
     aec:	sub	sl, r5, #1
     af0:	mov	r1, r6
     af4:	add	r0, sp, #40	; 0x28
     af8:	blx	r7
     afc:	add	r6, r6, r8
     b00:	cmp	r0, #0
     b04:	add	r0, sp, #40	; 0x28
     b08:	bne	b38 <read_array.constprop.12+0xcc>
     b0c:	cmp	sl, r4
     b10:	add	r4, r4, #1
     b14:	ble	b24 <read_array.constprop.12+0xb8>
     b18:	bl	0 <coda_cursor_goto_next_array_element>
     b1c:	cmp	r0, #0
     b20:	bne	b38 <read_array.constprop.12+0xcc>
     b24:	cmp	r5, r4
     b28:	bgt	af0 <read_array.constprop.12+0x84>
     b2c:	mov	r0, r9
     b30:	add	sp, sp, #560	; 0x230
     b34:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
     b38:	mvn	r9, #0
     b3c:	mov	r0, r9
     b40:	add	sp, sp, #560	; 0x230
     b44:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
     b48:	mov	r5, #1
     b4c:	b	ad8 <read_array.constprop.12+0x6c>

00000b50 <coda_ascii_parse_int64>:
     b50:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
     b54:	sub	sp, sp, #20
     b58:	subs	fp, r1, #0
     b5c:	str	r2, [sp, #8]
     b60:	str	r3, [sp, #4]
     b64:	ble	d1c <coda_ascii_parse_int64+0x1cc>
     b68:	ldrb	r4, [r0]
     b6c:	cmp	r4, #9
     b70:	cmpne	r4, #32
     b74:	moveq	r3, #1
     b78:	movne	r3, #0
     b7c:	bne	d2c <coda_ascii_parse_int64+0x1dc>
     b80:	mov	r6, fp
     b84:	b	ba0 <coda_ascii_parse_int64+0x50>
     b88:	cmp	r3, #9
     b8c:	cmpne	r3, #32
     b90:	mov	r0, ip
     b94:	moveq	r2, #1
     b98:	movne	r2, #0
     b9c:	bne	cdc <coda_ascii_parse_int64+0x18c>
     ba0:	subs	r6, r6, #1
     ba4:	ldrb	r3, [r0, #1]
     ba8:	add	ip, r0, #1
     bac:	bne	b88 <coda_ascii_parse_int64+0x38>
     bb0:	sub	r2, r3, #43	; 0x2b
     bb4:	tst	r2, #253	; 0xfd
     bb8:	bne	d08 <coda_ascii_parse_int64+0x1b8>
     bbc:	sub	r3, r3, #45	; 0x2d
     bc0:	clz	r3, r3
     bc4:	lsr	r3, r3, #5
     bc8:	sub	r6, r6, #1
     bcc:	cmp	r6, #0
     bd0:	str	r3, [sp, #12]
     bd4:	add	ip, ip, #1
     bd8:	ble	d08 <coda_ascii_parse_int64+0x1b8>
     bdc:	ldrb	r4, [ip]
     be0:	sub	r4, r4, #48	; 0x30
     be4:	uxtb	r3, r4
     be8:	cmp	r3, #9
     bec:	bhi	d08 <coda_ascii_parse_int64+0x1b8>
     bf0:	add	ip, ip, #1
     bf4:	asr	r5, r4, #31
     bf8:	mov	r8, #0
     bfc:	mov	r9, #0
     c00:	mov	sl, #10
     c04:	b	c48 <coda_ascii_parse_int64+0xf8>
     c08:	ldrb	r1, [r7], #1
     c0c:	sub	r1, r1, #48	; 0x30
     c10:	mov	r4, r1
     c14:	asr	r5, r1, #31
     c18:	uxtb	r1, r1
     c1c:	cmp	r1, #9
     c20:	bhi	c6c <coda_ascii_parse_int64+0x11c>
     c24:	mvn	r0, #0
     c28:	subs	r0, r0, r4
     c2c:	mvn	r1, #-2147483648	; 0x80000000
     c30:	sbc	r1, r1, r5
     c34:	bl	0 <__aeabi_ldivmod>
     c38:	mov	ip, r7
     c3c:	cmp	r0, r8
     c40:	sbcs	r3, r1, r9
     c44:	blt	cf0 <coda_ascii_parse_int64+0x1a0>
     c48:	umull	r0, r1, r8, sl
     c4c:	mla	r1, sl, r9, r1
     c50:	adds	r8, r0, r4
     c54:	adc	r9, r1, r5
     c58:	subs	r6, r6, #1
     c5c:	mov	r2, #10
     c60:	mov	r3, #0
     c64:	mov	r7, ip
     c68:	bne	c08 <coda_ascii_parse_int64+0xb8>
     c6c:	cmp	r6, #0
     c70:	ldr	r3, [sp, #4]
     c74:	clz	r3, r3
     c78:	lsr	r3, r3, #5
     c7c:	moveq	r3, #0
     c80:	cmp	r3, #0
     c84:	beq	cb4 <coda_ascii_parse_int64+0x164>
     c88:	ldrb	r3, [ip]
     c8c:	cmp	r3, #32
     c90:	cmpne	r3, #9
     c94:	beq	cac <coda_ascii_parse_int64+0x15c>
     c98:	b	d60 <coda_ascii_parse_int64+0x210>
     c9c:	ldrb	r3, [ip, #1]!
     ca0:	cmp	r3, #9
     ca4:	cmpne	r3, #32
     ca8:	bne	d60 <coda_ascii_parse_int64+0x210>
     cac:	subs	r6, r6, #1
     cb0:	bne	c9c <coda_ascii_parse_int64+0x14c>
     cb4:	ldr	r3, [sp, #12]
     cb8:	cmp	r3, #0
     cbc:	beq	cc8 <coda_ascii_parse_int64+0x178>
     cc0:	rsbs	r8, r8, #0
     cc4:	rsc	r9, r9, #0
     cc8:	ldr	r3, [sp, #8]
     ccc:	sub	r0, fp, r6
     cd0:	strd	r8, [r3]
     cd4:	add	sp, sp, #20
     cd8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
     cdc:	sub	r1, r3, #43	; 0x2b
     ce0:	tst	r1, #253	; 0xfd
     ce4:	strne	r2, [sp, #12]
     ce8:	bne	bdc <coda_ascii_parse_int64+0x8c>
     cec:	b	bbc <coda_ascii_parse_int64+0x6c>
     cf0:	ldr	r1, [pc, #124]	; d74 <coda_ascii_parse_int64+0x224>
     cf4:	mvn	r0, #102	; 0x66
     cf8:	bl	0 <coda_set_error>
     cfc:	mvn	r0, #0
     d00:	add	sp, sp, #20
     d04:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
     d08:	mvn	r0, #102	; 0x66
     d0c:	ldr	r1, [pc, #100]	; d78 <coda_ascii_parse_int64+0x228>
     d10:	bl	0 <coda_set_error>
     d14:	mvn	r0, #0
     d18:	b	cd4 <coda_ascii_parse_int64+0x184>
     d1c:	ldrb	r3, [r0]
     d20:	mov	ip, r0
     d24:	mov	r6, fp
     d28:	b	bb0 <coda_ascii_parse_int64+0x60>
     d2c:	sub	r2, r4, #43	; 0x2b
     d30:	tst	r2, #253	; 0xfd
     d34:	bne	d50 <coda_ascii_parse_int64+0x200>
     d38:	sub	r3, r4, #45	; 0x2d
     d3c:	mov	ip, r0
     d40:	clz	r3, r3
     d44:	mov	r6, fp
     d48:	lsr	r3, r3, #5
     d4c:	b	bc8 <coda_ascii_parse_int64+0x78>
     d50:	mov	ip, r0
     d54:	str	r3, [sp, #12]
     d58:	mov	r6, fp
     d5c:	b	be0 <coda_ascii_parse_int64+0x90>
     d60:	mvn	r0, #102	; 0x66
     d64:	ldr	r1, [pc, #16]	; d7c <coda_ascii_parse_int64+0x22c>
     d68:	bl	0 <coda_set_error>
     d6c:	mvn	r0, #0
     d70:	b	cd4 <coda_ascii_parse_int64+0x184>
     d74:	.word	0x00000384
     d78:	.word	0x000003a8
     d7c:	.word	0x000002c4

00000d80 <coda_ascii_cursor_read_int64>:
     d80:	ldr	r3, [r0, #4]
     d84:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
     d88:	sub	r3, r3, #1
     d8c:	sub	sp, sp, #88	; 0x58
     d90:	add	r2, r0, r3, lsl #4
     d94:	add	ip, r0, r3, lsl #4
     d98:	ldr	r4, [r2, #8]
     d9c:	mov	r8, r1
     da0:	add	r1, sp, #16
     da4:	ldr	r2, [r4]
     da8:	mov	r5, r0
     dac:	cmp	r2, #99	; 0x63
     db0:	ldrd	r6, [ip, #16]
     db4:	ldrhi	r4, [r4, #4]
     db8:	ldrd	r2, [r4, #24]
     dbc:	bl	0 <get_bit_size_boundary>
     dc0:	subs	sl, r0, #0
     dc4:	bne	ed8 <coda_ascii_cursor_read_int64+0x158>
     dc8:	and	r2, r6, #7
     dcc:	mov	r3, #0
     dd0:	orrs	r3, r2, r3
     dd4:	bne	ecc <coda_ascii_cursor_read_int64+0x14c>
     dd8:	ldrd	r2, [r4, #24]
     ddc:	cmp	r2, #0
     de0:	sbcs	r1, r3, #0
     de4:	blt	e90 <coda_ascii_cursor_read_int64+0x110>
     de8:	lsr	r9, r2, #3
     dec:	orr	r9, r9, r3, lsl #29
     df0:	cmp	r9, #64	; 0x40
     df4:	bgt	ee0 <coda_ascii_cursor_read_int64+0x160>
     df8:	mov	r2, r9
     dfc:	asr	r3, r9, #31
     e00:	lsr	r1, r6, #3
     e04:	add	r6, sp, #24
     e08:	ldr	r0, [r5]
     e0c:	strd	r2, [sp]
     e10:	str	r6, [sp, #8]
     e14:	orr	r2, r1, r7, lsl #29
     e18:	asr	r3, r7, #3
     e1c:	bl	948 <read_bytes_in_bounds>
     e20:	subs	r5, r0, #0
     e24:	bne	ed8 <coda_ascii_cursor_read_int64+0x158>
     e28:	ldr	r3, [r4, #52]	; 0x34
     e2c:	cmp	r3, #0
     e30:	beq	e6c <coda_ascii_cursor_read_int64+0xec>
     e34:	ldr	r2, [r3, #8]
     e38:	mov	r1, r9
     e3c:	add	r3, r3, #12
     e40:	str	r8, [sp, #4]
     e44:	str	sl, [sp]
     e48:	mov	r0, r6
     e4c:	bl	890 <parse_integer_mapping.isra.0>
     e50:	cmp	r0, #0
     e54:	beq	e6c <coda_ascii_cursor_read_int64+0xec>
     e58:	cmp	r0, #1
     e5c:	mvnne	r5, #0
     e60:	mov	r0, r5
     e64:	add	sp, sp, #88	; 0x58
     e68:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
     e6c:	mov	r3, sl
     e70:	mov	r2, r8
     e74:	mov	r1, r9
     e78:	mov	r0, r6
     e7c:	bl	b50 <coda_ascii_parse_int64>
     e80:	asr	r5, r0, #31
     e84:	mov	r0, r5
     e88:	add	sp, sp, #88	; 0x58
     e8c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
     e90:	ldr	r0, [sp, #16]
     e94:	ldr	r1, [sp, #20]
     e98:	lsr	r2, r0, #3
     e9c:	orr	r2, r2, r1, lsl #29
     ea0:	asr	r3, r1, #3
     ea4:	cmp	r2, #64	; 0x40
     ea8:	sbcs	r1, r3, #0
     eac:	movlt	r9, r2
     eb0:	asrlt	r3, r2, #31
     eb4:	movlt	sl, #1
     eb8:	movge	r2, #64	; 0x40
     ebc:	movge	r3, #0
     ec0:	movge	sl, #1
     ec4:	movge	r9, #64	; 0x40
     ec8:	b	e00 <coda_ascii_cursor_read_int64+0x80>
     ecc:	ldr	r1, [pc, #32]	; ef4 <coda_ascii_cursor_read_int64+0x174>
     ed0:	mvn	r0, #21
     ed4:	bl	0 <coda_set_error>
     ed8:	mvn	r5, #0
     edc:	b	e60 <coda_ascii_cursor_read_int64+0xe0>
     ee0:	ldr	r3, [pc, #16]	; ef8 <coda_ascii_cursor_read_int64+0x178>
     ee4:	ldr	r2, [pc, #16]	; efc <coda_ascii_cursor_read_int64+0x17c>
     ee8:	ldr	r1, [pc, #16]	; f00 <coda_ascii_cursor_read_int64+0x180>
     eec:	ldr	r0, [pc, #16]	; f04 <coda_ascii_cursor_read_int64+0x184>
     ef0:	bl	0 <__assert_fail>
     ef4:	.word	0x000003d8
     ef8:	.word	0x0000004c
     efc:	.word	0x00000434
     f00:	.word	0x0000002c
     f04:	.word	0x00000410

00000f08 <coda_ascii_cursor_read_int8>:
     f08:	push	{r4, r6, r7, lr}
     f0c:	sub	sp, sp, #8
     f10:	mov	r4, r1
     f14:	mov	r1, sp
     f18:	bl	d80 <coda_ascii_cursor_read_int64>
     f1c:	cmp	r0, #0
     f20:	bne	f48 <coda_ascii_cursor_read_int8+0x40>
     f24:	ldrd	r2, [sp]
     f28:	adds	r6, r2, #128	; 0x80
     f2c:	adc	r7, r3, #0
     f30:	cmp	r7, #0
     f34:	cmpeq	r6, #255	; 0xff
     f38:	strbls	r2, [r4]
     f3c:	bhi	f50 <coda_ascii_cursor_read_int8+0x48>
     f40:	add	sp, sp, #8
     f44:	pop	{r4, r6, r7, pc}
     f48:	mvn	r0, #0
     f4c:	b	f40 <coda_ascii_cursor_read_int8+0x38>
     f50:	ldr	r0, [pc, #12]	; f64 <coda_ascii_cursor_read_int8+0x5c>
     f54:	ldr	r1, [pc, #12]	; f68 <coda_ascii_cursor_read_int8+0x60>
     f58:	bl	0 <coda_set_error>
     f5c:	mvn	r0, #0
     f60:	b	f40 <coda_ascii_cursor_read_int8+0x38>
     f64:	.word	0xfffffed4
     f68:	.word	0x00000438

00000f6c <coda_ascii_cursor_read_int16>:
     f6c:	push	{r4, r6, r7, r8, r9, lr}
     f70:	sub	sp, sp, #8
     f74:	mov	r4, r1
     f78:	mov	r1, sp
     f7c:	bl	d80 <coda_ascii_cursor_read_int64>
     f80:	cmp	r0, #0
     f84:	bne	fb4 <coda_ascii_cursor_read_int16+0x48>
     f88:	ldrd	r2, [sp]
     f8c:	ldr	r6, [pc, #60]	; fd0 <coda_ascii_cursor_read_int16+0x64>
     f90:	mov	r7, #0
     f94:	adds	r8, r2, #32768	; 0x8000
     f98:	adc	r9, r3, #0
     f9c:	cmp	r9, r7
     fa0:	cmpeq	r8, r6
     fa4:	strhls	r2, [r4]
     fa8:	bhi	fbc <coda_ascii_cursor_read_int16+0x50>
     fac:	add	sp, sp, #8
     fb0:	pop	{r4, r6, r7, r8, r9, pc}
     fb4:	mvn	r0, #0
     fb8:	b	fac <coda_ascii_cursor_read_int16+0x40>
     fbc:	ldr	r0, [pc, #16]	; fd4 <coda_ascii_cursor_read_int16+0x68>
     fc0:	ldr	r1, [pc, #16]	; fd8 <coda_ascii_cursor_read_int16+0x6c>
     fc4:	bl	0 <coda_set_error>
     fc8:	mvn	r0, #0
     fcc:	b	fac <coda_ascii_cursor_read_int16+0x40>
     fd0:	.word	0x0000ffff
     fd4:	.word	0xfffffed4
     fd8:	.word	0x0000047c

00000fdc <coda_ascii_cursor_read_int32>:
     fdc:	push	{r4, r6, r7, r8, r9, lr}
     fe0:	sub	sp, sp, #8
     fe4:	mov	r4, r1
     fe8:	mov	r1, sp
     fec:	bl	d80 <coda_ascii_cursor_read_int64>
     ff0:	cmp	r0, #0
     ff4:	bne	1024 <coda_ascii_cursor_read_int32+0x48>
     ff8:	ldrd	r2, [sp]
     ffc:	mov	r7, #0
    1000:	mvn	r6, #0
    1004:	adds	r8, r2, #-2147483648	; 0x80000000
    1008:	adc	r9, r3, #0
    100c:	cmp	r9, r7
    1010:	cmpeq	r8, r6
    1014:	strls	r2, [r4]
    1018:	bhi	102c <coda_ascii_cursor_read_int32+0x50>
    101c:	add	sp, sp, #8
    1020:	pop	{r4, r6, r7, r8, r9, pc}
    1024:	mvn	r0, #0
    1028:	b	101c <coda_ascii_cursor_read_int32+0x40>
    102c:	ldr	r0, [pc, #12]	; 1040 <coda_ascii_cursor_read_int32+0x64>
    1030:	ldr	r1, [pc, #12]	; 1044 <coda_ascii_cursor_read_int32+0x68>
    1034:	bl	0 <coda_set_error>
    1038:	mvn	r0, #0
    103c:	b	101c <coda_ascii_cursor_read_int32+0x40>
    1040:	.word	0xfffffed4
    1044:	.word	0x000004c4

00001048 <coda_ascii_parse_uint64>:
    1048:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    104c:	sub	sp, sp, #12
    1050:	subs	fp, r1, #0
    1054:	str	r2, [sp, #4]
    1058:	str	r3, [sp]
    105c:	ble	11cc <coda_ascii_parse_uint64+0x184>
    1060:	ldrb	r8, [r0]
    1064:	cmp	r8, #9
    1068:	cmpne	r8, #32
    106c:	bne	11dc <coda_ascii_parse_uint64+0x194>
    1070:	mov	r4, fp
    1074:	b	1088 <coda_ascii_parse_uint64+0x40>
    1078:	cmp	r3, #9
    107c:	cmpne	r3, #32
    1080:	mov	r0, lr
    1084:	bne	1194 <coda_ascii_parse_uint64+0x14c>
    1088:	subs	r4, r4, #1
    108c:	ldrb	r3, [r0, #1]
    1090:	add	lr, r0, #1
    1094:	bne	1078 <coda_ascii_parse_uint64+0x30>
    1098:	cmp	r3, #43	; 0x2b
    109c:	bne	11b8 <coda_ascii_parse_uint64+0x170>
    10a0:	sub	r4, r4, #1
    10a4:	cmp	r4, #0
    10a8:	add	lr, lr, #1
    10ac:	ble	11b8 <coda_ascii_parse_uint64+0x170>
    10b0:	ldrb	r8, [lr]
    10b4:	sub	r8, r8, #48	; 0x30
    10b8:	uxtb	r3, r8
    10bc:	cmp	r3, #9
    10c0:	bhi	11b8 <coda_ascii_parse_uint64+0x170>
    10c4:	add	lr, lr, #1
    10c8:	asr	r9, r8, #31
    10cc:	mov	r6, #0
    10d0:	mov	r7, #0
    10d4:	mov	sl, #10
    10d8:	b	1114 <coda_ascii_parse_uint64+0xcc>
    10dc:	ldrb	ip, [r5], #1
    10e0:	sub	ip, ip, #48	; 0x30
    10e4:	mov	r8, ip
    10e8:	asr	r9, ip, #31
    10ec:	mvn	r0, ip
    10f0:	uxtb	ip, ip
    10f4:	cmp	ip, #9
    10f8:	mvn	r1, r9
    10fc:	bhi	1138 <coda_ascii_parse_uint64+0xf0>
    1100:	bl	0 <__aeabi_uldivmod>
    1104:	mov	lr, r5
    1108:	cmp	r1, r7
    110c:	cmpeq	r0, r6
    1110:	bcc	11a0 <coda_ascii_parse_uint64+0x158>
    1114:	umull	r0, r1, r6, sl
    1118:	mla	r1, sl, r7, r1
    111c:	adds	r6, r0, r8
    1120:	adc	r7, r1, r9
    1124:	subs	r4, r4, #1
    1128:	mov	r2, #10
    112c:	mov	r3, #0
    1130:	mov	r5, lr
    1134:	bne	10dc <coda_ascii_parse_uint64+0x94>
    1138:	cmp	r4, #0
    113c:	ldr	r3, [sp]
    1140:	clz	r3, r3
    1144:	lsr	r3, r3, #5
    1148:	moveq	r3, #0
    114c:	cmp	r3, #0
    1150:	beq	1180 <coda_ascii_parse_uint64+0x138>
    1154:	ldrb	r3, [lr]
    1158:	cmp	r3, #9
    115c:	cmpne	r3, #32
    1160:	beq	1178 <coda_ascii_parse_uint64+0x130>
    1164:	b	11f0 <coda_ascii_parse_uint64+0x1a8>
    1168:	ldrb	r3, [lr, #1]!
    116c:	cmp	r3, #9
    1170:	cmpne	r3, #32
    1174:	bne	11f0 <coda_ascii_parse_uint64+0x1a8>
    1178:	subs	r4, r4, #1
    117c:	bne	1168 <coda_ascii_parse_uint64+0x120>
    1180:	ldr	r3, [sp, #4]
    1184:	sub	r0, fp, r4
    1188:	strd	r6, [r3]
    118c:	add	sp, sp, #12
    1190:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1194:	cmp	r3, #43	; 0x2b
    1198:	bne	10b0 <coda_ascii_parse_uint64+0x68>
    119c:	b	10a0 <coda_ascii_parse_uint64+0x58>
    11a0:	ldr	r1, [pc, #92]	; 1204 <coda_ascii_parse_uint64+0x1bc>
    11a4:	mvn	r0, #102	; 0x66
    11a8:	bl	0 <coda_set_error>
    11ac:	mvn	r0, #0
    11b0:	add	sp, sp, #12
    11b4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    11b8:	mvn	r0, #102	; 0x66
    11bc:	ldr	r1, [pc, #68]	; 1208 <coda_ascii_parse_uint64+0x1c0>
    11c0:	bl	0 <coda_set_error>
    11c4:	mvn	r0, #0
    11c8:	b	118c <coda_ascii_parse_uint64+0x144>
    11cc:	ldrb	r3, [r0]
    11d0:	mov	lr, r0
    11d4:	mov	r4, fp
    11d8:	b	1098 <coda_ascii_parse_uint64+0x50>
    11dc:	cmp	r8, #43	; 0x2b
    11e0:	mov	lr, r0
    11e4:	mov	r4, fp
    11e8:	bne	10b4 <coda_ascii_parse_uint64+0x6c>
    11ec:	b	10a0 <coda_ascii_parse_uint64+0x58>
    11f0:	mvn	r0, #102	; 0x66
    11f4:	ldr	r1, [pc, #16]	; 120c <coda_ascii_parse_uint64+0x1c4>
    11f8:	bl	0 <coda_set_error>
    11fc:	mvn	r0, #0
    1200:	b	118c <coda_ascii_parse_uint64+0x144>
    1204:	.word	0x00000384
    1208:	.word	0x000003a8
    120c:	.word	0x000002c4

00001210 <coda_ascii_cursor_read_uint64>:
    1210:	ldr	r3, [r0, #4]
    1214:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    1218:	sub	r3, r3, #1
    121c:	sub	sp, sp, #88	; 0x58
    1220:	add	r2, r0, r3, lsl #4
    1224:	add	ip, r0, r3, lsl #4
    1228:	ldr	r4, [r2, #8]
    122c:	mov	r8, r1
    1230:	add	r1, sp, #16
    1234:	ldr	r2, [r4]
    1238:	mov	r5, r0
    123c:	cmp	r2, #99	; 0x63
    1240:	ldrd	r6, [ip, #16]
    1244:	ldrhi	r4, [r4, #4]
    1248:	ldrd	r2, [r4, #24]
    124c:	bl	0 <get_bit_size_boundary>
    1250:	subs	sl, r0, #0
    1254:	bne	1368 <coda_ascii_cursor_read_uint64+0x158>
    1258:	and	r2, r6, #7
    125c:	mov	r3, #0
    1260:	orrs	r3, r2, r3
    1264:	bne	135c <coda_ascii_cursor_read_uint64+0x14c>
    1268:	ldrd	r2, [r4, #24]
    126c:	cmp	r2, #0
    1270:	sbcs	r1, r3, #0
    1274:	blt	1320 <coda_ascii_cursor_read_uint64+0x110>
    1278:	lsr	r9, r2, #3
    127c:	orr	r9, r9, r3, lsl #29
    1280:	cmp	r9, #64	; 0x40
    1284:	bgt	1370 <coda_ascii_cursor_read_uint64+0x160>
    1288:	mov	r2, r9
    128c:	asr	r3, r9, #31
    1290:	lsr	r1, r6, #3
    1294:	add	r6, sp, #24
    1298:	ldr	r0, [r5]
    129c:	strd	r2, [sp]
    12a0:	str	r6, [sp, #8]
    12a4:	orr	r2, r1, r7, lsl #29
    12a8:	asr	r3, r7, #3
    12ac:	bl	948 <read_bytes_in_bounds>
    12b0:	subs	r5, r0, #0
    12b4:	bne	1368 <coda_ascii_cursor_read_uint64+0x158>
    12b8:	ldr	r3, [r4, #52]	; 0x34
    12bc:	cmp	r3, #0
    12c0:	beq	12fc <coda_ascii_cursor_read_uint64+0xec>
    12c4:	ldr	r2, [r3, #8]
    12c8:	mov	r1, r9
    12cc:	add	r3, r3, #12
    12d0:	str	r8, [sp, #4]
    12d4:	str	sl, [sp]
    12d8:	mov	r0, r6
    12dc:	bl	890 <parse_integer_mapping.isra.0>
    12e0:	cmp	r0, #0
    12e4:	beq	12fc <coda_ascii_cursor_read_uint64+0xec>
    12e8:	cmp	r0, #1
    12ec:	mvnne	r5, #0
    12f0:	mov	r0, r5
    12f4:	add	sp, sp, #88	; 0x58
    12f8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    12fc:	mov	r3, sl
    1300:	mov	r2, r8
    1304:	mov	r1, r9
    1308:	mov	r0, r6
    130c:	bl	1048 <coda_ascii_parse_uint64>
    1310:	asr	r5, r0, #31
    1314:	mov	r0, r5
    1318:	add	sp, sp, #88	; 0x58
    131c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    1320:	ldr	r0, [sp, #16]
    1324:	ldr	r1, [sp, #20]
    1328:	lsr	r2, r0, #3
    132c:	orr	r2, r2, r1, lsl #29
    1330:	asr	r3, r1, #3
    1334:	cmp	r2, #64	; 0x40
    1338:	sbcs	r1, r3, #0
    133c:	movlt	r9, r2
    1340:	asrlt	r3, r2, #31
    1344:	movlt	sl, #1
    1348:	movge	r2, #64	; 0x40
    134c:	movge	r3, #0
    1350:	movge	sl, #1
    1354:	movge	r9, #64	; 0x40
    1358:	b	1290 <coda_ascii_cursor_read_uint64+0x80>
    135c:	ldr	r1, [pc, #32]	; 1384 <coda_ascii_cursor_read_uint64+0x174>
    1360:	mvn	r0, #21
    1364:	bl	0 <coda_set_error>
    1368:	mvn	r5, #0
    136c:	b	12f0 <coda_ascii_cursor_read_uint64+0xe0>
    1370:	ldr	r3, [pc, #16]	; 1388 <coda_ascii_cursor_read_uint64+0x178>
    1374:	ldr	r2, [pc, #16]	; 138c <coda_ascii_cursor_read_uint64+0x17c>
    1378:	ldr	r1, [pc, #16]	; 1390 <coda_ascii_cursor_read_uint64+0x180>
    137c:	ldr	r0, [pc, #16]	; 1394 <coda_ascii_cursor_read_uint64+0x184>
    1380:	bl	0 <__assert_fail>
    1384:	.word	0x000003d8
    1388:	.word	0x0000006c
    138c:	.word	0x00000471
    1390:	.word	0x0000002c
    1394:	.word	0x00000410

00001398 <coda_ascii_cursor_read_uint8>:
    1398:	push	{r4, lr}
    139c:	sub	sp, sp, #8
    13a0:	mov	r4, r1
    13a4:	mov	r1, sp
    13a8:	bl	1210 <coda_ascii_cursor_read_uint64>
    13ac:	cmp	r0, #0
    13b0:	bne	13d0 <coda_ascii_cursor_read_uint8+0x38>
    13b4:	ldrd	r2, [sp]
    13b8:	cmp	r3, #0
    13bc:	cmpeq	r2, #255	; 0xff
    13c0:	strbls	r2, [r4]
    13c4:	bhi	13d8 <coda_ascii_cursor_read_uint8+0x40>
    13c8:	add	sp, sp, #8
    13cc:	pop	{r4, pc}
    13d0:	mvn	r0, #0
    13d4:	b	13c8 <coda_ascii_cursor_read_uint8+0x30>
    13d8:	ldr	r0, [pc, #12]	; 13ec <coda_ascii_cursor_read_uint8+0x54>
    13dc:	ldr	r1, [pc, #12]	; 13f0 <coda_ascii_cursor_read_uint8+0x58>
    13e0:	bl	0 <coda_set_error>
    13e4:	mvn	r0, #0
    13e8:	b	13c8 <coda_ascii_cursor_read_uint8+0x30>
    13ec:	.word	0xfffffed4
    13f0:	.word	0x0000050c

000013f4 <coda_ascii_cursor_read_uint16>:
    13f4:	push	{r4, r6, r7, lr}
    13f8:	sub	sp, sp, #8
    13fc:	mov	r4, r1
    1400:	mov	r1, sp
    1404:	bl	1210 <coda_ascii_cursor_read_uint64>
    1408:	cmp	r0, #0
    140c:	bne	1434 <coda_ascii_cursor_read_uint16+0x40>
    1410:	ldrd	r2, [sp]
    1414:	ldr	r6, [pc, #52]	; 1450 <coda_ascii_cursor_read_uint16+0x5c>
    1418:	mov	r7, #0
    141c:	cmp	r3, r7
    1420:	cmpeq	r2, r6
    1424:	strhls	r2, [r4]
    1428:	bhi	143c <coda_ascii_cursor_read_uint16+0x48>
    142c:	add	sp, sp, #8
    1430:	pop	{r4, r6, r7, pc}
    1434:	mvn	r0, #0
    1438:	b	142c <coda_ascii_cursor_read_uint16+0x38>
    143c:	ldr	r0, [pc, #16]	; 1454 <coda_ascii_cursor_read_uint16+0x60>
    1440:	ldr	r1, [pc, #16]	; 1458 <coda_ascii_cursor_read_uint16+0x64>
    1444:	bl	0 <coda_set_error>
    1448:	mvn	r0, #0
    144c:	b	142c <coda_ascii_cursor_read_uint16+0x38>
    1450:	.word	0x0000ffff
    1454:	.word	0xfffffed4
    1458:	.word	0x00000554

0000145c <coda_ascii_cursor_read_uint32>:
    145c:	push	{r4, r6, r7, lr}
    1460:	sub	sp, sp, #8
    1464:	mov	r4, r1
    1468:	mov	r1, sp
    146c:	bl	1210 <coda_ascii_cursor_read_uint64>
    1470:	cmp	r0, #0
    1474:	bne	149c <coda_ascii_cursor_read_uint32+0x40>
    1478:	ldrd	r2, [sp]
    147c:	mov	r7, #0
    1480:	mvn	r6, #0
    1484:	cmp	r3, r7
    1488:	cmpeq	r2, r6
    148c:	strls	r2, [r4]
    1490:	bhi	14a4 <coda_ascii_cursor_read_uint32+0x48>
    1494:	add	sp, sp, #8
    1498:	pop	{r4, r6, r7, pc}
    149c:	mvn	r0, #0
    14a0:	b	1494 <coda_ascii_cursor_read_uint32+0x38>
    14a4:	ldr	r0, [pc, #12]	; 14b8 <coda_ascii_cursor_read_uint32+0x5c>
    14a8:	ldr	r1, [pc, #12]	; 14bc <coda_ascii_cursor_read_uint32+0x60>
    14ac:	bl	0 <coda_set_error>
    14b0:	mvn	r0, #0
    14b4:	b	1494 <coda_ascii_cursor_read_uint32+0x38>
    14b8:	.word	0xfffffed4
    14bc:	.word	0x0000059c

000014c0 <coda_ascii_parse_double>:
    14c0:	push	{r4, r5, r6, r7, r8, r9, lr}
    14c4:	subs	r7, r1, #0
    14c8:	sub	sp, sp, #12
    14cc:	ble	1508 <coda_ascii_parse_double+0x48>
    14d0:	ldrb	lr, [r0]
    14d4:	cmp	lr, #9
    14d8:	cmpne	lr, #32
    14dc:	bne	151c <coda_ascii_parse_double+0x5c>
    14e0:	add	r4, r0, #1
    14e4:	mov	ip, r7
    14e8:	b	14fc <coda_ascii_parse_double+0x3c>
    14ec:	ldrb	lr, [r4], #1
    14f0:	cmp	lr, #9
    14f4:	cmpne	lr, #32
    14f8:	bne	1520 <coda_ascii_parse_double+0x60>
    14fc:	subs	ip, ip, #1
    1500:	mov	r0, r4
    1504:	bne	14ec <coda_ascii_parse_double+0x2c>
    1508:	mvn	r0, #102	; 0x66
    150c:	ldr	r1, [pc, #996]	; 18f8 <coda_ascii_parse_double+0x438>
    1510:	bl	0 <coda_set_error>
    1514:	mvn	r0, #0
    1518:	b	1650 <coda_ascii_parse_double+0x190>
    151c:	mov	ip, r7
    1520:	sub	r1, lr, #43	; 0x2b
    1524:	tst	r1, #253	; 0xfd
    1528:	movne	r6, #0
    152c:	movne	lr, r6
    1530:	beq	1658 <coda_ascii_parse_double+0x198>
    1534:	cmp	ip, #2
    1538:	ble	1678 <coda_ascii_parse_double+0x1b8>
    153c:	ldrb	r1, [r0]
    1540:	and	r4, r1, #223	; 0xdf
    1544:	cmp	r4, #78	; 0x4e
    1548:	beq	1688 <coda_ascii_parse_double+0x1c8>
    154c:	cmp	r4, #73	; 0x49
    1550:	bne	1564 <coda_ascii_parse_double+0xa4>
    1554:	ldrb	lr, [r0, #1]
    1558:	and	lr, lr, #223	; 0xdf
    155c:	cmp	lr, #78	; 0x4e
    1560:	beq	1828 <coda_ascii_parse_double+0x368>
    1564:	sub	lr, r1, #48	; 0x30
    1568:	uxtb	r4, lr
    156c:	cmp	r4, #9
    1570:	bhi	18bc <coda_ascii_parse_double+0x3fc>
    1574:	vldr	d6, [pc, #868]	; 18e0 <coda_ascii_parse_double+0x420>
    1578:	vldr	d5, [pc, #872]	; 18e8 <coda_ascii_parse_double+0x428>
    157c:	add	r5, r0, #1
    1580:	b	159c <coda_ascii_parse_double+0xdc>
    1584:	ldrb	r1, [r5]
    1588:	add	r5, r4, #1
    158c:	sub	lr, r1, #48	; 0x30
    1590:	uxtb	r8, lr
    1594:	cmp	r8, #9
    1598:	bhi	16ec <coda_ascii_parse_double+0x22c>
    159c:	vmov	s15, lr
    15a0:	subs	ip, ip, #1
    15a4:	sub	r9, r5, r0
    15a8:	mov	r4, r5
    15ac:	vcvt.f64.s32	d7, s15
    15b0:	vmla.f64	d7, d6, d5
    15b4:	vmov.f64	d6, d7
    15b8:	bne	1584 <coda_ascii_parse_double+0xc4>
    15bc:	mov	r0, #0
    15c0:	cmp	r9, #0
    15c4:	beq	1508 <coda_ascii_parse_double+0x48>
    15c8:	cmp	r6, #0
    15cc:	vnegne.f64	d6, d6
    15d0:	cmp	ip, #0
    15d4:	beq	161c <coda_ascii_parse_double+0x15c>
    15d8:	ldrb	lr, [r4]
    15dc:	bic	r1, lr, #32
    15e0:	sub	r1, r1, #68	; 0x44
    15e4:	cmp	r1, #1
    15e8:	bls	1764 <coda_ascii_parse_double+0x2a4>
    15ec:	cmp	r3, #0
    15f0:	bne	161c <coda_ascii_parse_double+0x15c>
    15f4:	cmp	lr, #32
    15f8:	cmpne	lr, #9
    15fc:	beq	1614 <coda_ascii_parse_double+0x154>
    1600:	b	18a8 <coda_ascii_parse_double+0x3e8>
    1604:	ldrb	r3, [r4, #1]!
    1608:	cmp	r3, #9
    160c:	cmpne	r3, #32
    1610:	bne	18a8 <coda_ascii_parse_double+0x3e8>
    1614:	subs	ip, ip, #1
    1618:	bne	1604 <coda_ascii_parse_double+0x144>
    161c:	cmp	r0, #0
    1620:	beq	1648 <coda_ascii_parse_double+0x188>
    1624:	blt	1874 <coda_ascii_parse_double+0x3b4>
    1628:	vldr	d7, [pc, #704]	; 18f0 <coda_ascii_parse_double+0x430>
    162c:	vldr	d5, [pc, #692]	; 18e8 <coda_ascii_parse_double+0x428>
    1630:	sub	r0, r0, #1
    1634:	sub	r0, r0, #1
    1638:	cmn	r0, #1
    163c:	vmul.f64	d7, d7, d5
    1640:	bne	1634 <coda_ascii_parse_double+0x174>
    1644:	vmul.f64	d6, d6, d7
    1648:	vstr	d6, [r2]
    164c:	sub	r0, r7, ip
    1650:	add	sp, sp, #12
    1654:	pop	{r4, r5, r6, r7, r8, r9, pc}
    1658:	sub	ip, ip, #1
    165c:	cmp	ip, #2
    1660:	sub	r6, lr, #45	; 0x2d
    1664:	add	r0, r0, #1
    1668:	clz	r6, r6
    166c:	mov	lr, #1
    1670:	lsr	r6, r6, #5
    1674:	bgt	153c <coda_ascii_parse_double+0x7c>
    1678:	cmp	ip, #0
    167c:	beq	1508 <coda_ascii_parse_double+0x48>
    1680:	ldrb	r1, [r0]
    1684:	b	1564 <coda_ascii_parse_double+0xa4>
    1688:	ldrb	r4, [r0, #1]
    168c:	and	r4, r4, #223	; 0xdf
    1690:	cmp	r4, #65	; 0x41
    1694:	bne	1564 <coda_ascii_parse_double+0xa4>
    1698:	ldrb	r4, [r0, #2]
    169c:	eor	lr, lr, #1
    16a0:	and	r4, r4, #223	; 0xdf
    16a4:	cmp	r4, #78	; 0x4e
    16a8:	movne	lr, #0
    16ac:	andeq	lr, lr, #1
    16b0:	cmp	lr, #0
    16b4:	beq	1564 <coda_ascii_parse_double+0xa4>
    16b8:	cmp	ip, #3
    16bc:	clz	r3, r3
    16c0:	lsr	r3, r3, #5
    16c4:	moveq	r3, #0
    16c8:	cmp	r3, #0
    16cc:	sub	r4, ip, #3
    16d0:	bne	18a8 <coda_ascii_parse_double+0x3e8>
    16d4:	str	r2, [sp, #4]
    16d8:	bl	0 <coda_NaN>
    16dc:	ldr	r2, [sp, #4]
    16e0:	sub	r0, r7, r4
    16e4:	vstr	d0, [r2]
    16e8:	b	1650 <coda_ascii_parse_double+0x190>
    16ec:	cmp	r1, #46	; 0x2e
    16f0:	bne	15bc <coda_ascii_parse_double+0xfc>
    16f4:	mov	r8, r9
    16f8:	subs	ip, ip, #1
    16fc:	add	lr, r4, #1
    1700:	beq	18d4 <coda_ascii_parse_double+0x414>
    1704:	ldrb	r1, [r4, #1]
    1708:	sub	r1, r1, #48	; 0x30
    170c:	uxtb	r0, r1
    1710:	cmp	r0, #9
    1714:	bhi	18d4 <coda_ascii_parse_double+0x414>
    1718:	vldr	d5, [pc, #456]	; 18e8 <coda_ascii_parse_double+0x428>
    171c:	add	lr, r4, #2
    1720:	mov	r0, #0
    1724:	b	173c <coda_ascii_parse_double+0x27c>
    1728:	ldrb	r1, [lr], #1
    172c:	sub	r1, r1, #48	; 0x30
    1730:	uxtb	r5, r1
    1734:	cmp	r5, #9
    1738:	bhi	15c0 <coda_ascii_parse_double+0x100>
    173c:	vmov	s15, r1
    1740:	sub	r0, r0, #1
    1744:	subs	ip, ip, #1
    1748:	sub	r9, r8, r0
    174c:	vcvt.f64.s32	d7, s15
    1750:	mov	r4, lr
    1754:	vmla.f64	d7, d6, d5
    1758:	vmov.f64	d6, d7
    175c:	bne	1728 <coda_ascii_parse_double+0x268>
    1760:	b	15c0 <coda_ascii_parse_double+0x100>
    1764:	subs	r6, ip, #1
    1768:	beq	1814 <coda_ascii_parse_double+0x354>
    176c:	ldrb	r1, [r4, #1]
    1770:	sub	lr, r1, #43	; 0x2b
    1774:	tst	lr, #253	; 0xfd
    1778:	beq	17fc <coda_ascii_parse_double+0x33c>
    177c:	add	r5, r4, #1
    1780:	mov	ip, r6
    1784:	mov	r8, #0
    1788:	ldrb	r1, [r5]
    178c:	sub	r1, r1, #48	; 0x30
    1790:	uxtb	lr, r1
    1794:	cmp	lr, #9
    1798:	bhi	1814 <coda_ascii_parse_double+0x354>
    179c:	mov	lr, #0
    17a0:	b	17a8 <coda_ascii_parse_double+0x2e8>
    17a4:	mov	r5, r4
    17a8:	add	lr, lr, lr, lsl #2
    17ac:	subs	ip, ip, #1
    17b0:	add	lr, r1, lr, lsl #1
    17b4:	add	r4, r5, #1
    17b8:	beq	17d0 <coda_ascii_parse_double+0x310>
    17bc:	ldrb	r1, [r5, #1]
    17c0:	sub	r1, r1, #48	; 0x30
    17c4:	uxtb	r6, r1
    17c8:	cmp	r6, #9
    17cc:	bls	17a4 <coda_ascii_parse_double+0x2e4>
    17d0:	cmp	r8, #0
    17d4:	rsbne	lr, lr, #0
    17d8:	cmp	ip, #0
    17dc:	clz	r3, r3
    17e0:	lsr	r3, r3, #5
    17e4:	moveq	r3, #0
    17e8:	cmp	r3, #0
    17ec:	add	r0, r0, lr
    17f0:	beq	161c <coda_ascii_parse_double+0x15c>
    17f4:	ldrb	lr, [r5, #1]
    17f8:	b	15f4 <coda_ascii_parse_double+0x134>
    17fc:	subs	ip, ip, #2
    1800:	sub	r8, r1, #45	; 0x2d
    1804:	add	r5, r4, #2
    1808:	clz	r8, r8
    180c:	lsr	r8, r8, #5
    1810:	bne	1788 <coda_ascii_parse_double+0x2c8>
    1814:	mvn	r0, #102	; 0x66
    1818:	ldr	r1, [pc, #220]	; 18fc <coda_ascii_parse_double+0x43c>
    181c:	bl	0 <coda_set_error>
    1820:	mvn	r0, #0
    1824:	b	1650 <coda_ascii_parse_double+0x190>
    1828:	ldrb	lr, [r0, #2]
    182c:	and	lr, lr, #223	; 0xdf
    1830:	cmp	lr, #70	; 0x46
    1834:	bne	1564 <coda_ascii_parse_double+0xa4>
    1838:	cmp	ip, #3
    183c:	clz	r3, r3
    1840:	lsr	r3, r3, #5
    1844:	moveq	r3, #0
    1848:	cmp	r3, #0
    184c:	sub	r4, ip, #3
    1850:	bne	18a8 <coda_ascii_parse_double+0x3e8>
    1854:	cmp	r6, #0
    1858:	str	r2, [sp, #4]
    185c:	bne	189c <coda_ascii_parse_double+0x3dc>
    1860:	bl	0 <coda_PlusInf>
    1864:	ldr	r2, [sp, #4]
    1868:	vstr	d0, [r2]
    186c:	sub	r0, r7, r4
    1870:	b	1650 <coda_ascii_parse_double+0x190>
    1874:	vldr	d5, [pc, #116]	; 18f0 <coda_ascii_parse_double+0x430>
    1878:	vldr	d7, [pc, #104]	; 18e8 <coda_ascii_parse_double+0x428>
    187c:	add	r0, r0, #1
    1880:	add	r0, r0, #1
    1884:	cmp	r0, #1
    1888:	vmul.f64	d5, d5, d7
    188c:	bne	1880 <coda_ascii_parse_double+0x3c0>
    1890:	vldr	d4, [pc, #88]	; 18f0 <coda_ascii_parse_double+0x430>
    1894:	vdiv.f64	d7, d4, d5
    1898:	b	1644 <coda_ascii_parse_double+0x184>
    189c:	bl	0 <coda_MinInf>
    18a0:	ldr	r2, [sp, #4]
    18a4:	b	1868 <coda_ascii_parse_double+0x3a8>
    18a8:	mvn	r0, #102	; 0x66
    18ac:	ldr	r1, [pc, #76]	; 1900 <coda_ascii_parse_double+0x440>
    18b0:	bl	0 <coda_set_error>
    18b4:	mvn	r0, #0
    18b8:	b	1650 <coda_ascii_parse_double+0x190>
    18bc:	cmp	r1, #46	; 0x2e
    18c0:	bne	1508 <coda_ascii_parse_double+0x48>
    18c4:	vldr	d6, [pc, #20]	; 18e0 <coda_ascii_parse_double+0x420>
    18c8:	mov	r4, r0
    18cc:	mov	r8, #0
    18d0:	b	16f8 <coda_ascii_parse_double+0x238>
    18d4:	mov	r9, r8
    18d8:	mov	r4, lr
    18dc:	b	15bc <coda_ascii_parse_double+0xfc>
	...
    18ec:	.word	0x40240000
    18f0:	.word	0x00000000
    18f4:	.word	0x3ff00000
    18f8:	.word	0x00000614
    18fc:	.word	0x00000650
    1900:	.word	0x000005e4

00001904 <coda_ascii_cursor_read_double>:
    1904:	ldr	r3, [r0, #4]
    1908:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    190c:	sub	r3, r3, #1
    1910:	sub	sp, sp, #100	; 0x64
    1914:	add	r2, r0, r3, lsl #4
    1918:	add	ip, r0, r3, lsl #4
    191c:	ldr	r6, [r2, #8]
    1920:	mov	r9, r1
    1924:	add	r1, sp, #24
    1928:	ldr	r2, [r6]
    192c:	mov	sl, r0
    1930:	cmp	r2, #99	; 0x63
    1934:	ldrd	r4, [ip, #16]
    1938:	ldrhi	r6, [r6, #4]
    193c:	ldrd	r2, [r6, #24]
    1940:	bl	0 <get_bit_size_boundary>
    1944:	subs	r3, r0, #0
    1948:	str	r3, [sp, #20]
    194c:	bne	1abc <coda_ascii_cursor_read_double+0x1b8>
    1950:	and	r2, r4, #7
    1954:	mov	r3, #0
    1958:	orrs	r3, r2, r3
    195c:	bne	1ac4 <coda_ascii_cursor_read_double+0x1c0>
    1960:	ldrd	r2, [r6, #24]
    1964:	cmp	r2, #0
    1968:	sbcs	r1, r3, #0
    196c:	blt	1a6c <coda_ascii_cursor_read_double+0x168>
    1970:	lsr	r7, r2, #3
    1974:	orr	r7, r7, r3, lsl #29
    1978:	cmp	r7, #64	; 0x40
    197c:	bgt	1ad8 <coda_ascii_cursor_read_double+0x1d4>
    1980:	mov	r2, r7
    1984:	asr	r3, r7, #31
    1988:	ldr	r0, [sl]
    198c:	lsr	r1, r4, #3
    1990:	add	sl, sp, #32
    1994:	strd	r2, [sp]
    1998:	str	sl, [sp, #8]
    199c:	orr	r2, r1, r5, lsl #29
    19a0:	asr	r3, r5, #3
    19a4:	bl	948 <read_bytes_in_bounds>
    19a8:	subs	r4, r0, #0
    19ac:	bne	1abc <coda_ascii_cursor_read_double+0x1b8>
    19b0:	ldr	r2, [r6, #52]	; 0x34
    19b4:	cmp	r2, #0
    19b8:	beq	1a48 <coda_ascii_cursor_read_double+0x144>
    19bc:	ldr	r8, [r2, #8]
    19c0:	cmp	r8, #0
    19c4:	ble	1a48 <coda_ascii_cursor_read_double+0x144>
    19c8:	ldr	fp, [r2, #12]
    19cc:	sub	fp, fp, #4
    19d0:	b	19e8 <coda_ascii_cursor_read_double+0xe4>
    19d4:	cmp	r7, #0
    19d8:	beq	1a34 <coda_ascii_cursor_read_double+0x130>
    19dc:	add	r4, r4, #1
    19e0:	cmp	r8, r4
    19e4:	beq	1a48 <coda_ascii_cursor_read_double+0x144>
    19e8:	ldr	r6, [fp, #4]!
    19ec:	ldr	r5, [r6]
    19f0:	cmp	r5, #0
    19f4:	beq	19d4 <coda_ascii_cursor_read_double+0xd0>
    19f8:	cmp	r7, r5
    19fc:	blt	19dc <coda_ascii_cursor_read_double+0xd8>
    1a00:	mov	r2, r5
    1a04:	mov	r1, sl
    1a08:	ldr	r0, [r6, #4]
    1a0c:	bl	0 <memcmp>
    1a10:	cmp	r0, #0
    1a14:	bne	19dc <coda_ascii_cursor_read_double+0xd8>
    1a18:	ldr	r3, [sp, #20]
    1a1c:	eor	r8, r3, #1
    1a20:	cmp	r7, r5
    1a24:	moveq	r5, #0
    1a28:	andne	r5, r8, #1
    1a2c:	cmp	r5, #0
    1a30:	bne	1ab0 <coda_ascii_cursor_read_double+0x1ac>
    1a34:	ldrd	r2, [r6, #8]
    1a38:	mov	r0, r5
    1a3c:	strd	r2, [r9]
    1a40:	add	sp, sp, #100	; 0x64
    1a44:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1a48:	ldr	r3, [sp, #20]
    1a4c:	mov	r2, r9
    1a50:	mov	r1, r7
    1a54:	mov	r0, sl
    1a58:	bl	14c0 <coda_ascii_parse_double>
    1a5c:	asr	r5, r0, #31
    1a60:	mov	r0, r5
    1a64:	add	sp, sp, #100	; 0x64
    1a68:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1a6c:	ldr	r0, [sp, #24]
    1a70:	ldr	r1, [sp, #28]
    1a74:	lsr	r2, r0, #3
    1a78:	orr	r2, r2, r1, lsl #29
    1a7c:	asr	r3, r1, #3
    1a80:	cmp	r2, #64	; 0x40
    1a84:	sbcs	r1, r3, #0
    1a88:	movlt	r1, #1
    1a8c:	movge	r1, #1
    1a90:	movlt	r7, r2
    1a94:	asrlt	r3, r2, #31
    1a98:	strlt	r1, [sp, #20]
    1a9c:	movge	r2, #64	; 0x40
    1aa0:	movge	r3, #0
    1aa4:	strge	r1, [sp, #20]
    1aa8:	movge	r7, #64	; 0x40
    1aac:	b	1988 <coda_ascii_cursor_read_double+0x84>
    1ab0:	ldr	r1, [pc, #52]	; 1aec <coda_ascii_cursor_read_double+0x1e8>
    1ab4:	mvn	r0, #102	; 0x66
    1ab8:	bl	0 <coda_set_error>
    1abc:	mvn	r5, #0
    1ac0:	b	1a60 <coda_ascii_cursor_read_double+0x15c>
    1ac4:	ldr	r1, [pc, #36]	; 1af0 <coda_ascii_cursor_read_double+0x1ec>
    1ac8:	mvn	r0, #21
    1acc:	bl	0 <coda_set_error>
    1ad0:	mvn	r5, #0
    1ad4:	b	1a60 <coda_ascii_cursor_read_double+0x15c>
    1ad8:	ldr	r3, [pc, #20]	; 1af4 <coda_ascii_cursor_read_double+0x1f0>
    1adc:	ldr	r2, [pc, #20]	; 1af8 <coda_ascii_cursor_read_double+0x1f4>
    1ae0:	ldr	r1, [pc, #20]	; 1afc <coda_ascii_cursor_read_double+0x1f8>
    1ae4:	ldr	r0, [pc, #20]	; 1b00 <coda_ascii_cursor_read_double+0x1fc>
    1ae8:	bl	0 <__assert_fail>
    1aec:	.word	0x00000698
    1af0:	.word	0x000003d8
    1af4:	.word	0x0000008c
    1af8:	.word	0x0000051a
    1afc:	.word	0x0000002c
    1b00:	.word	0x00000410

00001b04 <coda_ascii_cursor_read_float>:
    1b04:	push	{r4, lr}
    1b08:	sub	sp, sp, #8
    1b0c:	mov	r4, r1
    1b10:	mov	r1, sp
    1b14:	bl	1904 <coda_ascii_cursor_read_double>
    1b18:	cmp	r0, #0
    1b1c:	mvnne	r0, #0
    1b20:	vldreq	d7, [sp]
    1b24:	vcvteq.f32.f64	s14, d7
    1b28:	vstreq	s14, [r4]
    1b2c:	add	sp, sp, #8
    1b30:	pop	{r4, pc}

00001b34 <coda_ascii_cursor_set_asciilines>:
    1b34:	ldr	r3, [r1, #68]	; 0x44
    1b38:	push	{r4, r5, r6, r7, r8, lr}
    1b3c:	cmp	r3, #0
    1b40:	mov	r5, r1
    1b44:	mov	r4, r0
    1b48:	beq	1b84 <coda_ascii_cursor_set_asciilines+0x50>
    1b4c:	ldr	r3, [r5, #76]	; 0x4c
    1b50:	cmp	r3, #0
    1b54:	beq	1b9c <coda_ascii_cursor_set_asciilines+0x68>
    1b58:	mov	r6, #0
    1b5c:	mov	r7, #0
    1b60:	mov	r1, #1
    1b64:	mvn	r2, #0
    1b68:	mov	r0, #0
    1b6c:	str	r5, [r4]
    1b70:	str	r3, [r4, #8]
    1b74:	strd	r6, [r4, #16]
    1b78:	str	r1, [r4, #4]
    1b7c:	str	r2, [r4, #12]
    1b80:	pop	{r4, r5, r6, r7, r8, pc}
    1b84:	mov	r0, r1
    1b88:	bl	0 <coda_ascii_init_asciilines>
    1b8c:	cmp	r0, #0
    1b90:	beq	1b4c <coda_ascii_cursor_set_asciilines+0x18>
    1b94:	mvn	r0, #0
    1b98:	pop	{r4, r5, r6, r7, r8, pc}
    1b9c:	mov	r0, r3
    1ba0:	bl	0 <coda_type_array_new>
    1ba4:	subs	r6, r0, #0
    1ba8:	beq	1b94 <coda_ascii_cursor_set_asciilines+0x60>
    1bac:	ldr	r1, [r5, #64]	; 0x40
    1bb0:	bl	0 <coda_type_array_add_fixed_dimension>
    1bb4:	cmp	r0, #0
    1bb8:	bne	1c04 <coda_ascii_cursor_set_asciilines+0xd0>
    1bbc:	bl	0 <coda_type_text_new>
    1bc0:	subs	r7, r0, #0
    1bc4:	beq	1c04 <coda_ascii_cursor_set_asciilines+0xd0>
    1bc8:	mov	r1, #2
    1bcc:	bl	0 <coda_type_text_set_special_text_type>
    1bd0:	mov	r1, r7
    1bd4:	mov	r0, r6
    1bd8:	bl	0 <coda_type_array_set_base_type>
    1bdc:	cmp	r0, #0
    1be0:	moveq	r3, r6
    1be4:	streq	r6, [r5, #76]	; 0x4c
    1be8:	beq	1b58 <coda_ascii_cursor_set_asciilines+0x24>
    1bec:	mov	r0, r6
    1bf0:	bl	0 <coda_type_release>
    1bf4:	mov	r0, r7
    1bf8:	bl	0 <coda_type_release>
    1bfc:	mvn	r0, #0
    1c00:	pop	{r4, r5, r6, r7, r8, pc}
    1c04:	mov	r0, r6
    1c08:	bl	0 <coda_type_release>
    1c0c:	b	1b94 <coda_ascii_cursor_set_asciilines+0x60>

00001c10 <coda_ascii_cursor_get_num_elements>:
    1c10:	ldr	r3, [r0, #4]
    1c14:	add	r3, r0, r3, lsl #4
    1c18:	ldr	r3, [r3, #-8]
    1c1c:	ldr	r2, [r3]
    1c20:	cmp	r2, #99	; 0x63
    1c24:	ldrhi	r3, [r3, #4]
    1c28:	ldr	r3, [r3, #8]
    1c2c:	cmp	r3, #1
    1c30:	bls	1c44 <coda_ascii_cursor_get_num_elements+0x34>
    1c34:	mov	r3, #1
    1c38:	str	r3, [r1]
    1c3c:	mov	r0, #0
    1c40:	bx	lr
    1c44:	b	0 <coda_ascbin_cursor_get_num_elements>

00001c48 <coda_ascii_cursor_read_bits>:
    1c48:	push	{r4, r5, r6, r7, lr}
    1c4c:	sub	sp, sp, #20
    1c50:	mov	r5, #0
    1c54:	ldrd	r6, [sp, #40]	; 0x28
    1c58:	and	r4, r6, #7
    1c5c:	orrs	ip, r4, r5
    1c60:	bne	1cd4 <coda_ascii_cursor_read_bits+0x8c>
    1c64:	mov	r5, r3
    1c68:	ldr	r3, [r0, #4]
    1c6c:	mov	r4, r2
    1c70:	lsl	r3, r3, #4
    1c74:	ldrd	r2, [r3, r0]
    1c78:	adds	r4, r4, r2
    1c7c:	adc	r5, r5, r3
    1c80:	and	r2, r4, #7
    1c84:	mov	r3, #0
    1c88:	orrs	r3, r2, r3
    1c8c:	bne	1cc0 <coda_ascii_cursor_read_bits+0x78>
    1c90:	lsr	r3, r6, #3
    1c94:	orr	r3, r3, r7, lsl #29
    1c98:	asr	ip, r7, #3
    1c9c:	lsr	r2, r4, #3
    1ca0:	ldr	r0, [r0]
    1ca4:	orr	r2, r2, r5, lsl #29
    1ca8:	stm	sp, {r3, ip}
    1cac:	str	r1, [sp, #8]
    1cb0:	asr	r3, r5, #3
    1cb4:	bl	2b8 <read_bytes>
    1cb8:	add	sp, sp, #20
    1cbc:	pop	{r4, r5, r6, r7, pc}
    1cc0:	ldr	r0, [pc, #32]	; 1ce8 <coda_ascii_cursor_read_bits+0xa0>
    1cc4:	ldr	r1, [pc, #32]	; 1cec <coda_ascii_cursor_read_bits+0xa4>
    1cc8:	bl	0 <coda_set_error>
    1ccc:	mvn	r0, #0
    1cd0:	b	1cb8 <coda_ascii_cursor_read_bits+0x70>
    1cd4:	mvn	r0, #99	; 0x63
    1cd8:	ldr	r1, [pc, #16]	; 1cf0 <coda_ascii_cursor_read_bits+0xa8>
    1cdc:	bl	0 <coda_set_error>
    1ce0:	mvn	r0, #0
    1ce4:	b	1cb8 <coda_ascii_cursor_read_bits+0x70>
    1ce8:	.word	0xfffffed4
    1cec:	.word	0x00000340
    1cf0:	.word	0x000006b8

00001cf4 <coda_ascii_cursor_read_bytes>:
    1cf4:	ldr	ip, [r0, #4]
    1cf8:	push	{r4, r5, r6, r7, lr}
    1cfc:	mov	r5, #0
    1d00:	lsl	ip, ip, #4
    1d04:	sub	sp, sp, #20
    1d08:	ldrd	r6, [r0, ip]
    1d0c:	and	r4, r6, #7
    1d10:	orrs	ip, r4, r5
    1d14:	bne	1d48 <coda_ascii_cursor_read_bytes+0x54>
    1d18:	lsr	r4, r6, #3
    1d1c:	orr	r4, r4, r7, lsl #29
    1d20:	asr	r5, r7, #3
    1d24:	ldrd	r6, [sp, #40]	; 0x28
    1d28:	adds	r2, r2, r4
    1d2c:	ldr	r0, [r0]
    1d30:	adc	r3, r3, r5
    1d34:	str	r1, [sp, #8]
    1d38:	strd	r6, [sp]
    1d3c:	bl	2b8 <read_bytes>
    1d40:	add	sp, sp, #20
    1d44:	pop	{r4, r5, r6, r7, pc}
    1d48:	ldr	r0, [pc, #12]	; 1d5c <coda_ascii_cursor_read_bytes+0x68>
    1d4c:	ldr	r1, [pc, #12]	; 1d60 <coda_ascii_cursor_read_bytes+0x6c>
    1d50:	bl	0 <coda_set_error>
    1d54:	mvn	r0, #0
    1d58:	b	1d40 <coda_ascii_cursor_read_bytes+0x4c>
    1d5c:	.word	0xfffffed4
    1d60:	.word	0x00000340

00001d64 <coda_ascii_cursor_get_bit_size>:
    1d64:	ldr	r3, [r0, #4]
    1d68:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1d6c:	sub	r3, r3, #1
    1d70:	sub	sp, sp, #652	; 0x28c
    1d74:	add	r2, r0, r3, lsl #4
    1d78:	ldr	r7, [r2, #8]
    1d7c:	ldr	r2, [r7]
    1d80:	cmp	r2, #99	; 0x63
    1d84:	ldrhi	r7, [r7, #4]
    1d88:	ldrd	r4, [r7, #24]
    1d8c:	cmp	r4, #0
    1d90:	sbcs	r2, r5, #0
    1d94:	blt	1dac <coda_ascii_cursor_get_bit_size+0x48>
    1d98:	mov	r9, #0
    1d9c:	strd	r4, [r1]
    1da0:	mov	r0, r9
    1da4:	add	sp, sp, #652	; 0x28c
    1da8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1dac:	ldr	r2, [r7, #8]
    1db0:	str	r1, [sp, #20]
    1db4:	cmp	r2, #1
    1db8:	mov	fp, r0
    1dbc:	bls	1fc0 <coda_ascii_cursor_get_bit_size+0x25c>
    1dc0:	add	ip, r3, #1
    1dc4:	add	r1, sp, #56	; 0x38
    1dc8:	add	lr, r0, ip, lsl #4
    1dcc:	mvn	r2, #0
    1dd0:	mvn	r3, #0
    1dd4:	ldr	r4, [lr, #4]
    1dd8:	ldr	r5, [r0, ip, lsl #4]
    1ddc:	bl	0 <get_bit_size_boundary>
    1de0:	subs	r9, r0, #0
    1de4:	bne	2134 <coda_ascii_cursor_get_bit_size+0x3d0>
    1de8:	ldr	r3, [r7, #8]
    1dec:	sub	r2, r3, #2
    1df0:	cmp	r2, #1
    1df4:	bls	1ea0 <coda_ascii_cursor_get_bit_size+0x13c>
    1df8:	cmp	r3, #4
    1dfc:	beq	1e74 <coda_ascii_cursor_get_bit_size+0x110>
    1e00:	cmp	r3, #6
    1e04:	beq	23d0 <coda_ascii_cursor_get_bit_size+0x66c>
    1e08:	ldr	r0, [r7, #32]
    1e0c:	mvn	r8, #0
    1e10:	cmp	r0, #0
    1e14:	beq	1fe4 <coda_ascii_cursor_get_bit_size+0x280>
    1e18:	ldr	r2, [sp, #20]
    1e1c:	mov	r1, fp
    1e20:	bl	0 <coda_expression_eval_integer>
    1e24:	cmp	r0, #0
    1e28:	bne	25ac <coda_ascii_cursor_get_bit_size+0x848>
    1e2c:	ldrd	r0, [r7, #24]
    1e30:	mvn	r3, #0
    1e34:	mvn	r2, #7
    1e38:	cmp	r1, r3
    1e3c:	cmpeq	r0, r2
    1e40:	beq	2410 <coda_ascii_cursor_get_bit_size+0x6ac>
    1e44:	ldr	r3, [sp, #20]
    1e48:	ldrd	r2, [r3]
    1e4c:	cmp	r2, #0
    1e50:	sbcs	r1, r3, #0
    1e54:	bge	1da0 <coda_ascii_cursor_get_bit_size+0x3c>
    1e58:	ldr	r1, [pc, #2340]	; 2784 <coda_ascii_cursor_get_bit_size+0xa20>
    1e5c:	ldr	r0, [pc, #2340]	; 2788 <coda_ascii_cursor_get_bit_size+0xa24>
    1e60:	bl	0 <coda_set_error>
    1e64:	mov	r0, fp
    1e68:	bl	0 <coda_cursor_add_to_error_message>
    1e6c:	mvn	r9, #0
    1e70:	b	1da0 <coda_ascii_cursor_get_bit_size+0x3c>
    1e74:	ldr	r0, [r7, #32]
    1e78:	cmp	r0, #0
    1e7c:	bne	1e0c <coda_ascii_cursor_get_bit_size+0xa8>
    1e80:	ldr	r3, [r7, #44]	; 0x2c
    1e84:	cmp	r3, #0
    1e88:	strne	r9, [sp, #24]
    1e8c:	bne	1eb0 <coda_ascii_cursor_get_bit_size+0x14c>
    1e90:	ldrd	r2, [sp, #56]	; 0x38
    1e94:	ldr	r1, [sp, #20]
    1e98:	strd	r2, [r1]
    1e9c:	b	1da0 <coda_ascii_cursor_get_bit_size+0x3c>
    1ea0:	ldr	r3, [r7, #52]	; 0x34
    1ea4:	cmp	r3, #0
    1ea8:	str	r3, [sp, #24]
    1eac:	beq	2444 <coda_ascii_cursor_get_bit_size+0x6e0>
    1eb0:	ldr	r0, [sp, #56]	; 0x38
    1eb4:	ldr	r1, [sp, #60]	; 0x3c
    1eb8:	ldr	ip, [fp]
    1ebc:	lsr	r2, r0, #3
    1ec0:	orr	r2, r2, r1, lsl #29
    1ec4:	asr	r3, r1, #3
    1ec8:	cmp	r2, #64	; 0x40
    1ecc:	sbcs	r1, r3, #0
    1ed0:	movlt	r0, r2
    1ed4:	movge	r0, #64	; 0x40
    1ed8:	asrlt	r1, r0, #31
    1edc:	movge	r1, #0
    1ee0:	movlt	r8, r2
    1ee4:	strd	r0, [sp]
    1ee8:	lsr	r2, r5, #3
    1eec:	add	r1, sp, #64	; 0x40
    1ef0:	asr	r3, r4, #3
    1ef4:	orr	r2, r2, r4, lsl #29
    1ef8:	mov	r0, ip
    1efc:	str	r1, [sp, #8]
    1f00:	movge	r8, #64	; 0x40
    1f04:	bl	948 <read_bytes_in_bounds>
    1f08:	subs	r3, r0, #0
    1f0c:	str	r3, [sp, #32]
    1f10:	bne	2134 <coda_ascii_cursor_get_bit_size+0x3d0>
    1f14:	ldr	r3, [sp, #24]
    1f18:	cmp	r3, #0
    1f1c:	beq	2430 <coda_ascii_cursor_get_bit_size+0x6cc>
    1f20:	ldr	r3, [sp, #24]
    1f24:	ldr	sl, [r3, #8]
    1f28:	cmp	sl, #0
    1f2c:	ble	1f9c <coda_ascii_cursor_get_bit_size+0x238>
    1f30:	ldr	r6, [r3, #12]
    1f34:	ldr	r4, [sp, #32]
    1f38:	sub	r6, r6, #4
    1f3c:	b	1f54 <coda_ascii_cursor_get_bit_size+0x1f0>
    1f40:	cmp	r8, #0
    1f44:	beq	1fcc <coda_ascii_cursor_get_bit_size+0x268>
    1f48:	add	r4, r4, #1
    1f4c:	cmp	r4, sl
    1f50:	beq	1f9c <coda_ascii_cursor_get_bit_size+0x238>
    1f54:	ldr	r3, [r6, #4]!
    1f58:	ldr	r5, [r3]
    1f5c:	cmp	r5, #0
    1f60:	beq	1f40 <coda_ascii_cursor_get_bit_size+0x1dc>
    1f64:	cmp	r5, r8
    1f68:	bgt	1f48 <coda_ascii_cursor_get_bit_size+0x1e4>
    1f6c:	ldr	r0, [r3, #4]
    1f70:	mov	r2, r5
    1f74:	add	r1, sp, #64	; 0x40
    1f78:	bl	0 <memcmp>
    1f7c:	cmp	r0, #0
    1f80:	bne	1f48 <coda_ascii_cursor_get_bit_size+0x1e4>
    1f84:	lsl	r2, r5, #3
    1f88:	ldr	r1, [sp, #20]
    1f8c:	asr	r3, r2, #31
    1f90:	mov	r9, r0
    1f94:	strd	r2, [r1]
    1f98:	b	1da0 <coda_ascii_cursor_get_bit_size+0x3c>
    1f9c:	ldr	r3, [sp, #24]
    1fa0:	ldrd	r2, [r3]
    1fa4:	cmp	r2, #0
    1fa8:	sbcs	r1, r3, #0
    1fac:	blt	2430 <coda_ascii_cursor_get_bit_size+0x6cc>
    1fb0:	ldr	r1, [sp, #20]
    1fb4:	ldr	r9, [sp, #32]
    1fb8:	strd	r2, [r1]
    1fbc:	b	1da0 <coda_ascii_cursor_get_bit_size+0x3c>
    1fc0:	bl	0 <coda_ascbin_cursor_get_bit_size>
    1fc4:	mov	r9, r0
    1fc8:	b	1da0 <coda_ascii_cursor_get_bit_size+0x3c>
    1fcc:	ldr	r1, [sp, #20]
    1fd0:	mov	r2, #0
    1fd4:	mov	r3, #0
    1fd8:	mov	r9, r8
    1fdc:	strd	r2, [r1]
    1fe0:	b	1da0 <coda_ascii_cursor_get_bit_size+0x3c>
    1fe4:	sub	r2, r3, #2
    1fe8:	cmp	r2, #1
    1fec:	bls	201c <coda_ascii_cursor_get_bit_size+0x2b8>
    1ff0:	cmp	r3, #4
    1ff4:	bne	26bc <coda_ascii_cursor_get_bit_size+0x958>
    1ff8:	ldr	r1, [r7, #44]	; 0x2c
    1ffc:	cmp	r1, #4
    2000:	ldrls	pc, [pc, r1, lsl #2]
    2004:	b	1da0 <coda_ascii_cursor_get_bit_size+0x3c>
    2008:	.word	0x000022b4
    200c:	.word	0x00002284
    2010:	.word	0x0000213c
    2014:	.word	0x0000213c
    2018:	.word	0x00002074
    201c:	ldr	r2, [r7, #12]
    2020:	cmp	r2, #9
    2024:	bhi	2704 <coda_ascii_cursor_get_bit_size+0x9a0>
    2028:	mov	r3, #1
    202c:	lsl	r2, r3, r2
    2030:	tst	r2, #170	; 0xaa
    2034:	bne	2494 <coda_ascii_cursor_get_bit_size+0x730>
    2038:	tst	r2, #85	; 0x55
    203c:	bne	256c <coda_ascii_cursor_get_bit_size+0x808>
    2040:	tst	r2, #768	; 0x300
    2044:	beq	2704 <coda_ascii_cursor_get_bit_size+0x9a0>
    2048:	mov	r1, r8
    204c:	add	r2, sp, #128	; 0x80
    2050:	add	r0, sp, #64	; 0x40
    2054:	bl	14c0 <coda_ascii_parse_double>
    2058:	cmp	r0, #0
    205c:	blt	2134 <coda_ascii_cursor_get_bit_size+0x3d0>
    2060:	lsl	r2, r0, #3
    2064:	ldr	r1, [sp, #20]
    2068:	asr	r3, r2, #31
    206c:	strd	r2, [r1]
    2070:	b	1da0 <coda_ascii_cursor_get_bit_size+0x3c>
    2074:	ldr	r3, [fp, #4]
    2078:	mov	r5, #0
    207c:	lsl	r3, r3, #4
    2080:	ldrd	r6, [fp, r3]
    2084:	and	r4, r6, #7
    2088:	orrs	r3, r4, r5
    208c:	bne	272c <coda_ascii_cursor_get_bit_size+0x9c8>
    2090:	lsr	r3, r6, #3
    2094:	ldr	r0, [fp]
    2098:	orr	r3, r3, r7, lsl #29
    209c:	asr	r1, r7, #3
    20a0:	str	r3, [sp, #24]
    20a4:	str	r1, [sp, #28]
    20a8:	ldrd	r2, [r0, #8]
    20ac:	ldrd	r6, [sp, #24]
    20b0:	subs	r6, r2, r6
    20b4:	sbc	r7, r3, r7
    20b8:	cmp	r6, #1
    20bc:	sbcs	r1, r7, #0
    20c0:	mov	r2, r6
    20c4:	mov	r3, r7
    20c8:	blt	2478 <coda_ascii_cursor_get_bit_size+0x714>
    20cc:	str	r9, [sp, #32]
    20d0:	mov	r7, fp
    20d4:	add	r6, sp, #128	; 0x80
    20d8:	ldrd	r8, [sp, #24]
    20dc:	mov	sl, r2
    20e0:	mov	fp, r3
    20e4:	b	2110 <coda_ascii_cursor_get_bit_size+0x3ac>
    20e8:	ldrb	r3, [sp, #128]	; 0x80
    20ec:	cmp	r3, #32
    20f0:	cmpne	r3, #9
    20f4:	bne	2474 <coda_ascii_cursor_get_bit_size+0x710>
    20f8:	adds	r4, r4, #1
    20fc:	adc	r5, r5, #0
    2100:	cmp	fp, r5
    2104:	cmpeq	sl, r4
    2108:	beq	2474 <coda_ascii_cursor_get_bit_size+0x710>
    210c:	ldr	r0, [r7]
    2110:	mov	r2, #1
    2114:	mov	r3, #0
    2118:	str	r6, [sp, #8]
    211c:	strd	r2, [sp]
    2120:	adds	r2, r8, r4
    2124:	adc	r3, r9, r5
    2128:	bl	948 <read_bytes_in_bounds>
    212c:	cmp	r0, #0
    2130:	beq	20e8 <coda_ascii_cursor_get_bit_size+0x384>
    2134:	mvn	r9, #0
    2138:	b	1da0 <coda_ascii_cursor_get_bit_size+0x3c>
    213c:	ldr	r0, [fp]
    2140:	ldr	r3, [r0, #16]
    2144:	cmp	r3, #0
    2148:	ldr	r3, [fp, #4]
    214c:	lsl	r3, r3, #4
    2150:	bne	24a8 <coda_ascii_cursor_get_bit_size+0x744>
    2154:	ldrd	r2, [r3, fp]
    2158:	mov	r5, #0
    215c:	and	r4, r2, #7
    2160:	orrs	r3, r4, r5
    2164:	bne	2718 <coda_ascii_cursor_get_bit_size+0x9b4>
    2168:	ldr	r3, [r0, #68]	; 0x44
    216c:	cmp	r3, #0
    2170:	beq	26a8 <coda_ascii_cursor_get_bit_size+0x944>
    2174:	ldr	ip, [r0, #64]	; 0x40
    2178:	cmp	ip, #0
    217c:	beq	26f0 <coda_ascii_cursor_get_bit_size+0x98c>
    2180:	ldr	r3, [fp, #4]
    2184:	sub	ip, ip, #1
    2188:	ldr	r6, [r0, #68]	; 0x44
    218c:	add	r1, fp, r3, lsl #4
    2190:	ldr	r2, [fp, r3, lsl #4]
    2194:	ldr	r3, [r1, #4]
    2198:	mov	r8, ip
    219c:	lsr	r2, r2, #3
    21a0:	orr	r2, r2, r3, lsl #29
    21a4:	asr	r3, r3, #3
    21a8:	mov	r4, r2
    21ac:	mov	r5, r3
    21b0:	mov	r1, #0
    21b4:	mov	lr, r9
    21b8:	cmp	r1, r8
    21bc:	beq	221c <coda_ascii_cursor_get_bit_size+0x4b8>
    21c0:	add	r2, r1, r8
    21c4:	add	r2, r2, r2, lsr #31
    21c8:	asr	r2, r2, #1
    21cc:	ldr	sl, [r6, r2, lsl #2]
    21d0:	cmp	r4, sl
    21d4:	asr	fp, sl, #31
    21d8:	sbcs	r3, r5, fp
    21dc:	movge	sl, r2
    21e0:	movge	r2, r8
    21e4:	blt	2214 <coda_ascii_cursor_get_bit_size+0x4b0>
    21e8:	b	2560 <coda_ascii_cursor_get_bit_size+0x7fc>
    21ec:	add	r3, r1, r2
    21f0:	add	r3, r3, r3, lsr #31
    21f4:	asr	r3, r3, #1
    21f8:	mov	sl, r3
    21fc:	ldr	r8, [r6, r3, lsl #2]
    2200:	cmp	r4, r8
    2204:	asr	r9, r8, #31
    2208:	sbcs	r8, r5, r9
    220c:	bge	2560 <coda_ascii_cursor_get_bit_size+0x7fc>
    2210:	mov	r2, r3
    2214:	cmp	r1, r2
    2218:	bne	21ec <coda_ascii_cursor_get_bit_size+0x488>
    221c:	ldr	r3, [r6, r1, lsl #2]
    2220:	mov	r9, lr
    2224:	subs	r4, r3, r4
    2228:	rsc	r5, r5, r3, asr #31
    222c:	ldr	lr, [r7, #44]	; 0x2c
    2230:	ldr	r3, [sp, #20]
    2234:	lsl	r7, r5, #3
    2238:	orr	r7, r7, r4, lsr #29
    223c:	lsl	r6, r4, #3
    2240:	cmp	lr, #3
    2244:	strd	r6, [r3]
    2248:	bne	1da0 <coda_ascii_cursor_get_bit_size+0x3c>
    224c:	cmp	r1, ip
    2250:	beq	2634 <coda_ascii_cursor_get_bit_size+0x8d0>
    2254:	ldr	ip, [r0, #60]	; 0x3c
    2258:	ldr	r3, [sp, #20]
    225c:	subs	r0, r6, #8
    2260:	sbc	r1, r7, #0
    2264:	cmp	ip, #3
    2268:	strd	r0, [r3]
    226c:	bne	1da0 <coda_ascii_cursor_get_bit_size+0x3c>
    2270:	subs	r2, r6, #16
    2274:	ldr	r1, [sp, #20]
    2278:	sbc	r3, r7, #0
    227c:	strd	r2, [r1]
    2280:	b	1da0 <coda_ascii_cursor_get_bit_size+0x3c>
    2284:	ldr	r3, [fp]
    2288:	ldr	r2, [r3, #16]
    228c:	cmp	r2, #0
    2290:	bne	2750 <coda_ascii_cursor_get_bit_size+0x9ec>
    2294:	ldr	r3, [r3, #60]	; 0x3c
    2298:	cmp	r3, #3
    229c:	ldrls	pc, [pc, r3, lsl #2]
    22a0:	b	1da0 <coda_ascii_cursor_get_bit_size+0x3c>
    22a4:	.word	0x000022f0
    22a8:	.word	0x000022dc
    22ac:	.word	0x000022dc
    22b0:	.word	0x000022c8
    22b4:	ldr	r3, [pc, #1232]	; 278c <coda_ascii_cursor_get_bit_size+0xa28>
    22b8:	ldr	r2, [pc, #1232]	; 2790 <coda_ascii_cursor_get_bit_size+0xa2c>
    22bc:	ldr	r1, [pc, #1232]	; 2794 <coda_ascii_cursor_get_bit_size+0xa30>
    22c0:	ldr	r0, [pc, #1232]	; 2798 <coda_ascii_cursor_get_bit_size+0xa34>
    22c4:	bl	0 <__assert_fail>
    22c8:	ldr	r1, [sp, #20]
    22cc:	mov	r2, #16
    22d0:	mov	r3, #0
    22d4:	strd	r2, [r1]
    22d8:	b	1da0 <coda_ascii_cursor_get_bit_size+0x3c>
    22dc:	ldr	r1, [sp, #20]
    22e0:	mov	r2, #8
    22e4:	mov	r3, #0
    22e8:	strd	r2, [r1]
    22ec:	b	1da0 <coda_ascii_cursor_get_bit_size+0x3c>
    22f0:	ldr	r3, [fp, #4]
    22f4:	mov	r1, #0
    22f8:	lsl	r3, r3, #4
    22fc:	ldrd	r2, [r3, fp]
    2300:	and	r0, r2, #7
    2304:	orrs	r3, r0, r1
    2308:	bne	26e0 <coda_ascii_cursor_get_bit_size+0x97c>
    230c:	mov	r4, #1
    2310:	mov	r5, #0
    2314:	mov	r2, r0
    2318:	mov	r3, r1
    231c:	strd	r4, [sp]
    2320:	add	r1, sp, #52	; 0x34
    2324:	mov	r0, fp
    2328:	bl	1cf4 <coda_ascii_cursor_read_bytes>
    232c:	subs	r9, r0, #0
    2330:	bne	2134 <coda_ascii_cursor_get_bit_size+0x3d0>
    2334:	ldrb	r3, [sp, #52]	; 0x34
    2338:	cmp	r3, #10
    233c:	beq	2614 <coda_ascii_cursor_get_bit_size+0x8b0>
    2340:	cmp	r3, #13
    2344:	bne	25dc <coda_ascii_cursor_get_bit_size+0x878>
    2348:	ldr	r3, [fp, #4]
    234c:	ldr	ip, [fp]
    2350:	add	r2, fp, r3, lsl #4
    2354:	ldr	r6, [fp, r3, lsl #4]
    2358:	ldr	lr, [r2, #4]
    235c:	ldrd	r2, [ip, #8]
    2360:	lsr	r0, r6, #3
    2364:	orr	r0, r0, lr, lsl #29
    2368:	subs	r2, r2, r0
    236c:	asr	r1, lr, #3
    2370:	sbc	r3, r3, r1
    2374:	mov	r7, r3
    2378:	cmp	r2, #2
    237c:	sbcs	r3, r7, #0
    2380:	blt	23b4 <coda_ascii_cursor_get_bit_size+0x650>
    2384:	strd	r4, [sp]
    2388:	mov	r2, r4
    238c:	mov	r3, r5
    2390:	add	r1, sp, #52	; 0x34
    2394:	mov	r0, fp
    2398:	bl	1cf4 <coda_ascii_cursor_read_bytes>
    239c:	cmp	r0, #0
    23a0:	bne	2134 <coda_ascii_cursor_get_bit_size+0x3d0>
    23a4:	ldrb	r3, [sp, #52]	; 0x34
    23a8:	cmp	r3, #10
    23ac:	ldrne	ip, [fp]
    23b0:	beq	2764 <coda_ascii_cursor_get_bit_size+0xa00>
    23b4:	ldr	r2, [sp, #20]
    23b8:	mov	r0, #8
    23bc:	mov	r1, #0
    23c0:	mov	r3, #2
    23c4:	strd	r0, [r2]
    23c8:	str	r3, [ip, #60]	; 0x3c
    23cc:	b	1da0 <coda_ascii_cursor_get_bit_size+0x3c>
    23d0:	ldr	r3, [r7, #40]	; 0x28
    23d4:	cmp	r3, #2
    23d8:	beq	2454 <coda_ascii_cursor_get_bit_size+0x6f0>
    23dc:	mov	r1, fp
    23e0:	mov	r2, #520	; 0x208
    23e4:	add	r0, sp, #128	; 0x80
    23e8:	bl	0 <memcpy>
    23ec:	add	r0, sp, #128	; 0x80
    23f0:	bl	0 <coda_cursor_use_base_type_of_special_type>
    23f4:	cmp	r0, #0
    23f8:	bne	2134 <coda_ascii_cursor_get_bit_size+0x3d0>
    23fc:	ldr	r1, [sp, #20]
    2400:	add	r0, sp, #128	; 0x80
    2404:	bl	0 <coda_cursor_get_bit_size>
    2408:	mov	r9, r0
    240c:	b	1da0 <coda_ascii_cursor_get_bit_size+0x3c>
    2410:	ldr	ip, [sp, #20]
    2414:	ldr	r0, [ip, #4]
    2418:	ldr	r1, [ip]
    241c:	lsl	r3, r0, #3
    2420:	orr	r3, r3, r1, lsr #29
    2424:	lsl	r2, r1, #3
    2428:	strd	r2, [ip]
    242c:	b	1e4c <coda_ascii_cursor_get_bit_size+0xe8>
    2430:	ldr	r3, [r7, #8]
    2434:	cmp	r3, #6
    2438:	ldrne	r0, [r7, #32]
    243c:	bne	1e10 <coda_ascii_cursor_get_bit_size+0xac>
    2440:	b	23dc <coda_ascii_cursor_get_bit_size+0x678>
    2444:	ldr	r0, [r7, #32]
    2448:	cmp	r0, #0
    244c:	bne	1e18 <coda_ascii_cursor_get_bit_size+0xb4>
    2450:	b	1eb0 <coda_ascii_cursor_get_bit_size+0x14c>
    2454:	ldr	r3, [r7, #44]	; 0x2c
    2458:	ldr	r2, [r3, #8]
    245c:	cmp	r2, #4
    2460:	bne	273c <coda_ascii_cursor_get_bit_size+0x9d8>
    2464:	ldr	r3, [r3, #44]	; 0x2c
    2468:	cmp	r3, #0
    246c:	bne	23dc <coda_ascii_cursor_get_bit_size+0x678>
    2470:	b	1e90 <coda_ascii_cursor_get_bit_size+0x12c>
    2474:	ldr	r9, [sp, #32]
    2478:	ldr	r2, [sp, #20]
    247c:	lsl	r3, r5, #3
    2480:	orr	r3, r3, r4, lsr #29
    2484:	lsl	r4, r4, #3
    2488:	str	r3, [r2, #4]
    248c:	str	r4, [r2]
    2490:	b	1da0 <coda_ascii_cursor_get_bit_size+0x3c>
    2494:	mov	r1, r8
    2498:	add	r2, sp, #128	; 0x80
    249c:	add	r0, sp, #64	; 0x40
    24a0:	bl	1048 <coda_ascii_parse_uint64>
    24a4:	b	2058 <coda_ascii_cursor_get_bit_size+0x2f4>
    24a8:	ldrd	r4, [fp, r3]
    24ac:	mov	r3, #0
    24b0:	and	r2, r4, #7
    24b4:	strd	r2, [sp, #40]	; 0x28
    24b8:	orrs	r3, r2, r3
    24bc:	bne	26d0 <coda_ascii_cursor_get_bit_size+0x96c>
    24c0:	lsr	r3, r4, #3
    24c4:	orr	r3, r3, r5, lsl #29
    24c8:	str	r3, [sp, #32]
    24cc:	asr	r3, r5, #3
    24d0:	str	r3, [sp, #36]	; 0x24
    24d4:	ldrd	r4, [r0, #8]
    24d8:	ldrd	r2, [sp, #32]
    24dc:	subs	r4, r4, r2
    24e0:	sbc	r5, r5, r3
    24e4:	cmp	r4, #1
    24e8:	sbcs	ip, r5, #0
    24ec:	strd	r4, [sp, #24]
    24f0:	ldrd	r4, [sp, #40]	; 0x28
    24f4:	blt	2588 <coda_ascii_cursor_get_bit_size+0x824>
    24f8:	mov	sl, r9
    24fc:	add	r6, sp, #128	; 0x80
    2500:	mov	r8, r2
    2504:	mov	r9, r3
    2508:	b	2538 <coda_ascii_cursor_get_bit_size+0x7d4>
    250c:	ldrb	r3, [sp, #128]	; 0x80
    2510:	cmp	r3, #10
    2514:	cmpne	r3, #13
    2518:	beq	2580 <coda_ascii_cursor_get_bit_size+0x81c>
    251c:	ldrd	r2, [sp, #24]
    2520:	adds	r4, r4, #1
    2524:	adc	r5, r5, #0
    2528:	cmp	r3, r5
    252c:	cmpeq	r2, r4
    2530:	beq	2580 <coda_ascii_cursor_get_bit_size+0x81c>
    2534:	ldr	r0, [fp]
    2538:	mov	r2, #1
    253c:	mov	r3, #0
    2540:	str	r6, [sp, #8]
    2544:	strd	r2, [sp]
    2548:	adds	r2, r8, r4
    254c:	adc	r3, r9, r5
    2550:	bl	948 <read_bytes_in_bounds>
    2554:	cmp	r0, #0
    2558:	beq	250c <coda_ascii_cursor_get_bit_size+0x7a8>
    255c:	b	2134 <coda_ascii_cursor_get_bit_size+0x3d0>
    2560:	add	r1, sl, #1
    2564:	mov	r8, r2
    2568:	b	21b8 <coda_ascii_cursor_get_bit_size+0x454>
    256c:	mov	r1, r8
    2570:	add	r2, sp, #128	; 0x80
    2574:	add	r0, sp, #64	; 0x40
    2578:	bl	b50 <coda_ascii_parse_int64>
    257c:	b	2058 <coda_ascii_cursor_get_bit_size+0x2f4>
    2580:	ldr	r1, [r7, #44]	; 0x2c
    2584:	mov	r9, sl
    2588:	cmp	r1, #2
    258c:	beq	25c4 <coda_ascii_cursor_get_bit_size+0x860>
    2590:	ldr	r2, [sp, #20]
    2594:	lsl	r3, r5, #3
    2598:	orr	r3, r3, r4, lsr #29
    259c:	lsl	sl, r4, #3
    25a0:	str	r3, [r2, #4]
    25a4:	str	sl, [r2]
    25a8:	b	1da0 <coda_ascii_cursor_get_bit_size+0x3c>
    25ac:	ldr	r0, [pc, #488]	; 279c <coda_ascii_cursor_get_bit_size+0xa38>
    25b0:	bl	0 <coda_add_error_message>
    25b4:	mov	r0, fp
    25b8:	bl	0 <coda_cursor_add_to_error_message>
    25bc:	mvn	r9, #0
    25c0:	b	1da0 <coda_ascii_cursor_get_bit_size+0x3c>
    25c4:	ldrb	r3, [sp, #128]	; 0x80
    25c8:	cmp	r3, #13
    25cc:	beq	2644 <coda_ascii_cursor_get_bit_size+0x8e0>
    25d0:	adds	r4, r4, #1
    25d4:	adc	r5, r5, #0
    25d8:	b	2590 <coda_ascii_cursor_get_bit_size+0x82c>
    25dc:	ldr	r3, [fp, #4]
    25e0:	add	r2, sp, #128	; 0x80
    25e4:	add	r1, fp, r3, lsl #4
    25e8:	ldr	r0, [fp, r3, lsl #4]
    25ec:	ldr	r1, [r1, #4]
    25f0:	lsr	r0, r0, #3
    25f4:	orr	r0, r0, r1, lsl #29
    25f8:	asr	r1, r1, #3
    25fc:	bl	0 <coda_str64>
    2600:	add	r2, sp, #128	; 0x80
    2604:	ldr	r1, [pc, #404]	; 27a0 <coda_ascii_cursor_get_bit_size+0xa3c>
    2608:	ldr	r0, [pc, #376]	; 2788 <coda_ascii_cursor_get_bit_size+0xa24>
    260c:	bl	0 <coda_set_error>
    2610:	b	2134 <coda_ascii_cursor_get_bit_size+0x3d0>
    2614:	ldr	r3, [fp]
    2618:	ldr	ip, [sp, #20]
    261c:	mov	r0, #8
    2620:	mov	r1, #0
    2624:	mov	r2, #1
    2628:	strd	r0, [ip]
    262c:	str	r2, [r3, #60]	; 0x3c
    2630:	b	1da0 <coda_ascii_cursor_get_bit_size+0x3c>
    2634:	ldr	r1, [r0, #72]	; 0x48
    2638:	cmp	r1, #0
    263c:	bne	2254 <coda_ascii_cursor_get_bit_size+0x4f0>
    2640:	b	1da0 <coda_ascii_cursor_get_bit_size+0x3c>
    2644:	ldrd	r2, [sp, #24]
    2648:	adds	r6, r4, #1
    264c:	adc	r7, r5, #0
    2650:	cmp	r6, r2
    2654:	sbcs	r3, r7, r3
    2658:	bge	25d0 <coda_ascii_cursor_get_bit_size+0x86c>
    265c:	ldrd	r2, [sp, #32]
    2660:	ldr	r0, [fp]
    2664:	mov	sl, #1
    2668:	adds	r2, r2, r4
    266c:	mov	fp, #0
    2670:	adc	r3, r3, r5
    2674:	add	r1, sp, #128	; 0x80
    2678:	adds	r2, r2, #1
    267c:	adc	r3, r3, #0
    2680:	strd	sl, [sp]
    2684:	str	r1, [sp, #8]
    2688:	bl	948 <read_bytes_in_bounds>
    268c:	cmp	r0, #0
    2690:	bne	2134 <coda_ascii_cursor_get_bit_size+0x3d0>
    2694:	ldrb	r3, [sp, #128]	; 0x80
    2698:	cmp	r3, #10
    269c:	moveq	r4, r6
    26a0:	moveq	r5, r7
    26a4:	b	25d0 <coda_ascii_cursor_get_bit_size+0x86c>
    26a8:	bl	0 <coda_ascii_init_asciilines>
    26ac:	cmp	r0, #0
    26b0:	bne	2134 <coda_ascii_cursor_get_bit_size+0x3d0>
    26b4:	ldr	r0, [fp]
    26b8:	b	2174 <coda_ascii_cursor_get_bit_size+0x410>
    26bc:	ldr	r3, [pc, #200]	; 278c <coda_ascii_cursor_get_bit_size+0xa28>
    26c0:	mov	r2, #812	; 0x32c
    26c4:	ldr	r1, [pc, #200]	; 2794 <coda_ascii_cursor_get_bit_size+0xa30>
    26c8:	ldr	r0, [pc, #212]	; 27a4 <coda_ascii_cursor_get_bit_size+0xa40>
    26cc:	bl	0 <__assert_fail>
    26d0:	ldr	r1, [pc, #208]	; 27a8 <coda_ascii_cursor_get_bit_size+0xa44>
    26d4:	ldr	r0, [pc, #172]	; 2788 <coda_ascii_cursor_get_bit_size+0xa24>
    26d8:	bl	0 <coda_set_error>
    26dc:	b	2134 <coda_ascii_cursor_get_bit_size+0x3d0>
    26e0:	ldr	r1, [pc, #196]	; 27ac <coda_ascii_cursor_get_bit_size+0xa48>
    26e4:	ldr	r0, [pc, #156]	; 2788 <coda_ascii_cursor_get_bit_size+0xa24>
    26e8:	bl	0 <coda_set_error>
    26ec:	b	2134 <coda_ascii_cursor_get_bit_size+0x3d0>
    26f0:	ldr	r1, [pc, #184]	; 27b0 <coda_ascii_cursor_get_bit_size+0xa4c>
    26f4:	mvn	r0, #300	; 0x12c
    26f8:	bl	0 <coda_set_error>
    26fc:	mvn	r9, #0
    2700:	b	1da0 <coda_ascii_cursor_get_bit_size+0x3c>
    2704:	ldr	r3, [pc, #128]	; 278c <coda_ascii_cursor_get_bit_size+0xa28>
    2708:	mov	r2, #800	; 0x320
    270c:	ldr	r1, [pc, #128]	; 2794 <coda_ascii_cursor_get_bit_size+0xa30>
    2710:	ldr	r0, [pc, #128]	; 2798 <coda_ascii_cursor_get_bit_size+0xa34>
    2714:	bl	0 <__assert_fail>
    2718:	ldr	r1, [pc, #136]	; 27a8 <coda_ascii_cursor_get_bit_size+0xa44>
    271c:	ldr	r0, [pc, #100]	; 2788 <coda_ascii_cursor_get_bit_size+0xa24>
    2720:	bl	0 <coda_set_error>
    2724:	mvn	r9, #0
    2728:	b	1da0 <coda_ascii_cursor_get_bit_size+0x3c>
    272c:	ldr	r1, [pc, #128]	; 27b4 <coda_ascii_cursor_get_bit_size+0xa50>
    2730:	ldr	r0, [pc, #80]	; 2788 <coda_ascii_cursor_get_bit_size+0xa24>
    2734:	bl	0 <coda_set_error>
    2738:	b	2134 <coda_ascii_cursor_get_bit_size+0x3d0>
    273c:	ldr	r3, [pc, #72]	; 278c <coda_ascii_cursor_get_bit_size+0xa28>
    2740:	ldr	r2, [pc, #112]	; 27b8 <coda_ascii_cursor_get_bit_size+0xa54>
    2744:	ldr	r1, [pc, #72]	; 2794 <coda_ascii_cursor_get_bit_size+0xa30>
    2748:	ldr	r0, [pc, #108]	; 27bc <coda_ascii_cursor_get_bit_size+0xa58>
    274c:	bl	0 <__assert_fail>
    2750:	ldr	r3, [pc, #52]	; 278c <coda_ascii_cursor_get_bit_size+0xa28>
    2754:	mov	r2, #816	; 0x330
    2758:	ldr	r1, [pc, #52]	; 2794 <coda_ascii_cursor_get_bit_size+0xa30>
    275c:	ldr	r0, [pc, #92]	; 27c0 <coda_ascii_cursor_get_bit_size+0xa5c>
    2760:	bl	0 <__assert_fail>
    2764:	ldr	r3, [fp]
    2768:	ldr	ip, [sp, #20]
    276c:	mov	r0, #16
    2770:	mov	r1, #0
    2774:	mov	r2, #3
    2778:	strd	r0, [ip]
    277c:	str	r2, [r3, #60]	; 0x3c
    2780:	b	1da0 <coda_ascii_cursor_get_bit_size+0x3c>
    2784:	.word	0x00000740
    2788:	.word	0xfffffed4
    278c:	.word	0x000000ac
    2790:	.word	0x00000406
    2794:	.word	0x0000002c
    2798:	.word	0x000002c0
    279c:	.word	0x00000728
    27a0:	.word	0x0000080c
    27a4:	.word	0x00000768
    27a8:	.word	0x00000884
    27ac:	.word	0x000007bc
    27b0:	.word	0x000008c8
    27b4:	.word	0x000008ec
    27b8:	.word	0x000002b5
    27bc:	.word	0x000006fc
    27c0:	.word	0x0000078c

000027c4 <coda_ascii_cursor_get_string_length>:
    27c4:	push	{r4, lr}
    27c8:	sub	sp, sp, #8
    27cc:	mov	r4, r1
    27d0:	mov	r1, sp
    27d4:	bl	1d64 <coda_ascii_cursor_get_bit_size>
    27d8:	cmp	r0, #0
    27dc:	bne	2808 <coda_ascii_cursor_get_string_length+0x44>
    27e0:	ldrd	r2, [sp]
    27e4:	cmp	r2, #0
    27e8:	sbcs	r1, r3, #0
    27ec:	lsrge	r2, r2, #3
    27f0:	mvnlt	r3, #0
    27f4:	orrge	r2, r2, r3, lsl #29
    27f8:	strlt	r3, [r4]
    27fc:	strge	r2, [r4]
    2800:	add	sp, sp, #8
    2804:	pop	{r4, pc}
    2808:	mvn	r0, #0
    280c:	b	2800 <coda_ascii_cursor_get_string_length+0x3c>

00002810 <coda_ascii_cursor_read_string>:
    2810:	ldr	r3, [r0, #4]
    2814:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    2818:	sub	r3, r3, #1
    281c:	mov	r7, r2
    2820:	add	r2, r0, r3, lsl #4
    2824:	add	r3, r0, r3, lsl #4
    2828:	ldr	r4, [r2, #8]
    282c:	ldrd	r8, [r3, #16]
    2830:	mov	r3, #0
    2834:	ldr	r2, [r4]
    2838:	sub	sp, sp, #24
    283c:	cmp	r2, #99	; 0x63
    2840:	and	r2, r8, #7
    2844:	ldrhi	r4, [r4, #4]
    2848:	orrs	r3, r2, r3
    284c:	mov	r6, r0
    2850:	mov	sl, r1
    2854:	bne	291c <coda_ascii_cursor_read_string+0x10c>
    2858:	ldrd	r2, [r4, #24]
    285c:	cmp	r2, #0
    2860:	sbcs	r1, r3, #0
    2864:	add	r1, sp, #16
    2868:	blt	28e8 <coda_ascii_cursor_read_string+0xd8>
    286c:	bl	0 <get_bit_size_boundary>
    2870:	cmp	r0, #0
    2874:	bne	2914 <coda_ascii_cursor_read_string+0x104>
    2878:	ldr	r2, [r4, #24]
    287c:	ldr	r3, [r4, #28]
    2880:	lsr	r4, r2, #3
    2884:	orr	r4, r4, r3, lsl #29
    2888:	asr	r5, r3, #3
    288c:	cmp	r4, r7
    2890:	asr	r3, r7, #31
    2894:	sbcs	r3, r5, r3
    2898:	subge	r4, r7, #1
    289c:	asrge	r5, r4, #31
    28a0:	cmp	r4, #1
    28a4:	sbcs	r3, r5, #0
    28a8:	movlt	r0, #0
    28ac:	strblt	r0, [sl]
    28b0:	blt	28e0 <coda_ascii_cursor_read_string+0xd0>
    28b4:	lsr	r2, r8, #3
    28b8:	ldr	r0, [r6]
    28bc:	orr	r2, r2, r9, lsl #29
    28c0:	str	sl, [sp, #8]
    28c4:	strd	r4, [sp]
    28c8:	asr	r3, r9, #3
    28cc:	bl	2b8 <read_bytes>
    28d0:	cmp	r0, #0
    28d4:	bne	2914 <coda_ascii_cursor_read_string+0x104>
    28d8:	add	r4, sl, r4
    28dc:	strb	r0, [r4]
    28e0:	add	sp, sp, #24
    28e4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    28e8:	bl	1d64 <coda_ascii_cursor_get_bit_size>
    28ec:	cmp	r0, #0
    28f0:	bne	2914 <coda_ascii_cursor_read_string+0x104>
    28f4:	ldrd	r2, [sp, #16]
    28f8:	mov	r1, #0
    28fc:	and	r0, r2, #7
    2900:	orrs	r1, r0, r1
    2904:	beq	2880 <coda_ascii_cursor_read_string+0x70>
    2908:	ldr	r1, [pc, #32]	; 2930 <coda_ascii_cursor_read_string+0x120>
    290c:	ldr	r0, [pc, #32]	; 2934 <coda_ascii_cursor_read_string+0x124>
    2910:	bl	0 <coda_set_error>
    2914:	mvn	r0, #0
    2918:	b	28e0 <coda_ascii_cursor_read_string+0xd0>
    291c:	ldr	r0, [pc, #16]	; 2934 <coda_ascii_cursor_read_string+0x124>
    2920:	ldr	r1, [pc, #16]	; 2938 <coda_ascii_cursor_read_string+0x128>
    2924:	bl	0 <coda_set_error>
    2928:	mvn	r0, #0
    292c:	b	28e0 <coda_ascii_cursor_read_string+0xd0>
    2930:	.word	0x00000978
    2934:	.word	0xfffffed4
    2938:	.word	0x00000938

0000293c <coda_ascii_cursor_read_int8_array>:
    293c:	ldr	r3, [r0, #4]
    2940:	push	{r4, r5, r6, lr}
    2944:	mov	r6, r2
    2948:	add	r3, r0, r3, lsl #4
    294c:	mov	r4, r0
    2950:	ldr	r3, [r3, #-8]
    2954:	mov	r5, r1
    2958:	ldr	r2, [r3]
    295c:	cmp	r2, #99	; 0x63
    2960:	ldrhi	r3, [r3, #4]
    2964:	ldr	r3, [r3, #40]	; 0x28
    2968:	ldr	r3, [r3]
    296c:	cmp	r3, #0
    2970:	bne	29b8 <coda_ascii_cursor_read_int8_array+0x7c>
    2974:	mov	r2, r1
    2978:	mov	r3, #1
    297c:	ldr	r1, [pc, #72]	; 29cc <coda_ascii_cursor_read_int8_array+0x90>
    2980:	bl	a6c <read_array.constprop.12>
    2984:	cmp	r0, #0
    2988:	bne	29b0 <coda_ascii_cursor_read_int8_array+0x74>
    298c:	cmp	r6, #0
    2990:	popeq	{r4, r5, r6, pc}
    2994:	mov	r1, r5
    2998:	mov	r0, r4
    299c:	mov	r2, #1
    29a0:	bl	4b4 <transpose_array>
    29a4:	adds	r0, r0, #0
    29a8:	mvnne	r0, #0
    29ac:	pop	{r4, r5, r6, pc}
    29b0:	mvn	r0, #0
    29b4:	pop	{r4, r5, r6, pc}
    29b8:	ldr	r3, [pc, #16]	; 29d0 <coda_ascii_cursor_read_int8_array+0x94>
    29bc:	ldr	r2, [pc, #16]	; 29d4 <coda_ascii_cursor_read_int8_array+0x98>
    29c0:	ldr	r1, [pc, #16]	; 29d8 <coda_ascii_cursor_read_int8_array+0x9c>
    29c4:	ldr	r0, [pc, #16]	; 29dc <coda_ascii_cursor_read_int8_array+0xa0>
    29c8:	bl	0 <__assert_fail>
    29cc:	.word	0x00000000
    29d0:	.word	0x000000cc
    29d4:	.word	0x000005b8
    29d8:	.word	0x0000002c
    29dc:	.word	0x000009b8

000029e0 <coda_ascii_cursor_read_uint8_array>:
    29e0:	ldr	r3, [r0, #4]
    29e4:	push	{r4, r5, r6, lr}
    29e8:	mov	r6, r2
    29ec:	add	r3, r0, r3, lsl #4
    29f0:	mov	r4, r0
    29f4:	ldr	r3, [r3, #-8]
    29f8:	mov	r5, r1
    29fc:	ldr	r2, [r3]
    2a00:	cmp	r2, #99	; 0x63
    2a04:	ldrhi	r3, [r3, #4]
    2a08:	ldr	r3, [r3, #40]	; 0x28
    2a0c:	ldr	r3, [r3]
    2a10:	cmp	r3, #0
    2a14:	bne	2a5c <coda_ascii_cursor_read_uint8_array+0x7c>
    2a18:	mov	r2, r1
    2a1c:	mov	r3, #1
    2a20:	ldr	r1, [pc, #72]	; 2a70 <coda_ascii_cursor_read_uint8_array+0x90>
    2a24:	bl	a6c <read_array.constprop.12>
    2a28:	cmp	r0, #0
    2a2c:	bne	2a54 <coda_ascii_cursor_read_uint8_array+0x74>
    2a30:	cmp	r6, #0
    2a34:	popeq	{r4, r5, r6, pc}
    2a38:	mov	r1, r5
    2a3c:	mov	r0, r4
    2a40:	mov	r2, #1
    2a44:	bl	4b4 <transpose_array>
    2a48:	adds	r0, r0, #0
    2a4c:	mvnne	r0, #0
    2a50:	pop	{r4, r5, r6, pc}
    2a54:	mvn	r0, #0
    2a58:	pop	{r4, r5, r6, pc}
    2a5c:	ldr	r3, [pc, #16]	; 2a74 <coda_ascii_cursor_read_uint8_array+0x94>
    2a60:	ldr	r2, [pc, #16]	; 2a78 <coda_ascii_cursor_read_uint8_array+0x98>
    2a64:	ldr	r1, [pc, #16]	; 2a7c <coda_ascii_cursor_read_uint8_array+0x9c>
    2a68:	ldr	r0, [pc, #16]	; 2a80 <coda_ascii_cursor_read_uint8_array+0xa0>
    2a6c:	bl	0 <__assert_fail>
    2a70:	.word	0x00000000
    2a74:	.word	0x000000f0
    2a78:	.word	0x000005cc
    2a7c:	.word	0x0000002c
    2a80:	.word	0x000009b8

00002a84 <coda_ascii_cursor_read_int16_array>:
    2a84:	ldr	r3, [r0, #4]
    2a88:	push	{r4, r5, r6, lr}
    2a8c:	mov	r6, r2
    2a90:	add	r3, r0, r3, lsl #4
    2a94:	mov	r4, r0
    2a98:	ldr	r3, [r3, #-8]
    2a9c:	mov	r5, r1
    2aa0:	ldr	r2, [r3]
    2aa4:	cmp	r2, #99	; 0x63
    2aa8:	ldrhi	r3, [r3, #4]
    2aac:	ldr	r3, [r3, #40]	; 0x28
    2ab0:	ldr	r3, [r3]
    2ab4:	cmp	r3, #0
    2ab8:	bne	2b00 <coda_ascii_cursor_read_int16_array+0x7c>
    2abc:	mov	r2, r1
    2ac0:	mov	r3, #2
    2ac4:	ldr	r1, [pc, #72]	; 2b14 <coda_ascii_cursor_read_int16_array+0x90>
    2ac8:	bl	a6c <read_array.constprop.12>
    2acc:	cmp	r0, #0
    2ad0:	bne	2af8 <coda_ascii_cursor_read_int16_array+0x74>
    2ad4:	cmp	r6, #0
    2ad8:	popeq	{r4, r5, r6, pc}
    2adc:	mov	r1, r5
    2ae0:	mov	r0, r4
    2ae4:	mov	r2, #2
    2ae8:	bl	4b4 <transpose_array>
    2aec:	adds	r0, r0, #0
    2af0:	mvnne	r0, #0
    2af4:	pop	{r4, r5, r6, pc}
    2af8:	mvn	r0, #0
    2afc:	pop	{r4, r5, r6, pc}
    2b00:	ldr	r3, [pc, #16]	; 2b18 <coda_ascii_cursor_read_int16_array+0x94>
    2b04:	mov	r2, #1504	; 0x5e0
    2b08:	ldr	r1, [pc, #12]	; 2b1c <coda_ascii_cursor_read_int16_array+0x98>
    2b0c:	ldr	r0, [pc, #12]	; 2b20 <coda_ascii_cursor_read_int16_array+0x9c>
    2b10:	bl	0 <__assert_fail>
    2b14:	.word	0x00000000
    2b18:	.word	0x00000114
    2b1c:	.word	0x0000002c
    2b20:	.word	0x000009b8

00002b24 <coda_ascii_cursor_read_uint16_array>:
    2b24:	ldr	r3, [r0, #4]
    2b28:	push	{r4, r5, r6, lr}
    2b2c:	mov	r6, r2
    2b30:	add	r3, r0, r3, lsl #4
    2b34:	mov	r4, r0
    2b38:	ldr	r3, [r3, #-8]
    2b3c:	mov	r5, r1
    2b40:	ldr	r2, [r3]
    2b44:	cmp	r2, #99	; 0x63
    2b48:	ldrhi	r3, [r3, #4]
    2b4c:	ldr	r3, [r3, #40]	; 0x28
    2b50:	ldr	r3, [r3]
    2b54:	cmp	r3, #0
    2b58:	bne	2ba0 <coda_ascii_cursor_read_uint16_array+0x7c>
    2b5c:	mov	r2, r1
    2b60:	mov	r3, #2
    2b64:	ldr	r1, [pc, #72]	; 2bb4 <coda_ascii_cursor_read_uint16_array+0x90>
    2b68:	bl	a6c <read_array.constprop.12>
    2b6c:	cmp	r0, #0
    2b70:	bne	2b98 <coda_ascii_cursor_read_uint16_array+0x74>
    2b74:	cmp	r6, #0
    2b78:	popeq	{r4, r5, r6, pc}
    2b7c:	mov	r1, r5
    2b80:	mov	r0, r4
    2b84:	mov	r2, #2
    2b88:	bl	4b4 <transpose_array>
    2b8c:	adds	r0, r0, #0
    2b90:	mvnne	r0, #0
    2b94:	pop	{r4, r5, r6, pc}
    2b98:	mvn	r0, #0
    2b9c:	pop	{r4, r5, r6, pc}
    2ba0:	ldr	r3, [pc, #16]	; 2bb8 <coda_ascii_cursor_read_uint16_array+0x94>
    2ba4:	ldr	r2, [pc, #16]	; 2bbc <coda_ascii_cursor_read_uint16_array+0x98>
    2ba8:	ldr	r1, [pc, #16]	; 2bc0 <coda_ascii_cursor_read_uint16_array+0x9c>
    2bac:	ldr	r0, [pc, #16]	; 2bc4 <coda_ascii_cursor_read_uint16_array+0xa0>
    2bb0:	bl	0 <__assert_fail>
    2bb4:	.word	0x00000000
    2bb8:	.word	0x00000138
    2bbc:	.word	0x000005f4
    2bc0:	.word	0x0000002c
    2bc4:	.word	0x000009b8

00002bc8 <coda_ascii_cursor_read_int32_array>:
    2bc8:	ldr	r3, [r0, #4]
    2bcc:	push	{r4, r5, r6, lr}
    2bd0:	mov	r6, r2
    2bd4:	add	r3, r0, r3, lsl #4
    2bd8:	mov	r4, r0
    2bdc:	ldr	r3, [r3, #-8]
    2be0:	mov	r5, r1
    2be4:	ldr	r2, [r3]
    2be8:	cmp	r2, #99	; 0x63
    2bec:	ldrhi	r3, [r3, #4]
    2bf0:	ldr	r3, [r3, #40]	; 0x28
    2bf4:	ldr	r3, [r3]
    2bf8:	cmp	r3, #0
    2bfc:	bne	2c44 <coda_ascii_cursor_read_int32_array+0x7c>
    2c00:	mov	r2, r1
    2c04:	mov	r3, #4
    2c08:	ldr	r1, [pc, #72]	; 2c58 <coda_ascii_cursor_read_int32_array+0x90>
    2c0c:	bl	a6c <read_array.constprop.12>
    2c10:	cmp	r0, #0
    2c14:	bne	2c3c <coda_ascii_cursor_read_int32_array+0x74>
    2c18:	cmp	r6, #0
    2c1c:	popeq	{r4, r5, r6, pc}
    2c20:	mov	r1, r5
    2c24:	mov	r0, r4
    2c28:	mov	r2, #4
    2c2c:	bl	4b4 <transpose_array>
    2c30:	adds	r0, r0, #0
    2c34:	mvnne	r0, #0
    2c38:	pop	{r4, r5, r6, pc}
    2c3c:	mvn	r0, #0
    2c40:	pop	{r4, r5, r6, pc}
    2c44:	ldr	r3, [pc, #16]	; 2c5c <coda_ascii_cursor_read_int32_array+0x94>
    2c48:	ldr	r2, [pc, #16]	; 2c60 <coda_ascii_cursor_read_int32_array+0x98>
    2c4c:	ldr	r1, [pc, #16]	; 2c64 <coda_ascii_cursor_read_int32_array+0x9c>
    2c50:	ldr	r0, [pc, #16]	; 2c68 <coda_ascii_cursor_read_int32_array+0xa0>
    2c54:	bl	0 <__assert_fail>
    2c58:	.word	0x00000000
    2c5c:	.word	0x0000015c
    2c60:	.word	0x00000608
    2c64:	.word	0x0000002c
    2c68:	.word	0x000009b8

00002c6c <coda_ascii_cursor_read_uint32_array>:
    2c6c:	ldr	r3, [r0, #4]
    2c70:	push	{r4, r5, r6, lr}
    2c74:	mov	r6, r2
    2c78:	add	r3, r0, r3, lsl #4
    2c7c:	mov	r4, r0
    2c80:	ldr	r3, [r3, #-8]
    2c84:	mov	r5, r1
    2c88:	ldr	r2, [r3]
    2c8c:	cmp	r2, #99	; 0x63
    2c90:	ldrhi	r3, [r3, #4]
    2c94:	ldr	r3, [r3, #40]	; 0x28
    2c98:	ldr	r3, [r3]
    2c9c:	cmp	r3, #0
    2ca0:	bne	2ce8 <coda_ascii_cursor_read_uint32_array+0x7c>
    2ca4:	mov	r2, r1
    2ca8:	mov	r3, #4
    2cac:	ldr	r1, [pc, #72]	; 2cfc <coda_ascii_cursor_read_uint32_array+0x90>
    2cb0:	bl	a6c <read_array.constprop.12>
    2cb4:	cmp	r0, #0
    2cb8:	bne	2ce0 <coda_ascii_cursor_read_uint32_array+0x74>
    2cbc:	cmp	r6, #0
    2cc0:	popeq	{r4, r5, r6, pc}
    2cc4:	mov	r1, r5
    2cc8:	mov	r0, r4
    2ccc:	mov	r2, #4
    2cd0:	bl	4b4 <transpose_array>
    2cd4:	adds	r0, r0, #0
    2cd8:	mvnne	r0, #0
    2cdc:	pop	{r4, r5, r6, pc}
    2ce0:	mvn	r0, #0
    2ce4:	pop	{r4, r5, r6, pc}
    2ce8:	ldr	r3, [pc, #16]	; 2d00 <coda_ascii_cursor_read_uint32_array+0x94>
    2cec:	ldr	r2, [pc, #16]	; 2d04 <coda_ascii_cursor_read_uint32_array+0x98>
    2cf0:	ldr	r1, [pc, #16]	; 2d08 <coda_ascii_cursor_read_uint32_array+0x9c>
    2cf4:	ldr	r0, [pc, #16]	; 2d0c <coda_ascii_cursor_read_uint32_array+0xa0>
    2cf8:	bl	0 <__assert_fail>
    2cfc:	.word	0x00000000
    2d00:	.word	0x00000180
    2d04:	.word	0x0000061c
    2d08:	.word	0x0000002c
    2d0c:	.word	0x000009b8

00002d10 <coda_ascii_cursor_read_int64_array>:
    2d10:	ldr	r3, [r0, #4]
    2d14:	push	{r4, r5, r6, lr}
    2d18:	mov	r6, r2
    2d1c:	add	r3, r0, r3, lsl #4
    2d20:	mov	r4, r0
    2d24:	ldr	r3, [r3, #-8]
    2d28:	mov	r5, r1
    2d2c:	ldr	r2, [r3]
    2d30:	cmp	r2, #99	; 0x63
    2d34:	ldrhi	r3, [r3, #4]
    2d38:	ldr	r3, [r3, #40]	; 0x28
    2d3c:	ldr	r3, [r3]
    2d40:	cmp	r3, #0
    2d44:	bne	2d8c <coda_ascii_cursor_read_int64_array+0x7c>
    2d48:	mov	r2, r1
    2d4c:	mov	r3, #8
    2d50:	ldr	r1, [pc, #72]	; 2da0 <coda_ascii_cursor_read_int64_array+0x90>
    2d54:	bl	a6c <read_array.constprop.12>
    2d58:	cmp	r0, #0
    2d5c:	bne	2d84 <coda_ascii_cursor_read_int64_array+0x74>
    2d60:	cmp	r6, #0
    2d64:	popeq	{r4, r5, r6, pc}
    2d68:	mov	r1, r5
    2d6c:	mov	r0, r4
    2d70:	mov	r2, #4
    2d74:	bl	4b4 <transpose_array>
    2d78:	adds	r0, r0, #0
    2d7c:	mvnne	r0, #0
    2d80:	pop	{r4, r5, r6, pc}
    2d84:	mvn	r0, #0
    2d88:	pop	{r4, r5, r6, pc}
    2d8c:	ldr	r3, [pc, #16]	; 2da4 <coda_ascii_cursor_read_int64_array+0x94>
    2d90:	mov	r2, #1584	; 0x630
    2d94:	ldr	r1, [pc, #12]	; 2da8 <coda_ascii_cursor_read_int64_array+0x98>
    2d98:	ldr	r0, [pc, #12]	; 2dac <coda_ascii_cursor_read_int64_array+0x9c>
    2d9c:	bl	0 <__assert_fail>
    2da0:	.word	0x00000000
    2da4:	.word	0x000001a4
    2da8:	.word	0x0000002c
    2dac:	.word	0x000009b8

00002db0 <coda_ascii_cursor_read_uint64_array>:
    2db0:	ldr	r3, [r0, #4]
    2db4:	push	{r4, r5, r6, lr}
    2db8:	mov	r6, r2
    2dbc:	add	r3, r0, r3, lsl #4
    2dc0:	mov	r4, r0
    2dc4:	ldr	r3, [r3, #-8]
    2dc8:	mov	r5, r1
    2dcc:	ldr	r2, [r3]
    2dd0:	cmp	r2, #99	; 0x63
    2dd4:	ldrhi	r3, [r3, #4]
    2dd8:	ldr	r3, [r3, #40]	; 0x28
    2ddc:	ldr	r3, [r3]
    2de0:	cmp	r3, #0
    2de4:	bne	2e2c <coda_ascii_cursor_read_uint64_array+0x7c>
    2de8:	mov	r2, r1
    2dec:	mov	r3, #8
    2df0:	ldr	r1, [pc, #72]	; 2e40 <coda_ascii_cursor_read_uint64_array+0x90>
    2df4:	bl	a6c <read_array.constprop.12>
    2df8:	cmp	r0, #0
    2dfc:	bne	2e24 <coda_ascii_cursor_read_uint64_array+0x74>
    2e00:	cmp	r6, #0
    2e04:	popeq	{r4, r5, r6, pc}
    2e08:	mov	r1, r5
    2e0c:	mov	r0, r4
    2e10:	mov	r2, #8
    2e14:	bl	4b4 <transpose_array>
    2e18:	adds	r0, r0, #0
    2e1c:	mvnne	r0, #0
    2e20:	pop	{r4, r5, r6, pc}
    2e24:	mvn	r0, #0
    2e28:	pop	{r4, r5, r6, pc}
    2e2c:	ldr	r3, [pc, #16]	; 2e44 <coda_ascii_cursor_read_uint64_array+0x94>
    2e30:	ldr	r2, [pc, #16]	; 2e48 <coda_ascii_cursor_read_uint64_array+0x98>
    2e34:	ldr	r1, [pc, #16]	; 2e4c <coda_ascii_cursor_read_uint64_array+0x9c>
    2e38:	ldr	r0, [pc, #16]	; 2e50 <coda_ascii_cursor_read_uint64_array+0xa0>
    2e3c:	bl	0 <__assert_fail>
    2e40:	.word	0x00000000
    2e44:	.word	0x000001c8
    2e48:	.word	0x00000644
    2e4c:	.word	0x0000002c
    2e50:	.word	0x000009b8

00002e54 <coda_ascii_cursor_read_float_array>:
    2e54:	ldr	r3, [r0, #4]
    2e58:	push	{r4, r5, r6, lr}
    2e5c:	mov	r6, r2
    2e60:	add	r3, r0, r3, lsl #4
    2e64:	mov	r4, r0
    2e68:	ldr	r3, [r3, #-8]
    2e6c:	mov	r5, r1
    2e70:	ldr	r2, [r3]
    2e74:	cmp	r2, #99	; 0x63
    2e78:	ldrhi	r3, [r3, #4]
    2e7c:	ldr	r3, [r3, #40]	; 0x28
    2e80:	ldr	r3, [r3]
    2e84:	cmp	r3, #0
    2e88:	bne	2ed0 <coda_ascii_cursor_read_float_array+0x7c>
    2e8c:	mov	r2, r1
    2e90:	mov	r3, #4
    2e94:	ldr	r1, [pc, #72]	; 2ee4 <coda_ascii_cursor_read_float_array+0x90>
    2e98:	bl	a6c <read_array.constprop.12>
    2e9c:	cmp	r0, #0
    2ea0:	bne	2ec8 <coda_ascii_cursor_read_float_array+0x74>
    2ea4:	cmp	r6, #0
    2ea8:	popeq	{r4, r5, r6, pc}
    2eac:	mov	r1, r5
    2eb0:	mov	r0, r4
    2eb4:	mov	r2, #4
    2eb8:	bl	4b4 <transpose_array>
    2ebc:	adds	r0, r0, #0
    2ec0:	mvnne	r0, #0
    2ec4:	pop	{r4, r5, r6, pc}
    2ec8:	mvn	r0, #0
    2ecc:	pop	{r4, r5, r6, pc}
    2ed0:	ldr	r3, [pc, #16]	; 2ee8 <coda_ascii_cursor_read_float_array+0x94>
    2ed4:	ldr	r2, [pc, #16]	; 2eec <coda_ascii_cursor_read_float_array+0x98>
    2ed8:	ldr	r1, [pc, #16]	; 2ef0 <coda_ascii_cursor_read_float_array+0x9c>
    2edc:	ldr	r0, [pc, #16]	; 2ef4 <coda_ascii_cursor_read_float_array+0xa0>
    2ee0:	bl	0 <__assert_fail>
    2ee4:	.word	0x00000000
    2ee8:	.word	0x000001ec
    2eec:	.word	0x00000658
    2ef0:	.word	0x0000002c
    2ef4:	.word	0x000009b8

00002ef8 <coda_ascii_cursor_read_double_array>:
    2ef8:	ldr	r3, [r0, #4]
    2efc:	push	{r4, r5, r6, lr}
    2f00:	mov	r6, r2
    2f04:	add	r3, r0, r3, lsl #4
    2f08:	mov	r4, r0
    2f0c:	ldr	r3, [r3, #-8]
    2f10:	mov	r5, r1
    2f14:	ldr	r2, [r3]
    2f18:	cmp	r2, #99	; 0x63
    2f1c:	ldrhi	r3, [r3, #4]
    2f20:	ldr	r3, [r3, #40]	; 0x28
    2f24:	ldr	r3, [r3]
    2f28:	cmp	r3, #0
    2f2c:	bne	2f74 <coda_ascii_cursor_read_double_array+0x7c>
    2f30:	mov	r2, r1
    2f34:	mov	r3, #8
    2f38:	ldr	r1, [pc, #72]	; 2f88 <coda_ascii_cursor_read_double_array+0x90>
    2f3c:	bl	a6c <read_array.constprop.12>
    2f40:	cmp	r0, #0
    2f44:	bne	2f6c <coda_ascii_cursor_read_double_array+0x74>
    2f48:	cmp	r6, #0
    2f4c:	popeq	{r4, r5, r6, pc}
    2f50:	mov	r1, r5
    2f54:	mov	r0, r4
    2f58:	mov	r2, #8
    2f5c:	bl	4b4 <transpose_array>
    2f60:	adds	r0, r0, #0
    2f64:	mvnne	r0, #0
    2f68:	pop	{r4, r5, r6, pc}
    2f6c:	mvn	r0, #0
    2f70:	pop	{r4, r5, r6, pc}
    2f74:	ldr	r3, [pc, #16]	; 2f8c <coda_ascii_cursor_read_double_array+0x94>
    2f78:	ldr	r2, [pc, #16]	; 2f90 <coda_ascii_cursor_read_double_array+0x98>
    2f7c:	ldr	r1, [pc, #16]	; 2f94 <coda_ascii_cursor_read_double_array+0x9c>
    2f80:	ldr	r0, [pc, #16]	; 2f98 <coda_ascii_cursor_read_double_array+0xa0>
    2f84:	bl	0 <__assert_fail>
    2f88:	.word	0x00000000
    2f8c:	.word	0x00000210
    2f90:	.word	0x0000066c
    2f94:	.word	0x0000002c
    2f98:	.word	0x000009b8

00002f9c <coda_ascii_cursor_read_char_array>:
    2f9c:	ldr	r3, [r0, #4]
    2fa0:	push	{r4, r5, r6, lr}
    2fa4:	mov	r6, r2
    2fa8:	add	r3, r0, r3, lsl #4
    2fac:	mov	r4, r0
    2fb0:	ldr	r3, [r3, #-8]
    2fb4:	mov	r5, r1
    2fb8:	ldr	r2, [r3]
    2fbc:	cmp	r2, #99	; 0x63
    2fc0:	ldrhi	r3, [r3, #4]
    2fc4:	ldr	r3, [r3, #40]	; 0x28
    2fc8:	ldr	r3, [r3]
    2fcc:	cmp	r3, #0
    2fd0:	bne	3018 <coda_ascii_cursor_read_char_array+0x7c>
    2fd4:	mov	r2, r1
    2fd8:	mov	r3, #1
    2fdc:	ldr	r1, [pc, #72]	; 302c <coda_ascii_cursor_read_char_array+0x90>
    2fe0:	bl	a6c <read_array.constprop.12>
    2fe4:	cmp	r0, #0
    2fe8:	bne	3010 <coda_ascii_cursor_read_char_array+0x74>
    2fec:	cmp	r6, #0
    2ff0:	popeq	{r4, r5, r6, pc}
    2ff4:	mov	r1, r5
    2ff8:	mov	r0, r4
    2ffc:	mov	r2, #1
    3000:	bl	4b4 <transpose_array>
    3004:	adds	r0, r0, #0
    3008:	mvnne	r0, #0
    300c:	pop	{r4, r5, r6, pc}
    3010:	mvn	r0, #0
    3014:	pop	{r4, r5, r6, pc}
    3018:	ldr	r3, [pc, #16]	; 3030 <coda_ascii_cursor_read_char_array+0x94>
    301c:	mov	r2, #1664	; 0x680
    3020:	ldr	r1, [pc, #12]	; 3034 <coda_ascii_cursor_read_char_array+0x98>
    3024:	ldr	r0, [pc, #12]	; 3038 <coda_ascii_cursor_read_char_array+0x9c>
    3028:	bl	0 <__assert_fail>
    302c:	.word	0x00000000
    3030:	.word	0x00000234
    3034:	.word	0x0000002c
    3038:	.word	0x000009b8

0000303c <coda_ascii_cursor_read_int8_partial_array>:
    303c:	ldr	ip, [r0, #4]
    3040:	push	{lr}		; (str lr, [sp, #-4]!)
    3044:	sub	sp, sp, #12
    3048:	add	ip, r0, ip, lsl #4
    304c:	ldr	ip, [ip, #-8]
    3050:	ldr	lr, [ip]
    3054:	cmp	lr, #99	; 0x63
    3058:	ldrhi	ip, [ip, #4]
    305c:	ldr	ip, [ip, #40]	; 0x28
    3060:	ldr	ip, [ip]
    3064:	cmp	ip, #0
    3068:	bne	3090 <coda_ascii_cursor_read_int8_partial_array+0x54>
    306c:	mov	ip, #1
    3070:	str	r3, [sp]
    3074:	str	ip, [sp, #4]
    3078:	mov	r3, r2
    307c:	mov	r2, r1
    3080:	ldr	r1, [pc, #28]	; 30a4 <coda_ascii_cursor_read_int8_partial_array+0x68>
    3084:	bl	414 <read_partial_array>
    3088:	add	sp, sp, #12
    308c:	pop	{pc}		; (ldr pc, [sp], #4)
    3090:	ldr	r3, [pc, #16]	; 30a8 <coda_ascii_cursor_read_int8_partial_array+0x6c>
    3094:	ldr	r2, [pc, #16]	; 30ac <coda_ascii_cursor_read_int8_partial_array+0x70>
    3098:	ldr	r1, [pc, #16]	; 30b0 <coda_ascii_cursor_read_int8_partial_array+0x74>
    309c:	ldr	r0, [pc, #16]	; 30b4 <coda_ascii_cursor_read_int8_partial_array+0x78>
    30a0:	bl	0 <__assert_fail>
    30a4:	.word	0x00000000
    30a8:	.word	0x00000258
    30ac:	.word	0x00000694
    30b0:	.word	0x0000002c
    30b4:	.word	0x000009b8

000030b8 <coda_ascii_cursor_read_uint8_partial_array>:
    30b8:	ldr	ip, [r0, #4]
    30bc:	push	{lr}		; (str lr, [sp, #-4]!)
    30c0:	sub	sp, sp, #12
    30c4:	add	ip, r0, ip, lsl #4
    30c8:	ldr	ip, [ip, #-8]
    30cc:	ldr	lr, [ip]
    30d0:	cmp	lr, #99	; 0x63
    30d4:	ldrhi	ip, [ip, #4]
    30d8:	ldr	ip, [ip, #40]	; 0x28
    30dc:	ldr	ip, [ip]
    30e0:	cmp	ip, #0
    30e4:	bne	310c <coda_ascii_cursor_read_uint8_partial_array+0x54>
    30e8:	mov	ip, #1
    30ec:	str	r3, [sp]
    30f0:	str	ip, [sp, #4]
    30f4:	mov	r3, r2
    30f8:	mov	r2, r1
    30fc:	ldr	r1, [pc, #28]	; 3120 <coda_ascii_cursor_read_uint8_partial_array+0x68>
    3100:	bl	414 <read_partial_array>
    3104:	add	sp, sp, #12
    3108:	pop	{pc}		; (ldr pc, [sp], #4)
    310c:	ldr	r3, [pc, #16]	; 3124 <coda_ascii_cursor_read_uint8_partial_array+0x6c>
    3110:	ldr	r2, [pc, #16]	; 3128 <coda_ascii_cursor_read_uint8_partial_array+0x70>
    3114:	ldr	r1, [pc, #16]	; 312c <coda_ascii_cursor_read_uint8_partial_array+0x74>
    3118:	ldr	r0, [pc, #16]	; 3130 <coda_ascii_cursor_read_uint8_partial_array+0x78>
    311c:	bl	0 <__assert_fail>
    3120:	.word	0x00000000
    3124:	.word	0x00000284
    3128:	.word	0x0000069d
    312c:	.word	0x0000002c
    3130:	.word	0x000009b8

00003134 <coda_ascii_cursor_read_int16_partial_array>:
    3134:	ldr	ip, [r0, #4]
    3138:	push	{lr}		; (str lr, [sp, #-4]!)
    313c:	sub	sp, sp, #12
    3140:	add	ip, r0, ip, lsl #4
    3144:	ldr	ip, [ip, #-8]
    3148:	ldr	lr, [ip]
    314c:	cmp	lr, #99	; 0x63
    3150:	ldrhi	ip, [ip, #4]
    3154:	ldr	ip, [ip, #40]	; 0x28
    3158:	ldr	ip, [ip]
    315c:	cmp	ip, #0
    3160:	bne	3188 <coda_ascii_cursor_read_int16_partial_array+0x54>
    3164:	mov	ip, #2
    3168:	str	r3, [sp]
    316c:	str	ip, [sp, #4]
    3170:	mov	r3, r2
    3174:	mov	r2, r1
    3178:	ldr	r1, [pc, #28]	; 319c <coda_ascii_cursor_read_int16_partial_array+0x68>
    317c:	bl	414 <read_partial_array>
    3180:	add	sp, sp, #12
    3184:	pop	{pc}		; (ldr pc, [sp], #4)
    3188:	ldr	r3, [pc, #16]	; 31a0 <coda_ascii_cursor_read_int16_partial_array+0x6c>
    318c:	ldr	r2, [pc, #16]	; 31a4 <coda_ascii_cursor_read_int16_partial_array+0x70>
    3190:	ldr	r1, [pc, #16]	; 31a8 <coda_ascii_cursor_read_int16_partial_array+0x74>
    3194:	ldr	r0, [pc, #16]	; 31ac <coda_ascii_cursor_read_int16_partial_array+0x78>
    3198:	bl	0 <__assert_fail>
    319c:	.word	0x00000000
    31a0:	.word	0x000002b0
    31a4:	.word	0x000006a6
    31a8:	.word	0x0000002c
    31ac:	.word	0x000009b8

000031b0 <coda_ascii_cursor_read_uint16_partial_array>:
    31b0:	ldr	ip, [r0, #4]
    31b4:	push	{lr}		; (str lr, [sp, #-4]!)
    31b8:	sub	sp, sp, #12
    31bc:	add	ip, r0, ip, lsl #4
    31c0:	ldr	ip, [ip, #-8]
    31c4:	ldr	lr, [ip]
    31c8:	cmp	lr, #99	; 0x63
    31cc:	ldrhi	ip, [ip, #4]
    31d0:	ldr	ip, [ip, #40]	; 0x28
    31d4:	ldr	ip, [ip]
    31d8:	cmp	ip, #0
    31dc:	bne	3204 <coda_ascii_cursor_read_uint16_partial_array+0x54>
    31e0:	mov	ip, #2
    31e4:	str	r3, [sp]
    31e8:	str	ip, [sp, #4]
    31ec:	mov	r3, r2
    31f0:	mov	r2, r1
    31f4:	ldr	r1, [pc, #28]	; 3218 <coda_ascii_cursor_read_uint16_partial_array+0x68>
    31f8:	bl	414 <read_partial_array>
    31fc:	add	sp, sp, #12
    3200:	pop	{pc}		; (ldr pc, [sp], #4)
    3204:	ldr	r3, [pc, #16]	; 321c <coda_ascii_cursor_read_uint16_partial_array+0x6c>
    3208:	ldr	r2, [pc, #16]	; 3220 <coda_ascii_cursor_read_uint16_partial_array+0x70>
    320c:	ldr	r1, [pc, #16]	; 3224 <coda_ascii_cursor_read_uint16_partial_array+0x74>
    3210:	ldr	r0, [pc, #16]	; 3228 <coda_ascii_cursor_read_uint16_partial_array+0x78>
    3214:	bl	0 <__assert_fail>
    3218:	.word	0x00000000
    321c:	.word	0x000002dc
    3220:	.word	0x000006af
    3224:	.word	0x0000002c
    3228:	.word	0x000009b8

0000322c <coda_ascii_cursor_read_int32_partial_array>:
    322c:	ldr	ip, [r0, #4]
    3230:	push	{lr}		; (str lr, [sp, #-4]!)
    3234:	sub	sp, sp, #12
    3238:	add	ip, r0, ip, lsl #4
    323c:	ldr	ip, [ip, #-8]
    3240:	ldr	lr, [ip]
    3244:	cmp	lr, #99	; 0x63
    3248:	ldrhi	ip, [ip, #4]
    324c:	ldr	ip, [ip, #40]	; 0x28
    3250:	ldr	ip, [ip]
    3254:	cmp	ip, #0
    3258:	bne	3280 <coda_ascii_cursor_read_int32_partial_array+0x54>
    325c:	mov	ip, #4
    3260:	str	r3, [sp]
    3264:	str	ip, [sp, #4]
    3268:	mov	r3, r2
    326c:	mov	r2, r1
    3270:	ldr	r1, [pc, #28]	; 3294 <coda_ascii_cursor_read_int32_partial_array+0x68>
    3274:	bl	414 <read_partial_array>
    3278:	add	sp, sp, #12
    327c:	pop	{pc}		; (ldr pc, [sp], #4)
    3280:	ldr	r3, [pc, #16]	; 3298 <coda_ascii_cursor_read_int32_partial_array+0x6c>
    3284:	ldr	r2, [pc, #16]	; 329c <coda_ascii_cursor_read_int32_partial_array+0x70>
    3288:	ldr	r1, [pc, #16]	; 32a0 <coda_ascii_cursor_read_int32_partial_array+0x74>
    328c:	ldr	r0, [pc, #16]	; 32a4 <coda_ascii_cursor_read_int32_partial_array+0x78>
    3290:	bl	0 <__assert_fail>
    3294:	.word	0x00000000
    3298:	.word	0x00000308
    329c:	.word	0x000006b8
    32a0:	.word	0x0000002c
    32a4:	.word	0x000009b8

000032a8 <coda_ascii_cursor_read_uint32_partial_array>:
    32a8:	ldr	ip, [r0, #4]
    32ac:	push	{lr}		; (str lr, [sp, #-4]!)
    32b0:	sub	sp, sp, #12
    32b4:	add	ip, r0, ip, lsl #4
    32b8:	ldr	ip, [ip, #-8]
    32bc:	ldr	lr, [ip]
    32c0:	cmp	lr, #99	; 0x63
    32c4:	ldrhi	ip, [ip, #4]
    32c8:	ldr	ip, [ip, #40]	; 0x28
    32cc:	ldr	ip, [ip]
    32d0:	cmp	ip, #0
    32d4:	bne	32fc <coda_ascii_cursor_read_uint32_partial_array+0x54>
    32d8:	mov	ip, #4
    32dc:	str	r3, [sp]
    32e0:	str	ip, [sp, #4]
    32e4:	mov	r3, r2
    32e8:	mov	r2, r1
    32ec:	ldr	r1, [pc, #28]	; 3310 <coda_ascii_cursor_read_uint32_partial_array+0x68>
    32f0:	bl	414 <read_partial_array>
    32f4:	add	sp, sp, #12
    32f8:	pop	{pc}		; (ldr pc, [sp], #4)
    32fc:	ldr	r3, [pc, #16]	; 3314 <coda_ascii_cursor_read_uint32_partial_array+0x6c>
    3300:	ldr	r2, [pc, #16]	; 3318 <coda_ascii_cursor_read_uint32_partial_array+0x70>
    3304:	ldr	r1, [pc, #16]	; 331c <coda_ascii_cursor_read_uint32_partial_array+0x74>
    3308:	ldr	r0, [pc, #16]	; 3320 <coda_ascii_cursor_read_uint32_partial_array+0x78>
    330c:	bl	0 <__assert_fail>
    3310:	.word	0x00000000
    3314:	.word	0x00000334
    3318:	.word	0x000006c1
    331c:	.word	0x0000002c
    3320:	.word	0x000009b8

00003324 <coda_ascii_cursor_read_int64_partial_array>:
    3324:	ldr	ip, [r0, #4]
    3328:	push	{lr}		; (str lr, [sp, #-4]!)
    332c:	sub	sp, sp, #12
    3330:	add	ip, r0, ip, lsl #4
    3334:	ldr	ip, [ip, #-8]
    3338:	ldr	lr, [ip]
    333c:	cmp	lr, #99	; 0x63
    3340:	ldrhi	ip, [ip, #4]
    3344:	ldr	ip, [ip, #40]	; 0x28
    3348:	ldr	ip, [ip]
    334c:	cmp	ip, #0
    3350:	bne	3378 <coda_ascii_cursor_read_int64_partial_array+0x54>
    3354:	mov	ip, #8
    3358:	str	r3, [sp]
    335c:	str	ip, [sp, #4]
    3360:	mov	r3, r2
    3364:	mov	r2, r1
    3368:	ldr	r1, [pc, #28]	; 338c <coda_ascii_cursor_read_int64_partial_array+0x68>
    336c:	bl	414 <read_partial_array>
    3370:	add	sp, sp, #12
    3374:	pop	{pc}		; (ldr pc, [sp], #4)
    3378:	ldr	r3, [pc, #16]	; 3390 <coda_ascii_cursor_read_int64_partial_array+0x6c>
    337c:	ldr	r2, [pc, #16]	; 3394 <coda_ascii_cursor_read_int64_partial_array+0x70>
    3380:	ldr	r1, [pc, #16]	; 3398 <coda_ascii_cursor_read_int64_partial_array+0x74>
    3384:	ldr	r0, [pc, #16]	; 339c <coda_ascii_cursor_read_int64_partial_array+0x78>
    3388:	bl	0 <__assert_fail>
    338c:	.word	0x00000000
    3390:	.word	0x00000360
    3394:	.word	0x000006ca
    3398:	.word	0x0000002c
    339c:	.word	0x000009b8

000033a0 <coda_ascii_cursor_read_uint64_partial_array>:
    33a0:	ldr	ip, [r0, #4]
    33a4:	push	{lr}		; (str lr, [sp, #-4]!)
    33a8:	sub	sp, sp, #12
    33ac:	add	ip, r0, ip, lsl #4
    33b0:	ldr	ip, [ip, #-8]
    33b4:	ldr	lr, [ip]
    33b8:	cmp	lr, #99	; 0x63
    33bc:	ldrhi	ip, [ip, #4]
    33c0:	ldr	ip, [ip, #40]	; 0x28
    33c4:	ldr	ip, [ip]
    33c8:	cmp	ip, #0
    33cc:	bne	33f4 <coda_ascii_cursor_read_uint64_partial_array+0x54>
    33d0:	mov	ip, #8
    33d4:	str	r3, [sp]
    33d8:	str	ip, [sp, #4]
    33dc:	mov	r3, r2
    33e0:	mov	r2, r1
    33e4:	ldr	r1, [pc, #28]	; 3408 <coda_ascii_cursor_read_uint64_partial_array+0x68>
    33e8:	bl	414 <read_partial_array>
    33ec:	add	sp, sp, #12
    33f0:	pop	{pc}		; (ldr pc, [sp], #4)
    33f4:	ldr	r3, [pc, #16]	; 340c <coda_ascii_cursor_read_uint64_partial_array+0x6c>
    33f8:	ldr	r2, [pc, #16]	; 3410 <coda_ascii_cursor_read_uint64_partial_array+0x70>
    33fc:	ldr	r1, [pc, #16]	; 3414 <coda_ascii_cursor_read_uint64_partial_array+0x74>
    3400:	ldr	r0, [pc, #16]	; 3418 <coda_ascii_cursor_read_uint64_partial_array+0x78>
    3404:	bl	0 <__assert_fail>
    3408:	.word	0x00000000
    340c:	.word	0x0000038c
    3410:	.word	0x000006d3
    3414:	.word	0x0000002c
    3418:	.word	0x000009b8

0000341c <coda_ascii_cursor_read_float_partial_array>:
    341c:	ldr	ip, [r0, #4]
    3420:	push	{lr}		; (str lr, [sp, #-4]!)
    3424:	sub	sp, sp, #12
    3428:	add	ip, r0, ip, lsl #4
    342c:	ldr	ip, [ip, #-8]
    3430:	ldr	lr, [ip]
    3434:	cmp	lr, #99	; 0x63
    3438:	ldrhi	ip, [ip, #4]
    343c:	ldr	ip, [ip, #40]	; 0x28
    3440:	ldr	ip, [ip]
    3444:	cmp	ip, #0
    3448:	bne	3470 <coda_ascii_cursor_read_float_partial_array+0x54>
    344c:	mov	ip, #4
    3450:	str	r3, [sp]
    3454:	str	ip, [sp, #4]
    3458:	mov	r3, r2
    345c:	mov	r2, r1
    3460:	ldr	r1, [pc, #28]	; 3484 <coda_ascii_cursor_read_float_partial_array+0x68>
    3464:	bl	414 <read_partial_array>
    3468:	add	sp, sp, #12
    346c:	pop	{pc}		; (ldr pc, [sp], #4)
    3470:	ldr	r3, [pc, #16]	; 3488 <coda_ascii_cursor_read_float_partial_array+0x6c>
    3474:	ldr	r2, [pc, #16]	; 348c <coda_ascii_cursor_read_float_partial_array+0x70>
    3478:	ldr	r1, [pc, #16]	; 3490 <coda_ascii_cursor_read_float_partial_array+0x74>
    347c:	ldr	r0, [pc, #16]	; 3494 <coda_ascii_cursor_read_float_partial_array+0x78>
    3480:	bl	0 <__assert_fail>
    3484:	.word	0x00000000
    3488:	.word	0x000003b8
    348c:	.word	0x000006dc
    3490:	.word	0x0000002c
    3494:	.word	0x000009b8

00003498 <coda_ascii_cursor_read_double_partial_array>:
    3498:	ldr	ip, [r0, #4]
    349c:	push	{lr}		; (str lr, [sp, #-4]!)
    34a0:	sub	sp, sp, #12
    34a4:	add	ip, r0, ip, lsl #4
    34a8:	ldr	ip, [ip, #-8]
    34ac:	ldr	lr, [ip]
    34b0:	cmp	lr, #99	; 0x63
    34b4:	ldrhi	ip, [ip, #4]
    34b8:	ldr	ip, [ip, #40]	; 0x28
    34bc:	ldr	ip, [ip]
    34c0:	cmp	ip, #0
    34c4:	bne	34ec <coda_ascii_cursor_read_double_partial_array+0x54>
    34c8:	mov	ip, #8
    34cc:	str	r3, [sp]
    34d0:	str	ip, [sp, #4]
    34d4:	mov	r3, r2
    34d8:	mov	r2, r1
    34dc:	ldr	r1, [pc, #28]	; 3500 <coda_ascii_cursor_read_double_partial_array+0x68>
    34e0:	bl	414 <read_partial_array>
    34e4:	add	sp, sp, #12
    34e8:	pop	{pc}		; (ldr pc, [sp], #4)
    34ec:	ldr	r3, [pc, #16]	; 3504 <coda_ascii_cursor_read_double_partial_array+0x6c>
    34f0:	ldr	r2, [pc, #16]	; 3508 <coda_ascii_cursor_read_double_partial_array+0x70>
    34f4:	ldr	r1, [pc, #16]	; 350c <coda_ascii_cursor_read_double_partial_array+0x74>
    34f8:	ldr	r0, [pc, #16]	; 3510 <coda_ascii_cursor_read_double_partial_array+0x78>
    34fc:	bl	0 <__assert_fail>
    3500:	.word	0x00000000
    3504:	.word	0x000003e4
    3508:	.word	0x000006e5
    350c:	.word	0x0000002c
    3510:	.word	0x000009b8

00003514 <coda_ascii_cursor_read_char_partial_array>:
    3514:	ldr	ip, [r0, #4]
    3518:	push	{lr}		; (str lr, [sp, #-4]!)
    351c:	sub	sp, sp, #12
    3520:	add	ip, r0, ip, lsl #4
    3524:	ldr	ip, [ip, #-8]
    3528:	ldr	lr, [ip]
    352c:	cmp	lr, #99	; 0x63
    3530:	ldrhi	ip, [ip, #4]
    3534:	ldr	ip, [ip, #40]	; 0x28
    3538:	ldr	ip, [ip]
    353c:	cmp	ip, #0
    3540:	bne	3568 <coda_ascii_cursor_read_char_partial_array+0x54>
    3544:	mov	ip, #1
    3548:	str	r3, [sp]
    354c:	str	ip, [sp, #4]
    3550:	mov	r3, r2
    3554:	mov	r2, r1
    3558:	ldr	r1, [pc, #28]	; 357c <coda_ascii_cursor_read_char_partial_array+0x68>
    355c:	bl	414 <read_partial_array>
    3560:	add	sp, sp, #12
    3564:	pop	{pc}		; (ldr pc, [sp], #4)
    3568:	ldr	r3, [pc, #16]	; 3580 <coda_ascii_cursor_read_char_partial_array+0x6c>
    356c:	ldr	r2, [pc, #16]	; 3584 <coda_ascii_cursor_read_char_partial_array+0x70>
    3570:	ldr	r1, [pc, #16]	; 3588 <coda_ascii_cursor_read_char_partial_array+0x74>
    3574:	ldr	r0, [pc, #16]	; 358c <coda_ascii_cursor_read_char_partial_array+0x78>
    3578:	bl	0 <__assert_fail>
    357c:	.word	0x00000000
    3580:	.word	0x00000410
    3584:	.word	0x000006ee
    3588:	.word	0x0000002c
    358c:	.word	0x000009b8
