
../compcert-repos/stcorp-coda-3a25f25/codacheck:     file format elf32-littlearm


Disassembly of section .init:

00010d0c <.init>:
   10d0c:	push	{r3, lr}
   10d10:	bl	10edc <_start@@Base+0x3c>
   10d14:	pop	{r3, pc}

Disassembly of section .plt:

00010d18 <coda_set_option_perform_boundary_checks@plt-0x14>:
   10d18:	push	{lr}		; (str lr, [sp, #-4]!)
   10d1c:	ldr	lr, [pc, #4]	; 10d28 <coda_set_option_perform_boundary_checks@plt-0x4>
   10d20:	add	lr, pc, lr
   10d24:	ldr	pc, [lr, #8]!
   10d28:	ldrdeq	r2, [r1], -r8

00010d2c <coda_set_option_perform_boundary_checks@plt>:
   10d2c:	add	ip, pc, #0, 12
   10d30:	add	ip, ip, #73728	; 0x12000
   10d34:	ldr	pc, [ip, #728]!	; 0x2d8

00010d38 <strcmp@plt>:
   10d38:	add	ip, pc, #0, 12
   10d3c:	add	ip, ip, #73728	; 0x12000
   10d40:	ldr	pc, [ip, #720]!	; 0x2d0

00010d44 <printf@plt>:
   10d44:	add	ip, pc, #0, 12
   10d48:	add	ip, ip, #73728	; 0x12000
   10d4c:	ldr	pc, [ip, #712]!	; 0x2c8

00010d50 <coda_set_error@plt>:
   10d50:	add	ip, pc, #0, 12
   10d54:	add	ip, ip, #73728	; 0x12000
   10d58:	ldr	pc, [ip, #704]!	; 0x2c0

00010d5c <coda_open@plt>:
   10d5c:	add	ip, pc, #0, 12
   10d60:	add	ip, ip, #73728	; 0x12000
   10d64:	ldr	pc, [ip, #696]!	; 0x2b8

00010d68 <fflush@plt>:
   10d68:	add	ip, pc, #0, 12
   10d6c:	add	ip, ip, #73728	; 0x12000
   10d70:	ldr	pc, [ip, #688]!	; 0x2b0

00010d74 <coda_set_option_use_mmap@plt>:
   10d74:	add	ip, pc, #0, 12
   10d78:	add	ip, ip, #73728	; 0x12000
   10d7c:	ldr	pc, [ip, #680]!	; 0x2a8

00010d80 <coda_cursor_print_path@plt>:
   10d80:	add	ip, pc, #0, 12
   10d84:	add	ip, ip, #73728	; 0x12000
   10d88:	ldr	pc, [ip, #672]!	; 0x2a0

00010d8c <coda_set_definition_path_conditional@plt>:
   10d8c:	add	ip, pc, #0, 12
   10d90:	add	ip, ip, #73728	; 0x12000
   10d94:	ldr	pc, [ip, #664]!	; 0x298

00010d98 <coda_set_definition_path@plt>:
   10d98:	add	ip, pc, #0, 12
   10d9c:	add	ip, ip, #73728	; 0x12000
   10da0:	ldr	pc, [ip, #656]!	; 0x290

00010da4 <coda_recognize_file@plt>:
   10da4:	add	ip, pc, #0, 12
   10da8:	add	ip, ip, #73728	; 0x12000
   10dac:	ldr	pc, [ip, #648]!	; 0x288

00010db0 <fwrite@plt>:
   10db0:	add	ip, pc, #0, 12
   10db4:	add	ip, ip, #73728	; 0x12000
   10db8:	ldr	pc, [ip, #640]!	; 0x280

00010dbc <coda_type_get_format_name@plt>:
   10dbc:	add	ip, pc, #0, 12
   10dc0:	add	ip, ip, #73728	; 0x12000
   10dc4:	ldr	pc, [ip, #632]!	; 0x278

00010dc8 <coda_done@plt>:
   10dc8:	add	ip, pc, #0, 12
   10dcc:	add	ip, ip, #73728	; 0x12000
   10dd0:	ldr	pc, [ip, #624]!	; 0x270

00010dd4 <puts@plt>:
   10dd4:	add	ip, pc, #0, 12
   10dd8:	add	ip, ip, #73728	; 0x12000
   10ddc:	ldr	pc, [ip, #616]!	; 0x268

00010de0 <coda_product_check@plt>:
   10de0:	add	ip, pc, #0, 12
   10de4:	add	ip, ip, #73728	; 0x12000
   10de8:	ldr	pc, [ip, #608]!	; 0x260

00010dec <__libc_start_main@plt>:
   10dec:	add	ip, pc, #0, 12
   10df0:	add	ip, ip, #73728	; 0x12000
   10df4:	ldr	pc, [ip, #600]!	; 0x258

00010df8 <__gmon_start__@plt>:
   10df8:	add	ip, pc, #0, 12
   10dfc:	add	ip, ip, #73728	; 0x12000
   10e00:	ldr	pc, [ip, #592]!	; 0x250

00010e04 <exit@plt>:
   10e04:	add	ip, pc, #0, 12
   10e08:	add	ip, ip, #73728	; 0x12000
   10e0c:	ldr	pc, [ip, #584]!	; 0x248

00010e10 <fprintf@plt>:
   10e10:	add	ip, pc, #0, 12
   10e14:	add	ip, ip, #73728	; 0x12000
   10e18:	ldr	pc, [ip, #576]!	; 0x240

00010e1c <coda_init@plt>:
   10e1c:	add	ip, pc, #0, 12
   10e20:	add	ip, ip, #73728	; 0x12000
   10e24:	ldr	pc, [ip, #568]!	; 0x238

00010e28 <ungetc@plt>:
   10e28:	add	ip, pc, #0, 12
   10e2c:	add	ip, ip, #73728	; 0x12000
   10e30:	ldr	pc, [ip, #560]!	; 0x230

00010e34 <coda_set_option_perform_conversions@plt>:
   10e34:	add	ip, pc, #0, 12
   10e38:	add	ip, ip, #73728	; 0x12000
   10e3c:	ldr	pc, [ip, #552]!	; 0x228

00010e40 <putchar@plt>:
   10e40:	add	ip, pc, #0, 12
   10e44:	add	ip, ip, #73728	; 0x12000
   10e48:	ldr	pc, [ip, #544]!	; 0x220

00010e4c <coda_close@plt>:
   10e4c:	add	ip, pc, #0, 12
   10e50:	add	ip, ip, #73728	; 0x12000
   10e54:	ldr	pc, [ip, #536]!	; 0x218

00010e58 <coda_errno_to_string@plt>:
   10e58:	add	ip, pc, #0, 12
   10e5c:	add	ip, ip, #73728	; 0x12000
   10e60:	ldr	pc, [ip, #528]!	; 0x210

00010e64 <coda_get_libcoda_version@plt>:
   10e64:	add	ip, pc, #0, 12
   10e68:	add	ip, ip, #73728	; 0x12000
   10e6c:	ldr	pc, [ip, #520]!	; 0x208

00010e70 <coda_get_errno@plt>:
   10e70:	add	ip, pc, #0, 12
   10e74:	add	ip, ip, #73728	; 0x12000
   10e78:	ldr	pc, [ip, #512]!	; 0x200

00010e7c <abort@plt>:
   10e7c:	add	ip, pc, #0, 12
   10e80:	add	ip, ip, #73728	; 0x12000
   10e84:	ldr	pc, [ip, #504]!	; 0x1f8

00010e88 <getc@plt>:
   10e88:	add	ip, pc, #0, 12
   10e8c:	add	ip, ip, #73728	; 0x12000
   10e90:	ldr	pc, [ip, #496]!	; 0x1f0

00010e94 <__assert_fail@plt>:
   10e94:	add	ip, pc, #0, 12
   10e98:	add	ip, ip, #73728	; 0x12000
   10e9c:	ldr	pc, [ip, #488]!	; 0x1e8

Disassembly of section .text:

00010ea0 <_start@@Base>:
   10ea0:	mov	fp, #0
   10ea4:	mov	lr, #0
   10ea8:	pop	{r1}		; (ldr r1, [sp], #4)
   10eac:	mov	r2, sp
   10eb0:	push	{r2}		; (str r2, [sp, #-4]!)
   10eb4:	push	{r0}		; (str r0, [sp, #-4]!)
   10eb8:	ldr	ip, [pc, #16]	; 10ed0 <_start@@Base+0x30>
   10ebc:	push	{ip}		; (str ip, [sp, #-4]!)
   10ec0:	ldr	r0, [pc, #12]	; 10ed4 <_start@@Base+0x34>
   10ec4:	ldr	r3, [pc, #12]	; 10ed8 <_start@@Base+0x38>
   10ec8:	bl	10dec <__libc_start_main@plt>
   10ecc:	bl	10e7c <abort@plt>
   10ed0:	andeq	r1, r1, r4, lsl r8
   10ed4:	muleq	r1, r0, pc	; <UNPREDICTABLE>
   10ed8:			; <UNDEFINED> instruction: 0x000117b4
   10edc:	ldr	r3, [pc, #20]	; 10ef8 <_start@@Base+0x58>
   10ee0:	ldr	r2, [pc, #20]	; 10efc <_start@@Base+0x5c>
   10ee4:	add	r3, pc, r3
   10ee8:	ldr	r2, [r3, r2]
   10eec:	cmp	r2, #0
   10ef0:	bxeq	lr
   10ef4:	b	10df8 <__gmon_start__@plt>
   10ef8:	andeq	r2, r1, r4, lsl r1
   10efc:	andeq	r0, r0, r8, lsl #1
   10f00:	ldr	r0, [pc, #24]	; 10f20 <_start@@Base+0x80>
   10f04:	ldr	r3, [pc, #24]	; 10f24 <_start@@Base+0x84>
   10f08:	cmp	r3, r0
   10f0c:	bxeq	lr
   10f10:	ldr	r3, [pc, #16]	; 10f28 <_start@@Base+0x88>
   10f14:	cmp	r3, #0
   10f18:	bxeq	lr
   10f1c:	bx	r3
   10f20:	muleq	r2, r4, r0
   10f24:	muleq	r2, r4, r0
   10f28:	andeq	r0, r0, r0
   10f2c:	ldr	r0, [pc, #36]	; 10f58 <_start@@Base+0xb8>
   10f30:	ldr	r1, [pc, #36]	; 10f5c <_start@@Base+0xbc>
   10f34:	sub	r1, r1, r0
   10f38:	asr	r1, r1, #2
   10f3c:	add	r1, r1, r1, lsr #31
   10f40:	asrs	r1, r1, #1
   10f44:	bxeq	lr
   10f48:	ldr	r3, [pc, #16]	; 10f60 <_start@@Base+0xc0>
   10f4c:	cmp	r3, #0
   10f50:	bxeq	lr
   10f54:	bx	r3
   10f58:	muleq	r2, r4, r0
   10f5c:	muleq	r2, r4, r0
   10f60:	andeq	r0, r0, r0
   10f64:	push	{r4, lr}
   10f68:	ldr	r4, [pc, #24]	; 10f88 <_start@@Base+0xe8>
   10f6c:	ldrb	r3, [r4]
   10f70:	cmp	r3, #0
   10f74:	popne	{r4, pc}
   10f78:	bl	10f00 <_start@@Base+0x60>
   10f7c:	mov	r3, #1
   10f80:	strb	r3, [r4]
   10f84:	pop	{r4, pc}
   10f88:	andeq	r3, r2, r4, lsr #1
   10f8c:	b	10f2c <_start@@Base+0x8c>

00010f90 <main@@Base>:
   10f90:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10f94:	add	fp, sp, #28
   10f98:	sub	sp, sp, #1004	; 0x3ec
   10f9c:	mov	r5, r1
   10fa0:	movw	r1, #12468	; 0x30b4
   10fa4:	mov	r4, r0
   10fa8:	mov	r0, #0
   10fac:	movw	r9, #12464	; 0x30b0
   10fb0:	movt	r1, #2
   10fb4:	movt	r9, #2
   10fb8:	cmp	r4, #1
   10fbc:	str	r0, [r1]
   10fc0:	movw	r1, #12456	; 0x30a8
   10fc4:	str	r0, [r9]
   10fc8:	movt	r1, #2
   10fcc:	str	r0, [r1]
   10fd0:	beq	11334 <main@@Base+0x3a4>
   10fd4:	ldr	r6, [r5, #4]
   10fd8:	movw	r1, #6180	; 0x1824
   10fdc:	movt	r1, #1
   10fe0:	mov	r0, r6
   10fe4:	bl	10d38 <strcmp@plt>
   10fe8:	cmp	r0, #0
   10fec:	beq	11334 <main@@Base+0x3a4>
   10ff0:	movw	r1, #7351	; 0x1cb7
   10ff4:	mov	r0, r6
   10ff8:	movt	r1, #1
   10ffc:	bl	10d38 <strcmp@plt>
   11000:	cmp	r0, #0
   11004:	beq	11334 <main@@Base+0x3a4>
   11008:	movw	r1, #6183	; 0x1827
   1100c:	mov	r0, r6
   11010:	movt	r1, #1
   11014:	bl	10d38 <strcmp@plt>
   11018:	cmp	r0, #0
   1101c:	beq	11340 <main@@Base+0x3b0>
   11020:	movw	r1, #7406	; 0x1cee
   11024:	mov	r0, r6
   11028:	movt	r1, #1
   1102c:	bl	10d38 <strcmp@plt>
   11030:	cmp	r0, #0
   11034:	beq	11340 <main@@Base+0x3b0>
   11038:	cmp	r4, #3
   1103c:	blt	11058 <main@@Base+0xc8>
   11040:	movw	r1, #6186	; 0x182a
   11044:	mov	r0, r6
   11048:	movt	r1, #1
   1104c:	bl	10d38 <strcmp@plt>
   11050:	cmp	r0, #0
   11054:	beq	112bc <main@@Base+0x32c>
   11058:	ldr	r0, [r5]
   1105c:	movw	r2, #6189	; 0x182d
   11060:	mov	r1, #0
   11064:	movt	r2, #1
   11068:	bl	10d8c <coda_set_definition_path_conditional@plt>
   1106c:	mov	r8, #1
   11070:	cmp	r0, #0
   11074:	bne	1134c <main@@Base+0x3bc>
   11078:	mov	sl, #0
   1107c:	mov	r6, #1
   11080:	cmp	r8, r4
   11084:	bge	11198 <main@@Base+0x208>
   11088:	movw	r7, #6215	; 0x1847
   1108c:	rsb	r8, r8, #0
   11090:	mov	r6, #1
   11094:	movt	r7, #1
   11098:	ldr	sl, [r5, -r8, lsl #2]
   1109c:	mov	r1, r7
   110a0:	mov	r0, sl
   110a4:	bl	10d38 <strcmp@plt>
   110a8:	cmp	r0, #0
   110ac:	mov	r0, r9
   110b0:	beq	11170 <main@@Base+0x1e0>
   110b4:	movw	r1, #7063	; 0x1b97
   110b8:	mov	r0, sl
   110bc:	movt	r1, #1
   110c0:	bl	10d38 <strcmp@plt>
   110c4:	cmp	r0, #0
   110c8:	mov	r0, r9
   110cc:	beq	11170 <main@@Base+0x1e0>
   110d0:	movw	r1, #6218	; 0x184a
   110d4:	mov	r0, sl
   110d8:	movt	r1, #1
   110dc:	bl	10d38 <strcmp@plt>
   110e0:	cmp	r0, #0
   110e4:	movw	r0, #12468	; 0x30b4
   110e8:	movt	r0, #2
   110ec:	beq	11170 <main@@Base+0x1e0>
   110f0:	movw	r1, #6922	; 0x1b0a
   110f4:	mov	r0, sl
   110f8:	movt	r1, #1
   110fc:	bl	10d38 <strcmp@plt>
   11100:	cmp	r0, #0
   11104:	movw	r0, #12468	; 0x30b4
   11108:	movt	r0, #2
   1110c:	beq	11170 <main@@Base+0x1e0>
   11110:	movw	r1, #6221	; 0x184d
   11114:	mov	r0, sl
   11118:	movt	r1, #1
   1111c:	bl	10d38 <strcmp@plt>
   11120:	cmp	r0, #0
   11124:	movw	r0, #12456	; 0x30a8
   11128:	movt	r0, #2
   1112c:	beq	11170 <main@@Base+0x1e0>
   11130:	movw	r1, #6671	; 0x1a0f
   11134:	mov	r0, sl
   11138:	movt	r1, #1
   1113c:	bl	10d38 <strcmp@plt>
   11140:	cmp	r0, #0
   11144:	movw	r0, #12456	; 0x30a8
   11148:	movt	r0, #2
   1114c:	beq	11170 <main@@Base+0x1e0>
   11150:	movw	r1, #7154	; 0x1bf2
   11154:	mov	r0, sl
   11158:	movt	r1, #1
   1115c:	bl	10d38 <strcmp@plt>
   11160:	mov	r1, #0
   11164:	cmp	r0, #0
   11168:	beq	1117c <main@@Base+0x1ec>
   1116c:	b	112cc <main@@Base+0x33c>
   11170:	mov	r1, #1
   11174:	str	r1, [r0]
   11178:	mov	r1, r6
   1117c:	sub	r8, r8, #1
   11180:	mov	r6, r1
   11184:	adds	r0, r4, r8
   11188:	bne	11098 <main@@Base+0x108>
   1118c:	mov	r8, r4
   11190:	mov	r6, r1
   11194:	mov	sl, #0
   11198:	bl	10e1c <coda_init@plt>
   1119c:	cmp	r0, #0
   111a0:	bne	1134c <main@@Base+0x3bc>
   111a4:	mov	r0, #0
   111a8:	mov	r7, #0
   111ac:	bl	10d2c <coda_set_option_perform_boundary_checks@plt>
   111b0:	mov	r0, #0
   111b4:	bl	10e34 <coda_set_option_perform_conversions@plt>
   111b8:	mov	r0, r6
   111bc:	bl	10d74 <coda_set_option_use_mmap@plt>
   111c0:	cmp	sl, #0
   111c4:	beq	1126c <main@@Base+0x2dc>
   111c8:	movw	r5, #12448	; 0x30a0
   111cc:	mov	r4, sp
   111d0:	movt	r5, #2
   111d4:	b	111e8 <main@@Base+0x258>
   111d8:	strb	r0, [r4, r7]
   111dc:	add	r7, r7, #1
   111e0:	cmp	r7, #1000	; 0x3e8
   111e4:	beq	1124c <main@@Base+0x2bc>
   111e8:	ldr	r0, [r5]
   111ec:	bl	10e88 <getc@plt>
   111f0:	uxtb	r1, r0
   111f4:	cmp	r1, #10
   111f8:	beq	11220 <main@@Base+0x290>
   111fc:	cmp	r1, #13
   11200:	bne	111d8 <main@@Base+0x248>
   11204:	ldr	r0, [r5]
   11208:	bl	10e88 <getc@plt>
   1120c:	uxtb	r0, r0
   11210:	cmp	r0, #10
   11214:	beq	11220 <main@@Base+0x290>
   11218:	ldr	r1, [r5]
   1121c:	bl	10e28 <ungetc@plt>
   11220:	mov	r0, #0
   11224:	cmp	r7, #0
   11228:	strb	r0, [r4, r7]
   1122c:	mov	r7, #0
   11230:	beq	111e8 <main@@Base+0x258>
   11234:	mov	r0, r4
   11238:	bl	11380 <main@@Base+0x3f0>
   1123c:	mov	r0, #0
   11240:	mov	r7, #0
   11244:	bl	10d68 <fflush@plt>
   11248:	b	111e8 <main@@Base+0x258>
   1124c:	movw	r0, #6252	; 0x186c
   11250:	movw	r1, #6261	; 0x1875
   11254:	movw	r3, #6341	; 0x18c5
   11258:	mov	r2, #316	; 0x13c
   1125c:	movt	r0, #1
   11260:	movt	r1, #1
   11264:	movt	r3, #1
   11268:	bl	10e94 <__assert_fail@plt>
   1126c:	cmp	r8, r4
   11270:	bge	11294 <main@@Base+0x304>
   11274:	add	r5, r5, r8, lsl #2
   11278:	sub	r4, r4, r8
   1127c:	ldr	r0, [r5], #4
   11280:	bl	11380 <main@@Base+0x3f0>
   11284:	mov	r0, #0
   11288:	bl	10d68 <fflush@plt>
   1128c:	subs	r4, r4, #1
   11290:	bne	1127c <main@@Base+0x2ec>
   11294:	bl	10dc8 <coda_done@plt>
   11298:	movw	r0, #12460	; 0x30ac
   1129c:	movt	r0, #2
   112a0:	ldr	r0, [r0]
   112a4:	cmp	r0, #0
   112a8:	moveq	r0, #0
   112ac:	subeq	sp, fp, #28
   112b0:	popeq	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   112b4:	mov	r0, #1
   112b8:	bl	10e04 <exit@plt>
   112bc:	ldr	r0, [r5, #8]
   112c0:	bl	10d98 <coda_set_definition_path@plt>
   112c4:	mov	r8, #3
   112c8:	b	11078 <main@@Base+0xe8>
   112cc:	movw	r1, #6224	; 0x1850
   112d0:	mov	r0, sl
   112d4:	movt	r1, #1
   112d8:	bl	10d38 <strcmp@plt>
   112dc:	add	r1, r4, r8
   112e0:	rsb	r8, r8, #0
   112e4:	cmp	r1, #1
   112e8:	cmpeq	r0, #0
   112ec:	beq	1132c <main@@Base+0x39c>
   112f0:	ldrb	r0, [sl]
   112f4:	mov	sl, #0
   112f8:	cmp	r0, #45	; 0x2d
   112fc:	bne	11198 <main@@Base+0x208>
   11300:	movw	r0, #12440	; 0x3098
   11304:	mov	r1, #25
   11308:	mov	r2, #1
   1130c:	movt	r0, #2
   11310:	ldr	r3, [r0]
   11314:	movw	r0, #6226	; 0x1852
   11318:	movt	r0, #1
   1131c:	bl	10db0 <fwrite@plt>
   11320:	bl	115a4 <main@@Base+0x614>
   11324:	mov	r0, #1
   11328:	bl	10e04 <exit@plt>
   1132c:	mov	sl, #1
   11330:	b	11198 <main@@Base+0x208>
   11334:	bl	115a4 <main@@Base+0x614>
   11338:	mov	r0, #0
   1133c:	bl	10e04 <exit@plt>
   11340:	bl	11728 <main@@Base+0x798>
   11344:	mov	r0, #0
   11348:	bl	10e04 <exit@plt>
   1134c:	movw	r0, #12440	; 0x3098
   11350:	movt	r0, #2
   11354:	ldr	r4, [r0]
   11358:	bl	10e70 <coda_get_errno@plt>
   1135c:	ldr	r0, [r0]
   11360:	bl	10e58 <coda_errno_to_string@plt>
   11364:	movw	r1, #6434	; 0x1922
   11368:	mov	r2, r0
   1136c:	mov	r0, r4
   11370:	movt	r1, #1
   11374:	bl	10e10 <fprintf@plt>
   11378:	mov	r0, #1
   1137c:	bl	10e04 <exit@plt>
   11380:	push	{r4, sl, fp, lr}
   11384:	add	fp, sp, #8
   11388:	sub	sp, sp, #40	; 0x28
   1138c:	mov	r4, r0
   11390:	bl	10dd4 <puts@plt>
   11394:	add	r0, sp, #12
   11398:	add	r1, sp, #16
   1139c:	sub	r2, fp, #16
   113a0:	add	r3, sp, #20
   113a4:	str	r1, [sp]
   113a8:	str	r0, [sp, #4]
   113ac:	add	r1, sp, #24
   113b0:	mov	r0, r4
   113b4:	bl	10da4 <coda_recognize_file@plt>
   113b8:	cmp	r0, #0
   113bc:	beq	113ec <main@@Base+0x45c>
   113c0:	bl	10e70 <coda_get_errno@plt>
   113c4:	ldr	r0, [r0]
   113c8:	bl	10e58 <coda_errno_to_string@plt>
   113cc:	mov	r1, r0
   113d0:	movw	r0, #6386	; 0x18f2
   113d4:	movt	r0, #1
   113d8:	bl	10d44 <printf@plt>
   113dc:	mov	r0, #0
   113e0:	mov	r1, #0
   113e4:	bl	10d50 <coda_set_error@plt>
   113e8:	b	114e4 <main@@Base+0x554>
   113ec:	movw	r0, #12456	; 0x30a8
   113f0:	movt	r0, #2
   113f4:	ldr	r0, [r0]
   113f8:	cmp	r0, #0
   113fc:	beq	11424 <main@@Base+0x494>
   11400:	ldr	r0, [sp, #20]
   11404:	cmp	r0, #0
   11408:	ldrne	r0, [sp, #16]
   1140c:	cmpne	r0, #0
   11410:	bne	11424 <main@@Base+0x494>
   11414:	movw	r0, #6462	; 0x193e
   11418:	movt	r0, #1
   1141c:	bl	10dd4 <puts@plt>
   11420:	b	114e4 <main@@Base+0x554>
   11424:	movw	r0, #12464	; 0x30b0
   11428:	movt	r0, #2
   1142c:	ldr	r0, [r0]
   11430:	cmp	r0, #0
   11434:	beq	1147c <main@@Base+0x4ec>
   11438:	ldr	r0, [fp, #-16]
   1143c:	bl	10dbc <coda_type_get_format_name@plt>
   11440:	mov	r1, r0
   11444:	movw	r0, #6400	; 0x1900
   11448:	movt	r0, #1
   1144c:	bl	10d44 <printf@plt>
   11450:	ldr	r1, [sp, #20]
   11454:	cmp	r1, #0
   11458:	ldrne	r2, [sp, #16]
   1145c:	cmpne	r2, #0
   11460:	beq	11474 <main@@Base+0x4e4>
   11464:	ldr	r3, [sp, #12]
   11468:	movw	r0, #6421	; 0x1915
   1146c:	movt	r0, #1
   11470:	bl	10d44 <printf@plt>
   11474:	mov	r0, #10
   11478:	bl	10e40 <putchar@plt>
   1147c:	sub	r1, fp, #12
   11480:	mov	r0, r4
   11484:	bl	10d5c <coda_open@plt>
   11488:	cmp	r0, #0
   1148c:	beq	114fc <main@@Base+0x56c>
   11490:	bl	10e70 <coda_get_errno@plt>
   11494:	ldr	r0, [r0]
   11498:	cmn	r0, #21
   1149c:	bne	114c8 <main@@Base+0x538>
   114a0:	mov	r0, #0
   114a4:	bl	10d74 <coda_set_option_use_mmap@plt>
   114a8:	sub	r1, fp, #12
   114ac:	mov	r0, r4
   114b0:	bl	10d5c <coda_open@plt>
   114b4:	mov	r4, r0
   114b8:	mov	r0, #1
   114bc:	bl	10d74 <coda_set_option_use_mmap@plt>
   114c0:	cmp	r4, #0
   114c4:	beq	114fc <main@@Base+0x56c>
   114c8:	bl	10e70 <coda_get_errno@plt>
   114cc:	ldr	r0, [r0]
   114d0:	bl	10e58 <coda_errno_to_string@plt>
   114d4:	mov	r1, r0
   114d8:	movw	r0, #6386	; 0x18f2
   114dc:	movt	r0, #1
   114e0:	bl	10d44 <printf@plt>
   114e4:	movw	r0, #12460	; 0x30ac
   114e8:	mov	r1, #1
   114ec:	movt	r0, #2
   114f0:	str	r1, [r0]
   114f4:	sub	sp, fp, #8
   114f8:	pop	{r4, sl, fp, pc}
   114fc:	movw	r0, #12468	; 0x30b4
   11500:	movw	r2, #5980	; 0x175c
   11504:	mov	r3, #0
   11508:	movt	r0, #2
   1150c:	movt	r2, #1
   11510:	ldr	r1, [r0]
   11514:	ldr	r0, [fp, #-12]
   11518:	clz	r1, r1
   1151c:	lsr	r1, r1, #5
   11520:	bl	10de0 <coda_product_check@plt>
   11524:	cmp	r0, #0
   11528:	beq	11568 <main@@Base+0x5d8>
   1152c:	bl	10e70 <coda_get_errno@plt>
   11530:	ldr	r0, [r0]
   11534:	bl	10e58 <coda_errno_to_string@plt>
   11538:	mov	r1, r0
   1153c:	movw	r0, #6386	; 0x18f2
   11540:	movt	r0, #1
   11544:	bl	10d44 <printf@plt>
   11548:	movw	r0, #12460	; 0x30ac
   1154c:	mov	r1, #1
   11550:	movt	r0, #2
   11554:	str	r1, [r0]
   11558:	ldr	r0, [fp, #-12]
   1155c:	bl	10e4c <coda_close@plt>
   11560:	sub	sp, fp, #8
   11564:	pop	{r4, sl, fp, pc}
   11568:	ldr	r0, [fp, #-12]
   1156c:	bl	10e4c <coda_close@plt>
   11570:	cmp	r0, #0
   11574:	beq	11594 <main@@Base+0x604>
   11578:	bl	10e70 <coda_get_errno@plt>
   1157c:	ldr	r0, [r0]
   11580:	bl	10e58 <coda_errno_to_string@plt>
   11584:	mov	r1, r0
   11588:	movw	r0, #6432	; 0x1920
   1158c:	movt	r0, #1
   11590:	b	114e0 <main@@Base+0x550>
   11594:	mov	r0, #10
   11598:	bl	10e40 <putchar@plt>
   1159c:	sub	sp, fp, #8
   115a0:	pop	{r4, sl, fp, pc}
   115a4:	push	{fp, lr}
   115a8:	mov	fp, sp
   115ac:	movw	r0, #6505	; 0x1969
   115b0:	movt	r0, #1
   115b4:	bl	10dd4 <puts@plt>
   115b8:	movw	r0, #6512	; 0x1970
   115bc:	movt	r0, #1
   115c0:	bl	10dd4 <puts@plt>
   115c4:	movw	r0, #6566	; 0x19a6
   115c8:	movt	r0, #1
   115cc:	bl	10dd4 <puts@plt>
   115d0:	movw	r0, #6638	; 0x19ee
   115d4:	movt	r0, #1
   115d8:	bl	10dd4 <puts@plt>
   115dc:	movw	r0, #6655	; 0x19ff
   115e0:	movt	r0, #1
   115e4:	bl	10dd4 <puts@plt>
   115e8:	movw	r0, #6684	; 0x1a1c
   115ec:	movt	r0, #1
   115f0:	bl	10dd4 <puts@plt>
   115f4:	movw	r0, #6761	; 0x1a69
   115f8:	movt	r0, #1
   115fc:	bl	10dd4 <puts@plt>
   11600:	movw	r0, #6830	; 0x1aae
   11604:	movt	r0, #1
   11608:	bl	10dd4 <puts@plt>
   1160c:	movw	r0, #6906	; 0x1afa
   11610:	movt	r0, #1
   11614:	bl	10dd4 <puts@plt>
   11618:	movw	r0, #6930	; 0x1b12
   1161c:	movt	r0, #1
   11620:	bl	10dd4 <puts@plt>
   11624:	movw	r0, #6992	; 0x1b50
   11628:	movt	r0, #1
   1162c:	bl	10dd4 <puts@plt>
   11630:	movw	r0, #7047	; 0x1b87
   11634:	movt	r0, #1
   11638:	bl	10dd4 <puts@plt>
   1163c:	movw	r0, #7073	; 0x1ba1
   11640:	movt	r0, #1
   11644:	bl	10dd4 <puts@plt>
   11648:	movw	r0, #7142	; 0x1be6
   1164c:	movt	r0, #1
   11650:	bl	10dd4 <puts@plt>
   11654:	movw	r0, #7164	; 0x1bfc
   11658:	movt	r0, #1
   1165c:	bl	10dd4 <puts@plt>
   11660:	mov	r0, #10
   11664:	bl	10e40 <putchar@plt>
   11668:	movw	r0, #7227	; 0x1c3b
   1166c:	movt	r0, #1
   11670:	bl	10dd4 <puts@plt>
   11674:	movw	r0, #7305	; 0x1c89
   11678:	movt	r0, #1
   1167c:	bl	10dd4 <puts@plt>
   11680:	mov	r0, #10
   11684:	bl	10e40 <putchar@plt>
   11688:	movw	r0, #7333	; 0x1ca5
   1168c:	movt	r0, #1
   11690:	bl	10dd4 <puts@plt>
   11694:	movw	r0, #7358	; 0x1cbe
   11698:	movt	r0, #1
   1169c:	bl	10dd4 <puts@plt>
   116a0:	mov	r0, #10
   116a4:	bl	10e40 <putchar@plt>
   116a8:	movw	r0, #7388	; 0x1cdc
   116ac:	movt	r0, #1
   116b0:	bl	10dd4 <puts@plt>
   116b4:	movw	r0, #7416	; 0x1cf8
   116b8:	movt	r0, #1
   116bc:	bl	10dd4 <puts@plt>
   116c0:	mov	r0, #10
   116c4:	bl	10e40 <putchar@plt>
   116c8:	movw	r0, #7466	; 0x1d2a
   116cc:	movt	r0, #1
   116d0:	bl	10dd4 <puts@plt>
   116d4:	movw	r0, #7544	; 0x1d78
   116d8:	movt	r0, #1
   116dc:	bl	10dd4 <puts@plt>
   116e0:	movw	r0, #7617	; 0x1dc1
   116e4:	movt	r0, #1
   116e8:	bl	10dd4 <puts@plt>
   116ec:	movw	r0, #7660	; 0x1dec
   116f0:	movt	r0, #1
   116f4:	bl	10dd4 <puts@plt>
   116f8:	movw	r0, #7736	; 0x1e38
   116fc:	movt	r0, #1
   11700:	bl	10dd4 <puts@plt>
   11704:	movw	r0, #7806	; 0x1e7e
   11708:	movt	r0, #1
   1170c:	bl	10dd4 <puts@plt>
   11710:	movw	r0, #7869	; 0x1ebd
   11714:	movt	r0, #1
   11718:	bl	10dd4 <puts@plt>
   1171c:	mov	r0, #10
   11720:	pop	{fp, lr}
   11724:	b	10e40 <putchar@plt>
   11728:	push	{fp, lr}
   1172c:	mov	fp, sp
   11730:	bl	10e64 <coda_get_libcoda_version@plt>
   11734:	mov	r1, r0
   11738:	movw	r0, #6364	; 0x18dc
   1173c:	movt	r0, #1
   11740:	bl	10d44 <printf@plt>
   11744:	movw	r0, #7933	; 0x1efd
   11748:	movt	r0, #1
   1174c:	bl	10dd4 <puts@plt>
   11750:	mov	r0, #10
   11754:	pop	{fp, lr}
   11758:	b	10e40 <putchar@plt>
   1175c:	push	{r4, sl, fp, lr}
   11760:	add	fp, sp, #8
   11764:	mov	r4, r0
   11768:	movw	r0, #6445	; 0x192d
   1176c:	movt	r0, #1
   11770:	bl	10d44 <printf@plt>
   11774:	cmp	r4, #0
   11778:	beq	11798 <main@@Base+0x808>
   1177c:	movw	r0, #6457	; 0x1939
   11780:	movt	r0, #1
   11784:	bl	10d44 <printf@plt>
   11788:	movw	r1, #3396	; 0xd44
   1178c:	mov	r0, r4
   11790:	movt	r1, #1
   11794:	bl	10d80 <coda_cursor_print_path@plt>
   11798:	mov	r0, #10
   1179c:	bl	10e40 <putchar@plt>
   117a0:	movw	r0, #12460	; 0x30ac
   117a4:	mov	r1, #1
   117a8:	movt	r0, #2
   117ac:	str	r1, [r0]
   117b0:	pop	{r4, sl, fp, pc}

000117b4 <__libc_csu_init@@Base>:
   117b4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   117b8:	mov	r7, r0
   117bc:	ldr	r6, [pc, #72]	; 1180c <__libc_csu_init@@Base+0x58>
   117c0:	ldr	r5, [pc, #72]	; 11810 <__libc_csu_init@@Base+0x5c>
   117c4:	add	r6, pc, r6
   117c8:	add	r5, pc, r5
   117cc:	sub	r6, r6, r5
   117d0:	mov	r8, r1
   117d4:	mov	r9, r2
   117d8:	bl	10d0c <coda_set_option_perform_boundary_checks@plt-0x20>
   117dc:	asrs	r6, r6, #2
   117e0:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   117e4:	mov	r4, #0
   117e8:	add	r4, r4, #1
   117ec:	ldr	r3, [r5], #4
   117f0:	mov	r2, r9
   117f4:	mov	r1, r8
   117f8:	mov	r0, r7
   117fc:	blx	r3
   11800:	cmp	r6, r4
   11804:	bne	117e8 <__libc_csu_init@@Base+0x34>
   11808:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1180c:	andeq	r1, r1, r8, lsr #14
   11810:	andeq	r1, r1, r0, lsr #14

00011814 <__libc_csu_fini@@Base>:
   11814:	bx	lr

Disassembly of section .fini:

00011818 <.fini>:
   11818:	push	{r3, lr}
   1181c:	pop	{r3, pc}
