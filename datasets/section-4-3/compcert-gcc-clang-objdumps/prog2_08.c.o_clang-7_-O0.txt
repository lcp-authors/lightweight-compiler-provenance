
../compcert-repos/prog2/CMakeFiles/0.8.dir/Aula00_Conceitos_base/08.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <lerpontuacoes>:
   0:	push	{fp, lr}
   4:	mov	fp, sp
   8:	sub	sp, sp, #32
   c:	str	r0, [fp, #-4]
  10:	str	r1, [fp, #-8]
  14:	movw	r0, #0
  18:	movt	r0, #0
  1c:	sub	r1, fp, #12
  20:	bl	0 <__isoc99_scanf>
  24:	movw	r1, #0
  28:	str	r1, [sp, #16]
  2c:	str	r0, [sp, #12]
  30:	ldr	r0, [sp, #16]
  34:	ldr	r1, [fp, #-12]
  38:	cmp	r0, r1
  3c:	bge	84 <lerpontuacoes+0x84>
  40:	ldr	r0, [fp, #-4]
  44:	ldr	r1, [sp, #16]
  48:	mov	r2, #50	; 0x32
  4c:	mla	r0, r1, r2, r0
  50:	ldr	r2, [fp, #-8]
  54:	add	r2, r2, r1, lsl #2
  58:	movw	r1, #0
  5c:	movt	r1, #0
  60:	str	r0, [sp, #8]
  64:	mov	r0, r1
  68:	ldr	r1, [sp, #8]
  6c:	bl	0 <__isoc99_scanf>
  70:	str	r0, [sp, #4]
  74:	ldr	r0, [sp, #16]
  78:	add	r0, r0, #1
  7c:	str	r0, [sp, #16]
  80:	b	30 <lerpontuacoes+0x30>
  84:	ldr	r0, [fp, #-12]
  88:	mov	sp, fp
  8c:	pop	{fp, pc}

00000090 <primeiroUltimo>:
  90:	push	{fp, lr}
  94:	mov	fp, sp
  98:	sub	sp, sp, #40	; 0x28
  9c:	ldr	ip, [fp, #8]
  a0:	str	r0, [fp, #-4]
  a4:	str	r1, [fp, #-8]
  a8:	str	r2, [fp, #-12]
  ac:	str	r3, [fp, #-16]
  b0:	ldr	r0, [fp, #-8]
  b4:	ldr	r0, [r0]
  b8:	str	r0, [sp, #16]
  bc:	ldr	r0, [fp, #-8]
  c0:	ldr	r0, [r0]
  c4:	str	r0, [sp, #12]
  c8:	movw	r0, #1
  cc:	str	r0, [sp, #20]
  d0:	str	ip, [sp, #8]
  d4:	ldr	r0, [sp, #20]
  d8:	ldr	r1, [fp, #-12]
  dc:	cmp	r0, r1
  e0:	bge	198 <primeiroUltimo+0x108>
  e4:	ldr	r0, [fp, #-8]
  e8:	ldr	r1, [sp, #20]
  ec:	add	r0, r0, r1, lsl #2
  f0:	ldr	r0, [r0]
  f4:	ldr	r1, [sp, #16]
  f8:	cmp	r0, r1
  fc:	ble	134 <primeiroUltimo+0xa4>
 100:	ldr	r0, [fp, #-8]
 104:	ldr	r1, [sp, #20]
 108:	add	r0, r0, r1, lsl #2
 10c:	ldr	r0, [r0]
 110:	str	r0, [sp, #16]
 114:	ldr	r0, [fp, #-16]
 118:	ldr	r1, [fp, #-4]
 11c:	ldr	r2, [sp, #20]
 120:	movw	r3, #50	; 0x32
 124:	mul	r2, r2, r3
 128:	add	r1, r1, r2
 12c:	bl	0 <strcpy>
 130:	str	r0, [sp, #4]
 134:	ldr	r0, [fp, #-8]
 138:	ldr	r1, [sp, #20]
 13c:	add	r0, r0, r1, lsl #2
 140:	ldr	r0, [r0]
 144:	ldr	r1, [sp, #12]
 148:	cmp	r0, r1
 14c:	bge	184 <primeiroUltimo+0xf4>
 150:	ldr	r0, [fp, #-8]
 154:	ldr	r1, [sp, #20]
 158:	add	r0, r0, r1, lsl #2
 15c:	ldr	r0, [r0]
 160:	str	r0, [sp, #12]
 164:	ldr	r0, [fp, #8]
 168:	ldr	r1, [fp, #-4]
 16c:	ldr	r2, [sp, #20]
 170:	movw	r3, #50	; 0x32
 174:	mul	r2, r2, r3
 178:	add	r1, r1, r2
 17c:	bl	0 <strcpy>
 180:	str	r0, [sp]
 184:	b	188 <primeiroUltimo+0xf8>
 188:	ldr	r0, [sp, #20]
 18c:	add	r0, r0, #1
 190:	str	r0, [sp, #20]
 194:	b	d4 <primeiroUltimo+0x44>
 198:	mov	sp, fp
 19c:	pop	{fp, pc}

000001a0 <main>:
 1a0:	push	{r4, r5, fp, lr}
 1a4:	add	fp, sp, #8
 1a8:	sub	sp, sp, #1232	; 0x4d0
 1ac:	sub	r0, fp, #96	; 0x60
 1b0:	add	r1, sp, #144	; 0x90
 1b4:	movw	r2, #0
 1b8:	str	r2, [fp, #-12]
 1bc:	mov	r2, r0
 1c0:	str	r0, [sp, #40]	; 0x28
 1c4:	mov	r0, r2
 1c8:	movw	r2, #0
 1cc:	and	r3, r2, #255	; 0xff
 1d0:	str	r1, [sp, #36]	; 0x24
 1d4:	mov	r1, r3
 1d8:	movw	r3, #80	; 0x50
 1dc:	str	r2, [sp, #32]
 1e0:	mov	r2, r3
 1e4:	bl	0 <memset>
 1e8:	ldr	r0, [sp, #36]	; 0x24
 1ec:	ldr	r1, [sp, #32]
 1f0:	and	r1, r1, #255	; 0xff
 1f4:	movw	r2, #1000	; 0x3e8
 1f8:	bl	0 <memset>
 1fc:	add	r0, sp, #94	; 0x5e
 200:	ldr	r1, [sp, #32]
 204:	and	r1, r1, #255	; 0xff
 208:	movw	r2, #50	; 0x32
 20c:	str	r2, [sp, #28]
 210:	bl	0 <memset>
 214:	add	r0, sp, #44	; 0x2c
 218:	ldr	r1, [sp, #32]
 21c:	and	r1, r1, #255	; 0xff
 220:	ldr	r2, [sp, #28]
 224:	bl	0 <memset>
 228:	ldr	r0, [sp, #36]	; 0x24
 22c:	ldr	r1, [sp, #40]	; 0x28
 230:	bl	0 <lerpontuacoes>
 234:	add	r1, sp, #44	; 0x2c
 238:	add	r3, sp, #94	; 0x5e
 23c:	sub	r2, fp, #96	; 0x60
 240:	add	lr, sp, #144	; 0x90
 244:	str	r0, [fp, #-16]
 248:	ldr	r0, [fp, #-16]
 24c:	str	r0, [sp, #24]
 250:	mov	r0, lr
 254:	str	r1, [sp, #20]
 258:	mov	r1, r2
 25c:	ldr	r2, [sp, #24]
 260:	ldr	lr, [sp, #20]
 264:	str	lr, [sp]
 268:	bl	90 <primeiroUltimo>
 26c:	ldr	r1, [fp, #-16]
 270:	movw	r0, #0
 274:	movt	r0, #0
 278:	bl	0 <printf>
 27c:	add	r1, sp, #94	; 0x5e
 280:	movw	r2, #0
 284:	movt	r2, #0
 288:	str	r0, [sp, #16]
 28c:	mov	r0, r2
 290:	bl	0 <printf>
 294:	add	r1, sp, #44	; 0x2c
 298:	movw	r2, #0
 29c:	movt	r2, #0
 2a0:	str	r0, [sp, #12]
 2a4:	mov	r0, r2
 2a8:	bl	0 <printf>
 2ac:	movw	r1, #0
 2b0:	str	r0, [sp, #8]
 2b4:	mov	r0, r1
 2b8:	sub	sp, fp, #8
 2bc:	pop	{r4, r5, fp, pc}
