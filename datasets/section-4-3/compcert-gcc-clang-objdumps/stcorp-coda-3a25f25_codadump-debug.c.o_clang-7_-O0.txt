
../compcert-repos/stcorp-coda-3a25f25/CMakeFiles/codadump.dir/tools/codadump/codadump-debug.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <print_debug_data>:
       0:	push	{r4, r5, fp, lr}
       4:	add	fp, sp, #8
       8:	sub	sp, sp, #568	; 0x238
       c:	str	r0, [fp, #-12]
      10:	str	r1, [fp, #-16]
      14:	str	r2, [fp, #-20]	; 0xffffffec
      18:	ldr	r0, [fp, #-12]
      1c:	movw	r1, #0
      20:	cmp	r0, r1
      24:	bne	44 <print_debug_data+0x44>
      28:	movw	r0, #0
      2c:	movt	r0, #0
      30:	ldr	r0, [r0]
      34:	sub	r1, fp, #24
      38:	bl	0 <coda_open>
      3c:	str	r0, [sp, #24]
      40:	b	6c <print_debug_data+0x6c>
      44:	movw	r0, #0
      48:	movt	r0, #0
      4c:	ldr	r0, [r0]
      50:	ldr	r1, [fp, #-12]
      54:	ldr	r2, [fp, #-16]
      58:	ldr	r3, [fp, #-20]	; 0xffffffec
      5c:	sub	ip, fp, #24
      60:	str	ip, [sp]
      64:	bl	0 <coda_open_as>
      68:	str	r0, [sp, #24]
      6c:	ldr	r0, [sp, #24]
      70:	cmp	r0, #0
      74:	beq	f4 <print_debug_data+0xf4>
      78:	bl	0 <coda_get_errno>
      7c:	ldr	r0, [r0]
      80:	cmn	r0, #21
      84:	bne	f4 <print_debug_data+0xf4>
      88:	movw	r0, #0
      8c:	bl	0 <coda_set_option_use_mmap>
      90:	ldr	lr, [fp, #-12]
      94:	movw	r1, #0
      98:	cmp	lr, r1
      9c:	str	r0, [sp, #20]
      a0:	bne	c0 <print_debug_data+0xc0>
      a4:	movw	r0, #0
      a8:	movt	r0, #0
      ac:	ldr	r0, [r0]
      b0:	sub	r1, fp, #24
      b4:	bl	0 <coda_open>
      b8:	str	r0, [sp, #24]
      bc:	b	e8 <print_debug_data+0xe8>
      c0:	movw	r0, #0
      c4:	movt	r0, #0
      c8:	ldr	r0, [r0]
      cc:	ldr	r1, [fp, #-12]
      d0:	ldr	r2, [fp, #-16]
      d4:	ldr	r3, [fp, #-20]	; 0xffffffec
      d8:	sub	ip, fp, #24
      dc:	str	ip, [sp]
      e0:	bl	0 <coda_open_as>
      e4:	str	r0, [sp, #24]
      e8:	movw	r0, #1
      ec:	bl	0 <coda_set_option_use_mmap>
      f0:	str	r0, [sp, #16]
      f4:	ldr	r0, [sp, #24]
      f8:	cmp	r0, #0
      fc:	beq	10c <print_debug_data+0x10c>
     100:	movw	r0, #0
     104:	movt	r0, #0
     108:	blx	r0
     10c:	ldr	r0, [fp, #-24]	; 0xffffffe8
     110:	add	r1, sp, #28
     114:	bl	0 <coda_get_product_format>
     118:	cmp	r0, #0
     11c:	beq	12c <print_debug_data+0x12c>
     120:	movw	r0, #0
     124:	movt	r0, #0
     128:	blx	r0
     12c:	ldr	r0, [sp, #28]
     130:	cmp	r0, #0
     134:	movw	r0, #1
     138:	str	r0, [sp, #12]
     13c:	beq	168 <print_debug_data+0x168>
     140:	ldr	r0, [sp, #28]
     144:	cmp	r0, #1
     148:	movw	r0, #1
     14c:	str	r0, [sp, #12]
     150:	beq	168 <print_debug_data+0x168>
     154:	ldr	r0, [sp, #28]
     158:	cmp	r0, #2
     15c:	movw	r0, #0
     160:	moveq	r0, #1
     164:	str	r0, [sp, #12]
     168:	ldr	r0, [sp, #12]
     16c:	and	r0, r0, #1
     170:	movw	r1, #0
     174:	movt	r1, #0
     178:	str	r0, [r1]
     17c:	ldr	r1, [fp, #-24]	; 0xffffffe8
     180:	add	r0, sp, #32
     184:	bl	0 <coda_cursor_set_product>
     188:	cmp	r0, #0
     18c:	beq	19c <print_debug_data+0x19c>
     190:	movw	r0, #0
     194:	movt	r0, #0
     198:	blx	r0
     19c:	movw	r0, #0
     1a0:	movt	r0, #0
     1a4:	ldr	r0, [r0]
     1a8:	movw	r1, #0
     1ac:	cmp	r0, r1
     1b0:	beq	1e8 <print_debug_data+0x1e8>
     1b4:	movw	r0, #0
     1b8:	movt	r0, #0
     1bc:	ldr	r1, [r0]
     1c0:	add	r0, sp, #32
     1c4:	bl	0 <coda_cursor_goto>
     1c8:	str	r0, [sp, #24]
     1cc:	ldr	r0, [sp, #24]
     1d0:	cmp	r0, #0
     1d4:	beq	1e4 <print_debug_data+0x1e4>
     1d8:	movw	r0, #0
     1dc:	movt	r0, #0
     1e0:	blx	r0
     1e4:	b	1e8 <print_debug_data+0x1e8>
     1e8:	movw	r0, #0
     1ec:	bl	0 <coda_set_option_perform_boundary_checks>
     1f0:	add	lr, sp, #32
     1f4:	str	r0, [sp, #8]
     1f8:	mov	r0, lr
     1fc:	movw	r1, #0
     200:	bl	218 <print_data>
     204:	ldr	r0, [fp, #-24]	; 0xffffffe8
     208:	bl	0 <coda_close>
     20c:	str	r0, [sp, #4]
     210:	sub	sp, fp, #8
     214:	pop	{r4, r5, fp, pc}

00000218 <print_data>:
     218:	push	{r4, r5, fp, lr}
     21c:	add	fp, sp, #8
     220:	sub	sp, sp, #1184	; 0x4a0
     224:	str	r0, [fp, #-12]
     228:	str	r1, [fp, #-16]
     22c:	ldr	r0, [fp, #-12]
     230:	sub	r1, fp, #24
     234:	bl	0 <coda_cursor_has_attributes>
     238:	cmp	r0, #0
     23c:	beq	24c <print_data+0x34>
     240:	movw	r0, #0
     244:	movt	r0, #0
     248:	blx	r0
     24c:	ldr	r0, [fp, #-24]	; 0xffffffe8
     250:	cmp	r0, #0
     254:	beq	2d0 <print_data+0xb8>
     258:	ldr	r0, [fp, #-12]
     25c:	bl	0 <coda_cursor_goto_attributes>
     260:	cmp	r0, #0
     264:	beq	274 <print_data+0x5c>
     268:	movw	r0, #0
     26c:	movt	r0, #0
     270:	blx	r0
     274:	movw	r0, #0
     278:	movt	r0, #0
     27c:	bl	119c <fi_printf>
     280:	movw	lr, #0
     284:	movt	lr, #0
     288:	ldr	r1, [lr]
     28c:	add	r1, r1, #1
     290:	str	r1, [lr]
     294:	ldr	r1, [fp, #-12]
     298:	ldr	lr, [fp, #-16]
     29c:	str	r0, [sp, #220]	; 0xdc
     2a0:	mov	r0, r1
     2a4:	mov	r1, lr
     2a8:	bl	218 <print_data>
     2ac:	movw	r0, #0
     2b0:	movt	r0, #0
     2b4:	ldr	r1, [r0]
     2b8:	mvn	lr, #0
     2bc:	add	r1, r1, lr
     2c0:	str	r1, [r0]
     2c4:	ldr	r0, [fp, #-12]
     2c8:	bl	0 <coda_cursor_goto_parent>
     2cc:	str	r0, [sp, #216]	; 0xd8
     2d0:	ldr	r0, [fp, #-12]
     2d4:	sub	r1, fp, #20
     2d8:	bl	0 <coda_cursor_get_type_class>
     2dc:	cmp	r0, #0
     2e0:	beq	2f0 <print_data+0xd8>
     2e4:	movw	r0, #0
     2e8:	movt	r0, #0
     2ec:	blx	r0
     2f0:	ldr	r0, [fp, #-20]	; 0xffffffec
     2f4:	cmp	r0, #6
     2f8:	str	r0, [sp, #212]	; 0xd4
     2fc:	bhi	1194 <print_data+0xf7c>
     300:	add	r0, pc, #8
     304:	ldr	r1, [sp, #212]	; 0xd4
     308:	ldr	r0, [r0, r1, lsl #2]
     30c:	mov	pc, r0
     310:	.word	0x0000032c
     314:	.word	0x0000075c
     318:	.word	0x00000ab8
     31c:	.word	0x00000ab8
     320:	.word	0x00000ab8
     324:	.word	0x00000ab8
     328:	.word	0x00000f84
     32c:	ldr	r0, [fp, #-12]
     330:	sub	r1, fp, #28
     334:	bl	0 <coda_cursor_get_num_elements>
     338:	cmp	r0, #0
     33c:	beq	34c <print_data+0x134>
     340:	movw	r0, #0
     344:	movt	r0, #0
     348:	blx	r0
     34c:	ldr	r0, [fp, #-28]	; 0xffffffe4
     350:	cmp	r0, #0
     354:	ble	758 <print_data+0x540>
     358:	ldr	r0, [fp, #-12]
     35c:	sub	r1, fp, #32
     360:	bl	0 <coda_cursor_get_type>
     364:	cmp	r0, #0
     368:	beq	378 <print_data+0x160>
     36c:	movw	r0, #0
     370:	movt	r0, #0
     374:	blx	r0
     378:	ldr	r0, [fp, #-32]	; 0xffffffe0
     37c:	sub	r1, fp, #36	; 0x24
     380:	bl	0 <coda_type_get_record_union_status>
     384:	cmp	r0, #0
     388:	beq	398 <print_data+0x180>
     38c:	movw	r0, #0
     390:	movt	r0, #0
     394:	blx	r0
     398:	ldr	r0, [fp, #-36]	; 0xffffffdc
     39c:	cmp	r0, #0
     3a0:	beq	560 <print_data+0x348>
     3a4:	ldr	r0, [fp, #-12]
     3a8:	sub	r1, fp, #40	; 0x28
     3ac:	bl	0 <coda_cursor_get_available_union_field_index>
     3b0:	cmp	r0, #0
     3b4:	beq	3c4 <print_data+0x1ac>
     3b8:	movw	r0, #0
     3bc:	movt	r0, #0
     3c0:	blx	r0
     3c4:	ldr	r0, [fp, #-32]	; 0xffffffe0
     3c8:	ldr	r1, [fp, #-40]	; 0xffffffd8
     3cc:	sub	r2, fp, #44	; 0x2c
     3d0:	bl	0 <coda_type_get_record_field_name>
     3d4:	cmp	r0, #0
     3d8:	beq	3e8 <print_data+0x1d0>
     3dc:	movw	r0, #0
     3e0:	movt	r0, #0
     3e4:	blx	r0
     3e8:	ldr	r0, [fp, #-12]
     3ec:	ldr	r1, [fp, #-40]	; 0xffffffd8
     3f0:	bl	0 <coda_cursor_goto_record_field_by_index>
     3f4:	cmp	r0, #0
     3f8:	beq	408 <print_data+0x1f0>
     3fc:	movw	r0, #0
     400:	movt	r0, #0
     404:	blx	r0
     408:	ldr	r1, [fp, #-44]	; 0xffffffd4
     40c:	movw	r0, #0
     410:	movt	r0, #0
     414:	bl	119c <fi_printf>
     418:	movw	r1, #0
     41c:	movt	r1, #0
     420:	ldr	r1, [r1]
     424:	cmp	r1, #0
     428:	str	r0, [sp, #208]	; 0xd0
     42c:	beq	4c4 <print_data+0x2ac>
     430:	ldr	r0, [fp, #-12]
     434:	sub	r1, fp, #56	; 0x38
     438:	bl	0 <coda_cursor_get_file_bit_offset>
     43c:	cmp	r0, #0
     440:	beq	450 <print_data+0x238>
     444:	movw	r0, #0
     448:	movt	r0, #0
     44c:	blx	r0
     450:	ldr	r0, [fp, #-52]	; 0xffffffcc
     454:	cmp	r0, #0
     458:	blt	4c0 <print_data+0x2a8>
     45c:	b	460 <print_data+0x248>
     460:	ldr	r0, [fp, #-56]	; 0xffffffc8
     464:	ldr	r1, [fp, #-52]	; 0xffffffcc
     468:	lsr	r0, r0, #3
     46c:	orr	r0, r0, r1, lsl #29
     470:	asr	r1, r1, #3
     474:	sub	r2, fp, #77	; 0x4d
     478:	str	r2, [sp, #204]	; 0xcc
     47c:	bl	0 <coda_str64>
     480:	movw	r0, #0
     484:	movt	r0, #0
     488:	ldr	r1, [sp, #204]	; 0xcc
     48c:	bl	1204 <ff_printf>
     490:	ldrb	r1, [fp, #-56]	; 0xffffffc8
     494:	tst	r1, #7
     498:	str	r0, [sp, #200]	; 0xc8
     49c:	beq	4bc <print_data+0x2a4>
     4a0:	b	4a4 <print_data+0x28c>
     4a4:	ldr	r0, [fp, #-56]	; 0xffffffc8
     4a8:	and	r1, r0, #7
     4ac:	movw	r0, #0
     4b0:	movt	r0, #0
     4b4:	bl	1204 <ff_printf>
     4b8:	str	r0, [sp, #196]	; 0xc4
     4bc:	b	4c0 <print_data+0x2a8>
     4c0:	b	4c4 <print_data+0x2ac>
     4c4:	movw	r0, #0
     4c8:	movt	r0, #0
     4cc:	bl	1204 <ff_printf>
     4d0:	movw	lr, #0
     4d4:	movt	lr, #0
     4d8:	ldr	r1, [lr]
     4dc:	add	r1, r1, #1
     4e0:	str	r1, [lr]
     4e4:	movw	r1, #0
     4e8:	movt	r1, #0
     4ec:	ldr	r1, [r1]
     4f0:	cmp	r1, #0
     4f4:	str	r0, [sp, #192]	; 0xc0
     4f8:	blt	514 <print_data+0x2fc>
     4fc:	ldr	r0, [fp, #-16]
     500:	movw	r1, #0
     504:	movt	r1, #0
     508:	ldr	r1, [r1]
     50c:	cmp	r0, r1
     510:	bge	528 <print_data+0x310>
     514:	ldr	r0, [fp, #-12]
     518:	ldr	r1, [fp, #-16]
     51c:	add	r1, r1, #1
     520:	bl	218 <print_data>
     524:	b	538 <print_data+0x320>
     528:	movw	r0, #0
     52c:	movt	r0, #0
     530:	bl	119c <fi_printf>
     534:	str	r0, [sp, #188]	; 0xbc
     538:	movw	r0, #0
     53c:	movt	r0, #0
     540:	ldr	r1, [r0]
     544:	mvn	r2, #0
     548:	add	r1, r1, r2
     54c:	str	r1, [r0]
     550:	ldr	r0, [fp, #-12]
     554:	bl	0 <coda_cursor_goto_parent>
     558:	str	r0, [sp, #184]	; 0xb8
     55c:	b	754 <print_data+0x53c>
     560:	ldr	r0, [fp, #-12]
     564:	bl	0 <coda_cursor_goto_first_record_field>
     568:	cmp	r0, #0
     56c:	beq	57c <print_data+0x364>
     570:	movw	r0, #0
     574:	movt	r0, #0
     578:	blx	r0
     57c:	movw	r0, #0
     580:	str	r0, [fp, #-40]	; 0xffffffd8
     584:	ldr	r0, [fp, #-40]	; 0xffffffd8
     588:	ldr	r1, [fp, #-28]	; 0xffffffe4
     58c:	cmp	r0, r1
     590:	bge	748 <print_data+0x530>
     594:	ldr	r0, [fp, #-32]	; 0xffffffe0
     598:	ldr	r1, [fp, #-40]	; 0xffffffd8
     59c:	sub	r2, fp, #84	; 0x54
     5a0:	bl	0 <coda_type_get_record_field_name>
     5a4:	cmp	r0, #0
     5a8:	beq	5b8 <print_data+0x3a0>
     5ac:	movw	r0, #0
     5b0:	movt	r0, #0
     5b4:	blx	r0
     5b8:	ldr	r1, [fp, #-84]	; 0xffffffac
     5bc:	movw	r0, #0
     5c0:	movt	r0, #0
     5c4:	bl	119c <fi_printf>
     5c8:	movw	r1, #0
     5cc:	movt	r1, #0
     5d0:	ldr	r1, [r1]
     5d4:	cmp	r1, #0
     5d8:	str	r0, [sp, #180]	; 0xb4
     5dc:	beq	674 <print_data+0x45c>
     5e0:	ldr	r0, [fp, #-12]
     5e4:	sub	r1, fp, #96	; 0x60
     5e8:	bl	0 <coda_cursor_get_file_bit_offset>
     5ec:	cmp	r0, #0
     5f0:	beq	600 <print_data+0x3e8>
     5f4:	movw	r0, #0
     5f8:	movt	r0, #0
     5fc:	blx	r0
     600:	ldr	r0, [fp, #-92]	; 0xffffffa4
     604:	cmp	r0, #0
     608:	blt	670 <print_data+0x458>
     60c:	b	610 <print_data+0x3f8>
     610:	ldr	r0, [fp, #-96]	; 0xffffffa0
     614:	ldr	r1, [fp, #-92]	; 0xffffffa4
     618:	lsr	r0, r0, #3
     61c:	orr	r0, r0, r1, lsl #29
     620:	asr	r1, r1, #3
     624:	sub	r2, fp, #117	; 0x75
     628:	str	r2, [sp, #176]	; 0xb0
     62c:	bl	0 <coda_str64>
     630:	movw	r0, #0
     634:	movt	r0, #0
     638:	ldr	r1, [sp, #176]	; 0xb0
     63c:	bl	1204 <ff_printf>
     640:	ldrb	r1, [fp, #-96]	; 0xffffffa0
     644:	tst	r1, #7
     648:	str	r0, [sp, #172]	; 0xac
     64c:	beq	66c <print_data+0x454>
     650:	b	654 <print_data+0x43c>
     654:	ldr	r0, [fp, #-96]	; 0xffffffa0
     658:	and	r1, r0, #7
     65c:	movw	r0, #0
     660:	movt	r0, #0
     664:	bl	1204 <ff_printf>
     668:	str	r0, [sp, #168]	; 0xa8
     66c:	b	670 <print_data+0x458>
     670:	b	674 <print_data+0x45c>
     674:	movw	r0, #0
     678:	movt	r0, #0
     67c:	bl	1204 <ff_printf>
     680:	movw	lr, #0
     684:	movt	lr, #0
     688:	ldr	r1, [lr]
     68c:	add	r1, r1, #1
     690:	str	r1, [lr]
     694:	movw	r1, #0
     698:	movt	r1, #0
     69c:	ldr	r1, [r1]
     6a0:	cmp	r1, #0
     6a4:	str	r0, [sp, #164]	; 0xa4
     6a8:	blt	6c4 <print_data+0x4ac>
     6ac:	ldr	r0, [fp, #-16]
     6b0:	movw	r1, #0
     6b4:	movt	r1, #0
     6b8:	ldr	r1, [r1]
     6bc:	cmp	r0, r1
     6c0:	bge	6d8 <print_data+0x4c0>
     6c4:	ldr	r0, [fp, #-12]
     6c8:	ldr	r1, [fp, #-16]
     6cc:	add	r1, r1, #1
     6d0:	bl	218 <print_data>
     6d4:	b	6e8 <print_data+0x4d0>
     6d8:	movw	r0, #0
     6dc:	movt	r0, #0
     6e0:	bl	119c <fi_printf>
     6e4:	str	r0, [sp, #160]	; 0xa0
     6e8:	movw	r0, #0
     6ec:	movt	r0, #0
     6f0:	ldr	r1, [r0]
     6f4:	mvn	r2, #0
     6f8:	add	r1, r1, r2
     6fc:	str	r1, [r0]
     700:	ldr	r0, [fp, #-40]	; 0xffffffd8
     704:	ldr	r1, [fp, #-28]	; 0xffffffe4
     708:	sub	r1, r1, #1
     70c:	cmp	r0, r1
     710:	bge	734 <print_data+0x51c>
     714:	ldr	r0, [fp, #-12]
     718:	bl	0 <coda_cursor_goto_next_record_field>
     71c:	cmp	r0, #0
     720:	beq	730 <print_data+0x518>
     724:	movw	r0, #0
     728:	movt	r0, #0
     72c:	blx	r0
     730:	b	734 <print_data+0x51c>
     734:	b	738 <print_data+0x520>
     738:	ldr	r0, [fp, #-40]	; 0xffffffd8
     73c:	add	r0, r0, #1
     740:	str	r0, [fp, #-40]	; 0xffffffd8
     744:	b	584 <print_data+0x36c>
     748:	ldr	r0, [fp, #-12]
     74c:	bl	0 <coda_cursor_goto_parent>
     750:	str	r0, [sp, #156]	; 0x9c
     754:	b	758 <print_data+0x540>
     758:	b	1194 <print_data+0xf7c>
     75c:	sub	r2, fp, #152	; 0x98
     760:	ldr	r0, [fp, #-12]
     764:	sub	r1, fp, #156	; 0x9c
     768:	bl	0 <coda_cursor_get_array_dim>
     76c:	cmp	r0, #0
     770:	beq	780 <print_data+0x568>
     774:	movw	r0, #0
     778:	movt	r0, #0
     77c:	blx	r0
     780:	ldr	r0, [fp, #-156]	; 0xffffff64
     784:	cmp	r0, #0
     788:	blt	ab4 <print_data+0x89c>
     78c:	movw	r0, #1
     790:	str	r0, [fp, #-160]	; 0xffffff60
     794:	movw	r0, #0
     798:	str	r0, [fp, #-196]	; 0xffffff3c
     79c:	ldr	r0, [fp, #-196]	; 0xffffff3c
     7a0:	ldr	r1, [fp, #-156]	; 0xffffff64
     7a4:	cmp	r0, r1
     7a8:	bge	7e8 <print_data+0x5d0>
     7ac:	ldr	r0, [fp, #-196]	; 0xffffff3c
     7b0:	sub	r1, fp, #152	; 0x98
     7b4:	ldr	r0, [r1, r0, lsl #2]
     7b8:	ldr	r1, [fp, #-160]	; 0xffffff60
     7bc:	mul	r0, r1, r0
     7c0:	str	r0, [fp, #-160]	; 0xffffff60
     7c4:	ldr	r0, [fp, #-196]	; 0xffffff3c
     7c8:	sub	r1, fp, #192	; 0xc0
     7cc:	add	r0, r1, r0, lsl #2
     7d0:	movw	r1, #0
     7d4:	str	r1, [r0]
     7d8:	ldr	r0, [fp, #-196]	; 0xffffff3c
     7dc:	add	r0, r0, #1
     7e0:	str	r0, [fp, #-196]	; 0xffffff3c
     7e4:	b	79c <print_data+0x584>
     7e8:	ldr	r0, [fp, #-160]	; 0xffffff60
     7ec:	cmp	r0, #0
     7f0:	ble	ab0 <print_data+0x898>
     7f4:	ldr	r0, [fp, #-12]
     7f8:	bl	0 <coda_cursor_goto_first_array_element>
     7fc:	cmp	r0, #0
     800:	beq	810 <print_data+0x5f8>
     804:	movw	r0, #0
     808:	movt	r0, #0
     80c:	blx	r0
     810:	movw	r0, #0
     814:	str	r0, [fp, #-196]	; 0xffffff3c
     818:	ldr	r0, [fp, #-196]	; 0xffffff3c
     81c:	ldr	r1, [fp, #-160]	; 0xffffff60
     820:	cmp	r0, r1
     824:	bge	aa4 <print_data+0x88c>
     828:	movw	r0, #0
     82c:	movt	r0, #0
     830:	bl	119c <fi_printf>
     834:	movw	lr, #0
     838:	str	lr, [fp, #-200]	; 0xffffff38
     83c:	str	r0, [sp, #152]	; 0x98
     840:	ldr	r0, [fp, #-200]	; 0xffffff38
     844:	ldr	r1, [fp, #-156]	; 0xffffff64
     848:	cmp	r0, r1
     84c:	bge	8a8 <print_data+0x690>
     850:	ldr	r0, [fp, #-200]	; 0xffffff38
     854:	sub	r1, fp, #192	; 0xc0
     858:	add	r0, r1, r0, lsl #2
     85c:	ldr	r1, [r0]
     860:	movw	r0, #0
     864:	movt	r0, #0
     868:	bl	1204 <ff_printf>
     86c:	ldr	r1, [fp, #-200]	; 0xffffff38
     870:	ldr	lr, [fp, #-156]	; 0xffffff64
     874:	sub	lr, lr, #1
     878:	cmp	r1, lr
     87c:	str	r0, [sp, #148]	; 0x94
     880:	bge	894 <print_data+0x67c>
     884:	movw	r0, #0
     888:	movt	r0, #0
     88c:	bl	1204 <ff_printf>
     890:	str	r0, [sp, #144]	; 0x90
     894:	b	898 <print_data+0x680>
     898:	ldr	r0, [fp, #-200]	; 0xffffff38
     89c:	add	r0, r0, #1
     8a0:	str	r0, [fp, #-200]	; 0xffffff38
     8a4:	b	840 <print_data+0x628>
     8a8:	movw	r0, #0
     8ac:	movt	r0, #0
     8b0:	bl	1204 <ff_printf>
     8b4:	movw	lr, #0
     8b8:	movt	lr, #0
     8bc:	ldr	lr, [lr]
     8c0:	cmp	lr, #0
     8c4:	str	r0, [sp, #140]	; 0x8c
     8c8:	beq	960 <print_data+0x748>
     8cc:	ldr	r0, [fp, #-12]
     8d0:	sub	r1, fp, #208	; 0xd0
     8d4:	bl	0 <coda_cursor_get_file_bit_offset>
     8d8:	cmp	r0, #0
     8dc:	beq	8ec <print_data+0x6d4>
     8e0:	movw	r0, #0
     8e4:	movt	r0, #0
     8e8:	blx	r0
     8ec:	ldr	r0, [fp, #-204]	; 0xffffff34
     8f0:	cmp	r0, #0
     8f4:	blt	95c <print_data+0x744>
     8f8:	b	8fc <print_data+0x6e4>
     8fc:	ldr	r0, [fp, #-208]	; 0xffffff30
     900:	ldr	r1, [fp, #-204]	; 0xffffff34
     904:	lsr	r0, r0, #3
     908:	orr	r0, r0, r1, lsl #29
     90c:	asr	r1, r1, #3
     910:	sub	r2, fp, #229	; 0xe5
     914:	str	r2, [sp, #136]	; 0x88
     918:	bl	0 <coda_str64>
     91c:	movw	r0, #0
     920:	movt	r0, #0
     924:	ldr	r1, [sp, #136]	; 0x88
     928:	bl	1204 <ff_printf>
     92c:	ldrb	r1, [fp, #-208]	; 0xffffff30
     930:	tst	r1, #7
     934:	str	r0, [sp, #132]	; 0x84
     938:	beq	958 <print_data+0x740>
     93c:	b	940 <print_data+0x728>
     940:	ldr	r0, [fp, #-208]	; 0xffffff30
     944:	and	r1, r0, #7
     948:	movw	r0, #0
     94c:	movt	r0, #0
     950:	bl	1204 <ff_printf>
     954:	str	r0, [sp, #128]	; 0x80
     958:	b	95c <print_data+0x744>
     95c:	b	960 <print_data+0x748>
     960:	movw	r0, #0
     964:	movt	r0, #0
     968:	bl	1204 <ff_printf>
     96c:	movw	lr, #0
     970:	movt	lr, #0
     974:	ldr	r1, [lr]
     978:	add	r1, r1, #1
     97c:	str	r1, [lr]
     980:	movw	r1, #0
     984:	movt	r1, #0
     988:	ldr	r1, [r1]
     98c:	cmp	r1, #0
     990:	str	r0, [sp, #124]	; 0x7c
     994:	blt	9b0 <print_data+0x798>
     998:	ldr	r0, [fp, #-16]
     99c:	movw	r1, #0
     9a0:	movt	r1, #0
     9a4:	ldr	r1, [r1]
     9a8:	cmp	r0, r1
     9ac:	bge	9c4 <print_data+0x7ac>
     9b0:	ldr	r0, [fp, #-12]
     9b4:	ldr	r1, [fp, #-16]
     9b8:	add	r1, r1, #1
     9bc:	bl	218 <print_data>
     9c0:	b	9d4 <print_data+0x7bc>
     9c4:	movw	r0, #0
     9c8:	movt	r0, #0
     9cc:	bl	119c <fi_printf>
     9d0:	str	r0, [sp, #120]	; 0x78
     9d4:	movw	r0, #0
     9d8:	movt	r0, #0
     9dc:	ldr	r1, [r0]
     9e0:	mvn	r2, #0
     9e4:	add	r1, r1, r2
     9e8:	str	r1, [r0]
     9ec:	ldr	r0, [fp, #-156]	; 0xffffff64
     9f0:	sub	r0, r0, #1
     9f4:	str	r0, [fp, #-200]	; 0xffffff38
     9f8:	ldr	r0, [fp, #-200]	; 0xffffff38
     9fc:	cmp	r0, #0
     a00:	blt	a5c <print_data+0x844>
     a04:	ldr	r0, [fp, #-200]	; 0xffffff38
     a08:	sub	r1, fp, #192	; 0xc0
     a0c:	ldr	r2, [r1, r0, lsl #2]
     a10:	add	r2, r2, #1
     a14:	str	r2, [r1, r0, lsl #2]
     a18:	ldr	r0, [fp, #-200]	; 0xffffff38
     a1c:	ldr	r1, [r1, r0, lsl #2]
     a20:	sub	r2, fp, #152	; 0x98
     a24:	add	r0, r2, r0, lsl #2
     a28:	ldr	r0, [r0]
     a2c:	cmp	r1, r0
     a30:	bne	a54 <print_data+0x83c>
     a34:	ldr	r0, [fp, #-200]	; 0xffffff38
     a38:	sub	r1, r0, #1
     a3c:	str	r1, [fp, #-200]	; 0xffffff38
     a40:	sub	r1, fp, #192	; 0xc0
     a44:	add	r0, r1, r0, lsl #2
     a48:	movw	r1, #0
     a4c:	str	r1, [r0]
     a50:	b	a58 <print_data+0x840>
     a54:	b	a5c <print_data+0x844>
     a58:	b	9f8 <print_data+0x7e0>
     a5c:	ldr	r0, [fp, #-196]	; 0xffffff3c
     a60:	ldr	r1, [fp, #-160]	; 0xffffff60
     a64:	sub	r1, r1, #1
     a68:	cmp	r0, r1
     a6c:	bge	a90 <print_data+0x878>
     a70:	ldr	r0, [fp, #-12]
     a74:	bl	0 <coda_cursor_goto_next_array_element>
     a78:	cmp	r0, #0
     a7c:	beq	a8c <print_data+0x874>
     a80:	movw	r0, #0
     a84:	movt	r0, #0
     a88:	blx	r0
     a8c:	b	a90 <print_data+0x878>
     a90:	b	a94 <print_data+0x87c>
     a94:	ldr	r0, [fp, #-196]	; 0xffffff3c
     a98:	add	r0, r0, #1
     a9c:	str	r0, [fp, #-196]	; 0xffffff3c
     aa0:	b	818 <print_data+0x600>
     aa4:	ldr	r0, [fp, #-12]
     aa8:	bl	0 <coda_cursor_goto_parent>
     aac:	str	r0, [sp, #116]	; 0x74
     ab0:	b	ab4 <print_data+0x89c>
     ab4:	b	1194 <print_data+0xf7c>
     ab8:	ldr	r0, [fp, #-12]
     abc:	sub	r1, fp, #240	; 0xf0
     ac0:	bl	0 <coda_cursor_has_ascii_content>
     ac4:	cmp	r0, #0
     ac8:	beq	ad8 <print_data+0x8c0>
     acc:	movw	r0, #0
     ad0:	movt	r0, #0
     ad4:	blx	r0
     ad8:	ldr	r0, [fp, #-240]	; 0xffffff10
     adc:	cmp	r0, #0
     ae0:	beq	bc0 <print_data+0x9a8>
     ae4:	ldr	r0, [fp, #-12]
     ae8:	sub	r1, fp, #244	; 0xf4
     aec:	bl	0 <coda_cursor_get_string_length>
     af0:	cmp	r0, #0
     af4:	beq	b04 <print_data+0x8ec>
     af8:	movw	r0, #0
     afc:	movt	r0, #0
     b00:	blx	r0
     b04:	ldr	r0, [fp, #-244]	; 0xffffff0c
     b08:	add	r0, r0, #1
     b0c:	bl	0 <malloc>
     b10:	str	r0, [fp, #-248]	; 0xffffff08
     b14:	ldr	r0, [fp, #-248]	; 0xffffff08
     b18:	movw	lr, #0
     b1c:	cmp	r0, lr
     b20:	bne	b58 <print_data+0x940>
     b24:	ldr	r0, [fp, #-244]	; 0xffffff0c
     b28:	add	r2, r0, #1
     b2c:	mvn	r0, #0
     b30:	movw	r1, #0
     b34:	movt	r1, #0
     b38:	movw	r3, #0
     b3c:	movt	r3, #0
     b40:	movw	ip, #410	; 0x19a
     b44:	str	ip, [sp]
     b48:	bl	0 <coda_set_error>
     b4c:	movw	r0, #0
     b50:	movt	r0, #0
     b54:	blx	r0
     b58:	ldr	r0, [fp, #-12]
     b5c:	ldr	r1, [fp, #-248]	; 0xffffff08
     b60:	ldr	r2, [fp, #-244]	; 0xffffff0c
     b64:	add	r2, r2, #1
     b68:	bl	0 <coda_cursor_read_string>
     b6c:	cmp	r0, #0
     b70:	beq	b80 <print_data+0x968>
     b74:	movw	r0, #0
     b78:	movt	r0, #0
     b7c:	blx	r0
     b80:	movw	r0, #0
     b84:	movt	r0, #0
     b88:	bl	119c <fi_printf>
     b8c:	ldr	lr, [fp, #-248]	; 0xffffff08
     b90:	ldr	r1, [fp, #-244]	; 0xffffff0c
     b94:	str	r0, [sp, #112]	; 0x70
     b98:	mov	r0, lr
     b9c:	bl	1268 <print_escaped>
     ba0:	ldr	r1, [fp, #-244]	; 0xffffff0c
     ba4:	movw	r0, #0
     ba8:	movt	r0, #0
     bac:	bl	1204 <ff_printf>
     bb0:	ldr	r1, [fp, #-248]	; 0xffffff08
     bb4:	str	r0, [sp, #108]	; 0x6c
     bb8:	mov	r0, r1
     bbc:	bl	0 <free>
     bc0:	ldr	r0, [fp, #-12]
     bc4:	sub	r1, fp, #236	; 0xec
     bc8:	bl	0 <coda_cursor_get_read_type>
     bcc:	cmp	r0, #0
     bd0:	beq	be0 <print_data+0x9c8>
     bd4:	movw	r0, #0
     bd8:	movt	r0, #0
     bdc:	blx	r0
     be0:	ldr	r0, [fp, #-236]	; 0xffffff14
     be4:	add	r0, r0, #1
     be8:	cmp	r0, #13
     bec:	str	r0, [sp, #104]	; 0x68
     bf0:	bhi	f80 <print_data+0xd68>
     bf4:	add	r0, pc, #8
     bf8:	ldr	r1, [sp, #104]	; 0x68
     bfc:	ldr	r0, [r0, r1, lsl #2]
     c00:	mov	pc, r0
     c04:	.word	0x00000f4c
     c08:	.word	0x00000dd8
     c0c:	.word	0x00000e10
     c10:	.word	0x00000dd8
     c14:	.word	0x00000e10
     c18:	.word	0x00000dd8
     c1c:	.word	0x00000e10
     c20:	.word	0x00000e48
     c24:	.word	0x00000e98
     c28:	.word	0x00000ee8
     c2c:	.word	0x00000ee8
     c30:	.word	0x00000f4c
     c34:	.word	0x00000f4c
     c38:	.word	0x00000c3c
     c3c:	ldr	r0, [fp, #-12]
     c40:	sub	r1, fp, #256	; 0x100
     c44:	bl	0 <coda_cursor_get_bit_size>
     c48:	cmp	r0, #0
     c4c:	beq	c5c <print_data+0xa44>
     c50:	movw	r0, #0
     c54:	movt	r0, #0
     c58:	blx	r0
     c5c:	ldr	r0, [fp, #-256]	; 0xffffff00
     c60:	ldr	r1, [fp, #-252]	; 0xffffff04
     c64:	lsr	r2, r0, #3
     c68:	orr	r2, r2, r1, lsl #29
     c6c:	asr	r1, r1, #3
     c70:	and	r0, r0, #7
     c74:	adds	r3, r2, #1
     c78:	adc	ip, r1, #0
     c7c:	cmp	r0, #0
     c80:	movne	r2, r3
     c84:	cmp	r0, #0
     c88:	movne	r1, ip
     c8c:	str	r2, [fp, #-264]	; 0xfffffef8
     c90:	str	r1, [fp, #-260]	; 0xfffffefc
     c94:	ldr	r0, [fp, #-264]	; 0xfffffef8
     c98:	bl	0 <malloc>
     c9c:	str	r0, [fp, #-268]	; 0xfffffef4
     ca0:	ldr	r0, [fp, #-268]	; 0xfffffef4
     ca4:	movw	r1, #0
     ca8:	cmp	r0, r1
     cac:	bne	ce0 <print_data+0xac8>
     cb0:	ldr	r2, [fp, #-264]	; 0xfffffef8
     cb4:	mvn	r0, #0
     cb8:	movw	r1, #0
     cbc:	movt	r1, #0
     cc0:	movw	r3, #0
     cc4:	movt	r3, #0
     cc8:	movw	ip, #447	; 0x1bf
     ccc:	str	ip, [sp]
     cd0:	bl	0 <coda_set_error>
     cd4:	movw	r0, #0
     cd8:	movt	r0, #0
     cdc:	blx	r0
     ce0:	ldr	r0, [fp, #-12]
     ce4:	ldr	r1, [fp, #-268]	; 0xfffffef4
     ce8:	ldr	r2, [fp, #-256]	; 0xffffff00
     cec:	ldr	r3, [fp, #-252]	; 0xffffff04
     cf0:	mov	ip, sp
     cf4:	str	r3, [ip, #4]
     cf8:	str	r2, [ip]
     cfc:	mov	r2, #0
     d00:	str	r2, [sp, #100]	; 0x64
     d04:	ldr	r3, [sp, #100]	; 0x64
     d08:	bl	0 <coda_cursor_read_bits>
     d0c:	cmp	r0, #0
     d10:	beq	d20 <print_data+0xb08>
     d14:	movw	r0, #0
     d18:	movt	r0, #0
     d1c:	blx	r0
     d20:	movw	r0, #0
     d24:	movt	r0, #0
     d28:	bl	119c <fi_printf>
     d2c:	ldr	lr, [fp, #-268]	; 0xfffffef4
     d30:	ldr	r1, [fp, #-264]	; 0xfffffef8
     d34:	str	r0, [sp, #96]	; 0x60
     d38:	mov	r0, lr
     d3c:	bl	1268 <print_escaped>
     d40:	movw	r0, #0
     d44:	movt	r0, #0
     d48:	bl	1204 <ff_printf>
     d4c:	ldr	r1, [fp, #-256]	; 0xffffff00
     d50:	ldr	lr, [fp, #-252]	; 0xffffff04
     d54:	lsr	r1, r1, #3
     d58:	orr	r1, r1, lr, lsl #29
     d5c:	asr	lr, lr, #3
     d60:	sub	r2, fp, #256	; 0x100
     d64:	sub	r2, r2, #33	; 0x21
     d68:	str	r0, [sp, #92]	; 0x5c
     d6c:	mov	r0, r1
     d70:	mov	r1, lr
     d74:	str	r2, [sp, #88]	; 0x58
     d78:	bl	0 <coda_str64>
     d7c:	movw	r0, #0
     d80:	movt	r0, #0
     d84:	ldr	r1, [sp, #88]	; 0x58
     d88:	bl	1204 <ff_printf>
     d8c:	ldrb	r1, [fp, #-256]	; 0xffffff00
     d90:	tst	r1, #7
     d94:	str	r0, [sp, #84]	; 0x54
     d98:	beq	db8 <print_data+0xba0>
     d9c:	b	da0 <print_data+0xb88>
     da0:	ldr	r0, [fp, #-256]	; 0xffffff00
     da4:	and	r1, r0, #7
     da8:	movw	r0, #0
     dac:	movt	r0, #0
     db0:	bl	1204 <ff_printf>
     db4:	str	r0, [sp, #80]	; 0x50
     db8:	movw	r0, #0
     dbc:	movt	r0, #0
     dc0:	bl	1204 <ff_printf>
     dc4:	ldr	lr, [fp, #-268]	; 0xfffffef4
     dc8:	str	r0, [sp, #76]	; 0x4c
     dcc:	mov	r0, lr
     dd0:	bl	0 <free>
     dd4:	b	f80 <print_data+0xd68>
     dd8:	ldr	r0, [fp, #-12]
     ddc:	sub	r1, fp, #296	; 0x128
     de0:	bl	0 <coda_cursor_read_int32>
     de4:	cmp	r0, #0
     de8:	beq	df8 <print_data+0xbe0>
     dec:	movw	r0, #0
     df0:	movt	r0, #0
     df4:	blx	r0
     df8:	ldr	r1, [fp, #-296]	; 0xfffffed8
     dfc:	movw	r0, #0
     e00:	movt	r0, #0
     e04:	bl	119c <fi_printf>
     e08:	str	r0, [sp, #72]	; 0x48
     e0c:	b	f80 <print_data+0xd68>
     e10:	ldr	r0, [fp, #-12]
     e14:	sub	r1, fp, #300	; 0x12c
     e18:	bl	0 <coda_cursor_read_uint32>
     e1c:	cmp	r0, #0
     e20:	beq	e30 <print_data+0xc18>
     e24:	movw	r0, #0
     e28:	movt	r0, #0
     e2c:	blx	r0
     e30:	ldr	r1, [fp, #-300]	; 0xfffffed4
     e34:	movw	r0, #0
     e38:	movt	r0, #0
     e3c:	bl	119c <fi_printf>
     e40:	str	r0, [sp, #68]	; 0x44
     e44:	b	f80 <print_data+0xd68>
     e48:	ldr	r0, [fp, #-12]
     e4c:	sub	r1, fp, #312	; 0x138
     e50:	bl	0 <coda_cursor_read_int64>
     e54:	cmp	r0, #0
     e58:	beq	e68 <print_data+0xc50>
     e5c:	movw	r0, #0
     e60:	movt	r0, #0
     e64:	blx	r0
     e68:	sub	lr, fp, #256	; 0x100
     e6c:	sub	r2, lr, #77	; 0x4d
     e70:	ldr	r0, [fp, #-312]	; 0xfffffec8
     e74:	ldr	r1, [fp, #-308]	; 0xfffffecc
     e78:	bl	0 <coda_str64>
     e7c:	sub	lr, fp, #256	; 0x100
     e80:	sub	r1, lr, #77	; 0x4d
     e84:	movw	r0, #0
     e88:	movt	r0, #0
     e8c:	bl	119c <fi_printf>
     e90:	str	r0, [sp, #64]	; 0x40
     e94:	b	f80 <print_data+0xd68>
     e98:	ldr	r0, [fp, #-12]
     e9c:	sub	r1, fp, #344	; 0x158
     ea0:	bl	0 <coda_cursor_read_uint64>
     ea4:	cmp	r0, #0
     ea8:	beq	eb8 <print_data+0xca0>
     eac:	movw	r0, #0
     eb0:	movt	r0, #0
     eb4:	blx	r0
     eb8:	sub	lr, fp, #256	; 0x100
     ebc:	sub	r2, lr, #109	; 0x6d
     ec0:	ldr	r0, [fp, #-344]	; 0xfffffea8
     ec4:	ldr	r1, [fp, #-340]	; 0xfffffeac
     ec8:	bl	0 <coda_str64u>
     ecc:	sub	lr, fp, #256	; 0x100
     ed0:	sub	r1, lr, #109	; 0x6d
     ed4:	movw	r0, #0
     ed8:	movt	r0, #0
     edc:	bl	119c <fi_printf>
     ee0:	str	r0, [sp, #60]	; 0x3c
     ee4:	b	f80 <print_data+0xd68>
     ee8:	ldr	r0, [fp, #-12]
     eec:	sub	r1, fp, #376	; 0x178
     ef0:	bl	0 <coda_cursor_read_double>
     ef4:	cmp	r0, #0
     ef8:	beq	f08 <print_data+0xcf0>
     efc:	movw	r0, #0
     f00:	movt	r0, #0
     f04:	blx	r0
     f08:	ldr	r0, [fp, #-236]	; 0xffffff14
     f0c:	cmp	r0, #8
     f10:	bne	f30 <print_data+0xd18>
     f14:	vldr	d16, [fp, #-376]	; 0xfffffe88
     f18:	movw	r0, #0
     f1c:	movt	r0, #0
     f20:	vmov	r2, r3, d16
     f24:	bl	119c <fi_printf>
     f28:	str	r0, [sp, #56]	; 0x38
     f2c:	b	f48 <print_data+0xd30>
     f30:	vldr	d16, [fp, #-376]	; 0xfffffe88
     f34:	movw	r0, #0
     f38:	movt	r0, #0
     f3c:	vmov	r2, r3, d16
     f40:	bl	119c <fi_printf>
     f44:	str	r0, [sp, #52]	; 0x34
     f48:	b	f80 <print_data+0xd68>
     f4c:	ldr	r0, [fp, #-240]	; 0xffffff10
     f50:	cmp	r0, #0
     f54:	beq	f5c <print_data+0xd44>
     f58:	b	f7c <print_data+0xd64>
     f5c:	movw	r0, #0
     f60:	movt	r0, #0
     f64:	movw	r1, #0
     f68:	movt	r1, #0
     f6c:	movw	r2, #548	; 0x224
     f70:	movw	r3, #0
     f74:	movt	r3, #0
     f78:	bl	0 <__assert_fail>
     f7c:	b	f80 <print_data+0xd68>
     f80:	b	1194 <print_data+0xf7c>
     f84:	ldr	r0, [fp, #-12]
     f88:	sub	r1, fp, #380	; 0x17c
     f8c:	bl	0 <coda_cursor_get_special_type>
     f90:	cmp	r0, #0
     f94:	beq	fa4 <print_data+0xd8c>
     f98:	movw	r0, #0
     f9c:	movt	r0, #0
     fa0:	blx	r0
     fa4:	ldr	r0, [fp, #-380]	; 0xfffffe84
     fa8:	cmp	r0, #0
     fac:	beq	1000 <print_data+0xde8>
     fb0:	ldr	r0, [fp, #-12]
     fb4:	add	r1, sp, #288	; 0x120
     fb8:	mov	r2, r1
     fbc:	str	r0, [sp, #48]	; 0x30
     fc0:	mov	r0, r2
     fc4:	ldr	r2, [sp, #48]	; 0x30
     fc8:	str	r1, [sp, #44]	; 0x2c
     fcc:	mov	r1, r2
     fd0:	movw	r2, #520	; 0x208
     fd4:	bl	0 <memcpy>
     fd8:	ldr	r0, [sp, #44]	; 0x2c
     fdc:	bl	0 <coda_cursor_use_base_type_of_special_type>
     fe0:	cmp	r0, #0
     fe4:	beq	ff4 <print_data+0xddc>
     fe8:	movw	r0, #0
     fec:	movt	r0, #0
     ff0:	blx	r0
     ff4:	ldr	r1, [fp, #-16]
     ff8:	add	r0, sp, #288	; 0x120
     ffc:	bl	218 <print_data>
    1000:	ldr	r0, [fp, #-380]	; 0xfffffe84
    1004:	bl	0 <coda_type_get_special_type_name>
    1008:	movw	lr, #0
    100c:	movt	lr, #0
    1010:	str	r0, [sp, #40]	; 0x28
    1014:	mov	r0, lr
    1018:	ldr	r1, [sp, #40]	; 0x28
    101c:	bl	119c <fi_printf>
    1020:	ldr	r1, [fp, #-380]	; 0xfffffe84
    1024:	cmp	r1, #3
    1028:	str	r0, [sp, #36]	; 0x24
    102c:	str	r1, [sp, #32]
    1030:	bhi	1190 <print_data+0xf78>
    1034:	add	r0, pc, #8
    1038:	ldr	r1, [sp, #32]
    103c:	ldr	r0, [r0, r1, lsl #2]
    1040:	mov	pc, r0
    1044:	.word	0x00001054
    1048:	.word	0x00001068
    104c:	.word	0x000010a4
    1050:	.word	0x0000114c
    1054:	movw	r0, #0
    1058:	movt	r0, #0
    105c:	bl	1204 <ff_printf>
    1060:	str	r0, [sp, #28]
    1064:	b	1190 <print_data+0xf78>
    1068:	ldr	r0, [fp, #-12]
    106c:	add	r1, sp, #280	; 0x118
    1070:	bl	0 <coda_cursor_read_double>
    1074:	cmp	r0, #0
    1078:	beq	1088 <print_data+0xe70>
    107c:	movw	r0, #0
    1080:	movt	r0, #0
    1084:	blx	r0
    1088:	vldr	d16, [sp, #280]	; 0x118
    108c:	movw	r0, #0
    1090:	movt	r0, #0
    1094:	vmov	r2, r3, d16
    1098:	bl	1204 <ff_printf>
    109c:	str	r0, [sp, #24]
    10a0:	b	1190 <print_data+0xf78>
    10a4:	ldr	r0, [fp, #-12]
    10a8:	add	r1, sp, #272	; 0x110
    10ac:	bl	0 <coda_cursor_read_double>
    10b0:	cmp	r0, #0
    10b4:	beq	10c4 <print_data+0xeac>
    10b8:	movw	r0, #0
    10bc:	movt	r0, #0
    10c0:	blx	r0
    10c4:	vldr	d0, [sp, #272]	; 0x110
    10c8:	bl	0 <coda_isNaN>
    10cc:	cmp	r0, #0
    10d0:	bne	10e4 <print_data+0xecc>
    10d4:	vldr	d0, [sp, #272]	; 0x110
    10d8:	bl	0 <coda_isInf>
    10dc:	cmp	r0, #0
    10e0:	beq	1100 <print_data+0xee8>
    10e4:	vldr	d16, [sp, #272]	; 0x110
    10e8:	movw	r0, #0
    10ec:	movt	r0, #0
    10f0:	vmov	r2, r3, d16
    10f4:	bl	1204 <ff_printf>
    10f8:	str	r0, [sp, #20]
    10fc:	b	1148 <print_data+0xf30>
    1100:	add	r1, sp, #245	; 0xf5
    1104:	vldr	d0, [sp, #272]	; 0x110
    1108:	movw	r0, #0
    110c:	movt	r0, #0
    1110:	bl	0 <coda_time_double_to_string>
    1114:	cmp	r0, #0
    1118:	beq	1130 <print_data+0xf18>
    111c:	movw	r0, #0
    1120:	movt	r0, #0
    1124:	bl	1204 <ff_printf>
    1128:	str	r0, [sp, #16]
    112c:	b	1144 <print_data+0xf2c>
    1130:	add	r1, sp, #245	; 0xf5
    1134:	movw	r0, #0
    1138:	movt	r0, #0
    113c:	bl	1204 <ff_printf>
    1140:	str	r0, [sp, #12]
    1144:	b	1148 <print_data+0xf30>
    1148:	b	1190 <print_data+0xf78>
    114c:	ldr	r0, [fp, #-12]
    1150:	add	r1, sp, #232	; 0xe8
    1154:	add	r2, sp, #224	; 0xe0
    1158:	bl	0 <coda_cursor_read_complex_double_split>
    115c:	cmp	r0, #0
    1160:	beq	1170 <print_data+0xf58>
    1164:	movw	r0, #0
    1168:	movt	r0, #0
    116c:	blx	r0
    1170:	vldr	d16, [sp, #232]	; 0xe8
    1174:	vldr	d17, [sp, #224]	; 0xe0
    1178:	movw	r0, #0
    117c:	movt	r0, #0
    1180:	vmov	r2, r3, d16
    1184:	vstr	d17, [sp]
    1188:	bl	1204 <ff_printf>
    118c:	str	r0, [sp, #8]
    1190:	b	1194 <print_data+0xf7c>
    1194:	sub	sp, fp, #8
    1198:	pop	{r4, r5, fp, pc}

0000119c <fi_printf>:
    119c:	sub	sp, sp, #12
    11a0:	push	{fp, lr}
    11a4:	mov	fp, sp
    11a8:	sub	sp, sp, #20
    11ac:	str	r3, [fp, #16]
    11b0:	str	r2, [fp, #12]
    11b4:	str	r1, [fp, #8]
    11b8:	str	r0, [fp, #-4]
    11bc:	bl	1430 <indent>
    11c0:	add	r0, fp, #8
    11c4:	str	r0, [sp, #8]
    11c8:	movw	r0, #0
    11cc:	movt	r0, #0
    11d0:	ldr	r0, [r0]
    11d4:	ldr	r1, [fp, #-4]
    11d8:	ldr	r2, [sp, #8]
    11dc:	bl	0 <vfprintf>
    11e0:	str	r0, [fp, #-8]
    11e4:	add	r0, sp, #8
    11e8:	ldr	r1, [fp, #-8]
    11ec:	str	r0, [sp, #4]
    11f0:	mov	r0, r1
    11f4:	mov	sp, fp
    11f8:	pop	{fp, lr}
    11fc:	add	sp, sp, #12
    1200:	bx	lr

00001204 <ff_printf>:
    1204:	sub	sp, sp, #12
    1208:	push	{fp, lr}
    120c:	mov	fp, sp
    1210:	sub	sp, sp, #20
    1214:	str	r3, [fp, #16]
    1218:	str	r2, [fp, #12]
    121c:	str	r1, [fp, #8]
    1220:	str	r0, [fp, #-4]
    1224:	add	r0, fp, #8
    1228:	str	r0, [sp, #8]
    122c:	movw	r0, #0
    1230:	movt	r0, #0
    1234:	ldr	r0, [r0]
    1238:	ldr	r1, [fp, #-4]
    123c:	ldr	r2, [sp, #8]
    1240:	bl	0 <vfprintf>
    1244:	str	r0, [fp, #-8]
    1248:	add	r0, sp, #8
    124c:	ldr	r1, [fp, #-8]
    1250:	str	r0, [sp, #4]
    1254:	mov	r0, r1
    1258:	mov	sp, fp
    125c:	pop	{fp, lr}
    1260:	add	sp, sp, #12
    1264:	bx	lr

00001268 <print_escaped>:
    1268:	push	{fp, lr}
    126c:	mov	fp, sp
    1270:	sub	sp, sp, #64	; 0x40
    1274:	str	r0, [fp, #-4]
    1278:	str	r1, [fp, #-8]
    127c:	movw	r0, #0
    1280:	str	r0, [fp, #-12]
    1284:	ldr	r0, [fp, #-12]
    1288:	ldr	r1, [fp, #-8]
    128c:	cmp	r0, r1
    1290:	bge	1428 <print_escaped+0x1c0>
    1294:	ldr	r0, [fp, #-4]
    1298:	ldr	r1, [fp, #-12]
    129c:	ldrb	r0, [r0, r1]
    12a0:	strb	r0, [fp, #-13]
    12a4:	ldrb	r0, [fp, #-13]
    12a8:	mov	r1, r0
    12ac:	cmp	r0, #7
    12b0:	str	r1, [fp, #-20]	; 0xffffffec
    12b4:	beq	132c <print_escaped+0xc4>
    12b8:	b	12bc <print_escaped+0x54>
    12bc:	ldr	r0, [fp, #-20]	; 0xffffffec
    12c0:	cmp	r0, #8
    12c4:	beq	1340 <print_escaped+0xd8>
    12c8:	b	12cc <print_escaped+0x64>
    12cc:	ldr	r0, [fp, #-20]	; 0xffffffec
    12d0:	cmp	r0, #9
    12d4:	beq	1354 <print_escaped+0xec>
    12d8:	b	12dc <print_escaped+0x74>
    12dc:	ldr	r0, [fp, #-20]	; 0xffffffec
    12e0:	cmp	r0, #10
    12e4:	beq	1368 <print_escaped+0x100>
    12e8:	b	12ec <print_escaped+0x84>
    12ec:	ldr	r0, [fp, #-20]	; 0xffffffec
    12f0:	cmp	r0, #11
    12f4:	beq	137c <print_escaped+0x114>
    12f8:	b	12fc <print_escaped+0x94>
    12fc:	ldr	r0, [fp, #-20]	; 0xffffffec
    1300:	cmp	r0, #12
    1304:	beq	1390 <print_escaped+0x128>
    1308:	b	130c <print_escaped+0xa4>
    130c:	ldr	r0, [fp, #-20]	; 0xffffffec
    1310:	cmp	r0, #13
    1314:	beq	13a4 <print_escaped+0x13c>
    1318:	b	131c <print_escaped+0xb4>
    131c:	ldr	r0, [fp, #-20]	; 0xffffffec
    1320:	cmp	r0, #92	; 0x5c
    1324:	beq	13b8 <print_escaped+0x150>
    1328:	b	13cc <print_escaped+0x164>
    132c:	movw	r0, #0
    1330:	movt	r0, #0
    1334:	bl	1204 <ff_printf>
    1338:	str	r0, [fp, #-24]	; 0xffffffe8
    133c:	b	1414 <print_escaped+0x1ac>
    1340:	movw	r0, #0
    1344:	movt	r0, #0
    1348:	bl	1204 <ff_printf>
    134c:	str	r0, [fp, #-28]	; 0xffffffe4
    1350:	b	1414 <print_escaped+0x1ac>
    1354:	movw	r0, #0
    1358:	movt	r0, #0
    135c:	bl	1204 <ff_printf>
    1360:	str	r0, [sp, #32]
    1364:	b	1414 <print_escaped+0x1ac>
    1368:	movw	r0, #0
    136c:	movt	r0, #0
    1370:	bl	1204 <ff_printf>
    1374:	str	r0, [sp, #28]
    1378:	b	1414 <print_escaped+0x1ac>
    137c:	movw	r0, #0
    1380:	movt	r0, #0
    1384:	bl	1204 <ff_printf>
    1388:	str	r0, [sp, #24]
    138c:	b	1414 <print_escaped+0x1ac>
    1390:	movw	r0, #0
    1394:	movt	r0, #0
    1398:	bl	1204 <ff_printf>
    139c:	str	r0, [sp, #20]
    13a0:	b	1414 <print_escaped+0x1ac>
    13a4:	movw	r0, #0
    13a8:	movt	r0, #0
    13ac:	bl	1204 <ff_printf>
    13b0:	str	r0, [sp, #16]
    13b4:	b	1414 <print_escaped+0x1ac>
    13b8:	movw	r0, #0
    13bc:	movt	r0, #0
    13c0:	bl	1204 <ff_printf>
    13c4:	str	r0, [sp, #12]
    13c8:	b	1414 <print_escaped+0x1ac>
    13cc:	ldrb	r0, [fp, #-13]
    13d0:	cmp	r0, #32
    13d4:	blt	13fc <print_escaped+0x194>
    13d8:	ldrb	r0, [fp, #-13]
    13dc:	cmp	r0, #126	; 0x7e
    13e0:	bgt	13fc <print_escaped+0x194>
    13e4:	ldrb	r1, [fp, #-13]
    13e8:	movw	r0, #0
    13ec:	movt	r0, #0
    13f0:	bl	1204 <ff_printf>
    13f4:	str	r0, [sp, #8]
    13f8:	b	1410 <print_escaped+0x1a8>
    13fc:	ldrb	r1, [fp, #-13]
    1400:	movw	r0, #0
    1404:	movt	r0, #0
    1408:	bl	1204 <ff_printf>
    140c:	str	r0, [sp, #4]
    1410:	b	1414 <print_escaped+0x1ac>
    1414:	b	1418 <print_escaped+0x1b0>
    1418:	ldr	r0, [fp, #-12]
    141c:	add	r0, r0, #1
    1420:	str	r0, [fp, #-12]
    1424:	b	1284 <print_escaped+0x1c>
    1428:	mov	sp, fp
    142c:	pop	{fp, pc}

00001430 <indent>:
    1430:	push	{fp, lr}
    1434:	mov	fp, sp
    1438:	sub	sp, sp, #8
    143c:	movw	r0, #0
    1440:	movt	r0, #0
    1444:	ldr	r0, [r0]
    1448:	cmp	r0, #0
    144c:	blt	1454 <indent+0x24>
    1450:	b	1474 <indent+0x44>
    1454:	movw	r0, #0
    1458:	movt	r0, #0
    145c:	movw	r1, #0
    1460:	movt	r1, #0
    1464:	movw	r2, #44	; 0x2c
    1468:	movw	r3, #0
    146c:	movt	r3, #0
    1470:	bl	0 <__assert_fail>
    1474:	movw	r0, #0
    1478:	movt	r0, #0
    147c:	ldr	r0, [r0]
    1480:	str	r0, [sp, #4]
    1484:	ldr	r0, [sp, #4]
    1488:	cmp	r0, #0
    148c:	ble	14c0 <indent+0x90>
    1490:	movw	r0, #0
    1494:	movt	r0, #0
    1498:	ldr	r0, [r0]
    149c:	movw	r1, #0
    14a0:	movt	r1, #0
    14a4:	bl	0 <fprintf>
    14a8:	str	r0, [sp]
    14ac:	ldr	r0, [sp, #4]
    14b0:	mvn	r1, #0
    14b4:	add	r0, r0, r1
    14b8:	str	r0, [sp, #4]
    14bc:	b	1484 <indent+0x54>
    14c0:	mov	sp, fp
    14c4:	pop	{fp, pc}
