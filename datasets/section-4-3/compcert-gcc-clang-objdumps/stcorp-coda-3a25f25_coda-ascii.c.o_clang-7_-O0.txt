
../compcert-repos/stcorp-coda-3a25f25/CMakeFiles/coda_static.dir/libcoda/coda-ascii.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <coda_ascii_reopen_with_definition>:
   0:	push	{fp, lr}
   4:	mov	fp, sp
   8:	sub	sp, sp, #24
   c:	str	r0, [fp, #-8]
  10:	str	r1, [sp, #12]
  14:	ldr	r0, [sp, #12]
  18:	movw	r1, #0
  1c:	cmp	r0, r1
  20:	beq	28 <coda_ascii_reopen_with_definition+0x28>
  24:	b	48 <coda_ascii_reopen_with_definition+0x48>
  28:	movw	r0, #0
  2c:	movt	r0, #0
  30:	movw	r1, #0
  34:	movt	r1, #0
  38:	movw	r2, #52	; 0x34
  3c:	movw	r3, #0
  40:	movt	r3, #0
  44:	bl	0 <__assert_fail>
  48:	ldr	r0, [fp, #-8]
  4c:	ldr	r0, [r0]
  50:	ldr	r0, [r0, #16]
  54:	cmp	r0, #1
  58:	bne	60 <coda_ascii_reopen_with_definition+0x60>
  5c:	b	80 <coda_ascii_reopen_with_definition+0x80>
  60:	movw	r0, #0
  64:	movt	r0, #0
  68:	movw	r1, #0
  6c:	movt	r1, #0
  70:	movw	r2, #53	; 0x35
  74:	movw	r3, #0
  78:	movt	r3, #0
  7c:	bl	0 <__assert_fail>
  80:	ldr	r0, [sp, #12]
  84:	ldr	r0, [r0]
  88:	cmp	r0, #0
  8c:	bne	94 <coda_ascii_reopen_with_definition+0x94>
  90:	b	b4 <coda_ascii_reopen_with_definition+0xb4>
  94:	movw	r0, #0
  98:	movt	r0, #0
  9c:	movw	r1, #0
  a0:	movt	r1, #0
  a4:	movw	r2, #54	; 0x36
  a8:	movw	r3, #0
  ac:	movt	r3, #0
  b0:	bl	0 <__assert_fail>
  b4:	movw	r0, #80	; 0x50
  b8:	bl	0 <malloc>
  bc:	str	r0, [sp, #8]
  c0:	ldr	r0, [sp, #8]
  c4:	movw	lr, #0
  c8:	cmp	r0, lr
  cc:	bne	100 <coda_ascii_reopen_with_definition+0x100>
  d0:	mvn	r0, #0
  d4:	movw	r1, #0
  d8:	movt	r1, #0
  dc:	movw	r2, #80	; 0x50
  e0:	movw	r3, #0
  e4:	movt	r3, #0
  e8:	movw	ip, #61	; 0x3d
  ec:	str	ip, [sp]
  f0:	bl	0 <coda_set_error>
  f4:	mvn	r0, #0
  f8:	str	r0, [fp, #-4]
  fc:	b	294 <coda_ascii_reopen_with_definition+0x294>
 100:	ldr	r0, [sp, #8]
 104:	mov	r1, #0
 108:	str	r1, [r0]
 10c:	ldr	r0, [fp, #-8]
 110:	ldr	r0, [r0]
 114:	ldr	r2, [r0, #8]
 118:	ldr	r0, [r0, #12]
 11c:	ldr	r3, [sp, #8]
 120:	str	r0, [r3, #12]
 124:	str	r2, [r3, #8]
 128:	ldr	r0, [sp, #12]
 12c:	ldr	r0, [r0]
 130:	ldr	r2, [sp, #8]
 134:	str	r0, [r2, #16]
 138:	ldr	r0, [sp, #12]
 13c:	ldr	r0, [r0, #28]
 140:	ldr	r2, [sp, #8]
 144:	str	r0, [r2, #20]
 148:	ldr	r0, [sp, #12]
 14c:	ldr	r2, [sp, #8]
 150:	str	r0, [r2, #24]
 154:	ldr	r0, [sp, #8]
 158:	str	r1, [r0, #28]
 15c:	ldr	r0, [sp, #8]
 160:	str	r1, [r0, #32]
 164:	ldr	r0, [fp, #-8]
 168:	ldr	r0, [r0]
 16c:	ldr	r2, [r0, #40]	; 0x28
 170:	ldr	r0, [r0, #44]	; 0x2c
 174:	ldr	r3, [sp, #8]
 178:	str	r0, [r3, #44]	; 0x2c
 17c:	str	r2, [r3, #40]	; 0x28
 180:	ldr	r0, [fp, #-8]
 184:	ldr	r0, [r0]
 188:	str	r1, [r0, #44]	; 0x2c
 18c:	str	r1, [r0, #40]	; 0x28
 190:	ldr	r0, [fp, #-8]
 194:	ldr	r0, [r0]
 198:	ldr	r0, [r0, #48]	; 0x30
 19c:	ldr	r1, [sp, #8]
 1a0:	str	r0, [r1, #48]	; 0x30
 1a4:	ldr	r0, [fp, #-8]
 1a8:	ldr	r0, [r0]
 1ac:	movw	r1, #0
 1b0:	str	r1, [r0, #48]	; 0x30
 1b4:	ldr	r0, [fp, #-8]
 1b8:	ldr	r0, [r0]
 1bc:	ldr	r0, [r0, #52]	; 0x34
 1c0:	ldr	r2, [sp, #8]
 1c4:	str	r0, [r2, #52]	; 0x34
 1c8:	ldr	r0, [fp, #-8]
 1cc:	ldr	r0, [r0]
 1d0:	ldr	r0, [r0, #56]	; 0x38
 1d4:	ldr	r2, [sp, #8]
 1d8:	str	r0, [r2, #56]	; 0x38
 1dc:	ldr	r0, [fp, #-8]
 1e0:	ldr	r0, [r0]
 1e4:	mvn	r2, #0
 1e8:	str	r2, [r0, #56]	; 0x38
 1ec:	ldr	r0, [sp, #8]
 1f0:	str	r1, [r0, #60]	; 0x3c
 1f4:	ldr	r0, [sp, #8]
 1f8:	str	r2, [r0, #64]	; 0x40
 1fc:	ldr	r0, [sp, #8]
 200:	str	r1, [r0, #68]	; 0x44
 204:	ldr	r0, [sp, #8]
 208:	str	r1, [r0, #72]	; 0x48
 20c:	ldr	r0, [sp, #8]
 210:	str	r1, [r0, #76]	; 0x4c
 214:	ldr	r0, [fp, #-8]
 218:	ldr	r0, [r0]
 21c:	ldr	r0, [r0]
 220:	bl	0 <strdup>
 224:	ldr	r1, [sp, #8]
 228:	str	r0, [r1]
 22c:	ldr	r0, [sp, #8]
 230:	ldr	r0, [r0]
 234:	movw	r1, #0
 238:	cmp	r0, r1
 23c:	bne	270 <coda_ascii_reopen_with_definition+0x270>
 240:	mvn	r0, #0
 244:	movw	r1, #0
 248:	movt	r1, #0
 24c:	movw	r2, #0
 250:	movt	r2, #0
 254:	movw	r3, #97	; 0x61
 258:	bl	0 <coda_set_error>
 25c:	ldr	r0, [sp, #8]
 260:	bl	0 <free>
 264:	mvn	r0, #0
 268:	str	r0, [fp, #-4]
 26c:	b	294 <coda_ascii_reopen_with_definition+0x294>
 270:	ldr	r0, [fp, #-8]
 274:	ldr	r0, [r0]
 278:	bl	0 <coda_close>
 27c:	ldr	lr, [sp, #8]
 280:	ldr	r1, [fp, #-8]
 284:	str	lr, [r1]
 288:	movw	r1, #0
 28c:	str	r1, [fp, #-4]
 290:	str	r0, [sp, #4]
 294:	ldr	r0, [fp, #-4]
 298:	mov	sp, fp
 29c:	pop	{fp, pc}

000002a0 <coda_ascii_close>:
 2a0:	push	{fp, lr}
 2a4:	mov	fp, sp
 2a8:	sub	sp, sp, #16
 2ac:	str	r0, [sp, #8]
 2b0:	ldr	r0, [sp, #8]
 2b4:	str	r0, [sp, #4]
 2b8:	ldr	r0, [sp, #4]
 2bc:	bl	0 <coda_bin_product_close>
 2c0:	cmp	r0, #0
 2c4:	beq	2d4 <coda_ascii_close+0x34>
 2c8:	mvn	r0, #0
 2cc:	str	r0, [fp, #-4]
 2d0:	b	344 <coda_ascii_close+0xa4>
 2d4:	ldr	r0, [sp, #4]
 2d8:	ldr	r0, [r0]
 2dc:	movw	r1, #0
 2e0:	cmp	r0, r1
 2e4:	beq	2f4 <coda_ascii_close+0x54>
 2e8:	ldr	r0, [sp, #4]
 2ec:	ldr	r0, [r0]
 2f0:	bl	0 <free>
 2f4:	ldr	r0, [sp, #4]
 2f8:	ldr	r0, [r0, #68]	; 0x44
 2fc:	movw	r1, #0
 300:	cmp	r0, r1
 304:	beq	314 <coda_ascii_close+0x74>
 308:	ldr	r0, [sp, #4]
 30c:	ldr	r0, [r0, #68]	; 0x44
 310:	bl	0 <free>
 314:	ldr	r0, [sp, #4]
 318:	ldr	r0, [r0, #76]	; 0x4c
 31c:	movw	r1, #0
 320:	cmp	r0, r1
 324:	beq	334 <coda_ascii_close+0x94>
 328:	ldr	r0, [sp, #4]
 32c:	ldr	r0, [r0, #76]	; 0x4c
 330:	bl	0 <coda_type_release>
 334:	ldr	r0, [sp, #4]
 338:	bl	0 <free>
 33c:	movw	r0, #0
 340:	str	r0, [fp, #-4]
 344:	ldr	r0, [fp, #-4]
 348:	mov	sp, fp
 34c:	pop	{fp, pc}

00000350 <coda_ascii_init_asciilines>:
 350:	push	{r4, sl, fp, lr}
 354:	add	fp, sp, #8
 358:	sub	sp, sp, #112	; 0x70
 35c:	sub	sp, sp, #4096	; 0x1000
 360:	str	r0, [fp, #-16]
 364:	ldr	r0, [fp, #-16]
 368:	str	r0, [sp, #96]	; 0x60
 36c:	mov	r0, #0
 370:	str	r0, [sp, #92]	; 0x5c
 374:	str	r0, [sp, #88]	; 0x58
 378:	str	r0, [sp, #84]	; 0x54
 37c:	str	r0, [sp, #80]	; 0x50
 380:	movw	r0, #0
 384:	strb	r0, [sp, #79]	; 0x4f
 388:	movw	r0, #0
 38c:	str	r0, [sp, #72]	; 0x48
 390:	ldr	r0, [sp, #96]	; 0x60
 394:	ldr	r0, [r0, #64]	; 0x40
 398:	cmn	r0, #1
 39c:	bne	3a4 <coda_ascii_init_asciilines+0x54>
 3a0:	b	3c4 <coda_ascii_init_asciilines+0x74>
 3a4:	movw	r0, #0
 3a8:	movt	r0, #0
 3ac:	movw	r1, #0
 3b0:	movt	r1, #0
 3b4:	movw	r2, #185	; 0xb9
 3b8:	movw	r3, #0
 3bc:	movt	r3, #0
 3c0:	bl	0 <__assert_fail>
 3c4:	ldr	r0, [sp, #96]	; 0x60
 3c8:	ldr	r0, [r0, #52]	; 0x34
 3cc:	cmp	r0, #0
 3d0:	bne	42c <coda_ascii_init_asciilines+0xdc>
 3d4:	ldr	r0, [sp, #96]	; 0x60
 3d8:	ldr	r0, [r0, #56]	; 0x38
 3dc:	movw	r1, #0
 3e0:	str	r1, [sp, #52]	; 0x34
 3e4:	ldr	r2, [sp, #52]	; 0x34
 3e8:	bl	0 <lseek>
 3ec:	cmp	r0, #0
 3f0:	bge	428 <coda_ascii_init_asciilines+0xd8>
 3f4:	bl	0 <__errno_location>
 3f8:	ldr	r0, [r0]
 3fc:	bl	0 <strerror>
 400:	mvn	lr, #21
 404:	str	r0, [sp, #48]	; 0x30
 408:	mov	r0, lr
 40c:	movw	r1, #0
 410:	movt	r1, #0
 414:	ldr	r2, [sp, #48]	; 0x30
 418:	bl	0 <coda_set_error>
 41c:	mvn	r0, #0
 420:	str	r0, [fp, #-12]
 424:	b	93c <coda_ascii_init_asciilines+0x5ec>
 428:	b	42c <coda_ascii_init_asciilines+0xdc>
 42c:	b	430 <coda_ascii_init_asciilines+0xe0>
 430:	mov	r0, #0
 434:	str	r0, [sp, #68]	; 0x44
 438:	mov	r0, #4096	; 0x1000
 43c:	str	r0, [sp, #64]	; 0x40
 440:	ldr	r0, [sp, #80]	; 0x50
 444:	ldr	r1, [sp, #84]	; 0x54
 448:	ldr	r2, [sp, #64]	; 0x40
 44c:	ldr	r3, [sp, #68]	; 0x44
 450:	adds	r0, r0, r2
 454:	adc	r1, r1, r3
 458:	ldr	r2, [sp, #96]	; 0x60
 45c:	ldr	r3, [r2, #8]
 460:	ldr	r2, [r2, #12]
 464:	subs	r0, r3, r0
 468:	sbcs	r1, r2, r1
 46c:	str	r0, [sp, #44]	; 0x2c
 470:	str	r1, [sp, #40]	; 0x28
 474:	bge	4a0 <coda_ascii_init_asciilines+0x150>
 478:	b	47c <coda_ascii_init_asciilines+0x12c>
 47c:	ldr	r0, [sp, #96]	; 0x60
 480:	ldr	r1, [r0, #8]
 484:	ldr	r0, [r0, #12]
 488:	ldr	r2, [sp, #80]	; 0x50
 48c:	ldr	r3, [sp, #84]	; 0x54
 490:	subs	r1, r1, r2
 494:	sbc	r0, r0, r3
 498:	str	r1, [sp, #64]	; 0x40
 49c:	str	r0, [sp, #68]	; 0x44
 4a0:	ldr	r0, [sp, #64]	; 0x40
 4a4:	ldr	r1, [sp, #68]	; 0x44
 4a8:	orr	r0, r0, r1
 4ac:	cmp	r0, #0
 4b0:	bne	4bc <coda_ascii_init_asciilines+0x16c>
 4b4:	b	4b8 <coda_ascii_init_asciilines+0x168>
 4b8:	b	8d8 <coda_ascii_init_asciilines+0x588>
 4bc:	add	r0, sp, #103	; 0x67
 4c0:	ldr	r1, [sp, #96]	; 0x60
 4c4:	ldr	r2, [sp, #80]	; 0x50
 4c8:	ldr	r3, [sp, #84]	; 0x54
 4cc:	ldr	ip, [sp, #64]	; 0x40
 4d0:	ldr	lr, [sp, #68]	; 0x44
 4d4:	mov	r4, sp
 4d8:	str	r0, [r4, #8]
 4dc:	str	lr, [r4, #4]
 4e0:	str	ip, [r4]
 4e4:	mov	r0, r1
 4e8:	bl	948 <read_bytes>
 4ec:	cmp	r0, #0
 4f0:	beq	500 <coda_ascii_init_asciilines+0x1b0>
 4f4:	mvn	r0, #0
 4f8:	str	r0, [fp, #-12]
 4fc:	b	93c <coda_ascii_init_asciilines+0x5ec>
 500:	ldrb	r0, [sp, #79]	; 0x4f
 504:	cmp	r0, #13
 508:	bne	544 <coda_ascii_init_asciilines+0x1f4>
 50c:	ldrb	r0, [sp, #103]	; 0x67
 510:	cmp	r0, #10
 514:	beq	544 <coda_ascii_init_asciilines+0x1f4>
 518:	ldr	r0, [sp, #96]	; 0x60
 51c:	movw	r1, #2
 520:	bl	bb0 <verify_eol_type>
 524:	cmp	r0, #0
 528:	beq	540 <coda_ascii_init_asciilines+0x1f0>
 52c:	ldr	r0, [sp, #88]	; 0x58
 530:	bl	0 <free>
 534:	mvn	r0, #0
 538:	str	r0, [fp, #-12]
 53c:	b	93c <coda_ascii_init_asciilines+0x5ec>
 540:	b	544 <coda_ascii_init_asciilines+0x1f4>
 544:	movw	r0, #0
 548:	str	r0, [sp, #60]	; 0x3c
 54c:	ldr	r0, [sp, #60]	; 0x3c
 550:	ldr	r1, [sp, #64]	; 0x40
 554:	ldr	r2, [sp, #68]	; 0x44
 558:	subs	r1, r0, r1
 55c:	rscs	r0, r2, r0, asr #31
 560:	str	r1, [sp, #36]	; 0x24
 564:	str	r0, [sp, #32]
 568:	bge	8a0 <coda_ascii_init_asciilines+0x550>
 56c:	b	570 <coda_ascii_init_asciilines+0x220>
 570:	ldr	r0, [sp, #60]	; 0x3c
 574:	cmp	r0, #0
 578:	bne	5ec <coda_ascii_init_asciilines+0x29c>
 57c:	ldrb	r0, [sp, #79]	; 0x4f
 580:	cmp	r0, #13
 584:	bne	5ec <coda_ascii_init_asciilines+0x29c>
 588:	ldrb	r0, [sp, #103]	; 0x67
 58c:	cmp	r0, #10
 590:	bne	5ec <coda_ascii_init_asciilines+0x29c>
 594:	ldr	r0, [sp, #88]	; 0x58
 598:	ldr	r1, [sp, #92]	; 0x5c
 59c:	sub	r1, r1, #1
 5a0:	add	r0, r0, r1, lsl #2
 5a4:	ldr	r1, [r0]
 5a8:	add	r1, r1, #1
 5ac:	str	r1, [r0]
 5b0:	movw	r0, #3
 5b4:	str	r0, [sp, #72]	; 0x48
 5b8:	ldr	r1, [sp, #96]	; 0x60
 5bc:	str	r0, [sp, #28]
 5c0:	mov	r0, r1
 5c4:	ldr	r1, [sp, #28]
 5c8:	bl	bb0 <verify_eol_type>
 5cc:	cmp	r0, #0
 5d0:	beq	5e8 <coda_ascii_init_asciilines+0x298>
 5d4:	ldr	r0, [sp, #88]	; 0x58
 5d8:	bl	0 <free>
 5dc:	mvn	r0, #0
 5e0:	str	r0, [fp, #-12]
 5e4:	b	93c <coda_ascii_init_asciilines+0x5ec>
 5e8:	b	88c <coda_ascii_init_asciilines+0x53c>
 5ec:	ldr	r0, [sp, #60]	; 0x3c
 5f0:	add	r1, sp, #103	; 0x67
 5f4:	add	r0, r1, r0
 5f8:	ldrb	r0, [r0]
 5fc:	cmp	r0, #13
 600:	beq	65c <coda_ascii_init_asciilines+0x30c>
 604:	ldr	r0, [sp, #60]	; 0x3c
 608:	add	r1, sp, #103	; 0x67
 60c:	add	r0, r1, r0
 610:	ldrb	r0, [r0]
 614:	cmp	r0, #10
 618:	beq	65c <coda_ascii_init_asciilines+0x30c>
 61c:	ldr	r0, [sp, #80]	; 0x50
 620:	ldr	r1, [sp, #84]	; 0x54
 624:	ldr	r2, [sp, #60]	; 0x3c
 628:	adds	r0, r0, r2
 62c:	adc	r1, r1, r2, asr #31
 630:	ldr	r2, [sp, #96]	; 0x60
 634:	ldr	r3, [r2, #8]
 638:	ldr	r2, [r2, #12]
 63c:	subs	r3, r3, #1
 640:	sbc	r2, r2, #0
 644:	eor	r1, r1, r2
 648:	eor	r0, r0, r3
 64c:	orr	r0, r0, r1
 650:	cmp	r0, #0
 654:	bne	888 <coda_ascii_init_asciilines+0x538>
 658:	b	65c <coda_ascii_init_asciilines+0x30c>
 65c:	ldr	r0, [sp, #92]	; 0x5c
 660:	asr	r1, r0, #31
 664:	add	r1, r0, r1, lsr #28
 668:	bic	r1, r1, #15
 66c:	sub	r0, r0, r1
 670:	cmp	r0, #0
 674:	bne	6f8 <coda_ascii_init_asciilines+0x3a8>
 678:	ldr	r0, [sp, #88]	; 0x58
 67c:	ldr	r1, [sp, #92]	; 0x5c
 680:	add	r1, r1, #16
 684:	lsl	r1, r1, #2
 688:	bl	0 <realloc>
 68c:	str	r0, [sp, #56]	; 0x38
 690:	ldr	r0, [sp, #56]	; 0x38
 694:	movw	r1, #0
 698:	cmp	r0, r1
 69c:	bne	6f0 <coda_ascii_init_asciilines+0x3a0>
 6a0:	ldr	r0, [sp, #92]	; 0x5c
 6a4:	add	r0, r0, #16
 6a8:	lsl	r2, r0, #2
 6ac:	mvn	r0, #0
 6b0:	movw	r1, #0
 6b4:	movt	r1, #0
 6b8:	movw	r3, #0
 6bc:	movt	r3, #0
 6c0:	movw	ip, #245	; 0xf5
 6c4:	str	ip, [sp]
 6c8:	bl	0 <coda_set_error>
 6cc:	ldr	r0, [sp, #88]	; 0x58
 6d0:	movw	r1, #0
 6d4:	cmp	r0, r1
 6d8:	beq	6e4 <coda_ascii_init_asciilines+0x394>
 6dc:	ldr	r0, [sp, #88]	; 0x58
 6e0:	bl	0 <free>
 6e4:	mvn	r0, #0
 6e8:	str	r0, [fp, #-12]
 6ec:	b	93c <coda_ascii_init_asciilines+0x5ec>
 6f0:	ldr	r0, [sp, #56]	; 0x38
 6f4:	str	r0, [sp, #88]	; 0x58
 6f8:	ldr	r0, [sp, #80]	; 0x50
 6fc:	ldr	r1, [sp, #60]	; 0x3c
 700:	add	r0, r0, r1
 704:	add	r0, r0, #1
 708:	ldr	r1, [sp, #88]	; 0x58
 70c:	ldr	r2, [sp, #92]	; 0x5c
 710:	add	r1, r1, r2, lsl #2
 714:	str	r0, [r1]
 718:	ldr	r0, [sp, #92]	; 0x5c
 71c:	add	r0, r0, #1
 720:	str	r0, [sp, #92]	; 0x5c
 724:	movw	r0, #0
 728:	str	r0, [sp, #72]	; 0x48
 72c:	ldr	r0, [sp, #60]	; 0x3c
 730:	add	r1, sp, #103	; 0x67
 734:	add	r0, r1, r0
 738:	ldrb	r0, [r0]
 73c:	cmp	r0, #10
 740:	bne	780 <coda_ascii_init_asciilines+0x430>
 744:	movw	r0, #1
 748:	str	r0, [sp, #72]	; 0x48
 74c:	ldr	r1, [sp, #96]	; 0x60
 750:	str	r0, [sp, #24]
 754:	mov	r0, r1
 758:	ldr	r1, [sp, #24]
 75c:	bl	bb0 <verify_eol_type>
 760:	cmp	r0, #0
 764:	beq	77c <coda_ascii_init_asciilines+0x42c>
 768:	ldr	r0, [sp, #88]	; 0x58
 76c:	bl	0 <free>
 770:	mvn	r0, #0
 774:	str	r0, [fp, #-12]
 778:	b	93c <coda_ascii_init_asciilines+0x5ec>
 77c:	b	884 <coda_ascii_init_asciilines+0x534>
 780:	ldr	r0, [sp, #60]	; 0x3c
 784:	add	r1, sp, #103	; 0x67
 788:	add	r0, r1, r0
 78c:	ldrb	r0, [r0]
 790:	cmp	r0, #13
 794:	bne	880 <coda_ascii_init_asciilines+0x530>
 798:	mov	r0, #2
 79c:	str	r0, [sp, #72]	; 0x48
 7a0:	ldr	r0, [sp, #60]	; 0x3c
 7a4:	ldr	r1, [sp, #64]	; 0x40
 7a8:	ldr	r2, [sp, #68]	; 0x44
 7ac:	subs	r1, r1, #1
 7b0:	sbc	r2, r2, #0
 7b4:	subs	r1, r0, r1
 7b8:	rscs	r0, r2, r0, asr #31
 7bc:	str	r1, [sp, #20]
 7c0:	str	r0, [sp, #16]
 7c4:	bge	87c <coda_ascii_init_asciilines+0x52c>
 7c8:	b	7cc <coda_ascii_init_asciilines+0x47c>
 7cc:	ldr	r0, [sp, #60]	; 0x3c
 7d0:	add	r0, r0, #1
 7d4:	add	r1, sp, #103	; 0x67
 7d8:	add	r0, r1, r0
 7dc:	ldrb	r0, [r0]
 7e0:	cmp	r0, #10
 7e4:	bne	84c <coda_ascii_init_asciilines+0x4fc>
 7e8:	movw	r0, #3
 7ec:	str	r0, [sp, #72]	; 0x48
 7f0:	ldr	r1, [sp, #96]	; 0x60
 7f4:	str	r0, [sp, #12]
 7f8:	mov	r0, r1
 7fc:	ldr	r1, [sp, #12]
 800:	bl	bb0 <verify_eol_type>
 804:	cmp	r0, #0
 808:	beq	820 <coda_ascii_init_asciilines+0x4d0>
 80c:	ldr	r0, [sp, #88]	; 0x58
 810:	bl	0 <free>
 814:	mvn	r0, #0
 818:	str	r0, [fp, #-12]
 81c:	b	93c <coda_ascii_init_asciilines+0x5ec>
 820:	ldr	r0, [sp, #88]	; 0x58
 824:	ldr	r1, [sp, #92]	; 0x5c
 828:	sub	r1, r1, #1
 82c:	add	r0, r0, r1, lsl #2
 830:	ldr	r1, [r0]
 834:	add	r1, r1, #1
 838:	str	r1, [r0]
 83c:	ldr	r0, [sp, #60]	; 0x3c
 840:	add	r0, r0, #1
 844:	str	r0, [sp, #60]	; 0x3c
 848:	b	878 <coda_ascii_init_asciilines+0x528>
 84c:	ldr	r0, [sp, #96]	; 0x60
 850:	movw	r1, #2
 854:	bl	bb0 <verify_eol_type>
 858:	cmp	r0, #0
 85c:	beq	874 <coda_ascii_init_asciilines+0x524>
 860:	ldr	r0, [sp, #88]	; 0x58
 864:	bl	0 <free>
 868:	mvn	r0, #0
 86c:	str	r0, [fp, #-12]
 870:	b	93c <coda_ascii_init_asciilines+0x5ec>
 874:	b	878 <coda_ascii_init_asciilines+0x528>
 878:	b	87c <coda_ascii_init_asciilines+0x52c>
 87c:	b	880 <coda_ascii_init_asciilines+0x530>
 880:	b	884 <coda_ascii_init_asciilines+0x534>
 884:	b	888 <coda_ascii_init_asciilines+0x538>
 888:	b	88c <coda_ascii_init_asciilines+0x53c>
 88c:	b	890 <coda_ascii_init_asciilines+0x540>
 890:	ldr	r0, [sp, #60]	; 0x3c
 894:	add	r0, r0, #1
 898:	str	r0, [sp, #60]	; 0x3c
 89c:	b	54c <coda_ascii_init_asciilines+0x1fc>
 8a0:	ldr	r0, [sp, #64]	; 0x40
 8a4:	add	r1, sp, #103	; 0x67
 8a8:	add	r0, r1, r0
 8ac:	ldrb	r0, [r0, #-1]
 8b0:	strb	r0, [sp, #79]	; 0x4f
 8b4:	ldr	r0, [sp, #64]	; 0x40
 8b8:	ldr	r1, [sp, #68]	; 0x44
 8bc:	ldr	r2, [sp, #80]	; 0x50
 8c0:	ldr	r3, [sp, #84]	; 0x54
 8c4:	adds	r0, r2, r0
 8c8:	adc	r1, r3, r1
 8cc:	str	r0, [sp, #80]	; 0x50
 8d0:	str	r1, [sp, #84]	; 0x54
 8d4:	b	430 <coda_ascii_init_asciilines+0xe0>
 8d8:	ldrb	r0, [sp, #79]	; 0x4f
 8dc:	cmp	r0, #13
 8e0:	bne	910 <coda_ascii_init_asciilines+0x5c0>
 8e4:	ldr	r0, [sp, #96]	; 0x60
 8e8:	movw	r1, #2
 8ec:	bl	bb0 <verify_eol_type>
 8f0:	cmp	r0, #0
 8f4:	beq	90c <coda_ascii_init_asciilines+0x5bc>
 8f8:	ldr	r0, [sp, #88]	; 0x58
 8fc:	bl	0 <free>
 900:	mvn	r0, #0
 904:	str	r0, [fp, #-12]
 908:	b	93c <coda_ascii_init_asciilines+0x5ec>
 90c:	b	910 <coda_ascii_init_asciilines+0x5c0>
 910:	ldr	r0, [sp, #92]	; 0x5c
 914:	ldr	r1, [sp, #96]	; 0x60
 918:	str	r0, [r1, #64]	; 0x40
 91c:	ldr	r0, [sp, #88]	; 0x58
 920:	ldr	r1, [sp, #96]	; 0x60
 924:	str	r0, [r1, #68]	; 0x44
 928:	ldr	r0, [sp, #72]	; 0x48
 92c:	ldr	r1, [sp, #96]	; 0x60
 930:	str	r0, [r1, #72]	; 0x48
 934:	movw	r0, #0
 938:	str	r0, [fp, #-12]
 93c:	ldr	r0, [fp, #-12]
 940:	sub	sp, fp, #8
 944:	pop	{r4, sl, fp, pc}

00000948 <read_bytes>:
 948:	push	{fp, lr}
 94c:	mov	fp, sp
 950:	sub	sp, sp, #128	; 0x80
 954:	ldr	r1, [fp, #12]
 958:	ldr	ip, [fp, #8]
 95c:	ldr	lr, [fp, #16]
 960:	str	r0, [fp, #-8]
 964:	str	r3, [fp, #-12]
 968:	str	r2, [fp, #-16]
 96c:	str	r1, [fp, #-20]	; 0xffffffec
 970:	str	ip, [fp, #-24]	; 0xffffffe8
 974:	ldr	r0, [fp, #-8]
 978:	ldr	r0, [r0, #48]	; 0x30
 97c:	movw	r1, #0
 980:	cmp	r0, r1
 984:	str	lr, [sp, #36]	; 0x24
 988:	beq	aa8 <read_bytes+0x160>
 98c:	ldr	r0, [fp, #-16]
 990:	ldr	r1, [fp, #-12]
 994:	ldr	r2, [fp, #-24]	; 0xffffffe8
 998:	ldr	r3, [fp, #-20]	; 0xffffffec
 99c:	adds	r0, r0, r2
 9a0:	adc	r1, r1, r3
 9a4:	ldr	r2, [fp, #-8]
 9a8:	ldr	r3, [r2, #40]	; 0x28
 9ac:	ldr	r2, [r2, #44]	; 0x2c
 9b0:	subs	r0, r3, r0
 9b4:	sbcs	r1, r2, r1
 9b8:	str	r0, [sp, #32]
 9bc:	str	r1, [sp, #28]
 9c0:	bcs	a88 <read_bytes+0x140>
 9c4:	b	9c8 <read_bytes+0x80>
 9c8:	ldr	r0, [fp, #-8]
 9cc:	ldr	r0, [r0, #16]
 9d0:	cmp	r0, #0
 9d4:	beq	9e8 <read_bytes+0xa0>
 9d8:	ldr	r0, [fp, #-8]
 9dc:	ldr	r0, [r0, #16]
 9e0:	cmp	r0, #1
 9e4:	bne	a04 <read_bytes+0xbc>
 9e8:	mvn	r0, #300	; 0x12c
 9ec:	movw	r1, #0
 9f0:	movt	r1, #0
 9f4:	bl	0 <coda_set_error>
 9f8:	mvn	r0, #0
 9fc:	str	r0, [fp, #-4]
 a00:	b	ba4 <read_bytes+0x25c>
 a04:	add	r2, sp, #41	; 0x29
 a08:	ldr	r0, [fp, #-24]	; 0xffffffe8
 a0c:	ldr	r1, [fp, #-20]	; 0xffffffec
 a10:	sub	r3, fp, #45	; 0x2d
 a14:	str	r2, [sp, #24]
 a18:	mov	r2, r3
 a1c:	bl	0 <coda_str64>
 a20:	ldr	r0, [fp, #-16]
 a24:	ldr	r1, [fp, #-12]
 a28:	add	r2, sp, #62	; 0x3e
 a2c:	bl	0 <coda_str64>
 a30:	ldr	r0, [fp, #-8]
 a34:	ldr	r1, [r0, #40]	; 0x28
 a38:	ldr	r0, [r0, #44]	; 0x2c
 a3c:	str	r0, [sp, #20]
 a40:	mov	r0, r1
 a44:	ldr	r1, [sp, #20]
 a48:	ldr	r2, [sp, #24]
 a4c:	bl	0 <coda_str64>
 a50:	add	r0, sp, #41	; 0x29
 a54:	add	r3, sp, #62	; 0x3e
 a58:	sub	r2, fp, #45	; 0x2d
 a5c:	mvn	r1, #300	; 0x12c
 a60:	str	r0, [sp, #16]
 a64:	mov	r0, r1
 a68:	movw	r1, #0
 a6c:	movt	r1, #0
 a70:	ldr	lr, [sp, #16]
 a74:	str	lr, [sp]
 a78:	bl	0 <coda_set_error>
 a7c:	mvn	r0, #0
 a80:	str	r0, [fp, #-4]
 a84:	b	ba4 <read_bytes+0x25c>
 a88:	ldr	r0, [fp, #16]
 a8c:	ldr	r1, [fp, #-8]
 a90:	ldr	r1, [r1, #48]	; 0x30
 a94:	ldr	r2, [fp, #-16]
 a98:	add	r1, r1, r2
 a9c:	ldr	r2, [fp, #-24]	; 0xffffffe8
 aa0:	bl	0 <memcpy>
 aa4:	b	b9c <read_bytes+0x254>
 aa8:	ldr	r0, [fp, #-8]
 aac:	ldr	r0, [r0, #16]
 ab0:	cmp	r0, #0
 ab4:	beq	ac8 <read_bytes+0x180>
 ab8:	ldr	r0, [fp, #-8]
 abc:	ldr	r0, [r0, #16]
 ac0:	cmp	r0, #1
 ac4:	bne	acc <read_bytes+0x184>
 ac8:	b	aec <read_bytes+0x1a4>
 acc:	movw	r0, #0
 ad0:	movt	r0, #0
 ad4:	movw	r1, #0
 ad8:	movt	r1, #0
 adc:	movw	r2, #83	; 0x53
 ae0:	movw	r3, #0
 ae4:	movt	r3, #0
 ae8:	bl	0 <__assert_fail>
 aec:	ldr	r0, [fp, #-16]
 af0:	ldr	r1, [fp, #-12]
 af4:	ldr	r2, [fp, #-24]	; 0xffffffe8
 af8:	ldr	r3, [fp, #-20]	; 0xffffffec
 afc:	adds	r0, r0, r2
 b00:	adc	r1, r1, r3
 b04:	ldr	r2, [fp, #-8]
 b08:	ldr	r3, [r2, #8]
 b0c:	ldr	r2, [r2, #12]
 b10:	subs	r0, r3, r0
 b14:	sbcs	r1, r2, r1
 b18:	str	r0, [sp, #12]
 b1c:	str	r1, [sp, #8]
 b20:	bcs	b44 <read_bytes+0x1fc>
 b24:	b	b28 <read_bytes+0x1e0>
 b28:	mvn	r0, #300	; 0x12c
 b2c:	movw	r1, #0
 b30:	movt	r1, #0
 b34:	bl	0 <coda_set_error>
 b38:	mvn	r0, #0
 b3c:	str	r0, [fp, #-4]
 b40:	b	ba4 <read_bytes+0x25c>
 b44:	ldr	r0, [fp, #-8]
 b48:	ldr	r0, [r0, #56]	; 0x38
 b4c:	ldr	r1, [fp, #16]
 b50:	ldr	r2, [fp, #-24]	; 0xffffffe8
 b54:	ldr	r3, [fp, #-16]
 b58:	bl	0 <pread>
 b5c:	cmp	r0, #0
 b60:	bge	b98 <read_bytes+0x250>
 b64:	bl	0 <__errno_location>
 b68:	ldr	r0, [r0]
 b6c:	bl	0 <strerror>
 b70:	mvn	lr, #21
 b74:	str	r0, [sp, #4]
 b78:	mov	r0, lr
 b7c:	movw	r1, #0
 b80:	movt	r1, #0
 b84:	ldr	r2, [sp, #4]
 b88:	bl	0 <coda_set_error>
 b8c:	mvn	r0, #0
 b90:	str	r0, [fp, #-4]
 b94:	b	ba4 <read_bytes+0x25c>
 b98:	b	b9c <read_bytes+0x254>
 b9c:	movw	r0, #0
 ba0:	str	r0, [fp, #-4]
 ba4:	ldr	r0, [fp, #-4]
 ba8:	mov	sp, fp
 bac:	pop	{fp, pc}

00000bb0 <verify_eol_type>:
 bb0:	push	{fp, lr}
 bb4:	mov	fp, sp
 bb8:	sub	sp, sp, #24
 bbc:	str	r0, [fp, #-8]
 bc0:	str	r1, [sp, #12]
 bc4:	ldr	r0, [sp, #12]
 bc8:	cmp	r0, #0
 bcc:	beq	bd4 <verify_eol_type+0x24>
 bd0:	b	bf4 <verify_eol_type+0x44>
 bd4:	movw	r0, #0
 bd8:	movt	r0, #0
 bdc:	movw	r1, #0
 be0:	movt	r1, #0
 be4:	movw	r2, #156	; 0x9c
 be8:	movw	r3, #0
 bec:	movt	r3, #0
 bf0:	bl	0 <__assert_fail>
 bf4:	ldr	r0, [fp, #-8]
 bf8:	ldr	r0, [r0, #60]	; 0x3c
 bfc:	cmp	r0, #0
 c00:	bne	c1c <verify_eol_type+0x6c>
 c04:	ldr	r0, [sp, #12]
 c08:	ldr	r1, [fp, #-8]
 c0c:	str	r0, [r1, #60]	; 0x3c
 c10:	movw	r0, #0
 c14:	str	r0, [fp, #-4]
 c18:	b	c80 <verify_eol_type+0xd0>
 c1c:	ldr	r0, [fp, #-8]
 c20:	ldr	r0, [r0, #60]	; 0x3c
 c24:	ldr	r1, [sp, #12]
 c28:	cmp	r0, r1
 c2c:	beq	c78 <verify_eol_type+0xc8>
 c30:	ldr	r0, [sp, #12]
 c34:	bl	c90 <eol_type_to_string>
 c38:	ldr	lr, [fp, #-8]
 c3c:	ldr	lr, [lr, #60]	; 0x3c
 c40:	str	r0, [sp, #8]
 c44:	mov	r0, lr
 c48:	bl	c90 <eol_type_to_string>
 c4c:	ldr	lr, [pc, #56]	; c8c <verify_eol_type+0xdc>
 c50:	str	r0, [sp, #4]
 c54:	mov	r0, lr
 c58:	movw	r1, #0
 c5c:	movt	r1, #0
 c60:	ldr	r2, [sp, #8]
 c64:	ldr	r3, [sp, #4]
 c68:	bl	0 <coda_set_error>
 c6c:	mvn	r0, #0
 c70:	str	r0, [fp, #-4]
 c74:	b	c80 <verify_eol_type+0xd0>
 c78:	movw	r0, #0
 c7c:	str	r0, [fp, #-4]
 c80:	ldr	r0, [fp, #-4]
 c84:	mov	sp, fp
 c88:	pop	{fp, pc}
 c8c:	.word	0xfffffed4

00000c90 <eol_type_to_string>:
 c90:	push	{fp, lr}
 c94:	mov	fp, sp
 c98:	sub	sp, sp, #16
 c9c:	str	r0, [sp, #8]
 ca0:	ldr	r0, [sp, #8]
 ca4:	cmp	r0, #1
 ca8:	str	r0, [sp, #4]
 cac:	beq	ce4 <eol_type_to_string+0x54>
 cb0:	b	cb4 <eol_type_to_string+0x24>
 cb4:	ldr	r0, [sp, #4]
 cb8:	cmp	r0, #2
 cbc:	beq	cd4 <eol_type_to_string+0x44>
 cc0:	b	cc4 <eol_type_to_string+0x34>
 cc4:	ldr	r0, [sp, #4]
 cc8:	cmp	r0, #3
 ccc:	beq	cf4 <eol_type_to_string+0x64>
 cd0:	b	d04 <eol_type_to_string+0x74>
 cd4:	movw	r0, #0
 cd8:	movt	r0, #0
 cdc:	str	r0, [fp, #-4]
 ce0:	b	d28 <eol_type_to_string+0x98>
 ce4:	movw	r0, #0
 ce8:	movt	r0, #0
 cec:	str	r0, [fp, #-4]
 cf0:	b	d28 <eol_type_to_string+0x98>
 cf4:	movw	r0, #0
 cf8:	movt	r0, #0
 cfc:	str	r0, [fp, #-4]
 d00:	b	d28 <eol_type_to_string+0x98>
 d04:	b	d08 <eol_type_to_string+0x78>
 d08:	movw	r0, #0
 d0c:	movt	r0, #0
 d10:	movw	r1, #0
 d14:	movt	r1, #0
 d18:	movw	r2, #150	; 0x96
 d1c:	movw	r3, #0
 d20:	movt	r3, #0
 d24:	bl	0 <__assert_fail>
 d28:	ldr	r0, [fp, #-4]
 d2c:	mov	sp, fp
 d30:	pop	{fp, pc}
