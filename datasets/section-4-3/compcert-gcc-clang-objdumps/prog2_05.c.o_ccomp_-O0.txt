
../repos/prog2/CMakeFiles/1.5.dir/Aula01_Ficheiros_e_Formatos_de_dados/05.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <main>:
   0:	mov	ip, sp
   4:	sub	sp, sp, #32
   8:	str	ip, [sp]
   c:	str	lr, [sp, #4]
  10:	str	r4, [sp, #8]
  14:	str	r5, [sp, #12]
  18:	str	r6, [sp, #16]
  1c:	str	r7, [sp, #20]
  20:	str	r8, [sp, #24]
  24:	str	r9, [sp, #28]
  28:	mov	r7, #0
  2c:	mov	r4, #1
  30:	mov	r6, #0
  34:	mov	r8, #0
  38:	mov	r9, #0
  3c:	ldr	r0, [pc, #448]	; 204 <main+0x204>
  40:	ldr	r1, [pc, #436]	; 1fc <main+0x1fc>
  44:	bl	0 <fopen>
  48:	mov	r5, r0
  4c:	mov	r0, r5
  50:	bl	0 <fgetc>
  54:	and	r0, r0, #255	; 0xff
  58:	and	r3, r0, #255	; 0xff
  5c:	cmn	r0, #1
  60:	beq	16c <main+0x16c>
  64:	add	r6, r6, #1
  68:	cmp	r3, #10
  6c:	beq	164 <main+0x164>
  70:	cmp	r3, #115	; 0x73
  74:	beq	148 <main+0x148>
  78:	cmp	r3, #112	; 0x70
  7c:	beq	12c <main+0x12c>
  80:	cmp	r3, #47	; 0x2f
  84:	beq	e0 <main+0xe0>
  88:	cmp	r3, #42	; 0x2a
  8c:	bne	4c <main+0x4c>
  90:	mov	r0, r5
  94:	bl	0 <fgetc>
  98:	cmp	r0, #47	; 0x2f
  9c:	beq	a8 <main+0xa8>
  a0:	mov	r2, #0
  a4:	b	b4 <main+0xb4>
  a8:	cmp	r9, #0
  ac:	movne	r2, #1
  b0:	moveq	r2, #0
  b4:	cmp	r2, #0
  b8:	bne	d0 <main+0xd0>
  bc:	mvn	r1, #0
  c0:	mov	r2, #1
  c4:	mov	r0, r5
  c8:	bl	0 <fseek>
  cc:	b	4c <main+0x4c>
  d0:	add	r6, r6, #1
  d4:	add	r7, r7, #1
  d8:	mov	r9, #0
  dc:	b	4c <main+0x4c>
  e0:	mov	r0, r5
  e4:	bl	0 <fgetc>
  e8:	cmp	r0, #42	; 0x2a
  ec:	beq	f8 <main+0xf8>
  f0:	mov	r0, #0
  f4:	b	104 <main+0x104>
  f8:	cmp	r9, #0
  fc:	moveq	r0, #1
 100:	movne	r0, #0
 104:	cmp	r0, #0
 108:	bne	120 <main+0x120>
 10c:	mvn	r1, #0
 110:	mov	r2, #1
 114:	mov	r0, r5
 118:	bl	0 <fseek>
 11c:	b	4c <main+0x4c>
 120:	mov	r9, #1
 124:	add	r6, r6, #1
 128:	b	4c <main+0x4c>
 12c:	ldr	r0, [pc, #188]	; 1f0 <main+0x1f0>
 130:	mov	r1, r5
 134:	bl	214 <IsIOFunction>
 138:	cmp	r0, #0
 13c:	beq	4c <main+0x4c>
 140:	add	r8, r8, #1
 144:	b	4c <main+0x4c>
 148:	ldr	r0, [pc, #176]	; 200 <main+0x200>
 14c:	mov	r1, r5
 150:	bl	214 <IsIOFunction>
 154:	cmp	r0, #0
 158:	beq	4c <main+0x4c>
 15c:	add	r8, r8, #1
 160:	b	4c <main+0x4c>
 164:	add	r4, r4, #1
 168:	b	4c <main+0x4c>
 16c:	ldr	r0, [pc, #148]	; 208 <main+0x208>
 170:	mov	r1, r4
 174:	bl	0 <printf>
 178:	ldr	r0, [pc, #120]	; 1f8 <main+0x1f8>
 17c:	vmov	s2, r6
 180:	vcvt.f32.s32	s2, s2
 184:	vmov	s8, r4
 188:	vcvt.f32.s32	s8, s8
 18c:	vdiv.f32	s0, s2, s8
 190:	vcvt.f64.f32	d2, s0
 194:	vmov	r2, r3, d2
 198:	bl	0 <printf>
 19c:	ldr	r0, [pc, #108]	; 210 <main+0x210>
 1a0:	mov	r1, r6
 1a4:	bl	0 <printf>
 1a8:	ldr	r0, [pc, #92]	; 20c <main+0x20c>
 1ac:	mov	r1, r8
 1b0:	bl	0 <printf>
 1b4:	ldr	r0, [pc, #56]	; 1f4 <main+0x1f4>
 1b8:	mov	r1, r7
 1bc:	bl	0 <printf>
 1c0:	mov	r0, r5
 1c4:	bl	0 <fclose>
 1c8:	mov	r0, #0
 1cc:	ldr	r4, [sp, #8]
 1d0:	ldr	r5, [sp, #12]
 1d4:	ldr	r6, [sp, #16]
 1d8:	ldr	r7, [sp, #20]
 1dc:	ldr	r8, [sp, #24]
 1e0:	ldr	r9, [sp, #28]
 1e4:	ldr	lr, [sp, #4]
 1e8:	add	sp, sp, #32
 1ec:	bx	lr
 1f0:	.word	0x00000067
 1f4:	.word	0x00000036
 1f8:	.word	0x00000080
 1fc:	.word	0x00000000
 200:	.word	0x000000ab
 204:	.word	0x0000006e
 208:	.word	0x00000051
 20c:	.word	0x00000002
 210:	.word	0x000000b1

00000214 <IsIOFunction>:
 214:	mov	ip, sp
 218:	sub	sp, sp, #32
 21c:	str	ip, [sp]
 220:	str	lr, [sp, #4]
 224:	str	r4, [sp, #8]
 228:	str	r5, [sp, #12]
 22c:	str	r6, [sp, #16]
 230:	str	r7, [sp, #20]
 234:	mov	r4, r1
 238:	mov	r5, r0
 23c:	mvn	r1, #0
 240:	mov	r2, #1
 244:	mov	r0, r4
 248:	bl	0 <fseek>
 24c:	mov	r0, r5
 250:	bl	0 <strlen>
 254:	mov	r6, r0
 258:	mov	r1, #0
 25c:	strb	r1, [sp, #24]
 260:	mov	ip, #0
 264:	strb	ip, [sp, #25]
 268:	mov	r0, #0
 26c:	strb	r0, [sp, #26]
 270:	mov	r3, #0
 274:	strb	r3, [sp, #27]
 278:	mov	r0, #0
 27c:	strb	r0, [sp, #28]
 280:	mov	r3, #0
 284:	strb	r3, [sp, #29]
 288:	mov	r2, #0
 28c:	strb	r2, [sp, #30]
 290:	mov	r7, #0
 294:	cmp	r7, r6
 298:	bge	2b8 <IsIOFunction+0xa4>
 29c:	mov	r0, r4
 2a0:	bl	0 <fgetc>
 2a4:	add	ip, sp, #24
 2a8:	and	r0, r0, #255	; 0xff
 2ac:	strb	r0, [ip, r7]
 2b0:	add	r7, r7, #1
 2b4:	b	294 <IsIOFunction+0x80>
 2b8:	add	r3, sp, #24
 2bc:	mov	r2, #0
 2c0:	strb	r2, [r3, r7]
 2c4:	rsb	r1, r6, #0
 2c8:	add	r1, r1, #1
 2cc:	mov	r2, #1
 2d0:	mov	r0, r4
 2d4:	bl	0 <fseek>
 2d8:	add	r1, sp, #24
 2dc:	mov	r0, r5
 2e0:	bl	0 <strcmp>
 2e4:	cmp	r0, #0
 2e8:	bne	2f4 <IsIOFunction+0xe0>
 2ec:	mov	r0, #1
 2f0:	b	2f8 <IsIOFunction+0xe4>
 2f4:	mov	r0, #0
 2f8:	ldr	r4, [sp, #8]
 2fc:	ldr	r5, [sp, #12]
 300:	ldr	r6, [sp, #16]
 304:	ldr	r7, [sp, #20]
 308:	ldr	lr, [sp, #4]
 30c:	add	sp, sp, #32
 310:	bx	lr
