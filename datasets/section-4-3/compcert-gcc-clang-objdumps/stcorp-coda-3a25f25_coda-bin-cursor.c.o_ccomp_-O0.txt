
../repos/stcorp-coda-3a25f25/CMakeFiles/coda.dir/libcoda/coda-bin-cursor.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <read_bytes>:
       0:	mov	ip, sp
       4:	sub	sp, sp, #112	; 0x70
       8:	str	ip, [sp, #4]
       c:	str	lr, [sp, #8]
      10:	str	r4, [sp, #16]
      14:	str	r5, [sp, #20]
      18:	str	r6, [sp, #24]
      1c:	str	r7, [sp, #28]
      20:	str	r8, [sp, #32]
      24:	str	r9, [sp, #36]	; 0x24
      28:	ldr	r7, [ip, #8]
      2c:	ldr	r9, [ip, #4]
      30:	ldr	r6, [ip]
      34:	mov	r8, r3
      38:	mov	r5, r2
      3c:	mov	r4, r0
      40:	ldr	r1, [r4, #48]	; 0x30
      44:	cmp	r1, #0
      48:	bne	110 <read_bytes+0x110>
      4c:	ldr	r0, [r4, #16]
      50:	cmp	r0, #0
      54:	beq	6c <read_bytes+0x6c>
      58:	ldr	r2, [r4, #16]
      5c:	cmp	r2, #1
      60:	moveq	r0, #1
      64:	movne	r0, #0
      68:	b	70 <read_bytes+0x70>
      6c:	mov	r0, #1
      70:	cmp	r0, #0
      74:	bne	8c <read_bytes+0x8c>
      78:	ldr	r0, [pc, #404]	; 214 <read_bytes+0x214>
      7c:	ldr	r1, [pc, #404]	; 218 <read_bytes+0x218>
      80:	mov	r2, #83	; 0x53
      84:	ldr	r3, [pc, #404]	; 220 <read_bytes+0x220>
      88:	bl	0 <__assert_fail>
      8c:	adds	r0, r5, r6
      90:	adc	r3, r8, r9
      94:	ldr	r1, [r4, #8]
      98:	ldr	ip, [r4, #12]
      9c:	cmp	r3, ip
      a0:	bne	b0 <read_bytes+0xb0>
      a4:	cmp	r0, r1
      a8:	bhi	b8 <read_bytes+0xb8>
      ac:	b	cc <read_bytes+0xcc>
      b0:	cmp	r3, ip
      b4:	bls	cc <read_bytes+0xcc>
      b8:	mvn	r0, #300	; 0x12c
      bc:	ldr	r1, [pc, #328]	; 20c <read_bytes+0x20c>
      c0:	bl	0 <coda_set_error>
      c4:	mvn	r0, #0
      c8:	b	1e8 <read_bytes+0x1e8>
      cc:	ldr	r0, [r4, #56]	; 0x38
      d0:	mov	r2, r6
      d4:	mov	r3, r5
      d8:	mov	r1, r7
      dc:	bl	0 <pread>
      e0:	cmp	r0, #0
      e4:	bge	1e4 <read_bytes+0x1e4>
      e8:	bl	0 <__errno_location>
      ec:	ldr	r0, [r0]
      f0:	bl	0 <strerror>
      f4:	mvn	r3, #21
      f8:	ldr	r1, [pc, #284]	; 21c <read_bytes+0x21c>
      fc:	mov	r2, r0
     100:	mov	r0, r3
     104:	bl	0 <coda_set_error>
     108:	mvn	r0, #0
     10c:	b	1e8 <read_bytes+0x1e8>
     110:	adds	ip, r5, r6
     114:	adc	r1, r8, r9
     118:	ldr	r2, [r4, #40]	; 0x28
     11c:	ldr	r3, [r4, #44]	; 0x2c
     120:	cmp	r1, r3
     124:	bne	134 <read_bytes+0x134>
     128:	cmp	ip, r2
     12c:	bhi	13c <read_bytes+0x13c>
     130:	b	1d0 <read_bytes+0x1d0>
     134:	cmp	r1, r3
     138:	bls	1d0 <read_bytes+0x1d0>
     13c:	ldr	r1, [r4, #16]
     140:	cmp	r1, #0
     144:	beq	15c <read_bytes+0x15c>
     148:	ldr	r2, [r4, #16]
     14c:	cmp	r2, #1
     150:	moveq	ip, #1
     154:	movne	ip, #0
     158:	b	160 <read_bytes+0x160>
     15c:	mov	ip, #1
     160:	cmp	ip, #0
     164:	bne	1bc <read_bytes+0x1bc>
     168:	add	r2, sp, #64	; 0x40
     16c:	mov	r1, r9
     170:	mov	r0, r6
     174:	bl	0 <coda_str64>
     178:	add	r2, sp, #88	; 0x58
     17c:	mov	r1, r8
     180:	mov	r0, r5
     184:	bl	0 <coda_str64>
     188:	ldr	r0, [r4, #40]	; 0x28
     18c:	ldr	r1, [r4, #44]	; 0x2c
     190:	add	r2, sp, #40	; 0x28
     194:	bl	0 <coda_str64>
     198:	mvn	r0, #300	; 0x12c
     19c:	ldr	r1, [pc, #108]	; 210 <read_bytes+0x210>
     1a0:	add	r2, sp, #64	; 0x40
     1a4:	add	r3, sp, #88	; 0x58
     1a8:	add	r4, sp, #40	; 0x28
     1ac:	str	r4, [sp]
     1b0:	bl	0 <coda_set_error>
     1b4:	mvn	r0, #0
     1b8:	b	1e8 <read_bytes+0x1e8>
     1bc:	mvn	r0, #300	; 0x12c
     1c0:	ldr	r1, [pc, #68]	; 20c <read_bytes+0x20c>
     1c4:	bl	0 <coda_set_error>
     1c8:	mvn	r0, #0
     1cc:	b	1e8 <read_bytes+0x1e8>
     1d0:	ldr	r2, [r4, #48]	; 0x30
     1d4:	add	r1, r2, r5
     1d8:	mov	r2, r6
     1dc:	mov	r0, r7
     1e0:	bl	0 <memcpy>
     1e4:	mov	r0, #0
     1e8:	ldr	r4, [sp, #16]
     1ec:	ldr	r5, [sp, #20]
     1f0:	ldr	r6, [sp, #24]
     1f4:	ldr	r7, [sp, #28]
     1f8:	ldr	r8, [sp, #32]
     1fc:	ldr	r9, [sp, #36]	; 0x24
     200:	ldr	lr, [sp, #8]
     204:	add	sp, sp, #112	; 0x70
     208:	bx	lr
     20c:	.word	0x00000619
     210:	.word	0x00000381
     214:	.word	0x00000643
     218:	.word	0x000002e2
     21c:	.word	0x00000297
     220:	.word	0x000006b6

00000224 <read_bits>:
     224:	mov	ip, sp
     228:	sub	sp, sp, #80	; 0x50
     22c:	str	ip, [sp, #12]
     230:	str	lr, [sp, #16]
     234:	str	r4, [sp, #32]
     238:	str	r5, [sp, #36]	; 0x24
     23c:	str	r6, [sp, #40]	; 0x28
     240:	str	r7, [sp, #44]	; 0x2c
     244:	str	r8, [sp, #48]	; 0x30
     248:	str	r9, [sp, #52]	; 0x34
     24c:	str	sl, [sp, #56]	; 0x38
     250:	str	fp, [sp, #60]	; 0x3c
     254:	ldr	fp, [ip, #8]
     258:	ldr	r6, [ip, #4]
     25c:	ldr	r9, [ip]
     260:	mov	sl, r3
     264:	mov	r7, r2
     268:	str	r0, [sp, #24]
     26c:	mov	r3, #0
     270:	mov	r2, r7
     274:	and	r1, r2, #7
     278:	adds	r1, r1, r9
     27c:	adc	r3, r3, r6
     280:	rsbs	r0, r1, #0
     284:	rsc	r2, r3, #0
     288:	and	r4, r0, #7
     28c:	mov	r2, #0
     290:	cmp	r3, r2
     294:	bne	2a8 <read_bits+0x84>
     298:	mov	r2, #8
     29c:	cmp	r1, r2
     2a0:	bls	6c0 <read_bits+0x49c>
     2a4:	b	2b4 <read_bits+0x90>
     2a8:	mov	ip, #0
     2ac:	cmp	r3, ip
     2b0:	blt	6c0 <read_bits+0x49c>
     2b4:	cmp	r4, #0
     2b8:	beq	5b4 <read_bits+0x390>
     2bc:	mov	r5, r6
     2c0:	movw	r3, #43690	; 0xaaaa
     2c4:	movt	r3, #10922	; 0x2aaa
     2c8:	movw	r2, #43691	; 0xaaab
     2cc:	movt	r2, #43690	; 0xaaaa
     2d0:	mov	r1, r5
     2d4:	mov	r0, r9
     2d8:	bl	0 <__compcert_i64_smulh>
     2dc:	asr	ip, r1, #2
     2e0:	lsr	r2, r0, #2
     2e4:	orr	r3, r2, r1, lsl #30
     2e8:	mov	r1, #0
     2ec:	lsr	r2, r5, #31
     2f0:	adds	lr, r3, r2
     2f4:	adc	ip, ip, r1
     2f8:	mov	r1, lr
     2fc:	mov	r0, #24
     300:	umull	r2, r3, r1, r0
     304:	lsl	r0, ip, #4
     308:	add	ip, r0, ip, lsl #3
     30c:	add	r3, r3, ip
     310:	subs	r0, r9, r2
     314:	sbc	ip, r5, r3
     318:	orr	r1, ip, r0
     31c:	cmp	r1, #0
     320:	beq	4b8 <read_bits+0x294>
     324:	mov	r5, r6
     328:	movw	r3, #43690	; 0xaaaa
     32c:	movt	r3, #10922	; 0x2aaa
     330:	movw	r2, #43691	; 0xaaab
     334:	movt	r2, #43690	; 0xaaaa
     338:	mov	r1, r5
     33c:	mov	r0, r9
     340:	bl	0 <__compcert_i64_smulh>
     344:	asr	r3, r1, #2
     348:	lsr	ip, r0, #2
     34c:	orr	ip, ip, r1, lsl #30
     350:	mov	r0, #0
     354:	lsr	r1, r5, #31
     358:	adds	lr, ip, r1
     35c:	adc	r2, r3, r0
     360:	mov	r3, lr
     364:	mov	ip, #24
     368:	umull	r0, r1, r3, ip
     36c:	lsl	ip, r2, #4
     370:	add	r2, ip, r2, lsl #3
     374:	add	r1, r1, r2
     378:	subs	lr, r9, r0
     37c:	sbc	r3, r5, r1
     380:	mov	r5, lr
     384:	mov	r2, r7
     388:	and	r0, r2, #7
     38c:	add	r3, r0, r5
     390:	and	r2, r3, #7
     394:	cmp	r2, #0
     398:	movne	r1, #1
     39c:	moveq	r1, #0
     3a0:	mov	r3, r7
     3a4:	and	r3, r3, #7
     3a8:	add	r2, r3, r5
     3ac:	add	r0, r1, r2, lsr #3
     3b0:	str	r0, [sp, #28]
     3b4:	and	ip, r5, #7
     3b8:	cmp	ip, #0
     3bc:	movne	r1, #1
     3c0:	moveq	r1, #0
     3c4:	add	r8, r1, r5, lsr #3
     3c8:	mov	r3, sl
     3cc:	asr	r3, r3, #3
     3d0:	mov	ip, r7
     3d4:	lsr	r0, ip, #3
     3d8:	mov	ip, sl
     3dc:	orr	r2, r0, ip, lsl #29
     3e0:	mov	ip, #0
     3e4:	add	r0, sp, #72	; 0x48
     3e8:	str	r0, [sp, #8]
     3ec:	str	ip, [sp, #4]
     3f0:	ldr	r1, [sp, #28]
     3f4:	str	r1, [sp]
     3f8:	ldr	r0, [sp, #24]
     3fc:	bl	0 <read_bytes>
     400:	cmp	r0, #0
     404:	beq	410 <read_bits+0x1ec>
     408:	mvn	r0, #0
     40c:	b	748 <read_bits+0x524>
     410:	mov	r3, #0
     414:	str	r3, [sp, #68]	; 0x44
     418:	mov	ip, #0
     41c:	ldr	r0, [sp, #28]
     420:	cmp	ip, r0
     424:	bcs	448 <read_bits+0x224>
     428:	add	r1, sp, #68	; 0x44
     42c:	rsb	r0, ip, #3
     430:	add	r2, sp, #72	; 0x48
     434:	ldrb	r3, [r2, ip]
     438:	and	r3, r3, #255	; 0xff
     43c:	strb	r3, [r1, r0]
     440:	add	ip, ip, #1
     444:	b	41c <read_bits+0x1f8>
     448:	ldr	r2, [sp, #68]	; 0x44
     44c:	rsb	ip, r0, #4
     450:	add	r0, r4, ip, lsl #3
     454:	lsr	ip, r2, r0
     458:	mov	r0, #1
     45c:	lsl	r0, r0, r5
     460:	sub	r3, r0, #1
     464:	and	r0, ip, r3
     468:	str	r0, [sp, #68]	; 0x44
     46c:	mov	r2, #0
     470:	cmp	r2, r8
     474:	bcs	49c <read_bits+0x278>
     478:	add	r3, sp, #68	; 0x44
     47c:	sub	ip, r8, r2
     480:	add	r0, r3, ip
     484:	sub	lr, r0, #4096	; 0x1000
     488:	ldrb	r3, [lr, #4095]	; 0xfff
     48c:	and	ip, r3, #255	; 0xff
     490:	strb	ip, [fp, r2]
     494:	add	r2, r2, #1
     498:	b	470 <read_bits+0x24c>
     49c:	add	fp, fp, r8
     4a0:	mov	ip, #0
     4a4:	adds	r7, r7, r5
     4a8:	adc	sl, sl, ip
     4ac:	mov	r3, #0
     4b0:	subs	r9, r9, r5
     4b4:	sbc	r6, r6, r3
     4b8:	mov	r1, r6
     4bc:	mov	r0, r9
     4c0:	mov	r2, #0
     4c4:	cmp	r1, r2
     4c8:	bne	4dc <read_bits+0x2b8>
     4cc:	mov	r1, #0
     4d0:	cmp	r0, r1
     4d4:	bhi	4e8 <read_bits+0x2c4>
     4d8:	b	744 <read_bits+0x520>
     4dc:	mov	ip, #0
     4e0:	cmp	r1, ip
     4e4:	ble	744 <read_bits+0x520>
     4e8:	mov	r1, sl
     4ec:	mov	r0, r7
     4f0:	asr	r3, r1, #3
     4f4:	lsr	ip, r0, #3
     4f8:	orr	r2, ip, r1, lsl #29
     4fc:	mov	ip, #0
     500:	mov	r0, #4
     504:	add	r5, sp, #72	; 0x48
     508:	str	r5, [sp, #8]
     50c:	str	ip, [sp, #4]
     510:	str	r0, [sp]
     514:	ldr	r0, [sp, #24]
     518:	bl	0 <read_bytes>
     51c:	cmp	r0, #0
     520:	beq	52c <read_bits+0x308>
     524:	mvn	r0, #0
     528:	b	748 <read_bits+0x524>
     52c:	ldrb	r1, [sp, #75]	; 0x4b
     530:	and	r1, r1, #255	; 0xff
     534:	strb	r1, [sp, #68]	; 0x44
     538:	ldrb	r1, [sp, #74]	; 0x4a
     53c:	and	r0, r1, #255	; 0xff
     540:	strb	r0, [sp, #69]	; 0x45
     544:	ldrb	r2, [sp, #73]	; 0x49
     548:	and	r0, r2, #255	; 0xff
     54c:	strb	r0, [sp, #70]	; 0x46
     550:	ldrb	ip, [sp, #72]	; 0x48
     554:	and	r1, ip, #255	; 0xff
     558:	strb	r1, [sp, #71]	; 0x47
     55c:	ldr	ip, [sp, #68]	; 0x44
     560:	lsr	r3, ip, r4
     564:	str	r3, [sp, #68]	; 0x44
     568:	ldrb	r2, [sp, #70]	; 0x46
     56c:	and	r0, r2, #255	; 0xff
     570:	strb	r0, [fp]
     574:	ldrb	r2, [sp, #69]	; 0x45
     578:	and	r3, r2, #255	; 0xff
     57c:	strb	r3, [fp, #1]
     580:	ldrb	r0, [sp, #68]	; 0x44
     584:	and	r0, r0, #255	; 0xff
     588:	strb	r0, [fp, #2]
     58c:	add	fp, fp, #3
     590:	mov	ip, #0
     594:	mov	r3, #24
     598:	adds	r7, r7, r3
     59c:	adc	sl, sl, ip
     5a0:	mov	r0, #0
     5a4:	mov	ip, #24
     5a8:	subs	r9, r9, ip
     5ac:	sbc	r6, r6, r0
     5b0:	b	4b8 <read_bits+0x294>
     5b4:	mov	r3, r9
     5b8:	mov	r2, #0
     5bc:	and	r3, r3, #7
     5c0:	orr	r0, r2, r3
     5c4:	cmp	r0, #0
     5c8:	beq	654 <read_bits+0x430>
     5cc:	mov	r1, sl
     5d0:	asr	r3, r1, #3
     5d4:	mov	r2, r7
     5d8:	lsr	r0, r2, #3
     5dc:	mov	r2, sl
     5e0:	orr	r2, r0, r2, lsl #29
     5e4:	mov	r0, #0
     5e8:	mov	ip, #1
     5ec:	add	r4, sp, #64	; 0x40
     5f0:	str	r4, [sp, #8]
     5f4:	str	r0, [sp, #4]
     5f8:	str	ip, [sp]
     5fc:	ldr	r0, [sp, #24]
     600:	bl	0 <read_bytes>
     604:	cmp	r0, #0
     608:	beq	614 <read_bits+0x3f0>
     60c:	mvn	r0, #0
     610:	b	748 <read_bits+0x524>
     614:	mov	r3, r9
     618:	and	ip, r3, #7
     61c:	ldrb	r0, [sp, #64]	; 0x40
     620:	mov	r3, #1
     624:	lsl	r3, r3, ip
     628:	sub	r2, r3, #1
     62c:	and	r3, r0, r2
     630:	and	r1, r3, #255	; 0xff
     634:	strb	r1, [fp]
     638:	add	fp, fp, #1
     63c:	mov	r0, #0
     640:	adds	r7, r7, ip
     644:	adc	sl, sl, r0
     648:	mov	r0, #0
     64c:	subs	r9, r9, ip
     650:	sbc	r6, r6, r0
     654:	mov	r2, r6
     658:	mov	r3, #0
     65c:	cmp	r2, r3
     660:	bne	678 <read_bits+0x454>
     664:	mov	r0, r9
     668:	mov	ip, #0
     66c:	cmp	r0, ip
     670:	bhi	684 <read_bits+0x460>
     674:	b	744 <read_bits+0x520>
     678:	mov	r0, #0
     67c:	cmp	r2, r0
     680:	ble	744 <read_bits+0x520>
     684:	asr	r3, sl, #3
     688:	lsr	r2, r7, #3
     68c:	orr	r2, r2, sl, lsl #29
     690:	asr	r0, r6, #3
     694:	lsr	ip, r9, #3
     698:	orr	ip, ip, r6, lsl #29
     69c:	str	fp, [sp, #8]
     6a0:	str	r0, [sp, #4]
     6a4:	str	ip, [sp]
     6a8:	ldr	r0, [sp, #24]
     6ac:	bl	0 <read_bytes>
     6b0:	cmp	r0, #0
     6b4:	beq	744 <read_bits+0x520>
     6b8:	mvn	r0, #0
     6bc:	b	748 <read_bits+0x524>
     6c0:	asr	r3, sl, #3
     6c4:	lsr	ip, r7, #3
     6c8:	orr	r2, ip, sl, lsl #29
     6cc:	mov	r1, #0
     6d0:	mov	r0, #1
     6d4:	str	fp, [sp, #8]
     6d8:	str	r1, [sp, #4]
     6dc:	str	r0, [sp]
     6e0:	ldr	r0, [sp, #24]
     6e4:	bl	0 <read_bytes>
     6e8:	cmp	r0, #0
     6ec:	beq	6f8 <read_bits+0x4d4>
     6f0:	mvn	r0, #0
     6f4:	b	748 <read_bits+0x524>
     6f8:	cmp	r4, #0
     6fc:	beq	710 <read_bits+0x4ec>
     700:	ldrb	r1, [fp]
     704:	asr	r1, r1, r4
     708:	and	r2, r1, #255	; 0xff
     70c:	strb	r2, [fp]
     710:	mov	r0, #0
     714:	mov	ip, r9
     718:	and	r1, ip, #7
     71c:	orr	r2, r0, r1
     720:	cmp	r2, #0
     724:	beq	744 <read_bits+0x520>
     728:	ldrb	r2, [fp]
     72c:	mov	r1, #1
     730:	lsl	r1, r1, r9
     734:	sub	r0, r1, #1
     738:	and	ip, r2, r0
     73c:	and	ip, ip, #255	; 0xff
     740:	strb	ip, [fp]
     744:	mov	r0, #0
     748:	ldr	r4, [sp, #32]
     74c:	ldr	r5, [sp, #36]	; 0x24
     750:	ldr	r6, [sp, #40]	; 0x28
     754:	ldr	r7, [sp, #44]	; 0x2c
     758:	ldr	r8, [sp, #48]	; 0x30
     75c:	ldr	r9, [sp, #52]	; 0x34
     760:	ldr	sl, [sp, #56]	; 0x38
     764:	ldr	fp, [sp, #60]	; 0x3c
     768:	ldr	lr, [sp, #16]
     76c:	add	sp, sp, #80	; 0x50
     770:	bx	lr

00000774 <read_array>:
     774:	mov	ip, sp
     778:	sub	sp, sp, #640	; 0x280
     77c:	str	ip, [sp]
     780:	str	lr, [sp, #4]
     784:	str	r4, [sp, #8]
     788:	str	r5, [sp, #12]
     78c:	str	r6, [sp, #16]
     790:	str	r7, [sp, #20]
     794:	str	r8, [sp, #24]
     798:	str	r9, [sp, #28]
     79c:	str	sl, [sp, #32]
     7a0:	ldr	r8, [ip]
     7a4:	mov	r4, r3
     7a8:	mov	r5, r2
     7ac:	mov	r6, r1
     7b0:	mov	r7, r0
     7b4:	add	r1, sp, #40	; 0x28
     7b8:	add	r2, sp, #48	; 0x30
     7bc:	mov	r0, r7
     7c0:	bl	0 <coda_cursor_get_array_dim>
     7c4:	cmp	r0, #0
     7c8:	beq	7d4 <read_array+0x60>
     7cc:	mvn	r0, #0
     7d0:	b	a34 <read_array+0x2c0>
     7d4:	mov	r2, r7
     7d8:	add	r3, sp, #120	; 0x78
     7dc:	mov	lr, #130	; 0x82
     7e0:	ldr	ip, [r2], #4
     7e4:	subs	lr, lr, #1
     7e8:	str	ip, [r3], #4
     7ec:	bne	7e0 <read_array+0x6c>
     7f0:	ldr	r0, [sp, #40]	; 0x28
     7f4:	cmp	r0, #1
     7f8:	ble	80c <read_array+0x98>
     7fc:	cmp	r8, #1
     800:	movne	r0, #1
     804:	moveq	r0, #0
     808:	b	810 <read_array+0x9c>
     80c:	mov	r0, #1
     810:	cmp	r0, #0
     814:	bne	990 <read_array+0x21c>
     818:	mov	ip, #1
     81c:	str	ip, [sp, #80]	; 0x50
     820:	mov	r2, #0
     824:	ldr	r1, [sp, #40]	; 0x28
     828:	cmp	r2, r1
     82c:	bge	85c <read_array+0xe8>
     830:	add	r3, sp, #80	; 0x50
     834:	lsl	r1, r2, #2
     838:	add	r0, r3, r1
     83c:	add	r1, sp, #80	; 0x50
     840:	ldr	r3, [r1, r2, lsl #2]
     844:	add	r1, sp, #48	; 0x30
     848:	ldr	r1, [r1, r2, lsl #2]
     84c:	mul	ip, r3, r1
     850:	str	ip, [r0, #4]
     854:	add	r2, r2, #1
     858:	b	824 <read_array+0xb0>
     85c:	add	r0, sp, #80	; 0x50
     860:	ldr	r3, [sp, #40]	; 0x28
     864:	lsl	r1, r3, #2
     868:	add	ip, r0, r1
     86c:	sub	lr, ip, #4096	; 0x1000
     870:	ldr	r8, [lr, #4092]	; 0xffc
     874:	add	r3, sp, #80	; 0x50
     878:	ldr	r2, [sp, #40]	; 0x28
     87c:	ldr	r7, [r3, r2, lsl #2]
     880:	cmp	r7, #0
     884:	ble	a30 <read_array+0x2bc>
     888:	mov	r9, #0
     88c:	mov	sl, #0
     890:	add	r0, sp, #120	; 0x78
     894:	mov	r1, #0
     898:	bl	0 <coda_cursor_goto_array_element_by_index>
     89c:	cmp	r0, #0
     8a0:	beq	8ac <read_array+0x138>
     8a4:	mvn	r0, #0
     8a8:	b	a34 <read_array+0x2c0>
     8ac:	add	r0, sp, #120	; 0x78
     8b0:	mla	r1, sl, r4, r5
     8b4:	blx	r6
     8b8:	cmp	r0, #0
     8bc:	beq	8c8 <read_array+0x154>
     8c0:	mvn	r0, #0
     8c4:	b	a34 <read_array+0x2c0>
     8c8:	add	r9, r9, #1
     8cc:	cmp	r9, r7
     8d0:	bge	8ec <read_array+0x178>
     8d4:	add	r0, sp, #120	; 0x78
     8d8:	bl	0 <coda_cursor_goto_next_array_element>
     8dc:	cmp	r0, #0
     8e0:	beq	8ec <read_array+0x178>
     8e4:	mvn	r0, #0
     8e8:	b	a34 <read_array+0x2c0>
     8ec:	add	sl, sl, r8
     8f0:	cmp	sl, r7
     8f4:	blt	8ac <read_array+0x138>
     8f8:	cmp	r9, r7
     8fc:	beq	a30 <read_array+0x2bc>
     900:	add	r1, sp, #80	; 0x50
     904:	ldr	r3, [sp, #40]	; 0x28
     908:	lsl	r3, r3, #2
     90c:	add	r3, r1, r3
     910:	sub	lr, r3, #4096	; 0x1000
     914:	ldr	r3, [lr, #4088]	; 0xff8
     918:	add	r1, sp, #80	; 0x50
     91c:	ldr	ip, [sp, #40]	; 0x28
     920:	ldr	r0, [r1, ip, lsl #2]
     924:	sub	r3, r3, r0
     928:	add	sl, sl, r3
     92c:	ldr	r0, [sp, #40]	; 0x28
     930:	sub	r3, r0, #3
     934:	cmp	r3, #0
     938:	blt	95c <read_array+0x1e8>
     93c:	add	r1, sp, #80	; 0x50
     940:	lsl	r2, r3, #2
     944:	add	ip, r1, r2
     948:	ldr	r2, [ip, #8]
     94c:	cmp	sl, r2
     950:	movge	ip, #1
     954:	movlt	ip, #0
     958:	b	960 <read_array+0x1ec>
     95c:	mov	ip, #0
     960:	cmp	ip, #0
     964:	beq	8ac <read_array+0x138>
     968:	add	ip, sp, #80	; 0x50
     96c:	ldr	r2, [ip, r3, lsl #2]
     970:	add	r0, sp, #80	; 0x50
     974:	lsl	ip, r3, #2
     978:	add	ip, r0, ip
     97c:	ldr	ip, [ip, #8]
     980:	sub	r0, r2, ip
     984:	add	sl, sl, r0
     988:	sub	r3, r3, #1
     98c:	b	934 <read_array+0x1c0>
     990:	mov	r7, #1
     994:	mov	r2, #0
     998:	ldr	r1, [sp, #40]	; 0x28
     99c:	cmp	r2, r1
     9a0:	bge	9b8 <read_array+0x244>
     9a4:	add	r3, sp, #48	; 0x30
     9a8:	ldr	ip, [r3, r2, lsl #2]
     9ac:	mul	r7, r7, ip
     9b0:	add	r2, r2, #1
     9b4:	b	998 <read_array+0x224>
     9b8:	cmp	r7, #0
     9bc:	ble	a30 <read_array+0x2bc>
     9c0:	add	r0, sp, #120	; 0x78
     9c4:	mov	r1, #0
     9c8:	bl	0 <coda_cursor_goto_array_element_by_index>
     9cc:	cmp	r0, #0
     9d0:	beq	9dc <read_array+0x268>
     9d4:	mvn	r0, #0
     9d8:	b	a34 <read_array+0x2c0>
     9dc:	mov	r8, #0
     9e0:	cmp	r8, r7
     9e4:	bge	a30 <read_array+0x2bc>
     9e8:	add	r0, sp, #120	; 0x78
     9ec:	mla	r1, r8, r4, r5
     9f0:	blx	r6
     9f4:	cmp	r0, #0
     9f8:	beq	a04 <read_array+0x290>
     9fc:	mvn	r0, #0
     a00:	b	a34 <read_array+0x2c0>
     a04:	sub	r2, r7, #1
     a08:	cmp	r8, r2
     a0c:	bge	a28 <read_array+0x2b4>
     a10:	add	r0, sp, #120	; 0x78
     a14:	bl	0 <coda_cursor_goto_next_array_element>
     a18:	cmp	r0, #0
     a1c:	beq	a28 <read_array+0x2b4>
     a20:	mvn	r0, #0
     a24:	b	a34 <read_array+0x2c0>
     a28:	add	r8, r8, #1
     a2c:	b	9e0 <read_array+0x26c>
     a30:	mov	r0, #0
     a34:	ldr	r4, [sp, #8]
     a38:	ldr	r5, [sp, #12]
     a3c:	ldr	r6, [sp, #16]
     a40:	ldr	r7, [sp, #20]
     a44:	ldr	r8, [sp, #24]
     a48:	ldr	r9, [sp, #28]
     a4c:	ldr	sl, [sp, #32]
     a50:	ldr	lr, [sp, #4]
     a54:	add	sp, sp, #640	; 0x280
     a58:	bx	lr

00000a5c <read_partial_array>:
     a5c:	mov	ip, sp
     a60:	sub	sp, sp, #552	; 0x228
     a64:	str	ip, [sp]
     a68:	str	lr, [sp, #4]
     a6c:	str	r4, [sp, #8]
     a70:	str	r5, [sp, #12]
     a74:	str	r6, [sp, #16]
     a78:	str	r7, [sp, #20]
     a7c:	str	r8, [sp, #24]
     a80:	ldr	r6, [ip, #4]
     a84:	ldr	r7, [ip]
     a88:	mov	r4, r3
     a8c:	mov	r5, r1
     a90:	mov	r1, r2
     a94:	mov	r2, r0
     a98:	add	r3, sp, #32
     a9c:	mov	lr, #130	; 0x82
     aa0:	ldr	ip, [r2], #4
     aa4:	subs	lr, lr, #1
     aa8:	str	ip, [r3], #4
     aac:	bne	aa0 <read_partial_array+0x44>
     ab0:	cmp	r4, #0
     ab4:	ble	b24 <read_partial_array+0xc8>
     ab8:	add	r0, sp, #32
     abc:	bl	0 <coda_cursor_goto_array_element_by_index>
     ac0:	cmp	r0, #0
     ac4:	beq	ad0 <read_partial_array+0x74>
     ac8:	mvn	r0, #0
     acc:	b	b28 <read_partial_array+0xcc>
     ad0:	mov	r8, #0
     ad4:	cmp	r8, r4
     ad8:	bge	b24 <read_partial_array+0xc8>
     adc:	add	r0, sp, #32
     ae0:	mla	r1, r8, r6, r7
     ae4:	blx	r5
     ae8:	cmp	r0, #0
     aec:	beq	af8 <read_partial_array+0x9c>
     af0:	mvn	r0, #0
     af4:	b	b28 <read_partial_array+0xcc>
     af8:	sub	r1, r4, #1
     afc:	cmp	r8, r1
     b00:	bge	b1c <read_partial_array+0xc0>
     b04:	add	r0, sp, #32
     b08:	bl	0 <coda_cursor_goto_next_array_element>
     b0c:	cmp	r0, #0
     b10:	beq	b1c <read_partial_array+0xc0>
     b14:	mvn	r0, #0
     b18:	b	b28 <read_partial_array+0xcc>
     b1c:	add	r8, r8, #1
     b20:	b	ad4 <read_partial_array+0x78>
     b24:	mov	r0, #0
     b28:	ldr	r4, [sp, #8]
     b2c:	ldr	r5, [sp, #12]
     b30:	ldr	r6, [sp, #16]
     b34:	ldr	r7, [sp, #20]
     b38:	ldr	r8, [sp, #24]
     b3c:	ldr	lr, [sp, #4]
     b40:	add	sp, sp, #552	; 0x228
     b44:	bx	lr

00000b48 <transpose_array>:
     b48:	mov	ip, sp
     b4c:	sub	sp, sp, #200	; 0xc8
     b50:	str	ip, [sp, #4]
     b54:	str	lr, [sp, #8]
     b58:	str	r4, [sp, #16]
     b5c:	str	r5, [sp, #20]
     b60:	str	r6, [sp, #24]
     b64:	str	r7, [sp, #28]
     b68:	str	r8, [sp, #32]
     b6c:	str	r9, [sp, #36]	; 0x24
     b70:	mov	r6, r2
     b74:	mov	r5, r1
     b78:	mov	r8, #0
     b7c:	add	r1, sp, #40	; 0x28
     b80:	add	r2, sp, #48	; 0x30
     b84:	bl	0 <coda_cursor_get_array_dim>
     b88:	cmp	r0, #0
     b8c:	beq	b98 <transpose_array+0x50>
     b90:	mvn	r0, #0
     b94:	b	fe0 <transpose_array+0x498>
     b98:	ldr	r1, [sp, #40]	; 0x28
     b9c:	cmp	r1, #1
     ba0:	bgt	bac <transpose_array+0x64>
     ba4:	mov	r0, #0
     ba8:	b	fe0 <transpose_array+0x498>
     bac:	mov	r7, #1
     bb0:	mov	r2, #0
     bb4:	ldr	ip, [sp, #40]	; 0x28
     bb8:	cmp	r2, ip
     bbc:	bge	c04 <transpose_array+0xbc>
     bc0:	add	r1, sp, #48	; 0x30
     bc4:	ldr	r0, [r1, r2, lsl #2]
     bc8:	mul	r7, r7, r0
     bcc:	add	r3, sp, #160	; 0xa0
     bd0:	mov	ip, #0
     bd4:	str	ip, [r3, r2, lsl #2]
     bd8:	add	r1, sp, #80	; 0x50
     bdc:	add	r4, sp, #48	; 0x30
     be0:	ldr	ip, [sp, #40]	; 0x28
     be4:	sub	r0, ip, r2
     be8:	lsl	r3, r0, #2
     bec:	add	r3, r4, r3
     bf0:	sub	lr, r3, #4096	; 0x1000
     bf4:	ldr	r3, [lr, #4092]	; 0xffc
     bf8:	str	r3, [r1, r2, lsl #2]
     bfc:	add	r2, r2, #1
     c00:	b	bb4 <transpose_array+0x6c>
     c04:	cmp	r7, #1
     c08:	bgt	c14 <transpose_array+0xcc>
     c0c:	mov	r0, #0
     c10:	b	fe0 <transpose_array+0x498>
     c14:	add	ip, sp, #120	; 0x78
     c18:	ldr	r2, [sp, #40]	; 0x28
     c1c:	mov	r1, #1
     c20:	str	r1, [ip, r2, lsl #2]
     c24:	add	ip, sp, #80	; 0x50
     c28:	ldr	r3, [sp, #40]	; 0x28
     c2c:	mov	r2, #1
     c30:	str	r2, [ip, r3, lsl #2]
     c34:	ldr	r4, [sp, #40]	; 0x28
     c38:	cmp	r4, #0
     c3c:	ble	c70 <transpose_array+0x128>
     c40:	add	r0, sp, #120	; 0x78
     c44:	lsl	r3, r4, #2
     c48:	add	r1, r0, r3
     c4c:	add	r2, sp, #120	; 0x78
     c50:	ldr	r2, [r2, r4, lsl #2]
     c54:	add	ip, sp, #80	; 0x50
     c58:	ldr	r0, [ip, r4, lsl #2]
     c5c:	mul	ip, r2, r0
     c60:	sub	lr, r1, #4096	; 0x1000
     c64:	str	ip, [lr, #4092]	; 0xffc
     c68:	sub	r4, r4, #1
     c6c:	b	c38 <transpose_array+0xf0>
     c70:	add	r0, sp, #80	; 0x50
     c74:	ldr	r2, [sp, #40]	; 0x28
     c78:	mov	r3, #0
     c7c:	str	r3, [r0, r2, lsl #2]
     c80:	add	r1, sp, #160	; 0xa0
     c84:	ldr	r2, [sp, #40]	; 0x28
     c88:	mov	r3, #0
     c8c:	str	r3, [r1, r2, lsl #2]
     c90:	mul	r0, r7, r6
     c94:	bl	0 <malloc>
     c98:	mov	r4, r0
     c9c:	cmp	r4, #0
     ca0:	bne	cc8 <transpose_array+0x180>
     ca4:	mvn	r0, #0
     ca8:	ldr	r1, [pc, #856]	; 1008 <transpose_array+0x4c0>
     cac:	mul	r2, r7, r6
     cb0:	ldr	r3, [pc, #856]	; 1010 <transpose_array+0x4c8>
     cb4:	mov	r4, #93	; 0x5d
     cb8:	str	r4, [sp]
     cbc:	bl	0 <coda_set_error>
     cc0:	mvn	r0, #0
     cc4:	b	fe0 <transpose_array+0x498>
     cc8:	cmp	r6, #4
     ccc:	bcs	e3c <transpose_array+0x2f4>
     cd0:	cmp	r6, #1
     cd4:	beq	d94 <transpose_array+0x24c>
     cd8:	cmp	r6, #2
     cdc:	bne	f00 <transpose_array+0x3b8>
     ce0:	mov	r9, #0
     ce4:	cmp	r9, r7
     ce8:	bge	fc4 <transpose_array+0x47c>
     cec:	mov	r1, #0
     cf0:	add	r0, r4, r8, lsl #1
     cf4:	add	ip, r5, r9, lsl #1
     cf8:	ldrh	r2, [ip]
     cfc:	bic	ip, r2, #16711680	; 0xff0000
     d00:	bic	ip, ip, #-16777216	; 0xff000000
     d04:	strh	ip, [r0]
     d08:	add	r2, sp, #120	; 0x78
     d0c:	ldr	r2, [r2, r1, lsl #2]
     d10:	add	r8, r8, r2
     d14:	add	r2, sp, #160	; 0xa0
     d18:	add	ip, sp, #160	; 0xa0
     d1c:	ldr	r0, [ip, r1, lsl #2]
     d20:	add	ip, r0, #1
     d24:	str	ip, [r2, r1, lsl #2]
     d28:	add	r3, sp, #160	; 0xa0
     d2c:	ldr	r0, [r3, r1, lsl #2]
     d30:	add	r2, sp, #80	; 0x50
     d34:	ldr	r3, [r2, r1, lsl #2]
     d38:	cmp	r0, r3
     d3c:	bne	d8c <transpose_array+0x244>
     d40:	add	r0, sp, #160	; 0xa0
     d44:	mov	r2, #0
     d48:	str	r2, [r0, r1, lsl #2]
     d4c:	add	r0, sp, #120	; 0x78
     d50:	ldr	r0, [r0, r1, lsl #2]
     d54:	add	r2, sp, #80	; 0x50
     d58:	ldr	r3, [r2, r1, lsl #2]
     d5c:	mul	r3, r0, r3
     d60:	sub	r0, r8, r3
     d64:	add	r1, r1, #1
     d68:	add	r3, sp, #120	; 0x78
     d6c:	ldr	ip, [r3, r1, lsl #2]
     d70:	add	r8, r0, ip
     d74:	add	r2, sp, #160	; 0xa0
     d78:	add	r3, sp, #160	; 0xa0
     d7c:	ldr	r3, [r3, r1, lsl #2]
     d80:	add	r3, r3, #1
     d84:	str	r3, [r2, r1, lsl #2]
     d88:	b	d28 <transpose_array+0x1e0>
     d8c:	add	r9, r9, #1
     d90:	b	ce4 <transpose_array+0x19c>
     d94:	mov	ip, #0
     d98:	cmp	ip, r7
     d9c:	bge	fc4 <transpose_array+0x47c>
     da0:	mov	r9, #0
     da4:	ldrb	r3, [r5, ip]
     da8:	and	r0, r3, #255	; 0xff
     dac:	strb	r0, [r4, r8]
     db0:	add	r0, sp, #120	; 0x78
     db4:	ldr	r0, [r0, r9, lsl #2]
     db8:	add	r8, r8, r0
     dbc:	add	r1, sp, #160	; 0xa0
     dc0:	add	r3, sp, #160	; 0xa0
     dc4:	ldr	r3, [r3, r9, lsl #2]
     dc8:	add	r0, r3, #1
     dcc:	str	r0, [r1, r9, lsl #2]
     dd0:	add	r1, sp, #160	; 0xa0
     dd4:	ldr	r3, [r1, r9, lsl #2]
     dd8:	add	r2, sp, #80	; 0x50
     ddc:	ldr	r2, [r2, r9, lsl #2]
     de0:	cmp	r3, r2
     de4:	bne	e34 <transpose_array+0x2ec>
     de8:	add	r1, sp, #160	; 0xa0
     dec:	mov	r0, #0
     df0:	str	r0, [r1, r9, lsl #2]
     df4:	add	r2, sp, #120	; 0x78
     df8:	ldr	r0, [r2, r9, lsl #2]
     dfc:	add	r3, sp, #80	; 0x50
     e00:	ldr	r2, [r3, r9, lsl #2]
     e04:	mul	r0, r0, r2
     e08:	sub	r1, r8, r0
     e0c:	add	r9, r9, #1
     e10:	add	r3, sp, #120	; 0x78
     e14:	ldr	r0, [r3, r9, lsl #2]
     e18:	add	r8, r1, r0
     e1c:	add	r3, sp, #160	; 0xa0
     e20:	add	r2, sp, #160	; 0xa0
     e24:	ldr	r0, [r2, r9, lsl #2]
     e28:	add	r0, r0, #1
     e2c:	str	r0, [r3, r9, lsl #2]
     e30:	b	dd0 <transpose_array+0x288>
     e34:	add	ip, ip, #1
     e38:	b	d98 <transpose_array+0x250>
     e3c:	cmp	r6, #4
     e40:	beq	f20 <transpose_array+0x3d8>
     e44:	cmp	r6, #8
     e48:	bne	f00 <transpose_array+0x3b8>
     e4c:	mov	r1, #0
     e50:	cmp	r1, r7
     e54:	bge	fc4 <transpose_array+0x47c>
     e58:	mov	r9, #0
     e5c:	add	ip, r4, r8, lsl #3
     e60:	add	r2, r5, r1, lsl #3
     e64:	ldr	r3, [r2]
     e68:	ldr	r2, [r2, #4]
     e6c:	str	r3, [ip]
     e70:	str	r2, [ip, #4]
     e74:	add	r3, sp, #120	; 0x78
     e78:	ldr	r0, [r3, r9, lsl #2]
     e7c:	add	r8, r8, r0
     e80:	add	r2, sp, #160	; 0xa0
     e84:	add	ip, sp, #160	; 0xa0
     e88:	ldr	r3, [ip, r9, lsl #2]
     e8c:	add	r3, r3, #1
     e90:	str	r3, [r2, r9, lsl #2]
     e94:	add	r0, sp, #160	; 0xa0
     e98:	ldr	r2, [r0, r9, lsl #2]
     e9c:	add	r0, sp, #80	; 0x50
     ea0:	ldr	r3, [r0, r9, lsl #2]
     ea4:	cmp	r2, r3
     ea8:	bne	ef8 <transpose_array+0x3b0>
     eac:	add	r0, sp, #160	; 0xa0
     eb0:	mov	ip, #0
     eb4:	str	ip, [r0, r9, lsl #2]
     eb8:	add	ip, sp, #120	; 0x78
     ebc:	ldr	ip, [ip, r9, lsl #2]
     ec0:	add	r2, sp, #80	; 0x50
     ec4:	ldr	r0, [r2, r9, lsl #2]
     ec8:	mul	r0, ip, r0
     ecc:	sub	r2, r8, r0
     ed0:	add	r9, r9, #1
     ed4:	add	r0, sp, #120	; 0x78
     ed8:	ldr	r3, [r0, r9, lsl #2]
     edc:	add	r8, r2, r3
     ee0:	add	r0, sp, #160	; 0xa0
     ee4:	add	r2, sp, #160	; 0xa0
     ee8:	ldr	r2, [r2, r9, lsl #2]
     eec:	add	r2, r2, #1
     ef0:	str	r2, [r0, r9, lsl #2]
     ef4:	b	e94 <transpose_array+0x34c>
     ef8:	add	r1, r1, #1
     efc:	b	e50 <transpose_array+0x308>
     f00:	ldr	r0, [pc, #260]	; 100c <transpose_array+0x4c4>
     f04:	ldr	r1, [pc, #260]	; 1010 <transpose_array+0x4c8>
     f08:	mov	r2, #172	; 0xac
     f0c:	ldr	r3, [pc, #240]	; 1004 <transpose_array+0x4bc>
     f10:	bl	0 <__assert_fail>
     f14:	mov	r0, #1
     f18:	bl	0 <exit>
     f1c:	b	fc4 <transpose_array+0x47c>
     f20:	mov	r9, #0
     f24:	cmp	r9, r7
     f28:	bge	fc4 <transpose_array+0x47c>
     f2c:	mov	ip, #0
     f30:	ldr	r3, [r5, r9, lsl #2]
     f34:	str	r3, [r4, r8, lsl #2]
     f38:	add	r1, sp, #120	; 0x78
     f3c:	ldr	r3, [r1, ip, lsl #2]
     f40:	add	r8, r8, r3
     f44:	add	r2, sp, #160	; 0xa0
     f48:	add	r0, sp, #160	; 0xa0
     f4c:	ldr	r0, [r0, ip, lsl #2]
     f50:	add	r0, r0, #1
     f54:	str	r0, [r2, ip, lsl #2]
     f58:	add	r0, sp, #160	; 0xa0
     f5c:	ldr	r3, [r0, ip, lsl #2]
     f60:	add	r1, sp, #80	; 0x50
     f64:	ldr	r2, [r1, ip, lsl #2]
     f68:	cmp	r3, r2
     f6c:	bne	fbc <transpose_array+0x474>
     f70:	add	r0, sp, #160	; 0xa0
     f74:	mov	r1, #0
     f78:	str	r1, [r0, ip, lsl #2]
     f7c:	add	r1, sp, #120	; 0x78
     f80:	ldr	r3, [r1, ip, lsl #2]
     f84:	add	r1, sp, #80	; 0x50
     f88:	ldr	r2, [r1, ip, lsl #2]
     f8c:	mul	r0, r3, r2
     f90:	sub	r1, r8, r0
     f94:	add	ip, ip, #1
     f98:	add	r2, sp, #120	; 0x78
     f9c:	ldr	r3, [r2, ip, lsl #2]
     fa0:	add	r8, r1, r3
     fa4:	add	r0, sp, #160	; 0xa0
     fa8:	add	r1, sp, #160	; 0xa0
     fac:	ldr	r3, [r1, ip, lsl #2]
     fb0:	add	r2, r3, #1
     fb4:	str	r2, [r0, ip, lsl #2]
     fb8:	b	f58 <transpose_array+0x410>
     fbc:	add	r9, r9, #1
     fc0:	b	f24 <transpose_array+0x3dc>
     fc4:	mul	r2, r7, r6
     fc8:	mov	r1, r4
     fcc:	mov	r0, r5
     fd0:	bl	0 <memcpy>
     fd4:	mov	r0, r4
     fd8:	bl	0 <free>
     fdc:	mov	r0, #0
     fe0:	ldr	r4, [sp, #16]
     fe4:	ldr	r5, [sp, #20]
     fe8:	ldr	r6, [sp, #24]
     fec:	ldr	r7, [sp, #28]
     ff0:	ldr	r8, [sp, #32]
     ff4:	ldr	r9, [sp, #36]	; 0x24
     ff8:	ldr	lr, [sp, #8]
     ffc:	add	sp, sp, #200	; 0xc8
    1000:	bx	lr
    1004:	.word	0x000006c1
    1008:	.word	0x000005e4
    100c:	.word	0x000005e2
    1010:	.word	0x000004a7

00001014 <coda_bin_cursor_get_bit_size>:
    1014:	mov	ip, sp
    1018:	sub	sp, sp, #544	; 0x220
    101c:	str	ip, [sp]
    1020:	str	lr, [sp, #4]
    1024:	str	r4, [sp, #8]
    1028:	str	r5, [sp, #12]
    102c:	str	r6, [sp, #16]
    1030:	mov	r6, r1
    1034:	mov	r5, r0
    1038:	ldr	r3, [r5, #4]
    103c:	lsl	r2, r3, #4
    1040:	add	ip, r5, r2
    1044:	sub	lr, ip, #4096	; 0x1000
    1048:	ldr	ip, [lr, #4088]	; 0xff8
    104c:	ldr	r0, [ip]
    1050:	cmp	r0, #100	; 0x64
    1054:	blt	1074 <coda_bin_cursor_get_bit_size+0x60>
    1058:	ldr	ip, [r5, #4]
    105c:	lsl	r1, ip, #4
    1060:	add	r1, r5, r1
    1064:	sub	lr, r1, #4096	; 0x1000
    1068:	ldr	r0, [lr, #4088]	; 0xff8
    106c:	ldr	r4, [r0, #4]
    1070:	b	1088 <coda_bin_cursor_get_bit_size+0x74>
    1074:	ldr	r0, [r5, #4]
    1078:	lsl	r3, r0, #4
    107c:	add	r2, r5, r3
    1080:	sub	lr, r2, #4096	; 0x1000
    1084:	ldr	r4, [lr, #4088]	; 0xff8
    1088:	ldr	r0, [r4, #28]
    108c:	cmp	r0, #0
    1090:	blt	10ac <coda_bin_cursor_get_bit_size+0x98>
    1094:	ldr	r3, [r4, #24]
    1098:	ldr	r1, [r4, #28]
    109c:	str	r3, [r6]
    10a0:	str	r1, [r6, #4]
    10a4:	mov	r0, #0
    10a8:	b	1204 <coda_bin_cursor_get_bit_size+0x1f0>
    10ac:	ldr	r2, [r4, #8]
    10b0:	cmp	r2, #7
    10b4:	bcs	1200 <coda_bin_cursor_get_bit_size+0x1ec>
    10b8:	add	pc, pc, r2, lsl #2
    10bc:	nop	{0}
    10c0:	b	10dc <coda_bin_cursor_get_bit_size+0xc8>
    10c4:	b	10dc <coda_bin_cursor_get_bit_size+0xc8>
    10c8:	b	10ec <coda_bin_cursor_get_bit_size+0xd8>
    10cc:	b	10ec <coda_bin_cursor_get_bit_size+0xd8>
    10d0:	b	10ec <coda_bin_cursor_get_bit_size+0xd8>
    10d4:	b	10ec <coda_bin_cursor_get_bit_size+0xd8>
    10d8:	b	11b0 <coda_bin_cursor_get_bit_size+0x19c>
    10dc:	mov	r1, r6
    10e0:	mov	r0, r5
    10e4:	bl	0 <coda_ascbin_cursor_get_bit_size>
    10e8:	b	1204 <coda_bin_cursor_get_bit_size+0x1f0>
    10ec:	ldr	r2, [r4, #32]
    10f0:	cmp	r2, #0
    10f4:	beq	119c <coda_bin_cursor_get_bit_size+0x188>
    10f8:	ldr	r0, [r4, #32]
    10fc:	mov	r2, r6
    1100:	mov	r1, r5
    1104:	bl	0 <coda_expression_eval_integer>
    1108:	cmp	r0, #0
    110c:	beq	1128 <coda_bin_cursor_get_bit_size+0x114>
    1110:	ldr	r0, [pc, #264]	; 1220 <coda_bin_cursor_get_bit_size+0x20c>
    1114:	bl	0 <coda_add_error_message>
    1118:	mov	r0, r5
    111c:	bl	0 <coda_cursor_add_to_error_message>
    1120:	mvn	r0, #0
    1124:	b	1204 <coda_bin_cursor_get_bit_size+0x1f0>
    1128:	ldr	r0, [r4, #24]
    112c:	ldr	r1, [r4, #28]
    1130:	mvn	r3, r1
    1134:	eor	r1, r0, #1016	; 0x3f8
    1138:	eor	r1, r1, #261120	; 0x3fc00
    113c:	eor	r1, r1, #66846720	; 0x3fc0000
    1140:	eor	r1, r1, #-67108864	; 0xfc000000
    1144:	orr	r3, r3, r1
    1148:	cmp	r3, #0
    114c:	bne	116c <coda_bin_cursor_get_bit_size+0x158>
    1150:	ldr	r0, [r6]
    1154:	ldr	ip, [r6, #4]
    1158:	lsl	r3, ip, #3
    115c:	orr	r2, r3, r0, lsr #29
    1160:	lsl	r1, r0, #3
    1164:	str	r1, [r6]
    1168:	str	r2, [r6, #4]
    116c:	ldr	r1, [r6, #4]
    1170:	cmp	r1, #0
    1174:	bge	1200 <coda_bin_cursor_get_bit_size+0x1ec>
    1178:	movw	r0, #65236	; 0xfed4
    117c:	movt	r0, #65535	; 0xffff
    1180:	ldr	r1, [pc, #148]	; 121c <coda_bin_cursor_get_bit_size+0x208>
    1184:	ldr	r2, [r6]
    1188:	bl	0 <coda_set_error>
    118c:	mov	r0, r5
    1190:	bl	0 <coda_cursor_add_to_error_message>
    1194:	mvn	r0, #0
    1198:	b	1204 <coda_bin_cursor_get_bit_size+0x1f0>
    119c:	mvn	r3, #0
    11a0:	mvn	r2, #0
    11a4:	str	r2, [r6]
    11a8:	str	r3, [r6, #4]
    11ac:	b	1200 <coda_bin_cursor_get_bit_size+0x1ec>
    11b0:	mov	r2, r5
    11b4:	add	r3, sp, #24
    11b8:	mov	lr, #130	; 0x82
    11bc:	ldr	ip, [r2], #4
    11c0:	subs	lr, lr, #1
    11c4:	str	ip, [r3], #4
    11c8:	bne	11bc <coda_bin_cursor_get_bit_size+0x1a8>
    11cc:	add	r0, sp, #24
    11d0:	bl	0 <coda_ascbin_cursor_use_base_type_of_special_type>
    11d4:	cmp	r0, #0
    11d8:	beq	11e4 <coda_bin_cursor_get_bit_size+0x1d0>
    11dc:	mvn	r0, #0
    11e0:	b	1204 <coda_bin_cursor_get_bit_size+0x1f0>
    11e4:	add	r0, sp, #24
    11e8:	mov	r1, r6
    11ec:	bl	0 <coda_cursor_get_bit_size>
    11f0:	cmp	r0, #0
    11f4:	beq	1200 <coda_bin_cursor_get_bit_size+0x1ec>
    11f8:	mvn	r0, #0
    11fc:	b	1204 <coda_bin_cursor_get_bit_size+0x1f0>
    1200:	mov	r0, #0
    1204:	ldr	r4, [sp, #8]
    1208:	ldr	r5, [sp, #12]
    120c:	ldr	r6, [sp, #16]
    1210:	ldr	lr, [sp, #4]
    1214:	add	sp, sp, #544	; 0x220
    1218:	bx	lr
    121c:	.word	0x00000000
    1220:	.word	0x00000492

00001224 <coda_bin_cursor_get_string_length>:
    1224:	mov	ip, sp
    1228:	sub	sp, sp, #24
    122c:	str	ip, [sp]
    1230:	str	lr, [sp, #4]
    1234:	str	r4, [sp, #8]
    1238:	mov	r4, r1
    123c:	add	r1, sp, #16
    1240:	bl	1014 <coda_bin_cursor_get_bit_size>
    1244:	cmp	r0, #0
    1248:	beq	1254 <coda_bin_cursor_get_string_length+0x30>
    124c:	mvn	r0, #0
    1250:	b	1284 <coda_bin_cursor_get_string_length+0x60>
    1254:	ldr	r0, [sp, #20]
    1258:	cmp	r0, #0
    125c:	blt	1278 <coda_bin_cursor_get_string_length+0x54>
    1260:	ldr	r3, [sp, #16]
    1264:	ldr	r2, [sp, #20]
    1268:	lsr	r3, r3, #3
    126c:	orr	r1, r3, r2, lsl #29
    1270:	str	r1, [r4]
    1274:	b	1280 <coda_bin_cursor_get_string_length+0x5c>
    1278:	mvn	ip, #0
    127c:	str	ip, [r4]
    1280:	mov	r0, #0
    1284:	ldr	r4, [sp, #8]
    1288:	ldr	lr, [sp, #4]
    128c:	add	sp, sp, #24
    1290:	bx	lr

00001294 <coda_bin_cursor_get_num_elements>:
    1294:	mov	ip, sp
    1298:	sub	sp, sp, #8
    129c:	str	ip, [sp]
    12a0:	str	lr, [sp, #4]
    12a4:	ldr	r2, [r0, #4]
    12a8:	lsl	r3, r2, #4
    12ac:	add	r2, r0, r3
    12b0:	sub	lr, r2, #4096	; 0x1000
    12b4:	ldr	ip, [lr, #4088]	; 0xff8
    12b8:	ldr	r2, [ip]
    12bc:	cmp	r2, #100	; 0x64
    12c0:	blt	12e0 <coda_bin_cursor_get_num_elements+0x4c>
    12c4:	ldr	r2, [r0, #4]
    12c8:	lsl	ip, r2, #4
    12cc:	add	r2, r0, ip
    12d0:	sub	lr, r2, #4096	; 0x1000
    12d4:	ldr	r3, [lr, #4088]	; 0xff8
    12d8:	ldr	r2, [r3, #4]
    12dc:	b	12f4 <coda_bin_cursor_get_num_elements+0x60>
    12e0:	ldr	ip, [r0, #4]
    12e4:	lsl	r2, ip, #4
    12e8:	add	r2, r0, r2
    12ec:	sub	lr, r2, #4096	; 0x1000
    12f0:	ldr	r2, [lr, #4088]	; 0xff8
    12f4:	ldr	r2, [r2, #8]
    12f8:	cmp	r2, #0
    12fc:	beq	1318 <coda_bin_cursor_get_num_elements+0x84>
    1300:	cmp	r2, #1
    1304:	beq	1318 <coda_bin_cursor_get_num_elements+0x84>
    1308:	mov	r2, #1
    130c:	str	r2, [r1]
    1310:	mov	r0, #0
    1314:	b	131c <coda_bin_cursor_get_num_elements+0x88>
    1318:	bl	0 <coda_ascbin_cursor_get_num_elements>
    131c:	ldr	lr, [sp, #4]
    1320:	add	sp, sp, #8
    1324:	bx	lr

00001328 <coda_bin_cursor_read_int8>:
    1328:	mov	ip, sp
    132c:	sub	sp, sp, #96	; 0x60
    1330:	str	ip, [sp, #12]
    1334:	str	lr, [sp, #16]
    1338:	str	r4, [sp, #24]
    133c:	str	r5, [sp, #28]
    1340:	str	r6, [sp, #32]
    1344:	str	r7, [sp, #36]	; 0x24
    1348:	mov	r5, r1
    134c:	mov	r4, r0
    1350:	ldr	r3, [r4, #4]
    1354:	lsl	r2, r3, #4
    1358:	add	ip, r4, r2
    135c:	sub	lr, ip, #4096	; 0x1000
    1360:	ldr	r3, [lr, #4088]	; 0xff8
    1364:	ldr	r2, [r3]
    1368:	cmp	r2, #100	; 0x64
    136c:	blt	138c <coda_bin_cursor_read_int8+0x64>
    1370:	ldr	r1, [r4, #4]
    1374:	lsl	r3, r1, #4
    1378:	add	ip, r4, r3
    137c:	sub	lr, ip, #4096	; 0x1000
    1380:	ldr	r1, [lr, #4088]	; 0xff8
    1384:	ldr	ip, [r1, #4]
    1388:	b	13a0 <coda_bin_cursor_read_int8+0x78>
    138c:	ldr	ip, [r4, #4]
    1390:	lsl	r1, ip, #4
    1394:	add	r3, r4, r1
    1398:	sub	lr, r3, #4096	; 0x1000
    139c:	ldr	ip, [lr, #4088]	; 0xff8
    13a0:	ldr	r3, [ip, #24]
    13a4:	ldr	r2, [ip, #28]
    13a8:	str	r3, [sp, #40]	; 0x28
    13ac:	str	r2, [sp, #44]	; 0x2c
    13b0:	ldr	r0, [r4, #4]
    13b4:	lsl	ip, r0, #4
    13b8:	add	r3, r4, ip
    13bc:	ldr	r6, [r3]
    13c0:	ldr	r7, [r3, #4]
    13c4:	ldr	r2, [sp, #44]	; 0x2c
    13c8:	cmp	r2, #0
    13cc:	bge	14b0 <coda_bin_cursor_read_int8+0x188>
    13d0:	add	r1, sp, #40	; 0x28
    13d4:	mov	r0, r4
    13d8:	bl	1014 <coda_bin_cursor_get_bit_size>
    13dc:	cmp	r0, #0
    13e0:	beq	13ec <coda_bin_cursor_read_int8+0xc4>
    13e4:	mvn	r0, #0
    13e8:	b	1668 <coda_bin_cursor_read_int8+0x340>
    13ec:	ldr	ip, [sp, #44]	; 0x2c
    13f0:	cmp	ip, #0
    13f4:	blt	1434 <coda_bin_cursor_read_int8+0x10c>
    13f8:	ldr	r1, [sp, #40]	; 0x28
    13fc:	ldr	ip, [sp, #44]	; 0x2c
    1400:	mov	r0, #0
    1404:	cmp	ip, r0
    1408:	bne	1420 <coda_bin_cursor_read_int8+0xf8>
    140c:	mov	r2, #8
    1410:	cmp	r1, r2
    1414:	movhi	ip, #1
    1418:	movls	ip, #0
    141c:	b	1438 <coda_bin_cursor_read_int8+0x110>
    1420:	mov	r1, #0
    1424:	cmp	ip, r1
    1428:	movgt	ip, #1
    142c:	movle	ip, #0
    1430:	b	1438 <coda_bin_cursor_read_int8+0x110>
    1434:	mov	ip, #1
    1438:	cmp	ip, #0
    143c:	beq	14b0 <coda_bin_cursor_read_int8+0x188>
    1440:	ldr	r0, [sp, #40]	; 0x28
    1444:	ldr	r1, [sp, #44]	; 0x2c
    1448:	add	r2, sp, #72	; 0x48
    144c:	bl	0 <coda_str64>
    1450:	ldr	r0, [r4, #4]
    1454:	lsl	r1, r0, #4
    1458:	add	r3, r4, r1
    145c:	ldr	r2, [r3]
    1460:	ldr	r0, [r3, #4]
    1464:	asr	r1, r0, #3
    1468:	lsr	r2, r2, #3
    146c:	orr	r0, r2, r0, lsl #29
    1470:	add	r2, sp, #48	; 0x30
    1474:	bl	0 <coda_str64>
    1478:	movw	r0, #65236	; 0xfed4
    147c:	movt	r0, #65535	; 0xffff
    1480:	ldr	r1, [pc, #520]	; 1690 <coda_bin_cursor_read_int8+0x368>
    1484:	add	r2, sp, #72	; 0x48
    1488:	add	r3, sp, #48	; 0x30
    148c:	ldr	ip, [r4, #4]
    1490:	lsl	ip, ip, #4
    1494:	add	ip, r4, ip
    1498:	ldr	ip, [ip]
    149c:	and	ip, ip, #7
    14a0:	str	ip, [sp]
    14a4:	bl	0 <coda_set_error>
    14a8:	mvn	r0, #0
    14ac:	b	1668 <coda_bin_cursor_read_int8+0x340>
    14b0:	mov	r3, r6
    14b4:	mov	r1, #0
    14b8:	and	r0, r3, #7
    14bc:	orr	r3, r1, r0
    14c0:	cmp	r3, #0
    14c4:	bne	14e8 <coda_bin_cursor_read_int8+0x1c0>
    14c8:	ldr	r2, [sp, #40]	; 0x28
    14cc:	ldr	r0, [sp, #44]	; 0x2c
    14d0:	eor	ip, r2, #8
    14d4:	orr	r1, r0, ip
    14d8:	cmp	r1, #0
    14dc:	movne	ip, #1
    14e0:	moveq	ip, #0
    14e4:	b	14ec <coda_bin_cursor_read_int8+0x1c4>
    14e8:	mov	ip, #1
    14ec:	cmp	ip, #0
    14f0:	beq	15a0 <coda_bin_cursor_read_int8+0x278>
    14f4:	ldr	r1, [sp, #40]	; 0x28
    14f8:	ldr	r0, [sp, #44]	; 0x2c
    14fc:	asr	ip, r0, #3
    1500:	lsr	r1, r1, #3
    1504:	orr	r0, r1, r0, lsl #29
    1508:	ldr	r2, [sp, #40]	; 0x28
    150c:	and	r3, r2, #7
    1510:	cmp	r3, #0
    1514:	movne	r2, #1
    1518:	moveq	r2, #0
    151c:	asr	r3, r2, #31
    1520:	adds	r0, r0, r2
    1524:	adc	r1, ip, r3
    1528:	mov	r3, #0
    152c:	cmp	r1, r3
    1530:	bne	1544 <coda_bin_cursor_read_int8+0x21c>
    1534:	mov	r2, #1
    1538:	cmp	r0, r2
    153c:	bls	1564 <coda_bin_cursor_read_int8+0x23c>
    1540:	b	1550 <coda_bin_cursor_read_int8+0x228>
    1544:	mov	r2, #0
    1548:	cmp	r1, r2
    154c:	blt	1564 <coda_bin_cursor_read_int8+0x23c>
    1550:	ldr	r0, [pc, #300]	; 1684 <coda_bin_cursor_read_int8+0x35c>
    1554:	ldr	r1, [pc, #304]	; 168c <coda_bin_cursor_read_int8+0x364>
    1558:	mov	r2, #177	; 0xb1
    155c:	ldr	r3, [pc, #292]	; 1688 <coda_bin_cursor_read_int8+0x360>
    1560:	bl	0 <__assert_fail>
    1564:	mov	ip, #0
    1568:	strb	ip, [r5]
    156c:	ldr	r0, [r4]
    1570:	ldr	r1, [sp, #40]	; 0x28
    1574:	ldr	ip, [sp, #44]	; 0x2c
    1578:	str	r5, [sp, #8]
    157c:	str	ip, [sp, #4]
    1580:	str	r1, [sp]
    1584:	mov	r3, r7
    1588:	mov	r2, r6
    158c:	bl	224 <read_bits>
    1590:	cmp	r0, #0
    1594:	beq	15d8 <coda_bin_cursor_read_int8+0x2b0>
    1598:	mvn	r0, #0
    159c:	b	1668 <coda_bin_cursor_read_int8+0x340>
    15a0:	ldr	r0, [r4]
    15a4:	asr	r3, r7, #3
    15a8:	lsr	ip, r6, #3
    15ac:	orr	r2, ip, r7, lsl #29
    15b0:	mov	r1, #0
    15b4:	mov	ip, #1
    15b8:	str	r5, [sp, #8]
    15bc:	str	r1, [sp, #4]
    15c0:	str	ip, [sp]
    15c4:	bl	0 <read_bytes>
    15c8:	cmp	r0, #0
    15cc:	beq	15d8 <coda_bin_cursor_read_int8+0x2b0>
    15d0:	mvn	r0, #0
    15d4:	b	1668 <coda_bin_cursor_read_int8+0x340>
    15d8:	ldr	r1, [sp, #40]	; 0x28
    15dc:	ldr	r3, [sp, #44]	; 0x2c
    15e0:	mov	r0, #0
    15e4:	cmp	r3, r0
    15e8:	bne	15fc <coda_bin_cursor_read_int8+0x2d4>
    15ec:	mov	r2, #8
    15f0:	cmp	r1, r2
    15f4:	bcc	1608 <coda_bin_cursor_read_int8+0x2e0>
    15f8:	b	1664 <coda_bin_cursor_read_int8+0x33c>
    15fc:	mov	r1, #0
    1600:	cmp	r3, r1
    1604:	bge	1664 <coda_bin_cursor_read_int8+0x33c>
    1608:	ldrb	r3, [r5]
    160c:	and	ip, r3, #255	; 0xff
    1610:	mov	r1, #1
    1614:	ldr	r0, [sp, #40]	; 0x28
    1618:	ldr	r4, [sp, #44]	; 0x2c
    161c:	mov	r3, #0
    1620:	mov	r2, #1
    1624:	subs	lr, r0, r2
    1628:	sbc	r0, r4, r3
    162c:	mov	r3, lr
    1630:	lsl	r1, r1, r3
    1634:	and	r3, ip, r1
    1638:	cmp	r3, #0
    163c:	beq	1664 <coda_bin_cursor_read_int8+0x33c>
    1640:	mov	r3, #1
    1644:	ldr	r2, [sp, #40]	; 0x28
    1648:	lsl	r2, r3, r2
    164c:	sub	r0, r2, #1
    1650:	mvn	r0, r0
    1654:	orr	r2, ip, r0
    1658:	sbfx	ip, r2, #0, #8
    165c:	sbfx	r0, ip, #0, #8
    1660:	strb	r0, [r5]
    1664:	mov	r0, #0
    1668:	ldr	r4, [sp, #24]
    166c:	ldr	r5, [sp, #28]
    1670:	ldr	r6, [sp, #32]
    1674:	ldr	r7, [sp, #36]	; 0x24
    1678:	ldr	lr, [sp, #16]
    167c:	add	sp, sp, #96	; 0x60
    1680:	bx	lr
    1684:	.word	0x00000691
    1688:	.word	0x000006d1
    168c:	.word	0x000001cc
    1690:	.word	0x00000092

00001694 <coda_bin_cursor_read_uint8>:
    1694:	mov	ip, sp
    1698:	sub	sp, sp, #96	; 0x60
    169c:	str	ip, [sp, #12]
    16a0:	str	lr, [sp, #16]
    16a4:	str	r4, [sp, #24]
    16a8:	str	r5, [sp, #28]
    16ac:	str	r6, [sp, #32]
    16b0:	str	r7, [sp, #36]	; 0x24
    16b4:	mov	r6, r1
    16b8:	mov	r7, r0
    16bc:	ldr	r3, [r7, #4]
    16c0:	lsl	r2, r3, #4
    16c4:	add	r0, r7, r2
    16c8:	sub	lr, r0, #4096	; 0x1000
    16cc:	ldr	ip, [lr, #4088]	; 0xff8
    16d0:	ldr	ip, [ip]
    16d4:	cmp	ip, #100	; 0x64
    16d8:	blt	16f8 <coda_bin_cursor_read_uint8+0x64>
    16dc:	ldr	r3, [r7, #4]
    16e0:	lsl	r0, r3, #4
    16e4:	add	r2, r7, r0
    16e8:	sub	lr, r2, #4096	; 0x1000
    16ec:	ldr	r0, [lr, #4088]	; 0xff8
    16f0:	ldr	r3, [r0, #4]
    16f4:	b	170c <coda_bin_cursor_read_uint8+0x78>
    16f8:	ldr	r1, [r7, #4]
    16fc:	lsl	r1, r1, #4
    1700:	add	r3, r7, r1
    1704:	sub	lr, r3, #4096	; 0x1000
    1708:	ldr	r3, [lr, #4088]	; 0xff8
    170c:	ldr	r0, [r3, #24]
    1710:	ldr	r1, [r3, #28]
    1714:	str	r0, [sp, #40]	; 0x28
    1718:	str	r1, [sp, #44]	; 0x2c
    171c:	ldr	r3, [r7, #4]
    1720:	lsl	ip, r3, #4
    1724:	add	r1, r7, ip
    1728:	ldr	r4, [r1]
    172c:	ldr	r5, [r1, #4]
    1730:	ldr	ip, [sp, #40]	; 0x28
    1734:	ldr	r2, [sp, #44]	; 0x2c
    1738:	mvn	r3, r2
    173c:	mvn	r2, ip
    1740:	orr	ip, r3, r2
    1744:	cmp	ip, #0
    1748:	bne	182c <coda_bin_cursor_read_uint8+0x198>
    174c:	add	r1, sp, #40	; 0x28
    1750:	mov	r0, r7
    1754:	bl	1014 <coda_bin_cursor_get_bit_size>
    1758:	cmp	r0, #0
    175c:	beq	1768 <coda_bin_cursor_read_uint8+0xd4>
    1760:	mvn	r0, #0
    1764:	b	195c <coda_bin_cursor_read_uint8+0x2c8>
    1768:	ldr	r3, [sp, #44]	; 0x2c
    176c:	cmp	r3, #0
    1770:	blt	17b0 <coda_bin_cursor_read_uint8+0x11c>
    1774:	ldr	r1, [sp, #40]	; 0x28
    1778:	ldr	ip, [sp, #44]	; 0x2c
    177c:	mov	r2, #0
    1780:	cmp	ip, r2
    1784:	bne	179c <coda_bin_cursor_read_uint8+0x108>
    1788:	mov	ip, #8
    178c:	cmp	r1, ip
    1790:	movhi	r1, #1
    1794:	movls	r1, #0
    1798:	b	17b4 <coda_bin_cursor_read_uint8+0x120>
    179c:	mov	r1, #0
    17a0:	cmp	ip, r1
    17a4:	movgt	r1, #1
    17a8:	movle	r1, #0
    17ac:	b	17b4 <coda_bin_cursor_read_uint8+0x120>
    17b0:	mov	r1, #1
    17b4:	cmp	r1, #0
    17b8:	beq	182c <coda_bin_cursor_read_uint8+0x198>
    17bc:	ldr	r0, [sp, #40]	; 0x28
    17c0:	ldr	r1, [sp, #44]	; 0x2c
    17c4:	add	r2, sp, #72	; 0x48
    17c8:	bl	0 <coda_str64>
    17cc:	ldr	ip, [r7, #4]
    17d0:	lsl	r1, ip, #4
    17d4:	add	r0, r7, r1
    17d8:	ldr	ip, [r0]
    17dc:	ldr	r2, [r0, #4]
    17e0:	asr	r1, r2, #3
    17e4:	lsr	r3, ip, #3
    17e8:	orr	r0, r3, r2, lsl #29
    17ec:	add	r2, sp, #48	; 0x30
    17f0:	bl	0 <coda_str64>
    17f4:	movw	r0, #65236	; 0xfed4
    17f8:	movt	r0, #65535	; 0xffff
    17fc:	ldr	r1, [pc, #384]	; 1984 <coda_bin_cursor_read_uint8+0x2f0>
    1800:	add	r2, sp, #72	; 0x48
    1804:	add	r3, sp, #48	; 0x30
    1808:	ldr	ip, [r7, #4]
    180c:	lsl	ip, ip, #4
    1810:	add	ip, r7, ip
    1814:	ldr	ip, [ip]
    1818:	and	ip, ip, #7
    181c:	str	ip, [sp]
    1820:	bl	0 <coda_set_error>
    1824:	mvn	r0, #0
    1828:	b	195c <coda_bin_cursor_read_uint8+0x2c8>
    182c:	mov	ip, r4
    1830:	mov	r1, #0
    1834:	and	r0, ip, #7
    1838:	orr	r3, r1, r0
    183c:	cmp	r3, #0
    1840:	bne	1864 <coda_bin_cursor_read_uint8+0x1d0>
    1844:	ldr	r1, [sp, #40]	; 0x28
    1848:	ldr	r2, [sp, #44]	; 0x2c
    184c:	eor	r1, r1, #8
    1850:	orr	ip, r2, r1
    1854:	cmp	ip, #0
    1858:	movne	r2, #1
    185c:	moveq	r2, #0
    1860:	b	1868 <coda_bin_cursor_read_uint8+0x1d4>
    1864:	mov	r2, #1
    1868:	cmp	r2, #0
    186c:	beq	1920 <coda_bin_cursor_read_uint8+0x28c>
    1870:	ldr	r2, [sp, #40]	; 0x28
    1874:	ldr	r3, [sp, #44]	; 0x2c
    1878:	asr	r1, r3, #3
    187c:	lsr	ip, r2, #3
    1880:	orr	ip, ip, r3, lsl #29
    1884:	ldr	r0, [sp, #40]	; 0x28
    1888:	and	r0, r0, #7
    188c:	cmp	r0, #0
    1890:	movne	r2, #1
    1894:	moveq	r2, #0
    1898:	asr	r3, r2, #31
    189c:	adds	lr, ip, r2
    18a0:	adc	r0, r1, r3
    18a4:	mov	r1, lr
    18a8:	mov	r2, #0
    18ac:	cmp	r0, r2
    18b0:	bne	18c4 <coda_bin_cursor_read_uint8+0x230>
    18b4:	mov	r0, #1
    18b8:	cmp	r1, r0
    18bc:	bls	18e4 <coda_bin_cursor_read_uint8+0x250>
    18c0:	b	18d0 <coda_bin_cursor_read_uint8+0x23c>
    18c4:	mov	r2, #0
    18c8:	cmp	r0, r2
    18cc:	blt	18e4 <coda_bin_cursor_read_uint8+0x250>
    18d0:	ldr	r0, [pc, #160]	; 1978 <coda_bin_cursor_read_uint8+0x2e4>
    18d4:	ldr	r1, [pc, #164]	; 1980 <coda_bin_cursor_read_uint8+0x2ec>
    18d8:	mov	r2, #233	; 0xe9
    18dc:	ldr	r3, [pc, #152]	; 197c <coda_bin_cursor_read_uint8+0x2e8>
    18e0:	bl	0 <__assert_fail>
    18e4:	mov	r2, #0
    18e8:	strb	r2, [r6]
    18ec:	ldr	r0, [r7]
    18f0:	ldr	r2, [sp, #40]	; 0x28
    18f4:	ldr	r1, [sp, #44]	; 0x2c
    18f8:	str	r6, [sp, #8]
    18fc:	str	r1, [sp, #4]
    1900:	str	r2, [sp]
    1904:	mov	r3, r5
    1908:	mov	r2, r4
    190c:	bl	224 <read_bits>
    1910:	cmp	r0, #0
    1914:	beq	1958 <coda_bin_cursor_read_uint8+0x2c4>
    1918:	mvn	r0, #0
    191c:	b	195c <coda_bin_cursor_read_uint8+0x2c8>
    1920:	ldr	r0, [r7]
    1924:	asr	r3, r5, #3
    1928:	lsr	ip, r4, #3
    192c:	orr	r2, ip, r5, lsl #29
    1930:	mov	r1, #0
    1934:	mov	ip, #1
    1938:	str	r6, [sp, #8]
    193c:	str	r1, [sp, #4]
    1940:	str	ip, [sp]
    1944:	bl	0 <read_bytes>
    1948:	cmp	r0, #0
    194c:	beq	1958 <coda_bin_cursor_read_uint8+0x2c4>
    1950:	mvn	r0, #0
    1954:	b	195c <coda_bin_cursor_read_uint8+0x2c8>
    1958:	mov	r0, #0
    195c:	ldr	r4, [sp, #24]
    1960:	ldr	r5, [sp, #28]
    1964:	ldr	r6, [sp, #32]
    1968:	ldr	r7, [sp, #36]	; 0x24
    196c:	ldr	lr, [sp, #16]
    1970:	add	sp, sp, #96	; 0x60
    1974:	bx	lr
    1978:	.word	0x00000691
    197c:	.word	0x000006eb
    1980:	.word	0x000001cc
    1984:	.word	0x0000050b

00001988 <coda_bin_cursor_read_int16>:
    1988:	mov	ip, sp
    198c:	sub	sp, sp, #112	; 0x70
    1990:	str	ip, [sp, #12]
    1994:	str	lr, [sp, #16]
    1998:	str	r4, [sp, #24]
    199c:	str	r5, [sp, #28]
    19a0:	str	r6, [sp, #32]
    19a4:	str	r7, [sp, #36]	; 0x24
    19a8:	str	r8, [sp, #40]	; 0x28
    19ac:	str	r9, [sp, #44]	; 0x2c
    19b0:	mov	r4, r1
    19b4:	mov	r6, r0
    19b8:	ldr	r2, [r6, #4]
    19bc:	lsl	r3, r2, #4
    19c0:	add	ip, r6, r3
    19c4:	sub	lr, ip, #4096	; 0x1000
    19c8:	ldr	ip, [lr, #4088]	; 0xff8
    19cc:	ldr	r3, [ip]
    19d0:	cmp	r3, #100	; 0x64
    19d4:	blt	19f4 <coda_bin_cursor_read_int16+0x6c>
    19d8:	ldr	r1, [r6, #4]
    19dc:	lsl	r0, r1, #4
    19e0:	add	ip, r6, r0
    19e4:	sub	lr, ip, #4096	; 0x1000
    19e8:	ldr	r2, [lr, #4088]	; 0xff8
    19ec:	ldr	r0, [r2, #4]
    19f0:	b	1a08 <coda_bin_cursor_read_int16+0x80>
    19f4:	ldr	r1, [r6, #4]
    19f8:	lsl	r2, r1, #4
    19fc:	add	ip, r6, r2
    1a00:	sub	lr, ip, #4096	; 0x1000
    1a04:	ldr	r0, [lr, #4088]	; 0xff8
    1a08:	ldr	ip, [r0, #24]
    1a0c:	ldr	r1, [r0, #28]
    1a10:	str	ip, [sp, #56]	; 0x38
    1a14:	str	r1, [sp, #60]	; 0x3c
    1a18:	ldr	r1, [r6, #4]
    1a1c:	lsl	r3, r1, #4
    1a20:	add	ip, r6, r3
    1a24:	ldr	r7, [ip]
    1a28:	ldr	r5, [ip, #4]
    1a2c:	ldr	r8, [r0, #44]	; 0x2c
    1a30:	ldr	ip, [sp, #56]	; 0x38
    1a34:	ldr	r3, [sp, #60]	; 0x3c
    1a38:	mvn	r3, r3
    1a3c:	mvn	r0, ip
    1a40:	orr	r3, r3, r0
    1a44:	cmp	r3, #0
    1a48:	bne	1b2c <coda_bin_cursor_read_int16+0x1a4>
    1a4c:	add	r1, sp, #56	; 0x38
    1a50:	mov	r0, r6
    1a54:	bl	1014 <coda_bin_cursor_get_bit_size>
    1a58:	cmp	r0, #0
    1a5c:	beq	1a68 <coda_bin_cursor_read_int16+0xe0>
    1a60:	mvn	r0, #0
    1a64:	b	1cf8 <coda_bin_cursor_read_int16+0x370>
    1a68:	ldr	r0, [sp, #60]	; 0x3c
    1a6c:	cmp	r0, #0
    1a70:	blt	1ab0 <coda_bin_cursor_read_int16+0x128>
    1a74:	ldr	r0, [sp, #56]	; 0x38
    1a78:	ldr	ip, [sp, #60]	; 0x3c
    1a7c:	mov	r1, #0
    1a80:	cmp	ip, r1
    1a84:	bne	1a9c <coda_bin_cursor_read_int16+0x114>
    1a88:	mov	r2, #16
    1a8c:	cmp	r0, r2
    1a90:	movhi	ip, #1
    1a94:	movls	ip, #0
    1a98:	b	1ab4 <coda_bin_cursor_read_int16+0x12c>
    1a9c:	mov	r3, #0
    1aa0:	cmp	ip, r3
    1aa4:	movgt	ip, #1
    1aa8:	movle	ip, #0
    1aac:	b	1ab4 <coda_bin_cursor_read_int16+0x12c>
    1ab0:	mov	ip, #1
    1ab4:	cmp	ip, #0
    1ab8:	beq	1b2c <coda_bin_cursor_read_int16+0x1a4>
    1abc:	ldr	r0, [sp, #56]	; 0x38
    1ac0:	ldr	r1, [sp, #60]	; 0x3c
    1ac4:	add	r2, sp, #64	; 0x40
    1ac8:	bl	0 <coda_str64>
    1acc:	ldr	r2, [r6, #4]
    1ad0:	lsl	ip, r2, #4
    1ad4:	add	r2, r6, ip
    1ad8:	ldr	r3, [r2]
    1adc:	ldr	r2, [r2, #4]
    1ae0:	asr	r1, r2, #3
    1ae4:	lsr	r3, r3, #3
    1ae8:	orr	r0, r3, r2, lsl #29
    1aec:	add	r2, sp, #88	; 0x58
    1af0:	bl	0 <coda_str64>
    1af4:	movw	r0, #65236	; 0xfed4
    1af8:	movt	r0, #65535	; 0xffff
    1afc:	ldr	r1, [pc, #536]	; 1d1c <coda_bin_cursor_read_int16+0x394>
    1b00:	add	r2, sp, #64	; 0x40
    1b04:	add	r3, sp, #88	; 0x58
    1b08:	ldr	ip, [r6, #4]
    1b0c:	lsl	ip, ip, #4
    1b10:	add	ip, r6, ip
    1b14:	ldr	ip, [ip]
    1b18:	and	ip, ip, #7
    1b1c:	str	ip, [sp]
    1b20:	bl	0 <coda_set_error>
    1b24:	mvn	r0, #0
    1b28:	b	1cf8 <coda_bin_cursor_read_int16+0x370>
    1b2c:	mov	r0, r7
    1b30:	mov	r2, #0
    1b34:	and	r3, r0, #7
    1b38:	orr	r3, r2, r3
    1b3c:	cmp	r3, #0
    1b40:	bne	1b64 <coda_bin_cursor_read_int16+0x1dc>
    1b44:	ldr	r3, [sp, #56]	; 0x38
    1b48:	ldr	r1, [sp, #60]	; 0x3c
    1b4c:	eor	r0, r3, #16
    1b50:	orr	r1, r1, r0
    1b54:	cmp	r1, #0
    1b58:	movne	r2, #1
    1b5c:	moveq	r2, #0
    1b60:	b	1b68 <coda_bin_cursor_read_int16+0x1e0>
    1b64:	mov	r2, #1
    1b68:	cmp	r2, #0
    1b6c:	beq	1c04 <coda_bin_cursor_read_int16+0x27c>
    1b70:	mov	ip, r4
    1b74:	cmp	r8, #0
    1b78:	bne	1bc8 <coda_bin_cursor_read_int16+0x240>
    1b7c:	mov	r3, #0
    1b80:	mov	r1, #2
    1b84:	ldr	r2, [sp, #56]	; 0x38
    1b88:	ldr	ip, [sp, #60]	; 0x3c
    1b8c:	asr	r0, ip, #3
    1b90:	lsr	r2, r2, #3
    1b94:	orr	ip, r2, ip, lsl #29
    1b98:	ldr	r2, [sp, #56]	; 0x38
    1b9c:	and	r2, r2, #7
    1ba0:	cmp	r2, #0
    1ba4:	movne	r2, #1
    1ba8:	moveq	r2, #0
    1bac:	asr	r9, r2, #31
    1bb0:	adds	r2, ip, r2
    1bb4:	adc	ip, r0, r9
    1bb8:	subs	lr, r1, r2
    1bbc:	sbc	r2, r3, ip
    1bc0:	mov	r3, lr
    1bc4:	add	ip, r4, r3
    1bc8:	mov	r2, #0
    1bcc:	strh	r2, [r4]
    1bd0:	ldr	r0, [r6]
    1bd4:	ldr	r3, [sp, #56]	; 0x38
    1bd8:	ldr	r2, [sp, #60]	; 0x3c
    1bdc:	str	ip, [sp, #8]
    1be0:	str	r2, [sp, #4]
    1be4:	str	r3, [sp]
    1be8:	mov	r3, r5
    1bec:	mov	r2, r7
    1bf0:	bl	224 <read_bits>
    1bf4:	cmp	r0, #0
    1bf8:	beq	1c3c <coda_bin_cursor_read_int16+0x2b4>
    1bfc:	mvn	r0, #0
    1c00:	b	1cf8 <coda_bin_cursor_read_int16+0x370>
    1c04:	ldr	r0, [r6]
    1c08:	asr	r3, r5, #3
    1c0c:	lsr	r1, r7, #3
    1c10:	orr	r2, r1, r5, lsl #29
    1c14:	mov	r1, #0
    1c18:	mov	ip, #2
    1c1c:	str	r4, [sp, #8]
    1c20:	str	r1, [sp, #4]
    1c24:	str	ip, [sp]
    1c28:	bl	0 <read_bytes>
    1c2c:	cmp	r0, #0
    1c30:	beq	1c3c <coda_bin_cursor_read_int16+0x2b4>
    1c34:	mvn	r0, #0
    1c38:	b	1cf8 <coda_bin_cursor_read_int16+0x370>
    1c3c:	cmp	r8, #0
    1c40:	bne	1c68 <coda_bin_cursor_read_int16+0x2e0>
    1c44:	ldrb	r0, [r4, #1]
    1c48:	and	r1, r0, #255	; 0xff
    1c4c:	strb	r1, [sp, #48]	; 0x30
    1c50:	ldrb	r1, [r4]
    1c54:	and	r0, r1, #255	; 0xff
    1c58:	strb	r0, [sp, #49]	; 0x31
    1c5c:	ldrsh	r2, [sp, #48]	; 0x30
    1c60:	sbfx	r3, r2, #0, #16
    1c64:	strh	r3, [r4]
    1c68:	ldr	r0, [sp, #56]	; 0x38
    1c6c:	ldr	r1, [sp, #60]	; 0x3c
    1c70:	mov	r2, #0
    1c74:	cmp	r1, r2
    1c78:	bne	1c8c <coda_bin_cursor_read_int16+0x304>
    1c7c:	mov	r1, #16
    1c80:	cmp	r0, r1
    1c84:	bcc	1c98 <coda_bin_cursor_read_int16+0x310>
    1c88:	b	1cf4 <coda_bin_cursor_read_int16+0x36c>
    1c8c:	mov	r2, #0
    1c90:	cmp	r1, r2
    1c94:	bge	1cf4 <coda_bin_cursor_read_int16+0x36c>
    1c98:	ldrh	r1, [r4]
    1c9c:	bic	r5, r1, #16711680	; 0xff0000
    1ca0:	bic	r5, r5, #-16777216	; 0xff000000
    1ca4:	mov	r6, #1
    1ca8:	ldr	r2, [sp, #56]	; 0x38
    1cac:	ldr	r1, [sp, #60]	; 0x3c
    1cb0:	mov	r0, #0
    1cb4:	mov	ip, #1
    1cb8:	subs	r2, r2, ip
    1cbc:	sbc	r3, r1, r0
    1cc0:	lsl	r0, r6, r2
    1cc4:	and	r0, r5, r0
    1cc8:	cmp	r0, #0
    1ccc:	beq	1cf4 <coda_bin_cursor_read_int16+0x36c>
    1cd0:	mov	r0, #1
    1cd4:	ldr	r1, [sp, #56]	; 0x38
    1cd8:	lsl	r3, r0, r1
    1cdc:	sub	ip, r3, #1
    1ce0:	mvn	ip, ip
    1ce4:	orr	r3, r5, ip
    1ce8:	sbfx	r3, r3, #0, #16
    1cec:	sbfx	r1, r3, #0, #16
    1cf0:	strh	r1, [r4]
    1cf4:	mov	r0, #0
    1cf8:	ldr	r4, [sp, #24]
    1cfc:	ldr	r5, [sp, #28]
    1d00:	ldr	r6, [sp, #32]
    1d04:	ldr	r7, [sp, #36]	; 0x24
    1d08:	ldr	r8, [sp, #40]	; 0x28
    1d0c:	ldr	r9, [sp, #44]	; 0x2c
    1d10:	ldr	lr, [sp, #16]
    1d14:	add	sp, sp, #112	; 0x70
    1d18:	bx	lr
    1d1c:	.word	0x00000027

00001d20 <coda_bin_cursor_read_uint16>:
    1d20:	mov	ip, sp
    1d24:	sub	sp, sp, #112	; 0x70
    1d28:	str	ip, [sp, #12]
    1d2c:	str	lr, [sp, #16]
    1d30:	str	r4, [sp, #24]
    1d34:	str	r5, [sp, #28]
    1d38:	str	r6, [sp, #32]
    1d3c:	str	r7, [sp, #36]	; 0x24
    1d40:	str	r8, [sp, #40]	; 0x28
    1d44:	str	r9, [sp, #44]	; 0x2c
    1d48:	mov	r8, r1
    1d4c:	mov	r7, r0
    1d50:	ldr	r1, [r7, #4]
    1d54:	lsl	r2, r1, #4
    1d58:	add	r2, r7, r2
    1d5c:	sub	lr, r2, #4096	; 0x1000
    1d60:	ldr	ip, [lr, #4088]	; 0xff8
    1d64:	ldr	r2, [ip]
    1d68:	cmp	r2, #100	; 0x64
    1d6c:	blt	1d8c <coda_bin_cursor_read_uint16+0x6c>
    1d70:	ldr	r3, [r7, #4]
    1d74:	lsl	r0, r3, #4
    1d78:	add	ip, r7, r0
    1d7c:	sub	lr, ip, #4096	; 0x1000
    1d80:	ldr	r3, [lr, #4088]	; 0xff8
    1d84:	ldr	r3, [r3, #4]
    1d88:	b	1da0 <coda_bin_cursor_read_uint16+0x80>
    1d8c:	ldr	r1, [r7, #4]
    1d90:	lsl	r1, r1, #4
    1d94:	add	r3, r7, r1
    1d98:	sub	lr, r3, #4096	; 0x1000
    1d9c:	ldr	r3, [lr, #4088]	; 0xff8
    1da0:	ldr	r0, [r3, #24]
    1da4:	ldr	ip, [r3, #28]
    1da8:	str	r0, [sp, #56]	; 0x38
    1dac:	str	ip, [sp, #60]	; 0x3c
    1db0:	ldr	ip, [r7, #4]
    1db4:	lsl	ip, ip, #4
    1db8:	add	r1, r7, ip
    1dbc:	ldr	r4, [r1]
    1dc0:	ldr	r6, [r1, #4]
    1dc4:	ldr	r5, [r3, #44]	; 0x2c
    1dc8:	ldr	r2, [sp, #56]	; 0x38
    1dcc:	ldr	r1, [sp, #60]	; 0x3c
    1dd0:	mvn	r3, r1
    1dd4:	mvn	ip, r2
    1dd8:	orr	r1, r3, ip
    1ddc:	cmp	r1, #0
    1de0:	bne	1ec4 <coda_bin_cursor_read_uint16+0x1a4>
    1de4:	add	r1, sp, #56	; 0x38
    1de8:	mov	r0, r7
    1dec:	bl	1014 <coda_bin_cursor_get_bit_size>
    1df0:	cmp	r0, #0
    1df4:	beq	1e00 <coda_bin_cursor_read_uint16+0xe0>
    1df8:	mvn	r0, #0
    1dfc:	b	2008 <coda_bin_cursor_read_uint16+0x2e8>
    1e00:	ldr	ip, [sp, #60]	; 0x3c
    1e04:	cmp	ip, #0
    1e08:	blt	1e48 <coda_bin_cursor_read_uint16+0x128>
    1e0c:	ldr	ip, [sp, #56]	; 0x38
    1e10:	ldr	r0, [sp, #60]	; 0x3c
    1e14:	mov	r1, #0
    1e18:	cmp	r0, r1
    1e1c:	bne	1e34 <coda_bin_cursor_read_uint16+0x114>
    1e20:	mov	r2, #16
    1e24:	cmp	ip, r2
    1e28:	movhi	ip, #1
    1e2c:	movls	ip, #0
    1e30:	b	1e4c <coda_bin_cursor_read_uint16+0x12c>
    1e34:	mov	r2, #0
    1e38:	cmp	r0, r2
    1e3c:	movgt	ip, #1
    1e40:	movle	ip, #0
    1e44:	b	1e4c <coda_bin_cursor_read_uint16+0x12c>
    1e48:	mov	ip, #1
    1e4c:	cmp	ip, #0
    1e50:	beq	1ec4 <coda_bin_cursor_read_uint16+0x1a4>
    1e54:	ldr	r0, [sp, #56]	; 0x38
    1e58:	ldr	r1, [sp, #60]	; 0x3c
    1e5c:	add	r2, sp, #64	; 0x40
    1e60:	bl	0 <coda_str64>
    1e64:	ldr	r2, [r7, #4]
    1e68:	lsl	r0, r2, #4
    1e6c:	add	r0, r7, r0
    1e70:	ldr	ip, [r0]
    1e74:	ldr	r2, [r0, #4]
    1e78:	asr	r1, r2, #3
    1e7c:	lsr	r3, ip, #3
    1e80:	orr	r0, r3, r2, lsl #29
    1e84:	add	r2, sp, #88	; 0x58
    1e88:	bl	0 <coda_str64>
    1e8c:	movw	r0, #65236	; 0xfed4
    1e90:	movt	r0, #65535	; 0xffff
    1e94:	ldr	r1, [pc, #400]	; 202c <coda_bin_cursor_read_uint16+0x30c>
    1e98:	add	r2, sp, #64	; 0x40
    1e9c:	add	r3, sp, #88	; 0x58
    1ea0:	ldr	ip, [r7, #4]
    1ea4:	lsl	ip, ip, #4
    1ea8:	add	ip, r7, ip
    1eac:	ldr	ip, [ip]
    1eb0:	and	ip, ip, #7
    1eb4:	str	ip, [sp]
    1eb8:	bl	0 <coda_set_error>
    1ebc:	mvn	r0, #0
    1ec0:	b	2008 <coda_bin_cursor_read_uint16+0x2e8>
    1ec4:	mov	ip, r4
    1ec8:	mov	r0, #0
    1ecc:	and	r1, ip, #7
    1ed0:	orr	ip, r0, r1
    1ed4:	cmp	ip, #0
    1ed8:	bne	1efc <coda_bin_cursor_read_uint16+0x1dc>
    1edc:	ldr	r2, [sp, #56]	; 0x38
    1ee0:	ldr	r1, [sp, #60]	; 0x3c
    1ee4:	eor	r0, r2, #16
    1ee8:	orr	ip, r1, r0
    1eec:	cmp	ip, #0
    1ef0:	movne	r2, #1
    1ef4:	moveq	r2, #0
    1ef8:	b	1f00 <coda_bin_cursor_read_uint16+0x1e0>
    1efc:	mov	r2, #1
    1f00:	cmp	r2, #0
    1f04:	beq	1f9c <coda_bin_cursor_read_uint16+0x27c>
    1f08:	mov	r3, r8
    1f0c:	cmp	r5, #0
    1f10:	bne	1f60 <coda_bin_cursor_read_uint16+0x240>
    1f14:	mov	r2, #0
    1f18:	mov	r0, #2
    1f1c:	ldr	r1, [sp, #56]	; 0x38
    1f20:	ldr	r3, [sp, #60]	; 0x3c
    1f24:	asr	ip, r3, #3
    1f28:	lsr	r1, r1, #3
    1f2c:	orr	r3, r1, r3, lsl #29
    1f30:	ldr	r1, [sp, #56]	; 0x38
    1f34:	and	r1, r1, #7
    1f38:	cmp	r1, #0
    1f3c:	movne	r1, #1
    1f40:	moveq	r1, #0
    1f44:	asr	r9, r1, #31
    1f48:	adds	r1, r3, r1
    1f4c:	adc	ip, ip, r9
    1f50:	subs	lr, r0, r1
    1f54:	sbc	r0, r2, ip
    1f58:	mov	r2, lr
    1f5c:	add	r3, r8, r2
    1f60:	mov	r1, #0
    1f64:	strh	r1, [r8]
    1f68:	ldr	r0, [r7]
    1f6c:	ldr	r2, [sp, #56]	; 0x38
    1f70:	ldr	r1, [sp, #60]	; 0x3c
    1f74:	str	r3, [sp, #8]
    1f78:	str	r1, [sp, #4]
    1f7c:	str	r2, [sp]
    1f80:	mov	r3, r6
    1f84:	mov	r2, r4
    1f88:	bl	224 <read_bits>
    1f8c:	cmp	r0, #0
    1f90:	beq	1fd4 <coda_bin_cursor_read_uint16+0x2b4>
    1f94:	mvn	r0, #0
    1f98:	b	2008 <coda_bin_cursor_read_uint16+0x2e8>
    1f9c:	ldr	r0, [r7]
    1fa0:	asr	r3, r6, #3
    1fa4:	lsr	r1, r4, #3
    1fa8:	orr	r2, r1, r6, lsl #29
    1fac:	mov	r1, #0
    1fb0:	mov	ip, #2
    1fb4:	str	r8, [sp, #8]
    1fb8:	str	r1, [sp, #4]
    1fbc:	str	ip, [sp]
    1fc0:	bl	0 <read_bytes>
    1fc4:	cmp	r0, #0
    1fc8:	beq	1fd4 <coda_bin_cursor_read_uint16+0x2b4>
    1fcc:	mvn	r0, #0
    1fd0:	b	2008 <coda_bin_cursor_read_uint16+0x2e8>
    1fd4:	cmp	r5, #0
    1fd8:	bne	2004 <coda_bin_cursor_read_uint16+0x2e4>
    1fdc:	ldrb	r2, [r8, #1]
    1fe0:	and	ip, r2, #255	; 0xff
    1fe4:	strb	ip, [sp, #48]	; 0x30
    1fe8:	ldrb	r3, [r8]
    1fec:	and	r3, r3, #255	; 0xff
    1ff0:	strb	r3, [sp, #49]	; 0x31
    1ff4:	ldrh	r1, [sp, #48]	; 0x30
    1ff8:	bic	r3, r1, #16711680	; 0xff0000
    1ffc:	bic	r3, r3, #-16777216	; 0xff000000
    2000:	strh	r3, [r8]
    2004:	mov	r0, #0
    2008:	ldr	r4, [sp, #24]
    200c:	ldr	r5, [sp, #28]
    2010:	ldr	r6, [sp, #32]
    2014:	ldr	r7, [sp, #36]	; 0x24
    2018:	ldr	r8, [sp, #40]	; 0x28
    201c:	ldr	r9, [sp, #44]	; 0x2c
    2020:	ldr	lr, [sp, #16]
    2024:	add	sp, sp, #112	; 0x70
    2028:	bx	lr
    202c:	.word	0x00000576

00002030 <coda_bin_cursor_read_int32>:
    2030:	mov	ip, sp
    2034:	sub	sp, sp, #112	; 0x70
    2038:	str	ip, [sp, #12]
    203c:	str	lr, [sp, #16]
    2040:	str	r4, [sp, #24]
    2044:	str	r5, [sp, #28]
    2048:	str	r6, [sp, #32]
    204c:	str	r7, [sp, #36]	; 0x24
    2050:	str	r8, [sp, #40]	; 0x28
    2054:	str	r9, [sp, #44]	; 0x2c
    2058:	mov	r6, r1
    205c:	mov	r8, r0
    2060:	ldr	r0, [r8, #4]
    2064:	lsl	ip, r0, #4
    2068:	add	r0, r8, ip
    206c:	sub	lr, r0, #4096	; 0x1000
    2070:	ldr	r1, [lr, #4088]	; 0xff8
    2074:	ldr	r0, [r1]
    2078:	cmp	r0, #100	; 0x64
    207c:	blt	209c <coda_bin_cursor_read_int32+0x6c>
    2080:	ldr	r0, [r8, #4]
    2084:	lsl	ip, r0, #4
    2088:	add	r2, r8, ip
    208c:	sub	lr, r2, #4096	; 0x1000
    2090:	ldr	r3, [lr, #4088]	; 0xff8
    2094:	ldr	r3, [r3, #4]
    2098:	b	20b0 <coda_bin_cursor_read_int32+0x80>
    209c:	ldr	ip, [r8, #4]
    20a0:	lsl	r1, ip, #4
    20a4:	add	r1, r8, r1
    20a8:	sub	lr, r1, #4096	; 0x1000
    20ac:	ldr	r3, [lr, #4088]	; 0xff8
    20b0:	ldr	r2, [r3, #24]
    20b4:	ldr	ip, [r3, #28]
    20b8:	str	r2, [sp, #56]	; 0x38
    20bc:	str	ip, [sp, #60]	; 0x3c
    20c0:	ldr	r2, [r8, #4]
    20c4:	lsl	r2, r2, #4
    20c8:	add	r0, r8, r2
    20cc:	ldr	r5, [r0]
    20d0:	ldr	r4, [r0, #4]
    20d4:	ldr	r7, [r3, #44]	; 0x2c
    20d8:	ldr	r2, [sp, #56]	; 0x38
    20dc:	ldr	r0, [sp, #60]	; 0x3c
    20e0:	mvn	r1, r0
    20e4:	mvn	r2, r2
    20e8:	orr	r1, r1, r2
    20ec:	cmp	r1, #0
    20f0:	bne	21d4 <coda_bin_cursor_read_int32+0x1a4>
    20f4:	add	r1, sp, #56	; 0x38
    20f8:	mov	r0, r8
    20fc:	bl	1014 <coda_bin_cursor_get_bit_size>
    2100:	cmp	r0, #0
    2104:	beq	2110 <coda_bin_cursor_read_int32+0xe0>
    2108:	mvn	r0, #0
    210c:	b	23a8 <coda_bin_cursor_read_int32+0x378>
    2110:	ldr	r0, [sp, #60]	; 0x3c
    2114:	cmp	r0, #0
    2118:	blt	2158 <coda_bin_cursor_read_int32+0x128>
    211c:	ldr	r3, [sp, #56]	; 0x38
    2120:	ldr	r1, [sp, #60]	; 0x3c
    2124:	mov	r0, #0
    2128:	cmp	r1, r0
    212c:	bne	2144 <coda_bin_cursor_read_int32+0x114>
    2130:	mov	r0, #32
    2134:	cmp	r3, r0
    2138:	movhi	r2, #1
    213c:	movls	r2, #0
    2140:	b	215c <coda_bin_cursor_read_int32+0x12c>
    2144:	mov	r2, #0
    2148:	cmp	r1, r2
    214c:	movgt	r2, #1
    2150:	movle	r2, #0
    2154:	b	215c <coda_bin_cursor_read_int32+0x12c>
    2158:	mov	r2, #1
    215c:	cmp	r2, #0
    2160:	beq	21d4 <coda_bin_cursor_read_int32+0x1a4>
    2164:	ldr	r0, [sp, #56]	; 0x38
    2168:	ldr	r1, [sp, #60]	; 0x3c
    216c:	add	r2, sp, #64	; 0x40
    2170:	bl	0 <coda_str64>
    2174:	ldr	ip, [r8, #4]
    2178:	lsl	ip, ip, #4
    217c:	add	r2, r8, ip
    2180:	ldr	r0, [r2]
    2184:	ldr	r2, [r2, #4]
    2188:	asr	r1, r2, #3
    218c:	lsr	ip, r0, #3
    2190:	orr	r0, ip, r2, lsl #29
    2194:	add	r2, sp, #88	; 0x58
    2198:	bl	0 <coda_str64>
    219c:	movw	r0, #65236	; 0xfed4
    21a0:	movt	r0, #65535	; 0xffff
    21a4:	ldr	r1, [pc, #544]	; 23cc <coda_bin_cursor_read_int32+0x39c>
    21a8:	add	r2, sp, #64	; 0x40
    21ac:	add	r3, sp, #88	; 0x58
    21b0:	ldr	ip, [r8, #4]
    21b4:	lsl	ip, ip, #4
    21b8:	add	ip, r8, ip
    21bc:	ldr	ip, [ip]
    21c0:	and	ip, ip, #7
    21c4:	str	ip, [sp]
    21c8:	bl	0 <coda_set_error>
    21cc:	mvn	r0, #0
    21d0:	b	23a8 <coda_bin_cursor_read_int32+0x378>
    21d4:	mov	r1, #0
    21d8:	mov	r3, r5
    21dc:	and	r0, r3, #7
    21e0:	orr	r1, r1, r0
    21e4:	cmp	r1, #0
    21e8:	bne	220c <coda_bin_cursor_read_int32+0x1dc>
    21ec:	ldr	ip, [sp, #56]	; 0x38
    21f0:	ldr	r2, [sp, #60]	; 0x3c
    21f4:	eor	r0, ip, #32
    21f8:	orr	ip, r2, r0
    21fc:	cmp	ip, #0
    2200:	movne	ip, #1
    2204:	moveq	ip, #0
    2208:	b	2210 <coda_bin_cursor_read_int32+0x1e0>
    220c:	mov	ip, #1
    2210:	cmp	ip, #0
    2214:	beq	22ac <coda_bin_cursor_read_int32+0x27c>
    2218:	mov	ip, r6
    221c:	cmp	r7, #0
    2220:	bne	2270 <coda_bin_cursor_read_int32+0x240>
    2224:	mov	ip, #0
    2228:	mov	r3, #4
    222c:	ldr	r2, [sp, #56]	; 0x38
    2230:	ldr	r1, [sp, #60]	; 0x3c
    2234:	asr	r0, r1, #3
    2238:	lsr	r2, r2, #3
    223c:	orr	r9, r2, r1, lsl #29
    2240:	ldr	r1, [sp, #56]	; 0x38
    2244:	and	r1, r1, #7
    2248:	cmp	r1, #0
    224c:	movne	r2, #1
    2250:	moveq	r2, #0
    2254:	asr	r1, r2, #31
    2258:	adds	lr, r9, r2
    225c:	adc	r1, r0, r1
    2260:	mov	r0, lr
    2264:	subs	r2, r3, r0
    2268:	sbc	r1, ip, r1
    226c:	add	ip, r6, r2
    2270:	mov	r3, #0
    2274:	str	r3, [r6]
    2278:	ldr	r0, [r8]
    227c:	ldr	r1, [sp, #56]	; 0x38
    2280:	ldr	r2, [sp, #60]	; 0x3c
    2284:	str	ip, [sp, #8]
    2288:	str	r2, [sp, #4]
    228c:	str	r1, [sp]
    2290:	mov	r3, r4
    2294:	mov	r2, r5
    2298:	bl	224 <read_bits>
    229c:	cmp	r0, #0
    22a0:	beq	22e4 <coda_bin_cursor_read_int32+0x2b4>
    22a4:	mvn	r0, #0
    22a8:	b	23a8 <coda_bin_cursor_read_int32+0x378>
    22ac:	ldr	r0, [r8]
    22b0:	asr	r3, r4, #3
    22b4:	lsr	r1, r5, #3
    22b8:	orr	r2, r1, r4, lsl #29
    22bc:	mov	r1, #0
    22c0:	mov	ip, #4
    22c4:	str	r6, [sp, #8]
    22c8:	str	r1, [sp, #4]
    22cc:	str	ip, [sp]
    22d0:	bl	0 <read_bytes>
    22d4:	cmp	r0, #0
    22d8:	beq	22e4 <coda_bin_cursor_read_int32+0x2b4>
    22dc:	mvn	r0, #0
    22e0:	b	23a8 <coda_bin_cursor_read_int32+0x378>
    22e4:	cmp	r7, #0
    22e8:	bne	2324 <coda_bin_cursor_read_int32+0x2f4>
    22ec:	ldrb	r0, [r6, #3]
    22f0:	and	r3, r0, #255	; 0xff
    22f4:	strb	r3, [sp, #48]	; 0x30
    22f8:	ldrb	r2, [r6, #2]
    22fc:	and	r3, r2, #255	; 0xff
    2300:	strb	r3, [sp, #49]	; 0x31
    2304:	ldrb	r2, [r6, #1]
    2308:	and	r2, r2, #255	; 0xff
    230c:	strb	r2, [sp, #50]	; 0x32
    2310:	ldrb	r1, [r6]
    2314:	and	ip, r1, #255	; 0xff
    2318:	strb	ip, [sp, #51]	; 0x33
    231c:	ldr	r0, [sp, #48]	; 0x30
    2320:	str	r0, [r6]
    2324:	ldr	r3, [sp, #56]	; 0x38
    2328:	ldr	r2, [sp, #60]	; 0x3c
    232c:	mov	ip, #0
    2330:	cmp	r2, ip
    2334:	bne	2348 <coda_bin_cursor_read_int32+0x318>
    2338:	mov	ip, #32
    233c:	cmp	r3, ip
    2340:	bcc	2354 <coda_bin_cursor_read_int32+0x324>
    2344:	b	23a4 <coda_bin_cursor_read_int32+0x374>
    2348:	mov	r3, #0
    234c:	cmp	r2, r3
    2350:	bge	23a4 <coda_bin_cursor_read_int32+0x374>
    2354:	ldr	r4, [r6]
    2358:	mov	ip, #1
    235c:	ldr	r3, [sp, #56]	; 0x38
    2360:	ldr	r0, [sp, #60]	; 0x3c
    2364:	mov	r2, #0
    2368:	mov	r1, #1
    236c:	subs	lr, r3, r1
    2370:	sbc	r2, r0, r2
    2374:	mov	r0, lr
    2378:	lsl	r1, ip, r0
    237c:	and	r3, r4, r1
    2380:	cmp	r3, #0
    2384:	beq	23a4 <coda_bin_cursor_read_int32+0x374>
    2388:	mov	r0, #1
    238c:	ldr	ip, [sp, #56]	; 0x38
    2390:	lsl	r0, r0, ip
    2394:	sub	r3, r0, #1
    2398:	mvn	r3, r3
    239c:	orr	ip, r4, r3
    23a0:	str	ip, [r6]
    23a4:	mov	r0, #0
    23a8:	ldr	r4, [sp, #24]
    23ac:	ldr	r5, [sp, #28]
    23b0:	ldr	r6, [sp, #32]
    23b4:	ldr	r7, [sp, #36]	; 0x24
    23b8:	ldr	r8, [sp, #40]	; 0x28
    23bc:	ldr	r9, [sp, #44]	; 0x2c
    23c0:	ldr	lr, [sp, #16]
    23c4:	add	sp, sp, #112	; 0x70
    23c8:	bx	lr
    23cc:	.word	0x00000427

000023d0 <coda_bin_cursor_read_uint32>:
    23d0:	mov	ip, sp
    23d4:	sub	sp, sp, #112	; 0x70
    23d8:	str	ip, [sp, #12]
    23dc:	str	lr, [sp, #16]
    23e0:	str	r4, [sp, #24]
    23e4:	str	r5, [sp, #28]
    23e8:	str	r6, [sp, #32]
    23ec:	str	r7, [sp, #36]	; 0x24
    23f0:	str	r8, [sp, #40]	; 0x28
    23f4:	str	r9, [sp, #44]	; 0x2c
    23f8:	mov	r4, r1
    23fc:	mov	r7, r0
    2400:	ldr	r0, [r7, #4]
    2404:	lsl	r1, r0, #4
    2408:	add	r1, r7, r1
    240c:	sub	lr, r1, #4096	; 0x1000
    2410:	ldr	r1, [lr, #4088]	; 0xff8
    2414:	ldr	r2, [r1]
    2418:	cmp	r2, #100	; 0x64
    241c:	blt	243c <coda_bin_cursor_read_uint32+0x6c>
    2420:	ldr	r3, [r7, #4]
    2424:	lsl	ip, r3, #4
    2428:	add	r1, r7, ip
    242c:	sub	lr, r1, #4096	; 0x1000
    2430:	ldr	ip, [lr, #4088]	; 0xff8
    2434:	ldr	r1, [ip, #4]
    2438:	b	2450 <coda_bin_cursor_read_uint32+0x80>
    243c:	ldr	ip, [r7, #4]
    2440:	lsl	r3, ip, #4
    2444:	add	r3, r7, r3
    2448:	sub	lr, r3, #4096	; 0x1000
    244c:	ldr	r1, [lr, #4088]	; 0xff8
    2450:	ldr	r2, [r1, #24]
    2454:	ldr	r3, [r1, #28]
    2458:	str	r2, [sp, #56]	; 0x38
    245c:	str	r3, [sp, #60]	; 0x3c
    2460:	ldr	r2, [r7, #4]
    2464:	lsl	r2, r2, #4
    2468:	add	r0, r7, r2
    246c:	ldr	r8, [r0]
    2470:	ldr	r6, [r0, #4]
    2474:	ldr	r5, [r1, #44]	; 0x2c
    2478:	ldr	r3, [sp, #56]	; 0x38
    247c:	ldr	r0, [sp, #60]	; 0x3c
    2480:	mvn	r2, r0
    2484:	mvn	r1, r3
    2488:	orr	ip, r2, r1
    248c:	cmp	ip, #0
    2490:	bne	2574 <coda_bin_cursor_read_uint32+0x1a4>
    2494:	add	r1, sp, #56	; 0x38
    2498:	mov	r0, r7
    249c:	bl	1014 <coda_bin_cursor_get_bit_size>
    24a0:	cmp	r0, #0
    24a4:	beq	24b0 <coda_bin_cursor_read_uint32+0xe0>
    24a8:	mvn	r0, #0
    24ac:	b	26c8 <coda_bin_cursor_read_uint32+0x2f8>
    24b0:	ldr	r0, [sp, #60]	; 0x3c
    24b4:	cmp	r0, #0
    24b8:	blt	24f8 <coda_bin_cursor_read_uint32+0x128>
    24bc:	ldr	ip, [sp, #56]	; 0x38
    24c0:	ldr	r2, [sp, #60]	; 0x3c
    24c4:	mov	r0, #0
    24c8:	cmp	r2, r0
    24cc:	bne	24e4 <coda_bin_cursor_read_uint32+0x114>
    24d0:	mov	r3, #32
    24d4:	cmp	ip, r3
    24d8:	movhi	r2, #1
    24dc:	movls	r2, #0
    24e0:	b	24fc <coda_bin_cursor_read_uint32+0x12c>
    24e4:	mov	r3, #0
    24e8:	cmp	r2, r3
    24ec:	movgt	r2, #1
    24f0:	movle	r2, #0
    24f4:	b	24fc <coda_bin_cursor_read_uint32+0x12c>
    24f8:	mov	r2, #1
    24fc:	cmp	r2, #0
    2500:	beq	2574 <coda_bin_cursor_read_uint32+0x1a4>
    2504:	ldr	r0, [sp, #56]	; 0x38
    2508:	ldr	r1, [sp, #60]	; 0x3c
    250c:	add	r2, sp, #64	; 0x40
    2510:	bl	0 <coda_str64>
    2514:	ldr	r2, [r7, #4]
    2518:	lsl	r0, r2, #4
    251c:	add	r0, r7, r0
    2520:	ldr	r2, [r0]
    2524:	ldr	r0, [r0, #4]
    2528:	asr	r1, r0, #3
    252c:	lsr	r2, r2, #3
    2530:	orr	r0, r2, r0, lsl #29
    2534:	add	r2, sp, #88	; 0x58
    2538:	bl	0 <coda_str64>
    253c:	movw	r0, #65236	; 0xfed4
    2540:	movt	r0, #65535	; 0xffff
    2544:	ldr	r1, [pc, #416]	; 26ec <coda_bin_cursor_read_uint32+0x31c>
    2548:	add	r2, sp, #64	; 0x40
    254c:	add	r3, sp, #88	; 0x58
    2550:	ldr	ip, [r7, #4]
    2554:	lsl	ip, ip, #4
    2558:	add	ip, r7, ip
    255c:	ldr	ip, [ip]
    2560:	and	ip, ip, #7
    2564:	str	ip, [sp]
    2568:	bl	0 <coda_set_error>
    256c:	mvn	r0, #0
    2570:	b	26c8 <coda_bin_cursor_read_uint32+0x2f8>
    2574:	mov	r2, r8
    2578:	mov	r1, #0
    257c:	and	r3, r2, #7
    2580:	orr	r3, r1, r3
    2584:	cmp	r3, #0
    2588:	bne	25ac <coda_bin_cursor_read_uint32+0x1dc>
    258c:	ldr	ip, [sp, #56]	; 0x38
    2590:	ldr	r3, [sp, #60]	; 0x3c
    2594:	eor	ip, ip, #32
    2598:	orr	r0, r3, ip
    259c:	cmp	r0, #0
    25a0:	movne	r3, #1
    25a4:	moveq	r3, #0
    25a8:	b	25b0 <coda_bin_cursor_read_uint32+0x1e0>
    25ac:	mov	r3, #1
    25b0:	cmp	r3, #0
    25b4:	beq	264c <coda_bin_cursor_read_uint32+0x27c>
    25b8:	mov	r3, r4
    25bc:	cmp	r5, #0
    25c0:	bne	2610 <coda_bin_cursor_read_uint32+0x240>
    25c4:	mov	r3, #0
    25c8:	mov	r1, #4
    25cc:	ldr	r2, [sp, #56]	; 0x38
    25d0:	ldr	r0, [sp, #60]	; 0x3c
    25d4:	asr	ip, r0, #3
    25d8:	lsr	r2, r2, #3
    25dc:	orr	r0, r2, r0, lsl #29
    25e0:	ldr	r2, [sp, #56]	; 0x38
    25e4:	and	r2, r2, #7
    25e8:	cmp	r2, #0
    25ec:	movne	r2, #1
    25f0:	moveq	r2, #0
    25f4:	asr	r9, r2, #31
    25f8:	adds	r0, r0, r2
    25fc:	adc	ip, ip, r9
    2600:	subs	lr, r1, r0
    2604:	sbc	r1, r3, ip
    2608:	mov	ip, lr
    260c:	add	r3, r4, ip
    2610:	mov	r2, #0
    2614:	str	r2, [r4]
    2618:	ldr	r0, [r7]
    261c:	ldr	r2, [sp, #56]	; 0x38
    2620:	ldr	r1, [sp, #60]	; 0x3c
    2624:	str	r3, [sp, #8]
    2628:	str	r1, [sp, #4]
    262c:	str	r2, [sp]
    2630:	mov	r3, r6
    2634:	mov	r2, r8
    2638:	bl	224 <read_bits>
    263c:	cmp	r0, #0
    2640:	beq	2684 <coda_bin_cursor_read_uint32+0x2b4>
    2644:	mvn	r0, #0
    2648:	b	26c8 <coda_bin_cursor_read_uint32+0x2f8>
    264c:	ldr	r0, [r7]
    2650:	asr	r3, r6, #3
    2654:	lsr	ip, r8, #3
    2658:	orr	r2, ip, r6, lsl #29
    265c:	mov	r1, #0
    2660:	mov	ip, #4
    2664:	str	r4, [sp, #8]
    2668:	str	r1, [sp, #4]
    266c:	str	ip, [sp]
    2670:	bl	0 <read_bytes>
    2674:	cmp	r0, #0
    2678:	beq	2684 <coda_bin_cursor_read_uint32+0x2b4>
    267c:	mvn	r0, #0
    2680:	b	26c8 <coda_bin_cursor_read_uint32+0x2f8>
    2684:	cmp	r5, #0
    2688:	bne	26c4 <coda_bin_cursor_read_uint32+0x2f4>
    268c:	ldrb	r0, [r4, #3]
    2690:	and	r0, r0, #255	; 0xff
    2694:	strb	r0, [sp, #48]	; 0x30
    2698:	ldrb	r2, [r4, #2]
    269c:	and	ip, r2, #255	; 0xff
    26a0:	strb	ip, [sp, #49]	; 0x31
    26a4:	ldrb	r2, [r4, #1]
    26a8:	and	ip, r2, #255	; 0xff
    26ac:	strb	ip, [sp, #50]	; 0x32
    26b0:	ldrb	r0, [r4]
    26b4:	and	r0, r0, #255	; 0xff
    26b8:	strb	r0, [sp, #51]	; 0x33
    26bc:	ldr	r0, [sp, #48]	; 0x30
    26c0:	str	r0, [r4]
    26c4:	mov	r0, #0
    26c8:	ldr	r4, [sp, #24]
    26cc:	ldr	r5, [sp, #28]
    26d0:	ldr	r6, [sp, #32]
    26d4:	ldr	r7, [sp, #36]	; 0x24
    26d8:	ldr	r8, [sp, #40]	; 0x28
    26dc:	ldr	r9, [sp, #44]	; 0x2c
    26e0:	ldr	lr, [sp, #16]
    26e4:	add	sp, sp, #112	; 0x70
    26e8:	bx	lr
    26ec:	.word	0x000000fc

000026f0 <coda_bin_cursor_read_int64>:
    26f0:	mov	ip, sp
    26f4:	sub	sp, sp, #112	; 0x70
    26f8:	str	ip, [sp, #12]
    26fc:	str	lr, [sp, #16]
    2700:	str	r4, [sp, #24]
    2704:	str	r5, [sp, #28]
    2708:	str	r6, [sp, #32]
    270c:	str	r7, [sp, #36]	; 0x24
    2710:	str	r8, [sp, #40]	; 0x28
    2714:	str	r9, [sp, #44]	; 0x2c
    2718:	mov	r6, r1
    271c:	mov	r8, r0
    2720:	ldr	r0, [r8, #4]
    2724:	lsl	ip, r0, #4
    2728:	add	ip, r8, ip
    272c:	sub	lr, ip, #4096	; 0x1000
    2730:	ldr	r3, [lr, #4088]	; 0xff8
    2734:	ldr	r3, [r3]
    2738:	cmp	r3, #100	; 0x64
    273c:	blt	275c <coda_bin_cursor_read_int64+0x6c>
    2740:	ldr	r0, [r8, #4]
    2744:	lsl	ip, r0, #4
    2748:	add	ip, r8, ip
    274c:	sub	lr, ip, #4096	; 0x1000
    2750:	ldr	r0, [lr, #4088]	; 0xff8
    2754:	ldr	r1, [r0, #4]
    2758:	b	2770 <coda_bin_cursor_read_int64+0x80>
    275c:	ldr	r0, [r8, #4]
    2760:	lsl	ip, r0, #4
    2764:	add	r1, r8, ip
    2768:	sub	lr, r1, #4096	; 0x1000
    276c:	ldr	r1, [lr, #4088]	; 0xff8
    2770:	ldr	r3, [r1, #24]
    2774:	ldr	r2, [r1, #28]
    2778:	str	r3, [sp, #48]	; 0x30
    277c:	str	r2, [sp, #52]	; 0x34
    2780:	ldr	r0, [r8, #4]
    2784:	lsl	r0, r0, #4
    2788:	add	r3, r8, r0
    278c:	ldr	r4, [r3]
    2790:	ldr	r5, [r3, #4]
    2794:	ldr	r7, [r1, #44]	; 0x2c
    2798:	ldr	r1, [sp, #48]	; 0x30
    279c:	ldr	r2, [sp, #52]	; 0x34
    27a0:	mvn	r2, r2
    27a4:	mvn	ip, r1
    27a8:	orr	r1, r2, ip
    27ac:	cmp	r1, #0
    27b0:	bne	2894 <coda_bin_cursor_read_int64+0x1a4>
    27b4:	add	r1, sp, #48	; 0x30
    27b8:	mov	r0, r8
    27bc:	bl	1014 <coda_bin_cursor_get_bit_size>
    27c0:	cmp	r0, #0
    27c4:	beq	27d0 <coda_bin_cursor_read_int64+0xe0>
    27c8:	mvn	r0, #0
    27cc:	b	2ac4 <coda_bin_cursor_read_int64+0x3d4>
    27d0:	ldr	ip, [sp, #52]	; 0x34
    27d4:	cmp	ip, #0
    27d8:	blt	2818 <coda_bin_cursor_read_int64+0x128>
    27dc:	ldr	r3, [sp, #48]	; 0x30
    27e0:	ldr	r2, [sp, #52]	; 0x34
    27e4:	mov	ip, #0
    27e8:	cmp	r2, ip
    27ec:	bne	2804 <coda_bin_cursor_read_int64+0x114>
    27f0:	mov	ip, #64	; 0x40
    27f4:	cmp	r3, ip
    27f8:	movhi	r1, #1
    27fc:	movls	r1, #0
    2800:	b	281c <coda_bin_cursor_read_int64+0x12c>
    2804:	mov	ip, #0
    2808:	cmp	r2, ip
    280c:	movgt	r1, #1
    2810:	movle	r1, #0
    2814:	b	281c <coda_bin_cursor_read_int64+0x12c>
    2818:	mov	r1, #1
    281c:	cmp	r1, #0
    2820:	beq	2894 <coda_bin_cursor_read_int64+0x1a4>
    2824:	ldr	r0, [sp, #48]	; 0x30
    2828:	ldr	r1, [sp, #52]	; 0x34
    282c:	add	r2, sp, #64	; 0x40
    2830:	bl	0 <coda_str64>
    2834:	ldr	r0, [r8, #4]
    2838:	lsl	r3, r0, #4
    283c:	add	r2, r8, r3
    2840:	ldr	ip, [r2]
    2844:	ldr	r3, [r2, #4]
    2848:	asr	r1, r3, #3
    284c:	lsr	ip, ip, #3
    2850:	orr	r0, ip, r3, lsl #29
    2854:	add	r2, sp, #88	; 0x58
    2858:	bl	0 <coda_str64>
    285c:	movw	r0, #65236	; 0xfed4
    2860:	movt	r0, #65535	; 0xffff
    2864:	ldr	r1, [pc, #636]	; 2ae8 <coda_bin_cursor_read_int64+0x3f8>
    2868:	add	r2, sp, #64	; 0x40
    286c:	add	r3, sp, #88	; 0x58
    2870:	ldr	ip, [r8, #4]
    2874:	lsl	ip, ip, #4
    2878:	add	ip, r8, ip
    287c:	ldr	ip, [ip]
    2880:	and	ip, ip, #7
    2884:	str	ip, [sp]
    2888:	bl	0 <coda_set_error>
    288c:	mvn	r0, #0
    2890:	b	2ac4 <coda_bin_cursor_read_int64+0x3d4>
    2894:	mov	r0, r4
    2898:	mov	r1, #0
    289c:	and	r3, r0, #7
    28a0:	orr	r1, r1, r3
    28a4:	cmp	r1, #0
    28a8:	bne	28cc <coda_bin_cursor_read_int64+0x1dc>
    28ac:	ldr	r3, [sp, #48]	; 0x30
    28b0:	ldr	r0, [sp, #52]	; 0x34
    28b4:	eor	ip, r3, #64	; 0x40
    28b8:	orr	r0, r0, ip
    28bc:	cmp	r0, #0
    28c0:	movne	ip, #1
    28c4:	moveq	ip, #0
    28c8:	b	28d0 <coda_bin_cursor_read_int64+0x1e0>
    28cc:	mov	ip, #1
    28d0:	cmp	ip, #0
    28d4:	beq	2970 <coda_bin_cursor_read_int64+0x280>
    28d8:	mov	r3, r6
    28dc:	cmp	r7, #0
    28e0:	bne	292c <coda_bin_cursor_read_int64+0x23c>
    28e4:	mov	r0, #0
    28e8:	mov	r1, #8
    28ec:	ldr	r3, [sp, #48]	; 0x30
    28f0:	ldr	r2, [sp, #52]	; 0x34
    28f4:	asr	ip, r2, #3
    28f8:	lsr	r3, r3, #3
    28fc:	orr	r2, r3, r2, lsl #29
    2900:	ldr	r3, [sp, #48]	; 0x30
    2904:	and	r3, r3, #7
    2908:	cmp	r3, #0
    290c:	movne	r3, #1
    2910:	moveq	r3, #0
    2914:	asr	r9, r3, #31
    2918:	adds	r2, r2, r3
    291c:	adc	r3, ip, r9
    2920:	subs	ip, r1, r2
    2924:	sbc	r1, r0, r3
    2928:	add	r3, r6, ip
    292c:	mov	r2, #0
    2930:	mov	r1, #0
    2934:	str	r1, [r6]
    2938:	str	r2, [r6, #4]
    293c:	ldr	r0, [r8]
    2940:	ldr	r2, [sp, #48]	; 0x30
    2944:	ldr	r1, [sp, #52]	; 0x34
    2948:	str	r3, [sp, #8]
    294c:	str	r1, [sp, #4]
    2950:	str	r2, [sp]
    2954:	mov	r3, r5
    2958:	mov	r2, r4
    295c:	bl	224 <read_bits>
    2960:	cmp	r0, #0
    2964:	beq	29a8 <coda_bin_cursor_read_int64+0x2b8>
    2968:	mvn	r0, #0
    296c:	b	2ac4 <coda_bin_cursor_read_int64+0x3d4>
    2970:	ldr	r0, [r8]
    2974:	asr	r3, r5, #3
    2978:	lsr	ip, r4, #3
    297c:	orr	r2, ip, r5, lsl #29
    2980:	mov	ip, #0
    2984:	mov	r1, #8
    2988:	str	r6, [sp, #8]
    298c:	str	ip, [sp, #4]
    2990:	str	r1, [sp]
    2994:	bl	0 <read_bytes>
    2998:	cmp	r0, #0
    299c:	beq	29a8 <coda_bin_cursor_read_int64+0x2b8>
    29a0:	mvn	r0, #0
    29a4:	b	2ac4 <coda_bin_cursor_read_int64+0x3d4>
    29a8:	cmp	r7, #0
    29ac:	bne	2a20 <coda_bin_cursor_read_int64+0x330>
    29b0:	ldrb	r2, [r6, #7]
    29b4:	and	r1, r2, #255	; 0xff
    29b8:	strb	r1, [sp, #56]	; 0x38
    29bc:	ldrb	r2, [r6, #6]
    29c0:	and	r3, r2, #255	; 0xff
    29c4:	strb	r3, [sp, #57]	; 0x39
    29c8:	ldrb	r3, [r6, #5]
    29cc:	and	r2, r3, #255	; 0xff
    29d0:	strb	r2, [sp, #58]	; 0x3a
    29d4:	ldrb	r0, [r6, #4]
    29d8:	and	r3, r0, #255	; 0xff
    29dc:	strb	r3, [sp, #59]	; 0x3b
    29e0:	ldrb	r2, [r6, #3]
    29e4:	and	r0, r2, #255	; 0xff
    29e8:	strb	r0, [sp, #60]	; 0x3c
    29ec:	ldrb	ip, [r6, #2]
    29f0:	and	r2, ip, #255	; 0xff
    29f4:	strb	r2, [sp, #61]	; 0x3d
    29f8:	ldrb	r2, [r6, #1]
    29fc:	and	r1, r2, #255	; 0xff
    2a00:	strb	r1, [sp, #62]	; 0x3e
    2a04:	ldrb	r2, [r6]
    2a08:	and	r0, r2, #255	; 0xff
    2a0c:	strb	r0, [sp, #63]	; 0x3f
    2a10:	ldr	r3, [sp, #56]	; 0x38
    2a14:	ldr	r2, [sp, #60]	; 0x3c
    2a18:	str	r3, [r6]
    2a1c:	str	r2, [r6, #4]
    2a20:	ldr	r3, [sp, #48]	; 0x30
    2a24:	ldr	r2, [sp, #52]	; 0x34
    2a28:	mov	ip, #0
    2a2c:	cmp	r2, ip
    2a30:	bne	2a44 <coda_bin_cursor_read_int64+0x354>
    2a34:	mov	ip, #64	; 0x40
    2a38:	cmp	r3, ip
    2a3c:	bcc	2a50 <coda_bin_cursor_read_int64+0x360>
    2a40:	b	2ac0 <coda_bin_cursor_read_int64+0x3d0>
    2a44:	mov	r0, #0
    2a48:	cmp	r2, r0
    2a4c:	bge	2ac0 <coda_bin_cursor_read_int64+0x3d0>
    2a50:	ldr	r5, [r6]
    2a54:	ldr	r4, [r6, #4]
    2a58:	mov	r8, r4
    2a5c:	mov	r7, r5
    2a60:	mov	r1, #0
    2a64:	mov	r0, #1
    2a68:	ldr	ip, [sp, #48]	; 0x30
    2a6c:	ldr	r9, [sp, #52]	; 0x34
    2a70:	mov	r3, #0
    2a74:	mov	r2, #1
    2a78:	subs	r2, ip, r2
    2a7c:	sbc	r3, r9, r3
    2a80:	bl	0 <__compcert_i64_shl>
    2a84:	and	ip, r8, r1
    2a88:	and	r3, r7, r0
    2a8c:	orr	ip, ip, r3
    2a90:	cmp	ip, #0
    2a94:	beq	2ac0 <coda_bin_cursor_read_int64+0x3d0>
    2a98:	mov	r1, #1
    2a9c:	ldr	r0, [sp, #48]	; 0x30
    2aa0:	lsl	ip, r1, r0
    2aa4:	sub	ip, ip, #1
    2aa8:	mvn	ip, ip
    2aac:	asr	r2, ip, #31
    2ab0:	orr	r2, r4, r2
    2ab4:	orr	r1, r5, ip
    2ab8:	str	r1, [r6]
    2abc:	str	r2, [r6, #4]
    2ac0:	mov	r0, #0
    2ac4:	ldr	r4, [sp, #24]
    2ac8:	ldr	r5, [sp, #28]
    2acc:	ldr	r6, [sp, #32]
    2ad0:	ldr	r7, [sp, #36]	; 0x24
    2ad4:	ldr	r8, [sp, #40]	; 0x28
    2ad8:	ldr	r9, [sp, #44]	; 0x2c
    2adc:	ldr	lr, [sp, #16]
    2ae0:	add	sp, sp, #112	; 0x70
    2ae4:	bx	lr
    2ae8:	.word	0x000003bc

00002aec <coda_bin_cursor_read_uint64>:
    2aec:	mov	ip, sp
    2af0:	sub	sp, sp, #112	; 0x70
    2af4:	str	ip, [sp, #12]
    2af8:	str	lr, [sp, #16]
    2afc:	str	r4, [sp, #24]
    2b00:	str	r5, [sp, #28]
    2b04:	str	r6, [sp, #32]
    2b08:	str	r7, [sp, #36]	; 0x24
    2b0c:	str	r8, [sp, #40]	; 0x28
    2b10:	str	r9, [sp, #44]	; 0x2c
    2b14:	mov	r5, r1
    2b18:	mov	r6, r0
    2b1c:	ldr	ip, [r6, #4]
    2b20:	lsl	r0, ip, #4
    2b24:	add	r2, r6, r0
    2b28:	sub	lr, r2, #4096	; 0x1000
    2b2c:	ldr	r3, [lr, #4088]	; 0xff8
    2b30:	ldr	ip, [r3]
    2b34:	cmp	ip, #100	; 0x64
    2b38:	blt	2b58 <coda_bin_cursor_read_uint64+0x6c>
    2b3c:	ldr	ip, [r6, #4]
    2b40:	lsl	ip, ip, #4
    2b44:	add	r0, r6, ip
    2b48:	sub	lr, r0, #4096	; 0x1000
    2b4c:	ldr	r0, [lr, #4088]	; 0xff8
    2b50:	ldr	r0, [r0, #4]
    2b54:	b	2b6c <coda_bin_cursor_read_uint64+0x80>
    2b58:	ldr	r0, [r6, #4]
    2b5c:	lsl	r1, r0, #4
    2b60:	add	ip, r6, r1
    2b64:	sub	lr, ip, #4096	; 0x1000
    2b68:	ldr	r0, [lr, #4088]	; 0xff8
    2b6c:	ldr	ip, [r0, #24]
    2b70:	ldr	r1, [r0, #28]
    2b74:	str	ip, [sp, #48]	; 0x30
    2b78:	str	r1, [sp, #52]	; 0x34
    2b7c:	ldr	r2, [r6, #4]
    2b80:	lsl	r2, r2, #4
    2b84:	add	r1, r6, r2
    2b88:	ldr	r8, [r1]
    2b8c:	ldr	r7, [r1, #4]
    2b90:	ldr	r4, [r0, #44]	; 0x2c
    2b94:	ldr	r3, [sp, #48]	; 0x30
    2b98:	ldr	r2, [sp, #52]	; 0x34
    2b9c:	mvn	ip, r2
    2ba0:	mvn	r0, r3
    2ba4:	orr	r1, ip, r0
    2ba8:	cmp	r1, #0
    2bac:	bne	2c90 <coda_bin_cursor_read_uint64+0x1a4>
    2bb0:	add	r1, sp, #48	; 0x30
    2bb4:	mov	r0, r6
    2bb8:	bl	1014 <coda_bin_cursor_get_bit_size>
    2bbc:	cmp	r0, #0
    2bc0:	beq	2bcc <coda_bin_cursor_read_uint64+0xe0>
    2bc4:	mvn	r0, #0
    2bc8:	b	2e20 <coda_bin_cursor_read_uint64+0x334>
    2bcc:	ldr	r2, [sp, #52]	; 0x34
    2bd0:	cmp	r2, #0
    2bd4:	blt	2c14 <coda_bin_cursor_read_uint64+0x128>
    2bd8:	ldr	r3, [sp, #48]	; 0x30
    2bdc:	ldr	r1, [sp, #52]	; 0x34
    2be0:	mov	r2, #0
    2be4:	cmp	r1, r2
    2be8:	bne	2c00 <coda_bin_cursor_read_uint64+0x114>
    2bec:	mov	ip, #64	; 0x40
    2bf0:	cmp	r3, ip
    2bf4:	movhi	r3, #1
    2bf8:	movls	r3, #0
    2bfc:	b	2c18 <coda_bin_cursor_read_uint64+0x12c>
    2c00:	mov	r3, #0
    2c04:	cmp	r1, r3
    2c08:	movgt	r3, #1
    2c0c:	movle	r3, #0
    2c10:	b	2c18 <coda_bin_cursor_read_uint64+0x12c>
    2c14:	mov	r3, #1
    2c18:	cmp	r3, #0
    2c1c:	beq	2c90 <coda_bin_cursor_read_uint64+0x1a4>
    2c20:	ldr	r0, [sp, #48]	; 0x30
    2c24:	ldr	r1, [sp, #52]	; 0x34
    2c28:	add	r2, sp, #64	; 0x40
    2c2c:	bl	0 <coda_str64>
    2c30:	ldr	r3, [r6, #4]
    2c34:	lsl	r1, r3, #4
    2c38:	add	r1, r6, r1
    2c3c:	ldr	ip, [r1]
    2c40:	ldr	r0, [r1, #4]
    2c44:	asr	r1, r0, #3
    2c48:	lsr	r2, ip, #3
    2c4c:	orr	r0, r2, r0, lsl #29
    2c50:	add	r2, sp, #88	; 0x58
    2c54:	bl	0 <coda_str64>
    2c58:	movw	r0, #65236	; 0xfed4
    2c5c:	movt	r0, #65535	; 0xffff
    2c60:	ldr	r1, [pc, #476]	; 2e44 <coda_bin_cursor_read_uint64+0x358>
    2c64:	add	r2, sp, #64	; 0x40
    2c68:	add	r3, sp, #88	; 0x58
    2c6c:	ldr	ip, [r6, #4]
    2c70:	lsl	ip, ip, #4
    2c74:	add	ip, r6, ip
    2c78:	ldr	ip, [ip]
    2c7c:	and	ip, ip, #7
    2c80:	str	ip, [sp]
    2c84:	bl	0 <coda_set_error>
    2c88:	mvn	r0, #0
    2c8c:	b	2e20 <coda_bin_cursor_read_uint64+0x334>
    2c90:	mov	r0, #0
    2c94:	mov	r1, r8
    2c98:	and	ip, r1, #7
    2c9c:	orr	ip, r0, ip
    2ca0:	cmp	ip, #0
    2ca4:	bne	2cc8 <coda_bin_cursor_read_uint64+0x1dc>
    2ca8:	ldr	r0, [sp, #48]	; 0x30
    2cac:	ldr	r2, [sp, #52]	; 0x34
    2cb0:	eor	r3, r0, #64	; 0x40
    2cb4:	orr	r1, r2, r3
    2cb8:	cmp	r1, #0
    2cbc:	movne	r3, #1
    2cc0:	moveq	r3, #0
    2cc4:	b	2ccc <coda_bin_cursor_read_uint64+0x1e0>
    2cc8:	mov	r3, #1
    2ccc:	cmp	r3, #0
    2cd0:	beq	2d6c <coda_bin_cursor_read_uint64+0x280>
    2cd4:	mov	r2, r5
    2cd8:	cmp	r4, #0
    2cdc:	bne	2d28 <coda_bin_cursor_read_uint64+0x23c>
    2ce0:	mov	ip, #0
    2ce4:	mov	r3, #8
    2ce8:	ldr	r2, [sp, #48]	; 0x30
    2cec:	ldr	r0, [sp, #52]	; 0x34
    2cf0:	asr	r1, r0, #3
    2cf4:	lsr	r2, r2, #3
    2cf8:	orr	r0, r2, r0, lsl #29
    2cfc:	ldr	r2, [sp, #48]	; 0x30
    2d00:	and	r2, r2, #7
    2d04:	cmp	r2, #0
    2d08:	movne	r2, #1
    2d0c:	moveq	r2, #0
    2d10:	asr	r9, r2, #31
    2d14:	adds	r2, r0, r2
    2d18:	adc	r0, r1, r9
    2d1c:	subs	r1, r3, r2
    2d20:	sbc	ip, ip, r0
    2d24:	add	r2, r5, r1
    2d28:	mov	ip, #0
    2d2c:	mov	r3, #0
    2d30:	str	r3, [r5]
    2d34:	str	ip, [r5, #4]
    2d38:	ldr	r0, [r6]
    2d3c:	ldr	r1, [sp, #48]	; 0x30
    2d40:	ldr	r3, [sp, #52]	; 0x34
    2d44:	str	r2, [sp, #8]
    2d48:	str	r3, [sp, #4]
    2d4c:	str	r1, [sp]
    2d50:	mov	r3, r7
    2d54:	mov	r2, r8
    2d58:	bl	224 <read_bits>
    2d5c:	cmp	r0, #0
    2d60:	beq	2da4 <coda_bin_cursor_read_uint64+0x2b8>
    2d64:	mvn	r0, #0
    2d68:	b	2e20 <coda_bin_cursor_read_uint64+0x334>
    2d6c:	ldr	r0, [r6]
    2d70:	asr	r3, r7, #3
    2d74:	lsr	ip, r8, #3
    2d78:	orr	r2, ip, r7, lsl #29
    2d7c:	mov	r1, #0
    2d80:	mov	ip, #8
    2d84:	str	r5, [sp, #8]
    2d88:	str	r1, [sp, #4]
    2d8c:	str	ip, [sp]
    2d90:	bl	0 <read_bytes>
    2d94:	cmp	r0, #0
    2d98:	beq	2da4 <coda_bin_cursor_read_uint64+0x2b8>
    2d9c:	mvn	r0, #0
    2da0:	b	2e20 <coda_bin_cursor_read_uint64+0x334>
    2da4:	cmp	r4, #0
    2da8:	bne	2e1c <coda_bin_cursor_read_uint64+0x330>
    2dac:	ldrb	r3, [r5, #7]
    2db0:	and	r2, r3, #255	; 0xff
    2db4:	strb	r2, [sp, #56]	; 0x38
    2db8:	ldrb	r0, [r5, #6]
    2dbc:	and	r2, r0, #255	; 0xff
    2dc0:	strb	r2, [sp, #57]	; 0x39
    2dc4:	ldrb	r3, [r5, #5]
    2dc8:	and	r3, r3, #255	; 0xff
    2dcc:	strb	r3, [sp, #58]	; 0x3a
    2dd0:	ldrb	r1, [r5, #4]
    2dd4:	and	r0, r1, #255	; 0xff
    2dd8:	strb	r0, [sp, #59]	; 0x3b
    2ddc:	ldrb	r3, [r5, #3]
    2de0:	and	r0, r3, #255	; 0xff
    2de4:	strb	r0, [sp, #60]	; 0x3c
    2de8:	ldrb	r1, [r5, #2]
    2dec:	and	r2, r1, #255	; 0xff
    2df0:	strb	r2, [sp, #61]	; 0x3d
    2df4:	ldrb	r1, [r5, #1]
    2df8:	and	r0, r1, #255	; 0xff
    2dfc:	strb	r0, [sp, #62]	; 0x3e
    2e00:	ldrb	ip, [r5]
    2e04:	and	ip, ip, #255	; 0xff
    2e08:	strb	ip, [sp, #63]	; 0x3f
    2e0c:	ldr	r3, [sp, #56]	; 0x38
    2e10:	ldr	r2, [sp, #60]	; 0x3c
    2e14:	str	r3, [r5]
    2e18:	str	r2, [r5, #4]
    2e1c:	mov	r0, #0
    2e20:	ldr	r4, [sp, #24]
    2e24:	ldr	r5, [sp, #28]
    2e28:	ldr	r6, [sp, #32]
    2e2c:	ldr	r7, [sp, #36]	; 0x24
    2e30:	ldr	r8, [sp, #40]	; 0x28
    2e34:	ldr	r9, [sp, #44]	; 0x2c
    2e38:	ldr	lr, [sp, #16]
    2e3c:	add	sp, sp, #112	; 0x70
    2e40:	bx	lr
    2e44:	.word	0x0000022b

00002e48 <coda_bin_cursor_read_float>:
    2e48:	mov	ip, sp
    2e4c:	sub	sp, sp, #40	; 0x28
    2e50:	str	ip, [sp, #12]
    2e54:	str	lr, [sp, #16]
    2e58:	str	r4, [sp, #24]
    2e5c:	str	r5, [sp, #28]
    2e60:	mov	r5, r1
    2e64:	ldr	r1, [r0, #4]
    2e68:	lsl	r1, r1, #4
    2e6c:	add	r1, r0, r1
    2e70:	sub	lr, r1, #4096	; 0x1000
    2e74:	ldr	r1, [lr, #4088]	; 0xff8
    2e78:	ldr	r2, [r1]
    2e7c:	cmp	r2, #100	; 0x64
    2e80:	blt	2ea0 <coda_bin_cursor_read_float+0x58>
    2e84:	ldr	ip, [r0, #4]
    2e88:	lsl	ip, ip, #4
    2e8c:	add	r1, r0, ip
    2e90:	sub	lr, r1, #4096	; 0x1000
    2e94:	ldr	ip, [lr, #4088]	; 0xff8
    2e98:	ldr	r3, [ip, #4]
    2e9c:	b	2eb4 <coda_bin_cursor_read_float+0x6c>
    2ea0:	ldr	r2, [r0, #4]
    2ea4:	lsl	r3, r2, #4
    2ea8:	add	r1, r0, r3
    2eac:	sub	lr, r1, #4096	; 0x1000
    2eb0:	ldr	r3, [lr, #4088]	; 0xff8
    2eb4:	ldr	r2, [r0, #4]
    2eb8:	lsl	r1, r2, #4
    2ebc:	add	ip, r0, r1
    2ec0:	ldr	r2, [ip]
    2ec4:	ldr	r1, [ip, #4]
    2ec8:	ldr	r4, [r3, #44]	; 0x2c
    2ecc:	mov	ip, #0
    2ed0:	mov	r3, r2
    2ed4:	and	r3, r3, #7
    2ed8:	orr	ip, ip, r3
    2edc:	cmp	ip, #0
    2ee0:	bne	2f1c <coda_bin_cursor_read_float+0xd4>
    2ee4:	ldr	r0, [r0]
    2ee8:	asr	r3, r1, #3
    2eec:	lsr	r2, r2, #3
    2ef0:	orr	r2, r2, r1, lsl #29
    2ef4:	mov	r1, #0
    2ef8:	mov	ip, #4
    2efc:	str	r5, [sp, #8]
    2f00:	str	r1, [sp, #4]
    2f04:	str	ip, [sp]
    2f08:	bl	0 <read_bytes>
    2f0c:	cmp	r0, #0
    2f10:	beq	2f4c <coda_bin_cursor_read_float+0x104>
    2f14:	mvn	r0, #0
    2f18:	b	2f90 <coda_bin_cursor_read_float+0x148>
    2f1c:	ldr	r0, [r0]
    2f20:	mov	ip, #0
    2f24:	mov	r3, #32
    2f28:	str	r5, [sp, #8]
    2f2c:	str	ip, [sp, #4]
    2f30:	str	r3, [sp]
    2f34:	mov	r3, r1
    2f38:	bl	224 <read_bits>
    2f3c:	cmp	r0, #0
    2f40:	beq	2f4c <coda_bin_cursor_read_float+0x104>
    2f44:	mvn	r0, #0
    2f48:	b	2f90 <coda_bin_cursor_read_float+0x148>
    2f4c:	cmp	r4, #0
    2f50:	bne	2f8c <coda_bin_cursor_read_float+0x144>
    2f54:	ldrb	r0, [r5, #3]
    2f58:	and	ip, r0, #255	; 0xff
    2f5c:	strb	ip, [sp, #32]
    2f60:	ldrb	r3, [r5, #2]
    2f64:	and	ip, r3, #255	; 0xff
    2f68:	strb	ip, [sp, #33]	; 0x21
    2f6c:	ldrb	r1, [r5, #1]
    2f70:	and	r3, r1, #255	; 0xff
    2f74:	strb	r3, [sp, #34]	; 0x22
    2f78:	ldrb	r3, [r5]
    2f7c:	and	r2, r3, #255	; 0xff
    2f80:	strb	r2, [sp, #35]	; 0x23
    2f84:	vldr	s4, [sp, #32]
    2f88:	vstr	s4, [r5]
    2f8c:	mov	r0, #0
    2f90:	ldr	r4, [sp, #24]
    2f94:	ldr	r5, [sp, #28]
    2f98:	ldr	lr, [sp, #16]
    2f9c:	add	sp, sp, #40	; 0x28
    2fa0:	bx	lr

00002fa4 <read_double>:
    2fa4:	mov	ip, sp
    2fa8:	sub	sp, sp, #40	; 0x28
    2fac:	str	ip, [sp, #12]
    2fb0:	str	lr, [sp, #16]
    2fb4:	str	r4, [sp, #24]
    2fb8:	str	r5, [sp, #28]
    2fbc:	mov	r4, r1
    2fc0:	ldr	r2, [r0, #4]
    2fc4:	lsl	r1, r2, #4
    2fc8:	add	r1, r0, r1
    2fcc:	sub	lr, r1, #4096	; 0x1000
    2fd0:	ldr	r3, [lr, #4088]	; 0xff8
    2fd4:	ldr	ip, [r3]
    2fd8:	cmp	ip, #100	; 0x64
    2fdc:	blt	2ffc <read_double+0x58>
    2fe0:	ldr	ip, [r0, #4]
    2fe4:	lsl	r2, ip, #4
    2fe8:	add	ip, r0, r2
    2fec:	sub	lr, ip, #4096	; 0x1000
    2ff0:	ldr	r3, [lr, #4088]	; 0xff8
    2ff4:	ldr	r3, [r3, #4]
    2ff8:	b	3010 <read_double+0x6c>
    2ffc:	ldr	ip, [r0, #4]
    3000:	lsl	r1, ip, #4
    3004:	add	r1, r0, r1
    3008:	sub	lr, r1, #4096	; 0x1000
    300c:	ldr	r3, [lr, #4088]	; 0xff8
    3010:	ldr	ip, [r0, #4]
    3014:	lsl	r2, ip, #4
    3018:	add	r1, r0, r2
    301c:	ldr	r2, [r1]
    3020:	ldr	r1, [r1, #4]
    3024:	ldr	r5, [r3, #44]	; 0x2c
    3028:	mov	ip, #0
    302c:	mov	r3, r2
    3030:	and	r3, r3, #7
    3034:	orr	r3, ip, r3
    3038:	cmp	r3, #0
    303c:	bne	3078 <read_double+0xd4>
    3040:	ldr	r0, [r0]
    3044:	asr	r3, r1, #3
    3048:	lsr	r2, r2, #3
    304c:	orr	r2, r2, r1, lsl #29
    3050:	mov	ip, #0
    3054:	mov	r1, #8
    3058:	str	r4, [sp, #8]
    305c:	str	ip, [sp, #4]
    3060:	str	r1, [sp]
    3064:	bl	0 <read_bytes>
    3068:	cmp	r0, #0
    306c:	beq	30a8 <read_double+0x104>
    3070:	mvn	r0, #0
    3074:	b	311c <read_double+0x178>
    3078:	ldr	r0, [r0]
    307c:	mov	ip, #0
    3080:	mov	r3, #64	; 0x40
    3084:	str	r4, [sp, #8]
    3088:	str	ip, [sp, #4]
    308c:	str	r3, [sp]
    3090:	mov	r3, r1
    3094:	bl	224 <read_bits>
    3098:	cmp	r0, #0
    309c:	beq	30a8 <read_double+0x104>
    30a0:	mvn	r0, #0
    30a4:	b	311c <read_double+0x178>
    30a8:	cmp	r5, #0
    30ac:	bne	3118 <read_double+0x174>
    30b0:	ldrb	ip, [r4, #7]
    30b4:	and	r3, ip, #255	; 0xff
    30b8:	strb	r3, [sp, #32]
    30bc:	ldrb	r0, [r4, #6]
    30c0:	and	r2, r0, #255	; 0xff
    30c4:	strb	r2, [sp, #33]	; 0x21
    30c8:	ldrb	r3, [r4, #5]
    30cc:	and	ip, r3, #255	; 0xff
    30d0:	strb	ip, [sp, #34]	; 0x22
    30d4:	ldrb	r3, [r4, #4]
    30d8:	and	r2, r3, #255	; 0xff
    30dc:	strb	r2, [sp, #35]	; 0x23
    30e0:	ldrb	r1, [r4, #3]
    30e4:	and	r0, r1, #255	; 0xff
    30e8:	strb	r0, [sp, #36]	; 0x24
    30ec:	ldrb	r1, [r4, #2]
    30f0:	and	r1, r1, #255	; 0xff
    30f4:	strb	r1, [sp, #37]	; 0x25
    30f8:	ldrb	r2, [r4, #1]
    30fc:	and	r0, r2, #255	; 0xff
    3100:	strb	r0, [sp, #38]	; 0x26
    3104:	ldrb	r2, [r4]
    3108:	and	r1, r2, #255	; 0xff
    310c:	strb	r1, [sp, #39]	; 0x27
    3110:	vldr	d1, [sp, #32]
    3114:	vstr	d1, [r4]
    3118:	mov	r0, #0
    311c:	ldr	r4, [sp, #24]
    3120:	ldr	r5, [sp, #28]
    3124:	ldr	lr, [sp, #16]
    3128:	add	sp, sp, #40	; 0x28
    312c:	bx	lr

00003130 <coda_bin_cursor_read_double>:
    3130:	mov	ip, sp
    3134:	sub	sp, sp, #8
    3138:	str	ip, [sp]
    313c:	str	lr, [sp, #4]
    3140:	bl	2fa4 <read_double>
    3144:	ldr	lr, [sp, #4]
    3148:	add	sp, sp, #8
    314c:	bx	lr

00003150 <coda_bin_cursor_read_char>:
    3150:	mov	ip, sp
    3154:	sub	sp, sp, #8
    3158:	str	ip, [sp]
    315c:	str	lr, [sp, #4]
    3160:	bl	1694 <coda_bin_cursor_read_uint8>
    3164:	ldr	lr, [sp, #4]
    3168:	add	sp, sp, #8
    316c:	bx	lr

00003170 <coda_bin_cursor_read_string>:
    3170:	mov	ip, sp
    3174:	sub	sp, sp, #104	; 0x68
    3178:	str	ip, [sp, #12]
    317c:	str	lr, [sp, #16]
    3180:	str	r4, [sp, #24]
    3184:	str	r5, [sp, #28]
    3188:	str	r6, [sp, #32]
    318c:	str	r7, [sp, #36]	; 0x24
    3190:	str	r8, [sp, #40]	; 0x28
    3194:	str	r9, [sp, #44]	; 0x2c
    3198:	mov	r5, r2
    319c:	mov	r7, r1
    31a0:	mov	r6, r0
    31a4:	ldr	r2, [r6, #4]
    31a8:	lsl	r1, r2, #4
    31ac:	add	r0, r6, r1
    31b0:	sub	lr, r0, #4096	; 0x1000
    31b4:	ldr	ip, [lr, #4088]	; 0xff8
    31b8:	ldr	r2, [ip]
    31bc:	cmp	r2, #100	; 0x64
    31c0:	blt	31e0 <coda_bin_cursor_read_string+0x70>
    31c4:	ldr	r2, [r6, #4]
    31c8:	lsl	r2, r2, #4
    31cc:	add	r1, r6, r2
    31d0:	sub	lr, r1, #4096	; 0x1000
    31d4:	ldr	ip, [lr, #4088]	; 0xff8
    31d8:	ldr	ip, [ip, #4]
    31dc:	b	31f4 <coda_bin_cursor_read_string+0x84>
    31e0:	ldr	r0, [r6, #4]
    31e4:	lsl	r1, r0, #4
    31e8:	add	ip, r6, r1
    31ec:	sub	lr, ip, #4096	; 0x1000
    31f0:	ldr	ip, [lr, #4088]	; 0xff8
    31f4:	ldr	r1, [r6, #4]
    31f8:	lsl	r3, r1, #4
    31fc:	add	r3, r6, r3
    3200:	ldr	r4, [r3]
    3204:	ldr	r8, [r3, #4]
    3208:	ldr	r3, [ip, #28]
    320c:	cmp	r3, #0
    3210:	bge	32f4 <coda_bin_cursor_read_string+0x184>
    3214:	add	r1, sp, #48	; 0x30
    3218:	mov	r0, r6
    321c:	bl	1014 <coda_bin_cursor_get_bit_size>
    3220:	cmp	r0, #0
    3224:	beq	3230 <coda_bin_cursor_read_string+0xc0>
    3228:	mvn	r0, #0
    322c:	b	33cc <coda_bin_cursor_read_string+0x25c>
    3230:	ldr	ip, [sp, #52]	; 0x34
    3234:	cmp	ip, #0
    3238:	bge	32ac <coda_bin_cursor_read_string+0x13c>
    323c:	ldr	r0, [sp, #48]	; 0x30
    3240:	ldr	r1, [sp, #52]	; 0x34
    3244:	add	r2, sp, #80	; 0x50
    3248:	bl	0 <coda_str64>
    324c:	ldr	ip, [r6, #4]
    3250:	lsl	ip, ip, #4
    3254:	add	ip, r6, ip
    3258:	ldr	r3, [ip]
    325c:	ldr	r2, [ip, #4]
    3260:	asr	r1, r2, #3
    3264:	lsr	ip, r3, #3
    3268:	orr	r0, ip, r2, lsl #29
    326c:	add	r2, sp, #56	; 0x38
    3270:	bl	0 <coda_str64>
    3274:	movw	r0, #65236	; 0xfed4
    3278:	movt	r0, #65535	; 0xffff
    327c:	ldr	r1, [pc, #368]	; 33f4 <coda_bin_cursor_read_string+0x284>
    3280:	add	r2, sp, #80	; 0x50
    3284:	add	r3, sp, #56	; 0x38
    3288:	ldr	ip, [r6, #4]
    328c:	lsl	ip, ip, #4
    3290:	add	ip, r6, ip
    3294:	ldr	ip, [ip]
    3298:	and	ip, ip, #7
    329c:	str	ip, [sp]
    32a0:	bl	0 <coda_set_error>
    32a4:	mvn	r0, #0
    32a8:	b	33cc <coda_bin_cursor_read_string+0x25c>
    32ac:	ldr	r1, [sp, #48]	; 0x30
    32b0:	mov	r0, #0
    32b4:	and	r1, r1, #7
    32b8:	orr	r2, r0, r1
    32bc:	cmp	r2, #0
    32c0:	beq	32dc <coda_bin_cursor_read_string+0x16c>
    32c4:	movw	r0, #65236	; 0xfed4
    32c8:	movt	r0, #65535	; 0xffff
    32cc:	ldr	r1, [pc, #284]	; 33f0 <coda_bin_cursor_read_string+0x280>
    32d0:	bl	0 <coda_set_error>
    32d4:	mvn	r0, #0
    32d8:	b	33cc <coda_bin_cursor_read_string+0x25c>
    32dc:	ldr	r2, [sp, #48]	; 0x30
    32e0:	ldr	r1, [sp, #52]	; 0x34
    32e4:	asr	r3, r1, #3
    32e8:	lsr	r2, r2, #3
    32ec:	orr	r9, r2, r1, lsl #29
    32f0:	b	3308 <coda_bin_cursor_read_string+0x198>
    32f4:	ldr	r1, [ip, #24]
    32f8:	ldr	ip, [ip, #28]
    32fc:	asr	r3, ip, #3
    3300:	lsr	r1, r1, #3
    3304:	orr	r9, r1, ip, lsl #29
    3308:	mov	r2, #0
    330c:	mov	r1, #1
    3310:	adds	ip, r9, r1
    3314:	adc	r0, r3, r2
    3318:	mov	r2, r5
    331c:	asr	r1, r2, #31
    3320:	cmp	r0, r1
    3324:	bne	3334 <coda_bin_cursor_read_string+0x1c4>
    3328:	cmp	ip, r2
    332c:	bhi	333c <coda_bin_cursor_read_string+0x1cc>
    3330:	b	3344 <coda_bin_cursor_read_string+0x1d4>
    3334:	cmp	r0, r1
    3338:	ble	3344 <coda_bin_cursor_read_string+0x1d4>
    333c:	sub	r9, r5, #1
    3340:	asr	r3, r9, #31
    3344:	mov	ip, r3
    3348:	mov	r2, #0
    334c:	cmp	ip, r2
    3350:	bne	3368 <coda_bin_cursor_read_string+0x1f8>
    3354:	mov	r0, r9
    3358:	mov	ip, #0
    335c:	cmp	r0, ip
    3360:	bhi	3378 <coda_bin_cursor_read_string+0x208>
    3364:	b	33c0 <coda_bin_cursor_read_string+0x250>
    3368:	mov	ip, r3
    336c:	mov	r0, #0
    3370:	cmp	ip, r0
    3374:	ble	33c0 <coda_bin_cursor_read_string+0x250>
    3378:	ldr	r0, [r6]
    337c:	mov	ip, r9
    3380:	lsl	r1, r3, #3
    3384:	orr	r1, r1, ip, lsr #29
    3388:	lsl	ip, ip, #3
    338c:	str	r7, [sp, #8]
    3390:	str	r1, [sp, #4]
    3394:	str	ip, [sp]
    3398:	mov	r3, r8
    339c:	mov	r2, r4
    33a0:	bl	224 <read_bits>
    33a4:	cmp	r0, #0
    33a8:	beq	33b4 <coda_bin_cursor_read_string+0x244>
    33ac:	mvn	r0, #0
    33b0:	b	33cc <coda_bin_cursor_read_string+0x25c>
    33b4:	mov	r2, #0
    33b8:	strb	r2, [r7, r9]
    33bc:	b	33c8 <coda_bin_cursor_read_string+0x258>
    33c0:	mov	r2, #0
    33c4:	strb	r2, [r7]
    33c8:	mov	r0, #0
    33cc:	ldr	r4, [sp, #24]
    33d0:	ldr	r5, [sp, #28]
    33d4:	ldr	r6, [sp, #32]
    33d8:	ldr	r7, [sp, #36]	; 0x24
    33dc:	ldr	r8, [sp, #40]	; 0x28
    33e0:	ldr	r9, [sp, #44]	; 0x2c
    33e4:	ldr	lr, [sp, #16]
    33e8:	add	sp, sp, #104	; 0x68
    33ec:	bx	lr
    33f0:	.word	0x00000341
    33f4:	.word	0x00000168

000033f8 <coda_bin_cursor_read_bits>:
    33f8:	mov	ip, sp
    33fc:	sub	sp, sp, #40	; 0x28
    3400:	str	ip, [sp, #12]
    3404:	str	lr, [sp, #16]
    3408:	str	r4, [sp, #24]
    340c:	str	r5, [sp, #28]
    3410:	str	r6, [sp, #32]
    3414:	ldr	r6, [ip, #4]
    3418:	ldr	r5, [ip]
    341c:	mov	r4, r0
    3420:	ldr	r0, [r4]
    3424:	ldr	ip, [r4, #4]
    3428:	lsl	ip, ip, #4
    342c:	add	ip, r4, ip
    3430:	ldr	r4, [ip]
    3434:	ldr	ip, [ip, #4]
    3438:	adds	r2, r4, r2
    343c:	adc	r3, ip, r3
    3440:	str	r1, [sp, #8]
    3444:	str	r6, [sp, #4]
    3448:	str	r5, [sp]
    344c:	bl	224 <read_bits>
    3450:	ldr	r4, [sp, #24]
    3454:	ldr	r5, [sp, #28]
    3458:	ldr	r6, [sp, #32]
    345c:	ldr	lr, [sp, #16]
    3460:	add	sp, sp, #40	; 0x28
    3464:	bx	lr

00003468 <coda_bin_cursor_read_bytes>:
    3468:	mov	ip, sp
    346c:	sub	sp, sp, #40	; 0x28
    3470:	str	ip, [sp, #12]
    3474:	str	lr, [sp, #16]
    3478:	str	r4, [sp, #24]
    347c:	str	r5, [sp, #28]
    3480:	str	r6, [sp, #32]
    3484:	str	r7, [sp, #36]	; 0x24
    3488:	ldr	r6, [ip, #4]
    348c:	ldr	r5, [ip]
    3490:	mov	r4, r0
    3494:	ldr	ip, [r4, #4]
    3498:	lsl	ip, ip, #4
    349c:	add	ip, r4, ip
    34a0:	ldr	ip, [ip]
    34a4:	mov	r7, #0
    34a8:	and	r0, ip, #7
    34ac:	orr	ip, r7, r0
    34b0:	cmp	ip, #0
    34b4:	beq	34e4 <coda_bin_cursor_read_bytes+0x7c>
    34b8:	lsl	r3, r3, #3
    34bc:	orr	r3, r3, r2, lsr #29
    34c0:	lsl	r2, r2, #3
    34c4:	lsl	ip, r6, #3
    34c8:	orr	r0, ip, r5, lsr #29
    34cc:	lsl	ip, r5, #3
    34d0:	str	r0, [sp, #4]
    34d4:	str	ip, [sp]
    34d8:	mov	r0, r4
    34dc:	bl	33f8 <coda_bin_cursor_read_bits>
    34e0:	b	3520 <coda_bin_cursor_read_bytes+0xb8>
    34e4:	ldr	r0, [r4]
    34e8:	ldr	ip, [r4, #4]
    34ec:	lsl	ip, ip, #4
    34f0:	add	r4, r4, ip
    34f4:	ldr	ip, [r4]
    34f8:	ldr	r7, [r4, #4]
    34fc:	asr	r4, r7, #3
    3500:	lsr	ip, ip, #3
    3504:	orr	ip, ip, r7, lsl #29
    3508:	adds	r2, ip, r2
    350c:	adc	r3, r4, r3
    3510:	str	r1, [sp, #8]
    3514:	str	r6, [sp, #4]
    3518:	str	r5, [sp]
    351c:	bl	0 <read_bytes>
    3520:	ldr	r4, [sp, #24]
    3524:	ldr	r5, [sp, #28]
    3528:	ldr	r6, [sp, #32]
    352c:	ldr	r7, [sp, #36]	; 0x24
    3530:	ldr	lr, [sp, #16]
    3534:	add	sp, sp, #40	; 0x28
    3538:	bx	lr

0000353c <coda_bin_cursor_read_int8_array>:
    353c:	mov	ip, sp
    3540:	sub	sp, sp, #32
    3544:	str	ip, [sp, #4]
    3548:	str	lr, [sp, #8]
    354c:	str	r4, [sp, #16]
    3550:	str	r5, [sp, #20]
    3554:	str	r6, [sp, #24]
    3558:	mov	r6, r2
    355c:	mov	r4, r1
    3560:	mov	r5, r0
    3564:	ldr	r2, [r5, #4]
    3568:	lsl	r0, r2, #4
    356c:	add	ip, r5, r0
    3570:	sub	lr, ip, #4096	; 0x1000
    3574:	ldr	ip, [lr, #4088]	; 0xff8
    3578:	ldr	r2, [ip]
    357c:	cmp	r2, #100	; 0x64
    3580:	blt	35a0 <coda_bin_cursor_read_int8_array+0x64>
    3584:	ldr	r1, [r5, #4]
    3588:	lsl	r3, r1, #4
    358c:	add	r0, r5, r3
    3590:	sub	lr, r0, #4096	; 0x1000
    3594:	ldr	r1, [lr, #4088]	; 0xff8
    3598:	ldr	r0, [r1, #4]
    359c:	b	35b4 <coda_bin_cursor_read_int8_array+0x78>
    35a0:	ldr	r3, [r5, #4]
    35a4:	lsl	r0, r3, #4
    35a8:	add	r1, r5, r0
    35ac:	sub	lr, r1, #4096	; 0x1000
    35b0:	ldr	r0, [lr, #4088]	; 0xff8
    35b4:	ldr	r3, [r0, #40]	; 0x28
    35b8:	ldr	r1, [r3]
    35bc:	cmp	r1, #1
    35c0:	bne	35e0 <coda_bin_cursor_read_int8_array+0xa4>
    35c4:	ldr	r1, [pc, #168]	; 3674 <coda_bin_cursor_read_int8_array+0x138>
    35c8:	mov	r3, #1
    35cc:	str	r6, [sp]
    35d0:	mov	r2, r4
    35d4:	mov	r0, r5
    35d8:	bl	774 <read_array>
    35dc:	b	365c <coda_bin_cursor_read_int8_array+0x120>
    35e0:	ldr	r0, [r0, #40]	; 0x28
    35e4:	ldr	r2, [r0]
    35e8:	cmp	r2, #0
    35ec:	beq	3604 <coda_bin_cursor_read_int8_array+0xc8>
    35f0:	ldr	r0, [pc, #128]	; 3678 <coda_bin_cursor_read_int8_array+0x13c>
    35f4:	ldr	r1, [pc, #132]	; 3680 <coda_bin_cursor_read_int8_array+0x144>
    35f8:	movw	r2, #906	; 0x38a
    35fc:	ldr	r3, [pc, #120]	; 367c <coda_bin_cursor_read_int8_array+0x140>
    3600:	bl	0 <__assert_fail>
    3604:	ldr	r1, [pc, #120]	; 3684 <coda_bin_cursor_read_int8_array+0x148>
    3608:	mov	r3, #1
    360c:	mov	ip, #0
    3610:	str	ip, [sp]
    3614:	mov	r2, r4
    3618:	mov	r0, r5
    361c:	bl	774 <read_array>
    3620:	cmp	r0, #0
    3624:	beq	3630 <coda_bin_cursor_read_int8_array+0xf4>
    3628:	mvn	r0, #0
    362c:	b	365c <coda_bin_cursor_read_int8_array+0x120>
    3630:	cmp	r6, #0
    3634:	beq	3658 <coda_bin_cursor_read_int8_array+0x11c>
    3638:	mov	r2, #1
    363c:	mov	r1, r4
    3640:	mov	r0, r5
    3644:	bl	b48 <transpose_array>
    3648:	cmp	r0, #0
    364c:	beq	3658 <coda_bin_cursor_read_int8_array+0x11c>
    3650:	mvn	r0, #0
    3654:	b	365c <coda_bin_cursor_read_int8_array+0x120>
    3658:	mov	r0, #0
    365c:	ldr	r4, [sp, #16]
    3660:	ldr	r5, [sp, #20]
    3664:	ldr	r6, [sp, #24]
    3668:	ldr	lr, [sp, #8]
    366c:	add	sp, sp, #32
    3670:	bx	lr
    3674:	.word	0x00000000
    3678:	.word	0x000002b5
    367c:	.word	0x00000706
    3680:	.word	0x000001cc
    3684:	.word	0x00000000

00003688 <coda_bin_cursor_read_uint8_array>:
    3688:	mov	ip, sp
    368c:	sub	sp, sp, #32
    3690:	str	ip, [sp, #4]
    3694:	str	lr, [sp, #8]
    3698:	str	r4, [sp, #16]
    369c:	str	r5, [sp, #20]
    36a0:	str	r6, [sp, #24]
    36a4:	mov	r6, r2
    36a8:	mov	r4, r1
    36ac:	mov	r5, r0
    36b0:	ldr	r2, [r5, #4]
    36b4:	lsl	r0, r2, #4
    36b8:	add	ip, r5, r0
    36bc:	sub	lr, ip, #4096	; 0x1000
    36c0:	ldr	ip, [lr, #4088]	; 0xff8
    36c4:	ldr	r2, [ip]
    36c8:	cmp	r2, #100	; 0x64
    36cc:	blt	36ec <coda_bin_cursor_read_uint8_array+0x64>
    36d0:	ldr	r1, [r5, #4]
    36d4:	lsl	r3, r1, #4
    36d8:	add	r0, r5, r3
    36dc:	sub	lr, r0, #4096	; 0x1000
    36e0:	ldr	r1, [lr, #4088]	; 0xff8
    36e4:	ldr	r0, [r1, #4]
    36e8:	b	3700 <coda_bin_cursor_read_uint8_array+0x78>
    36ec:	ldr	r3, [r5, #4]
    36f0:	lsl	r0, r3, #4
    36f4:	add	r1, r5, r0
    36f8:	sub	lr, r1, #4096	; 0x1000
    36fc:	ldr	r0, [lr, #4088]	; 0xff8
    3700:	ldr	r3, [r0, #40]	; 0x28
    3704:	ldr	r1, [r3]
    3708:	cmp	r1, #1
    370c:	bne	372c <coda_bin_cursor_read_uint8_array+0xa4>
    3710:	ldr	r1, [pc, #172]	; 37c4 <coda_bin_cursor_read_uint8_array+0x13c>
    3714:	mov	r3, #1
    3718:	str	r6, [sp]
    371c:	mov	r2, r4
    3720:	mov	r0, r5
    3724:	bl	774 <read_array>
    3728:	b	37a8 <coda_bin_cursor_read_uint8_array+0x120>
    372c:	ldr	r0, [r0, #40]	; 0x28
    3730:	ldr	r2, [r0]
    3734:	cmp	r2, #0
    3738:	beq	3750 <coda_bin_cursor_read_uint8_array+0xc8>
    373c:	ldr	r0, [pc, #124]	; 37c0 <coda_bin_cursor_read_uint8_array+0x138>
    3740:	ldr	r1, [pc, #128]	; 37c8 <coda_bin_cursor_read_uint8_array+0x140>
    3744:	mov	r2, #932	; 0x3a4
    3748:	ldr	r3, [pc, #128]	; 37d0 <coda_bin_cursor_read_uint8_array+0x148>
    374c:	bl	0 <__assert_fail>
    3750:	ldr	r1, [pc, #116]	; 37cc <coda_bin_cursor_read_uint8_array+0x144>
    3754:	mov	r3, #1
    3758:	mov	ip, #0
    375c:	str	ip, [sp]
    3760:	mov	r2, r4
    3764:	mov	r0, r5
    3768:	bl	774 <read_array>
    376c:	cmp	r0, #0
    3770:	beq	377c <coda_bin_cursor_read_uint8_array+0xf4>
    3774:	mvn	r0, #0
    3778:	b	37a8 <coda_bin_cursor_read_uint8_array+0x120>
    377c:	cmp	r6, #0
    3780:	beq	37a4 <coda_bin_cursor_read_uint8_array+0x11c>
    3784:	mov	r2, #1
    3788:	mov	r1, r4
    378c:	mov	r0, r5
    3790:	bl	b48 <transpose_array>
    3794:	cmp	r0, #0
    3798:	beq	37a4 <coda_bin_cursor_read_uint8_array+0x11c>
    379c:	mvn	r0, #0
    37a0:	b	37a8 <coda_bin_cursor_read_uint8_array+0x120>
    37a4:	mov	r0, #0
    37a8:	ldr	r4, [sp, #16]
    37ac:	ldr	r5, [sp, #20]
    37b0:	ldr	r6, [sp, #24]
    37b4:	ldr	lr, [sp, #8]
    37b8:	add	sp, sp, #32
    37bc:	bx	lr
    37c0:	.word	0x000002b5
    37c4:	.word	0x00000000
    37c8:	.word	0x000001cc
    37cc:	.word	0x00000000
    37d0:	.word	0x00000726

000037d4 <coda_bin_cursor_read_int16_array>:
    37d4:	mov	ip, sp
    37d8:	sub	sp, sp, #32
    37dc:	str	ip, [sp, #4]
    37e0:	str	lr, [sp, #8]
    37e4:	str	r4, [sp, #16]
    37e8:	str	r5, [sp, #20]
    37ec:	str	r6, [sp, #24]
    37f0:	mov	r6, r2
    37f4:	mov	r4, r1
    37f8:	mov	r5, r0
    37fc:	ldr	r2, [r5, #4]
    3800:	lsl	r0, r2, #4
    3804:	add	ip, r5, r0
    3808:	sub	lr, ip, #4096	; 0x1000
    380c:	ldr	ip, [lr, #4088]	; 0xff8
    3810:	ldr	r2, [ip]
    3814:	cmp	r2, #100	; 0x64
    3818:	blt	3838 <coda_bin_cursor_read_int16_array+0x64>
    381c:	ldr	r1, [r5, #4]
    3820:	lsl	r3, r1, #4
    3824:	add	r0, r5, r3
    3828:	sub	lr, r0, #4096	; 0x1000
    382c:	ldr	r1, [lr, #4088]	; 0xff8
    3830:	ldr	r0, [r1, #4]
    3834:	b	384c <coda_bin_cursor_read_int16_array+0x78>
    3838:	ldr	r3, [r5, #4]
    383c:	lsl	r0, r3, #4
    3840:	add	r1, r5, r0
    3844:	sub	lr, r1, #4096	; 0x1000
    3848:	ldr	r0, [lr, #4088]	; 0xff8
    384c:	ldr	r3, [r0, #40]	; 0x28
    3850:	ldr	r1, [r3]
    3854:	cmp	r1, #1
    3858:	bne	3878 <coda_bin_cursor_read_int16_array+0xa4>
    385c:	ldr	r1, [pc, #184]	; 391c <coda_bin_cursor_read_int16_array+0x148>
    3860:	mov	r3, #2
    3864:	str	r6, [sp]
    3868:	mov	r2, r4
    386c:	mov	r0, r5
    3870:	bl	774 <read_array>
    3874:	b	38f4 <coda_bin_cursor_read_int16_array+0x120>
    3878:	ldr	r0, [r0, #40]	; 0x28
    387c:	ldr	r2, [r0]
    3880:	cmp	r2, #0
    3884:	beq	389c <coda_bin_cursor_read_int16_array+0xc8>
    3888:	ldr	r0, [pc, #124]	; 390c <coda_bin_cursor_read_int16_array+0x138>
    388c:	ldr	r1, [pc, #128]	; 3914 <coda_bin_cursor_read_int16_array+0x140>
    3890:	movw	r2, #958	; 0x3be
    3894:	ldr	r3, [pc, #124]	; 3918 <coda_bin_cursor_read_int16_array+0x144>
    3898:	bl	0 <__assert_fail>
    389c:	ldr	r1, [pc, #108]	; 3910 <coda_bin_cursor_read_int16_array+0x13c>
    38a0:	mov	r3, #2
    38a4:	mov	ip, #0
    38a8:	str	ip, [sp]
    38ac:	mov	r2, r4
    38b0:	mov	r0, r5
    38b4:	bl	774 <read_array>
    38b8:	cmp	r0, #0
    38bc:	beq	38c8 <coda_bin_cursor_read_int16_array+0xf4>
    38c0:	mvn	r0, #0
    38c4:	b	38f4 <coda_bin_cursor_read_int16_array+0x120>
    38c8:	cmp	r6, #0
    38cc:	beq	38f0 <coda_bin_cursor_read_int16_array+0x11c>
    38d0:	mov	r2, #2
    38d4:	mov	r1, r4
    38d8:	mov	r0, r5
    38dc:	bl	b48 <transpose_array>
    38e0:	cmp	r0, #0
    38e4:	beq	38f0 <coda_bin_cursor_read_int16_array+0x11c>
    38e8:	mvn	r0, #0
    38ec:	b	38f4 <coda_bin_cursor_read_int16_array+0x120>
    38f0:	mov	r0, #0
    38f4:	ldr	r4, [sp, #16]
    38f8:	ldr	r5, [sp, #20]
    38fc:	ldr	r6, [sp, #24]
    3900:	ldr	lr, [sp, #8]
    3904:	add	sp, sp, #32
    3908:	bx	lr
    390c:	.word	0x000002b5
    3910:	.word	0x00000000
    3914:	.word	0x000001cc
    3918:	.word	0x00000747
    391c:	.word	0x00000000

00003920 <coda_bin_cursor_read_uint16_array>:
    3920:	mov	ip, sp
    3924:	sub	sp, sp, #32
    3928:	str	ip, [sp, #4]
    392c:	str	lr, [sp, #8]
    3930:	str	r4, [sp, #16]
    3934:	str	r5, [sp, #20]
    3938:	str	r6, [sp, #24]
    393c:	mov	r6, r2
    3940:	mov	r4, r1
    3944:	mov	r5, r0
    3948:	ldr	r2, [r5, #4]
    394c:	lsl	r0, r2, #4
    3950:	add	ip, r5, r0
    3954:	sub	lr, ip, #4096	; 0x1000
    3958:	ldr	ip, [lr, #4088]	; 0xff8
    395c:	ldr	r2, [ip]
    3960:	cmp	r2, #100	; 0x64
    3964:	blt	3984 <coda_bin_cursor_read_uint16_array+0x64>
    3968:	ldr	r1, [r5, #4]
    396c:	lsl	r3, r1, #4
    3970:	add	r0, r5, r3
    3974:	sub	lr, r0, #4096	; 0x1000
    3978:	ldr	r1, [lr, #4088]	; 0xff8
    397c:	ldr	r0, [r1, #4]
    3980:	b	3998 <coda_bin_cursor_read_uint16_array+0x78>
    3984:	ldr	r3, [r5, #4]
    3988:	lsl	r0, r3, #4
    398c:	add	r1, r5, r0
    3990:	sub	lr, r1, #4096	; 0x1000
    3994:	ldr	r0, [lr, #4088]	; 0xff8
    3998:	ldr	r3, [r0, #40]	; 0x28
    399c:	ldr	r1, [r3]
    39a0:	cmp	r1, #1
    39a4:	bne	39c4 <coda_bin_cursor_read_uint16_array+0xa4>
    39a8:	ldr	r1, [pc, #184]	; 3a68 <coda_bin_cursor_read_uint16_array+0x148>
    39ac:	mov	r3, #2
    39b0:	str	r6, [sp]
    39b4:	mov	r2, r4
    39b8:	mov	r0, r5
    39bc:	bl	774 <read_array>
    39c0:	b	3a40 <coda_bin_cursor_read_uint16_array+0x120>
    39c4:	ldr	r0, [r0, #40]	; 0x28
    39c8:	ldr	r2, [r0]
    39cc:	cmp	r2, #0
    39d0:	beq	39e8 <coda_bin_cursor_read_uint16_array+0xc8>
    39d4:	ldr	r0, [pc, #128]	; 3a5c <coda_bin_cursor_read_uint16_array+0x13c>
    39d8:	ldr	r1, [pc, #132]	; 3a64 <coda_bin_cursor_read_uint16_array+0x144>
    39dc:	mov	r2, #984	; 0x3d8
    39e0:	ldr	r3, [pc, #112]	; 3a58 <coda_bin_cursor_read_uint16_array+0x138>
    39e4:	bl	0 <__assert_fail>
    39e8:	ldr	r1, [pc, #112]	; 3a60 <coda_bin_cursor_read_uint16_array+0x140>
    39ec:	mov	r3, #2
    39f0:	mov	ip, #0
    39f4:	str	ip, [sp]
    39f8:	mov	r2, r4
    39fc:	mov	r0, r5
    3a00:	bl	774 <read_array>
    3a04:	cmp	r0, #0
    3a08:	beq	3a14 <coda_bin_cursor_read_uint16_array+0xf4>
    3a0c:	mvn	r0, #0
    3a10:	b	3a40 <coda_bin_cursor_read_uint16_array+0x120>
    3a14:	cmp	r6, #0
    3a18:	beq	3a3c <coda_bin_cursor_read_uint16_array+0x11c>
    3a1c:	mov	r2, #2
    3a20:	mov	r1, r4
    3a24:	mov	r0, r5
    3a28:	bl	b48 <transpose_array>
    3a2c:	cmp	r0, #0
    3a30:	beq	3a3c <coda_bin_cursor_read_uint16_array+0x11c>
    3a34:	mvn	r0, #0
    3a38:	b	3a40 <coda_bin_cursor_read_uint16_array+0x120>
    3a3c:	mov	r0, #0
    3a40:	ldr	r4, [sp, #16]
    3a44:	ldr	r5, [sp, #20]
    3a48:	ldr	r6, [sp, #24]
    3a4c:	ldr	lr, [sp, #8]
    3a50:	add	sp, sp, #32
    3a54:	bx	lr
    3a58:	.word	0x00000768
    3a5c:	.word	0x000002b5
    3a60:	.word	0x00000000
    3a64:	.word	0x000001cc
    3a68:	.word	0x00000000

00003a6c <coda_bin_cursor_read_int32_array>:
    3a6c:	mov	ip, sp
    3a70:	sub	sp, sp, #32
    3a74:	str	ip, [sp, #4]
    3a78:	str	lr, [sp, #8]
    3a7c:	str	r4, [sp, #16]
    3a80:	str	r5, [sp, #20]
    3a84:	str	r6, [sp, #24]
    3a88:	mov	r6, r2
    3a8c:	mov	r4, r1
    3a90:	mov	r5, r0
    3a94:	ldr	r2, [r5, #4]
    3a98:	lsl	r0, r2, #4
    3a9c:	add	ip, r5, r0
    3aa0:	sub	lr, ip, #4096	; 0x1000
    3aa4:	ldr	ip, [lr, #4088]	; 0xff8
    3aa8:	ldr	r2, [ip]
    3aac:	cmp	r2, #100	; 0x64
    3ab0:	blt	3ad0 <coda_bin_cursor_read_int32_array+0x64>
    3ab4:	ldr	r1, [r5, #4]
    3ab8:	lsl	r3, r1, #4
    3abc:	add	r0, r5, r3
    3ac0:	sub	lr, r0, #4096	; 0x1000
    3ac4:	ldr	r1, [lr, #4088]	; 0xff8
    3ac8:	ldr	r0, [r1, #4]
    3acc:	b	3ae4 <coda_bin_cursor_read_int32_array+0x78>
    3ad0:	ldr	r3, [r5, #4]
    3ad4:	lsl	r0, r3, #4
    3ad8:	add	r1, r5, r0
    3adc:	sub	lr, r1, #4096	; 0x1000
    3ae0:	ldr	r0, [lr, #4088]	; 0xff8
    3ae4:	ldr	r3, [r0, #40]	; 0x28
    3ae8:	ldr	r1, [r3]
    3aec:	cmp	r1, #1
    3af0:	bne	3b10 <coda_bin_cursor_read_int32_array+0xa4>
    3af4:	ldr	r1, [pc, #172]	; 3ba8 <coda_bin_cursor_read_int32_array+0x13c>
    3af8:	mov	r3, #4
    3afc:	str	r6, [sp]
    3b00:	mov	r2, r4
    3b04:	mov	r0, r5
    3b08:	bl	774 <read_array>
    3b0c:	b	3b8c <coda_bin_cursor_read_int32_array+0x120>
    3b10:	ldr	r0, [r0, #40]	; 0x28
    3b14:	ldr	r2, [r0]
    3b18:	cmp	r2, #0
    3b1c:	beq	3b34 <coda_bin_cursor_read_int32_array+0xc8>
    3b20:	ldr	r0, [pc, #132]	; 3bac <coda_bin_cursor_read_int32_array+0x140>
    3b24:	ldr	r1, [pc, #132]	; 3bb0 <coda_bin_cursor_read_int32_array+0x144>
    3b28:	movw	r2, #1010	; 0x3f2
    3b2c:	ldr	r3, [pc, #128]	; 3bb4 <coda_bin_cursor_read_int32_array+0x148>
    3b30:	bl	0 <__assert_fail>
    3b34:	ldr	r1, [pc, #104]	; 3ba4 <coda_bin_cursor_read_int32_array+0x138>
    3b38:	mov	r3, #4
    3b3c:	mov	ip, #0
    3b40:	str	ip, [sp]
    3b44:	mov	r2, r4
    3b48:	mov	r0, r5
    3b4c:	bl	774 <read_array>
    3b50:	cmp	r0, #0
    3b54:	beq	3b60 <coda_bin_cursor_read_int32_array+0xf4>
    3b58:	mvn	r0, #0
    3b5c:	b	3b8c <coda_bin_cursor_read_int32_array+0x120>
    3b60:	cmp	r6, #0
    3b64:	beq	3b88 <coda_bin_cursor_read_int32_array+0x11c>
    3b68:	mov	r2, #4
    3b6c:	mov	r1, r4
    3b70:	mov	r0, r5
    3b74:	bl	b48 <transpose_array>
    3b78:	cmp	r0, #0
    3b7c:	beq	3b88 <coda_bin_cursor_read_int32_array+0x11c>
    3b80:	mvn	r0, #0
    3b84:	b	3b8c <coda_bin_cursor_read_int32_array+0x120>
    3b88:	mov	r0, #0
    3b8c:	ldr	r4, [sp, #16]
    3b90:	ldr	r5, [sp, #20]
    3b94:	ldr	r6, [sp, #24]
    3b98:	ldr	lr, [sp, #8]
    3b9c:	add	sp, sp, #32
    3ba0:	bx	lr
	...
    3bac:	.word	0x000002b5
    3bb0:	.word	0x000001cc
    3bb4:	.word	0x0000078a

00003bb8 <coda_bin_cursor_read_uint32_array>:
    3bb8:	mov	ip, sp
    3bbc:	sub	sp, sp, #32
    3bc0:	str	ip, [sp, #4]
    3bc4:	str	lr, [sp, #8]
    3bc8:	str	r4, [sp, #16]
    3bcc:	str	r5, [sp, #20]
    3bd0:	str	r6, [sp, #24]
    3bd4:	mov	r6, r2
    3bd8:	mov	r4, r1
    3bdc:	mov	r5, r0
    3be0:	ldr	r2, [r5, #4]
    3be4:	lsl	r0, r2, #4
    3be8:	add	ip, r5, r0
    3bec:	sub	lr, ip, #4096	; 0x1000
    3bf0:	ldr	ip, [lr, #4088]	; 0xff8
    3bf4:	ldr	r2, [ip]
    3bf8:	cmp	r2, #100	; 0x64
    3bfc:	blt	3c1c <coda_bin_cursor_read_uint32_array+0x64>
    3c00:	ldr	r1, [r5, #4]
    3c04:	lsl	r3, r1, #4
    3c08:	add	r0, r5, r3
    3c0c:	sub	lr, r0, #4096	; 0x1000
    3c10:	ldr	r1, [lr, #4088]	; 0xff8
    3c14:	ldr	r0, [r1, #4]
    3c18:	b	3c30 <coda_bin_cursor_read_uint32_array+0x78>
    3c1c:	ldr	r3, [r5, #4]
    3c20:	lsl	r0, r3, #4
    3c24:	add	r1, r5, r0
    3c28:	sub	lr, r1, #4096	; 0x1000
    3c2c:	ldr	r0, [lr, #4088]	; 0xff8
    3c30:	ldr	r3, [r0, #40]	; 0x28
    3c34:	ldr	r1, [r3]
    3c38:	cmp	r1, #1
    3c3c:	bne	3c5c <coda_bin_cursor_read_uint32_array+0xa4>
    3c40:	ldr	r1, [pc, #184]	; 3d00 <coda_bin_cursor_read_uint32_array+0x148>
    3c44:	mov	r3, #4
    3c48:	str	r6, [sp]
    3c4c:	mov	r2, r4
    3c50:	mov	r0, r5
    3c54:	bl	774 <read_array>
    3c58:	b	3cd8 <coda_bin_cursor_read_uint32_array+0x120>
    3c5c:	ldr	r0, [r0, #40]	; 0x28
    3c60:	ldr	r2, [r0]
    3c64:	cmp	r2, #0
    3c68:	beq	3c80 <coda_bin_cursor_read_uint32_array+0xc8>
    3c6c:	ldr	r0, [pc, #128]	; 3cf4 <coda_bin_cursor_read_uint32_array+0x13c>
    3c70:	ldr	r1, [pc, #132]	; 3cfc <coda_bin_cursor_read_uint32_array+0x144>
    3c74:	movw	r2, #1036	; 0x40c
    3c78:	ldr	r3, [pc, #112]	; 3cf0 <coda_bin_cursor_read_uint32_array+0x138>
    3c7c:	bl	0 <__assert_fail>
    3c80:	ldr	r1, [pc, #112]	; 3cf8 <coda_bin_cursor_read_uint32_array+0x140>
    3c84:	mov	r3, #4
    3c88:	mov	ip, #0
    3c8c:	str	ip, [sp]
    3c90:	mov	r2, r4
    3c94:	mov	r0, r5
    3c98:	bl	774 <read_array>
    3c9c:	cmp	r0, #0
    3ca0:	beq	3cac <coda_bin_cursor_read_uint32_array+0xf4>
    3ca4:	mvn	r0, #0
    3ca8:	b	3cd8 <coda_bin_cursor_read_uint32_array+0x120>
    3cac:	cmp	r6, #0
    3cb0:	beq	3cd4 <coda_bin_cursor_read_uint32_array+0x11c>
    3cb4:	mov	r2, #4
    3cb8:	mov	r1, r4
    3cbc:	mov	r0, r5
    3cc0:	bl	b48 <transpose_array>
    3cc4:	cmp	r0, #0
    3cc8:	beq	3cd4 <coda_bin_cursor_read_uint32_array+0x11c>
    3ccc:	mvn	r0, #0
    3cd0:	b	3cd8 <coda_bin_cursor_read_uint32_array+0x120>
    3cd4:	mov	r0, #0
    3cd8:	ldr	r4, [sp, #16]
    3cdc:	ldr	r5, [sp, #20]
    3ce0:	ldr	r6, [sp, #24]
    3ce4:	ldr	lr, [sp, #8]
    3ce8:	add	sp, sp, #32
    3cec:	bx	lr
    3cf0:	.word	0x000007ab
    3cf4:	.word	0x000002b5
    3cf8:	.word	0x00000000
    3cfc:	.word	0x000001cc
    3d00:	.word	0x00000000

00003d04 <coda_bin_cursor_read_int64_array>:
    3d04:	mov	ip, sp
    3d08:	sub	sp, sp, #32
    3d0c:	str	ip, [sp, #4]
    3d10:	str	lr, [sp, #8]
    3d14:	str	r4, [sp, #16]
    3d18:	str	r5, [sp, #20]
    3d1c:	str	r6, [sp, #24]
    3d20:	mov	r6, r2
    3d24:	mov	r4, r1
    3d28:	mov	r5, r0
    3d2c:	ldr	r2, [r5, #4]
    3d30:	lsl	r0, r2, #4
    3d34:	add	ip, r5, r0
    3d38:	sub	lr, ip, #4096	; 0x1000
    3d3c:	ldr	ip, [lr, #4088]	; 0xff8
    3d40:	ldr	r2, [ip]
    3d44:	cmp	r2, #100	; 0x64
    3d48:	blt	3d68 <coda_bin_cursor_read_int64_array+0x64>
    3d4c:	ldr	r1, [r5, #4]
    3d50:	lsl	r3, r1, #4
    3d54:	add	r0, r5, r3
    3d58:	sub	lr, r0, #4096	; 0x1000
    3d5c:	ldr	r1, [lr, #4088]	; 0xff8
    3d60:	ldr	r0, [r1, #4]
    3d64:	b	3d7c <coda_bin_cursor_read_int64_array+0x78>
    3d68:	ldr	r3, [r5, #4]
    3d6c:	lsl	r0, r3, #4
    3d70:	add	r1, r5, r0
    3d74:	sub	lr, r1, #4096	; 0x1000
    3d78:	ldr	r0, [lr, #4088]	; 0xff8
    3d7c:	ldr	r3, [r0, #40]	; 0x28
    3d80:	ldr	r1, [r3]
    3d84:	cmp	r1, #1
    3d88:	bne	3da8 <coda_bin_cursor_read_int64_array+0xa4>
    3d8c:	ldr	r1, [pc, #184]	; 3e4c <coda_bin_cursor_read_int64_array+0x148>
    3d90:	mov	r3, #8
    3d94:	str	r6, [sp]
    3d98:	mov	r2, r4
    3d9c:	mov	r0, r5
    3da0:	bl	774 <read_array>
    3da4:	b	3e24 <coda_bin_cursor_read_int64_array+0x120>
    3da8:	ldr	r0, [r0, #40]	; 0x28
    3dac:	ldr	r2, [r0]
    3db0:	cmp	r2, #0
    3db4:	beq	3dcc <coda_bin_cursor_read_int64_array+0xc8>
    3db8:	ldr	r0, [pc, #124]	; 3e3c <coda_bin_cursor_read_int64_array+0x138>
    3dbc:	ldr	r1, [pc, #132]	; 3e48 <coda_bin_cursor_read_int64_array+0x144>
    3dc0:	movw	r2, #1062	; 0x426
    3dc4:	ldr	r3, [pc, #116]	; 3e40 <coda_bin_cursor_read_int64_array+0x13c>
    3dc8:	bl	0 <__assert_fail>
    3dcc:	ldr	r1, [pc, #112]	; 3e44 <coda_bin_cursor_read_int64_array+0x140>
    3dd0:	mov	r3, #8
    3dd4:	mov	ip, #0
    3dd8:	str	ip, [sp]
    3ddc:	mov	r2, r4
    3de0:	mov	r0, r5
    3de4:	bl	774 <read_array>
    3de8:	cmp	r0, #0
    3dec:	beq	3df8 <coda_bin_cursor_read_int64_array+0xf4>
    3df0:	mvn	r0, #0
    3df4:	b	3e24 <coda_bin_cursor_read_int64_array+0x120>
    3df8:	cmp	r6, #0
    3dfc:	beq	3e20 <coda_bin_cursor_read_int64_array+0x11c>
    3e00:	mov	r2, #8
    3e04:	mov	r1, r4
    3e08:	mov	r0, r5
    3e0c:	bl	b48 <transpose_array>
    3e10:	cmp	r0, #0
    3e14:	beq	3e20 <coda_bin_cursor_read_int64_array+0x11c>
    3e18:	mvn	r0, #0
    3e1c:	b	3e24 <coda_bin_cursor_read_int64_array+0x120>
    3e20:	mov	r0, #0
    3e24:	ldr	r4, [sp, #16]
    3e28:	ldr	r5, [sp, #20]
    3e2c:	ldr	r6, [sp, #24]
    3e30:	ldr	lr, [sp, #8]
    3e34:	add	sp, sp, #32
    3e38:	bx	lr
    3e3c:	.word	0x000002b5
    3e40:	.word	0x000007cd
    3e44:	.word	0x00000000
    3e48:	.word	0x000001cc
    3e4c:	.word	0x00000000

00003e50 <coda_bin_cursor_read_uint64_array>:
    3e50:	mov	ip, sp
    3e54:	sub	sp, sp, #32
    3e58:	str	ip, [sp, #4]
    3e5c:	str	lr, [sp, #8]
    3e60:	str	r4, [sp, #16]
    3e64:	str	r5, [sp, #20]
    3e68:	str	r6, [sp, #24]
    3e6c:	mov	r6, r2
    3e70:	mov	r4, r1
    3e74:	mov	r5, r0
    3e78:	ldr	r2, [r5, #4]
    3e7c:	lsl	r0, r2, #4
    3e80:	add	ip, r5, r0
    3e84:	sub	lr, ip, #4096	; 0x1000
    3e88:	ldr	ip, [lr, #4088]	; 0xff8
    3e8c:	ldr	r2, [ip]
    3e90:	cmp	r2, #100	; 0x64
    3e94:	blt	3eb4 <coda_bin_cursor_read_uint64_array+0x64>
    3e98:	ldr	r1, [r5, #4]
    3e9c:	lsl	r3, r1, #4
    3ea0:	add	r0, r5, r3
    3ea4:	sub	lr, r0, #4096	; 0x1000
    3ea8:	ldr	r1, [lr, #4088]	; 0xff8
    3eac:	ldr	r0, [r1, #4]
    3eb0:	b	3ec8 <coda_bin_cursor_read_uint64_array+0x78>
    3eb4:	ldr	r3, [r5, #4]
    3eb8:	lsl	r0, r3, #4
    3ebc:	add	r1, r5, r0
    3ec0:	sub	lr, r1, #4096	; 0x1000
    3ec4:	ldr	r0, [lr, #4088]	; 0xff8
    3ec8:	ldr	r3, [r0, #40]	; 0x28
    3ecc:	ldr	r1, [r3]
    3ed0:	cmp	r1, #1
    3ed4:	bne	3ef4 <coda_bin_cursor_read_uint64_array+0xa4>
    3ed8:	ldr	r1, [pc, #172]	; 3f8c <coda_bin_cursor_read_uint64_array+0x13c>
    3edc:	mov	r3, #8
    3ee0:	str	r6, [sp]
    3ee4:	mov	r2, r4
    3ee8:	mov	r0, r5
    3eec:	bl	774 <read_array>
    3ef0:	b	3f70 <coda_bin_cursor_read_uint64_array+0x120>
    3ef4:	ldr	r0, [r0, #40]	; 0x28
    3ef8:	ldr	r2, [r0]
    3efc:	cmp	r2, #0
    3f00:	beq	3f18 <coda_bin_cursor_read_uint64_array+0xc8>
    3f04:	ldr	r0, [pc, #124]	; 3f88 <coda_bin_cursor_read_uint64_array+0x138>
    3f08:	ldr	r1, [pc, #128]	; 3f90 <coda_bin_cursor_read_uint64_array+0x140>
    3f0c:	mov	r2, #1088	; 0x440
    3f10:	ldr	r3, [pc, #124]	; 3f94 <coda_bin_cursor_read_uint64_array+0x144>
    3f14:	bl	0 <__assert_fail>
    3f18:	ldr	r1, [pc, #120]	; 3f98 <coda_bin_cursor_read_uint64_array+0x148>
    3f1c:	mov	r3, #8
    3f20:	mov	ip, #0
    3f24:	str	ip, [sp]
    3f28:	mov	r2, r4
    3f2c:	mov	r0, r5
    3f30:	bl	774 <read_array>
    3f34:	cmp	r0, #0
    3f38:	beq	3f44 <coda_bin_cursor_read_uint64_array+0xf4>
    3f3c:	mvn	r0, #0
    3f40:	b	3f70 <coda_bin_cursor_read_uint64_array+0x120>
    3f44:	cmp	r6, #0
    3f48:	beq	3f6c <coda_bin_cursor_read_uint64_array+0x11c>
    3f4c:	mov	r2, #8
    3f50:	mov	r1, r4
    3f54:	mov	r0, r5
    3f58:	bl	b48 <transpose_array>
    3f5c:	cmp	r0, #0
    3f60:	beq	3f6c <coda_bin_cursor_read_uint64_array+0x11c>
    3f64:	mvn	r0, #0
    3f68:	b	3f70 <coda_bin_cursor_read_uint64_array+0x120>
    3f6c:	mov	r0, #0
    3f70:	ldr	r4, [sp, #16]
    3f74:	ldr	r5, [sp, #20]
    3f78:	ldr	r6, [sp, #24]
    3f7c:	ldr	lr, [sp, #8]
    3f80:	add	sp, sp, #32
    3f84:	bx	lr
    3f88:	.word	0x000002b5
    3f8c:	.word	0x00000000
    3f90:	.word	0x000001cc
    3f94:	.word	0x000007ee
    3f98:	.word	0x00000000

00003f9c <coda_bin_cursor_read_float_array>:
    3f9c:	mov	ip, sp
    3fa0:	sub	sp, sp, #32
    3fa4:	str	ip, [sp, #4]
    3fa8:	str	lr, [sp, #8]
    3fac:	str	r4, [sp, #16]
    3fb0:	str	r5, [sp, #20]
    3fb4:	str	r6, [sp, #24]
    3fb8:	mov	r6, r2
    3fbc:	mov	r4, r1
    3fc0:	mov	r5, r0
    3fc4:	ldr	r2, [r5, #4]
    3fc8:	lsl	r0, r2, #4
    3fcc:	add	ip, r5, r0
    3fd0:	sub	lr, ip, #4096	; 0x1000
    3fd4:	ldr	ip, [lr, #4088]	; 0xff8
    3fd8:	ldr	r2, [ip]
    3fdc:	cmp	r2, #100	; 0x64
    3fe0:	blt	4000 <coda_bin_cursor_read_float_array+0x64>
    3fe4:	ldr	r1, [r5, #4]
    3fe8:	lsl	r3, r1, #4
    3fec:	add	r0, r5, r3
    3ff0:	sub	lr, r0, #4096	; 0x1000
    3ff4:	ldr	r1, [lr, #4088]	; 0xff8
    3ff8:	ldr	r0, [r1, #4]
    3ffc:	b	4014 <coda_bin_cursor_read_float_array+0x78>
    4000:	ldr	r3, [r5, #4]
    4004:	lsl	r0, r3, #4
    4008:	add	r1, r5, r0
    400c:	sub	lr, r1, #4096	; 0x1000
    4010:	ldr	r0, [lr, #4088]	; 0xff8
    4014:	ldr	r3, [r0, #40]	; 0x28
    4018:	ldr	r1, [r3]
    401c:	cmp	r1, #1
    4020:	bne	4040 <coda_bin_cursor_read_float_array+0xa4>
    4024:	ldr	r1, [pc, #176]	; 40dc <coda_bin_cursor_read_float_array+0x140>
    4028:	mov	r3, #4
    402c:	str	r6, [sp]
    4030:	mov	r2, r4
    4034:	mov	r0, r5
    4038:	bl	774 <read_array>
    403c:	b	40bc <coda_bin_cursor_read_float_array+0x120>
    4040:	ldr	r0, [r0, #40]	; 0x28
    4044:	ldr	r2, [r0]
    4048:	cmp	r2, #0
    404c:	beq	4064 <coda_bin_cursor_read_float_array+0xc8>
    4050:	ldr	r0, [pc, #128]	; 40d8 <coda_bin_cursor_read_float_array+0x13c>
    4054:	ldr	r1, [pc, #132]	; 40e0 <coda_bin_cursor_read_float_array+0x144>
    4058:	movw	r2, #1114	; 0x45a
    405c:	ldr	r3, [pc, #128]	; 40e4 <coda_bin_cursor_read_float_array+0x148>
    4060:	bl	0 <__assert_fail>
    4064:	ldr	r1, [pc, #104]	; 40d4 <coda_bin_cursor_read_float_array+0x138>
    4068:	mov	r3, #4
    406c:	mov	ip, #0
    4070:	str	ip, [sp]
    4074:	mov	r2, r4
    4078:	mov	r0, r5
    407c:	bl	774 <read_array>
    4080:	cmp	r0, #0
    4084:	beq	4090 <coda_bin_cursor_read_float_array+0xf4>
    4088:	mvn	r0, #0
    408c:	b	40bc <coda_bin_cursor_read_float_array+0x120>
    4090:	cmp	r6, #0
    4094:	beq	40b8 <coda_bin_cursor_read_float_array+0x11c>
    4098:	mov	r2, #4
    409c:	mov	r1, r4
    40a0:	mov	r0, r5
    40a4:	bl	b48 <transpose_array>
    40a8:	cmp	r0, #0
    40ac:	beq	40b8 <coda_bin_cursor_read_float_array+0x11c>
    40b0:	mvn	r0, #0
    40b4:	b	40bc <coda_bin_cursor_read_float_array+0x120>
    40b8:	mov	r0, #0
    40bc:	ldr	r4, [sp, #16]
    40c0:	ldr	r5, [sp, #20]
    40c4:	ldr	r6, [sp, #24]
    40c8:	ldr	lr, [sp, #8]
    40cc:	add	sp, sp, #32
    40d0:	bx	lr
    40d4:	.word	0x00000000
    40d8:	.word	0x000002b5
    40dc:	.word	0x00000000
    40e0:	.word	0x000001cc
    40e4:	.word	0x00000810

000040e8 <coda_bin_cursor_read_double_array>:
    40e8:	mov	ip, sp
    40ec:	sub	sp, sp, #32
    40f0:	str	ip, [sp, #4]
    40f4:	str	lr, [sp, #8]
    40f8:	str	r4, [sp, #16]
    40fc:	str	r5, [sp, #20]
    4100:	str	r6, [sp, #24]
    4104:	mov	r6, r2
    4108:	mov	r4, r1
    410c:	mov	r5, r0
    4110:	ldr	r2, [r5, #4]
    4114:	lsl	r0, r2, #4
    4118:	add	ip, r5, r0
    411c:	sub	lr, ip, #4096	; 0x1000
    4120:	ldr	ip, [lr, #4088]	; 0xff8
    4124:	ldr	r2, [ip]
    4128:	cmp	r2, #100	; 0x64
    412c:	blt	414c <coda_bin_cursor_read_double_array+0x64>
    4130:	ldr	r1, [r5, #4]
    4134:	lsl	r3, r1, #4
    4138:	add	r0, r5, r3
    413c:	sub	lr, r0, #4096	; 0x1000
    4140:	ldr	r1, [lr, #4088]	; 0xff8
    4144:	ldr	r0, [r1, #4]
    4148:	b	4160 <coda_bin_cursor_read_double_array+0x78>
    414c:	ldr	r3, [r5, #4]
    4150:	lsl	r0, r3, #4
    4154:	add	r1, r5, r0
    4158:	sub	lr, r1, #4096	; 0x1000
    415c:	ldr	r0, [lr, #4088]	; 0xff8
    4160:	ldr	r3, [r0, #40]	; 0x28
    4164:	ldr	r1, [r3]
    4168:	cmp	r1, #1
    416c:	bne	418c <coda_bin_cursor_read_double_array+0xa4>
    4170:	ldr	r1, [pc, #184]	; 4230 <coda_bin_cursor_read_double_array+0x148>
    4174:	mov	r3, #8
    4178:	str	r6, [sp]
    417c:	mov	r2, r4
    4180:	mov	r0, r5
    4184:	bl	774 <read_array>
    4188:	b	4208 <coda_bin_cursor_read_double_array+0x120>
    418c:	ldr	r0, [r0, #40]	; 0x28
    4190:	ldr	r2, [r0]
    4194:	cmp	r2, #0
    4198:	beq	41b0 <coda_bin_cursor_read_double_array+0xc8>
    419c:	ldr	r0, [pc, #124]	; 4220 <coda_bin_cursor_read_double_array+0x138>
    41a0:	ldr	r1, [pc, #128]	; 4228 <coda_bin_cursor_read_double_array+0x140>
    41a4:	movw	r2, #1140	; 0x474
    41a8:	ldr	r3, [pc, #116]	; 4224 <coda_bin_cursor_read_double_array+0x13c>
    41ac:	bl	0 <__assert_fail>
    41b0:	ldr	r1, [pc, #116]	; 422c <coda_bin_cursor_read_double_array+0x144>
    41b4:	mov	r3, #8
    41b8:	mov	ip, #0
    41bc:	str	ip, [sp]
    41c0:	mov	r2, r4
    41c4:	mov	r0, r5
    41c8:	bl	774 <read_array>
    41cc:	cmp	r0, #0
    41d0:	beq	41dc <coda_bin_cursor_read_double_array+0xf4>
    41d4:	mvn	r0, #0
    41d8:	b	4208 <coda_bin_cursor_read_double_array+0x120>
    41dc:	cmp	r6, #0
    41e0:	beq	4204 <coda_bin_cursor_read_double_array+0x11c>
    41e4:	mov	r2, #8
    41e8:	mov	r1, r4
    41ec:	mov	r0, r5
    41f0:	bl	b48 <transpose_array>
    41f4:	cmp	r0, #0
    41f8:	beq	4204 <coda_bin_cursor_read_double_array+0x11c>
    41fc:	mvn	r0, #0
    4200:	b	4208 <coda_bin_cursor_read_double_array+0x120>
    4204:	mov	r0, #0
    4208:	ldr	r4, [sp, #16]
    420c:	ldr	r5, [sp, #20]
    4210:	ldr	r6, [sp, #24]
    4214:	ldr	lr, [sp, #8]
    4218:	add	sp, sp, #32
    421c:	bx	lr
    4220:	.word	0x000002b5
    4224:	.word	0x00000831
    4228:	.word	0x000001cc
	...

00004234 <coda_bin_cursor_read_char_array>:
    4234:	mov	ip, sp
    4238:	sub	sp, sp, #32
    423c:	str	ip, [sp, #4]
    4240:	str	lr, [sp, #8]
    4244:	str	r4, [sp, #16]
    4248:	str	r5, [sp, #20]
    424c:	str	r6, [sp, #24]
    4250:	mov	r6, r2
    4254:	mov	r4, r1
    4258:	mov	r5, r0
    425c:	ldr	r2, [r5, #4]
    4260:	lsl	r0, r2, #4
    4264:	add	ip, r5, r0
    4268:	sub	lr, ip, #4096	; 0x1000
    426c:	ldr	ip, [lr, #4088]	; 0xff8
    4270:	ldr	r2, [ip]
    4274:	cmp	r2, #100	; 0x64
    4278:	blt	4298 <coda_bin_cursor_read_char_array+0x64>
    427c:	ldr	r1, [r5, #4]
    4280:	lsl	r3, r1, #4
    4284:	add	r0, r5, r3
    4288:	sub	lr, r0, #4096	; 0x1000
    428c:	ldr	r1, [lr, #4088]	; 0xff8
    4290:	ldr	r0, [r1, #4]
    4294:	b	42ac <coda_bin_cursor_read_char_array+0x78>
    4298:	ldr	r3, [r5, #4]
    429c:	lsl	r0, r3, #4
    42a0:	add	r1, r5, r0
    42a4:	sub	lr, r1, #4096	; 0x1000
    42a8:	ldr	r0, [lr, #4088]	; 0xff8
    42ac:	ldr	r3, [r0, #40]	; 0x28
    42b0:	ldr	r1, [r3]
    42b4:	cmp	r1, #1
    42b8:	bne	42d8 <coda_bin_cursor_read_char_array+0xa4>
    42bc:	ldr	r1, [pc, #184]	; 437c <coda_bin_cursor_read_char_array+0x148>
    42c0:	mov	r3, #1
    42c4:	str	r6, [sp]
    42c8:	mov	r2, r4
    42cc:	mov	r0, r5
    42d0:	bl	774 <read_array>
    42d4:	b	4354 <coda_bin_cursor_read_char_array+0x120>
    42d8:	ldr	r0, [r0, #40]	; 0x28
    42dc:	ldr	r2, [r0]
    42e0:	cmp	r2, #0
    42e4:	beq	42fc <coda_bin_cursor_read_char_array+0xc8>
    42e8:	ldr	r0, [pc, #128]	; 4370 <coda_bin_cursor_read_char_array+0x13c>
    42ec:	ldr	r1, [pc, #132]	; 4378 <coda_bin_cursor_read_char_array+0x144>
    42f0:	movw	r2, #1166	; 0x48e
    42f4:	ldr	r3, [pc, #120]	; 4374 <coda_bin_cursor_read_char_array+0x140>
    42f8:	bl	0 <__assert_fail>
    42fc:	ldr	r1, [pc, #104]	; 436c <coda_bin_cursor_read_char_array+0x138>
    4300:	mov	r3, #1
    4304:	mov	ip, #0
    4308:	str	ip, [sp]
    430c:	mov	r2, r4
    4310:	mov	r0, r5
    4314:	bl	774 <read_array>
    4318:	cmp	r0, #0
    431c:	beq	4328 <coda_bin_cursor_read_char_array+0xf4>
    4320:	mvn	r0, #0
    4324:	b	4354 <coda_bin_cursor_read_char_array+0x120>
    4328:	cmp	r6, #0
    432c:	beq	4350 <coda_bin_cursor_read_char_array+0x11c>
    4330:	mov	r2, #1
    4334:	mov	r1, r4
    4338:	mov	r0, r5
    433c:	bl	b48 <transpose_array>
    4340:	cmp	r0, #0
    4344:	beq	4350 <coda_bin_cursor_read_char_array+0x11c>
    4348:	mvn	r0, #0
    434c:	b	4354 <coda_bin_cursor_read_char_array+0x120>
    4350:	mov	r0, #0
    4354:	ldr	r4, [sp, #16]
    4358:	ldr	r5, [sp, #20]
    435c:	ldr	r6, [sp, #24]
    4360:	ldr	lr, [sp, #8]
    4364:	add	sp, sp, #32
    4368:	bx	lr
    436c:	.word	0x00000000
    4370:	.word	0x000002b5
    4374:	.word	0x00000853
    4378:	.word	0x000001cc
    437c:	.word	0x00000000

00004380 <coda_bin_cursor_read_int8_partial_array>:
    4380:	mov	ip, sp
    4384:	sub	sp, sp, #32
    4388:	str	ip, [sp, #8]
    438c:	str	lr, [sp, #12]
    4390:	str	r4, [sp, #16]
    4394:	str	r5, [sp, #20]
    4398:	str	r6, [sp, #24]
    439c:	str	r7, [sp, #28]
    43a0:	mov	r4, r3
    43a4:	mov	r5, r2
    43a8:	mov	r6, r1
    43ac:	mov	r7, r0
    43b0:	ldr	r0, [r7, #4]
    43b4:	lsl	r2, r0, #4
    43b8:	add	r2, r7, r2
    43bc:	sub	lr, r2, #4096	; 0x1000
    43c0:	ldr	ip, [lr, #4088]	; 0xff8
    43c4:	ldr	r2, [ip]
    43c8:	cmp	r2, #100	; 0x64
    43cc:	blt	43ec <coda_bin_cursor_read_int8_partial_array+0x6c>
    43d0:	ldr	ip, [r7, #4]
    43d4:	lsl	ip, ip, #4
    43d8:	add	r1, r7, ip
    43dc:	sub	lr, r1, #4096	; 0x1000
    43e0:	ldr	r3, [lr, #4088]	; 0xff8
    43e4:	ldr	r0, [r3, #4]
    43e8:	b	4400 <coda_bin_cursor_read_int8_partial_array+0x80>
    43ec:	ldr	r1, [r7, #4]
    43f0:	lsl	r1, r1, #4
    43f4:	add	r1, r7, r1
    43f8:	sub	lr, r1, #4096	; 0x1000
    43fc:	ldr	r0, [lr, #4088]	; 0xff8
    4400:	ldr	r3, [r0, #40]	; 0x28
    4404:	ldr	r3, [r3]
    4408:	cmp	r3, #1
    440c:	bne	4434 <coda_bin_cursor_read_int8_partial_array+0xb4>
    4410:	ldr	r1, [pc, #124]	; 4494 <coda_bin_cursor_read_int8_partial_array+0x114>
    4414:	mov	r3, #1
    4418:	str	r3, [sp, #4]
    441c:	str	r4, [sp]
    4420:	mov	r3, r5
    4424:	mov	r2, r6
    4428:	mov	r0, r7
    442c:	bl	a5c <read_partial_array>
    4430:	b	4478 <coda_bin_cursor_read_int8_partial_array+0xf8>
    4434:	ldr	r1, [r0, #40]	; 0x28
    4438:	ldr	r2, [r1]
    443c:	cmp	r2, #0
    4440:	beq	4458 <coda_bin_cursor_read_int8_partial_array+0xd8>
    4444:	ldr	r0, [pc, #76]	; 4498 <coda_bin_cursor_read_int8_partial_array+0x118>
    4448:	ldr	r1, [pc, #80]	; 44a0 <coda_bin_cursor_read_int8_partial_array+0x120>
    444c:	movw	r2, #1192	; 0x4a8
    4450:	ldr	r3, [pc, #68]	; 449c <coda_bin_cursor_read_int8_partial_array+0x11c>
    4454:	bl	0 <__assert_fail>
    4458:	ldr	r1, [pc, #68]	; 44a4 <coda_bin_cursor_read_int8_partial_array+0x124>
    445c:	mov	r2, #1
    4460:	str	r2, [sp, #4]
    4464:	str	r4, [sp]
    4468:	mov	r3, r5
    446c:	mov	r2, r6
    4470:	mov	r0, r7
    4474:	bl	a5c <read_partial_array>
    4478:	ldr	r4, [sp, #16]
    447c:	ldr	r5, [sp, #20]
    4480:	ldr	r6, [sp, #24]
    4484:	ldr	r7, [sp, #28]
    4488:	ldr	lr, [sp, #12]
    448c:	add	sp, sp, #32
    4490:	bx	lr
    4494:	.word	0x00000000
    4498:	.word	0x000002b5
    449c:	.word	0x00000873
    44a0:	.word	0x000001cc
    44a4:	.word	0x00000000

000044a8 <coda_bin_cursor_read_uint8_partial_array>:
    44a8:	mov	ip, sp
    44ac:	sub	sp, sp, #32
    44b0:	str	ip, [sp, #8]
    44b4:	str	lr, [sp, #12]
    44b8:	str	r4, [sp, #16]
    44bc:	str	r5, [sp, #20]
    44c0:	str	r6, [sp, #24]
    44c4:	str	r7, [sp, #28]
    44c8:	mov	r4, r3
    44cc:	mov	r5, r2
    44d0:	mov	r6, r1
    44d4:	mov	r7, r0
    44d8:	ldr	r0, [r7, #4]
    44dc:	lsl	r2, r0, #4
    44e0:	add	r2, r7, r2
    44e4:	sub	lr, r2, #4096	; 0x1000
    44e8:	ldr	ip, [lr, #4088]	; 0xff8
    44ec:	ldr	r2, [ip]
    44f0:	cmp	r2, #100	; 0x64
    44f4:	blt	4514 <coda_bin_cursor_read_uint8_partial_array+0x6c>
    44f8:	ldr	ip, [r7, #4]
    44fc:	lsl	ip, ip, #4
    4500:	add	r1, r7, ip
    4504:	sub	lr, r1, #4096	; 0x1000
    4508:	ldr	r3, [lr, #4088]	; 0xff8
    450c:	ldr	r0, [r3, #4]
    4510:	b	4528 <coda_bin_cursor_read_uint8_partial_array+0x80>
    4514:	ldr	r1, [r7, #4]
    4518:	lsl	r1, r1, #4
    451c:	add	r1, r7, r1
    4520:	sub	lr, r1, #4096	; 0x1000
    4524:	ldr	r0, [lr, #4088]	; 0xff8
    4528:	ldr	r3, [r0, #40]	; 0x28
    452c:	ldr	r3, [r3]
    4530:	cmp	r3, #1
    4534:	bne	455c <coda_bin_cursor_read_uint8_partial_array+0xb4>
    4538:	ldr	r1, [pc, #132]	; 45c4 <coda_bin_cursor_read_uint8_partial_array+0x11c>
    453c:	mov	r3, #1
    4540:	str	r3, [sp, #4]
    4544:	str	r4, [sp]
    4548:	mov	r3, r5
    454c:	mov	r2, r6
    4550:	mov	r0, r7
    4554:	bl	a5c <read_partial_array>
    4558:	b	45a0 <coda_bin_cursor_read_uint8_partial_array+0xf8>
    455c:	ldr	r1, [r0, #40]	; 0x28
    4560:	ldr	r2, [r1]
    4564:	cmp	r2, #0
    4568:	beq	4580 <coda_bin_cursor_read_uint8_partial_array+0xd8>
    456c:	ldr	r0, [pc, #72]	; 45bc <coda_bin_cursor_read_uint8_partial_array+0x114>
    4570:	ldr	r1, [pc, #80]	; 45c8 <coda_bin_cursor_read_uint8_partial_array+0x120>
    4574:	movw	r2, #1206	; 0x4b6
    4578:	ldr	r3, [pc, #64]	; 45c0 <coda_bin_cursor_read_uint8_partial_array+0x118>
    457c:	bl	0 <__assert_fail>
    4580:	ldr	r1, [pc, #68]	; 45cc <coda_bin_cursor_read_uint8_partial_array+0x124>
    4584:	mov	r2, #1
    4588:	str	r2, [sp, #4]
    458c:	str	r4, [sp]
    4590:	mov	r3, r5
    4594:	mov	r2, r6
    4598:	mov	r0, r7
    459c:	bl	a5c <read_partial_array>
    45a0:	ldr	r4, [sp, #16]
    45a4:	ldr	r5, [sp, #20]
    45a8:	ldr	r6, [sp, #24]
    45ac:	ldr	r7, [sp, #28]
    45b0:	ldr	lr, [sp, #12]
    45b4:	add	sp, sp, #32
    45b8:	bx	lr
    45bc:	.word	0x000002b5
    45c0:	.word	0x0000089b
    45c4:	.word	0x00000000
    45c8:	.word	0x000001cc
    45cc:	.word	0x00000000

000045d0 <coda_bin_cursor_read_int16_partial_array>:
    45d0:	mov	ip, sp
    45d4:	sub	sp, sp, #32
    45d8:	str	ip, [sp, #8]
    45dc:	str	lr, [sp, #12]
    45e0:	str	r4, [sp, #16]
    45e4:	str	r5, [sp, #20]
    45e8:	str	r6, [sp, #24]
    45ec:	str	r7, [sp, #28]
    45f0:	mov	r4, r3
    45f4:	mov	r5, r2
    45f8:	mov	r6, r1
    45fc:	mov	r7, r0
    4600:	ldr	r0, [r7, #4]
    4604:	lsl	r2, r0, #4
    4608:	add	r2, r7, r2
    460c:	sub	lr, r2, #4096	; 0x1000
    4610:	ldr	ip, [lr, #4088]	; 0xff8
    4614:	ldr	r2, [ip]
    4618:	cmp	r2, #100	; 0x64
    461c:	blt	463c <coda_bin_cursor_read_int16_partial_array+0x6c>
    4620:	ldr	ip, [r7, #4]
    4624:	lsl	ip, ip, #4
    4628:	add	r1, r7, ip
    462c:	sub	lr, r1, #4096	; 0x1000
    4630:	ldr	r3, [lr, #4088]	; 0xff8
    4634:	ldr	r0, [r3, #4]
    4638:	b	4650 <coda_bin_cursor_read_int16_partial_array+0x80>
    463c:	ldr	r1, [r7, #4]
    4640:	lsl	r1, r1, #4
    4644:	add	r1, r7, r1
    4648:	sub	lr, r1, #4096	; 0x1000
    464c:	ldr	r0, [lr, #4088]	; 0xff8
    4650:	ldr	r3, [r0, #40]	; 0x28
    4654:	ldr	r3, [r3]
    4658:	cmp	r3, #1
    465c:	bne	4684 <coda_bin_cursor_read_int16_partial_array+0xb4>
    4660:	ldr	r1, [pc, #140]	; 46f4 <coda_bin_cursor_read_int16_partial_array+0x124>
    4664:	mov	r3, #2
    4668:	str	r3, [sp, #4]
    466c:	str	r4, [sp]
    4670:	mov	r3, r5
    4674:	mov	r2, r6
    4678:	mov	r0, r7
    467c:	bl	a5c <read_partial_array>
    4680:	b	46c8 <coda_bin_cursor_read_int16_partial_array+0xf8>
    4684:	ldr	r1, [r0, #40]	; 0x28
    4688:	ldr	r2, [r1]
    468c:	cmp	r2, #0
    4690:	beq	46a8 <coda_bin_cursor_read_int16_partial_array+0xd8>
    4694:	ldr	r0, [pc, #72]	; 46e4 <coda_bin_cursor_read_int16_partial_array+0x114>
    4698:	ldr	r1, [pc, #76]	; 46ec <coda_bin_cursor_read_int16_partial_array+0x11c>
    469c:	movw	r2, #1220	; 0x4c4
    46a0:	ldr	r3, [pc, #72]	; 46f0 <coda_bin_cursor_read_int16_partial_array+0x120>
    46a4:	bl	0 <__assert_fail>
    46a8:	ldr	r1, [pc, #56]	; 46e8 <coda_bin_cursor_read_int16_partial_array+0x118>
    46ac:	mov	r2, #2
    46b0:	str	r2, [sp, #4]
    46b4:	str	r4, [sp]
    46b8:	mov	r3, r5
    46bc:	mov	r2, r6
    46c0:	mov	r0, r7
    46c4:	bl	a5c <read_partial_array>
    46c8:	ldr	r4, [sp, #16]
    46cc:	ldr	r5, [sp, #20]
    46d0:	ldr	r6, [sp, #24]
    46d4:	ldr	r7, [sp, #28]
    46d8:	ldr	lr, [sp, #12]
    46dc:	add	sp, sp, #32
    46e0:	bx	lr
    46e4:	.word	0x000002b5
    46e8:	.word	0x00000000
    46ec:	.word	0x000001cc
    46f0:	.word	0x000008c4
    46f4:	.word	0x00000000

000046f8 <coda_bin_cursor_read_uint16_partial_array>:
    46f8:	mov	ip, sp
    46fc:	sub	sp, sp, #32
    4700:	str	ip, [sp, #8]
    4704:	str	lr, [sp, #12]
    4708:	str	r4, [sp, #16]
    470c:	str	r5, [sp, #20]
    4710:	str	r6, [sp, #24]
    4714:	str	r7, [sp, #28]
    4718:	mov	r4, r3
    471c:	mov	r5, r2
    4720:	mov	r6, r1
    4724:	mov	r7, r0
    4728:	ldr	r0, [r7, #4]
    472c:	lsl	r2, r0, #4
    4730:	add	r2, r7, r2
    4734:	sub	lr, r2, #4096	; 0x1000
    4738:	ldr	ip, [lr, #4088]	; 0xff8
    473c:	ldr	r2, [ip]
    4740:	cmp	r2, #100	; 0x64
    4744:	blt	4764 <coda_bin_cursor_read_uint16_partial_array+0x6c>
    4748:	ldr	ip, [r7, #4]
    474c:	lsl	ip, ip, #4
    4750:	add	r1, r7, ip
    4754:	sub	lr, r1, #4096	; 0x1000
    4758:	ldr	r3, [lr, #4088]	; 0xff8
    475c:	ldr	r0, [r3, #4]
    4760:	b	4778 <coda_bin_cursor_read_uint16_partial_array+0x80>
    4764:	ldr	r1, [r7, #4]
    4768:	lsl	r1, r1, #4
    476c:	add	r1, r7, r1
    4770:	sub	lr, r1, #4096	; 0x1000
    4774:	ldr	r0, [lr, #4088]	; 0xff8
    4778:	ldr	r3, [r0, #40]	; 0x28
    477c:	ldr	r3, [r3]
    4780:	cmp	r3, #1
    4784:	bne	47ac <coda_bin_cursor_read_uint16_partial_array+0xb4>
    4788:	ldr	r1, [pc, #140]	; 481c <coda_bin_cursor_read_uint16_partial_array+0x124>
    478c:	mov	r3, #2
    4790:	str	r3, [sp, #4]
    4794:	str	r4, [sp]
    4798:	mov	r3, r5
    479c:	mov	r2, r6
    47a0:	mov	r0, r7
    47a4:	bl	a5c <read_partial_array>
    47a8:	b	47f0 <coda_bin_cursor_read_uint16_partial_array+0xf8>
    47ac:	ldr	r1, [r0, #40]	; 0x28
    47b0:	ldr	r2, [r1]
    47b4:	cmp	r2, #0
    47b8:	beq	47d0 <coda_bin_cursor_read_uint16_partial_array+0xd8>
    47bc:	ldr	r0, [pc, #76]	; 4810 <coda_bin_cursor_read_uint16_partial_array+0x118>
    47c0:	ldr	r1, [pc, #80]	; 4818 <coda_bin_cursor_read_uint16_partial_array+0x120>
    47c4:	movw	r2, #1234	; 0x4d2
    47c8:	ldr	r3, [pc, #60]	; 480c <coda_bin_cursor_read_uint16_partial_array+0x114>
    47cc:	bl	0 <__assert_fail>
    47d0:	ldr	r1, [pc, #60]	; 4814 <coda_bin_cursor_read_uint16_partial_array+0x11c>
    47d4:	mov	r2, #2
    47d8:	str	r2, [sp, #4]
    47dc:	str	r4, [sp]
    47e0:	mov	r3, r5
    47e4:	mov	r2, r6
    47e8:	mov	r0, r7
    47ec:	bl	a5c <read_partial_array>
    47f0:	ldr	r4, [sp, #16]
    47f4:	ldr	r5, [sp, #20]
    47f8:	ldr	r6, [sp, #24]
    47fc:	ldr	r7, [sp, #28]
    4800:	ldr	lr, [sp, #12]
    4804:	add	sp, sp, #32
    4808:	bx	lr
    480c:	.word	0x000008ed
    4810:	.word	0x000002b5
    4814:	.word	0x00000000
    4818:	.word	0x000001cc
    481c:	.word	0x00000000

00004820 <coda_bin_cursor_read_int32_partial_array>:
    4820:	mov	ip, sp
    4824:	sub	sp, sp, #32
    4828:	str	ip, [sp, #8]
    482c:	str	lr, [sp, #12]
    4830:	str	r4, [sp, #16]
    4834:	str	r5, [sp, #20]
    4838:	str	r6, [sp, #24]
    483c:	str	r7, [sp, #28]
    4840:	mov	r4, r3
    4844:	mov	r5, r2
    4848:	mov	r6, r1
    484c:	mov	r7, r0
    4850:	ldr	r0, [r7, #4]
    4854:	lsl	r2, r0, #4
    4858:	add	r2, r7, r2
    485c:	sub	lr, r2, #4096	; 0x1000
    4860:	ldr	ip, [lr, #4088]	; 0xff8
    4864:	ldr	r2, [ip]
    4868:	cmp	r2, #100	; 0x64
    486c:	blt	488c <coda_bin_cursor_read_int32_partial_array+0x6c>
    4870:	ldr	ip, [r7, #4]
    4874:	lsl	ip, ip, #4
    4878:	add	r1, r7, ip
    487c:	sub	lr, r1, #4096	; 0x1000
    4880:	ldr	r3, [lr, #4088]	; 0xff8
    4884:	ldr	r0, [r3, #4]
    4888:	b	48a0 <coda_bin_cursor_read_int32_partial_array+0x80>
    488c:	ldr	r1, [r7, #4]
    4890:	lsl	r1, r1, #4
    4894:	add	r1, r7, r1
    4898:	sub	lr, r1, #4096	; 0x1000
    489c:	ldr	r0, [lr, #4088]	; 0xff8
    48a0:	ldr	r3, [r0, #40]	; 0x28
    48a4:	ldr	r3, [r3]
    48a8:	cmp	r3, #1
    48ac:	bne	48d4 <coda_bin_cursor_read_int32_partial_array+0xb4>
    48b0:	ldr	r1, [pc, #128]	; 4938 <coda_bin_cursor_read_int32_partial_array+0x118>
    48b4:	mov	r3, #4
    48b8:	str	r3, [sp, #4]
    48bc:	str	r4, [sp]
    48c0:	mov	r3, r5
    48c4:	mov	r2, r6
    48c8:	mov	r0, r7
    48cc:	bl	a5c <read_partial_array>
    48d0:	b	4918 <coda_bin_cursor_read_int32_partial_array+0xf8>
    48d4:	ldr	r1, [r0, #40]	; 0x28
    48d8:	ldr	r2, [r1]
    48dc:	cmp	r2, #0
    48e0:	beq	48f8 <coda_bin_cursor_read_int32_partial_array+0xd8>
    48e4:	ldr	r0, [pc, #84]	; 4940 <coda_bin_cursor_read_int32_partial_array+0x120>
    48e8:	ldr	r1, [pc, #84]	; 4944 <coda_bin_cursor_read_int32_partial_array+0x124>
    48ec:	mov	r2, #1248	; 0x4e0
    48f0:	ldr	r3, [pc, #68]	; 493c <coda_bin_cursor_read_int32_partial_array+0x11c>
    48f4:	bl	0 <__assert_fail>
    48f8:	ldr	r1, [pc, #52]	; 4934 <coda_bin_cursor_read_int32_partial_array+0x114>
    48fc:	mov	r2, #4
    4900:	str	r2, [sp, #4]
    4904:	str	r4, [sp]
    4908:	mov	r3, r5
    490c:	mov	r2, r6
    4910:	mov	r0, r7
    4914:	bl	a5c <read_partial_array>
    4918:	ldr	r4, [sp, #16]
    491c:	ldr	r5, [sp, #20]
    4920:	ldr	r6, [sp, #24]
    4924:	ldr	r7, [sp, #28]
    4928:	ldr	lr, [sp, #12]
    492c:	add	sp, sp, #32
    4930:	bx	lr
	...
    493c:	.word	0x00000917
    4940:	.word	0x000002b5
    4944:	.word	0x000001cc

00004948 <coda_bin_cursor_read_uint32_partial_array>:
    4948:	mov	ip, sp
    494c:	sub	sp, sp, #32
    4950:	str	ip, [sp, #8]
    4954:	str	lr, [sp, #12]
    4958:	str	r4, [sp, #16]
    495c:	str	r5, [sp, #20]
    4960:	str	r6, [sp, #24]
    4964:	str	r7, [sp, #28]
    4968:	mov	r4, r3
    496c:	mov	r5, r2
    4970:	mov	r6, r1
    4974:	mov	r7, r0
    4978:	ldr	r0, [r7, #4]
    497c:	lsl	r2, r0, #4
    4980:	add	r2, r7, r2
    4984:	sub	lr, r2, #4096	; 0x1000
    4988:	ldr	ip, [lr, #4088]	; 0xff8
    498c:	ldr	r2, [ip]
    4990:	cmp	r2, #100	; 0x64
    4994:	blt	49b4 <coda_bin_cursor_read_uint32_partial_array+0x6c>
    4998:	ldr	ip, [r7, #4]
    499c:	lsl	ip, ip, #4
    49a0:	add	r1, r7, ip
    49a4:	sub	lr, r1, #4096	; 0x1000
    49a8:	ldr	r3, [lr, #4088]	; 0xff8
    49ac:	ldr	r0, [r3, #4]
    49b0:	b	49c8 <coda_bin_cursor_read_uint32_partial_array+0x80>
    49b4:	ldr	r1, [r7, #4]
    49b8:	lsl	r1, r1, #4
    49bc:	add	r1, r7, r1
    49c0:	sub	lr, r1, #4096	; 0x1000
    49c4:	ldr	r0, [lr, #4088]	; 0xff8
    49c8:	ldr	r3, [r0, #40]	; 0x28
    49cc:	ldr	r3, [r3]
    49d0:	cmp	r3, #1
    49d4:	bne	49fc <coda_bin_cursor_read_uint32_partial_array+0xb4>
    49d8:	ldr	r1, [pc, #140]	; 4a6c <coda_bin_cursor_read_uint32_partial_array+0x124>
    49dc:	mov	r3, #4
    49e0:	str	r3, [sp, #4]
    49e4:	str	r4, [sp]
    49e8:	mov	r3, r5
    49ec:	mov	r2, r6
    49f0:	mov	r0, r7
    49f4:	bl	a5c <read_partial_array>
    49f8:	b	4a40 <coda_bin_cursor_read_uint32_partial_array+0xf8>
    49fc:	ldr	r1, [r0, #40]	; 0x28
    4a00:	ldr	r2, [r1]
    4a04:	cmp	r2, #0
    4a08:	beq	4a20 <coda_bin_cursor_read_uint32_partial_array+0xd8>
    4a0c:	ldr	r0, [pc, #76]	; 4a60 <coda_bin_cursor_read_uint32_partial_array+0x118>
    4a10:	ldr	r1, [pc, #80]	; 4a68 <coda_bin_cursor_read_uint32_partial_array+0x120>
    4a14:	movw	r2, #1262	; 0x4ee
    4a18:	ldr	r3, [pc, #60]	; 4a5c <coda_bin_cursor_read_uint32_partial_array+0x114>
    4a1c:	bl	0 <__assert_fail>
    4a20:	ldr	r1, [pc, #60]	; 4a64 <coda_bin_cursor_read_uint32_partial_array+0x11c>
    4a24:	mov	r2, #4
    4a28:	str	r2, [sp, #4]
    4a2c:	str	r4, [sp]
    4a30:	mov	r3, r5
    4a34:	mov	r2, r6
    4a38:	mov	r0, r7
    4a3c:	bl	a5c <read_partial_array>
    4a40:	ldr	r4, [sp, #16]
    4a44:	ldr	r5, [sp, #20]
    4a48:	ldr	r6, [sp, #24]
    4a4c:	ldr	r7, [sp, #28]
    4a50:	ldr	lr, [sp, #12]
    4a54:	add	sp, sp, #32
    4a58:	bx	lr
    4a5c:	.word	0x00000940
    4a60:	.word	0x000002b5
    4a64:	.word	0x00000000
    4a68:	.word	0x000001cc
    4a6c:	.word	0x00000000

00004a70 <coda_bin_cursor_read_int64_partial_array>:
    4a70:	mov	ip, sp
    4a74:	sub	sp, sp, #32
    4a78:	str	ip, [sp, #8]
    4a7c:	str	lr, [sp, #12]
    4a80:	str	r4, [sp, #16]
    4a84:	str	r5, [sp, #20]
    4a88:	str	r6, [sp, #24]
    4a8c:	str	r7, [sp, #28]
    4a90:	mov	r4, r3
    4a94:	mov	r5, r2
    4a98:	mov	r6, r1
    4a9c:	mov	r7, r0
    4aa0:	ldr	r0, [r7, #4]
    4aa4:	lsl	r2, r0, #4
    4aa8:	add	r2, r7, r2
    4aac:	sub	lr, r2, #4096	; 0x1000
    4ab0:	ldr	ip, [lr, #4088]	; 0xff8
    4ab4:	ldr	r2, [ip]
    4ab8:	cmp	r2, #100	; 0x64
    4abc:	blt	4adc <coda_bin_cursor_read_int64_partial_array+0x6c>
    4ac0:	ldr	ip, [r7, #4]
    4ac4:	lsl	ip, ip, #4
    4ac8:	add	r1, r7, ip
    4acc:	sub	lr, r1, #4096	; 0x1000
    4ad0:	ldr	r3, [lr, #4088]	; 0xff8
    4ad4:	ldr	r0, [r3, #4]
    4ad8:	b	4af0 <coda_bin_cursor_read_int64_partial_array+0x80>
    4adc:	ldr	r1, [r7, #4]
    4ae0:	lsl	r1, r1, #4
    4ae4:	add	r1, r7, r1
    4ae8:	sub	lr, r1, #4096	; 0x1000
    4aec:	ldr	r0, [lr, #4088]	; 0xff8
    4af0:	ldr	r3, [r0, #40]	; 0x28
    4af4:	ldr	r3, [r3]
    4af8:	cmp	r3, #1
    4afc:	bne	4b24 <coda_bin_cursor_read_int64_partial_array+0xb4>
    4b00:	ldr	r1, [pc, #136]	; 4b90 <coda_bin_cursor_read_int64_partial_array+0x120>
    4b04:	mov	r3, #8
    4b08:	str	r3, [sp, #4]
    4b0c:	str	r4, [sp]
    4b10:	mov	r3, r5
    4b14:	mov	r2, r6
    4b18:	mov	r0, r7
    4b1c:	bl	a5c <read_partial_array>
    4b20:	b	4b68 <coda_bin_cursor_read_int64_partial_array+0xf8>
    4b24:	ldr	r1, [r0, #40]	; 0x28
    4b28:	ldr	r2, [r1]
    4b2c:	cmp	r2, #0
    4b30:	beq	4b48 <coda_bin_cursor_read_int64_partial_array+0xd8>
    4b34:	ldr	r0, [pc, #72]	; 4b84 <coda_bin_cursor_read_int64_partial_array+0x114>
    4b38:	ldr	r1, [pc, #76]	; 4b8c <coda_bin_cursor_read_int64_partial_array+0x11c>
    4b3c:	movw	r2, #1276	; 0x4fc
    4b40:	ldr	r3, [pc, #76]	; 4b94 <coda_bin_cursor_read_int64_partial_array+0x124>
    4b44:	bl	0 <__assert_fail>
    4b48:	ldr	r1, [pc, #56]	; 4b88 <coda_bin_cursor_read_int64_partial_array+0x118>
    4b4c:	mov	r2, #8
    4b50:	str	r2, [sp, #4]
    4b54:	str	r4, [sp]
    4b58:	mov	r3, r5
    4b5c:	mov	r2, r6
    4b60:	mov	r0, r7
    4b64:	bl	a5c <read_partial_array>
    4b68:	ldr	r4, [sp, #16]
    4b6c:	ldr	r5, [sp, #20]
    4b70:	ldr	r6, [sp, #24]
    4b74:	ldr	r7, [sp, #28]
    4b78:	ldr	lr, [sp, #12]
    4b7c:	add	sp, sp, #32
    4b80:	bx	lr
    4b84:	.word	0x000002b5
    4b88:	.word	0x00000000
    4b8c:	.word	0x000001cc
    4b90:	.word	0x00000000
    4b94:	.word	0x0000096a

00004b98 <coda_bin_cursor_read_uint64_partial_array>:
    4b98:	mov	ip, sp
    4b9c:	sub	sp, sp, #32
    4ba0:	str	ip, [sp, #8]
    4ba4:	str	lr, [sp, #12]
    4ba8:	str	r4, [sp, #16]
    4bac:	str	r5, [sp, #20]
    4bb0:	str	r6, [sp, #24]
    4bb4:	str	r7, [sp, #28]
    4bb8:	mov	r4, r3
    4bbc:	mov	r5, r2
    4bc0:	mov	r6, r1
    4bc4:	mov	r7, r0
    4bc8:	ldr	r0, [r7, #4]
    4bcc:	lsl	r2, r0, #4
    4bd0:	add	r2, r7, r2
    4bd4:	sub	lr, r2, #4096	; 0x1000
    4bd8:	ldr	ip, [lr, #4088]	; 0xff8
    4bdc:	ldr	r2, [ip]
    4be0:	cmp	r2, #100	; 0x64
    4be4:	blt	4c04 <coda_bin_cursor_read_uint64_partial_array+0x6c>
    4be8:	ldr	ip, [r7, #4]
    4bec:	lsl	ip, ip, #4
    4bf0:	add	r1, r7, ip
    4bf4:	sub	lr, r1, #4096	; 0x1000
    4bf8:	ldr	r3, [lr, #4088]	; 0xff8
    4bfc:	ldr	r0, [r3, #4]
    4c00:	b	4c18 <coda_bin_cursor_read_uint64_partial_array+0x80>
    4c04:	ldr	r1, [r7, #4]
    4c08:	lsl	r1, r1, #4
    4c0c:	add	r1, r7, r1
    4c10:	sub	lr, r1, #4096	; 0x1000
    4c14:	ldr	r0, [lr, #4088]	; 0xff8
    4c18:	ldr	r3, [r0, #40]	; 0x28
    4c1c:	ldr	r3, [r3]
    4c20:	cmp	r3, #1
    4c24:	bne	4c4c <coda_bin_cursor_read_uint64_partial_array+0xb4>
    4c28:	ldr	r1, [pc, #132]	; 4cb4 <coda_bin_cursor_read_uint64_partial_array+0x11c>
    4c2c:	mov	r3, #8
    4c30:	str	r3, [sp, #4]
    4c34:	str	r4, [sp]
    4c38:	mov	r3, r5
    4c3c:	mov	r2, r6
    4c40:	mov	r0, r7
    4c44:	bl	a5c <read_partial_array>
    4c48:	b	4c90 <coda_bin_cursor_read_uint64_partial_array+0xf8>
    4c4c:	ldr	r1, [r0, #40]	; 0x28
    4c50:	ldr	r2, [r1]
    4c54:	cmp	r2, #0
    4c58:	beq	4c70 <coda_bin_cursor_read_uint64_partial_array+0xd8>
    4c5c:	ldr	r0, [pc, #72]	; 4cac <coda_bin_cursor_read_uint64_partial_array+0x114>
    4c60:	ldr	r1, [pc, #80]	; 4cb8 <coda_bin_cursor_read_uint64_partial_array+0x120>
    4c64:	movw	r2, #1290	; 0x50a
    4c68:	ldr	r3, [pc, #64]	; 4cb0 <coda_bin_cursor_read_uint64_partial_array+0x118>
    4c6c:	bl	0 <__assert_fail>
    4c70:	ldr	r1, [pc, #68]	; 4cbc <coda_bin_cursor_read_uint64_partial_array+0x124>
    4c74:	mov	r2, #8
    4c78:	str	r2, [sp, #4]
    4c7c:	str	r4, [sp]
    4c80:	mov	r3, r5
    4c84:	mov	r2, r6
    4c88:	mov	r0, r7
    4c8c:	bl	a5c <read_partial_array>
    4c90:	ldr	r4, [sp, #16]
    4c94:	ldr	r5, [sp, #20]
    4c98:	ldr	r6, [sp, #24]
    4c9c:	ldr	r7, [sp, #28]
    4ca0:	ldr	lr, [sp, #12]
    4ca4:	add	sp, sp, #32
    4ca8:	bx	lr
    4cac:	.word	0x000002b5
    4cb0:	.word	0x00000993
    4cb4:	.word	0x00000000
    4cb8:	.word	0x000001cc
    4cbc:	.word	0x00000000

00004cc0 <coda_bin_cursor_read_float_partial_array>:
    4cc0:	mov	ip, sp
    4cc4:	sub	sp, sp, #32
    4cc8:	str	ip, [sp, #8]
    4ccc:	str	lr, [sp, #12]
    4cd0:	str	r4, [sp, #16]
    4cd4:	str	r5, [sp, #20]
    4cd8:	str	r6, [sp, #24]
    4cdc:	str	r7, [sp, #28]
    4ce0:	mov	r4, r3
    4ce4:	mov	r5, r2
    4ce8:	mov	r6, r1
    4cec:	mov	r7, r0
    4cf0:	ldr	r0, [r7, #4]
    4cf4:	lsl	r2, r0, #4
    4cf8:	add	r2, r7, r2
    4cfc:	sub	lr, r2, #4096	; 0x1000
    4d00:	ldr	ip, [lr, #4088]	; 0xff8
    4d04:	ldr	r2, [ip]
    4d08:	cmp	r2, #100	; 0x64
    4d0c:	blt	4d2c <coda_bin_cursor_read_float_partial_array+0x6c>
    4d10:	ldr	ip, [r7, #4]
    4d14:	lsl	ip, ip, #4
    4d18:	add	r1, r7, ip
    4d1c:	sub	lr, r1, #4096	; 0x1000
    4d20:	ldr	r3, [lr, #4088]	; 0xff8
    4d24:	ldr	r0, [r3, #4]
    4d28:	b	4d40 <coda_bin_cursor_read_float_partial_array+0x80>
    4d2c:	ldr	r1, [r7, #4]
    4d30:	lsl	r1, r1, #4
    4d34:	add	r1, r7, r1
    4d38:	sub	lr, r1, #4096	; 0x1000
    4d3c:	ldr	r0, [lr, #4088]	; 0xff8
    4d40:	ldr	r3, [r0, #40]	; 0x28
    4d44:	ldr	r3, [r3]
    4d48:	cmp	r3, #1
    4d4c:	bne	4d74 <coda_bin_cursor_read_float_partial_array+0xb4>
    4d50:	ldr	r1, [pc, #136]	; 4de0 <coda_bin_cursor_read_float_partial_array+0x120>
    4d54:	mov	r3, #4
    4d58:	str	r3, [sp, #4]
    4d5c:	str	r4, [sp]
    4d60:	mov	r3, r5
    4d64:	mov	r2, r6
    4d68:	mov	r0, r7
    4d6c:	bl	a5c <read_partial_array>
    4d70:	b	4db8 <coda_bin_cursor_read_float_partial_array+0xf8>
    4d74:	ldr	r1, [r0, #40]	; 0x28
    4d78:	ldr	r2, [r1]
    4d7c:	cmp	r2, #0
    4d80:	beq	4d98 <coda_bin_cursor_read_float_partial_array+0xd8>
    4d84:	ldr	r0, [pc, #76]	; 4dd8 <coda_bin_cursor_read_float_partial_array+0x118>
    4d88:	ldr	r1, [pc, #84]	; 4de4 <coda_bin_cursor_read_float_partial_array+0x124>
    4d8c:	movw	r2, #1304	; 0x518
    4d90:	ldr	r3, [pc, #68]	; 4ddc <coda_bin_cursor_read_float_partial_array+0x11c>
    4d94:	bl	0 <__assert_fail>
    4d98:	ldr	r1, [pc, #52]	; 4dd4 <coda_bin_cursor_read_float_partial_array+0x114>
    4d9c:	mov	r2, #4
    4da0:	str	r2, [sp, #4]
    4da4:	str	r4, [sp]
    4da8:	mov	r3, r5
    4dac:	mov	r2, r6
    4db0:	mov	r0, r7
    4db4:	bl	a5c <read_partial_array>
    4db8:	ldr	r4, [sp, #16]
    4dbc:	ldr	r5, [sp, #20]
    4dc0:	ldr	r6, [sp, #24]
    4dc4:	ldr	r7, [sp, #28]
    4dc8:	ldr	lr, [sp, #12]
    4dcc:	add	sp, sp, #32
    4dd0:	bx	lr
    4dd4:	.word	0x00000000
    4dd8:	.word	0x000002b5
    4ddc:	.word	0x000009bd
    4de0:	.word	0x00000000
    4de4:	.word	0x000001cc

00004de8 <coda_bin_cursor_read_double_partial_array>:
    4de8:	mov	ip, sp
    4dec:	sub	sp, sp, #32
    4df0:	str	ip, [sp, #8]
    4df4:	str	lr, [sp, #12]
    4df8:	str	r4, [sp, #16]
    4dfc:	str	r5, [sp, #20]
    4e00:	str	r6, [sp, #24]
    4e04:	str	r7, [sp, #28]
    4e08:	mov	r4, r3
    4e0c:	mov	r5, r2
    4e10:	mov	r6, r1
    4e14:	mov	r7, r0
    4e18:	ldr	r0, [r7, #4]
    4e1c:	lsl	r2, r0, #4
    4e20:	add	r2, r7, r2
    4e24:	sub	lr, r2, #4096	; 0x1000
    4e28:	ldr	ip, [lr, #4088]	; 0xff8
    4e2c:	ldr	r2, [ip]
    4e30:	cmp	r2, #100	; 0x64
    4e34:	blt	4e54 <coda_bin_cursor_read_double_partial_array+0x6c>
    4e38:	ldr	ip, [r7, #4]
    4e3c:	lsl	ip, ip, #4
    4e40:	add	r1, r7, ip
    4e44:	sub	lr, r1, #4096	; 0x1000
    4e48:	ldr	r3, [lr, #4088]	; 0xff8
    4e4c:	ldr	r0, [r3, #4]
    4e50:	b	4e68 <coda_bin_cursor_read_double_partial_array+0x80>
    4e54:	ldr	r1, [r7, #4]
    4e58:	lsl	r1, r1, #4
    4e5c:	add	r1, r7, r1
    4e60:	sub	lr, r1, #4096	; 0x1000
    4e64:	ldr	r0, [lr, #4088]	; 0xff8
    4e68:	ldr	r3, [r0, #40]	; 0x28
    4e6c:	ldr	r3, [r3]
    4e70:	cmp	r3, #1
    4e74:	bne	4e9c <coda_bin_cursor_read_double_partial_array+0xb4>
    4e78:	ldr	r1, [pc, #140]	; 4f0c <coda_bin_cursor_read_double_partial_array+0x124>
    4e7c:	mov	r3, #8
    4e80:	str	r3, [sp, #4]
    4e84:	str	r4, [sp]
    4e88:	mov	r3, r5
    4e8c:	mov	r2, r6
    4e90:	mov	r0, r7
    4e94:	bl	a5c <read_partial_array>
    4e98:	b	4ee0 <coda_bin_cursor_read_double_partial_array+0xf8>
    4e9c:	ldr	r1, [r0, #40]	; 0x28
    4ea0:	ldr	r2, [r1]
    4ea4:	cmp	r2, #0
    4ea8:	beq	4ec0 <coda_bin_cursor_read_double_partial_array+0xd8>
    4eac:	ldr	r0, [pc, #72]	; 4efc <coda_bin_cursor_read_double_partial_array+0x114>
    4eb0:	ldr	r1, [pc, #72]	; 4f00 <coda_bin_cursor_read_double_partial_array+0x118>
    4eb4:	movw	r2, #1318	; 0x526
    4eb8:	ldr	r3, [pc, #68]	; 4f04 <coda_bin_cursor_read_double_partial_array+0x11c>
    4ebc:	bl	0 <__assert_fail>
    4ec0:	ldr	r1, [pc, #64]	; 4f08 <coda_bin_cursor_read_double_partial_array+0x120>
    4ec4:	mov	r2, #8
    4ec8:	str	r2, [sp, #4]
    4ecc:	str	r4, [sp]
    4ed0:	mov	r3, r5
    4ed4:	mov	r2, r6
    4ed8:	mov	r0, r7
    4edc:	bl	a5c <read_partial_array>
    4ee0:	ldr	r4, [sp, #16]
    4ee4:	ldr	r5, [sp, #20]
    4ee8:	ldr	r6, [sp, #24]
    4eec:	ldr	r7, [sp, #28]
    4ef0:	ldr	lr, [sp, #12]
    4ef4:	add	sp, sp, #32
    4ef8:	bx	lr
    4efc:	.word	0x000002b5
    4f00:	.word	0x000001cc
    4f04:	.word	0x000009e6
	...

00004f10 <coda_bin_cursor_read_char_partial_array>:
    4f10:	mov	ip, sp
    4f14:	sub	sp, sp, #32
    4f18:	str	ip, [sp, #8]
    4f1c:	str	lr, [sp, #12]
    4f20:	str	r4, [sp, #16]
    4f24:	str	r5, [sp, #20]
    4f28:	str	r6, [sp, #24]
    4f2c:	str	r7, [sp, #28]
    4f30:	mov	r4, r3
    4f34:	mov	r5, r2
    4f38:	mov	r6, r1
    4f3c:	mov	r7, r0
    4f40:	ldr	r0, [r7, #4]
    4f44:	lsl	r2, r0, #4
    4f48:	add	r2, r7, r2
    4f4c:	sub	lr, r2, #4096	; 0x1000
    4f50:	ldr	ip, [lr, #4088]	; 0xff8
    4f54:	ldr	r2, [ip]
    4f58:	cmp	r2, #100	; 0x64
    4f5c:	blt	4f7c <coda_bin_cursor_read_char_partial_array+0x6c>
    4f60:	ldr	ip, [r7, #4]
    4f64:	lsl	ip, ip, #4
    4f68:	add	r1, r7, ip
    4f6c:	sub	lr, r1, #4096	; 0x1000
    4f70:	ldr	r3, [lr, #4088]	; 0xff8
    4f74:	ldr	r0, [r3, #4]
    4f78:	b	4f90 <coda_bin_cursor_read_char_partial_array+0x80>
    4f7c:	ldr	r1, [r7, #4]
    4f80:	lsl	r1, r1, #4
    4f84:	add	r1, r7, r1
    4f88:	sub	lr, r1, #4096	; 0x1000
    4f8c:	ldr	r0, [lr, #4088]	; 0xff8
    4f90:	ldr	r3, [r0, #40]	; 0x28
    4f94:	ldr	r3, [r3]
    4f98:	cmp	r3, #1
    4f9c:	bne	4fc4 <coda_bin_cursor_read_char_partial_array+0xb4>
    4fa0:	ldr	r1, [pc, #140]	; 5034 <coda_bin_cursor_read_char_partial_array+0x124>
    4fa4:	mov	r3, #1
    4fa8:	str	r3, [sp, #4]
    4fac:	str	r4, [sp]
    4fb0:	mov	r3, r5
    4fb4:	mov	r2, r6
    4fb8:	mov	r0, r7
    4fbc:	bl	a5c <read_partial_array>
    4fc0:	b	5008 <coda_bin_cursor_read_char_partial_array+0xf8>
    4fc4:	ldr	r1, [r0, #40]	; 0x28
    4fc8:	ldr	r2, [r1]
    4fcc:	cmp	r2, #0
    4fd0:	beq	4fe8 <coda_bin_cursor_read_char_partial_array+0xd8>
    4fd4:	ldr	r0, [pc, #76]	; 5028 <coda_bin_cursor_read_char_partial_array+0x118>
    4fd8:	ldr	r1, [pc, #76]	; 502c <coda_bin_cursor_read_char_partial_array+0x11c>
    4fdc:	movw	r2, #1332	; 0x534
    4fe0:	ldr	r3, [pc, #72]	; 5030 <coda_bin_cursor_read_char_partial_array+0x120>
    4fe4:	bl	0 <__assert_fail>
    4fe8:	ldr	r1, [pc, #52]	; 5024 <coda_bin_cursor_read_char_partial_array+0x114>
    4fec:	mov	r2, #1
    4ff0:	str	r2, [sp, #4]
    4ff4:	str	r4, [sp]
    4ff8:	mov	r3, r5
    4ffc:	mov	r2, r6
    5000:	mov	r0, r7
    5004:	bl	a5c <read_partial_array>
    5008:	ldr	r4, [sp, #16]
    500c:	ldr	r5, [sp, #20]
    5010:	ldr	r6, [sp, #24]
    5014:	ldr	r7, [sp, #28]
    5018:	ldr	lr, [sp, #12]
    501c:	add	sp, sp, #32
    5020:	bx	lr
    5024:	.word	0x00000000
    5028:	.word	0x000002b5
    502c:	.word	0x000001cc
    5030:	.word	0x00000a10
    5034:	.word	0x00000000
