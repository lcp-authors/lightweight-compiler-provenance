
../compcert-repos/stcorp-coda-3a25f25/CMakeFiles/coda_static.dir/libcoda/coda-product.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <coda_recognize_file>:
       0:	push	{fp, lr}
       4:	mov	fp, sp
       8:	sub	sp, sp, #40	; 0x28
       c:	ldr	ip, [fp, #12]
      10:	ldr	lr, [fp, #8]
      14:	str	r0, [fp, #-8]
      18:	str	r1, [fp, #-12]
      1c:	str	r2, [fp, #-16]
      20:	str	r3, [sp, #20]
      24:	movw	r0, #0
      28:	str	r0, [sp, #16]
      2c:	ldr	r1, [fp, #-8]
      30:	str	r0, [sp, #8]
      34:	mov	r0, r1
      38:	add	r1, sp, #12
      3c:	ldr	r2, [sp, #8]
      40:	str	ip, [sp, #4]
      44:	str	lr, [sp]
      48:	bl	1e4 <open_file>
      4c:	cmp	r0, #0
      50:	beq	60 <coda_recognize_file+0x60>
      54:	mvn	r0, #0
      58:	str	r0, [fp, #-4]
      5c:	b	1d8 <coda_recognize_file+0x1d8>
      60:	ldr	r0, [sp, #12]
      64:	add	r1, sp, #16
      68:	bl	0 <coda_data_dictionary_find_definition_for_product>
      6c:	cmp	r0, #0
      70:	beq	88 <coda_recognize_file+0x88>
      74:	ldr	r0, [sp, #12]
      78:	bl	2d0 <coda_close>
      7c:	mvn	r1, #0
      80:	str	r1, [fp, #-4]
      84:	b	1d8 <coda_recognize_file+0x1d8>
      88:	ldr	r0, [fp, #-12]
      8c:	movw	r1, #0
      90:	cmp	r0, r1
      94:	beq	b0 <coda_recognize_file+0xb0>
      98:	ldr	r0, [sp, #12]
      9c:	ldr	r1, [r0, #8]
      a0:	ldr	r0, [r0, #12]
      a4:	ldr	r2, [fp, #-12]
      a8:	str	r0, [r2, #4]
      ac:	str	r1, [r2]
      b0:	ldr	r0, [sp, #16]
      b4:	movw	r1, #0
      b8:	cmp	r0, r1
      bc:	bne	138 <coda_recognize_file+0x138>
      c0:	ldr	r0, [fp, #-16]
      c4:	movw	r1, #0
      c8:	cmp	r0, r1
      cc:	beq	e0 <coda_recognize_file+0xe0>
      d0:	ldr	r0, [sp, #12]
      d4:	ldr	r0, [r0, #16]
      d8:	ldr	r1, [fp, #-16]
      dc:	str	r0, [r1]
      e0:	ldr	r0, [sp, #20]
      e4:	movw	r1, #0
      e8:	cmp	r0, r1
      ec:	beq	fc <coda_recognize_file+0xfc>
      f0:	ldr	r0, [sp, #20]
      f4:	movw	r1, #0
      f8:	str	r1, [r0]
      fc:	ldr	r0, [fp, #8]
     100:	movw	r1, #0
     104:	cmp	r0, r1
     108:	beq	118 <coda_recognize_file+0x118>
     10c:	ldr	r0, [fp, #8]
     110:	movw	r1, #0
     114:	str	r1, [r0]
     118:	ldr	r0, [fp, #12]
     11c:	movw	r1, #0
     120:	cmp	r0, r1
     124:	beq	134 <coda_recognize_file+0x134>
     128:	ldr	r0, [fp, #12]
     12c:	mvn	r1, #0
     130:	str	r1, [r0]
     134:	b	1c8 <coda_recognize_file+0x1c8>
     138:	ldr	r0, [fp, #-16]
     13c:	movw	r1, #0
     140:	cmp	r0, r1
     144:	beq	158 <coda_recognize_file+0x158>
     148:	ldr	r0, [sp, #16]
     14c:	ldr	r0, [r0]
     150:	ldr	r1, [fp, #-16]
     154:	str	r0, [r1]
     158:	ldr	r0, [sp, #20]
     15c:	movw	r1, #0
     160:	cmp	r0, r1
     164:	beq	180 <coda_recognize_file+0x180>
     168:	ldr	r0, [sp, #16]
     16c:	ldr	r0, [r0, #44]	; 0x2c
     170:	ldr	r0, [r0, #20]
     174:	ldr	r0, [r0]
     178:	ldr	r1, [sp, #20]
     17c:	str	r0, [r1]
     180:	ldr	r0, [fp, #8]
     184:	movw	r1, #0
     188:	cmp	r0, r1
     18c:	beq	1a4 <coda_recognize_file+0x1a4>
     190:	ldr	r0, [sp, #16]
     194:	ldr	r0, [r0, #44]	; 0x2c
     198:	ldr	r0, [r0]
     19c:	ldr	r1, [fp, #8]
     1a0:	str	r0, [r1]
     1a4:	ldr	r0, [fp, #12]
     1a8:	movw	r1, #0
     1ac:	cmp	r0, r1
     1b0:	beq	1c4 <coda_recognize_file+0x1c4>
     1b4:	ldr	r0, [sp, #16]
     1b8:	ldr	r0, [r0, #4]
     1bc:	ldr	r1, [fp, #12]
     1c0:	str	r0, [r1]
     1c4:	b	1c8 <coda_recognize_file+0x1c8>
     1c8:	ldr	r0, [sp, #12]
     1cc:	bl	2d0 <coda_close>
     1d0:	movw	r1, #0
     1d4:	str	r1, [fp, #-4]
     1d8:	ldr	r0, [fp, #-4]
     1dc:	mov	sp, fp
     1e0:	pop	{fp, pc}

000001e4 <open_file>:
     1e4:	push	{fp, lr}
     1e8:	mov	fp, sp
     1ec:	sub	sp, sp, #40	; 0x28
     1f0:	str	r0, [fp, #-8]
     1f4:	str	r1, [fp, #-12]
     1f8:	str	r2, [fp, #-16]
     1fc:	ldr	r0, [fp, #-8]
     200:	add	r1, sp, #8
     204:	bl	12bc <get_file_size>
     208:	cmp	r0, #0
     20c:	beq	21c <open_file+0x38>
     210:	mvn	r0, #0
     214:	str	r0, [fp, #-4]
     218:	b	2c4 <open_file+0xe0>
     21c:	ldr	r0, [fp, #-8]
     220:	ldr	r2, [sp, #8]
     224:	ldr	r3, [sp, #12]
     228:	mov	r1, sp
     22c:	add	ip, sp, #20
     230:	str	ip, [r1]
     234:	bl	0 <coda_bin_open>
     238:	cmp	r0, #0
     23c:	beq	24c <open_file+0x68>
     240:	mvn	r0, #0
     244:	str	r0, [fp, #-4]
     248:	b	2c4 <open_file+0xe0>
     24c:	ldr	r0, [fp, #-16]
     250:	cmp	r0, #0
     254:	beq	264 <open_file+0x80>
     258:	movw	r0, #1
     25c:	str	r0, [sp, #4]
     260:	b	290 <open_file+0xac>
     264:	ldr	r0, [sp, #20]
     268:	add	r1, sp, #4
     26c:	bl	13e8 <get_format>
     270:	cmp	r0, #0
     274:	beq	28c <open_file+0xa8>
     278:	ldr	r0, [sp, #20]
     27c:	bl	2d0 <coda_close>
     280:	mvn	r1, #0
     284:	str	r1, [fp, #-4]
     288:	b	2c4 <open_file+0xe0>
     28c:	b	290 <open_file+0xac>
     290:	ldr	r1, [sp, #4]
     294:	add	r0, sp, #20
     298:	bl	1a30 <reopen_with_backend>
     29c:	cmp	r0, #0
     2a0:	beq	2b0 <open_file+0xcc>
     2a4:	mvn	r0, #0
     2a8:	str	r0, [fp, #-4]
     2ac:	b	2c4 <open_file+0xe0>
     2b0:	ldr	r0, [sp, #20]
     2b4:	ldr	r1, [fp, #-12]
     2b8:	str	r0, [r1]
     2bc:	movw	r0, #0
     2c0:	str	r0, [fp, #-4]
     2c4:	ldr	r0, [fp, #-4]
     2c8:	mov	sp, fp
     2cc:	pop	{fp, pc}

000002d0 <coda_close>:
     2d0:	push	{fp, lr}
     2d4:	mov	fp, sp
     2d8:	sub	sp, sp, #16
     2dc:	str	r0, [sp, #8]
     2e0:	ldr	r0, [sp, #8]
     2e4:	movw	r1, #0
     2e8:	cmp	r0, r1
     2ec:	bne	318 <coda_close+0x48>
     2f0:	mvn	r0, #99	; 0x63
     2f4:	movw	r1, #0
     2f8:	movt	r1, #0
     2fc:	movw	r2, #0
     300:	movt	r2, #0
     304:	movw	r3, #777	; 0x309
     308:	bl	0 <coda_set_error>
     30c:	mvn	r0, #0
     310:	str	r0, [fp, #-4]
     314:	b	4f8 <coda_close+0x228>
     318:	ldr	r0, [sp, #8]
     31c:	ldr	r0, [r0, #28]
     320:	movw	r1, #0
     324:	cmp	r0, r1
     328:	beq	344 <coda_close+0x74>
     32c:	ldr	r0, [sp, #8]
     330:	ldr	r0, [r0, #28]
     334:	bl	0 <free>
     338:	ldr	r0, [sp, #8]
     33c:	movw	r1, #0
     340:	str	r1, [r0, #28]
     344:	ldr	r0, [sp, #8]
     348:	ldr	r0, [r0, #32]
     34c:	movw	r1, #0
     350:	cmp	r0, r1
     354:	beq	3dc <coda_close+0x10c>
     358:	movw	r0, #0
     35c:	str	r0, [sp, #4]
     360:	ldr	r0, [sp, #4]
     364:	ldr	r1, [sp, #8]
     368:	ldr	r1, [r1, #24]
     36c:	ldr	r1, [r1, #32]
     370:	cmp	r0, r1
     374:	bge	3c4 <coda_close+0xf4>
     378:	ldr	r0, [sp, #8]
     37c:	ldr	r0, [r0, #32]
     380:	ldr	r1, [sp, #4]
     384:	add	r0, r0, r1, lsl #2
     388:	ldr	r0, [r0]
     38c:	movw	r1, #0
     390:	cmp	r0, r1
     394:	beq	3b0 <coda_close+0xe0>
     398:	ldr	r0, [sp, #8]
     39c:	ldr	r0, [r0, #32]
     3a0:	ldr	r1, [sp, #4]
     3a4:	add	r0, r0, r1, lsl #2
     3a8:	ldr	r0, [r0]
     3ac:	bl	0 <free>
     3b0:	b	3b4 <coda_close+0xe4>
     3b4:	ldr	r0, [sp, #4]
     3b8:	add	r0, r0, #1
     3bc:	str	r0, [sp, #4]
     3c0:	b	360 <coda_close+0x90>
     3c4:	ldr	r0, [sp, #8]
     3c8:	ldr	r0, [r0, #32]
     3cc:	bl	0 <free>
     3d0:	ldr	r0, [sp, #8]
     3d4:	movw	r1, #0
     3d8:	str	r1, [r0, #32]
     3dc:	ldr	r0, [sp, #8]
     3e0:	ldr	r0, [r0, #16]
     3e4:	cmp	r0, #9
     3e8:	str	r0, [sp]
     3ec:	bhi	4d8 <coda_close+0x208>
     3f0:	add	r0, pc, #8
     3f4:	ldr	r1, [sp]
     3f8:	ldr	r0, [r0, r1, lsl #2]
     3fc:	mov	pc, r0
     400:	.word	0x00000428
     404:	.word	0x00000438
     408:	.word	0x00000448
     40c:	.word	0x00000488
     410:	.word	0x000004a0
     414:	.word	0x00000458
     418:	.word	0x00000468
     41c:	.word	0x00000478
     420:	.word	0x000004b8
     424:	.word	0x000004c8
     428:	ldr	r0, [sp, #8]
     42c:	bl	0 <coda_ascii_close>
     430:	str	r0, [fp, #-4]
     434:	b	4f8 <coda_close+0x228>
     438:	ldr	r0, [sp, #8]
     43c:	bl	0 <coda_bin_close>
     440:	str	r0, [fp, #-4]
     444:	b	4f8 <coda_close+0x228>
     448:	ldr	r0, [sp, #8]
     44c:	bl	0 <coda_xml_close>
     450:	str	r0, [fp, #-4]
     454:	b	4f8 <coda_close+0x228>
     458:	ldr	r0, [sp, #8]
     45c:	bl	0 <coda_cdf_close>
     460:	str	r0, [fp, #-4]
     464:	b	4f8 <coda_close+0x228>
     468:	ldr	r0, [sp, #8]
     46c:	bl	0 <coda_netcdf_close>
     470:	str	r0, [fp, #-4]
     474:	b	4f8 <coda_close+0x228>
     478:	ldr	r0, [sp, #8]
     47c:	bl	0 <coda_grib_close>
     480:	str	r0, [fp, #-4]
     484:	b	4f8 <coda_close+0x228>
     488:	mvn	r0, #10
     48c:	movw	r1, #0
     490:	bl	0 <coda_set_error>
     494:	mvn	r0, #0
     498:	str	r0, [fp, #-4]
     49c:	b	4f8 <coda_close+0x228>
     4a0:	mvn	r0, #12
     4a4:	movw	r1, #0
     4a8:	bl	0 <coda_set_error>
     4ac:	mvn	r0, #0
     4b0:	str	r0, [fp, #-4]
     4b4:	b	4f8 <coda_close+0x228>
     4b8:	ldr	r0, [sp, #8]
     4bc:	bl	0 <coda_rinex_close>
     4c0:	str	r0, [fp, #-4]
     4c4:	b	4f8 <coda_close+0x228>
     4c8:	ldr	r0, [sp, #8]
     4cc:	bl	0 <coda_sp3_close>
     4d0:	str	r0, [fp, #-4]
     4d4:	b	4f8 <coda_close+0x228>
     4d8:	movw	r0, #0
     4dc:	movt	r0, #0
     4e0:	movw	r1, #0
     4e4:	movt	r1, #0
     4e8:	movw	r2, #836	; 0x344
     4ec:	movw	r3, #0
     4f0:	movt	r3, #0
     4f4:	bl	0 <__assert_fail>
     4f8:	ldr	r0, [fp, #-4]
     4fc:	mov	sp, fp
     500:	pop	{fp, pc}

00000504 <coda_open>:
     504:	push	{fp, lr}
     508:	mov	fp, sp
     50c:	sub	sp, sp, #24
     510:	str	r0, [fp, #-8]
     514:	str	r1, [sp, #12]
     518:	movw	r0, #0
     51c:	str	r0, [sp, #8]
     520:	ldr	r1, [fp, #-8]
     524:	cmp	r1, r0
     528:	bne	554 <coda_open+0x50>
     52c:	mvn	r0, #99	; 0x63
     530:	movw	r1, #0
     534:	movt	r1, #0
     538:	movw	r2, #0
     53c:	movt	r2, #0
     540:	movw	r3, #668	; 0x29c
     544:	bl	0 <coda_set_error>
     548:	mvn	r0, #0
     54c:	str	r0, [fp, #-4]
     550:	b	614 <coda_open+0x110>
     554:	ldr	r0, [sp, #12]
     558:	movw	r1, #0
     55c:	cmp	r0, r1
     560:	bne	58c <coda_open+0x88>
     564:	mvn	r0, #99	; 0x63
     568:	movw	r1, #0
     56c:	movt	r1, #0
     570:	movw	r2, #0
     574:	movt	r2, #0
     578:	movw	r3, #673	; 0x2a1
     57c:	bl	0 <coda_set_error>
     580:	mvn	r0, #0
     584:	str	r0, [fp, #-4]
     588:	b	614 <coda_open+0x110>
     58c:	ldr	r0, [fp, #-8]
     590:	add	r1, sp, #4
     594:	movw	r2, #0
     598:	bl	1e4 <open_file>
     59c:	cmp	r0, #0
     5a0:	beq	5b0 <coda_open+0xac>
     5a4:	mvn	r0, #0
     5a8:	str	r0, [fp, #-4]
     5ac:	b	614 <coda_open+0x110>
     5b0:	ldr	r0, [sp, #4]
     5b4:	add	r1, sp, #8
     5b8:	bl	0 <coda_data_dictionary_find_definition_for_product>
     5bc:	cmp	r0, #0
     5c0:	beq	5d8 <coda_open+0xd4>
     5c4:	ldr	r0, [sp, #4]
     5c8:	bl	2d0 <coda_close>
     5cc:	mvn	r1, #0
     5d0:	str	r1, [fp, #-4]
     5d4:	b	614 <coda_open+0x110>
     5d8:	ldr	r1, [sp, #8]
     5dc:	add	r0, sp, #4
     5e0:	bl	620 <set_definition>
     5e4:	cmp	r0, #0
     5e8:	beq	600 <coda_open+0xfc>
     5ec:	ldr	r0, [sp, #4]
     5f0:	bl	2d0 <coda_close>
     5f4:	mvn	r1, #0
     5f8:	str	r1, [fp, #-4]
     5fc:	b	614 <coda_open+0x110>
     600:	ldr	r0, [sp, #4]
     604:	ldr	r1, [sp, #12]
     608:	str	r0, [r1]
     60c:	movw	r0, #0
     610:	str	r0, [fp, #-4]
     614:	ldr	r0, [fp, #-4]
     618:	mov	sp, fp
     61c:	pop	{fp, pc}

00000620 <set_definition>:
     620:	push	{fp, lr}
     624:	mov	fp, sp
     628:	sub	sp, sp, #40	; 0x28
     62c:	str	r0, [fp, #-8]
     630:	str	r1, [fp, #-12]
     634:	ldr	r0, [fp, #-12]
     638:	movw	r1, #0
     63c:	cmp	r0, r1
     640:	bne	690 <set_definition+0x70>
     644:	ldr	r0, [fp, #-8]
     648:	ldr	r0, [r0]
     64c:	ldr	r0, [r0, #16]
     650:	cmp	r0, #1
     654:	beq	66c <set_definition+0x4c>
     658:	ldr	r0, [fp, #-8]
     65c:	ldr	r0, [r0]
     660:	ldr	r0, [r0, #16]
     664:	cmp	r0, #0
     668:	bne	684 <set_definition+0x64>
     66c:	mvn	r0, #199	; 0xc7
     670:	movw	r1, #0
     674:	bl	0 <coda_set_error>
     678:	mvn	r0, #0
     67c:	str	r0, [fp, #-4]
     680:	b	948 <set_definition+0x328>
     684:	movw	r0, #0
     688:	str	r0, [fp, #-4]
     68c:	b	948 <set_definition+0x328>
     690:	ldr	r0, [fp, #-8]
     694:	ldr	r0, [r0]
     698:	ldr	r0, [r0, #16]
     69c:	ldr	r1, [fp, #-12]
     6a0:	ldr	r1, [r1]
     6a4:	cmp	r0, r1
     6a8:	beq	720 <set_definition+0x100>
     6ac:	ldr	r0, [fp, #-8]
     6b0:	ldr	r0, [r0]
     6b4:	ldr	r0, [r0, #16]
     6b8:	cmp	r0, #1
     6bc:	bne	6d0 <set_definition+0xb0>
     6c0:	ldr	r0, [fp, #-12]
     6c4:	ldr	r0, [r0]
     6c8:	cmp	r0, #0
     6cc:	beq	720 <set_definition+0x100>
     6d0:	ldr	r0, [fp, #-12]
     6d4:	ldr	r0, [r0]
     6d8:	bl	0 <coda_type_get_format_name>
     6dc:	ldr	r1, [fp, #-8]
     6e0:	ldr	r1, [r1]
     6e4:	ldr	r1, [r1, #16]
     6e8:	str	r0, [sp, #16]
     6ec:	mov	r0, r1
     6f0:	bl	0 <coda_type_get_format_name>
     6f4:	mvn	r1, #199	; 0xc7
     6f8:	str	r0, [sp, #12]
     6fc:	mov	r0, r1
     700:	movw	r1, #0
     704:	movt	r1, #0
     708:	ldr	r2, [sp, #16]
     70c:	ldr	r3, [sp, #12]
     710:	bl	0 <coda_set_error>
     714:	mvn	r0, #0
     718:	str	r0, [fp, #-4]
     71c:	b	948 <set_definition+0x328>
     720:	ldr	r0, [fp, #-12]
     724:	ldr	r0, [r0, #24]
     728:	cmp	r0, #0
     72c:	bne	750 <set_definition+0x130>
     730:	ldr	r0, [fp, #-12]
     734:	bl	0 <coda_read_product_definition>
     738:	cmp	r0, #0
     73c:	beq	74c <set_definition+0x12c>
     740:	mvn	r0, #0
     744:	str	r0, [fp, #-4]
     748:	b	948 <set_definition+0x328>
     74c:	b	750 <set_definition+0x130>
     750:	ldr	r0, [fp, #-12]
     754:	ldr	r0, [r0]
     758:	cmp	r0, #0
     75c:	str	r0, [sp, #8]
     760:	beq	788 <set_definition+0x168>
     764:	b	768 <set_definition+0x148>
     768:	ldr	r0, [sp, #8]
     76c:	cmp	r0, #1
     770:	beq	7ac <set_definition+0x18c>
     774:	b	778 <set_definition+0x158>
     778:	ldr	r0, [sp, #8]
     77c:	cmp	r0, #2
     780:	beq	7d0 <set_definition+0x1b0>
     784:	b	7f4 <set_definition+0x1d4>
     788:	ldr	r0, [fp, #-8]
     78c:	ldr	r1, [fp, #-12]
     790:	bl	0 <coda_ascii_reopen_with_definition>
     794:	cmp	r0, #0
     798:	beq	7a8 <set_definition+0x188>
     79c:	mvn	r0, #0
     7a0:	str	r0, [fp, #-4]
     7a4:	b	948 <set_definition+0x328>
     7a8:	b	804 <set_definition+0x1e4>
     7ac:	ldr	r0, [fp, #-8]
     7b0:	ldr	r1, [fp, #-12]
     7b4:	bl	0 <coda_bin_reopen_with_definition>
     7b8:	cmp	r0, #0
     7bc:	beq	7cc <set_definition+0x1ac>
     7c0:	mvn	r0, #0
     7c4:	str	r0, [fp, #-4]
     7c8:	b	948 <set_definition+0x328>
     7cc:	b	804 <set_definition+0x1e4>
     7d0:	ldr	r0, [fp, #-8]
     7d4:	ldr	r1, [fp, #-12]
     7d8:	bl	0 <coda_xml_reopen_with_definition>
     7dc:	cmp	r0, #0
     7e0:	beq	7f0 <set_definition+0x1d0>
     7e4:	mvn	r0, #0
     7e8:	str	r0, [fp, #-4]
     7ec:	b	948 <set_definition+0x328>
     7f0:	b	804 <set_definition+0x1e4>
     7f4:	ldr	r0, [fp, #-12]
     7f8:	ldr	r1, [fp, #-8]
     7fc:	ldr	r1, [r1]
     800:	str	r0, [r1, #24]
     804:	ldr	r0, [fp, #-8]
     808:	ldr	r0, [r0]
     80c:	ldr	r0, [r0, #24]
     810:	ldr	r0, [r0, #32]
     814:	cmp	r0, #0
     818:	ble	940 <set_definition+0x320>
     81c:	ldr	r0, [fp, #-8]
     820:	ldr	r0, [r0]
     824:	ldr	r0, [r0, #24]
     828:	ldr	r0, [r0, #32]
     82c:	str	r0, [fp, #-16]
     830:	ldr	r0, [fp, #-16]
     834:	lsl	r0, r0, #2
     838:	bl	0 <malloc>
     83c:	ldr	r1, [fp, #-8]
     840:	ldr	r1, [r1]
     844:	str	r0, [r1, #28]
     848:	ldr	r0, [fp, #-8]
     84c:	ldr	r0, [r0]
     850:	ldr	r0, [r0, #28]
     854:	movw	r1, #0
     858:	cmp	r0, r1
     85c:	bne	894 <set_definition+0x274>
     860:	ldr	r0, [fp, #-16]
     864:	lsl	r2, r0, #2
     868:	mvn	r0, #0
     86c:	movw	r1, #0
     870:	movt	r1, #0
     874:	movw	r3, #0
     878:	movt	r3, #0
     87c:	movw	ip, #500	; 0x1f4
     880:	str	ip, [sp]
     884:	bl	0 <coda_set_error>
     888:	mvn	r0, #0
     88c:	str	r0, [fp, #-4]
     890:	b	948 <set_definition+0x328>
     894:	ldr	r0, [fp, #-16]
     898:	lsl	r0, r0, #2
     89c:	bl	0 <malloc>
     8a0:	ldr	r1, [fp, #-8]
     8a4:	ldr	r1, [r1]
     8a8:	str	r0, [r1, #32]
     8ac:	ldr	r0, [fp, #-8]
     8b0:	ldr	r0, [r0]
     8b4:	ldr	r0, [r0, #32]
     8b8:	movw	r1, #0
     8bc:	cmp	r0, r1
     8c0:	bne	8f8 <set_definition+0x2d8>
     8c4:	ldr	r0, [fp, #-16]
     8c8:	lsl	r2, r0, #2
     8cc:	mvn	r0, #0
     8d0:	movw	r1, #0
     8d4:	movt	r1, #0
     8d8:	movw	r3, #0
     8dc:	movt	r3, #0
     8e0:	movw	ip, #507	; 0x1fb
     8e4:	str	ip, [sp]
     8e8:	bl	0 <coda_set_error>
     8ec:	mvn	r0, #0
     8f0:	str	r0, [fp, #-4]
     8f4:	b	948 <set_definition+0x328>
     8f8:	movw	r0, #0
     8fc:	str	r0, [sp, #20]
     900:	ldr	r0, [sp, #20]
     904:	ldr	r1, [fp, #-16]
     908:	cmp	r0, r1
     90c:	bge	93c <set_definition+0x31c>
     910:	ldr	r0, [fp, #-8]
     914:	ldr	r0, [r0]
     918:	ldr	r0, [r0, #32]
     91c:	ldr	r1, [sp, #20]
     920:	add	r0, r0, r1, lsl #2
     924:	movw	r1, #0
     928:	str	r1, [r0]
     92c:	ldr	r0, [sp, #20]
     930:	add	r0, r0, #1
     934:	str	r0, [sp, #20]
     938:	b	900 <set_definition+0x2e0>
     93c:	b	940 <set_definition+0x320>
     940:	movw	r0, #0
     944:	str	r0, [fp, #-4]
     948:	ldr	r0, [fp, #-4]
     94c:	mov	sp, fp
     950:	pop	{fp, pc}

00000954 <coda_open_as>:
     954:	push	{fp, lr}
     958:	mov	fp, sp
     95c:	sub	sp, sp, #40	; 0x28
     960:	ldr	ip, [fp, #8]
     964:	str	r0, [fp, #-8]
     968:	str	r1, [fp, #-12]
     96c:	str	r2, [fp, #-16]
     970:	str	r3, [sp, #20]
     974:	movw	r0, #0
     978:	str	r0, [sp, #16]
     97c:	str	r0, [sp, #8]
     980:	ldr	r1, [fp, #-8]
     984:	cmp	r1, r0
     988:	bne	9b4 <coda_open_as+0x60>
     98c:	mvn	r0, #99	; 0x63
     990:	movw	r1, #0
     994:	movt	r1, #0
     998:	movw	r2, #0
     99c:	movt	r2, #0
     9a0:	movw	r3, #719	; 0x2cf
     9a4:	bl	0 <coda_set_error>
     9a8:	mvn	r0, #0
     9ac:	str	r0, [fp, #-4]
     9b0:	b	b20 <coda_open_as+0x1cc>
     9b4:	ldr	r0, [fp, #-12]
     9b8:	movw	r1, #0
     9bc:	cmp	r0, r1
     9c0:	beq	a38 <coda_open_as+0xe4>
     9c4:	ldr	r0, [fp, #-16]
     9c8:	movw	r1, #0
     9cc:	cmp	r0, r1
     9d0:	bne	9fc <coda_open_as+0xa8>
     9d4:	mvn	r0, #99	; 0x63
     9d8:	movw	r1, #0
     9dc:	movt	r1, #0
     9e0:	movw	r2, #0
     9e4:	movt	r2, #0
     9e8:	movw	r3, #726	; 0x2d6
     9ec:	bl	0 <coda_set_error>
     9f0:	mvn	r0, #0
     9f4:	str	r0, [fp, #-4]
     9f8:	b	b20 <coda_open_as+0x1cc>
     9fc:	ldr	r0, [fp, #8]
     a00:	movw	r1, #0
     a04:	cmp	r0, r1
     a08:	bne	a34 <coda_open_as+0xe0>
     a0c:	mvn	r0, #99	; 0x63
     a10:	movw	r1, #0
     a14:	movt	r1, #0
     a18:	movw	r2, #0
     a1c:	movt	r2, #0
     a20:	movw	r3, #731	; 0x2db
     a24:	bl	0 <coda_set_error>
     a28:	mvn	r0, #0
     a2c:	str	r0, [fp, #-4]
     a30:	b	b20 <coda_open_as+0x1cc>
     a34:	b	a38 <coda_open_as+0xe4>
     a38:	ldr	r0, [fp, #-12]
     a3c:	movw	r1, #0
     a40:	cmp	r0, r1
     a44:	beq	ac0 <coda_open_as+0x16c>
     a48:	ldr	r0, [fp, #-12]
     a4c:	ldr	r1, [fp, #-16]
     a50:	ldr	r2, [sp, #20]
     a54:	add	r3, sp, #16
     a58:	bl	0 <coda_data_dictionary_get_definition>
     a5c:	cmp	r0, #0
     a60:	beq	a70 <coda_open_as+0x11c>
     a64:	mvn	r0, #0
     a68:	str	r0, [fp, #-4]
     a6c:	b	b20 <coda_open_as+0x1cc>
     a70:	ldr	r0, [sp, #16]
     a74:	movw	r1, #0
     a78:	cmp	r0, r1
     a7c:	beq	abc <coda_open_as+0x168>
     a80:	ldr	r0, [sp, #16]
     a84:	ldr	r0, [r0]
     a88:	cmp	r0, #0
     a8c:	movw	r0, #1
     a90:	str	r0, [sp, #4]
     a94:	beq	ab0 <coda_open_as+0x15c>
     a98:	ldr	r0, [sp, #16]
     a9c:	ldr	r0, [r0]
     aa0:	cmp	r0, #1
     aa4:	movw	r0, #0
     aa8:	moveq	r0, #1
     aac:	str	r0, [sp, #4]
     ab0:	ldr	r0, [sp, #4]
     ab4:	and	r0, r0, #1
     ab8:	str	r0, [sp, #8]
     abc:	b	ac0 <coda_open_as+0x16c>
     ac0:	ldr	r0, [fp, #-8]
     ac4:	ldr	r2, [sp, #8]
     ac8:	add	r1, sp, #12
     acc:	bl	1e4 <open_file>
     ad0:	cmp	r0, #0
     ad4:	beq	ae4 <coda_open_as+0x190>
     ad8:	mvn	r0, #0
     adc:	str	r0, [fp, #-4]
     ae0:	b	b20 <coda_open_as+0x1cc>
     ae4:	ldr	r1, [sp, #16]
     ae8:	add	r0, sp, #12
     aec:	bl	620 <set_definition>
     af0:	cmp	r0, #0
     af4:	beq	b0c <coda_open_as+0x1b8>
     af8:	ldr	r0, [sp, #12]
     afc:	bl	2d0 <coda_close>
     b00:	mvn	r1, #0
     b04:	str	r1, [fp, #-4]
     b08:	b	b20 <coda_open_as+0x1cc>
     b0c:	ldr	r0, [sp, #12]
     b10:	ldr	r1, [fp, #8]
     b14:	str	r0, [r1]
     b18:	movw	r0, #0
     b1c:	str	r0, [fp, #-4]
     b20:	ldr	r0, [fp, #-4]
     b24:	mov	sp, fp
     b28:	pop	{fp, pc}

00000b2c <coda_get_product_filename>:
     b2c:	push	{fp, lr}
     b30:	mov	fp, sp
     b34:	sub	sp, sp, #16
     b38:	str	r0, [sp, #8]
     b3c:	str	r1, [sp, #4]
     b40:	ldr	r0, [sp, #8]
     b44:	movw	r1, #0
     b48:	cmp	r0, r1
     b4c:	bne	b78 <coda_get_product_filename+0x4c>
     b50:	mvn	r0, #99	; 0x63
     b54:	movw	r1, #0
     b58:	movt	r1, #0
     b5c:	movw	r2, #0
     b60:	movt	r2, #0
     b64:	movw	r3, #856	; 0x358
     b68:	bl	0 <coda_set_error>
     b6c:	mvn	r0, #0
     b70:	str	r0, [fp, #-4]
     b74:	b	b90 <coda_get_product_filename+0x64>
     b78:	ldr	r0, [sp, #8]
     b7c:	ldr	r0, [r0]
     b80:	ldr	r1, [sp, #4]
     b84:	str	r0, [r1]
     b88:	movw	r0, #0
     b8c:	str	r0, [fp, #-4]
     b90:	ldr	r0, [fp, #-4]
     b94:	mov	sp, fp
     b98:	pop	{fp, pc}

00000b9c <coda_get_product_file_size>:
     b9c:	push	{fp, lr}
     ba0:	mov	fp, sp
     ba4:	sub	sp, sp, #16
     ba8:	str	r0, [sp, #8]
     bac:	str	r1, [sp, #4]
     bb0:	ldr	r0, [sp, #8]
     bb4:	movw	r1, #0
     bb8:	cmp	r0, r1
     bbc:	bne	be8 <coda_get_product_file_size+0x4c>
     bc0:	mvn	r0, #99	; 0x63
     bc4:	movw	r1, #0
     bc8:	movt	r1, #0
     bcc:	movw	r2, #0
     bd0:	movt	r2, #0
     bd4:	movw	r3, #876	; 0x36c
     bd8:	bl	0 <coda_set_error>
     bdc:	mvn	r0, #0
     be0:	str	r0, [fp, #-4]
     be4:	b	c40 <coda_get_product_file_size+0xa4>
     be8:	ldr	r0, [sp, #4]
     bec:	movw	r1, #0
     bf0:	cmp	r0, r1
     bf4:	bne	c20 <coda_get_product_file_size+0x84>
     bf8:	mvn	r0, #99	; 0x63
     bfc:	movw	r1, #0
     c00:	movt	r1, #0
     c04:	movw	r2, #0
     c08:	movt	r2, #0
     c0c:	movw	r3, #881	; 0x371
     c10:	bl	0 <coda_set_error>
     c14:	mvn	r0, #0
     c18:	str	r0, [fp, #-4]
     c1c:	b	c40 <coda_get_product_file_size+0xa4>
     c20:	ldr	r0, [sp, #8]
     c24:	ldr	r1, [r0, #8]
     c28:	ldr	r0, [r0, #12]
     c2c:	ldr	r2, [sp, #4]
     c30:	str	r0, [r2, #4]
     c34:	str	r1, [r2]
     c38:	movw	r0, #0
     c3c:	str	r0, [fp, #-4]
     c40:	ldr	r0, [fp, #-4]
     c44:	mov	sp, fp
     c48:	pop	{fp, pc}

00000c4c <coda_get_product_format>:
     c4c:	push	{fp, lr}
     c50:	mov	fp, sp
     c54:	sub	sp, sp, #16
     c58:	str	r0, [sp, #8]
     c5c:	str	r1, [sp, #4]
     c60:	ldr	r0, [sp, #8]
     c64:	movw	r1, #0
     c68:	cmp	r0, r1
     c6c:	bne	c98 <coda_get_product_format+0x4c>
     c70:	mvn	r0, #99	; 0x63
     c74:	movw	r1, #0
     c78:	movt	r1, #0
     c7c:	movw	r2, #0
     c80:	movt	r2, #0
     c84:	movw	r3, #904	; 0x388
     c88:	bl	0 <coda_set_error>
     c8c:	mvn	r0, #0
     c90:	str	r0, [fp, #-4]
     c94:	b	ce8 <coda_get_product_format+0x9c>
     c98:	ldr	r0, [sp, #4]
     c9c:	movw	r1, #0
     ca0:	cmp	r0, r1
     ca4:	bne	cd0 <coda_get_product_format+0x84>
     ca8:	mvn	r0, #99	; 0x63
     cac:	movw	r1, #0
     cb0:	movt	r1, #0
     cb4:	movw	r2, #0
     cb8:	movt	r2, #0
     cbc:	movw	r3, #909	; 0x38d
     cc0:	bl	0 <coda_set_error>
     cc4:	mvn	r0, #0
     cc8:	str	r0, [fp, #-4]
     ccc:	b	ce8 <coda_get_product_format+0x9c>
     cd0:	ldr	r0, [sp, #8]
     cd4:	ldr	r0, [r0, #16]
     cd8:	ldr	r1, [sp, #4]
     cdc:	str	r0, [r1]
     ce0:	movw	r0, #0
     ce4:	str	r0, [fp, #-4]
     ce8:	ldr	r0, [fp, #-4]
     cec:	mov	sp, fp
     cf0:	pop	{fp, pc}

00000cf4 <coda_get_product_class>:
     cf4:	push	{fp, lr}
     cf8:	mov	fp, sp
     cfc:	sub	sp, sp, #16
     d00:	str	r0, [sp, #8]
     d04:	str	r1, [sp, #4]
     d08:	ldr	r0, [sp, #8]
     d0c:	movw	r1, #0
     d10:	cmp	r0, r1
     d14:	bne	d40 <coda_get_product_class+0x4c>
     d18:	mvn	r0, #99	; 0x63
     d1c:	movw	r1, #0
     d20:	movt	r1, #0
     d24:	movw	r2, #0
     d28:	movt	r2, #0
     d2c:	movw	r3, #933	; 0x3a5
     d30:	bl	0 <coda_set_error>
     d34:	mvn	r0, #0
     d38:	str	r0, [fp, #-4]
     d3c:	b	dc0 <coda_get_product_class+0xcc>
     d40:	ldr	r0, [sp, #4]
     d44:	movw	r1, #0
     d48:	cmp	r0, r1
     d4c:	bne	d78 <coda_get_product_class+0x84>
     d50:	mvn	r0, #99	; 0x63
     d54:	movw	r1, #0
     d58:	movt	r1, #0
     d5c:	movw	r2, #0
     d60:	movt	r2, #0
     d64:	movw	r3, #938	; 0x3aa
     d68:	bl	0 <coda_set_error>
     d6c:	mvn	r0, #0
     d70:	str	r0, [fp, #-4]
     d74:	b	dc0 <coda_get_product_class+0xcc>
     d78:	ldr	r0, [sp, #8]
     d7c:	ldr	r0, [r0, #24]
     d80:	movw	r1, #0
     d84:	cmp	r0, r1
     d88:	beq	dac <coda_get_product_class+0xb8>
     d8c:	ldr	r0, [sp, #8]
     d90:	ldr	r0, [r0, #24]
     d94:	ldr	r0, [r0, #44]	; 0x2c
     d98:	ldr	r0, [r0, #20]
     d9c:	ldr	r0, [r0]
     da0:	ldr	r1, [sp, #4]
     da4:	str	r0, [r1]
     da8:	b	db8 <coda_get_product_class+0xc4>
     dac:	ldr	r0, [sp, #4]
     db0:	movw	r1, #0
     db4:	str	r1, [r0]
     db8:	movw	r0, #0
     dbc:	str	r0, [fp, #-4]
     dc0:	ldr	r0, [fp, #-4]
     dc4:	mov	sp, fp
     dc8:	pop	{fp, pc}

00000dcc <coda_get_product_type>:
     dcc:	push	{fp, lr}
     dd0:	mov	fp, sp
     dd4:	sub	sp, sp, #16
     dd8:	str	r0, [sp, #8]
     ddc:	str	r1, [sp, #4]
     de0:	ldr	r0, [sp, #8]
     de4:	movw	r1, #0
     de8:	cmp	r0, r1
     dec:	bne	e18 <coda_get_product_type+0x4c>
     df0:	mvn	r0, #99	; 0x63
     df4:	movw	r1, #0
     df8:	movt	r1, #0
     dfc:	movw	r2, #0
     e00:	movt	r2, #0
     e04:	movw	r3, #969	; 0x3c9
     e08:	bl	0 <coda_set_error>
     e0c:	mvn	r0, #0
     e10:	str	r0, [fp, #-4]
     e14:	b	e94 <coda_get_product_type+0xc8>
     e18:	ldr	r0, [sp, #4]
     e1c:	movw	r1, #0
     e20:	cmp	r0, r1
     e24:	bne	e50 <coda_get_product_type+0x84>
     e28:	mvn	r0, #99	; 0x63
     e2c:	movw	r1, #0
     e30:	movt	r1, #0
     e34:	movw	r2, #0
     e38:	movt	r2, #0
     e3c:	movw	r3, #974	; 0x3ce
     e40:	bl	0 <coda_set_error>
     e44:	mvn	r0, #0
     e48:	str	r0, [fp, #-4]
     e4c:	b	e94 <coda_get_product_type+0xc8>
     e50:	ldr	r0, [sp, #8]
     e54:	ldr	r0, [r0, #24]
     e58:	movw	r1, #0
     e5c:	cmp	r0, r1
     e60:	beq	e80 <coda_get_product_type+0xb4>
     e64:	ldr	r0, [sp, #8]
     e68:	ldr	r0, [r0, #24]
     e6c:	ldr	r0, [r0, #44]	; 0x2c
     e70:	ldr	r0, [r0]
     e74:	ldr	r1, [sp, #4]
     e78:	str	r0, [r1]
     e7c:	b	e8c <coda_get_product_type+0xc0>
     e80:	ldr	r0, [sp, #4]
     e84:	movw	r1, #0
     e88:	str	r1, [r0]
     e8c:	movw	r0, #0
     e90:	str	r0, [fp, #-4]
     e94:	ldr	r0, [fp, #-4]
     e98:	mov	sp, fp
     e9c:	pop	{fp, pc}

00000ea0 <coda_get_product_version>:
     ea0:	push	{fp, lr}
     ea4:	mov	fp, sp
     ea8:	sub	sp, sp, #16
     eac:	str	r0, [sp, #8]
     eb0:	str	r1, [sp, #4]
     eb4:	ldr	r0, [sp, #8]
     eb8:	movw	r1, #0
     ebc:	cmp	r0, r1
     ec0:	bne	eec <coda_get_product_version+0x4c>
     ec4:	mvn	r0, #99	; 0x63
     ec8:	movw	r1, #0
     ecc:	movt	r1, #0
     ed0:	movw	r2, #0
     ed4:	movt	r2, #0
     ed8:	movw	r3, #1003	; 0x3eb
     edc:	bl	0 <coda_set_error>
     ee0:	mvn	r0, #0
     ee4:	str	r0, [fp, #-4]
     ee8:	b	f64 <coda_get_product_version+0xc4>
     eec:	ldr	r0, [sp, #4]
     ef0:	movw	r1, #0
     ef4:	cmp	r0, r1
     ef8:	bne	f24 <coda_get_product_version+0x84>
     efc:	mvn	r0, #99	; 0x63
     f00:	movw	r1, #0
     f04:	movt	r1, #0
     f08:	movw	r2, #0
     f0c:	movt	r2, #0
     f10:	movw	r3, #1008	; 0x3f0
     f14:	bl	0 <coda_set_error>
     f18:	mvn	r0, #0
     f1c:	str	r0, [fp, #-4]
     f20:	b	f64 <coda_get_product_version+0xc4>
     f24:	ldr	r0, [sp, #8]
     f28:	ldr	r0, [r0, #24]
     f2c:	movw	r1, #0
     f30:	cmp	r0, r1
     f34:	beq	f50 <coda_get_product_version+0xb0>
     f38:	ldr	r0, [sp, #8]
     f3c:	ldr	r0, [r0, #24]
     f40:	ldr	r0, [r0, #4]
     f44:	ldr	r1, [sp, #4]
     f48:	str	r0, [r1]
     f4c:	b	f5c <coda_get_product_version+0xbc>
     f50:	ldr	r0, [sp, #4]
     f54:	mvn	r1, #0
     f58:	str	r1, [r0]
     f5c:	movw	r0, #0
     f60:	str	r0, [fp, #-4]
     f64:	ldr	r0, [fp, #-4]
     f68:	mov	sp, fp
     f6c:	pop	{fp, pc}

00000f70 <coda_get_product_root_type>:
     f70:	push	{fp, lr}
     f74:	mov	fp, sp
     f78:	sub	sp, sp, #16
     f7c:	str	r0, [sp, #8]
     f80:	str	r1, [sp, #4]
     f84:	ldr	r0, [sp, #8]
     f88:	movw	r1, #0
     f8c:	cmp	r0, r1
     f90:	bne	fbc <coda_get_product_root_type+0x4c>
     f94:	mvn	r0, #99	; 0x63
     f98:	movw	r1, #0
     f9c:	movt	r1, #0
     fa0:	movw	r2, #0
     fa4:	movt	r2, #0
     fa8:	movw	r3, #1043	; 0x413
     fac:	bl	0 <coda_set_error>
     fb0:	mvn	r0, #0
     fb4:	str	r0, [fp, #-4]
     fb8:	b	1080 <coda_get_product_root_type+0x110>
     fbc:	ldr	r0, [sp, #4]
     fc0:	movw	r1, #0
     fc4:	cmp	r0, r1
     fc8:	bne	ff4 <coda_get_product_root_type+0x84>
     fcc:	mvn	r0, #99	; 0x63
     fd0:	movw	r1, #0
     fd4:	movt	r1, #0
     fd8:	movw	r2, #0
     fdc:	movt	r2, #0
     fe0:	movw	r3, #1048	; 0x418
     fe4:	bl	0 <coda_set_error>
     fe8:	mvn	r0, #0
     fec:	str	r0, [fp, #-4]
     ff0:	b	1080 <coda_get_product_root_type+0x110>
     ff4:	ldr	r0, [sp, #8]
     ff8:	ldr	r0, [r0, #24]
     ffc:	movw	r1, #0
    1000:	cmp	r0, r1
    1004:	beq	1038 <coda_get_product_root_type+0xc8>
    1008:	ldr	r0, [sp, #8]
    100c:	ldr	r0, [r0, #24]
    1010:	ldr	r0, [r0, #28]
    1014:	movw	r1, #0
    1018:	cmp	r0, r1
    101c:	beq	1038 <coda_get_product_root_type+0xc8>
    1020:	ldr	r0, [sp, #8]
    1024:	ldr	r0, [r0, #24]
    1028:	ldr	r0, [r0, #28]
    102c:	ldr	r1, [sp, #4]
    1030:	str	r0, [r1]
    1034:	b	1078 <coda_get_product_root_type+0x108>
    1038:	ldr	r0, [sp, #8]
    103c:	ldr	r0, [r0, #20]
    1040:	ldr	r0, [r0]
    1044:	cmp	r0, #100	; 0x64
    1048:	bcs	105c <coda_get_product_root_type+0xec>
    104c:	ldr	r0, [sp, #8]
    1050:	ldr	r0, [r0, #20]
    1054:	str	r0, [sp]
    1058:	b	106c <coda_get_product_root_type+0xfc>
    105c:	ldr	r0, [sp, #8]
    1060:	ldr	r0, [r0, #20]
    1064:	ldr	r0, [r0, #4]
    1068:	str	r0, [sp]
    106c:	ldr	r0, [sp]
    1070:	ldr	r1, [sp, #4]
    1074:	str	r0, [r1]
    1078:	movw	r0, #0
    107c:	str	r0, [fp, #-4]
    1080:	ldr	r0, [fp, #-4]
    1084:	mov	sp, fp
    1088:	pop	{fp, pc}

0000108c <coda_get_product_definition_file>:
    108c:	push	{fp, lr}
    1090:	mov	fp, sp
    1094:	sub	sp, sp, #16
    1098:	str	r0, [sp, #8]
    109c:	str	r1, [sp, #4]
    10a0:	ldr	r0, [sp, #8]
    10a4:	movw	r1, #0
    10a8:	cmp	r0, r1
    10ac:	bne	10d8 <coda_get_product_definition_file+0x4c>
    10b0:	mvn	r0, #99	; 0x63
    10b4:	movw	r1, #0
    10b8:	movt	r1, #0
    10bc:	movw	r2, #0
    10c0:	movt	r2, #0
    10c4:	movw	r3, #1080	; 0x438
    10c8:	bl	0 <coda_set_error>
    10cc:	mvn	r0, #0
    10d0:	str	r0, [fp, #-4]
    10d4:	b	1158 <coda_get_product_definition_file+0xcc>
    10d8:	ldr	r0, [sp, #4]
    10dc:	movw	r1, #0
    10e0:	cmp	r0, r1
    10e4:	bne	1110 <coda_get_product_definition_file+0x84>
    10e8:	mvn	r0, #99	; 0x63
    10ec:	movw	r1, #0
    10f0:	movt	r1, #0
    10f4:	movw	r2, #0
    10f8:	movt	r2, #0
    10fc:	movw	r3, #1085	; 0x43d
    1100:	bl	0 <coda_set_error>
    1104:	mvn	r0, #0
    1108:	str	r0, [fp, #-4]
    110c:	b	1158 <coda_get_product_definition_file+0xcc>
    1110:	ldr	r0, [sp, #8]
    1114:	ldr	r0, [r0, #24]
    1118:	movw	r1, #0
    111c:	cmp	r0, r1
    1120:	beq	1144 <coda_get_product_definition_file+0xb8>
    1124:	ldr	r0, [sp, #8]
    1128:	ldr	r0, [r0, #24]
    112c:	ldr	r0, [r0, #44]	; 0x2c
    1130:	ldr	r0, [r0, #20]
    1134:	ldr	r0, [r0, #8]
    1138:	ldr	r1, [sp, #4]
    113c:	str	r0, [r1]
    1140:	b	1150 <coda_get_product_definition_file+0xc4>
    1144:	ldr	r0, [sp, #4]
    1148:	movw	r1, #0
    114c:	str	r1, [r0]
    1150:	movw	r0, #0
    1154:	str	r0, [fp, #-4]
    1158:	ldr	r0, [fp, #-4]
    115c:	mov	sp, fp
    1160:	pop	{fp, pc}

00001164 <coda_get_product_variable_value>:
    1164:	push	{fp, lr}
    1168:	mov	fp, sp
    116c:	sub	sp, sp, #32
    1170:	str	r0, [fp, #-8]
    1174:	str	r1, [fp, #-12]
    1178:	str	r2, [sp, #16]
    117c:	str	r3, [sp, #12]
    1180:	ldr	r0, [fp, #-8]
    1184:	movw	r1, #0
    1188:	cmp	r0, r1
    118c:	bne	11b8 <coda_get_product_variable_value+0x54>
    1190:	mvn	r0, #99	; 0x63
    1194:	movw	r1, #0
    1198:	movt	r1, #0
    119c:	movw	r2, #0
    11a0:	movt	r2, #0
    11a4:	movw	r3, #1124	; 0x464
    11a8:	bl	0 <coda_set_error>
    11ac:	mvn	r0, #0
    11b0:	str	r0, [fp, #-4]
    11b4:	b	12b0 <coda_get_product_variable_value+0x14c>
    11b8:	ldr	r0, [fp, #-12]
    11bc:	movw	r1, #0
    11c0:	cmp	r0, r1
    11c4:	bne	11f0 <coda_get_product_variable_value+0x8c>
    11c8:	mvn	r0, #99	; 0x63
    11cc:	movw	r1, #0
    11d0:	movt	r1, #0
    11d4:	movw	r2, #0
    11d8:	movt	r2, #0
    11dc:	movw	r3, #1129	; 0x469
    11e0:	bl	0 <coda_set_error>
    11e4:	mvn	r0, #0
    11e8:	str	r0, [fp, #-4]
    11ec:	b	12b0 <coda_get_product_variable_value+0x14c>
    11f0:	ldr	r0, [fp, #-8]
    11f4:	ldr	r1, [fp, #-12]
    11f8:	add	r2, sp, #4
    11fc:	bl	0 <coda_product_variable_get_size>
    1200:	cmp	r0, #0
    1204:	beq	1228 <coda_get_product_variable_value+0xc4>
    1208:	ldr	r2, [fp, #-12]
    120c:	mvn	r0, #101	; 0x65
    1210:	movw	r1, #0
    1214:	movt	r1, #0
    1218:	bl	0 <coda_set_error>
    121c:	mvn	r0, #0
    1220:	str	r0, [fp, #-4]
    1224:	b	12b0 <coda_get_product_variable_value+0x14c>
    1228:	ldr	r0, [sp, #16]
    122c:	cmp	r0, #0
    1230:	blt	1244 <coda_get_product_variable_value+0xe0>
    1234:	ldr	r0, [sp, #16]
    1238:	ldr	r1, [sp, #4]
    123c:	cmp	r0, r1
    1240:	blt	1268 <coda_get_product_variable_value+0x104>
    1244:	ldr	r2, [sp, #16]
    1248:	ldr	r3, [fp, #-12]
    124c:	mvn	r0, #100	; 0x64
    1250:	movw	r1, #0
    1254:	movt	r1, #0
    1258:	bl	0 <coda_set_error>
    125c:	mvn	r0, #0
    1260:	str	r0, [fp, #-4]
    1264:	b	12b0 <coda_get_product_variable_value+0x14c>
    1268:	ldr	r0, [fp, #-8]
    126c:	ldr	r1, [fp, #-12]
    1270:	ldr	r2, [sp, #16]
    1274:	add	r3, sp, #8
    1278:	bl	0 <coda_product_variable_get_pointer>
    127c:	cmp	r0, #0
    1280:	beq	1290 <coda_get_product_variable_value+0x12c>
    1284:	mvn	r0, #0
    1288:	str	r0, [fp, #-4]
    128c:	b	12b0 <coda_get_product_variable_value+0x14c>
    1290:	ldr	r0, [sp, #8]
    1294:	ldr	r1, [r0]
    1298:	ldr	r0, [r0, #4]
    129c:	ldr	r2, [sp, #12]
    12a0:	str	r0, [r2, #4]
    12a4:	str	r1, [r2]
    12a8:	movw	r0, #0
    12ac:	str	r0, [fp, #-4]
    12b0:	ldr	r0, [fp, #-4]
    12b4:	mov	sp, fp
    12b8:	pop	{fp, pc}

000012bc <get_file_size>:
    12bc:	push	{fp, lr}
    12c0:	mov	fp, sp
    12c4:	sub	sp, sp, #112	; 0x70
    12c8:	str	r0, [fp, #-8]
    12cc:	str	r1, [fp, #-12]
    12d0:	ldr	r0, [fp, #-8]
    12d4:	movw	r1, #0
    12d8:	cmp	r0, r1
    12dc:	beq	12f4 <get_file_size+0x38>
    12e0:	ldr	r0, [fp, #-12]
    12e4:	movw	r1, #0
    12e8:	cmp	r0, r1
    12ec:	beq	12f4 <get_file_size+0x38>
    12f0:	b	1314 <get_file_size+0x58>
    12f4:	movw	r0, #0
    12f8:	movt	r0, #0
    12fc:	movw	r1, #0
    1300:	movt	r1, #0
    1304:	movw	r2, #162	; 0xa2
    1308:	movw	r3, #0
    130c:	movt	r3, #0
    1310:	bl	0 <__assert_fail>
    1314:	ldr	r0, [fp, #-8]
    1318:	add	r1, sp, #8
    131c:	bl	0 <stat>
    1320:	cmp	r0, #0
    1324:	beq	1390 <get_file_size+0xd4>
    1328:	bl	0 <__errno_location>
    132c:	ldr	r0, [r0]
    1330:	cmp	r0, #2
    1334:	bne	1350 <get_file_size+0x94>
    1338:	ldr	r2, [fp, #-8]
    133c:	mvn	r0, #19
    1340:	movw	r1, #0
    1344:	movt	r1, #0
    1348:	bl	0 <coda_set_error>
    134c:	b	1384 <get_file_size+0xc8>
    1350:	ldr	r2, [fp, #-8]
    1354:	str	r2, [sp, #4]
    1358:	bl	0 <__errno_location>
    135c:	ldr	r0, [r0]
    1360:	bl	0 <strerror>
    1364:	mvn	r1, #20
    1368:	str	r0, [sp]
    136c:	mov	r0, r1
    1370:	movw	r1, #0
    1374:	movt	r1, #0
    1378:	ldr	r2, [sp, #4]
    137c:	ldr	r3, [sp]
    1380:	bl	0 <coda_set_error>
    1384:	mvn	r0, #0
    1388:	str	r0, [fp, #-4]
    138c:	b	13dc <get_file_size+0x120>
    1390:	ldr	r0, [sp, #24]
    1394:	and	r0, r0, #32768	; 0x8000
    1398:	cmp	r0, #0
    139c:	bne	13c0 <get_file_size+0x104>
    13a0:	ldr	r2, [fp, #-8]
    13a4:	mvn	r0, #20
    13a8:	movw	r1, #0
    13ac:	movt	r1, #0
    13b0:	bl	0 <coda_set_error>
    13b4:	mvn	r0, #0
    13b8:	str	r0, [fp, #-4]
    13bc:	b	13dc <get_file_size+0x120>
    13c0:	ldr	r0, [sp, #52]	; 0x34
    13c4:	asr	r1, r0, #31
    13c8:	ldr	r2, [fp, #-12]
    13cc:	str	r0, [r2]
    13d0:	str	r1, [r2, #4]
    13d4:	movw	r0, #0
    13d8:	str	r0, [fp, #-4]
    13dc:	ldr	r0, [fp, #-4]
    13e0:	mov	sp, fp
    13e4:	pop	{fp, pc}

000013e8 <get_format>:
    13e8:	push	{r4, r5, fp, lr}
    13ec:	add	fp, sp, #8
    13f0:	sub	sp, sp, #656	; 0x290
    13f4:	str	r0, [fp, #-16]
    13f8:	str	r1, [fp, #-20]	; 0xffffffec
    13fc:	ldr	r0, [fp, #-16]
    1400:	ldr	r1, [r0, #8]
    1404:	ldr	r0, [r0, #12]
    1408:	str	r0, [sp, #36]	; 0x24
    140c:	str	r1, [sp, #32]
    1410:	ldr	r1, [fp, #-16]
    1414:	add	r0, sp, #40	; 0x28
    1418:	bl	0 <coda_cursor_set_product>
    141c:	cmp	r0, #0
    1420:	beq	1430 <get_format+0x48>
    1424:	mvn	r0, #0
    1428:	str	r0, [fp, #-12]
    142c:	b	1a24 <get_format+0x63c>
    1430:	ldr	r0, [fp, #-20]	; 0xffffffec
    1434:	mov	r1, #1
    1438:	str	r1, [r0]
    143c:	ldr	r0, [sp, #32]
    1440:	ldr	r1, [sp, #36]	; 0x24
    1444:	rsbs	r0, r0, #3
    1448:	rscs	r1, r1, #0
    144c:	blt	1460 <get_format+0x78>
    1450:	b	1454 <get_format+0x6c>
    1454:	movw	r0, #0
    1458:	str	r0, [fp, #-12]
    145c:	b	1a24 <get_format+0x63c>
    1460:	sub	r1, fp, #100	; 0x64
    1464:	mov	r0, sp
    1468:	mov	r2, #0
    146c:	str	r2, [r0, #4]
    1470:	mov	r3, #4
    1474:	str	r3, [r0]
    1478:	add	r0, sp, #40	; 0x28
    147c:	str	r2, [sp, #20]
    1480:	ldr	r3, [sp, #20]
    1484:	bl	0 <coda_cursor_read_bytes>
    1488:	cmp	r0, #0
    148c:	beq	149c <get_format+0xb4>
    1490:	mvn	r0, #0
    1494:	str	r0, [fp, #-12]
    1498:	b	1a24 <get_format+0x63c>
    149c:	sub	r0, fp, #100	; 0x64
    14a0:	movw	r1, #0
    14a4:	movt	r1, #0
    14a8:	mov	r2, #3
    14ac:	bl	0 <memcmp>
    14b0:	cmp	r0, #0
    14b4:	bne	14f4 <get_format+0x10c>
    14b8:	ldrb	r0, [fp, #-97]	; 0xffffff9f
    14bc:	cmp	r0, #1
    14c0:	beq	14dc <get_format+0xf4>
    14c4:	ldrb	r0, [fp, #-97]	; 0xffffff9f
    14c8:	cmp	r0, #2
    14cc:	beq	14dc <get_format+0xf4>
    14d0:	ldrb	r0, [fp, #-97]	; 0xffffff9f
    14d4:	cmp	r0, #5
    14d8:	bne	14f4 <get_format+0x10c>
    14dc:	ldr	r0, [fp, #-20]	; 0xffffffec
    14e0:	movw	r1, #6
    14e4:	str	r1, [r0]
    14e8:	movw	r0, #0
    14ec:	str	r0, [fp, #-12]
    14f0:	b	1a24 <get_format+0x63c>
    14f4:	sub	r0, fp, #100	; 0x64
    14f8:	ldr	r0, [r0]
    14fc:	movw	r1, #782	; 0x30e
    1500:	movt	r1, #275	; 0x113
    1504:	subs	r0, r0, r1
    1508:	movwne	r0, #1
    150c:	cmp	r0, #0
    1510:	bne	152c <get_format+0x144>
    1514:	ldr	r0, [fp, #-20]	; 0xffffffec
    1518:	movw	r1, #3
    151c:	str	r1, [r0]
    1520:	movw	r0, #0
    1524:	str	r0, [fp, #-12]
    1528:	b	1a24 <get_format+0x63c>
    152c:	ldr	r0, [sp, #32]
    1530:	ldr	r1, [sp, #36]	; 0x24
    1534:	rsbs	r0, r0, #7
    1538:	rscs	r1, r1, #0
    153c:	blt	155c <get_format+0x174>
    1540:	b	1544 <get_format+0x15c>
    1544:	ldr	r0, [fp, #-20]	; 0xffffffec
    1548:	movw	r1, #1
    154c:	str	r1, [r0]
    1550:	movw	r0, #0
    1554:	str	r0, [fp, #-12]
    1558:	b	1a24 <get_format+0x63c>
    155c:	sub	r0, fp, #100	; 0x64
    1560:	add	r1, r0, #4
    1564:	mov	r0, sp
    1568:	mov	r2, #0
    156c:	str	r2, [r0, #4]
    1570:	mov	r3, #4
    1574:	str	r3, [r0]
    1578:	add	r0, sp, #40	; 0x28
    157c:	str	r2, [sp, #16]
    1580:	mov	r2, r3
    1584:	ldr	r3, [sp, #16]
    1588:	bl	0 <coda_cursor_read_bytes>
    158c:	cmp	r0, #0
    1590:	beq	15a0 <get_format+0x1b8>
    1594:	mvn	r0, #0
    1598:	str	r0, [fp, #-12]
    159c:	b	1a24 <get_format+0x63c>
    15a0:	sub	r0, fp, #100	; 0x64
    15a4:	movw	r1, #0
    15a8:	movt	r1, #0
    15ac:	mov	r2, #8
    15b0:	bl	0 <memcmp>
    15b4:	cmp	r0, #0
    15b8:	bne	15d4 <get_format+0x1ec>
    15bc:	ldr	r0, [fp, #-20]	; 0xffffffec
    15c0:	movw	r1, #4
    15c4:	str	r1, [r0]
    15c8:	movw	r0, #0
    15cc:	str	r0, [fp, #-12]
    15d0:	b	1a24 <get_format+0x63c>
    15d4:	sub	r0, fp, #100	; 0x64
    15d8:	movw	r1, #0
    15dc:	movt	r1, #0
    15e0:	mov	r2, #8
    15e4:	bl	0 <memcmp>
    15e8:	cmp	r0, #0
    15ec:	beq	1660 <get_format+0x278>
    15f0:	sub	r0, fp, #100	; 0x64
    15f4:	movw	r1, #0
    15f8:	movt	r1, #0
    15fc:	mov	r2, #8
    1600:	bl	0 <memcmp>
    1604:	cmp	r0, #0
    1608:	beq	1660 <get_format+0x278>
    160c:	sub	r0, fp, #100	; 0x64
    1610:	movw	r1, #0
    1614:	movt	r1, #0
    1618:	mov	r2, #8
    161c:	bl	0 <memcmp>
    1620:	cmp	r0, #0
    1624:	beq	1660 <get_format+0x278>
    1628:	sub	r0, fp, #100	; 0x64
    162c:	movw	r1, #0
    1630:	movt	r1, #0
    1634:	mov	r2, #8
    1638:	bl	0 <memcmp>
    163c:	cmp	r0, #0
    1640:	beq	1660 <get_format+0x278>
    1644:	sub	r0, fp, #100	; 0x64
    1648:	movw	r1, #0
    164c:	movt	r1, #0
    1650:	mov	r2, #8
    1654:	bl	0 <memcmp>
    1658:	cmp	r0, #0
    165c:	bne	1678 <get_format+0x290>
    1660:	ldr	r0, [fp, #-20]	; 0xffffffec
    1664:	movw	r1, #5
    1668:	str	r1, [r0]
    166c:	movw	r0, #0
    1670:	str	r0, [fp, #-12]
    1674:	b	1a24 <get_format+0x63c>
    1678:	sub	r0, fp, #100	; 0x64
    167c:	ldr	r0, [r0]
    1680:	movw	r1, #21063	; 0x5247
    1684:	movt	r1, #16969	; 0x4249
    1688:	subs	r0, r0, r1
    168c:	movwne	r0, #1
    1690:	cmp	r0, #0
    1694:	bne	16cc <get_format+0x2e4>
    1698:	ldrb	r0, [fp, #-93]	; 0xffffffa3
    169c:	cmp	r0, #1
    16a0:	beq	16b0 <get_format+0x2c8>
    16a4:	ldrb	r0, [fp, #-93]	; 0xffffffa3
    16a8:	cmp	r0, #2
    16ac:	bne	16c8 <get_format+0x2e0>
    16b0:	ldr	r0, [fp, #-20]	; 0xffffffec
    16b4:	movw	r1, #7
    16b8:	str	r1, [r0]
    16bc:	movw	r0, #0
    16c0:	str	r0, [fp, #-12]
    16c4:	b	1a24 <get_format+0x63c>
    16c8:	b	16cc <get_format+0x2e4>
    16cc:	sub	r0, fp, #100	; 0x64
    16d0:	movw	r1, #0
    16d4:	movt	r1, #0
    16d8:	mov	r2, #5
    16dc:	bl	0 <memcmp>
    16e0:	cmp	r0, #0
    16e4:	beq	1704 <get_format+0x31c>
    16e8:	sub	r0, fp, #100	; 0x64
    16ec:	movw	r1, #0
    16f0:	movt	r1, #0
    16f4:	mov	r2, #8
    16f8:	bl	0 <memcmp>
    16fc:	cmp	r0, #0
    1700:	bne	171c <get_format+0x334>
    1704:	ldr	r0, [fp, #-20]	; 0xffffffec
    1708:	movw	r1, #2
    170c:	str	r1, [r0]
    1710:	movw	r0, #0
    1714:	str	r0, [fp, #-12]
    1718:	b	1a24 <get_format+0x63c>
    171c:	ldr	r0, [sp, #32]
    1720:	ldr	r1, [sp, #36]	; 0x24
    1724:	rsbs	r0, r0, #39	; 0x27
    1728:	rscs	r1, r1, #0
    172c:	blt	1740 <get_format+0x358>
    1730:	b	1734 <get_format+0x34c>
    1734:	movw	r0, #0
    1738:	str	r0, [fp, #-12]
    173c:	b	1a24 <get_format+0x63c>
    1740:	sub	r0, fp, #100	; 0x64
    1744:	add	r1, r0, #8
    1748:	mov	r0, sp
    174c:	mov	r2, #0
    1750:	str	r2, [r0, #4]
    1754:	mov	r3, #32
    1758:	str	r3, [r0]
    175c:	add	r0, sp, #40	; 0x28
    1760:	mov	r3, #8
    1764:	str	r2, [sp, #12]
    1768:	mov	r2, r3
    176c:	ldr	r3, [sp, #12]
    1770:	bl	0 <coda_cursor_read_bytes>
    1774:	cmp	r0, #0
    1778:	beq	1788 <get_format+0x3a0>
    177c:	mvn	r0, #0
    1780:	str	r0, [fp, #-12]
    1784:	b	1a24 <get_format+0x63c>
    1788:	ldr	r0, [sp, #32]
    178c:	ldr	r1, [sp, #36]	; 0x24
    1790:	subs	r0, r0, #60	; 0x3c
    1794:	sbcs	r1, r1, #0
    1798:	blt	18b8 <get_format+0x4d0>
    179c:	b	17a0 <get_format+0x3b8>
    17a0:	ldrb	r0, [fp, #-100]	; 0xffffff9c
    17a4:	cmp	r0, #35	; 0x23
    17a8:	bne	18b4 <get_format+0x4cc>
    17ac:	ldrb	r0, [fp, #-99]	; 0xffffff9d
    17b0:	cmp	r0, #97	; 0x61
    17b4:	beq	17d0 <get_format+0x3e8>
    17b8:	ldrb	r0, [fp, #-99]	; 0xffffff9d
    17bc:	cmp	r0, #98	; 0x62
    17c0:	beq	17d0 <get_format+0x3e8>
    17c4:	ldrb	r0, [fp, #-99]	; 0xffffff9d
    17c8:	cmp	r0, #99	; 0x63
    17cc:	bne	18b4 <get_format+0x4cc>
    17d0:	ldrb	r0, [fp, #-98]	; 0xffffff9e
    17d4:	cmp	r0, #80	; 0x50
    17d8:	beq	17e8 <get_format+0x400>
    17dc:	ldrb	r0, [fp, #-98]	; 0xffffff9e
    17e0:	cmp	r0, #86	; 0x56
    17e4:	bne	18b4 <get_format+0x4cc>
    17e8:	ldrb	r0, [fp, #-97]	; 0xffffff9f
    17ec:	cmp	r0, #48	; 0x30
    17f0:	blt	18b4 <get_format+0x4cc>
    17f4:	ldrb	r0, [fp, #-97]	; 0xffffff9f
    17f8:	cmp	r0, #57	; 0x39
    17fc:	bgt	18b4 <get_format+0x4cc>
    1800:	ldrb	r0, [fp, #-96]	; 0xffffffa0
    1804:	cmp	r0, #48	; 0x30
    1808:	blt	18b4 <get_format+0x4cc>
    180c:	ldrb	r0, [fp, #-96]	; 0xffffffa0
    1810:	cmp	r0, #57	; 0x39
    1814:	bgt	18b4 <get_format+0x4cc>
    1818:	ldrb	r0, [fp, #-95]	; 0xffffffa1
    181c:	cmp	r0, #48	; 0x30
    1820:	blt	18b4 <get_format+0x4cc>
    1824:	ldrb	r0, [fp, #-95]	; 0xffffffa1
    1828:	cmp	r0, #57	; 0x39
    182c:	bgt	18b4 <get_format+0x4cc>
    1830:	ldrb	r0, [fp, #-94]	; 0xffffffa2
    1834:	cmp	r0, #48	; 0x30
    1838:	blt	18b4 <get_format+0x4cc>
    183c:	ldrb	r0, [fp, #-94]	; 0xffffffa2
    1840:	cmp	r0, #57	; 0x39
    1844:	bgt	18b4 <get_format+0x4cc>
    1848:	ldrb	r0, [fp, #-93]	; 0xffffffa3
    184c:	cmp	r0, #32
    1850:	bne	18b4 <get_format+0x4cc>
    1854:	ldrb	r0, [fp, #-90]	; 0xffffffa6
    1858:	cmp	r0, #32
    185c:	bne	18b4 <get_format+0x4cc>
    1860:	ldrb	r0, [fp, #-87]	; 0xffffffa9
    1864:	cmp	r0, #32
    1868:	bne	18b4 <get_format+0x4cc>
    186c:	ldrb	r0, [fp, #-84]	; 0xffffffac
    1870:	cmp	r0, #32
    1874:	bne	18b4 <get_format+0x4cc>
    1878:	ldrb	r0, [fp, #-81]	; 0xffffffaf
    187c:	cmp	r0, #32
    1880:	bne	18b4 <get_format+0x4cc>
    1884:	ldrb	r0, [fp, #-69]	; 0xffffffbb
    1888:	cmp	r0, #32
    188c:	bne	18b4 <get_format+0x4cc>
    1890:	ldrb	r0, [fp, #-61]	; 0xffffffc3
    1894:	cmp	r0, #32
    1898:	bne	18b4 <get_format+0x4cc>
    189c:	ldr	r0, [fp, #-20]	; 0xffffffec
    18a0:	movw	r1, #9
    18a4:	str	r1, [r0]
    18a8:	movw	r0, #0
    18ac:	str	r0, [fp, #-12]
    18b0:	b	1a24 <get_format+0x63c>
    18b4:	b	18b8 <get_format+0x4d0>
    18b8:	ldr	r0, [sp, #32]
    18bc:	ldr	r1, [sp, #36]	; 0x24
    18c0:	rsbs	r0, r0, #79	; 0x4f
    18c4:	rscs	r1, r1, #0
    18c8:	blt	18dc <get_format+0x4f4>
    18cc:	b	18d0 <get_format+0x4e8>
    18d0:	movw	r0, #0
    18d4:	str	r0, [fp, #-12]
    18d8:	b	1a24 <get_format+0x63c>
    18dc:	sub	r1, fp, #100	; 0x64
    18e0:	mov	r0, sp
    18e4:	mov	r2, #0
    18e8:	str	r2, [r0, #4]
    18ec:	mov	r3, #20
    18f0:	str	r3, [r0]
    18f4:	add	r0, sp, #40	; 0x28
    18f8:	mov	r3, #60	; 0x3c
    18fc:	str	r2, [sp, #8]
    1900:	mov	r2, r3
    1904:	ldr	r3, [sp, #8]
    1908:	bl	0 <coda_cursor_read_bytes>
    190c:	cmp	r0, #0
    1910:	beq	1920 <get_format+0x538>
    1914:	mvn	r0, #0
    1918:	str	r0, [fp, #-12]
    191c:	b	1a24 <get_format+0x63c>
    1920:	sub	r0, fp, #100	; 0x64
    1924:	movw	r1, #0
    1928:	movt	r1, #0
    192c:	mov	r2, #20
    1930:	bl	0 <memcmp>
    1934:	cmp	r0, #0
    1938:	bne	1954 <get_format+0x56c>
    193c:	ldr	r0, [fp, #-20]	; 0xffffffec
    1940:	movw	r1, #8
    1944:	str	r1, [r0]
    1948:	movw	r0, #0
    194c:	str	r0, [fp, #-12]
    1950:	b	1a24 <get_format+0x63c>
    1954:	mov	r0, #0
    1958:	str	r0, [sp, #28]
    195c:	mov	r0, #512	; 0x200
    1960:	str	r0, [sp, #24]
    1964:	ldr	r0, [sp, #24]
    1968:	ldr	r1, [sp, #28]
    196c:	adds	r0, r0, #8
    1970:	adc	r1, r1, #0
    1974:	ldr	r2, [sp, #32]
    1978:	ldr	r3, [sp, #36]	; 0x24
    197c:	subs	r0, r0, r2
    1980:	sbcs	r1, r1, r3
    1984:	bge	1a1c <get_format+0x634>
    1988:	b	198c <get_format+0x5a4>
    198c:	sub	r1, fp, #100	; 0x64
    1990:	ldr	r2, [sp, #24]
    1994:	ldr	r3, [sp, #28]
    1998:	mov	r0, sp
    199c:	mov	ip, #0
    19a0:	str	ip, [r0, #4]
    19a4:	mov	ip, #8
    19a8:	str	ip, [r0]
    19ac:	add	r0, sp, #40	; 0x28
    19b0:	bl	0 <coda_cursor_read_bytes>
    19b4:	cmp	r0, #0
    19b8:	beq	19c8 <get_format+0x5e0>
    19bc:	mvn	r0, #0
    19c0:	str	r0, [fp, #-12]
    19c4:	b	1a24 <get_format+0x63c>
    19c8:	sub	r0, fp, #100	; 0x64
    19cc:	movw	r1, #0
    19d0:	movt	r1, #0
    19d4:	mov	r2, #8
    19d8:	bl	0 <memcmp>
    19dc:	cmp	r0, #0
    19e0:	bne	19fc <get_format+0x614>
    19e4:	ldr	r0, [fp, #-20]	; 0xffffffec
    19e8:	movw	r1, #4
    19ec:	str	r1, [r0]
    19f0:	movw	r0, #0
    19f4:	str	r0, [fp, #-12]
    19f8:	b	1a24 <get_format+0x63c>
    19fc:	ldr	r0, [sp, #24]
    1a00:	ldr	r1, [sp, #28]
    1a04:	lsl	r1, r1, #1
    1a08:	orr	r1, r1, r0, lsr #31
    1a0c:	lsl	r0, r0, #1
    1a10:	str	r0, [sp, #24]
    1a14:	str	r1, [sp, #28]
    1a18:	b	1964 <get_format+0x57c>
    1a1c:	movw	r0, #0
    1a20:	str	r0, [fp, #-12]
    1a24:	ldr	r0, [fp, #-12]
    1a28:	sub	sp, fp, #8
    1a2c:	pop	{r4, r5, fp, pc}

00001a30 <reopen_with_backend>:
    1a30:	push	{fp, lr}
    1a34:	mov	fp, sp
    1a38:	sub	sp, sp, #16
    1a3c:	str	r0, [sp, #8]
    1a40:	str	r1, [sp, #4]
    1a44:	ldr	r0, [sp, #4]
    1a48:	cmp	r0, #9
    1a4c:	str	r0, [sp]
    1a50:	bhi	1ba0 <reopen_with_backend+0x170>
    1a54:	add	r0, pc, #8
    1a58:	ldr	r1, [sp]
    1a5c:	ldr	r0, [r0, r1, lsl #2]
    1a60:	mov	pc, r0
    1a64:	.word	0x00001a8c
    1a68:	.word	0x00001aac
    1a6c:	.word	0x00001ab0
    1a70:	.word	0x00001ad0
    1a74:	.word	0x00001ae8
    1a78:	.word	0x00001b00
    1a7c:	.word	0x00001b20
    1a80:	.word	0x00001b40
    1a84:	.word	0x00001b60
    1a88:	.word	0x00001b80
    1a8c:	movw	r0, #0
    1a90:	movt	r0, #0
    1a94:	movw	r1, #0
    1a98:	movt	r1, #0
    1a9c:	movw	r2, #362	; 0x16a
    1aa0:	movw	r3, #0
    1aa4:	movt	r3, #0
    1aa8:	bl	0 <__assert_fail>
    1aac:	b	1ba0 <reopen_with_backend+0x170>
    1ab0:	ldr	r0, [sp, #8]
    1ab4:	bl	0 <coda_xml_reopen>
    1ab8:	cmp	r0, #0
    1abc:	beq	1acc <reopen_with_backend+0x9c>
    1ac0:	mvn	r0, #0
    1ac4:	str	r0, [fp, #-4]
    1ac8:	b	1ba8 <reopen_with_backend+0x178>
    1acc:	b	1ba0 <reopen_with_backend+0x170>
    1ad0:	mvn	r0, #10
    1ad4:	movw	r1, #0
    1ad8:	bl	0 <coda_set_error>
    1adc:	mvn	r0, #0
    1ae0:	str	r0, [fp, #-4]
    1ae4:	b	1ba8 <reopen_with_backend+0x178>
    1ae8:	mvn	r0, #12
    1aec:	movw	r1, #0
    1af0:	bl	0 <coda_set_error>
    1af4:	mvn	r0, #0
    1af8:	str	r0, [fp, #-4]
    1afc:	b	1ba8 <reopen_with_backend+0x178>
    1b00:	ldr	r0, [sp, #8]
    1b04:	bl	0 <coda_cdf_reopen>
    1b08:	cmp	r0, #0
    1b0c:	beq	1b1c <reopen_with_backend+0xec>
    1b10:	mvn	r0, #0
    1b14:	str	r0, [fp, #-4]
    1b18:	b	1ba8 <reopen_with_backend+0x178>
    1b1c:	b	1ba0 <reopen_with_backend+0x170>
    1b20:	ldr	r0, [sp, #8]
    1b24:	bl	0 <coda_netcdf_reopen>
    1b28:	cmp	r0, #0
    1b2c:	beq	1b3c <reopen_with_backend+0x10c>
    1b30:	mvn	r0, #0
    1b34:	str	r0, [fp, #-4]
    1b38:	b	1ba8 <reopen_with_backend+0x178>
    1b3c:	b	1ba0 <reopen_with_backend+0x170>
    1b40:	ldr	r0, [sp, #8]
    1b44:	bl	0 <coda_grib_reopen>
    1b48:	cmp	r0, #0
    1b4c:	beq	1b5c <reopen_with_backend+0x12c>
    1b50:	mvn	r0, #0
    1b54:	str	r0, [fp, #-4]
    1b58:	b	1ba8 <reopen_with_backend+0x178>
    1b5c:	b	1ba0 <reopen_with_backend+0x170>
    1b60:	ldr	r0, [sp, #8]
    1b64:	bl	0 <coda_rinex_reopen>
    1b68:	cmp	r0, #0
    1b6c:	beq	1b7c <reopen_with_backend+0x14c>
    1b70:	mvn	r0, #0
    1b74:	str	r0, [fp, #-4]
    1b78:	b	1ba8 <reopen_with_backend+0x178>
    1b7c:	b	1ba0 <reopen_with_backend+0x170>
    1b80:	ldr	r0, [sp, #8]
    1b84:	bl	0 <coda_sp3_reopen>
    1b88:	cmp	r0, #0
    1b8c:	beq	1b9c <reopen_with_backend+0x16c>
    1b90:	mvn	r0, #0
    1b94:	str	r0, [fp, #-4]
    1b98:	b	1ba8 <reopen_with_backend+0x178>
    1b9c:	b	1ba0 <reopen_with_backend+0x170>
    1ba0:	movw	r0, #0
    1ba4:	str	r0, [fp, #-4]
    1ba8:	ldr	r0, [fp, #-4]
    1bac:	mov	sp, fp
    1bb0:	pop	{fp, pc}
