
../repos/stcorp-coda-3a25f25/CMakeFiles/coda.dir/libcoda/coda-ascii.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <coda_ascii_reopen_with_definition>:
   0:	mov	ip, sp
   4:	sub	sp, sp, #32
   8:	str	ip, [sp, #4]
   c:	str	lr, [sp, #8]
  10:	str	r4, [sp, #16]
  14:	str	r5, [sp, #20]
  18:	str	r6, [sp, #24]
  1c:	mov	r6, r1
  20:	mov	r5, r0
  24:	cmp	r6, #0
  28:	bne	40 <coda_ascii_reopen_with_definition+0x40>
  2c:	ldr	r0, [pc, #444]	; 1f0 <coda_ascii_reopen_with_definition+0x1f0>
  30:	ldr	r1, [pc, #444]	; 1f4 <coda_ascii_reopen_with_definition+0x1f4>
  34:	mov	r2, #52	; 0x34
  38:	ldr	r3, [pc, #452]	; 204 <coda_ascii_reopen_with_definition+0x204>
  3c:	bl	0 <__assert_fail>
  40:	ldr	r0, [r5]
  44:	ldr	r3, [r0, #16]
  48:	cmp	r3, #1
  4c:	beq	64 <coda_ascii_reopen_with_definition+0x64>
  50:	ldr	r0, [pc, #404]	; 1ec <coda_ascii_reopen_with_definition+0x1ec>
  54:	ldr	r1, [pc, #408]	; 1f4 <coda_ascii_reopen_with_definition+0x1f4>
  58:	mov	r2, #53	; 0x35
  5c:	ldr	r3, [pc, #416]	; 204 <coda_ascii_reopen_with_definition+0x204>
  60:	bl	0 <__assert_fail>
  64:	ldr	r1, [r6]
  68:	cmp	r1, #0
  6c:	beq	84 <coda_ascii_reopen_with_definition+0x84>
  70:	ldr	r0, [pc, #384]	; 1f8 <coda_ascii_reopen_with_definition+0x1f8>
  74:	ldr	r1, [pc, #376]	; 1f4 <coda_ascii_reopen_with_definition+0x1f4>
  78:	mov	r2, #54	; 0x36
  7c:	ldr	r3, [pc, #384]	; 204 <coda_ascii_reopen_with_definition+0x204>
  80:	bl	0 <__assert_fail>
  84:	mov	r0, #80	; 0x50
  88:	bl	0 <malloc>
  8c:	mov	r4, r0
  90:	cmp	r4, #0
  94:	bne	bc <coda_ascii_reopen_with_definition+0xbc>
  98:	mvn	r0, #0
  9c:	ldr	r1, [pc, #344]	; 1fc <coda_ascii_reopen_with_definition+0x1fc>
  a0:	mov	r2, #80	; 0x50
  a4:	ldr	r3, [pc, #328]	; 1f4 <coda_ascii_reopen_with_definition+0x1f4>
  a8:	mov	ip, #61	; 0x3d
  ac:	str	ip, [sp]
  b0:	bl	0 <coda_set_error>
  b4:	mvn	r0, #0
  b8:	b	1d4 <coda_ascii_reopen_with_definition+0x1d4>
  bc:	mov	r2, #0
  c0:	str	r2, [r4]
  c4:	ldr	r1, [r5]
  c8:	ldr	r3, [r1, #8]
  cc:	ldr	r2, [r1, #12]
  d0:	str	r3, [r4, #8]
  d4:	str	r2, [r4, #12]
  d8:	ldr	r0, [r6]
  dc:	str	r0, [r4, #16]
  e0:	ldr	r3, [r6, #28]
  e4:	str	r3, [r4, #20]
  e8:	str	r6, [r4, #24]
  ec:	mov	r3, #0
  f0:	str	r3, [r4, #28]
  f4:	mov	r0, #0
  f8:	str	r0, [r4, #32]
  fc:	ldr	r3, [r5]
 100:	ldr	r2, [r3, #40]	; 0x28
 104:	ldr	ip, [r3, #44]	; 0x2c
 108:	str	r2, [r4, #40]	; 0x28
 10c:	str	ip, [r4, #44]	; 0x2c
 110:	ldr	r2, [r5]
 114:	mov	r1, #0
 118:	mov	r0, #0
 11c:	str	r0, [r2, #40]	; 0x28
 120:	str	r1, [r2, #44]	; 0x2c
 124:	ldr	ip, [r5]
 128:	ldr	r0, [ip, #48]	; 0x30
 12c:	str	r0, [r4, #48]	; 0x30
 130:	ldr	r3, [r5]
 134:	mov	ip, #0
 138:	str	ip, [r3, #48]	; 0x30
 13c:	ldr	ip, [r5]
 140:	ldr	ip, [ip, #52]	; 0x34
 144:	str	ip, [r4, #52]	; 0x34
 148:	ldr	r2, [r5]
 14c:	ldr	r3, [r2, #56]	; 0x38
 150:	str	r3, [r4, #56]	; 0x38
 154:	ldr	r1, [r5]
 158:	mvn	r0, #0
 15c:	str	r0, [r1, #56]	; 0x38
 160:	mov	ip, #0
 164:	str	ip, [r4, #60]	; 0x3c
 168:	mvn	r1, #0
 16c:	str	r1, [r4, #64]	; 0x40
 170:	mov	r0, #0
 174:	str	r0, [r4, #68]	; 0x44
 178:	mov	r1, #0
 17c:	str	r1, [r4, #72]	; 0x48
 180:	mov	r2, #0
 184:	str	r2, [r4, #76]	; 0x4c
 188:	ldr	r2, [r5]
 18c:	ldr	r0, [r2]
 190:	bl	0 <strdup>
 194:	str	r0, [r4]
 198:	cmp	r0, #0
 19c:	bne	1c4 <coda_ascii_reopen_with_definition+0x1c4>
 1a0:	mvn	r0, #0
 1a4:	ldr	r1, [pc, #84]	; 200 <coda_ascii_reopen_with_definition+0x200>
 1a8:	ldr	r2, [pc, #68]	; 1f4 <coda_ascii_reopen_with_definition+0x1f4>
 1ac:	mov	r3, #97	; 0x61
 1b0:	bl	0 <coda_set_error>
 1b4:	mov	r0, r4
 1b8:	bl	0 <free>
 1bc:	mvn	r0, #0
 1c0:	b	1d4 <coda_ascii_reopen_with_definition+0x1d4>
 1c4:	ldr	r0, [r5]
 1c8:	bl	0 <coda_close>
 1cc:	str	r4, [r5]
 1d0:	mov	r0, #0
 1d4:	ldr	r4, [sp, #16]
 1d8:	ldr	r5, [sp, #20]
 1dc:	ldr	r6, [sp, #24]
 1e0:	ldr	lr, [sp, #8]
 1e4:	add	sp, sp, #32
 1e8:	bx	lr
 1ec:	.word	0x00000060
 1f0:	.word	0x00000048
 1f4:	.word	0x000001db
 1f8:	.word	0x00000106
 1fc:	.word	0x00000237
 200:	.word	0x000002e7
 204:	.word	0x0000032e

00000208 <coda_ascii_close>:
 208:	mov	ip, sp
 20c:	sub	sp, sp, #16
 210:	str	ip, [sp]
 214:	str	lr, [sp, #4]
 218:	str	r4, [sp, #8]
 21c:	mov	r4, r0
 220:	mov	r0, r4
 224:	bl	0 <coda_bin_product_close>
 228:	cmp	r0, #0
 22c:	beq	238 <coda_ascii_close+0x30>
 230:	mvn	r0, #0
 234:	b	274 <coda_ascii_close+0x6c>
 238:	ldr	r0, [r4]
 23c:	cmp	r0, #0
 240:	beq	248 <coda_ascii_close+0x40>
 244:	bl	0 <free>
 248:	ldr	r0, [r4, #68]	; 0x44
 24c:	cmp	r0, #0
 250:	beq	258 <coda_ascii_close+0x50>
 254:	bl	0 <free>
 258:	ldr	r0, [r4, #76]	; 0x4c
 25c:	cmp	r0, #0
 260:	beq	268 <coda_ascii_close+0x60>
 264:	bl	0 <coda_type_release>
 268:	mov	r0, r4
 26c:	bl	0 <free>
 270:	mov	r0, #0
 274:	ldr	r4, [sp, #8]
 278:	ldr	lr, [sp, #4]
 27c:	add	sp, sp, #16
 280:	bx	lr

00000284 <eol_type_to_string>:
 284:	mov	ip, sp
 288:	sub	sp, sp, #16
 28c:	str	ip, [sp]
 290:	str	lr, [sp, #4]
 294:	str	r4, [sp, #8]
 298:	cmp	r0, #1
 29c:	beq	2e0 <eol_type_to_string+0x5c>
 2a0:	cmp	r0, #2
 2a4:	beq	2d8 <eol_type_to_string+0x54>
 2a8:	cmp	r0, #3
 2ac:	bne	2b8 <eol_type_to_string+0x34>
 2b0:	ldr	r4, [pc, #76]	; 304 <eol_type_to_string+0x80>
 2b4:	b	2e4 <eol_type_to_string+0x60>
 2b8:	ldr	r0, [pc, #64]	; 300 <eol_type_to_string+0x7c>
 2bc:	ldr	r1, [pc, #56]	; 2fc <eol_type_to_string+0x78>
 2c0:	mov	r2, #150	; 0x96
 2c4:	ldr	r3, [pc, #44]	; 2f8 <eol_type_to_string+0x74>
 2c8:	bl	0 <__assert_fail>
 2cc:	mov	r0, #1
 2d0:	bl	0 <exit>
 2d4:	b	2e4 <eol_type_to_string+0x60>
 2d8:	ldr	r4, [pc, #44]	; 30c <eol_type_to_string+0x88>
 2dc:	b	2e4 <eol_type_to_string+0x60>
 2e0:	ldr	r4, [pc, #32]	; 308 <eol_type_to_string+0x84>
 2e4:	mov	r0, r4
 2e8:	ldr	r4, [sp, #8]
 2ec:	ldr	lr, [sp, #4]
 2f0:	add	sp, sp, #16
 2f4:	bx	lr
 2f8:	.word	0x00000350
 2fc:	.word	0x000001db
 300:	.word	0x00000235
 304:	.word	0x0000005b
 308:	.word	0x000001d8
 30c:	.word	0x000002e4

00000310 <verify_eol_type>:
 310:	mov	ip, sp
 314:	sub	sp, sp, #16
 318:	str	ip, [sp]
 31c:	str	lr, [sp, #4]
 320:	str	r4, [sp, #8]
 324:	str	r5, [sp, #12]
 328:	mov	r4, r1
 32c:	mov	r5, r0
 330:	cmp	r4, #0
 334:	bne	34c <verify_eol_type+0x3c>
 338:	ldr	r0, [pc, #124]	; 3bc <verify_eol_type+0xac>
 33c:	ldr	r1, [pc, #124]	; 3c0 <verify_eol_type+0xb0>
 340:	mov	r2, #156	; 0x9c
 344:	ldr	r3, [pc, #124]	; 3c8 <verify_eol_type+0xb8>
 348:	bl	0 <__assert_fail>
 34c:	ldr	r1, [r5, #60]	; 0x3c
 350:	cmp	r1, #0
 354:	bne	364 <verify_eol_type+0x54>
 358:	str	r4, [r5, #60]	; 0x3c
 35c:	mov	r0, #0
 360:	b	3a8 <verify_eol_type+0x98>
 364:	cmp	r1, r4
 368:	beq	3a4 <verify_eol_type+0x94>
 36c:	mov	r0, r4
 370:	bl	284 <eol_type_to_string>
 374:	mov	r4, r0
 378:	ldr	r0, [r5, #60]	; 0x3c
 37c:	bl	284 <eol_type_to_string>
 380:	movw	r2, #65236	; 0xfed4
 384:	movt	r2, #65535	; 0xffff
 388:	ldr	r1, [pc, #52]	; 3c4 <verify_eol_type+0xb4>
 38c:	mov	r3, r0
 390:	mov	r0, r2
 394:	mov	r2, r4
 398:	bl	0 <coda_set_error>
 39c:	mvn	r0, #0
 3a0:	b	3a8 <verify_eol_type+0x98>
 3a4:	mov	r0, #0
 3a8:	ldr	r4, [sp, #8]
 3ac:	ldr	r5, [sp, #12]
 3b0:	ldr	lr, [sp, #4]
 3b4:	add	sp, sp, #16
 3b8:	bx	lr
 3bc:	.word	0x000001bd
 3c0:	.word	0x000001db
 3c4:	.word	0x00000169
 3c8:	.word	0x00000363

000003cc <coda_ascii_init_asciilines>:
 3cc:	mov	ip, sp
 3d0:	sub	sp, sp, #144	; 0x90
 3d4:	sub	sp, sp, #4096	; 0x1000
 3d8:	str	ip, [sp, #4]
 3dc:	str	lr, [sp, #8]
 3e0:	str	r4, [sp, #28]
 3e4:	str	r5, [sp, #32]
 3e8:	str	r6, [sp, #36]	; 0x24
 3ec:	str	r7, [sp, #40]	; 0x28
 3f0:	str	r8, [sp, #44]	; 0x2c
 3f4:	str	r9, [sp, #48]	; 0x30
 3f8:	str	sl, [sp, #52]	; 0x34
 3fc:	str	fp, [sp, #56]	; 0x38
 400:	mov	r7, r0
 404:	mov	fp, #0
 408:	mov	r8, #0
 40c:	mov	ip, #0
 410:	mov	r4, #0
 414:	str	ip, [sp, #20]
 418:	mov	r3, #0
 41c:	str	r3, [sp, #24]
 420:	mov	sl, #0
 424:	ldr	r1, [r7, #64]	; 0x40
 428:	cmn	r1, #1
 42c:	beq	444 <coda_ascii_init_asciilines+0x78>
 430:	ldr	r0, [pc, #1540]	; a3c <coda_ascii_init_asciilines+0x670>
 434:	ldr	r1, [pc, #1528]	; a34 <coda_ascii_init_asciilines+0x668>
 438:	mov	r2, #185	; 0xb9
 43c:	ldr	r3, [pc, #1536]	; a44 <coda_ascii_init_asciilines+0x678>
 440:	bl	0 <__assert_fail>
 444:	ldr	r0, [r7, #52]	; 0x34
 448:	cmp	r0, #0
 44c:	bne	494 <coda_ascii_init_asciilines+0xc8>
 450:	ldr	r0, [r7, #56]	; 0x38
 454:	mov	r1, #0
 458:	mov	r2, #0
 45c:	bl	0 <lseek>
 460:	cmp	r0, #0
 464:	bge	494 <coda_ascii_init_asciilines+0xc8>
 468:	bl	0 <__errno_location>
 46c:	ldr	r0, [r0]
 470:	bl	0 <strerror>
 474:	mvn	r2, #21
 478:	ldr	r1, [pc, #1484]	; a4c <coda_ascii_init_asciilines+0x680>
 47c:	mov	ip, r0
 480:	mov	r0, r2
 484:	mov	r2, ip
 488:	bl	0 <coda_set_error>
 48c:	mvn	r0, #0
 490:	b	a04 <coda_ascii_init_asciilines+0x638>
 494:	mov	r6, #0
 498:	mov	r5, #4096	; 0x1000
 49c:	ldr	r2, [sp, #20]
 4a0:	adds	ip, r4, r5
 4a4:	adc	r1, r2, r6
 4a8:	ldr	r0, [r7, #8]
 4ac:	ldr	r3, [r7, #12]
 4b0:	cmp	r1, r3
 4b4:	bne	4c4 <coda_ascii_init_asciilines+0xf8>
 4b8:	cmp	ip, r0
 4bc:	bhi	4cc <coda_ascii_init_asciilines+0x100>
 4c0:	b	4e0 <coda_ascii_init_asciilines+0x114>
 4c4:	cmp	r1, r3
 4c8:	ble	4e0 <coda_ascii_init_asciilines+0x114>
 4cc:	ldr	r1, [r7, #8]
 4d0:	ldr	r0, [r7, #12]
 4d4:	ldr	r3, [sp, #20]
 4d8:	subs	r5, r1, r4
 4dc:	sbc	r6, r0, r3
 4e0:	mov	r2, r5
 4e4:	mov	r3, r6
 4e8:	orr	r1, r3, r2
 4ec:	cmp	r1, #0
 4f0:	beq	9c4 <coda_ascii_init_asciilines+0x5f8>
 4f4:	add	r1, sp, #64	; 0x40
 4f8:	str	r1, [sp, #16]
 4fc:	ldr	r9, [sp, #20]
 500:	ldr	ip, [r7, #48]	; 0x30
 504:	cmp	ip, #0
 508:	bne	5c0 <coda_ascii_init_asciilines+0x1f4>
 50c:	ldr	r3, [r7, #16]
 510:	cmp	r3, #0
 514:	beq	534 <coda_ascii_init_asciilines+0x168>
 518:	cmp	r3, #1
 51c:	beq	534 <coda_ascii_init_asciilines+0x168>
 520:	ldr	r0, [pc, #1288]	; a30 <coda_ascii_init_asciilines+0x664>
 524:	ldr	r1, [pc, #1308]	; a48 <coda_ascii_init_asciilines+0x67c>
 528:	mov	r2, #83	; 0x53
 52c:	ldr	r3, [pc, #1312]	; a54 <coda_ascii_init_asciilines+0x688>
 530:	bl	0 <__assert_fail>
 534:	adds	r1, r4, r5
 538:	adc	r2, r9, r6
 53c:	ldr	ip, [r7, #8]
 540:	ldr	r0, [r7, #12]
 544:	cmp	r2, r0
 548:	bne	558 <coda_ascii_init_asciilines+0x18c>
 54c:	cmp	r1, ip
 550:	bhi	560 <coda_ascii_init_asciilines+0x194>
 554:	b	574 <coda_ascii_init_asciilines+0x1a8>
 558:	cmp	r2, r0
 55c:	bls	574 <coda_ascii_init_asciilines+0x1a8>
 560:	mvn	r0, #300	; 0x12c
 564:	ldr	r1, [pc, #1252]	; a50 <coda_ascii_init_asciilines+0x684>
 568:	bl	0 <coda_set_error>
 56c:	mvn	r0, #0
 570:	b	69c <coda_ascii_init_asciilines+0x2d0>
 574:	ldr	r0, [r7, #56]	; 0x38
 578:	mov	r2, r5
 57c:	mov	r1, r4
 580:	mov	r3, r1
 584:	ldr	r1, [sp, #16]
 588:	bl	0 <pread>
 58c:	cmp	r0, #0
 590:	bge	698 <coda_ascii_init_asciilines+0x2cc>
 594:	bl	0 <__errno_location>
 598:	ldr	r0, [r0]
 59c:	bl	0 <strerror>
 5a0:	mvn	r2, #21
 5a4:	ldr	r1, [pc, #1196]	; a58 <coda_ascii_init_asciilines+0x68c>
 5a8:	mov	r3, r0
 5ac:	mov	r0, r2
 5b0:	mov	r2, r3
 5b4:	bl	0 <coda_set_error>
 5b8:	mvn	r0, #0
 5bc:	b	69c <coda_ascii_init_asciilines+0x2d0>
 5c0:	adds	r2, r4, r5
 5c4:	adc	r1, r9, r6
 5c8:	ldr	r3, [r7, #40]	; 0x28
 5cc:	ldr	ip, [r7, #44]	; 0x2c
 5d0:	cmp	r1, ip
 5d4:	bne	5e4 <coda_ascii_init_asciilines+0x218>
 5d8:	cmp	r2, r3
 5dc:	bhi	5ec <coda_ascii_init_asciilines+0x220>
 5e0:	b	680 <coda_ascii_init_asciilines+0x2b4>
 5e4:	cmp	r1, ip
 5e8:	bls	680 <coda_ascii_init_asciilines+0x2b4>
 5ec:	ldr	r2, [r7, #16]
 5f0:	cmp	r2, #0
 5f4:	beq	66c <coda_ascii_init_asciilines+0x2a0>
 5f8:	cmp	r2, #1
 5fc:	beq	66c <coda_ascii_init_asciilines+0x2a0>
 600:	add	r2, sp, #96	; 0x60
 604:	add	r2, r2, #4096	; 0x1000
 608:	mov	r1, r6
 60c:	mov	r0, r5
 610:	bl	0 <coda_str64>
 614:	add	r2, sp, #120	; 0x78
 618:	add	r2, r2, #4096	; 0x1000
 61c:	mov	r1, r9
 620:	mov	r0, r4
 624:	bl	0 <coda_str64>
 628:	ldr	r0, [r7, #40]	; 0x28
 62c:	ldr	r1, [r7, #44]	; 0x2c
 630:	add	r2, sp, #72	; 0x48
 634:	add	r2, r2, #4096	; 0x1000
 638:	bl	0 <coda_str64>
 63c:	mvn	r0, #300	; 0x12c
 640:	ldr	r1, [pc, #1008]	; a38 <coda_ascii_init_asciilines+0x66c>
 644:	add	r2, sp, #96	; 0x60
 648:	add	r2, r2, #4096	; 0x1000
 64c:	add	r3, sp, #120	; 0x78
 650:	add	r3, r3, #4096	; 0x1000
 654:	add	r9, sp, #72	; 0x48
 658:	add	r9, r9, #4096	; 0x1000
 65c:	str	r9, [sp]
 660:	bl	0 <coda_set_error>
 664:	mvn	r0, #0
 668:	b	69c <coda_ascii_init_asciilines+0x2d0>
 66c:	mvn	r0, #300	; 0x12c
 670:	ldr	r1, [pc, #984]	; a50 <coda_ascii_init_asciilines+0x684>
 674:	bl	0 <coda_set_error>
 678:	mvn	r0, #0
 67c:	b	69c <coda_ascii_init_asciilines+0x2d0>
 680:	ldr	r3, [r7, #48]	; 0x30
 684:	mov	ip, r4
 688:	add	r1, r3, ip
 68c:	mov	r2, r5
 690:	ldr	r0, [sp, #16]
 694:	bl	0 <memcpy>
 698:	mov	r0, #0
 69c:	cmp	r0, #0
 6a0:	beq	6ac <coda_ascii_init_asciilines+0x2e0>
 6a4:	mvn	r0, #0
 6a8:	b	a04 <coda_ascii_init_asciilines+0x638>
 6ac:	ldr	ip, [sp, #24]
 6b0:	cmp	ip, #13
 6b4:	bne	6e8 <coda_ascii_init_asciilines+0x31c>
 6b8:	ldrb	r0, [sp, #64]	; 0x40
 6bc:	cmp	r0, #10
 6c0:	beq	6e8 <coda_ascii_init_asciilines+0x31c>
 6c4:	mov	r1, #2
 6c8:	mov	r0, r7
 6cc:	bl	310 <verify_eol_type>
 6d0:	cmp	r0, #0
 6d4:	beq	6e8 <coda_ascii_init_asciilines+0x31c>
 6d8:	mov	r0, r8
 6dc:	bl	0 <free>
 6e0:	mvn	r0, #0
 6e4:	b	a04 <coda_ascii_init_asciilines+0x638>
 6e8:	mov	r9, #0
 6ec:	mov	r3, r9
 6f0:	asr	ip, r3, #31
 6f4:	mov	r1, r6
 6f8:	cmp	ip, r1
 6fc:	bne	710 <coda_ascii_init_asciilines+0x344>
 700:	mov	r2, r5
 704:	cmp	r3, r2
 708:	bcc	718 <coda_ascii_init_asciilines+0x34c>
 70c:	b	98c <coda_ascii_init_asciilines+0x5c0>
 710:	cmp	ip, r1
 714:	bge	98c <coda_ascii_init_asciilines+0x5c0>
 718:	ldr	r2, [sp, #24]
 71c:	cmp	r2, #13
 720:	moveq	r2, #1
 724:	movne	r2, #0
 728:	mov	r3, #0
 72c:	cmp	r9, #0
 730:	moveq	r0, r2
 734:	movne	r0, r3
 738:	cmp	r0, #0
 73c:	beq	790 <coda_ascii_init_asciilines+0x3c4>
 740:	ldrb	r3, [sp, #64]	; 0x40
 744:	cmp	r3, #10
 748:	bne	790 <coda_ascii_init_asciilines+0x3c4>
 74c:	lsl	r3, fp, #2
 750:	add	ip, r8, r3
 754:	sub	lr, ip, #4096	; 0x1000
 758:	ldr	r0, [lr, #4092]	; 0xffc
 75c:	add	r2, r0, #1
 760:	sub	lr, ip, #4096	; 0x1000
 764:	str	r2, [lr, #4092]	; 0xffc
 768:	mov	sl, #3
 76c:	mov	r1, #3
 770:	mov	r0, r7
 774:	bl	310 <verify_eol_type>
 778:	cmp	r0, #0
 77c:	beq	984 <coda_ascii_init_asciilines+0x5b8>
 780:	mov	r0, r8
 784:	bl	0 <free>
 788:	mvn	r0, #0
 78c:	b	a04 <coda_ascii_init_asciilines+0x638>
 790:	add	ip, sp, #64	; 0x40
 794:	ldrb	r3, [ip, r9]
 798:	cmp	r3, #13
 79c:	beq	800 <coda_ascii_init_asciilines+0x434>
 7a0:	cmp	r3, #10
 7a4:	beq	800 <coda_ascii_init_asciilines+0x434>
 7a8:	mov	r1, r9
 7ac:	asr	r2, r1, #31
 7b0:	ldr	r0, [sp, #20]
 7b4:	adds	lr, r4, r1
 7b8:	adc	ip, r0, r2
 7bc:	mov	r0, lr
 7c0:	str	r0, [sp, #16]
 7c4:	ldr	r2, [r7, #8]
 7c8:	mov	r0, r2
 7cc:	ldr	r2, [r7, #12]
 7d0:	mov	r1, r2
 7d4:	mov	r3, #0
 7d8:	mov	r2, #1
 7dc:	subs	lr, r0, r2
 7e0:	sbc	r0, r1, r3
 7e4:	mov	r3, lr
 7e8:	eor	ip, ip, r0
 7ec:	ldr	r0, [sp, #16]
 7f0:	eor	r0, r0, r3
 7f4:	orr	r2, ip, r0
 7f8:	cmp	r2, #0
 7fc:	bne	984 <coda_ascii_init_asciilines+0x5b8>
 800:	asr	lr, fp, #31
 804:	add	lr, fp, lr, lsr #28
 808:	asr	ip, lr, #4
 80c:	lsl	ip, ip, #4
 810:	sub	ip, fp, ip
 814:	cmp	ip, #0
 818:	bne	870 <coda_ascii_init_asciilines+0x4a4>
 81c:	lsl	r1, fp, #2
 820:	add	r1, r1, #64	; 0x40
 824:	mov	r0, r8
 828:	bl	0 <realloc>
 82c:	cmp	r0, #0
 830:	bne	86c <coda_ascii_init_asciilines+0x4a0>
 834:	mvn	r0, #0
 838:	ldr	r1, [pc, #512]	; a40 <coda_ascii_init_asciilines+0x674>
 83c:	lsl	r2, fp, #2
 840:	add	r2, r2, #64	; 0x40
 844:	ldr	r3, [pc, #488]	; a34 <coda_ascii_init_asciilines+0x668>
 848:	mov	r4, #245	; 0xf5
 84c:	str	r4, [sp]
 850:	bl	0 <coda_set_error>
 854:	cmp	r8, #0
 858:	beq	864 <coda_ascii_init_asciilines+0x498>
 85c:	mov	r0, r8
 860:	bl	0 <free>
 864:	mvn	r0, #0
 868:	b	a04 <coda_ascii_init_asciilines+0x638>
 86c:	mov	r8, r0
 870:	add	ip, r4, r9
 874:	add	r2, ip, #1
 878:	str	r2, [r8, fp, lsl #2]
 87c:	add	fp, fp, #1
 880:	mov	sl, #0
 884:	add	r3, sp, #64	; 0x40
 888:	ldrb	r1, [r3, r9]
 88c:	cmp	r1, #10
 890:	beq	95c <coda_ascii_init_asciilines+0x590>
 894:	cmp	r1, #13
 898:	bne	984 <coda_ascii_init_asciilines+0x5b8>
 89c:	mov	sl, #2
 8a0:	asr	r2, r9, #31
 8a4:	mov	r3, r9
 8a8:	mov	r1, #0
 8ac:	mov	r0, #1
 8b0:	subs	lr, r5, r0
 8b4:	sbc	ip, r6, r1
 8b8:	mov	r1, lr
 8bc:	cmp	r2, ip
 8c0:	bne	8d0 <coda_ascii_init_asciilines+0x504>
 8c4:	cmp	r3, r1
 8c8:	bcc	8d8 <coda_ascii_init_asciilines+0x50c>
 8cc:	b	984 <coda_ascii_init_asciilines+0x5b8>
 8d0:	cmp	r2, ip
 8d4:	bge	984 <coda_ascii_init_asciilines+0x5b8>
 8d8:	add	r0, sp, #64	; 0x40
 8dc:	add	r3, r0, r9
 8e0:	ldrb	r1, [r3, #1]
 8e4:	cmp	r1, #10
 8e8:	bne	938 <coda_ascii_init_asciilines+0x56c>
 8ec:	mov	sl, #3
 8f0:	mov	r1, #3
 8f4:	mov	r0, r7
 8f8:	bl	310 <verify_eol_type>
 8fc:	cmp	r0, #0
 900:	beq	914 <coda_ascii_init_asciilines+0x548>
 904:	mov	r0, r8
 908:	bl	0 <free>
 90c:	mvn	r0, #0
 910:	b	a04 <coda_ascii_init_asciilines+0x638>
 914:	lsl	r2, fp, #2
 918:	add	r3, r8, r2
 91c:	sub	lr, r3, #4096	; 0x1000
 920:	ldr	r1, [lr, #4092]	; 0xffc
 924:	add	r1, r1, #1
 928:	sub	lr, r3, #4096	; 0x1000
 92c:	str	r1, [lr, #4092]	; 0xffc
 930:	add	r9, r9, #1
 934:	b	984 <coda_ascii_init_asciilines+0x5b8>
 938:	mov	r1, #2
 93c:	mov	r0, r7
 940:	bl	310 <verify_eol_type>
 944:	cmp	r0, #0
 948:	beq	984 <coda_ascii_init_asciilines+0x5b8>
 94c:	mov	r0, r8
 950:	bl	0 <free>
 954:	mvn	r0, #0
 958:	b	a04 <coda_ascii_init_asciilines+0x638>
 95c:	mov	sl, #1
 960:	mov	r1, #1
 964:	mov	r0, r7
 968:	bl	310 <verify_eol_type>
 96c:	cmp	r0, #0
 970:	beq	984 <coda_ascii_init_asciilines+0x5b8>
 974:	mov	r0, r8
 978:	bl	0 <free>
 97c:	mvn	r0, #0
 980:	b	a04 <coda_ascii_init_asciilines+0x638>
 984:	add	r9, r9, #1
 988:	b	6ec <coda_ascii_init_asciilines+0x320>
 98c:	add	r1, sp, #64	; 0x40
 990:	mov	r2, #0
 994:	mov	r0, #1
 998:	subs	lr, r5, r0
 99c:	sbc	r3, r6, r2
 9a0:	mov	r2, lr
 9a4:	ldrb	r3, [r1, r2]
 9a8:	and	r1, r3, #255	; 0xff
 9ac:	str	r1, [sp, #24]
 9b0:	ldr	r1, [sp, #20]
 9b4:	adds	r4, r4, r5
 9b8:	adc	r2, r1, r6
 9bc:	str	r2, [sp, #20]
 9c0:	b	494 <coda_ascii_init_asciilines+0xc8>
 9c4:	ldr	r0, [sp, #24]
 9c8:	cmp	r0, #13
 9cc:	bne	9f4 <coda_ascii_init_asciilines+0x628>
 9d0:	mov	r1, #2
 9d4:	mov	r0, r7
 9d8:	bl	310 <verify_eol_type>
 9dc:	cmp	r0, #0
 9e0:	beq	9f4 <coda_ascii_init_asciilines+0x628>
 9e4:	mov	r0, r8
 9e8:	bl	0 <free>
 9ec:	mvn	r0, #0
 9f0:	b	a04 <coda_ascii_init_asciilines+0x638>
 9f4:	str	fp, [r7, #64]	; 0x40
 9f8:	str	r8, [r7, #68]	; 0x44
 9fc:	str	sl, [r7, #72]	; 0x48
 a00:	mov	r0, #0
 a04:	ldr	r4, [sp, #28]
 a08:	ldr	r5, [sp, #32]
 a0c:	ldr	r6, [sp, #36]	; 0x24
 a10:	ldr	r7, [sp, #40]	; 0x28
 a14:	ldr	r8, [sp, #44]	; 0x2c
 a18:	ldr	r9, [sp, #48]	; 0x30
 a1c:	ldr	sl, [sp, #52]	; 0x34
 a20:	ldr	fp, [sp, #56]	; 0x38
 a24:	ldr	lr, [sp, #8]
 a28:	ldr	sp, [sp, #4]
 a2c:	bx	lr
 a30:	.word	0x00000296
 a34:	.word	0x000001db
 a38:	.word	0x0000012e
 a3c:	.word	0x00000000
 a40:	.word	0x00000237
 a44:	.word	0x00000373
 a48:	.word	0x000000a7
 a4c:	.word	0x00000023
 a50:	.word	0x0000026c
 a54:	.word	0x00000323
 a58:	.word	0x00000089
