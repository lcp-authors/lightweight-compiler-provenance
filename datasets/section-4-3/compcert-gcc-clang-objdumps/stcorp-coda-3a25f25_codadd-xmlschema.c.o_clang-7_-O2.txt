
../compcert-repos/stcorp-coda-3a25f25/CMakeFiles/codadd.dir/tools/codadd/codadd-xmlschema.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <generate_xmlschema>:
   0:	push	{r4, r5, r6, r7, fp, lr}
   4:	add	fp, sp, #16
   8:	mov	r4, r0
   c:	movw	r0, #0
  10:	mov	r6, r3
  14:	mov	r7, r2
  18:	movt	r0, #0
  1c:	ldr	r5, [r0]
  20:	mov	r0, r1
  24:	bl	0 <coda_data_dictionary_get_product_class>
  28:	cmp	r0, #0
  2c:	beq	150 <generate_xmlschema+0x150>
  30:	mov	r1, r7
  34:	bl	0 <coda_product_class_get_product_type>
  38:	cmp	r0, #0
  3c:	beq	15c <generate_xmlschema+0x15c>
  40:	mov	r1, r6
  44:	bl	0 <coda_product_type_get_product_definition_by_version>
  48:	cmp	r0, #0
  4c:	beq	168 <generate_xmlschema+0x168>
  50:	mov	r6, r0
  54:	ldr	r0, [r0]
  58:	cmp	r0, #2
  5c:	bne	1a4 <generate_xmlschema+0x1a4>
  60:	ldr	r7, [r6, #28]
  64:	cmp	r7, #0
  68:	beq	1c0 <generate_xmlschema+0x1c0>
  6c:	cmp	r4, #0
  70:	beq	94 <generate_xmlschema+0x94>
  74:	movw	r1, #0
  78:	mov	r0, r4
  7c:	movt	r1, #0
  80:	bl	0 <fopen>
  84:	cmp	r0, #0
  88:	beq	228 <generate_xmlschema+0x228>
  8c:	ldr	r7, [r6, #28]
  90:	mov	r5, r0
  94:	ldr	r0, [r7, #8]
  98:	cmp	r0, #0
  9c:	bne	1e8 <generate_xmlschema+0x1e8>
  a0:	ldr	r0, [r7, #48]	; 0x30
  a4:	cmp	r0, #1
  a8:	bne	208 <generate_xmlschema+0x208>
  ac:	movw	r0, #0
  b0:	mov	r1, #39	; 0x27
  b4:	mov	r2, #1
  b8:	mov	r3, r5
  bc:	movt	r0, #0
  c0:	bl	0 <fwrite>
  c4:	movw	r0, #0
  c8:	mov	r1, #56	; 0x38
  cc:	mov	r2, #1
  d0:	mov	r3, r5
  d4:	movt	r0, #0
  d8:	bl	0 <fwrite>
  dc:	ldr	r0, [r7, #52]	; 0x34
  e0:	movw	r1, #0
  e4:	movt	r1, #0
  e8:	ldr	r0, [r0]
  ec:	ldr	r2, [r0, #4]
  f0:	mov	r0, r5
  f4:	bl	0 <fprintf>
  f8:	ldr	r0, [r7, #52]	; 0x34
  fc:	ldr	r0, [r0]
 100:	ldr	r1, [r0, #8]
 104:	mov	r0, r5
 108:	bl	250 <print_xml_element>
 10c:	movw	r0, #0
 110:	mov	r1, #14
 114:	mov	r2, #1
 118:	mov	r3, r5
 11c:	movt	r0, #0
 120:	bl	0 <fwrite>
 124:	movw	r0, #0
 128:	mov	r1, #13
 12c:	mov	r2, #1
 130:	mov	r3, r5
 134:	movt	r0, #0
 138:	bl	0 <fwrite>
 13c:	cmp	r4, #0
 140:	popeq	{r4, r5, r6, r7, fp, pc}
 144:	mov	r0, r5
 148:	pop	{r4, r5, r6, r7, fp, lr}
 14c:	b	0 <fclose>
 150:	ldr	r0, [pc, #244]	; 24c <generate_xmlschema+0x24c>
 154:	ldr	r1, [pc, r0]
 158:	b	170 <generate_xmlschema+0x170>
 15c:	ldr	r0, [pc, #228]	; 248 <generate_xmlschema+0x248>
 160:	ldr	r1, [pc, r0]
 164:	b	170 <generate_xmlschema+0x170>
 168:	ldr	r0, [pc, #212]	; 244 <generate_xmlschema+0x244>
 16c:	ldr	r1, [pc, r0]
 170:	bl	0 <__aeabi_read_tp>
 174:	ldr	r0, [r0, r1]
 178:	movw	r1, #0
 17c:	movt	r1, #0
 180:	ldr	r4, [r1]
 184:	bl	0 <coda_errno_to_string>
 188:	movw	r1, #0
 18c:	mov	r2, r0
 190:	mov	r0, r4
 194:	movt	r1, #0
 198:	bl	0 <fprintf>
 19c:	mov	r0, #1
 1a0:	bl	0 <exit>
 1a4:	movw	r0, #0
 1a8:	mov	r1, #36	; 0x24
 1ac:	movt	r0, #0
 1b0:	ldr	r3, [r0]
 1b4:	movw	r0, #0
 1b8:	movt	r0, #0
 1bc:	b	1d8 <generate_xmlschema+0x1d8>
 1c0:	movw	r0, #0
 1c4:	mov	r1, #49	; 0x31
 1c8:	movt	r0, #0
 1cc:	ldr	r3, [r0]
 1d0:	movw	r0, #0
 1d4:	movt	r0, #0
 1d8:	mov	r2, #1
 1dc:	bl	0 <fwrite>
 1e0:	mov	r0, #1
 1e4:	bl	0 <exit>
 1e8:	movw	r0, #0
 1ec:	movw	r1, #0
 1f0:	movw	r3, #0
 1f4:	mov	r2, #229	; 0xe5
 1f8:	movt	r0, #0
 1fc:	movt	r1, #0
 200:	movt	r3, #0
 204:	bl	0 <__assert_fail>
 208:	movw	r0, #0
 20c:	movw	r1, #0
 210:	movw	r3, #0
 214:	mov	r2, #231	; 0xe7
 218:	movt	r0, #0
 21c:	movt	r1, #0
 220:	movt	r3, #0
 224:	bl	0 <__assert_fail>
 228:	movw	r0, #0
 22c:	movw	r1, #0
 230:	mov	r2, r4
 234:	movt	r0, #0
 238:	movt	r1, #0
 23c:	ldr	r0, [r0]
 240:	b	198 <generate_xmlschema+0x198>
 244:	.word	0x000000d0
 248:	.word	0x000000e0
 24c:	.word	0x000000f0

00000250 <print_xml_element>:
 250:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
 254:	add	fp, sp, #28
 258:	sub	sp, sp, #28
 25c:	mov	r5, r1
 260:	mov	r4, r0
 264:	add	r1, sp, #24
 268:	mov	r0, r5
 26c:	bl	0 <coda_type_get_class>
 270:	ldr	r0, [sp, #24]
 274:	cmp	r0, #0
 278:	bne	598 <print_xml_element+0x348>
 27c:	movw	r0, #0
 280:	mov	r1, #29
 284:	mov	r2, #1
 288:	mov	r3, r4
 28c:	movt	r0, #0
 290:	bl	0 <fwrite>
 294:	add	r1, sp, #20
 298:	mov	r0, r5
 29c:	bl	0 <coda_type_get_num_record_fields>
 2a0:	ldr	r0, [sp, #20]
 2a4:	cmp	r0, #1
 2a8:	blt	514 <print_xml_element+0x2c4>
 2ac:	mov	r6, #0
 2b0:	add	r9, sp, #12
 2b4:	add	sl, sp, #16
 2b8:	add	r7, sp, #4
 2bc:	mov	r0, r5
 2c0:	mov	r1, r6
 2c4:	add	r2, sp, #8
 2c8:	bl	0 <coda_type_get_record_field_real_name>
 2cc:	mov	r0, r5
 2d0:	mov	r1, r6
 2d4:	mov	r2, r9
 2d8:	bl	0 <coda_type_get_record_field_type>
 2dc:	ldr	r0, [sp, #12]
 2e0:	mov	r1, sl
 2e4:	bl	0 <coda_type_get_class>
 2e8:	ldr	r0, [sp, #12]
 2ec:	mov	r1, r7
 2f0:	bl	0 <coda_type_get_format>
 2f4:	ldr	r2, [sp, #8]
 2f8:	movw	r1, #0
 2fc:	mov	r0, r4
 300:	movt	r1, #0
 304:	bl	0 <fprintf>
 308:	ldr	r0, [sp, #16]
 30c:	cmp	r0, #1
 310:	ldreq	r1, [sp, #4]
 314:	cmpeq	r1, #2
 318:	beq	370 <print_xml_element+0x120>
 31c:	cmp	r0, #6
 320:	beq	3b8 <print_xml_element+0x168>
 324:	cmp	r0, #0
 328:	beq	3e8 <print_xml_element+0x198>
 32c:	sub	r0, r0, #1
 330:	cmp	r0, #3
 334:	bhi	558 <print_xml_element+0x308>
 338:	movw	r8, #0
 33c:	add	r1, pc, #4
 340:	movt	r8, #0
 344:	ldr	pc, [r1, r0, lsl #2]
 348:	.word	0x00000358
 34c:	.word	0x00000418
 350:	.word	0x00000404
 354:	.word	0x00000410
 358:	ldr	r0, [sp, #4]
 35c:	movw	r8, #0
 360:	movt	r8, #0
 364:	cmp	r0, #2
 368:	bne	418 <print_xml_element+0x1c8>
 36c:	b	578 <print_xml_element+0x328>
 370:	movw	r0, #0
 374:	mov	r1, #36	; 0x24
 378:	mov	r2, #1
 37c:	mov	r3, r4
 380:	movt	r0, #0
 384:	bl	0 <fwrite>
 388:	ldr	r0, [sp, #12]
 38c:	mov	r1, r9
 390:	bl	0 <coda_type_get_array_base_type>
 394:	ldr	r0, [sp, #12]
 398:	mov	r1, sl
 39c:	bl	0 <coda_type_get_class>
 3a0:	ldr	r0, [sp, #12]
 3a4:	mov	r1, r7
 3a8:	bl	0 <coda_type_get_format>
 3ac:	ldr	r0, [sp, #16]
 3b0:	cmp	r0, #6
 3b4:	bne	324 <print_xml_element+0xd4>
 3b8:	ldr	r0, [sp, #12]
 3bc:	mov	r1, r9
 3c0:	bl	0 <coda_type_get_special_base_type>
 3c4:	ldr	r0, [sp, #12]
 3c8:	mov	r1, sl
 3cc:	bl	0 <coda_type_get_class>
 3d0:	ldr	r0, [sp, #12]
 3d4:	mov	r1, r7
 3d8:	bl	0 <coda_type_get_format>
 3dc:	ldr	r0, [sp, #16]
 3e0:	cmp	r0, #0
 3e4:	bne	32c <print_xml_element+0xdc>
 3e8:	mov	r0, #62	; 0x3e
 3ec:	mov	r1, r4
 3f0:	bl	0 <fputc>
 3f4:	ldr	r1, [sp, #12]
 3f8:	mov	r0, r4
 3fc:	bl	250 <print_xml_element>
 400:	b	4ec <print_xml_element+0x29c>
 404:	movw	r8, #0
 408:	movt	r8, #0
 40c:	b	418 <print_xml_element+0x1c8>
 410:	movw	r8, #0
 414:	movt	r8, #0
 418:	ldr	r0, [sp, #12]
 41c:	mov	r1, sp
 420:	bl	0 <coda_type_has_attributes>
 424:	ldr	r0, [sp]
 428:	cmp	r0, #0
 42c:	beq	4d8 <print_xml_element+0x288>
 430:	mov	r0, #62	; 0x3e
 434:	mov	r1, r4
 438:	bl	0 <fputc>
 43c:	movw	r0, #0
 440:	mov	r1, #16
 444:	mov	r2, #1
 448:	mov	r3, r4
 44c:	movt	r0, #0
 450:	bl	0 <fwrite>
 454:	movw	r0, #0
 458:	mov	r1, #18
 45c:	mov	r2, #1
 460:	mov	r3, r4
 464:	movt	r0, #0
 468:	bl	0 <fwrite>
 46c:	movw	r1, #0
 470:	mov	r0, r4
 474:	mov	r2, r8
 478:	movt	r1, #0
 47c:	bl	0 <fprintf>
 480:	ldr	r1, [sp, #12]
 484:	mov	r0, r4
 488:	bl	5b8 <print_attributes>
 48c:	movw	r0, #0
 490:	mov	r1, #15
 494:	mov	r2, #1
 498:	mov	r3, r4
 49c:	movt	r0, #0
 4a0:	bl	0 <fwrite>
 4a4:	movw	r0, #0
 4a8:	mov	r1, #19
 4ac:	mov	r2, #1
 4b0:	mov	r3, r4
 4b4:	movt	r0, #0
 4b8:	bl	0 <fwrite>
 4bc:	movw	r0, #0
 4c0:	mov	r1, #17
 4c4:	mov	r2, #1
 4c8:	mov	r3, r4
 4cc:	movt	r0, #0
 4d0:	bl	0 <fwrite>
 4d4:	b	4ec <print_xml_element+0x29c>
 4d8:	movw	r1, #0
 4dc:	mov	r0, r4
 4e0:	mov	r2, r8
 4e4:	movt	r1, #0
 4e8:	bl	0 <fprintf>
 4ec:	movw	r0, #0
 4f0:	mov	r1, #13
 4f4:	mov	r2, #1
 4f8:	mov	r3, r4
 4fc:	movt	r0, #0
 500:	bl	0 <fwrite>
 504:	ldr	r0, [sp, #20]
 508:	add	r6, r6, #1
 50c:	cmp	r6, r0
 510:	blt	2bc <print_xml_element+0x6c>
 514:	movw	r0, #0
 518:	mov	r1, #14
 51c:	mov	r2, #1
 520:	mov	r3, r4
 524:	movt	r0, #0
 528:	bl	0 <fwrite>
 52c:	mov	r0, r4
 530:	mov	r1, r5
 534:	bl	5b8 <print_attributes>
 538:	movw	r0, #0
 53c:	mov	r1, #17
 540:	mov	r2, #1
 544:	mov	r3, r4
 548:	movt	r0, #0
 54c:	bl	0 <fwrite>
 550:	sub	sp, fp, #28
 554:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
 558:	movw	r0, #0
 55c:	movw	r1, #0
 560:	movw	r3, #0
 564:	mov	r2, #151	; 0x97
 568:	movt	r0, #0
 56c:	movt	r1, #0
 570:	movt	r3, #0
 574:	bl	0 <__assert_fail>
 578:	movw	r0, #0
 57c:	movw	r1, #0
 580:	movw	r3, #0
 584:	mov	r2, #138	; 0x8a
 588:	movt	r0, #0
 58c:	movt	r1, #0
 590:	movt	r3, #0
 594:	bl	0 <__assert_fail>
 598:	movw	r0, #0
 59c:	movw	r1, #0
 5a0:	movw	r3, #0
 5a4:	mov	r2, #96	; 0x60
 5a8:	movt	r0, #0
 5ac:	movt	r1, #0
 5b0:	movt	r3, #0
 5b4:	bl	0 <__assert_fail>

000005b8 <print_attributes>:
 5b8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
 5bc:	add	fp, sp, #28
 5c0:	sub	sp, sp, #28
 5c4:	mov	r2, r1
 5c8:	mov	r4, r0
 5cc:	add	r1, sp, #24
 5d0:	mov	r0, r2
 5d4:	bl	0 <coda_type_get_attributes>
 5d8:	ldr	r0, [sp, #24]
 5dc:	add	r1, sp, #20
 5e0:	bl	0 <coda_type_get_num_record_fields>
 5e4:	ldr	r0, [sp, #20]
 5e8:	cmp	r0, #1
 5ec:	blt	6f8 <print_attributes+0x140>
 5f0:	movw	r6, #0
 5f4:	movw	r8, #0
 5f8:	mov	r5, #0
 5fc:	add	r9, sp, #4
 600:	add	sl, sp, #12
 604:	add	r7, sp, #16
 608:	movt	r6, #0
 60c:	movt	r8, #0
 610:	ldr	r0, [sp, #24]
 614:	mov	r1, r5
 618:	add	r2, sp, #8
 61c:	bl	0 <coda_type_get_record_field_real_name>
 620:	ldr	r0, [sp, #24]
 624:	mov	r1, r5
 628:	mov	r2, r9
 62c:	bl	0 <coda_type_get_record_field_available_status>
 630:	ldr	r0, [sp, #24]
 634:	mov	r1, r5
 638:	mov	r2, sl
 63c:	bl	0 <coda_type_get_record_field_type>
 640:	ldr	r0, [sp, #12]
 644:	mov	r1, r7
 648:	bl	0 <coda_type_get_class>
 64c:	ldr	r2, [sp, #8]
 650:	mov	r0, r4
 654:	mov	r1, r6
 658:	bl	0 <fprintf>
 65c:	ldr	r0, [sp, #4]
 660:	cmp	r0, #1
 664:	bne	680 <print_attributes+0xc8>
 668:	movw	r0, #0
 66c:	mov	r1, #15
 670:	mov	r2, #1
 674:	mov	r3, r4
 678:	movt	r0, #0
 67c:	bl	0 <fwrite>
 680:	ldr	r0, [sp, #16]
 684:	cmp	r0, #4
 688:	beq	6bc <print_attributes+0x104>
 68c:	cmp	r0, #3
 690:	beq	6ac <print_attributes+0xf4>
 694:	cmp	r0, #2
 698:	bne	700 <print_attributes+0x148>
 69c:	movw	r0, #0
 6a0:	mov	r1, #18
 6a4:	movt	r0, #0
 6a8:	b	6c8 <print_attributes+0x110>
 6ac:	movw	r0, #0
 6b0:	mov	r1, #16
 6b4:	movt	r0, #0
 6b8:	b	6c8 <print_attributes+0x110>
 6bc:	movw	r0, #0
 6c0:	mov	r1, #17
 6c4:	movt	r0, #0
 6c8:	mov	r2, #1
 6cc:	mov	r3, r4
 6d0:	bl	0 <fwrite>
 6d4:	mov	r0, r8
 6d8:	mov	r1, #2
 6dc:	mov	r2, #1
 6e0:	mov	r3, r4
 6e4:	bl	0 <fwrite>
 6e8:	ldr	r0, [sp, #20]
 6ec:	add	r5, r5, #1
 6f0:	cmp	r5, r0
 6f4:	blt	610 <print_attributes+0x58>
 6f8:	sub	sp, fp, #28
 6fc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
 700:	movw	r0, #0
 704:	movw	r1, #0
 708:	movw	r3, #0
 70c:	mov	r2, #82	; 0x52
 710:	movt	r0, #0
 714:	movt	r1, #0
 718:	movt	r3, #0
 71c:	bl	0 <__assert_fail>
