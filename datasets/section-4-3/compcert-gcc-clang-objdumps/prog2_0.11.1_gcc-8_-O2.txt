
../compcert-repos/prog2/0.11.1:     file format elf32-littlearm


Disassembly of section .init:

00010574 <.init>:
   10574:	push	{r3, lr}
   10578:	bl	1074c <_start@@Base+0x3c>
   1057c:	pop	{r3, pc}

Disassembly of section .plt:

00010580 <printf@plt-0x14>:
   10580:	push	{lr}		; (str lr, [sp, #-4]!)
   10584:	ldr	lr, [pc, #4]	; 10590 <printf@plt-0x4>
   10588:	add	lr, pc, lr
   1058c:	ldr	pc, [lr, #8]!
   10590:	andeq	r0, r1, r0, ror sl

00010594 <printf@plt>:
   10594:	add	ip, pc, #0, 12
   10598:	add	ip, ip, #16, 20	; 0x10000
   1059c:	ldr	pc, [ip, #2672]!	; 0xa70

000105a0 <__libc_start_main@plt>:
   105a0:	add	ip, pc, #0, 12
   105a4:	add	ip, ip, #16, 20	; 0x10000
   105a8:	ldr	pc, [ip, #2664]!	; 0xa68

000105ac <__gmon_start__@plt>:
   105ac:	add	ip, pc, #0, 12
   105b0:	add	ip, ip, #16, 20	; 0x10000
   105b4:	ldr	pc, [ip, #2656]!	; 0xa60

000105b8 <__isoc99_scanf@plt>:
   105b8:	add	ip, pc, #0, 12
   105bc:	add	ip, ip, #16, 20	; 0x10000
   105c0:	ldr	pc, [ip, #2648]!	; 0xa58

000105c4 <abort@plt>:
   105c4:	add	ip, pc, #0, 12
   105c8:	add	ip, ip, #16, 20	; 0x10000
   105cc:	ldr	pc, [ip, #2640]!	; 0xa50

Disassembly of section .text:

000105d0 <main@@Base>:
   105d0:	strd	r4, [sp, #-20]!	; 0xffffffec
   105d4:	movw	r0, #2228	; 0x8b4
   105d8:	movt	r0, #1
   105dc:	strd	r6, [sp, #8]
   105e0:	str	lr, [sp, #16]
   105e4:	sub	sp, sp, #20
   105e8:	add	r1, sp, #4
   105ec:	bl	105b8 <__isoc99_scanf@plt>
   105f0:	ldr	r3, [sp, #4]
   105f4:	cmp	r3, #0
   105f8:	ble	106dc <main@@Base+0x10c>
   105fc:	movw	r6, #2232	; 0x8b8
   10600:	movt	r6, #1
   10604:	movw	r7, #26215	; 0x6667
   10608:	movt	r7, #26214	; 0x6666
   1060c:	movw	r5, #2240	; 0x8c0
   10610:	movt	r5, #1
   10614:	mov	r4, #0
   10618:	add	r2, sp, #12
   1061c:	add	r1, sp, #8
   10620:	mov	r0, r6
   10624:	bl	105b8 <__isoc99_scanf@plt>
   10628:	ldr	r0, [sp, #8]
   1062c:	cmp	r0, #0
   10630:	beq	106f4 <main@@Base+0x124>
   10634:	mov	r3, #0
   10638:	smull	r2, r1, r7, r0
   1063c:	asr	r2, r0, #31
   10640:	add	r3, r3, r3, lsl #2
   10644:	rsb	r2, r2, r1, asr #2
   10648:	add	r1, r2, r2, lsl #2
   1064c:	sub	r1, r0, r1, lsl #1
   10650:	subs	r0, r2, #0
   10654:	add	r3, r1, r3, lsl #1
   10658:	bne	10638 <main@@Base+0x68>
   1065c:	ldr	r1, [sp, #12]
   10660:	cmp	r1, #0
   10664:	beq	10694 <main@@Base+0xc4>
   10668:	mov	r0, #0
   1066c:	smull	r2, ip, r7, r1
   10670:	asr	r2, r1, #31
   10674:	add	r0, r0, r0, lsl #2
   10678:	rsb	r2, r2, ip, asr #2
   1067c:	add	ip, r2, r2, lsl #2
   10680:	sub	ip, r1, ip, lsl #1
   10684:	subs	r1, r2, #0
   10688:	add	r0, ip, r0, lsl #1
   1068c:	bne	1066c <main@@Base+0x9c>
   10690:	add	r3, r3, r0
   10694:	cmp	r3, #0
   10698:	beq	10708 <main@@Base+0x138>
   1069c:	mov	r1, #0
   106a0:	smull	r2, r0, r7, r3
   106a4:	asr	r2, r3, #31
   106a8:	add	r1, r1, r1, lsl #2
   106ac:	rsb	r2, r2, r0, asr #2
   106b0:	add	r0, r2, r2, lsl #2
   106b4:	sub	r0, r3, r0, lsl #1
   106b8:	subs	r3, r2, #0
   106bc:	add	r1, r0, r1, lsl #1
   106c0:	bne	106a0 <main@@Base+0xd0>
   106c4:	mov	r0, r5
   106c8:	add	r4, r4, #1
   106cc:	bl	10594 <printf@plt>
   106d0:	ldr	r3, [sp, #4]
   106d4:	cmp	r3, r4
   106d8:	bgt	10618 <main@@Base+0x48>
   106dc:	mov	r0, #0
   106e0:	add	sp, sp, #20
   106e4:	ldrd	r4, [sp]
   106e8:	ldrd	r6, [sp, #8]
   106ec:	add	sp, sp, #16
   106f0:	pop	{pc}		; (ldr pc, [sp], #4)
   106f4:	ldr	r1, [sp, #12]
   106f8:	cmp	r1, #0
   106fc:	movne	r3, r0
   10700:	bne	10668 <main@@Base+0x98>
   10704:	b	106c4 <main@@Base+0xf4>
   10708:	mov	r1, r3
   1070c:	b	106c4 <main@@Base+0xf4>

00010710 <_start@@Base>:
   10710:	mov	fp, #0
   10714:	mov	lr, #0
   10718:	pop	{r1}		; (ldr r1, [sp], #4)
   1071c:	mov	r2, sp
   10720:	push	{r2}		; (str r2, [sp, #-4]!)
   10724:	push	{r0}		; (str r0, [sp, #-4]!)
   10728:	ldr	ip, [pc, #16]	; 10740 <_start@@Base+0x30>
   1072c:	push	{ip}		; (str ip, [sp, #-4]!)
   10730:	ldr	r0, [pc, #12]	; 10744 <_start@@Base+0x34>
   10734:	ldr	r3, [pc, #12]	; 10748 <_start@@Base+0x38>
   10738:	bl	105a0 <__libc_start_main@plt>
   1073c:	bl	105c4 <abort@plt>
   10740:	andeq	r0, r1, r4, lsr #17
   10744:	ldrdeq	r0, [r1], -r0	; <UNPREDICTABLE>
   10748:	andeq	r0, r1, r4, asr #16
   1074c:	ldr	r3, [pc, #20]	; 10768 <_start@@Base+0x58>
   10750:	ldr	r2, [pc, #20]	; 1076c <_start@@Base+0x5c>
   10754:	add	r3, pc, r3
   10758:	ldr	r2, [r3, r2]
   1075c:	cmp	r2, #0
   10760:	bxeq	lr
   10764:	b	105ac <__gmon_start__@plt>
   10768:	andeq	r0, r1, r4, lsr #17
   1076c:	andeq	r0, r0, r0, lsr #32
   10770:	ldr	r0, [pc, #24]	; 10790 <_start@@Base+0x80>
   10774:	ldr	r3, [pc, #24]	; 10794 <_start@@Base+0x84>
   10778:	cmp	r3, r0
   1077c:	bxeq	lr
   10780:	ldr	r3, [pc, #16]	; 10798 <_start@@Base+0x88>
   10784:	cmp	r3, #0
   10788:	bxeq	lr
   1078c:	bx	r3
   10790:	andeq	r1, r2, ip, lsr #32
   10794:	andeq	r1, r2, ip, lsr #32
   10798:	andeq	r0, r0, r0
   1079c:	ldr	r0, [pc, #36]	; 107c8 <_start@@Base+0xb8>
   107a0:	ldr	r1, [pc, #36]	; 107cc <_start@@Base+0xbc>
   107a4:	sub	r1, r1, r0
   107a8:	asr	r1, r1, #2
   107ac:	add	r1, r1, r1, lsr #31
   107b0:	asrs	r1, r1, #1
   107b4:	bxeq	lr
   107b8:	ldr	r3, [pc, #16]	; 107d0 <_start@@Base+0xc0>
   107bc:	cmp	r3, #0
   107c0:	bxeq	lr
   107c4:	bx	r3
   107c8:	andeq	r1, r2, ip, lsr #32
   107cc:	andeq	r1, r2, ip, lsr #32
   107d0:	andeq	r0, r0, r0
   107d4:	push	{r4, lr}
   107d8:	ldr	r4, [pc, #24]	; 107f8 <_start@@Base+0xe8>
   107dc:	ldrb	r3, [r4]
   107e0:	cmp	r3, #0
   107e4:	popne	{r4, pc}
   107e8:	bl	10770 <_start@@Base+0x60>
   107ec:	mov	r3, #1
   107f0:	strb	r3, [r4]
   107f4:	pop	{r4, pc}
   107f8:	andeq	r1, r2, ip, lsr #32
   107fc:	b	1079c <_start@@Base+0x8c>

00010800 <invert@@Base>:
   10800:	subs	r2, r0, #0
   10804:	beq	1083c <invert@@Base+0x3c>
   10808:	movw	ip, #26215	; 0x6667
   1080c:	movt	ip, #26214	; 0x6666
   10810:	mov	r0, #0
   10814:	smull	r3, r1, ip, r2
   10818:	asr	r3, r2, #31
   1081c:	add	r0, r0, r0, lsl #2
   10820:	rsb	r3, r3, r1, asr #2
   10824:	add	r1, r3, r3, lsl #2
   10828:	sub	r1, r2, r1, lsl #1
   1082c:	subs	r2, r3, #0
   10830:	add	r0, r1, r0, lsl #1
   10834:	bne	10814 <invert@@Base+0x14>
   10838:	bx	lr
   1083c:	mov	r0, r2
   10840:	bx	lr

00010844 <__libc_csu_init@@Base>:
   10844:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   10848:	mov	r7, r0
   1084c:	ldr	r6, [pc, #72]	; 1089c <__libc_csu_init@@Base+0x58>
   10850:	ldr	r5, [pc, #72]	; 108a0 <__libc_csu_init@@Base+0x5c>
   10854:	add	r6, pc, r6
   10858:	add	r5, pc, r5
   1085c:	sub	r6, r6, r5
   10860:	mov	r8, r1
   10864:	mov	r9, r2
   10868:	bl	10574 <printf@plt-0x20>
   1086c:	asrs	r6, r6, #2
   10870:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   10874:	mov	r4, #0
   10878:	add	r4, r4, #1
   1087c:	ldr	r3, [r5], #4
   10880:	mov	r2, r9
   10884:	mov	r1, r8
   10888:	mov	r0, r7
   1088c:	blx	r3
   10890:	cmp	r6, r4
   10894:	bne	10878 <__libc_csu_init@@Base+0x34>
   10898:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1089c:			; <UNDEFINED> instruction: 0x000106b8
   108a0:			; <UNDEFINED> instruction: 0x000106b0

000108a4 <__libc_csu_fini@@Base>:
   108a4:	bx	lr

Disassembly of section .fini:

000108a8 <.fini>:
   108a8:	push	{r3, lr}
   108ac:	pop	{r3, pc}
