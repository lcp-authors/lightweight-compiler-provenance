
../compcert-repos/stcorp-coda-3a25f25/CMakeFiles/coda_static.dir/libcoda/ziparchive.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <coda_za_open>:
       0:	push	{fp, lr}
       4:	mov	fp, sp
       8:	sub	sp, sp, #168	; 0xa8
       c:	str	r0, [fp, #-8]
      10:	str	r1, [fp, #-12]
      14:	ldr	r0, [fp, #-8]
      18:	add	r1, sp, #64	; 0x40
      1c:	bl	0 <stat>
      20:	cmp	r0, #0
      24:	beq	a4 <coda_za_open+0xa4>
      28:	bl	0 <__errno_location>
      2c:	ldr	r0, [r0]
      30:	cmp	r0, #2
      34:	bne	5c <coda_za_open+0x5c>
      38:	ldr	r0, [fp, #-12]
      3c:	ldr	r1, [fp, #-8]
      40:	movw	r2, #0
      44:	movt	r2, #0
      48:	str	r0, [sp, #48]	; 0x30
      4c:	mov	r0, r2
      50:	ldr	r2, [sp, #48]	; 0x30
      54:	blx	r2
      58:	b	98 <coda_za_open+0x98>
      5c:	ldr	r0, [fp, #-12]
      60:	ldr	r1, [fp, #-8]
      64:	str	r0, [sp, #44]	; 0x2c
      68:	str	r1, [sp, #40]	; 0x28
      6c:	bl	0 <__errno_location>
      70:	ldr	r0, [r0]
      74:	bl	0 <strerror>
      78:	movw	r1, #0
      7c:	movt	r1, #0
      80:	str	r0, [sp, #36]	; 0x24
      84:	mov	r0, r1
      88:	ldr	r1, [sp, #40]	; 0x28
      8c:	ldr	r2, [sp, #36]	; 0x24
      90:	ldr	lr, [sp, #44]	; 0x2c
      94:	blx	lr
      98:	movw	r0, #0
      9c:	str	r0, [fp, #-4]
      a0:	b	380 <coda_za_open+0x380>
      a4:	ldr	r0, [sp, #80]	; 0x50
      a8:	and	r0, r0, #32768	; 0x8000
      ac:	cmp	r0, #0
      b0:	bne	e0 <coda_za_open+0xe0>
      b4:	ldr	r0, [fp, #-12]
      b8:	ldr	r1, [fp, #-8]
      bc:	movw	r2, #0
      c0:	movt	r2, #0
      c4:	str	r0, [sp, #32]
      c8:	mov	r0, r2
      cc:	ldr	r2, [sp, #32]
      d0:	blx	r2
      d4:	movw	r0, #0
      d8:	str	r0, [fp, #-4]
      dc:	b	380 <coda_za_open+0x380>
      e0:	ldr	r0, [sp, #108]	; 0x6c
      e4:	cmp	r0, #22
      e8:	bge	118 <coda_za_open+0x118>
      ec:	ldr	r0, [fp, #-12]
      f0:	ldr	r1, [fp, #-8]
      f4:	movw	r2, #0
      f8:	movt	r2, #0
      fc:	str	r0, [sp, #28]
     100:	mov	r0, r2
     104:	ldr	r2, [sp, #28]
     108:	blx	r2
     10c:	movw	r0, #0
     110:	str	r0, [fp, #-4]
     114:	b	380 <coda_za_open+0x380>
     118:	movw	r0, #24
     11c:	bl	0 <malloc>
     120:	str	r0, [sp, #60]	; 0x3c
     124:	ldr	r0, [sp, #60]	; 0x3c
     128:	movw	lr, #0
     12c:	cmp	r0, lr
     130:	bne	170 <coda_za_open+0x170>
     134:	ldr	r0, [fp, #-12]
     138:	movw	r1, #0
     13c:	cmp	r0, r1
     140:	beq	164 <coda_za_open+0x164>
     144:	ldr	r0, [fp, #-12]
     148:	movw	r1, #0
     14c:	movt	r1, #0
     150:	str	r0, [sp, #24]
     154:	mov	r0, r1
     158:	movw	r1, #24
     15c:	ldr	r2, [sp, #24]
     160:	blx	r2
     164:	movw	r0, #0
     168:	str	r0, [fp, #-4]
     16c:	b	380 <coda_za_open+0x380>
     170:	ldr	r0, [fp, #-8]
     174:	bl	0 <strdup>
     178:	ldr	lr, [sp, #60]	; 0x3c
     17c:	str	r0, [lr, #8]
     180:	ldr	r0, [sp, #60]	; 0x3c
     184:	ldr	r0, [r0, #8]
     188:	movw	lr, #0
     18c:	cmp	r0, lr
     190:	bne	1d4 <coda_za_open+0x1d4>
     194:	ldr	r0, [sp, #60]	; 0x3c
     198:	bl	0 <free>
     19c:	ldr	r0, [fp, #-12]
     1a0:	movw	lr, #0
     1a4:	cmp	r0, lr
     1a8:	beq	1c8 <coda_za_open+0x1c8>
     1ac:	ldr	r0, [fp, #-12]
     1b0:	movw	r1, #0
     1b4:	movt	r1, #0
     1b8:	str	r0, [sp, #20]
     1bc:	mov	r0, r1
     1c0:	ldr	r1, [sp, #20]
     1c4:	blx	r1
     1c8:	movw	r0, #0
     1cc:	str	r0, [fp, #-4]
     1d0:	b	380 <coda_za_open+0x380>
     1d4:	ldr	r0, [sp, #60]	; 0x3c
     1d8:	movw	r1, #0
     1dc:	str	r1, [r0, #4]
     1e0:	ldr	r0, [sp, #60]	; 0x3c
     1e4:	str	r1, [r0, #12]
     1e8:	ldr	r0, [sp, #60]	; 0x3c
     1ec:	str	r1, [r0, #16]
     1f0:	ldr	r0, [fp, #-12]
     1f4:	cmp	r0, r1
     1f8:	beq	20c <coda_za_open+0x20c>
     1fc:	ldr	r0, [fp, #-12]
     200:	ldr	r1, [sp, #60]	; 0x3c
     204:	str	r0, [r1, #20]
     208:	b	21c <coda_za_open+0x21c>
     20c:	ldr	r0, [sp, #60]	; 0x3c
     210:	movw	r1, #0
     214:	movt	r1, #0
     218:	str	r1, [r0, #20]
     21c:	movw	r0, #0
     220:	str	r0, [sp, #52]	; 0x34
     224:	ldr	r0, [fp, #-8]
     228:	ldr	r1, [sp, #52]	; 0x34
     22c:	bl	0 <open>
     230:	ldr	r1, [sp, #60]	; 0x3c
     234:	str	r0, [r1]
     238:	ldr	r0, [sp, #60]	; 0x3c
     23c:	ldr	r0, [r0]
     240:	cmp	r0, #0
     244:	bge	2a8 <coda_za_open+0x2a8>
     248:	ldr	r0, [sp, #60]	; 0x3c
     24c:	ldr	r0, [r0, #20]
     250:	ldr	r1, [fp, #-8]
     254:	str	r0, [sp, #16]
     258:	str	r1, [sp, #12]
     25c:	bl	0 <__errno_location>
     260:	ldr	r0, [r0]
     264:	bl	0 <strerror>
     268:	movw	r1, #0
     26c:	movt	r1, #0
     270:	str	r0, [sp, #8]
     274:	mov	r0, r1
     278:	ldr	r1, [sp, #12]
     27c:	ldr	r2, [sp, #8]
     280:	ldr	lr, [sp, #16]
     284:	blx	lr
     288:	ldr	r0, [sp, #60]	; 0x3c
     28c:	ldr	r0, [r0, #8]
     290:	bl	0 <free>
     294:	ldr	r0, [sp, #60]	; 0x3c
     298:	bl	0 <free>
     29c:	movw	r0, #0
     2a0:	str	r0, [fp, #-4]
     2a4:	b	380 <coda_za_open+0x380>
     2a8:	add	r1, sp, #58	; 0x3a
     2ac:	ldr	r0, [sp, #60]	; 0x3c
     2b0:	ldr	r0, [r0]
     2b4:	movw	r2, #2
     2b8:	bl	0 <read>
     2bc:	cmp	r0, #0
     2c0:	bge	2f8 <coda_za_open+0x2f8>
     2c4:	ldr	r0, [sp, #60]	; 0x3c
     2c8:	ldr	r0, [r0, #20]
     2cc:	str	r0, [sp, #4]
     2d0:	bl	0 <__errno_location>
     2d4:	ldr	r0, [r0]
     2d8:	bl	0 <strerror>
     2dc:	ldr	lr, [sp, #4]
     2e0:	blx	lr
     2e4:	ldr	r0, [sp, #60]	; 0x3c
     2e8:	bl	438 <coda_za_close>
     2ec:	movw	r0, #0
     2f0:	str	r0, [fp, #-4]
     2f4:	b	380 <coda_za_open+0x380>
     2f8:	ldrb	r0, [sp, #58]	; 0x3a
     2fc:	cmp	r0, #80	; 0x50
     300:	beq	344 <coda_za_open+0x344>
     304:	ldrb	r0, [sp, #59]	; 0x3b
     308:	cmp	r0, #75	; 0x4b
     30c:	beq	344 <coda_za_open+0x344>
     310:	ldr	r0, [fp, #-12]
     314:	ldr	r1, [fp, #-8]
     318:	movw	r2, #0
     31c:	movt	r2, #0
     320:	str	r0, [sp]
     324:	mov	r0, r2
     328:	ldr	r2, [sp]
     32c:	blx	r2
     330:	ldr	r0, [sp, #60]	; 0x3c
     334:	bl	438 <coda_za_close>
     338:	movw	r0, #0
     33c:	str	r0, [fp, #-4]
     340:	b	380 <coda_za_open+0x380>
     344:	movw	r0, #1
     348:	bl	0 <coda_hashtable_new>
     34c:	ldr	lr, [sp, #60]	; 0x3c
     350:	str	r0, [lr, #16]
     354:	ldr	r0, [sp, #60]	; 0x3c
     358:	bl	540 <get_entries>
     35c:	cmp	r0, #0
     360:	beq	378 <coda_za_open+0x378>
     364:	ldr	r0, [sp, #60]	; 0x3c
     368:	bl	438 <coda_za_close>
     36c:	movw	r0, #0
     370:	str	r0, [fp, #-4]
     374:	b	380 <coda_za_open+0x380>
     378:	ldr	r0, [sp, #60]	; 0x3c
     37c:	str	r0, [fp, #-4]
     380:	ldr	r0, [fp, #-4]
     384:	mov	sp, fp
     388:	pop	{fp, pc}

0000038c <default_error_handler>:
     38c:	sub	sp, sp, #12
     390:	push	{fp, lr}
     394:	mov	fp, sp
     398:	sub	sp, sp, #28
     39c:	str	r3, [fp, #16]
     3a0:	str	r2, [fp, #12]
     3a4:	str	r1, [fp, #8]
     3a8:	str	r0, [fp, #-4]
     3ac:	movw	r0, #0
     3b0:	movt	r0, #0
     3b4:	ldr	r1, [r0]
     3b8:	movw	r2, #0
     3bc:	movt	r2, #0
     3c0:	str	r0, [fp, #-12]
     3c4:	mov	r0, r1
     3c8:	mov	r1, r2
     3cc:	bl	0 <fprintf>
     3d0:	add	r1, fp, #8
     3d4:	str	r1, [fp, #-8]
     3d8:	ldr	r1, [fp, #-12]
     3dc:	ldr	r2, [r1]
     3e0:	ldr	r1, [fp, #-4]
     3e4:	ldr	r3, [fp, #-8]
     3e8:	str	r0, [sp, #12]
     3ec:	mov	r0, r2
     3f0:	mov	r2, r3
     3f4:	bl	0 <vfprintf>
     3f8:	sub	r1, fp, #8
     3fc:	movw	r2, #0
     400:	movt	r2, #0
     404:	ldr	r2, [r2]
     408:	str	r0, [sp, #8]
     40c:	mov	r0, r2
     410:	movw	r2, #0
     414:	movt	r2, #0
     418:	str	r1, [sp, #4]
     41c:	mov	r1, r2
     420:	bl	0 <fprintf>
     424:	str	r0, [sp]
     428:	mov	sp, fp
     42c:	pop	{fp, lr}
     430:	add	sp, sp, #12
     434:	bx	lr

00000438 <coda_za_close>:
     438:	push	{fp, lr}
     43c:	mov	fp, sp
     440:	sub	sp, sp, #16
     444:	str	r0, [fp, #-4]
     448:	ldr	r0, [fp, #-4]
     44c:	ldr	r0, [r0]
     450:	bl	0 <close>
     454:	ldr	lr, [fp, #-4]
     458:	ldr	lr, [lr, #12]
     45c:	movw	r1, #0
     460:	cmp	lr, r1
     464:	str	r0, [sp, #4]
     468:	beq	4f0 <coda_za_close+0xb8>
     46c:	movw	r0, #0
     470:	str	r0, [sp, #8]
     474:	ldr	r0, [sp, #8]
     478:	ldr	r1, [fp, #-4]
     47c:	ldr	r1, [r1, #4]
     480:	cmp	r0, r1
     484:	bge	4e4 <coda_za_close+0xac>
     488:	ldr	r0, [fp, #-4]
     48c:	ldr	r0, [r0, #12]
     490:	ldr	r1, [sp, #8]
     494:	movw	r2, #44	; 0x2c
     498:	mul	r1, r1, r2
     49c:	add	r0, r0, r1
     4a0:	ldr	r0, [r0, #36]	; 0x24
     4a4:	movw	r1, #0
     4a8:	cmp	r0, r1
     4ac:	beq	4d0 <coda_za_close+0x98>
     4b0:	ldr	r0, [fp, #-4]
     4b4:	ldr	r0, [r0, #12]
     4b8:	ldr	r1, [sp, #8]
     4bc:	movw	r2, #44	; 0x2c
     4c0:	mul	r1, r1, r2
     4c4:	add	r0, r0, r1
     4c8:	ldr	r0, [r0, #36]	; 0x24
     4cc:	bl	0 <free>
     4d0:	b	4d4 <coda_za_close+0x9c>
     4d4:	ldr	r0, [sp, #8]
     4d8:	add	r0, r0, #1
     4dc:	str	r0, [sp, #8]
     4e0:	b	474 <coda_za_close+0x3c>
     4e4:	ldr	r0, [fp, #-4]
     4e8:	ldr	r0, [r0, #12]
     4ec:	bl	0 <free>
     4f0:	ldr	r0, [fp, #-4]
     4f4:	ldr	r0, [r0, #8]
     4f8:	movw	r1, #0
     4fc:	cmp	r0, r1
     500:	beq	510 <coda_za_close+0xd8>
     504:	ldr	r0, [fp, #-4]
     508:	ldr	r0, [r0, #8]
     50c:	bl	0 <free>
     510:	ldr	r0, [fp, #-4]
     514:	ldr	r0, [r0, #16]
     518:	movw	r1, #0
     51c:	cmp	r0, r1
     520:	beq	530 <coda_za_close+0xf8>
     524:	ldr	r0, [fp, #-4]
     528:	ldr	r0, [r0, #16]
     52c:	bl	0 <coda_hashtable_delete>
     530:	ldr	r0, [fp, #-4]
     534:	bl	0 <free>
     538:	mov	sp, fp
     53c:	pop	{fp, pc}

00000540 <get_entries>:
     540:	push	{fp, lr}
     544:	mov	fp, sp
     548:	sub	sp, sp, #128	; 0x80
     54c:	str	r0, [fp, #-8]
     550:	ldr	r0, [fp, #-8]
     554:	ldr	r0, [r0]
     558:	mvn	r1, #21
     55c:	movw	r2, #2
     560:	bl	0 <lseek>
     564:	cmp	r0, #0
     568:	bge	598 <get_entries+0x58>
     56c:	ldr	r0, [fp, #-8]
     570:	ldr	r0, [r0, #20]
     574:	str	r0, [sp, #44]	; 0x2c
     578:	bl	0 <__errno_location>
     57c:	ldr	r0, [r0]
     580:	bl	0 <strerror>
     584:	ldr	lr, [sp, #44]	; 0x2c
     588:	blx	lr
     58c:	mvn	r0, #0
     590:	str	r0, [fp, #-4]
     594:	b	ab4 <get_entries+0x574>
     598:	ldr	r0, [fp, #-8]
     59c:	ldr	r0, [r0]
     5a0:	sub	r1, fp, #56	; 0x38
     5a4:	movw	r2, #22
     5a8:	bl	0 <read>
     5ac:	cmp	r0, #0
     5b0:	bge	5e0 <get_entries+0xa0>
     5b4:	ldr	r0, [fp, #-8]
     5b8:	ldr	r0, [r0, #20]
     5bc:	str	r0, [sp, #40]	; 0x28
     5c0:	bl	0 <__errno_location>
     5c4:	ldr	r0, [r0]
     5c8:	bl	0 <strerror>
     5cc:	ldr	lr, [sp, #40]	; 0x28
     5d0:	blx	lr
     5d4:	mvn	r0, #0
     5d8:	str	r0, [fp, #-4]
     5dc:	b	ab4 <get_entries+0x574>
     5e0:	ldr	r0, [pc, #1240]	; ac0 <get_entries+0x580>
     5e4:	ldr	r1, [fp, #-56]	; 0xffffffc8
     5e8:	str	r1, [fp, #-60]	; 0xffffffc4
     5ec:	ldr	r1, [fp, #-60]	; 0xffffffc4
     5f0:	cmp	r1, r0
     5f4:	beq	62c <get_entries+0xec>
     5f8:	ldr	r0, [fp, #-8]
     5fc:	ldr	r0, [r0, #20]
     600:	ldr	r1, [fp, #-8]
     604:	ldr	r1, [r1, #8]
     608:	movw	r2, #0
     60c:	movt	r2, #0
     610:	str	r0, [sp, #36]	; 0x24
     614:	mov	r0, r2
     618:	ldr	r2, [sp, #36]	; 0x24
     61c:	blx	r2
     620:	mvn	r0, #0
     624:	str	r0, [fp, #-4]
     628:	b	ab4 <get_entries+0x574>
     62c:	ldrh	r0, [fp, #-48]	; 0xffffffd0
     630:	strh	r0, [sp, #62]	; 0x3e
     634:	ldr	r0, [fp, #-40]	; 0xffffffd8
     638:	str	r0, [sp, #64]	; 0x40
     63c:	ldrh	r0, [sp, #62]	; 0x3e
     640:	ldr	r1, [fp, #-8]
     644:	str	r0, [r1, #4]
     648:	ldrh	r0, [sp, #62]	; 0x3e
     64c:	movw	r1, #44	; 0x2c
     650:	mul	r0, r0, r1
     654:	bl	0 <malloc>
     658:	ldr	r1, [fp, #-8]
     65c:	str	r0, [r1, #12]
     660:	ldr	r0, [fp, #-8]
     664:	ldr	r0, [r0, #12]
     668:	movw	r1, #0
     66c:	cmp	r0, r1
     670:	bne	6ac <get_entries+0x16c>
     674:	ldr	r0, [fp, #-8]
     678:	ldr	r0, [r0, #20]
     67c:	ldrh	r1, [sp, #62]	; 0x3e
     680:	movw	r2, #44	; 0x2c
     684:	mul	r1, r1, r2
     688:	movw	r2, #0
     68c:	movt	r2, #0
     690:	str	r0, [sp, #32]
     694:	mov	r0, r2
     698:	ldr	r2, [sp, #32]
     69c:	blx	r2
     6a0:	mvn	r0, #0
     6a4:	str	r0, [fp, #-4]
     6a8:	b	ab4 <get_entries+0x574>
     6ac:	movw	r0, #0
     6b0:	str	r0, [sp, #56]	; 0x38
     6b4:	ldr	r0, [sp, #56]	; 0x38
     6b8:	ldrh	r1, [sp, #62]	; 0x3e
     6bc:	cmp	r0, r1
     6c0:	bge	710 <get_entries+0x1d0>
     6c4:	ldr	r0, [fp, #-8]
     6c8:	ldr	r0, [r0, #12]
     6cc:	ldr	r1, [sp, #56]	; 0x38
     6d0:	movw	r2, #44	; 0x2c
     6d4:	mul	r1, r1, r2
     6d8:	add	r0, r0, r1
     6dc:	movw	r1, #0
     6e0:	str	r1, [r0, #36]	; 0x24
     6e4:	ldr	r0, [fp, #-8]
     6e8:	ldr	r1, [fp, #-8]
     6ec:	ldr	r1, [r1, #12]
     6f0:	ldr	r3, [sp, #56]	; 0x38
     6f4:	mul	r2, r3, r2
     6f8:	add	r1, r1, r2
     6fc:	str	r0, [r1, #40]	; 0x28
     700:	ldr	r0, [sp, #56]	; 0x38
     704:	add	r0, r0, #1
     708:	str	r0, [sp, #56]	; 0x38
     70c:	b	6b4 <get_entries+0x174>
     710:	ldr	r0, [fp, #-8]
     714:	ldr	r0, [r0]
     718:	ldr	r1, [sp, #64]	; 0x40
     71c:	movw	r2, #0
     720:	bl	0 <lseek>
     724:	cmp	r0, #0
     728:	bge	758 <get_entries+0x218>
     72c:	ldr	r0, [fp, #-8]
     730:	ldr	r0, [r0, #20]
     734:	str	r0, [sp, #28]
     738:	bl	0 <__errno_location>
     73c:	ldr	r0, [r0]
     740:	bl	0 <strerror>
     744:	ldr	lr, [sp, #28]
     748:	blx	lr
     74c:	mvn	r0, #0
     750:	str	r0, [fp, #-4]
     754:	b	ab4 <get_entries+0x574>
     758:	movw	r0, #0
     75c:	str	r0, [sp, #56]	; 0x38
     760:	ldr	r0, [sp, #56]	; 0x38
     764:	ldrh	r1, [sp, #62]	; 0x3e
     768:	cmp	r0, r1
     76c:	bge	aac <get_entries+0x56c>
     770:	ldr	r0, [fp, #-8]
     774:	ldr	r0, [r0, #12]
     778:	ldr	r1, [sp, #56]	; 0x38
     77c:	movw	r2, #44	; 0x2c
     780:	mul	r1, r1, r2
     784:	add	r0, r0, r1
     788:	str	r0, [sp, #48]	; 0x30
     78c:	ldr	r0, [fp, #-8]
     790:	ldr	r0, [r0]
     794:	sub	r1, fp, #56	; 0x38
     798:	movw	r2, #46	; 0x2e
     79c:	bl	0 <read>
     7a0:	cmp	r0, #0
     7a4:	bge	7d4 <get_entries+0x294>
     7a8:	ldr	r0, [fp, #-8]
     7ac:	ldr	r0, [r0, #20]
     7b0:	str	r0, [sp, #24]
     7b4:	bl	0 <__errno_location>
     7b8:	ldr	r0, [r0]
     7bc:	bl	0 <strerror>
     7c0:	ldr	lr, [sp, #24]
     7c4:	blx	lr
     7c8:	mvn	r0, #0
     7cc:	str	r0, [fp, #-4]
     7d0:	b	ab4 <get_entries+0x574>
     7d4:	ldr	r0, [pc, #744]	; ac4 <get_entries+0x584>
     7d8:	ldr	r1, [fp, #-56]	; 0xffffffc8
     7dc:	str	r1, [fp, #-60]	; 0xffffffc4
     7e0:	ldr	r1, [fp, #-60]	; 0xffffffc4
     7e4:	cmp	r1, r0
     7e8:	beq	820 <get_entries+0x2e0>
     7ec:	ldr	r0, [fp, #-8]
     7f0:	ldr	r0, [r0, #20]
     7f4:	ldr	r1, [fp, #-8]
     7f8:	ldr	r1, [r1, #8]
     7fc:	movw	r2, #0
     800:	movt	r2, #0
     804:	str	r0, [sp, #20]
     808:	mov	r0, r2
     80c:	ldr	r2, [sp, #20]
     810:	blx	r2
     814:	mvn	r0, #0
     818:	str	r0, [fp, #-4]
     81c:	b	ab4 <get_entries+0x574>
     820:	ldrh	r0, [fp, #-46]	; 0xffffffd2
     824:	ldr	r1, [sp, #48]	; 0x30
     828:	strh	r0, [r1, #4]
     82c:	ldr	r0, [sp, #48]	; 0x30
     830:	ldrh	r0, [r0, #4]
     834:	cmp	r0, #0
     838:	beq	880 <get_entries+0x340>
     83c:	ldr	r0, [sp, #48]	; 0x30
     840:	ldrh	r0, [r0, #4]
     844:	cmp	r0, #8
     848:	beq	880 <get_entries+0x340>
     84c:	ldr	r0, [fp, #-8]
     850:	ldr	r0, [r0, #20]
     854:	ldr	r1, [fp, #-8]
     858:	ldr	r1, [r1, #8]
     85c:	movw	r2, #0
     860:	movt	r2, #0
     864:	str	r0, [sp, #16]
     868:	mov	r0, r2
     86c:	ldr	r2, [sp, #16]
     870:	blx	r2
     874:	mvn	r0, #0
     878:	str	r0, [fp, #-4]
     87c:	b	ab4 <get_entries+0x574>
     880:	ldrh	r0, [fp, #-44]	; 0xffffffd4
     884:	ldr	r1, [sp, #48]	; 0x30
     888:	strh	r0, [r1, #6]
     88c:	ldrh	r0, [fp, #-42]	; 0xffffffd6
     890:	ldr	r1, [sp, #48]	; 0x30
     894:	strh	r0, [r1, #8]
     898:	ldr	r0, [fp, #-40]	; 0xffffffd8
     89c:	ldr	r1, [sp, #48]	; 0x30
     8a0:	str	r0, [r1, #16]
     8a4:	ldr	r0, [fp, #-36]	; 0xffffffdc
     8a8:	ldr	r1, [sp, #48]	; 0x30
     8ac:	str	r0, [r1, #20]
     8b0:	ldr	r0, [fp, #-32]	; 0xffffffe0
     8b4:	ldr	r1, [sp, #48]	; 0x30
     8b8:	str	r0, [r1, #24]
     8bc:	ldrh	r0, [fp, #-28]	; 0xffffffe4
     8c0:	ldr	r1, [sp, #48]	; 0x30
     8c4:	strh	r0, [r1, #28]
     8c8:	ldrh	r0, [fp, #-26]	; 0xffffffe6
     8cc:	ldr	r1, [sp, #48]	; 0x30
     8d0:	strh	r0, [r1, #30]
     8d4:	ldrh	r0, [fp, #-24]	; 0xffffffe8
     8d8:	strh	r0, [sp, #54]	; 0x36
     8dc:	ldrh	r0, [fp, #-20]	; 0xffffffec
     8e0:	strh	r0, [sp, #52]	; 0x34
     8e4:	ldrh	r0, [sp, #52]	; 0x34
     8e8:	and	r0, r0, #1
     8ec:	ldr	r1, [sp, #48]	; 0x30
     8f0:	str	r0, [r1, #32]
     8f4:	ldr	r0, [sp, #48]	; 0x30
     8f8:	ldrh	r1, [fp, #-18]	; 0xffffffee
     8fc:	strh	r1, [r0, #12]
     900:	ldrh	r1, [fp, #-16]
     904:	strh	r1, [r0, #14]
     908:	ldr	r0, [sp, #48]	; 0x30
     90c:	ldrh	r1, [fp, #-14]
     910:	strh	r1, [r0]
     914:	ldrh	r1, [fp, #-12]
     918:	strh	r1, [r0, #2]
     91c:	ldr	r0, [sp, #48]	; 0x30
     920:	ldrh	r0, [r0, #28]
     924:	add	r0, r0, #1
     928:	bl	0 <malloc>
     92c:	ldr	r1, [sp, #48]	; 0x30
     930:	str	r0, [r1, #36]	; 0x24
     934:	ldr	r0, [sp, #48]	; 0x30
     938:	ldr	r0, [r0, #36]	; 0x24
     93c:	movw	r1, #0
     940:	cmp	r0, r1
     944:	bne	980 <get_entries+0x440>
     948:	ldr	r0, [fp, #-8]
     94c:	ldr	r0, [r0, #20]
     950:	ldr	r1, [sp, #48]	; 0x30
     954:	ldrh	r1, [r1, #28]
     958:	add	r1, r1, #1
     95c:	movw	r2, #0
     960:	movt	r2, #0
     964:	str	r0, [sp, #12]
     968:	mov	r0, r2
     96c:	ldr	r2, [sp, #12]
     970:	blx	r2
     974:	mvn	r0, #0
     978:	str	r0, [fp, #-4]
     97c:	b	ab4 <get_entries+0x574>
     980:	ldr	r0, [fp, #-8]
     984:	ldr	r0, [r0]
     988:	ldr	r1, [sp, #48]	; 0x30
     98c:	ldr	r1, [r1, #36]	; 0x24
     990:	ldr	r2, [sp, #48]	; 0x30
     994:	ldrh	r2, [r2, #28]
     998:	bl	0 <read>
     99c:	cmp	r0, #0
     9a0:	bge	9d0 <get_entries+0x490>
     9a4:	ldr	r0, [fp, #-8]
     9a8:	ldr	r0, [r0, #20]
     9ac:	str	r0, [sp, #8]
     9b0:	bl	0 <__errno_location>
     9b4:	ldr	r0, [r0]
     9b8:	bl	0 <strerror>
     9bc:	ldr	lr, [sp, #8]
     9c0:	blx	lr
     9c4:	mvn	r0, #0
     9c8:	str	r0, [fp, #-4]
     9cc:	b	ab4 <get_entries+0x574>
     9d0:	ldr	r0, [sp, #48]	; 0x30
     9d4:	ldr	r0, [r0, #36]	; 0x24
     9d8:	ldr	r1, [sp, #48]	; 0x30
     9dc:	ldrh	r1, [r1, #28]
     9e0:	add	r0, r0, r1
     9e4:	movw	r1, #0
     9e8:	strb	r1, [r0]
     9ec:	ldr	r0, [fp, #-8]
     9f0:	ldr	r0, [r0, #16]
     9f4:	ldr	r1, [sp, #48]	; 0x30
     9f8:	ldr	r1, [r1, #36]	; 0x24
     9fc:	bl	0 <coda_hashtable_add_name>
     a00:	cmp	r0, #0
     a04:	beq	a44 <get_entries+0x504>
     a08:	ldr	r0, [fp, #-8]
     a0c:	ldr	r0, [r0, #20]
     a10:	ldr	r1, [fp, #-8]
     a14:	ldr	r1, [r1, #8]
     a18:	ldr	r2, [sp, #48]	; 0x30
     a1c:	ldr	r2, [r2, #36]	; 0x24
     a20:	movw	r3, #0
     a24:	movt	r3, #0
     a28:	str	r0, [sp, #4]
     a2c:	mov	r0, r3
     a30:	ldr	r3, [sp, #4]
     a34:	blx	r3
     a38:	mvn	r0, #0
     a3c:	str	r0, [fp, #-4]
     a40:	b	ab4 <get_entries+0x574>
     a44:	ldr	r0, [fp, #-8]
     a48:	ldr	r0, [r0]
     a4c:	ldr	r1, [sp, #48]	; 0x30
     a50:	ldrh	r1, [r1, #30]
     a54:	ldrh	r2, [sp, #54]	; 0x36
     a58:	add	r1, r1, r2
     a5c:	movw	r2, #1
     a60:	bl	0 <lseek>
     a64:	cmp	r0, #0
     a68:	bge	a98 <get_entries+0x558>
     a6c:	ldr	r0, [fp, #-8]
     a70:	ldr	r0, [r0, #20]
     a74:	str	r0, [sp]
     a78:	bl	0 <__errno_location>
     a7c:	ldr	r0, [r0]
     a80:	bl	0 <strerror>
     a84:	ldr	lr, [sp]
     a88:	blx	lr
     a8c:	mvn	r0, #0
     a90:	str	r0, [fp, #-4]
     a94:	b	ab4 <get_entries+0x574>
     a98:	b	a9c <get_entries+0x55c>
     a9c:	ldr	r0, [sp, #56]	; 0x38
     aa0:	add	r0, r0, #1
     aa4:	str	r0, [sp, #56]	; 0x38
     aa8:	b	760 <get_entries+0x220>
     aac:	movw	r0, #0
     ab0:	str	r0, [fp, #-4]
     ab4:	ldr	r0, [fp, #-4]
     ab8:	mov	sp, fp
     abc:	pop	{fp, pc}
     ac0:	.word	0x06054b50
     ac4:	.word	0x02014b50

00000ac8 <coda_za_get_num_entries>:
     ac8:	sub	sp, sp, #4
     acc:	str	r0, [sp]
     ad0:	ldr	r0, [sp]
     ad4:	ldr	r0, [r0, #4]
     ad8:	add	sp, sp, #4
     adc:	bx	lr

00000ae0 <coda_za_get_filename>:
     ae0:	sub	sp, sp, #4
     ae4:	str	r0, [sp]
     ae8:	ldr	r0, [sp]
     aec:	ldr	r0, [r0, #8]
     af0:	add	sp, sp, #4
     af4:	bx	lr

00000af8 <coda_za_get_entry_by_index>:
     af8:	sub	sp, sp, #12
     afc:	str	r0, [sp, #4]
     b00:	str	r1, [sp]
     b04:	ldr	r0, [sp]
     b08:	cmp	r0, #0
     b0c:	blt	b24 <coda_za_get_entry_by_index+0x2c>
     b10:	ldr	r0, [sp]
     b14:	ldr	r1, [sp, #4]
     b18:	ldr	r1, [r1, #4]
     b1c:	cmp	r0, r1
     b20:	blt	b30 <coda_za_get_entry_by_index+0x38>
     b24:	movw	r0, #0
     b28:	str	r0, [sp, #8]
     b2c:	b	b4c <coda_za_get_entry_by_index+0x54>
     b30:	ldr	r0, [sp, #4]
     b34:	ldr	r0, [r0, #12]
     b38:	ldr	r1, [sp]
     b3c:	movw	r2, #44	; 0x2c
     b40:	mul	r1, r1, r2
     b44:	add	r0, r0, r1
     b48:	str	r0, [sp, #8]
     b4c:	ldr	r0, [sp, #8]
     b50:	add	sp, sp, #12
     b54:	bx	lr

00000b58 <coda_za_get_entry_by_name>:
     b58:	push	{fp, lr}
     b5c:	mov	fp, sp
     b60:	sub	sp, sp, #16
     b64:	str	r0, [sp, #8]
     b68:	str	r1, [sp, #4]
     b6c:	ldr	r0, [sp, #8]
     b70:	ldr	r0, [r0, #16]
     b74:	ldr	r1, [sp, #4]
     b78:	bl	0 <coda_hashtable_get_index_from_name>
     b7c:	str	r0, [sp]
     b80:	ldr	r0, [sp]
     b84:	cmp	r0, #0
     b88:	bge	b98 <coda_za_get_entry_by_name+0x40>
     b8c:	movw	r0, #0
     b90:	str	r0, [fp, #-4]
     b94:	b	bb4 <coda_za_get_entry_by_name+0x5c>
     b98:	ldr	r0, [sp, #8]
     b9c:	ldr	r0, [r0, #12]
     ba0:	ldr	r1, [sp]
     ba4:	movw	r2, #44	; 0x2c
     ba8:	mul	r1, r1, r2
     bac:	add	r0, r0, r1
     bb0:	str	r0, [fp, #-4]
     bb4:	ldr	r0, [fp, #-4]
     bb8:	mov	sp, fp
     bbc:	pop	{fp, pc}

00000bc0 <coda_za_get_entry_size>:
     bc0:	sub	sp, sp, #4
     bc4:	str	r0, [sp]
     bc8:	ldr	r0, [sp]
     bcc:	ldr	r0, [r0, #24]
     bd0:	add	sp, sp, #4
     bd4:	bx	lr

00000bd8 <coda_za_get_entry_name>:
     bd8:	sub	sp, sp, #4
     bdc:	str	r0, [sp]
     be0:	ldr	r0, [sp]
     be4:	ldr	r0, [r0, #36]	; 0x24
     be8:	add	sp, sp, #4
     bec:	bx	lr

00000bf0 <coda_za_read_entry>:
     bf0:	push	{fp, lr}
     bf4:	mov	fp, sp
     bf8:	sub	sp, sp, #232	; 0xe8
     bfc:	str	r0, [fp, #-8]
     c00:	str	r1, [fp, #-12]
     c04:	ldr	r0, [fp, #-8]
     c08:	ldr	r0, [r0, #40]	; 0x28
     c0c:	ldr	r0, [r0]
     c10:	ldr	r1, [fp, #-8]
     c14:	ldr	r1, [r1]
     c18:	movw	r2, #0
     c1c:	bl	0 <lseek>
     c20:	cmp	r0, #0
     c24:	bge	c58 <coda_za_read_entry+0x68>
     c28:	ldr	r0, [fp, #-8]
     c2c:	ldr	r0, [r0, #40]	; 0x28
     c30:	ldr	r0, [r0, #20]
     c34:	str	r0, [sp, #92]	; 0x5c
     c38:	bl	0 <__errno_location>
     c3c:	ldr	r0, [r0]
     c40:	bl	0 <strerror>
     c44:	ldr	lr, [sp, #92]	; 0x5c
     c48:	blx	lr
     c4c:	mvn	r0, #0
     c50:	str	r0, [fp, #-4]
     c54:	b	1304 <coda_za_read_entry+0x714>
     c58:	ldr	r0, [fp, #-8]
     c5c:	ldr	r0, [r0, #40]	; 0x28
     c60:	ldr	r0, [r0]
     c64:	sub	r1, fp, #44	; 0x2c
     c68:	movw	r2, #30
     c6c:	bl	0 <read>
     c70:	cmp	r0, #0
     c74:	bge	ca8 <coda_za_read_entry+0xb8>
     c78:	ldr	r0, [fp, #-8]
     c7c:	ldr	r0, [r0, #40]	; 0x28
     c80:	ldr	r0, [r0, #20]
     c84:	str	r0, [sp, #88]	; 0x58
     c88:	bl	0 <__errno_location>
     c8c:	ldr	r0, [r0]
     c90:	bl	0 <strerror>
     c94:	ldr	lr, [sp, #88]	; 0x58
     c98:	blx	lr
     c9c:	mvn	r0, #0
     ca0:	str	r0, [fp, #-4]
     ca4:	b	1304 <coda_za_read_entry+0x714>
     ca8:	ldr	r0, [pc, #1632]	; 1310 <coda_za_read_entry+0x720>
     cac:	ldr	r1, [fp, #-44]	; 0xffffffd4
     cb0:	str	r1, [fp, #-48]	; 0xffffffd0
     cb4:	ldr	r1, [fp, #-48]	; 0xffffffd0
     cb8:	cmp	r1, r0
     cbc:	beq	cf0 <coda_za_read_entry+0x100>
     cc0:	ldr	r0, [fp, #-8]
     cc4:	ldr	r0, [r0, #40]	; 0x28
     cc8:	ldr	r0, [r0, #20]
     ccc:	movw	r1, #0
     cd0:	movt	r1, #0
     cd4:	str	r0, [sp, #84]	; 0x54
     cd8:	mov	r0, r1
     cdc:	ldr	r1, [sp, #84]	; 0x54
     ce0:	blx	r1
     ce4:	mvn	r0, #0
     ce8:	str	r0, [fp, #-4]
     cec:	b	1304 <coda_za_read_entry+0x714>
     cf0:	ldrh	r0, [fp, #-36]	; 0xffffffdc
     cf4:	strh	r0, [fp, #-50]	; 0xffffffce
     cf8:	ldrh	r0, [fp, #-50]	; 0xffffffce
     cfc:	ldr	r1, [fp, #-8]
     d00:	ldrh	r1, [r1, #4]
     d04:	cmp	r0, r1
     d08:	beq	d3c <coda_za_read_entry+0x14c>
     d0c:	ldr	r0, [fp, #-8]
     d10:	ldr	r0, [r0, #40]	; 0x28
     d14:	ldr	r0, [r0, #20]
     d18:	movw	r1, #0
     d1c:	movt	r1, #0
     d20:	str	r0, [sp, #80]	; 0x50
     d24:	mov	r0, r1
     d28:	ldr	r1, [sp, #80]	; 0x50
     d2c:	blx	r1
     d30:	mvn	r0, #0
     d34:	str	r0, [fp, #-4]
     d38:	b	1304 <coda_za_read_entry+0x714>
     d3c:	ldrh	r0, [fp, #-34]	; 0xffffffde
     d40:	strh	r0, [fp, #-52]	; 0xffffffcc
     d44:	ldrh	r0, [fp, #-52]	; 0xffffffcc
     d48:	ldr	r1, [fp, #-8]
     d4c:	ldrh	r1, [r1, #6]
     d50:	cmp	r0, r1
     d54:	beq	d88 <coda_za_read_entry+0x198>
     d58:	ldr	r0, [fp, #-8]
     d5c:	ldr	r0, [r0, #40]	; 0x28
     d60:	ldr	r0, [r0, #20]
     d64:	movw	r1, #0
     d68:	movt	r1, #0
     d6c:	str	r0, [sp, #76]	; 0x4c
     d70:	mov	r0, r1
     d74:	ldr	r1, [sp, #76]	; 0x4c
     d78:	blx	r1
     d7c:	mvn	r0, #0
     d80:	str	r0, [fp, #-4]
     d84:	b	1304 <coda_za_read_entry+0x714>
     d88:	ldrh	r0, [fp, #-32]	; 0xffffffe0
     d8c:	strh	r0, [fp, #-54]	; 0xffffffca
     d90:	ldrh	r0, [fp, #-54]	; 0xffffffca
     d94:	ldr	r1, [fp, #-8]
     d98:	ldrh	r1, [r1, #8]
     d9c:	cmp	r0, r1
     da0:	beq	dd4 <coda_za_read_entry+0x1e4>
     da4:	ldr	r0, [fp, #-8]
     da8:	ldr	r0, [r0, #40]	; 0x28
     dac:	ldr	r0, [r0, #20]
     db0:	movw	r1, #0
     db4:	movt	r1, #0
     db8:	str	r0, [sp, #72]	; 0x48
     dbc:	mov	r0, r1
     dc0:	ldr	r1, [sp, #72]	; 0x48
     dc4:	blx	r1
     dc8:	mvn	r0, #0
     dcc:	str	r0, [fp, #-4]
     dd0:	b	1304 <coda_za_read_entry+0x714>
     dd4:	ldrh	r0, [fp, #-30]	; 0xffffffe2
     dd8:	strh	r0, [fp, #-60]	; 0xffffffc4
     ddc:	ldrh	r0, [fp, #-28]	; 0xffffffe4
     de0:	strh	r0, [fp, #-58]	; 0xffffffc6
     de4:	ldr	r0, [fp, #-60]	; 0xffffffc4
     de8:	ldr	r1, [fp, #-8]
     dec:	ldr	r1, [r1, #16]
     df0:	cmp	r0, r1
     df4:	beq	e28 <coda_za_read_entry+0x238>
     df8:	ldr	r0, [fp, #-8]
     dfc:	ldr	r0, [r0, #40]	; 0x28
     e00:	ldr	r0, [r0, #20]
     e04:	movw	r1, #0
     e08:	movt	r1, #0
     e0c:	str	r0, [sp, #68]	; 0x44
     e10:	mov	r0, r1
     e14:	ldr	r1, [sp, #68]	; 0x44
     e18:	blx	r1
     e1c:	mvn	r0, #0
     e20:	str	r0, [fp, #-4]
     e24:	b	1304 <coda_za_read_entry+0x714>
     e28:	ldrh	r0, [fp, #-26]	; 0xffffffe6
     e2c:	strh	r0, [fp, #-64]	; 0xffffffc0
     e30:	ldrh	r0, [fp, #-24]	; 0xffffffe8
     e34:	strh	r0, [fp, #-62]	; 0xffffffc2
     e38:	ldr	r0, [fp, #-64]	; 0xffffffc0
     e3c:	ldr	r1, [fp, #-8]
     e40:	ldr	r1, [r1, #20]
     e44:	cmp	r0, r1
     e48:	beq	e7c <coda_za_read_entry+0x28c>
     e4c:	ldr	r0, [fp, #-8]
     e50:	ldr	r0, [r0, #40]	; 0x28
     e54:	ldr	r0, [r0, #20]
     e58:	movw	r1, #0
     e5c:	movt	r1, #0
     e60:	str	r0, [sp, #64]	; 0x40
     e64:	mov	r0, r1
     e68:	ldr	r1, [sp, #64]	; 0x40
     e6c:	blx	r1
     e70:	mvn	r0, #0
     e74:	str	r0, [fp, #-4]
     e78:	b	1304 <coda_za_read_entry+0x714>
     e7c:	ldrh	r0, [fp, #-22]	; 0xffffffea
     e80:	strh	r0, [fp, #-68]	; 0xffffffbc
     e84:	ldrh	r0, [fp, #-20]	; 0xffffffec
     e88:	strh	r0, [fp, #-66]	; 0xffffffbe
     e8c:	ldr	r0, [fp, #-68]	; 0xffffffbc
     e90:	ldr	r1, [fp, #-8]
     e94:	ldr	r1, [r1, #24]
     e98:	cmp	r0, r1
     e9c:	beq	ed0 <coda_za_read_entry+0x2e0>
     ea0:	ldr	r0, [fp, #-8]
     ea4:	ldr	r0, [r0, #40]	; 0x28
     ea8:	ldr	r0, [r0, #20]
     eac:	movw	r1, #0
     eb0:	movt	r1, #0
     eb4:	str	r0, [sp, #60]	; 0x3c
     eb8:	mov	r0, r1
     ebc:	ldr	r1, [sp, #60]	; 0x3c
     ec0:	blx	r1
     ec4:	mvn	r0, #0
     ec8:	str	r0, [fp, #-4]
     ecc:	b	1304 <coda_za_read_entry+0x714>
     ed0:	ldrh	r0, [fp, #-18]	; 0xffffffee
     ed4:	strh	r0, [fp, #-70]	; 0xffffffba
     ed8:	ldrh	r0, [fp, #-70]	; 0xffffffba
     edc:	ldr	r1, [fp, #-8]
     ee0:	ldrh	r1, [r1, #28]
     ee4:	cmp	r0, r1
     ee8:	beq	f1c <coda_za_read_entry+0x32c>
     eec:	ldr	r0, [fp, #-8]
     ef0:	ldr	r0, [r0, #40]	; 0x28
     ef4:	ldr	r0, [r0, #20]
     ef8:	movw	r1, #0
     efc:	movt	r1, #0
     f00:	str	r0, [sp, #56]	; 0x38
     f04:	mov	r0, r1
     f08:	ldr	r1, [sp, #56]	; 0x38
     f0c:	blx	r1
     f10:	mvn	r0, #0
     f14:	str	r0, [fp, #-4]
     f18:	b	1304 <coda_za_read_entry+0x714>
     f1c:	ldrh	r0, [fp, #-16]
     f20:	strh	r0, [fp, #-72]	; 0xffffffb8
     f24:	ldr	r0, [fp, #-8]
     f28:	ldr	r0, [r0, #40]	; 0x28
     f2c:	ldr	r0, [r0]
     f30:	ldrh	r1, [fp, #-70]	; 0xffffffba
     f34:	ldrh	r2, [fp, #-72]	; 0xffffffb8
     f38:	add	r1, r1, r2
     f3c:	movw	r2, #1
     f40:	bl	0 <lseek>
     f44:	cmp	r0, #0
     f48:	bge	f7c <coda_za_read_entry+0x38c>
     f4c:	ldr	r0, [fp, #-8]
     f50:	ldr	r0, [r0, #40]	; 0x28
     f54:	ldr	r0, [r0, #20]
     f58:	str	r0, [sp, #52]	; 0x34
     f5c:	bl	0 <__errno_location>
     f60:	ldr	r0, [r0]
     f64:	bl	0 <strerror>
     f68:	ldr	lr, [sp, #52]	; 0x34
     f6c:	blx	lr
     f70:	mvn	r0, #0
     f74:	str	r0, [fp, #-4]
     f78:	b	1304 <coda_za_read_entry+0x714>
     f7c:	ldr	r0, [fp, #-8]
     f80:	ldrh	r0, [r0, #4]
     f84:	cmp	r0, #0
     f88:	bne	fe4 <coda_za_read_entry+0x3f4>
     f8c:	ldr	r0, [fp, #-8]
     f90:	ldr	r0, [r0, #40]	; 0x28
     f94:	ldr	r0, [r0]
     f98:	ldr	r1, [fp, #-12]
     f9c:	ldr	r2, [fp, #-8]
     fa0:	ldr	r2, [r2, #24]
     fa4:	bl	0 <read>
     fa8:	cmp	r0, #0
     fac:	bge	fe0 <coda_za_read_entry+0x3f0>
     fb0:	ldr	r0, [fp, #-8]
     fb4:	ldr	r0, [r0, #40]	; 0x28
     fb8:	ldr	r0, [r0, #20]
     fbc:	str	r0, [sp, #48]	; 0x30
     fc0:	bl	0 <__errno_location>
     fc4:	ldr	r0, [r0]
     fc8:	bl	0 <strerror>
     fcc:	ldr	lr, [sp, #48]	; 0x30
     fd0:	blx	lr
     fd4:	mvn	r0, #0
     fd8:	str	r0, [fp, #-4]
     fdc:	b	1304 <coda_za_read_entry+0x714>
     fe0:	b	12fc <coda_za_read_entry+0x70c>
     fe4:	ldr	r0, [fp, #-8]
     fe8:	ldr	r0, [r0, #20]
     fec:	bl	0 <malloc>
     ff0:	str	r0, [fp, #-76]	; 0xffffffb4
     ff4:	ldr	r0, [fp, #-76]	; 0xffffffb4
     ff8:	movw	lr, #0
     ffc:	cmp	r0, lr
    1000:	bne	103c <coda_za_read_entry+0x44c>
    1004:	ldr	r0, [fp, #-8]
    1008:	ldr	r0, [r0, #40]	; 0x28
    100c:	ldr	r0, [r0, #20]
    1010:	ldr	r1, [fp, #-8]
    1014:	ldr	r1, [r1, #20]
    1018:	movw	r2, #0
    101c:	movt	r2, #0
    1020:	str	r0, [sp, #44]	; 0x2c
    1024:	mov	r0, r2
    1028:	ldr	r2, [sp, #44]	; 0x2c
    102c:	blx	r2
    1030:	mvn	r0, #0
    1034:	str	r0, [fp, #-4]
    1038:	b	1304 <coda_za_read_entry+0x714>
    103c:	ldr	r0, [fp, #-8]
    1040:	ldr	r0, [r0, #40]	; 0x28
    1044:	ldr	r0, [r0]
    1048:	ldr	r1, [fp, #-76]	; 0xffffffb4
    104c:	ldr	r2, [fp, #-8]
    1050:	ldr	r2, [r2, #20]
    1054:	bl	0 <read>
    1058:	cmp	r0, #0
    105c:	bge	1098 <coda_za_read_entry+0x4a8>
    1060:	ldr	r0, [fp, #-8]
    1064:	ldr	r0, [r0, #40]	; 0x28
    1068:	ldr	r0, [r0, #20]
    106c:	str	r0, [sp, #40]	; 0x28
    1070:	bl	0 <__errno_location>
    1074:	ldr	r0, [r0]
    1078:	bl	0 <strerror>
    107c:	ldr	lr, [sp, #40]	; 0x28
    1080:	blx	lr
    1084:	ldr	r0, [fp, #-76]	; 0xffffffb4
    1088:	bl	0 <free>
    108c:	mvn	r0, #0
    1090:	str	r0, [fp, #-4]
    1094:	b	1304 <coda_za_read_entry+0x714>
    1098:	movw	r0, #0
    109c:	str	r0, [sp, #100]	; 0x64
    10a0:	str	r0, [sp, #104]	; 0x68
    10a4:	str	r0, [sp, #132]	; 0x84
    10a8:	str	r0, [sp, #136]	; 0x88
    10ac:	str	r0, [sp, #140]	; 0x8c
    10b0:	str	r0, [sp, #124]	; 0x7c
    10b4:	add	r0, sp, #100	; 0x64
    10b8:	mvn	r1, #14
    10bc:	movw	r2, #0
    10c0:	movt	r2, #0
    10c4:	movw	r3, #56	; 0x38
    10c8:	bl	0 <coda_inflateInit2_>
    10cc:	cmp	r0, #0
    10d0:	beq	1148 <coda_za_read_entry+0x558>
    10d4:	ldr	r0, [sp, #124]	; 0x7c
    10d8:	movw	r1, #0
    10dc:	cmp	r0, r1
    10e0:	beq	1110 <coda_za_read_entry+0x520>
    10e4:	ldr	r0, [fp, #-8]
    10e8:	ldr	r0, [r0, #40]	; 0x28
    10ec:	ldr	r0, [r0, #20]
    10f0:	ldr	r1, [sp, #124]	; 0x7c
    10f4:	movw	r2, #0
    10f8:	movt	r2, #0
    10fc:	str	r0, [sp, #36]	; 0x24
    1100:	mov	r0, r2
    1104:	ldr	r2, [sp, #36]	; 0x24
    1108:	blx	r2
    110c:	b	1134 <coda_za_read_entry+0x544>
    1110:	ldr	r0, [fp, #-8]
    1114:	ldr	r0, [r0, #40]	; 0x28
    1118:	ldr	r0, [r0, #20]
    111c:	movw	r1, #0
    1120:	movt	r1, #0
    1124:	str	r0, [sp, #32]
    1128:	mov	r0, r1
    112c:	ldr	r1, [sp, #32]
    1130:	blx	r1
    1134:	ldr	r0, [fp, #-76]	; 0xffffffb4
    1138:	bl	0 <free>
    113c:	mvn	r0, #0
    1140:	str	r0, [fp, #-4]
    1144:	b	1304 <coda_za_read_entry+0x714>
    1148:	ldr	r0, [fp, #-76]	; 0xffffffb4
    114c:	str	r0, [sp, #100]	; 0x64
    1150:	ldr	r0, [fp, #-8]
    1154:	ldr	r0, [r0, #20]
    1158:	str	r0, [sp, #104]	; 0x68
    115c:	ldr	r0, [fp, #-12]
    1160:	str	r0, [sp, #112]	; 0x70
    1164:	ldr	r0, [fp, #-8]
    1168:	ldr	r0, [r0, #24]
    116c:	str	r0, [sp, #116]	; 0x74
    1170:	add	r0, sp, #100	; 0x64
    1174:	movw	r1, #4
    1178:	bl	0 <coda_inflate>
    117c:	str	r0, [sp, #96]	; 0x60
    1180:	ldr	r0, [sp, #96]	; 0x60
    1184:	cmn	r0, #2
    1188:	beq	1190 <coda_za_read_entry+0x5a0>
    118c:	b	11b0 <coda_za_read_entry+0x5c0>
    1190:	movw	r0, #0
    1194:	movt	r0, #0
    1198:	movw	r1, #0
    119c:	movt	r1, #0
    11a0:	movw	r2, #633	; 0x279
    11a4:	movw	r3, #0
    11a8:	movt	r3, #0
    11ac:	bl	0 <__assert_fail>
    11b0:	ldr	r0, [sp, #96]	; 0x60
    11b4:	cmn	r0, #4
    11b8:	str	r0, [sp, #28]
    11bc:	beq	122c <coda_za_read_entry+0x63c>
    11c0:	b	11c4 <coda_za_read_entry+0x5d4>
    11c4:	ldr	r0, [sp, #28]
    11c8:	cmn	r0, #3
    11cc:	beq	11e4 <coda_za_read_entry+0x5f4>
    11d0:	b	11d4 <coda_za_read_entry+0x5e4>
    11d4:	ldr	r0, [sp, #28]
    11d8:	cmp	r0, #2
    11dc:	bne	1274 <coda_za_read_entry+0x684>
    11e0:	b	11e4 <coda_za_read_entry+0x5f4>
    11e4:	ldr	r0, [fp, #-8]
    11e8:	ldr	r0, [r0, #40]	; 0x28
    11ec:	ldr	r0, [r0, #20]
    11f0:	movw	r1, #0
    11f4:	movt	r1, #0
    11f8:	str	r0, [sp, #24]
    11fc:	mov	r0, r1
    1200:	ldr	r1, [sp, #24]
    1204:	blx	r1
    1208:	add	r0, sp, #100	; 0x64
    120c:	bl	0 <coda_inflateEnd>
    1210:	ldr	r1, [fp, #-76]	; 0xffffffb4
    1214:	str	r0, [sp, #20]
    1218:	mov	r0, r1
    121c:	bl	0 <free>
    1220:	mvn	r0, #0
    1224:	str	r0, [fp, #-4]
    1228:	b	1304 <coda_za_read_entry+0x714>
    122c:	ldr	r0, [fp, #-8]
    1230:	ldr	r0, [r0, #40]	; 0x28
    1234:	ldr	r0, [r0, #20]
    1238:	movw	r1, #0
    123c:	movt	r1, #0
    1240:	str	r0, [sp, #16]
    1244:	mov	r0, r1
    1248:	ldr	r1, [sp, #16]
    124c:	blx	r1
    1250:	add	r0, sp, #100	; 0x64
    1254:	bl	0 <coda_inflateEnd>
    1258:	ldr	r1, [fp, #-76]	; 0xffffffb4
    125c:	str	r0, [sp, #12]
    1260:	mov	r0, r1
    1264:	bl	0 <free>
    1268:	mvn	r0, #0
    126c:	str	r0, [fp, #-4]
    1270:	b	1304 <coda_za_read_entry+0x714>
    1274:	ldr	r0, [fp, #-76]	; 0xffffffb4
    1278:	bl	0 <free>
    127c:	add	r0, sp, #100	; 0x64
    1280:	bl	0 <coda_inflateEnd>
    1284:	cmp	r0, #0
    1288:	beq	12f8 <coda_za_read_entry+0x708>
    128c:	ldr	r0, [sp, #124]	; 0x7c
    1290:	movw	r1, #0
    1294:	cmp	r0, r1
    1298:	beq	12c8 <coda_za_read_entry+0x6d8>
    129c:	ldr	r0, [fp, #-8]
    12a0:	ldr	r0, [r0, #40]	; 0x28
    12a4:	ldr	r0, [r0, #20]
    12a8:	ldr	r1, [sp, #124]	; 0x7c
    12ac:	movw	r2, #0
    12b0:	movt	r2, #0
    12b4:	str	r0, [sp, #8]
    12b8:	mov	r0, r2
    12bc:	ldr	r2, [sp, #8]
    12c0:	blx	r2
    12c4:	b	12ec <coda_za_read_entry+0x6fc>
    12c8:	ldr	r0, [fp, #-8]
    12cc:	ldr	r0, [r0, #40]	; 0x28
    12d0:	ldr	r0, [r0, #20]
    12d4:	movw	r1, #0
    12d8:	movt	r1, #0
    12dc:	str	r0, [sp, #4]
    12e0:	mov	r0, r1
    12e4:	ldr	r1, [sp, #4]
    12e8:	blx	r1
    12ec:	mvn	r0, #0
    12f0:	str	r0, [fp, #-4]
    12f4:	b	1304 <coda_za_read_entry+0x714>
    12f8:	b	12fc <coda_za_read_entry+0x70c>
    12fc:	movw	r0, #0
    1300:	str	r0, [fp, #-4]
    1304:	ldr	r0, [fp, #-4]
    1308:	mov	sp, fp
    130c:	pop	{fp, pc}
    1310:	.word	0x04034b50
