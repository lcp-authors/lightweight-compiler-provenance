
../repos/stcorp-coda-3a25f25/CMakeFiles/codadump.dir/tools/codadump/codadump-ascii.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <write_index>:
   0:	mov	ip, sp
   4:	sub	sp, sp, #32
   8:	str	ip, [sp]
   c:	str	lr, [sp, #4]
  10:	str	r4, [sp, #8]
  14:	str	r5, [sp, #12]
  18:	str	r6, [sp, #16]
  1c:	str	r7, [sp, #20]
  20:	mov	r5, r0
  24:	mov	r4, #0
  28:	mov	r6, #0
  2c:	ldr	r0, [pc, #176]	; e4 <write_index+0xe4>
  30:	ldr	ip, [r0]
  34:	cmp	r6, ip
  38:	bge	c8 <write_index+0xc8>
  3c:	ldr	r0, [pc, #164]	; e8 <write_index+0xe8>
  40:	ldr	r0, [r0, r6, lsl #2]
  44:	add	r1, sp, #24
  48:	bl	0 <coda_type_get_class>
  4c:	cmp	r0, #0
  50:	beq	58 <write_index+0x58>
  54:	bl	0 <handle_coda_error>
  58:	ldr	r2, [sp, #24]
  5c:	cmp	r2, #1
  60:	bne	c0 <write_index+0xc0>
  64:	mov	r7, #0
  68:	ldr	r1, [pc, #124]	; ec <write_index+0xec>
  6c:	lsl	r3, r4, #6
  70:	add	r2, r3, r4, lsl #4
  74:	add	ip, r1, r2
  78:	ldr	r2, [ip, #4]
  7c:	cmp	r7, r2
  80:	bge	bc <write_index+0xbc>
  84:	ldr	r1, [pc, #104]	; f4 <write_index+0xf4>
  88:	ldr	r0, [pc, #92]	; ec <write_index+0xec>
  8c:	lsl	r2, r4, #6
  90:	add	r3, r2, r4, lsl #4
  94:	add	r0, r0, r3
  98:	lsl	r2, r7, #2
  9c:	add	ip, r0, r2
  a0:	ldr	r2, [ip, #48]	; 0x30
  a4:	ldr	r3, [pc, #68]	; f0 <write_index+0xf0>
  a8:	ldr	r3, [r3]
  ac:	mov	r0, r5
  b0:	bl	0 <fprintf>
  b4:	add	r7, r7, #1
  b8:	b	68 <write_index+0x68>
  bc:	add	r4, r4, #1
  c0:	add	r6, r6, #1
  c4:	b	2c <write_index+0x2c>
  c8:	ldr	r4, [sp, #8]
  cc:	ldr	r5, [sp, #12]
  d0:	ldr	r6, [sp, #16]
  d4:	ldr	r7, [sp, #20]
  d8:	ldr	lr, [sp, #4]
  dc:	add	sp, sp, #32
  e0:	bx	lr
  e4:	.word	0x00000088
  e8:	.word	0x00000008
  ec:	.word	0x00000320
  f0:	.word	0x00000000
  f4:	.word	0x00000083

000000f8 <write_basic_data>:
  f8:	mov	ip, sp
  fc:	sub	sp, sp, #216	; 0xd8
 100:	str	ip, [sp, #16]
 104:	str	lr, [sp, #20]
 108:	str	r4, [sp, #24]
 10c:	str	r5, [sp, #28]
 110:	str	r6, [sp, #32]
 114:	str	r7, [sp, #36]	; 0x24
 118:	str	r8, [sp, #40]	; 0x28
 11c:	mov	r5, r1
 120:	mov	r4, r0
 124:	ldr	r1, [pc, #1860]	; 870 <write_basic_data+0x778>
 128:	ldr	r0, [r1]
 12c:	cmp	r0, #0
 130:	beq	13c <write_basic_data+0x44>
 134:	mov	r0, r4
 138:	bl	0 <write_index>
 13c:	ldr	ip, [pc, #1840]	; 874 <write_basic_data+0x77c>
 140:	ldr	r0, [ip, r5, lsl #2]
 144:	add	r1, sp, #52	; 0x34
 148:	bl	0 <coda_type_get_class>
 14c:	cmp	r0, #0
 150:	beq	158 <write_basic_data+0x60>
 154:	bl	0 <handle_coda_error>
 158:	ldr	r2, [sp, #52]	; 0x34
 15c:	cmp	r2, #7
 160:	bcs	814 <write_basic_data+0x71c>
 164:	add	pc, pc, r2, lsl #2
 168:	nop	{0}
 16c:	b	7f8 <write_basic_data+0x700>
 170:	b	7f8 <write_basic_data+0x700>
 174:	b	188 <write_basic_data+0x90>
 178:	b	188 <write_basic_data+0x90>
 17c:	b	188 <write_basic_data+0x90>
 180:	b	188 <write_basic_data+0x90>
 184:	b	678 <write_basic_data+0x580>
 188:	ldr	r3, [pc, #1764]	; 874 <write_basic_data+0x77c>
 18c:	ldr	r0, [r3, r5, lsl #2]
 190:	add	r1, sp, #56	; 0x38
 194:	bl	0 <coda_type_get_read_type>
 198:	cmp	r0, #0
 19c:	beq	1a4 <write_basic_data+0xac>
 1a0:	bl	0 <handle_coda_error>
 1a4:	ldr	r2, [sp, #56]	; 0x38
 1a8:	cmp	r2, #7
 1ac:	bcs	278 <write_basic_data+0x180>
 1b0:	cmp	r2, #3
 1b4:	bcs	1cc <write_basic_data+0xd4>
 1b8:	cmp	r2, #0
 1bc:	beq	1dc <write_basic_data+0xe4>
 1c0:	cmp	r2, #1
 1c4:	beq	210 <write_basic_data+0x118>
 1c8:	b	1dc <write_basic_data+0xe4>
 1cc:	cmp	r2, #5
 1d0:	bcs	208 <write_basic_data+0x110>
 1d4:	cmp	r2, #3
 1d8:	beq	210 <write_basic_data+0x118>
 1dc:	ldr	r0, [pc, #1652]	; 858 <write_basic_data+0x760>
 1e0:	add	r1, sp, #64	; 0x40
 1e4:	bl	0 <coda_cursor_read_int32>
 1e8:	cmp	r0, #0
 1ec:	beq	1f4 <write_basic_data+0xfc>
 1f0:	bl	0 <handle_coda_error>
 1f4:	ldr	r1, [pc, #1624]	; 854 <write_basic_data+0x75c>
 1f8:	ldr	r2, [sp, #64]	; 0x40
 1fc:	mov	r0, r4
 200:	bl	0 <fprintf>
 204:	b	814 <write_basic_data+0x71c>
 208:	cmp	r2, #5
 20c:	bne	23c <write_basic_data+0x144>
 210:	ldr	r0, [pc, #1600]	; 858 <write_basic_data+0x760>
 214:	add	r1, sp, #68	; 0x44
 218:	bl	0 <coda_cursor_read_uint32>
 21c:	cmp	r0, #0
 220:	beq	228 <write_basic_data+0x130>
 224:	bl	0 <handle_coda_error>
 228:	ldr	r1, [pc, #1552]	; 840 <write_basic_data+0x748>
 22c:	ldr	r2, [sp, #68]	; 0x44
 230:	mov	r0, r4
 234:	bl	0 <fprintf>
 238:	b	814 <write_basic_data+0x71c>
 23c:	ldr	r0, [pc, #1556]	; 858 <write_basic_data+0x760>
 240:	add	r1, sp, #88	; 0x58
 244:	bl	0 <coda_cursor_read_int64>
 248:	cmp	r0, #0
 24c:	beq	254 <write_basic_data+0x15c>
 250:	bl	0 <handle_coda_error>
 254:	ldr	r0, [sp, #88]	; 0x58
 258:	ldr	r1, [sp, #92]	; 0x5c
 25c:	add	r2, sp, #136	; 0x88
 260:	bl	0 <coda_str64>
 264:	ldr	r1, [pc, #1568]	; 88c <write_basic_data+0x794>
 268:	add	r2, sp, #136	; 0x88
 26c:	mov	r0, r4
 270:	bl	0 <fprintf>
 274:	b	814 <write_basic_data+0x71c>
 278:	cmp	r2, #10
 27c:	bcs	318 <write_basic_data+0x220>
 280:	cmp	r2, #7
 284:	beq	2dc <write_basic_data+0x1e4>
 288:	ldr	r0, [pc, #1480]	; 858 <write_basic_data+0x760>
 28c:	add	r1, sp, #104	; 0x68
 290:	bl	0 <coda_cursor_read_double>
 294:	cmp	r0, #0
 298:	beq	2a0 <write_basic_data+0x1a8>
 29c:	bl	0 <handle_coda_error>
 2a0:	ldr	ip, [sp, #56]	; 0x38
 2a4:	cmp	ip, #8
 2a8:	beq	2c4 <write_basic_data+0x1cc>
 2ac:	ldr	r1, [pc, #1476]	; 878 <write_basic_data+0x780>
 2b0:	vldr	d2, [sp, #104]	; 0x68
 2b4:	mov	r0, r4
 2b8:	vmov	r2, r3, d2
 2bc:	bl	0 <fprintf>
 2c0:	b	814 <write_basic_data+0x71c>
 2c4:	ldr	r1, [pc, #1428]	; 860 <write_basic_data+0x768>
 2c8:	vldr	d2, [sp, #104]	; 0x68
 2cc:	mov	r0, r4
 2d0:	vmov	r2, r3, d2
 2d4:	bl	0 <fprintf>
 2d8:	b	814 <write_basic_data+0x71c>
 2dc:	ldr	r0, [pc, #1396]	; 858 <write_basic_data+0x760>
 2e0:	add	r1, sp, #96	; 0x60
 2e4:	bl	0 <coda_cursor_read_uint64>
 2e8:	cmp	r0, #0
 2ec:	beq	2f4 <write_basic_data+0x1fc>
 2f0:	bl	0 <handle_coda_error>
 2f4:	ldr	r0, [sp, #96]	; 0x60
 2f8:	ldr	r1, [sp, #100]	; 0x64
 2fc:	add	r2, sp, #160	; 0xa0
 300:	bl	0 <coda_str64u>
 304:	ldr	r1, [pc, #1408]	; 88c <write_basic_data+0x794>
 308:	add	r2, sp, #160	; 0xa0
 30c:	mov	r0, r4
 310:	bl	0 <fprintf>
 314:	b	814 <write_basic_data+0x71c>
 318:	cmp	r2, #12
 31c:	bcs	42c <write_basic_data+0x334>
 320:	cmp	r2, #10
 324:	bne	378 <write_basic_data+0x280>
 328:	ldr	r0, [pc, #1320]	; 858 <write_basic_data+0x760>
 32c:	add	r1, sp, #48	; 0x30
 330:	bl	0 <coda_cursor_read_char>
 334:	cmp	r0, #0
 338:	beq	340 <write_basic_data+0x248>
 33c:	bl	0 <handle_coda_error>
 340:	ldr	r2, [pc, #1280]	; 848 <write_basic_data+0x750>
 344:	ldr	r0, [r2]
 348:	cmp	r0, #0
 34c:	bne	364 <write_basic_data+0x26c>
 350:	ldr	r1, [pc, #1352]	; 8a0 <write_basic_data+0x7a8>
 354:	ldrb	r2, [sp, #48]	; 0x30
 358:	mov	r0, r4
 35c:	bl	0 <fprintf>
 360:	b	814 <write_basic_data+0x71c>
 364:	ldr	r1, [pc, #1356]	; 8b8 <write_basic_data+0x7c0>
 368:	ldrb	r2, [sp, #48]	; 0x30
 36c:	mov	r0, r4
 370:	bl	0 <fprintf>
 374:	b	814 <write_basic_data+0x71c>
 378:	ldr	r0, [pc, #1240]	; 858 <write_basic_data+0x760>
 37c:	add	r1, sp, #60	; 0x3c
 380:	bl	0 <coda_cursor_get_string_length>
 384:	cmp	r0, #0
 388:	beq	390 <write_basic_data+0x298>
 38c:	bl	0 <handle_coda_error>
 390:	ldr	ip, [sp, #60]	; 0x3c
 394:	add	r0, ip, #1
 398:	bl	0 <malloc>
 39c:	mov	r5, r0
 3a0:	cmp	r5, #0
 3a4:	bne	3cc <write_basic_data+0x2d4>
 3a8:	mvn	r0, #0
 3ac:	ldr	r1, [pc, #1176]	; 84c <write_basic_data+0x754>
 3b0:	ldr	ip, [sp, #60]	; 0x3c
 3b4:	add	r2, ip, #1
 3b8:	ldr	r3, [pc, #1252]	; 8a4 <write_basic_data+0x7ac>
 3bc:	mov	r6, #126	; 0x7e
 3c0:	str	r6, [sp]
 3c4:	bl	0 <coda_set_error>
 3c8:	bl	0 <handle_coda_error>
 3cc:	ldr	r0, [pc, #1156]	; 858 <write_basic_data+0x760>
 3d0:	ldr	r3, [sp, #60]	; 0x3c
 3d4:	add	r2, r3, #1
 3d8:	mov	r1, r5
 3dc:	bl	0 <coda_cursor_read_string>
 3e0:	cmp	r0, #0
 3e4:	beq	3ec <write_basic_data+0x2f4>
 3e8:	bl	0 <handle_coda_error>
 3ec:	ldr	r0, [pc, #1108]	; 848 <write_basic_data+0x750>
 3f0:	ldr	r2, [r0]
 3f4:	cmp	r2, #0
 3f8:	bne	410 <write_basic_data+0x318>
 3fc:	ldr	r1, [pc, #1160]	; 88c <write_basic_data+0x794>
 400:	mov	r2, r5
 404:	mov	r0, r4
 408:	bl	0 <fprintf>
 40c:	b	420 <write_basic_data+0x328>
 410:	ldr	r1, [pc, #1100]	; 864 <write_basic_data+0x76c>
 414:	mov	r2, r5
 418:	mov	r0, r4
 41c:	bl	0 <fprintf>
 420:	mov	r0, r5
 424:	bl	0 <free>
 428:	b	814 <write_basic_data+0x71c>
 42c:	cmp	r2, #12
 430:	beq	45c <write_basic_data+0x364>
 434:	cmn	r2, #1
 438:	bne	814 <write_basic_data+0x71c>
 43c:	ldr	r0, [pc, #1112]	; 89c <write_basic_data+0x7a4>
 440:	ldr	r1, [pc, #1116]	; 8a4 <write_basic_data+0x7ac>
 444:	movw	r2, #294	; 0x126
 448:	ldr	r3, [pc, #1096]	; 898 <write_basic_data+0x7a0>
 44c:	bl	0 <__assert_fail>
 450:	mov	r0, #1
 454:	bl	0 <exit>
 458:	b	814 <write_basic_data+0x71c>
 45c:	ldr	r0, [pc, #1012]	; 858 <write_basic_data+0x760>
 460:	add	r1, sp, #80	; 0x50
 464:	bl	0 <coda_cursor_get_bit_size>
 468:	cmp	r0, #0
 46c:	beq	474 <write_basic_data+0x37c>
 470:	bl	0 <handle_coda_error>
 474:	ldr	ip, [sp, #80]	; 0x50
 478:	mov	r0, #0
 47c:	and	r3, ip, #7
 480:	orr	r1, r0, r3
 484:	cmp	r1, #0
 488:	bne	494 <write_basic_data+0x39c>
 48c:	mov	ip, #0
 490:	b	498 <write_basic_data+0x3a0>
 494:	mov	ip, #1
 498:	ldr	r0, [sp, #80]	; 0x50
 49c:	ldr	r3, [sp, #84]	; 0x54
 4a0:	asr	r2, r3, #3
 4a4:	lsr	r1, r0, #3
 4a8:	orr	r1, r1, r3, lsl #29
 4ac:	asr	r3, ip, #31
 4b0:	adds	r8, r1, ip
 4b4:	adc	r7, r2, r3
 4b8:	mov	r0, r8
 4bc:	bl	0 <malloc>
 4c0:	mov	r5, r0
 4c4:	cmp	r5, #0
 4c8:	bne	4ec <write_basic_data+0x3f4>
 4cc:	mvn	r0, #0
 4d0:	ldr	r1, [pc, #884]	; 84c <write_basic_data+0x754>
 4d4:	ldr	r3, [pc, #968]	; 8a4 <write_basic_data+0x7ac>
 4d8:	mov	r2, #163	; 0xa3
 4dc:	str	r2, [sp]
 4e0:	mov	r2, r8
 4e4:	bl	0 <coda_set_error>
 4e8:	bl	0 <handle_coda_error>
 4ec:	ldr	r0, [pc, #868]	; 858 <write_basic_data+0x760>
 4f0:	mov	r3, #0
 4f4:	mov	r2, #0
 4f8:	ldr	r1, [sp, #80]	; 0x50
 4fc:	ldr	ip, [sp, #84]	; 0x54
 500:	str	ip, [sp, #4]
 504:	str	r1, [sp]
 508:	mov	r1, r5
 50c:	bl	0 <coda_cursor_read_bits>
 510:	cmp	r0, #0
 514:	beq	51c <write_basic_data+0x424>
 518:	bl	0 <handle_coda_error>
 51c:	mov	r6, #0
 520:	asr	ip, r6, #31
 524:	mov	r1, r6
 528:	mov	r0, r7
 52c:	cmp	ip, r0
 530:	bne	544 <write_basic_data+0x44c>
 534:	mov	ip, r8
 538:	cmp	r1, ip
 53c:	bcc	550 <write_basic_data+0x458>
 540:	b	66c <write_basic_data+0x574>
 544:	mov	r3, r7
 548:	cmp	ip, r3
 54c:	bge	66c <write_basic_data+0x574>
 550:	ldrb	r0, [r5, r6]
 554:	and	r2, r0, #255	; 0xff
 558:	cmp	r2, #11
 55c:	bcs	5c0 <write_basic_data+0x4c8>
 560:	cmp	r2, #9
 564:	bcs	598 <write_basic_data+0x4a0>
 568:	cmp	r2, #7
 56c:	beq	588 <write_basic_data+0x490>
 570:	cmp	r2, #8
 574:	bne	610 <write_basic_data+0x518>
 578:	ldr	r1, [pc, #788]	; 894 <write_basic_data+0x79c>
 57c:	mov	r0, r4
 580:	bl	0 <fprintf>
 584:	b	664 <write_basic_data+0x56c>
 588:	ldr	r1, [pc, #692]	; 844 <write_basic_data+0x74c>
 58c:	mov	r0, r4
 590:	bl	0 <fprintf>
 594:	b	664 <write_basic_data+0x56c>
 598:	cmp	r2, #9
 59c:	bne	5b0 <write_basic_data+0x4b8>
 5a0:	ldr	r1, [pc, #780]	; 8b4 <write_basic_data+0x7bc>
 5a4:	mov	r0, r4
 5a8:	bl	0 <fprintf>
 5ac:	b	664 <write_basic_data+0x56c>
 5b0:	ldr	r1, [pc, #708]	; 87c <write_basic_data+0x784>
 5b4:	mov	r0, r4
 5b8:	bl	0 <fprintf>
 5bc:	b	664 <write_basic_data+0x56c>
 5c0:	cmp	r2, #13
 5c4:	bcs	5f0 <write_basic_data+0x4f8>
 5c8:	cmp	r2, #11
 5cc:	bne	5e0 <write_basic_data+0x4e8>
 5d0:	ldr	r1, [pc, #656]	; 868 <write_basic_data+0x770>
 5d4:	mov	r0, r4
 5d8:	bl	0 <fprintf>
 5dc:	b	664 <write_basic_data+0x56c>
 5e0:	ldr	r1, [pc, #708]	; 8ac <write_basic_data+0x7b4>
 5e4:	mov	r0, r4
 5e8:	bl	0 <fprintf>
 5ec:	b	664 <write_basic_data+0x56c>
 5f0:	cmp	r2, #13
 5f4:	beq	658 <write_basic_data+0x560>
 5f8:	cmp	r2, #92	; 0x5c
 5fc:	bne	610 <write_basic_data+0x518>
 600:	ldr	r1, [pc, #648]	; 890 <write_basic_data+0x798>
 604:	mov	r0, r4
 608:	bl	0 <fprintf>
 60c:	b	664 <write_basic_data+0x56c>
 610:	cmp	r2, #32
 614:	bge	620 <write_basic_data+0x528>
 618:	mov	r1, #0
 61c:	b	62c <write_basic_data+0x534>
 620:	cmp	r2, #126	; 0x7e
 624:	movle	r1, #1
 628:	movgt	r1, #0
 62c:	cmp	r1, #0
 630:	bne	648 <write_basic_data+0x550>
 634:	ldr	r1, [pc, #544]	; 85c <write_basic_data+0x764>
 638:	and	r2, r2, #255	; 0xff
 63c:	mov	r0, r4
 640:	bl	0 <fprintf>
 644:	b	664 <write_basic_data+0x56c>
 648:	ldr	r1, [pc, #592]	; 8a0 <write_basic_data+0x7a8>
 64c:	mov	r0, r4
 650:	bl	0 <fprintf>
 654:	b	664 <write_basic_data+0x56c>
 658:	ldr	r1, [pc, #544]	; 880 <write_basic_data+0x788>
 65c:	mov	r0, r4
 660:	bl	0 <fprintf>
 664:	add	r6, r6, #1
 668:	b	520 <write_basic_data+0x428>
 66c:	mov	r0, r5
 670:	bl	0 <free>
 674:	b	814 <write_basic_data+0x71c>
 678:	ldr	r3, [pc, #500]	; 874 <write_basic_data+0x77c>
 67c:	ldr	r0, [r3, r5, lsl #2]
 680:	add	r1, sp, #72	; 0x48
 684:	bl	0 <coda_type_get_special_type>
 688:	cmp	r0, #0
 68c:	beq	694 <write_basic_data+0x59c>
 690:	bl	0 <handle_coda_error>
 694:	ldr	ip, [sp, #72]	; 0x48
 698:	cmp	ip, #2
 69c:	bcs	6ac <write_basic_data+0x5b4>
 6a0:	cmp	ip, #0
 6a4:	beq	814 <write_basic_data+0x71c>
 6a8:	b	700 <write_basic_data+0x608>
 6ac:	cmp	ip, #2
 6b0:	beq	700 <write_basic_data+0x608>
 6b4:	cmp	ip, #3
 6b8:	bne	814 <write_basic_data+0x71c>
 6bc:	ldr	r0, [pc, #404]	; 858 <write_basic_data+0x760>
 6c0:	add	r1, sp, #120	; 0x78
 6c4:	bl	0 <coda_cursor_read_complex_double_pair>
 6c8:	cmp	r0, #0
 6cc:	beq	6d4 <write_basic_data+0x5dc>
 6d0:	bl	0 <handle_coda_error>
 6d4:	ldr	r1, [pc, #460]	; 8a8 <write_basic_data+0x7b0>
 6d8:	vldr	d2, [sp, #120]	; 0x78
 6dc:	ldr	ip, [pc, #460]	; 8b0 <write_basic_data+0x7b8>
 6e0:	ldr	r2, [ip]
 6e4:	vldr	d0, [sp, #128]	; 0x80
 6e8:	vstr	d0, [sp, #8]
 6ec:	str	r2, [sp]
 6f0:	mov	r0, r4
 6f4:	vmov	r2, r3, d2
 6f8:	bl	0 <fprintf>
 6fc:	b	814 <write_basic_data+0x71c>
 700:	ldr	r0, [pc, #336]	; 858 <write_basic_data+0x760>
 704:	add	r1, sp, #112	; 0x70
 708:	bl	0 <coda_cursor_read_double>
 70c:	cmp	r0, #0
 710:	beq	718 <write_basic_data+0x620>
 714:	bl	0 <handle_coda_error>
 718:	ldr	r2, [sp, #72]	; 0x48
 71c:	cmp	r2, #2
 720:	bne	73c <write_basic_data+0x644>
 724:	ldr	r1, [pc, #348]	; 888 <write_basic_data+0x790>
 728:	ldr	r0, [r1]
 72c:	cmp	r0, #0
 730:	movne	r2, #1
 734:	moveq	r2, #0
 738:	b	740 <write_basic_data+0x648>
 73c:	mov	r2, #0
 740:	cmp	r2, #0
 744:	beq	7e0 <write_basic_data+0x6e8>
 748:	vldr	d0, [sp, #112]	; 0x70
 74c:	bl	0 <coda_isNaN>
 750:	cmp	r0, #0
 754:	bne	770 <write_basic_data+0x678>
 758:	vldr	d0, [sp, #112]	; 0x70
 75c:	bl	0 <coda_isInf>
 760:	cmp	r0, #0
 764:	movne	r2, #1
 768:	moveq	r2, #0
 76c:	b	774 <write_basic_data+0x67c>
 770:	mov	r2, #1
 774:	cmp	r2, #0
 778:	bne	79c <write_basic_data+0x6a4>
 77c:	vldr	d0, [sp, #112]	; 0x70
 780:	ldr	r0, [pc, #228]	; 86c <write_basic_data+0x774>
 784:	add	r1, sp, #184	; 0xb8
 788:	bl	0 <coda_time_double_to_string>
 78c:	cmp	r0, #0
 790:	beq	7a8 <write_basic_data+0x6b0>
 794:	bl	0 <handle_coda_error>
 798:	b	7a8 <write_basic_data+0x6b0>
 79c:	add	r0, sp, #184	; 0xb8
 7a0:	ldr	r1, [pc, #168]	; 850 <write_basic_data+0x758>
 7a4:	bl	0 <strcpy>
 7a8:	ldr	r2, [pc, #152]	; 848 <write_basic_data+0x750>
 7ac:	ldr	r3, [r2]
 7b0:	cmp	r3, #0
 7b4:	bne	7cc <write_basic_data+0x6d4>
 7b8:	ldr	r1, [pc, #204]	; 88c <write_basic_data+0x794>
 7bc:	add	r2, sp, #184	; 0xb8
 7c0:	mov	r0, r4
 7c4:	bl	0 <fprintf>
 7c8:	b	814 <write_basic_data+0x71c>
 7cc:	ldr	r1, [pc, #144]	; 864 <write_basic_data+0x76c>
 7d0:	add	r2, sp, #184	; 0xb8
 7d4:	mov	r0, r4
 7d8:	bl	0 <fprintf>
 7dc:	b	814 <write_basic_data+0x71c>
 7e0:	ldr	r1, [pc, #144]	; 878 <write_basic_data+0x780>
 7e4:	vldr	d2, [sp, #112]	; 0x70
 7e8:	mov	r0, r4
 7ec:	vmov	r2, r3, d2
 7f0:	bl	0 <fprintf>
 7f4:	b	814 <write_basic_data+0x71c>
 7f8:	ldr	r0, [pc, #156]	; 89c <write_basic_data+0x7a4>
 7fc:	ldr	r1, [pc, #160]	; 8a4 <write_basic_data+0x7ac>
 800:	mov	r2, #368	; 0x170
 804:	ldr	r3, [pc, #140]	; 898 <write_basic_data+0x7a0>
 808:	bl	0 <__assert_fail>
 80c:	mov	r0, #1
 810:	bl	0 <exit>
 814:	ldr	r1, [pc, #104]	; 884 <write_basic_data+0x78c>
 818:	mov	r0, r4
 81c:	bl	0 <fprintf>
 820:	ldr	r4, [sp, #24]
 824:	ldr	r5, [sp, #28]
 828:	ldr	r6, [sp, #32]
 82c:	ldr	r7, [sp, #36]	; 0x24
 830:	ldr	r8, [sp, #40]	; 0x28
 834:	ldr	lr, [sp, #20]
 838:	add	sp, sp, #216	; 0xd8
 83c:	bx	lr
 840:	.word	0x00000003
 844:	.word	0x00000077
 848:	.word	0x00000000
 84c:	.word	0x000000dd
 850:	.word	0x000000be
 854:	.word	0x000000d9
 858:	.word	0x00000090
 85c:	.word	0x0000007a
 860:	.word	0x00000118
 864:	.word	0x0000011d
 868:	.word	0x00000112
 86c:	.word	0x00000099
 870:	.word	0x00000000
 874:	.word	0x00000008
 878:	.word	0x000000b6
 87c:	.word	0x00000115
 880:	.word	0x00000089
 884:	.word	0x000000b4
	...
 890:	.word	0x00000007
 894:	.word	0x0000006f
 898:	.word	0x00000122
 89c:	.word	0x000000bc
 8a0:	.word	0x00000080
 8a4:	.word	0x0000000a
 8a8:	.word	0x00000092
 8ac:	.word	0x0000008c
 8b0:	.word	0x00000000
 8b4:	.word	0x0000008f
 8b8:	.word	0x00000072

000008bc <write_data>:
 8bc:	mov	ip, sp
 8c0:	sub	sp, sp, #80	; 0x50
 8c4:	str	ip, [sp]
 8c8:	str	lr, [sp, #4]
 8cc:	str	r4, [sp, #8]
 8d0:	str	r5, [sp, #12]
 8d4:	str	r6, [sp, #16]
 8d8:	str	r7, [sp, #20]
 8dc:	str	r8, [sp, #24]
 8e0:	str	r9, [sp, #28]
 8e4:	str	sl, [sp, #32]
 8e8:	str	fp, [sp, #36]	; 0x24
 8ec:	mov	r5, r3
 8f0:	mov	r4, r2
 8f4:	mov	r6, r1
 8f8:	mov	r7, r0
 8fc:	ldr	r1, [pc, #800]	; c24 <write_data+0x368>
 900:	ldr	r0, [r1, r6, lsl #2]
 904:	add	r1, sp, #44	; 0x2c
 908:	bl	0 <coda_type_get_class>
 90c:	cmp	r0, #0
 910:	beq	918 <write_data+0x5c>
 914:	bl	0 <handle_coda_error>
 918:	ldr	ip, [sp, #44]	; 0x2c
 91c:	cmp	ip, #0
 920:	beq	b8c <write_data+0x2d0>
 924:	cmp	ip, #1
 928:	bne	b7c <write_data+0x2c0>
 92c:	ldr	r2, [pc, #760]	; c2c <write_data+0x370>
 930:	lsl	r1, r4, #6
 934:	add	r1, r1, r4, lsl #4
 938:	add	sl, r2, r1
 93c:	ldr	r1, [sl]
 940:	cmp	r4, #0
 944:	bne	950 <write_data+0x94>
 948:	mov	r2, #0
 94c:	str	r2, [sl, #44]	; 0x2c
 950:	ldr	r3, [pc, #728]	; c30 <write_data+0x374>
 954:	ldr	r2, [r3]
 958:	ldr	r0, [sl, #4]
 95c:	add	r0, r1, r0
 960:	cmp	r2, r0
 964:	movge	r9, #1
 968:	movlt	r9, #0
 96c:	cmp	r9, #0
 970:	beq	990 <write_data+0xd4>
 974:	ldr	ip, [pc, #696]	; c34 <write_data+0x378>
 978:	ldr	r3, [ip]
 97c:	sub	r3, r3, #1
 980:	cmp	r4, r3
 984:	movlt	r2, #1
 988:	movge	r2, #0
 98c:	b	994 <write_data+0xd8>
 990:	mov	r2, #0
 994:	cmp	r2, #0
 998:	beq	9bc <write_data+0x100>
 99c:	ldr	r2, [pc, #648]	; c2c <write_data+0x370>
 9a0:	lsl	r3, r4, #6
 9a4:	add	r3, r3, r4, lsl #4
 9a8:	add	r3, r2, r3
 9ac:	ldr	r2, [sl, #44]	; 0x2c
 9b0:	ldr	r0, [sl, #40]	; 0x28
 9b4:	mul	r2, r2, r0
 9b8:	str	r2, [r3, #124]	; 0x7c
 9bc:	mov	fp, #1
 9c0:	mov	r2, #0
 9c4:	ldr	r3, [sl, #4]
 9c8:	cmp	r2, r3
 9cc:	bge	a3c <write_data+0x180>
 9d0:	ldr	ip, [pc, #616]	; c40 <write_data+0x384>
 9d4:	add	r3, r1, r2
 9d8:	ldr	ip, [ip, r3, lsl #2]
 9dc:	cmp	ip, #0
 9e0:	beq	a04 <write_data+0x148>
 9e4:	add	r0, sp, #48	; 0x30
 9e8:	ldr	ip, [pc, #588]	; c3c <write_data+0x380>
 9ec:	add	r3, r1, r2
 9f0:	ldr	ip, [ip, r3, lsl #2]
 9f4:	ldr	r3, [sl, #44]	; 0x2c
 9f8:	ldr	r3, [ip, r3, lsl #2]
 9fc:	str	r3, [r0, r2, lsl #2]
 a00:	b	a18 <write_data+0x15c>
 a04:	add	r0, sp, #48	; 0x30
 a08:	ldr	ip, [pc, #528]	; c20 <write_data+0x364>
 a0c:	add	r3, r1, r2
 a10:	ldr	r3, [ip, r3, lsl #2]
 a14:	str	r3, [r0, r2, lsl #2]
 a18:	add	r3, sp, #48	; 0x30
 a1c:	ldr	r3, [r3, r2, lsl #2]
 a20:	mul	fp, fp, r3
 a24:	lsl	r0, r2, #2
 a28:	add	ip, sl, r0
 a2c:	mov	r3, #0
 a30:	str	r3, [ip, #48]	; 0x30
 a34:	add	r2, r2, #1
 a38:	b	9c4 <write_data+0x108>
 a3c:	cmp	fp, #0
 a40:	beq	bf0 <write_data+0x334>
 a44:	ldr	r0, [pc, #464]	; c1c <write_data+0x360>
 a48:	bl	0 <coda_cursor_goto_first_array_element>
 a4c:	cmp	r0, #0
 a50:	beq	a58 <write_data+0x19c>
 a54:	bl	0 <handle_coda_error>
 a58:	mov	r8, #0
 a5c:	cmp	r8, fp
 a60:	bge	b70 <write_data+0x2b4>
 a64:	add	r1, r6, #1
 a68:	add	r2, r4, #1
 a6c:	mov	r3, r5
 a70:	mov	r0, r7
 a74:	bl	8bc <write_data>
 a78:	sub	r3, fp, #1
 a7c:	cmp	r8, r3
 a80:	bge	b68 <write_data+0x2ac>
 a84:	ldr	r0, [pc, #400]	; c1c <write_data+0x360>
 a88:	bl	0 <coda_cursor_goto_next_array_element>
 a8c:	cmp	r0, #0
 a90:	beq	a98 <write_data+0x1dc>
 a94:	bl	0 <handle_coda_error>
 a98:	cmp	r9, #0
 a9c:	beq	abc <write_data+0x200>
 aa0:	ldr	ip, [pc, #396]	; c34 <write_data+0x378>
 aa4:	ldr	ip, [ip]
 aa8:	sub	ip, ip, #1
 aac:	cmp	r4, ip
 ab0:	movlt	r0, #1
 ab4:	movge	r0, #0
 ab8:	b	ac0 <write_data+0x204>
 abc:	mov	r0, #0
 ac0:	cmp	r0, #0
 ac4:	beq	af4 <write_data+0x238>
 ac8:	ldr	r1, [pc, #348]	; c2c <write_data+0x370>
 acc:	lsl	r0, r4, #6
 ad0:	add	r2, r0, r4, lsl #4
 ad4:	add	ip, r1, r2
 ad8:	ldr	r2, [pc, #332]	; c2c <write_data+0x370>
 adc:	lsl	r3, r4, #6
 ae0:	add	r0, r3, r4, lsl #4
 ae4:	add	r2, r2, r0
 ae8:	ldr	r1, [r2, #124]	; 0x7c
 aec:	add	r2, r1, #1
 af0:	str	r2, [ip, #124]	; 0x7c
 af4:	ldr	r3, [pc, #300]	; c28 <write_data+0x36c>
 af8:	ldr	r0, [r3]
 afc:	cmp	r0, #0
 b00:	beq	b68 <write_data+0x2ac>
 b04:	ldr	ip, [sl, #4]
 b08:	sub	r1, ip, #1
 b0c:	cmp	r1, #0
 b10:	blt	b68 <write_data+0x2ac>
 b14:	lsl	r0, r1, #2
 b18:	add	r2, sl, r0
 b1c:	lsl	ip, r1, #2
 b20:	add	r3, sl, ip
 b24:	ldr	r3, [r3, #48]	; 0x30
 b28:	add	r3, r3, #1
 b2c:	str	r3, [r2, #48]	; 0x30
 b30:	lsl	r0, r1, #2
 b34:	add	ip, sl, r0
 b38:	ldr	r2, [ip, #48]	; 0x30
 b3c:	add	r0, sp, #48	; 0x30
 b40:	ldr	r3, [r0, r1, lsl #2]
 b44:	cmp	r2, r3
 b48:	bne	b68 <write_data+0x2ac>
 b4c:	mov	r2, r1
 b50:	sub	r1, r2, #1
 b54:	lsl	r3, r2, #2
 b58:	add	r3, sl, r3
 b5c:	mov	r2, #0
 b60:	str	r2, [r3, #48]	; 0x30
 b64:	b	b0c <write_data+0x250>
 b68:	add	r8, r8, #1
 b6c:	b	a5c <write_data+0x1a0>
 b70:	ldr	r0, [pc, #164]	; c1c <write_data+0x360>
 b74:	bl	0 <coda_cursor_goto_parent>
 b78:	b	bf0 <write_data+0x334>
 b7c:	mov	r1, r6
 b80:	mov	r0, r7
 b84:	bl	f8 <write_basic_data>
 b88:	b	bf0 <write_data+0x334>
 b8c:	ldr	r0, [pc, #136]	; c1c <write_data+0x360>
 b90:	ldr	ip, [pc, #160]	; c38 <write_data+0x37c>
 b94:	ldr	r1, [ip, r5, lsl #2]
 b98:	add	r2, sp, #40	; 0x28
 b9c:	bl	0 <coda_cursor_get_record_field_available_status>
 ba0:	cmp	r0, #0
 ba4:	beq	bac <write_data+0x2f0>
 ba8:	bl	0 <handle_coda_error>
 bac:	ldr	r1, [sp, #40]	; 0x28
 bb0:	cmp	r1, #0
 bb4:	beq	bf0 <write_data+0x334>
 bb8:	ldr	r0, [pc, #92]	; c1c <write_data+0x360>
 bbc:	ldr	ip, [pc, #116]	; c38 <write_data+0x37c>
 bc0:	ldr	r1, [ip, r5, lsl #2]
 bc4:	bl	0 <coda_cursor_goto_record_field_by_index>
 bc8:	cmp	r0, #0
 bcc:	beq	bd4 <write_data+0x318>
 bd0:	bl	0 <handle_coda_error>
 bd4:	add	r1, r6, #1
 bd8:	add	r3, r5, #1
 bdc:	mov	r2, r4
 be0:	mov	r0, r7
 be4:	bl	8bc <write_data>
 be8:	ldr	r0, [pc, #44]	; c1c <write_data+0x360>
 bec:	bl	0 <coda_cursor_goto_parent>
 bf0:	ldr	r4, [sp, #8]
 bf4:	ldr	r5, [sp, #12]
 bf8:	ldr	r6, [sp, #16]
 bfc:	ldr	r7, [sp, #20]
 c00:	ldr	r8, [sp, #24]
 c04:	ldr	r9, [sp, #28]
 c08:	ldr	sl, [sp, #32]
 c0c:	ldr	fp, [sp, #36]	; 0x24
 c10:	ldr	lr, [sp, #4]
 c14:	add	sp, sp, #80	; 0x50
 c18:	bx	lr
 c1c:	.word	0x00000090
 c20:	.word	0x00000004
 c24:	.word	0x00000008
 c28:	.word	0x00000000
 c2c:	.word	0x00000320
 c30:	.word	0x00000068
 c34:	.word	0x00000d20
 c38:	.word	0x00000da4
 c3c:	.word	0x0000006c
 c40:	.word	0x00000048

00000c44 <export_data_element_to_ascii>:
 c44:	mov	ip, sp
 c48:	sub	sp, sp, #8
 c4c:	str	ip, [sp]
 c50:	str	lr, [sp, #4]
 c54:	ldr	r0, [pc, #216]	; d34 <export_data_element_to_ascii+0xf0>
 c58:	ldr	r0, [r0]
 c5c:	cmp	r0, #0
 c60:	bne	c78 <export_data_element_to_ascii+0x34>
 c64:	ldr	r0, [pc, #216]	; d44 <export_data_element_to_ascii+0x100>
 c68:	ldr	r0, [r0]
 c6c:	ldr	r1, [pc, #200]	; d3c <export_data_element_to_ascii+0xf8>
 c70:	bl	0 <fprintf>
 c74:	b	c84 <export_data_element_to_ascii+0x40>
 c78:	ldr	r2, [pc, #180]	; d34 <export_data_element_to_ascii+0xf0>
 c7c:	mov	r0, #0
 c80:	str	r0, [r2]
 c84:	ldr	r0, [pc, #172]	; d38 <export_data_element_to_ascii+0xf4>
 c88:	ldr	r0, [r0]
 c8c:	cmp	r0, #0
 c90:	beq	cb8 <export_data_element_to_ascii+0x74>
 c94:	ldr	r0, [pc, #168]	; d44 <export_data_element_to_ascii+0x100>
 c98:	ldr	r0, [r0]
 c9c:	mov	r1, #2
 ca0:	mov	r2, #0
 ca4:	bl	0 <print_full_field_name>
 ca8:	ldr	r0, [pc, #148]	; d44 <export_data_element_to_ascii+0x100>
 cac:	ldr	r0, [r0]
 cb0:	ldr	r1, [pc, #132]	; d3c <export_data_element_to_ascii+0xf8>
 cb4:	bl	0 <fprintf>
 cb8:	ldr	r0, [pc, #128]	; d40 <export_data_element_to_ascii+0xfc>
 cbc:	ldr	r0, [r0]
 cc0:	cmp	r0, #0
 cc4:	ble	d00 <export_data_element_to_ascii+0xbc>
 cc8:	ldr	r1, [pc, #96]	; d30 <export_data_element_to_ascii+0xec>
 ccc:	ldr	r0, [pc, #108]	; d40 <export_data_element_to_ascii+0xfc>
 cd0:	ldr	r3, [r0]
 cd4:	lsl	r2, r3, #3
 cd8:	add	ip, r1, r2
 cdc:	sub	lr, ip, #4096	; 0x1000
 ce0:	ldr	r1, [lr, #4088]	; 0xff8
 ce4:	sub	lr, ip, #4096	; 0x1000
 ce8:	ldr	r0, [lr, #4092]	; 0xffc
 cec:	orr	r0, r0, r1
 cf0:	cmp	r0, #0
 cf4:	moveq	r0, #1
 cf8:	movne	r0, #0
 cfc:	b	d04 <export_data_element_to_ascii+0xc0>
 d00:	mov	r0, #0
 d04:	cmp	r0, #0
 d08:	bne	d24 <export_data_element_to_ascii+0xe0>
 d0c:	ldr	r0, [pc, #48]	; d44 <export_data_element_to_ascii+0x100>
 d10:	ldr	r0, [r0]
 d14:	mov	r1, #0
 d18:	mov	r2, #0
 d1c:	mov	r3, #0
 d20:	bl	8bc <write_data>
 d24:	ldr	lr, [sp, #4]
 d28:	add	sp, sp, #8
 d2c:	bx	lr
 d30:	.word	0x00000130
	...
 d3c:	.word	0x000000b4
	...
