
../compcert-repos/stcorp-coda-3a25f25/CMakeFiles/coda_static.dir/libcoda/coda-detection.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <coda_detection_rule_entry_delete>:
   0:	push	{r4, sl, fp, lr}
   4:	add	fp, sp, #8
   8:	mov	r4, r0
   c:	ldr	r0, [r0]
  10:	cmp	r0, #0
  14:	beq	1c <coda_detection_rule_entry_delete+0x1c>
  18:	bl	0 <free>
  1c:	ldr	r0, [r4, #4]
  20:	cmp	r0, #0
  24:	beq	2c <coda_detection_rule_entry_delete+0x2c>
  28:	bl	0 <coda_expression_delete>
  2c:	mov	r0, r4
  30:	pop	{r4, sl, fp, lr}
  34:	b	0 <free>

00000038 <coda_detection_rule_entry_new>:
  38:	push	{r4, r5, fp, lr}
  3c:	add	fp, sp, #8
  40:	sub	sp, sp, #16
  44:	mov	r4, r0
  48:	cmp	r0, #0
  4c:	beq	90 <coda_detection_rule_entry_new+0x58>
  50:	add	r1, sp, #8
  54:	mov	r0, r4
  58:	bl	0 <coda_expression_from_string>
  5c:	cmp	r0, #0
  60:	bne	130 <coda_detection_rule_entry_new+0xf8>
  64:	ldr	r0, [sp, #8]
  68:	add	r1, sp, #12
  6c:	bl	0 <coda_expression_get_type>
  70:	mov	r5, r0
  74:	ldr	r0, [sp, #8]
  78:	bl	0 <coda_expression_delete>
  7c:	cmp	r5, #0
  80:	bne	130 <coda_detection_rule_entry_new+0xf8>
  84:	ldr	r0, [sp, #12]
  88:	cmp	r0, #4
  8c:	bne	11c <coda_detection_rule_entry_new+0xe4>
  90:	mov	r0, #8
  94:	bl	0 <malloc>
  98:	cmp	r0, #0
  9c:	beq	f4 <coda_detection_rule_entry_new+0xbc>
  a0:	mov	r5, r0
  a4:	mov	r0, #0
  a8:	cmp	r4, #0
  ac:	str	r0, [r5]
  b0:	str	r0, [r5, #4]
  b4:	beq	134 <coda_detection_rule_entry_new+0xfc>
  b8:	mov	r0, r4
  bc:	bl	0 <strdup>
  c0:	cmp	r0, #0
  c4:	str	r0, [r5]
  c8:	bne	134 <coda_detection_rule_entry_new+0xfc>
  cc:	movw	r1, #0
  d0:	movw	r2, #0
  d4:	mvn	r0, #0
  d8:	mov	r3, #94	; 0x5e
  dc:	movt	r1, #0
  e0:	movt	r2, #0
  e4:	bl	0 <coda_set_error>
  e8:	mov	r0, r5
  ec:	bl	0 <free>
  f0:	b	130 <coda_detection_rule_entry_new+0xf8>
  f4:	movw	r1, #0
  f8:	movw	r3, #0
  fc:	mov	r0, #82	; 0x52
 100:	mov	r2, #8
 104:	str	r0, [sp]
 108:	movt	r1, #0
 10c:	movt	r3, #0
 110:	mvn	r0, #0
 114:	bl	0 <coda_set_error>
 118:	b	130 <coda_detection_rule_entry_new+0xf8>
 11c:	movw	r0, #65136	; 0xfe70
 120:	movw	r1, #0
 124:	movt	r0, #65535	; 0xffff
 128:	movt	r1, #0
 12c:	bl	0 <coda_set_error>
 130:	mov	r5, #0
 134:	mov	r0, r5
 138:	sub	sp, fp, #8
 13c:	pop	{r4, r5, fp, pc}

00000140 <coda_detection_rule_entry_set_expression>:
 140:	ldr	r2, [r0, #4]
 144:	cmp	r2, #0
 148:	streq	r1, [r0, #4]
 14c:	moveq	r0, #0
 150:	bxeq	lr
 154:	push	{fp, lr}
 158:	mov	fp, sp
 15c:	movw	r0, #65136	; 0xfe70
 160:	movw	r1, #0
 164:	movt	r0, #65535	; 0xffff
 168:	movt	r1, #0
 16c:	bl	0 <coda_set_error>
 170:	mvn	r0, #0
 174:	pop	{fp, pc}

00000178 <coda_detection_rule_delete>:
 178:	push	{r4, r5, r6, sl, fp, lr}
 17c:	add	fp, sp, #16
 180:	mov	r4, r0
 184:	ldr	r0, [r0, #4]
 188:	cmp	r0, #0
 18c:	beq	1ec <coda_detection_rule_delete+0x74>
 190:	ldr	r1, [r4]
 194:	cmp	r1, #1
 198:	blt	1e8 <coda_detection_rule_delete+0x70>
 19c:	mov	r6, #0
 1a0:	ldr	r5, [r0, r6, lsl #2]
 1a4:	cmp	r5, #0
 1a8:	beq	1dc <coda_detection_rule_delete+0x64>
 1ac:	ldr	r0, [r5]
 1b0:	cmp	r0, #0
 1b4:	beq	1bc <coda_detection_rule_delete+0x44>
 1b8:	bl	0 <free>
 1bc:	ldr	r0, [r5, #4]
 1c0:	cmp	r0, #0
 1c4:	beq	1cc <coda_detection_rule_delete+0x54>
 1c8:	bl	0 <coda_expression_delete>
 1cc:	mov	r0, r5
 1d0:	bl	0 <free>
 1d4:	ldr	r1, [r4]
 1d8:	ldr	r0, [r4, #4]
 1dc:	add	r6, r6, #1
 1e0:	cmp	r6, r1
 1e4:	blt	1a0 <coda_detection_rule_delete+0x28>
 1e8:	bl	0 <free>
 1ec:	mov	r0, r4
 1f0:	pop	{r4, r5, r6, sl, fp, lr}
 1f4:	b	0 <free>

000001f8 <coda_detection_rule_new>:
 1f8:	push	{fp, lr}
 1fc:	mov	fp, sp
 200:	sub	sp, sp, #8
 204:	mov	r0, #12
 208:	bl	0 <malloc>
 20c:	cmp	r0, #0
 210:	beq	22c <coda_detection_rule_new+0x34>
 214:	mov	r1, #0
 218:	str	r1, [r0]
 21c:	str	r1, [r0, #4]
 220:	str	r1, [r0, #8]
 224:	mov	sp, fp
 228:	pop	{fp, pc}
 22c:	movw	r1, #0
 230:	movw	r3, #0
 234:	mov	r0, #141	; 0x8d
 238:	mov	r2, #12
 23c:	str	r0, [sp]
 240:	movt	r1, #0
 244:	movt	r3, #0
 248:	mvn	r0, #0
 24c:	bl	0 <coda_set_error>
 250:	mov	r0, #0
 254:	mov	sp, fp
 258:	pop	{fp, pc}

0000025c <coda_detection_rule_add_entry>:
 25c:	push	{r4, r5, r6, sl, fp, lr}
 260:	add	fp, sp, #16
 264:	sub	sp, sp, #8
 268:	mov	r5, r0
 26c:	ldr	r0, [r1]
 270:	mov	r4, r1
 274:	cmp	r0, #0
 278:	bne	288 <coda_detection_rule_add_entry+0x2c>
 27c:	ldr	r0, [r4, #4]
 280:	cmp	r0, #0
 284:	beq	2f0 <coda_detection_rule_add_entry+0x94>
 288:	ldr	r1, [r5]
 28c:	ldr	r0, [r5, #4]
 290:	mov	r6, #4
 294:	add	r1, r6, r1, lsl #2
 298:	bl	0 <realloc>
 29c:	cmp	r0, #0
 2a0:	beq	2c0 <coda_detection_rule_add_entry+0x64>
 2a4:	str	r0, [r5, #4]
 2a8:	ldr	r1, [r5]
 2ac:	add	r2, r1, #1
 2b0:	str	r2, [r5]
 2b4:	str	r4, [r0, r1, lsl #2]
 2b8:	mov	r4, #0
 2bc:	b	308 <coda_detection_rule_add_entry+0xac>
 2c0:	ldr	r0, [r5]
 2c4:	mov	r1, #165	; 0xa5
 2c8:	movw	r3, #0
 2cc:	mvn	r4, #0
 2d0:	str	r1, [sp]
 2d4:	movw	r1, #0
 2d8:	movt	r3, #0
 2dc:	movt	r1, #0
 2e0:	add	r2, r6, r0, lsl #2
 2e4:	mvn	r0, #0
 2e8:	bl	0 <coda_set_error>
 2ec:	b	308 <coda_detection_rule_add_entry+0xac>
 2f0:	movw	r0, #65136	; 0xfe70
 2f4:	movw	r1, #0
 2f8:	movt	r0, #65535	; 0xffff
 2fc:	movt	r1, #0
 300:	bl	0 <coda_set_error>
 304:	mvn	r4, #0
 308:	mov	r0, r4
 30c:	sub	sp, fp, #16
 310:	pop	{r4, r5, r6, sl, fp, pc}

00000314 <coda_detection_tree_delete>:
 314:	b	318 <delete_detection_node>

00000318 <delete_detection_node>:
 318:	push	{r4, r5, fp, lr}
 31c:	add	fp, sp, #8
 320:	mov	r4, r0
 324:	ldr	r0, [r0]
 328:	cmp	r0, #0
 32c:	beq	334 <delete_detection_node+0x1c>
 330:	bl	0 <free>
 334:	ldr	r0, [r4, #16]
 338:	cmp	r0, #0
 33c:	beq	370 <delete_detection_node+0x58>
 340:	ldr	r1, [r4, #12]
 344:	cmp	r1, #1
 348:	blt	36c <delete_detection_node+0x54>
 34c:	mov	r5, #0
 350:	ldr	r0, [r0, r5, lsl #2]
 354:	bl	318 <delete_detection_node>
 358:	ldr	r1, [r4, #12]
 35c:	ldr	r0, [r4, #16]
 360:	add	r5, r5, #1
 364:	cmp	r5, r1
 368:	blt	350 <delete_detection_node+0x38>
 36c:	bl	0 <free>
 370:	mov	r0, r4
 374:	pop	{r4, r5, fp, lr}
 378:	b	0 <free>

0000037c <coda_detection_tree_add_rule>:
 37c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
 380:	add	fp, sp, #28
 384:	sub	sp, sp, #4
 388:	vpush	{d8-d9}
 38c:	sub	sp, sp, #24
 390:	ldr	r6, [r1]
 394:	cmp	r6, #0
 398:	beq	3b8 <coda_detection_tree_add_rule+0x3c>
 39c:	ldr	r8, [r0]
 3a0:	mov	r5, r0
 3a4:	cmp	r8, #0
 3a8:	beq	3d8 <coda_detection_tree_add_rule+0x5c>
 3ac:	cmp	r6, #1
 3b0:	bge	410 <coda_detection_tree_add_rule+0x94>
 3b4:	b	830 <coda_detection_tree_add_rule+0x4b4>
 3b8:	ldr	r0, [r1, #8]
 3bc:	movw	r1, #0
 3c0:	movt	r1, #0
 3c4:	ldr	r2, [r0, #8]
 3c8:	movw	r0, #65136	; 0xfe70
 3cc:	movt	r0, #65535	; 0xffff
 3d0:	bl	0 <coda_set_error>
 3d4:	b	8e4 <coda_detection_tree_add_rule+0x568>
 3d8:	mov	r0, #20
 3dc:	mov	r4, r1
 3e0:	bl	0 <malloc>
 3e4:	cmp	r0, #0
 3e8:	beq	864 <coda_detection_tree_add_rule+0x4e8>
 3ec:	vmov.i32	q8, #0	; 0x00000000
 3f0:	mov	r8, r0
 3f4:	mov	r1, #0
 3f8:	vst1.32	{d16-d17}, [r0]!
 3fc:	str	r1, [r0]
 400:	mov	r1, r4
 404:	str	r8, [r5]
 408:	cmp	r6, #1
 40c:	blt	830 <coda_detection_tree_add_rule+0x4b4>
 410:	vmov.i32	q4, #0	; 0x00000000
 414:	mov	r2, #0
 418:	str	r1, [sp, #12]
 41c:	ldr	r0, [r1, #4]
 420:	str	r2, [sp, #16]
 424:	ldr	r0, [r0, r2, lsl #2]
 428:	str	r0, [sp, #20]
 42c:	ldr	r0, [r0]
 430:	b	444 <coda_detection_tree_add_rule+0xc8>
 434:	cmp	r3, #47	; 0x2f
 438:	mov	r8, r5
 43c:	addeq	r7, r7, #1
 440:	add	r0, r6, r7
 444:	cmp	r0, #0
 448:	beq	45c <coda_detection_tree_add_rule+0xe0>
 44c:	ldrb	r6, [r0]
 450:	cmp	r6, #0
 454:	movne	r6, r0
 458:	b	460 <coda_detection_tree_add_rule+0xe4>
 45c:	mov	r6, #0
 460:	ldr	ip, [r8, #12]
 464:	cmp	ip, #1
 468:	blt	5a0 <coda_detection_tree_add_rule+0x224>
 46c:	mov	r9, #0
 470:	ldr	r1, [r8, #16]
 474:	cmp	r6, #0
 478:	ldr	r5, [r1, r9, lsl #2]
 47c:	ldr	r1, [r5]
 480:	beq	4c4 <coda_detection_tree_add_rule+0x148>
 484:	cmp	r1, #0
 488:	beq	594 <coda_detection_tree_add_rule+0x218>
 48c:	ldrb	r2, [r1]
 490:	cmp	r2, #0
 494:	beq	4ec <coda_detection_tree_add_rule+0x170>
 498:	add	r3, r1, #1
 49c:	mov	r7, #0
 4a0:	ldrb	r4, [r6, r7]
 4a4:	uxtb	r0, r2
 4a8:	cmp	r0, r4
 4ac:	bne	4f4 <coda_detection_tree_add_rule+0x178>
 4b0:	ldrb	r2, [r3, r7]
 4b4:	add	r7, r7, #1
 4b8:	cmp	r2, #0
 4bc:	bne	4a0 <coda_detection_tree_add_rule+0x124>
 4c0:	b	4f0 <coda_detection_tree_add_rule+0x174>
 4c4:	cmp	r1, #0
 4c8:	bne	594 <coda_detection_tree_add_rule+0x218>
 4cc:	ldr	r0, [sp, #20]
 4d0:	ldr	r1, [r5, #4]
 4d4:	ldr	r0, [r0, #4]
 4d8:	bl	0 <coda_expression_is_equal>
 4dc:	cmp	r0, #0
 4e0:	bne	7f4 <coda_detection_tree_add_rule+0x478>
 4e4:	ldr	ip, [r8, #12]
 4e8:	b	594 <coda_detection_tree_add_rule+0x218>
 4ec:	mov	r7, #0
 4f0:	mov	r2, #0
 4f4:	ldrb	r3, [r6, r7]
 4f8:	uxtb	r0, r2
 4fc:	cmp	r0, r3
 500:	beq	734 <coda_detection_tree_add_rule+0x3b8>
 504:	ldrb	r0, [r1, r7]
 508:	cmp	r0, #0
 50c:	beq	534 <coda_detection_tree_add_rule+0x1b8>
 510:	cmp	r7, #2
 514:	blt	54c <coda_detection_tree_add_rule+0x1d0>
 518:	sub	r2, r7, #1
 51c:	ldrb	r3, [r6, r2]
 520:	cmp	r3, #91	; 0x5b
 524:	beq	55c <coda_detection_tree_add_rule+0x1e0>
 528:	cmp	r3, #47	; 0x2f
 52c:	moveq	r7, r2
 530:	b	560 <coda_detection_tree_add_rule+0x1e4>
 534:	cmp	r3, #47	; 0x2f
 538:	cmpne	r3, #91	; 0x5b
 53c:	beq	434 <coda_detection_tree_add_rule+0xb8>
 540:	cmp	r3, #64	; 0x40
 544:	bne	594 <coda_detection_tree_add_rule+0x218>
 548:	b	434 <coda_detection_tree_add_rule+0xb8>
 54c:	cmp	r7, #1
 550:	mov	r7, #1
 554:	beq	560 <coda_detection_tree_add_rule+0x1e4>
 558:	b	594 <coda_detection_tree_add_rule+0x218>
 55c:	mov	r7, r2
 560:	ldrb	r2, [r6, r7]
 564:	cmp	r2, #47	; 0x2f
 568:	cmpne	r2, #91	; 0x5b
 56c:	bne	58c <coda_detection_tree_add_rule+0x210>
 570:	ldrb	sl, [r1, r7]
 574:	cmp	sl, #47	; 0x2f
 578:	cmpne	sl, #91	; 0x5b
 57c:	beq	5e0 <coda_detection_tree_add_rule+0x264>
 580:	cmp	sl, #64	; 0x40
 584:	bne	594 <coda_detection_tree_add_rule+0x218>
 588:	b	5e0 <coda_detection_tree_add_rule+0x264>
 58c:	cmp	r2, #64	; 0x40
 590:	beq	570 <coda_detection_tree_add_rule+0x1f4>
 594:	add	r9, r9, #1
 598:	cmp	r9, ip
 59c:	blt	470 <coda_detection_tree_add_rule+0xf4>
 5a0:	mov	r0, #20
 5a4:	bl	0 <malloc>
 5a8:	cmp	r0, #0
 5ac:	beq	864 <coda_detection_tree_add_rule+0x4e8>
 5b0:	mov	r5, r0
 5b4:	cmp	r6, #0
 5b8:	vst1.32	{d8-d9}, [r0]!
 5bc:	mov	r1, #0
 5c0:	str	r1, [r0]
 5c4:	beq	6ec <coda_detection_tree_add_rule+0x370>
 5c8:	mov	r0, r6
 5cc:	bl	0 <strdup>
 5d0:	cmp	r0, #0
 5d4:	str	r0, [r5]
 5d8:	bne	6f8 <coda_detection_tree_add_rule+0x37c>
 5dc:	b	8a4 <coda_detection_tree_add_rule+0x528>
 5e0:	mov	r0, #20
 5e4:	add	r5, r7, #1
 5e8:	cmp	r2, #47	; 0x2f
 5ec:	mov	r4, r7
 5f0:	moveq	r4, r5
 5f4:	bl	0 <malloc>
 5f8:	cmp	r0, #0
 5fc:	beq	864 <coda_detection_tree_add_rule+0x4e8>
 600:	str	r0, [sp, #8]
 604:	ldr	r0, [sp, #8]
 608:	add	r0, r0, #4
 60c:	vst1.32	{d8-d9}, [r0]
 610:	mov	r0, r5
 614:	bl	0 <malloc>
 618:	mov	r5, r0
 61c:	ldr	r0, [sp, #8]
 620:	cmp	r5, #0
 624:	str	r5, [r0]
 628:	beq	8c8 <coda_detection_tree_add_rule+0x54c>
 62c:	mov	r0, r5
 630:	mov	r1, r6
 634:	mov	r2, r7
 638:	bl	0 <memcpy>
 63c:	mov	r0, #0
 640:	strb	r0, [r5, r7]
 644:	ldr	r0, [r8, #16]
 648:	ldr	r1, [r0, r9, lsl #2]
 64c:	ldr	r0, [sp, #8]
 650:	bl	a08 <detection_node_add_node>
 654:	cmp	r0, #0
 658:	bne	8dc <coda_detection_tree_add_rule+0x560>
 65c:	ldr	r1, [r8, #16]
 660:	sub	r0, sl, #47	; 0x2f
 664:	clz	r0, r0
 668:	lsr	r0, r0, #5
 66c:	add	ip, r7, r0
 670:	ldr	r1, [r1, r9, lsl #2]
 674:	ldr	r1, [r1]
 678:	ldrb	r5, [r1, ip]
 67c:	cmp	r5, #0
 680:	beq	6c8 <coda_detection_tree_add_rule+0x34c>
 684:	add	r0, r7, r0
 688:	mov	r2, #0
 68c:	add	r3, r0, #1
 690:	mov	r0, ip
 694:	strb	r5, [r1]
 698:	add	r0, r0, #1
 69c:	ldr	r7, [r8, #16]
 6a0:	sub	r1, r0, ip
 6a4:	ldr	r7, [r7, r9, lsl #2]
 6a8:	ldr	r7, [r7]
 6ac:	add	r5, r7, r3
 6b0:	add	r1, r7, r1
 6b4:	ldrb	r5, [r5, r2]
 6b8:	add	r2, r2, #1
 6bc:	cmp	r5, #0
 6c0:	bne	694 <coda_detection_tree_add_rule+0x318>
 6c4:	add	r1, r7, r2
 6c8:	mov	r0, #0
 6cc:	strb	r0, [r1]
 6d0:	ldr	r1, [sp, #8]
 6d4:	ldr	r0, [r8, #16]
 6d8:	str	r1, [r0, r9, lsl #2]
 6dc:	add	r0, r6, r4
 6e0:	ldr	r1, [r8, #16]
 6e4:	ldr	r8, [r1, r9, lsl #2]
 6e8:	b	444 <coda_detection_tree_add_rule+0xc8>
 6ec:	ldr	r0, [sp, #20]
 6f0:	ldr	r0, [r0, #4]
 6f4:	str	r0, [r5, #4]
 6f8:	mov	r0, r8
 6fc:	mov	r1, r5
 700:	bl	a08 <detection_node_add_node>
 704:	cmp	r0, #0
 708:	bne	89c <coda_detection_tree_add_rule+0x520>
 70c:	cmp	r6, #0
 710:	beq	72c <coda_detection_tree_add_rule+0x3b0>
 714:	ldr	r0, [sp, #20]
 718:	mov	r8, r5
 71c:	ldr	r1, [r0, #4]
 720:	mov	r0, #0
 724:	cmp	r1, #0
 728:	bne	444 <coda_detection_tree_add_rule+0xc8>
 72c:	mov	r8, r5
 730:	b	818 <coda_detection_tree_add_rule+0x49c>
 734:	ldr	r0, [sp, #20]
 738:	ldr	r0, [r0, #4]
 73c:	cmp	r0, #0
 740:	beq	7e4 <coda_detection_tree_add_rule+0x468>
 744:	ldr	r0, [r5, #12]
 748:	cmp	r0, #1
 74c:	blt	790 <coda_detection_tree_add_rule+0x414>
 750:	mov	r4, #0
 754:	ldr	r1, [r5, #16]
 758:	ldr	r1, [r1, r4, lsl #2]
 75c:	ldr	r2, [r1]
 760:	cmp	r2, #0
 764:	bne	784 <coda_detection_tree_add_rule+0x408>
 768:	ldr	r0, [sp, #20]
 76c:	ldr	r1, [r1, #4]
 770:	ldr	r0, [r0, #4]
 774:	bl	0 <coda_expression_is_equal>
 778:	cmp	r0, #0
 77c:	bne	808 <coda_detection_tree_add_rule+0x48c>
 780:	ldr	r0, [r5, #12]
 784:	add	r4, r4, #1
 788:	cmp	r4, r0
 78c:	blt	754 <coda_detection_tree_add_rule+0x3d8>
 790:	mov	r0, #20
 794:	bl	0 <malloc>
 798:	cmp	r0, #0
 79c:	beq	864 <coda_detection_tree_add_rule+0x4e8>
 7a0:	mov	r8, r0
 7a4:	mov	r0, #0
 7a8:	mov	r1, #4
 7ac:	str	r0, [r8, #16]
 7b0:	mov	r0, r8
 7b4:	vst1.32	{d8-d9}, [r0], r1
 7b8:	ldr	r1, [sp, #20]
 7bc:	ldr	r1, [r1, #4]
 7c0:	str	r1, [r0]
 7c4:	mov	r0, r5
 7c8:	mov	r1, r8
 7cc:	bl	a08 <detection_node_add_node>
 7d0:	cmp	r0, #0
 7d4:	bne	8fc <coda_detection_tree_add_rule+0x580>
 7d8:	cmp	r8, #0
 7dc:	bne	818 <coda_detection_tree_add_rule+0x49c>
 7e0:	b	8e4 <coda_detection_tree_add_rule+0x568>
 7e4:	mov	r8, r5
 7e8:	cmp	r8, #0
 7ec:	bne	818 <coda_detection_tree_add_rule+0x49c>
 7f0:	b	8e4 <coda_detection_tree_add_rule+0x568>
 7f4:	ldr	r0, [r8, #16]
 7f8:	ldr	r8, [r0, r9, lsl #2]
 7fc:	cmp	r8, #0
 800:	bne	818 <coda_detection_tree_add_rule+0x49c>
 804:	b	8e4 <coda_detection_tree_add_rule+0x568>
 808:	ldr	r0, [r5, #16]
 80c:	ldr	r8, [r0, r4, lsl #2]
 810:	cmp	r8, #0
 814:	beq	8e4 <coda_detection_tree_add_rule+0x568>
 818:	ldr	r1, [sp, #12]
 81c:	ldr	r2, [sp, #16]
 820:	ldr	r0, [r1]
 824:	add	r2, r2, #1
 828:	cmp	r2, r0
 82c:	blt	41c <coda_detection_tree_add_rule+0xa0>
 830:	ldr	r0, [r8, #8]
 834:	cmp	r0, #0
 838:	beq	890 <coda_detection_tree_add_rule+0x514>
 83c:	ldr	r0, [r0, #8]
 840:	ldr	r3, [r0, #8]
 844:	ldr	r0, [r1, #8]
 848:	movw	r1, #0
 84c:	movt	r1, #0
 850:	ldr	r2, [r0, #8]
 854:	movw	r0, #65136	; 0xfe70
 858:	movt	r0, #65535	; 0xffff
 85c:	bl	0 <coda_set_error>
 860:	b	8e4 <coda_detection_tree_add_rule+0x568>
 864:	movw	r1, #0
 868:	movw	r3, #0
 86c:	mov	r0, #202	; 0xca
 870:	mov	r2, #20
 874:	mvn	r4, #0
 878:	str	r0, [sp]
 87c:	movt	r1, #0
 880:	movt	r3, #0
 884:	mvn	r0, #0
 888:	bl	0 <coda_set_error>
 88c:	b	8e8 <coda_detection_tree_add_rule+0x56c>
 890:	mov	r4, #0
 894:	str	r1, [r8, #8]
 898:	b	8e8 <coda_detection_tree_add_rule+0x56c>
 89c:	mov	r0, r5
 8a0:	b	8e0 <coda_detection_tree_add_rule+0x564>
 8a4:	movw	r1, #0
 8a8:	movw	r2, #0
 8ac:	mvn	r0, #0
 8b0:	movw	r3, #383	; 0x17f
 8b4:	mvn	r4, #0
 8b8:	movt	r1, #0
 8bc:	movt	r2, #0
 8c0:	bl	0 <coda_set_error>
 8c4:	b	8e8 <coda_detection_tree_add_rule+0x56c>
 8c8:	movw	r1, #0
 8cc:	movw	r3, #0
 8d0:	movw	r0, #331	; 0x14b
 8d4:	mov	r2, r7
 8d8:	b	874 <coda_detection_tree_add_rule+0x4f8>
 8dc:	ldr	r0, [sp, #8]
 8e0:	bl	318 <delete_detection_node>
 8e4:	mvn	r4, #0
 8e8:	mov	r0, r4
 8ec:	sub	sp, fp, #48	; 0x30
 8f0:	vpop	{d8-d9}
 8f4:	add	sp, sp, #4
 8f8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8fc:	mov	r0, r8
 900:	b	8e0 <coda_detection_tree_add_rule+0x564>

00000904 <coda_evaluate_detection_node>:
 904:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
 908:	add	fp, sp, #24
 90c:	sub	sp, sp, #528	; 0x210
 910:	mov	r4, r2
 914:	mov	r5, r0
 918:	add	r0, sp, #8
 91c:	mov	r2, #520	; 0x208
 920:	bl	0 <memcpy>
 924:	mov	r0, #0
 928:	cmp	r5, #0
 92c:	str	r0, [r4]
 930:	beq	9f4 <coda_evaluate_detection_node+0xf0>
 934:	ldr	r1, [r5]
 938:	cmp	r1, #0
 93c:	beq	95c <coda_evaluate_detection_node+0x58>
 940:	add	r0, sp, #8
 944:	bl	0 <coda_cursor_goto>
 948:	cmp	r0, #0
 94c:	beq	9a0 <coda_evaluate_detection_node+0x9c>
 950:	ldr	r0, [pc, #168]	; a00 <coda_evaluate_detection_node+0xfc>
 954:	ldr	r1, [pc, r0]
 958:	b	984 <coda_evaluate_detection_node+0x80>
 95c:	ldr	r0, [r5, #4]
 960:	cmp	r0, #0
 964:	beq	9a0 <coda_evaluate_detection_node+0x9c>
 968:	add	r1, sp, #8
 96c:	add	r2, sp, #4
 970:	bl	0 <coda_expression_eval_bool>
 974:	cmp	r0, #0
 978:	beq	994 <coda_evaluate_detection_node+0x90>
 97c:	ldr	r0, [pc, #128]	; a04 <coda_evaluate_detection_node+0x100>
 980:	ldr	r1, [pc, r0]
 984:	mov	r2, #0
 988:	bl	0 <__aeabi_read_tp>
 98c:	str	r2, [r0, r1]
 990:	b	9f4 <coda_evaluate_detection_node+0xf0>
 994:	ldr	r0, [sp, #4]
 998:	cmp	r0, #0
 99c:	beq	9f4 <coda_evaluate_detection_node+0xf0>
 9a0:	ldr	r0, [r5, #12]
 9a4:	cmp	r0, #1
 9a8:	blt	9e4 <coda_evaluate_detection_node+0xe0>
 9ac:	mov	r7, #0
 9b0:	add	r6, sp, #8
 9b4:	ldr	r0, [r5, #16]
 9b8:	mov	r1, r6
 9bc:	mov	r2, r4
 9c0:	ldr	r0, [r0, r7, lsl #2]
 9c4:	bl	904 <coda_evaluate_detection_node>
 9c8:	ldr	r0, [r4]
 9cc:	cmp	r0, #0
 9d0:	bne	9f4 <coda_evaluate_detection_node+0xf0>
 9d4:	ldr	r0, [r5, #12]
 9d8:	add	r7, r7, #1
 9dc:	cmp	r7, r0
 9e0:	blt	9b4 <coda_evaluate_detection_node+0xb0>
 9e4:	ldr	r0, [r5, #8]
 9e8:	cmp	r0, #0
 9ec:	ldrne	r0, [r0, #8]
 9f0:	strne	r0, [r4]
 9f4:	mov	r0, #0
 9f8:	sub	sp, fp, #24
 9fc:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
 a00:	.word	0x000000a4
 a04:	.word	0x0000007c

00000a08 <detection_node_add_node>:
 a08:	push	{r4, r5, r6, sl, fp, lr}
 a0c:	add	fp, sp, #16
 a10:	sub	sp, sp, #8
 a14:	mov	r5, r1
 a18:	ldr	r1, [r0, #12]
 a1c:	mov	r4, r0
 a20:	tst	r1, #15
 a24:	beq	a30 <detection_node_add_node+0x28>
 a28:	ldr	r0, [r4, #16]
 a2c:	b	a50 <detection_node_add_node+0x48>
 a30:	ldr	r0, [r4, #16]
 a34:	mov	r6, #64	; 0x40
 a38:	add	r1, r6, r1, lsl #2
 a3c:	bl	0 <realloc>
 a40:	cmp	r0, #0
 a44:	beq	ab4 <detection_node_add_node+0xac>
 a48:	str	r0, [r4, #16]
 a4c:	ldr	r1, [r4, #12]
 a50:	str	r5, [r0, r1, lsl #2]
 a54:	add	r0, r1, #1
 a58:	mov	r5, #0
 a5c:	cmp	r1, #1
 a60:	str	r0, [r4, #12]
 a64:	blt	ae0 <detection_node_add_node+0xd8>
 a68:	ldr	r2, [r4, #16]
 a6c:	ldr	r0, [r2, r1, lsl #2]
 a70:	ldr	r3, [r0]
 a74:	cmp	r3, #0
 a78:	addne	r3, r2, r1, lsl #2
 a7c:	ldrne	r3, [r3, #-4]
 a80:	ldrne	r6, [r3, #4]
 a84:	cmpne	r6, #0
 a88:	beq	ae0 <detection_node_add_node+0xd8>
 a8c:	str	r3, [r2, r1, lsl #2]
 a90:	sub	r6, r1, #1
 a94:	ldr	r2, [r4, #16]
 a98:	add	r1, r2, r1, lsl #2
 a9c:	str	r0, [r1, #-4]
 aa0:	add	r0, r6, #1
 aa4:	mov	r1, r6
 aa8:	cmp	r0, #1
 aac:	bgt	a68 <detection_node_add_node+0x60>
 ab0:	b	ae0 <detection_node_add_node+0xd8>
 ab4:	ldr	r0, [r4, #12]
 ab8:	mov	r1, #226	; 0xe2
 abc:	movw	r3, #0
 ac0:	mvn	r5, #0
 ac4:	str	r1, [sp]
 ac8:	movw	r1, #0
 acc:	movt	r3, #0
 ad0:	movt	r1, #0
 ad4:	add	r2, r6, r0, lsl #2
 ad8:	mvn	r0, #0
 adc:	bl	0 <coda_set_error>
 ae0:	mov	r0, r5
 ae4:	sub	sp, fp, #16
 ae8:	pop	{r4, r5, r6, sl, fp, pc}
