
../repos/stcorp-coda-3a25f25/CMakeFiles/coda.dir/libcoda/coda-bin.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <coda_bin_product_open>:
   0:	mov	ip, sp
   4:	sub	sp, sp, #24
   8:	str	ip, [sp, #8]
   c:	str	lr, [sp, #12]
  10:	str	r4, [sp, #16]
  14:	str	r5, [sp, #20]
  18:	mov	r4, r0
  1c:	mov	r2, #0
  20:	str	r2, [r4, #52]	; 0x34
  24:	mvn	r1, #0
  28:	str	r1, [r4, #56]	; 0x38
  2c:	ldr	ip, [pc, #392]	; 1bc <coda_bin_product_open+0x1bc>
  30:	ldr	r2, [ip]
  34:	cmp	r2, #0
  38:	beq	78 <coda_bin_product_open+0x78>
  3c:	ldr	r3, [r4, #8]
  40:	ldr	r1, [r4, #12]
  44:	mov	ip, #0
  48:	cmp	r1, ip
  4c:	bne	64 <coda_bin_product_open+0x64>
  50:	mov	ip, #0
  54:	cmp	r3, ip
  58:	movhi	r3, #1
  5c:	movls	r3, #0
  60:	b	7c <coda_bin_product_open+0x7c>
  64:	mov	r0, #0
  68:	cmp	r1, r0
  6c:	movgt	r3, #1
  70:	movle	r3, #0
  74:	b	7c <coda_bin_product_open+0x7c>
  78:	mov	r3, #0
  7c:	cmp	r3, #0
  80:	beq	160 <coda_bin_product_open+0x160>
  84:	mov	r1, #1
  88:	str	r1, [r4, #52]	; 0x34
  8c:	ldr	r0, [r4]
  90:	mov	r1, #0
  94:	bl	0 <open>
  98:	mov	r5, r0
  9c:	cmp	r5, #0
  a0:	bge	d4 <coda_bin_product_open+0xd4>
  a4:	bl	0 <__errno_location>
  a8:	ldr	r0, [r0]
  ac:	bl	0 <strerror>
  b0:	mvn	r3, #20
  b4:	ldr	r1, [pc, #264]	; 1c4 <coda_bin_product_open+0x1c4>
  b8:	ldr	r2, [r4]
  bc:	mov	ip, r0
  c0:	mov	r0, r3
  c4:	mov	r3, ip
  c8:	bl	0 <coda_set_error>
  cc:	mvn	r0, #0
  d0:	b	1a8 <coda_bin_product_open+0x1a8>
  d4:	mov	r0, #0
  d8:	ldr	r1, [r4, #8]
  dc:	mov	r2, #1
  e0:	mov	r3, #1
  e4:	mov	ip, #0
  e8:	str	ip, [sp, #4]
  ec:	str	r5, [sp]
  f0:	bl	0 <mmap>
  f4:	str	r0, [r4, #48]	; 0x30
  f8:	ldr	ip, [r4, #48]	; 0x30
  fc:	cmn	ip, #1
 100:	bne	144 <coda_bin_product_open+0x144>
 104:	bl	0 <__errno_location>
 108:	ldr	r0, [r0]
 10c:	bl	0 <strerror>
 110:	mvn	r3, #20
 114:	ldr	r1, [pc, #164]	; 1c0 <coda_bin_product_open+0x1c0>
 118:	ldr	r2, [r4]
 11c:	mov	ip, r0
 120:	mov	r0, r3
 124:	mov	r3, ip
 128:	bl	0 <coda_set_error>
 12c:	mov	r0, #0
 130:	str	r0, [r4, #48]	; 0x30
 134:	mov	r0, r5
 138:	bl	0 <close>
 13c:	mvn	r0, #0
 140:	b	1a8 <coda_bin_product_open+0x1a8>
 144:	mov	r0, r5
 148:	bl	0 <close>
 14c:	ldr	r3, [r4, #8]
 150:	ldr	ip, [r4, #12]
 154:	str	r3, [r4, #40]	; 0x28
 158:	str	ip, [r4, #44]	; 0x2c
 15c:	b	1a4 <coda_bin_product_open+0x1a4>
 160:	mov	r1, #0
 164:	ldr	r0, [r4]
 168:	bl	0 <open>
 16c:	str	r0, [r4, #56]	; 0x38
 170:	ldr	r1, [r4, #56]	; 0x38
 174:	cmp	r1, #0
 178:	bge	1a4 <coda_bin_product_open+0x1a4>
 17c:	bl	0 <__errno_location>
 180:	ldr	r0, [r0]
 184:	bl	0 <strerror>
 188:	mov	r3, r0
 18c:	mvn	r0, #20
 190:	ldr	r1, [pc, #44]	; 1c4 <coda_bin_product_open+0x1c4>
 194:	ldr	r2, [r4]
 198:	bl	0 <coda_set_error>
 19c:	mvn	r0, #0
 1a0:	b	1a8 <coda_bin_product_open+0x1a8>
 1a4:	mov	r0, #0
 1a8:	ldr	r4, [sp, #16]
 1ac:	ldr	r5, [sp, #20]
 1b0:	ldr	lr, [sp, #12]
 1b4:	add	sp, sp, #24
 1b8:	bx	lr
 1bc:	.word	0x00000000
 1c0:	.word	0x000000b2
 1c4:	.word	0x0000003e

000001c8 <coda_bin_product_close>:
 1c8:	mov	ip, sp
 1cc:	sub	sp, sp, #16
 1d0:	str	ip, [sp]
 1d4:	str	lr, [sp, #4]
 1d8:	str	r4, [sp, #8]
 1dc:	mov	r4, r0
 1e0:	ldr	r1, [r4, #52]	; 0x34
 1e4:	cmp	r1, #0
 1e8:	beq	218 <coda_bin_product_close+0x50>
 1ec:	ldr	r0, [r4, #48]	; 0x30
 1f0:	cmp	r0, #0
 1f4:	beq	20c <coda_bin_product_close+0x44>
 1f8:	ldr	r0, [r4, #48]	; 0x30
 1fc:	ldr	r1, [r4, #8]
 200:	bl	0 <munmap>
 204:	mov	ip, #0
 208:	str	ip, [r4, #48]	; 0x30
 20c:	mov	r0, #0
 210:	str	r0, [r4, #52]	; 0x34
 214:	b	234 <coda_bin_product_close+0x6c>
 218:	ldr	r2, [r4, #56]	; 0x38
 21c:	cmp	r2, #0
 220:	blt	234 <coda_bin_product_close+0x6c>
 224:	ldr	r0, [r4, #56]	; 0x38
 228:	bl	0 <close>
 22c:	mvn	r1, #0
 230:	str	r1, [r4, #56]	; 0x38
 234:	mov	r0, #0
 238:	ldr	r4, [sp, #8]
 23c:	ldr	lr, [sp, #4]
 240:	add	sp, sp, #16
 244:	bx	lr

00000248 <coda_bin_open>:
 248:	mov	ip, sp
 24c:	sub	sp, sp, #40	; 0x28
 250:	str	ip, [sp, #4]
 254:	str	lr, [sp, #8]
 258:	str	r4, [sp, #16]
 25c:	str	r5, [sp, #20]
 260:	str	r6, [sp, #24]
 264:	str	r7, [sp, #28]
 268:	str	r8, [sp, #32]
 26c:	ldr	r5, [ip]
 270:	mov	r7, r3
 274:	mov	r8, r2
 278:	mov	r6, r0
 27c:	mov	r0, #64	; 0x40
 280:	bl	0 <malloc>
 284:	mov	r4, r0
 288:	cmp	r4, #0
 28c:	bne	2b4 <coda_bin_open+0x6c>
 290:	mvn	r0, #0
 294:	ldr	r1, [pc, #292]	; 3c0 <coda_bin_open+0x178>
 298:	mov	r2, #64	; 0x40
 29c:	ldr	r3, [pc, #280]	; 3bc <coda_bin_open+0x174>
 2a0:	mov	r4, #241	; 0xf1
 2a4:	str	r4, [sp]
 2a8:	bl	0 <coda_set_error>
 2ac:	mvn	r0, #0
 2b0:	b	39c <coda_bin_open+0x154>
 2b4:	mov	r2, #0
 2b8:	str	r2, [r4]
 2bc:	str	r8, [r4, #8]
 2c0:	str	r7, [r4, #12]
 2c4:	mov	r3, #1
 2c8:	str	r3, [r4, #16]
 2cc:	mov	r2, #0
 2d0:	str	r2, [r4, #20]
 2d4:	mov	ip, #0
 2d8:	str	ip, [r4, #24]
 2dc:	mov	r0, #0
 2e0:	str	r0, [r4, #28]
 2e4:	mov	r3, #0
 2e8:	str	r3, [r4, #32]
 2ec:	mov	r1, #0
 2f0:	mov	r0, #0
 2f4:	str	r0, [r4, #40]	; 0x28
 2f8:	str	r1, [r4, #44]	; 0x2c
 2fc:	mov	ip, #0
 300:	str	ip, [r4, #48]	; 0x30
 304:	mov	ip, #0
 308:	str	ip, [r4, #52]	; 0x34
 30c:	mvn	r0, #0
 310:	str	r0, [r4, #56]	; 0x38
 314:	bl	0 <coda_type_raw_file_singleton>
 318:	str	r0, [r4, #20]
 31c:	ldr	r0, [r4, #20]
 320:	cmp	r0, #0
 324:	bne	338 <coda_bin_open+0xf0>
 328:	mov	r0, r4
 32c:	bl	47c <coda_bin_close>
 330:	mvn	r0, #0
 334:	b	39c <coda_bin_open+0x154>
 338:	mov	r0, r6
 33c:	bl	0 <strdup>
 340:	str	r0, [r4]
 344:	ldr	r3, [r4]
 348:	cmp	r3, #0
 34c:	bne	374 <coda_bin_open+0x12c>
 350:	mvn	r0, #0
 354:	ldr	r1, [pc, #104]	; 3c4 <coda_bin_open+0x17c>
 358:	ldr	r2, [pc, #92]	; 3bc <coda_bin_open+0x174>
 35c:	mov	r3, #268	; 0x10c
 360:	bl	0 <coda_set_error>
 364:	mov	r0, r4
 368:	bl	47c <coda_bin_close>
 36c:	mvn	r0, #0
 370:	b	39c <coda_bin_open+0x154>
 374:	mov	r0, r4
 378:	bl	0 <coda_bin_product_open>
 37c:	cmp	r0, #0
 380:	beq	394 <coda_bin_open+0x14c>
 384:	mov	r0, r4
 388:	bl	47c <coda_bin_close>
 38c:	mvn	r0, #0
 390:	b	39c <coda_bin_open+0x154>
 394:	str	r4, [r5]
 398:	mov	r0, #0
 39c:	ldr	r4, [sp, #16]
 3a0:	ldr	r5, [sp, #20]
 3a4:	ldr	r6, [sp, #24]
 3a8:	ldr	r7, [sp, #28]
 3ac:	ldr	r8, [sp, #32]
 3b0:	ldr	lr, [sp, #8]
 3b4:	add	sp, sp, #40	; 0x28
 3b8:	bx	lr
 3bc:	.word	0x0000005a
 3c0:	.word	0x00000102
 3c4:	.word	0x00000137

000003c8 <coda_bin_reopen_with_definition>:
 3c8:	mov	ip, sp
 3cc:	sub	sp, sp, #16
 3d0:	str	ip, [sp]
 3d4:	str	lr, [sp, #4]
 3d8:	str	r4, [sp, #8]
 3dc:	str	r5, [sp, #12]
 3e0:	mov	r5, r1
 3e4:	ldr	r4, [r0]
 3e8:	cmp	r5, #0
 3ec:	bne	404 <coda_bin_reopen_with_definition+0x3c>
 3f0:	ldr	r0, [pc, #128]	; 478 <coda_bin_reopen_with_definition+0xb0>
 3f4:	ldr	r1, [pc, #116]	; 470 <coda_bin_reopen_with_definition+0xa8>
 3f8:	mov	r2, #288	; 0x120
 3fc:	ldr	r3, [pc, #112]	; 474 <coda_bin_reopen_with_definition+0xac>
 400:	bl	0 <__assert_fail>
 404:	ldr	r2, [r4, #16]
 408:	cmp	r2, #1
 40c:	beq	424 <coda_bin_reopen_with_definition+0x5c>
 410:	ldr	r0, [pc, #84]	; 46c <coda_bin_reopen_with_definition+0xa4>
 414:	ldr	r1, [pc, #84]	; 470 <coda_bin_reopen_with_definition+0xa8>
 418:	movw	r2, #289	; 0x121
 41c:	ldr	r3, [pc, #80]	; 474 <coda_bin_reopen_with_definition+0xac>
 420:	bl	0 <__assert_fail>
 424:	ldr	ip, [r5]
 428:	cmp	ip, #1
 42c:	beq	444 <coda_bin_reopen_with_definition+0x7c>
 430:	ldr	r0, [pc, #48]	; 468 <coda_bin_reopen_with_definition+0xa0>
 434:	ldr	r1, [pc, #52]	; 470 <coda_bin_reopen_with_definition+0xa8>
 438:	movw	r2, #290	; 0x122
 43c:	ldr	r3, [pc, #48]	; 474 <coda_bin_reopen_with_definition+0xac>
 440:	bl	0 <__assert_fail>
 444:	ldr	r0, [r5, #28]
 448:	str	r0, [r4, #20]
 44c:	str	r5, [r4, #24]
 450:	mov	r0, #0
 454:	ldr	r4, [sp, #8]
 458:	ldr	r5, [sp, #12]
 45c:	ldr	lr, [sp, #4]
 460:	add	sp, sp, #16
 464:	bx	lr
 468:	.word	0x000000d9
 46c:	.word	0x00000000
 470:	.word	0x0000005a
 474:	.word	0x00000173
 478:	.word	0x0000002b

0000047c <coda_bin_close>:
 47c:	mov	ip, sp
 480:	sub	sp, sp, #16
 484:	str	ip, [sp]
 488:	str	lr, [sp, #4]
 48c:	str	r4, [sp, #8]
 490:	mov	r4, r0
 494:	mov	r0, r4
 498:	bl	1c8 <coda_bin_product_close>
 49c:	cmp	r0, #0
 4a0:	beq	4ac <coda_bin_close+0x30>
 4a4:	mvn	r0, #0
 4a8:	b	4cc <coda_bin_close+0x50>
 4ac:	ldr	r0, [r4]
 4b0:	cmp	r0, #0
 4b4:	beq	4c0 <coda_bin_close+0x44>
 4b8:	ldr	r0, [r4]
 4bc:	bl	0 <free>
 4c0:	mov	r0, r4
 4c4:	bl	0 <free>
 4c8:	mov	r0, #0
 4cc:	ldr	r4, [sp, #8]
 4d0:	ldr	lr, [sp, #4]
 4d4:	add	sp, sp, #16
 4d8:	bx	lr
