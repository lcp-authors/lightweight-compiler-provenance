
../compcert-repos/stcorp-coda-3a25f25/CMakeFiles/coda_static.dir/libcoda/coda-product.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <coda_recognize_file>:
       0:	push	{fp, lr}
       4:	mov	fp, sp
       8:	sub	sp, sp, #48	; 0x30
       c:	ldr	ip, [fp, #12]
      10:	ldr	lr, [fp, #8]
      14:	str	r0, [fp, #-8]
      18:	str	r1, [fp, #-12]
      1c:	str	r2, [fp, #-16]
      20:	str	r3, [fp, #-20]	; 0xffffffec
      24:	movw	r0, #0
      28:	str	r0, [sp, #24]
      2c:	ldr	r1, [fp, #-8]
      30:	str	r0, [sp, #16]
      34:	mov	r0, r1
      38:	add	r1, sp, #20
      3c:	ldr	r2, [sp, #16]
      40:	str	lr, [sp, #12]
      44:	str	ip, [sp, #8]
      48:	bl	1ec <open_file>
      4c:	cmp	r0, #0
      50:	beq	60 <coda_recognize_file+0x60>
      54:	mvn	r0, #0
      58:	str	r0, [fp, #-4]
      5c:	b	1e0 <coda_recognize_file+0x1e0>
      60:	ldr	r0, [sp, #20]
      64:	add	r1, sp, #24
      68:	bl	0 <coda_data_dictionary_find_definition_for_product>
      6c:	cmp	r0, #0
      70:	beq	8c <coda_recognize_file+0x8c>
      74:	ldr	r0, [sp, #20]
      78:	bl	2dc <coda_close>
      7c:	mvn	lr, #0
      80:	str	lr, [fp, #-4]
      84:	str	r0, [sp, #4]
      88:	b	1e0 <coda_recognize_file+0x1e0>
      8c:	ldr	r0, [fp, #-12]
      90:	movw	r1, #0
      94:	cmp	r0, r1
      98:	beq	b4 <coda_recognize_file+0xb4>
      9c:	ldr	r0, [sp, #20]
      a0:	ldr	r1, [r0, #8]
      a4:	ldr	r0, [r0, #12]
      a8:	ldr	r2, [fp, #-12]
      ac:	str	r0, [r2, #4]
      b0:	str	r1, [r2]
      b4:	ldr	r0, [sp, #24]
      b8:	movw	r1, #0
      bc:	cmp	r0, r1
      c0:	bne	13c <coda_recognize_file+0x13c>
      c4:	ldr	r0, [fp, #-16]
      c8:	movw	r1, #0
      cc:	cmp	r0, r1
      d0:	beq	e4 <coda_recognize_file+0xe4>
      d4:	ldr	r0, [sp, #20]
      d8:	ldr	r0, [r0, #16]
      dc:	ldr	r1, [fp, #-16]
      e0:	str	r0, [r1]
      e4:	ldr	r0, [fp, #-20]	; 0xffffffec
      e8:	movw	r1, #0
      ec:	cmp	r0, r1
      f0:	beq	100 <coda_recognize_file+0x100>
      f4:	ldr	r0, [fp, #-20]	; 0xffffffec
      f8:	movw	r1, #0
      fc:	str	r1, [r0]
     100:	ldr	r0, [fp, #8]
     104:	movw	r1, #0
     108:	cmp	r0, r1
     10c:	beq	11c <coda_recognize_file+0x11c>
     110:	ldr	r0, [fp, #8]
     114:	movw	r1, #0
     118:	str	r1, [r0]
     11c:	ldr	r0, [fp, #12]
     120:	movw	r1, #0
     124:	cmp	r0, r1
     128:	beq	138 <coda_recognize_file+0x138>
     12c:	ldr	r0, [fp, #12]
     130:	mvn	r1, #0
     134:	str	r1, [r0]
     138:	b	1cc <coda_recognize_file+0x1cc>
     13c:	ldr	r0, [fp, #-16]
     140:	movw	r1, #0
     144:	cmp	r0, r1
     148:	beq	15c <coda_recognize_file+0x15c>
     14c:	ldr	r0, [sp, #24]
     150:	ldr	r0, [r0]
     154:	ldr	r1, [fp, #-16]
     158:	str	r0, [r1]
     15c:	ldr	r0, [fp, #-20]	; 0xffffffec
     160:	movw	r1, #0
     164:	cmp	r0, r1
     168:	beq	184 <coda_recognize_file+0x184>
     16c:	ldr	r0, [sp, #24]
     170:	ldr	r0, [r0, #44]	; 0x2c
     174:	ldr	r0, [r0, #20]
     178:	ldr	r0, [r0]
     17c:	ldr	r1, [fp, #-20]	; 0xffffffec
     180:	str	r0, [r1]
     184:	ldr	r0, [fp, #8]
     188:	movw	r1, #0
     18c:	cmp	r0, r1
     190:	beq	1a8 <coda_recognize_file+0x1a8>
     194:	ldr	r0, [sp, #24]
     198:	ldr	r0, [r0, #44]	; 0x2c
     19c:	ldr	r0, [r0]
     1a0:	ldr	r1, [fp, #8]
     1a4:	str	r0, [r1]
     1a8:	ldr	r0, [fp, #12]
     1ac:	movw	r1, #0
     1b0:	cmp	r0, r1
     1b4:	beq	1c8 <coda_recognize_file+0x1c8>
     1b8:	ldr	r0, [sp, #24]
     1bc:	ldr	r0, [r0, #4]
     1c0:	ldr	r1, [fp, #12]
     1c4:	str	r0, [r1]
     1c8:	b	1cc <coda_recognize_file+0x1cc>
     1cc:	ldr	r0, [sp, #20]
     1d0:	bl	2dc <coda_close>
     1d4:	movw	lr, #0
     1d8:	str	lr, [fp, #-4]
     1dc:	str	r0, [sp]
     1e0:	ldr	r0, [fp, #-4]
     1e4:	mov	sp, fp
     1e8:	pop	{fp, pc}

000001ec <open_file>:
     1ec:	push	{fp, lr}
     1f0:	mov	fp, sp
     1f4:	sub	sp, sp, #48	; 0x30
     1f8:	str	r0, [fp, #-8]
     1fc:	str	r1, [fp, #-12]
     200:	str	r2, [fp, #-16]
     204:	ldr	r0, [fp, #-8]
     208:	add	r1, sp, #16
     20c:	bl	12d8 <get_file_size>
     210:	cmp	r0, #0
     214:	beq	224 <open_file+0x38>
     218:	mvn	r0, #0
     21c:	str	r0, [fp, #-4]
     220:	b	2d0 <open_file+0xe4>
     224:	ldr	r0, [fp, #-8]
     228:	ldr	r2, [sp, #16]
     22c:	ldr	r3, [sp, #20]
     230:	mov	r1, sp
     234:	sub	ip, fp, #20
     238:	str	ip, [r1]
     23c:	bl	0 <coda_bin_open>
     240:	cmp	r0, #0
     244:	beq	254 <open_file+0x68>
     248:	mvn	r0, #0
     24c:	str	r0, [fp, #-4]
     250:	b	2d0 <open_file+0xe4>
     254:	ldr	r0, [fp, #-16]
     258:	cmp	r0, #0
     25c:	beq	26c <open_file+0x80>
     260:	movw	r0, #1
     264:	str	r0, [sp, #12]
     268:	b	29c <open_file+0xb0>
     26c:	ldr	r0, [fp, #-20]	; 0xffffffec
     270:	add	r1, sp, #12
     274:	bl	1404 <get_format>
     278:	cmp	r0, #0
     27c:	beq	298 <open_file+0xac>
     280:	ldr	r0, [fp, #-20]	; 0xffffffec
     284:	bl	2dc <coda_close>
     288:	mvn	lr, #0
     28c:	str	lr, [fp, #-4]
     290:	str	r0, [sp, #8]
     294:	b	2d0 <open_file+0xe4>
     298:	b	29c <open_file+0xb0>
     29c:	ldr	r1, [sp, #12]
     2a0:	sub	r0, fp, #20
     2a4:	bl	1a94 <reopen_with_backend>
     2a8:	cmp	r0, #0
     2ac:	beq	2bc <open_file+0xd0>
     2b0:	mvn	r0, #0
     2b4:	str	r0, [fp, #-4]
     2b8:	b	2d0 <open_file+0xe4>
     2bc:	ldr	r0, [fp, #-20]	; 0xffffffec
     2c0:	ldr	r1, [fp, #-12]
     2c4:	str	r0, [r1]
     2c8:	movw	r0, #0
     2cc:	str	r0, [fp, #-4]
     2d0:	ldr	r0, [fp, #-4]
     2d4:	mov	sp, fp
     2d8:	pop	{fp, pc}

000002dc <coda_close>:
     2dc:	push	{fp, lr}
     2e0:	mov	fp, sp
     2e4:	sub	sp, sp, #16
     2e8:	str	r0, [sp, #8]
     2ec:	ldr	r0, [sp, #8]
     2f0:	movw	r1, #0
     2f4:	cmp	r0, r1
     2f8:	bne	324 <coda_close+0x48>
     2fc:	mvn	r0, #99	; 0x63
     300:	movw	r1, #0
     304:	movt	r1, #0
     308:	movw	r2, #0
     30c:	movt	r2, #0
     310:	movw	r3, #777	; 0x309
     314:	bl	0 <coda_set_error>
     318:	mvn	r0, #0
     31c:	str	r0, [fp, #-4]
     320:	b	504 <coda_close+0x228>
     324:	ldr	r0, [sp, #8]
     328:	ldr	r0, [r0, #28]
     32c:	movw	r1, #0
     330:	cmp	r0, r1
     334:	beq	350 <coda_close+0x74>
     338:	ldr	r0, [sp, #8]
     33c:	ldr	r0, [r0, #28]
     340:	bl	0 <free>
     344:	ldr	r0, [sp, #8]
     348:	movw	lr, #0
     34c:	str	lr, [r0, #28]
     350:	ldr	r0, [sp, #8]
     354:	ldr	r0, [r0, #32]
     358:	movw	r1, #0
     35c:	cmp	r0, r1
     360:	beq	3e8 <coda_close+0x10c>
     364:	movw	r0, #0
     368:	str	r0, [sp, #4]
     36c:	ldr	r0, [sp, #4]
     370:	ldr	r1, [sp, #8]
     374:	ldr	r1, [r1, #24]
     378:	ldr	r1, [r1, #32]
     37c:	cmp	r0, r1
     380:	bge	3d0 <coda_close+0xf4>
     384:	ldr	r0, [sp, #8]
     388:	ldr	r0, [r0, #32]
     38c:	ldr	r1, [sp, #4]
     390:	add	r0, r0, r1, lsl #2
     394:	ldr	r0, [r0]
     398:	movw	r1, #0
     39c:	cmp	r0, r1
     3a0:	beq	3bc <coda_close+0xe0>
     3a4:	ldr	r0, [sp, #8]
     3a8:	ldr	r0, [r0, #32]
     3ac:	ldr	r1, [sp, #4]
     3b0:	add	r0, r0, r1, lsl #2
     3b4:	ldr	r0, [r0]
     3b8:	bl	0 <free>
     3bc:	b	3c0 <coda_close+0xe4>
     3c0:	ldr	r0, [sp, #4]
     3c4:	add	r0, r0, #1
     3c8:	str	r0, [sp, #4]
     3cc:	b	36c <coda_close+0x90>
     3d0:	ldr	r0, [sp, #8]
     3d4:	ldr	r0, [r0, #32]
     3d8:	bl	0 <free>
     3dc:	ldr	r0, [sp, #8]
     3e0:	movw	lr, #0
     3e4:	str	lr, [r0, #32]
     3e8:	ldr	r0, [sp, #8]
     3ec:	ldr	r0, [r0, #16]
     3f0:	cmp	r0, #9
     3f4:	str	r0, [sp]
     3f8:	bhi	4e4 <coda_close+0x208>
     3fc:	add	r0, pc, #8
     400:	ldr	r1, [sp]
     404:	ldr	r0, [r0, r1, lsl #2]
     408:	mov	pc, r0
     40c:	.word	0x00000434
     410:	.word	0x00000444
     414:	.word	0x00000454
     418:	.word	0x00000494
     41c:	.word	0x000004ac
     420:	.word	0x00000464
     424:	.word	0x00000474
     428:	.word	0x00000484
     42c:	.word	0x000004c4
     430:	.word	0x000004d4
     434:	ldr	r0, [sp, #8]
     438:	bl	0 <coda_ascii_close>
     43c:	str	r0, [fp, #-4]
     440:	b	504 <coda_close+0x228>
     444:	ldr	r0, [sp, #8]
     448:	bl	0 <coda_bin_close>
     44c:	str	r0, [fp, #-4]
     450:	b	504 <coda_close+0x228>
     454:	ldr	r0, [sp, #8]
     458:	bl	0 <coda_xml_close>
     45c:	str	r0, [fp, #-4]
     460:	b	504 <coda_close+0x228>
     464:	ldr	r0, [sp, #8]
     468:	bl	0 <coda_cdf_close>
     46c:	str	r0, [fp, #-4]
     470:	b	504 <coda_close+0x228>
     474:	ldr	r0, [sp, #8]
     478:	bl	0 <coda_netcdf_close>
     47c:	str	r0, [fp, #-4]
     480:	b	504 <coda_close+0x228>
     484:	ldr	r0, [sp, #8]
     488:	bl	0 <coda_grib_close>
     48c:	str	r0, [fp, #-4]
     490:	b	504 <coda_close+0x228>
     494:	mvn	r0, #10
     498:	movw	r1, #0
     49c:	bl	0 <coda_set_error>
     4a0:	mvn	r0, #0
     4a4:	str	r0, [fp, #-4]
     4a8:	b	504 <coda_close+0x228>
     4ac:	mvn	r0, #12
     4b0:	movw	r1, #0
     4b4:	bl	0 <coda_set_error>
     4b8:	mvn	r0, #0
     4bc:	str	r0, [fp, #-4]
     4c0:	b	504 <coda_close+0x228>
     4c4:	ldr	r0, [sp, #8]
     4c8:	bl	0 <coda_rinex_close>
     4cc:	str	r0, [fp, #-4]
     4d0:	b	504 <coda_close+0x228>
     4d4:	ldr	r0, [sp, #8]
     4d8:	bl	0 <coda_sp3_close>
     4dc:	str	r0, [fp, #-4]
     4e0:	b	504 <coda_close+0x228>
     4e4:	movw	r0, #0
     4e8:	movt	r0, #0
     4ec:	movw	r1, #0
     4f0:	movt	r1, #0
     4f4:	movw	r2, #836	; 0x344
     4f8:	movw	r3, #0
     4fc:	movt	r3, #0
     500:	bl	0 <__assert_fail>
     504:	ldr	r0, [fp, #-4]
     508:	mov	sp, fp
     50c:	pop	{fp, pc}

00000510 <coda_open>:
     510:	push	{fp, lr}
     514:	mov	fp, sp
     518:	sub	sp, sp, #32
     51c:	str	r0, [fp, #-8]
     520:	str	r1, [fp, #-12]
     524:	movw	r0, #0
     528:	str	r0, [sp, #16]
     52c:	ldr	r1, [fp, #-8]
     530:	cmp	r1, r0
     534:	bne	560 <coda_open+0x50>
     538:	mvn	r0, #99	; 0x63
     53c:	movw	r1, #0
     540:	movt	r1, #0
     544:	movw	r2, #0
     548:	movt	r2, #0
     54c:	movw	r3, #668	; 0x29c
     550:	bl	0 <coda_set_error>
     554:	mvn	r0, #0
     558:	str	r0, [fp, #-4]
     55c:	b	628 <coda_open+0x118>
     560:	ldr	r0, [fp, #-12]
     564:	movw	r1, #0
     568:	cmp	r0, r1
     56c:	bne	598 <coda_open+0x88>
     570:	mvn	r0, #99	; 0x63
     574:	movw	r1, #0
     578:	movt	r1, #0
     57c:	movw	r2, #0
     580:	movt	r2, #0
     584:	movw	r3, #673	; 0x2a1
     588:	bl	0 <coda_set_error>
     58c:	mvn	r0, #0
     590:	str	r0, [fp, #-4]
     594:	b	628 <coda_open+0x118>
     598:	ldr	r0, [fp, #-8]
     59c:	add	r1, sp, #12
     5a0:	movw	r2, #0
     5a4:	bl	1ec <open_file>
     5a8:	cmp	r0, #0
     5ac:	beq	5bc <coda_open+0xac>
     5b0:	mvn	r0, #0
     5b4:	str	r0, [fp, #-4]
     5b8:	b	628 <coda_open+0x118>
     5bc:	ldr	r0, [sp, #12]
     5c0:	add	r1, sp, #16
     5c4:	bl	0 <coda_data_dictionary_find_definition_for_product>
     5c8:	cmp	r0, #0
     5cc:	beq	5e8 <coda_open+0xd8>
     5d0:	ldr	r0, [sp, #12]
     5d4:	bl	2dc <coda_close>
     5d8:	mvn	lr, #0
     5dc:	str	lr, [fp, #-4]
     5e0:	str	r0, [sp, #8]
     5e4:	b	628 <coda_open+0x118>
     5e8:	ldr	r1, [sp, #16]
     5ec:	add	r0, sp, #12
     5f0:	bl	634 <set_definition>
     5f4:	cmp	r0, #0
     5f8:	beq	614 <coda_open+0x104>
     5fc:	ldr	r0, [sp, #12]
     600:	bl	2dc <coda_close>
     604:	mvn	lr, #0
     608:	str	lr, [fp, #-4]
     60c:	str	r0, [sp, #4]
     610:	b	628 <coda_open+0x118>
     614:	ldr	r0, [sp, #12]
     618:	ldr	r1, [fp, #-12]
     61c:	str	r0, [r1]
     620:	movw	r0, #0
     624:	str	r0, [fp, #-4]
     628:	ldr	r0, [fp, #-4]
     62c:	mov	sp, fp
     630:	pop	{fp, pc}

00000634 <set_definition>:
     634:	push	{fp, lr}
     638:	mov	fp, sp
     63c:	sub	sp, sp, #40	; 0x28
     640:	str	r0, [fp, #-8]
     644:	str	r1, [fp, #-12]
     648:	ldr	r0, [fp, #-12]
     64c:	movw	r1, #0
     650:	cmp	r0, r1
     654:	bne	6a4 <set_definition+0x70>
     658:	ldr	r0, [fp, #-8]
     65c:	ldr	r0, [r0]
     660:	ldr	r0, [r0, #16]
     664:	cmp	r0, #1
     668:	beq	680 <set_definition+0x4c>
     66c:	ldr	r0, [fp, #-8]
     670:	ldr	r0, [r0]
     674:	ldr	r0, [r0, #16]
     678:	cmp	r0, #0
     67c:	bne	698 <set_definition+0x64>
     680:	mvn	r0, #199	; 0xc7
     684:	movw	r1, #0
     688:	bl	0 <coda_set_error>
     68c:	mvn	r0, #0
     690:	str	r0, [fp, #-4]
     694:	b	95c <set_definition+0x328>
     698:	movw	r0, #0
     69c:	str	r0, [fp, #-4]
     6a0:	b	95c <set_definition+0x328>
     6a4:	ldr	r0, [fp, #-8]
     6a8:	ldr	r0, [r0]
     6ac:	ldr	r0, [r0, #16]
     6b0:	ldr	r1, [fp, #-12]
     6b4:	ldr	r1, [r1]
     6b8:	cmp	r0, r1
     6bc:	beq	734 <set_definition+0x100>
     6c0:	ldr	r0, [fp, #-8]
     6c4:	ldr	r0, [r0]
     6c8:	ldr	r0, [r0, #16]
     6cc:	cmp	r0, #1
     6d0:	bne	6e4 <set_definition+0xb0>
     6d4:	ldr	r0, [fp, #-12]
     6d8:	ldr	r0, [r0]
     6dc:	cmp	r0, #0
     6e0:	beq	734 <set_definition+0x100>
     6e4:	ldr	r0, [fp, #-12]
     6e8:	ldr	r0, [r0]
     6ec:	bl	0 <coda_type_get_format_name>
     6f0:	ldr	lr, [fp, #-8]
     6f4:	ldr	lr, [lr]
     6f8:	ldr	lr, [lr, #16]
     6fc:	str	r0, [sp, #16]
     700:	mov	r0, lr
     704:	bl	0 <coda_type_get_format_name>
     708:	mvn	lr, #199	; 0xc7
     70c:	str	r0, [sp, #12]
     710:	mov	r0, lr
     714:	movw	r1, #0
     718:	movt	r1, #0
     71c:	ldr	r2, [sp, #16]
     720:	ldr	r3, [sp, #12]
     724:	bl	0 <coda_set_error>
     728:	mvn	r0, #0
     72c:	str	r0, [fp, #-4]
     730:	b	95c <set_definition+0x328>
     734:	ldr	r0, [fp, #-12]
     738:	ldr	r0, [r0, #24]
     73c:	cmp	r0, #0
     740:	bne	764 <set_definition+0x130>
     744:	ldr	r0, [fp, #-12]
     748:	bl	0 <coda_read_product_definition>
     74c:	cmp	r0, #0
     750:	beq	760 <set_definition+0x12c>
     754:	mvn	r0, #0
     758:	str	r0, [fp, #-4]
     75c:	b	95c <set_definition+0x328>
     760:	b	764 <set_definition+0x130>
     764:	ldr	r0, [fp, #-12]
     768:	ldr	r0, [r0]
     76c:	cmp	r0, #0
     770:	str	r0, [sp, #8]
     774:	beq	79c <set_definition+0x168>
     778:	b	77c <set_definition+0x148>
     77c:	ldr	r0, [sp, #8]
     780:	cmp	r0, #1
     784:	beq	7c0 <set_definition+0x18c>
     788:	b	78c <set_definition+0x158>
     78c:	ldr	r0, [sp, #8]
     790:	cmp	r0, #2
     794:	beq	7e4 <set_definition+0x1b0>
     798:	b	808 <set_definition+0x1d4>
     79c:	ldr	r0, [fp, #-8]
     7a0:	ldr	r1, [fp, #-12]
     7a4:	bl	0 <coda_ascii_reopen_with_definition>
     7a8:	cmp	r0, #0
     7ac:	beq	7bc <set_definition+0x188>
     7b0:	mvn	r0, #0
     7b4:	str	r0, [fp, #-4]
     7b8:	b	95c <set_definition+0x328>
     7bc:	b	818 <set_definition+0x1e4>
     7c0:	ldr	r0, [fp, #-8]
     7c4:	ldr	r1, [fp, #-12]
     7c8:	bl	0 <coda_bin_reopen_with_definition>
     7cc:	cmp	r0, #0
     7d0:	beq	7e0 <set_definition+0x1ac>
     7d4:	mvn	r0, #0
     7d8:	str	r0, [fp, #-4]
     7dc:	b	95c <set_definition+0x328>
     7e0:	b	818 <set_definition+0x1e4>
     7e4:	ldr	r0, [fp, #-8]
     7e8:	ldr	r1, [fp, #-12]
     7ec:	bl	0 <coda_xml_reopen_with_definition>
     7f0:	cmp	r0, #0
     7f4:	beq	804 <set_definition+0x1d0>
     7f8:	mvn	r0, #0
     7fc:	str	r0, [fp, #-4]
     800:	b	95c <set_definition+0x328>
     804:	b	818 <set_definition+0x1e4>
     808:	ldr	r0, [fp, #-12]
     80c:	ldr	r1, [fp, #-8]
     810:	ldr	r1, [r1]
     814:	str	r0, [r1, #24]
     818:	ldr	r0, [fp, #-8]
     81c:	ldr	r0, [r0]
     820:	ldr	r0, [r0, #24]
     824:	ldr	r0, [r0, #32]
     828:	cmp	r0, #0
     82c:	ble	954 <set_definition+0x320>
     830:	ldr	r0, [fp, #-8]
     834:	ldr	r0, [r0]
     838:	ldr	r0, [r0, #24]
     83c:	ldr	r0, [r0, #32]
     840:	str	r0, [fp, #-16]
     844:	ldr	r0, [fp, #-16]
     848:	lsl	r0, r0, #2
     84c:	bl	0 <malloc>
     850:	ldr	lr, [fp, #-8]
     854:	ldr	lr, [lr]
     858:	str	r0, [lr, #28]
     85c:	ldr	r0, [fp, #-8]
     860:	ldr	r0, [r0]
     864:	ldr	r0, [r0, #28]
     868:	movw	lr, #0
     86c:	cmp	r0, lr
     870:	bne	8a8 <set_definition+0x274>
     874:	ldr	r0, [fp, #-16]
     878:	lsl	r2, r0, #2
     87c:	mvn	r0, #0
     880:	movw	r1, #0
     884:	movt	r1, #0
     888:	movw	r3, #0
     88c:	movt	r3, #0
     890:	movw	ip, #500	; 0x1f4
     894:	str	ip, [sp]
     898:	bl	0 <coda_set_error>
     89c:	mvn	r0, #0
     8a0:	str	r0, [fp, #-4]
     8a4:	b	95c <set_definition+0x328>
     8a8:	ldr	r0, [fp, #-16]
     8ac:	lsl	r0, r0, #2
     8b0:	bl	0 <malloc>
     8b4:	ldr	lr, [fp, #-8]
     8b8:	ldr	lr, [lr]
     8bc:	str	r0, [lr, #32]
     8c0:	ldr	r0, [fp, #-8]
     8c4:	ldr	r0, [r0]
     8c8:	ldr	r0, [r0, #32]
     8cc:	movw	lr, #0
     8d0:	cmp	r0, lr
     8d4:	bne	90c <set_definition+0x2d8>
     8d8:	ldr	r0, [fp, #-16]
     8dc:	lsl	r2, r0, #2
     8e0:	mvn	r0, #0
     8e4:	movw	r1, #0
     8e8:	movt	r1, #0
     8ec:	movw	r3, #0
     8f0:	movt	r3, #0
     8f4:	movw	ip, #507	; 0x1fb
     8f8:	str	ip, [sp]
     8fc:	bl	0 <coda_set_error>
     900:	mvn	r0, #0
     904:	str	r0, [fp, #-4]
     908:	b	95c <set_definition+0x328>
     90c:	movw	r0, #0
     910:	str	r0, [sp, #20]
     914:	ldr	r0, [sp, #20]
     918:	ldr	r1, [fp, #-16]
     91c:	cmp	r0, r1
     920:	bge	950 <set_definition+0x31c>
     924:	ldr	r0, [fp, #-8]
     928:	ldr	r0, [r0]
     92c:	ldr	r0, [r0, #32]
     930:	ldr	r1, [sp, #20]
     934:	add	r0, r0, r1, lsl #2
     938:	movw	r1, #0
     93c:	str	r1, [r0]
     940:	ldr	r0, [sp, #20]
     944:	add	r0, r0, #1
     948:	str	r0, [sp, #20]
     94c:	b	914 <set_definition+0x2e0>
     950:	b	954 <set_definition+0x320>
     954:	movw	r0, #0
     958:	str	r0, [fp, #-4]
     95c:	ldr	r0, [fp, #-4]
     960:	mov	sp, fp
     964:	pop	{fp, pc}

00000968 <coda_open_as>:
     968:	push	{fp, lr}
     96c:	mov	fp, sp
     970:	sub	sp, sp, #48	; 0x30
     974:	ldr	ip, [fp, #8]
     978:	str	r0, [fp, #-8]
     97c:	str	r1, [fp, #-12]
     980:	str	r2, [fp, #-16]
     984:	str	r3, [fp, #-20]	; 0xffffffec
     988:	movw	r0, #0
     98c:	str	r0, [sp, #24]
     990:	str	r0, [sp, #16]
     994:	ldr	r1, [fp, #-8]
     998:	cmp	r1, r0
     99c:	str	ip, [sp, #12]
     9a0:	bne	9cc <coda_open_as+0x64>
     9a4:	mvn	r0, #99	; 0x63
     9a8:	movw	r1, #0
     9ac:	movt	r1, #0
     9b0:	movw	r2, #0
     9b4:	movt	r2, #0
     9b8:	movw	r3, #719	; 0x2cf
     9bc:	bl	0 <coda_set_error>
     9c0:	mvn	r0, #0
     9c4:	str	r0, [fp, #-4]
     9c8:	b	b3c <coda_open_as+0x1d4>
     9cc:	ldr	r0, [fp, #-12]
     9d0:	movw	r1, #0
     9d4:	cmp	r0, r1
     9d8:	beq	a50 <coda_open_as+0xe8>
     9dc:	ldr	r0, [fp, #-16]
     9e0:	movw	r1, #0
     9e4:	cmp	r0, r1
     9e8:	bne	a14 <coda_open_as+0xac>
     9ec:	mvn	r0, #99	; 0x63
     9f0:	movw	r1, #0
     9f4:	movt	r1, #0
     9f8:	movw	r2, #0
     9fc:	movt	r2, #0
     a00:	movw	r3, #726	; 0x2d6
     a04:	bl	0 <coda_set_error>
     a08:	mvn	r0, #0
     a0c:	str	r0, [fp, #-4]
     a10:	b	b3c <coda_open_as+0x1d4>
     a14:	ldr	r0, [fp, #8]
     a18:	movw	r1, #0
     a1c:	cmp	r0, r1
     a20:	bne	a4c <coda_open_as+0xe4>
     a24:	mvn	r0, #99	; 0x63
     a28:	movw	r1, #0
     a2c:	movt	r1, #0
     a30:	movw	r2, #0
     a34:	movt	r2, #0
     a38:	movw	r3, #731	; 0x2db
     a3c:	bl	0 <coda_set_error>
     a40:	mvn	r0, #0
     a44:	str	r0, [fp, #-4]
     a48:	b	b3c <coda_open_as+0x1d4>
     a4c:	b	a50 <coda_open_as+0xe8>
     a50:	ldr	r0, [fp, #-12]
     a54:	movw	r1, #0
     a58:	cmp	r0, r1
     a5c:	beq	ad8 <coda_open_as+0x170>
     a60:	ldr	r0, [fp, #-12]
     a64:	ldr	r1, [fp, #-16]
     a68:	ldr	r2, [fp, #-20]	; 0xffffffec
     a6c:	add	r3, sp, #24
     a70:	bl	0 <coda_data_dictionary_get_definition>
     a74:	cmp	r0, #0
     a78:	beq	a88 <coda_open_as+0x120>
     a7c:	mvn	r0, #0
     a80:	str	r0, [fp, #-4]
     a84:	b	b3c <coda_open_as+0x1d4>
     a88:	ldr	r0, [sp, #24]
     a8c:	movw	r1, #0
     a90:	cmp	r0, r1
     a94:	beq	ad4 <coda_open_as+0x16c>
     a98:	ldr	r0, [sp, #24]
     a9c:	ldr	r0, [r0]
     aa0:	cmp	r0, #0
     aa4:	movw	r0, #1
     aa8:	str	r0, [sp, #8]
     aac:	beq	ac8 <coda_open_as+0x160>
     ab0:	ldr	r0, [sp, #24]
     ab4:	ldr	r0, [r0]
     ab8:	cmp	r0, #1
     abc:	movw	r0, #0
     ac0:	moveq	r0, #1
     ac4:	str	r0, [sp, #8]
     ac8:	ldr	r0, [sp, #8]
     acc:	and	r0, r0, #1
     ad0:	str	r0, [sp, #16]
     ad4:	b	ad8 <coda_open_as+0x170>
     ad8:	ldr	r0, [fp, #-8]
     adc:	ldr	r2, [sp, #16]
     ae0:	add	r1, sp, #20
     ae4:	bl	1ec <open_file>
     ae8:	cmp	r0, #0
     aec:	beq	afc <coda_open_as+0x194>
     af0:	mvn	r0, #0
     af4:	str	r0, [fp, #-4]
     af8:	b	b3c <coda_open_as+0x1d4>
     afc:	ldr	r1, [sp, #24]
     b00:	add	r0, sp, #20
     b04:	bl	634 <set_definition>
     b08:	cmp	r0, #0
     b0c:	beq	b28 <coda_open_as+0x1c0>
     b10:	ldr	r0, [sp, #20]
     b14:	bl	2dc <coda_close>
     b18:	mvn	lr, #0
     b1c:	str	lr, [fp, #-4]
     b20:	str	r0, [sp, #4]
     b24:	b	b3c <coda_open_as+0x1d4>
     b28:	ldr	r0, [sp, #20]
     b2c:	ldr	r1, [fp, #8]
     b30:	str	r0, [r1]
     b34:	movw	r0, #0
     b38:	str	r0, [fp, #-4]
     b3c:	ldr	r0, [fp, #-4]
     b40:	mov	sp, fp
     b44:	pop	{fp, pc}

00000b48 <coda_get_product_filename>:
     b48:	push	{fp, lr}
     b4c:	mov	fp, sp
     b50:	sub	sp, sp, #16
     b54:	str	r0, [sp, #8]
     b58:	str	r1, [sp, #4]
     b5c:	ldr	r0, [sp, #8]
     b60:	movw	r1, #0
     b64:	cmp	r0, r1
     b68:	bne	b94 <coda_get_product_filename+0x4c>
     b6c:	mvn	r0, #99	; 0x63
     b70:	movw	r1, #0
     b74:	movt	r1, #0
     b78:	movw	r2, #0
     b7c:	movt	r2, #0
     b80:	movw	r3, #856	; 0x358
     b84:	bl	0 <coda_set_error>
     b88:	mvn	r0, #0
     b8c:	str	r0, [fp, #-4]
     b90:	b	bac <coda_get_product_filename+0x64>
     b94:	ldr	r0, [sp, #8]
     b98:	ldr	r0, [r0]
     b9c:	ldr	r1, [sp, #4]
     ba0:	str	r0, [r1]
     ba4:	movw	r0, #0
     ba8:	str	r0, [fp, #-4]
     bac:	ldr	r0, [fp, #-4]
     bb0:	mov	sp, fp
     bb4:	pop	{fp, pc}

00000bb8 <coda_get_product_file_size>:
     bb8:	push	{fp, lr}
     bbc:	mov	fp, sp
     bc0:	sub	sp, sp, #16
     bc4:	str	r0, [sp, #8]
     bc8:	str	r1, [sp, #4]
     bcc:	ldr	r0, [sp, #8]
     bd0:	movw	r1, #0
     bd4:	cmp	r0, r1
     bd8:	bne	c04 <coda_get_product_file_size+0x4c>
     bdc:	mvn	r0, #99	; 0x63
     be0:	movw	r1, #0
     be4:	movt	r1, #0
     be8:	movw	r2, #0
     bec:	movt	r2, #0
     bf0:	movw	r3, #876	; 0x36c
     bf4:	bl	0 <coda_set_error>
     bf8:	mvn	r0, #0
     bfc:	str	r0, [fp, #-4]
     c00:	b	c5c <coda_get_product_file_size+0xa4>
     c04:	ldr	r0, [sp, #4]
     c08:	movw	r1, #0
     c0c:	cmp	r0, r1
     c10:	bne	c3c <coda_get_product_file_size+0x84>
     c14:	mvn	r0, #99	; 0x63
     c18:	movw	r1, #0
     c1c:	movt	r1, #0
     c20:	movw	r2, #0
     c24:	movt	r2, #0
     c28:	movw	r3, #881	; 0x371
     c2c:	bl	0 <coda_set_error>
     c30:	mvn	r0, #0
     c34:	str	r0, [fp, #-4]
     c38:	b	c5c <coda_get_product_file_size+0xa4>
     c3c:	ldr	r0, [sp, #8]
     c40:	ldr	r1, [r0, #8]
     c44:	ldr	r0, [r0, #12]
     c48:	ldr	r2, [sp, #4]
     c4c:	str	r0, [r2, #4]
     c50:	str	r1, [r2]
     c54:	movw	r0, #0
     c58:	str	r0, [fp, #-4]
     c5c:	ldr	r0, [fp, #-4]
     c60:	mov	sp, fp
     c64:	pop	{fp, pc}

00000c68 <coda_get_product_format>:
     c68:	push	{fp, lr}
     c6c:	mov	fp, sp
     c70:	sub	sp, sp, #16
     c74:	str	r0, [sp, #8]
     c78:	str	r1, [sp, #4]
     c7c:	ldr	r0, [sp, #8]
     c80:	movw	r1, #0
     c84:	cmp	r0, r1
     c88:	bne	cb4 <coda_get_product_format+0x4c>
     c8c:	mvn	r0, #99	; 0x63
     c90:	movw	r1, #0
     c94:	movt	r1, #0
     c98:	movw	r2, #0
     c9c:	movt	r2, #0
     ca0:	movw	r3, #904	; 0x388
     ca4:	bl	0 <coda_set_error>
     ca8:	mvn	r0, #0
     cac:	str	r0, [fp, #-4]
     cb0:	b	d04 <coda_get_product_format+0x9c>
     cb4:	ldr	r0, [sp, #4]
     cb8:	movw	r1, #0
     cbc:	cmp	r0, r1
     cc0:	bne	cec <coda_get_product_format+0x84>
     cc4:	mvn	r0, #99	; 0x63
     cc8:	movw	r1, #0
     ccc:	movt	r1, #0
     cd0:	movw	r2, #0
     cd4:	movt	r2, #0
     cd8:	movw	r3, #909	; 0x38d
     cdc:	bl	0 <coda_set_error>
     ce0:	mvn	r0, #0
     ce4:	str	r0, [fp, #-4]
     ce8:	b	d04 <coda_get_product_format+0x9c>
     cec:	ldr	r0, [sp, #8]
     cf0:	ldr	r0, [r0, #16]
     cf4:	ldr	r1, [sp, #4]
     cf8:	str	r0, [r1]
     cfc:	movw	r0, #0
     d00:	str	r0, [fp, #-4]
     d04:	ldr	r0, [fp, #-4]
     d08:	mov	sp, fp
     d0c:	pop	{fp, pc}

00000d10 <coda_get_product_class>:
     d10:	push	{fp, lr}
     d14:	mov	fp, sp
     d18:	sub	sp, sp, #16
     d1c:	str	r0, [sp, #8]
     d20:	str	r1, [sp, #4]
     d24:	ldr	r0, [sp, #8]
     d28:	movw	r1, #0
     d2c:	cmp	r0, r1
     d30:	bne	d5c <coda_get_product_class+0x4c>
     d34:	mvn	r0, #99	; 0x63
     d38:	movw	r1, #0
     d3c:	movt	r1, #0
     d40:	movw	r2, #0
     d44:	movt	r2, #0
     d48:	movw	r3, #933	; 0x3a5
     d4c:	bl	0 <coda_set_error>
     d50:	mvn	r0, #0
     d54:	str	r0, [fp, #-4]
     d58:	b	ddc <coda_get_product_class+0xcc>
     d5c:	ldr	r0, [sp, #4]
     d60:	movw	r1, #0
     d64:	cmp	r0, r1
     d68:	bne	d94 <coda_get_product_class+0x84>
     d6c:	mvn	r0, #99	; 0x63
     d70:	movw	r1, #0
     d74:	movt	r1, #0
     d78:	movw	r2, #0
     d7c:	movt	r2, #0
     d80:	movw	r3, #938	; 0x3aa
     d84:	bl	0 <coda_set_error>
     d88:	mvn	r0, #0
     d8c:	str	r0, [fp, #-4]
     d90:	b	ddc <coda_get_product_class+0xcc>
     d94:	ldr	r0, [sp, #8]
     d98:	ldr	r0, [r0, #24]
     d9c:	movw	r1, #0
     da0:	cmp	r0, r1
     da4:	beq	dc8 <coda_get_product_class+0xb8>
     da8:	ldr	r0, [sp, #8]
     dac:	ldr	r0, [r0, #24]
     db0:	ldr	r0, [r0, #44]	; 0x2c
     db4:	ldr	r0, [r0, #20]
     db8:	ldr	r0, [r0]
     dbc:	ldr	r1, [sp, #4]
     dc0:	str	r0, [r1]
     dc4:	b	dd4 <coda_get_product_class+0xc4>
     dc8:	ldr	r0, [sp, #4]
     dcc:	movw	r1, #0
     dd0:	str	r1, [r0]
     dd4:	movw	r0, #0
     dd8:	str	r0, [fp, #-4]
     ddc:	ldr	r0, [fp, #-4]
     de0:	mov	sp, fp
     de4:	pop	{fp, pc}

00000de8 <coda_get_product_type>:
     de8:	push	{fp, lr}
     dec:	mov	fp, sp
     df0:	sub	sp, sp, #16
     df4:	str	r0, [sp, #8]
     df8:	str	r1, [sp, #4]
     dfc:	ldr	r0, [sp, #8]
     e00:	movw	r1, #0
     e04:	cmp	r0, r1
     e08:	bne	e34 <coda_get_product_type+0x4c>
     e0c:	mvn	r0, #99	; 0x63
     e10:	movw	r1, #0
     e14:	movt	r1, #0
     e18:	movw	r2, #0
     e1c:	movt	r2, #0
     e20:	movw	r3, #969	; 0x3c9
     e24:	bl	0 <coda_set_error>
     e28:	mvn	r0, #0
     e2c:	str	r0, [fp, #-4]
     e30:	b	eb0 <coda_get_product_type+0xc8>
     e34:	ldr	r0, [sp, #4]
     e38:	movw	r1, #0
     e3c:	cmp	r0, r1
     e40:	bne	e6c <coda_get_product_type+0x84>
     e44:	mvn	r0, #99	; 0x63
     e48:	movw	r1, #0
     e4c:	movt	r1, #0
     e50:	movw	r2, #0
     e54:	movt	r2, #0
     e58:	movw	r3, #974	; 0x3ce
     e5c:	bl	0 <coda_set_error>
     e60:	mvn	r0, #0
     e64:	str	r0, [fp, #-4]
     e68:	b	eb0 <coda_get_product_type+0xc8>
     e6c:	ldr	r0, [sp, #8]
     e70:	ldr	r0, [r0, #24]
     e74:	movw	r1, #0
     e78:	cmp	r0, r1
     e7c:	beq	e9c <coda_get_product_type+0xb4>
     e80:	ldr	r0, [sp, #8]
     e84:	ldr	r0, [r0, #24]
     e88:	ldr	r0, [r0, #44]	; 0x2c
     e8c:	ldr	r0, [r0]
     e90:	ldr	r1, [sp, #4]
     e94:	str	r0, [r1]
     e98:	b	ea8 <coda_get_product_type+0xc0>
     e9c:	ldr	r0, [sp, #4]
     ea0:	movw	r1, #0
     ea4:	str	r1, [r0]
     ea8:	movw	r0, #0
     eac:	str	r0, [fp, #-4]
     eb0:	ldr	r0, [fp, #-4]
     eb4:	mov	sp, fp
     eb8:	pop	{fp, pc}

00000ebc <coda_get_product_version>:
     ebc:	push	{fp, lr}
     ec0:	mov	fp, sp
     ec4:	sub	sp, sp, #16
     ec8:	str	r0, [sp, #8]
     ecc:	str	r1, [sp, #4]
     ed0:	ldr	r0, [sp, #8]
     ed4:	movw	r1, #0
     ed8:	cmp	r0, r1
     edc:	bne	f08 <coda_get_product_version+0x4c>
     ee0:	mvn	r0, #99	; 0x63
     ee4:	movw	r1, #0
     ee8:	movt	r1, #0
     eec:	movw	r2, #0
     ef0:	movt	r2, #0
     ef4:	movw	r3, #1003	; 0x3eb
     ef8:	bl	0 <coda_set_error>
     efc:	mvn	r0, #0
     f00:	str	r0, [fp, #-4]
     f04:	b	f80 <coda_get_product_version+0xc4>
     f08:	ldr	r0, [sp, #4]
     f0c:	movw	r1, #0
     f10:	cmp	r0, r1
     f14:	bne	f40 <coda_get_product_version+0x84>
     f18:	mvn	r0, #99	; 0x63
     f1c:	movw	r1, #0
     f20:	movt	r1, #0
     f24:	movw	r2, #0
     f28:	movt	r2, #0
     f2c:	movw	r3, #1008	; 0x3f0
     f30:	bl	0 <coda_set_error>
     f34:	mvn	r0, #0
     f38:	str	r0, [fp, #-4]
     f3c:	b	f80 <coda_get_product_version+0xc4>
     f40:	ldr	r0, [sp, #8]
     f44:	ldr	r0, [r0, #24]
     f48:	movw	r1, #0
     f4c:	cmp	r0, r1
     f50:	beq	f6c <coda_get_product_version+0xb0>
     f54:	ldr	r0, [sp, #8]
     f58:	ldr	r0, [r0, #24]
     f5c:	ldr	r0, [r0, #4]
     f60:	ldr	r1, [sp, #4]
     f64:	str	r0, [r1]
     f68:	b	f78 <coda_get_product_version+0xbc>
     f6c:	ldr	r0, [sp, #4]
     f70:	mvn	r1, #0
     f74:	str	r1, [r0]
     f78:	movw	r0, #0
     f7c:	str	r0, [fp, #-4]
     f80:	ldr	r0, [fp, #-4]
     f84:	mov	sp, fp
     f88:	pop	{fp, pc}

00000f8c <coda_get_product_root_type>:
     f8c:	push	{fp, lr}
     f90:	mov	fp, sp
     f94:	sub	sp, sp, #16
     f98:	str	r0, [sp, #8]
     f9c:	str	r1, [sp, #4]
     fa0:	ldr	r0, [sp, #8]
     fa4:	movw	r1, #0
     fa8:	cmp	r0, r1
     fac:	bne	fd8 <coda_get_product_root_type+0x4c>
     fb0:	mvn	r0, #99	; 0x63
     fb4:	movw	r1, #0
     fb8:	movt	r1, #0
     fbc:	movw	r2, #0
     fc0:	movt	r2, #0
     fc4:	movw	r3, #1043	; 0x413
     fc8:	bl	0 <coda_set_error>
     fcc:	mvn	r0, #0
     fd0:	str	r0, [fp, #-4]
     fd4:	b	109c <coda_get_product_root_type+0x110>
     fd8:	ldr	r0, [sp, #4]
     fdc:	movw	r1, #0
     fe0:	cmp	r0, r1
     fe4:	bne	1010 <coda_get_product_root_type+0x84>
     fe8:	mvn	r0, #99	; 0x63
     fec:	movw	r1, #0
     ff0:	movt	r1, #0
     ff4:	movw	r2, #0
     ff8:	movt	r2, #0
     ffc:	movw	r3, #1048	; 0x418
    1000:	bl	0 <coda_set_error>
    1004:	mvn	r0, #0
    1008:	str	r0, [fp, #-4]
    100c:	b	109c <coda_get_product_root_type+0x110>
    1010:	ldr	r0, [sp, #8]
    1014:	ldr	r0, [r0, #24]
    1018:	movw	r1, #0
    101c:	cmp	r0, r1
    1020:	beq	1054 <coda_get_product_root_type+0xc8>
    1024:	ldr	r0, [sp, #8]
    1028:	ldr	r0, [r0, #24]
    102c:	ldr	r0, [r0, #28]
    1030:	movw	r1, #0
    1034:	cmp	r0, r1
    1038:	beq	1054 <coda_get_product_root_type+0xc8>
    103c:	ldr	r0, [sp, #8]
    1040:	ldr	r0, [r0, #24]
    1044:	ldr	r0, [r0, #28]
    1048:	ldr	r1, [sp, #4]
    104c:	str	r0, [r1]
    1050:	b	1094 <coda_get_product_root_type+0x108>
    1054:	ldr	r0, [sp, #8]
    1058:	ldr	r0, [r0, #20]
    105c:	ldr	r0, [r0]
    1060:	cmp	r0, #100	; 0x64
    1064:	bcs	1078 <coda_get_product_root_type+0xec>
    1068:	ldr	r0, [sp, #8]
    106c:	ldr	r0, [r0, #20]
    1070:	str	r0, [sp]
    1074:	b	1088 <coda_get_product_root_type+0xfc>
    1078:	ldr	r0, [sp, #8]
    107c:	ldr	r0, [r0, #20]
    1080:	ldr	r0, [r0, #4]
    1084:	str	r0, [sp]
    1088:	ldr	r0, [sp]
    108c:	ldr	r1, [sp, #4]
    1090:	str	r0, [r1]
    1094:	movw	r0, #0
    1098:	str	r0, [fp, #-4]
    109c:	ldr	r0, [fp, #-4]
    10a0:	mov	sp, fp
    10a4:	pop	{fp, pc}

000010a8 <coda_get_product_definition_file>:
    10a8:	push	{fp, lr}
    10ac:	mov	fp, sp
    10b0:	sub	sp, sp, #16
    10b4:	str	r0, [sp, #8]
    10b8:	str	r1, [sp, #4]
    10bc:	ldr	r0, [sp, #8]
    10c0:	movw	r1, #0
    10c4:	cmp	r0, r1
    10c8:	bne	10f4 <coda_get_product_definition_file+0x4c>
    10cc:	mvn	r0, #99	; 0x63
    10d0:	movw	r1, #0
    10d4:	movt	r1, #0
    10d8:	movw	r2, #0
    10dc:	movt	r2, #0
    10e0:	movw	r3, #1080	; 0x438
    10e4:	bl	0 <coda_set_error>
    10e8:	mvn	r0, #0
    10ec:	str	r0, [fp, #-4]
    10f0:	b	1174 <coda_get_product_definition_file+0xcc>
    10f4:	ldr	r0, [sp, #4]
    10f8:	movw	r1, #0
    10fc:	cmp	r0, r1
    1100:	bne	112c <coda_get_product_definition_file+0x84>
    1104:	mvn	r0, #99	; 0x63
    1108:	movw	r1, #0
    110c:	movt	r1, #0
    1110:	movw	r2, #0
    1114:	movt	r2, #0
    1118:	movw	r3, #1085	; 0x43d
    111c:	bl	0 <coda_set_error>
    1120:	mvn	r0, #0
    1124:	str	r0, [fp, #-4]
    1128:	b	1174 <coda_get_product_definition_file+0xcc>
    112c:	ldr	r0, [sp, #8]
    1130:	ldr	r0, [r0, #24]
    1134:	movw	r1, #0
    1138:	cmp	r0, r1
    113c:	beq	1160 <coda_get_product_definition_file+0xb8>
    1140:	ldr	r0, [sp, #8]
    1144:	ldr	r0, [r0, #24]
    1148:	ldr	r0, [r0, #44]	; 0x2c
    114c:	ldr	r0, [r0, #20]
    1150:	ldr	r0, [r0, #8]
    1154:	ldr	r1, [sp, #4]
    1158:	str	r0, [r1]
    115c:	b	116c <coda_get_product_definition_file+0xc4>
    1160:	ldr	r0, [sp, #4]
    1164:	movw	r1, #0
    1168:	str	r1, [r0]
    116c:	movw	r0, #0
    1170:	str	r0, [fp, #-4]
    1174:	ldr	r0, [fp, #-4]
    1178:	mov	sp, fp
    117c:	pop	{fp, pc}

00001180 <coda_get_product_variable_value>:
    1180:	push	{fp, lr}
    1184:	mov	fp, sp
    1188:	sub	sp, sp, #32
    118c:	str	r0, [fp, #-8]
    1190:	str	r1, [fp, #-12]
    1194:	str	r2, [sp, #16]
    1198:	str	r3, [sp, #12]
    119c:	ldr	r0, [fp, #-8]
    11a0:	movw	r1, #0
    11a4:	cmp	r0, r1
    11a8:	bne	11d4 <coda_get_product_variable_value+0x54>
    11ac:	mvn	r0, #99	; 0x63
    11b0:	movw	r1, #0
    11b4:	movt	r1, #0
    11b8:	movw	r2, #0
    11bc:	movt	r2, #0
    11c0:	movw	r3, #1124	; 0x464
    11c4:	bl	0 <coda_set_error>
    11c8:	mvn	r0, #0
    11cc:	str	r0, [fp, #-4]
    11d0:	b	12cc <coda_get_product_variable_value+0x14c>
    11d4:	ldr	r0, [fp, #-12]
    11d8:	movw	r1, #0
    11dc:	cmp	r0, r1
    11e0:	bne	120c <coda_get_product_variable_value+0x8c>
    11e4:	mvn	r0, #99	; 0x63
    11e8:	movw	r1, #0
    11ec:	movt	r1, #0
    11f0:	movw	r2, #0
    11f4:	movt	r2, #0
    11f8:	movw	r3, #1129	; 0x469
    11fc:	bl	0 <coda_set_error>
    1200:	mvn	r0, #0
    1204:	str	r0, [fp, #-4]
    1208:	b	12cc <coda_get_product_variable_value+0x14c>
    120c:	ldr	r0, [fp, #-8]
    1210:	ldr	r1, [fp, #-12]
    1214:	add	r2, sp, #4
    1218:	bl	0 <coda_product_variable_get_size>
    121c:	cmp	r0, #0
    1220:	beq	1244 <coda_get_product_variable_value+0xc4>
    1224:	ldr	r2, [fp, #-12]
    1228:	mvn	r0, #101	; 0x65
    122c:	movw	r1, #0
    1230:	movt	r1, #0
    1234:	bl	0 <coda_set_error>
    1238:	mvn	r0, #0
    123c:	str	r0, [fp, #-4]
    1240:	b	12cc <coda_get_product_variable_value+0x14c>
    1244:	ldr	r0, [sp, #16]
    1248:	cmp	r0, #0
    124c:	blt	1260 <coda_get_product_variable_value+0xe0>
    1250:	ldr	r0, [sp, #16]
    1254:	ldr	r1, [sp, #4]
    1258:	cmp	r0, r1
    125c:	blt	1284 <coda_get_product_variable_value+0x104>
    1260:	ldr	r2, [sp, #16]
    1264:	ldr	r3, [fp, #-12]
    1268:	mvn	r0, #100	; 0x64
    126c:	movw	r1, #0
    1270:	movt	r1, #0
    1274:	bl	0 <coda_set_error>
    1278:	mvn	r0, #0
    127c:	str	r0, [fp, #-4]
    1280:	b	12cc <coda_get_product_variable_value+0x14c>
    1284:	ldr	r0, [fp, #-8]
    1288:	ldr	r1, [fp, #-12]
    128c:	ldr	r2, [sp, #16]
    1290:	add	r3, sp, #8
    1294:	bl	0 <coda_product_variable_get_pointer>
    1298:	cmp	r0, #0
    129c:	beq	12ac <coda_get_product_variable_value+0x12c>
    12a0:	mvn	r0, #0
    12a4:	str	r0, [fp, #-4]
    12a8:	b	12cc <coda_get_product_variable_value+0x14c>
    12ac:	ldr	r0, [sp, #8]
    12b0:	ldr	r1, [r0]
    12b4:	ldr	r0, [r0, #4]
    12b8:	ldr	r2, [sp, #12]
    12bc:	str	r0, [r2, #4]
    12c0:	str	r1, [r2]
    12c4:	movw	r0, #0
    12c8:	str	r0, [fp, #-4]
    12cc:	ldr	r0, [fp, #-4]
    12d0:	mov	sp, fp
    12d4:	pop	{fp, pc}

000012d8 <get_file_size>:
    12d8:	push	{fp, lr}
    12dc:	mov	fp, sp
    12e0:	sub	sp, sp, #112	; 0x70
    12e4:	str	r0, [fp, #-8]
    12e8:	str	r1, [fp, #-12]
    12ec:	ldr	r0, [fp, #-8]
    12f0:	movw	r1, #0
    12f4:	cmp	r0, r1
    12f8:	beq	1310 <get_file_size+0x38>
    12fc:	ldr	r0, [fp, #-12]
    1300:	movw	r1, #0
    1304:	cmp	r0, r1
    1308:	beq	1310 <get_file_size+0x38>
    130c:	b	1330 <get_file_size+0x58>
    1310:	movw	r0, #0
    1314:	movt	r0, #0
    1318:	movw	r1, #0
    131c:	movt	r1, #0
    1320:	movw	r2, #162	; 0xa2
    1324:	movw	r3, #0
    1328:	movt	r3, #0
    132c:	bl	0 <__assert_fail>
    1330:	ldr	r0, [fp, #-8]
    1334:	add	r1, sp, #8
    1338:	bl	0 <stat>
    133c:	cmp	r0, #0
    1340:	beq	13ac <get_file_size+0xd4>
    1344:	bl	0 <__errno_location>
    1348:	ldr	r0, [r0]
    134c:	cmp	r0, #2
    1350:	bne	136c <get_file_size+0x94>
    1354:	ldr	r2, [fp, #-8]
    1358:	mvn	r0, #19
    135c:	movw	r1, #0
    1360:	movt	r1, #0
    1364:	bl	0 <coda_set_error>
    1368:	b	13a0 <get_file_size+0xc8>
    136c:	ldr	r2, [fp, #-8]
    1370:	str	r2, [sp, #4]
    1374:	bl	0 <__errno_location>
    1378:	ldr	r0, [r0]
    137c:	bl	0 <strerror>
    1380:	mvn	r2, #20
    1384:	str	r0, [sp]
    1388:	mov	r0, r2
    138c:	movw	r1, #0
    1390:	movt	r1, #0
    1394:	ldr	r2, [sp, #4]
    1398:	ldr	r3, [sp]
    139c:	bl	0 <coda_set_error>
    13a0:	mvn	r0, #0
    13a4:	str	r0, [fp, #-4]
    13a8:	b	13f8 <get_file_size+0x120>
    13ac:	ldr	r0, [sp, #24]
    13b0:	and	r0, r0, #32768	; 0x8000
    13b4:	cmp	r0, #0
    13b8:	bne	13dc <get_file_size+0x104>
    13bc:	ldr	r2, [fp, #-8]
    13c0:	mvn	r0, #20
    13c4:	movw	r1, #0
    13c8:	movt	r1, #0
    13cc:	bl	0 <coda_set_error>
    13d0:	mvn	r0, #0
    13d4:	str	r0, [fp, #-4]
    13d8:	b	13f8 <get_file_size+0x120>
    13dc:	ldr	r0, [sp, #52]	; 0x34
    13e0:	asr	r1, r0, #31
    13e4:	ldr	r2, [fp, #-12]
    13e8:	str	r0, [r2]
    13ec:	str	r1, [r2, #4]
    13f0:	movw	r0, #0
    13f4:	str	r0, [fp, #-4]
    13f8:	ldr	r0, [fp, #-4]
    13fc:	mov	sp, fp
    1400:	pop	{fp, pc}

00001404 <get_format>:
    1404:	push	{r4, r5, fp, lr}
    1408:	add	fp, sp, #8
    140c:	sub	sp, sp, #704	; 0x2c0
    1410:	str	r0, [fp, #-16]
    1414:	str	r1, [fp, #-20]	; 0xffffffec
    1418:	ldr	r0, [fp, #-16]
    141c:	ldr	r1, [r0, #8]
    1420:	ldr	r0, [r0, #12]
    1424:	str	r0, [sp, #84]	; 0x54
    1428:	str	r1, [sp, #80]	; 0x50
    142c:	ldr	r1, [fp, #-16]
    1430:	add	r0, sp, #88	; 0x58
    1434:	bl	0 <coda_cursor_set_product>
    1438:	cmp	r0, #0
    143c:	beq	144c <get_format+0x48>
    1440:	mvn	r0, #0
    1444:	str	r0, [fp, #-12]
    1448:	b	1a88 <get_format+0x684>
    144c:	ldr	r0, [fp, #-20]	; 0xffffffec
    1450:	mov	r1, #1
    1454:	str	r1, [r0]
    1458:	ldr	r0, [sp, #80]	; 0x50
    145c:	ldr	r1, [sp, #84]	; 0x54
    1460:	rsbs	r0, r0, #3
    1464:	rscs	r1, r1, #0
    1468:	str	r0, [sp, #68]	; 0x44
    146c:	str	r1, [sp, #64]	; 0x40
    1470:	blt	1484 <get_format+0x80>
    1474:	b	1478 <get_format+0x74>
    1478:	movw	r0, #0
    147c:	str	r0, [fp, #-12]
    1480:	b	1a88 <get_format+0x684>
    1484:	sub	r1, fp, #100	; 0x64
    1488:	mov	r0, sp
    148c:	mov	r2, #0
    1490:	str	r2, [r0, #4]
    1494:	mov	r3, #4
    1498:	str	r3, [r0]
    149c:	add	r0, sp, #88	; 0x58
    14a0:	str	r2, [sp, #60]	; 0x3c
    14a4:	ldr	r3, [sp, #60]	; 0x3c
    14a8:	bl	0 <coda_cursor_read_bytes>
    14ac:	cmp	r0, #0
    14b0:	beq	14c0 <get_format+0xbc>
    14b4:	mvn	r0, #0
    14b8:	str	r0, [fp, #-12]
    14bc:	b	1a88 <get_format+0x684>
    14c0:	sub	r0, fp, #100	; 0x64
    14c4:	movw	r1, #0
    14c8:	movt	r1, #0
    14cc:	mov	r2, #3
    14d0:	bl	0 <memcmp>
    14d4:	cmp	r0, #0
    14d8:	bne	1518 <get_format+0x114>
    14dc:	ldrb	r0, [fp, #-97]	; 0xffffff9f
    14e0:	cmp	r0, #1
    14e4:	beq	1500 <get_format+0xfc>
    14e8:	ldrb	r0, [fp, #-97]	; 0xffffff9f
    14ec:	cmp	r0, #2
    14f0:	beq	1500 <get_format+0xfc>
    14f4:	ldrb	r0, [fp, #-97]	; 0xffffff9f
    14f8:	cmp	r0, #5
    14fc:	bne	1518 <get_format+0x114>
    1500:	ldr	r0, [fp, #-20]	; 0xffffffec
    1504:	movw	r1, #6
    1508:	str	r1, [r0]
    150c:	movw	r0, #0
    1510:	str	r0, [fp, #-12]
    1514:	b	1a88 <get_format+0x684>
    1518:	sub	r0, fp, #100	; 0x64
    151c:	ldr	r0, [r0]
    1520:	movw	r1, #64754	; 0xfcf2
    1524:	movt	r1, #65260	; 0xfeec
    1528:	add	r1, r0, r1
    152c:	movw	r2, #782	; 0x30e
    1530:	movt	r2, #275	; 0x113
    1534:	cmp	r0, r2
    1538:	movwne	r1, #1
    153c:	cmp	r1, #0
    1540:	bne	155c <get_format+0x158>
    1544:	ldr	r0, [fp, #-20]	; 0xffffffec
    1548:	movw	r1, #3
    154c:	str	r1, [r0]
    1550:	movw	r0, #0
    1554:	str	r0, [fp, #-12]
    1558:	b	1a88 <get_format+0x684>
    155c:	ldr	r0, [sp, #80]	; 0x50
    1560:	ldr	r1, [sp, #84]	; 0x54
    1564:	rsbs	r0, r0, #7
    1568:	rscs	r1, r1, #0
    156c:	str	r0, [sp, #56]	; 0x38
    1570:	str	r1, [sp, #52]	; 0x34
    1574:	blt	1594 <get_format+0x190>
    1578:	b	157c <get_format+0x178>
    157c:	ldr	r0, [fp, #-20]	; 0xffffffec
    1580:	movw	r1, #1
    1584:	str	r1, [r0]
    1588:	movw	r0, #0
    158c:	str	r0, [fp, #-12]
    1590:	b	1a88 <get_format+0x684>
    1594:	sub	r0, fp, #100	; 0x64
    1598:	add	r1, r0, #4
    159c:	mov	r0, sp
    15a0:	mov	r2, #0
    15a4:	str	r2, [r0, #4]
    15a8:	mov	r3, #4
    15ac:	str	r3, [r0]
    15b0:	add	r0, sp, #88	; 0x58
    15b4:	str	r2, [sp, #48]	; 0x30
    15b8:	mov	r2, r3
    15bc:	ldr	r3, [sp, #48]	; 0x30
    15c0:	bl	0 <coda_cursor_read_bytes>
    15c4:	cmp	r0, #0
    15c8:	beq	15d8 <get_format+0x1d4>
    15cc:	mvn	r0, #0
    15d0:	str	r0, [fp, #-12]
    15d4:	b	1a88 <get_format+0x684>
    15d8:	sub	r0, fp, #100	; 0x64
    15dc:	movw	r1, #0
    15e0:	movt	r1, #0
    15e4:	mov	r2, #8
    15e8:	bl	0 <memcmp>
    15ec:	cmp	r0, #0
    15f0:	bne	160c <get_format+0x208>
    15f4:	ldr	r0, [fp, #-20]	; 0xffffffec
    15f8:	movw	r1, #4
    15fc:	str	r1, [r0]
    1600:	movw	r0, #0
    1604:	str	r0, [fp, #-12]
    1608:	b	1a88 <get_format+0x684>
    160c:	sub	r0, fp, #100	; 0x64
    1610:	movw	r1, #0
    1614:	movt	r1, #0
    1618:	mov	r2, #8
    161c:	bl	0 <memcmp>
    1620:	cmp	r0, #0
    1624:	beq	1698 <get_format+0x294>
    1628:	sub	r0, fp, #100	; 0x64
    162c:	movw	r1, #0
    1630:	movt	r1, #0
    1634:	mov	r2, #8
    1638:	bl	0 <memcmp>
    163c:	cmp	r0, #0
    1640:	beq	1698 <get_format+0x294>
    1644:	sub	r0, fp, #100	; 0x64
    1648:	movw	r1, #0
    164c:	movt	r1, #0
    1650:	mov	r2, #8
    1654:	bl	0 <memcmp>
    1658:	cmp	r0, #0
    165c:	beq	1698 <get_format+0x294>
    1660:	sub	r0, fp, #100	; 0x64
    1664:	movw	r1, #0
    1668:	movt	r1, #0
    166c:	mov	r2, #8
    1670:	bl	0 <memcmp>
    1674:	cmp	r0, #0
    1678:	beq	1698 <get_format+0x294>
    167c:	sub	r0, fp, #100	; 0x64
    1680:	movw	r1, #0
    1684:	movt	r1, #0
    1688:	mov	r2, #8
    168c:	bl	0 <memcmp>
    1690:	cmp	r0, #0
    1694:	bne	16b0 <get_format+0x2ac>
    1698:	ldr	r0, [fp, #-20]	; 0xffffffec
    169c:	movw	r1, #5
    16a0:	str	r1, [r0]
    16a4:	movw	r0, #0
    16a8:	str	r0, [fp, #-12]
    16ac:	b	1a88 <get_format+0x684>
    16b0:	sub	r0, fp, #100	; 0x64
    16b4:	ldr	r0, [r0]
    16b8:	movw	r1, #44473	; 0xadb9
    16bc:	movt	r1, #48566	; 0xbdb6
    16c0:	add	r1, r0, r1
    16c4:	movw	r2, #21063	; 0x5247
    16c8:	movt	r2, #16969	; 0x4249
    16cc:	cmp	r0, r2
    16d0:	movwne	r1, #1
    16d4:	cmp	r1, #0
    16d8:	bne	1710 <get_format+0x30c>
    16dc:	ldrb	r0, [fp, #-93]	; 0xffffffa3
    16e0:	cmp	r0, #1
    16e4:	beq	16f4 <get_format+0x2f0>
    16e8:	ldrb	r0, [fp, #-93]	; 0xffffffa3
    16ec:	cmp	r0, #2
    16f0:	bne	170c <get_format+0x308>
    16f4:	ldr	r0, [fp, #-20]	; 0xffffffec
    16f8:	movw	r1, #7
    16fc:	str	r1, [r0]
    1700:	movw	r0, #0
    1704:	str	r0, [fp, #-12]
    1708:	b	1a88 <get_format+0x684>
    170c:	b	1710 <get_format+0x30c>
    1710:	sub	r0, fp, #100	; 0x64
    1714:	movw	r1, #0
    1718:	movt	r1, #0
    171c:	mov	r2, #5
    1720:	bl	0 <memcmp>
    1724:	cmp	r0, #0
    1728:	beq	1748 <get_format+0x344>
    172c:	sub	r0, fp, #100	; 0x64
    1730:	movw	r1, #0
    1734:	movt	r1, #0
    1738:	mov	r2, #8
    173c:	bl	0 <memcmp>
    1740:	cmp	r0, #0
    1744:	bne	1760 <get_format+0x35c>
    1748:	ldr	r0, [fp, #-20]	; 0xffffffec
    174c:	movw	r1, #2
    1750:	str	r1, [r0]
    1754:	movw	r0, #0
    1758:	str	r0, [fp, #-12]
    175c:	b	1a88 <get_format+0x684>
    1760:	ldr	r0, [sp, #80]	; 0x50
    1764:	ldr	r1, [sp, #84]	; 0x54
    1768:	rsbs	r0, r0, #39	; 0x27
    176c:	rscs	r1, r1, #0
    1770:	str	r0, [sp, #44]	; 0x2c
    1774:	str	r1, [sp, #40]	; 0x28
    1778:	blt	178c <get_format+0x388>
    177c:	b	1780 <get_format+0x37c>
    1780:	movw	r0, #0
    1784:	str	r0, [fp, #-12]
    1788:	b	1a88 <get_format+0x684>
    178c:	sub	r0, fp, #100	; 0x64
    1790:	add	r1, r0, #8
    1794:	mov	r0, sp
    1798:	mov	r2, #0
    179c:	str	r2, [r0, #4]
    17a0:	mov	r3, #32
    17a4:	str	r3, [r0]
    17a8:	add	r0, sp, #88	; 0x58
    17ac:	mov	r3, #8
    17b0:	str	r2, [sp, #36]	; 0x24
    17b4:	mov	r2, r3
    17b8:	ldr	r3, [sp, #36]	; 0x24
    17bc:	bl	0 <coda_cursor_read_bytes>
    17c0:	cmp	r0, #0
    17c4:	beq	17d4 <get_format+0x3d0>
    17c8:	mvn	r0, #0
    17cc:	str	r0, [fp, #-12]
    17d0:	b	1a88 <get_format+0x684>
    17d4:	ldr	r0, [sp, #80]	; 0x50
    17d8:	ldr	r1, [sp, #84]	; 0x54
    17dc:	subs	r0, r0, #60	; 0x3c
    17e0:	sbcs	r1, r1, #0
    17e4:	str	r0, [sp, #32]
    17e8:	str	r1, [sp, #28]
    17ec:	blt	190c <get_format+0x508>
    17f0:	b	17f4 <get_format+0x3f0>
    17f4:	ldrb	r0, [fp, #-100]	; 0xffffff9c
    17f8:	cmp	r0, #35	; 0x23
    17fc:	bne	1908 <get_format+0x504>
    1800:	ldrb	r0, [fp, #-99]	; 0xffffff9d
    1804:	cmp	r0, #97	; 0x61
    1808:	beq	1824 <get_format+0x420>
    180c:	ldrb	r0, [fp, #-99]	; 0xffffff9d
    1810:	cmp	r0, #98	; 0x62
    1814:	beq	1824 <get_format+0x420>
    1818:	ldrb	r0, [fp, #-99]	; 0xffffff9d
    181c:	cmp	r0, #99	; 0x63
    1820:	bne	1908 <get_format+0x504>
    1824:	ldrb	r0, [fp, #-98]	; 0xffffff9e
    1828:	cmp	r0, #80	; 0x50
    182c:	beq	183c <get_format+0x438>
    1830:	ldrb	r0, [fp, #-98]	; 0xffffff9e
    1834:	cmp	r0, #86	; 0x56
    1838:	bne	1908 <get_format+0x504>
    183c:	ldrb	r0, [fp, #-97]	; 0xffffff9f
    1840:	cmp	r0, #48	; 0x30
    1844:	blt	1908 <get_format+0x504>
    1848:	ldrb	r0, [fp, #-97]	; 0xffffff9f
    184c:	cmp	r0, #57	; 0x39
    1850:	bgt	1908 <get_format+0x504>
    1854:	ldrb	r0, [fp, #-96]	; 0xffffffa0
    1858:	cmp	r0, #48	; 0x30
    185c:	blt	1908 <get_format+0x504>
    1860:	ldrb	r0, [fp, #-96]	; 0xffffffa0
    1864:	cmp	r0, #57	; 0x39
    1868:	bgt	1908 <get_format+0x504>
    186c:	ldrb	r0, [fp, #-95]	; 0xffffffa1
    1870:	cmp	r0, #48	; 0x30
    1874:	blt	1908 <get_format+0x504>
    1878:	ldrb	r0, [fp, #-95]	; 0xffffffa1
    187c:	cmp	r0, #57	; 0x39
    1880:	bgt	1908 <get_format+0x504>
    1884:	ldrb	r0, [fp, #-94]	; 0xffffffa2
    1888:	cmp	r0, #48	; 0x30
    188c:	blt	1908 <get_format+0x504>
    1890:	ldrb	r0, [fp, #-94]	; 0xffffffa2
    1894:	cmp	r0, #57	; 0x39
    1898:	bgt	1908 <get_format+0x504>
    189c:	ldrb	r0, [fp, #-93]	; 0xffffffa3
    18a0:	cmp	r0, #32
    18a4:	bne	1908 <get_format+0x504>
    18a8:	ldrb	r0, [fp, #-90]	; 0xffffffa6
    18ac:	cmp	r0, #32
    18b0:	bne	1908 <get_format+0x504>
    18b4:	ldrb	r0, [fp, #-87]	; 0xffffffa9
    18b8:	cmp	r0, #32
    18bc:	bne	1908 <get_format+0x504>
    18c0:	ldrb	r0, [fp, #-84]	; 0xffffffac
    18c4:	cmp	r0, #32
    18c8:	bne	1908 <get_format+0x504>
    18cc:	ldrb	r0, [fp, #-81]	; 0xffffffaf
    18d0:	cmp	r0, #32
    18d4:	bne	1908 <get_format+0x504>
    18d8:	ldrb	r0, [fp, #-69]	; 0xffffffbb
    18dc:	cmp	r0, #32
    18e0:	bne	1908 <get_format+0x504>
    18e4:	ldrb	r0, [fp, #-61]	; 0xffffffc3
    18e8:	cmp	r0, #32
    18ec:	bne	1908 <get_format+0x504>
    18f0:	ldr	r0, [fp, #-20]	; 0xffffffec
    18f4:	movw	r1, #9
    18f8:	str	r1, [r0]
    18fc:	movw	r0, #0
    1900:	str	r0, [fp, #-12]
    1904:	b	1a88 <get_format+0x684>
    1908:	b	190c <get_format+0x508>
    190c:	ldr	r0, [sp, #80]	; 0x50
    1910:	ldr	r1, [sp, #84]	; 0x54
    1914:	rsbs	r0, r0, #79	; 0x4f
    1918:	rscs	r1, r1, #0
    191c:	str	r0, [sp, #24]
    1920:	str	r1, [sp, #20]
    1924:	blt	1938 <get_format+0x534>
    1928:	b	192c <get_format+0x528>
    192c:	movw	r0, #0
    1930:	str	r0, [fp, #-12]
    1934:	b	1a88 <get_format+0x684>
    1938:	sub	r1, fp, #100	; 0x64
    193c:	mov	r0, sp
    1940:	mov	r2, #0
    1944:	str	r2, [r0, #4]
    1948:	mov	r3, #20
    194c:	str	r3, [r0]
    1950:	add	r0, sp, #88	; 0x58
    1954:	mov	r3, #60	; 0x3c
    1958:	str	r2, [sp, #16]
    195c:	mov	r2, r3
    1960:	ldr	r3, [sp, #16]
    1964:	bl	0 <coda_cursor_read_bytes>
    1968:	cmp	r0, #0
    196c:	beq	197c <get_format+0x578>
    1970:	mvn	r0, #0
    1974:	str	r0, [fp, #-12]
    1978:	b	1a88 <get_format+0x684>
    197c:	sub	r0, fp, #100	; 0x64
    1980:	movw	r1, #0
    1984:	movt	r1, #0
    1988:	mov	r2, #20
    198c:	bl	0 <memcmp>
    1990:	cmp	r0, #0
    1994:	bne	19b0 <get_format+0x5ac>
    1998:	ldr	r0, [fp, #-20]	; 0xffffffec
    199c:	movw	r1, #8
    19a0:	str	r1, [r0]
    19a4:	movw	r0, #0
    19a8:	str	r0, [fp, #-12]
    19ac:	b	1a88 <get_format+0x684>
    19b0:	mov	r0, #0
    19b4:	str	r0, [sp, #76]	; 0x4c
    19b8:	mov	r0, #512	; 0x200
    19bc:	str	r0, [sp, #72]	; 0x48
    19c0:	ldr	r0, [sp, #72]	; 0x48
    19c4:	ldr	r1, [sp, #76]	; 0x4c
    19c8:	adds	r0, r0, #8
    19cc:	adc	r1, r1, #0
    19d0:	ldr	r2, [sp, #80]	; 0x50
    19d4:	ldr	r3, [sp, #84]	; 0x54
    19d8:	subs	r0, r0, r2
    19dc:	sbcs	r1, r1, r3
    19e0:	str	r0, [sp, #12]
    19e4:	str	r1, [sp, #8]
    19e8:	bge	1a80 <get_format+0x67c>
    19ec:	b	19f0 <get_format+0x5ec>
    19f0:	sub	r1, fp, #100	; 0x64
    19f4:	ldr	r2, [sp, #72]	; 0x48
    19f8:	ldr	r3, [sp, #76]	; 0x4c
    19fc:	mov	r0, sp
    1a00:	mov	ip, #0
    1a04:	str	ip, [r0, #4]
    1a08:	mov	ip, #8
    1a0c:	str	ip, [r0]
    1a10:	add	r0, sp, #88	; 0x58
    1a14:	bl	0 <coda_cursor_read_bytes>
    1a18:	cmp	r0, #0
    1a1c:	beq	1a2c <get_format+0x628>
    1a20:	mvn	r0, #0
    1a24:	str	r0, [fp, #-12]
    1a28:	b	1a88 <get_format+0x684>
    1a2c:	sub	r0, fp, #100	; 0x64
    1a30:	movw	r1, #0
    1a34:	movt	r1, #0
    1a38:	mov	r2, #8
    1a3c:	bl	0 <memcmp>
    1a40:	cmp	r0, #0
    1a44:	bne	1a60 <get_format+0x65c>
    1a48:	ldr	r0, [fp, #-20]	; 0xffffffec
    1a4c:	movw	r1, #4
    1a50:	str	r1, [r0]
    1a54:	movw	r0, #0
    1a58:	str	r0, [fp, #-12]
    1a5c:	b	1a88 <get_format+0x684>
    1a60:	ldr	r0, [sp, #72]	; 0x48
    1a64:	ldr	r1, [sp, #76]	; 0x4c
    1a68:	lsl	r1, r1, #1
    1a6c:	orr	r1, r1, r0, lsr #31
    1a70:	lsl	r0, r0, #1
    1a74:	str	r0, [sp, #72]	; 0x48
    1a78:	str	r1, [sp, #76]	; 0x4c
    1a7c:	b	19c0 <get_format+0x5bc>
    1a80:	movw	r0, #0
    1a84:	str	r0, [fp, #-12]
    1a88:	ldr	r0, [fp, #-12]
    1a8c:	sub	sp, fp, #8
    1a90:	pop	{r4, r5, fp, pc}

00001a94 <reopen_with_backend>:
    1a94:	push	{fp, lr}
    1a98:	mov	fp, sp
    1a9c:	sub	sp, sp, #16
    1aa0:	str	r0, [sp, #8]
    1aa4:	str	r1, [sp, #4]
    1aa8:	ldr	r0, [sp, #4]
    1aac:	cmp	r0, #9
    1ab0:	str	r0, [sp]
    1ab4:	bhi	1c04 <reopen_with_backend+0x170>
    1ab8:	add	r0, pc, #8
    1abc:	ldr	r1, [sp]
    1ac0:	ldr	r0, [r0, r1, lsl #2]
    1ac4:	mov	pc, r0
    1ac8:	.word	0x00001af0
    1acc:	.word	0x00001b10
    1ad0:	.word	0x00001b14
    1ad4:	.word	0x00001b34
    1ad8:	.word	0x00001b4c
    1adc:	.word	0x00001b64
    1ae0:	.word	0x00001b84
    1ae4:	.word	0x00001ba4
    1ae8:	.word	0x00001bc4
    1aec:	.word	0x00001be4
    1af0:	movw	r0, #0
    1af4:	movt	r0, #0
    1af8:	movw	r1, #0
    1afc:	movt	r1, #0
    1b00:	movw	r2, #362	; 0x16a
    1b04:	movw	r3, #0
    1b08:	movt	r3, #0
    1b0c:	bl	0 <__assert_fail>
    1b10:	b	1c04 <reopen_with_backend+0x170>
    1b14:	ldr	r0, [sp, #8]
    1b18:	bl	0 <coda_xml_reopen>
    1b1c:	cmp	r0, #0
    1b20:	beq	1b30 <reopen_with_backend+0x9c>
    1b24:	mvn	r0, #0
    1b28:	str	r0, [fp, #-4]
    1b2c:	b	1c0c <reopen_with_backend+0x178>
    1b30:	b	1c04 <reopen_with_backend+0x170>
    1b34:	mvn	r0, #10
    1b38:	movw	r1, #0
    1b3c:	bl	0 <coda_set_error>
    1b40:	mvn	r0, #0
    1b44:	str	r0, [fp, #-4]
    1b48:	b	1c0c <reopen_with_backend+0x178>
    1b4c:	mvn	r0, #12
    1b50:	movw	r1, #0
    1b54:	bl	0 <coda_set_error>
    1b58:	mvn	r0, #0
    1b5c:	str	r0, [fp, #-4]
    1b60:	b	1c0c <reopen_with_backend+0x178>
    1b64:	ldr	r0, [sp, #8]
    1b68:	bl	0 <coda_cdf_reopen>
    1b6c:	cmp	r0, #0
    1b70:	beq	1b80 <reopen_with_backend+0xec>
    1b74:	mvn	r0, #0
    1b78:	str	r0, [fp, #-4]
    1b7c:	b	1c0c <reopen_with_backend+0x178>
    1b80:	b	1c04 <reopen_with_backend+0x170>
    1b84:	ldr	r0, [sp, #8]
    1b88:	bl	0 <coda_netcdf_reopen>
    1b8c:	cmp	r0, #0
    1b90:	beq	1ba0 <reopen_with_backend+0x10c>
    1b94:	mvn	r0, #0
    1b98:	str	r0, [fp, #-4]
    1b9c:	b	1c0c <reopen_with_backend+0x178>
    1ba0:	b	1c04 <reopen_with_backend+0x170>
    1ba4:	ldr	r0, [sp, #8]
    1ba8:	bl	0 <coda_grib_reopen>
    1bac:	cmp	r0, #0
    1bb0:	beq	1bc0 <reopen_with_backend+0x12c>
    1bb4:	mvn	r0, #0
    1bb8:	str	r0, [fp, #-4]
    1bbc:	b	1c0c <reopen_with_backend+0x178>
    1bc0:	b	1c04 <reopen_with_backend+0x170>
    1bc4:	ldr	r0, [sp, #8]
    1bc8:	bl	0 <coda_rinex_reopen>
    1bcc:	cmp	r0, #0
    1bd0:	beq	1be0 <reopen_with_backend+0x14c>
    1bd4:	mvn	r0, #0
    1bd8:	str	r0, [fp, #-4]
    1bdc:	b	1c0c <reopen_with_backend+0x178>
    1be0:	b	1c04 <reopen_with_backend+0x170>
    1be4:	ldr	r0, [sp, #8]
    1be8:	bl	0 <coda_sp3_reopen>
    1bec:	cmp	r0, #0
    1bf0:	beq	1c00 <reopen_with_backend+0x16c>
    1bf4:	mvn	r0, #0
    1bf8:	str	r0, [fp, #-4]
    1bfc:	b	1c0c <reopen_with_backend+0x178>
    1c00:	b	1c04 <reopen_with_backend+0x170>
    1c04:	movw	r0, #0
    1c08:	str	r0, [fp, #-4]
    1c0c:	ldr	r0, [fp, #-4]
    1c10:	mov	sp, fp
    1c14:	pop	{fp, pc}
