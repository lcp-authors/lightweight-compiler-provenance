
../compcert-repos/stcorp-coda-3a25f25/CMakeFiles/codadump.dir/tools/codadump/codadump-ascii.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <write_index>:
   0:	push	{fp, lr}
   4:	add	fp, sp, #4
   8:	sub	sp, sp, #24
   c:	str	r0, [fp, #-24]	; 0xffffffe8
  10:	mov	r3, #0
  14:	str	r3, [fp, #-8]
  18:	mov	r3, #0
  1c:	str	r3, [fp, #-12]
  20:	b	fc <write_index+0xfc>
  24:	ldr	r2, [pc, #240]	; 11c <write_index+0x11c>
  28:	ldr	r3, [fp, #-12]
  2c:	add	r3, r3, #2
  30:	ldr	r3, [r2, r3, lsl #2]
  34:	sub	r2, fp, #20
  38:	mov	r1, r2
  3c:	mov	r0, r3
  40:	bl	0 <coda_type_get_class>
  44:	mov	r3, r0
  48:	cmp	r3, #0
  4c:	beq	54 <write_index+0x54>
  50:	bl	0 <handle_coda_error>
  54:	ldr	r3, [fp, #-20]	; 0xffffffec
  58:	cmp	r3, #1
  5c:	bne	f0 <write_index+0xf0>
  60:	mov	r3, #0
  64:	str	r3, [fp, #-16]
  68:	b	b4 <write_index+0xb4>
  6c:	ldr	r1, [pc, #168]	; 11c <write_index+0x11c>
  70:	ldr	r2, [fp, #-8]
  74:	mov	r3, r2
  78:	lsl	r3, r3, #2
  7c:	add	r3, r3, r2
  80:	lsl	r3, r3, #2
  84:	ldr	r2, [fp, #-16]
  88:	add	r3, r3, r2
  8c:	add	r3, r3, #212	; 0xd4
  90:	ldr	r2, [r1, r3, lsl #2]
  94:	ldr	r3, [pc, #132]	; 120 <write_index+0x120>
  98:	ldr	r3, [r3]
  9c:	ldr	r1, [pc, #128]	; 124 <write_index+0x124>
  a0:	ldr	r0, [fp, #-24]	; 0xffffffe8
  a4:	bl	0 <fprintf>
  a8:	ldr	r3, [fp, #-16]
  ac:	add	r3, r3, #1
  b0:	str	r3, [fp, #-16]
  b4:	ldr	r1, [pc, #96]	; 11c <write_index+0x11c>
  b8:	ldr	r2, [fp, #-8]
  bc:	mov	r3, r2
  c0:	lsl	r3, r3, #2
  c4:	add	r3, r3, r2
  c8:	lsl	r3, r3, #4
  cc:	add	r3, r1, r3
  d0:	add	r3, r3, #804	; 0x324
  d4:	ldr	r2, [r3]
  d8:	ldr	r3, [fp, #-16]
  dc:	cmp	r2, r3
  e0:	bgt	6c <write_index+0x6c>
  e4:	ldr	r3, [fp, #-8]
  e8:	add	r3, r3, #1
  ec:	str	r3, [fp, #-8]
  f0:	ldr	r3, [fp, #-12]
  f4:	add	r3, r3, #1
  f8:	str	r3, [fp, #-12]
  fc:	ldr	r3, [pc, #24]	; 11c <write_index+0x11c>
 100:	ldr	r2, [r3, #136]	; 0x88
 104:	ldr	r3, [fp, #-12]
 108:	cmp	r2, r3
 10c:	bgt	24 <write_index+0x24>
 110:	nop			; (mov r0, r0)
 114:	sub	sp, fp, #4
 118:	pop	{fp, pc}
	...

00000128 <write_basic_data>:
 128:	push	{r4, r5, fp, lr}
 12c:	add	fp, sp, #12
 130:	sub	sp, sp, #216	; 0xd8
 134:	str	r0, [fp, #-208]	; 0xffffff30
 138:	str	r1, [fp, #-212]	; 0xffffff2c
 13c:	ldr	r3, [pc, #2028]	; 930 <write_basic_data+0x808>
 140:	ldr	r3, [r3]
 144:	cmp	r3, #0
 148:	beq	154 <write_basic_data+0x2c>
 14c:	ldr	r0, [fp, #-208]	; 0xffffff30
 150:	bl	0 <write_index>
 154:	ldr	r2, [pc, #2008]	; 934 <write_basic_data+0x80c>
 158:	ldr	r3, [fp, #-212]	; 0xffffff2c
 15c:	add	r3, r3, #2
 160:	ldr	r3, [r2, r3, lsl #2]
 164:	sub	r2, fp, #40	; 0x28
 168:	mov	r1, r2
 16c:	mov	r0, r3
 170:	bl	0 <coda_type_get_class>
 174:	mov	r3, r0
 178:	cmp	r3, #0
 17c:	beq	184 <write_basic_data+0x5c>
 180:	bl	0 <handle_coda_error>
 184:	ldr	r3, [fp, #-40]	; 0xffffffd8
 188:	cmp	r3, #6
 18c:	ldrls	pc, [pc, r3, lsl #2]
 190:	b	918 <write_basic_data+0x7f0>
 194:	.word	0x000008f8
 198:	.word	0x000008f8
 19c:	.word	0x000001b0
 1a0:	.word	0x000001b0
 1a4:	.word	0x000001b0
 1a8:	.word	0x000001b0
 1ac:	.word	0x00000738
 1b0:	ldr	r2, [pc, #1916]	; 934 <write_basic_data+0x80c>
 1b4:	ldr	r3, [fp, #-212]	; 0xffffff2c
 1b8:	add	r3, r3, #2
 1bc:	ldr	r3, [r2, r3, lsl #2]
 1c0:	sub	r2, fp, #44	; 0x2c
 1c4:	mov	r1, r2
 1c8:	mov	r0, r3
 1cc:	bl	0 <coda_type_get_read_type>
 1d0:	mov	r3, r0
 1d4:	cmp	r3, #0
 1d8:	beq	1e0 <write_basic_data+0xb8>
 1dc:	bl	0 <handle_coda_error>
 1e0:	ldr	r3, [fp, #-44]	; 0xffffffd4
 1e4:	add	r3, r3, #1
 1e8:	cmp	r3, #13
 1ec:	ldrls	pc, [pc, r3, lsl #2]
 1f0:	b	90c <write_basic_data+0x7e4>
 1f4:	.word	0x00000720
 1f8:	.word	0x000005d4
 1fc:	.word	0x0000060c
 200:	.word	0x000005d4
 204:	.word	0x0000060c
 208:	.word	0x000005d4
 20c:	.word	0x0000060c
 210:	.word	0x00000644
 214:	.word	0x00000688
 218:	.word	0x000006cc
 21c:	.word	0x000006cc
 220:	.word	0x0000022c
 224:	.word	0x00000288
 228:	.word	0x00000354
 22c:	sub	r3, fp, #45	; 0x2d
 230:	mov	r1, r3
 234:	ldr	r0, [pc, #1788]	; 938 <write_basic_data+0x810>
 238:	bl	0 <coda_cursor_read_char>
 23c:	mov	r3, r0
 240:	cmp	r3, #0
 244:	beq	24c <write_basic_data+0x124>
 248:	bl	0 <handle_coda_error>
 24c:	ldr	r3, [pc, #1768]	; 93c <write_basic_data+0x814>
 250:	ldr	r3, [r3]
 254:	cmp	r3, #0
 258:	beq	274 <write_basic_data+0x14c>
 25c:	ldrb	r3, [fp, #-45]	; 0xffffffd3
 260:	mov	r2, r3
 264:	ldr	r1, [pc, #1748]	; 940 <write_basic_data+0x818>
 268:	ldr	r0, [fp, #-208]	; 0xffffff30
 26c:	bl	0 <fprintf>
 270:	b	734 <write_basic_data+0x60c>
 274:	ldrb	r3, [fp, #-45]	; 0xffffffd3
 278:	ldr	r1, [fp, #-208]	; 0xffffff30
 27c:	mov	r0, r3
 280:	bl	0 <fputc>
 284:	b	734 <write_basic_data+0x60c>
 288:	sub	r3, fp, #52	; 0x34
 28c:	mov	r1, r3
 290:	ldr	r0, [pc, #1696]	; 938 <write_basic_data+0x810>
 294:	bl	0 <coda_cursor_get_string_length>
 298:	mov	r3, r0
 29c:	cmp	r3, #0
 2a0:	beq	2a8 <write_basic_data+0x180>
 2a4:	bl	0 <handle_coda_error>
 2a8:	ldr	r3, [fp, #-52]	; 0xffffffcc
 2ac:	add	r3, r3, #1
 2b0:	mov	r0, r3
 2b4:	bl	0 <malloc>
 2b8:	mov	r3, r0
 2bc:	str	r3, [fp, #-20]	; 0xffffffec
 2c0:	ldr	r3, [fp, #-20]	; 0xffffffec
 2c4:	cmp	r3, #0
 2c8:	bne	2f0 <write_basic_data+0x1c8>
 2cc:	ldr	r3, [fp, #-52]	; 0xffffffcc
 2d0:	add	r2, r3, #1
 2d4:	mov	r3, #126	; 0x7e
 2d8:	str	r3, [sp]
 2dc:	ldr	r3, [pc, #1632]	; 944 <write_basic_data+0x81c>
 2e0:	ldr	r1, [pc, #1632]	; 948 <write_basic_data+0x820>
 2e4:	mvn	r0, #0
 2e8:	bl	0 <coda_set_error>
 2ec:	bl	0 <handle_coda_error>
 2f0:	ldr	r3, [fp, #-52]	; 0xffffffcc
 2f4:	add	r3, r3, #1
 2f8:	mov	r2, r3
 2fc:	ldr	r1, [fp, #-20]	; 0xffffffec
 300:	ldr	r0, [pc, #1584]	; 938 <write_basic_data+0x810>
 304:	bl	0 <coda_cursor_read_string>
 308:	mov	r3, r0
 30c:	cmp	r3, #0
 310:	beq	318 <write_basic_data+0x1f0>
 314:	bl	0 <handle_coda_error>
 318:	ldr	r3, [pc, #1564]	; 93c <write_basic_data+0x814>
 31c:	ldr	r3, [r3]
 320:	cmp	r3, #0
 324:	beq	33c <write_basic_data+0x214>
 328:	ldr	r2, [fp, #-20]	; 0xffffffec
 32c:	ldr	r1, [pc, #1560]	; 94c <write_basic_data+0x824>
 330:	ldr	r0, [fp, #-208]	; 0xffffff30
 334:	bl	0 <fprintf>
 338:	b	348 <write_basic_data+0x220>
 33c:	ldr	r1, [fp, #-208]	; 0xffffff30
 340:	ldr	r0, [fp, #-20]	; 0xffffffec
 344:	bl	0 <fputs>
 348:	ldr	r0, [fp, #-20]	; 0xffffffec
 34c:	bl	0 <free>
 350:	b	734 <write_basic_data+0x60c>
 354:	sub	r3, fp, #60	; 0x3c
 358:	mov	r1, r3
 35c:	ldr	r0, [pc, #1492]	; 938 <write_basic_data+0x810>
 360:	bl	0 <coda_cursor_get_bit_size>
 364:	mov	r3, r0
 368:	cmp	r3, #0
 36c:	beq	374 <write_basic_data+0x24c>
 370:	bl	0 <handle_coda_error>
 374:	ldrd	r2, [fp, #-60]	; 0xffffffc4
 378:	lsr	r4, r2, #3
 37c:	orr	r4, r4, r3, lsl #29
 380:	asr	r5, r3, #3
 384:	ldrd	r2, [fp, #-60]	; 0xffffffc4
 388:	mov	r0, #7
 38c:	mov	r1, #0
 390:	and	r2, r2, r0
 394:	and	r3, r3, r1
 398:	orrs	r3, r2, r3
 39c:	beq	3ac <write_basic_data+0x284>
 3a0:	mov	r2, #1
 3a4:	mov	r3, #0
 3a8:	b	3b4 <write_basic_data+0x28c>
 3ac:	mov	r2, #0
 3b0:	mov	r3, #0
 3b4:	adds	r2, r2, r4
 3b8:	adc	r3, r3, r5
 3bc:	strd	r2, [fp, #-28]	; 0xffffffe4
 3c0:	ldr	r3, [fp, #-28]	; 0xffffffe4
 3c4:	mov	r0, r3
 3c8:	bl	0 <malloc>
 3cc:	mov	r3, r0
 3d0:	str	r3, [fp, #-32]	; 0xffffffe0
 3d4:	ldr	r3, [fp, #-32]	; 0xffffffe0
 3d8:	cmp	r3, #0
 3dc:	bne	400 <write_basic_data+0x2d8>
 3e0:	ldr	r2, [fp, #-28]	; 0xffffffe4
 3e4:	mov	r3, #163	; 0xa3
 3e8:	str	r3, [sp]
 3ec:	ldr	r3, [pc, #1360]	; 944 <write_basic_data+0x81c>
 3f0:	ldr	r1, [pc, #1360]	; 948 <write_basic_data+0x820>
 3f4:	mvn	r0, #0
 3f8:	bl	0 <coda_set_error>
 3fc:	bl	0 <handle_coda_error>
 400:	ldrd	r2, [fp, #-60]	; 0xffffffc4
 404:	strd	r2, [sp]
 408:	mov	r2, #0
 40c:	mov	r3, #0
 410:	ldr	r1, [fp, #-32]	; 0xffffffe0
 414:	ldr	r0, [pc, #1308]	; 938 <write_basic_data+0x810>
 418:	bl	0 <coda_cursor_read_bits>
 41c:	mov	r3, r0
 420:	cmp	r3, #0
 424:	beq	42c <write_basic_data+0x304>
 428:	bl	0 <handle_coda_error>
 42c:	mov	r3, #0
 430:	str	r3, [fp, #-16]
 434:	b	5ac <write_basic_data+0x484>
 438:	ldr	r3, [fp, #-16]
 43c:	ldr	r2, [fp, #-32]	; 0xffffffe0
 440:	add	r3, r2, r3
 444:	ldrb	r3, [r3]
 448:	strb	r3, [fp, #-33]	; 0xffffffdf
 44c:	ldrb	r3, [fp, #-33]	; 0xffffffdf
 450:	cmp	r3, #10
 454:	beq	4e8 <write_basic_data+0x3c0>
 458:	cmp	r3, #10
 45c:	bgt	47c <write_basic_data+0x354>
 460:	cmp	r3, #8
 464:	beq	4b8 <write_basic_data+0x390>
 468:	cmp	r3, #8
 46c:	bgt	4d0 <write_basic_data+0x3a8>
 470:	cmp	r3, #7
 474:	beq	4a0 <write_basic_data+0x378>
 478:	b	560 <write_basic_data+0x438>
 47c:	cmp	r3, #12
 480:	beq	518 <write_basic_data+0x3f0>
 484:	cmp	r3, #12
 488:	blt	500 <write_basic_data+0x3d8>
 48c:	cmp	r3, #13
 490:	beq	530 <write_basic_data+0x408>
 494:	cmp	r3, #92	; 0x5c
 498:	beq	548 <write_basic_data+0x420>
 49c:	b	560 <write_basic_data+0x438>
 4a0:	ldr	r3, [fp, #-208]	; 0xffffff30
 4a4:	mov	r2, #2
 4a8:	mov	r1, #1
 4ac:	ldr	r0, [pc, #1180]	; 950 <write_basic_data+0x828>
 4b0:	bl	0 <fwrite>
 4b4:	b	5a0 <write_basic_data+0x478>
 4b8:	ldr	r3, [fp, #-208]	; 0xffffff30
 4bc:	mov	r2, #2
 4c0:	mov	r1, #1
 4c4:	ldr	r0, [pc, #1160]	; 954 <write_basic_data+0x82c>
 4c8:	bl	0 <fwrite>
 4cc:	b	5a0 <write_basic_data+0x478>
 4d0:	ldr	r3, [fp, #-208]	; 0xffffff30
 4d4:	mov	r2, #2
 4d8:	mov	r1, #1
 4dc:	ldr	r0, [pc, #1140]	; 958 <write_basic_data+0x830>
 4e0:	bl	0 <fwrite>
 4e4:	b	5a0 <write_basic_data+0x478>
 4e8:	ldr	r3, [fp, #-208]	; 0xffffff30
 4ec:	mov	r2, #2
 4f0:	mov	r1, #1
 4f4:	ldr	r0, [pc, #1120]	; 95c <write_basic_data+0x834>
 4f8:	bl	0 <fwrite>
 4fc:	b	5a0 <write_basic_data+0x478>
 500:	ldr	r3, [fp, #-208]	; 0xffffff30
 504:	mov	r2, #2
 508:	mov	r1, #1
 50c:	ldr	r0, [pc, #1100]	; 960 <write_basic_data+0x838>
 510:	bl	0 <fwrite>
 514:	b	5a0 <write_basic_data+0x478>
 518:	ldr	r3, [fp, #-208]	; 0xffffff30
 51c:	mov	r2, #2
 520:	mov	r1, #1
 524:	ldr	r0, [pc, #1080]	; 964 <write_basic_data+0x83c>
 528:	bl	0 <fwrite>
 52c:	b	5a0 <write_basic_data+0x478>
 530:	ldr	r3, [fp, #-208]	; 0xffffff30
 534:	mov	r2, #2
 538:	mov	r1, #1
 53c:	ldr	r0, [pc, #1060]	; 968 <write_basic_data+0x840>
 540:	bl	0 <fwrite>
 544:	b	5a0 <write_basic_data+0x478>
 548:	ldr	r3, [fp, #-208]	; 0xffffff30
 54c:	mov	r2, #2
 550:	mov	r1, #1
 554:	ldr	r0, [pc, #1040]	; 96c <write_basic_data+0x844>
 558:	bl	0 <fwrite>
 55c:	b	5a0 <write_basic_data+0x478>
 560:	ldrb	r3, [fp, #-33]	; 0xffffffdf
 564:	cmp	r3, #31
 568:	bls	58c <write_basic_data+0x464>
 56c:	ldrb	r3, [fp, #-33]	; 0xffffffdf
 570:	cmp	r3, #126	; 0x7e
 574:	bhi	58c <write_basic_data+0x464>
 578:	ldrb	r3, [fp, #-33]	; 0xffffffdf
 57c:	ldr	r1, [fp, #-208]	; 0xffffff30
 580:	mov	r0, r3
 584:	bl	0 <fputc>
 588:	b	5a0 <write_basic_data+0x478>
 58c:	ldrb	r3, [fp, #-33]	; 0xffffffdf
 590:	mov	r2, r3
 594:	ldr	r1, [pc, #980]	; 970 <write_basic_data+0x848>
 598:	ldr	r0, [fp, #-208]	; 0xffffff30
 59c:	bl	0 <fprintf>
 5a0:	ldr	r3, [fp, #-16]
 5a4:	add	r3, r3, #1
 5a8:	str	r3, [fp, #-16]
 5ac:	ldr	r3, [fp, #-16]
 5b0:	mov	r0, r3
 5b4:	asr	r1, r0, #31
 5b8:	ldrd	r2, [fp, #-28]	; 0xffffffe4
 5bc:	cmp	r0, r2
 5c0:	sbcs	r3, r1, r3
 5c4:	blt	438 <write_basic_data+0x310>
 5c8:	ldr	r0, [fp, #-32]	; 0xffffffe0
 5cc:	bl	0 <free>
 5d0:	b	734 <write_basic_data+0x60c>
 5d4:	sub	r3, fp, #64	; 0x40
 5d8:	mov	r1, r3
 5dc:	ldr	r0, [pc, #852]	; 938 <write_basic_data+0x810>
 5e0:	bl	0 <coda_cursor_read_int32>
 5e4:	mov	r3, r0
 5e8:	cmp	r3, #0
 5ec:	beq	5f4 <write_basic_data+0x4cc>
 5f0:	bl	0 <handle_coda_error>
 5f4:	ldr	r3, [fp, #-64]	; 0xffffffc0
 5f8:	mov	r2, r3
 5fc:	ldr	r1, [pc, #880]	; 974 <write_basic_data+0x84c>
 600:	ldr	r0, [fp, #-208]	; 0xffffff30
 604:	bl	0 <fprintf>
 608:	b	734 <write_basic_data+0x60c>
 60c:	sub	r3, fp, #68	; 0x44
 610:	mov	r1, r3
 614:	ldr	r0, [pc, #796]	; 938 <write_basic_data+0x810>
 618:	bl	0 <coda_cursor_read_uint32>
 61c:	mov	r3, r0
 620:	cmp	r3, #0
 624:	beq	62c <write_basic_data+0x504>
 628:	bl	0 <handle_coda_error>
 62c:	ldr	r3, [fp, #-68]	; 0xffffffbc
 630:	mov	r2, r3
 634:	ldr	r1, [pc, #828]	; 978 <write_basic_data+0x850>
 638:	ldr	r0, [fp, #-208]	; 0xffffff30
 63c:	bl	0 <fprintf>
 640:	b	734 <write_basic_data+0x60c>
 644:	sub	r3, fp, #76	; 0x4c
 648:	mov	r1, r3
 64c:	ldr	r0, [pc, #740]	; 938 <write_basic_data+0x810>
 650:	bl	0 <coda_cursor_read_int64>
 654:	mov	r3, r0
 658:	cmp	r3, #0
 65c:	beq	664 <write_basic_data+0x53c>
 660:	bl	0 <handle_coda_error>
 664:	ldrd	r0, [fp, #-76]	; 0xffffffb4
 668:	sub	r3, fp, #100	; 0x64
 66c:	mov	r2, r3
 670:	bl	0 <coda_str64>
 674:	sub	r3, fp, #100	; 0x64
 678:	ldr	r1, [fp, #-208]	; 0xffffff30
 67c:	mov	r0, r3
 680:	bl	0 <fputs>
 684:	b	734 <write_basic_data+0x60c>
 688:	sub	r3, fp, #108	; 0x6c
 68c:	mov	r1, r3
 690:	ldr	r0, [pc, #672]	; 938 <write_basic_data+0x810>
 694:	bl	0 <coda_cursor_read_uint64>
 698:	mov	r3, r0
 69c:	cmp	r3, #0
 6a0:	beq	6a8 <write_basic_data+0x580>
 6a4:	bl	0 <handle_coda_error>
 6a8:	ldrd	r0, [fp, #-108]	; 0xffffff94
 6ac:	sub	r3, fp, #132	; 0x84
 6b0:	mov	r2, r3
 6b4:	bl	0 <coda_str64u>
 6b8:	sub	r3, fp, #132	; 0x84
 6bc:	ldr	r1, [fp, #-208]	; 0xffffff30
 6c0:	mov	r0, r3
 6c4:	bl	0 <fputs>
 6c8:	b	734 <write_basic_data+0x60c>
 6cc:	sub	r3, fp, #140	; 0x8c
 6d0:	mov	r1, r3
 6d4:	ldr	r0, [pc, #604]	; 938 <write_basic_data+0x810>
 6d8:	bl	0 <coda_cursor_read_double>
 6dc:	mov	r3, r0
 6e0:	cmp	r3, #0
 6e4:	beq	6ec <write_basic_data+0x5c4>
 6e8:	bl	0 <handle_coda_error>
 6ec:	ldr	r3, [fp, #-44]	; 0xffffffd4
 6f0:	cmp	r3, #8
 6f4:	bne	70c <write_basic_data+0x5e4>
 6f8:	ldrd	r2, [fp, #-140]	; 0xffffff74
 6fc:	ldr	r1, [pc, #632]	; 97c <write_basic_data+0x854>
 700:	ldr	r0, [fp, #-208]	; 0xffffff30
 704:	bl	0 <fprintf>
 708:	b	734 <write_basic_data+0x60c>
 70c:	ldrd	r2, [fp, #-140]	; 0xffffff74
 710:	ldr	r1, [pc, #616]	; 980 <write_basic_data+0x858>
 714:	ldr	r0, [fp, #-208]	; 0xffffff30
 718:	bl	0 <fprintf>
 71c:	b	734 <write_basic_data+0x60c>
 720:	ldr	r3, [pc, #604]	; 984 <write_basic_data+0x85c>
 724:	ldr	r2, [pc, #604]	; 988 <write_basic_data+0x860>
 728:	ldr	r1, [pc, #532]	; 944 <write_basic_data+0x81c>
 72c:	ldr	r0, [pc, #600]	; 98c <write_basic_data+0x864>
 730:	bl	0 <__assert_fail>
 734:	b	90c <write_basic_data+0x7e4>
 738:	ldr	r2, [pc, #500]	; 934 <write_basic_data+0x80c>
 73c:	ldr	r3, [fp, #-212]	; 0xffffff2c
 740:	add	r3, r3, #2
 744:	ldr	r3, [r2, r3, lsl #2]
 748:	sub	r2, fp, #144	; 0x90
 74c:	mov	r1, r2
 750:	mov	r0, r3
 754:	bl	0 <coda_type_get_special_type>
 758:	mov	r3, r0
 75c:	cmp	r3, #0
 760:	beq	768 <write_basic_data+0x640>
 764:	bl	0 <handle_coda_error>
 768:	ldr	r3, [fp, #-144]	; 0xffffff70
 76c:	cmp	r3, #3
 770:	ldrls	pc, [pc, r3, lsl #2]
 774:	b	914 <write_basic_data+0x7ec>
 778:	.word	0x000008f0
 77c:	.word	0x00000788
 780:	.word	0x00000788
 784:	.word	0x000008a0
 788:	sub	r3, fp, #156	; 0x9c
 78c:	mov	r1, r3
 790:	ldr	r0, [pc, #416]	; 938 <write_basic_data+0x810>
 794:	bl	0 <coda_cursor_read_double>
 798:	mov	r3, r0
 79c:	cmp	r3, #0
 7a0:	beq	7a8 <write_basic_data+0x680>
 7a4:	bl	0 <handle_coda_error>
 7a8:	ldr	r3, [fp, #-144]	; 0xffffff70
 7ac:	cmp	r3, #2
 7b0:	bne	888 <write_basic_data+0x760>
 7b4:	ldr	r3, [pc, #468]	; 990 <write_basic_data+0x868>
 7b8:	ldr	r3, [r3]
 7bc:	cmp	r3, #0
 7c0:	beq	888 <write_basic_data+0x760>
 7c4:	vldr	d7, [fp, #-156]	; 0xffffff64
 7c8:	vmov.f64	d0, d7
 7cc:	bl	0 <coda_isNaN>
 7d0:	mov	r3, r0
 7d4:	cmp	r3, #0
 7d8:	bne	7f4 <write_basic_data+0x6cc>
 7dc:	vldr	d7, [fp, #-156]	; 0xffffff64
 7e0:	vmov.f64	d0, d7
 7e4:	bl	0 <coda_isInf>
 7e8:	mov	r3, r0
 7ec:	cmp	r3, #0
 7f0:	beq	824 <write_basic_data+0x6fc>
 7f4:	ldr	r3, [pc, #408]	; 994 <write_basic_data+0x86c>
 7f8:	sub	ip, fp, #184	; 0xb8
 7fc:	mov	lr, r3
 800:	ldm	lr!, {r0, r1, r2, r3}
 804:	stmia	ip!, {r0, r1, r2, r3}
 808:	ldm	lr, {r0, r1, r2}
 80c:	stmia	ip!, {r0, r1}
 810:	strh	r2, [ip]
 814:	add	ip, ip, #2
 818:	lsr	r3, r2, #16
 81c:	strb	r3, [ip]
 820:	b	84c <write_basic_data+0x724>
 824:	vldr	d7, [fp, #-156]	; 0xffffff64
 828:	sub	r3, fp, #184	; 0xb8
 82c:	mov	r1, r3
 830:	ldr	r0, [pc, #352]	; 998 <write_basic_data+0x870>
 834:	vmov.f64	d0, d7
 838:	bl	0 <coda_time_double_to_string>
 83c:	mov	r3, r0
 840:	cmp	r3, #0
 844:	beq	84c <write_basic_data+0x724>
 848:	bl	0 <handle_coda_error>
 84c:	ldr	r3, [pc, #232]	; 93c <write_basic_data+0x814>
 850:	ldr	r3, [r3]
 854:	cmp	r3, #0
 858:	beq	874 <write_basic_data+0x74c>
 85c:	sub	r3, fp, #184	; 0xb8
 860:	mov	r2, r3
 864:	ldr	r1, [pc, #224]	; 94c <write_basic_data+0x824>
 868:	ldr	r0, [fp, #-208]	; 0xffffff30
 86c:	bl	0 <fprintf>
 870:	b	89c <write_basic_data+0x774>
 874:	sub	r3, fp, #184	; 0xb8
 878:	ldr	r1, [fp, #-208]	; 0xffffff30
 87c:	mov	r0, r3
 880:	bl	0 <fputs>
 884:	b	89c <write_basic_data+0x774>
 888:	ldrd	r2, [fp, #-156]	; 0xffffff64
 88c:	ldr	r1, [pc, #236]	; 980 <write_basic_data+0x858>
 890:	ldr	r0, [fp, #-208]	; 0xffffff30
 894:	bl	0 <fprintf>
 898:	b	8f4 <write_basic_data+0x7cc>
 89c:	b	8f4 <write_basic_data+0x7cc>
 8a0:	sub	r3, fp, #204	; 0xcc
 8a4:	mov	r1, r3
 8a8:	ldr	r0, [pc, #136]	; 938 <write_basic_data+0x810>
 8ac:	bl	0 <coda_cursor_read_complex_double_pair>
 8b0:	mov	r3, r0
 8b4:	cmp	r3, #0
 8b8:	beq	8c0 <write_basic_data+0x798>
 8bc:	bl	0 <handle_coda_error>
 8c0:	ldrd	r0, [fp, #-204]	; 0xffffff34
 8c4:	ldr	r3, [pc, #208]	; 99c <write_basic_data+0x874>
 8c8:	ldr	ip, [r3]
 8cc:	ldrd	r2, [fp, #-196]	; 0xffffff3c
 8d0:	strd	r2, [sp, #8]
 8d4:	str	ip, [sp]
 8d8:	mov	r2, r0
 8dc:	mov	r3, r1
 8e0:	ldr	r1, [pc, #184]	; 9a0 <write_basic_data+0x878>
 8e4:	ldr	r0, [fp, #-208]	; 0xffffff30
 8e8:	bl	0 <fprintf>
 8ec:	b	8f4 <write_basic_data+0x7cc>
 8f0:	nop			; (mov r0, r0)
 8f4:	b	914 <write_basic_data+0x7ec>
 8f8:	ldr	r3, [pc, #132]	; 984 <write_basic_data+0x85c>
 8fc:	mov	r2, #368	; 0x170
 900:	ldr	r1, [pc, #60]	; 944 <write_basic_data+0x81c>
 904:	ldr	r0, [pc, #128]	; 98c <write_basic_data+0x864>
 908:	bl	0 <__assert_fail>
 90c:	nop			; (mov r0, r0)
 910:	b	918 <write_basic_data+0x7f0>
 914:	nop			; (mov r0, r0)
 918:	ldr	r1, [fp, #-208]	; 0xffffff30
 91c:	mov	r0, #10
 920:	bl	0 <fputc>
 924:	nop			; (mov r0, r0)
 928:	sub	sp, fp, #12
 92c:	pop	{r4, r5, fp, pc}
	...
 938:	.word	0x00000090
 93c:	.word	0x00000000
 940:	.word	0x00000008
 944:	.word	0x00000010
 948:	.word	0x00000064
 94c:	.word	0x0000009c
 950:	.word	0x000000a4
 954:	.word	0x000000a8
 958:	.word	0x000000ac
 95c:	.word	0x000000b0
 960:	.word	0x000000b4
 964:	.word	0x000000b8
 968:	.word	0x000000bc
 96c:	.word	0x000000c0
 970:	.word	0x000000c4
 974:	.word	0x000000cc
 978:	.word	0x000000d0
 97c:	.word	0x000000d4
 980:	.word	0x000000dc
 984:	.word	0x00000128
 988:	.word	0x00000126
 98c:	.word	0x000000e4
 990:	.word	0x00000000
 994:	.word	0x000000e8
 998:	.word	0x00000104
 99c:	.word	0x00000000
 9a0:	.word	0x00000120

000009a4 <write_data>:
 9a4:	push	{fp, lr}
 9a8:	add	fp, sp, #4
 9ac:	sub	sp, sp, #80	; 0x50
 9b0:	str	r0, [fp, #-72]	; 0xffffffb8
 9b4:	str	r1, [fp, #-76]	; 0xffffffb4
 9b8:	str	r2, [fp, #-80]	; 0xffffffb0
 9bc:	str	r3, [fp, #-84]	; 0xffffffac
 9c0:	ldr	r2, [pc, #1160]	; e50 <write_data+0x4ac>
 9c4:	ldr	r3, [fp, #-76]	; 0xffffffb4
 9c8:	add	r3, r3, #2
 9cc:	ldr	r3, [r2, r3, lsl #2]
 9d0:	sub	r2, fp, #32
 9d4:	mov	r1, r2
 9d8:	mov	r0, r3
 9dc:	bl	0 <coda_type_get_class>
 9e0:	mov	r3, r0
 9e4:	cmp	r3, #0
 9e8:	beq	9f0 <write_data+0x4c>
 9ec:	bl	0 <handle_coda_error>
 9f0:	ldr	r3, [fp, #-32]	; 0xffffffe0
 9f4:	cmp	r3, #0
 9f8:	beq	d90 <write_data+0x3ec>
 9fc:	cmp	r3, #1
 a00:	bne	e30 <write_data+0x48c>
 a04:	ldr	r2, [fp, #-80]	; 0xffffffb0
 a08:	mov	r3, r2
 a0c:	lsl	r3, r3, #2
 a10:	add	r3, r3, r2
 a14:	lsl	r3, r3, #4
 a18:	add	r3, r3, #800	; 0x320
 a1c:	ldr	r2, [pc, #1068]	; e50 <write_data+0x4ac>
 a20:	add	r3, r3, r2
 a24:	str	r3, [fp, #-20]	; 0xffffffec
 a28:	ldr	r3, [fp, #-20]	; 0xffffffec
 a2c:	ldr	r3, [r3]
 a30:	str	r3, [fp, #-24]	; 0xffffffe8
 a34:	ldr	r3, [fp, #-80]	; 0xffffffb0
 a38:	cmp	r3, #0
 a3c:	bne	a4c <write_data+0xa8>
 a40:	ldr	r3, [fp, #-20]	; 0xffffffec
 a44:	mov	r2, #0
 a48:	str	r2, [r3, #44]	; 0x2c
 a4c:	ldr	r3, [pc, #1024]	; e54 <write_data+0x4b0>
 a50:	ldr	r2, [r3, #104]	; 0x68
 a54:	ldr	r3, [fp, #-20]	; 0xffffffec
 a58:	ldr	r1, [r3, #4]
 a5c:	ldr	r3, [fp, #-24]	; 0xffffffe8
 a60:	add	r3, r1, r3
 a64:	cmp	r2, r3
 a68:	movge	r3, #1
 a6c:	movlt	r3, #0
 a70:	uxtb	r3, r3
 a74:	str	r3, [fp, #-28]	; 0xffffffe4
 a78:	ldr	r3, [fp, #-28]	; 0xffffffe4
 a7c:	cmp	r3, #0
 a80:	beq	ad8 <write_data+0x134>
 a84:	ldr	r3, [pc, #964]	; e50 <write_data+0x4ac>
 a88:	ldr	r3, [r3, #3360]	; 0xd20
 a8c:	sub	r2, r3, #1
 a90:	ldr	r3, [fp, #-80]	; 0xffffffb0
 a94:	cmp	r2, r3
 a98:	ble	ad8 <write_data+0x134>
 a9c:	ldr	r3, [fp, #-80]	; 0xffffffb0
 aa0:	add	r2, r3, #1
 aa4:	ldr	r3, [fp, #-20]	; 0xffffffec
 aa8:	ldr	r3, [r3, #44]	; 0x2c
 aac:	ldr	r1, [fp, #-20]	; 0xffffffec
 ab0:	ldr	r1, [r1, #40]	; 0x28
 ab4:	mul	r1, r1, r3
 ab8:	ldr	r0, [pc, #912]	; e50 <write_data+0x4ac>
 abc:	mov	r3, r2
 ac0:	lsl	r3, r3, #2
 ac4:	add	r3, r3, r2
 ac8:	lsl	r3, r3, #4
 acc:	add	r3, r0, r3
 ad0:	add	r3, r3, #844	; 0x34c
 ad4:	str	r1, [r3]
 ad8:	mov	r3, #1
 adc:	str	r3, [fp, #-8]
 ae0:	mov	r3, #0
 ae4:	str	r3, [fp, #-12]
 ae8:	b	bc8 <write_data+0x224>
 aec:	ldr	r2, [fp, #-24]	; 0xffffffe8
 af0:	ldr	r3, [fp, #-12]
 af4:	add	r3, r2, r3
 af8:	ldr	r2, [pc, #852]	; e54 <write_data+0x4b0>
 afc:	add	r3, r3, #18
 b00:	ldr	r3, [r2, r3, lsl #2]
 b04:	cmp	r3, #0
 b08:	beq	b58 <write_data+0x1b4>
 b0c:	ldr	r2, [fp, #-24]	; 0xffffffe8
 b10:	ldr	r3, [fp, #-12]
 b14:	add	r3, r2, r3
 b18:	ldr	r2, [pc, #820]	; e54 <write_data+0x4b0>
 b1c:	add	r3, r3, #26
 b20:	lsl	r3, r3, #2
 b24:	add	r3, r2, r3
 b28:	ldr	r2, [r3, #4]
 b2c:	ldr	r3, [fp, #-20]	; 0xffffffec
 b30:	ldr	r3, [r3, #44]	; 0x2c
 b34:	lsl	r3, r3, #2
 b38:	add	r3, r2, r3
 b3c:	ldr	r2, [r3]
 b40:	ldr	r3, [fp, #-12]
 b44:	lsl	r3, r3, #2
 b48:	sub	r1, fp, #4
 b4c:	add	r3, r1, r3
 b50:	str	r2, [r3, #-64]	; 0xffffffc0
 b54:	b	b88 <write_data+0x1e4>
 b58:	ldr	r2, [fp, #-24]	; 0xffffffe8
 b5c:	ldr	r3, [fp, #-12]
 b60:	add	r3, r2, r3
 b64:	ldr	r2, [pc, #744]	; e54 <write_data+0x4b0>
 b68:	lsl	r3, r3, #2
 b6c:	add	r3, r2, r3
 b70:	ldr	r2, [r3, #4]
 b74:	ldr	r3, [fp, #-12]
 b78:	lsl	r3, r3, #2
 b7c:	sub	r1, fp, #4
 b80:	add	r3, r1, r3
 b84:	str	r2, [r3, #-64]	; 0xffffffc0
 b88:	ldr	r3, [fp, #-12]
 b8c:	lsl	r3, r3, #2
 b90:	sub	r2, fp, #4
 b94:	add	r3, r2, r3
 b98:	ldr	r2, [r3, #-64]	; 0xffffffc0
 b9c:	ldr	r3, [fp, #-8]
 ba0:	mul	r3, r2, r3
 ba4:	str	r3, [fp, #-8]
 ba8:	ldr	r3, [fp, #-20]	; 0xffffffec
 bac:	ldr	r2, [fp, #-12]
 bb0:	add	r2, r2, #12
 bb4:	mov	r1, #0
 bb8:	str	r1, [r3, r2, lsl #2]
 bbc:	ldr	r3, [fp, #-12]
 bc0:	add	r3, r3, #1
 bc4:	str	r3, [fp, #-12]
 bc8:	ldr	r3, [fp, #-20]	; 0xffffffec
 bcc:	ldr	r2, [r3, #4]
 bd0:	ldr	r3, [fp, #-12]
 bd4:	cmp	r2, r3
 bd8:	bgt	aec <write_data+0x148>
 bdc:	ldr	r3, [fp, #-8]
 be0:	cmp	r3, #0
 be4:	beq	e48 <write_data+0x4a4>
 be8:	ldr	r0, [pc, #616]	; e58 <write_data+0x4b4>
 bec:	bl	0 <coda_cursor_goto_first_array_element>
 bf0:	mov	r3, r0
 bf4:	cmp	r3, #0
 bf8:	beq	c00 <write_data+0x25c>
 bfc:	bl	0 <handle_coda_error>
 c00:	mov	r3, #0
 c04:	str	r3, [fp, #-12]
 c08:	b	d74 <write_data+0x3d0>
 c0c:	ldr	r3, [fp, #-76]	; 0xffffffb4
 c10:	add	r1, r3, #1
 c14:	ldr	r3, [fp, #-80]	; 0xffffffb0
 c18:	add	r2, r3, #1
 c1c:	ldr	r3, [fp, #-84]	; 0xffffffac
 c20:	ldr	r0, [fp, #-72]	; 0xffffffb8
 c24:	bl	9a4 <write_data>
 c28:	ldr	r3, [fp, #-8]
 c2c:	sub	r2, r3, #1
 c30:	ldr	r3, [fp, #-12]
 c34:	cmp	r2, r3
 c38:	ble	d68 <write_data+0x3c4>
 c3c:	ldr	r0, [pc, #532]	; e58 <write_data+0x4b4>
 c40:	bl	0 <coda_cursor_goto_next_array_element>
 c44:	mov	r3, r0
 c48:	cmp	r3, #0
 c4c:	beq	c54 <write_data+0x2b0>
 c50:	bl	0 <handle_coda_error>
 c54:	ldr	r3, [fp, #-28]	; 0xffffffe4
 c58:	cmp	r3, #0
 c5c:	beq	cc4 <write_data+0x320>
 c60:	ldr	r3, [pc, #488]	; e50 <write_data+0x4ac>
 c64:	ldr	r3, [r3, #3360]	; 0xd20
 c68:	sub	r2, r3, #1
 c6c:	ldr	r3, [fp, #-80]	; 0xffffffb0
 c70:	cmp	r2, r3
 c74:	ble	cc4 <write_data+0x320>
 c78:	ldr	r3, [fp, #-80]	; 0xffffffb0
 c7c:	add	r2, r3, #1
 c80:	ldr	r1, [pc, #456]	; e50 <write_data+0x4ac>
 c84:	mov	r3, r2
 c88:	lsl	r3, r3, #2
 c8c:	add	r3, r3, r2
 c90:	lsl	r3, r3, #4
 c94:	add	r3, r1, r3
 c98:	add	r3, r3, #844	; 0x34c
 c9c:	ldr	r3, [r3]
 ca0:	add	r1, r3, #1
 ca4:	ldr	r0, [pc, #420]	; e50 <write_data+0x4ac>
 ca8:	mov	r3, r2
 cac:	lsl	r3, r3, #2
 cb0:	add	r3, r3, r2
 cb4:	lsl	r3, r3, #4
 cb8:	add	r3, r0, r3
 cbc:	add	r3, r3, #844	; 0x34c
 cc0:	str	r1, [r3]
 cc4:	ldr	r3, [pc, #400]	; e5c <write_data+0x4b8>
 cc8:	ldr	r3, [r3]
 ccc:	cmp	r3, #0
 cd0:	beq	d68 <write_data+0x3c4>
 cd4:	ldr	r3, [fp, #-20]	; 0xffffffec
 cd8:	ldr	r3, [r3, #4]
 cdc:	sub	r3, r3, #1
 ce0:	str	r3, [fp, #-16]
 ce4:	b	d54 <write_data+0x3b0>
 ce8:	ldr	r3, [fp, #-20]	; 0xffffffec
 cec:	ldr	r2, [fp, #-16]
 cf0:	add	r2, r2, #12
 cf4:	ldr	r3, [r3, r2, lsl #2]
 cf8:	add	r1, r3, #1
 cfc:	ldr	r3, [fp, #-20]	; 0xffffffec
 d00:	ldr	r2, [fp, #-16]
 d04:	add	r2, r2, #12
 d08:	str	r1, [r3, r2, lsl #2]
 d0c:	ldr	r3, [fp, #-20]	; 0xffffffec
 d10:	ldr	r2, [fp, #-16]
 d14:	add	r2, r2, #12
 d18:	ldr	r2, [r3, r2, lsl #2]
 d1c:	ldr	r3, [fp, #-16]
 d20:	lsl	r3, r3, #2
 d24:	sub	r1, fp, #4
 d28:	add	r3, r1, r3
 d2c:	ldr	r3, [r3, #-64]	; 0xffffffc0
 d30:	cmp	r2, r3
 d34:	bne	d64 <write_data+0x3c0>
 d38:	ldr	r3, [fp, #-16]
 d3c:	sub	r2, r3, #1
 d40:	str	r2, [fp, #-16]
 d44:	ldr	r2, [fp, #-20]	; 0xffffffec
 d48:	add	r3, r3, #12
 d4c:	mov	r1, #0
 d50:	str	r1, [r2, r3, lsl #2]
 d54:	ldr	r3, [fp, #-16]
 d58:	cmp	r3, #0
 d5c:	bge	ce8 <write_data+0x344>
 d60:	b	d68 <write_data+0x3c4>
 d64:	nop			; (mov r0, r0)
 d68:	ldr	r3, [fp, #-12]
 d6c:	add	r3, r3, #1
 d70:	str	r3, [fp, #-12]
 d74:	ldr	r2, [fp, #-12]
 d78:	ldr	r3, [fp, #-8]
 d7c:	cmp	r2, r3
 d80:	blt	c0c <write_data+0x268>
 d84:	ldr	r0, [pc, #204]	; e58 <write_data+0x4b4>
 d88:	bl	0 <coda_cursor_goto_parent>
 d8c:	b	e48 <write_data+0x4a4>
 d90:	ldr	r2, [pc, #184]	; e50 <write_data+0x4ac>
 d94:	ldr	r3, [fp, #-84]	; 0xffffffac
 d98:	add	r3, r3, #872	; 0x368
 d9c:	lsl	r3, r3, #2
 da0:	add	r3, r2, r3
 da4:	ldr	r3, [r3, #4]
 da8:	sub	r2, fp, #36	; 0x24
 dac:	mov	r1, r3
 db0:	ldr	r0, [pc, #160]	; e58 <write_data+0x4b4>
 db4:	bl	0 <coda_cursor_get_record_field_available_status>
 db8:	mov	r3, r0
 dbc:	cmp	r3, #0
 dc0:	beq	dc8 <write_data+0x424>
 dc4:	bl	0 <handle_coda_error>
 dc8:	ldr	r3, [fp, #-36]	; 0xffffffdc
 dcc:	cmp	r3, #0
 dd0:	beq	e44 <write_data+0x4a0>
 dd4:	ldr	r2, [pc, #116]	; e50 <write_data+0x4ac>
 dd8:	ldr	r3, [fp, #-84]	; 0xffffffac
 ddc:	add	r3, r3, #872	; 0x368
 de0:	lsl	r3, r3, #2
 de4:	add	r3, r2, r3
 de8:	ldr	r3, [r3, #4]
 dec:	mov	r1, r3
 df0:	ldr	r0, [pc, #96]	; e58 <write_data+0x4b4>
 df4:	bl	0 <coda_cursor_goto_record_field_by_index>
 df8:	mov	r3, r0
 dfc:	cmp	r3, #0
 e00:	beq	e08 <write_data+0x464>
 e04:	bl	0 <handle_coda_error>
 e08:	ldr	r3, [fp, #-76]	; 0xffffffb4
 e0c:	add	r1, r3, #1
 e10:	ldr	r3, [fp, #-84]	; 0xffffffac
 e14:	add	r3, r3, #1
 e18:	ldr	r2, [fp, #-80]	; 0xffffffb0
 e1c:	ldr	r0, [fp, #-72]	; 0xffffffb8
 e20:	bl	9a4 <write_data>
 e24:	ldr	r0, [pc, #44]	; e58 <write_data+0x4b4>
 e28:	bl	0 <coda_cursor_goto_parent>
 e2c:	b	e44 <write_data+0x4a0>
 e30:	ldr	r1, [fp, #-76]	; 0xffffffb4
 e34:	ldr	r0, [fp, #-72]	; 0xffffffb8
 e38:	bl	128 <write_basic_data>
 e3c:	nop			; (mov r0, r0)
 e40:	b	e48 <write_data+0x4a4>
 e44:	nop			; (mov r0, r0)
 e48:	sub	sp, fp, #4
 e4c:	pop	{fp, pc}
	...
 e58:	.word	0x00000090
 e5c:	.word	0x00000000

00000e60 <export_data_element_to_ascii>:
 e60:	push	{fp, lr}
 e64:	add	fp, sp, #4
 e68:	ldr	r3, [pc, #196]	; f34 <export_data_element_to_ascii+0xd4>
 e6c:	ldr	r3, [r3]
 e70:	cmp	r3, #0
 e74:	beq	e88 <export_data_element_to_ascii+0x28>
 e78:	ldr	r3, [pc, #180]	; f34 <export_data_element_to_ascii+0xd4>
 e7c:	mov	r2, #0
 e80:	str	r2, [r3]
 e84:	b	e9c <export_data_element_to_ascii+0x3c>
 e88:	ldr	r3, [pc, #168]	; f38 <export_data_element_to_ascii+0xd8>
 e8c:	ldr	r3, [r3]
 e90:	mov	r1, r3
 e94:	mov	r0, #10
 e98:	bl	0 <fputc>
 e9c:	ldr	r3, [pc, #152]	; f3c <export_data_element_to_ascii+0xdc>
 ea0:	ldr	r3, [r3]
 ea4:	cmp	r3, #0
 ea8:	beq	ed8 <export_data_element_to_ascii+0x78>
 eac:	ldr	r3, [pc, #132]	; f38 <export_data_element_to_ascii+0xd8>
 eb0:	ldr	r3, [r3]
 eb4:	mov	r2, #0
 eb8:	mov	r1, #2
 ebc:	mov	r0, r3
 ec0:	bl	0 <print_full_field_name>
 ec4:	ldr	r3, [pc, #108]	; f38 <export_data_element_to_ascii+0xd8>
 ec8:	ldr	r3, [r3]
 ecc:	mov	r1, r3
 ed0:	mov	r0, #10
 ed4:	bl	0 <fputc>
 ed8:	ldr	r3, [pc, #96]	; f40 <export_data_element_to_ascii+0xe0>
 edc:	ldr	r3, [r3]
 ee0:	cmp	r3, #0
 ee4:	ble	f10 <export_data_element_to_ascii+0xb0>
 ee8:	ldr	r3, [pc, #80]	; f40 <export_data_element_to_ascii+0xe0>
 eec:	ldr	r3, [r3]
 ef0:	sub	r3, r3, #1
 ef4:	ldr	r2, [pc, #68]	; f40 <export_data_element_to_ascii+0xe0>
 ef8:	add	r3, r3, #38	; 0x26
 efc:	lsl	r3, r3, #3
 f00:	add	r3, r2, r3
 f04:	ldrd	r2, [r3]
 f08:	orrs	r3, r2, r3
 f0c:	beq	f2c <export_data_element_to_ascii+0xcc>
 f10:	ldr	r3, [pc, #32]	; f38 <export_data_element_to_ascii+0xd8>
 f14:	ldr	r0, [r3]
 f18:	mov	r3, #0
 f1c:	mov	r2, #0
 f20:	mov	r1, #0
 f24:	bl	9a4 <write_data>
 f28:	b	f30 <export_data_element_to_ascii+0xd0>
 f2c:	nop			; (mov r0, r0)
 f30:	pop	{fp, pc}
	...
