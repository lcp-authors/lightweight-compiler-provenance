
../compcert-repos/stcorp-coda-3a25f25/CMakeFiles/codadd.dir/tools/codadd/codadd-detect.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <generate_detection_tree>:
   0:	push	{fp, lr}
   4:	mov	fp, sp
   8:	bl	0 <coda_data_dictionary_get_detection_tree>
   c:	mov	r1, #0
  10:	pop	{fp, lr}
  14:	b	18 <generate_detection_tree_sub>

00000018 <generate_detection_tree_sub>:
  18:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
  1c:	add	fp, sp, #24
  20:	cmp	r0, #0
  24:	beq	178 <generate_detection_tree_sub+0x160>
  28:	mov	r8, r1
  2c:	ldr	r1, [r0]
  30:	movw	r7, #0
  34:	mov	r5, r0
  38:	movt	r7, #0
  3c:	cmp	r1, #0
  40:	beq	80 <generate_detection_tree_sub+0x68>
  44:	ldr	r4, [r7]
  48:	cmp	r4, #0
  4c:	bmi	17c <generate_detection_tree_sub+0x164>
  50:	beq	70 <generate_detection_tree_sub+0x58>
  54:	movw	r6, #0
  58:	movt	r6, #0
  5c:	mov	r0, r6
  60:	bl	0 <printf>
  64:	subs	r4, r4, #1
  68:	bne	5c <generate_detection_tree_sub+0x44>
  6c:	ldr	r1, [r5]
  70:	movw	r0, #0
  74:	movt	r0, #0
  78:	bl	0 <printf>
  7c:	b	c8 <generate_detection_tree_sub+0xb0>
  80:	ldr	r0, [r5, #4]
  84:	cmp	r0, #0
  88:	beq	130 <generate_detection_tree_sub+0x118>
  8c:	ldr	r4, [r7]
  90:	cmp	r4, #0
  94:	bmi	17c <generate_detection_tree_sub+0x164>
  98:	beq	b8 <generate_detection_tree_sub+0xa0>
  9c:	movw	r6, #0
  a0:	movt	r6, #0
  a4:	mov	r0, r6
  a8:	bl	0 <printf>
  ac:	subs	r4, r4, #1
  b0:	bne	a4 <generate_detection_tree_sub+0x8c>
  b4:	ldr	r0, [r5, #4]
  b8:	movw	r1, #0
  bc:	add	r8, r8, #1
  c0:	movt	r1, #0
  c4:	bl	0 <coda_expression_print>
  c8:	ldr	r0, [r5, #8]
  cc:	cmp	r0, #0
  d0:	beq	128 <generate_detection_tree_sub+0x110>
  d4:	ldr	r0, [r0, #8]
  d8:	ldr	r3, [r0, #4]
  dc:	ldr	r0, [r0, #44]	; 0x2c
  e0:	ldr	r2, [r0]
  e4:	ldr	r0, [r0, #20]
  e8:	ldr	r1, [r0]
  ec:	movw	r0, #0
  f0:	movt	r0, #0
  f4:	bl	0 <printf>
  f8:	ldr	r2, [r5, #12]
  fc:	cmp	r2, #1
 100:	blt	118 <generate_detection_tree_sub+0x100>
 104:	movw	r0, #0
 108:	mov	r1, r8
 10c:	movt	r0, #0
 110:	bl	0 <printf>
 114:	b	128 <generate_detection_tree_sub+0x110>
 118:	movw	r0, #0
 11c:	mov	r1, r8
 120:	movt	r0, #0
 124:	bl	0 <printf>
 128:	mov	r0, #10
 12c:	bl	0 <putchar>
 130:	ldr	r0, [r5, #12]
 134:	cmp	r0, #1
 138:	blt	178 <generate_detection_tree_sub+0x160>
 13c:	ldr	r0, [r7]
 140:	mov	r6, #0
 144:	add	r0, r0, #1
 148:	add	r1, r8, r6
 14c:	str	r0, [r7]
 150:	ldr	r0, [r5, #16]
 154:	ldr	r0, [r0, r6, lsl #2]
 158:	bl	18 <generate_detection_tree_sub>
 15c:	ldr	r0, [r7]
 160:	add	r6, r6, #1
 164:	sub	r0, r0, #1
 168:	str	r0, [r7]
 16c:	ldr	r1, [r5, #12]
 170:	cmp	r6, r1
 174:	blt	144 <generate_detection_tree_sub+0x12c>
 178:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
 17c:	movw	r0, #0
 180:	movw	r1, #0
 184:	movw	r3, #0
 188:	mov	r2, #52	; 0x34
 18c:	movt	r0, #0
 190:	movt	r1, #0
 194:	movt	r3, #0
 198:	bl	0 <__assert_fail>
