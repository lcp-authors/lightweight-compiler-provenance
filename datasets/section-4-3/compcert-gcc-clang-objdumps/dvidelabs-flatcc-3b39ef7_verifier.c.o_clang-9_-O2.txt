
../compcert-repos/dvidelabs-flatcc-3b39ef7/test/json_test/CMakeFiles/json_test_uq.dir/__/__/src/runtime/verifier.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <flatcc_verify_error_string>:
       0:	cmp	r0, #36	; 0x24
       4:	movwhi	r0, #0
       8:	movthi	r0, #0
       c:	bxhi	lr
      10:	movw	r1, #0
      14:	movt	r1, #0
      18:	ldr	r0, [r1, r0, lsl #2]
      1c:	bx	lr

00000020 <flatcc_verify_field>:
      20:	push	{r4, sl, fp, lr}
      24:	add	fp, sp, #8
      28:	mov	ip, #4
      2c:	ldrh	r4, [r0, #22]
      30:	mov	lr, #0
      34:	add	r1, ip, r1, lsl #1
      38:	uxth	ip, r1
      3c:	cmp	ip, r4
      40:	bcs	9c <flatcc_verify_field+0x7c>
      44:	ldr	r4, [r0, #12]
      48:	uxtah	r1, r4, r1
      4c:	ldrh	ip, [r1]
      50:	cmp	ip, #0
      54:	beq	9c <flatcc_verify_field+0x7c>
      58:	add	r1, ip, r2
      5c:	ldrh	r2, [r0, #20]
      60:	mov	lr, #13
      64:	cmp	r1, r2
      68:	bhi	9c <flatcc_verify_field+0x7c>
      6c:	ldr	r1, [r0]
      70:	mov	lr, #0
      74:	add	r2, r1, ip
      78:	ldr	r1, [r0, #16]
      7c:	add	r4, r2, r1
      80:	sub	r1, r3, #1
      84:	tst	r4, r1
      88:	beq	9c <flatcc_verify_field+0x7c>
      8c:	ldr	r0, [r0, #16]
      90:	add	r0, r2, r0
      94:	ands	lr, r0, r1
      98:	movwne	lr, #12
      9c:	mov	r0, lr
      a0:	pop	{r4, sl, fp, pc}

000000a4 <flatcc_verify_string_field>:
      a4:	push	{fp, lr}
      a8:	mov	fp, sp
      ac:	mov	lr, r0
      b0:	mov	r0, #4
      b4:	add	r0, r0, r1, lsl #1
      b8:	ldrh	r3, [lr, #22]
      bc:	uxth	r1, r0
      c0:	cmp	r1, r3
      c4:	bcs	108 <flatcc_verify_string_field+0x64>
      c8:	ldr	r1, [lr, #12]
      cc:	uxtah	r0, r1, r0
      d0:	ldrh	r1, [r0]
      d4:	cmp	r1, #0
      d8:	beq	108 <flatcc_verify_string_field+0x64>
      dc:	ldrh	r2, [lr, #20]
      e0:	add	r3, r1, #4
      e4:	mov	r0, #13
      e8:	cmp	r3, r2
      ec:	bhi	104 <flatcc_verify_string_field+0x60>
      f0:	ldr	r0, [lr, #16]
      f4:	add	r2, r0, r1
      f8:	mov	r0, #12
      fc:	tst	r2, #3
     100:	beq	118 <flatcc_verify_string_field+0x74>
     104:	pop	{fp, pc}
     108:	cmp	r2, #0
     10c:	movwne	r2, #1
     110:	lsl	r0, r2, #2
     114:	pop	{fp, pc}
     118:	cmp	r2, #0
     11c:	beq	17c <flatcc_verify_string_field+0xd8>
     120:	ldr	ip, [lr]
     124:	ldr	r0, [ip, r2]
     128:	add	r1, r0, r2
     12c:	mov	r0, #17
     130:	tst	r1, #3
     134:	bne	104 <flatcc_verify_string_field+0x60>
     138:	cmp	r1, r2
     13c:	bls	104 <flatcc_verify_string_field+0x60>
     140:	ldr	r3, [lr, #4]
     144:	add	r2, r1, #4
     148:	cmp	r3, r2
     14c:	bcc	104 <flatcc_verify_string_field+0x60>
     150:	ldr	r1, [ip, r1]
     154:	sub	lr, r3, r2
     158:	mov	r0, #8
     15c:	add	r3, r1, #1
     160:	cmp	lr, r3
     164:	popcc	{fp, pc}
     168:	add	r0, ip, r2
     16c:	ldrb	r0, [r0, r1]
     170:	cmp	r0, #0
     174:	movwne	r0, #7
     178:	pop	{fp, pc}
     17c:	mov	r0, #0
     180:	pop	{fp, pc}

00000184 <flatcc_verify_vector_field>:
     184:	push	{r4, sl, fp, lr}
     188:	add	fp, sp, #8
     18c:	mov	ip, r0
     190:	mov	r0, #4
     194:	add	r0, r0, r1, lsl #1
     198:	ldrh	r4, [ip, #22]
     19c:	uxth	r1, r0
     1a0:	cmp	r1, r4
     1a4:	bcs	1e8 <flatcc_verify_vector_field+0x64>
     1a8:	ldr	r1, [ip, #12]
     1ac:	uxtah	r0, r1, r0
     1b0:	ldrh	r1, [r0]
     1b4:	cmp	r1, #0
     1b8:	beq	1e8 <flatcc_verify_vector_field+0x64>
     1bc:	ldrh	r2, [ip, #20]
     1c0:	add	r4, r1, #4
     1c4:	mov	r0, #13
     1c8:	cmp	r4, r2
     1cc:	bhi	1e4 <flatcc_verify_vector_field+0x60>
     1d0:	ldr	r0, [ip, #16]
     1d4:	add	r2, r0, r1
     1d8:	mov	r0, #12
     1dc:	tst	r2, #3
     1e0:	beq	1f8 <flatcc_verify_vector_field+0x74>
     1e4:	pop	{r4, sl, fp, pc}
     1e8:	cmp	r2, #0
     1ec:	movwne	r2, #1
     1f0:	lsl	r0, r2, #2
     1f4:	pop	{r4, sl, fp, pc}
     1f8:	cmp	r2, #0
     1fc:	beq	274 <flatcc_verify_vector_field+0xf0>
     200:	ldr	lr, [ip]
     204:	ldr	r4, [fp, #8]
     208:	ldr	r0, [lr, r2]
     20c:	cmp	r4, #4
     210:	movls	r4, #4
     214:	add	r1, r0, r2
     218:	mov	r0, #16
     21c:	cmp	r1, r2
     220:	bls	1e4 <flatcc_verify_vector_field+0x60>
     224:	ldr	ip, [ip, #4]
     228:	add	r2, r1, #4
     22c:	cmp	r2, ip
     230:	bhi	1e4 <flatcc_verify_vector_field+0x60>
     234:	sub	r4, r4, #1
     238:	orr	r4, r4, #3
     23c:	tst	r2, r4
     240:	bne	1e4 <flatcc_verify_vector_field+0x60>
     244:	ldr	r4, [fp, #12]
     248:	ldr	r2, [lr, r1]
     24c:	mov	r0, #25
     250:	cmp	r2, r4
     254:	pophi	{r4, sl, fp, pc}
     258:	mul	r2, r2, r3
     25c:	sub	r0, ip, r1
     260:	sub	r1, r0, #4
     264:	mov	r0, #0
     268:	cmp	r1, r2
     26c:	movwcc	r0, #26
     270:	pop	{r4, sl, fp, pc}
     274:	mov	r0, #0
     278:	pop	{r4, sl, fp, pc}

0000027c <flatcc_verify_string_vector_field>:
     27c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
     280:	add	fp, sp, #24
     284:	mov	r3, r0
     288:	mov	r0, #4
     28c:	add	r0, r0, r1, lsl #1
     290:	ldrh	r7, [r3, #22]
     294:	uxth	r1, r0
     298:	cmp	r1, r7
     29c:	bcs	2e0 <flatcc_verify_string_vector_field+0x64>
     2a0:	ldr	r1, [r3, #12]
     2a4:	uxtah	r0, r1, r0
     2a8:	ldrh	r1, [r0]
     2ac:	cmp	r1, #0
     2b0:	beq	2e0 <flatcc_verify_string_vector_field+0x64>
     2b4:	ldrh	r2, [r3, #20]
     2b8:	add	r7, r1, #4
     2bc:	mov	r0, #13
     2c0:	cmp	r7, r2
     2c4:	bhi	2dc <flatcc_verify_string_vector_field+0x60>
     2c8:	ldr	r4, [r3, #16]
     2cc:	mov	r0, #12
     2d0:	add	r6, r4, r1
     2d4:	tst	r6, #3
     2d8:	beq	2f0 <flatcc_verify_string_vector_field+0x74>
     2dc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
     2e0:	cmp	r2, #0
     2e4:	movwne	r2, #1
     2e8:	lsl	r0, r2, #2
     2ec:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
     2f0:	cmp	r6, #0
     2f4:	beq	3ec <flatcc_verify_string_vector_field+0x170>
     2f8:	ldr	r5, [r3]
     2fc:	mov	r0, #16
     300:	ldr	r7, [r5, r6]
     304:	add	r2, r7, r6
     308:	cmp	r2, r6
     30c:	bls	2dc <flatcc_verify_string_vector_field+0x60>
     310:	ldr	ip, [r3, #4]
     314:	add	r3, r2, #4
     318:	cmp	r3, ip
     31c:	bhi	2dc <flatcc_verify_string_vector_field+0x60>
     320:	ands	r3, r3, #3
     324:	bne	2dc <flatcc_verify_string_vector_field+0x60>
     328:	ldr	lr, [r5, r2]
     32c:	mov	r0, #25
     330:	cmn	lr, #-1073741823	; 0xc0000001
     334:	bhi	2dc <flatcc_verify_string_vector_field+0x60>
     338:	sub	r0, ip, r2
     33c:	sub	r2, r0, #4
     340:	mov	r0, #26
     344:	cmp	r2, lr, lsl #2
     348:	bcc	2dc <flatcc_verify_string_vector_field+0x60>
     34c:	cmp	lr, #0
     350:	beq	3ec <flatcc_verify_string_vector_field+0x170>
     354:	sub	r0, ip, r7
     358:	add	r8, r7, r4
     35c:	sub	r0, r0, r4
     360:	add	r3, r5, r8
     364:	sub	r0, r0, r1
     368:	sub	r4, r0, #8
     36c:	add	r0, r3, r1
     370:	add	r7, r1, r8
     374:	ldr	r5, [r0, #4]
     378:	mov	r0, #17
     37c:	add	r6, r7, r5
     380:	add	r2, r6, #4
     384:	tst	r2, #3
     388:	bne	2dc <flatcc_verify_string_vector_field+0x60>
     38c:	add	r7, r7, #4
     390:	cmp	r2, r7
     394:	bls	2dc <flatcc_verify_string_vector_field+0x60>
     398:	add	r2, r6, #8
     39c:	cmp	ip, r2
     3a0:	bcc	2dc <flatcc_verify_string_vector_field+0x60>
     3a4:	add	r0, r1, r5
     3a8:	sub	r2, r4, r5
     3ac:	add	r0, r3, r0
     3b0:	ldr	r0, [r0, #4]
     3b4:	add	r6, r0, #1
     3b8:	cmp	r2, r6
     3bc:	bcc	3f4 <flatcc_verify_string_vector_field+0x178>
     3c0:	add	r0, r5, r0
     3c4:	add	r0, r1, r0
     3c8:	add	r0, r3, r0
     3cc:	ldrb	r0, [r0, #8]
     3d0:	cmp	r0, #0
     3d4:	bne	3fc <flatcc_verify_string_vector_field+0x180>
     3d8:	subs	lr, lr, #1
     3dc:	sub	r4, r4, #4
     3e0:	add	r8, r8, #4
     3e4:	add	r3, r3, #4
     3e8:	bne	36c <flatcc_verify_string_vector_field+0xf0>
     3ec:	mov	r0, #0
     3f0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
     3f4:	mov	r0, #8
     3f8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
     3fc:	mov	r0, #7
     400:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

00000404 <flatcc_verify_table_field>:
     404:	push	{r4, r5, r6, sl, fp, lr}
     408:	add	fp, sp, #16
     40c:	sub	sp, sp, #24
     410:	mov	ip, r0
     414:	mov	r0, #4
     418:	add	r0, r0, r1, lsl #1
     41c:	ldrh	r6, [ip, #22]
     420:	uxth	r1, r0
     424:	cmp	r1, r6
     428:	bcs	470 <flatcc_verify_table_field+0x6c>
     42c:	ldr	r1, [ip, #12]
     430:	uxtah	r0, r1, r0
     434:	ldrh	r1, [r0]
     438:	cmp	r1, #0
     43c:	beq	470 <flatcc_verify_table_field+0x6c>
     440:	ldrh	r2, [ip, #20]
     444:	add	r6, r1, #4
     448:	mov	r0, #13
     44c:	cmp	r6, r2
     450:	bhi	468 <flatcc_verify_table_field+0x64>
     454:	ldr	r0, [ip, #16]
     458:	add	r4, r0, r1
     45c:	mov	r0, #12
     460:	tst	r4, #3
     464:	beq	484 <flatcc_verify_table_field+0x80>
     468:	sub	sp, fp, #16
     46c:	pop	{r4, r5, r6, sl, fp, pc}
     470:	cmp	r2, #0
     474:	movwne	r2, #1
     478:	lsl	r0, r2, #2
     47c:	sub	sp, fp, #16
     480:	pop	{r4, r5, r6, sl, fp, pc}
     484:	cmp	r4, #0
     488:	beq	554 <flatcc_verify_table_field+0x150>
     48c:	ldm	ip, {r1, lr}
     490:	ldr	r2, [ip, #8]
     494:	ldr	r0, [r1, r4]
     498:	subs	r2, r2, #1
     49c:	str	r2, [sp, #8]
     4a0:	beq	560 <flatcc_verify_table_field+0x15c>
     4a4:	add	r2, r0, r4
     4a8:	mov	r0, #15
     4ac:	tst	r2, #3
     4b0:	bne	468 <flatcc_verify_table_field+0x64>
     4b4:	cmp	r2, r4
     4b8:	bls	468 <flatcc_verify_table_field+0x64>
     4bc:	add	r6, r2, #4
     4c0:	cmp	r6, lr
     4c4:	bhi	468 <flatcc_verify_table_field+0x64>
     4c8:	str	r2, [sp, #16]
     4cc:	ldr	r0, [r1, r2]
     4d0:	sub	r5, r2, r0
     4d4:	mov	r0, #29
     4d8:	tst	r5, #-2147483647	; 0x80000001
     4dc:	bne	468 <flatcc_verify_table_field+0x64>
     4e0:	add	r4, r5, #2
     4e4:	mov	r0, #27
     4e8:	cmp	r4, lr
     4ec:	bhi	468 <flatcc_verify_table_field+0x64>
     4f0:	mov	ip, r1
     4f4:	mov	r0, #30
     4f8:	ldrh	r6, [ip, r5]!
     4fc:	tst	r6, #1
     500:	strh	r6, [sp, #22]
     504:	bne	468 <flatcc_verify_table_field+0x64>
     508:	add	r5, r5, r6
     50c:	cmp	r5, lr
     510:	bhi	468 <flatcc_verify_table_field+0x64>
     514:	mov	r0, #28
     518:	cmp	r6, #4
     51c:	bcc	468 <flatcc_verify_table_field+0x64>
     520:	add	r0, r1, r4
     524:	sub	r2, lr, r2
     528:	ldrh	r4, [r0]
     52c:	mov	r0, #20
     530:	cmp	r2, r4
     534:	strh	r4, [sp, #20]
     538:	bcc	468 <flatcc_verify_table_field+0x64>
     53c:	mov	r0, sp
     540:	stm	sp, {r1, lr}
     544:	str	ip, [sp, #12]
     548:	blx	r3
     54c:	sub	sp, fp, #16
     550:	pop	{r4, r5, r6, sl, fp, pc}
     554:	mov	r0, #0
     558:	sub	sp, fp, #16
     55c:	pop	{r4, r5, r6, sl, fp, pc}
     560:	mov	r0, #3
     564:	sub	sp, fp, #16
     568:	pop	{r4, r5, r6, sl, fp, pc}

0000056c <flatcc_verify_table_vector_field>:
     56c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
     570:	add	fp, sp, #28
     574:	sub	sp, sp, #28
     578:	mov	r4, r3
     57c:	mov	r3, r0
     580:	mov	r0, #4
     584:	add	r0, r0, r1, lsl #1
     588:	ldrh	r7, [r3, #22]
     58c:	uxth	r1, r0
     590:	cmp	r1, r7
     594:	bcs	5dc <flatcc_verify_table_vector_field+0x70>
     598:	ldr	r1, [r3, #12]
     59c:	uxtah	r0, r1, r0
     5a0:	ldrh	r1, [r0]
     5a4:	cmp	r1, #0
     5a8:	beq	5dc <flatcc_verify_table_vector_field+0x70>
     5ac:	ldrh	r2, [r3, #20]
     5b0:	add	r7, r1, #4
     5b4:	mov	r0, #13
     5b8:	cmp	r7, r2
     5bc:	bhi	5d4 <flatcc_verify_table_vector_field+0x68>
     5c0:	ldr	r2, [r3, #16]
     5c4:	mov	r0, #12
     5c8:	add	r6, r2, r1
     5cc:	tst	r6, #3
     5d0:	beq	5f0 <flatcc_verify_table_vector_field+0x84>
     5d4:	sub	sp, fp, #28
     5d8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
     5dc:	cmp	r2, #0
     5e0:	movwne	r2, #1
     5e4:	lsl	r0, r2, #2
     5e8:	sub	sp, fp, #28
     5ec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
     5f0:	cmp	r6, #0
     5f4:	beq	750 <flatcc_verify_table_vector_field+0x1e4>
     5f8:	ldr	r7, [r3, #8]
     5fc:	cmp	r7, #1
     600:	blt	81c <flatcc_verify_table_vector_field+0x2b0>
     604:	ldr	r9, [r3]
     608:	mov	r0, #16
     60c:	ldr	ip, [r9, r6]
     610:	add	r5, ip, r6
     614:	cmp	r5, r6
     618:	bls	5d4 <flatcc_verify_table_vector_field+0x68>
     61c:	ldr	lr, [r3, #4]
     620:	add	r8, r5, #4
     624:	cmp	r8, lr
     628:	bhi	5d4 <flatcc_verify_table_vector_field+0x68>
     62c:	ands	r3, r8, #3
     630:	bne	5d4 <flatcc_verify_table_vector_field+0x68>
     634:	ldr	sl, [r9, r5]
     638:	mov	r0, #25
     63c:	cmn	sl, #-1073741823	; 0xc0000001
     640:	bhi	5d4 <flatcc_verify_table_vector_field+0x68>
     644:	sub	r0, lr, r5
     648:	sub	r3, r0, #4
     64c:	mov	r0, #26
     650:	cmp	r3, sl, lsl #2
     654:	bcc	5d4 <flatcc_verify_table_vector_field+0x68>
     658:	cmp	sl, #0
     65c:	beq	750 <flatcc_verify_table_vector_field+0x1e4>
     660:	sub	r0, lr, ip
     664:	sub	r0, r0, r2
     668:	sub	r0, r0, r1
     66c:	sub	r5, r0, #4
     670:	sub	r0, r7, #2
     674:	str	r0, [sp]
     678:	ldr	r1, [sp]
     67c:	ldr	r0, [r9, r8]
     680:	cmp	r1, #0
     684:	str	r1, [sp, #12]
     688:	beq	814 <flatcc_verify_table_vector_field+0x2a8>
     68c:	add	r1, r8, r0
     690:	add	ip, r1, #4
     694:	tst	r1, #3
     698:	bne	75c <flatcc_verify_table_vector_field+0x1f0>
     69c:	cmp	r1, r8
     6a0:	bls	75c <flatcc_verify_table_vector_field+0x1f0>
     6a4:	cmp	ip, lr
     6a8:	bhi	75c <flatcc_verify_table_vector_field+0x1f0>
     6ac:	str	r1, [sp, #20]
     6b0:	add	r3, r9, r0
     6b4:	ldr	r6, [r3, r8]
     6b8:	sub	r7, r0, r6
     6bc:	add	r3, r8, r7
     6c0:	tst	r3, #-2147483647	; 0x80000001
     6c4:	bne	75c <flatcc_verify_table_vector_field+0x1f0>
     6c8:	add	r2, r3, #2
     6cc:	cmp	r2, lr
     6d0:	bhi	75c <flatcc_verify_table_vector_field+0x1f0>
     6d4:	add	r2, r9, r7
     6d8:	add	r2, r2, r8
     6dc:	ldrh	r7, [r2]
     6e0:	cmp	r7, #4
     6e4:	strh	r7, [sp, #26]
     6e8:	bcc	75c <flatcc_verify_table_vector_field+0x1f0>
     6ec:	ands	r2, r7, #1
     6f0:	bne	75c <flatcc_verify_table_vector_field+0x1f0>
     6f4:	add	r2, r0, r7
     6f8:	sub	r2, r2, r6
     6fc:	add	r2, r8, r2
     700:	cmp	r2, lr
     704:	bhi	75c <flatcc_verify_table_vector_field+0x1f0>
     708:	add	r3, r9, r3
     70c:	sub	r0, r5, r0
     710:	ldrh	r2, [r3, #2]
     714:	cmp	r0, r2
     718:	strh	r2, [sp, #24]
     71c:	bcc	75c <flatcc_verify_table_vector_field+0x1f0>
     720:	add	r0, sp, #4
     724:	stmib	sp, {r9, lr}
     728:	mov	r6, lr
     72c:	str	r3, [sp, #16]
     730:	blx	r4
     734:	cmp	r0, #0
     738:	bne	828 <flatcc_verify_table_vector_field+0x2bc>
     73c:	subs	sl, sl, #1
     740:	sub	r5, r5, #4
     744:	add	r8, r8, #4
     748:	mov	lr, r6
     74c:	bne	678 <flatcc_verify_table_vector_field+0x10c>
     750:	mov	r0, #0
     754:	sub	sp, fp, #28
     758:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
     75c:	ldr	r0, [sp]
     760:	str	r0, [sp, #12]
     764:	mov	r0, #15
     768:	tst	r1, #3
     76c:	bne	5d4 <flatcc_verify_table_vector_field+0x68>
     770:	cmp	r1, r8
     774:	bls	5d4 <flatcc_verify_table_vector_field+0x68>
     778:	cmp	ip, lr
     77c:	bhi	5d4 <flatcc_verify_table_vector_field+0x68>
     780:	str	r1, [sp, #20]
     784:	ldr	r0, [r9, r1]
     788:	sub	r7, r1, r0
     78c:	mov	r0, #29
     790:	tst	r7, #-2147483647	; 0x80000001
     794:	bne	5d4 <flatcc_verify_table_vector_field+0x68>
     798:	add	r3, r7, #2
     79c:	mov	r0, #27
     7a0:	cmp	r3, lr
     7a4:	bhi	5d4 <flatcc_verify_table_vector_field+0x68>
     7a8:	mov	r2, r9
     7ac:	mov	r0, #30
     7b0:	ldrh	r6, [r2, r7]!
     7b4:	tst	r6, #1
     7b8:	strh	r6, [sp, #26]
     7bc:	bne	5d4 <flatcc_verify_table_vector_field+0x68>
     7c0:	add	r7, r7, r6
     7c4:	cmp	r7, lr
     7c8:	bhi	5d4 <flatcc_verify_table_vector_field+0x68>
     7cc:	mov	r0, #28
     7d0:	cmp	r6, #4
     7d4:	bcc	5d4 <flatcc_verify_table_vector_field+0x68>
     7d8:	add	r0, r9, r3
     7dc:	sub	r1, lr, r1
     7e0:	mov	r5, lr
     7e4:	ldrh	r3, [r0]
     7e8:	mov	r0, #20
     7ec:	cmp	r1, r3
     7f0:	strh	r3, [sp, #24]
     7f4:	bcc	5d4 <flatcc_verify_table_vector_field+0x68>
     7f8:	add	r0, sp, #4
     7fc:	str	r5, [sp, #8]
     800:	str	r9, [sp, #4]
     804:	str	r2, [sp, #16]
     808:	blx	r4
     80c:	sub	sp, fp, #28
     810:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
     814:	mov	r0, #0
     818:	str	r0, [sp, #12]
     81c:	mov	r0, #3
     820:	sub	sp, fp, #28
     824:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
     828:	ldr	r0, [r9, r8]
     82c:	ldr	r1, [sp]
     830:	mov	lr, r6
     834:	str	r1, [sp, #12]
     838:	add	r1, r0, r8
     83c:	add	ip, r1, #4
     840:	b	764 <flatcc_verify_table_vector_field+0x1f8>

00000844 <flatcc_verify_union_table>:
     844:	push	{r4, r5, r6, sl, fp, lr}
     848:	add	fp, sp, #16
     84c:	sub	sp, sp, #24
     850:	ldr	r5, [r0, #16]
     854:	ldr	r2, [r0, #20]
     858:	ldr	ip, [r0]
     85c:	ldr	r3, [r0, #4]
     860:	ldr	r0, [r0, #8]
     864:	subs	r0, r0, #1
     868:	str	r0, [sp, #8]
     86c:	beq	924 <flatcc_verify_union_table+0xe0>
     870:	add	r2, r2, r5
     874:	mov	r0, #15
     878:	tst	r2, #3
     87c:	bne	91c <flatcc_verify_union_table+0xd8>
     880:	cmp	r2, r5
     884:	bls	91c <flatcc_verify_union_table+0xd8>
     888:	add	r6, r2, #4
     88c:	cmp	r6, r3
     890:	bhi	91c <flatcc_verify_union_table+0xd8>
     894:	str	r2, [sp, #16]
     898:	ldr	r0, [ip, r2]
     89c:	sub	r5, r2, r0
     8a0:	mov	r0, #29
     8a4:	tst	r5, #-2147483647	; 0x80000001
     8a8:	bne	91c <flatcc_verify_union_table+0xd8>
     8ac:	add	r4, r5, #2
     8b0:	mov	r0, #27
     8b4:	cmp	r4, r3
     8b8:	bhi	91c <flatcc_verify_union_table+0xd8>
     8bc:	mov	lr, ip
     8c0:	mov	r0, #30
     8c4:	ldrh	r6, [lr, r5]!
     8c8:	tst	r6, #1
     8cc:	strh	r6, [sp, #22]
     8d0:	bne	91c <flatcc_verify_union_table+0xd8>
     8d4:	add	r5, r5, r6
     8d8:	cmp	r5, r3
     8dc:	bhi	91c <flatcc_verify_union_table+0xd8>
     8e0:	mov	r0, #28
     8e4:	cmp	r6, #4
     8e8:	bcc	91c <flatcc_verify_union_table+0xd8>
     8ec:	add	r0, ip, r4
     8f0:	sub	r2, r3, r2
     8f4:	ldrh	r4, [r0]
     8f8:	mov	r0, #20
     8fc:	cmp	r2, r4
     900:	strh	r4, [sp, #20]
     904:	bcc	91c <flatcc_verify_union_table+0xd8>
     908:	mov	r0, sp
     90c:	str	r3, [sp, #4]
     910:	str	ip, [sp]
     914:	str	lr, [sp, #12]
     918:	blx	r1
     91c:	sub	sp, fp, #16
     920:	pop	{r4, r5, r6, sl, fp, pc}
     924:	mov	r0, #3
     928:	sub	sp, fp, #16
     92c:	pop	{r4, r5, r6, sl, fp, pc}

00000930 <flatcc_verify_union_struct>:
     930:	push	{fp, lr}
     934:	mov	fp, sp
     938:	ldr	lr, [r0, #20]
     93c:	mov	r3, r0
     940:	mov	r0, #18
     944:	cmp	lr, #0
     948:	beq	984 <flatcc_verify_union_struct+0x54>
     94c:	ldr	ip, [r3, #4]
     950:	ldr	r3, [r3, #16]
     954:	add	r3, r3, lr
     958:	cmp	r3, ip
     95c:	bhi	984 <flatcc_verify_union_struct+0x54>
     960:	adds	r1, r3, r1
     964:	mov	r0, #10
     968:	bcs	984 <flatcc_verify_union_struct+0x54>
     96c:	mov	r0, #9
     970:	cmp	r1, ip
     974:	pophi	{fp, pc}
     978:	sub	r0, r2, #1
     97c:	ands	r0, r3, r0
     980:	movwne	r0, #11
     984:	pop	{fp, pc}

00000988 <flatcc_verify_union_string>:
     988:	push	{fp, lr}
     98c:	mov	fp, sp
     990:	mov	r1, r0
     994:	ldr	r3, [r0, #16]
     998:	ldr	r0, [r0, #20]
     99c:	add	r2, r0, r3
     9a0:	mov	r0, #17
     9a4:	tst	r2, #3
     9a8:	bne	9f0 <flatcc_verify_union_string+0x68>
     9ac:	cmp	r2, r3
     9b0:	bls	9f0 <flatcc_verify_union_string+0x68>
     9b4:	ldr	r3, [r1, #4]
     9b8:	add	ip, r2, #4
     9bc:	cmp	r3, ip
     9c0:	bcc	9f0 <flatcc_verify_union_string+0x68>
     9c4:	ldr	r1, [r1]
     9c8:	sub	lr, r3, ip
     9cc:	mov	r0, #8
     9d0:	ldr	r2, [r1, r2]
     9d4:	add	r3, r2, #1
     9d8:	cmp	lr, r3
     9dc:	popcc	{fp, pc}
     9e0:	add	r0, r1, ip
     9e4:	ldrb	r0, [r0, r2]
     9e8:	cmp	r0, #0
     9ec:	movwne	r0, #7
     9f0:	pop	{fp, pc}

000009f4 <flatcc_verify_buffer_header>:
     9f4:	push	{r4, sl, fp, lr}
     9f8:	add	fp, sp, #8
     9fc:	sub	sp, sp, #8
     a00:	mov	r4, r0
     a04:	mov	r0, #5
     a08:	tst	r4, #3
     a0c:	bne	a60 <flatcc_verify_buffer_header+0x6c>
     a10:	mov	r0, #6
     a14:	cmn	r1, #9
     a18:	bhi	a60 <flatcc_verify_buffer_header+0x6c>
     a1c:	mov	r0, #1
     a20:	cmp	r1, #8
     a24:	bcc	a60 <flatcc_verify_buffer_header+0x6c>
     a28:	cmp	r2, #0
     a2c:	beq	a68 <flatcc_verify_buffer_header+0x74>
     a30:	mov	r0, #0
     a34:	mov	r1, r2
     a38:	mov	r2, #4
     a3c:	str	r0, [sp, #4]
     a40:	add	r0, sp, #4
     a44:	bl	0 <strncpy>
     a48:	ldr	r1, [sp, #4]
     a4c:	cmp	r1, #0
     a50:	ldrne	r2, [r4, #4]
     a54:	movne	r0, #2
     a58:	cmpne	r2, r1
     a5c:	moveq	r0, #0
     a60:	sub	sp, fp, #8
     a64:	pop	{r4, sl, fp, pc}
     a68:	mov	r0, #0
     a6c:	sub	sp, fp, #8
     a70:	pop	{r4, sl, fp, pc}

00000a74 <flatcc_verify_typed_buffer_header>:
     a74:	mov	r3, r0
     a78:	mov	r0, #5
     a7c:	tst	r3, #3
     a80:	bne	ab4 <flatcc_verify_typed_buffer_header+0x40>
     a84:	mov	r0, #6
     a88:	cmn	r1, #9
     a8c:	bhi	ab4 <flatcc_verify_typed_buffer_header+0x40>
     a90:	mov	r0, #1
     a94:	cmp	r1, #8
     a98:	bxcc	lr
     a9c:	cmp	r2, #0
     aa0:	beq	ab8 <flatcc_verify_typed_buffer_header+0x44>
     aa4:	ldr	r1, [r3, #4]
     aa8:	mov	r0, #2
     aac:	cmp	r1, r2
     ab0:	moveq	r0, #0
     ab4:	bx	lr
     ab8:	mov	r0, #0
     abc:	bx	lr

00000ac0 <flatcc_verify_struct_as_root>:
     ac0:	push	{r4, r5, r6, r7, fp, lr}
     ac4:	add	fp, sp, #16
     ac8:	sub	sp, sp, #8
     acc:	mov	r5, r0
     ad0:	mov	r0, #5
     ad4:	tst	r5, #3
     ad8:	bne	b70 <flatcc_verify_struct_as_root+0xb0>
     adc:	mov	r4, r1
     ae0:	mov	r0, #6
     ae4:	cmn	r1, #9
     ae8:	bhi	b70 <flatcc_verify_struct_as_root+0xb0>
     aec:	mov	r0, #1
     af0:	cmp	r4, #8
     af4:	bcc	b70 <flatcc_verify_struct_as_root+0xb0>
     af8:	mov	r6, r3
     afc:	mov	r7, r2
     b00:	cmp	r2, #0
     b04:	beq	b34 <flatcc_verify_struct_as_root+0x74>
     b08:	mov	r0, #0
     b0c:	mov	r1, r7
     b10:	mov	r2, #4
     b14:	str	r0, [sp]
     b18:	mov	r0, sp
     b1c:	bl	0 <strncpy>
     b20:	ldr	r0, [sp]
     b24:	cmp	r0, #0
     b28:	ldrne	r1, [r5, #4]
     b2c:	cmpne	r1, r0
     b30:	bne	b78 <flatcc_verify_struct_as_root+0xb8>
     b34:	ldr	r1, [r5]
     b38:	mov	r0, #18
     b3c:	sub	r2, r1, #1
     b40:	cmp	r2, r4
     b44:	bcs	b70 <flatcc_verify_struct_as_root+0xb0>
     b48:	adds	r2, r1, r6
     b4c:	mov	r0, #10
     b50:	bcs	b70 <flatcc_verify_struct_as_root+0xb0>
     b54:	mov	r0, #9
     b58:	cmp	r2, r4
     b5c:	bhi	b70 <flatcc_verify_struct_as_root+0xb0>
     b60:	ldr	r0, [fp, #8]
     b64:	sub	r0, r0, #1
     b68:	ands	r0, r1, r0
     b6c:	movwne	r0, #11
     b70:	sub	sp, fp, #16
     b74:	pop	{r4, r5, r6, r7, fp, pc}
     b78:	mov	r0, #0
     b7c:	mov	r1, r7
     b80:	mov	r2, #4
     b84:	str	r0, [sp, #4]
     b88:	add	r0, sp, #4
     b8c:	bl	0 <strncpy>
     b90:	ldr	r0, [sp, #4]
     b94:	ldr	r1, [r5, #4]
     b98:	subs	r1, r1, r0
     b9c:	movwne	r1, #1
     ba0:	cmp	r0, #0
     ba4:	lslne	r0, r1, #1
     ba8:	sub	sp, fp, #16
     bac:	pop	{r4, r5, r6, r7, fp, pc}

00000bb0 <flatcc_verify_struct_as_typed_root>:
     bb0:	push	{fp, lr}
     bb4:	mov	fp, sp
     bb8:	mov	ip, r0
     bbc:	mov	r0, #5
     bc0:	tst	ip, #3
     bc4:	bne	c34 <flatcc_verify_struct_as_typed_root+0x84>
     bc8:	mov	r0, #6
     bcc:	cmn	r1, #9
     bd0:	bhi	c34 <flatcc_verify_struct_as_typed_root+0x84>
     bd4:	mov	r0, #1
     bd8:	cmp	r1, #8
     bdc:	bcc	c34 <flatcc_verify_struct_as_typed_root+0x84>
     be0:	cmp	r2, #0
     be4:	beq	bf8 <flatcc_verify_struct_as_typed_root+0x48>
     be8:	ldr	lr, [ip, #4]
     bec:	mov	r0, #2
     bf0:	cmp	lr, r2
     bf4:	bne	c34 <flatcc_verify_struct_as_typed_root+0x84>
     bf8:	ldr	ip, [ip]
     bfc:	mov	r0, #18
     c00:	sub	r2, ip, #1
     c04:	cmp	r2, r1
     c08:	bcs	c34 <flatcc_verify_struct_as_typed_root+0x84>
     c0c:	adds	r3, ip, r3
     c10:	mov	r0, #10
     c14:	bcs	c34 <flatcc_verify_struct_as_typed_root+0x84>
     c18:	mov	r0, #9
     c1c:	cmp	r3, r1
     c20:	pophi	{fp, pc}
     c24:	ldr	r0, [fp, #8]
     c28:	sub	r0, r0, #1
     c2c:	ands	r0, ip, r0
     c30:	movwne	r0, #11
     c34:	pop	{fp, pc}

00000c38 <flatcc_verify_table_as_root>:
     c38:	push	{r4, r5, r6, r7, fp, lr}
     c3c:	add	fp, sp, #16
     c40:	sub	sp, sp, #24
     c44:	mov	r4, r0
     c48:	mov	r0, #5
     c4c:	tst	r4, #3
     c50:	bne	d5c <flatcc_verify_table_as_root+0x124>
     c54:	mov	r6, r1
     c58:	mov	r0, #6
     c5c:	cmn	r1, #9
     c60:	bhi	d5c <flatcc_verify_table_as_root+0x124>
     c64:	mov	r0, #1
     c68:	cmp	r6, #8
     c6c:	bcc	d5c <flatcc_verify_table_as_root+0x124>
     c70:	mov	r5, r3
     c74:	mov	r7, r2
     c78:	cmp	r2, #0
     c7c:	beq	cac <flatcc_verify_table_as_root+0x74>
     c80:	mov	r0, #0
     c84:	mov	r1, r7
     c88:	mov	r2, #4
     c8c:	str	r0, [sp]
     c90:	mov	r0, sp
     c94:	bl	0 <strncpy>
     c98:	ldr	r0, [sp]
     c9c:	cmp	r0, #0
     ca0:	ldrne	r1, [r4, #4]
     ca4:	cmpne	r1, r0
     ca8:	bne	d64 <flatcc_verify_table_as_root+0x12c>
     cac:	ldr	r1, [r4]
     cb0:	mov	r0, #99	; 0x63
     cb4:	str	r0, [sp, #8]
     cb8:	mov	r0, #15
     cbc:	tst	r1, #3
     cc0:	bne	d5c <flatcc_verify_table_as_root+0x124>
     cc4:	cmp	r1, #0
     cc8:	beq	d5c <flatcc_verify_table_as_root+0x124>
     ccc:	add	r2, r1, #4
     cd0:	cmp	r2, r6
     cd4:	bhi	d5c <flatcc_verify_table_as_root+0x124>
     cd8:	str	r1, [sp, #16]
     cdc:	ldr	r0, [r4, r1]
     ce0:	sub	r7, r1, r0
     ce4:	mov	r0, #29
     ce8:	tst	r7, #-2147483647	; 0x80000001
     cec:	bne	d5c <flatcc_verify_table_as_root+0x124>
     cf0:	add	r3, r7, #2
     cf4:	mov	r0, #27
     cf8:	cmp	r3, r6
     cfc:	bhi	d5c <flatcc_verify_table_as_root+0x124>
     d00:	mov	ip, r4
     d04:	mov	r0, #30
     d08:	ldrh	r2, [ip, r7]!
     d0c:	tst	r2, #1
     d10:	strh	r2, [sp, #22]
     d14:	bne	d5c <flatcc_verify_table_as_root+0x124>
     d18:	add	r7, r7, r2
     d1c:	cmp	r7, r6
     d20:	bhi	d5c <flatcc_verify_table_as_root+0x124>
     d24:	mov	r0, #28
     d28:	cmp	r2, #4
     d2c:	bcc	d5c <flatcc_verify_table_as_root+0x124>
     d30:	add	r0, r4, r3
     d34:	sub	r1, r6, r1
     d38:	ldrh	r2, [r0]
     d3c:	mov	r0, #20
     d40:	cmp	r1, r2
     d44:	strh	r2, [sp, #20]
     d48:	bcc	d5c <flatcc_verify_table_as_root+0x124>
     d4c:	mov	r0, sp
     d50:	stm	sp, {r4, r6}
     d54:	str	ip, [sp, #12]
     d58:	blx	r5
     d5c:	sub	sp, fp, #16
     d60:	pop	{r4, r5, r6, r7, fp, pc}
     d64:	mov	r0, #0
     d68:	mov	r1, r7
     d6c:	mov	r2, #4
     d70:	str	r0, [sp]
     d74:	mov	r0, sp
     d78:	bl	0 <strncpy>
     d7c:	ldr	r0, [sp]
     d80:	ldr	r1, [r4, #4]
     d84:	subs	r1, r1, r0
     d88:	movwne	r1, #1
     d8c:	cmp	r0, #0
     d90:	lslne	r0, r1, #1
     d94:	sub	sp, fp, #16
     d98:	pop	{r4, r5, r6, r7, fp, pc}

00000d9c <flatcc_verify_table_as_typed_root>:
     d9c:	push	{r4, r5, r6, sl, fp, lr}
     da0:	add	fp, sp, #16
     da4:	sub	sp, sp, #24
     da8:	mov	ip, #5
     dac:	tst	r0, #3
     db0:	bne	e98 <flatcc_verify_table_as_typed_root+0xfc>
     db4:	mov	ip, #6
     db8:	cmn	r1, #9
     dbc:	bhi	e98 <flatcc_verify_table_as_typed_root+0xfc>
     dc0:	mov	ip, #1
     dc4:	cmp	r1, #8
     dc8:	bcc	e98 <flatcc_verify_table_as_typed_root+0xfc>
     dcc:	cmp	r2, #0
     dd0:	beq	de4 <flatcc_verify_table_as_typed_root+0x48>
     dd4:	ldr	r6, [r0, #4]
     dd8:	mov	ip, #2
     ddc:	cmp	r6, r2
     de0:	bne	e98 <flatcc_verify_table_as_typed_root+0xfc>
     de4:	ldr	r2, [r0]
     de8:	mov	r6, #99	; 0x63
     dec:	mov	ip, #15
     df0:	str	r6, [sp, #8]
     df4:	tst	r2, #3
     df8:	bne	e98 <flatcc_verify_table_as_typed_root+0xfc>
     dfc:	cmp	r2, #0
     e00:	beq	e98 <flatcc_verify_table_as_typed_root+0xfc>
     e04:	add	r6, r2, #4
     e08:	cmp	r6, r1
     e0c:	bhi	e98 <flatcc_verify_table_as_typed_root+0xfc>
     e10:	str	r2, [sp, #16]
     e14:	mov	ip, #29
     e18:	ldr	r6, [r0, r2]
     e1c:	sub	r5, r2, r6
     e20:	tst	r5, #-2147483647	; 0x80000001
     e24:	bne	e98 <flatcc_verify_table_as_typed_root+0xfc>
     e28:	add	r4, r5, #2
     e2c:	mov	ip, #27
     e30:	cmp	r4, r1
     e34:	bhi	e98 <flatcc_verify_table_as_typed_root+0xfc>
     e38:	mov	lr, r0
     e3c:	mov	ip, #30
     e40:	ldrh	r6, [lr, r5]!
     e44:	tst	r6, #1
     e48:	strh	r6, [sp, #22]
     e4c:	bne	e98 <flatcc_verify_table_as_typed_root+0xfc>
     e50:	add	r5, r5, r6
     e54:	cmp	r5, r1
     e58:	bhi	e98 <flatcc_verify_table_as_typed_root+0xfc>
     e5c:	mov	ip, #28
     e60:	cmp	r6, #4
     e64:	bcc	e98 <flatcc_verify_table_as_typed_root+0xfc>
     e68:	add	r6, r0, r4
     e6c:	sub	r2, r1, r2
     e70:	mov	ip, #20
     e74:	ldrh	r4, [r6]
     e78:	cmp	r2, r4
     e7c:	strh	r4, [sp, #20]
     e80:	bcc	e98 <flatcc_verify_table_as_typed_root+0xfc>
     e84:	stm	sp, {r0, r1}
     e88:	mov	r0, sp
     e8c:	str	lr, [sp, #12]
     e90:	blx	r3
     e94:	mov	ip, r0
     e98:	mov	r0, ip
     e9c:	sub	sp, fp, #16
     ea0:	pop	{r4, r5, r6, sl, fp, pc}

00000ea4 <flatcc_verify_struct_as_nested_root>:
     ea4:	push	{r4, r5, r6, r7, fp, lr}
     ea8:	add	fp, sp, #16
     eac:	sub	sp, sp, #8
     eb0:	mov	r7, #4
     eb4:	ldrh	r4, [r0, #22]
     eb8:	ldr	lr, [fp, #12]
     ebc:	add	r5, r7, r1, lsl #1
     ec0:	uxth	ip, r5
     ec4:	cmp	ip, r4
     ec8:	bcs	f50 <flatcc_verify_struct_as_nested_root+0xac>
     ecc:	ldr	r1, [r0, #12]
     ed0:	uxtah	r5, r1, r5
     ed4:	ldrh	r5, [r5]
     ed8:	cmp	r5, #0
     edc:	beq	f50 <flatcc_verify_struct_as_nested_root+0xac>
     ee0:	ldrh	r4, [r0, #20]
     ee4:	add	r6, r5, #4
     ee8:	cmp	r6, r4
     eec:	bhi	f64 <flatcc_verify_struct_as_nested_root+0xc0>
     ef0:	ldr	r4, [r0, #16]
     ef4:	add	r6, r4, r5
     ef8:	tst	r6, #3
     efc:	bne	f64 <flatcc_verify_struct_as_nested_root+0xc0>
     f00:	cmp	r6, #0
     f04:	beq	1014 <flatcc_verify_struct_as_nested_root+0x170>
     f08:	ldr	r4, [r0]
     f0c:	ldr	r5, [r4, r6]
     f10:	add	r5, r5, r6
     f14:	cmp	r5, r6
     f18:	bls	f64 <flatcc_verify_struct_as_nested_root+0xc0>
     f1c:	ldr	r6, [r0, #4]
     f20:	add	r7, r5, #4
     f24:	cmp	r7, r6
     f28:	bhi	f64 <flatcc_verify_struct_as_nested_root+0xc0>
     f2c:	ands	r7, r7, #3
     f30:	bne	f64 <flatcc_verify_struct_as_nested_root+0xc0>
     f34:	ldr	r4, [r4, r5]
     f38:	sub	r5, r6, r5
     f3c:	sub	r5, r5, #4
     f40:	mul	r4, r4, lr
     f44:	cmp	r5, r4
     f48:	bcc	f64 <flatcc_verify_struct_as_nested_root+0xc0>
     f4c:	b	1014 <flatcc_verify_struct_as_nested_root+0x170>
     f50:	cmp	r2, #0
     f54:	beq	1004 <flatcc_verify_struct_as_nested_root+0x160>
     f58:	cmp	ip, r4
     f5c:	bcs	ff4 <flatcc_verify_struct_as_nested_root+0x150>
     f60:	ldr	r1, [r0, #12]
     f64:	add	r1, r1, ip
     f68:	ldrh	r3, [r1]
     f6c:	cmp	r3, #0
     f70:	beq	ff4 <flatcc_verify_struct_as_nested_root+0x150>
     f74:	ldrh	r2, [r0, #20]
     f78:	add	r7, r3, #4
     f7c:	mov	r1, #13
     f80:	cmp	r7, r2
     f84:	bhi	1068 <flatcc_verify_struct_as_nested_root+0x1c4>
     f88:	ldr	r1, [r0, #16]
     f8c:	add	r5, r1, r3
     f90:	mov	r1, #12
     f94:	tst	r5, #3
     f98:	bne	1068 <flatcc_verify_struct_as_nested_root+0x1c4>
     f9c:	cmp	r5, #0
     fa0:	beq	1064 <flatcc_verify_struct_as_nested_root+0x1c0>
     fa4:	ldr	r2, [r0]
     fa8:	ldr	r1, [r2, r5]
     fac:	add	r3, r1, r5
     fb0:	mov	r1, #16
     fb4:	cmp	r3, r5
     fb8:	bls	1068 <flatcc_verify_struct_as_nested_root+0x1c4>
     fbc:	ldr	r0, [r0, #4]
     fc0:	add	r7, r3, #4
     fc4:	cmp	r7, r0
     fc8:	bhi	1068 <flatcc_verify_struct_as_nested_root+0x1c4>
     fcc:	ands	r7, r7, #3
     fd0:	bne	1068 <flatcc_verify_struct_as_nested_root+0x1c4>
     fd4:	ldr	r1, [r2, r3]
     fd8:	sub	r0, r0, r3
     fdc:	sub	r0, r0, #4
     fe0:	mul	r2, r1, lr
     fe4:	mov	r1, #0
     fe8:	cmp	r0, r2
     fec:	movwcc	r1, #26
     ff0:	b	1068 <flatcc_verify_struct_as_nested_root+0x1c4>
     ff4:	cmp	r2, #0
     ff8:	movwne	r2, #1
     ffc:	lsl	r1, r2, #2
    1000:	b	1068 <flatcc_verify_struct_as_nested_root+0x1c4>
    1004:	mov	r1, #0
    1008:	cmp	ip, r4
    100c:	bcs	1068 <flatcc_verify_struct_as_nested_root+0x1c4>
    1010:	ldr	r1, [r0, #12]
    1014:	add	r1, r1, ip
    1018:	ldrh	r2, [r1]
    101c:	mov	r1, #0
    1020:	cmp	r2, #0
    1024:	beq	1068 <flatcc_verify_struct_as_nested_root+0x1c4>
    1028:	ldr	r7, [r0]
    102c:	ldr	r0, [r0, #16]
    1030:	add	r0, r7, r0
    1034:	adds	r0, r0, r2
    1038:	beq	1068 <flatcc_verify_struct_as_nested_root+0x1c4>
    103c:	ldr	r2, [r0]
    1040:	ldr	ip, [fp, #8]
    1044:	ldr	r1, [r2, r0]!
    1048:	str	lr, [sp]
    104c:	add	r0, r2, #4
    1050:	mov	r2, r3
    1054:	mov	r3, ip
    1058:	bl	ac0 <flatcc_verify_struct_as_root>
    105c:	sub	sp, fp, #16
    1060:	pop	{r4, r5, r6, r7, fp, pc}
    1064:	mov	r1, #0
    1068:	mov	r0, r1
    106c:	sub	sp, fp, #16
    1070:	pop	{r4, r5, r6, r7, fp, pc}

00001074 <flatcc_verify_table_as_nested_root>:
    1074:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
    1078:	add	fp, sp, #24
    107c:	sub	sp, sp, #24
    1080:	mov	r4, r0
    1084:	mov	r0, #4
    1088:	ldr	r8, [fp, #8]
    108c:	mov	r5, r3
    1090:	add	r6, r0, r1, lsl #1
    1094:	ldrh	r7, [r4, #22]
    1098:	uxth	r3, r6
    109c:	cmp	r3, r7
    10a0:	bcs	1128 <flatcc_verify_table_as_nested_root+0xb4>
    10a4:	ldr	r0, [r4, #12]
    10a8:	uxtah	r6, r0, r6
    10ac:	ldrh	r6, [r6]
    10b0:	cmp	r6, #0
    10b4:	beq	1128 <flatcc_verify_table_as_nested_root+0xb4>
    10b8:	ldrh	r7, [r4, #20]
    10bc:	add	r1, r6, #4
    10c0:	cmp	r1, r7
    10c4:	bhi	113c <flatcc_verify_table_as_nested_root+0xc8>
    10c8:	ldr	r1, [r4, #16]
    10cc:	add	r7, r1, r6
    10d0:	tst	r7, #3
    10d4:	bne	113c <flatcc_verify_table_as_nested_root+0xc8>
    10d8:	cmp	r7, #0
    10dc:	beq	11f4 <flatcc_verify_table_as_nested_root+0x180>
    10e0:	ldr	ip, [r4]
    10e4:	ldr	r1, [ip, r7]
    10e8:	add	r6, r1, r7
    10ec:	cmp	r6, r7
    10f0:	bls	113c <flatcc_verify_table_as_nested_root+0xc8>
    10f4:	ldr	lr, [r4, #4]
    10f8:	add	r7, r6, #4
    10fc:	cmp	r7, lr
    1100:	bhi	113c <flatcc_verify_table_as_nested_root+0xc8>
    1104:	ands	r1, r7, #3
    1108:	bne	113c <flatcc_verify_table_as_nested_root+0xc8>
    110c:	ldr	r1, [ip, r6]
    1110:	sub	r7, lr, r6
    1114:	sub	r7, r7, #4
    1118:	mul	r1, r1, r8
    111c:	cmp	r7, r1
    1120:	bcc	113c <flatcc_verify_table_as_nested_root+0xc8>
    1124:	b	11f4 <flatcc_verify_table_as_nested_root+0x180>
    1128:	cmp	r2, #0
    112c:	beq	11e4 <flatcc_verify_table_as_nested_root+0x170>
    1130:	cmp	r3, r7
    1134:	bcs	11d0 <flatcc_verify_table_as_nested_root+0x15c>
    1138:	ldr	r0, [r4, #12]
    113c:	add	r0, r0, r3
    1140:	ldrh	r3, [r0]
    1144:	cmp	r3, #0
    1148:	beq	11d0 <flatcc_verify_table_as_nested_root+0x15c>
    114c:	ldrh	r1, [r4, #20]
    1150:	add	r2, r3, #4
    1154:	mov	r0, #13
    1158:	cmp	r2, r1
    115c:	bhi	133c <flatcc_verify_table_as_nested_root+0x2c8>
    1160:	ldr	r0, [r4, #16]
    1164:	add	r7, r0, r3
    1168:	mov	r0, #12
    116c:	tst	r7, #3
    1170:	bne	133c <flatcc_verify_table_as_nested_root+0x2c8>
    1174:	cmp	r7, #0
    1178:	beq	1344 <flatcc_verify_table_as_nested_root+0x2d0>
    117c:	ldr	r2, [r4]
    1180:	ldr	r0, [r2, r7]
    1184:	add	r3, r0, r7
    1188:	mov	r0, #16
    118c:	cmp	r3, r7
    1190:	bls	133c <flatcc_verify_table_as_nested_root+0x2c8>
    1194:	ldr	r7, [r4, #4]
    1198:	add	r6, r3, #4
    119c:	cmp	r6, r7
    11a0:	bhi	133c <flatcc_verify_table_as_nested_root+0x2c8>
    11a4:	ands	r1, r6, #3
    11a8:	bne	133c <flatcc_verify_table_as_nested_root+0x2c8>
    11ac:	ldr	r0, [r2, r3]
    11b0:	mul	r1, r0, r8
    11b4:	sub	r0, r7, r3
    11b8:	sub	r2, r0, #4
    11bc:	mov	r0, #0
    11c0:	cmp	r2, r1
    11c4:	movwcc	r0, #26
    11c8:	sub	sp, fp, #24
    11cc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
    11d0:	cmp	r2, #0
    11d4:	movwne	r2, #1
    11d8:	lsl	r0, r2, #2
    11dc:	sub	sp, fp, #24
    11e0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
    11e4:	mov	r0, #0
    11e8:	cmp	r3, r7
    11ec:	bcs	133c <flatcc_verify_table_as_nested_root+0x2c8>
    11f0:	ldr	r0, [r4, #12]
    11f4:	add	r0, r0, r3
    11f8:	ldrh	r1, [r0]
    11fc:	mov	r0, #0
    1200:	cmp	r1, #0
    1204:	beq	133c <flatcc_verify_table_as_nested_root+0x2c8>
    1208:	ldr	r2, [r4]
    120c:	ldr	r3, [r4, #16]
    1210:	add	r2, r2, r3
    1214:	adds	r1, r2, r1
    1218:	beq	133c <flatcc_verify_table_as_nested_root+0x2c8>
    121c:	ldr	r6, [r1]
    1220:	mov	r0, #5
    1224:	ldr	r8, [r6, r1]!
    1228:	add	r7, r6, #4
    122c:	tst	r7, #3
    1230:	bne	133c <flatcc_verify_table_as_nested_root+0x2c8>
    1234:	mov	r0, #6
    1238:	cmn	r8, #9
    123c:	bhi	133c <flatcc_verify_table_as_nested_root+0x2c8>
    1240:	mov	r0, #1
    1244:	cmp	r8, #8
    1248:	bcc	133c <flatcc_verify_table_as_nested_root+0x2c8>
    124c:	cmp	r5, #0
    1250:	beq	1280 <flatcc_verify_table_as_nested_root+0x20c>
    1254:	mov	r0, #0
    1258:	mov	r1, r5
    125c:	mov	r2, #4
    1260:	str	r0, [sp]
    1264:	mov	r0, sp
    1268:	bl	0 <strncpy>
    126c:	ldr	r0, [sp]
    1270:	cmp	r0, #0
    1274:	ldrne	r1, [r6, #8]
    1278:	cmpne	r1, r0
    127c:	bne	1350 <flatcc_verify_table_as_nested_root+0x2dc>
    1280:	ldr	r0, [r4, #8]
    1284:	ldr	r1, [r7]
    1288:	subs	r0, r0, #1
    128c:	str	r0, [sp, #8]
    1290:	beq	1388 <flatcc_verify_table_as_nested_root+0x314>
    1294:	mov	r0, #15
    1298:	tst	r1, #3
    129c:	bne	133c <flatcc_verify_table_as_nested_root+0x2c8>
    12a0:	cmp	r1, #0
    12a4:	beq	133c <flatcc_verify_table_as_nested_root+0x2c8>
    12a8:	add	r2, r1, #4
    12ac:	cmp	r2, r8
    12b0:	bhi	133c <flatcc_verify_table_as_nested_root+0x2c8>
    12b4:	str	r1, [sp, #16]
    12b8:	ldr	r0, [r7, r1]
    12bc:	sub	r6, r1, r0
    12c0:	mov	r0, #29
    12c4:	tst	r6, #-2147483647	; 0x80000001
    12c8:	bne	133c <flatcc_verify_table_as_nested_root+0x2c8>
    12cc:	add	r3, r6, #2
    12d0:	mov	r0, #27
    12d4:	cmp	r3, r8
    12d8:	bhi	133c <flatcc_verify_table_as_nested_root+0x2c8>
    12dc:	mov	r2, r7
    12e0:	mov	r0, #30
    12e4:	ldrh	r5, [r2, r6]!
    12e8:	tst	r5, #1
    12ec:	strh	r5, [sp, #22]
    12f0:	bne	133c <flatcc_verify_table_as_nested_root+0x2c8>
    12f4:	add	r6, r6, r5
    12f8:	cmp	r6, r8
    12fc:	bhi	133c <flatcc_verify_table_as_nested_root+0x2c8>
    1300:	mov	r0, #28
    1304:	cmp	r5, #4
    1308:	bcc	133c <flatcc_verify_table_as_nested_root+0x2c8>
    130c:	add	r0, r7, r3
    1310:	sub	r1, r8, r1
    1314:	ldrh	r3, [r0]
    1318:	mov	r0, #20
    131c:	cmp	r1, r3
    1320:	strh	r3, [sp, #20]
    1324:	bcc	133c <flatcc_verify_table_as_nested_root+0x2c8>
    1328:	ldr	r1, [fp, #12]
    132c:	mov	r0, sp
    1330:	stm	sp, {r7, r8}
    1334:	str	r2, [sp, #12]
    1338:	blx	r1
    133c:	sub	sp, fp, #24
    1340:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
    1344:	mov	r0, #0
    1348:	sub	sp, fp, #24
    134c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
    1350:	mov	r0, #0
    1354:	mov	r1, r5
    1358:	mov	r2, #4
    135c:	str	r0, [sp]
    1360:	mov	r0, sp
    1364:	bl	0 <strncpy>
    1368:	ldr	r0, [sp]
    136c:	ldr	r1, [r6, #8]
    1370:	subs	r1, r1, r0
    1374:	movwne	r1, #1
    1378:	cmp	r0, #0
    137c:	lslne	r0, r1, #1
    1380:	sub	sp, fp, #24
    1384:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
    1388:	mov	r0, #3
    138c:	sub	sp, fp, #24
    1390:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

00001394 <flatcc_verify_union_field>:
    1394:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1398:	add	fp, sp, #28
    139c:	sub	sp, sp, #28
    13a0:	mov	r7, #2
    13a4:	ldrh	r4, [r0, #22]
    13a8:	lsl	r5, r1, #1
    13ac:	add	r7, r7, r1, lsl #1
    13b0:	uxth	r6, r7
    13b4:	cmp	r6, r4
    13b8:	bcs	14b0 <flatcc_verify_union_field+0x11c>
    13bc:	ldr	r6, [r0, #12]
    13c0:	uxtah	r1, r6, r7
    13c4:	ldrh	ip, [r1]
    13c8:	cmp	ip, #0
    13cc:	beq	14b0 <flatcc_verify_union_field+0x11c>
    13d0:	ldrh	r7, [r0, #20]
    13d4:	mov	r1, #13
    13d8:	cmp	ip, r7
    13dc:	bcs	14e4 <flatcc_verify_union_field+0x150>
    13e0:	add	r7, r5, #4
    13e4:	ldr	lr, [r0]
    13e8:	mov	r1, #1
    13ec:	uxth	sl, r7
    13f0:	cmp	sl, r4
    13f4:	bcs	1408 <flatcc_verify_union_field+0x74>
    13f8:	uxtah	r1, r6, r7
    13fc:	ldrh	r1, [r1]
    1400:	clz	r1, r1
    1404:	lsr	r1, r1, #5
    1408:	ldr	r9, [r0, #16]
    140c:	cmp	r1, #0
    1410:	moveq	r1, #24
    1414:	add	r8, lr, r9
    1418:	ldrb	r5, [r8, ip]
    141c:	cmpeq	r5, #0
    1420:	beq	14e4 <flatcc_verify_union_field+0x150>
    1424:	mov	r1, #0
    1428:	cmp	r5, #0
    142c:	beq	14e4 <flatcc_verify_union_field+0x150>
    1430:	cmp	sl, r4
    1434:	bcs	14f0 <flatcc_verify_union_field+0x15c>
    1438:	uxtah	r1, r6, r7
    143c:	ldrh	r4, [r1]
    1440:	cmp	r4, #0
    1444:	beq	14f0 <flatcc_verify_union_field+0x15c>
    1448:	ldrh	r1, [r0, #20]
    144c:	add	r2, r4, #4
    1450:	cmp	r2, r1
    1454:	mov	r1, #13
    1458:	bhi	14e4 <flatcc_verify_union_field+0x150>
    145c:	add	r2, r9, r4
    1460:	mov	r1, #12
    1464:	tst	r2, #3
    1468:	bne	14e4 <flatcc_verify_union_field+0x150>
    146c:	cmp	r2, #0
    1470:	mov	r1, #0
    1474:	beq	14e4 <flatcc_verify_union_field+0x150>
    1478:	str	lr, [sp, #4]
    147c:	ldr	r1, [r0, #4]
    1480:	ldr	r0, [r0, #8]
    1484:	str	r1, [sp, #8]
    1488:	str	r2, [sp, #20]
    148c:	str	r0, [sp, #12]
    1490:	ldr	r0, [lr, r2]
    1494:	str	r0, [sp, #24]
    1498:	ldrb	r0, [r8, ip]
    149c:	strb	r0, [sp, #16]
    14a0:	add	r0, sp, #4
    14a4:	blx	r3
    14a8:	mov	r1, r0
    14ac:	b	14e4 <flatcc_verify_union_field+0x150>
    14b0:	add	r1, r5, #4
    14b4:	uxth	r3, r1
    14b8:	cmp	r3, r4
    14bc:	bcs	14d8 <flatcc_verify_union_field+0x144>
    14c0:	ldr	r0, [r0, #12]
    14c4:	uxtah	r0, r0, r1
    14c8:	mov	r1, #23
    14cc:	ldrh	r0, [r0]
    14d0:	cmp	r0, #0
    14d4:	bne	14e4 <flatcc_verify_union_field+0x150>
    14d8:	cmp	r2, #0
    14dc:	movwne	r2, #21
    14e0:	mov	r1, r2
    14e4:	mov	r0, r1
    14e8:	sub	sp, fp, #28
    14ec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    14f0:	cmp	r2, #0
    14f4:	movwne	r2, #1
    14f8:	lsl	r1, r2, #2
    14fc:	b	14e4 <flatcc_verify_union_field+0x150>

00001500 <flatcc_verify_union_vector_field>:
    1500:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1504:	add	fp, sp, #28
    1508:	sub	sp, sp, #28
    150c:	mov	r9, r3
    1510:	mov	r3, #2
    1514:	lsl	sl, r1, #1
    1518:	add	r5, r3, r1, lsl #1
    151c:	ldrh	r1, [r0, #22]
    1520:	uxth	r3, r5
    1524:	cmp	r3, r1
    1528:	bcs	1540 <flatcc_verify_union_vector_field+0x40>
    152c:	ldr	r7, [r0, #12]
    1530:	uxtah	r5, r7, r5
    1534:	ldrh	r5, [r5]
    1538:	cmp	r5, #0
    153c:	bne	157c <flatcc_verify_union_vector_field+0x7c>
    1540:	add	r7, sl, #4
    1544:	uxth	r5, r7
    1548:	cmp	r5, r1
    154c:	bcs	15f8 <flatcc_verify_union_vector_field+0xf8>
    1550:	cmp	r2, #0
    1554:	beq	1570 <flatcc_verify_union_vector_field+0x70>
    1558:	ldr	r5, [r0, #12]
    155c:	uxtah	r7, r5, r7
    1560:	mov	r5, #22
    1564:	ldrh	r7, [r7]
    1568:	cmp	r7, #0
    156c:	beq	17d4 <flatcc_verify_union_vector_field+0x2d4>
    1570:	cmp	r3, r1
    1574:	bcs	1608 <flatcc_verify_union_vector_field+0x108>
    1578:	ldr	r7, [r0, #12]
    157c:	add	r5, r7, r3
    1580:	ldrh	r5, [r5]
    1584:	cmp	r5, #0
    1588:	beq	1608 <flatcc_verify_union_vector_field+0x108>
    158c:	ldrh	r4, [r0, #20]
    1590:	add	r6, r5, #4
    1594:	cmp	r6, r4
    1598:	bhi	161c <flatcc_verify_union_vector_field+0x11c>
    159c:	ldr	r6, [r0, #16]
    15a0:	add	r5, r6, r5
    15a4:	tst	r5, #3
    15a8:	bne	161c <flatcc_verify_union_vector_field+0x11c>
    15ac:	cmp	r5, #0
    15b0:	beq	16b8 <flatcc_verify_union_vector_field+0x1b8>
    15b4:	ldr	ip, [r0]
    15b8:	ldr	r6, [ip, r5]
    15bc:	add	lr, r6, r5
    15c0:	cmp	lr, r5
    15c4:	bls	161c <flatcc_verify_union_vector_field+0x11c>
    15c8:	ldr	r8, [r0, #4]
    15cc:	add	r5, lr, #4
    15d0:	cmp	r5, r8
    15d4:	bhi	161c <flatcc_verify_union_vector_field+0x11c>
    15d8:	ands	r4, r5, #3
    15dc:	bne	161c <flatcc_verify_union_vector_field+0x11c>
    15e0:	ldr	r6, [ip, lr]
    15e4:	sub	r5, r8, lr
    15e8:	sub	r5, r5, #4
    15ec:	cmp	r5, r6
    15f0:	bcc	161c <flatcc_verify_union_vector_field+0x11c>
    15f4:	b	16b8 <flatcc_verify_union_vector_field+0x1b8>
    15f8:	mov	r5, #22
    15fc:	cmp	r2, #0
    1600:	bne	17d4 <flatcc_verify_union_vector_field+0x2d4>
    1604:	b	1570 <flatcc_verify_union_vector_field+0x70>
    1608:	cmp	r2, #0
    160c:	beq	16a8 <flatcc_verify_union_vector_field+0x1a8>
    1610:	cmp	r3, r1
    1614:	bcs	17c8 <flatcc_verify_union_vector_field+0x2c8>
    1618:	ldr	r7, [r0, #12]
    161c:	add	r1, r7, r3
    1620:	ldrh	r1, [r1]
    1624:	cmp	r1, #0
    1628:	beq	17c8 <flatcc_verify_union_vector_field+0x2c8>
    162c:	ldrh	r2, [r0, #20]
    1630:	add	r3, r1, #4
    1634:	mov	r5, #13
    1638:	cmp	r3, r2
    163c:	bhi	17d4 <flatcc_verify_union_vector_field+0x2d4>
    1640:	ldr	r2, [r0, #16]
    1644:	mov	r5, #12
    1648:	add	r3, r2, r1
    164c:	tst	r3, #3
    1650:	bne	17d4 <flatcc_verify_union_vector_field+0x2d4>
    1654:	cmp	r3, #0
    1658:	beq	17e0 <flatcc_verify_union_vector_field+0x2e0>
    165c:	ldr	r1, [r0]
    1660:	mov	r5, #16
    1664:	ldr	r2, [r1, r3]
    1668:	add	r2, r2, r3
    166c:	cmp	r2, r3
    1670:	bls	17d4 <flatcc_verify_union_vector_field+0x2d4>
    1674:	ldr	r0, [r0, #4]
    1678:	add	r3, r2, #4
    167c:	cmp	r3, r0
    1680:	bhi	17d4 <flatcc_verify_union_vector_field+0x2d4>
    1684:	ands	r3, r3, #3
    1688:	bne	17d4 <flatcc_verify_union_vector_field+0x2d4>
    168c:	ldr	r1, [r1, r2]
    1690:	sub	r0, r0, r2
    1694:	mov	r5, #0
    1698:	sub	r0, r0, #4
    169c:	cmp	r0, r1
    16a0:	movwcc	r5, #26
    16a4:	b	17d4 <flatcc_verify_union_vector_field+0x2d4>
    16a8:	mov	r5, #0
    16ac:	cmp	r3, r1
    16b0:	bcs	17d4 <flatcc_verify_union_vector_field+0x2d4>
    16b4:	ldr	r7, [r0, #12]
    16b8:	add	r3, r7, r3
    16bc:	mov	r5, #0
    16c0:	ldrh	r3, [r3]
    16c4:	cmp	r3, #0
    16c8:	beq	17d4 <flatcc_verify_union_vector_field+0x2d4>
    16cc:	ldr	r8, [r0]
    16d0:	ldr	lr, [r0, #16]
    16d4:	add	r6, r8, lr
    16d8:	adds	ip, r6, r3
    16dc:	beq	17d4 <flatcc_verify_union_vector_field+0x2d4>
    16e0:	add	r3, sl, #4
    16e4:	uxth	r4, r3
    16e8:	cmp	r4, r1
    16ec:	bcs	17c8 <flatcc_verify_union_vector_field+0x2c8>
    16f0:	uxtah	r1, r7, r3
    16f4:	ldrh	r1, [r1]
    16f8:	cmp	r1, #0
    16fc:	beq	17c8 <flatcc_verify_union_vector_field+0x2c8>
    1700:	ldrh	r2, [r0, #20]
    1704:	add	r3, r1, #4
    1708:	mov	r5, #13
    170c:	cmp	r3, r2
    1710:	bhi	17d4 <flatcc_verify_union_vector_field+0x2d4>
    1714:	add	r3, lr, r1
    1718:	mov	r5, #12
    171c:	tst	r3, #3
    1720:	bne	17d4 <flatcc_verify_union_vector_field+0x2d4>
    1724:	cmp	r3, #0
    1728:	mov	r5, #0
    172c:	beq	17d4 <flatcc_verify_union_vector_field+0x2d4>
    1730:	ldr	r1, [r0, #8]
    1734:	cmp	r1, #1
    1738:	blt	17e8 <flatcc_verify_union_vector_field+0x2e8>
    173c:	ldr	r2, [r8, r3]
    1740:	mov	r5, #16
    1744:	add	r2, r2, r3
    1748:	cmp	r2, r3
    174c:	bls	17d4 <flatcc_verify_union_vector_field+0x2d4>
    1750:	ldr	r0, [r0, #4]
    1754:	add	r7, r2, #4
    1758:	cmp	r7, r0
    175c:	bhi	17d4 <flatcc_verify_union_vector_field+0x2d4>
    1760:	ands	r3, r7, #3
    1764:	bne	17d4 <flatcc_verify_union_vector_field+0x2d4>
    1768:	ldr	r3, [r8, r2]
    176c:	mov	r5, #25
    1770:	cmn	r3, #-1073741823	; 0xc0000001
    1774:	bhi	17d4 <flatcc_verify_union_vector_field+0x2d4>
    1778:	sub	r2, r0, r2
    177c:	mov	r5, #26
    1780:	sub	r2, r2, #4
    1784:	cmp	r2, r3, lsl #2
    1788:	bcc	17d4 <flatcc_verify_union_vector_field+0x2d4>
    178c:	ldr	r2, [ip]
    1790:	mov	r5, #34	; 0x22
    1794:	ldr	sl, [r2, ip]!
    1798:	cmp	r3, sl
    179c:	bne	17d4 <flatcc_verify_union_vector_field+0x2d4>
    17a0:	sub	r1, r1, #1
    17a4:	mov	r5, #0
    17a8:	cmp	sl, #0
    17ac:	str	r1, [sp, #12]
    17b0:	str	r0, [sp, #8]
    17b4:	str	r8, [sp, #4]
    17b8:	beq	17d4 <flatcc_verify_union_vector_field+0x2d4>
    17bc:	add	r6, r2, #4
    17c0:	add	r4, sp, #4
    17c4:	b	1808 <flatcc_verify_union_vector_field+0x308>
    17c8:	cmp	r2, #0
    17cc:	movwne	r2, #1
    17d0:	lsl	r5, r2, #2
    17d4:	mov	r0, r5
    17d8:	sub	sp, fp, #28
    17dc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    17e0:	mov	r5, #0
    17e4:	b	17d4 <flatcc_verify_union_vector_field+0x2d4>
    17e8:	mov	r5, #3
    17ec:	b	17d4 <flatcc_verify_union_vector_field+0x2d4>
    17f0:	cmp	r0, #0
    17f4:	bne	1854 <flatcc_verify_union_vector_field+0x354>
    17f8:	add	r6, r6, #1
    17fc:	subs	sl, sl, #1
    1800:	add	r7, r7, #4
    1804:	beq	17d4 <flatcc_verify_union_vector_field+0x2d4>
    1808:	ldr	r1, [r8, r7]
    180c:	ldrb	r0, [r6]
    1810:	cmp	r1, #0
    1814:	beq	17f0 <flatcc_verify_union_vector_field+0x2f0>
    1818:	cmp	r0, #0
    181c:	beq	184c <flatcc_verify_union_vector_field+0x34c>
    1820:	str	r1, [sp, #24]
    1824:	str	r7, [sp, #20]
    1828:	strb	r0, [sp, #16]
    182c:	mov	r0, r4
    1830:	blx	r9
    1834:	cmp	r0, #0
    1838:	beq	17f8 <flatcc_verify_union_vector_field+0x2f8>
    183c:	add	r0, sp, #4
    1840:	blx	r9
    1844:	mov	r5, r0
    1848:	b	17d4 <flatcc_verify_union_vector_field+0x2d4>
    184c:	mov	r5, #33	; 0x21
    1850:	b	17d4 <flatcc_verify_union_vector_field+0x2d4>
    1854:	mov	r5, #32
    1858:	b	17d4 <flatcc_verify_union_vector_field+0x2d4>
