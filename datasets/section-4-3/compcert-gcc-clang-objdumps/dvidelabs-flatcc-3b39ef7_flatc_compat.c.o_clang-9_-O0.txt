
../compcert-repos/dvidelabs-flatcc-3b39ef7/test/flatc_compat/CMakeFiles/flatc_compat.dir/flatc_compat.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <verify_monster>:
       0:	push	{fp, lr}
       4:	mov	fp, sp
       8:	sub	sp, sp, #56	; 0x38
       c:	str	r0, [fp, #-8]
      10:	ldr	r0, [fp, #-8]
      14:	bl	7e4 <MyGame_Example_Monster_as_root>
      18:	str	r0, [fp, #-12]
      1c:	movw	r1, #0
      20:	cmp	r0, r1
      24:	bne	40 <verify_monster+0x40>
      28:	movw	r0, #0
      2c:	movt	r0, #0
      30:	bl	0 <printf>
      34:	mvn	r1, #0
      38:	str	r1, [fp, #-4]
      3c:	b	7d0 <verify_monster+0x7d0>
      40:	ldr	r0, [fp, #-12]
      44:	bl	85c <MyGame_Example_Monster_hp>
      48:	sxth	r0, r0
      4c:	cmp	r0, #80	; 0x50
      50:	beq	6c <verify_monster+0x6c>
      54:	movw	r0, #0
      58:	movt	r0, #0
      5c:	bl	0 <printf>
      60:	mvn	r1, #0
      64:	str	r1, [fp, #-4]
      68:	b	7d0 <verify_monster+0x7d0>
      6c:	ldr	r0, [fp, #-12]
      70:	bl	944 <MyGame_Example_Monster_pos>
      74:	str	r0, [fp, #-20]	; 0xffffffec
      78:	movw	r1, #0
      7c:	cmp	r0, r1
      80:	bne	9c <verify_monster+0x9c>
      84:	movw	r0, #0
      88:	movt	r0, #0
      8c:	bl	0 <printf>
      90:	mvn	r1, #0
      94:	str	r1, [fp, #-4]
      98:	b	7d0 <verify_monster+0x7d0>
      9c:	ldr	r0, [fp, #-20]	; 0xffffffec
      a0:	ldr	r1, [fp, #-8]
      a4:	sub	r0, r0, r1
      a8:	str	r0, [sp, #16]
      ac:	ldr	r0, [sp, #16]
      b0:	and	r0, r0, #15
      b4:	cmp	r0, #0
      b8:	beq	d4 <verify_monster+0xd4>
      bc:	movw	r0, #0
      c0:	movt	r0, #0
      c4:	bl	0 <printf>
      c8:	mvn	r1, #0
      cc:	str	r1, [fp, #-4]
      d0:	b	7d0 <verify_monster+0x7d0>
      d4:	ldr	r0, [fp, #-20]	; 0xffffffec
      d8:	bl	a1c <MyGame_Example_Vec3_x>
      dc:	vmov.f32	s2, #112	; 0x3f800000  1.0
      e0:	vcmp.f32	s0, s2
      e4:	vmrs	APSR_nzcv, fpscr
      e8:	beq	104 <verify_monster+0x104>
      ec:	movw	r0, #0
      f0:	movt	r0, #0
      f4:	bl	0 <printf>
      f8:	mvn	r1, #0
      fc:	str	r1, [fp, #-4]
     100:	b	7d0 <verify_monster+0x7d0>
     104:	ldr	r0, [fp, #-20]	; 0xffffffec
     108:	bl	a68 <MyGame_Example_Vec3_y>
     10c:	vmov.f32	s2, #0	; 0x40000000  2.0
     110:	vcmp.f32	s0, s2
     114:	vmrs	APSR_nzcv, fpscr
     118:	beq	134 <verify_monster+0x134>
     11c:	movw	r0, #0
     120:	movt	r0, #0
     124:	bl	0 <printf>
     128:	mvn	r1, #0
     12c:	str	r1, [fp, #-4]
     130:	b	7d0 <verify_monster+0x7d0>
     134:	ldr	r0, [fp, #-20]	; 0xffffffec
     138:	bl	ab8 <MyGame_Example_Vec3_z>
     13c:	vmov.f32	s2, #8	; 0x40400000  3.0
     140:	vcmp.f32	s0, s2
     144:	vmrs	APSR_nzcv, fpscr
     148:	beq	164 <verify_monster+0x164>
     14c:	movw	r0, #0
     150:	movt	r0, #0
     154:	bl	0 <printf>
     158:	mvn	r1, #0
     15c:	str	r1, [fp, #-4]
     160:	b	7d0 <verify_monster+0x7d0>
     164:	ldr	r0, [fp, #-20]	; 0xffffffec
     168:	bl	b08 <MyGame_Example_Vec3_test1>
     16c:	vmov.f64	d16, #8	; 0x40400000  3.0
     170:	vcmp.f64	d0, d16
     174:	vmrs	APSR_nzcv, fpscr
     178:	beq	194 <verify_monster+0x194>
     17c:	movw	r0, #0
     180:	movt	r0, #0
     184:	bl	0 <printf>
     188:	mvn	r1, #0
     18c:	str	r1, [fp, #-4]
     190:	b	7d0 <verify_monster+0x7d0>
     194:	ldr	r0, [fp, #-20]	; 0xffffffec
     198:	bl	b60 <MyGame_Example_Vec3_test2>
     19c:	sxtb	r0, r0
     1a0:	cmp	r0, #2
     1a4:	beq	1c0 <verify_monster+0x1c0>
     1a8:	movw	r0, #0
     1ac:	movt	r0, #0
     1b0:	bl	0 <printf>
     1b4:	mvn	r1, #0
     1b8:	str	r1, [fp, #-4]
     1bc:	b	7d0 <verify_monster+0x7d0>
     1c0:	ldr	r0, [fp, #-20]	; 0xffffffec
     1c4:	bl	bb4 <MyGame_Example_Vec3_test3>
     1c8:	str	r0, [fp, #-24]	; 0xffffffe8
     1cc:	ldr	r0, [fp, #-24]	; 0xffffffe8
     1d0:	bl	bf4 <MyGame_Example_Test_a>
     1d4:	sxth	r0, r0
     1d8:	cmp	r0, #5
     1dc:	bne	1f4 <verify_monster+0x1f4>
     1e0:	ldr	r0, [fp, #-24]	; 0xffffffe8
     1e4:	bl	c44 <MyGame_Example_Test_b>
     1e8:	sxtb	r0, r0
     1ec:	cmp	r0, #6
     1f0:	beq	20c <verify_monster+0x20c>
     1f4:	movw	r0, #0
     1f8:	movt	r0, #0
     1fc:	bl	0 <printf>
     200:	mvn	r1, #0
     204:	str	r1, [fp, #-4]
     208:	b	7d0 <verify_monster+0x7d0>
     20c:	ldr	r0, [fp, #-12]
     210:	bl	c98 <MyGame_Example_Monster_name>
     214:	str	r0, [sp, #20]
     218:	ldr	r0, [sp, #20]
     21c:	bl	da0 <flatbuffers_string_len>
     220:	cmp	r0, #9
     224:	beq	240 <verify_monster+0x240>
     228:	movw	r0, #0
     22c:	movt	r0, #0
     230:	bl	0 <printf>
     234:	mvn	r1, #0
     238:	str	r1, [fp, #-4]
     23c:	b	7d0 <verify_monster+0x7d0>
     240:	ldr	r0, [sp, #20]
     244:	movw	r1, #0
     248:	cmp	r0, r1
     24c:	beq	268 <verify_monster+0x268>
     250:	ldr	r0, [sp, #20]
     254:	movw	r1, #0
     258:	movt	r1, #0
     25c:	bl	0 <strcmp>
     260:	cmp	r0, #0
     264:	beq	280 <verify_monster+0x280>
     268:	movw	r0, #0
     26c:	movt	r0, #0
     270:	bl	0 <printf>
     274:	mvn	r1, #0
     278:	str	r1, [fp, #-4]
     27c:	b	7d0 <verify_monster+0x7d0>
     280:	ldr	r0, [fp, #-12]
     284:	bl	df0 <MyGame_Example_Monster_inventory>
     288:	str	r0, [sp, #12]
     28c:	ldr	r0, [sp, #12]
     290:	bl	eec <flatbuffers_uint8_vec_len>
     294:	cmp	r0, #5
     298:	beq	2b4 <verify_monster+0x2b4>
     29c:	movw	r0, #0
     2a0:	movt	r0, #0
     2a4:	bl	0 <printf>
     2a8:	mvn	r1, #0
     2ac:	str	r1, [fp, #-4]
     2b0:	b	7d0 <verify_monster+0x7d0>
     2b4:	movw	r0, #0
     2b8:	str	r0, [sp]
     2bc:	ldr	r0, [sp]
     2c0:	cmp	r0, #5
     2c4:	bge	314 <verify_monster+0x314>
     2c8:	ldr	r0, [sp, #12]
     2cc:	ldr	r1, [sp]
     2d0:	bl	f0c <flatbuffers_uint8_vec_at>
     2d4:	and	r0, r0, #255	; 0xff
     2d8:	ldr	r1, [sp]
     2dc:	cmp	r0, r1
     2e0:	beq	300 <verify_monster+0x300>
     2e4:	ldr	r1, [sp]
     2e8:	movw	r0, #0
     2ec:	movt	r0, #0
     2f0:	bl	0 <printf>
     2f4:	mvn	r1, #0
     2f8:	str	r1, [fp, #-4]
     2fc:	b	7d0 <verify_monster+0x7d0>
     300:	b	304 <verify_monster+0x304>
     304:	ldr	r0, [sp]
     308:	add	r0, r0, #1
     30c:	str	r0, [sp]
     310:	b	2bc <verify_monster+0x2bc>
     314:	ldr	r0, [fp, #-12]
     318:	bl	f78 <MyGame_Example_Monster_testarrayofstring>
     31c:	str	r0, [sp, #8]
     320:	movw	r1, #0
     324:	cmp	r0, r1
     328:	bne	344 <verify_monster+0x344>
     32c:	movw	r0, #0
     330:	movt	r0, #0
     334:	bl	0 <printf>
     338:	mvn	r1, #0
     33c:	str	r1, [fp, #-4]
     340:	b	7d0 <verify_monster+0x7d0>
     344:	ldr	r0, [sp, #8]
     348:	bl	1074 <flatbuffers_string_vec_len>
     34c:	cmp	r0, #2
     350:	beq	36c <verify_monster+0x36c>
     354:	movw	r0, #0
     358:	movt	r0, #0
     35c:	bl	0 <printf>
     360:	mvn	r1, #0
     364:	str	r1, [fp, #-4]
     368:	b	7d0 <verify_monster+0x7d0>
     36c:	ldr	r0, [sp, #8]
     370:	movw	r1, #0
     374:	bl	10c4 <flatbuffers_string_vec_at>
     378:	str	r0, [sp, #4]
     37c:	ldr	r0, [sp, #4]
     380:	movw	r1, #0
     384:	movt	r1, #0
     388:	bl	0 <strcmp>
     38c:	cmp	r0, #0
     390:	beq	3ac <verify_monster+0x3ac>
     394:	movw	r0, #0
     398:	movt	r0, #0
     39c:	bl	0 <printf>
     3a0:	mvn	r1, #0
     3a4:	str	r1, [fp, #-4]
     3a8:	b	7d0 <verify_monster+0x7d0>
     3ac:	ldr	r0, [sp, #8]
     3b0:	movw	r1, #1
     3b4:	bl	10c4 <flatbuffers_string_vec_at>
     3b8:	str	r0, [sp, #4]
     3bc:	ldr	r0, [sp, #4]
     3c0:	movw	r1, #0
     3c4:	movt	r1, #0
     3c8:	bl	0 <strcmp>
     3cc:	cmp	r0, #0
     3d0:	beq	3ec <verify_monster+0x3ec>
     3d4:	movw	r0, #0
     3d8:	movt	r0, #0
     3dc:	bl	0 <printf>
     3e0:	mvn	r1, #0
     3e4:	str	r1, [fp, #-4]
     3e8:	b	7d0 <verify_monster+0x7d0>
     3ec:	ldr	r0, [fp, #-12]
     3f0:	bl	114c <MyGame_Example_Monster_test_type>
     3f4:	strb	r0, [sp, #27]
     3f8:	ldrb	r0, [sp, #27]
     3fc:	cmp	r0, #1
     400:	beq	41c <verify_monster+0x41c>
     404:	movw	r0, #0
     408:	movt	r0, #0
     40c:	bl	0 <printf>
     410:	mvn	r1, #0
     414:	str	r1, [fp, #-4]
     418:	b	7d0 <verify_monster+0x7d0>
     41c:	ldr	r0, [fp, #-12]
     420:	bl	1234 <MyGame_Example_Monster_test>
     424:	str	r0, [fp, #-16]
     428:	ldr	r0, [fp, #-16]
     42c:	movw	r1, #0
     430:	cmp	r0, r1
     434:	bne	450 <verify_monster+0x450>
     438:	movw	r0, #0
     43c:	movt	r0, #0
     440:	bl	0 <printf>
     444:	mvn	r1, #0
     448:	str	r1, [fp, #-4]
     44c:	b	7d0 <verify_monster+0x7d0>
     450:	ldr	r0, [fp, #-16]
     454:	bl	c98 <MyGame_Example_Monster_name>
     458:	movw	r1, #0
     45c:	movt	r1, #0
     460:	bl	0 <strcmp>
     464:	cmp	r0, #0
     468:	beq	484 <verify_monster+0x484>
     46c:	movw	r0, #0
     470:	movt	r0, #0
     474:	bl	0 <printf>
     478:	mvn	r1, #0
     47c:	str	r1, [fp, #-4]
     480:	b	7d0 <verify_monster+0x7d0>
     484:	ldr	r0, [fp, #-12]
     488:	bl	132c <MyGame_Example_Monster_test4>
     48c:	str	r0, [sp, #28]
     490:	ldr	r0, [sp, #28]
     494:	bl	1428 <MyGame_Example_Test_vec_len>
     498:	cmp	r0, #2
     49c:	beq	4b8 <verify_monster+0x4b8>
     4a0:	movw	r0, #0
     4a4:	movt	r0, #0
     4a8:	bl	0 <printf>
     4ac:	mvn	r1, #0
     4b0:	str	r1, [fp, #-4]
     4b4:	b	7d0 <verify_monster+0x7d0>
     4b8:	ldr	r0, [sp, #28]
     4bc:	movw	r1, #0
     4c0:	bl	1478 <MyGame_Example_Test_vec_at>
     4c4:	str	r0, [fp, #-24]	; 0xffffffe8
     4c8:	ldr	r0, [fp, #-24]	; 0xffffffe8
     4cc:	bl	bf4 <MyGame_Example_Test_a>
     4d0:	sxth	r0, r0
     4d4:	cmp	r0, #10
     4d8:	beq	4f4 <verify_monster+0x4f4>
     4dc:	movw	r0, #0
     4e0:	movt	r0, #0
     4e4:	bl	0 <printf>
     4e8:	mvn	r1, #0
     4ec:	str	r1, [fp, #-4]
     4f0:	b	7d0 <verify_monster+0x7d0>
     4f4:	ldr	r0, [fp, #-24]	; 0xffffffe8
     4f8:	bl	c44 <MyGame_Example_Test_b>
     4fc:	sxtb	r0, r0
     500:	cmp	r0, #20
     504:	beq	520 <verify_monster+0x520>
     508:	movw	r0, #0
     50c:	movt	r0, #0
     510:	bl	0 <printf>
     514:	mvn	r1, #0
     518:	str	r1, [fp, #-4]
     51c:	b	7d0 <verify_monster+0x7d0>
     520:	ldr	r0, [sp, #28]
     524:	movw	r1, #1
     528:	bl	1478 <MyGame_Example_Test_vec_at>
     52c:	str	r0, [fp, #-24]	; 0xffffffe8
     530:	ldr	r0, [fp, #-24]	; 0xffffffe8
     534:	bl	bf4 <MyGame_Example_Test_a>
     538:	sxth	r0, r0
     53c:	cmp	r0, #30
     540:	beq	55c <verify_monster+0x55c>
     544:	movw	r0, #0
     548:	movt	r0, #0
     54c:	bl	0 <printf>
     550:	mvn	r1, #0
     554:	str	r1, [fp, #-4]
     558:	b	7d0 <verify_monster+0x7d0>
     55c:	ldr	r0, [fp, #-24]	; 0xffffffe8
     560:	bl	c44 <MyGame_Example_Test_b>
     564:	sxtb	r0, r0
     568:	cmp	r0, #40	; 0x28
     56c:	beq	588 <verify_monster+0x588>
     570:	movw	r0, #0
     574:	movt	r0, #0
     578:	bl	0 <printf>
     57c:	mvn	r1, #0
     580:	str	r1, [fp, #-4]
     584:	b	7d0 <verify_monster+0x7d0>
     588:	ldr	r0, [fp, #-12]
     58c:	bl	14dc <MyGame_Example_Monster_testhashs32_fnv1>
     590:	ldr	r1, [pc, #580]	; 7dc <verify_monster+0x7dc>
     594:	cmp	r0, r1
     598:	bne	5a0 <verify_monster+0x5a0>
     59c:	b	5c0 <verify_monster+0x5c0>
     5a0:	movw	r0, #0
     5a4:	movt	r0, #0
     5a8:	movw	r1, #0
     5ac:	movt	r1, #0
     5b0:	movw	r2, #148	; 0x94
     5b4:	movw	r3, #0
     5b8:	movt	r3, #0
     5bc:	bl	0 <__assert_fail>
     5c0:	ldr	r0, [fp, #-12]
     5c4:	bl	15bc <MyGame_Example_Monster_testhashu32_fnv1>
     5c8:	movw	r1, #51521	; 0xc941
     5cc:	movt	r1, #56697	; 0xdd79
     5d0:	cmp	r0, r1
     5d4:	bne	5e0 <verify_monster+0x5e0>
     5d8:	b	5dc <verify_monster+0x5dc>
     5dc:	b	600 <verify_monster+0x600>
     5e0:	movw	r0, #0
     5e4:	movt	r0, #0
     5e8:	movw	r1, #0
     5ec:	movt	r1, #0
     5f0:	movw	r2, #149	; 0x95
     5f4:	movw	r3, #0
     5f8:	movt	r3, #0
     5fc:	bl	0 <__assert_fail>
     600:	ldr	r0, [fp, #-12]
     604:	bl	169c <MyGame_Example_Monster_testhashs64_fnv1>
     608:	movw	r2, #32973	; 0x80cd
     60c:	movt	r2, #28175	; 0x6e0f
     610:	eor	r1, r1, r2
     614:	movw	r2, #37249	; 0x9181
     618:	movt	r2, #62075	; 0xf27b
     61c:	eor	r0, r0, r2
     620:	orr	r0, r0, r1
     624:	cmp	r0, #0
     628:	bne	634 <verify_monster+0x634>
     62c:	b	630 <verify_monster+0x630>
     630:	b	654 <verify_monster+0x654>
     634:	movw	r0, #0
     638:	movt	r0, #0
     63c:	movw	r1, #0
     640:	movt	r1, #0
     644:	movw	r2, #150	; 0x96
     648:	movw	r3, #0
     64c:	movt	r3, #0
     650:	bl	0 <__assert_fail>
     654:	ldr	r0, [fp, #-12]
     658:	bl	1798 <MyGame_Example_Monster_testhashu64_fnv1>
     65c:	movw	r2, #32973	; 0x80cd
     660:	movt	r2, #28175	; 0x6e0f
     664:	eor	r1, r1, r2
     668:	movw	r2, #37249	; 0x9181
     66c:	movt	r2, #62075	; 0xf27b
     670:	eor	r0, r0, r2
     674:	orr	r0, r0, r1
     678:	cmp	r0, #0
     67c:	bne	688 <verify_monster+0x688>
     680:	b	684 <verify_monster+0x684>
     684:	b	6a8 <verify_monster+0x6a8>
     688:	movw	r0, #0
     68c:	movt	r0, #0
     690:	movw	r1, #0
     694:	movt	r1, #0
     698:	movw	r2, #151	; 0x97
     69c:	movw	r3, #0
     6a0:	movt	r3, #0
     6a4:	bl	0 <__assert_fail>
     6a8:	ldr	r0, [fp, #-12]
     6ac:	bl	1894 <MyGame_Example_Monster_testhashs32_fnv1a>
     6b0:	ldr	r1, [pc, #296]	; 7e0 <verify_monster+0x7e0>
     6b4:	cmp	r0, r1
     6b8:	bne	6c0 <verify_monster+0x6c0>
     6bc:	b	6e0 <verify_monster+0x6e0>
     6c0:	movw	r0, #0
     6c4:	movt	r0, #0
     6c8:	movw	r1, #0
     6cc:	movt	r1, #0
     6d0:	movw	r2, #152	; 0x98
     6d4:	movw	r3, #0
     6d8:	movt	r3, #0
     6dc:	bl	0 <__assert_fail>
     6e0:	ldr	r0, [fp, #-12]
     6e4:	bl	1974 <MyGame_Example_Monster_testhashu32_fnv1a>
     6e8:	movw	r1, #42097	; 0xa471
     6ec:	movt	r1, #36481	; 0x8e81
     6f0:	cmp	r0, r1
     6f4:	bne	700 <verify_monster+0x700>
     6f8:	b	6fc <verify_monster+0x6fc>
     6fc:	b	720 <verify_monster+0x720>
     700:	movw	r0, #0
     704:	movt	r0, #0
     708:	movw	r1, #0
     70c:	movt	r1, #0
     710:	movw	r2, #153	; 0x99
     714:	movw	r3, #0
     718:	movt	r3, #0
     71c:	bl	0 <__assert_fail>
     720:	ldr	r0, [fp, #-12]
     724:	bl	1a54 <MyGame_Example_Monster_testhashs64_fnv1a>
     728:	movw	r2, #18652	; 0x48dc
     72c:	movt	r2, #17401	; 0x43f9
     730:	eor	r1, r1, r2
     734:	movw	r2, #56817	; 0xddf1
     738:	movt	r2, #51047	; 0xc767
     73c:	eor	r0, r0, r2
     740:	orr	r0, r0, r1
     744:	cmp	r0, #0
     748:	bne	754 <verify_monster+0x754>
     74c:	b	750 <verify_monster+0x750>
     750:	b	774 <verify_monster+0x774>
     754:	movw	r0, #0
     758:	movt	r0, #0
     75c:	movw	r1, #0
     760:	movt	r1, #0
     764:	movw	r2, #154	; 0x9a
     768:	movw	r3, #0
     76c:	movt	r3, #0
     770:	bl	0 <__assert_fail>
     774:	ldr	r0, [fp, #-12]
     778:	bl	1b50 <MyGame_Example_Monster_testhashu64_fnv1a>
     77c:	movw	r2, #18652	; 0x48dc
     780:	movt	r2, #17401	; 0x43f9
     784:	eor	r1, r1, r2
     788:	movw	r2, #56817	; 0xddf1
     78c:	movt	r2, #51047	; 0xc767
     790:	eor	r0, r0, r2
     794:	orr	r0, r0, r1
     798:	cmp	r0, #0
     79c:	bne	7a8 <verify_monster+0x7a8>
     7a0:	b	7a4 <verify_monster+0x7a4>
     7a4:	b	7c8 <verify_monster+0x7c8>
     7a8:	movw	r0, #0
     7ac:	movt	r0, #0
     7b0:	movw	r1, #0
     7b4:	movt	r1, #0
     7b8:	movw	r2, #155	; 0x9b
     7bc:	movw	r3, #0
     7c0:	movt	r3, #0
     7c4:	bl	0 <__assert_fail>
     7c8:	movw	r0, #0
     7cc:	str	r0, [fp, #-4]
     7d0:	ldr	r0, [fp, #-4]
     7d4:	mov	sp, fp
     7d8:	pop	{fp, pc}
     7dc:	.word	0xdd79c941
     7e0:	.word	0x8e81a471

000007e4 <MyGame_Example_Monster_as_root>:
     7e4:	push	{fp, lr}
     7e8:	mov	fp, sp
     7ec:	sub	sp, sp, #16
     7f0:	str	r0, [fp, #-4]
     7f4:	movw	r0, #0
     7f8:	movt	r0, #0
     7fc:	str	r0, [sp, #8]
     800:	ldr	r0, [fp, #-4]
     804:	movw	r1, #0
     808:	cmp	r0, r1
     80c:	beq	824 <MyGame_Example_Monster_as_root+0x40>
     810:	ldr	r0, [fp, #-4]
     814:	ldr	r1, [sp, #8]
     818:	bl	22cc <flatbuffers_has_identifier>
     81c:	cmp	r0, #0
     820:	bne	830 <MyGame_Example_Monster_as_root+0x4c>
     824:	movw	r0, #0
     828:	str	r0, [sp, #4]
     82c:	b	850 <MyGame_Example_Monster_as_root+0x6c>
     830:	ldr	r0, [fp, #-4]
     834:	ldr	r1, [fp, #-4]
     838:	str	r0, [sp]
     83c:	mov	r0, r1
     840:	bl	2378 <__flatbuffers_uoffset_read_from_pe>
     844:	ldr	r1, [sp]
     848:	add	r0, r1, r0
     84c:	str	r0, [sp, #4]
     850:	ldr	r0, [sp, #4]
     854:	mov	sp, fp
     858:	pop	{fp, pc}

0000085c <MyGame_Example_Monster_hp>:
     85c:	push	{fp, lr}
     860:	mov	fp, sp
     864:	sub	sp, sp, #24
     868:	str	r0, [fp, #-4]
     86c:	movw	r0, #0
     870:	strh	r0, [fp, #-6]
     874:	ldr	r0, [fp, #-4]
     878:	movw	r1, #0
     87c:	cmp	r0, r1
     880:	beq	88c <MyGame_Example_Monster_hp+0x30>
     884:	b	888 <MyGame_Example_Monster_hp+0x2c>
     888:	b	8ac <MyGame_Example_Monster_hp+0x50>
     88c:	movw	r0, #0
     890:	movt	r0, #0
     894:	movw	r1, #0
     898:	movt	r1, #0
     89c:	movw	r2, #697	; 0x2b9
     8a0:	movw	r3, #0
     8a4:	movt	r3, #0
     8a8:	bl	0 <__assert_fail>
     8ac:	mov	r0, #2
     8b0:	strh	r0, [fp, #-8]
     8b4:	ldr	r0, [fp, #-4]
     8b8:	str	r0, [sp, #8]
     8bc:	bl	23fc <__flatbuffers_soffset_read_from_pe>
     8c0:	ldr	r1, [sp, #8]
     8c4:	sub	r0, r1, r0
     8c8:	str	r0, [sp, #12]
     8cc:	ldr	r0, [sp, #12]
     8d0:	bl	2420 <__flatbuffers_voffset_read_from_pe>
     8d4:	ldrh	r1, [fp, #-8]
     8d8:	add	r1, r1, #3
     8dc:	lsl	r1, r1, #1
     8e0:	cmp	r0, r1
     8e4:	bcc	900 <MyGame_Example_Monster_hp+0xa4>
     8e8:	ldr	r0, [sp, #12]
     8ec:	ldrh	r1, [fp, #-8]
     8f0:	add	r0, r0, r1, lsl #1
     8f4:	add	r0, r0, #4
     8f8:	bl	2420 <__flatbuffers_voffset_read_from_pe>
     8fc:	strh	r0, [fp, #-6]
     900:	ldrh	r0, [fp, #-6]
     904:	cmp	r0, #0
     908:	beq	928 <MyGame_Example_Monster_hp+0xcc>
     90c:	ldr	r0, [fp, #-4]
     910:	ldrh	r1, [fp, #-6]
     914:	add	r0, r0, r1
     918:	bl	2448 <flatbuffers_int16_read_from_pe>
     91c:	sxth	r0, r0
     920:	str	r0, [sp, #4]
     924:	b	934 <MyGame_Example_Monster_hp+0xd8>
     928:	movw	r0, #100	; 0x64
     92c:	str	r0, [sp, #4]
     930:	b	934 <MyGame_Example_Monster_hp+0xd8>
     934:	ldr	r0, [sp, #4]
     938:	sxth	r0, r0
     93c:	mov	sp, fp
     940:	pop	{fp, pc}

00000944 <MyGame_Example_Monster_pos>:
     944:	push	{fp, lr}
     948:	mov	fp, sp
     94c:	sub	sp, sp, #24
     950:	str	r0, [fp, #-8]
     954:	movw	r0, #0
     958:	strh	r0, [fp, #-10]
     95c:	ldr	r0, [fp, #-8]
     960:	movw	r1, #0
     964:	cmp	r0, r1
     968:	beq	974 <MyGame_Example_Monster_pos+0x30>
     96c:	b	970 <MyGame_Example_Monster_pos+0x2c>
     970:	b	994 <MyGame_Example_Monster_pos+0x50>
     974:	movw	r0, #0
     978:	movt	r0, #0
     97c:	movw	r1, #0
     980:	movt	r1, #0
     984:	movw	r2, #696	; 0x2b8
     988:	movw	r3, #0
     98c:	movt	r3, #0
     990:	bl	0 <__assert_fail>
     994:	mov	r0, #0
     998:	strh	r0, [sp, #12]
     99c:	ldr	r0, [fp, #-8]
     9a0:	str	r0, [sp, #4]
     9a4:	bl	23fc <__flatbuffers_soffset_read_from_pe>
     9a8:	ldr	r1, [sp, #4]
     9ac:	sub	r0, r1, r0
     9b0:	str	r0, [sp, #8]
     9b4:	ldr	r0, [sp, #8]
     9b8:	bl	2420 <__flatbuffers_voffset_read_from_pe>
     9bc:	ldrh	r1, [sp, #12]
     9c0:	add	r1, r1, #3
     9c4:	lsl	r1, r1, #1
     9c8:	cmp	r0, r1
     9cc:	bcc	9e8 <MyGame_Example_Monster_pos+0xa4>
     9d0:	ldr	r0, [sp, #8]
     9d4:	ldrh	r1, [sp, #12]
     9d8:	add	r0, r0, r1, lsl #1
     9dc:	add	r0, r0, #4
     9e0:	bl	2420 <__flatbuffers_voffset_read_from_pe>
     9e4:	strh	r0, [fp, #-10]
     9e8:	ldrsh	r0, [fp, #-10]
     9ec:	cmp	r0, #0
     9f0:	beq	a08 <MyGame_Example_Monster_pos+0xc4>
     9f4:	ldr	r0, [fp, #-8]
     9f8:	ldrh	r1, [fp, #-10]
     9fc:	add	r0, r0, r1
     a00:	str	r0, [fp, #-4]
     a04:	b	a10 <MyGame_Example_Monster_pos+0xcc>
     a08:	movw	r0, #0
     a0c:	str	r0, [fp, #-4]
     a10:	ldr	r0, [fp, #-4]
     a14:	mov	sp, fp
     a18:	pop	{fp, pc}

00000a1c <MyGame_Example_Vec3_x>:
     a1c:	push	{fp, lr}
     a20:	mov	fp, sp
     a24:	sub	sp, sp, #8
     a28:	str	r0, [sp, #4]
     a2c:	ldr	r0, [sp, #4]
     a30:	movw	r1, #0
     a34:	cmp	r0, r1
     a38:	beq	a4c <MyGame_Example_Vec3_x+0x30>
     a3c:	ldr	r0, [sp, #4]
     a40:	bl	24ac <flatbuffers_float_read_from_pe>
     a44:	vstr	s0, [sp]
     a48:	b	a58 <MyGame_Example_Vec3_x+0x3c>
     a4c:	vldr	s0, [pc, #16]	; a64 <MyGame_Example_Vec3_x+0x48>
     a50:	vstr	s0, [sp]
     a54:	b	a58 <MyGame_Example_Vec3_x+0x3c>
     a58:	vldr	s0, [sp]
     a5c:	mov	sp, fp
     a60:	pop	{fp, pc}
     a64:	.word	0x00000000

00000a68 <MyGame_Example_Vec3_y>:
     a68:	push	{fp, lr}
     a6c:	mov	fp, sp
     a70:	sub	sp, sp, #8
     a74:	str	r0, [sp, #4]
     a78:	ldr	r0, [sp, #4]
     a7c:	movw	r1, #0
     a80:	cmp	r0, r1
     a84:	beq	a9c <MyGame_Example_Vec3_y+0x34>
     a88:	ldr	r0, [sp, #4]
     a8c:	add	r0, r0, #4
     a90:	bl	24ac <flatbuffers_float_read_from_pe>
     a94:	vstr	s0, [sp]
     a98:	b	aa8 <MyGame_Example_Vec3_y+0x40>
     a9c:	vldr	s0, [pc, #16]	; ab4 <MyGame_Example_Vec3_y+0x4c>
     aa0:	vstr	s0, [sp]
     aa4:	b	aa8 <MyGame_Example_Vec3_y+0x40>
     aa8:	vldr	s0, [sp]
     aac:	mov	sp, fp
     ab0:	pop	{fp, pc}
     ab4:	.word	0x00000000

00000ab8 <MyGame_Example_Vec3_z>:
     ab8:	push	{fp, lr}
     abc:	mov	fp, sp
     ac0:	sub	sp, sp, #8
     ac4:	str	r0, [sp, #4]
     ac8:	ldr	r0, [sp, #4]
     acc:	movw	r1, #0
     ad0:	cmp	r0, r1
     ad4:	beq	aec <MyGame_Example_Vec3_z+0x34>
     ad8:	ldr	r0, [sp, #4]
     adc:	add	r0, r0, #8
     ae0:	bl	24ac <flatbuffers_float_read_from_pe>
     ae4:	vstr	s0, [sp]
     ae8:	b	af8 <MyGame_Example_Vec3_z+0x40>
     aec:	vldr	s0, [pc, #16]	; b04 <MyGame_Example_Vec3_z+0x4c>
     af0:	vstr	s0, [sp]
     af4:	b	af8 <MyGame_Example_Vec3_z+0x40>
     af8:	vldr	s0, [sp]
     afc:	mov	sp, fp
     b00:	pop	{fp, pc}
     b04:	.word	0x00000000

00000b08 <MyGame_Example_Vec3_test1>:
     b08:	push	{fp, lr}
     b0c:	mov	fp, sp
     b10:	sub	sp, sp, #16
     b14:	str	r0, [fp, #-4]
     b18:	ldr	r0, [fp, #-4]
     b1c:	movw	r1, #0
     b20:	cmp	r0, r1
     b24:	beq	b3c <MyGame_Example_Vec3_test1+0x34>
     b28:	ldr	r0, [fp, #-4]
     b2c:	add	r0, r0, #16
     b30:	bl	24f4 <flatbuffers_double_read_from_pe>
     b34:	vstr	d0, [sp]
     b38:	b	b48 <MyGame_Example_Vec3_test1+0x40>
     b3c:	vldr	d16, [pc, #20]	; b58 <MyGame_Example_Vec3_test1+0x50>
     b40:	vstr	d16, [sp]
     b44:	b	b48 <MyGame_Example_Vec3_test1+0x40>
     b48:	vldr	d16, [sp]
     b4c:	vmov.f64	d0, d16
     b50:	mov	sp, fp
     b54:	pop	{fp, pc}
	...

00000b60 <MyGame_Example_Vec3_test2>:
     b60:	push	{fp, lr}
     b64:	mov	fp, sp
     b68:	sub	sp, sp, #8
     b6c:	str	r0, [sp, #4]
     b70:	ldr	r0, [sp, #4]
     b74:	movw	r1, #0
     b78:	cmp	r0, r1
     b7c:	beq	b98 <MyGame_Example_Vec3_test2+0x38>
     b80:	ldr	r0, [sp, #4]
     b84:	add	r0, r0, #24
     b88:	bl	2534 <MyGame_Example_Color_read_from_pe>
     b8c:	sxtb	r0, r0
     b90:	str	r0, [sp]
     b94:	b	ba4 <MyGame_Example_Vec3_test2+0x44>
     b98:	movw	r0, #0
     b9c:	str	r0, [sp]
     ba0:	b	ba4 <MyGame_Example_Vec3_test2+0x44>
     ba4:	ldr	r0, [sp]
     ba8:	sxtb	r0, r0
     bac:	mov	sp, fp
     bb0:	pop	{fp, pc}

00000bb4 <MyGame_Example_Vec3_test3>:
     bb4:	sub	sp, sp, #8
     bb8:	str	r0, [sp, #4]
     bbc:	ldr	r0, [sp, #4]
     bc0:	movw	r1, #0
     bc4:	cmp	r0, r1
     bc8:	beq	bdc <MyGame_Example_Vec3_test3+0x28>
     bcc:	ldr	r0, [sp, #4]
     bd0:	add	r0, r0, #26
     bd4:	str	r0, [sp]
     bd8:	b	be8 <MyGame_Example_Vec3_test3+0x34>
     bdc:	movw	r0, #0
     be0:	str	r0, [sp]
     be4:	b	be8 <MyGame_Example_Vec3_test3+0x34>
     be8:	ldr	r0, [sp]
     bec:	add	sp, sp, #8
     bf0:	bx	lr

00000bf4 <MyGame_Example_Test_a>:
     bf4:	push	{fp, lr}
     bf8:	mov	fp, sp
     bfc:	sub	sp, sp, #8
     c00:	str	r0, [sp, #4]
     c04:	ldr	r0, [sp, #4]
     c08:	movw	r1, #0
     c0c:	cmp	r0, r1
     c10:	beq	c28 <MyGame_Example_Test_a+0x34>
     c14:	ldr	r0, [sp, #4]
     c18:	bl	2448 <flatbuffers_int16_read_from_pe>
     c1c:	sxth	r0, r0
     c20:	str	r0, [sp]
     c24:	b	c34 <MyGame_Example_Test_a+0x40>
     c28:	movw	r0, #0
     c2c:	str	r0, [sp]
     c30:	b	c34 <MyGame_Example_Test_a+0x40>
     c34:	ldr	r0, [sp]
     c38:	sxth	r0, r0
     c3c:	mov	sp, fp
     c40:	pop	{fp, pc}

00000c44 <MyGame_Example_Test_b>:
     c44:	push	{fp, lr}
     c48:	mov	fp, sp
     c4c:	sub	sp, sp, #8
     c50:	str	r0, [sp, #4]
     c54:	ldr	r0, [sp, #4]
     c58:	movw	r1, #0
     c5c:	cmp	r0, r1
     c60:	beq	c7c <MyGame_Example_Test_b+0x38>
     c64:	ldr	r0, [sp, #4]
     c68:	add	r0, r0, #2
     c6c:	bl	2570 <flatbuffers_int8_read_from_pe>
     c70:	sxtb	r0, r0
     c74:	str	r0, [sp]
     c78:	b	c88 <MyGame_Example_Test_b+0x44>
     c7c:	movw	r0, #0
     c80:	str	r0, [sp]
     c84:	b	c88 <MyGame_Example_Test_b+0x44>
     c88:	ldr	r0, [sp]
     c8c:	sxtb	r0, r0
     c90:	mov	sp, fp
     c94:	pop	{fp, pc}

00000c98 <MyGame_Example_Monster_name>:
     c98:	push	{fp, lr}
     c9c:	mov	fp, sp
     ca0:	sub	sp, sp, #24
     ca4:	str	r0, [fp, #-4]
     ca8:	movw	r0, #0
     cac:	strh	r0, [fp, #-10]
     cb0:	ldr	r0, [fp, #-4]
     cb4:	movw	r1, #0
     cb8:	cmp	r0, r1
     cbc:	beq	cc8 <MyGame_Example_Monster_name+0x30>
     cc0:	b	cc4 <MyGame_Example_Monster_name+0x2c>
     cc4:	b	ce8 <MyGame_Example_Monster_name+0x50>
     cc8:	movw	r0, #0
     ccc:	movt	r0, #0
     cd0:	movw	r1, #0
     cd4:	movt	r1, #0
     cd8:	movw	r2, #699	; 0x2bb
     cdc:	movw	r3, #0
     ce0:	movt	r3, #0
     ce4:	bl	0 <__assert_fail>
     ce8:	mov	r0, #3
     cec:	strh	r0, [sp, #12]
     cf0:	ldr	r0, [fp, #-4]
     cf4:	str	r0, [sp, #4]
     cf8:	bl	23fc <__flatbuffers_soffset_read_from_pe>
     cfc:	ldr	r1, [sp, #4]
     d00:	sub	r0, r1, r0
     d04:	str	r0, [sp, #8]
     d08:	ldr	r0, [sp, #8]
     d0c:	bl	2420 <__flatbuffers_voffset_read_from_pe>
     d10:	ldrh	r1, [sp, #12]
     d14:	add	r1, r1, #3
     d18:	lsl	r1, r1, #1
     d1c:	cmp	r0, r1
     d20:	bcc	d3c <MyGame_Example_Monster_name+0xa4>
     d24:	ldr	r0, [sp, #8]
     d28:	ldrh	r1, [sp, #12]
     d2c:	add	r0, r0, r1, lsl #1
     d30:	add	r0, r0, #4
     d34:	bl	2420 <__flatbuffers_voffset_read_from_pe>
     d38:	strh	r0, [fp, #-10]
     d3c:	ldrsh	r0, [fp, #-10]
     d40:	cmp	r0, #0
     d44:	beq	d80 <MyGame_Example_Monster_name+0xe8>
     d48:	ldr	r0, [fp, #-4]
     d4c:	ldrh	r1, [fp, #-10]
     d50:	add	r0, r0, r1
     d54:	str	r0, [fp, #-8]
     d58:	ldr	r0, [fp, #-8]
     d5c:	add	r0, r0, #4
     d60:	ldr	r1, [fp, #-8]
     d64:	str	r0, [sp]
     d68:	mov	r0, r1
     d6c:	bl	2378 <__flatbuffers_uoffset_read_from_pe>
     d70:	ldr	r1, [sp]
     d74:	add	r0, r1, r0
     d78:	mov	sp, fp
     d7c:	pop	{fp, pc}
     d80:	movw	r0, #0
     d84:	movt	r0, #0
     d88:	movw	r1, #0
     d8c:	movt	r1, #0
     d90:	movw	r2, #699	; 0x2bb
     d94:	movw	r3, #0
     d98:	movt	r3, #0
     d9c:	bl	0 <__assert_fail>

00000da0 <flatbuffers_string_len>:
     da0:	push	{fp, lr}
     da4:	mov	fp, sp
     da8:	sub	sp, sp, #8
     dac:	str	r0, [sp, #4]
     db0:	ldr	r0, [sp, #4]
     db4:	movw	r1, #0
     db8:	cmp	r0, r1
     dbc:	beq	dd8 <flatbuffers_string_len+0x38>
     dc0:	ldr	r0, [sp, #4]
     dc4:	mvn	r1, #3
     dc8:	add	r0, r0, r1
     dcc:	bl	2378 <__flatbuffers_uoffset_read_from_pe>
     dd0:	str	r0, [sp]
     dd4:	b	de4 <flatbuffers_string_len+0x44>
     dd8:	movw	r0, #0
     ddc:	str	r0, [sp]
     de0:	b	de4 <flatbuffers_string_len+0x44>
     de4:	ldr	r0, [sp]
     de8:	mov	sp, fp
     dec:	pop	{fp, pc}

00000df0 <MyGame_Example_Monster_inventory>:
     df0:	push	{fp, lr}
     df4:	mov	fp, sp
     df8:	sub	sp, sp, #32
     dfc:	str	r0, [fp, #-8]
     e00:	movw	r0, #0
     e04:	strh	r0, [fp, #-14]
     e08:	ldr	r0, [fp, #-8]
     e0c:	movw	r1, #0
     e10:	cmp	r0, r1
     e14:	beq	e20 <MyGame_Example_Monster_inventory+0x30>
     e18:	b	e1c <MyGame_Example_Monster_inventory+0x2c>
     e1c:	b	e40 <MyGame_Example_Monster_inventory+0x50>
     e20:	movw	r0, #0
     e24:	movt	r0, #0
     e28:	movw	r1, #0
     e2c:	movt	r1, #0
     e30:	movw	r2, #706	; 0x2c2
     e34:	movw	r3, #0
     e38:	movt	r3, #0
     e3c:	bl	0 <__assert_fail>
     e40:	mov	r0, #5
     e44:	strh	r0, [sp, #16]
     e48:	ldr	r0, [fp, #-8]
     e4c:	str	r0, [sp, #8]
     e50:	bl	23fc <__flatbuffers_soffset_read_from_pe>
     e54:	ldr	r1, [sp, #8]
     e58:	sub	r0, r1, r0
     e5c:	str	r0, [sp, #12]
     e60:	ldr	r0, [sp, #12]
     e64:	bl	2420 <__flatbuffers_voffset_read_from_pe>
     e68:	ldrh	r1, [sp, #16]
     e6c:	add	r1, r1, #3
     e70:	lsl	r1, r1, #1
     e74:	cmp	r0, r1
     e78:	bcc	e94 <MyGame_Example_Monster_inventory+0xa4>
     e7c:	ldr	r0, [sp, #12]
     e80:	ldrh	r1, [sp, #16]
     e84:	add	r0, r0, r1, lsl #1
     e88:	add	r0, r0, #4
     e8c:	bl	2420 <__flatbuffers_voffset_read_from_pe>
     e90:	strh	r0, [fp, #-14]
     e94:	ldrsh	r0, [fp, #-14]
     e98:	cmp	r0, #0
     e9c:	beq	ed8 <MyGame_Example_Monster_inventory+0xe8>
     ea0:	ldr	r0, [fp, #-8]
     ea4:	ldrh	r1, [fp, #-14]
     ea8:	add	r0, r0, r1
     eac:	str	r0, [fp, #-12]
     eb0:	ldr	r0, [fp, #-12]
     eb4:	add	r0, r0, #4
     eb8:	ldr	r1, [fp, #-12]
     ebc:	str	r0, [sp, #4]
     ec0:	mov	r0, r1
     ec4:	bl	2378 <__flatbuffers_uoffset_read_from_pe>
     ec8:	ldr	r1, [sp, #4]
     ecc:	add	r0, r1, r0
     ed0:	str	r0, [fp, #-4]
     ed4:	b	ee0 <MyGame_Example_Monster_inventory+0xf0>
     ed8:	movw	r0, #0
     edc:	str	r0, [fp, #-4]
     ee0:	ldr	r0, [fp, #-4]
     ee4:	mov	sp, fp
     ee8:	pop	{fp, pc}

00000eec <flatbuffers_uint8_vec_len>:
     eec:	push	{fp, lr}
     ef0:	mov	fp, sp
     ef4:	sub	sp, sp, #8
     ef8:	str	r0, [sp, #4]
     efc:	ldr	r0, [sp, #4]
     f00:	bl	25ac <flatbuffers_vec_len>
     f04:	mov	sp, fp
     f08:	pop	{fp, pc}

00000f0c <flatbuffers_uint8_vec_at>:
     f0c:	push	{fp, lr}
     f10:	mov	fp, sp
     f14:	sub	sp, sp, #8
     f18:	str	r0, [sp, #4]
     f1c:	str	r1, [sp]
     f20:	ldr	r0, [sp, #4]
     f24:	bl	25ac <flatbuffers_vec_len>
     f28:	ldr	r1, [sp]
     f2c:	cmp	r0, r1
     f30:	bls	f3c <flatbuffers_uint8_vec_at+0x30>
     f34:	b	f38 <flatbuffers_uint8_vec_at+0x2c>
     f38:	b	f5c <flatbuffers_uint8_vec_at+0x50>
     f3c:	movw	r0, #0
     f40:	movt	r0, #0
     f44:	movw	r1, #0
     f48:	movt	r1, #0
     f4c:	movw	r2, #395	; 0x18b
     f50:	movw	r3, #0
     f54:	movt	r3, #0
     f58:	bl	0 <__assert_fail>
     f5c:	ldr	r0, [sp, #4]
     f60:	ldr	r1, [sp]
     f64:	add	r0, r0, r1
     f68:	bl	25fc <flatbuffers_uint8_read_from_pe>
     f6c:	and	r0, r0, #255	; 0xff
     f70:	mov	sp, fp
     f74:	pop	{fp, pc}

00000f78 <MyGame_Example_Monster_testarrayofstring>:
     f78:	push	{fp, lr}
     f7c:	mov	fp, sp
     f80:	sub	sp, sp, #32
     f84:	str	r0, [fp, #-8]
     f88:	movw	r0, #0
     f8c:	strh	r0, [fp, #-14]
     f90:	ldr	r0, [fp, #-8]
     f94:	movw	r1, #0
     f98:	cmp	r0, r1
     f9c:	beq	fa8 <MyGame_Example_Monster_testarrayofstring+0x30>
     fa0:	b	fa4 <MyGame_Example_Monster_testarrayofstring+0x2c>
     fa4:	b	fc8 <MyGame_Example_Monster_testarrayofstring+0x50>
     fa8:	movw	r0, #0
     fac:	movt	r0, #0
     fb0:	movw	r1, #0
     fb4:	movt	r1, #0
     fb8:	movw	r2, #712	; 0x2c8
     fbc:	movw	r3, #0
     fc0:	movt	r3, #0
     fc4:	bl	0 <__assert_fail>
     fc8:	mov	r0, #10
     fcc:	strh	r0, [sp, #16]
     fd0:	ldr	r0, [fp, #-8]
     fd4:	str	r0, [sp, #8]
     fd8:	bl	23fc <__flatbuffers_soffset_read_from_pe>
     fdc:	ldr	r1, [sp, #8]
     fe0:	sub	r0, r1, r0
     fe4:	str	r0, [sp, #12]
     fe8:	ldr	r0, [sp, #12]
     fec:	bl	2420 <__flatbuffers_voffset_read_from_pe>
     ff0:	ldrh	r1, [sp, #16]
     ff4:	add	r1, r1, #3
     ff8:	lsl	r1, r1, #1
     ffc:	cmp	r0, r1
    1000:	bcc	101c <MyGame_Example_Monster_testarrayofstring+0xa4>
    1004:	ldr	r0, [sp, #12]
    1008:	ldrh	r1, [sp, #16]
    100c:	add	r0, r0, r1, lsl #1
    1010:	add	r0, r0, #4
    1014:	bl	2420 <__flatbuffers_voffset_read_from_pe>
    1018:	strh	r0, [fp, #-14]
    101c:	ldrsh	r0, [fp, #-14]
    1020:	cmp	r0, #0
    1024:	beq	1060 <MyGame_Example_Monster_testarrayofstring+0xe8>
    1028:	ldr	r0, [fp, #-8]
    102c:	ldrh	r1, [fp, #-14]
    1030:	add	r0, r0, r1
    1034:	str	r0, [fp, #-12]
    1038:	ldr	r0, [fp, #-12]
    103c:	add	r0, r0, #4
    1040:	ldr	r1, [fp, #-12]
    1044:	str	r0, [sp, #4]
    1048:	mov	r0, r1
    104c:	bl	2378 <__flatbuffers_uoffset_read_from_pe>
    1050:	ldr	r1, [sp, #4]
    1054:	add	r0, r1, r0
    1058:	str	r0, [fp, #-4]
    105c:	b	1068 <MyGame_Example_Monster_testarrayofstring+0xf0>
    1060:	movw	r0, #0
    1064:	str	r0, [fp, #-4]
    1068:	ldr	r0, [fp, #-4]
    106c:	mov	sp, fp
    1070:	pop	{fp, pc}

00001074 <flatbuffers_string_vec_len>:
    1074:	push	{fp, lr}
    1078:	mov	fp, sp
    107c:	sub	sp, sp, #8
    1080:	str	r0, [sp, #4]
    1084:	ldr	r0, [sp, #4]
    1088:	movw	r1, #0
    108c:	cmp	r0, r1
    1090:	beq	10ac <flatbuffers_string_vec_len+0x38>
    1094:	ldr	r0, [sp, #4]
    1098:	mvn	r1, #3
    109c:	add	r0, r0, r1
    10a0:	bl	2378 <__flatbuffers_uoffset_read_from_pe>
    10a4:	str	r0, [sp]
    10a8:	b	10b8 <flatbuffers_string_vec_len+0x44>
    10ac:	movw	r0, #0
    10b0:	str	r0, [sp]
    10b4:	b	10b8 <flatbuffers_string_vec_len+0x44>
    10b8:	ldr	r0, [sp]
    10bc:	mov	sp, fp
    10c0:	pop	{fp, pc}

000010c4 <flatbuffers_string_vec_at>:
    10c4:	push	{fp, lr}
    10c8:	mov	fp, sp
    10cc:	sub	sp, sp, #16
    10d0:	str	r0, [fp, #-4]
    10d4:	str	r1, [sp, #8]
    10d8:	ldr	r0, [fp, #-4]
    10dc:	ldr	r1, [sp, #8]
    10e0:	add	r0, r0, r1, lsl #2
    10e4:	str	r0, [sp, #4]
    10e8:	ldr	r0, [fp, #-4]
    10ec:	bl	25ac <flatbuffers_vec_len>
    10f0:	ldr	r1, [sp, #8]
    10f4:	cmp	r0, r1
    10f8:	bls	1104 <flatbuffers_string_vec_at+0x40>
    10fc:	b	1100 <flatbuffers_string_vec_at+0x3c>
    1100:	b	1124 <flatbuffers_string_vec_at+0x60>
    1104:	movw	r0, #0
    1108:	movt	r0, #0
    110c:	movw	r1, #0
    1110:	movt	r1, #0
    1114:	movw	r2, #108	; 0x6c
    1118:	movw	r3, #0
    111c:	movt	r3, #0
    1120:	bl	0 <__assert_fail>
    1124:	ldr	r0, [sp, #4]
    1128:	ldr	r1, [sp, #4]
    112c:	str	r0, [sp]
    1130:	mov	r0, r1
    1134:	bl	2378 <__flatbuffers_uoffset_read_from_pe>
    1138:	ldr	r1, [sp]
    113c:	add	r0, r1, r0
    1140:	add	r0, r0, #4
    1144:	mov	sp, fp
    1148:	pop	{fp, pc}

0000114c <MyGame_Example_Monster_test_type>:
    114c:	push	{fp, lr}
    1150:	mov	fp, sp
    1154:	sub	sp, sp, #24
    1158:	str	r0, [fp, #-4]
    115c:	movw	r0, #0
    1160:	strh	r0, [fp, #-6]
    1164:	ldr	r0, [fp, #-4]
    1168:	movw	r1, #0
    116c:	cmp	r0, r1
    1170:	beq	117c <MyGame_Example_Monster_test_type+0x30>
    1174:	b	1178 <MyGame_Example_Monster_test_type+0x2c>
    1178:	b	119c <MyGame_Example_Monster_test_type+0x50>
    117c:	movw	r0, #0
    1180:	movt	r0, #0
    1184:	movw	r1, #0
    1188:	movt	r1, #0
    118c:	movw	r2, #717	; 0x2cd
    1190:	movw	r3, #0
    1194:	movt	r3, #0
    1198:	bl	0 <__assert_fail>
    119c:	mov	r0, #7
    11a0:	strh	r0, [fp, #-8]
    11a4:	ldr	r0, [fp, #-4]
    11a8:	str	r0, [sp, #8]
    11ac:	bl	23fc <__flatbuffers_soffset_read_from_pe>
    11b0:	ldr	r1, [sp, #8]
    11b4:	sub	r0, r1, r0
    11b8:	str	r0, [sp, #12]
    11bc:	ldr	r0, [sp, #12]
    11c0:	bl	2420 <__flatbuffers_voffset_read_from_pe>
    11c4:	ldrh	r1, [fp, #-8]
    11c8:	add	r1, r1, #3
    11cc:	lsl	r1, r1, #1
    11d0:	cmp	r0, r1
    11d4:	bcc	11f0 <MyGame_Example_Monster_test_type+0xa4>
    11d8:	ldr	r0, [sp, #12]
    11dc:	ldrh	r1, [fp, #-8]
    11e0:	add	r0, r0, r1, lsl #1
    11e4:	add	r0, r0, #4
    11e8:	bl	2420 <__flatbuffers_voffset_read_from_pe>
    11ec:	strh	r0, [fp, #-6]
    11f0:	ldrh	r0, [fp, #-6]
    11f4:	cmp	r0, #0
    11f8:	beq	1218 <MyGame_Example_Monster_test_type+0xcc>
    11fc:	ldr	r0, [fp, #-4]
    1200:	ldrh	r1, [fp, #-6]
    1204:	add	r0, r0, r1
    1208:	bl	2638 <__flatbuffers_utype_read_from_pe>
    120c:	and	r0, r0, #255	; 0xff
    1210:	str	r0, [sp, #4]
    1214:	b	1224 <MyGame_Example_Monster_test_type+0xd8>
    1218:	movw	r0, #0
    121c:	str	r0, [sp, #4]
    1220:	b	1224 <MyGame_Example_Monster_test_type+0xd8>
    1224:	ldr	r0, [sp, #4]
    1228:	and	r0, r0, #255	; 0xff
    122c:	mov	sp, fp
    1230:	pop	{fp, pc}

00001234 <MyGame_Example_Monster_test>:
    1234:	push	{fp, lr}
    1238:	mov	fp, sp
    123c:	sub	sp, sp, #32
    1240:	str	r0, [fp, #-8]
    1244:	movw	r0, #0
    1248:	strh	r0, [fp, #-14]
    124c:	ldr	r0, [fp, #-8]
    1250:	movw	r1, #0
    1254:	cmp	r0, r1
    1258:	beq	1264 <MyGame_Example_Monster_test+0x30>
    125c:	b	1260 <MyGame_Example_Monster_test+0x2c>
    1260:	b	1284 <MyGame_Example_Monster_test+0x50>
    1264:	movw	r0, #0
    1268:	movt	r0, #0
    126c:	movw	r1, #0
    1270:	movt	r1, #0
    1274:	movw	r2, #717	; 0x2cd
    1278:	movw	r3, #0
    127c:	movt	r3, #0
    1280:	bl	0 <__assert_fail>
    1284:	mov	r0, #8
    1288:	strh	r0, [sp, #16]
    128c:	ldr	r0, [fp, #-8]
    1290:	str	r0, [sp, #8]
    1294:	bl	23fc <__flatbuffers_soffset_read_from_pe>
    1298:	ldr	r1, [sp, #8]
    129c:	sub	r0, r1, r0
    12a0:	str	r0, [sp, #12]
    12a4:	ldr	r0, [sp, #12]
    12a8:	bl	2420 <__flatbuffers_voffset_read_from_pe>
    12ac:	ldrh	r1, [sp, #16]
    12b0:	add	r1, r1, #3
    12b4:	lsl	r1, r1, #1
    12b8:	cmp	r0, r1
    12bc:	bcc	12d8 <MyGame_Example_Monster_test+0xa4>
    12c0:	ldr	r0, [sp, #12]
    12c4:	ldrh	r1, [sp, #16]
    12c8:	add	r0, r0, r1, lsl #1
    12cc:	add	r0, r0, #4
    12d0:	bl	2420 <__flatbuffers_voffset_read_from_pe>
    12d4:	strh	r0, [fp, #-14]
    12d8:	ldrsh	r0, [fp, #-14]
    12dc:	cmp	r0, #0
    12e0:	beq	1318 <MyGame_Example_Monster_test+0xe4>
    12e4:	ldr	r0, [fp, #-8]
    12e8:	ldrh	r1, [fp, #-14]
    12ec:	add	r0, r0, r1
    12f0:	str	r0, [fp, #-12]
    12f4:	ldr	r0, [fp, #-12]
    12f8:	ldr	r1, [fp, #-12]
    12fc:	str	r0, [sp, #4]
    1300:	mov	r0, r1
    1304:	bl	2378 <__flatbuffers_uoffset_read_from_pe>
    1308:	ldr	r1, [sp, #4]
    130c:	add	r0, r1, r0
    1310:	str	r0, [fp, #-4]
    1314:	b	1320 <MyGame_Example_Monster_test+0xec>
    1318:	movw	r0, #0
    131c:	str	r0, [fp, #-4]
    1320:	ldr	r0, [fp, #-4]
    1324:	mov	sp, fp
    1328:	pop	{fp, pc}

0000132c <MyGame_Example_Monster_test4>:
    132c:	push	{fp, lr}
    1330:	mov	fp, sp
    1334:	sub	sp, sp, #32
    1338:	str	r0, [fp, #-8]
    133c:	movw	r0, #0
    1340:	strh	r0, [fp, #-14]
    1344:	ldr	r0, [fp, #-8]
    1348:	movw	r1, #0
    134c:	cmp	r0, r1
    1350:	beq	135c <MyGame_Example_Monster_test4+0x30>
    1354:	b	1358 <MyGame_Example_Monster_test4+0x2c>
    1358:	b	137c <MyGame_Example_Monster_test4+0x50>
    135c:	movw	r0, #0
    1360:	movt	r0, #0
    1364:	movw	r1, #0
    1368:	movt	r1, #0
    136c:	movw	r2, #718	; 0x2ce
    1370:	movw	r3, #0
    1374:	movt	r3, #0
    1378:	bl	0 <__assert_fail>
    137c:	mov	r0, #9
    1380:	strh	r0, [sp, #16]
    1384:	ldr	r0, [fp, #-8]
    1388:	str	r0, [sp, #8]
    138c:	bl	23fc <__flatbuffers_soffset_read_from_pe>
    1390:	ldr	r1, [sp, #8]
    1394:	sub	r0, r1, r0
    1398:	str	r0, [sp, #12]
    139c:	ldr	r0, [sp, #12]
    13a0:	bl	2420 <__flatbuffers_voffset_read_from_pe>
    13a4:	ldrh	r1, [sp, #16]
    13a8:	add	r1, r1, #3
    13ac:	lsl	r1, r1, #1
    13b0:	cmp	r0, r1
    13b4:	bcc	13d0 <MyGame_Example_Monster_test4+0xa4>
    13b8:	ldr	r0, [sp, #12]
    13bc:	ldrh	r1, [sp, #16]
    13c0:	add	r0, r0, r1, lsl #1
    13c4:	add	r0, r0, #4
    13c8:	bl	2420 <__flatbuffers_voffset_read_from_pe>
    13cc:	strh	r0, [fp, #-14]
    13d0:	ldrsh	r0, [fp, #-14]
    13d4:	cmp	r0, #0
    13d8:	beq	1414 <MyGame_Example_Monster_test4+0xe8>
    13dc:	ldr	r0, [fp, #-8]
    13e0:	ldrh	r1, [fp, #-14]
    13e4:	add	r0, r0, r1
    13e8:	str	r0, [fp, #-12]
    13ec:	ldr	r0, [fp, #-12]
    13f0:	add	r0, r0, #4
    13f4:	ldr	r1, [fp, #-12]
    13f8:	str	r0, [sp, #4]
    13fc:	mov	r0, r1
    1400:	bl	2378 <__flatbuffers_uoffset_read_from_pe>
    1404:	ldr	r1, [sp, #4]
    1408:	add	r0, r1, r0
    140c:	str	r0, [fp, #-4]
    1410:	b	141c <MyGame_Example_Monster_test4+0xf0>
    1414:	movw	r0, #0
    1418:	str	r0, [fp, #-4]
    141c:	ldr	r0, [fp, #-4]
    1420:	mov	sp, fp
    1424:	pop	{fp, pc}

00001428 <MyGame_Example_Test_vec_len>:
    1428:	push	{fp, lr}
    142c:	mov	fp, sp
    1430:	sub	sp, sp, #8
    1434:	str	r0, [sp, #4]
    1438:	ldr	r0, [sp, #4]
    143c:	movw	r1, #0
    1440:	cmp	r0, r1
    1444:	beq	1460 <MyGame_Example_Test_vec_len+0x38>
    1448:	ldr	r0, [sp, #4]
    144c:	mvn	r1, #3
    1450:	add	r0, r0, r1
    1454:	bl	2378 <__flatbuffers_uoffset_read_from_pe>
    1458:	str	r0, [sp]
    145c:	b	146c <MyGame_Example_Test_vec_len+0x44>
    1460:	movw	r0, #0
    1464:	str	r0, [sp]
    1468:	b	146c <MyGame_Example_Test_vec_len+0x44>
    146c:	ldr	r0, [sp]
    1470:	mov	sp, fp
    1474:	pop	{fp, pc}

00001478 <MyGame_Example_Test_vec_at>:
    1478:	push	{fp, lr}
    147c:	mov	fp, sp
    1480:	sub	sp, sp, #8
    1484:	str	r0, [sp, #4]
    1488:	str	r1, [sp]
    148c:	ldr	r0, [sp, #4]
    1490:	bl	25ac <flatbuffers_vec_len>
    1494:	ldr	r1, [sp]
    1498:	cmp	r0, r1
    149c:	bls	14a8 <MyGame_Example_Test_vec_at+0x30>
    14a0:	b	14a4 <MyGame_Example_Test_vec_at+0x2c>
    14a4:	b	14c8 <MyGame_Example_Test_vec_at+0x50>
    14a8:	movw	r0, #0
    14ac:	movt	r0, #0
    14b0:	movw	r1, #0
    14b4:	movt	r1, #0
    14b8:	movw	r2, #380	; 0x17c
    14bc:	movw	r3, #0
    14c0:	movt	r3, #0
    14c4:	bl	0 <__assert_fail>
    14c8:	ldr	r0, [sp, #4]
    14cc:	ldr	r1, [sp]
    14d0:	add	r0, r0, r1, lsl #2
    14d4:	mov	sp, fp
    14d8:	pop	{fp, pc}

000014dc <MyGame_Example_Monster_testhashs32_fnv1>:
    14dc:	push	{fp, lr}
    14e0:	mov	fp, sp
    14e4:	sub	sp, sp, #24
    14e8:	str	r0, [fp, #-4]
    14ec:	movw	r0, #0
    14f0:	strh	r0, [fp, #-6]
    14f4:	ldr	r0, [fp, #-4]
    14f8:	movw	r1, #0
    14fc:	cmp	r0, r1
    1500:	beq	150c <MyGame_Example_Monster_testhashs32_fnv1+0x30>
    1504:	b	1508 <MyGame_Example_Monster_testhashs32_fnv1+0x2c>
    1508:	b	152c <MyGame_Example_Monster_testhashs32_fnv1+0x50>
    150c:	movw	r0, #0
    1510:	movt	r0, #0
    1514:	movw	r1, #0
    1518:	movt	r1, #0
    151c:	movw	r2, #724	; 0x2d4
    1520:	movw	r3, #0
    1524:	movt	r3, #0
    1528:	bl	0 <__assert_fail>
    152c:	mov	r0, #16
    1530:	strh	r0, [fp, #-8]
    1534:	ldr	r0, [fp, #-4]
    1538:	str	r0, [sp, #8]
    153c:	bl	23fc <__flatbuffers_soffset_read_from_pe>
    1540:	ldr	r1, [sp, #8]
    1544:	sub	r0, r1, r0
    1548:	str	r0, [sp, #12]
    154c:	ldr	r0, [sp, #12]
    1550:	bl	2420 <__flatbuffers_voffset_read_from_pe>
    1554:	ldrh	r1, [fp, #-8]
    1558:	add	r1, r1, #3
    155c:	lsl	r1, r1, #1
    1560:	cmp	r0, r1
    1564:	bcc	1580 <MyGame_Example_Monster_testhashs32_fnv1+0xa4>
    1568:	ldr	r0, [sp, #12]
    156c:	ldrh	r1, [fp, #-8]
    1570:	add	r0, r0, r1, lsl #1
    1574:	add	r0, r0, #4
    1578:	bl	2420 <__flatbuffers_voffset_read_from_pe>
    157c:	strh	r0, [fp, #-6]
    1580:	ldrh	r0, [fp, #-6]
    1584:	cmp	r0, #0
    1588:	beq	15a4 <MyGame_Example_Monster_testhashs32_fnv1+0xc8>
    158c:	ldr	r0, [fp, #-4]
    1590:	ldrh	r1, [fp, #-6]
    1594:	add	r0, r0, r1
    1598:	bl	2674 <flatbuffers_int32_read_from_pe>
    159c:	str	r0, [sp, #4]
    15a0:	b	15b0 <MyGame_Example_Monster_testhashs32_fnv1+0xd4>
    15a4:	movw	r0, #0
    15a8:	str	r0, [sp, #4]
    15ac:	b	15b0 <MyGame_Example_Monster_testhashs32_fnv1+0xd4>
    15b0:	ldr	r0, [sp, #4]
    15b4:	mov	sp, fp
    15b8:	pop	{fp, pc}

000015bc <MyGame_Example_Monster_testhashu32_fnv1>:
    15bc:	push	{fp, lr}
    15c0:	mov	fp, sp
    15c4:	sub	sp, sp, #24
    15c8:	str	r0, [fp, #-4]
    15cc:	movw	r0, #0
    15d0:	strh	r0, [fp, #-6]
    15d4:	ldr	r0, [fp, #-4]
    15d8:	movw	r1, #0
    15dc:	cmp	r0, r1
    15e0:	beq	15ec <MyGame_Example_Monster_testhashu32_fnv1+0x30>
    15e4:	b	15e8 <MyGame_Example_Monster_testhashu32_fnv1+0x2c>
    15e8:	b	160c <MyGame_Example_Monster_testhashu32_fnv1+0x50>
    15ec:	movw	r0, #0
    15f0:	movt	r0, #0
    15f4:	movw	r1, #0
    15f8:	movt	r1, #0
    15fc:	movw	r2, #725	; 0x2d5
    1600:	movw	r3, #0
    1604:	movt	r3, #0
    1608:	bl	0 <__assert_fail>
    160c:	mov	r0, #17
    1610:	strh	r0, [fp, #-8]
    1614:	ldr	r0, [fp, #-4]
    1618:	str	r0, [sp, #8]
    161c:	bl	23fc <__flatbuffers_soffset_read_from_pe>
    1620:	ldr	r1, [sp, #8]
    1624:	sub	r0, r1, r0
    1628:	str	r0, [sp, #12]
    162c:	ldr	r0, [sp, #12]
    1630:	bl	2420 <__flatbuffers_voffset_read_from_pe>
    1634:	ldrh	r1, [fp, #-8]
    1638:	add	r1, r1, #3
    163c:	lsl	r1, r1, #1
    1640:	cmp	r0, r1
    1644:	bcc	1660 <MyGame_Example_Monster_testhashu32_fnv1+0xa4>
    1648:	ldr	r0, [sp, #12]
    164c:	ldrh	r1, [fp, #-8]
    1650:	add	r0, r0, r1, lsl #1
    1654:	add	r0, r0, #4
    1658:	bl	2420 <__flatbuffers_voffset_read_from_pe>
    165c:	strh	r0, [fp, #-6]
    1660:	ldrh	r0, [fp, #-6]
    1664:	cmp	r0, #0
    1668:	beq	1684 <MyGame_Example_Monster_testhashu32_fnv1+0xc8>
    166c:	ldr	r0, [fp, #-4]
    1670:	ldrh	r1, [fp, #-6]
    1674:	add	r0, r0, r1
    1678:	bl	26ac <flatbuffers_uint32_read_from_pe>
    167c:	str	r0, [sp, #4]
    1680:	b	1690 <MyGame_Example_Monster_testhashu32_fnv1+0xd4>
    1684:	movw	r0, #0
    1688:	str	r0, [sp, #4]
    168c:	b	1690 <MyGame_Example_Monster_testhashu32_fnv1+0xd4>
    1690:	ldr	r0, [sp, #4]
    1694:	mov	sp, fp
    1698:	pop	{fp, pc}

0000169c <MyGame_Example_Monster_testhashs64_fnv1>:
    169c:	push	{fp, lr}
    16a0:	mov	fp, sp
    16a4:	sub	sp, sp, #32
    16a8:	str	r0, [fp, #-4]
    16ac:	movw	r0, #0
    16b0:	strh	r0, [fp, #-6]
    16b4:	ldr	r0, [fp, #-4]
    16b8:	movw	r1, #0
    16bc:	cmp	r0, r1
    16c0:	beq	16cc <MyGame_Example_Monster_testhashs64_fnv1+0x30>
    16c4:	b	16c8 <MyGame_Example_Monster_testhashs64_fnv1+0x2c>
    16c8:	b	16ec <MyGame_Example_Monster_testhashs64_fnv1+0x50>
    16cc:	movw	r0, #0
    16d0:	movt	r0, #0
    16d4:	movw	r1, #0
    16d8:	movt	r1, #0
    16dc:	movw	r2, #726	; 0x2d6
    16e0:	movw	r3, #0
    16e4:	movt	r3, #0
    16e8:	bl	0 <__assert_fail>
    16ec:	mov	r0, #18
    16f0:	strh	r0, [fp, #-8]
    16f4:	ldr	r0, [fp, #-4]
    16f8:	str	r0, [sp, #16]
    16fc:	bl	23fc <__flatbuffers_soffset_read_from_pe>
    1700:	ldr	r1, [sp, #16]
    1704:	sub	r0, r1, r0
    1708:	str	r0, [fp, #-12]
    170c:	ldr	r0, [fp, #-12]
    1710:	bl	2420 <__flatbuffers_voffset_read_from_pe>
    1714:	ldrh	r1, [fp, #-8]
    1718:	add	r1, r1, #3
    171c:	lsl	r1, r1, #1
    1720:	cmp	r0, r1
    1724:	bcc	1740 <MyGame_Example_Monster_testhashs64_fnv1+0xa4>
    1728:	ldr	r0, [fp, #-12]
    172c:	ldrh	r1, [fp, #-8]
    1730:	add	r0, r0, r1, lsl #1
    1734:	add	r0, r0, #4
    1738:	bl	2420 <__flatbuffers_voffset_read_from_pe>
    173c:	strh	r0, [fp, #-6]
    1740:	ldrh	r0, [fp, #-6]
    1744:	cmp	r0, #0
    1748:	beq	1768 <MyGame_Example_Monster_testhashs64_fnv1+0xcc>
    174c:	ldr	r0, [fp, #-4]
    1750:	ldrh	r1, [fp, #-6]
    1754:	add	r0, r0, r1
    1758:	bl	26e4 <flatbuffers_int64_read_from_pe>
    175c:	str	r0, [sp, #12]
    1760:	str	r1, [sp, #8]
    1764:	b	177c <MyGame_Example_Monster_testhashs64_fnv1+0xe0>
    1768:	mov	r0, #0
    176c:	mov	r1, r0
    1770:	str	r1, [sp, #12]
    1774:	str	r0, [sp, #8]
    1778:	b	177c <MyGame_Example_Monster_testhashs64_fnv1+0xe0>
    177c:	ldr	r0, [sp, #8]
    1780:	ldr	r1, [sp, #12]
    1784:	str	r0, [sp, #4]
    1788:	mov	r0, r1
    178c:	ldr	r1, [sp, #4]
    1790:	mov	sp, fp
    1794:	pop	{fp, pc}

00001798 <MyGame_Example_Monster_testhashu64_fnv1>:
    1798:	push	{fp, lr}
    179c:	mov	fp, sp
    17a0:	sub	sp, sp, #32
    17a4:	str	r0, [fp, #-4]
    17a8:	movw	r0, #0
    17ac:	strh	r0, [fp, #-6]
    17b0:	ldr	r0, [fp, #-4]
    17b4:	movw	r1, #0
    17b8:	cmp	r0, r1
    17bc:	beq	17c8 <MyGame_Example_Monster_testhashu64_fnv1+0x30>
    17c0:	b	17c4 <MyGame_Example_Monster_testhashu64_fnv1+0x2c>
    17c4:	b	17e8 <MyGame_Example_Monster_testhashu64_fnv1+0x50>
    17c8:	movw	r0, #0
    17cc:	movt	r0, #0
    17d0:	movw	r1, #0
    17d4:	movt	r1, #0
    17d8:	movw	r2, #727	; 0x2d7
    17dc:	movw	r3, #0
    17e0:	movt	r3, #0
    17e4:	bl	0 <__assert_fail>
    17e8:	mov	r0, #19
    17ec:	strh	r0, [fp, #-8]
    17f0:	ldr	r0, [fp, #-4]
    17f4:	str	r0, [sp, #16]
    17f8:	bl	23fc <__flatbuffers_soffset_read_from_pe>
    17fc:	ldr	r1, [sp, #16]
    1800:	sub	r0, r1, r0
    1804:	str	r0, [fp, #-12]
    1808:	ldr	r0, [fp, #-12]
    180c:	bl	2420 <__flatbuffers_voffset_read_from_pe>
    1810:	ldrh	r1, [fp, #-8]
    1814:	add	r1, r1, #3
    1818:	lsl	r1, r1, #1
    181c:	cmp	r0, r1
    1820:	bcc	183c <MyGame_Example_Monster_testhashu64_fnv1+0xa4>
    1824:	ldr	r0, [fp, #-12]
    1828:	ldrh	r1, [fp, #-8]
    182c:	add	r0, r0, r1, lsl #1
    1830:	add	r0, r0, #4
    1834:	bl	2420 <__flatbuffers_voffset_read_from_pe>
    1838:	strh	r0, [fp, #-6]
    183c:	ldrh	r0, [fp, #-6]
    1840:	cmp	r0, #0
    1844:	beq	1864 <MyGame_Example_Monster_testhashu64_fnv1+0xcc>
    1848:	ldr	r0, [fp, #-4]
    184c:	ldrh	r1, [fp, #-6]
    1850:	add	r0, r0, r1
    1854:	bl	2734 <flatbuffers_uint64_read_from_pe>
    1858:	str	r0, [sp, #12]
    185c:	str	r1, [sp, #8]
    1860:	b	1878 <MyGame_Example_Monster_testhashu64_fnv1+0xe0>
    1864:	mov	r0, #0
    1868:	mov	r1, r0
    186c:	str	r1, [sp, #12]
    1870:	str	r0, [sp, #8]
    1874:	b	1878 <MyGame_Example_Monster_testhashu64_fnv1+0xe0>
    1878:	ldr	r0, [sp, #8]
    187c:	ldr	r1, [sp, #12]
    1880:	str	r0, [sp, #4]
    1884:	mov	r0, r1
    1888:	ldr	r1, [sp, #4]
    188c:	mov	sp, fp
    1890:	pop	{fp, pc}

00001894 <MyGame_Example_Monster_testhashs32_fnv1a>:
    1894:	push	{fp, lr}
    1898:	mov	fp, sp
    189c:	sub	sp, sp, #24
    18a0:	str	r0, [fp, #-4]
    18a4:	movw	r0, #0
    18a8:	strh	r0, [fp, #-6]
    18ac:	ldr	r0, [fp, #-4]
    18b0:	movw	r1, #0
    18b4:	cmp	r0, r1
    18b8:	beq	18c4 <MyGame_Example_Monster_testhashs32_fnv1a+0x30>
    18bc:	b	18c0 <MyGame_Example_Monster_testhashs32_fnv1a+0x2c>
    18c0:	b	18e4 <MyGame_Example_Monster_testhashs32_fnv1a+0x50>
    18c4:	movw	r0, #0
    18c8:	movt	r0, #0
    18cc:	movw	r1, #0
    18d0:	movt	r1, #0
    18d4:	movw	r2, #728	; 0x2d8
    18d8:	movw	r3, #0
    18dc:	movt	r3, #0
    18e0:	bl	0 <__assert_fail>
    18e4:	mov	r0, #20
    18e8:	strh	r0, [fp, #-8]
    18ec:	ldr	r0, [fp, #-4]
    18f0:	str	r0, [sp, #8]
    18f4:	bl	23fc <__flatbuffers_soffset_read_from_pe>
    18f8:	ldr	r1, [sp, #8]
    18fc:	sub	r0, r1, r0
    1900:	str	r0, [sp, #12]
    1904:	ldr	r0, [sp, #12]
    1908:	bl	2420 <__flatbuffers_voffset_read_from_pe>
    190c:	ldrh	r1, [fp, #-8]
    1910:	add	r1, r1, #3
    1914:	lsl	r1, r1, #1
    1918:	cmp	r0, r1
    191c:	bcc	1938 <MyGame_Example_Monster_testhashs32_fnv1a+0xa4>
    1920:	ldr	r0, [sp, #12]
    1924:	ldrh	r1, [fp, #-8]
    1928:	add	r0, r0, r1, lsl #1
    192c:	add	r0, r0, #4
    1930:	bl	2420 <__flatbuffers_voffset_read_from_pe>
    1934:	strh	r0, [fp, #-6]
    1938:	ldrh	r0, [fp, #-6]
    193c:	cmp	r0, #0
    1940:	beq	195c <MyGame_Example_Monster_testhashs32_fnv1a+0xc8>
    1944:	ldr	r0, [fp, #-4]
    1948:	ldrh	r1, [fp, #-6]
    194c:	add	r0, r0, r1
    1950:	bl	2674 <flatbuffers_int32_read_from_pe>
    1954:	str	r0, [sp, #4]
    1958:	b	1968 <MyGame_Example_Monster_testhashs32_fnv1a+0xd4>
    195c:	movw	r0, #0
    1960:	str	r0, [sp, #4]
    1964:	b	1968 <MyGame_Example_Monster_testhashs32_fnv1a+0xd4>
    1968:	ldr	r0, [sp, #4]
    196c:	mov	sp, fp
    1970:	pop	{fp, pc}

00001974 <MyGame_Example_Monster_testhashu32_fnv1a>:
    1974:	push	{fp, lr}
    1978:	mov	fp, sp
    197c:	sub	sp, sp, #24
    1980:	str	r0, [fp, #-4]
    1984:	movw	r0, #0
    1988:	strh	r0, [fp, #-6]
    198c:	ldr	r0, [fp, #-4]
    1990:	movw	r1, #0
    1994:	cmp	r0, r1
    1998:	beq	19a4 <MyGame_Example_Monster_testhashu32_fnv1a+0x30>
    199c:	b	19a0 <MyGame_Example_Monster_testhashu32_fnv1a+0x2c>
    19a0:	b	19c4 <MyGame_Example_Monster_testhashu32_fnv1a+0x50>
    19a4:	movw	r0, #0
    19a8:	movt	r0, #0
    19ac:	movw	r1, #0
    19b0:	movt	r1, #0
    19b4:	movw	r2, #729	; 0x2d9
    19b8:	movw	r3, #0
    19bc:	movt	r3, #0
    19c0:	bl	0 <__assert_fail>
    19c4:	mov	r0, #21
    19c8:	strh	r0, [fp, #-8]
    19cc:	ldr	r0, [fp, #-4]
    19d0:	str	r0, [sp, #8]
    19d4:	bl	23fc <__flatbuffers_soffset_read_from_pe>
    19d8:	ldr	r1, [sp, #8]
    19dc:	sub	r0, r1, r0
    19e0:	str	r0, [sp, #12]
    19e4:	ldr	r0, [sp, #12]
    19e8:	bl	2420 <__flatbuffers_voffset_read_from_pe>
    19ec:	ldrh	r1, [fp, #-8]
    19f0:	add	r1, r1, #3
    19f4:	lsl	r1, r1, #1
    19f8:	cmp	r0, r1
    19fc:	bcc	1a18 <MyGame_Example_Monster_testhashu32_fnv1a+0xa4>
    1a00:	ldr	r0, [sp, #12]
    1a04:	ldrh	r1, [fp, #-8]
    1a08:	add	r0, r0, r1, lsl #1
    1a0c:	add	r0, r0, #4
    1a10:	bl	2420 <__flatbuffers_voffset_read_from_pe>
    1a14:	strh	r0, [fp, #-6]
    1a18:	ldrh	r0, [fp, #-6]
    1a1c:	cmp	r0, #0
    1a20:	beq	1a3c <MyGame_Example_Monster_testhashu32_fnv1a+0xc8>
    1a24:	ldr	r0, [fp, #-4]
    1a28:	ldrh	r1, [fp, #-6]
    1a2c:	add	r0, r0, r1
    1a30:	bl	26ac <flatbuffers_uint32_read_from_pe>
    1a34:	str	r0, [sp, #4]
    1a38:	b	1a48 <MyGame_Example_Monster_testhashu32_fnv1a+0xd4>
    1a3c:	movw	r0, #0
    1a40:	str	r0, [sp, #4]
    1a44:	b	1a48 <MyGame_Example_Monster_testhashu32_fnv1a+0xd4>
    1a48:	ldr	r0, [sp, #4]
    1a4c:	mov	sp, fp
    1a50:	pop	{fp, pc}

00001a54 <MyGame_Example_Monster_testhashs64_fnv1a>:
    1a54:	push	{fp, lr}
    1a58:	mov	fp, sp
    1a5c:	sub	sp, sp, #32
    1a60:	str	r0, [fp, #-4]
    1a64:	movw	r0, #0
    1a68:	strh	r0, [fp, #-6]
    1a6c:	ldr	r0, [fp, #-4]
    1a70:	movw	r1, #0
    1a74:	cmp	r0, r1
    1a78:	beq	1a84 <MyGame_Example_Monster_testhashs64_fnv1a+0x30>
    1a7c:	b	1a80 <MyGame_Example_Monster_testhashs64_fnv1a+0x2c>
    1a80:	b	1aa4 <MyGame_Example_Monster_testhashs64_fnv1a+0x50>
    1a84:	movw	r0, #0
    1a88:	movt	r0, #0
    1a8c:	movw	r1, #0
    1a90:	movt	r1, #0
    1a94:	movw	r2, #730	; 0x2da
    1a98:	movw	r3, #0
    1a9c:	movt	r3, #0
    1aa0:	bl	0 <__assert_fail>
    1aa4:	mov	r0, #22
    1aa8:	strh	r0, [fp, #-8]
    1aac:	ldr	r0, [fp, #-4]
    1ab0:	str	r0, [sp, #16]
    1ab4:	bl	23fc <__flatbuffers_soffset_read_from_pe>
    1ab8:	ldr	r1, [sp, #16]
    1abc:	sub	r0, r1, r0
    1ac0:	str	r0, [fp, #-12]
    1ac4:	ldr	r0, [fp, #-12]
    1ac8:	bl	2420 <__flatbuffers_voffset_read_from_pe>
    1acc:	ldrh	r1, [fp, #-8]
    1ad0:	add	r1, r1, #3
    1ad4:	lsl	r1, r1, #1
    1ad8:	cmp	r0, r1
    1adc:	bcc	1af8 <MyGame_Example_Monster_testhashs64_fnv1a+0xa4>
    1ae0:	ldr	r0, [fp, #-12]
    1ae4:	ldrh	r1, [fp, #-8]
    1ae8:	add	r0, r0, r1, lsl #1
    1aec:	add	r0, r0, #4
    1af0:	bl	2420 <__flatbuffers_voffset_read_from_pe>
    1af4:	strh	r0, [fp, #-6]
    1af8:	ldrh	r0, [fp, #-6]
    1afc:	cmp	r0, #0
    1b00:	beq	1b20 <MyGame_Example_Monster_testhashs64_fnv1a+0xcc>
    1b04:	ldr	r0, [fp, #-4]
    1b08:	ldrh	r1, [fp, #-6]
    1b0c:	add	r0, r0, r1
    1b10:	bl	26e4 <flatbuffers_int64_read_from_pe>
    1b14:	str	r0, [sp, #12]
    1b18:	str	r1, [sp, #8]
    1b1c:	b	1b34 <MyGame_Example_Monster_testhashs64_fnv1a+0xe0>
    1b20:	mov	r0, #0
    1b24:	mov	r1, r0
    1b28:	str	r1, [sp, #12]
    1b2c:	str	r0, [sp, #8]
    1b30:	b	1b34 <MyGame_Example_Monster_testhashs64_fnv1a+0xe0>
    1b34:	ldr	r0, [sp, #8]
    1b38:	ldr	r1, [sp, #12]
    1b3c:	str	r0, [sp, #4]
    1b40:	mov	r0, r1
    1b44:	ldr	r1, [sp, #4]
    1b48:	mov	sp, fp
    1b4c:	pop	{fp, pc}

00001b50 <MyGame_Example_Monster_testhashu64_fnv1a>:
    1b50:	push	{fp, lr}
    1b54:	mov	fp, sp
    1b58:	sub	sp, sp, #32
    1b5c:	str	r0, [fp, #-4]
    1b60:	movw	r0, #0
    1b64:	strh	r0, [fp, #-6]
    1b68:	ldr	r0, [fp, #-4]
    1b6c:	movw	r1, #0
    1b70:	cmp	r0, r1
    1b74:	beq	1b80 <MyGame_Example_Monster_testhashu64_fnv1a+0x30>
    1b78:	b	1b7c <MyGame_Example_Monster_testhashu64_fnv1a+0x2c>
    1b7c:	b	1ba0 <MyGame_Example_Monster_testhashu64_fnv1a+0x50>
    1b80:	movw	r0, #0
    1b84:	movt	r0, #0
    1b88:	movw	r1, #0
    1b8c:	movt	r1, #0
    1b90:	movw	r2, #731	; 0x2db
    1b94:	movw	r3, #0
    1b98:	movt	r3, #0
    1b9c:	bl	0 <__assert_fail>
    1ba0:	mov	r0, #23
    1ba4:	strh	r0, [fp, #-8]
    1ba8:	ldr	r0, [fp, #-4]
    1bac:	str	r0, [sp, #16]
    1bb0:	bl	23fc <__flatbuffers_soffset_read_from_pe>
    1bb4:	ldr	r1, [sp, #16]
    1bb8:	sub	r0, r1, r0
    1bbc:	str	r0, [fp, #-12]
    1bc0:	ldr	r0, [fp, #-12]
    1bc4:	bl	2420 <__flatbuffers_voffset_read_from_pe>
    1bc8:	ldrh	r1, [fp, #-8]
    1bcc:	add	r1, r1, #3
    1bd0:	lsl	r1, r1, #1
    1bd4:	cmp	r0, r1
    1bd8:	bcc	1bf4 <MyGame_Example_Monster_testhashu64_fnv1a+0xa4>
    1bdc:	ldr	r0, [fp, #-12]
    1be0:	ldrh	r1, [fp, #-8]
    1be4:	add	r0, r0, r1, lsl #1
    1be8:	add	r0, r0, #4
    1bec:	bl	2420 <__flatbuffers_voffset_read_from_pe>
    1bf0:	strh	r0, [fp, #-6]
    1bf4:	ldrh	r0, [fp, #-6]
    1bf8:	cmp	r0, #0
    1bfc:	beq	1c1c <MyGame_Example_Monster_testhashu64_fnv1a+0xcc>
    1c00:	ldr	r0, [fp, #-4]
    1c04:	ldrh	r1, [fp, #-6]
    1c08:	add	r0, r0, r1
    1c0c:	bl	2734 <flatbuffers_uint64_read_from_pe>
    1c10:	str	r0, [sp, #12]
    1c14:	str	r1, [sp, #8]
    1c18:	b	1c30 <MyGame_Example_Monster_testhashu64_fnv1a+0xe0>
    1c1c:	mov	r0, #0
    1c20:	mov	r1, r0
    1c24:	str	r1, [sp, #12]
    1c28:	str	r0, [sp, #8]
    1c2c:	b	1c30 <MyGame_Example_Monster_testhashu64_fnv1a+0xe0>
    1c30:	ldr	r0, [sp, #8]
    1c34:	ldr	r1, [sp, #12]
    1c38:	str	r0, [sp, #4]
    1c3c:	mov	r0, r1
    1c40:	ldr	r1, [sp, #4]
    1c44:	mov	sp, fp
    1c48:	pop	{fp, pc}

00001c4c <main>:
    1c4c:	push	{fp, lr}
    1c50:	mov	fp, sp
    1c54:	sub	sp, sp, #32
    1c58:	movw	r2, #0
    1c5c:	str	r2, [fp, #-4]
    1c60:	str	r0, [fp, #-8]
    1c64:	str	r1, [fp, #-12]
    1c68:	ldr	r0, [fp, #-8]
    1c6c:	cmp	r0, #1
    1c70:	beq	1ca8 <main+0x5c>
    1c74:	ldr	r0, [fp, #-8]
    1c78:	cmp	r0, #2
    1c7c:	beq	1ca8 <main+0x5c>
    1c80:	movw	r0, #0
    1c84:	movt	r0, #0
    1c88:	ldr	r0, [r0]
    1c8c:	movw	r1, #0
    1c90:	movt	r1, #0
    1c94:	bl	0 <fprintf>
    1c98:	movw	r1, #1
    1c9c:	str	r0, [sp]
    1ca0:	mov	r0, r1
    1ca4:	bl	0 <exit>
    1ca8:	ldr	r0, [fp, #-8]
    1cac:	cmp	r0, #2
    1cb0:	bne	1cc8 <main+0x7c>
    1cb4:	ldr	r0, [fp, #-12]
    1cb8:	ldr	r0, [r0, #4]
    1cbc:	movw	r1, #0
    1cc0:	movt	r1, #0
    1cc4:	str	r0, [r1]
    1cc8:	movw	r0, #0
    1ccc:	movt	r0, #0
    1cd0:	ldr	r0, [r0]
    1cd4:	movw	r1, #1024	; 0x400
    1cd8:	add	r2, sp, #12
    1cdc:	bl	1e24 <readfile>
    1ce0:	str	r0, [sp, #4]
    1ce4:	ldr	r0, [sp, #12]
    1ce8:	add	r0, r0, #256	; 0x100
    1cec:	sub	r0, r0, #1
    1cf0:	mvn	r1, #255	; 0xff
    1cf4:	and	r1, r0, r1
    1cf8:	movw	r0, #256	; 0x100
    1cfc:	bl	2008 <__portable_aligned_alloc>
    1d00:	str	r0, [sp, #8]
    1d04:	ldr	r0, [sp, #8]
    1d08:	ldr	r1, [sp, #4]
    1d0c:	ldr	r2, [sp, #12]
    1d10:	bl	0 <memcpy>
    1d14:	ldr	r0, [sp, #4]
    1d18:	bl	0 <free>
    1d1c:	ldr	r0, [sp, #8]
    1d20:	movw	r1, #0
    1d24:	cmp	r0, r1
    1d28:	bne	1d5c <main+0x110>
    1d2c:	movw	r0, #0
    1d30:	movt	r0, #0
    1d34:	ldr	r0, [r0]
    1d38:	movw	r1, #0
    1d3c:	movt	r1, #0
    1d40:	ldr	r2, [r1]
    1d44:	movw	r1, #0
    1d48:	movt	r1, #0
    1d4c:	bl	0 <fprintf>
    1d50:	mvn	r1, #0
    1d54:	str	r1, [fp, #-4]
    1d58:	b	1e18 <main+0x1cc>
    1d5c:	ldr	r1, [sp, #8]
    1d60:	ldr	r2, [sp, #12]
    1d64:	movw	r0, #0
    1d68:	movt	r0, #0
    1d6c:	ldr	r3, [r0]
    1d70:	movw	r0, #0
    1d74:	movt	r0, #0
    1d78:	bl	2084 <hexdump>
    1d7c:	ldr	r0, [sp, #8]
    1d80:	ldr	r1, [sp, #12]
    1d84:	movw	r2, #0
    1d88:	movt	r2, #0
    1d8c:	bl	225c <MyGame_Example_Monster_verify_as_root_with_identifier>
    1d90:	movw	r1, #0
    1d94:	cmp	r1, r0
    1d98:	beq	1dc0 <main+0x174>
    1d9c:	movw	r0, #0
    1da0:	movt	r0, #0
    1da4:	ldr	r0, [r0]
    1da8:	movw	r1, #0
    1dac:	movt	r1, #0
    1db0:	bl	0 <fprintf>
    1db4:	mvn	r1, #0
    1db8:	str	r1, [sp, #16]
    1dbc:	b	1e08 <main+0x1bc>
    1dc0:	ldr	r0, [sp, #8]
    1dc4:	ldr	r1, [sp, #12]
    1dc8:	bl	2294 <MyGame_Example_Monster_verify_as_root>
    1dcc:	movw	r1, #0
    1dd0:	cmp	r1, r0
    1dd4:	beq	1dfc <main+0x1b0>
    1dd8:	movw	r0, #0
    1ddc:	movt	r0, #0
    1de0:	ldr	r0, [r0]
    1de4:	movw	r1, #0
    1de8:	movt	r1, #0
    1dec:	bl	0 <fprintf>
    1df0:	mvn	r1, #0
    1df4:	str	r1, [sp, #16]
    1df8:	b	1e08 <main+0x1bc>
    1dfc:	ldr	r0, [sp, #8]
    1e00:	bl	0 <verify_monster>
    1e04:	str	r0, [sp, #16]
    1e08:	ldr	r0, [sp, #8]
    1e0c:	bl	0 <free>
    1e10:	ldr	r0, [sp, #16]
    1e14:	str	r0, [fp, #-4]
    1e18:	ldr	r0, [fp, #-4]
    1e1c:	mov	sp, fp
    1e20:	pop	{fp, pc}

00001e24 <readfile>:
    1e24:	push	{fp, lr}
    1e28:	mov	fp, sp
    1e2c:	sub	sp, sp, #56	; 0x38
    1e30:	str	r0, [fp, #-8]
    1e34:	str	r1, [fp, #-12]
    1e38:	str	r2, [fp, #-16]
    1e3c:	ldr	r0, [fp, #-16]
    1e40:	movw	r1, #0
    1e44:	cmp	r0, r1
    1e48:	beq	1e58 <readfile+0x34>
    1e4c:	ldr	r0, [fp, #-16]
    1e50:	str	r0, [sp, #12]
    1e54:	b	1e64 <readfile+0x40>
    1e58:	add	r0, sp, #20
    1e5c:	str	r0, [sp, #12]
    1e60:	b	1e64 <readfile+0x40>
    1e64:	ldr	r0, [sp, #12]
    1e68:	str	r0, [fp, #-16]
    1e6c:	ldr	r0, [fp, #-8]
    1e70:	movw	r1, #0
    1e74:	movt	r1, #0
    1e78:	bl	0 <fopen>
    1e7c:	str	r0, [fp, #-20]	; 0xffffffec
    1e80:	movw	r0, #0
    1e84:	str	r0, [fp, #-24]	; 0xffffffe8
    1e88:	str	r0, [sp, #16]
    1e8c:	ldr	r1, [fp, #-20]	; 0xffffffec
    1e90:	cmp	r1, r0
    1e94:	bne	1e9c <readfile+0x78>
    1e98:	b	1fb8 <readfile+0x194>
    1e9c:	ldr	r0, [fp, #-20]	; 0xffffffec
    1ea0:	movw	r1, #0
    1ea4:	movw	r2, #2
    1ea8:	bl	0 <fseek>
    1eac:	ldr	r1, [fp, #-20]	; 0xffffffec
    1eb0:	str	r0, [sp, #8]
    1eb4:	mov	r0, r1
    1eb8:	bl	0 <ftell>
    1ebc:	str	r0, [fp, #-24]	; 0xffffffe8
    1ec0:	ldr	r0, [fp, #-24]	; 0xffffffe8
    1ec4:	ldr	r1, [fp, #-16]
    1ec8:	str	r0, [r1]
    1ecc:	ldr	r0, [fp, #-12]
    1ed0:	cmp	r0, #0
    1ed4:	bls	1eec <readfile+0xc8>
    1ed8:	ldr	r0, [fp, #-24]	; 0xffffffe8
    1edc:	ldr	r1, [fp, #-12]
    1ee0:	cmp	r0, r1
    1ee4:	bls	1eec <readfile+0xc8>
    1ee8:	b	1fb8 <readfile+0x194>
    1eec:	ldr	r0, [fp, #-20]	; 0xffffffec
    1ef0:	bl	0 <rewind>
    1ef4:	ldr	r0, [fp, #-24]	; 0xffffffe8
    1ef8:	cmp	r0, #0
    1efc:	beq	1f0c <readfile+0xe8>
    1f00:	ldr	r0, [fp, #-24]	; 0xffffffe8
    1f04:	str	r0, [sp, #4]
    1f08:	b	1f18 <readfile+0xf4>
    1f0c:	movw	r0, #1
    1f10:	str	r0, [sp, #4]
    1f14:	b	1f18 <readfile+0xf4>
    1f18:	ldr	r0, [sp, #4]
    1f1c:	bl	0 <malloc>
    1f20:	str	r0, [sp, #16]
    1f24:	ldr	r0, [sp, #16]
    1f28:	movw	r1, #0
    1f2c:	cmp	r0, r1
    1f30:	bne	1f38 <readfile+0x114>
    1f34:	b	1fb8 <readfile+0x194>
    1f38:	movw	r0, #0
    1f3c:	str	r0, [sp, #28]
    1f40:	ldr	r0, [sp, #16]
    1f44:	ldr	r1, [sp, #28]
    1f48:	add	r0, r0, r1
    1f4c:	ldr	r1, [fp, #-24]	; 0xffffffe8
    1f50:	ldr	r2, [sp, #28]
    1f54:	sub	r2, r1, r2
    1f58:	ldr	r3, [fp, #-20]	; 0xffffffec
    1f5c:	movw	r1, #1
    1f60:	bl	0 <fread>
    1f64:	str	r0, [sp, #24]
    1f68:	cmp	r0, #0
    1f6c:	beq	1f84 <readfile+0x160>
    1f70:	ldr	r0, [sp, #24]
    1f74:	ldr	r1, [sp, #28]
    1f78:	add	r0, r1, r0
    1f7c:	str	r0, [sp, #28]
    1f80:	b	1f40 <readfile+0x11c>
    1f84:	ldr	r0, [sp, #28]
    1f88:	ldr	r1, [fp, #-24]	; 0xffffffe8
    1f8c:	cmp	r0, r1
    1f90:	beq	1f98 <readfile+0x174>
    1f94:	b	1fb8 <readfile+0x194>
    1f98:	ldr	r0, [fp, #-20]	; 0xffffffec
    1f9c:	bl	0 <fclose>
    1fa0:	ldr	r1, [fp, #-24]	; 0xffffffe8
    1fa4:	ldr	r2, [fp, #-16]
    1fa8:	str	r1, [r2]
    1fac:	ldr	r1, [sp, #16]
    1fb0:	str	r1, [fp, #-4]
    1fb4:	b	1ffc <readfile+0x1d8>
    1fb8:	ldr	r0, [fp, #-20]	; 0xffffffec
    1fbc:	movw	r1, #0
    1fc0:	cmp	r0, r1
    1fc4:	beq	1fd0 <readfile+0x1ac>
    1fc8:	ldr	r0, [fp, #-20]	; 0xffffffec
    1fcc:	bl	0 <fclose>
    1fd0:	ldr	r0, [sp, #16]
    1fd4:	movw	r1, #0
    1fd8:	cmp	r0, r1
    1fdc:	beq	1fe8 <readfile+0x1c4>
    1fe0:	ldr	r0, [sp, #16]
    1fe4:	bl	0 <free>
    1fe8:	ldr	r0, [fp, #-24]	; 0xffffffe8
    1fec:	ldr	r1, [fp, #-16]
    1ff0:	str	r0, [r1]
    1ff4:	movw	r0, #0
    1ff8:	str	r0, [fp, #-4]
    1ffc:	ldr	r0, [fp, #-4]
    2000:	mov	sp, fp
    2004:	pop	{fp, pc}

00002008 <__portable_aligned_alloc>:
    2008:	push	{fp, lr}
    200c:	mov	fp, sp
    2010:	sub	sp, sp, #16
    2014:	str	r0, [fp, #-4]
    2018:	str	r1, [sp, #8]
    201c:	movw	r0, #0
    2020:	str	r0, [sp]
    2024:	ldr	r0, [fp, #-4]
    2028:	cmp	r0, #4
    202c:	bcs	2038 <__portable_aligned_alloc+0x30>
    2030:	movw	r0, #4
    2034:	str	r0, [fp, #-4]
    2038:	ldr	r1, [fp, #-4]
    203c:	ldr	r2, [sp, #8]
    2040:	mov	r0, sp
    2044:	bl	0 <posix_memalign>
    2048:	str	r0, [sp, #4]
    204c:	ldr	r0, [sp, #4]
    2050:	cmp	r0, #0
    2054:	beq	2078 <__portable_aligned_alloc+0x70>
    2058:	ldr	r0, [sp]
    205c:	movw	r1, #0
    2060:	cmp	r0, r1
    2064:	beq	2078 <__portable_aligned_alloc+0x70>
    2068:	ldr	r0, [sp]
    206c:	bl	0 <free>
    2070:	movw	r0, #0
    2074:	str	r0, [sp]
    2078:	ldr	r0, [sp]
    207c:	mov	sp, fp
    2080:	pop	{fp, pc}

00002084 <hexdump>:
    2084:	push	{fp, lr}
    2088:	mov	fp, sp
    208c:	sub	sp, sp, #48	; 0x30
    2090:	str	r0, [fp, #-4]
    2094:	str	r1, [fp, #-8]
    2098:	str	r2, [fp, #-12]
    209c:	str	r3, [fp, #-16]
    20a0:	ldr	r0, [fp, #-8]
    20a4:	str	r0, [sp, #4]
    20a8:	ldr	r0, [fp, #-4]
    20ac:	movw	r1, #0
    20b0:	cmp	r0, r1
    20b4:	beq	20cc <hexdump+0x48>
    20b8:	ldr	r0, [fp, #-16]
    20bc:	ldr	r2, [fp, #-4]
    20c0:	movw	r1, #0
    20c4:	movt	r1, #0
    20c8:	bl	0 <fprintf>
    20cc:	movw	r0, #0
    20d0:	str	r0, [fp, #-20]	; 0xffffffec
    20d4:	ldr	r0, [fp, #-20]	; 0xffffffec
    20d8:	ldr	r1, [fp, #-12]
    20dc:	cmp	r0, r1
    20e0:	bcs	220c <hexdump+0x188>
    20e4:	ldr	r0, [fp, #-20]	; 0xffffffec
    20e8:	and	r0, r0, #15
    20ec:	cmp	r0, #0
    20f0:	bne	212c <hexdump+0xa8>
    20f4:	ldr	r0, [fp, #-20]	; 0xffffffec
    20f8:	cmp	r0, #0
    20fc:	beq	2114 <hexdump+0x90>
    2100:	add	r2, sp, #11
    2104:	ldr	r0, [fp, #-16]
    2108:	movw	r1, #0
    210c:	movt	r1, #0
    2110:	bl	0 <fprintf>
    2114:	ldr	r0, [fp, #-16]
    2118:	ldr	r2, [fp, #-20]	; 0xffffffec
    211c:	movw	r1, #0
    2120:	movt	r1, #0
    2124:	bl	0 <fprintf>
    2128:	b	2150 <hexdump+0xcc>
    212c:	ldr	r0, [fp, #-20]	; 0xffffffec
    2130:	and	r0, r0, #7
    2134:	cmp	r0, #0
    2138:	bne	214c <hexdump+0xc8>
    213c:	ldr	r0, [fp, #-16]
    2140:	movw	r1, #0
    2144:	movt	r1, #0
    2148:	bl	0 <fprintf>
    214c:	b	2150 <hexdump+0xcc>
    2150:	ldr	r0, [fp, #-16]
    2154:	ldr	r1, [sp, #4]
    2158:	ldr	r2, [fp, #-20]	; 0xffffffec
    215c:	add	r1, r1, r2
    2160:	ldrb	r2, [r1]
    2164:	movw	r1, #0
    2168:	movt	r1, #0
    216c:	bl	0 <fprintf>
    2170:	ldr	r1, [sp, #4]
    2174:	ldr	r2, [fp, #-20]	; 0xffffffec
    2178:	add	r1, r1, r2
    217c:	ldrb	r1, [r1]
    2180:	cmp	r1, #32
    2184:	blt	21a0 <hexdump+0x11c>
    2188:	ldr	r0, [sp, #4]
    218c:	ldr	r1, [fp, #-20]	; 0xffffffec
    2190:	add	r0, r0, r1
    2194:	ldrb	r0, [r0]
    2198:	cmp	r0, #126	; 0x7e
    219c:	ble	21bc <hexdump+0x138>
    21a0:	ldr	r0, [fp, #-20]	; 0xffffffec
    21a4:	and	r0, r0, #15
    21a8:	add	r1, sp, #11
    21ac:	add	r0, r1, r0
    21b0:	movw	r1, #46	; 0x2e
    21b4:	strb	r1, [r0]
    21b8:	b	21e0 <hexdump+0x15c>
    21bc:	ldr	r0, [sp, #4]
    21c0:	ldr	r1, [fp, #-20]	; 0xffffffec
    21c4:	add	r0, r0, r1
    21c8:	ldrb	r0, [r0]
    21cc:	ldr	r1, [fp, #-20]	; 0xffffffec
    21d0:	and	r1, r1, #15
    21d4:	add	r2, sp, #11
    21d8:	add	r1, r2, r1
    21dc:	strb	r0, [r1]
    21e0:	ldr	r0, [fp, #-20]	; 0xffffffec
    21e4:	and	r0, r0, #15
    21e8:	add	r0, r0, #1
    21ec:	add	r1, sp, #11
    21f0:	add	r0, r1, r0
    21f4:	movw	r1, #0
    21f8:	strb	r1, [r0]
    21fc:	ldr	r0, [fp, #-20]	; 0xffffffec
    2200:	add	r0, r0, #1
    2204:	str	r0, [fp, #-20]	; 0xffffffec
    2208:	b	20d4 <hexdump+0x50>
    220c:	b	2210 <hexdump+0x18c>
    2210:	ldr	r0, [fp, #-20]	; 0xffffffec
    2214:	and	r0, r0, #15
    2218:	cmp	r0, #0
    221c:	beq	2240 <hexdump+0x1bc>
    2220:	ldr	r0, [fp, #-16]
    2224:	movw	r1, #0
    2228:	movt	r1, #0
    222c:	bl	0 <fprintf>
    2230:	ldr	r1, [fp, #-20]	; 0xffffffec
    2234:	add	r1, r1, #1
    2238:	str	r1, [fp, #-20]	; 0xffffffec
    223c:	b	2210 <hexdump+0x18c>
    2240:	add	r2, sp, #11
    2244:	ldr	r0, [fp, #-16]
    2248:	movw	r1, #0
    224c:	movt	r1, #0
    2250:	bl	0 <fprintf>
    2254:	mov	sp, fp
    2258:	pop	{fp, pc}

0000225c <MyGame_Example_Monster_verify_as_root_with_identifier>:
    225c:	push	{fp, lr}
    2260:	mov	fp, sp
    2264:	sub	sp, sp, #16
    2268:	str	r0, [fp, #-4]
    226c:	str	r1, [sp, #8]
    2270:	str	r2, [sp, #4]
    2274:	ldr	r0, [fp, #-4]
    2278:	ldr	r1, [sp, #8]
    227c:	ldr	r2, [sp, #4]
    2280:	movw	r3, #0
    2284:	movt	r3, #0
    2288:	bl	0 <flatcc_verify_table_as_root>
    228c:	mov	sp, fp
    2290:	pop	{fp, pc}

00002294 <MyGame_Example_Monster_verify_as_root>:
    2294:	push	{fp, lr}
    2298:	mov	fp, sp
    229c:	sub	sp, sp, #8
    22a0:	str	r0, [sp, #4]
    22a4:	str	r1, [sp]
    22a8:	ldr	r0, [sp, #4]
    22ac:	ldr	r1, [sp]
    22b0:	movw	r2, #0
    22b4:	movt	r2, #0
    22b8:	movw	r3, #0
    22bc:	movt	r3, #0
    22c0:	bl	0 <flatcc_verify_table_as_root>
    22c4:	mov	sp, fp
    22c8:	pop	{fp, pc}

000022cc <flatbuffers_has_identifier>:
    22cc:	push	{fp, lr}
    22d0:	mov	fp, sp
    22d4:	sub	sp, sp, #32
    22d8:	str	r0, [fp, #-8]
    22dc:	str	r1, [fp, #-12]
    22e0:	movw	r0, #0
    22e4:	str	r0, [sp, #12]
    22e8:	ldr	r1, [fp, #-12]
    22ec:	cmp	r1, r0
    22f0:	bne	2300 <flatbuffers_has_identifier+0x34>
    22f4:	movw	r0, #1
    22f8:	str	r0, [fp, #-4]
    22fc:	b	236c <flatbuffers_has_identifier+0xa0>
    2300:	add	r0, sp, #12
    2304:	ldr	r1, [fp, #-12]
    2308:	movw	r2, #4
    230c:	bl	0 <strncpy>
    2310:	ldr	r1, [sp, #12]
    2314:	str	r0, [sp, #8]
    2318:	mov	r0, r1
    231c:	bl	239c <__flatbuffers_thash_cast_from_le>
    2320:	str	r0, [sp, #12]
    2324:	ldr	r0, [fp, #-8]
    2328:	add	r0, r0, #4
    232c:	bl	23b0 <__flatbuffers_thash_read_from_pe>
    2330:	str	r0, [sp, #16]
    2334:	ldr	r0, [sp, #12]
    2338:	cmp	r0, #0
    233c:	movw	r0, #1
    2340:	str	r0, [sp, #4]
    2344:	beq	2360 <flatbuffers_has_identifier+0x94>
    2348:	ldr	r0, [sp, #16]
    234c:	ldr	r1, [sp, #12]
    2350:	cmp	r0, r1
    2354:	movw	r0, #0
    2358:	moveq	r0, #1
    235c:	str	r0, [sp, #4]
    2360:	ldr	r0, [sp, #4]
    2364:	and	r0, r0, #1
    2368:	str	r0, [fp, #-4]
    236c:	ldr	r0, [fp, #-4]
    2370:	mov	sp, fp
    2374:	pop	{fp, pc}

00002378 <__flatbuffers_uoffset_read_from_pe>:
    2378:	push	{fp, lr}
    237c:	mov	fp, sp
    2380:	sub	sp, sp, #8
    2384:	str	r0, [sp, #4]
    2388:	ldr	r0, [sp, #4]
    238c:	ldr	r0, [r0]
    2390:	bl	23e8 <__flatbuffers_uoffset_cast_from_pe>
    2394:	mov	sp, fp
    2398:	pop	{fp, pc}

0000239c <__flatbuffers_thash_cast_from_le>:
    239c:	sub	sp, sp, #4
    23a0:	str	r0, [sp]
    23a4:	ldr	r0, [sp]
    23a8:	add	sp, sp, #4
    23ac:	bx	lr

000023b0 <__flatbuffers_thash_read_from_pe>:
    23b0:	push	{fp, lr}
    23b4:	mov	fp, sp
    23b8:	sub	sp, sp, #8
    23bc:	str	r0, [sp, #4]
    23c0:	ldr	r0, [sp, #4]
    23c4:	ldr	r0, [r0]
    23c8:	bl	23d4 <__flatbuffers_thash_cast_from_pe>
    23cc:	mov	sp, fp
    23d0:	pop	{fp, pc}

000023d4 <__flatbuffers_thash_cast_from_pe>:
    23d4:	sub	sp, sp, #4
    23d8:	str	r0, [sp]
    23dc:	ldr	r0, [sp]
    23e0:	add	sp, sp, #4
    23e4:	bx	lr

000023e8 <__flatbuffers_uoffset_cast_from_pe>:
    23e8:	sub	sp, sp, #4
    23ec:	str	r0, [sp]
    23f0:	ldr	r0, [sp]
    23f4:	add	sp, sp, #4
    23f8:	bx	lr

000023fc <__flatbuffers_soffset_read_from_pe>:
    23fc:	push	{fp, lr}
    2400:	mov	fp, sp
    2404:	sub	sp, sp, #8
    2408:	str	r0, [sp, #4]
    240c:	ldr	r0, [sp, #4]
    2410:	ldr	r0, [r0]
    2414:	bl	2470 <__flatbuffers_soffset_cast_from_pe>
    2418:	mov	sp, fp
    241c:	pop	{fp, pc}

00002420 <__flatbuffers_voffset_read_from_pe>:
    2420:	push	{fp, lr}
    2424:	mov	fp, sp
    2428:	sub	sp, sp, #8
    242c:	str	r0, [sp, #4]
    2430:	ldr	r0, [sp, #4]
    2434:	ldrh	r0, [r0]
    2438:	bl	2484 <__flatbuffers_voffset_cast_from_pe>
    243c:	uxth	r0, r0
    2440:	mov	sp, fp
    2444:	pop	{fp, pc}

00002448 <flatbuffers_int16_read_from_pe>:
    2448:	push	{fp, lr}
    244c:	mov	fp, sp
    2450:	sub	sp, sp, #8
    2454:	str	r0, [sp, #4]
    2458:	ldr	r0, [sp, #4]
    245c:	ldrsh	r0, [r0]
    2460:	bl	2498 <flatbuffers_int16_cast_from_pe>
    2464:	sxth	r0, r0
    2468:	mov	sp, fp
    246c:	pop	{fp, pc}

00002470 <__flatbuffers_soffset_cast_from_pe>:
    2470:	sub	sp, sp, #4
    2474:	str	r0, [sp]
    2478:	ldr	r0, [sp]
    247c:	add	sp, sp, #4
    2480:	bx	lr

00002484 <__flatbuffers_voffset_cast_from_pe>:
    2484:	sub	sp, sp, #4
    2488:	strh	r0, [sp, #2]
    248c:	ldrh	r0, [sp, #2]
    2490:	add	sp, sp, #4
    2494:	bx	lr

00002498 <flatbuffers_int16_cast_from_pe>:
    2498:	sub	sp, sp, #4
    249c:	strh	r0, [sp, #2]
    24a0:	ldrsh	r0, [sp, #2]
    24a4:	add	sp, sp, #4
    24a8:	bx	lr

000024ac <flatbuffers_float_read_from_pe>:
    24ac:	push	{fp, lr}
    24b0:	mov	fp, sp
    24b4:	sub	sp, sp, #8
    24b8:	str	r0, [sp, #4]
    24bc:	ldr	r0, [sp, #4]
    24c0:	vldr	s0, [r0]
    24c4:	bl	24d0 <flatbuffers_float_cast_from_pe>
    24c8:	mov	sp, fp
    24cc:	pop	{fp, pc}

000024d0 <flatbuffers_float_cast_from_pe>:
    24d0:	sub	sp, sp, #8
    24d4:	vstr	s0, [sp, #4]
    24d8:	vldr	s0, [sp, #4]
    24dc:	vstr	s0, [sp]
    24e0:	ldr	r0, [sp]
    24e4:	str	r0, [sp]
    24e8:	vldr	s0, [sp]
    24ec:	add	sp, sp, #8
    24f0:	bx	lr

000024f4 <flatbuffers_double_read_from_pe>:
    24f4:	push	{fp, lr}
    24f8:	mov	fp, sp
    24fc:	sub	sp, sp, #8
    2500:	str	r0, [sp, #4]
    2504:	ldr	r0, [sp, #4]
    2508:	vldr	d0, [r0]
    250c:	bl	2518 <flatbuffers_double_cast_from_pe>
    2510:	mov	sp, fp
    2514:	pop	{fp, pc}

00002518 <flatbuffers_double_cast_from_pe>:
    2518:	sub	sp, sp, #16
    251c:	vstr	d0, [sp, #8]
    2520:	vldr	d16, [sp, #8]
    2524:	vstr	d16, [sp]
    2528:	vldr	d0, [sp]
    252c:	add	sp, sp, #16
    2530:	bx	lr

00002534 <MyGame_Example_Color_read_from_pe>:
    2534:	push	{fp, lr}
    2538:	mov	fp, sp
    253c:	sub	sp, sp, #8
    2540:	str	r0, [sp, #4]
    2544:	ldr	r0, [sp, #4]
    2548:	ldrsb	r0, [r0]
    254c:	bl	255c <MyGame_Example_Color_cast_from_pe>
    2550:	sxtb	r0, r0
    2554:	mov	sp, fp
    2558:	pop	{fp, pc}

0000255c <MyGame_Example_Color_cast_from_pe>:
    255c:	sub	sp, sp, #4
    2560:	strb	r0, [sp, #3]
    2564:	ldrsb	r0, [sp, #3]
    2568:	add	sp, sp, #4
    256c:	bx	lr

00002570 <flatbuffers_int8_read_from_pe>:
    2570:	push	{fp, lr}
    2574:	mov	fp, sp
    2578:	sub	sp, sp, #8
    257c:	str	r0, [sp, #4]
    2580:	ldr	r0, [sp, #4]
    2584:	ldrsb	r0, [r0]
    2588:	bl	2598 <flatbuffers_int8_cast_from_pe>
    258c:	sxtb	r0, r0
    2590:	mov	sp, fp
    2594:	pop	{fp, pc}

00002598 <flatbuffers_int8_cast_from_pe>:
    2598:	sub	sp, sp, #4
    259c:	strb	r0, [sp, #3]
    25a0:	ldrsb	r0, [sp, #3]
    25a4:	add	sp, sp, #4
    25a8:	bx	lr

000025ac <flatbuffers_vec_len>:
    25ac:	push	{fp, lr}
    25b0:	mov	fp, sp
    25b4:	sub	sp, sp, #8
    25b8:	str	r0, [sp, #4]
    25bc:	ldr	r0, [sp, #4]
    25c0:	movw	r1, #0
    25c4:	cmp	r0, r1
    25c8:	beq	25e4 <flatbuffers_vec_len+0x38>
    25cc:	ldr	r0, [sp, #4]
    25d0:	mvn	r1, #3
    25d4:	add	r0, r0, r1
    25d8:	bl	2378 <__flatbuffers_uoffset_read_from_pe>
    25dc:	str	r0, [sp]
    25e0:	b	25f0 <flatbuffers_vec_len+0x44>
    25e4:	movw	r0, #0
    25e8:	str	r0, [sp]
    25ec:	b	25f0 <flatbuffers_vec_len+0x44>
    25f0:	ldr	r0, [sp]
    25f4:	mov	sp, fp
    25f8:	pop	{fp, pc}

000025fc <flatbuffers_uint8_read_from_pe>:
    25fc:	push	{fp, lr}
    2600:	mov	fp, sp
    2604:	sub	sp, sp, #8
    2608:	str	r0, [sp, #4]
    260c:	ldr	r0, [sp, #4]
    2610:	ldrb	r0, [r0]
    2614:	bl	2624 <flatbuffers_uint8_cast_from_pe>
    2618:	and	r0, r0, #255	; 0xff
    261c:	mov	sp, fp
    2620:	pop	{fp, pc}

00002624 <flatbuffers_uint8_cast_from_pe>:
    2624:	sub	sp, sp, #4
    2628:	strb	r0, [sp, #3]
    262c:	ldrb	r0, [sp, #3]
    2630:	add	sp, sp, #4
    2634:	bx	lr

00002638 <__flatbuffers_utype_read_from_pe>:
    2638:	push	{fp, lr}
    263c:	mov	fp, sp
    2640:	sub	sp, sp, #8
    2644:	str	r0, [sp, #4]
    2648:	ldr	r0, [sp, #4]
    264c:	ldrb	r0, [r0]
    2650:	bl	2660 <__flatbuffers_utype_cast_from_pe>
    2654:	and	r0, r0, #255	; 0xff
    2658:	mov	sp, fp
    265c:	pop	{fp, pc}

00002660 <__flatbuffers_utype_cast_from_pe>:
    2660:	sub	sp, sp, #4
    2664:	strb	r0, [sp, #3]
    2668:	ldrb	r0, [sp, #3]
    266c:	add	sp, sp, #4
    2670:	bx	lr

00002674 <flatbuffers_int32_read_from_pe>:
    2674:	push	{fp, lr}
    2678:	mov	fp, sp
    267c:	sub	sp, sp, #8
    2680:	str	r0, [sp, #4]
    2684:	ldr	r0, [sp, #4]
    2688:	ldr	r0, [r0]
    268c:	bl	2698 <flatbuffers_int32_cast_from_pe>
    2690:	mov	sp, fp
    2694:	pop	{fp, pc}

00002698 <flatbuffers_int32_cast_from_pe>:
    2698:	sub	sp, sp, #4
    269c:	str	r0, [sp]
    26a0:	ldr	r0, [sp]
    26a4:	add	sp, sp, #4
    26a8:	bx	lr

000026ac <flatbuffers_uint32_read_from_pe>:
    26ac:	push	{fp, lr}
    26b0:	mov	fp, sp
    26b4:	sub	sp, sp, #8
    26b8:	str	r0, [sp, #4]
    26bc:	ldr	r0, [sp, #4]
    26c0:	ldr	r0, [r0]
    26c4:	bl	26d0 <flatbuffers_uint32_cast_from_pe>
    26c8:	mov	sp, fp
    26cc:	pop	{fp, pc}

000026d0 <flatbuffers_uint32_cast_from_pe>:
    26d0:	sub	sp, sp, #4
    26d4:	str	r0, [sp]
    26d8:	ldr	r0, [sp]
    26dc:	add	sp, sp, #4
    26e0:	bx	lr

000026e4 <flatbuffers_int64_read_from_pe>:
    26e4:	push	{fp, lr}
    26e8:	mov	fp, sp
    26ec:	sub	sp, sp, #8
    26f0:	str	r0, [sp, #4]
    26f4:	ldr	r0, [sp, #4]
    26f8:	ldr	r1, [r0]
    26fc:	ldr	r0, [r0, #4]
    2700:	str	r0, [sp]
    2704:	mov	r0, r1
    2708:	ldr	r1, [sp]
    270c:	bl	2718 <flatbuffers_int64_cast_from_pe>
    2710:	mov	sp, fp
    2714:	pop	{fp, pc}

00002718 <flatbuffers_int64_cast_from_pe>:
    2718:	sub	sp, sp, #8
    271c:	str	r0, [sp]
    2720:	str	r1, [sp, #4]
    2724:	ldr	r0, [sp]
    2728:	ldr	r1, [sp, #4]
    272c:	add	sp, sp, #8
    2730:	bx	lr

00002734 <flatbuffers_uint64_read_from_pe>:
    2734:	push	{fp, lr}
    2738:	mov	fp, sp
    273c:	sub	sp, sp, #8
    2740:	str	r0, [sp, #4]
    2744:	ldr	r0, [sp, #4]
    2748:	ldr	r1, [r0]
    274c:	ldr	r0, [r0, #4]
    2750:	str	r0, [sp]
    2754:	mov	r0, r1
    2758:	ldr	r1, [sp]
    275c:	bl	2768 <flatbuffers_uint64_cast_from_pe>
    2760:	mov	sp, fp
    2764:	pop	{fp, pc}

00002768 <flatbuffers_uint64_cast_from_pe>:
    2768:	sub	sp, sp, #8
    276c:	str	r0, [sp]
    2770:	str	r1, [sp, #4]
    2774:	ldr	r0, [sp]
    2778:	ldr	r1, [sp, #4]
    277c:	add	sp, sp, #8
    2780:	bx	lr

00002784 <MyGame_Example_Monster_verify_table>:
    2784:	push	{fp, lr}
    2788:	mov	fp, sp
    278c:	sub	sp, sp, #48	; 0x30
    2790:	str	r0, [fp, #-8]
    2794:	ldr	r0, [fp, #-8]
    2798:	movw	r1, #0
    279c:	uxth	r1, r1
    27a0:	movw	r2, #32
    27a4:	movw	r3, #16
    27a8:	uxth	r3, r3
    27ac:	bl	0 <flatcc_verify_field>
    27b0:	str	r0, [fp, #-12]
    27b4:	cmp	r0, #0
    27b8:	beq	27c8 <MyGame_Example_Monster_verify_table+0x44>
    27bc:	ldr	r0, [fp, #-12]
    27c0:	str	r0, [fp, #-4]
    27c4:	b	2f48 <MyGame_Example_Monster_verify_table+0x7c4>
    27c8:	ldr	r0, [fp, #-8]
    27cc:	movw	r1, #2
    27d0:	uxth	r2, r1
    27d4:	str	r1, [fp, #-16]
    27d8:	mov	r1, r2
    27dc:	movw	r2, #2
    27e0:	ldr	r3, [fp, #-16]
    27e4:	uxth	r3, r3
    27e8:	bl	0 <flatcc_verify_field>
    27ec:	str	r0, [fp, #-12]
    27f0:	cmp	r0, #0
    27f4:	beq	2804 <MyGame_Example_Monster_verify_table+0x80>
    27f8:	ldr	r0, [fp, #-12]
    27fc:	str	r0, [fp, #-4]
    2800:	b	2f48 <MyGame_Example_Monster_verify_table+0x7c4>
    2804:	ldr	r0, [fp, #-8]
    2808:	movw	r1, #1
    280c:	uxth	r1, r1
    2810:	movw	r2, #2
    2814:	movw	r3, #2
    2818:	uxth	r3, r3
    281c:	bl	0 <flatcc_verify_field>
    2820:	str	r0, [fp, #-12]
    2824:	cmp	r0, #0
    2828:	beq	2838 <MyGame_Example_Monster_verify_table+0xb4>
    282c:	ldr	r0, [fp, #-12]
    2830:	str	r0, [fp, #-4]
    2834:	b	2f48 <MyGame_Example_Monster_verify_table+0x7c4>
    2838:	ldr	r0, [fp, #-8]
    283c:	movw	r1, #3
    2840:	uxth	r1, r1
    2844:	movw	r2, #1
    2848:	bl	0 <flatcc_verify_string_field>
    284c:	str	r0, [fp, #-12]
    2850:	cmp	r0, #0
    2854:	beq	2864 <MyGame_Example_Monster_verify_table+0xe0>
    2858:	ldr	r0, [fp, #-12]
    285c:	str	r0, [fp, #-4]
    2860:	b	2f48 <MyGame_Example_Monster_verify_table+0x7c4>
    2864:	ldr	r0, [fp, #-8]
    2868:	movw	r1, #6
    286c:	uxth	r1, r1
    2870:	movw	r2, #1
    2874:	movw	r3, #1
    2878:	uxth	r3, r3
    287c:	bl	0 <flatcc_verify_field>
    2880:	str	r0, [fp, #-12]
    2884:	cmp	r0, #0
    2888:	beq	2898 <MyGame_Example_Monster_verify_table+0x114>
    288c:	ldr	r0, [fp, #-12]
    2890:	str	r0, [fp, #-4]
    2894:	b	2f48 <MyGame_Example_Monster_verify_table+0x7c4>
    2898:	ldr	r0, [fp, #-8]
    289c:	movw	r1, #5
    28a0:	uxth	r1, r1
    28a4:	movw	r2, #0
    28a8:	movw	r3, #1
    28ac:	movw	ip, #1
    28b0:	uxth	ip, ip
    28b4:	str	ip, [sp]
    28b8:	mvn	ip, #0
    28bc:	str	ip, [sp, #4]
    28c0:	bl	0 <flatcc_verify_vector_field>
    28c4:	str	r0, [fp, #-12]
    28c8:	cmp	r0, #0
    28cc:	beq	28dc <MyGame_Example_Monster_verify_table+0x158>
    28d0:	ldr	r0, [fp, #-12]
    28d4:	str	r0, [fp, #-4]
    28d8:	b	2f48 <MyGame_Example_Monster_verify_table+0x7c4>
    28dc:	ldr	r0, [fp, #-8]
    28e0:	movw	r1, #11
    28e4:	uxth	r1, r1
    28e8:	movw	r2, #0
    28ec:	movw	r3, #0
    28f0:	movt	r3, #0
    28f4:	bl	0 <flatcc_verify_table_vector_field>
    28f8:	str	r0, [fp, #-12]
    28fc:	cmp	r0, #0
    2900:	beq	2910 <MyGame_Example_Monster_verify_table+0x18c>
    2904:	ldr	r0, [fp, #-12]
    2908:	str	r0, [fp, #-4]
    290c:	b	2f48 <MyGame_Example_Monster_verify_table+0x7c4>
    2910:	ldr	r0, [fp, #-8]
    2914:	movw	r1, #10
    2918:	uxth	r1, r1
    291c:	movw	r2, #0
    2920:	bl	0 <flatcc_verify_string_vector_field>
    2924:	str	r0, [fp, #-12]
    2928:	cmp	r0, #0
    292c:	beq	293c <MyGame_Example_Monster_verify_table+0x1b8>
    2930:	ldr	r0, [fp, #-12]
    2934:	str	r0, [fp, #-4]
    2938:	b	2f48 <MyGame_Example_Monster_verify_table+0x7c4>
    293c:	ldr	r0, [fp, #-8]
    2940:	movw	r1, #28
    2944:	uxth	r1, r1
    2948:	movw	r2, #0
    294c:	bl	0 <flatcc_verify_string_vector_field>
    2950:	str	r0, [fp, #-12]
    2954:	cmp	r0, #0
    2958:	beq	2968 <MyGame_Example_Monster_verify_table+0x1e4>
    295c:	ldr	r0, [fp, #-12]
    2960:	str	r0, [fp, #-4]
    2964:	b	2f48 <MyGame_Example_Monster_verify_table+0x7c4>
    2968:	ldr	r0, [fp, #-8]
    296c:	movw	r1, #24
    2970:	uxth	r1, r1
    2974:	movw	r2, #0
    2978:	movw	r3, #1
    297c:	movw	ip, #1
    2980:	uxth	ip, ip
    2984:	str	ip, [sp]
    2988:	mvn	ip, #0
    298c:	str	ip, [sp, #4]
    2990:	bl	0 <flatcc_verify_vector_field>
    2994:	str	r0, [fp, #-12]
    2998:	cmp	r0, #0
    299c:	beq	29ac <MyGame_Example_Monster_verify_table+0x228>
    29a0:	ldr	r0, [fp, #-12]
    29a4:	str	r0, [fp, #-4]
    29a8:	b	2f48 <MyGame_Example_Monster_verify_table+0x7c4>
    29ac:	ldr	r0, [pc, #1440]	; 2f54 <MyGame_Example_Monster_verify_table+0x7d0>
    29b0:	ldr	r1, [fp, #-8]
    29b4:	str	r0, [fp, #-20]	; 0xffffffec
    29b8:	mov	r0, r1
    29bc:	movw	r1, #29
    29c0:	uxth	r1, r1
    29c4:	movw	r2, #0
    29c8:	movw	r3, #8
    29cc:	movw	ip, #4
    29d0:	uxth	ip, ip
    29d4:	str	ip, [sp]
    29d8:	ldr	ip, [fp, #-20]	; 0xffffffec
    29dc:	str	ip, [sp, #4]
    29e0:	bl	0 <flatcc_verify_vector_field>
    29e4:	str	r0, [fp, #-12]
    29e8:	cmp	r0, #0
    29ec:	beq	29fc <MyGame_Example_Monster_verify_table+0x278>
    29f0:	ldr	r0, [fp, #-12]
    29f4:	str	r0, [fp, #-4]
    29f8:	b	2f48 <MyGame_Example_Monster_verify_table+0x7c4>
    29fc:	ldr	r0, [fp, #-8]
    2a00:	movw	r1, #12
    2a04:	uxth	r1, r1
    2a08:	movw	r2, #0
    2a0c:	movw	r3, #0
    2a10:	movt	r3, #0
    2a14:	bl	0 <flatcc_verify_table_field>
    2a18:	str	r0, [fp, #-12]
    2a1c:	cmp	r0, #0
    2a20:	beq	2a30 <MyGame_Example_Monster_verify_table+0x2ac>
    2a24:	ldr	r0, [fp, #-12]
    2a28:	str	r0, [fp, #-4]
    2a2c:	b	2f48 <MyGame_Example_Monster_verify_table+0x7c4>
    2a30:	ldr	r0, [fp, #-8]
    2a34:	movw	r1, #8
    2a38:	uxth	r1, r1
    2a3c:	movw	r2, #0
    2a40:	movw	r3, #0
    2a44:	movt	r3, #0
    2a48:	bl	0 <flatcc_verify_union_field>
    2a4c:	str	r0, [fp, #-12]
    2a50:	cmp	r0, #0
    2a54:	beq	2a64 <MyGame_Example_Monster_verify_table+0x2e0>
    2a58:	ldr	r0, [fp, #-12]
    2a5c:	str	r0, [fp, #-4]
    2a60:	b	2f48 <MyGame_Example_Monster_verify_table+0x7c4>
    2a64:	ldr	r0, [pc, #1260]	; 2f58 <MyGame_Example_Monster_verify_table+0x7d4>
    2a68:	ldr	r1, [fp, #-8]
    2a6c:	str	r0, [sp, #24]
    2a70:	mov	r0, r1
    2a74:	movw	r1, #9
    2a78:	uxth	r1, r1
    2a7c:	movw	r2, #0
    2a80:	movw	r3, #4
    2a84:	movw	ip, #2
    2a88:	uxth	ip, ip
    2a8c:	str	ip, [sp]
    2a90:	ldr	ip, [sp, #24]
    2a94:	str	ip, [sp, #4]
    2a98:	bl	0 <flatcc_verify_vector_field>
    2a9c:	str	r0, [fp, #-12]
    2aa0:	cmp	r0, #0
    2aa4:	beq	2ab4 <MyGame_Example_Monster_verify_table+0x330>
    2aa8:	ldr	r0, [fp, #-12]
    2aac:	str	r0, [fp, #-4]
    2ab0:	b	2f48 <MyGame_Example_Monster_verify_table+0x7c4>
    2ab4:	ldr	r0, [pc, #1180]	; 2f58 <MyGame_Example_Monster_verify_table+0x7d4>
    2ab8:	ldr	r1, [fp, #-8]
    2abc:	str	r0, [sp, #20]
    2ac0:	mov	r0, r1
    2ac4:	movw	r1, #31
    2ac8:	uxth	r1, r1
    2acc:	movw	r2, #0
    2ad0:	movw	r3, #4
    2ad4:	movw	ip, #2
    2ad8:	uxth	ip, ip
    2adc:	str	ip, [sp]
    2ae0:	ldr	ip, [sp, #20]
    2ae4:	str	ip, [sp, #4]
    2ae8:	bl	0 <flatcc_verify_vector_field>
    2aec:	str	r0, [fp, #-12]
    2af0:	cmp	r0, #0
    2af4:	beq	2b04 <MyGame_Example_Monster_verify_table+0x380>
    2af8:	ldr	r0, [fp, #-12]
    2afc:	str	r0, [fp, #-4]
    2b00:	b	2f48 <MyGame_Example_Monster_verify_table+0x7c4>
    2b04:	ldr	r0, [fp, #-8]
    2b08:	movw	r1, #13
    2b0c:	uxth	r1, r1
    2b10:	movw	r2, #0
    2b14:	str	r2, [sp, #16]
    2b18:	ldr	r3, [sp, #16]
    2b1c:	movw	ip, #1
    2b20:	uxth	ip, ip
    2b24:	str	ip, [sp]
    2b28:	movw	ip, #0
    2b2c:	movt	ip, #0
    2b30:	str	ip, [sp, #4]
    2b34:	bl	0 <flatcc_verify_table_as_nested_root>
    2b38:	str	r0, [fp, #-12]
    2b3c:	cmp	r0, #0
    2b40:	beq	2b50 <MyGame_Example_Monster_verify_table+0x3cc>
    2b44:	ldr	r0, [fp, #-12]
    2b48:	str	r0, [fp, #-4]
    2b4c:	b	2f48 <MyGame_Example_Monster_verify_table+0x7c4>
    2b50:	ldr	r0, [fp, #-8]
    2b54:	movw	r1, #14
    2b58:	uxth	r1, r1
    2b5c:	movw	r2, #0
    2b60:	movw	r3, #0
    2b64:	movt	r3, #0
    2b68:	bl	0 <flatcc_verify_table_field>
    2b6c:	str	r0, [fp, #-12]
    2b70:	cmp	r0, #0
    2b74:	beq	2b84 <MyGame_Example_Monster_verify_table+0x400>
    2b78:	ldr	r0, [fp, #-12]
    2b7c:	str	r0, [fp, #-4]
    2b80:	b	2f48 <MyGame_Example_Monster_verify_table+0x7c4>
    2b84:	ldr	r0, [fp, #-8]
    2b88:	movw	r1, #15
    2b8c:	uxth	r1, r1
    2b90:	movw	r2, #1
    2b94:	movw	r3, #1
    2b98:	uxth	r3, r3
    2b9c:	bl	0 <flatcc_verify_field>
    2ba0:	str	r0, [fp, #-12]
    2ba4:	cmp	r0, #0
    2ba8:	beq	2bb8 <MyGame_Example_Monster_verify_table+0x434>
    2bac:	ldr	r0, [fp, #-12]
    2bb0:	str	r0, [fp, #-4]
    2bb4:	b	2f48 <MyGame_Example_Monster_verify_table+0x7c4>
    2bb8:	ldr	r0, [fp, #-8]
    2bbc:	movw	r1, #16
    2bc0:	uxth	r1, r1
    2bc4:	movw	r2, #4
    2bc8:	movw	r3, #4
    2bcc:	uxth	r3, r3
    2bd0:	bl	0 <flatcc_verify_field>
    2bd4:	str	r0, [fp, #-12]
    2bd8:	cmp	r0, #0
    2bdc:	beq	2bec <MyGame_Example_Monster_verify_table+0x468>
    2be0:	ldr	r0, [fp, #-12]
    2be4:	str	r0, [fp, #-4]
    2be8:	b	2f48 <MyGame_Example_Monster_verify_table+0x7c4>
    2bec:	ldr	r0, [fp, #-8]
    2bf0:	movw	r1, #17
    2bf4:	uxth	r1, r1
    2bf8:	movw	r2, #4
    2bfc:	movw	r3, #4
    2c00:	uxth	r3, r3
    2c04:	bl	0 <flatcc_verify_field>
    2c08:	str	r0, [fp, #-12]
    2c0c:	cmp	r0, #0
    2c10:	beq	2c20 <MyGame_Example_Monster_verify_table+0x49c>
    2c14:	ldr	r0, [fp, #-12]
    2c18:	str	r0, [fp, #-4]
    2c1c:	b	2f48 <MyGame_Example_Monster_verify_table+0x7c4>
    2c20:	ldr	r0, [fp, #-8]
    2c24:	movw	r1, #18
    2c28:	uxth	r1, r1
    2c2c:	movw	r2, #8
    2c30:	movw	r3, #8
    2c34:	uxth	r3, r3
    2c38:	bl	0 <flatcc_verify_field>
    2c3c:	str	r0, [fp, #-12]
    2c40:	cmp	r0, #0
    2c44:	beq	2c54 <MyGame_Example_Monster_verify_table+0x4d0>
    2c48:	ldr	r0, [fp, #-12]
    2c4c:	str	r0, [fp, #-4]
    2c50:	b	2f48 <MyGame_Example_Monster_verify_table+0x7c4>
    2c54:	ldr	r0, [fp, #-8]
    2c58:	movw	r1, #19
    2c5c:	uxth	r1, r1
    2c60:	movw	r2, #8
    2c64:	movw	r3, #8
    2c68:	uxth	r3, r3
    2c6c:	bl	0 <flatcc_verify_field>
    2c70:	str	r0, [fp, #-12]
    2c74:	cmp	r0, #0
    2c78:	beq	2c88 <MyGame_Example_Monster_verify_table+0x504>
    2c7c:	ldr	r0, [fp, #-12]
    2c80:	str	r0, [fp, #-4]
    2c84:	b	2f48 <MyGame_Example_Monster_verify_table+0x7c4>
    2c88:	ldr	r0, [fp, #-8]
    2c8c:	movw	r1, #20
    2c90:	uxth	r1, r1
    2c94:	movw	r2, #4
    2c98:	movw	r3, #4
    2c9c:	uxth	r3, r3
    2ca0:	bl	0 <flatcc_verify_field>
    2ca4:	str	r0, [fp, #-12]
    2ca8:	cmp	r0, #0
    2cac:	beq	2cbc <MyGame_Example_Monster_verify_table+0x538>
    2cb0:	ldr	r0, [fp, #-12]
    2cb4:	str	r0, [fp, #-4]
    2cb8:	b	2f48 <MyGame_Example_Monster_verify_table+0x7c4>
    2cbc:	ldr	r0, [fp, #-8]
    2cc0:	movw	r1, #21
    2cc4:	uxth	r1, r1
    2cc8:	movw	r2, #4
    2ccc:	movw	r3, #4
    2cd0:	uxth	r3, r3
    2cd4:	bl	0 <flatcc_verify_field>
    2cd8:	str	r0, [fp, #-12]
    2cdc:	cmp	r0, #0
    2ce0:	beq	2cf0 <MyGame_Example_Monster_verify_table+0x56c>
    2ce4:	ldr	r0, [fp, #-12]
    2ce8:	str	r0, [fp, #-4]
    2cec:	b	2f48 <MyGame_Example_Monster_verify_table+0x7c4>
    2cf0:	ldr	r0, [fp, #-8]
    2cf4:	movw	r1, #22
    2cf8:	uxth	r1, r1
    2cfc:	movw	r2, #8
    2d00:	movw	r3, #8
    2d04:	uxth	r3, r3
    2d08:	bl	0 <flatcc_verify_field>
    2d0c:	str	r0, [fp, #-12]
    2d10:	cmp	r0, #0
    2d14:	beq	2d24 <MyGame_Example_Monster_verify_table+0x5a0>
    2d18:	ldr	r0, [fp, #-12]
    2d1c:	str	r0, [fp, #-4]
    2d20:	b	2f48 <MyGame_Example_Monster_verify_table+0x7c4>
    2d24:	ldr	r0, [fp, #-8]
    2d28:	movw	r1, #23
    2d2c:	uxth	r1, r1
    2d30:	movw	r2, #8
    2d34:	movw	r3, #8
    2d38:	uxth	r3, r3
    2d3c:	bl	0 <flatcc_verify_field>
    2d40:	str	r0, [fp, #-12]
    2d44:	cmp	r0, #0
    2d48:	beq	2d58 <MyGame_Example_Monster_verify_table+0x5d4>
    2d4c:	ldr	r0, [fp, #-12]
    2d50:	str	r0, [fp, #-4]
    2d54:	b	2f48 <MyGame_Example_Monster_verify_table+0x7c4>
    2d58:	ldr	r0, [fp, #-8]
    2d5c:	movw	r1, #25
    2d60:	uxth	r1, r1
    2d64:	movw	r2, #4
    2d68:	movw	r3, #4
    2d6c:	uxth	r3, r3
    2d70:	bl	0 <flatcc_verify_field>
    2d74:	str	r0, [fp, #-12]
    2d78:	cmp	r0, #0
    2d7c:	beq	2d8c <MyGame_Example_Monster_verify_table+0x608>
    2d80:	ldr	r0, [fp, #-12]
    2d84:	str	r0, [fp, #-4]
    2d88:	b	2f48 <MyGame_Example_Monster_verify_table+0x7c4>
    2d8c:	ldr	r0, [fp, #-8]
    2d90:	movw	r1, #26
    2d94:	uxth	r1, r1
    2d98:	movw	r2, #4
    2d9c:	movw	r3, #4
    2da0:	uxth	r3, r3
    2da4:	bl	0 <flatcc_verify_field>
    2da8:	str	r0, [fp, #-12]
    2dac:	cmp	r0, #0
    2db0:	beq	2dc0 <MyGame_Example_Monster_verify_table+0x63c>
    2db4:	ldr	r0, [fp, #-12]
    2db8:	str	r0, [fp, #-4]
    2dbc:	b	2f48 <MyGame_Example_Monster_verify_table+0x7c4>
    2dc0:	ldr	r0, [fp, #-8]
    2dc4:	movw	r1, #27
    2dc8:	uxth	r1, r1
    2dcc:	movw	r2, #4
    2dd0:	movw	r3, #4
    2dd4:	uxth	r3, r3
    2dd8:	bl	0 <flatcc_verify_field>
    2ddc:	str	r0, [fp, #-12]
    2de0:	cmp	r0, #0
    2de4:	beq	2df4 <MyGame_Example_Monster_verify_table+0x670>
    2de8:	ldr	r0, [fp, #-12]
    2dec:	str	r0, [fp, #-4]
    2df0:	b	2f48 <MyGame_Example_Monster_verify_table+0x7c4>
    2df4:	ldr	r0, [fp, #-8]
    2df8:	movw	r1, #30
    2dfc:	uxth	r1, r1
    2e00:	movw	r2, #0
    2e04:	movw	r3, #1
    2e08:	movw	ip, #1
    2e0c:	uxth	ip, ip
    2e10:	str	ip, [sp]
    2e14:	mvn	ip, #0
    2e18:	str	ip, [sp, #4]
    2e1c:	bl	0 <flatcc_verify_vector_field>
    2e20:	str	r0, [fp, #-12]
    2e24:	cmp	r0, #0
    2e28:	beq	2e38 <MyGame_Example_Monster_verify_table+0x6b4>
    2e2c:	ldr	r0, [fp, #-12]
    2e30:	str	r0, [fp, #-4]
    2e34:	b	2f48 <MyGame_Example_Monster_verify_table+0x7c4>
    2e38:	ldr	r0, [pc, #276]	; 2f54 <MyGame_Example_Monster_verify_table+0x7d0>
    2e3c:	ldr	r1, [fp, #-8]
    2e40:	str	r0, [sp, #12]
    2e44:	mov	r0, r1
    2e48:	movw	r1, #32
    2e4c:	uxth	r1, r1
    2e50:	movw	r2, #0
    2e54:	movw	r3, #8
    2e58:	movw	ip, #8
    2e5c:	uxth	ip, ip
    2e60:	str	ip, [sp]
    2e64:	ldr	ip, [sp, #12]
    2e68:	str	ip, [sp, #4]
    2e6c:	bl	0 <flatcc_verify_vector_field>
    2e70:	str	r0, [fp, #-12]
    2e74:	cmp	r0, #0
    2e78:	beq	2e88 <MyGame_Example_Monster_verify_table+0x704>
    2e7c:	ldr	r0, [fp, #-12]
    2e80:	str	r0, [fp, #-4]
    2e84:	b	2f48 <MyGame_Example_Monster_verify_table+0x7c4>
    2e88:	ldr	r0, [pc, #196]	; 2f54 <MyGame_Example_Monster_verify_table+0x7d0>
    2e8c:	ldr	r1, [fp, #-8]
    2e90:	str	r0, [sp, #8]
    2e94:	mov	r0, r1
    2e98:	movw	r1, #33	; 0x21
    2e9c:	uxth	r1, r1
    2ea0:	movw	r2, #0
    2ea4:	movw	r3, #8
    2ea8:	movw	ip, #8
    2eac:	uxth	ip, ip
    2eb0:	str	ip, [sp]
    2eb4:	ldr	ip, [sp, #8]
    2eb8:	str	ip, [sp, #4]
    2ebc:	bl	0 <flatcc_verify_vector_field>
    2ec0:	str	r0, [fp, #-12]
    2ec4:	cmp	r0, #0
    2ec8:	beq	2ed8 <MyGame_Example_Monster_verify_table+0x754>
    2ecc:	ldr	r0, [fp, #-12]
    2ed0:	str	r0, [fp, #-4]
    2ed4:	b	2f48 <MyGame_Example_Monster_verify_table+0x7c4>
    2ed8:	ldr	r0, [fp, #-8]
    2edc:	movw	r1, #34	; 0x22
    2ee0:	uxth	r1, r1
    2ee4:	movw	r2, #0
    2ee8:	movw	r3, #0
    2eec:	movt	r3, #0
    2ef0:	bl	0 <flatcc_verify_table_field>
    2ef4:	str	r0, [fp, #-12]
    2ef8:	cmp	r0, #0
    2efc:	beq	2f0c <MyGame_Example_Monster_verify_table+0x788>
    2f00:	ldr	r0, [fp, #-12]
    2f04:	str	r0, [fp, #-4]
    2f08:	b	2f48 <MyGame_Example_Monster_verify_table+0x7c4>
    2f0c:	ldr	r0, [fp, #-8]
    2f10:	movw	r1, #35	; 0x23
    2f14:	uxth	r1, r1
    2f18:	movw	r2, #0
    2f1c:	movw	r3, #0
    2f20:	movt	r3, #0
    2f24:	bl	0 <flatcc_verify_table_field>
    2f28:	str	r0, [fp, #-12]
    2f2c:	cmp	r0, #0
    2f30:	beq	2f40 <MyGame_Example_Monster_verify_table+0x7bc>
    2f34:	ldr	r0, [fp, #-12]
    2f38:	str	r0, [fp, #-4]
    2f3c:	b	2f48 <MyGame_Example_Monster_verify_table+0x7c4>
    2f40:	movw	r0, #0
    2f44:	str	r0, [fp, #-4]
    2f48:	ldr	r0, [fp, #-4]
    2f4c:	mov	sp, fp
    2f50:	pop	{fp, pc}
    2f54:	.word	0x1fffffff
    2f58:	.word	0x3fffffff

00002f5c <MyGame_Example_Any_union_verifier>:
    2f5c:	push	{fp, lr}
    2f60:	mov	fp, sp
    2f64:	sub	sp, sp, #16
    2f68:	str	r0, [sp, #8]
    2f6c:	ldr	r0, [sp, #8]
    2f70:	ldrb	r0, [r0, #12]
    2f74:	sub	r0, r0, #1
    2f78:	cmp	r0, #3
    2f7c:	str	r0, [sp, #4]
    2f80:	bhi	3004 <MyGame_Example_Any_union_verifier+0xa8>
    2f84:	add	r0, pc, #8
    2f88:	ldr	r1, [sp, #4]
    2f8c:	ldr	r0, [r0, r1, lsl #2]
    2f90:	mov	pc, r0
    2f94:	.word	0x00002fa4
    2f98:	.word	0x00002fbc
    2f9c:	.word	0x00002fd4
    2fa0:	.word	0x00002fec
    2fa4:	ldr	r0, [sp, #8]
    2fa8:	movw	r1, #0
    2fac:	movt	r1, #0
    2fb0:	bl	0 <flatcc_verify_union_table>
    2fb4:	str	r0, [fp, #-4]
    2fb8:	b	300c <MyGame_Example_Any_union_verifier+0xb0>
    2fbc:	ldr	r0, [sp, #8]
    2fc0:	movw	r1, #0
    2fc4:	movt	r1, #0
    2fc8:	bl	0 <flatcc_verify_union_table>
    2fcc:	str	r0, [fp, #-4]
    2fd0:	b	300c <MyGame_Example_Any_union_verifier+0xb0>
    2fd4:	ldr	r0, [sp, #8]
    2fd8:	movw	r1, #0
    2fdc:	movt	r1, #0
    2fe0:	bl	0 <flatcc_verify_union_table>
    2fe4:	str	r0, [fp, #-4]
    2fe8:	b	300c <MyGame_Example_Any_union_verifier+0xb0>
    2fec:	ldr	r0, [sp, #8]
    2ff0:	movw	r1, #0
    2ff4:	movt	r1, #0
    2ff8:	bl	0 <flatcc_verify_union_table>
    2ffc:	str	r0, [fp, #-4]
    3000:	b	300c <MyGame_Example_Any_union_verifier+0xb0>
    3004:	movw	r0, #0
    3008:	str	r0, [fp, #-4]
    300c:	ldr	r0, [fp, #-4]
    3010:	mov	sp, fp
    3014:	pop	{fp, pc}

00003018 <MyGame_Example_Stat_verify_table>:
    3018:	push	{fp, lr}
    301c:	mov	fp, sp
    3020:	sub	sp, sp, #16
    3024:	str	r0, [sp, #8]
    3028:	ldr	r0, [sp, #8]
    302c:	movw	r1, #0
    3030:	uxth	r1, r1
    3034:	movw	r2, #0
    3038:	bl	0 <flatcc_verify_string_field>
    303c:	str	r0, [sp, #4]
    3040:	cmp	r0, #0
    3044:	beq	3054 <MyGame_Example_Stat_verify_table+0x3c>
    3048:	ldr	r0, [sp, #4]
    304c:	str	r0, [fp, #-4]
    3050:	b	30cc <MyGame_Example_Stat_verify_table+0xb4>
    3054:	ldr	r0, [sp, #8]
    3058:	movw	r1, #1
    305c:	uxth	r1, r1
    3060:	movw	r2, #8
    3064:	movw	r3, #8
    3068:	uxth	r3, r3
    306c:	bl	0 <flatcc_verify_field>
    3070:	str	r0, [sp, #4]
    3074:	cmp	r0, #0
    3078:	beq	3088 <MyGame_Example_Stat_verify_table+0x70>
    307c:	ldr	r0, [sp, #4]
    3080:	str	r0, [fp, #-4]
    3084:	b	30cc <MyGame_Example_Stat_verify_table+0xb4>
    3088:	ldr	r0, [sp, #8]
    308c:	movw	r1, #2
    3090:	uxth	r2, r1
    3094:	str	r1, [sp]
    3098:	mov	r1, r2
    309c:	movw	r2, #2
    30a0:	ldr	r3, [sp]
    30a4:	uxth	r3, r3
    30a8:	bl	0 <flatcc_verify_field>
    30ac:	str	r0, [sp, #4]
    30b0:	cmp	r0, #0
    30b4:	beq	30c4 <MyGame_Example_Stat_verify_table+0xac>
    30b8:	ldr	r0, [sp, #4]
    30bc:	str	r0, [fp, #-4]
    30c0:	b	30cc <MyGame_Example_Stat_verify_table+0xb4>
    30c4:	movw	r0, #0
    30c8:	str	r0, [fp, #-4]
    30cc:	ldr	r0, [fp, #-4]
    30d0:	mov	sp, fp
    30d4:	pop	{fp, pc}

000030d8 <MyGame_InParentNamespace_verify_table>:
    30d8:	sub	sp, sp, #4
    30dc:	str	r0, [sp]
    30e0:	movw	r0, #0
    30e4:	add	sp, sp, #4
    30e8:	bx	lr

000030ec <MyGame_Example_TestBase64_verify_table>:
    30ec:	push	{fp, lr}
    30f0:	mov	fp, sp
    30f4:	sub	sp, sp, #32
    30f8:	str	r0, [fp, #-8]
    30fc:	ldr	r0, [fp, #-8]
    3100:	movw	r1, #0
    3104:	uxth	r1, r1
    3108:	movw	r2, #0
    310c:	movw	r3, #1
    3110:	movw	ip, #1
    3114:	uxth	ip, ip
    3118:	str	ip, [sp]
    311c:	mvn	ip, #0
    3120:	str	ip, [sp, #4]
    3124:	bl	0 <flatcc_verify_vector_field>
    3128:	str	r0, [fp, #-12]
    312c:	cmp	r0, #0
    3130:	beq	3140 <MyGame_Example_TestBase64_verify_table+0x54>
    3134:	ldr	r0, [fp, #-12]
    3138:	str	r0, [fp, #-4]
    313c:	b	31e0 <MyGame_Example_TestBase64_verify_table+0xf4>
    3140:	ldr	r0, [fp, #-8]
    3144:	movw	r1, #1
    3148:	uxth	r2, r1
    314c:	str	r1, [sp, #16]
    3150:	mov	r1, r2
    3154:	movw	r2, #0
    3158:	movw	r3, #1
    315c:	ldr	ip, [sp, #16]
    3160:	uxth	lr, ip
    3164:	str	lr, [sp]
    3168:	mvn	lr, #0
    316c:	str	lr, [sp, #4]
    3170:	bl	0 <flatcc_verify_vector_field>
    3174:	str	r0, [fp, #-12]
    3178:	cmp	r0, #0
    317c:	beq	318c <MyGame_Example_TestBase64_verify_table+0xa0>
    3180:	ldr	r0, [fp, #-12]
    3184:	str	r0, [fp, #-4]
    3188:	b	31e0 <MyGame_Example_TestBase64_verify_table+0xf4>
    318c:	ldr	r0, [fp, #-8]
    3190:	movw	r1, #2
    3194:	uxth	r1, r1
    3198:	movw	r2, #0
    319c:	str	r2, [sp, #12]
    31a0:	ldr	r3, [sp, #12]
    31a4:	movw	ip, #1
    31a8:	uxth	ip, ip
    31ac:	str	ip, [sp]
    31b0:	movw	ip, #0
    31b4:	movt	ip, #0
    31b8:	str	ip, [sp, #4]
    31bc:	bl	0 <flatcc_verify_table_as_nested_root>
    31c0:	str	r0, [fp, #-12]
    31c4:	cmp	r0, #0
    31c8:	beq	31d8 <MyGame_Example_TestBase64_verify_table+0xec>
    31cc:	ldr	r0, [fp, #-12]
    31d0:	str	r0, [fp, #-4]
    31d4:	b	31e0 <MyGame_Example_TestBase64_verify_table+0xf4>
    31d8:	movw	r0, #0
    31dc:	str	r0, [fp, #-4]
    31e0:	ldr	r0, [fp, #-4]
    31e4:	mov	sp, fp
    31e8:	pop	{fp, pc}

000031ec <MyGame_Example_TestSimpleTableWithEnum_verify_table>:
    31ec:	push	{fp, lr}
    31f0:	mov	fp, sp
    31f4:	sub	sp, sp, #16
    31f8:	str	r0, [sp, #8]
    31fc:	ldr	r0, [sp, #8]
    3200:	movw	r1, #0
    3204:	uxth	r1, r1
    3208:	movw	r2, #1
    320c:	movw	r3, #1
    3210:	uxth	r3, r3
    3214:	bl	0 <flatcc_verify_field>
    3218:	str	r0, [sp, #4]
    321c:	cmp	r0, #0
    3220:	beq	3230 <MyGame_Example_TestSimpleTableWithEnum_verify_table+0x44>
    3224:	ldr	r0, [sp, #4]
    3228:	str	r0, [fp, #-4]
    322c:	b	32dc <MyGame_Example_TestSimpleTableWithEnum_verify_table+0xf0>
    3230:	ldr	r0, [sp, #8]
    3234:	movw	r1, #1
    3238:	uxth	r2, r1
    323c:	str	r1, [sp]
    3240:	mov	r1, r2
    3244:	movw	r2, #1
    3248:	ldr	r3, [sp]
    324c:	uxth	r3, r3
    3250:	bl	0 <flatcc_verify_field>
    3254:	str	r0, [sp, #4]
    3258:	cmp	r0, #0
    325c:	beq	326c <MyGame_Example_TestSimpleTableWithEnum_verify_table+0x80>
    3260:	ldr	r0, [sp, #4]
    3264:	str	r0, [fp, #-4]
    3268:	b	32dc <MyGame_Example_TestSimpleTableWithEnum_verify_table+0xf0>
    326c:	ldr	r0, [sp, #8]
    3270:	movw	r1, #2
    3274:	uxth	r1, r1
    3278:	movw	r2, #1
    327c:	movw	r3, #1
    3280:	uxth	r3, r3
    3284:	bl	0 <flatcc_verify_field>
    3288:	str	r0, [sp, #4]
    328c:	cmp	r0, #0
    3290:	beq	32a0 <MyGame_Example_TestSimpleTableWithEnum_verify_table+0xb4>
    3294:	ldr	r0, [sp, #4]
    3298:	str	r0, [fp, #-4]
    329c:	b	32dc <MyGame_Example_TestSimpleTableWithEnum_verify_table+0xf0>
    32a0:	ldr	r0, [sp, #8]
    32a4:	movw	r1, #3
    32a8:	uxth	r1, r1
    32ac:	movw	r2, #1
    32b0:	movw	r3, #1
    32b4:	uxth	r3, r3
    32b8:	bl	0 <flatcc_verify_field>
    32bc:	str	r0, [sp, #4]
    32c0:	cmp	r0, #0
    32c4:	beq	32d4 <MyGame_Example_TestSimpleTableWithEnum_verify_table+0xe8>
    32c8:	ldr	r0, [sp, #4]
    32cc:	str	r0, [fp, #-4]
    32d0:	b	32dc <MyGame_Example_TestSimpleTableWithEnum_verify_table+0xf0>
    32d4:	movw	r0, #0
    32d8:	str	r0, [fp, #-4]
    32dc:	ldr	r0, [fp, #-4]
    32e0:	mov	sp, fp
    32e4:	pop	{fp, pc}

000032e8 <MyGame_Example2_Monster_verify_table>:
    32e8:	sub	sp, sp, #4
    32ec:	str	r0, [sp]
    32f0:	movw	r0, #0
    32f4:	add	sp, sp, #4
    32f8:	bx	lr

000032fc <MyGame_Example_Alt_verify_table>:
    32fc:	push	{fp, lr}
    3300:	mov	fp, sp
    3304:	sub	sp, sp, #16
    3308:	str	r0, [sp, #8]
    330c:	ldr	r0, [sp, #8]
    3310:	movw	r1, #0
    3314:	uxth	r1, r1
    3318:	movw	r2, #0
    331c:	movw	r3, #0
    3320:	movt	r3, #0
    3324:	bl	0 <flatcc_verify_table_field>
    3328:	str	r0, [sp, #4]
    332c:	cmp	r0, #0
    3330:	beq	3340 <MyGame_Example_Alt_verify_table+0x44>
    3334:	ldr	r0, [sp, #4]
    3338:	str	r0, [fp, #-4]
    333c:	b	33b0 <MyGame_Example_Alt_verify_table+0xb4>
    3340:	ldr	r0, [sp, #8]
    3344:	movw	r1, #1
    3348:	uxth	r1, r1
    334c:	movw	r2, #0
    3350:	movw	r3, #0
    3354:	movt	r3, #0
    3358:	bl	0 <flatcc_verify_table_field>
    335c:	str	r0, [sp, #4]
    3360:	cmp	r0, #0
    3364:	beq	3374 <MyGame_Example_Alt_verify_table+0x78>
    3368:	ldr	r0, [sp, #4]
    336c:	str	r0, [fp, #-4]
    3370:	b	33b0 <MyGame_Example_Alt_verify_table+0xb4>
    3374:	ldr	r0, [sp, #8]
    3378:	movw	r1, #3
    337c:	uxth	r1, r1
    3380:	movw	r2, #0
    3384:	movw	r3, #0
    3388:	movt	r3, #0
    338c:	bl	0 <flatcc_verify_union_vector_field>
    3390:	str	r0, [sp, #4]
    3394:	cmp	r0, #0
    3398:	beq	33a8 <MyGame_Example_Alt_verify_table+0xac>
    339c:	ldr	r0, [sp, #4]
    33a0:	str	r0, [fp, #-4]
    33a4:	b	33b0 <MyGame_Example_Alt_verify_table+0xb4>
    33a8:	movw	r0, #0
    33ac:	str	r0, [fp, #-4]
    33b0:	ldr	r0, [fp, #-4]
    33b4:	mov	sp, fp
    33b8:	pop	{fp, pc}

000033bc <MyGame_Example_TestJSONPrefix_verify_table>:
    33bc:	push	{fp, lr}
    33c0:	mov	fp, sp
    33c4:	sub	sp, sp, #16
    33c8:	str	r0, [sp, #8]
    33cc:	ldr	r0, [sp, #8]
    33d0:	movw	r1, #0
    33d4:	uxth	r1, r1
    33d8:	movw	r2, #0
    33dc:	movw	r3, #0
    33e0:	movt	r3, #0
    33e4:	bl	0 <flatcc_verify_table_field>
    33e8:	str	r0, [sp, #4]
    33ec:	cmp	r0, #0
    33f0:	beq	3400 <MyGame_Example_TestJSONPrefix_verify_table+0x44>
    33f4:	ldr	r0, [sp, #4]
    33f8:	str	r0, [fp, #-4]
    33fc:	b	3470 <MyGame_Example_TestJSONPrefix_verify_table+0xb4>
    3400:	ldr	r0, [sp, #8]
    3404:	movw	r1, #1
    3408:	uxth	r1, r1
    340c:	movw	r2, #0
    3410:	movw	r3, #0
    3414:	movt	r3, #0
    3418:	bl	0 <flatcc_verify_table_field>
    341c:	str	r0, [sp, #4]
    3420:	cmp	r0, #0
    3424:	beq	3434 <MyGame_Example_TestJSONPrefix_verify_table+0x78>
    3428:	ldr	r0, [sp, #4]
    342c:	str	r0, [fp, #-4]
    3430:	b	3470 <MyGame_Example_TestJSONPrefix_verify_table+0xb4>
    3434:	ldr	r0, [sp, #8]
    3438:	movw	r1, #2
    343c:	uxth	r1, r1
    3440:	movw	r2, #0
    3444:	movw	r3, #0
    3448:	movt	r3, #0
    344c:	bl	0 <flatcc_verify_table_field>
    3450:	str	r0, [sp, #4]
    3454:	cmp	r0, #0
    3458:	beq	3468 <MyGame_Example_TestJSONPrefix_verify_table+0xac>
    345c:	ldr	r0, [sp, #4]
    3460:	str	r0, [fp, #-4]
    3464:	b	3470 <MyGame_Example_TestJSONPrefix_verify_table+0xb4>
    3468:	movw	r0, #0
    346c:	str	r0, [fp, #-4]
    3470:	ldr	r0, [fp, #-4]
    3474:	mov	sp, fp
    3478:	pop	{fp, pc}

0000347c <Fantasy_Movie_verify_table>:
    347c:	push	{fp, lr}
    3480:	mov	fp, sp
    3484:	sub	sp, sp, #16
    3488:	str	r0, [sp, #8]
    348c:	ldr	r0, [sp, #8]
    3490:	movw	r1, #1
    3494:	uxth	r1, r1
    3498:	movw	r2, #0
    349c:	movw	r3, #0
    34a0:	movt	r3, #0
    34a4:	bl	0 <flatcc_verify_union_field>
    34a8:	str	r0, [sp, #4]
    34ac:	cmp	r0, #0
    34b0:	beq	34c0 <Fantasy_Movie_verify_table+0x44>
    34b4:	ldr	r0, [sp, #4]
    34b8:	str	r0, [fp, #-4]
    34bc:	b	3598 <Fantasy_Movie_verify_table+0x11c>
    34c0:	ldr	r0, [sp, #8]
    34c4:	movw	r1, #3
    34c8:	uxth	r1, r1
    34cc:	movw	r2, #0
    34d0:	movw	r3, #0
    34d4:	movt	r3, #0
    34d8:	bl	0 <flatcc_verify_union_field>
    34dc:	str	r0, [sp, #4]
    34e0:	cmp	r0, #0
    34e4:	beq	34f4 <Fantasy_Movie_verify_table+0x78>
    34e8:	ldr	r0, [sp, #4]
    34ec:	str	r0, [fp, #-4]
    34f0:	b	3598 <Fantasy_Movie_verify_table+0x11c>
    34f4:	ldr	r0, [sp, #8]
    34f8:	movw	r1, #5
    34fc:	uxth	r1, r1
    3500:	movw	r2, #0
    3504:	movw	r3, #0
    3508:	movt	r3, #0
    350c:	bl	0 <flatcc_verify_union_field>
    3510:	str	r0, [sp, #4]
    3514:	cmp	r0, #0
    3518:	beq	3528 <Fantasy_Movie_verify_table+0xac>
    351c:	ldr	r0, [sp, #4]
    3520:	str	r0, [fp, #-4]
    3524:	b	3598 <Fantasy_Movie_verify_table+0x11c>
    3528:	ldr	r0, [sp, #8]
    352c:	movw	r1, #7
    3530:	uxth	r1, r1
    3534:	movw	r2, #0
    3538:	movw	r3, #0
    353c:	movt	r3, #0
    3540:	bl	0 <flatcc_verify_union_field>
    3544:	str	r0, [sp, #4]
    3548:	cmp	r0, #0
    354c:	beq	355c <Fantasy_Movie_verify_table+0xe0>
    3550:	ldr	r0, [sp, #4]
    3554:	str	r0, [fp, #-4]
    3558:	b	3598 <Fantasy_Movie_verify_table+0x11c>
    355c:	ldr	r0, [sp, #8]
    3560:	movw	r1, #9
    3564:	uxth	r1, r1
    3568:	movw	r2, #0
    356c:	movw	r3, #0
    3570:	movt	r3, #0
    3574:	bl	0 <flatcc_verify_union_vector_field>
    3578:	str	r0, [sp, #4]
    357c:	cmp	r0, #0
    3580:	beq	3590 <Fantasy_Movie_verify_table+0x114>
    3584:	ldr	r0, [sp, #4]
    3588:	str	r0, [fp, #-4]
    358c:	b	3598 <Fantasy_Movie_verify_table+0x11c>
    3590:	movw	r0, #0
    3594:	str	r0, [fp, #-4]
    3598:	ldr	r0, [fp, #-4]
    359c:	mov	sp, fp
    35a0:	pop	{fp, pc}

000035a4 <MyGame_Example_TestJSONPrefixParsing_verify_table>:
    35a4:	push	{fp, lr}
    35a8:	mov	fp, sp
    35ac:	sub	sp, sp, #16
    35b0:	str	r0, [sp, #8]
    35b4:	ldr	r0, [sp, #8]
    35b8:	movw	r1, #0
    35bc:	uxth	r1, r1
    35c0:	movw	r2, #0
    35c4:	bl	0 <flatcc_verify_string_field>
    35c8:	str	r0, [sp, #4]
    35cc:	cmp	r0, #0
    35d0:	beq	35e0 <MyGame_Example_TestJSONPrefixParsing_verify_table+0x3c>
    35d4:	ldr	r0, [sp, #4]
    35d8:	str	r0, [fp, #-4]
    35dc:	b	3778 <MyGame_Example_TestJSONPrefixParsing_verify_table+0x1d4>
    35e0:	ldr	r0, [sp, #8]
    35e4:	movw	r1, #1
    35e8:	uxth	r1, r1
    35ec:	movw	r2, #4
    35f0:	movw	r3, #4
    35f4:	uxth	r3, r3
    35f8:	bl	0 <flatcc_verify_field>
    35fc:	str	r0, [sp, #4]
    3600:	cmp	r0, #0
    3604:	beq	3614 <MyGame_Example_TestJSONPrefixParsing_verify_table+0x70>
    3608:	ldr	r0, [sp, #4]
    360c:	str	r0, [fp, #-4]
    3610:	b	3778 <MyGame_Example_TestJSONPrefixParsing_verify_table+0x1d4>
    3614:	ldr	r0, [sp, #8]
    3618:	movw	r1, #2
    361c:	uxth	r1, r1
    3620:	movw	r2, #0
    3624:	bl	0 <flatcc_verify_string_field>
    3628:	str	r0, [sp, #4]
    362c:	cmp	r0, #0
    3630:	beq	3640 <MyGame_Example_TestJSONPrefixParsing_verify_table+0x9c>
    3634:	ldr	r0, [sp, #4]
    3638:	str	r0, [fp, #-4]
    363c:	b	3778 <MyGame_Example_TestJSONPrefixParsing_verify_table+0x1d4>
    3640:	ldr	r0, [sp, #8]
    3644:	movw	r1, #3
    3648:	uxth	r1, r1
    364c:	movw	r2, #8
    3650:	movw	r3, #8
    3654:	uxth	r3, r3
    3658:	bl	0 <flatcc_verify_field>
    365c:	str	r0, [sp, #4]
    3660:	cmp	r0, #0
    3664:	beq	3674 <MyGame_Example_TestJSONPrefixParsing_verify_table+0xd0>
    3668:	ldr	r0, [sp, #4]
    366c:	str	r0, [fp, #-4]
    3670:	b	3778 <MyGame_Example_TestJSONPrefixParsing_verify_table+0x1d4>
    3674:	ldr	r0, [sp, #8]
    3678:	movw	r1, #4
    367c:	uxth	r1, r1
    3680:	movw	r2, #0
    3684:	bl	0 <flatcc_verify_string_field>
    3688:	str	r0, [sp, #4]
    368c:	cmp	r0, #0
    3690:	beq	36a0 <MyGame_Example_TestJSONPrefixParsing_verify_table+0xfc>
    3694:	ldr	r0, [sp, #4]
    3698:	str	r0, [fp, #-4]
    369c:	b	3778 <MyGame_Example_TestJSONPrefixParsing_verify_table+0x1d4>
    36a0:	ldr	r0, [sp, #8]
    36a4:	movw	r1, #5
    36a8:	uxth	r1, r1
    36ac:	movw	r2, #8
    36b0:	movw	r3, #8
    36b4:	uxth	r3, r3
    36b8:	bl	0 <flatcc_verify_field>
    36bc:	str	r0, [sp, #4]
    36c0:	cmp	r0, #0
    36c4:	beq	36d4 <MyGame_Example_TestJSONPrefixParsing_verify_table+0x130>
    36c8:	ldr	r0, [sp, #4]
    36cc:	str	r0, [fp, #-4]
    36d0:	b	3778 <MyGame_Example_TestJSONPrefixParsing_verify_table+0x1d4>
    36d4:	ldr	r0, [sp, #8]
    36d8:	movw	r1, #6
    36dc:	uxth	r1, r1
    36e0:	movw	r2, #4
    36e4:	movw	r3, #4
    36e8:	uxth	r3, r3
    36ec:	bl	0 <flatcc_verify_field>
    36f0:	str	r0, [sp, #4]
    36f4:	cmp	r0, #0
    36f8:	beq	3708 <MyGame_Example_TestJSONPrefixParsing_verify_table+0x164>
    36fc:	ldr	r0, [sp, #4]
    3700:	str	r0, [fp, #-4]
    3704:	b	3778 <MyGame_Example_TestJSONPrefixParsing_verify_table+0x1d4>
    3708:	ldr	r0, [sp, #8]
    370c:	movw	r1, #7
    3710:	uxth	r1, r1
    3714:	movw	r2, #8
    3718:	movw	r3, #8
    371c:	uxth	r3, r3
    3720:	bl	0 <flatcc_verify_field>
    3724:	str	r0, [sp, #4]
    3728:	cmp	r0, #0
    372c:	beq	373c <MyGame_Example_TestJSONPrefixParsing_verify_table+0x198>
    3730:	ldr	r0, [sp, #4]
    3734:	str	r0, [fp, #-4]
    3738:	b	3778 <MyGame_Example_TestJSONPrefixParsing_verify_table+0x1d4>
    373c:	ldr	r0, [sp, #8]
    3740:	movw	r1, #8
    3744:	uxth	r1, r1
    3748:	movw	r2, #4
    374c:	movw	r3, #4
    3750:	uxth	r3, r3
    3754:	bl	0 <flatcc_verify_field>
    3758:	str	r0, [sp, #4]
    375c:	cmp	r0, #0
    3760:	beq	3770 <MyGame_Example_TestJSONPrefixParsing_verify_table+0x1cc>
    3764:	ldr	r0, [sp, #4]
    3768:	str	r0, [fp, #-4]
    376c:	b	3778 <MyGame_Example_TestJSONPrefixParsing_verify_table+0x1d4>
    3770:	movw	r0, #0
    3774:	str	r0, [fp, #-4]
    3778:	ldr	r0, [fp, #-4]
    377c:	mov	sp, fp
    3780:	pop	{fp, pc}

00003784 <MyGame_Example_TestJSONPrefixParsing2_verify_table>:
    3784:	push	{fp, lr}
    3788:	mov	fp, sp
    378c:	sub	sp, sp, #16
    3790:	str	r0, [sp, #8]
    3794:	ldr	r0, [sp, #8]
    3798:	movw	r1, #0
    379c:	uxth	r1, r1
    37a0:	movw	r2, #8
    37a4:	movw	r3, #8
    37a8:	uxth	r3, r3
    37ac:	bl	0 <flatcc_verify_field>
    37b0:	str	r0, [sp, #4]
    37b4:	cmp	r0, #0
    37b8:	beq	37c8 <MyGame_Example_TestJSONPrefixParsing2_verify_table+0x44>
    37bc:	ldr	r0, [sp, #4]
    37c0:	str	r0, [fp, #-4]
    37c4:	b	3804 <MyGame_Example_TestJSONPrefixParsing2_verify_table+0x80>
    37c8:	ldr	r0, [sp, #8]
    37cc:	movw	r1, #1
    37d0:	uxth	r1, r1
    37d4:	movw	r2, #4
    37d8:	movw	r3, #4
    37dc:	uxth	r3, r3
    37e0:	bl	0 <flatcc_verify_field>
    37e4:	str	r0, [sp, #4]
    37e8:	cmp	r0, #0
    37ec:	beq	37fc <MyGame_Example_TestJSONPrefixParsing2_verify_table+0x78>
    37f0:	ldr	r0, [sp, #4]
    37f4:	str	r0, [fp, #-4]
    37f8:	b	3804 <MyGame_Example_TestJSONPrefixParsing2_verify_table+0x80>
    37fc:	movw	r0, #0
    3800:	str	r0, [fp, #-4]
    3804:	ldr	r0, [fp, #-4]
    3808:	mov	sp, fp
    380c:	pop	{fp, pc}

00003810 <MyGame_Example_TestJSONPrefixParsing3_verify_table>:
    3810:	push	{fp, lr}
    3814:	mov	fp, sp
    3818:	sub	sp, sp, #16
    381c:	str	r0, [sp, #8]
    3820:	ldr	r0, [sp, #8]
    3824:	movw	r1, #0
    3828:	uxth	r1, r1
    382c:	movw	r2, #8
    3830:	movw	r3, #8
    3834:	uxth	r3, r3
    3838:	bl	0 <flatcc_verify_field>
    383c:	str	r0, [sp, #4]
    3840:	cmp	r0, #0
    3844:	beq	3854 <MyGame_Example_TestJSONPrefixParsing3_verify_table+0x44>
    3848:	ldr	r0, [sp, #4]
    384c:	str	r0, [fp, #-4]
    3850:	b	3890 <MyGame_Example_TestJSONPrefixParsing3_verify_table+0x80>
    3854:	ldr	r0, [sp, #8]
    3858:	movw	r1, #1
    385c:	uxth	r1, r1
    3860:	movw	r2, #4
    3864:	movw	r3, #4
    3868:	uxth	r3, r3
    386c:	bl	0 <flatcc_verify_field>
    3870:	str	r0, [sp, #4]
    3874:	cmp	r0, #0
    3878:	beq	3888 <MyGame_Example_TestJSONPrefixParsing3_verify_table+0x78>
    387c:	ldr	r0, [sp, #4]
    3880:	str	r0, [fp, #-4]
    3884:	b	3890 <MyGame_Example_TestJSONPrefixParsing3_verify_table+0x80>
    3888:	movw	r0, #0
    388c:	str	r0, [fp, #-4]
    3890:	ldr	r0, [fp, #-4]
    3894:	mov	sp, fp
    3898:	pop	{fp, pc}

0000389c <Fantasy_Character_union_verifier>:
    389c:	push	{fp, lr}
    38a0:	mov	fp, sp
    38a4:	sub	sp, sp, #16
    38a8:	str	r0, [sp, #8]
    38ac:	ldr	r0, [sp, #8]
    38b0:	ldrb	r0, [r0, #12]
    38b4:	mov	r1, r0
    38b8:	cmp	r0, #2
    38bc:	str	r1, [sp, #4]
    38c0:	beq	3918 <Fantasy_Character_union_verifier+0x7c>
    38c4:	b	38c8 <Fantasy_Character_union_verifier+0x2c>
    38c8:	ldr	r0, [sp, #4]
    38cc:	cmp	r0, #8
    38d0:	beq	3930 <Fantasy_Character_union_verifier+0x94>
    38d4:	b	38d8 <Fantasy_Character_union_verifier+0x3c>
    38d8:	ldr	r0, [sp, #4]
    38dc:	cmp	r0, #9
    38e0:	beq	394c <Fantasy_Character_union_verifier+0xb0>
    38e4:	b	38e8 <Fantasy_Character_union_verifier+0x4c>
    38e8:	ldr	r0, [sp, #4]
    38ec:	cmp	r0, #10
    38f0:	beq	3968 <Fantasy_Character_union_verifier+0xcc>
    38f4:	b	38f8 <Fantasy_Character_union_verifier+0x5c>
    38f8:	ldr	r0, [sp, #4]
    38fc:	cmp	r0, #11
    3900:	beq	3984 <Fantasy_Character_union_verifier+0xe8>
    3904:	b	3908 <Fantasy_Character_union_verifier+0x6c>
    3908:	ldr	r0, [sp, #4]
    390c:	cmp	r0, #255	; 0xff
    3910:	beq	3994 <Fantasy_Character_union_verifier+0xf8>
    3914:	b	39a4 <Fantasy_Character_union_verifier+0x108>
    3918:	ldr	r0, [sp, #8]
    391c:	movw	r1, #0
    3920:	movt	r1, #0
    3924:	bl	0 <flatcc_verify_union_table>
    3928:	str	r0, [fp, #-4]
    392c:	b	39ac <Fantasy_Character_union_verifier+0x110>
    3930:	ldr	r0, [sp, #8]
    3934:	movw	r1, #2
    3938:	movw	r2, #2
    393c:	uxth	r2, r2
    3940:	bl	0 <flatcc_verify_union_struct>
    3944:	str	r0, [fp, #-4]
    3948:	b	39ac <Fantasy_Character_union_verifier+0x110>
    394c:	ldr	r0, [sp, #8]
    3950:	movw	r1, #4
    3954:	movw	r2, #4
    3958:	uxth	r2, r2
    395c:	bl	0 <flatcc_verify_union_struct>
    3960:	str	r0, [fp, #-4]
    3964:	b	39ac <Fantasy_Character_union_verifier+0x110>
    3968:	ldr	r0, [sp, #8]
    396c:	movw	r1, #4
    3970:	movw	r2, #4
    3974:	uxth	r2, r2
    3978:	bl	0 <flatcc_verify_union_struct>
    397c:	str	r0, [fp, #-4]
    3980:	b	39ac <Fantasy_Character_union_verifier+0x110>
    3984:	ldr	r0, [sp, #8]
    3988:	bl	0 <flatcc_verify_union_string>
    398c:	str	r0, [fp, #-4]
    3990:	b	39ac <Fantasy_Character_union_verifier+0x110>
    3994:	ldr	r0, [sp, #8]
    3998:	bl	0 <flatcc_verify_union_string>
    399c:	str	r0, [fp, #-4]
    39a0:	b	39ac <Fantasy_Character_union_verifier+0x110>
    39a4:	movw	r0, #0
    39a8:	str	r0, [fp, #-4]
    39ac:	ldr	r0, [fp, #-4]
    39b0:	mov	sp, fp
    39b4:	pop	{fp, pc}

000039b8 <Fantasy_Attacker_verify_table>:
    39b8:	push	{fp, lr}
    39bc:	mov	fp, sp
    39c0:	sub	sp, sp, #16
    39c4:	str	r0, [sp, #8]
    39c8:	ldr	r0, [sp, #8]
    39cc:	movw	r1, #0
    39d0:	uxth	r1, r1
    39d4:	movw	r2, #4
    39d8:	movw	r3, #4
    39dc:	uxth	r3, r3
    39e0:	bl	0 <flatcc_verify_field>
    39e4:	str	r0, [sp, #4]
    39e8:	cmp	r0, #0
    39ec:	beq	39fc <Fantasy_Attacker_verify_table+0x44>
    39f0:	ldr	r0, [sp, #4]
    39f4:	str	r0, [fp, #-4]
    39f8:	b	3a04 <Fantasy_Attacker_verify_table+0x4c>
    39fc:	movw	r0, #0
    3a00:	str	r0, [fp, #-4]
    3a04:	ldr	r0, [fp, #-4]
    3a08:	mov	sp, fp
    3a0c:	pop	{fp, pc}
