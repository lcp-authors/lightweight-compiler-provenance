
../repos/stcorp-coda-3a25f25/CMakeFiles/coda.dir/libcoda/pcre/pcre_study.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <find_minlength>:
       0:	mov	ip, sp
       4:	sub	sp, sp, #80	; 0x50
       8:	str	ip, [sp, #8]
       c:	str	lr, [sp, #12]
      10:	str	r4, [sp, #36]	; 0x24
      14:	str	r5, [sp, #40]	; 0x28
      18:	str	r6, [sp, #44]	; 0x2c
      1c:	str	r7, [sp, #48]	; 0x30
      20:	str	r8, [sp, #52]	; 0x34
      24:	str	r9, [sp, #56]	; 0x38
      28:	str	sl, [sp, #60]	; 0x3c
      2c:	str	fp, [sp, #64]	; 0x40
      30:	ldr	ip, [ip, #4]
      34:	str	ip, [sp, #20]
      38:	ldr	ip, [sp, #8]
      3c:	ldr	r7, [ip]
      40:	mov	r4, r3
      44:	str	r2, [sp, #16]
      48:	mov	r5, r0
      4c:	mvn	r0, #0
      50:	str	r0, [sp, #24]
      54:	and	r3, r4, #2048	; 0x800
      58:	cmp	r3, #0
      5c:	movne	ip, #1
      60:	moveq	ip, #0
      64:	str	ip, [sp, #32]
      68:	mov	r9, #0
      6c:	mov	r8, #0
      70:	add	r6, r1, #3
      74:	ldr	r0, [sp, #20]
      78:	ldr	ip, [r0]
      7c:	add	r3, ip, #1
      80:	str	r3, [r0]
      84:	cmp	ip, #1000	; 0x3e8
      88:	ble	94 <find_minlength+0x94>
      8c:	mvn	r0, #0
      90:	b	a90 <find_minlength+0xa90>
      94:	ldrb	r2, [r1]
      98:	cmp	r2, #133	; 0x85
      9c:	beq	b4 <find_minlength+0xb4>
      a0:	ldrb	r3, [r1]
      a4:	cmp	r3, #138	; 0x8a
      a8:	moveq	ip, #1
      ac:	movne	ip, #0
      b0:	b	b8 <find_minlength+0xb8>
      b4:	mov	ip, #1
      b8:	cmp	ip, #0
      bc:	bne	d4 <find_minlength+0xd4>
      c0:	ldrb	r3, [r1]
      c4:	cmp	r3, #134	; 0x86
      c8:	moveq	ip, #1
      cc:	movne	ip, #0
      d0:	b	d8 <find_minlength+0xd8>
      d4:	mov	ip, #1
      d8:	cmp	ip, #0
      dc:	bne	f4 <find_minlength+0xf4>
      e0:	ldrb	r0, [r1]
      e4:	cmp	r0, #139	; 0x8b
      e8:	moveq	r2, #1
      ec:	movne	r2, #0
      f0:	b	f8 <find_minlength+0xf8>
      f4:	mov	r2, #1
      f8:	cmp	r2, #0
      fc:	beq	104 <find_minlength+0x104>
     100:	add	r6, r6, #2
     104:	ldrb	r0, [r6]
     108:	and	r3, r0, #255	; 0xff
     10c:	mov	ip, r3
     110:	cmp	ip, #162	; 0xa2
     114:	bcs	a8c <find_minlength+0xa8c>
     118:	add	pc, pc, ip, lsl #2
     11c:	nop	{0}
     120:	b	424 <find_minlength+0x424>
     124:	b	4a8 <find_minlength+0x4a8>
     128:	b	4a8 <find_minlength+0x4a8>
     12c:	b	a7c <find_minlength+0xa7c>
     130:	b	4a8 <find_minlength+0x4a8>
     134:	b	4a8 <find_minlength+0x4a8>
     138:	b	5b0 <find_minlength+0x5b0>
     13c:	b	5b0 <find_minlength+0x5b0>
     140:	b	5b0 <find_minlength+0x5b0>
     144:	b	5b0 <find_minlength+0x5b0>
     148:	b	5b0 <find_minlength+0x5b0>
     14c:	b	5b0 <find_minlength+0x5b0>
     150:	b	5b0 <find_minlength+0x5b0>
     154:	b	5b0 <find_minlength+0x5b0>
     158:	b	5c8 <find_minlength+0x5c8>
     15c:	b	5ac <find_minlength+0x5ac>
     160:	b	5ac <find_minlength+0x5ac>
     164:	b	5bc <find_minlength+0x5bc>
     168:	b	5b0 <find_minlength+0x5b0>
     16c:	b	5b0 <find_minlength+0x5b0>
     170:	b	5b0 <find_minlength+0x5b0>
     174:	b	5b0 <find_minlength+0x5b0>
     178:	b	5b0 <find_minlength+0x5b0>
     17c:	b	4a8 <find_minlength+0x4a8>
     180:	b	4a8 <find_minlength+0x4a8>
     184:	b	4a8 <find_minlength+0x4a8>
     188:	b	4a8 <find_minlength+0x4a8>
     18c:	b	4a8 <find_minlength+0x4a8>
     190:	b	4a8 <find_minlength+0x4a8>
     194:	b	4f0 <find_minlength+0x4f0>
     198:	b	4f0 <find_minlength+0x4f0>
     19c:	b	4f0 <find_minlength+0x4f0>
     1a0:	b	4f0 <find_minlength+0x4f0>
     1a4:	b	a54 <find_minlength+0xa54>
     1a8:	b	a54 <find_minlength+0xa54>
     1ac:	b	4f0 <find_minlength+0x4f0>
     1b0:	b	4f0 <find_minlength+0x4f0>
     1b4:	b	a54 <find_minlength+0xa54>
     1b8:	b	a54 <find_minlength+0xa54>
     1bc:	b	a54 <find_minlength+0xa54>
     1c0:	b	a54 <find_minlength+0xa54>
     1c4:	b	540 <find_minlength+0x540>
     1c8:	b	a54 <find_minlength+0xa54>
     1cc:	b	4f0 <find_minlength+0x4f0>
     1d0:	b	a54 <find_minlength+0xa54>
     1d4:	b	a54 <find_minlength+0xa54>
     1d8:	b	a54 <find_minlength+0xa54>
     1dc:	b	a54 <find_minlength+0xa54>
     1e0:	b	4f0 <find_minlength+0x4f0>
     1e4:	b	4f0 <find_minlength+0x4f0>
     1e8:	b	a54 <find_minlength+0xa54>
     1ec:	b	a54 <find_minlength+0xa54>
     1f0:	b	a54 <find_minlength+0xa54>
     1f4:	b	a54 <find_minlength+0xa54>
     1f8:	b	540 <find_minlength+0x540>
     1fc:	b	a54 <find_minlength+0xa54>
     200:	b	4f0 <find_minlength+0x4f0>
     204:	b	a54 <find_minlength+0xa54>
     208:	b	a54 <find_minlength+0xa54>
     20c:	b	a54 <find_minlength+0xa54>
     210:	b	a54 <find_minlength+0xa54>
     214:	b	4f0 <find_minlength+0x4f0>
     218:	b	4f0 <find_minlength+0x4f0>
     21c:	b	a54 <find_minlength+0xa54>
     220:	b	a54 <find_minlength+0xa54>
     224:	b	a54 <find_minlength+0xa54>
     228:	b	a54 <find_minlength+0xa54>
     22c:	b	540 <find_minlength+0x540>
     230:	b	a54 <find_minlength+0xa54>
     234:	b	4f0 <find_minlength+0x4f0>
     238:	b	a54 <find_minlength+0xa54>
     23c:	b	a54 <find_minlength+0xa54>
     240:	b	a54 <find_minlength+0xa54>
     244:	b	a54 <find_minlength+0xa54>
     248:	b	4f0 <find_minlength+0x4f0>
     24c:	b	4f0 <find_minlength+0x4f0>
     250:	b	a54 <find_minlength+0xa54>
     254:	b	a54 <find_minlength+0xa54>
     258:	b	a54 <find_minlength+0xa54>
     25c:	b	a54 <find_minlength+0xa54>
     260:	b	540 <find_minlength+0x540>
     264:	b	a54 <find_minlength+0xa54>
     268:	b	4f0 <find_minlength+0x4f0>
     26c:	b	a54 <find_minlength+0xa54>
     270:	b	a54 <find_minlength+0xa54>
     274:	b	5d4 <find_minlength+0x5d4>
     278:	b	5d4 <find_minlength+0x5d4>
     27c:	b	4fc <find_minlength+0x4fc>
     280:	b	4fc <find_minlength+0x4fc>
     284:	b	5d4 <find_minlength+0x5d4>
     288:	b	5d4 <find_minlength+0x5d4>
     28c:	b	614 <find_minlength+0x614>
     290:	b	614 <find_minlength+0x614>
     294:	b	558 <find_minlength+0x558>
     298:	b	5d4 <find_minlength+0x5d4>
     29c:	b	4fc <find_minlength+0x4fc>
     2a0:	b	5d4 <find_minlength+0x5d4>
     2a4:	b	614 <find_minlength+0x614>
     2a8:	b	a8c <find_minlength+0xa8c>
     2ac:	b	a8c <find_minlength+0xa8c>
     2b0:	b	a8c <find_minlength+0xa8c>
     2b4:	b	a8c <find_minlength+0xa8c>
     2b8:	b	a8c <find_minlength+0xa8c>
     2bc:	b	a8c <find_minlength+0xa8c>
     2c0:	b	a8c <find_minlength+0xa8c>
     2c4:	b	a8c <find_minlength+0xa8c>
     2c8:	b	a8c <find_minlength+0xa8c>
     2cc:	b	a8c <find_minlength+0xa8c>
     2d0:	b	a8c <find_minlength+0xa8c>
     2d4:	b	a8c <find_minlength+0xa8c>
     2d8:	b	654 <find_minlength+0x654>
     2dc:	b	654 <find_minlength+0x654>
     2e0:	b	a8c <find_minlength+0xa8c>
     2e4:	b	81c <find_minlength+0x81c>
     2e8:	b	81c <find_minlength+0x81c>
     2ec:	b	6d4 <find_minlength+0x6d4>
     2f0:	b	6d4 <find_minlength+0x6d4>
     2f4:	b	990 <find_minlength+0x990>
     2f8:	b	4a8 <find_minlength+0x4a8>
     2fc:	b	424 <find_minlength+0x424>
     300:	b	424 <find_minlength+0x424>
     304:	b	424 <find_minlength+0x424>
     308:	b	424 <find_minlength+0x424>
     30c:	b	424 <find_minlength+0x424>
     310:	b	4a8 <find_minlength+0x4a8>
     314:	b	48c <find_minlength+0x48c>
     318:	b	48c <find_minlength+0x48c>
     31c:	b	48c <find_minlength+0x48c>
     320:	b	48c <find_minlength+0x48c>
     324:	b	3cc <find_minlength+0x3cc>
     328:	b	3cc <find_minlength+0x3cc>
     32c:	b	3cc <find_minlength+0x3cc>
     330:	b	3cc <find_minlength+0x3cc>
     334:	b	3cc <find_minlength+0x3cc>
     338:	b	3cc <find_minlength+0x3cc>
     33c:	b	3a8 <find_minlength+0x3a8>
     340:	b	3cc <find_minlength+0x3cc>
     344:	b	3cc <find_minlength+0x3cc>
     348:	b	3cc <find_minlength+0x3cc>
     34c:	b	3cc <find_minlength+0x3cc>
     350:	b	3a8 <find_minlength+0x3a8>
     354:	b	4a8 <find_minlength+0x4a8>
     358:	b	4a8 <find_minlength+0x4a8>
     35c:	b	4a8 <find_minlength+0x4a8>
     360:	b	4a8 <find_minlength+0x4a8>
     364:	b	4a8 <find_minlength+0x4a8>
     368:	b	4bc <find_minlength+0x4bc>
     36c:	b	4bc <find_minlength+0x4bc>
     370:	b	4bc <find_minlength+0x4bc>
     374:	b	a64 <find_minlength+0xa64>
     378:	b	a7c <find_minlength+0xa7c>
     37c:	b	a64 <find_minlength+0xa64>
     380:	b	a7c <find_minlength+0xa7c>
     384:	b	a64 <find_minlength+0xa64>
     388:	b	a7c <find_minlength+0xa7c>
     38c:	b	a64 <find_minlength+0xa64>
     390:	b	a7c <find_minlength+0xa7c>
     394:	b	a7c <find_minlength+0xa7c>
     398:	b	41c <find_minlength+0x41c>
     39c:	b	41c <find_minlength+0x41c>
     3a0:	b	a7c <find_minlength+0xa7c>
     3a4:	b	4bc <find_minlength+0x4bc>
     3a8:	ldrb	r2, [r6, #2]
     3ac:	ldrb	r3, [r6, #1]
     3b0:	orr	r1, r2, r3, lsl #8
     3b4:	add	r2, r6, r1
     3b8:	ldrb	r1, [r2]
     3bc:	cmp	r1, #119	; 0x77
     3c0:	beq	3cc <find_minlength+0x3cc>
     3c4:	add	r6, r2, #3
     3c8:	b	104 <find_minlength+0x104>
     3cc:	ldr	ip, [sp, #20]
     3d0:	str	ip, [sp, #4]
     3d4:	str	r7, [sp]
     3d8:	mov	r3, r4
     3dc:	ldr	r2, [sp, #16]
     3e0:	mov	r1, r6
     3e4:	mov	r0, r5
     3e8:	bl	0 <find_minlength>
     3ec:	cmp	r0, #0
     3f0:	blt	a90 <find_minlength+0xa90>
     3f4:	add	r8, r8, r0
     3f8:	ldrb	r0, [r6, #2]
     3fc:	ldrb	ip, [r6, #1]
     400:	orr	r2, r0, ip, lsl #8
     404:	add	r6, r6, r2
     408:	ldrb	ip, [r6]
     40c:	cmp	ip, #119	; 0x77
     410:	beq	3f8 <find_minlength+0x3f8>
     414:	add	r6, r6, #3
     418:	b	104 <find_minlength+0x104>
     41c:	mvn	r0, #0
     420:	b	a90 <find_minlength+0xa90>
     424:	ldr	r2, [sp, #24]
     428:	cmp	r2, #0
     42c:	blt	45c <find_minlength+0x45c>
     430:	cmp	r9, #0
     434:	bne	454 <find_minlength+0x454>
     438:	cmp	r8, r2
     43c:	movlt	r1, #1
     440:	movge	r1, #0
     444:	cmp	r1, #0
     448:	movne	ip, #1
     44c:	moveq	ip, #0
     450:	b	460 <find_minlength+0x460>
     454:	mov	ip, #0
     458:	b	460 <find_minlength+0x460>
     45c:	mov	ip, #1
     460:	cmp	ip, #0
     464:	beq	46c <find_minlength+0x46c>
     468:	str	r8, [sp, #24]
     46c:	cmp	r3, #119	; 0x77
     470:	beq	47c <find_minlength+0x47c>
     474:	ldr	r0, [sp, #24]
     478:	b	a90 <find_minlength+0xa90>
     47c:	add	r6, r6, #3
     480:	mov	r8, #0
     484:	mov	r9, #0
     488:	b	104 <find_minlength+0x104>
     48c:	ldrb	r3, [r6, #2]
     490:	ldrb	r2, [r6, #1]
     494:	orr	r1, r3, r2, lsl #8
     498:	add	r6, r6, r1
     49c:	ldrb	r2, [r6]
     4a0:	cmp	r2, #119	; 0x77
     4a4:	beq	48c <find_minlength+0x48c>
     4a8:	ldr	r1, [pc, #1552]	; ac0 <find_minlength+0xac0>
     4ac:	ldrb	ip, [r6]
     4b0:	ldrb	r2, [r1, ip]
     4b4:	add	r6, r6, r2
     4b8:	b	104 <find_minlength+0x104>
     4bc:	ldr	r0, [pc, #1532]	; ac0 <find_minlength+0xac0>
     4c0:	ldrb	r1, [r6]
     4c4:	ldrb	r3, [r0, r1]
     4c8:	add	ip, r6, r3
     4cc:	ldrb	r2, [ip, #2]
     4d0:	ldrb	r3, [ip, #1]
     4d4:	orr	r2, r2, r3, lsl #8
     4d8:	add	ip, ip, r2
     4dc:	ldrb	r0, [ip]
     4e0:	cmp	r0, #119	; 0x77
     4e4:	beq	4cc <find_minlength+0x4cc>
     4e8:	add	r6, ip, #3
     4ec:	b	104 <find_minlength+0x104>
     4f0:	add	r8, r8, #1
     4f4:	add	r6, r6, #2
     4f8:	b	104 <find_minlength+0x104>
     4fc:	add	r8, r8, #1
     500:	ldrb	r0, [r6, #1]
     504:	cmp	r0, #16
     508:	beq	520 <find_minlength+0x520>
     50c:	ldrb	r1, [r6, #1]
     510:	cmp	r1, #15
     514:	moveq	ip, #1
     518:	movne	ip, #0
     51c:	b	524 <find_minlength+0x524>
     520:	mov	ip, #1
     524:	cmp	ip, #0
     528:	bne	534 <find_minlength+0x534>
     52c:	mov	r0, #2
     530:	b	538 <find_minlength+0x538>
     534:	mov	r0, #4
     538:	add	r6, r6, r0
     53c:	b	104 <find_minlength+0x104>
     540:	ldrb	r3, [r6, #2]
     544:	ldrb	r1, [r6, #1]
     548:	orr	r0, r3, r1, lsl #8
     54c:	add	r8, r8, r0
     550:	add	r6, r6, #4
     554:	b	104 <find_minlength+0x104>
     558:	ldrb	r2, [r6, #2]
     55c:	ldrb	r0, [r6, #1]
     560:	orr	r1, r2, r0, lsl #8
     564:	add	r8, r8, r1
     568:	ldrb	r3, [r6, #3]
     56c:	cmp	r3, #16
     570:	beq	588 <find_minlength+0x588>
     574:	ldrb	r1, [r6, #3]
     578:	cmp	r1, #15
     57c:	moveq	r3, #1
     580:	movne	r3, #0
     584:	b	58c <find_minlength+0x58c>
     588:	mov	r3, #1
     58c:	cmp	r3, #0
     590:	bne	59c <find_minlength+0x59c>
     594:	mov	ip, #0
     598:	b	5a0 <find_minlength+0x5a0>
     59c:	mov	ip, #2
     5a0:	add	r0, r6, ip
     5a4:	add	r6, r0, #4
     5a8:	b	104 <find_minlength+0x104>
     5ac:	add	r6, r6, #2
     5b0:	add	r8, r8, #1
     5b4:	add	r6, r6, #1
     5b8:	b	104 <find_minlength+0x104>
     5bc:	add	r8, r8, #1
     5c0:	add	r6, r6, #1
     5c4:	b	104 <find_minlength+0x104>
     5c8:	add	r8, r8, #1
     5cc:	add	r6, r6, #1
     5d0:	b	104 <find_minlength+0x104>
     5d4:	ldrb	r1, [r6, #1]
     5d8:	cmp	r1, #16
     5dc:	beq	5f4 <find_minlength+0x5f4>
     5e0:	ldrb	r0, [r6, #1]
     5e4:	cmp	r0, #15
     5e8:	moveq	r1, #1
     5ec:	movne	r1, #0
     5f0:	b	5f8 <find_minlength+0x5f8>
     5f4:	mov	r1, #1
     5f8:	cmp	r1, #0
     5fc:	beq	604 <find_minlength+0x604>
     600:	add	r6, r6, #2
     604:	ldr	ip, [pc, #1204]	; ac0 <find_minlength+0xac0>
     608:	ldrb	r1, [ip, r3]
     60c:	add	r6, r6, r1
     610:	b	104 <find_minlength+0x104>
     614:	ldrb	r0, [r6, #3]
     618:	cmp	r0, #16
     61c:	beq	634 <find_minlength+0x634>
     620:	ldrb	r1, [r6, #3]
     624:	cmp	r1, #15
     628:	moveq	ip, #1
     62c:	movne	ip, #0
     630:	b	638 <find_minlength+0x638>
     634:	mov	ip, #1
     638:	cmp	ip, #0
     63c:	beq	644 <find_minlength+0x644>
     640:	add	r6, r6, #2
     644:	ldr	r0, [pc, #1140]	; ac0 <find_minlength+0xac0>
     648:	ldrb	r3, [r0, r3]
     64c:	add	r6, r6, r3
     650:	b	104 <find_minlength+0x104>
     654:	ldr	r1, [pc, #1120]	; abc <find_minlength+0xabc>
     658:	ldrb	r2, [r1]
     65c:	add	r6, r6, r2
     660:	ldrb	ip, [r6]
     664:	sub	r3, ip, #98	; 0x62
     668:	cmp	r3, #12
     66c:	bcs	6cc <find_minlength+0x6cc>
     670:	add	pc, pc, r3, lsl #2
     674:	nop	{0}
     678:	b	6ac <find_minlength+0x6ac>
     67c:	b	6ac <find_minlength+0x6ac>
     680:	b	6a8 <find_minlength+0x6a8>
     684:	b	6a8 <find_minlength+0x6a8>
     688:	b	6ac <find_minlength+0x6ac>
     68c:	b	6ac <find_minlength+0x6ac>
     690:	b	6b4 <find_minlength+0x6b4>
     694:	b	6b4 <find_minlength+0x6b4>
     698:	b	6ac <find_minlength+0x6ac>
     69c:	b	6a8 <find_minlength+0x6a8>
     6a0:	b	6ac <find_minlength+0x6ac>
     6a4:	b	6b4 <find_minlength+0x6b4>
     6a8:	add	r8, r8, #1
     6ac:	add	r6, r6, #1
     6b0:	b	104 <find_minlength+0x104>
     6b4:	ldrb	r3, [r6, #2]
     6b8:	ldrb	r2, [r6, #1]
     6bc:	orr	r3, r3, r2, lsl #8
     6c0:	add	r8, r8, r3
     6c4:	add	r6, r6, #5
     6c8:	b	104 <find_minlength+0x104>
     6cc:	add	r8, r8, #1
     6d0:	b	104 <find_minlength+0x104>
     6d4:	and	r1, r4, #33554432	; 0x2000000
     6d8:	cmp	r1, #0
     6dc:	bne	810 <find_minlength+0x810>
     6e0:	ldrb	r2, [r6, #4]
     6e4:	ldrb	r1, [r6, #3]
     6e8:	orr	r1, r2, r1, lsl #8
     6ec:	str	r1, [sp, #28]
     6f0:	ldrb	r2, [r6, #2]
     6f4:	ldrb	r1, [r6, #1]
     6f8:	orr	r1, r2, r1, lsl #8
     6fc:	ldrh	r2, [r5, #36]	; 0x24
     700:	ldrh	r0, [r5, #34]	; 0x22
     704:	add	r3, r5, r0
     708:	mla	fp, r1, r2, r3
     70c:	mvn	sl, #-2147483648	; 0x80000000
     710:	ldr	r0, [sp, #28]
     714:	sub	r1, r0, #1
     718:	str	r1, [sp, #28]
     71c:	cmp	r0, #0
     720:	ble	814 <find_minlength+0x814>
     724:	ldrb	r2, [fp, #1]
     728:	ldrb	ip, [fp]
     72c:	orr	r2, r2, ip, lsl #8
     730:	ldr	r1, [sp, #32]
     734:	ldr	r0, [sp, #16]
     738:	bl	0 <coda__pcre_find_bracket>
     73c:	mov	r1, r0
     740:	cmp	r1, #0
     744:	bne	750 <find_minlength+0x750>
     748:	mvn	r0, #1
     74c:	b	a90 <find_minlength+0xa90>
     750:	ldrb	r2, [r0, #2]
     754:	ldrb	r3, [r0, #1]
     758:	orr	r2, r2, r3, lsl #8
     75c:	add	r0, r0, r2
     760:	ldrb	r2, [r0]
     764:	cmp	r2, #119	; 0x77
     768:	beq	750 <find_minlength+0x750>
     76c:	cmp	r6, r1
     770:	bhi	77c <find_minlength+0x77c>
     774:	mov	r3, #0
     778:	b	788 <find_minlength+0x788>
     77c:	cmp	r6, r0
     780:	movcc	r3, #1
     784:	movcs	r3, #0
     788:	cmp	r3, #0
     78c:	bne	804 <find_minlength+0x804>
     790:	mov	ip, r7
     794:	cmp	ip, #0
     798:	beq	7b0 <find_minlength+0x7b0>
     79c:	ldr	r2, [ip, #4]
     7a0:	cmp	r2, r1
     7a4:	beq	7b0 <find_minlength+0x7b0>
     7a8:	ldr	ip, [ip]
     7ac:	b	794 <find_minlength+0x794>
     7b0:	cmp	ip, #0
     7b4:	bne	7f8 <find_minlength+0x7f8>
     7b8:	str	r7, [sp, #72]	; 0x48
     7bc:	str	r1, [sp, #76]	; 0x4c
     7c0:	add	r3, sp, #72	; 0x48
     7c4:	ldr	ip, [sp, #20]
     7c8:	str	ip, [sp, #4]
     7cc:	str	r3, [sp]
     7d0:	mov	r3, r4
     7d4:	ldr	r2, [sp, #16]
     7d8:	mov	r0, r5
     7dc:	bl	0 <find_minlength>
     7e0:	cmp	r0, sl
     7e4:	bge	7ec <find_minlength+0x7ec>
     7e8:	mov	sl, r0
     7ec:	ldrh	r0, [r5, #36]	; 0x24
     7f0:	add	fp, fp, r0
     7f4:	b	710 <find_minlength+0x710>
     7f8:	mov	sl, #0
     7fc:	mov	r9, #1
     800:	b	814 <find_minlength+0x814>
     804:	mov	sl, #0
     808:	mov	r9, #1
     80c:	b	814 <find_minlength+0x814>
     810:	mov	sl, #0
     814:	add	r6, r6, #5
     818:	b	910 <find_minlength+0x910>
     81c:	and	r0, r4, #33554432	; 0x2000000
     820:	cmp	r0, #0
     824:	bne	908 <find_minlength+0x908>
     828:	ldrb	r0, [r6, #2]
     82c:	ldrb	ip, [r6, #1]
     830:	orr	r2, r0, ip, lsl #8
     834:	ldr	r1, [sp, #32]
     838:	ldr	r0, [sp, #16]
     83c:	bl	0 <coda__pcre_find_bracket>
     840:	mov	ip, r0
     844:	cmp	r0, #0
     848:	bne	854 <find_minlength+0x854>
     84c:	mvn	r0, #1
     850:	b	a90 <find_minlength+0xa90>
     854:	ldrb	r1, [ip, #2]
     858:	ldrb	r2, [ip, #1]
     85c:	orr	r1, r1, r2, lsl #8
     860:	add	ip, ip, r1
     864:	ldrb	r1, [ip]
     868:	cmp	r1, #119	; 0x77
     86c:	beq	854 <find_minlength+0x854>
     870:	cmp	r6, r0
     874:	bhi	880 <find_minlength+0x880>
     878:	mov	r1, #0
     87c:	b	88c <find_minlength+0x88c>
     880:	cmp	r6, ip
     884:	movcc	r1, #1
     888:	movcs	r1, #0
     88c:	cmp	r1, #0
     890:	bne	8fc <find_minlength+0x8fc>
     894:	mov	r2, r7
     898:	cmp	r2, #0
     89c:	beq	8b4 <find_minlength+0x8b4>
     8a0:	ldr	r3, [r2, #4]
     8a4:	cmp	r3, r0
     8a8:	beq	8b4 <find_minlength+0x8b4>
     8ac:	ldr	r2, [r2]
     8b0:	b	898 <find_minlength+0x898>
     8b4:	cmp	r2, #0
     8b8:	bne	8f0 <find_minlength+0x8f0>
     8bc:	str	r7, [sp, #72]	; 0x48
     8c0:	str	r0, [sp, #76]	; 0x4c
     8c4:	add	r1, sp, #72	; 0x48
     8c8:	ldr	ip, [sp, #20]
     8cc:	str	ip, [sp, #4]
     8d0:	str	r1, [sp]
     8d4:	mov	r3, r4
     8d8:	ldr	r2, [sp, #16]
     8dc:	mov	r1, r0
     8e0:	mov	r0, r5
     8e4:	bl	0 <find_minlength>
     8e8:	mov	sl, r0
     8ec:	b	90c <find_minlength+0x90c>
     8f0:	mov	sl, #0
     8f4:	mov	r9, #1
     8f8:	b	90c <find_minlength+0x90c>
     8fc:	mov	sl, #0
     900:	mov	r9, #1
     904:	b	90c <find_minlength+0x90c>
     908:	mov	sl, #0
     90c:	add	r6, r6, #3
     910:	ldrb	ip, [r6]
     914:	sub	r3, ip, #98	; 0x62
     918:	cmp	r3, #12
     91c:	bcs	984 <find_minlength+0x984>
     920:	add	pc, pc, r3, lsl #2
     924:	nop	{0}
     928:	b	958 <find_minlength+0x958>
     92c:	b	958 <find_minlength+0x958>
     930:	b	964 <find_minlength+0x964>
     934:	b	964 <find_minlength+0x964>
     938:	b	958 <find_minlength+0x958>
     93c:	b	958 <find_minlength+0x958>
     940:	b	970 <find_minlength+0x970>
     944:	b	970 <find_minlength+0x970>
     948:	b	958 <find_minlength+0x958>
     94c:	b	964 <find_minlength+0x964>
     950:	b	958 <find_minlength+0x958>
     954:	b	970 <find_minlength+0x970>
     958:	mov	r3, #0
     95c:	add	r6, r6, #1
     960:	b	988 <find_minlength+0x988>
     964:	mov	r3, #1
     968:	add	r6, r6, #1
     96c:	b	988 <find_minlength+0x988>
     970:	ldrb	ip, [r6, #2]
     974:	ldrb	r0, [r6, #1]
     978:	orr	r3, ip, r0, lsl #8
     97c:	add	r6, r6, #5
     980:	b	988 <find_minlength+0x988>
     984:	mov	r3, #1
     988:	mla	r8, r3, sl, r8
     98c:	b	104 <find_minlength+0x104>
     990:	ldrb	r0, [r6, #2]
     994:	ldrb	r3, [r6, #1]
     998:	orr	r2, r0, r3, lsl #8
     99c:	ldr	r1, [sp, #16]
     9a0:	add	r2, r1, r2
     9a4:	mov	r1, r2
     9a8:	ldrb	r3, [r2, #2]
     9ac:	ldrb	ip, [r2, #1]
     9b0:	orr	r3, r3, ip, lsl #8
     9b4:	add	r2, r2, r3
     9b8:	ldrb	r3, [r2]
     9bc:	cmp	r3, #119	; 0x77
     9c0:	beq	9a8 <find_minlength+0x9a8>
     9c4:	cmp	r6, r1
     9c8:	bhi	9d4 <find_minlength+0x9d4>
     9cc:	mov	r3, #0
     9d0:	b	9e0 <find_minlength+0x9e0>
     9d4:	cmp	r6, r2
     9d8:	movcc	r3, #1
     9dc:	movcs	r3, #0
     9e0:	cmp	r3, #0
     9e4:	bne	a48 <find_minlength+0xa48>
     9e8:	mov	r0, r7
     9ec:	cmp	r0, #0
     9f0:	beq	a08 <find_minlength+0xa08>
     9f4:	ldr	r2, [r0, #4]
     9f8:	cmp	r2, r1
     9fc:	beq	a08 <find_minlength+0xa08>
     a00:	ldr	r0, [r0]
     a04:	b	9ec <find_minlength+0x9ec>
     a08:	cmp	r0, #0
     a0c:	bne	a40 <find_minlength+0xa40>
     a10:	str	r7, [sp, #72]	; 0x48
     a14:	str	r1, [sp, #76]	; 0x4c
     a18:	add	r2, sp, #72	; 0x48
     a1c:	ldr	ip, [sp, #20]
     a20:	str	ip, [sp, #4]
     a24:	str	r2, [sp]
     a28:	mov	r3, r4
     a2c:	ldr	r2, [sp, #16]
     a30:	mov	r0, r5
     a34:	bl	0 <find_minlength>
     a38:	add	r8, r8, r0
     a3c:	b	a4c <find_minlength+0xa4c>
     a40:	mov	r9, #1
     a44:	b	a4c <find_minlength+0xa4c>
     a48:	mov	r9, #1
     a4c:	add	r6, r6, #3
     a50:	b	104 <find_minlength+0x104>
     a54:	ldr	r2, [pc, #100]	; ac0 <find_minlength+0xac0>
     a58:	ldrb	r2, [r2, r3]
     a5c:	add	r6, r6, r2
     a60:	b	104 <find_minlength+0x104>
     a64:	ldr	ip, [pc, #84]	; ac0 <find_minlength+0xac0>
     a68:	ldrb	r2, [ip, r3]
     a6c:	ldrb	r0, [r6, #1]
     a70:	add	r3, r2, r0
     a74:	add	r6, r6, r3
     a78:	b	104 <find_minlength+0x104>
     a7c:	ldr	r0, [pc, #60]	; ac0 <find_minlength+0xac0>
     a80:	ldrb	r1, [r0, r3]
     a84:	add	r6, r6, r1
     a88:	b	104 <find_minlength+0x104>
     a8c:	mvn	r0, #2
     a90:	ldr	r4, [sp, #36]	; 0x24
     a94:	ldr	r5, [sp, #40]	; 0x28
     a98:	ldr	r6, [sp, #44]	; 0x2c
     a9c:	ldr	r7, [sp, #48]	; 0x30
     aa0:	ldr	r8, [sp, #52]	; 0x34
     aa4:	ldr	r9, [sp, #56]	; 0x38
     aa8:	ldr	sl, [sp, #60]	; 0x3c
     aac:	ldr	fp, [sp, #64]	; 0x40
     ab0:	ldr	lr, [sp, #12]
     ab4:	add	sp, sp, #80	; 0x50
     ab8:	bx	lr
     abc:	.word	0x0000006e
     ac0:	.word	0x00000000

00000ac4 <set_table_bit>:
     ac4:	mov	ip, sp
     ac8:	sub	sp, sp, #24
     acc:	str	ip, [sp]
     ad0:	str	lr, [sp, #4]
     ad4:	str	r4, [sp, #8]
     ad8:	str	r5, [sp, #12]
     adc:	str	r6, [sp, #16]
     ae0:	ldrb	r4, [r1]
     ae4:	ldrb	r5, [r0, r4, lsr #3]
     ae8:	mov	r6, #1
     aec:	and	ip, r4, #7
     af0:	lsl	ip, r6, ip
     af4:	orr	ip, r5, ip
     af8:	and	ip, ip, #255	; 0xff
     afc:	strb	ip, [r0, r4, lsr #3]
     b00:	cmp	r2, #0
     b04:	beq	b24 <set_table_bit+0x60>
     b08:	ldr	ip, [r3, #12]
     b0c:	ldrb	ip, [ip, r4]
     b10:	and	ip, ip, #2
     b14:	cmp	ip, #0
     b18:	movne	r2, #1
     b1c:	moveq	r2, #0
     b20:	b	b28 <set_table_bit+0x64>
     b24:	mov	r2, #0
     b28:	cmp	r2, #0
     b2c:	beq	b7c <set_table_bit+0xb8>
     b30:	ldr	r2, [r3, #4]
     b34:	ldrb	r2, [r2, r4]
     b38:	asr	lr, r2, #31
     b3c:	add	lr, r2, lr, lsr #29
     b40:	asr	r5, lr, #3
     b44:	ldr	r2, [r3, #4]
     b48:	ldrb	ip, [r2, r4]
     b4c:	asr	lr, ip, #31
     b50:	add	lr, ip, lr, lsr #29
     b54:	asr	r2, lr, #3
     b58:	ldrb	r6, [r0, r2]
     b5c:	mov	ip, #1
     b60:	ldr	r2, [r3, #4]
     b64:	ldrb	r2, [r2, r4]
     b68:	and	r3, r2, #7
     b6c:	lsl	ip, ip, r3
     b70:	orr	r2, r6, ip
     b74:	and	r3, r2, #255	; 0xff
     b78:	strb	r3, [r0, r5]
     b7c:	add	r0, r1, #1
     b80:	ldr	r4, [sp, #8]
     b84:	ldr	r5, [sp, #12]
     b88:	ldr	r6, [sp, #16]
     b8c:	ldr	lr, [sp, #4]
     b90:	add	sp, sp, #24
     b94:	bx	lr

00000b98 <set_type_bits>:
     b98:	mov	ip, sp
     b9c:	sub	sp, sp, #24
     ba0:	str	ip, [sp]
     ba4:	str	lr, [sp, #4]
     ba8:	str	r4, [sp, #8]
     bac:	str	r5, [sp, #12]
     bb0:	str	r6, [sp, #16]
     bb4:	mov	r6, #0
     bb8:	cmp	r6, r2
     bbc:	bcs	be4 <set_type_bits+0x4c>
     bc0:	ldrb	ip, [r0, r6]
     bc4:	ldr	r4, [r3, #8]
     bc8:	add	r5, r6, r1
     bcc:	ldrb	r4, [r4, r5]
     bd0:	orr	ip, ip, r4
     bd4:	and	ip, ip, #255	; 0xff
     bd8:	strb	ip, [r0, r6]
     bdc:	add	r6, r6, #1
     be0:	b	bb8 <set_type_bits+0x20>
     be4:	ldr	r4, [sp, #8]
     be8:	ldr	r5, [sp, #12]
     bec:	ldr	r6, [sp, #16]
     bf0:	ldr	lr, [sp, #4]
     bf4:	add	sp, sp, #24
     bf8:	bx	lr

00000bfc <set_nottype_bits>:
     bfc:	mov	ip, sp
     c00:	sub	sp, sp, #24
     c04:	str	ip, [sp]
     c08:	str	lr, [sp, #4]
     c0c:	str	r4, [sp, #8]
     c10:	str	r5, [sp, #12]
     c14:	str	r6, [sp, #16]
     c18:	mov	r4, #0
     c1c:	cmp	r4, r2
     c20:	bcs	c4c <set_nottype_bits+0x50>
     c24:	ldrb	r5, [r0, r4]
     c28:	ldr	r6, [r3, #8]
     c2c:	add	ip, r4, r1
     c30:	ldrb	ip, [r6, ip]
     c34:	mvn	ip, ip
     c38:	orr	ip, r5, ip
     c3c:	and	ip, ip, #255	; 0xff
     c40:	strb	ip, [r0, r4]
     c44:	add	r4, r4, #1
     c48:	b	c1c <set_nottype_bits+0x20>
     c4c:	ldr	r4, [sp, #8]
     c50:	ldr	r5, [sp, #12]
     c54:	ldr	r6, [sp, #16]
     c58:	ldr	lr, [sp, #4]
     c5c:	add	sp, sp, #24
     c60:	bx	lr

00000c64 <set_start_bits>:
     c64:	mov	ip, sp
     c68:	sub	sp, sp, #48	; 0x30
     c6c:	str	ip, [sp, #4]
     c70:	str	lr, [sp, #8]
     c74:	str	r4, [sp, #16]
     c78:	str	r5, [sp, #20]
     c7c:	str	r6, [sp, #24]
     c80:	str	r7, [sp, #28]
     c84:	str	r8, [sp, #32]
     c88:	str	r9, [sp, #36]	; 0x24
     c8c:	str	sl, [sp, #40]	; 0x28
     c90:	str	fp, [sp, #44]	; 0x2c
     c94:	mov	r5, r3
     c98:	mov	sl, r2
     c9c:	mov	r7, r1
     ca0:	mov	r9, r0
     ca4:	mov	r8, #1
     ca8:	mov	r6, #32
     cac:	mov	fp, #1
     cb0:	add	r4, r9, #3
     cb4:	ldrb	r3, [r9]
     cb8:	cmp	r3, #133	; 0x85
     cbc:	beq	cd4 <set_start_bits+0x70>
     cc0:	ldrb	r3, [r9]
     cc4:	cmp	r3, #138	; 0x8a
     cc8:	moveq	ip, #1
     ccc:	movne	ip, #0
     cd0:	b	cd8 <set_start_bits+0x74>
     cd4:	mov	ip, #1
     cd8:	cmp	ip, #0
     cdc:	bne	cf4 <set_start_bits+0x90>
     ce0:	ldrb	r3, [r9]
     ce4:	cmp	r3, #134	; 0x86
     ce8:	moveq	r1, #1
     cec:	movne	r1, #0
     cf0:	b	cf8 <set_start_bits+0x94>
     cf4:	mov	r1, #1
     cf8:	cmp	r1, #0
     cfc:	bne	d14 <set_start_bits+0xb0>
     d00:	ldrb	r1, [r9]
     d04:	cmp	r1, #139	; 0x8b
     d08:	moveq	r1, #1
     d0c:	movne	r1, #0
     d10:	b	d18 <set_start_bits+0xb4>
     d14:	mov	r1, #1
     d18:	cmp	r1, #0
     d1c:	beq	d24 <set_start_bits+0xc0>
     d20:	add	r4, r4, #2
     d24:	cmp	fp, #0
     d28:	beq	15c8 <set_start_bits+0x964>
     d2c:	ldrb	r3, [r4]
     d30:	cmp	r3, #162	; 0xa2
     d34:	bcs	15c0 <set_start_bits+0x95c>
     d38:	add	pc, pc, r3, lsl #2
     d3c:	nop	{0}
     d40:	b	fc8 <set_start_bits+0x364>
     d44:	b	fc8 <set_start_bits+0x364>
     d48:	b	fc8 <set_start_bits+0x364>
     d4c:	b	fc8 <set_start_bits+0x364>
     d50:	b	1048 <set_start_bits+0x3e4>
     d54:	b	1048 <set_start_bits+0x3e4>
     d58:	b	12dc <set_start_bits+0x678>
     d5c:	b	12f8 <set_start_bits+0x694>
     d60:	b	1314 <set_start_bits+0x6b0>
     d64:	b	1330 <set_start_bits+0x6cc>
     d68:	b	134c <set_start_bits+0x6e8>
     d6c:	b	1368 <set_start_bits+0x704>
     d70:	b	fc8 <set_start_bits+0x364>
     d74:	b	fc8 <set_start_bits+0x364>
     d78:	b	fc8 <set_start_bits+0x364>
     d7c:	b	fc8 <set_start_bits+0x364>
     d80:	b	fd0 <set_start_bits+0x36c>
     d84:	b	1284 <set_start_bits+0x620>
     d88:	b	fc8 <set_start_bits+0x364>
     d8c:	b	124c <set_start_bits+0x5e8>
     d90:	b	fc8 <set_start_bits+0x364>
     d94:	b	1284 <set_start_bits+0x620>
     d98:	b	fc8 <set_start_bits+0x364>
     d9c:	b	fc8 <set_start_bits+0x364>
     da0:	b	fc8 <set_start_bits+0x364>
     da4:	b	fc8 <set_start_bits+0x364>
     da8:	b	fc8 <set_start_bits+0x364>
     dac:	b	fc8 <set_start_bits+0x364>
     db0:	b	fc8 <set_start_bits+0x364>
     db4:	b	1208 <set_start_bits+0x5a4>
     db8:	b	122c <set_start_bits+0x5c8>
     dbc:	b	fc8 <set_start_bits+0x364>
     dc0:	b	fc8 <set_start_bits+0x364>
     dc4:	b	1184 <set_start_bits+0x520>
     dc8:	b	1184 <set_start_bits+0x520>
     dcc:	b	1208 <set_start_bits+0x5a4>
     dd0:	b	1208 <set_start_bits+0x5a4>
     dd4:	b	1184 <set_start_bits+0x520>
     dd8:	b	1184 <set_start_bits+0x520>
     ddc:	b	11c4 <set_start_bits+0x560>
     de0:	b	11c4 <set_start_bits+0x560>
     de4:	b	1204 <set_start_bits+0x5a0>
     de8:	b	1184 <set_start_bits+0x520>
     dec:	b	1208 <set_start_bits+0x5a4>
     df0:	b	1184 <set_start_bits+0x520>
     df4:	b	11c4 <set_start_bits+0x560>
     df8:	b	11a4 <set_start_bits+0x540>
     dfc:	b	11a4 <set_start_bits+0x540>
     e00:	b	122c <set_start_bits+0x5c8>
     e04:	b	122c <set_start_bits+0x5c8>
     e08:	b	11a4 <set_start_bits+0x540>
     e0c:	b	11a4 <set_start_bits+0x540>
     e10:	b	11e4 <set_start_bits+0x580>
     e14:	b	11e4 <set_start_bits+0x580>
     e18:	b	1228 <set_start_bits+0x5c4>
     e1c:	b	11a4 <set_start_bits+0x540>
     e20:	b	122c <set_start_bits+0x5c8>
     e24:	b	11a4 <set_start_bits+0x540>
     e28:	b	11e4 <set_start_bits+0x580>
     e2c:	b	fc8 <set_start_bits+0x364>
     e30:	b	fc8 <set_start_bits+0x364>
     e34:	b	fc8 <set_start_bits+0x364>
     e38:	b	fc8 <set_start_bits+0x364>
     e3c:	b	fc8 <set_start_bits+0x364>
     e40:	b	fc8 <set_start_bits+0x364>
     e44:	b	fc8 <set_start_bits+0x364>
     e48:	b	fc8 <set_start_bits+0x364>
     e4c:	b	fc8 <set_start_bits+0x364>
     e50:	b	fc8 <set_start_bits+0x364>
     e54:	b	fc8 <set_start_bits+0x364>
     e58:	b	fc8 <set_start_bits+0x364>
     e5c:	b	fc8 <set_start_bits+0x364>
     e60:	b	fc8 <set_start_bits+0x364>
     e64:	b	fc8 <set_start_bits+0x364>
     e68:	b	fc8 <set_start_bits+0x364>
     e6c:	b	fc8 <set_start_bits+0x364>
     e70:	b	fc8 <set_start_bits+0x364>
     e74:	b	fc8 <set_start_bits+0x364>
     e78:	b	fc8 <set_start_bits+0x364>
     e7c:	b	fc8 <set_start_bits+0x364>
     e80:	b	fc8 <set_start_bits+0x364>
     e84:	b	fc8 <set_start_bits+0x364>
     e88:	b	fc8 <set_start_bits+0x364>
     e8c:	b	fc8 <set_start_bits+0x364>
     e90:	b	fc8 <set_start_bits+0x364>
     e94:	b	1398 <set_start_bits+0x734>
     e98:	b	1398 <set_start_bits+0x734>
     e9c:	b	1384 <set_start_bits+0x720>
     ea0:	b	1384 <set_start_bits+0x720>
     ea4:	b	1398 <set_start_bits+0x734>
     ea8:	b	1398 <set_start_bits+0x734>
     eac:	b	1394 <set_start_bits+0x730>
     eb0:	b	1394 <set_start_bits+0x730>
     eb4:	b	138c <set_start_bits+0x728>
     eb8:	b	1398 <set_start_bits+0x734>
     ebc:	b	1384 <set_start_bits+0x720>
     ec0:	b	1398 <set_start_bits+0x734>
     ec4:	b	1394 <set_start_bits+0x730>
     ec8:	b	15c0 <set_start_bits+0x95c>
     ecc:	b	15c0 <set_start_bits+0x95c>
     ed0:	b	15c0 <set_start_bits+0x95c>
     ed4:	b	15c0 <set_start_bits+0x95c>
     ed8:	b	15c0 <set_start_bits+0x95c>
     edc:	b	15c0 <set_start_bits+0x95c>
     ee0:	b	15c0 <set_start_bits+0x95c>
     ee4:	b	15c0 <set_start_bits+0x95c>
     ee8:	b	15c0 <set_start_bits+0x95c>
     eec:	b	15c0 <set_start_bits+0x95c>
     ef0:	b	15c0 <set_start_bits+0x95c>
     ef4:	b	15c0 <set_start_bits+0x95c>
     ef8:	b	1514 <set_start_bits+0x8b0>
     efc:	b	1514 <set_start_bits+0x8b0>
     f00:	b	15c0 <set_start_bits+0x95c>
     f04:	b	fc8 <set_start_bits+0x364>
     f08:	b	fc8 <set_start_bits+0x364>
     f0c:	b	fc8 <set_start_bits+0x364>
     f10:	b	fc8 <set_start_bits+0x364>
     f14:	b	fc8 <set_start_bits+0x364>
     f18:	b	10d0 <set_start_bits+0x46c>
     f1c:	b	10bc <set_start_bits+0x458>
     f20:	b	10c8 <set_start_bits+0x464>
     f24:	b	10c8 <set_start_bits+0x464>
     f28:	b	10c8 <set_start_bits+0x464>
     f2c:	b	10c8 <set_start_bits+0x464>
     f30:	b	fc8 <set_start_bits+0x364>
     f34:	b	1050 <set_start_bits+0x3ec>
     f38:	b	10d8 <set_start_bits+0x474>
     f3c:	b	10d8 <set_start_bits+0x474>
     f40:	b	10d8 <set_start_bits+0x474>
     f44:	b	1050 <set_start_bits+0x3ec>
     f48:	b	1050 <set_start_bits+0x3ec>
     f4c:	b	1050 <set_start_bits+0x3ec>
     f50:	b	1050 <set_start_bits+0x3ec>
     f54:	b	1050 <set_start_bits+0x3ec>
     f58:	b	1050 <set_start_bits+0x3ec>
     f5c:	b	fc8 <set_start_bits+0x364>
     f60:	b	1050 <set_start_bits+0x3ec>
     f64:	b	1050 <set_start_bits+0x3ec>
     f68:	b	1050 <set_start_bits+0x3ec>
     f6c:	b	1050 <set_start_bits+0x3ec>
     f70:	b	fc8 <set_start_bits+0x364>
     f74:	b	fc8 <set_start_bits+0x364>
     f78:	b	fc8 <set_start_bits+0x364>
     f7c:	b	fc8 <set_start_bits+0x364>
     f80:	b	fc8 <set_start_bits+0x364>
     f84:	b	fc8 <set_start_bits+0x364>
     f88:	b	10fc <set_start_bits+0x498>
     f8c:	b	10fc <set_start_bits+0x498>
     f90:	b	10fc <set_start_bits+0x498>
     f94:	b	fc8 <set_start_bits+0x364>
     f98:	b	fc8 <set_start_bits+0x364>
     f9c:	b	fc8 <set_start_bits+0x364>
     fa0:	b	fc8 <set_start_bits+0x364>
     fa4:	b	fc8 <set_start_bits+0x364>
     fa8:	b	fc8 <set_start_bits+0x364>
     fac:	b	fc8 <set_start_bits+0x364>
     fb0:	b	fc8 <set_start_bits+0x364>
     fb4:	b	fc8 <set_start_bits+0x364>
     fb8:	b	fc8 <set_start_bits+0x364>
     fbc:	b	fc8 <set_start_bits+0x364>
     fc0:	b	fc8 <set_start_bits+0x364>
     fc4:	b	115c <set_start_bits+0x4f8>
     fc8:	mov	r0, #0
     fcc:	b	15e8 <set_start_bits+0x984>
     fd0:	ldrb	r2, [r4, #1]
     fd4:	cmp	r2, #9
     fd8:	beq	fe4 <set_start_bits+0x380>
     fdc:	mov	r0, #0
     fe0:	b	15e8 <set_start_bits+0x984>
     fe4:	ldr	r2, [pc, #1576]	; 1614 <set_start_bits+0x9b0>
     fe8:	ldrb	ip, [r4, #2]
     fec:	add	r1, r2, ip, lsl #2
     ff0:	mov	r2, r1
     ff4:	add	r1, r2, #4
     ff8:	ldr	r3, [r2]
     ffc:	cmn	r3, #1
    1000:	bcs	1040 <set_start_bits+0x3dc>
    1004:	cmp	r3, #255	; 0xff
    1008:	bhi	102c <set_start_bits+0x3c8>
    100c:	ldrb	ip, [r7, r3, lsr #3]
    1010:	mov	r0, #1
    1014:	and	r2, r3, #7
    1018:	lsl	r2, r0, r2
    101c:	orr	r0, ip, r2
    1020:	and	r2, r0, #255	; 0xff
    1024:	strb	r2, [r7, r3, lsr #3]
    1028:	b	ff0 <set_start_bits+0x38c>
    102c:	ldrb	ip, [r7, #31]
    1030:	orr	r2, ip, #128	; 0x80
    1034:	and	r3, r2, #255	; 0xff
    1038:	strb	r3, [r7, #31]
    103c:	b	ff0 <set_start_bits+0x38c>
    1040:	mov	fp, #0
    1044:	b	d24 <set_start_bits+0xc0>
    1048:	add	r4, r4, #1
    104c:	b	d24 <set_start_bits+0xc0>
    1050:	mov	r3, r5
    1054:	mov	r2, sl
    1058:	mov	r1, r7
    105c:	mov	r0, r4
    1060:	bl	c64 <set_start_bits>
    1064:	cmp	r0, #0
    1068:	beq	107c <set_start_bits+0x418>
    106c:	cmp	r0, #3
    1070:	moveq	r1, #1
    1074:	movne	r1, #0
    1078:	b	1080 <set_start_bits+0x41c>
    107c:	mov	r1, #1
    1080:	cmp	r1, #0
    1084:	bne	15e8 <set_start_bits+0x984>
    1088:	cmp	r0, #1
    108c:	beq	10b4 <set_start_bits+0x450>
    1090:	ldrb	r3, [r4, #2]
    1094:	ldrb	ip, [r4, #1]
    1098:	orr	r1, r3, ip, lsl #8
    109c:	add	r4, r4, r1
    10a0:	ldrb	r2, [r4]
    10a4:	cmp	r2, #119	; 0x77
    10a8:	beq	1090 <set_start_bits+0x42c>
    10ac:	add	r4, r4, #3
    10b0:	b	d24 <set_start_bits+0xc0>
    10b4:	mov	fp, #0
    10b8:	b	d24 <set_start_bits+0xc0>
    10bc:	mov	r8, #2
    10c0:	mov	fp, #0
    10c4:	b	d24 <set_start_bits+0xc0>
    10c8:	mov	r0, #2
    10cc:	b	15e8 <set_start_bits+0x984>
    10d0:	add	r4, r4, #6
    10d4:	b	d24 <set_start_bits+0xc0>
    10d8:	ldrb	r0, [r4, #2]
    10dc:	ldrb	r1, [r4, #1]
    10e0:	orr	r0, r0, r1, lsl #8
    10e4:	add	r4, r4, r0
    10e8:	ldrb	ip, [r4]
    10ec:	cmp	ip, #119	; 0x77
    10f0:	beq	10d8 <set_start_bits+0x474>
    10f4:	add	r4, r4, #3
    10f8:	b	d24 <set_start_bits+0xc0>
    10fc:	add	r0, r4, #1
    1100:	mov	r4, r0
    1104:	mov	r3, r5
    1108:	mov	r2, sl
    110c:	mov	r1, r7
    1110:	bl	c64 <set_start_bits>
    1114:	cmp	r0, #0
    1118:	beq	112c <set_start_bits+0x4c8>
    111c:	cmp	r0, #3
    1120:	moveq	r1, #1
    1124:	movne	r1, #0
    1128:	b	1130 <set_start_bits+0x4cc>
    112c:	mov	r1, #1
    1130:	cmp	r1, #0
    1134:	bne	15e8 <set_start_bits+0x984>
    1138:	ldrb	r1, [r4, #2]
    113c:	ldrb	r2, [r4, #1]
    1140:	orr	r3, r1, r2, lsl #8
    1144:	add	r4, r4, r3
    1148:	ldrb	r0, [r4]
    114c:	cmp	r0, #119	; 0x77
    1150:	beq	1138 <set_start_bits+0x4d4>
    1154:	add	r4, r4, #3
    1158:	b	d24 <set_start_bits+0xc0>
    115c:	add	r3, r4, #1
    1160:	ldrb	ip, [r3, #2]
    1164:	ldrb	r1, [r3, #1]
    1168:	orr	ip, ip, r1, lsl #8
    116c:	add	r3, r3, ip
    1170:	ldrb	r1, [r3]
    1174:	cmp	r1, #119	; 0x77
    1178:	beq	1160 <set_start_bits+0x4fc>
    117c:	add	r4, r3, #3
    1180:	b	d24 <set_start_bits+0xc0>
    1184:	add	r1, r4, #1
    1188:	mov	r2, #0
    118c:	str	sl, [sp]
    1190:	mov	r3, r5
    1194:	mov	r0, r7
    1198:	bl	ac4 <set_table_bit>
    119c:	mov	r4, r0
    11a0:	b	d24 <set_start_bits+0xc0>
    11a4:	add	r1, r4, #1
    11a8:	mov	r2, #1
    11ac:	str	sl, [sp]
    11b0:	mov	r3, r5
    11b4:	mov	r0, r7
    11b8:	bl	ac4 <set_table_bit>
    11bc:	mov	r4, r0
    11c0:	b	d24 <set_start_bits+0xc0>
    11c4:	add	r1, r4, #3
    11c8:	mov	r2, #0
    11cc:	str	sl, [sp]
    11d0:	mov	r3, r5
    11d4:	mov	r0, r7
    11d8:	bl	ac4 <set_table_bit>
    11dc:	mov	r4, r0
    11e0:	b	d24 <set_start_bits+0xc0>
    11e4:	add	r1, r4, #3
    11e8:	mov	r2, #1
    11ec:	str	sl, [sp]
    11f0:	mov	r3, r5
    11f4:	mov	r0, r7
    11f8:	bl	ac4 <set_table_bit>
    11fc:	mov	r4, r0
    1200:	b	d24 <set_start_bits+0xc0>
    1204:	add	r4, r4, #2
    1208:	add	r1, r4, #1
    120c:	mov	r2, #0
    1210:	str	sl, [sp]
    1214:	mov	r3, r5
    1218:	mov	r0, r7
    121c:	bl	ac4 <set_table_bit>
    1220:	mov	fp, #0
    1224:	b	d24 <set_start_bits+0xc0>
    1228:	add	r4, r4, #2
    122c:	add	r1, r4, #1
    1230:	mov	r2, #1
    1234:	str	sl, [sp]
    1238:	mov	r3, r5
    123c:	mov	r0, r7
    1240:	bl	ac4 <set_table_bit>
    1244:	mov	fp, #0
    1248:	b	d24 <set_start_bits+0xc0>
    124c:	ldrb	ip, [r7, #1]
    1250:	orr	r1, ip, #2
    1254:	and	r0, r1, #255	; 0xff
    1258:	strb	r0, [r7, #1]
    125c:	ldrb	r1, [r7, #4]
    1260:	orr	r1, r1, #1
    1264:	and	r0, r1, #255	; 0xff
    1268:	strb	r0, [r7, #4]
    126c:	ldrb	r3, [r7, #20]
    1270:	orr	r3, r3, #1
    1274:	and	ip, r3, #255	; 0xff
    1278:	strb	ip, [r7, #20]
    127c:	mov	fp, #0
    1280:	b	d24 <set_start_bits+0xc0>
    1284:	ldrb	ip, [r7, #1]
    1288:	orr	ip, ip, #4
    128c:	and	r3, ip, #255	; 0xff
    1290:	strb	r3, [r7, #1]
    1294:	ldrb	r3, [r7, #1]
    1298:	orr	r3, r3, #8
    129c:	and	r3, r3, #255	; 0xff
    12a0:	strb	r3, [r7, #1]
    12a4:	ldrb	r2, [r7, #1]
    12a8:	orr	r1, r2, #16
    12ac:	and	r0, r1, #255	; 0xff
    12b0:	strb	r0, [r7, #1]
    12b4:	ldrb	r2, [r7, #1]
    12b8:	orr	r2, r2, #32
    12bc:	and	ip, r2, #255	; 0xff
    12c0:	strb	ip, [r7, #1]
    12c4:	ldrb	r1, [r7, #16]
    12c8:	orr	ip, r1, #32
    12cc:	and	r0, ip, #255	; 0xff
    12d0:	strb	r0, [r7, #16]
    12d4:	mov	fp, #0
    12d8:	b	d24 <set_start_bits+0xc0>
    12dc:	mov	r1, #64	; 0x40
    12e0:	mov	r3, r5
    12e4:	mov	r2, r6
    12e8:	mov	r0, r7
    12ec:	bl	bfc <set_nottype_bits>
    12f0:	mov	fp, #0
    12f4:	b	d24 <set_start_bits+0xc0>
    12f8:	mov	r1, #64	; 0x40
    12fc:	mov	r3, r5
    1300:	mov	r2, r6
    1304:	mov	r0, r7
    1308:	bl	b98 <set_type_bits>
    130c:	mov	fp, #0
    1310:	b	d24 <set_start_bits+0xc0>
    1314:	mov	r1, #0
    1318:	mov	r3, r5
    131c:	mov	r2, r6
    1320:	mov	r0, r7
    1324:	bl	bfc <set_nottype_bits>
    1328:	mov	fp, #0
    132c:	b	d24 <set_start_bits+0xc0>
    1330:	mov	r1, #0
    1334:	mov	r3, r5
    1338:	mov	r2, r6
    133c:	mov	r0, r7
    1340:	bl	b98 <set_type_bits>
    1344:	mov	fp, #0
    1348:	b	d24 <set_start_bits+0xc0>
    134c:	mov	r1, #160	; 0xa0
    1350:	mov	r3, r5
    1354:	mov	r2, r6
    1358:	mov	r0, r7
    135c:	bl	bfc <set_nottype_bits>
    1360:	mov	fp, #0
    1364:	b	d24 <set_start_bits+0xc0>
    1368:	mov	r1, #160	; 0xa0
    136c:	mov	r3, r5
    1370:	mov	r2, r6
    1374:	mov	r0, r7
    1378:	bl	b98 <set_type_bits>
    137c:	mov	fp, #0
    1380:	b	d24 <set_start_bits+0xc0>
    1384:	add	r4, r4, #1
    1388:	b	d24 <set_start_bits+0xc0>
    138c:	add	r4, r4, #3
    1390:	b	d24 <set_start_bits+0xc0>
    1394:	add	r4, r4, #2
    1398:	ldrb	r0, [r4, #1]
    139c:	sub	r0, r0, #6
    13a0:	cmp	r0, #16
    13a4:	bcs	150c <set_start_bits+0x8a8>
    13a8:	add	pc, pc, r0, lsl #2
    13ac:	nop	{0}
    13b0:	b	1478 <set_start_bits+0x814>
    13b4:	b	1490 <set_start_bits+0x82c>
    13b8:	b	14a8 <set_start_bits+0x844>
    13bc:	b	14c0 <set_start_bits+0x85c>
    13c0:	b	14d8 <set_start_bits+0x874>
    13c4:	b	14f0 <set_start_bits+0x88c>
    13c8:	b	150c <set_start_bits+0x8a8>
    13cc:	b	150c <set_start_bits+0x8a8>
    13d0:	b	150c <set_start_bits+0x8a8>
    13d4:	b	150c <set_start_bits+0x8a8>
    13d8:	b	150c <set_start_bits+0x8a8>
    13dc:	b	1424 <set_start_bits+0x7c0>
    13e0:	b	150c <set_start_bits+0x8a8>
    13e4:	b	13f0 <set_start_bits+0x78c>
    13e8:	b	150c <set_start_bits+0x8a8>
    13ec:	b	1424 <set_start_bits+0x7c0>
    13f0:	ldrb	r1, [r7, #1]
    13f4:	orr	r3, r1, #2
    13f8:	and	r2, r3, #255	; 0xff
    13fc:	strb	r2, [r7, #1]
    1400:	ldrb	r0, [r7, #4]
    1404:	orr	r2, r0, #1
    1408:	and	r0, r2, #255	; 0xff
    140c:	strb	r0, [r7, #4]
    1410:	ldrb	r2, [r7, #20]
    1414:	orr	r2, r2, #1
    1418:	and	r2, r2, #255	; 0xff
    141c:	strb	r2, [r7, #20]
    1420:	b	1504 <set_start_bits+0x8a0>
    1424:	ldrb	r1, [r7, #1]
    1428:	orr	r1, r1, #4
    142c:	and	r1, r1, #255	; 0xff
    1430:	strb	r1, [r7, #1]
    1434:	ldrb	ip, [r7, #1]
    1438:	orr	ip, ip, #8
    143c:	and	r3, ip, #255	; 0xff
    1440:	strb	r3, [r7, #1]
    1444:	ldrb	ip, [r7, #1]
    1448:	orr	r3, ip, #16
    144c:	and	r0, r3, #255	; 0xff
    1450:	strb	r0, [r7, #1]
    1454:	ldrb	r0, [r7, #1]
    1458:	orr	r1, r0, #32
    145c:	and	r2, r1, #255	; 0xff
    1460:	strb	r2, [r7, #1]
    1464:	ldrb	r2, [r7, #16]
    1468:	orr	r0, r2, #32
    146c:	and	r2, r0, #255	; 0xff
    1470:	strb	r2, [r7, #16]
    1474:	b	1504 <set_start_bits+0x8a0>
    1478:	mov	r1, #64	; 0x40
    147c:	mov	r3, r5
    1480:	mov	r2, r6
    1484:	mov	r0, r7
    1488:	bl	bfc <set_nottype_bits>
    148c:	b	1504 <set_start_bits+0x8a0>
    1490:	mov	r1, #64	; 0x40
    1494:	mov	r3, r5
    1498:	mov	r2, r6
    149c:	mov	r0, r7
    14a0:	bl	b98 <set_type_bits>
    14a4:	b	1504 <set_start_bits+0x8a0>
    14a8:	mov	r1, #0
    14ac:	mov	r3, r5
    14b0:	mov	r2, r6
    14b4:	mov	r0, r7
    14b8:	bl	bfc <set_nottype_bits>
    14bc:	b	1504 <set_start_bits+0x8a0>
    14c0:	mov	r1, #0
    14c4:	mov	r3, r5
    14c8:	mov	r2, r6
    14cc:	mov	r0, r7
    14d0:	bl	b98 <set_type_bits>
    14d4:	b	1504 <set_start_bits+0x8a0>
    14d8:	mov	r1, #160	; 0xa0
    14dc:	mov	r3, r5
    14e0:	mov	r2, r6
    14e4:	mov	r0, r7
    14e8:	bl	bfc <set_nottype_bits>
    14ec:	b	1504 <set_start_bits+0x8a0>
    14f0:	mov	r1, #160	; 0xa0
    14f4:	mov	r3, r5
    14f8:	mov	r2, r6
    14fc:	mov	r0, r7
    1500:	bl	b98 <set_type_bits>
    1504:	add	r4, r4, #2
    1508:	b	d24 <set_start_bits+0xc0>
    150c:	mov	r0, #0
    1510:	b	15e8 <set_start_bits+0x984>
    1514:	add	r2, r4, #1
    1518:	add	r4, r2, #32
    151c:	mov	r0, #0
    1520:	cmp	r0, #32
    1524:	bcs	1544 <set_start_bits+0x8e0>
    1528:	ldrb	ip, [r7, r0]
    152c:	ldrb	r3, [r2, r0]
    1530:	orr	r3, ip, r3
    1534:	and	ip, r3, #255	; 0xff
    1538:	strb	ip, [r7, r0]
    153c:	add	r0, r0, #1
    1540:	b	1520 <set_start_bits+0x8bc>
    1544:	ldrb	r0, [r4]
    1548:	sub	ip, r0, #98	; 0x62
    154c:	cmp	ip, #12
    1550:	bcs	15b8 <set_start_bits+0x954>
    1554:	add	pc, pc, ip, lsl #2
    1558:	nop	{0}
    155c:	b	158c <set_start_bits+0x928>
    1560:	b	158c <set_start_bits+0x928>
    1564:	b	15b8 <set_start_bits+0x954>
    1568:	b	15b8 <set_start_bits+0x954>
    156c:	b	158c <set_start_bits+0x928>
    1570:	b	158c <set_start_bits+0x928>
    1574:	b	1594 <set_start_bits+0x930>
    1578:	b	1594 <set_start_bits+0x930>
    157c:	b	158c <set_start_bits+0x928>
    1580:	b	15b8 <set_start_bits+0x954>
    1584:	b	158c <set_start_bits+0x928>
    1588:	b	1594 <set_start_bits+0x930>
    158c:	add	r4, r4, #1
    1590:	b	d24 <set_start_bits+0xc0>
    1594:	ldrb	r2, [r4, #2]
    1598:	ldrb	ip, [r4, #1]
    159c:	orr	r2, r2, ip, lsl #8
    15a0:	cmp	r2, #0
    15a4:	beq	15b0 <set_start_bits+0x94c>
    15a8:	mov	fp, #0
    15ac:	b	d24 <set_start_bits+0xc0>
    15b0:	add	r4, r4, #5
    15b4:	b	d24 <set_start_bits+0xc0>
    15b8:	mov	fp, #0
    15bc:	b	d24 <set_start_bits+0xc0>
    15c0:	mov	r0, #3
    15c4:	b	15e8 <set_start_bits+0x984>
    15c8:	ldrb	ip, [r9, #2]
    15cc:	ldrb	r1, [r9, #1]
    15d0:	orr	r3, ip, r1, lsl #8
    15d4:	add	r9, r9, r3
    15d8:	ldrb	r3, [r9]
    15dc:	cmp	r3, #119	; 0x77
    15e0:	beq	cac <set_start_bits+0x48>
    15e4:	mov	r0, r8
    15e8:	ldr	r4, [sp, #16]
    15ec:	ldr	r5, [sp, #20]
    15f0:	ldr	r6, [sp, #24]
    15f4:	ldr	r7, [sp, #28]
    15f8:	ldr	r8, [sp, #32]
    15fc:	ldr	r9, [sp, #36]	; 0x24
    1600:	ldr	sl, [sp, #40]	; 0x28
    1604:	ldr	fp, [sp, #44]	; 0x2c
    1608:	ldr	lr, [sp, #8]
    160c:	add	sp, sp, #48	; 0x30
    1610:	bx	lr
    1614:	.word	0x00000000

00001618 <coda_pcre_study>:
    1618:	mov	ip, sp
    161c:	sub	sp, sp, #224	; 0xe0
    1620:	str	ip, [sp, #8]
    1624:	str	lr, [sp, #12]
    1628:	str	r4, [sp, #16]
    162c:	str	r5, [sp, #20]
    1630:	str	r6, [sp, #24]
    1634:	str	r7, [sp, #28]
    1638:	str	r8, [sp, #32]
    163c:	str	r9, [sp, #36]	; 0x24
    1640:	mov	r4, r2
    1644:	mov	r5, r1
    1648:	mov	r6, r0
    164c:	mov	r2, #0
    1650:	str	r2, [sp, #40]	; 0x28
    1654:	mov	r9, #0
    1658:	mov	r7, #0
    165c:	mov	r0, #0
    1660:	str	r0, [r4]
    1664:	cmp	r6, #0
    1668:	beq	1688 <coda_pcre_study+0x70>
    166c:	ldr	r2, [r6]
    1670:	movw	lr, #21061	; 0x5245
    1674:	movt	lr, #20547	; 0x5043
    1678:	cmp	r2, lr
    167c:	movne	ip, #1
    1680:	moveq	ip, #0
    1684:	b	168c <coda_pcre_study+0x74>
    1688:	mov	ip, #1
    168c:	cmp	ip, #0
    1690:	beq	16a4 <coda_pcre_study+0x8c>
    1694:	ldr	r2, [pc, #684]	; 1948 <coda_pcre_study+0x330>
    1698:	str	r2, [r4]
    169c:	mov	r7, #0
    16a0:	b	1918 <coda_pcre_study+0x300>
    16a4:	ldr	r3, [r6, #12]
    16a8:	and	r1, r3, #1
    16ac:	cmp	r1, #0
    16b0:	bne	16c4 <coda_pcre_study+0xac>
    16b4:	ldr	ip, [pc, #656]	; 194c <coda_pcre_study+0x334>
    16b8:	str	ip, [r4]
    16bc:	mov	r7, #0
    16c0:	b	1918 <coda_pcre_study+0x300>
    16c4:	bic	r1, r5, #15
    16c8:	cmp	r1, #0
    16cc:	beq	16e0 <coda_pcre_study+0xc8>
    16d0:	ldr	r3, [pc, #616]	; 1940 <coda_pcre_study+0x328>
    16d4:	str	r3, [r4]
    16d8:	mov	r7, #0
    16dc:	b	1918 <coda_pcre_study+0x300>
    16e0:	ldrh	ip, [r6, #38]	; 0x26
    16e4:	ldrh	r0, [r6, #36]	; 0x24
    16e8:	ldrh	r3, [r6, #34]	; 0x22
    16ec:	add	r1, r6, r3
    16f0:	mla	r8, ip, r0, r1
    16f4:	ldr	r1, [r6, #8]
    16f8:	and	r0, r1, #16
    16fc:	cmp	r0, #0
    1700:	bne	171c <coda_pcre_study+0x104>
    1704:	ldr	r2, [r6, #12]
    1708:	and	r0, r2, #272	; 0x110
    170c:	cmp	r0, #0
    1710:	moveq	r1, #1
    1714:	movne	r1, #0
    1718:	b	1720 <coda_pcre_study+0x108>
    171c:	mov	r1, #0
    1720:	cmp	r1, #0
    1724:	beq	17d4 <coda_pcre_study+0x1bc>
    1728:	ldr	r3, [r6, #48]	; 0x30
    172c:	str	r3, [sp, #44]	; 0x2c
    1730:	ldr	ip, [sp, #44]	; 0x2c
    1734:	cmp	ip, #0
    1738:	bne	1750 <coda_pcre_study+0x138>
    173c:	mov	r1, #0
    1740:	mov	r2, #11
    1744:	add	r3, sp, #44	; 0x2c
    1748:	mov	r0, r6
    174c:	bl	0 <coda_pcre_fullinfo>
    1750:	ldr	r3, [sp, #44]	; 0x2c
    1754:	str	r3, [sp, #80]	; 0x50
    1758:	ldr	r0, [sp, #44]	; 0x2c
    175c:	add	r0, r0, #256	; 0x100
    1760:	str	r0, [sp, #84]	; 0x54
    1764:	ldr	r2, [sp, #44]	; 0x2c
    1768:	add	r1, r2, #512	; 0x200
    176c:	str	r1, [sp, #88]	; 0x58
    1770:	ldr	r3, [sp, #44]	; 0x2c
    1774:	add	r3, r3, #832	; 0x340
    1778:	str	r3, [sp, #92]	; 0x5c
    177c:	add	r0, sp, #48	; 0x30
    1780:	mov	r1, #0
    1784:	mov	r2, #32
    1788:	bl	0 <memset>
    178c:	add	r1, sp, #48	; 0x30
    1790:	ldr	r2, [r6, #8]
    1794:	and	r2, r2, #2048	; 0x800
    1798:	cmp	r2, #0
    179c:	movne	r2, #1
    17a0:	moveq	r2, #0
    17a4:	add	r3, sp, #80	; 0x50
    17a8:	mov	r0, r8
    17ac:	bl	c64 <set_start_bits>
    17b0:	cmp	r0, #1
    17b4:	moveq	r9, #1
    17b8:	movne	r9, #0
    17bc:	cmp	r0, #3
    17c0:	bne	17d4 <coda_pcre_study+0x1bc>
    17c4:	ldr	r0, [pc, #392]	; 1954 <coda_pcre_study+0x33c>
    17c8:	str	r0, [r4]
    17cc:	mov	r7, #0
    17d0:	b	1918 <coda_pcre_study+0x300>
    17d4:	ldr	r3, [r6, #8]
    17d8:	mov	ip, #0
    17dc:	add	r2, sp, #40	; 0x28
    17e0:	str	r2, [sp, #4]
    17e4:	str	ip, [sp]
    17e8:	mov	r2, r8
    17ec:	mov	r1, r8
    17f0:	mov	r0, r6
    17f4:	bl	0 <find_minlength>
    17f8:	mov	r6, r0
    17fc:	cmn	r0, #3
    1800:	beq	190c <coda_pcre_study+0x2f4>
    1804:	cmn	r0, #2
    1808:	bne	181c <coda_pcre_study+0x204>
    180c:	ldr	ip, [pc, #316]	; 1950 <coda_pcre_study+0x338>
    1810:	str	ip, [r4]
    1814:	mov	r7, #0
    1818:	b	1918 <coda_pcre_study+0x300>
    181c:	cmp	r9, #0
    1820:	bne	1834 <coda_pcre_study+0x21c>
    1824:	cmp	r6, #0
    1828:	movgt	ip, #1
    182c:	movle	ip, #0
    1830:	b	1838 <coda_pcre_study+0x220>
    1834:	mov	ip, #1
    1838:	cmp	ip, #0
    183c:	bne	1854 <coda_pcre_study+0x23c>
    1840:	and	r3, r5, #8
    1844:	cmp	r3, #0
    1848:	movne	ip, #1
    184c:	moveq	ip, #0
    1850:	b	1858 <coda_pcre_study+0x240>
    1854:	mov	ip, #1
    1858:	cmp	ip, #0
    185c:	beq	1918 <coda_pcre_study+0x300>
    1860:	ldr	r2, [pc, #220]	; 1944 <coda_pcre_study+0x32c>
    1864:	ldr	ip, [r2]
    1868:	mov	r0, #76	; 0x4c
    186c:	blx	ip
    1870:	mov	r7, r0
    1874:	cmp	r7, #0
    1878:	bne	188c <coda_pcre_study+0x274>
    187c:	ldr	r3, [pc, #212]	; 1958 <coda_pcre_study+0x340>
    1880:	str	r3, [r4]
    1884:	mov	r7, #0
    1888:	b	1918 <coda_pcre_study+0x300>
    188c:	add	r4, r7, #32
    1890:	mov	ip, #1
    1894:	str	ip, [r7]
    1898:	str	r4, [r7, #4]
    189c:	mov	r1, #44	; 0x2c
    18a0:	str	r1, [r4]
    18a4:	mov	r3, #0
    18a8:	str	r3, [r4, #4]
    18ac:	cmp	r9, #0
    18b0:	beq	18d4 <coda_pcre_study+0x2bc>
    18b4:	ldr	r2, [r4, #4]
    18b8:	orr	ip, r2, #1
    18bc:	str	ip, [r4, #4]
    18c0:	add	r0, r4, #8
    18c4:	add	r1, sp, #48	; 0x30
    18c8:	mov	r2, #32
    18cc:	bl	0 <memcpy>
    18d0:	b	18e4 <coda_pcre_study+0x2cc>
    18d4:	add	r0, r4, #8
    18d8:	mov	r1, #0
    18dc:	mov	r2, #32
    18e0:	bl	0 <memset>
    18e4:	cmp	r6, #0
    18e8:	ble	1900 <coda_pcre_study+0x2e8>
    18ec:	ldr	r1, [r4, #4]
    18f0:	orr	r0, r1, #2
    18f4:	str	r0, [r4, #4]
    18f8:	str	r6, [r4, #40]	; 0x28
    18fc:	b	1918 <coda_pcre_study+0x300>
    1900:	mov	r2, #0
    1904:	str	r2, [r4, #40]	; 0x28
    1908:	b	1918 <coda_pcre_study+0x300>
    190c:	ldr	r2, [pc, #64]	; 1954 <coda_pcre_study+0x33c>
    1910:	str	r2, [r4]
    1914:	mov	r7, #0
    1918:	mov	r0, r7
    191c:	ldr	r4, [sp, #16]
    1920:	ldr	r5, [sp, #20]
    1924:	ldr	r6, [sp, #24]
    1928:	ldr	r7, [sp, #28]
    192c:	ldr	r8, [sp, #32]
    1930:	ldr	r9, [sp, #36]	; 0x24
    1934:	ldr	lr, [sp, #12]
    1938:	add	sp, sp, #224	; 0xe0
    193c:	bx	lr
    1940:	.word	0x00000093
    1944:	.word	0x00000000
    1948:	.word	0x00000065
    194c:	.word	0x000000ba
    1950:	.word	0x00000000
    1954:	.word	0x0000002a
    1958:	.word	0x00000050

0000195c <coda_pcre_free_study>:
    195c:	mov	ip, sp
    1960:	sub	sp, sp, #8
    1964:	str	ip, [sp]
    1968:	str	lr, [sp, #4]
    196c:	cmp	r0, #0
    1970:	beq	1980 <coda_pcre_free_study+0x24>
    1974:	ldr	r1, [pc, #16]	; 198c <coda_pcre_free_study+0x30>
    1978:	ldr	ip, [r1]
    197c:	blx	ip
    1980:	ldr	lr, [sp, #4]
    1984:	add	sp, sp, #8
    1988:	bx	lr
    198c:	.word	0x00000000
