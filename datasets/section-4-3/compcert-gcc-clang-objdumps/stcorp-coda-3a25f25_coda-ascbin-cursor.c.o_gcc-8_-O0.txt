
../compcert-repos/stcorp-coda-3a25f25/CMakeFiles/coda_static.dir/libcoda/coda-ascbin-cursor.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <get_relative_field_bit_offset_by_index>:
       0:	strd	r4, [sp, #-32]!	; 0xffffffe0
       4:	strd	r6, [sp, #8]
       8:	strd	r8, [sp, #16]
       c:	str	fp, [sp, #24]
      10:	str	lr, [sp, #28]
      14:	add	fp, sp, #28
      18:	sub	sp, sp, #584	; 0x248
      1c:	str	r0, [fp, #-600]	; 0xfffffda8
      20:	str	r1, [fp, #-604]	; 0xfffffda4
      24:	str	r2, [fp, #-608]	; 0xfffffda0
      28:	ldr	r3, [fp, #-600]	; 0xfffffda8
      2c:	ldr	r3, [r3, #4]
      30:	sub	r3, r3, #1
      34:	ldr	r2, [fp, #-600]	; 0xfffffda8
      38:	lsl	r3, r3, #4
      3c:	add	r3, r2, r3
      40:	ldr	r3, [r3, #8]
      44:	str	r3, [fp, #-40]	; 0xffffffd8
      48:	ldr	r3, [fp, #-40]	; 0xffffffd8
      4c:	ldr	r2, [r3, #52]	; 0x34
      50:	ldr	r3, [fp, #-604]	; 0xfffffda4
      54:	lsl	r3, r3, #2
      58:	add	r3, r2, r3
      5c:	ldr	r3, [r3]
      60:	str	r3, [fp, #-44]	; 0xffffffd4
      64:	ldr	r3, [fp, #-44]	; 0xffffffd4
      68:	ldrd	r2, [r3, #24]
      6c:	cmp	r2, #0
      70:	sbcs	r3, r3, #0
      74:	blt	90 <get_relative_field_bit_offset_by_index+0x90>
      78:	ldr	r3, [fp, #-44]	; 0xffffffd4
      7c:	ldrd	r2, [r3, #24]
      80:	ldr	r1, [fp, #-608]	; 0xfffffda0
      84:	strd	r2, [r1]
      88:	mov	r3, #0
      8c:	b	49c <get_relative_field_bit_offset_by_index+0x49c>
      90:	ldr	r3, [fp, #-44]	; 0xffffffd4
      94:	ldr	r3, [r3, #32]
      98:	cmp	r3, #0
      9c:	beq	188 <get_relative_field_bit_offset_by_index+0x188>
      a0:	ldr	r3, [fp, #-44]	; 0xffffffd4
      a4:	ldr	r3, [r3, #20]
      a8:	cmp	r3, #0
      ac:	beq	140 <get_relative_field_bit_offset_by_index+0x140>
      b0:	ldr	r3, [fp, #-44]	; 0xffffffd4
      b4:	ldr	r3, [r3, #20]
      b8:	sub	r2, fp, #576	; 0x240
      bc:	ldr	r1, [fp, #-600]	; 0xfffffda8
      c0:	mov	r0, r3
      c4:	bl	0 <coda_expression_eval_bool>
      c8:	mov	r3, r0
      cc:	cmp	r3, #0
      d0:	beq	f0 <get_relative_field_bit_offset_by_index+0xf0>
      d4:	movw	r0, #0
      d8:	movt	r0, #0
      dc:	bl	0 <coda_add_error_message>
      e0:	ldr	r0, [fp, #-600]	; 0xfffffda8
      e4:	bl	0 <coda_cursor_add_to_error_message>
      e8:	mvn	r3, #0
      ec:	b	49c <get_relative_field_bit_offset_by_index+0x49c>
      f0:	ldr	r3, [fp, #-576]	; 0xfffffdc0
      f4:	cmp	r3, #0
      f8:	bne	140 <get_relative_field_bit_offset_by_index+0x140>
      fc:	ldr	r3, [fp, #-604]	; 0xfffffda4
     100:	cmp	r3, #0
     104:	bne	120 <get_relative_field_bit_offset_by_index+0x120>
     108:	ldr	r1, [fp, #-608]	; 0xfffffda0
     10c:	mov	r2, #0
     110:	mov	r3, #0
     114:	strd	r2, [r1]
     118:	mov	r3, #0
     11c:	b	49c <get_relative_field_bit_offset_by_index+0x49c>
     120:	ldr	r3, [fp, #-604]	; 0xfffffda4
     124:	sub	r3, r3, #1
     128:	ldr	r2, [fp, #-608]	; 0xfffffda0
     12c:	mov	r1, r3
     130:	ldr	r0, [fp, #-600]	; 0xfffffda8
     134:	bl	0 <get_relative_field_bit_offset_by_index>
     138:	mov	r3, r0
     13c:	b	49c <get_relative_field_bit_offset_by_index+0x49c>
     140:	ldr	r3, [fp, #-44]	; 0xffffffd4
     144:	ldr	r3, [r3, #32]
     148:	ldr	r2, [fp, #-608]	; 0xfffffda0
     14c:	ldr	r1, [fp, #-600]	; 0xfffffda8
     150:	mov	r0, r3
     154:	bl	0 <coda_expression_eval_integer>
     158:	mov	r3, r0
     15c:	cmp	r3, #0
     160:	beq	180 <get_relative_field_bit_offset_by_index+0x180>
     164:	movw	r0, #0
     168:	movt	r0, #0
     16c:	bl	0 <coda_add_error_message>
     170:	ldr	r0, [fp, #-600]	; 0xfffffda8
     174:	bl	0 <coda_cursor_add_to_error_message>
     178:	mvn	r3, #0
     17c:	b	49c <get_relative_field_bit_offset_by_index+0x49c>
     180:	mov	r3, #0
     184:	b	49c <get_relative_field_bit_offset_by_index+0x49c>
     188:	ldr	r3, [fp, #-604]	; 0xfffffda4
     18c:	cmp	r3, #0
     190:	bne	1b4 <get_relative_field_bit_offset_by_index+0x1b4>
     194:	movw	r3, #0
     198:	movt	r3, #0
     19c:	mov	r2, #99	; 0x63
     1a0:	movw	r1, #0
     1a4:	movt	r1, #0
     1a8:	movw	r0, #0
     1ac:	movt	r0, #0
     1b0:	bl	0 <__assert_fail>
     1b4:	ldr	r3, [fp, #-604]	; 0xfffffda4
     1b8:	sub	r3, r3, #1
     1bc:	str	r3, [fp, #-32]	; 0xffffffe0
     1c0:	b	1fc <get_relative_field_bit_offset_by_index+0x1fc>
     1c4:	ldr	r3, [fp, #-32]	; 0xffffffe0
     1c8:	sub	r3, r3, #1
     1cc:	str	r3, [fp, #-32]	; 0xffffffe0
     1d0:	ldr	r3, [fp, #-32]	; 0xffffffe0
     1d4:	cmp	r3, #0
     1d8:	bge	1fc <get_relative_field_bit_offset_by_index+0x1fc>
     1dc:	movw	r3, #0
     1e0:	movt	r3, #0
     1e4:	mov	r2, #110	; 0x6e
     1e8:	movw	r1, #0
     1ec:	movt	r1, #0
     1f0:	movw	r0, #0
     1f4:	movt	r0, #0
     1f8:	bl	0 <__assert_fail>
     1fc:	ldr	r3, [fp, #-40]	; 0xffffffd8
     200:	ldr	r2, [r3, #52]	; 0x34
     204:	ldr	r3, [fp, #-32]	; 0xffffffe0
     208:	lsl	r3, r3, #2
     20c:	add	r3, r2, r3
     210:	ldr	r3, [r3]
     214:	ldrd	r2, [r3, #24]
     218:	mvn	r0, #0
     21c:	mvn	r1, #0
     220:	cmp	r3, r1
     224:	cmpeq	r2, r0
     228:	bne	250 <get_relative_field_bit_offset_by_index+0x250>
     22c:	ldr	r3, [fp, #-40]	; 0xffffffd8
     230:	ldr	r2, [r3, #52]	; 0x34
     234:	ldr	r3, [fp, #-32]	; 0xffffffe0
     238:	lsl	r3, r3, #2
     23c:	add	r3, r2, r3
     240:	ldr	r3, [r3]
     244:	ldr	r3, [r3, #32]
     248:	cmp	r3, #0
     24c:	beq	1c4 <get_relative_field_bit_offset_by_index+0x1c4>
     250:	sub	r3, fp, #572	; 0x23c
     254:	mov	r2, r3
     258:	ldr	r1, [fp, #-32]	; 0xffffffe0
     25c:	ldr	r0, [fp, #-600]	; 0xfffffda8
     260:	bl	0 <get_relative_field_bit_offset_by_index>
     264:	mov	r3, r0
     268:	cmp	r3, #0
     26c:	beq	278 <get_relative_field_bit_offset_by_index+0x278>
     270:	mvn	r3, #0
     274:	b	49c <get_relative_field_bit_offset_by_index+0x49c>
     278:	ldr	r2, [fp, #-600]	; 0xfffffda8
     27c:	sub	r3, fp, #564	; 0x234
     280:	mov	r1, r2
     284:	mov	r2, #520	; 0x208
     288:	mov	r0, r3
     28c:	bl	0 <memcpy>
     290:	ldr	r3, [fp, #-560]	; 0xfffffdd0
     294:	add	r3, r3, #1
     298:	str	r3, [fp, #-560]	; 0xfffffdd0
     29c:	ldr	r3, [fp, #-600]	; 0xfffffda8
     2a0:	ldr	r3, [r3, #4]
     2a4:	sub	r3, r3, #1
     2a8:	ldr	r2, [fp, #-600]	; 0xfffffda8
     2ac:	add	r3, r3, #1
     2b0:	lsl	r3, r3, #4
     2b4:	add	r3, r2, r3
     2b8:	ldrd	r0, [r3]
     2bc:	sub	r3, fp, #572	; 0x23c
     2c0:	ldrd	r2, [r3]
     2c4:	ldr	ip, [fp, #-560]	; 0xfffffdd0
     2c8:	sub	ip, ip, #1
     2cc:	adds	r8, r0, r2
     2d0:	adc	r9, r1, r3
     2d4:	sub	r3, fp, #556	; 0x22c
     2d8:	mov	r2, r3
     2dc:	add	r3, ip, #1
     2e0:	lsl	r3, r3, #4
     2e4:	add	r3, r2, r3
     2e8:	sub	r3, r3, #8
     2ec:	strd	r8, [r3]
     2f0:	ldr	r3, [fp, #-32]	; 0xffffffe0
     2f4:	str	r3, [fp, #-36]	; 0xffffffdc
     2f8:	b	478 <get_relative_field_bit_offset_by_index+0x478>
     2fc:	mov	r3, #1
     300:	str	r3, [fp, #-592]	; 0xfffffdb0
     304:	ldr	r3, [fp, #-40]	; 0xffffffd8
     308:	ldr	r2, [r3, #52]	; 0x34
     30c:	ldr	r3, [fp, #-36]	; 0xffffffdc
     310:	lsl	r3, r3, #2
     314:	add	r3, r2, r3
     318:	ldr	r3, [r3]
     31c:	ldr	r3, [r3, #20]
     320:	cmp	r3, #0
     324:	beq	374 <get_relative_field_bit_offset_by_index+0x374>
     328:	ldr	r3, [fp, #-40]	; 0xffffffd8
     32c:	ldr	r2, [r3, #52]	; 0x34
     330:	ldr	r3, [fp, #-36]	; 0xffffffdc
     334:	lsl	r3, r3, #2
     338:	add	r3, r2, r3
     33c:	ldr	r3, [r3]
     340:	ldr	r3, [r3, #20]
     344:	sub	r2, fp, #592	; 0x250
     348:	ldr	r1, [fp, #-600]	; 0xfffffda8
     34c:	mov	r0, r3
     350:	bl	0 <coda_expression_eval_bool>
     354:	mov	r3, r0
     358:	cmp	r3, #0
     35c:	beq	374 <get_relative_field_bit_offset_by_index+0x374>
     360:	movw	r0, #0
     364:	movt	r0, #0
     368:	bl	0 <coda_add_error_message>
     36c:	mvn	r3, #0
     370:	b	49c <get_relative_field_bit_offset_by_index+0x49c>
     374:	ldr	r3, [fp, #-592]	; 0xfffffdb0
     378:	cmp	r3, #0
     37c:	beq	46c <get_relative_field_bit_offset_by_index+0x46c>
     380:	ldr	r3, [fp, #-40]	; 0xffffffd8
     384:	ldr	r2, [r3, #52]	; 0x34
     388:	ldr	r3, [fp, #-36]	; 0xffffffdc
     38c:	lsl	r3, r3, #2
     390:	add	r3, r2, r3
     394:	ldr	r2, [r3]
     398:	ldr	r3, [fp, #-560]	; 0xfffffdd0
     39c:	sub	r3, r3, #1
     3a0:	ldr	r2, [r2, #8]
     3a4:	lsl	r3, r3, #4
     3a8:	sub	r1, fp, #28
     3ac:	add	r3, r1, r3
     3b0:	str	r2, [r3, #-528]	; 0xfffffdf0
     3b4:	ldr	r3, [fp, #-560]	; 0xfffffdd0
     3b8:	sub	r3, r3, #1
     3bc:	lsl	r3, r3, #4
     3c0:	sub	r2, fp, #28
     3c4:	add	r3, r2, r3
     3c8:	ldr	r2, [fp, #-36]	; 0xffffffdc
     3cc:	str	r2, [r3, #-524]	; 0xfffffdf4
     3d0:	sub	r2, fp, #588	; 0x24c
     3d4:	sub	r3, fp, #564	; 0x234
     3d8:	mov	r1, r2
     3dc:	mov	r0, r3
     3e0:	bl	0 <coda_cursor_get_bit_size>
     3e4:	mov	r3, r0
     3e8:	cmp	r3, #0
     3ec:	beq	3f8 <get_relative_field_bit_offset_by_index+0x3f8>
     3f0:	mvn	r3, #0
     3f4:	b	49c <get_relative_field_bit_offset_by_index+0x49c>
     3f8:	sub	r3, fp, #572	; 0x23c
     3fc:	ldrd	r0, [r3]
     400:	sub	r3, fp, #588	; 0x24c
     404:	ldrd	r2, [r3]
     408:	adds	r4, r0, r2
     40c:	adc	r5, r1, r3
     410:	sub	r3, fp, #572	; 0x23c
     414:	strd	r4, [r3]
     418:	ldr	r3, [fp, #-560]	; 0xfffffdd0
     41c:	sub	r3, r3, #1
     420:	sub	r2, fp, #556	; 0x22c
     424:	add	r3, r3, #1
     428:	lsl	r3, r3, #4
     42c:	add	r3, r2, r3
     430:	sub	r3, r3, #8
     434:	ldrd	r0, [r3]
     438:	sub	r3, fp, #588	; 0x24c
     43c:	ldrd	r2, [r3]
     440:	ldr	ip, [fp, #-560]	; 0xfffffdd0
     444:	sub	ip, ip, #1
     448:	adds	r6, r0, r2
     44c:	adc	r7, r1, r3
     450:	sub	r3, fp, #556	; 0x22c
     454:	mov	r2, r3
     458:	add	r3, ip, #1
     45c:	lsl	r3, r3, #4
     460:	add	r3, r2, r3
     464:	sub	r3, r3, #8
     468:	strd	r6, [r3]
     46c:	ldr	r3, [fp, #-36]	; 0xffffffdc
     470:	add	r3, r3, #1
     474:	str	r3, [fp, #-36]	; 0xffffffdc
     478:	ldr	r2, [fp, #-36]	; 0xffffffdc
     47c:	ldr	r3, [fp, #-604]	; 0xfffffda4
     480:	cmp	r2, r3
     484:	blt	2fc <get_relative_field_bit_offset_by_index+0x2fc>
     488:	sub	r3, fp, #572	; 0x23c
     48c:	ldrd	r2, [r3]
     490:	ldr	r1, [fp, #-608]	; 0xfffffda0
     494:	strd	r2, [r1]
     498:	mov	r3, #0
     49c:	mov	r0, r3
     4a0:	sub	sp, fp, #28
     4a4:	ldrd	r4, [sp]
     4a8:	ldrd	r6, [sp, #8]
     4ac:	ldrd	r8, [sp, #16]
     4b0:	ldr	fp, [sp, #24]
     4b4:	add	sp, sp, #28
     4b8:	pop	{pc}		; (ldr pc, [sp], #4)

000004bc <get_next_relative_field_bit_offset>:
     4bc:	strd	r4, [sp, #-24]!	; 0xffffffe8
     4c0:	strd	r6, [sp, #8]
     4c4:	str	fp, [sp, #16]
     4c8:	str	lr, [sp, #20]
     4cc:	add	fp, sp, #20
     4d0:	sub	sp, sp, #576	; 0x240
     4d4:	str	r0, [fp, #-584]	; 0xfffffdb8
     4d8:	str	r1, [fp, #-588]	; 0xfffffdb4
     4dc:	str	r2, [fp, #-592]	; 0xfffffdb0
     4e0:	ldr	r3, [fp, #-584]	; 0xfffffdb8
     4e4:	ldr	r3, [r3, #4]
     4e8:	sub	r3, r3, #2
     4ec:	ldr	r2, [fp, #-584]	; 0xfffffdb8
     4f0:	lsl	r3, r3, #4
     4f4:	add	r3, r2, r3
     4f8:	ldr	r3, [r3, #8]
     4fc:	str	r3, [fp, #-24]	; 0xffffffe8
     500:	ldr	r3, [fp, #-584]	; 0xfffffdb8
     504:	ldr	r3, [r3, #4]
     508:	sub	r3, r3, #1
     50c:	ldr	r2, [fp, #-584]	; 0xfffffdb8
     510:	lsl	r3, r3, #4
     514:	add	r3, r2, r3
     518:	ldr	r3, [r3, #12]
     51c:	add	r3, r3, #1
     520:	str	r3, [fp, #-28]	; 0xffffffe4
     524:	ldr	r3, [fp, #-24]	; 0xffffffe8
     528:	ldr	r3, [r3, #48]	; 0x30
     52c:	ldr	r2, [fp, #-28]	; 0xffffffe4
     530:	cmp	r2, r3
     534:	blt	558 <get_next_relative_field_bit_offset+0x9c>
     538:	movw	r3, #0
     53c:	movt	r3, #0
     540:	mov	r2, #161	; 0xa1
     544:	movw	r1, #0
     548:	movt	r1, #0
     54c:	movw	r0, #0
     550:	movt	r0, #0
     554:	bl	0 <__assert_fail>
     558:	ldr	r3, [fp, #-24]	; 0xffffffe8
     55c:	ldr	r2, [r3, #52]	; 0x34
     560:	ldr	r3, [fp, #-28]	; 0xffffffe4
     564:	lsl	r3, r3, #2
     568:	add	r3, r2, r3
     56c:	ldr	r3, [r3]
     570:	str	r3, [fp, #-32]	; 0xffffffe0
     574:	ldr	r3, [fp, #-32]	; 0xffffffe0
     578:	ldrd	r2, [r3, #24]
     57c:	cmp	r2, #0
     580:	sbcs	r3, r3, #0
     584:	blt	5bc <get_next_relative_field_bit_offset+0x100>
     588:	ldr	r3, [fp, #-32]	; 0xffffffe0
     58c:	ldrd	r2, [r3, #24]
     590:	ldr	r1, [fp, #-588]	; 0xfffffdb4
     594:	strd	r2, [r1]
     598:	ldr	r3, [fp, #-592]	; 0xfffffdb0
     59c:	cmp	r3, #0
     5a0:	beq	5b4 <get_next_relative_field_bit_offset+0xf8>
     5a4:	ldr	r1, [fp, #-592]	; 0xfffffdb0
     5a8:	mvn	r2, #0
     5ac:	mvn	r3, #0
     5b0:	strd	r2, [r1]
     5b4:	mov	r3, #0
     5b8:	b	768 <get_next_relative_field_bit_offset+0x2ac>
     5bc:	ldr	r3, [fp, #-584]	; 0xfffffdb8
     5c0:	ldr	r3, [r3, #4]
     5c4:	sub	r3, r3, #1
     5c8:	ldr	r2, [fp, #-584]	; 0xfffffdb8
     5cc:	add	r3, r3, #1
     5d0:	lsl	r3, r3, #4
     5d4:	add	r3, r2, r3
     5d8:	ldrd	r0, [r3]
     5dc:	ldr	r3, [fp, #-584]	; 0xfffffdb8
     5e0:	ldr	r3, [r3, #4]
     5e4:	sub	r3, r3, #2
     5e8:	ldr	r2, [fp, #-584]	; 0xfffffdb8
     5ec:	add	r3, r3, #1
     5f0:	lsl	r3, r3, #4
     5f4:	add	r3, r2, r3
     5f8:	ldrd	r2, [r3]
     5fc:	subs	r6, r0, r2
     600:	sbc	r7, r1, r3
     604:	strd	r6, [fp, #-44]	; 0xffffffd4
     608:	ldr	r3, [fp, #-32]	; 0xffffffe0
     60c:	ldr	r3, [r3, #32]
     610:	cmp	r3, #0
     614:	beq	710 <get_next_relative_field_bit_offset+0x254>
     618:	ldr	r2, [fp, #-584]	; 0xfffffdb8
     61c:	sub	r3, fp, #580	; 0x244
     620:	mov	r1, r2
     624:	mov	r2, #520	; 0x208
     628:	mov	r0, r3
     62c:	bl	0 <memcpy>
     630:	ldr	r3, [fp, #-576]	; 0xfffffdc0
     634:	sub	r3, r3, #1
     638:	str	r3, [fp, #-576]	; 0xfffffdc0
     63c:	ldr	r3, [fp, #-592]	; 0xfffffdb0
     640:	cmp	r3, #0
     644:	beq	658 <get_next_relative_field_bit_offset+0x19c>
     648:	ldr	r1, [fp, #-592]	; 0xfffffdb0
     64c:	mvn	r2, #0
     650:	mvn	r3, #0
     654:	strd	r2, [r1]
     658:	ldr	r3, [fp, #-32]	; 0xffffffe0
     65c:	ldr	r3, [r3, #20]
     660:	cmp	r3, #0
     664:	beq	6c8 <get_next_relative_field_bit_offset+0x20c>
     668:	ldr	r3, [fp, #-32]	; 0xffffffe0
     66c:	ldr	r3, [r3, #20]
     670:	sub	r2, fp, #56	; 0x38
     674:	sub	r1, fp, #580	; 0x244
     678:	mov	r0, r3
     67c:	bl	0 <coda_expression_eval_bool>
     680:	mov	r3, r0
     684:	cmp	r3, #0
     688:	beq	6a8 <get_next_relative_field_bit_offset+0x1ec>
     68c:	movw	r0, #0
     690:	movt	r0, #0
     694:	bl	0 <coda_add_error_message>
     698:	ldr	r0, [fp, #-584]	; 0xfffffdb8
     69c:	bl	0 <coda_cursor_add_to_error_message>
     6a0:	mvn	r3, #0
     6a4:	b	768 <get_next_relative_field_bit_offset+0x2ac>
     6a8:	ldr	r3, [fp, #-56]	; 0xffffffc8
     6ac:	cmp	r3, #0
     6b0:	bne	6c8 <get_next_relative_field_bit_offset+0x20c>
     6b4:	ldr	r1, [fp, #-588]	; 0xfffffdb4
     6b8:	ldrd	r2, [fp, #-44]	; 0xffffffd4
     6bc:	strd	r2, [r1]
     6c0:	mov	r3, #0
     6c4:	b	768 <get_next_relative_field_bit_offset+0x2ac>
     6c8:	ldr	r3, [fp, #-32]	; 0xffffffe0
     6cc:	ldr	r3, [r3, #32]
     6d0:	sub	r1, fp, #580	; 0x244
     6d4:	ldr	r2, [fp, #-588]	; 0xfffffdb4
     6d8:	mov	r0, r3
     6dc:	bl	0 <coda_expression_eval_integer>
     6e0:	mov	r3, r0
     6e4:	cmp	r3, #0
     6e8:	beq	708 <get_next_relative_field_bit_offset+0x24c>
     6ec:	movw	r0, #0
     6f0:	movt	r0, #0
     6f4:	bl	0 <coda_add_error_message>
     6f8:	ldr	r0, [fp, #-584]	; 0xfffffdb8
     6fc:	bl	0 <coda_cursor_add_to_error_message>
     700:	mvn	r3, #0
     704:	b	768 <get_next_relative_field_bit_offset+0x2ac>
     708:	mov	r3, #0
     70c:	b	768 <get_next_relative_field_bit_offset+0x2ac>
     710:	sub	r3, fp, #52	; 0x34
     714:	mov	r1, r3
     718:	ldr	r0, [fp, #-584]	; 0xfffffdb8
     71c:	bl	0 <coda_cursor_get_bit_size>
     720:	mov	r3, r0
     724:	cmp	r3, #0
     728:	beq	734 <get_next_relative_field_bit_offset+0x278>
     72c:	mvn	r3, #0
     730:	b	768 <get_next_relative_field_bit_offset+0x2ac>
     734:	ldrd	r0, [fp, #-52]	; 0xffffffcc
     738:	ldrd	r2, [fp, #-44]	; 0xffffffd4
     73c:	adds	r4, r0, r2
     740:	adc	r5, r1, r3
     744:	ldr	r3, [fp, #-588]	; 0xfffffdb4
     748:	strd	r4, [r3]
     74c:	ldr	r3, [fp, #-592]	; 0xfffffdb0
     750:	cmp	r3, #0
     754:	beq	764 <get_next_relative_field_bit_offset+0x2a8>
     758:	ldrd	r2, [fp, #-52]	; 0xffffffcc
     75c:	ldr	r1, [fp, #-592]	; 0xfffffdb0
     760:	strd	r2, [r1]
     764:	mov	r3, #0
     768:	mov	r0, r3
     76c:	sub	sp, fp, #20
     770:	ldrd	r4, [sp]
     774:	ldrd	r6, [sp, #8]
     778:	ldr	fp, [sp, #16]
     77c:	add	sp, sp, #20
     780:	pop	{pc}		; (ldr pc, [sp], #4)

00000784 <coda_ascbin_cursor_set_product>:
     784:	str	fp, [sp, #-8]!
     788:	str	lr, [sp, #4]
     78c:	add	fp, sp, #4
     790:	sub	sp, sp, #8
     794:	str	r0, [fp, #-8]
     798:	str	r1, [fp, #-12]
     79c:	ldr	r3, [fp, #-8]
     7a0:	ldr	r2, [fp, #-12]
     7a4:	str	r2, [r3]
     7a8:	ldr	r3, [fp, #-8]
     7ac:	mov	r2, #1
     7b0:	str	r2, [r3, #4]
     7b4:	ldr	r3, [fp, #-12]
     7b8:	ldr	r3, [r3, #20]
     7bc:	cmp	r3, #0
     7c0:	bne	7e4 <coda_ascbin_cursor_set_product+0x60>
     7c4:	movw	r3, #0
     7c8:	movt	r3, #0
     7cc:	mov	r2, #234	; 0xea
     7d0:	movw	r1, #0
     7d4:	movt	r1, #0
     7d8:	movw	r0, #0
     7dc:	movt	r0, #0
     7e0:	bl	0 <__assert_fail>
     7e4:	ldr	r3, [fp, #-12]
     7e8:	ldr	r2, [r3, #20]
     7ec:	ldr	r3, [fp, #-8]
     7f0:	str	r2, [r3, #8]
     7f4:	ldr	r3, [fp, #-8]
     7f8:	mvn	r2, #0
     7fc:	str	r2, [r3, #12]
     800:	ldr	r1, [fp, #-8]
     804:	mov	r2, #0
     808:	mov	r3, #0
     80c:	strd	r2, [r1, #16]
     810:	mov	r3, #0
     814:	mov	r0, r3
     818:	sub	sp, fp, #4
     81c:	ldr	fp, [sp]
     820:	add	sp, sp, #4
     824:	pop	{pc}		; (ldr pc, [sp], #4)

00000828 <coda_ascbin_cursor_goto_record_field_by_index>:
     828:	strd	r4, [sp, #-16]!
     82c:	str	fp, [sp, #8]
     830:	str	lr, [sp, #12]
     834:	add	fp, sp, #12
     838:	sub	sp, sp, #40	; 0x28
     83c:	str	r0, [fp, #-48]	; 0xffffffd0
     840:	str	r1, [fp, #-52]	; 0xffffffcc
     844:	mov	r3, #1
     848:	str	r3, [fp, #-28]	; 0xffffffe4
     84c:	ldr	r3, [fp, #-48]	; 0xffffffd0
     850:	ldr	r3, [r3, #4]
     854:	sub	r3, r3, #1
     858:	ldr	r2, [fp, #-48]	; 0xffffffd0
     85c:	lsl	r3, r3, #4
     860:	add	r3, r2, r3
     864:	ldr	r3, [r3, #8]
     868:	ldr	r3, [r3]
     86c:	cmp	r3, #99	; 0x63
     870:	bhi	894 <coda_ascbin_cursor_goto_record_field_by_index+0x6c>
     874:	ldr	r3, [fp, #-48]	; 0xffffffd0
     878:	ldr	r3, [r3, #4]
     87c:	sub	r3, r3, #1
     880:	ldr	r2, [fp, #-48]	; 0xffffffd0
     884:	lsl	r3, r3, #4
     888:	add	r3, r2, r3
     88c:	ldr	r3, [r3, #8]
     890:	b	8b4 <coda_ascbin_cursor_goto_record_field_by_index+0x8c>
     894:	ldr	r3, [fp, #-48]	; 0xffffffd0
     898:	ldr	r3, [r3, #4]
     89c:	sub	r3, r3, #1
     8a0:	ldr	r2, [fp, #-48]	; 0xffffffd0
     8a4:	lsl	r3, r3, #4
     8a8:	add	r3, r2, r3
     8ac:	ldr	r3, [r3, #8]
     8b0:	ldr	r3, [r3, #4]
     8b4:	str	r3, [fp, #-24]	; 0xffffffe8
     8b8:	ldr	r3, [fp, #-52]	; 0xffffffcc
     8bc:	cmp	r3, #0
     8c0:	blt	8d8 <coda_ascbin_cursor_goto_record_field_by_index+0xb0>
     8c4:	ldr	r3, [fp, #-24]	; 0xffffffe8
     8c8:	ldr	r3, [r3, #48]	; 0x30
     8cc:	ldr	r2, [fp, #-52]	; 0xffffffcc
     8d0:	cmp	r2, r3
     8d4:	blt	8fc <coda_ascbin_cursor_goto_record_field_by_index+0xd4>
     8d8:	ldr	r3, [fp, #-24]	; 0xffffffe8
     8dc:	ldr	r3, [r3, #48]	; 0x30
     8e0:	ldr	r2, [fp, #-52]	; 0xffffffcc
     8e4:	movw	r1, #0
     8e8:	movt	r1, #0
     8ec:	mvn	r0, #100	; 0x64
     8f0:	bl	0 <coda_set_error>
     8f4:	mvn	r3, #0
     8f8:	b	af8 <coda_ascbin_cursor_goto_record_field_by_index+0x2d0>
     8fc:	ldr	r3, [fp, #-48]	; 0xffffffd0
     900:	ldr	r3, [r3, #4]
     904:	sub	r3, r3, #1
     908:	ldr	r2, [fp, #-48]	; 0xffffffd0
     90c:	add	r3, r3, #1
     910:	lsl	r3, r3, #4
     914:	add	r3, r2, r3
     918:	ldrd	r2, [r3]
     91c:	strd	r2, [fp, #-20]	; 0xffffffec
     920:	ldr	r3, [fp, #-24]	; 0xffffffe8
     924:	ldr	r3, [r3, #68]	; 0x44
     928:	cmp	r3, #0
     92c:	beq	970 <coda_ascbin_cursor_goto_record_field_by_index+0x148>
     930:	sub	r3, fp, #32
     934:	mov	r1, r3
     938:	ldr	r0, [fp, #-48]	; 0xffffffd0
     93c:	bl	0 <coda_cursor_get_available_union_field_index>
     940:	mov	r3, r0
     944:	cmp	r3, #0
     948:	beq	954 <coda_ascbin_cursor_goto_record_field_by_index+0x12c>
     94c:	mvn	r3, #0
     950:	b	af8 <coda_ascbin_cursor_goto_record_field_by_index+0x2d0>
     954:	ldr	r3, [fp, #-32]	; 0xffffffe0
     958:	ldr	r2, [fp, #-52]	; 0xffffffcc
     95c:	cmp	r2, r3
     960:	beq	a24 <coda_ascbin_cursor_goto_record_field_by_index+0x1fc>
     964:	mov	r3, #0
     968:	str	r3, [fp, #-28]	; 0xffffffe4
     96c:	b	a24 <coda_ascbin_cursor_goto_record_field_by_index+0x1fc>
     970:	sub	r3, fp, #44	; 0x2c
     974:	mov	r2, r3
     978:	ldr	r1, [fp, #-52]	; 0xffffffcc
     97c:	ldr	r0, [fp, #-48]	; 0xffffffd0
     980:	bl	0 <get_relative_field_bit_offset_by_index>
     984:	mov	r3, r0
     988:	cmp	r3, #0
     98c:	beq	998 <coda_ascbin_cursor_goto_record_field_by_index+0x170>
     990:	mvn	r3, #0
     994:	b	af8 <coda_ascbin_cursor_goto_record_field_by_index+0x2d0>
     998:	ldrd	r2, [fp, #-44]	; 0xffffffd4
     99c:	ldrd	r0, [fp, #-20]	; 0xffffffec
     9a0:	adds	r4, r0, r2
     9a4:	adc	r5, r1, r3
     9a8:	strd	r4, [fp, #-20]	; 0xffffffec
     9ac:	ldr	r3, [fp, #-24]	; 0xffffffe8
     9b0:	ldr	r2, [r3, #52]	; 0x34
     9b4:	ldr	r3, [fp, #-52]	; 0xffffffcc
     9b8:	lsl	r3, r3, #2
     9bc:	add	r3, r2, r3
     9c0:	ldr	r3, [r3]
     9c4:	ldr	r3, [r3, #20]
     9c8:	cmp	r3, #0
     9cc:	beq	a24 <coda_ascbin_cursor_goto_record_field_by_index+0x1fc>
     9d0:	ldr	r3, [fp, #-24]	; 0xffffffe8
     9d4:	ldr	r2, [r3, #52]	; 0x34
     9d8:	ldr	r3, [fp, #-52]	; 0xffffffcc
     9dc:	lsl	r3, r3, #2
     9e0:	add	r3, r2, r3
     9e4:	ldr	r3, [r3]
     9e8:	ldr	r3, [r3, #20]
     9ec:	sub	r2, fp, #28
     9f0:	ldr	r1, [fp, #-48]	; 0xffffffd0
     9f4:	mov	r0, r3
     9f8:	bl	0 <coda_expression_eval_bool>
     9fc:	mov	r3, r0
     a00:	cmp	r3, #0
     a04:	beq	a24 <coda_ascbin_cursor_goto_record_field_by_index+0x1fc>
     a08:	movw	r0, #0
     a0c:	movt	r0, #0
     a10:	bl	0 <coda_add_error_message>
     a14:	ldr	r0, [fp, #-48]	; 0xffffffd0
     a18:	bl	0 <coda_cursor_add_to_error_message>
     a1c:	mvn	r3, #0
     a20:	b	af8 <coda_ascbin_cursor_goto_record_field_by_index+0x2d0>
     a24:	ldr	r3, [fp, #-48]	; 0xffffffd0
     a28:	ldr	r3, [r3, #4]
     a2c:	add	r2, r3, #1
     a30:	ldr	r3, [fp, #-48]	; 0xffffffd0
     a34:	str	r2, [r3, #4]
     a38:	ldr	r3, [fp, #-28]	; 0xffffffe4
     a3c:	cmp	r3, #0
     a40:	beq	a80 <coda_ascbin_cursor_goto_record_field_by_index+0x258>
     a44:	ldr	r3, [fp, #-24]	; 0xffffffe8
     a48:	ldr	r2, [r3, #52]	; 0x34
     a4c:	ldr	r3, [fp, #-52]	; 0xffffffcc
     a50:	lsl	r3, r3, #2
     a54:	add	r3, r2, r3
     a58:	ldr	r2, [r3]
     a5c:	ldr	r3, [fp, #-48]	; 0xffffffd0
     a60:	ldr	r3, [r3, #4]
     a64:	sub	r3, r3, #1
     a68:	ldr	r2, [r2, #8]
     a6c:	ldr	r1, [fp, #-48]	; 0xffffffd0
     a70:	lsl	r3, r3, #4
     a74:	add	r3, r1, r3
     a78:	str	r2, [r3, #8]
     a7c:	b	ab0 <coda_ascbin_cursor_goto_record_field_by_index+0x288>
     a80:	ldr	r3, [fp, #-24]	; 0xffffffe8
     a84:	ldr	r2, [r3]
     a88:	ldr	r3, [fp, #-48]	; 0xffffffd0
     a8c:	ldr	r3, [r3, #4]
     a90:	sub	r4, r3, #1
     a94:	mov	r0, r2
     a98:	bl	0 <coda_no_data_singleton>
     a9c:	mov	r1, r0
     aa0:	ldr	r2, [fp, #-48]	; 0xffffffd0
     aa4:	lsl	r3, r4, #4
     aa8:	add	r3, r2, r3
     aac:	str	r1, [r3, #8]
     ab0:	ldr	r3, [fp, #-48]	; 0xffffffd0
     ab4:	ldr	r3, [r3, #4]
     ab8:	sub	r3, r3, #1
     abc:	ldr	r2, [fp, #-48]	; 0xffffffd0
     ac0:	lsl	r3, r3, #4
     ac4:	add	r3, r2, r3
     ac8:	ldr	r2, [fp, #-52]	; 0xffffffcc
     acc:	str	r2, [r3, #12]
     ad0:	ldr	r3, [fp, #-48]	; 0xffffffd0
     ad4:	ldr	r3, [r3, #4]
     ad8:	sub	r3, r3, #1
     adc:	ldr	r2, [fp, #-48]	; 0xffffffd0
     ae0:	add	r3, r3, #1
     ae4:	lsl	r3, r3, #4
     ae8:	add	r1, r2, r3
     aec:	ldrd	r2, [fp, #-20]	; 0xffffffec
     af0:	strd	r2, [r1]
     af4:	mov	r3, #0
     af8:	mov	r0, r3
     afc:	sub	sp, fp, #12
     b00:	ldrd	r4, [sp]
     b04:	ldr	fp, [sp, #8]
     b08:	add	sp, sp, #12
     b0c:	pop	{pc}		; (ldr pc, [sp], #4)

00000b10 <coda_ascbin_cursor_goto_next_record_field>:
     b10:	strd	r4, [sp, #-16]!
     b14:	str	fp, [sp, #8]
     b18:	str	lr, [sp, #12]
     b1c:	add	fp, sp, #12
     b20:	sub	sp, sp, #560	; 0x230
     b24:	str	r0, [fp, #-568]	; 0xfffffdc8
     b28:	mov	r3, #1
     b2c:	str	r3, [fp, #-32]	; 0xffffffe0
     b30:	ldr	r3, [fp, #-568]	; 0xfffffdc8
     b34:	ldr	r3, [r3, #4]
     b38:	sub	r3, r3, #2
     b3c:	ldr	r2, [fp, #-568]	; 0xfffffdc8
     b40:	lsl	r3, r3, #4
     b44:	add	r3, r2, r3
     b48:	ldr	r3, [r3, #8]
     b4c:	ldr	r3, [r3]
     b50:	cmp	r3, #99	; 0x63
     b54:	bhi	b78 <coda_ascbin_cursor_goto_next_record_field+0x68>
     b58:	ldr	r3, [fp, #-568]	; 0xfffffdc8
     b5c:	ldr	r3, [r3, #4]
     b60:	sub	r3, r3, #2
     b64:	ldr	r2, [fp, #-568]	; 0xfffffdc8
     b68:	lsl	r3, r3, #4
     b6c:	add	r3, r2, r3
     b70:	ldr	r3, [r3, #8]
     b74:	b	b98 <coda_ascbin_cursor_goto_next_record_field+0x88>
     b78:	ldr	r3, [fp, #-568]	; 0xfffffdc8
     b7c:	ldr	r3, [r3, #4]
     b80:	sub	r3, r3, #2
     b84:	ldr	r2, [fp, #-568]	; 0xfffffdc8
     b88:	lsl	r3, r3, #4
     b8c:	add	r3, r2, r3
     b90:	ldr	r3, [r3, #8]
     b94:	ldr	r3, [r3, #4]
     b98:	str	r3, [fp, #-24]	; 0xffffffe8
     b9c:	ldr	r3, [fp, #-568]	; 0xfffffdc8
     ba0:	ldr	r3, [r3, #4]
     ba4:	sub	r3, r3, #1
     ba8:	ldr	r2, [fp, #-568]	; 0xfffffdc8
     bac:	lsl	r3, r3, #4
     bb0:	add	r3, r2, r3
     bb4:	ldr	r3, [r3, #12]
     bb8:	add	r3, r3, #1
     bbc:	str	r3, [fp, #-28]	; 0xffffffe4
     bc0:	ldr	r3, [fp, #-28]	; 0xffffffe4
     bc4:	cmp	r3, #0
     bc8:	blt	be0 <coda_ascbin_cursor_goto_next_record_field+0xd0>
     bcc:	ldr	r3, [fp, #-24]	; 0xffffffe8
     bd0:	ldr	r3, [r3, #48]	; 0x30
     bd4:	ldr	r2, [fp, #-28]	; 0xffffffe4
     bd8:	cmp	r2, r3
     bdc:	blt	c04 <coda_ascbin_cursor_goto_next_record_field+0xf4>
     be0:	ldr	r3, [fp, #-24]	; 0xffffffe8
     be4:	ldr	r3, [r3, #48]	; 0x30
     be8:	ldr	r2, [fp, #-28]	; 0xffffffe4
     bec:	movw	r1, #0
     bf0:	movt	r1, #0
     bf4:	mvn	r0, #100	; 0x64
     bf8:	bl	0 <coda_set_error>
     bfc:	mvn	r3, #0
     c00:	b	e38 <coda_ascbin_cursor_goto_next_record_field+0x328>
     c04:	ldr	r3, [fp, #-568]	; 0xfffffdc8
     c08:	ldr	r3, [r3, #4]
     c0c:	sub	r3, r3, #2
     c10:	ldr	r2, [fp, #-568]	; 0xfffffdc8
     c14:	add	r3, r3, #1
     c18:	lsl	r3, r3, #4
     c1c:	add	r3, r2, r3
     c20:	ldrd	r2, [r3]
     c24:	strd	r2, [fp, #-20]	; 0xffffffec
     c28:	ldr	r3, [fp, #-24]	; 0xffffffe8
     c2c:	ldr	r3, [r3, #68]	; 0x44
     c30:	cmp	r3, #0
     c34:	beq	ca0 <coda_ascbin_cursor_goto_next_record_field+0x190>
     c38:	ldr	r2, [fp, #-568]	; 0xfffffdc8
     c3c:	sub	r3, fp, #564	; 0x234
     c40:	mov	r1, r2
     c44:	mov	r2, #520	; 0x208
     c48:	mov	r0, r3
     c4c:	bl	0 <memcpy>
     c50:	ldr	r3, [fp, #-560]	; 0xfffffdd0
     c54:	sub	r3, r3, #1
     c58:	str	r3, [fp, #-560]	; 0xfffffdd0
     c5c:	sub	r2, fp, #36	; 0x24
     c60:	sub	r3, fp, #564	; 0x234
     c64:	mov	r1, r2
     c68:	mov	r0, r3
     c6c:	bl	0 <coda_cursor_get_available_union_field_index>
     c70:	mov	r3, r0
     c74:	cmp	r3, #0
     c78:	beq	c84 <coda_ascbin_cursor_goto_next_record_field+0x174>
     c7c:	mvn	r3, #0
     c80:	b	e38 <coda_ascbin_cursor_goto_next_record_field+0x328>
     c84:	ldr	r3, [fp, #-36]	; 0xffffffdc
     c88:	ldr	r2, [fp, #-28]	; 0xffffffe4
     c8c:	cmp	r2, r3
     c90:	beq	d78 <coda_ascbin_cursor_goto_next_record_field+0x268>
     c94:	mov	r3, #0
     c98:	str	r3, [fp, #-32]	; 0xffffffe0
     c9c:	b	d78 <coda_ascbin_cursor_goto_next_record_field+0x268>
     ca0:	sub	r3, fp, #44	; 0x2c
     ca4:	mov	r2, #0
     ca8:	mov	r1, r3
     cac:	ldr	r0, [fp, #-568]	; 0xfffffdc8
     cb0:	bl	4bc <get_next_relative_field_bit_offset>
     cb4:	mov	r3, r0
     cb8:	cmp	r3, #0
     cbc:	beq	cc8 <coda_ascbin_cursor_goto_next_record_field+0x1b8>
     cc0:	mvn	r3, #0
     cc4:	b	e38 <coda_ascbin_cursor_goto_next_record_field+0x328>
     cc8:	ldrd	r2, [fp, #-44]	; 0xffffffd4
     ccc:	ldrd	r0, [fp, #-20]	; 0xffffffec
     cd0:	adds	r4, r0, r2
     cd4:	adc	r5, r1, r3
     cd8:	strd	r4, [fp, #-20]	; 0xffffffec
     cdc:	ldr	r3, [fp, #-24]	; 0xffffffe8
     ce0:	ldr	r2, [r3, #52]	; 0x34
     ce4:	ldr	r3, [fp, #-28]	; 0xffffffe4
     ce8:	lsl	r3, r3, #2
     cec:	add	r3, r2, r3
     cf0:	ldr	r3, [r3]
     cf4:	ldr	r3, [r3, #20]
     cf8:	cmp	r3, #0
     cfc:	beq	d78 <coda_ascbin_cursor_goto_next_record_field+0x268>
     d00:	ldr	r2, [fp, #-568]	; 0xfffffdc8
     d04:	sub	r3, fp, #564	; 0x234
     d08:	mov	r1, r2
     d0c:	mov	r2, #520	; 0x208
     d10:	mov	r0, r3
     d14:	bl	0 <memcpy>
     d18:	ldr	r3, [fp, #-560]	; 0xfffffdd0
     d1c:	sub	r3, r3, #1
     d20:	str	r3, [fp, #-560]	; 0xfffffdd0
     d24:	ldr	r3, [fp, #-24]	; 0xffffffe8
     d28:	ldr	r2, [r3, #52]	; 0x34
     d2c:	ldr	r3, [fp, #-28]	; 0xffffffe4
     d30:	lsl	r3, r3, #2
     d34:	add	r3, r2, r3
     d38:	ldr	r3, [r3]
     d3c:	ldr	r3, [r3, #20]
     d40:	sub	r2, fp, #32
     d44:	sub	r1, fp, #564	; 0x234
     d48:	mov	r0, r3
     d4c:	bl	0 <coda_expression_eval_bool>
     d50:	mov	r3, r0
     d54:	cmp	r3, #0
     d58:	beq	d78 <coda_ascbin_cursor_goto_next_record_field+0x268>
     d5c:	movw	r0, #0
     d60:	movt	r0, #0
     d64:	bl	0 <coda_add_error_message>
     d68:	ldr	r0, [fp, #-568]	; 0xfffffdc8
     d6c:	bl	0 <coda_cursor_add_to_error_message>
     d70:	mvn	r3, #0
     d74:	b	e38 <coda_ascbin_cursor_goto_next_record_field+0x328>
     d78:	ldr	r3, [fp, #-32]	; 0xffffffe0
     d7c:	cmp	r3, #0
     d80:	beq	dc0 <coda_ascbin_cursor_goto_next_record_field+0x2b0>
     d84:	ldr	r3, [fp, #-24]	; 0xffffffe8
     d88:	ldr	r2, [r3, #52]	; 0x34
     d8c:	ldr	r3, [fp, #-28]	; 0xffffffe4
     d90:	lsl	r3, r3, #2
     d94:	add	r3, r2, r3
     d98:	ldr	r2, [r3]
     d9c:	ldr	r3, [fp, #-568]	; 0xfffffdc8
     da0:	ldr	r3, [r3, #4]
     da4:	sub	r3, r3, #1
     da8:	ldr	r2, [r2, #8]
     dac:	ldr	r1, [fp, #-568]	; 0xfffffdc8
     db0:	lsl	r3, r3, #4
     db4:	add	r3, r1, r3
     db8:	str	r2, [r3, #8]
     dbc:	b	df0 <coda_ascbin_cursor_goto_next_record_field+0x2e0>
     dc0:	ldr	r3, [fp, #-24]	; 0xffffffe8
     dc4:	ldr	r2, [r3]
     dc8:	ldr	r3, [fp, #-568]	; 0xfffffdc8
     dcc:	ldr	r3, [r3, #4]
     dd0:	sub	r4, r3, #1
     dd4:	mov	r0, r2
     dd8:	bl	0 <coda_no_data_singleton>
     ddc:	mov	r1, r0
     de0:	ldr	r2, [fp, #-568]	; 0xfffffdc8
     de4:	lsl	r3, r4, #4
     de8:	add	r3, r2, r3
     dec:	str	r1, [r3, #8]
     df0:	ldr	r3, [fp, #-568]	; 0xfffffdc8
     df4:	ldr	r3, [r3, #4]
     df8:	sub	r3, r3, #1
     dfc:	ldr	r2, [fp, #-568]	; 0xfffffdc8
     e00:	lsl	r3, r3, #4
     e04:	add	r3, r2, r3
     e08:	ldr	r2, [fp, #-28]	; 0xffffffe4
     e0c:	str	r2, [r3, #12]
     e10:	ldr	r3, [fp, #-568]	; 0xfffffdc8
     e14:	ldr	r3, [r3, #4]
     e18:	sub	r3, r3, #1
     e1c:	ldr	r2, [fp, #-568]	; 0xfffffdc8
     e20:	add	r3, r3, #1
     e24:	lsl	r3, r3, #4
     e28:	add	r1, r2, r3
     e2c:	ldrd	r2, [fp, #-20]	; 0xffffffec
     e30:	strd	r2, [r1]
     e34:	mov	r3, #0
     e38:	mov	r0, r3
     e3c:	sub	sp, fp, #12
     e40:	ldrd	r4, [sp]
     e44:	ldr	fp, [sp, #8]
     e48:	add	sp, sp, #12
     e4c:	pop	{pc}		; (ldr pc, [sp], #4)

00000e50 <coda_ascbin_cursor_goto_available_union_field>:
     e50:	str	fp, [sp, #-8]!
     e54:	str	lr, [sp, #4]
     e58:	add	fp, sp, #4
     e5c:	sub	sp, sp, #16
     e60:	str	r0, [fp, #-16]
     e64:	ldr	r3, [fp, #-16]
     e68:	ldr	r3, [r3, #4]
     e6c:	sub	r3, r3, #1
     e70:	ldr	r2, [fp, #-16]
     e74:	lsl	r3, r3, #4
     e78:	add	r3, r2, r3
     e7c:	ldr	r3, [r3, #8]
     e80:	ldr	r3, [r3]
     e84:	cmp	r3, #99	; 0x63
     e88:	bhi	eac <coda_ascbin_cursor_goto_available_union_field+0x5c>
     e8c:	ldr	r3, [fp, #-16]
     e90:	ldr	r3, [r3, #4]
     e94:	sub	r3, r3, #1
     e98:	ldr	r2, [fp, #-16]
     e9c:	lsl	r3, r3, #4
     ea0:	add	r3, r2, r3
     ea4:	ldr	r3, [r3, #8]
     ea8:	b	ecc <coda_ascbin_cursor_goto_available_union_field+0x7c>
     eac:	ldr	r3, [fp, #-16]
     eb0:	ldr	r3, [r3, #4]
     eb4:	sub	r3, r3, #1
     eb8:	ldr	r2, [fp, #-16]
     ebc:	lsl	r3, r3, #4
     ec0:	add	r3, r2, r3
     ec4:	ldr	r3, [r3, #8]
     ec8:	ldr	r3, [r3, #4]
     ecc:	str	r3, [fp, #-8]
     ed0:	ldr	r3, [fp, #-8]
     ed4:	ldr	r3, [r3, #68]	; 0x44
     ed8:	cmp	r3, #0
     edc:	bne	ef8 <coda_ascbin_cursor_goto_available_union_field+0xa8>
     ee0:	movw	r1, #0
     ee4:	movt	r1, #0
     ee8:	mvn	r0, #104	; 0x68
     eec:	bl	0 <coda_set_error>
     ef0:	mvn	r3, #0
     ef4:	b	fcc <coda_ascbin_cursor_goto_available_union_field+0x17c>
     ef8:	sub	r3, fp, #12
     efc:	mov	r1, r3
     f00:	ldr	r0, [fp, #-16]
     f04:	bl	26e4 <coda_ascbin_cursor_get_available_union_field_index>
     f08:	mov	r3, r0
     f0c:	cmp	r3, #0
     f10:	beq	f1c <coda_ascbin_cursor_goto_available_union_field+0xcc>
     f14:	mvn	r3, #0
     f18:	b	fcc <coda_ascbin_cursor_goto_available_union_field+0x17c>
     f1c:	ldr	r3, [fp, #-16]
     f20:	ldr	r3, [r3, #4]
     f24:	add	r2, r3, #1
     f28:	ldr	r3, [fp, #-16]
     f2c:	str	r2, [r3, #4]
     f30:	ldr	r3, [fp, #-8]
     f34:	ldr	r2, [r3, #52]	; 0x34
     f38:	ldr	r3, [fp, #-12]
     f3c:	lsl	r3, r3, #2
     f40:	add	r3, r2, r3
     f44:	ldr	r2, [r3]
     f48:	ldr	r3, [fp, #-16]
     f4c:	ldr	r3, [r3, #4]
     f50:	sub	r3, r3, #1
     f54:	ldr	r2, [r2, #8]
     f58:	ldr	r1, [fp, #-16]
     f5c:	lsl	r3, r3, #4
     f60:	add	r3, r1, r3
     f64:	str	r2, [r3, #8]
     f68:	ldr	r3, [fp, #-16]
     f6c:	ldr	r3, [r3, #4]
     f70:	sub	r3, r3, #1
     f74:	ldr	r2, [fp, #-12]
     f78:	ldr	r1, [fp, #-16]
     f7c:	lsl	r3, r3, #4
     f80:	add	r3, r1, r3
     f84:	str	r2, [r3, #12]
     f88:	ldr	r3, [fp, #-16]
     f8c:	ldr	r3, [r3, #4]
     f90:	sub	r3, r3, #2
     f94:	ldr	r2, [fp, #-16]
     f98:	ldr	r2, [r2, #4]
     f9c:	sub	r1, r2, #1
     fa0:	ldr	r2, [fp, #-16]
     fa4:	add	r3, r3, #1
     fa8:	lsl	r3, r3, #4
     fac:	add	r3, r2, r3
     fb0:	ldrd	r2, [r3]
     fb4:	ldr	r0, [fp, #-16]
     fb8:	add	r1, r1, #1
     fbc:	lsl	r1, r1, #4
     fc0:	add	r1, r0, r1
     fc4:	strd	r2, [r1]
     fc8:	mov	r3, #0
     fcc:	mov	r0, r3
     fd0:	sub	sp, fp, #4
     fd4:	ldr	fp, [sp]
     fd8:	add	sp, sp, #4
     fdc:	pop	{pc}		; (ldr pc, [sp], #4)

00000fe0 <coda_ascbin_cursor_goto_array_element>:
     fe0:	strd	r4, [sp, #-24]!	; 0xffffffe8
     fe4:	strd	r6, [sp, #8]
     fe8:	str	fp, [sp, #16]
     fec:	str	lr, [sp, #20]
     ff0:	add	fp, sp, #20
     ff4:	sub	sp, sp, #48	; 0x30
     ff8:	str	r0, [fp, #-56]	; 0xffffffc8
     ffc:	str	r1, [fp, #-60]	; 0xffffffc4
    1000:	str	r2, [fp, #-64]	; 0xffffffc0
    1004:	ldr	r3, [fp, #-56]	; 0xffffffc8
    1008:	ldr	r3, [r3, #4]
    100c:	sub	r3, r3, #1
    1010:	ldr	r2, [fp, #-56]	; 0xffffffc8
    1014:	lsl	r3, r3, #4
    1018:	add	r3, r2, r3
    101c:	ldr	r3, [r3, #8]
    1020:	ldr	r3, [r3]
    1024:	cmp	r3, #99	; 0x63
    1028:	bhi	104c <coda_ascbin_cursor_goto_array_element+0x6c>
    102c:	ldr	r3, [fp, #-56]	; 0xffffffc8
    1030:	ldr	r3, [r3, #4]
    1034:	sub	r3, r3, #1
    1038:	ldr	r2, [fp, #-56]	; 0xffffffc8
    103c:	lsl	r3, r3, #4
    1040:	add	r3, r2, r3
    1044:	ldr	r3, [r3, #8]
    1048:	b	106c <coda_ascbin_cursor_goto_array_element+0x8c>
    104c:	ldr	r3, [fp, #-56]	; 0xffffffc8
    1050:	ldr	r3, [r3, #4]
    1054:	sub	r3, r3, #1
    1058:	ldr	r2, [fp, #-56]	; 0xffffffc8
    105c:	lsl	r3, r3, #4
    1060:	add	r3, r2, r3
    1064:	ldr	r3, [r3, #8]
    1068:	ldr	r3, [r3, #4]
    106c:	str	r3, [fp, #-36]	; 0xffffffdc
    1070:	ldr	r3, [fp, #-36]	; 0xffffffdc
    1074:	ldr	r3, [r3, #48]	; 0x30
    1078:	ldr	r2, [fp, #-60]	; 0xffffffc4
    107c:	cmp	r2, r3
    1080:	beq	10a8 <coda_ascbin_cursor_goto_array_element+0xc8>
    1084:	ldr	r3, [fp, #-36]	; 0xffffffdc
    1088:	ldr	r3, [r3, #48]	; 0x30
    108c:	ldr	r2, [fp, #-60]	; 0xffffffc4
    1090:	movw	r1, #0
    1094:	movt	r1, #0
    1098:	mvn	r0, #105	; 0x69
    109c:	bl	0 <coda_set_error>
    10a0:	mvn	r3, #0
    10a4:	b	1444 <coda_ascbin_cursor_goto_array_element+0x464>
    10a8:	mov	r3, #0
    10ac:	str	r3, [fp, #-24]	; 0xffffffe8
    10b0:	mov	r3, #0
    10b4:	str	r3, [fp, #-28]	; 0xffffffe4
    10b8:	b	1210 <coda_ascbin_cursor_goto_array_element+0x230>
    10bc:	ldr	r2, [fp, #-36]	; 0xffffffdc
    10c0:	ldr	r3, [fp, #-28]	; 0xffffffe4
    10c4:	add	r3, r3, #12
    10c8:	lsl	r3, r3, #2
    10cc:	add	r3, r2, r3
    10d0:	ldr	r3, [r3, #4]
    10d4:	cmn	r3, #1
    10d8:	bne	1140 <coda_ascbin_cursor_goto_array_element+0x160>
    10dc:	ldr	r2, [fp, #-36]	; 0xffffffdc
    10e0:	ldr	r3, [fp, #-28]	; 0xffffffe4
    10e4:	add	r3, r3, #20
    10e8:	lsl	r3, r3, #2
    10ec:	add	r3, r2, r3
    10f0:	ldr	r3, [r3, #4]
    10f4:	sub	r2, fp, #44	; 0x2c
    10f8:	ldr	r1, [fp, #-56]	; 0xffffffc8
    10fc:	mov	r0, r3
    1100:	bl	0 <coda_expression_eval_integer>
    1104:	mov	r3, r0
    1108:	cmp	r3, #0
    110c:	beq	1130 <coda_ascbin_cursor_goto_array_element+0x150>
    1110:	ldr	r1, [fp, #-28]	; 0xffffffe4
    1114:	movw	r0, #0
    1118:	movt	r0, #0
    111c:	bl	0 <coda_add_error_message>
    1120:	ldr	r0, [fp, #-56]	; 0xffffffc8
    1124:	bl	0 <coda_cursor_add_to_error_message>
    1128:	mvn	r3, #0
    112c:	b	1444 <coda_ascbin_cursor_goto_array_element+0x464>
    1130:	ldrd	r2, [fp, #-44]	; 0xffffffd4
    1134:	mov	r3, r2
    1138:	str	r3, [fp, #-32]	; 0xffffffe0
    113c:	b	115c <coda_ascbin_cursor_goto_array_element+0x17c>
    1140:	ldr	r2, [fp, #-36]	; 0xffffffdc
    1144:	ldr	r3, [fp, #-28]	; 0xffffffe4
    1148:	add	r3, r3, #12
    114c:	lsl	r3, r3, #2
    1150:	add	r3, r2, r3
    1154:	ldr	r3, [r3, #4]
    1158:	str	r3, [fp, #-32]	; 0xffffffe0
    115c:	ldr	r3, [fp, #-28]	; 0xffffffe4
    1160:	lsl	r3, r3, #2
    1164:	ldr	r2, [fp, #-64]	; 0xffffffc0
    1168:	add	r3, r2, r3
    116c:	ldr	r3, [r3]
    1170:	cmp	r3, #0
    1174:	blt	1198 <coda_ascbin_cursor_goto_array_element+0x1b8>
    1178:	ldr	r3, [fp, #-28]	; 0xffffffe4
    117c:	lsl	r3, r3, #2
    1180:	ldr	r2, [fp, #-64]	; 0xffffffc0
    1184:	add	r3, r2, r3
    1188:	ldr	r3, [r3]
    118c:	ldr	r2, [fp, #-32]	; 0xffffffe0
    1190:	cmp	r2, r3
    1194:	bgt	11c8 <coda_ascbin_cursor_goto_array_element+0x1e8>
    1198:	ldr	r3, [fp, #-28]	; 0xffffffe4
    119c:	lsl	r3, r3, #2
    11a0:	ldr	r2, [fp, #-64]	; 0xffffffc0
    11a4:	add	r3, r2, r3
    11a8:	ldr	r2, [r3]
    11ac:	ldr	r3, [fp, #-32]	; 0xffffffe0
    11b0:	movw	r1, #0
    11b4:	movt	r1, #0
    11b8:	mvn	r0, #106	; 0x6a
    11bc:	bl	0 <coda_set_error>
    11c0:	mvn	r3, #0
    11c4:	b	1444 <coda_ascbin_cursor_goto_array_element+0x464>
    11c8:	ldr	r3, [fp, #-28]	; 0xffffffe4
    11cc:	cmp	r3, #0
    11d0:	ble	11e4 <coda_ascbin_cursor_goto_array_element+0x204>
    11d4:	ldr	r3, [fp, #-24]	; 0xffffffe8
    11d8:	ldr	r2, [fp, #-32]	; 0xffffffe0
    11dc:	mul	r3, r2, r3
    11e0:	str	r3, [fp, #-24]	; 0xffffffe8
    11e4:	ldr	r3, [fp, #-28]	; 0xffffffe4
    11e8:	lsl	r3, r3, #2
    11ec:	ldr	r2, [fp, #-64]	; 0xffffffc0
    11f0:	add	r3, r2, r3
    11f4:	ldr	r3, [r3]
    11f8:	ldr	r2, [fp, #-24]	; 0xffffffe8
    11fc:	add	r3, r2, r3
    1200:	str	r3, [fp, #-24]	; 0xffffffe8
    1204:	ldr	r3, [fp, #-28]	; 0xffffffe4
    1208:	add	r3, r3, #1
    120c:	str	r3, [fp, #-28]	; 0xffffffe4
    1210:	ldr	r3, [fp, #-36]	; 0xffffffdc
    1214:	ldr	r3, [r3, #48]	; 0x30
    1218:	ldr	r2, [fp, #-28]	; 0xffffffe4
    121c:	cmp	r2, r3
    1220:	blt	10bc <coda_ascbin_cursor_goto_array_element+0xdc>
    1224:	ldr	r3, [fp, #-56]	; 0xffffffc8
    1228:	ldr	r3, [r3, #4]
    122c:	add	r2, r3, #1
    1230:	ldr	r3, [fp, #-56]	; 0xffffffc8
    1234:	str	r2, [r3, #4]
    1238:	ldr	r3, [fp, #-56]	; 0xffffffc8
    123c:	ldr	r3, [r3, #4]
    1240:	sub	r3, r3, #2
    1244:	ldr	r2, [fp, #-56]	; 0xffffffc8
    1248:	ldr	r2, [r2, #4]
    124c:	sub	r1, r2, #1
    1250:	ldr	r2, [fp, #-56]	; 0xffffffc8
    1254:	add	r3, r3, #1
    1258:	lsl	r3, r3, #4
    125c:	add	r3, r2, r3
    1260:	ldrd	r2, [r3]
    1264:	ldr	r0, [fp, #-56]	; 0xffffffc8
    1268:	add	r1, r1, #1
    126c:	lsl	r1, r1, #4
    1270:	add	r1, r0, r1
    1274:	strd	r2, [r1]
    1278:	ldr	r3, [fp, #-36]	; 0xffffffdc
    127c:	ldr	r3, [r3, #40]	; 0x28
    1280:	ldrd	r2, [r3, #24]
    1284:	cmp	r2, #0
    1288:	sbcs	r3, r3, #0
    128c:	blt	130c <coda_ascbin_cursor_goto_array_element+0x32c>
    1290:	ldr	r3, [fp, #-56]	; 0xffffffc8
    1294:	ldr	r3, [r3, #4]
    1298:	sub	r3, r3, #1
    129c:	ldr	r2, [fp, #-56]	; 0xffffffc8
    12a0:	add	r3, r3, #1
    12a4:	lsl	r3, r3, #4
    12a8:	add	r3, r2, r3
    12ac:	ldrd	r4, [r3]
    12b0:	ldr	r3, [fp, #-24]	; 0xffffffe8
    12b4:	mov	r0, r3
    12b8:	asr	r1, r0, #31
    12bc:	ldr	r3, [fp, #-36]	; 0xffffffdc
    12c0:	ldr	r3, [r3, #40]	; 0x28
    12c4:	ldrd	r2, [r3, #24]
    12c8:	mul	lr, r2, r1
    12cc:	mul	ip, r0, r3
    12d0:	add	ip, lr, ip
    12d4:	umull	r2, r3, r0, r2
    12d8:	add	r1, ip, r3
    12dc:	mov	r3, r1
    12e0:	ldr	r1, [fp, #-56]	; 0xffffffc8
    12e4:	ldr	r1, [r1, #4]
    12e8:	sub	r1, r1, #1
    12ec:	adds	r6, r4, r2
    12f0:	adc	r7, r5, r3
    12f4:	ldr	r2, [fp, #-56]	; 0xffffffc8
    12f8:	add	r3, r1, #1
    12fc:	lsl	r3, r3, #4
    1300:	add	r3, r2, r3
    1304:	strd	r6, [r3]
    1308:	b	13fc <coda_ascbin_cursor_goto_array_element+0x41c>
    130c:	mov	r3, #0
    1310:	str	r3, [fp, #-28]	; 0xffffffe4
    1314:	b	13ec <coda_ascbin_cursor_goto_array_element+0x40c>
    1318:	ldr	r3, [fp, #-56]	; 0xffffffc8
    131c:	ldr	r3, [r3, #4]
    1320:	sub	r3, r3, #1
    1324:	ldr	r2, [fp, #-36]	; 0xffffffdc
    1328:	ldr	r2, [r2, #40]	; 0x28
    132c:	ldr	r1, [fp, #-56]	; 0xffffffc8
    1330:	lsl	r3, r3, #4
    1334:	add	r3, r1, r3
    1338:	str	r2, [r3, #8]
    133c:	ldr	r3, [fp, #-56]	; 0xffffffc8
    1340:	ldr	r3, [r3, #4]
    1344:	sub	r3, r3, #1
    1348:	ldr	r2, [fp, #-56]	; 0xffffffc8
    134c:	lsl	r3, r3, #4
    1350:	add	r3, r2, r3
    1354:	ldr	r2, [fp, #-28]	; 0xffffffe4
    1358:	str	r2, [r3, #12]
    135c:	sub	r3, fp, #52	; 0x34
    1360:	mov	r1, r3
    1364:	ldr	r0, [fp, #-56]	; 0xffffffc8
    1368:	bl	0 <coda_cursor_get_bit_size>
    136c:	mov	r3, r0
    1370:	cmp	r3, #0
    1374:	beq	1394 <coda_ascbin_cursor_goto_array_element+0x3b4>
    1378:	ldr	r3, [fp, #-56]	; 0xffffffc8
    137c:	ldr	r3, [r3, #4]
    1380:	sub	r2, r3, #1
    1384:	ldr	r3, [fp, #-56]	; 0xffffffc8
    1388:	str	r2, [r3, #4]
    138c:	mvn	r3, #0
    1390:	b	1444 <coda_ascbin_cursor_goto_array_element+0x464>
    1394:	ldr	r3, [fp, #-56]	; 0xffffffc8
    1398:	ldr	r3, [r3, #4]
    139c:	sub	r3, r3, #1
    13a0:	ldr	r2, [fp, #-56]	; 0xffffffc8
    13a4:	add	r3, r3, #1
    13a8:	lsl	r3, r3, #4
    13ac:	add	r3, r2, r3
    13b0:	ldrd	r0, [r3]
    13b4:	ldrd	r2, [fp, #-52]	; 0xffffffcc
    13b8:	ldr	ip, [fp, #-56]	; 0xffffffc8
    13bc:	ldr	ip, [ip, #4]
    13c0:	sub	ip, ip, #1
    13c4:	adds	r4, r0, r2
    13c8:	adc	r5, r1, r3
    13cc:	ldr	r2, [fp, #-56]	; 0xffffffc8
    13d0:	add	r3, ip, #1
    13d4:	lsl	r3, r3, #4
    13d8:	add	r3, r2, r3
    13dc:	strd	r4, [r3]
    13e0:	ldr	r3, [fp, #-28]	; 0xffffffe4
    13e4:	add	r3, r3, #1
    13e8:	str	r3, [fp, #-28]	; 0xffffffe4
    13ec:	ldr	r2, [fp, #-28]	; 0xffffffe4
    13f0:	ldr	r3, [fp, #-24]	; 0xffffffe8
    13f4:	cmp	r2, r3
    13f8:	blt	1318 <coda_ascbin_cursor_goto_array_element+0x338>
    13fc:	ldr	r3, [fp, #-56]	; 0xffffffc8
    1400:	ldr	r3, [r3, #4]
    1404:	sub	r3, r3, #1
    1408:	ldr	r2, [fp, #-36]	; 0xffffffdc
    140c:	ldr	r2, [r2, #40]	; 0x28
    1410:	ldr	r1, [fp, #-56]	; 0xffffffc8
    1414:	lsl	r3, r3, #4
    1418:	add	r3, r1, r3
    141c:	str	r2, [r3, #8]
    1420:	ldr	r3, [fp, #-56]	; 0xffffffc8
    1424:	ldr	r3, [r3, #4]
    1428:	sub	r3, r3, #1
    142c:	ldr	r2, [fp, #-56]	; 0xffffffc8
    1430:	lsl	r3, r3, #4
    1434:	add	r3, r2, r3
    1438:	ldr	r2, [fp, #-24]	; 0xffffffe8
    143c:	str	r2, [r3, #12]
    1440:	mov	r3, #0
    1444:	mov	r0, r3
    1448:	sub	sp, fp, #20
    144c:	ldrd	r4, [sp]
    1450:	ldrd	r6, [sp, #8]
    1454:	ldr	fp, [sp, #16]
    1458:	add	sp, sp, #20
    145c:	pop	{pc}		; (ldr pc, [sp], #4)

00001460 <coda_ascbin_cursor_goto_array_element_by_index>:
    1460:	strd	r4, [sp, #-24]!	; 0xffffffe8
    1464:	strd	r6, [sp, #8]
    1468:	str	fp, [sp, #16]
    146c:	str	lr, [sp, #20]
    1470:	add	fp, sp, #20
    1474:	sub	sp, sp, #32
    1478:	str	r0, [fp, #-48]	; 0xffffffd0
    147c:	str	r1, [fp, #-52]	; 0xffffffcc
    1480:	ldr	r3, [fp, #-48]	; 0xffffffd0
    1484:	ldr	r3, [r3, #4]
    1488:	sub	r3, r3, #1
    148c:	ldr	r2, [fp, #-48]	; 0xffffffd0
    1490:	lsl	r3, r3, #4
    1494:	add	r3, r2, r3
    1498:	ldr	r3, [r3, #8]
    149c:	ldr	r3, [r3]
    14a0:	cmp	r3, #99	; 0x63
    14a4:	bhi	14c8 <coda_ascbin_cursor_goto_array_element_by_index+0x68>
    14a8:	ldr	r3, [fp, #-48]	; 0xffffffd0
    14ac:	ldr	r3, [r3, #4]
    14b0:	sub	r3, r3, #1
    14b4:	ldr	r2, [fp, #-48]	; 0xffffffd0
    14b8:	lsl	r3, r3, #4
    14bc:	add	r3, r2, r3
    14c0:	ldr	r3, [r3, #8]
    14c4:	b	14e8 <coda_ascbin_cursor_goto_array_element_by_index+0x88>
    14c8:	ldr	r3, [fp, #-48]	; 0xffffffd0
    14cc:	ldr	r3, [r3, #4]
    14d0:	sub	r3, r3, #1
    14d4:	ldr	r2, [fp, #-48]	; 0xffffffd0
    14d8:	lsl	r3, r3, #4
    14dc:	add	r3, r2, r3
    14e0:	ldr	r3, [r3, #8]
    14e4:	ldr	r3, [r3, #4]
    14e8:	str	r3, [fp, #-28]	; 0xffffffe4
    14ec:	ldr	r3, [pc, #684]	; 17a0 <coda_ascbin_cursor_goto_array_element_by_index+0x340>
    14f0:	ldr	r3, [pc, r3]
    14f4:	mrc	15, 0, r2, cr13, cr0, {3}
    14f8:	ldr	r3, [r2, r3]
    14fc:	cmp	r3, #0
    1500:	beq	1564 <coda_ascbin_cursor_goto_array_element_by_index+0x104>
    1504:	sub	r3, fp, #32
    1508:	mov	r1, r3
    150c:	ldr	r0, [fp, #-48]	; 0xffffffd0
    1510:	bl	0 <coda_cursor_get_num_elements>
    1514:	mov	r3, r0
    1518:	cmp	r3, #0
    151c:	beq	1528 <coda_ascbin_cursor_goto_array_element_by_index+0xc8>
    1520:	mvn	r3, #0
    1524:	b	1784 <coda_ascbin_cursor_goto_array_element_by_index+0x324>
    1528:	ldr	r3, [fp, #-52]	; 0xffffffcc
    152c:	cmp	r3, #0
    1530:	blt	1544 <coda_ascbin_cursor_goto_array_element_by_index+0xe4>
    1534:	ldr	r3, [fp, #-32]	; 0xffffffe0
    1538:	ldr	r2, [fp, #-52]	; 0xffffffcc
    153c:	cmp	r2, r3
    1540:	blt	1564 <coda_ascbin_cursor_goto_array_element_by_index+0x104>
    1544:	ldr	r3, [fp, #-32]	; 0xffffffe0
    1548:	ldr	r2, [fp, #-52]	; 0xffffffcc
    154c:	movw	r1, #0
    1550:	movt	r1, #0
    1554:	mvn	r0, #106	; 0x6a
    1558:	bl	0 <coda_set_error>
    155c:	mvn	r3, #0
    1560:	b	1784 <coda_ascbin_cursor_goto_array_element_by_index+0x324>
    1564:	ldr	r3, [fp, #-48]	; 0xffffffd0
    1568:	ldr	r3, [r3, #4]
    156c:	add	r2, r3, #1
    1570:	ldr	r3, [fp, #-48]	; 0xffffffd0
    1574:	str	r2, [r3, #4]
    1578:	ldr	r3, [fp, #-48]	; 0xffffffd0
    157c:	ldr	r3, [r3, #4]
    1580:	sub	r3, r3, #2
    1584:	ldr	r2, [fp, #-48]	; 0xffffffd0
    1588:	ldr	r2, [r2, #4]
    158c:	sub	r1, r2, #1
    1590:	ldr	r2, [fp, #-48]	; 0xffffffd0
    1594:	add	r3, r3, #1
    1598:	lsl	r3, r3, #4
    159c:	add	r3, r2, r3
    15a0:	ldrd	r2, [r3]
    15a4:	ldr	r0, [fp, #-48]	; 0xffffffd0
    15a8:	add	r1, r1, #1
    15ac:	lsl	r1, r1, #4
    15b0:	add	r1, r0, r1
    15b4:	strd	r2, [r1]
    15b8:	ldr	r3, [fp, #-28]	; 0xffffffe4
    15bc:	ldr	r3, [r3, #40]	; 0x28
    15c0:	ldrd	r2, [r3, #24]
    15c4:	cmp	r2, #0
    15c8:	sbcs	r3, r3, #0
    15cc:	blt	164c <coda_ascbin_cursor_goto_array_element_by_index+0x1ec>
    15d0:	ldr	r3, [fp, #-48]	; 0xffffffd0
    15d4:	ldr	r3, [r3, #4]
    15d8:	sub	r3, r3, #1
    15dc:	ldr	r2, [fp, #-48]	; 0xffffffd0
    15e0:	add	r3, r3, #1
    15e4:	lsl	r3, r3, #4
    15e8:	add	r3, r2, r3
    15ec:	ldrd	r4, [r3]
    15f0:	ldr	r3, [fp, #-52]	; 0xffffffcc
    15f4:	mov	r0, r3
    15f8:	asr	r1, r0, #31
    15fc:	ldr	r3, [fp, #-28]	; 0xffffffe4
    1600:	ldr	r3, [r3, #40]	; 0x28
    1604:	ldrd	r2, [r3, #24]
    1608:	mul	lr, r2, r1
    160c:	mul	ip, r0, r3
    1610:	add	ip, lr, ip
    1614:	umull	r2, r3, r0, r2
    1618:	add	r1, ip, r3
    161c:	mov	r3, r1
    1620:	ldr	r1, [fp, #-48]	; 0xffffffd0
    1624:	ldr	r1, [r1, #4]
    1628:	sub	r1, r1, #1
    162c:	adds	r6, r4, r2
    1630:	adc	r7, r5, r3
    1634:	ldr	r2, [fp, #-48]	; 0xffffffd0
    1638:	add	r3, r1, #1
    163c:	lsl	r3, r3, #4
    1640:	add	r3, r2, r3
    1644:	strd	r6, [r3]
    1648:	b	173c <coda_ascbin_cursor_goto_array_element_by_index+0x2dc>
    164c:	mov	r3, #0
    1650:	str	r3, [fp, #-24]	; 0xffffffe8
    1654:	b	172c <coda_ascbin_cursor_goto_array_element_by_index+0x2cc>
    1658:	ldr	r3, [fp, #-48]	; 0xffffffd0
    165c:	ldr	r3, [r3, #4]
    1660:	sub	r3, r3, #1
    1664:	ldr	r2, [fp, #-28]	; 0xffffffe4
    1668:	ldr	r2, [r2, #40]	; 0x28
    166c:	ldr	r1, [fp, #-48]	; 0xffffffd0
    1670:	lsl	r3, r3, #4
    1674:	add	r3, r1, r3
    1678:	str	r2, [r3, #8]
    167c:	ldr	r3, [fp, #-48]	; 0xffffffd0
    1680:	ldr	r3, [r3, #4]
    1684:	sub	r3, r3, #1
    1688:	ldr	r2, [fp, #-48]	; 0xffffffd0
    168c:	lsl	r3, r3, #4
    1690:	add	r3, r2, r3
    1694:	ldr	r2, [fp, #-24]	; 0xffffffe8
    1698:	str	r2, [r3, #12]
    169c:	sub	r3, fp, #44	; 0x2c
    16a0:	mov	r1, r3
    16a4:	ldr	r0, [fp, #-48]	; 0xffffffd0
    16a8:	bl	0 <coda_cursor_get_bit_size>
    16ac:	mov	r3, r0
    16b0:	cmp	r3, #0
    16b4:	beq	16d4 <coda_ascbin_cursor_goto_array_element_by_index+0x274>
    16b8:	ldr	r3, [fp, #-48]	; 0xffffffd0
    16bc:	ldr	r3, [r3, #4]
    16c0:	sub	r2, r3, #1
    16c4:	ldr	r3, [fp, #-48]	; 0xffffffd0
    16c8:	str	r2, [r3, #4]
    16cc:	mvn	r3, #0
    16d0:	b	1784 <coda_ascbin_cursor_goto_array_element_by_index+0x324>
    16d4:	ldr	r3, [fp, #-48]	; 0xffffffd0
    16d8:	ldr	r3, [r3, #4]
    16dc:	sub	r3, r3, #1
    16e0:	ldr	r2, [fp, #-48]	; 0xffffffd0
    16e4:	add	r3, r3, #1
    16e8:	lsl	r3, r3, #4
    16ec:	add	r3, r2, r3
    16f0:	ldrd	r0, [r3]
    16f4:	ldrd	r2, [fp, #-44]	; 0xffffffd4
    16f8:	ldr	ip, [fp, #-48]	; 0xffffffd0
    16fc:	ldr	ip, [ip, #4]
    1700:	sub	ip, ip, #1
    1704:	adds	r4, r0, r2
    1708:	adc	r5, r1, r3
    170c:	ldr	r2, [fp, #-48]	; 0xffffffd0
    1710:	add	r3, ip, #1
    1714:	lsl	r3, r3, #4
    1718:	add	r3, r2, r3
    171c:	strd	r4, [r3]
    1720:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1724:	add	r3, r3, #1
    1728:	str	r3, [fp, #-24]	; 0xffffffe8
    172c:	ldr	r2, [fp, #-24]	; 0xffffffe8
    1730:	ldr	r3, [fp, #-52]	; 0xffffffcc
    1734:	cmp	r2, r3
    1738:	blt	1658 <coda_ascbin_cursor_goto_array_element_by_index+0x1f8>
    173c:	ldr	r3, [fp, #-48]	; 0xffffffd0
    1740:	ldr	r3, [r3, #4]
    1744:	sub	r3, r3, #1
    1748:	ldr	r2, [fp, #-28]	; 0xffffffe4
    174c:	ldr	r2, [r2, #40]	; 0x28
    1750:	ldr	r1, [fp, #-48]	; 0xffffffd0
    1754:	lsl	r3, r3, #4
    1758:	add	r3, r1, r3
    175c:	str	r2, [r3, #8]
    1760:	ldr	r3, [fp, #-48]	; 0xffffffd0
    1764:	ldr	r3, [r3, #4]
    1768:	sub	r3, r3, #1
    176c:	ldr	r2, [fp, #-48]	; 0xffffffd0
    1770:	lsl	r3, r3, #4
    1774:	add	r3, r2, r3
    1778:	ldr	r2, [fp, #-52]	; 0xffffffcc
    177c:	str	r2, [r3, #12]
    1780:	mov	r3, #0
    1784:	mov	r0, r3
    1788:	sub	sp, fp, #20
    178c:	ldrd	r4, [sp]
    1790:	ldrd	r6, [sp, #8]
    1794:	ldr	fp, [sp, #16]
    1798:	add	sp, sp, #20
    179c:	pop	{pc}		; (ldr pc, [sp], #4)
    17a0:	.word	0x000002a8

000017a4 <coda_ascbin_cursor_goto_next_array_element>:
    17a4:	strd	r4, [sp, #-16]!
    17a8:	str	fp, [sp, #8]
    17ac:	str	lr, [sp, #12]
    17b0:	add	fp, sp, #12
    17b4:	sub	sp, sp, #32
    17b8:	str	r0, [fp, #-40]	; 0xffffffd8
    17bc:	ldr	r3, [fp, #-40]	; 0xffffffd8
    17c0:	ldr	r3, [r3, #4]
    17c4:	sub	r3, r3, #2
    17c8:	ldr	r2, [fp, #-40]	; 0xffffffd8
    17cc:	lsl	r3, r3, #4
    17d0:	add	r3, r2, r3
    17d4:	ldr	r3, [r3, #8]
    17d8:	ldr	r3, [r3]
    17dc:	cmp	r3, #99	; 0x63
    17e0:	bhi	1804 <coda_ascbin_cursor_goto_next_array_element+0x60>
    17e4:	ldr	r3, [fp, #-40]	; 0xffffffd8
    17e8:	ldr	r3, [r3, #4]
    17ec:	sub	r3, r3, #2
    17f0:	ldr	r2, [fp, #-40]	; 0xffffffd8
    17f4:	lsl	r3, r3, #4
    17f8:	add	r3, r2, r3
    17fc:	ldr	r3, [r3, #8]
    1800:	b	1824 <coda_ascbin_cursor_goto_next_array_element+0x80>
    1804:	ldr	r3, [fp, #-40]	; 0xffffffd8
    1808:	ldr	r3, [r3, #4]
    180c:	sub	r3, r3, #2
    1810:	ldr	r2, [fp, #-40]	; 0xffffffd8
    1814:	lsl	r3, r3, #4
    1818:	add	r3, r2, r3
    181c:	ldr	r3, [r3, #8]
    1820:	ldr	r3, [r3, #4]
    1824:	str	r3, [fp, #-16]
    1828:	ldr	r3, [fp, #-40]	; 0xffffffd8
    182c:	ldr	r3, [r3, #4]
    1830:	sub	r3, r3, #1
    1834:	ldr	r2, [fp, #-40]	; 0xffffffd8
    1838:	lsl	r3, r3, #4
    183c:	add	r3, r2, r3
    1840:	ldr	r3, [r3, #12]
    1844:	add	r3, r3, #1
    1848:	str	r3, [fp, #-20]	; 0xffffffec
    184c:	ldr	r3, [pc, #380]	; 19d0 <coda_ascbin_cursor_goto_next_array_element+0x22c>
    1850:	ldr	r3, [pc, r3]
    1854:	mrc	15, 0, r2, cr13, cr0, {3}
    1858:	ldr	r3, [r2, r3]
    185c:	cmp	r3, #0
    1860:	beq	1900 <coda_ascbin_cursor_goto_next_array_element+0x15c>
    1864:	ldr	r3, [fp, #-40]	; 0xffffffd8
    1868:	ldr	r3, [r3, #4]
    186c:	sub	r2, r3, #1
    1870:	ldr	r3, [fp, #-40]	; 0xffffffd8
    1874:	str	r2, [r3, #4]
    1878:	sub	r3, fp, #32
    187c:	mov	r1, r3
    1880:	ldr	r0, [fp, #-40]	; 0xffffffd8
    1884:	bl	0 <coda_cursor_get_num_elements>
    1888:	mov	r3, r0
    188c:	cmp	r3, #0
    1890:	beq	18b0 <coda_ascbin_cursor_goto_next_array_element+0x10c>
    1894:	ldr	r3, [fp, #-40]	; 0xffffffd8
    1898:	ldr	r3, [r3, #4]
    189c:	add	r2, r3, #1
    18a0:	ldr	r3, [fp, #-40]	; 0xffffffd8
    18a4:	str	r2, [r3, #4]
    18a8:	mvn	r3, #0
    18ac:	b	19b8 <coda_ascbin_cursor_goto_next_array_element+0x214>
    18b0:	ldr	r3, [fp, #-40]	; 0xffffffd8
    18b4:	ldr	r3, [r3, #4]
    18b8:	add	r2, r3, #1
    18bc:	ldr	r3, [fp, #-40]	; 0xffffffd8
    18c0:	str	r2, [r3, #4]
    18c4:	ldr	r3, [fp, #-20]	; 0xffffffec
    18c8:	cmp	r3, #0
    18cc:	blt	18e0 <coda_ascbin_cursor_goto_next_array_element+0x13c>
    18d0:	ldr	r3, [fp, #-32]	; 0xffffffe0
    18d4:	ldr	r2, [fp, #-20]	; 0xffffffec
    18d8:	cmp	r2, r3
    18dc:	blt	1900 <coda_ascbin_cursor_goto_next_array_element+0x15c>
    18e0:	ldr	r3, [fp, #-32]	; 0xffffffe0
    18e4:	ldr	r2, [fp, #-20]	; 0xffffffec
    18e8:	movw	r1, #0
    18ec:	movt	r1, #0
    18f0:	mvn	r0, #106	; 0x6a
    18f4:	bl	0 <coda_set_error>
    18f8:	mvn	r3, #0
    18fc:	b	19b8 <coda_ascbin_cursor_goto_next_array_element+0x214>
    1900:	sub	r3, fp, #28
    1904:	mov	r1, r3
    1908:	ldr	r0, [fp, #-40]	; 0xffffffd8
    190c:	bl	0 <coda_cursor_get_bit_size>
    1910:	mov	r3, r0
    1914:	cmp	r3, #0
    1918:	beq	1924 <coda_ascbin_cursor_goto_next_array_element+0x180>
    191c:	mvn	r3, #0
    1920:	b	19b8 <coda_ascbin_cursor_goto_next_array_element+0x214>
    1924:	ldr	r3, [fp, #-40]	; 0xffffffd8
    1928:	ldr	r3, [r3, #4]
    192c:	sub	r3, r3, #1
    1930:	ldr	r2, [fp, #-16]
    1934:	ldr	r2, [r2, #40]	; 0x28
    1938:	ldr	r1, [fp, #-40]	; 0xffffffd8
    193c:	lsl	r3, r3, #4
    1940:	add	r3, r1, r3
    1944:	str	r2, [r3, #8]
    1948:	ldr	r3, [fp, #-40]	; 0xffffffd8
    194c:	ldr	r3, [r3, #4]
    1950:	sub	r3, r3, #1
    1954:	ldr	r2, [fp, #-40]	; 0xffffffd8
    1958:	lsl	r3, r3, #4
    195c:	add	r3, r2, r3
    1960:	ldr	r2, [fp, #-20]	; 0xffffffec
    1964:	str	r2, [r3, #12]
    1968:	ldr	r3, [fp, #-40]	; 0xffffffd8
    196c:	ldr	r3, [r3, #4]
    1970:	sub	r3, r3, #1
    1974:	ldr	r2, [fp, #-40]	; 0xffffffd8
    1978:	add	r3, r3, #1
    197c:	lsl	r3, r3, #4
    1980:	add	r3, r2, r3
    1984:	ldrd	r0, [r3]
    1988:	ldrd	r2, [fp, #-28]	; 0xffffffe4
    198c:	ldr	ip, [fp, #-40]	; 0xffffffd8
    1990:	ldr	ip, [ip, #4]
    1994:	sub	ip, ip, #1
    1998:	adds	r4, r0, r2
    199c:	adc	r5, r1, r3
    19a0:	ldr	r2, [fp, #-40]	; 0xffffffd8
    19a4:	add	r3, ip, #1
    19a8:	lsl	r3, r3, #4
    19ac:	add	r3, r2, r3
    19b0:	strd	r4, [r3]
    19b4:	mov	r3, #0
    19b8:	mov	r0, r3
    19bc:	sub	sp, fp, #12
    19c0:	ldrd	r4, [sp]
    19c4:	ldr	fp, [sp, #8]
    19c8:	add	sp, sp, #12
    19cc:	pop	{pc}		; (ldr pc, [sp], #4)
    19d0:	.word	0x00000178

000019d4 <coda_ascbin_cursor_goto_attributes>:
    19d4:	str	r4, [sp, #-12]!
    19d8:	str	fp, [sp, #4]
    19dc:	str	lr, [sp, #8]
    19e0:	add	fp, sp, #8
    19e4:	sub	sp, sp, #20
    19e8:	str	r0, [fp, #-24]	; 0xffffffe8
    19ec:	ldr	r3, [fp, #-24]	; 0xffffffe8
    19f0:	ldr	r3, [r3, #4]
    19f4:	sub	r3, r3, #1
    19f8:	ldr	r2, [fp, #-24]	; 0xffffffe8
    19fc:	lsl	r3, r3, #4
    1a00:	add	r3, r2, r3
    1a04:	ldr	r3, [r3, #8]
    1a08:	ldr	r3, [r3]
    1a0c:	cmp	r3, #99	; 0x63
    1a10:	bhi	1a34 <coda_ascbin_cursor_goto_attributes+0x60>
    1a14:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1a18:	ldr	r3, [r3, #4]
    1a1c:	sub	r3, r3, #1
    1a20:	ldr	r2, [fp, #-24]	; 0xffffffe8
    1a24:	lsl	r3, r3, #4
    1a28:	add	r3, r2, r3
    1a2c:	ldr	r3, [r3, #8]
    1a30:	b	1a54 <coda_ascbin_cursor_goto_attributes+0x80>
    1a34:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1a38:	ldr	r3, [r3, #4]
    1a3c:	sub	r3, r3, #1
    1a40:	ldr	r2, [fp, #-24]	; 0xffffffe8
    1a44:	lsl	r3, r3, #4
    1a48:	add	r3, r2, r3
    1a4c:	ldr	r3, [r3, #8]
    1a50:	ldr	r3, [r3, #4]
    1a54:	ldr	r3, [r3]
    1a58:	str	r3, [fp, #-16]
    1a5c:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1a60:	ldr	r3, [r3, #4]
    1a64:	add	r2, r3, #1
    1a68:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1a6c:	str	r2, [r3, #4]
    1a70:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1a74:	ldr	r3, [r3, #4]
    1a78:	sub	r4, r3, #1
    1a7c:	ldr	r0, [fp, #-16]
    1a80:	bl	0 <coda_type_empty_record>
    1a84:	mov	r1, r0
    1a88:	ldr	r2, [fp, #-24]	; 0xffffffe8
    1a8c:	lsl	r3, r4, #4
    1a90:	add	r3, r2, r3
    1a94:	str	r1, [r3, #8]
    1a98:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1a9c:	ldr	r3, [r3, #4]
    1aa0:	sub	r3, r3, #1
    1aa4:	ldr	r2, [fp, #-24]	; 0xffffffe8
    1aa8:	lsl	r3, r3, #4
    1aac:	add	r3, r2, r3
    1ab0:	mvn	r2, #0
    1ab4:	str	r2, [r3, #12]
    1ab8:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1abc:	ldr	r3, [r3, #4]
    1ac0:	sub	r3, r3, #1
    1ac4:	ldr	r2, [fp, #-24]	; 0xffffffe8
    1ac8:	add	r3, r3, #1
    1acc:	lsl	r3, r3, #4
    1ad0:	add	r1, r2, r3
    1ad4:	mvn	r2, #0
    1ad8:	mvn	r3, #0
    1adc:	strd	r2, [r1]
    1ae0:	mov	r3, #0
    1ae4:	mov	r0, r3
    1ae8:	sub	sp, fp, #8
    1aec:	ldr	r4, [sp]
    1af0:	ldr	fp, [sp, #4]
    1af4:	add	sp, sp, #8
    1af8:	pop	{pc}		; (ldr pc, [sp], #4)

00001afc <coda_ascbin_cursor_use_base_type_of_special_type>:
    1afc:	push	{fp}		; (str fp, [sp, #-4]!)
    1b00:	add	fp, sp, #0
    1b04:	sub	sp, sp, #20
    1b08:	str	r0, [fp, #-16]
    1b0c:	ldr	r3, [fp, #-16]
    1b10:	ldr	r3, [r3, #4]
    1b14:	sub	r3, r3, #1
    1b18:	ldr	r2, [fp, #-16]
    1b1c:	lsl	r3, r3, #4
    1b20:	add	r3, r2, r3
    1b24:	ldr	r3, [r3, #8]
    1b28:	ldr	r3, [r3]
    1b2c:	cmp	r3, #99	; 0x63
    1b30:	bhi	1b54 <coda_ascbin_cursor_use_base_type_of_special_type+0x58>
    1b34:	ldr	r3, [fp, #-16]
    1b38:	ldr	r3, [r3, #4]
    1b3c:	sub	r3, r3, #1
    1b40:	ldr	r2, [fp, #-16]
    1b44:	lsl	r3, r3, #4
    1b48:	add	r3, r2, r3
    1b4c:	ldr	r3, [r3, #8]
    1b50:	b	1b74 <coda_ascbin_cursor_use_base_type_of_special_type+0x78>
    1b54:	ldr	r3, [fp, #-16]
    1b58:	ldr	r3, [r3, #4]
    1b5c:	sub	r3, r3, #1
    1b60:	ldr	r2, [fp, #-16]
    1b64:	lsl	r3, r3, #4
    1b68:	add	r3, r2, r3
    1b6c:	ldr	r3, [r3, #8]
    1b70:	ldr	r3, [r3, #4]
    1b74:	str	r3, [fp, #-8]
    1b78:	ldr	r3, [fp, #-16]
    1b7c:	ldr	r3, [r3, #4]
    1b80:	sub	r3, r3, #1
    1b84:	ldr	r2, [fp, #-8]
    1b88:	ldr	r2, [r2, #44]	; 0x2c
    1b8c:	ldr	r1, [fp, #-16]
    1b90:	lsl	r3, r3, #4
    1b94:	add	r3, r1, r3
    1b98:	str	r2, [r3, #8]
    1b9c:	mov	r3, #0
    1ba0:	mov	r0, r3
    1ba4:	add	sp, fp, #0
    1ba8:	pop	{fp}		; (ldr fp, [sp], #4)
    1bac:	bx	lr

00001bb0 <coda_ascbin_cursor_get_bit_size>:
    1bb0:	strd	r4, [sp, #-32]!	; 0xffffffe0
    1bb4:	strd	r6, [sp, #8]
    1bb8:	strd	r8, [sp, #16]
    1bbc:	str	fp, [sp, #24]
    1bc0:	str	lr, [sp, #28]
    1bc4:	add	fp, sp, #28
    1bc8:	sub	sp, sp, #608	; 0x260
    1bcc:	str	r0, [fp, #-624]	; 0xfffffd90
    1bd0:	str	r1, [fp, #-628]	; 0xfffffd8c
    1bd4:	ldr	r3, [fp, #-624]	; 0xfffffd90
    1bd8:	ldr	r3, [r3, #4]
    1bdc:	sub	r3, r3, #1
    1be0:	ldr	r2, [fp, #-624]	; 0xfffffd90
    1be4:	lsl	r3, r3, #4
    1be8:	add	r3, r2, r3
    1bec:	ldr	r3, [r3, #8]
    1bf0:	ldr	r3, [r3]
    1bf4:	cmp	r3, #99	; 0x63
    1bf8:	bhi	1c1c <coda_ascbin_cursor_get_bit_size+0x6c>
    1bfc:	ldr	r3, [fp, #-624]	; 0xfffffd90
    1c00:	ldr	r3, [r3, #4]
    1c04:	sub	r3, r3, #1
    1c08:	ldr	r2, [fp, #-624]	; 0xfffffd90
    1c0c:	lsl	r3, r3, #4
    1c10:	add	r3, r2, r3
    1c14:	ldr	r3, [r3, #8]
    1c18:	b	1c3c <coda_ascbin_cursor_get_bit_size+0x8c>
    1c1c:	ldr	r3, [fp, #-624]	; 0xfffffd90
    1c20:	ldr	r3, [r3, #4]
    1c24:	sub	r3, r3, #1
    1c28:	ldr	r2, [fp, #-624]	; 0xfffffd90
    1c2c:	lsl	r3, r3, #4
    1c30:	add	r3, r2, r3
    1c34:	ldr	r3, [r3, #8]
    1c38:	ldr	r3, [r3, #4]
    1c3c:	str	r3, [fp, #-60]	; 0xffffffc4
    1c40:	ldr	r3, [fp, #-60]	; 0xffffffc4
    1c44:	ldrd	r2, [r3, #24]
    1c48:	cmp	r2, #0
    1c4c:	sbcs	r3, r3, #0
    1c50:	blt	1c68 <coda_ascbin_cursor_get_bit_size+0xb8>
    1c54:	ldr	r3, [fp, #-60]	; 0xffffffc4
    1c58:	ldrd	r2, [r3, #24]
    1c5c:	ldr	r1, [fp, #-628]	; 0xfffffd8c
    1c60:	strd	r2, [r1]
    1c64:	b	22b8 <coda_ascbin_cursor_get_bit_size+0x708>
    1c68:	ldr	r3, [fp, #-60]	; 0xffffffc4
    1c6c:	ldr	r3, [r3, #8]
    1c70:	cmp	r3, #0
    1c74:	beq	1c84 <coda_ascbin_cursor_get_bit_size+0xd4>
    1c78:	cmp	r3, #1
    1c7c:	beq	2094 <coda_ascbin_cursor_get_bit_size+0x4e4>
    1c80:	b	2294 <coda_ascbin_cursor_get_bit_size+0x6e4>
    1c84:	ldr	r3, [fp, #-60]	; 0xffffffc4
    1c88:	str	r3, [fp, #-64]	; 0xffffffc0
    1c8c:	ldr	r3, [pc, #1608]	; 22dc <coda_ascbin_cursor_get_bit_size+0x72c>
    1c90:	ldr	r3, [pc, r3]
    1c94:	mrc	15, 0, r2, cr13, cr0, {3}
    1c98:	ldr	r3, [r2, r3]
    1c9c:	cmp	r3, #0
    1ca0:	beq	1d7c <coda_ascbin_cursor_get_bit_size+0x1cc>
    1ca4:	ldr	r3, [fp, #-64]	; 0xffffffc0
    1ca8:	ldr	r3, [r3, #32]
    1cac:	cmp	r3, #0
    1cb0:	beq	1d7c <coda_ascbin_cursor_get_bit_size+0x1cc>
    1cb4:	ldr	r3, [fp, #-64]	; 0xffffffc0
    1cb8:	ldr	r3, [r3, #32]
    1cbc:	ldr	r2, [fp, #-628]	; 0xfffffd8c
    1cc0:	ldr	r1, [fp, #-624]	; 0xfffffd90
    1cc4:	mov	r0, r3
    1cc8:	bl	0 <coda_expression_eval_integer>
    1ccc:	mov	r3, r0
    1cd0:	cmp	r3, #0
    1cd4:	beq	1cf4 <coda_ascbin_cursor_get_bit_size+0x144>
    1cd8:	movw	r0, #0
    1cdc:	movt	r0, #0
    1ce0:	bl	0 <coda_add_error_message>
    1ce4:	ldr	r0, [fp, #-624]	; 0xfffffd90
    1ce8:	bl	0 <coda_cursor_add_to_error_message>
    1cec:	mvn	r3, #0
    1cf0:	b	22bc <coda_ascbin_cursor_get_bit_size+0x70c>
    1cf4:	ldr	r3, [fp, #-64]	; 0xffffffc0
    1cf8:	ldrd	r2, [r3, #24]
    1cfc:	mvn	r0, #7
    1d00:	mvn	r1, #0
    1d04:	cmp	r3, r1
    1d08:	cmpeq	r2, r0
    1d0c:	bne	1d34 <coda_ascbin_cursor_get_bit_size+0x184>
    1d10:	ldr	r3, [fp, #-628]	; 0xfffffd8c
    1d14:	ldrd	r0, [r3]
    1d18:	mov	r2, #0
    1d1c:	mov	r3, #0
    1d20:	lsl	r3, r1, #3
    1d24:	orr	r3, r3, r0, lsr #29
    1d28:	lsl	r2, r0, #3
    1d2c:	ldr	r1, [fp, #-628]	; 0xfffffd8c
    1d30:	strd	r2, [r1]
    1d34:	ldr	r3, [fp, #-628]	; 0xfffffd8c
    1d38:	ldrd	r2, [r3]
    1d3c:	cmp	r2, #0
    1d40:	sbcs	r3, r3, #0
    1d44:	bge	2090 <coda_ascbin_cursor_get_bit_size+0x4e0>
    1d48:	ldr	r3, [fp, #-628]	; 0xfffffd8c
    1d4c:	ldrd	r2, [r3]
    1d50:	mov	r3, r2
    1d54:	mov	r2, r3
    1d58:	movw	r1, #0
    1d5c:	movt	r1, #0
    1d60:	movw	r0, #65236	; 0xfed4
    1d64:	movt	r0, #65535	; 0xffff
    1d68:	bl	0 <coda_set_error>
    1d6c:	ldr	r0, [fp, #-624]	; 0xfffffd90
    1d70:	bl	0 <coda_cursor_add_to_error_message>
    1d74:	mvn	r3, #0
    1d78:	b	22bc <coda_ascbin_cursor_get_bit_size+0x70c>
    1d7c:	ldr	r3, [fp, #-64]	; 0xffffffc0
    1d80:	ldr	r3, [r3, #68]	; 0x44
    1d84:	cmp	r3, #0
    1d88:	beq	1de8 <coda_ascbin_cursor_get_bit_size+0x238>
    1d8c:	ldr	r2, [fp, #-624]	; 0xfffffd90
    1d90:	sub	r3, fp, #620	; 0x26c
    1d94:	mov	r1, r2
    1d98:	mov	r2, #520	; 0x208
    1d9c:	mov	r0, r3
    1da0:	bl	0 <memcpy>
    1da4:	sub	r3, fp, #620	; 0x26c
    1da8:	mov	r0, r3
    1dac:	bl	0 <coda_cursor_goto_available_union_field>
    1db0:	mov	r3, r0
    1db4:	cmp	r3, #0
    1db8:	beq	1dc4 <coda_ascbin_cursor_get_bit_size+0x214>
    1dbc:	mvn	r3, #0
    1dc0:	b	22bc <coda_ascbin_cursor_get_bit_size+0x70c>
    1dc4:	sub	r3, fp, #620	; 0x26c
    1dc8:	ldr	r1, [fp, #-628]	; 0xfffffd8c
    1dcc:	mov	r0, r3
    1dd0:	bl	0 <coda_cursor_get_bit_size>
    1dd4:	mov	r3, r0
    1dd8:	cmp	r3, #0
    1ddc:	beq	22b4 <coda_ascbin_cursor_get_bit_size+0x704>
    1de0:	mvn	r3, #0
    1de4:	b	22bc <coda_ascbin_cursor_get_bit_size+0x70c>
    1de8:	mov	r2, #0
    1dec:	mov	r3, #0
    1df0:	strd	r2, [fp, #-36]	; 0xffffffdc
    1df4:	ldr	r3, [fp, #-64]	; 0xffffffc0
    1df8:	ldr	r3, [r3, #48]	; 0x30
    1dfc:	cmp	r3, #0
    1e00:	ble	2080 <coda_ascbin_cursor_get_bit_size+0x4d0>
    1e04:	ldr	r2, [fp, #-624]	; 0xfffffd90
    1e08:	sub	r3, fp, #620	; 0x26c
    1e0c:	mov	r1, r2
    1e10:	mov	r2, #520	; 0x208
    1e14:	mov	r0, r3
    1e18:	bl	0 <memcpy>
    1e1c:	sub	r3, fp, #620	; 0x26c
    1e20:	mov	r0, r3
    1e24:	bl	0 <coda_cursor_goto_first_record_field>
    1e28:	mov	r3, r0
    1e2c:	cmp	r3, #0
    1e30:	beq	1e3c <coda_ascbin_cursor_get_bit_size+0x28c>
    1e34:	mvn	r3, #0
    1e38:	b	22bc <coda_ascbin_cursor_get_bit_size+0x70c>
    1e3c:	mov	r3, #0
    1e40:	str	r3, [fp, #-40]	; 0xffffffd8
    1e44:	b	206c <coda_ascbin_cursor_get_bit_size+0x4bc>
    1e48:	mvn	r2, #0
    1e4c:	mvn	r3, #0
    1e50:	strd	r2, [fp, #-84]	; 0xffffffac
    1e54:	ldr	r3, [fp, #-64]	; 0xffffffc0
    1e58:	ldr	r3, [r3, #48]	; 0x30
    1e5c:	sub	r3, r3, #1
    1e60:	ldr	r2, [fp, #-40]	; 0xffffffd8
    1e64:	cmp	r2, r3
    1e68:	bge	1e94 <coda_ascbin_cursor_get_bit_size+0x2e4>
    1e6c:	sub	r2, fp, #84	; 0x54
    1e70:	sub	r1, fp, #76	; 0x4c
    1e74:	sub	r3, fp, #620	; 0x26c
    1e78:	mov	r0, r3
    1e7c:	bl	4bc <get_next_relative_field_bit_offset>
    1e80:	mov	r3, r0
    1e84:	cmp	r3, #0
    1e88:	beq	1e94 <coda_ascbin_cursor_get_bit_size+0x2e4>
    1e8c:	mvn	r3, #0
    1e90:	b	22bc <coda_ascbin_cursor_get_bit_size+0x70c>
    1e94:	ldrd	r2, [fp, #-84]	; 0xffffffac
    1e98:	cmp	r2, #0
    1e9c:	sbcs	r3, r3, #0
    1ea0:	bge	1ecc <coda_ascbin_cursor_get_bit_size+0x31c>
    1ea4:	sub	r2, fp, #84	; 0x54
    1ea8:	sub	r3, fp, #620	; 0x26c
    1eac:	mov	r1, r2
    1eb0:	mov	r0, r3
    1eb4:	bl	0 <coda_cursor_get_bit_size>
    1eb8:	mov	r3, r0
    1ebc:	cmp	r3, #0
    1ec0:	beq	1ecc <coda_ascbin_cursor_get_bit_size+0x31c>
    1ec4:	mvn	r3, #0
    1ec8:	b	22bc <coda_ascbin_cursor_get_bit_size+0x70c>
    1ecc:	ldrd	r2, [fp, #-84]	; 0xffffffac
    1ed0:	ldrd	r0, [fp, #-36]	; 0xffffffdc
    1ed4:	adds	ip, r0, r2
    1ed8:	str	ip, [fp, #-636]	; 0xfffffd84
    1edc:	adc	r3, r1, r3
    1ee0:	str	r3, [fp, #-632]	; 0xfffffd88
    1ee4:	sub	r3, fp, #636	; 0x27c
    1ee8:	ldrd	r2, [r3]
    1eec:	strd	r2, [fp, #-36]	; 0xffffffdc
    1ef0:	ldr	r3, [fp, #-64]	; 0xffffffc0
    1ef4:	ldr	r3, [r3, #48]	; 0x30
    1ef8:	sub	r3, r3, #1
    1efc:	ldr	r2, [fp, #-40]	; 0xffffffd8
    1f00:	cmp	r2, r3
    1f04:	bge	2060 <coda_ascbin_cursor_get_bit_size+0x4b0>
    1f08:	mov	r3, #1
    1f0c:	str	r3, [fp, #-88]	; 0xffffffa8
    1f10:	ldr	r3, [fp, #-64]	; 0xffffffc0
    1f14:	ldr	r2, [r3, #52]	; 0x34
    1f18:	ldr	r3, [fp, #-40]	; 0xffffffd8
    1f1c:	add	r3, r3, #1
    1f20:	lsl	r3, r3, #2
    1f24:	add	r3, r2, r3
    1f28:	ldr	r3, [r3]
    1f2c:	ldr	r3, [r3, #20]
    1f30:	cmp	r3, #0
    1f34:	beq	1f80 <coda_ascbin_cursor_get_bit_size+0x3d0>
    1f38:	ldr	r3, [fp, #-64]	; 0xffffffc0
    1f3c:	ldr	r2, [r3, #52]	; 0x34
    1f40:	ldr	r3, [fp, #-40]	; 0xffffffd8
    1f44:	add	r3, r3, #1
    1f48:	lsl	r3, r3, #2
    1f4c:	add	r3, r2, r3
    1f50:	ldr	r3, [r3]
    1f54:	ldr	r3, [r3, #20]
    1f58:	sub	r2, fp, #88	; 0x58
    1f5c:	ldr	r1, [fp, #-624]	; 0xfffffd90
    1f60:	mov	r0, r3
    1f64:	bl	0 <coda_expression_eval_bool>
    1f68:	mov	r3, r0
    1f6c:	cmp	r3, #0
    1f70:	beq	1f80 <coda_ascbin_cursor_get_bit_size+0x3d0>
    1f74:	mvn	r3, #0
    1f78:	nop	{0}
    1f7c:	b	22bc <coda_ascbin_cursor_get_bit_size+0x70c>
    1f80:	ldr	r3, [fp, #-88]	; 0xffffffa8
    1f84:	cmp	r3, #0
    1f88:	beq	1fc8 <coda_ascbin_cursor_get_bit_size+0x418>
    1f8c:	ldr	r3, [fp, #-64]	; 0xffffffc0
    1f90:	ldr	r2, [r3, #52]	; 0x34
    1f94:	ldr	r3, [fp, #-40]	; 0xffffffd8
    1f98:	add	r3, r3, #1
    1f9c:	lsl	r3, r3, #2
    1fa0:	add	r3, r2, r3
    1fa4:	ldr	r2, [r3]
    1fa8:	ldr	r3, [fp, #-616]	; 0xfffffd98
    1fac:	sub	r3, r3, #1
    1fb0:	ldr	r2, [r2, #8]
    1fb4:	lsl	r3, r3, #4
    1fb8:	sub	r1, fp, #28
    1fbc:	add	r3, r1, r3
    1fc0:	str	r2, [r3, #-584]	; 0xfffffdb8
    1fc4:	b	1ff4 <coda_ascbin_cursor_get_bit_size+0x444>
    1fc8:	ldr	r3, [fp, #-64]	; 0xffffffc0
    1fcc:	ldr	r2, [r3]
    1fd0:	ldr	r3, [fp, #-616]	; 0xfffffd98
    1fd4:	sub	r4, r3, #1
    1fd8:	mov	r0, r2
    1fdc:	bl	0 <coda_no_data_singleton>
    1fe0:	mov	r2, r0
    1fe4:	lsl	r3, r4, #4
    1fe8:	sub	r1, fp, #28
    1fec:	add	r3, r1, r3
    1ff0:	str	r2, [r3, #-584]	; 0xfffffdb8
    1ff4:	ldr	r3, [fp, #-616]	; 0xfffffd98
    1ff8:	sub	r3, r3, #1
    1ffc:	ldr	r2, [fp, #-40]	; 0xffffffd8
    2000:	add	r2, r2, #1
    2004:	lsl	r3, r3, #4
    2008:	sub	r1, fp, #28
    200c:	add	r3, r1, r3
    2010:	str	r2, [r3, #-580]	; 0xfffffdbc
    2014:	ldr	r3, [fp, #-624]	; 0xfffffd90
    2018:	ldr	r3, [r3, #4]
    201c:	sub	r3, r3, #1
    2020:	ldr	r2, [fp, #-624]	; 0xfffffd90
    2024:	add	r3, r3, #1
    2028:	lsl	r3, r3, #4
    202c:	add	r3, r2, r3
    2030:	ldrd	r0, [r3]
    2034:	ldrd	r2, [fp, #-76]	; 0xffffffb4
    2038:	ldr	ip, [fp, #-616]	; 0xfffffd98
    203c:	sub	ip, ip, #1
    2040:	adds	r8, r0, r2
    2044:	adc	r9, r1, r3
    2048:	sub	r3, fp, #620	; 0x26c
    204c:	mov	r2, r3
    2050:	add	r3, ip, #1
    2054:	lsl	r3, r3, #4
    2058:	add	r3, r2, r3
    205c:	strd	r8, [r3]
    2060:	ldr	r3, [fp, #-40]	; 0xffffffd8
    2064:	add	r3, r3, #1
    2068:	str	r3, [fp, #-40]	; 0xffffffd8
    206c:	ldr	r3, [fp, #-64]	; 0xffffffc0
    2070:	ldr	r3, [r3, #48]	; 0x30
    2074:	ldr	r2, [fp, #-40]	; 0xffffffd8
    2078:	cmp	r2, r3
    207c:	blt	1e48 <coda_ascbin_cursor_get_bit_size+0x298>
    2080:	ldr	r1, [fp, #-628]	; 0xfffffd8c
    2084:	ldrd	r2, [fp, #-36]	; 0xffffffdc
    2088:	strd	r2, [r1]
    208c:	b	22b4 <coda_ascbin_cursor_get_bit_size+0x704>
    2090:	b	22b4 <coda_ascbin_cursor_get_bit_size+0x704>
    2094:	ldr	r3, [fp, #-60]	; 0xffffffc4
    2098:	str	r3, [fp, #-68]	; 0xffffffbc
    209c:	sub	r3, fp, #92	; 0x5c
    20a0:	mov	r1, r3
    20a4:	ldr	r0, [fp, #-624]	; 0xfffffd90
    20a8:	bl	0 <coda_cursor_get_num_elements>
    20ac:	mov	r3, r0
    20b0:	cmp	r3, #0
    20b4:	beq	20c0 <coda_ascbin_cursor_get_bit_size+0x510>
    20b8:	mvn	r3, #0
    20bc:	b	22bc <coda_ascbin_cursor_get_bit_size+0x70c>
    20c0:	ldr	r3, [fp, #-92]	; 0xffffffa4
    20c4:	cmp	r3, #0
    20c8:	bne	20e0 <coda_ascbin_cursor_get_bit_size+0x530>
    20cc:	ldr	r1, [fp, #-628]	; 0xfffffd8c
    20d0:	mov	r2, #0
    20d4:	mov	r3, #0
    20d8:	strd	r2, [r1]
    20dc:	b	22b8 <coda_ascbin_cursor_get_bit_size+0x708>
    20e0:	ldr	r3, [fp, #-68]	; 0xffffffbc
    20e4:	ldr	r3, [r3, #40]	; 0x28
    20e8:	ldrd	r2, [r3, #24]
    20ec:	cmp	r2, #0
    20f0:	sbcs	r3, r3, #0
    20f4:	blt	2134 <coda_ascbin_cursor_get_bit_size+0x584>
    20f8:	ldr	r3, [fp, #-92]	; 0xffffffa4
    20fc:	mov	r0, r3
    2100:	asr	r1, r0, #31
    2104:	ldr	r3, [fp, #-68]	; 0xffffffbc
    2108:	ldr	r3, [r3, #40]	; 0x28
    210c:	ldrd	r2, [r3, #24]
    2110:	mul	lr, r2, r1
    2114:	mul	ip, r0, r3
    2118:	add	ip, lr, ip
    211c:	umull	r2, r3, r0, r2
    2120:	add	r1, ip, r3
    2124:	mov	r3, r1
    2128:	ldr	r1, [fp, #-628]	; 0xfffffd8c
    212c:	strd	r2, [r1]
    2130:	b	22b8 <coda_ascbin_cursor_get_bit_size+0x708>
    2134:	mov	r2, #0
    2138:	mov	r3, #0
    213c:	strd	r2, [fp, #-52]	; 0xffffffcc
    2140:	ldr	r2, [fp, #-624]	; 0xfffffd90
    2144:	sub	r3, fp, #620	; 0x26c
    2148:	mov	r1, r2
    214c:	mov	r2, #520	; 0x208
    2150:	mov	r0, r3
    2154:	bl	0 <memcpy>
    2158:	ldr	r3, [fp, #-616]	; 0xfffffd98
    215c:	add	r3, r3, #1
    2160:	str	r3, [fp, #-616]	; 0xfffffd98
    2164:	ldr	r3, [fp, #-616]	; 0xfffffd98
    2168:	sub	r3, r3, #2
    216c:	ldr	r2, [fp, #-616]	; 0xfffffd98
    2170:	sub	r1, r2, #1
    2174:	sub	r2, fp, #620	; 0x26c
    2178:	add	r3, r3, #1
    217c:	lsl	r3, r3, #4
    2180:	add	r3, r2, r3
    2184:	ldrd	r2, [r3]
    2188:	sub	r0, fp, #620	; 0x26c
    218c:	add	r1, r1, #1
    2190:	lsl	r1, r1, #4
    2194:	add	r1, r0, r1
    2198:	strd	r2, [r1]
    219c:	mov	r3, #0
    21a0:	str	r3, [fp, #-56]	; 0xffffffc8
    21a4:	b	2274 <coda_ascbin_cursor_get_bit_size+0x6c4>
    21a8:	ldr	r3, [fp, #-616]	; 0xfffffd98
    21ac:	sub	r3, r3, #1
    21b0:	ldr	r2, [fp, #-68]	; 0xffffffbc
    21b4:	ldr	r2, [r2, #40]	; 0x28
    21b8:	lsl	r3, r3, #4
    21bc:	sub	r1, fp, #28
    21c0:	add	r3, r1, r3
    21c4:	str	r2, [r3, #-584]	; 0xfffffdb8
    21c8:	ldr	r3, [fp, #-616]	; 0xfffffd98
    21cc:	sub	r3, r3, #1
    21d0:	lsl	r3, r3, #4
    21d4:	sub	r2, fp, #28
    21d8:	add	r3, r2, r3
    21dc:	ldr	r2, [fp, #-56]	; 0xffffffc8
    21e0:	str	r2, [r3, #-580]	; 0xfffffdbc
    21e4:	sub	r2, fp, #100	; 0x64
    21e8:	sub	r3, fp, #620	; 0x26c
    21ec:	mov	r1, r2
    21f0:	mov	r0, r3
    21f4:	bl	0 <coda_cursor_get_bit_size>
    21f8:	mov	r3, r0
    21fc:	cmp	r3, #0
    2200:	beq	220c <coda_ascbin_cursor_get_bit_size+0x65c>
    2204:	mvn	r3, #0
    2208:	b	22bc <coda_ascbin_cursor_get_bit_size+0x70c>
    220c:	ldrd	r2, [fp, #-100]	; 0xffffff9c
    2210:	ldrd	r0, [fp, #-52]	; 0xffffffcc
    2214:	adds	r6, r0, r2
    2218:	adc	r7, r1, r3
    221c:	strd	r6, [fp, #-52]	; 0xffffffcc
    2220:	ldr	r3, [fp, #-616]	; 0xfffffd98
    2224:	sub	r3, r3, #1
    2228:	sub	r2, fp, #620	; 0x26c
    222c:	add	r3, r3, #1
    2230:	lsl	r3, r3, #4
    2234:	add	r3, r2, r3
    2238:	ldrd	r0, [r3]
    223c:	ldrd	r2, [fp, #-100]	; 0xffffff9c
    2240:	ldr	ip, [fp, #-616]	; 0xfffffd98
    2244:	sub	ip, ip, #1
    2248:	adds	r4, r0, r2
    224c:	adc	r5, r1, r3
    2250:	sub	r3, fp, #620	; 0x26c
    2254:	mov	r2, r3
    2258:	add	r3, ip, #1
    225c:	lsl	r3, r3, #4
    2260:	add	r3, r2, r3
    2264:	strd	r4, [r3]
    2268:	ldr	r3, [fp, #-56]	; 0xffffffc8
    226c:	add	r3, r3, #1
    2270:	str	r3, [fp, #-56]	; 0xffffffc8
    2274:	ldr	r3, [fp, #-92]	; 0xffffffa4
    2278:	ldr	r2, [fp, #-56]	; 0xffffffc8
    227c:	cmp	r2, r3
    2280:	blt	21a8 <coda_ascbin_cursor_get_bit_size+0x5f8>
    2284:	ldr	r1, [fp, #-628]	; 0xfffffd8c
    2288:	ldrd	r2, [fp, #-52]	; 0xffffffcc
    228c:	strd	r2, [r1]
    2290:	b	22b8 <coda_ascbin_cursor_get_bit_size+0x708>
    2294:	movw	r3, #0
    2298:	movt	r3, #0
    229c:	mov	r2, #768	; 0x300
    22a0:	movw	r1, #0
    22a4:	movt	r1, #0
    22a8:	movw	r0, #0
    22ac:	movt	r0, #0
    22b0:	bl	0 <__assert_fail>
    22b4:	nop	{0}
    22b8:	mov	r3, #0
    22bc:	mov	r0, r3
    22c0:	sub	sp, fp, #28
    22c4:	ldrd	r4, [sp]
    22c8:	ldrd	r6, [sp, #8]
    22cc:	ldrd	r8, [sp, #16]
    22d0:	ldr	fp, [sp, #24]
    22d4:	add	sp, sp, #28
    22d8:	pop	{pc}		; (ldr pc, [sp], #4)
    22dc:	.word	0x00000644

000022e0 <coda_ascbin_cursor_get_num_elements>:
    22e0:	str	fp, [sp, #-8]!
    22e4:	str	lr, [sp, #4]
    22e8:	add	fp, sp, #4
    22ec:	sub	sp, sp, #56	; 0x38
    22f0:	str	r0, [fp, #-56]	; 0xffffffc8
    22f4:	str	r1, [fp, #-60]	; 0xffffffc4
    22f8:	ldr	r3, [fp, #-56]	; 0xffffffc8
    22fc:	ldr	r3, [r3, #4]
    2300:	sub	r3, r3, #1
    2304:	ldr	r2, [fp, #-56]	; 0xffffffc8
    2308:	lsl	r3, r3, #4
    230c:	add	r3, r2, r3
    2310:	ldr	r3, [r3, #8]
    2314:	ldr	r3, [r3]
    2318:	cmp	r3, #99	; 0x63
    231c:	bhi	2340 <coda_ascbin_cursor_get_num_elements+0x60>
    2320:	ldr	r3, [fp, #-56]	; 0xffffffc8
    2324:	ldr	r3, [r3, #4]
    2328:	sub	r3, r3, #1
    232c:	ldr	r2, [fp, #-56]	; 0xffffffc8
    2330:	lsl	r3, r3, #4
    2334:	add	r3, r2, r3
    2338:	ldr	r3, [r3, #8]
    233c:	b	2360 <coda_ascbin_cursor_get_num_elements+0x80>
    2340:	ldr	r3, [fp, #-56]	; 0xffffffc8
    2344:	ldr	r3, [r3, #4]
    2348:	sub	r3, r3, #1
    234c:	ldr	r2, [fp, #-56]	; 0xffffffc8
    2350:	lsl	r3, r3, #4
    2354:	add	r3, r2, r3
    2358:	ldr	r3, [r3, #8]
    235c:	ldr	r3, [r3, #4]
    2360:	str	r3, [fp, #-16]
    2364:	ldr	r3, [fp, #-16]
    2368:	ldr	r3, [r3, #8]
    236c:	cmp	r3, #0
    2370:	beq	2380 <coda_ascbin_cursor_get_num_elements+0xa0>
    2374:	cmp	r3, #1
    2378:	beq	2394 <coda_ascbin_cursor_get_num_elements+0xb4>
    237c:	b	24fc <coda_ascbin_cursor_get_num_elements+0x21c>
    2380:	ldr	r3, [fp, #-16]
    2384:	ldr	r2, [r3, #48]	; 0x30
    2388:	ldr	r3, [fp, #-60]	; 0xffffffc4
    238c:	str	r2, [r3]
    2390:	b	251c <coda_ascbin_cursor_get_num_elements+0x23c>
    2394:	ldr	r3, [fp, #-16]
    2398:	str	r3, [fp, #-20]	; 0xffffffec
    239c:	ldr	r3, [fp, #-20]	; 0xffffffec
    23a0:	ldr	r3, [r3, #44]	; 0x2c
    23a4:	cmn	r3, #1
    23a8:	beq	23c0 <coda_ascbin_cursor_get_num_elements+0xe0>
    23ac:	ldr	r3, [fp, #-20]	; 0xffffffec
    23b0:	ldr	r2, [r3, #44]	; 0x2c
    23b4:	ldr	r3, [fp, #-60]	; 0xffffffc4
    23b8:	str	r2, [r3]
    23bc:	b	251c <coda_ascbin_cursor_get_num_elements+0x23c>
    23c0:	mov	r3, #1
    23c4:	str	r3, [fp, #-8]
    23c8:	mov	r3, #0
    23cc:	str	r3, [fp, #-12]
    23d0:	b	24d8 <coda_ascbin_cursor_get_num_elements+0x1f8>
    23d4:	ldr	r2, [fp, #-20]	; 0xffffffec
    23d8:	ldr	r3, [fp, #-12]
    23dc:	add	r3, r3, #12
    23e0:	lsl	r3, r3, #2
    23e4:	add	r3, r2, r3
    23e8:	ldr	r3, [r3, #4]
    23ec:	cmn	r3, #1
    23f0:	bne	24a8 <coda_ascbin_cursor_get_num_elements+0x1c8>
    23f4:	ldr	r2, [fp, #-20]	; 0xffffffec
    23f8:	ldr	r3, [fp, #-12]
    23fc:	add	r3, r3, #20
    2400:	lsl	r3, r3, #2
    2404:	add	r3, r2, r3
    2408:	ldr	r3, [r3, #4]
    240c:	sub	r2, fp, #28
    2410:	ldr	r1, [fp, #-56]	; 0xffffffc8
    2414:	mov	r0, r3
    2418:	bl	0 <coda_expression_eval_integer>
    241c:	mov	r3, r0
    2420:	cmp	r3, #0
    2424:	beq	2448 <coda_ascbin_cursor_get_num_elements+0x168>
    2428:	ldr	r1, [fp, #-12]
    242c:	movw	r0, #0
    2430:	movt	r0, #0
    2434:	bl	0 <coda_add_error_message>
    2438:	ldr	r0, [fp, #-56]	; 0xffffffc8
    243c:	bl	0 <coda_cursor_add_to_error_message>
    2440:	mvn	r3, #0
    2444:	b	2520 <coda_ascbin_cursor_get_num_elements+0x240>
    2448:	ldrd	r2, [fp, #-28]	; 0xffffffe4
    244c:	cmp	r2, #0
    2450:	sbcs	r3, r3, #0
    2454:	bge	2494 <coda_ascbin_cursor_get_num_elements+0x1b4>
    2458:	ldrd	r0, [fp, #-28]	; 0xffffffe4
    245c:	sub	r3, fp, #52	; 0x34
    2460:	mov	r2, r3
    2464:	bl	0 <coda_str64>
    2468:	sub	r3, fp, #52	; 0x34
    246c:	mov	r2, r3
    2470:	movw	r1, #0
    2474:	movt	r1, #0
    2478:	movw	r0, #65236	; 0xfed4
    247c:	movt	r0, #65535	; 0xffff
    2480:	bl	0 <coda_set_error>
    2484:	ldr	r0, [fp, #-56]	; 0xffffffc8
    2488:	bl	0 <coda_cursor_add_to_error_message>
    248c:	mvn	r3, #0
    2490:	b	2520 <coda_ascbin_cursor_get_num_elements+0x240>
    2494:	ldrd	r2, [fp, #-28]	; 0xffffffe4
    2498:	ldr	r3, [fp, #-8]
    249c:	mul	r3, r2, r3
    24a0:	str	r3, [fp, #-8]
    24a4:	b	24cc <coda_ascbin_cursor_get_num_elements+0x1ec>
    24a8:	ldr	r2, [fp, #-20]	; 0xffffffec
    24ac:	ldr	r3, [fp, #-12]
    24b0:	add	r3, r3, #12
    24b4:	lsl	r3, r3, #2
    24b8:	add	r3, r2, r3
    24bc:	ldr	r2, [r3, #4]
    24c0:	ldr	r3, [fp, #-8]
    24c4:	mul	r3, r2, r3
    24c8:	str	r3, [fp, #-8]
    24cc:	ldr	r3, [fp, #-12]
    24d0:	add	r3, r3, #1
    24d4:	str	r3, [fp, #-12]
    24d8:	ldr	r3, [fp, #-20]	; 0xffffffec
    24dc:	ldr	r3, [r3, #48]	; 0x30
    24e0:	ldr	r2, [fp, #-12]
    24e4:	cmp	r2, r3
    24e8:	blt	23d4 <coda_ascbin_cursor_get_num_elements+0xf4>
    24ec:	ldr	r3, [fp, #-60]	; 0xffffffc4
    24f0:	ldr	r2, [fp, #-8]
    24f4:	str	r2, [r3]
    24f8:	b	251c <coda_ascbin_cursor_get_num_elements+0x23c>
    24fc:	movw	r3, #0
    2500:	movt	r3, #0
    2504:	movw	r2, #835	; 0x343
    2508:	movw	r1, #0
    250c:	movt	r1, #0
    2510:	movw	r0, #0
    2514:	movt	r0, #0
    2518:	bl	0 <__assert_fail>
    251c:	mov	r3, #0
    2520:	mov	r0, r3
    2524:	sub	sp, fp, #4
    2528:	ldr	fp, [sp]
    252c:	add	sp, sp, #4
    2530:	pop	{pc}		; (ldr pc, [sp], #4)

00002534 <coda_ascbin_cursor_get_record_field_available_status>:
    2534:	str	fp, [sp, #-8]!
    2538:	str	lr, [sp, #4]
    253c:	add	fp, sp, #4
    2540:	sub	sp, sp, #24
    2544:	str	r0, [fp, #-16]
    2548:	str	r1, [fp, #-20]	; 0xffffffec
    254c:	str	r2, [fp, #-24]	; 0xffffffe8
    2550:	ldr	r3, [fp, #-16]
    2554:	ldr	r3, [r3, #4]
    2558:	sub	r3, r3, #1
    255c:	ldr	r2, [fp, #-16]
    2560:	lsl	r3, r3, #4
    2564:	add	r3, r2, r3
    2568:	ldr	r3, [r3, #8]
    256c:	ldr	r3, [r3]
    2570:	cmp	r3, #99	; 0x63
    2574:	bhi	2598 <coda_ascbin_cursor_get_record_field_available_status+0x64>
    2578:	ldr	r3, [fp, #-16]
    257c:	ldr	r3, [r3, #4]
    2580:	sub	r3, r3, #1
    2584:	ldr	r2, [fp, #-16]
    2588:	lsl	r3, r3, #4
    258c:	add	r3, r2, r3
    2590:	ldr	r3, [r3, #8]
    2594:	b	25b8 <coda_ascbin_cursor_get_record_field_available_status+0x84>
    2598:	ldr	r3, [fp, #-16]
    259c:	ldr	r3, [r3, #4]
    25a0:	sub	r3, r3, #1
    25a4:	ldr	r2, [fp, #-16]
    25a8:	lsl	r3, r3, #4
    25ac:	add	r3, r2, r3
    25b0:	ldr	r3, [r3, #8]
    25b4:	ldr	r3, [r3, #4]
    25b8:	str	r3, [fp, #-8]
    25bc:	ldr	r3, [fp, #-20]	; 0xffffffec
    25c0:	cmp	r3, #0
    25c4:	blt	25dc <coda_ascbin_cursor_get_record_field_available_status+0xa8>
    25c8:	ldr	r3, [fp, #-8]
    25cc:	ldr	r3, [r3, #48]	; 0x30
    25d0:	ldr	r2, [fp, #-20]	; 0xffffffec
    25d4:	cmp	r2, r3
    25d8:	blt	2600 <coda_ascbin_cursor_get_record_field_available_status+0xcc>
    25dc:	ldr	r3, [fp, #-8]
    25e0:	ldr	r3, [r3, #48]	; 0x30
    25e4:	ldr	r2, [fp, #-20]	; 0xffffffec
    25e8:	movw	r1, #0
    25ec:	movt	r1, #0
    25f0:	mvn	r0, #100	; 0x64
    25f4:	bl	0 <coda_set_error>
    25f8:	mvn	r3, #0
    25fc:	b	26d0 <coda_ascbin_cursor_get_record_field_available_status+0x19c>
    2600:	ldr	r3, [fp, #-8]
    2604:	ldr	r3, [r3, #68]	; 0x44
    2608:	cmp	r3, #0
    260c:	beq	265c <coda_ascbin_cursor_get_record_field_available_status+0x128>
    2610:	sub	r3, fp, #12
    2614:	mov	r1, r3
    2618:	ldr	r0, [fp, #-16]
    261c:	bl	0 <coda_cursor_get_available_union_field_index>
    2620:	mov	r3, r0
    2624:	cmp	r3, #0
    2628:	beq	2634 <coda_ascbin_cursor_get_record_field_available_status+0x100>
    262c:	mvn	r3, #0
    2630:	b	26d0 <coda_ascbin_cursor_get_record_field_available_status+0x19c>
    2634:	ldr	r3, [fp, #-12]
    2638:	ldr	r2, [fp, #-20]	; 0xffffffec
    263c:	cmp	r2, r3
    2640:	moveq	r3, #1
    2644:	movne	r3, #0
    2648:	uxtb	r3, r3
    264c:	mov	r2, r3
    2650:	ldr	r3, [fp, #-24]	; 0xffffffe8
    2654:	str	r2, [r3]
    2658:	b	26cc <coda_ascbin_cursor_get_record_field_available_status+0x198>
    265c:	ldr	r3, [fp, #-8]
    2660:	ldr	r2, [r3, #52]	; 0x34
    2664:	ldr	r3, [fp, #-20]	; 0xffffffec
    2668:	lsl	r3, r3, #2
    266c:	add	r3, r2, r3
    2670:	ldr	r3, [r3]
    2674:	ldr	r3, [r3, #20]
    2678:	cmp	r3, #0
    267c:	beq	26c0 <coda_ascbin_cursor_get_record_field_available_status+0x18c>
    2680:	ldr	r3, [fp, #-8]
    2684:	ldr	r2, [r3, #52]	; 0x34
    2688:	ldr	r3, [fp, #-20]	; 0xffffffec
    268c:	lsl	r3, r3, #2
    2690:	add	r3, r2, r3
    2694:	ldr	r3, [r3]
    2698:	ldr	r3, [r3, #20]
    269c:	ldr	r2, [fp, #-24]	; 0xffffffe8
    26a0:	ldr	r1, [fp, #-16]
    26a4:	mov	r0, r3
    26a8:	bl	0 <coda_expression_eval_bool>
    26ac:	mov	r3, r0
    26b0:	cmp	r3, #0
    26b4:	beq	26cc <coda_ascbin_cursor_get_record_field_available_status+0x198>
    26b8:	mvn	r3, #0
    26bc:	b	26d0 <coda_ascbin_cursor_get_record_field_available_status+0x19c>
    26c0:	ldr	r3, [fp, #-24]	; 0xffffffe8
    26c4:	mov	r2, #1
    26c8:	str	r2, [r3]
    26cc:	mov	r3, #0
    26d0:	mov	r0, r3
    26d4:	sub	sp, fp, #4
    26d8:	ldr	fp, [sp]
    26dc:	add	sp, sp, #4
    26e0:	pop	{pc}		; (ldr pc, [sp], #4)

000026e4 <coda_ascbin_cursor_get_available_union_field_index>:
    26e4:	str	fp, [sp, #-8]!
    26e8:	str	lr, [sp, #4]
    26ec:	add	fp, sp, #4
    26f0:	sub	sp, sp, #600	; 0x258
    26f4:	str	r0, [fp, #-592]	; 0xfffffdb0
    26f8:	str	r1, [fp, #-596]	; 0xfffffdac
    26fc:	ldr	r3, [fp, #-592]	; 0xfffffdb0
    2700:	ldr	r3, [r3, #4]
    2704:	sub	r3, r3, #1
    2708:	ldr	r2, [fp, #-592]	; 0xfffffdb0
    270c:	lsl	r3, r3, #4
    2710:	add	r3, r2, r3
    2714:	ldr	r3, [r3, #8]
    2718:	ldr	r3, [r3]
    271c:	cmp	r3, #99	; 0x63
    2720:	bhi	2744 <coda_ascbin_cursor_get_available_union_field_index+0x60>
    2724:	ldr	r3, [fp, #-592]	; 0xfffffdb0
    2728:	ldr	r3, [r3, #4]
    272c:	sub	r3, r3, #1
    2730:	ldr	r2, [fp, #-592]	; 0xfffffdb0
    2734:	lsl	r3, r3, #4
    2738:	add	r3, r2, r3
    273c:	ldr	r3, [r3, #8]
    2740:	b	2764 <coda_ascbin_cursor_get_available_union_field_index+0x80>
    2744:	ldr	r3, [fp, #-592]	; 0xfffffdb0
    2748:	ldr	r3, [r3, #4]
    274c:	sub	r3, r3, #1
    2750:	ldr	r2, [fp, #-592]	; 0xfffffdb0
    2754:	lsl	r3, r3, #4
    2758:	add	r3, r2, r3
    275c:	ldr	r3, [r3, #8]
    2760:	ldr	r3, [r3, #4]
    2764:	str	r3, [fp, #-8]
    2768:	ldr	r3, [fp, #-8]
    276c:	ldr	r3, [r3, #68]	; 0x44
    2770:	cmp	r3, #0
    2774:	bne	2790 <coda_ascbin_cursor_get_available_union_field_index+0xac>
    2778:	movw	r1, #0
    277c:	movt	r1, #0
    2780:	mvn	r0, #104	; 0x68
    2784:	bl	0 <coda_set_error>
    2788:	mvn	r3, #0
    278c:	b	29a8 <coda_ascbin_cursor_get_available_union_field_index+0x2c4>
    2790:	ldr	r3, [fp, #-8]
    2794:	ldr	r3, [r3, #48]	; 0x30
    2798:	cmp	r3, #0
    279c:	bgt	27c0 <coda_ascbin_cursor_get_available_union_field_index+0xdc>
    27a0:	movw	r3, #0
    27a4:	movt	r3, #0
    27a8:	movw	r2, #889	; 0x379
    27ac:	movw	r1, #0
    27b0:	movt	r1, #0
    27b4:	movw	r0, #0
    27b8:	movt	r0, #0
    27bc:	bl	0 <__assert_fail>
    27c0:	ldr	r2, [fp, #-592]	; 0xfffffdb0
    27c4:	sub	r3, fp, #532	; 0x214
    27c8:	mov	r1, r2
    27cc:	mov	r2, #520	; 0x208
    27d0:	mov	r0, r3
    27d4:	bl	0 <memcpy>
    27d8:	ldr	r3, [fp, #-528]	; 0xfffffdf0
    27dc:	add	r3, r3, #1
    27e0:	str	r3, [fp, #-528]	; 0xfffffdf0
    27e4:	ldr	r3, [fp, #-8]
    27e8:	ldr	r3, [r3, #52]	; 0x34
    27ec:	ldr	r2, [r3]
    27f0:	ldr	r3, [fp, #-528]	; 0xfffffdf0
    27f4:	sub	r3, r3, #1
    27f8:	ldr	r2, [r2, #8]
    27fc:	lsl	r3, r3, #4
    2800:	sub	r1, fp, #4
    2804:	add	r3, r1, r3
    2808:	str	r2, [r3, #-520]	; 0xfffffdf8
    280c:	ldr	r3, [fp, #-528]	; 0xfffffdf0
    2810:	sub	r3, r3, #1
    2814:	lsl	r3, r3, #4
    2818:	sub	r2, fp, #4
    281c:	add	r3, r2, r3
    2820:	mvn	r2, #0
    2824:	str	r2, [r3, #-516]	; 0xfffffdfc
    2828:	ldr	r3, [fp, #-528]	; 0xfffffdf0
    282c:	sub	r3, r3, #2
    2830:	ldr	r2, [fp, #-528]	; 0xfffffdf0
    2834:	sub	r1, r2, #1
    2838:	sub	r2, fp, #532	; 0x214
    283c:	add	r3, r3, #1
    2840:	lsl	r3, r3, #4
    2844:	add	r3, r2, r3
    2848:	ldrd	r2, [r3]
    284c:	sub	r0, fp, #532	; 0x214
    2850:	add	r1, r1, #1
    2854:	lsl	r1, r1, #4
    2858:	add	r1, r0, r1
    285c:	strd	r2, [r1]
    2860:	ldr	r3, [fp, #-8]
    2864:	ldr	r3, [r3, #68]	; 0x44
    2868:	sub	r2, fp, #540	; 0x21c
    286c:	sub	r1, fp, #532	; 0x214
    2870:	mov	r0, r3
    2874:	bl	0 <coda_expression_eval_integer>
    2878:	mov	r3, r0
    287c:	cmp	r3, #0
    2880:	beq	28a0 <coda_ascbin_cursor_get_available_union_field_index+0x1bc>
    2884:	movw	r0, #0
    2888:	movt	r0, #0
    288c:	bl	0 <coda_add_error_message>
    2890:	ldr	r0, [fp, #-592]	; 0xfffffdb0
    2894:	bl	0 <coda_cursor_add_to_error_message>
    2898:	mvn	r3, #0
    289c:	b	29a8 <coda_ascbin_cursor_get_available_union_field_index+0x2c4>
    28a0:	sub	r3, fp, #532	; 0x214
    28a4:	ldrd	r2, [r3, #-8]
    28a8:	cmp	r2, #0
    28ac:	sbcs	r3, r3, #0
    28b0:	blt	28d8 <coda_ascbin_cursor_get_available_union_field_index+0x1f4>
    28b4:	ldr	r3, [fp, #-8]
    28b8:	ldr	r3, [r3, #48]	; 0x30
    28bc:	mov	r2, r3
    28c0:	asr	r3, r2, #31
    28c4:	sub	r1, fp, #532	; 0x214
    28c8:	ldrd	r0, [r1, #-8]
    28cc:	cmp	r0, r2
    28d0:	sbcs	r3, r1, r3
    28d4:	blt	2994 <coda_ascbin_cursor_get_available_union_field_index+0x2b0>
    28d8:	sub	r3, fp, #532	; 0x214
    28dc:	ldrd	r0, [r3, #-8]
    28e0:	sub	r3, fp, #564	; 0x234
    28e4:	mov	r2, r3
    28e8:	bl	0 <coda_str64>
    28ec:	ldr	r3, [fp, #-592]	; 0xfffffdb0
    28f0:	ldr	r3, [r3, #4]
    28f4:	sub	r3, r3, #1
    28f8:	ldr	r2, [fp, #-592]	; 0xfffffdb0
    28fc:	add	r3, r3, #1
    2900:	lsl	r3, r3, #4
    2904:	add	r3, r2, r3
    2908:	ldrd	r2, [r3]
    290c:	mov	r0, #0
    2910:	mov	r1, #0
    2914:	lsr	r0, r2, #3
    2918:	orr	r0, r0, r3, lsl #29
    291c:	asr	r1, r3, #3
    2920:	sub	r3, fp, #588	; 0x24c
    2924:	mov	r2, r3
    2928:	bl	0 <coda_str64>
    292c:	ldr	r3, [fp, #-8]
    2930:	ldr	r1, [r3, #48]	; 0x30
    2934:	ldr	r3, [fp, #-592]	; 0xfffffdb0
    2938:	ldr	r3, [r3, #4]
    293c:	sub	r3, r3, #1
    2940:	ldr	r2, [fp, #-592]	; 0xfffffdb0
    2944:	add	r3, r3, #1
    2948:	lsl	r3, r3, #4
    294c:	add	r3, r2, r3
    2950:	ldrd	r2, [r3]
    2954:	mov	r3, r2
    2958:	and	r3, r3, #7
    295c:	sub	r2, fp, #564	; 0x234
    2960:	str	r3, [sp, #4]
    2964:	sub	r3, fp, #588	; 0x24c
    2968:	str	r3, [sp]
    296c:	mov	r3, r1
    2970:	movw	r1, #0
    2974:	movt	r1, #0
    2978:	movw	r0, #65236	; 0xfed4
    297c:	movt	r0, #65535	; 0xffff
    2980:	bl	0 <coda_set_error>
    2984:	ldr	r0, [fp, #-592]	; 0xfffffdb0
    2988:	bl	0 <coda_cursor_add_to_error_message>
    298c:	mvn	r3, #0
    2990:	b	29a8 <coda_ascbin_cursor_get_available_union_field_index+0x2c4>
    2994:	sub	r3, fp, #532	; 0x214
    2998:	ldrd	r2, [r3, #-8]
    299c:	ldr	r3, [fp, #-596]	; 0xfffffdac
    29a0:	str	r2, [r3]
    29a4:	mov	r3, #0
    29a8:	mov	r0, r3
    29ac:	sub	sp, fp, #4
    29b0:	ldr	fp, [sp]
    29b4:	add	sp, sp, #4
    29b8:	pop	{pc}		; (ldr pc, [sp], #4)

000029bc <coda_ascbin_cursor_get_array_dim>:
    29bc:	str	fp, [sp, #-8]!
    29c0:	str	lr, [sp, #4]
    29c4:	add	fp, sp, #4
    29c8:	sub	sp, sp, #56	; 0x38
    29cc:	str	r0, [fp, #-48]	; 0xffffffd0
    29d0:	str	r1, [fp, #-52]	; 0xffffffcc
    29d4:	str	r2, [fp, #-56]	; 0xffffffc8
    29d8:	ldr	r3, [fp, #-48]	; 0xffffffd0
    29dc:	ldr	r3, [r3, #4]
    29e0:	sub	r3, r3, #1
    29e4:	ldr	r2, [fp, #-48]	; 0xffffffd0
    29e8:	lsl	r3, r3, #4
    29ec:	add	r3, r2, r3
    29f0:	ldr	r3, [r3, #8]
    29f4:	ldr	r3, [r3]
    29f8:	cmp	r3, #99	; 0x63
    29fc:	bhi	2a20 <coda_ascbin_cursor_get_array_dim+0x64>
    2a00:	ldr	r3, [fp, #-48]	; 0xffffffd0
    2a04:	ldr	r3, [r3, #4]
    2a08:	sub	r3, r3, #1
    2a0c:	ldr	r2, [fp, #-48]	; 0xffffffd0
    2a10:	lsl	r3, r3, #4
    2a14:	add	r3, r2, r3
    2a18:	ldr	r3, [r3, #8]
    2a1c:	b	2a40 <coda_ascbin_cursor_get_array_dim+0x84>
    2a20:	ldr	r3, [fp, #-48]	; 0xffffffd0
    2a24:	ldr	r3, [r3, #4]
    2a28:	sub	r3, r3, #1
    2a2c:	ldr	r2, [fp, #-48]	; 0xffffffd0
    2a30:	lsl	r3, r3, #4
    2a34:	add	r3, r2, r3
    2a38:	ldr	r3, [r3, #8]
    2a3c:	ldr	r3, [r3, #4]
    2a40:	str	r3, [fp, #-12]
    2a44:	ldr	r3, [fp, #-12]
    2a48:	ldr	r2, [r3, #48]	; 0x30
    2a4c:	ldr	r3, [fp, #-52]	; 0xffffffcc
    2a50:	str	r2, [r3]
    2a54:	mov	r3, #0
    2a58:	str	r3, [fp, #-8]
    2a5c:	b	2b78 <coda_ascbin_cursor_get_array_dim+0x1bc>
    2a60:	ldr	r2, [fp, #-12]
    2a64:	ldr	r3, [fp, #-8]
    2a68:	add	r3, r3, #12
    2a6c:	lsl	r3, r3, #2
    2a70:	add	r3, r2, r3
    2a74:	ldr	r3, [r3, #4]
    2a78:	cmn	r3, #1
    2a7c:	bne	2b40 <coda_ascbin_cursor_get_array_dim+0x184>
    2a80:	ldr	r2, [fp, #-12]
    2a84:	ldr	r3, [fp, #-8]
    2a88:	add	r3, r3, #20
    2a8c:	lsl	r3, r3, #2
    2a90:	add	r3, r2, r3
    2a94:	ldr	r3, [r3, #4]
    2a98:	sub	r2, fp, #20
    2a9c:	ldr	r1, [fp, #-48]	; 0xffffffd0
    2aa0:	mov	r0, r3
    2aa4:	bl	0 <coda_expression_eval_integer>
    2aa8:	mov	r3, r0
    2aac:	cmp	r3, #0
    2ab0:	beq	2ad4 <coda_ascbin_cursor_get_array_dim+0x118>
    2ab4:	ldr	r1, [fp, #-8]
    2ab8:	movw	r0, #0
    2abc:	movt	r0, #0
    2ac0:	bl	0 <coda_add_error_message>
    2ac4:	ldr	r0, [fp, #-48]	; 0xffffffd0
    2ac8:	bl	0 <coda_cursor_add_to_error_message>
    2acc:	mvn	r3, #0
    2ad0:	b	2b90 <coda_ascbin_cursor_get_array_dim+0x1d4>
    2ad4:	ldrd	r2, [fp, #-20]	; 0xffffffec
    2ad8:	cmp	r2, #0
    2adc:	sbcs	r3, r3, #0
    2ae0:	bge	2b20 <coda_ascbin_cursor_get_array_dim+0x164>
    2ae4:	ldrd	r0, [fp, #-20]	; 0xffffffec
    2ae8:	sub	r3, fp, #44	; 0x2c
    2aec:	mov	r2, r3
    2af0:	bl	0 <coda_str64>
    2af4:	sub	r3, fp, #44	; 0x2c
    2af8:	mov	r2, r3
    2afc:	movw	r1, #0
    2b00:	movt	r1, #0
    2b04:	movw	r0, #65236	; 0xfed4
    2b08:	movt	r0, #65535	; 0xffff
    2b0c:	bl	0 <coda_set_error>
    2b10:	ldr	r0, [fp, #-48]	; 0xffffffd0
    2b14:	bl	0 <coda_cursor_add_to_error_message>
    2b18:	mvn	r3, #0
    2b1c:	b	2b90 <coda_ascbin_cursor_get_array_dim+0x1d4>
    2b20:	ldrd	r2, [fp, #-20]	; 0xffffffec
    2b24:	ldr	r1, [fp, #-8]
    2b28:	lsl	r1, r1, #2
    2b2c:	ldr	r0, [fp, #-56]	; 0xffffffc8
    2b30:	add	r1, r0, r1
    2b34:	mov	r3, r2
    2b38:	str	r3, [r1]
    2b3c:	b	2b6c <coda_ascbin_cursor_get_array_dim+0x1b0>
    2b40:	ldr	r3, [fp, #-8]
    2b44:	lsl	r3, r3, #2
    2b48:	ldr	r2, [fp, #-56]	; 0xffffffc8
    2b4c:	add	r2, r2, r3
    2b50:	ldr	r1, [fp, #-12]
    2b54:	ldr	r3, [fp, #-8]
    2b58:	add	r3, r3, #12
    2b5c:	lsl	r3, r3, #2
    2b60:	add	r3, r1, r3
    2b64:	ldr	r3, [r3, #4]
    2b68:	str	r3, [r2]
    2b6c:	ldr	r3, [fp, #-8]
    2b70:	add	r3, r3, #1
    2b74:	str	r3, [fp, #-8]
    2b78:	ldr	r3, [fp, #-12]
    2b7c:	ldr	r3, [r3, #48]	; 0x30
    2b80:	ldr	r2, [fp, #-8]
    2b84:	cmp	r2, r3
    2b88:	blt	2a60 <coda_ascbin_cursor_get_array_dim+0xa4>
    2b8c:	mov	r3, #0
    2b90:	mov	r0, r3
    2b94:	sub	sp, fp, #4
    2b98:	ldr	fp, [sp]
    2b9c:	add	sp, sp, #4
    2ba0:	pop	{pc}		; (ldr pc, [sp], #4)
