
../compcert-repos/stcorp-coda-3a25f25/CMakeFiles/coda_static.dir/lex.yy.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <coda_expression_lex>:
       0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
       4:	add	fp, sp, #28
       8:	sub	sp, sp, #68	; 0x44
       c:	str	r0, [r1, #92]	; 0x5c
      10:	mov	ip, r1
      14:	ldr	r0, [r1, #40]	; 0x28
      18:	cmp	r0, #0
      1c:	beq	5c <coda_expression_lex+0x5c>
      20:	add	r0, ip, #4
      24:	add	r3, ip, #36	; 0x24
      28:	add	lr, ip, #44	; 0x2c
      2c:	str	r0, [sp, #40]	; 0x28
      30:	add	r0, ip, #28
      34:	str	r0, [sp, #36]	; 0x24
      38:	add	r0, ip, #12
      3c:	str	r0, [sp, #48]	; 0x30
      40:	add	r0, ip, #20
      44:	str	r0, [sp, #44]	; 0x2c
      48:	add	r0, ip, #80	; 0x50
      4c:	str	r0, [fp, #-32]	; 0xffffffe0
      50:	add	r0, ip, #24
      54:	str	r0, [fp, #-44]	; 0xffffffd4
      58:	b	1e8 <coda_expression_lex+0x1e8>
      5c:	mov	lr, ip
      60:	mov	r0, #1
      64:	mov	r7, ip
      68:	ldr	r1, [lr, #44]!	; 0x2c
      6c:	cmp	r1, #0
      70:	str	r0, [lr, #-4]
      74:	streq	r0, [lr]
      78:	ldr	r5, [r7, #4]!
      7c:	cmp	r5, #0
      80:	bne	94 <coda_expression_lex+0x94>
      84:	movw	r0, #0
      88:	movt	r0, #0
      8c:	ldr	r5, [r0]
      90:	str	r5, [r7]
      94:	ldr	r0, [ip, #8]
      98:	cmp	r0, #0
      9c:	bne	b0 <coda_expression_lex+0xb0>
      a0:	movw	r0, #0
      a4:	movt	r0, #0
      a8:	ldr	r0, [r0]
      ac:	str	r0, [ip, #8]
      b0:	mov	r6, ip
      b4:	ldr	r0, [r6, #20]!
      b8:	cmp	r0, #0
      bc:	beq	130 <coda_expression_lex+0x130>
      c0:	mov	r1, ip
      c4:	ldr	r3, [r1, #12]!
      c8:	str	r1, [sp, #48]	; 0x30
      cc:	mov	r1, r0
      d0:	ldr	r2, [r1, r3, lsl #2]!
      d4:	cmp	r2, #0
      d8:	bne	19c <coda_expression_lex+0x19c>
      dc:	ldr	r1, [ip, #16]
      e0:	mov	r8, lr
      e4:	sub	r2, r1, #1
      e8:	cmp	r3, r2
      ec:	bcc	16c <coda_expression_lex+0x16c>
      f0:	add	r5, r1, #8
      f4:	mov	r4, ip
      f8:	lsl	r1, r5, #2
      fc:	bl	0 <realloc>
     100:	cmp	r0, #0
     104:	str	r0, [r6]
     108:	beq	1304 <coda_expression_lex+0x1304>
     10c:	ldr	r1, [r4, #16]
     110:	vmov.i32	q8, #0	; 0x00000000
     114:	mov	ip, r4
     118:	add	r0, r0, r1, lsl #2
     11c:	vst1.32	{d16-d17}, [r0]!
     120:	vst1.32	{d16-d17}, [r0]
     124:	str	r5, [r4, #16]
     128:	ldr	r5, [r4, #4]
     12c:	b	16c <coda_expression_lex+0x16c>
     130:	mov	r0, #4
     134:	mov	r8, lr
     138:	mov	r4, ip
     13c:	bl	0 <malloc>
     140:	cmp	r0, #0
     144:	str	r0, [r6]
     148:	beq	1304 <coda_expression_lex+0x1304>
     14c:	mov	r1, #0
     150:	mov	r2, r4
     154:	mov	ip, r4
     158:	str	r1, [r0]
     15c:	str	r1, [r2, #12]!
     160:	mov	r0, #1
     164:	str	r2, [sp, #48]	; 0x30
     168:	str	r0, [r2, #4]
     16c:	mov	r0, r5
     170:	mov	r1, #16384	; 0x4000
     174:	mov	r2, ip
     178:	mov	r4, ip
     17c:	bl	1310 <coda_expression__create_buffer>
     180:	ldr	r2, [r4, #12]
     184:	ldr	r1, [r4, #20]
     188:	mov	ip, r4
     18c:	mov	lr, r8
     190:	str	r0, [r1, r2, lsl #2]
     194:	ldr	r1, [r4, #20]
     198:	ldr	r2, [r1, r2, lsl #2]!
     19c:	ldr	r0, [r2, #16]
     1a0:	mov	r3, ip
     1a4:	str	r6, [sp, #44]	; 0x2c
     1a8:	str	r7, [sp, #40]	; 0x28
     1ac:	str	r0, [r3, #28]!
     1b0:	ldr	r0, [r2, #8]
     1b4:	str	r3, [sp, #36]	; 0x24
     1b8:	str	r0, [r3, #52]	; 0x34
     1bc:	str	r0, [r3, #8]
     1c0:	ldr	r1, [r1]
     1c4:	ldr	r1, [r1]
     1c8:	str	r1, [r3, #-24]	; 0xffffffe8
     1cc:	ldrb	r0, [r0]
     1d0:	strb	r0, [r3, #-4]
     1d4:	sub	r0, r3, #4
     1d8:	str	r0, [fp, #-44]	; 0xffffffd4
     1dc:	add	r0, r3, #52	; 0x34
     1e0:	add	r3, r3, #8
     1e4:	str	r0, [fp, #-32]	; 0xffffffe0
     1e8:	movw	r5, #0
     1ec:	movw	r4, #0
     1f0:	movw	sl, #0
     1f4:	movw	r6, #0
     1f8:	movw	r9, #0
     1fc:	movw	r8, #274	; 0x112
     200:	str	r3, [fp, #-40]	; 0xffffffd8
     204:	movt	r5, #0
     208:	movt	r4, #0
     20c:	movt	sl, #0
     210:	movt	r6, #0
     214:	movt	r9, #0
     218:	b	258 <coda_expression_lex+0x258>
     21c:	ldr	r0, [fp, #-32]	; 0xffffffe0
     220:	ldr	r3, [ip, #8]
     224:	ldr	r1, [ip, #32]
     228:	mov	r2, #1
     22c:	mov	r4, ip
     230:	mov	r5, lr
     234:	ldr	r0, [r0]
     238:	bl	0 <fwrite>
     23c:	ldr	r3, [fp, #-40]	; 0xffffffd8
     240:	mov	lr, r5
     244:	movw	r5, #0
     248:	mov	ip, r4
     24c:	movw	r4, #0
     250:	movt	r5, #0
     254:	movt	r4, #0
     258:	ldr	r0, [fp, #-44]	; 0xffffffd4
     25c:	ldr	r7, [r3]
     260:	ldrb	r0, [r0]
     264:	str	r7, [fp, #-36]	; 0xffffffdc
     268:	strb	r0, [r7]
     26c:	ldr	r0, [lr]
     270:	b	27c <coda_expression_lex+0x27c>
     274:	mov	ip, lr
     278:	ldr	lr, [sp, #16]
     27c:	add	r2, r4, r0, lsl #1
     280:	ldrb	r1, [r7]
     284:	ldrh	r2, [r2]
     288:	ldrb	r1, [r5, r1]
     28c:	cmp	r2, #0
     290:	add	r2, sl, r0, lsl #1
     294:	ldrsh	r2, [r2]
     298:	strne	r0, [ip, #64]	; 0x40
     29c:	strne	r7, [ip, #68]	; 0x44
     2a0:	add	r3, r2, r1
     2a4:	add	r2, r6, r3, lsl #1
     2a8:	ldrsh	r2, [r2]
     2ac:	cmp	r0, r2
     2b0:	beq	304 <coda_expression_lex+0x304>
     2b4:	mov	r2, r1
     2b8:	add	r0, r9, r0, lsl #1
     2bc:	ldrsh	r0, [r0]
     2c0:	cmp	r0, r8
     2c4:	uxth	r5, r0
     2c8:	movwge	r2, #0
     2cc:	movtge	r2, #0
     2d0:	ldrbge	r2, [r2, r1]
     2d4:	add	r1, sl, r0, lsl #1
     2d8:	ldrsh	r1, [r1]
     2dc:	uxtab	r3, r1, r2
     2e0:	add	r1, r6, r3, lsl #1
     2e4:	ldrh	r4, [r1]
     2e8:	uxtb	r1, r2
     2ec:	cmp	r5, r4
     2f0:	bne	2b8 <coda_expression_lex+0x2b8>
     2f4:	movw	r5, #0
     2f8:	movw	r4, #0
     2fc:	movt	r5, #0
     300:	movt	r4, #0
     304:	movw	r0, #0
     308:	movw	r2, #307	; 0x133
     30c:	add	r7, r7, #1
     310:	movt	r0, #0
     314:	add	r0, r0, r3, lsl #1
     318:	ldrsh	r0, [r0]
     31c:	add	r1, sl, r0, lsl #1
     320:	ldrh	r1, [r1]
     324:	cmp	r1, r2
     328:	bne	27c <coda_expression_lex+0x27c>
     32c:	ldr	r2, [fp, #-36]	; 0xffffffdc
     330:	ldr	r3, [fp, #-40]	; 0xffffffd8
     334:	b	348 <coda_expression_lex+0x348>
     338:	ldrb	r0, [ip, #24]
     33c:	strb	r0, [r7]
     340:	ldr	r0, [ip, #64]	; 0x40
     344:	ldr	r7, [ip, #68]	; 0x44
     348:	add	r0, r4, r0, lsl #1
     34c:	ldrh	r0, [r0]
     350:	cmp	r0, #0
     354:	bne	368 <coda_expression_lex+0x368>
     358:	ldr	r0, [ip, #64]	; 0x40
     35c:	ldr	r7, [ip, #68]	; 0x44
     360:	add	r0, r4, r0, lsl #1
     364:	ldrh	r0, [r0]
     368:	ldr	r1, [fp, #-32]	; 0xffffffe0
     36c:	sxth	r0, r0
     370:	str	r2, [r1]
     374:	sub	r1, r7, r2
     378:	str	r1, [ip, #32]
     37c:	ldrb	r1, [r7]
     380:	strb	r1, [ip, #24]
     384:	mov	r1, #0
     388:	strb	r1, [r7]
     38c:	str	r7, [r3]
     390:	cmp	r0, #76	; 0x4c
     394:	bls	3c8 <coda_expression_lex+0x3c8>
     398:	b	12c0 <coda_expression_lex+0x12c0>
     39c:	ldr	r0, [fp, #-36]	; 0xffffffdc
     3a0:	mov	r1, #76	; 0x4c
     3a4:	str	r0, [ip, #36]	; 0x24
     3a8:	mov	r0, #0
     3ac:	str	r0, [ip, #48]	; 0x30
     3b0:	ldr	r0, [ip, #44]	; 0x2c
     3b4:	sub	r0, r0, #1
     3b8:	add	r0, r0, r0, lsr #31
     3bc:	add	r0, r1, r0, asr #1
     3c0:	cmp	r0, #76	; 0x4c
     3c4:	bhi	12c0 <coda_expression_lex+0x12c0>
     3c8:	add	r1, pc, #0
     3cc:	ldr	pc, [r1, r0, lsl #2]
     3d0:	.word	0x00000338
     3d4:	.word	0x00000ef0
     3d8:	.word	0x00000f70
     3dc:	.word	0x00000f7c
     3e0:	.word	0x00000fa0
     3e4:	.word	0x00000f4c
     3e8:	.word	0x00000fac
     3ec:	.word	0x00000f58
     3f0:	.word	0x00000f64
     3f4:	.word	0x00000fe8
     3f8:	.word	0x00000f88
     3fc:	.word	0x00000ee4
     400:	.word	0x00000fb8
     404:	.word	0x00001158
     408:	.word	0x00000fc4
     40c:	.word	0x00000ecc
     410:	.word	0x00000f94
     414:	.word	0x00000ed8
     418:	.word	0x00000fd0
     41c:	.word	0x00000fdc
     420:	.word	0x00001134
     424:	.word	0x00000ff4
     428:	.word	0x00001000
     42c:	.word	0x0000117c
     430:	.word	0x00001248
     434:	.word	0x0000100c
     438:	.word	0x00001018
     43c:	.word	0x00001164
     440:	.word	0x00001254
     444:	.word	0x000011ac
     448:	.word	0x00001260
     44c:	.word	0x000010e0
     450:	.word	0x000010ec
     454:	.word	0x0000111c
     458:	.word	0x00001218
     45c:	.word	0x00000ec0
     460:	.word	0x000011b8
     464:	.word	0x00001030
     468:	.word	0x00001024
     46c:	.word	0x00001188
     470:	.word	0x00001194
     474:	.word	0x00001140
     478:	.word	0x00001170
     47c:	.word	0x000011c4
     480:	.word	0x0000103c
     484:	.word	0x0000114c
     488:	.word	0x000011dc
     48c:	.word	0x0000126c
     490:	.word	0x00001048
     494:	.word	0x000011a0
     498:	.word	0x000011e8
     49c:	.word	0x00001278
     4a0:	.word	0x00001284
     4a4:	.word	0x0000129c
     4a8:	.word	0x000011d0
     4ac:	.word	0x00001290
     4b0:	.word	0x000012a8
     4b4:	.word	0x00001224
     4b8:	.word	0x000012b4
     4bc:	.word	0x000010b0
     4c0:	.word	0x0000123c
     4c4:	.word	0x000010bc
     4c8:	.word	0x000010f8
     4cc:	.word	0x00001104
     4d0:	.word	0x000010d4
     4d4:	.word	0x000010c8
     4d8:	.word	0x00001110
     4dc:	.word	0x00001230
     4e0:	.word	0x0000108c
     4e4:	.word	0x000011f4
     4e8:	.word	0x00000e9c
     4ec:	.word	0x00001054
     4f0:	.word	0x00000258
     4f4:	.word	0x00001078
     4f8:	.word	0x0000021c
     4fc:	.word	0x00000504
     500:	.word	0x00001128
     504:	ldr	r0, [fp, #-32]	; 0xffffffe0
     508:	ldr	r1, [sp, #44]	; 0x2c
     50c:	str	r2, [sp, #20]
     510:	str	lr, [sp, #16]
     514:	ldr	r0, [r0]
     518:	str	r0, [sp, #4]
     51c:	ldr	r0, [fp, #-44]	; 0xffffffd4
     520:	ldrb	r0, [r0]
     524:	strb	r0, [r7]
     528:	ldr	r0, [sp, #48]	; 0x30
     52c:	ldr	r2, [r0]
     530:	ldr	r0, [r1]
     534:	ldr	r5, [r0, r2, lsl #2]
     538:	str	r0, [sp, #12]
     53c:	ldr	r1, [r5, #44]	; 0x2c
     540:	cmp	r1, #0
     544:	beq	554 <coda_expression_lex+0x554>
     548:	ldr	r1, [sp, #36]	; 0x24
     54c:	ldr	r1, [r1]
     550:	b	57c <coda_expression_lex+0x57c>
     554:	ldr	lr, [r5, #16]
     558:	ldr	r1, [sp, #36]	; 0x24
     55c:	str	lr, [r1]
     560:	ldr	r1, [sp, #40]	; 0x28
     564:	ldr	r1, [r1]
     568:	str	r1, [r5]
     56c:	mov	r1, #1
     570:	ldr	r5, [r0, r2, lsl #2]
     574:	str	r1, [r5, #44]	; 0x2c
     578:	mov	r1, lr
     57c:	mov	r0, r2
     580:	ldr	r2, [fp, #-32]	; 0xffffffe0
     584:	ldr	lr, [r5, #4]
     588:	str	r5, [sp, #32]
     58c:	ldr	r2, [r2]
     590:	add	r1, lr, r1
     594:	str	r2, [fp, #-36]	; 0xffffffdc
     598:	ldr	r2, [r3]
     59c:	cmp	r2, r1
     5a0:	bls	b00 <coda_expression_lex+0xb00>
     5a4:	add	r1, r1, #1
     5a8:	cmp	r2, r1
     5ac:	bhi	12cc <coda_expression_lex+0x12cc>
     5b0:	ldr	r1, [fp, #-36]	; 0xffffffdc
     5b4:	str	r2, [sp, #8]
     5b8:	sub	r5, r2, r1
     5bc:	ldr	r1, [sp, #32]
     5c0:	ldr	r2, [sp, #20]
     5c4:	ldr	r1, [r1, #40]	; 0x28
     5c8:	cmp	r1, #0
     5cc:	beq	66c <coda_expression_lex+0x66c>
     5d0:	ldr	r4, [fp, #-36]	; 0xffffffdc
     5d4:	ldr	r2, [sp, #32]
     5d8:	sub	r0, r5, #1
     5dc:	cmp	r5, #2
     5e0:	mov	r1, r5
     5e4:	str	r5, [sp, #28]
     5e8:	str	r0, [sp, #24]
     5ec:	blt	6c0 <coda_expression_lex+0x6c0>
     5f0:	ldr	r1, [sp, #8]
     5f4:	mvn	r0, r4
     5f8:	mov	r5, #1
     5fc:	add	r2, r0, r1
     600:	mov	r1, #1
     604:	mov	r0, #0
     608:	cmp	r2, #1
     60c:	movgt	r5, r2
     610:	cmp	r5, #16
     614:	bcc	680 <coda_expression_lex+0x680>
     618:	cmp	r2, #1
     61c:	movgt	r1, r2
     620:	add	r2, r4, r1
     624:	cmp	lr, r2
     628:	addcc	r1, lr, r1
     62c:	cmpcc	r4, r1
     630:	bcc	680 <coda_expression_lex+0x680>
     634:	bic	r0, r5, #-2147483633	; 0x8000000f
     638:	str	ip, [sp]
     63c:	add	r3, r4, r0
     640:	add	r2, lr, r0
     644:	mov	r1, r0
     648:	vld1.8	{d16-d17}, [r4]!
     64c:	subs	r1, r1, #16
     650:	vst1.8	{d16-d17}, [lr]!
     654:	bne	648 <coda_expression_lex+0x648>
     658:	ldr	ip, [sp]
     65c:	ldr	r4, [sp, #24]
     660:	cmp	r5, r0
     664:	bne	68c <coda_expression_lex+0x68c>
     668:	b	6a0 <coda_expression_lex+0x6a0>
     66c:	ldr	lr, [sp, #16]
     670:	cmp	r5, #1
     674:	movwne	r5, #2
     678:	mov	r1, r5
     67c:	b	adc <coda_expression_lex+0xadc>
     680:	mov	r3, r4
     684:	ldr	r4, [sp, #24]
     688:	mov	r2, lr
     68c:	ldrb	r1, [r3], #1
     690:	add	r0, r0, #1
     694:	cmp	r0, r4
     698:	strb	r1, [r2], #1
     69c:	blt	68c <coda_expression_lex+0x68c>
     6a0:	ldr	r0, [sp, #48]	; 0x30
     6a4:	ldr	r1, [sp, #44]	; 0x2c
     6a8:	ldr	r3, [fp, #-40]	; 0xffffffd8
     6ac:	ldr	r1, [r1]
     6b0:	ldr	r0, [r0]
     6b4:	str	r1, [sp, #12]
     6b8:	ldr	r2, [r1, r0, lsl #2]
     6bc:	ldr	r1, [sp, #28]
     6c0:	ldr	r0, [r2, #44]	; 0x2c
     6c4:	cmp	r0, #2
     6c8:	bne	6f4 <coda_expression_lex+0x6f4>
     6cc:	ldr	r1, [sp, #36]	; 0x24
     6d0:	mov	r0, #0
     6d4:	ldr	lr, [sp, #16]
     6d8:	mov	r3, r2
     6dc:	str	r0, [r1]
     6e0:	str	r0, [r2, #16]
     6e4:	ldr	r2, [sp, #24]
     6e8:	cmp	r2, #0
     6ec:	bne	9b4 <coda_expression_lex+0x9b4>
     6f0:	b	9c4 <coda_expression_lex+0x9c4>
     6f4:	ldr	r5, [r2, #12]
     6f8:	str	ip, [sp]
     6fc:	sub	r1, r5, r1
     700:	cmp	r1, #0
     704:	ble	718 <coda_expression_lex+0x718>
     708:	mov	r4, r1
     70c:	mov	lr, r1
     710:	ldr	r4, [sp, #12]
     714:	b	7a8 <coda_expression_lex+0x7a8>
     718:	ldr	r3, [r3]
     71c:	ldr	r1, [r2, #20]
     720:	cmp	r1, #0
     724:	beq	12d8 <coda_expression_lex+0x12d8>
     728:	ldr	r4, [r2, #4]
     72c:	cmp	r5, #0
     730:	str	r3, [sp, #32]
     734:	ble	740 <coda_expression_lex+0x740>
     738:	lsl	r1, r5, #1
     73c:	b	74c <coda_expression_lex+0x74c>
     740:	asr	r1, r5, #31
     744:	add	r1, r5, r1, lsr #29
     748:	add	r1, r5, r1, asr #3
     74c:	str	r1, [r2, #12]
     750:	add	r1, r1, #2
     754:	mov	r0, r4
     758:	mov	r5, r2
     75c:	bl	0 <realloc>
     760:	cmp	r0, #0
     764:	str	r0, [r5, #4]
     768:	beq	12e0 <coda_expression_lex+0x12e0>
     76c:	ldr	r1, [sp, #32]
     770:	sub	r1, r1, r4
     774:	add	r3, r0, r1
     778:	ldr	r0, [fp, #-40]	; 0xffffffd8
     77c:	ldr	r1, [sp, #44]	; 0x2c
     780:	str	r3, [r0]
     784:	ldr	r0, [sp, #48]	; 0x30
     788:	ldr	r4, [r1]
     78c:	ldr	r1, [sp, #28]
     790:	ldr	r0, [r0]
     794:	ldr	r2, [r4, r0, lsl #2]
     798:	ldr	r5, [r2, #12]
     79c:	sub	lr, r5, r1
     7a0:	cmp	lr, #1
     7a4:	blt	71c <coda_expression_lex+0x71c>
     7a8:	ldr	r0, [r2, #24]
     7ac:	cmp	lr, #8192	; 0x2000
     7b0:	movge	lr, #8192	; 0x2000
     7b4:	cmp	r0, #0
     7b8:	beq	868 <coda_expression_lex+0x868>
     7bc:	ldr	r0, [sp, #8]
     7c0:	ldr	r1, [fp, #-36]	; 0xffffffdc
     7c4:	mov	r5, #0
     7c8:	mov	r4, lr
     7cc:	sub	r0, r0, #1
     7d0:	sub	r0, r0, r1
     7d4:	str	r0, [fp, #-36]	; 0xffffffdc
     7d8:	ldr	r0, [sp, #40]	; 0x28
     7dc:	ldr	r0, [r0]
     7e0:	bl	0 <getc>
     7e4:	cmn	r0, #1
     7e8:	cmpne	r0, #10
     7ec:	beq	820 <coda_expression_lex+0x820>
     7f0:	ldr	r1, [sp, #48]	; 0x30
     7f4:	ldr	r2, [sp, #44]	; 0x2c
     7f8:	ldr	r1, [r1]
     7fc:	ldr	r2, [r2]
     800:	ldr	r1, [r2, r1, lsl #2]
     804:	ldr	r2, [fp, #-36]	; 0xffffffdc
     808:	ldr	r1, [r1, #4]
     80c:	add	r1, r1, r2
     810:	strb	r0, [r1, r5]
     814:	add	r5, r5, #1
     818:	cmp	r5, r4
     81c:	blt	7d8 <coda_expression_lex+0x7d8>
     820:	cmn	r0, #1
     824:	beq	960 <coda_expression_lex+0x960>
     828:	cmp	r0, #10
     82c:	bne	85c <coda_expression_lex+0x85c>
     830:	ldr	r0, [sp, #48]	; 0x30
     834:	ldr	r1, [sp, #44]	; 0x2c
     838:	ldr	r0, [r0]
     83c:	ldr	r1, [r1]
     840:	ldr	r0, [r1, r0, lsl #2]
     844:	ldr	r1, [sp, #24]
     848:	ldr	r0, [r0, #4]
     84c:	add	r0, r0, r1
     850:	mov	r1, #10
     854:	strb	r1, [r0, r5]
     858:	add	r5, r5, #1
     85c:	ldr	ip, [sp]
     860:	ldr	lr, [sp, #16]
     864:	b	97c <coda_expression_lex+0x97c>
     868:	mov	r5, lr
     86c:	bl	0 <__errno_location>
     870:	mov	r1, #0
     874:	str	r0, [sp, #32]
     878:	mov	r2, r5
     87c:	str	r1, [r0]
     880:	ldr	r0, [sp, #48]	; 0x30
     884:	ldr	r1, [sp, #24]
     888:	ldr	r0, [r0]
     88c:	ldr	r0, [r4, r0, lsl #2]
     890:	mov	r4, r5
     894:	ldr	r0, [r0, #4]
     898:	add	r0, r0, r1
     89c:	ldr	r1, [sp, #40]	; 0x28
     8a0:	ldr	r3, [r1]
     8a4:	mov	r1, #1
     8a8:	bl	0 <fread>
     8ac:	mov	r5, r0
     8b0:	ldr	r0, [sp, #36]	; 0x24
     8b4:	ldr	ip, [sp]
     8b8:	ldr	lr, [sp, #16]
     8bc:	cmp	r5, #0
     8c0:	str	r5, [r0]
     8c4:	bne	984 <coda_expression_lex+0x984>
     8c8:	mov	r0, r4
     8cc:	ldr	r4, [sp, #32]
     8d0:	ldr	r5, [sp, #40]	; 0x28
     8d4:	str	r0, [fp, #-36]	; 0xffffffdc
     8d8:	ldr	r5, [r5]
     8dc:	mov	r0, r5
     8e0:	bl	0 <ferror>
     8e4:	cmp	r0, #0
     8e8:	beq	af0 <coda_expression_lex+0xaf0>
     8ec:	ldr	r0, [r4]
     8f0:	cmp	r0, #4
     8f4:	bne	12ec <coda_expression_lex+0x12ec>
     8f8:	mov	r0, #0
     8fc:	str	r0, [r4]
     900:	mov	r0, r5
     904:	bl	0 <clearerr>
     908:	ldr	r0, [sp, #48]	; 0x30
     90c:	ldr	r1, [sp, #44]	; 0x2c
     910:	ldr	r5, [sp, #40]	; 0x28
     914:	ldr	r2, [fp, #-36]	; 0xffffffdc
     918:	ldr	r0, [r0]
     91c:	ldr	r1, [r1]
     920:	ldr	r3, [r5]
     924:	ldr	r0, [r1, r0, lsl #2]
     928:	ldr	r1, [sp, #24]
     92c:	ldr	r0, [r0, #4]
     930:	add	r0, r0, r1
     934:	mov	r1, #1
     938:	bl	0 <fread>
     93c:	mov	r1, r0
     940:	ldr	r0, [sp, #36]	; 0x24
     944:	cmp	r1, #0
     948:	str	r1, [r0]
     94c:	beq	8d8 <coda_expression_lex+0x8d8>
     950:	ldr	ip, [sp]
     954:	ldr	lr, [sp, #16]
     958:	mov	r5, r1
     95c:	b	984 <coda_expression_lex+0x984>
     960:	ldr	r0, [sp, #40]	; 0x28
     964:	ldr	r0, [r0]
     968:	bl	0 <ferror>
     96c:	ldr	ip, [sp]
     970:	ldr	lr, [sp, #16]
     974:	cmp	r0, #0
     978:	bne	12ec <coda_expression_lex+0x12ec>
     97c:	ldr	r0, [sp, #36]	; 0x24
     980:	str	r5, [r0]
     984:	ldr	r0, [sp, #48]	; 0x30
     988:	ldr	r1, [sp, #44]	; 0x2c
     98c:	ldr	r2, [sp, #24]
     990:	cmp	r5, #0
     994:	ldr	r0, [r0]
     998:	ldr	r1, [r1]
     99c:	ldr	r3, [r1, r0, lsl #2]
     9a0:	mov	r0, #0
     9a4:	str	r5, [r3, #16]
     9a8:	bne	9f8 <coda_expression_lex+0x9f8>
     9ac:	cmp	r2, #0
     9b0:	beq	9c4 <coda_expression_lex+0x9c4>
     9b4:	mov	r0, #2
     9b8:	mov	r5, #0
     9bc:	str	r0, [r3, #44]	; 0x2c
     9c0:	b	9f8 <coda_expression_lex+0x9f8>
     9c4:	ldr	r0, [ip, #4]
     9c8:	mov	r1, ip
     9cc:	mov	r4, ip
     9d0:	mov	r5, lr
     9d4:	bl	145c <coda_expression_restart>
     9d8:	ldr	r0, [r4, #12]
     9dc:	ldr	r1, [r4, #20]
     9e0:	mov	lr, r5
     9e4:	ldr	r2, [sp, #24]
     9e8:	ldr	r5, [r4, #28]
     9ec:	mov	ip, r4
     9f0:	ldr	r3, [r1, r0, lsl #2]
     9f4:	mov	r0, #1
     9f8:	str	r0, [sp, #28]
     9fc:	ldr	r0, [r3, #12]
     a00:	add	r1, r5, r2
     a04:	cmp	r1, r0
     a08:	ble	a6c <coda_expression_lex+0xa6c>
     a0c:	ldr	r0, [r3, #4]
     a10:	add	r5, r1, r5, asr #1
     a14:	mov	r4, ip
     a18:	mov	r1, r5
     a1c:	bl	0 <realloc>
     a20:	ldr	r1, [sp, #48]	; 0x30
     a24:	ldr	r2, [sp, #44]	; 0x2c
     a28:	ldr	r1, [r1]
     a2c:	ldr	r2, [r2]
     a30:	ldr	r3, [r2, r1, lsl #2]
     a34:	str	r0, [r3, #4]
     a38:	ldr	r1, [r2, r1, lsl #2]
     a3c:	ldr	r0, [r1, #4]
     a40:	cmp	r0, #0
     a44:	beq	12f8 <coda_expression_lex+0x12f8>
     a48:	sub	r2, r5, #2
     a4c:	ldr	r5, [sp, #36]	; 0x24
     a50:	ldr	lr, [sp, #16]
     a54:	mov	ip, r4
     a58:	str	r2, [r1, #12]
     a5c:	ldr	r2, [sp, #24]
     a60:	ldr	r1, [r5]
     a64:	add	r1, r1, r2
     a68:	b	a74 <coda_expression_lex+0xa74>
     a6c:	ldr	r0, [r3, #4]
     a70:	ldr	r5, [sp, #36]	; 0x24
     a74:	ldr	r4, [sp, #48]	; 0x30
     a78:	ldr	r3, [sp, #44]	; 0x2c
     a7c:	mov	r2, #0
     a80:	str	r1, [r5]
     a84:	strb	r2, [r0, r1]
     a88:	ldr	r0, [r4]
     a8c:	ldr	r1, [r3]
     a90:	ldr	r0, [r1, r0, lsl #2]
     a94:	ldr	r1, [r5]
     a98:	ldr	r0, [r0, #4]
     a9c:	add	r0, r0, r1
     aa0:	strb	r2, [r0, #1]
     aa4:	ldr	r0, [r3]
     aa8:	ldr	r2, [r4]
     aac:	ldr	r3, [fp, #-40]	; 0xffffffd8
     ab0:	movw	r4, #0
     ab4:	movt	r4, #0
     ab8:	ldr	r1, [r0, r2, lsl #2]
     abc:	str	r0, [sp, #12]
     ac0:	mov	r0, r2
     ac4:	ldr	r2, [r1, #4]
     ac8:	ldr	r1, [fp, #-32]	; 0xffffffe0
     acc:	str	r2, [r1]
     ad0:	str	r2, [fp, #-36]	; 0xffffffdc
     ad4:	ldr	r2, [sp, #20]
     ad8:	ldr	r1, [sp, #28]
     adc:	movw	r5, #0
     ae0:	cmp	r1, #1
     ae4:	movt	r5, #0
     ae8:	beq	39c <coda_expression_lex+0x39c>
     aec:	b	c94 <coda_expression_lex+0xc94>
     af0:	ldr	ip, [sp]
     af4:	ldr	lr, [sp, #16]
     af8:	mov	r5, #0
     afc:	b	984 <coda_expression_lex+0x984>
     b00:	ldr	r0, [sp, #4]
     b04:	ldr	r2, [fp, #-36]	; 0xffffffdc
     b08:	ldr	lr, [sp, #16]
     b0c:	mvn	r0, r0
     b10:	add	r1, r0, r7
     b14:	add	r7, r2, r1
     b18:	cmp	r1, #1
     b1c:	str	r7, [r3]
     b20:	ldr	r0, [lr]
     b24:	blt	bfc <coda_expression_lex+0xbfc>
     b28:	movw	r4, #0
     b2c:	mov	lr, ip
     b30:	mov	ip, r2
     b34:	movt	r4, #0
     b38:	ldrb	r1, [ip]
     b3c:	cmp	r1, #0
     b40:	ldrbne	r2, [r4, r1]
     b44:	movw	r1, #0
     b48:	movt	r1, #0
     b4c:	add	r1, r1, r0, lsl #1
     b50:	ldrh	r1, [r1]
     b54:	moveq	r2, #1
     b58:	cmp	r1, #0
     b5c:	movne	r1, lr
     b60:	strne	r0, [lr, #64]	; 0x40
     b64:	strne	ip, [lr, #68]	; 0x44
     b68:	add	r1, sl, r0, lsl #1
     b6c:	ldrsh	r1, [r1]
     b70:	add	r1, r1, r2
     b74:	add	r3, r6, r1, lsl #1
     b78:	ldrsh	r3, [r3]
     b7c:	cmp	r0, r3
     b80:	beq	bd0 <coda_expression_lex+0xbd0>
     b84:	mov	r3, r2
     b88:	add	r0, r9, r0, lsl #1
     b8c:	movw	r1, #274	; 0x112
     b90:	ldrsh	r0, [r0]
     b94:	cmp	r0, r1
     b98:	uxth	r4, r0
     b9c:	movwge	r1, #0
     ba0:	movtge	r1, #0
     ba4:	ldrbge	r3, [r1, r2]
     ba8:	add	r1, sl, r0, lsl #1
     bac:	ldrsh	r1, [r1]
     bb0:	uxtab	r1, r1, r3
     bb4:	add	r2, r6, r1, lsl #1
     bb8:	ldrh	r5, [r2]
     bbc:	uxtb	r2, r3
     bc0:	cmp	r4, r5
     bc4:	bne	b88 <coda_expression_lex+0xb88>
     bc8:	movw	r4, #0
     bcc:	movt	r4, #0
     bd0:	movw	r0, #0
     bd4:	add	ip, ip, #1
     bd8:	movt	r0, #0
     bdc:	cmp	ip, r7
     be0:	add	r0, r0, r1, lsl #1
     be4:	ldrsh	r0, [r0]
     be8:	bcc	b38 <coda_expression_lex+0xb38>
     bec:	mov	ip, lr
     bf0:	ldr	lr, [sp, #16]
     bf4:	movw	r4, #0
     bf8:	movt	r4, #0
     bfc:	add	r1, r4, r0, lsl #1
     c00:	ldrh	r1, [r1]
     c04:	cmp	r1, #0
     c08:	add	r1, sl, r0, lsl #1
     c0c:	ldrsh	r1, [r1]
     c10:	strne	r0, [ip, #64]	; 0x40
     c14:	strne	r7, [ip, #68]	; 0x44
     c18:	add	r1, r1, #1
     c1c:	add	r2, r6, r1, lsl #1
     c20:	ldrsh	r2, [r2]
     c24:	cmp	r0, r2
     c28:	beq	c58 <coda_expression_lex+0xc58>
     c2c:	mov	r2, r0
     c30:	add	r1, r9, r2, lsl #1
     c34:	ldrh	r3, [r1]
     c38:	sxth	r2, r3
     c3c:	add	r1, sl, r2, lsl #1
     c40:	ldrsh	r1, [r1]
     c44:	add	r1, r1, #1
     c48:	add	r5, r6, r1, lsl #1
     c4c:	ldrh	r5, [r5]
     c50:	cmp	r3, r5
     c54:	bne	c30 <coda_expression_lex+0xc30>
     c58:	ldr	r2, [fp, #-36]	; 0xffffffdc
     c5c:	ldr	r3, [fp, #-40]	; 0xffffffd8
     c60:	movw	r5, #0
     c64:	cmp	r1, #0
     c68:	movt	r5, #0
     c6c:	beq	348 <coda_expression_lex+0x348>
     c70:	movw	r2, #0
     c74:	movt	r2, #0
     c78:	add	r1, r2, r1, lsl #1
     c7c:	movw	r2, #273	; 0x111
     c80:	ldrh	r1, [r1]
     c84:	cmp	r1, r2
     c88:	ldr	r2, [fp, #-36]	; 0xffffffdc
     c8c:	beq	348 <coda_expression_lex+0x348>
     c90:	b	e8c <coda_expression_lex+0xe8c>
     c94:	cmp	r1, #2
     c98:	bne	da0 <coda_expression_lex+0xda0>
     c9c:	mov	r1, r0
     ca0:	ldr	r0, [sp, #12]
     ca4:	ldr	r0, [r0, r1, lsl #2]
     ca8:	ldr	r1, [sp, #36]	; 0x24
     cac:	ldr	r0, [r0, #4]
     cb0:	ldr	r1, [r1]
     cb4:	add	r7, r0, r1
     cb8:	ldr	r1, [fp, #-36]	; 0xffffffdc
     cbc:	str	r7, [r3]
     cc0:	ldr	r0, [lr]
     cc4:	cmp	r1, r7
     cc8:	mov	r2, r1
     ccc:	bcs	348 <coda_expression_lex+0x348>
     cd0:	mov	lr, ip
     cd4:	mov	ip, r1
     cd8:	ldrb	r1, [ip]
     cdc:	cmp	r1, #0
     ce0:	ldrbne	r2, [r5, r1]
     ce4:	add	r1, r4, r0, lsl #1
     ce8:	ldrh	r1, [r1]
     cec:	moveq	r2, #1
     cf0:	cmp	r1, #0
     cf4:	movne	r1, lr
     cf8:	strne	r0, [lr, #64]	; 0x40
     cfc:	strne	ip, [lr, #68]	; 0x44
     d00:	add	r1, sl, r0, lsl #1
     d04:	ldrsh	r1, [r1]
     d08:	add	r1, r1, r2
     d0c:	add	r3, r6, r1, lsl #1
     d10:	ldrsh	r3, [r3]
     d14:	cmp	r0, r3
     d18:	beq	d70 <coda_expression_lex+0xd70>
     d1c:	mov	r3, r2
     d20:	add	r0, r9, r0, lsl #1
     d24:	movw	r1, #274	; 0x112
     d28:	ldrsh	r0, [r0]
     d2c:	cmp	r0, r1
     d30:	uxth	r4, r0
     d34:	movwge	r1, #0
     d38:	movtge	r1, #0
     d3c:	ldrbge	r3, [r1, r2]
     d40:	add	r1, sl, r0, lsl #1
     d44:	ldrsh	r1, [r1]
     d48:	uxtab	r1, r1, r3
     d4c:	add	r2, r6, r1, lsl #1
     d50:	ldrh	r5, [r2]
     d54:	uxtb	r2, r3
     d58:	cmp	r4, r5
     d5c:	bne	d20 <coda_expression_lex+0xd20>
     d60:	movw	r5, #0
     d64:	movw	r4, #0
     d68:	movt	r5, #0
     d6c:	movt	r4, #0
     d70:	movw	r0, #0
     d74:	ldr	r3, [fp, #-40]	; 0xffffffd8
     d78:	add	ip, ip, #1
     d7c:	movt	r0, #0
     d80:	cmp	ip, r7
     d84:	add	r0, r0, r1, lsl #1
     d88:	ldrsh	r0, [r0]
     d8c:	bne	cd8 <coda_expression_lex+0xcd8>
     d90:	mov	ip, lr
     d94:	ldr	r2, [fp, #-36]	; 0xffffffdc
     d98:	ldr	lr, [sp, #16]
     d9c:	b	348 <coda_expression_lex+0x348>
     da0:	cmp	r1, #0
     da4:	bne	258 <coda_expression_lex+0x258>
     da8:	ldr	r0, [sp, #4]
     dac:	mvn	r0, r0
     db0:	add	r1, r0, r7
     db4:	ldr	r0, [fp, #-36]	; 0xffffffdc
     db8:	cmp	r1, #1
     dbc:	add	r7, r0, r1
     dc0:	str	r7, [r3]
     dc4:	ldr	r0, [lr]
     dc8:	blt	27c <coda_expression_lex+0x27c>
     dcc:	mov	lr, ip
     dd0:	ldr	ip, [fp, #-36]	; 0xffffffdc
     dd4:	ldrb	r1, [ip]
     dd8:	cmp	r1, #0
     ddc:	ldrbne	r2, [r5, r1]
     de0:	add	r1, r4, r0, lsl #1
     de4:	ldrh	r1, [r1]
     de8:	moveq	r2, #1
     dec:	cmp	r1, #0
     df0:	movne	r1, lr
     df4:	strne	r0, [lr, #64]	; 0x40
     df8:	strne	ip, [lr, #68]	; 0x44
     dfc:	add	r1, sl, r0, lsl #1
     e00:	ldrsh	r1, [r1]
     e04:	add	r1, r1, r2
     e08:	add	r3, r6, r1, lsl #1
     e0c:	ldrsh	r3, [r3]
     e10:	cmp	r0, r3
     e14:	beq	e6c <coda_expression_lex+0xe6c>
     e18:	mov	r3, r2
     e1c:	add	r0, r9, r0, lsl #1
     e20:	movw	r1, #274	; 0x112
     e24:	ldrsh	r0, [r0]
     e28:	cmp	r0, r1
     e2c:	uxth	r4, r0
     e30:	movwge	r1, #0
     e34:	movtge	r1, #0
     e38:	ldrbge	r3, [r1, r2]
     e3c:	add	r1, sl, r0, lsl #1
     e40:	ldrsh	r1, [r1]
     e44:	uxtab	r1, r1, r3
     e48:	add	r2, r6, r1, lsl #1
     e4c:	ldrh	r5, [r2]
     e50:	uxtb	r2, r3
     e54:	cmp	r4, r5
     e58:	bne	e1c <coda_expression_lex+0xe1c>
     e5c:	movw	r5, #0
     e60:	movw	r4, #0
     e64:	movt	r5, #0
     e68:	movt	r4, #0
     e6c:	movw	r0, #0
     e70:	add	ip, ip, #1
     e74:	movt	r0, #0
     e78:	cmp	ip, r7
     e7c:	add	r0, r0, r1, lsl #1
     e80:	ldrsh	r0, [r0]
     e84:	bcc	dd4 <coda_expression_lex+0xdd4>
     e88:	b	274 <coda_expression_lex+0x274>
     e8c:	add	r7, r7, #1
     e90:	sxth	r0, r1
     e94:	str	r7, [r3]
     e98:	b	27c <coda_expression_lex+0x27c>
     e9c:	ldr	r0, [fp, #-32]	; 0xffffffe0
     ea0:	mov	r4, ip
     ea4:	ldr	r0, [r0]
     ea8:	bl	0 <strdup>
     eac:	ldr	r1, [r4, #92]	; 0x5c
     eb0:	str	r0, [r1]
     eb4:	movw	r0, #258	; 0x102
     eb8:	sub	sp, fp, #28
     ebc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
     ec0:	movw	r0, #297	; 0x129
     ec4:	sub	sp, fp, #28
     ec8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
     ecc:	movw	r0, #277	; 0x115
     ed0:	sub	sp, fp, #28
     ed4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
     ed8:	movw	r0, #279	; 0x117
     edc:	sub	sp, fp, #28
     ee0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
     ee4:	movw	r0, #273	; 0x111
     ee8:	sub	sp, fp, #28
     eec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
     ef0:	ldr	r0, [ip, #32]
     ef4:	mov	r4, ip
     ef8:	sub	r0, r0, #1
     efc:	bl	0 <malloc>
     f00:	ldr	r1, [r4, #92]	; 0x5c
     f04:	str	r0, [r1]
     f08:	ldr	r1, [fp, #-32]	; 0xffffffe0
     f0c:	ldr	r0, [r4, #92]	; 0x5c
     f10:	ldr	r2, [r4, #32]
     f14:	ldr	r1, [r1]
     f18:	ldr	r0, [r0]
     f1c:	sub	r2, r2, #2
     f20:	add	r1, r1, #1
     f24:	bl	0 <memcpy>
     f28:	ldr	r1, [r4, #92]	; 0x5c
     f2c:	ldr	r0, [r4, #32]
     f30:	ldr	r1, [r1]
     f34:	add	r0, r1, r0
     f38:	mov	r1, #0
     f3c:	strb	r1, [r0, #-2]
     f40:	mov	r0, #260	; 0x104
     f44:	sub	sp, fp, #28
     f48:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
     f4c:	movw	r0, #269	; 0x10d
     f50:	sub	sp, fp, #28
     f54:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
     f58:	movw	r0, #271	; 0x10f
     f5c:	sub	sp, fp, #28
     f60:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
     f64:	movw	r0, #263	; 0x107
     f68:	sub	sp, fp, #28
     f6c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
     f70:	movw	r0, #266	; 0x10a
     f74:	sub	sp, fp, #28
     f78:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
     f7c:	movw	r0, #267	; 0x10b
     f80:	sub	sp, fp, #28
     f84:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
     f88:	movw	r0, #265	; 0x109
     f8c:	sub	sp, fp, #28
     f90:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
     f94:	movw	r0, #278	; 0x116
     f98:	sub	sp, fp, #28
     f9c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
     fa0:	mov	r0, #268	; 0x10c
     fa4:	sub	sp, fp, #28
     fa8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
     fac:	movw	r0, #270	; 0x10e
     fb0:	sub	sp, fp, #28
     fb4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
     fb8:	movw	r0, #274	; 0x112
     fbc:	sub	sp, fp, #28
     fc0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
     fc4:	mov	r0, #276	; 0x114
     fc8:	sub	sp, fp, #28
     fcc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
     fd0:	mov	r0, #280	; 0x118
     fd4:	sub	sp, fp, #28
     fd8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
     fdc:	movw	r0, #281	; 0x119
     fe0:	sub	sp, fp, #28
     fe4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
     fe8:	mov	r0, #264	; 0x108
     fec:	sub	sp, fp, #28
     ff0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
     ff4:	movw	r0, #283	; 0x11b
     ff8:	sub	sp, fp, #28
     ffc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1000:	mov	r0, #284	; 0x11c
    1004:	sub	sp, fp, #28
    1008:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    100c:	movw	r0, #287	; 0x11f
    1010:	sub	sp, fp, #28
    1014:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1018:	mov	r0, #288	; 0x120
    101c:	sub	sp, fp, #28
    1020:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1024:	mov	r0, #300	; 0x12c
    1028:	sub	sp, fp, #28
    102c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1030:	movw	r0, #299	; 0x12b
    1034:	sub	sp, fp, #28
    1038:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    103c:	movw	r0, #306	; 0x132
    1040:	sub	sp, fp, #28
    1044:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1048:	movw	r0, #310	; 0x136
    104c:	sub	sp, fp, #28
    1050:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1054:	ldr	r0, [fp, #-32]	; 0xffffffe0
    1058:	mov	r4, ip
    105c:	ldr	r0, [r0]
    1060:	bl	0 <strdup>
    1064:	ldr	r1, [r4, #92]	; 0x5c
    1068:	str	r0, [r1]
    106c:	movw	r0, #259	; 0x103
    1070:	sub	sp, fp, #28
    1074:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1078:	ldr	r0, [fp, #-32]	; 0xffffffe0
    107c:	ldr	r0, [r0]
    1080:	ldrb	r0, [r0]
    1084:	sub	sp, fp, #28
    1088:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    108c:	ldr	r0, [fp, #-32]	; 0xffffffe0
    1090:	mov	r4, ip
    1094:	ldr	r0, [r0]
    1098:	bl	0 <strdup>
    109c:	ldr	r1, [r4, #92]	; 0x5c
    10a0:	str	r0, [r1]
    10a4:	movw	r0, #262	; 0x106
    10a8:	sub	sp, fp, #28
    10ac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    10b0:	movw	r0, #321	; 0x141
    10b4:	sub	sp, fp, #28
    10b8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    10bc:	movw	r0, #323	; 0x143
    10c0:	sub	sp, fp, #28
    10c4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    10c8:	movw	r0, #327	; 0x147
    10cc:	sub	sp, fp, #28
    10d0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    10d4:	movw	r0, #326	; 0x146
    10d8:	sub	sp, fp, #28
    10dc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    10e0:	movw	r0, #293	; 0x125
    10e4:	sub	sp, fp, #28
    10e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    10ec:	movw	r0, #294	; 0x126
    10f0:	sub	sp, fp, #28
    10f4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    10f8:	mov	r0, #324	; 0x144
    10fc:	sub	sp, fp, #28
    1100:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1104:	movw	r0, #325	; 0x145
    1108:	sub	sp, fp, #28
    110c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1110:	mov	r0, #328	; 0x148
    1114:	sub	sp, fp, #28
    1118:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    111c:	movw	r0, #295	; 0x127
    1120:	sub	sp, fp, #28
    1124:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1128:	mov	r0, #0
    112c:	sub	sp, fp, #28
    1130:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1134:	movw	r0, #282	; 0x11a
    1138:	sub	sp, fp, #28
    113c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1140:	movw	r0, #303	; 0x12f
    1144:	sub	sp, fp, #28
    1148:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    114c:	movw	r0, #307	; 0x133
    1150:	sub	sp, fp, #28
    1154:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1158:	movw	r0, #275	; 0x113
    115c:	sub	sp, fp, #28
    1160:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1164:	movw	r0, #289	; 0x121
    1168:	sub	sp, fp, #28
    116c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1170:	mov	r0, #304	; 0x130
    1174:	sub	sp, fp, #28
    1178:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    117c:	movw	r0, #285	; 0x11d
    1180:	sub	sp, fp, #28
    1184:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1188:	movw	r0, #301	; 0x12d
    118c:	sub	sp, fp, #28
    1190:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1194:	movw	r0, #302	; 0x12e
    1198:	sub	sp, fp, #28
    119c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    11a0:	movw	r0, #311	; 0x137
    11a4:	sub	sp, fp, #28
    11a8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    11ac:	movw	r0, #291	; 0x123
    11b0:	sub	sp, fp, #28
    11b4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    11b8:	movw	r0, #298	; 0x12a
    11bc:	sub	sp, fp, #28
    11c0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    11c4:	movw	r0, #305	; 0x131
    11c8:	sub	sp, fp, #28
    11cc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    11d0:	mov	r0, #316	; 0x13c
    11d4:	sub	sp, fp, #28
    11d8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    11dc:	mov	r0, #308	; 0x134
    11e0:	sub	sp, fp, #28
    11e4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    11e8:	mov	r0, #312	; 0x138
    11ec:	sub	sp, fp, #28
    11f0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    11f4:	ldr	r0, [fp, #-32]	; 0xffffffe0
    11f8:	mov	r4, ip
    11fc:	ldr	r0, [r0]
    1200:	bl	0 <strdup>
    1204:	ldr	r1, [r4, #92]	; 0x5c
    1208:	str	r0, [r1]
    120c:	movw	r0, #261	; 0x105
    1210:	sub	sp, fp, #28
    1214:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1218:	mov	r0, #296	; 0x128
    121c:	sub	sp, fp, #28
    1220:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1224:	movw	r0, #319	; 0x13f
    1228:	sub	sp, fp, #28
    122c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1230:	movw	r0, #329	; 0x149
    1234:	sub	sp, fp, #28
    1238:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    123c:	movw	r0, #322	; 0x142
    1240:	sub	sp, fp, #28
    1244:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1248:	movw	r0, #286	; 0x11e
    124c:	sub	sp, fp, #28
    1250:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1254:	movw	r0, #290	; 0x122
    1258:	sub	sp, fp, #28
    125c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1260:	mov	r0, #292	; 0x124
    1264:	sub	sp, fp, #28
    1268:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    126c:	movw	r0, #309	; 0x135
    1270:	sub	sp, fp, #28
    1274:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1278:	movw	r0, #313	; 0x139
    127c:	sub	sp, fp, #28
    1280:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1284:	movw	r0, #314	; 0x13a
    1288:	sub	sp, fp, #28
    128c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1290:	movw	r0, #317	; 0x13d
    1294:	sub	sp, fp, #28
    1298:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    129c:	movw	r0, #315	; 0x13b
    12a0:	sub	sp, fp, #28
    12a4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    12a8:	movw	r0, #318	; 0x13e
    12ac:	sub	sp, fp, #28
    12b0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    12b4:	mov	r0, #320	; 0x140
    12b8:	sub	sp, fp, #28
    12bc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    12c0:	movw	r0, #0
    12c4:	movt	r0, #0
    12c8:	bl	1430 <yy_fatal_error>
    12cc:	movw	r0, #0
    12d0:	movt	r0, #0
    12d4:	bl	1430 <yy_fatal_error>
    12d8:	mov	r0, #0
    12dc:	str	r0, [r2, #4]
    12e0:	movw	r0, #0
    12e4:	movt	r0, #0
    12e8:	bl	1430 <yy_fatal_error>
    12ec:	movw	r0, #0
    12f0:	movt	r0, #0
    12f4:	bl	1430 <yy_fatal_error>
    12f8:	movw	r0, #0
    12fc:	movt	r0, #0
    1300:	bl	1430 <yy_fatal_error>
    1304:	movw	r0, #0
    1308:	movt	r0, #0
    130c:	bl	1430 <yy_fatal_error>

00001310 <coda_expression__create_buffer>:
    1310:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
    1314:	add	fp, sp, #24
    1318:	mov	r8, r0
    131c:	mov	r0, #48	; 0x30
    1320:	mov	r5, r2
    1324:	mov	r7, r1
    1328:	bl	0 <malloc>
    132c:	cmp	r0, #0
    1330:	beq	1424 <coda_expression__create_buffer+0x114>
    1334:	mov	r4, r0
    1338:	str	r7, [r0, #12]
    133c:	add	r0, r7, #2
    1340:	bl	0 <malloc>
    1344:	cmp	r0, #0
    1348:	str	r0, [r4, #4]
    134c:	beq	1424 <coda_expression__create_buffer+0x114>
    1350:	mov	r6, #1
    1354:	mov	r7, r0
    1358:	str	r6, [r4, #20]
    135c:	bl	0 <__errno_location>
    1360:	mov	r3, #0
    1364:	ldr	r1, [r0]
    1368:	str	r3, [r4, #16]
    136c:	str	r6, [r4, #28]
    1370:	str	r7, [r4, #8]
    1374:	strh	r3, [r7]
    1378:	str	r3, [r4, #44]	; 0x2c
    137c:	ldr	r2, [r5, #20]
    1380:	cmp	r2, #0
    1384:	ldrne	r3, [r5, #12]
    1388:	ldrne	r3, [r2, r3, lsl #2]
    138c:	cmp	r3, r4
    1390:	beq	13b4 <coda_expression__create_buffer+0xa4>
    1394:	mov	r3, #1
    1398:	cmp	r2, #0
    139c:	str	r3, [r4, #40]	; 0x28
    13a0:	str	r8, [r4]
    13a4:	beq	13f8 <coda_expression__create_buffer+0xe8>
    13a8:	ldr	r3, [r5, #12]
    13ac:	add	r2, r2, r3, lsl #2
    13b0:	b	13f0 <coda_expression__create_buffer+0xe0>
    13b4:	ldr	r3, [r5, #12]
    13b8:	ldr	r3, [r2, r3, lsl #2]!
    13bc:	ldr	r7, [r3, #16]
    13c0:	str	r7, [r5, #28]
    13c4:	ldr	r3, [r3, #8]
    13c8:	str	r3, [r5, #80]	; 0x50
    13cc:	str	r3, [r5, #36]	; 0x24
    13d0:	ldr	r7, [r2]
    13d4:	ldr	r7, [r7]
    13d8:	str	r7, [r5, #4]
    13dc:	ldrb	r3, [r3]
    13e0:	strb	r3, [r5, #24]
    13e4:	mov	r3, #1
    13e8:	str	r3, [r4, #40]	; 0x28
    13ec:	str	r8, [r4]
    13f0:	ldr	r2, [r2]
    13f4:	b	13fc <coda_expression__create_buffer+0xec>
    13f8:	mov	r2, #0
    13fc:	cmp	r2, r4
    1400:	movne	r3, #1
    1404:	movne	r2, #0
    1408:	strne	r3, [r4, #32]
    140c:	strne	r2, [r4, #36]	; 0x24
    1410:	mov	r2, #1
    1414:	str	r2, [r4, #24]
    1418:	str	r1, [r0]
    141c:	mov	r0, r4
    1420:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
    1424:	movw	r0, #0
    1428:	movt	r0, #0
    142c:	bl	1430 <yy_fatal_error>

00001430 <yy_fatal_error>:
    1430:	push	{fp, lr}
    1434:	mov	fp, sp
    1438:	mov	r2, r0
    143c:	movw	r0, #0
    1440:	movw	r1, #0
    1444:	movt	r0, #0
    1448:	movt	r1, #0
    144c:	ldr	r0, [r0]
    1450:	bl	0 <fprintf>
    1454:	mov	r0, #2
    1458:	bl	0 <exit>

0000145c <coda_expression_restart>:
    145c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
    1460:	add	fp, sp, #24
    1464:	mov	r8, r0
    1468:	ldr	r0, [r1, #20]
    146c:	mov	r4, r1
    1470:	cmp	r0, #0
    1474:	beq	14cc <coda_expression_restart+0x70>
    1478:	ldr	r1, [r4, #12]
    147c:	ldr	r2, [r0, r1, lsl #2]
    1480:	cmp	r2, #0
    1484:	bne	151c <coda_expression_restart+0xc0>
    1488:	ldr	r2, [r4, #16]
    148c:	sub	r3, r2, #1
    1490:	cmp	r1, r3
    1494:	bcc	14f4 <coda_expression_restart+0x98>
    1498:	add	r6, r2, #8
    149c:	lsl	r1, r6, #2
    14a0:	bl	0 <realloc>
    14a4:	cmp	r0, #0
    14a8:	str	r0, [r4, #20]
    14ac:	beq	163c <coda_expression_restart+0x1e0>
    14b0:	ldr	r1, [r4, #16]
    14b4:	vmov.i32	q8, #0	; 0x00000000
    14b8:	add	r0, r0, r1, lsl #2
    14bc:	vst1.32	{d16-d17}, [r0]!
    14c0:	vst1.32	{d16-d17}, [r0]
    14c4:	str	r6, [r4, #16]
    14c8:	b	14f4 <coda_expression_restart+0x98>
    14cc:	mov	r0, #4
    14d0:	bl	0 <malloc>
    14d4:	cmp	r0, #0
    14d8:	str	r0, [r4, #20]
    14dc:	beq	163c <coda_expression_restart+0x1e0>
    14e0:	mov	r1, #0
    14e4:	str	r1, [r0]
    14e8:	mov	r0, #1
    14ec:	str	r1, [r4, #12]
    14f0:	str	r0, [r4, #16]
    14f4:	ldr	r0, [r4, #4]
    14f8:	mov	r1, #16384	; 0x4000
    14fc:	mov	r2, r4
    1500:	bl	1310 <coda_expression__create_buffer>
    1504:	ldr	r1, [r4, #12]
    1508:	ldr	r2, [r4, #20]
    150c:	str	r0, [r2, r1, lsl #2]
    1510:	ldr	r0, [r4, #20]
    1514:	cmp	r0, #0
    1518:	beq	1638 <coda_expression_restart+0x1dc>
    151c:	ldr	r6, [r0, r1, lsl #2]
    1520:	bl	0 <__errno_location>
    1524:	cmp	r6, #0
    1528:	beq	1638 <coda_expression_restart+0x1dc>
    152c:	mov	r3, #0
    1530:	ldr	r1, [r0]
    1534:	str	r3, [r6, #16]
    1538:	ldr	r2, [r6, #4]
    153c:	strb	r3, [r2]
    1540:	ldr	r2, [r6, #4]
    1544:	strb	r3, [r2, #1]
    1548:	mov	r2, #1
    154c:	str	r2, [r6, #28]
    1550:	str	r3, [r6, #44]	; 0x2c
    1554:	ldr	r2, [r6, #4]
    1558:	str	r2, [r6, #8]
    155c:	ldr	r2, [r4, #20]
    1560:	cmp	r2, #0
    1564:	ldrne	r3, [r4, #12]
    1568:	ldrne	r3, [r2, r3, lsl #2]
    156c:	cmp	r3, r6
    1570:	beq	1594 <coda_expression_restart+0x138>
    1574:	mov	r3, #1
    1578:	cmp	r2, #0
    157c:	str	r3, [r6, #40]	; 0x28
    1580:	str	r8, [r6]
    1584:	beq	15dc <coda_expression_restart+0x180>
    1588:	ldr	r3, [r4, #12]
    158c:	add	r3, r2, r3, lsl #2
    1590:	b	15d4 <coda_expression_restart+0x178>
    1594:	ldr	r5, [r4, #12]
    1598:	mov	r3, r2
    159c:	ldr	r5, [r3, r5, lsl #2]!
    15a0:	ldr	r7, [r5, #16]
    15a4:	str	r7, [r4, #28]
    15a8:	ldr	r7, [r5, #8]
    15ac:	str	r7, [r4, #80]	; 0x50
    15b0:	str	r7, [r4, #36]	; 0x24
    15b4:	ldr	r5, [r3]
    15b8:	ldr	r5, [r5]
    15bc:	str	r5, [r4, #4]
    15c0:	ldrb	r7, [r7]
    15c4:	strb	r7, [r4, #24]
    15c8:	mov	r7, #1
    15cc:	str	r7, [r6, #40]	; 0x28
    15d0:	str	r8, [r6]
    15d4:	ldr	r3, [r3]
    15d8:	b	15e4 <coda_expression_restart+0x188>
    15dc:	mov	r2, #0
    15e0:	mov	r3, #0
    15e4:	cmp	r3, r6
    15e8:	movne	r7, #1
    15ec:	movne	r3, #0
    15f0:	strne	r7, [r6, #32]
    15f4:	strne	r3, [r6, #36]	; 0x24
    15f8:	mov	r3, #1
    15fc:	str	r3, [r6, #24]
    1600:	str	r1, [r0]
    1604:	ldr	r0, [r4, #12]
    1608:	ldr	r1, [r2, r0, lsl #2]
    160c:	ldr	r3, [r1, #16]
    1610:	str	r3, [r4, #28]
    1614:	ldr	r1, [r1, #8]
    1618:	str	r1, [r4, #80]	; 0x50
    161c:	str	r1, [r4, #36]	; 0x24
    1620:	ldr	r0, [r2, r0, lsl #2]
    1624:	ldr	r0, [r0]
    1628:	str	r0, [r4, #4]
    162c:	ldrb	r0, [r1]
    1630:	strb	r0, [r4, #24]
    1634:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
    1638:	udf	#65006	; 0xfdee
    163c:	movw	r0, #0
    1640:	movt	r0, #0
    1644:	bl	1430 <yy_fatal_error>

00001648 <coda_expression__switch_to_buffer>:
    1648:	push	{r4, r5, r6, sl, fp, lr}
    164c:	add	fp, sp, #16
    1650:	mov	r5, r0
    1654:	ldr	r0, [r1, #20]
    1658:	mov	r4, r1
    165c:	cmp	r0, #0
    1660:	beq	16ac <coda_expression__switch_to_buffer+0x64>
    1664:	ldr	r1, [r4, #16]
    1668:	ldr	r2, [r4, #12]
    166c:	sub	r3, r1, #1
    1670:	cmp	r2, r3
    1674:	bcc	16d4 <coda_expression__switch_to_buffer+0x8c>
    1678:	add	r6, r1, #8
    167c:	lsl	r1, r6, #2
    1680:	bl	0 <realloc>
    1684:	cmp	r0, #0
    1688:	str	r0, [r4, #20]
    168c:	beq	1760 <coda_expression__switch_to_buffer+0x118>
    1690:	ldr	r1, [r4, #16]
    1694:	vmov.i32	q8, #0	; 0x00000000
    1698:	add	r1, r0, r1, lsl #2
    169c:	vst1.32	{d16-d17}, [r1]!
    16a0:	vst1.32	{d16-d17}, [r1]
    16a4:	str	r6, [r4, #16]
    16a8:	b	16d4 <coda_expression__switch_to_buffer+0x8c>
    16ac:	mov	r0, #4
    16b0:	bl	0 <malloc>
    16b4:	cmp	r0, #0
    16b8:	str	r0, [r4, #20]
    16bc:	beq	1760 <coda_expression__switch_to_buffer+0x118>
    16c0:	mov	r1, #0
    16c4:	mov	r2, #1
    16c8:	str	r1, [r0]
    16cc:	str	r1, [r4, #12]
    16d0:	str	r2, [r4, #16]
    16d4:	ldr	r1, [r4, #12]
    16d8:	ldr	r1, [r0, r1, lsl #2]
    16dc:	cmp	r1, r5
    16e0:	popeq	{r4, r5, r6, sl, fp, pc}
    16e4:	ldr	r1, [r4, #12]
    16e8:	ldr	r2, [r0, r1, lsl #2]
    16ec:	cmp	r2, #0
    16f0:	beq	1720 <coda_expression__switch_to_buffer+0xd8>
    16f4:	ldr	r0, [r4, #36]	; 0x24
    16f8:	ldrb	r1, [r4, #24]
    16fc:	strb	r1, [r0]
    1700:	ldr	r1, [r4, #12]
    1704:	ldr	r0, [r4, #20]
    1708:	ldr	r2, [r4, #36]	; 0x24
    170c:	ldr	r3, [r0, r1, lsl #2]
    1710:	str	r2, [r3, #8]
    1714:	ldr	r2, [r0, r1, lsl #2]
    1718:	ldr	r3, [r4, #28]
    171c:	str	r3, [r2, #16]
    1720:	str	r5, [r0, r1, lsl #2]
    1724:	ldr	r0, [r4, #20]
    1728:	ldr	r2, [r0, r1, lsl #2]
    172c:	ldr	r3, [r2, #16]
    1730:	str	r3, [r4, #28]
    1734:	ldr	r2, [r2, #8]
    1738:	str	r2, [r4, #80]	; 0x50
    173c:	str	r2, [r4, #36]	; 0x24
    1740:	ldr	r0, [r0, r1, lsl #2]
    1744:	mov	r1, #1
    1748:	ldr	r0, [r0]
    174c:	str	r0, [r4, #4]
    1750:	ldrb	r0, [r2]
    1754:	str	r1, [r4, #48]	; 0x30
    1758:	strb	r0, [r4, #24]
    175c:	pop	{r4, r5, r6, sl, fp, pc}
    1760:	movw	r0, #0
    1764:	movt	r0, #0
    1768:	bl	1430 <yy_fatal_error>

0000176c <coda_expression_alloc>:
    176c:	b	0 <malloc>

00001770 <coda_expression__delete_buffer>:
    1770:	cmp	r0, #0
    1774:	bxeq	lr
    1778:	push	{r4, sl, fp, lr}
    177c:	add	fp, sp, #8
    1780:	mov	r4, r0
    1784:	ldr	r0, [r1, #20]
    1788:	cmp	r0, #0
    178c:	ldrne	r2, [r1, #12]
    1790:	ldrne	r2, [r0, r2, lsl #2]
    1794:	moveq	r2, #0
    1798:	cmp	r2, r4
    179c:	ldreq	r1, [r1, #12]
    17a0:	moveq	r2, #0
    17a4:	streq	r2, [r0, r1, lsl #2]
    17a8:	ldr	r0, [r4, #20]
    17ac:	cmp	r0, #0
    17b0:	beq	17bc <coda_expression__delete_buffer+0x4c>
    17b4:	ldr	r0, [r4, #4]
    17b8:	bl	0 <free>
    17bc:	mov	r0, r4
    17c0:	pop	{r4, sl, fp, lr}
    17c4:	b	0 <free>

000017c8 <coda_expression_free>:
    17c8:	b	0 <free>

000017cc <coda_expression__flush_buffer>:
    17cc:	cmp	r0, #0
    17d0:	beq	1848 <coda_expression__flush_buffer+0x7c>
    17d4:	mov	r3, #0
    17d8:	str	r3, [r0, #16]
    17dc:	ldr	r2, [r0, #4]
    17e0:	strb	r3, [r2]
    17e4:	ldr	r2, [r0, #4]
    17e8:	strb	r3, [r2, #1]
    17ec:	mov	r2, #1
    17f0:	str	r2, [r0, #28]
    17f4:	str	r3, [r0, #44]	; 0x2c
    17f8:	ldr	r2, [r0, #4]
    17fc:	str	r2, [r0, #8]
    1800:	ldr	r2, [r1, #20]
    1804:	cmp	r2, #0
    1808:	ldrne	r3, [r1, #12]
    180c:	ldrne	r3, [r2, r3, lsl #2]
    1810:	cmp	r3, r0
    1814:	bxne	lr
    1818:	ldr	ip, [r1, #12]
    181c:	ldr	r3, [r2, ip, lsl #2]
    1820:	ldr	r0, [r3, #16]
    1824:	str	r0, [r1, #28]
    1828:	ldr	r0, [r3, #8]
    182c:	str	r0, [r1, #80]	; 0x50
    1830:	str	r0, [r1, #36]	; 0x24
    1834:	ldr	r2, [r2, ip, lsl #2]
    1838:	ldr	r2, [r2]
    183c:	str	r2, [r1, #4]
    1840:	ldrb	r0, [r0]
    1844:	strb	r0, [r1, #24]
    1848:	bx	lr

0000184c <coda_expression_push_buffer_state>:
    184c:	push	{r4, r5, r6, r7, fp, lr}
    1850:	add	fp, sp, #16
    1854:	cmp	r0, #0
    1858:	popeq	{r4, r5, r6, r7, fp, pc}
    185c:	mov	r5, r0
    1860:	ldr	r0, [r1, #20]
    1864:	mov	r4, r1
    1868:	cmp	r0, #0
    186c:	beq	18c0 <coda_expression_push_buffer_state+0x74>
    1870:	mov	r6, r4
    1874:	ldr	r1, [r6, #12]!
    1878:	ldr	r2, [r6, #4]
    187c:	sub	r3, r2, #1
    1880:	cmp	r1, r3
    1884:	bcc	18ec <coda_expression_push_buffer_state+0xa0>
    1888:	add	r7, r2, #8
    188c:	lsl	r1, r7, #2
    1890:	bl	0 <realloc>
    1894:	cmp	r0, #0
    1898:	str	r0, [r4, #20]
    189c:	beq	1984 <coda_expression_push_buffer_state+0x138>
    18a0:	ldr	r1, [r4, #16]
    18a4:	vmov.i32	q8, #0	; 0x00000000
    18a8:	add	r1, r0, r1, lsl #2
    18ac:	vst1.32	{d16-d17}, [r1]!
    18b0:	vst1.32	{d16-d17}, [r1]
    18b4:	str	r7, [r4, #16]
    18b8:	ldr	r1, [r4, #12]
    18bc:	b	18ec <coda_expression_push_buffer_state+0xa0>
    18c0:	mov	r0, #4
    18c4:	bl	0 <malloc>
    18c8:	cmp	r0, #0
    18cc:	str	r0, [r4, #20]
    18d0:	beq	1984 <coda_expression_push_buffer_state+0x138>
    18d4:	mov	r1, #0
    18d8:	mov	r6, r4
    18dc:	mov	r2, #1
    18e0:	str	r1, [r0]
    18e4:	str	r1, [r6, #12]!
    18e8:	str	r2, [r6, #4]
    18ec:	ldr	r2, [r0, r1, lsl #2]
    18f0:	cmp	r2, #0
    18f4:	beq	192c <coda_expression_push_buffer_state+0xe0>
    18f8:	ldr	r0, [r4, #36]	; 0x24
    18fc:	ldrb	r1, [r4, #24]
    1900:	strb	r1, [r0]
    1904:	ldr	r0, [r4, #20]
    1908:	ldr	r1, [r4, #12]
    190c:	ldr	r3, [r4, #36]	; 0x24
    1910:	mov	r2, r0
    1914:	ldr	r7, [r2, r1, lsl #2]!
    1918:	str	r3, [r7, #8]
    191c:	ldr	r3, [r2]
    1920:	ldr	r7, [r4, #28]
    1924:	str	r7, [r3, #16]
    1928:	b	1934 <coda_expression_push_buffer_state+0xe8>
    192c:	mov	r2, r0
    1930:	ldr	r3, [r2, r1, lsl #2]!
    1934:	cmp	r3, #0
    1938:	addne	r1, r1, #1
    193c:	addne	r2, r0, r1, lsl #2
    1940:	strne	r1, [r6]
    1944:	str	r5, [r2]
    1948:	ldr	r0, [r4, #20]
    194c:	ldr	r2, [r0, r1, lsl #2]
    1950:	ldr	r3, [r2, #16]
    1954:	str	r3, [r4, #28]
    1958:	ldr	r2, [r2, #8]
    195c:	str	r2, [r4, #80]	; 0x50
    1960:	str	r2, [r4, #36]	; 0x24
    1964:	ldr	r0, [r0, r1, lsl #2]
    1968:	mov	r1, #1
    196c:	ldr	r0, [r0]
    1970:	str	r0, [r4, #4]
    1974:	ldrb	r0, [r2]
    1978:	str	r1, [r4, #48]	; 0x30
    197c:	strb	r0, [r4, #24]
    1980:	pop	{r4, r5, r6, r7, fp, pc}
    1984:	movw	r0, #0
    1988:	movt	r0, #0
    198c:	bl	1430 <yy_fatal_error>

00001990 <coda_expression_pop_buffer_state>:
    1990:	push	{r4, r5, r6, sl, fp, lr}
    1994:	add	fp, sp, #16
    1998:	mov	r4, r0
    199c:	ldr	r0, [r0, #20]
    19a0:	cmp	r0, #0
    19a4:	beq	1a08 <coda_expression_pop_buffer_state+0x78>
    19a8:	ldr	r1, [r4, #12]
    19ac:	ldr	r5, [r0, r1, lsl #2]
    19b0:	cmp	r5, #0
    19b4:	popeq	{r4, r5, r6, sl, fp, pc}
    19b8:	mov	r6, #0
    19bc:	str	r6, [r0, r1, lsl #2]
    19c0:	ldr	r0, [r5, #20]
    19c4:	cmp	r0, #0
    19c8:	beq	19d4 <coda_expression_pop_buffer_state+0x44>
    19cc:	ldr	r0, [r5, #4]
    19d0:	bl	0 <free>
    19d4:	mov	r0, r5
    19d8:	bl	0 <free>
    19dc:	ldr	r0, [r4, #12]
    19e0:	ldr	r1, [r4, #20]
    19e4:	cmp	r0, #0
    19e8:	str	r6, [r1, r0, lsl #2]
    19ec:	subne	r6, r0, #1
    19f0:	strne	r6, [r4, #12]
    19f4:	ldr	r0, [r4, #20]
    19f8:	cmp	r0, #0
    19fc:	ldrne	r1, [r0, r6, lsl #2]
    1a00:	cmpne	r1, #0
    1a04:	bne	1a0c <coda_expression_pop_buffer_state+0x7c>
    1a08:	pop	{r4, r5, r6, sl, fp, pc}
    1a0c:	ldr	r2, [r1, #16]
    1a10:	str	r2, [r4, #28]
    1a14:	ldr	r1, [r1, #8]
    1a18:	str	r1, [r4, #80]	; 0x50
    1a1c:	str	r1, [r4, #36]	; 0x24
    1a20:	ldr	r0, [r0, r6, lsl #2]
    1a24:	ldr	r0, [r0]
    1a28:	str	r0, [r4, #4]
    1a2c:	ldrb	r0, [r1]
    1a30:	mov	r1, #1
    1a34:	str	r1, [r4, #48]	; 0x30
    1a38:	strb	r0, [r4, #24]
    1a3c:	pop	{r4, r5, r6, sl, fp, pc}

00001a40 <coda_expression__scan_buffer>:
    1a40:	push	{r4, r5, r6, r7, fp, lr}
    1a44:	add	fp, sp, #16
    1a48:	mov	r4, #0
    1a4c:	cmp	r1, #2
    1a50:	bcc	1a78 <coda_expression__scan_buffer+0x38>
    1a54:	sub	r7, r1, #2
    1a58:	mov	r6, r0
    1a5c:	ldrb	r0, [r0, r7]
    1a60:	cmp	r0, #0
    1a64:	bne	1a78 <coda_expression__scan_buffer+0x38>
    1a68:	add	r0, r6, r1
    1a6c:	ldrb	r0, [r0, #-1]
    1a70:	cmp	r0, #0
    1a74:	beq	1a80 <coda_expression__scan_buffer+0x40>
    1a78:	mov	r0, r4
    1a7c:	pop	{r4, r5, r6, r7, fp, pc}
    1a80:	mov	r0, #48	; 0x30
    1a84:	mov	r5, r2
    1a88:	bl	0 <malloc>
    1a8c:	cmp	r0, #0
    1a90:	beq	1ad8 <coda_expression__scan_buffer+0x98>
    1a94:	mov	r4, r0
    1a98:	mov	r0, #0
    1a9c:	mov	r1, #1
    1aa0:	stm	r4, {r0, r6}
    1aa4:	str	r6, [r4, #8]
    1aa8:	str	r7, [r4, #12]
    1aac:	str	r7, [r4, #16]
    1ab0:	str	r0, [r4, #20]
    1ab4:	str	r0, [r4, #24]
    1ab8:	str	r1, [r4, #28]
    1abc:	str	r0, [r4, #40]	; 0x28
    1ac0:	str	r0, [r4, #44]	; 0x2c
    1ac4:	mov	r0, r4
    1ac8:	mov	r1, r5
    1acc:	bl	1648 <coda_expression__switch_to_buffer>
    1ad0:	mov	r0, r4
    1ad4:	pop	{r4, r5, r6, r7, fp, pc}
    1ad8:	movw	r0, #0
    1adc:	movt	r0, #0
    1ae0:	bl	1430 <yy_fatal_error>

00001ae4 <coda_expression__scan_string>:
    1ae4:	push	{r4, r5, fp, lr}
    1ae8:	add	fp, sp, #8
    1aec:	mov	r4, r1
    1af0:	mov	r5, r0
    1af4:	bl	0 <strlen>
    1af8:	mov	r1, r0
    1afc:	mov	r0, r5
    1b00:	mov	r2, r4
    1b04:	pop	{r4, r5, fp, lr}
    1b08:	b	1b0c <coda_expression__scan_bytes>

00001b0c <coda_expression__scan_bytes>:
    1b0c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
    1b10:	add	fp, sp, #24
    1b14:	mov	r7, r0
    1b18:	add	r0, r1, #2
    1b1c:	mov	r8, r2
    1b20:	mov	r5, r1
    1b24:	bl	0 <malloc>
    1b28:	cmp	r0, #0
    1b2c:	beq	1bc8 <coda_expression__scan_bytes+0xbc>
    1b30:	mov	r6, r0
    1b34:	cmp	r5, #1
    1b38:	blt	1b5c <coda_expression__scan_bytes+0x50>
    1b3c:	mov	r0, r6
    1b40:	mov	r1, r7
    1b44:	mov	r2, r5
    1b48:	bl	0 <memcpy>
    1b4c:	add	r0, r6, r5
    1b50:	mov	r1, #0
    1b54:	strh	r1, [r0]
    1b58:	b	1b70 <coda_expression__scan_bytes+0x64>
    1b5c:	cmn	r5, #3
    1b60:	add	r0, r6, r5
    1b64:	mov	r1, #0
    1b68:	strh	r1, [r0]
    1b6c:	bhi	1be0 <coda_expression__scan_bytes+0xd4>
    1b70:	mov	r0, #48	; 0x30
    1b74:	bl	0 <malloc>
    1b78:	cmp	r0, #0
    1b7c:	beq	1bd4 <coda_expression__scan_bytes+0xc8>
    1b80:	mov	r7, r0
    1b84:	mov	r0, #0
    1b88:	mov	r4, #1
    1b8c:	mov	r1, r8
    1b90:	stm	r7, {r0, r6}
    1b94:	str	r6, [r7, #8]
    1b98:	str	r5, [r7, #12]
    1b9c:	str	r5, [r7, #16]
    1ba0:	str	r0, [r7, #20]
    1ba4:	str	r0, [r7, #24]
    1ba8:	str	r4, [r7, #28]
    1bac:	str	r0, [r7, #40]	; 0x28
    1bb0:	str	r0, [r7, #44]	; 0x2c
    1bb4:	mov	r0, r7
    1bb8:	bl	1648 <coda_expression__switch_to_buffer>
    1bbc:	mov	r0, r7
    1bc0:	str	r4, [r7, #20]
    1bc4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
    1bc8:	movw	r0, #0
    1bcc:	movt	r0, #0
    1bd0:	bl	1430 <yy_fatal_error>
    1bd4:	movw	r0, #0
    1bd8:	movt	r0, #0
    1bdc:	bl	1430 <yy_fatal_error>
    1be0:	movw	r0, #0
    1be4:	movt	r0, #0
    1be8:	bl	1430 <yy_fatal_error>

00001bec <coda_expression_get_extra>:
    1bec:	ldr	r0, [r0]
    1bf0:	bx	lr

00001bf4 <coda_expression_get_lineno>:
    1bf4:	ldr	r2, [r0, #20]
    1bf8:	mov	r1, r0
    1bfc:	mov	r0, #0
    1c00:	cmp	r2, #0
    1c04:	bxeq	lr
    1c08:	ldr	r1, [r1, #12]
    1c0c:	ldr	r1, [r2, r1, lsl #2]
    1c10:	cmp	r1, #0
    1c14:	ldrne	r0, [r1, #32]
    1c18:	bx	lr

00001c1c <coda_expression_get_column>:
    1c1c:	ldr	r2, [r0, #20]
    1c20:	mov	r1, r0
    1c24:	mov	r0, #0
    1c28:	cmp	r2, #0
    1c2c:	bxeq	lr
    1c30:	ldr	r1, [r1, #12]
    1c34:	ldr	r1, [r2, r1, lsl #2]
    1c38:	cmp	r1, #0
    1c3c:	ldrne	r0, [r1, #36]	; 0x24
    1c40:	bx	lr

00001c44 <coda_expression_get_in>:
    1c44:	ldr	r0, [r0, #4]
    1c48:	bx	lr

00001c4c <coda_expression_get_out>:
    1c4c:	ldr	r0, [r0, #8]
    1c50:	bx	lr

00001c54 <coda_expression_get_leng>:
    1c54:	ldr	r0, [r0, #32]
    1c58:	bx	lr

00001c5c <coda_expression_get_text>:
    1c5c:	ldr	r0, [r0, #80]	; 0x50
    1c60:	bx	lr

00001c64 <coda_expression_set_extra>:
    1c64:	str	r0, [r1]
    1c68:	bx	lr

00001c6c <coda_expression_set_lineno>:
    1c6c:	ldr	r2, [r1, #20]
    1c70:	cmp	r2, #0
    1c74:	ldrne	r1, [r1, #12]
    1c78:	ldrne	r1, [r2, r1, lsl #2]
    1c7c:	cmpne	r1, #0
    1c80:	bne	1c98 <coda_expression_set_lineno+0x2c>
    1c84:	push	{fp, lr}
    1c88:	mov	fp, sp
    1c8c:	movw	r0, #0
    1c90:	movt	r0, #0
    1c94:	bl	1430 <yy_fatal_error>
    1c98:	str	r0, [r1, #32]
    1c9c:	bx	lr

00001ca0 <coda_expression_set_column>:
    1ca0:	ldr	r2, [r1, #20]
    1ca4:	cmp	r2, #0
    1ca8:	ldrne	r1, [r1, #12]
    1cac:	ldrne	r1, [r2, r1, lsl #2]
    1cb0:	cmpne	r1, #0
    1cb4:	bne	1ccc <coda_expression_set_column+0x2c>
    1cb8:	push	{fp, lr}
    1cbc:	mov	fp, sp
    1cc0:	movw	r0, #0
    1cc4:	movt	r0, #0
    1cc8:	bl	1430 <yy_fatal_error>
    1ccc:	str	r0, [r1, #36]	; 0x24
    1cd0:	bx	lr

00001cd4 <coda_expression_set_in>:
    1cd4:	str	r0, [r1, #4]
    1cd8:	bx	lr

00001cdc <coda_expression_set_out>:
    1cdc:	str	r0, [r1, #8]
    1ce0:	bx	lr

00001ce4 <coda_expression_get_debug>:
    1ce4:	ldr	r0, [r0, #76]	; 0x4c
    1ce8:	bx	lr

00001cec <coda_expression_set_debug>:
    1cec:	str	r0, [r1, #76]	; 0x4c
    1cf0:	bx	lr

00001cf4 <coda_expression_get_lval>:
    1cf4:	ldr	r0, [r0, #92]	; 0x5c
    1cf8:	bx	lr

00001cfc <coda_expression_set_lval>:
    1cfc:	str	r0, [r1, #92]	; 0x5c
    1d00:	bx	lr

00001d04 <coda_expression_lex_init>:
    1d04:	push	{r4, sl, fp, lr}
    1d08:	add	fp, sp, #8
    1d0c:	cmp	r0, #0
    1d10:	beq	1d68 <coda_expression_lex_init+0x64>
    1d14:	mov	r4, r0
    1d18:	mov	r0, #96	; 0x60
    1d1c:	bl	0 <malloc>
    1d20:	cmp	r0, #0
    1d24:	str	r0, [r4]
    1d28:	beq	1d74 <coda_expression_lex_init+0x70>
    1d2c:	vmov.i32	q8, #0	; 0x00000000
    1d30:	mov	r1, #80	; 0x50
    1d34:	mov	r2, r0
    1d38:	vst1.8	{d16-d17}, [r2], r1
    1d3c:	add	r1, r0, #64	; 0x40
    1d40:	vst1.8	{d16-d17}, [r1]
    1d44:	add	r1, r0, #48	; 0x30
    1d48:	vst1.8	{d16-d17}, [r2]
    1d4c:	vst1.8	{d16-d17}, [r1]
    1d50:	add	r1, r0, #32
    1d54:	add	r0, r0, #16
    1d58:	vst1.8	{d16-d17}, [r0]
    1d5c:	mov	r0, #0
    1d60:	vst1.8	{d16-d17}, [r1]
    1d64:	pop	{r4, sl, fp, pc}
    1d68:	bl	0 <__errno_location>
    1d6c:	mov	r1, #22
    1d70:	b	1d7c <coda_expression_lex_init+0x78>
    1d74:	bl	0 <__errno_location>
    1d78:	mov	r1, #12
    1d7c:	str	r1, [r0]
    1d80:	mov	r0, #1
    1d84:	pop	{r4, sl, fp, pc}

00001d88 <coda_expression_lex_init_extra>:
    1d88:	push	{r4, r5, fp, lr}
    1d8c:	add	fp, sp, #8
    1d90:	cmp	r1, #0
    1d94:	beq	1e14 <coda_expression_lex_init_extra+0x8c>
    1d98:	mov	r4, r0
    1d9c:	mov	r0, #96	; 0x60
    1da0:	mov	r5, r1
    1da4:	bl	0 <malloc>
    1da8:	cmp	r0, #0
    1dac:	str	r0, [r5]
    1db0:	beq	1e20 <coda_expression_lex_init_extra+0x98>
    1db4:	vmov.i32	q8, #0	; 0x00000000
    1db8:	add	r1, r0, #24
    1dbc:	add	r2, r0, #72	; 0x48
    1dc0:	vst1.8	{d16-d17}, [r1]
    1dc4:	add	r1, r0, #40	; 0x28
    1dc8:	vst1.8	{d16-d17}, [r1]
    1dcc:	add	r1, r0, #56	; 0x38
    1dd0:	vst1.8	{d16-d17}, [r1]
    1dd4:	mov	r1, #0
    1dd8:	str	r1, [r0, #92]	; 0x5c
    1ddc:	str	r1, [r0, #88]	; 0x58
    1de0:	str	r4, [r0]
    1de4:	str	r1, [r0, #20]
    1de8:	vst1.8	{d16-d17}, [r2]
    1dec:	add	r2, r0, #4
    1df0:	vst1.32	{d16-d17}, [r2]
    1df4:	str	r1, [r0, #36]	; 0x24
    1df8:	str	r1, [r0, #40]	; 0x28
    1dfc:	str	r1, [r0, #44]	; 0x2c
    1e00:	str	r1, [r0, #52]	; 0x34
    1e04:	str	r1, [r0, #56]	; 0x38
    1e08:	str	r1, [r0, #60]	; 0x3c
    1e0c:	mov	r0, r1
    1e10:	pop	{r4, r5, fp, pc}
    1e14:	bl	0 <__errno_location>
    1e18:	mov	r1, #22
    1e1c:	b	1e28 <coda_expression_lex_init_extra+0xa0>
    1e20:	bl	0 <__errno_location>
    1e24:	mov	r1, #12
    1e28:	str	r1, [r0]
    1e2c:	mov	r1, #1
    1e30:	mov	r0, r1
    1e34:	pop	{r4, r5, fp, pc}

00001e38 <coda_expression_lex_destroy>:
    1e38:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
    1e3c:	add	fp, sp, #24
    1e40:	mov	r4, r0
    1e44:	ldr	r0, [r0, #20]
    1e48:	cmp	r0, #0
    1e4c:	beq	1f58 <coda_expression_lex_destroy+0x120>
    1e50:	ldr	r1, [r4, #12]
    1e54:	mov	r3, r0
    1e58:	add	r6, r4, #4
    1e5c:	add	r8, r4, #36	; 0x24
    1e60:	ldr	r5, [r3, r1, lsl #2]!
    1e64:	cmp	r5, #0
    1e68:	beq	1f64 <coda_expression_lex_destroy+0x12c>
    1e6c:	mov	r7, #0
    1e70:	mov	r9, #1
    1e74:	str	r7, [r3]
    1e78:	ldr	r0, [r5, #20]
    1e7c:	cmp	r0, #0
    1e80:	beq	1e8c <coda_expression_lex_destroy+0x54>
    1e84:	ldr	r0, [r5, #4]
    1e88:	bl	0 <free>
    1e8c:	mov	r0, r5
    1e90:	bl	0 <free>
    1e94:	ldr	r1, [r4, #12]
    1e98:	ldr	r2, [r4, #20]
    1e9c:	mov	r0, #0
    1ea0:	str	r0, [r2, r1, lsl #2]
    1ea4:	ldr	r2, [r4, #20]
    1ea8:	cmp	r2, #0
    1eac:	beq	1f64 <coda_expression_lex_destroy+0x12c>
    1eb0:	ldr	r5, [r2, r1, lsl #2]
    1eb4:	cmp	r5, #0
    1eb8:	beq	1f40 <coda_expression_lex_destroy+0x108>
    1ebc:	str	r7, [r2, r1, lsl #2]
    1ec0:	ldr	r0, [r5, #20]
    1ec4:	cmp	r0, #0
    1ec8:	beq	1ed4 <coda_expression_lex_destroy+0x9c>
    1ecc:	ldr	r0, [r5, #4]
    1ed0:	bl	0 <free>
    1ed4:	mov	r0, r5
    1ed8:	bl	0 <free>
    1edc:	ldr	r2, [r4, #12]
    1ee0:	ldr	r1, [r4, #20]
    1ee4:	mov	r0, #0
    1ee8:	str	r0, [r1, r2, lsl #2]
    1eec:	cmp	r2, #0
    1ef0:	mov	r1, #0
    1ef4:	subne	r1, r2, #1
    1ef8:	strne	r1, [r4, #12]
    1efc:	ldr	r2, [r4, #20]
    1f00:	cmp	r2, #0
    1f04:	beq	1f64 <coda_expression_lex_destroy+0x12c>
    1f08:	ldr	r0, [r2, r1, lsl #2]
    1f0c:	cmp	r0, #0
    1f10:	beq	1f40 <coda_expression_lex_destroy+0x108>
    1f14:	ldr	r3, [r0, #16]
    1f18:	str	r3, [r4, #28]
    1f1c:	ldr	r0, [r0, #8]
    1f20:	str	r0, [r4, #80]	; 0x50
    1f24:	str	r0, [r4, #36]	; 0x24
    1f28:	ldr	r3, [r2, r1, lsl #2]
    1f2c:	ldr	r3, [r3]
    1f30:	str	r3, [r4, #4]
    1f34:	ldrb	r0, [r0]
    1f38:	str	r9, [r4, #48]	; 0x30
    1f3c:	strb	r0, [r4, #24]
    1f40:	mov	r3, r2
    1f44:	ldr	r5, [r3, r1, lsl #2]!
    1f48:	cmp	r5, #0
    1f4c:	bne	1e74 <coda_expression_lex_destroy+0x3c>
    1f50:	mov	r0, r2
    1f54:	b	1f64 <coda_expression_lex_destroy+0x12c>
    1f58:	add	r6, r4, #4
    1f5c:	add	r8, r4, #36	; 0x24
    1f60:	mov	r0, #0
    1f64:	bl	0 <free>
    1f68:	mov	r5, #0
    1f6c:	str	r5, [r4, #20]
    1f70:	ldr	r0, [r4, #60]	; 0x3c
    1f74:	bl	0 <free>
    1f78:	vmov.i32	q8, #0	; 0x00000000
    1f7c:	str	r5, [r8]
    1f80:	str	r5, [r4, #40]	; 0x28
    1f84:	str	r5, [r4, #44]	; 0x2c
    1f88:	str	r5, [r4, #52]	; 0x34
    1f8c:	str	r5, [r4, #56]	; 0x38
    1f90:	str	r5, [r4, #60]	; 0x3c
    1f94:	mov	r0, r4
    1f98:	vst1.32	{d16-d17}, [r6]!
    1f9c:	str	r5, [r6]
    1fa0:	bl	0 <free>
    1fa4:	mov	r0, #0
    1fa8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}

00001fac <coda_expression_realloc>:
    1fac:	b	0 <realloc>
