
../compcert-repos/prog2/CMakeFiles/MT2E1-2.dir/Extras/Miniteste2-Exemplo1/prob2/heap.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <heap_nova>:
   0:	push	{r4, r5, fp, lr}
   4:	add	fp, sp, #8
   8:	mov	r5, r0
   c:	mov	r0, #12
  10:	bl	0 <malloc>
  14:	cmp	r0, #0
  18:	beq	50 <heap_nova+0x50>
  1c:	mov	r4, r0
  20:	mov	r0, #0
  24:	mov	r1, #4
  28:	stm	r4, {r0, r5}
  2c:	mov	r0, r5
  30:	bl	0 <calloc>
  34:	cmp	r0, #0
  38:	str	r0, [r4, #8]
  3c:	beq	48 <heap_nova+0x48>
  40:	mov	r0, r4
  44:	pop	{r4, r5, fp, pc}
  48:	mov	r0, r4
  4c:	bl	0 <free>
  50:	mov	r4, #0
  54:	mov	r0, r4
  58:	pop	{r4, r5, fp, pc}

0000005c <heap_apaga>:
  5c:	cmp	r0, #0
  60:	bxeq	lr
  64:	push	{r4, r5, r6, sl, fp, lr}
  68:	add	fp, sp, #16
  6c:	ldr	r1, [r0]
  70:	mov	r4, r0
  74:	ldr	r0, [r0, #8]
  78:	cmp	r1, #1
  7c:	blt	bc <heap_apaga+0x60>
  80:	mov	r5, #0
  84:	mov	r6, #0
  88:	ldr	r0, [r0, r6, lsl #2]
  8c:	ldr	r0, [r0, #4]
  90:	bl	0 <free>
  94:	ldr	r0, [r4, #8]
  98:	ldr	r0, [r0, r6, lsl #2]
  9c:	bl	0 <free>
  a0:	ldr	r0, [r4, #8]
  a4:	str	r5, [r0, r6, lsl #2]
  a8:	add	r6, r6, #1
  ac:	ldr	r1, [r4]
  b0:	ldr	r0, [r4, #8]
  b4:	cmp	r6, r1
  b8:	blt	88 <heap_apaga+0x2c>
  bc:	bl	0 <free>
  c0:	mov	r0, r4
  c4:	pop	{r4, r5, r6, sl, fp, lr}
  c8:	b	0 <free>

000000cc <elemento_cria>:
  cc:	push	{r4, r5, r6, r7, fp, lr}
  d0:	add	fp, sp, #16
  d4:	mov	r4, r0
  d8:	mov	r0, #8
  dc:	mov	r7, r1
  e0:	bl	0 <malloc>
  e4:	mov	r5, #0
  e8:	cmp	r0, #0
  ec:	beq	124 <elemento_cria+0x58>
  f0:	mov	r6, r0
  f4:	mov	r0, r7
  f8:	bl	0 <strlen>
  fc:	add	r0, r0, #1
 100:	mov	r1, #1
 104:	bl	0 <calloc>
 108:	cmp	r0, #0
 10c:	str	r0, [r6, #4]
 110:	beq	12c <elemento_cria+0x60>
 114:	mov	r1, r7
 118:	bl	0 <strcpy>
 11c:	mov	r5, r6
 120:	str	r4, [r6]
 124:	mov	r0, r5
 128:	pop	{r4, r5, r6, r7, fp, pc}
 12c:	mov	r0, r6
 130:	bl	0 <free>
 134:	mov	r0, r5
 138:	pop	{r4, r5, r6, r7, fp, pc}

0000013c <heap_insere>:
 13c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
 140:	add	fp, sp, #24
 144:	mov	r4, r0
 148:	mov	r7, r1
 14c:	ldr	r0, [r0]
 150:	mov	r5, #0
 154:	ldr	r1, [r4, #4]
 158:	cmp	r0, r1
 15c:	bge	210 <heap_insere+0xd4>
 160:	mov	r0, #8
 164:	mov	r8, r2
 168:	bl	0 <malloc>
 16c:	cmp	r0, #0
 170:	beq	210 <heap_insere+0xd4>
 174:	mov	r6, r0
 178:	mov	r0, r7
 17c:	bl	0 <strlen>
 180:	add	r0, r0, #1
 184:	mov	r1, #1
 188:	bl	0 <calloc>
 18c:	cmp	r0, #0
 190:	str	r0, [r6, #4]
 194:	beq	218 <heap_insere+0xdc>
 198:	mov	r1, r7
 19c:	bl	0 <strcpy>
 1a0:	str	r8, [r6]
 1a4:	ldr	r0, [r4]
 1a8:	ldr	r1, [r4, #8]
 1ac:	str	r6, [r1, r0, lsl #2]
 1b0:	add	r1, r0, #1
 1b4:	cmp	r0, #0
 1b8:	str	r1, [r4]
 1bc:	beq	20c <heap_insere+0xd0>
 1c0:	ldr	r1, [r4, #8]
 1c4:	ldr	r2, [r1, r0, lsl #2]
 1c8:	cmp	r2, #0
 1cc:	subne	r3, r0, #1
 1d0:	addne	r3, r3, r3, lsr #31
 1d4:	asrne	r3, r3, #1
 1d8:	ldrne	r7, [r1, r3, lsl #2]
 1dc:	cmpne	r7, #0
 1e0:	beq	20c <heap_insere+0xd0>
 1e4:	ldr	r6, [r7]
 1e8:	ldr	r5, [r2]
 1ec:	cmp	r5, r6
 1f0:	bge	20c <heap_insere+0xd0>
 1f4:	str	r2, [r1, r3, lsl #2]
 1f8:	cmp	r0, #2
 1fc:	ldr	r1, [r4, #8]
 200:	str	r7, [r1, r0, lsl #2]
 204:	mov	r0, r3
 208:	bhi	1c0 <heap_insere+0x84>
 20c:	mov	r5, #1
 210:	mov	r0, r5
 214:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
 218:	mov	r0, r6
 21c:	bl	0 <free>
 220:	mov	r0, r5
 224:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

00000228 <menor_que>:
 228:	mov	r2, r0
 22c:	mov	r0, #0
 230:	cmp	r2, #0
 234:	cmpne	r1, #0
 238:	bne	240 <menor_que+0x18>
 23c:	bx	lr
 240:	ldr	r1, [r1]
 244:	ldr	r2, [r2]
 248:	mov	r0, #0
 24c:	cmp	r2, r1
 250:	movwlt	r0, #1
 254:	bx	lr

00000258 <heap_remove>:
 258:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
 25c:	add	fp, sp, #24
 260:	mov	r8, #0
 264:	cmp	r0, #0
 268:	beq	348 <heap_remove+0xf0>
 26c:	mov	r5, r0
 270:	ldr	r0, [r0]
 274:	cmp	r0, #1
 278:	blt	348 <heap_remove+0xf0>
 27c:	ldr	r0, [r5, #8]
 280:	ldr	r0, [r0]
 284:	ldr	r8, [r0, #4]
 288:	bl	0 <free>
 28c:	ldr	r0, [r5]
 290:	ldr	r1, [r5, #8]
 294:	sub	lr, r0, #1
 298:	str	lr, [r5]
 29c:	cmp	lr, #2
 2a0:	ldr	r2, [r1, lr, lsl #2]
 2a4:	str	r2, [r1]
 2a8:	mov	r1, #0
 2ac:	ldr	r2, [r5, #8]
 2b0:	str	r1, [r2, lr, lsl #2]
 2b4:	blt	348 <heap_remove+0xf0>
 2b8:	mov	ip, #1
 2bc:	mov	r4, #1
 2c0:	mov	r2, #0
 2c4:	add	r3, r1, #2
 2c8:	ldr	r1, [r5, #8]
 2cc:	cmp	r3, lr
 2d0:	bge	2e8 <heap_remove+0x90>
 2d4:	ldr	r6, [r1, r3, lsl #2]
 2d8:	cmp	r6, #0
 2dc:	ldrne	r7, [r1, r4, lsl #2]
 2e0:	cmpne	r7, #0
 2e4:	bne	334 <heap_remove+0xdc>
 2e8:	mov	r3, r4
 2ec:	ldr	r4, [r1, r3, lsl #2]
 2f0:	cmp	r4, #0
 2f4:	ldrne	r6, [r1, r2, lsl #2]
 2f8:	cmpne	r6, #0
 2fc:	beq	348 <heap_remove+0xf0>
 300:	ldr	r7, [r6]
 304:	ldr	r0, [r4]
 308:	cmp	r0, r7
 30c:	bge	348 <heap_remove+0xf0>
 310:	str	r6, [r1, r3, lsl #2]
 314:	lsl	r1, r3, #1
 318:	ldr	r0, [r5, #8]
 31c:	str	r4, [r0, r2, lsl #2]
 320:	orr	r4, ip, r3, lsl #1
 324:	mov	r2, r3
 328:	cmp	r4, lr
 32c:	blt	2c4 <heap_remove+0x6c>
 330:	b	348 <heap_remove+0xf0>
 334:	ldr	r7, [r7]
 338:	ldr	r6, [r6]
 33c:	cmp	r6, r7
 340:	movge	r3, r4
 344:	b	2ec <heap_remove+0x94>
 348:	mov	r0, r8
 34c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

00000350 <mostraHeap>:
 350:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
 354:	add	fp, sp, #28
 358:	sub	sp, sp, #4
 35c:	mov	r9, r0
 360:	ldr	r0, [r0]
 364:	cmp	r0, r1
 368:	ble	410 <mostraHeap+0xc0>
 36c:	mov	sl, r1
 370:	mov	r7, #0
 374:	cmp	r1, #1
 378:	blt	398 <mostraHeap+0x48>
 37c:	mov	r0, sl
 380:	sub	r1, r0, #1
 384:	add	r7, r7, #1
 388:	add	r0, r1, r1, lsr #31
 38c:	cmp	r1, #1
 390:	asr	r0, r0, #1
 394:	bgt	380 <mostraHeap+0x30>
 398:	mov	r0, #1
 39c:	orr	r1, r0, sl, lsl #1
 3a0:	mov	r0, r9
 3a4:	bl	350 <mostraHeap>
 3a8:	lsl	r8, sl, #1
 3ac:	cmp	r7, #0
 3b0:	beq	3d8 <mostraHeap+0x88>
 3b4:	movw	r6, #0
 3b8:	add	r4, r7, r7, lsl #1
 3bc:	mov	r5, #0
 3c0:	movt	r6, #0
 3c4:	mov	r0, r6
 3c8:	bl	0 <printf>
 3cc:	add	r5, r5, #1
 3d0:	cmp	r5, r4
 3d4:	bcc	3c4 <mostraHeap+0x74>
 3d8:	ldr	r0, [r9, #8]
 3dc:	ldr	r0, [r0, sl, lsl #2]
 3e0:	ldr	r2, [r0]
 3e4:	ldr	r1, [r0, #4]
 3e8:	movw	r0, #0
 3ec:	movt	r0, #0
 3f0:	bl	0 <printf>
 3f4:	add	r1, r8, #2
 3f8:	mov	r0, r9
 3fc:	bl	350 <mostraHeap>
 400:	cmp	r7, #0
 404:	beq	410 <mostraHeap+0xc0>
 408:	sub	sp, fp, #28
 40c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
 410:	mov	r0, #10
 414:	sub	sp, fp, #28
 418:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
 41c:	b	0 <putchar>
