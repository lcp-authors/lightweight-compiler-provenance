
../compcert-repos/stcorp-coda-3a25f25/CMakeFiles/coda_static.dir/libcoda/coda-cursor-read.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <coda_cursor_read_int8>:
       0:	push	{fp, lr}
       4:	mov	fp, sp
       8:	sub	sp, sp, #24
       c:	str	r0, [fp, #-8]
      10:	str	r1, [sp, #12]
      14:	ldr	r0, [fp, #-8]
      18:	movw	r1, #0
      1c:	cmp	r0, r1
      20:	beq	58 <coda_cursor_read_int8+0x58>
      24:	ldr	r0, [fp, #-8]
      28:	ldr	r0, [r0, #4]
      2c:	cmp	r0, #0
      30:	ble	58 <coda_cursor_read_int8+0x58>
      34:	ldr	r0, [fp, #-8]
      38:	add	r1, r0, #8
      3c:	ldr	r0, [r0, #4]
      40:	sub	r0, r0, #1
      44:	add	r0, r1, r0, lsl #4
      48:	ldr	r0, [r0]
      4c:	movw	r1, #0
      50:	cmp	r0, r1
      54:	bne	80 <coda_cursor_read_int8+0x80>
      58:	mvn	r0, #99	; 0x63
      5c:	movw	r1, #0
      60:	movt	r1, #0
      64:	movw	r2, #0
      68:	movt	r2, #0
      6c:	movw	r3, #1773	; 0x6ed
      70:	bl	0 <coda_set_error>
      74:	mvn	r0, #0
      78:	str	r0, [fp, #-4]
      7c:	b	144 <coda_cursor_read_int8+0x144>
      80:	ldr	r0, [sp, #12]
      84:	movw	r1, #0
      88:	cmp	r0, r1
      8c:	bne	b8 <coda_cursor_read_int8+0xb8>
      90:	mvn	r0, #99	; 0x63
      94:	movw	r1, #0
      98:	movt	r1, #0
      9c:	movw	r2, #0
      a0:	movt	r2, #0
      a4:	movw	r3, #1778	; 0x6f2
      a8:	bl	0 <coda_set_error>
      ac:	mvn	r0, #0
      b0:	str	r0, [fp, #-4]
      b4:	b	144 <coda_cursor_read_int8+0x144>
      b8:	ldr	r0, [fp, #-8]
      bc:	add	r1, sp, #8
      c0:	bl	150 <get_read_type>
      c4:	cmp	r0, #0
      c8:	beq	d8 <coda_cursor_read_int8+0xd8>
      cc:	mvn	r0, #0
      d0:	str	r0, [fp, #-4]
      d4:	b	144 <coda_cursor_read_int8+0x144>
      d8:	ldr	r0, [sp, #8]
      dc:	cmp	r0, #0
      e0:	bne	10c <coda_cursor_read_int8+0x10c>
      e4:	b	e8 <coda_cursor_read_int8+0xe8>
      e8:	ldr	r0, [fp, #-8]
      ec:	ldr	r1, [sp, #12]
      f0:	bl	254 <read_int8>
      f4:	cmp	r0, #0
      f8:	beq	108 <coda_cursor_read_int8+0x108>
      fc:	mvn	r0, #0
     100:	str	r0, [fp, #-4]
     104:	b	144 <coda_cursor_read_int8+0x144>
     108:	b	13c <coda_cursor_read_int8+0x13c>
     10c:	ldr	r0, [sp, #8]
     110:	bl	0 <coda_type_get_native_type_name>
     114:	mvn	lr, #104	; 0x68
     118:	str	r0, [sp, #4]
     11c:	mov	r0, lr
     120:	movw	r1, #0
     124:	movt	r1, #0
     128:	ldr	r2, [sp, #4]
     12c:	bl	0 <coda_set_error>
     130:	mvn	r0, #0
     134:	str	r0, [fp, #-4]
     138:	b	144 <coda_cursor_read_int8+0x144>
     13c:	movw	r0, #0
     140:	str	r0, [fp, #-4]
     144:	ldr	r0, [fp, #-4]
     148:	mov	sp, fp
     14c:	pop	{fp, pc}

00000150 <get_read_type>:
     150:	push	{fp, lr}
     154:	mov	fp, sp
     158:	sub	sp, sp, #20
     15c:	str	r0, [fp, #-4]
     160:	str	r1, [fp, #-8]
     164:	ldr	r0, [fp, #-4]
     168:	add	r1, r0, #8
     16c:	ldr	r0, [r0, #4]
     170:	sub	r0, r0, #1
     174:	add	r0, r1, r0, lsl #4
     178:	ldr	r0, [r0]
     17c:	ldr	r0, [r0]
     180:	cmp	r0, #100	; 0x64
     184:	bcs	1a8 <get_read_type+0x58>
     188:	ldr	r0, [fp, #-4]
     18c:	add	r1, r0, #8
     190:	ldr	r0, [r0, #4]
     194:	sub	r0, r0, #1
     198:	add	r0, r1, r0, lsl #4
     19c:	ldr	r0, [r0]
     1a0:	str	r0, [sp, #4]
     1a4:	b	1c8 <get_read_type+0x78>
     1a8:	ldr	r0, [fp, #-4]
     1ac:	add	r1, r0, #8
     1b0:	ldr	r0, [r0, #4]
     1b4:	sub	r0, r0, #1
     1b8:	add	r0, r1, r0, lsl #4
     1bc:	ldr	r0, [r0]
     1c0:	ldr	r0, [r0, #4]
     1c4:	str	r0, [sp, #4]
     1c8:	ldr	r0, [sp, #4]
     1cc:	str	r0, [sp, #8]
     1d0:	ldr	r0, [sp, #8]
     1d4:	ldr	r0, [r0, #8]
     1d8:	cmp	r0, #2
     1dc:	beq	1f0 <get_read_type+0xa0>
     1e0:	ldr	r0, [sp, #8]
     1e4:	ldr	r0, [r0, #8]
     1e8:	cmp	r0, #3
     1ec:	bne	234 <get_read_type+0xe4>
     1f0:	ldr	r0, [pc, #88]	; 250 <get_read_type+0x100>
     1f4:	ldr	r0, [pc, r0]
     1f8:	str	r0, [sp]
     1fc:	bl	0 <__aeabi_read_tp>
     200:	ldr	ip, [sp]
     204:	ldr	r0, [r0, ip]
     208:	cmp	r0, #0
     20c:	beq	234 <get_read_type+0xe4>
     210:	ldr	r0, [sp, #8]
     214:	ldr	r0, [r0, #48]	; 0x30
     218:	movw	r1, #0
     21c:	cmp	r0, r1
     220:	beq	234 <get_read_type+0xe4>
     224:	ldr	r0, [fp, #-8]
     228:	movw	r1, #9
     22c:	str	r1, [r0]
     230:	b	244 <get_read_type+0xf4>
     234:	ldr	r0, [sp, #8]
     238:	ldr	r0, [r0, #12]
     23c:	ldr	r1, [fp, #-8]
     240:	str	r0, [r1]
     244:	movw	r0, #0
     248:	mov	sp, fp
     24c:	pop	{fp, pc}
     250:	.word	0x00000054

00000254 <read_int8>:
     254:	push	{fp, lr}
     258:	mov	fp, sp
     25c:	sub	sp, sp, #16
     260:	str	r0, [sp, #8]
     264:	str	r1, [sp, #4]
     268:	ldr	r0, [sp, #8]
     26c:	ldr	r1, [r0, #4]
     270:	add	r0, r0, r1, lsl #4
     274:	ldr	r0, [r0, #-8]
     278:	ldr	r0, [r0]
     27c:	cmp	r0, #0
     280:	str	r0, [sp]
     284:	beq	2fc <read_int8+0xa8>
     288:	b	28c <read_int8+0x38>
     28c:	ldr	r0, [sp]
     290:	cmp	r0, #1
     294:	beq	310 <read_int8+0xbc>
     298:	b	29c <read_int8+0x48>
     29c:	ldr	r0, [sp]
     2a0:	cmp	r0, #100	; 0x64
     2a4:	beq	324 <read_int8+0xd0>
     2a8:	b	2ac <read_int8+0x58>
     2ac:	ldr	r0, [sp]
     2b0:	cmp	r0, #101	; 0x65
     2b4:	beq	338 <read_int8+0xe4>
     2b8:	b	2bc <read_int8+0x68>
     2bc:	ldr	r0, [sp]
     2c0:	cmp	r0, #102	; 0x66
     2c4:	beq	350 <read_int8+0xfc>
     2c8:	b	2cc <read_int8+0x78>
     2cc:	ldr	r0, [sp]
     2d0:	cmp	r0, #103	; 0x67
     2d4:	beq	368 <read_int8+0x114>
     2d8:	b	2dc <read_int8+0x88>
     2dc:	ldr	r0, [sp]
     2e0:	cmp	r0, #104	; 0x68
     2e4:	beq	37c <read_int8+0x128>
     2e8:	b	2ec <read_int8+0x98>
     2ec:	ldr	r0, [sp]
     2f0:	cmp	r0, #105	; 0x69
     2f4:	beq	390 <read_int8+0x13c>
     2f8:	b	394 <read_int8+0x140>
     2fc:	ldr	r0, [sp, #8]
     300:	ldr	r1, [sp, #4]
     304:	bl	0 <coda_ascii_cursor_read_int8>
     308:	str	r0, [fp, #-4]
     30c:	b	3b4 <read_int8+0x160>
     310:	ldr	r0, [sp, #8]
     314:	ldr	r1, [sp, #4]
     318:	bl	0 <coda_bin_cursor_read_int8>
     31c:	str	r0, [fp, #-4]
     320:	b	3b4 <read_int8+0x160>
     324:	ldr	r0, [sp, #8]
     328:	ldr	r1, [sp, #4]
     32c:	bl	0 <coda_mem_cursor_read_int8>
     330:	str	r0, [fp, #-4]
     334:	b	3b4 <read_int8+0x160>
     338:	mvn	r0, #10
     33c:	movw	r1, #0
     340:	bl	0 <coda_set_error>
     344:	mvn	r0, #0
     348:	str	r0, [fp, #-4]
     34c:	b	3b4 <read_int8+0x160>
     350:	mvn	r0, #12
     354:	movw	r1, #0
     358:	bl	0 <coda_set_error>
     35c:	mvn	r0, #0
     360:	str	r0, [fp, #-4]
     364:	b	3b4 <read_int8+0x160>
     368:	ldr	r0, [sp, #8]
     36c:	ldr	r1, [sp, #4]
     370:	bl	0 <coda_cdf_cursor_read_int8>
     374:	str	r0, [fp, #-4]
     378:	b	3b4 <read_int8+0x160>
     37c:	ldr	r0, [sp, #8]
     380:	ldr	r1, [sp, #4]
     384:	bl	0 <coda_netcdf_cursor_read_int8>
     388:	str	r0, [fp, #-4]
     38c:	b	3b4 <read_int8+0x160>
     390:	b	394 <read_int8+0x140>
     394:	movw	r0, #0
     398:	movt	r0, #0
     39c:	movw	r1, #0
     3a0:	movt	r1, #0
     3a4:	movw	r2, #359	; 0x167
     3a8:	movw	r3, #0
     3ac:	movt	r3, #0
     3b0:	bl	0 <__assert_fail>
     3b4:	ldr	r0, [fp, #-4]
     3b8:	mov	sp, fp
     3bc:	pop	{fp, pc}

000003c0 <coda_cursor_read_uint8>:
     3c0:	push	{fp, lr}
     3c4:	mov	fp, sp
     3c8:	sub	sp, sp, #24
     3cc:	str	r0, [fp, #-8]
     3d0:	str	r1, [sp, #12]
     3d4:	ldr	r0, [fp, #-8]
     3d8:	movw	r1, #0
     3dc:	cmp	r0, r1
     3e0:	beq	418 <coda_cursor_read_uint8+0x58>
     3e4:	ldr	r0, [fp, #-8]
     3e8:	ldr	r0, [r0, #4]
     3ec:	cmp	r0, #0
     3f0:	ble	418 <coda_cursor_read_uint8+0x58>
     3f4:	ldr	r0, [fp, #-8]
     3f8:	add	r1, r0, #8
     3fc:	ldr	r0, [r0, #4]
     400:	sub	r0, r0, #1
     404:	add	r0, r1, r0, lsl #4
     408:	ldr	r0, [r0]
     40c:	movw	r1, #0
     410:	cmp	r0, r1
     414:	bne	440 <coda_cursor_read_uint8+0x80>
     418:	mvn	r0, #99	; 0x63
     41c:	movw	r1, #0
     420:	movt	r1, #0
     424:	movw	r2, #0
     428:	movt	r2, #0
     42c:	movw	r3, #1820	; 0x71c
     430:	bl	0 <coda_set_error>
     434:	mvn	r0, #0
     438:	str	r0, [fp, #-4]
     43c:	b	504 <coda_cursor_read_uint8+0x144>
     440:	ldr	r0, [sp, #12]
     444:	movw	r1, #0
     448:	cmp	r0, r1
     44c:	bne	478 <coda_cursor_read_uint8+0xb8>
     450:	mvn	r0, #99	; 0x63
     454:	movw	r1, #0
     458:	movt	r1, #0
     45c:	movw	r2, #0
     460:	movt	r2, #0
     464:	movw	r3, #1825	; 0x721
     468:	bl	0 <coda_set_error>
     46c:	mvn	r0, #0
     470:	str	r0, [fp, #-4]
     474:	b	504 <coda_cursor_read_uint8+0x144>
     478:	ldr	r0, [fp, #-8]
     47c:	add	r1, sp, #8
     480:	bl	150 <get_read_type>
     484:	cmp	r0, #0
     488:	beq	498 <coda_cursor_read_uint8+0xd8>
     48c:	mvn	r0, #0
     490:	str	r0, [fp, #-4]
     494:	b	504 <coda_cursor_read_uint8+0x144>
     498:	ldr	r0, [sp, #8]
     49c:	cmp	r0, #1
     4a0:	bne	4cc <coda_cursor_read_uint8+0x10c>
     4a4:	b	4a8 <coda_cursor_read_uint8+0xe8>
     4a8:	ldr	r0, [fp, #-8]
     4ac:	ldr	r1, [sp, #12]
     4b0:	bl	510 <read_uint8>
     4b4:	cmp	r0, #0
     4b8:	beq	4c8 <coda_cursor_read_uint8+0x108>
     4bc:	mvn	r0, #0
     4c0:	str	r0, [fp, #-4]
     4c4:	b	504 <coda_cursor_read_uint8+0x144>
     4c8:	b	4fc <coda_cursor_read_uint8+0x13c>
     4cc:	ldr	r0, [sp, #8]
     4d0:	bl	0 <coda_type_get_native_type_name>
     4d4:	mvn	lr, #104	; 0x68
     4d8:	str	r0, [sp, #4]
     4dc:	mov	r0, lr
     4e0:	movw	r1, #0
     4e4:	movt	r1, #0
     4e8:	ldr	r2, [sp, #4]
     4ec:	bl	0 <coda_set_error>
     4f0:	mvn	r0, #0
     4f4:	str	r0, [fp, #-4]
     4f8:	b	504 <coda_cursor_read_uint8+0x144>
     4fc:	movw	r0, #0
     500:	str	r0, [fp, #-4]
     504:	ldr	r0, [fp, #-4]
     508:	mov	sp, fp
     50c:	pop	{fp, pc}

00000510 <read_uint8>:
     510:	push	{fp, lr}
     514:	mov	fp, sp
     518:	sub	sp, sp, #16
     51c:	str	r0, [sp, #8]
     520:	str	r1, [sp, #4]
     524:	ldr	r0, [sp, #8]
     528:	ldr	r1, [r0, #4]
     52c:	add	r0, r0, r1, lsl #4
     530:	ldr	r0, [r0, #-8]
     534:	ldr	r0, [r0]
     538:	cmp	r0, #0
     53c:	str	r0, [sp]
     540:	beq	5ac <read_uint8+0x9c>
     544:	b	548 <read_uint8+0x38>
     548:	ldr	r0, [sp]
     54c:	cmp	r0, #1
     550:	beq	5c0 <read_uint8+0xb0>
     554:	b	558 <read_uint8+0x48>
     558:	ldr	r0, [sp]
     55c:	cmp	r0, #100	; 0x64
     560:	beq	5d4 <read_uint8+0xc4>
     564:	b	568 <read_uint8+0x58>
     568:	ldr	r0, [sp]
     56c:	cmp	r0, #101	; 0x65
     570:	beq	5e8 <read_uint8+0xd8>
     574:	b	578 <read_uint8+0x68>
     578:	ldr	r0, [sp]
     57c:	cmp	r0, #102	; 0x66
     580:	beq	600 <read_uint8+0xf0>
     584:	b	588 <read_uint8+0x78>
     588:	ldr	r0, [sp]
     58c:	cmp	r0, #103	; 0x67
     590:	beq	618 <read_uint8+0x108>
     594:	b	598 <read_uint8+0x88>
     598:	ldr	r0, [sp]
     59c:	sub	r1, r0, #104	; 0x68
     5a0:	cmp	r1, #2
     5a4:	bcc	62c <read_uint8+0x11c>
     5a8:	b	630 <read_uint8+0x120>
     5ac:	ldr	r0, [sp, #8]
     5b0:	ldr	r1, [sp, #4]
     5b4:	bl	0 <coda_ascii_cursor_read_uint8>
     5b8:	str	r0, [fp, #-4]
     5bc:	b	650 <read_uint8+0x140>
     5c0:	ldr	r0, [sp, #8]
     5c4:	ldr	r1, [sp, #4]
     5c8:	bl	0 <coda_bin_cursor_read_uint8>
     5cc:	str	r0, [fp, #-4]
     5d0:	b	650 <read_uint8+0x140>
     5d4:	ldr	r0, [sp, #8]
     5d8:	ldr	r1, [sp, #4]
     5dc:	bl	0 <coda_mem_cursor_read_uint8>
     5e0:	str	r0, [fp, #-4]
     5e4:	b	650 <read_uint8+0x140>
     5e8:	mvn	r0, #10
     5ec:	movw	r1, #0
     5f0:	bl	0 <coda_set_error>
     5f4:	mvn	r0, #0
     5f8:	str	r0, [fp, #-4]
     5fc:	b	650 <read_uint8+0x140>
     600:	mvn	r0, #12
     604:	movw	r1, #0
     608:	bl	0 <coda_set_error>
     60c:	mvn	r0, #0
     610:	str	r0, [fp, #-4]
     614:	b	650 <read_uint8+0x140>
     618:	ldr	r0, [sp, #8]
     61c:	ldr	r1, [sp, #4]
     620:	bl	0 <coda_cdf_cursor_read_uint8>
     624:	str	r0, [fp, #-4]
     628:	b	650 <read_uint8+0x140>
     62c:	b	630 <read_uint8+0x120>
     630:	movw	r0, #0
     634:	movt	r0, #0
     638:	movw	r1, #0
     63c:	movt	r1, #0
     640:	movw	r2, #394	; 0x18a
     644:	movw	r3, #0
     648:	movt	r3, #0
     64c:	bl	0 <__assert_fail>
     650:	ldr	r0, [fp, #-4]
     654:	mov	sp, fp
     658:	pop	{fp, pc}

0000065c <coda_cursor_read_int16>:
     65c:	push	{fp, lr}
     660:	mov	fp, sp
     664:	sub	sp, sp, #32
     668:	str	r0, [fp, #-8]
     66c:	str	r1, [fp, #-12]
     670:	ldr	r0, [fp, #-8]
     674:	movw	r1, #0
     678:	cmp	r0, r1
     67c:	beq	6b4 <coda_cursor_read_int16+0x58>
     680:	ldr	r0, [fp, #-8]
     684:	ldr	r0, [r0, #4]
     688:	cmp	r0, #0
     68c:	ble	6b4 <coda_cursor_read_int16+0x58>
     690:	ldr	r0, [fp, #-8]
     694:	add	r1, r0, #8
     698:	ldr	r0, [r0, #4]
     69c:	sub	r0, r0, #1
     6a0:	add	r0, r1, r0, lsl #4
     6a4:	ldr	r0, [r0]
     6a8:	movw	r1, #0
     6ac:	cmp	r0, r1
     6b0:	bne	6dc <coda_cursor_read_int16+0x80>
     6b4:	mvn	r0, #99	; 0x63
     6b8:	movw	r1, #0
     6bc:	movt	r1, #0
     6c0:	movw	r2, #0
     6c4:	movt	r2, #0
     6c8:	movw	r3, #1869	; 0x74d
     6cc:	bl	0 <coda_set_error>
     6d0:	mvn	r0, #0
     6d4:	str	r0, [fp, #-4]
     6d8:	b	824 <coda_cursor_read_int16+0x1c8>
     6dc:	ldr	r0, [fp, #-12]
     6e0:	movw	r1, #0
     6e4:	cmp	r0, r1
     6e8:	bne	714 <coda_cursor_read_int16+0xb8>
     6ec:	mvn	r0, #99	; 0x63
     6f0:	movw	r1, #0
     6f4:	movt	r1, #0
     6f8:	movw	r2, #0
     6fc:	movt	r2, #0
     700:	movw	r3, #1874	; 0x752
     704:	bl	0 <coda_set_error>
     708:	mvn	r0, #0
     70c:	str	r0, [fp, #-4]
     710:	b	824 <coda_cursor_read_int16+0x1c8>
     714:	ldr	r0, [fp, #-8]
     718:	add	r1, sp, #16
     71c:	bl	150 <get_read_type>
     720:	cmp	r0, #0
     724:	beq	734 <coda_cursor_read_int16+0xd8>
     728:	mvn	r0, #0
     72c:	str	r0, [fp, #-4]
     730:	b	824 <coda_cursor_read_int16+0x1c8>
     734:	ldr	r0, [sp, #16]
     738:	cmp	r0, #0
     73c:	str	r0, [sp, #8]
     740:	beq	768 <coda_cursor_read_int16+0x10c>
     744:	b	748 <coda_cursor_read_int16+0xec>
     748:	ldr	r0, [sp, #8]
     74c:	cmp	r0, #1
     750:	beq	798 <coda_cursor_read_int16+0x13c>
     754:	b	758 <coda_cursor_read_int16+0xfc>
     758:	ldr	r0, [sp, #8]
     75c:	cmp	r0, #2
     760:	beq	7c8 <coda_cursor_read_int16+0x16c>
     764:	b	7ec <coda_cursor_read_int16+0x190>
     768:	ldr	r0, [fp, #-8]
     76c:	add	r1, sp, #15
     770:	bl	254 <read_int8>
     774:	cmp	r0, #0
     778:	beq	788 <coda_cursor_read_int16+0x12c>
     77c:	mvn	r0, #0
     780:	str	r0, [fp, #-4]
     784:	b	824 <coda_cursor_read_int16+0x1c8>
     788:	ldrsb	r0, [sp, #15]
     78c:	ldr	r1, [fp, #-12]
     790:	strh	r0, [r1]
     794:	b	81c <coda_cursor_read_int16+0x1c0>
     798:	ldr	r0, [fp, #-8]
     79c:	add	r1, sp, #14
     7a0:	bl	510 <read_uint8>
     7a4:	cmp	r0, #0
     7a8:	beq	7b8 <coda_cursor_read_int16+0x15c>
     7ac:	mvn	r0, #0
     7b0:	str	r0, [fp, #-4]
     7b4:	b	824 <coda_cursor_read_int16+0x1c8>
     7b8:	ldrb	r0, [sp, #14]
     7bc:	ldr	r1, [fp, #-12]
     7c0:	strh	r0, [r1]
     7c4:	b	81c <coda_cursor_read_int16+0x1c0>
     7c8:	ldr	r0, [fp, #-8]
     7cc:	ldr	r1, [fp, #-12]
     7d0:	bl	830 <read_int16>
     7d4:	cmp	r0, #0
     7d8:	beq	7e8 <coda_cursor_read_int16+0x18c>
     7dc:	mvn	r0, #0
     7e0:	str	r0, [fp, #-4]
     7e4:	b	824 <coda_cursor_read_int16+0x1c8>
     7e8:	b	81c <coda_cursor_read_int16+0x1c0>
     7ec:	ldr	r0, [sp, #16]
     7f0:	bl	0 <coda_type_get_native_type_name>
     7f4:	mvn	lr, #104	; 0x68
     7f8:	str	r0, [sp, #4]
     7fc:	mov	r0, lr
     800:	movw	r1, #0
     804:	movt	r1, #0
     808:	ldr	r2, [sp, #4]
     80c:	bl	0 <coda_set_error>
     810:	mvn	r0, #0
     814:	str	r0, [fp, #-4]
     818:	b	824 <coda_cursor_read_int16+0x1c8>
     81c:	movw	r0, #0
     820:	str	r0, [fp, #-4]
     824:	ldr	r0, [fp, #-4]
     828:	mov	sp, fp
     82c:	pop	{fp, pc}

00000830 <read_int16>:
     830:	push	{fp, lr}
     834:	mov	fp, sp
     838:	sub	sp, sp, #16
     83c:	str	r0, [sp, #8]
     840:	str	r1, [sp, #4]
     844:	ldr	r0, [sp, #8]
     848:	ldr	r1, [r0, #4]
     84c:	add	r0, r0, r1, lsl #4
     850:	ldr	r0, [r0, #-8]
     854:	ldr	r0, [r0]
     858:	cmp	r0, #0
     85c:	str	r0, [sp]
     860:	beq	8d8 <read_int16+0xa8>
     864:	b	868 <read_int16+0x38>
     868:	ldr	r0, [sp]
     86c:	cmp	r0, #1
     870:	beq	8ec <read_int16+0xbc>
     874:	b	878 <read_int16+0x48>
     878:	ldr	r0, [sp]
     87c:	cmp	r0, #100	; 0x64
     880:	beq	900 <read_int16+0xd0>
     884:	b	888 <read_int16+0x58>
     888:	ldr	r0, [sp]
     88c:	cmp	r0, #101	; 0x65
     890:	beq	914 <read_int16+0xe4>
     894:	b	898 <read_int16+0x68>
     898:	ldr	r0, [sp]
     89c:	cmp	r0, #102	; 0x66
     8a0:	beq	92c <read_int16+0xfc>
     8a4:	b	8a8 <read_int16+0x78>
     8a8:	ldr	r0, [sp]
     8ac:	cmp	r0, #103	; 0x67
     8b0:	beq	944 <read_int16+0x114>
     8b4:	b	8b8 <read_int16+0x88>
     8b8:	ldr	r0, [sp]
     8bc:	cmp	r0, #104	; 0x68
     8c0:	beq	958 <read_int16+0x128>
     8c4:	b	8c8 <read_int16+0x98>
     8c8:	ldr	r0, [sp]
     8cc:	cmp	r0, #105	; 0x69
     8d0:	beq	96c <read_int16+0x13c>
     8d4:	b	98c <read_int16+0x15c>
     8d8:	ldr	r0, [sp, #8]
     8dc:	ldr	r1, [sp, #4]
     8e0:	bl	0 <coda_ascii_cursor_read_int16>
     8e4:	str	r0, [fp, #-4]
     8e8:	b	994 <read_int16+0x164>
     8ec:	ldr	r0, [sp, #8]
     8f0:	ldr	r1, [sp, #4]
     8f4:	bl	0 <coda_bin_cursor_read_int16>
     8f8:	str	r0, [fp, #-4]
     8fc:	b	994 <read_int16+0x164>
     900:	ldr	r0, [sp, #8]
     904:	ldr	r1, [sp, #4]
     908:	bl	0 <coda_mem_cursor_read_int16>
     90c:	str	r0, [fp, #-4]
     910:	b	994 <read_int16+0x164>
     914:	mvn	r0, #10
     918:	movw	r1, #0
     91c:	bl	0 <coda_set_error>
     920:	mvn	r0, #0
     924:	str	r0, [fp, #-4]
     928:	b	994 <read_int16+0x164>
     92c:	mvn	r0, #12
     930:	movw	r1, #0
     934:	bl	0 <coda_set_error>
     938:	mvn	r0, #0
     93c:	str	r0, [fp, #-4]
     940:	b	994 <read_int16+0x164>
     944:	ldr	r0, [sp, #8]
     948:	ldr	r1, [sp, #4]
     94c:	bl	0 <coda_cdf_cursor_read_int16>
     950:	str	r0, [fp, #-4]
     954:	b	994 <read_int16+0x164>
     958:	ldr	r0, [sp, #8]
     95c:	ldr	r1, [sp, #4]
     960:	bl	0 <coda_netcdf_cursor_read_int16>
     964:	str	r0, [fp, #-4]
     968:	b	994 <read_int16+0x164>
     96c:	movw	r0, #0
     970:	movt	r0, #0
     974:	movw	r1, #0
     978:	movt	r1, #0
     97c:	movw	r2, #427	; 0x1ab
     980:	movw	r3, #0
     984:	movt	r3, #0
     988:	bl	0 <__assert_fail>
     98c:	movw	r0, #0
     990:	str	r0, [fp, #-4]
     994:	ldr	r0, [fp, #-4]
     998:	mov	sp, fp
     99c:	pop	{fp, pc}

000009a0 <coda_cursor_read_uint16>:
     9a0:	push	{fp, lr}
     9a4:	mov	fp, sp
     9a8:	sub	sp, sp, #32
     9ac:	str	r0, [fp, #-8]
     9b0:	str	r1, [fp, #-12]
     9b4:	ldr	r0, [fp, #-8]
     9b8:	movw	r1, #0
     9bc:	cmp	r0, r1
     9c0:	beq	9f8 <coda_cursor_read_uint16+0x58>
     9c4:	ldr	r0, [fp, #-8]
     9c8:	ldr	r0, [r0, #4]
     9cc:	cmp	r0, #0
     9d0:	ble	9f8 <coda_cursor_read_uint16+0x58>
     9d4:	ldr	r0, [fp, #-8]
     9d8:	add	r1, r0, #8
     9dc:	ldr	r0, [r0, #4]
     9e0:	sub	r0, r0, #1
     9e4:	add	r0, r1, r0, lsl #4
     9e8:	ldr	r0, [r0]
     9ec:	movw	r1, #0
     9f0:	cmp	r0, r1
     9f4:	bne	a20 <coda_cursor_read_uint16+0x80>
     9f8:	mvn	r0, #99	; 0x63
     9fc:	movw	r1, #0
     a00:	movt	r1, #0
     a04:	movw	r2, #0
     a08:	movt	r2, #0
     a0c:	movw	r3, #1939	; 0x793
     a10:	bl	0 <coda_set_error>
     a14:	mvn	r0, #0
     a18:	str	r0, [fp, #-4]
     a1c:	b	b28 <coda_cursor_read_uint16+0x188>
     a20:	ldr	r0, [fp, #-12]
     a24:	movw	r1, #0
     a28:	cmp	r0, r1
     a2c:	bne	a58 <coda_cursor_read_uint16+0xb8>
     a30:	mvn	r0, #99	; 0x63
     a34:	movw	r1, #0
     a38:	movt	r1, #0
     a3c:	movw	r2, #0
     a40:	movt	r2, #0
     a44:	movw	r3, #1944	; 0x798
     a48:	bl	0 <coda_set_error>
     a4c:	mvn	r0, #0
     a50:	str	r0, [fp, #-4]
     a54:	b	b28 <coda_cursor_read_uint16+0x188>
     a58:	ldr	r0, [fp, #-8]
     a5c:	add	r1, sp, #16
     a60:	bl	150 <get_read_type>
     a64:	cmp	r0, #0
     a68:	beq	a78 <coda_cursor_read_uint16+0xd8>
     a6c:	mvn	r0, #0
     a70:	str	r0, [fp, #-4]
     a74:	b	b28 <coda_cursor_read_uint16+0x188>
     a78:	ldr	r0, [sp, #16]
     a7c:	cmp	r0, #1
     a80:	str	r0, [sp, #8]
     a84:	beq	a9c <coda_cursor_read_uint16+0xfc>
     a88:	b	a8c <coda_cursor_read_uint16+0xec>
     a8c:	ldr	r0, [sp, #8]
     a90:	cmp	r0, #3
     a94:	beq	acc <coda_cursor_read_uint16+0x12c>
     a98:	b	af0 <coda_cursor_read_uint16+0x150>
     a9c:	ldr	r0, [fp, #-8]
     aa0:	add	r1, sp, #15
     aa4:	bl	510 <read_uint8>
     aa8:	cmp	r0, #0
     aac:	beq	abc <coda_cursor_read_uint16+0x11c>
     ab0:	mvn	r0, #0
     ab4:	str	r0, [fp, #-4]
     ab8:	b	b28 <coda_cursor_read_uint16+0x188>
     abc:	ldrb	r0, [sp, #15]
     ac0:	ldr	r1, [fp, #-12]
     ac4:	strh	r0, [r1]
     ac8:	b	b20 <coda_cursor_read_uint16+0x180>
     acc:	ldr	r0, [fp, #-8]
     ad0:	ldr	r1, [fp, #-12]
     ad4:	bl	b34 <read_uint16>
     ad8:	cmp	r0, #0
     adc:	beq	aec <coda_cursor_read_uint16+0x14c>
     ae0:	mvn	r0, #0
     ae4:	str	r0, [fp, #-4]
     ae8:	b	b28 <coda_cursor_read_uint16+0x188>
     aec:	b	b20 <coda_cursor_read_uint16+0x180>
     af0:	ldr	r0, [sp, #16]
     af4:	bl	0 <coda_type_get_native_type_name>
     af8:	mvn	lr, #104	; 0x68
     afc:	str	r0, [sp, #4]
     b00:	mov	r0, lr
     b04:	movw	r1, #0
     b08:	movt	r1, #0
     b0c:	ldr	r2, [sp, #4]
     b10:	bl	0 <coda_set_error>
     b14:	mvn	r0, #0
     b18:	str	r0, [fp, #-4]
     b1c:	b	b28 <coda_cursor_read_uint16+0x188>
     b20:	movw	r0, #0
     b24:	str	r0, [fp, #-4]
     b28:	ldr	r0, [fp, #-4]
     b2c:	mov	sp, fp
     b30:	pop	{fp, pc}

00000b34 <read_uint16>:
     b34:	push	{fp, lr}
     b38:	mov	fp, sp
     b3c:	sub	sp, sp, #16
     b40:	str	r0, [sp, #8]
     b44:	str	r1, [sp, #4]
     b48:	ldr	r0, [sp, #8]
     b4c:	ldr	r1, [r0, #4]
     b50:	add	r0, r0, r1, lsl #4
     b54:	ldr	r0, [r0, #-8]
     b58:	ldr	r0, [r0]
     b5c:	cmp	r0, #0
     b60:	str	r0, [sp]
     b64:	beq	bd0 <read_uint16+0x9c>
     b68:	b	b6c <read_uint16+0x38>
     b6c:	ldr	r0, [sp]
     b70:	cmp	r0, #1
     b74:	beq	be4 <read_uint16+0xb0>
     b78:	b	b7c <read_uint16+0x48>
     b7c:	ldr	r0, [sp]
     b80:	cmp	r0, #100	; 0x64
     b84:	beq	bf8 <read_uint16+0xc4>
     b88:	b	b8c <read_uint16+0x58>
     b8c:	ldr	r0, [sp]
     b90:	cmp	r0, #101	; 0x65
     b94:	beq	c0c <read_uint16+0xd8>
     b98:	b	b9c <read_uint16+0x68>
     b9c:	ldr	r0, [sp]
     ba0:	cmp	r0, #102	; 0x66
     ba4:	beq	c24 <read_uint16+0xf0>
     ba8:	b	bac <read_uint16+0x78>
     bac:	ldr	r0, [sp]
     bb0:	cmp	r0, #103	; 0x67
     bb4:	beq	c3c <read_uint16+0x108>
     bb8:	b	bbc <read_uint16+0x88>
     bbc:	ldr	r0, [sp]
     bc0:	sub	r1, r0, #104	; 0x68
     bc4:	cmp	r1, #2
     bc8:	bcc	c50 <read_uint16+0x11c>
     bcc:	b	c54 <read_uint16+0x120>
     bd0:	ldr	r0, [sp, #8]
     bd4:	ldr	r1, [sp, #4]
     bd8:	bl	0 <coda_ascii_cursor_read_uint16>
     bdc:	str	r0, [fp, #-4]
     be0:	b	c74 <read_uint16+0x140>
     be4:	ldr	r0, [sp, #8]
     be8:	ldr	r1, [sp, #4]
     bec:	bl	0 <coda_bin_cursor_read_uint16>
     bf0:	str	r0, [fp, #-4]
     bf4:	b	c74 <read_uint16+0x140>
     bf8:	ldr	r0, [sp, #8]
     bfc:	ldr	r1, [sp, #4]
     c00:	bl	0 <coda_mem_cursor_read_uint16>
     c04:	str	r0, [fp, #-4]
     c08:	b	c74 <read_uint16+0x140>
     c0c:	mvn	r0, #10
     c10:	movw	r1, #0
     c14:	bl	0 <coda_set_error>
     c18:	mvn	r0, #0
     c1c:	str	r0, [fp, #-4]
     c20:	b	c74 <read_uint16+0x140>
     c24:	mvn	r0, #12
     c28:	movw	r1, #0
     c2c:	bl	0 <coda_set_error>
     c30:	mvn	r0, #0
     c34:	str	r0, [fp, #-4]
     c38:	b	c74 <read_uint16+0x140>
     c3c:	ldr	r0, [sp, #8]
     c40:	ldr	r1, [sp, #4]
     c44:	bl	0 <coda_cdf_cursor_read_uint16>
     c48:	str	r0, [fp, #-4]
     c4c:	b	c74 <read_uint16+0x140>
     c50:	b	c54 <read_uint16+0x120>
     c54:	movw	r0, #0
     c58:	movt	r0, #0
     c5c:	movw	r1, #0
     c60:	movt	r1, #0
     c64:	movw	r2, #465	; 0x1d1
     c68:	movw	r3, #0
     c6c:	movt	r3, #0
     c70:	bl	0 <__assert_fail>
     c74:	ldr	r0, [fp, #-4]
     c78:	mov	sp, fp
     c7c:	pop	{fp, pc}

00000c80 <coda_cursor_read_int32>:
     c80:	push	{fp, lr}
     c84:	mov	fp, sp
     c88:	sub	sp, sp, #32
     c8c:	str	r0, [fp, #-8]
     c90:	str	r1, [fp, #-12]
     c94:	ldr	r0, [fp, #-8]
     c98:	movw	r1, #0
     c9c:	cmp	r0, r1
     ca0:	beq	cd8 <coda_cursor_read_int32+0x58>
     ca4:	ldr	r0, [fp, #-8]
     ca8:	ldr	r0, [r0, #4]
     cac:	cmp	r0, #0
     cb0:	ble	cd8 <coda_cursor_read_int32+0x58>
     cb4:	ldr	r0, [fp, #-8]
     cb8:	add	r1, r0, #8
     cbc:	ldr	r0, [r0, #4]
     cc0:	sub	r0, r0, #1
     cc4:	add	r0, r1, r0, lsl #4
     cc8:	ldr	r0, [r0]
     ccc:	movw	r1, #0
     cd0:	cmp	r0, r1
     cd4:	bne	d00 <coda_cursor_read_int32+0x80>
     cd8:	mvn	r0, #99	; 0x63
     cdc:	movw	r1, #0
     ce0:	movt	r1, #0
     ce4:	movw	r2, #0
     ce8:	movt	r2, #0
     cec:	movw	r3, #2001	; 0x7d1
     cf0:	bl	0 <coda_set_error>
     cf4:	mvn	r0, #0
     cf8:	str	r0, [fp, #-4]
     cfc:	b	ea8 <coda_cursor_read_int32+0x228>
     d00:	ldr	r0, [fp, #-12]
     d04:	movw	r1, #0
     d08:	cmp	r0, r1
     d0c:	bne	d38 <coda_cursor_read_int32+0xb8>
     d10:	mvn	r0, #99	; 0x63
     d14:	movw	r1, #0
     d18:	movt	r1, #0
     d1c:	movw	r2, #0
     d20:	movt	r2, #0
     d24:	movw	r3, #2006	; 0x7d6
     d28:	bl	0 <coda_set_error>
     d2c:	mvn	r0, #0
     d30:	str	r0, [fp, #-4]
     d34:	b	ea8 <coda_cursor_read_int32+0x228>
     d38:	ldr	r0, [fp, #-8]
     d3c:	add	r1, sp, #16
     d40:	bl	150 <get_read_type>
     d44:	cmp	r0, #0
     d48:	beq	d58 <coda_cursor_read_int32+0xd8>
     d4c:	mvn	r0, #0
     d50:	str	r0, [fp, #-4]
     d54:	b	ea8 <coda_cursor_read_int32+0x228>
     d58:	ldr	r0, [sp, #16]
     d5c:	cmp	r0, #4
     d60:	str	r0, [sp, #4]
     d64:	bhi	e70 <coda_cursor_read_int32+0x1f0>
     d68:	add	r0, pc, #8
     d6c:	ldr	r1, [sp, #4]
     d70:	ldr	r0, [r0, r1, lsl #2]
     d74:	mov	pc, r0
     d78:	.word	0x00000d8c
     d7c:	.word	0x00000dbc
     d80:	.word	0x00000dec
     d84:	.word	0x00000e1c
     d88:	.word	0x00000e4c
     d8c:	ldr	r0, [fp, #-8]
     d90:	add	r1, sp, #15
     d94:	bl	254 <read_int8>
     d98:	cmp	r0, #0
     d9c:	beq	dac <coda_cursor_read_int32+0x12c>
     da0:	mvn	r0, #0
     da4:	str	r0, [fp, #-4]
     da8:	b	ea8 <coda_cursor_read_int32+0x228>
     dac:	ldrsb	r0, [sp, #15]
     db0:	ldr	r1, [fp, #-12]
     db4:	str	r0, [r1]
     db8:	b	ea0 <coda_cursor_read_int32+0x220>
     dbc:	ldr	r0, [fp, #-8]
     dc0:	add	r1, sp, #14
     dc4:	bl	510 <read_uint8>
     dc8:	cmp	r0, #0
     dcc:	beq	ddc <coda_cursor_read_int32+0x15c>
     dd0:	mvn	r0, #0
     dd4:	str	r0, [fp, #-4]
     dd8:	b	ea8 <coda_cursor_read_int32+0x228>
     ddc:	ldrb	r0, [sp, #14]
     de0:	ldr	r1, [fp, #-12]
     de4:	str	r0, [r1]
     de8:	b	ea0 <coda_cursor_read_int32+0x220>
     dec:	ldr	r0, [fp, #-8]
     df0:	add	r1, sp, #12
     df4:	bl	830 <read_int16>
     df8:	cmp	r0, #0
     dfc:	beq	e0c <coda_cursor_read_int32+0x18c>
     e00:	mvn	r0, #0
     e04:	str	r0, [fp, #-4]
     e08:	b	ea8 <coda_cursor_read_int32+0x228>
     e0c:	ldrsh	r0, [sp, #12]
     e10:	ldr	r1, [fp, #-12]
     e14:	str	r0, [r1]
     e18:	b	ea0 <coda_cursor_read_int32+0x220>
     e1c:	ldr	r0, [fp, #-8]
     e20:	add	r1, sp, #10
     e24:	bl	b34 <read_uint16>
     e28:	cmp	r0, #0
     e2c:	beq	e3c <coda_cursor_read_int32+0x1bc>
     e30:	mvn	r0, #0
     e34:	str	r0, [fp, #-4]
     e38:	b	ea8 <coda_cursor_read_int32+0x228>
     e3c:	ldrh	r0, [sp, #10]
     e40:	ldr	r1, [fp, #-12]
     e44:	str	r0, [r1]
     e48:	b	ea0 <coda_cursor_read_int32+0x220>
     e4c:	ldr	r0, [fp, #-8]
     e50:	ldr	r1, [fp, #-12]
     e54:	bl	eb4 <read_int32>
     e58:	cmp	r0, #0
     e5c:	beq	e6c <coda_cursor_read_int32+0x1ec>
     e60:	mvn	r0, #0
     e64:	str	r0, [fp, #-4]
     e68:	b	ea8 <coda_cursor_read_int32+0x228>
     e6c:	b	ea0 <coda_cursor_read_int32+0x220>
     e70:	ldr	r0, [sp, #16]
     e74:	bl	0 <coda_type_get_native_type_name>
     e78:	mvn	lr, #104	; 0x68
     e7c:	str	r0, [sp]
     e80:	mov	r0, lr
     e84:	movw	r1, #0
     e88:	movt	r1, #0
     e8c:	ldr	r2, [sp]
     e90:	bl	0 <coda_set_error>
     e94:	mvn	r0, #0
     e98:	str	r0, [fp, #-4]
     e9c:	b	ea8 <coda_cursor_read_int32+0x228>
     ea0:	movw	r0, #0
     ea4:	str	r0, [fp, #-4]
     ea8:	ldr	r0, [fp, #-4]
     eac:	mov	sp, fp
     eb0:	pop	{fp, pc}

00000eb4 <read_int32>:
     eb4:	push	{fp, lr}
     eb8:	mov	fp, sp
     ebc:	sub	sp, sp, #16
     ec0:	str	r0, [sp, #8]
     ec4:	str	r1, [sp, #4]
     ec8:	ldr	r0, [sp, #8]
     ecc:	ldr	r1, [r0, #4]
     ed0:	add	r0, r0, r1, lsl #4
     ed4:	ldr	r0, [r0, #-8]
     ed8:	ldr	r0, [r0]
     edc:	cmp	r0, #0
     ee0:	str	r0, [sp]
     ee4:	beq	f5c <read_int32+0xa8>
     ee8:	b	eec <read_int32+0x38>
     eec:	ldr	r0, [sp]
     ef0:	cmp	r0, #1
     ef4:	beq	f70 <read_int32+0xbc>
     ef8:	b	efc <read_int32+0x48>
     efc:	ldr	r0, [sp]
     f00:	cmp	r0, #100	; 0x64
     f04:	beq	f84 <read_int32+0xd0>
     f08:	b	f0c <read_int32+0x58>
     f0c:	ldr	r0, [sp]
     f10:	cmp	r0, #101	; 0x65
     f14:	beq	f98 <read_int32+0xe4>
     f18:	b	f1c <read_int32+0x68>
     f1c:	ldr	r0, [sp]
     f20:	cmp	r0, #102	; 0x66
     f24:	beq	fb0 <read_int32+0xfc>
     f28:	b	f2c <read_int32+0x78>
     f2c:	ldr	r0, [sp]
     f30:	cmp	r0, #103	; 0x67
     f34:	beq	fc8 <read_int32+0x114>
     f38:	b	f3c <read_int32+0x88>
     f3c:	ldr	r0, [sp]
     f40:	cmp	r0, #104	; 0x68
     f44:	beq	fdc <read_int32+0x128>
     f48:	b	f4c <read_int32+0x98>
     f4c:	ldr	r0, [sp]
     f50:	cmp	r0, #105	; 0x69
     f54:	beq	ff0 <read_int32+0x13c>
     f58:	b	1010 <read_int32+0x15c>
     f5c:	ldr	r0, [sp, #8]
     f60:	ldr	r1, [sp, #4]
     f64:	bl	0 <coda_ascii_cursor_read_int32>
     f68:	str	r0, [fp, #-4]
     f6c:	b	1018 <read_int32+0x164>
     f70:	ldr	r0, [sp, #8]
     f74:	ldr	r1, [sp, #4]
     f78:	bl	0 <coda_bin_cursor_read_int32>
     f7c:	str	r0, [fp, #-4]
     f80:	b	1018 <read_int32+0x164>
     f84:	ldr	r0, [sp, #8]
     f88:	ldr	r1, [sp, #4]
     f8c:	bl	0 <coda_mem_cursor_read_int32>
     f90:	str	r0, [fp, #-4]
     f94:	b	1018 <read_int32+0x164>
     f98:	mvn	r0, #10
     f9c:	movw	r1, #0
     fa0:	bl	0 <coda_set_error>
     fa4:	mvn	r0, #0
     fa8:	str	r0, [fp, #-4]
     fac:	b	1018 <read_int32+0x164>
     fb0:	mvn	r0, #12
     fb4:	movw	r1, #0
     fb8:	bl	0 <coda_set_error>
     fbc:	mvn	r0, #0
     fc0:	str	r0, [fp, #-4]
     fc4:	b	1018 <read_int32+0x164>
     fc8:	ldr	r0, [sp, #8]
     fcc:	ldr	r1, [sp, #4]
     fd0:	bl	0 <coda_cdf_cursor_read_int32>
     fd4:	str	r0, [fp, #-4]
     fd8:	b	1018 <read_int32+0x164>
     fdc:	ldr	r0, [sp, #8]
     fe0:	ldr	r1, [sp, #4]
     fe4:	bl	0 <coda_netcdf_cursor_read_int32>
     fe8:	str	r0, [fp, #-4]
     fec:	b	1018 <read_int32+0x164>
     ff0:	movw	r0, #0
     ff4:	movt	r0, #0
     ff8:	movw	r1, #0
     ffc:	movt	r1, #0
    1000:	movw	r2, #499	; 0x1f3
    1004:	movw	r3, #0
    1008:	movt	r3, #0
    100c:	bl	0 <__assert_fail>
    1010:	movw	r0, #0
    1014:	str	r0, [fp, #-4]
    1018:	ldr	r0, [fp, #-4]
    101c:	mov	sp, fp
    1020:	pop	{fp, pc}

00001024 <coda_cursor_read_uint32>:
    1024:	push	{fp, lr}
    1028:	mov	fp, sp
    102c:	sub	sp, sp, #32
    1030:	str	r0, [fp, #-8]
    1034:	str	r1, [fp, #-12]
    1038:	ldr	r0, [fp, #-8]
    103c:	movw	r1, #0
    1040:	cmp	r0, r1
    1044:	beq	107c <coda_cursor_read_uint32+0x58>
    1048:	ldr	r0, [fp, #-8]
    104c:	ldr	r0, [r0, #4]
    1050:	cmp	r0, #0
    1054:	ble	107c <coda_cursor_read_uint32+0x58>
    1058:	ldr	r0, [fp, #-8]
    105c:	add	r1, r0, #8
    1060:	ldr	r0, [r0, #4]
    1064:	sub	r0, r0, #1
    1068:	add	r0, r1, r0, lsl #4
    106c:	ldr	r0, [r0]
    1070:	movw	r1, #0
    1074:	cmp	r0, r1
    1078:	bne	10a4 <coda_cursor_read_uint32+0x80>
    107c:	mvn	r0, #99	; 0x63
    1080:	movw	r1, #0
    1084:	movt	r1, #0
    1088:	movw	r2, #0
    108c:	movt	r2, #0
    1090:	movw	r3, #2094	; 0x82e
    1094:	bl	0 <coda_set_error>
    1098:	mvn	r0, #0
    109c:	str	r0, [fp, #-4]
    10a0:	b	11ec <coda_cursor_read_uint32+0x1c8>
    10a4:	ldr	r0, [fp, #-12]
    10a8:	movw	r1, #0
    10ac:	cmp	r0, r1
    10b0:	bne	10dc <coda_cursor_read_uint32+0xb8>
    10b4:	mvn	r0, #99	; 0x63
    10b8:	movw	r1, #0
    10bc:	movt	r1, #0
    10c0:	movw	r2, #0
    10c4:	movt	r2, #0
    10c8:	movw	r3, #2099	; 0x833
    10cc:	bl	0 <coda_set_error>
    10d0:	mvn	r0, #0
    10d4:	str	r0, [fp, #-4]
    10d8:	b	11ec <coda_cursor_read_uint32+0x1c8>
    10dc:	ldr	r0, [fp, #-8]
    10e0:	add	r1, sp, #16
    10e4:	bl	150 <get_read_type>
    10e8:	cmp	r0, #0
    10ec:	beq	10fc <coda_cursor_read_uint32+0xd8>
    10f0:	mvn	r0, #0
    10f4:	str	r0, [fp, #-4]
    10f8:	b	11ec <coda_cursor_read_uint32+0x1c8>
    10fc:	ldr	r0, [sp, #16]
    1100:	cmp	r0, #1
    1104:	str	r0, [sp, #8]
    1108:	beq	1130 <coda_cursor_read_uint32+0x10c>
    110c:	b	1110 <coda_cursor_read_uint32+0xec>
    1110:	ldr	r0, [sp, #8]
    1114:	cmp	r0, #3
    1118:	beq	1160 <coda_cursor_read_uint32+0x13c>
    111c:	b	1120 <coda_cursor_read_uint32+0xfc>
    1120:	ldr	r0, [sp, #8]
    1124:	cmp	r0, #5
    1128:	beq	1190 <coda_cursor_read_uint32+0x16c>
    112c:	b	11b4 <coda_cursor_read_uint32+0x190>
    1130:	ldr	r0, [fp, #-8]
    1134:	add	r1, sp, #15
    1138:	bl	510 <read_uint8>
    113c:	cmp	r0, #0
    1140:	beq	1150 <coda_cursor_read_uint32+0x12c>
    1144:	mvn	r0, #0
    1148:	str	r0, [fp, #-4]
    114c:	b	11ec <coda_cursor_read_uint32+0x1c8>
    1150:	ldrb	r0, [sp, #15]
    1154:	ldr	r1, [fp, #-12]
    1158:	str	r0, [r1]
    115c:	b	11e4 <coda_cursor_read_uint32+0x1c0>
    1160:	ldr	r0, [fp, #-8]
    1164:	add	r1, sp, #12
    1168:	bl	b34 <read_uint16>
    116c:	cmp	r0, #0
    1170:	beq	1180 <coda_cursor_read_uint32+0x15c>
    1174:	mvn	r0, #0
    1178:	str	r0, [fp, #-4]
    117c:	b	11ec <coda_cursor_read_uint32+0x1c8>
    1180:	ldrh	r0, [sp, #12]
    1184:	ldr	r1, [fp, #-12]
    1188:	str	r0, [r1]
    118c:	b	11e4 <coda_cursor_read_uint32+0x1c0>
    1190:	ldr	r0, [fp, #-8]
    1194:	ldr	r1, [fp, #-12]
    1198:	bl	11f8 <read_uint32>
    119c:	cmp	r0, #0
    11a0:	beq	11b0 <coda_cursor_read_uint32+0x18c>
    11a4:	mvn	r0, #0
    11a8:	str	r0, [fp, #-4]
    11ac:	b	11ec <coda_cursor_read_uint32+0x1c8>
    11b0:	b	11e4 <coda_cursor_read_uint32+0x1c0>
    11b4:	ldr	r0, [sp, #16]
    11b8:	bl	0 <coda_type_get_native_type_name>
    11bc:	mvn	lr, #104	; 0x68
    11c0:	str	r0, [sp, #4]
    11c4:	mov	r0, lr
    11c8:	movw	r1, #0
    11cc:	movt	r1, #0
    11d0:	ldr	r2, [sp, #4]
    11d4:	bl	0 <coda_set_error>
    11d8:	mvn	r0, #0
    11dc:	str	r0, [fp, #-4]
    11e0:	b	11ec <coda_cursor_read_uint32+0x1c8>
    11e4:	movw	r0, #0
    11e8:	str	r0, [fp, #-4]
    11ec:	ldr	r0, [fp, #-4]
    11f0:	mov	sp, fp
    11f4:	pop	{fp, pc}

000011f8 <read_uint32>:
    11f8:	push	{fp, lr}
    11fc:	mov	fp, sp
    1200:	sub	sp, sp, #16
    1204:	str	r0, [sp, #8]
    1208:	str	r1, [sp, #4]
    120c:	ldr	r0, [sp, #8]
    1210:	ldr	r1, [r0, #4]
    1214:	add	r0, r0, r1, lsl #4
    1218:	ldr	r0, [r0, #-8]
    121c:	ldr	r0, [r0]
    1220:	cmp	r0, #0
    1224:	str	r0, [sp]
    1228:	beq	1294 <read_uint32+0x9c>
    122c:	b	1230 <read_uint32+0x38>
    1230:	ldr	r0, [sp]
    1234:	cmp	r0, #1
    1238:	beq	12a8 <read_uint32+0xb0>
    123c:	b	1240 <read_uint32+0x48>
    1240:	ldr	r0, [sp]
    1244:	cmp	r0, #100	; 0x64
    1248:	beq	12bc <read_uint32+0xc4>
    124c:	b	1250 <read_uint32+0x58>
    1250:	ldr	r0, [sp]
    1254:	cmp	r0, #101	; 0x65
    1258:	beq	12d0 <read_uint32+0xd8>
    125c:	b	1260 <read_uint32+0x68>
    1260:	ldr	r0, [sp]
    1264:	cmp	r0, #102	; 0x66
    1268:	beq	12e8 <read_uint32+0xf0>
    126c:	b	1270 <read_uint32+0x78>
    1270:	ldr	r0, [sp]
    1274:	cmp	r0, #103	; 0x67
    1278:	beq	1300 <read_uint32+0x108>
    127c:	b	1280 <read_uint32+0x88>
    1280:	ldr	r0, [sp]
    1284:	sub	r1, r0, #104	; 0x68
    1288:	cmp	r1, #2
    128c:	bcc	1314 <read_uint32+0x11c>
    1290:	b	1318 <read_uint32+0x120>
    1294:	ldr	r0, [sp, #8]
    1298:	ldr	r1, [sp, #4]
    129c:	bl	0 <coda_ascii_cursor_read_uint32>
    12a0:	str	r0, [fp, #-4]
    12a4:	b	1338 <read_uint32+0x140>
    12a8:	ldr	r0, [sp, #8]
    12ac:	ldr	r1, [sp, #4]
    12b0:	bl	0 <coda_bin_cursor_read_uint32>
    12b4:	str	r0, [fp, #-4]
    12b8:	b	1338 <read_uint32+0x140>
    12bc:	ldr	r0, [sp, #8]
    12c0:	ldr	r1, [sp, #4]
    12c4:	bl	0 <coda_mem_cursor_read_uint32>
    12c8:	str	r0, [fp, #-4]
    12cc:	b	1338 <read_uint32+0x140>
    12d0:	mvn	r0, #10
    12d4:	movw	r1, #0
    12d8:	bl	0 <coda_set_error>
    12dc:	mvn	r0, #0
    12e0:	str	r0, [fp, #-4]
    12e4:	b	1338 <read_uint32+0x140>
    12e8:	mvn	r0, #12
    12ec:	movw	r1, #0
    12f0:	bl	0 <coda_set_error>
    12f4:	mvn	r0, #0
    12f8:	str	r0, [fp, #-4]
    12fc:	b	1338 <read_uint32+0x140>
    1300:	ldr	r0, [sp, #8]
    1304:	ldr	r1, [sp, #4]
    1308:	bl	0 <coda_cdf_cursor_read_uint32>
    130c:	str	r0, [fp, #-4]
    1310:	b	1338 <read_uint32+0x140>
    1314:	b	1318 <read_uint32+0x120>
    1318:	movw	r0, #0
    131c:	movt	r0, #0
    1320:	movw	r1, #0
    1324:	movt	r1, #0
    1328:	movw	r2, #537	; 0x219
    132c:	movw	r3, #0
    1330:	movt	r3, #0
    1334:	bl	0 <__assert_fail>
    1338:	ldr	r0, [fp, #-4]
    133c:	mov	sp, fp
    1340:	pop	{fp, pc}

00001344 <coda_cursor_read_int64>:
    1344:	push	{fp, lr}
    1348:	mov	fp, sp
    134c:	sub	sp, sp, #40	; 0x28
    1350:	str	r0, [fp, #-8]
    1354:	str	r1, [fp, #-12]
    1358:	ldr	r0, [fp, #-8]
    135c:	movw	r1, #0
    1360:	cmp	r0, r1
    1364:	beq	139c <coda_cursor_read_int64+0x58>
    1368:	ldr	r0, [fp, #-8]
    136c:	ldr	r0, [r0, #4]
    1370:	cmp	r0, #0
    1374:	ble	139c <coda_cursor_read_int64+0x58>
    1378:	ldr	r0, [fp, #-8]
    137c:	add	r1, r0, #8
    1380:	ldr	r0, [r0, #4]
    1384:	sub	r0, r0, #1
    1388:	add	r0, r1, r0, lsl #4
    138c:	ldr	r0, [r0]
    1390:	movw	r1, #0
    1394:	cmp	r0, r1
    1398:	bne	13c4 <coda_cursor_read_int64+0x80>
    139c:	mvn	r0, #99	; 0x63
    13a0:	movw	r1, #0
    13a4:	movt	r1, #0
    13a8:	movw	r2, #0
    13ac:	movt	r2, #0
    13b0:	movw	r3, #2169	; 0x879
    13b4:	bl	0 <coda_set_error>
    13b8:	mvn	r0, #0
    13bc:	str	r0, [fp, #-4]
    13c0:	b	1604 <coda_cursor_read_int64+0x2c0>
    13c4:	ldr	r0, [fp, #-12]
    13c8:	movw	r1, #0
    13cc:	cmp	r0, r1
    13d0:	bne	13fc <coda_cursor_read_int64+0xb8>
    13d4:	mvn	r0, #99	; 0x63
    13d8:	movw	r1, #0
    13dc:	movt	r1, #0
    13e0:	movw	r2, #0
    13e4:	movt	r2, #0
    13e8:	movw	r3, #2174	; 0x87e
    13ec:	bl	0 <coda_set_error>
    13f0:	mvn	r0, #0
    13f4:	str	r0, [fp, #-4]
    13f8:	b	1604 <coda_cursor_read_int64+0x2c0>
    13fc:	ldr	r0, [fp, #-8]
    1400:	sub	r1, fp, #16
    1404:	bl	150 <get_read_type>
    1408:	cmp	r0, #0
    140c:	beq	141c <coda_cursor_read_int64+0xd8>
    1410:	mvn	r0, #0
    1414:	str	r0, [fp, #-4]
    1418:	b	1604 <coda_cursor_read_int64+0x2c0>
    141c:	ldr	r0, [fp, #-16]
    1420:	cmp	r0, #6
    1424:	str	r0, [sp, #4]
    1428:	bhi	15cc <coda_cursor_read_int64+0x288>
    142c:	add	r0, pc, #8
    1430:	ldr	r1, [sp, #4]
    1434:	ldr	r0, [r0, r1, lsl #2]
    1438:	mov	pc, r0
    143c:	.word	0x00001458
    1440:	.word	0x00001490
    1444:	.word	0x000014c8
    1448:	.word	0x00001500
    144c:	.word	0x00001538
    1450:	.word	0x00001570
    1454:	.word	0x000015a8
    1458:	ldr	r0, [fp, #-8]
    145c:	sub	r1, fp, #17
    1460:	bl	254 <read_int8>
    1464:	cmp	r0, #0
    1468:	beq	1478 <coda_cursor_read_int64+0x134>
    146c:	mvn	r0, #0
    1470:	str	r0, [fp, #-4]
    1474:	b	1604 <coda_cursor_read_int64+0x2c0>
    1478:	ldrsb	r0, [fp, #-17]	; 0xffffffef
    147c:	asr	r1, r0, #31
    1480:	ldr	r2, [fp, #-12]
    1484:	str	r0, [r2]
    1488:	str	r1, [r2, #4]
    148c:	b	15fc <coda_cursor_read_int64+0x2b8>
    1490:	ldr	r0, [fp, #-8]
    1494:	sub	r1, fp, #18
    1498:	bl	510 <read_uint8>
    149c:	cmp	r0, #0
    14a0:	beq	14b0 <coda_cursor_read_int64+0x16c>
    14a4:	mvn	r0, #0
    14a8:	str	r0, [fp, #-4]
    14ac:	b	1604 <coda_cursor_read_int64+0x2c0>
    14b0:	ldrb	r0, [fp, #-18]	; 0xffffffee
    14b4:	ldr	r1, [fp, #-12]
    14b8:	mov	r2, #0
    14bc:	str	r2, [r1, #4]
    14c0:	str	r0, [r1]
    14c4:	b	15fc <coda_cursor_read_int64+0x2b8>
    14c8:	ldr	r0, [fp, #-8]
    14cc:	add	r1, sp, #20
    14d0:	bl	830 <read_int16>
    14d4:	cmp	r0, #0
    14d8:	beq	14e8 <coda_cursor_read_int64+0x1a4>
    14dc:	mvn	r0, #0
    14e0:	str	r0, [fp, #-4]
    14e4:	b	1604 <coda_cursor_read_int64+0x2c0>
    14e8:	ldrsh	r0, [sp, #20]
    14ec:	asr	r1, r0, #31
    14f0:	ldr	r2, [fp, #-12]
    14f4:	str	r0, [r2]
    14f8:	str	r1, [r2, #4]
    14fc:	b	15fc <coda_cursor_read_int64+0x2b8>
    1500:	ldr	r0, [fp, #-8]
    1504:	add	r1, sp, #18
    1508:	bl	b34 <read_uint16>
    150c:	cmp	r0, #0
    1510:	beq	1520 <coda_cursor_read_int64+0x1dc>
    1514:	mvn	r0, #0
    1518:	str	r0, [fp, #-4]
    151c:	b	1604 <coda_cursor_read_int64+0x2c0>
    1520:	ldrh	r0, [sp, #18]
    1524:	ldr	r1, [fp, #-12]
    1528:	mov	r2, #0
    152c:	str	r2, [r1, #4]
    1530:	str	r0, [r1]
    1534:	b	15fc <coda_cursor_read_int64+0x2b8>
    1538:	ldr	r0, [fp, #-8]
    153c:	add	r1, sp, #12
    1540:	bl	eb4 <read_int32>
    1544:	cmp	r0, #0
    1548:	beq	1558 <coda_cursor_read_int64+0x214>
    154c:	mvn	r0, #0
    1550:	str	r0, [fp, #-4]
    1554:	b	1604 <coda_cursor_read_int64+0x2c0>
    1558:	ldr	r0, [sp, #12]
    155c:	asr	r1, r0, #31
    1560:	ldr	r2, [fp, #-12]
    1564:	str	r0, [r2]
    1568:	str	r1, [r2, #4]
    156c:	b	15fc <coda_cursor_read_int64+0x2b8>
    1570:	ldr	r0, [fp, #-8]
    1574:	add	r1, sp, #8
    1578:	bl	11f8 <read_uint32>
    157c:	cmp	r0, #0
    1580:	beq	1590 <coda_cursor_read_int64+0x24c>
    1584:	mvn	r0, #0
    1588:	str	r0, [fp, #-4]
    158c:	b	1604 <coda_cursor_read_int64+0x2c0>
    1590:	ldr	r0, [sp, #8]
    1594:	ldr	r1, [fp, #-12]
    1598:	mov	r2, #0
    159c:	str	r2, [r1, #4]
    15a0:	str	r0, [r1]
    15a4:	b	15fc <coda_cursor_read_int64+0x2b8>
    15a8:	ldr	r0, [fp, #-8]
    15ac:	ldr	r1, [fp, #-12]
    15b0:	bl	1610 <read_int64>
    15b4:	cmp	r0, #0
    15b8:	beq	15c8 <coda_cursor_read_int64+0x284>
    15bc:	mvn	r0, #0
    15c0:	str	r0, [fp, #-4]
    15c4:	b	1604 <coda_cursor_read_int64+0x2c0>
    15c8:	b	15fc <coda_cursor_read_int64+0x2b8>
    15cc:	ldr	r0, [fp, #-16]
    15d0:	bl	0 <coda_type_get_native_type_name>
    15d4:	mvn	lr, #104	; 0x68
    15d8:	str	r0, [sp]
    15dc:	mov	r0, lr
    15e0:	movw	r1, #0
    15e4:	movt	r1, #0
    15e8:	ldr	r2, [sp]
    15ec:	bl	0 <coda_set_error>
    15f0:	mvn	r0, #0
    15f4:	str	r0, [fp, #-4]
    15f8:	b	1604 <coda_cursor_read_int64+0x2c0>
    15fc:	movw	r0, #0
    1600:	str	r0, [fp, #-4]
    1604:	ldr	r0, [fp, #-4]
    1608:	mov	sp, fp
    160c:	pop	{fp, pc}

00001610 <read_int64>:
    1610:	push	{fp, lr}
    1614:	mov	fp, sp
    1618:	sub	sp, sp, #16
    161c:	str	r0, [sp, #8]
    1620:	str	r1, [sp, #4]
    1624:	ldr	r0, [sp, #8]
    1628:	ldr	r1, [r0, #4]
    162c:	add	r0, r0, r1, lsl #4
    1630:	ldr	r0, [r0, #-8]
    1634:	ldr	r0, [r0]
    1638:	cmp	r0, #0
    163c:	str	r0, [sp]
    1640:	beq	16ac <read_int64+0x9c>
    1644:	b	1648 <read_int64+0x38>
    1648:	ldr	r0, [sp]
    164c:	cmp	r0, #1
    1650:	beq	16c0 <read_int64+0xb0>
    1654:	b	1658 <read_int64+0x48>
    1658:	ldr	r0, [sp]
    165c:	cmp	r0, #100	; 0x64
    1660:	beq	16d4 <read_int64+0xc4>
    1664:	b	1668 <read_int64+0x58>
    1668:	ldr	r0, [sp]
    166c:	cmp	r0, #101	; 0x65
    1670:	beq	16e8 <read_int64+0xd8>
    1674:	b	1678 <read_int64+0x68>
    1678:	ldr	r0, [sp]
    167c:	cmp	r0, #102	; 0x66
    1680:	beq	1700 <read_int64+0xf0>
    1684:	b	1688 <read_int64+0x78>
    1688:	ldr	r0, [sp]
    168c:	cmp	r0, #103	; 0x67
    1690:	beq	1718 <read_int64+0x108>
    1694:	b	1698 <read_int64+0x88>
    1698:	ldr	r0, [sp]
    169c:	sub	r1, r0, #104	; 0x68
    16a0:	cmp	r1, #2
    16a4:	bcc	172c <read_int64+0x11c>
    16a8:	b	1730 <read_int64+0x120>
    16ac:	ldr	r0, [sp, #8]
    16b0:	ldr	r1, [sp, #4]
    16b4:	bl	0 <coda_ascii_cursor_read_int64>
    16b8:	str	r0, [fp, #-4]
    16bc:	b	1750 <read_int64+0x140>
    16c0:	ldr	r0, [sp, #8]
    16c4:	ldr	r1, [sp, #4]
    16c8:	bl	0 <coda_bin_cursor_read_int64>
    16cc:	str	r0, [fp, #-4]
    16d0:	b	1750 <read_int64+0x140>
    16d4:	ldr	r0, [sp, #8]
    16d8:	ldr	r1, [sp, #4]
    16dc:	bl	0 <coda_mem_cursor_read_int64>
    16e0:	str	r0, [fp, #-4]
    16e4:	b	1750 <read_int64+0x140>
    16e8:	mvn	r0, #10
    16ec:	movw	r1, #0
    16f0:	bl	0 <coda_set_error>
    16f4:	mvn	r0, #0
    16f8:	str	r0, [fp, #-4]
    16fc:	b	1750 <read_int64+0x140>
    1700:	mvn	r0, #12
    1704:	movw	r1, #0
    1708:	bl	0 <coda_set_error>
    170c:	mvn	r0, #0
    1710:	str	r0, [fp, #-4]
    1714:	b	1750 <read_int64+0x140>
    1718:	ldr	r0, [sp, #8]
    171c:	ldr	r1, [sp, #4]
    1720:	bl	0 <coda_cdf_cursor_read_int64>
    1724:	str	r0, [fp, #-4]
    1728:	b	1750 <read_int64+0x140>
    172c:	b	1730 <read_int64+0x120>
    1730:	movw	r0, #0
    1734:	movt	r0, #0
    1738:	movw	r1, #0
    173c:	movt	r1, #0
    1740:	movw	r2, #572	; 0x23c
    1744:	movw	r3, #0
    1748:	movt	r3, #0
    174c:	bl	0 <__assert_fail>
    1750:	ldr	r0, [fp, #-4]
    1754:	mov	sp, fp
    1758:	pop	{fp, pc}

0000175c <coda_cursor_read_uint64>:
    175c:	push	{fp, lr}
    1760:	mov	fp, sp
    1764:	sub	sp, sp, #32
    1768:	str	r0, [fp, #-8]
    176c:	str	r1, [fp, #-12]
    1770:	ldr	r0, [fp, #-8]
    1774:	movw	r1, #0
    1778:	cmp	r0, r1
    177c:	beq	17b4 <coda_cursor_read_uint64+0x58>
    1780:	ldr	r0, [fp, #-8]
    1784:	ldr	r0, [r0, #4]
    1788:	cmp	r0, #0
    178c:	ble	17b4 <coda_cursor_read_uint64+0x58>
    1790:	ldr	r0, [fp, #-8]
    1794:	add	r1, r0, #8
    1798:	ldr	r0, [r0, #4]
    179c:	sub	r0, r0, #1
    17a0:	add	r0, r1, r0, lsl #4
    17a4:	ldr	r0, [r0]
    17a8:	movw	r1, #0
    17ac:	cmp	r0, r1
    17b0:	bne	17dc <coda_cursor_read_uint64+0x80>
    17b4:	mvn	r0, #99	; 0x63
    17b8:	movw	r1, #0
    17bc:	movt	r1, #0
    17c0:	movw	r2, #0
    17c4:	movt	r2, #0
    17c8:	movw	r3, #2285	; 0x8ed
    17cc:	bl	0 <coda_set_error>
    17d0:	mvn	r0, #0
    17d4:	str	r0, [fp, #-4]
    17d8:	b	1978 <coda_cursor_read_uint64+0x21c>
    17dc:	ldr	r0, [fp, #-12]
    17e0:	movw	r1, #0
    17e4:	cmp	r0, r1
    17e8:	bne	1814 <coda_cursor_read_uint64+0xb8>
    17ec:	mvn	r0, #99	; 0x63
    17f0:	movw	r1, #0
    17f4:	movt	r1, #0
    17f8:	movw	r2, #0
    17fc:	movt	r2, #0
    1800:	movw	r3, #2290	; 0x8f2
    1804:	bl	0 <coda_set_error>
    1808:	mvn	r0, #0
    180c:	str	r0, [fp, #-4]
    1810:	b	1978 <coda_cursor_read_uint64+0x21c>
    1814:	ldr	r0, [fp, #-8]
    1818:	add	r1, sp, #16
    181c:	bl	150 <get_read_type>
    1820:	cmp	r0, #0
    1824:	beq	1834 <coda_cursor_read_uint64+0xd8>
    1828:	mvn	r0, #0
    182c:	str	r0, [fp, #-4]
    1830:	b	1978 <coda_cursor_read_uint64+0x21c>
    1834:	ldr	r0, [sp, #16]
    1838:	sub	r0, r0, #1
    183c:	cmp	r0, #6
    1840:	str	r0, [sp, #4]
    1844:	bhi	1940 <coda_cursor_read_uint64+0x1e4>
    1848:	add	r0, pc, #8
    184c:	ldr	r1, [sp, #4]
    1850:	ldr	r0, [r0, r1, lsl #2]
    1854:	mov	pc, r0
    1858:	.word	0x00001874
    185c:	.word	0x00001940
    1860:	.word	0x000018ac
    1864:	.word	0x00001940
    1868:	.word	0x000018e4
    186c:	.word	0x00001940
    1870:	.word	0x0000191c
    1874:	ldr	r0, [fp, #-8]
    1878:	add	r1, sp, #15
    187c:	bl	510 <read_uint8>
    1880:	cmp	r0, #0
    1884:	beq	1894 <coda_cursor_read_uint64+0x138>
    1888:	mvn	r0, #0
    188c:	str	r0, [fp, #-4]
    1890:	b	1978 <coda_cursor_read_uint64+0x21c>
    1894:	ldrb	r0, [sp, #15]
    1898:	ldr	r1, [fp, #-12]
    189c:	mov	r2, #0
    18a0:	str	r2, [r1, #4]
    18a4:	str	r0, [r1]
    18a8:	b	1970 <coda_cursor_read_uint64+0x214>
    18ac:	ldr	r0, [fp, #-8]
    18b0:	add	r1, sp, #12
    18b4:	bl	b34 <read_uint16>
    18b8:	cmp	r0, #0
    18bc:	beq	18cc <coda_cursor_read_uint64+0x170>
    18c0:	mvn	r0, #0
    18c4:	str	r0, [fp, #-4]
    18c8:	b	1978 <coda_cursor_read_uint64+0x21c>
    18cc:	ldrh	r0, [sp, #12]
    18d0:	ldr	r1, [fp, #-12]
    18d4:	mov	r2, #0
    18d8:	str	r2, [r1, #4]
    18dc:	str	r0, [r1]
    18e0:	b	1970 <coda_cursor_read_uint64+0x214>
    18e4:	ldr	r0, [fp, #-8]
    18e8:	add	r1, sp, #8
    18ec:	bl	11f8 <read_uint32>
    18f0:	cmp	r0, #0
    18f4:	beq	1904 <coda_cursor_read_uint64+0x1a8>
    18f8:	mvn	r0, #0
    18fc:	str	r0, [fp, #-4]
    1900:	b	1978 <coda_cursor_read_uint64+0x21c>
    1904:	ldr	r0, [sp, #8]
    1908:	ldr	r1, [fp, #-12]
    190c:	mov	r2, #0
    1910:	str	r2, [r1, #4]
    1914:	str	r0, [r1]
    1918:	b	1970 <coda_cursor_read_uint64+0x214>
    191c:	ldr	r0, [fp, #-8]
    1920:	ldr	r1, [fp, #-12]
    1924:	bl	1984 <read_uint64>
    1928:	cmp	r0, #0
    192c:	beq	193c <coda_cursor_read_uint64+0x1e0>
    1930:	mvn	r0, #0
    1934:	str	r0, [fp, #-4]
    1938:	b	1978 <coda_cursor_read_uint64+0x21c>
    193c:	b	1970 <coda_cursor_read_uint64+0x214>
    1940:	ldr	r0, [sp, #16]
    1944:	bl	0 <coda_type_get_native_type_name>
    1948:	mvn	lr, #104	; 0x68
    194c:	str	r0, [sp]
    1950:	mov	r0, lr
    1954:	movw	r1, #0
    1958:	movt	r1, #0
    195c:	ldr	r2, [sp]
    1960:	bl	0 <coda_set_error>
    1964:	mvn	r0, #0
    1968:	str	r0, [fp, #-4]
    196c:	b	1978 <coda_cursor_read_uint64+0x21c>
    1970:	movw	r0, #0
    1974:	str	r0, [fp, #-4]
    1978:	ldr	r0, [fp, #-4]
    197c:	mov	sp, fp
    1980:	pop	{fp, pc}

00001984 <read_uint64>:
    1984:	push	{fp, lr}
    1988:	mov	fp, sp
    198c:	sub	sp, sp, #16
    1990:	str	r0, [sp, #8]
    1994:	str	r1, [sp, #4]
    1998:	ldr	r0, [sp, #8]
    199c:	ldr	r1, [r0, #4]
    19a0:	add	r0, r0, r1, lsl #4
    19a4:	ldr	r0, [r0, #-8]
    19a8:	ldr	r0, [r0]
    19ac:	cmp	r0, #0
    19b0:	str	r0, [sp]
    19b4:	beq	1a10 <read_uint64+0x8c>
    19b8:	b	19bc <read_uint64+0x38>
    19bc:	ldr	r0, [sp]
    19c0:	cmp	r0, #1
    19c4:	beq	1a24 <read_uint64+0xa0>
    19c8:	b	19cc <read_uint64+0x48>
    19cc:	ldr	r0, [sp]
    19d0:	cmp	r0, #100	; 0x64
    19d4:	beq	1a38 <read_uint64+0xb4>
    19d8:	b	19dc <read_uint64+0x58>
    19dc:	ldr	r0, [sp]
    19e0:	cmp	r0, #101	; 0x65
    19e4:	beq	1a4c <read_uint64+0xc8>
    19e8:	b	19ec <read_uint64+0x68>
    19ec:	ldr	r0, [sp]
    19f0:	cmp	r0, #102	; 0x66
    19f4:	beq	1a64 <read_uint64+0xe0>
    19f8:	b	19fc <read_uint64+0x78>
    19fc:	ldr	r0, [sp]
    1a00:	sub	r1, r0, #103	; 0x67
    1a04:	cmp	r1, #3
    1a08:	bcc	1a7c <read_uint64+0xf8>
    1a0c:	b	1a80 <read_uint64+0xfc>
    1a10:	ldr	r0, [sp, #8]
    1a14:	ldr	r1, [sp, #4]
    1a18:	bl	0 <coda_ascii_cursor_read_uint64>
    1a1c:	str	r0, [fp, #-4]
    1a20:	b	1aa0 <read_uint64+0x11c>
    1a24:	ldr	r0, [sp, #8]
    1a28:	ldr	r1, [sp, #4]
    1a2c:	bl	0 <coda_bin_cursor_read_uint64>
    1a30:	str	r0, [fp, #-4]
    1a34:	b	1aa0 <read_uint64+0x11c>
    1a38:	ldr	r0, [sp, #8]
    1a3c:	ldr	r1, [sp, #4]
    1a40:	bl	0 <coda_mem_cursor_read_uint64>
    1a44:	str	r0, [fp, #-4]
    1a48:	b	1aa0 <read_uint64+0x11c>
    1a4c:	mvn	r0, #10
    1a50:	movw	r1, #0
    1a54:	bl	0 <coda_set_error>
    1a58:	mvn	r0, #0
    1a5c:	str	r0, [fp, #-4]
    1a60:	b	1aa0 <read_uint64+0x11c>
    1a64:	mvn	r0, #12
    1a68:	movw	r1, #0
    1a6c:	bl	0 <coda_set_error>
    1a70:	mvn	r0, #0
    1a74:	str	r0, [fp, #-4]
    1a78:	b	1aa0 <read_uint64+0x11c>
    1a7c:	b	1a80 <read_uint64+0xfc>
    1a80:	movw	r0, #0
    1a84:	movt	r0, #0
    1a88:	movw	r1, #0
    1a8c:	movt	r1, #0
    1a90:	movw	r2, #606	; 0x25e
    1a94:	movw	r3, #0
    1a98:	movt	r3, #0
    1a9c:	bl	0 <__assert_fail>
    1aa0:	ldr	r0, [fp, #-4]
    1aa4:	mov	sp, fp
    1aa8:	pop	{fp, pc}

00001aac <coda_cursor_read_float>:
    1aac:	push	{fp, lr}
    1ab0:	mov	fp, sp
    1ab4:	sub	sp, sp, #80	; 0x50
    1ab8:	str	r0, [fp, #-8]
    1abc:	str	r1, [fp, #-12]
    1ac0:	ldr	r0, [fp, #-8]
    1ac4:	movw	r1, #0
    1ac8:	cmp	r0, r1
    1acc:	beq	1b04 <coda_cursor_read_float+0x58>
    1ad0:	ldr	r0, [fp, #-8]
    1ad4:	ldr	r0, [r0, #4]
    1ad8:	cmp	r0, #0
    1adc:	ble	1b04 <coda_cursor_read_float+0x58>
    1ae0:	ldr	r0, [fp, #-8]
    1ae4:	add	r1, r0, #8
    1ae8:	ldr	r0, [r0, #4]
    1aec:	sub	r0, r0, #1
    1af0:	add	r0, r1, r0, lsl #4
    1af4:	ldr	r0, [r0]
    1af8:	movw	r1, #0
    1afc:	cmp	r0, r1
    1b00:	bne	1b2c <coda_cursor_read_float+0x80>
    1b04:	mvn	r0, #99	; 0x63
    1b08:	movw	r1, #0
    1b0c:	movt	r1, #0
    1b10:	movw	r2, #0
    1b14:	movt	r2, #0
    1b18:	movw	r3, #2375	; 0x947
    1b1c:	bl	0 <coda_set_error>
    1b20:	mvn	r0, #0
    1b24:	str	r0, [fp, #-4]
    1b28:	b	1e74 <coda_cursor_read_float+0x3c8>
    1b2c:	ldr	r0, [fp, #-12]
    1b30:	movw	r1, #0
    1b34:	cmp	r0, r1
    1b38:	bne	1b64 <coda_cursor_read_float+0xb8>
    1b3c:	mvn	r0, #99	; 0x63
    1b40:	movw	r1, #0
    1b44:	movt	r1, #0
    1b48:	movw	r2, #0
    1b4c:	movt	r2, #0
    1b50:	movw	r3, #2380	; 0x94c
    1b54:	bl	0 <coda_set_error>
    1b58:	mvn	r0, #0
    1b5c:	str	r0, [fp, #-4]
    1b60:	b	1e74 <coda_cursor_read_float+0x3c8>
    1b64:	ldr	r0, [fp, #-8]
    1b68:	sub	r1, fp, #16
    1b6c:	sub	r2, fp, #20
    1b70:	bl	1e80 <get_unconverted_read_type>
    1b74:	cmp	r0, #0
    1b78:	beq	1b88 <coda_cursor_read_float+0xdc>
    1b7c:	mvn	r0, #0
    1b80:	str	r0, [fp, #-4]
    1b84:	b	1e74 <coda_cursor_read_float+0x3c8>
    1b88:	ldr	r0, [fp, #-20]	; 0xffffffec
    1b8c:	movw	r1, #0
    1b90:	cmp	r0, r1
    1b94:	beq	1bd4 <coda_cursor_read_float+0x128>
    1b98:	ldr	r0, [fp, #-8]
    1b9c:	sub	r1, fp, #32
    1ba0:	bl	1f84 <coda_cursor_read_double>
    1ba4:	cmp	r0, #0
    1ba8:	beq	1bb8 <coda_cursor_read_float+0x10c>
    1bac:	mvn	r0, #0
    1bb0:	str	r0, [fp, #-4]
    1bb4:	b	1e74 <coda_cursor_read_float+0x3c8>
    1bb8:	vldr	d16, [fp, #-32]	; 0xffffffe0
    1bbc:	vcvt.f32.f64	s0, d16
    1bc0:	ldr	r0, [fp, #-12]
    1bc4:	vstr	s0, [r0]
    1bc8:	movw	r0, #0
    1bcc:	str	r0, [fp, #-4]
    1bd0:	b	1e74 <coda_cursor_read_float+0x3c8>
    1bd4:	ldr	r0, [fp, #-16]
    1bd8:	cmp	r0, #9
    1bdc:	str	r0, [sp, #4]
    1be0:	bhi	1e3c <coda_cursor_read_float+0x390>
    1be4:	add	r0, pc, #8
    1be8:	ldr	r1, [sp, #4]
    1bec:	ldr	r0, [r0, r1, lsl #2]
    1bf0:	mov	pc, r0
    1bf4:	.word	0x00001c1c
    1bf8:	.word	0x00001c54
    1bfc:	.word	0x00001c8c
    1c00:	.word	0x00001cc4
    1c04:	.word	0x00001cfc
    1c08:	.word	0x00001d34
    1c0c:	.word	0x00001d6c
    1c10:	.word	0x00001da8
    1c14:	.word	0x00001de4
    1c18:	.word	0x00001e08
    1c1c:	ldr	r0, [fp, #-8]
    1c20:	sub	r1, fp, #33	; 0x21
    1c24:	bl	254 <read_int8>
    1c28:	cmp	r0, #0
    1c2c:	beq	1c3c <coda_cursor_read_float+0x190>
    1c30:	mvn	r0, #0
    1c34:	str	r0, [fp, #-4]
    1c38:	b	1e74 <coda_cursor_read_float+0x3c8>
    1c3c:	ldrsb	r0, [fp, #-33]	; 0xffffffdf
    1c40:	vmov	s0, r0
    1c44:	vcvt.f32.s32	s0, s0
    1c48:	ldr	r0, [fp, #-12]
    1c4c:	vstr	s0, [r0]
    1c50:	b	1e6c <coda_cursor_read_float+0x3c0>
    1c54:	ldr	r0, [fp, #-8]
    1c58:	sub	r1, fp, #34	; 0x22
    1c5c:	bl	510 <read_uint8>
    1c60:	cmp	r0, #0
    1c64:	beq	1c74 <coda_cursor_read_float+0x1c8>
    1c68:	mvn	r0, #0
    1c6c:	str	r0, [fp, #-4]
    1c70:	b	1e74 <coda_cursor_read_float+0x3c8>
    1c74:	ldrb	r0, [fp, #-34]	; 0xffffffde
    1c78:	vmov	s0, r0
    1c7c:	vcvt.f32.u32	s0, s0
    1c80:	ldr	r0, [fp, #-12]
    1c84:	vstr	s0, [r0]
    1c88:	b	1e6c <coda_cursor_read_float+0x3c0>
    1c8c:	ldr	r0, [fp, #-8]
    1c90:	sub	r1, fp, #36	; 0x24
    1c94:	bl	830 <read_int16>
    1c98:	cmp	r0, #0
    1c9c:	beq	1cac <coda_cursor_read_float+0x200>
    1ca0:	mvn	r0, #0
    1ca4:	str	r0, [fp, #-4]
    1ca8:	b	1e74 <coda_cursor_read_float+0x3c8>
    1cac:	ldrsh	r0, [fp, #-36]	; 0xffffffdc
    1cb0:	vmov	s0, r0
    1cb4:	vcvt.f32.s32	s0, s0
    1cb8:	ldr	r0, [fp, #-12]
    1cbc:	vstr	s0, [r0]
    1cc0:	b	1e6c <coda_cursor_read_float+0x3c0>
    1cc4:	ldr	r0, [fp, #-8]
    1cc8:	sub	r1, fp, #38	; 0x26
    1ccc:	bl	b34 <read_uint16>
    1cd0:	cmp	r0, #0
    1cd4:	beq	1ce4 <coda_cursor_read_float+0x238>
    1cd8:	mvn	r0, #0
    1cdc:	str	r0, [fp, #-4]
    1ce0:	b	1e74 <coda_cursor_read_float+0x3c8>
    1ce4:	ldrh	r0, [fp, #-38]	; 0xffffffda
    1ce8:	vmov	s0, r0
    1cec:	vcvt.f32.u32	s0, s0
    1cf0:	ldr	r0, [fp, #-12]
    1cf4:	vstr	s0, [r0]
    1cf8:	b	1e6c <coda_cursor_read_float+0x3c0>
    1cfc:	ldr	r0, [fp, #-8]
    1d00:	add	r1, sp, #36	; 0x24
    1d04:	bl	eb4 <read_int32>
    1d08:	cmp	r0, #0
    1d0c:	beq	1d1c <coda_cursor_read_float+0x270>
    1d10:	mvn	r0, #0
    1d14:	str	r0, [fp, #-4]
    1d18:	b	1e74 <coda_cursor_read_float+0x3c8>
    1d1c:	ldr	r0, [sp, #36]	; 0x24
    1d20:	vmov	s0, r0
    1d24:	vcvt.f32.s32	s0, s0
    1d28:	ldr	r0, [fp, #-12]
    1d2c:	vstr	s0, [r0]
    1d30:	b	1e6c <coda_cursor_read_float+0x3c0>
    1d34:	ldr	r0, [fp, #-8]
    1d38:	add	r1, sp, #32
    1d3c:	bl	11f8 <read_uint32>
    1d40:	cmp	r0, #0
    1d44:	beq	1d54 <coda_cursor_read_float+0x2a8>
    1d48:	mvn	r0, #0
    1d4c:	str	r0, [fp, #-4]
    1d50:	b	1e74 <coda_cursor_read_float+0x3c8>
    1d54:	ldr	r0, [sp, #32]
    1d58:	vmov	s0, r0
    1d5c:	vcvt.f32.u32	s0, s0
    1d60:	ldr	r0, [fp, #-12]
    1d64:	vstr	s0, [r0]
    1d68:	b	1e6c <coda_cursor_read_float+0x3c0>
    1d6c:	ldr	r0, [fp, #-8]
    1d70:	add	r1, sp, #24
    1d74:	bl	1610 <read_int64>
    1d78:	cmp	r0, #0
    1d7c:	beq	1d8c <coda_cursor_read_float+0x2e0>
    1d80:	mvn	r0, #0
    1d84:	str	r0, [fp, #-4]
    1d88:	b	1e74 <coda_cursor_read_float+0x3c8>
    1d8c:	ldr	r0, [sp, #24]
    1d90:	ldr	r1, [sp, #28]
    1d94:	bl	0 <__aeabi_l2f>
    1d98:	vmov	s0, r0
    1d9c:	ldr	r0, [fp, #-12]
    1da0:	vstr	s0, [r0]
    1da4:	b	1e6c <coda_cursor_read_float+0x3c0>
    1da8:	ldr	r0, [fp, #-8]
    1dac:	add	r1, sp, #16
    1db0:	bl	1984 <read_uint64>
    1db4:	cmp	r0, #0
    1db8:	beq	1dc8 <coda_cursor_read_float+0x31c>
    1dbc:	mvn	r0, #0
    1dc0:	str	r0, [fp, #-4]
    1dc4:	b	1e74 <coda_cursor_read_float+0x3c8>
    1dc8:	ldr	r0, [sp, #16]
    1dcc:	ldr	r1, [sp, #20]
    1dd0:	bl	0 <__aeabi_l2f>
    1dd4:	vmov	s0, r0
    1dd8:	ldr	r0, [fp, #-12]
    1ddc:	vstr	s0, [r0]
    1de0:	b	1e6c <coda_cursor_read_float+0x3c0>
    1de4:	ldr	r0, [fp, #-8]
    1de8:	ldr	r1, [fp, #-12]
    1dec:	bl	2380 <read_float>
    1df0:	cmp	r0, #0
    1df4:	beq	1e04 <coda_cursor_read_float+0x358>
    1df8:	mvn	r0, #0
    1dfc:	str	r0, [fp, #-4]
    1e00:	b	1e74 <coda_cursor_read_float+0x3c8>
    1e04:	b	1e6c <coda_cursor_read_float+0x3c0>
    1e08:	ldr	r0, [fp, #-8]
    1e0c:	add	r1, sp, #8
    1e10:	bl	24fc <read_double>
    1e14:	cmp	r0, #0
    1e18:	beq	1e28 <coda_cursor_read_float+0x37c>
    1e1c:	mvn	r0, #0
    1e20:	str	r0, [fp, #-4]
    1e24:	b	1e74 <coda_cursor_read_float+0x3c8>
    1e28:	vldr	d16, [sp, #8]
    1e2c:	vcvt.f32.f64	s0, d16
    1e30:	ldr	r0, [fp, #-12]
    1e34:	vstr	s0, [r0]
    1e38:	b	1e6c <coda_cursor_read_float+0x3c0>
    1e3c:	ldr	r0, [fp, #-16]
    1e40:	bl	0 <coda_type_get_native_type_name>
    1e44:	mvn	lr, #104	; 0x68
    1e48:	str	r0, [sp]
    1e4c:	mov	r0, lr
    1e50:	movw	r1, #0
    1e54:	movt	r1, #0
    1e58:	ldr	r2, [sp]
    1e5c:	bl	0 <coda_set_error>
    1e60:	mvn	r0, #0
    1e64:	str	r0, [fp, #-4]
    1e68:	b	1e74 <coda_cursor_read_float+0x3c8>
    1e6c:	movw	r0, #0
    1e70:	str	r0, [fp, #-4]
    1e74:	ldr	r0, [fp, #-4]
    1e78:	mov	sp, fp
    1e7c:	pop	{fp, pc}

00001e80 <get_unconverted_read_type>:
    1e80:	push	{fp, lr}
    1e84:	mov	fp, sp
    1e88:	sub	sp, sp, #24
    1e8c:	str	r0, [fp, #-4]
    1e90:	str	r1, [fp, #-8]
    1e94:	str	r2, [sp, #12]
    1e98:	ldr	r0, [fp, #-4]
    1e9c:	add	r1, r0, #8
    1ea0:	ldr	r0, [r0, #4]
    1ea4:	sub	r0, r0, #1
    1ea8:	add	r0, r1, r0, lsl #4
    1eac:	ldr	r0, [r0]
    1eb0:	ldr	r0, [r0]
    1eb4:	cmp	r0, #100	; 0x64
    1eb8:	bcs	1edc <get_unconverted_read_type+0x5c>
    1ebc:	ldr	r0, [fp, #-4]
    1ec0:	add	r1, r0, #8
    1ec4:	ldr	r0, [r0, #4]
    1ec8:	sub	r0, r0, #1
    1ecc:	add	r0, r1, r0, lsl #4
    1ed0:	ldr	r0, [r0]
    1ed4:	str	r0, [sp, #4]
    1ed8:	b	1efc <get_unconverted_read_type+0x7c>
    1edc:	ldr	r0, [fp, #-4]
    1ee0:	add	r1, r0, #8
    1ee4:	ldr	r0, [r0, #4]
    1ee8:	sub	r0, r0, #1
    1eec:	add	r0, r1, r0, lsl #4
    1ef0:	ldr	r0, [r0]
    1ef4:	ldr	r0, [r0, #4]
    1ef8:	str	r0, [sp, #4]
    1efc:	ldr	r0, [sp, #4]
    1f00:	str	r0, [sp, #8]
    1f04:	ldr	r0, [sp, #8]
    1f08:	ldr	r0, [r0, #12]
    1f0c:	ldr	r1, [fp, #-8]
    1f10:	str	r0, [r1]
    1f14:	ldr	r0, [sp, #8]
    1f18:	ldr	r0, [r0, #8]
    1f1c:	cmp	r0, #2
    1f20:	beq	1f34 <get_unconverted_read_type+0xb4>
    1f24:	ldr	r0, [sp, #8]
    1f28:	ldr	r0, [r0, #8]
    1f2c:	cmp	r0, #3
    1f30:	bne	1f68 <get_unconverted_read_type+0xe8>
    1f34:	ldr	r0, [pc, #68]	; 1f80 <get_unconverted_read_type+0x100>
    1f38:	ldr	r0, [pc, r0]
    1f3c:	str	r0, [sp]
    1f40:	bl	0 <__aeabi_read_tp>
    1f44:	ldr	ip, [sp]
    1f48:	ldr	r0, [r0, ip]
    1f4c:	cmp	r0, #0
    1f50:	beq	1f68 <get_unconverted_read_type+0xe8>
    1f54:	ldr	r0, [sp, #8]
    1f58:	ldr	r0, [r0, #48]	; 0x30
    1f5c:	ldr	r1, [sp, #12]
    1f60:	str	r0, [r1]
    1f64:	b	1f74 <get_unconverted_read_type+0xf4>
    1f68:	ldr	r0, [sp, #12]
    1f6c:	movw	r1, #0
    1f70:	str	r1, [r0]
    1f74:	movw	r0, #0
    1f78:	mov	sp, fp
    1f7c:	pop	{fp, pc}
    1f80:	.word	0x00000040

00001f84 <coda_cursor_read_double>:
    1f84:	push	{fp, lr}
    1f88:	mov	fp, sp
    1f8c:	sub	sp, sp, #72	; 0x48
    1f90:	str	r0, [fp, #-8]
    1f94:	str	r1, [fp, #-12]
    1f98:	ldr	r0, [fp, #-8]
    1f9c:	movw	r1, #0
    1fa0:	cmp	r0, r1
    1fa4:	beq	1fdc <coda_cursor_read_double+0x58>
    1fa8:	ldr	r0, [fp, #-8]
    1fac:	ldr	r0, [r0, #4]
    1fb0:	cmp	r0, #0
    1fb4:	ble	1fdc <coda_cursor_read_double+0x58>
    1fb8:	ldr	r0, [fp, #-8]
    1fbc:	add	r1, r0, #8
    1fc0:	ldr	r0, [r0, #4]
    1fc4:	sub	r0, r0, #1
    1fc8:	add	r0, r1, r0, lsl #4
    1fcc:	ldr	r0, [r0]
    1fd0:	movw	r1, #0
    1fd4:	cmp	r0, r1
    1fd8:	bne	2004 <coda_cursor_read_double+0x80>
    1fdc:	mvn	r0, #99	; 0x63
    1fe0:	movw	r1, #0
    1fe4:	movt	r1, #0
    1fe8:	movw	r2, #0
    1fec:	movt	r2, #0
    1ff0:	movw	r3, #2543	; 0x9ef
    1ff4:	bl	0 <coda_set_error>
    1ff8:	mvn	r0, #0
    1ffc:	str	r0, [fp, #-4]
    2000:	b	2374 <coda_cursor_read_double+0x3f0>
    2004:	ldr	r0, [fp, #-12]
    2008:	movw	r1, #0
    200c:	cmp	r0, r1
    2010:	bne	203c <coda_cursor_read_double+0xb8>
    2014:	mvn	r0, #99	; 0x63
    2018:	movw	r1, #0
    201c:	movt	r1, #0
    2020:	movw	r2, #0
    2024:	movt	r2, #0
    2028:	movw	r3, #2548	; 0x9f4
    202c:	bl	0 <coda_set_error>
    2030:	mvn	r0, #0
    2034:	str	r0, [fp, #-4]
    2038:	b	2374 <coda_cursor_read_double+0x3f0>
    203c:	ldr	r0, [fp, #-8]
    2040:	sub	r1, fp, #16
    2044:	sub	r2, fp, #20
    2048:	bl	1e80 <get_unconverted_read_type>
    204c:	cmp	r0, #0
    2050:	beq	2060 <coda_cursor_read_double+0xdc>
    2054:	mvn	r0, #0
    2058:	str	r0, [fp, #-4]
    205c:	b	2374 <coda_cursor_read_double+0x3f0>
    2060:	ldr	r0, [fp, #-16]
    2064:	cmp	r0, #9
    2068:	str	r0, [sp, #8]
    206c:	bhi	22c8 <coda_cursor_read_double+0x344>
    2070:	add	r0, pc, #8
    2074:	ldr	r1, [sp, #8]
    2078:	ldr	r0, [r0, r1, lsl #2]
    207c:	mov	pc, r0
    2080:	.word	0x000020a8
    2084:	.word	0x000020e0
    2088:	.word	0x00002118
    208c:	.word	0x00002150
    2090:	.word	0x00002188
    2094:	.word	0x000021c0
    2098:	.word	0x000021f8
    209c:	.word	0x00002234
    20a0:	.word	0x00002270
    20a4:	.word	0x000022a4
    20a8:	ldr	r0, [fp, #-8]
    20ac:	sub	r1, fp, #21
    20b0:	bl	254 <read_int8>
    20b4:	cmp	r0, #0
    20b8:	beq	20c8 <coda_cursor_read_double+0x144>
    20bc:	mvn	r0, #0
    20c0:	str	r0, [fp, #-4]
    20c4:	b	2374 <coda_cursor_read_double+0x3f0>
    20c8:	ldrsb	r0, [fp, #-21]	; 0xffffffeb
    20cc:	vmov	s0, r0
    20d0:	vcvt.f64.s32	d16, s0
    20d4:	ldr	r0, [fp, #-12]
    20d8:	vstr	d16, [r0]
    20dc:	b	22f8 <coda_cursor_read_double+0x374>
    20e0:	ldr	r0, [fp, #-8]
    20e4:	sub	r1, fp, #22
    20e8:	bl	510 <read_uint8>
    20ec:	cmp	r0, #0
    20f0:	beq	2100 <coda_cursor_read_double+0x17c>
    20f4:	mvn	r0, #0
    20f8:	str	r0, [fp, #-4]
    20fc:	b	2374 <coda_cursor_read_double+0x3f0>
    2100:	ldrb	r0, [fp, #-22]	; 0xffffffea
    2104:	vmov	s0, r0
    2108:	vcvt.f64.u32	d16, s0
    210c:	ldr	r0, [fp, #-12]
    2110:	vstr	d16, [r0]
    2114:	b	22f8 <coda_cursor_read_double+0x374>
    2118:	ldr	r0, [fp, #-8]
    211c:	sub	r1, fp, #24
    2120:	bl	830 <read_int16>
    2124:	cmp	r0, #0
    2128:	beq	2138 <coda_cursor_read_double+0x1b4>
    212c:	mvn	r0, #0
    2130:	str	r0, [fp, #-4]
    2134:	b	2374 <coda_cursor_read_double+0x3f0>
    2138:	ldrsh	r0, [fp, #-24]	; 0xffffffe8
    213c:	vmov	s0, r0
    2140:	vcvt.f64.s32	d16, s0
    2144:	ldr	r0, [fp, #-12]
    2148:	vstr	d16, [r0]
    214c:	b	22f8 <coda_cursor_read_double+0x374>
    2150:	ldr	r0, [fp, #-8]
    2154:	sub	r1, fp, #26
    2158:	bl	b34 <read_uint16>
    215c:	cmp	r0, #0
    2160:	beq	2170 <coda_cursor_read_double+0x1ec>
    2164:	mvn	r0, #0
    2168:	str	r0, [fp, #-4]
    216c:	b	2374 <coda_cursor_read_double+0x3f0>
    2170:	ldrh	r0, [fp, #-26]	; 0xffffffe6
    2174:	vmov	s0, r0
    2178:	vcvt.f64.u32	d16, s0
    217c:	ldr	r0, [fp, #-12]
    2180:	vstr	d16, [r0]
    2184:	b	22f8 <coda_cursor_read_double+0x374>
    2188:	ldr	r0, [fp, #-8]
    218c:	sub	r1, fp, #32
    2190:	bl	eb4 <read_int32>
    2194:	cmp	r0, #0
    2198:	beq	21a8 <coda_cursor_read_double+0x224>
    219c:	mvn	r0, #0
    21a0:	str	r0, [fp, #-4]
    21a4:	b	2374 <coda_cursor_read_double+0x3f0>
    21a8:	ldr	r0, [fp, #-32]	; 0xffffffe0
    21ac:	vmov	s0, r0
    21b0:	vcvt.f64.s32	d16, s0
    21b4:	ldr	r0, [fp, #-12]
    21b8:	vstr	d16, [r0]
    21bc:	b	22f8 <coda_cursor_read_double+0x374>
    21c0:	ldr	r0, [fp, #-8]
    21c4:	add	r1, sp, #36	; 0x24
    21c8:	bl	11f8 <read_uint32>
    21cc:	cmp	r0, #0
    21d0:	beq	21e0 <coda_cursor_read_double+0x25c>
    21d4:	mvn	r0, #0
    21d8:	str	r0, [fp, #-4]
    21dc:	b	2374 <coda_cursor_read_double+0x3f0>
    21e0:	ldr	r0, [sp, #36]	; 0x24
    21e4:	vmov	s0, r0
    21e8:	vcvt.f64.u32	d16, s0
    21ec:	ldr	r0, [fp, #-12]
    21f0:	vstr	d16, [r0]
    21f4:	b	22f8 <coda_cursor_read_double+0x374>
    21f8:	ldr	r0, [fp, #-8]
    21fc:	add	r1, sp, #24
    2200:	bl	1610 <read_int64>
    2204:	cmp	r0, #0
    2208:	beq	2218 <coda_cursor_read_double+0x294>
    220c:	mvn	r0, #0
    2210:	str	r0, [fp, #-4]
    2214:	b	2374 <coda_cursor_read_double+0x3f0>
    2218:	ldr	r0, [sp, #24]
    221c:	ldr	r1, [sp, #28]
    2220:	bl	0 <__aeabi_l2d>
    2224:	vmov	d16, r0, r1
    2228:	ldr	r0, [fp, #-12]
    222c:	vstr	d16, [r0]
    2230:	b	22f8 <coda_cursor_read_double+0x374>
    2234:	ldr	r0, [fp, #-8]
    2238:	add	r1, sp, #16
    223c:	bl	1984 <read_uint64>
    2240:	cmp	r0, #0
    2244:	beq	2254 <coda_cursor_read_double+0x2d0>
    2248:	mvn	r0, #0
    224c:	str	r0, [fp, #-4]
    2250:	b	2374 <coda_cursor_read_double+0x3f0>
    2254:	ldr	r0, [sp, #16]
    2258:	ldr	r1, [sp, #20]
    225c:	bl	0 <__aeabi_l2d>
    2260:	vmov	d16, r0, r1
    2264:	ldr	r0, [fp, #-12]
    2268:	vstr	d16, [r0]
    226c:	b	22f8 <coda_cursor_read_double+0x374>
    2270:	ldr	r0, [fp, #-8]
    2274:	add	r1, sp, #12
    2278:	bl	2380 <read_float>
    227c:	cmp	r0, #0
    2280:	beq	2290 <coda_cursor_read_double+0x30c>
    2284:	mvn	r0, #0
    2288:	str	r0, [fp, #-4]
    228c:	b	2374 <coda_cursor_read_double+0x3f0>
    2290:	vldr	s0, [sp, #12]
    2294:	vcvt.f64.f32	d16, s0
    2298:	ldr	r0, [fp, #-12]
    229c:	vstr	d16, [r0]
    22a0:	b	22f8 <coda_cursor_read_double+0x374>
    22a4:	ldr	r0, [fp, #-8]
    22a8:	ldr	r1, [fp, #-12]
    22ac:	bl	24fc <read_double>
    22b0:	cmp	r0, #0
    22b4:	beq	22c4 <coda_cursor_read_double+0x340>
    22b8:	mvn	r0, #0
    22bc:	str	r0, [fp, #-4]
    22c0:	b	2374 <coda_cursor_read_double+0x3f0>
    22c4:	b	22f8 <coda_cursor_read_double+0x374>
    22c8:	ldr	r0, [fp, #-16]
    22cc:	bl	0 <coda_type_get_native_type_name>
    22d0:	mvn	lr, #104	; 0x68
    22d4:	str	r0, [sp, #4]
    22d8:	mov	r0, lr
    22dc:	movw	r1, #0
    22e0:	movt	r1, #0
    22e4:	ldr	r2, [sp, #4]
    22e8:	bl	0 <coda_set_error>
    22ec:	mvn	r0, #0
    22f0:	str	r0, [fp, #-4]
    22f4:	b	2374 <coda_cursor_read_double+0x3f0>
    22f8:	ldr	r0, [fp, #-20]	; 0xffffffec
    22fc:	movw	r1, #0
    2300:	cmp	r0, r1
    2304:	beq	236c <coda_cursor_read_double+0x3e8>
    2308:	ldr	r0, [fp, #-12]
    230c:	vldr	d16, [r0]
    2310:	ldr	r0, [fp, #-20]	; 0xffffffec
    2314:	vldr	d17, [r0, #24]
    2318:	vcmp.f64	d16, d17
    231c:	vmrs	APSR_nzcv, fpscr
    2320:	bne	2334 <coda_cursor_read_double+0x3b0>
    2324:	bl	0 <coda_NaN>
    2328:	ldr	lr, [fp, #-12]
    232c:	vstr	d0, [lr]
    2330:	b	2368 <coda_cursor_read_double+0x3e4>
    2334:	ldr	r0, [fp, #-12]
    2338:	vldr	d16, [r0]
    233c:	ldr	r0, [fp, #-20]	; 0xffffffec
    2340:	vldr	d17, [r0]
    2344:	vmul.f64	d16, d16, d17
    2348:	ldr	r0, [fp, #-20]	; 0xffffffec
    234c:	vldr	d17, [r0, #8]
    2350:	vdiv.f64	d16, d16, d17
    2354:	ldr	r0, [fp, #-20]	; 0xffffffec
    2358:	vldr	d17, [r0, #16]
    235c:	vadd.f64	d16, d16, d17
    2360:	ldr	r0, [fp, #-12]
    2364:	vstr	d16, [r0]
    2368:	b	236c <coda_cursor_read_double+0x3e8>
    236c:	movw	r0, #0
    2370:	str	r0, [fp, #-4]
    2374:	ldr	r0, [fp, #-4]
    2378:	mov	sp, fp
    237c:	pop	{fp, pc}

00002380 <read_float>:
    2380:	push	{fp, lr}
    2384:	mov	fp, sp
    2388:	sub	sp, sp, #16
    238c:	str	r0, [sp, #8]
    2390:	str	r1, [sp, #4]
    2394:	ldr	r0, [sp, #8]
    2398:	ldr	r1, [r0, #4]
    239c:	add	r0, r0, r1, lsl #4
    23a0:	ldr	r0, [r0, #-8]
    23a4:	ldr	r0, [r0]
    23a8:	cmp	r0, #0
    23ac:	str	r0, [sp]
    23b0:	beq	2428 <read_float+0xa8>
    23b4:	b	23b8 <read_float+0x38>
    23b8:	ldr	r0, [sp]
    23bc:	cmp	r0, #1
    23c0:	beq	243c <read_float+0xbc>
    23c4:	b	23c8 <read_float+0x48>
    23c8:	ldr	r0, [sp]
    23cc:	cmp	r0, #100	; 0x64
    23d0:	beq	2450 <read_float+0xd0>
    23d4:	b	23d8 <read_float+0x58>
    23d8:	ldr	r0, [sp]
    23dc:	cmp	r0, #101	; 0x65
    23e0:	beq	2464 <read_float+0xe4>
    23e4:	b	23e8 <read_float+0x68>
    23e8:	ldr	r0, [sp]
    23ec:	cmp	r0, #102	; 0x66
    23f0:	beq	247c <read_float+0xfc>
    23f4:	b	23f8 <read_float+0x78>
    23f8:	ldr	r0, [sp]
    23fc:	cmp	r0, #103	; 0x67
    2400:	beq	2494 <read_float+0x114>
    2404:	b	2408 <read_float+0x88>
    2408:	ldr	r0, [sp]
    240c:	cmp	r0, #104	; 0x68
    2410:	beq	24a8 <read_float+0x128>
    2414:	b	2418 <read_float+0x98>
    2418:	ldr	r0, [sp]
    241c:	cmp	r0, #105	; 0x69
    2420:	beq	24bc <read_float+0x13c>
    2424:	b	24d0 <read_float+0x150>
    2428:	ldr	r0, [sp, #8]
    242c:	ldr	r1, [sp, #4]
    2430:	bl	0 <coda_ascii_cursor_read_float>
    2434:	str	r0, [fp, #-4]
    2438:	b	24f0 <read_float+0x170>
    243c:	ldr	r0, [sp, #8]
    2440:	ldr	r1, [sp, #4]
    2444:	bl	0 <coda_bin_cursor_read_float>
    2448:	str	r0, [fp, #-4]
    244c:	b	24f0 <read_float+0x170>
    2450:	ldr	r0, [sp, #8]
    2454:	ldr	r1, [sp, #4]
    2458:	bl	0 <coda_mem_cursor_read_float>
    245c:	str	r0, [fp, #-4]
    2460:	b	24f0 <read_float+0x170>
    2464:	mvn	r0, #10
    2468:	movw	r1, #0
    246c:	bl	0 <coda_set_error>
    2470:	mvn	r0, #0
    2474:	str	r0, [fp, #-4]
    2478:	b	24f0 <read_float+0x170>
    247c:	mvn	r0, #12
    2480:	movw	r1, #0
    2484:	bl	0 <coda_set_error>
    2488:	mvn	r0, #0
    248c:	str	r0, [fp, #-4]
    2490:	b	24f0 <read_float+0x170>
    2494:	ldr	r0, [sp, #8]
    2498:	ldr	r1, [sp, #4]
    249c:	bl	0 <coda_cdf_cursor_read_float>
    24a0:	str	r0, [fp, #-4]
    24a4:	b	24f0 <read_float+0x170>
    24a8:	ldr	r0, [sp, #8]
    24ac:	ldr	r1, [sp, #4]
    24b0:	bl	0 <coda_netcdf_cursor_read_float>
    24b4:	str	r0, [fp, #-4]
    24b8:	b	24f0 <read_float+0x170>
    24bc:	ldr	r0, [sp, #8]
    24c0:	ldr	r1, [sp, #4]
    24c4:	bl	0 <coda_grib_cursor_read_float>
    24c8:	str	r0, [fp, #-4]
    24cc:	b	24f0 <read_float+0x170>
    24d0:	movw	r0, #0
    24d4:	movt	r0, #0
    24d8:	movw	r1, #0
    24dc:	movt	r1, #0
    24e0:	movw	r2, #642	; 0x282
    24e4:	movw	r3, #0
    24e8:	movt	r3, #0
    24ec:	bl	0 <__assert_fail>
    24f0:	ldr	r0, [fp, #-4]
    24f4:	mov	sp, fp
    24f8:	pop	{fp, pc}

000024fc <read_double>:
    24fc:	push	{fp, lr}
    2500:	mov	fp, sp
    2504:	sub	sp, sp, #24
    2508:	str	r0, [fp, #-8]
    250c:	str	r1, [sp, #12]
    2510:	ldr	r0, [fp, #-8]
    2514:	add	r1, r0, #8
    2518:	ldr	r0, [r0, #4]
    251c:	sub	r0, r0, #1
    2520:	add	r0, r1, r0, lsl #4
    2524:	ldr	r0, [r0]
    2528:	ldr	r0, [r0]
    252c:	cmp	r0, #100	; 0x64
    2530:	bcs	2554 <read_double+0x58>
    2534:	ldr	r0, [fp, #-8]
    2538:	add	r1, r0, #8
    253c:	ldr	r0, [r0, #4]
    2540:	sub	r0, r0, #1
    2544:	add	r0, r1, r0, lsl #4
    2548:	ldr	r0, [r0]
    254c:	str	r0, [sp, #4]
    2550:	b	2574 <read_double+0x78>
    2554:	ldr	r0, [fp, #-8]
    2558:	add	r1, r0, #8
    255c:	ldr	r0, [r0, #4]
    2560:	sub	r0, r0, #1
    2564:	add	r0, r1, r0, lsl #4
    2568:	ldr	r0, [r0]
    256c:	ldr	r0, [r0, #4]
    2570:	str	r0, [sp, #4]
    2574:	ldr	r0, [sp, #4]
    2578:	str	r0, [sp, #8]
    257c:	ldr	r0, [sp, #8]
    2580:	ldr	r0, [r0, #8]
    2584:	cmp	r0, #6
    2588:	bne	25d8 <read_double+0xdc>
    258c:	ldr	r0, [sp, #8]
    2590:	ldr	r0, [r0, #40]	; 0x28
    2594:	cmp	r0, #2
    2598:	bne	25b0 <read_double+0xb4>
    259c:	ldr	r0, [fp, #-8]
    25a0:	ldr	r1, [sp, #12]
    25a4:	bl	c8d4 <read_time>
    25a8:	str	r0, [fp, #-4]
    25ac:	b	2724 <read_double+0x228>
    25b0:	ldr	r0, [sp, #8]
    25b4:	ldr	r0, [r0, #40]	; 0x28
    25b8:	cmp	r0, #1
    25bc:	bne	25d4 <read_double+0xd8>
    25c0:	ldr	r0, [fp, #-8]
    25c4:	ldr	r1, [sp, #12]
    25c8:	bl	c9a8 <read_vsf_integer>
    25cc:	str	r0, [fp, #-4]
    25d0:	b	2724 <read_double+0x228>
    25d4:	b	25d8 <read_double+0xdc>
    25d8:	ldr	r0, [fp, #-8]
    25dc:	ldr	r1, [r0, #4]
    25e0:	add	r0, r0, r1, lsl #4
    25e4:	ldr	r0, [r0, #-8]
    25e8:	ldr	r0, [r0]
    25ec:	cmp	r0, #0
    25f0:	str	r0, [sp]
    25f4:	beq	266c <read_double+0x170>
    25f8:	b	25fc <read_double+0x100>
    25fc:	ldr	r0, [sp]
    2600:	cmp	r0, #1
    2604:	beq	2680 <read_double+0x184>
    2608:	b	260c <read_double+0x110>
    260c:	ldr	r0, [sp]
    2610:	cmp	r0, #100	; 0x64
    2614:	beq	2694 <read_double+0x198>
    2618:	b	261c <read_double+0x120>
    261c:	ldr	r0, [sp]
    2620:	cmp	r0, #101	; 0x65
    2624:	beq	26a8 <read_double+0x1ac>
    2628:	b	262c <read_double+0x130>
    262c:	ldr	r0, [sp]
    2630:	cmp	r0, #102	; 0x66
    2634:	beq	26c0 <read_double+0x1c4>
    2638:	b	263c <read_double+0x140>
    263c:	ldr	r0, [sp]
    2640:	cmp	r0, #103	; 0x67
    2644:	beq	26d8 <read_double+0x1dc>
    2648:	b	264c <read_double+0x150>
    264c:	ldr	r0, [sp]
    2650:	cmp	r0, #104	; 0x68
    2654:	beq	26ec <read_double+0x1f0>
    2658:	b	265c <read_double+0x160>
    265c:	ldr	r0, [sp]
    2660:	cmp	r0, #105	; 0x69
    2664:	beq	2700 <read_double+0x204>
    2668:	b	2704 <read_double+0x208>
    266c:	ldr	r0, [fp, #-8]
    2670:	ldr	r1, [sp, #12]
    2674:	bl	0 <coda_ascii_cursor_read_double>
    2678:	str	r0, [fp, #-4]
    267c:	b	2724 <read_double+0x228>
    2680:	ldr	r0, [fp, #-8]
    2684:	ldr	r1, [sp, #12]
    2688:	bl	0 <coda_bin_cursor_read_double>
    268c:	str	r0, [fp, #-4]
    2690:	b	2724 <read_double+0x228>
    2694:	ldr	r0, [fp, #-8]
    2698:	ldr	r1, [sp, #12]
    269c:	bl	0 <coda_mem_cursor_read_double>
    26a0:	str	r0, [fp, #-4]
    26a4:	b	2724 <read_double+0x228>
    26a8:	mvn	r0, #10
    26ac:	movw	r1, #0
    26b0:	bl	0 <coda_set_error>
    26b4:	mvn	r0, #0
    26b8:	str	r0, [fp, #-4]
    26bc:	b	2724 <read_double+0x228>
    26c0:	mvn	r0, #12
    26c4:	movw	r1, #0
    26c8:	bl	0 <coda_set_error>
    26cc:	mvn	r0, #0
    26d0:	str	r0, [fp, #-4]
    26d4:	b	2724 <read_double+0x228>
    26d8:	ldr	r0, [fp, #-8]
    26dc:	ldr	r1, [sp, #12]
    26e0:	bl	0 <coda_cdf_cursor_read_double>
    26e4:	str	r0, [fp, #-4]
    26e8:	b	2724 <read_double+0x228>
    26ec:	ldr	r0, [fp, #-8]
    26f0:	ldr	r1, [sp, #12]
    26f4:	bl	0 <coda_netcdf_cursor_read_double>
    26f8:	str	r0, [fp, #-4]
    26fc:	b	2724 <read_double+0x228>
    2700:	b	2704 <read_double+0x208>
    2704:	movw	r0, #0
    2708:	movt	r0, #0
    270c:	movw	r1, #0
    2710:	movt	r1, #0
    2714:	movw	r2, #692	; 0x2b4
    2718:	movw	r3, #0
    271c:	movt	r3, #0
    2720:	bl	0 <__assert_fail>
    2724:	ldr	r0, [fp, #-4]
    2728:	mov	sp, fp
    272c:	pop	{fp, pc}

00002730 <coda_cursor_read_char>:
    2730:	push	{fp, lr}
    2734:	mov	fp, sp
    2738:	sub	sp, sp, #24
    273c:	str	r0, [fp, #-8]
    2740:	str	r1, [sp, #12]
    2744:	ldr	r0, [fp, #-8]
    2748:	movw	r1, #0
    274c:	cmp	r0, r1
    2750:	beq	2788 <coda_cursor_read_char+0x58>
    2754:	ldr	r0, [fp, #-8]
    2758:	ldr	r0, [r0, #4]
    275c:	cmp	r0, #0
    2760:	ble	2788 <coda_cursor_read_char+0x58>
    2764:	ldr	r0, [fp, #-8]
    2768:	add	r1, r0, #8
    276c:	ldr	r0, [r0, #4]
    2770:	sub	r0, r0, #1
    2774:	add	r0, r1, r0, lsl #4
    2778:	ldr	r0, [r0]
    277c:	movw	r1, #0
    2780:	cmp	r0, r1
    2784:	bne	27b0 <coda_cursor_read_char+0x80>
    2788:	mvn	r0, #99	; 0x63
    278c:	movw	r1, #0
    2790:	movt	r1, #0
    2794:	movw	r2, #0
    2798:	movt	r2, #0
    279c:	movw	r3, #2698	; 0xa8a
    27a0:	bl	0 <coda_set_error>
    27a4:	mvn	r0, #0
    27a8:	str	r0, [fp, #-4]
    27ac:	b	2874 <coda_cursor_read_char+0x144>
    27b0:	ldr	r0, [sp, #12]
    27b4:	movw	r1, #0
    27b8:	cmp	r0, r1
    27bc:	bne	27e8 <coda_cursor_read_char+0xb8>
    27c0:	mvn	r0, #99	; 0x63
    27c4:	movw	r1, #0
    27c8:	movt	r1, #0
    27cc:	movw	r2, #0
    27d0:	movt	r2, #0
    27d4:	movw	r3, #2703	; 0xa8f
    27d8:	bl	0 <coda_set_error>
    27dc:	mvn	r0, #0
    27e0:	str	r0, [fp, #-4]
    27e4:	b	2874 <coda_cursor_read_char+0x144>
    27e8:	ldr	r0, [fp, #-8]
    27ec:	add	r1, sp, #8
    27f0:	bl	150 <get_read_type>
    27f4:	cmp	r0, #0
    27f8:	beq	2808 <coda_cursor_read_char+0xd8>
    27fc:	mvn	r0, #0
    2800:	str	r0, [fp, #-4]
    2804:	b	2874 <coda_cursor_read_char+0x144>
    2808:	ldr	r0, [sp, #8]
    280c:	cmp	r0, #10
    2810:	bne	283c <coda_cursor_read_char+0x10c>
    2814:	b	2818 <coda_cursor_read_char+0xe8>
    2818:	ldr	r0, [fp, #-8]
    281c:	ldr	r1, [sp, #12]
    2820:	bl	2880 <read_char>
    2824:	cmp	r0, #0
    2828:	beq	2838 <coda_cursor_read_char+0x108>
    282c:	mvn	r0, #0
    2830:	str	r0, [fp, #-4]
    2834:	b	2874 <coda_cursor_read_char+0x144>
    2838:	b	286c <coda_cursor_read_char+0x13c>
    283c:	ldr	r0, [sp, #8]
    2840:	bl	0 <coda_type_get_native_type_name>
    2844:	mvn	lr, #104	; 0x68
    2848:	str	r0, [sp, #4]
    284c:	mov	r0, lr
    2850:	movw	r1, #0
    2854:	movt	r1, #0
    2858:	ldr	r2, [sp, #4]
    285c:	bl	0 <coda_set_error>
    2860:	mvn	r0, #0
    2864:	str	r0, [fp, #-4]
    2868:	b	2874 <coda_cursor_read_char+0x144>
    286c:	movw	r0, #0
    2870:	str	r0, [fp, #-4]
    2874:	ldr	r0, [fp, #-4]
    2878:	mov	sp, fp
    287c:	pop	{fp, pc}

00002880 <read_char>:
    2880:	push	{fp, lr}
    2884:	mov	fp, sp
    2888:	sub	sp, sp, #16
    288c:	str	r0, [sp, #8]
    2890:	str	r1, [sp, #4]
    2894:	ldr	r0, [sp, #8]
    2898:	ldr	r1, [r0, #4]
    289c:	add	r0, r0, r1, lsl #4
    28a0:	ldr	r0, [r0, #-8]
    28a4:	ldr	r0, [r0]
    28a8:	cmp	r0, #0
    28ac:	str	r0, [sp]
    28b0:	beq	2928 <read_char+0xa8>
    28b4:	b	28b8 <read_char+0x38>
    28b8:	ldr	r0, [sp]
    28bc:	cmp	r0, #1
    28c0:	beq	293c <read_char+0xbc>
    28c4:	b	28c8 <read_char+0x48>
    28c8:	ldr	r0, [sp]
    28cc:	cmp	r0, #100	; 0x64
    28d0:	beq	2950 <read_char+0xd0>
    28d4:	b	28d8 <read_char+0x58>
    28d8:	ldr	r0, [sp]
    28dc:	cmp	r0, #101	; 0x65
    28e0:	beq	2964 <read_char+0xe4>
    28e4:	b	28e8 <read_char+0x68>
    28e8:	ldr	r0, [sp]
    28ec:	cmp	r0, #102	; 0x66
    28f0:	beq	29a4 <read_char+0x124>
    28f4:	b	28f8 <read_char+0x78>
    28f8:	ldr	r0, [sp]
    28fc:	cmp	r0, #103	; 0x67
    2900:	beq	297c <read_char+0xfc>
    2904:	b	2908 <read_char+0x88>
    2908:	ldr	r0, [sp]
    290c:	cmp	r0, #104	; 0x68
    2910:	beq	2990 <read_char+0x110>
    2914:	b	2918 <read_char+0x98>
    2918:	ldr	r0, [sp]
    291c:	cmp	r0, #105	; 0x69
    2920:	beq	29a4 <read_char+0x124>
    2924:	b	29a8 <read_char+0x128>
    2928:	ldr	r0, [sp, #8]
    292c:	ldr	r1, [sp, #4]
    2930:	bl	0 <coda_ascii_cursor_read_char>
    2934:	str	r0, [fp, #-4]
    2938:	b	29c8 <read_char+0x148>
    293c:	ldr	r0, [sp, #8]
    2940:	ldr	r1, [sp, #4]
    2944:	bl	0 <coda_bin_cursor_read_char>
    2948:	str	r0, [fp, #-4]
    294c:	b	29c8 <read_char+0x148>
    2950:	ldr	r0, [sp, #8]
    2954:	ldr	r1, [sp, #4]
    2958:	bl	0 <coda_mem_cursor_read_char>
    295c:	str	r0, [fp, #-4]
    2960:	b	29c8 <read_char+0x148>
    2964:	mvn	r0, #10
    2968:	movw	r1, #0
    296c:	bl	0 <coda_set_error>
    2970:	mvn	r0, #0
    2974:	str	r0, [fp, #-4]
    2978:	b	29c8 <read_char+0x148>
    297c:	ldr	r0, [sp, #8]
    2980:	ldr	r1, [sp, #4]
    2984:	bl	0 <coda_cdf_cursor_read_char>
    2988:	str	r0, [fp, #-4]
    298c:	b	29c8 <read_char+0x148>
    2990:	ldr	r0, [sp, #8]
    2994:	ldr	r1, [sp, #4]
    2998:	bl	0 <coda_netcdf_cursor_read_char>
    299c:	str	r0, [fp, #-4]
    29a0:	b	29c8 <read_char+0x148>
    29a4:	b	29a8 <read_char+0x128>
    29a8:	movw	r0, #0
    29ac:	movt	r0, #0
    29b0:	movw	r1, #0
    29b4:	movt	r1, #0
    29b8:	movw	r2, #722	; 0x2d2
    29bc:	movw	r3, #0
    29c0:	movt	r3, #0
    29c4:	bl	0 <__assert_fail>
    29c8:	ldr	r0, [fp, #-4]
    29cc:	mov	sp, fp
    29d0:	pop	{fp, pc}

000029d4 <coda_cursor_read_string>:
    29d4:	push	{fp, lr}
    29d8:	mov	fp, sp
    29dc:	sub	sp, sp, #24
    29e0:	str	r0, [fp, #-8]
    29e4:	str	r1, [sp, #12]
    29e8:	str	r2, [sp, #8]
    29ec:	ldr	r0, [sp, #12]
    29f0:	movw	r1, #0
    29f4:	cmp	r0, r1
    29f8:	bne	2a24 <coda_cursor_read_string+0x50>
    29fc:	mvn	r0, #99	; 0x63
    2a00:	movw	r1, #0
    2a04:	movt	r1, #0
    2a08:	movw	r2, #0
    2a0c:	movt	r2, #0
    2a10:	movw	r3, #2747	; 0xabb
    2a14:	bl	0 <coda_set_error>
    2a18:	mvn	r0, #0
    2a1c:	str	r0, [fp, #-4]
    2a20:	b	2abc <coda_cursor_read_string+0xe8>
    2a24:	ldr	r0, [sp, #8]
    2a28:	cmp	r0, #0
    2a2c:	bgt	2a60 <coda_cursor_read_string+0x8c>
    2a30:	ldr	r2, [sp, #8]
    2a34:	mvn	r0, #99	; 0x63
    2a38:	movw	r1, #0
    2a3c:	movt	r1, #0
    2a40:	movw	r3, #0
    2a44:	movt	r3, #0
    2a48:	movw	ip, #2753	; 0xac1
    2a4c:	str	ip, [sp]
    2a50:	bl	0 <coda_set_error>
    2a54:	mvn	r0, #0
    2a58:	str	r0, [fp, #-4]
    2a5c:	b	2abc <coda_cursor_read_string+0xe8>
    2a60:	ldr	r0, [fp, #-8]
    2a64:	add	r1, sp, #4
    2a68:	bl	0 <coda_cursor_has_ascii_content>
    2a6c:	cmp	r0, #0
    2a70:	beq	2a80 <coda_cursor_read_string+0xac>
    2a74:	mvn	r0, #0
    2a78:	str	r0, [fp, #-4]
    2a7c:	b	2abc <coda_cursor_read_string+0xe8>
    2a80:	ldr	r0, [sp, #4]
    2a84:	cmp	r0, #0
    2a88:	bne	2aa8 <coda_cursor_read_string+0xd4>
    2a8c:	mvn	r0, #104	; 0x68
    2a90:	movw	r1, #0
    2a94:	movt	r1, #0
    2a98:	bl	0 <coda_set_error>
    2a9c:	mvn	r0, #0
    2aa0:	str	r0, [fp, #-4]
    2aa4:	b	2abc <coda_cursor_read_string+0xe8>
    2aa8:	ldr	r0, [fp, #-8]
    2aac:	ldr	r1, [sp, #12]
    2ab0:	ldr	r2, [sp, #8]
    2ab4:	bl	2ac8 <read_string>
    2ab8:	str	r0, [fp, #-4]
    2abc:	ldr	r0, [fp, #-4]
    2ac0:	mov	sp, fp
    2ac4:	pop	{fp, pc}

00002ac8 <read_string>:
    2ac8:	push	{fp, lr}
    2acc:	mov	fp, sp
    2ad0:	sub	sp, sp, #24
    2ad4:	str	r0, [fp, #-8]
    2ad8:	str	r1, [sp, #12]
    2adc:	str	r2, [sp, #8]
    2ae0:	ldr	r0, [fp, #-8]
    2ae4:	ldr	r1, [r0, #4]
    2ae8:	add	r0, r0, r1, lsl #4
    2aec:	ldr	r0, [r0, #-8]
    2af0:	ldr	r0, [r0]
    2af4:	cmp	r0, #0
    2af8:	str	r0, [sp, #4]
    2afc:	beq	2b74 <read_string+0xac>
    2b00:	b	2b04 <read_string+0x3c>
    2b04:	ldr	r0, [sp, #4]
    2b08:	cmp	r0, #1
    2b0c:	beq	2b8c <read_string+0xc4>
    2b10:	b	2b14 <read_string+0x4c>
    2b14:	ldr	r0, [sp, #4]
    2b18:	cmp	r0, #100	; 0x64
    2b1c:	beq	2ba4 <read_string+0xdc>
    2b20:	b	2b24 <read_string+0x5c>
    2b24:	ldr	r0, [sp, #4]
    2b28:	cmp	r0, #101	; 0x65
    2b2c:	beq	2bbc <read_string+0xf4>
    2b30:	b	2b34 <read_string+0x6c>
    2b34:	ldr	r0, [sp, #4]
    2b38:	cmp	r0, #102	; 0x66
    2b3c:	beq	2bd4 <read_string+0x10c>
    2b40:	b	2b44 <read_string+0x7c>
    2b44:	ldr	r0, [sp, #4]
    2b48:	cmp	r0, #103	; 0x67
    2b4c:	beq	2bec <read_string+0x124>
    2b50:	b	2b54 <read_string+0x8c>
    2b54:	ldr	r0, [sp, #4]
    2b58:	cmp	r0, #104	; 0x68
    2b5c:	beq	2c04 <read_string+0x13c>
    2b60:	b	2b64 <read_string+0x9c>
    2b64:	ldr	r0, [sp, #4]
    2b68:	cmp	r0, #105	; 0x69
    2b6c:	beq	2c1c <read_string+0x154>
    2b70:	b	2c20 <read_string+0x158>
    2b74:	ldr	r0, [fp, #-8]
    2b78:	ldr	r1, [sp, #12]
    2b7c:	ldr	r2, [sp, #8]
    2b80:	bl	0 <coda_ascii_cursor_read_string>
    2b84:	str	r0, [fp, #-4]
    2b88:	b	2c40 <read_string+0x178>
    2b8c:	ldr	r0, [fp, #-8]
    2b90:	ldr	r1, [sp, #12]
    2b94:	ldr	r2, [sp, #8]
    2b98:	bl	0 <coda_bin_cursor_read_string>
    2b9c:	str	r0, [fp, #-4]
    2ba0:	b	2c40 <read_string+0x178>
    2ba4:	ldr	r0, [fp, #-8]
    2ba8:	ldr	r1, [sp, #12]
    2bac:	ldr	r2, [sp, #8]
    2bb0:	bl	0 <coda_mem_cursor_read_string>
    2bb4:	str	r0, [fp, #-4]
    2bb8:	b	2c40 <read_string+0x178>
    2bbc:	mvn	r0, #10
    2bc0:	movw	r1, #0
    2bc4:	bl	0 <coda_set_error>
    2bc8:	mvn	r0, #0
    2bcc:	str	r0, [fp, #-4]
    2bd0:	b	2c40 <read_string+0x178>
    2bd4:	mvn	r0, #12
    2bd8:	movw	r1, #0
    2bdc:	bl	0 <coda_set_error>
    2be0:	mvn	r0, #0
    2be4:	str	r0, [fp, #-4]
    2be8:	b	2c40 <read_string+0x178>
    2bec:	ldr	r0, [fp, #-8]
    2bf0:	ldr	r1, [sp, #12]
    2bf4:	ldr	r2, [sp, #8]
    2bf8:	bl	0 <coda_cdf_cursor_read_string>
    2bfc:	str	r0, [fp, #-4]
    2c00:	b	2c40 <read_string+0x178>
    2c04:	ldr	r0, [fp, #-8]
    2c08:	ldr	r1, [sp, #12]
    2c0c:	ldr	r2, [sp, #8]
    2c10:	bl	0 <coda_netcdf_cursor_read_string>
    2c14:	str	r0, [fp, #-4]
    2c18:	b	2c40 <read_string+0x178>
    2c1c:	b	2c20 <read_string+0x158>
    2c20:	movw	r0, #0
    2c24:	movt	r0, #0
    2c28:	movw	r1, #0
    2c2c:	movt	r1, #0
    2c30:	movw	r2, #758	; 0x2f6
    2c34:	movw	r3, #0
    2c38:	movt	r3, #0
    2c3c:	bl	0 <__assert_fail>
    2c40:	ldr	r0, [fp, #-4]
    2c44:	mov	sp, fp
    2c48:	pop	{fp, pc}

00002c4c <coda_cursor_read_bits>:
    2c4c:	push	{r4, sl, fp, lr}
    2c50:	add	fp, sp, #8
    2c54:	sub	sp, sp, #48	; 0x30
    2c58:	ldr	ip, [fp, #12]
    2c5c:	ldr	lr, [fp, #8]
    2c60:	str	r0, [fp, #-16]
    2c64:	str	r1, [fp, #-20]	; 0xffffffec
    2c68:	str	r3, [sp, #28]
    2c6c:	str	r2, [sp, #24]
    2c70:	str	ip, [sp, #20]
    2c74:	str	lr, [sp, #16]
    2c78:	ldr	r0, [fp, #-16]
    2c7c:	movw	r1, #0
    2c80:	cmp	r0, r1
    2c84:	beq	2cbc <coda_cursor_read_bits+0x70>
    2c88:	ldr	r0, [fp, #-16]
    2c8c:	ldr	r0, [r0, #4]
    2c90:	cmp	r0, #0
    2c94:	ble	2cbc <coda_cursor_read_bits+0x70>
    2c98:	ldr	r0, [fp, #-16]
    2c9c:	add	r1, r0, #8
    2ca0:	ldr	r0, [r0, #4]
    2ca4:	sub	r0, r0, #1
    2ca8:	add	r0, r1, r0, lsl #4
    2cac:	ldr	r0, [r0]
    2cb0:	movw	r1, #0
    2cb4:	cmp	r0, r1
    2cb8:	bne	2ce4 <coda_cursor_read_bits+0x98>
    2cbc:	mvn	r0, #99	; 0x63
    2cc0:	movw	r1, #0
    2cc4:	movt	r1, #0
    2cc8:	movw	r2, #0
    2ccc:	movt	r2, #0
    2cd0:	movw	r3, #2789	; 0xae5
    2cd4:	bl	0 <coda_set_error>
    2cd8:	mvn	r0, #0
    2cdc:	str	r0, [fp, #-12]
    2ce0:	b	2e7c <coda_cursor_read_bits+0x230>
    2ce4:	ldr	r0, [fp, #-20]	; 0xffffffec
    2ce8:	movw	r1, #0
    2cec:	cmp	r0, r1
    2cf0:	bne	2d1c <coda_cursor_read_bits+0xd0>
    2cf4:	mvn	r0, #99	; 0x63
    2cf8:	movw	r1, #0
    2cfc:	movt	r1, #0
    2d00:	movw	r2, #0
    2d04:	movt	r2, #0
    2d08:	movw	r3, #2794	; 0xaea
    2d0c:	bl	0 <coda_set_error>
    2d10:	mvn	r0, #0
    2d14:	str	r0, [fp, #-12]
    2d18:	b	2e7c <coda_cursor_read_bits+0x230>
    2d1c:	ldr	r0, [sp, #20]
    2d20:	cmn	r0, #1
    2d24:	bgt	2d54 <coda_cursor_read_bits+0x108>
    2d28:	b	2d2c <coda_cursor_read_bits+0xe0>
    2d2c:	mvn	r0, #99	; 0x63
    2d30:	movw	r1, #0
    2d34:	movt	r1, #0
    2d38:	movw	r2, #0
    2d3c:	movt	r2, #0
    2d40:	movw	r3, #2799	; 0xaef
    2d44:	bl	0 <coda_set_error>
    2d48:	mvn	r0, #0
    2d4c:	str	r0, [fp, #-12]
    2d50:	b	2e7c <coda_cursor_read_bits+0x230>
    2d54:	ldr	r0, [sp, #16]
    2d58:	ldr	r1, [sp, #20]
    2d5c:	orr	r0, r0, r1
    2d60:	cmp	r0, #0
    2d64:	bne	2d78 <coda_cursor_read_bits+0x12c>
    2d68:	b	2d6c <coda_cursor_read_bits+0x120>
    2d6c:	movw	r0, #0
    2d70:	str	r0, [fp, #-12]
    2d74:	b	2e7c <coda_cursor_read_bits+0x230>
    2d78:	ldr	r0, [fp, #-16]
    2d7c:	ldr	r1, [r0, #4]
    2d80:	add	r0, r0, r1, lsl #4
    2d84:	ldr	r0, [r0, #-8]
    2d88:	ldr	r0, [r0]
    2d8c:	cmp	r0, #0
    2d90:	str	r0, [sp, #12]
    2d94:	beq	2dd0 <coda_cursor_read_bits+0x184>
    2d98:	b	2d9c <coda_cursor_read_bits+0x150>
    2d9c:	ldr	r0, [sp, #12]
    2da0:	cmp	r0, #1
    2da4:	beq	2e00 <coda_cursor_read_bits+0x1b4>
    2da8:	b	2dac <coda_cursor_read_bits+0x160>
    2dac:	ldr	r0, [sp, #12]
    2db0:	cmp	r0, #100	; 0x64
    2db4:	beq	2e30 <coda_cursor_read_bits+0x1e4>
    2db8:	b	2dbc <coda_cursor_read_bits+0x170>
    2dbc:	ldr	r0, [sp, #12]
    2dc0:	sub	r1, r0, #101	; 0x65
    2dc4:	cmp	r1, #5
    2dc8:	bcc	2e60 <coda_cursor_read_bits+0x214>
    2dcc:	b	2e64 <coda_cursor_read_bits+0x218>
    2dd0:	ldr	r0, [fp, #-16]
    2dd4:	ldr	r1, [fp, #-20]	; 0xffffffec
    2dd8:	ldr	r2, [sp, #24]
    2ddc:	ldr	r3, [sp, #28]
    2de0:	ldr	ip, [sp, #16]
    2de4:	ldr	lr, [sp, #20]
    2de8:	mov	r4, sp
    2dec:	str	lr, [r4, #4]
    2df0:	str	ip, [r4]
    2df4:	bl	0 <coda_ascii_cursor_read_bits>
    2df8:	str	r0, [fp, #-12]
    2dfc:	b	2e7c <coda_cursor_read_bits+0x230>
    2e00:	ldr	r0, [fp, #-16]
    2e04:	ldr	r1, [fp, #-20]	; 0xffffffec
    2e08:	ldr	r2, [sp, #24]
    2e0c:	ldr	r3, [sp, #28]
    2e10:	ldr	ip, [sp, #16]
    2e14:	ldr	lr, [sp, #20]
    2e18:	mov	r4, sp
    2e1c:	str	lr, [r4, #4]
    2e20:	str	ip, [r4]
    2e24:	bl	0 <coda_bin_cursor_read_bits>
    2e28:	str	r0, [fp, #-12]
    2e2c:	b	2e7c <coda_cursor_read_bits+0x230>
    2e30:	ldr	r0, [fp, #-16]
    2e34:	ldr	r1, [fp, #-20]	; 0xffffffec
    2e38:	ldr	r2, [sp, #24]
    2e3c:	ldr	r3, [sp, #28]
    2e40:	ldr	ip, [sp, #16]
    2e44:	ldr	lr, [sp, #20]
    2e48:	mov	r4, sp
    2e4c:	str	lr, [r4, #4]
    2e50:	str	ip, [r4]
    2e54:	bl	0 <coda_mem_cursor_read_bits>
    2e58:	str	r0, [fp, #-12]
    2e5c:	b	2e7c <coda_cursor_read_bits+0x230>
    2e60:	b	2e64 <coda_cursor_read_bits+0x218>
    2e64:	mvn	r0, #104	; 0x68
    2e68:	movw	r1, #0
    2e6c:	movt	r1, #0
    2e70:	bl	0 <coda_set_error>
    2e74:	mvn	r0, #0
    2e78:	str	r0, [fp, #-12]
    2e7c:	ldr	r0, [fp, #-12]
    2e80:	sub	sp, fp, #8
    2e84:	pop	{r4, sl, fp, pc}

00002e88 <coda_cursor_read_bytes>:
    2e88:	push	{r4, sl, fp, lr}
    2e8c:	add	fp, sp, #8
    2e90:	sub	sp, sp, #48	; 0x30
    2e94:	ldr	ip, [fp, #12]
    2e98:	ldr	lr, [fp, #8]
    2e9c:	str	r0, [fp, #-16]
    2ea0:	str	r1, [fp, #-20]	; 0xffffffec
    2ea4:	str	r3, [sp, #28]
    2ea8:	str	r2, [sp, #24]
    2eac:	str	ip, [sp, #20]
    2eb0:	str	lr, [sp, #16]
    2eb4:	ldr	r0, [fp, #-16]
    2eb8:	movw	r1, #0
    2ebc:	cmp	r0, r1
    2ec0:	beq	2ef8 <coda_cursor_read_bytes+0x70>
    2ec4:	ldr	r0, [fp, #-16]
    2ec8:	ldr	r0, [r0, #4]
    2ecc:	cmp	r0, #0
    2ed0:	ble	2ef8 <coda_cursor_read_bytes+0x70>
    2ed4:	ldr	r0, [fp, #-16]
    2ed8:	add	r1, r0, #8
    2edc:	ldr	r0, [r0, #4]
    2ee0:	sub	r0, r0, #1
    2ee4:	add	r0, r1, r0, lsl #4
    2ee8:	ldr	r0, [r0]
    2eec:	movw	r1, #0
    2ef0:	cmp	r0, r1
    2ef4:	bne	2f20 <coda_cursor_read_bytes+0x98>
    2ef8:	mvn	r0, #99	; 0x63
    2efc:	movw	r1, #0
    2f00:	movt	r1, #0
    2f04:	movw	r2, #0
    2f08:	movt	r2, #0
    2f0c:	movw	r3, #2845	; 0xb1d
    2f10:	bl	0 <coda_set_error>
    2f14:	mvn	r0, #0
    2f18:	str	r0, [fp, #-12]
    2f1c:	b	30f0 <coda_cursor_read_bytes+0x268>
    2f20:	ldr	r0, [fp, #-20]	; 0xffffffec
    2f24:	movw	r1, #0
    2f28:	cmp	r0, r1
    2f2c:	bne	2f58 <coda_cursor_read_bytes+0xd0>
    2f30:	mvn	r0, #99	; 0x63
    2f34:	movw	r1, #0
    2f38:	movt	r1, #0
    2f3c:	movw	r2, #0
    2f40:	movt	r2, #0
    2f44:	movw	r3, #2850	; 0xb22
    2f48:	bl	0 <coda_set_error>
    2f4c:	mvn	r0, #0
    2f50:	str	r0, [fp, #-12]
    2f54:	b	30f0 <coda_cursor_read_bytes+0x268>
    2f58:	ldr	r0, [sp, #28]
    2f5c:	cmn	r0, #1
    2f60:	bgt	2f90 <coda_cursor_read_bytes+0x108>
    2f64:	b	2f68 <coda_cursor_read_bytes+0xe0>
    2f68:	mvn	r0, #99	; 0x63
    2f6c:	movw	r1, #0
    2f70:	movt	r1, #0
    2f74:	movw	r2, #0
    2f78:	movt	r2, #0
    2f7c:	movw	r3, #2855	; 0xb27
    2f80:	bl	0 <coda_set_error>
    2f84:	mvn	r0, #0
    2f88:	str	r0, [fp, #-12]
    2f8c:	b	30f0 <coda_cursor_read_bytes+0x268>
    2f90:	ldr	r0, [sp, #20]
    2f94:	cmn	r0, #1
    2f98:	bgt	2fc8 <coda_cursor_read_bytes+0x140>
    2f9c:	b	2fa0 <coda_cursor_read_bytes+0x118>
    2fa0:	mvn	r0, #99	; 0x63
    2fa4:	movw	r1, #0
    2fa8:	movt	r1, #0
    2fac:	movw	r2, #0
    2fb0:	movt	r2, #0
    2fb4:	movw	r3, #2860	; 0xb2c
    2fb8:	bl	0 <coda_set_error>
    2fbc:	mvn	r0, #0
    2fc0:	str	r0, [fp, #-12]
    2fc4:	b	30f0 <coda_cursor_read_bytes+0x268>
    2fc8:	ldr	r0, [sp, #16]
    2fcc:	ldr	r1, [sp, #20]
    2fd0:	orr	r0, r0, r1
    2fd4:	cmp	r0, #0
    2fd8:	bne	2fec <coda_cursor_read_bytes+0x164>
    2fdc:	b	2fe0 <coda_cursor_read_bytes+0x158>
    2fe0:	movw	r0, #0
    2fe4:	str	r0, [fp, #-12]
    2fe8:	b	30f0 <coda_cursor_read_bytes+0x268>
    2fec:	ldr	r0, [fp, #-16]
    2ff0:	ldr	r1, [r0, #4]
    2ff4:	add	r0, r0, r1, lsl #4
    2ff8:	ldr	r0, [r0, #-8]
    2ffc:	ldr	r0, [r0]
    3000:	cmp	r0, #0
    3004:	str	r0, [sp, #12]
    3008:	beq	3044 <coda_cursor_read_bytes+0x1bc>
    300c:	b	3010 <coda_cursor_read_bytes+0x188>
    3010:	ldr	r0, [sp, #12]
    3014:	cmp	r0, #1
    3018:	beq	3074 <coda_cursor_read_bytes+0x1ec>
    301c:	b	3020 <coda_cursor_read_bytes+0x198>
    3020:	ldr	r0, [sp, #12]
    3024:	cmp	r0, #100	; 0x64
    3028:	beq	30a4 <coda_cursor_read_bytes+0x21c>
    302c:	b	3030 <coda_cursor_read_bytes+0x1a8>
    3030:	ldr	r0, [sp, #12]
    3034:	sub	r1, r0, #101	; 0x65
    3038:	cmp	r1, #5
    303c:	bcc	30d4 <coda_cursor_read_bytes+0x24c>
    3040:	b	30d8 <coda_cursor_read_bytes+0x250>
    3044:	ldr	r0, [fp, #-16]
    3048:	ldr	r1, [fp, #-20]	; 0xffffffec
    304c:	ldr	r2, [sp, #24]
    3050:	ldr	r3, [sp, #28]
    3054:	ldr	ip, [sp, #16]
    3058:	ldr	lr, [sp, #20]
    305c:	mov	r4, sp
    3060:	str	lr, [r4, #4]
    3064:	str	ip, [r4]
    3068:	bl	0 <coda_ascii_cursor_read_bytes>
    306c:	str	r0, [fp, #-12]
    3070:	b	30f0 <coda_cursor_read_bytes+0x268>
    3074:	ldr	r0, [fp, #-16]
    3078:	ldr	r1, [fp, #-20]	; 0xffffffec
    307c:	ldr	r2, [sp, #24]
    3080:	ldr	r3, [sp, #28]
    3084:	ldr	ip, [sp, #16]
    3088:	ldr	lr, [sp, #20]
    308c:	mov	r4, sp
    3090:	str	lr, [r4, #4]
    3094:	str	ip, [r4]
    3098:	bl	0 <coda_bin_cursor_read_bytes>
    309c:	str	r0, [fp, #-12]
    30a0:	b	30f0 <coda_cursor_read_bytes+0x268>
    30a4:	ldr	r0, [fp, #-16]
    30a8:	ldr	r1, [fp, #-20]	; 0xffffffec
    30ac:	ldr	r2, [sp, #24]
    30b0:	ldr	r3, [sp, #28]
    30b4:	ldr	ip, [sp, #16]
    30b8:	ldr	lr, [sp, #20]
    30bc:	mov	r4, sp
    30c0:	str	lr, [r4, #4]
    30c4:	str	ip, [r4]
    30c8:	bl	0 <coda_mem_cursor_read_bytes>
    30cc:	str	r0, [fp, #-12]
    30d0:	b	30f0 <coda_cursor_read_bytes+0x268>
    30d4:	b	30d8 <coda_cursor_read_bytes+0x250>
    30d8:	mvn	r0, #104	; 0x68
    30dc:	movw	r1, #0
    30e0:	movt	r1, #0
    30e4:	bl	0 <coda_set_error>
    30e8:	mvn	r0, #0
    30ec:	str	r0, [fp, #-12]
    30f0:	ldr	r0, [fp, #-12]
    30f4:	sub	sp, fp, #8
    30f8:	pop	{r4, sl, fp, pc}

000030fc <coda_cursor_read_int8_array>:
    30fc:	push	{fp, lr}
    3100:	mov	fp, sp
    3104:	sub	sp, sp, #40	; 0x28
    3108:	str	r0, [fp, #-8]
    310c:	str	r1, [fp, #-12]
    3110:	str	r2, [fp, #-16]
    3114:	ldr	r0, [fp, #-8]
    3118:	movw	r1, #0
    311c:	cmp	r0, r1
    3120:	beq	3158 <coda_cursor_read_int8_array+0x5c>
    3124:	ldr	r0, [fp, #-8]
    3128:	ldr	r0, [r0, #4]
    312c:	cmp	r0, #0
    3130:	ble	3158 <coda_cursor_read_int8_array+0x5c>
    3134:	ldr	r0, [fp, #-8]
    3138:	add	r1, r0, #8
    313c:	ldr	r0, [r0, #4]
    3140:	sub	r0, r0, #1
    3144:	add	r0, r1, r0, lsl #4
    3148:	ldr	r0, [r0]
    314c:	movw	r1, #0
    3150:	cmp	r0, r1
    3154:	bne	3180 <coda_cursor_read_int8_array+0x84>
    3158:	mvn	r0, #99	; 0x63
    315c:	movw	r1, #0
    3160:	movt	r1, #0
    3164:	movw	r2, #0
    3168:	movt	r2, #0
    316c:	movw	r3, #2908	; 0xb5c
    3170:	bl	0 <coda_set_error>
    3174:	mvn	r0, #0
    3178:	str	r0, [fp, #-4]
    317c:	b	32f8 <coda_cursor_read_int8_array+0x1fc>
    3180:	ldr	r0, [fp, #-12]
    3184:	movw	r1, #0
    3188:	cmp	r0, r1
    318c:	bne	31b8 <coda_cursor_read_int8_array+0xbc>
    3190:	mvn	r0, #99	; 0x63
    3194:	movw	r1, #0
    3198:	movt	r1, #0
    319c:	movw	r2, #0
    31a0:	movt	r2, #0
    31a4:	movw	r3, #2913	; 0xb61
    31a8:	bl	0 <coda_set_error>
    31ac:	mvn	r0, #0
    31b0:	str	r0, [fp, #-4]
    31b4:	b	32f8 <coda_cursor_read_int8_array+0x1fc>
    31b8:	ldr	r0, [fp, #-8]
    31bc:	add	r1, r0, #8
    31c0:	ldr	r0, [r0, #4]
    31c4:	sub	r0, r0, #1
    31c8:	add	r0, r1, r0, lsl #4
    31cc:	ldr	r0, [r0]
    31d0:	ldr	r0, [r0]
    31d4:	cmp	r0, #100	; 0x64
    31d8:	bcs	31fc <coda_cursor_read_int8_array+0x100>
    31dc:	ldr	r0, [fp, #-8]
    31e0:	add	r1, r0, #8
    31e4:	ldr	r0, [r0, #4]
    31e8:	sub	r0, r0, #1
    31ec:	add	r0, r1, r0, lsl #4
    31f0:	ldr	r0, [r0]
    31f4:	str	r0, [sp, #12]
    31f8:	b	321c <coda_cursor_read_int8_array+0x120>
    31fc:	ldr	r0, [fp, #-8]
    3200:	add	r1, r0, #8
    3204:	ldr	r0, [r0, #4]
    3208:	sub	r0, r0, #1
    320c:	add	r0, r1, r0, lsl #4
    3210:	ldr	r0, [r0]
    3214:	ldr	r0, [r0, #4]
    3218:	str	r0, [sp, #12]
    321c:	ldr	r0, [sp, #12]
    3220:	str	r0, [sp, #16]
    3224:	ldr	r0, [sp, #16]
    3228:	ldr	r0, [r0, #8]
    322c:	cmp	r0, #1
    3230:	beq	3268 <coda_cursor_read_int8_array+0x16c>
    3234:	ldr	r0, [sp, #16]
    3238:	ldr	r0, [r0, #8]
    323c:	bl	0 <coda_type_get_class_name>
    3240:	mvn	lr, #104	; 0x68
    3244:	str	r0, [sp, #8]
    3248:	mov	r0, lr
    324c:	movw	r1, #0
    3250:	movt	r1, #0
    3254:	ldr	r2, [sp, #8]
    3258:	bl	0 <coda_set_error>
    325c:	mvn	r0, #0
    3260:	str	r0, [fp, #-4]
    3264:	b	32f8 <coda_cursor_read_int8_array+0x1fc>
    3268:	ldr	r0, [sp, #16]
    326c:	add	r1, sp, #20
    3270:	bl	3304 <get_array_element_read_type>
    3274:	cmp	r0, #0
    3278:	beq	3288 <coda_cursor_read_int8_array+0x18c>
    327c:	mvn	r0, #0
    3280:	str	r0, [fp, #-4]
    3284:	b	32f8 <coda_cursor_read_int8_array+0x1fc>
    3288:	ldr	r0, [sp, #20]
    328c:	cmp	r0, #0
    3290:	bne	32c0 <coda_cursor_read_int8_array+0x1c4>
    3294:	b	3298 <coda_cursor_read_int8_array+0x19c>
    3298:	ldr	r0, [fp, #-8]
    329c:	ldr	r1, [fp, #-12]
    32a0:	ldr	r2, [fp, #-16]
    32a4:	bl	33a8 <read_int8_array>
    32a8:	cmp	r0, #0
    32ac:	beq	32bc <coda_cursor_read_int8_array+0x1c0>
    32b0:	mvn	r0, #0
    32b4:	str	r0, [fp, #-4]
    32b8:	b	32f8 <coda_cursor_read_int8_array+0x1fc>
    32bc:	b	32f0 <coda_cursor_read_int8_array+0x1f4>
    32c0:	ldr	r0, [sp, #20]
    32c4:	bl	0 <coda_type_get_native_type_name>
    32c8:	mvn	lr, #104	; 0x68
    32cc:	str	r0, [sp, #4]
    32d0:	mov	r0, lr
    32d4:	movw	r1, #0
    32d8:	movt	r1, #0
    32dc:	ldr	r2, [sp, #4]
    32e0:	bl	0 <coda_set_error>
    32e4:	mvn	r0, #0
    32e8:	str	r0, [fp, #-4]
    32ec:	b	32f8 <coda_cursor_read_int8_array+0x1fc>
    32f0:	movw	r0, #0
    32f4:	str	r0, [fp, #-4]
    32f8:	ldr	r0, [fp, #-4]
    32fc:	mov	sp, fp
    3300:	pop	{fp, pc}

00003304 <get_array_element_read_type>:
    3304:	push	{fp, lr}
    3308:	mov	fp, sp
    330c:	sub	sp, sp, #16
    3310:	str	r0, [fp, #-4]
    3314:	str	r1, [sp, #8]
    3318:	ldr	r0, [fp, #-4]
    331c:	ldr	r0, [r0, #40]	; 0x28
    3320:	str	r0, [sp, #4]
    3324:	ldr	r0, [sp, #4]
    3328:	ldr	r0, [r0, #8]
    332c:	cmp	r0, #2
    3330:	beq	3344 <get_array_element_read_type+0x40>
    3334:	ldr	r0, [sp, #4]
    3338:	ldr	r0, [r0, #8]
    333c:	cmp	r0, #3
    3340:	bne	3388 <get_array_element_read_type+0x84>
    3344:	ldr	r0, [pc, #88]	; 33a4 <get_array_element_read_type+0xa0>
    3348:	ldr	r0, [pc, r0]
    334c:	str	r0, [sp]
    3350:	bl	0 <__aeabi_read_tp>
    3354:	ldr	ip, [sp]
    3358:	ldr	r0, [r0, ip]
    335c:	cmp	r0, #0
    3360:	beq	3388 <get_array_element_read_type+0x84>
    3364:	ldr	r0, [sp, #4]
    3368:	ldr	r0, [r0, #48]	; 0x30
    336c:	movw	r1, #0
    3370:	cmp	r0, r1
    3374:	beq	3388 <get_array_element_read_type+0x84>
    3378:	ldr	r0, [sp, #8]
    337c:	movw	r1, #9
    3380:	str	r1, [r0]
    3384:	b	3398 <get_array_element_read_type+0x94>
    3388:	ldr	r0, [sp, #4]
    338c:	ldr	r0, [r0, #12]
    3390:	ldr	r1, [sp, #8]
    3394:	str	r0, [r1]
    3398:	movw	r0, #0
    339c:	mov	sp, fp
    33a0:	pop	{fp, pc}
    33a4:	.word	0x00000054

000033a8 <read_int8_array>:
    33a8:	push	{fp, lr}
    33ac:	mov	fp, sp
    33b0:	sub	sp, sp, #24
    33b4:	str	r0, [fp, #-8]
    33b8:	str	r1, [sp, #12]
    33bc:	str	r2, [sp, #8]
    33c0:	ldr	r0, [fp, #-8]
    33c4:	ldr	r1, [r0, #4]
    33c8:	add	r0, r0, r1, lsl #4
    33cc:	ldr	r0, [r0, #-8]
    33d0:	ldr	r0, [r0]
    33d4:	cmp	r0, #0
    33d8:	str	r0, [sp, #4]
    33dc:	beq	3454 <read_int8_array+0xac>
    33e0:	b	33e4 <read_int8_array+0x3c>
    33e4:	ldr	r0, [sp, #4]
    33e8:	cmp	r0, #1
    33ec:	beq	346c <read_int8_array+0xc4>
    33f0:	b	33f4 <read_int8_array+0x4c>
    33f4:	ldr	r0, [sp, #4]
    33f8:	cmp	r0, #100	; 0x64
    33fc:	beq	3484 <read_int8_array+0xdc>
    3400:	b	3404 <read_int8_array+0x5c>
    3404:	ldr	r0, [sp, #4]
    3408:	cmp	r0, #101	; 0x65
    340c:	beq	349c <read_int8_array+0xf4>
    3410:	b	3414 <read_int8_array+0x6c>
    3414:	ldr	r0, [sp, #4]
    3418:	cmp	r0, #102	; 0x66
    341c:	beq	34b4 <read_int8_array+0x10c>
    3420:	b	3424 <read_int8_array+0x7c>
    3424:	ldr	r0, [sp, #4]
    3428:	cmp	r0, #103	; 0x67
    342c:	beq	34cc <read_int8_array+0x124>
    3430:	b	3434 <read_int8_array+0x8c>
    3434:	ldr	r0, [sp, #4]
    3438:	cmp	r0, #104	; 0x68
    343c:	beq	34f0 <read_int8_array+0x148>
    3440:	b	3444 <read_int8_array+0x9c>
    3444:	ldr	r0, [sp, #4]
    3448:	cmp	r0, #105	; 0x69
    344c:	beq	3514 <read_int8_array+0x16c>
    3450:	b	3534 <read_int8_array+0x18c>
    3454:	ldr	r0, [fp, #-8]
    3458:	ldr	r1, [sp, #12]
    345c:	ldr	r2, [sp, #8]
    3460:	bl	0 <coda_ascii_cursor_read_int8_array>
    3464:	str	r0, [fp, #-4]
    3468:	b	3560 <read_int8_array+0x1b8>
    346c:	ldr	r0, [fp, #-8]
    3470:	ldr	r1, [sp, #12]
    3474:	ldr	r2, [sp, #8]
    3478:	bl	0 <coda_bin_cursor_read_int8_array>
    347c:	str	r0, [fp, #-4]
    3480:	b	3560 <read_int8_array+0x1b8>
    3484:	ldr	r0, [fp, #-8]
    3488:	ldr	r1, [sp, #12]
    348c:	ldr	r2, [sp, #8]
    3490:	bl	0 <coda_mem_cursor_read_int8_array>
    3494:	str	r0, [fp, #-4]
    3498:	b	3560 <read_int8_array+0x1b8>
    349c:	mvn	r0, #10
    34a0:	movw	r1, #0
    34a4:	bl	0 <coda_set_error>
    34a8:	mvn	r0, #0
    34ac:	str	r0, [fp, #-4]
    34b0:	b	3560 <read_int8_array+0x1b8>
    34b4:	mvn	r0, #12
    34b8:	movw	r1, #0
    34bc:	bl	0 <coda_set_error>
    34c0:	mvn	r0, #0
    34c4:	str	r0, [fp, #-4]
    34c8:	b	3560 <read_int8_array+0x1b8>
    34cc:	ldr	r0, [fp, #-8]
    34d0:	ldr	r1, [sp, #12]
    34d4:	bl	0 <coda_cdf_cursor_read_int8_array>
    34d8:	cmp	r0, #0
    34dc:	beq	34ec <read_int8_array+0x144>
    34e0:	mvn	r0, #0
    34e4:	str	r0, [fp, #-4]
    34e8:	b	3560 <read_int8_array+0x1b8>
    34ec:	b	3534 <read_int8_array+0x18c>
    34f0:	ldr	r0, [fp, #-8]
    34f4:	ldr	r1, [sp, #12]
    34f8:	bl	0 <coda_netcdf_cursor_read_int8_array>
    34fc:	cmp	r0, #0
    3500:	beq	3510 <read_int8_array+0x168>
    3504:	mvn	r0, #0
    3508:	str	r0, [fp, #-4]
    350c:	b	3560 <read_int8_array+0x1b8>
    3510:	b	3534 <read_int8_array+0x18c>
    3514:	movw	r0, #0
    3518:	movt	r0, #0
    351c:	movw	r1, #0
    3520:	movt	r1, #0
    3524:	movw	r2, #807	; 0x327
    3528:	movw	r3, #0
    352c:	movt	r3, #0
    3530:	bl	0 <__assert_fail>
    3534:	ldr	r0, [sp, #8]
    3538:	cmp	r0, #0
    353c:	beq	3558 <read_int8_array+0x1b0>
    3540:	ldr	r0, [fp, #-8]
    3544:	ldr	r1, [sp, #12]
    3548:	movw	r2, #1
    354c:	bl	cb58 <transpose_array>
    3550:	str	r0, [fp, #-4]
    3554:	b	3560 <read_int8_array+0x1b8>
    3558:	movw	r0, #0
    355c:	str	r0, [fp, #-4]
    3560:	ldr	r0, [fp, #-4]
    3564:	mov	sp, fp
    3568:	pop	{fp, pc}

0000356c <coda_cursor_read_uint8_array>:
    356c:	push	{fp, lr}
    3570:	mov	fp, sp
    3574:	sub	sp, sp, #40	; 0x28
    3578:	str	r0, [fp, #-8]
    357c:	str	r1, [fp, #-12]
    3580:	str	r2, [fp, #-16]
    3584:	ldr	r0, [fp, #-8]
    3588:	movw	r1, #0
    358c:	cmp	r0, r1
    3590:	beq	35c8 <coda_cursor_read_uint8_array+0x5c>
    3594:	ldr	r0, [fp, #-8]
    3598:	ldr	r0, [r0, #4]
    359c:	cmp	r0, #0
    35a0:	ble	35c8 <coda_cursor_read_uint8_array+0x5c>
    35a4:	ldr	r0, [fp, #-8]
    35a8:	add	r1, r0, #8
    35ac:	ldr	r0, [r0, #4]
    35b0:	sub	r0, r0, #1
    35b4:	add	r0, r1, r0, lsl #4
    35b8:	ldr	r0, [r0]
    35bc:	movw	r1, #0
    35c0:	cmp	r0, r1
    35c4:	bne	35f0 <coda_cursor_read_uint8_array+0x84>
    35c8:	mvn	r0, #99	; 0x63
    35cc:	movw	r1, #0
    35d0:	movt	r1, #0
    35d4:	movw	r2, #0
    35d8:	movt	r2, #0
    35dc:	movw	r3, #2967	; 0xb97
    35e0:	bl	0 <coda_set_error>
    35e4:	mvn	r0, #0
    35e8:	str	r0, [fp, #-4]
    35ec:	b	3768 <coda_cursor_read_uint8_array+0x1fc>
    35f0:	ldr	r0, [fp, #-12]
    35f4:	movw	r1, #0
    35f8:	cmp	r0, r1
    35fc:	bne	3628 <coda_cursor_read_uint8_array+0xbc>
    3600:	mvn	r0, #99	; 0x63
    3604:	movw	r1, #0
    3608:	movt	r1, #0
    360c:	movw	r2, #0
    3610:	movt	r2, #0
    3614:	movw	r3, #2972	; 0xb9c
    3618:	bl	0 <coda_set_error>
    361c:	mvn	r0, #0
    3620:	str	r0, [fp, #-4]
    3624:	b	3768 <coda_cursor_read_uint8_array+0x1fc>
    3628:	ldr	r0, [fp, #-8]
    362c:	add	r1, r0, #8
    3630:	ldr	r0, [r0, #4]
    3634:	sub	r0, r0, #1
    3638:	add	r0, r1, r0, lsl #4
    363c:	ldr	r0, [r0]
    3640:	ldr	r0, [r0]
    3644:	cmp	r0, #100	; 0x64
    3648:	bcs	366c <coda_cursor_read_uint8_array+0x100>
    364c:	ldr	r0, [fp, #-8]
    3650:	add	r1, r0, #8
    3654:	ldr	r0, [r0, #4]
    3658:	sub	r0, r0, #1
    365c:	add	r0, r1, r0, lsl #4
    3660:	ldr	r0, [r0]
    3664:	str	r0, [sp, #12]
    3668:	b	368c <coda_cursor_read_uint8_array+0x120>
    366c:	ldr	r0, [fp, #-8]
    3670:	add	r1, r0, #8
    3674:	ldr	r0, [r0, #4]
    3678:	sub	r0, r0, #1
    367c:	add	r0, r1, r0, lsl #4
    3680:	ldr	r0, [r0]
    3684:	ldr	r0, [r0, #4]
    3688:	str	r0, [sp, #12]
    368c:	ldr	r0, [sp, #12]
    3690:	str	r0, [sp, #16]
    3694:	ldr	r0, [sp, #16]
    3698:	ldr	r0, [r0, #8]
    369c:	cmp	r0, #1
    36a0:	beq	36d8 <coda_cursor_read_uint8_array+0x16c>
    36a4:	ldr	r0, [sp, #16]
    36a8:	ldr	r0, [r0, #8]
    36ac:	bl	0 <coda_type_get_class_name>
    36b0:	mvn	lr, #104	; 0x68
    36b4:	str	r0, [sp, #8]
    36b8:	mov	r0, lr
    36bc:	movw	r1, #0
    36c0:	movt	r1, #0
    36c4:	ldr	r2, [sp, #8]
    36c8:	bl	0 <coda_set_error>
    36cc:	mvn	r0, #0
    36d0:	str	r0, [fp, #-4]
    36d4:	b	3768 <coda_cursor_read_uint8_array+0x1fc>
    36d8:	ldr	r0, [sp, #16]
    36dc:	add	r1, sp, #20
    36e0:	bl	3304 <get_array_element_read_type>
    36e4:	cmp	r0, #0
    36e8:	beq	36f8 <coda_cursor_read_uint8_array+0x18c>
    36ec:	mvn	r0, #0
    36f0:	str	r0, [fp, #-4]
    36f4:	b	3768 <coda_cursor_read_uint8_array+0x1fc>
    36f8:	ldr	r0, [sp, #20]
    36fc:	cmp	r0, #1
    3700:	bne	3730 <coda_cursor_read_uint8_array+0x1c4>
    3704:	b	3708 <coda_cursor_read_uint8_array+0x19c>
    3708:	ldr	r0, [fp, #-8]
    370c:	ldr	r1, [fp, #-12]
    3710:	ldr	r2, [fp, #-16]
    3714:	bl	3774 <read_uint8_array>
    3718:	cmp	r0, #0
    371c:	beq	372c <coda_cursor_read_uint8_array+0x1c0>
    3720:	mvn	r0, #0
    3724:	str	r0, [fp, #-4]
    3728:	b	3768 <coda_cursor_read_uint8_array+0x1fc>
    372c:	b	3760 <coda_cursor_read_uint8_array+0x1f4>
    3730:	ldr	r0, [sp, #20]
    3734:	bl	0 <coda_type_get_native_type_name>
    3738:	mvn	lr, #104	; 0x68
    373c:	str	r0, [sp, #4]
    3740:	mov	r0, lr
    3744:	movw	r1, #0
    3748:	movt	r1, #0
    374c:	ldr	r2, [sp, #4]
    3750:	bl	0 <coda_set_error>
    3754:	mvn	r0, #0
    3758:	str	r0, [fp, #-4]
    375c:	b	3768 <coda_cursor_read_uint8_array+0x1fc>
    3760:	movw	r0, #0
    3764:	str	r0, [fp, #-4]
    3768:	ldr	r0, [fp, #-4]
    376c:	mov	sp, fp
    3770:	pop	{fp, pc}

00003774 <read_uint8_array>:
    3774:	push	{fp, lr}
    3778:	mov	fp, sp
    377c:	sub	sp, sp, #24
    3780:	str	r0, [fp, #-8]
    3784:	str	r1, [sp, #12]
    3788:	str	r2, [sp, #8]
    378c:	ldr	r0, [fp, #-8]
    3790:	ldr	r1, [r0, #4]
    3794:	add	r0, r0, r1, lsl #4
    3798:	ldr	r0, [r0, #-8]
    379c:	ldr	r0, [r0]
    37a0:	cmp	r0, #0
    37a4:	str	r0, [sp, #4]
    37a8:	beq	3814 <read_uint8_array+0xa0>
    37ac:	b	37b0 <read_uint8_array+0x3c>
    37b0:	ldr	r0, [sp, #4]
    37b4:	cmp	r0, #1
    37b8:	beq	382c <read_uint8_array+0xb8>
    37bc:	b	37c0 <read_uint8_array+0x4c>
    37c0:	ldr	r0, [sp, #4]
    37c4:	cmp	r0, #100	; 0x64
    37c8:	beq	3844 <read_uint8_array+0xd0>
    37cc:	b	37d0 <read_uint8_array+0x5c>
    37d0:	ldr	r0, [sp, #4]
    37d4:	cmp	r0, #101	; 0x65
    37d8:	beq	385c <read_uint8_array+0xe8>
    37dc:	b	37e0 <read_uint8_array+0x6c>
    37e0:	ldr	r0, [sp, #4]
    37e4:	cmp	r0, #102	; 0x66
    37e8:	beq	3874 <read_uint8_array+0x100>
    37ec:	b	37f0 <read_uint8_array+0x7c>
    37f0:	ldr	r0, [sp, #4]
    37f4:	cmp	r0, #103	; 0x67
    37f8:	beq	388c <read_uint8_array+0x118>
    37fc:	b	3800 <read_uint8_array+0x8c>
    3800:	ldr	r0, [sp, #4]
    3804:	sub	r1, r0, #104	; 0x68
    3808:	cmp	r1, #2
    380c:	bcc	38b0 <read_uint8_array+0x13c>
    3810:	b	38d0 <read_uint8_array+0x15c>
    3814:	ldr	r0, [fp, #-8]
    3818:	ldr	r1, [sp, #12]
    381c:	ldr	r2, [sp, #8]
    3820:	bl	0 <coda_ascii_cursor_read_uint8_array>
    3824:	str	r0, [fp, #-4]
    3828:	b	38fc <read_uint8_array+0x188>
    382c:	ldr	r0, [fp, #-8]
    3830:	ldr	r1, [sp, #12]
    3834:	ldr	r2, [sp, #8]
    3838:	bl	0 <coda_bin_cursor_read_uint8_array>
    383c:	str	r0, [fp, #-4]
    3840:	b	38fc <read_uint8_array+0x188>
    3844:	ldr	r0, [fp, #-8]
    3848:	ldr	r1, [sp, #12]
    384c:	ldr	r2, [sp, #8]
    3850:	bl	0 <coda_mem_cursor_read_uint8_array>
    3854:	str	r0, [fp, #-4]
    3858:	b	38fc <read_uint8_array+0x188>
    385c:	mvn	r0, #10
    3860:	movw	r1, #0
    3864:	bl	0 <coda_set_error>
    3868:	mvn	r0, #0
    386c:	str	r0, [fp, #-4]
    3870:	b	38fc <read_uint8_array+0x188>
    3874:	mvn	r0, #12
    3878:	movw	r1, #0
    387c:	bl	0 <coda_set_error>
    3880:	mvn	r0, #0
    3884:	str	r0, [fp, #-4]
    3888:	b	38fc <read_uint8_array+0x188>
    388c:	ldr	r0, [fp, #-8]
    3890:	ldr	r1, [sp, #12]
    3894:	bl	0 <coda_cdf_cursor_read_uint8_array>
    3898:	cmp	r0, #0
    389c:	beq	38ac <read_uint8_array+0x138>
    38a0:	mvn	r0, #0
    38a4:	str	r0, [fp, #-4]
    38a8:	b	38fc <read_uint8_array+0x188>
    38ac:	b	38d0 <read_uint8_array+0x15c>
    38b0:	movw	r0, #0
    38b4:	movt	r0, #0
    38b8:	movw	r1, #0
    38bc:	movt	r1, #0
    38c0:	movw	r2, #859	; 0x35b
    38c4:	movw	r3, #0
    38c8:	movt	r3, #0
    38cc:	bl	0 <__assert_fail>
    38d0:	ldr	r0, [sp, #8]
    38d4:	cmp	r0, #0
    38d8:	beq	38f4 <read_uint8_array+0x180>
    38dc:	ldr	r0, [fp, #-8]
    38e0:	ldr	r1, [sp, #12]
    38e4:	movw	r2, #1
    38e8:	bl	cb58 <transpose_array>
    38ec:	str	r0, [fp, #-4]
    38f0:	b	38fc <read_uint8_array+0x188>
    38f4:	movw	r0, #0
    38f8:	str	r0, [fp, #-4]
    38fc:	ldr	r0, [fp, #-4]
    3900:	mov	sp, fp
    3904:	pop	{fp, pc}

00003908 <coda_cursor_read_int16_array>:
    3908:	push	{fp, lr}
    390c:	mov	fp, sp
    3910:	sub	sp, sp, #48	; 0x30
    3914:	str	r0, [fp, #-8]
    3918:	str	r1, [fp, #-12]
    391c:	str	r2, [fp, #-16]
    3920:	ldr	r0, [fp, #-8]
    3924:	movw	r1, #0
    3928:	cmp	r0, r1
    392c:	beq	3964 <coda_cursor_read_int16_array+0x5c>
    3930:	ldr	r0, [fp, #-8]
    3934:	ldr	r0, [r0, #4]
    3938:	cmp	r0, #0
    393c:	ble	3964 <coda_cursor_read_int16_array+0x5c>
    3940:	ldr	r0, [fp, #-8]
    3944:	add	r1, r0, #8
    3948:	ldr	r0, [r0, #4]
    394c:	sub	r0, r0, #1
    3950:	add	r0, r1, r0, lsl #4
    3954:	ldr	r0, [r0]
    3958:	movw	r1, #0
    395c:	cmp	r0, r1
    3960:	bne	398c <coda_cursor_read_int16_array+0x84>
    3964:	mvn	r0, #99	; 0x63
    3968:	movw	r1, #0
    396c:	movt	r1, #0
    3970:	movw	r2, #0
    3974:	movt	r2, #0
    3978:	movw	r3, #3030	; 0xbd6
    397c:	bl	0 <coda_set_error>
    3980:	mvn	r0, #0
    3984:	str	r0, [fp, #-4]
    3988:	b	3c3c <coda_cursor_read_int16_array+0x334>
    398c:	ldr	r0, [fp, #-12]
    3990:	movw	r1, #0
    3994:	cmp	r0, r1
    3998:	bne	39c4 <coda_cursor_read_int16_array+0xbc>
    399c:	mvn	r0, #99	; 0x63
    39a0:	movw	r1, #0
    39a4:	movt	r1, #0
    39a8:	movw	r2, #0
    39ac:	movt	r2, #0
    39b0:	movw	r3, #3035	; 0xbdb
    39b4:	bl	0 <coda_set_error>
    39b8:	mvn	r0, #0
    39bc:	str	r0, [fp, #-4]
    39c0:	b	3c3c <coda_cursor_read_int16_array+0x334>
    39c4:	ldr	r0, [fp, #-8]
    39c8:	add	r1, r0, #8
    39cc:	ldr	r0, [r0, #4]
    39d0:	sub	r0, r0, #1
    39d4:	add	r0, r1, r0, lsl #4
    39d8:	ldr	r0, [r0]
    39dc:	ldr	r0, [r0]
    39e0:	cmp	r0, #100	; 0x64
    39e4:	bcs	3a08 <coda_cursor_read_int16_array+0x100>
    39e8:	ldr	r0, [fp, #-8]
    39ec:	add	r1, r0, #8
    39f0:	ldr	r0, [r0, #4]
    39f4:	sub	r0, r0, #1
    39f8:	add	r0, r1, r0, lsl #4
    39fc:	ldr	r0, [r0]
    3a00:	str	r0, [sp, #12]
    3a04:	b	3a28 <coda_cursor_read_int16_array+0x120>
    3a08:	ldr	r0, [fp, #-8]
    3a0c:	add	r1, r0, #8
    3a10:	ldr	r0, [r0, #4]
    3a14:	sub	r0, r0, #1
    3a18:	add	r0, r1, r0, lsl #4
    3a1c:	ldr	r0, [r0]
    3a20:	ldr	r0, [r0, #4]
    3a24:	str	r0, [sp, #12]
    3a28:	ldr	r0, [sp, #12]
    3a2c:	str	r0, [sp, #24]
    3a30:	ldr	r0, [sp, #24]
    3a34:	ldr	r0, [r0, #8]
    3a38:	cmp	r0, #1
    3a3c:	beq	3a74 <coda_cursor_read_int16_array+0x16c>
    3a40:	ldr	r0, [sp, #24]
    3a44:	ldr	r0, [r0, #8]
    3a48:	bl	0 <coda_type_get_class_name>
    3a4c:	mvn	lr, #104	; 0x68
    3a50:	str	r0, [sp, #8]
    3a54:	mov	r0, lr
    3a58:	movw	r1, #0
    3a5c:	movt	r1, #0
    3a60:	ldr	r2, [sp, #8]
    3a64:	bl	0 <coda_set_error>
    3a68:	mvn	r0, #0
    3a6c:	str	r0, [fp, #-4]
    3a70:	b	3c3c <coda_cursor_read_int16_array+0x334>
    3a74:	ldr	r0, [sp, #24]
    3a78:	sub	r1, fp, #20
    3a7c:	bl	3304 <get_array_element_read_type>
    3a80:	cmp	r0, #0
    3a84:	beq	3a94 <coda_cursor_read_int16_array+0x18c>
    3a88:	mvn	r0, #0
    3a8c:	str	r0, [fp, #-4]
    3a90:	b	3c3c <coda_cursor_read_int16_array+0x334>
    3a94:	ldr	r0, [fp, #-20]	; 0xffffffec
    3a98:	cmp	r0, #0
    3a9c:	str	r0, [sp, #4]
    3aa0:	beq	3ac8 <coda_cursor_read_int16_array+0x1c0>
    3aa4:	b	3aa8 <coda_cursor_read_int16_array+0x1a0>
    3aa8:	ldr	r0, [sp, #4]
    3aac:	cmp	r0, #1
    3ab0:	beq	3b54 <coda_cursor_read_int16_array+0x24c>
    3ab4:	b	3ab8 <coda_cursor_read_int16_array+0x1b0>
    3ab8:	ldr	r0, [sp, #4]
    3abc:	cmp	r0, #2
    3ac0:	beq	3bdc <coda_cursor_read_int16_array+0x2d4>
    3ac4:	b	3c04 <coda_cursor_read_int16_array+0x2fc>
    3ac8:	ldr	r0, [fp, #-8]
    3acc:	ldr	r1, [fp, #-12]
    3ad0:	ldr	r2, [fp, #-16]
    3ad4:	bl	33a8 <read_int8_array>
    3ad8:	cmp	r0, #0
    3adc:	beq	3aec <coda_cursor_read_int16_array+0x1e4>
    3ae0:	mvn	r0, #0
    3ae4:	str	r0, [fp, #-4]
    3ae8:	b	3c3c <coda_cursor_read_int16_array+0x334>
    3aec:	ldr	r0, [fp, #-8]
    3af0:	add	r1, sp, #20
    3af4:	bl	0 <coda_cursor_get_num_elements>
    3af8:	cmp	r0, #0
    3afc:	beq	3b0c <coda_cursor_read_int16_array+0x204>
    3b00:	mvn	r0, #0
    3b04:	str	r0, [fp, #-4]
    3b08:	b	3c3c <coda_cursor_read_int16_array+0x334>
    3b0c:	ldr	r0, [sp, #20]
    3b10:	sub	r0, r0, #1
    3b14:	str	r0, [sp, #16]
    3b18:	ldr	r0, [sp, #16]
    3b1c:	cmp	r0, #0
    3b20:	blt	3b50 <coda_cursor_read_int16_array+0x248>
    3b24:	ldr	r0, [fp, #-12]
    3b28:	ldr	r1, [sp, #16]
    3b2c:	add	r2, r0, r1
    3b30:	ldrsb	r2, [r2]
    3b34:	add	r0, r0, r1, lsl #1
    3b38:	strh	r2, [r0]
    3b3c:	ldr	r0, [sp, #16]
    3b40:	mvn	r1, #0
    3b44:	add	r0, r0, r1
    3b48:	str	r0, [sp, #16]
    3b4c:	b	3b18 <coda_cursor_read_int16_array+0x210>
    3b50:	b	3c34 <coda_cursor_read_int16_array+0x32c>
    3b54:	ldr	r0, [fp, #-8]
    3b58:	ldr	r1, [fp, #-12]
    3b5c:	ldr	r2, [fp, #-16]
    3b60:	bl	3774 <read_uint8_array>
    3b64:	cmp	r0, #0
    3b68:	beq	3b78 <coda_cursor_read_int16_array+0x270>
    3b6c:	mvn	r0, #0
    3b70:	str	r0, [fp, #-4]
    3b74:	b	3c3c <coda_cursor_read_int16_array+0x334>
    3b78:	ldr	r0, [fp, #-8]
    3b7c:	add	r1, sp, #20
    3b80:	bl	0 <coda_cursor_get_num_elements>
    3b84:	cmp	r0, #0
    3b88:	beq	3b98 <coda_cursor_read_int16_array+0x290>
    3b8c:	mvn	r0, #0
    3b90:	str	r0, [fp, #-4]
    3b94:	b	3c3c <coda_cursor_read_int16_array+0x334>
    3b98:	ldr	r0, [sp, #20]
    3b9c:	sub	r0, r0, #1
    3ba0:	str	r0, [sp, #16]
    3ba4:	ldr	r0, [sp, #16]
    3ba8:	cmp	r0, #0
    3bac:	blt	3bd8 <coda_cursor_read_int16_array+0x2d0>
    3bb0:	ldr	r0, [fp, #-12]
    3bb4:	ldr	r1, [sp, #16]
    3bb8:	ldrb	r2, [r0, r1]
    3bbc:	add	r0, r0, r1, lsl #1
    3bc0:	strh	r2, [r0]
    3bc4:	ldr	r0, [sp, #16]
    3bc8:	mvn	r1, #0
    3bcc:	add	r0, r0, r1
    3bd0:	str	r0, [sp, #16]
    3bd4:	b	3ba4 <coda_cursor_read_int16_array+0x29c>
    3bd8:	b	3c34 <coda_cursor_read_int16_array+0x32c>
    3bdc:	ldr	r0, [fp, #-8]
    3be0:	ldr	r1, [fp, #-12]
    3be4:	ldr	r2, [fp, #-16]
    3be8:	bl	3c48 <read_int16_array>
    3bec:	cmp	r0, #0
    3bf0:	beq	3c00 <coda_cursor_read_int16_array+0x2f8>
    3bf4:	mvn	r0, #0
    3bf8:	str	r0, [fp, #-4]
    3bfc:	b	3c3c <coda_cursor_read_int16_array+0x334>
    3c00:	b	3c34 <coda_cursor_read_int16_array+0x32c>
    3c04:	ldr	r0, [fp, #-20]	; 0xffffffec
    3c08:	bl	0 <coda_type_get_native_type_name>
    3c0c:	mvn	lr, #104	; 0x68
    3c10:	str	r0, [sp]
    3c14:	mov	r0, lr
    3c18:	movw	r1, #0
    3c1c:	movt	r1, #0
    3c20:	ldr	r2, [sp]
    3c24:	bl	0 <coda_set_error>
    3c28:	mvn	r0, #0
    3c2c:	str	r0, [fp, #-4]
    3c30:	b	3c3c <coda_cursor_read_int16_array+0x334>
    3c34:	movw	r0, #0
    3c38:	str	r0, [fp, #-4]
    3c3c:	ldr	r0, [fp, #-4]
    3c40:	mov	sp, fp
    3c44:	pop	{fp, pc}

00003c48 <read_int16_array>:
    3c48:	push	{fp, lr}
    3c4c:	mov	fp, sp
    3c50:	sub	sp, sp, #24
    3c54:	str	r0, [fp, #-8]
    3c58:	str	r1, [sp, #12]
    3c5c:	str	r2, [sp, #8]
    3c60:	ldr	r0, [fp, #-8]
    3c64:	ldr	r1, [r0, #4]
    3c68:	add	r0, r0, r1, lsl #4
    3c6c:	ldr	r0, [r0, #-8]
    3c70:	ldr	r0, [r0]
    3c74:	cmp	r0, #0
    3c78:	str	r0, [sp, #4]
    3c7c:	beq	3cf4 <read_int16_array+0xac>
    3c80:	b	3c84 <read_int16_array+0x3c>
    3c84:	ldr	r0, [sp, #4]
    3c88:	cmp	r0, #1
    3c8c:	beq	3d0c <read_int16_array+0xc4>
    3c90:	b	3c94 <read_int16_array+0x4c>
    3c94:	ldr	r0, [sp, #4]
    3c98:	cmp	r0, #100	; 0x64
    3c9c:	beq	3d24 <read_int16_array+0xdc>
    3ca0:	b	3ca4 <read_int16_array+0x5c>
    3ca4:	ldr	r0, [sp, #4]
    3ca8:	cmp	r0, #101	; 0x65
    3cac:	beq	3d3c <read_int16_array+0xf4>
    3cb0:	b	3cb4 <read_int16_array+0x6c>
    3cb4:	ldr	r0, [sp, #4]
    3cb8:	cmp	r0, #102	; 0x66
    3cbc:	beq	3d54 <read_int16_array+0x10c>
    3cc0:	b	3cc4 <read_int16_array+0x7c>
    3cc4:	ldr	r0, [sp, #4]
    3cc8:	cmp	r0, #103	; 0x67
    3ccc:	beq	3d6c <read_int16_array+0x124>
    3cd0:	b	3cd4 <read_int16_array+0x8c>
    3cd4:	ldr	r0, [sp, #4]
    3cd8:	cmp	r0, #104	; 0x68
    3cdc:	beq	3d90 <read_int16_array+0x148>
    3ce0:	b	3ce4 <read_int16_array+0x9c>
    3ce4:	ldr	r0, [sp, #4]
    3ce8:	cmp	r0, #105	; 0x69
    3cec:	beq	3db4 <read_int16_array+0x16c>
    3cf0:	b	3dd4 <read_int16_array+0x18c>
    3cf4:	ldr	r0, [fp, #-8]
    3cf8:	ldr	r1, [sp, #12]
    3cfc:	ldr	r2, [sp, #8]
    3d00:	bl	0 <coda_ascii_cursor_read_int16_array>
    3d04:	str	r0, [fp, #-4]
    3d08:	b	3e00 <read_int16_array+0x1b8>
    3d0c:	ldr	r0, [fp, #-8]
    3d10:	ldr	r1, [sp, #12]
    3d14:	ldr	r2, [sp, #8]
    3d18:	bl	0 <coda_bin_cursor_read_int16_array>
    3d1c:	str	r0, [fp, #-4]
    3d20:	b	3e00 <read_int16_array+0x1b8>
    3d24:	ldr	r0, [fp, #-8]
    3d28:	ldr	r1, [sp, #12]
    3d2c:	ldr	r2, [sp, #8]
    3d30:	bl	0 <coda_mem_cursor_read_int16_array>
    3d34:	str	r0, [fp, #-4]
    3d38:	b	3e00 <read_int16_array+0x1b8>
    3d3c:	mvn	r0, #10
    3d40:	movw	r1, #0
    3d44:	bl	0 <coda_set_error>
    3d48:	mvn	r0, #0
    3d4c:	str	r0, [fp, #-4]
    3d50:	b	3e00 <read_int16_array+0x1b8>
    3d54:	mvn	r0, #12
    3d58:	movw	r1, #0
    3d5c:	bl	0 <coda_set_error>
    3d60:	mvn	r0, #0
    3d64:	str	r0, [fp, #-4]
    3d68:	b	3e00 <read_int16_array+0x1b8>
    3d6c:	ldr	r0, [fp, #-8]
    3d70:	ldr	r1, [sp, #12]
    3d74:	bl	0 <coda_cdf_cursor_read_int16_array>
    3d78:	cmp	r0, #0
    3d7c:	beq	3d8c <read_int16_array+0x144>
    3d80:	mvn	r0, #0
    3d84:	str	r0, [fp, #-4]
    3d88:	b	3e00 <read_int16_array+0x1b8>
    3d8c:	b	3dd4 <read_int16_array+0x18c>
    3d90:	ldr	r0, [fp, #-8]
    3d94:	ldr	r1, [sp, #12]
    3d98:	bl	0 <coda_netcdf_cursor_read_int16_array>
    3d9c:	cmp	r0, #0
    3da0:	beq	3db0 <read_int16_array+0x168>
    3da4:	mvn	r0, #0
    3da8:	str	r0, [fp, #-4]
    3dac:	b	3e00 <read_int16_array+0x1b8>
    3db0:	b	3dd4 <read_int16_array+0x18c>
    3db4:	movw	r0, #0
    3db8:	movt	r0, #0
    3dbc:	movw	r1, #0
    3dc0:	movt	r1, #0
    3dc4:	movw	r2, #916	; 0x394
    3dc8:	movw	r3, #0
    3dcc:	movt	r3, #0
    3dd0:	bl	0 <__assert_fail>
    3dd4:	ldr	r0, [sp, #8]
    3dd8:	cmp	r0, #0
    3ddc:	beq	3df8 <read_int16_array+0x1b0>
    3de0:	ldr	r0, [fp, #-8]
    3de4:	ldr	r1, [sp, #12]
    3de8:	movw	r2, #2
    3dec:	bl	cb58 <transpose_array>
    3df0:	str	r0, [fp, #-4]
    3df4:	b	3e00 <read_int16_array+0x1b8>
    3df8:	movw	r0, #0
    3dfc:	str	r0, [fp, #-4]
    3e00:	ldr	r0, [fp, #-4]
    3e04:	mov	sp, fp
    3e08:	pop	{fp, pc}

00003e0c <coda_cursor_read_uint16_array>:
    3e0c:	push	{fp, lr}
    3e10:	mov	fp, sp
    3e14:	sub	sp, sp, #48	; 0x30
    3e18:	str	r0, [fp, #-8]
    3e1c:	str	r1, [fp, #-12]
    3e20:	str	r2, [fp, #-16]
    3e24:	ldr	r0, [fp, #-8]
    3e28:	movw	r1, #0
    3e2c:	cmp	r0, r1
    3e30:	beq	3e68 <coda_cursor_read_uint16_array+0x5c>
    3e34:	ldr	r0, [fp, #-8]
    3e38:	ldr	r0, [r0, #4]
    3e3c:	cmp	r0, #0
    3e40:	ble	3e68 <coda_cursor_read_uint16_array+0x5c>
    3e44:	ldr	r0, [fp, #-8]
    3e48:	add	r1, r0, #8
    3e4c:	ldr	r0, [r0, #4]
    3e50:	sub	r0, r0, #1
    3e54:	add	r0, r1, r0, lsl #4
    3e58:	ldr	r0, [r0]
    3e5c:	movw	r1, #0
    3e60:	cmp	r0, r1
    3e64:	bne	3e90 <coda_cursor_read_uint16_array+0x84>
    3e68:	mvn	r0, #99	; 0x63
    3e6c:	movw	r1, #0
    3e70:	movt	r1, #0
    3e74:	movw	r2, #0
    3e78:	movt	r2, #0
    3e7c:	movw	r3, #3120	; 0xc30
    3e80:	bl	0 <coda_set_error>
    3e84:	mvn	r0, #0
    3e88:	str	r0, [fp, #-4]
    3e8c:	b	40a4 <coda_cursor_read_uint16_array+0x298>
    3e90:	ldr	r0, [fp, #-12]
    3e94:	movw	r1, #0
    3e98:	cmp	r0, r1
    3e9c:	bne	3ec8 <coda_cursor_read_uint16_array+0xbc>
    3ea0:	mvn	r0, #99	; 0x63
    3ea4:	movw	r1, #0
    3ea8:	movt	r1, #0
    3eac:	movw	r2, #0
    3eb0:	movt	r2, #0
    3eb4:	movw	r3, #3125	; 0xc35
    3eb8:	bl	0 <coda_set_error>
    3ebc:	mvn	r0, #0
    3ec0:	str	r0, [fp, #-4]
    3ec4:	b	40a4 <coda_cursor_read_uint16_array+0x298>
    3ec8:	ldr	r0, [fp, #-8]
    3ecc:	add	r1, r0, #8
    3ed0:	ldr	r0, [r0, #4]
    3ed4:	sub	r0, r0, #1
    3ed8:	add	r0, r1, r0, lsl #4
    3edc:	ldr	r0, [r0]
    3ee0:	ldr	r0, [r0]
    3ee4:	cmp	r0, #100	; 0x64
    3ee8:	bcs	3f0c <coda_cursor_read_uint16_array+0x100>
    3eec:	ldr	r0, [fp, #-8]
    3ef0:	add	r1, r0, #8
    3ef4:	ldr	r0, [r0, #4]
    3ef8:	sub	r0, r0, #1
    3efc:	add	r0, r1, r0, lsl #4
    3f00:	ldr	r0, [r0]
    3f04:	str	r0, [sp, #12]
    3f08:	b	3f2c <coda_cursor_read_uint16_array+0x120>
    3f0c:	ldr	r0, [fp, #-8]
    3f10:	add	r1, r0, #8
    3f14:	ldr	r0, [r0, #4]
    3f18:	sub	r0, r0, #1
    3f1c:	add	r0, r1, r0, lsl #4
    3f20:	ldr	r0, [r0]
    3f24:	ldr	r0, [r0, #4]
    3f28:	str	r0, [sp, #12]
    3f2c:	ldr	r0, [sp, #12]
    3f30:	str	r0, [sp, #24]
    3f34:	ldr	r0, [sp, #24]
    3f38:	ldr	r0, [r0, #8]
    3f3c:	cmp	r0, #1
    3f40:	beq	3f78 <coda_cursor_read_uint16_array+0x16c>
    3f44:	ldr	r0, [sp, #24]
    3f48:	ldr	r0, [r0, #8]
    3f4c:	bl	0 <coda_type_get_class_name>
    3f50:	mvn	lr, #104	; 0x68
    3f54:	str	r0, [sp, #8]
    3f58:	mov	r0, lr
    3f5c:	movw	r1, #0
    3f60:	movt	r1, #0
    3f64:	ldr	r2, [sp, #8]
    3f68:	bl	0 <coda_set_error>
    3f6c:	mvn	r0, #0
    3f70:	str	r0, [fp, #-4]
    3f74:	b	40a4 <coda_cursor_read_uint16_array+0x298>
    3f78:	ldr	r0, [sp, #24]
    3f7c:	sub	r1, fp, #20
    3f80:	bl	3304 <get_array_element_read_type>
    3f84:	cmp	r0, #0
    3f88:	beq	3f98 <coda_cursor_read_uint16_array+0x18c>
    3f8c:	mvn	r0, #0
    3f90:	str	r0, [fp, #-4]
    3f94:	b	40a4 <coda_cursor_read_uint16_array+0x298>
    3f98:	ldr	r0, [fp, #-20]	; 0xffffffec
    3f9c:	cmp	r0, #1
    3fa0:	str	r0, [sp, #4]
    3fa4:	beq	3fbc <coda_cursor_read_uint16_array+0x1b0>
    3fa8:	b	3fac <coda_cursor_read_uint16_array+0x1a0>
    3fac:	ldr	r0, [sp, #4]
    3fb0:	cmp	r0, #3
    3fb4:	beq	4044 <coda_cursor_read_uint16_array+0x238>
    3fb8:	b	406c <coda_cursor_read_uint16_array+0x260>
    3fbc:	ldr	r0, [fp, #-8]
    3fc0:	ldr	r1, [fp, #-12]
    3fc4:	ldr	r2, [fp, #-16]
    3fc8:	bl	3774 <read_uint8_array>
    3fcc:	cmp	r0, #0
    3fd0:	beq	3fe0 <coda_cursor_read_uint16_array+0x1d4>
    3fd4:	mvn	r0, #0
    3fd8:	str	r0, [fp, #-4]
    3fdc:	b	40a4 <coda_cursor_read_uint16_array+0x298>
    3fe0:	ldr	r0, [fp, #-8]
    3fe4:	add	r1, sp, #20
    3fe8:	bl	0 <coda_cursor_get_num_elements>
    3fec:	cmp	r0, #0
    3ff0:	beq	4000 <coda_cursor_read_uint16_array+0x1f4>
    3ff4:	mvn	r0, #0
    3ff8:	str	r0, [fp, #-4]
    3ffc:	b	40a4 <coda_cursor_read_uint16_array+0x298>
    4000:	ldr	r0, [sp, #20]
    4004:	sub	r0, r0, #1
    4008:	str	r0, [sp, #16]
    400c:	ldr	r0, [sp, #16]
    4010:	cmp	r0, #0
    4014:	blt	4040 <coda_cursor_read_uint16_array+0x234>
    4018:	ldr	r0, [fp, #-12]
    401c:	ldr	r1, [sp, #16]
    4020:	ldrb	r2, [r0, r1]
    4024:	add	r0, r0, r1, lsl #1
    4028:	strh	r2, [r0]
    402c:	ldr	r0, [sp, #16]
    4030:	mvn	r1, #0
    4034:	add	r0, r0, r1
    4038:	str	r0, [sp, #16]
    403c:	b	400c <coda_cursor_read_uint16_array+0x200>
    4040:	b	409c <coda_cursor_read_uint16_array+0x290>
    4044:	ldr	r0, [fp, #-8]
    4048:	ldr	r1, [fp, #-12]
    404c:	ldr	r2, [fp, #-16]
    4050:	bl	40b0 <read_uint16_array>
    4054:	cmp	r0, #0
    4058:	beq	4068 <coda_cursor_read_uint16_array+0x25c>
    405c:	mvn	r0, #0
    4060:	str	r0, [fp, #-4]
    4064:	b	40a4 <coda_cursor_read_uint16_array+0x298>
    4068:	b	409c <coda_cursor_read_uint16_array+0x290>
    406c:	ldr	r0, [fp, #-20]	; 0xffffffec
    4070:	bl	0 <coda_type_get_native_type_name>
    4074:	mvn	lr, #104	; 0x68
    4078:	str	r0, [sp]
    407c:	mov	r0, lr
    4080:	movw	r1, #0
    4084:	movt	r1, #0
    4088:	ldr	r2, [sp]
    408c:	bl	0 <coda_set_error>
    4090:	mvn	r0, #0
    4094:	str	r0, [fp, #-4]
    4098:	b	40a4 <coda_cursor_read_uint16_array+0x298>
    409c:	movw	r0, #0
    40a0:	str	r0, [fp, #-4]
    40a4:	ldr	r0, [fp, #-4]
    40a8:	mov	sp, fp
    40ac:	pop	{fp, pc}

000040b0 <read_uint16_array>:
    40b0:	push	{fp, lr}
    40b4:	mov	fp, sp
    40b8:	sub	sp, sp, #24
    40bc:	str	r0, [fp, #-8]
    40c0:	str	r1, [sp, #12]
    40c4:	str	r2, [sp, #8]
    40c8:	ldr	r0, [fp, #-8]
    40cc:	ldr	r1, [r0, #4]
    40d0:	add	r0, r0, r1, lsl #4
    40d4:	ldr	r0, [r0, #-8]
    40d8:	ldr	r0, [r0]
    40dc:	cmp	r0, #0
    40e0:	str	r0, [sp, #4]
    40e4:	beq	4150 <read_uint16_array+0xa0>
    40e8:	b	40ec <read_uint16_array+0x3c>
    40ec:	ldr	r0, [sp, #4]
    40f0:	cmp	r0, #1
    40f4:	beq	4168 <read_uint16_array+0xb8>
    40f8:	b	40fc <read_uint16_array+0x4c>
    40fc:	ldr	r0, [sp, #4]
    4100:	cmp	r0, #100	; 0x64
    4104:	beq	4180 <read_uint16_array+0xd0>
    4108:	b	410c <read_uint16_array+0x5c>
    410c:	ldr	r0, [sp, #4]
    4110:	cmp	r0, #101	; 0x65
    4114:	beq	4198 <read_uint16_array+0xe8>
    4118:	b	411c <read_uint16_array+0x6c>
    411c:	ldr	r0, [sp, #4]
    4120:	cmp	r0, #102	; 0x66
    4124:	beq	41b0 <read_uint16_array+0x100>
    4128:	b	412c <read_uint16_array+0x7c>
    412c:	ldr	r0, [sp, #4]
    4130:	cmp	r0, #103	; 0x67
    4134:	beq	41c8 <read_uint16_array+0x118>
    4138:	b	413c <read_uint16_array+0x8c>
    413c:	ldr	r0, [sp, #4]
    4140:	sub	r1, r0, #104	; 0x68
    4144:	cmp	r1, #2
    4148:	bcc	41ec <read_uint16_array+0x13c>
    414c:	b	420c <read_uint16_array+0x15c>
    4150:	ldr	r0, [fp, #-8]
    4154:	ldr	r1, [sp, #12]
    4158:	ldr	r2, [sp, #8]
    415c:	bl	0 <coda_ascii_cursor_read_uint16_array>
    4160:	str	r0, [fp, #-4]
    4164:	b	4238 <read_uint16_array+0x188>
    4168:	ldr	r0, [fp, #-8]
    416c:	ldr	r1, [sp, #12]
    4170:	ldr	r2, [sp, #8]
    4174:	bl	0 <coda_bin_cursor_read_uint16_array>
    4178:	str	r0, [fp, #-4]
    417c:	b	4238 <read_uint16_array+0x188>
    4180:	ldr	r0, [fp, #-8]
    4184:	ldr	r1, [sp, #12]
    4188:	ldr	r2, [sp, #8]
    418c:	bl	0 <coda_mem_cursor_read_uint16_array>
    4190:	str	r0, [fp, #-4]
    4194:	b	4238 <read_uint16_array+0x188>
    4198:	mvn	r0, #10
    419c:	movw	r1, #0
    41a0:	bl	0 <coda_set_error>
    41a4:	mvn	r0, #0
    41a8:	str	r0, [fp, #-4]
    41ac:	b	4238 <read_uint16_array+0x188>
    41b0:	mvn	r0, #12
    41b4:	movw	r1, #0
    41b8:	bl	0 <coda_set_error>
    41bc:	mvn	r0, #0
    41c0:	str	r0, [fp, #-4]
    41c4:	b	4238 <read_uint16_array+0x188>
    41c8:	ldr	r0, [fp, #-8]
    41cc:	ldr	r1, [sp, #12]
    41d0:	bl	0 <coda_cdf_cursor_read_uint16_array>
    41d4:	cmp	r0, #0
    41d8:	beq	41e8 <read_uint16_array+0x138>
    41dc:	mvn	r0, #0
    41e0:	str	r0, [fp, #-4]
    41e4:	b	4238 <read_uint16_array+0x188>
    41e8:	b	420c <read_uint16_array+0x15c>
    41ec:	movw	r0, #0
    41f0:	movt	r0, #0
    41f4:	movw	r1, #0
    41f8:	movt	r1, #0
    41fc:	movw	r2, #968	; 0x3c8
    4200:	movw	r3, #0
    4204:	movt	r3, #0
    4208:	bl	0 <__assert_fail>
    420c:	ldr	r0, [sp, #8]
    4210:	cmp	r0, #0
    4214:	beq	4230 <read_uint16_array+0x180>
    4218:	ldr	r0, [fp, #-8]
    421c:	ldr	r1, [sp, #12]
    4220:	movw	r2, #2
    4224:	bl	cb58 <transpose_array>
    4228:	str	r0, [fp, #-4]
    422c:	b	4238 <read_uint16_array+0x188>
    4230:	movw	r0, #0
    4234:	str	r0, [fp, #-4]
    4238:	ldr	r0, [fp, #-4]
    423c:	mov	sp, fp
    4240:	pop	{fp, pc}

00004244 <coda_cursor_read_int32_array>:
    4244:	push	{fp, lr}
    4248:	mov	fp, sp
    424c:	sub	sp, sp, #48	; 0x30
    4250:	str	r0, [fp, #-8]
    4254:	str	r1, [fp, #-12]
    4258:	str	r2, [fp, #-16]
    425c:	ldr	r0, [fp, #-8]
    4260:	movw	r1, #0
    4264:	cmp	r0, r1
    4268:	beq	42a0 <coda_cursor_read_int32_array+0x5c>
    426c:	ldr	r0, [fp, #-8]
    4270:	ldr	r0, [r0, #4]
    4274:	cmp	r0, #0
    4278:	ble	42a0 <coda_cursor_read_int32_array+0x5c>
    427c:	ldr	r0, [fp, #-8]
    4280:	add	r1, r0, #8
    4284:	ldr	r0, [r0, #4]
    4288:	sub	r0, r0, #1
    428c:	add	r0, r1, r0, lsl #4
    4290:	ldr	r0, [r0]
    4294:	movw	r1, #0
    4298:	cmp	r0, r1
    429c:	bne	42c8 <coda_cursor_read_int32_array+0x84>
    42a0:	mvn	r0, #99	; 0x63
    42a4:	movw	r1, #0
    42a8:	movt	r1, #0
    42ac:	movw	r2, #0
    42b0:	movt	r2, #0
    42b4:	movw	r3, #3199	; 0xc7f
    42b8:	bl	0 <coda_set_error>
    42bc:	mvn	r0, #0
    42c0:	str	r0, [fp, #-4]
    42c4:	b	4690 <coda_cursor_read_int32_array+0x44c>
    42c8:	ldr	r0, [fp, #-12]
    42cc:	movw	r1, #0
    42d0:	cmp	r0, r1
    42d4:	bne	4300 <coda_cursor_read_int32_array+0xbc>
    42d8:	mvn	r0, #99	; 0x63
    42dc:	movw	r1, #0
    42e0:	movt	r1, #0
    42e4:	movw	r2, #0
    42e8:	movt	r2, #0
    42ec:	movw	r3, #3204	; 0xc84
    42f0:	bl	0 <coda_set_error>
    42f4:	mvn	r0, #0
    42f8:	str	r0, [fp, #-4]
    42fc:	b	4690 <coda_cursor_read_int32_array+0x44c>
    4300:	ldr	r0, [fp, #-8]
    4304:	add	r1, r0, #8
    4308:	ldr	r0, [r0, #4]
    430c:	sub	r0, r0, #1
    4310:	add	r0, r1, r0, lsl #4
    4314:	ldr	r0, [r0]
    4318:	ldr	r0, [r0]
    431c:	cmp	r0, #100	; 0x64
    4320:	bcs	4344 <coda_cursor_read_int32_array+0x100>
    4324:	ldr	r0, [fp, #-8]
    4328:	add	r1, r0, #8
    432c:	ldr	r0, [r0, #4]
    4330:	sub	r0, r0, #1
    4334:	add	r0, r1, r0, lsl #4
    4338:	ldr	r0, [r0]
    433c:	str	r0, [sp, #12]
    4340:	b	4364 <coda_cursor_read_int32_array+0x120>
    4344:	ldr	r0, [fp, #-8]
    4348:	add	r1, r0, #8
    434c:	ldr	r0, [r0, #4]
    4350:	sub	r0, r0, #1
    4354:	add	r0, r1, r0, lsl #4
    4358:	ldr	r0, [r0]
    435c:	ldr	r0, [r0, #4]
    4360:	str	r0, [sp, #12]
    4364:	ldr	r0, [sp, #12]
    4368:	str	r0, [sp, #24]
    436c:	ldr	r0, [sp, #24]
    4370:	ldr	r0, [r0, #8]
    4374:	cmp	r0, #1
    4378:	beq	43b0 <coda_cursor_read_int32_array+0x16c>
    437c:	ldr	r0, [sp, #24]
    4380:	ldr	r0, [r0, #8]
    4384:	bl	0 <coda_type_get_class_name>
    4388:	mvn	lr, #104	; 0x68
    438c:	str	r0, [sp, #8]
    4390:	mov	r0, lr
    4394:	movw	r1, #0
    4398:	movt	r1, #0
    439c:	ldr	r2, [sp, #8]
    43a0:	bl	0 <coda_set_error>
    43a4:	mvn	r0, #0
    43a8:	str	r0, [fp, #-4]
    43ac:	b	4690 <coda_cursor_read_int32_array+0x44c>
    43b0:	ldr	r0, [sp, #24]
    43b4:	sub	r1, fp, #20
    43b8:	bl	3304 <get_array_element_read_type>
    43bc:	cmp	r0, #0
    43c0:	beq	43d0 <coda_cursor_read_int32_array+0x18c>
    43c4:	mvn	r0, #0
    43c8:	str	r0, [fp, #-4]
    43cc:	b	4690 <coda_cursor_read_int32_array+0x44c>
    43d0:	ldr	r0, [fp, #-20]	; 0xffffffec
    43d4:	cmp	r0, #4
    43d8:	str	r0, [sp, #4]
    43dc:	bhi	4658 <coda_cursor_read_int32_array+0x414>
    43e0:	add	r0, pc, #8
    43e4:	ldr	r1, [sp, #4]
    43e8:	ldr	r0, [r0, r1, lsl #2]
    43ec:	mov	pc, r0
    43f0:	.word	0x00004404
    43f4:	.word	0x00004490
    43f8:	.word	0x00004518
    43fc:	.word	0x000045a4
    4400:	.word	0x00004630
    4404:	ldr	r0, [fp, #-8]
    4408:	ldr	r1, [fp, #-12]
    440c:	ldr	r2, [fp, #-16]
    4410:	bl	33a8 <read_int8_array>
    4414:	cmp	r0, #0
    4418:	beq	4428 <coda_cursor_read_int32_array+0x1e4>
    441c:	mvn	r0, #0
    4420:	str	r0, [fp, #-4]
    4424:	b	4690 <coda_cursor_read_int32_array+0x44c>
    4428:	ldr	r0, [fp, #-8]
    442c:	add	r1, sp, #20
    4430:	bl	0 <coda_cursor_get_num_elements>
    4434:	cmp	r0, #0
    4438:	beq	4448 <coda_cursor_read_int32_array+0x204>
    443c:	mvn	r0, #0
    4440:	str	r0, [fp, #-4]
    4444:	b	4690 <coda_cursor_read_int32_array+0x44c>
    4448:	ldr	r0, [sp, #20]
    444c:	sub	r0, r0, #1
    4450:	str	r0, [sp, #16]
    4454:	ldr	r0, [sp, #16]
    4458:	cmp	r0, #0
    445c:	blt	448c <coda_cursor_read_int32_array+0x248>
    4460:	ldr	r0, [fp, #-12]
    4464:	ldr	r1, [sp, #16]
    4468:	add	r2, r0, r1
    446c:	ldrsb	r2, [r2]
    4470:	add	r0, r0, r1, lsl #2
    4474:	str	r2, [r0]
    4478:	ldr	r0, [sp, #16]
    447c:	mvn	r1, #0
    4480:	add	r0, r0, r1
    4484:	str	r0, [sp, #16]
    4488:	b	4454 <coda_cursor_read_int32_array+0x210>
    448c:	b	4688 <coda_cursor_read_int32_array+0x444>
    4490:	ldr	r0, [fp, #-8]
    4494:	ldr	r1, [fp, #-12]
    4498:	ldr	r2, [fp, #-16]
    449c:	bl	3774 <read_uint8_array>
    44a0:	cmp	r0, #0
    44a4:	beq	44b4 <coda_cursor_read_int32_array+0x270>
    44a8:	mvn	r0, #0
    44ac:	str	r0, [fp, #-4]
    44b0:	b	4690 <coda_cursor_read_int32_array+0x44c>
    44b4:	ldr	r0, [fp, #-8]
    44b8:	add	r1, sp, #20
    44bc:	bl	0 <coda_cursor_get_num_elements>
    44c0:	cmp	r0, #0
    44c4:	beq	44d4 <coda_cursor_read_int32_array+0x290>
    44c8:	mvn	r0, #0
    44cc:	str	r0, [fp, #-4]
    44d0:	b	4690 <coda_cursor_read_int32_array+0x44c>
    44d4:	ldr	r0, [sp, #20]
    44d8:	sub	r0, r0, #1
    44dc:	str	r0, [sp, #16]
    44e0:	ldr	r0, [sp, #16]
    44e4:	cmp	r0, #0
    44e8:	blt	4514 <coda_cursor_read_int32_array+0x2d0>
    44ec:	ldr	r0, [fp, #-12]
    44f0:	ldr	r1, [sp, #16]
    44f4:	ldrb	r2, [r0, r1]
    44f8:	add	r0, r0, r1, lsl #2
    44fc:	str	r2, [r0]
    4500:	ldr	r0, [sp, #16]
    4504:	mvn	r1, #0
    4508:	add	r0, r0, r1
    450c:	str	r0, [sp, #16]
    4510:	b	44e0 <coda_cursor_read_int32_array+0x29c>
    4514:	b	4688 <coda_cursor_read_int32_array+0x444>
    4518:	ldr	r0, [fp, #-8]
    451c:	ldr	r1, [fp, #-12]
    4520:	ldr	r2, [fp, #-16]
    4524:	bl	3c48 <read_int16_array>
    4528:	cmp	r0, #0
    452c:	beq	453c <coda_cursor_read_int32_array+0x2f8>
    4530:	mvn	r0, #0
    4534:	str	r0, [fp, #-4]
    4538:	b	4690 <coda_cursor_read_int32_array+0x44c>
    453c:	ldr	r0, [fp, #-8]
    4540:	add	r1, sp, #20
    4544:	bl	0 <coda_cursor_get_num_elements>
    4548:	cmp	r0, #0
    454c:	beq	455c <coda_cursor_read_int32_array+0x318>
    4550:	mvn	r0, #0
    4554:	str	r0, [fp, #-4]
    4558:	b	4690 <coda_cursor_read_int32_array+0x44c>
    455c:	ldr	r0, [sp, #20]
    4560:	sub	r0, r0, #1
    4564:	str	r0, [sp, #16]
    4568:	ldr	r0, [sp, #16]
    456c:	cmp	r0, #0
    4570:	blt	45a0 <coda_cursor_read_int32_array+0x35c>
    4574:	ldr	r0, [fp, #-12]
    4578:	ldr	r1, [sp, #16]
    457c:	add	r2, r0, r1, lsl #1
    4580:	ldrsh	r2, [r2]
    4584:	add	r0, r0, r1, lsl #2
    4588:	str	r2, [r0]
    458c:	ldr	r0, [sp, #16]
    4590:	mvn	r1, #0
    4594:	add	r0, r0, r1
    4598:	str	r0, [sp, #16]
    459c:	b	4568 <coda_cursor_read_int32_array+0x324>
    45a0:	b	4688 <coda_cursor_read_int32_array+0x444>
    45a4:	ldr	r0, [fp, #-8]
    45a8:	ldr	r1, [fp, #-12]
    45ac:	ldr	r2, [fp, #-16]
    45b0:	bl	40b0 <read_uint16_array>
    45b4:	cmp	r0, #0
    45b8:	beq	45c8 <coda_cursor_read_int32_array+0x384>
    45bc:	mvn	r0, #0
    45c0:	str	r0, [fp, #-4]
    45c4:	b	4690 <coda_cursor_read_int32_array+0x44c>
    45c8:	ldr	r0, [fp, #-8]
    45cc:	add	r1, sp, #20
    45d0:	bl	0 <coda_cursor_get_num_elements>
    45d4:	cmp	r0, #0
    45d8:	beq	45e8 <coda_cursor_read_int32_array+0x3a4>
    45dc:	mvn	r0, #0
    45e0:	str	r0, [fp, #-4]
    45e4:	b	4690 <coda_cursor_read_int32_array+0x44c>
    45e8:	ldr	r0, [sp, #20]
    45ec:	sub	r0, r0, #1
    45f0:	str	r0, [sp, #16]
    45f4:	ldr	r0, [sp, #16]
    45f8:	cmp	r0, #0
    45fc:	blt	462c <coda_cursor_read_int32_array+0x3e8>
    4600:	ldr	r0, [fp, #-12]
    4604:	ldr	r1, [sp, #16]
    4608:	add	r2, r0, r1, lsl #1
    460c:	ldrh	r2, [r2]
    4610:	add	r0, r0, r1, lsl #2
    4614:	str	r2, [r0]
    4618:	ldr	r0, [sp, #16]
    461c:	mvn	r1, #0
    4620:	add	r0, r0, r1
    4624:	str	r0, [sp, #16]
    4628:	b	45f4 <coda_cursor_read_int32_array+0x3b0>
    462c:	b	4688 <coda_cursor_read_int32_array+0x444>
    4630:	ldr	r0, [fp, #-8]
    4634:	ldr	r1, [fp, #-12]
    4638:	ldr	r2, [fp, #-16]
    463c:	bl	469c <read_int32_array>
    4640:	cmp	r0, #0
    4644:	beq	4654 <coda_cursor_read_int32_array+0x410>
    4648:	mvn	r0, #0
    464c:	str	r0, [fp, #-4]
    4650:	b	4690 <coda_cursor_read_int32_array+0x44c>
    4654:	b	4688 <coda_cursor_read_int32_array+0x444>
    4658:	ldr	r0, [fp, #-20]	; 0xffffffec
    465c:	bl	0 <coda_type_get_native_type_name>
    4660:	mvn	lr, #104	; 0x68
    4664:	str	r0, [sp]
    4668:	mov	r0, lr
    466c:	movw	r1, #0
    4670:	movt	r1, #0
    4674:	ldr	r2, [sp]
    4678:	bl	0 <coda_set_error>
    467c:	mvn	r0, #0
    4680:	str	r0, [fp, #-4]
    4684:	b	4690 <coda_cursor_read_int32_array+0x44c>
    4688:	movw	r0, #0
    468c:	str	r0, [fp, #-4]
    4690:	ldr	r0, [fp, #-4]
    4694:	mov	sp, fp
    4698:	pop	{fp, pc}

0000469c <read_int32_array>:
    469c:	push	{fp, lr}
    46a0:	mov	fp, sp
    46a4:	sub	sp, sp, #24
    46a8:	str	r0, [fp, #-8]
    46ac:	str	r1, [sp, #12]
    46b0:	str	r2, [sp, #8]
    46b4:	ldr	r0, [fp, #-8]
    46b8:	ldr	r1, [r0, #4]
    46bc:	add	r0, r0, r1, lsl #4
    46c0:	ldr	r0, [r0, #-8]
    46c4:	ldr	r0, [r0]
    46c8:	cmp	r0, #0
    46cc:	str	r0, [sp, #4]
    46d0:	beq	4748 <read_int32_array+0xac>
    46d4:	b	46d8 <read_int32_array+0x3c>
    46d8:	ldr	r0, [sp, #4]
    46dc:	cmp	r0, #1
    46e0:	beq	4760 <read_int32_array+0xc4>
    46e4:	b	46e8 <read_int32_array+0x4c>
    46e8:	ldr	r0, [sp, #4]
    46ec:	cmp	r0, #100	; 0x64
    46f0:	beq	4778 <read_int32_array+0xdc>
    46f4:	b	46f8 <read_int32_array+0x5c>
    46f8:	ldr	r0, [sp, #4]
    46fc:	cmp	r0, #101	; 0x65
    4700:	beq	4790 <read_int32_array+0xf4>
    4704:	b	4708 <read_int32_array+0x6c>
    4708:	ldr	r0, [sp, #4]
    470c:	cmp	r0, #102	; 0x66
    4710:	beq	47a8 <read_int32_array+0x10c>
    4714:	b	4718 <read_int32_array+0x7c>
    4718:	ldr	r0, [sp, #4]
    471c:	cmp	r0, #103	; 0x67
    4720:	beq	47c0 <read_int32_array+0x124>
    4724:	b	4728 <read_int32_array+0x8c>
    4728:	ldr	r0, [sp, #4]
    472c:	cmp	r0, #104	; 0x68
    4730:	beq	47e4 <read_int32_array+0x148>
    4734:	b	4738 <read_int32_array+0x9c>
    4738:	ldr	r0, [sp, #4]
    473c:	cmp	r0, #105	; 0x69
    4740:	beq	4808 <read_int32_array+0x16c>
    4744:	b	4828 <read_int32_array+0x18c>
    4748:	ldr	r0, [fp, #-8]
    474c:	ldr	r1, [sp, #12]
    4750:	ldr	r2, [sp, #8]
    4754:	bl	0 <coda_ascii_cursor_read_int32_array>
    4758:	str	r0, [fp, #-4]
    475c:	b	4854 <read_int32_array+0x1b8>
    4760:	ldr	r0, [fp, #-8]
    4764:	ldr	r1, [sp, #12]
    4768:	ldr	r2, [sp, #8]
    476c:	bl	0 <coda_bin_cursor_read_int32_array>
    4770:	str	r0, [fp, #-4]
    4774:	b	4854 <read_int32_array+0x1b8>
    4778:	ldr	r0, [fp, #-8]
    477c:	ldr	r1, [sp, #12]
    4780:	ldr	r2, [sp, #8]
    4784:	bl	0 <coda_mem_cursor_read_int32_array>
    4788:	str	r0, [fp, #-4]
    478c:	b	4854 <read_int32_array+0x1b8>
    4790:	mvn	r0, #10
    4794:	movw	r1, #0
    4798:	bl	0 <coda_set_error>
    479c:	mvn	r0, #0
    47a0:	str	r0, [fp, #-4]
    47a4:	b	4854 <read_int32_array+0x1b8>
    47a8:	mvn	r0, #12
    47ac:	movw	r1, #0
    47b0:	bl	0 <coda_set_error>
    47b4:	mvn	r0, #0
    47b8:	str	r0, [fp, #-4]
    47bc:	b	4854 <read_int32_array+0x1b8>
    47c0:	ldr	r0, [fp, #-8]
    47c4:	ldr	r1, [sp, #12]
    47c8:	bl	0 <coda_cdf_cursor_read_int32_array>
    47cc:	cmp	r0, #0
    47d0:	beq	47e0 <read_int32_array+0x144>
    47d4:	mvn	r0, #0
    47d8:	str	r0, [fp, #-4]
    47dc:	b	4854 <read_int32_array+0x1b8>
    47e0:	b	4828 <read_int32_array+0x18c>
    47e4:	ldr	r0, [fp, #-8]
    47e8:	ldr	r1, [sp, #12]
    47ec:	bl	0 <coda_netcdf_cursor_read_int32_array>
    47f0:	cmp	r0, #0
    47f4:	beq	4804 <read_int32_array+0x168>
    47f8:	mvn	r0, #0
    47fc:	str	r0, [fp, #-4]
    4800:	b	4854 <read_int32_array+0x1b8>
    4804:	b	4828 <read_int32_array+0x18c>
    4808:	movw	r0, #0
    480c:	movt	r0, #0
    4810:	movw	r1, #0
    4814:	movt	r1, #0
    4818:	movw	r2, #1025	; 0x401
    481c:	movw	r3, #0
    4820:	movt	r3, #0
    4824:	bl	0 <__assert_fail>
    4828:	ldr	r0, [sp, #8]
    482c:	cmp	r0, #0
    4830:	beq	484c <read_int32_array+0x1b0>
    4834:	ldr	r0, [fp, #-8]
    4838:	ldr	r1, [sp, #12]
    483c:	movw	r2, #4
    4840:	bl	cb58 <transpose_array>
    4844:	str	r0, [fp, #-4]
    4848:	b	4854 <read_int32_array+0x1b8>
    484c:	movw	r0, #0
    4850:	str	r0, [fp, #-4]
    4854:	ldr	r0, [fp, #-4]
    4858:	mov	sp, fp
    485c:	pop	{fp, pc}

00004860 <coda_cursor_read_uint32_array>:
    4860:	push	{fp, lr}
    4864:	mov	fp, sp
    4868:	sub	sp, sp, #48	; 0x30
    486c:	str	r0, [fp, #-8]
    4870:	str	r1, [fp, #-12]
    4874:	str	r2, [fp, #-16]
    4878:	ldr	r0, [fp, #-8]
    487c:	movw	r1, #0
    4880:	cmp	r0, r1
    4884:	beq	48bc <coda_cursor_read_uint32_array+0x5c>
    4888:	ldr	r0, [fp, #-8]
    488c:	ldr	r0, [r0, #4]
    4890:	cmp	r0, #0
    4894:	ble	48bc <coda_cursor_read_uint32_array+0x5c>
    4898:	ldr	r0, [fp, #-8]
    489c:	add	r1, r0, #8
    48a0:	ldr	r0, [r0, #4]
    48a4:	sub	r0, r0, #1
    48a8:	add	r0, r1, r0, lsl #4
    48ac:	ldr	r0, [r0]
    48b0:	movw	r1, #0
    48b4:	cmp	r0, r1
    48b8:	bne	48e4 <coda_cursor_read_uint32_array+0x84>
    48bc:	mvn	r0, #99	; 0x63
    48c0:	movw	r1, #0
    48c4:	movt	r1, #0
    48c8:	movw	r2, #0
    48cc:	movt	r2, #0
    48d0:	movw	r3, #3318	; 0xcf6
    48d4:	bl	0 <coda_set_error>
    48d8:	mvn	r0, #0
    48dc:	str	r0, [fp, #-4]
    48e0:	b	4b94 <coda_cursor_read_uint32_array+0x334>
    48e4:	ldr	r0, [fp, #-12]
    48e8:	movw	r1, #0
    48ec:	cmp	r0, r1
    48f0:	bne	491c <coda_cursor_read_uint32_array+0xbc>
    48f4:	mvn	r0, #99	; 0x63
    48f8:	movw	r1, #0
    48fc:	movt	r1, #0
    4900:	movw	r2, #0
    4904:	movt	r2, #0
    4908:	movw	r3, #3323	; 0xcfb
    490c:	bl	0 <coda_set_error>
    4910:	mvn	r0, #0
    4914:	str	r0, [fp, #-4]
    4918:	b	4b94 <coda_cursor_read_uint32_array+0x334>
    491c:	ldr	r0, [fp, #-8]
    4920:	add	r1, r0, #8
    4924:	ldr	r0, [r0, #4]
    4928:	sub	r0, r0, #1
    492c:	add	r0, r1, r0, lsl #4
    4930:	ldr	r0, [r0]
    4934:	ldr	r0, [r0]
    4938:	cmp	r0, #100	; 0x64
    493c:	bcs	4960 <coda_cursor_read_uint32_array+0x100>
    4940:	ldr	r0, [fp, #-8]
    4944:	add	r1, r0, #8
    4948:	ldr	r0, [r0, #4]
    494c:	sub	r0, r0, #1
    4950:	add	r0, r1, r0, lsl #4
    4954:	ldr	r0, [r0]
    4958:	str	r0, [sp, #12]
    495c:	b	4980 <coda_cursor_read_uint32_array+0x120>
    4960:	ldr	r0, [fp, #-8]
    4964:	add	r1, r0, #8
    4968:	ldr	r0, [r0, #4]
    496c:	sub	r0, r0, #1
    4970:	add	r0, r1, r0, lsl #4
    4974:	ldr	r0, [r0]
    4978:	ldr	r0, [r0, #4]
    497c:	str	r0, [sp, #12]
    4980:	ldr	r0, [sp, #12]
    4984:	str	r0, [sp, #24]
    4988:	ldr	r0, [sp, #24]
    498c:	ldr	r0, [r0, #8]
    4990:	cmp	r0, #1
    4994:	beq	49cc <coda_cursor_read_uint32_array+0x16c>
    4998:	ldr	r0, [sp, #24]
    499c:	ldr	r0, [r0, #8]
    49a0:	bl	0 <coda_type_get_class_name>
    49a4:	mvn	lr, #104	; 0x68
    49a8:	str	r0, [sp, #8]
    49ac:	mov	r0, lr
    49b0:	movw	r1, #0
    49b4:	movt	r1, #0
    49b8:	ldr	r2, [sp, #8]
    49bc:	bl	0 <coda_set_error>
    49c0:	mvn	r0, #0
    49c4:	str	r0, [fp, #-4]
    49c8:	b	4b94 <coda_cursor_read_uint32_array+0x334>
    49cc:	ldr	r0, [sp, #24]
    49d0:	sub	r1, fp, #20
    49d4:	bl	3304 <get_array_element_read_type>
    49d8:	cmp	r0, #0
    49dc:	beq	49ec <coda_cursor_read_uint32_array+0x18c>
    49e0:	mvn	r0, #0
    49e4:	str	r0, [fp, #-4]
    49e8:	b	4b94 <coda_cursor_read_uint32_array+0x334>
    49ec:	ldr	r0, [fp, #-20]	; 0xffffffec
    49f0:	cmp	r0, #1
    49f4:	str	r0, [sp, #4]
    49f8:	beq	4a20 <coda_cursor_read_uint32_array+0x1c0>
    49fc:	b	4a00 <coda_cursor_read_uint32_array+0x1a0>
    4a00:	ldr	r0, [sp, #4]
    4a04:	cmp	r0, #3
    4a08:	beq	4aa8 <coda_cursor_read_uint32_array+0x248>
    4a0c:	b	4a10 <coda_cursor_read_uint32_array+0x1b0>
    4a10:	ldr	r0, [sp, #4]
    4a14:	cmp	r0, #5
    4a18:	beq	4b34 <coda_cursor_read_uint32_array+0x2d4>
    4a1c:	b	4b5c <coda_cursor_read_uint32_array+0x2fc>
    4a20:	ldr	r0, [fp, #-8]
    4a24:	ldr	r1, [fp, #-12]
    4a28:	ldr	r2, [fp, #-16]
    4a2c:	bl	3774 <read_uint8_array>
    4a30:	cmp	r0, #0
    4a34:	beq	4a44 <coda_cursor_read_uint32_array+0x1e4>
    4a38:	mvn	r0, #0
    4a3c:	str	r0, [fp, #-4]
    4a40:	b	4b94 <coda_cursor_read_uint32_array+0x334>
    4a44:	ldr	r0, [fp, #-8]
    4a48:	add	r1, sp, #20
    4a4c:	bl	0 <coda_cursor_get_num_elements>
    4a50:	cmp	r0, #0
    4a54:	beq	4a64 <coda_cursor_read_uint32_array+0x204>
    4a58:	mvn	r0, #0
    4a5c:	str	r0, [fp, #-4]
    4a60:	b	4b94 <coda_cursor_read_uint32_array+0x334>
    4a64:	ldr	r0, [sp, #20]
    4a68:	sub	r0, r0, #1
    4a6c:	str	r0, [sp, #16]
    4a70:	ldr	r0, [sp, #16]
    4a74:	cmp	r0, #0
    4a78:	blt	4aa4 <coda_cursor_read_uint32_array+0x244>
    4a7c:	ldr	r0, [fp, #-12]
    4a80:	ldr	r1, [sp, #16]
    4a84:	ldrb	r2, [r0, r1]
    4a88:	add	r0, r0, r1, lsl #2
    4a8c:	str	r2, [r0]
    4a90:	ldr	r0, [sp, #16]
    4a94:	mvn	r1, #0
    4a98:	add	r0, r0, r1
    4a9c:	str	r0, [sp, #16]
    4aa0:	b	4a70 <coda_cursor_read_uint32_array+0x210>
    4aa4:	b	4b8c <coda_cursor_read_uint32_array+0x32c>
    4aa8:	ldr	r0, [fp, #-8]
    4aac:	ldr	r1, [fp, #-12]
    4ab0:	ldr	r2, [fp, #-16]
    4ab4:	bl	40b0 <read_uint16_array>
    4ab8:	cmp	r0, #0
    4abc:	beq	4acc <coda_cursor_read_uint32_array+0x26c>
    4ac0:	mvn	r0, #0
    4ac4:	str	r0, [fp, #-4]
    4ac8:	b	4b94 <coda_cursor_read_uint32_array+0x334>
    4acc:	ldr	r0, [fp, #-8]
    4ad0:	add	r1, sp, #20
    4ad4:	bl	0 <coda_cursor_get_num_elements>
    4ad8:	cmp	r0, #0
    4adc:	beq	4aec <coda_cursor_read_uint32_array+0x28c>
    4ae0:	mvn	r0, #0
    4ae4:	str	r0, [fp, #-4]
    4ae8:	b	4b94 <coda_cursor_read_uint32_array+0x334>
    4aec:	ldr	r0, [sp, #20]
    4af0:	sub	r0, r0, #1
    4af4:	str	r0, [sp, #16]
    4af8:	ldr	r0, [sp, #16]
    4afc:	cmp	r0, #0
    4b00:	blt	4b30 <coda_cursor_read_uint32_array+0x2d0>
    4b04:	ldr	r0, [fp, #-12]
    4b08:	ldr	r1, [sp, #16]
    4b0c:	add	r2, r0, r1, lsl #1
    4b10:	ldrh	r2, [r2]
    4b14:	add	r0, r0, r1, lsl #2
    4b18:	str	r2, [r0]
    4b1c:	ldr	r0, [sp, #16]
    4b20:	mvn	r1, #0
    4b24:	add	r0, r0, r1
    4b28:	str	r0, [sp, #16]
    4b2c:	b	4af8 <coda_cursor_read_uint32_array+0x298>
    4b30:	b	4b8c <coda_cursor_read_uint32_array+0x32c>
    4b34:	ldr	r0, [fp, #-8]
    4b38:	ldr	r1, [fp, #-12]
    4b3c:	ldr	r2, [fp, #-16]
    4b40:	bl	4ba0 <read_uint32_array>
    4b44:	cmp	r0, #0
    4b48:	beq	4b58 <coda_cursor_read_uint32_array+0x2f8>
    4b4c:	mvn	r0, #0
    4b50:	str	r0, [fp, #-4]
    4b54:	b	4b94 <coda_cursor_read_uint32_array+0x334>
    4b58:	b	4b8c <coda_cursor_read_uint32_array+0x32c>
    4b5c:	ldr	r0, [fp, #-20]	; 0xffffffec
    4b60:	bl	0 <coda_type_get_native_type_name>
    4b64:	mvn	lr, #104	; 0x68
    4b68:	str	r0, [sp]
    4b6c:	mov	r0, lr
    4b70:	movw	r1, #0
    4b74:	movt	r1, #0
    4b78:	ldr	r2, [sp]
    4b7c:	bl	0 <coda_set_error>
    4b80:	mvn	r0, #0
    4b84:	str	r0, [fp, #-4]
    4b88:	b	4b94 <coda_cursor_read_uint32_array+0x334>
    4b8c:	movw	r0, #0
    4b90:	str	r0, [fp, #-4]
    4b94:	ldr	r0, [fp, #-4]
    4b98:	mov	sp, fp
    4b9c:	pop	{fp, pc}

00004ba0 <read_uint32_array>:
    4ba0:	push	{fp, lr}
    4ba4:	mov	fp, sp
    4ba8:	sub	sp, sp, #24
    4bac:	str	r0, [fp, #-8]
    4bb0:	str	r1, [sp, #12]
    4bb4:	str	r2, [sp, #8]
    4bb8:	ldr	r0, [fp, #-8]
    4bbc:	ldr	r1, [r0, #4]
    4bc0:	add	r0, r0, r1, lsl #4
    4bc4:	ldr	r0, [r0, #-8]
    4bc8:	ldr	r0, [r0]
    4bcc:	cmp	r0, #0
    4bd0:	str	r0, [sp, #4]
    4bd4:	beq	4c40 <read_uint32_array+0xa0>
    4bd8:	b	4bdc <read_uint32_array+0x3c>
    4bdc:	ldr	r0, [sp, #4]
    4be0:	cmp	r0, #1
    4be4:	beq	4c58 <read_uint32_array+0xb8>
    4be8:	b	4bec <read_uint32_array+0x4c>
    4bec:	ldr	r0, [sp, #4]
    4bf0:	cmp	r0, #100	; 0x64
    4bf4:	beq	4c70 <read_uint32_array+0xd0>
    4bf8:	b	4bfc <read_uint32_array+0x5c>
    4bfc:	ldr	r0, [sp, #4]
    4c00:	cmp	r0, #101	; 0x65
    4c04:	beq	4c88 <read_uint32_array+0xe8>
    4c08:	b	4c0c <read_uint32_array+0x6c>
    4c0c:	ldr	r0, [sp, #4]
    4c10:	cmp	r0, #102	; 0x66
    4c14:	beq	4ca0 <read_uint32_array+0x100>
    4c18:	b	4c1c <read_uint32_array+0x7c>
    4c1c:	ldr	r0, [sp, #4]
    4c20:	cmp	r0, #103	; 0x67
    4c24:	beq	4cb8 <read_uint32_array+0x118>
    4c28:	b	4c2c <read_uint32_array+0x8c>
    4c2c:	ldr	r0, [sp, #4]
    4c30:	sub	r1, r0, #104	; 0x68
    4c34:	cmp	r1, #2
    4c38:	bcc	4cdc <read_uint32_array+0x13c>
    4c3c:	b	4cfc <read_uint32_array+0x15c>
    4c40:	ldr	r0, [fp, #-8]
    4c44:	ldr	r1, [sp, #12]
    4c48:	ldr	r2, [sp, #8]
    4c4c:	bl	0 <coda_ascii_cursor_read_uint32_array>
    4c50:	str	r0, [fp, #-4]
    4c54:	b	4d28 <read_uint32_array+0x188>
    4c58:	ldr	r0, [fp, #-8]
    4c5c:	ldr	r1, [sp, #12]
    4c60:	ldr	r2, [sp, #8]
    4c64:	bl	0 <coda_bin_cursor_read_uint32_array>
    4c68:	str	r0, [fp, #-4]
    4c6c:	b	4d28 <read_uint32_array+0x188>
    4c70:	ldr	r0, [fp, #-8]
    4c74:	ldr	r1, [sp, #12]
    4c78:	ldr	r2, [sp, #8]
    4c7c:	bl	0 <coda_mem_cursor_read_uint32_array>
    4c80:	str	r0, [fp, #-4]
    4c84:	b	4d28 <read_uint32_array+0x188>
    4c88:	mvn	r0, #10
    4c8c:	movw	r1, #0
    4c90:	bl	0 <coda_set_error>
    4c94:	mvn	r0, #0
    4c98:	str	r0, [fp, #-4]
    4c9c:	b	4d28 <read_uint32_array+0x188>
    4ca0:	mvn	r0, #12
    4ca4:	movw	r1, #0
    4ca8:	bl	0 <coda_set_error>
    4cac:	mvn	r0, #0
    4cb0:	str	r0, [fp, #-4]
    4cb4:	b	4d28 <read_uint32_array+0x188>
    4cb8:	ldr	r0, [fp, #-8]
    4cbc:	ldr	r1, [sp, #12]
    4cc0:	bl	0 <coda_cdf_cursor_read_uint32_array>
    4cc4:	cmp	r0, #0
    4cc8:	beq	4cd8 <read_uint32_array+0x138>
    4ccc:	mvn	r0, #0
    4cd0:	str	r0, [fp, #-4]
    4cd4:	b	4d28 <read_uint32_array+0x188>
    4cd8:	b	4cfc <read_uint32_array+0x15c>
    4cdc:	movw	r0, #0
    4ce0:	movt	r0, #0
    4ce4:	movw	r1, #0
    4ce8:	movt	r1, #0
    4cec:	movw	r2, #1077	; 0x435
    4cf0:	movw	r3, #0
    4cf4:	movt	r3, #0
    4cf8:	bl	0 <__assert_fail>
    4cfc:	ldr	r0, [sp, #8]
    4d00:	cmp	r0, #0
    4d04:	beq	4d20 <read_uint32_array+0x180>
    4d08:	ldr	r0, [fp, #-8]
    4d0c:	ldr	r1, [sp, #12]
    4d10:	movw	r2, #4
    4d14:	bl	cb58 <transpose_array>
    4d18:	str	r0, [fp, #-4]
    4d1c:	b	4d28 <read_uint32_array+0x188>
    4d20:	movw	r0, #0
    4d24:	str	r0, [fp, #-4]
    4d28:	ldr	r0, [fp, #-4]
    4d2c:	mov	sp, fp
    4d30:	pop	{fp, pc}

00004d34 <coda_cursor_read_int64_array>:
    4d34:	push	{fp, lr}
    4d38:	mov	fp, sp
    4d3c:	sub	sp, sp, #48	; 0x30
    4d40:	str	r0, [fp, #-8]
    4d44:	str	r1, [fp, #-12]
    4d48:	str	r2, [fp, #-16]
    4d4c:	ldr	r0, [fp, #-8]
    4d50:	movw	r1, #0
    4d54:	cmp	r0, r1
    4d58:	beq	4d90 <coda_cursor_read_int64_array+0x5c>
    4d5c:	ldr	r0, [fp, #-8]
    4d60:	ldr	r0, [r0, #4]
    4d64:	cmp	r0, #0
    4d68:	ble	4d90 <coda_cursor_read_int64_array+0x5c>
    4d6c:	ldr	r0, [fp, #-8]
    4d70:	add	r1, r0, #8
    4d74:	ldr	r0, [r0, #4]
    4d78:	sub	r0, r0, #1
    4d7c:	add	r0, r1, r0, lsl #4
    4d80:	ldr	r0, [r0]
    4d84:	movw	r1, #0
    4d88:	cmp	r0, r1
    4d8c:	bne	4db8 <coda_cursor_read_int64_array+0x84>
    4d90:	mvn	r0, #99	; 0x63
    4d94:	movw	r1, #0
    4d98:	movt	r1, #0
    4d9c:	movw	r2, #0
    4da0:	movt	r2, #0
    4da4:	movw	r3, #3413	; 0xd55
    4da8:	bl	0 <coda_set_error>
    4dac:	mvn	r0, #0
    4db0:	str	r0, [fp, #-4]
    4db4:	b	52c8 <coda_cursor_read_int64_array+0x594>
    4db8:	ldr	r0, [fp, #-12]
    4dbc:	movw	r1, #0
    4dc0:	cmp	r0, r1
    4dc4:	bne	4df0 <coda_cursor_read_int64_array+0xbc>
    4dc8:	mvn	r0, #99	; 0x63
    4dcc:	movw	r1, #0
    4dd0:	movt	r1, #0
    4dd4:	movw	r2, #0
    4dd8:	movt	r2, #0
    4ddc:	movw	r3, #3418	; 0xd5a
    4de0:	bl	0 <coda_set_error>
    4de4:	mvn	r0, #0
    4de8:	str	r0, [fp, #-4]
    4dec:	b	52c8 <coda_cursor_read_int64_array+0x594>
    4df0:	ldr	r0, [fp, #-8]
    4df4:	add	r1, r0, #8
    4df8:	ldr	r0, [r0, #4]
    4dfc:	sub	r0, r0, #1
    4e00:	add	r0, r1, r0, lsl #4
    4e04:	ldr	r0, [r0]
    4e08:	ldr	r0, [r0]
    4e0c:	cmp	r0, #100	; 0x64
    4e10:	bcs	4e34 <coda_cursor_read_int64_array+0x100>
    4e14:	ldr	r0, [fp, #-8]
    4e18:	add	r1, r0, #8
    4e1c:	ldr	r0, [r0, #4]
    4e20:	sub	r0, r0, #1
    4e24:	add	r0, r1, r0, lsl #4
    4e28:	ldr	r0, [r0]
    4e2c:	str	r0, [sp, #12]
    4e30:	b	4e54 <coda_cursor_read_int64_array+0x120>
    4e34:	ldr	r0, [fp, #-8]
    4e38:	add	r1, r0, #8
    4e3c:	ldr	r0, [r0, #4]
    4e40:	sub	r0, r0, #1
    4e44:	add	r0, r1, r0, lsl #4
    4e48:	ldr	r0, [r0]
    4e4c:	ldr	r0, [r0, #4]
    4e50:	str	r0, [sp, #12]
    4e54:	ldr	r0, [sp, #12]
    4e58:	str	r0, [sp, #24]
    4e5c:	ldr	r0, [sp, #24]
    4e60:	ldr	r0, [r0, #8]
    4e64:	cmp	r0, #1
    4e68:	beq	4ea0 <coda_cursor_read_int64_array+0x16c>
    4e6c:	ldr	r0, [sp, #24]
    4e70:	ldr	r0, [r0, #8]
    4e74:	bl	0 <coda_type_get_class_name>
    4e78:	mvn	lr, #104	; 0x68
    4e7c:	str	r0, [sp, #8]
    4e80:	mov	r0, lr
    4e84:	movw	r1, #0
    4e88:	movt	r1, #0
    4e8c:	ldr	r2, [sp, #8]
    4e90:	bl	0 <coda_set_error>
    4e94:	mvn	r0, #0
    4e98:	str	r0, [fp, #-4]
    4e9c:	b	52c8 <coda_cursor_read_int64_array+0x594>
    4ea0:	ldr	r0, [sp, #24]
    4ea4:	sub	r1, fp, #20
    4ea8:	bl	3304 <get_array_element_read_type>
    4eac:	cmp	r0, #0
    4eb0:	beq	4ec0 <coda_cursor_read_int64_array+0x18c>
    4eb4:	mvn	r0, #0
    4eb8:	str	r0, [fp, #-4]
    4ebc:	b	52c8 <coda_cursor_read_int64_array+0x594>
    4ec0:	ldr	r0, [fp, #-20]	; 0xffffffec
    4ec4:	cmp	r0, #6
    4ec8:	str	r0, [sp, #4]
    4ecc:	bhi	5290 <coda_cursor_read_int64_array+0x55c>
    4ed0:	add	r0, pc, #8
    4ed4:	ldr	r1, [sp, #4]
    4ed8:	ldr	r0, [r0, r1, lsl #2]
    4edc:	mov	pc, r0
    4ee0:	.word	0x00004efc
    4ee4:	.word	0x00004f90
    4ee8:	.word	0x00005020
    4eec:	.word	0x000050b4
    4ef0:	.word	0x00005148
    4ef4:	.word	0x000051d8
    4ef8:	.word	0x00005268
    4efc:	ldr	r0, [fp, #-8]
    4f00:	ldr	r1, [fp, #-12]
    4f04:	ldr	r2, [fp, #-16]
    4f08:	bl	33a8 <read_int8_array>
    4f0c:	cmp	r0, #0
    4f10:	beq	4f20 <coda_cursor_read_int64_array+0x1ec>
    4f14:	mvn	r0, #0
    4f18:	str	r0, [fp, #-4]
    4f1c:	b	52c8 <coda_cursor_read_int64_array+0x594>
    4f20:	ldr	r0, [fp, #-8]
    4f24:	add	r1, sp, #20
    4f28:	bl	0 <coda_cursor_get_num_elements>
    4f2c:	cmp	r0, #0
    4f30:	beq	4f40 <coda_cursor_read_int64_array+0x20c>
    4f34:	mvn	r0, #0
    4f38:	str	r0, [fp, #-4]
    4f3c:	b	52c8 <coda_cursor_read_int64_array+0x594>
    4f40:	ldr	r0, [sp, #20]
    4f44:	sub	r0, r0, #1
    4f48:	str	r0, [sp, #16]
    4f4c:	ldr	r0, [sp, #16]
    4f50:	cmp	r0, #0
    4f54:	blt	4f8c <coda_cursor_read_int64_array+0x258>
    4f58:	ldr	r0, [fp, #-12]
    4f5c:	ldr	r1, [sp, #16]
    4f60:	add	r2, r0, r1
    4f64:	ldrsb	r2, [r2]
    4f68:	asr	r3, r2, #31
    4f6c:	add	ip, r0, r1, lsl #3
    4f70:	str	r2, [r0, r1, lsl #3]
    4f74:	str	r3, [ip, #4]
    4f78:	ldr	r0, [sp, #16]
    4f7c:	mvn	r1, #0
    4f80:	add	r0, r0, r1
    4f84:	str	r0, [sp, #16]
    4f88:	b	4f4c <coda_cursor_read_int64_array+0x218>
    4f8c:	b	52c0 <coda_cursor_read_int64_array+0x58c>
    4f90:	ldr	r0, [fp, #-8]
    4f94:	ldr	r1, [fp, #-12]
    4f98:	ldr	r2, [fp, #-16]
    4f9c:	bl	3774 <read_uint8_array>
    4fa0:	cmp	r0, #0
    4fa4:	beq	4fb4 <coda_cursor_read_int64_array+0x280>
    4fa8:	mvn	r0, #0
    4fac:	str	r0, [fp, #-4]
    4fb0:	b	52c8 <coda_cursor_read_int64_array+0x594>
    4fb4:	ldr	r0, [fp, #-8]
    4fb8:	add	r1, sp, #20
    4fbc:	bl	0 <coda_cursor_get_num_elements>
    4fc0:	cmp	r0, #0
    4fc4:	beq	4fd4 <coda_cursor_read_int64_array+0x2a0>
    4fc8:	mvn	r0, #0
    4fcc:	str	r0, [fp, #-4]
    4fd0:	b	52c8 <coda_cursor_read_int64_array+0x594>
    4fd4:	ldr	r0, [sp, #20]
    4fd8:	sub	r0, r0, #1
    4fdc:	str	r0, [sp, #16]
    4fe0:	ldr	r0, [sp, #16]
    4fe4:	cmp	r0, #0
    4fe8:	blt	501c <coda_cursor_read_int64_array+0x2e8>
    4fec:	ldr	r0, [fp, #-12]
    4ff0:	ldr	r1, [sp, #16]
    4ff4:	ldrb	r2, [r0, r1]
    4ff8:	add	r3, r0, r1, lsl #3
    4ffc:	str	r2, [r0, r1, lsl #3]
    5000:	mov	r0, #0
    5004:	str	r0, [r3, #4]
    5008:	ldr	r0, [sp, #16]
    500c:	mvn	r1, #0
    5010:	add	r0, r0, r1
    5014:	str	r0, [sp, #16]
    5018:	b	4fe0 <coda_cursor_read_int64_array+0x2ac>
    501c:	b	52c0 <coda_cursor_read_int64_array+0x58c>
    5020:	ldr	r0, [fp, #-8]
    5024:	ldr	r1, [fp, #-12]
    5028:	ldr	r2, [fp, #-16]
    502c:	bl	3c48 <read_int16_array>
    5030:	cmp	r0, #0
    5034:	beq	5044 <coda_cursor_read_int64_array+0x310>
    5038:	mvn	r0, #0
    503c:	str	r0, [fp, #-4]
    5040:	b	52c8 <coda_cursor_read_int64_array+0x594>
    5044:	ldr	r0, [fp, #-8]
    5048:	add	r1, sp, #20
    504c:	bl	0 <coda_cursor_get_num_elements>
    5050:	cmp	r0, #0
    5054:	beq	5064 <coda_cursor_read_int64_array+0x330>
    5058:	mvn	r0, #0
    505c:	str	r0, [fp, #-4]
    5060:	b	52c8 <coda_cursor_read_int64_array+0x594>
    5064:	ldr	r0, [sp, #20]
    5068:	sub	r0, r0, #1
    506c:	str	r0, [sp, #16]
    5070:	ldr	r0, [sp, #16]
    5074:	cmp	r0, #0
    5078:	blt	50b0 <coda_cursor_read_int64_array+0x37c>
    507c:	ldr	r0, [fp, #-12]
    5080:	ldr	r1, [sp, #16]
    5084:	add	r2, r0, r1, lsl #1
    5088:	ldrsh	r2, [r2]
    508c:	asr	r3, r2, #31
    5090:	add	ip, r0, r1, lsl #3
    5094:	str	r2, [r0, r1, lsl #3]
    5098:	str	r3, [ip, #4]
    509c:	ldr	r0, [sp, #16]
    50a0:	mvn	r1, #0
    50a4:	add	r0, r0, r1
    50a8:	str	r0, [sp, #16]
    50ac:	b	5070 <coda_cursor_read_int64_array+0x33c>
    50b0:	b	52c0 <coda_cursor_read_int64_array+0x58c>
    50b4:	ldr	r0, [fp, #-8]
    50b8:	ldr	r1, [fp, #-12]
    50bc:	ldr	r2, [fp, #-16]
    50c0:	bl	40b0 <read_uint16_array>
    50c4:	cmp	r0, #0
    50c8:	beq	50d8 <coda_cursor_read_int64_array+0x3a4>
    50cc:	mvn	r0, #0
    50d0:	str	r0, [fp, #-4]
    50d4:	b	52c8 <coda_cursor_read_int64_array+0x594>
    50d8:	ldr	r0, [fp, #-8]
    50dc:	add	r1, sp, #20
    50e0:	bl	0 <coda_cursor_get_num_elements>
    50e4:	cmp	r0, #0
    50e8:	beq	50f8 <coda_cursor_read_int64_array+0x3c4>
    50ec:	mvn	r0, #0
    50f0:	str	r0, [fp, #-4]
    50f4:	b	52c8 <coda_cursor_read_int64_array+0x594>
    50f8:	ldr	r0, [sp, #20]
    50fc:	sub	r0, r0, #1
    5100:	str	r0, [sp, #16]
    5104:	ldr	r0, [sp, #16]
    5108:	cmp	r0, #0
    510c:	blt	5144 <coda_cursor_read_int64_array+0x410>
    5110:	ldr	r0, [fp, #-12]
    5114:	ldr	r1, [sp, #16]
    5118:	add	r2, r0, r1, lsl #1
    511c:	ldrh	r2, [r2]
    5120:	add	r3, r0, r1, lsl #3
    5124:	str	r2, [r0, r1, lsl #3]
    5128:	mov	r0, #0
    512c:	str	r0, [r3, #4]
    5130:	ldr	r0, [sp, #16]
    5134:	mvn	r1, #0
    5138:	add	r0, r0, r1
    513c:	str	r0, [sp, #16]
    5140:	b	5104 <coda_cursor_read_int64_array+0x3d0>
    5144:	b	52c0 <coda_cursor_read_int64_array+0x58c>
    5148:	ldr	r0, [fp, #-8]
    514c:	ldr	r1, [fp, #-12]
    5150:	ldr	r2, [fp, #-16]
    5154:	bl	469c <read_int32_array>
    5158:	cmp	r0, #0
    515c:	beq	516c <coda_cursor_read_int64_array+0x438>
    5160:	mvn	r0, #0
    5164:	str	r0, [fp, #-4]
    5168:	b	52c8 <coda_cursor_read_int64_array+0x594>
    516c:	ldr	r0, [fp, #-8]
    5170:	add	r1, sp, #20
    5174:	bl	0 <coda_cursor_get_num_elements>
    5178:	cmp	r0, #0
    517c:	beq	518c <coda_cursor_read_int64_array+0x458>
    5180:	mvn	r0, #0
    5184:	str	r0, [fp, #-4]
    5188:	b	52c8 <coda_cursor_read_int64_array+0x594>
    518c:	ldr	r0, [sp, #20]
    5190:	sub	r0, r0, #1
    5194:	str	r0, [sp, #16]
    5198:	ldr	r0, [sp, #16]
    519c:	cmp	r0, #0
    51a0:	blt	51d4 <coda_cursor_read_int64_array+0x4a0>
    51a4:	ldr	r0, [fp, #-12]
    51a8:	ldr	r1, [sp, #16]
    51ac:	ldr	r2, [r0, r1, lsl #2]
    51b0:	asr	r3, r2, #31
    51b4:	add	ip, r0, r1, lsl #3
    51b8:	str	r2, [r0, r1, lsl #3]
    51bc:	str	r3, [ip, #4]
    51c0:	ldr	r0, [sp, #16]
    51c4:	mvn	r1, #0
    51c8:	add	r0, r0, r1
    51cc:	str	r0, [sp, #16]
    51d0:	b	5198 <coda_cursor_read_int64_array+0x464>
    51d4:	b	52c0 <coda_cursor_read_int64_array+0x58c>
    51d8:	ldr	r0, [fp, #-8]
    51dc:	ldr	r1, [fp, #-12]
    51e0:	ldr	r2, [fp, #-16]
    51e4:	bl	4ba0 <read_uint32_array>
    51e8:	cmp	r0, #0
    51ec:	beq	51fc <coda_cursor_read_int64_array+0x4c8>
    51f0:	mvn	r0, #0
    51f4:	str	r0, [fp, #-4]
    51f8:	b	52c8 <coda_cursor_read_int64_array+0x594>
    51fc:	ldr	r0, [fp, #-8]
    5200:	add	r1, sp, #20
    5204:	bl	0 <coda_cursor_get_num_elements>
    5208:	cmp	r0, #0
    520c:	beq	521c <coda_cursor_read_int64_array+0x4e8>
    5210:	mvn	r0, #0
    5214:	str	r0, [fp, #-4]
    5218:	b	52c8 <coda_cursor_read_int64_array+0x594>
    521c:	ldr	r0, [sp, #20]
    5220:	sub	r0, r0, #1
    5224:	str	r0, [sp, #16]
    5228:	ldr	r0, [sp, #16]
    522c:	cmp	r0, #0
    5230:	blt	5264 <coda_cursor_read_int64_array+0x530>
    5234:	ldr	r0, [fp, #-12]
    5238:	ldr	r1, [sp, #16]
    523c:	ldr	r2, [r0, r1, lsl #2]
    5240:	add	r3, r0, r1, lsl #3
    5244:	str	r2, [r0, r1, lsl #3]
    5248:	mov	r0, #0
    524c:	str	r0, [r3, #4]
    5250:	ldr	r0, [sp, #16]
    5254:	mvn	r1, #0
    5258:	add	r0, r0, r1
    525c:	str	r0, [sp, #16]
    5260:	b	5228 <coda_cursor_read_int64_array+0x4f4>
    5264:	b	52c0 <coda_cursor_read_int64_array+0x58c>
    5268:	ldr	r0, [fp, #-8]
    526c:	ldr	r1, [fp, #-12]
    5270:	ldr	r2, [fp, #-16]
    5274:	bl	52d4 <read_int64_array>
    5278:	cmp	r0, #0
    527c:	beq	528c <coda_cursor_read_int64_array+0x558>
    5280:	mvn	r0, #0
    5284:	str	r0, [fp, #-4]
    5288:	b	52c8 <coda_cursor_read_int64_array+0x594>
    528c:	b	52c0 <coda_cursor_read_int64_array+0x58c>
    5290:	ldr	r0, [fp, #-20]	; 0xffffffec
    5294:	bl	0 <coda_type_get_native_type_name>
    5298:	mvn	lr, #104	; 0x68
    529c:	str	r0, [sp]
    52a0:	mov	r0, lr
    52a4:	movw	r1, #0
    52a8:	movt	r1, #0
    52ac:	ldr	r2, [sp]
    52b0:	bl	0 <coda_set_error>
    52b4:	mvn	r0, #0
    52b8:	str	r0, [fp, #-4]
    52bc:	b	52c8 <coda_cursor_read_int64_array+0x594>
    52c0:	movw	r0, #0
    52c4:	str	r0, [fp, #-4]
    52c8:	ldr	r0, [fp, #-4]
    52cc:	mov	sp, fp
    52d0:	pop	{fp, pc}

000052d4 <read_int64_array>:
    52d4:	push	{fp, lr}
    52d8:	mov	fp, sp
    52dc:	sub	sp, sp, #24
    52e0:	str	r0, [fp, #-8]
    52e4:	str	r1, [sp, #12]
    52e8:	str	r2, [sp, #8]
    52ec:	ldr	r0, [fp, #-8]
    52f0:	ldr	r1, [r0, #4]
    52f4:	add	r0, r0, r1, lsl #4
    52f8:	ldr	r0, [r0, #-8]
    52fc:	ldr	r0, [r0]
    5300:	cmp	r0, #0
    5304:	str	r0, [sp, #4]
    5308:	beq	5374 <read_int64_array+0xa0>
    530c:	b	5310 <read_int64_array+0x3c>
    5310:	ldr	r0, [sp, #4]
    5314:	cmp	r0, #1
    5318:	beq	538c <read_int64_array+0xb8>
    531c:	b	5320 <read_int64_array+0x4c>
    5320:	ldr	r0, [sp, #4]
    5324:	cmp	r0, #100	; 0x64
    5328:	beq	53a4 <read_int64_array+0xd0>
    532c:	b	5330 <read_int64_array+0x5c>
    5330:	ldr	r0, [sp, #4]
    5334:	cmp	r0, #101	; 0x65
    5338:	beq	53bc <read_int64_array+0xe8>
    533c:	b	5340 <read_int64_array+0x6c>
    5340:	ldr	r0, [sp, #4]
    5344:	cmp	r0, #102	; 0x66
    5348:	beq	53d4 <read_int64_array+0x100>
    534c:	b	5350 <read_int64_array+0x7c>
    5350:	ldr	r0, [sp, #4]
    5354:	cmp	r0, #103	; 0x67
    5358:	beq	53ec <read_int64_array+0x118>
    535c:	b	5360 <read_int64_array+0x8c>
    5360:	ldr	r0, [sp, #4]
    5364:	sub	r1, r0, #104	; 0x68
    5368:	cmp	r1, #2
    536c:	bcc	5410 <read_int64_array+0x13c>
    5370:	b	5430 <read_int64_array+0x15c>
    5374:	ldr	r0, [fp, #-8]
    5378:	ldr	r1, [sp, #12]
    537c:	ldr	r2, [sp, #8]
    5380:	bl	0 <coda_ascii_cursor_read_int64_array>
    5384:	str	r0, [fp, #-4]
    5388:	b	545c <read_int64_array+0x188>
    538c:	ldr	r0, [fp, #-8]
    5390:	ldr	r1, [sp, #12]
    5394:	ldr	r2, [sp, #8]
    5398:	bl	0 <coda_bin_cursor_read_int64_array>
    539c:	str	r0, [fp, #-4]
    53a0:	b	545c <read_int64_array+0x188>
    53a4:	ldr	r0, [fp, #-8]
    53a8:	ldr	r1, [sp, #12]
    53ac:	ldr	r2, [sp, #8]
    53b0:	bl	0 <coda_mem_cursor_read_int64_array>
    53b4:	str	r0, [fp, #-4]
    53b8:	b	545c <read_int64_array+0x188>
    53bc:	mvn	r0, #10
    53c0:	movw	r1, #0
    53c4:	bl	0 <coda_set_error>
    53c8:	mvn	r0, #0
    53cc:	str	r0, [fp, #-4]
    53d0:	b	545c <read_int64_array+0x188>
    53d4:	mvn	r0, #12
    53d8:	movw	r1, #0
    53dc:	bl	0 <coda_set_error>
    53e0:	mvn	r0, #0
    53e4:	str	r0, [fp, #-4]
    53e8:	b	545c <read_int64_array+0x188>
    53ec:	ldr	r0, [fp, #-8]
    53f0:	ldr	r1, [sp, #12]
    53f4:	bl	0 <coda_cdf_cursor_read_int64_array>
    53f8:	cmp	r0, #0
    53fc:	beq	540c <read_int64_array+0x138>
    5400:	mvn	r0, #0
    5404:	str	r0, [fp, #-4]
    5408:	b	545c <read_int64_array+0x188>
    540c:	b	5430 <read_int64_array+0x15c>
    5410:	movw	r0, #0
    5414:	movt	r0, #0
    5418:	movw	r1, #0
    541c:	movt	r1, #0
    5420:	movw	r2, #1129	; 0x469
    5424:	movw	r3, #0
    5428:	movt	r3, #0
    542c:	bl	0 <__assert_fail>
    5430:	ldr	r0, [sp, #8]
    5434:	cmp	r0, #0
    5438:	beq	5454 <read_int64_array+0x180>
    543c:	ldr	r0, [fp, #-8]
    5440:	ldr	r1, [sp, #12]
    5444:	movw	r2, #8
    5448:	bl	cb58 <transpose_array>
    544c:	str	r0, [fp, #-4]
    5450:	b	545c <read_int64_array+0x188>
    5454:	movw	r0, #0
    5458:	str	r0, [fp, #-4]
    545c:	ldr	r0, [fp, #-4]
    5460:	mov	sp, fp
    5464:	pop	{fp, pc}

00005468 <coda_cursor_read_uint64_array>:
    5468:	push	{fp, lr}
    546c:	mov	fp, sp
    5470:	sub	sp, sp, #48	; 0x30
    5474:	str	r0, [fp, #-8]
    5478:	str	r1, [fp, #-12]
    547c:	str	r2, [fp, #-16]
    5480:	ldr	r0, [fp, #-8]
    5484:	movw	r1, #0
    5488:	cmp	r0, r1
    548c:	beq	54c4 <coda_cursor_read_uint64_array+0x5c>
    5490:	ldr	r0, [fp, #-8]
    5494:	ldr	r0, [r0, #4]
    5498:	cmp	r0, #0
    549c:	ble	54c4 <coda_cursor_read_uint64_array+0x5c>
    54a0:	ldr	r0, [fp, #-8]
    54a4:	add	r1, r0, #8
    54a8:	ldr	r0, [r0, #4]
    54ac:	sub	r0, r0, #1
    54b0:	add	r0, r1, r0, lsl #4
    54b4:	ldr	r0, [r0]
    54b8:	movw	r1, #0
    54bc:	cmp	r0, r1
    54c0:	bne	54ec <coda_cursor_read_uint64_array+0x84>
    54c4:	mvn	r0, #99	; 0x63
    54c8:	movw	r1, #0
    54cc:	movt	r1, #0
    54d0:	movw	r2, #0
    54d4:	movt	r2, #0
    54d8:	movw	r3, #3561	; 0xde9
    54dc:	bl	0 <coda_set_error>
    54e0:	mvn	r0, #0
    54e4:	str	r0, [fp, #-4]
    54e8:	b	5848 <coda_cursor_read_uint64_array+0x3e0>
    54ec:	ldr	r0, [fp, #-12]
    54f0:	movw	r1, #0
    54f4:	cmp	r0, r1
    54f8:	bne	5524 <coda_cursor_read_uint64_array+0xbc>
    54fc:	mvn	r0, #99	; 0x63
    5500:	movw	r1, #0
    5504:	movt	r1, #0
    5508:	movw	r2, #0
    550c:	movt	r2, #0
    5510:	movw	r3, #3566	; 0xdee
    5514:	bl	0 <coda_set_error>
    5518:	mvn	r0, #0
    551c:	str	r0, [fp, #-4]
    5520:	b	5848 <coda_cursor_read_uint64_array+0x3e0>
    5524:	ldr	r0, [fp, #-8]
    5528:	add	r1, r0, #8
    552c:	ldr	r0, [r0, #4]
    5530:	sub	r0, r0, #1
    5534:	add	r0, r1, r0, lsl #4
    5538:	ldr	r0, [r0]
    553c:	ldr	r0, [r0]
    5540:	cmp	r0, #100	; 0x64
    5544:	bcs	5568 <coda_cursor_read_uint64_array+0x100>
    5548:	ldr	r0, [fp, #-8]
    554c:	add	r1, r0, #8
    5550:	ldr	r0, [r0, #4]
    5554:	sub	r0, r0, #1
    5558:	add	r0, r1, r0, lsl #4
    555c:	ldr	r0, [r0]
    5560:	str	r0, [sp, #12]
    5564:	b	5588 <coda_cursor_read_uint64_array+0x120>
    5568:	ldr	r0, [fp, #-8]
    556c:	add	r1, r0, #8
    5570:	ldr	r0, [r0, #4]
    5574:	sub	r0, r0, #1
    5578:	add	r0, r1, r0, lsl #4
    557c:	ldr	r0, [r0]
    5580:	ldr	r0, [r0, #4]
    5584:	str	r0, [sp, #12]
    5588:	ldr	r0, [sp, #12]
    558c:	str	r0, [sp, #24]
    5590:	ldr	r0, [sp, #24]
    5594:	ldr	r0, [r0, #8]
    5598:	cmp	r0, #1
    559c:	beq	55d4 <coda_cursor_read_uint64_array+0x16c>
    55a0:	ldr	r0, [sp, #24]
    55a4:	ldr	r0, [r0, #8]
    55a8:	bl	0 <coda_type_get_class_name>
    55ac:	mvn	lr, #104	; 0x68
    55b0:	str	r0, [sp, #8]
    55b4:	mov	r0, lr
    55b8:	movw	r1, #0
    55bc:	movt	r1, #0
    55c0:	ldr	r2, [sp, #8]
    55c4:	bl	0 <coda_set_error>
    55c8:	mvn	r0, #0
    55cc:	str	r0, [fp, #-4]
    55d0:	b	5848 <coda_cursor_read_uint64_array+0x3e0>
    55d4:	ldr	r0, [sp, #24]
    55d8:	sub	r1, fp, #20
    55dc:	bl	3304 <get_array_element_read_type>
    55e0:	cmp	r0, #0
    55e4:	beq	55f4 <coda_cursor_read_uint64_array+0x18c>
    55e8:	mvn	r0, #0
    55ec:	str	r0, [fp, #-4]
    55f0:	b	5848 <coda_cursor_read_uint64_array+0x3e0>
    55f4:	ldr	r0, [fp, #-20]	; 0xffffffec
    55f8:	sub	r0, r0, #1
    55fc:	cmp	r0, #6
    5600:	str	r0, [sp, #4]
    5604:	bhi	5810 <coda_cursor_read_uint64_array+0x3a8>
    5608:	add	r0, pc, #8
    560c:	ldr	r1, [sp, #4]
    5610:	ldr	r0, [r0, r1, lsl #2]
    5614:	mov	pc, r0
    5618:	.word	0x00005634
    561c:	.word	0x00005810
    5620:	.word	0x000056c4
    5624:	.word	0x00005810
    5628:	.word	0x00005758
    562c:	.word	0x00005810
    5630:	.word	0x000057e8
    5634:	ldr	r0, [fp, #-8]
    5638:	ldr	r1, [fp, #-12]
    563c:	ldr	r2, [fp, #-16]
    5640:	bl	3774 <read_uint8_array>
    5644:	cmp	r0, #0
    5648:	beq	5658 <coda_cursor_read_uint64_array+0x1f0>
    564c:	mvn	r0, #0
    5650:	str	r0, [fp, #-4]
    5654:	b	5848 <coda_cursor_read_uint64_array+0x3e0>
    5658:	ldr	r0, [fp, #-8]
    565c:	add	r1, sp, #20
    5660:	bl	0 <coda_cursor_get_num_elements>
    5664:	cmp	r0, #0
    5668:	beq	5678 <coda_cursor_read_uint64_array+0x210>
    566c:	mvn	r0, #0
    5670:	str	r0, [fp, #-4]
    5674:	b	5848 <coda_cursor_read_uint64_array+0x3e0>
    5678:	ldr	r0, [sp, #20]
    567c:	sub	r0, r0, #1
    5680:	str	r0, [sp, #16]
    5684:	ldr	r0, [sp, #16]
    5688:	cmp	r0, #0
    568c:	blt	56c0 <coda_cursor_read_uint64_array+0x258>
    5690:	ldr	r0, [fp, #-12]
    5694:	ldr	r1, [sp, #16]
    5698:	ldrb	r2, [r0, r1]
    569c:	add	r3, r0, r1, lsl #3
    56a0:	str	r2, [r0, r1, lsl #3]
    56a4:	mov	r0, #0
    56a8:	str	r0, [r3, #4]
    56ac:	ldr	r0, [sp, #16]
    56b0:	mvn	r1, #0
    56b4:	add	r0, r0, r1
    56b8:	str	r0, [sp, #16]
    56bc:	b	5684 <coda_cursor_read_uint64_array+0x21c>
    56c0:	b	5840 <coda_cursor_read_uint64_array+0x3d8>
    56c4:	ldr	r0, [fp, #-8]
    56c8:	ldr	r1, [fp, #-12]
    56cc:	ldr	r2, [fp, #-16]
    56d0:	bl	40b0 <read_uint16_array>
    56d4:	cmp	r0, #0
    56d8:	beq	56e8 <coda_cursor_read_uint64_array+0x280>
    56dc:	mvn	r0, #0
    56e0:	str	r0, [fp, #-4]
    56e4:	b	5848 <coda_cursor_read_uint64_array+0x3e0>
    56e8:	ldr	r0, [fp, #-8]
    56ec:	add	r1, sp, #20
    56f0:	bl	0 <coda_cursor_get_num_elements>
    56f4:	cmp	r0, #0
    56f8:	beq	5708 <coda_cursor_read_uint64_array+0x2a0>
    56fc:	mvn	r0, #0
    5700:	str	r0, [fp, #-4]
    5704:	b	5848 <coda_cursor_read_uint64_array+0x3e0>
    5708:	ldr	r0, [sp, #20]
    570c:	sub	r0, r0, #1
    5710:	str	r0, [sp, #16]
    5714:	ldr	r0, [sp, #16]
    5718:	cmp	r0, #0
    571c:	blt	5754 <coda_cursor_read_uint64_array+0x2ec>
    5720:	ldr	r0, [fp, #-12]
    5724:	ldr	r1, [sp, #16]
    5728:	add	r2, r0, r1, lsl #1
    572c:	ldrh	r2, [r2]
    5730:	add	r3, r0, r1, lsl #3
    5734:	str	r2, [r0, r1, lsl #3]
    5738:	mov	r0, #0
    573c:	str	r0, [r3, #4]
    5740:	ldr	r0, [sp, #16]
    5744:	mvn	r1, #0
    5748:	add	r0, r0, r1
    574c:	str	r0, [sp, #16]
    5750:	b	5714 <coda_cursor_read_uint64_array+0x2ac>
    5754:	b	5840 <coda_cursor_read_uint64_array+0x3d8>
    5758:	ldr	r0, [fp, #-8]
    575c:	ldr	r1, [fp, #-12]
    5760:	ldr	r2, [fp, #-16]
    5764:	bl	4ba0 <read_uint32_array>
    5768:	cmp	r0, #0
    576c:	beq	577c <coda_cursor_read_uint64_array+0x314>
    5770:	mvn	r0, #0
    5774:	str	r0, [fp, #-4]
    5778:	b	5848 <coda_cursor_read_uint64_array+0x3e0>
    577c:	ldr	r0, [fp, #-8]
    5780:	add	r1, sp, #20
    5784:	bl	0 <coda_cursor_get_num_elements>
    5788:	cmp	r0, #0
    578c:	beq	579c <coda_cursor_read_uint64_array+0x334>
    5790:	mvn	r0, #0
    5794:	str	r0, [fp, #-4]
    5798:	b	5848 <coda_cursor_read_uint64_array+0x3e0>
    579c:	ldr	r0, [sp, #20]
    57a0:	sub	r0, r0, #1
    57a4:	str	r0, [sp, #16]
    57a8:	ldr	r0, [sp, #16]
    57ac:	cmp	r0, #0
    57b0:	blt	57e4 <coda_cursor_read_uint64_array+0x37c>
    57b4:	ldr	r0, [fp, #-12]
    57b8:	ldr	r1, [sp, #16]
    57bc:	ldr	r2, [r0, r1, lsl #2]
    57c0:	add	r3, r0, r1, lsl #3
    57c4:	str	r2, [r0, r1, lsl #3]
    57c8:	mov	r0, #0
    57cc:	str	r0, [r3, #4]
    57d0:	ldr	r0, [sp, #16]
    57d4:	mvn	r1, #0
    57d8:	add	r0, r0, r1
    57dc:	str	r0, [sp, #16]
    57e0:	b	57a8 <coda_cursor_read_uint64_array+0x340>
    57e4:	b	5840 <coda_cursor_read_uint64_array+0x3d8>
    57e8:	ldr	r0, [fp, #-8]
    57ec:	ldr	r1, [fp, #-12]
    57f0:	ldr	r2, [fp, #-16]
    57f4:	bl	5854 <read_uint64_array>
    57f8:	cmp	r0, #0
    57fc:	beq	580c <coda_cursor_read_uint64_array+0x3a4>
    5800:	mvn	r0, #0
    5804:	str	r0, [fp, #-4]
    5808:	b	5848 <coda_cursor_read_uint64_array+0x3e0>
    580c:	b	5840 <coda_cursor_read_uint64_array+0x3d8>
    5810:	ldr	r0, [fp, #-20]	; 0xffffffec
    5814:	bl	0 <coda_type_get_native_type_name>
    5818:	mvn	lr, #104	; 0x68
    581c:	str	r0, [sp]
    5820:	mov	r0, lr
    5824:	movw	r1, #0
    5828:	movt	r1, #0
    582c:	ldr	r2, [sp]
    5830:	bl	0 <coda_set_error>
    5834:	mvn	r0, #0
    5838:	str	r0, [fp, #-4]
    583c:	b	5848 <coda_cursor_read_uint64_array+0x3e0>
    5840:	movw	r0, #0
    5844:	str	r0, [fp, #-4]
    5848:	ldr	r0, [fp, #-4]
    584c:	mov	sp, fp
    5850:	pop	{fp, pc}

00005854 <read_uint64_array>:
    5854:	push	{fp, lr}
    5858:	mov	fp, sp
    585c:	sub	sp, sp, #24
    5860:	str	r0, [fp, #-8]
    5864:	str	r1, [sp, #12]
    5868:	str	r2, [sp, #8]
    586c:	ldr	r0, [fp, #-8]
    5870:	ldr	r1, [r0, #4]
    5874:	add	r0, r0, r1, lsl #4
    5878:	ldr	r0, [r0, #-8]
    587c:	ldr	r0, [r0]
    5880:	cmp	r0, #0
    5884:	str	r0, [sp, #4]
    5888:	beq	58e4 <read_uint64_array+0x90>
    588c:	b	5890 <read_uint64_array+0x3c>
    5890:	ldr	r0, [sp, #4]
    5894:	cmp	r0, #1
    5898:	beq	58fc <read_uint64_array+0xa8>
    589c:	b	58a0 <read_uint64_array+0x4c>
    58a0:	ldr	r0, [sp, #4]
    58a4:	cmp	r0, #100	; 0x64
    58a8:	beq	5914 <read_uint64_array+0xc0>
    58ac:	b	58b0 <read_uint64_array+0x5c>
    58b0:	ldr	r0, [sp, #4]
    58b4:	cmp	r0, #101	; 0x65
    58b8:	beq	592c <read_uint64_array+0xd8>
    58bc:	b	58c0 <read_uint64_array+0x6c>
    58c0:	ldr	r0, [sp, #4]
    58c4:	cmp	r0, #102	; 0x66
    58c8:	beq	5944 <read_uint64_array+0xf0>
    58cc:	b	58d0 <read_uint64_array+0x7c>
    58d0:	ldr	r0, [sp, #4]
    58d4:	sub	r1, r0, #103	; 0x67
    58d8:	cmp	r1, #3
    58dc:	bcc	595c <read_uint64_array+0x108>
    58e0:	b	597c <read_uint64_array+0x128>
    58e4:	ldr	r0, [fp, #-8]
    58e8:	ldr	r1, [sp, #12]
    58ec:	ldr	r2, [sp, #8]
    58f0:	bl	0 <coda_ascii_cursor_read_uint64_array>
    58f4:	str	r0, [fp, #-4]
    58f8:	b	59a8 <read_uint64_array+0x154>
    58fc:	ldr	r0, [fp, #-8]
    5900:	ldr	r1, [sp, #12]
    5904:	ldr	r2, [sp, #8]
    5908:	bl	0 <coda_bin_cursor_read_uint64_array>
    590c:	str	r0, [fp, #-4]
    5910:	b	59a8 <read_uint64_array+0x154>
    5914:	ldr	r0, [fp, #-8]
    5918:	ldr	r1, [sp, #12]
    591c:	ldr	r2, [sp, #8]
    5920:	bl	0 <coda_mem_cursor_read_uint64_array>
    5924:	str	r0, [fp, #-4]
    5928:	b	59a8 <read_uint64_array+0x154>
    592c:	mvn	r0, #10
    5930:	movw	r1, #0
    5934:	bl	0 <coda_set_error>
    5938:	mvn	r0, #0
    593c:	str	r0, [fp, #-4]
    5940:	b	59a8 <read_uint64_array+0x154>
    5944:	mvn	r0, #12
    5948:	movw	r1, #0
    594c:	bl	0 <coda_set_error>
    5950:	mvn	r0, #0
    5954:	str	r0, [fp, #-4]
    5958:	b	59a8 <read_uint64_array+0x154>
    595c:	movw	r0, #0
    5960:	movt	r0, #0
    5964:	movw	r1, #0
    5968:	movt	r1, #0
    596c:	movw	r2, #1176	; 0x498
    5970:	movw	r3, #0
    5974:	movt	r3, #0
    5978:	bl	0 <__assert_fail>
    597c:	ldr	r0, [sp, #8]
    5980:	cmp	r0, #0
    5984:	beq	59a0 <read_uint64_array+0x14c>
    5988:	ldr	r0, [fp, #-8]
    598c:	ldr	r1, [sp, #12]
    5990:	movw	r2, #8
    5994:	bl	cb58 <transpose_array>
    5998:	str	r0, [fp, #-4]
    599c:	b	59a8 <read_uint64_array+0x154>
    59a0:	movw	r0, #0
    59a4:	str	r0, [fp, #-4]
    59a8:	ldr	r0, [fp, #-4]
    59ac:	mov	sp, fp
    59b0:	pop	{fp, pc}

000059b4 <coda_cursor_read_float_array>:
    59b4:	push	{fp, lr}
    59b8:	mov	fp, sp
    59bc:	sub	sp, sp, #88	; 0x58
    59c0:	str	r0, [fp, #-8]
    59c4:	str	r1, [fp, #-12]
    59c8:	str	r2, [fp, #-16]
    59cc:	ldr	r0, [fp, #-8]
    59d0:	movw	r1, #0
    59d4:	cmp	r0, r1
    59d8:	beq	5a10 <coda_cursor_read_float_array+0x5c>
    59dc:	ldr	r0, [fp, #-8]
    59e0:	ldr	r0, [r0, #4]
    59e4:	cmp	r0, #0
    59e8:	ble	5a10 <coda_cursor_read_float_array+0x5c>
    59ec:	ldr	r0, [fp, #-8]
    59f0:	add	r1, r0, #8
    59f4:	ldr	r0, [r0, #4]
    59f8:	sub	r0, r0, #1
    59fc:	add	r0, r1, r0, lsl #4
    5a00:	ldr	r0, [r0]
    5a04:	movw	r1, #0
    5a08:	cmp	r0, r1
    5a0c:	bne	5a38 <coda_cursor_read_float_array+0x84>
    5a10:	mvn	r0, #99	; 0x63
    5a14:	movw	r1, #0
    5a18:	movt	r1, #0
    5a1c:	movw	r2, #0
    5a20:	movt	r2, #0
    5a24:	movw	r3, #3673	; 0xe59
    5a28:	bl	0 <coda_set_error>
    5a2c:	mvn	r0, #0
    5a30:	str	r0, [fp, #-4]
    5a34:	b	6380 <coda_cursor_read_float_array+0x9cc>
    5a38:	ldr	r0, [fp, #-12]
    5a3c:	movw	r1, #0
    5a40:	cmp	r0, r1
    5a44:	bne	5a70 <coda_cursor_read_float_array+0xbc>
    5a48:	mvn	r0, #99	; 0x63
    5a4c:	movw	r1, #0
    5a50:	movt	r1, #0
    5a54:	movw	r2, #0
    5a58:	movt	r2, #0
    5a5c:	movw	r3, #3678	; 0xe5e
    5a60:	bl	0 <coda_set_error>
    5a64:	mvn	r0, #0
    5a68:	str	r0, [fp, #-4]
    5a6c:	b	6380 <coda_cursor_read_float_array+0x9cc>
    5a70:	ldr	r0, [fp, #-8]
    5a74:	add	r1, r0, #8
    5a78:	ldr	r0, [r0, #4]
    5a7c:	sub	r0, r0, #1
    5a80:	add	r0, r1, r0, lsl #4
    5a84:	ldr	r0, [r0]
    5a88:	ldr	r0, [r0]
    5a8c:	cmp	r0, #100	; 0x64
    5a90:	bcs	5ab4 <coda_cursor_read_float_array+0x100>
    5a94:	ldr	r0, [fp, #-8]
    5a98:	add	r1, r0, #8
    5a9c:	ldr	r0, [r0, #4]
    5aa0:	sub	r0, r0, #1
    5aa4:	add	r0, r1, r0, lsl #4
    5aa8:	ldr	r0, [r0]
    5aac:	str	r0, [sp, #32]
    5ab0:	b	5ad4 <coda_cursor_read_float_array+0x120>
    5ab4:	ldr	r0, [fp, #-8]
    5ab8:	add	r1, r0, #8
    5abc:	ldr	r0, [r0, #4]
    5ac0:	sub	r0, r0, #1
    5ac4:	add	r0, r1, r0, lsl #4
    5ac8:	ldr	r0, [r0]
    5acc:	ldr	r0, [r0, #4]
    5ad0:	str	r0, [sp, #32]
    5ad4:	ldr	r0, [sp, #32]
    5ad8:	str	r0, [fp, #-28]	; 0xffffffe4
    5adc:	ldr	r0, [fp, #-28]	; 0xffffffe4
    5ae0:	ldr	r0, [r0, #8]
    5ae4:	cmp	r0, #1
    5ae8:	beq	5b20 <coda_cursor_read_float_array+0x16c>
    5aec:	ldr	r0, [fp, #-28]	; 0xffffffe4
    5af0:	ldr	r0, [r0, #8]
    5af4:	bl	0 <coda_type_get_class_name>
    5af8:	mvn	lr, #104	; 0x68
    5afc:	str	r0, [sp, #28]
    5b00:	mov	r0, lr
    5b04:	movw	r1, #0
    5b08:	movt	r1, #0
    5b0c:	ldr	r2, [sp, #28]
    5b10:	bl	0 <coda_set_error>
    5b14:	mvn	r0, #0
    5b18:	str	r0, [fp, #-4]
    5b1c:	b	6380 <coda_cursor_read_float_array+0x9cc>
    5b20:	ldr	r0, [fp, #-28]	; 0xffffffe4
    5b24:	sub	r1, fp, #20
    5b28:	sub	r2, fp, #24
    5b2c:	bl	638c <get_array_element_unconverted_read_type>
    5b30:	cmp	r0, #0
    5b34:	beq	5b44 <coda_cursor_read_float_array+0x190>
    5b38:	mvn	r0, #0
    5b3c:	str	r0, [fp, #-4]
    5b40:	b	6380 <coda_cursor_read_float_array+0x9cc>
    5b44:	ldr	r0, [fp, #-24]	; 0xffffffe8
    5b48:	movw	r1, #0
    5b4c:	cmp	r0, r1
    5b50:	beq	5c54 <coda_cursor_read_float_array+0x2a0>
    5b54:	ldr	r0, [fp, #-8]
    5b58:	sub	r1, fp, #32
    5b5c:	bl	0 <coda_cursor_get_num_elements>
    5b60:	cmp	r0, #0
    5b64:	beq	5b74 <coda_cursor_read_float_array+0x1c0>
    5b68:	mvn	r0, #0
    5b6c:	str	r0, [fp, #-4]
    5b70:	b	6380 <coda_cursor_read_float_array+0x9cc>
    5b74:	ldr	r0, [fp, #-32]	; 0xffffffe0
    5b78:	lsl	r0, r0, #3
    5b7c:	bl	0 <malloc>
    5b80:	str	r0, [fp, #-40]	; 0xffffffd8
    5b84:	ldr	r0, [fp, #-40]	; 0xffffffd8
    5b88:	movw	lr, #0
    5b8c:	cmp	r0, lr
    5b90:	bne	5bc8 <coda_cursor_read_float_array+0x214>
    5b94:	ldr	r0, [fp, #-32]	; 0xffffffe0
    5b98:	lsl	r2, r0, #3
    5b9c:	mvn	r0, #0
    5ba0:	movw	r1, #0
    5ba4:	movt	r1, #0
    5ba8:	movw	r3, #0
    5bac:	movt	r3, #0
    5bb0:	movw	ip, #3707	; 0xe7b
    5bb4:	str	ip, [sp]
    5bb8:	bl	0 <coda_set_error>
    5bbc:	mvn	r0, #0
    5bc0:	str	r0, [fp, #-4]
    5bc4:	b	6380 <coda_cursor_read_float_array+0x9cc>
    5bc8:	ldr	r0, [fp, #-8]
    5bcc:	ldr	r1, [fp, #-40]	; 0xffffffd8
    5bd0:	ldr	r2, [fp, #-16]
    5bd4:	bl	6430 <coda_cursor_read_double_array>
    5bd8:	cmp	r0, #0
    5bdc:	beq	5bf4 <coda_cursor_read_float_array+0x240>
    5be0:	ldr	r0, [fp, #-40]	; 0xffffffd8
    5be4:	bl	0 <free>
    5be8:	mvn	r0, #0
    5bec:	str	r0, [fp, #-4]
    5bf0:	b	6380 <coda_cursor_read_float_array+0x9cc>
    5bf4:	ldr	r0, [fp, #-32]	; 0xffffffe0
    5bf8:	sub	r0, r0, #1
    5bfc:	str	r0, [fp, #-36]	; 0xffffffdc
    5c00:	ldr	r0, [fp, #-36]	; 0xffffffdc
    5c04:	cmp	r0, #0
    5c08:	blt	5c40 <coda_cursor_read_float_array+0x28c>
    5c0c:	ldr	r0, [fp, #-40]	; 0xffffffd8
    5c10:	ldr	r1, [fp, #-36]	; 0xffffffdc
    5c14:	add	r0, r0, r1, lsl #3
    5c18:	vldr	d16, [r0]
    5c1c:	vcvt.f32.f64	s0, d16
    5c20:	ldr	r0, [fp, #-12]
    5c24:	add	r0, r0, r1, lsl #2
    5c28:	vstr	s0, [r0]
    5c2c:	ldr	r0, [fp, #-36]	; 0xffffffdc
    5c30:	mvn	r1, #0
    5c34:	add	r0, r0, r1
    5c38:	str	r0, [fp, #-36]	; 0xffffffdc
    5c3c:	b	5c00 <coda_cursor_read_float_array+0x24c>
    5c40:	ldr	r0, [fp, #-40]	; 0xffffffd8
    5c44:	bl	0 <free>
    5c48:	movw	r0, #0
    5c4c:	str	r0, [fp, #-4]
    5c50:	b	6380 <coda_cursor_read_float_array+0x9cc>
    5c54:	ldr	r0, [fp, #-20]	; 0xffffffec
    5c58:	cmp	r0, #9
    5c5c:	str	r0, [sp, #24]
    5c60:	bhi	6348 <coda_cursor_read_float_array+0x994>
    5c64:	add	r0, pc, #8
    5c68:	ldr	r1, [sp, #24]
    5c6c:	ldr	r0, [r0, r1, lsl #2]
    5c70:	mov	pc, r0
    5c74:	.word	0x00005c9c
    5c78:	.word	0x00005d30
    5c7c:	.word	0x00005dc0
    5c80:	.word	0x00005e54
    5c84:	.word	0x00005ee8
    5c88:	.word	0x00005f74
    5c8c:	.word	0x00006000
    5c90:	.word	0x00006114
    5c94:	.word	0x00006228
    5c98:	.word	0x00006250
    5c9c:	ldr	r0, [fp, #-8]
    5ca0:	ldr	r1, [fp, #-12]
    5ca4:	ldr	r2, [fp, #-16]
    5ca8:	bl	33a8 <read_int8_array>
    5cac:	cmp	r0, #0
    5cb0:	beq	5cc0 <coda_cursor_read_float_array+0x30c>
    5cb4:	mvn	r0, #0
    5cb8:	str	r0, [fp, #-4]
    5cbc:	b	6380 <coda_cursor_read_float_array+0x9cc>
    5cc0:	ldr	r0, [fp, #-8]
    5cc4:	sub	r1, fp, #32
    5cc8:	bl	0 <coda_cursor_get_num_elements>
    5ccc:	cmp	r0, #0
    5cd0:	beq	5ce0 <coda_cursor_read_float_array+0x32c>
    5cd4:	mvn	r0, #0
    5cd8:	str	r0, [fp, #-4]
    5cdc:	b	6380 <coda_cursor_read_float_array+0x9cc>
    5ce0:	ldr	r0, [fp, #-32]	; 0xffffffe0
    5ce4:	sub	r0, r0, #1
    5ce8:	str	r0, [fp, #-36]	; 0xffffffdc
    5cec:	ldr	r0, [fp, #-36]	; 0xffffffdc
    5cf0:	cmp	r0, #0
    5cf4:	blt	5d2c <coda_cursor_read_float_array+0x378>
    5cf8:	ldr	r0, [fp, #-12]
    5cfc:	ldr	r1, [fp, #-36]	; 0xffffffdc
    5d00:	add	r2, r0, r1
    5d04:	ldrsb	r2, [r2]
    5d08:	vmov	s0, r2
    5d0c:	vcvt.f32.s32	s0, s0
    5d10:	add	r0, r0, r1, lsl #2
    5d14:	vstr	s0, [r0]
    5d18:	ldr	r0, [fp, #-36]	; 0xffffffdc
    5d1c:	mvn	r1, #0
    5d20:	add	r0, r0, r1
    5d24:	str	r0, [fp, #-36]	; 0xffffffdc
    5d28:	b	5cec <coda_cursor_read_float_array+0x338>
    5d2c:	b	6378 <coda_cursor_read_float_array+0x9c4>
    5d30:	ldr	r0, [fp, #-8]
    5d34:	ldr	r1, [fp, #-12]
    5d38:	ldr	r2, [fp, #-16]
    5d3c:	bl	3774 <read_uint8_array>
    5d40:	cmp	r0, #0
    5d44:	beq	5d54 <coda_cursor_read_float_array+0x3a0>
    5d48:	mvn	r0, #0
    5d4c:	str	r0, [fp, #-4]
    5d50:	b	6380 <coda_cursor_read_float_array+0x9cc>
    5d54:	ldr	r0, [fp, #-8]
    5d58:	sub	r1, fp, #32
    5d5c:	bl	0 <coda_cursor_get_num_elements>
    5d60:	cmp	r0, #0
    5d64:	beq	5d74 <coda_cursor_read_float_array+0x3c0>
    5d68:	mvn	r0, #0
    5d6c:	str	r0, [fp, #-4]
    5d70:	b	6380 <coda_cursor_read_float_array+0x9cc>
    5d74:	ldr	r0, [fp, #-32]	; 0xffffffe0
    5d78:	sub	r0, r0, #1
    5d7c:	str	r0, [fp, #-36]	; 0xffffffdc
    5d80:	ldr	r0, [fp, #-36]	; 0xffffffdc
    5d84:	cmp	r0, #0
    5d88:	blt	5dbc <coda_cursor_read_float_array+0x408>
    5d8c:	ldr	r0, [fp, #-12]
    5d90:	ldr	r1, [fp, #-36]	; 0xffffffdc
    5d94:	ldrb	r2, [r0, r1]
    5d98:	vmov	s0, r2
    5d9c:	vcvt.f32.u32	s0, s0
    5da0:	add	r0, r0, r1, lsl #2
    5da4:	vstr	s0, [r0]
    5da8:	ldr	r0, [fp, #-36]	; 0xffffffdc
    5dac:	mvn	r1, #0
    5db0:	add	r0, r0, r1
    5db4:	str	r0, [fp, #-36]	; 0xffffffdc
    5db8:	b	5d80 <coda_cursor_read_float_array+0x3cc>
    5dbc:	b	6378 <coda_cursor_read_float_array+0x9c4>
    5dc0:	ldr	r0, [fp, #-8]
    5dc4:	ldr	r1, [fp, #-12]
    5dc8:	ldr	r2, [fp, #-16]
    5dcc:	bl	3c48 <read_int16_array>
    5dd0:	cmp	r0, #0
    5dd4:	beq	5de4 <coda_cursor_read_float_array+0x430>
    5dd8:	mvn	r0, #0
    5ddc:	str	r0, [fp, #-4]
    5de0:	b	6380 <coda_cursor_read_float_array+0x9cc>
    5de4:	ldr	r0, [fp, #-8]
    5de8:	sub	r1, fp, #32
    5dec:	bl	0 <coda_cursor_get_num_elements>
    5df0:	cmp	r0, #0
    5df4:	beq	5e04 <coda_cursor_read_float_array+0x450>
    5df8:	mvn	r0, #0
    5dfc:	str	r0, [fp, #-4]
    5e00:	b	6380 <coda_cursor_read_float_array+0x9cc>
    5e04:	ldr	r0, [fp, #-32]	; 0xffffffe0
    5e08:	sub	r0, r0, #1
    5e0c:	str	r0, [fp, #-36]	; 0xffffffdc
    5e10:	ldr	r0, [fp, #-36]	; 0xffffffdc
    5e14:	cmp	r0, #0
    5e18:	blt	5e50 <coda_cursor_read_float_array+0x49c>
    5e1c:	ldr	r0, [fp, #-12]
    5e20:	ldr	r1, [fp, #-36]	; 0xffffffdc
    5e24:	add	r2, r0, r1, lsl #1
    5e28:	ldrsh	r2, [r2]
    5e2c:	vmov	s0, r2
    5e30:	vcvt.f32.s32	s0, s0
    5e34:	add	r0, r0, r1, lsl #2
    5e38:	vstr	s0, [r0]
    5e3c:	ldr	r0, [fp, #-36]	; 0xffffffdc
    5e40:	mvn	r1, #0
    5e44:	add	r0, r0, r1
    5e48:	str	r0, [fp, #-36]	; 0xffffffdc
    5e4c:	b	5e10 <coda_cursor_read_float_array+0x45c>
    5e50:	b	6378 <coda_cursor_read_float_array+0x9c4>
    5e54:	ldr	r0, [fp, #-8]
    5e58:	ldr	r1, [fp, #-12]
    5e5c:	ldr	r2, [fp, #-16]
    5e60:	bl	40b0 <read_uint16_array>
    5e64:	cmp	r0, #0
    5e68:	beq	5e78 <coda_cursor_read_float_array+0x4c4>
    5e6c:	mvn	r0, #0
    5e70:	str	r0, [fp, #-4]
    5e74:	b	6380 <coda_cursor_read_float_array+0x9cc>
    5e78:	ldr	r0, [fp, #-8]
    5e7c:	sub	r1, fp, #32
    5e80:	bl	0 <coda_cursor_get_num_elements>
    5e84:	cmp	r0, #0
    5e88:	beq	5e98 <coda_cursor_read_float_array+0x4e4>
    5e8c:	mvn	r0, #0
    5e90:	str	r0, [fp, #-4]
    5e94:	b	6380 <coda_cursor_read_float_array+0x9cc>
    5e98:	ldr	r0, [fp, #-32]	; 0xffffffe0
    5e9c:	sub	r0, r0, #1
    5ea0:	str	r0, [fp, #-36]	; 0xffffffdc
    5ea4:	ldr	r0, [fp, #-36]	; 0xffffffdc
    5ea8:	cmp	r0, #0
    5eac:	blt	5ee4 <coda_cursor_read_float_array+0x530>
    5eb0:	ldr	r0, [fp, #-12]
    5eb4:	ldr	r1, [fp, #-36]	; 0xffffffdc
    5eb8:	add	r2, r0, r1, lsl #1
    5ebc:	ldrh	r2, [r2]
    5ec0:	vmov	s0, r2
    5ec4:	vcvt.f32.u32	s0, s0
    5ec8:	add	r0, r0, r1, lsl #2
    5ecc:	vstr	s0, [r0]
    5ed0:	ldr	r0, [fp, #-36]	; 0xffffffdc
    5ed4:	mvn	r1, #0
    5ed8:	add	r0, r0, r1
    5edc:	str	r0, [fp, #-36]	; 0xffffffdc
    5ee0:	b	5ea4 <coda_cursor_read_float_array+0x4f0>
    5ee4:	b	6378 <coda_cursor_read_float_array+0x9c4>
    5ee8:	ldr	r0, [fp, #-8]
    5eec:	ldr	r1, [fp, #-12]
    5ef0:	ldr	r2, [fp, #-16]
    5ef4:	bl	469c <read_int32_array>
    5ef8:	cmp	r0, #0
    5efc:	beq	5f0c <coda_cursor_read_float_array+0x558>
    5f00:	mvn	r0, #0
    5f04:	str	r0, [fp, #-4]
    5f08:	b	6380 <coda_cursor_read_float_array+0x9cc>
    5f0c:	ldr	r0, [fp, #-8]
    5f10:	sub	r1, fp, #32
    5f14:	bl	0 <coda_cursor_get_num_elements>
    5f18:	cmp	r0, #0
    5f1c:	beq	5f2c <coda_cursor_read_float_array+0x578>
    5f20:	mvn	r0, #0
    5f24:	str	r0, [fp, #-4]
    5f28:	b	6380 <coda_cursor_read_float_array+0x9cc>
    5f2c:	ldr	r0, [fp, #-32]	; 0xffffffe0
    5f30:	sub	r0, r0, #1
    5f34:	str	r0, [fp, #-36]	; 0xffffffdc
    5f38:	ldr	r0, [fp, #-36]	; 0xffffffdc
    5f3c:	cmp	r0, #0
    5f40:	blt	5f70 <coda_cursor_read_float_array+0x5bc>
    5f44:	ldr	r0, [fp, #-12]
    5f48:	ldr	r1, [fp, #-36]	; 0xffffffdc
    5f4c:	ldr	r1, [r0, r1, lsl #2]!
    5f50:	vmov	s0, r1
    5f54:	vcvt.f32.s32	s0, s0
    5f58:	vstr	s0, [r0]
    5f5c:	ldr	r0, [fp, #-36]	; 0xffffffdc
    5f60:	mvn	r1, #0
    5f64:	add	r0, r0, r1
    5f68:	str	r0, [fp, #-36]	; 0xffffffdc
    5f6c:	b	5f38 <coda_cursor_read_float_array+0x584>
    5f70:	b	6378 <coda_cursor_read_float_array+0x9c4>
    5f74:	ldr	r0, [fp, #-8]
    5f78:	ldr	r1, [fp, #-12]
    5f7c:	ldr	r2, [fp, #-16]
    5f80:	bl	4ba0 <read_uint32_array>
    5f84:	cmp	r0, #0
    5f88:	beq	5f98 <coda_cursor_read_float_array+0x5e4>
    5f8c:	mvn	r0, #0
    5f90:	str	r0, [fp, #-4]
    5f94:	b	6380 <coda_cursor_read_float_array+0x9cc>
    5f98:	ldr	r0, [fp, #-8]
    5f9c:	sub	r1, fp, #32
    5fa0:	bl	0 <coda_cursor_get_num_elements>
    5fa4:	cmp	r0, #0
    5fa8:	beq	5fb8 <coda_cursor_read_float_array+0x604>
    5fac:	mvn	r0, #0
    5fb0:	str	r0, [fp, #-4]
    5fb4:	b	6380 <coda_cursor_read_float_array+0x9cc>
    5fb8:	ldr	r0, [fp, #-32]	; 0xffffffe0
    5fbc:	sub	r0, r0, #1
    5fc0:	str	r0, [fp, #-36]	; 0xffffffdc
    5fc4:	ldr	r0, [fp, #-36]	; 0xffffffdc
    5fc8:	cmp	r0, #0
    5fcc:	blt	5ffc <coda_cursor_read_float_array+0x648>
    5fd0:	ldr	r0, [fp, #-12]
    5fd4:	ldr	r1, [fp, #-36]	; 0xffffffdc
    5fd8:	ldr	r1, [r0, r1, lsl #2]!
    5fdc:	vmov	s0, r1
    5fe0:	vcvt.f32.u32	s0, s0
    5fe4:	vstr	s0, [r0]
    5fe8:	ldr	r0, [fp, #-36]	; 0xffffffdc
    5fec:	mvn	r1, #0
    5ff0:	add	r0, r0, r1
    5ff4:	str	r0, [fp, #-36]	; 0xffffffdc
    5ff8:	b	5fc4 <coda_cursor_read_float_array+0x610>
    5ffc:	b	6378 <coda_cursor_read_float_array+0x9c4>
    6000:	ldr	r0, [fp, #-8]
    6004:	sub	r1, fp, #32
    6008:	bl	0 <coda_cursor_get_num_elements>
    600c:	cmp	r0, #0
    6010:	beq	6020 <coda_cursor_read_float_array+0x66c>
    6014:	mvn	r0, #0
    6018:	str	r0, [fp, #-4]
    601c:	b	6380 <coda_cursor_read_float_array+0x9cc>
    6020:	ldr	r0, [fp, #-32]	; 0xffffffe0
    6024:	lsl	r0, r0, #3
    6028:	bl	0 <malloc>
    602c:	str	r0, [sp, #44]	; 0x2c
    6030:	ldr	r0, [sp, #44]	; 0x2c
    6034:	movw	lr, #0
    6038:	cmp	r0, lr
    603c:	bne	6074 <coda_cursor_read_float_array+0x6c0>
    6040:	ldr	r0, [fp, #-32]	; 0xffffffe0
    6044:	lsl	r2, r0, #3
    6048:	mvn	r0, #0
    604c:	movw	r1, #0
    6050:	movt	r1, #0
    6054:	movw	r3, #0
    6058:	movt	r3, #0
    605c:	movw	ip, #3820	; 0xeec
    6060:	str	ip, [sp]
    6064:	bl	0 <coda_set_error>
    6068:	mvn	r0, #0
    606c:	str	r0, [fp, #-4]
    6070:	b	6380 <coda_cursor_read_float_array+0x9cc>
    6074:	ldr	r0, [fp, #-8]
    6078:	ldr	r1, [sp, #44]	; 0x2c
    607c:	ldr	r2, [fp, #-16]
    6080:	bl	52d4 <read_int64_array>
    6084:	cmp	r0, #0
    6088:	beq	60a0 <coda_cursor_read_float_array+0x6ec>
    608c:	ldr	r0, [sp, #44]	; 0x2c
    6090:	bl	0 <free>
    6094:	mvn	r0, #0
    6098:	str	r0, [fp, #-4]
    609c:	b	6380 <coda_cursor_read_float_array+0x9cc>
    60a0:	ldr	r0, [fp, #-32]	; 0xffffffe0
    60a4:	sub	r0, r0, #1
    60a8:	str	r0, [fp, #-36]	; 0xffffffdc
    60ac:	ldr	r0, [fp, #-36]	; 0xffffffdc
    60b0:	cmp	r0, #0
    60b4:	blt	6108 <coda_cursor_read_float_array+0x754>
    60b8:	ldr	r0, [sp, #44]	; 0x2c
    60bc:	ldr	r1, [fp, #-36]	; 0xffffffdc
    60c0:	ldr	r2, [r0, r1, lsl #3]!
    60c4:	ldr	r0, [r0, #4]
    60c8:	str	r0, [sp, #20]
    60cc:	mov	r0, r2
    60d0:	ldr	r2, [sp, #20]
    60d4:	str	r1, [sp, #16]
    60d8:	mov	r1, r2
    60dc:	bl	0 <__aeabi_l2f>
    60e0:	vmov	s0, r0
    60e4:	ldr	r0, [fp, #-12]
    60e8:	ldr	r1, [sp, #16]
    60ec:	add	r0, r0, r1, lsl #2
    60f0:	vstr	s0, [r0]
    60f4:	ldr	r0, [fp, #-36]	; 0xffffffdc
    60f8:	mvn	r1, #0
    60fc:	add	r0, r0, r1
    6100:	str	r0, [fp, #-36]	; 0xffffffdc
    6104:	b	60ac <coda_cursor_read_float_array+0x6f8>
    6108:	ldr	r0, [sp, #44]	; 0x2c
    610c:	bl	0 <free>
    6110:	b	6378 <coda_cursor_read_float_array+0x9c4>
    6114:	ldr	r0, [fp, #-8]
    6118:	sub	r1, fp, #32
    611c:	bl	0 <coda_cursor_get_num_elements>
    6120:	cmp	r0, #0
    6124:	beq	6134 <coda_cursor_read_float_array+0x780>
    6128:	mvn	r0, #0
    612c:	str	r0, [fp, #-4]
    6130:	b	6380 <coda_cursor_read_float_array+0x9cc>
    6134:	ldr	r0, [fp, #-32]	; 0xffffffe0
    6138:	lsl	r0, r0, #3
    613c:	bl	0 <malloc>
    6140:	str	r0, [sp, #40]	; 0x28
    6144:	ldr	r0, [sp, #40]	; 0x28
    6148:	movw	lr, #0
    614c:	cmp	r0, lr
    6150:	bne	6188 <coda_cursor_read_float_array+0x7d4>
    6154:	ldr	r0, [fp, #-32]	; 0xffffffe0
    6158:	lsl	r2, r0, #3
    615c:	mvn	r0, #0
    6160:	movw	r1, #0
    6164:	movt	r1, #0
    6168:	movw	r3, #0
    616c:	movt	r3, #0
    6170:	movw	ip, #3847	; 0xf07
    6174:	str	ip, [sp]
    6178:	bl	0 <coda_set_error>
    617c:	mvn	r0, #0
    6180:	str	r0, [fp, #-4]
    6184:	b	6380 <coda_cursor_read_float_array+0x9cc>
    6188:	ldr	r0, [fp, #-8]
    618c:	ldr	r1, [sp, #40]	; 0x28
    6190:	ldr	r2, [fp, #-16]
    6194:	bl	5854 <read_uint64_array>
    6198:	cmp	r0, #0
    619c:	beq	61b4 <coda_cursor_read_float_array+0x800>
    61a0:	ldr	r0, [sp, #40]	; 0x28
    61a4:	bl	0 <free>
    61a8:	mvn	r0, #0
    61ac:	str	r0, [fp, #-4]
    61b0:	b	6380 <coda_cursor_read_float_array+0x9cc>
    61b4:	ldr	r0, [fp, #-32]	; 0xffffffe0
    61b8:	sub	r0, r0, #1
    61bc:	str	r0, [fp, #-36]	; 0xffffffdc
    61c0:	ldr	r0, [fp, #-36]	; 0xffffffdc
    61c4:	cmp	r0, #0
    61c8:	blt	621c <coda_cursor_read_float_array+0x868>
    61cc:	ldr	r0, [sp, #40]	; 0x28
    61d0:	ldr	r1, [fp, #-36]	; 0xffffffdc
    61d4:	ldr	r2, [r0, r1, lsl #3]!
    61d8:	ldr	r0, [r0, #4]
    61dc:	str	r0, [sp, #12]
    61e0:	mov	r0, r2
    61e4:	ldr	r2, [sp, #12]
    61e8:	str	r1, [sp, #8]
    61ec:	mov	r1, r2
    61f0:	bl	0 <__aeabi_ul2f>
    61f4:	vmov	s0, r0
    61f8:	ldr	r0, [fp, #-12]
    61fc:	ldr	r1, [sp, #8]
    6200:	add	r0, r0, r1, lsl #2
    6204:	vstr	s0, [r0]
    6208:	ldr	r0, [fp, #-36]	; 0xffffffdc
    620c:	mvn	r1, #0
    6210:	add	r0, r0, r1
    6214:	str	r0, [fp, #-36]	; 0xffffffdc
    6218:	b	61c0 <coda_cursor_read_float_array+0x80c>
    621c:	ldr	r0, [sp, #40]	; 0x28
    6220:	bl	0 <free>
    6224:	b	6378 <coda_cursor_read_float_array+0x9c4>
    6228:	ldr	r0, [fp, #-8]
    622c:	ldr	r1, [fp, #-12]
    6230:	ldr	r2, [fp, #-16]
    6234:	bl	6c7c <read_float_array>
    6238:	cmp	r0, #0
    623c:	beq	624c <coda_cursor_read_float_array+0x898>
    6240:	mvn	r0, #0
    6244:	str	r0, [fp, #-4]
    6248:	b	6380 <coda_cursor_read_float_array+0x9cc>
    624c:	b	6378 <coda_cursor_read_float_array+0x9c4>
    6250:	ldr	r0, [fp, #-8]
    6254:	sub	r1, fp, #32
    6258:	bl	0 <coda_cursor_get_num_elements>
    625c:	cmp	r0, #0
    6260:	beq	6270 <coda_cursor_read_float_array+0x8bc>
    6264:	mvn	r0, #0
    6268:	str	r0, [fp, #-4]
    626c:	b	6380 <coda_cursor_read_float_array+0x9cc>
    6270:	ldr	r0, [fp, #-32]	; 0xffffffe0
    6274:	lsl	r0, r0, #3
    6278:	bl	0 <malloc>
    627c:	str	r0, [sp, #36]	; 0x24
    6280:	ldr	r0, [sp, #36]	; 0x24
    6284:	movw	lr, #0
    6288:	cmp	r0, lr
    628c:	bne	62c4 <coda_cursor_read_float_array+0x910>
    6290:	ldr	r0, [fp, #-32]	; 0xffffffe0
    6294:	lsl	r2, r0, #3
    6298:	mvn	r0, #0
    629c:	movw	r1, #0
    62a0:	movt	r1, #0
    62a4:	movw	r3, #0
    62a8:	movt	r3, #0
    62ac:	movw	ip, #3880	; 0xf28
    62b0:	str	ip, [sp]
    62b4:	bl	0 <coda_set_error>
    62b8:	mvn	r0, #0
    62bc:	str	r0, [fp, #-4]
    62c0:	b	6380 <coda_cursor_read_float_array+0x9cc>
    62c4:	ldr	r0, [fp, #-8]
    62c8:	ldr	r1, [sp, #36]	; 0x24
    62cc:	ldr	r2, [fp, #-16]
    62d0:	bl	6e44 <read_double_array>
    62d4:	cmp	r0, #0
    62d8:	beq	62f0 <coda_cursor_read_float_array+0x93c>
    62dc:	ldr	r0, [sp, #36]	; 0x24
    62e0:	bl	0 <free>
    62e4:	mvn	r0, #0
    62e8:	str	r0, [fp, #-4]
    62ec:	b	6380 <coda_cursor_read_float_array+0x9cc>
    62f0:	ldr	r0, [fp, #-32]	; 0xffffffe0
    62f4:	sub	r0, r0, #1
    62f8:	str	r0, [fp, #-36]	; 0xffffffdc
    62fc:	ldr	r0, [fp, #-36]	; 0xffffffdc
    6300:	cmp	r0, #0
    6304:	blt	633c <coda_cursor_read_float_array+0x988>
    6308:	ldr	r0, [sp, #36]	; 0x24
    630c:	ldr	r1, [fp, #-36]	; 0xffffffdc
    6310:	add	r0, r0, r1, lsl #3
    6314:	vldr	d16, [r0]
    6318:	vcvt.f32.f64	s0, d16
    631c:	ldr	r0, [fp, #-12]
    6320:	add	r0, r0, r1, lsl #2
    6324:	vstr	s0, [r0]
    6328:	ldr	r0, [fp, #-36]	; 0xffffffdc
    632c:	mvn	r1, #0
    6330:	add	r0, r0, r1
    6334:	str	r0, [fp, #-36]	; 0xffffffdc
    6338:	b	62fc <coda_cursor_read_float_array+0x948>
    633c:	ldr	r0, [sp, #36]	; 0x24
    6340:	bl	0 <free>
    6344:	b	6378 <coda_cursor_read_float_array+0x9c4>
    6348:	ldr	r0, [fp, #-20]	; 0xffffffec
    634c:	bl	0 <coda_type_get_native_type_name>
    6350:	mvn	lr, #104	; 0x68
    6354:	str	r0, [sp, #4]
    6358:	mov	r0, lr
    635c:	movw	r1, #0
    6360:	movt	r1, #0
    6364:	ldr	r2, [sp, #4]
    6368:	bl	0 <coda_set_error>
    636c:	mvn	r0, #0
    6370:	str	r0, [fp, #-4]
    6374:	b	6380 <coda_cursor_read_float_array+0x9cc>
    6378:	movw	r0, #0
    637c:	str	r0, [fp, #-4]
    6380:	ldr	r0, [fp, #-4]
    6384:	mov	sp, fp
    6388:	pop	{fp, pc}

0000638c <get_array_element_unconverted_read_type>:
    638c:	push	{fp, lr}
    6390:	mov	fp, sp
    6394:	sub	sp, sp, #20
    6398:	str	r0, [fp, #-4]
    639c:	str	r1, [fp, #-8]
    63a0:	str	r2, [sp, #8]
    63a4:	ldr	r0, [fp, #-4]
    63a8:	ldr	r0, [r0, #40]	; 0x28
    63ac:	str	r0, [sp, #4]
    63b0:	ldr	r0, [sp, #4]
    63b4:	ldr	r0, [r0, #12]
    63b8:	ldr	r1, [fp, #-8]
    63bc:	str	r0, [r1]
    63c0:	ldr	r0, [sp, #4]
    63c4:	ldr	r0, [r0, #8]
    63c8:	cmp	r0, #2
    63cc:	beq	63e0 <get_array_element_unconverted_read_type+0x54>
    63d0:	ldr	r0, [sp, #4]
    63d4:	ldr	r0, [r0, #8]
    63d8:	cmp	r0, #3
    63dc:	bne	6414 <get_array_element_unconverted_read_type+0x88>
    63e0:	ldr	r0, [pc, #68]	; 642c <get_array_element_unconverted_read_type+0xa0>
    63e4:	ldr	r0, [pc, r0]
    63e8:	str	r0, [sp]
    63ec:	bl	0 <__aeabi_read_tp>
    63f0:	ldr	ip, [sp]
    63f4:	ldr	r0, [r0, ip]
    63f8:	cmp	r0, #0
    63fc:	beq	6414 <get_array_element_unconverted_read_type+0x88>
    6400:	ldr	r0, [sp, #4]
    6404:	ldr	r0, [r0, #48]	; 0x30
    6408:	ldr	r1, [sp, #8]
    640c:	str	r0, [r1]
    6410:	b	6420 <get_array_element_unconverted_read_type+0x94>
    6414:	ldr	r0, [sp, #8]
    6418:	movw	r1, #0
    641c:	str	r1, [r0]
    6420:	movw	r0, #0
    6424:	mov	sp, fp
    6428:	pop	{fp, pc}
    642c:	.word	0x00000040

00006430 <coda_cursor_read_double_array>:
    6430:	push	{fp, lr}
    6434:	mov	fp, sp
    6438:	sub	sp, sp, #64	; 0x40
    643c:	str	r0, [fp, #-8]
    6440:	str	r1, [fp, #-12]
    6444:	str	r2, [fp, #-16]
    6448:	ldr	r0, [fp, #-8]
    644c:	movw	r1, #0
    6450:	cmp	r0, r1
    6454:	beq	648c <coda_cursor_read_double_array+0x5c>
    6458:	ldr	r0, [fp, #-8]
    645c:	ldr	r0, [r0, #4]
    6460:	cmp	r0, #0
    6464:	ble	648c <coda_cursor_read_double_array+0x5c>
    6468:	ldr	r0, [fp, #-8]
    646c:	add	r1, r0, #8
    6470:	ldr	r0, [r0, #4]
    6474:	sub	r0, r0, #1
    6478:	add	r0, r1, r0, lsl #4
    647c:	ldr	r0, [r0]
    6480:	movw	r1, #0
    6484:	cmp	r0, r1
    6488:	bne	64b4 <coda_cursor_read_double_array+0x84>
    648c:	mvn	r0, #99	; 0x63
    6490:	movw	r1, #0
    6494:	movt	r1, #0
    6498:	movw	r2, #0
    649c:	movt	r2, #0
    64a0:	movw	r3, #3937	; 0xf61
    64a4:	bl	0 <coda_set_error>
    64a8:	mvn	r0, #0
    64ac:	str	r0, [fp, #-4]
    64b0:	b	6c70 <coda_cursor_read_double_array+0x840>
    64b4:	ldr	r0, [fp, #-12]
    64b8:	movw	r1, #0
    64bc:	cmp	r0, r1
    64c0:	bne	64ec <coda_cursor_read_double_array+0xbc>
    64c4:	mvn	r0, #99	; 0x63
    64c8:	movw	r1, #0
    64cc:	movt	r1, #0
    64d0:	movw	r2, #0
    64d4:	movt	r2, #0
    64d8:	movw	r3, #3942	; 0xf66
    64dc:	bl	0 <coda_set_error>
    64e0:	mvn	r0, #0
    64e4:	str	r0, [fp, #-4]
    64e8:	b	6c70 <coda_cursor_read_double_array+0x840>
    64ec:	ldr	r0, [fp, #-8]
    64f0:	add	r1, r0, #8
    64f4:	ldr	r0, [r0, #4]
    64f8:	sub	r0, r0, #1
    64fc:	add	r0, r1, r0, lsl #4
    6500:	ldr	r0, [r0]
    6504:	ldr	r0, [r0]
    6508:	cmp	r0, #100	; 0x64
    650c:	bcs	6530 <coda_cursor_read_double_array+0x100>
    6510:	ldr	r0, [fp, #-8]
    6514:	add	r1, r0, #8
    6518:	ldr	r0, [r0, #4]
    651c:	sub	r0, r0, #1
    6520:	add	r0, r1, r0, lsl #4
    6524:	ldr	r0, [r0]
    6528:	str	r0, [sp, #24]
    652c:	b	6550 <coda_cursor_read_double_array+0x120>
    6530:	ldr	r0, [fp, #-8]
    6534:	add	r1, r0, #8
    6538:	ldr	r0, [r0, #4]
    653c:	sub	r0, r0, #1
    6540:	add	r0, r1, r0, lsl #4
    6544:	ldr	r0, [r0]
    6548:	ldr	r0, [r0, #4]
    654c:	str	r0, [sp, #24]
    6550:	ldr	r0, [sp, #24]
    6554:	str	r0, [fp, #-28]	; 0xffffffe4
    6558:	ldr	r0, [fp, #-28]	; 0xffffffe4
    655c:	ldr	r0, [r0, #8]
    6560:	cmp	r0, #1
    6564:	beq	659c <coda_cursor_read_double_array+0x16c>
    6568:	ldr	r0, [fp, #-28]	; 0xffffffe4
    656c:	ldr	r0, [r0, #8]
    6570:	bl	0 <coda_type_get_class_name>
    6574:	mvn	lr, #104	; 0x68
    6578:	str	r0, [sp, #20]
    657c:	mov	r0, lr
    6580:	movw	r1, #0
    6584:	movt	r1, #0
    6588:	ldr	r2, [sp, #20]
    658c:	bl	0 <coda_set_error>
    6590:	mvn	r0, #0
    6594:	str	r0, [fp, #-4]
    6598:	b	6c70 <coda_cursor_read_double_array+0x840>
    659c:	ldr	r0, [fp, #-28]	; 0xffffffe4
    65a0:	sub	r1, fp, #20
    65a4:	sub	r2, fp, #24
    65a8:	bl	638c <get_array_element_unconverted_read_type>
    65ac:	cmp	r0, #0
    65b0:	beq	65c0 <coda_cursor_read_double_array+0x190>
    65b4:	mvn	r0, #0
    65b8:	str	r0, [fp, #-4]
    65bc:	b	6c70 <coda_cursor_read_double_array+0x840>
    65c0:	ldr	r0, [fp, #-20]	; 0xffffffec
    65c4:	cmp	r0, #9
    65c8:	str	r0, [sp, #16]
    65cc:	bhi	6b6c <coda_cursor_read_double_array+0x73c>
    65d0:	add	r0, pc, #8
    65d4:	ldr	r1, [sp, #16]
    65d8:	ldr	r0, [r0, r1, lsl #2]
    65dc:	mov	pc, r0
    65e0:	.word	0x00006608
    65e4:	.word	0x0000669c
    65e8:	.word	0x0000672c
    65ec:	.word	0x000067c0
    65f0:	.word	0x00006854
    65f4:	.word	0x000068e4
    65f8:	.word	0x00006974
    65fc:	.word	0x00006a14
    6600:	.word	0x00006ab4
    6604:	.word	0x00006b44
    6608:	ldr	r0, [fp, #-8]
    660c:	ldr	r1, [fp, #-12]
    6610:	ldr	r2, [fp, #-16]
    6614:	bl	33a8 <read_int8_array>
    6618:	cmp	r0, #0
    661c:	beq	662c <coda_cursor_read_double_array+0x1fc>
    6620:	mvn	r0, #0
    6624:	str	r0, [fp, #-4]
    6628:	b	6c70 <coda_cursor_read_double_array+0x840>
    662c:	ldr	r0, [fp, #-8]
    6630:	add	r1, sp, #32
    6634:	bl	0 <coda_cursor_get_num_elements>
    6638:	cmp	r0, #0
    663c:	beq	664c <coda_cursor_read_double_array+0x21c>
    6640:	mvn	r0, #0
    6644:	str	r0, [fp, #-4]
    6648:	b	6c70 <coda_cursor_read_double_array+0x840>
    664c:	ldr	r0, [sp, #32]
    6650:	sub	r0, r0, #1
    6654:	str	r0, [sp, #28]
    6658:	ldr	r0, [sp, #28]
    665c:	cmp	r0, #0
    6660:	blt	6698 <coda_cursor_read_double_array+0x268>
    6664:	ldr	r0, [fp, #-12]
    6668:	ldr	r1, [sp, #28]
    666c:	add	r2, r0, r1
    6670:	ldrsb	r2, [r2]
    6674:	vmov	s0, r2
    6678:	vcvt.f64.s32	d16, s0
    667c:	add	r0, r0, r1, lsl #3
    6680:	vstr	d16, [r0]
    6684:	ldr	r0, [sp, #28]
    6688:	mvn	r1, #0
    668c:	add	r0, r0, r1
    6690:	str	r0, [sp, #28]
    6694:	b	6658 <coda_cursor_read_double_array+0x228>
    6698:	b	6b9c <coda_cursor_read_double_array+0x76c>
    669c:	ldr	r0, [fp, #-8]
    66a0:	ldr	r1, [fp, #-12]
    66a4:	ldr	r2, [fp, #-16]
    66a8:	bl	3774 <read_uint8_array>
    66ac:	cmp	r0, #0
    66b0:	beq	66c0 <coda_cursor_read_double_array+0x290>
    66b4:	mvn	r0, #0
    66b8:	str	r0, [fp, #-4]
    66bc:	b	6c70 <coda_cursor_read_double_array+0x840>
    66c0:	ldr	r0, [fp, #-8]
    66c4:	add	r1, sp, #32
    66c8:	bl	0 <coda_cursor_get_num_elements>
    66cc:	cmp	r0, #0
    66d0:	beq	66e0 <coda_cursor_read_double_array+0x2b0>
    66d4:	mvn	r0, #0
    66d8:	str	r0, [fp, #-4]
    66dc:	b	6c70 <coda_cursor_read_double_array+0x840>
    66e0:	ldr	r0, [sp, #32]
    66e4:	sub	r0, r0, #1
    66e8:	str	r0, [sp, #28]
    66ec:	ldr	r0, [sp, #28]
    66f0:	cmp	r0, #0
    66f4:	blt	6728 <coda_cursor_read_double_array+0x2f8>
    66f8:	ldr	r0, [fp, #-12]
    66fc:	ldr	r1, [sp, #28]
    6700:	ldrb	r2, [r0, r1]
    6704:	vmov	s0, r2
    6708:	vcvt.f64.u32	d16, s0
    670c:	add	r0, r0, r1, lsl #3
    6710:	vstr	d16, [r0]
    6714:	ldr	r0, [sp, #28]
    6718:	mvn	r1, #0
    671c:	add	r0, r0, r1
    6720:	str	r0, [sp, #28]
    6724:	b	66ec <coda_cursor_read_double_array+0x2bc>
    6728:	b	6b9c <coda_cursor_read_double_array+0x76c>
    672c:	ldr	r0, [fp, #-8]
    6730:	ldr	r1, [fp, #-12]
    6734:	ldr	r2, [fp, #-16]
    6738:	bl	3c48 <read_int16_array>
    673c:	cmp	r0, #0
    6740:	beq	6750 <coda_cursor_read_double_array+0x320>
    6744:	mvn	r0, #0
    6748:	str	r0, [fp, #-4]
    674c:	b	6c70 <coda_cursor_read_double_array+0x840>
    6750:	ldr	r0, [fp, #-8]
    6754:	add	r1, sp, #32
    6758:	bl	0 <coda_cursor_get_num_elements>
    675c:	cmp	r0, #0
    6760:	beq	6770 <coda_cursor_read_double_array+0x340>
    6764:	mvn	r0, #0
    6768:	str	r0, [fp, #-4]
    676c:	b	6c70 <coda_cursor_read_double_array+0x840>
    6770:	ldr	r0, [sp, #32]
    6774:	sub	r0, r0, #1
    6778:	str	r0, [sp, #28]
    677c:	ldr	r0, [sp, #28]
    6780:	cmp	r0, #0
    6784:	blt	67bc <coda_cursor_read_double_array+0x38c>
    6788:	ldr	r0, [fp, #-12]
    678c:	ldr	r1, [sp, #28]
    6790:	add	r2, r0, r1, lsl #1
    6794:	ldrsh	r2, [r2]
    6798:	vmov	s0, r2
    679c:	vcvt.f64.s32	d16, s0
    67a0:	add	r0, r0, r1, lsl #3
    67a4:	vstr	d16, [r0]
    67a8:	ldr	r0, [sp, #28]
    67ac:	mvn	r1, #0
    67b0:	add	r0, r0, r1
    67b4:	str	r0, [sp, #28]
    67b8:	b	677c <coda_cursor_read_double_array+0x34c>
    67bc:	b	6b9c <coda_cursor_read_double_array+0x76c>
    67c0:	ldr	r0, [fp, #-8]
    67c4:	ldr	r1, [fp, #-12]
    67c8:	ldr	r2, [fp, #-16]
    67cc:	bl	40b0 <read_uint16_array>
    67d0:	cmp	r0, #0
    67d4:	beq	67e4 <coda_cursor_read_double_array+0x3b4>
    67d8:	mvn	r0, #0
    67dc:	str	r0, [fp, #-4]
    67e0:	b	6c70 <coda_cursor_read_double_array+0x840>
    67e4:	ldr	r0, [fp, #-8]
    67e8:	add	r1, sp, #32
    67ec:	bl	0 <coda_cursor_get_num_elements>
    67f0:	cmp	r0, #0
    67f4:	beq	6804 <coda_cursor_read_double_array+0x3d4>
    67f8:	mvn	r0, #0
    67fc:	str	r0, [fp, #-4]
    6800:	b	6c70 <coda_cursor_read_double_array+0x840>
    6804:	ldr	r0, [sp, #32]
    6808:	sub	r0, r0, #1
    680c:	str	r0, [sp, #28]
    6810:	ldr	r0, [sp, #28]
    6814:	cmp	r0, #0
    6818:	blt	6850 <coda_cursor_read_double_array+0x420>
    681c:	ldr	r0, [fp, #-12]
    6820:	ldr	r1, [sp, #28]
    6824:	add	r2, r0, r1, lsl #1
    6828:	ldrh	r2, [r2]
    682c:	vmov	s0, r2
    6830:	vcvt.f64.u32	d16, s0
    6834:	add	r0, r0, r1, lsl #3
    6838:	vstr	d16, [r0]
    683c:	ldr	r0, [sp, #28]
    6840:	mvn	r1, #0
    6844:	add	r0, r0, r1
    6848:	str	r0, [sp, #28]
    684c:	b	6810 <coda_cursor_read_double_array+0x3e0>
    6850:	b	6b9c <coda_cursor_read_double_array+0x76c>
    6854:	ldr	r0, [fp, #-8]
    6858:	ldr	r1, [fp, #-12]
    685c:	ldr	r2, [fp, #-16]
    6860:	bl	469c <read_int32_array>
    6864:	cmp	r0, #0
    6868:	beq	6878 <coda_cursor_read_double_array+0x448>
    686c:	mvn	r0, #0
    6870:	str	r0, [fp, #-4]
    6874:	b	6c70 <coda_cursor_read_double_array+0x840>
    6878:	ldr	r0, [fp, #-8]
    687c:	add	r1, sp, #32
    6880:	bl	0 <coda_cursor_get_num_elements>
    6884:	cmp	r0, #0
    6888:	beq	6898 <coda_cursor_read_double_array+0x468>
    688c:	mvn	r0, #0
    6890:	str	r0, [fp, #-4]
    6894:	b	6c70 <coda_cursor_read_double_array+0x840>
    6898:	ldr	r0, [sp, #32]
    689c:	sub	r0, r0, #1
    68a0:	str	r0, [sp, #28]
    68a4:	ldr	r0, [sp, #28]
    68a8:	cmp	r0, #0
    68ac:	blt	68e0 <coda_cursor_read_double_array+0x4b0>
    68b0:	ldr	r0, [fp, #-12]
    68b4:	ldr	r1, [sp, #28]
    68b8:	add	r2, r0, r1, lsl #2
    68bc:	vldr	s0, [r2]
    68c0:	vcvt.f64.s32	d16, s0
    68c4:	add	r0, r0, r1, lsl #3
    68c8:	vstr	d16, [r0]
    68cc:	ldr	r0, [sp, #28]
    68d0:	mvn	r1, #0
    68d4:	add	r0, r0, r1
    68d8:	str	r0, [sp, #28]
    68dc:	b	68a4 <coda_cursor_read_double_array+0x474>
    68e0:	b	6b9c <coda_cursor_read_double_array+0x76c>
    68e4:	ldr	r0, [fp, #-8]
    68e8:	ldr	r1, [fp, #-12]
    68ec:	ldr	r2, [fp, #-16]
    68f0:	bl	4ba0 <read_uint32_array>
    68f4:	cmp	r0, #0
    68f8:	beq	6908 <coda_cursor_read_double_array+0x4d8>
    68fc:	mvn	r0, #0
    6900:	str	r0, [fp, #-4]
    6904:	b	6c70 <coda_cursor_read_double_array+0x840>
    6908:	ldr	r0, [fp, #-8]
    690c:	add	r1, sp, #32
    6910:	bl	0 <coda_cursor_get_num_elements>
    6914:	cmp	r0, #0
    6918:	beq	6928 <coda_cursor_read_double_array+0x4f8>
    691c:	mvn	r0, #0
    6920:	str	r0, [fp, #-4]
    6924:	b	6c70 <coda_cursor_read_double_array+0x840>
    6928:	ldr	r0, [sp, #32]
    692c:	sub	r0, r0, #1
    6930:	str	r0, [sp, #28]
    6934:	ldr	r0, [sp, #28]
    6938:	cmp	r0, #0
    693c:	blt	6970 <coda_cursor_read_double_array+0x540>
    6940:	ldr	r0, [fp, #-12]
    6944:	ldr	r1, [sp, #28]
    6948:	add	r2, r0, r1, lsl #2
    694c:	vldr	s0, [r2]
    6950:	vcvt.f64.u32	d16, s0
    6954:	add	r0, r0, r1, lsl #3
    6958:	vstr	d16, [r0]
    695c:	ldr	r0, [sp, #28]
    6960:	mvn	r1, #0
    6964:	add	r0, r0, r1
    6968:	str	r0, [sp, #28]
    696c:	b	6934 <coda_cursor_read_double_array+0x504>
    6970:	b	6b9c <coda_cursor_read_double_array+0x76c>
    6974:	ldr	r0, [fp, #-8]
    6978:	ldr	r1, [fp, #-12]
    697c:	ldr	r2, [fp, #-16]
    6980:	bl	52d4 <read_int64_array>
    6984:	cmp	r0, #0
    6988:	beq	6998 <coda_cursor_read_double_array+0x568>
    698c:	mvn	r0, #0
    6990:	str	r0, [fp, #-4]
    6994:	b	6c70 <coda_cursor_read_double_array+0x840>
    6998:	ldr	r0, [fp, #-8]
    699c:	add	r1, sp, #32
    69a0:	bl	0 <coda_cursor_get_num_elements>
    69a4:	cmp	r0, #0
    69a8:	beq	69b8 <coda_cursor_read_double_array+0x588>
    69ac:	mvn	r0, #0
    69b0:	str	r0, [fp, #-4]
    69b4:	b	6c70 <coda_cursor_read_double_array+0x840>
    69b8:	ldr	r0, [sp, #32]
    69bc:	sub	r0, r0, #1
    69c0:	str	r0, [sp, #28]
    69c4:	ldr	r0, [sp, #28]
    69c8:	cmp	r0, #0
    69cc:	blt	6a10 <coda_cursor_read_double_array+0x5e0>
    69d0:	ldr	r0, [fp, #-12]
    69d4:	ldr	r1, [sp, #28]
    69d8:	ldr	r1, [r0, r1, lsl #3]!
    69dc:	ldr	r2, [r0, #4]
    69e0:	str	r0, [sp, #12]
    69e4:	mov	r0, r1
    69e8:	mov	r1, r2
    69ec:	bl	0 <__aeabi_l2d>
    69f0:	vmov	d16, r0, r1
    69f4:	ldr	r0, [sp, #12]
    69f8:	vstr	d16, [r0]
    69fc:	ldr	r0, [sp, #28]
    6a00:	mvn	r1, #0
    6a04:	add	r0, r0, r1
    6a08:	str	r0, [sp, #28]
    6a0c:	b	69c4 <coda_cursor_read_double_array+0x594>
    6a10:	b	6b9c <coda_cursor_read_double_array+0x76c>
    6a14:	ldr	r0, [fp, #-8]
    6a18:	ldr	r1, [fp, #-12]
    6a1c:	ldr	r2, [fp, #-16]
    6a20:	bl	5854 <read_uint64_array>
    6a24:	cmp	r0, #0
    6a28:	beq	6a38 <coda_cursor_read_double_array+0x608>
    6a2c:	mvn	r0, #0
    6a30:	str	r0, [fp, #-4]
    6a34:	b	6c70 <coda_cursor_read_double_array+0x840>
    6a38:	ldr	r0, [fp, #-8]
    6a3c:	add	r1, sp, #32
    6a40:	bl	0 <coda_cursor_get_num_elements>
    6a44:	cmp	r0, #0
    6a48:	beq	6a58 <coda_cursor_read_double_array+0x628>
    6a4c:	mvn	r0, #0
    6a50:	str	r0, [fp, #-4]
    6a54:	b	6c70 <coda_cursor_read_double_array+0x840>
    6a58:	ldr	r0, [sp, #32]
    6a5c:	sub	r0, r0, #1
    6a60:	str	r0, [sp, #28]
    6a64:	ldr	r0, [sp, #28]
    6a68:	cmp	r0, #0
    6a6c:	blt	6ab0 <coda_cursor_read_double_array+0x680>
    6a70:	ldr	r0, [fp, #-12]
    6a74:	ldr	r1, [sp, #28]
    6a78:	ldr	r1, [r0, r1, lsl #3]!
    6a7c:	ldr	r2, [r0, #4]
    6a80:	str	r0, [sp, #8]
    6a84:	mov	r0, r1
    6a88:	mov	r1, r2
    6a8c:	bl	0 <__aeabi_ul2d>
    6a90:	vmov	d16, r0, r1
    6a94:	ldr	r0, [sp, #8]
    6a98:	vstr	d16, [r0]
    6a9c:	ldr	r0, [sp, #28]
    6aa0:	mvn	r1, #0
    6aa4:	add	r0, r0, r1
    6aa8:	str	r0, [sp, #28]
    6aac:	b	6a64 <coda_cursor_read_double_array+0x634>
    6ab0:	b	6b9c <coda_cursor_read_double_array+0x76c>
    6ab4:	ldr	r0, [fp, #-8]
    6ab8:	ldr	r1, [fp, #-12]
    6abc:	ldr	r2, [fp, #-16]
    6ac0:	bl	6c7c <read_float_array>
    6ac4:	cmp	r0, #0
    6ac8:	beq	6ad8 <coda_cursor_read_double_array+0x6a8>
    6acc:	mvn	r0, #0
    6ad0:	str	r0, [fp, #-4]
    6ad4:	b	6c70 <coda_cursor_read_double_array+0x840>
    6ad8:	ldr	r0, [fp, #-8]
    6adc:	add	r1, sp, #32
    6ae0:	bl	0 <coda_cursor_get_num_elements>
    6ae4:	cmp	r0, #0
    6ae8:	beq	6af8 <coda_cursor_read_double_array+0x6c8>
    6aec:	mvn	r0, #0
    6af0:	str	r0, [fp, #-4]
    6af4:	b	6c70 <coda_cursor_read_double_array+0x840>
    6af8:	ldr	r0, [sp, #32]
    6afc:	sub	r0, r0, #1
    6b00:	str	r0, [sp, #28]
    6b04:	ldr	r0, [sp, #28]
    6b08:	cmp	r0, #0
    6b0c:	blt	6b40 <coda_cursor_read_double_array+0x710>
    6b10:	ldr	r0, [fp, #-12]
    6b14:	ldr	r1, [sp, #28]
    6b18:	add	r2, r0, r1, lsl #2
    6b1c:	vldr	s0, [r2]
    6b20:	vcvt.f64.f32	d16, s0
    6b24:	add	r0, r0, r1, lsl #3
    6b28:	vstr	d16, [r0]
    6b2c:	ldr	r0, [sp, #28]
    6b30:	mvn	r1, #0
    6b34:	add	r0, r0, r1
    6b38:	str	r0, [sp, #28]
    6b3c:	b	6b04 <coda_cursor_read_double_array+0x6d4>
    6b40:	b	6b9c <coda_cursor_read_double_array+0x76c>
    6b44:	ldr	r0, [fp, #-8]
    6b48:	ldr	r1, [fp, #-12]
    6b4c:	ldr	r2, [fp, #-16]
    6b50:	bl	6e44 <read_double_array>
    6b54:	cmp	r0, #0
    6b58:	beq	6b68 <coda_cursor_read_double_array+0x738>
    6b5c:	mvn	r0, #0
    6b60:	str	r0, [fp, #-4]
    6b64:	b	6c70 <coda_cursor_read_double_array+0x840>
    6b68:	b	6b9c <coda_cursor_read_double_array+0x76c>
    6b6c:	ldr	r0, [fp, #-20]	; 0xffffffec
    6b70:	bl	0 <coda_type_get_native_type_name>
    6b74:	mvn	lr, #104	; 0x68
    6b78:	str	r0, [sp, #4]
    6b7c:	mov	r0, lr
    6b80:	movw	r1, #0
    6b84:	movt	r1, #0
    6b88:	ldr	r2, [sp, #4]
    6b8c:	bl	0 <coda_set_error>
    6b90:	mvn	r0, #0
    6b94:	str	r0, [fp, #-4]
    6b98:	b	6c70 <coda_cursor_read_double_array+0x840>
    6b9c:	ldr	r0, [fp, #-24]	; 0xffffffe8
    6ba0:	movw	r1, #0
    6ba4:	cmp	r0, r1
    6ba8:	beq	6c68 <coda_cursor_read_double_array+0x838>
    6bac:	ldr	r0, [fp, #-8]
    6bb0:	add	r1, sp, #32
    6bb4:	bl	0 <coda_cursor_get_num_elements>
    6bb8:	cmp	r0, #0
    6bbc:	beq	6bcc <coda_cursor_read_double_array+0x79c>
    6bc0:	mvn	r0, #0
    6bc4:	str	r0, [fp, #-4]
    6bc8:	b	6c70 <coda_cursor_read_double_array+0x840>
    6bcc:	movw	r0, #0
    6bd0:	str	r0, [sp, #28]
    6bd4:	ldr	r0, [sp, #28]
    6bd8:	ldr	r1, [sp, #32]
    6bdc:	cmp	r0, r1
    6be0:	bge	6c64 <coda_cursor_read_double_array+0x834>
    6be4:	ldr	r0, [fp, #-12]
    6be8:	ldr	r1, [sp, #28]
    6bec:	add	r0, r0, r1, lsl #3
    6bf0:	vldr	d16, [r0]
    6bf4:	ldr	r0, [fp, #-24]	; 0xffffffe8
    6bf8:	vldr	d17, [r0, #24]
    6bfc:	vcmp.f64	d16, d17
    6c00:	vmrs	APSR_nzcv, fpscr
    6c04:	bne	6c20 <coda_cursor_read_double_array+0x7f0>
    6c08:	bl	0 <coda_NaN>
    6c0c:	ldr	lr, [fp, #-12]
    6c10:	ldr	r0, [sp, #28]
    6c14:	add	r0, lr, r0, lsl #3
    6c18:	vstr	d0, [r0]
    6c1c:	b	6c50 <coda_cursor_read_double_array+0x820>
    6c20:	ldr	r0, [fp, #-12]
    6c24:	ldr	r1, [sp, #28]
    6c28:	add	r0, r0, r1, lsl #3
    6c2c:	vldr	d16, [r0]
    6c30:	ldr	r1, [fp, #-24]	; 0xffffffe8
    6c34:	vldr	d17, [r1]
    6c38:	vldr	d18, [r1, #8]
    6c3c:	vldr	d19, [r1, #16]
    6c40:	vmul.f64	d16, d16, d17
    6c44:	vdiv.f64	d16, d16, d18
    6c48:	vadd.f64	d16, d16, d19
    6c4c:	vstr	d16, [r0]
    6c50:	b	6c54 <coda_cursor_read_double_array+0x824>
    6c54:	ldr	r0, [sp, #28]
    6c58:	add	r0, r0, #1
    6c5c:	str	r0, [sp, #28]
    6c60:	b	6bd4 <coda_cursor_read_double_array+0x7a4>
    6c64:	b	6c68 <coda_cursor_read_double_array+0x838>
    6c68:	movw	r0, #0
    6c6c:	str	r0, [fp, #-4]
    6c70:	ldr	r0, [fp, #-4]
    6c74:	mov	sp, fp
    6c78:	pop	{fp, pc}

00006c7c <read_float_array>:
    6c7c:	push	{fp, lr}
    6c80:	mov	fp, sp
    6c84:	sub	sp, sp, #24
    6c88:	str	r0, [fp, #-8]
    6c8c:	str	r1, [sp, #12]
    6c90:	str	r2, [sp, #8]
    6c94:	ldr	r0, [fp, #-8]
    6c98:	ldr	r1, [r0, #4]
    6c9c:	add	r0, r0, r1, lsl #4
    6ca0:	ldr	r0, [r0, #-8]
    6ca4:	ldr	r0, [r0]
    6ca8:	cmp	r0, #0
    6cac:	str	r0, [sp, #4]
    6cb0:	beq	6d28 <read_float_array+0xac>
    6cb4:	b	6cb8 <read_float_array+0x3c>
    6cb8:	ldr	r0, [sp, #4]
    6cbc:	cmp	r0, #1
    6cc0:	beq	6d40 <read_float_array+0xc4>
    6cc4:	b	6cc8 <read_float_array+0x4c>
    6cc8:	ldr	r0, [sp, #4]
    6ccc:	cmp	r0, #100	; 0x64
    6cd0:	beq	6d58 <read_float_array+0xdc>
    6cd4:	b	6cd8 <read_float_array+0x5c>
    6cd8:	ldr	r0, [sp, #4]
    6cdc:	cmp	r0, #101	; 0x65
    6ce0:	beq	6d70 <read_float_array+0xf4>
    6ce4:	b	6ce8 <read_float_array+0x6c>
    6ce8:	ldr	r0, [sp, #4]
    6cec:	cmp	r0, #102	; 0x66
    6cf0:	beq	6d88 <read_float_array+0x10c>
    6cf4:	b	6cf8 <read_float_array+0x7c>
    6cf8:	ldr	r0, [sp, #4]
    6cfc:	cmp	r0, #103	; 0x67
    6d00:	beq	6da0 <read_float_array+0x124>
    6d04:	b	6d08 <read_float_array+0x8c>
    6d08:	ldr	r0, [sp, #4]
    6d0c:	cmp	r0, #104	; 0x68
    6d10:	beq	6dc4 <read_float_array+0x148>
    6d14:	b	6d18 <read_float_array+0x9c>
    6d18:	ldr	r0, [sp, #4]
    6d1c:	cmp	r0, #105	; 0x69
    6d20:	beq	6de8 <read_float_array+0x16c>
    6d24:	b	6e0c <read_float_array+0x190>
    6d28:	ldr	r0, [fp, #-8]
    6d2c:	ldr	r1, [sp, #12]
    6d30:	ldr	r2, [sp, #8]
    6d34:	bl	0 <coda_ascii_cursor_read_float_array>
    6d38:	str	r0, [fp, #-4]
    6d3c:	b	6e38 <read_float_array+0x1bc>
    6d40:	ldr	r0, [fp, #-8]
    6d44:	ldr	r1, [sp, #12]
    6d48:	ldr	r2, [sp, #8]
    6d4c:	bl	0 <coda_bin_cursor_read_float_array>
    6d50:	str	r0, [fp, #-4]
    6d54:	b	6e38 <read_float_array+0x1bc>
    6d58:	ldr	r0, [fp, #-8]
    6d5c:	ldr	r1, [sp, #12]
    6d60:	ldr	r2, [sp, #8]
    6d64:	bl	0 <coda_mem_cursor_read_float_array>
    6d68:	str	r0, [fp, #-4]
    6d6c:	b	6e38 <read_float_array+0x1bc>
    6d70:	mvn	r0, #10
    6d74:	movw	r1, #0
    6d78:	bl	0 <coda_set_error>
    6d7c:	mvn	r0, #0
    6d80:	str	r0, [fp, #-4]
    6d84:	b	6e38 <read_float_array+0x1bc>
    6d88:	mvn	r0, #12
    6d8c:	movw	r1, #0
    6d90:	bl	0 <coda_set_error>
    6d94:	mvn	r0, #0
    6d98:	str	r0, [fp, #-4]
    6d9c:	b	6e38 <read_float_array+0x1bc>
    6da0:	ldr	r0, [fp, #-8]
    6da4:	ldr	r1, [sp, #12]
    6da8:	bl	0 <coda_cdf_cursor_read_float_array>
    6dac:	cmp	r0, #0
    6db0:	beq	6dc0 <read_float_array+0x144>
    6db4:	mvn	r0, #0
    6db8:	str	r0, [fp, #-4]
    6dbc:	b	6e38 <read_float_array+0x1bc>
    6dc0:	b	6e0c <read_float_array+0x190>
    6dc4:	ldr	r0, [fp, #-8]
    6dc8:	ldr	r1, [sp, #12]
    6dcc:	bl	0 <coda_netcdf_cursor_read_float_array>
    6dd0:	cmp	r0, #0
    6dd4:	beq	6de4 <read_float_array+0x168>
    6dd8:	mvn	r0, #0
    6ddc:	str	r0, [fp, #-4]
    6de0:	b	6e38 <read_float_array+0x1bc>
    6de4:	b	6e0c <read_float_array+0x190>
    6de8:	ldr	r0, [fp, #-8]
    6dec:	ldr	r1, [sp, #12]
    6df0:	bl	0 <coda_grib_cursor_read_float_array>
    6df4:	cmp	r0, #0
    6df8:	beq	6e08 <read_float_array+0x18c>
    6dfc:	mvn	r0, #0
    6e00:	str	r0, [fp, #-4]
    6e04:	b	6e38 <read_float_array+0x1bc>
    6e08:	b	6e0c <read_float_array+0x190>
    6e0c:	ldr	r0, [sp, #8]
    6e10:	cmp	r0, #0
    6e14:	beq	6e30 <read_float_array+0x1b4>
    6e18:	ldr	r0, [fp, #-8]
    6e1c:	ldr	r1, [sp, #12]
    6e20:	movw	r2, #4
    6e24:	bl	cb58 <transpose_array>
    6e28:	str	r0, [fp, #-4]
    6e2c:	b	6e38 <read_float_array+0x1bc>
    6e30:	movw	r0, #0
    6e34:	str	r0, [fp, #-4]
    6e38:	ldr	r0, [fp, #-4]
    6e3c:	mov	sp, fp
    6e40:	pop	{fp, pc}

00006e44 <read_double_array>:
    6e44:	push	{fp, lr}
    6e48:	mov	fp, sp
    6e4c:	sub	sp, sp, #40	; 0x28
    6e50:	str	r0, [fp, #-8]
    6e54:	str	r1, [fp, #-12]
    6e58:	str	r2, [fp, #-16]
    6e5c:	ldr	r0, [fp, #-8]
    6e60:	add	r1, r0, #8
    6e64:	ldr	r0, [r0, #4]
    6e68:	sub	r0, r0, #1
    6e6c:	add	r0, r1, r0, lsl #4
    6e70:	ldr	r0, [r0]
    6e74:	ldr	r0, [r0]
    6e78:	cmp	r0, #100	; 0x64
    6e7c:	bcs	6ea0 <read_double_array+0x5c>
    6e80:	ldr	r0, [fp, #-8]
    6e84:	add	r1, r0, #8
    6e88:	ldr	r0, [r0, #4]
    6e8c:	sub	r0, r0, #1
    6e90:	add	r0, r1, r0, lsl #4
    6e94:	ldr	r0, [r0]
    6e98:	str	r0, [sp, #16]
    6e9c:	b	6ec0 <read_double_array+0x7c>
    6ea0:	ldr	r0, [fp, #-8]
    6ea4:	add	r1, r0, #8
    6ea8:	ldr	r0, [r0, #4]
    6eac:	sub	r0, r0, #1
    6eb0:	add	r0, r1, r0, lsl #4
    6eb4:	ldr	r0, [r0]
    6eb8:	ldr	r0, [r0, #4]
    6ebc:	str	r0, [sp, #16]
    6ec0:	ldr	r0, [sp, #16]
    6ec4:	str	r0, [sp, #20]
    6ec8:	ldr	r0, [sp, #20]
    6ecc:	ldr	r0, [r0, #40]	; 0x28
    6ed0:	ldr	r0, [r0, #8]
    6ed4:	cmp	r0, #6
    6ed8:	bne	6f1c <read_double_array+0xd8>
    6edc:	movw	r0, #0
    6ee0:	movt	r0, #0
    6ee4:	ldr	r1, [fp, #-8]
    6ee8:	ldr	r2, [fp, #-12]
    6eec:	ldr	r3, [fp, #-16]
    6ef0:	str	r0, [sp, #12]
    6ef4:	mov	r0, r1
    6ef8:	ldr	r1, [sp, #12]
    6efc:	movw	ip, #8
    6f00:	str	r3, [sp, #8]
    6f04:	mov	r3, ip
    6f08:	ldr	ip, [sp, #8]
    6f0c:	str	ip, [sp]
    6f10:	bl	be48 <read_array>
    6f14:	str	r0, [fp, #-4]
    6f18:	b	70bc <read_double_array+0x278>
    6f1c:	ldr	r0, [fp, #-8]
    6f20:	ldr	r1, [r0, #4]
    6f24:	add	r0, r0, r1, lsl #4
    6f28:	ldr	r0, [r0, #-8]
    6f2c:	ldr	r0, [r0]
    6f30:	cmp	r0, #0
    6f34:	str	r0, [sp, #4]
    6f38:	beq	6fb0 <read_double_array+0x16c>
    6f3c:	b	6f40 <read_double_array+0xfc>
    6f40:	ldr	r0, [sp, #4]
    6f44:	cmp	r0, #1
    6f48:	beq	6fc8 <read_double_array+0x184>
    6f4c:	b	6f50 <read_double_array+0x10c>
    6f50:	ldr	r0, [sp, #4]
    6f54:	cmp	r0, #100	; 0x64
    6f58:	beq	6fe0 <read_double_array+0x19c>
    6f5c:	b	6f60 <read_double_array+0x11c>
    6f60:	ldr	r0, [sp, #4]
    6f64:	cmp	r0, #101	; 0x65
    6f68:	beq	6ff8 <read_double_array+0x1b4>
    6f6c:	b	6f70 <read_double_array+0x12c>
    6f70:	ldr	r0, [sp, #4]
    6f74:	cmp	r0, #102	; 0x66
    6f78:	beq	7010 <read_double_array+0x1cc>
    6f7c:	b	6f80 <read_double_array+0x13c>
    6f80:	ldr	r0, [sp, #4]
    6f84:	cmp	r0, #103	; 0x67
    6f88:	beq	7028 <read_double_array+0x1e4>
    6f8c:	b	6f90 <read_double_array+0x14c>
    6f90:	ldr	r0, [sp, #4]
    6f94:	cmp	r0, #104	; 0x68
    6f98:	beq	704c <read_double_array+0x208>
    6f9c:	b	6fa0 <read_double_array+0x15c>
    6fa0:	ldr	r0, [sp, #4]
    6fa4:	cmp	r0, #105	; 0x69
    6fa8:	beq	7070 <read_double_array+0x22c>
    6fac:	b	7090 <read_double_array+0x24c>
    6fb0:	ldr	r0, [fp, #-8]
    6fb4:	ldr	r1, [fp, #-12]
    6fb8:	ldr	r2, [fp, #-16]
    6fbc:	bl	0 <coda_ascii_cursor_read_double_array>
    6fc0:	str	r0, [fp, #-4]
    6fc4:	b	70bc <read_double_array+0x278>
    6fc8:	ldr	r0, [fp, #-8]
    6fcc:	ldr	r1, [fp, #-12]
    6fd0:	ldr	r2, [fp, #-16]
    6fd4:	bl	0 <coda_bin_cursor_read_double_array>
    6fd8:	str	r0, [fp, #-4]
    6fdc:	b	70bc <read_double_array+0x278>
    6fe0:	ldr	r0, [fp, #-8]
    6fe4:	ldr	r1, [fp, #-12]
    6fe8:	ldr	r2, [fp, #-16]
    6fec:	bl	0 <coda_mem_cursor_read_double_array>
    6ff0:	str	r0, [fp, #-4]
    6ff4:	b	70bc <read_double_array+0x278>
    6ff8:	mvn	r0, #10
    6ffc:	movw	r1, #0
    7000:	bl	0 <coda_set_error>
    7004:	mvn	r0, #0
    7008:	str	r0, [fp, #-4]
    700c:	b	70bc <read_double_array+0x278>
    7010:	mvn	r0, #12
    7014:	movw	r1, #0
    7018:	bl	0 <coda_set_error>
    701c:	mvn	r0, #0
    7020:	str	r0, [fp, #-4]
    7024:	b	70bc <read_double_array+0x278>
    7028:	ldr	r0, [fp, #-8]
    702c:	ldr	r1, [fp, #-12]
    7030:	bl	0 <coda_cdf_cursor_read_double_array>
    7034:	cmp	r0, #0
    7038:	beq	7048 <read_double_array+0x204>
    703c:	mvn	r0, #0
    7040:	str	r0, [fp, #-4]
    7044:	b	70bc <read_double_array+0x278>
    7048:	b	7090 <read_double_array+0x24c>
    704c:	ldr	r0, [fp, #-8]
    7050:	ldr	r1, [fp, #-12]
    7054:	bl	0 <coda_netcdf_cursor_read_double_array>
    7058:	cmp	r0, #0
    705c:	beq	706c <read_double_array+0x228>
    7060:	mvn	r0, #0
    7064:	str	r0, [fp, #-4]
    7068:	b	70bc <read_double_array+0x278>
    706c:	b	7090 <read_double_array+0x24c>
    7070:	movw	r0, #0
    7074:	movt	r0, #0
    7078:	movw	r1, #0
    707c:	movt	r1, #0
    7080:	movw	r2, #1301	; 0x515
    7084:	movw	r3, #0
    7088:	movt	r3, #0
    708c:	bl	0 <__assert_fail>
    7090:	ldr	r0, [fp, #-16]
    7094:	cmp	r0, #0
    7098:	beq	70b4 <read_double_array+0x270>
    709c:	ldr	r0, [fp, #-8]
    70a0:	ldr	r1, [fp, #-12]
    70a4:	movw	r2, #8
    70a8:	bl	cb58 <transpose_array>
    70ac:	str	r0, [fp, #-4]
    70b0:	b	70bc <read_double_array+0x278>
    70b4:	movw	r0, #0
    70b8:	str	r0, [fp, #-4]
    70bc:	ldr	r0, [fp, #-4]
    70c0:	mov	sp, fp
    70c4:	pop	{fp, pc}

000070c8 <coda_cursor_read_char_array>:
    70c8:	push	{fp, lr}
    70cc:	mov	fp, sp
    70d0:	sub	sp, sp, #40	; 0x28
    70d4:	str	r0, [fp, #-8]
    70d8:	str	r1, [fp, #-12]
    70dc:	str	r2, [fp, #-16]
    70e0:	ldr	r0, [fp, #-8]
    70e4:	movw	r1, #0
    70e8:	cmp	r0, r1
    70ec:	beq	7124 <coda_cursor_read_char_array+0x5c>
    70f0:	ldr	r0, [fp, #-8]
    70f4:	ldr	r0, [r0, #4]
    70f8:	cmp	r0, #0
    70fc:	ble	7124 <coda_cursor_read_char_array+0x5c>
    7100:	ldr	r0, [fp, #-8]
    7104:	add	r1, r0, #8
    7108:	ldr	r0, [r0, #4]
    710c:	sub	r0, r0, #1
    7110:	add	r0, r1, r0, lsl #4
    7114:	ldr	r0, [r0]
    7118:	movw	r1, #0
    711c:	cmp	r0, r1
    7120:	bne	714c <coda_cursor_read_char_array+0x84>
    7124:	mvn	r0, #99	; 0x63
    7128:	movw	r1, #0
    712c:	movt	r1, #0
    7130:	movw	r2, #0
    7134:	movt	r2, #0
    7138:	movw	r3, #4136	; 0x1028
    713c:	bl	0 <coda_set_error>
    7140:	mvn	r0, #0
    7144:	str	r0, [fp, #-4]
    7148:	b	72c4 <coda_cursor_read_char_array+0x1fc>
    714c:	ldr	r0, [fp, #-12]
    7150:	movw	r1, #0
    7154:	cmp	r0, r1
    7158:	bne	7184 <coda_cursor_read_char_array+0xbc>
    715c:	mvn	r0, #99	; 0x63
    7160:	movw	r1, #0
    7164:	movt	r1, #0
    7168:	movw	r2, #0
    716c:	movt	r2, #0
    7170:	movw	r3, #4141	; 0x102d
    7174:	bl	0 <coda_set_error>
    7178:	mvn	r0, #0
    717c:	str	r0, [fp, #-4]
    7180:	b	72c4 <coda_cursor_read_char_array+0x1fc>
    7184:	ldr	r0, [fp, #-8]
    7188:	add	r1, r0, #8
    718c:	ldr	r0, [r0, #4]
    7190:	sub	r0, r0, #1
    7194:	add	r0, r1, r0, lsl #4
    7198:	ldr	r0, [r0]
    719c:	ldr	r0, [r0]
    71a0:	cmp	r0, #100	; 0x64
    71a4:	bcs	71c8 <coda_cursor_read_char_array+0x100>
    71a8:	ldr	r0, [fp, #-8]
    71ac:	add	r1, r0, #8
    71b0:	ldr	r0, [r0, #4]
    71b4:	sub	r0, r0, #1
    71b8:	add	r0, r1, r0, lsl #4
    71bc:	ldr	r0, [r0]
    71c0:	str	r0, [sp, #12]
    71c4:	b	71e8 <coda_cursor_read_char_array+0x120>
    71c8:	ldr	r0, [fp, #-8]
    71cc:	add	r1, r0, #8
    71d0:	ldr	r0, [r0, #4]
    71d4:	sub	r0, r0, #1
    71d8:	add	r0, r1, r0, lsl #4
    71dc:	ldr	r0, [r0]
    71e0:	ldr	r0, [r0, #4]
    71e4:	str	r0, [sp, #12]
    71e8:	ldr	r0, [sp, #12]
    71ec:	str	r0, [sp, #16]
    71f0:	ldr	r0, [sp, #16]
    71f4:	ldr	r0, [r0, #8]
    71f8:	cmp	r0, #1
    71fc:	beq	7234 <coda_cursor_read_char_array+0x16c>
    7200:	ldr	r0, [sp, #16]
    7204:	ldr	r0, [r0, #8]
    7208:	bl	0 <coda_type_get_class_name>
    720c:	mvn	lr, #104	; 0x68
    7210:	str	r0, [sp, #8]
    7214:	mov	r0, lr
    7218:	movw	r1, #0
    721c:	movt	r1, #0
    7220:	ldr	r2, [sp, #8]
    7224:	bl	0 <coda_set_error>
    7228:	mvn	r0, #0
    722c:	str	r0, [fp, #-4]
    7230:	b	72c4 <coda_cursor_read_char_array+0x1fc>
    7234:	ldr	r0, [sp, #16]
    7238:	add	r1, sp, #20
    723c:	bl	3304 <get_array_element_read_type>
    7240:	cmp	r0, #0
    7244:	beq	7254 <coda_cursor_read_char_array+0x18c>
    7248:	mvn	r0, #0
    724c:	str	r0, [fp, #-4]
    7250:	b	72c4 <coda_cursor_read_char_array+0x1fc>
    7254:	ldr	r0, [sp, #20]
    7258:	cmp	r0, #10
    725c:	bne	728c <coda_cursor_read_char_array+0x1c4>
    7260:	b	7264 <coda_cursor_read_char_array+0x19c>
    7264:	ldr	r0, [fp, #-8]
    7268:	ldr	r1, [fp, #-12]
    726c:	ldr	r2, [fp, #-16]
    7270:	bl	72d0 <read_char_array>
    7274:	cmp	r0, #0
    7278:	beq	7288 <coda_cursor_read_char_array+0x1c0>
    727c:	mvn	r0, #0
    7280:	str	r0, [fp, #-4]
    7284:	b	72c4 <coda_cursor_read_char_array+0x1fc>
    7288:	b	72bc <coda_cursor_read_char_array+0x1f4>
    728c:	ldr	r0, [sp, #20]
    7290:	bl	0 <coda_type_get_native_type_name>
    7294:	mvn	lr, #104	; 0x68
    7298:	str	r0, [sp, #4]
    729c:	mov	r0, lr
    72a0:	movw	r1, #0
    72a4:	movt	r1, #0
    72a8:	ldr	r2, [sp, #4]
    72ac:	bl	0 <coda_set_error>
    72b0:	mvn	r0, #0
    72b4:	str	r0, [fp, #-4]
    72b8:	b	72c4 <coda_cursor_read_char_array+0x1fc>
    72bc:	movw	r0, #0
    72c0:	str	r0, [fp, #-4]
    72c4:	ldr	r0, [fp, #-4]
    72c8:	mov	sp, fp
    72cc:	pop	{fp, pc}

000072d0 <read_char_array>:
    72d0:	push	{fp, lr}
    72d4:	mov	fp, sp
    72d8:	sub	sp, sp, #24
    72dc:	str	r0, [fp, #-8]
    72e0:	str	r1, [sp, #12]
    72e4:	str	r2, [sp, #8]
    72e8:	ldr	r0, [fp, #-8]
    72ec:	ldr	r1, [r0, #4]
    72f0:	add	r0, r0, r1, lsl #4
    72f4:	ldr	r0, [r0, #-8]
    72f8:	ldr	r0, [r0]
    72fc:	cmp	r0, #0
    7300:	str	r0, [sp, #4]
    7304:	beq	737c <read_char_array+0xac>
    7308:	b	730c <read_char_array+0x3c>
    730c:	ldr	r0, [sp, #4]
    7310:	cmp	r0, #1
    7314:	beq	7394 <read_char_array+0xc4>
    7318:	b	731c <read_char_array+0x4c>
    731c:	ldr	r0, [sp, #4]
    7320:	cmp	r0, #100	; 0x64
    7324:	beq	73ac <read_char_array+0xdc>
    7328:	b	732c <read_char_array+0x5c>
    732c:	ldr	r0, [sp, #4]
    7330:	cmp	r0, #101	; 0x65
    7334:	beq	73c4 <read_char_array+0xf4>
    7338:	b	733c <read_char_array+0x6c>
    733c:	ldr	r0, [sp, #4]
    7340:	cmp	r0, #102	; 0x66
    7344:	beq	7424 <read_char_array+0x154>
    7348:	b	734c <read_char_array+0x7c>
    734c:	ldr	r0, [sp, #4]
    7350:	cmp	r0, #103	; 0x67
    7354:	beq	73dc <read_char_array+0x10c>
    7358:	b	735c <read_char_array+0x8c>
    735c:	ldr	r0, [sp, #4]
    7360:	cmp	r0, #104	; 0x68
    7364:	beq	7400 <read_char_array+0x130>
    7368:	b	736c <read_char_array+0x9c>
    736c:	ldr	r0, [sp, #4]
    7370:	cmp	r0, #105	; 0x69
    7374:	beq	7424 <read_char_array+0x154>
    7378:	b	7444 <read_char_array+0x174>
    737c:	ldr	r0, [fp, #-8]
    7380:	ldr	r1, [sp, #12]
    7384:	ldr	r2, [sp, #8]
    7388:	bl	0 <coda_ascii_cursor_read_char_array>
    738c:	str	r0, [fp, #-4]
    7390:	b	7470 <read_char_array+0x1a0>
    7394:	ldr	r0, [fp, #-8]
    7398:	ldr	r1, [sp, #12]
    739c:	ldr	r2, [sp, #8]
    73a0:	bl	0 <coda_bin_cursor_read_char_array>
    73a4:	str	r0, [fp, #-4]
    73a8:	b	7470 <read_char_array+0x1a0>
    73ac:	ldr	r0, [fp, #-8]
    73b0:	ldr	r1, [sp, #12]
    73b4:	ldr	r2, [sp, #8]
    73b8:	bl	0 <coda_mem_cursor_read_char_array>
    73bc:	str	r0, [fp, #-4]
    73c0:	b	7470 <read_char_array+0x1a0>
    73c4:	mvn	r0, #10
    73c8:	movw	r1, #0
    73cc:	bl	0 <coda_set_error>
    73d0:	mvn	r0, #0
    73d4:	str	r0, [fp, #-4]
    73d8:	b	7470 <read_char_array+0x1a0>
    73dc:	ldr	r0, [fp, #-8]
    73e0:	ldr	r1, [sp, #12]
    73e4:	bl	0 <coda_cdf_cursor_read_char_array>
    73e8:	cmp	r0, #0
    73ec:	beq	73fc <read_char_array+0x12c>
    73f0:	mvn	r0, #0
    73f4:	str	r0, [fp, #-4]
    73f8:	b	7470 <read_char_array+0x1a0>
    73fc:	b	7444 <read_char_array+0x174>
    7400:	ldr	r0, [fp, #-8]
    7404:	ldr	r1, [sp, #12]
    7408:	bl	0 <coda_netcdf_cursor_read_char_array>
    740c:	cmp	r0, #0
    7410:	beq	7420 <read_char_array+0x150>
    7414:	mvn	r0, #0
    7418:	str	r0, [fp, #-4]
    741c:	b	7470 <read_char_array+0x1a0>
    7420:	b	7444 <read_char_array+0x174>
    7424:	movw	r0, #0
    7428:	movt	r0, #0
    742c:	movw	r1, #0
    7430:	movt	r1, #0
    7434:	movw	r2, #1348	; 0x544
    7438:	movw	r3, #0
    743c:	movt	r3, #0
    7440:	bl	0 <__assert_fail>
    7444:	ldr	r0, [sp, #8]
    7448:	cmp	r0, #0
    744c:	beq	7468 <read_char_array+0x198>
    7450:	ldr	r0, [fp, #-8]
    7454:	ldr	r1, [sp, #12]
    7458:	movw	r2, #1
    745c:	bl	cb58 <transpose_array>
    7460:	str	r0, [fp, #-4]
    7464:	b	7470 <read_char_array+0x1a0>
    7468:	movw	r0, #0
    746c:	str	r0, [fp, #-4]
    7470:	ldr	r0, [fp, #-4]
    7474:	mov	sp, fp
    7478:	pop	{fp, pc}

0000747c <coda_cursor_read_int8_partial_array>:
    747c:	push	{fp, lr}
    7480:	mov	fp, sp
    7484:	sub	sp, sp, #56	; 0x38
    7488:	str	r0, [fp, #-8]
    748c:	str	r1, [fp, #-12]
    7490:	str	r2, [fp, #-16]
    7494:	str	r3, [fp, #-20]	; 0xffffffec
    7498:	ldr	r0, [fp, #-8]
    749c:	movw	r1, #0
    74a0:	cmp	r0, r1
    74a4:	beq	74dc <coda_cursor_read_int8_partial_array+0x60>
    74a8:	ldr	r0, [fp, #-8]
    74ac:	ldr	r0, [r0, #4]
    74b0:	cmp	r0, #0
    74b4:	ble	74dc <coda_cursor_read_int8_partial_array+0x60>
    74b8:	ldr	r0, [fp, #-8]
    74bc:	add	r1, r0, #8
    74c0:	ldr	r0, [r0, #4]
    74c4:	sub	r0, r0, #1
    74c8:	add	r0, r1, r0, lsl #4
    74cc:	ldr	r0, [r0]
    74d0:	movw	r1, #0
    74d4:	cmp	r0, r1
    74d8:	bne	7504 <coda_cursor_read_int8_partial_array+0x88>
    74dc:	mvn	r0, #99	; 0x63
    74e0:	movw	r1, #0
    74e4:	movt	r1, #0
    74e8:	movw	r2, #0
    74ec:	movt	r2, #0
    74f0:	movw	r3, #4199	; 0x1067
    74f4:	bl	0 <coda_set_error>
    74f8:	mvn	r0, #0
    74fc:	str	r0, [fp, #-4]
    7500:	b	7754 <coda_cursor_read_int8_partial_array+0x2d8>
    7504:	ldr	r0, [fp, #-20]	; 0xffffffec
    7508:	movw	r1, #0
    750c:	cmp	r0, r1
    7510:	bne	753c <coda_cursor_read_int8_partial_array+0xc0>
    7514:	mvn	r0, #99	; 0x63
    7518:	movw	r1, #0
    751c:	movt	r1, #0
    7520:	movw	r2, #0
    7524:	movt	r2, #0
    7528:	movw	r3, #4204	; 0x106c
    752c:	bl	0 <coda_set_error>
    7530:	mvn	r0, #0
    7534:	str	r0, [fp, #-4]
    7538:	b	7754 <coda_cursor_read_int8_partial_array+0x2d8>
    753c:	ldr	r0, [fp, #-8]
    7540:	add	r1, r0, #8
    7544:	ldr	r0, [r0, #4]
    7548:	sub	r0, r0, #1
    754c:	add	r0, r1, r0, lsl #4
    7550:	ldr	r0, [r0]
    7554:	ldr	r0, [r0]
    7558:	cmp	r0, #100	; 0x64
    755c:	bcs	7580 <coda_cursor_read_int8_partial_array+0x104>
    7560:	ldr	r0, [fp, #-8]
    7564:	add	r1, r0, #8
    7568:	ldr	r0, [r0, #4]
    756c:	sub	r0, r0, #1
    7570:	add	r0, r1, r0, lsl #4
    7574:	ldr	r0, [r0]
    7578:	str	r0, [sp, #20]
    757c:	b	75a0 <coda_cursor_read_int8_partial_array+0x124>
    7580:	ldr	r0, [fp, #-8]
    7584:	add	r1, r0, #8
    7588:	ldr	r0, [r0, #4]
    758c:	sub	r0, r0, #1
    7590:	add	r0, r1, r0, lsl #4
    7594:	ldr	r0, [r0]
    7598:	ldr	r0, [r0, #4]
    759c:	str	r0, [sp, #20]
    75a0:	ldr	r0, [sp, #20]
    75a4:	str	r0, [sp, #28]
    75a8:	ldr	r0, [sp, #28]
    75ac:	ldr	r0, [r0, #8]
    75b0:	cmp	r0, #1
    75b4:	beq	75ec <coda_cursor_read_int8_partial_array+0x170>
    75b8:	ldr	r0, [sp, #28]
    75bc:	ldr	r0, [r0, #8]
    75c0:	bl	0 <coda_type_get_class_name>
    75c4:	mvn	lr, #104	; 0x68
    75c8:	str	r0, [sp, #16]
    75cc:	mov	r0, lr
    75d0:	movw	r1, #0
    75d4:	movt	r1, #0
    75d8:	ldr	r2, [sp, #16]
    75dc:	bl	0 <coda_set_error>
    75e0:	mvn	r0, #0
    75e4:	str	r0, [fp, #-4]
    75e8:	b	7754 <coda_cursor_read_int8_partial_array+0x2d8>
    75ec:	ldr	r0, [pc, #364]	; 7760 <coda_cursor_read_int8_partial_array+0x2e4>
    75f0:	ldr	r0, [pc, r0]
    75f4:	str	r0, [sp, #12]
    75f8:	bl	0 <__aeabi_read_tp>
    75fc:	ldr	ip, [sp, #12]
    7600:	ldr	r0, [r0, ip]
    7604:	cmp	r0, #0
    7608:	beq	76c0 <coda_cursor_read_int8_partial_array+0x244>
    760c:	ldr	r0, [fp, #-8]
    7610:	add	r1, sp, #24
    7614:	bl	0 <coda_cursor_get_num_elements>
    7618:	cmp	r0, #0
    761c:	beq	762c <coda_cursor_read_int8_partial_array+0x1b0>
    7620:	mvn	r0, #0
    7624:	str	r0, [fp, #-4]
    7628:	b	7754 <coda_cursor_read_int8_partial_array+0x2d8>
    762c:	ldr	r0, [fp, #-12]
    7630:	cmp	r0, #0
    7634:	blt	7648 <coda_cursor_read_int8_partial_array+0x1cc>
    7638:	ldr	r0, [fp, #-12]
    763c:	ldr	r1, [sp, #24]
    7640:	cmp	r0, r1
    7644:	blt	766c <coda_cursor_read_int8_partial_array+0x1f0>
    7648:	ldr	r2, [fp, #-12]
    764c:	ldr	r3, [sp, #24]
    7650:	mvn	r0, #106	; 0x6a
    7654:	movw	r1, #0
    7658:	movt	r1, #0
    765c:	bl	0 <coda_set_error>
    7660:	mvn	r0, #0
    7664:	str	r0, [fp, #-4]
    7668:	b	7754 <coda_cursor_read_int8_partial_array+0x2d8>
    766c:	ldr	r0, [fp, #-12]
    7670:	ldr	r1, [fp, #-16]
    7674:	add	r0, r0, r1
    7678:	ldr	r1, [sp, #24]
    767c:	cmp	r0, r1
    7680:	ble	76bc <coda_cursor_read_int8_partial_array+0x240>
    7684:	ldr	r2, [fp, #-12]
    7688:	ldr	r3, [fp, #-16]
    768c:	ldr	r0, [sp, #24]
    7690:	mvn	r1, #106	; 0x6a
    7694:	str	r0, [sp, #8]
    7698:	mov	r0, r1
    769c:	movw	r1, #0
    76a0:	movt	r1, #0
    76a4:	ldr	ip, [sp, #8]
    76a8:	str	ip, [sp]
    76ac:	bl	0 <coda_set_error>
    76b0:	mvn	r0, #0
    76b4:	str	r0, [fp, #-4]
    76b8:	b	7754 <coda_cursor_read_int8_partial_array+0x2d8>
    76bc:	b	76c0 <coda_cursor_read_int8_partial_array+0x244>
    76c0:	ldr	r0, [sp, #28]
    76c4:	sub	r1, fp, #24
    76c8:	bl	3304 <get_array_element_read_type>
    76cc:	cmp	r0, #0
    76d0:	beq	76e0 <coda_cursor_read_int8_partial_array+0x264>
    76d4:	mvn	r0, #0
    76d8:	str	r0, [fp, #-4]
    76dc:	b	7754 <coda_cursor_read_int8_partial_array+0x2d8>
    76e0:	ldr	r0, [fp, #-24]	; 0xffffffe8
    76e4:	cmp	r0, #0
    76e8:	bne	771c <coda_cursor_read_int8_partial_array+0x2a0>
    76ec:	b	76f0 <coda_cursor_read_int8_partial_array+0x274>
    76f0:	ldr	r0, [fp, #-8]
    76f4:	ldr	r1, [fp, #-12]
    76f8:	ldr	r2, [fp, #-16]
    76fc:	ldr	r3, [fp, #-20]	; 0xffffffec
    7700:	bl	7764 <read_int8_partial_array>
    7704:	cmp	r0, #0
    7708:	beq	7718 <coda_cursor_read_int8_partial_array+0x29c>
    770c:	mvn	r0, #0
    7710:	str	r0, [fp, #-4]
    7714:	b	7754 <coda_cursor_read_int8_partial_array+0x2d8>
    7718:	b	774c <coda_cursor_read_int8_partial_array+0x2d0>
    771c:	ldr	r0, [fp, #-24]	; 0xffffffe8
    7720:	bl	0 <coda_type_get_native_type_name>
    7724:	mvn	lr, #104	; 0x68
    7728:	str	r0, [sp, #4]
    772c:	mov	r0, lr
    7730:	movw	r1, #0
    7734:	movt	r1, #0
    7738:	ldr	r2, [sp, #4]
    773c:	bl	0 <coda_set_error>
    7740:	mvn	r0, #0
    7744:	str	r0, [fp, #-4]
    7748:	b	7754 <coda_cursor_read_int8_partial_array+0x2d8>
    774c:	movw	r0, #0
    7750:	str	r0, [fp, #-4]
    7754:	ldr	r0, [fp, #-4]
    7758:	mov	sp, fp
    775c:	pop	{fp, pc}
    7760:	.word	0x00000168

00007764 <read_int8_partial_array>:
    7764:	push	{fp, lr}
    7768:	mov	fp, sp
    776c:	sub	sp, sp, #24
    7770:	str	r0, [fp, #-8]
    7774:	str	r1, [sp, #12]
    7778:	str	r2, [sp, #8]
    777c:	str	r3, [sp, #4]
    7780:	ldr	r0, [fp, #-8]
    7784:	ldr	r1, [r0, #4]
    7788:	add	r0, r0, r1, lsl #4
    778c:	ldr	r0, [r0, #-8]
    7790:	ldr	r0, [r0]
    7794:	cmp	r0, #0
    7798:	str	r0, [sp]
    779c:	beq	7814 <read_int8_partial_array+0xb0>
    77a0:	b	77a4 <read_int8_partial_array+0x40>
    77a4:	ldr	r0, [sp]
    77a8:	cmp	r0, #1
    77ac:	beq	7830 <read_int8_partial_array+0xcc>
    77b0:	b	77b4 <read_int8_partial_array+0x50>
    77b4:	ldr	r0, [sp]
    77b8:	cmp	r0, #100	; 0x64
    77bc:	beq	784c <read_int8_partial_array+0xe8>
    77c0:	b	77c4 <read_int8_partial_array+0x60>
    77c4:	ldr	r0, [sp]
    77c8:	cmp	r0, #101	; 0x65
    77cc:	beq	7868 <read_int8_partial_array+0x104>
    77d0:	b	77d4 <read_int8_partial_array+0x70>
    77d4:	ldr	r0, [sp]
    77d8:	cmp	r0, #102	; 0x66
    77dc:	beq	7880 <read_int8_partial_array+0x11c>
    77e0:	b	77e4 <read_int8_partial_array+0x80>
    77e4:	ldr	r0, [sp]
    77e8:	cmp	r0, #103	; 0x67
    77ec:	beq	7898 <read_int8_partial_array+0x134>
    77f0:	b	77f4 <read_int8_partial_array+0x90>
    77f4:	ldr	r0, [sp]
    77f8:	cmp	r0, #104	; 0x68
    77fc:	beq	78b4 <read_int8_partial_array+0x150>
    7800:	b	7804 <read_int8_partial_array+0xa0>
    7804:	ldr	r0, [sp]
    7808:	cmp	r0, #105	; 0x69
    780c:	beq	78d0 <read_int8_partial_array+0x16c>
    7810:	b	78d4 <read_int8_partial_array+0x170>
    7814:	ldr	r0, [fp, #-8]
    7818:	ldr	r1, [sp, #12]
    781c:	ldr	r2, [sp, #8]
    7820:	ldr	r3, [sp, #4]
    7824:	bl	0 <coda_ascii_cursor_read_int8_partial_array>
    7828:	str	r0, [fp, #-4]
    782c:	b	78f4 <read_int8_partial_array+0x190>
    7830:	ldr	r0, [fp, #-8]
    7834:	ldr	r1, [sp, #12]
    7838:	ldr	r2, [sp, #8]
    783c:	ldr	r3, [sp, #4]
    7840:	bl	0 <coda_bin_cursor_read_int8_partial_array>
    7844:	str	r0, [fp, #-4]
    7848:	b	78f4 <read_int8_partial_array+0x190>
    784c:	ldr	r0, [fp, #-8]
    7850:	ldr	r1, [sp, #12]
    7854:	ldr	r2, [sp, #8]
    7858:	ldr	r3, [sp, #4]
    785c:	bl	0 <coda_mem_cursor_read_int8_partial_array>
    7860:	str	r0, [fp, #-4]
    7864:	b	78f4 <read_int8_partial_array+0x190>
    7868:	mvn	r0, #10
    786c:	movw	r1, #0
    7870:	bl	0 <coda_set_error>
    7874:	mvn	r0, #0
    7878:	str	r0, [fp, #-4]
    787c:	b	78f4 <read_int8_partial_array+0x190>
    7880:	mvn	r0, #12
    7884:	movw	r1, #0
    7888:	bl	0 <coda_set_error>
    788c:	mvn	r0, #0
    7890:	str	r0, [fp, #-4]
    7894:	b	78f4 <read_int8_partial_array+0x190>
    7898:	ldr	r0, [fp, #-8]
    789c:	ldr	r1, [sp, #12]
    78a0:	ldr	r2, [sp, #8]
    78a4:	ldr	r3, [sp, #4]
    78a8:	bl	0 <coda_cdf_cursor_read_int8_partial_array>
    78ac:	str	r0, [fp, #-4]
    78b0:	b	78f4 <read_int8_partial_array+0x190>
    78b4:	ldr	r0, [fp, #-8]
    78b8:	ldr	r1, [sp, #12]
    78bc:	ldr	r2, [sp, #8]
    78c0:	ldr	r3, [sp, #4]
    78c4:	bl	0 <coda_netcdf_cursor_read_int8_partial_array>
    78c8:	str	r0, [fp, #-4]
    78cc:	b	78f4 <read_int8_partial_array+0x190>
    78d0:	b	78d4 <read_int8_partial_array+0x170>
    78d4:	movw	r0, #0
    78d8:	movt	r0, #0
    78dc:	movw	r1, #0
    78e0:	movt	r1, #0
    78e4:	movw	r2, #1392	; 0x570
    78e8:	movw	r3, #0
    78ec:	movt	r3, #0
    78f0:	bl	0 <__assert_fail>
    78f4:	ldr	r0, [fp, #-4]
    78f8:	mov	sp, fp
    78fc:	pop	{fp, pc}

00007900 <coda_cursor_read_uint8_partial_array>:
    7900:	push	{fp, lr}
    7904:	mov	fp, sp
    7908:	sub	sp, sp, #56	; 0x38
    790c:	str	r0, [fp, #-8]
    7910:	str	r1, [fp, #-12]
    7914:	str	r2, [fp, #-16]
    7918:	str	r3, [fp, #-20]	; 0xffffffec
    791c:	ldr	r0, [fp, #-8]
    7920:	movw	r1, #0
    7924:	cmp	r0, r1
    7928:	beq	7960 <coda_cursor_read_uint8_partial_array+0x60>
    792c:	ldr	r0, [fp, #-8]
    7930:	ldr	r0, [r0, #4]
    7934:	cmp	r0, #0
    7938:	ble	7960 <coda_cursor_read_uint8_partial_array+0x60>
    793c:	ldr	r0, [fp, #-8]
    7940:	add	r1, r0, #8
    7944:	ldr	r0, [r0, #4]
    7948:	sub	r0, r0, #1
    794c:	add	r0, r1, r0, lsl #4
    7950:	ldr	r0, [r0]
    7954:	movw	r1, #0
    7958:	cmp	r0, r1
    795c:	bne	7988 <coda_cursor_read_uint8_partial_array+0x88>
    7960:	mvn	r0, #99	; 0x63
    7964:	movw	r1, #0
    7968:	movt	r1, #0
    796c:	movw	r2, #0
    7970:	movt	r2, #0
    7974:	movw	r3, #4285	; 0x10bd
    7978:	bl	0 <coda_set_error>
    797c:	mvn	r0, #0
    7980:	str	r0, [fp, #-4]
    7984:	b	7bd8 <coda_cursor_read_uint8_partial_array+0x2d8>
    7988:	ldr	r0, [fp, #-20]	; 0xffffffec
    798c:	movw	r1, #0
    7990:	cmp	r0, r1
    7994:	bne	79c0 <coda_cursor_read_uint8_partial_array+0xc0>
    7998:	mvn	r0, #99	; 0x63
    799c:	movw	r1, #0
    79a0:	movt	r1, #0
    79a4:	movw	r2, #0
    79a8:	movt	r2, #0
    79ac:	movw	r3, #4290	; 0x10c2
    79b0:	bl	0 <coda_set_error>
    79b4:	mvn	r0, #0
    79b8:	str	r0, [fp, #-4]
    79bc:	b	7bd8 <coda_cursor_read_uint8_partial_array+0x2d8>
    79c0:	ldr	r0, [fp, #-8]
    79c4:	add	r1, r0, #8
    79c8:	ldr	r0, [r0, #4]
    79cc:	sub	r0, r0, #1
    79d0:	add	r0, r1, r0, lsl #4
    79d4:	ldr	r0, [r0]
    79d8:	ldr	r0, [r0]
    79dc:	cmp	r0, #100	; 0x64
    79e0:	bcs	7a04 <coda_cursor_read_uint8_partial_array+0x104>
    79e4:	ldr	r0, [fp, #-8]
    79e8:	add	r1, r0, #8
    79ec:	ldr	r0, [r0, #4]
    79f0:	sub	r0, r0, #1
    79f4:	add	r0, r1, r0, lsl #4
    79f8:	ldr	r0, [r0]
    79fc:	str	r0, [sp, #20]
    7a00:	b	7a24 <coda_cursor_read_uint8_partial_array+0x124>
    7a04:	ldr	r0, [fp, #-8]
    7a08:	add	r1, r0, #8
    7a0c:	ldr	r0, [r0, #4]
    7a10:	sub	r0, r0, #1
    7a14:	add	r0, r1, r0, lsl #4
    7a18:	ldr	r0, [r0]
    7a1c:	ldr	r0, [r0, #4]
    7a20:	str	r0, [sp, #20]
    7a24:	ldr	r0, [sp, #20]
    7a28:	str	r0, [sp, #28]
    7a2c:	ldr	r0, [sp, #28]
    7a30:	ldr	r0, [r0, #8]
    7a34:	cmp	r0, #1
    7a38:	beq	7a70 <coda_cursor_read_uint8_partial_array+0x170>
    7a3c:	ldr	r0, [sp, #28]
    7a40:	ldr	r0, [r0, #8]
    7a44:	bl	0 <coda_type_get_class_name>
    7a48:	mvn	lr, #104	; 0x68
    7a4c:	str	r0, [sp, #16]
    7a50:	mov	r0, lr
    7a54:	movw	r1, #0
    7a58:	movt	r1, #0
    7a5c:	ldr	r2, [sp, #16]
    7a60:	bl	0 <coda_set_error>
    7a64:	mvn	r0, #0
    7a68:	str	r0, [fp, #-4]
    7a6c:	b	7bd8 <coda_cursor_read_uint8_partial_array+0x2d8>
    7a70:	ldr	r0, [pc, #364]	; 7be4 <coda_cursor_read_uint8_partial_array+0x2e4>
    7a74:	ldr	r0, [pc, r0]
    7a78:	str	r0, [sp, #12]
    7a7c:	bl	0 <__aeabi_read_tp>
    7a80:	ldr	ip, [sp, #12]
    7a84:	ldr	r0, [r0, ip]
    7a88:	cmp	r0, #0
    7a8c:	beq	7b44 <coda_cursor_read_uint8_partial_array+0x244>
    7a90:	ldr	r0, [fp, #-8]
    7a94:	add	r1, sp, #24
    7a98:	bl	0 <coda_cursor_get_num_elements>
    7a9c:	cmp	r0, #0
    7aa0:	beq	7ab0 <coda_cursor_read_uint8_partial_array+0x1b0>
    7aa4:	mvn	r0, #0
    7aa8:	str	r0, [fp, #-4]
    7aac:	b	7bd8 <coda_cursor_read_uint8_partial_array+0x2d8>
    7ab0:	ldr	r0, [fp, #-12]
    7ab4:	cmp	r0, #0
    7ab8:	blt	7acc <coda_cursor_read_uint8_partial_array+0x1cc>
    7abc:	ldr	r0, [fp, #-12]
    7ac0:	ldr	r1, [sp, #24]
    7ac4:	cmp	r0, r1
    7ac8:	blt	7af0 <coda_cursor_read_uint8_partial_array+0x1f0>
    7acc:	ldr	r2, [fp, #-12]
    7ad0:	ldr	r3, [sp, #24]
    7ad4:	mvn	r0, #106	; 0x6a
    7ad8:	movw	r1, #0
    7adc:	movt	r1, #0
    7ae0:	bl	0 <coda_set_error>
    7ae4:	mvn	r0, #0
    7ae8:	str	r0, [fp, #-4]
    7aec:	b	7bd8 <coda_cursor_read_uint8_partial_array+0x2d8>
    7af0:	ldr	r0, [fp, #-12]
    7af4:	ldr	r1, [fp, #-16]
    7af8:	add	r0, r0, r1
    7afc:	ldr	r1, [sp, #24]
    7b00:	cmp	r0, r1
    7b04:	ble	7b40 <coda_cursor_read_uint8_partial_array+0x240>
    7b08:	ldr	r2, [fp, #-12]
    7b0c:	ldr	r3, [fp, #-16]
    7b10:	ldr	r0, [sp, #24]
    7b14:	mvn	r1, #106	; 0x6a
    7b18:	str	r0, [sp, #8]
    7b1c:	mov	r0, r1
    7b20:	movw	r1, #0
    7b24:	movt	r1, #0
    7b28:	ldr	ip, [sp, #8]
    7b2c:	str	ip, [sp]
    7b30:	bl	0 <coda_set_error>
    7b34:	mvn	r0, #0
    7b38:	str	r0, [fp, #-4]
    7b3c:	b	7bd8 <coda_cursor_read_uint8_partial_array+0x2d8>
    7b40:	b	7b44 <coda_cursor_read_uint8_partial_array+0x244>
    7b44:	ldr	r0, [sp, #28]
    7b48:	sub	r1, fp, #24
    7b4c:	bl	3304 <get_array_element_read_type>
    7b50:	cmp	r0, #0
    7b54:	beq	7b64 <coda_cursor_read_uint8_partial_array+0x264>
    7b58:	mvn	r0, #0
    7b5c:	str	r0, [fp, #-4]
    7b60:	b	7bd8 <coda_cursor_read_uint8_partial_array+0x2d8>
    7b64:	ldr	r0, [fp, #-24]	; 0xffffffe8
    7b68:	cmp	r0, #1
    7b6c:	bne	7ba0 <coda_cursor_read_uint8_partial_array+0x2a0>
    7b70:	b	7b74 <coda_cursor_read_uint8_partial_array+0x274>
    7b74:	ldr	r0, [fp, #-8]
    7b78:	ldr	r1, [fp, #-12]
    7b7c:	ldr	r2, [fp, #-16]
    7b80:	ldr	r3, [fp, #-20]	; 0xffffffec
    7b84:	bl	7be8 <read_uint8_partial_array>
    7b88:	cmp	r0, #0
    7b8c:	beq	7b9c <coda_cursor_read_uint8_partial_array+0x29c>
    7b90:	mvn	r0, #0
    7b94:	str	r0, [fp, #-4]
    7b98:	b	7bd8 <coda_cursor_read_uint8_partial_array+0x2d8>
    7b9c:	b	7bd0 <coda_cursor_read_uint8_partial_array+0x2d0>
    7ba0:	ldr	r0, [fp, #-24]	; 0xffffffe8
    7ba4:	bl	0 <coda_type_get_native_type_name>
    7ba8:	mvn	lr, #104	; 0x68
    7bac:	str	r0, [sp, #4]
    7bb0:	mov	r0, lr
    7bb4:	movw	r1, #0
    7bb8:	movt	r1, #0
    7bbc:	ldr	r2, [sp, #4]
    7bc0:	bl	0 <coda_set_error>
    7bc4:	mvn	r0, #0
    7bc8:	str	r0, [fp, #-4]
    7bcc:	b	7bd8 <coda_cursor_read_uint8_partial_array+0x2d8>
    7bd0:	movw	r0, #0
    7bd4:	str	r0, [fp, #-4]
    7bd8:	ldr	r0, [fp, #-4]
    7bdc:	mov	sp, fp
    7be0:	pop	{fp, pc}
    7be4:	.word	0x00000168

00007be8 <read_uint8_partial_array>:
    7be8:	push	{fp, lr}
    7bec:	mov	fp, sp
    7bf0:	sub	sp, sp, #24
    7bf4:	str	r0, [fp, #-8]
    7bf8:	str	r1, [sp, #12]
    7bfc:	str	r2, [sp, #8]
    7c00:	str	r3, [sp, #4]
    7c04:	ldr	r0, [fp, #-8]
    7c08:	ldr	r1, [r0, #4]
    7c0c:	add	r0, r0, r1, lsl #4
    7c10:	ldr	r0, [r0, #-8]
    7c14:	ldr	r0, [r0]
    7c18:	cmp	r0, #0
    7c1c:	str	r0, [sp]
    7c20:	beq	7c8c <read_uint8_partial_array+0xa4>
    7c24:	b	7c28 <read_uint8_partial_array+0x40>
    7c28:	ldr	r0, [sp]
    7c2c:	cmp	r0, #1
    7c30:	beq	7ca8 <read_uint8_partial_array+0xc0>
    7c34:	b	7c38 <read_uint8_partial_array+0x50>
    7c38:	ldr	r0, [sp]
    7c3c:	cmp	r0, #100	; 0x64
    7c40:	beq	7cc4 <read_uint8_partial_array+0xdc>
    7c44:	b	7c48 <read_uint8_partial_array+0x60>
    7c48:	ldr	r0, [sp]
    7c4c:	cmp	r0, #101	; 0x65
    7c50:	beq	7ce0 <read_uint8_partial_array+0xf8>
    7c54:	b	7c58 <read_uint8_partial_array+0x70>
    7c58:	ldr	r0, [sp]
    7c5c:	cmp	r0, #102	; 0x66
    7c60:	beq	7cf8 <read_uint8_partial_array+0x110>
    7c64:	b	7c68 <read_uint8_partial_array+0x80>
    7c68:	ldr	r0, [sp]
    7c6c:	cmp	r0, #103	; 0x67
    7c70:	beq	7d10 <read_uint8_partial_array+0x128>
    7c74:	b	7c78 <read_uint8_partial_array+0x90>
    7c78:	ldr	r0, [sp]
    7c7c:	sub	r1, r0, #104	; 0x68
    7c80:	cmp	r1, #2
    7c84:	bcc	7d2c <read_uint8_partial_array+0x144>
    7c88:	b	7d30 <read_uint8_partial_array+0x148>
    7c8c:	ldr	r0, [fp, #-8]
    7c90:	ldr	r1, [sp, #12]
    7c94:	ldr	r2, [sp, #8]
    7c98:	ldr	r3, [sp, #4]
    7c9c:	bl	0 <coda_ascii_cursor_read_uint8_partial_array>
    7ca0:	str	r0, [fp, #-4]
    7ca4:	b	7d50 <read_uint8_partial_array+0x168>
    7ca8:	ldr	r0, [fp, #-8]
    7cac:	ldr	r1, [sp, #12]
    7cb0:	ldr	r2, [sp, #8]
    7cb4:	ldr	r3, [sp, #4]
    7cb8:	bl	0 <coda_bin_cursor_read_uint8_partial_array>
    7cbc:	str	r0, [fp, #-4]
    7cc0:	b	7d50 <read_uint8_partial_array+0x168>
    7cc4:	ldr	r0, [fp, #-8]
    7cc8:	ldr	r1, [sp, #12]
    7ccc:	ldr	r2, [sp, #8]
    7cd0:	ldr	r3, [sp, #4]
    7cd4:	bl	0 <coda_mem_cursor_read_uint8_partial_array>
    7cd8:	str	r0, [fp, #-4]
    7cdc:	b	7d50 <read_uint8_partial_array+0x168>
    7ce0:	mvn	r0, #10
    7ce4:	movw	r1, #0
    7ce8:	bl	0 <coda_set_error>
    7cec:	mvn	r0, #0
    7cf0:	str	r0, [fp, #-4]
    7cf4:	b	7d50 <read_uint8_partial_array+0x168>
    7cf8:	mvn	r0, #12
    7cfc:	movw	r1, #0
    7d00:	bl	0 <coda_set_error>
    7d04:	mvn	r0, #0
    7d08:	str	r0, [fp, #-4]
    7d0c:	b	7d50 <read_uint8_partial_array+0x168>
    7d10:	ldr	r0, [fp, #-8]
    7d14:	ldr	r1, [sp, #12]
    7d18:	ldr	r2, [sp, #8]
    7d1c:	ldr	r3, [sp, #4]
    7d20:	bl	0 <coda_cdf_cursor_read_uint8_partial_array>
    7d24:	str	r0, [fp, #-4]
    7d28:	b	7d50 <read_uint8_partial_array+0x168>
    7d2c:	b	7d30 <read_uint8_partial_array+0x148>
    7d30:	movw	r0, #0
    7d34:	movt	r0, #0
    7d38:	movw	r1, #0
    7d3c:	movt	r1, #0
    7d40:	movw	r2, #1427	; 0x593
    7d44:	movw	r3, #0
    7d48:	movt	r3, #0
    7d4c:	bl	0 <__assert_fail>
    7d50:	ldr	r0, [fp, #-4]
    7d54:	mov	sp, fp
    7d58:	pop	{fp, pc}

00007d5c <coda_cursor_read_int16_partial_array>:
    7d5c:	push	{fp, lr}
    7d60:	mov	fp, sp
    7d64:	sub	sp, sp, #64	; 0x40
    7d68:	str	r0, [fp, #-8]
    7d6c:	str	r1, [fp, #-12]
    7d70:	str	r2, [fp, #-16]
    7d74:	str	r3, [fp, #-20]	; 0xffffffec
    7d78:	ldr	r0, [fp, #-8]
    7d7c:	movw	r1, #0
    7d80:	cmp	r0, r1
    7d84:	beq	7dbc <coda_cursor_read_int16_partial_array+0x60>
    7d88:	ldr	r0, [fp, #-8]
    7d8c:	ldr	r0, [r0, #4]
    7d90:	cmp	r0, #0
    7d94:	ble	7dbc <coda_cursor_read_int16_partial_array+0x60>
    7d98:	ldr	r0, [fp, #-8]
    7d9c:	add	r1, r0, #8
    7da0:	ldr	r0, [r0, #4]
    7da4:	sub	r0, r0, #1
    7da8:	add	r0, r1, r0, lsl #4
    7dac:	ldr	r0, [r0]
    7db0:	movw	r1, #0
    7db4:	cmp	r0, r1
    7db8:	bne	7de4 <coda_cursor_read_int16_partial_array+0x88>
    7dbc:	mvn	r0, #99	; 0x63
    7dc0:	movw	r1, #0
    7dc4:	movt	r1, #0
    7dc8:	movw	r2, #0
    7dcc:	movt	r2, #0
    7dd0:	movw	r3, #4374	; 0x1116
    7dd4:	bl	0 <coda_set_error>
    7dd8:	mvn	r0, #0
    7ddc:	str	r0, [fp, #-4]
    7de0:	b	8134 <coda_cursor_read_int16_partial_array+0x3d8>
    7de4:	ldr	r0, [fp, #-20]	; 0xffffffec
    7de8:	movw	r1, #0
    7dec:	cmp	r0, r1
    7df0:	bne	7e1c <coda_cursor_read_int16_partial_array+0xc0>
    7df4:	mvn	r0, #99	; 0x63
    7df8:	movw	r1, #0
    7dfc:	movt	r1, #0
    7e00:	movw	r2, #0
    7e04:	movt	r2, #0
    7e08:	movw	r3, #4379	; 0x111b
    7e0c:	bl	0 <coda_set_error>
    7e10:	mvn	r0, #0
    7e14:	str	r0, [fp, #-4]
    7e18:	b	8134 <coda_cursor_read_int16_partial_array+0x3d8>
    7e1c:	ldr	r0, [fp, #-8]
    7e20:	add	r1, r0, #8
    7e24:	ldr	r0, [r0, #4]
    7e28:	sub	r0, r0, #1
    7e2c:	add	r0, r1, r0, lsl #4
    7e30:	ldr	r0, [r0]
    7e34:	ldr	r0, [r0]
    7e38:	cmp	r0, #100	; 0x64
    7e3c:	bcs	7e60 <coda_cursor_read_int16_partial_array+0x104>
    7e40:	ldr	r0, [fp, #-8]
    7e44:	add	r1, r0, #8
    7e48:	ldr	r0, [r0, #4]
    7e4c:	sub	r0, r0, #1
    7e50:	add	r0, r1, r0, lsl #4
    7e54:	ldr	r0, [r0]
    7e58:	str	r0, [sp, #24]
    7e5c:	b	7e80 <coda_cursor_read_int16_partial_array+0x124>
    7e60:	ldr	r0, [fp, #-8]
    7e64:	add	r1, r0, #8
    7e68:	ldr	r0, [r0, #4]
    7e6c:	sub	r0, r0, #1
    7e70:	add	r0, r1, r0, lsl #4
    7e74:	ldr	r0, [r0]
    7e78:	ldr	r0, [r0, #4]
    7e7c:	str	r0, [sp, #24]
    7e80:	ldr	r0, [sp, #24]
    7e84:	str	r0, [fp, #-28]	; 0xffffffe4
    7e88:	ldr	r0, [fp, #-28]	; 0xffffffe4
    7e8c:	ldr	r0, [r0, #8]
    7e90:	cmp	r0, #1
    7e94:	beq	7ecc <coda_cursor_read_int16_partial_array+0x170>
    7e98:	ldr	r0, [fp, #-28]	; 0xffffffe4
    7e9c:	ldr	r0, [r0, #8]
    7ea0:	bl	0 <coda_type_get_class_name>
    7ea4:	mvn	lr, #104	; 0x68
    7ea8:	str	r0, [sp, #20]
    7eac:	mov	r0, lr
    7eb0:	movw	r1, #0
    7eb4:	movt	r1, #0
    7eb8:	ldr	r2, [sp, #20]
    7ebc:	bl	0 <coda_set_error>
    7ec0:	mvn	r0, #0
    7ec4:	str	r0, [fp, #-4]
    7ec8:	b	8134 <coda_cursor_read_int16_partial_array+0x3d8>
    7ecc:	ldr	r0, [pc, #620]	; 8140 <coda_cursor_read_int16_partial_array+0x3e4>
    7ed0:	ldr	r0, [pc, r0]
    7ed4:	str	r0, [sp, #16]
    7ed8:	bl	0 <__aeabi_read_tp>
    7edc:	ldr	ip, [sp, #16]
    7ee0:	ldr	r0, [r0, ip]
    7ee4:	cmp	r0, #0
    7ee8:	beq	7fa0 <coda_cursor_read_int16_partial_array+0x244>
    7eec:	ldr	r0, [fp, #-8]
    7ef0:	add	r1, sp, #28
    7ef4:	bl	0 <coda_cursor_get_num_elements>
    7ef8:	cmp	r0, #0
    7efc:	beq	7f0c <coda_cursor_read_int16_partial_array+0x1b0>
    7f00:	mvn	r0, #0
    7f04:	str	r0, [fp, #-4]
    7f08:	b	8134 <coda_cursor_read_int16_partial_array+0x3d8>
    7f0c:	ldr	r0, [fp, #-12]
    7f10:	cmp	r0, #0
    7f14:	blt	7f28 <coda_cursor_read_int16_partial_array+0x1cc>
    7f18:	ldr	r0, [fp, #-12]
    7f1c:	ldr	r1, [sp, #28]
    7f20:	cmp	r0, r1
    7f24:	blt	7f4c <coda_cursor_read_int16_partial_array+0x1f0>
    7f28:	ldr	r2, [fp, #-12]
    7f2c:	ldr	r3, [sp, #28]
    7f30:	mvn	r0, #106	; 0x6a
    7f34:	movw	r1, #0
    7f38:	movt	r1, #0
    7f3c:	bl	0 <coda_set_error>
    7f40:	mvn	r0, #0
    7f44:	str	r0, [fp, #-4]
    7f48:	b	8134 <coda_cursor_read_int16_partial_array+0x3d8>
    7f4c:	ldr	r0, [fp, #-12]
    7f50:	ldr	r1, [fp, #-16]
    7f54:	add	r0, r0, r1
    7f58:	ldr	r1, [sp, #28]
    7f5c:	cmp	r0, r1
    7f60:	ble	7f9c <coda_cursor_read_int16_partial_array+0x240>
    7f64:	ldr	r2, [fp, #-12]
    7f68:	ldr	r3, [fp, #-16]
    7f6c:	ldr	r0, [sp, #28]
    7f70:	mvn	r1, #106	; 0x6a
    7f74:	str	r0, [sp, #12]
    7f78:	mov	r0, r1
    7f7c:	movw	r1, #0
    7f80:	movt	r1, #0
    7f84:	ldr	ip, [sp, #12]
    7f88:	str	ip, [sp]
    7f8c:	bl	0 <coda_set_error>
    7f90:	mvn	r0, #0
    7f94:	str	r0, [fp, #-4]
    7f98:	b	8134 <coda_cursor_read_int16_partial_array+0x3d8>
    7f9c:	b	7fa0 <coda_cursor_read_int16_partial_array+0x244>
    7fa0:	ldr	r0, [fp, #-28]	; 0xffffffe4
    7fa4:	sub	r1, fp, #24
    7fa8:	bl	3304 <get_array_element_read_type>
    7fac:	cmp	r0, #0
    7fb0:	beq	7fc0 <coda_cursor_read_int16_partial_array+0x264>
    7fb4:	mvn	r0, #0
    7fb8:	str	r0, [fp, #-4]
    7fbc:	b	8134 <coda_cursor_read_int16_partial_array+0x3d8>
    7fc0:	ldr	r0, [fp, #-24]	; 0xffffffe8
    7fc4:	cmp	r0, #0
    7fc8:	str	r0, [sp, #8]
    7fcc:	beq	7ff4 <coda_cursor_read_int16_partial_array+0x298>
    7fd0:	b	7fd4 <coda_cursor_read_int16_partial_array+0x278>
    7fd4:	ldr	r0, [sp, #8]
    7fd8:	cmp	r0, #1
    7fdc:	beq	8064 <coda_cursor_read_int16_partial_array+0x308>
    7fe0:	b	7fe4 <coda_cursor_read_int16_partial_array+0x288>
    7fe4:	ldr	r0, [sp, #8]
    7fe8:	cmp	r0, #2
    7fec:	beq	80d0 <coda_cursor_read_int16_partial_array+0x374>
    7ff0:	b	80fc <coda_cursor_read_int16_partial_array+0x3a0>
    7ff4:	ldr	r0, [fp, #-8]
    7ff8:	ldr	r1, [fp, #-12]
    7ffc:	ldr	r2, [fp, #-16]
    8000:	ldr	r3, [fp, #-20]	; 0xffffffec
    8004:	bl	7764 <read_int8_partial_array>
    8008:	cmp	r0, #0
    800c:	beq	801c <coda_cursor_read_int16_partial_array+0x2c0>
    8010:	mvn	r0, #0
    8014:	str	r0, [fp, #-4]
    8018:	b	8134 <coda_cursor_read_int16_partial_array+0x3d8>
    801c:	ldr	r0, [fp, #-16]
    8020:	sub	r0, r0, #1
    8024:	str	r0, [sp, #32]
    8028:	ldr	r0, [sp, #32]
    802c:	cmp	r0, #0
    8030:	blt	8060 <coda_cursor_read_int16_partial_array+0x304>
    8034:	ldr	r0, [fp, #-20]	; 0xffffffec
    8038:	ldr	r1, [sp, #32]
    803c:	add	r2, r0, r1
    8040:	ldrsb	r2, [r2]
    8044:	add	r0, r0, r1, lsl #1
    8048:	strh	r2, [r0]
    804c:	ldr	r0, [sp, #32]
    8050:	mvn	r1, #0
    8054:	add	r0, r0, r1
    8058:	str	r0, [sp, #32]
    805c:	b	8028 <coda_cursor_read_int16_partial_array+0x2cc>
    8060:	b	812c <coda_cursor_read_int16_partial_array+0x3d0>
    8064:	ldr	r0, [fp, #-8]
    8068:	ldr	r1, [fp, #-12]
    806c:	ldr	r2, [fp, #-16]
    8070:	ldr	r3, [fp, #-20]	; 0xffffffec
    8074:	bl	7be8 <read_uint8_partial_array>
    8078:	cmp	r0, #0
    807c:	beq	808c <coda_cursor_read_int16_partial_array+0x330>
    8080:	mvn	r0, #0
    8084:	str	r0, [fp, #-4]
    8088:	b	8134 <coda_cursor_read_int16_partial_array+0x3d8>
    808c:	ldr	r0, [fp, #-16]
    8090:	sub	r0, r0, #1
    8094:	str	r0, [sp, #32]
    8098:	ldr	r0, [sp, #32]
    809c:	cmp	r0, #0
    80a0:	blt	80cc <coda_cursor_read_int16_partial_array+0x370>
    80a4:	ldr	r0, [fp, #-20]	; 0xffffffec
    80a8:	ldr	r1, [sp, #32]
    80ac:	ldrb	r2, [r0, r1]
    80b0:	add	r0, r0, r1, lsl #1
    80b4:	strh	r2, [r0]
    80b8:	ldr	r0, [sp, #32]
    80bc:	mvn	r1, #0
    80c0:	add	r0, r0, r1
    80c4:	str	r0, [sp, #32]
    80c8:	b	8098 <coda_cursor_read_int16_partial_array+0x33c>
    80cc:	b	812c <coda_cursor_read_int16_partial_array+0x3d0>
    80d0:	ldr	r0, [fp, #-8]
    80d4:	ldr	r1, [fp, #-12]
    80d8:	ldr	r2, [fp, #-16]
    80dc:	ldr	r3, [fp, #-20]	; 0xffffffec
    80e0:	bl	8144 <read_int16_partial_array>
    80e4:	cmp	r0, #0
    80e8:	beq	80f8 <coda_cursor_read_int16_partial_array+0x39c>
    80ec:	mvn	r0, #0
    80f0:	str	r0, [fp, #-4]
    80f4:	b	8134 <coda_cursor_read_int16_partial_array+0x3d8>
    80f8:	b	812c <coda_cursor_read_int16_partial_array+0x3d0>
    80fc:	ldr	r0, [fp, #-24]	; 0xffffffe8
    8100:	bl	0 <coda_type_get_native_type_name>
    8104:	mvn	lr, #104	; 0x68
    8108:	str	r0, [sp, #4]
    810c:	mov	r0, lr
    8110:	movw	r1, #0
    8114:	movt	r1, #0
    8118:	ldr	r2, [sp, #4]
    811c:	bl	0 <coda_set_error>
    8120:	mvn	r0, #0
    8124:	str	r0, [fp, #-4]
    8128:	b	8134 <coda_cursor_read_int16_partial_array+0x3d8>
    812c:	movw	r0, #0
    8130:	str	r0, [fp, #-4]
    8134:	ldr	r0, [fp, #-4]
    8138:	mov	sp, fp
    813c:	pop	{fp, pc}
    8140:	.word	0x00000268

00008144 <read_int16_partial_array>:
    8144:	push	{fp, lr}
    8148:	mov	fp, sp
    814c:	sub	sp, sp, #24
    8150:	str	r0, [fp, #-8]
    8154:	str	r1, [sp, #12]
    8158:	str	r2, [sp, #8]
    815c:	str	r3, [sp, #4]
    8160:	ldr	r0, [fp, #-8]
    8164:	ldr	r1, [r0, #4]
    8168:	add	r0, r0, r1, lsl #4
    816c:	ldr	r0, [r0, #-8]
    8170:	ldr	r0, [r0]
    8174:	cmp	r0, #0
    8178:	str	r0, [sp]
    817c:	beq	81f4 <read_int16_partial_array+0xb0>
    8180:	b	8184 <read_int16_partial_array+0x40>
    8184:	ldr	r0, [sp]
    8188:	cmp	r0, #1
    818c:	beq	8210 <read_int16_partial_array+0xcc>
    8190:	b	8194 <read_int16_partial_array+0x50>
    8194:	ldr	r0, [sp]
    8198:	cmp	r0, #100	; 0x64
    819c:	beq	822c <read_int16_partial_array+0xe8>
    81a0:	b	81a4 <read_int16_partial_array+0x60>
    81a4:	ldr	r0, [sp]
    81a8:	cmp	r0, #101	; 0x65
    81ac:	beq	8248 <read_int16_partial_array+0x104>
    81b0:	b	81b4 <read_int16_partial_array+0x70>
    81b4:	ldr	r0, [sp]
    81b8:	cmp	r0, #102	; 0x66
    81bc:	beq	8260 <read_int16_partial_array+0x11c>
    81c0:	b	81c4 <read_int16_partial_array+0x80>
    81c4:	ldr	r0, [sp]
    81c8:	cmp	r0, #103	; 0x67
    81cc:	beq	8278 <read_int16_partial_array+0x134>
    81d0:	b	81d4 <read_int16_partial_array+0x90>
    81d4:	ldr	r0, [sp]
    81d8:	cmp	r0, #104	; 0x68
    81dc:	beq	8294 <read_int16_partial_array+0x150>
    81e0:	b	81e4 <read_int16_partial_array+0xa0>
    81e4:	ldr	r0, [sp]
    81e8:	cmp	r0, #105	; 0x69
    81ec:	beq	82b0 <read_int16_partial_array+0x16c>
    81f0:	b	82b4 <read_int16_partial_array+0x170>
    81f4:	ldr	r0, [fp, #-8]
    81f8:	ldr	r1, [sp, #12]
    81fc:	ldr	r2, [sp, #8]
    8200:	ldr	r3, [sp, #4]
    8204:	bl	0 <coda_ascii_cursor_read_int16_partial_array>
    8208:	str	r0, [fp, #-4]
    820c:	b	82d4 <read_int16_partial_array+0x190>
    8210:	ldr	r0, [fp, #-8]
    8214:	ldr	r1, [sp, #12]
    8218:	ldr	r2, [sp, #8]
    821c:	ldr	r3, [sp, #4]
    8220:	bl	0 <coda_bin_cursor_read_int16_partial_array>
    8224:	str	r0, [fp, #-4]
    8228:	b	82d4 <read_int16_partial_array+0x190>
    822c:	ldr	r0, [fp, #-8]
    8230:	ldr	r1, [sp, #12]
    8234:	ldr	r2, [sp, #8]
    8238:	ldr	r3, [sp, #4]
    823c:	bl	0 <coda_mem_cursor_read_int16_partial_array>
    8240:	str	r0, [fp, #-4]
    8244:	b	82d4 <read_int16_partial_array+0x190>
    8248:	mvn	r0, #10
    824c:	movw	r1, #0
    8250:	bl	0 <coda_set_error>
    8254:	mvn	r0, #0
    8258:	str	r0, [fp, #-4]
    825c:	b	82d4 <read_int16_partial_array+0x190>
    8260:	mvn	r0, #12
    8264:	movw	r1, #0
    8268:	bl	0 <coda_set_error>
    826c:	mvn	r0, #0
    8270:	str	r0, [fp, #-4]
    8274:	b	82d4 <read_int16_partial_array+0x190>
    8278:	ldr	r0, [fp, #-8]
    827c:	ldr	r1, [sp, #12]
    8280:	ldr	r2, [sp, #8]
    8284:	ldr	r3, [sp, #4]
    8288:	bl	0 <coda_cdf_cursor_read_int16_partial_array>
    828c:	str	r0, [fp, #-4]
    8290:	b	82d4 <read_int16_partial_array+0x190>
    8294:	ldr	r0, [fp, #-8]
    8298:	ldr	r1, [sp, #12]
    829c:	ldr	r2, [sp, #8]
    82a0:	ldr	r3, [sp, #4]
    82a4:	bl	0 <coda_netcdf_cursor_read_int16_partial_array>
    82a8:	str	r0, [fp, #-4]
    82ac:	b	82d4 <read_int16_partial_array+0x190>
    82b0:	b	82b4 <read_int16_partial_array+0x170>
    82b4:	movw	r0, #0
    82b8:	movt	r0, #0
    82bc:	movw	r1, #0
    82c0:	movt	r1, #0
    82c4:	movw	r2, #1463	; 0x5b7
    82c8:	movw	r3, #0
    82cc:	movt	r3, #0
    82d0:	bl	0 <__assert_fail>
    82d4:	ldr	r0, [fp, #-4]
    82d8:	mov	sp, fp
    82dc:	pop	{fp, pc}

000082e0 <coda_cursor_read_uint16_partial_array>:
    82e0:	push	{fp, lr}
    82e4:	mov	fp, sp
    82e8:	sub	sp, sp, #64	; 0x40
    82ec:	str	r0, [fp, #-8]
    82f0:	str	r1, [fp, #-12]
    82f4:	str	r2, [fp, #-16]
    82f8:	str	r3, [fp, #-20]	; 0xffffffec
    82fc:	ldr	r0, [fp, #-8]
    8300:	movw	r1, #0
    8304:	cmp	r0, r1
    8308:	beq	8340 <coda_cursor_read_uint16_partial_array+0x60>
    830c:	ldr	r0, [fp, #-8]
    8310:	ldr	r0, [r0, #4]
    8314:	cmp	r0, #0
    8318:	ble	8340 <coda_cursor_read_uint16_partial_array+0x60>
    831c:	ldr	r0, [fp, #-8]
    8320:	add	r1, r0, #8
    8324:	ldr	r0, [r0, #4]
    8328:	sub	r0, r0, #1
    832c:	add	r0, r1, r0, lsl #4
    8330:	ldr	r0, [r0]
    8334:	movw	r1, #0
    8338:	cmp	r0, r1
    833c:	bne	8368 <coda_cursor_read_uint16_partial_array+0x88>
    8340:	mvn	r0, #99	; 0x63
    8344:	movw	r1, #0
    8348:	movt	r1, #0
    834c:	movw	r2, #0
    8350:	movt	r2, #0
    8354:	movw	r3, #4483	; 0x1183
    8358:	bl	0 <coda_set_error>
    835c:	mvn	r0, #0
    8360:	str	r0, [fp, #-4]
    8364:	b	8638 <coda_cursor_read_uint16_partial_array+0x358>
    8368:	ldr	r0, [fp, #-20]	; 0xffffffec
    836c:	movw	r1, #0
    8370:	cmp	r0, r1
    8374:	bne	83a0 <coda_cursor_read_uint16_partial_array+0xc0>
    8378:	mvn	r0, #99	; 0x63
    837c:	movw	r1, #0
    8380:	movt	r1, #0
    8384:	movw	r2, #0
    8388:	movt	r2, #0
    838c:	movw	r3, #4488	; 0x1188
    8390:	bl	0 <coda_set_error>
    8394:	mvn	r0, #0
    8398:	str	r0, [fp, #-4]
    839c:	b	8638 <coda_cursor_read_uint16_partial_array+0x358>
    83a0:	ldr	r0, [fp, #-8]
    83a4:	add	r1, r0, #8
    83a8:	ldr	r0, [r0, #4]
    83ac:	sub	r0, r0, #1
    83b0:	add	r0, r1, r0, lsl #4
    83b4:	ldr	r0, [r0]
    83b8:	ldr	r0, [r0]
    83bc:	cmp	r0, #100	; 0x64
    83c0:	bcs	83e4 <coda_cursor_read_uint16_partial_array+0x104>
    83c4:	ldr	r0, [fp, #-8]
    83c8:	add	r1, r0, #8
    83cc:	ldr	r0, [r0, #4]
    83d0:	sub	r0, r0, #1
    83d4:	add	r0, r1, r0, lsl #4
    83d8:	ldr	r0, [r0]
    83dc:	str	r0, [sp, #24]
    83e0:	b	8404 <coda_cursor_read_uint16_partial_array+0x124>
    83e4:	ldr	r0, [fp, #-8]
    83e8:	add	r1, r0, #8
    83ec:	ldr	r0, [r0, #4]
    83f0:	sub	r0, r0, #1
    83f4:	add	r0, r1, r0, lsl #4
    83f8:	ldr	r0, [r0]
    83fc:	ldr	r0, [r0, #4]
    8400:	str	r0, [sp, #24]
    8404:	ldr	r0, [sp, #24]
    8408:	str	r0, [fp, #-28]	; 0xffffffe4
    840c:	ldr	r0, [fp, #-28]	; 0xffffffe4
    8410:	ldr	r0, [r0, #8]
    8414:	cmp	r0, #1
    8418:	beq	8450 <coda_cursor_read_uint16_partial_array+0x170>
    841c:	ldr	r0, [fp, #-28]	; 0xffffffe4
    8420:	ldr	r0, [r0, #8]
    8424:	bl	0 <coda_type_get_class_name>
    8428:	mvn	lr, #104	; 0x68
    842c:	str	r0, [sp, #20]
    8430:	mov	r0, lr
    8434:	movw	r1, #0
    8438:	movt	r1, #0
    843c:	ldr	r2, [sp, #20]
    8440:	bl	0 <coda_set_error>
    8444:	mvn	r0, #0
    8448:	str	r0, [fp, #-4]
    844c:	b	8638 <coda_cursor_read_uint16_partial_array+0x358>
    8450:	ldr	r0, [pc, #492]	; 8644 <coda_cursor_read_uint16_partial_array+0x364>
    8454:	ldr	r0, [pc, r0]
    8458:	str	r0, [sp, #16]
    845c:	bl	0 <__aeabi_read_tp>
    8460:	ldr	ip, [sp, #16]
    8464:	ldr	r0, [r0, ip]
    8468:	cmp	r0, #0
    846c:	beq	8524 <coda_cursor_read_uint16_partial_array+0x244>
    8470:	ldr	r0, [fp, #-8]
    8474:	add	r1, sp, #28
    8478:	bl	0 <coda_cursor_get_num_elements>
    847c:	cmp	r0, #0
    8480:	beq	8490 <coda_cursor_read_uint16_partial_array+0x1b0>
    8484:	mvn	r0, #0
    8488:	str	r0, [fp, #-4]
    848c:	b	8638 <coda_cursor_read_uint16_partial_array+0x358>
    8490:	ldr	r0, [fp, #-12]
    8494:	cmp	r0, #0
    8498:	blt	84ac <coda_cursor_read_uint16_partial_array+0x1cc>
    849c:	ldr	r0, [fp, #-12]
    84a0:	ldr	r1, [sp, #28]
    84a4:	cmp	r0, r1
    84a8:	blt	84d0 <coda_cursor_read_uint16_partial_array+0x1f0>
    84ac:	ldr	r2, [fp, #-12]
    84b0:	ldr	r3, [sp, #28]
    84b4:	mvn	r0, #106	; 0x6a
    84b8:	movw	r1, #0
    84bc:	movt	r1, #0
    84c0:	bl	0 <coda_set_error>
    84c4:	mvn	r0, #0
    84c8:	str	r0, [fp, #-4]
    84cc:	b	8638 <coda_cursor_read_uint16_partial_array+0x358>
    84d0:	ldr	r0, [fp, #-12]
    84d4:	ldr	r1, [fp, #-16]
    84d8:	add	r0, r0, r1
    84dc:	ldr	r1, [sp, #28]
    84e0:	cmp	r0, r1
    84e4:	ble	8520 <coda_cursor_read_uint16_partial_array+0x240>
    84e8:	ldr	r2, [fp, #-12]
    84ec:	ldr	r3, [fp, #-16]
    84f0:	ldr	r0, [sp, #28]
    84f4:	mvn	r1, #106	; 0x6a
    84f8:	str	r0, [sp, #12]
    84fc:	mov	r0, r1
    8500:	movw	r1, #0
    8504:	movt	r1, #0
    8508:	ldr	ip, [sp, #12]
    850c:	str	ip, [sp]
    8510:	bl	0 <coda_set_error>
    8514:	mvn	r0, #0
    8518:	str	r0, [fp, #-4]
    851c:	b	8638 <coda_cursor_read_uint16_partial_array+0x358>
    8520:	b	8524 <coda_cursor_read_uint16_partial_array+0x244>
    8524:	ldr	r0, [fp, #-28]	; 0xffffffe4
    8528:	sub	r1, fp, #24
    852c:	bl	3304 <get_array_element_read_type>
    8530:	cmp	r0, #0
    8534:	beq	8544 <coda_cursor_read_uint16_partial_array+0x264>
    8538:	mvn	r0, #0
    853c:	str	r0, [fp, #-4]
    8540:	b	8638 <coda_cursor_read_uint16_partial_array+0x358>
    8544:	ldr	r0, [fp, #-24]	; 0xffffffe8
    8548:	cmp	r0, #1
    854c:	str	r0, [sp, #8]
    8550:	beq	8568 <coda_cursor_read_uint16_partial_array+0x288>
    8554:	b	8558 <coda_cursor_read_uint16_partial_array+0x278>
    8558:	ldr	r0, [sp, #8]
    855c:	cmp	r0, #3
    8560:	beq	85d4 <coda_cursor_read_uint16_partial_array+0x2f4>
    8564:	b	8600 <coda_cursor_read_uint16_partial_array+0x320>
    8568:	ldr	r0, [fp, #-8]
    856c:	ldr	r1, [fp, #-12]
    8570:	ldr	r2, [fp, #-16]
    8574:	ldr	r3, [fp, #-20]	; 0xffffffec
    8578:	bl	7be8 <read_uint8_partial_array>
    857c:	cmp	r0, #0
    8580:	beq	8590 <coda_cursor_read_uint16_partial_array+0x2b0>
    8584:	mvn	r0, #0
    8588:	str	r0, [fp, #-4]
    858c:	b	8638 <coda_cursor_read_uint16_partial_array+0x358>
    8590:	ldr	r0, [fp, #-16]
    8594:	sub	r0, r0, #1
    8598:	str	r0, [sp, #32]
    859c:	ldr	r0, [sp, #32]
    85a0:	cmp	r0, #0
    85a4:	blt	85d0 <coda_cursor_read_uint16_partial_array+0x2f0>
    85a8:	ldr	r0, [fp, #-20]	; 0xffffffec
    85ac:	ldr	r1, [sp, #32]
    85b0:	ldrb	r2, [r0, r1]
    85b4:	add	r0, r0, r1, lsl #1
    85b8:	strh	r2, [r0]
    85bc:	ldr	r0, [sp, #32]
    85c0:	mvn	r1, #0
    85c4:	add	r0, r0, r1
    85c8:	str	r0, [sp, #32]
    85cc:	b	859c <coda_cursor_read_uint16_partial_array+0x2bc>
    85d0:	b	8630 <coda_cursor_read_uint16_partial_array+0x350>
    85d4:	ldr	r0, [fp, #-8]
    85d8:	ldr	r1, [fp, #-12]
    85dc:	ldr	r2, [fp, #-16]
    85e0:	ldr	r3, [fp, #-20]	; 0xffffffec
    85e4:	bl	8648 <read_uint16_partial_array>
    85e8:	cmp	r0, #0
    85ec:	beq	85fc <coda_cursor_read_uint16_partial_array+0x31c>
    85f0:	mvn	r0, #0
    85f4:	str	r0, [fp, #-4]
    85f8:	b	8638 <coda_cursor_read_uint16_partial_array+0x358>
    85fc:	b	8630 <coda_cursor_read_uint16_partial_array+0x350>
    8600:	ldr	r0, [fp, #-24]	; 0xffffffe8
    8604:	bl	0 <coda_type_get_native_type_name>
    8608:	mvn	lr, #104	; 0x68
    860c:	str	r0, [sp, #4]
    8610:	mov	r0, lr
    8614:	movw	r1, #0
    8618:	movt	r1, #0
    861c:	ldr	r2, [sp, #4]
    8620:	bl	0 <coda_set_error>
    8624:	mvn	r0, #0
    8628:	str	r0, [fp, #-4]
    862c:	b	8638 <coda_cursor_read_uint16_partial_array+0x358>
    8630:	movw	r0, #0
    8634:	str	r0, [fp, #-4]
    8638:	ldr	r0, [fp, #-4]
    863c:	mov	sp, fp
    8640:	pop	{fp, pc}
    8644:	.word	0x000001e8

00008648 <read_uint16_partial_array>:
    8648:	push	{fp, lr}
    864c:	mov	fp, sp
    8650:	sub	sp, sp, #24
    8654:	str	r0, [fp, #-8]
    8658:	str	r1, [sp, #12]
    865c:	str	r2, [sp, #8]
    8660:	str	r3, [sp, #4]
    8664:	ldr	r0, [fp, #-8]
    8668:	ldr	r1, [r0, #4]
    866c:	add	r0, r0, r1, lsl #4
    8670:	ldr	r0, [r0, #-8]
    8674:	ldr	r0, [r0]
    8678:	cmp	r0, #0
    867c:	str	r0, [sp]
    8680:	beq	86ec <read_uint16_partial_array+0xa4>
    8684:	b	8688 <read_uint16_partial_array+0x40>
    8688:	ldr	r0, [sp]
    868c:	cmp	r0, #1
    8690:	beq	8708 <read_uint16_partial_array+0xc0>
    8694:	b	8698 <read_uint16_partial_array+0x50>
    8698:	ldr	r0, [sp]
    869c:	cmp	r0, #100	; 0x64
    86a0:	beq	8724 <read_uint16_partial_array+0xdc>
    86a4:	b	86a8 <read_uint16_partial_array+0x60>
    86a8:	ldr	r0, [sp]
    86ac:	cmp	r0, #101	; 0x65
    86b0:	beq	8740 <read_uint16_partial_array+0xf8>
    86b4:	b	86b8 <read_uint16_partial_array+0x70>
    86b8:	ldr	r0, [sp]
    86bc:	cmp	r0, #102	; 0x66
    86c0:	beq	8758 <read_uint16_partial_array+0x110>
    86c4:	b	86c8 <read_uint16_partial_array+0x80>
    86c8:	ldr	r0, [sp]
    86cc:	cmp	r0, #103	; 0x67
    86d0:	beq	8770 <read_uint16_partial_array+0x128>
    86d4:	b	86d8 <read_uint16_partial_array+0x90>
    86d8:	ldr	r0, [sp]
    86dc:	sub	r1, r0, #104	; 0x68
    86e0:	cmp	r1, #2
    86e4:	bcc	878c <read_uint16_partial_array+0x144>
    86e8:	b	8790 <read_uint16_partial_array+0x148>
    86ec:	ldr	r0, [fp, #-8]
    86f0:	ldr	r1, [sp, #12]
    86f4:	ldr	r2, [sp, #8]
    86f8:	ldr	r3, [sp, #4]
    86fc:	bl	0 <coda_ascii_cursor_read_uint16_partial_array>
    8700:	str	r0, [fp, #-4]
    8704:	b	87b0 <read_uint16_partial_array+0x168>
    8708:	ldr	r0, [fp, #-8]
    870c:	ldr	r1, [sp, #12]
    8710:	ldr	r2, [sp, #8]
    8714:	ldr	r3, [sp, #4]
    8718:	bl	0 <coda_bin_cursor_read_uint16_partial_array>
    871c:	str	r0, [fp, #-4]
    8720:	b	87b0 <read_uint16_partial_array+0x168>
    8724:	ldr	r0, [fp, #-8]
    8728:	ldr	r1, [sp, #12]
    872c:	ldr	r2, [sp, #8]
    8730:	ldr	r3, [sp, #4]
    8734:	bl	0 <coda_mem_cursor_read_uint16_partial_array>
    8738:	str	r0, [fp, #-4]
    873c:	b	87b0 <read_uint16_partial_array+0x168>
    8740:	mvn	r0, #10
    8744:	movw	r1, #0
    8748:	bl	0 <coda_set_error>
    874c:	mvn	r0, #0
    8750:	str	r0, [fp, #-4]
    8754:	b	87b0 <read_uint16_partial_array+0x168>
    8758:	mvn	r0, #12
    875c:	movw	r1, #0
    8760:	bl	0 <coda_set_error>
    8764:	mvn	r0, #0
    8768:	str	r0, [fp, #-4]
    876c:	b	87b0 <read_uint16_partial_array+0x168>
    8770:	ldr	r0, [fp, #-8]
    8774:	ldr	r1, [sp, #12]
    8778:	ldr	r2, [sp, #8]
    877c:	ldr	r3, [sp, #4]
    8780:	bl	0 <coda_cdf_cursor_read_uint16_partial_array>
    8784:	str	r0, [fp, #-4]
    8788:	b	87b0 <read_uint16_partial_array+0x168>
    878c:	b	8790 <read_uint16_partial_array+0x148>
    8790:	movw	r0, #0
    8794:	movt	r0, #0
    8798:	movw	r1, #0
    879c:	movt	r1, #0
    87a0:	movw	r2, #1498	; 0x5da
    87a4:	movw	r3, #0
    87a8:	movt	r3, #0
    87ac:	bl	0 <__assert_fail>
    87b0:	ldr	r0, [fp, #-4]
    87b4:	mov	sp, fp
    87b8:	pop	{fp, pc}

000087bc <coda_cursor_read_int32_partial_array>:
    87bc:	push	{fp, lr}
    87c0:	mov	fp, sp
    87c4:	sub	sp, sp, #64	; 0x40
    87c8:	str	r0, [fp, #-8]
    87cc:	str	r1, [fp, #-12]
    87d0:	str	r2, [fp, #-16]
    87d4:	str	r3, [fp, #-20]	; 0xffffffec
    87d8:	ldr	r0, [fp, #-8]
    87dc:	movw	r1, #0
    87e0:	cmp	r0, r1
    87e4:	beq	881c <coda_cursor_read_int32_partial_array+0x60>
    87e8:	ldr	r0, [fp, #-8]
    87ec:	ldr	r0, [r0, #4]
    87f0:	cmp	r0, #0
    87f4:	ble	881c <coda_cursor_read_int32_partial_array+0x60>
    87f8:	ldr	r0, [fp, #-8]
    87fc:	add	r1, r0, #8
    8800:	ldr	r0, [r0, #4]
    8804:	sub	r0, r0, #1
    8808:	add	r0, r1, r0, lsl #4
    880c:	ldr	r0, [r0]
    8810:	movw	r1, #0
    8814:	cmp	r0, r1
    8818:	bne	8844 <coda_cursor_read_int32_partial_array+0x88>
    881c:	mvn	r0, #99	; 0x63
    8820:	movw	r1, #0
    8824:	movt	r1, #0
    8828:	movw	r2, #0
    882c:	movt	r2, #0
    8830:	movw	r3, #4584	; 0x11e8
    8834:	bl	0 <coda_set_error>
    8838:	mvn	r0, #0
    883c:	str	r0, [fp, #-4]
    8840:	b	8c74 <coda_cursor_read_int32_partial_array+0x4b8>
    8844:	ldr	r0, [fp, #-20]	; 0xffffffec
    8848:	movw	r1, #0
    884c:	cmp	r0, r1
    8850:	bne	887c <coda_cursor_read_int32_partial_array+0xc0>
    8854:	mvn	r0, #99	; 0x63
    8858:	movw	r1, #0
    885c:	movt	r1, #0
    8860:	movw	r2, #0
    8864:	movt	r2, #0
    8868:	movw	r3, #4589	; 0x11ed
    886c:	bl	0 <coda_set_error>
    8870:	mvn	r0, #0
    8874:	str	r0, [fp, #-4]
    8878:	b	8c74 <coda_cursor_read_int32_partial_array+0x4b8>
    887c:	ldr	r0, [fp, #-8]
    8880:	add	r1, r0, #8
    8884:	ldr	r0, [r0, #4]
    8888:	sub	r0, r0, #1
    888c:	add	r0, r1, r0, lsl #4
    8890:	ldr	r0, [r0]
    8894:	ldr	r0, [r0]
    8898:	cmp	r0, #100	; 0x64
    889c:	bcs	88c0 <coda_cursor_read_int32_partial_array+0x104>
    88a0:	ldr	r0, [fp, #-8]
    88a4:	add	r1, r0, #8
    88a8:	ldr	r0, [r0, #4]
    88ac:	sub	r0, r0, #1
    88b0:	add	r0, r1, r0, lsl #4
    88b4:	ldr	r0, [r0]
    88b8:	str	r0, [sp, #24]
    88bc:	b	88e0 <coda_cursor_read_int32_partial_array+0x124>
    88c0:	ldr	r0, [fp, #-8]
    88c4:	add	r1, r0, #8
    88c8:	ldr	r0, [r0, #4]
    88cc:	sub	r0, r0, #1
    88d0:	add	r0, r1, r0, lsl #4
    88d4:	ldr	r0, [r0]
    88d8:	ldr	r0, [r0, #4]
    88dc:	str	r0, [sp, #24]
    88e0:	ldr	r0, [sp, #24]
    88e4:	str	r0, [fp, #-28]	; 0xffffffe4
    88e8:	ldr	r0, [fp, #-28]	; 0xffffffe4
    88ec:	ldr	r0, [r0, #8]
    88f0:	cmp	r0, #1
    88f4:	beq	892c <coda_cursor_read_int32_partial_array+0x170>
    88f8:	ldr	r0, [fp, #-28]	; 0xffffffe4
    88fc:	ldr	r0, [r0, #8]
    8900:	bl	0 <coda_type_get_class_name>
    8904:	mvn	lr, #104	; 0x68
    8908:	str	r0, [sp, #20]
    890c:	mov	r0, lr
    8910:	movw	r1, #0
    8914:	movt	r1, #0
    8918:	ldr	r2, [sp, #20]
    891c:	bl	0 <coda_set_error>
    8920:	mvn	r0, #0
    8924:	str	r0, [fp, #-4]
    8928:	b	8c74 <coda_cursor_read_int32_partial_array+0x4b8>
    892c:	ldr	r0, [pc, #844]	; 8c80 <coda_cursor_read_int32_partial_array+0x4c4>
    8930:	ldr	r0, [pc, r0]
    8934:	str	r0, [sp, #16]
    8938:	bl	0 <__aeabi_read_tp>
    893c:	ldr	ip, [sp, #16]
    8940:	ldr	r0, [r0, ip]
    8944:	cmp	r0, #0
    8948:	beq	8a00 <coda_cursor_read_int32_partial_array+0x244>
    894c:	ldr	r0, [fp, #-8]
    8950:	add	r1, sp, #28
    8954:	bl	0 <coda_cursor_get_num_elements>
    8958:	cmp	r0, #0
    895c:	beq	896c <coda_cursor_read_int32_partial_array+0x1b0>
    8960:	mvn	r0, #0
    8964:	str	r0, [fp, #-4]
    8968:	b	8c74 <coda_cursor_read_int32_partial_array+0x4b8>
    896c:	ldr	r0, [fp, #-12]
    8970:	cmp	r0, #0
    8974:	blt	8988 <coda_cursor_read_int32_partial_array+0x1cc>
    8978:	ldr	r0, [fp, #-12]
    897c:	ldr	r1, [sp, #28]
    8980:	cmp	r0, r1
    8984:	blt	89ac <coda_cursor_read_int32_partial_array+0x1f0>
    8988:	ldr	r2, [fp, #-12]
    898c:	ldr	r3, [sp, #28]
    8990:	mvn	r0, #106	; 0x6a
    8994:	movw	r1, #0
    8998:	movt	r1, #0
    899c:	bl	0 <coda_set_error>
    89a0:	mvn	r0, #0
    89a4:	str	r0, [fp, #-4]
    89a8:	b	8c74 <coda_cursor_read_int32_partial_array+0x4b8>
    89ac:	ldr	r0, [fp, #-12]
    89b0:	ldr	r1, [fp, #-16]
    89b4:	add	r0, r0, r1
    89b8:	ldr	r1, [sp, #28]
    89bc:	cmp	r0, r1
    89c0:	ble	89fc <coda_cursor_read_int32_partial_array+0x240>
    89c4:	ldr	r2, [fp, #-12]
    89c8:	ldr	r3, [fp, #-16]
    89cc:	ldr	r0, [sp, #28]
    89d0:	mvn	r1, #106	; 0x6a
    89d4:	str	r0, [sp, #12]
    89d8:	mov	r0, r1
    89dc:	movw	r1, #0
    89e0:	movt	r1, #0
    89e4:	ldr	ip, [sp, #12]
    89e8:	str	ip, [sp]
    89ec:	bl	0 <coda_set_error>
    89f0:	mvn	r0, #0
    89f4:	str	r0, [fp, #-4]
    89f8:	b	8c74 <coda_cursor_read_int32_partial_array+0x4b8>
    89fc:	b	8a00 <coda_cursor_read_int32_partial_array+0x244>
    8a00:	ldr	r0, [fp, #-28]	; 0xffffffe4
    8a04:	sub	r1, fp, #24
    8a08:	bl	3304 <get_array_element_read_type>
    8a0c:	cmp	r0, #0
    8a10:	beq	8a20 <coda_cursor_read_int32_partial_array+0x264>
    8a14:	mvn	r0, #0
    8a18:	str	r0, [fp, #-4]
    8a1c:	b	8c74 <coda_cursor_read_int32_partial_array+0x4b8>
    8a20:	ldr	r0, [fp, #-24]	; 0xffffffe8
    8a24:	cmp	r0, #4
    8a28:	str	r0, [sp, #8]
    8a2c:	bhi	8c3c <coda_cursor_read_int32_partial_array+0x480>
    8a30:	add	r0, pc, #8
    8a34:	ldr	r1, [sp, #8]
    8a38:	ldr	r0, [r0, r1, lsl #2]
    8a3c:	mov	pc, r0
    8a40:	.word	0x00008a54
    8a44:	.word	0x00008ac4
    8a48:	.word	0x00008b30
    8a4c:	.word	0x00008ba0
    8a50:	.word	0x00008c10
    8a54:	ldr	r0, [fp, #-8]
    8a58:	ldr	r1, [fp, #-12]
    8a5c:	ldr	r2, [fp, #-16]
    8a60:	ldr	r3, [fp, #-20]	; 0xffffffec
    8a64:	bl	7764 <read_int8_partial_array>
    8a68:	cmp	r0, #0
    8a6c:	beq	8a7c <coda_cursor_read_int32_partial_array+0x2c0>
    8a70:	mvn	r0, #0
    8a74:	str	r0, [fp, #-4]
    8a78:	b	8c74 <coda_cursor_read_int32_partial_array+0x4b8>
    8a7c:	ldr	r0, [fp, #-16]
    8a80:	sub	r0, r0, #1
    8a84:	str	r0, [sp, #32]
    8a88:	ldr	r0, [sp, #32]
    8a8c:	cmp	r0, #0
    8a90:	blt	8ac0 <coda_cursor_read_int32_partial_array+0x304>
    8a94:	ldr	r0, [fp, #-20]	; 0xffffffec
    8a98:	ldr	r1, [sp, #32]
    8a9c:	add	r2, r0, r1
    8aa0:	ldrsb	r2, [r2]
    8aa4:	add	r0, r0, r1, lsl #2
    8aa8:	str	r2, [r0]
    8aac:	ldr	r0, [sp, #32]
    8ab0:	mvn	r1, #0
    8ab4:	add	r0, r0, r1
    8ab8:	str	r0, [sp, #32]
    8abc:	b	8a88 <coda_cursor_read_int32_partial_array+0x2cc>
    8ac0:	b	8c6c <coda_cursor_read_int32_partial_array+0x4b0>
    8ac4:	ldr	r0, [fp, #-8]
    8ac8:	ldr	r1, [fp, #-12]
    8acc:	ldr	r2, [fp, #-16]
    8ad0:	ldr	r3, [fp, #-20]	; 0xffffffec
    8ad4:	bl	7be8 <read_uint8_partial_array>
    8ad8:	cmp	r0, #0
    8adc:	beq	8aec <coda_cursor_read_int32_partial_array+0x330>
    8ae0:	mvn	r0, #0
    8ae4:	str	r0, [fp, #-4]
    8ae8:	b	8c74 <coda_cursor_read_int32_partial_array+0x4b8>
    8aec:	ldr	r0, [fp, #-16]
    8af0:	sub	r0, r0, #1
    8af4:	str	r0, [sp, #32]
    8af8:	ldr	r0, [sp, #32]
    8afc:	cmp	r0, #0
    8b00:	blt	8b2c <coda_cursor_read_int32_partial_array+0x370>
    8b04:	ldr	r0, [fp, #-20]	; 0xffffffec
    8b08:	ldr	r1, [sp, #32]
    8b0c:	ldrb	r2, [r0, r1]
    8b10:	add	r0, r0, r1, lsl #2
    8b14:	str	r2, [r0]
    8b18:	ldr	r0, [sp, #32]
    8b1c:	mvn	r1, #0
    8b20:	add	r0, r0, r1
    8b24:	str	r0, [sp, #32]
    8b28:	b	8af8 <coda_cursor_read_int32_partial_array+0x33c>
    8b2c:	b	8c6c <coda_cursor_read_int32_partial_array+0x4b0>
    8b30:	ldr	r0, [fp, #-8]
    8b34:	ldr	r1, [fp, #-12]
    8b38:	ldr	r2, [fp, #-16]
    8b3c:	ldr	r3, [fp, #-20]	; 0xffffffec
    8b40:	bl	8144 <read_int16_partial_array>
    8b44:	cmp	r0, #0
    8b48:	beq	8b58 <coda_cursor_read_int32_partial_array+0x39c>
    8b4c:	mvn	r0, #0
    8b50:	str	r0, [fp, #-4]
    8b54:	b	8c74 <coda_cursor_read_int32_partial_array+0x4b8>
    8b58:	ldr	r0, [fp, #-16]
    8b5c:	sub	r0, r0, #1
    8b60:	str	r0, [sp, #32]
    8b64:	ldr	r0, [sp, #32]
    8b68:	cmp	r0, #0
    8b6c:	blt	8b9c <coda_cursor_read_int32_partial_array+0x3e0>
    8b70:	ldr	r0, [fp, #-20]	; 0xffffffec
    8b74:	ldr	r1, [sp, #32]
    8b78:	add	r2, r0, r1, lsl #1
    8b7c:	ldrsh	r2, [r2]
    8b80:	add	r0, r0, r1, lsl #2
    8b84:	str	r2, [r0]
    8b88:	ldr	r0, [sp, #32]
    8b8c:	mvn	r1, #0
    8b90:	add	r0, r0, r1
    8b94:	str	r0, [sp, #32]
    8b98:	b	8b64 <coda_cursor_read_int32_partial_array+0x3a8>
    8b9c:	b	8c6c <coda_cursor_read_int32_partial_array+0x4b0>
    8ba0:	ldr	r0, [fp, #-8]
    8ba4:	ldr	r1, [fp, #-12]
    8ba8:	ldr	r2, [fp, #-16]
    8bac:	ldr	r3, [fp, #-20]	; 0xffffffec
    8bb0:	bl	8648 <read_uint16_partial_array>
    8bb4:	cmp	r0, #0
    8bb8:	beq	8bc8 <coda_cursor_read_int32_partial_array+0x40c>
    8bbc:	mvn	r0, #0
    8bc0:	str	r0, [fp, #-4]
    8bc4:	b	8c74 <coda_cursor_read_int32_partial_array+0x4b8>
    8bc8:	ldr	r0, [fp, #-16]
    8bcc:	sub	r0, r0, #1
    8bd0:	str	r0, [sp, #32]
    8bd4:	ldr	r0, [sp, #32]
    8bd8:	cmp	r0, #0
    8bdc:	blt	8c0c <coda_cursor_read_int32_partial_array+0x450>
    8be0:	ldr	r0, [fp, #-20]	; 0xffffffec
    8be4:	ldr	r1, [sp, #32]
    8be8:	add	r2, r0, r1, lsl #1
    8bec:	ldrh	r2, [r2]
    8bf0:	add	r0, r0, r1, lsl #2
    8bf4:	str	r2, [r0]
    8bf8:	ldr	r0, [sp, #32]
    8bfc:	mvn	r1, #0
    8c00:	add	r0, r0, r1
    8c04:	str	r0, [sp, #32]
    8c08:	b	8bd4 <coda_cursor_read_int32_partial_array+0x418>
    8c0c:	b	8c6c <coda_cursor_read_int32_partial_array+0x4b0>
    8c10:	ldr	r0, [fp, #-8]
    8c14:	ldr	r1, [fp, #-12]
    8c18:	ldr	r2, [fp, #-16]
    8c1c:	ldr	r3, [fp, #-20]	; 0xffffffec
    8c20:	bl	8c84 <read_int32_partial_array>
    8c24:	cmp	r0, #0
    8c28:	beq	8c38 <coda_cursor_read_int32_partial_array+0x47c>
    8c2c:	mvn	r0, #0
    8c30:	str	r0, [fp, #-4]
    8c34:	b	8c74 <coda_cursor_read_int32_partial_array+0x4b8>
    8c38:	b	8c6c <coda_cursor_read_int32_partial_array+0x4b0>
    8c3c:	ldr	r0, [fp, #-24]	; 0xffffffe8
    8c40:	bl	0 <coda_type_get_native_type_name>
    8c44:	mvn	lr, #104	; 0x68
    8c48:	str	r0, [sp, #4]
    8c4c:	mov	r0, lr
    8c50:	movw	r1, #0
    8c54:	movt	r1, #0
    8c58:	ldr	r2, [sp, #4]
    8c5c:	bl	0 <coda_set_error>
    8c60:	mvn	r0, #0
    8c64:	str	r0, [fp, #-4]
    8c68:	b	8c74 <coda_cursor_read_int32_partial_array+0x4b8>
    8c6c:	movw	r0, #0
    8c70:	str	r0, [fp, #-4]
    8c74:	ldr	r0, [fp, #-4]
    8c78:	mov	sp, fp
    8c7c:	pop	{fp, pc}
    8c80:	.word	0x00000348

00008c84 <read_int32_partial_array>:
    8c84:	push	{fp, lr}
    8c88:	mov	fp, sp
    8c8c:	sub	sp, sp, #24
    8c90:	str	r0, [fp, #-8]
    8c94:	str	r1, [sp, #12]
    8c98:	str	r2, [sp, #8]
    8c9c:	str	r3, [sp, #4]
    8ca0:	ldr	r0, [fp, #-8]
    8ca4:	ldr	r1, [r0, #4]
    8ca8:	add	r0, r0, r1, lsl #4
    8cac:	ldr	r0, [r0, #-8]
    8cb0:	ldr	r0, [r0]
    8cb4:	cmp	r0, #0
    8cb8:	str	r0, [sp]
    8cbc:	beq	8d34 <read_int32_partial_array+0xb0>
    8cc0:	b	8cc4 <read_int32_partial_array+0x40>
    8cc4:	ldr	r0, [sp]
    8cc8:	cmp	r0, #1
    8ccc:	beq	8d50 <read_int32_partial_array+0xcc>
    8cd0:	b	8cd4 <read_int32_partial_array+0x50>
    8cd4:	ldr	r0, [sp]
    8cd8:	cmp	r0, #100	; 0x64
    8cdc:	beq	8d6c <read_int32_partial_array+0xe8>
    8ce0:	b	8ce4 <read_int32_partial_array+0x60>
    8ce4:	ldr	r0, [sp]
    8ce8:	cmp	r0, #101	; 0x65
    8cec:	beq	8d88 <read_int32_partial_array+0x104>
    8cf0:	b	8cf4 <read_int32_partial_array+0x70>
    8cf4:	ldr	r0, [sp]
    8cf8:	cmp	r0, #102	; 0x66
    8cfc:	beq	8da0 <read_int32_partial_array+0x11c>
    8d00:	b	8d04 <read_int32_partial_array+0x80>
    8d04:	ldr	r0, [sp]
    8d08:	cmp	r0, #103	; 0x67
    8d0c:	beq	8db8 <read_int32_partial_array+0x134>
    8d10:	b	8d14 <read_int32_partial_array+0x90>
    8d14:	ldr	r0, [sp]
    8d18:	cmp	r0, #104	; 0x68
    8d1c:	beq	8dd4 <read_int32_partial_array+0x150>
    8d20:	b	8d24 <read_int32_partial_array+0xa0>
    8d24:	ldr	r0, [sp]
    8d28:	cmp	r0, #105	; 0x69
    8d2c:	beq	8df0 <read_int32_partial_array+0x16c>
    8d30:	b	8df4 <read_int32_partial_array+0x170>
    8d34:	ldr	r0, [fp, #-8]
    8d38:	ldr	r1, [sp, #12]
    8d3c:	ldr	r2, [sp, #8]
    8d40:	ldr	r3, [sp, #4]
    8d44:	bl	0 <coda_ascii_cursor_read_int32_partial_array>
    8d48:	str	r0, [fp, #-4]
    8d4c:	b	8e14 <read_int32_partial_array+0x190>
    8d50:	ldr	r0, [fp, #-8]
    8d54:	ldr	r1, [sp, #12]
    8d58:	ldr	r2, [sp, #8]
    8d5c:	ldr	r3, [sp, #4]
    8d60:	bl	0 <coda_bin_cursor_read_int32_partial_array>
    8d64:	str	r0, [fp, #-4]
    8d68:	b	8e14 <read_int32_partial_array+0x190>
    8d6c:	ldr	r0, [fp, #-8]
    8d70:	ldr	r1, [sp, #12]
    8d74:	ldr	r2, [sp, #8]
    8d78:	ldr	r3, [sp, #4]
    8d7c:	bl	0 <coda_mem_cursor_read_int32_partial_array>
    8d80:	str	r0, [fp, #-4]
    8d84:	b	8e14 <read_int32_partial_array+0x190>
    8d88:	mvn	r0, #10
    8d8c:	movw	r1, #0
    8d90:	bl	0 <coda_set_error>
    8d94:	mvn	r0, #0
    8d98:	str	r0, [fp, #-4]
    8d9c:	b	8e14 <read_int32_partial_array+0x190>
    8da0:	mvn	r0, #12
    8da4:	movw	r1, #0
    8da8:	bl	0 <coda_set_error>
    8dac:	mvn	r0, #0
    8db0:	str	r0, [fp, #-4]
    8db4:	b	8e14 <read_int32_partial_array+0x190>
    8db8:	ldr	r0, [fp, #-8]
    8dbc:	ldr	r1, [sp, #12]
    8dc0:	ldr	r2, [sp, #8]
    8dc4:	ldr	r3, [sp, #4]
    8dc8:	bl	0 <coda_cdf_cursor_read_int32_partial_array>
    8dcc:	str	r0, [fp, #-4]
    8dd0:	b	8e14 <read_int32_partial_array+0x190>
    8dd4:	ldr	r0, [fp, #-8]
    8dd8:	ldr	r1, [sp, #12]
    8ddc:	ldr	r2, [sp, #8]
    8de0:	ldr	r3, [sp, #4]
    8de4:	bl	0 <coda_netcdf_cursor_read_int32_partial_array>
    8de8:	str	r0, [fp, #-4]
    8dec:	b	8e14 <read_int32_partial_array+0x190>
    8df0:	b	8df4 <read_int32_partial_array+0x170>
    8df4:	movw	r0, #0
    8df8:	movt	r0, #0
    8dfc:	movw	r1, #0
    8e00:	movt	r1, #0
    8e04:	movw	r2, #1534	; 0x5fe
    8e08:	movw	r3, #0
    8e0c:	movt	r3, #0
    8e10:	bl	0 <__assert_fail>
    8e14:	ldr	r0, [fp, #-4]
    8e18:	mov	sp, fp
    8e1c:	pop	{fp, pc}

00008e20 <coda_cursor_read_uint32_partial_array>:
    8e20:	push	{fp, lr}
    8e24:	mov	fp, sp
    8e28:	sub	sp, sp, #64	; 0x40
    8e2c:	str	r0, [fp, #-8]
    8e30:	str	r1, [fp, #-12]
    8e34:	str	r2, [fp, #-16]
    8e38:	str	r3, [fp, #-20]	; 0xffffffec
    8e3c:	ldr	r0, [fp, #-8]
    8e40:	movw	r1, #0
    8e44:	cmp	r0, r1
    8e48:	beq	8e80 <coda_cursor_read_uint32_partial_array+0x60>
    8e4c:	ldr	r0, [fp, #-8]
    8e50:	ldr	r0, [r0, #4]
    8e54:	cmp	r0, #0
    8e58:	ble	8e80 <coda_cursor_read_uint32_partial_array+0x60>
    8e5c:	ldr	r0, [fp, #-8]
    8e60:	add	r1, r0, #8
    8e64:	ldr	r0, [r0, #4]
    8e68:	sub	r0, r0, #1
    8e6c:	add	r0, r1, r0, lsl #4
    8e70:	ldr	r0, [r0]
    8e74:	movw	r1, #0
    8e78:	cmp	r0, r1
    8e7c:	bne	8ea8 <coda_cursor_read_uint32_partial_array+0x88>
    8e80:	mvn	r0, #99	; 0x63
    8e84:	movw	r1, #0
    8e88:	movt	r1, #0
    8e8c:	movw	r2, #0
    8e90:	movt	r2, #0
    8e94:	movw	r3, #4714	; 0x126a
    8e98:	bl	0 <coda_set_error>
    8e9c:	mvn	r0, #0
    8ea0:	str	r0, [fp, #-4]
    8ea4:	b	91f8 <coda_cursor_read_uint32_partial_array+0x3d8>
    8ea8:	ldr	r0, [fp, #-20]	; 0xffffffec
    8eac:	movw	r1, #0
    8eb0:	cmp	r0, r1
    8eb4:	bne	8ee0 <coda_cursor_read_uint32_partial_array+0xc0>
    8eb8:	mvn	r0, #99	; 0x63
    8ebc:	movw	r1, #0
    8ec0:	movt	r1, #0
    8ec4:	movw	r2, #0
    8ec8:	movt	r2, #0
    8ecc:	movw	r3, #4719	; 0x126f
    8ed0:	bl	0 <coda_set_error>
    8ed4:	mvn	r0, #0
    8ed8:	str	r0, [fp, #-4]
    8edc:	b	91f8 <coda_cursor_read_uint32_partial_array+0x3d8>
    8ee0:	ldr	r0, [fp, #-8]
    8ee4:	add	r1, r0, #8
    8ee8:	ldr	r0, [r0, #4]
    8eec:	sub	r0, r0, #1
    8ef0:	add	r0, r1, r0, lsl #4
    8ef4:	ldr	r0, [r0]
    8ef8:	ldr	r0, [r0]
    8efc:	cmp	r0, #100	; 0x64
    8f00:	bcs	8f24 <coda_cursor_read_uint32_partial_array+0x104>
    8f04:	ldr	r0, [fp, #-8]
    8f08:	add	r1, r0, #8
    8f0c:	ldr	r0, [r0, #4]
    8f10:	sub	r0, r0, #1
    8f14:	add	r0, r1, r0, lsl #4
    8f18:	ldr	r0, [r0]
    8f1c:	str	r0, [sp, #24]
    8f20:	b	8f44 <coda_cursor_read_uint32_partial_array+0x124>
    8f24:	ldr	r0, [fp, #-8]
    8f28:	add	r1, r0, #8
    8f2c:	ldr	r0, [r0, #4]
    8f30:	sub	r0, r0, #1
    8f34:	add	r0, r1, r0, lsl #4
    8f38:	ldr	r0, [r0]
    8f3c:	ldr	r0, [r0, #4]
    8f40:	str	r0, [sp, #24]
    8f44:	ldr	r0, [sp, #24]
    8f48:	str	r0, [fp, #-28]	; 0xffffffe4
    8f4c:	ldr	r0, [fp, #-28]	; 0xffffffe4
    8f50:	ldr	r0, [r0, #8]
    8f54:	cmp	r0, #1
    8f58:	beq	8f90 <coda_cursor_read_uint32_partial_array+0x170>
    8f5c:	ldr	r0, [fp, #-28]	; 0xffffffe4
    8f60:	ldr	r0, [r0, #8]
    8f64:	bl	0 <coda_type_get_class_name>
    8f68:	mvn	lr, #104	; 0x68
    8f6c:	str	r0, [sp, #20]
    8f70:	mov	r0, lr
    8f74:	movw	r1, #0
    8f78:	movt	r1, #0
    8f7c:	ldr	r2, [sp, #20]
    8f80:	bl	0 <coda_set_error>
    8f84:	mvn	r0, #0
    8f88:	str	r0, [fp, #-4]
    8f8c:	b	91f8 <coda_cursor_read_uint32_partial_array+0x3d8>
    8f90:	ldr	r0, [pc, #620]	; 9204 <coda_cursor_read_uint32_partial_array+0x3e4>
    8f94:	ldr	r0, [pc, r0]
    8f98:	str	r0, [sp, #16]
    8f9c:	bl	0 <__aeabi_read_tp>
    8fa0:	ldr	ip, [sp, #16]
    8fa4:	ldr	r0, [r0, ip]
    8fa8:	cmp	r0, #0
    8fac:	beq	9064 <coda_cursor_read_uint32_partial_array+0x244>
    8fb0:	ldr	r0, [fp, #-8]
    8fb4:	add	r1, sp, #28
    8fb8:	bl	0 <coda_cursor_get_num_elements>
    8fbc:	cmp	r0, #0
    8fc0:	beq	8fd0 <coda_cursor_read_uint32_partial_array+0x1b0>
    8fc4:	mvn	r0, #0
    8fc8:	str	r0, [fp, #-4]
    8fcc:	b	91f8 <coda_cursor_read_uint32_partial_array+0x3d8>
    8fd0:	ldr	r0, [fp, #-12]
    8fd4:	cmp	r0, #0
    8fd8:	blt	8fec <coda_cursor_read_uint32_partial_array+0x1cc>
    8fdc:	ldr	r0, [fp, #-12]
    8fe0:	ldr	r1, [sp, #28]
    8fe4:	cmp	r0, r1
    8fe8:	blt	9010 <coda_cursor_read_uint32_partial_array+0x1f0>
    8fec:	ldr	r2, [fp, #-12]
    8ff0:	ldr	r3, [sp, #28]
    8ff4:	mvn	r0, #106	; 0x6a
    8ff8:	movw	r1, #0
    8ffc:	movt	r1, #0
    9000:	bl	0 <coda_set_error>
    9004:	mvn	r0, #0
    9008:	str	r0, [fp, #-4]
    900c:	b	91f8 <coda_cursor_read_uint32_partial_array+0x3d8>
    9010:	ldr	r0, [fp, #-12]
    9014:	ldr	r1, [fp, #-16]
    9018:	add	r0, r0, r1
    901c:	ldr	r1, [sp, #28]
    9020:	cmp	r0, r1
    9024:	ble	9060 <coda_cursor_read_uint32_partial_array+0x240>
    9028:	ldr	r2, [fp, #-12]
    902c:	ldr	r3, [fp, #-16]
    9030:	ldr	r0, [sp, #28]
    9034:	mvn	r1, #106	; 0x6a
    9038:	str	r0, [sp, #12]
    903c:	mov	r0, r1
    9040:	movw	r1, #0
    9044:	movt	r1, #0
    9048:	ldr	ip, [sp, #12]
    904c:	str	ip, [sp]
    9050:	bl	0 <coda_set_error>
    9054:	mvn	r0, #0
    9058:	str	r0, [fp, #-4]
    905c:	b	91f8 <coda_cursor_read_uint32_partial_array+0x3d8>
    9060:	b	9064 <coda_cursor_read_uint32_partial_array+0x244>
    9064:	ldr	r0, [fp, #-28]	; 0xffffffe4
    9068:	sub	r1, fp, #24
    906c:	bl	3304 <get_array_element_read_type>
    9070:	cmp	r0, #0
    9074:	beq	9084 <coda_cursor_read_uint32_partial_array+0x264>
    9078:	mvn	r0, #0
    907c:	str	r0, [fp, #-4]
    9080:	b	91f8 <coda_cursor_read_uint32_partial_array+0x3d8>
    9084:	ldr	r0, [fp, #-24]	; 0xffffffe8
    9088:	cmp	r0, #1
    908c:	str	r0, [sp, #8]
    9090:	beq	90b8 <coda_cursor_read_uint32_partial_array+0x298>
    9094:	b	9098 <coda_cursor_read_uint32_partial_array+0x278>
    9098:	ldr	r0, [sp, #8]
    909c:	cmp	r0, #3
    90a0:	beq	9124 <coda_cursor_read_uint32_partial_array+0x304>
    90a4:	b	90a8 <coda_cursor_read_uint32_partial_array+0x288>
    90a8:	ldr	r0, [sp, #8]
    90ac:	cmp	r0, #5
    90b0:	beq	9194 <coda_cursor_read_uint32_partial_array+0x374>
    90b4:	b	91c0 <coda_cursor_read_uint32_partial_array+0x3a0>
    90b8:	ldr	r0, [fp, #-8]
    90bc:	ldr	r1, [fp, #-12]
    90c0:	ldr	r2, [fp, #-16]
    90c4:	ldr	r3, [fp, #-20]	; 0xffffffec
    90c8:	bl	7be8 <read_uint8_partial_array>
    90cc:	cmp	r0, #0
    90d0:	beq	90e0 <coda_cursor_read_uint32_partial_array+0x2c0>
    90d4:	mvn	r0, #0
    90d8:	str	r0, [fp, #-4]
    90dc:	b	91f8 <coda_cursor_read_uint32_partial_array+0x3d8>
    90e0:	ldr	r0, [fp, #-16]
    90e4:	sub	r0, r0, #1
    90e8:	str	r0, [sp, #32]
    90ec:	ldr	r0, [sp, #32]
    90f0:	cmp	r0, #0
    90f4:	blt	9120 <coda_cursor_read_uint32_partial_array+0x300>
    90f8:	ldr	r0, [fp, #-20]	; 0xffffffec
    90fc:	ldr	r1, [sp, #32]
    9100:	ldrb	r2, [r0, r1]
    9104:	add	r0, r0, r1, lsl #2
    9108:	str	r2, [r0]
    910c:	ldr	r0, [sp, #32]
    9110:	mvn	r1, #0
    9114:	add	r0, r0, r1
    9118:	str	r0, [sp, #32]
    911c:	b	90ec <coda_cursor_read_uint32_partial_array+0x2cc>
    9120:	b	91f0 <coda_cursor_read_uint32_partial_array+0x3d0>
    9124:	ldr	r0, [fp, #-8]
    9128:	ldr	r1, [fp, #-12]
    912c:	ldr	r2, [fp, #-16]
    9130:	ldr	r3, [fp, #-20]	; 0xffffffec
    9134:	bl	8648 <read_uint16_partial_array>
    9138:	cmp	r0, #0
    913c:	beq	914c <coda_cursor_read_uint32_partial_array+0x32c>
    9140:	mvn	r0, #0
    9144:	str	r0, [fp, #-4]
    9148:	b	91f8 <coda_cursor_read_uint32_partial_array+0x3d8>
    914c:	ldr	r0, [fp, #-16]
    9150:	sub	r0, r0, #1
    9154:	str	r0, [sp, #32]
    9158:	ldr	r0, [sp, #32]
    915c:	cmp	r0, #0
    9160:	blt	9190 <coda_cursor_read_uint32_partial_array+0x370>
    9164:	ldr	r0, [fp, #-20]	; 0xffffffec
    9168:	ldr	r1, [sp, #32]
    916c:	add	r2, r0, r1, lsl #1
    9170:	ldrh	r2, [r2]
    9174:	add	r0, r0, r1, lsl #2
    9178:	str	r2, [r0]
    917c:	ldr	r0, [sp, #32]
    9180:	mvn	r1, #0
    9184:	add	r0, r0, r1
    9188:	str	r0, [sp, #32]
    918c:	b	9158 <coda_cursor_read_uint32_partial_array+0x338>
    9190:	b	91f0 <coda_cursor_read_uint32_partial_array+0x3d0>
    9194:	ldr	r0, [fp, #-8]
    9198:	ldr	r1, [fp, #-12]
    919c:	ldr	r2, [fp, #-16]
    91a0:	ldr	r3, [fp, #-20]	; 0xffffffec
    91a4:	bl	9208 <read_uint32_partial_array>
    91a8:	cmp	r0, #0
    91ac:	beq	91bc <coda_cursor_read_uint32_partial_array+0x39c>
    91b0:	mvn	r0, #0
    91b4:	str	r0, [fp, #-4]
    91b8:	b	91f8 <coda_cursor_read_uint32_partial_array+0x3d8>
    91bc:	b	91f0 <coda_cursor_read_uint32_partial_array+0x3d0>
    91c0:	ldr	r0, [fp, #-24]	; 0xffffffe8
    91c4:	bl	0 <coda_type_get_native_type_name>
    91c8:	mvn	lr, #104	; 0x68
    91cc:	str	r0, [sp, #4]
    91d0:	mov	r0, lr
    91d4:	movw	r1, #0
    91d8:	movt	r1, #0
    91dc:	ldr	r2, [sp, #4]
    91e0:	bl	0 <coda_set_error>
    91e4:	mvn	r0, #0
    91e8:	str	r0, [fp, #-4]
    91ec:	b	91f8 <coda_cursor_read_uint32_partial_array+0x3d8>
    91f0:	movw	r0, #0
    91f4:	str	r0, [fp, #-4]
    91f8:	ldr	r0, [fp, #-4]
    91fc:	mov	sp, fp
    9200:	pop	{fp, pc}
    9204:	.word	0x00000268

00009208 <read_uint32_partial_array>:
    9208:	push	{fp, lr}
    920c:	mov	fp, sp
    9210:	sub	sp, sp, #24
    9214:	str	r0, [fp, #-8]
    9218:	str	r1, [sp, #12]
    921c:	str	r2, [sp, #8]
    9220:	str	r3, [sp, #4]
    9224:	ldr	r0, [fp, #-8]
    9228:	ldr	r1, [r0, #4]
    922c:	add	r0, r0, r1, lsl #4
    9230:	ldr	r0, [r0, #-8]
    9234:	ldr	r0, [r0]
    9238:	cmp	r0, #0
    923c:	str	r0, [sp]
    9240:	beq	92ac <read_uint32_partial_array+0xa4>
    9244:	b	9248 <read_uint32_partial_array+0x40>
    9248:	ldr	r0, [sp]
    924c:	cmp	r0, #1
    9250:	beq	92c8 <read_uint32_partial_array+0xc0>
    9254:	b	9258 <read_uint32_partial_array+0x50>
    9258:	ldr	r0, [sp]
    925c:	cmp	r0, #100	; 0x64
    9260:	beq	92e4 <read_uint32_partial_array+0xdc>
    9264:	b	9268 <read_uint32_partial_array+0x60>
    9268:	ldr	r0, [sp]
    926c:	cmp	r0, #101	; 0x65
    9270:	beq	9300 <read_uint32_partial_array+0xf8>
    9274:	b	9278 <read_uint32_partial_array+0x70>
    9278:	ldr	r0, [sp]
    927c:	cmp	r0, #102	; 0x66
    9280:	beq	9318 <read_uint32_partial_array+0x110>
    9284:	b	9288 <read_uint32_partial_array+0x80>
    9288:	ldr	r0, [sp]
    928c:	cmp	r0, #103	; 0x67
    9290:	beq	9330 <read_uint32_partial_array+0x128>
    9294:	b	9298 <read_uint32_partial_array+0x90>
    9298:	ldr	r0, [sp]
    929c:	sub	r1, r0, #104	; 0x68
    92a0:	cmp	r1, #2
    92a4:	bcc	934c <read_uint32_partial_array+0x144>
    92a8:	b	9350 <read_uint32_partial_array+0x148>
    92ac:	ldr	r0, [fp, #-8]
    92b0:	ldr	r1, [sp, #12]
    92b4:	ldr	r2, [sp, #8]
    92b8:	ldr	r3, [sp, #4]
    92bc:	bl	0 <coda_ascii_cursor_read_uint32_partial_array>
    92c0:	str	r0, [fp, #-4]
    92c4:	b	9370 <read_uint32_partial_array+0x168>
    92c8:	ldr	r0, [fp, #-8]
    92cc:	ldr	r1, [sp, #12]
    92d0:	ldr	r2, [sp, #8]
    92d4:	ldr	r3, [sp, #4]
    92d8:	bl	0 <coda_bin_cursor_read_uint32_partial_array>
    92dc:	str	r0, [fp, #-4]
    92e0:	b	9370 <read_uint32_partial_array+0x168>
    92e4:	ldr	r0, [fp, #-8]
    92e8:	ldr	r1, [sp, #12]
    92ec:	ldr	r2, [sp, #8]
    92f0:	ldr	r3, [sp, #4]
    92f4:	bl	0 <coda_mem_cursor_read_uint32_partial_array>
    92f8:	str	r0, [fp, #-4]
    92fc:	b	9370 <read_uint32_partial_array+0x168>
    9300:	mvn	r0, #10
    9304:	movw	r1, #0
    9308:	bl	0 <coda_set_error>
    930c:	mvn	r0, #0
    9310:	str	r0, [fp, #-4]
    9314:	b	9370 <read_uint32_partial_array+0x168>
    9318:	mvn	r0, #12
    931c:	movw	r1, #0
    9320:	bl	0 <coda_set_error>
    9324:	mvn	r0, #0
    9328:	str	r0, [fp, #-4]
    932c:	b	9370 <read_uint32_partial_array+0x168>
    9330:	ldr	r0, [fp, #-8]
    9334:	ldr	r1, [sp, #12]
    9338:	ldr	r2, [sp, #8]
    933c:	ldr	r3, [sp, #4]
    9340:	bl	0 <coda_cdf_cursor_read_uint32_partial_array>
    9344:	str	r0, [fp, #-4]
    9348:	b	9370 <read_uint32_partial_array+0x168>
    934c:	b	9350 <read_uint32_partial_array+0x148>
    9350:	movw	r0, #0
    9354:	movt	r0, #0
    9358:	movw	r1, #0
    935c:	movt	r1, #0
    9360:	movw	r2, #1569	; 0x621
    9364:	movw	r3, #0
    9368:	movt	r3, #0
    936c:	bl	0 <__assert_fail>
    9370:	ldr	r0, [fp, #-4]
    9374:	mov	sp, fp
    9378:	pop	{fp, pc}

0000937c <coda_cursor_read_int64_partial_array>:
    937c:	push	{fp, lr}
    9380:	mov	fp, sp
    9384:	sub	sp, sp, #64	; 0x40
    9388:	str	r0, [fp, #-8]
    938c:	str	r1, [fp, #-12]
    9390:	str	r2, [fp, #-16]
    9394:	str	r3, [fp, #-20]	; 0xffffffec
    9398:	ldr	r0, [fp, #-8]
    939c:	movw	r1, #0
    93a0:	cmp	r0, r1
    93a4:	beq	93dc <coda_cursor_read_int64_partial_array+0x60>
    93a8:	ldr	r0, [fp, #-8]
    93ac:	ldr	r0, [r0, #4]
    93b0:	cmp	r0, #0
    93b4:	ble	93dc <coda_cursor_read_int64_partial_array+0x60>
    93b8:	ldr	r0, [fp, #-8]
    93bc:	add	r1, r0, #8
    93c0:	ldr	r0, [r0, #4]
    93c4:	sub	r0, r0, #1
    93c8:	add	r0, r1, r0, lsl #4
    93cc:	ldr	r0, [r0]
    93d0:	movw	r1, #0
    93d4:	cmp	r0, r1
    93d8:	bne	9404 <coda_cursor_read_int64_partial_array+0x88>
    93dc:	mvn	r0, #99	; 0x63
    93e0:	movw	r1, #0
    93e4:	movt	r1, #0
    93e8:	movw	r2, #0
    93ec:	movt	r2, #0
    93f0:	movw	r3, #4827	; 0x12db
    93f4:	bl	0 <coda_set_error>
    93f8:	mvn	r0, #0
    93fc:	str	r0, [fp, #-4]
    9400:	b	9944 <coda_cursor_read_int64_partial_array+0x5c8>
    9404:	ldr	r0, [fp, #-20]	; 0xffffffec
    9408:	movw	r1, #0
    940c:	cmp	r0, r1
    9410:	bne	943c <coda_cursor_read_int64_partial_array+0xc0>
    9414:	mvn	r0, #99	; 0x63
    9418:	movw	r1, #0
    941c:	movt	r1, #0
    9420:	movw	r2, #0
    9424:	movt	r2, #0
    9428:	movw	r3, #4832	; 0x12e0
    942c:	bl	0 <coda_set_error>
    9430:	mvn	r0, #0
    9434:	str	r0, [fp, #-4]
    9438:	b	9944 <coda_cursor_read_int64_partial_array+0x5c8>
    943c:	ldr	r0, [fp, #-8]
    9440:	add	r1, r0, #8
    9444:	ldr	r0, [r0, #4]
    9448:	sub	r0, r0, #1
    944c:	add	r0, r1, r0, lsl #4
    9450:	ldr	r0, [r0]
    9454:	ldr	r0, [r0]
    9458:	cmp	r0, #100	; 0x64
    945c:	bcs	9480 <coda_cursor_read_int64_partial_array+0x104>
    9460:	ldr	r0, [fp, #-8]
    9464:	add	r1, r0, #8
    9468:	ldr	r0, [r0, #4]
    946c:	sub	r0, r0, #1
    9470:	add	r0, r1, r0, lsl #4
    9474:	ldr	r0, [r0]
    9478:	str	r0, [sp, #24]
    947c:	b	94a0 <coda_cursor_read_int64_partial_array+0x124>
    9480:	ldr	r0, [fp, #-8]
    9484:	add	r1, r0, #8
    9488:	ldr	r0, [r0, #4]
    948c:	sub	r0, r0, #1
    9490:	add	r0, r1, r0, lsl #4
    9494:	ldr	r0, [r0]
    9498:	ldr	r0, [r0, #4]
    949c:	str	r0, [sp, #24]
    94a0:	ldr	r0, [sp, #24]
    94a4:	str	r0, [fp, #-28]	; 0xffffffe4
    94a8:	ldr	r0, [fp, #-28]	; 0xffffffe4
    94ac:	ldr	r0, [r0, #8]
    94b0:	cmp	r0, #1
    94b4:	beq	94ec <coda_cursor_read_int64_partial_array+0x170>
    94b8:	ldr	r0, [fp, #-28]	; 0xffffffe4
    94bc:	ldr	r0, [r0, #8]
    94c0:	bl	0 <coda_type_get_class_name>
    94c4:	mvn	lr, #104	; 0x68
    94c8:	str	r0, [sp, #20]
    94cc:	mov	r0, lr
    94d0:	movw	r1, #0
    94d4:	movt	r1, #0
    94d8:	ldr	r2, [sp, #20]
    94dc:	bl	0 <coda_set_error>
    94e0:	mvn	r0, #0
    94e4:	str	r0, [fp, #-4]
    94e8:	b	9944 <coda_cursor_read_int64_partial_array+0x5c8>
    94ec:	ldr	r0, [pc, #1116]	; 9950 <coda_cursor_read_int64_partial_array+0x5d4>
    94f0:	ldr	r0, [pc, r0]
    94f4:	str	r0, [sp, #16]
    94f8:	bl	0 <__aeabi_read_tp>
    94fc:	ldr	ip, [sp, #16]
    9500:	ldr	r0, [r0, ip]
    9504:	cmp	r0, #0
    9508:	beq	95c0 <coda_cursor_read_int64_partial_array+0x244>
    950c:	ldr	r0, [fp, #-8]
    9510:	add	r1, sp, #28
    9514:	bl	0 <coda_cursor_get_num_elements>
    9518:	cmp	r0, #0
    951c:	beq	952c <coda_cursor_read_int64_partial_array+0x1b0>
    9520:	mvn	r0, #0
    9524:	str	r0, [fp, #-4]
    9528:	b	9944 <coda_cursor_read_int64_partial_array+0x5c8>
    952c:	ldr	r0, [fp, #-12]
    9530:	cmp	r0, #0
    9534:	blt	9548 <coda_cursor_read_int64_partial_array+0x1cc>
    9538:	ldr	r0, [fp, #-12]
    953c:	ldr	r1, [sp, #28]
    9540:	cmp	r0, r1
    9544:	blt	956c <coda_cursor_read_int64_partial_array+0x1f0>
    9548:	ldr	r2, [fp, #-12]
    954c:	ldr	r3, [sp, #28]
    9550:	mvn	r0, #106	; 0x6a
    9554:	movw	r1, #0
    9558:	movt	r1, #0
    955c:	bl	0 <coda_set_error>
    9560:	mvn	r0, #0
    9564:	str	r0, [fp, #-4]
    9568:	b	9944 <coda_cursor_read_int64_partial_array+0x5c8>
    956c:	ldr	r0, [fp, #-12]
    9570:	ldr	r1, [fp, #-16]
    9574:	add	r0, r0, r1
    9578:	ldr	r1, [sp, #28]
    957c:	cmp	r0, r1
    9580:	ble	95bc <coda_cursor_read_int64_partial_array+0x240>
    9584:	ldr	r2, [fp, #-12]
    9588:	ldr	r3, [fp, #-16]
    958c:	ldr	r0, [sp, #28]
    9590:	mvn	r1, #106	; 0x6a
    9594:	str	r0, [sp, #12]
    9598:	mov	r0, r1
    959c:	movw	r1, #0
    95a0:	movt	r1, #0
    95a4:	ldr	ip, [sp, #12]
    95a8:	str	ip, [sp]
    95ac:	bl	0 <coda_set_error>
    95b0:	mvn	r0, #0
    95b4:	str	r0, [fp, #-4]
    95b8:	b	9944 <coda_cursor_read_int64_partial_array+0x5c8>
    95bc:	b	95c0 <coda_cursor_read_int64_partial_array+0x244>
    95c0:	ldr	r0, [fp, #-28]	; 0xffffffe4
    95c4:	sub	r1, fp, #24
    95c8:	bl	3304 <get_array_element_read_type>
    95cc:	cmp	r0, #0
    95d0:	beq	95e0 <coda_cursor_read_int64_partial_array+0x264>
    95d4:	mvn	r0, #0
    95d8:	str	r0, [fp, #-4]
    95dc:	b	9944 <coda_cursor_read_int64_partial_array+0x5c8>
    95e0:	ldr	r0, [fp, #-24]	; 0xffffffe8
    95e4:	cmp	r0, #6
    95e8:	str	r0, [sp, #8]
    95ec:	bhi	990c <coda_cursor_read_int64_partial_array+0x590>
    95f0:	add	r0, pc, #8
    95f4:	ldr	r1, [sp, #8]
    95f8:	ldr	r0, [r0, r1, lsl #2]
    95fc:	mov	pc, r0
    9600:	.word	0x0000961c
    9604:	.word	0x00009694
    9608:	.word	0x00009708
    960c:	.word	0x00009780
    9610:	.word	0x000097f8
    9614:	.word	0x0000986c
    9618:	.word	0x000098e0
    961c:	ldr	r0, [fp, #-8]
    9620:	ldr	r1, [fp, #-12]
    9624:	ldr	r2, [fp, #-16]
    9628:	ldr	r3, [fp, #-20]	; 0xffffffec
    962c:	bl	7764 <read_int8_partial_array>
    9630:	cmp	r0, #0
    9634:	beq	9644 <coda_cursor_read_int64_partial_array+0x2c8>
    9638:	mvn	r0, #0
    963c:	str	r0, [fp, #-4]
    9640:	b	9944 <coda_cursor_read_int64_partial_array+0x5c8>
    9644:	ldr	r0, [fp, #-16]
    9648:	sub	r0, r0, #1
    964c:	str	r0, [sp, #32]
    9650:	ldr	r0, [sp, #32]
    9654:	cmp	r0, #0
    9658:	blt	9690 <coda_cursor_read_int64_partial_array+0x314>
    965c:	ldr	r0, [fp, #-20]	; 0xffffffec
    9660:	ldr	r1, [sp, #32]
    9664:	add	r2, r0, r1
    9668:	ldrsb	r2, [r2]
    966c:	asr	r3, r2, #31
    9670:	add	ip, r0, r1, lsl #3
    9674:	str	r2, [r0, r1, lsl #3]
    9678:	str	r3, [ip, #4]
    967c:	ldr	r0, [sp, #32]
    9680:	mvn	r1, #0
    9684:	add	r0, r0, r1
    9688:	str	r0, [sp, #32]
    968c:	b	9650 <coda_cursor_read_int64_partial_array+0x2d4>
    9690:	b	993c <coda_cursor_read_int64_partial_array+0x5c0>
    9694:	ldr	r0, [fp, #-8]
    9698:	ldr	r1, [fp, #-12]
    969c:	ldr	r2, [fp, #-16]
    96a0:	ldr	r3, [fp, #-20]	; 0xffffffec
    96a4:	bl	7be8 <read_uint8_partial_array>
    96a8:	cmp	r0, #0
    96ac:	beq	96bc <coda_cursor_read_int64_partial_array+0x340>
    96b0:	mvn	r0, #0
    96b4:	str	r0, [fp, #-4]
    96b8:	b	9944 <coda_cursor_read_int64_partial_array+0x5c8>
    96bc:	ldr	r0, [fp, #-16]
    96c0:	sub	r0, r0, #1
    96c4:	str	r0, [sp, #32]
    96c8:	ldr	r0, [sp, #32]
    96cc:	cmp	r0, #0
    96d0:	blt	9704 <coda_cursor_read_int64_partial_array+0x388>
    96d4:	ldr	r0, [fp, #-20]	; 0xffffffec
    96d8:	ldr	r1, [sp, #32]
    96dc:	ldrb	r2, [r0, r1]
    96e0:	add	r3, r0, r1, lsl #3
    96e4:	str	r2, [r0, r1, lsl #3]
    96e8:	mov	r0, #0
    96ec:	str	r0, [r3, #4]
    96f0:	ldr	r0, [sp, #32]
    96f4:	mvn	r1, #0
    96f8:	add	r0, r0, r1
    96fc:	str	r0, [sp, #32]
    9700:	b	96c8 <coda_cursor_read_int64_partial_array+0x34c>
    9704:	b	993c <coda_cursor_read_int64_partial_array+0x5c0>
    9708:	ldr	r0, [fp, #-8]
    970c:	ldr	r1, [fp, #-12]
    9710:	ldr	r2, [fp, #-16]
    9714:	ldr	r3, [fp, #-20]	; 0xffffffec
    9718:	bl	8144 <read_int16_partial_array>
    971c:	cmp	r0, #0
    9720:	beq	9730 <coda_cursor_read_int64_partial_array+0x3b4>
    9724:	mvn	r0, #0
    9728:	str	r0, [fp, #-4]
    972c:	b	9944 <coda_cursor_read_int64_partial_array+0x5c8>
    9730:	ldr	r0, [fp, #-16]
    9734:	sub	r0, r0, #1
    9738:	str	r0, [sp, #32]
    973c:	ldr	r0, [sp, #32]
    9740:	cmp	r0, #0
    9744:	blt	977c <coda_cursor_read_int64_partial_array+0x400>
    9748:	ldr	r0, [fp, #-20]	; 0xffffffec
    974c:	ldr	r1, [sp, #32]
    9750:	add	r2, r0, r1, lsl #1
    9754:	ldrsh	r2, [r2]
    9758:	asr	r3, r2, #31
    975c:	add	ip, r0, r1, lsl #3
    9760:	str	r2, [r0, r1, lsl #3]
    9764:	str	r3, [ip, #4]
    9768:	ldr	r0, [sp, #32]
    976c:	mvn	r1, #0
    9770:	add	r0, r0, r1
    9774:	str	r0, [sp, #32]
    9778:	b	973c <coda_cursor_read_int64_partial_array+0x3c0>
    977c:	b	993c <coda_cursor_read_int64_partial_array+0x5c0>
    9780:	ldr	r0, [fp, #-8]
    9784:	ldr	r1, [fp, #-12]
    9788:	ldr	r2, [fp, #-16]
    978c:	ldr	r3, [fp, #-20]	; 0xffffffec
    9790:	bl	8648 <read_uint16_partial_array>
    9794:	cmp	r0, #0
    9798:	beq	97a8 <coda_cursor_read_int64_partial_array+0x42c>
    979c:	mvn	r0, #0
    97a0:	str	r0, [fp, #-4]
    97a4:	b	9944 <coda_cursor_read_int64_partial_array+0x5c8>
    97a8:	ldr	r0, [fp, #-16]
    97ac:	sub	r0, r0, #1
    97b0:	str	r0, [sp, #32]
    97b4:	ldr	r0, [sp, #32]
    97b8:	cmp	r0, #0
    97bc:	blt	97f4 <coda_cursor_read_int64_partial_array+0x478>
    97c0:	ldr	r0, [fp, #-20]	; 0xffffffec
    97c4:	ldr	r1, [sp, #32]
    97c8:	add	r2, r0, r1, lsl #1
    97cc:	ldrh	r2, [r2]
    97d0:	add	r3, r0, r1, lsl #3
    97d4:	str	r2, [r0, r1, lsl #3]
    97d8:	mov	r0, #0
    97dc:	str	r0, [r3, #4]
    97e0:	ldr	r0, [sp, #32]
    97e4:	mvn	r1, #0
    97e8:	add	r0, r0, r1
    97ec:	str	r0, [sp, #32]
    97f0:	b	97b4 <coda_cursor_read_int64_partial_array+0x438>
    97f4:	b	993c <coda_cursor_read_int64_partial_array+0x5c0>
    97f8:	ldr	r0, [fp, #-8]
    97fc:	ldr	r1, [fp, #-12]
    9800:	ldr	r2, [fp, #-16]
    9804:	ldr	r3, [fp, #-20]	; 0xffffffec
    9808:	bl	8c84 <read_int32_partial_array>
    980c:	cmp	r0, #0
    9810:	beq	9820 <coda_cursor_read_int64_partial_array+0x4a4>
    9814:	mvn	r0, #0
    9818:	str	r0, [fp, #-4]
    981c:	b	9944 <coda_cursor_read_int64_partial_array+0x5c8>
    9820:	ldr	r0, [fp, #-16]
    9824:	sub	r0, r0, #1
    9828:	str	r0, [sp, #32]
    982c:	ldr	r0, [sp, #32]
    9830:	cmp	r0, #0
    9834:	blt	9868 <coda_cursor_read_int64_partial_array+0x4ec>
    9838:	ldr	r0, [fp, #-20]	; 0xffffffec
    983c:	ldr	r1, [sp, #32]
    9840:	ldr	r2, [r0, r1, lsl #2]
    9844:	asr	r3, r2, #31
    9848:	add	ip, r0, r1, lsl #3
    984c:	str	r2, [r0, r1, lsl #3]
    9850:	str	r3, [ip, #4]
    9854:	ldr	r0, [sp, #32]
    9858:	mvn	r1, #0
    985c:	add	r0, r0, r1
    9860:	str	r0, [sp, #32]
    9864:	b	982c <coda_cursor_read_int64_partial_array+0x4b0>
    9868:	b	993c <coda_cursor_read_int64_partial_array+0x5c0>
    986c:	ldr	r0, [fp, #-8]
    9870:	ldr	r1, [fp, #-12]
    9874:	ldr	r2, [fp, #-16]
    9878:	ldr	r3, [fp, #-20]	; 0xffffffec
    987c:	bl	9208 <read_uint32_partial_array>
    9880:	cmp	r0, #0
    9884:	beq	9894 <coda_cursor_read_int64_partial_array+0x518>
    9888:	mvn	r0, #0
    988c:	str	r0, [fp, #-4]
    9890:	b	9944 <coda_cursor_read_int64_partial_array+0x5c8>
    9894:	ldr	r0, [fp, #-16]
    9898:	sub	r0, r0, #1
    989c:	str	r0, [sp, #32]
    98a0:	ldr	r0, [sp, #32]
    98a4:	cmp	r0, #0
    98a8:	blt	98dc <coda_cursor_read_int64_partial_array+0x560>
    98ac:	ldr	r0, [fp, #-20]	; 0xffffffec
    98b0:	ldr	r1, [sp, #32]
    98b4:	ldr	r2, [r0, r1, lsl #2]
    98b8:	add	r3, r0, r1, lsl #3
    98bc:	str	r2, [r0, r1, lsl #3]
    98c0:	mov	r0, #0
    98c4:	str	r0, [r3, #4]
    98c8:	ldr	r0, [sp, #32]
    98cc:	mvn	r1, #0
    98d0:	add	r0, r0, r1
    98d4:	str	r0, [sp, #32]
    98d8:	b	98a0 <coda_cursor_read_int64_partial_array+0x524>
    98dc:	b	993c <coda_cursor_read_int64_partial_array+0x5c0>
    98e0:	ldr	r0, [fp, #-8]
    98e4:	ldr	r1, [fp, #-12]
    98e8:	ldr	r2, [fp, #-16]
    98ec:	ldr	r3, [fp, #-20]	; 0xffffffec
    98f0:	bl	9954 <read_int64_partial_array>
    98f4:	cmp	r0, #0
    98f8:	beq	9908 <coda_cursor_read_int64_partial_array+0x58c>
    98fc:	mvn	r0, #0
    9900:	str	r0, [fp, #-4]
    9904:	b	9944 <coda_cursor_read_int64_partial_array+0x5c8>
    9908:	b	993c <coda_cursor_read_int64_partial_array+0x5c0>
    990c:	ldr	r0, [fp, #-24]	; 0xffffffe8
    9910:	bl	0 <coda_type_get_native_type_name>
    9914:	mvn	lr, #104	; 0x68
    9918:	str	r0, [sp, #4]
    991c:	mov	r0, lr
    9920:	movw	r1, #0
    9924:	movt	r1, #0
    9928:	ldr	r2, [sp, #4]
    992c:	bl	0 <coda_set_error>
    9930:	mvn	r0, #0
    9934:	str	r0, [fp, #-4]
    9938:	b	9944 <coda_cursor_read_int64_partial_array+0x5c8>
    993c:	movw	r0, #0
    9940:	str	r0, [fp, #-4]
    9944:	ldr	r0, [fp, #-4]
    9948:	mov	sp, fp
    994c:	pop	{fp, pc}
    9950:	.word	0x00000458

00009954 <read_int64_partial_array>:
    9954:	push	{fp, lr}
    9958:	mov	fp, sp
    995c:	sub	sp, sp, #24
    9960:	str	r0, [fp, #-8]
    9964:	str	r1, [sp, #12]
    9968:	str	r2, [sp, #8]
    996c:	str	r3, [sp, #4]
    9970:	ldr	r0, [fp, #-8]
    9974:	ldr	r1, [r0, #4]
    9978:	add	r0, r0, r1, lsl #4
    997c:	ldr	r0, [r0, #-8]
    9980:	ldr	r0, [r0]
    9984:	cmp	r0, #0
    9988:	str	r0, [sp]
    998c:	beq	99f8 <read_int64_partial_array+0xa4>
    9990:	b	9994 <read_int64_partial_array+0x40>
    9994:	ldr	r0, [sp]
    9998:	cmp	r0, #1
    999c:	beq	9a14 <read_int64_partial_array+0xc0>
    99a0:	b	99a4 <read_int64_partial_array+0x50>
    99a4:	ldr	r0, [sp]
    99a8:	cmp	r0, #100	; 0x64
    99ac:	beq	9a30 <read_int64_partial_array+0xdc>
    99b0:	b	99b4 <read_int64_partial_array+0x60>
    99b4:	ldr	r0, [sp]
    99b8:	cmp	r0, #101	; 0x65
    99bc:	beq	9a4c <read_int64_partial_array+0xf8>
    99c0:	b	99c4 <read_int64_partial_array+0x70>
    99c4:	ldr	r0, [sp]
    99c8:	cmp	r0, #102	; 0x66
    99cc:	beq	9a64 <read_int64_partial_array+0x110>
    99d0:	b	99d4 <read_int64_partial_array+0x80>
    99d4:	ldr	r0, [sp]
    99d8:	cmp	r0, #103	; 0x67
    99dc:	beq	9a7c <read_int64_partial_array+0x128>
    99e0:	b	99e4 <read_int64_partial_array+0x90>
    99e4:	ldr	r0, [sp]
    99e8:	sub	r1, r0, #104	; 0x68
    99ec:	cmp	r1, #2
    99f0:	bcc	9a98 <read_int64_partial_array+0x144>
    99f4:	b	9a9c <read_int64_partial_array+0x148>
    99f8:	ldr	r0, [fp, #-8]
    99fc:	ldr	r1, [sp, #12]
    9a00:	ldr	r2, [sp, #8]
    9a04:	ldr	r3, [sp, #4]
    9a08:	bl	0 <coda_ascii_cursor_read_int64_partial_array>
    9a0c:	str	r0, [fp, #-4]
    9a10:	b	9abc <read_int64_partial_array+0x168>
    9a14:	ldr	r0, [fp, #-8]
    9a18:	ldr	r1, [sp, #12]
    9a1c:	ldr	r2, [sp, #8]
    9a20:	ldr	r3, [sp, #4]
    9a24:	bl	0 <coda_bin_cursor_read_int64_partial_array>
    9a28:	str	r0, [fp, #-4]
    9a2c:	b	9abc <read_int64_partial_array+0x168>
    9a30:	ldr	r0, [fp, #-8]
    9a34:	ldr	r1, [sp, #12]
    9a38:	ldr	r2, [sp, #8]
    9a3c:	ldr	r3, [sp, #4]
    9a40:	bl	0 <coda_mem_cursor_read_int64_partial_array>
    9a44:	str	r0, [fp, #-4]
    9a48:	b	9abc <read_int64_partial_array+0x168>
    9a4c:	mvn	r0, #10
    9a50:	movw	r1, #0
    9a54:	bl	0 <coda_set_error>
    9a58:	mvn	r0, #0
    9a5c:	str	r0, [fp, #-4]
    9a60:	b	9abc <read_int64_partial_array+0x168>
    9a64:	mvn	r0, #12
    9a68:	movw	r1, #0
    9a6c:	bl	0 <coda_set_error>
    9a70:	mvn	r0, #0
    9a74:	str	r0, [fp, #-4]
    9a78:	b	9abc <read_int64_partial_array+0x168>
    9a7c:	ldr	r0, [fp, #-8]
    9a80:	ldr	r1, [sp, #12]
    9a84:	ldr	r2, [sp, #8]
    9a88:	ldr	r3, [sp, #4]
    9a8c:	bl	0 <coda_cdf_cursor_read_int64_partial_array>
    9a90:	str	r0, [fp, #-4]
    9a94:	b	9abc <read_int64_partial_array+0x168>
    9a98:	b	9a9c <read_int64_partial_array+0x148>
    9a9c:	movw	r0, #0
    9aa0:	movt	r0, #0
    9aa4:	movw	r1, #0
    9aa8:	movt	r1, #0
    9aac:	movw	r2, #1604	; 0x644
    9ab0:	movw	r3, #0
    9ab4:	movt	r3, #0
    9ab8:	bl	0 <__assert_fail>
    9abc:	ldr	r0, [fp, #-4]
    9ac0:	mov	sp, fp
    9ac4:	pop	{fp, pc}

00009ac8 <coda_cursor_read_uint64_partial_array>:
    9ac8:	push	{fp, lr}
    9acc:	mov	fp, sp
    9ad0:	sub	sp, sp, #64	; 0x40
    9ad4:	str	r0, [fp, #-8]
    9ad8:	str	r1, [fp, #-12]
    9adc:	str	r2, [fp, #-16]
    9ae0:	str	r3, [fp, #-20]	; 0xffffffec
    9ae4:	ldr	r0, [fp, #-8]
    9ae8:	movw	r1, #0
    9aec:	cmp	r0, r1
    9af0:	beq	9b28 <coda_cursor_read_uint64_partial_array+0x60>
    9af4:	ldr	r0, [fp, #-8]
    9af8:	ldr	r0, [r0, #4]
    9afc:	cmp	r0, #0
    9b00:	ble	9b28 <coda_cursor_read_uint64_partial_array+0x60>
    9b04:	ldr	r0, [fp, #-8]
    9b08:	add	r1, r0, #8
    9b0c:	ldr	r0, [r0, #4]
    9b10:	sub	r0, r0, #1
    9b14:	add	r0, r1, r0, lsl #4
    9b18:	ldr	r0, [r0]
    9b1c:	movw	r1, #0
    9b20:	cmp	r0, r1
    9b24:	bne	9b50 <coda_cursor_read_uint64_partial_array+0x88>
    9b28:	mvn	r0, #99	; 0x63
    9b2c:	movw	r1, #0
    9b30:	movt	r1, #0
    9b34:	movw	r2, #0
    9b38:	movt	r2, #0
    9b3c:	movw	r3, #4978	; 0x1372
    9b40:	bl	0 <coda_set_error>
    9b44:	mvn	r0, #0
    9b48:	str	r0, [fp, #-4]
    9b4c:	b	9f30 <coda_cursor_read_uint64_partial_array+0x468>
    9b50:	ldr	r0, [fp, #-20]	; 0xffffffec
    9b54:	movw	r1, #0
    9b58:	cmp	r0, r1
    9b5c:	bne	9b88 <coda_cursor_read_uint64_partial_array+0xc0>
    9b60:	mvn	r0, #99	; 0x63
    9b64:	movw	r1, #0
    9b68:	movt	r1, #0
    9b6c:	movw	r2, #0
    9b70:	movt	r2, #0
    9b74:	movw	r3, #4983	; 0x1377
    9b78:	bl	0 <coda_set_error>
    9b7c:	mvn	r0, #0
    9b80:	str	r0, [fp, #-4]
    9b84:	b	9f30 <coda_cursor_read_uint64_partial_array+0x468>
    9b88:	ldr	r0, [fp, #-8]
    9b8c:	add	r1, r0, #8
    9b90:	ldr	r0, [r0, #4]
    9b94:	sub	r0, r0, #1
    9b98:	add	r0, r1, r0, lsl #4
    9b9c:	ldr	r0, [r0]
    9ba0:	ldr	r0, [r0]
    9ba4:	cmp	r0, #100	; 0x64
    9ba8:	bcs	9bcc <coda_cursor_read_uint64_partial_array+0x104>
    9bac:	ldr	r0, [fp, #-8]
    9bb0:	add	r1, r0, #8
    9bb4:	ldr	r0, [r0, #4]
    9bb8:	sub	r0, r0, #1
    9bbc:	add	r0, r1, r0, lsl #4
    9bc0:	ldr	r0, [r0]
    9bc4:	str	r0, [sp, #24]
    9bc8:	b	9bec <coda_cursor_read_uint64_partial_array+0x124>
    9bcc:	ldr	r0, [fp, #-8]
    9bd0:	add	r1, r0, #8
    9bd4:	ldr	r0, [r0, #4]
    9bd8:	sub	r0, r0, #1
    9bdc:	add	r0, r1, r0, lsl #4
    9be0:	ldr	r0, [r0]
    9be4:	ldr	r0, [r0, #4]
    9be8:	str	r0, [sp, #24]
    9bec:	ldr	r0, [sp, #24]
    9bf0:	str	r0, [fp, #-28]	; 0xffffffe4
    9bf4:	ldr	r0, [fp, #-28]	; 0xffffffe4
    9bf8:	ldr	r0, [r0, #8]
    9bfc:	cmp	r0, #1
    9c00:	beq	9c38 <coda_cursor_read_uint64_partial_array+0x170>
    9c04:	ldr	r0, [fp, #-28]	; 0xffffffe4
    9c08:	ldr	r0, [r0, #8]
    9c0c:	bl	0 <coda_type_get_class_name>
    9c10:	mvn	lr, #104	; 0x68
    9c14:	str	r0, [sp, #20]
    9c18:	mov	r0, lr
    9c1c:	movw	r1, #0
    9c20:	movt	r1, #0
    9c24:	ldr	r2, [sp, #20]
    9c28:	bl	0 <coda_set_error>
    9c2c:	mvn	r0, #0
    9c30:	str	r0, [fp, #-4]
    9c34:	b	9f30 <coda_cursor_read_uint64_partial_array+0x468>
    9c38:	ldr	r0, [pc, #764]	; 9f3c <coda_cursor_read_uint64_partial_array+0x474>
    9c3c:	ldr	r0, [pc, r0]
    9c40:	str	r0, [sp, #16]
    9c44:	bl	0 <__aeabi_read_tp>
    9c48:	ldr	ip, [sp, #16]
    9c4c:	ldr	r0, [r0, ip]
    9c50:	cmp	r0, #0
    9c54:	beq	9d0c <coda_cursor_read_uint64_partial_array+0x244>
    9c58:	ldr	r0, [fp, #-8]
    9c5c:	add	r1, sp, #28
    9c60:	bl	0 <coda_cursor_get_num_elements>
    9c64:	cmp	r0, #0
    9c68:	beq	9c78 <coda_cursor_read_uint64_partial_array+0x1b0>
    9c6c:	mvn	r0, #0
    9c70:	str	r0, [fp, #-4]
    9c74:	b	9f30 <coda_cursor_read_uint64_partial_array+0x468>
    9c78:	ldr	r0, [fp, #-12]
    9c7c:	cmp	r0, #0
    9c80:	blt	9c94 <coda_cursor_read_uint64_partial_array+0x1cc>
    9c84:	ldr	r0, [fp, #-12]
    9c88:	ldr	r1, [sp, #28]
    9c8c:	cmp	r0, r1
    9c90:	blt	9cb8 <coda_cursor_read_uint64_partial_array+0x1f0>
    9c94:	ldr	r2, [fp, #-12]
    9c98:	ldr	r3, [sp, #28]
    9c9c:	mvn	r0, #106	; 0x6a
    9ca0:	movw	r1, #0
    9ca4:	movt	r1, #0
    9ca8:	bl	0 <coda_set_error>
    9cac:	mvn	r0, #0
    9cb0:	str	r0, [fp, #-4]
    9cb4:	b	9f30 <coda_cursor_read_uint64_partial_array+0x468>
    9cb8:	ldr	r0, [fp, #-12]
    9cbc:	ldr	r1, [fp, #-16]
    9cc0:	add	r0, r0, r1
    9cc4:	ldr	r1, [sp, #28]
    9cc8:	cmp	r0, r1
    9ccc:	ble	9d08 <coda_cursor_read_uint64_partial_array+0x240>
    9cd0:	ldr	r2, [fp, #-12]
    9cd4:	ldr	r3, [fp, #-16]
    9cd8:	ldr	r0, [sp, #28]
    9cdc:	mvn	r1, #106	; 0x6a
    9ce0:	str	r0, [sp, #12]
    9ce4:	mov	r0, r1
    9ce8:	movw	r1, #0
    9cec:	movt	r1, #0
    9cf0:	ldr	ip, [sp, #12]
    9cf4:	str	ip, [sp]
    9cf8:	bl	0 <coda_set_error>
    9cfc:	mvn	r0, #0
    9d00:	str	r0, [fp, #-4]
    9d04:	b	9f30 <coda_cursor_read_uint64_partial_array+0x468>
    9d08:	b	9d0c <coda_cursor_read_uint64_partial_array+0x244>
    9d0c:	ldr	r0, [fp, #-28]	; 0xffffffe4
    9d10:	sub	r1, fp, #24
    9d14:	bl	3304 <get_array_element_read_type>
    9d18:	cmp	r0, #0
    9d1c:	beq	9d2c <coda_cursor_read_uint64_partial_array+0x264>
    9d20:	mvn	r0, #0
    9d24:	str	r0, [fp, #-4]
    9d28:	b	9f30 <coda_cursor_read_uint64_partial_array+0x468>
    9d2c:	ldr	r0, [fp, #-24]	; 0xffffffe8
    9d30:	sub	r0, r0, #1
    9d34:	cmp	r0, #6
    9d38:	str	r0, [sp, #8]
    9d3c:	bhi	9ef8 <coda_cursor_read_uint64_partial_array+0x430>
    9d40:	add	r0, pc, #8
    9d44:	ldr	r1, [sp, #8]
    9d48:	ldr	r0, [r0, r1, lsl #2]
    9d4c:	mov	pc, r0
    9d50:	.word	0x00009d6c
    9d54:	.word	0x00009ef8
    9d58:	.word	0x00009de0
    9d5c:	.word	0x00009ef8
    9d60:	.word	0x00009e58
    9d64:	.word	0x00009ef8
    9d68:	.word	0x00009ecc
    9d6c:	ldr	r0, [fp, #-8]
    9d70:	ldr	r1, [fp, #-12]
    9d74:	ldr	r2, [fp, #-16]
    9d78:	ldr	r3, [fp, #-20]	; 0xffffffec
    9d7c:	bl	7be8 <read_uint8_partial_array>
    9d80:	cmp	r0, #0
    9d84:	beq	9d94 <coda_cursor_read_uint64_partial_array+0x2cc>
    9d88:	mvn	r0, #0
    9d8c:	str	r0, [fp, #-4]
    9d90:	b	9f30 <coda_cursor_read_uint64_partial_array+0x468>
    9d94:	ldr	r0, [fp, #-16]
    9d98:	sub	r0, r0, #1
    9d9c:	str	r0, [sp, #32]
    9da0:	ldr	r0, [sp, #32]
    9da4:	cmp	r0, #0
    9da8:	blt	9ddc <coda_cursor_read_uint64_partial_array+0x314>
    9dac:	ldr	r0, [fp, #-20]	; 0xffffffec
    9db0:	ldr	r1, [sp, #32]
    9db4:	ldrb	r2, [r0, r1]
    9db8:	add	r3, r0, r1, lsl #3
    9dbc:	str	r2, [r0, r1, lsl #3]
    9dc0:	mov	r0, #0
    9dc4:	str	r0, [r3, #4]
    9dc8:	ldr	r0, [sp, #32]
    9dcc:	mvn	r1, #0
    9dd0:	add	r0, r0, r1
    9dd4:	str	r0, [sp, #32]
    9dd8:	b	9da0 <coda_cursor_read_uint64_partial_array+0x2d8>
    9ddc:	b	9f28 <coda_cursor_read_uint64_partial_array+0x460>
    9de0:	ldr	r0, [fp, #-8]
    9de4:	ldr	r1, [fp, #-12]
    9de8:	ldr	r2, [fp, #-16]
    9dec:	ldr	r3, [fp, #-20]	; 0xffffffec
    9df0:	bl	8648 <read_uint16_partial_array>
    9df4:	cmp	r0, #0
    9df8:	beq	9e08 <coda_cursor_read_uint64_partial_array+0x340>
    9dfc:	mvn	r0, #0
    9e00:	str	r0, [fp, #-4]
    9e04:	b	9f30 <coda_cursor_read_uint64_partial_array+0x468>
    9e08:	ldr	r0, [fp, #-16]
    9e0c:	sub	r0, r0, #1
    9e10:	str	r0, [sp, #32]
    9e14:	ldr	r0, [sp, #32]
    9e18:	cmp	r0, #0
    9e1c:	blt	9e54 <coda_cursor_read_uint64_partial_array+0x38c>
    9e20:	ldr	r0, [fp, #-20]	; 0xffffffec
    9e24:	ldr	r1, [sp, #32]
    9e28:	add	r2, r0, r1, lsl #1
    9e2c:	ldrh	r2, [r2]
    9e30:	add	r3, r0, r1, lsl #3
    9e34:	str	r2, [r0, r1, lsl #3]
    9e38:	mov	r0, #0
    9e3c:	str	r0, [r3, #4]
    9e40:	ldr	r0, [sp, #32]
    9e44:	mvn	r1, #0
    9e48:	add	r0, r0, r1
    9e4c:	str	r0, [sp, #32]
    9e50:	b	9e14 <coda_cursor_read_uint64_partial_array+0x34c>
    9e54:	b	9f28 <coda_cursor_read_uint64_partial_array+0x460>
    9e58:	ldr	r0, [fp, #-8]
    9e5c:	ldr	r1, [fp, #-12]
    9e60:	ldr	r2, [fp, #-16]
    9e64:	ldr	r3, [fp, #-20]	; 0xffffffec
    9e68:	bl	9208 <read_uint32_partial_array>
    9e6c:	cmp	r0, #0
    9e70:	beq	9e80 <coda_cursor_read_uint64_partial_array+0x3b8>
    9e74:	mvn	r0, #0
    9e78:	str	r0, [fp, #-4]
    9e7c:	b	9f30 <coda_cursor_read_uint64_partial_array+0x468>
    9e80:	ldr	r0, [fp, #-16]
    9e84:	sub	r0, r0, #1
    9e88:	str	r0, [sp, #32]
    9e8c:	ldr	r0, [sp, #32]
    9e90:	cmp	r0, #0
    9e94:	blt	9ec8 <coda_cursor_read_uint64_partial_array+0x400>
    9e98:	ldr	r0, [fp, #-20]	; 0xffffffec
    9e9c:	ldr	r1, [sp, #32]
    9ea0:	ldr	r2, [r0, r1, lsl #2]
    9ea4:	add	r3, r0, r1, lsl #3
    9ea8:	str	r2, [r0, r1, lsl #3]
    9eac:	mov	r0, #0
    9eb0:	str	r0, [r3, #4]
    9eb4:	ldr	r0, [sp, #32]
    9eb8:	mvn	r1, #0
    9ebc:	add	r0, r0, r1
    9ec0:	str	r0, [sp, #32]
    9ec4:	b	9e8c <coda_cursor_read_uint64_partial_array+0x3c4>
    9ec8:	b	9f28 <coda_cursor_read_uint64_partial_array+0x460>
    9ecc:	ldr	r0, [fp, #-8]
    9ed0:	ldr	r1, [fp, #-12]
    9ed4:	ldr	r2, [fp, #-16]
    9ed8:	ldr	r3, [fp, #-20]	; 0xffffffec
    9edc:	bl	9f40 <read_uint64_partial_array>
    9ee0:	cmp	r0, #0
    9ee4:	beq	9ef4 <coda_cursor_read_uint64_partial_array+0x42c>
    9ee8:	mvn	r0, #0
    9eec:	str	r0, [fp, #-4]
    9ef0:	b	9f30 <coda_cursor_read_uint64_partial_array+0x468>
    9ef4:	b	9f28 <coda_cursor_read_uint64_partial_array+0x460>
    9ef8:	ldr	r0, [fp, #-24]	; 0xffffffe8
    9efc:	bl	0 <coda_type_get_native_type_name>
    9f00:	mvn	lr, #104	; 0x68
    9f04:	str	r0, [sp, #4]
    9f08:	mov	r0, lr
    9f0c:	movw	r1, #0
    9f10:	movt	r1, #0
    9f14:	ldr	r2, [sp, #4]
    9f18:	bl	0 <coda_set_error>
    9f1c:	mvn	r0, #0
    9f20:	str	r0, [fp, #-4]
    9f24:	b	9f30 <coda_cursor_read_uint64_partial_array+0x468>
    9f28:	movw	r0, #0
    9f2c:	str	r0, [fp, #-4]
    9f30:	ldr	r0, [fp, #-4]
    9f34:	mov	sp, fp
    9f38:	pop	{fp, pc}
    9f3c:	.word	0x000002f8

00009f40 <read_uint64_partial_array>:
    9f40:	push	{fp, lr}
    9f44:	mov	fp, sp
    9f48:	sub	sp, sp, #24
    9f4c:	str	r0, [fp, #-8]
    9f50:	str	r1, [sp, #12]
    9f54:	str	r2, [sp, #8]
    9f58:	str	r3, [sp, #4]
    9f5c:	ldr	r0, [fp, #-8]
    9f60:	ldr	r1, [r0, #4]
    9f64:	add	r0, r0, r1, lsl #4
    9f68:	ldr	r0, [r0, #-8]
    9f6c:	ldr	r0, [r0]
    9f70:	cmp	r0, #0
    9f74:	str	r0, [sp]
    9f78:	beq	9fd4 <read_uint64_partial_array+0x94>
    9f7c:	b	9f80 <read_uint64_partial_array+0x40>
    9f80:	ldr	r0, [sp]
    9f84:	cmp	r0, #1
    9f88:	beq	9ff0 <read_uint64_partial_array+0xb0>
    9f8c:	b	9f90 <read_uint64_partial_array+0x50>
    9f90:	ldr	r0, [sp]
    9f94:	cmp	r0, #100	; 0x64
    9f98:	beq	a00c <read_uint64_partial_array+0xcc>
    9f9c:	b	9fa0 <read_uint64_partial_array+0x60>
    9fa0:	ldr	r0, [sp]
    9fa4:	cmp	r0, #101	; 0x65
    9fa8:	beq	a028 <read_uint64_partial_array+0xe8>
    9fac:	b	9fb0 <read_uint64_partial_array+0x70>
    9fb0:	ldr	r0, [sp]
    9fb4:	cmp	r0, #102	; 0x66
    9fb8:	beq	a040 <read_uint64_partial_array+0x100>
    9fbc:	b	9fc0 <read_uint64_partial_array+0x80>
    9fc0:	ldr	r0, [sp]
    9fc4:	sub	r1, r0, #103	; 0x67
    9fc8:	cmp	r1, #3
    9fcc:	bcc	a058 <read_uint64_partial_array+0x118>
    9fd0:	b	a05c <read_uint64_partial_array+0x11c>
    9fd4:	ldr	r0, [fp, #-8]
    9fd8:	ldr	r1, [sp, #12]
    9fdc:	ldr	r2, [sp, #8]
    9fe0:	ldr	r3, [sp, #4]
    9fe4:	bl	0 <coda_ascii_cursor_read_uint64_partial_array>
    9fe8:	str	r0, [fp, #-4]
    9fec:	b	a07c <read_uint64_partial_array+0x13c>
    9ff0:	ldr	r0, [fp, #-8]
    9ff4:	ldr	r1, [sp, #12]
    9ff8:	ldr	r2, [sp, #8]
    9ffc:	ldr	r3, [sp, #4]
    a000:	bl	0 <coda_bin_cursor_read_uint64_partial_array>
    a004:	str	r0, [fp, #-4]
    a008:	b	a07c <read_uint64_partial_array+0x13c>
    a00c:	ldr	r0, [fp, #-8]
    a010:	ldr	r1, [sp, #12]
    a014:	ldr	r2, [sp, #8]
    a018:	ldr	r3, [sp, #4]
    a01c:	bl	0 <coda_mem_cursor_read_uint64_partial_array>
    a020:	str	r0, [fp, #-4]
    a024:	b	a07c <read_uint64_partial_array+0x13c>
    a028:	mvn	r0, #10
    a02c:	movw	r1, #0
    a030:	bl	0 <coda_set_error>
    a034:	mvn	r0, #0
    a038:	str	r0, [fp, #-4]
    a03c:	b	a07c <read_uint64_partial_array+0x13c>
    a040:	mvn	r0, #12
    a044:	movw	r1, #0
    a048:	bl	0 <coda_set_error>
    a04c:	mvn	r0, #0
    a050:	str	r0, [fp, #-4]
    a054:	b	a07c <read_uint64_partial_array+0x13c>
    a058:	b	a05c <read_uint64_partial_array+0x11c>
    a05c:	movw	r0, #0
    a060:	movt	r0, #0
    a064:	movw	r1, #0
    a068:	movt	r1, #0
    a06c:	movw	r2, #1638	; 0x666
    a070:	movw	r3, #0
    a074:	movt	r3, #0
    a078:	bl	0 <__assert_fail>
    a07c:	ldr	r0, [fp, #-4]
    a080:	mov	sp, fp
    a084:	pop	{fp, pc}

0000a088 <coda_cursor_read_float_partial_array>:
    a088:	push	{fp, lr}
    a08c:	mov	fp, sp
    a090:	sub	sp, sp, #104	; 0x68
    a094:	str	r0, [fp, #-8]
    a098:	str	r1, [fp, #-12]
    a09c:	str	r2, [fp, #-16]
    a0a0:	str	r3, [fp, #-20]	; 0xffffffec
    a0a4:	ldr	r0, [fp, #-8]
    a0a8:	movw	r1, #0
    a0ac:	cmp	r0, r1
    a0b0:	beq	a0e8 <coda_cursor_read_float_partial_array+0x60>
    a0b4:	ldr	r0, [fp, #-8]
    a0b8:	ldr	r0, [r0, #4]
    a0bc:	cmp	r0, #0
    a0c0:	ble	a0e8 <coda_cursor_read_float_partial_array+0x60>
    a0c4:	ldr	r0, [fp, #-8]
    a0c8:	add	r1, r0, #8
    a0cc:	ldr	r0, [r0, #4]
    a0d0:	sub	r0, r0, #1
    a0d4:	add	r0, r1, r0, lsl #4
    a0d8:	ldr	r0, [r0]
    a0dc:	movw	r1, #0
    a0e0:	cmp	r0, r1
    a0e4:	bne	a110 <coda_cursor_read_float_partial_array+0x88>
    a0e8:	mvn	r0, #99	; 0x63
    a0ec:	movw	r1, #0
    a0f0:	movt	r1, #0
    a0f4:	movw	r2, #0
    a0f8:	movt	r2, #0
    a0fc:	movw	r3, #5105	; 0x13f1
    a100:	bl	0 <coda_set_error>
    a104:	mvn	r0, #0
    a108:	str	r0, [fp, #-4]
    a10c:	b	a9d8 <coda_cursor_read_float_partial_array+0x950>
    a110:	ldr	r0, [fp, #-20]	; 0xffffffec
    a114:	movw	r1, #0
    a118:	cmp	r0, r1
    a11c:	bne	a148 <coda_cursor_read_float_partial_array+0xc0>
    a120:	mvn	r0, #99	; 0x63
    a124:	movw	r1, #0
    a128:	movt	r1, #0
    a12c:	movw	r2, #0
    a130:	movt	r2, #0
    a134:	movw	r3, #5110	; 0x13f6
    a138:	bl	0 <coda_set_error>
    a13c:	mvn	r0, #0
    a140:	str	r0, [fp, #-4]
    a144:	b	a9d8 <coda_cursor_read_float_partial_array+0x950>
    a148:	ldr	r0, [fp, #-8]
    a14c:	add	r1, r0, #8
    a150:	ldr	r0, [r0, #4]
    a154:	sub	r0, r0, #1
    a158:	add	r0, r1, r0, lsl #4
    a15c:	ldr	r0, [r0]
    a160:	ldr	r0, [r0]
    a164:	cmp	r0, #100	; 0x64
    a168:	bcs	a18c <coda_cursor_read_float_partial_array+0x104>
    a16c:	ldr	r0, [fp, #-8]
    a170:	add	r1, r0, #8
    a174:	ldr	r0, [r0, #4]
    a178:	sub	r0, r0, #1
    a17c:	add	r0, r1, r0, lsl #4
    a180:	ldr	r0, [r0]
    a184:	str	r0, [sp, #44]	; 0x2c
    a188:	b	a1ac <coda_cursor_read_float_partial_array+0x124>
    a18c:	ldr	r0, [fp, #-8]
    a190:	add	r1, r0, #8
    a194:	ldr	r0, [r0, #4]
    a198:	sub	r0, r0, #1
    a19c:	add	r0, r1, r0, lsl #4
    a1a0:	ldr	r0, [r0]
    a1a4:	ldr	r0, [r0, #4]
    a1a8:	str	r0, [sp, #44]	; 0x2c
    a1ac:	ldr	r0, [sp, #44]	; 0x2c
    a1b0:	str	r0, [fp, #-32]	; 0xffffffe0
    a1b4:	ldr	r0, [fp, #-32]	; 0xffffffe0
    a1b8:	ldr	r0, [r0, #8]
    a1bc:	cmp	r0, #1
    a1c0:	beq	a1f8 <coda_cursor_read_float_partial_array+0x170>
    a1c4:	ldr	r0, [fp, #-32]	; 0xffffffe0
    a1c8:	ldr	r0, [r0, #8]
    a1cc:	bl	0 <coda_type_get_class_name>
    a1d0:	mvn	lr, #104	; 0x68
    a1d4:	str	r0, [sp, #40]	; 0x28
    a1d8:	mov	r0, lr
    a1dc:	movw	r1, #0
    a1e0:	movt	r1, #0
    a1e4:	ldr	r2, [sp, #40]	; 0x28
    a1e8:	bl	0 <coda_set_error>
    a1ec:	mvn	r0, #0
    a1f0:	str	r0, [fp, #-4]
    a1f4:	b	a9d8 <coda_cursor_read_float_partial_array+0x950>
    a1f8:	ldr	r0, [pc, #2020]	; a9e4 <coda_cursor_read_float_partial_array+0x95c>
    a1fc:	ldr	r0, [pc, r0]
    a200:	str	r0, [sp, #36]	; 0x24
    a204:	bl	0 <__aeabi_read_tp>
    a208:	ldr	ip, [sp, #36]	; 0x24
    a20c:	ldr	r0, [r0, ip]
    a210:	cmp	r0, #0
    a214:	beq	a2cc <coda_cursor_read_float_partial_array+0x244>
    a218:	ldr	r0, [fp, #-8]
    a21c:	sub	r1, fp, #40	; 0x28
    a220:	bl	0 <coda_cursor_get_num_elements>
    a224:	cmp	r0, #0
    a228:	beq	a238 <coda_cursor_read_float_partial_array+0x1b0>
    a22c:	mvn	r0, #0
    a230:	str	r0, [fp, #-4]
    a234:	b	a9d8 <coda_cursor_read_float_partial_array+0x950>
    a238:	ldr	r0, [fp, #-12]
    a23c:	cmp	r0, #0
    a240:	blt	a254 <coda_cursor_read_float_partial_array+0x1cc>
    a244:	ldr	r0, [fp, #-12]
    a248:	ldr	r1, [fp, #-40]	; 0xffffffd8
    a24c:	cmp	r0, r1
    a250:	blt	a278 <coda_cursor_read_float_partial_array+0x1f0>
    a254:	ldr	r2, [fp, #-12]
    a258:	ldr	r3, [fp, #-40]	; 0xffffffd8
    a25c:	mvn	r0, #106	; 0x6a
    a260:	movw	r1, #0
    a264:	movt	r1, #0
    a268:	bl	0 <coda_set_error>
    a26c:	mvn	r0, #0
    a270:	str	r0, [fp, #-4]
    a274:	b	a9d8 <coda_cursor_read_float_partial_array+0x950>
    a278:	ldr	r0, [fp, #-12]
    a27c:	ldr	r1, [fp, #-16]
    a280:	add	r0, r0, r1
    a284:	ldr	r1, [fp, #-40]	; 0xffffffd8
    a288:	cmp	r0, r1
    a28c:	ble	a2c8 <coda_cursor_read_float_partial_array+0x240>
    a290:	ldr	r2, [fp, #-12]
    a294:	ldr	r3, [fp, #-16]
    a298:	ldr	r0, [fp, #-40]	; 0xffffffd8
    a29c:	mvn	r1, #106	; 0x6a
    a2a0:	str	r0, [sp, #32]
    a2a4:	mov	r0, r1
    a2a8:	movw	r1, #0
    a2ac:	movt	r1, #0
    a2b0:	ldr	ip, [sp, #32]
    a2b4:	str	ip, [sp]
    a2b8:	bl	0 <coda_set_error>
    a2bc:	mvn	r0, #0
    a2c0:	str	r0, [fp, #-4]
    a2c4:	b	a9d8 <coda_cursor_read_float_partial_array+0x950>
    a2c8:	b	a2cc <coda_cursor_read_float_partial_array+0x244>
    a2cc:	ldr	r0, [fp, #-32]	; 0xffffffe0
    a2d0:	sub	r1, fp, #24
    a2d4:	sub	r2, fp, #28
    a2d8:	bl	638c <get_array_element_unconverted_read_type>
    a2dc:	cmp	r0, #0
    a2e0:	beq	a2f0 <coda_cursor_read_float_partial_array+0x268>
    a2e4:	mvn	r0, #0
    a2e8:	str	r0, [fp, #-4]
    a2ec:	b	a9d8 <coda_cursor_read_float_partial_array+0x950>
    a2f0:	ldr	r0, [fp, #-28]	; 0xffffffe4
    a2f4:	movw	r1, #0
    a2f8:	cmp	r0, r1
    a2fc:	beq	a3d4 <coda_cursor_read_float_partial_array+0x34c>
    a300:	ldr	r0, [fp, #-16]
    a304:	lsl	r0, r0, #3
    a308:	bl	0 <malloc>
    a30c:	str	r0, [fp, #-44]	; 0xffffffd4
    a310:	ldr	r0, [fp, #-44]	; 0xffffffd4
    a314:	movw	lr, #0
    a318:	cmp	r0, lr
    a31c:	bne	a344 <coda_cursor_read_float_partial_array+0x2bc>
    a320:	ldr	r0, [fp, #-16]
    a324:	lsl	r2, r0, #3
    a328:	mvn	r0, #0
    a32c:	movw	r1, #0
    a330:	movt	r1, #0
    a334:	bl	0 <coda_set_error>
    a338:	mvn	r0, #0
    a33c:	str	r0, [fp, #-4]
    a340:	b	a9d8 <coda_cursor_read_float_partial_array+0x950>
    a344:	ldr	r0, [fp, #-8]
    a348:	ldr	r1, [fp, #-12]
    a34c:	ldr	r2, [fp, #-16]
    a350:	ldr	r3, [fp, #-44]	; 0xffffffd4
    a354:	bl	a9e8 <coda_cursor_read_double_partial_array>
    a358:	cmp	r0, #0
    a35c:	beq	a374 <coda_cursor_read_float_partial_array+0x2ec>
    a360:	ldr	r0, [fp, #-44]	; 0xffffffd4
    a364:	bl	0 <free>
    a368:	mvn	r0, #0
    a36c:	str	r0, [fp, #-4]
    a370:	b	a9d8 <coda_cursor_read_float_partial_array+0x950>
    a374:	ldr	r0, [fp, #-16]
    a378:	sub	r0, r0, #1
    a37c:	str	r0, [fp, #-36]	; 0xffffffdc
    a380:	ldr	r0, [fp, #-36]	; 0xffffffdc
    a384:	cmp	r0, #0
    a388:	blt	a3c0 <coda_cursor_read_float_partial_array+0x338>
    a38c:	ldr	r0, [fp, #-44]	; 0xffffffd4
    a390:	ldr	r1, [fp, #-36]	; 0xffffffdc
    a394:	add	r0, r0, r1, lsl #3
    a398:	vldr	d16, [r0]
    a39c:	vcvt.f32.f64	s0, d16
    a3a0:	ldr	r0, [fp, #-20]	; 0xffffffec
    a3a4:	add	r0, r0, r1, lsl #2
    a3a8:	vstr	s0, [r0]
    a3ac:	ldr	r0, [fp, #-36]	; 0xffffffdc
    a3b0:	mvn	r1, #0
    a3b4:	add	r0, r0, r1
    a3b8:	str	r0, [fp, #-36]	; 0xffffffdc
    a3bc:	b	a380 <coda_cursor_read_float_partial_array+0x2f8>
    a3c0:	ldr	r0, [fp, #-44]	; 0xffffffd4
    a3c4:	bl	0 <free>
    a3c8:	movw	r0, #0
    a3cc:	str	r0, [fp, #-4]
    a3d0:	b	a9d8 <coda_cursor_read_float_partial_array+0x950>
    a3d4:	ldr	r0, [fp, #-24]	; 0xffffffe8
    a3d8:	cmp	r0, #9
    a3dc:	str	r0, [sp, #28]
    a3e0:	bhi	a9a0 <coda_cursor_read_float_partial_array+0x918>
    a3e4:	add	r0, pc, #8
    a3e8:	ldr	r1, [sp, #28]
    a3ec:	ldr	r0, [r0, r1, lsl #2]
    a3f0:	mov	pc, r0
    a3f4:	.word	0x0000a41c
    a3f8:	.word	0x0000a494
    a3fc:	.word	0x0000a508
    a400:	.word	0x0000a580
    a404:	.word	0x0000a5f8
    a408:	.word	0x0000a668
    a40c:	.word	0x0000a6d8
    a410:	.word	0x0000a7c0
    a414:	.word	0x0000a8a8
    a418:	.word	0x0000a8d4
    a41c:	ldr	r0, [fp, #-8]
    a420:	ldr	r1, [fp, #-12]
    a424:	ldr	r2, [fp, #-16]
    a428:	ldr	r3, [fp, #-20]	; 0xffffffec
    a42c:	bl	7764 <read_int8_partial_array>
    a430:	cmp	r0, #0
    a434:	beq	a444 <coda_cursor_read_float_partial_array+0x3bc>
    a438:	mvn	r0, #0
    a43c:	str	r0, [fp, #-4]
    a440:	b	a9d8 <coda_cursor_read_float_partial_array+0x950>
    a444:	ldr	r0, [fp, #-16]
    a448:	sub	r0, r0, #1
    a44c:	str	r0, [fp, #-36]	; 0xffffffdc
    a450:	ldr	r0, [fp, #-36]	; 0xffffffdc
    a454:	cmp	r0, #0
    a458:	blt	a490 <coda_cursor_read_float_partial_array+0x408>
    a45c:	ldr	r0, [fp, #-20]	; 0xffffffec
    a460:	ldr	r1, [fp, #-36]	; 0xffffffdc
    a464:	add	r2, r0, r1
    a468:	ldrsb	r2, [r2]
    a46c:	vmov	s0, r2
    a470:	vcvt.f32.s32	s0, s0
    a474:	add	r0, r0, r1, lsl #2
    a478:	vstr	s0, [r0]
    a47c:	ldr	r0, [fp, #-36]	; 0xffffffdc
    a480:	mvn	r1, #0
    a484:	add	r0, r0, r1
    a488:	str	r0, [fp, #-36]	; 0xffffffdc
    a48c:	b	a450 <coda_cursor_read_float_partial_array+0x3c8>
    a490:	b	a9d0 <coda_cursor_read_float_partial_array+0x948>
    a494:	ldr	r0, [fp, #-8]
    a498:	ldr	r1, [fp, #-12]
    a49c:	ldr	r2, [fp, #-16]
    a4a0:	ldr	r3, [fp, #-20]	; 0xffffffec
    a4a4:	bl	7be8 <read_uint8_partial_array>
    a4a8:	cmp	r0, #0
    a4ac:	beq	a4bc <coda_cursor_read_float_partial_array+0x434>
    a4b0:	mvn	r0, #0
    a4b4:	str	r0, [fp, #-4]
    a4b8:	b	a9d8 <coda_cursor_read_float_partial_array+0x950>
    a4bc:	ldr	r0, [fp, #-16]
    a4c0:	sub	r0, r0, #1
    a4c4:	str	r0, [fp, #-36]	; 0xffffffdc
    a4c8:	ldr	r0, [fp, #-36]	; 0xffffffdc
    a4cc:	cmp	r0, #0
    a4d0:	blt	a504 <coda_cursor_read_float_partial_array+0x47c>
    a4d4:	ldr	r0, [fp, #-20]	; 0xffffffec
    a4d8:	ldr	r1, [fp, #-36]	; 0xffffffdc
    a4dc:	ldrb	r2, [r0, r1]
    a4e0:	vmov	s0, r2
    a4e4:	vcvt.f32.u32	s0, s0
    a4e8:	add	r0, r0, r1, lsl #2
    a4ec:	vstr	s0, [r0]
    a4f0:	ldr	r0, [fp, #-36]	; 0xffffffdc
    a4f4:	mvn	r1, #0
    a4f8:	add	r0, r0, r1
    a4fc:	str	r0, [fp, #-36]	; 0xffffffdc
    a500:	b	a4c8 <coda_cursor_read_float_partial_array+0x440>
    a504:	b	a9d0 <coda_cursor_read_float_partial_array+0x948>
    a508:	ldr	r0, [fp, #-8]
    a50c:	ldr	r1, [fp, #-12]
    a510:	ldr	r2, [fp, #-16]
    a514:	ldr	r3, [fp, #-20]	; 0xffffffec
    a518:	bl	8144 <read_int16_partial_array>
    a51c:	cmp	r0, #0
    a520:	beq	a530 <coda_cursor_read_float_partial_array+0x4a8>
    a524:	mvn	r0, #0
    a528:	str	r0, [fp, #-4]
    a52c:	b	a9d8 <coda_cursor_read_float_partial_array+0x950>
    a530:	ldr	r0, [fp, #-16]
    a534:	sub	r0, r0, #1
    a538:	str	r0, [fp, #-36]	; 0xffffffdc
    a53c:	ldr	r0, [fp, #-36]	; 0xffffffdc
    a540:	cmp	r0, #0
    a544:	blt	a57c <coda_cursor_read_float_partial_array+0x4f4>
    a548:	ldr	r0, [fp, #-20]	; 0xffffffec
    a54c:	ldr	r1, [fp, #-36]	; 0xffffffdc
    a550:	add	r2, r0, r1, lsl #1
    a554:	ldrsh	r2, [r2]
    a558:	vmov	s0, r2
    a55c:	vcvt.f32.s32	s0, s0
    a560:	add	r0, r0, r1, lsl #2
    a564:	vstr	s0, [r0]
    a568:	ldr	r0, [fp, #-36]	; 0xffffffdc
    a56c:	mvn	r1, #0
    a570:	add	r0, r0, r1
    a574:	str	r0, [fp, #-36]	; 0xffffffdc
    a578:	b	a53c <coda_cursor_read_float_partial_array+0x4b4>
    a57c:	b	a9d0 <coda_cursor_read_float_partial_array+0x948>
    a580:	ldr	r0, [fp, #-8]
    a584:	ldr	r1, [fp, #-12]
    a588:	ldr	r2, [fp, #-16]
    a58c:	ldr	r3, [fp, #-20]	; 0xffffffec
    a590:	bl	8648 <read_uint16_partial_array>
    a594:	cmp	r0, #0
    a598:	beq	a5a8 <coda_cursor_read_float_partial_array+0x520>
    a59c:	mvn	r0, #0
    a5a0:	str	r0, [fp, #-4]
    a5a4:	b	a9d8 <coda_cursor_read_float_partial_array+0x950>
    a5a8:	ldr	r0, [fp, #-16]
    a5ac:	sub	r0, r0, #1
    a5b0:	str	r0, [fp, #-36]	; 0xffffffdc
    a5b4:	ldr	r0, [fp, #-36]	; 0xffffffdc
    a5b8:	cmp	r0, #0
    a5bc:	blt	a5f4 <coda_cursor_read_float_partial_array+0x56c>
    a5c0:	ldr	r0, [fp, #-20]	; 0xffffffec
    a5c4:	ldr	r1, [fp, #-36]	; 0xffffffdc
    a5c8:	add	r2, r0, r1, lsl #1
    a5cc:	ldrh	r2, [r2]
    a5d0:	vmov	s0, r2
    a5d4:	vcvt.f32.u32	s0, s0
    a5d8:	add	r0, r0, r1, lsl #2
    a5dc:	vstr	s0, [r0]
    a5e0:	ldr	r0, [fp, #-36]	; 0xffffffdc
    a5e4:	mvn	r1, #0
    a5e8:	add	r0, r0, r1
    a5ec:	str	r0, [fp, #-36]	; 0xffffffdc
    a5f0:	b	a5b4 <coda_cursor_read_float_partial_array+0x52c>
    a5f4:	b	a9d0 <coda_cursor_read_float_partial_array+0x948>
    a5f8:	ldr	r0, [fp, #-8]
    a5fc:	ldr	r1, [fp, #-12]
    a600:	ldr	r2, [fp, #-16]
    a604:	ldr	r3, [fp, #-20]	; 0xffffffec
    a608:	bl	8c84 <read_int32_partial_array>
    a60c:	cmp	r0, #0
    a610:	beq	a620 <coda_cursor_read_float_partial_array+0x598>
    a614:	mvn	r0, #0
    a618:	str	r0, [fp, #-4]
    a61c:	b	a9d8 <coda_cursor_read_float_partial_array+0x950>
    a620:	ldr	r0, [fp, #-16]
    a624:	sub	r0, r0, #1
    a628:	str	r0, [fp, #-36]	; 0xffffffdc
    a62c:	ldr	r0, [fp, #-36]	; 0xffffffdc
    a630:	cmp	r0, #0
    a634:	blt	a664 <coda_cursor_read_float_partial_array+0x5dc>
    a638:	ldr	r0, [fp, #-20]	; 0xffffffec
    a63c:	ldr	r1, [fp, #-36]	; 0xffffffdc
    a640:	ldr	r1, [r0, r1, lsl #2]!
    a644:	vmov	s0, r1
    a648:	vcvt.f32.s32	s0, s0
    a64c:	vstr	s0, [r0]
    a650:	ldr	r0, [fp, #-36]	; 0xffffffdc
    a654:	mvn	r1, #0
    a658:	add	r0, r0, r1
    a65c:	str	r0, [fp, #-36]	; 0xffffffdc
    a660:	b	a62c <coda_cursor_read_float_partial_array+0x5a4>
    a664:	b	a9d0 <coda_cursor_read_float_partial_array+0x948>
    a668:	ldr	r0, [fp, #-8]
    a66c:	ldr	r1, [fp, #-12]
    a670:	ldr	r2, [fp, #-16]
    a674:	ldr	r3, [fp, #-20]	; 0xffffffec
    a678:	bl	9208 <read_uint32_partial_array>
    a67c:	cmp	r0, #0
    a680:	beq	a690 <coda_cursor_read_float_partial_array+0x608>
    a684:	mvn	r0, #0
    a688:	str	r0, [fp, #-4]
    a68c:	b	a9d8 <coda_cursor_read_float_partial_array+0x950>
    a690:	ldr	r0, [fp, #-16]
    a694:	sub	r0, r0, #1
    a698:	str	r0, [fp, #-36]	; 0xffffffdc
    a69c:	ldr	r0, [fp, #-36]	; 0xffffffdc
    a6a0:	cmp	r0, #0
    a6a4:	blt	a6d4 <coda_cursor_read_float_partial_array+0x64c>
    a6a8:	ldr	r0, [fp, #-20]	; 0xffffffec
    a6ac:	ldr	r1, [fp, #-36]	; 0xffffffdc
    a6b0:	ldr	r1, [r0, r1, lsl #2]!
    a6b4:	vmov	s0, r1
    a6b8:	vcvt.f32.u32	s0, s0
    a6bc:	vstr	s0, [r0]
    a6c0:	ldr	r0, [fp, #-36]	; 0xffffffdc
    a6c4:	mvn	r1, #0
    a6c8:	add	r0, r0, r1
    a6cc:	str	r0, [fp, #-36]	; 0xffffffdc
    a6d0:	b	a69c <coda_cursor_read_float_partial_array+0x614>
    a6d4:	b	a9d0 <coda_cursor_read_float_partial_array+0x948>
    a6d8:	ldr	r0, [fp, #-16]
    a6dc:	lsl	r0, r0, #3
    a6e0:	bl	0 <malloc>
    a6e4:	str	r0, [fp, #-48]	; 0xffffffd0
    a6e8:	ldr	r0, [fp, #-48]	; 0xffffffd0
    a6ec:	movw	lr, #0
    a6f0:	cmp	r0, lr
    a6f4:	bne	a71c <coda_cursor_read_float_partial_array+0x694>
    a6f8:	ldr	r0, [fp, #-16]
    a6fc:	lsl	r2, r0, #3
    a700:	mvn	r0, #0
    a704:	movw	r1, #0
    a708:	movt	r1, #0
    a70c:	bl	0 <coda_set_error>
    a710:	mvn	r0, #0
    a714:	str	r0, [fp, #-4]
    a718:	b	a9d8 <coda_cursor_read_float_partial_array+0x950>
    a71c:	ldr	r0, [fp, #-8]
    a720:	ldr	r1, [fp, #-12]
    a724:	ldr	r2, [fp, #-16]
    a728:	ldr	r3, [fp, #-48]	; 0xffffffd0
    a72c:	bl	9954 <read_int64_partial_array>
    a730:	cmp	r0, #0
    a734:	beq	a74c <coda_cursor_read_float_partial_array+0x6c4>
    a738:	ldr	r0, [fp, #-48]	; 0xffffffd0
    a73c:	bl	0 <free>
    a740:	mvn	r0, #0
    a744:	str	r0, [fp, #-4]
    a748:	b	a9d8 <coda_cursor_read_float_partial_array+0x950>
    a74c:	ldr	r0, [fp, #-16]
    a750:	sub	r0, r0, #1
    a754:	str	r0, [fp, #-36]	; 0xffffffdc
    a758:	ldr	r0, [fp, #-36]	; 0xffffffdc
    a75c:	cmp	r0, #0
    a760:	blt	a7b4 <coda_cursor_read_float_partial_array+0x72c>
    a764:	ldr	r0, [fp, #-48]	; 0xffffffd0
    a768:	ldr	r1, [fp, #-36]	; 0xffffffdc
    a76c:	ldr	r2, [r0, r1, lsl #3]!
    a770:	ldr	r0, [r0, #4]
    a774:	str	r0, [sp, #24]
    a778:	mov	r0, r2
    a77c:	ldr	r2, [sp, #24]
    a780:	str	r1, [sp, #20]
    a784:	mov	r1, r2
    a788:	bl	0 <__aeabi_l2f>
    a78c:	vmov	s0, r0
    a790:	ldr	r0, [fp, #-20]	; 0xffffffec
    a794:	ldr	r1, [sp, #20]
    a798:	add	r0, r0, r1, lsl #2
    a79c:	vstr	s0, [r0]
    a7a0:	ldr	r0, [fp, #-36]	; 0xffffffdc
    a7a4:	mvn	r1, #0
    a7a8:	add	r0, r0, r1
    a7ac:	str	r0, [fp, #-36]	; 0xffffffdc
    a7b0:	b	a758 <coda_cursor_read_float_partial_array+0x6d0>
    a7b4:	ldr	r0, [fp, #-48]	; 0xffffffd0
    a7b8:	bl	0 <free>
    a7bc:	b	a9d0 <coda_cursor_read_float_partial_array+0x948>
    a7c0:	ldr	r0, [fp, #-16]
    a7c4:	lsl	r0, r0, #3
    a7c8:	bl	0 <malloc>
    a7cc:	str	r0, [sp, #52]	; 0x34
    a7d0:	ldr	r0, [sp, #52]	; 0x34
    a7d4:	movw	lr, #0
    a7d8:	cmp	r0, lr
    a7dc:	bne	a804 <coda_cursor_read_float_partial_array+0x77c>
    a7e0:	ldr	r0, [fp, #-16]
    a7e4:	lsl	r2, r0, #3
    a7e8:	mvn	r0, #0
    a7ec:	movw	r1, #0
    a7f0:	movt	r1, #0
    a7f4:	bl	0 <coda_set_error>
    a7f8:	mvn	r0, #0
    a7fc:	str	r0, [fp, #-4]
    a800:	b	a9d8 <coda_cursor_read_float_partial_array+0x950>
    a804:	ldr	r0, [fp, #-8]
    a808:	ldr	r1, [fp, #-12]
    a80c:	ldr	r2, [fp, #-16]
    a810:	ldr	r3, [sp, #52]	; 0x34
    a814:	bl	9f40 <read_uint64_partial_array>
    a818:	cmp	r0, #0
    a81c:	beq	a834 <coda_cursor_read_float_partial_array+0x7ac>
    a820:	ldr	r0, [sp, #52]	; 0x34
    a824:	bl	0 <free>
    a828:	mvn	r0, #0
    a82c:	str	r0, [fp, #-4]
    a830:	b	a9d8 <coda_cursor_read_float_partial_array+0x950>
    a834:	ldr	r0, [fp, #-16]
    a838:	sub	r0, r0, #1
    a83c:	str	r0, [fp, #-36]	; 0xffffffdc
    a840:	ldr	r0, [fp, #-36]	; 0xffffffdc
    a844:	cmp	r0, #0
    a848:	blt	a89c <coda_cursor_read_float_partial_array+0x814>
    a84c:	ldr	r0, [sp, #52]	; 0x34
    a850:	ldr	r1, [fp, #-36]	; 0xffffffdc
    a854:	ldr	r2, [r0, r1, lsl #3]!
    a858:	ldr	r0, [r0, #4]
    a85c:	str	r0, [sp, #16]
    a860:	mov	r0, r2
    a864:	ldr	r2, [sp, #16]
    a868:	str	r1, [sp, #12]
    a86c:	mov	r1, r2
    a870:	bl	0 <__aeabi_ul2f>
    a874:	vmov	s0, r0
    a878:	ldr	r0, [fp, #-20]	; 0xffffffec
    a87c:	ldr	r1, [sp, #12]
    a880:	add	r0, r0, r1, lsl #2
    a884:	vstr	s0, [r0]
    a888:	ldr	r0, [fp, #-36]	; 0xffffffdc
    a88c:	mvn	r1, #0
    a890:	add	r0, r0, r1
    a894:	str	r0, [fp, #-36]	; 0xffffffdc
    a898:	b	a840 <coda_cursor_read_float_partial_array+0x7b8>
    a89c:	ldr	r0, [sp, #52]	; 0x34
    a8a0:	bl	0 <free>
    a8a4:	b	a9d0 <coda_cursor_read_float_partial_array+0x948>
    a8a8:	ldr	r0, [fp, #-8]
    a8ac:	ldr	r1, [fp, #-12]
    a8b0:	ldr	r2, [fp, #-16]
    a8b4:	ldr	r3, [fp, #-20]	; 0xffffffec
    a8b8:	bl	b1f8 <read_float_partial_array>
    a8bc:	cmp	r0, #0
    a8c0:	beq	a8d0 <coda_cursor_read_float_partial_array+0x848>
    a8c4:	mvn	r0, #0
    a8c8:	str	r0, [fp, #-4]
    a8cc:	b	a9d8 <coda_cursor_read_float_partial_array+0x950>
    a8d0:	b	a9d0 <coda_cursor_read_float_partial_array+0x948>
    a8d4:	ldr	r0, [fp, #-16]
    a8d8:	lsl	r0, r0, #3
    a8dc:	bl	0 <malloc>
    a8e0:	str	r0, [sp, #48]	; 0x30
    a8e4:	ldr	r0, [sp, #48]	; 0x30
    a8e8:	movw	lr, #0
    a8ec:	cmp	r0, lr
    a8f0:	bne	a918 <coda_cursor_read_float_partial_array+0x890>
    a8f4:	ldr	r0, [fp, #-16]
    a8f8:	lsl	r2, r0, #3
    a8fc:	mvn	r0, #0
    a900:	movw	r1, #0
    a904:	movt	r1, #0
    a908:	bl	0 <coda_set_error>
    a90c:	mvn	r0, #0
    a910:	str	r0, [fp, #-4]
    a914:	b	a9d8 <coda_cursor_read_float_partial_array+0x950>
    a918:	ldr	r0, [fp, #-8]
    a91c:	ldr	r1, [fp, #-12]
    a920:	ldr	r2, [fp, #-16]
    a924:	ldr	r3, [sp, #48]	; 0x30
    a928:	bl	b3ac <read_double_partial_array>
    a92c:	cmp	r0, #0
    a930:	beq	a948 <coda_cursor_read_float_partial_array+0x8c0>
    a934:	ldr	r0, [sp, #48]	; 0x30
    a938:	bl	0 <free>
    a93c:	mvn	r0, #0
    a940:	str	r0, [fp, #-4]
    a944:	b	a9d8 <coda_cursor_read_float_partial_array+0x950>
    a948:	ldr	r0, [fp, #-16]
    a94c:	sub	r0, r0, #1
    a950:	str	r0, [fp, #-36]	; 0xffffffdc
    a954:	ldr	r0, [fp, #-36]	; 0xffffffdc
    a958:	cmp	r0, #0
    a95c:	blt	a994 <coda_cursor_read_float_partial_array+0x90c>
    a960:	ldr	r0, [sp, #48]	; 0x30
    a964:	ldr	r1, [fp, #-36]	; 0xffffffdc
    a968:	add	r0, r0, r1, lsl #3
    a96c:	vldr	d16, [r0]
    a970:	vcvt.f32.f64	s0, d16
    a974:	ldr	r0, [fp, #-20]	; 0xffffffec
    a978:	add	r0, r0, r1, lsl #2
    a97c:	vstr	s0, [r0]
    a980:	ldr	r0, [fp, #-36]	; 0xffffffdc
    a984:	mvn	r1, #0
    a988:	add	r0, r0, r1
    a98c:	str	r0, [fp, #-36]	; 0xffffffdc
    a990:	b	a954 <coda_cursor_read_float_partial_array+0x8cc>
    a994:	ldr	r0, [sp, #48]	; 0x30
    a998:	bl	0 <free>
    a99c:	b	a9d0 <coda_cursor_read_float_partial_array+0x948>
    a9a0:	ldr	r0, [fp, #-24]	; 0xffffffe8
    a9a4:	bl	0 <coda_type_get_native_type_name>
    a9a8:	mvn	lr, #104	; 0x68
    a9ac:	str	r0, [sp, #8]
    a9b0:	mov	r0, lr
    a9b4:	movw	r1, #0
    a9b8:	movt	r1, #0
    a9bc:	ldr	r2, [sp, #8]
    a9c0:	bl	0 <coda_set_error>
    a9c4:	mvn	r0, #0
    a9c8:	str	r0, [fp, #-4]
    a9cc:	b	a9d8 <coda_cursor_read_float_partial_array+0x950>
    a9d0:	movw	r0, #0
    a9d4:	str	r0, [fp, #-4]
    a9d8:	ldr	r0, [fp, #-4]
    a9dc:	mov	sp, fp
    a9e0:	pop	{fp, pc}
    a9e4:	.word	0x000007e0

0000a9e8 <coda_cursor_read_double_partial_array>:
    a9e8:	push	{fp, lr}
    a9ec:	mov	fp, sp
    a9f0:	sub	sp, sp, #80	; 0x50
    a9f4:	str	r0, [fp, #-8]
    a9f8:	str	r1, [fp, #-12]
    a9fc:	str	r2, [fp, #-16]
    aa00:	str	r3, [fp, #-20]	; 0xffffffec
    aa04:	ldr	r0, [fp, #-8]
    aa08:	movw	r1, #0
    aa0c:	cmp	r0, r1
    aa10:	beq	aa48 <coda_cursor_read_double_partial_array+0x60>
    aa14:	ldr	r0, [fp, #-8]
    aa18:	ldr	r0, [r0, #4]
    aa1c:	cmp	r0, #0
    aa20:	ble	aa48 <coda_cursor_read_double_partial_array+0x60>
    aa24:	ldr	r0, [fp, #-8]
    aa28:	add	r1, r0, #8
    aa2c:	ldr	r0, [r0, #4]
    aa30:	sub	r0, r0, #1
    aa34:	add	r0, r1, r0, lsl #4
    aa38:	ldr	r0, [r0]
    aa3c:	movw	r1, #0
    aa40:	cmp	r0, r1
    aa44:	bne	aa70 <coda_cursor_read_double_partial_array+0x88>
    aa48:	mvn	r0, #99	; 0x63
    aa4c:	movw	r1, #0
    aa50:	movt	r1, #0
    aa54:	movw	r2, #0
    aa58:	movt	r2, #0
    aa5c:	movw	r3, #5355	; 0x14eb
    aa60:	bl	0 <coda_set_error>
    aa64:	mvn	r0, #0
    aa68:	str	r0, [fp, #-4]
    aa6c:	b	b1e8 <coda_cursor_read_double_partial_array+0x800>
    aa70:	ldr	r0, [fp, #-20]	; 0xffffffec
    aa74:	movw	r1, #0
    aa78:	cmp	r0, r1
    aa7c:	bne	aaa8 <coda_cursor_read_double_partial_array+0xc0>
    aa80:	mvn	r0, #99	; 0x63
    aa84:	movw	r1, #0
    aa88:	movt	r1, #0
    aa8c:	movw	r2, #0
    aa90:	movt	r2, #0
    aa94:	movw	r3, #5360	; 0x14f0
    aa98:	bl	0 <coda_set_error>
    aa9c:	mvn	r0, #0
    aaa0:	str	r0, [fp, #-4]
    aaa4:	b	b1e8 <coda_cursor_read_double_partial_array+0x800>
    aaa8:	ldr	r0, [fp, #-8]
    aaac:	add	r1, r0, #8
    aab0:	ldr	r0, [r0, #4]
    aab4:	sub	r0, r0, #1
    aab8:	add	r0, r1, r0, lsl #4
    aabc:	ldr	r0, [r0]
    aac0:	ldr	r0, [r0]
    aac4:	cmp	r0, #100	; 0x64
    aac8:	bcs	aaec <coda_cursor_read_double_partial_array+0x104>
    aacc:	ldr	r0, [fp, #-8]
    aad0:	add	r1, r0, #8
    aad4:	ldr	r0, [r0, #4]
    aad8:	sub	r0, r0, #1
    aadc:	add	r0, r1, r0, lsl #4
    aae0:	ldr	r0, [r0]
    aae4:	str	r0, [sp, #36]	; 0x24
    aae8:	b	ab0c <coda_cursor_read_double_partial_array+0x124>
    aaec:	ldr	r0, [fp, #-8]
    aaf0:	add	r1, r0, #8
    aaf4:	ldr	r0, [r0, #4]
    aaf8:	sub	r0, r0, #1
    aafc:	add	r0, r1, r0, lsl #4
    ab00:	ldr	r0, [r0]
    ab04:	ldr	r0, [r0, #4]
    ab08:	str	r0, [sp, #36]	; 0x24
    ab0c:	ldr	r0, [sp, #36]	; 0x24
    ab10:	str	r0, [fp, #-32]	; 0xffffffe0
    ab14:	ldr	r0, [fp, #-32]	; 0xffffffe0
    ab18:	ldr	r0, [r0, #8]
    ab1c:	cmp	r0, #1
    ab20:	beq	ab58 <coda_cursor_read_double_partial_array+0x170>
    ab24:	ldr	r0, [fp, #-32]	; 0xffffffe0
    ab28:	ldr	r0, [r0, #8]
    ab2c:	bl	0 <coda_type_get_class_name>
    ab30:	mvn	lr, #104	; 0x68
    ab34:	str	r0, [sp, #32]
    ab38:	mov	r0, lr
    ab3c:	movw	r1, #0
    ab40:	movt	r1, #0
    ab44:	ldr	r2, [sp, #32]
    ab48:	bl	0 <coda_set_error>
    ab4c:	mvn	r0, #0
    ab50:	str	r0, [fp, #-4]
    ab54:	b	b1e8 <coda_cursor_read_double_partial_array+0x800>
    ab58:	ldr	r0, [pc, #1684]	; b1f4 <coda_cursor_read_double_partial_array+0x80c>
    ab5c:	ldr	r0, [pc, r0]
    ab60:	str	r0, [sp, #28]
    ab64:	bl	0 <__aeabi_read_tp>
    ab68:	ldr	ip, [sp, #28]
    ab6c:	ldr	r0, [r0, ip]
    ab70:	cmp	r0, #0
    ab74:	beq	ac2c <coda_cursor_read_double_partial_array+0x244>
    ab78:	ldr	r0, [fp, #-8]
    ab7c:	add	r1, sp, #40	; 0x28
    ab80:	bl	0 <coda_cursor_get_num_elements>
    ab84:	cmp	r0, #0
    ab88:	beq	ab98 <coda_cursor_read_double_partial_array+0x1b0>
    ab8c:	mvn	r0, #0
    ab90:	str	r0, [fp, #-4]
    ab94:	b	b1e8 <coda_cursor_read_double_partial_array+0x800>
    ab98:	ldr	r0, [fp, #-12]
    ab9c:	cmp	r0, #0
    aba0:	blt	abb4 <coda_cursor_read_double_partial_array+0x1cc>
    aba4:	ldr	r0, [fp, #-12]
    aba8:	ldr	r1, [sp, #40]	; 0x28
    abac:	cmp	r0, r1
    abb0:	blt	abd8 <coda_cursor_read_double_partial_array+0x1f0>
    abb4:	ldr	r2, [fp, #-12]
    abb8:	ldr	r3, [sp, #40]	; 0x28
    abbc:	mvn	r0, #106	; 0x6a
    abc0:	movw	r1, #0
    abc4:	movt	r1, #0
    abc8:	bl	0 <coda_set_error>
    abcc:	mvn	r0, #0
    abd0:	str	r0, [fp, #-4]
    abd4:	b	b1e8 <coda_cursor_read_double_partial_array+0x800>
    abd8:	ldr	r0, [fp, #-12]
    abdc:	ldr	r1, [fp, #-16]
    abe0:	add	r0, r0, r1
    abe4:	ldr	r1, [sp, #40]	; 0x28
    abe8:	cmp	r0, r1
    abec:	ble	ac28 <coda_cursor_read_double_partial_array+0x240>
    abf0:	ldr	r2, [fp, #-12]
    abf4:	ldr	r3, [fp, #-16]
    abf8:	ldr	r0, [sp, #40]	; 0x28
    abfc:	mvn	r1, #106	; 0x6a
    ac00:	str	r0, [sp, #24]
    ac04:	mov	r0, r1
    ac08:	movw	r1, #0
    ac0c:	movt	r1, #0
    ac10:	ldr	ip, [sp, #24]
    ac14:	str	ip, [sp]
    ac18:	bl	0 <coda_set_error>
    ac1c:	mvn	r0, #0
    ac20:	str	r0, [fp, #-4]
    ac24:	b	b1e8 <coda_cursor_read_double_partial_array+0x800>
    ac28:	b	ac2c <coda_cursor_read_double_partial_array+0x244>
    ac2c:	ldr	r0, [fp, #-32]	; 0xffffffe0
    ac30:	sub	r1, fp, #24
    ac34:	sub	r2, fp, #28
    ac38:	bl	638c <get_array_element_unconverted_read_type>
    ac3c:	cmp	r0, #0
    ac40:	beq	ac50 <coda_cursor_read_double_partial_array+0x268>
    ac44:	mvn	r0, #0
    ac48:	str	r0, [fp, #-4]
    ac4c:	b	b1e8 <coda_cursor_read_double_partial_array+0x800>
    ac50:	ldr	r0, [fp, #-24]	; 0xffffffe8
    ac54:	cmp	r0, #9
    ac58:	str	r0, [sp, #20]
    ac5c:	bhi	b104 <coda_cursor_read_double_partial_array+0x71c>
    ac60:	add	r0, pc, #8
    ac64:	ldr	r1, [sp, #20]
    ac68:	ldr	r0, [r0, r1, lsl #2]
    ac6c:	mov	pc, r0
    ac70:	.word	0x0000ac98
    ac74:	.word	0x0000ad10
    ac78:	.word	0x0000ad84
    ac7c:	.word	0x0000adfc
    ac80:	.word	0x0000ae74
    ac84:	.word	0x0000aee8
    ac88:	.word	0x0000af5c
    ac8c:	.word	0x0000afe0
    ac90:	.word	0x0000b064
    ac94:	.word	0x0000b0d8
    ac98:	ldr	r0, [fp, #-8]
    ac9c:	ldr	r1, [fp, #-12]
    aca0:	ldr	r2, [fp, #-16]
    aca4:	ldr	r3, [fp, #-20]	; 0xffffffec
    aca8:	bl	7764 <read_int8_partial_array>
    acac:	cmp	r0, #0
    acb0:	beq	acc0 <coda_cursor_read_double_partial_array+0x2d8>
    acb4:	mvn	r0, #0
    acb8:	str	r0, [fp, #-4]
    acbc:	b	b1e8 <coda_cursor_read_double_partial_array+0x800>
    acc0:	ldr	r0, [fp, #-16]
    acc4:	sub	r0, r0, #1
    acc8:	str	r0, [fp, #-36]	; 0xffffffdc
    accc:	ldr	r0, [fp, #-36]	; 0xffffffdc
    acd0:	cmp	r0, #0
    acd4:	blt	ad0c <coda_cursor_read_double_partial_array+0x324>
    acd8:	ldr	r0, [fp, #-20]	; 0xffffffec
    acdc:	ldr	r1, [fp, #-36]	; 0xffffffdc
    ace0:	add	r2, r0, r1
    ace4:	ldrsb	r2, [r2]
    ace8:	vmov	s0, r2
    acec:	vcvt.f64.s32	d16, s0
    acf0:	add	r0, r0, r1, lsl #3
    acf4:	vstr	d16, [r0]
    acf8:	ldr	r0, [fp, #-36]	; 0xffffffdc
    acfc:	mvn	r1, #0
    ad00:	add	r0, r0, r1
    ad04:	str	r0, [fp, #-36]	; 0xffffffdc
    ad08:	b	accc <coda_cursor_read_double_partial_array+0x2e4>
    ad0c:	b	b134 <coda_cursor_read_double_partial_array+0x74c>
    ad10:	ldr	r0, [fp, #-8]
    ad14:	ldr	r1, [fp, #-12]
    ad18:	ldr	r2, [fp, #-16]
    ad1c:	ldr	r3, [fp, #-20]	; 0xffffffec
    ad20:	bl	7be8 <read_uint8_partial_array>
    ad24:	cmp	r0, #0
    ad28:	beq	ad38 <coda_cursor_read_double_partial_array+0x350>
    ad2c:	mvn	r0, #0
    ad30:	str	r0, [fp, #-4]
    ad34:	b	b1e8 <coda_cursor_read_double_partial_array+0x800>
    ad38:	ldr	r0, [fp, #-16]
    ad3c:	sub	r0, r0, #1
    ad40:	str	r0, [fp, #-36]	; 0xffffffdc
    ad44:	ldr	r0, [fp, #-36]	; 0xffffffdc
    ad48:	cmp	r0, #0
    ad4c:	blt	ad80 <coda_cursor_read_double_partial_array+0x398>
    ad50:	ldr	r0, [fp, #-20]	; 0xffffffec
    ad54:	ldr	r1, [fp, #-36]	; 0xffffffdc
    ad58:	ldrb	r2, [r0, r1]
    ad5c:	vmov	s0, r2
    ad60:	vcvt.f64.u32	d16, s0
    ad64:	add	r0, r0, r1, lsl #3
    ad68:	vstr	d16, [r0]
    ad6c:	ldr	r0, [fp, #-36]	; 0xffffffdc
    ad70:	mvn	r1, #0
    ad74:	add	r0, r0, r1
    ad78:	str	r0, [fp, #-36]	; 0xffffffdc
    ad7c:	b	ad44 <coda_cursor_read_double_partial_array+0x35c>
    ad80:	b	b134 <coda_cursor_read_double_partial_array+0x74c>
    ad84:	ldr	r0, [fp, #-8]
    ad88:	ldr	r1, [fp, #-12]
    ad8c:	ldr	r2, [fp, #-16]
    ad90:	ldr	r3, [fp, #-20]	; 0xffffffec
    ad94:	bl	8144 <read_int16_partial_array>
    ad98:	cmp	r0, #0
    ad9c:	beq	adac <coda_cursor_read_double_partial_array+0x3c4>
    ada0:	mvn	r0, #0
    ada4:	str	r0, [fp, #-4]
    ada8:	b	b1e8 <coda_cursor_read_double_partial_array+0x800>
    adac:	ldr	r0, [fp, #-16]
    adb0:	sub	r0, r0, #1
    adb4:	str	r0, [fp, #-36]	; 0xffffffdc
    adb8:	ldr	r0, [fp, #-36]	; 0xffffffdc
    adbc:	cmp	r0, #0
    adc0:	blt	adf8 <coda_cursor_read_double_partial_array+0x410>
    adc4:	ldr	r0, [fp, #-20]	; 0xffffffec
    adc8:	ldr	r1, [fp, #-36]	; 0xffffffdc
    adcc:	add	r2, r0, r1, lsl #1
    add0:	ldrsh	r2, [r2]
    add4:	vmov	s0, r2
    add8:	vcvt.f64.s32	d16, s0
    addc:	add	r0, r0, r1, lsl #3
    ade0:	vstr	d16, [r0]
    ade4:	ldr	r0, [fp, #-36]	; 0xffffffdc
    ade8:	mvn	r1, #0
    adec:	add	r0, r0, r1
    adf0:	str	r0, [fp, #-36]	; 0xffffffdc
    adf4:	b	adb8 <coda_cursor_read_double_partial_array+0x3d0>
    adf8:	b	b134 <coda_cursor_read_double_partial_array+0x74c>
    adfc:	ldr	r0, [fp, #-8]
    ae00:	ldr	r1, [fp, #-12]
    ae04:	ldr	r2, [fp, #-16]
    ae08:	ldr	r3, [fp, #-20]	; 0xffffffec
    ae0c:	bl	8648 <read_uint16_partial_array>
    ae10:	cmp	r0, #0
    ae14:	beq	ae24 <coda_cursor_read_double_partial_array+0x43c>
    ae18:	mvn	r0, #0
    ae1c:	str	r0, [fp, #-4]
    ae20:	b	b1e8 <coda_cursor_read_double_partial_array+0x800>
    ae24:	ldr	r0, [fp, #-16]
    ae28:	sub	r0, r0, #1
    ae2c:	str	r0, [fp, #-36]	; 0xffffffdc
    ae30:	ldr	r0, [fp, #-36]	; 0xffffffdc
    ae34:	cmp	r0, #0
    ae38:	blt	ae70 <coda_cursor_read_double_partial_array+0x488>
    ae3c:	ldr	r0, [fp, #-20]	; 0xffffffec
    ae40:	ldr	r1, [fp, #-36]	; 0xffffffdc
    ae44:	add	r2, r0, r1, lsl #1
    ae48:	ldrh	r2, [r2]
    ae4c:	vmov	s0, r2
    ae50:	vcvt.f64.u32	d16, s0
    ae54:	add	r0, r0, r1, lsl #3
    ae58:	vstr	d16, [r0]
    ae5c:	ldr	r0, [fp, #-36]	; 0xffffffdc
    ae60:	mvn	r1, #0
    ae64:	add	r0, r0, r1
    ae68:	str	r0, [fp, #-36]	; 0xffffffdc
    ae6c:	b	ae30 <coda_cursor_read_double_partial_array+0x448>
    ae70:	b	b134 <coda_cursor_read_double_partial_array+0x74c>
    ae74:	ldr	r0, [fp, #-8]
    ae78:	ldr	r1, [fp, #-12]
    ae7c:	ldr	r2, [fp, #-16]
    ae80:	ldr	r3, [fp, #-20]	; 0xffffffec
    ae84:	bl	8c84 <read_int32_partial_array>
    ae88:	cmp	r0, #0
    ae8c:	beq	ae9c <coda_cursor_read_double_partial_array+0x4b4>
    ae90:	mvn	r0, #0
    ae94:	str	r0, [fp, #-4]
    ae98:	b	b1e8 <coda_cursor_read_double_partial_array+0x800>
    ae9c:	ldr	r0, [fp, #-16]
    aea0:	sub	r0, r0, #1
    aea4:	str	r0, [fp, #-36]	; 0xffffffdc
    aea8:	ldr	r0, [fp, #-36]	; 0xffffffdc
    aeac:	cmp	r0, #0
    aeb0:	blt	aee4 <coda_cursor_read_double_partial_array+0x4fc>
    aeb4:	ldr	r0, [fp, #-20]	; 0xffffffec
    aeb8:	ldr	r1, [fp, #-36]	; 0xffffffdc
    aebc:	add	r2, r0, r1, lsl #2
    aec0:	vldr	s0, [r2]
    aec4:	vcvt.f64.s32	d16, s0
    aec8:	add	r0, r0, r1, lsl #3
    aecc:	vstr	d16, [r0]
    aed0:	ldr	r0, [fp, #-36]	; 0xffffffdc
    aed4:	mvn	r1, #0
    aed8:	add	r0, r0, r1
    aedc:	str	r0, [fp, #-36]	; 0xffffffdc
    aee0:	b	aea8 <coda_cursor_read_double_partial_array+0x4c0>
    aee4:	b	b134 <coda_cursor_read_double_partial_array+0x74c>
    aee8:	ldr	r0, [fp, #-8]
    aeec:	ldr	r1, [fp, #-12]
    aef0:	ldr	r2, [fp, #-16]
    aef4:	ldr	r3, [fp, #-20]	; 0xffffffec
    aef8:	bl	9208 <read_uint32_partial_array>
    aefc:	cmp	r0, #0
    af00:	beq	af10 <coda_cursor_read_double_partial_array+0x528>
    af04:	mvn	r0, #0
    af08:	str	r0, [fp, #-4]
    af0c:	b	b1e8 <coda_cursor_read_double_partial_array+0x800>
    af10:	ldr	r0, [fp, #-16]
    af14:	sub	r0, r0, #1
    af18:	str	r0, [fp, #-36]	; 0xffffffdc
    af1c:	ldr	r0, [fp, #-36]	; 0xffffffdc
    af20:	cmp	r0, #0
    af24:	blt	af58 <coda_cursor_read_double_partial_array+0x570>
    af28:	ldr	r0, [fp, #-20]	; 0xffffffec
    af2c:	ldr	r1, [fp, #-36]	; 0xffffffdc
    af30:	add	r2, r0, r1, lsl #2
    af34:	vldr	s0, [r2]
    af38:	vcvt.f64.u32	d16, s0
    af3c:	add	r0, r0, r1, lsl #3
    af40:	vstr	d16, [r0]
    af44:	ldr	r0, [fp, #-36]	; 0xffffffdc
    af48:	mvn	r1, #0
    af4c:	add	r0, r0, r1
    af50:	str	r0, [fp, #-36]	; 0xffffffdc
    af54:	b	af1c <coda_cursor_read_double_partial_array+0x534>
    af58:	b	b134 <coda_cursor_read_double_partial_array+0x74c>
    af5c:	ldr	r0, [fp, #-8]
    af60:	ldr	r1, [fp, #-12]
    af64:	ldr	r2, [fp, #-16]
    af68:	ldr	r3, [fp, #-20]	; 0xffffffec
    af6c:	bl	9954 <read_int64_partial_array>
    af70:	cmp	r0, #0
    af74:	beq	af84 <coda_cursor_read_double_partial_array+0x59c>
    af78:	mvn	r0, #0
    af7c:	str	r0, [fp, #-4]
    af80:	b	b1e8 <coda_cursor_read_double_partial_array+0x800>
    af84:	ldr	r0, [fp, #-16]
    af88:	sub	r0, r0, #1
    af8c:	str	r0, [fp, #-36]	; 0xffffffdc
    af90:	ldr	r0, [fp, #-36]	; 0xffffffdc
    af94:	cmp	r0, #0
    af98:	blt	afdc <coda_cursor_read_double_partial_array+0x5f4>
    af9c:	ldr	r0, [fp, #-20]	; 0xffffffec
    afa0:	ldr	r1, [fp, #-36]	; 0xffffffdc
    afa4:	ldr	r1, [r0, r1, lsl #3]!
    afa8:	ldr	r2, [r0, #4]
    afac:	str	r0, [sp, #16]
    afb0:	mov	r0, r1
    afb4:	mov	r1, r2
    afb8:	bl	0 <__aeabi_l2d>
    afbc:	vmov	d16, r0, r1
    afc0:	ldr	r0, [sp, #16]
    afc4:	vstr	d16, [r0]
    afc8:	ldr	r0, [fp, #-36]	; 0xffffffdc
    afcc:	mvn	r1, #0
    afd0:	add	r0, r0, r1
    afd4:	str	r0, [fp, #-36]	; 0xffffffdc
    afd8:	b	af90 <coda_cursor_read_double_partial_array+0x5a8>
    afdc:	b	b134 <coda_cursor_read_double_partial_array+0x74c>
    afe0:	ldr	r0, [fp, #-8]
    afe4:	ldr	r1, [fp, #-12]
    afe8:	ldr	r2, [fp, #-16]
    afec:	ldr	r3, [fp, #-20]	; 0xffffffec
    aff0:	bl	9f40 <read_uint64_partial_array>
    aff4:	cmp	r0, #0
    aff8:	beq	b008 <coda_cursor_read_double_partial_array+0x620>
    affc:	mvn	r0, #0
    b000:	str	r0, [fp, #-4]
    b004:	b	b1e8 <coda_cursor_read_double_partial_array+0x800>
    b008:	ldr	r0, [fp, #-16]
    b00c:	sub	r0, r0, #1
    b010:	str	r0, [fp, #-36]	; 0xffffffdc
    b014:	ldr	r0, [fp, #-36]	; 0xffffffdc
    b018:	cmp	r0, #0
    b01c:	blt	b060 <coda_cursor_read_double_partial_array+0x678>
    b020:	ldr	r0, [fp, #-20]	; 0xffffffec
    b024:	ldr	r1, [fp, #-36]	; 0xffffffdc
    b028:	ldr	r1, [r0, r1, lsl #3]!
    b02c:	ldr	r2, [r0, #4]
    b030:	str	r0, [sp, #12]
    b034:	mov	r0, r1
    b038:	mov	r1, r2
    b03c:	bl	0 <__aeabi_ul2d>
    b040:	vmov	d16, r0, r1
    b044:	ldr	r0, [sp, #12]
    b048:	vstr	d16, [r0]
    b04c:	ldr	r0, [fp, #-36]	; 0xffffffdc
    b050:	mvn	r1, #0
    b054:	add	r0, r0, r1
    b058:	str	r0, [fp, #-36]	; 0xffffffdc
    b05c:	b	b014 <coda_cursor_read_double_partial_array+0x62c>
    b060:	b	b134 <coda_cursor_read_double_partial_array+0x74c>
    b064:	ldr	r0, [fp, #-8]
    b068:	ldr	r1, [fp, #-12]
    b06c:	ldr	r2, [fp, #-16]
    b070:	ldr	r3, [fp, #-20]	; 0xffffffec
    b074:	bl	b1f8 <read_float_partial_array>
    b078:	cmp	r0, #0
    b07c:	beq	b08c <coda_cursor_read_double_partial_array+0x6a4>
    b080:	mvn	r0, #0
    b084:	str	r0, [fp, #-4]
    b088:	b	b1e8 <coda_cursor_read_double_partial_array+0x800>
    b08c:	ldr	r0, [fp, #-16]
    b090:	sub	r0, r0, #1
    b094:	str	r0, [fp, #-36]	; 0xffffffdc
    b098:	ldr	r0, [fp, #-36]	; 0xffffffdc
    b09c:	cmp	r0, #0
    b0a0:	blt	b0d4 <coda_cursor_read_double_partial_array+0x6ec>
    b0a4:	ldr	r0, [fp, #-20]	; 0xffffffec
    b0a8:	ldr	r1, [fp, #-36]	; 0xffffffdc
    b0ac:	add	r2, r0, r1, lsl #2
    b0b0:	vldr	s0, [r2]
    b0b4:	vcvt.f64.f32	d16, s0
    b0b8:	add	r0, r0, r1, lsl #3
    b0bc:	vstr	d16, [r0]
    b0c0:	ldr	r0, [fp, #-36]	; 0xffffffdc
    b0c4:	mvn	r1, #0
    b0c8:	add	r0, r0, r1
    b0cc:	str	r0, [fp, #-36]	; 0xffffffdc
    b0d0:	b	b098 <coda_cursor_read_double_partial_array+0x6b0>
    b0d4:	b	b134 <coda_cursor_read_double_partial_array+0x74c>
    b0d8:	ldr	r0, [fp, #-8]
    b0dc:	ldr	r1, [fp, #-12]
    b0e0:	ldr	r2, [fp, #-16]
    b0e4:	ldr	r3, [fp, #-20]	; 0xffffffec
    b0e8:	bl	b3ac <read_double_partial_array>
    b0ec:	cmp	r0, #0
    b0f0:	beq	b100 <coda_cursor_read_double_partial_array+0x718>
    b0f4:	mvn	r0, #0
    b0f8:	str	r0, [fp, #-4]
    b0fc:	b	b1e8 <coda_cursor_read_double_partial_array+0x800>
    b100:	b	b134 <coda_cursor_read_double_partial_array+0x74c>
    b104:	ldr	r0, [fp, #-24]	; 0xffffffe8
    b108:	bl	0 <coda_type_get_native_type_name>
    b10c:	mvn	lr, #104	; 0x68
    b110:	str	r0, [sp, #8]
    b114:	mov	r0, lr
    b118:	movw	r1, #0
    b11c:	movt	r1, #0
    b120:	ldr	r2, [sp, #8]
    b124:	bl	0 <coda_set_error>
    b128:	mvn	r0, #0
    b12c:	str	r0, [fp, #-4]
    b130:	b	b1e8 <coda_cursor_read_double_partial_array+0x800>
    b134:	ldr	r0, [fp, #-28]	; 0xffffffe4
    b138:	movw	r1, #0
    b13c:	cmp	r0, r1
    b140:	beq	b1e0 <coda_cursor_read_double_partial_array+0x7f8>
    b144:	movw	r0, #0
    b148:	str	r0, [fp, #-36]	; 0xffffffdc
    b14c:	ldr	r0, [fp, #-36]	; 0xffffffdc
    b150:	ldr	r1, [fp, #-16]
    b154:	cmp	r0, r1
    b158:	bge	b1dc <coda_cursor_read_double_partial_array+0x7f4>
    b15c:	ldr	r0, [fp, #-20]	; 0xffffffec
    b160:	ldr	r1, [fp, #-36]	; 0xffffffdc
    b164:	add	r0, r0, r1, lsl #3
    b168:	vldr	d16, [r0]
    b16c:	ldr	r0, [fp, #-28]	; 0xffffffe4
    b170:	vldr	d17, [r0, #24]
    b174:	vcmp.f64	d16, d17
    b178:	vmrs	APSR_nzcv, fpscr
    b17c:	bne	b198 <coda_cursor_read_double_partial_array+0x7b0>
    b180:	bl	0 <coda_NaN>
    b184:	ldr	lr, [fp, #-20]	; 0xffffffec
    b188:	ldr	r0, [fp, #-36]	; 0xffffffdc
    b18c:	add	r0, lr, r0, lsl #3
    b190:	vstr	d0, [r0]
    b194:	b	b1c8 <coda_cursor_read_double_partial_array+0x7e0>
    b198:	ldr	r0, [fp, #-20]	; 0xffffffec
    b19c:	ldr	r1, [fp, #-36]	; 0xffffffdc
    b1a0:	add	r0, r0, r1, lsl #3
    b1a4:	vldr	d16, [r0]
    b1a8:	ldr	r1, [fp, #-28]	; 0xffffffe4
    b1ac:	vldr	d17, [r1]
    b1b0:	vldr	d18, [r1, #8]
    b1b4:	vldr	d19, [r1, #16]
    b1b8:	vmul.f64	d16, d16, d17
    b1bc:	vdiv.f64	d16, d16, d18
    b1c0:	vadd.f64	d16, d16, d19
    b1c4:	vstr	d16, [r0]
    b1c8:	b	b1cc <coda_cursor_read_double_partial_array+0x7e4>
    b1cc:	ldr	r0, [fp, #-36]	; 0xffffffdc
    b1d0:	add	r0, r0, #1
    b1d4:	str	r0, [fp, #-36]	; 0xffffffdc
    b1d8:	b	b14c <coda_cursor_read_double_partial_array+0x764>
    b1dc:	b	b1e0 <coda_cursor_read_double_partial_array+0x7f8>
    b1e0:	movw	r0, #0
    b1e4:	str	r0, [fp, #-4]
    b1e8:	ldr	r0, [fp, #-4]
    b1ec:	mov	sp, fp
    b1f0:	pop	{fp, pc}
    b1f4:	.word	0x00000690

0000b1f8 <read_float_partial_array>:
    b1f8:	push	{fp, lr}
    b1fc:	mov	fp, sp
    b200:	sub	sp, sp, #24
    b204:	str	r0, [fp, #-8]
    b208:	str	r1, [sp, #12]
    b20c:	str	r2, [sp, #8]
    b210:	str	r3, [sp, #4]
    b214:	ldr	r0, [fp, #-8]
    b218:	ldr	r1, [r0, #4]
    b21c:	add	r0, r0, r1, lsl #4
    b220:	ldr	r0, [r0, #-8]
    b224:	ldr	r0, [r0]
    b228:	cmp	r0, #0
    b22c:	str	r0, [sp]
    b230:	beq	b2a8 <read_float_partial_array+0xb0>
    b234:	b	b238 <read_float_partial_array+0x40>
    b238:	ldr	r0, [sp]
    b23c:	cmp	r0, #1
    b240:	beq	b2c4 <read_float_partial_array+0xcc>
    b244:	b	b248 <read_float_partial_array+0x50>
    b248:	ldr	r0, [sp]
    b24c:	cmp	r0, #100	; 0x64
    b250:	beq	b2e0 <read_float_partial_array+0xe8>
    b254:	b	b258 <read_float_partial_array+0x60>
    b258:	ldr	r0, [sp]
    b25c:	cmp	r0, #101	; 0x65
    b260:	beq	b2fc <read_float_partial_array+0x104>
    b264:	b	b268 <read_float_partial_array+0x70>
    b268:	ldr	r0, [sp]
    b26c:	cmp	r0, #102	; 0x66
    b270:	beq	b314 <read_float_partial_array+0x11c>
    b274:	b	b278 <read_float_partial_array+0x80>
    b278:	ldr	r0, [sp]
    b27c:	cmp	r0, #103	; 0x67
    b280:	beq	b32c <read_float_partial_array+0x134>
    b284:	b	b288 <read_float_partial_array+0x90>
    b288:	ldr	r0, [sp]
    b28c:	cmp	r0, #104	; 0x68
    b290:	beq	b348 <read_float_partial_array+0x150>
    b294:	b	b298 <read_float_partial_array+0xa0>
    b298:	ldr	r0, [sp]
    b29c:	cmp	r0, #105	; 0x69
    b2a0:	beq	b364 <read_float_partial_array+0x16c>
    b2a4:	b	b380 <read_float_partial_array+0x188>
    b2a8:	ldr	r0, [fp, #-8]
    b2ac:	ldr	r1, [sp, #12]
    b2b0:	ldr	r2, [sp, #8]
    b2b4:	ldr	r3, [sp, #4]
    b2b8:	bl	0 <coda_ascii_cursor_read_float_partial_array>
    b2bc:	str	r0, [fp, #-4]
    b2c0:	b	b3a0 <read_float_partial_array+0x1a8>
    b2c4:	ldr	r0, [fp, #-8]
    b2c8:	ldr	r1, [sp, #12]
    b2cc:	ldr	r2, [sp, #8]
    b2d0:	ldr	r3, [sp, #4]
    b2d4:	bl	0 <coda_bin_cursor_read_float_partial_array>
    b2d8:	str	r0, [fp, #-4]
    b2dc:	b	b3a0 <read_float_partial_array+0x1a8>
    b2e0:	ldr	r0, [fp, #-8]
    b2e4:	ldr	r1, [sp, #12]
    b2e8:	ldr	r2, [sp, #8]
    b2ec:	ldr	r3, [sp, #4]
    b2f0:	bl	0 <coda_mem_cursor_read_float_partial_array>
    b2f4:	str	r0, [fp, #-4]
    b2f8:	b	b3a0 <read_float_partial_array+0x1a8>
    b2fc:	mvn	r0, #10
    b300:	movw	r1, #0
    b304:	bl	0 <coda_set_error>
    b308:	mvn	r0, #0
    b30c:	str	r0, [fp, #-4]
    b310:	b	b3a0 <read_float_partial_array+0x1a8>
    b314:	mvn	r0, #12
    b318:	movw	r1, #0
    b31c:	bl	0 <coda_set_error>
    b320:	mvn	r0, #0
    b324:	str	r0, [fp, #-4]
    b328:	b	b3a0 <read_float_partial_array+0x1a8>
    b32c:	ldr	r0, [fp, #-8]
    b330:	ldr	r1, [sp, #12]
    b334:	ldr	r2, [sp, #8]
    b338:	ldr	r3, [sp, #4]
    b33c:	bl	0 <coda_cdf_cursor_read_float_partial_array>
    b340:	str	r0, [fp, #-4]
    b344:	b	b3a0 <read_float_partial_array+0x1a8>
    b348:	ldr	r0, [fp, #-8]
    b34c:	ldr	r1, [sp, #12]
    b350:	ldr	r2, [sp, #8]
    b354:	ldr	r3, [sp, #4]
    b358:	bl	0 <coda_netcdf_cursor_read_float_partial_array>
    b35c:	str	r0, [fp, #-4]
    b360:	b	b3a0 <read_float_partial_array+0x1a8>
    b364:	ldr	r0, [fp, #-8]
    b368:	ldr	r1, [sp, #12]
    b36c:	ldr	r2, [sp, #8]
    b370:	ldr	r3, [sp, #4]
    b374:	bl	0 <coda_grib_cursor_read_float_partial_array>
    b378:	str	r0, [fp, #-4]
    b37c:	b	b3a0 <read_float_partial_array+0x1a8>
    b380:	movw	r0, #0
    b384:	movt	r0, #0
    b388:	movw	r1, #0
    b38c:	movt	r1, #0
    b390:	movw	r2, #1674	; 0x68a
    b394:	movw	r3, #0
    b398:	movt	r3, #0
    b39c:	bl	0 <__assert_fail>
    b3a0:	ldr	r0, [fp, #-4]
    b3a4:	mov	sp, fp
    b3a8:	pop	{fp, pc}

0000b3ac <read_double_partial_array>:
    b3ac:	push	{fp, lr}
    b3b0:	mov	fp, sp
    b3b4:	sub	sp, sp, #48	; 0x30
    b3b8:	str	r0, [fp, #-8]
    b3bc:	str	r1, [fp, #-12]
    b3c0:	str	r2, [fp, #-16]
    b3c4:	str	r3, [fp, #-20]	; 0xffffffec
    b3c8:	ldr	r0, [fp, #-8]
    b3cc:	add	r1, r0, #8
    b3d0:	ldr	r0, [r0, #4]
    b3d4:	sub	r0, r0, #1
    b3d8:	add	r0, r1, r0, lsl #4
    b3dc:	ldr	r0, [r0]
    b3e0:	ldr	r0, [r0]
    b3e4:	cmp	r0, #100	; 0x64
    b3e8:	bcs	b40c <read_double_partial_array+0x60>
    b3ec:	ldr	r0, [fp, #-8]
    b3f0:	add	r1, r0, #8
    b3f4:	ldr	r0, [r0, #4]
    b3f8:	sub	r0, r0, #1
    b3fc:	add	r0, r1, r0, lsl #4
    b400:	ldr	r0, [r0]
    b404:	str	r0, [sp, #20]
    b408:	b	b42c <read_double_partial_array+0x80>
    b40c:	ldr	r0, [fp, #-8]
    b410:	add	r1, r0, #8
    b414:	ldr	r0, [r0, #4]
    b418:	sub	r0, r0, #1
    b41c:	add	r0, r1, r0, lsl #4
    b420:	ldr	r0, [r0]
    b424:	ldr	r0, [r0, #4]
    b428:	str	r0, [sp, #20]
    b42c:	ldr	r0, [sp, #20]
    b430:	str	r0, [sp, #24]
    b434:	ldr	r0, [sp, #24]
    b438:	ldr	r0, [r0, #40]	; 0x28
    b43c:	ldr	r0, [r0, #8]
    b440:	cmp	r0, #6
    b444:	bne	b484 <read_double_partial_array+0xd8>
    b448:	movw	r0, #0
    b44c:	movt	r0, #0
    b450:	ldr	r1, [fp, #-8]
    b454:	ldr	r2, [fp, #-12]
    b458:	ldr	r3, [fp, #-16]
    b45c:	ldr	ip, [fp, #-20]	; 0xffffffec
    b460:	str	r0, [sp, #16]
    b464:	mov	r0, r1
    b468:	ldr	r1, [sp, #16]
    b46c:	str	ip, [sp]
    b470:	movw	ip, #8
    b474:	str	ip, [sp, #4]
    b478:	bl	d208 <read_partial_array>
    b47c:	str	r0, [fp, #-4]
    b480:	b	b5f8 <read_double_partial_array+0x24c>
    b484:	ldr	r0, [fp, #-8]
    b488:	ldr	r1, [r0, #4]
    b48c:	add	r0, r0, r1, lsl #4
    b490:	ldr	r0, [r0, #-8]
    b494:	ldr	r0, [r0]
    b498:	cmp	r0, #0
    b49c:	str	r0, [sp, #12]
    b4a0:	beq	b518 <read_double_partial_array+0x16c>
    b4a4:	b	b4a8 <read_double_partial_array+0xfc>
    b4a8:	ldr	r0, [sp, #12]
    b4ac:	cmp	r0, #1
    b4b0:	beq	b534 <read_double_partial_array+0x188>
    b4b4:	b	b4b8 <read_double_partial_array+0x10c>
    b4b8:	ldr	r0, [sp, #12]
    b4bc:	cmp	r0, #100	; 0x64
    b4c0:	beq	b550 <read_double_partial_array+0x1a4>
    b4c4:	b	b4c8 <read_double_partial_array+0x11c>
    b4c8:	ldr	r0, [sp, #12]
    b4cc:	cmp	r0, #101	; 0x65
    b4d0:	beq	b56c <read_double_partial_array+0x1c0>
    b4d4:	b	b4d8 <read_double_partial_array+0x12c>
    b4d8:	ldr	r0, [sp, #12]
    b4dc:	cmp	r0, #102	; 0x66
    b4e0:	beq	b584 <read_double_partial_array+0x1d8>
    b4e4:	b	b4e8 <read_double_partial_array+0x13c>
    b4e8:	ldr	r0, [sp, #12]
    b4ec:	cmp	r0, #103	; 0x67
    b4f0:	beq	b59c <read_double_partial_array+0x1f0>
    b4f4:	b	b4f8 <read_double_partial_array+0x14c>
    b4f8:	ldr	r0, [sp, #12]
    b4fc:	cmp	r0, #104	; 0x68
    b500:	beq	b5b8 <read_double_partial_array+0x20c>
    b504:	b	b508 <read_double_partial_array+0x15c>
    b508:	ldr	r0, [sp, #12]
    b50c:	cmp	r0, #105	; 0x69
    b510:	beq	b5d4 <read_double_partial_array+0x228>
    b514:	b	b5d8 <read_double_partial_array+0x22c>
    b518:	ldr	r0, [fp, #-8]
    b51c:	ldr	r1, [fp, #-12]
    b520:	ldr	r2, [fp, #-16]
    b524:	ldr	r3, [fp, #-20]	; 0xffffffec
    b528:	bl	0 <coda_ascii_cursor_read_double_partial_array>
    b52c:	str	r0, [fp, #-4]
    b530:	b	b5f8 <read_double_partial_array+0x24c>
    b534:	ldr	r0, [fp, #-8]
    b538:	ldr	r1, [fp, #-12]
    b53c:	ldr	r2, [fp, #-16]
    b540:	ldr	r3, [fp, #-20]	; 0xffffffec
    b544:	bl	0 <coda_bin_cursor_read_double_partial_array>
    b548:	str	r0, [fp, #-4]
    b54c:	b	b5f8 <read_double_partial_array+0x24c>
    b550:	ldr	r0, [fp, #-8]
    b554:	ldr	r1, [fp, #-12]
    b558:	ldr	r2, [fp, #-16]
    b55c:	ldr	r3, [fp, #-20]	; 0xffffffec
    b560:	bl	0 <coda_mem_cursor_read_double_partial_array>
    b564:	str	r0, [fp, #-4]
    b568:	b	b5f8 <read_double_partial_array+0x24c>
    b56c:	mvn	r0, #10
    b570:	movw	r1, #0
    b574:	bl	0 <coda_set_error>
    b578:	mvn	r0, #0
    b57c:	str	r0, [fp, #-4]
    b580:	b	b5f8 <read_double_partial_array+0x24c>
    b584:	mvn	r0, #12
    b588:	movw	r1, #0
    b58c:	bl	0 <coda_set_error>
    b590:	mvn	r0, #0
    b594:	str	r0, [fp, #-4]
    b598:	b	b5f8 <read_double_partial_array+0x24c>
    b59c:	ldr	r0, [fp, #-8]
    b5a0:	ldr	r1, [fp, #-12]
    b5a4:	ldr	r2, [fp, #-16]
    b5a8:	ldr	r3, [fp, #-20]	; 0xffffffec
    b5ac:	bl	0 <coda_cdf_cursor_read_double_partial_array>
    b5b0:	str	r0, [fp, #-4]
    b5b4:	b	b5f8 <read_double_partial_array+0x24c>
    b5b8:	ldr	r0, [fp, #-8]
    b5bc:	ldr	r1, [fp, #-12]
    b5c0:	ldr	r2, [fp, #-16]
    b5c4:	ldr	r3, [fp, #-20]	; 0xffffffec
    b5c8:	bl	0 <coda_netcdf_cursor_read_double_partial_array>
    b5cc:	str	r0, [fp, #-4]
    b5d0:	b	b5f8 <read_double_partial_array+0x24c>
    b5d4:	b	b5d8 <read_double_partial_array+0x22c>
    b5d8:	movw	r0, #0
    b5dc:	movt	r0, #0
    b5e0:	movw	r1, #0
    b5e4:	movt	r1, #0
    b5e8:	movw	r2, #1718	; 0x6b6
    b5ec:	movw	r3, #0
    b5f0:	movt	r3, #0
    b5f4:	bl	0 <__assert_fail>
    b5f8:	ldr	r0, [fp, #-4]
    b5fc:	mov	sp, fp
    b600:	pop	{fp, pc}

0000b604 <coda_cursor_read_char_partial_array>:
    b604:	push	{fp, lr}
    b608:	mov	fp, sp
    b60c:	sub	sp, sp, #56	; 0x38
    b610:	str	r0, [fp, #-8]
    b614:	str	r1, [fp, #-12]
    b618:	str	r2, [fp, #-16]
    b61c:	str	r3, [fp, #-20]	; 0xffffffec
    b620:	ldr	r0, [fp, #-8]
    b624:	movw	r1, #0
    b628:	cmp	r0, r1
    b62c:	beq	b664 <coda_cursor_read_char_partial_array+0x60>
    b630:	ldr	r0, [fp, #-8]
    b634:	ldr	r0, [r0, #4]
    b638:	cmp	r0, #0
    b63c:	ble	b664 <coda_cursor_read_char_partial_array+0x60>
    b640:	ldr	r0, [fp, #-8]
    b644:	add	r1, r0, #8
    b648:	ldr	r0, [r0, #4]
    b64c:	sub	r0, r0, #1
    b650:	add	r0, r1, r0, lsl #4
    b654:	ldr	r0, [r0]
    b658:	movw	r1, #0
    b65c:	cmp	r0, r1
    b660:	bne	b68c <coda_cursor_read_char_partial_array+0x88>
    b664:	mvn	r0, #99	; 0x63
    b668:	movw	r1, #0
    b66c:	movt	r1, #0
    b670:	movw	r2, #0
    b674:	movt	r2, #0
    b678:	movw	r3, #5542	; 0x15a6
    b67c:	bl	0 <coda_set_error>
    b680:	mvn	r0, #0
    b684:	str	r0, [fp, #-4]
    b688:	b	b8dc <coda_cursor_read_char_partial_array+0x2d8>
    b68c:	ldr	r0, [fp, #-20]	; 0xffffffec
    b690:	movw	r1, #0
    b694:	cmp	r0, r1
    b698:	bne	b6c4 <coda_cursor_read_char_partial_array+0xc0>
    b69c:	mvn	r0, #99	; 0x63
    b6a0:	movw	r1, #0
    b6a4:	movt	r1, #0
    b6a8:	movw	r2, #0
    b6ac:	movt	r2, #0
    b6b0:	movw	r3, #5547	; 0x15ab
    b6b4:	bl	0 <coda_set_error>
    b6b8:	mvn	r0, #0
    b6bc:	str	r0, [fp, #-4]
    b6c0:	b	b8dc <coda_cursor_read_char_partial_array+0x2d8>
    b6c4:	ldr	r0, [fp, #-8]
    b6c8:	add	r1, r0, #8
    b6cc:	ldr	r0, [r0, #4]
    b6d0:	sub	r0, r0, #1
    b6d4:	add	r0, r1, r0, lsl #4
    b6d8:	ldr	r0, [r0]
    b6dc:	ldr	r0, [r0]
    b6e0:	cmp	r0, #100	; 0x64
    b6e4:	bcs	b708 <coda_cursor_read_char_partial_array+0x104>
    b6e8:	ldr	r0, [fp, #-8]
    b6ec:	add	r1, r0, #8
    b6f0:	ldr	r0, [r0, #4]
    b6f4:	sub	r0, r0, #1
    b6f8:	add	r0, r1, r0, lsl #4
    b6fc:	ldr	r0, [r0]
    b700:	str	r0, [sp, #20]
    b704:	b	b728 <coda_cursor_read_char_partial_array+0x124>
    b708:	ldr	r0, [fp, #-8]
    b70c:	add	r1, r0, #8
    b710:	ldr	r0, [r0, #4]
    b714:	sub	r0, r0, #1
    b718:	add	r0, r1, r0, lsl #4
    b71c:	ldr	r0, [r0]
    b720:	ldr	r0, [r0, #4]
    b724:	str	r0, [sp, #20]
    b728:	ldr	r0, [sp, #20]
    b72c:	str	r0, [sp, #28]
    b730:	ldr	r0, [sp, #28]
    b734:	ldr	r0, [r0, #8]
    b738:	cmp	r0, #1
    b73c:	beq	b774 <coda_cursor_read_char_partial_array+0x170>
    b740:	ldr	r0, [sp, #28]
    b744:	ldr	r0, [r0, #8]
    b748:	bl	0 <coda_type_get_class_name>
    b74c:	mvn	lr, #104	; 0x68
    b750:	str	r0, [sp, #16]
    b754:	mov	r0, lr
    b758:	movw	r1, #0
    b75c:	movt	r1, #0
    b760:	ldr	r2, [sp, #16]
    b764:	bl	0 <coda_set_error>
    b768:	mvn	r0, #0
    b76c:	str	r0, [fp, #-4]
    b770:	b	b8dc <coda_cursor_read_char_partial_array+0x2d8>
    b774:	ldr	r0, [pc, #364]	; b8e8 <coda_cursor_read_char_partial_array+0x2e4>
    b778:	ldr	r0, [pc, r0]
    b77c:	str	r0, [sp, #12]
    b780:	bl	0 <__aeabi_read_tp>
    b784:	ldr	ip, [sp, #12]
    b788:	ldr	r0, [r0, ip]
    b78c:	cmp	r0, #0
    b790:	beq	b848 <coda_cursor_read_char_partial_array+0x244>
    b794:	ldr	r0, [fp, #-8]
    b798:	add	r1, sp, #24
    b79c:	bl	0 <coda_cursor_get_num_elements>
    b7a0:	cmp	r0, #0
    b7a4:	beq	b7b4 <coda_cursor_read_char_partial_array+0x1b0>
    b7a8:	mvn	r0, #0
    b7ac:	str	r0, [fp, #-4]
    b7b0:	b	b8dc <coda_cursor_read_char_partial_array+0x2d8>
    b7b4:	ldr	r0, [fp, #-12]
    b7b8:	cmp	r0, #0
    b7bc:	blt	b7d0 <coda_cursor_read_char_partial_array+0x1cc>
    b7c0:	ldr	r0, [fp, #-12]
    b7c4:	ldr	r1, [sp, #24]
    b7c8:	cmp	r0, r1
    b7cc:	blt	b7f4 <coda_cursor_read_char_partial_array+0x1f0>
    b7d0:	ldr	r2, [fp, #-12]
    b7d4:	ldr	r3, [sp, #24]
    b7d8:	mvn	r0, #106	; 0x6a
    b7dc:	movw	r1, #0
    b7e0:	movt	r1, #0
    b7e4:	bl	0 <coda_set_error>
    b7e8:	mvn	r0, #0
    b7ec:	str	r0, [fp, #-4]
    b7f0:	b	b8dc <coda_cursor_read_char_partial_array+0x2d8>
    b7f4:	ldr	r0, [fp, #-12]
    b7f8:	ldr	r1, [fp, #-16]
    b7fc:	add	r0, r0, r1
    b800:	ldr	r1, [sp, #24]
    b804:	cmp	r0, r1
    b808:	ble	b844 <coda_cursor_read_char_partial_array+0x240>
    b80c:	ldr	r2, [fp, #-12]
    b810:	ldr	r3, [fp, #-16]
    b814:	ldr	r0, [sp, #24]
    b818:	mvn	r1, #106	; 0x6a
    b81c:	str	r0, [sp, #8]
    b820:	mov	r0, r1
    b824:	movw	r1, #0
    b828:	movt	r1, #0
    b82c:	ldr	ip, [sp, #8]
    b830:	str	ip, [sp]
    b834:	bl	0 <coda_set_error>
    b838:	mvn	r0, #0
    b83c:	str	r0, [fp, #-4]
    b840:	b	b8dc <coda_cursor_read_char_partial_array+0x2d8>
    b844:	b	b848 <coda_cursor_read_char_partial_array+0x244>
    b848:	ldr	r0, [sp, #28]
    b84c:	sub	r1, fp, #24
    b850:	bl	3304 <get_array_element_read_type>
    b854:	cmp	r0, #0
    b858:	beq	b868 <coda_cursor_read_char_partial_array+0x264>
    b85c:	mvn	r0, #0
    b860:	str	r0, [fp, #-4]
    b864:	b	b8dc <coda_cursor_read_char_partial_array+0x2d8>
    b868:	ldr	r0, [fp, #-24]	; 0xffffffe8
    b86c:	cmp	r0, #10
    b870:	bne	b8a4 <coda_cursor_read_char_partial_array+0x2a0>
    b874:	b	b878 <coda_cursor_read_char_partial_array+0x274>
    b878:	ldr	r0, [fp, #-8]
    b87c:	ldr	r1, [fp, #-12]
    b880:	ldr	r2, [fp, #-16]
    b884:	ldr	r3, [fp, #-20]	; 0xffffffec
    b888:	bl	b8ec <read_char_partial_array>
    b88c:	cmp	r0, #0
    b890:	beq	b8a0 <coda_cursor_read_char_partial_array+0x29c>
    b894:	mvn	r0, #0
    b898:	str	r0, [fp, #-4]
    b89c:	b	b8dc <coda_cursor_read_char_partial_array+0x2d8>
    b8a0:	b	b8d4 <coda_cursor_read_char_partial_array+0x2d0>
    b8a4:	ldr	r0, [fp, #-24]	; 0xffffffe8
    b8a8:	bl	0 <coda_type_get_native_type_name>
    b8ac:	mvn	lr, #104	; 0x68
    b8b0:	str	r0, [sp, #4]
    b8b4:	mov	r0, lr
    b8b8:	movw	r1, #0
    b8bc:	movt	r1, #0
    b8c0:	ldr	r2, [sp, #4]
    b8c4:	bl	0 <coda_set_error>
    b8c8:	mvn	r0, #0
    b8cc:	str	r0, [fp, #-4]
    b8d0:	b	b8dc <coda_cursor_read_char_partial_array+0x2d8>
    b8d4:	movw	r0, #0
    b8d8:	str	r0, [fp, #-4]
    b8dc:	ldr	r0, [fp, #-4]
    b8e0:	mov	sp, fp
    b8e4:	pop	{fp, pc}
    b8e8:	.word	0x00000168

0000b8ec <read_char_partial_array>:
    b8ec:	push	{fp, lr}
    b8f0:	mov	fp, sp
    b8f4:	sub	sp, sp, #24
    b8f8:	str	r0, [fp, #-8]
    b8fc:	str	r1, [sp, #12]
    b900:	str	r2, [sp, #8]
    b904:	str	r3, [sp, #4]
    b908:	ldr	r0, [fp, #-8]
    b90c:	ldr	r1, [r0, #4]
    b910:	add	r0, r0, r1, lsl #4
    b914:	ldr	r0, [r0, #-8]
    b918:	ldr	r0, [r0]
    b91c:	cmp	r0, #0
    b920:	str	r0, [sp]
    b924:	beq	b99c <read_char_partial_array+0xb0>
    b928:	b	b92c <read_char_partial_array+0x40>
    b92c:	ldr	r0, [sp]
    b930:	cmp	r0, #1
    b934:	beq	b9b8 <read_char_partial_array+0xcc>
    b938:	b	b93c <read_char_partial_array+0x50>
    b93c:	ldr	r0, [sp]
    b940:	cmp	r0, #100	; 0x64
    b944:	beq	b9d4 <read_char_partial_array+0xe8>
    b948:	b	b94c <read_char_partial_array+0x60>
    b94c:	ldr	r0, [sp]
    b950:	cmp	r0, #101	; 0x65
    b954:	beq	b9f0 <read_char_partial_array+0x104>
    b958:	b	b95c <read_char_partial_array+0x70>
    b95c:	ldr	r0, [sp]
    b960:	cmp	r0, #102	; 0x66
    b964:	beq	ba40 <read_char_partial_array+0x154>
    b968:	b	b96c <read_char_partial_array+0x80>
    b96c:	ldr	r0, [sp]
    b970:	cmp	r0, #103	; 0x67
    b974:	beq	ba08 <read_char_partial_array+0x11c>
    b978:	b	b97c <read_char_partial_array+0x90>
    b97c:	ldr	r0, [sp]
    b980:	cmp	r0, #104	; 0x68
    b984:	beq	ba24 <read_char_partial_array+0x138>
    b988:	b	b98c <read_char_partial_array+0xa0>
    b98c:	ldr	r0, [sp]
    b990:	cmp	r0, #105	; 0x69
    b994:	beq	ba40 <read_char_partial_array+0x154>
    b998:	b	ba44 <read_char_partial_array+0x158>
    b99c:	ldr	r0, [fp, #-8]
    b9a0:	ldr	r1, [sp, #12]
    b9a4:	ldr	r2, [sp, #8]
    b9a8:	ldr	r3, [sp, #4]
    b9ac:	bl	0 <coda_ascii_cursor_read_char_partial_array>
    b9b0:	str	r0, [fp, #-4]
    b9b4:	b	ba64 <read_char_partial_array+0x178>
    b9b8:	ldr	r0, [fp, #-8]
    b9bc:	ldr	r1, [sp, #12]
    b9c0:	ldr	r2, [sp, #8]
    b9c4:	ldr	r3, [sp, #4]
    b9c8:	bl	0 <coda_bin_cursor_read_char_partial_array>
    b9cc:	str	r0, [fp, #-4]
    b9d0:	b	ba64 <read_char_partial_array+0x178>
    b9d4:	ldr	r0, [fp, #-8]
    b9d8:	ldr	r1, [sp, #12]
    b9dc:	ldr	r2, [sp, #8]
    b9e0:	ldr	r3, [sp, #4]
    b9e4:	bl	0 <coda_mem_cursor_read_char_partial_array>
    b9e8:	str	r0, [fp, #-4]
    b9ec:	b	ba64 <read_char_partial_array+0x178>
    b9f0:	mvn	r0, #10
    b9f4:	movw	r1, #0
    b9f8:	bl	0 <coda_set_error>
    b9fc:	mvn	r0, #0
    ba00:	str	r0, [fp, #-4]
    ba04:	b	ba64 <read_char_partial_array+0x178>
    ba08:	ldr	r0, [fp, #-8]
    ba0c:	ldr	r1, [sp, #12]
    ba10:	ldr	r2, [sp, #8]
    ba14:	ldr	r3, [sp, #4]
    ba18:	bl	0 <coda_cdf_cursor_read_char_partial_array>
    ba1c:	str	r0, [fp, #-4]
    ba20:	b	ba64 <read_char_partial_array+0x178>
    ba24:	ldr	r0, [fp, #-8]
    ba28:	ldr	r1, [sp, #12]
    ba2c:	ldr	r2, [sp, #8]
    ba30:	ldr	r3, [sp, #4]
    ba34:	bl	0 <coda_netcdf_cursor_read_char_partial_array>
    ba38:	str	r0, [fp, #-4]
    ba3c:	b	ba64 <read_char_partial_array+0x178>
    ba40:	b	ba44 <read_char_partial_array+0x158>
    ba44:	movw	r0, #0
    ba48:	movt	r0, #0
    ba4c:	movw	r1, #0
    ba50:	movt	r1, #0
    ba54:	movw	r2, #1748	; 0x6d4
    ba58:	movw	r3, #0
    ba5c:	movt	r3, #0
    ba60:	bl	0 <__assert_fail>
    ba64:	ldr	r0, [fp, #-4]
    ba68:	mov	sp, fp
    ba6c:	pop	{fp, pc}

0000ba70 <coda_cursor_read_complex_double_pair>:
    ba70:	push	{fp, lr}
    ba74:	mov	fp, sp
    ba78:	sub	sp, sp, #16
    ba7c:	str	r0, [sp, #8]
    ba80:	str	r1, [sp, #4]
    ba84:	ldr	r0, [sp, #8]
    ba88:	movw	r1, #0
    ba8c:	cmp	r0, r1
    ba90:	beq	bac8 <coda_cursor_read_complex_double_pair+0x58>
    ba94:	ldr	r0, [sp, #8]
    ba98:	ldr	r0, [r0, #4]
    ba9c:	cmp	r0, #0
    baa0:	ble	bac8 <coda_cursor_read_complex_double_pair+0x58>
    baa4:	ldr	r0, [sp, #8]
    baa8:	add	r1, r0, #8
    baac:	ldr	r0, [r0, #4]
    bab0:	sub	r0, r0, #1
    bab4:	add	r0, r1, r0, lsl #4
    bab8:	ldr	r0, [r0]
    babc:	movw	r1, #0
    bac0:	cmp	r0, r1
    bac4:	bne	baf0 <coda_cursor_read_complex_double_pair+0x80>
    bac8:	mvn	r0, #99	; 0x63
    bacc:	movw	r1, #0
    bad0:	movt	r1, #0
    bad4:	movw	r2, #0
    bad8:	movt	r2, #0
    badc:	movw	r3, #5617	; 0x15f1
    bae0:	bl	0 <coda_set_error>
    bae4:	mvn	r0, #0
    bae8:	str	r0, [fp, #-4]
    baec:	b	bb38 <coda_cursor_read_complex_double_pair+0xc8>
    baf0:	ldr	r0, [sp, #4]
    baf4:	movw	r1, #0
    baf8:	cmp	r0, r1
    bafc:	bne	bb28 <coda_cursor_read_complex_double_pair+0xb8>
    bb00:	mvn	r0, #99	; 0x63
    bb04:	movw	r1, #0
    bb08:	movt	r1, #0
    bb0c:	movw	r2, #0
    bb10:	movt	r2, #0
    bb14:	movw	r3, #5622	; 0x15f6
    bb18:	bl	0 <coda_set_error>
    bb1c:	mvn	r0, #0
    bb20:	str	r0, [fp, #-4]
    bb24:	b	bb38 <coda_cursor_read_complex_double_pair+0xc8>
    bb28:	ldr	r0, [sp, #8]
    bb2c:	ldr	r1, [sp, #4]
    bb30:	bl	bb44 <read_double_pair>
    bb34:	str	r0, [fp, #-4]
    bb38:	ldr	r0, [fp, #-4]
    bb3c:	mov	sp, fp
    bb40:	pop	{fp, pc}

0000bb44 <read_double_pair>:
    bb44:	push	{r4, r5, fp, lr}
    bb48:	add	fp, sp, #8
    bb4c:	sub	sp, sp, #544	; 0x220
    bb50:	str	r0, [fp, #-16]
    bb54:	str	r1, [fp, #-20]	; 0xffffffec
    bb58:	ldr	r0, [fp, #-16]
    bb5c:	add	r1, r0, #8
    bb60:	ldr	r0, [r0, #4]
    bb64:	sub	r0, r0, #1
    bb68:	add	r0, r1, r0, lsl #4
    bb6c:	ldr	r0, [r0]
    bb70:	ldr	r0, [r0, #8]
    bb74:	cmp	r0, #6
    bb78:	bne	bba0 <read_double_pair+0x5c>
    bb7c:	ldr	r0, [fp, #-16]
    bb80:	add	r1, r0, #8
    bb84:	ldr	r0, [r0, #4]
    bb88:	sub	r0, r0, #1
    bb8c:	add	r0, r1, r0, lsl #4
    bb90:	ldr	r0, [r0]
    bb94:	ldr	r0, [r0, #40]	; 0x28
    bb98:	cmp	r0, #3
    bb9c:	beq	bbbc <read_double_pair+0x78>
    bba0:	mvn	r0, #104	; 0x68
    bba4:	movw	r1, #0
    bba8:	movt	r1, #0
    bbac:	bl	0 <coda_set_error>
    bbb0:	mvn	r0, #0
    bbb4:	str	r0, [fp, #-12]
    bbb8:	b	bc88 <read_double_pair+0x144>
    bbbc:	ldr	r0, [fp, #-16]
    bbc0:	add	r1, sp, #8
    bbc4:	mov	r2, r1
    bbc8:	str	r0, [sp, #4]
    bbcc:	mov	r0, r2
    bbd0:	ldr	r2, [sp, #4]
    bbd4:	str	r1, [sp]
    bbd8:	mov	r1, r2
    bbdc:	movw	r2, #520	; 0x208
    bbe0:	bl	0 <memcpy>
    bbe4:	ldr	r0, [sp]
    bbe8:	bl	0 <coda_cursor_use_base_type_of_special_type>
    bbec:	cmp	r0, #0
    bbf0:	beq	bc00 <read_double_pair+0xbc>
    bbf4:	mvn	r0, #0
    bbf8:	str	r0, [fp, #-12]
    bbfc:	b	bc88 <read_double_pair+0x144>
    bc00:	add	r0, sp, #8
    bc04:	movw	r1, #0
    bc08:	bl	0 <coda_cursor_goto_record_field_by_index>
    bc0c:	cmp	r0, #0
    bc10:	beq	bc20 <read_double_pair+0xdc>
    bc14:	mvn	r0, #0
    bc18:	str	r0, [fp, #-12]
    bc1c:	b	bc88 <read_double_pair+0x144>
    bc20:	ldr	r1, [fp, #-20]	; 0xffffffec
    bc24:	add	r0, sp, #8
    bc28:	bl	1f84 <coda_cursor_read_double>
    bc2c:	cmp	r0, #0
    bc30:	beq	bc40 <read_double_pair+0xfc>
    bc34:	mvn	r0, #0
    bc38:	str	r0, [fp, #-12]
    bc3c:	b	bc88 <read_double_pair+0x144>
    bc40:	add	r0, sp, #8
    bc44:	bl	0 <coda_cursor_goto_next_record_field>
    bc48:	cmp	r0, #0
    bc4c:	beq	bc5c <read_double_pair+0x118>
    bc50:	mvn	r0, #0
    bc54:	str	r0, [fp, #-12]
    bc58:	b	bc88 <read_double_pair+0x144>
    bc5c:	ldr	r0, [fp, #-20]	; 0xffffffec
    bc60:	add	r1, r0, #8
    bc64:	add	r0, sp, #8
    bc68:	bl	1f84 <coda_cursor_read_double>
    bc6c:	cmp	r0, #0
    bc70:	beq	bc80 <read_double_pair+0x13c>
    bc74:	mvn	r0, #0
    bc78:	str	r0, [fp, #-12]
    bc7c:	b	bc88 <read_double_pair+0x144>
    bc80:	movw	r0, #0
    bc84:	str	r0, [fp, #-12]
    bc88:	ldr	r0, [fp, #-12]
    bc8c:	sub	sp, fp, #8
    bc90:	pop	{r4, r5, fp, pc}

0000bc94 <coda_cursor_read_complex_double_pairs_array>:
    bc94:	push	{fp, lr}
    bc98:	mov	fp, sp
    bc9c:	sub	sp, sp, #40	; 0x28
    bca0:	str	r0, [fp, #-8]
    bca4:	str	r1, [fp, #-12]
    bca8:	str	r2, [fp, #-16]
    bcac:	ldr	r0, [fp, #-8]
    bcb0:	movw	r1, #0
    bcb4:	cmp	r0, r1
    bcb8:	beq	bcf0 <coda_cursor_read_complex_double_pairs_array+0x5c>
    bcbc:	ldr	r0, [fp, #-8]
    bcc0:	ldr	r0, [r0, #4]
    bcc4:	cmp	r0, #0
    bcc8:	ble	bcf0 <coda_cursor_read_complex_double_pairs_array+0x5c>
    bccc:	ldr	r0, [fp, #-8]
    bcd0:	add	r1, r0, #8
    bcd4:	ldr	r0, [r0, #4]
    bcd8:	sub	r0, r0, #1
    bcdc:	add	r0, r1, r0, lsl #4
    bce0:	ldr	r0, [r0]
    bce4:	movw	r1, #0
    bce8:	cmp	r0, r1
    bcec:	bne	bd18 <coda_cursor_read_complex_double_pairs_array+0x84>
    bcf0:	mvn	r0, #99	; 0x63
    bcf4:	movw	r1, #0
    bcf8:	movt	r1, #0
    bcfc:	movw	r2, #0
    bd00:	movt	r2, #0
    bd04:	movw	r3, #5649	; 0x1611
    bd08:	bl	0 <coda_set_error>
    bd0c:	mvn	r0, #0
    bd10:	str	r0, [fp, #-4]
    bd14:	b	be3c <coda_cursor_read_complex_double_pairs_array+0x1a8>
    bd18:	ldr	r0, [fp, #-12]
    bd1c:	movw	r1, #0
    bd20:	cmp	r0, r1
    bd24:	bne	bd50 <coda_cursor_read_complex_double_pairs_array+0xbc>
    bd28:	mvn	r0, #99	; 0x63
    bd2c:	movw	r1, #0
    bd30:	movt	r1, #0
    bd34:	movw	r2, #0
    bd38:	movt	r2, #0
    bd3c:	movw	r3, #5654	; 0x1616
    bd40:	bl	0 <coda_set_error>
    bd44:	mvn	r0, #0
    bd48:	str	r0, [fp, #-4]
    bd4c:	b	be3c <coda_cursor_read_complex_double_pairs_array+0x1a8>
    bd50:	ldr	r0, [fp, #-8]
    bd54:	add	r1, r0, #8
    bd58:	ldr	r0, [r0, #4]
    bd5c:	sub	r0, r0, #1
    bd60:	add	r0, r1, r0, lsl #4
    bd64:	ldr	r0, [r0]
    bd68:	ldr	r0, [r0]
    bd6c:	cmp	r0, #100	; 0x64
    bd70:	bcs	bd94 <coda_cursor_read_complex_double_pairs_array+0x100>
    bd74:	ldr	r0, [fp, #-8]
    bd78:	add	r1, r0, #8
    bd7c:	ldr	r0, [r0, #4]
    bd80:	sub	r0, r0, #1
    bd84:	add	r0, r1, r0, lsl #4
    bd88:	ldr	r0, [r0]
    bd8c:	str	r0, [sp, #16]
    bd90:	b	bdb4 <coda_cursor_read_complex_double_pairs_array+0x120>
    bd94:	ldr	r0, [fp, #-8]
    bd98:	add	r1, r0, #8
    bd9c:	ldr	r0, [r0, #4]
    bda0:	sub	r0, r0, #1
    bda4:	add	r0, r1, r0, lsl #4
    bda8:	ldr	r0, [r0]
    bdac:	ldr	r0, [r0, #4]
    bdb0:	str	r0, [sp, #16]
    bdb4:	ldr	r0, [sp, #16]
    bdb8:	str	r0, [sp, #20]
    bdbc:	ldr	r0, [sp, #20]
    bdc0:	ldr	r0, [r0, #8]
    bdc4:	cmp	r0, #1
    bdc8:	beq	be00 <coda_cursor_read_complex_double_pairs_array+0x16c>
    bdcc:	ldr	r0, [sp, #20]
    bdd0:	ldr	r0, [r0, #8]
    bdd4:	bl	0 <coda_type_get_class_name>
    bdd8:	mvn	lr, #104	; 0x68
    bddc:	str	r0, [sp, #12]
    bde0:	mov	r0, lr
    bde4:	movw	r1, #0
    bde8:	movt	r1, #0
    bdec:	ldr	r2, [sp, #12]
    bdf0:	bl	0 <coda_set_error>
    bdf4:	mvn	r0, #0
    bdf8:	str	r0, [fp, #-4]
    bdfc:	b	be3c <coda_cursor_read_complex_double_pairs_array+0x1a8>
    be00:	movw	r0, #0
    be04:	movt	r0, #0
    be08:	ldr	r1, [fp, #-8]
    be0c:	ldr	r2, [fp, #-12]
    be10:	ldr	r3, [fp, #-16]
    be14:	str	r0, [sp, #8]
    be18:	mov	r0, r1
    be1c:	ldr	r1, [sp, #8]
    be20:	movw	ip, #16
    be24:	str	r3, [sp, #4]
    be28:	mov	r3, ip
    be2c:	ldr	ip, [sp, #4]
    be30:	str	ip, [sp]
    be34:	bl	be48 <read_array>
    be38:	str	r0, [fp, #-4]
    be3c:	ldr	r0, [fp, #-4]
    be40:	mov	sp, fp
    be44:	pop	{fp, pc}

0000be48 <read_array>:
    be48:	push	{r4, r5, fp, lr}
    be4c:	add	fp, sp, #8
    be50:	sub	sp, sp, #664	; 0x298
    be54:	ldr	ip, [fp, #8]
    be58:	add	lr, sp, #88	; 0x58
    be5c:	str	r0, [fp, #-16]
    be60:	str	r1, [fp, #-20]	; 0xffffffec
    be64:	str	r2, [fp, #-24]	; 0xffffffe8
    be68:	str	r3, [fp, #-28]	; 0xffffffe4
    be6c:	ldr	r0, [fp, #-16]
    be70:	add	r1, sp, #84	; 0x54
    be74:	mov	r2, lr
    be78:	str	ip, [sp, #24]
    be7c:	bl	0 <coda_cursor_get_array_dim>
    be80:	cmp	r0, #0
    be84:	beq	be94 <read_array+0x4c>
    be88:	mvn	r0, #0
    be8c:	str	r0, [fp, #-12]
    be90:	b	c220 <read_array+0x3d8>
    be94:	ldr	r0, [fp, #-16]
    be98:	add	r1, sp, #120	; 0x78
    be9c:	str	r0, [sp, #20]
    bea0:	mov	r0, r1
    bea4:	ldr	r1, [sp, #20]
    bea8:	movw	r2, #520	; 0x208
    beac:	bl	0 <memcpy>
    beb0:	ldr	r0, [sp, #84]	; 0x54
    beb4:	cmp	r0, #1
    beb8:	ble	bec8 <read_array+0x80>
    bebc:	ldr	r0, [fp, #8]
    bec0:	cmp	r0, #1
    bec4:	beq	bfe8 <read_array+0x1a0>
    bec8:	movw	r0, #1
    becc:	str	r0, [sp, #80]	; 0x50
    bed0:	movw	r0, #0
    bed4:	str	r0, [sp, #76]	; 0x4c
    bed8:	ldr	r0, [sp, #76]	; 0x4c
    bedc:	ldr	r1, [sp, #84]	; 0x54
    bee0:	cmp	r0, r1
    bee4:	bge	bf14 <read_array+0xcc>
    bee8:	ldr	r0, [sp, #76]	; 0x4c
    beec:	add	r1, sp, #88	; 0x58
    bef0:	add	r0, r1, r0, lsl #2
    bef4:	ldr	r0, [r0]
    bef8:	ldr	r1, [sp, #80]	; 0x50
    befc:	mul	r0, r1, r0
    bf00:	str	r0, [sp, #80]	; 0x50
    bf04:	ldr	r0, [sp, #76]	; 0x4c
    bf08:	add	r0, r0, #1
    bf0c:	str	r0, [sp, #76]	; 0x4c
    bf10:	b	bed8 <read_array+0x90>
    bf14:	ldr	r0, [sp, #80]	; 0x50
    bf18:	cmp	r0, #0
    bf1c:	ble	bfe4 <read_array+0x19c>
    bf20:	add	r0, sp, #120	; 0x78
    bf24:	movw	r1, #0
    bf28:	bl	0 <coda_cursor_goto_array_element_by_index>
    bf2c:	cmp	r0, #0
    bf30:	beq	bf40 <read_array+0xf8>
    bf34:	mvn	r0, #0
    bf38:	str	r0, [fp, #-12]
    bf3c:	b	c220 <read_array+0x3d8>
    bf40:	movw	r0, #0
    bf44:	str	r0, [sp, #76]	; 0x4c
    bf48:	ldr	r0, [sp, #76]	; 0x4c
    bf4c:	ldr	r1, [sp, #80]	; 0x50
    bf50:	cmp	r0, r1
    bf54:	bge	bfe0 <read_array+0x198>
    bf58:	ldr	r0, [fp, #-20]	; 0xffffffec
    bf5c:	ldr	r1, [fp, #-24]	; 0xffffffe8
    bf60:	ldr	r2, [sp, #76]	; 0x4c
    bf64:	ldr	r3, [fp, #-28]	; 0xffffffe4
    bf68:	mul	r2, r2, r3
    bf6c:	add	r1, r1, r2
    bf70:	add	r2, sp, #120	; 0x78
    bf74:	str	r0, [sp, #16]
    bf78:	mov	r0, r2
    bf7c:	ldr	r2, [sp, #16]
    bf80:	blx	r2
    bf84:	cmp	r0, #0
    bf88:	beq	bf98 <read_array+0x150>
    bf8c:	mvn	r0, #0
    bf90:	str	r0, [fp, #-12]
    bf94:	b	c220 <read_array+0x3d8>
    bf98:	ldr	r0, [sp, #76]	; 0x4c
    bf9c:	ldr	r1, [sp, #80]	; 0x50
    bfa0:	sub	r1, r1, #1
    bfa4:	cmp	r0, r1
    bfa8:	bge	bfcc <read_array+0x184>
    bfac:	add	r0, sp, #120	; 0x78
    bfb0:	bl	0 <coda_cursor_goto_next_array_element>
    bfb4:	cmp	r0, #0
    bfb8:	beq	bfc8 <read_array+0x180>
    bfbc:	mvn	r0, #0
    bfc0:	str	r0, [fp, #-12]
    bfc4:	b	c220 <read_array+0x3d8>
    bfc8:	b	bfcc <read_array+0x184>
    bfcc:	b	bfd0 <read_array+0x188>
    bfd0:	ldr	r0, [sp, #76]	; 0x4c
    bfd4:	add	r0, r0, #1
    bfd8:	str	r0, [sp, #76]	; 0x4c
    bfdc:	b	bf48 <read_array+0x100>
    bfe0:	b	bfe4 <read_array+0x19c>
    bfe4:	b	c218 <read_array+0x3d0>
    bfe8:	movw	r0, #1
    bfec:	str	r0, [sp, #40]	; 0x28
    bff0:	movw	r0, #0
    bff4:	str	r0, [sp, #76]	; 0x4c
    bff8:	ldr	r0, [sp, #76]	; 0x4c
    bffc:	ldr	r1, [sp, #84]	; 0x54
    c000:	cmp	r0, r1
    c004:	bge	c03c <read_array+0x1f4>
    c008:	ldr	r0, [sp, #76]	; 0x4c
    c00c:	add	r1, sp, #40	; 0x28
    c010:	ldr	r2, [r1, r0, lsl #2]
    c014:	add	r3, sp, #88	; 0x58
    c018:	ldr	r3, [r3, r0, lsl #2]
    c01c:	mul	r2, r2, r3
    c020:	add	r0, r0, #1
    c024:	add	r0, r1, r0, lsl #2
    c028:	str	r2, [r0]
    c02c:	ldr	r0, [sp, #76]	; 0x4c
    c030:	add	r0, r0, #1
    c034:	str	r0, [sp, #76]	; 0x4c
    c038:	b	bff8 <read_array+0x1b0>
    c03c:	ldr	r0, [sp, #84]	; 0x54
    c040:	add	r1, sp, #40	; 0x28
    c044:	add	r0, r1, r0, lsl #2
    c048:	ldr	r0, [r0, #-4]
    c04c:	str	r0, [sp, #36]	; 0x24
    c050:	ldr	r0, [sp, #84]	; 0x54
    c054:	add	r0, r1, r0, lsl #2
    c058:	ldr	r0, [r0]
    c05c:	str	r0, [sp, #80]	; 0x50
    c060:	ldr	r0, [sp, #80]	; 0x50
    c064:	cmp	r0, #0
    c068:	ble	c214 <read_array+0x3cc>
    c06c:	movw	r0, #0
    c070:	str	r0, [sp, #32]
    c074:	str	r0, [sp, #28]
    c078:	add	r1, sp, #120	; 0x78
    c07c:	str	r0, [sp, #12]
    c080:	mov	r0, r1
    c084:	ldr	r1, [sp, #12]
    c088:	bl	0 <coda_cursor_goto_array_element_by_index>
    c08c:	cmp	r0, #0
    c090:	beq	c0a0 <read_array+0x258>
    c094:	mvn	r0, #0
    c098:	str	r0, [fp, #-12]
    c09c:	b	c220 <read_array+0x3d8>
    c0a0:	b	c0a4 <read_array+0x25c>
    c0a4:	b	c0a8 <read_array+0x260>
    c0a8:	ldr	r0, [fp, #-20]	; 0xffffffec
    c0ac:	ldr	r1, [fp, #-24]	; 0xffffffe8
    c0b0:	ldr	r2, [sp, #28]
    c0b4:	ldr	r3, [fp, #-28]	; 0xffffffe4
    c0b8:	mul	r2, r2, r3
    c0bc:	add	r1, r1, r2
    c0c0:	add	r2, sp, #120	; 0x78
    c0c4:	str	r0, [sp, #8]
    c0c8:	mov	r0, r2
    c0cc:	ldr	r2, [sp, #8]
    c0d0:	blx	r2
    c0d4:	cmp	r0, #0
    c0d8:	beq	c0e8 <read_array+0x2a0>
    c0dc:	mvn	r0, #0
    c0e0:	str	r0, [fp, #-12]
    c0e4:	b	c220 <read_array+0x3d8>
    c0e8:	ldr	r0, [sp, #32]
    c0ec:	add	r0, r0, #1
    c0f0:	str	r0, [sp, #32]
    c0f4:	ldr	r0, [sp, #32]
    c0f8:	ldr	r1, [sp, #80]	; 0x50
    c0fc:	cmp	r0, r1
    c100:	bge	c124 <read_array+0x2dc>
    c104:	add	r0, sp, #120	; 0x78
    c108:	bl	0 <coda_cursor_goto_next_array_element>
    c10c:	cmp	r0, #0
    c110:	beq	c120 <read_array+0x2d8>
    c114:	mvn	r0, #0
    c118:	str	r0, [fp, #-12]
    c11c:	b	c220 <read_array+0x3d8>
    c120:	b	c124 <read_array+0x2dc>
    c124:	ldr	r0, [sp, #36]	; 0x24
    c128:	ldr	r1, [sp, #28]
    c12c:	add	r0, r1, r0
    c130:	str	r0, [sp, #28]
    c134:	ldr	r0, [sp, #28]
    c138:	ldr	r1, [sp, #80]	; 0x50
    c13c:	cmp	r0, r1
    c140:	blt	c0a8 <read_array+0x260>
    c144:	ldr	r0, [sp, #32]
    c148:	ldr	r1, [sp, #80]	; 0x50
    c14c:	cmp	r0, r1
    c150:	bne	c158 <read_array+0x310>
    c154:	b	c210 <read_array+0x3c8>
    c158:	ldr	r0, [sp, #84]	; 0x54
    c15c:	add	r1, sp, #40	; 0x28
    c160:	add	r0, r1, r0, lsl #2
    c164:	ldr	r1, [r0, #-8]
    c168:	ldr	r0, [r0]
    c16c:	sub	r0, r1, r0
    c170:	ldr	r1, [sp, #28]
    c174:	add	r0, r1, r0
    c178:	str	r0, [sp, #28]
    c17c:	ldr	r0, [sp, #84]	; 0x54
    c180:	sub	r0, r0, #3
    c184:	str	r0, [sp, #76]	; 0x4c
    c188:	ldr	r0, [sp, #76]	; 0x4c
    c18c:	cmp	r0, #0
    c190:	movw	r0, #0
    c194:	str	r0, [sp, #4]
    c198:	blt	c1c4 <read_array+0x37c>
    c19c:	ldr	r0, [sp, #28]
    c1a0:	ldr	r1, [sp, #76]	; 0x4c
    c1a4:	add	r1, r1, #2
    c1a8:	add	r2, sp, #40	; 0x28
    c1ac:	add	r1, r2, r1, lsl #2
    c1b0:	ldr	r1, [r1]
    c1b4:	cmp	r0, r1
    c1b8:	movw	r0, #0
    c1bc:	movge	r0, #1
    c1c0:	str	r0, [sp, #4]
    c1c4:	ldr	r0, [sp, #4]
    c1c8:	tst	r0, #1
    c1cc:	beq	c20c <read_array+0x3c4>
    c1d0:	ldr	r0, [sp, #76]	; 0x4c
    c1d4:	add	r1, sp, #40	; 0x28
    c1d8:	ldr	r2, [r1, r0, lsl #2]
    c1dc:	add	r0, r0, #2
    c1e0:	add	r0, r1, r0, lsl #2
    c1e4:	ldr	r0, [r0]
    c1e8:	sub	r0, r2, r0
    c1ec:	ldr	r1, [sp, #28]
    c1f0:	add	r0, r1, r0
    c1f4:	str	r0, [sp, #28]
    c1f8:	ldr	r0, [sp, #76]	; 0x4c
    c1fc:	mvn	r1, #0
    c200:	add	r0, r0, r1
    c204:	str	r0, [sp, #76]	; 0x4c
    c208:	b	c188 <read_array+0x340>
    c20c:	b	c0a4 <read_array+0x25c>
    c210:	b	c214 <read_array+0x3cc>
    c214:	b	c218 <read_array+0x3d0>
    c218:	movw	r0, #0
    c21c:	str	r0, [fp, #-12]
    c220:	ldr	r0, [fp, #-12]
    c224:	sub	sp, fp, #8
    c228:	pop	{r4, r5, fp, pc}

0000c22c <coda_cursor_read_complex_double_split>:
    c22c:	push	{fp, lr}
    c230:	mov	fp, sp
    c234:	sub	sp, sp, #32
    c238:	mov	r3, sp
    c23c:	str	r0, [fp, #-8]
    c240:	str	r1, [fp, #-12]
    c244:	str	r2, [sp, #16]
    c248:	ldr	r0, [fp, #-8]
    c24c:	mov	r1, r3
    c250:	bl	ba70 <coda_cursor_read_complex_double_pair>
    c254:	cmp	r0, #0
    c258:	beq	c268 <coda_cursor_read_complex_double_split+0x3c>
    c25c:	mvn	r0, #0
    c260:	str	r0, [fp, #-4]
    c264:	b	c288 <coda_cursor_read_complex_double_split+0x5c>
    c268:	vldr	d16, [sp]
    c26c:	ldr	r0, [fp, #-12]
    c270:	vstr	d16, [r0]
    c274:	vldr	d16, [sp, #8]
    c278:	ldr	r0, [sp, #16]
    c27c:	vstr	d16, [r0]
    c280:	movw	r0, #0
    c284:	str	r0, [fp, #-4]
    c288:	ldr	r0, [fp, #-4]
    c28c:	mov	sp, fp
    c290:	pop	{fp, pc}

0000c294 <coda_cursor_read_complex_double_split_array>:
    c294:	push	{fp, lr}
    c298:	mov	fp, sp
    c29c:	sub	sp, sp, #48	; 0x30
    c2a0:	str	r0, [fp, #-8]
    c2a4:	str	r1, [fp, #-12]
    c2a8:	str	r2, [fp, #-16]
    c2ac:	str	r3, [fp, #-20]	; 0xffffffec
    c2b0:	ldr	r0, [fp, #-8]
    c2b4:	movw	r1, #0
    c2b8:	cmp	r0, r1
    c2bc:	beq	c2f4 <coda_cursor_read_complex_double_split_array+0x60>
    c2c0:	ldr	r0, [fp, #-8]
    c2c4:	ldr	r0, [r0, #4]
    c2c8:	cmp	r0, #0
    c2cc:	ble	c2f4 <coda_cursor_read_complex_double_split_array+0x60>
    c2d0:	ldr	r0, [fp, #-8]
    c2d4:	add	r1, r0, #8
    c2d8:	ldr	r0, [r0, #4]
    c2dc:	sub	r0, r0, #1
    c2e0:	add	r0, r1, r0, lsl #4
    c2e4:	ldr	r0, [r0]
    c2e8:	movw	r1, #0
    c2ec:	cmp	r0, r1
    c2f0:	bne	c31c <coda_cursor_read_complex_double_split_array+0x88>
    c2f4:	mvn	r0, #99	; 0x63
    c2f8:	movw	r1, #0
    c2fc:	movt	r1, #0
    c300:	movw	r2, #0
    c304:	movt	r2, #0
    c308:	movw	r3, #5713	; 0x1651
    c30c:	bl	0 <coda_set_error>
    c310:	mvn	r0, #0
    c314:	str	r0, [fp, #-4]
    c318:	b	c474 <coda_cursor_read_complex_double_split_array+0x1e0>
    c31c:	ldr	r0, [fp, #-12]
    c320:	movw	r1, #0
    c324:	cmp	r0, r1
    c328:	bne	c354 <coda_cursor_read_complex_double_split_array+0xc0>
    c32c:	mvn	r0, #99	; 0x63
    c330:	movw	r1, #0
    c334:	movt	r1, #0
    c338:	movw	r2, #0
    c33c:	movt	r2, #0
    c340:	movw	r3, #5718	; 0x1656
    c344:	bl	0 <coda_set_error>
    c348:	mvn	r0, #0
    c34c:	str	r0, [fp, #-4]
    c350:	b	c474 <coda_cursor_read_complex_double_split_array+0x1e0>
    c354:	ldr	r0, [fp, #-16]
    c358:	movw	r1, #0
    c35c:	cmp	r0, r1
    c360:	bne	c38c <coda_cursor_read_complex_double_split_array+0xf8>
    c364:	mvn	r0, #99	; 0x63
    c368:	movw	r1, #0
    c36c:	movt	r1, #0
    c370:	movw	r2, #0
    c374:	movt	r2, #0
    c378:	movw	r3, #5723	; 0x165b
    c37c:	bl	0 <coda_set_error>
    c380:	mvn	r0, #0
    c384:	str	r0, [fp, #-4]
    c388:	b	c474 <coda_cursor_read_complex_double_split_array+0x1e0>
    c38c:	ldr	r0, [fp, #-8]
    c390:	add	r1, r0, #8
    c394:	ldr	r0, [r0, #4]
    c398:	sub	r0, r0, #1
    c39c:	add	r0, r1, r0, lsl #4
    c3a0:	ldr	r0, [r0]
    c3a4:	ldr	r0, [r0]
    c3a8:	cmp	r0, #100	; 0x64
    c3ac:	bcs	c3d0 <coda_cursor_read_complex_double_split_array+0x13c>
    c3b0:	ldr	r0, [fp, #-8]
    c3b4:	add	r1, r0, #8
    c3b8:	ldr	r0, [r0, #4]
    c3bc:	sub	r0, r0, #1
    c3c0:	add	r0, r1, r0, lsl #4
    c3c4:	ldr	r0, [r0]
    c3c8:	str	r0, [sp, #20]
    c3cc:	b	c3f0 <coda_cursor_read_complex_double_split_array+0x15c>
    c3d0:	ldr	r0, [fp, #-8]
    c3d4:	add	r1, r0, #8
    c3d8:	ldr	r0, [r0, #4]
    c3dc:	sub	r0, r0, #1
    c3e0:	add	r0, r1, r0, lsl #4
    c3e4:	ldr	r0, [r0]
    c3e8:	ldr	r0, [r0, #4]
    c3ec:	str	r0, [sp, #20]
    c3f0:	ldr	r0, [sp, #20]
    c3f4:	str	r0, [sp, #24]
    c3f8:	ldr	r0, [sp, #24]
    c3fc:	ldr	r0, [r0, #8]
    c400:	cmp	r0, #1
    c404:	beq	c43c <coda_cursor_read_complex_double_split_array+0x1a8>
    c408:	ldr	r0, [sp, #24]
    c40c:	ldr	r0, [r0, #8]
    c410:	bl	0 <coda_type_get_class_name>
    c414:	mvn	lr, #104	; 0x68
    c418:	str	r0, [sp, #16]
    c41c:	mov	r0, lr
    c420:	movw	r1, #0
    c424:	movt	r1, #0
    c428:	ldr	r2, [sp, #16]
    c42c:	bl	0 <coda_set_error>
    c430:	mvn	r0, #0
    c434:	str	r0, [fp, #-4]
    c438:	b	c474 <coda_cursor_read_complex_double_split_array+0x1e0>
    c43c:	movw	r0, #0
    c440:	movt	r0, #0
    c444:	ldr	r1, [fp, #-8]
    c448:	ldr	r2, [fp, #-12]
    c44c:	ldr	r3, [fp, #-16]
    c450:	ldr	ip, [fp, #-20]	; 0xffffffec
    c454:	str	r0, [sp, #12]
    c458:	mov	r0, r1
    c45c:	ldr	r1, [sp, #12]
    c460:	movw	lr, #8
    c464:	str	lr, [sp]
    c468:	str	ip, [sp, #4]
    c46c:	bl	c480 <read_split_array>
    c470:	str	r0, [fp, #-4]
    c474:	ldr	r0, [fp, #-4]
    c478:	mov	sp, fp
    c47c:	pop	{fp, pc}

0000c480 <read_split_array>:
    c480:	push	{r4, sl, fp, lr}
    c484:	add	fp, sp, #8
    c488:	sub	sp, sp, #696	; 0x2b8
    c48c:	ldr	ip, [fp, #12]
    c490:	ldr	lr, [fp, #8]
    c494:	add	r4, sp, #104	; 0x68
    c498:	str	r0, [fp, #-16]
    c49c:	str	r1, [fp, #-20]	; 0xffffffec
    c4a0:	str	r2, [fp, #-24]	; 0xffffffe8
    c4a4:	str	r3, [fp, #-28]	; 0xffffffe4
    c4a8:	ldr	r0, [fp, #-16]
    c4ac:	add	r1, sp, #100	; 0x64
    c4b0:	mov	r2, r4
    c4b4:	str	lr, [sp, #40]	; 0x28
    c4b8:	str	ip, [sp, #36]	; 0x24
    c4bc:	bl	0 <coda_cursor_get_array_dim>
    c4c0:	cmp	r0, #0
    c4c4:	beq	c4d4 <read_split_array+0x54>
    c4c8:	mvn	r0, #0
    c4cc:	str	r0, [fp, #-12]
    c4d0:	b	c8c8 <read_split_array+0x448>
    c4d4:	ldr	r0, [fp, #-16]
    c4d8:	add	r1, sp, #152	; 0x98
    c4dc:	str	r0, [sp, #32]
    c4e0:	mov	r0, r1
    c4e4:	ldr	r1, [sp, #32]
    c4e8:	movw	r2, #520	; 0x208
    c4ec:	bl	0 <memcpy>
    c4f0:	ldr	r0, [sp, #100]	; 0x64
    c4f4:	cmp	r0, #1
    c4f8:	ble	c508 <read_split_array+0x88>
    c4fc:	ldr	r0, [fp, #12]
    c500:	cmp	r0, #1
    c504:	beq	c65c <read_split_array+0x1dc>
    c508:	movw	r0, #1
    c50c:	str	r0, [sp, #96]	; 0x60
    c510:	movw	r0, #0
    c514:	str	r0, [sp, #92]	; 0x5c
    c518:	ldr	r0, [sp, #92]	; 0x5c
    c51c:	ldr	r1, [sp, #100]	; 0x64
    c520:	cmp	r0, r1
    c524:	bge	c554 <read_split_array+0xd4>
    c528:	ldr	r0, [sp, #92]	; 0x5c
    c52c:	add	r1, sp, #104	; 0x68
    c530:	add	r0, r1, r0, lsl #2
    c534:	ldr	r0, [r0]
    c538:	ldr	r1, [sp, #96]	; 0x60
    c53c:	mul	r0, r1, r0
    c540:	str	r0, [sp, #96]	; 0x60
    c544:	ldr	r0, [sp, #92]	; 0x5c
    c548:	add	r0, r0, #1
    c54c:	str	r0, [sp, #92]	; 0x5c
    c550:	b	c518 <read_split_array+0x98>
    c554:	ldr	r0, [sp, #96]	; 0x60
    c558:	cmp	r0, #0
    c55c:	ble	c658 <read_split_array+0x1d8>
    c560:	add	r0, sp, #152	; 0x98
    c564:	movw	r1, #0
    c568:	bl	0 <coda_cursor_goto_array_element_by_index>
    c56c:	cmp	r0, #0
    c570:	beq	c580 <read_split_array+0x100>
    c574:	mvn	r0, #0
    c578:	str	r0, [fp, #-12]
    c57c:	b	c8c8 <read_split_array+0x448>
    c580:	movw	r0, #0
    c584:	str	r0, [sp, #92]	; 0x5c
    c588:	ldr	r0, [sp, #92]	; 0x5c
    c58c:	ldr	r1, [sp, #96]	; 0x60
    c590:	cmp	r0, r1
    c594:	bge	c654 <read_split_array+0x1d4>
    c598:	add	r1, sp, #136	; 0x88
    c59c:	ldr	r0, [fp, #-20]	; 0xffffffec
    c5a0:	add	r2, sp, #152	; 0x98
    c5a4:	str	r0, [sp, #28]
    c5a8:	mov	r0, r2
    c5ac:	ldr	r2, [sp, #28]
    c5b0:	blx	r2
    c5b4:	add	r1, sp, #136	; 0x88
    c5b8:	ldr	r2, [fp, #-24]	; 0xffffffe8
    c5bc:	ldr	lr, [sp, #92]	; 0x5c
    c5c0:	ldr	r3, [fp, #8]
    c5c4:	mul	r3, lr, r3
    c5c8:	add	r2, r2, r3
    c5cc:	ldr	r3, [fp, #8]
    c5d0:	str	r0, [sp, #24]
    c5d4:	mov	r0, r2
    c5d8:	str	r1, [sp, #20]
    c5dc:	mov	r2, r3
    c5e0:	bl	0 <memcpy>
    c5e4:	ldr	r0, [fp, #-28]	; 0xffffffe4
    c5e8:	ldr	r1, [sp, #92]	; 0x5c
    c5ec:	ldr	r2, [fp, #8]
    c5f0:	mul	r1, r1, r2
    c5f4:	add	r0, r0, r1
    c5f8:	ldr	r1, [fp, #8]
    c5fc:	ldr	r2, [sp, #20]
    c600:	add	r1, r2, r1
    c604:	ldr	r2, [fp, #8]
    c608:	bl	0 <memcpy>
    c60c:	ldr	r0, [sp, #92]	; 0x5c
    c610:	ldr	r1, [sp, #96]	; 0x60
    c614:	sub	r1, r1, #1
    c618:	cmp	r0, r1
    c61c:	bge	c640 <read_split_array+0x1c0>
    c620:	add	r0, sp, #152	; 0x98
    c624:	bl	0 <coda_cursor_goto_next_array_element>
    c628:	cmp	r0, #0
    c62c:	beq	c63c <read_split_array+0x1bc>
    c630:	mvn	r0, #0
    c634:	str	r0, [fp, #-12]
    c638:	b	c8c8 <read_split_array+0x448>
    c63c:	b	c640 <read_split_array+0x1c0>
    c640:	b	c644 <read_split_array+0x1c4>
    c644:	ldr	r0, [sp, #92]	; 0x5c
    c648:	add	r0, r0, #1
    c64c:	str	r0, [sp, #92]	; 0x5c
    c650:	b	c588 <read_split_array+0x108>
    c654:	b	c658 <read_split_array+0x1d8>
    c658:	b	c8c0 <read_split_array+0x440>
    c65c:	movw	r0, #1
    c660:	str	r0, [sp, #56]	; 0x38
    c664:	movw	r0, #0
    c668:	str	r0, [sp, #92]	; 0x5c
    c66c:	ldr	r0, [sp, #92]	; 0x5c
    c670:	ldr	r1, [sp, #100]	; 0x64
    c674:	cmp	r0, r1
    c678:	bge	c6b0 <read_split_array+0x230>
    c67c:	ldr	r0, [sp, #92]	; 0x5c
    c680:	add	r1, sp, #56	; 0x38
    c684:	ldr	r2, [r1, r0, lsl #2]
    c688:	add	r3, sp, #104	; 0x68
    c68c:	ldr	r3, [r3, r0, lsl #2]
    c690:	mul	r2, r2, r3
    c694:	add	r0, r0, #1
    c698:	add	r0, r1, r0, lsl #2
    c69c:	str	r2, [r0]
    c6a0:	ldr	r0, [sp, #92]	; 0x5c
    c6a4:	add	r0, r0, #1
    c6a8:	str	r0, [sp, #92]	; 0x5c
    c6ac:	b	c66c <read_split_array+0x1ec>
    c6b0:	ldr	r0, [sp, #100]	; 0x64
    c6b4:	add	r1, sp, #56	; 0x38
    c6b8:	add	r0, r1, r0, lsl #2
    c6bc:	ldr	r0, [r0, #-4]
    c6c0:	str	r0, [sp, #52]	; 0x34
    c6c4:	ldr	r0, [sp, #100]	; 0x64
    c6c8:	add	r0, r1, r0, lsl #2
    c6cc:	ldr	r0, [r0]
    c6d0:	str	r0, [sp, #96]	; 0x60
    c6d4:	ldr	r0, [sp, #96]	; 0x60
    c6d8:	cmp	r0, #0
    c6dc:	ble	c8bc <read_split_array+0x43c>
    c6e0:	movw	r0, #0
    c6e4:	str	r0, [sp, #48]	; 0x30
    c6e8:	str	r0, [sp, #44]	; 0x2c
    c6ec:	add	r1, sp, #152	; 0x98
    c6f0:	str	r0, [sp, #16]
    c6f4:	mov	r0, r1
    c6f8:	ldr	r1, [sp, #16]
    c6fc:	bl	0 <coda_cursor_goto_array_element_by_index>
    c700:	cmp	r0, #0
    c704:	beq	c714 <read_split_array+0x294>
    c708:	mvn	r0, #0
    c70c:	str	r0, [fp, #-12]
    c710:	b	c8c8 <read_split_array+0x448>
    c714:	b	c718 <read_split_array+0x298>
    c718:	b	c71c <read_split_array+0x29c>
    c71c:	add	r1, sp, #136	; 0x88
    c720:	ldr	r0, [fp, #-20]	; 0xffffffec
    c724:	add	r2, sp, #152	; 0x98
    c728:	str	r0, [sp, #12]
    c72c:	mov	r0, r2
    c730:	ldr	r2, [sp, #12]
    c734:	blx	r2
    c738:	add	r1, sp, #136	; 0x88
    c73c:	ldr	r2, [fp, #-24]	; 0xffffffe8
    c740:	ldr	lr, [sp, #44]	; 0x2c
    c744:	ldr	r3, [fp, #8]
    c748:	mul	r3, lr, r3
    c74c:	add	r2, r2, r3
    c750:	ldr	r3, [fp, #8]
    c754:	str	r0, [sp, #8]
    c758:	mov	r0, r2
    c75c:	str	r1, [sp, #4]
    c760:	mov	r2, r3
    c764:	bl	0 <memcpy>
    c768:	ldr	r0, [fp, #-28]	; 0xffffffe4
    c76c:	ldr	r1, [sp, #44]	; 0x2c
    c770:	ldr	r2, [fp, #8]
    c774:	mul	r1, r1, r2
    c778:	add	r0, r0, r1
    c77c:	ldr	r1, [fp, #8]
    c780:	ldr	r2, [sp, #4]
    c784:	add	r1, r2, r1
    c788:	ldr	r2, [fp, #8]
    c78c:	bl	0 <memcpy>
    c790:	ldr	r0, [sp, #48]	; 0x30
    c794:	add	r0, r0, #1
    c798:	str	r0, [sp, #48]	; 0x30
    c79c:	ldr	r0, [sp, #48]	; 0x30
    c7a0:	ldr	r1, [sp, #96]	; 0x60
    c7a4:	cmp	r0, r1
    c7a8:	bge	c7cc <read_split_array+0x34c>
    c7ac:	add	r0, sp, #152	; 0x98
    c7b0:	bl	0 <coda_cursor_goto_next_array_element>
    c7b4:	cmp	r0, #0
    c7b8:	beq	c7c8 <read_split_array+0x348>
    c7bc:	mvn	r0, #0
    c7c0:	str	r0, [fp, #-12]
    c7c4:	b	c8c8 <read_split_array+0x448>
    c7c8:	b	c7cc <read_split_array+0x34c>
    c7cc:	ldr	r0, [sp, #52]	; 0x34
    c7d0:	ldr	r1, [sp, #44]	; 0x2c
    c7d4:	add	r0, r1, r0
    c7d8:	str	r0, [sp, #44]	; 0x2c
    c7dc:	ldr	r0, [sp, #44]	; 0x2c
    c7e0:	ldr	r1, [sp, #96]	; 0x60
    c7e4:	cmp	r0, r1
    c7e8:	blt	c71c <read_split_array+0x29c>
    c7ec:	ldr	r0, [sp, #48]	; 0x30
    c7f0:	ldr	r1, [sp, #96]	; 0x60
    c7f4:	cmp	r0, r1
    c7f8:	bne	c800 <read_split_array+0x380>
    c7fc:	b	c8b8 <read_split_array+0x438>
    c800:	ldr	r0, [sp, #100]	; 0x64
    c804:	add	r1, sp, #56	; 0x38
    c808:	add	r0, r1, r0, lsl #2
    c80c:	ldr	r1, [r0, #-8]
    c810:	ldr	r0, [r0]
    c814:	sub	r0, r1, r0
    c818:	ldr	r1, [sp, #44]	; 0x2c
    c81c:	add	r0, r1, r0
    c820:	str	r0, [sp, #44]	; 0x2c
    c824:	ldr	r0, [sp, #100]	; 0x64
    c828:	sub	r0, r0, #3
    c82c:	str	r0, [sp, #92]	; 0x5c
    c830:	ldr	r0, [sp, #92]	; 0x5c
    c834:	cmp	r0, #0
    c838:	movw	r0, #0
    c83c:	str	r0, [sp]
    c840:	blt	c86c <read_split_array+0x3ec>
    c844:	ldr	r0, [sp, #44]	; 0x2c
    c848:	ldr	r1, [sp, #92]	; 0x5c
    c84c:	add	r1, r1, #2
    c850:	add	r2, sp, #56	; 0x38
    c854:	add	r1, r2, r1, lsl #2
    c858:	ldr	r1, [r1]
    c85c:	cmp	r0, r1
    c860:	movw	r0, #0
    c864:	movge	r0, #1
    c868:	str	r0, [sp]
    c86c:	ldr	r0, [sp]
    c870:	tst	r0, #1
    c874:	beq	c8b4 <read_split_array+0x434>
    c878:	ldr	r0, [sp, #92]	; 0x5c
    c87c:	add	r1, sp, #56	; 0x38
    c880:	ldr	r2, [r1, r0, lsl #2]
    c884:	add	r0, r0, #2
    c888:	add	r0, r1, r0, lsl #2
    c88c:	ldr	r0, [r0]
    c890:	sub	r0, r2, r0
    c894:	ldr	r1, [sp, #44]	; 0x2c
    c898:	add	r0, r1, r0
    c89c:	str	r0, [sp, #44]	; 0x2c
    c8a0:	ldr	r0, [sp, #92]	; 0x5c
    c8a4:	mvn	r1, #0
    c8a8:	add	r0, r0, r1
    c8ac:	str	r0, [sp, #92]	; 0x5c
    c8b0:	b	c830 <read_split_array+0x3b0>
    c8b4:	b	c718 <read_split_array+0x298>
    c8b8:	b	c8bc <read_split_array+0x43c>
    c8bc:	b	c8c0 <read_split_array+0x440>
    c8c0:	movw	r0, #0
    c8c4:	str	r0, [fp, #-12]
    c8c8:	ldr	r0, [fp, #-12]
    c8cc:	sub	sp, fp, #8
    c8d0:	pop	{r4, sl, fp, pc}

0000c8d4 <read_time>:
    c8d4:	push	{r4, r5, fp, lr}
    c8d8:	add	fp, sp, #8
    c8dc:	sub	sp, sp, #552	; 0x228
    c8e0:	str	r0, [fp, #-16]
    c8e4:	str	r1, [fp, #-20]	; 0xffffffec
    c8e8:	ldr	r1, [fp, #-16]
    c8ec:	add	r0, sp, #16
    c8f0:	mov	r2, #520	; 0x208
    c8f4:	bl	0 <memcpy>
    c8f8:	ldr	r1, [fp, #-16]
    c8fc:	add	r2, r1, #8
    c900:	ldr	r1, [r1, #4]
    c904:	sub	r1, r1, #1
    c908:	add	r1, r2, r1, lsl #4
    c90c:	ldr	r1, [r1]
    c910:	ldr	r1, [r1]
    c914:	cmp	r1, #100	; 0x64
    c918:	str	r0, [sp, #8]
    c91c:	bcs	c940 <read_time+0x6c>
    c920:	ldr	r0, [fp, #-16]
    c924:	add	r1, r0, #8
    c928:	ldr	r0, [r0, #4]
    c92c:	sub	r0, r0, #1
    c930:	add	r0, r1, r0, lsl #4
    c934:	ldr	r0, [r0]
    c938:	str	r0, [sp, #4]
    c93c:	b	c960 <read_time+0x8c>
    c940:	ldr	r0, [fp, #-16]
    c944:	add	r1, r0, #8
    c948:	ldr	r0, [r0, #4]
    c94c:	sub	r0, r0, #1
    c950:	add	r0, r1, r0, lsl #4
    c954:	ldr	r0, [r0]
    c958:	ldr	r0, [r0, #4]
    c95c:	str	r0, [sp, #4]
    c960:	ldr	r0, [sp, #4]
    c964:	str	r0, [sp, #12]
    c968:	add	r0, sp, #16
    c96c:	bl	0 <coda_cursor_use_base_type_of_special_type>
    c970:	cmp	r0, #0
    c974:	beq	c984 <read_time+0xb0>
    c978:	mvn	r0, #0
    c97c:	str	r0, [fp, #-12]
    c980:	b	c99c <read_time+0xc8>
    c984:	ldr	r0, [sp, #12]
    c988:	ldr	r0, [r0, #52]	; 0x34
    c98c:	ldr	r2, [fp, #-20]	; 0xffffffec
    c990:	add	r1, sp, #16
    c994:	bl	0 <coda_expression_eval_float>
    c998:	str	r0, [fp, #-12]
    c99c:	ldr	r0, [fp, #-12]
    c9a0:	sub	sp, fp, #8
    c9a4:	pop	{r4, r5, fp, pc}

0000c9a8 <read_vsf_integer>:
    c9a8:	push	{r4, r5, fp, lr}
    c9ac:	add	fp, sp, #8
    c9b0:	sub	sp, sp, #568	; 0x238
    c9b4:	str	r0, [fp, #-16]
    c9b8:	str	r1, [fp, #-20]	; 0xffffffec
    c9bc:	ldr	r0, [fp, #-16]
    c9c0:	add	r1, sp, #32
    c9c4:	mov	r2, r1
    c9c8:	str	r0, [sp, #12]
    c9cc:	mov	r0, r2
    c9d0:	ldr	r2, [sp, #12]
    c9d4:	str	r1, [sp, #8]
    c9d8:	mov	r1, r2
    c9dc:	movw	r2, #520	; 0x208
    c9e0:	bl	0 <memcpy>
    c9e4:	ldr	r0, [sp, #8]
    c9e8:	bl	0 <coda_cursor_use_base_type_of_special_type>
    c9ec:	cmp	r0, #0
    c9f0:	beq	ca00 <read_vsf_integer+0x58>
    c9f4:	mvn	r0, #0
    c9f8:	str	r0, [fp, #-12]
    c9fc:	b	caac <read_vsf_integer+0x104>
    ca00:	add	r0, sp, #32
    ca04:	bl	0 <coda_cursor_goto_first_record_field>
    ca08:	cmp	r0, #0
    ca0c:	beq	ca1c <read_vsf_integer+0x74>
    ca10:	mvn	r0, #0
    ca14:	str	r0, [fp, #-12]
    ca18:	b	caac <read_vsf_integer+0x104>
    ca1c:	add	r0, sp, #32
    ca20:	add	r1, sp, #28
    ca24:	bl	c80 <coda_cursor_read_int32>
    ca28:	cmp	r0, #0
    ca2c:	beq	ca3c <read_vsf_integer+0x94>
    ca30:	mvn	r0, #0
    ca34:	str	r0, [fp, #-12]
    ca38:	b	caac <read_vsf_integer+0x104>
    ca3c:	add	r0, sp, #32
    ca40:	bl	0 <coda_cursor_goto_next_record_field>
    ca44:	cmp	r0, #0
    ca48:	beq	ca58 <read_vsf_integer+0xb0>
    ca4c:	mvn	r0, #0
    ca50:	str	r0, [fp, #-12]
    ca54:	b	caac <read_vsf_integer+0x104>
    ca58:	add	r0, sp, #32
    ca5c:	add	r1, sp, #16
    ca60:	bl	1f84 <coda_cursor_read_double>
    ca64:	cmp	r0, #0
    ca68:	beq	ca78 <read_vsf_integer+0xd0>
    ca6c:	mvn	r0, #0
    ca70:	str	r0, [fp, #-12]
    ca74:	b	caac <read_vsf_integer+0x104>
    ca78:	vldr	d16, [sp, #16]
    ca7c:	ldr	r0, [sp, #28]
    ca80:	movw	r1, #0
    ca84:	sub	r0, r1, r0
    ca88:	vmov.f64	d0, #36	; 0x41200000  10.0
    ca8c:	vstr	d16, [sp]
    ca90:	bl	cab8 <ipow>
    ca94:	vldr	d16, [sp]
    ca98:	vmul.f64	d16, d16, d0
    ca9c:	ldr	r0, [fp, #-20]	; 0xffffffec
    caa0:	vstr	d16, [r0]
    caa4:	movw	r0, #0
    caa8:	str	r0, [fp, #-12]
    caac:	ldr	r0, [fp, #-12]
    cab0:	sub	sp, fp, #8
    cab4:	pop	{r4, r5, fp, pc}

0000cab8 <ipow>:
    cab8:	sub	sp, sp, #24
    cabc:	vstr	d0, [sp, #16]
    cac0:	str	r0, [sp, #12]
    cac4:	vmov.f64	d0, #112	; 0x3f800000  1.0
    cac8:	vstr	d0, [sp]
    cacc:	ldr	r0, [sp, #12]
    cad0:	cmp	r0, #0
    cad4:	bge	cb18 <ipow+0x60>
    cad8:	b	cadc <ipow+0x24>
    cadc:	ldr	r0, [sp, #12]
    cae0:	add	r1, r0, #1
    cae4:	str	r1, [sp, #12]
    cae8:	cmp	r0, #0
    caec:	beq	cb04 <ipow+0x4c>
    caf0:	vldr	d16, [sp, #16]
    caf4:	vldr	d17, [sp]
    caf8:	vmul.f64	d16, d17, d16
    cafc:	vstr	d16, [sp]
    cb00:	b	cadc <ipow+0x24>
    cb04:	vldr	d16, [sp]
    cb08:	vmov.f64	d17, #112	; 0x3f800000  1.0
    cb0c:	vdiv.f64	d16, d17, d16
    cb10:	vstr	d16, [sp]
    cb14:	b	cb4c <ipow+0x94>
    cb18:	b	cb1c <ipow+0x64>
    cb1c:	ldr	r0, [sp, #12]
    cb20:	mvn	r1, #0
    cb24:	add	r1, r0, r1
    cb28:	str	r1, [sp, #12]
    cb2c:	cmp	r0, #0
    cb30:	beq	cb48 <ipow+0x90>
    cb34:	vldr	d16, [sp, #16]
    cb38:	vldr	d17, [sp]
    cb3c:	vmul.f64	d16, d17, d16
    cb40:	vstr	d16, [sp]
    cb44:	b	cb1c <ipow+0x64>
    cb48:	b	cb4c <ipow+0x94>
    cb4c:	vldr	d0, [sp]
    cb50:	add	sp, sp, #24
    cb54:	bx	lr

0000cb58 <transpose_array>:
    cb58:	push	{fp, lr}
    cb5c:	mov	fp, sp
    cb60:	sub	sp, sp, #208	; 0xd0
    cb64:	sub	r3, fp, #48	; 0x30
    cb68:	str	r0, [fp, #-8]
    cb6c:	str	r1, [fp, #-12]
    cb70:	str	r2, [fp, #-16]
    cb74:	movw	r0, #0
    cb78:	str	r0, [sp, #40]	; 0x28
    cb7c:	ldr	r0, [fp, #-8]
    cb80:	sub	r1, fp, #52	; 0x34
    cb84:	mov	r2, r3
    cb88:	bl	0 <coda_cursor_get_array_dim>
    cb8c:	cmp	r0, #0
    cb90:	beq	cba0 <transpose_array+0x48>
    cb94:	mvn	r0, #0
    cb98:	str	r0, [fp, #-4]
    cb9c:	b	d1fc <transpose_array+0x6a4>
    cba0:	ldr	r0, [fp, #-52]	; 0xffffffcc
    cba4:	cmp	r0, #1
    cba8:	bgt	cbb8 <transpose_array+0x60>
    cbac:	movw	r0, #0
    cbb0:	str	r0, [fp, #-4]
    cbb4:	b	d1fc <transpose_array+0x6a4>
    cbb8:	ldr	r0, [fp, #-12]
    cbbc:	str	r0, [sp, #32]
    cbc0:	movw	r0, #1
    cbc4:	str	r0, [fp, #-56]	; 0xffffffc8
    cbc8:	movw	r0, #0
    cbcc:	str	r0, [sp, #36]	; 0x24
    cbd0:	ldr	r0, [sp, #36]	; 0x24
    cbd4:	ldr	r1, [fp, #-52]	; 0xffffffcc
    cbd8:	cmp	r0, r1
    cbdc:	bge	cc38 <transpose_array+0xe0>
    cbe0:	ldr	r0, [sp, #36]	; 0x24
    cbe4:	sub	r1, fp, #48	; 0x30
    cbe8:	ldr	r0, [r1, r0, lsl #2]
    cbec:	ldr	r2, [fp, #-56]	; 0xffffffc8
    cbf0:	mul	r0, r2, r0
    cbf4:	str	r0, [fp, #-56]	; 0xffffffc8
    cbf8:	ldr	r0, [sp, #36]	; 0x24
    cbfc:	add	r2, sp, #80	; 0x50
    cc00:	mov	r3, #0
    cc04:	str	r3, [r2, r0, lsl #2]
    cc08:	ldr	r0, [fp, #-52]	; 0xffffffcc
    cc0c:	sub	r0, r0, #1
    cc10:	ldr	r2, [sp, #36]	; 0x24
    cc14:	sub	r0, r0, r2
    cc18:	ldr	r0, [r1, r0, lsl #2]
    cc1c:	add	r1, sp, #44	; 0x2c
    cc20:	add	r1, r1, r2, lsl #2
    cc24:	str	r0, [r1]
    cc28:	ldr	r0, [sp, #36]	; 0x24
    cc2c:	add	r0, r0, #1
    cc30:	str	r0, [sp, #36]	; 0x24
    cc34:	b	cbd0 <transpose_array+0x78>
    cc38:	ldr	r0, [fp, #-56]	; 0xffffffc8
    cc3c:	cmp	r0, #1
    cc40:	bgt	cc50 <transpose_array+0xf8>
    cc44:	movw	r0, #0
    cc48:	str	r0, [fp, #-4]
    cc4c:	b	d1fc <transpose_array+0x6a4>
    cc50:	ldr	r0, [fp, #-52]	; 0xffffffcc
    cc54:	sub	r1, fp, #92	; 0x5c
    cc58:	mov	r2, #1
    cc5c:	str	r2, [r1, r0, lsl #2]
    cc60:	ldr	r0, [fp, #-52]	; 0xffffffcc
    cc64:	add	r1, sp, #44	; 0x2c
    cc68:	add	r0, r1, r0, lsl #2
    cc6c:	movw	r1, #1
    cc70:	str	r1, [r0]
    cc74:	ldr	r0, [fp, #-52]	; 0xffffffcc
    cc78:	str	r0, [sp, #36]	; 0x24
    cc7c:	ldr	r0, [sp, #36]	; 0x24
    cc80:	cmp	r0, #0
    cc84:	ble	ccc0 <transpose_array+0x168>
    cc88:	ldr	r0, [sp, #36]	; 0x24
    cc8c:	sub	r1, fp, #92	; 0x5c
    cc90:	ldr	r2, [r1, r0, lsl #2]
    cc94:	add	r3, sp, #44	; 0x2c
    cc98:	ldr	r3, [r3, r0, lsl #2]
    cc9c:	mul	r2, r2, r3
    cca0:	sub	r0, r0, #1
    cca4:	add	r0, r1, r0, lsl #2
    cca8:	str	r2, [r0]
    ccac:	ldr	r0, [sp, #36]	; 0x24
    ccb0:	mvn	r1, #0
    ccb4:	add	r0, r0, r1
    ccb8:	str	r0, [sp, #36]	; 0x24
    ccbc:	b	cc7c <transpose_array+0x124>
    ccc0:	ldr	r0, [fp, #-52]	; 0xffffffcc
    ccc4:	add	r1, sp, #44	; 0x2c
    ccc8:	mov	r2, #0
    cccc:	str	r2, [r1, r0, lsl #2]
    ccd0:	ldr	r0, [fp, #-52]	; 0xffffffcc
    ccd4:	add	r1, sp, #80	; 0x50
    ccd8:	add	r0, r1, r0, lsl #2
    ccdc:	movw	r1, #0
    cce0:	str	r1, [r0]
    cce4:	ldr	r0, [fp, #-56]	; 0xffffffc8
    cce8:	ldr	r1, [fp, #-16]
    ccec:	mul	r0, r0, r1
    ccf0:	bl	0 <malloc>
    ccf4:	str	r0, [sp, #28]
    ccf8:	ldr	r0, [sp, #28]
    ccfc:	movw	r1, #0
    cd00:	cmp	r0, r1
    cd04:	bne	cd40 <transpose_array+0x1e8>
    cd08:	ldr	r0, [fp, #-56]	; 0xffffffc8
    cd0c:	ldr	r1, [fp, #-16]
    cd10:	mul	r2, r0, r1
    cd14:	mvn	r0, #0
    cd18:	movw	r1, #0
    cd1c:	movt	r1, #0
    cd20:	movw	r3, #0
    cd24:	movt	r3, #0
    cd28:	movw	ip, #93	; 0x5d
    cd2c:	str	ip, [sp]
    cd30:	bl	0 <coda_set_error>
    cd34:	mvn	r0, #0
    cd38:	str	r0, [fp, #-4]
    cd3c:	b	d1fc <transpose_array+0x6a4>
    cd40:	ldr	r0, [fp, #-16]
    cd44:	sub	r0, r0, #1
    cd48:	cmp	r0, #7
    cd4c:	str	r0, [sp, #8]
    cd50:	bhi	d1b4 <transpose_array+0x65c>
    cd54:	add	r0, pc, #8
    cd58:	ldr	r1, [sp, #8]
    cd5c:	ldr	r0, [r0, r1, lsl #2]
    cd60:	mov	pc, r0
    cd64:	.word	0x0000cd84
    cd68:	.word	0x0000ce8c
    cd6c:	.word	0x0000d1b4
    cd70:	.word	0x0000cf9c
    cd74:	.word	0x0000d1b4
    cd78:	.word	0x0000d1b4
    cd7c:	.word	0x0000d1b4
    cd80:	.word	0x0000d0a4
    cd84:	movw	r0, #0
    cd88:	str	r0, [sp, #36]	; 0x24
    cd8c:	ldr	r0, [sp, #36]	; 0x24
    cd90:	ldr	r1, [fp, #-56]	; 0xffffffc8
    cd94:	cmp	r0, r1
    cd98:	bge	ce88 <transpose_array+0x330>
    cd9c:	mov	r0, #0
    cda0:	str	r0, [sp, #24]
    cda4:	ldr	r0, [sp, #32]
    cda8:	ldr	r1, [sp, #36]	; 0x24
    cdac:	ldrb	r0, [r0, r1]
    cdb0:	ldr	r1, [sp, #28]
    cdb4:	ldr	r2, [sp, #40]	; 0x28
    cdb8:	strb	r0, [r1, r2]
    cdbc:	ldr	r0, [sp, #24]
    cdc0:	sub	r1, fp, #92	; 0x5c
    cdc4:	ldr	r0, [r1, r0, lsl #2]
    cdc8:	ldr	r1, [sp, #40]	; 0x28
    cdcc:	add	r0, r1, r0
    cdd0:	str	r0, [sp, #40]	; 0x28
    cdd4:	ldr	r0, [sp, #24]
    cdd8:	add	r1, sp, #80	; 0x50
    cddc:	add	r0, r1, r0, lsl #2
    cde0:	ldr	r1, [r0]
    cde4:	add	r1, r1, #1
    cde8:	str	r1, [r0]
    cdec:	ldr	r0, [sp, #24]
    cdf0:	add	r1, sp, #80	; 0x50
    cdf4:	ldr	r1, [r1, r0, lsl #2]
    cdf8:	add	r2, sp, #44	; 0x2c
    cdfc:	add	r0, r2, r0, lsl #2
    ce00:	ldr	r0, [r0]
    ce04:	cmp	r1, r0
    ce08:	bne	ce74 <transpose_array+0x31c>
    ce0c:	ldr	r0, [sp, #24]
    ce10:	add	r1, sp, #80	; 0x50
    ce14:	mov	r2, #0
    ce18:	str	r2, [r1, r0, lsl #2]
    ce1c:	ldr	r0, [sp, #24]
    ce20:	sub	r2, fp, #92	; 0x5c
    ce24:	ldr	r3, [r2, r0, lsl #2]
    ce28:	add	ip, sp, #44	; 0x2c
    ce2c:	ldr	r0, [ip, r0, lsl #2]
    ce30:	ldr	ip, [sp, #40]	; 0x28
    ce34:	mls	r0, r3, r0, ip
    ce38:	str	r0, [sp, #40]	; 0x28
    ce3c:	ldr	r0, [sp, #24]
    ce40:	add	r0, r0, #1
    ce44:	str	r0, [sp, #24]
    ce48:	ldr	r0, [sp, #24]
    ce4c:	ldr	r0, [r2, r0, lsl #2]
    ce50:	ldr	r2, [sp, #40]	; 0x28
    ce54:	add	r0, r2, r0
    ce58:	str	r0, [sp, #40]	; 0x28
    ce5c:	ldr	r0, [sp, #24]
    ce60:	add	r0, r1, r0, lsl #2
    ce64:	ldr	r1, [r0]
    ce68:	add	r1, r1, #1
    ce6c:	str	r1, [r0]
    ce70:	b	cdec <transpose_array+0x294>
    ce74:	b	ce78 <transpose_array+0x320>
    ce78:	ldr	r0, [sp, #36]	; 0x24
    ce7c:	add	r0, r0, #1
    ce80:	str	r0, [sp, #36]	; 0x24
    ce84:	b	cd8c <transpose_array+0x234>
    ce88:	b	d1d4 <transpose_array+0x67c>
    ce8c:	movw	r0, #0
    ce90:	str	r0, [sp, #36]	; 0x24
    ce94:	ldr	r0, [sp, #36]	; 0x24
    ce98:	ldr	r1, [fp, #-56]	; 0xffffffc8
    ce9c:	cmp	r0, r1
    cea0:	bge	cf98 <transpose_array+0x440>
    cea4:	mov	r0, #0
    cea8:	str	r0, [sp, #20]
    ceac:	ldr	r0, [sp, #32]
    ceb0:	ldr	r1, [sp, #36]	; 0x24
    ceb4:	add	r0, r0, r1, lsl #1
    ceb8:	ldrh	r0, [r0]
    cebc:	ldr	r1, [sp, #28]
    cec0:	ldr	r2, [sp, #40]	; 0x28
    cec4:	add	r1, r1, r2, lsl #1
    cec8:	strh	r0, [r1]
    cecc:	ldr	r0, [sp, #20]
    ced0:	sub	r1, fp, #92	; 0x5c
    ced4:	ldr	r0, [r1, r0, lsl #2]
    ced8:	ldr	r1, [sp, #40]	; 0x28
    cedc:	add	r0, r1, r0
    cee0:	str	r0, [sp, #40]	; 0x28
    cee4:	ldr	r0, [sp, #20]
    cee8:	add	r1, sp, #80	; 0x50
    ceec:	add	r0, r1, r0, lsl #2
    cef0:	ldr	r1, [r0]
    cef4:	add	r1, r1, #1
    cef8:	str	r1, [r0]
    cefc:	ldr	r0, [sp, #20]
    cf00:	add	r1, sp, #80	; 0x50
    cf04:	ldr	r1, [r1, r0, lsl #2]
    cf08:	add	r2, sp, #44	; 0x2c
    cf0c:	add	r0, r2, r0, lsl #2
    cf10:	ldr	r0, [r0]
    cf14:	cmp	r1, r0
    cf18:	bne	cf84 <transpose_array+0x42c>
    cf1c:	ldr	r0, [sp, #20]
    cf20:	add	r1, sp, #80	; 0x50
    cf24:	mov	r2, #0
    cf28:	str	r2, [r1, r0, lsl #2]
    cf2c:	ldr	r0, [sp, #20]
    cf30:	sub	r2, fp, #92	; 0x5c
    cf34:	ldr	r3, [r2, r0, lsl #2]
    cf38:	add	ip, sp, #44	; 0x2c
    cf3c:	ldr	r0, [ip, r0, lsl #2]
    cf40:	ldr	ip, [sp, #40]	; 0x28
    cf44:	mls	r0, r3, r0, ip
    cf48:	str	r0, [sp, #40]	; 0x28
    cf4c:	ldr	r0, [sp, #20]
    cf50:	add	r0, r0, #1
    cf54:	str	r0, [sp, #20]
    cf58:	ldr	r0, [sp, #20]
    cf5c:	ldr	r0, [r2, r0, lsl #2]
    cf60:	ldr	r2, [sp, #40]	; 0x28
    cf64:	add	r0, r2, r0
    cf68:	str	r0, [sp, #40]	; 0x28
    cf6c:	ldr	r0, [sp, #20]
    cf70:	add	r0, r1, r0, lsl #2
    cf74:	ldr	r1, [r0]
    cf78:	add	r1, r1, #1
    cf7c:	str	r1, [r0]
    cf80:	b	cefc <transpose_array+0x3a4>
    cf84:	b	cf88 <transpose_array+0x430>
    cf88:	ldr	r0, [sp, #36]	; 0x24
    cf8c:	add	r0, r0, #1
    cf90:	str	r0, [sp, #36]	; 0x24
    cf94:	b	ce94 <transpose_array+0x33c>
    cf98:	b	d1d4 <transpose_array+0x67c>
    cf9c:	movw	r0, #0
    cfa0:	str	r0, [sp, #36]	; 0x24
    cfa4:	ldr	r0, [sp, #36]	; 0x24
    cfa8:	ldr	r1, [fp, #-56]	; 0xffffffc8
    cfac:	cmp	r0, r1
    cfb0:	bge	d0a0 <transpose_array+0x548>
    cfb4:	mov	r0, #0
    cfb8:	str	r0, [sp, #16]
    cfbc:	ldr	r0, [sp, #32]
    cfc0:	ldr	r1, [sp, #36]	; 0x24
    cfc4:	ldr	r0, [r0, r1, lsl #2]
    cfc8:	ldr	r1, [sp, #28]
    cfcc:	ldr	r2, [sp, #40]	; 0x28
    cfd0:	str	r0, [r1, r2, lsl #2]
    cfd4:	ldr	r0, [sp, #16]
    cfd8:	sub	r1, fp, #92	; 0x5c
    cfdc:	ldr	r0, [r1, r0, lsl #2]
    cfe0:	ldr	r1, [sp, #40]	; 0x28
    cfe4:	add	r0, r1, r0
    cfe8:	str	r0, [sp, #40]	; 0x28
    cfec:	ldr	r0, [sp, #16]
    cff0:	add	r1, sp, #80	; 0x50
    cff4:	add	r0, r1, r0, lsl #2
    cff8:	ldr	r1, [r0]
    cffc:	add	r1, r1, #1
    d000:	str	r1, [r0]
    d004:	ldr	r0, [sp, #16]
    d008:	add	r1, sp, #80	; 0x50
    d00c:	ldr	r1, [r1, r0, lsl #2]
    d010:	add	r2, sp, #44	; 0x2c
    d014:	add	r0, r2, r0, lsl #2
    d018:	ldr	r0, [r0]
    d01c:	cmp	r1, r0
    d020:	bne	d08c <transpose_array+0x534>
    d024:	ldr	r0, [sp, #16]
    d028:	add	r1, sp, #80	; 0x50
    d02c:	mov	r2, #0
    d030:	str	r2, [r1, r0, lsl #2]
    d034:	ldr	r0, [sp, #16]
    d038:	sub	r2, fp, #92	; 0x5c
    d03c:	ldr	r3, [r2, r0, lsl #2]
    d040:	add	ip, sp, #44	; 0x2c
    d044:	ldr	r0, [ip, r0, lsl #2]
    d048:	ldr	ip, [sp, #40]	; 0x28
    d04c:	mls	r0, r3, r0, ip
    d050:	str	r0, [sp, #40]	; 0x28
    d054:	ldr	r0, [sp, #16]
    d058:	add	r0, r0, #1
    d05c:	str	r0, [sp, #16]
    d060:	ldr	r0, [sp, #16]
    d064:	ldr	r0, [r2, r0, lsl #2]
    d068:	ldr	r2, [sp, #40]	; 0x28
    d06c:	add	r0, r2, r0
    d070:	str	r0, [sp, #40]	; 0x28
    d074:	ldr	r0, [sp, #16]
    d078:	add	r0, r1, r0, lsl #2
    d07c:	ldr	r1, [r0]
    d080:	add	r1, r1, #1
    d084:	str	r1, [r0]
    d088:	b	d004 <transpose_array+0x4ac>
    d08c:	b	d090 <transpose_array+0x538>
    d090:	ldr	r0, [sp, #36]	; 0x24
    d094:	add	r0, r0, #1
    d098:	str	r0, [sp, #36]	; 0x24
    d09c:	b	cfa4 <transpose_array+0x44c>
    d0a0:	b	d1d4 <transpose_array+0x67c>
    d0a4:	movw	r0, #0
    d0a8:	str	r0, [sp, #36]	; 0x24
    d0ac:	ldr	r0, [sp, #36]	; 0x24
    d0b0:	ldr	r1, [fp, #-56]	; 0xffffffc8
    d0b4:	cmp	r0, r1
    d0b8:	bge	d1b0 <transpose_array+0x658>
    d0bc:	mov	r0, #0
    d0c0:	str	r0, [sp, #12]
    d0c4:	ldr	r0, [sp, #32]
    d0c8:	ldr	r1, [sp, #36]	; 0x24
    d0cc:	ldr	r1, [r0, r1, lsl #3]!
    d0d0:	ldr	r0, [r0, #4]
    d0d4:	ldr	r2, [sp, #28]
    d0d8:	ldr	r3, [sp, #40]	; 0x28
    d0dc:	str	r1, [r2, r3, lsl #3]!
    d0e0:	str	r0, [r2, #4]
    d0e4:	ldr	r0, [sp, #12]
    d0e8:	sub	r1, fp, #92	; 0x5c
    d0ec:	ldr	r0, [r1, r0, lsl #2]
    d0f0:	ldr	r1, [sp, #40]	; 0x28
    d0f4:	add	r0, r1, r0
    d0f8:	str	r0, [sp, #40]	; 0x28
    d0fc:	ldr	r0, [sp, #12]
    d100:	add	r1, sp, #80	; 0x50
    d104:	add	r0, r1, r0, lsl #2
    d108:	ldr	r1, [r0]
    d10c:	add	r1, r1, #1
    d110:	str	r1, [r0]
    d114:	ldr	r0, [sp, #12]
    d118:	add	r1, sp, #80	; 0x50
    d11c:	ldr	r1, [r1, r0, lsl #2]
    d120:	add	r2, sp, #44	; 0x2c
    d124:	add	r0, r2, r0, lsl #2
    d128:	ldr	r0, [r0]
    d12c:	cmp	r1, r0
    d130:	bne	d19c <transpose_array+0x644>
    d134:	ldr	r0, [sp, #12]
    d138:	add	r1, sp, #80	; 0x50
    d13c:	mov	r2, #0
    d140:	str	r2, [r1, r0, lsl #2]
    d144:	ldr	r0, [sp, #12]
    d148:	sub	r2, fp, #92	; 0x5c
    d14c:	ldr	r3, [r2, r0, lsl #2]
    d150:	add	ip, sp, #44	; 0x2c
    d154:	ldr	r0, [ip, r0, lsl #2]
    d158:	ldr	ip, [sp, #40]	; 0x28
    d15c:	mls	r0, r3, r0, ip
    d160:	str	r0, [sp, #40]	; 0x28
    d164:	ldr	r0, [sp, #12]
    d168:	add	r0, r0, #1
    d16c:	str	r0, [sp, #12]
    d170:	ldr	r0, [sp, #12]
    d174:	ldr	r0, [r2, r0, lsl #2]
    d178:	ldr	r2, [sp, #40]	; 0x28
    d17c:	add	r0, r2, r0
    d180:	str	r0, [sp, #40]	; 0x28
    d184:	ldr	r0, [sp, #12]
    d188:	add	r0, r1, r0, lsl #2
    d18c:	ldr	r1, [r0]
    d190:	add	r1, r1, #1
    d194:	str	r1, [r0]
    d198:	b	d114 <transpose_array+0x5bc>
    d19c:	b	d1a0 <transpose_array+0x648>
    d1a0:	ldr	r0, [sp, #36]	; 0x24
    d1a4:	add	r0, r0, #1
    d1a8:	str	r0, [sp, #36]	; 0x24
    d1ac:	b	d0ac <transpose_array+0x554>
    d1b0:	b	d1d4 <transpose_array+0x67c>
    d1b4:	movw	r0, #0
    d1b8:	movt	r0, #0
    d1bc:	movw	r1, #0
    d1c0:	movt	r1, #0
    d1c4:	movw	r2, #172	; 0xac
    d1c8:	movw	r3, #0
    d1cc:	movt	r3, #0
    d1d0:	bl	0 <__assert_fail>
    d1d4:	ldr	r0, [fp, #-12]
    d1d8:	ldr	r1, [sp, #28]
    d1dc:	ldr	r2, [fp, #-56]	; 0xffffffc8
    d1e0:	ldr	r3, [fp, #-16]
    d1e4:	mul	r2, r2, r3
    d1e8:	bl	0 <memcpy>
    d1ec:	ldr	r0, [sp, #28]
    d1f0:	bl	0 <free>
    d1f4:	movw	r0, #0
    d1f8:	str	r0, [fp, #-4]
    d1fc:	ldr	r0, [fp, #-4]
    d200:	mov	sp, fp
    d204:	pop	{fp, pc}

0000d208 <read_partial_array>:
    d208:	push	{r4, r5, fp, lr}
    d20c:	add	fp, sp, #8
    d210:	sub	sp, sp, #568	; 0x238
    d214:	ldr	ip, [fp, #12]
    d218:	ldr	lr, [fp, #8]
    d21c:	str	r0, [fp, #-16]
    d220:	str	r1, [fp, #-20]	; 0xffffffec
    d224:	str	r2, [fp, #-24]	; 0xffffffe8
    d228:	str	r3, [fp, #-28]	; 0xffffffe4
    d22c:	ldr	r0, [fp, #-16]
    d230:	add	r1, sp, #24
    d234:	str	r0, [sp, #16]
    d238:	mov	r0, r1
    d23c:	ldr	r1, [sp, #16]
    d240:	movw	r2, #520	; 0x208
    d244:	str	lr, [sp, #12]
    d248:	str	ip, [sp, #8]
    d24c:	bl	0 <memcpy>
    d250:	ldr	r0, [fp, #-28]	; 0xffffffe4
    d254:	cmp	r0, #0
    d258:	ble	d320 <read_partial_array+0x118>
    d25c:	ldr	r1, [fp, #-24]	; 0xffffffe8
    d260:	add	r0, sp, #24
    d264:	bl	0 <coda_cursor_goto_array_element_by_index>
    d268:	cmp	r0, #0
    d26c:	beq	d27c <read_partial_array+0x74>
    d270:	mvn	r0, #0
    d274:	str	r0, [fp, #-12]
    d278:	b	d328 <read_partial_array+0x120>
    d27c:	movw	r0, #0
    d280:	str	r0, [sp, #20]
    d284:	ldr	r0, [sp, #20]
    d288:	ldr	r1, [fp, #-28]	; 0xffffffe4
    d28c:	cmp	r0, r1
    d290:	bge	d31c <read_partial_array+0x114>
    d294:	ldr	r0, [fp, #-20]	; 0xffffffec
    d298:	ldr	r1, [fp, #8]
    d29c:	ldr	r2, [sp, #20]
    d2a0:	ldr	r3, [fp, #12]
    d2a4:	mul	r2, r2, r3
    d2a8:	add	r1, r1, r2
    d2ac:	add	r2, sp, #24
    d2b0:	str	r0, [sp, #4]
    d2b4:	mov	r0, r2
    d2b8:	ldr	r2, [sp, #4]
    d2bc:	blx	r2
    d2c0:	cmp	r0, #0
    d2c4:	beq	d2d4 <read_partial_array+0xcc>
    d2c8:	mvn	r0, #0
    d2cc:	str	r0, [fp, #-12]
    d2d0:	b	d328 <read_partial_array+0x120>
    d2d4:	ldr	r0, [sp, #20]
    d2d8:	ldr	r1, [fp, #-28]	; 0xffffffe4
    d2dc:	sub	r1, r1, #1
    d2e0:	cmp	r0, r1
    d2e4:	bge	d308 <read_partial_array+0x100>
    d2e8:	add	r0, sp, #24
    d2ec:	bl	0 <coda_cursor_goto_next_array_element>
    d2f0:	cmp	r0, #0
    d2f4:	beq	d304 <read_partial_array+0xfc>
    d2f8:	mvn	r0, #0
    d2fc:	str	r0, [fp, #-12]
    d300:	b	d328 <read_partial_array+0x120>
    d304:	b	d308 <read_partial_array+0x100>
    d308:	b	d30c <read_partial_array+0x104>
    d30c:	ldr	r0, [sp, #20]
    d310:	add	r0, r0, #1
    d314:	str	r0, [sp, #20]
    d318:	b	d284 <read_partial_array+0x7c>
    d31c:	b	d320 <read_partial_array+0x118>
    d320:	movw	r0, #0
    d324:	str	r0, [fp, #-12]
    d328:	ldr	r0, [fp, #-12]
    d32c:	sub	sp, fp, #8
    d330:	pop	{r4, r5, fp, pc}
