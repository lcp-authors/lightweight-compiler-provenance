
../compcert-repos/dvidelabs-flatcc-3b39ef7/test/monster_test/CMakeFiles/monster_test.dir/monster_test.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <Fantasy_Attacker_verify_table>:
       0:	mov	r3, #4
       4:	mov	r2, r3
       8:	mov	r1, #0
       c:	b	0 <flatcc_verify_field>

00000010 <MyGame_Example_with_emptystruct_verify_table>:
      10:	mov	r2, #0
      14:	mov	r1, r2
      18:	mov	r3, #1
      1c:	b	0 <flatcc_verify_field>

00000020 <hexdump>:
      20:	cmp	r0, #0
      24:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
      28:	mov	r6, r1
      2c:	sub	sp, sp, #28
      30:	mov	r8, r2
      34:	mov	r5, r3
      38:	beq	4c <hexdump+0x2c>
      3c:	mov	r2, r0
      40:	ldr	r1, [pc, #264]	; 150 <hexdump+0x130>
      44:	mov	r0, r3
      48:	bl	0 <fprintf>
      4c:	cmp	r8, #0
      50:	beq	148 <hexdump+0x128>
      54:	mov	r4, #0
      58:	ldr	fp, [pc, #244]	; 154 <hexdump+0x134>
      5c:	ldr	sl, [pc, #244]	; 158 <hexdump+0x138>
      60:	sub	r6, r6, #1
      64:	add	r9, sp, #4
      68:	b	d0 <hexdump+0xb0>
      6c:	cmp	r4, #0
      70:	beq	78 <hexdump+0x58>
      74:	bl	0 <fprintf>
      78:	mov	r2, r4
      7c:	ldr	r1, [pc, #216]	; 15c <hexdump+0x13c>
      80:	mov	r0, r5
      84:	bl	0 <fprintf>
      88:	ldrb	r2, [r6, #1]
      8c:	mov	r1, sl
      90:	mov	r0, r5
      94:	bl	0 <fprintf>
      98:	ldrb	r2, [r6, #1]!
      9c:	add	r3, sp, #24
      a0:	add	r3, r3, r7
      a4:	sub	r1, r2, #32
      a8:	cmp	r1, #94	; 0x5e
      ac:	addls	r3, sp, #24
      b0:	addls	r3, r3, r7
      b4:	movhi	r2, #46	; 0x2e
      b8:	add	r4, r4, #1
      bc:	strb	r2, [r3, #-20]	; 0xffffffec
      c0:	cmp	r8, r4
      c4:	mov	r2, #0
      c8:	strb	r2, [r3, #-19]	; 0xffffffed
      cc:	beq	fc <hexdump+0xdc>
      d0:	ands	r7, r4, #15
      d4:	mov	r2, r9
      d8:	mov	r1, fp
      dc:	mov	r0, r5
      e0:	beq	6c <hexdump+0x4c>
      e4:	tst	r4, #7
      e8:	bne	88 <hexdump+0x68>
      ec:	mov	r1, r5
      f0:	mov	r0, #32
      f4:	bl	0 <fputc>
      f8:	b	88 <hexdump+0x68>
      fc:	tst	r4, #15
     100:	beq	130 <hexdump+0x110>
     104:	ldr	r8, [pc, #84]	; 160 <hexdump+0x140>
     108:	mov	r7, #3
     10c:	mov	r6, #1
     110:	add	r4, r4, #1
     114:	mov	r3, r5
     118:	mov	r2, r7
     11c:	mov	r1, r6
     120:	mov	r0, r8
     124:	bl	0 <fwrite>
     128:	tst	r4, #15
     12c:	bne	110 <hexdump+0xf0>
     130:	mov	r2, r9
     134:	mov	r0, r5
     138:	ldr	r1, [pc, #20]	; 154 <hexdump+0x134>
     13c:	bl	0 <fprintf>
     140:	add	sp, sp, #28
     144:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
     148:	add	r9, sp, #4
     14c:	b	130 <hexdump+0x110>
     150:	.word	0x00000000
     154:	.word	0x00000008
     158:	.word	0x00000018
     15c:	.word	0x00000010
     160:	.word	0x00000020

00000164 <elapsed_realtime>:
     164:	push	{r4, lr}
     168:	sub	sp, sp, #8
     16c:	mov	r1, #0
     170:	mov	r0, sp
     174:	bl	0 <gettimeofday>
     178:	ldr	r2, [pc, #88]	; 1d8 <elapsed_realtime+0x74>
     17c:	vldr	d5, [pc, #76]	; 1d0 <elapsed_realtime+0x6c>
     180:	ldr	ip, [r2]
     184:	cmp	ip, #0
     188:	moveq	r4, sp
     18c:	ldmeq	r4, {r0, r1}
     190:	stmeq	r2, {r0, r1}
     194:	ldr	r3, [r2, #4]
     198:	ldr	r2, [sp, #4]
     19c:	moveq	ip, r0
     1a0:	sub	r2, r2, r3
     1a4:	ldr	r3, [sp]
     1a8:	vmov	s15, r2
     1ac:	sub	r3, r3, ip
     1b0:	vmov	s0, r3
     1b4:	vcvt.f64.s32	d7, s15
     1b8:	vcvt.f64.s32	d0, s0
     1bc:	vdiv.f64	d6, d7, d5
     1c0:	vadd.f64	d0, d6, d0
     1c4:	add	sp, sp, #8
     1c8:	pop	{r4, pc}
     1cc:	nop			; (mov r0, r0)
     1d0:	.word	0x00000000
     1d4:	.word	0x412e8480
     1d8:	.word	0x00000000

000001dc <flatbuffers_uint8_vec_at.part.14>:
     1dc:	push	{r4, lr}
     1e0:	ldr	r3, [pc, #12]	; 1f4 <flatbuffers_uint8_vec_at.part.14+0x18>
     1e4:	ldr	r2, [pc, #12]	; 1f8 <flatbuffers_uint8_vec_at.part.14+0x1c>
     1e8:	ldr	r1, [pc, #12]	; 1fc <flatbuffers_uint8_vec_at.part.14+0x20>
     1ec:	ldr	r0, [pc, #12]	; 200 <flatbuffers_uint8_vec_at.part.14+0x24>
     1f0:	bl	0 <__assert_fail>
     1f4:	.word	0x000000ac
     1f8:	.word	0x0000018b
     1fc:	.word	0x000000b8
     200:	.word	0x0000012c

00000204 <flatbuffers_string_vec_at.part.20>:
     204:	push	{r4, lr}
     208:	mov	r2, #108	; 0x6c
     20c:	ldr	r3, [pc, #8]	; 21c <flatbuffers_string_vec_at.part.20+0x18>
     210:	ldr	r1, [pc, #8]	; 220 <flatbuffers_string_vec_at.part.20+0x1c>
     214:	ldr	r0, [pc, #8]	; 224 <flatbuffers_string_vec_at.part.20+0x20>
     218:	bl	0 <__assert_fail>
     21c:	.word	0x00000174
     220:	.word	0x000000b8
     224:	.word	0x0000012c

00000228 <MyGame_Example_Monster_vec_at.part.23>:
     228:	push	{r4, lr}
     22c:	ldr	r3, [pc, #12]	; 240 <MyGame_Example_Monster_vec_at.part.23+0x18>
     230:	ldr	r2, [pc, #12]	; 244 <MyGame_Example_Monster_vec_at.part.23+0x1c>
     234:	ldr	r1, [pc, #12]	; 248 <MyGame_Example_Monster_vec_at.part.23+0x20>
     238:	ldr	r0, [pc, #12]	; 24c <MyGame_Example_Monster_vec_at.part.23+0x24>
     23c:	bl	0 <__assert_fail>
     240:	.word	0x000001e4
     244:	.word	0x000002b5
     248:	.word	0x00000024
     24c:	.word	0x0000012c

00000250 <MyGame_Example_Monster_name>:
     250:	cmp	r0, #0
     254:	push	{r4, lr}
     258:	beq	2a4 <MyGame_Example_Monster_name+0x54>
     25c:	ldr	r3, [r0]
     260:	sub	r3, r0, r3
     264:	ldrh	r2, [r3]
     268:	cmp	r2, #11
     26c:	bls	290 <MyGame_Example_Monster_name+0x40>
     270:	ldrh	r2, [r3, #10]
     274:	cmp	r2, #0
     278:	beq	290 <MyGame_Example_Monster_name+0x40>
     27c:	ldr	r3, [r0, r2]
     280:	add	r0, r0, r2
     284:	add	r3, r3, #4
     288:	add	r0, r0, r3
     28c:	pop	{r4, pc}
     290:	ldr	r3, [pc, #16]	; 2a8 <MyGame_Example_Monster_name+0x58>
     294:	ldr	r2, [pc, #16]	; 2ac <MyGame_Example_Monster_name+0x5c>
     298:	ldr	r1, [pc, #16]	; 2b0 <MyGame_Example_Monster_name+0x60>
     29c:	ldr	r0, [pc, #16]	; 2b4 <MyGame_Example_Monster_name+0x64>
     2a0:	bl	0 <__assert_fail>
     2a4:	bl	220 <flatbuffers_string_vec_at.part.20+0x1c>
     2a8:	.word	0x00000244
     2ac:	.word	0x000002bb
     2b0:	.word	0x00000024
     2b4:	.word	0x00000164

000002b8 <MyGame_Example_TestJSONPrefixParsing3_verify_table>:
     2b8:	mov	r3, #8
     2bc:	push	{r4, lr}
     2c0:	mov	r2, r3
     2c4:	mov	r1, #0
     2c8:	mov	r4, r0
     2cc:	bl	0 <flatcc_verify_field>
     2d0:	cmp	r0, #0
     2d4:	popne	{r4, pc}
     2d8:	mov	r3, #4
     2dc:	mov	r0, r4
     2e0:	mov	r2, r3
     2e4:	mov	r1, #1
     2e8:	pop	{r4, lr}
     2ec:	b	0 <flatcc_verify_field>

000002f0 <MyGame_Example_TestSimpleTableWithEnum_verify_table>:
     2f0:	mov	r3, #1
     2f4:	push	{r4, lr}
     2f8:	mov	r2, r3
     2fc:	mov	r1, #0
     300:	mov	r4, r0
     304:	bl	0 <flatcc_verify_field>
     308:	cmp	r0, #0
     30c:	popne	{r4, pc}
     310:	mov	r3, #1
     314:	mov	r2, r3
     318:	mov	r1, r3
     31c:	mov	r0, r4
     320:	bl	0 <flatcc_verify_field>
     324:	cmp	r0, #0
     328:	popne	{r4, pc}
     32c:	mov	r3, #1
     330:	mov	r2, r3
     334:	mov	r1, #2
     338:	mov	r0, r4
     33c:	bl	0 <flatcc_verify_field>
     340:	cmp	r0, #0
     344:	popne	{r4, pc}
     348:	mov	r3, #1
     34c:	mov	r0, r4
     350:	mov	r2, r3
     354:	mov	r1, #3
     358:	pop	{r4, lr}
     35c:	b	0 <flatcc_verify_field>

00000360 <MyGame_Example_TypeAliases_verify_table>:
     360:	mov	r3, #1
     364:	push	{r4, lr}
     368:	mov	r2, r3
     36c:	sub	sp, sp, #8
     370:	mov	r1, #0
     374:	mov	r4, r0
     378:	bl	0 <flatcc_verify_field>
     37c:	cmp	r0, #0
     380:	beq	38c <MyGame_Example_TypeAliases_verify_table+0x2c>
     384:	add	sp, sp, #8
     388:	pop	{r4, pc}
     38c:	mov	r3, #1
     390:	mov	r2, r3
     394:	mov	r1, r3
     398:	mov	r0, r4
     39c:	bl	0 <flatcc_verify_field>
     3a0:	cmp	r0, #0
     3a4:	bne	384 <MyGame_Example_TypeAliases_verify_table+0x24>
     3a8:	mov	r3, #2
     3ac:	mov	r2, r3
     3b0:	mov	r1, r3
     3b4:	mov	r0, r4
     3b8:	bl	0 <flatcc_verify_field>
     3bc:	cmp	r0, #0
     3c0:	bne	384 <MyGame_Example_TypeAliases_verify_table+0x24>
     3c4:	mov	r3, #2
     3c8:	mov	r2, r3
     3cc:	mov	r1, #3
     3d0:	mov	r0, r4
     3d4:	bl	0 <flatcc_verify_field>
     3d8:	cmp	r0, #0
     3dc:	bne	384 <MyGame_Example_TypeAliases_verify_table+0x24>
     3e0:	mov	r3, #4
     3e4:	mov	r2, r3
     3e8:	mov	r1, r3
     3ec:	mov	r0, r4
     3f0:	bl	0 <flatcc_verify_field>
     3f4:	cmp	r0, #0
     3f8:	bne	384 <MyGame_Example_TypeAliases_verify_table+0x24>
     3fc:	mov	r3, #4
     400:	mov	r2, r3
     404:	mov	r1, #5
     408:	mov	r0, r4
     40c:	bl	0 <flatcc_verify_field>
     410:	cmp	r0, #0
     414:	bne	384 <MyGame_Example_TypeAliases_verify_table+0x24>
     418:	mov	r3, #8
     41c:	mov	r2, r3
     420:	mov	r1, #6
     424:	mov	r0, r4
     428:	bl	0 <flatcc_verify_field>
     42c:	cmp	r0, #0
     430:	bne	384 <MyGame_Example_TypeAliases_verify_table+0x24>
     434:	mov	r3, #8
     438:	mov	r2, r3
     43c:	mov	r1, #7
     440:	mov	r0, r4
     444:	bl	0 <flatcc_verify_field>
     448:	cmp	r0, #0
     44c:	bne	384 <MyGame_Example_TypeAliases_verify_table+0x24>
     450:	mov	r3, #4
     454:	mov	r2, r3
     458:	mov	r1, #8
     45c:	mov	r0, r4
     460:	bl	0 <flatcc_verify_field>
     464:	cmp	r0, #0
     468:	bne	384 <MyGame_Example_TypeAliases_verify_table+0x24>
     46c:	mov	r3, #8
     470:	mov	r2, r3
     474:	mov	r1, #9
     478:	mov	r0, r4
     47c:	bl	0 <flatcc_verify_field>
     480:	cmp	r0, #0
     484:	bne	384 <MyGame_Example_TypeAliases_verify_table+0x24>
     488:	mvn	r2, #0
     48c:	mov	r3, #1
     490:	str	r2, [sp, #4]
     494:	str	r3, [sp]
     498:	mov	r2, #0
     49c:	mov	r1, #10
     4a0:	mov	r0, r4
     4a4:	bl	0 <flatcc_verify_vector_field>
     4a8:	cmp	r0, #0
     4ac:	bne	384 <MyGame_Example_TypeAliases_verify_table+0x24>
     4b0:	mvn	r1, #-536870912	; 0xe0000000
     4b4:	mov	r3, #8
     4b8:	mov	r2, r0
     4bc:	str	r1, [sp, #4]
     4c0:	mov	r0, r4
     4c4:	str	r3, [sp]
     4c8:	mov	r1, #11
     4cc:	bl	0 <flatcc_verify_vector_field>
     4d0:	b	384 <MyGame_Example_TypeAliases_verify_table+0x24>

000004d4 <MyGame_Example_Stat_verify_table>:
     4d4:	mov	r2, #0
     4d8:	push	{r4, lr}
     4dc:	mov	r1, r2
     4e0:	mov	r4, r0
     4e4:	bl	0 <flatcc_verify_string_field>
     4e8:	cmp	r0, #0
     4ec:	popne	{r4, pc}
     4f0:	mov	r3, #8
     4f4:	mov	r2, r3
     4f8:	mov	r1, #1
     4fc:	mov	r0, r4
     500:	bl	0 <flatcc_verify_field>
     504:	cmp	r0, #0
     508:	popne	{r4, pc}
     50c:	mov	r3, #2
     510:	mov	r0, r4
     514:	mov	r2, r3
     518:	mov	r1, r3
     51c:	pop	{r4, lr}
     520:	b	0 <flatcc_verify_field>

00000524 <MyGame_Example_TestJSONPrefixParsing_verify_table>:
     524:	mov	r2, #0
     528:	push	{r4, lr}
     52c:	mov	r1, r2
     530:	mov	r4, r0
     534:	bl	0 <flatcc_verify_string_field>
     538:	cmp	r0, #0
     53c:	popne	{r4, pc}
     540:	mov	r3, #4
     544:	mov	r2, r3
     548:	mov	r1, #1
     54c:	mov	r0, r4
     550:	bl	0 <flatcc_verify_field>
     554:	cmp	r0, #0
     558:	popne	{r4, pc}
     55c:	mov	r2, r0
     560:	mov	r1, #2
     564:	mov	r0, r4
     568:	bl	0 <flatcc_verify_string_field>
     56c:	cmp	r0, #0
     570:	popne	{r4, pc}
     574:	mov	r3, #8
     578:	mov	r2, r3
     57c:	mov	r1, #3
     580:	mov	r0, r4
     584:	bl	0 <flatcc_verify_field>
     588:	cmp	r0, #0
     58c:	popne	{r4, pc}
     590:	mov	r2, r0
     594:	mov	r1, #4
     598:	mov	r0, r4
     59c:	bl	0 <flatcc_verify_string_field>
     5a0:	cmp	r0, #0
     5a4:	popne	{r4, pc}
     5a8:	mov	r3, #8
     5ac:	mov	r2, r3
     5b0:	mov	r1, #5
     5b4:	mov	r0, r4
     5b8:	bl	0 <flatcc_verify_field>
     5bc:	cmp	r0, #0
     5c0:	popne	{r4, pc}
     5c4:	mov	r3, #4
     5c8:	mov	r2, r3
     5cc:	mov	r1, #6
     5d0:	mov	r0, r4
     5d4:	bl	0 <flatcc_verify_field>
     5d8:	cmp	r0, #0
     5dc:	popne	{r4, pc}
     5e0:	mov	r3, #8
     5e4:	mov	r2, r3
     5e8:	mov	r1, #7
     5ec:	mov	r0, r4
     5f0:	bl	0 <flatcc_verify_field>
     5f4:	cmp	r0, #0
     5f8:	popne	{r4, pc}
     5fc:	mov	r3, #4
     600:	mov	r0, r4
     604:	mov	r2, r3
     608:	mov	r1, #8
     60c:	pop	{r4, lr}
     610:	b	0 <flatcc_verify_field>

00000614 <MyGame_Example_TestJSONPrefix_verify_table>:
     614:	mov	r2, #0
     618:	push	{r4, lr}
     61c:	mov	r1, r2
     620:	ldr	r3, [pc, #64]	; 668 <MyGame_Example_TestJSONPrefix_verify_table+0x54>
     624:	mov	r4, r0
     628:	bl	0 <flatcc_verify_table_field>
     62c:	cmp	r0, #0
     630:	popne	{r4, pc}
     634:	mov	r2, r0
     638:	ldr	r3, [pc, #44]	; 66c <MyGame_Example_TestJSONPrefix_verify_table+0x58>
     63c:	mov	r1, #1
     640:	mov	r0, r4
     644:	bl	0 <flatcc_verify_table_field>
     648:	cmp	r0, #0
     64c:	popne	{r4, pc}
     650:	mov	r2, r0
     654:	ldr	r3, [pc, #20]	; 670 <MyGame_Example_TestJSONPrefix_verify_table+0x5c>
     658:	mov	r0, r4
     65c:	mov	r1, #2
     660:	pop	{r4, lr}
     664:	b	0 <flatcc_verify_table_field>
	...

00000674 <MyGame_Example_Monster_verify_table>:
     674:	push	{r4, r5, r6, r7, r8, lr}
     678:	mov	r3, #16
     67c:	sub	sp, sp, #8
     680:	mov	r2, #32
     684:	mov	r1, #0
     688:	mov	r4, r0
     68c:	bl	0 <flatcc_verify_field>
     690:	cmp	r0, #0
     694:	beq	6a0 <MyGame_Example_Monster_verify_table+0x2c>
     698:	add	sp, sp, #8
     69c:	pop	{r4, r5, r6, r7, r8, pc}
     6a0:	mov	r3, #2
     6a4:	mov	r2, r3
     6a8:	mov	r1, r3
     6ac:	mov	r0, r4
     6b0:	bl	0 <flatcc_verify_field>
     6b4:	cmp	r0, #0
     6b8:	bne	698 <MyGame_Example_Monster_verify_table+0x24>
     6bc:	mov	r3, #2
     6c0:	mov	r2, r3
     6c4:	mov	r1, #1
     6c8:	mov	r0, r4
     6cc:	bl	0 <flatcc_verify_field>
     6d0:	cmp	r0, #0
     6d4:	bne	698 <MyGame_Example_Monster_verify_table+0x24>
     6d8:	mov	r2, #1
     6dc:	mov	r1, #3
     6e0:	mov	r0, r4
     6e4:	bl	0 <flatcc_verify_string_field>
     6e8:	cmp	r0, #0
     6ec:	bne	698 <MyGame_Example_Monster_verify_table+0x24>
     6f0:	mov	r3, #1
     6f4:	mov	r2, r3
     6f8:	mov	r1, #6
     6fc:	mov	r0, r4
     700:	bl	0 <flatcc_verify_field>
     704:	cmp	r0, #0
     708:	bne	698 <MyGame_Example_Monster_verify_table+0x24>
     70c:	mov	r5, #1
     710:	mvn	r6, #0
     714:	mov	r2, r0
     718:	stm	sp, {r5, r6}
     71c:	mov	r3, r5
     720:	mov	r1, #5
     724:	mov	r0, r4
     728:	bl	0 <flatcc_verify_vector_field>
     72c:	cmp	r0, #0
     730:	bne	698 <MyGame_Example_Monster_verify_table+0x24>
     734:	mov	r2, r0
     738:	ldr	r3, [pc, #840]	; a88 <MyGame_Example_Monster_verify_table+0x414>
     73c:	mov	r1, #11
     740:	mov	r0, r4
     744:	bl	0 <flatcc_verify_table_vector_field>
     748:	cmp	r0, #0
     74c:	bne	698 <MyGame_Example_Monster_verify_table+0x24>
     750:	mov	r2, r0
     754:	mov	r1, #10
     758:	mov	r0, r4
     75c:	bl	0 <flatcc_verify_string_vector_field>
     760:	cmp	r0, #0
     764:	bne	698 <MyGame_Example_Monster_verify_table+0x24>
     768:	mov	r2, r0
     76c:	mov	r1, #28
     770:	mov	r0, r4
     774:	bl	0 <flatcc_verify_string_vector_field>
     778:	cmp	r0, #0
     77c:	bne	698 <MyGame_Example_Monster_verify_table+0x24>
     780:	mov	r2, r0
     784:	stm	sp, {r5, r6}
     788:	mov	r3, r5
     78c:	mov	r1, #24
     790:	mov	r0, r4
     794:	bl	0 <flatcc_verify_vector_field>
     798:	cmp	r0, #0
     79c:	bne	698 <MyGame_Example_Monster_verify_table+0x24>
     7a0:	mvn	r3, #-536870912	; 0xe0000000
     7a4:	mov	r5, #4
     7a8:	str	r3, [sp, #4]
     7ac:	str	r5, [sp]
     7b0:	mov	r3, #8
     7b4:	mov	r2, #0
     7b8:	mov	r1, #29
     7bc:	mov	r0, r4
     7c0:	bl	0 <flatcc_verify_vector_field>
     7c4:	cmp	r0, #0
     7c8:	bne	698 <MyGame_Example_Monster_verify_table+0x24>
     7cc:	ldr	r7, [pc, #692]	; a88 <MyGame_Example_Monster_verify_table+0x414>
     7d0:	mov	r2, r0
     7d4:	mov	r3, r7
     7d8:	mov	r1, #12
     7dc:	mov	r0, r4
     7e0:	bl	0 <flatcc_verify_table_field>
     7e4:	cmp	r0, #0
     7e8:	bne	698 <MyGame_Example_Monster_verify_table+0x24>
     7ec:	mov	r2, r0
     7f0:	ldr	r3, [pc, #660]	; a8c <MyGame_Example_Monster_verify_table+0x418>
     7f4:	mov	r1, #8
     7f8:	mov	r0, r4
     7fc:	bl	0 <flatcc_verify_union_field>
     800:	cmp	r0, #0
     804:	bne	698 <MyGame_Example_Monster_verify_table+0x24>
     808:	mvn	r8, #-1073741824	; 0xc0000000
     80c:	mov	r6, #2
     810:	mov	r2, r0
     814:	stm	sp, {r6, r8}
     818:	mov	r3, r5
     81c:	mov	r1, #9
     820:	mov	r0, r4
     824:	bl	0 <flatcc_verify_vector_field>
     828:	cmp	r0, #0
     82c:	bne	698 <MyGame_Example_Monster_verify_table+0x24>
     830:	mov	r2, r0
     834:	stm	sp, {r6, r8}
     838:	mov	r3, r5
     83c:	mov	r1, #31
     840:	mov	r0, r4
     844:	bl	0 <flatcc_verify_vector_field>
     848:	cmp	r0, #0
     84c:	bne	698 <MyGame_Example_Monster_verify_table+0x24>
     850:	mov	r6, #1
     854:	mov	r3, r0
     858:	mov	r2, r0
     85c:	stm	sp, {r6, r7}
     860:	mov	r1, #13
     864:	mov	r0, r4
     868:	bl	0 <flatcc_verify_table_as_nested_root>
     86c:	cmp	r0, #0
     870:	bne	698 <MyGame_Example_Monster_verify_table+0x24>
     874:	mov	r2, r0
     878:	ldr	r3, [pc, #528]	; a90 <MyGame_Example_Monster_verify_table+0x41c>
     87c:	mov	r1, #14
     880:	mov	r0, r4
     884:	bl	0 <flatcc_verify_table_field>
     888:	cmp	r0, #0
     88c:	bne	698 <MyGame_Example_Monster_verify_table+0x24>
     890:	mov	r3, r6
     894:	mov	r2, r6
     898:	mov	r1, #15
     89c:	mov	r0, r4
     8a0:	bl	0 <flatcc_verify_field>
     8a4:	cmp	r0, #0
     8a8:	bne	698 <MyGame_Example_Monster_verify_table+0x24>
     8ac:	mov	r3, r5
     8b0:	mov	r2, r5
     8b4:	mov	r1, #16
     8b8:	mov	r0, r4
     8bc:	bl	0 <flatcc_verify_field>
     8c0:	cmp	r0, #0
     8c4:	bne	698 <MyGame_Example_Monster_verify_table+0x24>
     8c8:	mov	r3, r5
     8cc:	mov	r2, r5
     8d0:	mov	r1, #17
     8d4:	mov	r0, r4
     8d8:	bl	0 <flatcc_verify_field>
     8dc:	cmp	r0, #0
     8e0:	bne	698 <MyGame_Example_Monster_verify_table+0x24>
     8e4:	mov	r3, #8
     8e8:	mov	r2, r3
     8ec:	mov	r1, #18
     8f0:	mov	r0, r4
     8f4:	bl	0 <flatcc_verify_field>
     8f8:	cmp	r0, #0
     8fc:	bne	698 <MyGame_Example_Monster_verify_table+0x24>
     900:	mov	r3, #8
     904:	mov	r2, r3
     908:	mov	r1, #19
     90c:	mov	r0, r4
     910:	bl	0 <flatcc_verify_field>
     914:	cmp	r0, #0
     918:	bne	698 <MyGame_Example_Monster_verify_table+0x24>
     91c:	mov	r3, r5
     920:	mov	r2, r5
     924:	mov	r1, #20
     928:	mov	r0, r4
     92c:	bl	0 <flatcc_verify_field>
     930:	cmp	r0, #0
     934:	bne	698 <MyGame_Example_Monster_verify_table+0x24>
     938:	mov	r3, r5
     93c:	mov	r2, r5
     940:	mov	r1, #21
     944:	mov	r0, r4
     948:	bl	0 <flatcc_verify_field>
     94c:	cmp	r0, #0
     950:	bne	698 <MyGame_Example_Monster_verify_table+0x24>
     954:	mov	r3, #8
     958:	mov	r2, r3
     95c:	mov	r1, #22
     960:	mov	r0, r4
     964:	bl	0 <flatcc_verify_field>
     968:	cmp	r0, #0
     96c:	bne	698 <MyGame_Example_Monster_verify_table+0x24>
     970:	mov	r3, #8
     974:	mov	r2, r3
     978:	mov	r1, #23
     97c:	mov	r0, r4
     980:	bl	0 <flatcc_verify_field>
     984:	cmp	r0, #0
     988:	bne	698 <MyGame_Example_Monster_verify_table+0x24>
     98c:	mov	r3, r5
     990:	mov	r2, r5
     994:	mov	r1, #25
     998:	mov	r0, r4
     99c:	bl	0 <flatcc_verify_field>
     9a0:	cmp	r0, #0
     9a4:	bne	698 <MyGame_Example_Monster_verify_table+0x24>
     9a8:	mov	r3, r5
     9ac:	mov	r2, r5
     9b0:	mov	r1, #26
     9b4:	mov	r0, r4
     9b8:	bl	0 <flatcc_verify_field>
     9bc:	cmp	r0, #0
     9c0:	bne	698 <MyGame_Example_Monster_verify_table+0x24>
     9c4:	mov	r3, r5
     9c8:	mov	r2, r5
     9cc:	mov	r1, #27
     9d0:	mov	r0, r4
     9d4:	bl	0 <flatcc_verify_field>
     9d8:	cmp	r0, #0
     9dc:	bne	698 <MyGame_Example_Monster_verify_table+0x24>
     9e0:	mvn	r1, #0
     9e4:	mov	r2, r0
     9e8:	str	r1, [sp, #4]
     9ec:	mov	r3, r6
     9f0:	str	r6, [sp]
     9f4:	mov	r1, #30
     9f8:	mov	r0, r4
     9fc:	bl	0 <flatcc_verify_vector_field>
     a00:	cmp	r0, #0
     a04:	bne	698 <MyGame_Example_Monster_verify_table+0x24>
     a08:	mov	r5, #8
     a0c:	mvn	r6, #-536870912	; 0xe0000000
     a10:	mov	r3, r5
     a14:	stm	sp, {r5, r6}
     a18:	mov	r2, #0
     a1c:	mov	r1, #32
     a20:	mov	r0, r4
     a24:	bl	0 <flatcc_verify_vector_field>
     a28:	cmp	r0, #0
     a2c:	bne	698 <MyGame_Example_Monster_verify_table+0x24>
     a30:	mov	r2, r0
     a34:	stm	sp, {r5, r6}
     a38:	mov	r3, r5
     a3c:	mov	r1, #33	; 0x21
     a40:	mov	r0, r4
     a44:	bl	0 <flatcc_verify_vector_field>
     a48:	cmp	r0, #0
     a4c:	bne	698 <MyGame_Example_Monster_verify_table+0x24>
     a50:	mov	r2, r0
     a54:	ldr	r3, [pc, #56]	; a94 <MyGame_Example_Monster_verify_table+0x420>
     a58:	mov	r1, #34	; 0x22
     a5c:	mov	r0, r4
     a60:	bl	0 <flatcc_verify_table_field>
     a64:	cmp	r0, #0
     a68:	bne	698 <MyGame_Example_Monster_verify_table+0x24>
     a6c:	mov	r2, r0
     a70:	ldr	r3, [pc, #32]	; a98 <MyGame_Example_Monster_verify_table+0x424>
     a74:	mov	r0, r4
     a78:	mov	r1, #35	; 0x23
     a7c:	add	sp, sp, #8
     a80:	pop	{r4, r5, r6, r7, r8, lr}
     a84:	b	0 <flatcc_verify_table_field>
	...

00000a9c <MyGame_Example_TestBase64_verify_table>:
     a9c:	push	{r4, r5, r6, lr}
     aa0:	mov	r4, #1
     aa4:	sub	sp, sp, #8
     aa8:	mvn	r5, #0
     aac:	mov	r2, #0
     ab0:	mov	r1, r2
     ab4:	stm	sp, {r4, r5}
     ab8:	mov	r3, r4
     abc:	mov	r6, r0
     ac0:	bl	0 <flatcc_verify_vector_field>
     ac4:	subs	r2, r0, #0
     ac8:	beq	ad8 <MyGame_Example_TestBase64_verify_table+0x3c>
     acc:	mov	r0, r2
     ad0:	add	sp, sp, #8
     ad4:	pop	{r4, r5, r6, pc}
     ad8:	stm	sp, {r4, r5}
     adc:	mov	r3, r4
     ae0:	mov	r1, r4
     ae4:	mov	r0, r6
     ae8:	bl	0 <flatcc_verify_vector_field>
     aec:	subs	r2, r0, #0
     af0:	bne	acc <MyGame_Example_TestBase64_verify_table+0x30>
     af4:	ldr	r3, [pc, #36]	; b20 <MyGame_Example_TestBase64_verify_table+0x84>
     af8:	str	r4, [sp]
     afc:	str	r3, [sp, #4]
     b00:	mov	r0, r6
     b04:	mov	r3, r2
     b08:	mov	r1, #2
     b0c:	bl	0 <flatcc_verify_table_as_nested_root>
     b10:	mov	r2, r0
     b14:	mov	r0, r2
     b18:	add	sp, sp, #8
     b1c:	pop	{r4, r5, r6, pc}
     b20:	.word	0x00000000

00000b24 <MyGame_Example_Any_union_verifier>:
     b24:	ldrb	r3, [r0, #12]
     b28:	sub	r3, r3, #1
     b2c:	cmp	r3, #3
     b30:	ldrls	pc, [pc, r3, lsl #2]
     b34:	b	b68 <MyGame_Example_Any_union_verifier+0x44>
     b38:	.word	0x00000b60
     b3c:	.word	0x00000b58
     b40:	.word	0x00000b50
     b44:	.word	0x00000b48
     b48:	ldr	r1, [pc, #32]	; b70 <MyGame_Example_Any_union_verifier+0x4c>
     b4c:	b	0 <flatcc_verify_union_table>
     b50:	ldr	r1, [pc, #28]	; b74 <MyGame_Example_Any_union_verifier+0x50>
     b54:	b	0 <flatcc_verify_union_table>
     b58:	ldr	r1, [pc, #24]	; b78 <MyGame_Example_Any_union_verifier+0x54>
     b5c:	b	0 <flatcc_verify_union_table>
     b60:	ldr	r1, [pc, #20]	; b7c <MyGame_Example_Any_union_verifier+0x58>
     b64:	b	0 <flatcc_verify_union_table>
     b68:	mov	r0, #0
     b6c:	bx	lr
	...

00000b80 <MyGame_Example_Alt_verify_table>:
     b80:	mov	r2, #0
     b84:	push	{r4, lr}
     b88:	mov	r1, r2
     b8c:	ldr	r3, [pc, #64]	; bd4 <MyGame_Example_Alt_verify_table+0x54>
     b90:	mov	r4, r0
     b94:	bl	0 <flatcc_verify_table_field>
     b98:	cmp	r0, #0
     b9c:	popne	{r4, pc}
     ba0:	mov	r2, r0
     ba4:	ldr	r3, [pc, #44]	; bd8 <MyGame_Example_Alt_verify_table+0x58>
     ba8:	mov	r1, #1
     bac:	mov	r0, r4
     bb0:	bl	0 <flatcc_verify_table_field>
     bb4:	cmp	r0, #0
     bb8:	popne	{r4, pc}
     bbc:	mov	r2, r0
     bc0:	ldr	r3, [pc, #20]	; bdc <MyGame_Example_Alt_verify_table+0x5c>
     bc4:	mov	r0, r4
     bc8:	mov	r1, #3
     bcc:	pop	{r4, lr}
     bd0:	b	0 <flatcc_verify_union_vector_field>
	...

00000be0 <Fantasy_Movie_verify_table>:
     be0:	push	{r4, lr}
     be4:	mov	r2, #0
     be8:	ldr	r3, [pc, #124]	; c6c <Fantasy_Movie_verify_table+0x8c>
     bec:	mov	r1, #1
     bf0:	mov	r4, r0
     bf4:	bl	0 <flatcc_verify_union_field>
     bf8:	cmp	r0, #0
     bfc:	popne	{r4, pc}
     c00:	mov	r2, r0
     c04:	ldr	r3, [pc, #96]	; c6c <Fantasy_Movie_verify_table+0x8c>
     c08:	mov	r1, #3
     c0c:	mov	r0, r4
     c10:	bl	0 <flatcc_verify_union_field>
     c14:	cmp	r0, #0
     c18:	popne	{r4, pc}
     c1c:	mov	r2, r0
     c20:	ldr	r3, [pc, #68]	; c6c <Fantasy_Movie_verify_table+0x8c>
     c24:	mov	r1, #5
     c28:	mov	r0, r4
     c2c:	bl	0 <flatcc_verify_union_field>
     c30:	cmp	r0, #0
     c34:	popne	{r4, pc}
     c38:	mov	r2, r0
     c3c:	ldr	r3, [pc, #40]	; c6c <Fantasy_Movie_verify_table+0x8c>
     c40:	mov	r1, #7
     c44:	mov	r0, r4
     c48:	bl	0 <flatcc_verify_union_field>
     c4c:	cmp	r0, #0
     c50:	popne	{r4, pc}
     c54:	mov	r2, r0
     c58:	ldr	r3, [pc, #12]	; c6c <Fantasy_Movie_verify_table+0x8c>
     c5c:	mov	r0, r4
     c60:	mov	r1, #9
     c64:	pop	{r4, lr}
     c68:	b	0 <flatcc_verify_union_vector_field>
     c6c:	.word	0x00000000

00000c70 <Fantasy_Character_union_verifier>:
     c70:	ldrb	r3, [r0, #12]
     c74:	cmp	r3, #9
     c78:	beq	cb4 <Fantasy_Character_union_verifier+0x44>
     c7c:	bls	c98 <Fantasy_Character_union_verifier+0x28>
     c80:	cmp	r3, #11
     c84:	beq	c94 <Fantasy_Character_union_verifier+0x24>
     c88:	bcc	cb4 <Fantasy_Character_union_verifier+0x44>
     c8c:	cmp	r3, #255	; 0xff
     c90:	bne	cc0 <Fantasy_Character_union_verifier+0x50>
     c94:	b	0 <flatcc_verify_union_string>
     c98:	cmp	r3, #2
     c9c:	beq	cc8 <Fantasy_Character_union_verifier+0x58>
     ca0:	cmp	r3, #8
     ca4:	bne	cc0 <Fantasy_Character_union_verifier+0x50>
     ca8:	mov	r2, #2
     cac:	mov	r1, r2
     cb0:	b	0 <flatcc_verify_union_struct>
     cb4:	mov	r2, #4
     cb8:	mov	r1, r2
     cbc:	b	0 <flatcc_verify_union_struct>
     cc0:	mov	r0, #0
     cc4:	bx	lr
     cc8:	ldr	r1, [pc]	; cd0 <Fantasy_Character_union_verifier+0x60>
     ccc:	b	0 <flatcc_verify_union_table>
     cd0:	.word	0x00000000

00000cd4 <show_benchmark.constprop.70>:
     cd4:	push	{lr}		; (str lr, [sp, #-4]!)
     cd8:	vpush	{d8-d9}
     cdc:	vsub.f64	d8, d1, d0
     ce0:	vldr	d9, [pc, #280]	; e00 <show_benchmark.constprop.70+0x12c>
     ce4:	sub	sp, sp, #12
     ce8:	str	r1, [sp, #4]
     cec:	mov	r1, r0
     cf0:	ldr	r0, [pc, #296]	; e20 <show_benchmark.constprop.70+0x14c>
     cf4:	bl	0 <printf>
     cf8:	vmov	r2, r3, d8
     cfc:	ldr	r0, [pc, #288]	; e24 <show_benchmark.constprop.70+0x150>
     d00:	bl	0 <printf>
     d04:	ldr	r1, [pc, #284]	; e28 <show_benchmark.constprop.70+0x154>
     d08:	ldr	r0, [pc, #284]	; e2c <show_benchmark.constprop.70+0x158>
     d0c:	bl	0 <printf>
     d10:	ldr	r1, [sp, #4]
     d14:	ldr	r0, [pc, #276]	; e30 <show_benchmark.constprop.70+0x15c>
     d18:	bl	0 <printf>
     d1c:	vldr	s15, [sp, #4]
     d20:	ldr	r0, [pc, #268]	; e34 <show_benchmark.constprop.70+0x160>
     d24:	vcvt.f64.u32	d7, s15
     d28:	vmul.f64	d7, d7, d9
     d2c:	vdiv.f64	d6, d7, d9
     d30:	vdiv.f64	d7, d6, d8
     d34:	vmov	r2, r3, d7
     d38:	bl	0 <printf>
     d3c:	vdiv.f64	d7, d9, d8
     d40:	ldr	r0, [pc, #240]	; e38 <show_benchmark.constprop.70+0x164>
     d44:	vmov	r2, r3, d7
     d48:	bl	0 <printf>
     d4c:	vldr	d7, [pc, #180]	; e08 <show_benchmark.constprop.70+0x134>
     d50:	ldr	r1, [pc, #228]	; e3c <show_benchmark.constprop.70+0x168>
     d54:	ldr	r0, [pc, #228]	; e40 <show_benchmark.constprop.70+0x16c>
     d58:	vdiv.f64	d6, d7, d8
     d5c:	vmov	r2, r3, d6
     d60:	bl	0 <printf>
     d64:	vldr	d6, [pc, #164]	; e10 <show_benchmark.constprop.70+0x13c>
     d68:	vldr	d5, [pc, #168]	; e18 <show_benchmark.constprop.70+0x144>
     d6c:	vmul.f64	d8, d8, d6
     d70:	vdiv.f64	d7, d8, d9
     d74:	vcmpe.f64	d7, d5
     d78:	vmrs	APSR_nzcv, fpscr
     d7c:	bmi	dc0 <show_benchmark.constprop.70+0xec>
     d80:	vcmpe.f64	d7, d9
     d84:	vmrs	APSR_nzcv, fpscr
     d88:	bmi	ddc <show_benchmark.constprop.70+0x108>
     d8c:	vcmpe.f64	d7, d6
     d90:	vmrs	APSR_nzcv, fpscr
     d94:	vdivmi.f64	d6, d7, d9
     d98:	ldrmi	r0, [pc, #164]	; e44 <show_benchmark.constprop.70+0x170>
     d9c:	ldrpl	r0, [pc, #164]	; e48 <show_benchmark.constprop.70+0x174>
     da0:	vdivpl.f64	d5, d7, d6
     da4:	vmovmi	r2, r3, d6
     da8:	vmovpl	r2, r3, d5
     dac:	bl	0 <printf>
     db0:	mov	r0, #0
     db4:	add	sp, sp, #12
     db8:	vpop	{d8-d9}
     dbc:	pop	{pc}		; (ldr pc, [sp], #4)
     dc0:	vmov	r2, r3, d7
     dc4:	ldr	r0, [pc, #128]	; e4c <show_benchmark.constprop.70+0x178>
     dc8:	bl	0 <printf>
     dcc:	mov	r0, #0
     dd0:	add	sp, sp, #12
     dd4:	vpop	{d8-d9}
     dd8:	pop	{pc}		; (ldr pc, [sp], #4)
     ddc:	vdiv.f64	d6, d7, d5
     de0:	ldr	r0, [pc, #104]	; e50 <show_benchmark.constprop.70+0x17c>
     de4:	vmov	r2, r3, d6
     de8:	bl	0 <printf>
     dec:	mov	r0, #0
     df0:	add	sp, sp, #12
     df4:	vpop	{d8-d9}
     df8:	pop	{pc}		; (ldr pc, [sp], #4)
     dfc:	nop			; (mov r0, r0)
     e00:	.word	0x00000000
     e04:	.word	0x412e8480
     e08:	.word	0x00000000
     e0c:	.word	0x3ff00000
     e10:	.word	0x00000000
     e14:	.word	0x41cdcd65
     e18:	.word	0x00000000
     e1c:	.word	0x408f4000
     e20:	.word	0x00000354
     e24:	.word	0x00000364
     e28:	.word	0x000f4240
     e2c:	.word	0x0000037c
     e30:	.word	0x0000038c
     e34:	.word	0x000003a0
     e38:	.word	0x000003b8
     e3c:	.word	0x000003dc
     e40:	.word	0x000003e4
     e44:	.word	0x00000438
     e48:	.word	0x00000450
     e4c:	.word	0x00000408
     e50:	.word	0x00000420

00000e54 <MyGame_Example2_Monster_verify_table>:
     e54:	mov	r0, #0
     e58:	bx	lr

00000e5c <MyGame_InParentNamespace_verify_table>:
     e5c:	mov	r0, #0
     e60:	bx	lr

00000e64 <MyGame_Example_TestJSONPrefixParsing2_verify_table>:
     e64:	mov	r3, #8
     e68:	push	{r4, lr}
     e6c:	mov	r2, r3
     e70:	mov	r1, #0
     e74:	mov	r4, r0
     e78:	bl	0 <flatcc_verify_field>
     e7c:	cmp	r0, #0
     e80:	popne	{r4, pc}
     e84:	mov	r3, #4
     e88:	mov	r0, r4
     e8c:	mov	r2, r3
     e90:	mov	r1, #1
     e94:	pop	{r4, lr}
     e98:	b	0 <flatcc_verify_field>

00000e9c <count_monsters>:
     e9c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
     ea0:	subs	r7, r0, #0
     ea4:	beq	1024 <count_monsters+0x188>
     ea8:	ldr	r4, [r7, #-4]
     eac:	cmp	r4, #0
     eb0:	beq	1034 <count_monsters+0x198>
     eb4:	ldr	r3, [r7]
     eb8:	mov	r5, r1
     ebc:	adds	r2, r7, r3
     ec0:	beq	1030 <count_monsters+0x194>
     ec4:	ldr	r3, [r7, r3]
     ec8:	sub	r3, r2, r3
     ecc:	ldrh	r1, [r3]
     ed0:	cmp	r1, #11
     ed4:	bls	f4c <count_monsters+0xb0>
     ed8:	ldrh	r0, [r3, #10]
     edc:	cmp	r0, #0
     ee0:	beq	f4c <count_monsters+0xb0>
     ee4:	add	r9, r7, #4
     ee8:	mov	r8, #0
     eec:	ldr	r3, [r2, r0]
     ef0:	add	r0, r2, r0
     ef4:	add	r3, r3, #4
     ef8:	add	r0, r0, r3
     efc:	mov	r1, r5
     f00:	bl	0 <strcmp>
     f04:	cmp	r0, #0
     f08:	beq	f60 <count_monsters+0xc4>
     f0c:	add	r8, r8, #1
     f10:	cmp	r8, r4
     f14:	beq	1024 <count_monsters+0x188>
     f18:	mov	r3, r9
     f1c:	add	r9, r9, #4
     f20:	ldr	r1, [r3]
     f24:	adds	r2, r3, r1
     f28:	beq	1030 <count_monsters+0x194>
     f2c:	ldr	r3, [r3, r1]
     f30:	sub	r3, r2, r3
     f34:	ldrh	r1, [r3]
     f38:	cmp	r1, #11
     f3c:	bls	f4c <count_monsters+0xb0>
     f40:	ldrh	r0, [r3, #10]
     f44:	cmp	r0, #0
     f48:	bne	eec <count_monsters+0x50>
     f4c:	ldr	r3, [pc, #232]	; 103c <count_monsters+0x1a0>
     f50:	ldr	r2, [pc, #232]	; 1040 <count_monsters+0x1a4>
     f54:	ldr	r1, [pc, #232]	; 1044 <count_monsters+0x1a8>
     f58:	ldr	r0, [pc, #232]	; 1048 <count_monsters+0x1ac>
     f5c:	bl	0 <__assert_fail>
     f60:	mov	r6, r0
     f64:	add	r8, r8, #1
     f68:	cmp	r8, r4
     f6c:	add	r6, r6, #1
     f70:	bcs	101c <count_monsters+0x180>
     f74:	lsl	r9, r8, #2
     f78:	ldr	r3, [r7, r8, lsl #2]
     f7c:	add	r1, r7, r9
     f80:	adds	r2, r1, r3
     f84:	beq	1030 <count_monsters+0x194>
     f88:	ldr	r3, [r1, r3]
     f8c:	sub	r3, r2, r3
     f90:	ldrh	r1, [r3]
     f94:	cmp	r1, #11
     f98:	bls	f4c <count_monsters+0xb0>
     f9c:	ldrh	r0, [r3, #10]
     fa0:	cmp	r0, #0
     fa4:	beq	f4c <count_monsters+0xb0>
     fa8:	add	r9, r9, #4
     fac:	add	r9, r7, r9
     fb0:	ldr	r3, [r2, r0]
     fb4:	add	r0, r2, r0
     fb8:	add	r3, r3, #4
     fbc:	add	r0, r0, r3
     fc0:	mov	r1, r5
     fc4:	bl	0 <strcmp>
     fc8:	cmp	r0, #0
     fcc:	beq	1014 <count_monsters+0x178>
     fd0:	add	r8, r8, #1
     fd4:	cmp	r8, r4
     fd8:	bcs	101c <count_monsters+0x180>
     fdc:	mov	r3, r9
     fe0:	add	r9, r9, #4
     fe4:	ldr	r1, [r3]
     fe8:	adds	r2, r3, r1
     fec:	beq	1030 <count_monsters+0x194>
     ff0:	ldr	r3, [r3, r1]
     ff4:	sub	r3, r2, r3
     ff8:	ldrh	r1, [r3]
     ffc:	cmp	r1, #11
    1000:	bls	f4c <count_monsters+0xb0>
    1004:	ldrh	r0, [r3, #10]
    1008:	cmp	r0, #0
    100c:	bne	fb0 <count_monsters+0x114>
    1010:	b	f4c <count_monsters+0xb0>
    1014:	cmn	r8, #1
    1018:	bne	f64 <count_monsters+0xc8>
    101c:	mov	r0, r6
    1020:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    1024:	mov	r6, #0
    1028:	mov	r0, r6
    102c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    1030:	bl	220 <flatbuffers_string_vec_at.part.20+0x1c>
    1034:	mov	r6, r4
    1038:	b	101c <count_monsters+0x180>
    103c:	.word	0x00000244
    1040:	.word	0x000002bb
    1044:	.word	0x00000024
    1048:	.word	0x00000164

0000104c <MyGame_Example_Monster_vec_scan_ex_by_name>:
    104c:	push	{r4, r5, r6, r7, r8, lr}
    1050:	mov	r5, r0
    1054:	cmp	r5, #0
    1058:	mov	r4, r1
    105c:	mov	r6, r2
    1060:	mov	r7, r3
    1064:	add	r8, r0, r1, lsl #2
    1068:	beq	1100 <MyGame_Example_Monster_vec_scan_ex_by_name+0xb4>
    106c:	ldr	r3, [r5, #-4]
    1070:	cmp	r6, r3
    1074:	movcc	r2, r6
    1078:	movcs	r2, r3
    107c:	cmp	r4, r2
    1080:	bcs	1100 <MyGame_Example_Monster_vec_scan_ex_by_name+0xb4>
    1084:	cmp	r4, r3
    1088:	mov	r3, r8
    108c:	bcs	1114 <MyGame_Example_Monster_vec_scan_ex_by_name+0xc8>
    1090:	ldr	r2, [r8]
    1094:	add	r8, r8, #4
    1098:	adds	r0, r3, r2
    109c:	beq	1110 <MyGame_Example_Monster_vec_scan_ex_by_name+0xc4>
    10a0:	ldr	r3, [r3, r2]
    10a4:	sub	r3, r0, r3
    10a8:	ldrh	r2, [r3]
    10ac:	cmp	r2, #11
    10b0:	bhi	10c8 <MyGame_Example_Monster_vec_scan_ex_by_name+0x7c>
    10b4:	ldr	r3, [pc, #108]	; 1128 <MyGame_Example_Monster_vec_scan_ex_by_name+0xdc>
    10b8:	ldr	r2, [pc, #108]	; 112c <MyGame_Example_Monster_vec_scan_ex_by_name+0xe0>
    10bc:	ldr	r1, [pc, #108]	; 1130 <MyGame_Example_Monster_vec_scan_ex_by_name+0xe4>
    10c0:	ldr	r0, [pc, #108]	; 1134 <MyGame_Example_Monster_vec_scan_ex_by_name+0xe8>
    10c4:	bl	0 <__assert_fail>
    10c8:	ldrh	r2, [r3, #10]
    10cc:	cmp	r2, #0
    10d0:	beq	10b4 <MyGame_Example_Monster_vec_scan_ex_by_name+0x68>
    10d4:	ldr	r3, [r0, r2]
    10d8:	add	r0, r0, r2
    10dc:	add	r3, r3, #4
    10e0:	add	r0, r0, r3
    10e4:	mov	r1, r7
    10e8:	bl	0 <strcmp>
    10ec:	cmp	r0, #0
    10f0:	beq	1108 <MyGame_Example_Monster_vec_scan_ex_by_name+0xbc>
    10f4:	cmp	r5, #0
    10f8:	add	r4, r4, #1
    10fc:	bne	106c <MyGame_Example_Monster_vec_scan_ex_by_name+0x20>
    1100:	mvn	r0, #0
    1104:	pop	{r4, r5, r6, r7, r8, pc}
    1108:	mov	r0, r4
    110c:	pop	{r4, r5, r6, r7, r8, pc}
    1110:	bl	220 <flatbuffers_string_vec_at.part.20+0x1c>
    1114:	ldr	r3, [pc, #28]	; 1138 <MyGame_Example_Monster_vec_scan_ex_by_name+0xec>
    1118:	ldr	r2, [pc, #28]	; 113c <MyGame_Example_Monster_vec_scan_ex_by_name+0xf0>
    111c:	ldr	r1, [pc, #12]	; 1130 <MyGame_Example_Monster_vec_scan_ex_by_name+0xe4>
    1120:	ldr	r0, [pc, #24]	; 1140 <MyGame_Example_Monster_vec_scan_ex_by_name+0xf4>
    1124:	bl	0 <__assert_fail>
    1128:	.word	0x00000244
    112c:	.word	0x000002bb
    1130:	.word	0x00000024
    1134:	.word	0x00000164
    1138:	.word	0x000001e4
    113c:	.word	0x000002b5
    1140:	.word	0x0000012c

00001144 <MyGame_Example_Monster_vec_rscan_ex_by_name>:
    1144:	cmp	r0, #0
    1148:	push	{r4, r5, r6, r7, r8, lr}
    114c:	beq	11f8 <MyGame_Example_Monster_vec_rscan_ex_by_name+0xb4>
    1150:	ldr	r6, [r0, #-4]
    1154:	mov	r5, r3
    1158:	cmp	r2, r6
    115c:	movcc	r3, r2
    1160:	movcs	r3, r6
    1164:	sub	r7, r3, #-1073741823	; 0xc0000001
    1168:	mov	r4, r1
    116c:	add	r7, r0, r7, lsl #2
    1170:	cmp	r3, r4
    1174:	sub	r8, r3, #1
    1178:	bls	11f8 <MyGame_Example_Monster_vec_rscan_ex_by_name+0xb4>
    117c:	cmp	r8, r6
    1180:	mov	r2, r7
    1184:	bcs	1208 <MyGame_Example_Monster_vec_rscan_ex_by_name+0xc4>
    1188:	ldr	r3, [r7]
    118c:	sub	r7, r7, #4
    1190:	adds	r0, r2, r3
    1194:	beq	1204 <MyGame_Example_Monster_vec_rscan_ex_by_name+0xc0>
    1198:	ldr	r2, [r2, r3]
    119c:	sub	r2, r0, r2
    11a0:	ldrh	r3, [r2]
    11a4:	cmp	r3, #11
    11a8:	bhi	11c0 <MyGame_Example_Monster_vec_rscan_ex_by_name+0x7c>
    11ac:	ldr	r3, [pc, #104]	; 121c <MyGame_Example_Monster_vec_rscan_ex_by_name+0xd8>
    11b0:	ldr	r2, [pc, #104]	; 1220 <MyGame_Example_Monster_vec_rscan_ex_by_name+0xdc>
    11b4:	ldr	r1, [pc, #104]	; 1224 <MyGame_Example_Monster_vec_rscan_ex_by_name+0xe0>
    11b8:	ldr	r0, [pc, #104]	; 1228 <MyGame_Example_Monster_vec_rscan_ex_by_name+0xe4>
    11bc:	bl	0 <__assert_fail>
    11c0:	ldrh	r2, [r2, #10]
    11c4:	cmp	r2, #0
    11c8:	beq	11ac <MyGame_Example_Monster_vec_rscan_ex_by_name+0x68>
    11cc:	ldr	r3, [r0, r2]
    11d0:	add	r0, r0, r2
    11d4:	add	r3, r3, #4
    11d8:	add	r0, r0, r3
    11dc:	mov	r1, r5
    11e0:	bl	0 <strcmp>
    11e4:	mov	r3, r8
    11e8:	cmp	r0, #0
    11ec:	bne	1170 <MyGame_Example_Monster_vec_rscan_ex_by_name+0x2c>
    11f0:	mov	r0, r8
    11f4:	pop	{r4, r5, r6, r7, r8, pc}
    11f8:	mvn	r8, #0
    11fc:	mov	r0, r8
    1200:	pop	{r4, r5, r6, r7, r8, pc}
    1204:	bl	220 <flatbuffers_string_vec_at.part.20+0x1c>
    1208:	ldr	r3, [pc, #28]	; 122c <MyGame_Example_Monster_vec_rscan_ex_by_name+0xe8>
    120c:	ldr	r2, [pc, #28]	; 1230 <MyGame_Example_Monster_vec_rscan_ex_by_name+0xec>
    1210:	ldr	r1, [pc, #12]	; 1224 <MyGame_Example_Monster_vec_rscan_ex_by_name+0xe0>
    1214:	ldr	r0, [pc, #24]	; 1234 <MyGame_Example_Monster_vec_rscan_ex_by_name+0xf0>
    1218:	bl	0 <__assert_fail>
    121c:	.word	0x00000244
    1220:	.word	0x000002bb
    1224:	.word	0x00000024
    1228:	.word	0x00000164
    122c:	.word	0x000001e4
    1230:	.word	0x000002b5
    1234:	.word	0x0000012c

00001238 <verify_empty_monster>:
    1238:	cmp	r0, #0
    123c:	push	{r4, lr}
    1240:	beq	1254 <verify_empty_monster+0x1c>
    1244:	ldr	r2, [r0, #4]
    1248:	ldr	r3, [pc, #152]	; 12e8 <verify_empty_monster+0xb0>
    124c:	cmp	r2, r3
    1250:	beq	1264 <verify_empty_monster+0x2c>
    1254:	ldr	r0, [pc, #144]	; 12ec <verify_empty_monster+0xb4>
    1258:	bl	0 <puts>
    125c:	mvn	r0, #0
    1260:	pop	{r4, pc}
    1264:	ldr	r3, [r0]
    1268:	adds	r0, r0, r3
    126c:	beq	1254 <verify_empty_monster+0x1c>
    1270:	ldr	r3, [r0]
    1274:	sub	r3, r0, r3
    1278:	ldrh	r2, [r3]
    127c:	cmp	r2, #9
    1280:	bls	12ac <verify_empty_monster+0x74>
    1284:	ldrh	r2, [r3, #8]
    1288:	cmp	r2, #0
    128c:	beq	12bc <verify_empty_monster+0x84>
    1290:	ldrsh	r3, [r0, r2]
    1294:	cmp	r3, #100	; 0x64
    1298:	bne	12d8 <verify_empty_monster+0xa0>
    129c:	ldr	r0, [pc, #76]	; 12f0 <verify_empty_monster+0xb8>
    12a0:	bl	0 <puts>
    12a4:	mvn	r0, #0
    12a8:	pop	{r4, pc}
    12ac:	cmp	r2, #5
    12b0:	bhi	12bc <verify_empty_monster+0x84>
    12b4:	mov	r0, #0
    12b8:	pop	{r4, pc}
    12bc:	ldrh	r0, [r3, #4]
    12c0:	cmp	r0, #0
    12c4:	popeq	{r4, pc}
    12c8:	ldr	r0, [pc, #36]	; 12f4 <verify_empty_monster+0xbc>
    12cc:	bl	0 <puts>
    12d0:	mvn	r0, #0
    12d4:	pop	{r4, pc}
    12d8:	ldr	r0, [pc, #24]	; 12f8 <verify_empty_monster+0xc0>
    12dc:	bl	0 <puts>
    12e0:	mvn	r0, #0
    12e4:	pop	{r4, pc}
    12e8:	.word	0x534e4f4d
    12ec:	.word	0x00000468
    12f0:	.word	0x0000052c
    12f4:	.word	0x00000510
    12f8:	.word	0x000004ec

000012fc <test_enums>:
    12fc:	mov	r0, #0
    1300:	bx	lr

00001304 <test_type_aliases>:
    1304:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
    1308:	sub	sp, sp, #16
    130c:	mov	r4, r0
    1310:	mvn	r6, #0
    1314:	bl	0 <flatcc_builder_reset>
    1318:	mov	r3, #1
    131c:	mov	r2, #0
    1320:	mov	r1, r2
    1324:	stm	sp, {r3, r6}
    1328:	mov	r0, r4
    132c:	bl	0 <flatcc_builder_create_vector>
    1330:	mov	r5, #8
    1334:	mov	r2, #0
    1338:	mvn	r3, #-536870912	; 0xe0000000
    133c:	mov	r1, r2
    1340:	str	r3, [sp, #4]
    1344:	str	r5, [sp]
    1348:	mov	r3, r5
    134c:	mov	r7, r0
    1350:	mov	r0, r4
    1354:	bl	0 <flatcc_builder_create_vector>
    1358:	mov	r3, #0
    135c:	mov	r2, r3
    1360:	ldr	r1, [pc, #1084]	; 17a4 <test_type_aliases+0x4a0>
    1364:	mov	r8, r0
    1368:	mov	r0, r4
    136c:	bl	0 <flatcc_builder_start_buffer>
    1370:	cmp	r0, #0
    1374:	beq	1558 <test_type_aliases+0x254>
    1378:	mov	r0, r4
    137c:	add	r1, sp, #12
    1380:	bl	0 <flatcc_builder_finalize_aligned_buffer>
    1384:	ldr	r3, [pc, #1052]	; 17a8 <test_type_aliases+0x4a4>
    1388:	ldr	r2, [pc, #1044]	; 17a4 <test_type_aliases+0x4a0>
    138c:	ldr	r1, [sp, #12]
    1390:	mov	r4, r0
    1394:	bl	0 <flatcc_verify_table_as_root>
    1398:	subs	r5, r0, #0
    139c:	bne	1750 <test_type_aliases+0x44c>
    13a0:	cmp	r4, #0
    13a4:	beq	13b8 <test_type_aliases+0xb4>
    13a8:	ldr	r3, [pc, #1020]	; 17ac <test_type_aliases+0x4a8>
    13ac:	ldr	r2, [r4, #4]
    13b0:	cmp	r2, r3
    13b4:	beq	13cc <test_type_aliases+0xc8>
    13b8:	ldr	r3, [pc, #1008]	; 17b0 <test_type_aliases+0x4ac>
    13bc:	ldr	r2, [pc, #1008]	; 17b4 <test_type_aliases+0x4b0>
    13c0:	ldr	r1, [pc, #1008]	; 17b8 <test_type_aliases+0x4b4>
    13c4:	ldr	r0, [pc, #1008]	; 17bc <test_type_aliases+0x4b8>
    13c8:	bl	0 <__assert_fail>
    13cc:	ldr	r3, [r4]
    13d0:	adds	ip, r4, r3
    13d4:	beq	13b8 <test_type_aliases+0xb4>
    13d8:	ldr	r3, [r4, r3]
    13dc:	sub	r3, ip, r3
    13e0:	ldrh	r2, [r3]
    13e4:	cmp	r2, #5
    13e8:	bls	1538 <test_type_aliases+0x234>
    13ec:	ldrh	r1, [r3, #4]
    13f0:	cmp	r1, #0
    13f4:	beq	1538 <test_type_aliases+0x234>
    13f8:	ldrsb	r1, [ip, r1]
    13fc:	cmn	r1, #128	; 0x80
    1400:	bne	1538 <test_type_aliases+0x234>
    1404:	cmp	r2, #9
    1408:	bls	1538 <test_type_aliases+0x234>
    140c:	ldrh	r1, [r3, #8]
    1410:	cmp	r1, #0
    1414:	beq	1538 <test_type_aliases+0x234>
    1418:	ldrsh	r1, [ip, r1]
    141c:	cmn	r1, #32768	; 0x8000
    1420:	bne	1538 <test_type_aliases+0x234>
    1424:	cmp	r2, #13
    1428:	bls	1538 <test_type_aliases+0x234>
    142c:	ldrh	r1, [r3, #12]
    1430:	cmp	r1, #0
    1434:	beq	1538 <test_type_aliases+0x234>
    1438:	ldr	r1, [ip, r1]
    143c:	cmp	r1, #-2147483648	; 0x80000000
    1440:	bne	1538 <test_type_aliases+0x234>
    1444:	cmp	r2, #17
    1448:	bls	1538 <test_type_aliases+0x234>
    144c:	ldrh	r1, [r3, #16]
    1450:	cmp	r1, #0
    1454:	beq	1538 <test_type_aliases+0x234>
    1458:	ldrd	r0, [r1, ip]
    145c:	cmp	r1, #-2147483648	; 0x80000000
    1460:	cmpeq	r0, #0
    1464:	bne	1538 <test_type_aliases+0x234>
    1468:	ldrh	r1, [r3, #6]
    146c:	cmp	r1, #0
    1470:	beq	1538 <test_type_aliases+0x234>
    1474:	ldrb	r1, [ip, r1]
    1478:	cmp	r1, #255	; 0xff
    147c:	bne	1538 <test_type_aliases+0x234>
    1480:	ldrh	r1, [r3, #10]
    1484:	cmp	r1, #0
    1488:	beq	1538 <test_type_aliases+0x234>
    148c:	ldrh	r0, [ip, r1]
    1490:	ldr	r1, [pc, #808]	; 17c0 <test_type_aliases+0x4bc>
    1494:	cmp	r0, r1
    1498:	bne	1538 <test_type_aliases+0x234>
    149c:	ldrh	r1, [r3, #14]
    14a0:	cmp	r1, #0
    14a4:	beq	1538 <test_type_aliases+0x234>
    14a8:	ldr	r1, [ip, r1]
    14ac:	cmn	r1, #1
    14b0:	bne	1538 <test_type_aliases+0x234>
    14b4:	cmp	r2, #19
    14b8:	bls	1538 <test_type_aliases+0x234>
    14bc:	ldrh	r1, [r3, #18]
    14c0:	cmp	r1, #0
    14c4:	beq	1538 <test_type_aliases+0x234>
    14c8:	ldrd	r6, [ip, r1]
    14cc:	mvn	r1, #0
    14d0:	mvn	r0, #0
    14d4:	cmp	r7, r1
    14d8:	cmpeq	r6, r0
    14dc:	bne	1538 <test_type_aliases+0x234>
    14e0:	cmp	r2, #21
    14e4:	bls	1538 <test_type_aliases+0x234>
    14e8:	ldrh	r1, [r3, #20]
    14ec:	cmp	r1, #0
    14f0:	beq	1538 <test_type_aliases+0x234>
    14f4:	add	r1, ip, r1
    14f8:	vldr	s15, [pc, #672]	; 17a0 <test_type_aliases+0x49c>
    14fc:	vldr	s14, [r1]
    1500:	vcmp.f32	s14, s15
    1504:	vmrs	APSR_nzcv, fpscr
    1508:	bne	1538 <test_type_aliases+0x234>
    150c:	cmp	r2, #23
    1510:	bls	1538 <test_type_aliases+0x234>
    1514:	ldrh	r3, [r3, #22]
    1518:	cmp	r3, #0
    151c:	beq	1538 <test_type_aliases+0x234>
    1520:	add	ip, ip, r3
    1524:	vldr	d7, [pc, #620]	; 1798 <test_type_aliases+0x494>
    1528:	vldr	d6, [ip]
    152c:	vcmp.f64	d6, d7
    1530:	vmrs	APSR_nzcv, fpscr
    1534:	beq	1544 <test_type_aliases+0x240>
    1538:	ldr	r0, [pc, #644]	; 17c4 <test_type_aliases+0x4c0>
    153c:	bl	0 <puts>
    1540:	mvn	r5, #0
    1544:	mov	r0, r4
    1548:	bl	0 <flatcc_builder_aligned_free>
    154c:	mov	r0, r5
    1550:	add	sp, sp, #16
    1554:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
    1558:	mov	r1, #12
    155c:	mov	r0, r4
    1560:	bl	0 <flatcc_builder_start_table>
    1564:	cmp	r0, #0
    1568:	bne	1740 <test_type_aliases+0x43c>
    156c:	mov	r3, r5
    1570:	mov	r2, r5
    1574:	mov	r1, #6
    1578:	mov	r0, r4
    157c:	bl	0 <flatcc_builder_table_add>
    1580:	cmp	r0, #0
    1584:	beq	1740 <test_type_aliases+0x43c>
    1588:	mov	sl, #0
    158c:	mov	fp, #-2147483648	; 0x80000000
    1590:	mov	r3, r5
    1594:	strd	sl, [r0]
    1598:	mov	r2, r5
    159c:	mov	r1, #7
    15a0:	mov	r0, r4
    15a4:	bl	0 <flatcc_builder_table_add>
    15a8:	cmp	r0, #0
    15ac:	beq	1740 <test_type_aliases+0x43c>
    15b0:	mvn	sl, #0
    15b4:	mvn	fp, #0
    15b8:	mov	r3, r5
    15bc:	strd	sl, [r0]
    15c0:	mov	r2, r5
    15c4:	mov	r1, #9
    15c8:	mov	r0, r4
    15cc:	bl	0 <flatcc_builder_table_add>
    15d0:	cmp	r0, #0
    15d4:	beq	1740 <test_type_aliases+0x43c>
    15d8:	ldr	sl, [pc, #488]	; 17c8 <test_type_aliases+0x4c4>
    15dc:	ldr	fp, [pc, #488]	; 17cc <test_type_aliases+0x4c8>
    15e0:	mov	r3, #4
    15e4:	mov	r2, r3
    15e8:	strd	sl, [r0]
    15ec:	mov	r1, r3
    15f0:	mov	r0, r4
    15f4:	bl	0 <flatcc_builder_table_add>
    15f8:	cmp	r0, #0
    15fc:	beq	1740 <test_type_aliases+0x43c>
    1600:	mov	r2, #-2147483648	; 0x80000000
    1604:	mov	r3, #4
    1608:	str	r2, [r0]
    160c:	mov	r1, #5
    1610:	mov	r2, r3
    1614:	mov	r0, r4
    1618:	bl	0 <flatcc_builder_table_add>
    161c:	cmp	r0, #0
    1620:	beq	1740 <test_type_aliases+0x43c>
    1624:	mov	r3, #4
    1628:	str	r6, [r0]
    162c:	mov	r1, r5
    1630:	mov	r2, r3
    1634:	mov	r0, r4
    1638:	bl	0 <flatcc_builder_table_add>
    163c:	cmp	r0, #0
    1640:	beq	1740 <test_type_aliases+0x43c>
    1644:	ldr	r3, [pc, #388]	; 17d0 <test_type_aliases+0x4cc>
    1648:	cmp	r7, #0
    164c:	str	r3, [r0]
    1650:	beq	1740 <test_type_aliases+0x43c>
    1654:	mov	r1, #10
    1658:	mov	r0, r4
    165c:	bl	0 <flatcc_builder_table_add_offset>
    1660:	cmp	r0, #0
    1664:	beq	1740 <test_type_aliases+0x43c>
    1668:	cmp	r8, #0
    166c:	str	r7, [r0]
    1670:	beq	1740 <test_type_aliases+0x43c>
    1674:	mov	r1, #11
    1678:	mov	r0, r4
    167c:	bl	0 <flatcc_builder_table_add_offset>
    1680:	cmp	r0, #0
    1684:	beq	1740 <test_type_aliases+0x43c>
    1688:	mov	r3, #2
    168c:	str	r8, [r0]
    1690:	mov	r2, r3
    1694:	mov	r1, r3
    1698:	mov	r0, r4
    169c:	bl	0 <flatcc_builder_table_add>
    16a0:	cmp	r0, #0
    16a4:	beq	1740 <test_type_aliases+0x43c>
    16a8:	mov	r2, #32768	; 0x8000
    16ac:	mov	r3, #2
    16b0:	strh	r2, [r0]
    16b4:	mov	r1, #3
    16b8:	mov	r2, r3
    16bc:	mov	r0, r4
    16c0:	bl	0 <flatcc_builder_table_add>
    16c4:	cmp	r0, #0
    16c8:	beq	1740 <test_type_aliases+0x43c>
    16cc:	mov	r3, #1
    16d0:	mvn	r5, #0
    16d4:	strh	r5, [r0]
    16d8:	mov	r2, r3
    16dc:	mov	r1, #0
    16e0:	mov	r0, r4
    16e4:	bl	0 <flatcc_builder_table_add>
    16e8:	cmp	r0, #0
    16ec:	beq	1740 <test_type_aliases+0x43c>
    16f0:	mov	r3, #1
    16f4:	mvn	r2, #127	; 0x7f
    16f8:	strb	r2, [r0]
    16fc:	mov	r1, r3
    1700:	mov	r2, r3
    1704:	mov	r0, r4
    1708:	bl	0 <flatcc_builder_table_add>
    170c:	cmp	r0, #0
    1710:	beq	1740 <test_type_aliases+0x43c>
    1714:	strb	r5, [r0]
    1718:	mov	r2, #0
    171c:	ldr	r1, [pc, #176]	; 17d4 <test_type_aliases+0x4d0>
    1720:	mov	r0, r4
    1724:	bl	0 <flatcc_builder_check_required>
    1728:	cmp	r0, #0
    172c:	beq	1780 <test_type_aliases+0x47c>
    1730:	mov	r0, r4
    1734:	bl	0 <flatcc_builder_end_table>
    1738:	mov	r1, r0
    173c:	b	1744 <test_type_aliases+0x440>
    1740:	mov	r1, #0
    1744:	mov	r0, r4
    1748:	bl	0 <flatcc_builder_end_buffer>
    174c:	b	1378 <test_type_aliases+0x74>
    1750:	ldr	r3, [pc, #128]	; 17d8 <test_type_aliases+0x4d4>
    1754:	mov	r1, r4
    1758:	ldr	r2, [sp, #12]
    175c:	ldr	r3, [r3]
    1760:	ldr	r0, [pc, #116]	; 17dc <test_type_aliases+0x4d8>
    1764:	bl	20 <hexdump>
    1768:	mov	r0, r5
    176c:	bl	0 <flatcc_verify_error_string>
    1770:	mov	r1, r0
    1774:	ldr	r0, [pc, #100]	; 17e0 <test_type_aliases+0x4dc>
    1778:	bl	0 <printf>
    177c:	b	1544 <test_type_aliases+0x240>
    1780:	ldr	r3, [pc, #92]	; 17e4 <test_type_aliases+0x4e0>
    1784:	mov	r2, #237	; 0xed
    1788:	ldr	r1, [pc, #88]	; 17e8 <test_type_aliases+0x4e4>
    178c:	ldr	r0, [pc, #88]	; 17ec <test_type_aliases+0x4e8>
    1790:	bl	0 <__assert_fail>
    1794:	nop			; (mov r0, r0)
    1798:	.word	0x66666666
    179c:	.word	0x40026666
    17a0:	.word	0x40133333
    17a4:	.word	0x0000054c
    17a8:	.word	0x00000000
    17ac:	.word	0x534e4f4d
    17b0:	.word	0x0000041c
    17b4:	.word	0x000002ed
    17b8:	.word	0x00000024
    17bc:	.word	0x00000090
    17c0:	.word	0x0000ffff
    17c4:	.word	0x00000644
    17c8:	.word	0x66666666
    17cc:	.word	0x40026666
    17d0:	.word	0x40133333
    17d4:	.word	0x000003f8
    17d8:	.word	0x00000000
    17dc:	.word	0x00000604
    17e0:	.word	0x00000618
    17e4:	.word	0x000003fc
    17e8:	.word	0x000001a8
    17ec:	.word	0x00000554

000017f0 <test_empty_monster>:
    17f0:	push	{r4, r5, lr}
    17f4:	sub	sp, sp, #12
    17f8:	mov	r4, r0
    17fc:	bl	0 <flatcc_builder_reset>
    1800:	mov	r3, #0
    1804:	mov	r2, r3
    1808:	ldr	r1, [pc, #280]	; 1928 <test_empty_monster+0x138>
    180c:	mov	r0, r4
    1810:	bl	0 <flatcc_builder_start_buffer>
    1814:	mov	r1, #36	; 0x24
    1818:	mov	r0, r4
    181c:	bl	0 <flatcc_builder_start_table>
    1820:	mov	r0, r4
    1824:	ldr	r1, [pc, #256]	; 192c <test_empty_monster+0x13c>
    1828:	bl	0 <flatcc_builder_create_string_str>
    182c:	subs	r5, r0, #0
    1830:	beq	1848 <test_empty_monster+0x58>
    1834:	mov	r1, #3
    1838:	mov	r0, r4
    183c:	bl	0 <flatcc_builder_table_add_offset>
    1840:	cmp	r0, #0
    1844:	strne	r5, [r0]
    1848:	mov	r2, #1
    184c:	ldr	r1, [pc, #220]	; 1930 <test_empty_monster+0x140>
    1850:	mov	r0, r4
    1854:	bl	0 <flatcc_builder_check_required>
    1858:	cmp	r0, #0
    185c:	beq	1924 <test_empty_monster+0x134>
    1860:	mov	r0, r4
    1864:	bl	0 <flatcc_builder_end_table>
    1868:	mov	r1, r0
    186c:	mov	r0, r4
    1870:	bl	0 <flatcc_builder_end_buffer>
    1874:	mov	r0, r4
    1878:	add	r1, sp, #4
    187c:	bl	0 <flatcc_builder_finalize_aligned_buffer>
    1880:	ldr	r3, [pc, #172]	; 1934 <test_empty_monster+0x144>
    1884:	ldr	r2, [sp, #4]
    1888:	ldr	r3, [r3]
    188c:	mov	r1, r0
    1890:	mov	r4, r0
    1894:	ldr	r0, [pc, #156]	; 1938 <test_empty_monster+0x148>
    1898:	bl	20 <hexdump>
    189c:	mov	r0, r4
    18a0:	bl	1238 <verify_empty_monster>
    18a4:	subs	r5, r0, #0
    18a8:	beq	18c0 <test_empty_monster+0xd0>
    18ac:	mov	r0, r4
    18b0:	bl	0 <flatcc_builder_aligned_free>
    18b4:	mov	r0, r5
    18b8:	add	sp, sp, #12
    18bc:	pop	{r4, r5, pc}
    18c0:	ldr	r3, [pc, #116]	; 193c <test_empty_monster+0x14c>
    18c4:	ldr	r2, [pc, #92]	; 1928 <test_empty_monster+0x138>
    18c8:	ldr	r1, [sp, #4]
    18cc:	mov	r0, r4
    18d0:	bl	0 <flatcc_verify_table_as_root>
    18d4:	subs	r5, r0, #0
    18d8:	bne	190c <test_empty_monster+0x11c>
    18dc:	ldr	r1, [sp, #4]
    18e0:	ldr	r3, [pc, #84]	; 193c <test_empty_monster+0x14c>
    18e4:	sub	r1, r1, #1
    18e8:	ldr	r2, [pc, #56]	; 1928 <test_empty_monster+0x138>
    18ec:	mov	r0, r4
    18f0:	bl	0 <flatcc_verify_table_as_root>
    18f4:	cmp	r0, #0
    18f8:	bne	18ac <test_empty_monster+0xbc>
    18fc:	ldr	r0, [pc, #60]	; 1940 <test_empty_monster+0x150>
    1900:	bl	0 <puts>
    1904:	mvn	r5, #0
    1908:	b	18b4 <test_empty_monster+0xc4>
    190c:	bl	0 <flatcc_verify_error_string>
    1910:	mvn	r5, #0
    1914:	mov	r1, r0
    1918:	ldr	r0, [pc, #36]	; 1944 <test_empty_monster+0x154>
    191c:	bl	0 <printf>
    1920:	b	18b4 <test_empty_monster+0xc4>
    1924:	bl	540 <MyGame_Example_TestJSONPrefixParsing_verify_table+0x1c>
    1928:	.word	0x0000054c
    192c:	.word	0x00000674
    1930:	.word	0x0000043c
    1934:	.word	0x00000000
    1938:	.word	0x00000680
    193c:	.word	0x00000000
    1940:	.word	0x000006bc
    1944:	.word	0x00000694

00001948 <test_typed_empty_monster>:
    1948:	push	{r4, r5, r6, lr}
    194c:	sub	sp, sp, #8
    1950:	mov	r5, #0
    1954:	mov	r4, r0
    1958:	str	r5, [sp, #4]
    195c:	bl	0 <flatcc_builder_reset>
    1960:	mov	r3, r5
    1964:	mov	r2, r5
    1968:	ldr	r1, [pc, #620]	; 1bdc <test_typed_empty_monster+0x294>
    196c:	mov	r0, r4
    1970:	bl	0 <flatcc_builder_start_buffer>
    1974:	mov	r1, #36	; 0x24
    1978:	mov	r0, r4
    197c:	bl	0 <flatcc_builder_start_table>
    1980:	mov	r0, r4
    1984:	ldr	r1, [pc, #596]	; 1be0 <test_typed_empty_monster+0x298>
    1988:	bl	0 <flatcc_builder_create_string_str>
    198c:	subs	r5, r0, #0
    1990:	beq	19a8 <test_typed_empty_monster+0x60>
    1994:	mov	r1, #3
    1998:	mov	r0, r4
    199c:	bl	0 <flatcc_builder_table_add_offset>
    19a0:	cmp	r0, #0
    19a4:	strne	r5, [r0]
    19a8:	mov	r2, #1
    19ac:	ldr	r1, [pc, #560]	; 1be4 <test_typed_empty_monster+0x29c>
    19b0:	mov	r0, r4
    19b4:	bl	0 <flatcc_builder_check_required>
    19b8:	cmp	r0, #0
    19bc:	beq	1bd8 <test_typed_empty_monster+0x290>
    19c0:	mov	r0, r4
    19c4:	bl	0 <flatcc_builder_end_table>
    19c8:	mov	r1, r0
    19cc:	mov	r0, r4
    19d0:	bl	0 <flatcc_builder_end_buffer>
    19d4:	mov	r0, r4
    19d8:	mov	r1, sp
    19dc:	bl	0 <flatcc_builder_finalize_aligned_buffer>
    19e0:	ldr	r3, [pc, #512]	; 1be8 <test_typed_empty_monster+0x2a0>
    19e4:	ldr	r2, [sp]
    19e8:	ldr	r4, [pc, #508]	; 1bec <test_typed_empty_monster+0x2a4>
    19ec:	ldr	r3, [r3]
    19f0:	mov	r5, r0
    19f4:	mov	r1, r0
    19f8:	ldr	r0, [pc, #496]	; 1bf0 <test_typed_empty_monster+0x2a8>
    19fc:	bl	20 <hexdump>
    1a00:	ldr	r1, [r5, #4]
    1a04:	ldr	r2, [pc, #488]	; 1bf4 <test_typed_empty_monster+0x2ac>
    1a08:	ldr	r0, [pc, #488]	; 1bf8 <test_typed_empty_monster+0x2b0>
    1a0c:	mov	r3, #77	; 0x4d
    1a10:	eor	r4, r4, r3
    1a14:	ldrb	r3, [r2, #1]!
    1a18:	mul	r4, r0, r4
    1a1c:	cmp	r3, #0
    1a20:	bne	1a10 <test_typed_empty_monster+0xc8>
    1a24:	cmp	r4, #0
    1a28:	beq	1b50 <test_typed_empty_monster+0x208>
    1a2c:	cmp	r4, r1
    1a30:	bne	1bb8 <test_typed_empty_monster+0x270>
    1a34:	ldr	r3, [pc, #448]	; 1bfc <test_typed_empty_monster+0x2b4>
    1a38:	cmp	r4, r3
    1a3c:	bne	1b5c <test_typed_empty_monster+0x214>
    1a40:	mov	r0, r5
    1a44:	bl	1238 <verify_empty_monster>
    1a48:	cmp	r0, #0
    1a4c:	beq	1bc8 <test_typed_empty_monster+0x280>
    1a50:	ldr	r3, [pc, #424]	; 1c00 <test_typed_empty_monster+0x2b8>
    1a54:	ldr	r2, [pc, #384]	; 1bdc <test_typed_empty_monster+0x294>
    1a58:	ldr	r1, [sp]
    1a5c:	mov	r0, r5
    1a60:	bl	0 <flatcc_verify_table_as_root>
    1a64:	subs	r6, r0, #0
    1a68:	bne	1b7c <test_typed_empty_monster+0x234>
    1a6c:	ldr	r3, [pc, #396]	; 1c00 <test_typed_empty_monster+0x2b8>
    1a70:	ldr	r2, [pc, #356]	; 1bdc <test_typed_empty_monster+0x294>
    1a74:	ldr	r1, [sp]
    1a78:	mov	r0, r5
    1a7c:	bl	0 <flatcc_verify_table_as_root>
    1a80:	subs	r6, r0, #0
    1a84:	bne	1b7c <test_typed_empty_monster+0x234>
    1a88:	mov	r2, r4
    1a8c:	ldr	r3, [pc, #364]	; 1c00 <test_typed_empty_monster+0x2b8>
    1a90:	ldr	r1, [sp]
    1a94:	mov	r0, r5
    1a98:	bl	0 <flatcc_verify_table_as_typed_root>
    1a9c:	subs	r6, r0, #0
    1aa0:	bne	1ba4 <test_typed_empty_monster+0x25c>
    1aa4:	ldr	r1, [sp]
    1aa8:	ldr	r0, [pc, #324]	; 1bf4 <test_typed_empty_monster+0x2ac>
    1aac:	ldr	r2, [pc, #312]	; 1bec <test_typed_empty_monster+0x2a4>
    1ab0:	ldr	ip, [pc, #320]	; 1bf8 <test_typed_empty_monster+0x2b0>
    1ab4:	mov	r3, #77	; 0x4d
    1ab8:	eor	r2, r2, r3
    1abc:	ldrb	r3, [r0, #1]!
    1ac0:	mul	r2, ip, r2
    1ac4:	cmp	r3, #0
    1ac8:	bne	1ab8 <test_typed_empty_monster+0x170>
    1acc:	ldr	r3, [pc, #280]	; 1bec <test_typed_empty_monster+0x2a4>
    1ad0:	cmp	r2, #0
    1ad4:	moveq	r2, r3
    1ad8:	mov	r0, r5
    1adc:	ldr	r3, [pc, #284]	; 1c00 <test_typed_empty_monster+0x2b8>
    1ae0:	bl	0 <flatcc_verify_table_as_typed_root>
    1ae4:	subs	r6, r0, #0
    1ae8:	bne	1b90 <test_typed_empty_monster+0x248>
    1aec:	mvn	r0, #126	; 0x7e
    1af0:	mov	lr, #14
    1af4:	mov	ip, #51	; 0x33
    1af8:	strb	r0, [sp, #4]
    1afc:	mvn	r4, #11
    1b00:	ldr	r3, [pc, #248]	; 1c00 <test_typed_empty_monster+0x2b8>
    1b04:	add	r2, sp, #4
    1b08:	ldr	r1, [sp]
    1b0c:	mov	r0, r5
    1b10:	strb	r4, [sp, #5]
    1b14:	strb	lr, [sp, #6]
    1b18:	strb	ip, [sp, #7]
    1b1c:	bl	0 <flatcc_verify_table_as_root>
    1b20:	subs	r6, r0, #0
    1b24:	bne	1b7c <test_typed_empty_monster+0x234>
    1b28:	ldr	r3, [pc, #208]	; 1c00 <test_typed_empty_monster+0x2b8>
    1b2c:	ldr	r2, [pc, #208]	; 1c04 <test_typed_empty_monster+0x2bc>
    1b30:	ldr	r1, [sp]
    1b34:	mov	r0, r5
    1b38:	bl	0 <flatcc_verify_table_as_root>
    1b3c:	cmp	r0, #0
    1b40:	bne	1b68 <test_typed_empty_monster+0x220>
    1b44:	ldr	r0, [pc, #188]	; 1c08 <test_typed_empty_monster+0x2c0>
    1b48:	bl	0 <puts>
    1b4c:	b	1b68 <test_typed_empty_monster+0x220>
    1b50:	ldr	r3, [pc, #148]	; 1bec <test_typed_empty_monster+0x2a4>
    1b54:	cmp	r1, r3
    1b58:	bne	1bb8 <test_typed_empty_monster+0x270>
    1b5c:	ldr	r0, [pc, #168]	; 1c0c <test_typed_empty_monster+0x2c4>
    1b60:	bl	0 <puts>
    1b64:	mvn	r6, #0
    1b68:	mov	r0, r5
    1b6c:	bl	0 <flatcc_builder_aligned_free>
    1b70:	mov	r0, r6
    1b74:	add	sp, sp, #8
    1b78:	pop	{r4, r5, r6, pc}
    1b7c:	bl	0 <flatcc_verify_error_string>
    1b80:	mov	r1, r0
    1b84:	ldr	r0, [pc, #132]	; 1c10 <test_typed_empty_monster+0x2c8>
    1b88:	bl	0 <printf>
    1b8c:	b	1b68 <test_typed_empty_monster+0x220>
    1b90:	bl	0 <flatcc_verify_error_string>
    1b94:	mov	r1, r0
    1b98:	ldr	r0, [pc, #116]	; 1c14 <test_typed_empty_monster+0x2cc>
    1b9c:	bl	0 <printf>
    1ba0:	b	1b68 <test_typed_empty_monster+0x220>
    1ba4:	bl	0 <flatcc_verify_error_string>
    1ba8:	mov	r1, r0
    1bac:	ldr	r0, [pc, #100]	; 1c18 <test_typed_empty_monster+0x2d0>
    1bb0:	bl	0 <printf>
    1bb4:	b	1b68 <test_typed_empty_monster+0x220>
    1bb8:	ldr	r0, [pc, #92]	; 1c1c <test_typed_empty_monster+0x2d4>
    1bbc:	bl	0 <printf>
    1bc0:	mvn	r6, #0
    1bc4:	b	1b68 <test_typed_empty_monster+0x220>
    1bc8:	ldr	r0, [pc, #80]	; 1c20 <test_typed_empty_monster+0x2d8>
    1bcc:	bl	0 <puts>
    1bd0:	mvn	r6, #0
    1bd4:	b	1b68 <test_typed_empty_monster+0x220>
    1bd8:	bl	540 <MyGame_Example_TestJSONPrefixParsing_verify_table+0x1c>
    1bdc:	.word	0x00000704
    1be0:	.word	0x00000674
    1be4:	.word	0x0000043c
    1be8:	.word	0x00000000
    1bec:	.word	0x811c9dc5
    1bf0:	.word	0x0000070c
    1bf4:	.word	0x000006ec
    1bf8:	.word	0x01000193
    1bfc:	.word	0x330ef481
    1c00:	.word	0x00000000
    1c04:	.word	0x0000054c
    1c08:	.word	0x00000844
    1c0c:	.word	0x00000890
    1c10:	.word	0x0000079c
    1c14:	.word	0x00000804
    1c18:	.word	0x000007cc
    1c1c:	.word	0x00000728
    1c20:	.word	0x0000075c

00001c24 <verify_table_with_emptystruct>:
    1c24:	cmp	r0, #0
    1c28:	push	{r4, lr}
    1c2c:	beq	1c40 <verify_table_with_emptystruct+0x1c>
    1c30:	ldr	r3, [pc, #100]	; 1c9c <verify_table_with_emptystruct+0x78>
    1c34:	ldr	r2, [r0, #4]
    1c38:	cmp	r2, r3
    1c3c:	beq	1c50 <verify_table_with_emptystruct+0x2c>
    1c40:	ldr	r0, [pc, #88]	; 1ca0 <verify_table_with_emptystruct+0x7c>
    1c44:	bl	0 <puts>
    1c48:	mvn	r0, #0
    1c4c:	pop	{r4, pc}
    1c50:	ldr	r3, [r0]
    1c54:	adds	r2, r0, r3
    1c58:	beq	1c40 <verify_table_with_emptystruct+0x1c>
    1c5c:	ldr	r3, [r0, r3]
    1c60:	sub	r3, r2, r3
    1c64:	ldrh	r1, [r3]
    1c68:	cmp	r1, #5
    1c6c:	bhi	1c80 <verify_table_with_emptystruct+0x5c>
    1c70:	ldr	r0, [pc, #44]	; 1ca4 <verify_table_with_emptystruct+0x80>
    1c74:	bl	0 <puts>
    1c78:	mvn	r0, #0
    1c7c:	pop	{r4, pc}
    1c80:	ldrh	r3, [r3, #4]
    1c84:	cmp	r3, #0
    1c88:	beq	1c70 <verify_table_with_emptystruct+0x4c>
    1c8c:	cmn	r2, r3
    1c90:	beq	1c70 <verify_table_with_emptystruct+0x4c>
    1c94:	mov	r0, #0
    1c98:	pop	{r4, pc}
    1c9c:	.word	0x534e4f4d
    1ca0:	.word	0x000008b8
    1ca4:	.word	0x000008e0

00001ca8 <test_table_with_emptystruct>:
    1ca8:	push	{r4, r5, lr}
    1cac:	sub	sp, sp, #12
    1cb0:	mov	r4, r0
    1cb4:	bl	0 <flatcc_builder_reset>
    1cb8:	mov	r3, #0
    1cbc:	mov	r0, r4
    1cc0:	mov	r2, r3
    1cc4:	ldr	r1, [pc, #204]	; 1d98 <test_table_with_emptystruct+0xf0>
    1cc8:	bl	0 <flatcc_builder_start_buffer>
    1ccc:	cmp	r0, #0
    1cd0:	beq	1d1c <test_table_with_emptystruct+0x74>
    1cd4:	add	r1, sp, #4
    1cd8:	mov	r0, r4
    1cdc:	bl	0 <flatcc_builder_finalize_aligned_buffer>
    1ce0:	ldr	r3, [pc, #180]	; 1d9c <test_table_with_emptystruct+0xf4>
    1ce4:	ldr	r2, [sp, #4]
    1ce8:	ldr	r3, [r3]
    1cec:	mov	r1, r0
    1cf0:	mov	r4, r0
    1cf4:	ldr	r0, [pc, #164]	; 1da0 <test_table_with_emptystruct+0xf8>
    1cf8:	bl	20 <hexdump>
    1cfc:	mov	r0, r4
    1d00:	bl	1c24 <verify_table_with_emptystruct>
    1d04:	mov	r5, r0
    1d08:	mov	r0, r4
    1d0c:	bl	0 <flatcc_builder_aligned_free>
    1d10:	mov	r0, r5
    1d14:	add	sp, sp, #12
    1d18:	pop	{r4, r5, pc}
    1d1c:	mov	r1, #1
    1d20:	mov	r0, r4
    1d24:	bl	0 <flatcc_builder_start_table>
    1d28:	subs	r5, r0, #0
    1d2c:	beq	1d40 <test_table_with_emptystruct+0x98>
    1d30:	mov	r1, #0
    1d34:	mov	r0, r4
    1d38:	bl	0 <flatcc_builder_end_buffer>
    1d3c:	b	1cd4 <test_table_with_emptystruct+0x2c>
    1d40:	mov	r3, #1
    1d44:	mov	r2, r5
    1d48:	mov	r1, r5
    1d4c:	mov	r0, r4
    1d50:	bl	0 <flatcc_builder_table_add>
    1d54:	cmp	r0, #0
    1d58:	beq	1d30 <test_table_with_emptystruct+0x88>
    1d5c:	mov	r2, r5
    1d60:	ldr	r1, [pc, #60]	; 1da4 <test_table_with_emptystruct+0xfc>
    1d64:	mov	r0, r4
    1d68:	bl	0 <flatcc_builder_check_required>
    1d6c:	cmp	r0, #0
    1d70:	beq	1d84 <test_table_with_emptystruct+0xdc>
    1d74:	mov	r0, r4
    1d78:	bl	0 <flatcc_builder_end_table>
    1d7c:	mov	r1, r0
    1d80:	b	1d34 <test_table_with_emptystruct+0x8c>
    1d84:	ldr	r3, [pc, #28]	; 1da8 <test_table_with_emptystruct+0x100>
    1d88:	mov	r2, #215	; 0xd7
    1d8c:	ldr	r1, [pc, #24]	; 1dac <test_table_with_emptystruct+0x104>
    1d90:	ldr	r0, [pc, #24]	; 1db0 <test_table_with_emptystruct+0x108>
    1d94:	bl	0 <__assert_fail>
    1d98:	.word	0x0000054c
    1d9c:	.word	0x00000000
    1da0:	.word	0x000009bc
    1da4:	.word	0x00000464
    1da8:	.word	0x00000440
    1dac:	.word	0x000001a8
    1db0:	.word	0x000008fc

00001db4 <test_typed_table_with_emptystruct>:
    1db4:	push	{r4, r5, lr}
    1db8:	sub	sp, sp, #12
    1dbc:	mov	r4, r0
    1dc0:	bl	0 <flatcc_builder_reset>
    1dc4:	mov	r3, #0
    1dc8:	mov	r0, r4
    1dcc:	mov	r2, r3
    1dd0:	ldr	r1, [pc, #392]	; 1f60 <test_typed_table_with_emptystruct+0x1ac>
    1dd4:	bl	0 <flatcc_builder_start_buffer>
    1dd8:	cmp	r0, #0
    1ddc:	beq	1ea4 <test_typed_table_with_emptystruct+0xf0>
    1de0:	mov	r0, r4
    1de4:	add	r1, sp, #4
    1de8:	bl	0 <flatcc_builder_get_direct_buffer>
    1dec:	ldr	r3, [pc, #368]	; 1f64 <test_typed_table_with_emptystruct+0x1b0>
    1df0:	ldr	r2, [sp, #4]
    1df4:	ldr	r3, [r3]
    1df8:	mov	r1, r0
    1dfc:	mov	r4, r0
    1e00:	ldr	r0, [pc, #352]	; 1f68 <test_typed_table_with_emptystruct+0x1b4>
    1e04:	bl	20 <hexdump>
    1e08:	mov	r0, r4
    1e0c:	ldr	r3, [pc, #344]	; 1f6c <test_typed_table_with_emptystruct+0x1b8>
    1e10:	ldr	r2, [pc, #328]	; 1f60 <test_typed_table_with_emptystruct+0x1ac>
    1e14:	ldr	r1, [sp, #4]
    1e18:	bl	0 <flatcc_verify_table_as_root>
    1e1c:	cmp	r0, #0
    1e20:	bne	1f0c <test_typed_table_with_emptystruct+0x158>
    1e24:	ldr	r3, [pc, #320]	; 1f6c <test_typed_table_with_emptystruct+0x1b8>
    1e28:	ldr	r2, [pc, #304]	; 1f60 <test_typed_table_with_emptystruct+0x1ac>
    1e2c:	ldr	r1, [sp, #4]
    1e30:	mov	r0, r4
    1e34:	bl	0 <flatcc_verify_table_as_root>
    1e38:	cmp	r0, #0
    1e3c:	bne	1f1c <test_typed_table_with_emptystruct+0x168>
    1e40:	ldr	r5, [pc, #296]	; 1f70 <test_typed_table_with_emptystruct+0x1bc>
    1e44:	ldr	r3, [pc, #288]	; 1f6c <test_typed_table_with_emptystruct+0x1b8>
    1e48:	mov	r2, r5
    1e4c:	ldr	r1, [sp, #4]
    1e50:	mov	r0, r4
    1e54:	bl	0 <flatcc_verify_table_as_typed_root>
    1e58:	cmp	r0, #0
    1e5c:	bne	1f2c <test_typed_table_with_emptystruct+0x178>
    1e60:	cmp	r4, #0
    1e64:	beq	1f3c <test_typed_table_with_emptystruct+0x188>
    1e68:	ldr	r3, [r4, #4]
    1e6c:	cmp	r3, r5
    1e70:	beq	1e88 <test_typed_table_with_emptystruct+0xd4>
    1e74:	ldr	r0, [pc, #248]	; 1f74 <test_typed_table_with_emptystruct+0x1c0>
    1e78:	bl	0 <puts>
    1e7c:	mvn	r0, #0
    1e80:	add	sp, sp, #12
    1e84:	pop	{r4, r5, pc}
    1e88:	ldr	r3, [r4]
    1e8c:	cmn	r4, r3
    1e90:	bne	1e80 <test_typed_table_with_emptystruct+0xcc>
    1e94:	ldr	r0, [pc, #220]	; 1f78 <test_typed_table_with_emptystruct+0x1c4>
    1e98:	bl	0 <puts>
    1e9c:	mvn	r0, #0
    1ea0:	b	1e80 <test_typed_table_with_emptystruct+0xcc>
    1ea4:	mov	r1, #1
    1ea8:	mov	r0, r4
    1eac:	bl	0 <flatcc_builder_start_table>
    1eb0:	subs	r5, r0, #0
    1eb4:	beq	1ec8 <test_typed_table_with_emptystruct+0x114>
    1eb8:	mov	r1, #0
    1ebc:	mov	r0, r4
    1ec0:	bl	0 <flatcc_builder_end_buffer>
    1ec4:	b	1de0 <test_typed_table_with_emptystruct+0x2c>
    1ec8:	mov	r3, #1
    1ecc:	mov	r2, r5
    1ed0:	mov	r1, r5
    1ed4:	mov	r0, r4
    1ed8:	bl	0 <flatcc_builder_table_add>
    1edc:	cmp	r0, #0
    1ee0:	beq	1eb8 <test_typed_table_with_emptystruct+0x104>
    1ee4:	mov	r2, r5
    1ee8:	ldr	r1, [pc, #140]	; 1f7c <test_typed_table_with_emptystruct+0x1c8>
    1eec:	mov	r0, r4
    1ef0:	bl	0 <flatcc_builder_check_required>
    1ef4:	cmp	r0, #0
    1ef8:	beq	1f4c <test_typed_table_with_emptystruct+0x198>
    1efc:	mov	r0, r4
    1f00:	bl	0 <flatcc_builder_end_table>
    1f04:	mov	r1, r0
    1f08:	b	1ebc <test_typed_table_with_emptystruct+0x108>
    1f0c:	ldr	r0, [pc, #108]	; 1f80 <test_typed_table_with_emptystruct+0x1cc>
    1f10:	bl	0 <puts>
    1f14:	mvn	r0, #0
    1f18:	b	1e80 <test_typed_table_with_emptystruct+0xcc>
    1f1c:	ldr	r0, [pc, #96]	; 1f84 <test_typed_table_with_emptystruct+0x1d0>
    1f20:	bl	0 <puts>
    1f24:	mvn	r0, #0
    1f28:	b	1e80 <test_typed_table_with_emptystruct+0xcc>
    1f2c:	ldr	r0, [pc, #84]	; 1f88 <test_typed_table_with_emptystruct+0x1d4>
    1f30:	bl	0 <puts>
    1f34:	mvn	r0, #0
    1f38:	b	1e80 <test_typed_table_with_emptystruct+0xcc>
    1f3c:	ldr	r0, [pc, #72]	; 1f8c <test_typed_table_with_emptystruct+0x1d8>
    1f40:	bl	0 <puts>
    1f44:	mvn	r0, #0
    1f48:	b	1e80 <test_typed_table_with_emptystruct+0xcc>
    1f4c:	ldr	r3, [pc, #60]	; 1f90 <test_typed_table_with_emptystruct+0x1dc>
    1f50:	mov	r2, #215	; 0xd7
    1f54:	ldr	r1, [pc, #56]	; 1f94 <test_typed_table_with_emptystruct+0x1e0>
    1f58:	ldr	r0, [pc, #56]	; 1f98 <test_typed_table_with_emptystruct+0x1e4>
    1f5c:	bl	0 <__assert_fail>
    1f60:	.word	0x000009d4
    1f64:	.word	0x00000000
    1f68:	.word	0x000009dc
    1f6c:	.word	0x00000000
    1f70:	.word	0xb0dd37b6
    1f74:	.word	0x00000ab0
    1f78:	.word	0x00000a78
    1f7c:	.word	0x00000464
    1f80:	.word	0x000009fc
    1f84:	.word	0x00000a1c
    1f88:	.word	0x00000a38
    1f8c:	.word	0x00000a60
    1f90:	.word	0x00000440
    1f94:	.word	0x000001a8
    1f98:	.word	0x000008fc

00001f9c <verify_monster>:
    1f9c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1fa0:	vpush	{d8-d9}
    1fa4:	ldr	r5, [pc, #888]	; 2324 <verify_monster+0x388>
    1fa8:	mov	r8, r0
    1fac:	add	lr, r5, #8
    1fb0:	add	fp, sp, #48	; 0x30
    1fb4:	sub	sp, sp, #52	; 0x34
    1fb8:	ldm	lr!, {r0, r1, r2, r3}
    1fbc:	add	r5, r5, #28
    1fc0:	sub	ip, fp, #72	; 0x48
    1fc4:	sub	r4, fp, #88	; 0x58
    1fc8:	stmia	ip!, {r0, r1, r2, r3}
    1fcc:	sub	sp, sp, #48	; 0x30
    1fd0:	ldm	r5, {r0, r1, r2, r3}
    1fd4:	ldr	r5, [lr]
    1fd8:	ldr	lr, [r8, #4]
    1fdc:	str	r5, [ip]
    1fe0:	ldr	ip, [pc, #832]	; 2328 <verify_monster+0x38c>
    1fe4:	stm	r4, {r0, r1, r2, r3}
    1fe8:	cmp	lr, ip
    1fec:	beq	2008 <verify_monster+0x6c>
    1ff0:	ldr	r0, [pc, #820]	; 232c <verify_monster+0x390>
    1ff4:	bl	0 <puts>
    1ff8:	mvn	r0, #0
    1ffc:	sub	sp, fp, #48	; 0x30
    2000:	vpop	{d8-d9}
    2004:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2008:	ldr	r9, [r8]
    200c:	adds	r7, r8, r9
    2010:	beq	296c <verify_monster+0x9d0>
    2014:	ldr	r3, [r8, r9]
    2018:	sub	r3, r7, r3
    201c:	ldrh	r2, [r3]
    2020:	cmp	r2, #9
    2024:	bls	2218 <verify_monster+0x27c>
    2028:	ldrh	r2, [r3, #8]
    202c:	cmp	r2, #0
    2030:	beq	2218 <verify_monster+0x27c>
    2034:	ldrsh	r2, [r7, r2]
    2038:	cmp	r2, #80	; 0x50
    203c:	bne	2218 <verify_monster+0x27c>
    2040:	ldrh	r5, [r3, #4]
    2044:	cmp	r5, #0
    2048:	beq	29f0 <verify_monster+0xa54>
    204c:	adds	r5, r7, r5
    2050:	beq	29f0 <verify_monster+0xa54>
    2054:	add	r6, sp, #15
    2058:	tst	r5, #15
    205c:	bic	r6, r6, #15
    2060:	bne	220c <verify_monster+0x270>
    2064:	vldr	s16, [pc, #684]	; 2318 <verify_monster+0x37c>
    2068:	vldr	s15, [r5, #8]
    206c:	vcmp.f32	s15, s16
    2070:	vmrs	APSR_nzcv, fpscr
    2074:	bne	291c <verify_monster+0x980>
    2078:	vldr	s17, [pc, #668]	; 231c <verify_monster+0x380>
    207c:	vldr	s15, [r5]
    2080:	vcmp.f32	s15, s17
    2084:	vmrs	APSR_nzcv, fpscr
    2088:	bne	22f8 <verify_monster+0x35c>
    208c:	vldr	s18, [pc, #652]	; 2320 <verify_monster+0x384>
    2090:	vldr	s15, [r5, #4]
    2094:	vcmp.f32	s15, s18
    2098:	vmrs	APSR_nzcv, fpscr
    209c:	bne	22f8 <verify_monster+0x35c>
    20a0:	mov	r2, #32
    20a4:	mov	r1, #0
    20a8:	mov	r0, r6
    20ac:	bl	0 <memset>
    20b0:	vldr	d7, [r5, #16]
    20b4:	ldrb	r1, [r5, #24]
    20b8:	ldrh	r2, [r5, #26]
    20bc:	ldrb	r3, [r5, #28]
    20c0:	vcmp.f64	d7, #0.0
    20c4:	vstr	s17, [r6]
    20c8:	vstr	s18, [r6, #4]
    20cc:	vstr	s16, [r6, #8]
    20d0:	vmrs	APSR_nzcv, fpscr
    20d4:	strb	r1, [r6, #24]
    20d8:	strh	r2, [r6, #26]
    20dc:	strb	r3, [r6, #28]
    20e0:	vstr	d7, [r6, #16]
    20e4:	bne	2308 <verify_monster+0x36c>
    20e8:	add	r0, r5, #26
    20ec:	mov	r2, #4
    20f0:	ldr	r1, [pc, #568]	; 2330 <verify_monster+0x394>
    20f4:	bl	0 <memcmp>
    20f8:	cmp	r0, #0
    20fc:	bne	2308 <verify_monster+0x36c>
    2100:	ldr	r5, [r8, r9]
    2104:	sub	r5, r7, r5
    2108:	ldrh	r6, [r5]
    210c:	cmp	r6, #11
    2110:	bhi	2128 <verify_monster+0x18c>
    2114:	ldr	r3, [pc, #536]	; 2334 <verify_monster+0x398>
    2118:	ldr	r2, [pc, #536]	; 2338 <verify_monster+0x39c>
    211c:	ldr	r1, [pc, #764]	; 2420 <verify_monster+0x484>
    2120:	ldr	r0, [pc, #532]	; 233c <verify_monster+0x3a0>
    2124:	bl	0 <__assert_fail>
    2128:	ldrh	r3, [r5, #10]
    212c:	cmp	r3, #0
    2130:	beq	2114 <verify_monster+0x178>
    2134:	ldr	r8, [r7, r3]
    2138:	add	r3, r7, r3
    213c:	add	r8, r8, #4
    2140:	adds	r8, r3, r8
    2144:	beq	27a0 <verify_monster+0x804>
    2148:	ldr	r1, [pc, #496]	; 2340 <verify_monster+0x3a4>
    214c:	mov	r0, r8
    2150:	bl	0 <strcmp>
    2154:	cmp	r0, #0
    2158:	bne	27a0 <verify_monster+0x804>
    215c:	ldr	r3, [r8, #-4]
    2160:	cmp	r3, #9
    2164:	bne	26b4 <verify_monster+0x718>
    2168:	cmp	r6, #17
    216c:	bhi	2180 <verify_monster+0x1e4>
    2170:	ldr	r0, [pc, #460]	; 2344 <verify_monster+0x3a8>
    2174:	bl	0 <puts>
    2178:	mvn	r0, #0
    217c:	b	1ffc <verify_monster+0x60>
    2180:	ldrh	r3, [r5, #16]
    2184:	cmp	r3, #0
    2188:	beq	2170 <verify_monster+0x1d4>
    218c:	ldrsb	r3, [r7, r3]
    2190:	cmp	r3, #2
    2194:	bne	2170 <verify_monster+0x1d4>
    2198:	ldrh	r3, [r5, #14]
    219c:	cmp	r3, #0
    21a0:	beq	27c0 <verify_monster+0x824>
    21a4:	ldr	r2, [r7, r3]
    21a8:	add	r3, r7, r3
    21ac:	add	r2, r2, #4
    21b0:	adds	r3, r3, r2
    21b4:	beq	27c0 <verify_monster+0x824>
    21b8:	ldr	r2, [r3, #-4]
    21bc:	cmp	r2, #10
    21c0:	subeq	r3, r3, #1
    21c4:	moveq	r1, #0
    21c8:	bne	27c0 <verify_monster+0x824>
    21cc:	ldrb	r2, [r3, #1]!
    21d0:	cmp	r2, r1
    21d4:	bne	2228 <verify_monster+0x28c>
    21d8:	add	r1, r1, #1
    21dc:	cmp	r1, #10
    21e0:	bne	21cc <verify_monster+0x230>
    21e4:	ldrh	r1, [r5, #6]
    21e8:	cmp	r1, #0
    21ec:	beq	2240 <verify_monster+0x2a4>
    21f0:	ldrsh	r3, [r7, r1]
    21f4:	cmp	r3, #150	; 0x96
    21f8:	bne	27b0 <verify_monster+0x814>
    21fc:	ldr	r0, [pc, #324]	; 2348 <verify_monster+0x3ac>
    2200:	bl	0 <puts>
    2204:	mvn	r0, #0
    2208:	b	1ffc <verify_monster+0x60>
    220c:	ldr	r0, [pc, #312]	; 234c <verify_monster+0x3b0>
    2210:	bl	0 <puts>
    2214:	b	2064 <verify_monster+0xc8>
    2218:	ldr	r0, [pc, #304]	; 2350 <verify_monster+0x3b4>
    221c:	bl	0 <puts>
    2220:	mvn	r0, #0
    2224:	b	1ffc <verify_monster+0x60>
    2228:	ldr	r0, [pc, #292]	; 2354 <verify_monster+0x3b8>
    222c:	bl	0 <printf>
    2230:	mvn	r0, #0
    2234:	sub	sp, fp, #48	; 0x30
    2238:	vpop	{d8-d9}
    223c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2240:	ldrh	r3, [r5, #8]
    2244:	cmp	r3, #0
    2248:	beq	294c <verify_monster+0x9b0>
    224c:	ldrh	r3, [r5, #4]
    2250:	cmp	r3, #0
    2254:	beq	295c <verify_monster+0x9c0>
    2258:	cmp	r6, #23
    225c:	bhi	2270 <verify_monster+0x2d4>
    2260:	ldr	r0, [pc, #240]	; 2358 <verify_monster+0x3bc>
    2264:	bl	0 <puts>
    2268:	mvn	r0, #0
    226c:	b	1ffc <verify_monster+0x60>
    2270:	ldrh	r3, [r5, #22]
    2274:	cmp	r3, #0
    2278:	beq	2260 <verify_monster+0x2c4>
    227c:	ldr	r2, [r7, r3]
    2280:	add	r3, r7, r3
    2284:	add	r2, r2, #4
    2288:	adds	r3, r3, r2
    228c:	beq	2260 <verify_monster+0x2c4>
    2290:	ldr	r2, [r3, #-4]
    2294:	cmp	r2, #5
    2298:	subeq	r2, fp, #72	; 0x48
    229c:	moveq	lr, r1
    22a0:	bne	2260 <verify_monster+0x2c4>
    22a4:	cmp	r3, #0
    22a8:	ldrsh	r0, [r2]
    22ac:	beq	2ac8 <verify_monster+0xb2c>
    22b0:	ldrsh	ip, [r3]
    22b4:	cmp	ip, r0
    22b8:	bne	26c4 <verify_monster+0x728>
    22bc:	ldrsb	ip, [r2, #2]
    22c0:	ldrsb	r0, [r3, #2]
    22c4:	cmp	r0, ip
    22c8:	bne	26c4 <verify_monster+0x728>
    22cc:	add	r1, r1, #1
    22d0:	cmp	r1, #5
    22d4:	add	r2, r2, #4
    22d8:	add	r3, r3, #4
    22dc:	bne	22a4 <verify_monster+0x308>
    22e0:	cmp	r6, #27
    22e4:	bhi	2434 <verify_monster+0x498>
    22e8:	ldr	r0, [pc, #108]	; 235c <verify_monster+0x3c0>
    22ec:	bl	0 <puts>
    22f0:	mvn	r0, #0
    22f4:	b	1ffc <verify_monster+0x60>
    22f8:	ldr	r0, [pc, #96]	; 2360 <verify_monster+0x3c4>
    22fc:	bl	0 <puts>
    2300:	mvn	r0, #0
    2304:	b	1ffc <verify_monster+0x60>
    2308:	ldr	r0, [pc, #84]	; 2364 <verify_monster+0x3c8>
    230c:	bl	0 <puts>
    2310:	mvn	r0, #0
    2314:	b	1ffc <verify_monster+0x60>
    2318:	.word	0xc04ccccd
    231c:	.word	0x3f800000
    2320:	.word	0x40000000
    2324:	.word	0x00000460
    2328:	.word	0x534e4f4d
    232c:	.word	0x000010cc
    2330:	.word	0x00000008
    2334:	.word	0x00000244
    2338:	.word	0x000002bb
    233c:	.word	0x00000164
    2340:	.word	0x00000674
    2344:	.word	0x00000b8c
    2348:	.word	0x000010f8
    234c:	.word	0x00000ad4
    2350:	.word	0x000004ec
    2354:	.word	0x00000bc8
    2358:	.word	0x00000c1c
    235c:	.word	0x00000c6c
    2360:	.word	0x00000b20
    2364:	.word	0x00000b38
    2368:	.word	0x00000d74
    236c:	.word	0x00000d48
    2370:	.word	0x00000e6c
    2374:	.word	0x0000049c
    2378:	.word	0x00000ec8
    237c:	.word	0x00000f70
    2380:	.word	0x00000b70
    2384:	.word	0x00000c44
    2388:	.word	0x00000f90
    238c:	.word	0x00000f9c
    2390:	.word	0x00000fbc
    2394:	.word	0x00000d10
    2398:	.word	0x00000b5c
    239c:	.word	0x00000be8
    23a0:	.word	0x00000bac
    23a4:	.word	0x00001000
    23a8:	.word	0x00000cf0
    23ac:	.word	0x00001044
    23b0:	.word	0x000010b4
    23b4:	.word	0x00000afc
    23b8:	.word	0x00000f24
    23bc:	.word	0x00000fe0
    23c0:	.word	0x00000bfc
    23c4:	.word	0x00000510
    23c8:	.word	0x00000468
    23cc:	.word	0x00000f44
    23d0:	.word	0x00000e40
    23d4:	.word	0x00000e18
    23d8:	.word	0x00000ed0
    23dc:	.word	0x00000e8c
    23e0:	.word	0x00000f04
    23e4:	.word	0x00000ee8
    23e8:	.word	0x00000ac0
    23ec:	.word	0x00000cf8
    23f0:	.word	0x00000d50
    23f4:	.word	0x00000e74
    23f8:	.word	0x00000da8
    23fc:	.word	0x00000d80
    2400:	.word	0x00000ea8
    2404:	.word	0x00000df0
    2408:	.word	0x00000dcc
    240c:	.word	0x00001094
    2410:	.word	0x00001080
    2414:	.word	0x000004a0
    2418:	.word	0x0000025f
    241c:	.word	0x00000090
    2420:	.word	0x00000024
    2424:	.word	0x0000048c
    2428:	.word	0x00000296
    242c:	.word	0x00000c90
    2430:	.word	0x00000cec
    2434:	ldrh	r8, [r5, #26]
    2438:	cmp	r8, #0
    243c:	beq	22e8 <verify_monster+0x34c>
    2440:	ldr	r9, [r7, r8]
    2444:	add	r8, r7, r8
    2448:	add	r3, r9, #4
    244c:	adds	r9, r8, r3
    2450:	str	r3, [fp, #-96]	; 0xffffffa0
    2454:	beq	22e8 <verify_monster+0x34c>
    2458:	ldr	r2, [r9, #-4]
    245c:	cmp	r2, #8
    2460:	bne	22e8 <verify_monster+0x34c>
    2464:	ldr	sl, [r9, #20]
    2468:	add	sl, sl, #20
    246c:	adds	sl, r9, sl
    2470:	beq	2ae0 <verify_monster+0xb44>
    2474:	mov	r0, sl
    2478:	bl	250 <MyGame_Example_Monster_name>
    247c:	ldr	r1, [pc, #-220]	; 23a8 <verify_monster+0x40c>
    2480:	bl	0 <strcmp>
    2484:	cmp	r0, #0
    2488:	bne	2a00 <verify_monster+0xa64>
    248c:	ldr	r2, [r9, #4]
    2490:	add	r2, r2, #4
    2494:	add	r2, r9, r2
    2498:	cmp	sl, r2
    249c:	bne	2790 <verify_monster+0x7f4>
    24a0:	ldr	r0, [r9, #8]
    24a4:	add	r0, r0, #8
    24a8:	add	r0, r9, r0
    24ac:	bl	250 <MyGame_Example_Monster_name>
    24b0:	ldr	r1, [pc, #-332]	; 236c <verify_monster+0x3d0>
    24b4:	mov	sl, r0
    24b8:	bl	0 <strcmp>
    24bc:	cmp	r0, #0
    24c0:	bne	2a10 <verify_monster+0xa74>
    24c4:	ldr	r3, [fp, #-96]	; 0xffffffa0
    24c8:	ldr	r0, [r8, r3]
    24cc:	add	r0, r9, r0
    24d0:	bl	250 <MyGame_Example_Monster_name>
    24d4:	ldr	r1, [pc, #-372]	; 2368 <verify_monster+0x3cc>
    24d8:	mov	r8, r0
    24dc:	bl	0 <strcmp>
    24e0:	cmp	r0, #0
    24e4:	bne	2a48 <verify_monster+0xaac>
    24e8:	ldr	r0, [r9, #12]
    24ec:	add	r0, r0, #12
    24f0:	add	r0, r9, r0
    24f4:	bl	250 <MyGame_Example_Monster_name>
    24f8:	ldr	r1, [pc, #-344]	; 23a8 <verify_monster+0x40c>
    24fc:	mov	r8, r0
    2500:	bl	0 <strcmp>
    2504:	cmp	r0, #0
    2508:	bne	2a34 <verify_monster+0xa98>
    250c:	ldr	r0, [r9, #16]
    2510:	add	r0, r0, #16
    2514:	add	r0, r9, r0
    2518:	bl	250 <MyGame_Example_Monster_name>
    251c:	ldr	r1, [pc, #-440]	; 236c <verify_monster+0x3d0>
    2520:	mov	r8, r0
    2524:	bl	0 <strcmp>
    2528:	cmp	r0, #0
    252c:	bne	2a80 <verify_monster+0xae4>
    2530:	ldr	r0, [r9, #24]
    2534:	add	r0, r0, #24
    2538:	add	r0, r9, r0
    253c:	bl	250 <MyGame_Example_Monster_name>
    2540:	ldr	r1, [pc, #-480]	; 2368 <verify_monster+0x3cc>
    2544:	mov	r8, r0
    2548:	bl	0 <strcmp>
    254c:	cmp	r0, #0
    2550:	bne	2a6c <verify_monster+0xad0>
    2554:	ldr	r0, [r9, #28]
    2558:	add	r0, r0, #28
    255c:	add	r0, r9, r0
    2560:	bl	250 <MyGame_Example_Monster_name>
    2564:	ldr	r1, [pc, #-512]	; 236c <verify_monster+0x3d0>
    2568:	mov	r8, r0
    256c:	bl	0 <strcmp>
    2570:	cmp	r0, #0
    2574:	bne	299c <verify_monster+0xa00>
    2578:	ldrh	r3, [r5, #24]
    257c:	cmp	r3, #0
    2580:	beq	298c <verify_monster+0x9f0>
    2584:	ldr	r2, [r7, r3]
    2588:	add	r3, r7, r3
    258c:	add	r2, r2, #4
    2590:	adds	r8, r3, r2
    2594:	beq	298c <verify_monster+0x9f0>
    2598:	ldr	r1, [r8, #-4]
    259c:	cmp	r1, #3
    25a0:	bne	298c <verify_monster+0x9f0>
    25a4:	ldr	r0, [r3, r2]
    25a8:	ldr	r1, [pc, #-576]	; 2370 <verify_monster+0x3d4>
    25ac:	add	r0, r0, #4
    25b0:	add	r0, r8, r0
    25b4:	bl	0 <strcmp>
    25b8:	cmp	r0, #0
    25bc:	bne	2a24 <verify_monster+0xa88>
    25c0:	ldr	r0, [r8, #4]
    25c4:	add	r0, r0, #8
    25c8:	adds	r0, r8, r0
    25cc:	beq	29c0 <verify_monster+0xa24>
    25d0:	ldr	r2, [r0, #-4]
    25d4:	cmp	r2, #2
    25d8:	bne	29c0 <verify_monster+0xa24>
    25dc:	ldr	r1, [pc, #-624]	; 2374 <verify_monster+0x3d8>
    25e0:	bl	0 <memcmp>
    25e4:	cmp	r0, #0
    25e8:	bne	2a5c <verify_monster+0xac0>
    25ec:	ldr	r0, [r8, #8]
    25f0:	ldr	r1, [pc, #-640]	; 2378 <verify_monster+0x3dc>
    25f4:	add	r0, r0, #12
    25f8:	add	r0, r8, r0
    25fc:	bl	0 <strcmp>
    2600:	subs	r1, r0, #0
    2604:	bne	29b0 <verify_monster+0xa14>
    2608:	cmp	r6, #53	; 0x35
    260c:	bls	29e0 <verify_monster+0xa44>
    2610:	ldrh	r3, [r5, #52]	; 0x34
    2614:	cmp	r3, #0
    2618:	beq	29e0 <verify_monster+0xa44>
    261c:	ldr	r2, [r7, r3]
    2620:	add	r3, r7, r3
    2624:	add	r2, r2, #4
    2628:	adds	r3, r3, r2
    262c:	beq	29d0 <verify_monster+0xa34>
    2630:	ldr	r2, [r3, #-4]
    2634:	cmp	r2, #4
    2638:	subeq	r3, r3, #1
    263c:	bne	29d0 <verify_monster+0xa34>
    2640:	ldrb	r0, [r3, #1]!
    2644:	ldr	r2, [r4, r1, lsl #2]
    2648:	cmp	r0, r2
    264c:	bne	292c <verify_monster+0x990>
    2650:	add	r1, r1, #1
    2654:	cmp	r1, #4
    2658:	bne	2640 <verify_monster+0x6a4>
    265c:	ldrh	r3, [r5, #18]
    2660:	cmp	r3, #0
    2664:	beq	297c <verify_monster+0x9e0>
    2668:	ldrb	r3, [r7, r3]
    266c:	cmp	r3, #1
    2670:	bne	297c <verify_monster+0x9e0>
    2674:	ldrh	r6, [r5, #20]
    2678:	cmp	r6, #0
    267c:	moveq	r9, r6
    2680:	ldrne	r3, [r7, r6]
    2684:	addne	r9, r7, r6
    2688:	addne	r9, r9, r3
    268c:	mov	r0, r9
    2690:	bl	250 <MyGame_Example_Monster_name>
    2694:	ldr	r1, [pc, #-756]	; 23a8 <verify_monster+0x40c>
    2698:	bl	0 <strcmp>
    269c:	cmp	r0, #0
    26a0:	beq	26d4 <verify_monster+0x738>
    26a4:	ldr	r0, [pc, #-816]	; 237c <verify_monster+0x3e0>
    26a8:	bl	0 <puts>
    26ac:	mvn	r0, #0
    26b0:	b	1ffc <verify_monster+0x60>
    26b4:	ldr	r0, [pc, #-828]	; 2380 <verify_monster+0x3e4>
    26b8:	bl	0 <puts>
    26bc:	mvn	r0, #0
    26c0:	b	1ffc <verify_monster+0x60>
    26c4:	ldr	r0, [pc, #-840]	; 2384 <verify_monster+0x3e8>
    26c8:	bl	0 <printf>
    26cc:	mvn	r0, #0
    26d0:	b	1ffc <verify_monster+0x60>
    26d4:	ldrh	r8, [r5, #28]
    26d8:	cmp	r8, #0
    26dc:	beq	2744 <verify_monster+0x7a8>
    26e0:	ldr	sl, [r7, r8]
    26e4:	add	r8, r7, r8
    26e8:	add	r4, r8, sl
    26ec:	mov	r0, r4
    26f0:	bl	250 <MyGame_Example_Monster_name>
    26f4:	ldr	r1, [pc, #-884]	; 2388 <verify_monster+0x3ec>
    26f8:	bl	0 <strcmp>
    26fc:	cmp	r0, #0
    2700:	bne	2758 <verify_monster+0x7bc>
    2704:	cmp	r4, #0
    2708:	beq	2adc <verify_monster+0xb40>
    270c:	ldr	r3, [r8, sl]
    2710:	sub	r3, r4, r3
    2714:	ldrh	r2, [r3]
    2718:	cmp	r2, #19
    271c:	bhi	2768 <verify_monster+0x7cc>
    2720:	cmp	r6, #0
    2724:	ldrne	r1, [r7, r6]
    2728:	addne	r6, r7, r6
    272c:	addne	r6, r6, r1
    2730:	cmp	r6, r9
    2734:	bne	293c <verify_monster+0x9a0>
    2738:	cmp	r2, #27
    273c:	bhi	27d0 <verify_monster+0x834>
    2740:	bl	228 <MyGame_Example_Monster_vec_at.part.23>
    2744:	bl	250 <MyGame_Example_Monster_name>
    2748:	ldr	r1, [pc, #-968]	; 2388 <verify_monster+0x3ec>
    274c:	bl	0 <strcmp>
    2750:	cmp	r0, #0
    2754:	beq	2adc <verify_monster+0xb40>
    2758:	ldr	r0, [pc, #-980]	; 238c <verify_monster+0x3f0>
    275c:	bl	0 <puts>
    2760:	mvn	r0, #0
    2764:	b	1ffc <verify_monster+0x60>
    2768:	ldrh	r1, [r3, #18]
    276c:	cmp	r1, #0
    2770:	beq	2720 <verify_monster+0x784>
    2774:	ldrb	r1, [r4, r1]
    2778:	cmp	r1, #0
    277c:	beq	2720 <verify_monster+0x784>
    2780:	ldr	r0, [pc, #-1016]	; 2390 <verify_monster+0x3f4>
    2784:	bl	0 <puts>
    2788:	mvn	r0, #0
    278c:	b	1ffc <verify_monster+0x60>
    2790:	ldr	r0, [pc, #-1028]	; 2394 <verify_monster+0x3f8>
    2794:	bl	0 <puts>
    2798:	mvn	r0, #0
    279c:	b	1ffc <verify_monster+0x60>
    27a0:	ldr	r0, [pc, #-1040]	; 2398 <verify_monster+0x3fc>
    27a4:	bl	0 <puts>
    27a8:	mvn	r0, #0
    27ac:	b	1ffc <verify_monster+0x60>
    27b0:	ldr	r0, [pc, #-1052]	; 239c <verify_monster+0x400>
    27b4:	bl	0 <puts>
    27b8:	mvn	r0, #0
    27bc:	b	1ffc <verify_monster+0x60>
    27c0:	ldr	r0, [pc, #-1064]	; 23a0 <verify_monster+0x404>
    27c4:	bl	0 <puts>
    27c8:	mvn	r0, #0
    27cc:	b	1ffc <verify_monster+0x60>
    27d0:	ldrh	r3, [r3, #26]
    27d4:	cmp	r3, #0
    27d8:	beq	2740 <verify_monster+0x7a4>
    27dc:	ldr	r2, [r4, r3]
    27e0:	add	r3, r4, r3
    27e4:	add	r2, r2, #4
    27e8:	adds	r3, r3, r2
    27ec:	beq	2740 <verify_monster+0x7a4>
    27f0:	ldr	r1, [r3, #-4]
    27f4:	sub	r2, r1, #1
    27f8:	cmp	r2, r1
    27fc:	add	r1, r3, r2, lsl #2
    2800:	bcs	2740 <verify_monster+0x7a4>
    2804:	ldr	r2, [r3, r2, lsl #2]
    2808:	adds	r3, r1, r2
    280c:	beq	2adc <verify_monster+0xb40>
    2810:	ldr	r2, [r1, r2]
    2814:	sub	r2, r3, r2
    2818:	ldrh	r1, [r2]
    281c:	cmp	r1, #19
    2820:	bhi	2834 <verify_monster+0x898>
    2824:	ldr	r0, [pc, #-1160]	; 23a4 <verify_monster+0x408>
    2828:	bl	0 <puts>
    282c:	mvn	r0, #0
    2830:	b	1ffc <verify_monster+0x60>
    2834:	ldrh	r0, [r2, #18]
    2838:	cmp	r0, #0
    283c:	beq	2824 <verify_monster+0x888>
    2840:	ldrb	r0, [r3, r0]
    2844:	cmp	r0, #1
    2848:	bne	2824 <verify_monster+0x888>
    284c:	cmp	r1, #21
    2850:	movls	r0, #0
    2854:	bls	286c <verify_monster+0x8d0>
    2858:	ldrh	r0, [r2, #20]
    285c:	cmp	r0, #0
    2860:	ldrne	r2, [r3, r0]
    2864:	addne	r3, r3, r0
    2868:	addne	r0, r3, r2
    286c:	bl	250 <MyGame_Example_Monster_name>
    2870:	ldr	r1, [pc, #-1232]	; 23a8 <verify_monster+0x40c>
    2874:	bl	0 <strcmp>
    2878:	cmp	r0, #0
    287c:	beq	2890 <verify_monster+0x8f4>
    2880:	ldr	r0, [pc, #-1244]	; 23ac <verify_monster+0x410>
    2884:	bl	0 <puts>
    2888:	mvn	r0, #0
    288c:	b	1ffc <verify_monster+0x60>
    2890:	ldrh	r3, [r5, #34]	; 0x22
    2894:	cmp	r3, #0
    2898:	beq	2aa4 <verify_monster+0xb08>
    289c:	ldrb	r3, [r7, r3]
    28a0:	cmp	r3, #0
    28a4:	bne	2aa4 <verify_monster+0xb08>
    28a8:	ldrh	r3, [r5, #32]
    28ac:	cmp	r3, #0
    28b0:	beq	2a94 <verify_monster+0xaf8>
    28b4:	ldr	r2, [r7, r3]
    28b8:	add	r7, r7, r3
    28bc:	adds	r3, r7, r2
    28c0:	beq	2ab4 <verify_monster+0xb18>
    28c4:	ldr	r2, [r7, r2]
    28c8:	sub	r3, r3, r2
    28cc:	ldrh	r2, [r3]
    28d0:	cmp	r2, #5
    28d4:	bls	1ffc <verify_monster+0x60>
    28d8:	ldrh	r1, [r3, #4]
    28dc:	cmp	r1, #0
    28e0:	bne	290c <verify_monster+0x970>
    28e4:	cmp	r2, #7
    28e8:	bls	1ffc <verify_monster+0x60>
    28ec:	ldrh	r1, [r3, #6]
    28f0:	cmp	r1, #0
    28f4:	bne	290c <verify_monster+0x970>
    28f8:	cmp	r2, #9
    28fc:	bls	1ffc <verify_monster+0x60>
    2900:	ldrh	r3, [r3, #8]
    2904:	cmp	r3, #0
    2908:	beq	1ffc <verify_monster+0x60>
    290c:	ldr	r0, [pc, #-1380]	; 23b0 <verify_monster+0x414>
    2910:	bl	0 <puts>
    2914:	mvn	r0, #0
    2918:	b	1ffc <verify_monster+0x60>
    291c:	ldr	r0, [pc, #-1392]	; 23b4 <verify_monster+0x418>
    2920:	bl	0 <puts>
    2924:	mvn	r0, #0
    2928:	b	1ffc <verify_monster+0x60>
    292c:	ldr	r0, [pc, #-1404]	; 23b8 <verify_monster+0x41c>
    2930:	bl	0 <printf>
    2934:	mvn	r0, #0
    2938:	b	1ffc <verify_monster+0x60>
    293c:	ldr	r0, [pc, #-1416]	; 23bc <verify_monster+0x420>
    2940:	bl	0 <puts>
    2944:	mvn	r0, #0
    2948:	b	1ffc <verify_monster+0x60>
    294c:	ldr	r0, [pc, #-1428]	; 23c0 <verify_monster+0x424>
    2950:	bl	0 <puts>
    2954:	mvn	r0, #0
    2958:	b	1ffc <verify_monster+0x60>
    295c:	ldr	r0, [pc, #-1440]	; 23c4 <verify_monster+0x428>
    2960:	bl	0 <puts>
    2964:	mvn	r0, #0
    2968:	b	1ffc <verify_monster+0x60>
    296c:	ldr	r0, [pc, #-1452]	; 23c8 <verify_monster+0x42c>
    2970:	bl	0 <puts>
    2974:	mvn	r0, #0
    2978:	b	1ffc <verify_monster+0x60>
    297c:	ldr	r0, [pc, #-1464]	; 23cc <verify_monster+0x430>
    2980:	bl	0 <puts>
    2984:	mvn	r0, #0
    2988:	b	1ffc <verify_monster+0x60>
    298c:	ldr	r0, [pc, #-1476]	; 23d0 <verify_monster+0x434>
    2990:	bl	0 <puts>
    2994:	mvn	r0, #0
    2998:	b	1ffc <verify_monster+0x60>
    299c:	mov	r1, r8
    29a0:	ldr	r0, [pc, #-1492]	; 23d4 <verify_monster+0x438>
    29a4:	bl	0 <printf>
    29a8:	mvn	r0, #0
    29ac:	b	1ffc <verify_monster+0x60>
    29b0:	ldr	r0, [pc, #-1504]	; 23d8 <verify_monster+0x43c>
    29b4:	bl	0 <puts>
    29b8:	mvn	r0, #0
    29bc:	b	1ffc <verify_monster+0x60>
    29c0:	ldr	r0, [pc, #-1516]	; 23dc <verify_monster+0x440>
    29c4:	bl	0 <printf>
    29c8:	mvn	r0, #0
    29cc:	b	1ffc <verify_monster+0x60>
    29d0:	ldr	r0, [pc, #-1528]	; 23e0 <verify_monster+0x444>
    29d4:	bl	0 <puts>
    29d8:	mvn	r0, #0
    29dc:	b	1ffc <verify_monster+0x60>
    29e0:	ldr	r0, [pc, #-1540]	; 23e4 <verify_monster+0x448>
    29e4:	bl	0 <puts>
    29e8:	mvn	r0, #0
    29ec:	b	1ffc <verify_monster+0x60>
    29f0:	ldr	r0, [pc, #-1552]	; 23e8 <verify_monster+0x44c>
    29f4:	bl	0 <puts>
    29f8:	mvn	r0, #0
    29fc:	b	1ffc <verify_monster+0x60>
    2a00:	ldr	r0, [pc, #-1564]	; 23ec <verify_monster+0x450>
    2a04:	bl	0 <printf>
    2a08:	mvn	r0, #0
    2a0c:	b	1ffc <verify_monster+0x60>
    2a10:	mov	r1, sl
    2a14:	ldr	r0, [pc, #-1580]	; 23f0 <verify_monster+0x454>
    2a18:	bl	0 <printf>
    2a1c:	mvn	r0, #0
    2a20:	b	1ffc <verify_monster+0x60>
    2a24:	ldr	r0, [pc, #-1592]	; 23f4 <verify_monster+0x458>
    2a28:	bl	0 <puts>
    2a2c:	mvn	r0, #0
    2a30:	b	1ffc <verify_monster+0x60>
    2a34:	mov	r1, r8
    2a38:	ldr	r0, [pc, #-1608]	; 23f8 <verify_monster+0x45c>
    2a3c:	bl	0 <printf>
    2a40:	mvn	r0, #0
    2a44:	b	1ffc <verify_monster+0x60>
    2a48:	mov	r1, r8
    2a4c:	ldr	r0, [pc, #-1624]	; 23fc <verify_monster+0x460>
    2a50:	bl	0 <printf>
    2a54:	mvn	r0, #0
    2a58:	b	1ffc <verify_monster+0x60>
    2a5c:	ldr	r0, [pc, #-1636]	; 2400 <verify_monster+0x464>
    2a60:	bl	0 <puts>
    2a64:	mvn	r0, #0
    2a68:	b	1ffc <verify_monster+0x60>
    2a6c:	mov	r1, r8
    2a70:	ldr	r0, [pc, #-1652]	; 2404 <verify_monster+0x468>
    2a74:	bl	0 <printf>
    2a78:	mvn	r0, #0
    2a7c:	b	1ffc <verify_monster+0x60>
    2a80:	mov	r1, r8
    2a84:	ldr	r0, [pc, #-1668]	; 2408 <verify_monster+0x46c>
    2a88:	bl	0 <printf>
    2a8c:	mvn	r0, #0
    2a90:	b	1ffc <verify_monster+0x60>
    2a94:	ldr	r0, [pc, #-1680]	; 240c <verify_monster+0x470>
    2a98:	bl	0 <puts>
    2a9c:	mvn	r0, #0
    2aa0:	b	1ffc <verify_monster+0x60>
    2aa4:	ldr	r0, [pc, #-1692]	; 2410 <verify_monster+0x474>
    2aa8:	bl	0 <puts>
    2aac:	mvn	r0, #0
    2ab0:	b	1ffc <verify_monster+0x60>
    2ab4:	ldr	r3, [pc, #-1704]	; 2414 <verify_monster+0x478>
    2ab8:	ldr	r2, [pc, #-1704]	; 2418 <verify_monster+0x47c>
    2abc:	ldr	r1, [pc, #-1700]	; 2420 <verify_monster+0x484>
    2ac0:	ldr	r0, [pc, #-1708]	; 241c <verify_monster+0x480>
    2ac4:	bl	0 <__assert_fail>
    2ac8:	cmp	r0, #0
    2acc:	bne	26c4 <verify_monster+0x728>
    2ad0:	ldrsb	ip, [r2, #2]
    2ad4:	mov	r0, lr
    2ad8:	b	22c4 <verify_monster+0x328>
    2adc:	bl	1d0 <elapsed_realtime+0x6c>
    2ae0:	ldr	r3, [pc, #-1732]	; 2424 <verify_monster+0x488>
    2ae4:	ldr	r2, [pc, #-1732]	; 2428 <verify_monster+0x48c>
    2ae8:	ldr	r1, [pc, #-1732]	; 242c <verify_monster+0x490>
    2aec:	ldr	r0, [pc, #-1732]	; 2430 <verify_monster+0x494>
    2af0:	bl	0 <__assert_fail>

00002af4 <gen_monster>:
    2af4:	ldr	r2, [pc, #2400]	; 345c <gen_monster+0x968>
    2af8:	push	{r4, r5, r6, r7, lr}
    2afc:	mov	r4, r0
    2b00:	mov	r6, r1
    2b04:	ldm	r2, {r0, r1, r2}
    2b08:	sub	sp, sp, #52	; 0x34
    2b0c:	add	ip, sp, #24
    2b10:	mov	r5, #0
    2b14:	stmia	ip!, {r0, r1}
    2b18:	mov	r1, #1
    2b1c:	mov	r0, r4
    2b20:	strh	r2, [ip]
    2b24:	strb	r5, [sp, #12]
    2b28:	strb	r5, [sp, #15]
    2b2c:	strb	r1, [sp, #13]
    2b30:	strb	r1, [sp, #14]
    2b34:	bl	0 <flatcc_builder_reset>
    2b38:	cmp	r6, r5
    2b3c:	beq	3364 <gen_monster+0x870>
    2b40:	mov	r2, r5
    2b44:	mov	r3, #2
    2b48:	ldr	r1, [pc, #2320]	; 3460 <gen_monster+0x96c>
    2b4c:	mov	r0, r4
    2b50:	bl	0 <flatcc_builder_start_buffer>
    2b54:	cmp	r0, r5
    2b58:	bne	2b68 <gen_monster+0x74>
    2b5c:	mov	r1, #36	; 0x24
    2b60:	mov	r0, r4
    2b64:	bl	0 <flatcc_builder_start_table>
    2b68:	mov	r3, #2
    2b6c:	mov	r2, r3
    2b70:	mov	r1, r3
    2b74:	mov	r0, r4
    2b78:	bl	0 <flatcc_builder_table_add>
    2b7c:	mov	r2, #32
    2b80:	mov	r1, #0
    2b84:	cmp	r0, #0
    2b88:	movne	r3, #80	; 0x50
    2b8c:	strhne	r3, [r0]
    2b90:	mov	r3, #16
    2b94:	mov	r0, r4
    2b98:	bl	0 <flatcc_builder_table_add>
    2b9c:	ldr	r3, [pc, #2240]	; 3464 <gen_monster+0x970>
    2ba0:	mov	ip, #1065353216	; 0x3f800000
    2ba4:	mov	r2, #1073741824	; 0x40000000
    2ba8:	ldr	r1, [pc, #2232]	; 3468 <gen_monster+0x974>
    2bac:	str	ip, [r0]
    2bb0:	str	r2, [r0, #4]
    2bb4:	str	r3, [r0, #8]
    2bb8:	mov	r0, r4
    2bbc:	bl	0 <flatcc_builder_create_string_str>
    2bc0:	subs	r5, r0, #0
    2bc4:	beq	2bdc <gen_monster+0xe8>
    2bc8:	mov	r1, #3
    2bcc:	mov	r0, r4
    2bd0:	bl	0 <flatcc_builder_table_add_offset>
    2bd4:	cmp	r0, #0
    2bd8:	strne	r5, [r0]
    2bdc:	mov	r3, #1
    2be0:	mov	r2, r3
    2be4:	mov	r1, #6
    2be8:	mov	r0, r4
    2bec:	bl	0 <flatcc_builder_table_add>
    2bf0:	mvn	r2, #0
    2bf4:	add	r1, sp, #24
    2bf8:	cmp	r0, #0
    2bfc:	movne	r3, #2
    2c00:	strbne	r3, [r0]
    2c04:	mov	r3, #1
    2c08:	str	r2, [sp, #4]
    2c0c:	str	r3, [sp]
    2c10:	mov	r2, #10
    2c14:	mov	r0, r4
    2c18:	bl	0 <flatcc_builder_create_vector>
    2c1c:	subs	r5, r0, #0
    2c20:	beq	2c38 <gen_monster+0x144>
    2c24:	mov	r1, #5
    2c28:	mov	r0, r4
    2c2c:	bl	0 <flatcc_builder_table_add_offset>
    2c30:	cmp	r0, #0
    2c34:	strne	r5, [r0]
    2c38:	mvn	r3, #-1073741824	; 0xc0000000
    2c3c:	mov	r2, #2
    2c40:	mov	r1, #4
    2c44:	mov	r0, r4
    2c48:	bl	0 <flatcc_builder_start_vector>
    2c4c:	mov	r1, #1
    2c50:	mov	r0, r4
    2c54:	bl	0 <flatcc_builder_extend_vector>
    2c58:	mov	r2, #16
    2c5c:	mov	r3, #32
    2c60:	mov	r1, #2
    2c64:	strh	r2, [r0]
    2c68:	strb	r3, [r0, #2]
    2c6c:	mov	r0, r4
    2c70:	bl	0 <flatcc_builder_extend_vector>
    2c74:	mov	ip, #48	; 0x30
    2c78:	mov	r2, #80	; 0x50
    2c7c:	mov	r3, #96	; 0x60
    2c80:	mov	r1, #64	; 0x40
    2c84:	strh	ip, [r0]
    2c88:	strh	r2, [r0, #4]
    2c8c:	strb	r3, [r0, #6]
    2c90:	strb	r1, [r0, #2]
    2c94:	mov	r1, #1
    2c98:	mov	r0, r4
    2c9c:	bl	0 <flatcc_builder_extend_vector>
    2ca0:	mov	r1, #1
    2ca4:	cmp	r0, #0
    2ca8:	movne	r2, #112	; 0x70
    2cac:	mvnne	r3, #127	; 0x7f
    2cb0:	strhne	r2, [r0]
    2cb4:	strbne	r3, [r0, #2]
    2cb8:	mov	r2, #400	; 0x190
    2cbc:	mvn	r3, #110	; 0x6e
    2cc0:	mov	r0, r4
    2cc4:	strb	r3, [sp, #10]
    2cc8:	strh	r2, [sp, #8]
    2ccc:	bl	0 <flatcc_builder_extend_vector>
    2cd0:	mov	r1, #1
    2cd4:	cmp	r0, #0
    2cd8:	ldrne	r3, [sp, #8]
    2cdc:	strne	r3, [r0]
    2ce0:	mov	r0, r4
    2ce4:	bl	0 <flatcc_builder_extend_vector>
    2ce8:	mov	r1, #1
    2cec:	cmp	r0, #0
    2cf0:	ldrne	r3, [sp, #8]
    2cf4:	strne	r3, [r0]
    2cf8:	mov	r0, r4
    2cfc:	bl	0 <flatcc_builder_extend_vector>
    2d00:	cmp	r0, #0
    2d04:	ldrne	r3, [sp, #8]
    2d08:	strne	r3, [r0]
    2d0c:	mov	r0, r4
    2d10:	bl	0 <flatcc_builder_vector_count>
    2d14:	cmp	r0, #7
    2d18:	bne	3418 <gen_monster+0x924>
    2d1c:	mov	r1, #2
    2d20:	mov	r0, r4
    2d24:	bl	0 <flatcc_builder_truncate_vector>
    2d28:	mov	r0, r4
    2d2c:	bl	0 <flatcc_builder_vector_count>
    2d30:	cmp	r0, #5
    2d34:	bne	3430 <gen_monster+0x93c>
    2d38:	mov	r0, r4
    2d3c:	bl	0 <flatcc_builder_vector_edit>
    2d40:	mov	r2, r0
    2d44:	mov	r0, r4
    2d48:	ldrh	r3, [r2, #16]
    2d4c:	add	r3, r3, #1
    2d50:	strh	r3, [r2, #16]
    2d54:	bl	0 <flatcc_builder_end_vector>
    2d58:	subs	r5, r0, #0
    2d5c:	beq	2d74 <gen_monster+0x280>
    2d60:	mov	r1, #9
    2d64:	mov	r0, r4
    2d68:	bl	0 <flatcc_builder_table_add_offset>
    2d6c:	cmp	r0, #0
    2d70:	strne	r5, [r0]
    2d74:	mov	r1, #36	; 0x24
    2d78:	mov	r0, r4
    2d7c:	bl	0 <flatcc_builder_start_table>
    2d80:	mov	r2, #7
    2d84:	ldr	r1, [pc, #1760]	; 346c <gen_monster+0x978>
    2d88:	mov	r0, r4
    2d8c:	bl	0 <flatcc_builder_create_string>
    2d90:	subs	r5, r0, #0
    2d94:	bne	3384 <gen_monster+0x890>
    2d98:	ldr	r6, [pc, #1744]	; 3470 <gen_monster+0x97c>
    2d9c:	mov	r2, #1
    2da0:	add	r1, r6, #12
    2da4:	mov	r0, r4
    2da8:	bl	0 <flatcc_builder_check_required>
    2dac:	cmp	r0, #0
    2db0:	beq	33ec <gen_monster+0x8f8>
    2db4:	mov	r0, r4
    2db8:	bl	0 <flatcc_builder_end_table>
    2dbc:	mov	r5, r0
    2dc0:	mov	r0, r4
    2dc4:	bl	0 <flatcc_builder_start_offset_vector>
    2dc8:	mov	r1, #2
    2dcc:	mov	r0, r4
    2dd0:	bl	0 <flatcc_builder_extend_offset_vector>
    2dd4:	mov	r1, #36	; 0x24
    2dd8:	str	r5, [r0]
    2ddc:	str	r5, [r0, #4]
    2de0:	mov	r0, r4
    2de4:	bl	0 <flatcc_builder_start_table>
    2de8:	mov	r2, #30
    2dec:	ldr	r1, [pc, #1664]	; 3474 <gen_monster+0x980>
    2df0:	mov	r0, r4
    2df4:	bl	0 <flatcc_builder_create_string_strn>
    2df8:	subs	r7, r0, #0
    2dfc:	beq	2e14 <gen_monster+0x320>
    2e00:	mov	r1, #3
    2e04:	mov	r0, r4
    2e08:	bl	0 <flatcc_builder_table_add_offset>
    2e0c:	cmp	r0, #0
    2e10:	strne	r7, [r0]
    2e14:	mov	r2, #1
    2e18:	add	r1, r6, #12
    2e1c:	mov	r0, r4
    2e20:	bl	0 <flatcc_builder_check_required>
    2e24:	cmp	r0, #0
    2e28:	beq	33ec <gen_monster+0x8f8>
    2e2c:	mov	r0, r4
    2e30:	bl	0 <flatcc_builder_end_table>
    2e34:	subs	r1, r0, #0
    2e38:	beq	335c <gen_monster+0x868>
    2e3c:	mov	r0, r4
    2e40:	bl	0 <flatcc_builder_offset_vector_push>
    2e44:	mov	r1, #3
    2e48:	ldr	r7, [r0]
    2e4c:	mov	r0, r4
    2e50:	bl	0 <flatcc_builder_extend_offset_vector>
    2e54:	mov	r1, #1
    2e58:	stm	r0, {r5, r7}
    2e5c:	mov	r0, r4
    2e60:	bl	0 <flatcc_builder_truncate_offset_vector>
    2e64:	mov	r0, r4
    2e68:	bl	0 <flatcc_builder_offset_vector_count>
    2e6c:	cmp	r0, #5
    2e70:	bne	33f0 <gen_monster+0x8fc>
    2e74:	mov	r1, #36	; 0x24
    2e78:	mov	r0, r4
    2e7c:	bl	0 <flatcc_builder_start_table>
    2e80:	mov	r2, #8
    2e84:	ldr	r1, [pc, #1516]	; 3478 <gen_monster+0x984>
    2e88:	mov	r0, r4
    2e8c:	bl	0 <flatcc_builder_create_string_strn>
    2e90:	subs	r7, r0, #0
    2e94:	beq	2eac <gen_monster+0x3b8>
    2e98:	mov	r1, #3
    2e9c:	mov	r0, r4
    2ea0:	bl	0 <flatcc_builder_table_add_offset>
    2ea4:	cmp	r0, #0
    2ea8:	strne	r7, [r0]
    2eac:	mov	r2, #1
    2eb0:	add	r1, r6, #12
    2eb4:	mov	r0, r4
    2eb8:	bl	0 <flatcc_builder_check_required>
    2ebc:	cmp	r0, #0
    2ec0:	beq	33ec <gen_monster+0x8f8>
    2ec4:	mov	r0, r4
    2ec8:	bl	0 <flatcc_builder_end_table>
    2ecc:	subs	r1, r0, #0
    2ed0:	beq	335c <gen_monster+0x868>
    2ed4:	mov	r0, r4
    2ed8:	bl	0 <flatcc_builder_offset_vector_push>
    2edc:	ldr	r3, [r0]
    2ee0:	mov	r0, r4
    2ee4:	str	r3, [sp, #16]
    2ee8:	bl	0 <flatcc_builder_offset_vector_count>
    2eec:	cmp	r0, #6
    2ef0:	bne	3404 <gen_monster+0x910>
    2ef4:	mov	r0, r4
    2ef8:	bl	0 <flatcc_builder_offset_vector_edit>
    2efc:	mov	r2, #2
    2f00:	ldr	r3, [r0, #20]
    2f04:	ldr	r1, [r0, #8]
    2f08:	str	r5, [r0, #20]
    2f0c:	str	r1, [sp, #20]
    2f10:	str	r3, [r0]
    2f14:	add	r1, sp, #16
    2f18:	mov	r0, r4
    2f1c:	bl	0 <flatcc_builder_append_offset_vector>
    2f20:	mov	r0, r4
    2f24:	bl	0 <flatcc_builder_end_offset_vector>
    2f28:	subs	r7, r0, #0
    2f2c:	beq	2f44 <gen_monster+0x450>
    2f30:	mov	r1, #11
    2f34:	mov	r0, r4
    2f38:	bl	0 <flatcc_builder_table_add_offset>
    2f3c:	cmp	r0, #0
    2f40:	strne	r7, [r0]
    2f44:	ldr	r1, [pc, #1328]	; 347c <gen_monster+0x988>
    2f48:	mov	r0, r4
    2f4c:	bl	0 <flatcc_builder_create_string_str>
    2f50:	mov	r2, #2
    2f54:	ldr	r1, [pc, #1316]	; 3480 <gen_monster+0x98c>
    2f58:	str	r0, [sp, #36]	; 0x24
    2f5c:	mov	r0, r4
    2f60:	bl	0 <flatcc_builder_create_string>
    2f64:	ldr	r1, [pc, #1304]	; 3484 <gen_monster+0x990>
    2f68:	str	r0, [sp, #40]	; 0x28
    2f6c:	mov	r0, r4
    2f70:	bl	0 <flatcc_builder_create_string_str>
    2f74:	mov	r2, #3
    2f78:	add	r1, sp, #36	; 0x24
    2f7c:	str	r0, [sp, #44]	; 0x2c
    2f80:	mov	r0, r4
    2f84:	bl	0 <flatcc_builder_create_offset_vector>
    2f88:	subs	r7, r0, #0
    2f8c:	beq	2fa4 <gen_monster+0x4b0>
    2f90:	mov	r1, #10
    2f94:	mov	r0, r4
    2f98:	bl	0 <flatcc_builder_table_add_offset>
    2f9c:	cmp	r0, #0
    2fa0:	strne	r7, [r0]
    2fa4:	mov	r2, #1
    2fa8:	mvn	r3, #0
    2fac:	mov	r1, r2
    2fb0:	mov	r0, r4
    2fb4:	bl	0 <flatcc_builder_start_vector>
    2fb8:	mov	r2, #1
    2fbc:	add	r1, sp, #12
    2fc0:	mov	r0, r4
    2fc4:	bl	0 <flatcc_builder_append_vector>
    2fc8:	mov	r2, #3
    2fcc:	add	r1, sp, #13
    2fd0:	mov	r0, r4
    2fd4:	bl	0 <flatcc_builder_append_vector>
    2fd8:	mov	r0, r4
    2fdc:	bl	0 <flatcc_builder_end_vector>
    2fe0:	subs	r7, r0, #0
    2fe4:	beq	2ffc <gen_monster+0x508>
    2fe8:	mov	r1, #24
    2fec:	mov	r0, r4
    2ff0:	bl	0 <flatcc_builder_table_add_offset>
    2ff4:	cmp	r0, #0
    2ff8:	strne	r7, [r0]
    2ffc:	cmp	r5, #0
    3000:	beq	339c <gen_monster+0x8a8>
    3004:	mov	r3, #1
    3008:	mov	r2, r3
    300c:	mov	r1, #7
    3010:	mov	r0, r4
    3014:	bl	0 <flatcc_builder_table_add>
    3018:	subs	r7, r0, #0
    301c:	beq	303c <gen_monster+0x548>
    3020:	mov	r1, #8
    3024:	mov	r0, r4
    3028:	bl	0 <flatcc_builder_table_add_offset>
    302c:	cmp	r0, #0
    3030:	movne	r3, #1
    3034:	strbne	r3, [r7]
    3038:	strne	r5, [r0]
    303c:	mov	r1, #36	; 0x24
    3040:	mov	r0, r4
    3044:	bl	0 <flatcc_builder_start_table>
    3048:	ldr	r1, [pc, #1080]	; 3488 <gen_monster+0x994>
    304c:	mov	r0, r4
    3050:	bl	0 <flatcc_builder_create_string_str>
    3054:	subs	r7, r0, #0
    3058:	beq	33d4 <gen_monster+0x8e0>
    305c:	mov	r1, #3
    3060:	mov	r0, r4
    3064:	bl	0 <flatcc_builder_table_add_offset>
    3068:	cmp	r0, #0
    306c:	beq	33d4 <gen_monster+0x8e0>
    3070:	str	r7, [r0]
    3074:	mov	r0, r4
    3078:	bl	0 <flatcc_builder_start_offset_vector>
    307c:	mov	r1, #36	; 0x24
    3080:	mov	r0, r4
    3084:	bl	0 <flatcc_builder_start_table>
    3088:	cmp	r5, #0
    308c:	beq	30c8 <gen_monster+0x5d4>
    3090:	mov	r3, #1
    3094:	mov	r2, r3
    3098:	mov	r1, #7
    309c:	mov	r0, r4
    30a0:	bl	0 <flatcc_builder_table_add>
    30a4:	subs	r7, r0, #0
    30a8:	beq	30c8 <gen_monster+0x5d4>
    30ac:	mov	r1, #8
    30b0:	mov	r0, r4
    30b4:	bl	0 <flatcc_builder_table_add_offset>
    30b8:	cmp	r0, #0
    30bc:	movne	r3, #1
    30c0:	strbne	r3, [r7]
    30c4:	strne	r5, [r0]
    30c8:	ldr	r1, [pc, #956]	; 348c <gen_monster+0x998>
    30cc:	mov	r0, r4
    30d0:	bl	0 <flatcc_builder_create_string_str>
    30d4:	subs	r7, r0, #0
    30d8:	beq	30f0 <gen_monster+0x5fc>
    30dc:	mov	r1, #3
    30e0:	mov	r0, r4
    30e4:	bl	0 <flatcc_builder_table_add_offset>
    30e8:	cmp	r0, #0
    30ec:	strne	r7, [r0]
    30f0:	mov	r2, #1
    30f4:	add	r1, r6, #12
    30f8:	mov	r0, r4
    30fc:	bl	0 <flatcc_builder_check_required>
    3100:	cmp	r0, #0
    3104:	beq	33ec <gen_monster+0x8f8>
    3108:	mov	r0, r4
    310c:	bl	0 <flatcc_builder_end_table>
    3110:	subs	r1, r0, #0
    3114:	beq	3120 <gen_monster+0x62c>
    3118:	mov	r0, r4
    311c:	bl	0 <flatcc_builder_offset_vector_push>
    3120:	mov	r1, #36	; 0x24
    3124:	mov	r0, r4
    3128:	bl	0 <flatcc_builder_start_table>
    312c:	cmp	r5, #0
    3130:	beq	316c <gen_monster+0x678>
    3134:	mov	r3, #1
    3138:	mov	r2, r3
    313c:	mov	r1, #7
    3140:	mov	r0, r4
    3144:	bl	0 <flatcc_builder_table_add>
    3148:	subs	r7, r0, #0
    314c:	beq	316c <gen_monster+0x678>
    3150:	mov	r1, #8
    3154:	mov	r0, r4
    3158:	bl	0 <flatcc_builder_table_add_offset>
    315c:	cmp	r0, #0
    3160:	movne	r3, #1
    3164:	strbne	r3, [r7]
    3168:	strne	r5, [r0]
    316c:	ldr	r1, [pc, #792]	; 348c <gen_monster+0x998>
    3170:	mov	r0, r4
    3174:	bl	0 <flatcc_builder_create_string_str>
    3178:	subs	r7, r0, #0
    317c:	beq	3194 <gen_monster+0x6a0>
    3180:	mov	r1, #3
    3184:	mov	r0, r4
    3188:	bl	0 <flatcc_builder_table_add_offset>
    318c:	cmp	r0, #0
    3190:	strne	r7, [r0]
    3194:	mov	r2, #1
    3198:	add	r1, r6, #12
    319c:	mov	r0, r4
    31a0:	bl	0 <flatcc_builder_check_required>
    31a4:	cmp	r0, #0
    31a8:	beq	33ec <gen_monster+0x8f8>
    31ac:	mov	r0, r4
    31b0:	bl	0 <flatcc_builder_end_table>
    31b4:	subs	r1, r0, #0
    31b8:	beq	31c4 <gen_monster+0x6d0>
    31bc:	mov	r0, r4
    31c0:	bl	0 <flatcc_builder_offset_vector_push>
    31c4:	mov	r1, #36	; 0x24
    31c8:	mov	r0, r4
    31cc:	bl	0 <flatcc_builder_start_table>
    31d0:	mov	r1, #8
    31d4:	mov	r0, r4
    31d8:	bl	0 <flatcc_builder_table_add_offset>
    31dc:	ldr	r1, [pc, #680]	; 348c <gen_monster+0x998>
    31e0:	cmp	r0, #0
    31e4:	strne	r5, [r0]
    31e8:	mov	r0, r4
    31ec:	bl	0 <flatcc_builder_create_string_str>
    31f0:	subs	r5, r0, #0
    31f4:	beq	320c <gen_monster+0x718>
    31f8:	mov	r1, #3
    31fc:	mov	r0, r4
    3200:	bl	0 <flatcc_builder_table_add_offset>
    3204:	cmp	r0, #0
    3208:	strne	r5, [r0]
    320c:	mov	r3, #1
    3210:	mov	r2, r3
    3214:	mov	r1, #7
    3218:	mov	r0, r4
    321c:	bl	0 <flatcc_builder_table_add>
    3220:	mov	r2, #1
    3224:	add	r1, r6, #12
    3228:	cmp	r0, #0
    322c:	movne	r3, #1
    3230:	strbne	r3, [r0]
    3234:	mov	r0, r4
    3238:	bl	0 <flatcc_builder_check_required>
    323c:	cmp	r0, #0
    3240:	beq	33ec <gen_monster+0x8f8>
    3244:	mov	r0, r4
    3248:	bl	0 <flatcc_builder_end_table>
    324c:	subs	r1, r0, #0
    3250:	beq	325c <gen_monster+0x768>
    3254:	mov	r0, r4
    3258:	bl	0 <flatcc_builder_offset_vector_push>
    325c:	mov	r0, r4
    3260:	bl	0 <flatcc_builder_end_offset_vector>
    3264:	subs	r5, r0, #0
    3268:	beq	3280 <gen_monster+0x78c>
    326c:	mov	r1, #11
    3270:	mov	r0, r4
    3274:	bl	0 <flatcc_builder_table_add_offset>
    3278:	cmp	r0, #0
    327c:	strne	r5, [r0]
    3280:	mov	r2, #1
    3284:	add	r1, r6, #12
    3288:	mov	r0, r4
    328c:	bl	0 <flatcc_builder_check_required>
    3290:	cmp	r0, #0
    3294:	beq	33ec <gen_monster+0x8f8>
    3298:	mov	r0, r4
    329c:	bl	0 <flatcc_builder_end_table>
    32a0:	subs	r5, r0, #0
    32a4:	beq	32bc <gen_monster+0x7c8>
    32a8:	mov	r1, #12
    32ac:	mov	r0, r4
    32b0:	bl	0 <flatcc_builder_table_add_offset>
    32b4:	cmp	r0, #0
    32b8:	strne	r5, [r0]
    32bc:	mov	r3, #1
    32c0:	mov	r2, r3
    32c4:	mov	r1, #15
    32c8:	mov	r0, r4
    32cc:	bl	0 <flatcc_builder_table_add>
    32d0:	mov	r1, #3
    32d4:	cmp	r0, #0
    32d8:	movne	r3, #0
    32dc:	strbne	r3, [r0]
    32e0:	mov	r0, r4
    32e4:	bl	0 <flatcc_builder_start_table>
    32e8:	mov	r2, #0
    32ec:	ldr	r1, [pc, #412]	; 3490 <gen_monster+0x99c>
    32f0:	mov	r0, r4
    32f4:	bl	0 <flatcc_builder_check_required>
    32f8:	cmp	r0, #0
    32fc:	beq	342c <gen_monster+0x938>
    3300:	mov	r0, r4
    3304:	bl	0 <flatcc_builder_end_table>
    3308:	subs	r5, r0, #0
    330c:	beq	3324 <gen_monster+0x830>
    3310:	mov	r1, #14
    3314:	mov	r0, r4
    3318:	bl	0 <flatcc_builder_table_add_offset>
    331c:	cmp	r0, #0
    3320:	strne	r5, [r0]
    3324:	add	r1, r6, #12
    3328:	mov	r2, #1
    332c:	mov	r0, r4
    3330:	bl	0 <flatcc_builder_check_required>
    3334:	cmp	r0, #0
    3338:	beq	33ec <gen_monster+0x8f8>
    333c:	mov	r0, r4
    3340:	bl	0 <flatcc_builder_end_table>
    3344:	mov	r1, r0
    3348:	mov	r0, r4
    334c:	bl	0 <flatcc_builder_end_buffer>
    3350:	mov	r0, #0
    3354:	add	sp, sp, #52	; 0x34
    3358:	pop	{r4, r5, r6, r7, pc}
    335c:	ldr	r3, [r1]
    3360:	udf	#0
    3364:	mov	r3, r6
    3368:	mov	r2, r6
    336c:	ldr	r1, [pc, #236]	; 3460 <gen_monster+0x96c>
    3370:	mov	r0, r4
    3374:	bl	0 <flatcc_builder_start_buffer>
    3378:	cmp	r0, #0
    337c:	beq	2b5c <gen_monster+0x68>
    3380:	b	2b68 <gen_monster+0x74>
    3384:	mov	r1, #3
    3388:	mov	r0, r4
    338c:	bl	0 <flatcc_builder_table_add_offset>
    3390:	cmp	r0, #0
    3394:	strne	r5, [r0]
    3398:	b	2d98 <gen_monster+0x2a4>
    339c:	mov	r1, #36	; 0x24
    33a0:	mov	r0, r4
    33a4:	bl	0 <flatcc_builder_start_table>
    33a8:	ldr	r1, [pc, #216]	; 3488 <gen_monster+0x994>
    33ac:	mov	r0, r4
    33b0:	bl	0 <flatcc_builder_create_string_str>
    33b4:	subs	r7, r0, #0
    33b8:	bne	3444 <gen_monster+0x950>
    33bc:	mov	r0, r4
    33c0:	bl	0 <flatcc_builder_start_offset_vector>
    33c4:	mov	r1, #36	; 0x24
    33c8:	mov	r0, r4
    33cc:	bl	0 <flatcc_builder_start_table>
    33d0:	b	30c8 <gen_monster+0x5d4>
    33d4:	mov	r0, r4
    33d8:	bl	0 <flatcc_builder_start_offset_vector>
    33dc:	mov	r1, #36	; 0x24
    33e0:	mov	r0, r4
    33e4:	bl	0 <flatcc_builder_start_table>
    33e8:	b	3090 <gen_monster+0x59c>
    33ec:	bl	540 <MyGame_Example_TestJSONPrefixParsing_verify_table+0x1c>
    33f0:	ldr	r3, [pc, #156]	; 3494 <gen_monster+0x9a0>
    33f4:	ldr	r2, [pc, #156]	; 3498 <gen_monster+0x9a4>
    33f8:	ldr	r1, [pc, #156]	; 349c <gen_monster+0x9a8>
    33fc:	ldr	r0, [pc, #156]	; 34a0 <gen_monster+0x9ac>
    3400:	bl	0 <__assert_fail>
    3404:	ldr	r3, [pc, #136]	; 3494 <gen_monster+0x9a0>
    3408:	ldr	r2, [pc, #148]	; 34a4 <gen_monster+0x9b0>
    340c:	ldr	r1, [pc, #136]	; 349c <gen_monster+0x9a8>
    3410:	ldr	r0, [pc, #144]	; 34a8 <gen_monster+0x9b4>
    3414:	bl	0 <__assert_fail>
    3418:	ldr	r3, [pc, #116]	; 3494 <gen_monster+0x9a0>
    341c:	ldr	r2, [pc, #136]	; 34ac <gen_monster+0x9b8>
    3420:	ldr	r1, [pc, #116]	; 349c <gen_monster+0x9a8>
    3424:	ldr	r0, [pc, #132]	; 34b0 <gen_monster+0x9bc>
    3428:	bl	0 <__assert_fail>
    342c:	bl	564 <MyGame_Example_TestJSONPrefixParsing_verify_table+0x40>
    3430:	ldr	r3, [pc, #92]	; 3494 <gen_monster+0x9a0>
    3434:	ldr	r2, [pc, #120]	; 34b4 <gen_monster+0x9c0>
    3438:	ldr	r1, [pc, #92]	; 349c <gen_monster+0x9a8>
    343c:	ldr	r0, [pc, #116]	; 34b8 <gen_monster+0x9c4>
    3440:	bl	0 <__assert_fail>
    3444:	mov	r1, #3
    3448:	mov	r0, r4
    344c:	bl	0 <flatcc_builder_table_add_offset>
    3450:	cmp	r0, #0
    3454:	bne	3070 <gen_monster+0x57c>
    3458:	b	33bc <gen_monster+0x8c8>
    345c:	.word	0x000004c4
    3460:	.word	0x0000054c
    3464:	.word	0xc04ccccd
    3468:	.word	0x00000674
    346c:	.word	0x00000cf0
    3470:	.word	0x00000430
    3474:	.word	0x00000d48
    3478:	.word	0x00001190
    347c:	.word	0x00000e6c
    3480:	.word	0x0000049c
    3484:	.word	0x00000ec8
    3488:	.word	0x00000f90
    348c:	.word	0x000011e0
    3490:	.word	0x000004dc
    3494:	.word	0x000004d0
    3498:	.word	0x0000039b
    349c:	.word	0x00000c90
    34a0:	.word	0x0000115c
    34a4:	.word	0x000003a1
    34a8:	.word	0x000011ac
    34ac:	.word	0x00000371
    34b0:	.word	0x0000110c
    34b4:	.word	0x00000373
    34b8:	.word	0x00001134

000034bc <test_monster>:
    34bc:	push	{r4, r5, lr}
    34c0:	mov	r1, #0
    34c4:	sub	sp, sp, #12
    34c8:	mov	r4, r0
    34cc:	bl	2af4 <gen_monster>
    34d0:	mov	r0, r4
    34d4:	add	r1, sp, #4
    34d8:	bl	0 <flatcc_builder_finalize_aligned_buffer>
    34dc:	ldr	r3, [pc, #104]	; 354c <test_monster+0x90>
    34e0:	ldr	r2, [sp, #4]
    34e4:	ldr	r3, [r3]
    34e8:	mov	r1, r0
    34ec:	mov	r4, r0
    34f0:	ldr	r0, [pc, #88]	; 3550 <test_monster+0x94>
    34f4:	bl	20 <hexdump>
    34f8:	mov	r0, r4
    34fc:	ldr	r3, [pc, #80]	; 3554 <test_monster+0x98>
    3500:	ldr	r2, [pc, #80]	; 3558 <test_monster+0x9c>
    3504:	ldr	r1, [sp, #4]
    3508:	bl	0 <flatcc_verify_table_as_root>
    350c:	cmp	r0, #0
    3510:	bne	3534 <test_monster+0x78>
    3514:	mov	r0, r4
    3518:	bl	1f9c <verify_monster>
    351c:	mov	r5, r0
    3520:	mov	r0, r4
    3524:	bl	0 <flatcc_builder_aligned_free>
    3528:	mov	r0, r5
    352c:	add	sp, sp, #12
    3530:	pop	{r4, r5, pc}
    3534:	bl	0 <flatcc_verify_error_string>
    3538:	mvn	r5, #0
    353c:	mov	r1, r0
    3540:	ldr	r0, [pc, #20]	; 355c <test_monster+0xa0>
    3544:	bl	0 <printf>
    3548:	b	3528 <test_monster+0x6c>
    354c:	.word	0x00000000
    3550:	.word	0x000011ec
    3554:	.word	0x00000000
    3558:	.word	0x0000054c
    355c:	.word	0x000011fc

00003560 <test_monster_with_size>:
    3560:	push	{r4, r5, lr}
    3564:	mov	r1, #1
    3568:	sub	sp, sp, #12
    356c:	mov	r4, r0
    3570:	bl	2af4 <gen_monster>
    3574:	mov	r0, r4
    3578:	add	r1, sp, #4
    357c:	bl	0 <flatcc_builder_finalize_aligned_buffer>
    3580:	ldr	r3, [pc, #184]	; 3640 <test_monster_with_size+0xe0>
    3584:	ldr	r2, [sp, #4]
    3588:	ldr	r3, [r3]
    358c:	mov	r4, r0
    3590:	mov	r1, r0
    3594:	ldr	r0, [pc, #168]	; 3644 <test_monster_with_size+0xe4>
    3598:	bl	20 <hexdump>
    359c:	tst	r4, #15
    35a0:	bne	3624 <test_monster_with_size+0xc4>
    35a4:	mov	r5, r4
    35a8:	ldr	r2, [sp, #4]
    35ac:	ldr	r3, [r5], #4
    35b0:	sub	r1, r2, #4
    35b4:	cmp	r1, r3
    35b8:	bne	35f4 <test_monster_with_size+0x94>
    35bc:	ldr	r3, [pc, #132]	; 3648 <test_monster_with_size+0xe8>
    35c0:	ldr	r2, [pc, #132]	; 364c <test_monster_with_size+0xec>
    35c4:	mov	r0, r5
    35c8:	bl	0 <flatcc_verify_table_as_root>
    35cc:	cmp	r0, #0
    35d0:	bne	360c <test_monster_with_size+0xac>
    35d4:	mov	r0, r5
    35d8:	bl	1f9c <verify_monster>
    35dc:	mov	r5, r0
    35e0:	mov	r0, r4
    35e4:	bl	0 <flatcc_builder_aligned_free>
    35e8:	mov	r0, r5
    35ec:	add	sp, sp, #12
    35f0:	pop	{r4, r5, pc}
    35f4:	mov	r2, r1
    35f8:	ldr	r0, [pc, #80]	; 3650 <test_monster_with_size+0xf0>
    35fc:	mov	r1, r3
    3600:	bl	0 <printf>
    3604:	mvn	r5, #0
    3608:	b	35e8 <test_monster_with_size+0x88>
    360c:	bl	0 <flatcc_verify_error_string>
    3610:	mvn	r5, #0
    3614:	mov	r1, r0
    3618:	ldr	r0, [pc, #52]	; 3654 <test_monster_with_size+0xf4>
    361c:	bl	0 <printf>
    3620:	b	35e8 <test_monster_with_size+0x88>
    3624:	ldr	r0, [pc, #44]	; 3658 <test_monster_with_size+0xf8>
    3628:	bl	0 <printf>
    362c:	mov	r1, r4
    3630:	ldr	r0, [pc, #36]	; 365c <test_monster_with_size+0xfc>
    3634:	bl	0 <printf>
    3638:	mvn	r5, #0
    363c:	b	35e8 <test_monster_with_size+0x88>
    3640:	.word	0x00000000
    3644:	.word	0x00001228
    3648:	.word	0x00000000
    364c:	.word	0x0000054c
    3650:	.word	0x000012a8
    3654:	.word	0x000012e0
    3658:	.word	0x00001240
    365c:	.word	0x00001294

00003660 <test_string>:
    3660:	push	{r4, r5, r6, lr}
    3664:	mov	r4, r0
    3668:	bl	0 <flatcc_builder_reset>
    366c:	mov	r3, #0
    3670:	mov	r0, r4
    3674:	mov	r2, r3
    3678:	ldr	r1, [pc, #536]	; 3898 <test_string+0x238>
    367c:	bl	0 <flatcc_builder_start_buffer>
    3680:	cmp	r0, #0
    3684:	bne	3694 <test_string+0x34>
    3688:	mov	r1, #36	; 0x24
    368c:	mov	r0, r4
    3690:	bl	0 <flatcc_builder_start_table>
    3694:	mov	r0, r4
    3698:	bl	0 <flatcc_builder_start_string>
    369c:	mov	r1, #3
    36a0:	mov	r0, r4
    36a4:	bl	0 <flatcc_builder_extend_string>
    36a8:	mov	r2, #50	; 0x32
    36ac:	mov	r3, #51	; 0x33
    36b0:	mov	r1, #49	; 0x31
    36b4:	strb	r1, [r0]
    36b8:	strb	r2, [r0, #1]
    36bc:	strb	r3, [r0, #2]
    36c0:	ldr	r1, [pc, #468]	; 389c <test_string+0x23c>
    36c4:	mov	r0, r4
    36c8:	bl	0 <flatcc_builder_append_string_str>
    36cc:	mov	r0, r4
    36d0:	bl	0 <flatcc_builder_string_len>
    36d4:	cmp	r0, #4
    36d8:	bne	3884 <test_string+0x224>
    36dc:	mov	r2, #30
    36e0:	ldr	r1, [pc, #440]	; 38a0 <test_string+0x240>
    36e4:	mov	r0, r4
    36e8:	bl	0 <flatcc_builder_append_string_strn>
    36ec:	mov	r0, r4
    36f0:	bl	0 <flatcc_builder_string_len>
    36f4:	cmp	r0, #8
    36f8:	bne	3870 <test_string+0x210>
    36fc:	mov	r2, #2
    3700:	ldr	r1, [pc, #412]	; 38a4 <test_string+0x244>
    3704:	mov	r0, r4
    3708:	bl	0 <flatcc_builder_append_string>
    370c:	mov	r0, r4
    3710:	bl	0 <flatcc_builder_string_len>
    3714:	cmp	r0, #10
    3718:	bne	385c <test_string+0x1fc>
    371c:	mov	r1, #3
    3720:	mov	r0, r4
    3724:	bl	0 <flatcc_builder_truncate_string>
    3728:	mov	r0, r4
    372c:	bl	0 <flatcc_builder_string_len>
    3730:	cmp	r0, #7
    3734:	bne	3848 <test_string+0x1e8>
    3738:	mov	r0, r4
    373c:	bl	0 <flatcc_builder_string_edit>
    3740:	mov	r3, #46	; 0x2e
    3744:	strb	r3, [r0, #4]
    3748:	mov	r0, r4
    374c:	bl	0 <flatcc_builder_end_string>
    3750:	subs	r5, r0, #0
    3754:	beq	376c <test_string+0x10c>
    3758:	mov	r1, #3
    375c:	mov	r0, r4
    3760:	bl	0 <flatcc_builder_table_add_offset>
    3764:	cmp	r0, #0
    3768:	strne	r5, [r0]
    376c:	mov	r2, #1
    3770:	ldr	r1, [pc, #304]	; 38a8 <test_string+0x248>
    3774:	mov	r0, r4
    3778:	bl	0 <flatcc_builder_check_required>
    377c:	cmp	r0, #0
    3780:	beq	3844 <test_string+0x1e4>
    3784:	mov	r0, r4
    3788:	bl	0 <flatcc_builder_end_table>
    378c:	mov	r1, r0
    3790:	mov	r0, r4
    3794:	bl	0 <flatcc_builder_end_buffer>
    3798:	mov	r0, r4
    379c:	mov	r1, #0
    37a0:	bl	0 <flatcc_builder_get_direct_buffer>
    37a4:	cmp	r0, #0
    37a8:	beq	3830 <test_string+0x1d0>
    37ac:	ldr	r3, [pc, #248]	; 38ac <test_string+0x24c>
    37b0:	ldr	r2, [r0, #4]
    37b4:	cmp	r2, r3
    37b8:	beq	37c0 <test_string+0x160>
    37bc:	bl	220 <flatbuffers_string_vec_at.part.20+0x1c>
    37c0:	ldr	r2, [r0]
    37c4:	adds	r3, r0, r2
    37c8:	beq	37bc <test_string+0x15c>
    37cc:	ldr	r2, [r0, r2]
    37d0:	sub	r2, r3, r2
    37d4:	ldrh	r1, [r2]
    37d8:	cmp	r1, #11
    37dc:	bhi	37f4 <test_string+0x194>
    37e0:	ldr	r3, [pc, #200]	; 38b0 <test_string+0x250>
    37e4:	ldr	r2, [pc, #200]	; 38b4 <test_string+0x254>
    37e8:	ldr	r1, [pc, #200]	; 38b8 <test_string+0x258>
    37ec:	ldr	r0, [pc, #200]	; 38bc <test_string+0x25c>
    37f0:	bl	0 <__assert_fail>
    37f4:	ldrh	r2, [r2, #10]
    37f8:	cmp	r2, #0
    37fc:	beq	37e0 <test_string+0x180>
    3800:	ldr	r0, [r3, r2]
    3804:	add	r3, r3, r2
    3808:	add	r0, r0, #4
    380c:	add	r0, r3, r0
    3810:	ldr	r1, [pc, #168]	; 38c0 <test_string+0x260>
    3814:	bl	0 <strcmp>
    3818:	cmp	r0, #0
    381c:	popeq	{r4, r5, r6, pc}
    3820:	ldr	r0, [pc, #156]	; 38c4 <test_string+0x264>
    3824:	bl	0 <puts>
    3828:	mvn	r0, #0
    382c:	pop	{r4, r5, r6, pc}
    3830:	ldr	r3, [pc, #144]	; 38c8 <test_string+0x268>
    3834:	ldr	r2, [pc, #144]	; 38cc <test_string+0x26c>
    3838:	ldr	r1, [pc, #144]	; 38d0 <test_string+0x270>
    383c:	ldr	r0, [pc, #144]	; 38d4 <test_string+0x274>
    3840:	bl	0 <__assert_fail>
    3844:	bl	540 <MyGame_Example_TestJSONPrefixParsing_verify_table+0x1c>
    3848:	ldr	r3, [pc, #120]	; 38c8 <test_string+0x268>
    384c:	ldr	r2, [pc, #132]	; 38d8 <test_string+0x278>
    3850:	ldr	r1, [pc, #120]	; 38d0 <test_string+0x270>
    3854:	ldr	r0, [pc, #128]	; 38dc <test_string+0x27c>
    3858:	bl	0 <__assert_fail>
    385c:	ldr	r3, [pc, #100]	; 38c8 <test_string+0x268>
    3860:	ldr	r2, [pc, #120]	; 38e0 <test_string+0x280>
    3864:	ldr	r1, [pc, #100]	; 38d0 <test_string+0x270>
    3868:	ldr	r0, [pc, #116]	; 38e4 <test_string+0x284>
    386c:	bl	0 <__assert_fail>
    3870:	ldr	r3, [pc, #80]	; 38c8 <test_string+0x268>
    3874:	ldr	r2, [pc, #108]	; 38e8 <test_string+0x288>
    3878:	ldr	r1, [pc, #80]	; 38d0 <test_string+0x270>
    387c:	ldr	r0, [pc, #104]	; 38ec <test_string+0x28c>
    3880:	bl	0 <__assert_fail>
    3884:	ldr	r3, [pc, #60]	; 38c8 <test_string+0x268>
    3888:	ldr	r2, [pc, #96]	; 38f0 <test_string+0x290>
    388c:	ldr	r1, [pc, #60]	; 38d0 <test_string+0x270>
    3890:	ldr	r0, [pc, #92]	; 38f4 <test_string+0x294>
    3894:	bl	0 <__assert_fail>
    3898:	.word	0x0000054c
    389c:	.word	0x0000131c
    38a0:	.word	0x00001348
    38a4:	.word	0x00001378
    38a8:	.word	0x0000043c
    38ac:	.word	0x534e4f4d
    38b0:	.word	0x00000244
    38b4:	.word	0x000002bb
    38b8:	.word	0x00000024
    38bc:	.word	0x00000164
    38c0:	.word	0x000013d4
    38c4:	.word	0x000013dc
    38c8:	.word	0x000004e0
    38cc:	.word	0x00000445
    38d0:	.word	0x00000c90
    38d4:	.word	0x000013cc
    38d8:	.word	0x0000043e
    38dc:	.word	0x000013a4
    38e0:	.word	0x0000043c
    38e4:	.word	0x0000137c
    38e8:	.word	0x0000043a
    38ec:	.word	0x00001350
    38f0:	.word	0x00000438
    38f4:	.word	0x00001320

000038f8 <test_sort_find>:
    38f8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    38fc:	sub	sp, sp, #44	; 0x2c
    3900:	mov	r4, r0
    3904:	bl	0 <flatcc_builder_reset>
    3908:	mov	r3, #0
    390c:	mov	r0, r4
    3910:	mov	r2, r3
    3914:	ldr	r1, [pc, #4012]	; 48c8 <test_sort_find+0xfd0>
    3918:	bl	0 <flatcc_builder_start_buffer>
    391c:	cmp	r0, #0
    3920:	bne	3930 <test_sort_find+0x38>
    3924:	mov	r1, #36	; 0x24
    3928:	mov	r0, r4
    392c:	bl	0 <flatcc_builder_start_table>
    3930:	ldr	r1, [pc, #3988]	; 48cc <test_sort_find+0xfd4>
    3934:	mov	r0, r4
    3938:	bl	0 <flatcc_builder_create_string_str>
    393c:	subs	r5, r0, #0
    3940:	beq	3958 <test_sort_find+0x60>
    3944:	mov	r1, #3
    3948:	mov	r0, r4
    394c:	bl	0 <flatcc_builder_table_add_offset>
    3950:	cmp	r0, #0
    3954:	strne	r5, [r0]
    3958:	mov	r0, r4
    395c:	bl	0 <flatcc_builder_start_offset_vector>
    3960:	mov	r1, #36	; 0x24
    3964:	mov	r0, r4
    3968:	bl	0 <flatcc_builder_start_table>
    396c:	ldr	r1, [pc, #4052]	; 4948 <test_sort_find+0x1050>
    3970:	mov	r0, r4
    3974:	bl	0 <flatcc_builder_create_string_str>
    3978:	subs	r5, r0, #0
    397c:	beq	3994 <test_sort_find+0x9c>
    3980:	mov	r1, #3
    3984:	mov	r0, r4
    3988:	bl	0 <flatcc_builder_table_add_offset>
    398c:	cmp	r0, #0
    3990:	strne	r5, [r0]
    3994:	ldr	r5, [pc, #3892]	; 48d0 <test_sort_find+0xfd8>
    3998:	mov	r2, #1
    399c:	add	r1, r5, #12
    39a0:	mov	r0, r4
    39a4:	bl	0 <flatcc_builder_check_required>
    39a8:	cmp	r0, #0
    39ac:	beq	5270 <test_sort_find+0x1978>
    39b0:	mov	r0, r4
    39b4:	bl	0 <flatcc_builder_end_table>
    39b8:	subs	r1, r0, #0
    39bc:	beq	39c8 <test_sort_find+0xd0>
    39c0:	mov	r0, r4
    39c4:	bl	0 <flatcc_builder_offset_vector_push>
    39c8:	mov	r1, #36	; 0x24
    39cc:	mov	r0, r4
    39d0:	bl	0 <flatcc_builder_start_table>
    39d4:	ldr	r1, [pc, #3832]	; 48d4 <test_sort_find+0xfdc>
    39d8:	mov	r0, r4
    39dc:	bl	0 <flatcc_builder_create_string_str>
    39e0:	subs	r6, r0, #0
    39e4:	beq	39fc <test_sort_find+0x104>
    39e8:	mov	r1, #3
    39ec:	mov	r0, r4
    39f0:	bl	0 <flatcc_builder_table_add_offset>
    39f4:	cmp	r0, #0
    39f8:	strne	r6, [r0]
    39fc:	mov	r2, #1
    3a00:	add	r1, r5, #12
    3a04:	mov	r0, r4
    3a08:	bl	0 <flatcc_builder_check_required>
    3a0c:	cmp	r0, #0
    3a10:	beq	5270 <test_sort_find+0x1978>
    3a14:	mov	r0, r4
    3a18:	bl	0 <flatcc_builder_end_table>
    3a1c:	subs	r1, r0, #0
    3a20:	beq	3a2c <test_sort_find+0x134>
    3a24:	mov	r0, r4
    3a28:	bl	0 <flatcc_builder_offset_vector_push>
    3a2c:	mov	r1, #36	; 0x24
    3a30:	mov	r0, r4
    3a34:	bl	0 <flatcc_builder_start_table>
    3a38:	ldr	r1, [pc, #3836]	; 493c <test_sort_find+0x1044>
    3a3c:	mov	r0, r4
    3a40:	bl	0 <flatcc_builder_create_string_str>
    3a44:	subs	r6, r0, #0
    3a48:	beq	3a60 <test_sort_find+0x168>
    3a4c:	mov	r1, #3
    3a50:	mov	r0, r4
    3a54:	bl	0 <flatcc_builder_table_add_offset>
    3a58:	cmp	r0, #0
    3a5c:	strne	r6, [r0]
    3a60:	mov	r2, #1
    3a64:	add	r1, r5, #12
    3a68:	mov	r0, r4
    3a6c:	bl	0 <flatcc_builder_check_required>
    3a70:	cmp	r0, #0
    3a74:	beq	5270 <test_sort_find+0x1978>
    3a78:	mov	r0, r4
    3a7c:	bl	0 <flatcc_builder_end_table>
    3a80:	subs	r1, r0, #0
    3a84:	beq	3a90 <test_sort_find+0x198>
    3a88:	mov	r0, r4
    3a8c:	bl	0 <flatcc_builder_offset_vector_push>
    3a90:	mov	r1, #36	; 0x24
    3a94:	mov	r0, r4
    3a98:	bl	0 <flatcc_builder_start_table>
    3a9c:	ldr	r1, [pc, #3728]	; 4934 <test_sort_find+0x103c>
    3aa0:	mov	r0, r4
    3aa4:	bl	0 <flatcc_builder_create_string_str>
    3aa8:	subs	r6, r0, #0
    3aac:	beq	3ac4 <test_sort_find+0x1cc>
    3ab0:	mov	r1, #3
    3ab4:	mov	r0, r4
    3ab8:	bl	0 <flatcc_builder_table_add_offset>
    3abc:	cmp	r0, #0
    3ac0:	strne	r6, [r0]
    3ac4:	mov	r2, #1
    3ac8:	add	r1, r5, #12
    3acc:	mov	r0, r4
    3ad0:	bl	0 <flatcc_builder_check_required>
    3ad4:	cmp	r0, #0
    3ad8:	beq	5270 <test_sort_find+0x1978>
    3adc:	mov	r0, r4
    3ae0:	bl	0 <flatcc_builder_end_table>
    3ae4:	subs	r1, r0, #0
    3ae8:	beq	3af4 <test_sort_find+0x1fc>
    3aec:	mov	r0, r4
    3af0:	bl	0 <flatcc_builder_offset_vector_push>
    3af4:	mov	r1, #36	; 0x24
    3af8:	mov	r0, r4
    3afc:	bl	0 <flatcc_builder_start_table>
    3b00:	ldr	r1, [pc, #3636]	; 493c <test_sort_find+0x1044>
    3b04:	mov	r0, r4
    3b08:	bl	0 <flatcc_builder_create_string_str>
    3b0c:	subs	r6, r0, #0
    3b10:	beq	3b28 <test_sort_find+0x230>
    3b14:	mov	r1, #3
    3b18:	mov	r0, r4
    3b1c:	bl	0 <flatcc_builder_table_add_offset>
    3b20:	cmp	r0, #0
    3b24:	strne	r6, [r0]
    3b28:	mov	r2, #1
    3b2c:	add	r1, r5, #12
    3b30:	mov	r0, r4
    3b34:	bl	0 <flatcc_builder_check_required>
    3b38:	cmp	r0, #0
    3b3c:	beq	5270 <test_sort_find+0x1978>
    3b40:	mov	r0, r4
    3b44:	bl	0 <flatcc_builder_end_table>
    3b48:	subs	r1, r0, #0
    3b4c:	beq	3b58 <test_sort_find+0x260>
    3b50:	mov	r0, r4
    3b54:	bl	0 <flatcc_builder_offset_vector_push>
    3b58:	mov	r0, r4
    3b5c:	bl	0 <flatcc_builder_end_offset_vector>
    3b60:	subs	r6, r0, #0
    3b64:	beq	3b7c <test_sort_find+0x284>
    3b68:	mov	r1, #11
    3b6c:	mov	r0, r4
    3b70:	bl	0 <flatcc_builder_table_add_offset>
    3b74:	cmp	r0, #0
    3b78:	strne	r6, [r0]
    3b7c:	add	r1, r5, #12
    3b80:	mov	r2, #1
    3b84:	mov	r0, r4
    3b88:	bl	0 <flatcc_builder_check_required>
    3b8c:	cmp	r0, #0
    3b90:	beq	5270 <test_sort_find+0x1978>
    3b94:	mov	r0, r4
    3b98:	bl	0 <flatcc_builder_end_table>
    3b9c:	mov	r1, r0
    3ba0:	mov	r0, r4
    3ba4:	bl	0 <flatcc_builder_end_buffer>
    3ba8:	mov	r0, r4
    3bac:	add	r1, sp, #36	; 0x24
    3bb0:	bl	0 <flatcc_builder_finalize_aligned_buffer>
    3bb4:	ldr	r3, [pc, #3356]	; 48d8 <test_sort_find+0xfe0>
    3bb8:	ldr	r2, [sp, #36]	; 0x24
    3bbc:	ldr	r3, [r3]
    3bc0:	mov	r4, r0
    3bc4:	str	r0, [sp, #20]
    3bc8:	mov	r1, r0
    3bcc:	ldr	r0, [pc, #3336]	; 48dc <test_sort_find+0xfe4>
    3bd0:	bl	20 <hexdump>
    3bd4:	cmp	r4, #0
    3bd8:	beq	3bec <test_sort_find+0x2f4>
    3bdc:	ldr	r3, [pc, #3324]	; 48e0 <test_sort_find+0xfe8>
    3be0:	ldr	r2, [r4, #4]
    3be4:	cmp	r2, r3
    3be8:	beq	3bf0 <test_sort_find+0x2f8>
    3bec:	bl	1a8 <elapsed_realtime+0x44>
    3bf0:	ldr	r2, [sp, #20]
    3bf4:	ldr	r3, [r2]
    3bf8:	adds	r2, r2, r3
    3bfc:	beq	3bec <test_sort_find+0x2f4>
    3c00:	ldr	r1, [sp, #20]
    3c04:	ldr	r3, [r1, r3]
    3c08:	sub	r3, r2, r3
    3c0c:	ldrh	r1, [r3]
    3c10:	cmp	r1, #27
    3c14:	bhi	3c2c <test_sort_find+0x334>
    3c18:	ldr	r3, [pc, #3268]	; 48e4 <test_sort_find+0xfec>
    3c1c:	ldr	r2, [pc, #3268]	; 48e8 <test_sort_find+0xff0>
    3c20:	ldr	r1, [pc, #3268]	; 48ec <test_sort_find+0xff4>
    3c24:	ldr	r0, [pc, #3268]	; 48f0 <test_sort_find+0xff8>
    3c28:	bl	0 <__assert_fail>
    3c2c:	ldrh	r3, [r3, #26]
    3c30:	cmp	r3, #0
    3c34:	beq	3c18 <test_sort_find+0x320>
    3c38:	ldr	r1, [r2, r3]
    3c3c:	add	r3, r2, r3
    3c40:	add	r2, r1, #4
    3c44:	adds	r4, r3, r2
    3c48:	str	r3, [sp, #16]
    3c4c:	str	r2, [sp, #24]
    3c50:	beq	3c18 <test_sort_find+0x320>
    3c54:	ldr	r3, [r4, #-4]
    3c58:	cmp	r3, #0
    3c5c:	str	r3, [sp, #28]
    3c60:	beq	3e78 <test_sort_find+0x580>
    3c64:	lsr	r2, r3, #1
    3c68:	sub	r3, r3, #1
    3c6c:	str	r3, [sp]
    3c70:	lsl	r3, r2, #1
    3c74:	str	r2, [sp, #12]
    3c78:	str	r3, [sp, #8]
    3c7c:	b	3d7c <test_sort_find+0x484>
    3c80:	ldr	r8, [r4, #-4]
    3c84:	mov	r6, r9
    3c88:	lsl	fp, r5, #2
    3c8c:	cmp	r8, r5
    3c90:	add	r2, r4, fp
    3c94:	bls	4414 <test_sort_find+0xb1c>
    3c98:	ldr	r7, [r4, r5, lsl #2]
    3c9c:	adds	r3, r2, r7
    3ca0:	beq	4410 <test_sort_find+0xb18>
    3ca4:	ldr	r2, [r2, r7]
    3ca8:	sub	r2, r3, r2
    3cac:	ldrh	r1, [r2]
    3cb0:	cmp	r1, #11
    3cb4:	bls	40e8 <test_sort_find+0x7f0>
    3cb8:	ldrh	r0, [r2, #10]
    3cbc:	cmp	r0, #0
    3cc0:	beq	40e8 <test_sort_find+0x7f0>
    3cc4:	ldr	r2, [r3, r0]
    3cc8:	cmp	r6, r8
    3ccc:	add	r2, r2, #4
    3cd0:	add	r0, r3, r0
    3cd4:	lsl	r3, r6, #2
    3cd8:	add	r0, r0, r2
    3cdc:	add	r2, r4, r3
    3ce0:	bcs	4414 <test_sort_find+0xb1c>
    3ce4:	ldr	r8, [r4, r6, lsl #2]
    3ce8:	adds	r1, r2, r8
    3cec:	beq	4410 <test_sort_find+0xb18>
    3cf0:	ldr	r2, [r2, r8]
    3cf4:	sub	r2, r1, r2
    3cf8:	ldrh	ip, [r2]
    3cfc:	cmp	ip, #11
    3d00:	bls	40e8 <test_sort_find+0x7f0>
    3d04:	ldrh	ip, [r2, #10]
    3d08:	cmp	ip, #0
    3d0c:	beq	40e8 <test_sort_find+0x7f0>
    3d10:	ldr	r2, [r1, ip]
    3d14:	add	r1, r1, ip
    3d18:	add	r2, r2, #4
    3d1c:	adds	r1, r1, r2
    3d20:	moveq	sl, #0
    3d24:	ldrne	sl, [r1, #-4]
    3d28:	cmp	r0, #0
    3d2c:	beq	4138 <test_sort_find+0x840>
    3d30:	ldr	r9, [r0, #-4]
    3d34:	str	r3, [sp, #4]
    3d38:	cmp	sl, r9
    3d3c:	movcc	r2, sl
    3d40:	movcs	r2, r9
    3d44:	bl	0 <strncmp>
    3d48:	ldr	r3, [sp, #4]
    3d4c:	cmp	r0, #0
    3d50:	bne	40fc <test_sort_find+0x804>
    3d54:	cmp	sl, r9
    3d58:	bhi	4100 <test_sort_find+0x808>
    3d5c:	ldr	r3, [sp, #12]
    3d60:	sub	r3, r3, #1
    3d64:	str	r3, [sp, #12]
    3d68:	cmn	r3, #1
    3d6c:	ldr	r3, [sp, #8]
    3d70:	sub	r3, r3, #2
    3d74:	str	r3, [sp, #8]
    3d78:	beq	4148 <test_sort_find+0x850>
    3d7c:	ldr	r3, [sp]
    3d80:	ldr	r2, [sp, #8]
    3d84:	cmp	r3, r2
    3d88:	bcc	3d5c <test_sort_find+0x464>
    3d8c:	ldr	r5, [sp, #12]
    3d90:	ldr	r9, [sp, #8]
    3d94:	ldr	r3, [sp]
    3d98:	cmp	r3, r9
    3d9c:	bls	3c80 <test_sort_find+0x388>
    3da0:	ldr	r8, [r4, #-4]
    3da4:	lsl	r3, r9, #2
    3da8:	cmp	r8, r9
    3dac:	add	r1, r4, r3
    3db0:	bls	4414 <test_sort_find+0xb1c>
    3db4:	ldr	r0, [r4, r9, lsl #2]
    3db8:	adds	r2, r1, r0
    3dbc:	beq	4410 <test_sort_find+0xb18>
    3dc0:	ldr	r1, [r1, r0]
    3dc4:	sub	r1, r2, r1
    3dc8:	ldrh	r0, [r1]
    3dcc:	cmp	r0, #11
    3dd0:	bls	40e8 <test_sort_find+0x7f0>
    3dd4:	ldrh	r1, [r1, #10]
    3dd8:	cmp	r1, #0
    3ddc:	beq	40e8 <test_sort_find+0x7f0>
    3de0:	ldr	r0, [r2, r1]
    3de4:	add	r6, r9, #1
    3de8:	add	r2, r2, r1
    3dec:	add	r3, r3, #4
    3df0:	add	r0, r0, #4
    3df4:	cmp	r8, r6
    3df8:	add	r0, r2, r0
    3dfc:	add	r2, r4, r3
    3e00:	bls	4414 <test_sort_find+0xb1c>
    3e04:	ldr	r3, [r4, r3]
    3e08:	adds	r1, r2, r3
    3e0c:	beq	4410 <test_sort_find+0xb18>
    3e10:	ldr	r3, [r2, r3]
    3e14:	sub	r3, r1, r3
    3e18:	ldrh	r2, [r3]
    3e1c:	cmp	r2, #11
    3e20:	bls	40e8 <test_sort_find+0x7f0>
    3e24:	ldrh	r2, [r3, #10]
    3e28:	cmp	r2, #0
    3e2c:	beq	40e8 <test_sort_find+0x7f0>
    3e30:	ldr	r3, [r1, r2]
    3e34:	add	r1, r1, r2
    3e38:	add	r3, r3, #4
    3e3c:	adds	r1, r1, r3
    3e40:	moveq	sl, #0
    3e44:	ldrne	sl, [r1, #-4]
    3e48:	cmp	r0, #0
    3e4c:	beq	4140 <test_sort_find+0x848>
    3e50:	ldr	r7, [r0, #-4]
    3e54:	cmp	sl, r7
    3e58:	movcc	r2, sl
    3e5c:	movcs	r2, r7
    3e60:	bl	0 <strncmp>
    3e64:	cmp	r0, #0
    3e68:	bne	4130 <test_sort_find+0x838>
    3e6c:	cmp	sl, r7
    3e70:	movls	r6, r9
    3e74:	b	3c88 <test_sort_find+0x390>
    3e78:	ldr	r3, [pc, #2648]	; 48d8 <test_sort_find+0xfe0>
    3e7c:	ldr	r2, [sp, #36]	; 0x24
    3e80:	ldr	r1, [sp, #20]
    3e84:	ldr	r3, [r3]
    3e88:	ldr	r0, [pc, #2660]	; 48f4 <test_sort_find+0xffc>
    3e8c:	bl	20 <hexdump>
    3e90:	ldr	r3, [r4, #-4]
    3e94:	cmp	r3, #5
    3e98:	bne	51e4 <test_sort_find+0x18ec>
    3e9c:	ldr	r3, [sp, #16]
    3ea0:	ldr	r2, [sp, #24]
    3ea4:	ldr	r2, [r3, r2]
    3ea8:	adds	r3, r4, r2
    3eac:	beq	4410 <test_sort_find+0xb18>
    3eb0:	ldr	r2, [r4, r2]
    3eb4:	sub	r2, r3, r2
    3eb8:	ldrh	r1, [r2]
    3ebc:	cmp	r1, #11
    3ec0:	bls	40e8 <test_sort_find+0x7f0>
    3ec4:	ldrh	r2, [r2, #10]
    3ec8:	cmp	r2, #0
    3ecc:	beq	40e8 <test_sort_find+0x7f0>
    3ed0:	ldr	r0, [r3, r2]
    3ed4:	add	r3, r3, r2
    3ed8:	add	r0, r0, #4
    3edc:	add	r0, r3, r0
    3ee0:	ldr	r1, [pc, #2636]	; 4934 <test_sort_find+0x103c>
    3ee4:	bl	0 <strcmp>
    3ee8:	cmp	r0, #0
    3eec:	bne	5234 <test_sort_find+0x193c>
    3ef0:	ldr	r6, [r4, #4]
    3ef4:	add	r6, r6, #4
    3ef8:	adds	r3, r4, r6
    3efc:	beq	4410 <test_sort_find+0xb18>
    3f00:	ldr	r2, [r4, r6]
    3f04:	sub	r2, r3, r2
    3f08:	ldrh	r1, [r2]
    3f0c:	cmp	r1, #11
    3f10:	bls	40e8 <test_sort_find+0x7f0>
    3f14:	ldrh	r2, [r2, #10]
    3f18:	cmp	r2, #0
    3f1c:	beq	40e8 <test_sort_find+0x7f0>
    3f20:	ldr	r0, [r3, r2]
    3f24:	add	r3, r3, r2
    3f28:	add	r0, r0, #4
    3f2c:	add	r0, r3, r0
    3f30:	ldr	r1, [pc, #2564]	; 493c <test_sort_find+0x1044>
    3f34:	bl	0 <strcmp>
    3f38:	cmp	r0, #0
    3f3c:	bne	5248 <test_sort_find+0x1950>
    3f40:	ldr	r5, [r4, #8]
    3f44:	add	r5, r5, #8
    3f48:	adds	r3, r4, r5
    3f4c:	beq	4410 <test_sort_find+0xb18>
    3f50:	ldr	r2, [r4, r5]
    3f54:	sub	r2, r3, r2
    3f58:	ldrh	r1, [r2]
    3f5c:	cmp	r1, #11
    3f60:	bls	40e8 <test_sort_find+0x7f0>
    3f64:	ldrh	r2, [r2, #10]
    3f68:	cmp	r2, #0
    3f6c:	beq	40e8 <test_sort_find+0x7f0>
    3f70:	ldr	r0, [r3, r2]
    3f74:	add	r3, r3, r2
    3f78:	add	r0, r0, #4
    3f7c:	add	r0, r3, r0
    3f80:	ldr	r1, [pc, #2484]	; 493c <test_sort_find+0x1044>
    3f84:	bl	0 <strcmp>
    3f88:	cmp	r0, #0
    3f8c:	bne	525c <test_sort_find+0x1964>
    3f90:	ldr	r2, [r4, #12]
    3f94:	add	r2, r2, #12
    3f98:	adds	r3, r4, r2
    3f9c:	beq	4410 <test_sort_find+0xb18>
    3fa0:	ldr	r2, [r4, r2]
    3fa4:	sub	r2, r3, r2
    3fa8:	ldrh	r1, [r2]
    3fac:	cmp	r1, #11
    3fb0:	bls	40e8 <test_sort_find+0x7f0>
    3fb4:	ldrh	r2, [r2, #10]
    3fb8:	cmp	r2, #0
    3fbc:	beq	40e8 <test_sort_find+0x7f0>
    3fc0:	ldr	r0, [r3, r2]
    3fc4:	add	r3, r3, r2
    3fc8:	add	r0, r0, #4
    3fcc:	add	r0, r3, r0
    3fd0:	ldr	r1, [pc, #2300]	; 48d4 <test_sort_find+0xfdc>
    3fd4:	bl	0 <strcmp>
    3fd8:	cmp	r0, #0
    3fdc:	bne	520c <test_sort_find+0x1914>
    3fe0:	ldr	r2, [r4, #16]
    3fe4:	add	r2, r2, #16
    3fe8:	adds	r3, r4, r2
    3fec:	beq	4410 <test_sort_find+0xb18>
    3ff0:	ldr	r2, [r4, r2]
    3ff4:	sub	r2, r3, r2
    3ff8:	ldrh	r1, [r2]
    3ffc:	cmp	r1, #11
    4000:	bls	40e8 <test_sort_find+0x7f0>
    4004:	ldrh	r2, [r2, #10]
    4008:	cmp	r2, #0
    400c:	beq	40e8 <test_sort_find+0x7f0>
    4010:	ldr	r0, [r3, r2]
    4014:	add	r3, r3, r2
    4018:	add	r0, r0, #4
    401c:	add	r0, r3, r0
    4020:	ldr	r1, [pc, #2336]	; 4948 <test_sort_find+0x1050>
    4024:	bl	0 <strcmp>
    4028:	subs	r8, r0, #0
    402c:	bne	5220 <test_sort_find+0x1928>
    4030:	cmp	r6, r5
    4034:	movne	r7, #4
    4038:	ldrne	r6, [pc, #2196]	; 48d4 <test_sort_find+0xfdc>
    403c:	beq	51f8 <test_sort_find+0x1900>
    4040:	sub	r5, r7, r8
    4044:	add	r5, r8, r5, lsr #1
    4048:	cmp	r5, #4
    404c:	add	r2, r4, r5, lsl #2
    4050:	bhi	4414 <test_sort_find+0xb1c>
    4054:	ldr	r3, [r4, r5, lsl #2]
    4058:	adds	r1, r2, r3
    405c:	beq	4410 <test_sort_find+0xb18>
    4060:	ldr	r2, [r2, r3]
    4064:	sub	r2, r1, r2
    4068:	ldrh	r3, [r2]
    406c:	cmp	r3, #11
    4070:	bhi	407c <test_sort_find+0x784>
    4074:	b	40e8 <test_sort_find+0x7f0>
    4078:	mov	r5, r3
    407c:	ldrh	r0, [r2, #10]
    4080:	cmp	r0, #0
    4084:	beq	40e8 <test_sort_find+0x7f0>
    4088:	ldr	r3, [r1, r0]
    408c:	add	r0, r1, r0
    4090:	add	r3, r3, #4
    4094:	add	r0, r0, r3
    4098:	mov	r1, r6
    409c:	bl	0 <strcmp>
    40a0:	cmp	r0, #0
    40a4:	blt	43d4 <test_sort_find+0xadc>
    40a8:	cmp	r5, r8
    40ac:	bls	43e4 <test_sort_find+0xaec>
    40b0:	sub	r3, r5, r8
    40b4:	add	r3, r8, r3, lsr #1
    40b8:	cmp	r3, #4
    40bc:	add	r0, r4, r3, lsl #2
    40c0:	bhi	4414 <test_sort_find+0xb1c>
    40c4:	ldr	r2, [r4, r3, lsl #2]
    40c8:	adds	r1, r0, r2
    40cc:	beq	4410 <test_sort_find+0xb18>
    40d0:	ldr	r2, [r0, r2]
    40d4:	mov	r7, r5
    40d8:	sub	r2, r1, r2
    40dc:	ldrh	r0, [r2]
    40e0:	cmp	r0, #11
    40e4:	bhi	4078 <test_sort_find+0x780>
    40e8:	ldr	r3, [pc, #2056]	; 48f8 <test_sort_find+0x1000>
    40ec:	ldr	r2, [pc, #2056]	; 48fc <test_sort_find+0x1004>
    40f0:	ldr	r1, [pc, #2056]	; 4900 <test_sort_find+0x1008>
    40f4:	ldr	r0, [pc, #2056]	; 4904 <test_sort_find+0x100c>
    40f8:	bl	0 <__assert_fail>
    40fc:	bge	3d5c <test_sort_find+0x464>
    4100:	sub	r5, r5, r6
    4104:	ldr	r2, [sp]
    4108:	lsl	r5, r5, #2
    410c:	lsl	r9, r6, #1
    4110:	sub	r8, r8, r5
    4114:	add	r7, r7, r5
    4118:	cmp	r2, r9
    411c:	str	r8, [r4, fp]
    4120:	mov	r5, r6
    4124:	str	r7, [r4, r3]
    4128:	bcs	3d94 <test_sort_find+0x49c>
    412c:	b	3d5c <test_sort_find+0x464>
    4130:	movge	r6, r9
    4134:	b	3c88 <test_sort_find+0x390>
    4138:	mov	r9, #0
    413c:	b	3d54 <test_sort_find+0x45c>
    4140:	mov	r7, #0
    4144:	b	3e6c <test_sort_find+0x574>
    4148:	ldr	r3, [sp]
    414c:	cmp	r3, #0
    4150:	beq	3e78 <test_sort_find+0x580>
    4154:	ldr	r2, [sp, #28]
    4158:	rsb	r3, r2, r2, lsl #30
    415c:	add	r2, r4, r2, lsl #2
    4160:	lsl	r3, r3, #2
    4164:	add	r3, r3, #4
    4168:	str	r2, [sp, #12]
    416c:	str	r3, [sp, #8]
    4170:	b	4268 <test_sort_find+0x970>
    4174:	ldr	r8, [r4, #-4]
    4178:	mov	r6, r9
    417c:	lsl	r3, r5, #2
    4180:	cmp	r5, r8
    4184:	add	r1, r4, r3
    4188:	bcs	4414 <test_sort_find+0xb1c>
    418c:	ldr	r7, [r4, r5, lsl #2]
    4190:	adds	r2, r1, r7
    4194:	beq	4410 <test_sort_find+0xb18>
    4198:	ldr	r1, [r1, r7]
    419c:	sub	r1, r2, r1
    41a0:	ldrh	r0, [r1]
    41a4:	cmp	r0, #11
    41a8:	bls	40e8 <test_sort_find+0x7f0>
    41ac:	ldrh	r1, [r1, #10]
    41b0:	cmp	r1, #0
    41b4:	beq	40e8 <test_sort_find+0x7f0>
    41b8:	ldr	r0, [r2, r1]
    41bc:	lsl	fp, r6, #2
    41c0:	add	r2, r2, r1
    41c4:	add	r0, r0, #4
    41c8:	cmp	r6, r8
    41cc:	add	r0, r2, r0
    41d0:	add	r2, r4, fp
    41d4:	bcs	4414 <test_sort_find+0xb1c>
    41d8:	ldr	r8, [r4, r6, lsl #2]
    41dc:	adds	r1, r2, r8
    41e0:	beq	4410 <test_sort_find+0xb18>
    41e4:	ldr	r2, [r2, r8]
    41e8:	sub	r2, r1, r2
    41ec:	ldrh	ip, [r2]
    41f0:	cmp	ip, #11
    41f4:	bls	40e8 <test_sort_find+0x7f0>
    41f8:	ldrh	ip, [r2, #10]
    41fc:	cmp	ip, #0
    4200:	beq	40e8 <test_sort_find+0x7f0>
    4204:	ldr	r2, [r1, ip]
    4208:	add	r1, r1, ip
    420c:	add	r2, r2, #4
    4210:	adds	r1, r1, r2
    4214:	moveq	sl, #0
    4218:	ldrne	sl, [r1, #-4]
    421c:	cmp	r0, #0
    4220:	beq	43c4 <test_sort_find+0xacc>
    4224:	ldr	r9, [r0, #-4]
    4228:	str	r3, [sp, #4]
    422c:	cmp	sl, r9
    4230:	movcc	r2, sl
    4234:	movcs	r2, r9
    4238:	bl	0 <strncmp>
    423c:	ldr	r3, [sp, #4]
    4240:	cmp	r0, #0
    4244:	bne	4388 <test_sort_find+0xa90>
    4248:	cmp	sl, r9
    424c:	bhi	438c <test_sort_find+0xa94>
    4250:	ldr	r3, [sp]
    4254:	cmp	r3, #0
    4258:	ldr	r3, [sp, #8]
    425c:	add	r3, r3, #4
    4260:	str	r3, [sp, #8]
    4264:	beq	3e78 <test_sort_find+0x580>
    4268:	ldr	r1, [sp, #12]
    426c:	ldr	r0, [sp]
    4270:	ldr	r3, [r4]
    4274:	sub	r0, r0, #1
    4278:	ldr	r2, [r1, #-4]
    427c:	str	r0, [sp]
    4280:	ldr	r0, [sp, #8]
    4284:	mov	r5, #0
    4288:	sub	r2, r2, r0
    428c:	str	r2, [r4]
    4290:	mov	r9, r5
    4294:	mov	r2, r1
    4298:	add	r3, r0, r3
    429c:	str	r3, [r2, #-4]!
    42a0:	str	r2, [sp, #12]
    42a4:	ldr	r3, [sp]
    42a8:	cmp	r3, r9
    42ac:	bls	4174 <test_sort_find+0x87c>
    42b0:	ldr	r8, [r4, #-4]
    42b4:	lsl	r3, r9, #2
    42b8:	cmp	r8, r9
    42bc:	add	r0, r4, r3
    42c0:	bls	4414 <test_sort_find+0xb1c>
    42c4:	ldr	r1, [r4, r9, lsl #2]
    42c8:	adds	r2, r0, r1
    42cc:	beq	4410 <test_sort_find+0xb18>
    42d0:	ldr	r1, [r0, r1]
    42d4:	sub	r1, r2, r1
    42d8:	ldrh	r0, [r1]
    42dc:	cmp	r0, #11
    42e0:	bls	40e8 <test_sort_find+0x7f0>
    42e4:	ldrh	r1, [r1, #10]
    42e8:	cmp	r1, #0
    42ec:	beq	40e8 <test_sort_find+0x7f0>
    42f0:	ldr	r0, [r2, r1]
    42f4:	add	r6, r9, #1
    42f8:	add	r2, r2, r1
    42fc:	add	r3, r3, #4
    4300:	add	r0, r0, #4
    4304:	cmp	r8, r6
    4308:	add	r0, r2, r0
    430c:	add	r2, r4, r3
    4310:	bls	4414 <test_sort_find+0xb1c>
    4314:	ldr	r3, [r4, r3]
    4318:	adds	r1, r2, r3
    431c:	beq	4410 <test_sort_find+0xb18>
    4320:	ldr	r3, [r2, r3]
    4324:	sub	r3, r1, r3
    4328:	ldrh	r2, [r3]
    432c:	cmp	r2, #11
    4330:	bls	40e8 <test_sort_find+0x7f0>
    4334:	ldrh	r2, [r3, #10]
    4338:	cmp	r2, #0
    433c:	beq	40e8 <test_sort_find+0x7f0>
    4340:	ldr	r3, [r1, r2]
    4344:	add	r1, r1, r2
    4348:	add	r3, r3, #4
    434c:	adds	r1, r1, r3
    4350:	moveq	sl, #0
    4354:	ldrne	sl, [r1, #-4]
    4358:	cmp	r0, #0
    435c:	beq	43cc <test_sort_find+0xad4>
    4360:	ldr	r7, [r0, #-4]
    4364:	cmp	sl, r7
    4368:	movcc	r2, sl
    436c:	movcs	r2, r7
    4370:	bl	0 <strncmp>
    4374:	cmp	r0, #0
    4378:	bne	43bc <test_sort_find+0xac4>
    437c:	cmp	sl, r7
    4380:	movls	r6, r9
    4384:	b	417c <test_sort_find+0x884>
    4388:	bge	4250 <test_sort_find+0x958>
    438c:	sub	r5, r5, r6
    4390:	ldr	r2, [sp]
    4394:	lsl	r5, r5, #2
    4398:	lsl	r9, r6, #1
    439c:	sub	r8, r8, r5
    43a0:	add	r7, r7, r5
    43a4:	cmp	r2, r9
    43a8:	str	r8, [r4, r3]
    43ac:	mov	r5, r6
    43b0:	str	r7, [r4, fp]
    43b4:	bcs	42a4 <test_sort_find+0x9ac>
    43b8:	b	4250 <test_sort_find+0x958>
    43bc:	movge	r6, r9
    43c0:	b	417c <test_sort_find+0x884>
    43c4:	mov	r9, #0
    43c8:	b	4248 <test_sort_find+0x950>
    43cc:	mov	r7, #0
    43d0:	b	437c <test_sort_find+0xa84>
    43d4:	add	r8, r5, #1
    43d8:	cmp	r8, r7
    43dc:	bcc	4040 <test_sort_find+0x748>
    43e0:	mov	r5, r7
    43e4:	cmp	r5, r8
    43e8:	beq	4428 <test_sort_find+0xb30>
    43ec:	ldr	r0, [pc, #1300]	; 4908 <test_sort_find+0x1010>
    43f0:	bl	0 <puts>
    43f4:	mvn	r3, #0
    43f8:	str	r3, [sp, #24]
    43fc:	ldr	r0, [sp, #20]
    4400:	bl	0 <flatcc_builder_aligned_free>
    4404:	ldr	r0, [sp, #24]
    4408:	add	sp, sp, #44	; 0x2c
    440c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4410:	bl	220 <flatbuffers_string_vec_at.part.20+0x1c>
    4414:	ldr	r3, [pc, #1264]	; 490c <test_sort_find+0x1014>
    4418:	ldr	r2, [pc, #1264]	; 4910 <test_sort_find+0x1018>
    441c:	ldr	r1, [pc, #1244]	; 4900 <test_sort_find+0x1008>
    4420:	ldr	r0, [pc, #1260]	; 4914 <test_sort_find+0x101c>
    4424:	bl	0 <__assert_fail>
    4428:	ldr	r2, [r4, r5, lsl #2]
    442c:	add	r1, r4, r5, lsl #2
    4430:	adds	r3, r1, r2
    4434:	beq	4410 <test_sort_find+0xb18>
    4438:	ldr	r2, [r1, r2]
    443c:	sub	r2, r3, r2
    4440:	ldrh	r1, [r2]
    4444:	cmp	r1, #11
    4448:	bls	40e8 <test_sort_find+0x7f0>
    444c:	ldrh	r2, [r2, #10]
    4450:	cmp	r2, #0
    4454:	beq	40e8 <test_sort_find+0x7f0>
    4458:	ldr	r0, [r3, r2]
    445c:	add	r3, r3, r2
    4460:	add	r0, r0, #4
    4464:	add	r0, r3, r0
    4468:	ldr	r1, [pc, #1124]	; 48d4 <test_sort_find+0xfdc>
    446c:	bl	0 <strcmp>
    4470:	cmp	r0, #0
    4474:	cmpeq	r5, #3
    4478:	movne	r5, #1
    447c:	moveq	r5, #0
    4480:	ldreq	r6, [pc, #1168]	; 4918 <test_sort_find+0x1020>
    4484:	moveq	r7, #4
    4488:	bne	43ec <test_sort_find+0xaf4>
    448c:	sub	r8, r7, r5
    4490:	add	r8, r5, r8, lsr #1
    4494:	cmp	r8, #4
    4498:	add	r2, r4, r8, lsl #2
    449c:	bhi	4414 <test_sort_find+0xb1c>
    44a0:	ldr	r3, [r4, r8, lsl #2]
    44a4:	adds	r1, r2, r3
    44a8:	beq	4410 <test_sort_find+0xb18>
    44ac:	ldr	r2, [r2, r3]
    44b0:	sub	r2, r1, r2
    44b4:	ldrh	r3, [r2]
    44b8:	cmp	r3, #11
    44bc:	bhi	44cc <test_sort_find+0xbd4>
    44c0:	b	40e8 <test_sort_find+0x7f0>
    44c4:	mov	r7, r8
    44c8:	mov	r8, r3
    44cc:	ldrh	r0, [r2, #10]
    44d0:	cmp	r0, #0
    44d4:	beq	40e8 <test_sort_find+0x7f0>
    44d8:	ldr	r3, [r1, r0]
    44dc:	add	r0, r1, r0
    44e0:	add	r3, r3, #4
    44e4:	adds	r0, r0, r3
    44e8:	beq	4558 <test_sort_find+0xc60>
    44ec:	ldr	r9, [r0, #-4]
    44f0:	mov	r1, r6
    44f4:	cmp	r9, #5
    44f8:	movcc	r2, r9
    44fc:	movcs	r2, #5
    4500:	bl	0 <strncmp>
    4504:	cmp	r0, #0
    4508:	bne	4554 <test_sort_find+0xc5c>
    450c:	cmp	r9, #4
    4510:	bls	4558 <test_sort_find+0xc60>
    4514:	cmp	r8, r5
    4518:	bls	4568 <test_sort_find+0xc70>
    451c:	sub	r3, r8, r5
    4520:	add	r3, r5, r3, lsr #1
    4524:	cmp	r3, #4
    4528:	add	r0, r4, r3, lsl #2
    452c:	bhi	4414 <test_sort_find+0xb1c>
    4530:	ldr	r2, [r4, r3, lsl #2]
    4534:	adds	r1, r0, r2
    4538:	beq	4410 <test_sort_find+0xb18>
    453c:	ldr	r2, [r0, r2]
    4540:	sub	r2, r1, r2
    4544:	ldrh	r0, [r2]
    4548:	cmp	r0, #11
    454c:	bls	40e8 <test_sort_find+0x7f0>
    4550:	b	44c4 <test_sort_find+0xbcc>
    4554:	bge	4514 <test_sort_find+0xc1c>
    4558:	add	r5, r8, #1
    455c:	cmp	r5, r7
    4560:	bcc	448c <test_sort_find+0xb94>
    4564:	mov	r8, r7
    4568:	cmp	r5, r8
    456c:	beq	4584 <test_sort_find+0xc8c>
    4570:	ldr	r0, [pc, #932]	; 491c <test_sort_find+0x1024>
    4574:	bl	0 <puts>
    4578:	mvn	r3, #0
    457c:	str	r3, [sp, #24]
    4580:	b	43fc <test_sort_find+0xb04>
    4584:	ldr	r3, [r4, r5, lsl #2]
    4588:	add	r0, r4, r5, lsl #2
    458c:	add	r0, r0, r3
    4590:	bl	250 <MyGame_Example_Monster_name>
    4594:	subs	r3, r0, #0
    4598:	beq	4570 <test_sort_find+0xc78>
    459c:	ldr	r6, [r3, #-4]
    45a0:	ldr	r1, [pc, #880]	; 4918 <test_sort_find+0x1020>
    45a4:	cmp	r6, #5
    45a8:	movcc	r2, r6
    45ac:	movcs	r2, #5
    45b0:	bl	0 <strncmp>
    45b4:	subs	r8, r0, #0
    45b8:	bne	4570 <test_sort_find+0xc78>
    45bc:	cmp	r6, #5
    45c0:	bne	4570 <test_sort_find+0xc78>
    45c4:	cmp	r5, #3
    45c8:	moveq	r6, #4
    45cc:	ldreq	r7, [pc, #844]	; 4920 <test_sort_find+0x1028>
    45d0:	bne	4570 <test_sort_find+0xc78>
    45d4:	sub	r5, r6, r8
    45d8:	add	r5, r8, r5, lsr #1
    45dc:	cmp	r5, #4
    45e0:	add	r2, r4, r5, lsl #2
    45e4:	bhi	4414 <test_sort_find+0xb1c>
    45e8:	ldr	r3, [r4, r5, lsl #2]
    45ec:	adds	r1, r2, r3
    45f0:	beq	4410 <test_sort_find+0xb18>
    45f4:	ldr	r2, [r2, r3]
    45f8:	sub	r2, r1, r2
    45fc:	ldrh	r3, [r2]
    4600:	cmp	r3, #11
    4604:	bhi	4610 <test_sort_find+0xd18>
    4608:	b	40e8 <test_sort_find+0x7f0>
    460c:	mov	r5, r3
    4610:	ldrh	r0, [r2, #10]
    4614:	cmp	r0, #0
    4618:	beq	40e8 <test_sort_find+0x7f0>
    461c:	ldr	r3, [r1, r0]
    4620:	add	r0, r1, r0
    4624:	add	r3, r3, #4
    4628:	adds	r0, r0, r3
    462c:	beq	46a0 <test_sort_find+0xda8>
    4630:	ldr	r9, [r0, #-4]
    4634:	mov	r1, r7
    4638:	cmp	r9, #5
    463c:	movcc	r2, r9
    4640:	movcs	r2, #5
    4644:	bl	0 <strncmp>
    4648:	cmp	r0, #0
    464c:	bne	469c <test_sort_find+0xda4>
    4650:	cmp	r9, #4
    4654:	bls	46a0 <test_sort_find+0xda8>
    4658:	cmp	r8, r5
    465c:	bcs	46b0 <test_sort_find+0xdb8>
    4660:	sub	r3, r5, r8
    4664:	add	r3, r8, r3, lsr #1
    4668:	cmp	r3, #4
    466c:	add	r0, r4, r3, lsl #2
    4670:	bhi	4414 <test_sort_find+0xb1c>
    4674:	ldr	r2, [r4, r3, lsl #2]
    4678:	adds	r1, r0, r2
    467c:	beq	4410 <test_sort_find+0xb18>
    4680:	ldr	r2, [r0, r2]
    4684:	mov	r6, r5
    4688:	sub	r2, r1, r2
    468c:	ldrh	r0, [r2]
    4690:	cmp	r0, #11
    4694:	bls	40e8 <test_sort_find+0x7f0>
    4698:	b	460c <test_sort_find+0xd14>
    469c:	bge	4658 <test_sort_find+0xd60>
    46a0:	add	r8, r5, #1
    46a4:	cmp	r8, r6
    46a8:	bcc	45d4 <test_sort_find+0xcdc>
    46ac:	mov	r5, r6
    46b0:	cmp	r8, r5
    46b4:	beq	46cc <test_sort_find+0xdd4>
    46b8:	ldr	r0, [pc, #612]	; 4924 <test_sort_find+0x102c>
    46bc:	bl	0 <puts>
    46c0:	mvn	r3, #0
    46c4:	str	r3, [sp, #24]
    46c8:	b	43fc <test_sort_find+0xb04>
    46cc:	ldr	r3, [r4, r8, lsl #2]
    46d0:	add	r0, r4, r8, lsl #2
    46d4:	add	r0, r0, r3
    46d8:	bl	250 <MyGame_Example_Monster_name>
    46dc:	subs	r3, r0, #0
    46e0:	beq	46b8 <test_sort_find+0xdc0>
    46e4:	ldr	r5, [r3, #-4]
    46e8:	ldr	r1, [pc, #560]	; 4920 <test_sort_find+0x1028>
    46ec:	cmp	r5, #5
    46f0:	movcc	r2, r5
    46f4:	movcs	r2, #5
    46f8:	bl	0 <strncmp>
    46fc:	cmp	r0, #0
    4700:	bne	46b8 <test_sort_find+0xdc0>
    4704:	cmp	r5, #5
    4708:	bne	46b8 <test_sort_find+0xdc0>
    470c:	cmp	r8, #3
    4710:	bne	46b8 <test_sort_find+0xdc0>
    4714:	ldr	r6, [pc, #528]	; 492c <test_sort_find+0x1034>
    4718:	mov	r8, r0
    471c:	mov	r7, #4
    4720:	sub	r5, r7, r8
    4724:	add	r5, r8, r5, lsr #1
    4728:	cmp	r5, #4
    472c:	add	r2, r4, r5, lsl #2
    4730:	bhi	4414 <test_sort_find+0xb1c>
    4734:	ldr	r3, [r4, r5, lsl #2]
    4738:	adds	r1, r2, r3
    473c:	beq	4410 <test_sort_find+0xb18>
    4740:	ldr	r2, [r2, r3]
    4744:	sub	r2, r1, r2
    4748:	ldrh	r3, [r2]
    474c:	cmp	r3, #11
    4750:	bhi	4760 <test_sort_find+0xe68>
    4754:	b	40e8 <test_sort_find+0x7f0>
    4758:	mov	r7, r5
    475c:	mov	r5, r3
    4760:	ldrh	r0, [r2, #10]
    4764:	cmp	r0, #0
    4768:	beq	40e8 <test_sort_find+0x7f0>
    476c:	ldr	r3, [r1, r0]
    4770:	add	r0, r1, r0
    4774:	add	r3, r3, #4
    4778:	add	r0, r0, r3
    477c:	mov	r1, r6
    4780:	bl	0 <strcmp>
    4784:	cmp	r0, #0
    4788:	blt	47cc <test_sort_find+0xed4>
    478c:	cmp	r5, r8
    4790:	bls	47dc <test_sort_find+0xee4>
    4794:	sub	r3, r5, r8
    4798:	add	r3, r8, r3, lsr #1
    479c:	cmp	r3, #4
    47a0:	add	r0, r4, r3, lsl #2
    47a4:	bhi	4414 <test_sort_find+0xb1c>
    47a8:	ldr	r2, [r4, r3, lsl #2]
    47ac:	adds	r1, r0, r2
    47b0:	beq	4410 <test_sort_find+0xb18>
    47b4:	ldr	r2, [r0, r2]
    47b8:	sub	r2, r1, r2
    47bc:	ldrh	r0, [r2]
    47c0:	cmp	r0, #11
    47c4:	bls	40e8 <test_sort_find+0x7f0>
    47c8:	b	4758 <test_sort_find+0xe60>
    47cc:	add	r8, r5, #1
    47d0:	cmp	r8, r7
    47d4:	bcc	4720 <test_sort_find+0xe28>
    47d8:	mov	r5, r7
    47dc:	cmp	r8, r5
    47e0:	beq	4968 <test_sort_find+0x1070>
    47e4:	ldr	r6, [pc, #328]	; 4934 <test_sort_find+0x103c>
    47e8:	mov	r7, #4
    47ec:	mov	r5, #0
    47f0:	sub	r8, r7, r5
    47f4:	add	r8, r5, r8, lsr #1
    47f8:	cmp	r8, #4
    47fc:	add	r2, r4, r8, lsl #2
    4800:	bhi	4414 <test_sort_find+0xb1c>
    4804:	ldr	r3, [r4, r8, lsl #2]
    4808:	adds	r1, r2, r3
    480c:	beq	4410 <test_sort_find+0xb18>
    4810:	ldr	r2, [r2, r3]
    4814:	sub	r2, r1, r2
    4818:	ldrh	r3, [r2]
    481c:	cmp	r3, #11
    4820:	bhi	482c <test_sort_find+0xf34>
    4824:	b	40e8 <test_sort_find+0x7f0>
    4828:	mov	r8, r3
    482c:	ldrh	r0, [r2, #10]
    4830:	cmp	r0, #0
    4834:	beq	40e8 <test_sort_find+0x7f0>
    4838:	ldr	r3, [r1, r0]
    483c:	add	r0, r1, r0
    4840:	add	r3, r3, #4
    4844:	add	r0, r0, r3
    4848:	mov	r1, r6
    484c:	bl	0 <strcmp>
    4850:	cmp	r0, #0
    4854:	blt	489c <test_sort_find+0xfa4>
    4858:	cmp	r8, r5
    485c:	bls	48ac <test_sort_find+0xfb4>
    4860:	sub	r3, r8, r5
    4864:	add	r3, r5, r3, lsr #1
    4868:	cmp	r3, #4
    486c:	add	r0, r4, r3, lsl #2
    4870:	bhi	4414 <test_sort_find+0xb1c>
    4874:	ldr	r2, [r4, r3, lsl #2]
    4878:	adds	r1, r0, r2
    487c:	beq	4410 <test_sort_find+0xb18>
    4880:	ldr	r2, [r0, r2]
    4884:	mov	r7, r8
    4888:	sub	r2, r1, r2
    488c:	ldrh	r0, [r2]
    4890:	cmp	r0, #11
    4894:	bls	40e8 <test_sort_find+0x7f0>
    4898:	b	4828 <test_sort_find+0xf30>
    489c:	add	r5, r8, #1
    48a0:	cmp	r5, r7
    48a4:	bcc	47f0 <test_sort_find+0xef8>
    48a8:	mov	r8, r7
    48ac:	cmp	r5, r8
    48b0:	beq	49cc <test_sort_find+0x10d4>
    48b4:	ldr	r0, [pc, #108]	; 4928 <test_sort_find+0x1030>
    48b8:	bl	0 <puts>
    48bc:	mvn	r3, #0
    48c0:	str	r3, [sp, #24]
    48c4:	b	43fc <test_sort_find+0xb04>
    48c8:	.word	0x0000054c
    48cc:	.word	0x00000674
    48d0:	.word	0x00000430
    48d4:	.word	0x00000d48
    48d8:	.word	0x00000000
    48dc:	.word	0x000013f8
    48e0:	.word	0x534e4f4d
    48e4:	.word	0x000004ec
    48e8:	.word	0x0000047b
    48ec:	.word	0x00000c90
    48f0:	.word	0x00001410
    48f4:	.word	0x00001608
    48f8:	.word	0x00000244
    48fc:	.word	0x000002bb
    4900:	.word	0x00000024
    4904:	.word	0x00000164
    4908:	.word	0x0000152c
    490c:	.word	0x000001e4
    4910:	.word	0x000002b5
    4914:	.word	0x0000012c
    4918:	.word	0x00001558
    491c:	.word	0x00001560
    4920:	.word	0x00001594
    4924:	.word	0x0000159c
    4928:	.word	0x000015c8
    492c:	.word	0x000015c0
    4930:	.word	0x00001620
    4934:	.word	0x000013f0
    4938:	.word	0x000015d8
    493c:	.word	0x00000d74
    4940:	.word	0x000015f4
    4944:	.word	0x000015ec
    4948:	.word	0x00000cf0
    494c:	.word	0x0000141c
    4950:	.word	0x000014e4
    4954:	.word	0x000014a4
    4958:	.word	0x000014c4
    495c:	.word	0x00001444
    4960:	.word	0x00001464
    4964:	.word	0x00001484
    4968:	ldr	r2, [r4, r8, lsl #2]
    496c:	add	r8, r4, r8, lsl #2
    4970:	adds	r3, r8, r2
    4974:	beq	4410 <test_sort_find+0xb18>
    4978:	ldr	r2, [r8, r2]
    497c:	sub	r2, r3, r2
    4980:	ldrh	r1, [r2]
    4984:	cmp	r1, #11
    4988:	bls	40e8 <test_sort_find+0x7f0>
    498c:	ldrh	r2, [r2, #10]
    4990:	cmp	r2, #0
    4994:	beq	40e8 <test_sort_find+0x7f0>
    4998:	ldr	r0, [r3, r2]
    499c:	add	r3, r3, r2
    49a0:	add	r0, r0, #4
    49a4:	add	r0, r3, r0
    49a8:	ldr	r1, [pc, #-132]	; 492c <test_sort_find+0x1034>
    49ac:	bl	0 <strcmp>
    49b0:	cmp	r0, #0
    49b4:	bne	47e4 <test_sort_find+0xeec>
    49b8:	ldr	r0, [pc, #-144]	; 4930 <test_sort_find+0x1038>
    49bc:	bl	0 <puts>
    49c0:	mvn	r3, #0
    49c4:	str	r3, [sp, #24]
    49c8:	b	43fc <test_sort_find+0xb04>
    49cc:	ldr	r2, [r4, r5, lsl #2]
    49d0:	add	r1, r4, r5, lsl #2
    49d4:	adds	r3, r1, r2
    49d8:	beq	4410 <test_sort_find+0xb18>
    49dc:	ldr	r2, [r1, r2]
    49e0:	sub	r2, r3, r2
    49e4:	ldrh	r1, [r2]
    49e8:	cmp	r1, #11
    49ec:	bls	40e8 <test_sort_find+0x7f0>
    49f0:	ldrh	r2, [r2, #10]
    49f4:	cmp	r2, #0
    49f8:	beq	40e8 <test_sort_find+0x7f0>
    49fc:	ldr	r0, [r3, r2]
    4a00:	add	r3, r3, r2
    4a04:	add	r0, r0, #4
    4a08:	add	r0, r3, r0
    4a0c:	ldr	r1, [pc, #-224]	; 4934 <test_sort_find+0x103c>
    4a10:	bl	0 <strcmp>
    4a14:	cmp	r5, #0
    4a18:	cmpeq	r0, #0
    4a1c:	movne	r5, #1
    4a20:	moveq	r5, #0
    4a24:	ldreq	r6, [pc, #-240]	; 493c <test_sort_find+0x1044>
    4a28:	moveq	r7, #4
    4a2c:	bne	48b4 <test_sort_find+0xfbc>
    4a30:	sub	r8, r7, r5
    4a34:	add	r8, r5, r8, lsr #1
    4a38:	cmp	r8, #4
    4a3c:	add	r2, r4, r8, lsl #2
    4a40:	bhi	4414 <test_sort_find+0xb1c>
    4a44:	ldr	r3, [r4, r8, lsl #2]
    4a48:	adds	r1, r2, r3
    4a4c:	beq	4410 <test_sort_find+0xb18>
    4a50:	ldr	r2, [r2, r3]
    4a54:	sub	r2, r1, r2
    4a58:	ldrh	r3, [r2]
    4a5c:	cmp	r3, #11
    4a60:	bhi	4a70 <test_sort_find+0x1178>
    4a64:	b	40e8 <test_sort_find+0x7f0>
    4a68:	mov	r7, r8
    4a6c:	mov	r8, r3
    4a70:	ldrh	r0, [r2, #10]
    4a74:	cmp	r0, #0
    4a78:	beq	40e8 <test_sort_find+0x7f0>
    4a7c:	ldr	r3, [r1, r0]
    4a80:	add	r0, r1, r0
    4a84:	add	r3, r3, #4
    4a88:	add	r0, r0, r3
    4a8c:	mov	r1, r6
    4a90:	bl	0 <strcmp>
    4a94:	cmp	r0, #0
    4a98:	blt	4adc <test_sort_find+0x11e4>
    4a9c:	cmp	r8, r5
    4aa0:	bls	4aec <test_sort_find+0x11f4>
    4aa4:	sub	r3, r8, r5
    4aa8:	add	r3, r5, r3, lsr #1
    4aac:	cmp	r3, #4
    4ab0:	add	r0, r4, r3, lsl #2
    4ab4:	bhi	4414 <test_sort_find+0xb1c>
    4ab8:	ldr	r2, [r4, r3, lsl #2]
    4abc:	adds	r1, r0, r2
    4ac0:	beq	4410 <test_sort_find+0xb18>
    4ac4:	ldr	r2, [r0, r2]
    4ac8:	sub	r2, r1, r2
    4acc:	ldrh	r0, [r2]
    4ad0:	cmp	r0, #11
    4ad4:	bls	40e8 <test_sort_find+0x7f0>
    4ad8:	b	4a68 <test_sort_find+0x1170>
    4adc:	add	r5, r8, #1
    4ae0:	cmp	r7, r5
    4ae4:	bhi	4a30 <test_sort_find+0x1138>
    4ae8:	mov	r8, r7
    4aec:	cmp	r8, r5
    4af0:	beq	4b18 <test_sort_find+0x1220>
    4af4:	mvn	r8, #0
    4af8:	ldr	r0, [pc, #-456]	; 4938 <test_sort_find+0x1040>
    4afc:	bl	0 <puts>
    4b00:	mov	r1, r8
    4b04:	ldr	r0, [pc, #-456]	; 4944 <test_sort_find+0x104c>
    4b08:	bl	0 <printf>
    4b0c:	mvn	r3, #0
    4b10:	str	r3, [sp, #24]
    4b14:	b	43fc <test_sort_find+0xb04>
    4b18:	ldr	r2, [r4, r8, lsl #2]
    4b1c:	add	r1, r4, r8, lsl #2
    4b20:	adds	r3, r1, r2
    4b24:	beq	4410 <test_sort_find+0xb18>
    4b28:	ldr	r2, [r1, r2]
    4b2c:	sub	r2, r3, r2
    4b30:	ldrh	r1, [r2]
    4b34:	cmp	r1, #11
    4b38:	bls	40e8 <test_sort_find+0x7f0>
    4b3c:	ldrh	r2, [r2, #10]
    4b40:	cmp	r2, #0
    4b44:	beq	40e8 <test_sort_find+0x7f0>
    4b48:	ldr	r0, [r3, r2]
    4b4c:	add	r3, r3, r2
    4b50:	add	r0, r0, #4
    4b54:	add	r0, r3, r0
    4b58:	ldr	r1, [pc, #-548]	; 493c <test_sort_find+0x1044>
    4b5c:	bl	0 <strcmp>
    4b60:	cmp	r0, #0
    4b64:	bne	4af4 <test_sort_find+0x11fc>
    4b68:	cmp	r8, #1
    4b6c:	bne	4af8 <test_sort_find+0x1200>
    4b70:	ldr	r5, [pc, #-560]	; 4948 <test_sort_find+0x1050>
    4b74:	mov	r7, r0
    4b78:	mov	r6, #4
    4b7c:	sub	r8, r6, r7
    4b80:	add	r8, r7, r8, lsr #1
    4b84:	cmp	r8, #4
    4b88:	add	r2, r4, r8, lsl #2
    4b8c:	bhi	4414 <test_sort_find+0xb1c>
    4b90:	ldr	r3, [r4, r8, lsl #2]
    4b94:	adds	r1, r2, r3
    4b98:	beq	4410 <test_sort_find+0xb18>
    4b9c:	ldr	r2, [r2, r3]
    4ba0:	sub	r2, r1, r2
    4ba4:	ldrh	r3, [r2]
    4ba8:	cmp	r3, #11
    4bac:	bhi	4bb8 <test_sort_find+0x12c0>
    4bb0:	b	40e8 <test_sort_find+0x7f0>
    4bb4:	mov	r8, r3
    4bb8:	ldrh	r0, [r2, #10]
    4bbc:	cmp	r0, #0
    4bc0:	beq	40e8 <test_sort_find+0x7f0>
    4bc4:	ldr	r3, [r1, r0]
    4bc8:	add	r0, r1, r0
    4bcc:	add	r3, r3, #4
    4bd0:	add	r0, r0, r3
    4bd4:	mov	r1, r5
    4bd8:	bl	0 <strcmp>
    4bdc:	cmp	r0, #0
    4be0:	blt	4c28 <test_sort_find+0x1330>
    4be4:	cmp	r7, r8
    4be8:	bcs	4c68 <test_sort_find+0x1370>
    4bec:	sub	r3, r8, r7
    4bf0:	add	r3, r7, r3, lsr #1
    4bf4:	cmp	r3, #4
    4bf8:	add	r0, r4, r3, lsl #2
    4bfc:	bhi	4414 <test_sort_find+0xb1c>
    4c00:	ldr	r2, [r4, r3, lsl #2]
    4c04:	adds	r1, r0, r2
    4c08:	beq	4410 <test_sort_find+0xb18>
    4c0c:	ldr	r2, [r0, r2]
    4c10:	mov	r6, r8
    4c14:	sub	r2, r1, r2
    4c18:	ldrh	r0, [r2]
    4c1c:	cmp	r0, #11
    4c20:	bls	40e8 <test_sort_find+0x7f0>
    4c24:	b	4bb4 <test_sort_find+0x12bc>
    4c28:	add	r7, r8, #1
    4c2c:	cmp	r6, r7
    4c30:	bhi	4b7c <test_sort_find+0x1284>
    4c34:	str	r6, [sp, #4]
    4c38:	ldr	r3, [sp, #4]
    4c3c:	cmp	r3, r7
    4c40:	beq	4c70 <test_sort_find+0x1378>
    4c44:	mvn	r4, #0
    4c48:	ldr	r0, [pc, #-784]	; 4940 <test_sort_find+0x1048>
    4c4c:	bl	0 <puts>
    4c50:	mov	r1, r4
    4c54:	ldr	r0, [pc, #-792]	; 4944 <test_sort_find+0x104c>
    4c58:	bl	0 <printf>
    4c5c:	mvn	r3, #0
    4c60:	str	r3, [sp, #24]
    4c64:	b	43fc <test_sort_find+0xb04>
    4c68:	str	r8, [sp, #4]
    4c6c:	b	4c38 <test_sort_find+0x1340>
    4c70:	ldr	r2, [r4, r3, lsl #2]
    4c74:	add	r1, r4, r3, lsl #2
    4c78:	adds	r3, r1, r2
    4c7c:	beq	4410 <test_sort_find+0xb18>
    4c80:	ldr	r2, [r1, r2]
    4c84:	sub	r2, r3, r2
    4c88:	ldrh	r1, [r2]
    4c8c:	cmp	r1, #11
    4c90:	bls	40e8 <test_sort_find+0x7f0>
    4c94:	ldrh	r2, [r2, #10]
    4c98:	cmp	r2, #0
    4c9c:	beq	40e8 <test_sort_find+0x7f0>
    4ca0:	ldr	r0, [r3, r2]
    4ca4:	add	r3, r3, r2
    4ca8:	add	r0, r0, #4
    4cac:	add	r0, r3, r0
    4cb0:	ldr	r1, [pc, #-880]	; 4948 <test_sort_find+0x1050>
    4cb4:	bl	0 <strcmp>
    4cb8:	subs	r3, r0, #0
    4cbc:	str	r3, [sp, #24]
    4cc0:	bne	4c44 <test_sort_find+0x134c>
    4cc4:	ldr	r3, [sp, #4]
    4cc8:	cmp	r3, #4
    4ccc:	movne	r4, r3
    4cd0:	bne	4c48 <test_sort_find+0x1350>
    4cd4:	ldr	r3, [sp, #4]
    4cd8:	str	r3, [sp, #8]
    4cdc:	mov	r3, #2
    4ce0:	str	r3, [sp, #12]
    4ce4:	b	4de0 <test_sort_find+0x14e8>
    4ce8:	ldr	r6, [sp, #4]
    4cec:	lsl	sl, r5, #2
    4cf0:	cmp	r5, r7
    4cf4:	add	r2, r4, sl
    4cf8:	bcs	4414 <test_sort_find+0xb1c>
    4cfc:	ldr	r8, [r4, r5, lsl #2]
    4d00:	adds	r3, r2, r8
    4d04:	beq	4410 <test_sort_find+0xb18>
    4d08:	ldr	r2, [r2, r8]
    4d0c:	sub	r2, r3, r2
    4d10:	ldrh	r1, [r2]
    4d14:	cmp	r1, #11
    4d18:	bls	40e8 <test_sort_find+0x7f0>
    4d1c:	ldrh	r2, [r2, #10]
    4d20:	cmp	r2, #0
    4d24:	beq	40e8 <test_sort_find+0x7f0>
    4d28:	ldr	r0, [r3, r2]
    4d2c:	lsl	fp, r6, #2
    4d30:	add	r3, r3, r2
    4d34:	add	r0, r0, #4
    4d38:	cmp	r6, r7
    4d3c:	add	r0, r3, r0
    4d40:	add	r3, r4, fp
    4d44:	bcs	4414 <test_sort_find+0xb1c>
    4d48:	ldr	r7, [r4, r6, lsl #2]
    4d4c:	adds	r1, r3, r7
    4d50:	beq	4410 <test_sort_find+0xb18>
    4d54:	ldr	r3, [r3, r7]
    4d58:	sub	r3, r1, r3
    4d5c:	ldrh	r2, [r3]
    4d60:	cmp	r2, #11
    4d64:	bls	40e8 <test_sort_find+0x7f0>
    4d68:	ldrh	r2, [r3, #10]
    4d6c:	cmp	r2, #0
    4d70:	beq	40e8 <test_sort_find+0x7f0>
    4d74:	ldr	r3, [r1, r2]
    4d78:	add	r1, r1, r2
    4d7c:	add	r3, r3, #4
    4d80:	adds	r1, r1, r3
    4d84:	beq	4f10 <test_sort_find+0x1618>
    4d88:	cmp	r0, #0
    4d8c:	ldr	r3, [r1, #-4]
    4d90:	beq	4f20 <test_sort_find+0x1628>
    4d94:	ldr	r9, [r0, #-4]
    4d98:	str	r3, [sp]
    4d9c:	cmp	r3, r9
    4da0:	movcc	r2, r3
    4da4:	movcs	r2, r9
    4da8:	bl	0 <strncmp>
    4dac:	ldr	r3, [sp]
    4db0:	cmp	r0, #0
    4db4:	bne	4ed4 <test_sort_find+0x15dc>
    4db8:	cmp	r3, r9
    4dbc:	bhi	4ed8 <test_sort_find+0x15e0>
    4dc0:	ldr	r3, [sp, #12]
    4dc4:	sub	r3, r3, #1
    4dc8:	str	r3, [sp, #12]
    4dcc:	cmn	r3, #1
    4dd0:	ldr	r3, [sp, #8]
    4dd4:	sub	r3, r3, #2
    4dd8:	str	r3, [sp, #8]
    4ddc:	beq	4f40 <test_sort_find+0x1648>
    4de0:	ldr	r3, [sp, #8]
    4de4:	cmp	r3, #4
    4de8:	bhi	4dc0 <test_sort_find+0x14c8>
    4dec:	ldr	r5, [sp, #12]
    4df0:	ldr	r9, [sp, #8]
    4df4:	cmp	r9, #4
    4df8:	ldr	r7, [r4, #-4]
    4dfc:	beq	4ce8 <test_sort_find+0x13f0>
    4e00:	lsl	r3, r9, #2
    4e04:	cmp	r9, r7
    4e08:	add	r0, r4, r3
    4e0c:	bcs	4414 <test_sort_find+0xb1c>
    4e10:	ldr	r1, [r4, r9, lsl #2]
    4e14:	adds	r2, r0, r1
    4e18:	beq	4410 <test_sort_find+0xb18>
    4e1c:	ldr	r1, [r0, r1]
    4e20:	sub	r1, r2, r1
    4e24:	ldrh	r0, [r1]
    4e28:	cmp	r0, #11
    4e2c:	bls	40e8 <test_sort_find+0x7f0>
    4e30:	ldrh	r1, [r1, #10]
    4e34:	cmp	r1, #0
    4e38:	beq	40e8 <test_sort_find+0x7f0>
    4e3c:	ldr	r0, [r2, r1]
    4e40:	add	r6, r9, #1
    4e44:	add	r2, r2, r1
    4e48:	add	r3, r3, #4
    4e4c:	add	r0, r0, #4
    4e50:	cmp	r7, r6
    4e54:	add	r0, r2, r0
    4e58:	add	r2, r4, r3
    4e5c:	bls	4414 <test_sort_find+0xb1c>
    4e60:	ldr	r3, [r4, r3]
    4e64:	adds	r1, r2, r3
    4e68:	beq	4410 <test_sort_find+0xb18>
    4e6c:	ldr	r3, [r2, r3]
    4e70:	sub	r3, r1, r3
    4e74:	ldrh	r2, [r3]
    4e78:	cmp	r2, #11
    4e7c:	bls	40e8 <test_sort_find+0x7f0>
    4e80:	ldrh	r2, [r3, #10]
    4e84:	cmp	r2, #0
    4e88:	beq	40e8 <test_sort_find+0x7f0>
    4e8c:	ldr	r3, [r1, r2]
    4e90:	add	r1, r1, r2
    4e94:	add	r3, r3, #4
    4e98:	adds	r1, r1, r3
    4e9c:	beq	4f28 <test_sort_find+0x1630>
    4ea0:	cmp	r0, #0
    4ea4:	ldr	sl, [r1, #-4]
    4ea8:	beq	4f38 <test_sort_find+0x1640>
    4eac:	ldr	r8, [r0, #-4]
    4eb0:	cmp	sl, r8
    4eb4:	movcc	r2, sl
    4eb8:	movcs	r2, r8
    4ebc:	bl	0 <strncmp>
    4ec0:	cmp	r0, #0
    4ec4:	bne	4f04 <test_sort_find+0x160c>
    4ec8:	cmp	sl, r8
    4ecc:	movls	r6, r9
    4ed0:	b	4cec <test_sort_find+0x13f4>
    4ed4:	bge	4dc0 <test_sort_find+0x14c8>
    4ed8:	sub	r5, r5, r6
    4edc:	lsl	r9, r6, #1
    4ee0:	lsl	r5, r5, #2
    4ee4:	sub	r7, r7, r5
    4ee8:	add	r8, r8, r5
    4eec:	cmp	r9, #4
    4ef0:	str	r7, [r4, sl]
    4ef4:	mov	r5, r6
    4ef8:	str	r8, [r4, fp]
    4efc:	bls	4df4 <test_sort_find+0x14fc>
    4f00:	b	4dc0 <test_sort_find+0x14c8>
    4f04:	blt	4cec <test_sort_find+0x13f4>
    4f08:	mov	r6, r9
    4f0c:	b	4cec <test_sort_find+0x13f4>
    4f10:	cmp	r0, #0
    4f14:	beq	4dc0 <test_sort_find+0x14c8>
    4f18:	mov	r3, #0
    4f1c:	b	4d94 <test_sort_find+0x149c>
    4f20:	mov	r9, #0
    4f24:	b	4db8 <test_sort_find+0x14c0>
    4f28:	cmp	r0, #0
    4f2c:	movne	sl, #0
    4f30:	bne	4eac <test_sort_find+0x15b4>
    4f34:	b	4f08 <test_sort_find+0x1610>
    4f38:	mov	r8, #0
    4f3c:	b	4ec8 <test_sort_find+0x15d0>
    4f40:	add	r3, r4, #20
    4f44:	str	r3, [sp, #12]
    4f48:	add	r3, r4, #4
    4f4c:	str	r3, [sp, #16]
    4f50:	mvn	r3, #15
    4f54:	str	r3, [sp, #8]
    4f58:	b	5054 <test_sort_find+0x175c>
    4f5c:	ldr	r7, [r4, #-4]
    4f60:	mov	r6, r9
    4f64:	lsl	fp, r5, #2
    4f68:	cmp	r5, r7
    4f6c:	add	r2, r4, fp
    4f70:	bcs	4414 <test_sort_find+0xb1c>
    4f74:	ldr	r8, [r4, r5, lsl #2]
    4f78:	adds	r3, r2, r8
    4f7c:	beq	4410 <test_sort_find+0xb18>
    4f80:	ldr	r2, [r2, r8]
    4f84:	sub	r2, r3, r2
    4f88:	ldrh	r1, [r2]
    4f8c:	cmp	r1, #11
    4f90:	bls	40e8 <test_sort_find+0x7f0>
    4f94:	ldrh	r0, [r2, #10]
    4f98:	cmp	r0, #0
    4f9c:	beq	40e8 <test_sort_find+0x7f0>
    4fa0:	ldr	r2, [r3, r0]
    4fa4:	cmp	r7, r6
    4fa8:	add	r2, r2, #4
    4fac:	add	r0, r3, r0
    4fb0:	lsl	r3, r6, #2
    4fb4:	add	r0, r0, r2
    4fb8:	add	r2, r4, r3
    4fbc:	bls	4414 <test_sort_find+0xb1c>
    4fc0:	ldr	r7, [r4, r6, lsl #2]
    4fc4:	adds	r1, r2, r7
    4fc8:	beq	4410 <test_sort_find+0xb18>
    4fcc:	ldr	r2, [r2, r7]
    4fd0:	sub	r2, r1, r2
    4fd4:	ldrh	ip, [r2]
    4fd8:	cmp	ip, #11
    4fdc:	bls	40e8 <test_sort_find+0x7f0>
    4fe0:	ldrh	ip, [r2, #10]
    4fe4:	cmp	ip, #0
    4fe8:	beq	40e8 <test_sort_find+0x7f0>
    4fec:	ldr	r2, [r1, ip]
    4ff0:	add	r1, r1, ip
    4ff4:	add	r2, r2, #4
    4ff8:	adds	r1, r1, r2
    4ffc:	beq	51b4 <test_sort_find+0x18bc>
    5000:	cmp	r0, #0
    5004:	ldr	sl, [r1, #-4]
    5008:	beq	51c4 <test_sort_find+0x18cc>
    500c:	ldr	r9, [r0, #-4]
    5010:	str	r3, [sp]
    5014:	cmp	sl, r9
    5018:	movcc	r2, sl
    501c:	movcs	r2, r9
    5020:	bl	0 <strncmp>
    5024:	ldr	r3, [sp]
    5028:	cmp	r0, #0
    502c:	bne	5174 <test_sort_find+0x187c>
    5030:	cmp	sl, r9
    5034:	bhi	5178 <test_sort_find+0x1880>
    5038:	ldr	r3, [sp, #12]
    503c:	ldr	r2, [sp, #16]
    5040:	cmp	r3, r2
    5044:	ldr	r3, [sp, #8]
    5048:	add	r3, r3, #4
    504c:	str	r3, [sp, #8]
    5050:	beq	43fc <test_sort_find+0xb04>
    5054:	ldr	r1, [sp, #12]
    5058:	ldr	r0, [sp, #4]
    505c:	ldr	r3, [r4]
    5060:	sub	r0, r0, #1
    5064:	ldr	r2, [r1, #-4]
    5068:	str	r0, [sp, #4]
    506c:	ldr	r0, [sp, #8]
    5070:	mov	r5, #0
    5074:	sub	r2, r2, r0
    5078:	str	r2, [r4]
    507c:	mov	r9, r5
    5080:	mov	r2, r1
    5084:	add	r3, r0, r3
    5088:	str	r3, [r2, #-4]!
    508c:	str	r2, [sp, #12]
    5090:	ldr	r3, [sp, #4]
    5094:	cmp	r9, r3
    5098:	bcs	4f5c <test_sort_find+0x1664>
    509c:	ldr	r7, [r4, #-4]
    50a0:	lsl	r3, r9, #2
    50a4:	cmp	r9, r7
    50a8:	add	r0, r4, r3
    50ac:	bcs	4414 <test_sort_find+0xb1c>
    50b0:	ldr	r1, [r4, r9, lsl #2]
    50b4:	adds	r2, r0, r1
    50b8:	beq	4410 <test_sort_find+0xb18>
    50bc:	ldr	r1, [r0, r1]
    50c0:	sub	r1, r2, r1
    50c4:	ldrh	r0, [r1]
    50c8:	cmp	r0, #11
    50cc:	bls	40e8 <test_sort_find+0x7f0>
    50d0:	ldrh	r1, [r1, #10]
    50d4:	cmp	r1, #0
    50d8:	beq	40e8 <test_sort_find+0x7f0>
    50dc:	ldr	r0, [r2, r1]
    50e0:	add	r6, r9, #1
    50e4:	add	r2, r2, r1
    50e8:	add	r3, r3, #4
    50ec:	add	r0, r0, #4
    50f0:	cmp	r7, r6
    50f4:	add	r0, r2, r0
    50f8:	add	r1, r4, r3
    50fc:	bls	4414 <test_sort_find+0xb1c>
    5100:	ldr	r2, [r4, r3]
    5104:	adds	r3, r1, r2
    5108:	beq	4410 <test_sort_find+0xb18>
    510c:	ldr	r2, [r1, r2]
    5110:	sub	r2, r3, r2
    5114:	ldrh	r1, [r2]
    5118:	cmp	r1, #11
    511c:	bls	40e8 <test_sort_find+0x7f0>
    5120:	ldrh	r2, [r2, #10]
    5124:	cmp	r2, #0
    5128:	beq	40e8 <test_sort_find+0x7f0>
    512c:	ldr	r1, [r3, r2]
    5130:	add	r3, r3, r2
    5134:	add	r1, r1, #4
    5138:	adds	r1, r3, r1
    513c:	beq	51cc <test_sort_find+0x18d4>
    5140:	cmp	r0, #0
    5144:	ldr	sl, [r1, #-4]
    5148:	beq	51dc <test_sort_find+0x18e4>
    514c:	ldr	r8, [r0, #-4]
    5150:	cmp	r8, sl
    5154:	movcc	r2, r8
    5158:	movcs	r2, sl
    515c:	bl	0 <strncmp>
    5160:	cmp	r0, #0
    5164:	bne	51a8 <test_sort_find+0x18b0>
    5168:	cmp	sl, r8
    516c:	movls	r6, r9
    5170:	b	4f64 <test_sort_find+0x166c>
    5174:	bge	5038 <test_sort_find+0x1740>
    5178:	sub	r5, r5, r6
    517c:	ldr	r2, [sp, #4]
    5180:	lsl	r5, r5, #2
    5184:	lsl	r9, r6, #1
    5188:	sub	r7, r7, r5
    518c:	add	r8, r8, r5
    5190:	cmp	r2, r9
    5194:	str	r7, [r4, fp]
    5198:	mov	r5, r6
    519c:	str	r8, [r4, r3]
    51a0:	bcs	5090 <test_sort_find+0x1798>
    51a4:	b	5038 <test_sort_find+0x1740>
    51a8:	blt	4f64 <test_sort_find+0x166c>
    51ac:	mov	r6, r9
    51b0:	b	4f64 <test_sort_find+0x166c>
    51b4:	cmp	r0, #0
    51b8:	beq	5038 <test_sort_find+0x1740>
    51bc:	mov	sl, #0
    51c0:	b	500c <test_sort_find+0x1714>
    51c4:	mov	r9, #0
    51c8:	b	5030 <test_sort_find+0x1738>
    51cc:	cmp	r0, #0
    51d0:	movne	sl, #0
    51d4:	bne	514c <test_sort_find+0x1854>
    51d8:	b	51ac <test_sort_find+0x18b4>
    51dc:	mov	r8, #0
    51e0:	b	5168 <test_sort_find+0x1870>
    51e4:	ldr	r0, [pc, #-2208]	; 494c <test_sort_find+0x1054>
    51e8:	bl	0 <puts>
    51ec:	mvn	r3, #0
    51f0:	str	r3, [sp, #24]
    51f4:	b	43fc <test_sort_find+0xb04>
    51f8:	ldr	r0, [pc, #-2224]	; 4950 <test_sort_find+0x1058>
    51fc:	bl	0 <puts>
    5200:	mvn	r3, #0
    5204:	str	r3, [sp, #24]
    5208:	b	43fc <test_sort_find+0xb04>
    520c:	ldr	r0, [pc, #-2240]	; 4954 <test_sort_find+0x105c>
    5210:	bl	0 <puts>
    5214:	mvn	r3, #0
    5218:	str	r3, [sp, #24]
    521c:	b	43fc <test_sort_find+0xb04>
    5220:	ldr	r0, [pc, #-2256]	; 4958 <test_sort_find+0x1060>
    5224:	bl	0 <puts>
    5228:	mvn	r3, #0
    522c:	str	r3, [sp, #24]
    5230:	b	43fc <test_sort_find+0xb04>
    5234:	ldr	r0, [pc, #-2272]	; 495c <test_sort_find+0x1064>
    5238:	bl	0 <puts>
    523c:	mvn	r3, #0
    5240:	str	r3, [sp, #24]
    5244:	b	43fc <test_sort_find+0xb04>
    5248:	ldr	r0, [pc, #-2288]	; 4960 <test_sort_find+0x1068>
    524c:	bl	0 <puts>
    5250:	mvn	r3, #0
    5254:	str	r3, [sp, #24]
    5258:	b	43fc <test_sort_find+0xb04>
    525c:	ldr	r0, [pc, #-2304]	; 4964 <test_sort_find+0x106c>
    5260:	bl	0 <puts>
    5264:	mvn	r3, #0
    5268:	str	r3, [sp, #24]
    526c:	b	43fc <test_sort_find+0xb04>
    5270:	bl	540 <MyGame_Example_TestJSONPrefixParsing_verify_table+0x1c>

00005274 <test_scan>:
    5274:	ldr	r3, [pc, #4060]	; 6258 <test_scan+0xfe4>
    5278:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    527c:	mov	r4, r0
    5280:	ldm	r3, {r0, r1}
    5284:	sub	sp, sp, #84	; 0x54
    5288:	lsr	r3, r1, #16
    528c:	str	r0, [sp, #72]	; 0x48
    5290:	mov	r0, r4
    5294:	strh	r1, [sp, #76]	; 0x4c
    5298:	strb	r3, [sp, #78]	; 0x4e
    529c:	bl	0 <flatcc_builder_reset>
    52a0:	mov	r3, #0
    52a4:	mov	r0, r4
    52a8:	mov	r2, r3
    52ac:	ldr	r1, [pc, #4008]	; 625c <test_scan+0xfe8>
    52b0:	bl	0 <flatcc_builder_start_buffer>
    52b4:	cmp	r0, #0
    52b8:	bne	52c8 <test_scan+0x54>
    52bc:	mov	r1, #36	; 0x24
    52c0:	mov	r0, r4
    52c4:	bl	0 <flatcc_builder_start_table>
    52c8:	ldr	r1, [pc, #3984]	; 6260 <test_scan+0xfec>
    52cc:	mov	r0, r4
    52d0:	bl	0 <flatcc_builder_create_string_str>
    52d4:	subs	r5, r0, #0
    52d8:	beq	52f0 <test_scan+0x7c>
    52dc:	mov	r1, #3
    52e0:	mov	r0, r4
    52e4:	bl	0 <flatcc_builder_table_add_offset>
    52e8:	cmp	r0, #0
    52ec:	strne	r5, [r0]
    52f0:	mvn	r2, #0
    52f4:	mov	r3, #1
    52f8:	str	r2, [sp, #4]
    52fc:	str	r3, [sp]
    5300:	mov	r2, #7
    5304:	add	r1, sp, #72	; 0x48
    5308:	mov	r0, r4
    530c:	bl	0 <flatcc_builder_create_vector>
    5310:	subs	r5, r0, #0
    5314:	beq	532c <test_scan+0xb8>
    5318:	mov	r1, #5
    531c:	mov	r0, r4
    5320:	bl	0 <flatcc_builder_table_add_offset>
    5324:	cmp	r0, #0
    5328:	strne	r5, [r0]
    532c:	mov	r0, r4
    5330:	bl	0 <flatcc_builder_start_offset_vector>
    5334:	mov	r0, r4
    5338:	bl	0 <flatcc_builder_end_offset_vector>
    533c:	subs	r5, r0, #0
    5340:	beq	5358 <test_scan+0xe4>
    5344:	mov	r1, #10
    5348:	mov	r0, r4
    534c:	bl	0 <flatcc_builder_table_add_offset>
    5350:	cmp	r0, #0
    5354:	strne	r5, [r0]
    5358:	mov	r0, r4
    535c:	bl	0 <flatcc_builder_start_offset_vector>
    5360:	mov	r1, #36	; 0x24
    5364:	mov	r0, r4
    5368:	bl	0 <flatcc_builder_start_table>
    536c:	ldr	r1, [pc, #3824]	; 6264 <test_scan+0xff0>
    5370:	mov	r0, r4
    5374:	bl	0 <flatcc_builder_create_string_str>
    5378:	subs	r5, r0, #0
    537c:	beq	5394 <test_scan+0x120>
    5380:	mov	r1, #3
    5384:	mov	r0, r4
    5388:	bl	0 <flatcc_builder_table_add_offset>
    538c:	cmp	r0, #0
    5390:	strne	r5, [r0]
    5394:	ldr	r5, [pc, #3788]	; 6268 <test_scan+0xff4>
    5398:	mov	r2, #1
    539c:	add	r1, r5, #12
    53a0:	mov	r0, r4
    53a4:	bl	0 <flatcc_builder_check_required>
    53a8:	cmp	r0, #0
    53ac:	beq	699c <test_scan+0x1728>
    53b0:	mov	r0, r4
    53b4:	bl	0 <flatcc_builder_end_table>
    53b8:	subs	r1, r0, #0
    53bc:	beq	53c8 <test_scan+0x154>
    53c0:	mov	r0, r4
    53c4:	bl	0 <flatcc_builder_offset_vector_push>
    53c8:	mov	r1, #36	; 0x24
    53cc:	mov	r0, r4
    53d0:	bl	0 <flatcc_builder_start_table>
    53d4:	ldr	r1, [pc, #3728]	; 626c <test_scan+0xff8>
    53d8:	mov	r0, r4
    53dc:	bl	0 <flatcc_builder_create_string_str>
    53e0:	subs	r6, r0, #0
    53e4:	beq	53fc <test_scan+0x188>
    53e8:	mov	r1, #3
    53ec:	mov	r0, r4
    53f0:	bl	0 <flatcc_builder_table_add_offset>
    53f4:	cmp	r0, #0
    53f8:	strne	r6, [r0]
    53fc:	mov	r2, #1
    5400:	add	r1, r5, #12
    5404:	mov	r0, r4
    5408:	bl	0 <flatcc_builder_check_required>
    540c:	cmp	r0, #0
    5410:	beq	699c <test_scan+0x1728>
    5414:	mov	r0, r4
    5418:	bl	0 <flatcc_builder_end_table>
    541c:	subs	r1, r0, #0
    5420:	beq	542c <test_scan+0x1b8>
    5424:	mov	r0, r4
    5428:	bl	0 <flatcc_builder_offset_vector_push>
    542c:	mov	r1, #36	; 0x24
    5430:	mov	r0, r4
    5434:	bl	0 <flatcc_builder_start_table>
    5438:	ldr	r1, [pc, #3632]	; 6270 <test_scan+0xffc>
    543c:	mov	r0, r4
    5440:	bl	0 <flatcc_builder_create_string_str>
    5444:	subs	r6, r0, #0
    5448:	beq	5460 <test_scan+0x1ec>
    544c:	mov	r1, #3
    5450:	mov	r0, r4
    5454:	bl	0 <flatcc_builder_table_add_offset>
    5458:	cmp	r0, #0
    545c:	strne	r6, [r0]
    5460:	mov	r2, #1
    5464:	add	r1, r5, #12
    5468:	mov	r0, r4
    546c:	bl	0 <flatcc_builder_check_required>
    5470:	cmp	r0, #0
    5474:	beq	699c <test_scan+0x1728>
    5478:	mov	r0, r4
    547c:	bl	0 <flatcc_builder_end_table>
    5480:	subs	r1, r0, #0
    5484:	beq	5490 <test_scan+0x21c>
    5488:	mov	r0, r4
    548c:	bl	0 <flatcc_builder_offset_vector_push>
    5490:	mov	r1, #36	; 0x24
    5494:	mov	r0, r4
    5498:	bl	0 <flatcc_builder_start_table>
    549c:	ldr	r1, [pc, #3536]	; 6274 <test_scan+0x1000>
    54a0:	mov	r0, r4
    54a4:	bl	0 <flatcc_builder_create_string_str>
    54a8:	subs	r6, r0, #0
    54ac:	beq	54c4 <test_scan+0x250>
    54b0:	mov	r1, #3
    54b4:	mov	r0, r4
    54b8:	bl	0 <flatcc_builder_table_add_offset>
    54bc:	cmp	r0, #0
    54c0:	strne	r6, [r0]
    54c4:	mov	r2, #1
    54c8:	add	r1, r5, #12
    54cc:	mov	r0, r4
    54d0:	bl	0 <flatcc_builder_check_required>
    54d4:	cmp	r0, #0
    54d8:	beq	699c <test_scan+0x1728>
    54dc:	mov	r0, r4
    54e0:	bl	0 <flatcc_builder_end_table>
    54e4:	subs	r1, r0, #0
    54e8:	beq	54f4 <test_scan+0x280>
    54ec:	mov	r0, r4
    54f0:	bl	0 <flatcc_builder_offset_vector_push>
    54f4:	mov	r1, #36	; 0x24
    54f8:	mov	r0, r4
    54fc:	bl	0 <flatcc_builder_start_table>
    5500:	ldr	r1, [pc, #3432]	; 6270 <test_scan+0xffc>
    5504:	mov	r0, r4
    5508:	bl	0 <flatcc_builder_create_string_str>
    550c:	subs	r6, r0, #0
    5510:	beq	5528 <test_scan+0x2b4>
    5514:	mov	r1, #3
    5518:	mov	r0, r4
    551c:	bl	0 <flatcc_builder_table_add_offset>
    5520:	cmp	r0, #0
    5524:	strne	r6, [r0]
    5528:	mov	r2, #1
    552c:	add	r1, r5, #12
    5530:	mov	r0, r4
    5534:	bl	0 <flatcc_builder_check_required>
    5538:	cmp	r0, #0
    553c:	beq	699c <test_scan+0x1728>
    5540:	mov	r0, r4
    5544:	bl	0 <flatcc_builder_end_table>
    5548:	subs	r1, r0, #0
    554c:	beq	5558 <test_scan+0x2e4>
    5550:	mov	r0, r4
    5554:	bl	0 <flatcc_builder_offset_vector_push>
    5558:	mov	r0, r4
    555c:	bl	0 <flatcc_builder_end_offset_vector>
    5560:	subs	r6, r0, #0
    5564:	beq	557c <test_scan+0x308>
    5568:	mov	r1, #11
    556c:	mov	r0, r4
    5570:	bl	0 <flatcc_builder_table_add_offset>
    5574:	cmp	r0, #0
    5578:	strne	r6, [r0]
    557c:	add	r1, r5, #12
    5580:	mov	r2, #1
    5584:	mov	r0, r4
    5588:	bl	0 <flatcc_builder_check_required>
    558c:	cmp	r0, #0
    5590:	beq	699c <test_scan+0x1728>
    5594:	mov	r0, r4
    5598:	bl	0 <flatcc_builder_end_table>
    559c:	mov	r1, r0
    55a0:	mov	r0, r4
    55a4:	bl	0 <flatcc_builder_end_buffer>
    55a8:	mov	r0, r4
    55ac:	add	r1, sp, #68	; 0x44
    55b0:	bl	0 <flatcc_builder_finalize_aligned_buffer>
    55b4:	subs	r3, r0, #0
    55b8:	mov	r2, r3
    55bc:	str	r3, [sp, #12]
    55c0:	beq	55d4 <test_scan+0x360>
    55c4:	ldr	r3, [pc, #3244]	; 6278 <test_scan+0x1004>
    55c8:	ldr	r2, [r2, #4]
    55cc:	cmp	r2, r3
    55d0:	beq	55d8 <test_scan+0x364>
    55d4:	bl	1a8 <elapsed_realtime+0x44>
    55d8:	ldr	r3, [sp, #12]
    55dc:	ldr	r2, [r3]
    55e0:	adds	r3, r3, r2
    55e4:	beq	55d4 <test_scan+0x360>
    55e8:	ldr	r1, [sp, #12]
    55ec:	ldr	r1, [r1, r2]
    55f0:	sub	r1, r3, r1
    55f4:	ldrh	r2, [r1]
    55f8:	cmp	r2, #27
    55fc:	bhi	5614 <test_scan+0x3a0>
    5600:	ldr	r3, [pc, #3408]	; 6358 <test_scan+0x10e4>
    5604:	ldr	r2, [pc, #3184]	; 627c <test_scan+0x1008>
    5608:	ldr	r1, [pc, #3392]	; 6350 <test_scan+0x10dc>
    560c:	ldr	r0, [pc, #3180]	; 6280 <test_scan+0x100c>
    5610:	bl	0 <__assert_fail>
    5614:	ldrh	r2, [r1, #26]
    5618:	cmp	r2, #0
    561c:	beq	5600 <test_scan+0x38c>
    5620:	ldr	r0, [r3, r2]
    5624:	add	r2, r3, r2
    5628:	add	r0, r0, #4
    562c:	adds	r5, r2, r0
    5630:	beq	5600 <test_scan+0x38c>
    5634:	ldrh	fp, [r1, #14]
    5638:	cmp	fp, #0
    563c:	beq	69a8 <test_scan+0x1734>
    5640:	ldr	ip, [r3, fp]
    5644:	add	lr, r3, fp
    5648:	add	ip, ip, #4
    564c:	str	ip, [sp, #48]	; 0x30
    5650:	adds	ip, lr, ip
    5654:	str	lr, [sp, #44]	; 0x2c
    5658:	str	ip, [sp, #36]	; 0x24
    565c:	beq	69a8 <test_scan+0x1734>
    5660:	ldrh	r1, [r1, #24]
    5664:	cmp	r1, #0
    5668:	beq	69bc <test_scan+0x1748>
    566c:	ldr	r8, [r3, r1]
    5670:	add	r3, r3, r1
    5674:	add	r8, r8, #4
    5678:	adds	r3, r3, r8
    567c:	str	r3, [sp, #40]	; 0x28
    5680:	beq	69bc <test_scan+0x1748>
    5684:	ldr	r6, [r5, #-4]
    5688:	cmp	r6, #0
    568c:	beq	6174 <test_scan+0xf00>
    5690:	ldr	r3, [r2, r0]
    5694:	adds	fp, r5, r3
    5698:	beq	61a4 <test_scan+0xf30>
    569c:	ldr	r3, [r5, r3]
    56a0:	sub	r3, fp, r3
    56a4:	str	r3, [sp, #32]
    56a8:	ldrh	r2, [r3]
    56ac:	cmp	r2, #11
    56b0:	str	r2, [sp, #28]
    56b4:	bhi	56cc <test_scan+0x458>
    56b8:	ldr	r3, [pc, #3012]	; 6284 <test_scan+0x1010>
    56bc:	ldr	r2, [pc, #3012]	; 6288 <test_scan+0x1014>
    56c0:	ldr	r1, [pc, #3144]	; 6310 <test_scan+0x109c>
    56c4:	ldr	r0, [pc, #3008]	; 628c <test_scan+0x1018>
    56c8:	bl	0 <__assert_fail>
    56cc:	ldrh	r8, [r3, #10]
    56d0:	cmp	r8, #0
    56d4:	beq	56b8 <test_scan+0x444>
    56d8:	add	r3, r5, #4
    56dc:	ldr	r4, [pc, #2952]	; 626c <test_scan+0xff8>
    56e0:	mov	r9, r3
    56e4:	mov	r0, r8
    56e8:	mov	r2, fp
    56ec:	mov	r7, #0
    56f0:	str	r3, [sp, #16]
    56f4:	str	r3, [sp, #52]	; 0x34
    56f8:	ldr	r3, [r2, r0]
    56fc:	add	r0, r2, r0
    5700:	add	r3, r3, #4
    5704:	add	r0, r0, r3
    5708:	mov	r1, r4
    570c:	bl	0 <strcmp>
    5710:	cmp	r0, #0
    5714:	beq	575c <test_scan+0x4e8>
    5718:	add	r7, r7, #1
    571c:	cmp	r7, r6
    5720:	beq	6174 <test_scan+0xf00>
    5724:	mov	r3, r9
    5728:	add	r9, r9, #4
    572c:	ldr	r1, [r3]
    5730:	adds	r2, r3, r1
    5734:	beq	61a4 <test_scan+0xf30>
    5738:	ldr	r3, [r3, r1]
    573c:	sub	r3, r2, r3
    5740:	ldrh	r1, [r3]
    5744:	cmp	r1, #11
    5748:	bls	56b8 <test_scan+0x444>
    574c:	ldrh	r0, [r3, #10]
    5750:	cmp	r0, #0
    5754:	bne	56f8 <test_scan+0x484>
    5758:	b	56b8 <test_scan+0x444>
    575c:	cmp	r7, #1
    5760:	bne	6174 <test_scan+0xf00>
    5764:	sub	r3, r6, #-1073741823	; 0xc0000001
    5768:	sub	r2, r6, #1
    576c:	add	r3, r5, r3, lsl #2
    5770:	str	r2, [sp, #20]
    5774:	str	r3, [sp, #24]
    5778:	ldr	r7, [pc, #2796]	; 626c <test_scan+0xff8>
    577c:	mov	sl, r3
    5780:	mov	r9, r2
    5784:	b	57ec <test_scan+0x578>
    5788:	cmp	r6, r9
    578c:	mov	r3, sl
    5790:	bls	6468 <test_scan+0x11f4>
    5794:	ldr	r2, [sl]
    5798:	sub	sl, sl, #4
    579c:	adds	r0, r3, r2
    57a0:	beq	61a4 <test_scan+0xf30>
    57a4:	ldr	r3, [r3, r2]
    57a8:	sub	r3, r0, r3
    57ac:	ldrh	r2, [r3]
    57b0:	cmp	r2, #11
    57b4:	bls	56b8 <test_scan+0x444>
    57b8:	ldrh	r2, [r3, #10]
    57bc:	cmp	r2, #0
    57c0:	beq	56b8 <test_scan+0x444>
    57c4:	ldr	r3, [r0, r2]
    57c8:	add	r0, r0, r2
    57cc:	add	r3, r3, #4
    57d0:	add	r0, r0, r3
    57d4:	mov	r1, r7
    57d8:	bl	0 <strcmp>
    57dc:	sub	r3, r9, #1
    57e0:	cmp	r0, #0
    57e4:	beq	5804 <test_scan+0x590>
    57e8:	mov	r9, r3
    57ec:	cmn	r9, #1
    57f0:	bne	5788 <test_scan+0x514>
    57f4:	ldr	r0, [pc, #2708]	; 6290 <test_scan+0x101c>
    57f8:	bl	0 <puts>
    57fc:	mvn	r6, #0
    5800:	b	5aa0 <test_scan+0x82c>
    5804:	cmp	r9, #1
    5808:	bne	57f4 <test_scan+0x580>
    580c:	ldr	r9, [pc, #2688]	; 6294 <test_scan+0x1020>
    5810:	ldr	sl, [sp, #16]
    5814:	mov	r4, r0
    5818:	mov	r1, fp
    581c:	mov	r0, r8
    5820:	ldr	r3, [r1, r0]
    5824:	add	r0, r1, r0
    5828:	add	r3, r3, #4
    582c:	adds	r0, r0, r3
    5830:	beq	586c <test_scan+0x5f8>
    5834:	ldr	r7, [r0, #-4]
    5838:	mov	r1, r9
    583c:	cmp	r7, #5
    5840:	movcc	r2, r7
    5844:	movcs	r2, #5
    5848:	bl	0 <strncmp>
    584c:	cmp	r7, #4
    5850:	clz	r0, r0
    5854:	lsr	r0, r0, #5
    5858:	movls	r0, #0
    585c:	cmp	r0, #0
    5860:	beq	586c <test_scan+0x5f8>
    5864:	cmp	r7, #5
    5868:	bls	58b0 <test_scan+0x63c>
    586c:	add	r4, r4, #1
    5870:	cmp	r4, r6
    5874:	beq	595c <test_scan+0x6e8>
    5878:	mov	r3, sl
    587c:	add	sl, sl, #4
    5880:	ldr	r2, [r3]
    5884:	adds	r1, r3, r2
    5888:	beq	61a4 <test_scan+0xf30>
    588c:	ldr	r3, [r3, r2]
    5890:	sub	r3, r1, r3
    5894:	ldrh	r2, [r3]
    5898:	cmp	r2, #11
    589c:	bls	56b8 <test_scan+0x444>
    58a0:	ldrh	r0, [r3, #10]
    58a4:	cmp	r0, #0
    58a8:	bne	5820 <test_scan+0x5ac>
    58ac:	b	56b8 <test_scan+0x444>
    58b0:	cmp	r4, #1
    58b4:	bne	595c <test_scan+0x6e8>
    58b8:	ldr	sl, [sp, #24]
    58bc:	ldr	r4, [sp, #20]
    58c0:	ldr	r9, [pc, #2508]	; 6294 <test_scan+0x1020>
    58c4:	cmp	r4, r6
    58c8:	mov	r3, sl
    58cc:	bcs	6468 <test_scan+0x11f4>
    58d0:	ldr	r2, [sl]
    58d4:	sub	sl, sl, #4
    58d8:	adds	r0, r3, r2
    58dc:	beq	61a4 <test_scan+0xf30>
    58e0:	ldr	r3, [r3, r2]
    58e4:	sub	r3, r0, r3
    58e8:	ldrh	r2, [r3]
    58ec:	cmp	r2, #11
    58f0:	bls	56b8 <test_scan+0x444>
    58f4:	ldrh	r2, [r3, #10]
    58f8:	cmp	r2, #0
    58fc:	beq	56b8 <test_scan+0x444>
    5900:	ldr	r3, [r0, r2]
    5904:	add	r0, r0, r2
    5908:	add	r3, r3, #4
    590c:	adds	r0, r0, r3
    5910:	beq	5950 <test_scan+0x6dc>
    5914:	ldr	r7, [r0, #-4]
    5918:	mov	r1, r9
    591c:	cmp	r7, #5
    5920:	movcc	r2, r7
    5924:	movcs	r2, #5
    5928:	bl	0 <strncmp>
    592c:	cmp	r7, #4
    5930:	movls	r3, #0
    5934:	movhi	r3, #1
    5938:	cmp	r0, #0
    593c:	movne	r3, #0
    5940:	cmp	r3, #0
    5944:	beq	5950 <test_scan+0x6dc>
    5948:	cmp	r7, #5
    594c:	bls	596c <test_scan+0x6f8>
    5950:	cmp	r4, #0
    5954:	sub	r4, r4, #1
    5958:	bne	58c4 <test_scan+0x650>
    595c:	ldr	r0, [pc, #2356]	; 6298 <test_scan+0x1024>
    5960:	bl	0 <puts>
    5964:	mvn	r6, #0
    5968:	b	5aa0 <test_scan+0x82c>
    596c:	cmp	r4, #1
    5970:	bne	595c <test_scan+0x6e8>
    5974:	cmp	r6, #2
    5978:	bls	5a1c <test_scan+0x7a8>
    597c:	ldr	r3, [r5, #8]
    5980:	add	r3, r3, #8
    5984:	adds	r2, r5, r3
    5988:	beq	61a4 <test_scan+0xf30>
    598c:	ldr	r3, [r5, r3]
    5990:	sub	r3, r2, r3
    5994:	ldrh	r1, [r3]
    5998:	cmp	r1, #11
    599c:	bls	56b8 <test_scan+0x444>
    59a0:	ldrh	r0, [r3, #10]
    59a4:	cmp	r0, #0
    59a8:	beq	56b8 <test_scan+0x444>
    59ac:	ldr	r4, [pc, #2232]	; 626c <test_scan+0xff8>
    59b0:	add	r9, r5, #12
    59b4:	mov	r7, #2
    59b8:	ldr	r3, [r2, r0]
    59bc:	add	r0, r2, r0
    59c0:	add	r3, r3, #4
    59c4:	add	r0, r0, r3
    59c8:	mov	r1, r4
    59cc:	bl	0 <strcmp>
    59d0:	cmp	r0, #0
    59d4:	beq	5ce8 <test_scan+0xa74>
    59d8:	add	r7, r7, #1
    59dc:	cmp	r7, r6
    59e0:	beq	5a1c <test_scan+0x7a8>
    59e4:	mov	r3, r9
    59e8:	add	r9, r9, #4
    59ec:	ldr	r1, [r3]
    59f0:	adds	r2, r3, r1
    59f4:	beq	61a4 <test_scan+0xf30>
    59f8:	ldr	r3, [r3, r1]
    59fc:	sub	r3, r2, r3
    5a00:	ldrh	r1, [r3]
    5a04:	cmp	r1, #11
    5a08:	bls	56b8 <test_scan+0x444>
    5a0c:	ldrh	r0, [r3, #10]
    5a10:	cmp	r0, #0
    5a14:	bne	59b8 <test_scan+0x744>
    5a18:	b	56b8 <test_scan+0x444>
    5a1c:	ldr	r9, [sp, #16]
    5a20:	ldr	r7, [pc, #2164]	; 629c <test_scan+0x1028>
    5a24:	mov	r0, r8
    5a28:	mov	r2, fp
    5a2c:	mov	r4, #0
    5a30:	ldr	r3, [r2, r0]
    5a34:	add	r0, r2, r0
    5a38:	add	r3, r3, #4
    5a3c:	add	r0, r0, r3
    5a40:	mov	r1, r7
    5a44:	bl	0 <strcmp>
    5a48:	cmp	r0, #0
    5a4c:	beq	5a94 <test_scan+0x820>
    5a50:	add	r4, r4, #1
    5a54:	cmp	r4, r6
    5a58:	beq	5ab4 <test_scan+0x840>
    5a5c:	mov	r3, r9
    5a60:	add	r9, r9, #4
    5a64:	ldr	r1, [r3]
    5a68:	adds	r2, r3, r1
    5a6c:	beq	61a4 <test_scan+0xf30>
    5a70:	ldr	r3, [r3, r1]
    5a74:	sub	r3, r2, r3
    5a78:	ldrh	r1, [r3]
    5a7c:	cmp	r1, #11
    5a80:	bls	56b8 <test_scan+0x444>
    5a84:	ldrh	r0, [r3, #10]
    5a88:	cmp	r0, #0
    5a8c:	bne	5a30 <test_scan+0x7bc>
    5a90:	b	56b8 <test_scan+0x444>
    5a94:	ldr	r0, [pc, #2052]	; 62a0 <test_scan+0x102c>
    5a98:	bl	0 <puts>
    5a9c:	mvn	r6, #0
    5aa0:	ldr	r0, [sp, #12]
    5aa4:	bl	0 <flatcc_builder_aligned_free>
    5aa8:	mov	r0, r6
    5aac:	add	sp, sp, #84	; 0x54
    5ab0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5ab4:	ldr	r9, [sp, #16]
    5ab8:	ldr	r6, [pc, #1956]	; 6264 <test_scan+0xff0>
    5abc:	mov	r0, r8
    5ac0:	mov	r2, fp
    5ac4:	mov	r7, #0
    5ac8:	ldr	r3, [r2, r0]
    5acc:	add	r0, r2, r0
    5ad0:	add	r3, r3, #4
    5ad4:	add	r0, r0, r3
    5ad8:	mov	r1, r6
    5adc:	bl	0 <strcmp>
    5ae0:	cmp	r0, #0
    5ae4:	beq	5b2c <test_scan+0x8b8>
    5ae8:	add	r7, r7, #1
    5aec:	cmp	r4, r7
    5af0:	beq	61d8 <test_scan+0xf64>
    5af4:	mov	r3, r9
    5af8:	add	r9, r9, #4
    5afc:	ldr	r1, [r3]
    5b00:	adds	r2, r3, r1
    5b04:	beq	61a4 <test_scan+0xf30>
    5b08:	ldr	r3, [r3, r1]
    5b0c:	sub	r3, r2, r3
    5b10:	ldrh	r1, [r3]
    5b14:	cmp	r1, #11
    5b18:	bls	56b8 <test_scan+0x444>
    5b1c:	ldrh	r0, [r3, #10]
    5b20:	cmp	r0, #0
    5b24:	bne	5ac8 <test_scan+0x854>
    5b28:	b	56b8 <test_scan+0x444>
    5b2c:	cmp	r7, #0
    5b30:	bne	61d8 <test_scan+0xf64>
    5b34:	ldr	r6, [pc, #1844]	; 6270 <test_scan+0xffc>
    5b38:	ldr	r9, [sp, #16]
    5b3c:	mov	r0, fp
    5b40:	ldr	r3, [r0, r8]
    5b44:	add	r0, r0, r8
    5b48:	add	r3, r3, #4
    5b4c:	add	r0, r0, r3
    5b50:	mov	r1, r6
    5b54:	bl	0 <strcmp>
    5b58:	cmp	r0, #0
    5b5c:	beq	5ba4 <test_scan+0x930>
    5b60:	add	r7, r7, #1
    5b64:	cmp	r4, r7
    5b68:	bls	5c20 <test_scan+0x9ac>
    5b6c:	mov	r3, r9
    5b70:	add	r9, r9, #4
    5b74:	ldr	r2, [r3]
    5b78:	adds	r0, r3, r2
    5b7c:	beq	61a4 <test_scan+0xf30>
    5b80:	ldr	r3, [r3, r2]
    5b84:	sub	r3, r0, r3
    5b88:	ldrh	r2, [r3]
    5b8c:	cmp	r2, #11
    5b90:	bls	56b8 <test_scan+0x444>
    5b94:	ldrh	r8, [r3, #10]
    5b98:	cmp	r8, #0
    5b9c:	bne	5b40 <test_scan+0x8cc>
    5ba0:	b	56b8 <test_scan+0x444>
    5ba4:	cmp	r7, #2
    5ba8:	bne	5c20 <test_scan+0x9ac>
    5bac:	ldr	r9, [sp, #24]
    5bb0:	ldr	r8, [sp, #20]
    5bb4:	ldr	r7, [pc, #1716]	; 6270 <test_scan+0xffc>
    5bb8:	cmp	r4, r8
    5bbc:	mov	r3, r9
    5bc0:	bls	6948 <test_scan+0x16d4>
    5bc4:	ldr	r2, [r9]
    5bc8:	sub	r9, r9, #4
    5bcc:	adds	r0, r3, r2
    5bd0:	beq	61a4 <test_scan+0xf30>
    5bd4:	ldr	r3, [r3, r2]
    5bd8:	sub	r3, r0, r3
    5bdc:	ldrh	r2, [r3]
    5be0:	cmp	r2, #11
    5be4:	bls	56b8 <test_scan+0x444>
    5be8:	ldrh	r2, [r3, #10]
    5bec:	cmp	r2, #0
    5bf0:	beq	56b8 <test_scan+0x444>
    5bf4:	ldr	r3, [r0, r2]
    5bf8:	add	r0, r0, r2
    5bfc:	add	r3, r3, #4
    5c00:	add	r0, r0, r3
    5c04:	mov	r1, r7
    5c08:	bl	0 <strcmp>
    5c0c:	cmp	r0, #0
    5c10:	beq	5c30 <test_scan+0x9bc>
    5c14:	cmp	r8, #0
    5c18:	sub	r8, r8, #1
    5c1c:	bne	5bb8 <test_scan+0x944>
    5c20:	ldr	r0, [pc, #1660]	; 62a4 <test_scan+0x1030>
    5c24:	bl	0 <puts>
    5c28:	mvn	r6, #0
    5c2c:	b	5aa0 <test_scan+0x82c>
    5c30:	cmp	r8, #4
    5c34:	mov	r6, r0
    5c38:	bne	5c20 <test_scan+0x9ac>
    5c3c:	ldr	r9, [pc, #1636]	; 62a8 <test_scan+0x1034>
    5c40:	ldr	sl, [sp, #24]
    5c44:	ldr	r7, [sp, #20]
    5c48:	cmp	r7, r4
    5c4c:	mov	r3, sl
    5c50:	bcs	6948 <test_scan+0x16d4>
    5c54:	ldr	r2, [sl]
    5c58:	sub	sl, sl, #4
    5c5c:	adds	r0, r3, r2
    5c60:	beq	61a4 <test_scan+0xf30>
    5c64:	ldr	r3, [r3, r2]
    5c68:	sub	r3, r0, r3
    5c6c:	ldrh	r2, [r3]
    5c70:	cmp	r2, #11
    5c74:	bls	56b8 <test_scan+0x444>
    5c78:	ldrh	r2, [r3, #10]
    5c7c:	cmp	r2, #0
    5c80:	beq	56b8 <test_scan+0x444>
    5c84:	ldr	r3, [r0, r2]
    5c88:	add	r0, r0, r2
    5c8c:	add	r3, r3, #4
    5c90:	adds	r0, r0, r3
    5c94:	beq	5cd0 <test_scan+0xa5c>
    5c98:	ldr	r8, [r0, #-4]
    5c9c:	mov	r1, r9
    5ca0:	cmp	r8, #8
    5ca4:	movcc	r2, r8
    5ca8:	movcs	r2, #8
    5cac:	bl	0 <strncmp>
    5cb0:	cmp	r8, #7
    5cb4:	clz	r0, r0
    5cb8:	lsr	r0, r0, #5
    5cbc:	movls	r0, #0
    5cc0:	cmp	r0, #0
    5cc4:	beq	5cd0 <test_scan+0xa5c>
    5cc8:	cmp	r8, #8
    5ccc:	bls	5cf8 <test_scan+0xa84>
    5cd0:	subs	r7, r7, #1
    5cd4:	bcs	5c48 <test_scan+0x9d4>
    5cd8:	ldr	r0, [pc, #1484]	; 62ac <test_scan+0x1038>
    5cdc:	bl	0 <puts>
    5ce0:	mvn	r6, #0
    5ce4:	b	5aa0 <test_scan+0x82c>
    5ce8:	ldr	r0, [pc, #1472]	; 62b0 <test_scan+0x103c>
    5cec:	bl	0 <puts>
    5cf0:	mvn	r6, #0
    5cf4:	b	5aa0 <test_scan+0x82c>
    5cf8:	cmp	r7, #4
    5cfc:	bne	5cd8 <test_scan+0xa64>
    5d00:	cmp	r4, #3
    5d04:	movcc	r7, r4
    5d08:	movcs	r7, #3
    5d0c:	sub	sl, r7, #-1073741823	; 0xc0000001
    5d10:	ldr	r9, [pc, #1424]	; 62a8 <test_scan+0x1034>
    5d14:	add	sl, r5, sl, lsl #2
    5d18:	cmp	r7, #1
    5d1c:	sub	r7, r7, #1
    5d20:	beq	5cd8 <test_scan+0xa64>
    5d24:	cmp	r4, r7
    5d28:	mov	r3, sl
    5d2c:	bls	6948 <test_scan+0x16d4>
    5d30:	ldr	r2, [sl]
    5d34:	sub	sl, sl, #4
    5d38:	adds	r0, r3, r2
    5d3c:	beq	61a4 <test_scan+0xf30>
    5d40:	ldr	r3, [r3, r2]
    5d44:	sub	r3, r0, r3
    5d48:	ldrh	r2, [r3]
    5d4c:	cmp	r2, #11
    5d50:	bls	56b8 <test_scan+0x444>
    5d54:	ldrh	r2, [r3, #10]
    5d58:	cmp	r2, #0
    5d5c:	beq	56b8 <test_scan+0x444>
    5d60:	ldr	r3, [r0, r2]
    5d64:	add	r0, r0, r2
    5d68:	add	r3, r3, #4
    5d6c:	adds	r0, r0, r3
    5d70:	beq	5d18 <test_scan+0xaa4>
    5d74:	ldr	r8, [r0, #-4]
    5d78:	mov	r1, r9
    5d7c:	cmp	r8, #8
    5d80:	movcc	r2, r8
    5d84:	movcs	r2, #8
    5d88:	bl	0 <strncmp>
    5d8c:	cmp	r8, #7
    5d90:	clz	r0, r0
    5d94:	lsr	r0, r0, #5
    5d98:	movls	r0, #0
    5d9c:	cmp	r0, #0
    5da0:	beq	5d18 <test_scan+0xaa4>
    5da4:	cmp	r8, #8
    5da8:	bhi	5d18 <test_scan+0xaa4>
    5dac:	cmp	r7, #2
    5db0:	bne	5cd8 <test_scan+0xa64>
    5db4:	mov	r1, r7
    5db8:	ldr	r3, [pc, #1200]	; 6270 <test_scan+0xffc>
    5dbc:	mvn	r2, #0
    5dc0:	mov	r0, r5
    5dc4:	bl	104c <MyGame_Example_Monster_vec_scan_ex_by_name>
    5dc8:	cmp	r0, #2
    5dcc:	mov	r8, r0
    5dd0:	bne	6184 <test_scan+0xf10>
    5dd4:	cmp	r4, #2
    5dd8:	beq	6184 <test_scan+0xf10>
    5ddc:	ldr	r3, [r5, #8]
    5de0:	add	r3, r3, #8
    5de4:	adds	r1, r5, r3
    5de8:	beq	61a4 <test_scan+0xf30>
    5dec:	ldr	r3, [r5, r3]
    5df0:	sub	r3, r1, r3
    5df4:	ldrh	r2, [r3]
    5df8:	cmp	r2, #11
    5dfc:	bls	56b8 <test_scan+0x444>
    5e00:	ldrh	r3, [r3, #10]
    5e04:	cmp	r3, #0
    5e08:	beq	56b8 <test_scan+0x444>
    5e0c:	ldr	r9, [pc, #1172]	; 62a8 <test_scan+0x1034>
    5e10:	add	sl, r5, #12
    5e14:	mov	r0, r3
    5e18:	ldr	r3, [r1, r0]
    5e1c:	add	r0, r1, r0
    5e20:	add	r3, r3, #4
    5e24:	adds	r0, r0, r3
    5e28:	beq	5e68 <test_scan+0xbf4>
    5e2c:	ldr	r7, [r0, #-4]
    5e30:	mov	r1, r9
    5e34:	cmp	r7, #8
    5e38:	movcc	r2, r7
    5e3c:	movcs	r2, #8
    5e40:	bl	0 <strncmp>
    5e44:	cmp	r7, #7
    5e48:	movls	r3, #0
    5e4c:	movhi	r3, #1
    5e50:	cmp	r0, #0
    5e54:	movne	r3, #0
    5e58:	cmp	r3, #0
    5e5c:	beq	5e68 <test_scan+0xbf4>
    5e60:	cmp	r7, #8
    5e64:	bls	5eac <test_scan+0xc38>
    5e68:	add	r8, r8, #1
    5e6c:	cmp	r4, r8
    5e70:	beq	6184 <test_scan+0xf10>
    5e74:	mov	r3, sl
    5e78:	add	sl, sl, #4
    5e7c:	ldr	r2, [r3]
    5e80:	adds	r1, r3, r2
    5e84:	beq	61a4 <test_scan+0xf30>
    5e88:	ldr	r3, [r3, r2]
    5e8c:	sub	r3, r1, r3
    5e90:	ldrh	r2, [r3]
    5e94:	cmp	r2, #11
    5e98:	bls	56b8 <test_scan+0x444>
    5e9c:	ldrh	r0, [r3, #10]
    5ea0:	cmp	r0, #0
    5ea4:	bne	5e18 <test_scan+0xba4>
    5ea8:	b	56b8 <test_scan+0x444>
    5eac:	cmp	r8, #2
    5eb0:	bne	6184 <test_scan+0xf10>
    5eb4:	ldr	r3, [pc, #948]	; 6270 <test_scan+0xffc>
    5eb8:	mvn	r2, #0
    5ebc:	mov	r1, #3
    5ec0:	mov	r0, r5
    5ec4:	bl	104c <MyGame_Example_Monster_vec_scan_ex_by_name>
    5ec8:	cmp	r0, #4
    5ecc:	mov	r7, r0
    5ed0:	bne	61a8 <test_scan+0xf34>
    5ed4:	ldr	r3, [pc, #960]	; 629c <test_scan+0x1028>
    5ed8:	mov	r2, #3
    5edc:	mov	r1, #1
    5ee0:	mov	r0, r5
    5ee4:	bl	104c <MyGame_Example_Monster_vec_scan_ex_by_name>
    5ee8:	cmn	r0, #1
    5eec:	mov	r8, r0
    5ef0:	bne	61b8 <test_scan+0xf44>
    5ef4:	ldr	r3, [pc, #872]	; 6264 <test_scan+0xff0>
    5ef8:	mov	r2, #3
    5efc:	mov	r1, #1
    5f00:	mov	r0, r5
    5f04:	bl	104c <MyGame_Example_Monster_vec_scan_ex_by_name>
    5f08:	cmn	r0, #1
    5f0c:	mov	r9, r0
    5f10:	bne	61c8 <test_scan+0xf54>
    5f14:	ldr	r3, [pc, #848]	; 626c <test_scan+0xff8>
    5f18:	mov	r2, #3
    5f1c:	mov	r1, #1
    5f20:	mov	r0, r5
    5f24:	bl	104c <MyGame_Example_Monster_vec_scan_ex_by_name>
    5f28:	cmp	r0, #1
    5f2c:	mov	r8, r0
    5f30:	bne	61e8 <test_scan+0xf74>
    5f34:	mov	r1, r0
    5f38:	ldr	r3, [pc, #816]	; 6270 <test_scan+0xffc>
    5f3c:	mov	r2, #3
    5f40:	mov	r0, r5
    5f44:	bl	104c <MyGame_Example_Monster_vec_scan_ex_by_name>
    5f48:	cmp	r0, #2
    5f4c:	bne	61f8 <test_scan+0xf84>
    5f50:	mov	r1, r8
    5f54:	ldr	r3, [pc, #792]	; 6274 <test_scan+0x1000>
    5f58:	mov	r2, #3
    5f5c:	mov	r0, r5
    5f60:	bl	104c <MyGame_Example_Monster_vec_scan_ex_by_name>
    5f64:	cmn	r0, #1
    5f68:	bne	6208 <test_scan+0xf94>
    5f6c:	ldr	r3, [pc, #808]	; 629c <test_scan+0x1028>
    5f70:	mov	r2, #3
    5f74:	mov	r1, #1
    5f78:	mov	r0, r5
    5f7c:	bl	1144 <MyGame_Example_Monster_vec_rscan_ex_by_name>
    5f80:	cmn	r0, #1
    5f84:	mov	r8, r0
    5f88:	bne	6218 <test_scan+0xfa4>
    5f8c:	ldr	r3, [pc, #720]	; 6264 <test_scan+0xff0>
    5f90:	mov	r2, #3
    5f94:	mov	r1, #1
    5f98:	mov	r0, r5
    5f9c:	bl	1144 <MyGame_Example_Monster_vec_rscan_ex_by_name>
    5fa0:	cmn	r0, #1
    5fa4:	mov	r9, r0
    5fa8:	bne	6228 <test_scan+0xfb4>
    5fac:	ldr	r3, [pc, #696]	; 626c <test_scan+0xff8>
    5fb0:	mov	r2, #3
    5fb4:	mov	r1, #1
    5fb8:	mov	r0, r5
    5fbc:	bl	1144 <MyGame_Example_Monster_vec_rscan_ex_by_name>
    5fc0:	cmp	r0, #1
    5fc4:	mov	r8, r0
    5fc8:	bne	6458 <test_scan+0x11e4>
    5fcc:	mov	r1, r0
    5fd0:	ldr	r3, [pc, #664]	; 6270 <test_scan+0xffc>
    5fd4:	mov	r2, #3
    5fd8:	mov	r0, r5
    5fdc:	bl	1144 <MyGame_Example_Monster_vec_rscan_ex_by_name>
    5fe0:	cmp	r0, #2
    5fe4:	bne	65c0 <test_scan+0x134c>
    5fe8:	ldr	r3, [pc, #644]	; 6274 <test_scan+0x1000>
    5fec:	mov	r2, #3
    5ff0:	mov	r1, r8
    5ff4:	mov	r0, r5
    5ff8:	bl	1144 <MyGame_Example_Monster_vec_rscan_ex_by_name>
    5ffc:	cmn	r0, #1
    6000:	bne	65b0 <test_scan+0x133c>
    6004:	mov	r2, #0
    6008:	mov	r1, r2
    600c:	ldr	r3, [pc, #592]	; 6264 <test_scan+0xff0>
    6010:	mov	r0, r5
    6014:	bl	104c <MyGame_Example_Monster_vec_scan_ex_by_name>
    6018:	cmn	r0, #1
    601c:	bne	6194 <test_scan+0xf20>
    6020:	mov	r2, #0
    6024:	mov	r1, r2
    6028:	ldr	r3, [pc, #572]	; 626c <test_scan+0xff8>
    602c:	mov	r0, r5
    6030:	bl	104c <MyGame_Example_Monster_vec_scan_ex_by_name>
    6034:	cmn	r0, #1
    6038:	bne	6238 <test_scan+0xfc4>
    603c:	ldr	r3, [pc, #552]	; 626c <test_scan+0xff8>
    6040:	mov	r2, r8
    6044:	mov	r1, r8
    6048:	mov	r0, r5
    604c:	bl	104c <MyGame_Example_Monster_vec_scan_ex_by_name>
    6050:	cmn	r0, #1
    6054:	bne	6448 <test_scan+0x11d4>
    6058:	mov	r2, r0
    605c:	ldr	r3, [pc, #512]	; 6264 <test_scan+0xff0>
    6060:	mov	r1, r4
    6064:	mov	r0, r5
    6068:	bl	104c <MyGame_Example_Monster_vec_scan_ex_by_name>
    606c:	cmn	r0, #1
    6070:	bne	64d0 <test_scan+0x125c>
    6074:	mov	r2, #0
    6078:	mov	r1, r2
    607c:	ldr	r3, [pc, #480]	; 6264 <test_scan+0xff0>
    6080:	mov	r0, r5
    6084:	bl	1144 <MyGame_Example_Monster_vec_rscan_ex_by_name>
    6088:	cmn	r0, #1
    608c:	bne	6194 <test_scan+0xf20>
    6090:	mov	r2, #0
    6094:	mov	r1, r2
    6098:	ldr	r3, [pc, #460]	; 626c <test_scan+0xff8>
    609c:	mov	r0, r5
    60a0:	bl	1144 <MyGame_Example_Monster_vec_rscan_ex_by_name>
    60a4:	cmn	r0, #1
    60a8:	bne	6238 <test_scan+0xfc4>
    60ac:	mov	r2, #1
    60b0:	mov	r1, r2
    60b4:	ldr	r3, [pc, #432]	; 626c <test_scan+0xff8>
    60b8:	mov	r0, r5
    60bc:	bl	1144 <MyGame_Example_Monster_vec_rscan_ex_by_name>
    60c0:	cmn	r0, #1
    60c4:	mov	r2, r0
    60c8:	bne	6448 <test_scan+0x11d4>
    60cc:	ldr	r3, [pc, #400]	; 6264 <test_scan+0xff0>
    60d0:	mov	r1, r4
    60d4:	mov	r0, r5
    60d8:	bl	1144 <MyGame_Example_Monster_vec_rscan_ex_by_name>
    60dc:	cmn	r0, #1
    60e0:	mov	r8, r0
    60e4:	bne	64d0 <test_scan+0x125c>
    60e8:	ldr	r1, [pc, #380]	; 626c <test_scan+0xff8>
    60ec:	mov	r0, r5
    60f0:	bl	e9c <count_monsters>
    60f4:	cmp	r0, #1
    60f8:	bne	695c <test_scan+0x16e8>
    60fc:	ldr	r1, [pc, #408]	; 629c <test_scan+0x1028>
    6100:	mov	r0, r5
    6104:	bl	e9c <count_monsters>
    6108:	subs	r3, r0, #0
    610c:	str	r3, [sp, #56]	; 0x38
    6110:	bne	697c <test_scan+0x1708>
    6114:	ldr	r1, [pc, #328]	; 6264 <test_scan+0xff0>
    6118:	mov	r0, r5
    611c:	bl	e9c <count_monsters>
    6120:	cmp	r0, #1
    6124:	str	r0, [sp, #60]	; 0x3c
    6128:	bne	694c <test_scan+0x16d8>
    612c:	ldr	r1, [pc, #316]	; 6270 <test_scan+0xffc>
    6130:	mov	r0, r5
    6134:	bl	e9c <count_monsters>
    6138:	cmp	r0, #2
    613c:	bne	696c <test_scan+0x16f8>
    6140:	ldr	r3, [sp, #36]	; 0x24
    6144:	ldr	r3, [r3, #-4]
    6148:	cmp	r3, #0
    614c:	beq	6164 <test_scan+0xef0>
    6150:	ldr	r2, [sp, #44]	; 0x2c
    6154:	ldr	r1, [sp, #48]	; 0x30
    6158:	ldrb	r2, [r2, r1]
    615c:	cmp	r2, #6
    6160:	beq	6248 <test_scan+0xfd4>
    6164:	ldr	r0, [pc, #328]	; 62b4 <test_scan+0x1040>
    6168:	bl	0 <puts>
    616c:	mvn	r6, #0
    6170:	b	5aa0 <test_scan+0x82c>
    6174:	ldr	r0, [pc, #316]	; 62b8 <test_scan+0x1044>
    6178:	bl	0 <puts>
    617c:	mvn	r6, #0
    6180:	b	5aa0 <test_scan+0x82c>
    6184:	ldr	r0, [pc, #304]	; 62bc <test_scan+0x1048>
    6188:	bl	0 <puts>
    618c:	mvn	r6, #0
    6190:	b	5aa0 <test_scan+0x82c>
    6194:	ldr	r0, [pc, #292]	; 62c0 <test_scan+0x104c>
    6198:	bl	0 <puts>
    619c:	mvn	r6, #0
    61a0:	b	5aa0 <test_scan+0x82c>
    61a4:	bl	220 <flatbuffers_string_vec_at.part.20+0x1c>
    61a8:	ldr	r0, [pc, #276]	; 62c4 <test_scan+0x1050>
    61ac:	bl	0 <puts>
    61b0:	mvn	r6, #0
    61b4:	b	5aa0 <test_scan+0x82c>
    61b8:	ldr	r0, [pc, #264]	; 62c8 <test_scan+0x1054>
    61bc:	bl	0 <puts>
    61c0:	mvn	r6, #0
    61c4:	b	5aa0 <test_scan+0x82c>
    61c8:	ldr	r0, [pc, #252]	; 62cc <test_scan+0x1058>
    61cc:	mov	r6, r8
    61d0:	bl	0 <puts>
    61d4:	b	5aa0 <test_scan+0x82c>
    61d8:	ldr	r0, [pc, #240]	; 62d0 <test_scan+0x105c>
    61dc:	bl	0 <puts>
    61e0:	mvn	r6, #0
    61e4:	b	5aa0 <test_scan+0x82c>
    61e8:	ldr	r0, [pc, #228]	; 62d4 <test_scan+0x1060>
    61ec:	mov	r6, r9
    61f0:	bl	0 <puts>
    61f4:	b	5aa0 <test_scan+0x82c>
    61f8:	ldr	r0, [pc, #216]	; 62d8 <test_scan+0x1064>
    61fc:	mov	r6, r9
    6200:	bl	0 <puts>
    6204:	b	5aa0 <test_scan+0x82c>
    6208:	ldr	r0, [pc, #204]	; 62dc <test_scan+0x1068>
    620c:	bl	0 <puts>
    6210:	mvn	r6, #0
    6214:	b	5aa0 <test_scan+0x82c>
    6218:	ldr	r0, [pc, #192]	; 62e0 <test_scan+0x106c>
    621c:	bl	0 <puts>
    6220:	mvn	r6, #0
    6224:	b	5aa0 <test_scan+0x82c>
    6228:	ldr	r0, [pc, #180]	; 62e4 <test_scan+0x1070>
    622c:	mov	r6, r8
    6230:	bl	0 <puts>
    6234:	b	5aa0 <test_scan+0x82c>
    6238:	ldr	r0, [pc, #168]	; 62e8 <test_scan+0x1074>
    623c:	bl	0 <puts>
    6240:	mvn	r6, #0
    6244:	b	5aa0 <test_scan+0x82c>
    6248:	ldr	r1, [sp, #36]	; 0x24
    624c:	ldr	r2, [sp, #56]	; 0x38
    6250:	mov	r0, r1
    6254:	b	6368 <test_scan+0x10f4>
    6258:	.word	0x000004fc
    625c:	.word	0x0000054c
    6260:	.word	0x00000674
    6264:	.word	0x00000cf0
    6268:	.word	0x00000430
    626c:	.word	0x00000d48
    6270:	.word	0x00000d74
    6274:	.word	0x000013f0
    6278:	.word	0x534e4f4d
    627c:	.word	0x00000519
    6280:	.word	0x00001410
    6284:	.word	0x00000244
    6288:	.word	0x000002bb
    628c:	.word	0x00000164
    6290:	.word	0x00001664
    6294:	.word	0x00001594
    6298:	.word	0x00001684
    629c:	.word	0x000015c0
    62a0:	.word	0x00001620
    62a4:	.word	0x000015d8
    62a8:	.word	0x000016ac
    62ac:	.word	0x000016b8
    62b0:	.word	0x00001b5c
    62b4:	.word	0x000019bc
    62b8:	.word	0x00001644
    62bc:	.word	0x000016d4
    62c0:	.word	0x000018b4
    62c4:	.word	0x00001700
    62c8:	.word	0x0000171c
    62cc:	.word	0x00001740
    62d0:	.word	0x000015f4
    62d4:	.word	0x00001764
    62d8:	.word	0x00001788
    62dc:	.word	0x000017b0
    62e0:	.word	0x000017dc
    62e4:	.word	0x0000180c
    62e8:	.word	0x000018d4
    62ec:	.word	0x000019e8
    62f0:	.word	0x00001a4c
    62f4:	.word	0x00001b88
    62f8:	.word	0x00001a18
    62fc:	.word	0x000018f4
    6300:	.word	0x00001838
    6304:	.word	0x000001e4
    6308:	.word	0x000002b5
    630c:	.word	0x0000012c
    6310:	.word	0x00000024
    6314:	.word	0x00001a78
    6318:	.word	0x0000191c
    631c:	.word	0x00001ab4
    6320:	.word	0x00001b24
    6324:	.word	0x00001888
    6328:	.word	0x00001860
    632c:	.word	0x00000e6c
    6330:	.word	0x00001980
    6334:	.word	0x00001948
    6338:	.word	0x0000199c
    633c:	.word	0x00001964
    6340:	.word	0x00001af0
    6344:	.word	0x0000051b
    6348:	.word	0x00001638
    634c:	.word	0x0000051d
    6350:	.word	0x00000c90
    6354:	.word	0x0000163c
    6358:	.word	0x00000504
    635c:	ldrb	ip, [r1, #1]!
    6360:	cmp	ip, #1
    6364:	beq	6384 <test_scan+0x1110>
    6368:	add	r2, r2, #1
    636c:	cmp	r2, r3
    6370:	bne	635c <test_scan+0x10e8>
    6374:	ldr	r0, [pc, #-144]	; 62ec <test_scan+0x1078>
    6378:	bl	0 <puts>
    637c:	mvn	r6, #0
    6380:	b	5aa0 <test_scan+0x82c>
    6384:	cmp	r2, #2
    6388:	bne	6374 <test_scan+0x1100>
    638c:	cmp	r3, #3
    6390:	bls	63c8 <test_scan+0x1154>
    6394:	ldr	r2, [sp, #36]	; 0x24
    6398:	ldrb	r2, [r2, #3]
    639c:	cmp	r2, #1
    63a0:	beq	6420 <test_scan+0x11ac>
    63a4:	ldr	r1, [sp, #36]	; 0x24
    63a8:	add	r2, r1, #4
    63ac:	add	ip, r1, r3
    63b0:	b	63c0 <test_scan+0x114c>
    63b4:	ldrb	r1, [r2], #1
    63b8:	cmp	r1, #1
    63bc:	beq	6420 <test_scan+0x11ac>
    63c0:	cmp	r2, ip
    63c4:	bne	63b4 <test_scan+0x1140>
    63c8:	ldr	r1, [sp, #36]	; 0x24
    63cc:	ldr	r2, [sp, #56]	; 0x38
    63d0:	b	63e0 <test_scan+0x116c>
    63d4:	ldrb	ip, [r1, #1]!
    63d8:	cmp	ip, #5
    63dc:	beq	6430 <test_scan+0x11bc>
    63e0:	add	r2, r2, #1
    63e4:	cmp	r2, r3
    63e8:	bne	63d4 <test_scan+0x1160>
    63ec:	ldr	r1, [sp, #36]	; 0x24
    63f0:	ldr	r2, [sp, #56]	; 0x38
    63f4:	b	6404 <test_scan+0x1190>
    63f8:	ldrb	ip, [r1, #1]!
    63fc:	cmp	ip, #2
    6400:	beq	647c <test_scan+0x1208>
    6404:	add	r2, r2, #1
    6408:	cmp	r2, r3
    640c:	bne	63f8 <test_scan+0x1184>
    6410:	ldr	r0, [pc, #-296]	; 62f0 <test_scan+0x107c>
    6414:	bl	0 <puts>
    6418:	mvn	r6, #0
    641c:	b	5aa0 <test_scan+0x82c>
    6420:	ldr	r0, [pc, #-308]	; 62f4 <test_scan+0x1080>
    6424:	bl	0 <puts>
    6428:	mvn	r6, #0
    642c:	b	5aa0 <test_scan+0x82c>
    6430:	cmn	r2, #1
    6434:	beq	63ec <test_scan+0x1178>
    6438:	ldr	r0, [pc, #-328]	; 62f8 <test_scan+0x1084>
    643c:	bl	0 <puts>
    6440:	mvn	r6, #0
    6444:	b	5aa0 <test_scan+0x82c>
    6448:	ldr	r0, [pc, #-340]	; 62fc <test_scan+0x1088>
    644c:	bl	0 <puts>
    6450:	mvn	r6, #0
    6454:	b	5aa0 <test_scan+0x82c>
    6458:	ldr	r0, [pc, #-352]	; 6300 <test_scan+0x108c>
    645c:	mov	r6, r9
    6460:	bl	0 <puts>
    6464:	b	5aa0 <test_scan+0x82c>
    6468:	ldr	r3, [pc, #-364]	; 6304 <test_scan+0x1090>
    646c:	ldr	r2, [pc, #-364]	; 6308 <test_scan+0x1094>
    6470:	ldr	r1, [pc, #-360]	; 6310 <test_scan+0x109c>
    6474:	ldr	r0, [pc, #-368]	; 630c <test_scan+0x1098>
    6478:	bl	0 <__assert_fail>
    647c:	cmp	r2, #6
    6480:	bne	6410 <test_scan+0x119c>
    6484:	ldr	r2, [sp, #56]	; 0x38
    6488:	add	r2, r2, #1
    648c:	cmp	r2, r3
    6490:	beq	6438 <test_scan+0x11c4>
    6494:	ldrb	r1, [r0, #1]!
    6498:	cmp	r1, #3
    649c:	bne	6488 <test_scan+0x1214>
    64a0:	cmp	r2, #3
    64a4:	bne	6438 <test_scan+0x11c4>
    64a8:	cmp	r3, #3
    64ac:	bls	64c0 <test_scan+0x124c>
    64b0:	ldr	r2, [sp, #36]	; 0x24
    64b4:	ldrb	r2, [r2, #3]
    64b8:	cmp	r2, #3
    64bc:	beq	64e0 <test_scan+0x126c>
    64c0:	ldr	r0, [pc, #-436]	; 6314 <test_scan+0x10a0>
    64c4:	bl	0 <puts>
    64c8:	mvn	r6, #0
    64cc:	b	5aa0 <test_scan+0x82c>
    64d0:	ldr	r0, [pc, #-448]	; 6318 <test_scan+0x10a4>
    64d4:	bl	0 <puts>
    64d8:	mvn	r6, #0
    64dc:	b	5aa0 <test_scan+0x82c>
    64e0:	cmp	r3, #4
    64e4:	beq	651c <test_scan+0x12a8>
    64e8:	ldr	r2, [sp, #36]	; 0x24
    64ec:	ldrb	r2, [r2, #4]
    64f0:	cmp	r2, #3
    64f4:	ldrne	r2, [sp, #36]	; 0x24
    64f8:	addne	r2, r2, #4
    64fc:	bne	6510 <test_scan+0x129c>
    6500:	b	651c <test_scan+0x12a8>
    6504:	ldrb	r1, [r2, #1]!
    6508:	cmp	r1, #3
    650c:	beq	652c <test_scan+0x12b8>
    6510:	add	r7, r7, #1
    6514:	cmp	r7, r3
    6518:	bne	6504 <test_scan+0x1290>
    651c:	ldr	r0, [pc, #-520]	; 631c <test_scan+0x10a8>
    6520:	bl	0 <puts>
    6524:	mvn	r6, #0
    6528:	b	5aa0 <test_scan+0x82c>
    652c:	cmp	r7, #5
    6530:	bne	651c <test_scan+0x12a8>
    6534:	ldr	r1, [sp, #36]	; 0x24
    6538:	sub	r2, r3, #1
    653c:	add	r1, r1, r3
    6540:	b	654c <test_scan+0x12d8>
    6544:	subs	r2, r2, #1
    6548:	bcc	698c <test_scan+0x1718>
    654c:	cmp	r2, r3
    6550:	bcs	69a0 <test_scan+0x172c>
    6554:	ldrb	r0, [r1, #-1]!
    6558:	cmp	r0, #3
    655c:	bne	6544 <test_scan+0x12d0>
    6560:	cmp	r2, #5
    6564:	bne	698c <test_scan+0x1718>
    6568:	cmp	r3, #4
    656c:	ldr	r1, [sp, #36]	; 0x24
    6570:	movcc	r2, r3
    6574:	movcs	r2, #4
    6578:	add	r1, r1, r2
    657c:	b	6594 <test_scan+0x1320>
    6580:	cmp	r2, r3
    6584:	bcs	69a0 <test_scan+0x172c>
    6588:	ldrb	r0, [r1, #-1]!
    658c:	cmp	r0, #3
    6590:	beq	65d0 <test_scan+0x135c>
    6594:	cmp	r2, #1
    6598:	sub	r2, r2, #1
    659c:	bhi	6580 <test_scan+0x130c>
    65a0:	ldr	r0, [pc, #-648]	; 6320 <test_scan+0x10ac>
    65a4:	bl	0 <puts>
    65a8:	mvn	r6, #0
    65ac:	b	5aa0 <test_scan+0x82c>
    65b0:	ldr	r0, [pc, #-660]	; 6324 <test_scan+0x10b0>
    65b4:	mov	r6, r9
    65b8:	bl	0 <puts>
    65bc:	b	5aa0 <test_scan+0x82c>
    65c0:	ldr	r0, [pc, #-672]	; 6328 <test_scan+0x10b4>
    65c4:	mov	r6, r9
    65c8:	bl	0 <puts>
    65cc:	b	5aa0 <test_scan+0x82c>
    65d0:	cmp	r2, #3
    65d4:	bne	65a0 <test_scan+0x132c>
    65d8:	ldr	r3, [sp, #40]	; 0x28
    65dc:	ldr	r7, [r3, #-4]
    65e0:	cmp	r7, #0
    65e4:	beq	6654 <test_scan+0x13e0>
    65e8:	ldr	sl, [sp, #40]	; 0x28
    65ec:	ldr	r9, [sp, #56]	; 0x38
    65f0:	b	6600 <test_scan+0x138c>
    65f4:	add	r9, r9, #1
    65f8:	cmp	r7, r9
    65fc:	beq	6654 <test_scan+0x13e0>
    6600:	mov	r3, sl
    6604:	add	sl, sl, #4
    6608:	ldr	r0, [r3]
    660c:	add	r0, r0, #4
    6610:	adds	r0, r3, r0
    6614:	beq	65f4 <test_scan+0x1380>
    6618:	ldr	r8, [r0, #-4]
    661c:	ldr	r1, [pc, #-760]	; 632c <test_scan+0x10b8>
    6620:	cmp	r8, #4
    6624:	movcc	r2, r8
    6628:	movcs	r2, #4
    662c:	bl	0 <strncmp>
    6630:	cmp	r8, #3
    6634:	movls	r3, #0
    6638:	movhi	r3, #1
    663c:	cmp	r0, #0
    6640:	movne	r3, #0
    6644:	cmp	r3, #0
    6648:	beq	65f4 <test_scan+0x1380>
    664c:	cmp	r8, #4
    6650:	bhi	65f4 <test_scan+0x1380>
    6654:	sub	r8, r7, #-1073741823	; 0xc0000001
    6658:	ldr	r2, [sp, #40]	; 0x28
    665c:	sub	r3, r7, #1
    6660:	add	r8, r2, r8, lsl #2
    6664:	str	r3, [sp, #36]	; 0x24
    6668:	mov	r9, r8
    666c:	mov	sl, r3
    6670:	b	66a4 <test_scan+0x1430>
    6674:	cmp	r7, sl
    6678:	mov	r0, r9
    667c:	bls	69a4 <test_scan+0x1730>
    6680:	ldr	r3, [r9]
    6684:	ldr	r1, [pc, #-864]	; 632c <test_scan+0x10b8>
    6688:	add	r3, r3, #4
    668c:	add	r0, r0, r3
    6690:	bl	0 <strcmp>
    6694:	sub	r9, r9, #4
    6698:	sub	sl, sl, #1
    669c:	cmp	r0, #0
    66a0:	beq	66ac <test_scan+0x1438>
    66a4:	cmn	sl, #1
    66a8:	bne	6674 <test_scan+0x1400>
    66ac:	mov	r9, r8
    66b0:	ldr	sl, [sp, #36]	; 0x24
    66b4:	b	66e8 <test_scan+0x1474>
    66b8:	cmp	r7, sl
    66bc:	mov	r0, r9
    66c0:	bls	69a4 <test_scan+0x1730>
    66c4:	ldr	r3, [r9]
    66c8:	ldr	r1, [pc, #-932]	; 632c <test_scan+0x10b8>
    66cc:	add	r3, r3, #4
    66d0:	add	r0, r0, r3
    66d4:	bl	0 <strcmp>
    66d8:	sub	r9, r9, #4
    66dc:	sub	sl, sl, #1
    66e0:	cmp	r0, #0
    66e4:	beq	66f0 <test_scan+0x147c>
    66e8:	cmn	sl, #1
    66ec:	bne	66b8 <test_scan+0x1444>
    66f0:	ldr	r3, [sp, #36]	; 0x24
    66f4:	mov	sl, r8
    66f8:	mov	r9, r3
    66fc:	str	r4, [sp, #40]	; 0x28
    6700:	cmn	r9, #1
    6704:	beq	674c <test_scan+0x14d8>
    6708:	cmp	r7, r9
    670c:	mov	r2, sl
    6710:	bls	69a4 <test_scan+0x1730>
    6714:	ldr	r0, [sl]
    6718:	sub	sl, sl, #4
    671c:	add	r0, r0, #4
    6720:	adds	r0, r2, r0
    6724:	beq	6940 <test_scan+0x16cc>
    6728:	ldr	r4, [r0, #-4]
    672c:	ldr	r1, [pc, #-1032]	; 632c <test_scan+0x10b8>
    6730:	cmp	r4, #4
    6734:	movcc	r2, r4
    6738:	movcs	r2, #4
    673c:	bl	0 <strncmp>
    6740:	cmp	r0, #0
    6744:	cmpeq	r4, #4
    6748:	bne	6940 <test_scan+0x16cc>
    674c:	ldr	r4, [sp, #40]	; 0x28
    6750:	ldr	sl, [pc, #-1068]	; 632c <test_scan+0x10b8>
    6754:	ldr	r3, [sp, #36]	; 0x24
    6758:	cmn	r3, #1
    675c:	beq	67a8 <test_scan+0x1534>
    6760:	ldr	r3, [sp, #36]	; 0x24
    6764:	cmp	r7, r3
    6768:	mov	r3, r8
    676c:	bls	69a4 <test_scan+0x1730>
    6770:	ldr	r0, [r8]
    6774:	sub	r8, r8, #4
    6778:	add	r0, r0, #4
    677c:	adds	r0, r3, r0
    6780:	beq	6930 <test_scan+0x16bc>
    6784:	ldr	r9, [r0, #-4]
    6788:	mov	r1, sl
    678c:	cmp	r9, #4
    6790:	movcc	r2, r9
    6794:	movcs	r2, #4
    6798:	bl	0 <strncmp>
    679c:	cmp	r9, #4
    67a0:	cmpeq	r0, #0
    67a4:	bne	6930 <test_scan+0x16bc>
    67a8:	ldr	r1, [sp, #56]	; 0x38
    67ac:	ldr	r2, [sp, #28]
    67b0:	ldr	r0, [sp, #52]	; 0x34
    67b4:	ldr	r3, [sp, #32]
    67b8:	b	67e8 <test_scan+0x1574>
    67bc:	add	r1, r1, #1
    67c0:	cmp	r4, r1
    67c4:	bls	6808 <test_scan+0x1594>
    67c8:	mov	r3, r0
    67cc:	add	r0, r0, #4
    67d0:	ldr	r2, [r3]
    67d4:	adds	fp, r3, r2
    67d8:	beq	6860 <test_scan+0x15ec>
    67dc:	ldr	r3, [r3, r2]
    67e0:	sub	r3, fp, r3
    67e4:	ldrh	r2, [r3]
    67e8:	cmp	r2, #9
    67ec:	bls	67bc <test_scan+0x1548>
    67f0:	ldrh	r3, [r3, #8]
    67f4:	cmp	r3, #0
    67f8:	beq	67bc <test_scan+0x1548>
    67fc:	ldrsh	r3, [fp, r3]
    6800:	cmp	r3, #13
    6804:	bne	67bc <test_scan+0x1548>
    6808:	ldr	r3, [r5, #4]
    680c:	add	r3, r3, #4
    6810:	adds	r3, r5, r3
    6814:	addne	r5, r5, #8
    6818:	ldrne	r1, [sp, #60]	; 0x3c
    681c:	beq	6860 <test_scan+0x15ec>
    6820:	ldr	r2, [r3]
    6824:	sub	r2, r3, r2
    6828:	ldrh	r0, [r2]
    682c:	cmp	r0, #9
    6830:	bls	6840 <test_scan+0x15cc>
    6834:	ldrh	r2, [r2, #8]
    6838:	cmp	r2, #0
    683c:	bne	6864 <test_scan+0x15f0>
    6840:	add	r1, r1, #1
    6844:	cmp	r4, r1
    6848:	beq	6870 <test_scan+0x15fc>
    684c:	mov	r3, r5
    6850:	add	r5, r5, #4
    6854:	ldr	r2, [r3]
    6858:	adds	r3, r3, r2
    685c:	bne	6820 <test_scan+0x15ac>
    6860:	bl	0 <Fantasy_Attacker_verify_table>
    6864:	ldrsh	r3, [r3, r2]
    6868:	cmp	r3, #42	; 0x2a
    686c:	bne	6840 <test_scan+0x15cc>
    6870:	ldr	r2, [sp, #20]
    6874:	ldr	r0, [sp, #24]
    6878:	cmp	r4, r2
    687c:	mov	r3, r0
    6880:	bls	6948 <test_scan+0x16d4>
    6884:	ldr	r1, [r0]
    6888:	sub	r0, r0, #4
    688c:	adds	ip, r3, r1
    6890:	beq	6860 <test_scan+0x15ec>
    6894:	ldr	r3, [r3, r1]
    6898:	sub	r3, ip, r3
    689c:	ldrh	r1, [r3]
    68a0:	cmp	r1, #9
    68a4:	bls	68b4 <test_scan+0x1640>
    68a8:	ldrh	r3, [r3, #8]
    68ac:	cmp	r3, #0
    68b0:	bne	6920 <test_scan+0x16ac>
    68b4:	cmp	r2, #0
    68b8:	sub	r2, r2, #1
    68bc:	bne	6878 <test_scan+0x1604>
    68c0:	ldr	r1, [sp, #16]
    68c4:	ldr	r2, [sp, #60]	; 0x3c
    68c8:	b	68d4 <test_scan+0x1660>
    68cc:	subs	r2, r2, #1
    68d0:	bcc	5aa0 <test_scan+0x82c>
    68d4:	cmp	r4, r2
    68d8:	mov	r3, r1
    68dc:	bls	6948 <test_scan+0x16d4>
    68e0:	ldr	r0, [r1]
    68e4:	sub	r1, r1, #4
    68e8:	adds	ip, r3, r0
    68ec:	beq	6860 <test_scan+0x15ec>
    68f0:	ldr	r3, [r3, r0]
    68f4:	sub	r3, ip, r3
    68f8:	ldrh	r0, [r3]
    68fc:	cmp	r0, #9
    6900:	bls	68cc <test_scan+0x1658>
    6904:	ldrh	r3, [r3, #8]
    6908:	cmp	r3, #0
    690c:	beq	68cc <test_scan+0x1658>
    6910:	ldrsh	r3, [ip, r3]
    6914:	cmp	r3, #42	; 0x2a
    6918:	beq	5aa0 <test_scan+0x82c>
    691c:	b	68cc <test_scan+0x1658>
    6920:	ldrsh	r3, [ip, r3]
    6924:	cmp	r3, #1
    6928:	beq	68c0 <test_scan+0x164c>
    692c:	b	68b4 <test_scan+0x1640>
    6930:	ldr	r3, [sp, #36]	; 0x24
    6934:	sub	r3, r3, #1
    6938:	str	r3, [sp, #36]	; 0x24
    693c:	b	6754 <test_scan+0x14e0>
    6940:	sub	r9, r9, #1
    6944:	b	6700 <test_scan+0x148c>
    6948:	bl	228 <MyGame_Example_Monster_vec_at.part.23>
    694c:	ldr	r0, [pc, #-1572]	; 6330 <test_scan+0x10bc>
    6950:	mov	r6, r8
    6954:	bl	0 <puts>
    6958:	b	5aa0 <test_scan+0x82c>
    695c:	ldr	r0, [pc, #-1584]	; 6334 <test_scan+0x10c0>
    6960:	mov	r6, r8
    6964:	bl	0 <puts>
    6968:	b	5aa0 <test_scan+0x82c>
    696c:	ldr	r0, [pc, #-1596]	; 6338 <test_scan+0x10c4>
    6970:	mov	r6, r8
    6974:	bl	0 <puts>
    6978:	b	5aa0 <test_scan+0x82c>
    697c:	ldr	r0, [pc, #-1608]	; 633c <test_scan+0x10c8>
    6980:	mov	r6, r8
    6984:	bl	0 <puts>
    6988:	b	5aa0 <test_scan+0x82c>
    698c:	ldr	r0, [pc, #-1620]	; 6340 <test_scan+0x10cc>
    6990:	bl	0 <puts>
    6994:	mvn	r6, #0
    6998:	b	5aa0 <test_scan+0x82c>
    699c:	bl	540 <MyGame_Example_TestJSONPrefixParsing_verify_table+0x1c>
    69a0:	bl	1dc <flatbuffers_uint8_vec_at.part.14>
    69a4:	bl	204 <flatbuffers_string_vec_at.part.20>
    69a8:	ldr	r3, [pc, #-1624]	; 6358 <test_scan+0x10e4>
    69ac:	ldr	r2, [pc, #-1648]	; 6344 <test_scan+0x10d0>
    69b0:	ldr	r1, [pc, #-1640]	; 6350 <test_scan+0x10dc>
    69b4:	ldr	r0, [pc, #-1652]	; 6348 <test_scan+0x10d4>
    69b8:	bl	0 <__assert_fail>
    69bc:	ldr	r3, [pc, #-1644]	; 6358 <test_scan+0x10e4>
    69c0:	ldr	r2, [pc, #-1660]	; 634c <test_scan+0x10d8>
    69c4:	ldr	r1, [pc, #-1660]	; 6350 <test_scan+0x10dc>
    69c8:	ldr	r0, [pc, #-1660]	; 6354 <test_scan+0x10e0>
    69cc:	bl	0 <__assert_fail>

000069d0 <test_basic_sort>:
    69d0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    69d4:	sub	sp, sp, #32
    69d8:	mov	r3, #3
    69dc:	mov	lr, #7
    69e0:	mov	ip, #1
    69e4:	mov	r1, #4
    69e8:	mov	r2, #2
    69ec:	mov	r4, #6
    69f0:	strb	r4, [sp, #16]
    69f4:	strb	r4, [sp, #29]
    69f8:	strb	lr, [sp, #17]
    69fc:	strb	lr, [sp, #30]
    6a00:	strb	ip, [sp, #18]
    6a04:	strb	ip, [sp, #24]
    6a08:	strb	r3, [sp, #19]
    6a0c:	strb	r3, [sp, #21]
    6a10:	strb	r3, [sp, #26]
    6a14:	strb	r3, [sp, #27]
    6a18:	strb	r1, [sp, #20]
    6a1c:	strb	r1, [sp, #28]
    6a20:	strb	r2, [sp, #22]
    6a24:	strb	r2, [sp, #25]
    6a28:	mov	r4, r0
    6a2c:	bl	0 <flatcc_builder_reset>
    6a30:	mov	r3, #0
    6a34:	mov	r0, r4
    6a38:	mov	r2, r3
    6a3c:	ldr	r1, [pc, #1016]	; 6e3c <test_basic_sort+0x46c>
    6a40:	bl	0 <flatcc_builder_start_buffer>
    6a44:	cmp	r0, #0
    6a48:	bne	6a58 <test_basic_sort+0x88>
    6a4c:	mov	r1, #36	; 0x24
    6a50:	mov	r0, r4
    6a54:	bl	0 <flatcc_builder_start_table>
    6a58:	ldr	r1, [pc, #992]	; 6e40 <test_basic_sort+0x470>
    6a5c:	mov	r0, r4
    6a60:	bl	0 <flatcc_builder_create_string_str>
    6a64:	subs	r5, r0, #0
    6a68:	beq	6a80 <test_basic_sort+0xb0>
    6a6c:	mov	r1, #3
    6a70:	mov	r0, r4
    6a74:	bl	0 <flatcc_builder_table_add_offset>
    6a78:	cmp	r0, #0
    6a7c:	strne	r5, [r0]
    6a80:	mvn	r2, #0
    6a84:	mov	r3, #1
    6a88:	str	r2, [sp, #4]
    6a8c:	str	r3, [sp]
    6a90:	mov	r2, #7
    6a94:	add	r1, sp, #16
    6a98:	mov	r0, r4
    6a9c:	bl	0 <flatcc_builder_create_vector>
    6aa0:	subs	r5, r0, #0
    6aa4:	beq	6abc <test_basic_sort+0xec>
    6aa8:	mov	r1, #5
    6aac:	mov	r0, r4
    6ab0:	bl	0 <flatcc_builder_table_add_offset>
    6ab4:	cmp	r0, #0
    6ab8:	strne	r5, [r0]
    6abc:	mov	r2, #1
    6ac0:	ldr	r1, [pc, #892]	; 6e44 <test_basic_sort+0x474>
    6ac4:	mov	r0, r4
    6ac8:	bl	0 <flatcc_builder_check_required>
    6acc:	cmp	r0, #0
    6ad0:	beq	6e38 <test_basic_sort+0x468>
    6ad4:	mov	r0, r4
    6ad8:	bl	0 <flatcc_builder_end_table>
    6adc:	mov	r1, r0
    6ae0:	mov	r0, r4
    6ae4:	bl	0 <flatcc_builder_end_buffer>
    6ae8:	mov	r0, r4
    6aec:	add	r1, sp, #12
    6af0:	bl	0 <flatcc_builder_get_direct_buffer>
    6af4:	cmp	r0, #0
    6af8:	beq	6b0c <test_basic_sort+0x13c>
    6afc:	ldr	r3, [pc, #836]	; 6e48 <test_basic_sort+0x478>
    6b00:	ldr	r2, [r0, #4]
    6b04:	cmp	r2, r3
    6b08:	beq	6b10 <test_basic_sort+0x140>
    6b0c:	bl	98 <hexdump+0x78>
    6b10:	ldr	r3, [r0]
    6b14:	adds	r4, r0, r3
    6b18:	beq	6b0c <test_basic_sort+0x13c>
    6b1c:	ldr	r3, [r0, r3]
    6b20:	sub	r3, r4, r3
    6b24:	ldrh	r2, [r3]
    6b28:	cmp	r2, #15
    6b2c:	bls	6e04 <test_basic_sort+0x434>
    6b30:	ldrh	r3, [r3, #14]
    6b34:	cmp	r3, #0
    6b38:	beq	6e04 <test_basic_sort+0x434>
    6b3c:	ldr	r5, [r4, r3]
    6b40:	add	r4, r4, r3
    6b44:	add	r5, r5, #4
    6b48:	adds	r3, r4, r5
    6b4c:	beq	6e04 <test_basic_sort+0x434>
    6b50:	ldr	r9, [r3, #-4]
    6b54:	cmp	r9, #0
    6b58:	beq	6e04 <test_basic_sort+0x434>
    6b5c:	lsr	r7, r9, #1
    6b60:	sub	r0, r9, #1
    6b64:	lsl	r8, r7, #1
    6b68:	cmp	r0, r8
    6b6c:	movcs	r2, r7
    6b70:	movcs	r1, r8
    6b74:	bcs	6bd8 <test_basic_sort+0x208>
    6b78:	b	6c0c <test_basic_sort+0x23c>
    6b7c:	ldr	lr, [r3, #-4]
    6b80:	cmp	lr, r1
    6b84:	bls	6e18 <test_basic_sort+0x448>
    6b88:	add	ip, r1, #1
    6b8c:	cmp	lr, ip
    6b90:	ldrb	r6, [r3, r1]
    6b94:	bls	6e18 <test_basic_sort+0x448>
    6b98:	ldrb	sl, [r3, ip]
    6b9c:	cmp	sl, r6
    6ba0:	movls	ip, r1
    6ba4:	cmp	lr, r2
    6ba8:	bls	6e18 <test_basic_sort+0x448>
    6bac:	ldrb	lr, [r3, r2]
    6bb0:	add	r6, r3, r2
    6bb4:	mov	r2, ip
    6bb8:	ldrb	ip, [r3, r2]
    6bbc:	cmp	ip, lr
    6bc0:	bls	6c0c <test_basic_sort+0x23c>
    6bc4:	lsl	r1, r2, #1
    6bc8:	cmp	r0, r1
    6bcc:	strb	lr, [r3, r2]
    6bd0:	strb	ip, [r6]
    6bd4:	bcc	6c0c <test_basic_sort+0x23c>
    6bd8:	cmp	r0, r1
    6bdc:	bhi	6b7c <test_basic_sort+0x1ac>
    6be0:	ldr	ip, [r3, #-4]
    6be4:	cmp	ip, r2
    6be8:	bls	6e18 <test_basic_sort+0x448>
    6bec:	cmp	ip, r1
    6bf0:	add	r6, r3, r2
    6bf4:	ldrb	lr, [r3, r2]
    6bf8:	bls	6e18 <test_basic_sort+0x448>
    6bfc:	mov	r2, r1
    6c00:	ldrb	ip, [r3, r2]
    6c04:	cmp	ip, lr
    6c08:	bhi	6bc4 <test_basic_sort+0x1f4>
    6c0c:	sub	r7, r7, #1
    6c10:	cmn	r7, #1
    6c14:	sub	r8, r8, #2
    6c18:	bne	6b68 <test_basic_sort+0x198>
    6c1c:	cmp	r0, #0
    6c20:	beq	6ce4 <test_basic_sort+0x314>
    6c24:	add	r9, r3, r9
    6c28:	mov	r7, #0
    6c2c:	ldrb	ip, [r9, #-1]
    6c30:	ldrb	lr, [r3]
    6c34:	sub	r0, r0, #1
    6c38:	mov	r2, r7
    6c3c:	strb	lr, [r9, #-1]!
    6c40:	mov	r1, #0
    6c44:	strb	ip, [r3]
    6c48:	b	6ca8 <test_basic_sort+0x2d8>
    6c4c:	ldr	lr, [r3, #-4]
    6c50:	cmp	r1, lr
    6c54:	bcs	6e18 <test_basic_sort+0x448>
    6c58:	add	ip, r1, #1
    6c5c:	cmp	lr, ip
    6c60:	ldrb	r6, [r3, r1]
    6c64:	bls	6e18 <test_basic_sort+0x448>
    6c68:	ldrb	r8, [r3, ip]
    6c6c:	cmp	r8, r6
    6c70:	movls	ip, r1
    6c74:	cmp	r2, lr
    6c78:	bcs	6e18 <test_basic_sort+0x448>
    6c7c:	ldrb	lr, [r3, r2]
    6c80:	add	r6, r3, r2
    6c84:	mov	r2, ip
    6c88:	ldrb	ip, [r3, r2]
    6c8c:	cmp	ip, lr
    6c90:	bls	6cdc <test_basic_sort+0x30c>
    6c94:	lsl	r1, r2, #1
    6c98:	cmp	r0, r1
    6c9c:	strb	lr, [r3, r2]
    6ca0:	strb	ip, [r6]
    6ca4:	bcc	6cdc <test_basic_sort+0x30c>
    6ca8:	cmp	r1, r0
    6cac:	bcc	6c4c <test_basic_sort+0x27c>
    6cb0:	ldr	ip, [r3, #-4]
    6cb4:	cmp	r2, ip
    6cb8:	bcs	6e18 <test_basic_sort+0x448>
    6cbc:	cmp	r1, ip
    6cc0:	add	r6, r3, r2
    6cc4:	ldrb	lr, [r3, r2]
    6cc8:	bcs	6e18 <test_basic_sort+0x448>
    6ccc:	mov	r2, r1
    6cd0:	ldrb	ip, [r3, r2]
    6cd4:	cmp	ip, lr
    6cd8:	bhi	6c94 <test_basic_sort+0x2c4>
    6cdc:	cmp	r0, #0
    6ce0:	bne	6c2c <test_basic_sort+0x25c>
    6ce4:	ldr	r2, [r3, #-4]
    6ce8:	cmp	r2, #7
    6cec:	bne	6e04 <test_basic_sort+0x434>
    6cf0:	ldrb	lr, [r4, r5]
    6cf4:	cmp	lr, #1
    6cf8:	bne	6de0 <test_basic_sort+0x410>
    6cfc:	mov	r5, #0
    6d00:	mov	r7, r5
    6d04:	mov	r4, lr
    6d08:	mov	r6, #6
    6d0c:	mov	r8, #4
    6d10:	mov	ip, r6
    6d14:	mov	r0, r7
    6d18:	sub	r1, ip, r0
    6d1c:	add	r1, r0, r1, lsr #1
    6d20:	cmp	r1, #6
    6d24:	bhi	6e18 <test_basic_sort+0x448>
    6d28:	ldrb	r2, [r3, r1]
    6d2c:	cmp	r2, lr
    6d30:	bcs	6d58 <test_basic_sort+0x388>
    6d34:	b	6d7c <test_basic_sort+0x3ac>
    6d38:	sub	r2, r1, r0
    6d3c:	add	r2, r0, r2, lsr #1
    6d40:	cmp	r2, #6
    6d44:	bhi	6e18 <test_basic_sort+0x448>
    6d48:	ldrb	ip, [r3, r2]
    6d4c:	cmp	ip, lr
    6d50:	bcc	6d84 <test_basic_sort+0x3b4>
    6d54:	mov	r1, r2
    6d58:	cmp	r1, r0
    6d5c:	bhi	6d38 <test_basic_sort+0x368>
    6d60:	cmp	r1, r0
    6d64:	beq	6d98 <test_basic_sort+0x3c8>
    6d68:	ldr	r0, [pc, #220]	; 6e4c <test_basic_sort+0x47c>
    6d6c:	bl	0 <puts>
    6d70:	mvn	r0, #0
    6d74:	add	sp, sp, #32
    6d78:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    6d7c:	mov	r2, r1
    6d80:	mov	r1, ip
    6d84:	add	r0, r2, #1
    6d88:	cmp	r0, r1
    6d8c:	bcs	6d60 <test_basic_sort+0x390>
    6d90:	mov	ip, r1
    6d94:	b	6d18 <test_basic_sort+0x348>
    6d98:	ldrb	r2, [r3, r1]
    6d9c:	cmp	r2, lr
    6da0:	bne	6d68 <test_basic_sort+0x398>
    6da4:	cmp	r4, #4
    6da8:	beq	6df4 <test_basic_sort+0x424>
    6dac:	cmp	r5, r1
    6db0:	bne	6d68 <test_basic_sort+0x398>
    6db4:	cmp	r4, #6
    6db8:	mov	r5, r4
    6dbc:	bhi	6e2c <test_basic_sort+0x45c>
    6dc0:	add	r2, sp, #32
    6dc4:	add	r1, r2, r4
    6dc8:	ldrb	r2, [r3, r5]
    6dcc:	ldrb	lr, [r1, #-8]
    6dd0:	add	r4, r4, #1
    6dd4:	cmp	r2, lr
    6dd8:	uxtb	r4, r4
    6ddc:	beq	6d10 <test_basic_sort+0x340>
    6de0:	ldr	r0, [pc, #104]	; 6e50 <test_basic_sort+0x480>
    6de4:	bl	0 <puts>
    6de8:	mvn	r0, #0
    6dec:	add	sp, sp, #32
    6df0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    6df4:	cmp	r1, #2
    6df8:	bne	6d68 <test_basic_sort+0x398>
    6dfc:	mov	r5, r8
    6e00:	b	6dc0 <test_basic_sort+0x3f0>
    6e04:	ldr	r3, [pc, #72]	; 6e54 <test_basic_sort+0x484>
    6e08:	mov	r2, #1552	; 0x610
    6e0c:	ldr	r1, [pc, #68]	; 6e58 <test_basic_sort+0x488>
    6e10:	ldr	r0, [pc, #68]	; 6e5c <test_basic_sort+0x48c>
    6e14:	bl	0 <__assert_fail>
    6e18:	ldr	r3, [pc, #64]	; 6e60 <test_basic_sort+0x490>
    6e1c:	ldr	r2, [pc, #64]	; 6e64 <test_basic_sort+0x494>
    6e20:	ldr	r1, [pc, #64]	; 6e68 <test_basic_sort+0x498>
    6e24:	ldr	r0, [pc, #64]	; 6e6c <test_basic_sort+0x49c>
    6e28:	bl	0 <__assert_fail>
    6e2c:	mov	r0, #0
    6e30:	add	sp, sp, #32
    6e34:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    6e38:	bl	540 <MyGame_Example_TestJSONPrefixParsing_verify_table+0x1c>
    6e3c:	.word	0x0000054c
    6e40:	.word	0x00000674
    6e44:	.word	0x0000043c
    6e48:	.word	0x534e4f4d
    6e4c:	.word	0x00001c08
    6e50:	.word	0x00001bf0
    6e54:	.word	0x00000510
    6e58:	.word	0x00000c90
    6e5c:	.word	0x00001bc0
    6e60:	.word	0x000000ac
    6e64:	.word	0x0000018b
    6e68:	.word	0x000000b8
    6e6c:	.word	0x0000012c

00006e70 <test_clone_slice>:
    6e70:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6e74:	sub	sp, sp, #36	; 0x24
    6e78:	mov	r5, #0
    6e7c:	mov	r3, #1
    6e80:	mov	r4, r0
    6e84:	strb	r3, [sp, #25]
    6e88:	strb	r3, [sp, #28]
    6e8c:	strb	r5, [sp, #24]
    6e90:	strb	r5, [sp, #26]
    6e94:	strb	r5, [sp, #27]
    6e98:	strb	r5, [sp, #29]
    6e9c:	strb	r5, [sp, #30]
    6ea0:	bl	0 <flatcc_builder_reset>
    6ea4:	mov	r3, r5
    6ea8:	mov	r2, r5
    6eac:	mov	r0, r4
    6eb0:	ldr	r1, [pc, #2508]	; 7884 <test_clone_slice+0xa14>
    6eb4:	bl	0 <flatcc_builder_start_buffer>
    6eb8:	cmp	r0, r5
    6ebc:	bne	6ecc <test_clone_slice+0x5c>
    6ec0:	mov	r1, #36	; 0x24
    6ec4:	mov	r0, r4
    6ec8:	bl	0 <flatcc_builder_start_table>
    6ecc:	ldr	r1, [pc, #2484]	; 7888 <test_clone_slice+0xa18>
    6ed0:	mov	r0, r4
    6ed4:	bl	0 <flatcc_builder_create_string_str>
    6ed8:	subs	r5, r0, #0
    6edc:	beq	6ef4 <test_clone_slice+0x84>
    6ee0:	mov	r1, #3
    6ee4:	mov	r0, r4
    6ee8:	bl	0 <flatcc_builder_table_add_offset>
    6eec:	cmp	r0, #0
    6ef0:	strne	r5, [r0]
    6ef4:	mvn	r2, #0
    6ef8:	mov	r3, #1
    6efc:	str	r2, [sp, #4]
    6f00:	add	r1, sp, #24
    6f04:	str	r3, [sp]
    6f08:	mov	r2, #7
    6f0c:	mov	r0, r4
    6f10:	bl	0 <flatcc_builder_create_vector>
    6f14:	subs	r5, r0, #0
    6f18:	beq	6f30 <test_clone_slice+0xc0>
    6f1c:	mov	r1, #24
    6f20:	mov	r0, r4
    6f24:	bl	0 <flatcc_builder_table_add_offset>
    6f28:	cmp	r0, #0
    6f2c:	strne	r5, [r0]
    6f30:	mvn	r3, #-1073741824	; 0xc0000000
    6f34:	mov	r2, #2
    6f38:	mov	r1, #4
    6f3c:	mov	r0, r4
    6f40:	bl	0 <flatcc_builder_start_vector>
    6f44:	mov	r1, #2
    6f48:	mov	r0, r4
    6f4c:	bl	0 <flatcc_builder_extend_vector>
    6f50:	mov	r2, #22
    6f54:	mov	r3, #44	; 0x2c
    6f58:	strh	r2, [r0]
    6f5c:	strh	r3, [r0, #4]
    6f60:	mov	r0, r4
    6f64:	bl	0 <flatcc_builder_end_vector>
    6f68:	subs	r5, r0, #0
    6f6c:	beq	6f84 <test_clone_slice+0x114>
    6f70:	mov	r1, #9
    6f74:	mov	r0, r4
    6f78:	bl	0 <flatcc_builder_table_add_offset>
    6f7c:	cmp	r0, #0
    6f80:	strne	r5, [r0]
    6f84:	mov	r3, #16
    6f88:	mov	r2, #32
    6f8c:	mov	r1, #0
    6f90:	mov	r0, r4
    6f94:	bl	0 <flatcc_builder_table_add>
    6f98:	ldr	r9, [pc, #2284]	; 788c <test_clone_slice+0xa1c>
    6f9c:	ldr	r3, [pc, #2284]	; 7890 <test_clone_slice+0xa20>
    6fa0:	mov	r2, #1
    6fa4:	add	r1, r9, #12
    6fa8:	str	r3, [r0]
    6fac:	mov	r0, r4
    6fb0:	bl	0 <flatcc_builder_check_required>
    6fb4:	cmp	r0, #0
    6fb8:	beq	7840 <test_clone_slice+0x9d0>
    6fbc:	mov	r0, r4
    6fc0:	bl	0 <flatcc_builder_end_table>
    6fc4:	ldr	sl, [pc, #2248]	; 7894 <test_clone_slice+0xa24>
    6fc8:	mov	r1, r0
    6fcc:	mov	r0, r4
    6fd0:	bl	0 <flatcc_builder_end_buffer>
    6fd4:	add	r1, sp, #20
    6fd8:	mov	r0, r4
    6fdc:	bl	0 <flatcc_builder_finalize_aligned_buffer>
    6fe0:	ldr	r3, [sl]
    6fe4:	ldr	r2, [sp, #20]
    6fe8:	mov	r8, r0
    6fec:	mov	r1, r0
    6ff0:	ldr	r0, [pc, #2208]	; 7898 <test_clone_slice+0xa28>
    6ff4:	bl	20 <hexdump>
    6ff8:	cmp	r8, #0
    6ffc:	beq	7010 <test_clone_slice+0x1a0>
    7000:	ldr	r3, [pc, #2196]	; 789c <test_clone_slice+0xa2c>
    7004:	ldr	r2, [r8, #4]
    7008:	cmp	r2, r3
    700c:	beq	7730 <test_clone_slice+0x8c0>
    7010:	mov	r0, r4
    7014:	bl	0 <flatcc_builder_reset>
    7018:	mov	r3, #0
    701c:	mov	r2, r3
    7020:	ldr	r1, [pc, #2140]	; 7884 <test_clone_slice+0xa14>
    7024:	mov	r0, r4
    7028:	bl	0 <flatcc_builder_start_buffer>
    702c:	subs	r6, r0, #0
    7030:	bne	7450 <test_clone_slice+0x5e0>
    7034:	mov	r1, #36	; 0x24
    7038:	mov	r0, r4
    703c:	bl	0 <flatcc_builder_start_table>
    7040:	cmp	r6, #0
    7044:	beq	7450 <test_clone_slice+0x5e0>
    7048:	ldr	r3, [r6]
    704c:	sub	r3, r6, r3
    7050:	ldrh	r1, [r3]
    7054:	cmp	r1, #11
    7058:	bls	7098 <test_clone_slice+0x228>
    705c:	ldrh	r5, [r3, #10]
    7060:	cmp	r5, #0
    7064:	beq	7098 <test_clone_slice+0x228>
    7068:	ldr	r2, [r6, r5]
    706c:	add	r5, r6, r5
    7070:	add	r2, r2, #4
    7074:	adds	r5, r5, r2
    7078:	beq	7858 <test_clone_slice+0x9e8>
    707c:	cmp	r1, #53	; 0x35
    7080:	bhi	70ac <test_clone_slice+0x23c>
    7084:	ldr	r3, [pc, #2068]	; 78a0 <test_clone_slice+0xa30>
    7088:	ldr	r2, [pc, #2068]	; 78a4 <test_clone_slice+0xa34>
    708c:	ldr	r1, [pc, #2068]	; 78a8 <test_clone_slice+0xa38>
    7090:	ldr	r0, [pc, #2068]	; 78ac <test_clone_slice+0xa3c>
    7094:	bl	0 <__assert_fail>
    7098:	ldr	r3, [pc, #2064]	; 78b0 <test_clone_slice+0xa40>
    709c:	ldr	r2, [pc, #2064]	; 78b4 <test_clone_slice+0xa44>
    70a0:	ldr	r1, [pc, #2064]	; 78b8 <test_clone_slice+0xa48>
    70a4:	ldr	r0, [pc, #2064]	; 78bc <test_clone_slice+0xa4c>
    70a8:	bl	0 <__assert_fail>
    70ac:	ldrh	r7, [r3, #52]	; 0x34
    70b0:	cmp	r7, #0
    70b4:	beq	7084 <test_clone_slice+0x214>
    70b8:	ldr	r2, [r6, r7]
    70bc:	add	r7, r6, r7
    70c0:	add	r2, r2, #4
    70c4:	adds	r7, r7, r2
    70c8:	beq	7084 <test_clone_slice+0x214>
    70cc:	ldrh	fp, [r3, #22]
    70d0:	cmp	fp, #0
    70d4:	beq	7844 <test_clone_slice+0x9d4>
    70d8:	ldr	r3, [r6, fp]
    70dc:	add	fp, r6, fp
    70e0:	add	r3, r3, #4
    70e4:	adds	fp, fp, r3
    70e8:	beq	7844 <test_clone_slice+0x9d4>
    70ec:	ldr	r2, [r5, #-4]
    70f0:	mov	r1, r5
    70f4:	mov	r0, r4
    70f8:	bl	0 <flatcc_builder_create_string>
    70fc:	subs	r3, r0, #0
    7100:	str	r3, [sp, #12]
    7104:	beq	7120 <test_clone_slice+0x2b0>
    7108:	mov	r1, #3
    710c:	mov	r0, r4
    7110:	bl	0 <flatcc_builder_table_add_offset>
    7114:	cmp	r0, #0
    7118:	ldrne	r3, [sp, #12]
    711c:	strne	r3, [r0]
    7120:	mov	r0, r4
    7124:	bl	0 <flatcc_builder_start_offset_vector>
    7128:	mov	r1, r5
    712c:	ldr	r2, [r5, #-4]
    7130:	mov	r0, r4
    7134:	bl	0 <flatcc_builder_create_string>
    7138:	subs	r1, r0, #0
    713c:	beq	7148 <test_clone_slice+0x2d8>
    7140:	mov	r0, r4
    7144:	bl	0 <flatcc_builder_offset_vector_push>
    7148:	ldr	r2, [r5, #-4]
    714c:	mov	r0, r4
    7150:	cmp	r2, #4
    7154:	movcc	r1, r2
    7158:	movcs	r1, #4
    715c:	sub	r2, r2, r1
    7160:	cmp	r2, #20
    7164:	movcs	r2, #20
    7168:	add	r1, r5, r1
    716c:	bl	0 <flatcc_builder_create_string>
    7170:	subs	r1, r0, #0
    7174:	beq	7180 <test_clone_slice+0x310>
    7178:	mov	r0, r4
    717c:	bl	0 <flatcc_builder_offset_vector_push>
    7180:	ldr	r2, [r5, #-4]
    7184:	mov	r1, r5
    7188:	cmp	r2, #3
    718c:	movcs	r2, #3
    7190:	mov	r0, r4
    7194:	bl	0 <flatcc_builder_create_string>
    7198:	subs	r1, r0, #0
    719c:	beq	71a8 <test_clone_slice+0x338>
    71a0:	mov	r0, r4
    71a4:	bl	0 <flatcc_builder_offset_vector_push>
    71a8:	mov	r0, r4
    71ac:	bl	0 <flatcc_builder_end_offset_vector>
    71b0:	subs	r3, r0, #0
    71b4:	str	r3, [sp, #12]
    71b8:	beq	71d4 <test_clone_slice+0x364>
    71bc:	mov	r1, #10
    71c0:	mov	r0, r4
    71c4:	bl	0 <flatcc_builder_table_add_offset>
    71c8:	cmp	r0, #0
    71cc:	ldrne	r3, [sp, #12]
    71d0:	strne	r3, [r0]
    71d4:	mov	r1, #36	; 0x24
    71d8:	mov	r0, r4
    71dc:	bl	0 <flatcc_builder_start_table>
    71e0:	ldr	r2, [r5, #-4]
    71e4:	mov	r0, r4
    71e8:	cmp	r2, #2
    71ec:	movcc	r1, r2
    71f0:	movcs	r1, #2
    71f4:	sub	r2, r2, r1
    71f8:	cmp	r2, #20
    71fc:	movcs	r2, #20
    7200:	add	r1, r5, r1
    7204:	bl	0 <flatcc_builder_create_string>
    7208:	subs	r5, r0, #0
    720c:	beq	7224 <test_clone_slice+0x3b4>
    7210:	mov	r1, #3
    7214:	mov	r0, r4
    7218:	bl	0 <flatcc_builder_table_add_offset>
    721c:	cmp	r0, #0
    7220:	strne	r5, [r0]
    7224:	mvn	r1, #0
    7228:	mov	r3, #1
    722c:	ldr	r2, [r7, #-4]
    7230:	mov	r0, r4
    7234:	str	r1, [sp, #4]
    7238:	str	r3, [sp]
    723c:	mov	r1, r7
    7240:	bl	0 <flatcc_builder_create_vector>
    7244:	subs	r5, r0, #0
    7248:	beq	7260 <test_clone_slice+0x3f0>
    724c:	mov	r1, #24
    7250:	mov	r0, r4
    7254:	bl	0 <flatcc_builder_table_add_offset>
    7258:	cmp	r0, #0
    725c:	strne	r5, [r0]
    7260:	ldr	r2, [fp, #-4]
    7264:	mov	r3, #2
    7268:	cmp	r2, #1
    726c:	movcc	r1, r2
    7270:	movcs	r1, #1
    7274:	sub	r2, r2, r1
    7278:	cmp	r2, #2
    727c:	mvn	r0, #-1073741824	; 0xc0000000
    7280:	movcs	r2, r3
    7284:	add	r1, fp, r1, lsl r3
    7288:	str	r0, [sp, #4]
    728c:	str	r3, [sp]
    7290:	mov	r0, r4
    7294:	mov	r3, #4
    7298:	bl	0 <flatcc_builder_create_vector>
    729c:	subs	r5, r0, #0
    72a0:	beq	72b8 <test_clone_slice+0x448>
    72a4:	mov	r1, #9
    72a8:	mov	r0, r4
    72ac:	bl	0 <flatcc_builder_table_add_offset>
    72b0:	cmp	r0, #0
    72b4:	strne	r5, [r0]
    72b8:	mov	r2, #1
    72bc:	add	r1, r9, #12
    72c0:	mov	r0, r4
    72c4:	bl	0 <flatcc_builder_check_required>
    72c8:	cmp	r0, #0
    72cc:	beq	7840 <test_clone_slice+0x9d0>
    72d0:	mov	r0, r4
    72d4:	bl	0 <flatcc_builder_end_table>
    72d8:	subs	r5, r0, #0
    72dc:	beq	7320 <test_clone_slice+0x4b0>
    72e0:	mov	r3, #1
    72e4:	mov	r2, r3
    72e8:	mov	r1, #7
    72ec:	mov	r0, r4
    72f0:	bl	0 <flatcc_builder_table_add>
    72f4:	subs	r3, r0, #0
    72f8:	str	r3, [sp, #12]
    72fc:	beq	7320 <test_clone_slice+0x4b0>
    7300:	mov	r1, #8
    7304:	mov	r0, r4
    7308:	bl	0 <flatcc_builder_table_add_offset>
    730c:	cmp	r0, #0
    7310:	movne	r2, #1
    7314:	ldrne	r3, [sp, #12]
    7318:	strbne	r2, [r3]
    731c:	strne	r5, [r0]
    7320:	ldr	r2, [r7, #-4]
    7324:	mvn	r0, #0
    7328:	cmp	r2, #3
    732c:	movcc	r1, r2
    7330:	movcs	r1, #3
    7334:	mov	r3, #1
    7338:	sub	r2, r2, r1
    733c:	str	r0, [sp, #4]
    7340:	add	r1, r7, r1
    7344:	str	r3, [sp]
    7348:	mov	r0, r4
    734c:	bl	0 <flatcc_builder_create_vector>
    7350:	subs	r5, r0, #0
    7354:	beq	736c <test_clone_slice+0x4fc>
    7358:	mov	r1, #24
    735c:	mov	r0, r4
    7360:	bl	0 <flatcc_builder_table_add_offset>
    7364:	cmp	r0, #0
    7368:	strne	r5, [r0]
    736c:	ldr	r3, [r6]
    7370:	sub	r3, r6, r3
    7374:	ldrh	r2, [r3]
    7378:	cmp	r2, #5
    737c:	movls	r2, #0
    7380:	bls	7390 <test_clone_slice+0x520>
    7384:	ldrh	r2, [r3, #4]
    7388:	cmp	r2, #0
    738c:	addne	r2, r6, r2
    7390:	mov	r3, #16
    7394:	str	r3, [sp]
    7398:	mov	r1, #0
    739c:	mov	r3, #32
    73a0:	mov	r0, r4
    73a4:	bl	0 <flatcc_builder_table_add_copy>
    73a8:	mvn	r0, #-1073741824	; 0xc0000000
    73ac:	mov	r3, #2
    73b0:	ldr	r2, [fp, #-4]
    73b4:	mov	r1, fp
    73b8:	str	r0, [sp, #4]
    73bc:	str	r3, [sp]
    73c0:	mov	r0, r4
    73c4:	mov	r3, #4
    73c8:	bl	0 <flatcc_builder_create_vector>
    73cc:	subs	r5, r0, #0
    73d0:	beq	73e8 <test_clone_slice+0x578>
    73d4:	mov	r1, #9
    73d8:	mov	r0, r4
    73dc:	bl	0 <flatcc_builder_table_add_offset>
    73e0:	cmp	r0, #0
    73e4:	strne	r5, [r0]
    73e8:	add	r1, r9, #12
    73ec:	mov	r2, #1
    73f0:	mov	r0, r4
    73f4:	bl	0 <flatcc_builder_check_required>
    73f8:	cmp	r0, #0
    73fc:	beq	7840 <test_clone_slice+0x9d0>
    7400:	mov	r0, r4
    7404:	bl	0 <flatcc_builder_end_table>
    7408:	mov	r1, r0
    740c:	mov	r0, r4
    7410:	bl	0 <flatcc_builder_end_buffer>
    7414:	add	r1, sp, #20
    7418:	mov	r0, r4
    741c:	bl	0 <flatcc_builder_get_direct_buffer>
    7420:	ldr	r3, [sl]
    7424:	ldr	r2, [sp, #20]
    7428:	mov	r4, r0
    742c:	mov	r1, r0
    7430:	ldr	r0, [pc, #1160]	; 78c0 <test_clone_slice+0xa50>
    7434:	bl	20 <hexdump>
    7438:	cmp	r4, #0
    743c:	beq	7450 <test_clone_slice+0x5e0>
    7440:	ldr	r3, [pc, #1108]	; 789c <test_clone_slice+0xa2c>
    7444:	ldr	r2, [r4, #4]
    7448:	cmp	r2, r3
    744c:	beq	7454 <test_clone_slice+0x5e4>
    7450:	bl	220 <flatbuffers_string_vec_at.part.20+0x1c>
    7454:	ldr	r3, [r4]
    7458:	adds	r5, r4, r3
    745c:	beq	7450 <test_clone_slice+0x5e0>
    7460:	ldr	r6, [r4, r3]
    7464:	sub	r6, r5, r6
    7468:	ldrh	r7, [r6]
    746c:	cmp	r7, #11
    7470:	bls	7098 <test_clone_slice+0x228>
    7474:	ldrh	r0, [r6, #10]
    7478:	cmp	r0, #0
    747c:	beq	7098 <test_clone_slice+0x228>
    7480:	ldr	r3, [r5, r0]
    7484:	add	r0, r5, r0
    7488:	add	r3, r3, #4
    748c:	add	r0, r0, r3
    7490:	ldr	r1, [pc, #1008]	; 7888 <test_clone_slice+0xa18>
    7494:	bl	0 <strcmp>
    7498:	cmp	r0, #0
    749c:	bne	7770 <test_clone_slice+0x900>
    74a0:	cmp	r7, #25
    74a4:	bhi	74ac <test_clone_slice+0x63c>
    74a8:	bl	204 <flatbuffers_string_vec_at.part.20>
    74ac:	ldrh	r3, [r6, #24]
    74b0:	cmp	r3, #0
    74b4:	beq	74a8 <test_clone_slice+0x638>
    74b8:	ldr	r2, [r5, r3]
    74bc:	add	r3, r5, r3
    74c0:	add	r2, r2, #4
    74c4:	adds	r4, r3, r2
    74c8:	beq	74a8 <test_clone_slice+0x638>
    74cc:	ldr	r9, [r4, #-4]
    74d0:	cmp	r9, #0
    74d4:	beq	74a8 <test_clone_slice+0x638>
    74d8:	ldr	r0, [r3, r2]
    74dc:	ldr	r1, [pc, #932]	; 7888 <test_clone_slice+0xa18>
    74e0:	add	r0, r0, #4
    74e4:	add	r0, r4, r0
    74e8:	bl	0 <strcmp>
    74ec:	cmp	r0, #0
    74f0:	bne	7820 <test_clone_slice+0x9b0>
    74f4:	cmp	r9, #1
    74f8:	bls	74a8 <test_clone_slice+0x638>
    74fc:	ldr	r0, [r4, #4]
    7500:	add	r0, r0, #8
    7504:	adds	r0, r4, r0
    7508:	beq	7780 <test_clone_slice+0x910>
    750c:	ldr	r3, [r0, #-4]
    7510:	cmp	r3, #6
    7514:	bne	7780 <test_clone_slice+0x910>
    7518:	ldr	r1, [pc, #932]	; 78c4 <test_clone_slice+0xa54>
    751c:	bl	0 <strcmp>
    7520:	cmp	r0, #0
    7524:	bne	7830 <test_clone_slice+0x9c0>
    7528:	cmp	r9, #2
    752c:	beq	74a8 <test_clone_slice+0x638>
    7530:	ldr	r0, [r4, #8]
    7534:	add	r0, r0, #12
    7538:	adds	r0, r4, r0
    753c:	beq	7790 <test_clone_slice+0x920>
    7540:	ldr	r3, [r0, #-4]
    7544:	cmp	r3, #3
    7548:	bne	7790 <test_clone_slice+0x920>
    754c:	ldr	r1, [pc, #884]	; 78c8 <test_clone_slice+0xa58>
    7550:	bl	0 <strcmp>
    7554:	cmp	r0, #0
    7558:	bne	77a0 <test_clone_slice+0x930>
    755c:	ldrh	r3, [r6, #20]
    7560:	cmp	r3, #0
    7564:	beq	786c <test_clone_slice+0x9fc>
    7568:	ldr	r2, [r5, r3]
    756c:	add	r3, r5, r3
    7570:	adds	r4, r3, r2
    7574:	beq	786c <test_clone_slice+0x9fc>
    7578:	ldr	r9, [r3, r2]
    757c:	sub	r9, r4, r9
    7580:	ldrh	sl, [r9]
    7584:	cmp	sl, #11
    7588:	bls	7098 <test_clone_slice+0x228>
    758c:	ldrh	r0, [r9, #10]
    7590:	cmp	r0, #0
    7594:	beq	7098 <test_clone_slice+0x228>
    7598:	ldr	r3, [r4, r0]
    759c:	add	r0, r4, r0
    75a0:	add	r3, r3, #4
    75a4:	add	r0, r0, r3
    75a8:	ldr	r1, [pc, #796]	; 78cc <test_clone_slice+0xa5c>
    75ac:	bl	0 <strcmp>
    75b0:	cmp	r0, #0
    75b4:	bne	77b0 <test_clone_slice+0x940>
    75b8:	cmp	sl, #53	; 0x35
    75bc:	bhi	75e0 <test_clone_slice+0x770>
    75c0:	ldr	r0, [pc, #776]	; 78d0 <test_clone_slice+0xa60>
    75c4:	bl	0 <puts>
    75c8:	mvn	r7, #0
    75cc:	mov	r0, r8
    75d0:	bl	0 <flatcc_builder_aligned_free>
    75d4:	mov	r0, r7
    75d8:	add	sp, sp, #36	; 0x24
    75dc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    75e0:	ldrh	r0, [r9, #52]	; 0x34
    75e4:	cmp	r0, #0
    75e8:	beq	75c0 <test_clone_slice+0x750>
    75ec:	ldr	r3, [r4, r0]
    75f0:	add	r0, r4, r0
    75f4:	add	r3, r3, #4
    75f8:	adds	r0, r0, r3
    75fc:	beq	75c0 <test_clone_slice+0x750>
    7600:	ldr	r2, [r0, #-4]
    7604:	cmp	r2, #7
    7608:	bne	75c0 <test_clone_slice+0x750>
    760c:	add	r1, sp, #24
    7610:	bl	0 <memcmp>
    7614:	cmp	r0, #0
    7618:	bne	77c0 <test_clone_slice+0x950>
    761c:	cmp	r7, #53	; 0x35
    7620:	bhi	7634 <test_clone_slice+0x7c4>
    7624:	ldr	r0, [pc, #680]	; 78d4 <test_clone_slice+0xa64>
    7628:	bl	0 <puts>
    762c:	mvn	r7, #0
    7630:	b	75cc <test_clone_slice+0x75c>
    7634:	ldrh	r0, [r6, #52]	; 0x34
    7638:	cmp	r0, #0
    763c:	beq	7624 <test_clone_slice+0x7b4>
    7640:	ldr	r3, [r5, r0]
    7644:	add	r0, r5, r0
    7648:	add	r3, r3, #4
    764c:	adds	r0, r0, r3
    7650:	beq	7624 <test_clone_slice+0x7b4>
    7654:	ldr	r2, [r0, #-4]
    7658:	cmp	r2, #4
    765c:	bne	7624 <test_clone_slice+0x7b4>
    7660:	add	r1, sp, #27
    7664:	bl	0 <memcmp>
    7668:	subs	r7, r0, #0
    766c:	bne	77d0 <test_clone_slice+0x960>
    7670:	ldrh	r3, [r6, #4]
    7674:	cmp	r3, #0
    7678:	beq	7728 <test_clone_slice+0x8b8>
    767c:	add	r3, r5, r3
    7680:	vldr	s15, [pc, #504]	; 7880 <test_clone_slice+0xa10>
    7684:	vldr	s14, [r3]
    7688:	vcmp.f32	s14, s15
    768c:	vmrs	APSR_nzcv, fpscr
    7690:	bne	77f0 <test_clone_slice+0x980>
    7694:	ldrh	r3, [r6, #22]
    7698:	cmp	r3, #0
    769c:	beq	77e0 <test_clone_slice+0x970>
    76a0:	ldr	r2, [r5, r3]
    76a4:	add	r5, r5, r3
    76a8:	add	r3, r2, #4
    76ac:	adds	r2, r5, r3
    76b0:	beq	77e0 <test_clone_slice+0x970>
    76b4:	ldr	r1, [r2, #-4]
    76b8:	cmp	r1, #2
    76bc:	bne	77e0 <test_clone_slice+0x970>
    76c0:	ldrsh	r3, [r5, r3]
    76c4:	cmp	r3, #22
    76c8:	bne	7800 <test_clone_slice+0x990>
    76cc:	cmn	r2, #4
    76d0:	beq	7760 <test_clone_slice+0x8f0>
    76d4:	ldrsh	r3, [r2, #4]
    76d8:	cmp	r3, #44	; 0x2c
    76dc:	bne	7760 <test_clone_slice+0x8f0>
    76e0:	ldrh	r2, [r9, #22]
    76e4:	cmp	r2, #0
    76e8:	beq	7810 <test_clone_slice+0x9a0>
    76ec:	ldr	r3, [r4, r2]
    76f0:	add	r4, r4, r2
    76f4:	add	r3, r3, #4
    76f8:	adds	r2, r4, r3
    76fc:	beq	7810 <test_clone_slice+0x9a0>
    7700:	ldr	r2, [r2, #-4]
    7704:	cmp	r2, #1
    7708:	bne	7810 <test_clone_slice+0x9a0>
    770c:	ldrsh	r3, [r4, r3]
    7710:	cmp	r3, #44	; 0x2c
    7714:	beq	75cc <test_clone_slice+0x75c>
    7718:	ldr	r0, [pc, #440]	; 78d8 <test_clone_slice+0xa68>
    771c:	bl	0 <puts>
    7720:	mvn	r7, #0
    7724:	b	75cc <test_clone_slice+0x75c>
    7728:	ldr	r3, [r3]
    772c:	udf	#0
    7730:	mov	r0, r4
    7734:	ldr	r6, [r8]
    7738:	bl	0 <flatcc_builder_reset>
    773c:	mov	r3, #0
    7740:	mov	r2, r3
    7744:	ldr	r1, [pc, #312]	; 7884 <test_clone_slice+0xa14>
    7748:	mov	r0, r4
    774c:	bl	0 <flatcc_builder_start_buffer>
    7750:	add	r6, r8, r6
    7754:	cmp	r0, #0
    7758:	bne	7040 <test_clone_slice+0x1d0>
    775c:	b	7034 <test_clone_slice+0x1c4>
    7760:	ldr	r0, [pc, #372]	; 78dc <test_clone_slice+0xa6c>
    7764:	bl	0 <puts>
    7768:	mvn	r7, #0
    776c:	b	75cc <test_clone_slice+0x75c>
    7770:	ldr	r0, [pc, #360]	; 78e0 <test_clone_slice+0xa70>
    7774:	bl	0 <puts>
    7778:	mvn	r7, #0
    777c:	b	75cc <test_clone_slice+0x75c>
    7780:	ldr	r0, [pc, #348]	; 78e4 <test_clone_slice+0xa74>
    7784:	bl	0 <puts>
    7788:	mvn	r7, #0
    778c:	b	75cc <test_clone_slice+0x75c>
    7790:	ldr	r0, [pc, #336]	; 78e8 <test_clone_slice+0xa78>
    7794:	bl	0 <puts>
    7798:	mvn	r7, #0
    779c:	b	75cc <test_clone_slice+0x75c>
    77a0:	ldr	r0, [pc, #324]	; 78ec <test_clone_slice+0xa7c>
    77a4:	bl	0 <puts>
    77a8:	mvn	r7, #0
    77ac:	b	75cc <test_clone_slice+0x75c>
    77b0:	ldr	r0, [pc, #312]	; 78f0 <test_clone_slice+0xa80>
    77b4:	bl	0 <printf>
    77b8:	mvn	r7, #0
    77bc:	b	75cc <test_clone_slice+0x75c>
    77c0:	ldr	r0, [pc, #300]	; 78f4 <test_clone_slice+0xa84>
    77c4:	bl	0 <puts>
    77c8:	mvn	r7, #0
    77cc:	b	75cc <test_clone_slice+0x75c>
    77d0:	ldr	r0, [pc, #288]	; 78f8 <test_clone_slice+0xa88>
    77d4:	bl	0 <puts>
    77d8:	mvn	r7, #0
    77dc:	b	75cc <test_clone_slice+0x75c>
    77e0:	ldr	r0, [pc, #276]	; 78fc <test_clone_slice+0xa8c>
    77e4:	bl	0 <puts>
    77e8:	mvn	r7, #0
    77ec:	b	75cc <test_clone_slice+0x75c>
    77f0:	ldr	r0, [pc, #264]	; 7900 <test_clone_slice+0xa90>
    77f4:	bl	0 <puts>
    77f8:	mvn	r7, #0
    77fc:	b	75cc <test_clone_slice+0x75c>
    7800:	ldr	r0, [pc, #252]	; 7904 <test_clone_slice+0xa94>
    7804:	bl	0 <puts>
    7808:	mvn	r7, #0
    780c:	b	75cc <test_clone_slice+0x75c>
    7810:	ldr	r0, [pc, #240]	; 7908 <test_clone_slice+0xa98>
    7814:	bl	0 <puts>
    7818:	mvn	r7, #0
    781c:	b	75cc <test_clone_slice+0x75c>
    7820:	ldr	r0, [pc, #228]	; 790c <test_clone_slice+0xa9c>
    7824:	bl	0 <puts>
    7828:	mvn	r7, #0
    782c:	b	75cc <test_clone_slice+0x75c>
    7830:	ldr	r0, [pc, #216]	; 7910 <test_clone_slice+0xaa0>
    7834:	bl	0 <puts>
    7838:	mvn	r7, #0
    783c:	b	75cc <test_clone_slice+0x75c>
    7840:	bl	540 <MyGame_Example_TestJSONPrefixParsing_verify_table+0x1c>
    7844:	ldr	r3, [pc, #84]	; 78a0 <test_clone_slice+0xa30>
    7848:	ldr	r2, [pc, #196]	; 7914 <test_clone_slice+0xaa4>
    784c:	ldr	r1, [pc, #84]	; 78a8 <test_clone_slice+0xa38>
    7850:	ldr	r0, [pc, #192]	; 7918 <test_clone_slice+0xaa8>
    7854:	bl	0 <__assert_fail>
    7858:	ldr	r3, [pc, #64]	; 78a0 <test_clone_slice+0xa30>
    785c:	ldr	r2, [pc, #184]	; 791c <test_clone_slice+0xaac>
    7860:	ldr	r1, [pc, #64]	; 78a8 <test_clone_slice+0xa38>
    7864:	ldr	r0, [pc, #180]	; 7920 <test_clone_slice+0xab0>
    7868:	bl	0 <__assert_fail>
    786c:	ldr	r3, [pc, #44]	; 78a0 <test_clone_slice+0xa30>
    7870:	mov	r2, #1664	; 0x680
    7874:	ldr	r1, [pc, #44]	; 78a8 <test_clone_slice+0xa38>
    7878:	ldr	r0, [pc, #164]	; 7924 <test_clone_slice+0xab4>
    787c:	bl	0 <__assert_fail>
    7880:	.word	0xc2293333
    7884:	.word	0x0000054c
    7888:	.word	0x00001c28
    788c:	.word	0x00000430
    7890:	.word	0xc2293333
    7894:	.word	0x00000000
    7898:	.word	0x00001c34
    789c:	.word	0x534e4f4d
    78a0:	.word	0x00000520
    78a4:	.word	0x00000646
    78a8:	.word	0x00000c90
    78ac:	.word	0x00001c58
    78b0:	.word	0x00000244
    78b4:	.word	0x000002bb
    78b8:	.word	0x00000024
    78bc:	.word	0x00000164
    78c0:	.word	0x00001c68
    78c4:	.word	0x00001ce0
    78c8:	.word	0x00001d24
    78cc:	.word	0x00001d40
    78d0:	.word	0x00001d7c
    78d4:	.word	0x00001db8
    78d8:	.word	0x00001e9c
    78dc:	.word	0x00001e60
    78e0:	.word	0x00001c80
    78e4:	.word	0x00001cbc
    78e8:	.word	0x00001d04
    78ec:	.word	0x00001d28
    78f0:	.word	0x00001d4c
    78f4:	.word	0x00001d98
    78f8:	.word	0x00001dd4
    78fc:	.word	0x00001e10
    7900:	.word	0x00001df4
    7904:	.word	0x00001e44
    7908:	.word	0x00001e7c
    790c:	.word	0x00001c9c
    7910:	.word	0x00001ce8
    7914:	.word	0x00000648
    7918:	.word	0x00001c60
    791c:	.word	0x00000644
    7920:	.word	0x00001c50
    7924:	.word	0x00000cec

00007928 <test_create_add_field>:
    7928:	push	{r4, r5, r6, lr}
    792c:	sub	sp, sp, #8
    7930:	mov	r4, r0
    7934:	bl	0 <flatcc_builder_reset>
    7938:	mov	r3, #0
    793c:	mov	r0, r4
    7940:	mov	r2, r3
    7944:	ldr	r1, [pc, #588]	; 7b98 <test_create_add_field+0x270>
    7948:	bl	0 <flatcc_builder_start_buffer>
    794c:	cmp	r0, #0
    7950:	bne	7960 <test_create_add_field+0x38>
    7954:	mov	r1, #36	; 0x24
    7958:	mov	r0, r4
    795c:	bl	0 <flatcc_builder_start_table>
    7960:	ldr	r1, [pc, #564]	; 7b9c <test_create_add_field+0x274>
    7964:	mov	r0, r4
    7968:	bl	0 <flatcc_builder_create_string_str>
    796c:	subs	r5, r0, #0
    7970:	beq	7988 <test_create_add_field+0x60>
    7974:	mov	r1, #3
    7978:	mov	r0, r4
    797c:	bl	0 <flatcc_builder_table_add_offset>
    7980:	cmp	r0, #0
    7984:	strne	r5, [r0]
    7988:	ldr	r1, [pc, #528]	; 7ba0 <test_create_add_field+0x278>
    798c:	mov	r0, r4
    7990:	bl	0 <flatcc_builder_create_string_str>
    7994:	mov	r1, #3
    7998:	mov	r5, r0
    799c:	mov	r0, r4
    79a0:	bl	0 <flatcc_builder_start_table>
    79a4:	subs	r6, r0, #0
    79a8:	bne	79dc <test_create_add_field+0xb4>
    79ac:	mov	r3, #8
    79b0:	mov	r2, r3
    79b4:	mov	r1, #1
    79b8:	mov	r0, r4
    79bc:	bl	0 <flatcc_builder_table_add>
    79c0:	cmp	r0, #0
    79c4:	beq	79dc <test_create_add_field+0xb4>
    79c8:	mvn	r2, #99	; 0x63
    79cc:	mvn	r3, #0
    79d0:	cmp	r5, #0
    79d4:	strd	r2, [r0]
    79d8:	bne	7af0 <test_create_add_field+0x1c8>
    79dc:	mov	r2, #1
    79e0:	ldr	r1, [pc, #444]	; 7ba4 <test_create_add_field+0x27c>
    79e4:	mov	r0, r4
    79e8:	bl	0 <flatcc_builder_check_required>
    79ec:	cmp	r0, #0
    79f0:	beq	7b90 <test_create_add_field+0x268>
    79f4:	mov	r0, r4
    79f8:	bl	0 <flatcc_builder_end_table>
    79fc:	mov	r1, r0
    7a00:	mov	r0, r4
    7a04:	bl	0 <flatcc_builder_end_buffer>
    7a08:	mov	r0, r4
    7a0c:	add	r1, sp, #4
    7a10:	bl	0 <flatcc_builder_finalize_aligned_buffer>
    7a14:	subs	r4, r0, #0
    7a18:	beq	7a2c <test_create_add_field+0x104>
    7a1c:	ldr	r3, [pc, #388]	; 7ba8 <test_create_add_field+0x280>
    7a20:	ldr	r2, [r4, #4]
    7a24:	cmp	r2, r3
    7a28:	beq	7a40 <test_create_add_field+0x118>
    7a2c:	ldr	r3, [pc, #376]	; 7bac <test_create_add_field+0x284>
    7a30:	mov	r2, #716	; 0x2cc
    7a34:	ldr	r1, [pc, #372]	; 7bb0 <test_create_add_field+0x288>
    7a38:	ldr	r0, [pc, #372]	; 7bb4 <test_create_add_field+0x28c>
    7a3c:	bl	0 <__assert_fail>
    7a40:	ldr	r2, [r4]
    7a44:	adds	r3, r4, r2
    7a48:	beq	7a2c <test_create_add_field+0x104>
    7a4c:	ldr	r2, [r4, r2]
    7a50:	sub	r2, r3, r2
    7a54:	ldrh	r1, [r2]
    7a58:	cmp	r1, #29
    7a5c:	bls	7b7c <test_create_add_field+0x254>
    7a60:	ldrh	r0, [r2, #28]
    7a64:	cmp	r0, #0
    7a68:	bne	7b6c <test_create_add_field+0x244>
    7a6c:	cmp	r1, #33	; 0x21
    7a70:	bls	7b7c <test_create_add_field+0x254>
    7a74:	ldrh	r1, [r2, #32]
    7a78:	cmp	r1, #0
    7a7c:	beq	7b7c <test_create_add_field+0x254>
    7a80:	ldr	r2, [r3, r1]
    7a84:	add	r3, r3, r1
    7a88:	adds	r1, r3, r2
    7a8c:	beq	7b7c <test_create_add_field+0x254>
    7a90:	ldr	r3, [r3, r2]
    7a94:	sub	r3, r1, r3
    7a98:	ldrh	r2, [r3]
    7a9c:	cmp	r2, #7
    7aa0:	bhi	7ac4 <test_create_add_field+0x19c>
    7aa4:	ldr	r0, [pc, #268]	; 7bb8 <test_create_add_field+0x290>
    7aa8:	bl	0 <puts>
    7aac:	mvn	r5, #0
    7ab0:	mov	r0, r4
    7ab4:	bl	0 <flatcc_builder_aligned_free>
    7ab8:	mov	r0, r5
    7abc:	add	sp, sp, #8
    7ac0:	pop	{r4, r5, r6, pc}
    7ac4:	ldrh	r3, [r3, #6]
    7ac8:	cmp	r3, #0
    7acc:	beq	7aa4 <test_create_add_field+0x17c>
    7ad0:	ldrd	r0, [r1, r3]
    7ad4:	mvn	r3, #0
    7ad8:	mvn	r2, #99	; 0x63
    7adc:	cmp	r1, r3
    7ae0:	cmpeq	r0, r2
    7ae4:	moveq	r5, #0
    7ae8:	beq	7ab0 <test_create_add_field+0x188>
    7aec:	b	7aa4 <test_create_add_field+0x17c>
    7af0:	mov	r1, r6
    7af4:	mov	r0, r4
    7af8:	bl	0 <flatcc_builder_table_add_offset>
    7afc:	cmp	r0, #0
    7b00:	beq	79dc <test_create_add_field+0xb4>
    7b04:	mov	r3, #2
    7b08:	str	r5, [r0]
    7b0c:	mov	r2, r3
    7b10:	mov	r1, r3
    7b14:	mov	r0, r4
    7b18:	bl	0 <flatcc_builder_table_add>
    7b1c:	cmp	r0, #0
    7b20:	beq	79dc <test_create_add_field+0xb4>
    7b24:	mov	r3, #2
    7b28:	strh	r3, [r0]
    7b2c:	mov	r2, r6
    7b30:	ldr	r1, [pc, #132]	; 7bbc <test_create_add_field+0x294>
    7b34:	mov	r0, r4
    7b38:	bl	0 <flatcc_builder_check_required>
    7b3c:	cmp	r0, #0
    7b40:	beq	7b94 <test_create_add_field+0x26c>
    7b44:	mov	r0, r4
    7b48:	bl	0 <flatcc_builder_end_table>
    7b4c:	subs	r5, r0, #0
    7b50:	beq	79dc <test_create_add_field+0xb4>
    7b54:	mov	r1, #14
    7b58:	mov	r0, r4
    7b5c:	bl	0 <flatcc_builder_table_add_offset>
    7b60:	cmp	r0, #0
    7b64:	strne	r5, [r0]
    7b68:	b	79dc <test_create_add_field+0xb4>
    7b6c:	ldr	r0, [pc, #76]	; 7bc0 <test_create_add_field+0x298>
    7b70:	bl	0 <puts>
    7b74:	mvn	r5, #0
    7b78:	b	7ab0 <test_create_add_field+0x188>
    7b7c:	ldr	r3, [pc, #64]	; 7bc4 <test_create_add_field+0x29c>
    7b80:	mov	r2, #608	; 0x260
    7b84:	ldr	r1, [pc, #36]	; 7bb0 <test_create_add_field+0x288>
    7b88:	ldr	r0, [pc, #36]	; 7bb4 <test_create_add_field+0x28c>
    7b8c:	bl	0 <__assert_fail>
    7b90:	bl	540 <MyGame_Example_TestJSONPrefixParsing_verify_table+0x1c>
    7b94:	bl	564 <MyGame_Example_TestJSONPrefixParsing_verify_table+0x40>
    7b98:	.word	0x0000054c
    7b9c:	.word	0x00000674
    7ba0:	.word	0x00001ec0
    7ba4:	.word	0x0000043c
    7ba8:	.word	0x534e4f4d
    7bac:	.word	0x00000534
    7bb0:	.word	0x00000024
    7bb4:	.word	0x00000090
    7bb8:	.word	0x00001ef8
    7bbc:	.word	0x000004dc
    7bc0:	.word	0x00001ec8
    7bc4:	.word	0x0000055c

00007bc8 <test_union_vector>:
    7bc8:	push	{r4, r5, r6, r7, lr}
    7bcc:	sub	sp, sp, #28
    7bd0:	mov	r4, r0
    7bd4:	bl	0 <flatcc_builder_reset>
    7bd8:	mov	r3, #0
    7bdc:	mov	r0, r4
    7be0:	mov	r2, r3
    7be4:	ldr	r1, [pc, #788]	; 7f00 <test_union_vector+0x338>
    7be8:	bl	0 <flatcc_builder_start_buffer>
    7bec:	cmp	r0, #0
    7bf0:	bne	7c00 <test_union_vector+0x38>
    7bf4:	mov	r1, #36	; 0x24
    7bf8:	mov	r0, r4
    7bfc:	bl	0 <flatcc_builder_start_table>
    7c00:	ldr	r1, [pc, #764]	; 7f04 <test_union_vector+0x33c>
    7c04:	mov	r0, r4
    7c08:	bl	0 <flatcc_builder_create_string_str>
    7c0c:	subs	r5, r0, #0
    7c10:	beq	7c28 <test_union_vector+0x60>
    7c14:	mov	r1, #3
    7c18:	mov	r0, r4
    7c1c:	bl	0 <flatcc_builder_table_add_offset>
    7c20:	cmp	r0, #0
    7c24:	strne	r5, [r0]
    7c28:	mov	r1, #4
    7c2c:	mov	r0, r4
    7c30:	bl	0 <flatcc_builder_start_table>
    7c34:	cmp	r0, #0
    7c38:	bne	7c68 <test_union_vector+0xa0>
    7c3c:	ldr	r5, [pc, #708]	; 7f08 <test_union_vector+0x340>
    7c40:	mov	r2, r0
    7c44:	add	r1, r5, #4
    7c48:	mov	r0, r4
    7c4c:	bl	0 <flatcc_builder_check_required>
    7c50:	cmp	r0, #0
    7c54:	beq	7eec <test_union_vector+0x324>
    7c58:	mov	r0, r4
    7c5c:	bl	0 <flatcc_builder_end_table>
    7c60:	mov	r6, r0
    7c64:	b	7c6c <test_union_vector+0xa4>
    7c68:	mov	r6, #0
    7c6c:	mov	r0, r4
    7c70:	bl	0 <flatcc_builder_start_union_vector>
    7c74:	add	r3, sp, #24
    7c78:	mov	r5, #2
    7c7c:	str	r6, [sp, #20]
    7c80:	strb	r5, [sp, #16]
    7c84:	mov	r0, r4
    7c88:	ldmdb	r3, {r1, r2}
    7c8c:	bl	0 <flatcc_builder_union_vector_push>
    7c90:	mov	r1, r4
    7c94:	add	r0, sp, #8
    7c98:	bl	0 <flatcc_builder_end_union_vector>
    7c9c:	mov	r1, #4
    7ca0:	mov	r0, r4
    7ca4:	bl	0 <flatcc_builder_start_table>
    7ca8:	ldr	r6, [sp, #8]
    7cac:	ldr	r7, [sp, #12]
    7cb0:	cmp	r7, #0
    7cb4:	cmpne	r6, #0
    7cb8:	bne	7e30 <test_union_vector+0x268>
    7cbc:	mov	r2, #0
    7cc0:	ldr	r1, [pc, #580]	; 7f0c <test_union_vector+0x344>
    7cc4:	mov	r0, r4
    7cc8:	bl	0 <flatcc_builder_check_required>
    7ccc:	cmp	r0, #0
    7cd0:	beq	7ed8 <test_union_vector+0x310>
    7cd4:	mov	r0, r4
    7cd8:	bl	0 <flatcc_builder_end_table>
    7cdc:	subs	r5, r0, #0
    7ce0:	beq	7d1c <test_union_vector+0x154>
    7ce4:	mov	r3, #1
    7ce8:	mov	r2, r3
    7cec:	mov	r1, #7
    7cf0:	mov	r0, r4
    7cf4:	bl	0 <flatcc_builder_table_add>
    7cf8:	subs	r6, r0, #0
    7cfc:	beq	7d1c <test_union_vector+0x154>
    7d00:	mov	r1, #8
    7d04:	mov	r0, r4
    7d08:	bl	0 <flatcc_builder_table_add_offset>
    7d0c:	cmp	r0, #0
    7d10:	movne	r3, #4
    7d14:	strbne	r3, [r6]
    7d18:	strne	r5, [r0]
    7d1c:	mov	r2, #1
    7d20:	ldr	r1, [pc, #488]	; 7f10 <test_union_vector+0x348>
    7d24:	mov	r0, r4
    7d28:	bl	0 <flatcc_builder_check_required>
    7d2c:	cmp	r0, #0
    7d30:	beq	7ed4 <test_union_vector+0x30c>
    7d34:	mov	r0, r4
    7d38:	bl	0 <flatcc_builder_end_table>
    7d3c:	mov	r1, r0
    7d40:	mov	r0, r4
    7d44:	bl	0 <flatcc_builder_end_buffer>
    7d48:	mov	r0, r4
    7d4c:	add	r1, sp, #4
    7d50:	bl	0 <flatcc_builder_finalize_aligned_buffer>
    7d54:	ldr	r3, [pc, #440]	; 7f14 <test_union_vector+0x34c>
    7d58:	ldr	r2, [pc, #416]	; 7f00 <test_union_vector+0x338>
    7d5c:	ldr	r1, [sp, #4]
    7d60:	mov	r4, r0
    7d64:	bl	0 <flatcc_verify_table_as_root>
    7d68:	subs	r5, r0, #0
    7d6c:	bne	7ebc <test_union_vector+0x2f4>
    7d70:	cmp	r4, #0
    7d74:	beq	7d88 <test_union_vector+0x1c0>
    7d78:	ldr	r3, [pc, #408]	; 7f18 <test_union_vector+0x350>
    7d7c:	ldr	r2, [r4, #4]
    7d80:	cmp	r2, r3
    7d84:	beq	7d8c <test_union_vector+0x1c4>
    7d88:	bl	1d0 <elapsed_realtime+0x6c>
    7d8c:	ldr	r3, [r4]
    7d90:	adds	r2, r4, r3
    7d94:	beq	7d88 <test_union_vector+0x1c0>
    7d98:	ldr	r3, [r4, r3]
    7d9c:	sub	r3, r2, r3
    7da0:	ldrh	r1, [r3]
    7da4:	cmp	r1, #19
    7da8:	bls	7e24 <test_union_vector+0x25c>
    7dac:	ldrh	r0, [r3, #18]
    7db0:	cmp	r0, #0
    7db4:	beq	7e24 <test_union_vector+0x25c>
    7db8:	ldrb	r0, [r2, r0]
    7dbc:	cmp	r0, #4
    7dc0:	bne	7e24 <test_union_vector+0x25c>
    7dc4:	cmp	r1, #21
    7dc8:	bls	7e08 <test_union_vector+0x240>
    7dcc:	ldrh	r1, [r3, #20]
    7dd0:	cmp	r1, #0
    7dd4:	beq	7e08 <test_union_vector+0x240>
    7dd8:	ldr	r3, [r2, r1]
    7ddc:	add	r2, r2, r1
    7de0:	adds	r1, r2, r3
    7de4:	beq	7e08 <test_union_vector+0x240>
    7de8:	ldr	r3, [r2, r3]
    7dec:	sub	r3, r1, r3
    7df0:	ldrh	r2, [r3]
    7df4:	cmp	r2, #11
    7df8:	bls	7e60 <test_union_vector+0x298>
    7dfc:	ldrh	r2, [r3, #10]
    7e00:	cmp	r2, #0
    7e04:	beq	7e68 <test_union_vector+0x2a0>
    7e08:	ldr	r0, [pc, #268]	; 7f1c <test_union_vector+0x354>
    7e0c:	bl	0 <puts>
    7e10:	mov	r0, r4
    7e14:	bl	0 <flatcc_builder_aligned_free>
    7e18:	mov	r0, r5
    7e1c:	add	sp, sp, #28
    7e20:	pop	{r4, r5, r6, r7, pc}
    7e24:	ldr	r0, [pc, #244]	; 7f20 <test_union_vector+0x358>
    7e28:	bl	0 <printf>
    7e2c:	b	7e10 <test_union_vector+0x248>
    7e30:	mov	r1, r5
    7e34:	mov	r0, r4
    7e38:	bl	0 <flatcc_builder_table_add_offset>
    7e3c:	cmp	r0, #0
    7e40:	beq	7cbc <test_union_vector+0xf4>
    7e44:	str	r6, [r0]
    7e48:	mov	r1, #3
    7e4c:	mov	r0, r4
    7e50:	bl	0 <flatcc_builder_table_add_offset>
    7e54:	cmp	r0, #0
    7e58:	strne	r7, [r0]
    7e5c:	b	7cbc <test_union_vector+0xf4>
    7e60:	cmp	r2, #9
    7e64:	bls	7ea4 <test_union_vector+0x2dc>
    7e68:	ldrh	r2, [r3, #8]
    7e6c:	cmp	r2, #0
    7e70:	beq	7ea4 <test_union_vector+0x2dc>
    7e74:	ldr	r3, [r1, r2]
    7e78:	add	r1, r1, r2
    7e7c:	add	r3, r3, #4
    7e80:	adds	r2, r1, r3
    7e84:	beq	7ea4 <test_union_vector+0x2dc>
    7e88:	ldr	r2, [r2, #-4]
    7e8c:	cmp	r2, #1
    7e90:	bne	7ea4 <test_union_vector+0x2dc>
    7e94:	ldrb	r3, [r1, r3]
    7e98:	cmp	r3, #2
    7e9c:	bne	7eb0 <test_union_vector+0x2e8>
    7ea0:	bl	2c0 <MyGame_Example_TestJSONPrefixParsing3_verify_table+0x8>
    7ea4:	ldr	r0, [pc, #120]	; 7f24 <test_union_vector+0x35c>
    7ea8:	bl	0 <puts>
    7eac:	b	7e10 <test_union_vector+0x248>
    7eb0:	ldr	r0, [pc, #112]	; 7f28 <test_union_vector+0x360>
    7eb4:	bl	0 <puts>
    7eb8:	b	7e10 <test_union_vector+0x248>
    7ebc:	bl	0 <flatcc_verify_error_string>
    7ec0:	mvn	r5, #0
    7ec4:	mov	r1, r0
    7ec8:	ldr	r0, [pc, #92]	; 7f2c <test_union_vector+0x364>
    7ecc:	bl	0 <printf>
    7ed0:	b	7e18 <test_union_vector+0x250>
    7ed4:	bl	540 <MyGame_Example_TestJSONPrefixParsing_verify_table+0x1c>
    7ed8:	ldr	r3, [pc, #80]	; 7f30 <test_union_vector+0x368>
    7edc:	mov	r2, #223	; 0xdf
    7ee0:	ldr	r1, [pc, #76]	; 7f34 <test_union_vector+0x36c>
    7ee4:	ldr	r0, [pc, #76]	; 7f38 <test_union_vector+0x370>
    7ee8:	bl	0 <__assert_fail>
    7eec:	add	r3, r5, #8
    7ef0:	mov	r2, #217	; 0xd9
    7ef4:	ldr	r1, [pc, #56]	; 7f34 <test_union_vector+0x36c>
    7ef8:	ldr	r0, [pc, #60]	; 7f3c <test_union_vector+0x374>
    7efc:	bl	0 <__assert_fail>
    7f00:	.word	0x0000054c
    7f04:	.word	0x00001f0c
    7f08:	.word	0x00000570
    7f0c:	.word	0x000005a4
    7f10:	.word	0x0000043c
    7f14:	.word	0x00000000
    7f18:	.word	0x534e4f4d
    7f1c:	.word	0x000020e0
    7f20:	.word	0x000020bc
    7f24:	.word	0x00002108
    7f28:	.word	0x00002130
    7f2c:	.word	0x00002080
    7f30:	.word	0x000005a8
    7f34:	.word	0x000001a8
    7f38:	.word	0x00001fe8
    7f3c:	.word	0x00001f14

00007f40 <test_mixed_type_union>:
    7f40:	push	{r4, r5, r6, r7, r8, r9, lr}
    7f44:	sub	sp, sp, #116	; 0x74
    7f48:	mov	r4, r0
    7f4c:	bl	0 <flatcc_builder_reset>
    7f50:	mov	r3, #0
    7f54:	mov	r0, r4
    7f58:	mov	r2, r3
    7f5c:	ldr	r1, [pc, #2824]	; 8a6c <test_mixed_type_union+0xb2c>
    7f60:	bl	0 <flatcc_builder_start_buffer>
    7f64:	cmp	r0, #0
    7f68:	bne	7f78 <test_mixed_type_union+0x38>
    7f6c:	mov	r1, #10
    7f70:	mov	r0, r4
    7f74:	bl	0 <flatcc_builder_start_table>
    7f78:	mov	r2, #4
    7f7c:	mov	r1, r2
    7f80:	mov	r0, r4
    7f84:	bl	0 <flatcc_builder_start_struct>
    7f88:	subs	r6, r0, #0
    7f8c:	beq	7fa4 <test_mixed_type_union+0x64>
    7f90:	mov	r3, #10
    7f94:	str	r3, [r6]
    7f98:	mov	r0, r4
    7f9c:	bl	0 <flatcc_builder_end_struct>
    7fa0:	mov	r6, r0
    7fa4:	mov	r2, #2
    7fa8:	mov	r1, r2
    7fac:	mov	r0, r4
    7fb0:	bl	0 <flatcc_builder_start_struct>
    7fb4:	subs	r5, r0, #0
    7fb8:	beq	8530 <test_mixed_type_union+0x5f0>
    7fbc:	mov	r3, #22
    7fc0:	strh	r3, [r5]
    7fc4:	mov	r0, r4
    7fc8:	bl	0 <flatcc_builder_end_struct>
    7fcc:	mov	r2, #2
    7fd0:	mov	r1, r2
    7fd4:	mov	r5, r0
    7fd8:	mov	r0, r4
    7fdc:	bl	0 <flatcc_builder_start_struct>
    7fe0:	cmp	r0, #0
    7fe4:	beq	8038 <test_mixed_type_union+0xf8>
    7fe8:	mov	r3, #19
    7fec:	strh	r3, [r0]
    7ff0:	mov	r0, r4
    7ff4:	bl	0 <flatcc_builder_end_struct>
    7ff8:	subs	r7, r0, #0
    7ffc:	beq	8038 <test_mixed_type_union+0xf8>
    8000:	mov	r3, #1
    8004:	mov	r2, r3
    8008:	mov	r1, #0
    800c:	mov	r0, r4
    8010:	bl	0 <flatcc_builder_table_add>
    8014:	subs	r8, r0, #0
    8018:	beq	8038 <test_mixed_type_union+0xf8>
    801c:	mov	r1, #1
    8020:	mov	r0, r4
    8024:	bl	0 <flatcc_builder_table_add_offset>
    8028:	cmp	r0, #0
    802c:	movne	r3, #8
    8030:	strbne	r3, [r8]
    8034:	strne	r7, [r0]
    8038:	cmp	r5, #0
    803c:	beq	8078 <test_mixed_type_union+0x138>
    8040:	mov	r3, #1
    8044:	mov	r2, r3
    8048:	mov	r1, #6
    804c:	mov	r0, r4
    8050:	bl	0 <flatcc_builder_table_add>
    8054:	subs	r7, r0, #0
    8058:	beq	8078 <test_mixed_type_union+0x138>
    805c:	mov	r1, #7
    8060:	mov	r0, r4
    8064:	bl	0 <flatcc_builder_table_add_offset>
    8068:	cmp	r0, #0
    806c:	movne	r3, #8
    8070:	strbne	r3, [r7]
    8074:	strne	r5, [r0]
    8078:	mov	r1, #1
    807c:	mov	r0, r4
    8080:	bl	0 <flatcc_builder_start_table>
    8084:	subs	r7, r0, #0
    8088:	bne	841c <test_mixed_type_union+0x4dc>
    808c:	mov	r3, #4
    8090:	mov	r2, r3
    8094:	mov	r1, r7
    8098:	mov	r0, r4
    809c:	bl	0 <flatcc_builder_table_add>
    80a0:	cmp	r0, #0
    80a4:	beq	841c <test_mixed_type_union+0x4dc>
    80a8:	mov	r3, #42	; 0x2a
    80ac:	str	r3, [r0]
    80b0:	mov	r2, r7
    80b4:	ldr	r1, [pc, #2484]	; 8a70 <test_mixed_type_union+0xb30>
    80b8:	mov	r0, r4
    80bc:	bl	0 <flatcc_builder_check_required>
    80c0:	cmp	r0, #0
    80c4:	beq	86a4 <test_mixed_type_union+0x764>
    80c8:	mov	r0, r4
    80cc:	bl	0 <flatcc_builder_end_table>
    80d0:	subs	r7, r0, #0
    80d4:	beq	841c <test_mixed_type_union+0x4dc>
    80d8:	mov	r3, #1
    80dc:	mov	r2, r3
    80e0:	mov	r1, #2
    80e4:	mov	r0, r4
    80e8:	bl	0 <flatcc_builder_table_add>
    80ec:	subs	r8, r0, #0
    80f0:	beq	8110 <test_mixed_type_union+0x1d0>
    80f4:	mov	r1, #3
    80f8:	mov	r0, r4
    80fc:	bl	0 <flatcc_builder_table_add_offset>
    8100:	cmp	r0, #0
    8104:	movne	r3, #2
    8108:	strbne	r3, [r8]
    810c:	strne	r7, [r0]
    8110:	ldr	r1, [pc, #2396]	; 8a74 <test_mixed_type_union+0xb34>
    8114:	mov	r0, r4
    8118:	bl	0 <flatcc_builder_create_string_str>
    811c:	subs	r8, r0, #0
    8120:	beq	815c <test_mixed_type_union+0x21c>
    8124:	mov	r3, #1
    8128:	mov	r2, r3
    812c:	mov	r1, #4
    8130:	mov	r0, r4
    8134:	bl	0 <flatcc_builder_table_add>
    8138:	subs	r9, r0, #0
    813c:	beq	815c <test_mixed_type_union+0x21c>
    8140:	mov	r1, #5
    8144:	mov	r0, r4
    8148:	bl	0 <flatcc_builder_table_add_offset>
    814c:	cmp	r0, #0
    8150:	movne	r3, #11
    8154:	strbne	r3, [r9]
    8158:	strne	r8, [r0]
    815c:	mov	r0, r4
    8160:	bl	0 <flatcc_builder_start_union_vector>
    8164:	add	r3, sp, #64	; 0x40
    8168:	mov	r2, #8
    816c:	str	r5, [sp, #68]	; 0x44
    8170:	strb	r2, [sp, #64]	; 0x40
    8174:	mov	r0, r4
    8178:	ldm	r3, {r1, r2}
    817c:	bl	0 <flatcc_builder_union_vector_push>
    8180:	add	r3, sp, #56	; 0x38
    8184:	mov	r2, #2
    8188:	str	r7, [sp, #60]	; 0x3c
    818c:	strb	r2, [sp, #56]	; 0x38
    8190:	mov	r0, r4
    8194:	ldm	r3, {r1, r2}
    8198:	bl	0 <flatcc_builder_union_vector_push>
    819c:	mov	r1, #1
    81a0:	mov	r0, r4
    81a4:	bl	0 <flatcc_builder_start_table>
    81a8:	subs	r5, r0, #0
    81ac:	bne	8424 <test_mixed_type_union+0x4e4>
    81b0:	mov	r3, #4
    81b4:	mov	r2, r3
    81b8:	mov	r1, r5
    81bc:	mov	r0, r4
    81c0:	bl	0 <flatcc_builder_table_add>
    81c4:	cmp	r0, #0
    81c8:	beq	8424 <test_mixed_type_union+0x4e4>
    81cc:	mov	r3, #1
    81d0:	str	r3, [r0]
    81d4:	mov	r2, r5
    81d8:	ldr	r1, [pc, #2192]	; 8a70 <test_mixed_type_union+0xb30>
    81dc:	mov	r0, r4
    81e0:	bl	0 <flatcc_builder_check_required>
    81e4:	cmp	r0, #0
    81e8:	beq	86a4 <test_mixed_type_union+0x764>
    81ec:	mov	r0, r4
    81f0:	bl	0 <flatcc_builder_end_table>
    81f4:	mov	r3, #2
    81f8:	strb	r3, [sp, #104]	; 0x68
    81fc:	add	r3, sp, #112	; 0x70
    8200:	str	r0, [sp, #108]	; 0x6c
    8204:	mov	r0, r4
    8208:	ldmdb	r3, {r1, r2}
    820c:	bl	0 <flatcc_builder_union_vector_push>
    8210:	ldr	r1, [pc, #2144]	; 8a78 <test_mixed_type_union+0xb38>
    8214:	mov	r0, r4
    8218:	bl	0 <flatcc_builder_create_string_str>
    821c:	add	r3, sp, #48	; 0x30
    8220:	mov	r2, #11
    8224:	strb	r2, [sp, #48]	; 0x30
    8228:	mov	r5, #9
    822c:	str	r0, [sp, #52]	; 0x34
    8230:	mov	r0, r4
    8234:	ldm	r3, {r1, r2}
    8238:	bl	0 <flatcc_builder_union_vector_push>
    823c:	add	r3, sp, #40	; 0x28
    8240:	str	r6, [sp, #44]	; 0x2c
    8244:	strb	r5, [sp, #40]	; 0x28
    8248:	mov	r0, r4
    824c:	ldm	r3, {r1, r2}
    8250:	bl	0 <flatcc_builder_union_vector_push>
    8254:	mov	r2, #4
    8258:	mov	r1, r2
    825c:	mov	r0, r4
    8260:	bl	0 <flatcc_builder_start_struct>
    8264:	mov	r3, #3
    8268:	str	r3, [r0]
    826c:	mov	r0, r4
    8270:	bl	0 <flatcc_builder_end_struct>
    8274:	add	r3, sp, #96	; 0x60
    8278:	strb	r5, [sp, #96]	; 0x60
    827c:	str	r0, [sp, #100]	; 0x64
    8280:	mov	r0, r4
    8284:	ldm	r3, {r1, r2}
    8288:	bl	0 <flatcc_builder_union_vector_push>
    828c:	mov	r2, #4
    8290:	mov	r1, r2
    8294:	mov	r0, r4
    8298:	bl	0 <flatcc_builder_start_struct>
    829c:	cmp	r0, #0
    82a0:	beq	82b4 <test_mixed_type_union+0x374>
    82a4:	mov	r3, #1
    82a8:	str	r3, [r0]
    82ac:	mov	r0, r4
    82b0:	bl	0 <flatcc_builder_end_struct>
    82b4:	add	r3, sp, #32
    82b8:	mov	r2, #9
    82bc:	str	r0, [sp, #36]	; 0x24
    82c0:	strb	r2, [sp, #32]
    82c4:	mov	r0, r4
    82c8:	ldm	r3, {r1, r2}
    82cc:	bl	0 <flatcc_builder_union_vector_push>
    82d0:	mov	r2, #4
    82d4:	mov	r1, r2
    82d8:	mov	r0, r4
    82dc:	bl	0 <flatcc_builder_start_struct>
    82e0:	cmp	r0, #0
    82e4:	beq	82f8 <test_mixed_type_union+0x3b8>
    82e8:	mov	r3, #2
    82ec:	str	r3, [r0]
    82f0:	mov	r0, r4
    82f4:	bl	0 <flatcc_builder_end_struct>
    82f8:	add	r3, sp, #88	; 0x58
    82fc:	mov	r6, #9
    8300:	str	r0, [sp, #92]	; 0x5c
    8304:	strb	r6, [sp, #88]	; 0x58
    8308:	mov	r0, r4
    830c:	ldm	r3, {r1, r2}
    8310:	bl	0 <flatcc_builder_union_vector_push>
    8314:	ldr	r1, [pc, #1888]	; 8a7c <test_mixed_type_union+0xb3c>
    8318:	mov	r0, r4
    831c:	bl	0 <flatcc_builder_create_string_str>
    8320:	add	r3, sp, #24
    8324:	mov	r5, #11
    8328:	strb	r5, [sp, #24]
    832c:	str	r0, [sp, #28]
    8330:	mov	r0, r4
    8334:	ldm	r3, {r1, r2}
    8338:	bl	0 <flatcc_builder_union_vector_push>
    833c:	ldr	r1, [pc, #1852]	; 8a80 <test_mixed_type_union+0xb40>
    8340:	mov	r0, r4
    8344:	bl	0 <flatcc_builder_create_string_str>
    8348:	add	r3, sp, #80	; 0x50
    834c:	strb	r5, [sp, #80]	; 0x50
    8350:	str	r0, [sp, #84]	; 0x54
    8354:	mov	r0, r4
    8358:	ldm	r3, {r1, r2}
    835c:	bl	0 <flatcc_builder_union_vector_push>
    8360:	mov	r1, r4
    8364:	add	r0, sp, #72	; 0x48
    8368:	bl	0 <flatcc_builder_end_union_vector>
    836c:	ldr	r5, [sp, #72]	; 0x48
    8370:	ldr	r7, [sp, #76]	; 0x4c
    8374:	cmp	r7, #0
    8378:	cmpne	r5, #0
    837c:	bne	8588 <test_mixed_type_union+0x648>
    8380:	mov	r2, #0
    8384:	ldr	r1, [pc, #1784]	; 8a84 <test_mixed_type_union+0xb44>
    8388:	mov	r0, r4
    838c:	bl	0 <flatcc_builder_check_required>
    8390:	cmp	r0, #0
    8394:	beq	8690 <test_mixed_type_union+0x750>
    8398:	mov	r0, r4
    839c:	bl	0 <flatcc_builder_end_table>
    83a0:	mov	r1, r0
    83a4:	mov	r0, r4
    83a8:	bl	0 <flatcc_builder_end_buffer>
    83ac:	mov	r0, r4
    83b0:	add	r1, sp, #4
    83b4:	bl	0 <flatcc_builder_finalize_aligned_buffer>
    83b8:	ldr	r3, [pc, #1736]	; 8a88 <test_mixed_type_union+0xb48>
    83bc:	ldr	r2, [sp, #4]
    83c0:	ldr	r3, [r3]
    83c4:	mov	r1, r0
    83c8:	mov	r4, r0
    83cc:	ldr	r0, [pc, #1720]	; 8a8c <test_mixed_type_union+0xb4c>
    83d0:	bl	20 <hexdump>
    83d4:	mov	r0, r4
    83d8:	ldr	r3, [pc, #1712]	; 8a90 <test_mixed_type_union+0xb50>
    83dc:	ldr	r2, [pc, #1672]	; 8a6c <test_mixed_type_union+0xb2c>
    83e0:	ldr	r1, [sp, #4]
    83e4:	bl	0 <flatcc_verify_table_as_root>
    83e8:	cmp	r0, #0
    83ec:	bne	8608 <test_mixed_type_union+0x6c8>
    83f0:	cmp	r4, #0
    83f4:	beq	8408 <test_mixed_type_union+0x4c8>
    83f8:	ldr	r3, [pc, #1684]	; 8a94 <test_mixed_type_union+0xb54>
    83fc:	ldr	r2, [r4, #4]
    8400:	cmp	r2, r3
    8404:	beq	842c <test_mixed_type_union+0x4ec>
    8408:	ldr	r3, [pc, #1672]	; 8a98 <test_mixed_type_union+0xb58>
    840c:	ldr	r2, [pc, #1672]	; 8a9c <test_mixed_type_union+0xb5c>
    8410:	ldr	r1, [pc, #1672]	; 8aa0 <test_mixed_type_union+0xb60>
    8414:	ldr	r0, [pc, #1672]	; 8aa4 <test_mixed_type_union+0xb64>
    8418:	bl	0 <__assert_fail>
    841c:	mov	r7, #0
    8420:	b	8110 <test_mixed_type_union+0x1d0>
    8424:	mov	r0, #0
    8428:	b	81f4 <test_mixed_type_union+0x2b4>
    842c:	ldr	r3, [r4]
    8430:	adds	r5, r4, r3
    8434:	beq	8408 <test_mixed_type_union+0x4c8>
    8438:	ldr	r3, [r4, r3]
    843c:	sub	r3, r5, r3
    8440:	ldrh	r2, [r3]
    8444:	cmp	r2, #7
    8448:	bls	8500 <test_mixed_type_union+0x5c0>
    844c:	ldrh	r1, [r3, #6]
    8450:	cmp	r1, #0
    8454:	beq	8500 <test_mixed_type_union+0x5c0>
    8458:	cmp	r2, #23
    845c:	bls	8520 <test_mixed_type_union+0x5e0>
    8460:	ldrh	r6, [r3, #22]
    8464:	cmp	r6, #0
    8468:	beq	8520 <test_mixed_type_union+0x5e0>
    846c:	ldrh	r2, [r3, #4]
    8470:	cmp	r2, #0
    8474:	beq	85b8 <test_mixed_type_union+0x678>
    8478:	ldrb	r2, [r5, r2]
    847c:	cmp	r2, #0
    8480:	beq	85b8 <test_mixed_type_union+0x678>
    8484:	ldr	r0, [r5, r1]
    8488:	cmp	r2, #8
    848c:	add	r1, r5, r1
    8490:	add	r2, r1, r0
    8494:	bne	85b8 <test_mixed_type_union+0x678>
    8498:	cmp	r2, #0
    849c:	beq	85d0 <test_mixed_type_union+0x690>
    84a0:	ldrh	r2, [r1, r0]
    84a4:	cmp	r2, #19
    84a8:	bhi	85e8 <test_mixed_type_union+0x6a8>
    84ac:	bne	85d8 <test_mixed_type_union+0x698>
    84b0:	ldrh	r2, [r3, #16]
    84b4:	cmp	r2, #0
    84b8:	beq	85f8 <test_mixed_type_union+0x6b8>
    84bc:	ldrb	r2, [r5, r2]
    84c0:	cmp	r2, #8
    84c4:	bne	85f8 <test_mixed_type_union+0x6b8>
    84c8:	ldrh	r2, [r3, #18]
    84cc:	cmp	r2, #0
    84d0:	beq	8680 <test_mixed_type_union+0x740>
    84d4:	ldr	r1, [r5, r2]
    84d8:	add	r2, r5, r2
    84dc:	cmn	r2, r1
    84e0:	beq	8680 <test_mixed_type_union+0x740>
    84e4:	ldrh	r2, [r2, r1]
    84e8:	cmp	r2, #22
    84ec:	beq	8620 <test_mixed_type_union+0x6e0>
    84f0:	ldr	r0, [pc, #1456]	; 8aa8 <test_mixed_type_union+0xb68>
    84f4:	bl	0 <puts>
    84f8:	mvn	r5, #0
    84fc:	b	850c <test_mixed_type_union+0x5cc>
    8500:	ldr	r0, [pc, #1444]	; 8aac <test_mixed_type_union+0xb6c>
    8504:	bl	0 <puts>
    8508:	mvn	r5, #0
    850c:	mov	r0, r4
    8510:	bl	0 <flatcc_builder_aligned_free>
    8514:	mov	r0, r5
    8518:	add	sp, sp, #116	; 0x74
    851c:	pop	{r4, r5, r6, r7, r8, r9, pc}
    8520:	ldr	r0, [pc, #1416]	; 8ab0 <test_mixed_type_union+0xb70>
    8524:	bl	0 <puts>
    8528:	mvn	r5, #0
    852c:	b	850c <test_mixed_type_union+0x5cc>
    8530:	mov	r2, #2
    8534:	mov	r1, r2
    8538:	mov	r0, r4
    853c:	bl	0 <flatcc_builder_start_struct>
    8540:	cmp	r0, #0
    8544:	beq	85c8 <test_mixed_type_union+0x688>
    8548:	mov	r3, #19
    854c:	strh	r3, [r0]
    8550:	mov	r0, r4
    8554:	bl	0 <flatcc_builder_end_struct>
    8558:	subs	r7, r0, #0
    855c:	moveq	r5, r7
    8560:	beq	8078 <test_mixed_type_union+0x138>
    8564:	mov	r3, #1
    8568:	mov	r2, r3
    856c:	mov	r1, r5
    8570:	mov	r0, r4
    8574:	bl	0 <flatcc_builder_table_add>
    8578:	subs	r8, r0, #0
    857c:	bne	801c <test_mixed_type_union+0xdc>
    8580:	mov	r5, r8
    8584:	b	8078 <test_mixed_type_union+0x138>
    8588:	mov	r1, #8
    858c:	mov	r0, r4
    8590:	bl	0 <flatcc_builder_table_add_offset>
    8594:	cmp	r0, #0
    8598:	beq	8380 <test_mixed_type_union+0x440>
    859c:	str	r5, [r0]
    85a0:	mov	r1, r6
    85a4:	mov	r0, r4
    85a8:	bl	0 <flatcc_builder_table_add_offset>
    85ac:	cmp	r0, #0
    85b0:	strne	r7, [r0]
    85b4:	b	8380 <test_mixed_type_union+0x440>
    85b8:	ldr	r0, [pc, #1268]	; 8ab4 <test_mixed_type_union+0xb74>
    85bc:	bl	0 <puts>
    85c0:	mvn	r5, #0
    85c4:	b	850c <test_mixed_type_union+0x5cc>
    85c8:	mov	r5, r0
    85cc:	b	8078 <test_mixed_type_union+0x138>
    85d0:	ldr	r0, [pc, #1248]	; 8ab8 <test_mixed_type_union+0xb78>
    85d4:	bl	0 <puts>
    85d8:	ldr	r0, [pc, #1244]	; 8abc <test_mixed_type_union+0xb7c>
    85dc:	bl	0 <puts>
    85e0:	mvn	r5, #0
    85e4:	b	850c <test_mixed_type_union+0x5cc>
    85e8:	ldr	r0, [pc, #1232]	; 8ac0 <test_mixed_type_union+0xb80>
    85ec:	bl	0 <puts>
    85f0:	mvn	r5, #0
    85f4:	b	850c <test_mixed_type_union+0x5cc>
    85f8:	ldr	r0, [pc, #1220]	; 8ac4 <test_mixed_type_union+0xb84>
    85fc:	bl	0 <puts>
    8600:	mvn	r5, #0
    8604:	b	850c <test_mixed_type_union+0x5cc>
    8608:	bl	0 <flatcc_verify_error_string>
    860c:	mvn	r5, #0
    8610:	mov	r1, r0
    8614:	ldr	r0, [pc, #1196]	; 8ac8 <test_mixed_type_union+0xb88>
    8618:	bl	0 <printf>
    861c:	b	8514 <test_mixed_type_union+0x5d4>
    8620:	ldrh	r2, [r3, #8]
    8624:	cmp	r2, #0
    8628:	beq	8670 <test_mixed_type_union+0x730>
    862c:	ldrb	r2, [r5, r2]
    8630:	cmp	r2, #2
    8634:	bne	8670 <test_mixed_type_union+0x730>
    8638:	ldrh	r3, [r3, #10]
    863c:	cmp	r3, #0
    8640:	beq	8660 <test_mixed_type_union+0x720>
    8644:	ldr	r2, [r5, r3]
    8648:	add	r3, r5, r3
    864c:	adds	r0, r3, r2
    8650:	beq	8660 <test_mixed_type_union+0x720>
    8654:	bl	3c4 <MyGame_Example_TypeAliases_verify_table+0x64>
    8658:	cmp	r0, #42	; 0x2a
    865c:	beq	86b8 <test_mixed_type_union+0x778>
    8660:	ldr	r0, [pc, #1124]	; 8acc <test_mixed_type_union+0xb8c>
    8664:	bl	0 <puts>
    8668:	mvn	r5, #0
    866c:	b	850c <test_mixed_type_union+0x5cc>
    8670:	ldr	r0, [pc, #1112]	; 8ad0 <test_mixed_type_union+0xb90>
    8674:	bl	0 <puts>
    8678:	mvn	r5, #0
    867c:	b	850c <test_mixed_type_union+0x5cc>
    8680:	ldr	r0, [pc, #1100]	; 8ad4 <test_mixed_type_union+0xb94>
    8684:	bl	0 <puts>
    8688:	mvn	r5, #0
    868c:	b	850c <test_mixed_type_union+0x5cc>
    8690:	ldr	r3, [pc, #1088]	; 8ad8 <test_mixed_type_union+0xb98>
    8694:	mov	r2, #241	; 0xf1
    8698:	ldr	r1, [pc, #1084]	; 8adc <test_mixed_type_union+0xb9c>
    869c:	ldr	r0, [pc, #1084]	; 8ae0 <test_mixed_type_union+0xba0>
    86a0:	bl	0 <__assert_fail>
    86a4:	ldr	r3, [pc, #1080]	; 8ae4 <test_mixed_type_union+0xba4>
    86a8:	mov	r2, #239	; 0xef
    86ac:	ldr	r1, [pc, #1064]	; 8adc <test_mixed_type_union+0xb9c>
    86b0:	ldr	r0, [pc, #1072]	; 8ae8 <test_mixed_type_union+0xba8>
    86b4:	bl	0 <__assert_fail>
    86b8:	mov	r0, r5
    86bc:	bl	30c <MyGame_Example_TestSimpleTableWithEnum_verify_table+0x1c>
    86c0:	cmp	r0, #11
    86c4:	beq	86d8 <test_mixed_type_union+0x798>
    86c8:	ldr	r0, [pc, #1052]	; 8aec <test_mixed_type_union+0xbac>
    86cc:	bl	0 <puts>
    86d0:	mvn	r5, #0
    86d4:	b	850c <test_mixed_type_union+0x5cc>
    86d8:	mov	r0, r5
    86dc:	bl	364 <MyGame_Example_TypeAliases_verify_table+0x4>
    86e0:	cmp	r0, #0
    86e4:	beq	8718 <test_mixed_type_union+0x7d8>
    86e8:	adds	r7, r0, #4
    86ec:	beq	8718 <test_mixed_type_union+0x7d8>
    86f0:	ldr	r1, [pc, #892]	; 8a74 <test_mixed_type_union+0xb34>
    86f4:	mov	r0, r7
    86f8:	bl	0 <strcmp>
    86fc:	cmp	r0, #0
    8700:	beq	8728 <test_mixed_type_union+0x7e8>
    8704:	mov	r1, r7
    8708:	ldr	r0, [pc, #992]	; 8af0 <test_mixed_type_union+0xbb0>
    870c:	bl	0 <printf>
    8710:	mvn	r5, #0
    8714:	b	850c <test_mixed_type_union+0x5cc>
    8718:	ldr	r0, [pc, #980]	; 8af4 <test_mixed_type_union+0xbb4>
    871c:	bl	0 <puts>
    8720:	mvn	r5, #0
    8724:	b	850c <test_mixed_type_union+0x5cc>
    8728:	mov	r0, r5
    872c:	bl	41c <MyGame_Example_TypeAliases_verify_table+0xbc>
    8730:	ldr	r3, [r5, r6]
    8734:	add	r6, r5, r6
    8738:	add	r3, r3, #4
    873c:	add	r7, r6, r3
    8740:	subs	r8, r0, #0
    8744:	beq	8798 <test_mixed_type_union+0x858>
    8748:	cmp	r7, #0
    874c:	ldr	r2, [r8, #-4]
    8750:	beq	87ec <test_mixed_type_union+0x8ac>
    8754:	ldr	r3, [r7, #-4]
    8758:	cmp	r2, r3
    875c:	bne	87d8 <test_mixed_type_union+0x898>
    8760:	add	r6, sp, #8
    8764:	str	r8, [sp, #8]
    8768:	str	r7, [sp, #12]
    876c:	mov	r3, #0
    8770:	add	r0, sp, #16
    8774:	ldm	r6, {r1, r2}
    8778:	bl	480 <MyGame_Example_TypeAliases_verify_table+0x120>
    877c:	ldrb	r3, [sp, #16]
    8780:	cmp	r3, #8
    8784:	beq	87a8 <test_mixed_type_union+0x868>
    8788:	ldr	r0, [pc, #872]	; 8af8 <test_mixed_type_union+0xbb8>
    878c:	bl	0 <printf>
    8790:	mvn	r5, #0
    8794:	b	850c <test_mixed_type_union+0x5cc>
    8798:	cmp	r7, #0
    879c:	movne	r2, #0
    87a0:	bne	8754 <test_mixed_type_union+0x814>
    87a4:	b	8760 <test_mixed_type_union+0x820>
    87a8:	add	r0, sp, #16
    87ac:	mov	r3, #1
    87b0:	ldm	r6, {r1, r2}
    87b4:	bl	480 <MyGame_Example_TypeAliases_verify_table+0x120>
    87b8:	ldrb	r9, [sp, #16]
    87bc:	ldr	r0, [sp, #20]
    87c0:	cmp	r9, #2
    87c4:	beq	87f4 <test_mixed_type_union+0x8b4>
    87c8:	ldr	r0, [pc, #812]	; 8afc <test_mixed_type_union+0xbbc>
    87cc:	bl	0 <printf>
    87d0:	mvn	r5, #0
    87d4:	b	850c <test_mixed_type_union+0x5cc>
    87d8:	ldr	r3, [pc, #800]	; 8b00 <test_mixed_type_union+0xbc0>
    87dc:	ldr	r2, [pc, #800]	; 8b04 <test_mixed_type_union+0xbc4>
    87e0:	ldr	r1, [pc, #696]	; 8aa0 <test_mixed_type_union+0xb60>
    87e4:	ldr	r0, [pc, #796]	; 8b08 <test_mixed_type_union+0xbc8>
    87e8:	bl	0 <__assert_fail>
    87ec:	mov	r3, r7
    87f0:	b	8758 <test_mixed_type_union+0x818>
    87f4:	bl	3c4 <MyGame_Example_TypeAliases_verify_table+0x64>
    87f8:	cmp	r0, #42	; 0x2a
    87fc:	beq	8810 <test_mixed_type_union+0x8d0>
    8800:	ldr	r0, [pc, #772]	; 8b0c <test_mixed_type_union+0xbcc>
    8804:	bl	0 <printf>
    8808:	mvn	r5, #0
    880c:	b	850c <test_mixed_type_union+0x5cc>
    8810:	mov	r3, r9
    8814:	add	r0, sp, #16
    8818:	ldm	r6, {r1, r2}
    881c:	bl	480 <MyGame_Example_TypeAliases_verify_table+0x120>
    8820:	ldrb	r3, [sp, #16]
    8824:	ldr	r0, [sp, #20]
    8828:	cmp	r3, #2
    882c:	beq	8840 <test_mixed_type_union+0x900>
    8830:	ldr	r0, [pc, #728]	; 8b10 <test_mixed_type_union+0xbd0>
    8834:	bl	0 <printf>
    8838:	mvn	r5, #0
    883c:	b	850c <test_mixed_type_union+0x5cc>
    8840:	bl	3c4 <MyGame_Example_TypeAliases_verify_table+0x64>
    8844:	cmp	r0, #1
    8848:	beq	885c <test_mixed_type_union+0x91c>
    884c:	ldr	r0, [pc, #704]	; 8b14 <test_mixed_type_union+0xbd4>
    8850:	bl	0 <printf>
    8854:	mvn	r5, #0
    8858:	b	850c <test_mixed_type_union+0x5cc>
    885c:	mov	r0, r5
    8860:	bl	41c <MyGame_Example_TypeAliases_verify_table+0xbc>
    8864:	cmp	r0, #0
    8868:	beq	8894 <test_mixed_type_union+0x954>
    886c:	ldr	r3, [r0, #-4]
    8870:	cmp	r3, #3
    8874:	bls	8894 <test_mixed_type_union+0x954>
    8878:	ldrb	r3, [r0, #3]
    887c:	cmp	r3, #11
    8880:	beq	8898 <test_mixed_type_union+0x958>
    8884:	ldr	r0, [pc, #652]	; 8b18 <test_mixed_type_union+0xbd8>
    8888:	bl	0 <puts>
    888c:	mvn	r5, #0
    8890:	b	850c <test_mixed_type_union+0x5cc>
    8894:	bl	2e4 <MyGame_Example_TestJSONPrefixParsing3_verify_table+0x2c>
    8898:	cmp	r7, #0
    889c:	beq	88dc <test_mixed_type_union+0x99c>
    88a0:	ldr	r3, [r7, #-4]
    88a4:	cmp	r3, #3
    88a8:	bls	88dc <test_mixed_type_union+0x99c>
    88ac:	ldr	r3, [r7, #12]
    88b0:	add	r3, r3, #16
    88b4:	adds	r0, r7, r3
    88b8:	beq	88cc <test_mixed_type_union+0x98c>
    88bc:	ldr	r1, [pc, #436]	; 8a78 <test_mixed_type_union+0xb38>
    88c0:	bl	0 <strcmp>
    88c4:	cmp	r0, #0
    88c8:	beq	88f0 <test_mixed_type_union+0x9b0>
    88cc:	ldr	r0, [pc, #584]	; 8b1c <test_mixed_type_union+0xbdc>
    88d0:	bl	0 <puts>
    88d4:	mvn	r5, #0
    88d8:	b	850c <test_mixed_type_union+0x5cc>
    88dc:	ldr	r3, [pc, #572]	; 8b20 <test_mixed_type_union+0xbe0>
    88e0:	mov	r2, #119	; 0x77
    88e4:	ldr	r1, [pc, #568]	; 8b24 <test_mixed_type_union+0xbe4>
    88e8:	ldr	r0, [pc, #568]	; 8b28 <test_mixed_type_union+0xbe8>
    88ec:	bl	0 <__assert_fail>
    88f0:	mov	r3, #3
    88f4:	ldm	r6, {r1, r2}
    88f8:	add	r0, sp, #16
    88fc:	bl	480 <MyGame_Example_TypeAliases_verify_table+0x120>
    8900:	ldrb	r2, [sp, #16]
    8904:	ldr	r3, [sp, #20]
    8908:	cmp	r2, #11
    890c:	beq	8920 <test_mixed_type_union+0x9e0>
    8910:	ldr	r0, [pc, #532]	; 8b2c <test_mixed_type_union+0xbec>
    8914:	bl	0 <printf>
    8918:	mvn	r5, #0
    891c:	b	850c <test_mixed_type_union+0x5cc>
    8920:	cmp	r3, #0
    8924:	beq	8940 <test_mixed_type_union+0xa00>
    8928:	adds	r0, r3, #4
    892c:	beq	8940 <test_mixed_type_union+0xa00>
    8930:	ldr	r1, [pc, #320]	; 8a78 <test_mixed_type_union+0xb38>
    8934:	bl	0 <strcmp>
    8938:	subs	r5, r0, #0
    893c:	beq	8950 <test_mixed_type_union+0xa10>
    8940:	ldr	r0, [pc, #488]	; 8b30 <test_mixed_type_union+0xbf0>
    8944:	bl	0 <puts>
    8948:	mvn	r5, #0
    894c:	b	850c <test_mixed_type_union+0x5cc>
    8950:	mov	r3, #4
    8954:	ldm	r6, {r1, r2}
    8958:	add	r0, sp, #16
    895c:	bl	480 <MyGame_Example_TypeAliases_verify_table+0x120>
    8960:	ldrb	r3, [sp, #16]
    8964:	cmp	r3, #9
    8968:	beq	897c <test_mixed_type_union+0xa3c>
    896c:	ldr	r0, [pc, #448]	; 8b34 <test_mixed_type_union+0xbf4>
    8970:	bl	0 <printf>
    8974:	mvn	r5, #0
    8978:	b	850c <test_mixed_type_union+0x5cc>
    897c:	mov	r3, #5
    8980:	ldm	r6, {r1, r2}
    8984:	add	r0, sp, #16
    8988:	bl	480 <MyGame_Example_TypeAliases_verify_table+0x120>
    898c:	ldrb	r3, [sp, #16]
    8990:	cmp	r3, #9
    8994:	beq	89a8 <test_mixed_type_union+0xa68>
    8998:	ldr	r0, [pc, #408]	; 8b38 <test_mixed_type_union+0xbf8>
    899c:	bl	0 <printf>
    89a0:	mvn	r5, #0
    89a4:	b	850c <test_mixed_type_union+0x5cc>
    89a8:	mov	r3, #6
    89ac:	ldm	r6, {r1, r2}
    89b0:	add	r0, sp, #16
    89b4:	bl	480 <MyGame_Example_TypeAliases_verify_table+0x120>
    89b8:	ldrb	r3, [sp, #16]
    89bc:	cmp	r3, #9
    89c0:	beq	89d4 <test_mixed_type_union+0xa94>
    89c4:	ldr	r0, [pc, #368]	; 8b3c <test_mixed_type_union+0xbfc>
    89c8:	bl	0 <printf>
    89cc:	mvn	r5, #0
    89d0:	b	850c <test_mixed_type_union+0x5cc>
    89d4:	mov	r3, #7
    89d8:	ldm	r6, {r1, r2}
    89dc:	add	r0, sp, #16
    89e0:	bl	480 <MyGame_Example_TypeAliases_verify_table+0x120>
    89e4:	ldrb	r3, [sp, #16]
    89e8:	cmp	r3, #9
    89ec:	beq	8a00 <test_mixed_type_union+0xac0>
    89f0:	ldr	r0, [pc, #328]	; 8b40 <test_mixed_type_union+0xc00>
    89f4:	bl	0 <printf>
    89f8:	mvn	r5, #0
    89fc:	b	850c <test_mixed_type_union+0x5cc>
    8a00:	mov	r3, #8
    8a04:	ldm	r6, {r1, r2}
    8a08:	add	r0, sp, #16
    8a0c:	bl	480 <MyGame_Example_TypeAliases_verify_table+0x120>
    8a10:	ldrb	r3, [sp, #16]
    8a14:	cmp	r3, #11
    8a18:	beq	8a2c <test_mixed_type_union+0xaec>
    8a1c:	ldr	r0, [pc, #288]	; 8b44 <test_mixed_type_union+0xc04>
    8a20:	bl	0 <printf>
    8a24:	mvn	r5, #0
    8a28:	b	850c <test_mixed_type_union+0x5cc>
    8a2c:	mov	r3, #9
    8a30:	add	r0, sp, #16
    8a34:	ldm	r6, {r1, r2}
    8a38:	bl	480 <MyGame_Example_TypeAliases_verify_table+0x120>
    8a3c:	ldrb	r3, [sp, #16]
    8a40:	cmp	r3, #11
    8a44:	bne	8a1c <test_mixed_type_union+0xadc>
    8a48:	cmp	r8, #0
    8a4c:	beq	8a5c <test_mixed_type_union+0xb1c>
    8a50:	ldr	r3, [r8, #-4]
    8a54:	cmp	r3, #10
    8a58:	beq	850c <test_mixed_type_union+0x5cc>
    8a5c:	ldr	r0, [pc, #228]	; 8b48 <test_mixed_type_union+0xc08>
    8a60:	bl	0 <printf>
    8a64:	mvn	r5, #0
    8a68:	b	850c <test_mixed_type_union+0x5cc>
    8a6c:	.word	0x0000054c
    8a70:	.word	0x000005c0
    8a74:	.word	0x000021f0
    8a78:	.word	0x000021f8
    8a7c:	.word	0x00002200
    8a80:	.word	0x00002208
    8a84:	.word	0x000005dc
    8a88:	.word	0x00000000
    8a8c:	.word	0x0000229c
    8a90:	.word	0x00000000
    8a94:	.word	0x534e4f4d
    8a98:	.word	0x000005f4
    8a9c:	.word	0x00000333
    8aa0:	.word	0x00000024
    8aa4:	.word	0x00000090
    8aa8:	.word	0x00002444
    8aac:	.word	0x000022fc
    8ab0:	.word	0x00002328
    8ab4:	.word	0x00002354
    8ab8:	.word	0x00002370
    8abc:	.word	0x000023b0
    8ac0:	.word	0x00002388
    8ac4:	.word	0x000023e0
    8ac8:	.word	0x000022ac
    8acc:	.word	0x0000248c
    8ad0:	.word	0x00002474
    8ad4:	.word	0x00002414
    8ad8:	.word	0x000005e0
    8adc:	.word	0x000001a8
    8ae0:	.word	0x00002214
    8ae4:	.word	0x000005c4
    8ae8:	.word	0x00002160
    8aec:	.word	0x000024b0
    8af0:	.word	0x000024e4
    8af4:	.word	0x000024c8
    8af8:	.word	0x00002570
    8afc:	.word	0x00002598
    8b00:	.word	0x0000061c
    8b04:	.word	0x00000337
    8b08:	.word	0x00002508
    8b0c:	.word	0x000025bc
    8b10:	.word	0x000025f0
    8b14:	.word	0x00002614
    8b18:	.word	0x00002648
    8b1c:	.word	0x00002678
    8b20:	.word	0x0000063c
    8b24:	.word	0x000000b8
    8b28:	.word	0x0000012c
    8b2c:	.word	0x000026ac
    8b30:	.word	0x000026e4
    8b34:	.word	0x00002724
    8b38:	.word	0x00002748
    8b3c:	.word	0x0000276c
    8b40:	.word	0x00002790
    8b44:	.word	0x000027b4
    8b48:	.word	0x000027e0

00008b4c <test_add_set_defaults>:
    8b4c:	push	{r4, r5, r6, lr}
    8b50:	sub	sp, sp, #8
    8b54:	mov	r4, r0
    8b58:	bl	0 <flatcc_builder_reset>
    8b5c:	mov	r3, #0
    8b60:	mov	r0, r4
    8b64:	mov	r2, r3
    8b68:	ldr	r1, [pc, #716]	; 8e3c <test_add_set_defaults+0x2f0>
    8b6c:	bl	0 <flatcc_builder_start_buffer>
    8b70:	cmp	r0, #0
    8b74:	bne	8b84 <test_add_set_defaults+0x38>
    8b78:	mov	r1, #36	; 0x24
    8b7c:	mov	r0, r4
    8b80:	bl	0 <flatcc_builder_start_table>
    8b84:	ldr	r1, [pc, #692]	; 8e40 <test_add_set_defaults+0x2f4>
    8b88:	mov	r0, r4
    8b8c:	bl	0 <flatcc_builder_create_string_str>
    8b90:	subs	r5, r0, #0
    8b94:	beq	8bac <test_add_set_defaults+0x60>
    8b98:	mov	r1, #3
    8b9c:	mov	r0, r4
    8ba0:	bl	0 <flatcc_builder_table_add_offset>
    8ba4:	cmp	r0, #0
    8ba8:	strne	r5, [r0]
    8bac:	mov	r3, #2
    8bb0:	mov	r2, r3
    8bb4:	mov	r1, #1
    8bb8:	mov	r0, r4
    8bbc:	bl	0 <flatcc_builder_table_add>
    8bc0:	ldr	r5, [pc, #636]	; 8e44 <test_add_set_defaults+0x2f8>
    8bc4:	mov	r2, #1
    8bc8:	add	r1, r5, #12
    8bcc:	cmp	r0, #0
    8bd0:	movne	r3, #100	; 0x64
    8bd4:	strhne	r3, [r0]
    8bd8:	mov	r0, r4
    8bdc:	bl	0 <flatcc_builder_check_required>
    8be0:	cmp	r0, #0
    8be4:	beq	8e38 <test_add_set_defaults+0x2ec>
    8be8:	mov	r0, r4
    8bec:	bl	0 <flatcc_builder_end_table>
    8bf0:	mov	r1, r0
    8bf4:	mov	r0, r4
    8bf8:	bl	0 <flatcc_builder_end_buffer>
    8bfc:	add	r1, sp, #4
    8c00:	mov	r0, r4
    8c04:	bl	0 <flatcc_builder_get_direct_buffer>
    8c08:	cmp	r0, #0
    8c0c:	beq	8c20 <test_add_set_defaults+0xd4>
    8c10:	ldr	r3, [pc, #560]	; 8e48 <test_add_set_defaults+0x2fc>
    8c14:	ldr	r2, [r0, #4]
    8c18:	cmp	r2, r3
    8c1c:	beq	8c24 <test_add_set_defaults+0xd8>
    8c20:	bl	28 <hexdump+0x8>
    8c24:	ldr	r2, [r0]
    8c28:	adds	r3, r0, r2
    8c2c:	beq	8c20 <test_add_set_defaults+0xd4>
    8c30:	ldr	r2, [r0, r2]
    8c34:	sub	r3, r3, r2
    8c38:	ldrh	r2, [r3]
    8c3c:	cmp	r2, #9
    8c40:	bls	8dd0 <test_add_set_defaults+0x284>
    8c44:	ldrh	r1, [r3, #8]
    8c48:	cmp	r1, #0
    8c4c:	bne	8de8 <test_add_set_defaults+0x29c>
    8c50:	ldrh	r1, [r3, #6]
    8c54:	cmp	r1, #0
    8c58:	beq	8dd8 <test_add_set_defaults+0x28c>
    8c5c:	cmp	r2, #17
    8c60:	bls	8c70 <test_add_set_defaults+0x124>
    8c64:	ldrh	r3, [r3, #16]
    8c68:	cmp	r3, #0
    8c6c:	bne	8df8 <test_add_set_defaults+0x2ac>
    8c70:	mov	r0, r4
    8c74:	bl	0 <flatcc_builder_reset>
    8c78:	mov	r3, #0
    8c7c:	mov	r2, r3
    8c80:	ldr	r1, [pc, #436]	; 8e3c <test_add_set_defaults+0x2f0>
    8c84:	mov	r0, r4
    8c88:	bl	0 <flatcc_builder_start_buffer>
    8c8c:	cmp	r0, #0
    8c90:	bne	8ca0 <test_add_set_defaults+0x154>
    8c94:	mov	r1, #36	; 0x24
    8c98:	mov	r0, r4
    8c9c:	bl	0 <flatcc_builder_start_table>
    8ca0:	ldr	r1, [pc, #408]	; 8e40 <test_add_set_defaults+0x2f4>
    8ca4:	mov	r0, r4
    8ca8:	bl	0 <flatcc_builder_create_string_str>
    8cac:	subs	r6, r0, #0
    8cb0:	beq	8cc8 <test_add_set_defaults+0x17c>
    8cb4:	mov	r1, #3
    8cb8:	mov	r0, r4
    8cbc:	bl	0 <flatcc_builder_table_add_offset>
    8cc0:	cmp	r0, #0
    8cc4:	strne	r6, [r0]
    8cc8:	mov	r3, #2
    8ccc:	mov	r2, r3
    8cd0:	mov	r1, r3
    8cd4:	mov	r0, r4
    8cd8:	bl	0 <flatcc_builder_table_add>
    8cdc:	mov	r1, #1
    8ce0:	cmp	r0, #0
    8ce4:	movne	r3, #100	; 0x64
    8ce8:	strhne	r3, [r0]
    8cec:	mov	r3, #2
    8cf0:	mov	r2, r3
    8cf4:	mov	r0, r4
    8cf8:	bl	0 <flatcc_builder_table_add>
    8cfc:	mov	r1, #6
    8d00:	cmp	r0, #0
    8d04:	movne	r3, #100	; 0x64
    8d08:	strhne	r3, [r0]
    8d0c:	mov	r3, #1
    8d10:	mov	r2, r3
    8d14:	mov	r0, r4
    8d18:	bl	0 <flatcc_builder_table_add>
    8d1c:	add	r1, r5, #12
    8d20:	mov	r2, #1
    8d24:	cmp	r0, #0
    8d28:	movne	r3, #8
    8d2c:	strbne	r3, [r0]
    8d30:	mov	r0, r4
    8d34:	bl	0 <flatcc_builder_check_required>
    8d38:	cmp	r0, #0
    8d3c:	beq	8e38 <test_add_set_defaults+0x2ec>
    8d40:	mov	r0, r4
    8d44:	bl	0 <flatcc_builder_end_table>
    8d48:	mov	r1, r0
    8d4c:	mov	r0, r4
    8d50:	bl	0 <flatcc_builder_end_buffer>
    8d54:	add	r1, sp, #4
    8d58:	mov	r0, r4
    8d5c:	bl	0 <flatcc_builder_get_direct_buffer>
    8d60:	cmp	r0, #0
    8d64:	beq	8c20 <test_add_set_defaults+0xd4>
    8d68:	ldr	r3, [pc, #216]	; 8e48 <test_add_set_defaults+0x2fc>
    8d6c:	ldr	r2, [r0, #4]
    8d70:	cmp	r2, r3
    8d74:	bne	8c20 <test_add_set_defaults+0xd4>
    8d78:	ldr	r2, [r0]
    8d7c:	adds	r3, r0, r2
    8d80:	beq	8c20 <test_add_set_defaults+0xd4>
    8d84:	ldr	r2, [r0, r2]
    8d88:	sub	r3, r3, r2
    8d8c:	ldrh	r2, [r3]
    8d90:	cmp	r2, #9
    8d94:	bls	8e08 <test_add_set_defaults+0x2bc>
    8d98:	ldrh	r1, [r3, #8]
    8d9c:	cmp	r1, #0
    8da0:	beq	8e08 <test_add_set_defaults+0x2bc>
    8da4:	ldrh	r1, [r3, #6]
    8da8:	cmp	r1, #0
    8dac:	beq	8e18 <test_add_set_defaults+0x2cc>
    8db0:	cmp	r2, #17
    8db4:	bls	8e28 <test_add_set_defaults+0x2dc>
    8db8:	ldrh	r3, [r3, #16]
    8dbc:	cmp	r3, #0
    8dc0:	movne	r0, #0
    8dc4:	beq	8e28 <test_add_set_defaults+0x2dc>
    8dc8:	add	sp, sp, #8
    8dcc:	pop	{r4, r5, r6, pc}
    8dd0:	cmp	r2, #7
    8dd4:	bhi	8c50 <test_add_set_defaults+0x104>
    8dd8:	ldr	r0, [pc, #108]	; 8e4c <test_add_set_defaults+0x300>
    8ddc:	bl	0 <puts>
    8de0:	mvn	r0, #0
    8de4:	b	8dc8 <test_add_set_defaults+0x27c>
    8de8:	ldr	r0, [pc, #96]	; 8e50 <test_add_set_defaults+0x304>
    8dec:	bl	0 <puts>
    8df0:	mvn	r0, #0
    8df4:	b	8dc8 <test_add_set_defaults+0x27c>
    8df8:	ldr	r0, [pc, #84]	; 8e54 <test_add_set_defaults+0x308>
    8dfc:	bl	0 <puts>
    8e00:	mvn	r0, #0
    8e04:	b	8dc8 <test_add_set_defaults+0x27c>
    8e08:	ldr	r0, [pc, #72]	; 8e58 <test_add_set_defaults+0x30c>
    8e0c:	bl	0 <puts>
    8e10:	mvn	r0, #0
    8e14:	b	8dc8 <test_add_set_defaults+0x27c>
    8e18:	ldr	r0, [pc, #60]	; 8e5c <test_add_set_defaults+0x310>
    8e1c:	bl	0 <puts>
    8e20:	mvn	r0, #0
    8e24:	b	8dc8 <test_add_set_defaults+0x27c>
    8e28:	ldr	r0, [pc, #48]	; 8e60 <test_add_set_defaults+0x314>
    8e2c:	bl	0 <puts>
    8e30:	mvn	r0, #0
    8e34:	b	8dc8 <test_add_set_defaults+0x27c>
    8e38:	bl	540 <MyGame_Example_TestJSONPrefixParsing_verify_table+0x1c>
    8e3c:	.word	0x0000054c
    8e40:	.word	0x00000674
    8e44:	.word	0x00000430
    8e48:	.word	0x534e4f4d
    8e4c:	.word	0x00002834
    8e50:	.word	0x00002808
    8e54:	.word	0x00002864
    8e58:	.word	0x00002894
    8e5c:	.word	0x000028c8
    8e60:	.word	0x00002908

00008e64 <test_nested_buffer>:
    8e64:	push	{r4, r5, r6, lr}
    8e68:	sub	sp, sp, #8
    8e6c:	mov	r4, r0
    8e70:	bl	0 <flatcc_builder_reset>
    8e74:	mov	r3, #0
    8e78:	mov	r0, r4
    8e7c:	mov	r2, r3
    8e80:	ldr	r1, [pc, #716]	; 9154 <test_nested_buffer+0x2f0>
    8e84:	bl	0 <flatcc_builder_start_buffer>
    8e88:	cmp	r0, #0
    8e8c:	bne	8e9c <test_nested_buffer+0x38>
    8e90:	mov	r1, #36	; 0x24
    8e94:	mov	r0, r4
    8e98:	bl	0 <flatcc_builder_start_table>
    8e9c:	ldr	r1, [pc, #692]	; 9158 <test_nested_buffer+0x2f4>
    8ea0:	mov	r0, r4
    8ea4:	bl	0 <flatcc_builder_create_string_str>
    8ea8:	subs	r5, r0, #0
    8eac:	beq	8ec4 <test_nested_buffer+0x60>
    8eb0:	mov	r1, #3
    8eb4:	mov	r0, r4
    8eb8:	bl	0 <flatcc_builder_table_add_offset>
    8ebc:	cmp	r0, #0
    8ec0:	strne	r5, [r0]
    8ec4:	mov	r3, #0
    8ec8:	mov	r2, r3
    8ecc:	ldr	r1, [pc, #640]	; 9154 <test_nested_buffer+0x2f0>
    8ed0:	mov	r0, r4
    8ed4:	bl	0 <flatcc_builder_start_buffer>
    8ed8:	cmp	r0, #0
    8edc:	bne	8eec <test_nested_buffer+0x88>
    8ee0:	mov	r1, #36	; 0x24
    8ee4:	mov	r0, r4
    8ee8:	bl	0 <flatcc_builder_start_table>
    8eec:	ldr	r1, [pc, #616]	; 915c <test_nested_buffer+0x2f8>
    8ef0:	mov	r0, r4
    8ef4:	bl	0 <flatcc_builder_create_string_str>
    8ef8:	subs	r5, r0, #0
    8efc:	beq	8f14 <test_nested_buffer+0xb0>
    8f00:	mov	r1, #3
    8f04:	mov	r0, r4
    8f08:	bl	0 <flatcc_builder_table_add_offset>
    8f0c:	cmp	r0, #0
    8f10:	strne	r5, [r0]
    8f14:	ldr	r5, [pc, #580]	; 9160 <test_nested_buffer+0x2fc>
    8f18:	mov	r2, #1
    8f1c:	add	r1, r5, #12
    8f20:	mov	r0, r4
    8f24:	bl	0 <flatcc_builder_check_required>
    8f28:	cmp	r0, #0
    8f2c:	beq	913c <test_nested_buffer+0x2d8>
    8f30:	mov	r0, r4
    8f34:	bl	0 <flatcc_builder_end_table>
    8f38:	mov	r1, r0
    8f3c:	mov	r0, r4
    8f40:	bl	0 <flatcc_builder_end_buffer>
    8f44:	subs	r6, r0, #0
    8f48:	beq	8f60 <test_nested_buffer+0xfc>
    8f4c:	mov	r1, #13
    8f50:	mov	r0, r4
    8f54:	bl	0 <flatcc_builder_table_add_offset>
    8f58:	cmp	r0, #0
    8f5c:	strne	r6, [r0]
    8f60:	mov	r3, #2
    8f64:	mov	r2, r3
    8f68:	mov	r1, r3
    8f6c:	mov	r0, r4
    8f70:	bl	0 <flatcc_builder_table_add>
    8f74:	add	r1, r5, #12
    8f78:	mov	r2, #1
    8f7c:	cmp	r0, #0
    8f80:	movne	r3, #10
    8f84:	strhne	r3, [r0]
    8f88:	mov	r0, r4
    8f8c:	bl	0 <flatcc_builder_check_required>
    8f90:	cmp	r0, #0
    8f94:	beq	913c <test_nested_buffer+0x2d8>
    8f98:	mov	r0, r4
    8f9c:	bl	0 <flatcc_builder_end_table>
    8fa0:	mov	r1, r0
    8fa4:	mov	r0, r4
    8fa8:	bl	0 <flatcc_builder_end_buffer>
    8fac:	mov	r0, r4
    8fb0:	add	r1, sp, #4
    8fb4:	bl	0 <flatcc_builder_get_direct_buffer>
    8fb8:	ldr	r3, [pc, #420]	; 9164 <test_nested_buffer+0x300>
    8fbc:	ldr	r2, [sp, #4]
    8fc0:	ldr	r3, [r3]
    8fc4:	mov	r4, r0
    8fc8:	mov	r1, r0
    8fcc:	ldr	r0, [pc, #404]	; 9168 <test_nested_buffer+0x304>
    8fd0:	bl	20 <hexdump>
    8fd4:	cmp	r4, #0
    8fd8:	beq	8fec <test_nested_buffer+0x188>
    8fdc:	ldr	r3, [pc, #392]	; 916c <test_nested_buffer+0x308>
    8fe0:	ldr	r2, [r4, #4]
    8fe4:	cmp	r2, r3
    8fe8:	beq	8ff0 <test_nested_buffer+0x18c>
    8fec:	bl	220 <flatbuffers_string_vec_at.part.20+0x1c>
    8ff0:	ldr	r3, [r4]
    8ff4:	adds	r5, r4, r3
    8ff8:	beq	8fec <test_nested_buffer+0x188>
    8ffc:	ldr	r4, [r4, r3]
    9000:	sub	r4, r5, r4
    9004:	ldrh	r6, [r4]
    9008:	cmp	r6, #11
    900c:	bhi	9024 <test_nested_buffer+0x1c0>
    9010:	ldr	r3, [pc, #344]	; 9170 <test_nested_buffer+0x30c>
    9014:	ldr	r2, [pc, #344]	; 9174 <test_nested_buffer+0x310>
    9018:	ldr	r1, [pc, #344]	; 9178 <test_nested_buffer+0x314>
    901c:	ldr	r0, [pc, #344]	; 917c <test_nested_buffer+0x318>
    9020:	bl	0 <__assert_fail>
    9024:	ldrh	r0, [r4, #10]
    9028:	cmp	r0, #0
    902c:	beq	9010 <test_nested_buffer+0x1ac>
    9030:	ldr	r3, [r5, r0]
    9034:	add	r0, r5, r0
    9038:	add	r3, r3, #4
    903c:	add	r0, r0, r3
    9040:	ldr	r1, [pc, #272]	; 9158 <test_nested_buffer+0x2f4>
    9044:	bl	0 <strcmp>
    9048:	cmp	r0, #0
    904c:	bne	911c <test_nested_buffer+0x2b8>
    9050:	cmp	r6, #31
    9054:	bls	908c <test_nested_buffer+0x228>
    9058:	ldrh	r3, [r4, #30]
    905c:	cmp	r3, #0
    9060:	beq	9088 <test_nested_buffer+0x224>
    9064:	ldr	r2, [r5, r3]
    9068:	add	r3, r5, r3
    906c:	add	r2, r2, #4
    9070:	adds	r0, r3, r2
    9074:	beq	9088 <test_nested_buffer+0x224>
    9078:	ldr	r1, [pc, #236]	; 916c <test_nested_buffer+0x308>
    907c:	ldr	ip, [r0, #4]
    9080:	cmp	ip, r1
    9084:	beq	90f8 <test_nested_buffer+0x294>
    9088:	mov	r0, #0
    908c:	ldrh	r3, [r4, #8]
    9090:	cmp	r3, #0
    9094:	beq	910c <test_nested_buffer+0x2a8>
    9098:	ldrsh	r3, [r5, r3]
    909c:	cmp	r3, #10
    90a0:	bne	910c <test_nested_buffer+0x2a8>
    90a4:	cmp	r0, #0
    90a8:	beq	8fec <test_nested_buffer+0x188>
    90ac:	ldr	r3, [r0]
    90b0:	sub	r3, r0, r3
    90b4:	ldrh	r2, [r3]
    90b8:	cmp	r2, #11
    90bc:	bls	9010 <test_nested_buffer+0x1ac>
    90c0:	ldrh	r2, [r3, #10]
    90c4:	cmp	r2, #0
    90c8:	beq	9010 <test_nested_buffer+0x1ac>
    90cc:	ldr	r3, [r0, r2]
    90d0:	add	r0, r0, r2
    90d4:	add	r3, r3, #4
    90d8:	adds	r0, r0, r3
    90dc:	beq	9140 <test_nested_buffer+0x2dc>
    90e0:	ldr	r1, [pc, #116]	; 915c <test_nested_buffer+0x2f8>
    90e4:	bl	0 <strcmp>
    90e8:	cmp	r0, #0
    90ec:	bne	912c <test_nested_buffer+0x2c8>
    90f0:	add	sp, sp, #8
    90f4:	pop	{r4, r5, r6, pc}
    90f8:	ldr	r3, [r3, r2]
    90fc:	add	r0, r0, r3
    9100:	ldrh	r3, [r4, #8]
    9104:	cmp	r3, #0
    9108:	bne	9098 <test_nested_buffer+0x234>
    910c:	ldr	r0, [pc, #108]	; 9180 <test_nested_buffer+0x31c>
    9110:	bl	0 <puts>
    9114:	mvn	r0, #0
    9118:	b	90f0 <test_nested_buffer+0x28c>
    911c:	ldr	r0, [pc, #96]	; 9184 <test_nested_buffer+0x320>
    9120:	bl	0 <puts>
    9124:	mvn	r0, #0
    9128:	b	90f0 <test_nested_buffer+0x28c>
    912c:	ldr	r0, [pc, #84]	; 9188 <test_nested_buffer+0x324>
    9130:	bl	0 <puts>
    9134:	mvn	r0, #0
    9138:	b	90f0 <test_nested_buffer+0x28c>
    913c:	bl	540 <MyGame_Example_TestJSONPrefixParsing_verify_table+0x1c>
    9140:	ldr	r3, [pc, #68]	; 918c <test_nested_buffer+0x328>
    9144:	ldr	r2, [pc, #68]	; 9190 <test_nested_buffer+0x32c>
    9148:	ldr	r1, [pc, #68]	; 9194 <test_nested_buffer+0x330>
    914c:	ldr	r0, [pc, #68]	; 9198 <test_nested_buffer+0x334>
    9150:	bl	0 <__assert_fail>
    9154:	.word	0x0000054c
    9158:	.word	0x00000674
    915c:	.word	0x00002940
    9160:	.word	0x00000430
    9164:	.word	0x00000000
    9168:	.word	0x00002950
    916c:	.word	0x534e4f4d
    9170:	.word	0x00000244
    9174:	.word	0x000002bb
    9178:	.word	0x00000024
    917c:	.word	0x00000164
    9180:	.word	0x00002980
    9184:	.word	0x00002964
    9188:	.word	0x000029c0
    918c:	.word	0x00000664
    9190:	.word	0x0000088c
    9194:	.word	0x00000c90
    9198:	.word	0x000029a4

0000919c <test_nested_buffer_first>:
    919c:	push	{r4, r5, r6, lr}
    91a0:	sub	sp, sp, #8
    91a4:	mov	r4, r0
    91a8:	bl	0 <flatcc_builder_reset>
    91ac:	mov	r3, #0
    91b0:	mov	r0, r4
    91b4:	mov	r2, r3
    91b8:	ldr	r1, [pc, #716]	; 948c <test_nested_buffer_first+0x2f0>
    91bc:	bl	0 <flatcc_builder_start_buffer>
    91c0:	cmp	r0, #0
    91c4:	bne	91d4 <test_nested_buffer_first+0x38>
    91c8:	mov	r1, #36	; 0x24
    91cc:	mov	r0, r4
    91d0:	bl	0 <flatcc_builder_start_table>
    91d4:	mov	r3, #0
    91d8:	mov	r2, r3
    91dc:	ldr	r1, [pc, #680]	; 948c <test_nested_buffer_first+0x2f0>
    91e0:	mov	r0, r4
    91e4:	bl	0 <flatcc_builder_start_buffer>
    91e8:	cmp	r0, #0
    91ec:	bne	91fc <test_nested_buffer_first+0x60>
    91f0:	mov	r1, #36	; 0x24
    91f4:	mov	r0, r4
    91f8:	bl	0 <flatcc_builder_start_table>
    91fc:	ldr	r1, [pc, #652]	; 9490 <test_nested_buffer_first+0x2f4>
    9200:	mov	r0, r4
    9204:	bl	0 <flatcc_builder_create_string_str>
    9208:	subs	r5, r0, #0
    920c:	beq	9224 <test_nested_buffer_first+0x88>
    9210:	mov	r1, #3
    9214:	mov	r0, r4
    9218:	bl	0 <flatcc_builder_table_add_offset>
    921c:	cmp	r0, #0
    9220:	strne	r5, [r0]
    9224:	ldr	r5, [pc, #616]	; 9494 <test_nested_buffer_first+0x2f8>
    9228:	mov	r2, #1
    922c:	add	r1, r5, #12
    9230:	mov	r0, r4
    9234:	bl	0 <flatcc_builder_check_required>
    9238:	cmp	r0, #0
    923c:	beq	9474 <test_nested_buffer_first+0x2d8>
    9240:	mov	r0, r4
    9244:	bl	0 <flatcc_builder_end_table>
    9248:	mov	r1, r0
    924c:	mov	r0, r4
    9250:	bl	0 <flatcc_builder_end_buffer>
    9254:	subs	r6, r0, #0
    9258:	beq	9270 <test_nested_buffer_first+0xd4>
    925c:	mov	r1, #13
    9260:	mov	r0, r4
    9264:	bl	0 <flatcc_builder_table_add_offset>
    9268:	cmp	r0, #0
    926c:	strne	r6, [r0]
    9270:	mov	r3, #2
    9274:	mov	r1, r3
    9278:	mov	r2, r3
    927c:	mov	r0, r4
    9280:	bl	0 <flatcc_builder_table_add>
    9284:	ldr	r1, [pc, #524]	; 9498 <test_nested_buffer_first+0x2fc>
    9288:	cmp	r0, #0
    928c:	movne	r3, #10
    9290:	strhne	r3, [r0]
    9294:	mov	r0, r4
    9298:	bl	0 <flatcc_builder_create_string_str>
    929c:	subs	r6, r0, #0
    92a0:	beq	92b8 <test_nested_buffer_first+0x11c>
    92a4:	mov	r1, #3
    92a8:	mov	r0, r4
    92ac:	bl	0 <flatcc_builder_table_add_offset>
    92b0:	cmp	r0, #0
    92b4:	strne	r6, [r0]
    92b8:	add	r1, r5, #12
    92bc:	mov	r2, #1
    92c0:	mov	r0, r4
    92c4:	bl	0 <flatcc_builder_check_required>
    92c8:	cmp	r0, #0
    92cc:	beq	9474 <test_nested_buffer_first+0x2d8>
    92d0:	mov	r0, r4
    92d4:	bl	0 <flatcc_builder_end_table>
    92d8:	mov	r1, r0
    92dc:	mov	r0, r4
    92e0:	bl	0 <flatcc_builder_end_buffer>
    92e4:	mov	r0, r4
    92e8:	add	r1, sp, #4
    92ec:	bl	0 <flatcc_builder_get_direct_buffer>
    92f0:	ldr	r3, [pc, #420]	; 949c <test_nested_buffer_first+0x300>
    92f4:	ldr	r2, [sp, #4]
    92f8:	ldr	r3, [r3]
    92fc:	mov	r4, r0
    9300:	mov	r1, r0
    9304:	ldr	r0, [pc, #404]	; 94a0 <test_nested_buffer_first+0x304>
    9308:	bl	20 <hexdump>
    930c:	cmp	r4, #0
    9310:	beq	9324 <test_nested_buffer_first+0x188>
    9314:	ldr	r3, [pc, #392]	; 94a4 <test_nested_buffer_first+0x308>
    9318:	ldr	r2, [r4, #4]
    931c:	cmp	r2, r3
    9320:	beq	9328 <test_nested_buffer_first+0x18c>
    9324:	bl	220 <flatbuffers_string_vec_at.part.20+0x1c>
    9328:	ldr	r3, [r4]
    932c:	adds	r5, r4, r3
    9330:	beq	9324 <test_nested_buffer_first+0x188>
    9334:	ldr	r4, [r4, r3]
    9338:	sub	r4, r5, r4
    933c:	ldrh	r6, [r4]
    9340:	cmp	r6, #11
    9344:	bhi	935c <test_nested_buffer_first+0x1c0>
    9348:	ldr	r3, [pc, #344]	; 94a8 <test_nested_buffer_first+0x30c>
    934c:	ldr	r2, [pc, #344]	; 94ac <test_nested_buffer_first+0x310>
    9350:	ldr	r1, [pc, #344]	; 94b0 <test_nested_buffer_first+0x314>
    9354:	ldr	r0, [pc, #344]	; 94b4 <test_nested_buffer_first+0x318>
    9358:	bl	0 <__assert_fail>
    935c:	ldrh	r0, [r4, #10]
    9360:	cmp	r0, #0
    9364:	beq	9348 <test_nested_buffer_first+0x1ac>
    9368:	ldr	r3, [r5, r0]
    936c:	add	r0, r5, r0
    9370:	add	r3, r3, #4
    9374:	add	r0, r0, r3
    9378:	ldr	r1, [pc, #280]	; 9498 <test_nested_buffer_first+0x2fc>
    937c:	bl	0 <strcmp>
    9380:	cmp	r0, #0
    9384:	bne	9454 <test_nested_buffer_first+0x2b8>
    9388:	cmp	r6, #31
    938c:	bls	93c4 <test_nested_buffer_first+0x228>
    9390:	ldrh	r3, [r4, #30]
    9394:	cmp	r3, #0
    9398:	beq	93c0 <test_nested_buffer_first+0x224>
    939c:	ldr	r2, [r5, r3]
    93a0:	add	r3, r5, r3
    93a4:	add	r2, r2, #4
    93a8:	adds	r0, r3, r2
    93ac:	beq	93c0 <test_nested_buffer_first+0x224>
    93b0:	ldr	r1, [pc, #236]	; 94a4 <test_nested_buffer_first+0x308>
    93b4:	ldr	ip, [r0, #4]
    93b8:	cmp	ip, r1
    93bc:	beq	9430 <test_nested_buffer_first+0x294>
    93c0:	mov	r0, #0
    93c4:	ldrh	r3, [r4, #8]
    93c8:	cmp	r3, #0
    93cc:	beq	9444 <test_nested_buffer_first+0x2a8>
    93d0:	ldrsh	r3, [r5, r3]
    93d4:	cmp	r3, #10
    93d8:	bne	9444 <test_nested_buffer_first+0x2a8>
    93dc:	cmp	r0, #0
    93e0:	beq	9324 <test_nested_buffer_first+0x188>
    93e4:	ldr	r3, [r0]
    93e8:	sub	r3, r0, r3
    93ec:	ldrh	r2, [r3]
    93f0:	cmp	r2, #11
    93f4:	bls	9348 <test_nested_buffer_first+0x1ac>
    93f8:	ldrh	r2, [r3, #10]
    93fc:	cmp	r2, #0
    9400:	beq	9348 <test_nested_buffer_first+0x1ac>
    9404:	ldr	r3, [r0, r2]
    9408:	add	r0, r0, r2
    940c:	add	r3, r3, #4
    9410:	adds	r0, r0, r3
    9414:	beq	9478 <test_nested_buffer_first+0x2dc>
    9418:	ldr	r1, [pc, #112]	; 9490 <test_nested_buffer_first+0x2f4>
    941c:	bl	0 <strcmp>
    9420:	cmp	r0, #0
    9424:	bne	9464 <test_nested_buffer_first+0x2c8>
    9428:	add	sp, sp, #8
    942c:	pop	{r4, r5, r6, pc}
    9430:	ldr	r3, [r3, r2]
    9434:	add	r0, r0, r3
    9438:	ldrh	r3, [r4, #8]
    943c:	cmp	r3, #0
    9440:	bne	93d0 <test_nested_buffer_first+0x234>
    9444:	ldr	r0, [pc, #108]	; 94b8 <test_nested_buffer_first+0x31c>
    9448:	bl	0 <puts>
    944c:	mvn	r0, #0
    9450:	b	9428 <test_nested_buffer_first+0x28c>
    9454:	ldr	r0, [pc, #96]	; 94bc <test_nested_buffer_first+0x320>
    9458:	bl	0 <puts>
    945c:	mvn	r0, #0
    9460:	b	9428 <test_nested_buffer_first+0x28c>
    9464:	ldr	r0, [pc, #84]	; 94c0 <test_nested_buffer_first+0x324>
    9468:	bl	0 <puts>
    946c:	mvn	r0, #0
    9470:	b	9428 <test_nested_buffer_first+0x28c>
    9474:	bl	540 <MyGame_Example_TestJSONPrefixParsing_verify_table+0x1c>
    9478:	ldr	r3, [pc, #68]	; 94c4 <test_nested_buffer_first+0x328>
    947c:	ldr	r2, [pc, #68]	; 94c8 <test_nested_buffer_first+0x32c>
    9480:	ldr	r1, [pc, #68]	; 94cc <test_nested_buffer_first+0x330>
    9484:	ldr	r0, [pc, #68]	; 94d0 <test_nested_buffer_first+0x334>
    9488:	bl	0 <__assert_fail>
    948c:	.word	0x0000054c
    9490:	.word	0x00002940
    9494:	.word	0x00000430
    9498:	.word	0x00000674
    949c:	.word	0x00000000
    94a0:	.word	0x00002950
    94a4:	.word	0x534e4f4d
    94a8:	.word	0x00000244
    94ac:	.word	0x000002bb
    94b0:	.word	0x00000024
    94b4:	.word	0x00000164
    94b8:	.word	0x00002980
    94bc:	.word	0x00002964
    94c0:	.word	0x000029c0
    94c4:	.word	0x00000678
    94c8:	.word	0x000008c1
    94cc:	.word	0x00000c90
    94d0:	.word	0x000029a4

000094d4 <test_nested_buffer_using_nest>:
    94d4:	push	{r4, r5, r6, r7, lr}
    94d8:	sub	sp, sp, #1040	; 0x410
    94dc:	sub	sp, sp, #4
    94e0:	mov	r4, r0
    94e4:	bl	0 <flatcc_builder_reset>
    94e8:	mov	r3, #0
    94ec:	mov	r0, r4
    94f0:	mov	r2, r3
    94f4:	ldr	r1, [pc, #888]	; 9874 <test_nested_buffer_using_nest+0x3a0>
    94f8:	bl	0 <flatcc_builder_start_buffer>
    94fc:	cmp	r0, #0
    9500:	bne	9510 <test_nested_buffer_using_nest+0x3c>
    9504:	mov	r1, #36	; 0x24
    9508:	mov	r0, r4
    950c:	bl	0 <flatcc_builder_start_table>
    9510:	ldr	r1, [pc, #864]	; 9878 <test_nested_buffer_using_nest+0x3a4>
    9514:	mov	r0, r4
    9518:	bl	0 <flatcc_builder_create_string_str>
    951c:	subs	r5, r0, #0
    9520:	beq	9538 <test_nested_buffer_using_nest+0x64>
    9524:	mov	r1, #3
    9528:	mov	r0, r4
    952c:	bl	0 <flatcc_builder_table_add_offset>
    9530:	cmp	r0, #0
    9534:	strne	r5, [r0]
    9538:	mov	r3, #2
    953c:	mov	r2, r3
    9540:	mov	r1, #1
    9544:	mov	r0, r4
    9548:	bl	0 <flatcc_builder_table_add>
    954c:	ldr	r5, [pc, #808]	; 987c <test_nested_buffer_using_nest+0x3a8>
    9550:	mov	r2, #1
    9554:	add	r1, r5, #12
    9558:	cmp	r0, #0
    955c:	movne	r3, #42	; 0x2a
    9560:	strhne	r3, [r0]
    9564:	mov	r0, r4
    9568:	bl	0 <flatcc_builder_check_required>
    956c:	cmp	r0, #0
    9570:	beq	985c <test_nested_buffer_using_nest+0x388>
    9574:	mov	r0, r4
    9578:	bl	0 <flatcc_builder_end_table>
    957c:	mov	r1, r0
    9580:	mov	r0, r4
    9584:	bl	0 <flatcc_builder_end_buffer>
    9588:	mov	r0, r4
    958c:	bl	0 <flatcc_builder_get_buffer_size>
    9590:	add	r1, sp, #16
    9594:	mov	r2, #1024	; 0x400
    9598:	mov	r6, r0
    959c:	mov	r0, r4
    95a0:	bl	0 <flatcc_builder_copy_buffer>
    95a4:	cmp	r0, #0
    95a8:	beq	984c <test_nested_buffer_using_nest+0x378>
    95ac:	mov	r0, r4
    95b0:	bl	0 <flatcc_builder_reset>
    95b4:	mov	r3, #0
    95b8:	mov	r2, r3
    95bc:	ldr	r1, [pc, #688]	; 9874 <test_nested_buffer_using_nest+0x3a0>
    95c0:	mov	r0, r4
    95c4:	bl	0 <flatcc_builder_start_buffer>
    95c8:	cmp	r0, #0
    95cc:	bne	95dc <test_nested_buffer_using_nest+0x108>
    95d0:	mov	r1, #36	; 0x24
    95d4:	mov	r0, r4
    95d8:	bl	0 <flatcc_builder_start_table>
    95dc:	mvn	r1, #0
    95e0:	mov	r3, #8
    95e4:	mov	r2, r6
    95e8:	str	r1, [sp, #4]
    95ec:	str	r3, [sp]
    95f0:	add	r1, sp, #16
    95f4:	mov	r3, #1
    95f8:	mov	r0, r4
    95fc:	bl	0 <flatcc_builder_create_vector>
    9600:	subs	r6, r0, #0
    9604:	beq	961c <test_nested_buffer_using_nest+0x148>
    9608:	mov	r1, #13
    960c:	mov	r0, r4
    9610:	bl	0 <flatcc_builder_table_add_offset>
    9614:	cmp	r0, #0
    9618:	strne	r6, [r0]
    961c:	mov	r3, #2
    9620:	mov	r1, r3
    9624:	mov	r2, r3
    9628:	mov	r0, r4
    962c:	bl	0 <flatcc_builder_table_add>
    9630:	ldr	r1, [pc, #584]	; 9880 <test_nested_buffer_using_nest+0x3ac>
    9634:	cmp	r0, #0
    9638:	movne	r3, #10
    963c:	strhne	r3, [r0]
    9640:	mov	r0, r4
    9644:	bl	0 <flatcc_builder_create_string_str>
    9648:	subs	r6, r0, #0
    964c:	beq	9664 <test_nested_buffer_using_nest+0x190>
    9650:	mov	r1, #3
    9654:	mov	r0, r4
    9658:	bl	0 <flatcc_builder_table_add_offset>
    965c:	cmp	r0, #0
    9660:	strne	r6, [r0]
    9664:	add	r1, r5, #12
    9668:	mov	r2, #1
    966c:	mov	r0, r4
    9670:	bl	0 <flatcc_builder_check_required>
    9674:	cmp	r0, #0
    9678:	beq	985c <test_nested_buffer_using_nest+0x388>
    967c:	mov	r0, r4
    9680:	bl	0 <flatcc_builder_end_table>
    9684:	mov	r1, r0
    9688:	mov	r0, r4
    968c:	bl	0 <flatcc_builder_end_buffer>
    9690:	add	r1, sp, #12
    9694:	mov	r0, r4
    9698:	bl	0 <flatcc_builder_get_direct_buffer>
    969c:	ldr	r3, [pc, #480]	; 9884 <test_nested_buffer_using_nest+0x3b0>
    96a0:	ldr	r2, [sp, #12]
    96a4:	ldr	r3, [r3]
    96a8:	mov	r4, r0
    96ac:	mov	r1, r0
    96b0:	ldr	r0, [pc, #464]	; 9888 <test_nested_buffer_using_nest+0x3b4>
    96b4:	bl	20 <hexdump>
    96b8:	cmp	r4, #0
    96bc:	beq	96d0 <test_nested_buffer_using_nest+0x1fc>
    96c0:	ldr	r3, [pc, #452]	; 988c <test_nested_buffer_using_nest+0x3b8>
    96c4:	ldr	r2, [r4, #4]
    96c8:	cmp	r2, r3
    96cc:	beq	96d4 <test_nested_buffer_using_nest+0x200>
    96d0:	bl	220 <flatbuffers_string_vec_at.part.20+0x1c>
    96d4:	ldr	r3, [r4]
    96d8:	adds	r6, r4, r3
    96dc:	beq	96d0 <test_nested_buffer_using_nest+0x1fc>
    96e0:	ldr	r5, [r4, r3]
    96e4:	sub	r5, r6, r5
    96e8:	ldrh	r7, [r5]
    96ec:	cmp	r7, #11
    96f0:	bhi	9708 <test_nested_buffer_using_nest+0x234>
    96f4:	ldr	r3, [pc, #404]	; 9890 <test_nested_buffer_using_nest+0x3bc>
    96f8:	ldr	r2, [pc, #404]	; 9894 <test_nested_buffer_using_nest+0x3c0>
    96fc:	ldr	r1, [pc, #404]	; 9898 <test_nested_buffer_using_nest+0x3c4>
    9700:	ldr	r0, [pc, #404]	; 989c <test_nested_buffer_using_nest+0x3c8>
    9704:	bl	0 <__assert_fail>
    9708:	ldrh	r0, [r5, #10]
    970c:	cmp	r0, #0
    9710:	beq	96f4 <test_nested_buffer_using_nest+0x220>
    9714:	ldr	r3, [r6, r0]
    9718:	add	r0, r6, r0
    971c:	add	r3, r3, #4
    9720:	add	r0, r0, r3
    9724:	ldr	r1, [pc, #340]	; 9880 <test_nested_buffer_using_nest+0x3ac>
    9728:	bl	0 <strcmp>
    972c:	subs	r4, r0, #0
    9730:	bne	981c <test_nested_buffer_using_nest+0x348>
    9734:	cmp	r7, #31
    9738:	bls	9770 <test_nested_buffer_using_nest+0x29c>
    973c:	ldrh	r3, [r5, #30]
    9740:	cmp	r3, #0
    9744:	beq	976c <test_nested_buffer_using_nest+0x298>
    9748:	ldr	r2, [r6, r3]
    974c:	add	r3, r6, r3
    9750:	add	r2, r2, #4
    9754:	adds	r4, r3, r2
    9758:	beq	976c <test_nested_buffer_using_nest+0x298>
    975c:	ldr	r1, [pc, #296]	; 988c <test_nested_buffer_using_nest+0x3b8>
    9760:	ldr	r0, [r4, #4]
    9764:	cmp	r0, r1
    9768:	beq	97f8 <test_nested_buffer_using_nest+0x324>
    976c:	mov	r4, #0
    9770:	ldrh	r3, [r5, #8]
    9774:	cmp	r3, #0
    9778:	beq	980c <test_nested_buffer_using_nest+0x338>
    977c:	ldrsh	r3, [r6, r3]
    9780:	cmp	r3, #10
    9784:	bne	980c <test_nested_buffer_using_nest+0x338>
    9788:	cmp	r4, #0
    978c:	beq	96d0 <test_nested_buffer_using_nest+0x1fc>
    9790:	ldr	r5, [r4]
    9794:	sub	r5, r4, r5
    9798:	ldrh	r3, [r5]
    979c:	cmp	r3, #11
    97a0:	bls	96f4 <test_nested_buffer_using_nest+0x220>
    97a4:	ldrh	r0, [r5, #10]
    97a8:	cmp	r0, #0
    97ac:	beq	96f4 <test_nested_buffer_using_nest+0x220>
    97b0:	ldr	r3, [r4, r0]
    97b4:	add	r0, r4, r0
    97b8:	add	r3, r3, #4
    97bc:	adds	r0, r0, r3
    97c0:	beq	9860 <test_nested_buffer_using_nest+0x38c>
    97c4:	ldr	r1, [pc, #172]	; 9878 <test_nested_buffer_using_nest+0x3a4>
    97c8:	bl	0 <strcmp>
    97cc:	cmp	r0, #0
    97d0:	bne	983c <test_nested_buffer_using_nest+0x368>
    97d4:	ldrh	r3, [r5, #6]
    97d8:	cmp	r3, #0
    97dc:	beq	982c <test_nested_buffer_using_nest+0x358>
    97e0:	ldrsh	r3, [r4, r3]
    97e4:	cmp	r3, #42	; 0x2a
    97e8:	bne	982c <test_nested_buffer_using_nest+0x358>
    97ec:	add	sp, sp, #1040	; 0x410
    97f0:	add	sp, sp, #4
    97f4:	pop	{r4, r5, r6, r7, pc}
    97f8:	ldr	r0, [r3, r2]
    97fc:	ldrh	r3, [r5, #8]
    9800:	add	r4, r4, r0
    9804:	cmp	r3, #0
    9808:	bne	977c <test_nested_buffer_using_nest+0x2a8>
    980c:	ldr	r0, [pc, #140]	; 98a0 <test_nested_buffer_using_nest+0x3cc>
    9810:	bl	0 <puts>
    9814:	mvn	r0, #0
    9818:	b	97ec <test_nested_buffer_using_nest+0x318>
    981c:	ldr	r0, [pc, #128]	; 98a4 <test_nested_buffer_using_nest+0x3d0>
    9820:	bl	0 <puts>
    9824:	mvn	r0, #0
    9828:	b	97ec <test_nested_buffer_using_nest+0x318>
    982c:	ldr	r0, [pc, #116]	; 98a8 <test_nested_buffer_using_nest+0x3d4>
    9830:	bl	0 <puts>
    9834:	mvn	r0, #0
    9838:	b	97ec <test_nested_buffer_using_nest+0x318>
    983c:	ldr	r0, [pc, #104]	; 98ac <test_nested_buffer_using_nest+0x3d8>
    9840:	bl	0 <puts>
    9844:	mvn	r0, #0
    9848:	b	97ec <test_nested_buffer_using_nest+0x318>
    984c:	ldr	r0, [pc, #92]	; 98b0 <test_nested_buffer_using_nest+0x3dc>
    9850:	bl	0 <puts>
    9854:	mvn	r0, #0
    9858:	b	97ec <test_nested_buffer_using_nest+0x318>
    985c:	bl	540 <MyGame_Example_TestJSONPrefixParsing_verify_table+0x1c>
    9860:	ldr	r3, [pc, #76]	; 98b4 <test_nested_buffer_using_nest+0x3e0>
    9864:	ldr	r2, [pc, #76]	; 98b8 <test_nested_buffer_using_nest+0x3e4>
    9868:	ldr	r1, [pc, #76]	; 98bc <test_nested_buffer_using_nest+0x3e8>
    986c:	ldr	r0, [pc, #76]	; 98c0 <test_nested_buffer_using_nest+0x3ec>
    9870:	bl	0 <__assert_fail>
    9874:	.word	0x0000054c
    9878:	.word	0x00002940
    987c:	.word	0x00000430
    9880:	.word	0x00000674
    9884:	.word	0x00000000
    9888:	.word	0x000029fc
    988c:	.word	0x534e4f4d
    9890:	.word	0x00000244
    9894:	.word	0x000002bb
    9898:	.word	0x00000024
    989c:	.word	0x00000164
    98a0:	.word	0x00002980
    98a4:	.word	0x00002964
    98a8:	.word	0x00002a20
    98ac:	.word	0x000029c0
    98b0:	.word	0x000029e0
    98b4:	.word	0x00000694
    98b8:	.word	0x000008fa
    98bc:	.word	0x00000c90
    98c0:	.word	0x000029a4

000098c4 <verify_include>:
    98c4:	mov	r0, #0
    98c8:	bx	lr

000098cc <test_struct_buffer>:
    98cc:	push	{r4, r5, r6, r7, lr}
    98d0:	mov	r4, r0
    98d4:	sub	sp, sp, #116	; 0x74
    98d8:	bl	0 <flatcc_builder_reset>
    98dc:	mov	r0, r4
    98e0:	mov	r2, #16
    98e4:	mov	r1, #32
    98e8:	bl	0 <flatcc_builder_start_struct>
    98ec:	cmp	r0, #0
    98f0:	moveq	r3, r0
    98f4:	beq	9940 <test_struct_buffer+0x74>
    98f8:	ldr	r6, [pc, #444]	; 9abc <test_struct_buffer+0x1f0>
    98fc:	ldr	r7, [pc, #444]	; 9ac0 <test_struct_buffer+0x1f4>
    9900:	mov	r2, #1065353216	; 0x3f800000
    9904:	mov	r3, #1073741824	; 0x40000000
    9908:	ldr	ip, [pc, #436]	; 9ac4 <test_struct_buffer+0x1f8>
    990c:	ldr	r1, [pc, #436]	; 9ac8 <test_struct_buffer+0x1fc>
    9910:	str	r2, [r0]
    9914:	str	r3, [r0, #4]
    9918:	mov	r2, #8
    991c:	mvn	r3, #16
    9920:	strb	r3, [r0, #28]
    9924:	str	ip, [r0, #8]
    9928:	strd	r6, [r0, #16]
    992c:	strh	r1, [r0, #26]
    9930:	strb	r2, [r0, #24]
    9934:	mov	r0, r4
    9938:	bl	0 <flatcc_builder_end_struct>
    993c:	mov	r3, r0
    9940:	mov	r2, #0
    9944:	mov	r1, #16
    9948:	mov	r0, r4
    994c:	stm	sp, {r1, r2}
    9950:	ldr	r1, [pc, #372]	; 9acc <test_struct_buffer+0x200>
    9954:	bl	0 <flatcc_builder_create_buffer>
    9958:	mov	r0, r4
    995c:	bl	0 <flatcc_builder_get_buffer_size>
    9960:	cmp	r0, #48	; 0x30
    9964:	bne	9a94 <test_struct_buffer+0x1c8>
    9968:	mov	r1, r0
    996c:	ldr	r0, [pc, #348]	; 9ad0 <test_struct_buffer+0x204>
    9970:	bl	0 <printf>
    9974:	mov	r0, r4
    9978:	bl	0 <flatcc_builder_get_emit_context>
    997c:	ldr	r5, [r0, #24]
    9980:	cmp	r5, #48	; 0x30
    9984:	bne	9a80 <test_struct_buffer+0x1b4>
    9988:	mov	r0, r4
    998c:	add	r1, sp, #12
    9990:	mov	r2, #100	; 0x64
    9994:	bl	0 <flatcc_builder_copy_buffer>
    9998:	cmp	r0, #0
    999c:	beq	9a70 <test_struct_buffer+0x1a4>
    99a0:	ldr	r3, [pc, #300]	; 9ad4 <test_struct_buffer+0x208>
    99a4:	mov	r2, r5
    99a8:	add	r1, sp, #12
    99ac:	ldr	r3, [r3]
    99b0:	ldr	r0, [pc, #288]	; 9ad8 <test_struct_buffer+0x20c>
    99b4:	bl	20 <hexdump>
    99b8:	ldr	r3, [pc, #284]	; 9adc <test_struct_buffer+0x210>
    99bc:	ldr	r2, [sp, #16]
    99c0:	cmp	r2, r3
    99c4:	beq	99dc <test_struct_buffer+0x110>
    99c8:	ldr	r0, [pc, #272]	; 9ae0 <test_struct_buffer+0x214>
    99cc:	bl	0 <puts>
    99d0:	mvn	r0, #0
    99d4:	add	sp, sp, #116	; 0x74
    99d8:	pop	{r4, r5, r6, r7, pc}
    99dc:	ldr	r3, [sp, #12]
    99e0:	add	r2, sp, #12
    99e4:	add	r3, r2, r3
    99e8:	vldr	s15, [pc, #192]	; 9ab0 <test_struct_buffer+0x1e4>
    99ec:	vldr	s14, [r3]
    99f0:	vcmp.f32	s14, s15
    99f4:	vmrs	APSR_nzcv, fpscr
    99f8:	bne	9a5c <test_struct_buffer+0x190>
    99fc:	vldr	s15, [pc, #176]	; 9ab4 <test_struct_buffer+0x1e8>
    9a00:	vldr	s14, [r3, #4]
    9a04:	vcmp.f32	s14, s15
    9a08:	vmrs	APSR_nzcv, fpscr
    9a0c:	bne	9a5c <test_struct_buffer+0x190>
    9a10:	vldr	s15, [pc, #160]	; 9ab8 <test_struct_buffer+0x1ec>
    9a14:	vldr	s14, [r3, #8]
    9a18:	vcmp.f32	s14, s15
    9a1c:	vmrs	APSR_nzcv, fpscr
    9a20:	bne	9a5c <test_struct_buffer+0x190>
    9a24:	vldr	d7, [pc, #124]	; 9aa8 <test_struct_buffer+0x1dc>
    9a28:	vldr	d6, [r3, #16]
    9a2c:	vcmp.f64	d6, d7
    9a30:	vmrs	APSR_nzcv, fpscr
    9a34:	bne	9a5c <test_struct_buffer+0x190>
    9a38:	ldr	r2, [r3, #24]
    9a3c:	ldr	r1, [pc, #160]	; 9ae4 <test_struct_buffer+0x218>
    9a40:	bic	r2, r2, #65280	; 0xff00
    9a44:	cmp	r2, r1
    9a48:	bne	9a5c <test_struct_buffer+0x190>
    9a4c:	ldrsb	r3, [r3, #28]
    9a50:	cmn	r3, #17
    9a54:	moveq	r0, #0
    9a58:	beq	99d4 <test_struct_buffer+0x108>
    9a5c:	ldr	r0, [pc, #132]	; 9ae8 <test_struct_buffer+0x21c>
    9a60:	bl	0 <puts>
    9a64:	mvn	r0, #0
    9a68:	add	sp, sp, #116	; 0x74
    9a6c:	pop	{r4, r5, r6, r7, pc}
    9a70:	ldr	r0, [pc, #116]	; 9aec <test_struct_buffer+0x220>
    9a74:	bl	0 <puts>
    9a78:	mvn	r0, #0
    9a7c:	b	99d4 <test_struct_buffer+0x108>
    9a80:	ldr	r3, [pc, #104]	; 9af0 <test_struct_buffer+0x224>
    9a84:	ldr	r2, [pc, #104]	; 9af4 <test_struct_buffer+0x228>
    9a88:	ldr	r1, [pc, #104]	; 9af8 <test_struct_buffer+0x22c>
    9a8c:	ldr	r0, [pc, #104]	; 9afc <test_struct_buffer+0x230>
    9a90:	bl	0 <__assert_fail>
    9a94:	ldr	r3, [pc, #84]	; 9af0 <test_struct_buffer+0x224>
    9a98:	ldr	r2, [pc, #96]	; 9b00 <test_struct_buffer+0x234>
    9a9c:	ldr	r1, [pc, #84]	; 9af8 <test_struct_buffer+0x22c>
    9aa0:	ldr	r0, [pc, #92]	; 9b04 <test_struct_buffer+0x238>
    9aa4:	bl	0 <__assert_fail>
    9aa8:	.word	0xcccccccd
    9aac:	.word	0x4010cccc
    9ab0:	.word	0x3f800000
    9ab4:	.word	0x40000000
    9ab8:	.word	0x40400000
    9abc:	.word	0xcccccccd
    9ac0:	.word	0x4010cccc
    9ac4:	.word	0x40400000
    9ac8:	.word	0x00000aaa
    9acc:	.word	0x0000054c
    9ad0:	.word	0x00002a50
    9ad4:	.word	0x00000000
    9ad8:	.word	0x00002ac8
    9adc:	.word	0x534e4f4d
    9ae0:	.word	0x00002af4
    9ae4:	.word	0x0aaa0008
    9ae8:	.word	0x00002adc
    9aec:	.word	0x00002abc
    9af0:	.word	0x000006b4
    9af4:	.word	0x00000925
    9af8:	.word	0x00000c90
    9afc:	.word	0x00002a70
    9b00:	.word	0x00000923
    9b04:	.word	0x00002a44

00009b08 <test_typed_struct_buffer>:
    9b08:	push	{r4, r5, r6, r7, lr}
    9b0c:	mov	r4, r0
    9b10:	sub	sp, sp, #116	; 0x74
    9b14:	bl	0 <flatcc_builder_reset>
    9b18:	mov	r0, r4
    9b1c:	mov	r2, #16
    9b20:	mov	r1, #32
    9b24:	bl	0 <flatcc_builder_start_struct>
    9b28:	cmp	r0, #0
    9b2c:	moveq	r3, r0
    9b30:	beq	9b7c <test_typed_struct_buffer+0x74>
    9b34:	ldr	r6, [pc, #600]	; 9d94 <test_typed_struct_buffer+0x28c>
    9b38:	ldr	r7, [pc, #600]	; 9d98 <test_typed_struct_buffer+0x290>
    9b3c:	mov	r2, #1065353216	; 0x3f800000
    9b40:	mov	r3, #1073741824	; 0x40000000
    9b44:	ldr	ip, [pc, #592]	; 9d9c <test_typed_struct_buffer+0x294>
    9b48:	ldr	r1, [pc, #592]	; 9da0 <test_typed_struct_buffer+0x298>
    9b4c:	str	r2, [r0]
    9b50:	str	r3, [r0, #4]
    9b54:	mov	r2, #8
    9b58:	mvn	r3, #16
    9b5c:	strb	r3, [r0, #28]
    9b60:	str	ip, [r0, #8]
    9b64:	strd	r6, [r0, #16]
    9b68:	strh	r1, [r0, #26]
    9b6c:	strb	r2, [r0, #24]
    9b70:	mov	r0, r4
    9b74:	bl	0 <flatcc_builder_end_struct>
    9b78:	mov	r3, r0
    9b7c:	mov	r2, #0
    9b80:	mov	r7, #16
    9b84:	str	r2, [sp, #4]
    9b88:	ldr	r1, [pc, #532]	; 9da4 <test_typed_struct_buffer+0x29c>
    9b8c:	str	r7, [sp]
    9b90:	mov	r0, r4
    9b94:	bl	0 <flatcc_builder_create_buffer>
    9b98:	mov	r0, r4
    9b9c:	bl	0 <flatcc_builder_get_buffer_size>
    9ba0:	cmp	r0, #48	; 0x30
    9ba4:	bne	9d68 <test_typed_struct_buffer+0x260>
    9ba8:	mov	r1, r0
    9bac:	ldr	r0, [pc, #500]	; 9da8 <test_typed_struct_buffer+0x2a0>
    9bb0:	bl	0 <printf>
    9bb4:	mov	r0, r4
    9bb8:	bl	0 <flatcc_builder_get_emit_context>
    9bbc:	ldr	r6, [r0, #24]
    9bc0:	cmp	r6, #48	; 0x30
    9bc4:	bne	9d54 <test_typed_struct_buffer+0x24c>
    9bc8:	add	r5, sp, #12
    9bcc:	mov	r0, r4
    9bd0:	mov	r1, r5
    9bd4:	mov	r2, #100	; 0x64
    9bd8:	bl	0 <flatcc_builder_copy_buffer>
    9bdc:	cmp	r0, #0
    9be0:	beq	9d34 <test_typed_struct_buffer+0x22c>
    9be4:	ldr	r3, [pc, #448]	; 9dac <test_typed_struct_buffer+0x2a4>
    9be8:	mov	r2, r6
    9bec:	mov	r1, r5
    9bf0:	ldr	r3, [r3]
    9bf4:	ldr	r0, [pc, #436]	; 9db0 <test_typed_struct_buffer+0x2a8>
    9bf8:	bl	20 <hexdump>
    9bfc:	ldr	r3, [pc, #432]	; 9db4 <test_typed_struct_buffer+0x2ac>
    9c00:	ldr	r4, [sp, #16]
    9c04:	cmp	r4, r3
    9c08:	beq	9c20 <test_typed_struct_buffer+0x118>
    9c0c:	ldr	r0, [pc, #420]	; 9db8 <test_typed_struct_buffer+0x2b0>
    9c10:	bl	0 <puts>
    9c14:	mvn	r0, #0
    9c18:	add	sp, sp, #116	; 0x74
    9c1c:	pop	{r4, r5, r6, r7, pc}
    9c20:	ldr	r3, [sp, #12]
    9c24:	cmn	r5, r3
    9c28:	beq	9d44 <test_typed_struct_buffer+0x23c>
    9c2c:	str	r7, [sp]
    9c30:	mov	r3, #32
    9c34:	mov	r2, r4
    9c38:	mov	r1, r6
    9c3c:	mov	r0, r5
    9c40:	bl	0 <flatcc_verify_struct_as_typed_root>
    9c44:	cmp	r0, #0
    9c48:	bne	9d14 <test_typed_struct_buffer+0x20c>
    9c4c:	ldr	r2, [sp, #16]
    9c50:	cmp	r2, r4
    9c54:	beq	9c68 <test_typed_struct_buffer+0x160>
    9c58:	ldr	r0, [pc, #348]	; 9dbc <test_typed_struct_buffer+0x2b4>
    9c5c:	bl	0 <puts>
    9c60:	mvn	r0, #0
    9c64:	b	9c18 <test_typed_struct_buffer+0x110>
    9c68:	ldr	r4, [sp, #12]
    9c6c:	adds	r4, r5, r4
    9c70:	beq	9c58 <test_typed_struct_buffer+0x150>
    9c74:	str	r7, [sp]
    9c78:	mov	r1, r6
    9c7c:	mov	r0, r5
    9c80:	mov	r3, #32
    9c84:	bl	0 <flatcc_verify_struct_as_typed_root>
    9c88:	cmp	r0, #0
    9c8c:	bne	9d24 <test_typed_struct_buffer+0x21c>
    9c90:	vldr	s15, [pc, #240]	; 9d88 <test_typed_struct_buffer+0x280>
    9c94:	vldr	s14, [r4]
    9c98:	vcmp.f32	s14, s15
    9c9c:	vmrs	APSR_nzcv, fpscr
    9ca0:	bne	9d00 <test_typed_struct_buffer+0x1f8>
    9ca4:	vldr	s15, [pc, #224]	; 9d8c <test_typed_struct_buffer+0x284>
    9ca8:	vldr	s14, [r4, #4]
    9cac:	vcmp.f32	s14, s15
    9cb0:	vmrs	APSR_nzcv, fpscr
    9cb4:	bne	9d00 <test_typed_struct_buffer+0x1f8>
    9cb8:	vldr	s15, [pc, #208]	; 9d90 <test_typed_struct_buffer+0x288>
    9cbc:	vldr	s14, [r4, #8]
    9cc0:	vcmp.f32	s14, s15
    9cc4:	vmrs	APSR_nzcv, fpscr
    9cc8:	bne	9d00 <test_typed_struct_buffer+0x1f8>
    9ccc:	vldr	d7, [pc, #172]	; 9d80 <test_typed_struct_buffer+0x278>
    9cd0:	vldr	d6, [r4, #16]
    9cd4:	vcmp.f64	d6, d7
    9cd8:	vmrs	APSR_nzcv, fpscr
    9cdc:	bne	9d00 <test_typed_struct_buffer+0x1f8>
    9ce0:	ldr	r3, [r4, #24]
    9ce4:	ldr	r2, [pc, #212]	; 9dc0 <test_typed_struct_buffer+0x2b8>
    9ce8:	bic	r3, r3, #65280	; 0xff00
    9cec:	cmp	r3, r2
    9cf0:	bne	9d00 <test_typed_struct_buffer+0x1f8>
    9cf4:	ldrsb	r3, [r4, #28]
    9cf8:	cmn	r3, #17
    9cfc:	beq	9c18 <test_typed_struct_buffer+0x110>
    9d00:	ldr	r0, [pc, #188]	; 9dc4 <test_typed_struct_buffer+0x2bc>
    9d04:	bl	0 <puts>
    9d08:	mvn	r0, #0
    9d0c:	add	sp, sp, #116	; 0x74
    9d10:	pop	{r4, r5, r6, r7, pc}
    9d14:	ldr	r0, [pc, #172]	; 9dc8 <test_typed_struct_buffer+0x2c0>
    9d18:	bl	0 <puts>
    9d1c:	mvn	r0, #0
    9d20:	b	9c18 <test_typed_struct_buffer+0x110>
    9d24:	ldr	r0, [pc, #160]	; 9dcc <test_typed_struct_buffer+0x2c4>
    9d28:	bl	0 <puts>
    9d2c:	mvn	r0, #0
    9d30:	b	9c18 <test_typed_struct_buffer+0x110>
    9d34:	ldr	r0, [pc, #148]	; 9dd0 <test_typed_struct_buffer+0x2c8>
    9d38:	bl	0 <puts>
    9d3c:	mvn	r0, #0
    9d40:	b	9c18 <test_typed_struct_buffer+0x110>
    9d44:	ldr	r0, [pc, #136]	; 9dd4 <test_typed_struct_buffer+0x2cc>
    9d48:	bl	0 <puts>
    9d4c:	mvn	r0, #0
    9d50:	b	9c18 <test_typed_struct_buffer+0x110>
    9d54:	ldr	r3, [pc, #124]	; 9dd8 <test_typed_struct_buffer+0x2d0>
    9d58:	ldr	r2, [pc, #124]	; 9ddc <test_typed_struct_buffer+0x2d4>
    9d5c:	ldr	r1, [pc, #124]	; 9de0 <test_typed_struct_buffer+0x2d8>
    9d60:	ldr	r0, [pc, #124]	; 9de4 <test_typed_struct_buffer+0x2dc>
    9d64:	bl	0 <__assert_fail>
    9d68:	ldr	r3, [pc, #104]	; 9dd8 <test_typed_struct_buffer+0x2d0>
    9d6c:	ldr	r2, [pc, #116]	; 9de8 <test_typed_struct_buffer+0x2e0>
    9d70:	ldr	r1, [pc, #104]	; 9de0 <test_typed_struct_buffer+0x2d8>
    9d74:	ldr	r0, [pc, #112]	; 9dec <test_typed_struct_buffer+0x2e4>
    9d78:	bl	0 <__assert_fail>
    9d7c:	nop			; (mov r0, r0)
    9d80:	.word	0xcccccccd
    9d84:	.word	0x4010cccc
    9d88:	.word	0x3f800000
    9d8c:	.word	0x40000000
    9d90:	.word	0x40400000
    9d94:	.word	0xcccccccd
    9d98:	.word	0x4010cccc
    9d9c:	.word	0x40400000
    9da0:	.word	0x00000aaa
    9da4:	.word	0x00002b18
    9da8:	.word	0x00002a50
    9dac:	.word	0x00000000
    9db0:	.word	0x00002b20
    9db4:	.word	0xa8f53ed2
    9db8:	.word	0x00002af4
    9dbc:	.word	0x00002b88
    9dc0:	.word	0x0aaa0008
    9dc4:	.word	0x00002adc
    9dc8:	.word	0x00002b64
    9dcc:	.word	0x00002ba8
    9dd0:	.word	0x00002abc
    9dd4:	.word	0x00002b3c
    9dd8:	.word	0x000006c8
    9ddc:	.word	0x00000956
    9de0:	.word	0x00000c90
    9de4:	.word	0x00002a70
    9de8:	.word	0x00000954
    9dec:	.word	0x00002a44

00009df0 <gen_monster_benchmark>:
    9df0:	ldr	r3, [pc, #508]	; 9ff4 <gen_monster_benchmark+0x204>
    9df4:	push	{r4, r5, lr}
    9df8:	mov	r4, r0
    9dfc:	ldm	r3, {r0, r1, r2}
    9e00:	sub	sp, sp, #28
    9e04:	add	r3, sp, #12
    9e08:	stmia	r3!, {r0, r1}
    9e0c:	mov	r0, r4
    9e10:	strh	r2, [r3]
    9e14:	bl	0 <flatcc_builder_reset>
    9e18:	mov	r3, #0
    9e1c:	mov	r0, r4
    9e20:	mov	r2, r3
    9e24:	ldr	r1, [pc, #460]	; 9ff8 <gen_monster_benchmark+0x208>
    9e28:	bl	0 <flatcc_builder_start_buffer>
    9e2c:	cmp	r0, #0
    9e30:	bne	9e40 <gen_monster_benchmark+0x50>
    9e34:	mov	r1, #36	; 0x24
    9e38:	mov	r0, r4
    9e3c:	bl	0 <flatcc_builder_start_table>
    9e40:	mov	r3, #2
    9e44:	mov	r2, r3
    9e48:	mov	r1, r3
    9e4c:	mov	r0, r4
    9e50:	bl	0 <flatcc_builder_table_add>
    9e54:	mov	r2, #32
    9e58:	mov	r1, #0
    9e5c:	cmp	r0, #0
    9e60:	movne	r3, #80	; 0x50
    9e64:	strhne	r3, [r0]
    9e68:	mov	r3, #16
    9e6c:	mov	r0, r4
    9e70:	bl	0 <flatcc_builder_table_add>
    9e74:	ldr	r3, [pc, #384]	; 9ffc <gen_monster_benchmark+0x20c>
    9e78:	mov	ip, #1065353216	; 0x3f800000
    9e7c:	mov	r2, #1073741824	; 0x40000000
    9e80:	ldr	r1, [pc, #376]	; a000 <gen_monster_benchmark+0x210>
    9e84:	str	ip, [r0]
    9e88:	str	r2, [r0, #4]
    9e8c:	str	r3, [r0, #8]
    9e90:	mov	r0, r4
    9e94:	bl	0 <flatcc_builder_create_string_str>
    9e98:	subs	r5, r0, #0
    9e9c:	beq	9eb4 <gen_monster_benchmark+0xc4>
    9ea0:	mov	r1, #3
    9ea4:	mov	r0, r4
    9ea8:	bl	0 <flatcc_builder_table_add_offset>
    9eac:	cmp	r0, #0
    9eb0:	strne	r5, [r0]
    9eb4:	mvn	r2, #0
    9eb8:	mov	r3, #1
    9ebc:	str	r2, [sp, #4]
    9ec0:	add	r1, sp, #12
    9ec4:	str	r3, [sp]
    9ec8:	mov	r2, #10
    9ecc:	mov	r0, r4
    9ed0:	bl	0 <flatcc_builder_create_vector>
    9ed4:	subs	r5, r0, #0
    9ed8:	beq	9ef0 <gen_monster_benchmark+0x100>
    9edc:	mov	r1, #5
    9ee0:	mov	r0, r4
    9ee4:	bl	0 <flatcc_builder_table_add_offset>
    9ee8:	cmp	r0, #0
    9eec:	strne	r5, [r0]
    9ef0:	mvn	r3, #-1073741824	; 0xc0000000
    9ef4:	mov	r2, #2
    9ef8:	mov	r1, #4
    9efc:	mov	r0, r4
    9f00:	bl	0 <flatcc_builder_start_vector>
    9f04:	mov	r1, #1
    9f08:	mov	r0, r4
    9f0c:	bl	0 <flatcc_builder_extend_vector>
    9f10:	mov	r2, #16
    9f14:	mov	r3, #32
    9f18:	mov	r1, #2
    9f1c:	strh	r2, [r0]
    9f20:	strb	r3, [r0, #2]
    9f24:	mov	r0, r4
    9f28:	bl	0 <flatcc_builder_extend_vector>
    9f2c:	mov	r2, #80	; 0x50
    9f30:	mov	r3, #96	; 0x60
    9f34:	mov	ip, #48	; 0x30
    9f38:	mov	r1, #64	; 0x40
    9f3c:	strh	ip, [r0]
    9f40:	strh	r2, [r0, #4]
    9f44:	strb	r3, [r0, #6]
    9f48:	strb	r1, [r0, #2]
    9f4c:	mov	r1, #1
    9f50:	mov	r0, r4
    9f54:	bl	0 <flatcc_builder_extend_vector>
    9f58:	mov	r1, #1
    9f5c:	cmp	r0, #0
    9f60:	movne	r2, #112	; 0x70
    9f64:	mvnne	r3, #127	; 0x7f
    9f68:	strhne	r2, [r0]
    9f6c:	ldr	r2, [pc, #144]	; a004 <gen_monster_benchmark+0x214>
    9f70:	strbne	r3, [r0, #2]
    9f74:	mvn	r3, #110	; 0x6e
    9f78:	mov	r0, r4
    9f7c:	strb	r3, [sp, #10]
    9f80:	strh	r2, [sp, #8]
    9f84:	bl	0 <flatcc_builder_extend_vector>
    9f88:	cmp	r0, #0
    9f8c:	ldrne	r3, [sp, #8]
    9f90:	strne	r3, [r0]
    9f94:	mov	r0, r4
    9f98:	bl	0 <flatcc_builder_end_vector>
    9f9c:	subs	r5, r0, #0
    9fa0:	beq	9fb8 <gen_monster_benchmark+0x1c8>
    9fa4:	mov	r1, #9
    9fa8:	mov	r0, r4
    9fac:	bl	0 <flatcc_builder_table_add_offset>
    9fb0:	cmp	r0, #0
    9fb4:	strne	r5, [r0]
    9fb8:	mov	r2, #1
    9fbc:	ldr	r1, [pc, #68]	; a008 <gen_monster_benchmark+0x218>
    9fc0:	mov	r0, r4
    9fc4:	bl	0 <flatcc_builder_check_required>
    9fc8:	cmp	r0, #0
    9fcc:	beq	9ff0 <gen_monster_benchmark+0x200>
    9fd0:	mov	r0, r4
    9fd4:	bl	0 <flatcc_builder_end_table>
    9fd8:	mov	r1, r0
    9fdc:	mov	r0, r4
    9fe0:	bl	0 <flatcc_builder_end_buffer>
    9fe4:	mov	r0, #0
    9fe8:	add	sp, sp, #28
    9fec:	pop	{r4, r5, pc}
    9ff0:	bl	540 <MyGame_Example_TestJSONPrefixParsing_verify_table+0x1c>
    9ff4:	.word	0x000004c4
    9ff8:	.word	0x0000054c
    9ffc:	.word	0xc04ccccd
    a000:	.word	0x00000674
    a004:	.word	0x00000191
    a008:	.word	0x0000043c

0000a00c <time_monster>:
    a00c:	push	{r4, r5, r6, lr}
    a010:	mov	r5, r0
    a014:	vpush	{d8}
    a018:	ldr	r0, [pc, #76]	; a06c <time_monster+0x60>
    a01c:	bl	0 <puts>
    a020:	bl	164 <elapsed_realtime>
    a024:	ldr	r4, [pc, #68]	; a070 <time_monster+0x64>
    a028:	vmov.f64	d8, d0
    a02c:	mov	r0, r5
    a030:	bl	9df0 <gen_monster_benchmark>
    a034:	subs	r4, r4, #1
    a038:	bne	a02c <time_monster+0x20>
    a03c:	mov	r0, r5
    a040:	bl	0 <flatcc_builder_get_buffer_size>
    a044:	mov	r5, r0
    a048:	bl	164 <elapsed_realtime>
    a04c:	mov	r1, r5
    a050:	ldr	r0, [pc, #28]	; a074 <time_monster+0x68>
    a054:	vmov.f64	d1, d0
    a058:	vmov.f64	d0, d8
    a05c:	bl	cd4 <show_benchmark.constprop.70>
    a060:	vpop	{d8}
    a064:	mov	r0, r4
    a068:	pop	{r4, r5, r6, pc}
    a06c:	.word	0x00002bd0
    a070:	.word	0x000f4240
    a074:	.word	0x00002be4

0000a078 <gen_struct_buffer_benchmark>:
    a078:	push	{r4, r5, r6, r7, lr}
    a07c:	mov	r4, r0
    a080:	sub	sp, sp, #12
    a084:	bl	0 <flatcc_builder_reset>
    a088:	mov	r0, r4
    a08c:	mov	r2, #16
    a090:	mov	r1, #32
    a094:	bl	0 <flatcc_builder_start_struct>
    a098:	cmp	r0, #0
    a09c:	moveq	r3, r0
    a0a0:	beq	a0ec <gen_struct_buffer_benchmark+0x74>
    a0a4:	ldr	r6, [pc, #280]	; a1c4 <gen_struct_buffer_benchmark+0x14c>
    a0a8:	ldr	r7, [pc, #280]	; a1c8 <gen_struct_buffer_benchmark+0x150>
    a0ac:	mov	r2, #1065353216	; 0x3f800000
    a0b0:	mov	r3, #1073741824	; 0x40000000
    a0b4:	ldr	ip, [pc, #272]	; a1cc <gen_struct_buffer_benchmark+0x154>
    a0b8:	ldr	r1, [pc, #272]	; a1d0 <gen_struct_buffer_benchmark+0x158>
    a0bc:	str	r2, [r0]
    a0c0:	str	r3, [r0, #4]
    a0c4:	mov	r2, #8
    a0c8:	mvn	r3, #16
    a0cc:	strb	r3, [r0, #28]
    a0d0:	str	ip, [r0, #8]
    a0d4:	strd	r6, [r0, #16]
    a0d8:	strh	r1, [r0, #26]
    a0dc:	strb	r2, [r0, #24]
    a0e0:	mov	r0, r4
    a0e4:	bl	0 <flatcc_builder_end_struct>
    a0e8:	mov	r3, r0
    a0ec:	mov	r5, #0
    a0f0:	mov	r1, #16
    a0f4:	mov	r2, r5
    a0f8:	str	r1, [sp]
    a0fc:	str	r5, [sp, #4]
    a100:	ldr	r1, [pc, #204]	; a1d4 <gen_struct_buffer_benchmark+0x15c>
    a104:	mov	r0, r4
    a108:	bl	0 <flatcc_builder_create_buffer>
    a10c:	mov	r1, r5
    a110:	mov	r0, r4
    a114:	bl	0 <flatcc_builder_get_direct_buffer>
    a118:	cmp	r0, #0
    a11c:	beq	a1a0 <gen_struct_buffer_benchmark+0x128>
    a120:	ldr	r3, [r0]
    a124:	vldr	s15, [pc, #140]	; a1b8 <gen_struct_buffer_benchmark+0x140>
    a128:	add	r0, r0, r3
    a12c:	vldr	s14, [r0]
    a130:	vcmp.f32	s14, s15
    a134:	vmrs	APSR_nzcv, fpscr
    a138:	bne	a1a0 <gen_struct_buffer_benchmark+0x128>
    a13c:	vldr	s15, [pc, #120]	; a1bc <gen_struct_buffer_benchmark+0x144>
    a140:	vldr	s14, [r0, #4]
    a144:	vcmp.f32	s14, s15
    a148:	vmrs	APSR_nzcv, fpscr
    a14c:	bne	a1a0 <gen_struct_buffer_benchmark+0x128>
    a150:	vldr	s15, [pc, #104]	; a1c0 <gen_struct_buffer_benchmark+0x148>
    a154:	vldr	s14, [r0, #8]
    a158:	vcmp.f32	s14, s15
    a15c:	vmrs	APSR_nzcv, fpscr
    a160:	bne	a1a0 <gen_struct_buffer_benchmark+0x128>
    a164:	vldr	d7, [pc, #68]	; a1b0 <gen_struct_buffer_benchmark+0x138>
    a168:	vldr	d6, [r0, #16]
    a16c:	vcmp.f64	d6, d7
    a170:	vmrs	APSR_nzcv, fpscr
    a174:	bne	a1a0 <gen_struct_buffer_benchmark+0x128>
    a178:	ldr	r3, [r0, #24]
    a17c:	ldr	r2, [pc, #84]	; a1d8 <gen_struct_buffer_benchmark+0x160>
    a180:	bic	r3, r3, #65280	; 0xff00
    a184:	cmp	r3, r2
    a188:	bne	a1a0 <gen_struct_buffer_benchmark+0x128>
    a18c:	ldrb	r0, [r0, #28]
    a190:	subs	r0, r0, #239	; 0xef
    a194:	mvnne	r0, #0
    a198:	add	sp, sp, #12
    a19c:	pop	{r4, r5, r6, r7, pc}
    a1a0:	mvn	r0, #0
    a1a4:	add	sp, sp, #12
    a1a8:	pop	{r4, r5, r6, r7, pc}
    a1ac:	nop			; (mov r0, r0)
    a1b0:	.word	0xcccccccd
    a1b4:	.word	0x4010cccc
    a1b8:	.word	0x3f800000
    a1bc:	.word	0x40000000
    a1c0:	.word	0x40400000
    a1c4:	.word	0xcccccccd
    a1c8:	.word	0x4010cccc
    a1cc:	.word	0x40400000
    a1d0:	.word	0x00000aaa
    a1d4:	.word	0x0000054c
    a1d8:	.word	0x0aaa0008

0000a1dc <time_struct_buffer>:
    a1dc:	push	{r4, r5, r6, lr}
    a1e0:	mov	r6, r0
    a1e4:	vpush	{d8-d9}
    a1e8:	ldr	r0, [pc, #104]	; a258 <time_struct_buffer+0x7c>
    a1ec:	bl	0 <puts>
    a1f0:	bl	164 <elapsed_realtime>
    a1f4:	ldr	r4, [pc, #96]	; a25c <time_struct_buffer+0x80>
    a1f8:	mov	r5, #0
    a1fc:	vmov.f64	d8, d0
    a200:	mov	r0, r6
    a204:	bl	a078 <gen_struct_buffer_benchmark>
    a208:	subs	r4, r4, #1
    a20c:	orr	r5, r5, r0
    a210:	bne	a200 <time_struct_buffer+0x24>
    a214:	bl	164 <elapsed_realtime>
    a218:	mov	r0, r6
    a21c:	vmov.f64	d9, d0
    a220:	bl	0 <flatcc_builder_get_buffer_size>
    a224:	cmp	r5, #0
    a228:	mov	r4, r0
    a22c:	beq	a238 <time_struct_buffer+0x5c>
    a230:	ldr	r0, [pc, #40]	; a260 <time_struct_buffer+0x84>
    a234:	bl	0 <puts>
    a238:	vmov.f64	d1, d9
    a23c:	vmov.f64	d0, d8
    a240:	mov	r1, r4
    a244:	ldr	r0, [pc, #24]	; a264 <time_struct_buffer+0x88>
    a248:	bl	cd4 <show_benchmark.constprop.70>
    a24c:	vpop	{d8-d9}
    a250:	mov	r0, r5
    a254:	pop	{r4, r5, r6, pc}
    a258:	.word	0x00002bd0
    a25c:	.word	0x000f4240
    a260:	.word	0x00002bfc
    a264:	.word	0x00002c10

Disassembly of section .text.unlikely:

00000000 <MyGame_Example_Monster_hp.part.9>:
   0:	push	{r4, lr}
   4:	ldr	r3, [pc, #12]	; 18 <MyGame_Example_Monster_hp.part.9+0x18>
   8:	ldr	r2, [pc, #12]	; 1c <MyGame_Example_Monster_hp.part.9+0x1c>
   c:	ldr	r1, [pc, #12]	; 20 <MyGame_Example_Monster_hp.part.9+0x20>
  10:	ldr	r0, [pc, #12]	; 24 <MyGame_Example_Monster_hp.part.9+0x24>
  14:	bl	0 <__assert_fail>
  18:	.word	0x00000000
  1c:	.word	0x000002b9
  20:	.word	0x00000024
  24:	.word	0x00000090

00000028 <MyGame_Example_Monster_hp_is_present.part.10>:
  28:	push	{r4, lr}
  2c:	ldr	r3, [pc, #12]	; 40 <MyGame_Example_Monster_hp_is_present.part.10+0x18>
  30:	ldr	r2, [pc, #12]	; 44 <MyGame_Example_Monster_hp_is_present.part.10+0x1c>
  34:	ldr	r1, [pc, #12]	; 48 <MyGame_Example_Monster_hp_is_present.part.10+0x20>
  38:	ldr	r0, [pc, #12]	; 4c <MyGame_Example_Monster_hp_is_present.part.10+0x24>
  3c:	bl	0 <__assert_fail>
  40:	.word	0x0000001c
  44:	.word	0x000002b9
  48:	.word	0x00000024
  4c:	.word	0x00000090

00000050 <MyGame_Example_Monster_pos_is_present.part.11>:
  50:	push	{r4, lr}
  54:	mov	r2, #696	; 0x2b8
  58:	ldr	r3, [pc, #8]	; 68 <MyGame_Example_Monster_pos_is_present.part.11+0x18>
  5c:	ldr	r1, [pc, #8]	; 6c <MyGame_Example_Monster_pos_is_present.part.11+0x1c>
  60:	ldr	r0, [pc, #8]	; 70 <MyGame_Example_Monster_pos_is_present.part.11+0x20>
  64:	bl	0 <__assert_fail>
  68:	.word	0x00000044
  6c:	.word	0x00000024
  70:	.word	0x00000090

00000074 <MyGame_Example_Monster_pos.part.12>:
  74:	push	{r4, lr}
  78:	mov	r2, #696	; 0x2b8
  7c:	ldr	r3, [pc, #8]	; 8c <MyGame_Example_Monster_pos.part.12+0x18>
  80:	ldr	r1, [pc, #8]	; 90 <MyGame_Example_Monster_pos.part.12+0x1c>
  84:	ldr	r0, [pc, #8]	; 94 <MyGame_Example_Monster_pos.part.12+0x20>
  88:	bl	0 <__assert_fail>
  8c:	.word	0x0000006c
  90:	.word	0x00000024
  94:	.word	0x00000090

00000098 <MyGame_Example_Monster_inventory.part.13>:
  98:	push	{r4, lr}
  9c:	ldr	r3, [pc, #12]	; b0 <MyGame_Example_Monster_inventory.part.13+0x18>
  a0:	ldr	r2, [pc, #12]	; b4 <MyGame_Example_Monster_inventory.part.13+0x1c>
  a4:	ldr	r1, [pc, #12]	; b8 <MyGame_Example_Monster_inventory.part.13+0x20>
  a8:	ldr	r0, [pc, #12]	; bc <MyGame_Example_Monster_inventory.part.13+0x24>
  ac:	bl	0 <__assert_fail>
  b0:	.word	0x00000088
  b4:	.word	0x000002c2
  b8:	.word	0x00000024
  bc:	.word	0x00000090

000000c0 <MyGame_Example_Monster_mana.part.15>:
  c0:	push	{r4, lr}
  c4:	ldr	r3, [pc, #12]	; d8 <MyGame_Example_Monster_mana.part.15+0x18>
  c8:	ldr	r2, [pc, #12]	; dc <MyGame_Example_Monster_mana.part.15+0x1c>
  cc:	ldr	r1, [pc, #12]	; e0 <MyGame_Example_Monster_mana.part.15+0x20>
  d0:	ldr	r0, [pc, #12]	; e4 <MyGame_Example_Monster_mana.part.15+0x24>
  d4:	bl	0 <__assert_fail>
  d8:	.word	0x000000c8
  dc:	.word	0x000002ba
  e0:	.word	0x00000024
  e4:	.word	0x00000090

000000e8 <MyGame_Example_Monster_mana_is_present.part.16>:
  e8:	push	{r4, lr}
  ec:	ldr	r3, [pc, #12]	; 100 <MyGame_Example_Monster_mana_is_present.part.16+0x18>
  f0:	ldr	r2, [pc, #12]	; 104 <MyGame_Example_Monster_mana_is_present.part.16+0x1c>
  f4:	ldr	r1, [pc, #12]	; 108 <MyGame_Example_Monster_mana_is_present.part.16+0x20>
  f8:	ldr	r0, [pc, #12]	; 10c <MyGame_Example_Monster_mana_is_present.part.16+0x24>
  fc:	bl	0 <__assert_fail>
 100:	.word	0x000000e4
 104:	.word	0x000002ba
 108:	.word	0x00000024
 10c:	.word	0x00000090

00000110 <MyGame_Example_Monster_test4.part.17>:
 110:	push	{r4, lr}
 114:	ldr	r3, [pc, #12]	; 128 <MyGame_Example_Monster_test4.part.17+0x18>
 118:	ldr	r2, [pc, #12]	; 12c <MyGame_Example_Monster_test4.part.17+0x1c>
 11c:	ldr	r1, [pc, #12]	; 130 <MyGame_Example_Monster_test4.part.17+0x20>
 120:	ldr	r0, [pc, #12]	; 134 <MyGame_Example_Monster_test4.part.17+0x24>
 124:	bl	0 <__assert_fail>
 128:	.word	0x0000010c
 12c:	.word	0x000002ce
 130:	.word	0x00000024
 134:	.word	0x00000090

00000138 <MyGame_Example_Test_vec_at.part.18>:
 138:	push	{r4, lr}
 13c:	mov	r2, #380	; 0x17c
 140:	ldr	r3, [pc, #8]	; 150 <MyGame_Example_Test_vec_at.part.18+0x18>
 144:	ldr	r1, [pc, #8]	; 154 <MyGame_Example_Test_vec_at.part.18+0x1c>
 148:	ldr	r0, [pc, #8]	; 158 <MyGame_Example_Test_vec_at.part.18+0x20>
 14c:	bl	0 <__assert_fail>
 150:	.word	0x0000012c
 154:	.word	0x00000024
 158:	.word	0x0000012c

0000015c <MyGame_Example_Monster_testarrayofstring.part.19>:
 15c:	push	{r4, lr}
 160:	mov	r2, #712	; 0x2c8
 164:	ldr	r3, [pc, #8]	; 174 <MyGame_Example_Monster_testarrayofstring.part.19+0x18>
 168:	ldr	r1, [pc, #8]	; 178 <MyGame_Example_Monster_testarrayofstring.part.19+0x1c>
 16c:	ldr	r0, [pc, #8]	; 17c <MyGame_Example_Monster_testarrayofstring.part.19+0x20>
 170:	bl	0 <__assert_fail>
 174:	.word	0x00000148
 178:	.word	0x00000024
 17c:	.word	0x00000090

00000180 <MyGame_Example_Monster_testarrayofbools.part.21>:
 180:	push	{r4, lr}
 184:	ldr	r3, [pc, #12]	; 198 <MyGame_Example_Monster_testarrayofbools.part.21+0x18>
 188:	ldr	r2, [pc, #12]	; 19c <MyGame_Example_Monster_testarrayofbools.part.21+0x1c>
 18c:	ldr	r1, [pc, #12]	; 1a0 <MyGame_Example_Monster_testarrayofbools.part.21+0x20>
 190:	ldr	r0, [pc, #12]	; 1a4 <MyGame_Example_Monster_testarrayofbools.part.21+0x24>
 194:	bl	0 <__assert_fail>
 198:	.word	0x00000190
 19c:	.word	0x000002ca
 1a0:	.word	0x00000024
 1a4:	.word	0x00000090

000001a8 <MyGame_Example_Monster_testarrayoftables.part.22>:
 1a8:	push	{r4, lr}
 1ac:	ldr	r3, [pc, #12]	; 1c0 <MyGame_Example_Monster_testarrayoftables.part.22+0x18>
 1b0:	ldr	r2, [pc, #12]	; 1c4 <MyGame_Example_Monster_testarrayoftables.part.22+0x1c>
 1b4:	ldr	r1, [pc, #12]	; 1c8 <MyGame_Example_Monster_testarrayoftables.part.22+0x20>
 1b8:	ldr	r0, [pc, #12]	; 1cc <MyGame_Example_Monster_testarrayoftables.part.22+0x24>
 1bc:	bl	0 <__assert_fail>
 1c0:	.word	0x000001b8
 1c4:	.word	0x000002c7
 1c8:	.word	0x00000024
 1cc:	.word	0x00000090

000001d0 <MyGame_Example_Monster_test_type.part.24>:
 1d0:	push	{r4, lr}
 1d4:	ldr	r3, [pc, #12]	; 1e8 <MyGame_Example_Monster_test_type.part.24+0x18>
 1d8:	ldr	r2, [pc, #12]	; 1ec <MyGame_Example_Monster_test_type.part.24+0x1c>
 1dc:	ldr	r1, [pc, #12]	; 1f0 <MyGame_Example_Monster_test_type.part.24+0x20>
 1e0:	ldr	r0, [pc, #12]	; 1f4 <MyGame_Example_Monster_test_type.part.24+0x24>
 1e4:	bl	0 <__assert_fail>
 1e8:	.word	0x00000204
 1ec:	.word	0x000002cd
 1f0:	.word	0x00000024
 1f4:	.word	0x00000090

000001f8 <MyGame_Example_Monster_test.part.25>:
 1f8:	push	{r4, lr}
 1fc:	ldr	r3, [pc, #12]	; 210 <MyGame_Example_Monster_test.part.25+0x18>
 200:	ldr	r2, [pc, #12]	; 214 <MyGame_Example_Monster_test.part.25+0x1c>
 204:	ldr	r1, [pc, #12]	; 218 <MyGame_Example_Monster_test.part.25+0x20>
 208:	ldr	r0, [pc, #12]	; 21c <MyGame_Example_Monster_test.part.25+0x24>
 20c:	bl	0 <__assert_fail>
 210:	.word	0x00000228
 214:	.word	0x000002cd
 218:	.word	0x00000024
 21c:	.word	0x00000090

00000220 <MyGame_Example_Monster_name.part.26>:
 220:	push	{r4, lr}
 224:	ldr	r3, [pc, #12]	; 238 <MyGame_Example_Monster_name.part.26+0x18>
 228:	ldr	r2, [pc, #12]	; 23c <MyGame_Example_Monster_name.part.26+0x1c>
 22c:	ldr	r1, [pc, #12]	; 240 <MyGame_Example_Monster_name.part.26+0x20>
 230:	ldr	r0, [pc, #12]	; 244 <MyGame_Example_Monster_name.part.26+0x24>
 234:	bl	0 <__assert_fail>
 238:	.word	0x00000244
 23c:	.word	0x000002bb
 240:	.word	0x00000024
 244:	.word	0x00000090

00000248 <MyGame_Example_Monster_testempty.part.27>:
 248:	push	{r4, lr}
 24c:	ldr	r3, [pc, #12]	; 260 <MyGame_Example_Monster_testempty.part.27+0x18>
 250:	ldr	r2, [pc, #12]	; 264 <MyGame_Example_Monster_testempty.part.27+0x1c>
 254:	ldr	r1, [pc, #12]	; 268 <MyGame_Example_Monster_testempty.part.27+0x20>
 258:	ldr	r0, [pc, #12]	; 26c <MyGame_Example_Monster_testempty.part.27+0x24>
 25c:	bl	0 <__assert_fail>
 260:	.word	0x00000260
 264:	.word	0x000002d2
 268:	.word	0x00000024
 26c:	.word	0x00000090

00000270 <MyGame_Example_Alt_manyany_type.part.28>:
 270:	push	{r4, lr}
 274:	ldr	r3, [pc, #12]	; 288 <MyGame_Example_Alt_manyany_type.part.28+0x18>
 278:	ldr	r2, [pc, #12]	; 28c <MyGame_Example_Alt_manyany_type.part.28+0x1c>
 27c:	ldr	r1, [pc, #12]	; 290 <MyGame_Example_Alt_manyany_type.part.28+0x20>
 280:	ldr	r0, [pc, #12]	; 294 <MyGame_Example_Alt_manyany_type.part.28+0x24>
 284:	bl	0 <__assert_fail>
 288:	.word	0x00000284
 28c:	.word	0x0000026d
 290:	.word	0x00000024
 294:	.word	0x00000090

00000298 <MyGame_Example_Alt_manyany.part.29>:
 298:	push	{r4, lr}
 29c:	ldr	r3, [pc, #12]	; 2b0 <MyGame_Example_Alt_manyany.part.29+0x18>
 2a0:	ldr	r2, [pc, #12]	; 2b4 <MyGame_Example_Alt_manyany.part.29+0x1c>
 2a4:	ldr	r1, [pc, #12]	; 2b8 <MyGame_Example_Alt_manyany.part.29+0x20>
 2a8:	ldr	r0, [pc, #12]	; 2bc <MyGame_Example_Alt_manyany.part.29+0x24>
 2ac:	bl	0 <__assert_fail>
 2b0:	.word	0x000002a4
 2b4:	.word	0x0000026d
 2b8:	.word	0x00000024
 2bc:	.word	0x00000090

000002c0 <flatbuffers_generic_vec_at.part.30>:
 2c0:	push	{r4, lr}
 2c4:	mov	r2, #117	; 0x75
 2c8:	ldr	r3, [pc, #8]	; 2d8 <flatbuffers_generic_vec_at.part.30+0x18>
 2cc:	ldr	r1, [pc, #8]	; 2dc <flatbuffers_generic_vec_at.part.30+0x1c>
 2d0:	ldr	r0, [pc, #8]	; 2e0 <flatbuffers_generic_vec_at.part.30+0x20>
 2d4:	bl	0 <__assert_fail>
 2d8:	.word	0x000002c0
 2dc:	.word	0x000000b8
 2e0:	.word	0x0000012c

000002e4 <flatbuffers_union_type_vec_at.part.31>:
 2e4:	push	{r4, lr}
 2e8:	ldr	r3, [pc, #12]	; 2fc <flatbuffers_union_type_vec_at.part.31+0x18>
 2ec:	ldr	r2, [pc, #12]	; 300 <flatbuffers_union_type_vec_at.part.31+0x1c>
 2f0:	ldr	r1, [pc, #12]	; 304 <flatbuffers_union_type_vec_at.part.31+0x20>
 2f4:	ldr	r0, [pc, #12]	; 308 <flatbuffers_union_type_vec_at.part.31+0x24>
 2f8:	bl	0 <__assert_fail>
 2fc:	.word	0x000002dc
 300:	.word	0x00000195
 304:	.word	0x000000b8
 308:	.word	0x0000012c

0000030c <Fantasy_Movie_side_kick_type>:
 30c:	subs	r2, r0, #0
 310:	bne	32c <Fantasy_Movie_side_kick_type+0x20>
 314:	push	{r4, lr}
 318:	ldr	r3, [pc, #52]	; 354 <Fantasy_Movie_side_kick_type+0x48>
 31c:	ldr	r2, [pc, #52]	; 358 <Fantasy_Movie_side_kick_type+0x4c>
 320:	ldr	r1, [pc, #52]	; 35c <Fantasy_Movie_side_kick_type+0x50>
 324:	ldr	r0, [pc, #52]	; 360 <Fantasy_Movie_side_kick_type+0x54>
 328:	bl	0 <__assert_fail>
 32c:	ldr	r3, [r2]
 330:	sub	r3, r2, r3
 334:	ldrh	r1, [r3]
 338:	cmp	r1, #13
 33c:	movls	r0, #0
 340:	bls	350 <Fantasy_Movie_side_kick_type+0x44>
 344:	ldrh	r0, [r3, #12]
 348:	cmp	r0, #0
 34c:	ldrbne	r0, [r2, r0]
 350:	bx	lr
 354:	.word	0x000002fc
 358:	.word	0x00000335
 35c:	.word	0x00000024
 360:	.word	0x00000090

00000364 <Fantasy_Movie_side_kick>:
 364:	subs	r3, r0, #0
 368:	bne	384 <Fantasy_Movie_side_kick+0x20>
 36c:	push	{r4, lr}
 370:	ldr	r3, [pc, #60]	; 3b4 <Fantasy_Movie_side_kick+0x50>
 374:	ldr	r2, [pc, #60]	; 3b8 <Fantasy_Movie_side_kick+0x54>
 378:	ldr	r1, [pc, #60]	; 3bc <Fantasy_Movie_side_kick+0x58>
 37c:	ldr	r0, [pc, #60]	; 3c0 <Fantasy_Movie_side_kick+0x5c>
 380:	bl	0 <__assert_fail>
 384:	ldr	r2, [r3]
 388:	sub	r2, r3, r2
 38c:	ldrh	r1, [r2]
 390:	cmp	r1, #15
 394:	movls	r0, #0
 398:	bls	3b0 <Fantasy_Movie_side_kick+0x4c>
 39c:	ldrh	r0, [r2, #14]
 3a0:	cmp	r0, #0
 3a4:	ldrne	r2, [r3, r0]
 3a8:	addne	r0, r3, r0
 3ac:	addne	r0, r0, r2
 3b0:	bx	lr
 3b4:	.word	0x0000031c
 3b8:	.word	0x00000335
 3bc:	.word	0x00000024
 3c0:	.word	0x00000090

000003c4 <Fantasy_Attacker_sword_attack_damage>:
 3c4:	subs	r2, r0, #0
 3c8:	bne	3e4 <Fantasy_Attacker_sword_attack_damage+0x20>
 3cc:	push	{r4, lr}
 3d0:	ldr	r3, [pc, #52]	; 40c <Fantasy_Attacker_sword_attack_damage+0x48>
 3d4:	ldr	r2, [pc, #52]	; 410 <Fantasy_Attacker_sword_attack_damage+0x4c>
 3d8:	ldr	r1, [pc, #52]	; 414 <Fantasy_Attacker_sword_attack_damage+0x50>
 3dc:	ldr	r0, [pc, #52]	; 418 <Fantasy_Attacker_sword_attack_damage+0x54>
 3e0:	bl	0 <__assert_fail>
 3e4:	ldr	r3, [r2]
 3e8:	sub	r3, r2, r3
 3ec:	ldrh	r1, [r3]
 3f0:	cmp	r1, #5
 3f4:	movls	r0, #0
 3f8:	bls	408 <Fantasy_Attacker_sword_attack_damage+0x44>
 3fc:	ldrh	r0, [r3, #4]
 400:	cmp	r0, #0
 404:	ldrne	r0, [r2, r0]
 408:	bx	lr
 40c:	.word	0x00000334
 410:	.word	0x00000302
 414:	.word	0x00000024
 418:	.word	0x00000090

0000041c <Fantasy_Movie_characters_type>:
 41c:	subs	r3, r0, #0
 420:	bne	43c <Fantasy_Movie_characters_type+0x20>
 424:	push	{r4, lr}
 428:	ldr	r3, [pc, #64]	; 470 <Fantasy_Movie_characters_type+0x54>
 42c:	ldr	r2, [pc, #64]	; 474 <Fantasy_Movie_characters_type+0x58>
 430:	ldr	r1, [pc, #64]	; 478 <Fantasy_Movie_characters_type+0x5c>
 434:	ldr	r0, [pc, #64]	; 47c <Fantasy_Movie_characters_type+0x60>
 438:	bl	0 <__assert_fail>
 43c:	ldr	r2, [r3]
 440:	sub	r2, r3, r2
 444:	ldrh	r1, [r2]
 448:	cmp	r1, #21
 44c:	movls	r0, #0
 450:	bls	46c <Fantasy_Movie_characters_type+0x50>
 454:	ldrh	r0, [r2, #20]
 458:	cmp	r0, #0
 45c:	ldrne	r2, [r3, r0]
 460:	addne	r0, r3, r0
 464:	addne	r3, r2, #4
 468:	addne	r0, r0, r3
 46c:	bx	lr
 470:	.word	0x0000035c
 474:	.word	0x00000337
 478:	.word	0x00000024
 47c:	.word	0x00000090

00000480 <Fantasy_Character_union_vec_at>:
 480:	push	{lr}		; (str lr, [sp, #-4]!)
 484:	sub	sp, sp, #12
 488:	add	ip, sp, #8
 48c:	stmdb	ip, {r1, r2}
 490:	ldr	r2, [sp]
 494:	cmp	r2, #0
 498:	beq	4a8 <Fantasy_Character_union_vec_at+0x28>
 49c:	ldr	r1, [r2, #-4]
 4a0:	cmp	r3, r1
 4a4:	bcc	4bc <Fantasy_Character_union_vec_at+0x3c>
 4a8:	ldr	r3, [pc, #88]	; 508 <Fantasy_Character_union_vec_at+0x88>
 4ac:	ldr	r2, [pc, #88]	; 50c <Fantasy_Character_union_vec_at+0x8c>
 4b0:	ldr	r1, [pc, #88]	; 510 <Fantasy_Character_union_vec_at+0x90>
 4b4:	ldr	r0, [pc, #88]	; 514 <Fantasy_Character_union_vec_at+0x94>
 4b8:	bl	0 <__assert_fail>
 4bc:	ldrb	r2, [r2, r3]
 4c0:	cmp	r2, #0
 4c4:	strbeq	r2, [r0]
 4c8:	streq	r2, [r0, #4]
 4cc:	beq	500 <Fantasy_Character_union_vec_at+0x80>
 4d0:	ldr	r1, [sp, #4]
 4d4:	cmp	r1, #0
 4d8:	add	ip, r1, r3, lsl #2
 4dc:	beq	4ec <Fantasy_Character_union_vec_at+0x6c>
 4e0:	ldr	lr, [r1, #-4]
 4e4:	cmp	r3, lr
 4e8:	bcc	4f0 <Fantasy_Character_union_vec_at+0x70>
 4ec:	bl	2c0 <flatbuffers_generic_vec_at.part.30>
 4f0:	ldr	r3, [r1, r3, lsl #2]
 4f4:	strb	r2, [r0]
 4f8:	add	r3, ip, r3
 4fc:	str	r3, [r0, #4]
 500:	add	sp, sp, #12
 504:	pop	{pc}		; (ldr pc, [sp], #4)
 508:	.word	0x0000037c
 50c:	.word	0x00000305
 510:	.word	0x00000024
 514:	.word	0x00000188

00000518 <MyGame_Example_Monster_color_is_present.part.38>:
 518:	push	{r4, lr}
 51c:	ldr	r3, [pc, #12]	; 530 <MyGame_Example_Monster_color_is_present.part.38+0x18>
 520:	ldr	r2, [pc, #12]	; 534 <MyGame_Example_Monster_color_is_present.part.38+0x1c>
 524:	ldr	r1, [pc, #12]	; 538 <MyGame_Example_Monster_color_is_present.part.38+0x20>
 528:	ldr	r0, [pc, #12]	; 53c <MyGame_Example_Monster_color_is_present.part.38+0x24>
 52c:	bl	0 <__assert_fail>
 530:	.word	0x0000039c
 534:	.word	0x000002c1
 538:	.word	0x00000024
 53c:	.word	0x00000090

00000540 <MyGame_Example_Monster_end.part.49>:
 540:	push	{r4, lr}
 544:	mov	r2, #235	; 0xeb
 548:	ldr	r3, [pc, #8]	; 558 <MyGame_Example_Monster_end.part.49+0x18>
 54c:	ldr	r1, [pc, #8]	; 55c <MyGame_Example_Monster_end.part.49+0x1c>
 550:	ldr	r0, [pc, #8]	; 560 <MyGame_Example_Monster_end.part.49+0x20>
 554:	bl	0 <__assert_fail>
 558:	.word	0x000003c4
 55c:	.word	0x000001a8
 560:	.word	0x00000214

00000564 <MyGame_Example_Stat_end.part.52>:
 564:	push	{r4, lr}
 568:	mov	r2, #221	; 0xdd
 56c:	ldr	r3, [pc, #8]	; 57c <MyGame_Example_Stat_end.part.52+0x18>
 570:	ldr	r1, [pc, #8]	; 580 <MyGame_Example_Stat_end.part.52+0x1c>
 574:	ldr	r0, [pc, #8]	; 584 <MyGame_Example_Stat_end.part.52+0x20>
 578:	bl	0 <__assert_fail>
 57c:	.word	0x000003e0
 580:	.word	0x000001a8
 584:	.word	0x000002b8

Disassembly of section .text.startup:

00000000 <main>:
   0:	push	{r4, lr}
   4:	sub	sp, sp, #232	; 0xe8
   8:	mov	r0, sp
   c:	bl	0 <flatcc_builder_init>
  10:	ldr	r0, [pc, #372]	; 18c <main+0x18c>
  14:	bl	0 <puts>
  18:	mov	r0, sp
  1c:	bl	1ca8 <test_table_with_emptystruct>
  20:	cmp	r0, #0
  24:	bne	174 <main+0x174>
  28:	mov	r0, sp
  2c:	bl	17f0 <test_empty_monster>
  30:	cmp	r0, #0
  34:	bne	174 <main+0x174>
  38:	mov	r0, sp
  3c:	bl	34bc <test_monster>
  40:	cmp	r0, #0
  44:	bne	174 <main+0x174>
  48:	mov	r0, sp
  4c:	bl	3560 <test_monster_with_size>
  50:	cmp	r0, #0
  54:	bne	174 <main+0x174>
  58:	mov	r0, sp
  5c:	bl	3660 <test_string>
  60:	cmp	r0, #0
  64:	bne	174 <main+0x174>
  68:	mov	r0, sp
  6c:	bl	98cc <test_struct_buffer>
  70:	cmp	r0, #0
  74:	bne	174 <main+0x174>
  78:	mov	r0, sp
  7c:	bl	1948 <test_typed_empty_monster>
  80:	cmp	r0, #0
  84:	bne	174 <main+0x174>
  88:	mov	r0, sp
  8c:	bl	1db4 <test_typed_table_with_emptystruct>
  90:	cmp	r0, #0
  94:	bne	174 <main+0x174>
  98:	mov	r0, sp
  9c:	bl	9b08 <test_typed_struct_buffer>
  a0:	cmp	r0, #0
  a4:	bne	174 <main+0x174>
  a8:	mov	r0, sp
  ac:	bl	6e70 <test_clone_slice>
  b0:	cmp	r0, #0
  b4:	bne	174 <main+0x174>
  b8:	mov	r0, sp
  bc:	bl	8b4c <test_add_set_defaults>
  c0:	cmp	r0, #0
  c4:	bne	174 <main+0x174>
  c8:	mov	r0, sp
  cc:	bl	7928 <test_create_add_field>
  d0:	cmp	r0, #0
  d4:	bne	174 <main+0x174>
  d8:	mov	r0, sp
  dc:	bl	7bc8 <test_union_vector>
  e0:	cmp	r0, #0
  e4:	bne	174 <main+0x174>
  e8:	mov	r0, sp
  ec:	bl	69d0 <test_basic_sort>
  f0:	cmp	r0, #0
  f4:	bne	174 <main+0x174>
  f8:	mov	r0, sp
  fc:	bl	38f8 <test_sort_find>
 100:	cmp	r0, #0
 104:	bne	174 <main+0x174>
 108:	mov	r0, sp
 10c:	bl	5274 <test_scan>
 110:	cmp	r0, #0
 114:	bne	174 <main+0x174>
 118:	mov	r0, sp
 11c:	bl	8e64 <test_nested_buffer>
 120:	cmp	r0, #0
 124:	bne	174 <main+0x174>
 128:	mov	r0, sp
 12c:	bl	919c <test_nested_buffer_first>
 130:	cmp	r0, #0
 134:	bne	174 <main+0x174>
 138:	mov	r0, sp
 13c:	bl	94d4 <test_nested_buffer_using_nest>
 140:	cmp	r0, #0
 144:	bne	174 <main+0x174>
 148:	mov	r0, sp
 14c:	bl	1304 <test_type_aliases>
 150:	cmp	r0, #0
 154:	bne	174 <main+0x174>
 158:	mov	r0, sp
 15c:	bl	7f40 <test_mixed_type_union>
 160:	subs	r4, r0, #0
 164:	bne	174 <main+0x174>
 168:	mov	r0, sp
 16c:	bl	0 <flatcc_builder_clear>
 170:	b	180 <main+0x180>
 174:	ldr	r0, [pc, #20]	; 190 <main+0x190>
 178:	bl	0 <puts>
 17c:	mvn	r4, #0
 180:	mov	r0, r4
 184:	add	sp, sp, #232	; 0xe8
 188:	pop	{r4, pc}
 18c:	.word	0x00002c40
 190:	.word	0x00002c5c
