
../compcert-repos/prog2/CMakeFiles/5.1.dir/Aula05_Filas_e_Pilhas/1/pilha_contentores.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <pilha_novo_elemento>:
   0:	str	fp, [sp, #-8]!
   4:	str	lr, [sp, #4]
   8:	add	fp, sp, #4
   c:	sub	sp, sp, #16
  10:	str	r0, [fp, #-16]
  14:	mov	r0, #8
  18:	bl	0 <malloc>
  1c:	mov	r3, r0
  20:	str	r3, [fp, #-8]
  24:	ldr	r3, [fp, #-8]
  28:	cmp	r3, #0
  2c:	bne	38 <pilha_novo_elemento+0x38>
  30:	mov	r3, #0
  34:	b	90 <pilha_novo_elemento+0x90>
  38:	ldr	r3, [fp, #-16]
  3c:	ldr	r2, [r3]
  40:	ldr	r3, [fp, #-16]
  44:	vldr	s15, [r3, #4]
  48:	vmov.f32	s0, s15
  4c:	mov	r0, r2
  50:	bl	0 <contentor_novo>
  54:	mov	r2, r0
  58:	ldr	r3, [fp, #-8]
  5c:	str	r2, [r3]
  60:	ldr	r3, [fp, #-8]
  64:	ldr	r3, [r3]
  68:	cmp	r3, #0
  6c:	bne	80 <pilha_novo_elemento+0x80>
  70:	ldr	r0, [fp, #-8]
  74:	bl	0 <free>
  78:	mov	r3, #0
  7c:	b	90 <pilha_novo_elemento+0x90>
  80:	ldr	r3, [fp, #-8]
  84:	mov	r2, #0
  88:	str	r2, [r3, #4]
  8c:	ldr	r3, [fp, #-8]
  90:	mov	r0, r3
  94:	sub	sp, fp, #4
  98:	ldr	fp, [sp]
  9c:	add	sp, sp, #4
  a0:	pop	{pc}		; (ldr pc, [sp], #4)

000000a4 <pilha_nova>:
  a4:	str	fp, [sp, #-8]!
  a8:	str	lr, [sp, #4]
  ac:	add	fp, sp, #4
  b0:	sub	sp, sp, #8
  b4:	mov	r0, #8
  b8:	bl	0 <malloc>
  bc:	mov	r3, r0
  c0:	str	r3, [fp, #-8]
  c4:	ldr	r3, [fp, #-8]
  c8:	cmp	r3, #0
  cc:	bne	d8 <pilha_nova+0x34>
  d0:	mov	r3, #0
  d4:	b	f4 <pilha_nova+0x50>
  d8:	ldr	r3, [fp, #-8]
  dc:	mov	r2, #0
  e0:	str	r2, [r3]
  e4:	ldr	r3, [fp, #-8]
  e8:	mov	r2, #0
  ec:	str	r2, [r3, #4]
  f0:	ldr	r3, [fp, #-8]
  f4:	mov	r0, r3
  f8:	sub	sp, fp, #4
  fc:	ldr	fp, [sp]
 100:	add	sp, sp, #4
 104:	pop	{pc}		; (ldr pc, [sp], #4)

00000108 <pilha_apaga>:
 108:	str	fp, [sp, #-8]!
 10c:	str	lr, [sp, #4]
 110:	add	fp, sp, #4
 114:	sub	sp, sp, #16
 118:	str	r0, [fp, #-16]
 11c:	ldr	r3, [fp, #-16]
 120:	cmp	r3, #0
 124:	beq	184 <pilha_apaga+0x7c>
 128:	b	164 <pilha_apaga+0x5c>
 12c:	ldr	r3, [fp, #-16]
 130:	ldr	r3, [r3]
 134:	str	r3, [fp, #-8]
 138:	ldr	r3, [fp, #-16]
 13c:	ldr	r3, [r3]
 140:	ldr	r2, [r3, #4]
 144:	ldr	r3, [fp, #-16]
 148:	str	r2, [r3]
 14c:	ldr	r3, [fp, #-8]
 150:	ldr	r3, [r3]
 154:	mov	r0, r3
 158:	bl	0 <contentor_apaga>
 15c:	ldr	r0, [fp, #-8]
 160:	bl	0 <free>
 164:	ldr	r3, [fp, #-16]
 168:	ldr	r3, [r3]
 16c:	cmp	r3, #0
 170:	bne	12c <pilha_apaga+0x24>
 174:	ldr	r0, [fp, #-16]
 178:	bl	0 <free>
 17c:	nop	{0}
 180:	b	188 <pilha_apaga+0x80>
 184:	nop	{0}
 188:	sub	sp, fp, #4
 18c:	ldr	fp, [sp]
 190:	add	sp, sp, #4
 194:	pop	{pc}		; (ldr pc, [sp], #4)

00000198 <pilha_tamanho>:
 198:	push	{fp}		; (str fp, [sp, #-4]!)
 19c:	add	fp, sp, #0
 1a0:	sub	sp, sp, #12
 1a4:	str	r0, [fp, #-8]
 1a8:	ldr	r3, [fp, #-8]
 1ac:	cmp	r3, #0
 1b0:	bne	1bc <pilha_tamanho+0x24>
 1b4:	mvn	r3, #0
 1b8:	b	1c4 <pilha_tamanho+0x2c>
 1bc:	ldr	r3, [fp, #-8]
 1c0:	ldr	r3, [r3, #4]
 1c4:	mov	r0, r3
 1c8:	add	sp, fp, #0
 1cc:	pop	{fp}		; (ldr fp, [sp], #4)
 1d0:	bx	lr

000001d4 <pilha_top>:
 1d4:	push	{fp}		; (str fp, [sp, #-4]!)
 1d8:	add	fp, sp, #0
 1dc:	sub	sp, sp, #20
 1e0:	str	r0, [fp, #-16]
 1e4:	ldr	r3, [fp, #-16]
 1e8:	cmp	r3, #0
 1ec:	beq	200 <pilha_top+0x2c>
 1f0:	ldr	r3, [fp, #-16]
 1f4:	ldr	r3, [r3, #4]
 1f8:	cmp	r3, #0
 1fc:	bne	208 <pilha_top+0x34>
 200:	mov	r3, #0
 204:	b	21c <pilha_top+0x48>
 208:	ldr	r3, [fp, #-16]
 20c:	ldr	r3, [r3]
 210:	str	r3, [fp, #-8]
 214:	ldr	r3, [fp, #-8]
 218:	ldr	r3, [r3]
 21c:	mov	r0, r3
 220:	add	sp, fp, #0
 224:	pop	{fp}		; (ldr fp, [sp], #4)
 228:	bx	lr

0000022c <pilha_push>:
 22c:	str	fp, [sp, #-8]!
 230:	str	lr, [sp, #4]
 234:	add	fp, sp, #4
 238:	sub	sp, sp, #16
 23c:	str	r0, [fp, #-16]
 240:	str	r1, [fp, #-20]	; 0xffffffec
 244:	mov	r3, #0
 248:	str	r3, [fp, #-8]
 24c:	ldr	r3, [fp, #-16]
 250:	cmp	r3, #0
 254:	beq	2c4 <pilha_push+0x98>
 258:	ldr	r0, [fp, #-20]	; 0xffffffec
 25c:	bl	0 <pilha_novo_elemento>
 260:	str	r0, [fp, #-8]
 264:	ldr	r3, [fp, #-8]
 268:	cmp	r3, #0
 26c:	beq	2cc <pilha_push+0xa0>
 270:	ldr	r3, [fp, #-16]
 274:	ldr	r3, [r3, #4]
 278:	add	r2, r3, #1
 27c:	ldr	r3, [fp, #-16]
 280:	str	r2, [r3, #4]
 284:	ldr	r3, [fp, #-16]
 288:	ldr	r3, [r3]
 28c:	cmp	r3, #0
 290:	bne	2a4 <pilha_push+0x78>
 294:	ldr	r3, [fp, #-16]
 298:	ldr	r2, [fp, #-8]
 29c:	str	r2, [r3]
 2a0:	b	2d0 <pilha_push+0xa4>
 2a4:	ldr	r3, [fp, #-16]
 2a8:	ldr	r2, [r3]
 2ac:	ldr	r3, [fp, #-8]
 2b0:	str	r2, [r3, #4]
 2b4:	ldr	r3, [fp, #-16]
 2b8:	ldr	r2, [fp, #-8]
 2bc:	str	r2, [r3]
 2c0:	b	2d0 <pilha_push+0xa4>
 2c4:	nop	{0}
 2c8:	b	2d0 <pilha_push+0xa4>
 2cc:	nop	{0}
 2d0:	sub	sp, fp, #4
 2d4:	ldr	fp, [sp]
 2d8:	add	sp, sp, #4
 2dc:	pop	{pc}		; (ldr pc, [sp], #4)

000002e0 <pilha_pop>:
 2e0:	str	fp, [sp, #-8]!
 2e4:	str	lr, [sp, #4]
 2e8:	add	fp, sp, #4
 2ec:	sub	sp, sp, #16
 2f0:	str	r0, [fp, #-16]
 2f4:	ldr	r3, [fp, #-16]
 2f8:	cmp	r3, #0
 2fc:	beq	35c <pilha_pop+0x7c>
 300:	ldr	r3, [fp, #-16]
 304:	ldr	r3, [r3, #4]
 308:	cmp	r3, #0
 30c:	beq	35c <pilha_pop+0x7c>
 310:	ldr	r3, [fp, #-16]
 314:	ldr	r3, [r3]
 318:	str	r3, [fp, #-8]
 31c:	ldr	r3, [fp, #-8]
 320:	ldr	r2, [r3, #4]
 324:	ldr	r3, [fp, #-16]
 328:	str	r2, [r3]
 32c:	ldr	r3, [fp, #-16]
 330:	ldr	r3, [r3, #4]
 334:	sub	r2, r3, #1
 338:	ldr	r3, [fp, #-16]
 33c:	str	r2, [r3, #4]
 340:	ldr	r3, [fp, #-8]
 344:	ldr	r3, [r3]
 348:	mov	r0, r3
 34c:	bl	0 <contentor_apaga>
 350:	ldr	r0, [fp, #-8]
 354:	bl	0 <free>
 358:	b	360 <pilha_pop+0x80>
 35c:	nop	{0}
 360:	sub	sp, fp, #4
 364:	ldr	fp, [sp]
 368:	add	sp, sp, #4
 36c:	pop	{pc}		; (ldr pc, [sp], #4)
