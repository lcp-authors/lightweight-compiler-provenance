
../compcert-repos/dvidelabs-flatcc-3b39ef7/test/json_test/CMakeFiles/json_test_uq.dir/__/__/src/runtime/verifier.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <__flatbuffers_uoffset_cast_from_pe>:
       0:	push	{fp}		; (str fp, [sp, #-4]!)
       4:	add	fp, sp, #0
       8:	sub	sp, sp, #12
       c:	str	r0, [fp, #-8]
      10:	ldr	r3, [fp, #-8]
      14:	mov	r0, r3
      18:	add	sp, fp, #0
      1c:	pop	{fp}		; (ldr fp, [sp], #4)
      20:	bx	lr

00000024 <__flatbuffers_uoffset_read_from_pe>:
      24:	str	fp, [sp, #-8]!
      28:	str	lr, [sp, #4]
      2c:	add	fp, sp, #4
      30:	sub	sp, sp, #8
      34:	str	r0, [fp, #-8]
      38:	ldr	r3, [fp, #-8]
      3c:	ldr	r3, [r3]
      40:	mov	r0, r3
      44:	bl	0 <__flatbuffers_uoffset_cast_from_pe>
      48:	mov	r3, r0
      4c:	mov	r0, r3
      50:	sub	sp, fp, #4
      54:	ldr	fp, [sp]
      58:	add	sp, sp, #4
      5c:	pop	{pc}		; (ldr pc, [sp], #4)

00000060 <__flatbuffers_voffset_cast_from_pe>:
      60:	push	{fp}		; (str fp, [sp, #-4]!)
      64:	add	fp, sp, #0
      68:	sub	sp, sp, #12
      6c:	mov	r3, r0
      70:	strh	r3, [fp, #-6]
      74:	ldrh	r3, [fp, #-6]
      78:	mov	r0, r3
      7c:	add	sp, fp, #0
      80:	pop	{fp}		; (ldr fp, [sp], #4)
      84:	bx	lr

00000088 <__flatbuffers_voffset_read_from_pe>:
      88:	str	fp, [sp, #-8]!
      8c:	str	lr, [sp, #4]
      90:	add	fp, sp, #4
      94:	sub	sp, sp, #8
      98:	str	r0, [fp, #-8]
      9c:	ldr	r3, [fp, #-8]
      a0:	ldrh	r3, [r3]
      a4:	mov	r0, r3
      a8:	bl	60 <__flatbuffers_voffset_cast_from_pe>
      ac:	mov	r3, r0
      b0:	mov	r0, r3
      b4:	sub	sp, fp, #4
      b8:	ldr	fp, [sp]
      bc:	add	sp, sp, #4
      c0:	pop	{pc}		; (ldr pc, [sp], #4)

000000c4 <__flatbuffers_thash_cast_from_pe>:
      c4:	push	{fp}		; (str fp, [sp, #-4]!)
      c8:	add	fp, sp, #0
      cc:	sub	sp, sp, #12
      d0:	str	r0, [fp, #-8]
      d4:	ldr	r3, [fp, #-8]
      d8:	mov	r0, r3
      dc:	add	sp, fp, #0
      e0:	pop	{fp}		; (ldr fp, [sp], #4)
      e4:	bx	lr

000000e8 <__flatbuffers_thash_cast_from_le>:
      e8:	push	{fp}		; (str fp, [sp, #-4]!)
      ec:	add	fp, sp, #0
      f0:	sub	sp, sp, #12
      f4:	str	r0, [fp, #-8]
      f8:	ldr	r3, [fp, #-8]
      fc:	mov	r0, r3
     100:	add	sp, fp, #0
     104:	pop	{fp}		; (ldr fp, [sp], #4)
     108:	bx	lr

0000010c <__flatbuffers_thash_read_from_pe>:
     10c:	str	fp, [sp, #-8]!
     110:	str	lr, [sp, #4]
     114:	add	fp, sp, #4
     118:	sub	sp, sp, #8
     11c:	str	r0, [fp, #-8]
     120:	ldr	r3, [fp, #-8]
     124:	ldr	r3, [r3]
     128:	mov	r0, r3
     12c:	bl	c4 <__flatbuffers_thash_cast_from_pe>
     130:	mov	r3, r0
     134:	mov	r0, r3
     138:	sub	sp, fp, #4
     13c:	ldr	fp, [sp]
     140:	add	sp, sp, #4
     144:	pop	{pc}		; (ldr pc, [sp], #4)

00000148 <flatcc_verify_error_string>:
     148:	push	{fp}		; (str fp, [sp, #-4]!)
     14c:	add	fp, sp, #0
     150:	sub	sp, sp, #12
     154:	str	r0, [fp, #-8]
     158:	ldr	r3, [fp, #-8]
     15c:	cmp	r3, #36	; 0x24
     160:	ldrls	pc, [pc, r3, lsl #2]
     164:	b	3b8 <flatcc_verify_error_string+0x270>
     168:	.word	0x000001fc
     16c:	.word	0x00000208
     170:	.word	0x00000214
     174:	.word	0x00000220
     178:	.word	0x0000022c
     17c:	.word	0x00000238
     180:	.word	0x00000244
     184:	.word	0x00000250
     188:	.word	0x0000025c
     18c:	.word	0x00000268
     190:	.word	0x00000274
     194:	.word	0x00000280
     198:	.word	0x0000028c
     19c:	.word	0x00000298
     1a0:	.word	0x000002a4
     1a4:	.word	0x000002b0
     1a8:	.word	0x000002bc
     1ac:	.word	0x000002c8
     1b0:	.word	0x000002d4
     1b4:	.word	0x000002e0
     1b8:	.word	0x000002ec
     1bc:	.word	0x000002f8
     1c0:	.word	0x00000304
     1c4:	.word	0x00000310
     1c8:	.word	0x0000031c
     1cc:	.word	0x00000328
     1d0:	.word	0x00000334
     1d4:	.word	0x00000340
     1d8:	.word	0x0000034c
     1dc:	.word	0x00000358
     1e0:	.word	0x00000364
     1e4:	.word	0x00000370
     1e8:	.word	0x0000037c
     1ec:	.word	0x00000388
     1f0:	.word	0x00000394
     1f4:	.word	0x000003a0
     1f8:	.word	0x000003ac
     1fc:	movw	r3, #0
     200:	movt	r3, #0
     204:	b	3c0 <flatcc_verify_error_string+0x278>
     208:	movw	r3, #0
     20c:	movt	r3, #0
     210:	b	3c0 <flatcc_verify_error_string+0x278>
     214:	movw	r3, #0
     218:	movt	r3, #0
     21c:	b	3c0 <flatcc_verify_error_string+0x278>
     220:	movw	r3, #0
     224:	movt	r3, #0
     228:	b	3c0 <flatcc_verify_error_string+0x278>
     22c:	movw	r3, #0
     230:	movt	r3, #0
     234:	b	3c0 <flatcc_verify_error_string+0x278>
     238:	movw	r3, #0
     23c:	movt	r3, #0
     240:	b	3c0 <flatcc_verify_error_string+0x278>
     244:	movw	r3, #0
     248:	movt	r3, #0
     24c:	b	3c0 <flatcc_verify_error_string+0x278>
     250:	movw	r3, #0
     254:	movt	r3, #0
     258:	b	3c0 <flatcc_verify_error_string+0x278>
     25c:	movw	r3, #0
     260:	movt	r3, #0
     264:	b	3c0 <flatcc_verify_error_string+0x278>
     268:	movw	r3, #0
     26c:	movt	r3, #0
     270:	b	3c0 <flatcc_verify_error_string+0x278>
     274:	movw	r3, #0
     278:	movt	r3, #0
     27c:	b	3c0 <flatcc_verify_error_string+0x278>
     280:	movw	r3, #0
     284:	movt	r3, #0
     288:	b	3c0 <flatcc_verify_error_string+0x278>
     28c:	movw	r3, #0
     290:	movt	r3, #0
     294:	b	3c0 <flatcc_verify_error_string+0x278>
     298:	movw	r3, #0
     29c:	movt	r3, #0
     2a0:	b	3c0 <flatcc_verify_error_string+0x278>
     2a4:	movw	r3, #0
     2a8:	movt	r3, #0
     2ac:	b	3c0 <flatcc_verify_error_string+0x278>
     2b0:	movw	r3, #0
     2b4:	movt	r3, #0
     2b8:	b	3c0 <flatcc_verify_error_string+0x278>
     2bc:	movw	r3, #0
     2c0:	movt	r3, #0
     2c4:	b	3c0 <flatcc_verify_error_string+0x278>
     2c8:	movw	r3, #0
     2cc:	movt	r3, #0
     2d0:	b	3c0 <flatcc_verify_error_string+0x278>
     2d4:	movw	r3, #0
     2d8:	movt	r3, #0
     2dc:	b	3c0 <flatcc_verify_error_string+0x278>
     2e0:	movw	r3, #0
     2e4:	movt	r3, #0
     2e8:	b	3c0 <flatcc_verify_error_string+0x278>
     2ec:	movw	r3, #0
     2f0:	movt	r3, #0
     2f4:	b	3c0 <flatcc_verify_error_string+0x278>
     2f8:	movw	r3, #0
     2fc:	movt	r3, #0
     300:	b	3c0 <flatcc_verify_error_string+0x278>
     304:	movw	r3, #0
     308:	movt	r3, #0
     30c:	b	3c0 <flatcc_verify_error_string+0x278>
     310:	movw	r3, #0
     314:	movt	r3, #0
     318:	b	3c0 <flatcc_verify_error_string+0x278>
     31c:	movw	r3, #0
     320:	movt	r3, #0
     324:	b	3c0 <flatcc_verify_error_string+0x278>
     328:	movw	r3, #0
     32c:	movt	r3, #0
     330:	b	3c0 <flatcc_verify_error_string+0x278>
     334:	movw	r3, #0
     338:	movt	r3, #0
     33c:	b	3c0 <flatcc_verify_error_string+0x278>
     340:	movw	r3, #0
     344:	movt	r3, #0
     348:	b	3c0 <flatcc_verify_error_string+0x278>
     34c:	movw	r3, #0
     350:	movt	r3, #0
     354:	b	3c0 <flatcc_verify_error_string+0x278>
     358:	movw	r3, #0
     35c:	movt	r3, #0
     360:	b	3c0 <flatcc_verify_error_string+0x278>
     364:	movw	r3, #0
     368:	movt	r3, #0
     36c:	b	3c0 <flatcc_verify_error_string+0x278>
     370:	movw	r3, #0
     374:	movt	r3, #0
     378:	b	3c0 <flatcc_verify_error_string+0x278>
     37c:	movw	r3, #0
     380:	movt	r3, #0
     384:	b	3c0 <flatcc_verify_error_string+0x278>
     388:	movw	r3, #0
     38c:	movt	r3, #0
     390:	b	3c0 <flatcc_verify_error_string+0x278>
     394:	movw	r3, #0
     398:	movt	r3, #0
     39c:	b	3c0 <flatcc_verify_error_string+0x278>
     3a0:	movw	r3, #0
     3a4:	movt	r3, #0
     3a8:	b	3c0 <flatcc_verify_error_string+0x278>
     3ac:	movw	r3, #0
     3b0:	movt	r3, #0
     3b4:	b	3c0 <flatcc_verify_error_string+0x278>
     3b8:	movw	r3, #0
     3bc:	movt	r3, #0
     3c0:	mov	r0, r3
     3c4:	add	sp, fp, #0
     3c8:	pop	{fp}		; (ldr fp, [sp], #4)
     3cc:	bx	lr

000003d0 <read_uoffset>:
     3d0:	str	fp, [sp, #-8]!
     3d4:	str	lr, [sp, #4]
     3d8:	add	fp, sp, #4
     3dc:	sub	sp, sp, #8
     3e0:	str	r0, [fp, #-8]
     3e4:	str	r1, [fp, #-12]
     3e8:	ldr	r2, [fp, #-8]
     3ec:	ldr	r3, [fp, #-12]
     3f0:	add	r3, r2, r3
     3f4:	mov	r0, r3
     3f8:	bl	24 <__flatbuffers_uoffset_read_from_pe>
     3fc:	mov	r3, r0
     400:	mov	r0, r3
     404:	sub	sp, fp, #4
     408:	ldr	fp, [sp]
     40c:	add	sp, sp, #4
     410:	pop	{pc}		; (ldr pc, [sp], #4)

00000414 <read_thash_identifier>:
     414:	str	fp, [sp, #-8]!
     418:	str	lr, [sp, #4]
     41c:	add	fp, sp, #4
     420:	sub	sp, sp, #16
     424:	str	r0, [fp, #-16]
     428:	mov	r3, #0
     42c:	str	r3, [fp, #-8]
     430:	sub	r3, fp, #8
     434:	mov	r2, #4
     438:	ldr	r1, [fp, #-16]
     43c:	mov	r0, r3
     440:	bl	0 <strncpy>
     444:	ldr	r3, [fp, #-8]
     448:	mov	r0, r3
     44c:	bl	e8 <__flatbuffers_thash_cast_from_le>
     450:	mov	r3, r0
     454:	mov	r0, r3
     458:	sub	sp, fp, #4
     45c:	ldr	fp, [sp]
     460:	add	sp, sp, #4
     464:	pop	{pc}		; (ldr pc, [sp], #4)

00000468 <read_thash>:
     468:	str	fp, [sp, #-8]!
     46c:	str	lr, [sp, #4]
     470:	add	fp, sp, #4
     474:	sub	sp, sp, #8
     478:	str	r0, [fp, #-8]
     47c:	str	r1, [fp, #-12]
     480:	ldr	r2, [fp, #-8]
     484:	ldr	r3, [fp, #-12]
     488:	add	r3, r2, r3
     48c:	mov	r0, r3
     490:	bl	10c <__flatbuffers_thash_read_from_pe>
     494:	mov	r3, r0
     498:	mov	r0, r3
     49c:	sub	sp, fp, #4
     4a0:	ldr	fp, [sp]
     4a4:	add	sp, sp, #4
     4a8:	pop	{pc}		; (ldr pc, [sp], #4)

000004ac <read_voffset>:
     4ac:	str	fp, [sp, #-8]!
     4b0:	str	lr, [sp, #4]
     4b4:	add	fp, sp, #4
     4b8:	sub	sp, sp, #8
     4bc:	str	r0, [fp, #-8]
     4c0:	str	r1, [fp, #-12]
     4c4:	ldr	r2, [fp, #-8]
     4c8:	ldr	r3, [fp, #-12]
     4cc:	add	r3, r2, r3
     4d0:	mov	r0, r3
     4d4:	bl	88 <__flatbuffers_voffset_read_from_pe>
     4d8:	mov	r3, r0
     4dc:	mov	r0, r3
     4e0:	sub	sp, fp, #4
     4e4:	ldr	fp, [sp]
     4e8:	add	sp, sp, #4
     4ec:	pop	{pc}		; (ldr pc, [sp], #4)

000004f0 <check_header>:
     4f0:	push	{fp}		; (str fp, [sp, #-4]!)
     4f4:	add	fp, sp, #0
     4f8:	sub	sp, sp, #28
     4fc:	str	r0, [fp, #-16]
     500:	str	r1, [fp, #-20]	; 0xffffffec
     504:	str	r2, [fp, #-24]	; 0xffffffe8
     508:	ldr	r2, [fp, #-20]	; 0xffffffec
     50c:	ldr	r3, [fp, #-24]	; 0xffffffe8
     510:	add	r3, r2, r3
     514:	str	r3, [fp, #-8]
     518:	ldr	r2, [fp, #-8]
     51c:	ldr	r3, [fp, #-20]	; 0xffffffec
     520:	cmp	r2, r3
     524:	bls	554 <check_header+0x64>
     528:	ldr	r3, [fp, #-8]
     52c:	add	r3, r3, #4
     530:	ldr	r2, [fp, #-16]
     534:	cmp	r2, r3
     538:	bcc	554 <check_header+0x64>
     53c:	ldr	r3, [fp, #-8]
     540:	and	r3, r3, #3
     544:	cmp	r3, #0
     548:	bne	554 <check_header+0x64>
     54c:	mov	r3, #1
     550:	b	558 <check_header+0x68>
     554:	mov	r3, #0
     558:	mov	r0, r3
     55c:	add	sp, fp, #0
     560:	pop	{fp}		; (ldr fp, [sp], #4)
     564:	bx	lr

00000568 <check_aligned_header>:
     568:	push	{fp}		; (str fp, [sp, #-4]!)
     56c:	add	fp, sp, #0
     570:	sub	sp, sp, #28
     574:	str	r0, [fp, #-16]
     578:	str	r1, [fp, #-20]	; 0xffffffec
     57c:	str	r2, [fp, #-24]	; 0xffffffe8
     580:	strh	r3, [fp, #-26]	; 0xffffffe6
     584:	ldr	r2, [fp, #-20]	; 0xffffffec
     588:	ldr	r3, [fp, #-24]	; 0xffffffe8
     58c:	add	r3, r2, r3
     590:	str	r3, [fp, #-8]
     594:	ldrh	r3, [fp, #-26]	; 0xffffffe6
     598:	cmp	r3, #4
     59c:	movcs	r3, r3
     5a0:	movcc	r3, #4
     5a4:	strh	r3, [fp, #-26]	; 0xffffffe6
     5a8:	ldr	r2, [fp, #-8]
     5ac:	ldr	r3, [fp, #-20]	; 0xffffffec
     5b0:	cmp	r2, r3
     5b4:	bls	5f4 <check_aligned_header+0x8c>
     5b8:	ldr	r3, [fp, #-8]
     5bc:	add	r3, r3, #4
     5c0:	ldr	r2, [fp, #-16]
     5c4:	cmp	r2, r3
     5c8:	bcc	5f4 <check_aligned_header+0x8c>
     5cc:	ldr	r3, [fp, #-8]
     5d0:	add	r2, r3, #4
     5d4:	ldrh	r3, [fp, #-26]	; 0xffffffe6
     5d8:	sub	r3, r3, #1
     5dc:	orr	r3, r3, #3
     5e0:	and	r3, r3, r2
     5e4:	cmp	r3, #0
     5e8:	bne	5f4 <check_aligned_header+0x8c>
     5ec:	mov	r3, #1
     5f0:	b	5f8 <check_aligned_header+0x90>
     5f4:	mov	r3, #0
     5f8:	mov	r0, r3
     5fc:	add	sp, fp, #0
     600:	pop	{fp}		; (ldr fp, [sp], #4)
     604:	bx	lr

00000608 <verify_struct>:
     608:	push	{fp}		; (str fp, [sp, #-4]!)
     60c:	add	fp, sp, #0
     610:	sub	sp, sp, #36	; 0x24
     614:	str	r0, [fp, #-24]	; 0xffffffe8
     618:	str	r1, [fp, #-28]	; 0xffffffe4
     61c:	str	r2, [fp, #-32]	; 0xffffffe0
     620:	str	r3, [fp, #-36]	; 0xffffffdc
     624:	ldr	r3, [fp, #-32]	; 0xffffffe0
     628:	cmp	r3, #0
     62c:	beq	648 <verify_struct+0x40>
     630:	ldr	r2, [fp, #-28]	; 0xffffffe4
     634:	ldr	r3, [fp, #-32]	; 0xffffffe0
     638:	add	r3, r2, r3
     63c:	ldr	r2, [fp, #-24]	; 0xffffffe8
     640:	cmp	r2, r3
     644:	bcs	650 <verify_struct+0x48>
     648:	mov	r3, #18
     64c:	b	710 <verify_struct+0x108>
     650:	ldr	r2, [fp, #-28]	; 0xffffffe4
     654:	ldr	r3, [fp, #-32]	; 0xffffffe0
     658:	add	r3, r2, r3
     65c:	str	r3, [fp, #-28]	; 0xffffffe4
     660:	ldr	r2, [fp, #-28]	; 0xffffffe4
     664:	ldr	r3, [fp, #-36]	; 0xffffffdc
     668:	add	r3, r2, r3
     66c:	ldr	r2, [fp, #-28]	; 0xffffffe4
     670:	cmp	r2, r3
     674:	movls	r3, #1
     678:	movhi	r3, #0
     67c:	uxtb	r3, r3
     680:	str	r3, [fp, #-8]
     684:	ldr	r3, [fp, #-8]
     688:	cmp	r3, #0
     68c:	bne	698 <verify_struct+0x90>
     690:	mov	r3, #10
     694:	b	710 <verify_struct+0x108>
     698:	ldr	r2, [fp, #-28]	; 0xffffffe4
     69c:	ldr	r3, [fp, #-36]	; 0xffffffdc
     6a0:	add	r3, r2, r3
     6a4:	ldr	r2, [fp, #-24]	; 0xffffffe8
     6a8:	cmp	r2, r3
     6ac:	movcs	r3, #1
     6b0:	movcc	r3, #0
     6b4:	uxtb	r3, r3
     6b8:	str	r3, [fp, #-12]
     6bc:	ldr	r3, [fp, #-12]
     6c0:	cmp	r3, #0
     6c4:	bne	6d0 <verify_struct+0xc8>
     6c8:	mov	r3, #9
     6cc:	b	710 <verify_struct+0x108>
     6d0:	ldrh	r3, [fp, #4]
     6d4:	sub	r3, r3, #1
     6d8:	mov	r2, r3
     6dc:	ldr	r3, [fp, #-28]	; 0xffffffe4
     6e0:	and	r3, r3, r2
     6e4:	cmp	r3, #0
     6e8:	moveq	r3, #1
     6ec:	movne	r3, #0
     6f0:	uxtb	r3, r3
     6f4:	str	r3, [fp, #-16]
     6f8:	ldr	r3, [fp, #-16]
     6fc:	cmp	r3, #0
     700:	bne	70c <verify_struct+0x104>
     704:	mov	r3, #11
     708:	b	710 <verify_struct+0x108>
     70c:	mov	r3, #0
     710:	mov	r0, r3
     714:	add	sp, fp, #0
     718:	pop	{fp}		; (ldr fp, [sp], #4)
     71c:	bx	lr

00000720 <read_vt_entry>:
     720:	str	fp, [sp, #-8]!
     724:	str	lr, [sp, #4]
     728:	add	fp, sp, #4
     72c:	sub	sp, sp, #16
     730:	str	r0, [fp, #-16]
     734:	mov	r3, r1
     738:	strh	r3, [fp, #-18]	; 0xffffffee
     73c:	ldrh	r3, [fp, #-18]	; 0xffffffee
     740:	add	r3, r3, #2
     744:	uxth	r3, r3
     748:	lsl	r3, r3, #1
     74c:	strh	r3, [fp, #-6]
     750:	ldr	r3, [fp, #-16]
     754:	ldrh	r3, [r3, #22]
     758:	ldrh	r2, [fp, #-6]
     75c:	cmp	r2, r3
     760:	bcc	76c <read_vt_entry+0x4c>
     764:	mov	r3, #0
     768:	b	788 <read_vt_entry+0x68>
     76c:	ldr	r3, [fp, #-16]
     770:	ldr	r3, [r3, #12]
     774:	ldrh	r2, [fp, #-6]
     778:	mov	r1, r2
     77c:	mov	r0, r3
     780:	bl	4ac <read_voffset>
     784:	mov	r3, r0
     788:	mov	r0, r3
     78c:	sub	sp, fp, #4
     790:	ldr	fp, [sp]
     794:	add	sp, sp, #4
     798:	pop	{pc}		; (ldr pc, [sp], #4)

0000079c <get_field_ptr>:
     79c:	str	fp, [sp, #-8]!
     7a0:	str	lr, [sp, #4]
     7a4:	add	fp, sp, #4
     7a8:	sub	sp, sp, #16
     7ac:	str	r0, [fp, #-16]
     7b0:	mov	r3, r1
     7b4:	strh	r3, [fp, #-18]	; 0xffffffee
     7b8:	ldrh	r3, [fp, #-18]	; 0xffffffee
     7bc:	mov	r1, r3
     7c0:	ldr	r0, [fp, #-16]
     7c4:	bl	720 <read_vt_entry>
     7c8:	mov	r3, r0
     7cc:	strh	r3, [fp, #-6]
     7d0:	ldrh	r3, [fp, #-6]
     7d4:	cmp	r3, #0
     7d8:	beq	7fc <get_field_ptr+0x60>
     7dc:	ldr	r3, [fp, #-16]
     7e0:	ldr	r2, [r3]
     7e4:	ldr	r3, [fp, #-16]
     7e8:	ldr	r1, [r3, #16]
     7ec:	ldrh	r3, [fp, #-6]
     7f0:	add	r3, r1, r3
     7f4:	add	r3, r2, r3
     7f8:	b	800 <get_field_ptr+0x64>
     7fc:	mov	r3, #0
     800:	mov	r0, r3
     804:	sub	sp, fp, #4
     808:	ldr	fp, [sp]
     80c:	add	sp, sp, #4
     810:	pop	{pc}		; (ldr pc, [sp], #4)

00000814 <verify_field>:
     814:	str	fp, [sp, #-8]!
     818:	str	lr, [sp, #4]
     81c:	add	fp, sp, #4
     820:	sub	sp, sp, #48	; 0x30
     824:	str	r0, [fp, #-40]	; 0xffffffd8
     828:	str	r2, [fp, #-48]	; 0xffffffd0
     82c:	str	r3, [fp, #-52]	; 0xffffffcc
     830:	mov	r3, r1
     834:	strh	r3, [fp, #-42]	; 0xffffffd6
     838:	ldr	r3, [fp, #-40]	; 0xffffffd8
     83c:	ldr	r3, [r3]
     840:	str	r3, [fp, #-8]
     844:	ldrh	r3, [fp, #-42]	; 0xffffffd6
     848:	mov	r1, r3
     84c:	ldr	r0, [fp, #-40]	; 0xffffffd8
     850:	bl	720 <read_vt_entry>
     854:	mov	r3, r0
     858:	strh	r3, [fp, #-10]
     85c:	ldrh	r3, [fp, #-10]
     860:	cmp	r3, #0
     864:	bne	89c <verify_field+0x88>
     868:	ldr	r3, [fp, #-48]	; 0xffffffd0
     86c:	cmp	r3, #0
     870:	moveq	r3, #1
     874:	movne	r3, #0
     878:	uxtb	r3, r3
     87c:	str	r3, [fp, #-16]
     880:	ldr	r3, [fp, #-16]
     884:	cmp	r3, #0
     888:	bne	894 <verify_field+0x80>
     88c:	mov	r3, #4
     890:	b	964 <verify_field+0x150>
     894:	mov	r3, #0
     898:	b	964 <verify_field+0x150>
     89c:	ldrh	r3, [fp, #-10]
     8a0:	str	r3, [fp, #-20]	; 0xffffffec
     8a4:	ldr	r2, [fp, #-20]	; 0xffffffec
     8a8:	ldr	r3, [fp, #-52]	; 0xffffffcc
     8ac:	add	r3, r2, r3
     8b0:	str	r3, [fp, #-24]	; 0xffffffe8
     8b4:	ldr	r3, [fp, #-40]	; 0xffffffd8
     8b8:	ldrh	r3, [r3, #20]
     8bc:	mov	r2, r3
     8c0:	ldr	r3, [fp, #-24]	; 0xffffffe8
     8c4:	cmp	r3, r2
     8c8:	movls	r3, #1
     8cc:	movhi	r3, #0
     8d0:	uxtb	r3, r3
     8d4:	str	r3, [fp, #-28]	; 0xffffffe4
     8d8:	ldr	r3, [fp, #-28]	; 0xffffffe4
     8dc:	cmp	r3, #0
     8e0:	bne	8ec <verify_field+0xd8>
     8e4:	mov	r3, #13
     8e8:	b	964 <verify_field+0x150>
     8ec:	mov	r3, #1
     8f0:	str	r3, [fp, #-32]	; 0xffffffe0
     8f4:	ldr	r3, [fp, #-32]	; 0xffffffe0
     8f8:	cmp	r3, #0
     8fc:	bne	908 <verify_field+0xf4>
     900:	mov	r3, #14
     904:	b	964 <verify_field+0x150>
     908:	ldr	r3, [fp, #-40]	; 0xffffffd8
     90c:	ldr	r2, [r3, #16]
     910:	ldr	r3, [fp, #-8]
     914:	add	r3, r2, r3
     918:	ldr	r2, [fp, #-20]	; 0xffffffec
     91c:	add	r3, r2, r3
     920:	str	r3, [fp, #-20]	; 0xffffffec
     924:	ldrh	r3, [fp, #4]
     928:	sub	r3, r3, #1
     92c:	mov	r2, r3
     930:	ldr	r3, [fp, #-20]	; 0xffffffec
     934:	and	r3, r3, r2
     938:	cmp	r3, #0
     93c:	moveq	r3, #1
     940:	movne	r3, #0
     944:	uxtb	r3, r3
     948:	str	r3, [fp, #-36]	; 0xffffffdc
     94c:	ldr	r3, [fp, #-36]	; 0xffffffdc
     950:	cmp	r3, #0
     954:	bne	960 <verify_field+0x14c>
     958:	mov	r3, #12
     95c:	b	964 <verify_field+0x150>
     960:	mov	r3, #0
     964:	mov	r0, r3
     968:	sub	sp, fp, #4
     96c:	ldr	fp, [sp]
     970:	add	sp, sp, #4
     974:	pop	{pc}		; (ldr pc, [sp], #4)

00000978 <get_offset_field>:
     978:	str	fp, [sp, #-8]!
     97c:	str	lr, [sp, #4]
     980:	add	fp, sp, #4
     984:	sub	sp, sp, #40	; 0x28
     988:	str	r0, [fp, #-32]	; 0xffffffe0
     98c:	str	r2, [fp, #-40]	; 0xffffffd8
     990:	str	r3, [fp, #-44]	; 0xffffffd4
     994:	mov	r3, r1
     998:	strh	r3, [fp, #-34]	; 0xffffffde
     99c:	ldrh	r3, [fp, #-34]	; 0xffffffde
     9a0:	mov	r1, r3
     9a4:	ldr	r0, [fp, #-32]	; 0xffffffe0
     9a8:	bl	720 <read_vt_entry>
     9ac:	mov	r3, r0
     9b0:	strh	r3, [fp, #-6]
     9b4:	ldrh	r3, [fp, #-6]
     9b8:	cmp	r3, #0
     9bc:	bne	9e8 <get_offset_field+0x70>
     9c0:	ldr	r3, [fp, #-44]	; 0xffffffd4
     9c4:	mov	r2, #0
     9c8:	str	r2, [r3]
     9cc:	ldr	r3, [fp, #-40]	; 0xffffffd8
     9d0:	cmp	r3, #0
     9d4:	beq	9e0 <get_offset_field+0x68>
     9d8:	mov	r3, #4
     9dc:	b	aa4 <get_offset_field+0x12c>
     9e0:	mov	r3, #0
     9e4:	b	aa4 <get_offset_field+0x12c>
     9e8:	ldrh	r3, [fp, #-6]
     9ec:	str	r3, [fp, #-12]
     9f0:	ldr	r3, [fp, #-12]
     9f4:	add	r3, r3, #4
     9f8:	str	r3, [fp, #-16]
     9fc:	ldr	r3, [fp, #-32]	; 0xffffffe0
     a00:	ldrh	r3, [r3, #20]
     a04:	mov	r2, r3
     a08:	ldr	r3, [fp, #-16]
     a0c:	cmp	r3, r2
     a10:	movls	r3, #1
     a14:	movhi	r3, #0
     a18:	uxtb	r3, r3
     a1c:	str	r3, [fp, #-20]	; 0xffffffec
     a20:	ldr	r3, [fp, #-20]	; 0xffffffec
     a24:	cmp	r3, #0
     a28:	bne	a34 <get_offset_field+0xbc>
     a2c:	mov	r3, #13
     a30:	b	aa4 <get_offset_field+0x12c>
     a34:	mov	r3, #1
     a38:	str	r3, [fp, #-24]	; 0xffffffe8
     a3c:	ldr	r3, [fp, #-24]	; 0xffffffe8
     a40:	cmp	r3, #0
     a44:	bne	a50 <get_offset_field+0xd8>
     a48:	mov	r3, #14
     a4c:	b	aa4 <get_offset_field+0x12c>
     a50:	ldr	r3, [fp, #-32]	; 0xffffffe0
     a54:	ldr	r3, [r3, #16]
     a58:	ldr	r2, [fp, #-12]
     a5c:	add	r3, r2, r3
     a60:	str	r3, [fp, #-12]
     a64:	ldr	r3, [fp, #-12]
     a68:	and	r3, r3, #3
     a6c:	cmp	r3, #0
     a70:	moveq	r3, #1
     a74:	movne	r3, #0
     a78:	uxtb	r3, r3
     a7c:	str	r3, [fp, #-28]	; 0xffffffe4
     a80:	ldr	r3, [fp, #-28]	; 0xffffffe4
     a84:	cmp	r3, #0
     a88:	bne	a94 <get_offset_field+0x11c>
     a8c:	mov	r3, #12
     a90:	b	aa4 <get_offset_field+0x12c>
     a94:	ldr	r3, [fp, #-44]	; 0xffffffd4
     a98:	ldr	r2, [fp, #-12]
     a9c:	str	r2, [r3]
     aa0:	mov	r3, #0
     aa4:	mov	r0, r3
     aa8:	sub	sp, fp, #4
     aac:	ldr	fp, [sp]
     ab0:	add	sp, sp, #4
     ab4:	pop	{pc}		; (ldr pc, [sp], #4)

00000ab8 <verify_string>:
     ab8:	str	fp, [sp, #-8]!
     abc:	str	lr, [sp, #4]
     ac0:	add	fp, sp, #4
     ac4:	sub	sp, sp, #32
     ac8:	str	r0, [fp, #-24]	; 0xffffffe8
     acc:	str	r1, [fp, #-28]	; 0xffffffe4
     ad0:	str	r2, [fp, #-32]	; 0xffffffe0
     ad4:	str	r3, [fp, #-36]	; 0xffffffdc
     ad8:	ldr	r2, [fp, #-36]	; 0xffffffdc
     adc:	ldr	r1, [fp, #-32]	; 0xffffffe0
     ae0:	ldr	r0, [fp, #-28]	; 0xffffffe4
     ae4:	bl	4f0 <check_header>
     ae8:	str	r0, [fp, #-8]
     aec:	ldr	r3, [fp, #-8]
     af0:	cmp	r3, #0
     af4:	bne	b00 <verify_string+0x48>
     af8:	mov	r3, #17
     afc:	b	bac <verify_string+0xf4>
     b00:	ldr	r2, [fp, #-32]	; 0xffffffe0
     b04:	ldr	r3, [fp, #-36]	; 0xffffffdc
     b08:	add	r3, r2, r3
     b0c:	str	r3, [fp, #-32]	; 0xffffffe0
     b10:	ldr	r1, [fp, #-32]	; 0xffffffe0
     b14:	ldr	r0, [fp, #-24]	; 0xffffffe8
     b18:	bl	3d0 <read_uoffset>
     b1c:	str	r0, [fp, #-12]
     b20:	ldr	r3, [fp, #-32]	; 0xffffffe0
     b24:	add	r3, r3, #4
     b28:	str	r3, [fp, #-32]	; 0xffffffe0
     b2c:	ldr	r2, [fp, #-28]	; 0xffffffe4
     b30:	ldr	r3, [fp, #-32]	; 0xffffffe0
     b34:	sub	r2, r2, r3
     b38:	ldr	r3, [fp, #-12]
     b3c:	add	r3, r3, #1
     b40:	cmp	r2, r3
     b44:	movcs	r3, #1
     b48:	movcc	r3, #0
     b4c:	uxtb	r3, r3
     b50:	str	r3, [fp, #-16]
     b54:	ldr	r3, [fp, #-16]
     b58:	cmp	r3, #0
     b5c:	bne	b68 <verify_string+0xb0>
     b60:	mov	r3, #8
     b64:	b	bac <verify_string+0xf4>
     b68:	ldr	r2, [fp, #-32]	; 0xffffffe0
     b6c:	ldr	r3, [fp, #-12]
     b70:	add	r3, r2, r3
     b74:	ldr	r2, [fp, #-24]	; 0xffffffe8
     b78:	add	r3, r2, r3
     b7c:	ldrb	r3, [r3]
     b80:	cmp	r3, #0
     b84:	moveq	r3, #1
     b88:	movne	r3, #0
     b8c:	uxtb	r3, r3
     b90:	str	r3, [fp, #-20]	; 0xffffffec
     b94:	ldr	r3, [fp, #-20]	; 0xffffffec
     b98:	cmp	r3, #0
     b9c:	bne	ba8 <verify_string+0xf0>
     ba0:	mov	r3, #7
     ba4:	b	bac <verify_string+0xf4>
     ba8:	mov	r3, #0
     bac:	mov	r0, r3
     bb0:	sub	sp, fp, #4
     bb4:	ldr	fp, [sp]
     bb8:	add	sp, sp, #4
     bbc:	pop	{pc}		; (ldr pc, [sp], #4)

00000bc0 <verify_vector>:
     bc0:	str	fp, [sp, #-8]!
     bc4:	str	lr, [sp, #4]
     bc8:	add	fp, sp, #4
     bcc:	sub	sp, sp, #32
     bd0:	str	r0, [fp, #-24]	; 0xffffffe8
     bd4:	str	r1, [fp, #-28]	; 0xffffffe4
     bd8:	str	r2, [fp, #-32]	; 0xffffffe0
     bdc:	str	r3, [fp, #-36]	; 0xffffffdc
     be0:	ldrh	r3, [fp, #8]
     be4:	ldr	r2, [fp, #-36]	; 0xffffffdc
     be8:	ldr	r1, [fp, #-32]	; 0xffffffe0
     bec:	ldr	r0, [fp, #-28]	; 0xffffffe4
     bf0:	bl	568 <check_aligned_header>
     bf4:	str	r0, [fp, #-8]
     bf8:	ldr	r3, [fp, #-8]
     bfc:	cmp	r3, #0
     c00:	bne	c0c <verify_vector+0x4c>
     c04:	mov	r3, #16
     c08:	b	cac <verify_vector+0xec>
     c0c:	ldr	r2, [fp, #-32]	; 0xffffffe0
     c10:	ldr	r3, [fp, #-36]	; 0xffffffdc
     c14:	add	r3, r2, r3
     c18:	str	r3, [fp, #-32]	; 0xffffffe0
     c1c:	ldr	r1, [fp, #-32]	; 0xffffffe0
     c20:	ldr	r0, [fp, #-24]	; 0xffffffe8
     c24:	bl	3d0 <read_uoffset>
     c28:	str	r0, [fp, #-12]
     c2c:	ldr	r3, [fp, #-32]	; 0xffffffe0
     c30:	add	r3, r3, #4
     c34:	str	r3, [fp, #-32]	; 0xffffffe0
     c38:	ldr	r2, [fp, #-12]
     c3c:	ldr	r3, [fp, #12]
     c40:	cmp	r2, r3
     c44:	movls	r3, #1
     c48:	movhi	r3, #0
     c4c:	uxtb	r3, r3
     c50:	str	r3, [fp, #-16]
     c54:	ldr	r3, [fp, #-16]
     c58:	cmp	r3, #0
     c5c:	bne	c68 <verify_vector+0xa8>
     c60:	mov	r3, #25
     c64:	b	cac <verify_vector+0xec>
     c68:	ldr	r2, [fp, #-28]	; 0xffffffe4
     c6c:	ldr	r3, [fp, #-32]	; 0xffffffe0
     c70:	sub	r2, r2, r3
     c74:	ldr	r3, [fp, #-12]
     c78:	ldr	r1, [fp, #4]
     c7c:	mul	r3, r1, r3
     c80:	cmp	r2, r3
     c84:	movcs	r3, #1
     c88:	movcc	r3, #0
     c8c:	uxtb	r3, r3
     c90:	str	r3, [fp, #-20]	; 0xffffffec
     c94:	ldr	r3, [fp, #-20]	; 0xffffffec
     c98:	cmp	r3, #0
     c9c:	bne	ca8 <verify_vector+0xe8>
     ca0:	mov	r3, #26
     ca4:	b	cac <verify_vector+0xec>
     ca8:	mov	r3, #0
     cac:	mov	r0, r3
     cb0:	sub	sp, fp, #4
     cb4:	ldr	fp, [sp]
     cb8:	add	sp, sp, #4
     cbc:	pop	{pc}		; (ldr pc, [sp], #4)

00000cc0 <verify_string_vector>:
     cc0:	str	fp, [sp, #-8]!
     cc4:	str	lr, [sp, #4]
     cc8:	add	fp, sp, #4
     ccc:	sub	sp, sp, #40	; 0x28
     cd0:	str	r0, [fp, #-16]
     cd4:	str	r1, [fp, #-20]	; 0xffffffec
     cd8:	str	r2, [fp, #-24]	; 0xffffffe8
     cdc:	str	r3, [fp, #-28]	; 0xffffffe4
     ce0:	mvn	r3, #-1073741824	; 0xc0000000
     ce4:	str	r3, [sp, #8]
     ce8:	mov	r3, #4
     cec:	str	r3, [sp, #4]
     cf0:	mov	r3, #4
     cf4:	str	r3, [sp]
     cf8:	ldr	r3, [fp, #-28]	; 0xffffffe4
     cfc:	ldr	r2, [fp, #-24]	; 0xffffffe8
     d00:	ldr	r1, [fp, #-20]	; 0xffffffec
     d04:	ldr	r0, [fp, #-16]
     d08:	bl	bc0 <verify_vector>
     d0c:	mov	r3, r0
     d10:	cmp	r3, #0
     d14:	beq	d4c <verify_string_vector+0x8c>
     d18:	mvn	r3, #-1073741824	; 0xc0000000
     d1c:	str	r3, [sp, #8]
     d20:	mov	r3, #4
     d24:	str	r3, [sp, #4]
     d28:	mov	r3, #4
     d2c:	str	r3, [sp]
     d30:	ldr	r3, [fp, #-28]	; 0xffffffe4
     d34:	ldr	r2, [fp, #-24]	; 0xffffffe8
     d38:	ldr	r1, [fp, #-20]	; 0xffffffec
     d3c:	ldr	r0, [fp, #-16]
     d40:	bl	bc0 <verify_vector>
     d44:	mov	r3, r0
     d48:	b	e04 <verify_string_vector+0x144>
     d4c:	ldr	r2, [fp, #-24]	; 0xffffffe8
     d50:	ldr	r3, [fp, #-28]	; 0xffffffe4
     d54:	add	r3, r2, r3
     d58:	str	r3, [fp, #-24]	; 0xffffffe8
     d5c:	ldr	r1, [fp, #-24]	; 0xffffffe8
     d60:	ldr	r0, [fp, #-16]
     d64:	bl	3d0 <read_uoffset>
     d68:	str	r0, [fp, #-12]
     d6c:	ldr	r3, [fp, #-24]	; 0xffffffe8
     d70:	add	r3, r3, #4
     d74:	str	r3, [fp, #-24]	; 0xffffffe8
     d78:	mov	r3, #0
     d7c:	str	r3, [fp, #-8]
     d80:	b	df0 <verify_string_vector+0x130>
     d84:	ldr	r1, [fp, #-24]	; 0xffffffe8
     d88:	ldr	r0, [fp, #-16]
     d8c:	bl	3d0 <read_uoffset>
     d90:	mov	r3, r0
     d94:	ldr	r2, [fp, #-24]	; 0xffffffe8
     d98:	ldr	r1, [fp, #-20]	; 0xffffffec
     d9c:	ldr	r0, [fp, #-16]
     da0:	bl	ab8 <verify_string>
     da4:	mov	r3, r0
     da8:	cmp	r3, #0
     dac:	beq	dd8 <verify_string_vector+0x118>
     db0:	ldr	r1, [fp, #-24]	; 0xffffffe8
     db4:	ldr	r0, [fp, #-16]
     db8:	bl	3d0 <read_uoffset>
     dbc:	mov	r3, r0
     dc0:	ldr	r2, [fp, #-24]	; 0xffffffe8
     dc4:	ldr	r1, [fp, #-20]	; 0xffffffec
     dc8:	ldr	r0, [fp, #-16]
     dcc:	bl	ab8 <verify_string>
     dd0:	mov	r3, r0
     dd4:	b	e04 <verify_string_vector+0x144>
     dd8:	ldr	r3, [fp, #-8]
     ddc:	add	r3, r3, #1
     de0:	str	r3, [fp, #-8]
     de4:	ldr	r3, [fp, #-24]	; 0xffffffe8
     de8:	add	r3, r3, #4
     dec:	str	r3, [fp, #-24]	; 0xffffffe8
     df0:	ldr	r2, [fp, #-8]
     df4:	ldr	r3, [fp, #-12]
     df8:	cmp	r2, r3
     dfc:	bcc	d84 <verify_string_vector+0xc4>
     e00:	mov	r3, #0
     e04:	mov	r0, r3
     e08:	sub	sp, fp, #4
     e0c:	ldr	fp, [sp]
     e10:	add	sp, sp, #4
     e14:	pop	{pc}		; (ldr pc, [sp], #4)

00000e18 <verify_table>:
     e18:	str	r4, [sp, #-12]!
     e1c:	str	fp, [sp, #4]
     e20:	str	lr, [sp, #8]
     e24:	add	fp, sp, #8
     e28:	sub	sp, sp, #84	; 0x54
     e2c:	str	r0, [fp, #-80]	; 0xffffffb0
     e30:	str	r1, [fp, #-84]	; 0xffffffac
     e34:	str	r2, [fp, #-88]	; 0xffffffa8
     e38:	str	r3, [fp, #-92]	; 0xffffffa4
     e3c:	ldr	r3, [fp, #4]
     e40:	sub	r3, r3, #1
     e44:	str	r3, [fp, #-68]	; 0xffffffbc
     e48:	ldr	r3, [fp, #-68]	; 0xffffffbc
     e4c:	str	r3, [fp, #-16]
     e50:	ldr	r3, [fp, #-16]
     e54:	cmp	r3, #0
     e58:	bne	e64 <verify_table+0x4c>
     e5c:	mov	r3, #3
     e60:	b	106c <verify_table+0x254>
     e64:	ldr	r2, [fp, #-92]	; 0xffffffa4
     e68:	ldr	r1, [fp, #-88]	; 0xffffffa8
     e6c:	ldr	r0, [fp, #-84]	; 0xffffffac
     e70:	bl	4f0 <check_header>
     e74:	str	r0, [fp, #-20]	; 0xffffffec
     e78:	ldr	r3, [fp, #-20]	; 0xffffffec
     e7c:	cmp	r3, #0
     e80:	bne	e8c <verify_table+0x74>
     e84:	mov	r3, #15
     e88:	b	106c <verify_table+0x254>
     e8c:	ldr	r2, [fp, #-88]	; 0xffffffa8
     e90:	ldr	r3, [fp, #-92]	; 0xffffffa4
     e94:	add	r3, r2, r3
     e98:	str	r3, [fp, #-60]	; 0xffffffc4
     e9c:	ldr	r4, [fp, #-60]	; 0xffffffc4
     ea0:	ldr	r3, [fp, #-60]	; 0xffffffc4
     ea4:	mov	r1, r3
     ea8:	ldr	r0, [fp, #-80]	; 0xffffffb0
     eac:	bl	3d0 <read_uoffset>
     eb0:	mov	r3, r0
     eb4:	sub	r3, r4, r3
     eb8:	str	r3, [fp, #-24]	; 0xffffffe8
     ebc:	ldr	r3, [fp, #-24]	; 0xffffffe8
     ec0:	cmp	r3, #0
     ec4:	blt	ee0 <verify_table+0xc8>
     ec8:	ldr	r3, [fp, #-24]	; 0xffffffe8
     ecc:	and	r3, r3, #1
     ed0:	cmp	r3, #0
     ed4:	bne	ee0 <verify_table+0xc8>
     ed8:	mov	r3, #1
     edc:	b	ee4 <verify_table+0xcc>
     ee0:	mov	r3, #0
     ee4:	str	r3, [fp, #-28]	; 0xffffffe4
     ee8:	ldr	r3, [fp, #-28]	; 0xffffffe4
     eec:	cmp	r3, #0
     ef0:	bne	efc <verify_table+0xe4>
     ef4:	mov	r3, #29
     ef8:	b	106c <verify_table+0x254>
     efc:	ldr	r3, [fp, #-24]	; 0xffffffe8
     f00:	add	r3, r3, #2
     f04:	ldr	r2, [fp, #-84]	; 0xffffffac
     f08:	cmp	r2, r3
     f0c:	movcs	r3, #1
     f10:	movcc	r3, #0
     f14:	uxtb	r3, r3
     f18:	str	r3, [fp, #-32]	; 0xffffffe0
     f1c:	ldr	r3, [fp, #-32]	; 0xffffffe0
     f20:	cmp	r3, #0
     f24:	bne	f30 <verify_table+0x118>
     f28:	mov	r3, #27
     f2c:	b	106c <verify_table+0x254>
     f30:	ldr	r1, [fp, #-24]	; 0xffffffe8
     f34:	ldr	r0, [fp, #-80]	; 0xffffffb0
     f38:	bl	4ac <read_voffset>
     f3c:	mov	r3, r0
     f40:	strh	r3, [fp, #-54]	; 0xffffffca
     f44:	ldrh	r3, [fp, #-54]	; 0xffffffca
     f48:	mov	r2, r3
     f4c:	ldr	r3, [fp, #-24]	; 0xffffffe8
     f50:	add	r3, r3, r2
     f54:	str	r3, [fp, #-36]	; 0xffffffdc
     f58:	ldr	r2, [fp, #-36]	; 0xffffffdc
     f5c:	ldr	r3, [fp, #-84]	; 0xffffffac
     f60:	cmp	r2, r3
     f64:	bhi	f80 <verify_table+0x168>
     f68:	ldrh	r3, [fp, #-54]	; 0xffffffca
     f6c:	and	r3, r3, #1
     f70:	cmp	r3, #0
     f74:	bne	f80 <verify_table+0x168>
     f78:	mov	r3, #1
     f7c:	b	f84 <verify_table+0x16c>
     f80:	mov	r3, #0
     f84:	str	r3, [fp, #-40]	; 0xffffffd8
     f88:	ldr	r3, [fp, #-40]	; 0xffffffd8
     f8c:	cmp	r3, #0
     f90:	bne	f9c <verify_table+0x184>
     f94:	mov	r3, #30
     f98:	b	106c <verify_table+0x254>
     f9c:	mov	r3, #1
     fa0:	str	r3, [fp, #-44]	; 0xffffffd4
     fa4:	ldr	r3, [fp, #-44]	; 0xffffffd4
     fa8:	cmp	r3, #0
     fac:	bne	fb8 <verify_table+0x1a0>
     fb0:	mov	r3, #31
     fb4:	b	106c <verify_table+0x254>
     fb8:	ldrh	r3, [fp, #-54]	; 0xffffffca
     fbc:	cmp	r3, #3
     fc0:	movhi	r3, #1
     fc4:	movls	r3, #0
     fc8:	uxtb	r3, r3
     fcc:	str	r3, [fp, #-48]	; 0xffffffd0
     fd0:	ldr	r3, [fp, #-48]	; 0xffffffd0
     fd4:	cmp	r3, #0
     fd8:	bne	fe4 <verify_table+0x1cc>
     fdc:	mov	r3, #28
     fe0:	b	106c <verify_table+0x254>
     fe4:	ldr	r3, [fp, #-24]	; 0xffffffe8
     fe8:	add	r3, r3, #2
     fec:	mov	r1, r3
     ff0:	ldr	r0, [fp, #-80]	; 0xffffffb0
     ff4:	bl	4ac <read_voffset>
     ff8:	mov	r3, r0
     ffc:	strh	r3, [fp, #-56]	; 0xffffffc8
    1000:	ldr	r3, [fp, #-60]	; 0xffffffc4
    1004:	ldr	r2, [fp, #-84]	; 0xffffffac
    1008:	sub	r3, r2, r3
    100c:	ldrh	r2, [fp, #-56]	; 0xffffffc8
    1010:	cmp	r3, r2
    1014:	movcs	r3, #1
    1018:	movcc	r3, #0
    101c:	uxtb	r3, r3
    1020:	str	r3, [fp, #-52]	; 0xffffffcc
    1024:	ldr	r3, [fp, #-52]	; 0xffffffcc
    1028:	cmp	r3, #0
    102c:	bne	1038 <verify_table+0x220>
    1030:	mov	r3, #20
    1034:	b	106c <verify_table+0x254>
    1038:	ldr	r2, [fp, #-80]	; 0xffffffb0
    103c:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1040:	add	r3, r2, r3
    1044:	str	r3, [fp, #-64]	; 0xffffffc0
    1048:	ldr	r3, [fp, #-80]	; 0xffffffb0
    104c:	str	r3, [fp, #-76]	; 0xffffffb4
    1050:	ldr	r3, [fp, #-84]	; 0xffffffac
    1054:	str	r3, [fp, #-72]	; 0xffffffb8
    1058:	sub	r2, fp, #76	; 0x4c
    105c:	ldr	r3, [fp, #8]
    1060:	mov	r0, r2
    1064:	blx	r3
    1068:	mov	r3, r0
    106c:	mov	r0, r3
    1070:	sub	sp, fp, #8
    1074:	ldr	r4, [sp]
    1078:	ldr	fp, [sp, #4]
    107c:	add	sp, sp, #8
    1080:	pop	{pc}		; (ldr pc, [sp], #4)

00001084 <verify_table_vector>:
    1084:	str	fp, [sp, #-8]!
    1088:	str	lr, [sp, #4]
    108c:	add	fp, sp, #4
    1090:	sub	sp, sp, #48	; 0x30
    1094:	str	r0, [fp, #-24]	; 0xffffffe8
    1098:	str	r1, [fp, #-28]	; 0xffffffe4
    109c:	str	r2, [fp, #-32]	; 0xffffffe0
    10a0:	str	r3, [fp, #-36]	; 0xffffffdc
    10a4:	ldr	r3, [fp, #4]
    10a8:	sub	r2, r3, #1
    10ac:	str	r2, [fp, #4]
    10b0:	cmp	r3, #0
    10b4:	movgt	r3, #1
    10b8:	movle	r3, #0
    10bc:	uxtb	r3, r3
    10c0:	str	r3, [fp, #-12]
    10c4:	ldr	r3, [fp, #-12]
    10c8:	cmp	r3, #0
    10cc:	bne	10d8 <verify_table_vector+0x54>
    10d0:	mov	r3, #3
    10d4:	b	1224 <verify_table_vector+0x1a0>
    10d8:	mvn	r3, #-1073741824	; 0xc0000000
    10dc:	str	r3, [sp, #8]
    10e0:	mov	r3, #4
    10e4:	str	r3, [sp, #4]
    10e8:	mov	r3, #4
    10ec:	str	r3, [sp]
    10f0:	ldr	r3, [fp, #-36]	; 0xffffffdc
    10f4:	ldr	r2, [fp, #-32]	; 0xffffffe0
    10f8:	ldr	r1, [fp, #-28]	; 0xffffffe4
    10fc:	ldr	r0, [fp, #-24]	; 0xffffffe8
    1100:	bl	bc0 <verify_vector>
    1104:	mov	r3, r0
    1108:	cmp	r3, #0
    110c:	beq	1144 <verify_table_vector+0xc0>
    1110:	mvn	r3, #-1073741824	; 0xc0000000
    1114:	str	r3, [sp, #8]
    1118:	mov	r3, #4
    111c:	str	r3, [sp, #4]
    1120:	mov	r3, #4
    1124:	str	r3, [sp]
    1128:	ldr	r3, [fp, #-36]	; 0xffffffdc
    112c:	ldr	r2, [fp, #-32]	; 0xffffffe0
    1130:	ldr	r1, [fp, #-28]	; 0xffffffe4
    1134:	ldr	r0, [fp, #-24]	; 0xffffffe8
    1138:	bl	bc0 <verify_vector>
    113c:	mov	r3, r0
    1140:	b	1224 <verify_table_vector+0x1a0>
    1144:	ldr	r2, [fp, #-32]	; 0xffffffe0
    1148:	ldr	r3, [fp, #-36]	; 0xffffffdc
    114c:	add	r3, r2, r3
    1150:	str	r3, [fp, #-32]	; 0xffffffe0
    1154:	ldr	r1, [fp, #-32]	; 0xffffffe0
    1158:	ldr	r0, [fp, #-24]	; 0xffffffe8
    115c:	bl	3d0 <read_uoffset>
    1160:	str	r0, [fp, #-16]
    1164:	ldr	r3, [fp, #-32]	; 0xffffffe0
    1168:	add	r3, r3, #4
    116c:	str	r3, [fp, #-32]	; 0xffffffe0
    1170:	mov	r3, #0
    1174:	str	r3, [fp, #-8]
    1178:	b	1210 <verify_table_vector+0x18c>
    117c:	ldr	r1, [fp, #-32]	; 0xffffffe0
    1180:	ldr	r0, [fp, #-24]	; 0xffffffe8
    1184:	bl	3d0 <read_uoffset>
    1188:	mov	r2, r0
    118c:	ldr	r3, [fp, #8]
    1190:	str	r3, [sp, #4]
    1194:	ldr	r3, [fp, #4]
    1198:	str	r3, [sp]
    119c:	mov	r3, r2
    11a0:	ldr	r2, [fp, #-32]	; 0xffffffe0
    11a4:	ldr	r1, [fp, #-28]	; 0xffffffe4
    11a8:	ldr	r0, [fp, #-24]	; 0xffffffe8
    11ac:	bl	e18 <verify_table>
    11b0:	mov	r3, r0
    11b4:	cmp	r3, #0
    11b8:	beq	11f8 <verify_table_vector+0x174>
    11bc:	ldr	r1, [fp, #-32]	; 0xffffffe0
    11c0:	ldr	r0, [fp, #-24]	; 0xffffffe8
    11c4:	bl	3d0 <read_uoffset>
    11c8:	mov	r2, r0
    11cc:	ldr	r3, [fp, #8]
    11d0:	str	r3, [sp, #4]
    11d4:	ldr	r3, [fp, #4]
    11d8:	str	r3, [sp]
    11dc:	mov	r3, r2
    11e0:	ldr	r2, [fp, #-32]	; 0xffffffe0
    11e4:	ldr	r1, [fp, #-28]	; 0xffffffe4
    11e8:	ldr	r0, [fp, #-24]	; 0xffffffe8
    11ec:	bl	e18 <verify_table>
    11f0:	mov	r3, r0
    11f4:	b	1224 <verify_table_vector+0x1a0>
    11f8:	ldr	r3, [fp, #-8]
    11fc:	add	r3, r3, #1
    1200:	str	r3, [fp, #-8]
    1204:	ldr	r3, [fp, #-32]	; 0xffffffe0
    1208:	add	r3, r3, #4
    120c:	str	r3, [fp, #-32]	; 0xffffffe0
    1210:	ldr	r2, [fp, #-8]
    1214:	ldr	r3, [fp, #-16]
    1218:	cmp	r2, r3
    121c:	bcc	117c <verify_table_vector+0xf8>
    1220:	mov	r3, #0
    1224:	mov	r0, r3
    1228:	sub	sp, fp, #4
    122c:	ldr	fp, [sp]
    1230:	add	sp, sp, #4
    1234:	pop	{pc}		; (ldr pc, [sp], #4)

00001238 <verify_union_vector>:
    1238:	str	fp, [sp, #-8]!
    123c:	str	lr, [sp, #4]
    1240:	add	fp, sp, #4
    1244:	sub	sp, sp, #88	; 0x58
    1248:	str	r0, [fp, #-64]	; 0xffffffc0
    124c:	str	r1, [fp, #-68]	; 0xffffffbc
    1250:	str	r2, [fp, #-72]	; 0xffffffb8
    1254:	str	r3, [fp, #-76]	; 0xffffffb4
    1258:	ldr	r3, [fp, #12]
    125c:	sub	r2, r3, #1
    1260:	str	r2, [fp, #12]
    1264:	cmp	r3, #0
    1268:	movgt	r3, #1
    126c:	movle	r3, #0
    1270:	uxtb	r3, r3
    1274:	str	r3, [fp, #-12]
    1278:	ldr	r3, [fp, #-12]
    127c:	cmp	r3, #0
    1280:	bne	128c <verify_union_vector+0x54>
    1284:	mov	r3, #3
    1288:	b	1488 <verify_union_vector+0x250>
    128c:	mvn	r3, #-1073741824	; 0xc0000000
    1290:	str	r3, [sp, #8]
    1294:	mov	r3, #4
    1298:	str	r3, [sp, #4]
    129c:	mov	r3, #4
    12a0:	str	r3, [sp]
    12a4:	ldr	r3, [fp, #-76]	; 0xffffffb4
    12a8:	ldr	r2, [fp, #-72]	; 0xffffffb8
    12ac:	ldr	r1, [fp, #-68]	; 0xffffffbc
    12b0:	ldr	r0, [fp, #-64]	; 0xffffffc0
    12b4:	bl	bc0 <verify_vector>
    12b8:	mov	r3, r0
    12bc:	cmp	r3, #0
    12c0:	beq	12f8 <verify_union_vector+0xc0>
    12c4:	mvn	r3, #-1073741824	; 0xc0000000
    12c8:	str	r3, [sp, #8]
    12cc:	mov	r3, #4
    12d0:	str	r3, [sp, #4]
    12d4:	mov	r3, #4
    12d8:	str	r3, [sp]
    12dc:	ldr	r3, [fp, #-76]	; 0xffffffb4
    12e0:	ldr	r2, [fp, #-72]	; 0xffffffb8
    12e4:	ldr	r1, [fp, #-68]	; 0xffffffbc
    12e8:	ldr	r0, [fp, #-64]	; 0xffffffc0
    12ec:	bl	bc0 <verify_vector>
    12f0:	mov	r3, r0
    12f4:	b	1488 <verify_union_vector+0x250>
    12f8:	ldr	r2, [fp, #-72]	; 0xffffffb8
    12fc:	ldr	r3, [fp, #-76]	; 0xffffffb4
    1300:	add	r3, r2, r3
    1304:	str	r3, [fp, #-72]	; 0xffffffb8
    1308:	ldr	r1, [fp, #-72]	; 0xffffffb8
    130c:	ldr	r0, [fp, #-64]	; 0xffffffc0
    1310:	bl	3d0 <read_uoffset>
    1314:	str	r0, [fp, #-16]
    1318:	ldr	r2, [fp, #-16]
    131c:	ldr	r3, [fp, #4]
    1320:	cmp	r2, r3
    1324:	moveq	r3, #1
    1328:	movne	r3, #0
    132c:	uxtb	r3, r3
    1330:	str	r3, [fp, #-20]	; 0xffffffec
    1334:	ldr	r3, [fp, #-20]	; 0xffffffec
    1338:	cmp	r3, #0
    133c:	bne	1348 <verify_union_vector+0x110>
    1340:	mov	r3, #34	; 0x22
    1344:	b	1488 <verify_union_vector+0x250>
    1348:	ldr	r3, [fp, #-72]	; 0xffffffb8
    134c:	add	r3, r3, #4
    1350:	str	r3, [fp, #-72]	; 0xffffffb8
    1354:	ldr	r3, [fp, #-64]	; 0xffffffc0
    1358:	str	r3, [fp, #-56]	; 0xffffffc8
    135c:	ldr	r3, [fp, #-68]	; 0xffffffbc
    1360:	str	r3, [fp, #-52]	; 0xffffffcc
    1364:	ldr	r3, [fp, #12]
    1368:	str	r3, [fp, #-48]	; 0xffffffd0
    136c:	mov	r3, #0
    1370:	str	r3, [fp, #-8]
    1374:	b	1474 <verify_union_vector+0x23c>
    1378:	ldr	r1, [fp, #-72]	; 0xffffffb8
    137c:	ldr	r0, [fp, #-64]	; 0xffffffc0
    1380:	bl	3d0 <read_uoffset>
    1384:	str	r0, [fp, #-24]	; 0xffffffe8
    1388:	ldr	r3, [fp, #-24]	; 0xffffffe8
    138c:	cmp	r3, #0
    1390:	bne	13cc <verify_union_vector+0x194>
    1394:	ldr	r2, [fp, #8]
    1398:	ldr	r3, [fp, #-8]
    139c:	add	r3, r2, r3
    13a0:	ldrb	r3, [r3]
    13a4:	cmp	r3, #0
    13a8:	moveq	r3, #1
    13ac:	movne	r3, #0
    13b0:	uxtb	r3, r3
    13b4:	str	r3, [fp, #-28]	; 0xffffffe4
    13b8:	ldr	r3, [fp, #-28]	; 0xffffffe4
    13bc:	cmp	r3, #0
    13c0:	bne	145c <verify_union_vector+0x224>
    13c4:	mov	r3, #32
    13c8:	b	1488 <verify_union_vector+0x250>
    13cc:	ldr	r2, [fp, #8]
    13d0:	ldr	r3, [fp, #-8]
    13d4:	add	r3, r2, r3
    13d8:	ldrb	r3, [r3]
    13dc:	cmp	r3, #0
    13e0:	movne	r3, #1
    13e4:	moveq	r3, #0
    13e8:	uxtb	r3, r3
    13ec:	str	r3, [fp, #-32]	; 0xffffffe0
    13f0:	ldr	r3, [fp, #-32]	; 0xffffffe0
    13f4:	cmp	r3, #0
    13f8:	bne	1404 <verify_union_vector+0x1cc>
    13fc:	mov	r3, #33	; 0x21
    1400:	b	1488 <verify_union_vector+0x250>
    1404:	ldr	r2, [fp, #8]
    1408:	ldr	r3, [fp, #-8]
    140c:	add	r3, r2, r3
    1410:	ldrb	r3, [r3]
    1414:	strb	r3, [fp, #-44]	; 0xffffffd4
    1418:	ldr	r3, [fp, #-72]	; 0xffffffb8
    141c:	str	r3, [fp, #-40]	; 0xffffffd8
    1420:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1424:	str	r3, [fp, #-36]	; 0xffffffdc
    1428:	sub	r2, fp, #56	; 0x38
    142c:	ldr	r3, [fp, #16]
    1430:	mov	r0, r2
    1434:	blx	r3
    1438:	mov	r3, r0
    143c:	cmp	r3, #0
    1440:	beq	145c <verify_union_vector+0x224>
    1444:	sub	r2, fp, #56	; 0x38
    1448:	ldr	r3, [fp, #16]
    144c:	mov	r0, r2
    1450:	blx	r3
    1454:	mov	r3, r0
    1458:	b	1488 <verify_union_vector+0x250>
    145c:	ldr	r3, [fp, #-8]
    1460:	add	r3, r3, #1
    1464:	str	r3, [fp, #-8]
    1468:	ldr	r3, [fp, #-72]	; 0xffffffb8
    146c:	add	r3, r3, #4
    1470:	str	r3, [fp, #-72]	; 0xffffffb8
    1474:	ldr	r2, [fp, #-8]
    1478:	ldr	r3, [fp, #-16]
    147c:	cmp	r2, r3
    1480:	bcc	1378 <verify_union_vector+0x140>
    1484:	mov	r3, #0
    1488:	mov	r0, r3
    148c:	sub	sp, fp, #4
    1490:	ldr	fp, [sp]
    1494:	add	sp, sp, #4
    1498:	pop	{pc}		; (ldr pc, [sp], #4)

0000149c <flatcc_verify_field>:
    149c:	str	fp, [sp, #-8]!
    14a0:	str	lr, [sp, #4]
    14a4:	add	fp, sp, #4
    14a8:	sub	sp, sp, #24
    14ac:	str	r0, [fp, #-8]
    14b0:	str	r2, [fp, #-16]
    14b4:	mov	r2, r3
    14b8:	mov	r3, r1
    14bc:	strh	r3, [fp, #-10]
    14c0:	mov	r3, r2
    14c4:	strh	r3, [fp, #-12]
    14c8:	ldrh	r1, [fp, #-10]
    14cc:	ldrh	r3, [fp, #-12]
    14d0:	str	r3, [sp]
    14d4:	ldr	r3, [fp, #-16]
    14d8:	mov	r2, #0
    14dc:	ldr	r0, [fp, #-8]
    14e0:	bl	814 <verify_field>
    14e4:	mov	r3, r0
    14e8:	cmp	r3, #0
    14ec:	beq	1514 <flatcc_verify_field+0x78>
    14f0:	ldrh	r1, [fp, #-10]
    14f4:	ldrh	r3, [fp, #-12]
    14f8:	str	r3, [sp]
    14fc:	ldr	r3, [fp, #-16]
    1500:	mov	r2, #0
    1504:	ldr	r0, [fp, #-8]
    1508:	bl	814 <verify_field>
    150c:	mov	r3, r0
    1510:	b	1518 <flatcc_verify_field+0x7c>
    1514:	mov	r3, #0
    1518:	mov	r0, r3
    151c:	sub	sp, fp, #4
    1520:	ldr	fp, [sp]
    1524:	add	sp, sp, #4
    1528:	pop	{pc}		; (ldr pc, [sp], #4)

0000152c <flatcc_verify_string_field>:
    152c:	strd	r4, [sp, #-20]!	; 0xffffffec
    1530:	str	r6, [sp, #8]
    1534:	str	fp, [sp, #12]
    1538:	str	lr, [sp, #16]
    153c:	add	fp, sp, #16
    1540:	sub	sp, sp, #28
    1544:	str	r0, [fp, #-32]	; 0xffffffe0
    1548:	mov	r3, r1
    154c:	str	r2, [fp, #-40]	; 0xffffffd8
    1550:	strh	r3, [fp, #-34]	; 0xffffffde
    1554:	sub	r3, fp, #28
    1558:	ldrh	r1, [fp, #-34]	; 0xffffffde
    155c:	ldr	r2, [fp, #-40]	; 0xffffffd8
    1560:	ldr	r0, [fp, #-32]	; 0xffffffe0
    1564:	bl	978 <get_offset_field>
    1568:	str	r0, [fp, #-24]	; 0xffffffe8
    156c:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1570:	cmp	r3, #0
    1574:	bne	1584 <flatcc_verify_string_field+0x58>
    1578:	ldr	r3, [fp, #-28]	; 0xffffffe4
    157c:	cmp	r3, #0
    1580:	bne	158c <flatcc_verify_string_field+0x60>
    1584:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1588:	b	15d0 <flatcc_verify_string_field+0xa4>
    158c:	ldr	r3, [fp, #-32]	; 0xffffffe0
    1590:	ldr	r4, [r3]
    1594:	ldr	r3, [fp, #-32]	; 0xffffffe0
    1598:	ldr	r5, [r3, #4]
    159c:	ldr	r6, [fp, #-28]	; 0xffffffe4
    15a0:	ldr	r3, [fp, #-32]	; 0xffffffe0
    15a4:	ldr	r3, [r3]
    15a8:	ldr	r2, [fp, #-28]	; 0xffffffe4
    15ac:	mov	r1, r2
    15b0:	mov	r0, r3
    15b4:	bl	3d0 <read_uoffset>
    15b8:	mov	r3, r0
    15bc:	mov	r2, r6
    15c0:	mov	r1, r5
    15c4:	mov	r0, r4
    15c8:	bl	ab8 <verify_string>
    15cc:	mov	r3, r0
    15d0:	mov	r0, r3
    15d4:	sub	sp, fp, #16
    15d8:	ldrd	r4, [sp]
    15dc:	ldr	r6, [sp, #8]
    15e0:	ldr	fp, [sp, #12]
    15e4:	add	sp, sp, #16
    15e8:	pop	{pc}		; (ldr pc, [sp], #4)

000015ec <flatcc_verify_vector_field>:
    15ec:	strd	r4, [sp, #-20]!	; 0xffffffec
    15f0:	str	r6, [sp, #8]
    15f4:	str	fp, [sp, #12]
    15f8:	str	lr, [sp, #16]
    15fc:	add	fp, sp, #16
    1600:	sub	sp, sp, #44	; 0x2c
    1604:	str	r0, [fp, #-32]	; 0xffffffe0
    1608:	str	r2, [fp, #-40]	; 0xffffffd8
    160c:	str	r3, [fp, #-44]	; 0xffffffd4
    1610:	mov	r3, r1
    1614:	strh	r3, [fp, #-34]	; 0xffffffde
    1618:	sub	r3, fp, #28
    161c:	ldrh	r1, [fp, #-34]	; 0xffffffde
    1620:	ldr	r2, [fp, #-40]	; 0xffffffd8
    1624:	ldr	r0, [fp, #-32]	; 0xffffffe0
    1628:	bl	978 <get_offset_field>
    162c:	str	r0, [fp, #-24]	; 0xffffffe8
    1630:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1634:	cmp	r3, #0
    1638:	bne	1648 <flatcc_verify_vector_field+0x5c>
    163c:	ldr	r3, [fp, #-28]	; 0xffffffe4
    1640:	cmp	r3, #0
    1644:	bne	1650 <flatcc_verify_vector_field+0x64>
    1648:	ldr	r3, [fp, #-24]	; 0xffffffe8
    164c:	b	16b0 <flatcc_verify_vector_field+0xc4>
    1650:	ldr	r3, [fp, #-32]	; 0xffffffe0
    1654:	ldr	r4, [r3]
    1658:	ldr	r3, [fp, #-32]	; 0xffffffe0
    165c:	ldr	r5, [r3, #4]
    1660:	ldr	r6, [fp, #-28]	; 0xffffffe4
    1664:	ldr	r3, [fp, #-32]	; 0xffffffe0
    1668:	ldr	r3, [r3]
    166c:	ldr	r2, [fp, #-28]	; 0xffffffe4
    1670:	mov	r1, r2
    1674:	mov	r0, r3
    1678:	bl	3d0 <read_uoffset>
    167c:	mov	r2, r0
    1680:	ldr	r3, [fp, #8]
    1684:	str	r3, [sp, #8]
    1688:	ldrh	r3, [fp, #4]
    168c:	str	r3, [sp, #4]
    1690:	ldr	r3, [fp, #-44]	; 0xffffffd4
    1694:	str	r3, [sp]
    1698:	mov	r3, r2
    169c:	mov	r2, r6
    16a0:	mov	r1, r5
    16a4:	mov	r0, r4
    16a8:	bl	bc0 <verify_vector>
    16ac:	mov	r3, r0
    16b0:	mov	r0, r3
    16b4:	sub	sp, fp, #16
    16b8:	ldrd	r4, [sp]
    16bc:	ldr	r6, [sp, #8]
    16c0:	ldr	fp, [sp, #12]
    16c4:	add	sp, sp, #16
    16c8:	pop	{pc}		; (ldr pc, [sp], #4)

000016cc <flatcc_verify_string_vector_field>:
    16cc:	strd	r4, [sp, #-20]!	; 0xffffffec
    16d0:	str	r6, [sp, #8]
    16d4:	str	fp, [sp, #12]
    16d8:	str	lr, [sp, #16]
    16dc:	add	fp, sp, #16
    16e0:	sub	sp, sp, #28
    16e4:	str	r0, [fp, #-32]	; 0xffffffe0
    16e8:	mov	r3, r1
    16ec:	str	r2, [fp, #-40]	; 0xffffffd8
    16f0:	strh	r3, [fp, #-34]	; 0xffffffde
    16f4:	sub	r3, fp, #28
    16f8:	ldrh	r1, [fp, #-34]	; 0xffffffde
    16fc:	ldr	r2, [fp, #-40]	; 0xffffffd8
    1700:	ldr	r0, [fp, #-32]	; 0xffffffe0
    1704:	bl	978 <get_offset_field>
    1708:	str	r0, [fp, #-24]	; 0xffffffe8
    170c:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1710:	cmp	r3, #0
    1714:	bne	1724 <flatcc_verify_string_vector_field+0x58>
    1718:	ldr	r3, [fp, #-28]	; 0xffffffe4
    171c:	cmp	r3, #0
    1720:	bne	172c <flatcc_verify_string_vector_field+0x60>
    1724:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1728:	b	1770 <flatcc_verify_string_vector_field+0xa4>
    172c:	ldr	r3, [fp, #-32]	; 0xffffffe0
    1730:	ldr	r4, [r3]
    1734:	ldr	r3, [fp, #-32]	; 0xffffffe0
    1738:	ldr	r5, [r3, #4]
    173c:	ldr	r6, [fp, #-28]	; 0xffffffe4
    1740:	ldr	r3, [fp, #-32]	; 0xffffffe0
    1744:	ldr	r3, [r3]
    1748:	ldr	r2, [fp, #-28]	; 0xffffffe4
    174c:	mov	r1, r2
    1750:	mov	r0, r3
    1754:	bl	3d0 <read_uoffset>
    1758:	mov	r3, r0
    175c:	mov	r2, r6
    1760:	mov	r1, r5
    1764:	mov	r0, r4
    1768:	bl	cc0 <verify_string_vector>
    176c:	mov	r3, r0
    1770:	mov	r0, r3
    1774:	sub	sp, fp, #16
    1778:	ldrd	r4, [sp]
    177c:	ldr	r6, [sp, #8]
    1780:	ldr	fp, [sp, #12]
    1784:	add	sp, sp, #16
    1788:	pop	{pc}		; (ldr pc, [sp], #4)

0000178c <flatcc_verify_table_field>:
    178c:	strd	r4, [sp, #-20]!	; 0xffffffec
    1790:	str	r6, [sp, #8]
    1794:	str	fp, [sp, #12]
    1798:	str	lr, [sp, #16]
    179c:	add	fp, sp, #16
    17a0:	sub	sp, sp, #36	; 0x24
    17a4:	str	r0, [fp, #-32]	; 0xffffffe0
    17a8:	str	r2, [fp, #-40]	; 0xffffffd8
    17ac:	str	r3, [fp, #-44]	; 0xffffffd4
    17b0:	mov	r3, r1
    17b4:	strh	r3, [fp, #-34]	; 0xffffffde
    17b8:	sub	r3, fp, #28
    17bc:	ldrh	r1, [fp, #-34]	; 0xffffffde
    17c0:	ldr	r2, [fp, #-40]	; 0xffffffd8
    17c4:	ldr	r0, [fp, #-32]	; 0xffffffe0
    17c8:	bl	978 <get_offset_field>
    17cc:	str	r0, [fp, #-24]	; 0xffffffe8
    17d0:	ldr	r3, [fp, #-24]	; 0xffffffe8
    17d4:	cmp	r3, #0
    17d8:	bne	17e8 <flatcc_verify_table_field+0x5c>
    17dc:	ldr	r3, [fp, #-28]	; 0xffffffe4
    17e0:	cmp	r3, #0
    17e4:	bne	17f0 <flatcc_verify_table_field+0x64>
    17e8:	ldr	r3, [fp, #-24]	; 0xffffffe8
    17ec:	b	184c <flatcc_verify_table_field+0xc0>
    17f0:	ldr	r3, [fp, #-32]	; 0xffffffe0
    17f4:	ldr	r4, [r3]
    17f8:	ldr	r3, [fp, #-32]	; 0xffffffe0
    17fc:	ldr	r5, [r3, #4]
    1800:	ldr	r6, [fp, #-28]	; 0xffffffe4
    1804:	ldr	r3, [fp, #-32]	; 0xffffffe0
    1808:	ldr	r3, [r3]
    180c:	ldr	r2, [fp, #-28]	; 0xffffffe4
    1810:	mov	r1, r2
    1814:	mov	r0, r3
    1818:	bl	3d0 <read_uoffset>
    181c:	mov	r1, r0
    1820:	ldr	r3, [fp, #-32]	; 0xffffffe0
    1824:	ldr	r3, [r3, #8]
    1828:	ldr	r2, [fp, #-44]	; 0xffffffd4
    182c:	str	r2, [sp, #4]
    1830:	str	r3, [sp]
    1834:	mov	r3, r1
    1838:	mov	r2, r6
    183c:	mov	r1, r5
    1840:	mov	r0, r4
    1844:	bl	e18 <verify_table>
    1848:	mov	r3, r0
    184c:	mov	r0, r3
    1850:	sub	sp, fp, #16
    1854:	ldrd	r4, [sp]
    1858:	ldr	r6, [sp, #8]
    185c:	ldr	fp, [sp, #12]
    1860:	add	sp, sp, #16
    1864:	pop	{pc}		; (ldr pc, [sp], #4)

00001868 <flatcc_verify_table_vector_field>:
    1868:	strd	r4, [sp, #-20]!	; 0xffffffec
    186c:	str	r6, [sp, #8]
    1870:	str	fp, [sp, #12]
    1874:	str	lr, [sp, #16]
    1878:	add	fp, sp, #16
    187c:	sub	sp, sp, #36	; 0x24
    1880:	str	r0, [fp, #-32]	; 0xffffffe0
    1884:	str	r2, [fp, #-40]	; 0xffffffd8
    1888:	str	r3, [fp, #-44]	; 0xffffffd4
    188c:	mov	r3, r1
    1890:	strh	r3, [fp, #-34]	; 0xffffffde
    1894:	sub	r3, fp, #28
    1898:	ldrh	r1, [fp, #-34]	; 0xffffffde
    189c:	ldr	r2, [fp, #-40]	; 0xffffffd8
    18a0:	ldr	r0, [fp, #-32]	; 0xffffffe0
    18a4:	bl	978 <get_offset_field>
    18a8:	str	r0, [fp, #-24]	; 0xffffffe8
    18ac:	ldr	r3, [fp, #-24]	; 0xffffffe8
    18b0:	cmp	r3, #0
    18b4:	bne	18c4 <flatcc_verify_table_vector_field+0x5c>
    18b8:	ldr	r3, [fp, #-28]	; 0xffffffe4
    18bc:	cmp	r3, #0
    18c0:	bne	18cc <flatcc_verify_table_vector_field+0x64>
    18c4:	ldr	r3, [fp, #-24]	; 0xffffffe8
    18c8:	b	1928 <flatcc_verify_table_vector_field+0xc0>
    18cc:	ldr	r3, [fp, #-32]	; 0xffffffe0
    18d0:	ldr	r4, [r3]
    18d4:	ldr	r3, [fp, #-32]	; 0xffffffe0
    18d8:	ldr	r5, [r3, #4]
    18dc:	ldr	r6, [fp, #-28]	; 0xffffffe4
    18e0:	ldr	r3, [fp, #-32]	; 0xffffffe0
    18e4:	ldr	r3, [r3]
    18e8:	ldr	r2, [fp, #-28]	; 0xffffffe4
    18ec:	mov	r1, r2
    18f0:	mov	r0, r3
    18f4:	bl	3d0 <read_uoffset>
    18f8:	mov	r1, r0
    18fc:	ldr	r3, [fp, #-32]	; 0xffffffe0
    1900:	ldr	r3, [r3, #8]
    1904:	ldr	r2, [fp, #-44]	; 0xffffffd4
    1908:	str	r2, [sp, #4]
    190c:	str	r3, [sp]
    1910:	mov	r3, r1
    1914:	mov	r2, r6
    1918:	mov	r1, r5
    191c:	mov	r0, r4
    1920:	bl	1084 <verify_table_vector>
    1924:	mov	r3, r0
    1928:	mov	r0, r3
    192c:	sub	sp, fp, #16
    1930:	ldrd	r4, [sp]
    1934:	ldr	r6, [sp, #8]
    1938:	ldr	fp, [sp, #12]
    193c:	add	sp, sp, #16
    1940:	pop	{pc}		; (ldr pc, [sp], #4)

00001944 <flatcc_verify_union_table>:
    1944:	str	fp, [sp, #-8]!
    1948:	str	lr, [sp, #4]
    194c:	add	fp, sp, #4
    1950:	sub	sp, sp, #16
    1954:	str	r0, [fp, #-8]
    1958:	str	r1, [fp, #-12]
    195c:	ldr	r3, [fp, #-8]
    1960:	ldr	r0, [r3]
    1964:	ldr	r3, [fp, #-8]
    1968:	ldr	r1, [r3, #4]
    196c:	ldr	r3, [fp, #-8]
    1970:	ldr	ip, [r3, #16]
    1974:	ldr	r3, [fp, #-8]
    1978:	ldr	lr, [r3, #20]
    197c:	ldr	r3, [fp, #-8]
    1980:	ldr	r3, [r3, #8]
    1984:	ldr	r2, [fp, #-12]
    1988:	str	r2, [sp, #4]
    198c:	str	r3, [sp]
    1990:	mov	r3, lr
    1994:	mov	r2, ip
    1998:	bl	e18 <verify_table>
    199c:	mov	r3, r0
    19a0:	mov	r0, r3
    19a4:	sub	sp, fp, #4
    19a8:	ldr	fp, [sp]
    19ac:	add	sp, sp, #4
    19b0:	pop	{pc}		; (ldr pc, [sp], #4)

000019b4 <flatcc_verify_union_struct>:
    19b4:	str	fp, [sp, #-8]!
    19b8:	str	lr, [sp, #4]
    19bc:	add	fp, sp, #4
    19c0:	sub	sp, sp, #24
    19c4:	str	r0, [fp, #-8]
    19c8:	str	r1, [fp, #-12]
    19cc:	mov	r3, r2
    19d0:	strh	r3, [fp, #-14]
    19d4:	ldr	r3, [fp, #-8]
    19d8:	ldr	r0, [r3, #4]
    19dc:	ldr	r3, [fp, #-8]
    19e0:	ldr	r1, [r3, #16]
    19e4:	ldr	r3, [fp, #-8]
    19e8:	ldr	r2, [r3, #20]
    19ec:	ldrh	r3, [fp, #-14]
    19f0:	str	r3, [sp]
    19f4:	ldr	r3, [fp, #-12]
    19f8:	bl	608 <verify_struct>
    19fc:	mov	r3, r0
    1a00:	mov	r0, r3
    1a04:	sub	sp, fp, #4
    1a08:	ldr	fp, [sp]
    1a0c:	add	sp, sp, #4
    1a10:	pop	{pc}		; (ldr pc, [sp], #4)

00001a14 <flatcc_verify_union_string>:
    1a14:	str	fp, [sp, #-8]!
    1a18:	str	lr, [sp, #4]
    1a1c:	add	fp, sp, #4
    1a20:	sub	sp, sp, #8
    1a24:	str	r0, [fp, #-8]
    1a28:	ldr	r3, [fp, #-8]
    1a2c:	ldr	r0, [r3]
    1a30:	ldr	r3, [fp, #-8]
    1a34:	ldr	r1, [r3, #4]
    1a38:	ldr	r3, [fp, #-8]
    1a3c:	ldr	r2, [r3, #16]
    1a40:	ldr	r3, [fp, #-8]
    1a44:	ldr	r3, [r3, #20]
    1a48:	bl	ab8 <verify_string>
    1a4c:	mov	r3, r0
    1a50:	mov	r0, r3
    1a54:	sub	sp, fp, #4
    1a58:	ldr	fp, [sp]
    1a5c:	add	sp, sp, #4
    1a60:	pop	{pc}		; (ldr pc, [sp], #4)

00001a64 <flatcc_verify_buffer_header>:
    1a64:	str	fp, [sp, #-8]!
    1a68:	str	lr, [sp, #4]
    1a6c:	add	fp, sp, #4
    1a70:	sub	sp, sp, #40	; 0x28
    1a74:	str	r0, [fp, #-32]	; 0xffffffe0
    1a78:	str	r1, [fp, #-36]	; 0xffffffdc
    1a7c:	str	r2, [fp, #-40]	; 0xffffffd8
    1a80:	ldr	r3, [fp, #-32]	; 0xffffffe0
    1a84:	and	r3, r3, #3
    1a88:	cmp	r3, #0
    1a8c:	moveq	r3, #1
    1a90:	movne	r3, #0
    1a94:	uxtb	r3, r3
    1a98:	str	r3, [fp, #-8]
    1a9c:	ldr	r3, [fp, #-8]
    1aa0:	cmp	r3, #0
    1aa4:	bne	1ab0 <flatcc_verify_buffer_header+0x4c>
    1aa8:	mov	r3, #5
    1aac:	b	1b74 <flatcc_verify_buffer_header+0x110>
    1ab0:	ldr	r3, [fp, #-36]	; 0xffffffdc
    1ab4:	cmn	r3, #9
    1ab8:	movls	r3, #1
    1abc:	movhi	r3, #0
    1ac0:	uxtb	r3, r3
    1ac4:	str	r3, [fp, #-12]
    1ac8:	ldr	r3, [fp, #-12]
    1acc:	cmp	r3, #0
    1ad0:	bne	1adc <flatcc_verify_buffer_header+0x78>
    1ad4:	mov	r3, #6
    1ad8:	b	1b74 <flatcc_verify_buffer_header+0x110>
    1adc:	ldr	r3, [fp, #-36]	; 0xffffffdc
    1ae0:	cmp	r3, #7
    1ae4:	movhi	r3, #1
    1ae8:	movls	r3, #0
    1aec:	uxtb	r3, r3
    1af0:	str	r3, [fp, #-16]
    1af4:	ldr	r3, [fp, #-16]
    1af8:	cmp	r3, #0
    1afc:	bne	1b08 <flatcc_verify_buffer_header+0xa4>
    1b00:	mov	r3, #1
    1b04:	b	1b74 <flatcc_verify_buffer_header+0x110>
    1b08:	ldr	r3, [fp, #-40]	; 0xffffffd8
    1b0c:	cmp	r3, #0
    1b10:	beq	1b70 <flatcc_verify_buffer_header+0x10c>
    1b14:	ldr	r0, [fp, #-40]	; 0xffffffd8
    1b18:	bl	414 <read_thash_identifier>
    1b1c:	str	r0, [fp, #-20]	; 0xffffffec
    1b20:	mov	r1, #4
    1b24:	ldr	r0, [fp, #-32]	; 0xffffffe0
    1b28:	bl	468 <read_thash>
    1b2c:	str	r0, [fp, #-24]	; 0xffffffe8
    1b30:	ldr	r3, [fp, #-20]	; 0xffffffec
    1b34:	cmp	r3, #0
    1b38:	beq	1b4c <flatcc_verify_buffer_header+0xe8>
    1b3c:	ldr	r2, [fp, #-24]	; 0xffffffe8
    1b40:	ldr	r3, [fp, #-20]	; 0xffffffec
    1b44:	cmp	r2, r3
    1b48:	bne	1b54 <flatcc_verify_buffer_header+0xf0>
    1b4c:	mov	r3, #1
    1b50:	b	1b58 <flatcc_verify_buffer_header+0xf4>
    1b54:	mov	r3, #0
    1b58:	str	r3, [fp, #-28]	; 0xffffffe4
    1b5c:	ldr	r3, [fp, #-28]	; 0xffffffe4
    1b60:	cmp	r3, #0
    1b64:	bne	1b70 <flatcc_verify_buffer_header+0x10c>
    1b68:	mov	r3, #2
    1b6c:	b	1b74 <flatcc_verify_buffer_header+0x110>
    1b70:	mov	r3, #0
    1b74:	mov	r0, r3
    1b78:	sub	sp, fp, #4
    1b7c:	ldr	fp, [sp]
    1b80:	add	sp, sp, #4
    1b84:	pop	{pc}		; (ldr pc, [sp], #4)

00001b88 <flatcc_verify_typed_buffer_header>:
    1b88:	str	fp, [sp, #-8]!
    1b8c:	str	lr, [sp, #4]
    1b90:	add	fp, sp, #4
    1b94:	sub	sp, sp, #40	; 0x28
    1b98:	str	r0, [fp, #-32]	; 0xffffffe0
    1b9c:	str	r1, [fp, #-36]	; 0xffffffdc
    1ba0:	str	r2, [fp, #-40]	; 0xffffffd8
    1ba4:	ldr	r3, [fp, #-32]	; 0xffffffe0
    1ba8:	and	r3, r3, #3
    1bac:	cmp	r3, #0
    1bb0:	moveq	r3, #1
    1bb4:	movne	r3, #0
    1bb8:	uxtb	r3, r3
    1bbc:	str	r3, [fp, #-8]
    1bc0:	ldr	r3, [fp, #-8]
    1bc4:	cmp	r3, #0
    1bc8:	bne	1bd4 <flatcc_verify_typed_buffer_header+0x4c>
    1bcc:	mov	r3, #5
    1bd0:	b	1c94 <flatcc_verify_typed_buffer_header+0x10c>
    1bd4:	ldr	r3, [fp, #-36]	; 0xffffffdc
    1bd8:	cmn	r3, #9
    1bdc:	movls	r3, #1
    1be0:	movhi	r3, #0
    1be4:	uxtb	r3, r3
    1be8:	str	r3, [fp, #-12]
    1bec:	ldr	r3, [fp, #-12]
    1bf0:	cmp	r3, #0
    1bf4:	bne	1c00 <flatcc_verify_typed_buffer_header+0x78>
    1bf8:	mov	r3, #6
    1bfc:	b	1c94 <flatcc_verify_typed_buffer_header+0x10c>
    1c00:	ldr	r3, [fp, #-36]	; 0xffffffdc
    1c04:	cmp	r3, #7
    1c08:	movhi	r3, #1
    1c0c:	movls	r3, #0
    1c10:	uxtb	r3, r3
    1c14:	str	r3, [fp, #-16]
    1c18:	ldr	r3, [fp, #-16]
    1c1c:	cmp	r3, #0
    1c20:	bne	1c2c <flatcc_verify_typed_buffer_header+0xa4>
    1c24:	mov	r3, #1
    1c28:	b	1c94 <flatcc_verify_typed_buffer_header+0x10c>
    1c2c:	ldr	r3, [fp, #-40]	; 0xffffffd8
    1c30:	cmp	r3, #0
    1c34:	beq	1c90 <flatcc_verify_typed_buffer_header+0x108>
    1c38:	ldr	r3, [fp, #-40]	; 0xffffffd8
    1c3c:	str	r3, [fp, #-20]	; 0xffffffec
    1c40:	mov	r1, #4
    1c44:	ldr	r0, [fp, #-32]	; 0xffffffe0
    1c48:	bl	468 <read_thash>
    1c4c:	str	r0, [fp, #-24]	; 0xffffffe8
    1c50:	ldr	r3, [fp, #-20]	; 0xffffffec
    1c54:	cmp	r3, #0
    1c58:	beq	1c6c <flatcc_verify_typed_buffer_header+0xe4>
    1c5c:	ldr	r2, [fp, #-24]	; 0xffffffe8
    1c60:	ldr	r3, [fp, #-20]	; 0xffffffec
    1c64:	cmp	r2, r3
    1c68:	bne	1c74 <flatcc_verify_typed_buffer_header+0xec>
    1c6c:	mov	r3, #1
    1c70:	b	1c78 <flatcc_verify_typed_buffer_header+0xf0>
    1c74:	mov	r3, #0
    1c78:	str	r3, [fp, #-28]	; 0xffffffe4
    1c7c:	ldr	r3, [fp, #-28]	; 0xffffffe4
    1c80:	cmp	r3, #0
    1c84:	bne	1c90 <flatcc_verify_typed_buffer_header+0x108>
    1c88:	mov	r3, #2
    1c8c:	b	1c94 <flatcc_verify_typed_buffer_header+0x10c>
    1c90:	mov	r3, #0
    1c94:	mov	r0, r3
    1c98:	sub	sp, fp, #4
    1c9c:	ldr	fp, [sp]
    1ca0:	add	sp, sp, #4
    1ca4:	pop	{pc}		; (ldr pc, [sp], #4)

00001ca8 <flatcc_verify_struct_as_root>:
    1ca8:	str	fp, [sp, #-8]!
    1cac:	str	lr, [sp, #4]
    1cb0:	add	fp, sp, #4
    1cb4:	sub	sp, sp, #24
    1cb8:	str	r0, [fp, #-8]
    1cbc:	str	r1, [fp, #-12]
    1cc0:	str	r2, [fp, #-16]
    1cc4:	str	r3, [fp, #-20]	; 0xffffffec
    1cc8:	ldr	r2, [fp, #-16]
    1ccc:	ldr	r1, [fp, #-12]
    1cd0:	ldr	r0, [fp, #-8]
    1cd4:	bl	1a64 <flatcc_verify_buffer_header>
    1cd8:	mov	r3, r0
    1cdc:	cmp	r3, #0
    1ce0:	beq	1cfc <flatcc_verify_struct_as_root+0x54>
    1ce4:	ldr	r2, [fp, #-16]
    1ce8:	ldr	r1, [fp, #-12]
    1cec:	ldr	r0, [fp, #-8]
    1cf0:	bl	1a64 <flatcc_verify_buffer_header>
    1cf4:	mov	r3, r0
    1cf8:	b	1d28 <flatcc_verify_struct_as_root+0x80>
    1cfc:	mov	r1, #0
    1d00:	ldr	r0, [fp, #-8]
    1d04:	bl	3d0 <read_uoffset>
    1d08:	mov	r2, r0
    1d0c:	ldrh	r3, [fp, #4]
    1d10:	str	r3, [sp]
    1d14:	ldr	r3, [fp, #-20]	; 0xffffffec
    1d18:	mov	r1, #0
    1d1c:	ldr	r0, [fp, #-12]
    1d20:	bl	608 <verify_struct>
    1d24:	mov	r3, r0
    1d28:	mov	r0, r3
    1d2c:	sub	sp, fp, #4
    1d30:	ldr	fp, [sp]
    1d34:	add	sp, sp, #4
    1d38:	pop	{pc}		; (ldr pc, [sp], #4)

00001d3c <flatcc_verify_struct_as_typed_root>:
    1d3c:	str	fp, [sp, #-8]!
    1d40:	str	lr, [sp, #4]
    1d44:	add	fp, sp, #4
    1d48:	sub	sp, sp, #24
    1d4c:	str	r0, [fp, #-8]
    1d50:	str	r1, [fp, #-12]
    1d54:	str	r2, [fp, #-16]
    1d58:	str	r3, [fp, #-20]	; 0xffffffec
    1d5c:	ldr	r2, [fp, #-16]
    1d60:	ldr	r1, [fp, #-12]
    1d64:	ldr	r0, [fp, #-8]
    1d68:	bl	1b88 <flatcc_verify_typed_buffer_header>
    1d6c:	mov	r3, r0
    1d70:	cmp	r3, #0
    1d74:	beq	1d90 <flatcc_verify_struct_as_typed_root+0x54>
    1d78:	ldr	r2, [fp, #-16]
    1d7c:	ldr	r1, [fp, #-12]
    1d80:	ldr	r0, [fp, #-8]
    1d84:	bl	1b88 <flatcc_verify_typed_buffer_header>
    1d88:	mov	r3, r0
    1d8c:	b	1dbc <flatcc_verify_struct_as_typed_root+0x80>
    1d90:	mov	r1, #0
    1d94:	ldr	r0, [fp, #-8]
    1d98:	bl	3d0 <read_uoffset>
    1d9c:	mov	r2, r0
    1da0:	ldrh	r3, [fp, #4]
    1da4:	str	r3, [sp]
    1da8:	ldr	r3, [fp, #-20]	; 0xffffffec
    1dac:	mov	r1, #0
    1db0:	ldr	r0, [fp, #-12]
    1db4:	bl	608 <verify_struct>
    1db8:	mov	r3, r0
    1dbc:	mov	r0, r3
    1dc0:	sub	sp, fp, #4
    1dc4:	ldr	fp, [sp]
    1dc8:	add	sp, sp, #4
    1dcc:	pop	{pc}		; (ldr pc, [sp], #4)

00001dd0 <flatcc_verify_table_as_root>:
    1dd0:	str	fp, [sp, #-8]!
    1dd4:	str	lr, [sp, #4]
    1dd8:	add	fp, sp, #4
    1ddc:	sub	sp, sp, #24
    1de0:	str	r0, [fp, #-8]
    1de4:	str	r1, [fp, #-12]
    1de8:	str	r2, [fp, #-16]
    1dec:	str	r3, [fp, #-20]	; 0xffffffec
    1df0:	ldr	r2, [fp, #-16]
    1df4:	ldr	r1, [fp, #-12]
    1df8:	ldr	r0, [fp, #-8]
    1dfc:	bl	1a64 <flatcc_verify_buffer_header>
    1e00:	mov	r3, r0
    1e04:	cmp	r3, #0
    1e08:	beq	1e24 <flatcc_verify_table_as_root+0x54>
    1e0c:	ldr	r2, [fp, #-16]
    1e10:	ldr	r1, [fp, #-12]
    1e14:	ldr	r0, [fp, #-8]
    1e18:	bl	1a64 <flatcc_verify_buffer_header>
    1e1c:	mov	r3, r0
    1e20:	b	1e5c <flatcc_verify_table_as_root+0x8c>
    1e24:	mov	r1, #0
    1e28:	ldr	r0, [fp, #-8]
    1e2c:	bl	3d0 <read_uoffset>
    1e30:	mov	r2, r0
    1e34:	ldr	r3, [fp, #-20]	; 0xffffffec
    1e38:	str	r3, [sp, #4]
    1e3c:	mov	r3, #100	; 0x64
    1e40:	str	r3, [sp]
    1e44:	mov	r3, r2
    1e48:	mov	r2, #0
    1e4c:	ldr	r1, [fp, #-12]
    1e50:	ldr	r0, [fp, #-8]
    1e54:	bl	e18 <verify_table>
    1e58:	mov	r3, r0
    1e5c:	mov	r0, r3
    1e60:	sub	sp, fp, #4
    1e64:	ldr	fp, [sp]
    1e68:	add	sp, sp, #4
    1e6c:	pop	{pc}		; (ldr pc, [sp], #4)

00001e70 <flatcc_verify_table_as_typed_root>:
    1e70:	str	fp, [sp, #-8]!
    1e74:	str	lr, [sp, #4]
    1e78:	add	fp, sp, #4
    1e7c:	sub	sp, sp, #24
    1e80:	str	r0, [fp, #-8]
    1e84:	str	r1, [fp, #-12]
    1e88:	str	r2, [fp, #-16]
    1e8c:	str	r3, [fp, #-20]	; 0xffffffec
    1e90:	ldr	r2, [fp, #-16]
    1e94:	ldr	r1, [fp, #-12]
    1e98:	ldr	r0, [fp, #-8]
    1e9c:	bl	1b88 <flatcc_verify_typed_buffer_header>
    1ea0:	mov	r3, r0
    1ea4:	cmp	r3, #0
    1ea8:	beq	1ec4 <flatcc_verify_table_as_typed_root+0x54>
    1eac:	ldr	r2, [fp, #-16]
    1eb0:	ldr	r1, [fp, #-12]
    1eb4:	ldr	r0, [fp, #-8]
    1eb8:	bl	1b88 <flatcc_verify_typed_buffer_header>
    1ebc:	mov	r3, r0
    1ec0:	b	1efc <flatcc_verify_table_as_typed_root+0x8c>
    1ec4:	mov	r1, #0
    1ec8:	ldr	r0, [fp, #-8]
    1ecc:	bl	3d0 <read_uoffset>
    1ed0:	mov	r2, r0
    1ed4:	ldr	r3, [fp, #-20]	; 0xffffffec
    1ed8:	str	r3, [sp, #4]
    1edc:	mov	r3, #100	; 0x64
    1ee0:	str	r3, [sp]
    1ee4:	mov	r3, r2
    1ee8:	mov	r2, #0
    1eec:	ldr	r1, [fp, #-12]
    1ef0:	ldr	r0, [fp, #-8]
    1ef4:	bl	e18 <verify_table>
    1ef8:	mov	r3, r0
    1efc:	mov	r0, r3
    1f00:	sub	sp, fp, #4
    1f04:	ldr	fp, [sp]
    1f08:	add	sp, sp, #4
    1f0c:	pop	{pc}		; (ldr pc, [sp], #4)

00001f10 <flatcc_verify_struct_as_nested_root>:
    1f10:	str	fp, [sp, #-8]!
    1f14:	str	lr, [sp, #4]
    1f18:	add	fp, sp, #4
    1f1c:	sub	sp, sp, #32
    1f20:	str	r0, [fp, #-16]
    1f24:	str	r2, [fp, #-24]	; 0xffffffe8
    1f28:	str	r3, [fp, #-28]	; 0xffffffe4
    1f2c:	mov	r3, r1
    1f30:	strh	r3, [fp, #-18]	; 0xffffffee
    1f34:	ldrh	r2, [fp, #8]
    1f38:	ldrh	r1, [fp, #-18]	; 0xffffffee
    1f3c:	mvn	r3, #0
    1f40:	str	r3, [sp, #4]
    1f44:	mov	r3, #1
    1f48:	str	r3, [sp]
    1f4c:	mov	r3, r2
    1f50:	ldr	r2, [fp, #-24]	; 0xffffffe8
    1f54:	ldr	r0, [fp, #-16]
    1f58:	bl	15ec <flatcc_verify_vector_field>
    1f5c:	mov	r3, r0
    1f60:	cmp	r3, #0
    1f64:	beq	1f98 <flatcc_verify_struct_as_nested_root+0x88>
    1f68:	ldrh	r2, [fp, #8]
    1f6c:	ldrh	r1, [fp, #-18]	; 0xffffffee
    1f70:	mvn	r3, #0
    1f74:	str	r3, [sp, #4]
    1f78:	mov	r3, #1
    1f7c:	str	r3, [sp]
    1f80:	mov	r3, r2
    1f84:	ldr	r2, [fp, #-24]	; 0xffffffe8
    1f88:	ldr	r0, [fp, #-16]
    1f8c:	bl	15ec <flatcc_verify_vector_field>
    1f90:	mov	r3, r0
    1f94:	b	2018 <flatcc_verify_struct_as_nested_root+0x108>
    1f98:	ldrh	r3, [fp, #-18]	; 0xffffffee
    1f9c:	mov	r1, r3
    1fa0:	ldr	r0, [fp, #-16]
    1fa4:	bl	79c <get_field_ptr>
    1fa8:	str	r0, [fp, #-8]
    1fac:	ldr	r3, [fp, #-8]
    1fb0:	cmp	r3, #0
    1fb4:	bne	1fc0 <flatcc_verify_struct_as_nested_root+0xb0>
    1fb8:	mov	r3, #0
    1fbc:	b	2018 <flatcc_verify_struct_as_nested_root+0x108>
    1fc0:	mov	r1, #0
    1fc4:	ldr	r0, [fp, #-8]
    1fc8:	bl	3d0 <read_uoffset>
    1fcc:	mov	r2, r0
    1fd0:	ldr	r3, [fp, #-8]
    1fd4:	add	r3, r2, r3
    1fd8:	str	r3, [fp, #-8]
    1fdc:	mov	r1, #0
    1fe0:	ldr	r0, [fp, #-8]
    1fe4:	bl	3d0 <read_uoffset>
    1fe8:	str	r0, [fp, #-12]
    1fec:	ldr	r3, [fp, #-8]
    1ff0:	add	r3, r3, #4
    1ff4:	str	r3, [fp, #-8]
    1ff8:	ldrh	r3, [fp, #8]
    1ffc:	str	r3, [sp]
    2000:	ldr	r3, [fp, #4]
    2004:	ldr	r2, [fp, #-28]	; 0xffffffe4
    2008:	ldr	r1, [fp, #-12]
    200c:	ldr	r0, [fp, #-8]
    2010:	bl	1ca8 <flatcc_verify_struct_as_root>
    2014:	mov	r3, r0
    2018:	mov	r0, r3
    201c:	sub	sp, fp, #4
    2020:	ldr	fp, [sp]
    2024:	add	sp, sp, #4
    2028:	pop	{pc}		; (ldr pc, [sp], #4)

0000202c <flatcc_verify_table_as_nested_root>:
    202c:	str	fp, [sp, #-8]!
    2030:	str	lr, [sp, #4]
    2034:	add	fp, sp, #4
    2038:	sub	sp, sp, #32
    203c:	str	r0, [fp, #-16]
    2040:	str	r2, [fp, #-24]	; 0xffffffe8
    2044:	str	r3, [fp, #-28]	; 0xffffffe4
    2048:	mov	r3, r1
    204c:	strh	r3, [fp, #-18]	; 0xffffffee
    2050:	ldrh	r2, [fp, #4]
    2054:	ldrh	r1, [fp, #-18]	; 0xffffffee
    2058:	mvn	r3, #0
    205c:	str	r3, [sp, #4]
    2060:	mov	r3, #1
    2064:	str	r3, [sp]
    2068:	mov	r3, r2
    206c:	ldr	r2, [fp, #-24]	; 0xffffffe8
    2070:	ldr	r0, [fp, #-16]
    2074:	bl	15ec <flatcc_verify_vector_field>
    2078:	mov	r3, r0
    207c:	cmp	r3, #0
    2080:	beq	20b4 <flatcc_verify_table_as_nested_root+0x88>
    2084:	ldrh	r2, [fp, #4]
    2088:	ldrh	r1, [fp, #-18]	; 0xffffffee
    208c:	mvn	r3, #0
    2090:	str	r3, [sp, #4]
    2094:	mov	r3, #1
    2098:	str	r3, [sp]
    209c:	mov	r3, r2
    20a0:	ldr	r2, [fp, #-24]	; 0xffffffe8
    20a4:	ldr	r0, [fp, #-16]
    20a8:	bl	15ec <flatcc_verify_vector_field>
    20ac:	mov	r3, r0
    20b0:	b	2184 <flatcc_verify_table_as_nested_root+0x158>
    20b4:	ldrh	r3, [fp, #-18]	; 0xffffffee
    20b8:	mov	r1, r3
    20bc:	ldr	r0, [fp, #-16]
    20c0:	bl	79c <get_field_ptr>
    20c4:	str	r0, [fp, #-8]
    20c8:	ldr	r3, [fp, #-8]
    20cc:	cmp	r3, #0
    20d0:	bne	20dc <flatcc_verify_table_as_nested_root+0xb0>
    20d4:	mov	r3, #0
    20d8:	b	2184 <flatcc_verify_table_as_nested_root+0x158>
    20dc:	mov	r1, #0
    20e0:	ldr	r0, [fp, #-8]
    20e4:	bl	3d0 <read_uoffset>
    20e8:	mov	r2, r0
    20ec:	ldr	r3, [fp, #-8]
    20f0:	add	r3, r2, r3
    20f4:	str	r3, [fp, #-8]
    20f8:	mov	r1, #0
    20fc:	ldr	r0, [fp, #-8]
    2100:	bl	3d0 <read_uoffset>
    2104:	str	r0, [fp, #-12]
    2108:	ldr	r3, [fp, #-8]
    210c:	add	r3, r3, #4
    2110:	str	r3, [fp, #-8]
    2114:	ldr	r2, [fp, #-28]	; 0xffffffe4
    2118:	ldr	r1, [fp, #-12]
    211c:	ldr	r0, [fp, #-8]
    2120:	bl	1a64 <flatcc_verify_buffer_header>
    2124:	mov	r3, r0
    2128:	cmp	r3, #0
    212c:	beq	2148 <flatcc_verify_table_as_nested_root+0x11c>
    2130:	ldr	r2, [fp, #-28]	; 0xffffffe4
    2134:	ldr	r1, [fp, #-12]
    2138:	ldr	r0, [fp, #-8]
    213c:	bl	1a64 <flatcc_verify_buffer_header>
    2140:	mov	r3, r0
    2144:	b	2184 <flatcc_verify_table_as_nested_root+0x158>
    2148:	mov	r1, #0
    214c:	ldr	r0, [fp, #-8]
    2150:	bl	3d0 <read_uoffset>
    2154:	mov	r1, r0
    2158:	ldr	r3, [fp, #-16]
    215c:	ldr	r3, [r3, #8]
    2160:	ldr	r2, [fp, #8]
    2164:	str	r2, [sp, #4]
    2168:	str	r3, [sp]
    216c:	mov	r3, r1
    2170:	mov	r2, #0
    2174:	ldr	r1, [fp, #-12]
    2178:	ldr	r0, [fp, #-8]
    217c:	bl	e18 <verify_table>
    2180:	mov	r3, r0
    2184:	mov	r0, r3
    2188:	sub	sp, fp, #4
    218c:	ldr	fp, [sp]
    2190:	add	sp, sp, #4
    2194:	pop	{pc}		; (ldr pc, [sp], #4)

00002198 <flatcc_verify_union_field>:
    2198:	str	fp, [sp, #-8]!
    219c:	str	lr, [sp, #4]
    21a0:	add	fp, sp, #4
    21a4:	sub	sp, sp, #80	; 0x50
    21a8:	str	r0, [fp, #-64]	; 0xffffffc0
    21ac:	str	r2, [fp, #-72]	; 0xffffffb8
    21b0:	str	r3, [fp, #-76]	; 0xffffffb4
    21b4:	mov	r3, r1
    21b8:	strh	r3, [fp, #-66]	; 0xffffffbe
    21bc:	ldrh	r3, [fp, #-66]	; 0xffffffbe
    21c0:	sub	r3, r3, #1
    21c4:	uxth	r3, r3
    21c8:	mov	r1, r3
    21cc:	ldr	r0, [fp, #-64]	; 0xffffffc0
    21d0:	bl	720 <read_vt_entry>
    21d4:	mov	r3, r0
    21d8:	strh	r3, [fp, #-6]
    21dc:	ldrh	r3, [fp, #-6]
    21e0:	cmp	r3, #0
    21e4:	bne	2260 <flatcc_verify_union_field+0xc8>
    21e8:	ldrh	r3, [fp, #-66]	; 0xffffffbe
    21ec:	mov	r1, r3
    21f0:	ldr	r0, [fp, #-64]	; 0xffffffc0
    21f4:	bl	720 <read_vt_entry>
    21f8:	mov	r3, r0
    21fc:	strh	r3, [fp, #-8]
    2200:	ldrh	r3, [fp, #-8]
    2204:	cmp	r3, #0
    2208:	moveq	r3, #1
    220c:	movne	r3, #0
    2210:	uxtb	r3, r3
    2214:	str	r3, [fp, #-12]
    2218:	ldr	r3, [fp, #-12]
    221c:	cmp	r3, #0
    2220:	bne	222c <flatcc_verify_union_field+0x94>
    2224:	mov	r3, #23
    2228:	b	23f0 <flatcc_verify_union_field+0x258>
    222c:	ldr	r3, [fp, #-72]	; 0xffffffb8
    2230:	cmp	r3, #0
    2234:	moveq	r3, #1
    2238:	movne	r3, #0
    223c:	uxtb	r3, r3
    2240:	str	r3, [fp, #-16]
    2244:	ldr	r3, [fp, #-16]
    2248:	cmp	r3, #0
    224c:	bne	2258 <flatcc_verify_union_field+0xc0>
    2250:	mov	r3, #21
    2254:	b	23f0 <flatcc_verify_union_field+0x258>
    2258:	mov	r3, #0
    225c:	b	23f0 <flatcc_verify_union_field+0x258>
    2260:	ldrh	r3, [fp, #-66]	; 0xffffffbe
    2264:	sub	r3, r3, #1
    2268:	uxth	r1, r3
    226c:	mov	r3, #1
    2270:	str	r3, [sp]
    2274:	mov	r3, #1
    2278:	mov	r2, #0
    227c:	ldr	r0, [fp, #-64]	; 0xffffffc0
    2280:	bl	814 <verify_field>
    2284:	mov	r3, r0
    2288:	cmp	r3, #0
    228c:	beq	22bc <flatcc_verify_union_field+0x124>
    2290:	ldrh	r3, [fp, #-66]	; 0xffffffbe
    2294:	sub	r3, r3, #1
    2298:	uxth	r1, r3
    229c:	mov	r3, #1
    22a0:	str	r3, [sp]
    22a4:	mov	r3, #1
    22a8:	mov	r2, #0
    22ac:	ldr	r0, [fp, #-64]	; 0xffffffc0
    22b0:	bl	814 <verify_field>
    22b4:	mov	r3, r0
    22b8:	b	23f0 <flatcc_verify_union_field+0x258>
    22bc:	ldrh	r3, [fp, #-66]	; 0xffffffbe
    22c0:	mov	r1, r3
    22c4:	ldr	r0, [fp, #-64]	; 0xffffffc0
    22c8:	bl	720 <read_vt_entry>
    22cc:	mov	r3, r0
    22d0:	strh	r3, [fp, #-8]
    22d4:	ldr	r3, [fp, #-64]	; 0xffffffc0
    22d8:	ldr	r2, [r3]
    22dc:	ldr	r3, [fp, #-64]	; 0xffffffc0
    22e0:	ldr	r1, [r3, #16]
    22e4:	ldrh	r3, [fp, #-6]
    22e8:	add	r3, r1, r3
    22ec:	add	r3, r2, r3
    22f0:	str	r3, [fp, #-20]	; 0xffffffec
    22f4:	ldr	r3, [fp, #-20]	; 0xffffffec
    22f8:	ldrb	r3, [r3]
    22fc:	cmp	r3, #0
    2300:	bne	2310 <flatcc_verify_union_field+0x178>
    2304:	ldrh	r3, [fp, #-8]
    2308:	cmp	r3, #0
    230c:	bne	2318 <flatcc_verify_union_field+0x180>
    2310:	mov	r3, #1
    2314:	b	231c <flatcc_verify_union_field+0x184>
    2318:	mov	r3, #0
    231c:	str	r3, [fp, #-24]	; 0xffffffe8
    2320:	ldr	r3, [fp, #-24]	; 0xffffffe8
    2324:	cmp	r3, #0
    2328:	bne	2334 <flatcc_verify_union_field+0x19c>
    232c:	mov	r3, #24
    2330:	b	23f0 <flatcc_verify_union_field+0x258>
    2334:	ldr	r3, [fp, #-20]	; 0xffffffec
    2338:	ldrb	r3, [r3]
    233c:	cmp	r3, #0
    2340:	bne	234c <flatcc_verify_union_field+0x1b4>
    2344:	mov	r3, #0
    2348:	b	23f0 <flatcc_verify_union_field+0x258>
    234c:	sub	r3, fp, #32
    2350:	ldrh	r1, [fp, #-66]	; 0xffffffbe
    2354:	ldr	r2, [fp, #-72]	; 0xffffffb8
    2358:	ldr	r0, [fp, #-64]	; 0xffffffc0
    235c:	bl	978 <get_offset_field>
    2360:	str	r0, [fp, #-28]	; 0xffffffe4
    2364:	ldr	r3, [fp, #-28]	; 0xffffffe4
    2368:	cmp	r3, #0
    236c:	bne	237c <flatcc_verify_union_field+0x1e4>
    2370:	ldr	r3, [fp, #-32]	; 0xffffffe0
    2374:	cmp	r3, #0
    2378:	bne	2384 <flatcc_verify_union_field+0x1ec>
    237c:	ldr	r3, [fp, #-28]	; 0xffffffe4
    2380:	b	23f0 <flatcc_verify_union_field+0x258>
    2384:	ldr	r3, [fp, #-64]	; 0xffffffc0
    2388:	ldr	r3, [r3]
    238c:	str	r3, [fp, #-56]	; 0xffffffc8
    2390:	ldr	r3, [fp, #-64]	; 0xffffffc0
    2394:	ldr	r3, [r3, #4]
    2398:	str	r3, [fp, #-52]	; 0xffffffcc
    239c:	ldr	r3, [fp, #-64]	; 0xffffffc0
    23a0:	ldr	r3, [r3, #8]
    23a4:	str	r3, [fp, #-48]	; 0xffffffd0
    23a8:	ldr	r3, [fp, #-32]	; 0xffffffe0
    23ac:	str	r3, [fp, #-40]	; 0xffffffd8
    23b0:	ldr	r3, [fp, #-64]	; 0xffffffc0
    23b4:	ldr	r3, [r3]
    23b8:	ldr	r2, [fp, #-32]	; 0xffffffe0
    23bc:	mov	r1, r2
    23c0:	mov	r0, r3
    23c4:	bl	3d0 <read_uoffset>
    23c8:	mov	r3, r0
    23cc:	str	r3, [fp, #-36]	; 0xffffffdc
    23d0:	ldr	r3, [fp, #-20]	; 0xffffffec
    23d4:	ldrb	r3, [r3]
    23d8:	strb	r3, [fp, #-44]	; 0xffffffd4
    23dc:	sub	r2, fp, #56	; 0x38
    23e0:	ldr	r3, [fp, #-76]	; 0xffffffb4
    23e4:	mov	r0, r2
    23e8:	blx	r3
    23ec:	mov	r3, r0
    23f0:	mov	r0, r3
    23f4:	sub	sp, fp, #4
    23f8:	ldr	fp, [sp]
    23fc:	add	sp, sp, #4
    2400:	pop	{pc}		; (ldr pc, [sp], #4)

00002404 <flatcc_verify_union_vector_field>:
    2404:	strd	r4, [sp, #-20]!	; 0xffffffec
    2408:	str	r6, [sp, #8]
    240c:	str	fp, [sp, #12]
    2410:	str	lr, [sp, #16]
    2414:	add	fp, sp, #16
    2418:	sub	sp, sp, #68	; 0x44
    241c:	str	r0, [fp, #-56]	; 0xffffffc8
    2420:	str	r2, [fp, #-64]	; 0xffffffc0
    2424:	str	r3, [fp, #-68]	; 0xffffffbc
    2428:	mov	r3, r1
    242c:	strh	r3, [fp, #-58]	; 0xffffffc6
    2430:	ldrh	r3, [fp, #-58]	; 0xffffffc6
    2434:	sub	r3, r3, #1
    2438:	uxth	r3, r3
    243c:	mov	r1, r3
    2440:	ldr	r0, [fp, #-56]	; 0xffffffc8
    2444:	bl	720 <read_vt_entry>
    2448:	mov	r3, r0
    244c:	strh	r3, [fp, #-22]	; 0xffffffea
    2450:	ldrh	r3, [fp, #-22]	; 0xffffffea
    2454:	cmp	r3, #0
    2458:	bne	24ac <flatcc_verify_union_vector_field+0xa8>
    245c:	ldrh	r3, [fp, #-58]	; 0xffffffc6
    2460:	mov	r1, r3
    2464:	ldr	r0, [fp, #-56]	; 0xffffffc8
    2468:	bl	720 <read_vt_entry>
    246c:	mov	r3, r0
    2470:	strh	r3, [fp, #-24]	; 0xffffffe8
    2474:	ldrh	r3, [fp, #-24]	; 0xffffffe8
    2478:	cmp	r3, #0
    247c:	bne	24ac <flatcc_verify_union_vector_field+0xa8>
    2480:	ldr	r3, [fp, #-64]	; 0xffffffc0
    2484:	cmp	r3, #0
    2488:	moveq	r3, #1
    248c:	movne	r3, #0
    2490:	uxtb	r3, r3
    2494:	str	r3, [fp, #-28]	; 0xffffffe4
    2498:	ldr	r3, [fp, #-28]	; 0xffffffe4
    249c:	cmp	r3, #0
    24a0:	bne	24ac <flatcc_verify_union_vector_field+0xa8>
    24a4:	mov	r3, #22
    24a8:	b	262c <flatcc_verify_union_vector_field+0x228>
    24ac:	ldrh	r3, [fp, #-58]	; 0xffffffc6
    24b0:	sub	r3, r3, #1
    24b4:	uxth	r1, r3
    24b8:	mvn	r3, #0
    24bc:	str	r3, [sp, #4]
    24c0:	mov	r3, #1
    24c4:	str	r3, [sp]
    24c8:	mov	r3, #1
    24cc:	ldr	r2, [fp, #-64]	; 0xffffffc0
    24d0:	ldr	r0, [fp, #-56]	; 0xffffffc8
    24d4:	bl	15ec <flatcc_verify_vector_field>
    24d8:	mov	r3, r0
    24dc:	cmp	r3, #0
    24e0:	beq	2518 <flatcc_verify_union_vector_field+0x114>
    24e4:	ldrh	r3, [fp, #-58]	; 0xffffffc6
    24e8:	sub	r3, r3, #1
    24ec:	uxth	r1, r3
    24f0:	mvn	r3, #0
    24f4:	str	r3, [sp, #4]
    24f8:	mov	r3, #1
    24fc:	str	r3, [sp]
    2500:	mov	r3, #1
    2504:	ldr	r2, [fp, #-64]	; 0xffffffc0
    2508:	ldr	r0, [fp, #-56]	; 0xffffffc8
    250c:	bl	15ec <flatcc_verify_vector_field>
    2510:	mov	r3, r0
    2514:	b	262c <flatcc_verify_union_vector_field+0x228>
    2518:	ldrh	r3, [fp, #-58]	; 0xffffffc6
    251c:	sub	r3, r3, #1
    2520:	uxth	r3, r3
    2524:	mov	r1, r3
    2528:	ldr	r0, [fp, #-56]	; 0xffffffc8
    252c:	bl	79c <get_field_ptr>
    2530:	str	r0, [fp, #-32]	; 0xffffffe0
    2534:	ldr	r3, [fp, #-32]	; 0xffffffe0
    2538:	cmp	r3, #0
    253c:	bne	2548 <flatcc_verify_union_vector_field+0x144>
    2540:	mov	r3, #0
    2544:	b	262c <flatcc_verify_union_vector_field+0x228>
    2548:	mov	r1, #0
    254c:	ldr	r0, [fp, #-32]	; 0xffffffe0
    2550:	bl	3d0 <read_uoffset>
    2554:	mov	r2, r0
    2558:	ldr	r3, [fp, #-32]	; 0xffffffe0
    255c:	add	r3, r2, r3
    2560:	str	r3, [fp, #-32]	; 0xffffffe0
    2564:	mov	r1, #0
    2568:	ldr	r0, [fp, #-32]	; 0xffffffe0
    256c:	bl	3d0 <read_uoffset>
    2570:	str	r0, [fp, #-36]	; 0xffffffdc
    2574:	ldr	r3, [fp, #-32]	; 0xffffffe0
    2578:	add	r3, r3, #4
    257c:	str	r3, [fp, #-32]	; 0xffffffe0
    2580:	ldr	r3, [fp, #-32]	; 0xffffffe0
    2584:	str	r3, [fp, #-40]	; 0xffffffd8
    2588:	sub	r3, fp, #48	; 0x30
    258c:	ldrh	r1, [fp, #-58]	; 0xffffffc6
    2590:	ldr	r2, [fp, #-64]	; 0xffffffc0
    2594:	ldr	r0, [fp, #-56]	; 0xffffffc8
    2598:	bl	978 <get_offset_field>
    259c:	str	r0, [fp, #-44]	; 0xffffffd4
    25a0:	ldr	r3, [fp, #-44]	; 0xffffffd4
    25a4:	cmp	r3, #0
    25a8:	bne	25b8 <flatcc_verify_union_vector_field+0x1b4>
    25ac:	ldr	r3, [fp, #-48]	; 0xffffffd0
    25b0:	cmp	r3, #0
    25b4:	bne	25c0 <flatcc_verify_union_vector_field+0x1bc>
    25b8:	ldr	r3, [fp, #-44]	; 0xffffffd4
    25bc:	b	262c <flatcc_verify_union_vector_field+0x228>
    25c0:	ldr	r3, [fp, #-56]	; 0xffffffc8
    25c4:	ldr	r4, [r3]
    25c8:	ldr	r3, [fp, #-56]	; 0xffffffc8
    25cc:	ldr	r5, [r3, #4]
    25d0:	ldr	r6, [fp, #-48]	; 0xffffffd0
    25d4:	ldr	r3, [fp, #-56]	; 0xffffffc8
    25d8:	ldr	r3, [r3]
    25dc:	ldr	r2, [fp, #-48]	; 0xffffffd0
    25e0:	mov	r1, r2
    25e4:	mov	r0, r3
    25e8:	bl	3d0 <read_uoffset>
    25ec:	mov	r1, r0
    25f0:	ldr	r3, [fp, #-56]	; 0xffffffc8
    25f4:	ldr	r3, [r3, #8]
    25f8:	ldr	r2, [fp, #-68]	; 0xffffffbc
    25fc:	str	r2, [sp, #12]
    2600:	str	r3, [sp, #8]
    2604:	ldr	r3, [fp, #-40]	; 0xffffffd8
    2608:	str	r3, [sp, #4]
    260c:	ldr	r3, [fp, #-36]	; 0xffffffdc
    2610:	str	r3, [sp]
    2614:	mov	r3, r1
    2618:	mov	r2, r6
    261c:	mov	r1, r5
    2620:	mov	r0, r4
    2624:	bl	1238 <verify_union_vector>
    2628:	mov	r3, r0
    262c:	mov	r0, r3
    2630:	sub	sp, fp, #16
    2634:	ldrd	r4, [sp]
    2638:	ldr	r6, [sp, #8]
    263c:	ldr	fp, [sp, #12]
    2640:	add	sp, sp, #16
    2644:	pop	{pc}		; (ldr pc, [sp], #4)
