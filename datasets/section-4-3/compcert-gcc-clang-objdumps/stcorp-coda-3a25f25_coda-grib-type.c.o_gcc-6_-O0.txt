
../compcert-repos/stcorp-coda-3a25f25/CMakeFiles/coda_static.dir/libcoda/coda-grib-type.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <fpow>:
   0:	push	{fp}		; (str fp, [sp, #-4]!)
   4:	add	fp, sp, #0
   8:	sub	sp, sp, #20
   c:	str	r0, [fp, #-16]
  10:	str	r1, [fp, #-20]	; 0xffffffec
  14:	mov	r2, #0
  18:	ldr	r3, [pc, #160]	; c0 <fpow+0xc0>
  1c:	strd	r2, [fp, #-12]
  20:	ldr	r3, [fp, #-20]	; 0xffffffec
  24:	cmp	r3, #0
  28:	bge	90 <fpow+0x90>
  2c:	ldr	r3, [fp, #-20]	; 0xffffffec
  30:	rsb	r3, r3, #0
  34:	str	r3, [fp, #-20]	; 0xffffffec
  38:	b	54 <fpow+0x54>
  3c:	ldr	r3, [fp, #-16]
  40:	vmov	s15, r3
  44:	vcvt.f64.s32	d7, s15
  48:	vldr	d6, [fp, #-12]
  4c:	vmul.f64	d7, d6, d7
  50:	vstr	d7, [fp, #-12]
  54:	ldr	r3, [fp, #-20]	; 0xffffffec
  58:	sub	r2, r3, #1
  5c:	str	r2, [fp, #-20]	; 0xffffffec
  60:	cmp	r3, #0
  64:	bne	3c <fpow+0x3c>
  68:	vldr	d5, [pc, #72]	; b8 <fpow+0xb8>
  6c:	vldr	d6, [fp, #-12]
  70:	vdiv.f64	d7, d5, d6
  74:	b	a8 <fpow+0xa8>
  78:	ldr	r3, [fp, #-16]
  7c:	vmov	s15, r3
  80:	vcvt.f64.s32	d7, s15
  84:	vldr	d6, [fp, #-12]
  88:	vmul.f64	d7, d6, d7
  8c:	vstr	d7, [fp, #-12]
  90:	ldr	r3, [fp, #-20]	; 0xffffffec
  94:	sub	r2, r3, #1
  98:	str	r2, [fp, #-20]	; 0xffffffec
  9c:	cmp	r3, #0
  a0:	bne	78 <fpow+0x78>
  a4:	vldr	d7, [fp, #-12]
  a8:	vmov.f64	d0, d7
  ac:	add	sp, fp, #0
  b0:	pop	{fp}		; (ldr fp, [sp], #4)
  b4:	bx	lr
  b8:	.word	0x00000000
  bc:	.word	0x3ff00000
  c0:	.word	0x3ff00000

000000c4 <coda_grib_type_delete>:
  c4:	push	{fp, lr}
  c8:	add	fp, sp, #4
  cc:	sub	sp, sp, #8
  d0:	str	r0, [fp, #-8]
  d4:	ldr	r3, [fp, #-8]
  d8:	cmp	r3, #0
  dc:	bne	f4 <coda_grib_type_delete+0x30>
  e0:	ldr	r3, [pc, #216]	; 1c0 <coda_grib_type_delete+0xfc>
  e4:	mov	r2, #61	; 0x3d
  e8:	ldr	r1, [pc, #212]	; 1c4 <coda_grib_type_delete+0x100>
  ec:	ldr	r0, [pc, #212]	; 1c8 <coda_grib_type_delete+0x104>
  f0:	bl	0 <__assert_fail>
  f4:	ldr	r3, [fp, #-8]
  f8:	ldr	r3, [r3]
  fc:	cmp	r3, #105	; 0x69
 100:	beq	118 <coda_grib_type_delete+0x54>
 104:	ldr	r3, [pc, #180]	; 1c0 <coda_grib_type_delete+0xfc>
 108:	mov	r2, #62	; 0x3e
 10c:	ldr	r1, [pc, #176]	; 1c4 <coda_grib_type_delete+0x100>
 110:	ldr	r0, [pc, #180]	; 1cc <coda_grib_type_delete+0x108>
 114:	bl	0 <__assert_fail>
 118:	ldr	r3, [fp, #-8]
 11c:	ldr	r3, [r3, #4]
 120:	ldr	r3, [r3, #8]
 124:	cmp	r3, #1
 128:	bne	18c <coda_grib_type_delete+0xc8>
 12c:	ldr	r3, [fp, #-8]
 130:	ldr	r3, [r3, #12]
 134:	cmp	r3, #0
 138:	beq	14c <coda_grib_type_delete+0x88>
 13c:	ldr	r3, [fp, #-8]
 140:	ldr	r3, [r3, #12]
 144:	mov	r0, r3
 148:	bl	0 <coda_dynamic_type_delete>
 14c:	ldr	r3, [fp, #-8]
 150:	ldr	r3, [r3, #56]	; 0x38
 154:	cmp	r3, #0
 158:	beq	16c <coda_grib_type_delete+0xa8>
 15c:	ldr	r3, [fp, #-8]
 160:	ldr	r3, [r3, #56]	; 0x38
 164:	mov	r0, r3
 168:	bl	0 <free>
 16c:	ldr	r3, [fp, #-8]
 170:	ldr	r3, [r3, #60]	; 0x3c
 174:	cmp	r3, #0
 178:	beq	18c <coda_grib_type_delete+0xc8>
 17c:	ldr	r3, [fp, #-8]
 180:	ldr	r3, [r3, #60]	; 0x3c
 184:	mov	r0, r3
 188:	bl	0 <free>
 18c:	ldr	r3, [fp, #-8]
 190:	ldr	r3, [r3, #4]
 194:	cmp	r3, #0
 198:	beq	1ac <coda_grib_type_delete+0xe8>
 19c:	ldr	r3, [fp, #-8]
 1a0:	ldr	r3, [r3, #4]
 1a4:	mov	r0, r3
 1a8:	bl	0 <coda_type_release>
 1ac:	ldr	r0, [fp, #-8]
 1b0:	bl	0 <free>
 1b4:	nop			; (mov r0, r0)
 1b8:	sub	sp, fp, #4
 1bc:	pop	{fp, pc}
 1c0:	.word	0x00000120
 1c4:	.word	0x00000000
 1c8:	.word	0x00000050
 1cc:	.word	0x00000060

000001d0 <coda_grib_value_array_new>:
 1d0:	push	{r4, r5, fp, lr}
 1d4:	add	fp, sp, #12
 1d8:	sub	sp, sp, #32
 1dc:	str	r0, [fp, #-24]	; 0xffffffe8
 1e0:	str	r1, [fp, #-28]	; 0xffffffe4
 1e4:	strd	r2, [fp, #-36]	; 0xffffffdc
 1e8:	ldr	r3, [fp, #-24]	; 0xffffffe8
 1ec:	cmp	r3, #0
 1f0:	bne	210 <coda_grib_value_array_new+0x40>
 1f4:	mov	r3, #92	; 0x5c
 1f8:	ldr	r2, [pc, #512]	; 400 <coda_grib_value_array_new+0x230>
 1fc:	ldr	r1, [pc, #512]	; 404 <coda_grib_value_array_new+0x234>
 200:	mvn	r0, #99	; 0x63
 204:	bl	0 <coda_set_error>
 208:	mov	r3, #0
 20c:	b	3f4 <coda_grib_value_array_new+0x224>
 210:	ldr	r3, [fp, #-24]	; 0xffffffe8
 214:	ldr	r3, [r3, #40]	; 0x28
 218:	ldr	r3, [r3, #8]
 21c:	cmp	r3, #3
 220:	beq	254 <coda_grib_value_array_new+0x84>
 224:	ldr	r3, [fp, #-24]	; 0xffffffe8
 228:	ldr	r3, [r3, #40]	; 0x28
 22c:	ldr	r3, [r3, #8]
 230:	mov	r0, r3
 234:	bl	0 <coda_type_get_class_name>
 238:	mov	r3, r0
 23c:	mov	r2, r3
 240:	ldr	r1, [pc, #448]	; 408 <coda_grib_value_array_new+0x238>
 244:	ldr	r0, [pc, #448]	; 40c <coda_grib_value_array_new+0x23c>
 248:	bl	0 <coda_set_error>
 24c:	mov	r3, #0
 250:	b	3f4 <coda_grib_value_array_new+0x224>
 254:	mov	r0, #64	; 0x40
 258:	bl	0 <malloc>
 25c:	mov	r3, r0
 260:	str	r3, [fp, #-16]
 264:	ldr	r3, [fp, #-16]
 268:	cmp	r3, #0
 26c:	bne	294 <coda_grib_value_array_new+0xc4>
 270:	mov	r3, #106	; 0x6a
 274:	str	r3, [sp]
 278:	ldr	r3, [pc, #384]	; 400 <coda_grib_value_array_new+0x230>
 27c:	mov	r2, #64	; 0x40
 280:	ldr	r1, [pc, #392]	; 410 <coda_grib_value_array_new+0x240>
 284:	mvn	r0, #0
 288:	bl	0 <coda_set_error>
 28c:	mov	r3, #0
 290:	b	3f4 <coda_grib_value_array_new+0x224>
 294:	ldr	r3, [fp, #-16]
 298:	mov	r2, #105	; 0x69
 29c:	str	r2, [r3]
 2a0:	ldr	r3, [fp, #-16]
 2a4:	ldr	r2, [fp, #-24]	; 0xffffffe8
 2a8:	str	r2, [r3, #4]
 2ac:	ldr	r3, [fp, #-24]	; 0xffffffe8
 2b0:	ldr	r3, [r3, #4]
 2b4:	add	r2, r3, #1
 2b8:	ldr	r3, [fp, #-24]	; 0xffffffe8
 2bc:	str	r2, [r3, #4]
 2c0:	ldr	r3, [fp, #-16]
 2c4:	ldr	r2, [fp, #-28]	; 0xffffffe4
 2c8:	str	r2, [r3, #8]
 2cc:	ldr	r3, [fp, #-16]
 2d0:	mov	r2, #0
 2d4:	str	r2, [r3, #12]
 2d8:	ldrd	r2, [fp, #-36]	; 0xffffffdc
 2dc:	lsl	r5, r3, #3
 2e0:	orr	r5, r5, r2, lsr #29
 2e4:	lsl	r4, r2, #3
 2e8:	ldr	r3, [fp, #-16]
 2ec:	strd	r4, [r3, #16]
 2f0:	ldr	r3, [fp, #-16]
 2f4:	mov	r2, #0
 2f8:	str	r2, [r3, #24]
 2fc:	ldr	r3, [fp, #-16]
 300:	mov	r2, #32
 304:	str	r2, [r3, #28]
 308:	ldr	r3, [fp, #-16]
 30c:	mov	r2, #0
 310:	strh	r2, [r3, #32]
 314:	ldr	r3, [fp, #-16]
 318:	mov	r2, #0
 31c:	strh	r2, [r3, #34]	; 0x22
 320:	ldr	r3, [fp, #-16]
 324:	mov	r2, #0
 328:	str	r2, [r3, #36]	; 0x24
 32c:	ldr	r1, [fp, #-16]
 330:	mov	r2, #0
 334:	mov	r3, #0
 338:	strd	r2, [r1, #40]	; 0x28
 33c:	ldr	r1, [fp, #-16]
 340:	mov	r2, #0
 344:	mov	r3, #0
 348:	strd	r2, [r1, #48]	; 0x30
 34c:	ldr	r3, [fp, #-16]
 350:	mov	r2, #0
 354:	str	r2, [r3, #56]	; 0x38
 358:	ldr	r3, [fp, #-16]
 35c:	mov	r2, #0
 360:	str	r2, [r3, #60]	; 0x3c
 364:	mov	r0, #8
 368:	bl	0 <malloc>
 36c:	mov	r3, r0
 370:	mov	r2, r3
 374:	ldr	r3, [fp, #-16]
 378:	str	r2, [r3, #12]
 37c:	ldr	r3, [fp, #-16]
 380:	ldr	r3, [r3, #12]
 384:	cmp	r3, #0
 388:	bne	3b8 <coda_grib_value_array_new+0x1e8>
 38c:	ldr	r0, [fp, #-16]
 390:	bl	c4 <coda_grib_type_delete>
 394:	mov	r3, #130	; 0x82
 398:	str	r3, [sp]
 39c:	ldr	r3, [pc, #92]	; 400 <coda_grib_value_array_new+0x230>
 3a0:	mov	r2, #8
 3a4:	ldr	r1, [pc, #100]	; 410 <coda_grib_value_array_new+0x240>
 3a8:	mvn	r0, #0
 3ac:	bl	0 <coda_set_error>
 3b0:	mov	r3, #0
 3b4:	b	3f4 <coda_grib_value_array_new+0x224>
 3b8:	ldr	r3, [fp, #-16]
 3bc:	ldr	r3, [r3, #12]
 3c0:	mov	r2, #105	; 0x69
 3c4:	str	r2, [r3]
 3c8:	ldr	r3, [fp, #-16]
 3cc:	ldr	r3, [r3, #12]
 3d0:	ldr	r2, [fp, #-24]	; 0xffffffe8
 3d4:	ldr	r2, [r2, #40]	; 0x28
 3d8:	str	r2, [r3, #4]
 3dc:	ldr	r3, [fp, #-24]	; 0xffffffe8
 3e0:	ldr	r3, [r3, #40]	; 0x28
 3e4:	ldr	r2, [r3, #4]
 3e8:	add	r2, r2, #1
 3ec:	str	r2, [r3, #4]
 3f0:	ldr	r3, [fp, #-16]
 3f4:	mov	r0, r3
 3f8:	sub	sp, fp, #12
 3fc:	pop	{r4, r5, fp, pc}
 400:	.word	0x00000000
 404:	.word	0x00000084
 408:	.word	0x000000a8
 40c:	.word	0xfffffe70
 410:	.word	0x000000e8

00000414 <coda_grib_value_array_simple_packing_new>:
 414:	push	{fp, lr}
 418:	vpush	{d8}
 41c:	add	fp, sp, #12
 420:	sub	sp, sp, #48	; 0x30
 424:	str	r0, [fp, #-32]	; 0xffffffe0
 428:	str	r1, [fp, #-36]	; 0xffffffdc
 42c:	strd	r2, [fp, #-44]	; 0xffffffd4
 430:	vstr	s0, [fp, #-48]	; 0xffffffd0
 434:	ldrd	r2, [fp, #-44]	; 0xffffffd4
 438:	ldr	r1, [fp, #-36]	; 0xffffffdc
 43c:	ldr	r0, [fp, #-32]	; 0xffffffe0
 440:	bl	1d0 <coda_grib_value_array_new>
 444:	str	r0, [fp, #-20]	; 0xffffffec
 448:	ldr	r3, [fp, #-20]	; 0xffffffec
 44c:	cmp	r3, #0
 450:	bne	45c <coda_grib_value_array_simple_packing_new+0x48>
 454:	mov	r3, #0
 458:	b	78c <coda_grib_value_array_simple_packing_new+0x378>
 45c:	ldr	r3, [fp, #-20]	; 0xffffffec
 460:	mov	r2, #1
 464:	str	r2, [r3, #24]
 468:	ldr	r3, [fp, #-20]	; 0xffffffec
 46c:	ldr	r2, [fp, #4]
 470:	str	r2, [r3, #28]
 474:	ldr	r3, [fp, #-20]	; 0xffffffec
 478:	ldrh	r2, [fp, #8]
 47c:	strh	r2, [r3, #32]
 480:	ldr	r3, [fp, #-20]	; 0xffffffec
 484:	ldrh	r2, [fp, #12]
 488:	strh	r2, [r3, #34]	; 0x22
 48c:	ldr	r3, [fp, #-20]	; 0xffffffec
 490:	ldr	r2, [fp, #-48]	; 0xffffffd0
 494:	str	r2, [r3, #36]	; 0x24
 498:	ldrsh	r3, [fp, #12]
 49c:	mov	r1, r3
 4a0:	mov	r0, #2
 4a4:	bl	0 <fpow>
 4a8:	vmov.f64	d8, d0
 4ac:	ldrsh	r3, [fp, #8]
 4b0:	rsb	r3, r3, #0
 4b4:	mov	r1, r3
 4b8:	mov	r0, #10
 4bc:	bl	0 <fpow>
 4c0:	vmov.f64	d7, d0
 4c4:	vmul.f64	d7, d8, d7
 4c8:	ldr	r3, [fp, #-20]	; 0xffffffec
 4cc:	vstr	d7, [r3, #40]	; 0x28
 4d0:	vldr	s15, [fp, #-48]	; 0xffffffd0
 4d4:	vcvt.f64.f32	d8, s15
 4d8:	ldrsh	r3, [fp, #8]
 4dc:	rsb	r3, r3, #0
 4e0:	mov	r1, r3
 4e4:	mov	r0, #10
 4e8:	bl	0 <fpow>
 4ec:	vmov.f64	d7, d0
 4f0:	vmul.f64	d7, d8, d7
 4f4:	ldr	r3, [fp, #-20]	; 0xffffffec
 4f8:	vstr	d7, [r3, #48]	; 0x30
 4fc:	ldr	r3, [fp, #-20]	; 0xffffffec
 500:	mov	r2, #0
 504:	str	r2, [r3, #56]	; 0x38
 508:	ldr	r3, [fp, #-20]	; 0xffffffec
 50c:	mov	r2, #0
 510:	str	r2, [r3, #60]	; 0x3c
 514:	ldr	r3, [fp, #16]
 518:	cmp	r3, #0
 51c:	beq	788 <coda_grib_value_array_simple_packing_new+0x374>
 520:	ldr	r3, [fp, #-36]	; 0xffffffdc
 524:	asr	r3, r3, #3
 528:	ldr	r2, [fp, #-36]	; 0xffffffdc
 52c:	uxtb	r2, r2
 530:	and	r2, r2, #7
 534:	cmp	r2, #0
 538:	movne	r2, #1
 53c:	moveq	r2, #0
 540:	uxtb	r2, r2
 544:	add	r3, r3, r2
 548:	str	r3, [fp, #-24]	; 0xffffffe8
 54c:	ldr	r3, [fp, #-24]	; 0xffffffe8
 550:	mov	r0, r3
 554:	bl	0 <malloc>
 558:	mov	r3, r0
 55c:	mov	r2, r3
 560:	ldr	r3, [fp, #-20]	; 0xffffffec
 564:	str	r2, [r3, #56]	; 0x38
 568:	ldr	r3, [fp, #-20]	; 0xffffffec
 56c:	ldr	r3, [r3, #56]	; 0x38
 570:	cmp	r3, #0
 574:	bne	5a4 <coda_grib_value_array_simple_packing_new+0x190>
 578:	ldr	r0, [fp, #-20]	; 0xffffffec
 57c:	bl	c4 <coda_grib_type_delete>
 580:	mov	r3, #173	; 0xad
 584:	str	r3, [sp]
 588:	ldr	r3, [pc, #524]	; 79c <coda_grib_value_array_simple_packing_new+0x388>
 58c:	ldr	r2, [fp, #-24]	; 0xffffffe8
 590:	ldr	r1, [pc, #520]	; 7a0 <coda_grib_value_array_simple_packing_new+0x38c>
 594:	mvn	r0, #0
 598:	bl	0 <coda_set_error>
 59c:	mov	r3, #0
 5a0:	b	78c <coda_grib_value_array_simple_packing_new+0x378>
 5a4:	ldr	r3, [fp, #-20]	; 0xffffffec
 5a8:	ldr	r3, [r3, #56]	; 0x38
 5ac:	ldr	r2, [fp, #-24]	; 0xffffffe8
 5b0:	ldr	r1, [fp, #16]
 5b4:	mov	r0, r3
 5b8:	bl	0 <memcpy>
 5bc:	ldr	r3, [fp, #-24]	; 0xffffffe8
 5c0:	mov	r0, r3
 5c4:	bl	0 <malloc>
 5c8:	mov	r3, r0
 5cc:	mov	r2, r3
 5d0:	ldr	r3, [fp, #-20]	; 0xffffffec
 5d4:	str	r2, [r3, #60]	; 0x3c
 5d8:	ldr	r3, [fp, #-20]	; 0xffffffec
 5dc:	ldr	r3, [r3, #60]	; 0x3c
 5e0:	cmp	r3, #0
 5e4:	bne	614 <coda_grib_value_array_simple_packing_new+0x200>
 5e8:	ldr	r0, [fp, #-20]	; 0xffffffec
 5ec:	bl	c4 <coda_grib_type_delete>
 5f0:	mov	r3, #183	; 0xb7
 5f4:	str	r3, [sp]
 5f8:	ldr	r3, [pc, #412]	; 79c <coda_grib_value_array_simple_packing_new+0x388>
 5fc:	ldr	r2, [fp, #-24]	; 0xffffffe8
 600:	ldr	r1, [pc, #408]	; 7a0 <coda_grib_value_array_simple_packing_new+0x38c>
 604:	mvn	r0, #0
 608:	bl	0 <coda_set_error>
 60c:	mov	r3, #0
 610:	b	78c <coda_grib_value_array_simple_packing_new+0x378>
 614:	mov	r3, #0
 618:	str	r3, [fp, #-16]
 61c:	b	778 <coda_grib_value_array_simple_packing_new+0x364>
 620:	ldr	r3, [fp, #-20]	; 0xffffffec
 624:	ldr	r2, [r3, #56]	; 0x38
 628:	ldr	r3, [fp, #-16]
 62c:	add	r3, r2, r3
 630:	ldrb	r3, [r3]
 634:	strb	r3, [fp, #-25]	; 0xffffffe7
 638:	ldr	r3, [fp, #-20]	; 0xffffffec
 63c:	ldr	r2, [r3, #60]	; 0x3c
 640:	ldr	r3, [fp, #-16]
 644:	add	r3, r2, r3
 648:	ldrb	r2, [fp, #-25]	; 0xffffffe7
 64c:	lsr	r2, r2, #7
 650:	uxtb	r1, r2
 654:	ldrb	r2, [fp, #-25]	; 0xffffffe7
 658:	lsr	r2, r2, #6
 65c:	uxtb	r2, r2
 660:	and	r2, r2, #1
 664:	uxtb	r2, r2
 668:	add	r2, r1, r2
 66c:	uxtb	r1, r2
 670:	ldrb	r2, [fp, #-25]	; 0xffffffe7
 674:	lsr	r2, r2, #5
 678:	uxtb	r2, r2
 67c:	and	r2, r2, #1
 680:	uxtb	r2, r2
 684:	add	r2, r1, r2
 688:	uxtb	r1, r2
 68c:	ldrb	r2, [fp, #-25]	; 0xffffffe7
 690:	lsr	r2, r2, #4
 694:	uxtb	r2, r2
 698:	and	r2, r2, #1
 69c:	uxtb	r2, r2
 6a0:	add	r2, r1, r2
 6a4:	uxtb	r1, r2
 6a8:	ldrb	r2, [fp, #-25]	; 0xffffffe7
 6ac:	lsr	r2, r2, #3
 6b0:	uxtb	r2, r2
 6b4:	and	r2, r2, #1
 6b8:	uxtb	r2, r2
 6bc:	add	r2, r1, r2
 6c0:	uxtb	r1, r2
 6c4:	ldrb	r2, [fp, #-25]	; 0xffffffe7
 6c8:	lsr	r2, r2, #2
 6cc:	uxtb	r2, r2
 6d0:	and	r2, r2, #1
 6d4:	uxtb	r2, r2
 6d8:	add	r2, r1, r2
 6dc:	uxtb	r1, r2
 6e0:	ldrb	r2, [fp, #-25]	; 0xffffffe7
 6e4:	lsr	r2, r2, #1
 6e8:	uxtb	r2, r2
 6ec:	and	r2, r2, #1
 6f0:	uxtb	r2, r2
 6f4:	add	r2, r1, r2
 6f8:	uxtb	r1, r2
 6fc:	ldrb	r2, [fp, #-25]	; 0xffffffe7
 700:	and	r2, r2, #1
 704:	uxtb	r2, r2
 708:	add	r2, r1, r2
 70c:	uxtb	r2, r2
 710:	strb	r2, [r3]
 714:	ldr	r3, [fp, #-16]
 718:	and	r3, r3, #15
 71c:	cmp	r3, #0
 720:	beq	76c <coda_grib_value_array_simple_packing_new+0x358>
 724:	ldr	r3, [fp, #-20]	; 0xffffffec
 728:	ldr	r2, [r3, #60]	; 0x3c
 72c:	ldr	r3, [fp, #-16]
 730:	add	r3, r2, r3
 734:	ldr	r2, [fp, #-20]	; 0xffffffec
 738:	ldr	r1, [r2, #60]	; 0x3c
 73c:	ldr	r2, [fp, #-16]
 740:	add	r2, r1, r2
 744:	ldrb	r1, [r2]
 748:	ldr	r2, [fp, #-20]	; 0xffffffec
 74c:	ldr	r0, [r2, #60]	; 0x3c
 750:	ldr	r2, [fp, #-16]
 754:	sub	r2, r2, #1
 758:	add	r2, r0, r2
 75c:	ldrb	r2, [r2]
 760:	add	r2, r1, r2
 764:	uxtb	r2, r2
 768:	strb	r2, [r3]
 76c:	ldr	r3, [fp, #-16]
 770:	add	r3, r3, #1
 774:	str	r3, [fp, #-16]
 778:	ldr	r2, [fp, #-16]
 77c:	ldr	r3, [fp, #-24]	; 0xffffffe8
 780:	cmp	r2, r3
 784:	blt	620 <coda_grib_value_array_simple_packing_new+0x20c>
 788:	ldr	r3, [fp, #-20]	; 0xffffffec
 78c:	mov	r0, r3
 790:	sub	sp, fp, #12
 794:	vpop	{d8}
 798:	pop	{fp, pc}
 79c:	.word	0x00000000
 7a0:	.word	0x000000e8
