
../compcert-repos/stcorp-coda-3a25f25/CMakeFiles/coda_static.dir/libcoda/coda-xml-parser.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <coda_xml_parse>:
       0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
       4:	add	fp, sp, #28
       8:	sub	sp, sp, #588	; 0x24c
       c:	sub	sp, sp, #8192	; 0x2000
      10:	add	r8, sp, #32
      14:	mov	r5, r0
      18:	vmov.i32	q8, #0	; 0x00000000
      1c:	mvn	r4, #0
      20:	mov	r1, #32
      24:	add	r0, r8, #528	; 0x210
      28:	vst1.64	{d16-d17}, [r0]
      2c:	mov	r0, #0
      30:	str	r0, [sp, #40]	; 0x28
      34:	str	r0, [sp, #36]	; 0x24
      38:	str	r4, [sp, #44]	; 0x2c
      3c:	str	r0, [sp, #576]	; 0x240
      40:	mov	r0, #0
      44:	bl	0 <coda_XML_ParserCreateNS>
      48:	cmp	r0, #0
      4c:	str	r0, [sp, #32]
      50:	beq	a0 <coda_xml_parse+0xa0>
      54:	str	r5, [sp, #40]	; 0x28
      58:	mov	r6, r0
      5c:	ldr	r0, [r5, #24]
      60:	cmp	r0, #0
      64:	beq	b4 <coda_xml_parse+0xb4>
      68:	ldr	r0, [r0, #28]
      6c:	clz	r1, r0
      70:	cmp	r0, #0
      74:	lsr	r1, r1, #5
      78:	str	r1, [sp, #564]	; 0x234
      7c:	beq	bc <coda_xml_parse+0xbc>
      80:	ldr	r1, [r0, #8]
      84:	cmp	r1, #0
      88:	bne	590 <coda_xml_parse+0x590>
      8c:	mov	r1, #0
      90:	bl	0 <coda_mem_record_new>
      94:	mov	r4, r0
      98:	str	r0, [sp, #176]	; 0xb0
      9c:	b	e8 <coda_xml_parse+0xe8>
      a0:	movw	r1, #0
      a4:	mvn	r0, #13
      a8:	movt	r1, #0
      ac:	bl	0 <coda_set_error>
      b0:	b	584 <coda_xml_parse+0x584>
      b4:	mov	r0, #1
      b8:	str	r0, [sp, #564]	; 0x234
      bc:	mov	r0, #2
      c0:	bl	0 <coda_type_record_new>
      c4:	cmp	r0, #0
      c8:	beq	308 <coda_xml_parse+0x308>
      cc:	mov	r1, #0
      d0:	mov	r7, r0
      d4:	bl	0 <coda_mem_record_new>
      d8:	mov	r4, r0
      dc:	str	r0, [sp, #176]	; 0xb0
      e0:	mov	r0, r7
      e4:	bl	0 <coda_type_release>
      e8:	add	r0, r8, #144	; 0x90
      ec:	cmp	r4, #0
      f0:	beq	308 <coda_xml_parse+0x308>
      f4:	str	r0, [sp]
      f8:	mvn	r0, #0
      fc:	add	r1, sp, #32
     100:	str	r0, [sp, #304]	; 0x130
     104:	mov	r0, #0
     108:	str	r0, [sp, #432]	; 0x1b0
     10c:	str	r0, [sp, #44]	; 0x2c
     110:	add	r0, r4, #4
     114:	str	r0, [sp, #48]	; 0x30
     118:	mov	r0, r6
     11c:	bl	0 <coda_XML_SetUserData>
     120:	ldr	r0, [sp, #32]
     124:	mov	r1, #2
     128:	bl	0 <coda_XML_SetParamEntityParsing>
     12c:	ldr	r0, [sp, #32]
     130:	movw	r1, #0
     134:	movw	r2, #0
     138:	movt	r1, #0
     13c:	movt	r2, #0
     140:	bl	0 <coda_XML_SetElementHandler>
     144:	ldr	r0, [sp, #32]
     148:	movw	r1, #0
     14c:	movt	r1, #0
     150:	bl	0 <coda_XML_SetCharacterDataHandler>
     154:	ldr	r0, [sp, #32]
     158:	movw	r1, #0
     15c:	movt	r1, #0
     160:	bl	0 <coda_XML_SetNotStandaloneHandler>
     164:	ldr	r0, [r5, #52]	; 0x34
     168:	ldrd	r2, [r0, #8]
     16c:	asr	r1, r3, #31
     170:	adds	r1, r2, r1, lsr #19
     174:	adc	r7, r3, #0
     178:	lsr	r1, r1, #13
     17c:	orr	r1, r1, r7, lsl #19
     180:	lsl	r7, r1, #13
     184:	rsbs	r2, r2, r1, lsl #13
     188:	rscs	r2, r3, r7, asr #31
     18c:	mov	r2, #0
     190:	movwlt	r2, #1
     194:	add	r8, r2, r1
     198:	cmp	r8, #1
     19c:	blt	27c <coda_xml_parse+0x27c>
     1a0:	sub	r9, r8, #1
     1a4:	mov	r6, #1
     1a8:	mov	r7, #0
     1ac:	lsl	r1, r9, #13
     1b0:	str	r1, [sp, #4]
     1b4:	ldr	r1, [pc, #1012]	; 5b0 <coda_xml_parse+0x5b0>
     1b8:	ldr	sl, [pc, r1]
     1bc:	b	1cc <coda_xml_parse+0x1cc>
     1c0:	ldr	r0, [r5, #52]	; 0x34
     1c4:	add	r7, r7, #8192	; 0x2000
     1c8:	add	r6, r6, #1
     1cc:	ldr	r1, [r0, #52]	; 0x34
     1d0:	cmp	r1, #0
     1d4:	beq	1fc <coda_xml_parse+0x1fc>
     1d8:	sub	r1, r6, #1
     1dc:	mov	r2, #8192	; 0x2000
     1e0:	cmp	r1, r9
     1e4:	ldrge	r1, [r0, #8]
     1e8:	ldrge	r2, [sp, #4]
     1ec:	ldr	r0, [r0, #48]	; 0x30
     1f0:	subge	r2, r1, r2
     1f4:	add	r1, r0, r7
     1f8:	b	23c <coda_xml_parse+0x23c>
     1fc:	ldr	r0, [r0, #56]	; 0x38
     200:	mov	r1, r7
     204:	mov	r2, #0
     208:	bl	0 <lseek>
     20c:	cmn	r0, #1
     210:	ble	448 <coda_xml_parse+0x448>
     214:	ldr	r0, [r5, #52]	; 0x34
     218:	add	r4, sp, #584	; 0x248
     21c:	mov	r2, #8192	; 0x2000
     220:	mov	r1, r4
     224:	ldr	r0, [r0, #56]	; 0x38
     228:	bl	0 <read>
     22c:	mov	r2, r0
     230:	cmn	r0, #1
     234:	mov	r1, r4
     238:	ble	4f4 <coda_xml_parse+0x4f4>
     23c:	bl	0 <__aeabi_read_tp>
     240:	mov	r4, r0
     244:	mov	r0, #0
     248:	str	r0, [r4, sl]
     24c:	sub	r0, r8, r6
     250:	clz	r0, r0
     254:	lsr	r3, r0, #5
     258:	ldr	r0, [sp, #32]
     25c:	bl	0 <coda_XML_Parse>
     260:	ldr	r1, [r4, sl]
     264:	cmp	r0, #0
     268:	beq	318 <coda_xml_parse+0x318>
     26c:	cmp	r1, #0
     270:	bne	318 <coda_xml_parse+0x318>
     274:	cmp	r6, r8
     278:	blt	1c0 <coda_xml_parse+0x1c0>
     27c:	ldr	r0, [sp, #32]
     280:	bl	0 <coda_XML_ParserFree>
     284:	mov	r0, #0
     288:	str	r0, [sp, #32]
     28c:	ldr	r0, [sp, #564]	; 0x234
     290:	cmp	r0, #0
     294:	beq	3c0 <coda_xml_parse+0x3c0>
     298:	ldr	r0, [sp, #176]	; 0xb0
     29c:	ldr	r4, [sp]
     2a0:	ldr	r1, [r0, #4]
     2a4:	mov	r0, r4
     2a8:	bl	0 <coda_mem_type_update>
     2ac:	mov	r1, r0
     2b0:	ldr	r0, [sp, #32]
     2b4:	cmp	r1, #0
     2b8:	beq	3ec <coda_xml_parse+0x3ec>
     2bc:	cmp	r0, #0
     2c0:	beq	2c8 <coda_xml_parse+0x2c8>
     2c4:	bl	0 <coda_XML_ParserFree>
     2c8:	ldr	r1, [sp, #44]	; 0x2c
     2cc:	add	r5, sp, #32
     2d0:	cmp	r1, #0
     2d4:	blt	560 <coda_xml_parse+0x560>
     2d8:	mov	r4, #36	; 0x24
     2dc:	ldr	r0, [r5, r4, lsl #2]
     2e0:	cmp	r0, #0
     2e4:	beq	2f0 <coda_xml_parse+0x2f0>
     2e8:	bl	0 <coda_dynamic_type_delete>
     2ec:	ldr	r1, [sp, #44]	; 0x2c
     2f0:	sub	r2, r4, #36	; 0x24
     2f4:	add	r0, r4, #1
     2f8:	cmp	r2, r1
     2fc:	mov	r4, r0
     300:	blt	2dc <coda_xml_parse+0x2dc>
     304:	b	560 <coda_xml_parse+0x560>
     308:	mov	r0, r6
     30c:	bl	0 <coda_XML_ParserFree>
     310:	mvn	r4, #0
     314:	b	584 <coda_xml_parse+0x584>
     318:	cmp	r1, #0
     31c:	add	r5, sp, #32
     320:	bne	344 <coda_xml_parse+0x344>
     324:	ldr	r0, [sp, #32]
     328:	bl	0 <coda_XML_GetErrorCode>
     32c:	bl	0 <coda_XML_ErrorString>
     330:	movw	r1, #0
     334:	mov	r2, r0
     338:	mvn	r0, #13
     33c:	movt	r1, #0
     340:	bl	0 <coda_set_error>
     344:	ldr	r0, [sp, #32]
     348:	bl	0 <coda_XML_GetCurrentByteIndex>
     34c:	add	r4, sp, #11
     350:	mov	r2, r4
     354:	bl	0 <coda_str64>
     358:	ldr	r0, [sp, #32]
     35c:	bl	0 <coda_XML_GetCurrentLineNumber>
     360:	mov	r1, r0
     364:	movw	r0, #0
     368:	mov	r2, r4
     36c:	movt	r0, #0
     370:	bl	0 <coda_add_error_message>
     374:	ldr	r0, [sp, #32]
     378:	cmp	r0, #0
     37c:	beq	384 <coda_xml_parse+0x384>
     380:	bl	0 <coda_XML_ParserFree>
     384:	ldr	r1, [sp, #44]	; 0x2c
     388:	cmp	r1, #0
     38c:	blt	4cc <coda_xml_parse+0x4cc>
     390:	mov	r4, #36	; 0x24
     394:	ldr	r0, [r5, r4, lsl #2]
     398:	cmp	r0, #0
     39c:	beq	3a8 <coda_xml_parse+0x3a8>
     3a0:	bl	0 <coda_dynamic_type_delete>
     3a4:	ldr	r1, [sp, #44]	; 0x2c
     3a8:	sub	r2, r4, #36	; 0x24
     3ac:	add	r0, r4, #1
     3b0:	cmp	r2, r1
     3b4:	mov	r4, r0
     3b8:	blt	394 <coda_xml_parse+0x394>
     3bc:	b	4cc <coda_xml_parse+0x4cc>
     3c0:	ldr	r0, [sp]
     3c4:	ldr	r0, [r0]
     3c8:	str	r0, [r5, #20]
     3cc:	mvn	r0, #0
     3d0:	str	r0, [sp, #44]	; 0x2c
     3d4:	ldr	r0, [sp, #560]	; 0x230
     3d8:	cmp	r0, #0
     3dc:	beq	3e4 <coda_xml_parse+0x3e4>
     3e0:	bl	0 <coda_dynamic_type_delete>
     3e4:	mov	r4, #0
     3e8:	b	574 <coda_xml_parse+0x574>
     3ec:	ldr	r1, [r4]
     3f0:	cmp	r0, #0
     3f4:	str	r1, [r5, #20]
     3f8:	mvn	r1, #0
     3fc:	add	r5, sp, #32
     400:	str	r1, [sp, #44]	; 0x2c
     404:	beq	3d4 <coda_xml_parse+0x3d4>
     408:	bl	0 <coda_XML_ParserFree>
     40c:	ldr	r1, [sp, #44]	; 0x2c
     410:	cmp	r1, #0
     414:	blt	3d4 <coda_xml_parse+0x3d4>
     418:	mov	r4, #36	; 0x24
     41c:	ldr	r0, [r5, r4, lsl #2]
     420:	cmp	r0, #0
     424:	beq	430 <coda_xml_parse+0x430>
     428:	bl	0 <coda_dynamic_type_delete>
     42c:	ldr	r1, [sp, #44]	; 0x2c
     430:	sub	r2, r4, #36	; 0x24
     434:	add	r0, r4, #1
     438:	cmp	r2, r1
     43c:	mov	r4, r0
     440:	blt	41c <coda_xml_parse+0x41c>
     444:	b	3d4 <coda_xml_parse+0x3d4>
     448:	add	r5, sp, #11
     44c:	mov	r0, r7
     450:	mov	r1, #0
     454:	mov	r2, r5
     458:	bl	0 <coda_str64>
     45c:	bl	0 <__errno_location>
     460:	ldr	r0, [r0]
     464:	bl	0 <strerror>
     468:	movw	r1, #0
     46c:	mov	r3, r0
     470:	mvn	r0, #21
     474:	mov	r2, r5
     478:	movt	r1, #0
     47c:	bl	0 <coda_set_error>
     480:	ldr	r0, [sp, #32]
     484:	cmp	r0, #0
     488:	beq	490 <coda_xml_parse+0x490>
     48c:	bl	0 <coda_XML_ParserFree>
     490:	ldr	r1, [sp, #44]	; 0x2c
     494:	add	r5, sp, #32
     498:	cmp	r1, #0
     49c:	blt	4cc <coda_xml_parse+0x4cc>
     4a0:	mov	r4, #36	; 0x24
     4a4:	ldr	r0, [r5, r4, lsl #2]
     4a8:	cmp	r0, #0
     4ac:	beq	4b8 <coda_xml_parse+0x4b8>
     4b0:	bl	0 <coda_dynamic_type_delete>
     4b4:	ldr	r1, [sp, #44]	; 0x2c
     4b8:	sub	r2, r4, #36	; 0x24
     4bc:	add	r0, r4, #1
     4c0:	cmp	r2, r1
     4c4:	mov	r4, r0
     4c8:	blt	4a4 <coda_xml_parse+0x4a4>
     4cc:	ldr	r0, [sp, #560]	; 0x230
     4d0:	cmp	r0, #0
     4d4:	beq	4dc <coda_xml_parse+0x4dc>
     4d8:	bl	0 <coda_dynamic_type_delete>
     4dc:	ldr	r0, [sp, #576]	; 0x240
     4e0:	cmp	r0, #0
     4e4:	beq	4ec <coda_xml_parse+0x4ec>
     4e8:	bl	0 <free>
     4ec:	mvn	r4, #0
     4f0:	b	584 <coda_xml_parse+0x584>
     4f4:	bl	0 <__errno_location>
     4f8:	ldr	r0, [r0]
     4fc:	bl	0 <strerror>
     500:	movw	r1, #0
     504:	mov	r2, r0
     508:	mvn	r0, #21
     50c:	movt	r1, #0
     510:	bl	0 <coda_set_error>
     514:	ldr	r0, [sp, #32]
     518:	cmp	r0, #0
     51c:	beq	524 <coda_xml_parse+0x524>
     520:	bl	0 <coda_XML_ParserFree>
     524:	ldr	r1, [sp, #44]	; 0x2c
     528:	add	r5, sp, #32
     52c:	cmp	r1, #0
     530:	blt	560 <coda_xml_parse+0x560>
     534:	mov	r4, #36	; 0x24
     538:	ldr	r0, [r5, r4, lsl #2]
     53c:	cmp	r0, #0
     540:	beq	54c <coda_xml_parse+0x54c>
     544:	bl	0 <coda_dynamic_type_delete>
     548:	ldr	r1, [sp, #44]	; 0x2c
     54c:	sub	r2, r4, #36	; 0x24
     550:	add	r0, r4, #1
     554:	cmp	r2, r1
     558:	mov	r4, r0
     55c:	blt	538 <coda_xml_parse+0x538>
     560:	ldr	r0, [sp, #560]	; 0x230
     564:	cmp	r0, #0
     568:	beq	570 <coda_xml_parse+0x570>
     56c:	bl	0 <coda_dynamic_type_delete>
     570:	mvn	r4, #0
     574:	ldr	r0, [sp, #576]	; 0x240
     578:	cmp	r0, #0
     57c:	beq	584 <coda_xml_parse+0x584>
     580:	bl	0 <free>
     584:	mov	r0, r4
     588:	sub	sp, fp, #28
     58c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
     590:	movw	r0, #0
     594:	movw	r1, #0
     598:	movw	r3, #0
     59c:	movw	r2, #774	; 0x306
     5a0:	movt	r0, #0
     5a4:	movt	r1, #0
     5a8:	movt	r3, #0
     5ac:	bl	0 <__assert_fail>
     5b0:	.word	0x000003f0

000005b4 <start_element_handler>:
     5b4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
     5b8:	add	fp, sp, #28
     5bc:	sub	sp, sp, #20
     5c0:	mov	r5, r2
     5c4:	ldr	r2, [r0, #12]
     5c8:	add	r7, r0, #144	; 0x90
     5cc:	mov	r6, r1
     5d0:	mov	r4, r0
     5d4:	ldr	r1, [r7, r2, lsl #2]
     5d8:	cmp	r1, #0
     5dc:	beq	628 <start_element_handler+0x74>
     5e0:	mov	r8, r1
     5e4:	ldr	r0, [r8, #4]!
     5e8:	ldr	r0, [r0]
     5ec:	cmp	r0, #2
     5f0:	bne	648 <start_element_handler+0x94>
     5f4:	mov	r0, #0
     5f8:	add	r3, r2, #1
     5fc:	cmp	r2, #31
     600:	str	r0, [r4, #536]	; 0x218
     604:	str	r3, [r4, #12]
     608:	blt	674 <start_element_handler+0xc0>
     60c:	movw	r0, #65236	; 0xfed4
     610:	movw	r1, #0
     614:	mov	r2, #32
     618:	movt	r0, #65535	; 0xffff
     61c:	movt	r1, #0
     620:	bl	0 <coda_set_error>
     624:	b	704 <start_element_handler+0x150>
     628:	add	r0, r4, r2, lsl #2
     62c:	movw	r1, #0
     630:	ldr	r2, [r0, #400]	; 0x190
     634:	movw	r0, #65236	; 0xfed4
     638:	movt	r1, #0
     63c:	movt	r0, #65535	; 0xffff
     640:	bl	0 <coda_set_error>
     644:	b	704 <start_element_handler+0x150>
     648:	add	r1, r4, r2, lsl #2
     64c:	ldr	r5, [r1, #400]	; 0x190
     650:	bl	0 <coda_type_get_format_name>
     654:	movw	r1, #0
     658:	mov	r3, r0
     65c:	movw	r0, #65236	; 0xfed4
     660:	mov	r2, r5
     664:	movt	r0, #65535	; 0xffff
     668:	movt	r1, #0
     66c:	bl	0 <coda_set_error>
     670:	b	704 <start_element_handler+0x150>
     674:	str	r0, [r7, r3, lsl #2]
     678:	str	r1, [sp, #16]
     67c:	ldr	r0, [r1, #4]
     680:	mov	r1, r6
     684:	ldr	r0, [r0, #44]	; 0x2c
     688:	bl	0 <coda_hashtable_get_index_from_name>
     68c:	cmn	r0, #1
     690:	bgt	6b8 <start_element_handler+0x104>
     694:	ldr	r0, [r8]
     698:	ldr	r9, [r0, #44]	; 0x2c
     69c:	mov	r0, r6
     6a0:	bl	0 <coda_element_name_from_xml_name>
     6a4:	mov	r1, r0
     6a8:	mov	r0, r9
     6ac:	bl	0 <coda_hashtable_get_index_from_name>
     6b0:	cmn	r0, #1
     6b4:	ble	7f0 <start_element_handler+0x23c>
     6b8:	mov	r9, r0
     6bc:	str	r7, [sp, #8]
     6c0:	str	r6, [sp, #12]
     6c4:	ldr	r0, [r4, #12]
     6c8:	add	sl, r4, #16
     6cc:	add	r6, r4, #400	; 0x190
     6d0:	add	r1, r4, r0, lsl #2
     6d4:	add	r2, r6, r0, lsl #2
     6d8:	str	r9, [r1, #272]	; 0x110
     6dc:	ldr	r1, [r8]
     6e0:	ldr	r1, [r1, #52]	; 0x34
     6e4:	ldr	r1, [r1, r9, lsl #2]
     6e8:	add	r1, r1, #8
     6ec:	str	r1, [sl, r0, lsl #2]
     6f0:	mov	r1, r9
     6f4:	ldr	r0, [r8]
     6f8:	bl	0 <coda_type_get_record_field_real_name>
     6fc:	cmp	r0, #0
     700:	beq	720 <start_element_handler+0x16c>
     704:	ldr	r0, [r4]
     708:	mov	r1, #0
     70c:	bl	0 <coda_XML_StopParser>
     710:	mov	r0, #1
     714:	str	r0, [r4, #4]
     718:	sub	sp, fp, #28
     71c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
     720:	ldr	r1, [r4, #12]
     724:	mov	r0, sl
     728:	ldr	r2, [r0, r1, lsl #2]!
     72c:	ldr	r8, [r2]
     730:	ldr	r2, [r8, #8]
     734:	cmp	r2, #1
     738:	bne	7a0 <start_element_handler+0x1ec>
     73c:	ldr	r1, [r8]
     740:	cmp	r1, #2
     744:	bne	968 <start_element_handler+0x3b4>
     748:	ldr	r1, [sp, #16]
     74c:	ldr	r1, [r1, #20]
     750:	ldr	r1, [r1, r9, lsl #2]
     754:	cmp	r1, #0
     758:	bne	790 <start_element_handler+0x1dc>
     75c:	mov	r0, r8
     760:	mov	r1, #0
     764:	bl	0 <coda_mem_array_new>
     768:	ldr	r1, [sp, #16]
     76c:	ldr	r1, [r1, #20]
     770:	str	r0, [r1, r9, lsl #2]
     774:	ldr	r0, [sp, #16]
     778:	ldr	r0, [r0, #20]
     77c:	ldr	r0, [r0, r9, lsl #2]
     780:	cmp	r0, #0
     784:	beq	704 <start_element_handler+0x150>
     788:	ldr	r0, [r4, #12]
     78c:	add	r0, sl, r0, lsl #2
     790:	add	r1, r8, #40	; 0x28
     794:	str	r1, [r0]
     798:	ldr	r8, [r8, #40]	; 0x28
     79c:	b	968 <start_element_handler+0x3b4>
     7a0:	ldr	r0, [sp, #16]
     7a4:	ldr	r0, [r0, #20]
     7a8:	ldr	r0, [r0, r9, lsl #2]
     7ac:	cmp	r0, #0
     7b0:	beq	968 <start_element_handler+0x3b4>
     7b4:	ldr	r0, [r4, #532]	; 0x214
     7b8:	cmp	r0, #0
     7bc:	beq	8b8 <start_element_handler+0x304>
     7c0:	mov	r0, #2
     7c4:	bl	0 <coda_type_array_new>
     7c8:	cmp	r0, #0
     7cc:	beq	704 <start_element_handler+0x150>
     7d0:	mov	r1, r8
     7d4:	mov	r6, r0
     7d8:	bl	0 <coda_type_array_set_base_type>
     7dc:	cmp	r0, #0
     7e0:	beq	8f0 <start_element_handler+0x33c>
     7e4:	mov	r0, r6
     7e8:	bl	0 <coda_type_release>
     7ec:	b	704 <start_element_handler+0x150>
     7f0:	ldr	r0, [r4, #532]	; 0x214
     7f4:	cmp	r0, #0
     7f8:	beq	890 <start_element_handler+0x2dc>
     7fc:	mov	r0, #2
     800:	bl	0 <coda_type_record_new>
     804:	cmp	r0, #0
     808:	beq	704 <start_element_handler+0x150>
     80c:	mov	sl, r0
     810:	ldr	r0, [r8]
     814:	mov	r1, r6
     818:	mov	r2, sl
     81c:	bl	0 <coda_type_record_create_field>
     820:	mov	r9, r0
     824:	mov	r0, sl
     828:	bl	0 <coda_type_release>
     82c:	cmp	r9, #0
     830:	bne	704 <start_element_handler+0x150>
     834:	ldr	r1, [r8]
     838:	add	r0, sp, #16
     83c:	bl	0 <coda_mem_type_update>
     840:	cmp	r0, #0
     844:	bne	704 <start_element_handler+0x150>
     848:	ldr	r0, [r4, #12]
     84c:	add	r0, r7, r0, lsl #2
     850:	ldr	r1, [r0, #-4]
     854:	ldr	r0, [sp, #16]
     858:	cmp	r0, r1
     85c:	bne	ac8 <start_element_handler+0x514>
     860:	ldr	r0, [r0, #4]
     864:	mov	r1, r6
     868:	ldr	r0, [r0, #44]	; 0x2c
     86c:	bl	0 <coda_hashtable_get_index_from_name>
     870:	cmp	r0, #0
     874:	blt	ae8 <start_element_handler+0x534>
     878:	mov	r9, r0
     87c:	ldr	r0, [sp, #16]
     880:	str	r7, [sp, #8]
     884:	str	r6, [sp, #12]
     888:	add	r8, r0, #4
     88c:	b	6c4 <start_element_handler+0x110>
     890:	ldr	r1, [r4, #12]
     894:	movw	r0, #65236	; 0xfed4
     898:	movt	r0, #65535	; 0xffff
     89c:	cmp	r1, #1
     8a0:	bne	8d8 <start_element_handler+0x324>
     8a4:	movw	r1, #0
     8a8:	mov	r2, r6
     8ac:	movt	r1, #0
     8b0:	bl	0 <coda_set_error>
     8b4:	b	704 <start_element_handler+0x150>
     8b8:	add	r0, r6, r1, lsl #2
     8bc:	ldr	r2, [sp, #12]
     8c0:	movw	r1, #0
     8c4:	ldr	r3, [r0, #-4]
     8c8:	movw	r0, #65236	; 0xfed4
     8cc:	movt	r1, #0
     8d0:	movt	r0, #65535	; 0xffff
     8d4:	b	66c <start_element_handler+0xb8>
     8d8:	add	r1, r4, r1, lsl #2
     8dc:	mov	r2, r6
     8e0:	ldr	r3, [r1, #396]	; 0x18c
     8e4:	movw	r1, #0
     8e8:	movt	r1, #0
     8ec:	b	66c <start_element_handler+0xb8>
     8f0:	ldr	r0, [r4, #12]
     8f4:	ldr	r0, [sl, r0, lsl #2]
     8f8:	str	r6, [r0]
     8fc:	mov	r0, r8
     900:	bl	0 <coda_type_release>
     904:	mov	r0, r6
     908:	mov	r1, #0
     90c:	bl	0 <coda_type_array_add_variable_dimension>
     910:	cmp	r0, #0
     914:	bne	704 <start_element_handler+0x150>
     918:	mov	r0, r6
     91c:	mov	r1, #0
     920:	bl	0 <coda_mem_array_new>
     924:	cmp	r0, #0
     928:	beq	704 <start_element_handler+0x150>
     92c:	mov	r8, r0
     930:	ldr	r0, [sp, #16]
     934:	ldr	r0, [r0, #20]
     938:	ldr	r1, [r0, r9, lsl #2]
     93c:	mov	r0, r8
     940:	bl	0 <coda_mem_array_add_element>
     944:	cmp	r0, #0
     948:	bne	704 <start_element_handler+0x150>
     94c:	ldr	r0, [sp, #16]
     950:	add	r1, r6, #40	; 0x28
     954:	ldr	r0, [r0, #20]
     958:	str	r8, [r0, r9, lsl #2]
     95c:	ldr	r0, [r4, #12]
     960:	str	r1, [sl, r0, lsl #2]
     964:	ldr	r8, [r6, #40]	; 0x28
     968:	ldr	r0, [r8, #36]	; 0x24
     96c:	ldr	r6, [sp, #12]
     970:	ldr	r7, [sp, #8]
     974:	cmp	r0, #0
     978:	beq	9bc <start_element_handler+0x408>
     97c:	ldr	r2, [r4, #532]	; 0x214
     980:	ldr	r1, [r4, #8]
     984:	mov	r3, r5
     988:	str	r2, [sp]
     98c:	mov	r2, r6
     990:	bl	1058 <attribute_record_new>
     994:	cmp	r0, #0
     998:	str	r0, [r4, #528]	; 0x210
     99c:	beq	704 <start_element_handler+0x150>
     9a0:	ldr	r0, [r8]
     9a4:	cmp	r0, #2
     9a8:	ldreq	r0, [r8, #8]
     9ac:	cmpeq	r0, #0
     9b0:	beq	a24 <start_element_handler+0x470>
     9b4:	sub	sp, fp, #28
     9b8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
     9bc:	mov	r0, #0
     9c0:	str	r0, [r4, #528]	; 0x210
     9c4:	ldr	r0, [r4, #532]	; 0x214
     9c8:	ldr	r2, [r5]
     9cc:	cmp	r0, #0
     9d0:	beq	a04 <start_element_handler+0x450>
     9d4:	cmp	r2, #0
     9d8:	bne	9ec <start_element_handler+0x438>
     9dc:	mov	r0, r6
     9e0:	bl	0 <coda_element_name_from_xml_name>
     9e4:	cmp	r0, r6
     9e8:	beq	9a0 <start_element_handler+0x3ec>
     9ec:	mov	r0, #2
     9f0:	bl	0 <coda_type_record_new>
     9f4:	cmp	r0, #0
     9f8:	str	r0, [r8, #36]	; 0x24
     9fc:	bne	97c <start_element_handler+0x3c8>
     a00:	b	704 <start_element_handler+0x150>
     a04:	cmp	r2, #0
     a08:	beq	9a0 <start_element_handler+0x3ec>
     a0c:	movw	r0, #65236	; 0xfed4
     a10:	movw	r1, #0
     a14:	movt	r0, #65535	; 0xffff
     a18:	movt	r1, #0
     a1c:	bl	0 <coda_set_error>
     a20:	b	704 <start_element_handler+0x150>
     a24:	ldr	r1, [r4, #528]	; 0x210
     a28:	mov	r0, r8
     a2c:	bl	0 <coda_mem_record_new>
     a30:	ldr	r1, [r4, #12]
     a34:	cmp	r0, #0
     a38:	str	r0, [r7, r1, lsl #2]
     a3c:	beq	704 <start_element_handler+0x150>
     a40:	ldr	r0, [r0, #16]
     a44:	cmp	r0, #1
     a48:	blt	ab8 <start_element_handler+0x504>
     a4c:	mov	r5, #0
     a50:	ldr	r0, [r8, #52]	; 0x34
     a54:	ldr	r0, [r0, r5, lsl #2]
     a58:	ldr	r0, [r0, #8]
     a5c:	ldr	r2, [r0, #8]
     a60:	cmp	r2, #1
     a64:	ldreq	r2, [r0]
     a68:	cmpeq	r2, #2
     a6c:	beq	a88 <start_element_handler+0x4d4>
     a70:	ldr	r0, [r7, r1, lsl #2]
     a74:	add	r5, r5, #1
     a78:	ldr	r0, [r0, #16]
     a7c:	cmp	r5, r0
     a80:	blt	a50 <start_element_handler+0x49c>
     a84:	b	ab8 <start_element_handler+0x504>
     a88:	mov	r1, #0
     a8c:	bl	0 <coda_mem_array_new>
     a90:	ldr	r1, [r4, #12]
     a94:	ldr	r2, [r7, r1, lsl #2]
     a98:	ldr	r2, [r2, #20]
     a9c:	str	r0, [r2, r5, lsl #2]
     aa0:	ldr	r0, [r7, r1, lsl #2]
     aa4:	ldr	r0, [r0, #20]
     aa8:	ldr	r0, [r0, r5, lsl #2]
     aac:	cmp	r0, #0
     ab0:	bne	a70 <start_element_handler+0x4bc>
     ab4:	b	704 <start_element_handler+0x150>
     ab8:	mov	r0, #0
     abc:	str	r0, [r4, #528]	; 0x210
     ac0:	sub	sp, fp, #28
     ac4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
     ac8:	movw	r0, #0
     acc:	movw	r1, #0
     ad0:	movw	r3, #0
     ad4:	movw	r2, #394	; 0x18a
     ad8:	movt	r0, #0
     adc:	movt	r1, #0
     ae0:	movt	r3, #0
     ae4:	bl	0 <__assert_fail>
     ae8:	movw	r0, #0
     aec:	movw	r1, #0
     af0:	movw	r3, #0
     af4:	mov	r2, #396	; 0x18c
     af8:	movt	r0, #0
     afc:	movt	r1, #0
     b00:	movt	r3, #0
     b04:	bl	0 <__assert_fail>

00000b08 <end_element_handler>:
     b08:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
     b0c:	add	fp, sp, #24
     b10:	sub	sp, sp, #8
     b14:	mov	r9, r0
     b18:	ldr	r0, [r0, #4]
     b1c:	cmp	r0, #0
     b20:	beq	b2c <end_element_handler+0x24>
     b24:	sub	sp, fp, #24
     b28:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
     b2c:	ldr	ip, [r9, #12]
     b30:	add	r8, r9, #144	; 0x90
     b34:	mov	r1, r8
     b38:	ldr	r0, [r1, ip, lsl #2]!
     b3c:	cmp	r0, #0
     b40:	beq	d3c <end_element_handler+0x234>
     b44:	ldr	r3, [r9, #536]	; 0x218
     b48:	cmp	r3, #1
     b4c:	blt	b90 <end_element_handler+0x88>
     b50:	ldr	r7, [r9, #544]	; 0x220
     b54:	cmp	r7, #0
     b58:	beq	e98 <end_element_handler+0x390>
     b5c:	movw	r2, #19
     b60:	mov	r6, #0
     b64:	mov	r5, #1
     b68:	movt	r2, #128	; 0x80
     b6c:	ldrb	r4, [r7, r6]
     b70:	sub	r4, r4, #9
     b74:	cmp	r4, #23
     b78:	bhi	bd4 <end_element_handler+0xcc>
     b7c:	tst	r2, r5, lsl r4
     b80:	beq	bd4 <end_element_handler+0xcc>
     b84:	add	r6, r6, #1
     b88:	cmp	r6, r3
     b8c:	blt	b6c <end_element_handler+0x64>
     b90:	ldr	r2, [r9, #532]	; 0x214
     b94:	cmp	r2, #0
     b98:	beq	c10 <end_element_handler+0x108>
     b9c:	mov	r0, #0
     ba0:	ldr	r5, [r1]
     ba4:	str	r0, [r1]
     ba8:	ldr	r0, [r9, #528]	; 0x210
     bac:	cmp	r0, #0
     bb0:	beq	de4 <end_element_handler+0x2dc>
     bb4:	movw	r0, #0
     bb8:	movw	r1, #0
     bbc:	movw	r3, #0
     bc0:	movw	r2, #685	; 0x2ad
     bc4:	movt	r0, #0
     bc8:	movt	r1, #0
     bcc:	movt	r3, #0
     bd0:	bl	0 <__assert_fail>
     bd4:	ldr	r2, [r9, #532]	; 0x214
     bd8:	cmp	r2, #0
     bdc:	beq	eb8 <end_element_handler+0x3b0>
     be0:	ldr	r2, [r0, #4]
     be4:	ldr	r2, [r2, #48]	; 0x30
     be8:	cmp	r2, #1
     bec:	blt	c94 <end_element_handler+0x18c>
     bf0:	add	r0, r9, ip, lsl #2
     bf4:	movw	r1, #0
     bf8:	ldr	r2, [r0, #400]	; 0x190
     bfc:	movw	r0, #65236	; 0xfed4
     c00:	movt	r1, #0
     c04:	movt	r0, #65535	; 0xffff
     c08:	bl	0 <coda_set_error>
     c0c:	b	e60 <end_element_handler+0x358>
     c10:	bl	0 <coda_mem_record_validate>
     c14:	cmp	r0, #0
     c18:	bne	e60 <end_element_handler+0x358>
     c1c:	ldr	r2, [r9, #12]
     c20:	mov	r1, r8
     c24:	ldr	r0, [r1, r2, lsl #2]!
     c28:	ldr	r3, [r0, #16]
     c2c:	cmp	r3, #1
     c30:	blt	b9c <end_element_handler+0x94>
     c34:	mov	r5, #0
     c38:	b	c50 <end_element_handler+0x148>
     c3c:	bl	0 <coda_mem_array_validate>
     c40:	cmp	r0, #0
     c44:	bne	e60 <end_element_handler+0x358>
     c48:	ldr	r2, [r9, #12]
     c4c:	b	c78 <end_element_handler+0x170>
     c50:	ldr	r0, [r0, #20]
     c54:	ldr	r0, [r0, r5, lsl #2]
     c58:	cmp	r0, #0
     c5c:	beq	c78 <end_element_handler+0x170>
     c60:	ldr	r1, [r0, #4]
     c64:	ldr	r3, [r1, #8]
     c68:	cmp	r3, #1
     c6c:	ldreq	r1, [r1]
     c70:	cmpeq	r1, #2
     c74:	beq	c3c <end_element_handler+0x134>
     c78:	ldr	r0, [r8, r2, lsl #2]
     c7c:	add	r5, r5, #1
     c80:	ldr	r1, [r0, #16]
     c84:	cmp	r5, r1
     c88:	blt	c50 <end_element_handler+0x148>
     c8c:	add	r1, r8, r2, lsl #2
     c90:	b	b9c <end_element_handler+0x94>
     c94:	ldr	r0, [r0, #12]
     c98:	str	r0, [r9, #528]	; 0x210
     c9c:	ldr	r0, [r1]
     ca0:	mov	r1, #0
     ca4:	str	r1, [r0, #12]
     ca8:	add	r0, r9, ip, lsl #2
     cac:	ldr	r6, [r0, #16]
     cb0:	ldr	r0, [r6]
     cb4:	ldr	r1, [r0, #8]
     cb8:	cmp	r1, #0
     cbc:	ldreq	r0, [r0]
     cc0:	cmpeq	r0, #2
     cc4:	beq	ce8 <end_element_handler+0x1e0>
     cc8:	movw	r0, #0
     ccc:	movw	r1, #0
     cd0:	movw	r3, #0
     cd4:	mov	r2, #70	; 0x46
     cd8:	movt	r0, #0
     cdc:	movt	r1, #0
     ce0:	movt	r3, #0
     ce4:	bl	0 <__assert_fail>
     ce8:	mov	r0, #2
     cec:	bl	0 <coda_type_text_new>
     cf0:	cmp	r0, #0
     cf4:	beq	e60 <end_element_handler+0x358>
     cf8:	mov	r5, r0
     cfc:	ldr	r0, [r6]
     d00:	ldr	r1, [r0, #36]	; 0x24
     d04:	cmp	r1, #0
     d08:	strne	r1, [r5, #36]	; 0x24
     d0c:	ldrne	r0, [r1, #4]
     d10:	addne	r0, r0, #1
     d14:	strne	r0, [r1, #4]
     d18:	ldrne	r0, [r6]
     d1c:	bl	0 <coda_type_release>
     d20:	str	r5, [r6]
     d24:	ldr	r0, [r9, #12]
     d28:	ldr	r0, [r8, r0, lsl #2]
     d2c:	bl	0 <coda_dynamic_type_delete>
     d30:	ldr	ip, [r9, #12]
     d34:	mov	r0, #0
     d38:	str	r0, [r8, ip, lsl #2]
     d3c:	add	r0, r9, ip, lsl #2
     d40:	ldr	r0, [r0, #16]
     d44:	ldr	r5, [r0]
     d48:	ldr	r0, [r5, #8]
     d4c:	cmp	r0, #6
     d50:	bne	db0 <end_element_handler+0x2a8>
     d54:	ldr	r0, [r9, #532]	; 0x214
     d58:	cmp	r0, #0
     d5c:	bne	ed8 <end_element_handler+0x3d0>
     d60:	ldr	r1, [r9, #544]	; 0x220
     d64:	ldr	r3, [r9, #536]	; 0x218
     d68:	ldr	r2, [r9, #8]
     d6c:	ldr	r0, [r5, #44]	; 0x2c
     d70:	str	r1, [sp]
     d74:	mov	r1, #0
     d78:	bl	0 <coda_mem_data_new>
     d7c:	cmp	r0, #0
     d80:	beq	e60 <end_element_handler+0x358>
     d84:	mov	r7, r9
     d88:	mov	r6, r0
     d8c:	mov	r0, r5
     d90:	ldr	r1, [r7, #528]!	; 0x210
     d94:	mov	r2, r6
     d98:	bl	0 <coda_mem_time_new>
     d9c:	mov	r5, r0
     da0:	cmp	r0, #0
     da4:	bne	ddc <end_element_handler+0x2d4>
     da8:	mov	r0, r6
     dac:	b	e5c <end_element_handler+0x354>
     db0:	mov	r7, r9
     db4:	ldr	r1, [r7, #528]!	; 0x210
     db8:	ldr	r0, [r7, #16]
     dbc:	ldr	r3, [r7, #8]
     dc0:	ldr	r2, [r7, #-520]	; 0xfffffdf8
     dc4:	str	r0, [sp]
     dc8:	mov	r0, r5
     dcc:	bl	0 <coda_mem_data_new>
     dd0:	mov	r5, r0
     dd4:	cmp	r0, #0
     dd8:	beq	e60 <end_element_handler+0x358>
     ddc:	mov	r0, #0
     de0:	str	r0, [r7]
     de4:	ldr	r0, [r9, #12]
     de8:	add	r1, r9, r0, lsl #2
     dec:	ldr	r2, [r1, #272]	; 0x110
     df0:	sub	r1, r0, #1
     df4:	ldr	r0, [r8, r1, lsl #2]
     df8:	ldr	r3, [r0, #20]
     dfc:	ldr	r0, [r3, r2, lsl #2]
     e00:	cmp	r0, #0
     e04:	beq	e40 <end_element_handler+0x338>
     e08:	ldr	r1, [r0, #4]
     e0c:	ldr	r2, [r1, #8]
     e10:	cmp	r2, #1
     e14:	ldreq	r1, [r1]
     e18:	cmpeq	r1, #2
     e1c:	beq	e48 <end_element_handler+0x340>
     e20:	movw	r0, #0
     e24:	movw	r1, #0
     e28:	movw	r3, #0
     e2c:	movw	r2, #693	; 0x2b5
     e30:	movt	r0, #0
     e34:	movt	r1, #0
     e38:	movt	r3, #0
     e3c:	bl	0 <__assert_fail>
     e40:	str	r5, [r3, r2, lsl #2]
     e44:	b	e84 <end_element_handler+0x37c>
     e48:	mov	r1, r5
     e4c:	bl	0 <coda_mem_array_add_element>
     e50:	cmp	r0, #0
     e54:	beq	e7c <end_element_handler+0x374>
     e58:	mov	r0, r5
     e5c:	bl	0 <coda_dynamic_type_delete>
     e60:	ldr	r0, [r9]
     e64:	mov	r1, #0
     e68:	bl	0 <coda_XML_StopParser>
     e6c:	mov	r0, #1
     e70:	str	r0, [r9, #4]
     e74:	sub	sp, fp, #24
     e78:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
     e7c:	ldr	r0, [r9, #12]
     e80:	sub	r1, r0, #1
     e84:	mov	r0, #0
     e88:	str	r0, [r9, #536]	; 0x218
     e8c:	str	r1, [r9, #12]
     e90:	sub	sp, fp, #24
     e94:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
     e98:	movw	r0, #0
     e9c:	movw	r1, #0
     ea0:	movw	r3, #0
     ea4:	mov	r2, #53	; 0x35
     ea8:	movt	r0, #0
     eac:	movt	r1, #0
     eb0:	movt	r3, #0
     eb4:	bl	0 <__assert_fail>
     eb8:	movw	r0, #0
     ebc:	movw	r1, #0
     ec0:	movw	r3, #0
     ec4:	movw	r2, #590	; 0x24e
     ec8:	movt	r0, #0
     ecc:	movt	r1, #0
     ed0:	movt	r3, #0
     ed4:	bl	0 <__assert_fail>
     ed8:	movw	r0, #0
     edc:	movw	r1, #0
     ee0:	movw	r3, #0
     ee4:	movw	r2, #619	; 0x26b
     ee8:	movt	r0, #0
     eec:	movt	r1, #0
     ef0:	movt	r3, #0
     ef4:	bl	0 <__assert_fail>

00000ef8 <character_data_handler>:
     ef8:	push	{r4, r5, r6, sl, fp, lr}
     efc:	add	fp, sp, #16
     f00:	sub	sp, sp, #8
     f04:	mov	r4, r0
     f08:	ldr	r0, [r0, #532]	; 0x214
     f0c:	mov	r5, r2
     f10:	mov	r6, r1
     f14:	cmp	r0, #0
     f18:	beq	f74 <character_data_handler+0x7c>
     f1c:	ldr	r2, [r4, #536]	; 0x218
     f20:	ldr	r3, [r4, #540]	; 0x21c
     f24:	ldr	r0, [r4, #544]	; 0x220
     f28:	add	r1, r2, r5
     f2c:	cmp	r1, r3
     f30:	ble	f50 <character_data_handler+0x58>
     f34:	bl	0 <realloc>
     f38:	cmp	r0, #0
     f3c:	beq	fd0 <character_data_handler+0xd8>
     f40:	ldr	r2, [r4, #536]	; 0x218
     f44:	add	r1, r2, r5
     f48:	str	r1, [r4, #540]	; 0x21c
     f4c:	str	r0, [r4, #544]	; 0x220
     f50:	add	r0, r0, r2
     f54:	mov	r1, r6
     f58:	mov	r2, r5
     f5c:	bl	0 <memcpy>
     f60:	ldr	r0, [r4, #536]	; 0x218
     f64:	add	r0, r0, r5
     f68:	str	r0, [r4, #536]	; 0x218
     f6c:	sub	sp, fp, #16
     f70:	pop	{r4, r5, r6, sl, fp, pc}
     f74:	ldr	r0, [r4, #12]
     f78:	add	ip, r4, r0, lsl #2
     f7c:	ldr	r0, [ip, #144]	; 0x90
     f80:	cmp	r0, #0
     f84:	beq	f1c <character_data_handler+0x24>
     f88:	cmp	r6, #0
     f8c:	beq	1030 <character_data_handler+0x138>
     f90:	cmp	r5, #1
     f94:	blt	f1c <character_data_handler+0x24>
     f98:	movw	r3, #19
     f9c:	mov	r1, #0
     fa0:	mov	r2, #1
     fa4:	movt	r3, #128	; 0x80
     fa8:	ldrb	r0, [r6, r1]
     fac:	sub	r0, r0, #9
     fb0:	cmp	r0, #23
     fb4:	bhi	ffc <character_data_handler+0x104>
     fb8:	tst	r3, r2, lsl r0
     fbc:	beq	ffc <character_data_handler+0x104>
     fc0:	add	r1, r1, #1
     fc4:	cmp	r1, r5
     fc8:	blt	fa8 <character_data_handler+0xb0>
     fcc:	b	f1c <character_data_handler+0x24>
     fd0:	ldr	r0, [r4, #536]	; 0x218
     fd4:	movw	r1, #731	; 0x2db
     fd8:	movw	r3, #0
     fdc:	str	r1, [sp]
     fe0:	movw	r1, #0
     fe4:	movt	r3, #0
     fe8:	movt	r1, #0
     fec:	add	r2, r0, r5
     ff0:	mvn	r0, #0
     ff4:	bl	0 <coda_set_error>
     ff8:	b	1014 <character_data_handler+0x11c>
     ffc:	ldr	r2, [ip, #400]	; 0x190
    1000:	movw	r0, #65236	; 0xfed4
    1004:	movw	r1, #0
    1008:	movt	r0, #65535	; 0xffff
    100c:	movt	r1, #0
    1010:	bl	0 <coda_set_error>
    1014:	ldr	r0, [r4]
    1018:	mov	r1, #0
    101c:	bl	0 <coda_XML_StopParser>
    1020:	mov	r0, #1
    1024:	str	r0, [r4, #4]
    1028:	sub	sp, fp, #16
    102c:	pop	{r4, r5, r6, sl, fp, pc}
    1030:	movw	r0, #0
    1034:	movw	r1, #0
    1038:	movw	r3, #0
    103c:	mov	r2, #53	; 0x35
    1040:	movt	r0, #0
    1044:	movt	r1, #0
    1048:	movt	r3, #0
    104c:	bl	0 <__assert_fail>

00001050 <not_standalone_handler>:
    1050:	mov	r0, #0
    1054:	bx	lr

00001058 <attribute_record_new>:
    1058:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    105c:	add	fp, sp, #28
    1060:	sub	sp, sp, #12
    1064:	cmp	r0, #0
    1068:	beq	13f0 <attribute_record_new+0x398>
    106c:	mov	r9, r1
    1070:	mov	r1, #0
    1074:	mov	r5, r3
    1078:	mov	r7, r2
    107c:	mov	r8, r0
    1080:	bl	0 <coda_mem_record_new>
    1084:	mov	sl, r0
    1088:	mov	r0, r7
    108c:	bl	0 <coda_element_name_from_xml_name>
    1090:	cmp	r0, r7
    1094:	beq	120c <attribute_record_new+0x1b4>
    1098:	ldr	r0, [r8, #44]	; 0x2c
    109c:	movw	r1, #0
    10a0:	movt	r1, #0
    10a4:	bl	0 <coda_hashtable_get_index_from_name>
    10a8:	ldr	r1, [fp, #8]
    10ac:	cmp	r1, #0
    10b0:	beq	1110 <attribute_record_new+0xb8>
    10b4:	cmn	r0, #1
    10b8:	ble	1190 <attribute_record_new+0x138>
    10bc:	ldr	r1, [sl, #20]
    10c0:	ldr	r1, [r1, r0, lsl #2]
    10c4:	cmp	r1, #0
    10c8:	bne	1410 <attribute_record_new+0x3b8>
    10cc:	ldr	r1, [r8, #52]	; 0x34
    10d0:	ldr	r0, [r1, r0, lsl #2]
    10d4:	ldr	r4, [r0, #8]
    10d8:	mov	r0, r7
    10dc:	bl	0 <coda_element_name_from_xml_name>
    10e0:	mvn	r1, r7
    10e4:	mov	r2, r9
    10e8:	str	r7, [sp]
    10ec:	mov	r6, #0
    10f0:	add	r3, r0, r1
    10f4:	mov	r0, r4
    10f8:	mov	r1, #0
    10fc:	bl	0 <coda_mem_data_new>
    1100:	mov	r4, r0
    1104:	cmp	r4, #0
    1108:	bne	11e0 <attribute_record_new+0x188>
    110c:	b	13d8 <attribute_record_new+0x380>
    1110:	cmp	r0, #0
    1114:	blt	120c <attribute_record_new+0x1b4>
    1118:	ldr	r1, [r8, #52]	; 0x34
    111c:	ldr	r0, [r1, r0, lsl #2]
    1120:	ldr	r4, [r0, #8]
    1124:	mov	r0, r7
    1128:	bl	0 <coda_element_name_from_xml_name>
    112c:	mvn	r1, r7
    1130:	mov	r2, r9
    1134:	str	r7, [sp]
    1138:	mov	r7, #0
    113c:	add	r3, r0, r1
    1140:	mov	r0, r4
    1144:	mov	r1, #0
    1148:	bl	0 <coda_mem_data_new>
    114c:	cmp	r0, #0
    1150:	beq	1184 <attribute_record_new+0x12c>
    1154:	mov	r4, r0
    1158:	movw	r1, #0
    115c:	mov	r0, sl
    1160:	mov	r3, #0
    1164:	mov	r7, #0
    1168:	movt	r1, #0
    116c:	mov	r2, r4
    1170:	bl	0 <coda_mem_record_add_field>
    1174:	cmp	r0, #0
    1178:	beq	120c <attribute_record_new+0x1b4>
    117c:	mov	r0, r4
    1180:	bl	0 <coda_dynamic_type_delete>
    1184:	mov	r0, sl
    1188:	bl	0 <coda_dynamic_type_delete>
    118c:	b	13e4 <attribute_record_new+0x38c>
    1190:	mov	r0, #2
    1194:	bl	0 <coda_type_text_new>
    1198:	cmp	r0, #0
    119c:	beq	13d8 <attribute_record_new+0x380>
    11a0:	mov	r6, r0
    11a4:	mov	r0, r7
    11a8:	bl	0 <coda_element_name_from_xml_name>
    11ac:	mvn	r1, r7
    11b0:	mov	r2, r9
    11b4:	str	r7, [sp]
    11b8:	add	r3, r0, r1
    11bc:	mov	r0, r6
    11c0:	mov	r1, #0
    11c4:	bl	0 <coda_mem_data_new>
    11c8:	mov	r4, r0
    11cc:	mov	r0, r6
    11d0:	bl	0 <coda_type_release>
    11d4:	ldr	r6, [fp, #8]
    11d8:	cmp	r4, #0
    11dc:	beq	13d8 <attribute_record_new+0x380>
    11e0:	movw	r1, #0
    11e4:	mov	r0, sl
    11e8:	mov	r2, r4
    11ec:	mov	r3, r6
    11f0:	movt	r1, #0
    11f4:	bl	0 <coda_mem_record_add_field>
    11f8:	cmp	r0, #0
    11fc:	beq	120c <attribute_record_new+0x1b4>
    1200:	mov	r0, r4
    1204:	bl	0 <coda_dynamic_type_delete>
    1208:	b	13d8 <attribute_record_new+0x380>
    120c:	ldr	r7, [r5]
    1210:	cmp	r7, #0
    1214:	beq	1334 <attribute_record_new+0x2dc>
    1218:	add	r5, r5, #4
    121c:	ldr	r0, [r8, #44]	; 0x2c
    1220:	mov	r1, r7
    1224:	bl	0 <coda_hashtable_get_index_from_name>
    1228:	cmn	r0, #1
    122c:	ble	1238 <attribute_record_new+0x1e0>
    1230:	mov	r6, r0
    1234:	b	1268 <attribute_record_new+0x210>
    1238:	ldr	r4, [r8, #44]	; 0x2c
    123c:	mov	r0, r7
    1240:	bl	0 <coda_element_name_from_xml_name>
    1244:	mov	r1, r0
    1248:	mov	r0, r4
    124c:	bl	0 <coda_hashtable_get_index_from_name>
    1250:	mov	r6, r0
    1254:	cmp	r0, #0
    1258:	blt	1268 <attribute_record_new+0x210>
    125c:	mov	r0, r7
    1260:	bl	0 <coda_element_name_from_xml_name>
    1264:	mov	r7, r0
    1268:	ldr	r0, [fp, #8]
    126c:	cmp	r0, #0
    1270:	beq	1290 <attribute_record_new+0x238>
    1274:	cmn	r6, #1
    1278:	ble	12c8 <attribute_record_new+0x270>
    127c:	ldr	r0, [sl, #20]
    1280:	ldr	r0, [r0, r6, lsl #2]
    1284:	cmp	r0, #0
    1288:	bne	1320 <attribute_record_new+0x2c8>
    128c:	b	1298 <attribute_record_new+0x240>
    1290:	cmn	r6, #1
    1294:	beq	139c <attribute_record_new+0x344>
    1298:	ldr	r0, [r8, #52]	; 0x34
    129c:	ldr	r3, [r5]
    12a0:	mov	r1, #0
    12a4:	mov	r2, r9
    12a8:	mov	r4, #0
    12ac:	ldr	r0, [r0, r6, lsl #2]
    12b0:	ldr	r0, [r0, #8]
    12b4:	bl	0 <coda_mem_string_new>
    12b8:	mov	r6, r0
    12bc:	cmp	r6, #0
    12c0:	bne	1304 <attribute_record_new+0x2ac>
    12c4:	b	13d8 <attribute_record_new+0x380>
    12c8:	mov	r0, #2
    12cc:	bl	0 <coda_type_text_new>
    12d0:	cmp	r0, #0
    12d4:	beq	13d8 <attribute_record_new+0x380>
    12d8:	ldr	r3, [r5]
    12dc:	mov	r1, #0
    12e0:	mov	r2, r9
    12e4:	mov	r4, r0
    12e8:	bl	0 <coda_mem_string_new>
    12ec:	mov	r6, r0
    12f0:	mov	r0, r4
    12f4:	bl	0 <coda_type_release>
    12f8:	ldr	r4, [fp, #8]
    12fc:	cmp	r6, #0
    1300:	beq	13d8 <attribute_record_new+0x380>
    1304:	mov	r0, sl
    1308:	mov	r1, r7
    130c:	mov	r2, r6
    1310:	mov	r3, r4
    1314:	bl	0 <coda_mem_record_add_field>
    1318:	cmp	r0, #0
    131c:	bne	1390 <attribute_record_new+0x338>
    1320:	ldr	r7, [r5, #4]
    1324:	add	r0, r5, #8
    1328:	mov	r5, r0
    132c:	cmp	r7, #0
    1330:	bne	121c <attribute_record_new+0x1c4>
    1334:	ldr	r0, [r8, #48]	; 0x30
    1338:	cmp	r0, #1
    133c:	blt	1388 <attribute_record_new+0x330>
    1340:	ldr	r2, [r8, #52]	; 0x34
    1344:	mov	r1, #0
    1348:	mov	r3, #1
    134c:	ldr	r7, [r2, r1, lsl #2]
    1350:	ldrb	r6, [r7, #16]
    1354:	cmp	r6, #0
    1358:	bne	137c <attribute_record_new+0x324>
    135c:	ldr	r6, [sl, #20]
    1360:	ldr	r6, [r6, r1, lsl #2]
    1364:	cmp	r6, #0
    1368:	bne	137c <attribute_record_new+0x324>
    136c:	ldr	r6, [fp, #8]
    1370:	cmp	r6, #0
    1374:	beq	13b4 <attribute_record_new+0x35c>
    1378:	strb	r3, [r7, #16]
    137c:	add	r1, r1, #1
    1380:	cmp	r1, r0
    1384:	blt	134c <attribute_record_new+0x2f4>
    1388:	mov	r7, sl
    138c:	b	13e4 <attribute_record_new+0x38c>
    1390:	mov	r0, r6
    1394:	bl	0 <coda_dynamic_type_delete>
    1398:	b	13d8 <attribute_record_new+0x380>
    139c:	ldr	r2, [r5, #-4]
    13a0:	movw	r0, #65236	; 0xfed4
    13a4:	movw	r1, #0
    13a8:	movt	r0, #65535	; 0xffff
    13ac:	movt	r1, #0
    13b0:	b	13d4 <attribute_record_new+0x37c>
    13b4:	add	r2, sp, #8
    13b8:	mov	r0, r8
    13bc:	bl	0 <coda_type_get_record_field_real_name>
    13c0:	ldr	r2, [sp, #8]
    13c4:	movw	r0, #65236	; 0xfed4
    13c8:	movw	r1, #0
    13cc:	movt	r0, #65535	; 0xffff
    13d0:	movt	r1, #0
    13d4:	bl	0 <coda_set_error>
    13d8:	mov	r0, sl
    13dc:	bl	0 <coda_dynamic_type_delete>
    13e0:	mov	r7, #0
    13e4:	mov	r0, r7
    13e8:	sub	sp, fp, #28
    13ec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    13f0:	movw	r0, #0
    13f4:	movw	r1, #0
    13f8:	movw	r3, #0
    13fc:	mov	r2, #97	; 0x61
    1400:	movt	r0, #0
    1404:	movt	r1, #0
    1408:	movt	r3, #0
    140c:	bl	0 <__assert_fail>
    1410:	movw	r0, #0
    1414:	movw	r1, #0
    1418:	movw	r3, #0
    141c:	mov	r2, #123	; 0x7b
    1420:	movt	r0, #0
    1424:	movt	r1, #0
    1428:	movt	r3, #0
    142c:	bl	0 <__assert_fail>
