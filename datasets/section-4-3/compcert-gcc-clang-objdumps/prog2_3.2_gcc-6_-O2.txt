
../compcert-repos/prog2/3.2:     file format elf32-littlearm


Disassembly of section .init:

00010690 <.init>:
   10690:	push	{r3, lr}
   10694:	bl	10a10 <_start@@Base+0x3c>
   10698:	pop	{r3, pc}

Disassembly of section .plt:

0001069c <printf@plt-0x14>:
   1069c:	push	{lr}		; (str lr, [sp, #-4]!)
   106a0:	ldr	lr, [pc, #4]	; 106ac <printf@plt-0x4>
   106a4:	add	lr, pc, lr
   106a8:	ldr	pc, [lr, #8]!
   106ac:	andeq	r1, r1, r4, asr r9

000106b0 <printf@plt>:
   106b0:	add	ip, pc, #0, 12
   106b4:	add	ip, ip, #69632	; 0x11000
   106b8:	ldr	pc, [ip, #2388]!	; 0x954

000106bc <puts@plt>:
   106bc:	add	ip, pc, #0, 12
   106c0:	add	ip, ip, #69632	; 0x11000
   106c4:	ldr	pc, [ip, #2380]!	; 0x94c

000106c8 <__libc_start_main@plt>:
   106c8:	add	ip, pc, #0, 12
   106cc:	add	ip, ip, #69632	; 0x11000
   106d0:	ldr	pc, [ip, #2372]!	; 0x944

000106d4 <__gmon_start__@plt>:
   106d4:	add	ip, pc, #0, 12
   106d8:	add	ip, ip, #69632	; 0x11000
   106dc:	ldr	pc, [ip, #2364]!	; 0x93c

000106e0 <strlen@plt>:
   106e0:	add	ip, pc, #0, 12
   106e4:	add	ip, ip, #69632	; 0x11000
   106e8:	ldr	pc, [ip, #2356]!	; 0x934

000106ec <abort@plt>:
   106ec:	add	ip, pc, #0, 12
   106f0:	add	ip, ip, #69632	; 0x11000
   106f4:	ldr	pc, [ip, #2348]!	; 0x92c

Disassembly of section .text:

000106f8 <main@@Base>:
   106f8:	push	{r4, r5, r6, r7, r8, r9, lr}
   106fc:	sub	sp, sp, #76	; 0x4c
   10700:	ldr	r4, [pc, #656]	; 10998 <main@@Base+0x2a0>
   10704:	add	ip, sp, #24
   10708:	mov	r5, ip
   1070c:	ldm	r4!, {r0, r1, r2, r3}
   10710:	add	r8, sp, #48	; 0x30
   10714:	mov	lr, r8
   10718:	add	r6, sp, #44	; 0x2c
   1071c:	stmia	ip!, {r0, r1, r2, r3}
   10720:	add	r7, sp, #68	; 0x44
   10724:	ldm	r4, {r0, r1}
   10728:	ldr	r4, [pc, #620]	; 1099c <main@@Base+0x2a4>
   1072c:	stm	ip, {r0, r1}
   10730:	ldm	r5!, {r0, r1, r2, r3}
   10734:	mov	r5, r6
   10738:	stmia	lr!, {r0, r1, r2, r3}
   1073c:	ldm	ip, {r0, r1}
   10740:	stm	lr, {r0, r1}
   10744:	ldr	r0, [pc, #596]	; 109a0 <main@@Base+0x2a8>
   10748:	bl	106bc <puts@plt>
   1074c:	ldr	r0, [pc, #592]	; 109a4 <main@@Base+0x2ac>
   10750:	bl	106b0 <printf@plt>
   10754:	ldr	r1, [r5, #4]!
   10758:	mov	r0, r4
   1075c:	bl	106b0 <printf@plt>
   10760:	cmp	r5, r7
   10764:	bne	10754 <main@@Base+0x5c>
   10768:	ldr	r0, [pc, #568]	; 109a8 <main@@Base+0x2b0>
   1076c:	bl	106bc <puts@plt>
   10770:	ldr	r3, [pc, #564]	; 109ac <main@@Base+0x2b4>
   10774:	mov	r2, #4
   10778:	mov	r1, #6
   1077c:	mov	r0, r8
   10780:	bl	10b78 <sort@@Base>
   10784:	ldr	r0, [pc, #548]	; 109b0 <main@@Base+0x2b8>
   10788:	bl	106b0 <printf@plt>
   1078c:	ldr	r7, [pc, #520]	; 1099c <main@@Base+0x2a4>
   10790:	mov	r4, r6
   10794:	ldr	r1, [r4, #4]!
   10798:	mov	r0, r7
   1079c:	bl	106b0 <printf@plt>
   107a0:	cmp	r4, r5
   107a4:	bne	10794 <main@@Base+0x9c>
   107a8:	ldr	r0, [pc, #504]	; 109a8 <main@@Base+0x2b0>
   107ac:	bl	106bc <puts@plt>
   107b0:	add	lr, sp, #24
   107b4:	mov	ip, r8
   107b8:	ldm	lr!, {r0, r1, r2, r3}
   107bc:	add	r9, sp, #72	; 0x48
   107c0:	mov	r7, r8
   107c4:	mov	r5, #0
   107c8:	stmia	ip!, {r0, r1, r2, r3}
   107cc:	ldm	lr, {r0, r1}
   107d0:	stm	ip, {r0, r1}
   107d4:	ldr	r0, [pc, #472]	; 109b4 <main@@Base+0x2bc>
   107d8:	bl	106bc <puts@plt>
   107dc:	mov	r3, #4
   107e0:	str	r3, [r9, #-60]!	; 0xffffffc4
   107e4:	mov	r0, r7
   107e8:	mov	r1, r9
   107ec:	bl	10afc <comp_int_asc@@Base>
   107f0:	add	r7, r7, #6
   107f4:	cmp	r0, #0
   107f8:	beq	10818 <main@@Base+0x120>
   107fc:	add	r5, r5, #1
   10800:	cmp	r5, #6
   10804:	bne	107e4 <main@@Base+0xec>
   10808:	mov	r1, #4
   1080c:	ldr	r0, [pc, #420]	; 109b8 <main@@Base+0x2c0>
   10810:	bl	106b0 <printf@plt>
   10814:	b	10834 <main@@Base+0x13c>
   10818:	add	r3, r8, r5, lsl #2
   1081c:	cmp	r3, #0
   10820:	beq	10808 <main@@Base+0x110>
   10824:	mov	r2, r5
   10828:	mov	r1, #4
   1082c:	ldr	r0, [pc, #392]	; 109bc <main@@Base+0x2c4>
   10830:	bl	106b0 <printf@plt>
   10834:	add	lr, sp, #24
   10838:	mov	ip, r8
   1083c:	ldm	lr!, {r0, r1, r2, r3}
   10840:	ldr	r5, [pc, #356]	; 109ac <main@@Base+0x2b4>
   10844:	stmia	ip!, {r0, r1, r2, r3}
   10848:	mov	r3, r5
   1084c:	ldm	lr, {r0, r1}
   10850:	mov	r2, #4
   10854:	stm	ip, {r0, r1}
   10858:	mov	r1, #6
   1085c:	mov	r0, r8
   10860:	bl	10b78 <sort@@Base>
   10864:	ldr	r0, [pc, #340]	; 109c0 <main@@Base+0x2c8>
   10868:	bl	106bc <puts@plt>
   1086c:	str	r5, [sp]
   10870:	mov	r0, r9
   10874:	mov	r3, #4
   10878:	mov	r2, #6
   1087c:	mov	r1, r8
   10880:	bl	10c9c <binary_search@@Base>
   10884:	cmp	r0, #0
   10888:	beq	10988 <main@@Base+0x290>
   1088c:	sub	r2, r0, r8
   10890:	ldr	r1, [sp, #12]
   10894:	asr	r2, r2, #2
   10898:	ldr	r0, [pc, #284]	; 109bc <main@@Base+0x2c4>
   1089c:	bl	106b0 <printf@plt>
   108a0:	add	ip, sp, #24
   108a4:	mov	lr, r8
   108a8:	ldm	ip!, {r0, r1, r2, r3}
   108ac:	mov	r5, r6
   108b0:	ldr	r7, [pc, #228]	; 1099c <main@@Base+0x2a4>
   108b4:	stmia	lr!, {r0, r1, r2, r3}
   108b8:	ldm	ip, {r0, r1}
   108bc:	stm	lr, {r0, r1}
   108c0:	ldr	r0, [pc, #252]	; 109c4 <main@@Base+0x2cc>
   108c4:	bl	106bc <puts@plt>
   108c8:	ldr	r0, [pc, #212]	; 109a4 <main@@Base+0x2ac>
   108cc:	bl	106b0 <printf@plt>
   108d0:	ldr	r1, [r5, #4]!
   108d4:	mov	r0, r7
   108d8:	bl	106b0 <printf@plt>
   108dc:	cmp	r4, r5
   108e0:	bne	108d0 <main@@Base+0x1d8>
   108e4:	ldr	r0, [pc, #188]	; 109a8 <main@@Base+0x2b0>
   108e8:	bl	106bc <puts@plt>
   108ec:	mov	r0, r8
   108f0:	ldr	r3, [pc, #180]	; 109ac <main@@Base+0x2b4>
   108f4:	mov	r2, #4
   108f8:	mov	r1, #6
   108fc:	bl	10d18 <insertion_sort@@Base>
   10900:	ldr	r0, [pc, #168]	; 109b0 <main@@Base+0x2b8>
   10904:	bl	106b0 <printf@plt>
   10908:	ldr	r5, [pc, #140]	; 1099c <main@@Base+0x2a4>
   1090c:	ldr	r1, [r6, #4]!
   10910:	mov	r0, r5
   10914:	bl	106b0 <printf@plt>
   10918:	cmp	r6, r4
   1091c:	bne	1090c <main@@Base+0x214>
   10920:	ldr	r0, [pc, #128]	; 109a8 <main@@Base+0x2b0>
   10924:	bl	106bc <puts@plt>
   10928:	ldr	r0, [pc, #152]	; 109c8 <main@@Base+0x2d0>
   1092c:	bl	106bc <puts@plt>
   10930:	ldr	r3, [pc, #148]	; 109cc <main@@Base+0x2d4>
   10934:	ldm	r3, {r0, r1}
   10938:	str	r0, [sp, #16]
   1093c:	ldr	r0, [pc, #96]	; 109a4 <main@@Base+0x2ac>
   10940:	strb	r1, [sp, #20]
   10944:	bl	106b0 <printf@plt>
   10948:	add	r0, sp, #16
   1094c:	bl	106bc <puts@plt>
   10950:	add	r0, sp, #16
   10954:	bl	106e0 <strlen@plt>
   10958:	ldr	r3, [pc, #112]	; 109d0 <main@@Base+0x2d8>
   1095c:	mov	r2, #1
   10960:	mov	r1, r0
   10964:	add	r0, sp, #16
   10968:	bl	10b78 <sort@@Base>
   1096c:	ldr	r0, [pc, #60]	; 109b0 <main@@Base+0x2b8>
   10970:	bl	106b0 <printf@plt>
   10974:	add	r0, sp, #16
   10978:	bl	106bc <puts@plt>
   1097c:	mov	r0, #0
   10980:	add	sp, sp, #76	; 0x4c
   10984:	pop	{r4, r5, r6, r7, r8, r9, pc}
   10988:	ldr	r1, [sp, #12]
   1098c:	ldr	r0, [pc, #36]	; 109b8 <main@@Base+0x2c0>
   10990:	bl	106b0 <printf@plt>
   10994:	b	108a0 <main@@Base+0x1a8>
   10998:	andeq	r0, r1, r0, asr #28
   1099c:	andeq	r0, r1, r0, ror lr
   109a0:	andeq	r0, r1, r8, asr lr
   109a4:	andeq	r0, r1, r8, ror #28
   109a8:			; <UNDEFINED> instruction: 0x00010eb4
   109ac:	strdeq	r0, [r1], -ip
   109b0:	andeq	r0, r1, r4, ror lr
   109b4:	andeq	r0, r1, ip, ror lr
   109b8:			; <UNDEFINED> instruction: 0x00010eb8
   109bc:	andeq	r0, r1, r8, lsl #29
   109c0:	ldrdeq	r0, [r1], -ip
   109c4:	andeq	r0, r1, r8, ror #29
   109c8:	strdeq	r0, [r1], -r4
   109cc:	andeq	r0, r1, r0, lsl #30
   109d0:	andeq	r0, r1, r0, lsr #22

000109d4 <_start@@Base>:
   109d4:	mov	fp, #0
   109d8:	mov	lr, #0
   109dc:	pop	{r1}		; (ldr r1, [sp], #4)
   109e0:	mov	r2, sp
   109e4:	push	{r2}		; (str r2, [sp, #-4]!)
   109e8:	push	{r0}		; (str r0, [sp, #-4]!)
   109ec:	ldr	ip, [pc, #16]	; 10a04 <_start@@Base+0x30>
   109f0:	push	{ip}		; (str ip, [sp, #-4]!)
   109f4:	ldr	r0, [pc, #12]	; 10a08 <_start@@Base+0x34>
   109f8:	ldr	r3, [pc, #12]	; 10a0c <_start@@Base+0x38>
   109fc:	bl	106c8 <__libc_start_main@plt>
   10a00:	bl	106ec <abort@plt>
   10a04:	andeq	r0, r1, r0, lsr lr
   10a08:	strdeq	r0, [r1], -r8
   10a0c:	ldrdeq	r0, [r1], -r0	; <UNPREDICTABLE>
   10a10:	ldr	r3, [pc, #20]	; 10a2c <_start@@Base+0x58>
   10a14:	ldr	r2, [pc, #20]	; 10a30 <_start@@Base+0x5c>
   10a18:	add	r3, pc, r3
   10a1c:	ldr	r2, [r3, r2]
   10a20:	cmp	r2, #0
   10a24:	bxeq	lr
   10a28:	b	106d4 <__gmon_start__@plt>
   10a2c:	andeq	r1, r1, r0, ror #11
   10a30:	andeq	r0, r0, r4, lsr #32
   10a34:	ldr	r3, [pc, #28]	; 10a58 <_start@@Base+0x84>
   10a38:	ldr	r0, [pc, #28]	; 10a5c <_start@@Base+0x88>
   10a3c:	sub	r3, r3, r0
   10a40:	cmp	r3, #6
   10a44:	bxls	lr
   10a48:	ldr	r3, [pc, #16]	; 10a60 <_start@@Base+0x8c>
   10a4c:	cmp	r3, #0
   10a50:	bxeq	lr
   10a54:	bx	r3
   10a58:	andeq	r2, r2, r3, lsr r0
   10a5c:	andeq	r2, r2, r0, lsr r0
   10a60:	andeq	r0, r0, r0
   10a64:	ldr	r1, [pc, #36]	; 10a90 <_start@@Base+0xbc>
   10a68:	ldr	r0, [pc, #36]	; 10a94 <_start@@Base+0xc0>
   10a6c:	sub	r1, r1, r0
   10a70:	asr	r1, r1, #2
   10a74:	add	r1, r1, r1, lsr #31
   10a78:	asrs	r1, r1, #1
   10a7c:	bxeq	lr
   10a80:	ldr	r3, [pc, #16]	; 10a98 <_start@@Base+0xc4>
   10a84:	cmp	r3, #0
   10a88:	bxeq	lr
   10a8c:	bx	r3
   10a90:	andeq	r2, r2, r0, lsr r0
   10a94:	andeq	r2, r2, r0, lsr r0
   10a98:	andeq	r0, r0, r0
   10a9c:	push	{r4, lr}
   10aa0:	ldr	r4, [pc, #24]	; 10ac0 <_start@@Base+0xec>
   10aa4:	ldrb	r3, [r4]
   10aa8:	cmp	r3, #0
   10aac:	popne	{r4, pc}
   10ab0:	bl	10a34 <_start@@Base+0x60>
   10ab4:	mov	r3, #1
   10ab8:	strb	r3, [r4]
   10abc:	pop	{r4, pc}
   10ac0:	andeq	r2, r2, r0, lsr r0
   10ac4:	ldr	r0, [pc, #40]	; 10af4 <_start@@Base+0x120>
   10ac8:	ldr	r3, [r0]
   10acc:	cmp	r3, #0
   10ad0:	bne	10ad8 <_start@@Base+0x104>
   10ad4:	b	10a64 <_start@@Base+0x90>
   10ad8:	ldr	r3, [pc, #24]	; 10af8 <_start@@Base+0x124>
   10adc:	cmp	r3, #0
   10ae0:	beq	10ad4 <_start@@Base+0x100>
   10ae4:	push	{r4, lr}
   10ae8:	blx	r3
   10aec:	pop	{r4, lr}
   10af0:	b	10a64 <_start@@Base+0x90>
   10af4:	andeq	r1, r2, r4, lsl pc
   10af8:	andeq	r0, r0, r0

00010afc <comp_int_asc@@Base>:
   10afc:	ldr	r2, [r0]
   10b00:	ldr	r3, [r1]
   10b04:	cmp	r2, r3
   10b08:	blt	10b18 <comp_int_asc@@Base+0x1c>
   10b0c:	movgt	r0, #1
   10b10:	movle	r0, #0
   10b14:	bx	lr
   10b18:	mvn	r0, #0
   10b1c:	bx	lr

00010b20 <comp_char_desc@@Base>:
   10b20:	ldrb	r2, [r0]
   10b24:	ldrb	r3, [r1]
   10b28:	cmp	r2, r3
   10b2c:	bcc	10b3c <comp_char_desc@@Base+0x1c>
   10b30:	mvnhi	r0, #0
   10b34:	movls	r0, #0
   10b38:	bx	lr
   10b3c:	mov	r0, #1
   10b40:	bx	lr

00010b44 <get_elem@@Base>:
   10b44:	mla	r0, r2, r1, r0
   10b48:	bx	lr

00010b4c <swap@@Base>:
   10b4c:	cmp	r2, #0
   10b50:	bxle	lr
   10b54:	add	r2, r0, r2
   10b58:	sub	r1, r1, #1
   10b5c:	ldrb	ip, [r1, #1]
   10b60:	ldrb	r3, [r0]
   10b64:	strb	ip, [r0], #1
   10b68:	cmp	r0, r2
   10b6c:	strb	r3, [r1, #1]!
   10b70:	bne	10b5c <swap@@Base+0x10>
   10b74:	bx	lr

00010b78 <sort@@Base>:
   10b78:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10b7c:	subs	r6, r1, #0
   10b80:	sub	sp, sp, #12
   10b84:	ble	10c38 <sort@@Base+0xc0>
   10b88:	mov	r9, #0
   10b8c:	add	r9, r9, #1
   10b90:	mov	r8, r0
   10b94:	cmp	r6, r9
   10b98:	mov	r7, r3
   10b9c:	mov	sl, r2
   10ba0:	mov	r4, r8
   10ba4:	ble	10c30 <sort@@Base+0xb8>
   10ba8:	add	r3, r8, sl
   10bac:	mov	r5, r3
   10bb0:	mov	fp, r9
   10bb4:	str	r3, [sp, #4]
   10bb8:	mov	r1, r4
   10bbc:	mov	r0, r5
   10bc0:	blx	r7
   10bc4:	add	fp, fp, #1
   10bc8:	cmp	r0, #0
   10bcc:	movlt	r4, r5
   10bd0:	cmp	r6, fp
   10bd4:	add	r5, r5, sl
   10bd8:	bne	10bb8 <sort@@Base+0x40>
   10bdc:	cmp	sl, #0
   10be0:	ble	10c1c <sort@@Base+0xa4>
   10be4:	sub	r4, r4, #1
   10be8:	sub	r3, r8, #1
   10bec:	mov	r1, #0
   10bf0:	ldrb	r2, [r4, #1]
   10bf4:	ldrb	r0, [r3, #1]
   10bf8:	add	r1, r1, #1
   10bfc:	cmp	sl, r1
   10c00:	strb	r0, [r4, #1]!
   10c04:	strb	r2, [r3, #1]!
   10c08:	bgt	10bf0 <sort@@Base+0x78>
   10c0c:	cmp	r6, r9
   10c10:	ble	10c38 <sort@@Base+0xc0>
   10c14:	add	r3, r8, sl
   10c18:	str	r3, [sp, #4]
   10c1c:	ldr	r8, [sp, #4]
   10c20:	add	r9, r9, #1
   10c24:	cmp	r6, r9
   10c28:	mov	r4, r8
   10c2c:	bgt	10ba8 <sort@@Base+0x30>
   10c30:	cmp	sl, #0
   10c34:	bgt	10be4 <sort@@Base+0x6c>
   10c38:	add	sp, sp, #12
   10c3c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

00010c40 <linear_search@@Base>:
   10c40:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   10c44:	subs	r6, r2, #0
   10c48:	ldr	r8, [sp, #32]
   10c4c:	ble	10c94 <linear_search@@Base+0x54>
   10c50:	mov	r9, r3
   10c54:	mov	sl, r1
   10c58:	mov	r7, r0
   10c5c:	mov	r4, r1
   10c60:	mov	r5, #0
   10c64:	b	10c74 <linear_search@@Base+0x34>
   10c68:	add	r5, r5, #1
   10c6c:	cmp	r6, r5
   10c70:	beq	10c94 <linear_search@@Base+0x54>
   10c74:	mov	r0, r4
   10c78:	mov	r1, r7
   10c7c:	blx	r8
   10c80:	add	r4, r4, r6
   10c84:	cmp	r0, #0
   10c88:	bne	10c68 <linear_search@@Base+0x28>
   10c8c:	mla	r0, r5, r9, sl
   10c90:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   10c94:	mov	r0, #0
   10c98:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}

00010c9c <binary_search@@Base>:
   10c9c:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10ca0:	subs	r6, r2, #1
   10ca4:	ldr	r8, [sp, #40]	; 0x28
   10ca8:	movpl	sl, r3
   10cac:	movpl	r9, r1
   10cb0:	movpl	r7, r0
   10cb4:	movpl	r5, #0
   10cb8:	bpl	10cd8 <binary_search@@Base+0x3c>
   10cbc:	b	10d0c <binary_search@@Base+0x70>
   10cc0:	blx	r8
   10cc4:	cmn	r0, #1
   10cc8:	subeq	r6, r4, #1
   10ccc:	addne	r5, r4, #1
   10cd0:	cmp	r5, r6
   10cd4:	bgt	10d0c <binary_search@@Base+0x70>
   10cd8:	add	r2, r5, r6
   10cdc:	mov	r0, r7
   10ce0:	add	r2, r2, r2, lsr #31
   10ce4:	asr	r4, r2, #1
   10ce8:	mla	fp, sl, r4, r9
   10cec:	mov	r1, fp
   10cf0:	blx	r8
   10cf4:	mov	r1, fp
   10cf8:	cmp	r0, #0
   10cfc:	mov	r0, r7
   10d00:	beq	10cc0 <binary_search@@Base+0x24>
   10d04:	mov	r0, fp
   10d08:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10d0c:	mov	fp, #0
   10d10:	mov	r0, fp
   10d14:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

00010d18 <insertion_sort@@Base>:
   10d18:	cmp	r1, #1
   10d1c:	ble	10dcc <insertion_sort@@Base+0xb4>
   10d20:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10d24:	mov	r7, r3
   10d28:	sub	sp, sp, #20
   10d2c:	mov	fp, r2
   10d30:	mov	r9, r2
   10d34:	mov	r6, #0
   10d38:	mov	r8, #1
   10d3c:	str	r0, [sp, #12]
   10d40:	str	r1, [sp, #8]
   10d44:	ldr	r2, [sp, #12]
   10d48:	add	r3, r6, fp
   10d4c:	add	r5, r2, r3
   10d50:	sub	r6, r6, r9
   10d54:	mov	sl, r8
   10d58:	str	r3, [sp, #4]
   10d5c:	add	r4, r6, r5
   10d60:	mov	r1, r4
   10d64:	mov	r0, r5
   10d68:	blx	r7
   10d6c:	sub	sl, sl, #1
   10d70:	cmn	r0, #1
   10d74:	bne	10dac <insertion_sort@@Base+0x94>
   10d78:	cmp	fp, #0
   10d7c:	addgt	r0, r5, fp
   10d80:	movgt	r3, r5
   10d84:	ble	10da0 <insertion_sort@@Base+0x88>
   10d88:	ldrb	r1, [r4]
   10d8c:	ldrb	r2, [r3]
   10d90:	strb	r1, [r3], #1
   10d94:	cmp	r3, r0
   10d98:	strb	r2, [r4], #1
   10d9c:	bne	10d88 <insertion_sort@@Base+0x70>
   10da0:	cmp	sl, #0
   10da4:	sub	r5, r5, fp
   10da8:	bne	10d5c <insertion_sort@@Base+0x44>
   10dac:	ldr	r3, [sp, #8]
   10db0:	add	r8, r8, #1
   10db4:	cmp	r3, r8
   10db8:	add	r9, r9, fp
   10dbc:	ldr	r6, [sp, #4]
   10dc0:	bne	10d44 <insertion_sort@@Base+0x2c>
   10dc4:	add	sp, sp, #20
   10dc8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10dcc:	bx	lr

00010dd0 <__libc_csu_init@@Base>:
   10dd0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   10dd4:	mov	r7, r0
   10dd8:	ldr	r6, [pc, #72]	; 10e28 <__libc_csu_init@@Base+0x58>
   10ddc:	ldr	r5, [pc, #72]	; 10e2c <__libc_csu_init@@Base+0x5c>
   10de0:	add	r6, pc, r6
   10de4:	add	r5, pc, r5
   10de8:	sub	r6, r6, r5
   10dec:	mov	r8, r1
   10df0:	mov	r9, r2
   10df4:	bl	10690 <printf@plt-0x20>
   10df8:	asrs	r6, r6, #2
   10dfc:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   10e00:	mov	r4, #0
   10e04:	add	r4, r4, #1
   10e08:	ldr	r3, [r5], #4
   10e0c:	mov	r2, r9
   10e10:	mov	r1, r8
   10e14:	mov	r0, r7
   10e18:	blx	r3
   10e1c:	cmp	r6, r4
   10e20:	bne	10e04 <__libc_csu_init@@Base+0x34>
   10e24:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   10e28:	andeq	r1, r1, r8, lsr #2
   10e2c:	andeq	r1, r1, r0, lsr #2

00010e30 <__libc_csu_fini@@Base>:
   10e30:	bx	lr

Disassembly of section .fini:

00010e34 <.fini>:
   10e34:	push	{r3, lr}
   10e38:	pop	{r3, pc}
