
../compcert-repos/stcorp-coda-3a25f25/CMakeFiles/codadump.dir/tools/codadump/codadump-ascii.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <export_data_element_to_ascii>:
   0:	push	{r4, sl, fp, lr}
   4:	add	fp, sp, #8
   8:	movw	r0, #0
   c:	movw	r4, #0
  10:	movt	r0, #0
  14:	movt	r4, #0
  18:	ldrb	r1, [r0]
  1c:	cmp	r1, #0
  20:	beq	34 <export_data_element_to_ascii+0x34>
  24:	ldr	r1, [r4]
  28:	mov	r0, #10
  2c:	bl	0 <fputc>
  30:	b	3c <export_data_element_to_ascii+0x3c>
  34:	mov	r1, #1
  38:	strb	r1, [r0]
  3c:	movw	r0, #0
  40:	movt	r0, #0
  44:	ldr	r0, [r0]
  48:	cmp	r0, #0
  4c:	beq	6c <export_data_element_to_ascii+0x6c>
  50:	ldr	r0, [r4]
  54:	mov	r1, #2
  58:	mov	r2, #0
  5c:	bl	0 <print_full_field_name>
  60:	ldr	r1, [r4]
  64:	mov	r0, #10
  68:	bl	0 <fputc>
  6c:	movw	r0, #0
  70:	movt	r0, #0
  74:	ldr	r1, [r0]
  78:	cmp	r1, #1
  7c:	blt	94 <export_data_element_to_ascii+0x94>
  80:	add	r0, r0, r1, lsl #3
  84:	ldr	r1, [r0, #296]	; 0x128
  88:	ldr	r0, [r0, #300]	; 0x12c
  8c:	orrs	r0, r1, r0
  90:	popeq	{r4, sl, fp, pc}
  94:	ldr	r0, [r4]
  98:	mov	r1, #0
  9c:	mov	r2, #0
  a0:	mov	r3, #0
  a4:	pop	{r4, sl, fp, lr}
  a8:	b	ac <write_data>

000000ac <write_data>:
  ac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
  b0:	add	fp, sp, #28
  b4:	sub	sp, sp, #116	; 0x74
  b8:	movw	r9, #0
  bc:	mov	r8, r0
  c0:	mov	r6, r1
  c4:	str	r3, [sp, #52]	; 0x34
  c8:	str	r2, [sp, #40]	; 0x28
  cc:	movt	r9, #0
  d0:	add	r5, r9, r1, lsl #2
  d4:	sub	r1, fp, #52	; 0x34
  d8:	ldr	r0, [r5, #8]!
  dc:	bl	0 <coda_type_get_class>
  e0:	cmp	r0, #0
  e4:	beq	ec <write_data+0x40>
  e8:	bl	0 <handle_coda_error>
  ec:	ldr	r0, [fp, #-52]	; 0xffffffcc
  f0:	cmp	r0, #0
  f4:	beq	1d8 <write_data+0x12c>
  f8:	cmp	r0, #1
  fc:	bne	244 <write_data+0x198>
 100:	ldr	r2, [sp, #40]	; 0x28
 104:	add	r0, r2, r2, lsl #2
 108:	cmp	r2, #0
 10c:	add	sl, r9, r0, lsl #4
 110:	moveq	r0, #0
 114:	ldr	r1, [sl, #800]	; 0x320
 118:	streq	r0, [r9, #844]	; 0x34c
 11c:	mov	r2, sl
 120:	ldr	r0, [r2, #804]!	; 0x324
 124:	str	r2, [sp, #24]
 128:	movw	r2, #0
 12c:	movt	r2, #0
 130:	ldr	r7, [r2, #104]	; 0x68
 134:	add	r3, r0, r1
 138:	str	r3, [sp, #32]
 13c:	cmp	r7, r3
 140:	str	r7, [sp, #28]
 144:	blt	16c <write_data+0xc0>
 148:	ldr	r3, [r9, #3360]	; 0xd20
 14c:	ldr	r7, [sp, #40]	; 0x28
 150:	sub	r3, r3, #1
 154:	cmp	r3, r7
 158:	ble	16c <write_data+0xc0>
 15c:	ldr	r3, [sl, #840]	; 0x348
 160:	ldr	r7, [sl, #844]	; 0x34c
 164:	mul	r3, r3, r7
 168:	str	r3, [sl, #924]	; 0x39c
 16c:	cmp	r0, #1
 170:	str	r6, [sp, #16]
 174:	blt	400 <write_data+0x354>
 178:	add	r1, r2, r1, lsl #2
 17c:	add	r2, sl, #848	; 0x350
 180:	add	r3, sl, #844	; 0x34c
 184:	mov	r9, #1
 188:	mov	ip, #0
 18c:	add	r4, sp, #56	; 0x38
 190:	mov	r6, #0
 194:	b	1b8 <write_data+0x10c>
 198:	add	r5, r5, #4
 19c:	ldr	r7, [r5]
 1a0:	str	ip, [r2, r6]
 1a4:	subs	r0, r0, #1
 1a8:	mul	r9, r7, r9
 1ac:	str	r7, [r4, r6]
 1b0:	add	r6, r6, #4
 1b4:	beq	3f0 <write_data+0x344>
 1b8:	add	r5, r1, r6
 1bc:	ldr	r7, [r5, #72]	; 0x48
 1c0:	cmp	r7, #0
 1c4:	beq	198 <write_data+0xec>
 1c8:	ldr	r7, [r5, #108]	; 0x6c
 1cc:	ldr	r5, [r3]
 1d0:	add	r5, r7, r5, lsl #2
 1d4:	b	19c <write_data+0xf0>
 1d8:	ldr	r0, [sp, #52]	; 0x34
 1dc:	add	r5, r9, #144	; 0x90
 1e0:	add	r2, sp, #56	; 0x38
 1e4:	add	r7, r9, r0, lsl #2
 1e8:	mov	r0, r5
 1ec:	ldr	r1, [r7, #3492]!	; 0xda4
 1f0:	bl	0 <coda_cursor_get_record_field_available_status>
 1f4:	cmp	r0, #0
 1f8:	beq	200 <write_data+0x154>
 1fc:	bl	0 <handle_coda_error>
 200:	ldr	r0, [sp, #56]	; 0x38
 204:	cmp	r0, #0
 208:	beq	3f8 <write_data+0x34c>
 20c:	ldr	r1, [r7]
 210:	mov	r0, r5
 214:	bl	0 <coda_cursor_goto_record_field_by_index>
 218:	cmp	r0, #0
 21c:	beq	224 <write_data+0x178>
 220:	bl	0 <handle_coda_error>
 224:	ldr	r0, [sp, #52]	; 0x34
 228:	ldr	r2, [sp, #40]	; 0x28
 22c:	add	r1, r6, #1
 230:	add	r3, r0, #1
 234:	mov	r0, r8
 238:	bl	ac <write_data>
 23c:	mov	r0, r5
 240:	b	540 <write_data+0x494>
 244:	movw	r0, #0
 248:	str	r5, [sp, #48]	; 0x30
 24c:	movt	r0, #0
 250:	ldr	r0, [r0]
 254:	cmp	r0, #0
 258:	beq	334 <write_data+0x288>
 25c:	ldr	r0, [r9, #136]	; 0x88
 260:	cmp	r0, #1
 264:	blt	334 <write_data+0x288>
 268:	movw	r5, #0
 26c:	movw	r6, #0
 270:	mov	r0, #0
 274:	mov	r7, #0
 278:	add	r4, sp, #56	; 0x38
 27c:	movt	r5, #0
 280:	movt	r6, #0
 284:	str	r0, [sp, #52]	; 0x34
 288:	b	2bc <write_data+0x210>
 28c:	ldr	r0, [sp, #52]	; 0x34
 290:	movw	r4, #0
 294:	mov	r8, sl
 298:	movt	r4, #0
 29c:	mov	r9, r4
 2a0:	add	r4, sp, #56	; 0x38
 2a4:	add	r0, r0, #1
 2a8:	str	r0, [sp, #52]	; 0x34
 2ac:	ldr	r0, [r9, #136]	; 0x88
 2b0:	add	r7, r7, #1
 2b4:	cmp	r7, r0
 2b8:	bge	334 <write_data+0x288>
 2bc:	add	r0, r9, r7, lsl #2
 2c0:	mov	r1, r4
 2c4:	ldr	r0, [r0, #8]
 2c8:	bl	0 <coda_type_get_class>
 2cc:	cmp	r0, #0
 2d0:	beq	2d8 <write_data+0x22c>
 2d4:	bl	0 <handle_coda_error>
 2d8:	ldr	r0, [sp, #56]	; 0x38
 2dc:	cmp	r0, #1
 2e0:	bne	2ac <write_data+0x200>
 2e4:	ldr	r0, [sp, #52]	; 0x34
 2e8:	mov	sl, r8
 2ec:	add	r0, r0, r0, lsl #2
 2f0:	add	r0, r9, r0, lsl #4
 2f4:	mov	r4, r0
 2f8:	ldr	r1, [r4, #804]!	; 0x324
 2fc:	cmp	r1, #1
 300:	blt	28c <write_data+0x1e0>
 304:	add	r8, r0, #848	; 0x350
 308:	mov	r9, #0
 30c:	ldr	r2, [r8, r9, lsl #2]
 310:	ldr	r3, [r5]
 314:	mov	r0, sl
 318:	mov	r1, r6
 31c:	bl	0 <fprintf>
 320:	ldr	r0, [r4]
 324:	add	r9, r9, #1
 328:	cmp	r9, r0
 32c:	blt	30c <write_data+0x260>
 330:	b	28c <write_data+0x1e0>
 334:	ldr	r5, [sp, #48]	; 0x30
 338:	sub	r1, fp, #32
 33c:	ldr	r0, [r5]
 340:	bl	0 <coda_type_get_class>
 344:	cmp	r0, #0
 348:	beq	350 <write_data+0x2a4>
 34c:	bl	0 <handle_coda_error>
 350:	ldr	r0, [fp, #-32]	; 0xffffffe0
 354:	sub	r1, r0, #2
 358:	cmp	r1, #4
 35c:	bcs	54c <write_data+0x4a0>
 360:	ldr	r0, [r5]
 364:	sub	r1, fp, #36	; 0x24
 368:	bl	0 <coda_type_get_read_type>
 36c:	cmp	r0, #0
 370:	beq	378 <write_data+0x2cc>
 374:	bl	0 <handle_coda_error>
 378:	ldr	r0, [fp, #-36]	; 0xffffffdc
 37c:	add	r0, r0, #1
 380:	cmp	r0, #13
 384:	bhi	a54 <write_data+0x9a8>
 388:	add	r1, pc, #0
 38c:	ldr	pc, [r1, r0, lsl #2]
 390:	.word	0x00000a94
 394:	.word	0x000003c8
 398:	.word	0x00000634
 39c:	.word	0x000003c8
 3a0:	.word	0x00000634
 3a4:	.word	0x000003c8
 3a8:	.word	0x00000634
 3ac:	.word	0x000006ec
 3b0:	.word	0x0000099c
 3b4:	.word	0x00000664
 3b8:	.word	0x00000664
 3bc:	.word	0x000009d8
 3c0:	.word	0x0000071c
 3c4:	.word	0x000007cc
 3c8:	add	r0, r9, #144	; 0x90
 3cc:	add	r1, sp, #56	; 0x38
 3d0:	bl	0 <coda_cursor_read_int32>
 3d4:	cmp	r0, #0
 3d8:	beq	3e0 <write_data+0x334>
 3dc:	bl	0 <handle_coda_error>
 3e0:	ldr	r2, [sp, #56]	; 0x38
 3e4:	movw	r1, #0
 3e8:	movt	r1, #0
 3ec:	b	658 <write_data+0x5ac>
 3f0:	cmp	r9, #0
 3f4:	bne	404 <write_data+0x358>
 3f8:	sub	sp, fp, #28
 3fc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
 400:	mov	r9, #1
 404:	movw	r0, #0
 408:	movt	r0, #0
 40c:	add	r0, r0, #144	; 0x90
 410:	str	r0, [sp, #36]	; 0x24
 414:	bl	0 <coda_cursor_goto_first_array_element>
 418:	cmp	r0, #0
 41c:	beq	424 <write_data+0x378>
 420:	bl	0 <handle_coda_error>
 424:	cmp	r9, #1
 428:	blt	53c <write_data+0x490>
 42c:	add	r0, sl, #924	; 0x39c
 430:	mov	r4, r8
 434:	add	r8, sl, #844	; 0x34c
 438:	mov	r7, #0
 43c:	mov	r5, #0
 440:	str	r0, [sp, #20]
 444:	add	r0, sp, #56	; 0x38
 448:	sub	sl, r0, #4
 44c:	sub	r0, r9, #1
 450:	str	r0, [sp, #48]	; 0x30
 454:	ldr	r0, [sp, #40]	; 0x28
 458:	add	r0, r0, #1
 45c:	str	r0, [sp, #44]	; 0x2c
 460:	ldr	r0, [sp, #16]
 464:	add	r6, r0, #1
 468:	b	478 <write_data+0x3cc>
 46c:	add	r5, r5, #1
 470:	cmp	r5, r9
 474:	beq	53c <write_data+0x490>
 478:	ldr	r2, [sp, #44]	; 0x2c
 47c:	ldr	r3, [sp, #52]	; 0x34
 480:	mov	r0, r4
 484:	mov	r1, r6
 488:	bl	ac <write_data>
 48c:	ldr	r0, [sp, #48]	; 0x30
 490:	cmp	r5, r0
 494:	bge	46c <write_data+0x3c0>
 498:	ldr	r0, [sp, #36]	; 0x24
 49c:	bl	0 <coda_cursor_goto_next_array_element>
 4a0:	cmp	r0, #0
 4a4:	beq	4ac <write_data+0x400>
 4a8:	bl	0 <handle_coda_error>
 4ac:	ldr	r0, [sp, #32]
 4b0:	ldr	r1, [sp, #28]
 4b4:	cmp	r1, r0
 4b8:	blt	4e8 <write_data+0x43c>
 4bc:	movw	r0, #0
 4c0:	ldr	r1, [sp, #40]	; 0x28
 4c4:	movt	r0, #0
 4c8:	ldr	r0, [r0, #3360]	; 0xd20
 4cc:	sub	r0, r0, #1
 4d0:	cmp	r0, r1
 4d4:	ble	4e8 <write_data+0x43c>
 4d8:	ldr	r1, [sp, #20]
 4dc:	ldr	r0, [r1]
 4e0:	add	r0, r0, #1
 4e4:	str	r0, [r1]
 4e8:	movw	r0, #0
 4ec:	movt	r0, #0
 4f0:	ldr	r0, [r0]
 4f4:	cmp	r0, #0
 4f8:	beq	46c <write_data+0x3c0>
 4fc:	ldr	r0, [sp, #24]
 500:	ldr	r0, [r0]
 504:	cmp	r0, #1
 508:	blt	46c <write_data+0x3c0>
 50c:	ldr	r1, [r8, r0, lsl #2]
 510:	ldr	r2, [sl, r0, lsl #2]
 514:	add	r1, r1, #1
 518:	cmp	r1, r2
 51c:	str	r1, [r8, r0, lsl #2]
 520:	bne	46c <write_data+0x3c0>
 524:	sub	r1, r0, #1
 528:	str	r7, [r8, r0, lsl #2]
 52c:	cmp	r1, #0
 530:	mov	r0, r1
 534:	bgt	50c <write_data+0x460>
 538:	b	46c <write_data+0x3c0>
 53c:	ldr	r0, [sp, #36]	; 0x24
 540:	bl	0 <coda_cursor_goto_parent>
 544:	sub	sp, fp, #28
 548:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
 54c:	cmp	r0, #6
 550:	beq	570 <write_data+0x4c4>
 554:	cmp	r0, #2
 558:	bcs	a54 <write_data+0x9a8>
 55c:	movw	r0, #0
 560:	movw	r1, #0
 564:	movw	r3, #0
 568:	mov	r2, #368	; 0x170
 56c:	b	aa4 <write_data+0x9f8>
 570:	ldr	r0, [r5]
 574:	sub	r1, fp, #36	; 0x24
 578:	bl	0 <coda_type_get_special_type>
 57c:	cmp	r0, #0
 580:	beq	588 <write_data+0x4dc>
 584:	bl	0 <handle_coda_error>
 588:	ldr	r0, [fp, #-36]	; 0xffffffdc
 58c:	sub	r1, r0, #1
 590:	cmp	r1, #2
 594:	bcs	6a0 <write_data+0x5f4>
 598:	add	r0, r9, #144	; 0x90
 59c:	sub	r1, fp, #48	; 0x30
 5a0:	bl	0 <coda_cursor_read_double>
 5a4:	cmp	r0, #0
 5a8:	beq	5b0 <write_data+0x504>
 5ac:	bl	0 <handle_coda_error>
 5b0:	ldr	r0, [fp, #-36]	; 0xffffffdc
 5b4:	cmp	r0, #2
 5b8:	bne	a14 <write_data+0x968>
 5bc:	movw	r0, #0
 5c0:	movt	r0, #0
 5c4:	ldr	r0, [r0]
 5c8:	cmp	r0, #0
 5cc:	beq	a14 <write_data+0x968>
 5d0:	vldr	d0, [fp, #-48]	; 0xffffffd0
 5d4:	bl	0 <coda_isNaN>
 5d8:	cmp	r0, #0
 5dc:	bne	5f0 <write_data+0x544>
 5e0:	vldr	d0, [fp, #-48]	; 0xffffffd0
 5e4:	bl	0 <coda_isInf>
 5e8:	cmp	r0, #0
 5ec:	beq	a70 <write_data+0x9c4>
 5f0:	movw	r1, #0
 5f4:	mov	r0, #11
 5f8:	movt	r1, #0
 5fc:	vld1.64	{d16-d17}, [r1], r0
 600:	vld1.8	{d18-d19}, [r1]
 604:	add	r1, sp, #56	; 0x38
 608:	vst1.64	{d16-d17}, [r1], r0
 60c:	vst1.8	{d18-d19}, [r1]
 610:	movw	r0, #0
 614:	movt	r0, #0
 618:	ldr	r0, [r0]
 61c:	cmp	r0, #0
 620:	beq	a68 <write_data+0x9bc>
 624:	movw	r1, #0
 628:	add	r2, sp, #56	; 0x38
 62c:	movt	r1, #0
 630:	b	658 <write_data+0x5ac>
 634:	add	r0, r9, #144	; 0x90
 638:	add	r1, sp, #56	; 0x38
 63c:	bl	0 <coda_cursor_read_uint32>
 640:	cmp	r0, #0
 644:	beq	64c <write_data+0x5a0>
 648:	bl	0 <handle_coda_error>
 64c:	ldr	r2, [sp, #56]	; 0x38
 650:	movw	r1, #0
 654:	movt	r1, #0
 658:	mov	r0, r8
 65c:	bl	0 <fprintf>
 660:	b	a54 <write_data+0x9a8>
 664:	add	r0, r9, #144	; 0x90
 668:	add	r1, sp, #56	; 0x38
 66c:	bl	0 <coda_cursor_read_double>
 670:	cmp	r0, #0
 674:	beq	67c <write_data+0x5d0>
 678:	bl	0 <handle_coda_error>
 67c:	ldr	r0, [fp, #-36]	; 0xffffffdc
 680:	vldr	d16, [sp, #56]	; 0x38
 684:	movw	r2, #0
 688:	movw	r1, #0
 68c:	movt	r2, #0
 690:	movt	r1, #0
 694:	cmp	r0, #8
 698:	moveq	r1, r2
 69c:	b	a20 <write_data+0x974>
 6a0:	cmp	r0, #3
 6a4:	bne	a54 <write_data+0x9a8>
 6a8:	add	r0, r9, #144	; 0x90
 6ac:	add	r1, sp, #56	; 0x38
 6b0:	bl	0 <coda_cursor_read_complex_double_pair>
 6b4:	cmp	r0, #0
 6b8:	beq	6c0 <write_data+0x614>
 6bc:	bl	0 <handle_coda_error>
 6c0:	movw	r0, #0
 6c4:	vldr	d16, [sp, #56]	; 0x38
 6c8:	vldr	d17, [sp, #64]	; 0x40
 6cc:	movw	r1, #0
 6d0:	movt	r0, #0
 6d4:	movt	r1, #0
 6d8:	ldr	r0, [r0]
 6dc:	vstr	d17, [sp, #8]
 6e0:	vmov	r2, r3, d16
 6e4:	str	r0, [sp]
 6e8:	b	a24 <write_data+0x978>
 6ec:	add	r0, r9, #144	; 0x90
 6f0:	sub	r1, fp, #48	; 0x30
 6f4:	bl	0 <coda_cursor_read_int64>
 6f8:	cmp	r0, #0
 6fc:	beq	704 <write_data+0x658>
 700:	bl	0 <handle_coda_error>
 704:	ldr	r0, [fp, #-48]	; 0xffffffd0
 708:	ldr	r1, [fp, #-44]	; 0xffffffd4
 70c:	add	r5, sp, #56	; 0x38
 710:	mov	r2, r5
 714:	bl	0 <coda_str64>
 718:	b	9c8 <write_data+0x91c>
 71c:	add	r6, r9, #144	; 0x90
 720:	add	r1, sp, #56	; 0x38
 724:	mov	r0, r6
 728:	bl	0 <coda_cursor_get_string_length>
 72c:	cmp	r0, #0
 730:	beq	738 <write_data+0x68c>
 734:	bl	0 <handle_coda_error>
 738:	ldr	r0, [sp, #56]	; 0x38
 73c:	add	r7, r0, #1
 740:	mov	r0, r7
 744:	bl	0 <malloc>
 748:	mov	r5, r0
 74c:	cmp	r0, #0
 750:	bne	784 <write_data+0x6d8>
 754:	movw	r1, #0
 758:	movw	r3, #0
 75c:	mov	r0, #126	; 0x7e
 760:	mov	r2, r7
 764:	movt	r1, #0
 768:	movt	r3, #0
 76c:	str	r0, [sp]
 770:	mvn	r0, #0
 774:	bl	0 <coda_set_error>
 778:	bl	0 <handle_coda_error>
 77c:	ldr	r0, [sp, #56]	; 0x38
 780:	add	r7, r0, #1
 784:	mov	r0, r6
 788:	mov	r1, r5
 78c:	mov	r2, r7
 790:	bl	0 <coda_cursor_read_string>
 794:	cmp	r0, #0
 798:	beq	7a0 <write_data+0x6f4>
 79c:	bl	0 <handle_coda_error>
 7a0:	movw	r0, #0
 7a4:	movt	r0, #0
 7a8:	ldr	r0, [r0]
 7ac:	cmp	r0, #0
 7b0:	beq	a30 <write_data+0x984>
 7b4:	movw	r1, #0
 7b8:	mov	r0, r8
 7bc:	mov	r2, r5
 7c0:	movt	r1, #0
 7c4:	bl	0 <fprintf>
 7c8:	b	a3c <write_data+0x990>
 7cc:	add	r0, r9, #144	; 0x90
 7d0:	add	r1, sp, #56	; 0x38
 7d4:	str	r8, [sp, #52]	; 0x34
 7d8:	str	r0, [sp, #48]	; 0x30
 7dc:	bl	0 <coda_cursor_get_bit_size>
 7e0:	cmp	r0, #0
 7e4:	beq	7ec <write_data+0x740>
 7e8:	bl	0 <handle_coda_error>
 7ec:	ldr	sl, [sp, #56]	; 0x38
 7f0:	ldr	r7, [sp, #60]	; 0x3c
 7f4:	lsr	r0, sl, #3
 7f8:	asr	r4, r7, #3
 7fc:	orr	r0, r0, r7, lsl #29
 800:	adds	r5, r0, #1
 804:	adc	r9, r4, #0
 808:	ands	r8, sl, #7
 80c:	moveq	r5, r0
 810:	mov	r0, r5
 814:	bl	0 <malloc>
 818:	cmp	r8, #0
 81c:	mov	r6, r0
 820:	moveq	r9, r4
 824:	cmp	r0, #0
 828:	bne	85c <write_data+0x7b0>
 82c:	movw	r1, #0
 830:	movw	r3, #0
 834:	mov	r0, #163	; 0xa3
 838:	mov	r2, r5
 83c:	movt	r1, #0
 840:	movt	r3, #0
 844:	str	r0, [sp]
 848:	mvn	r0, #0
 84c:	bl	0 <coda_set_error>
 850:	bl	0 <handle_coda_error>
 854:	ldr	sl, [sp, #56]	; 0x38
 858:	ldr	r7, [sp, #60]	; 0x3c
 85c:	ldr	r0, [sp, #48]	; 0x30
 860:	mov	r1, r6
 864:	mov	r2, #0
 868:	mov	r3, #0
 86c:	str	sl, [sp]
 870:	str	r7, [sp, #4]
 874:	bl	0 <coda_cursor_read_bits>
 878:	ldr	r8, [sp, #52]	; 0x34
 87c:	cmp	r0, #0
 880:	beq	888 <write_data+0x7dc>
 884:	bl	0 <handle_coda_error>
 888:	subs	r0, r5, #1
 88c:	sbcs	r0, r9, #0
 890:	blt	990 <write_data+0x8e4>
 894:	movw	r7, #0
 898:	movw	r4, #0
 89c:	mov	sl, #0
 8a0:	movt	r7, #0
 8a4:	movt	r4, #0
 8a8:	b	8d4 <write_data+0x828>
 8ac:	movw	r0, #0
 8b0:	movt	r0, #0
 8b4:	mov	r1, #2
 8b8:	mov	r2, #1
 8bc:	mov	r3, r8
 8c0:	bl	0 <fwrite>
 8c4:	add	sl, sl, #1
 8c8:	subs	r0, sl, r5
 8cc:	rscs	r0, r9, #0
 8d0:	bge	990 <write_data+0x8e4>
 8d4:	ldrb	r2, [r6, sl]
 8d8:	sub	r0, r2, #7
 8dc:	cmp	r0, #6
 8e0:	bhi	914 <write_data+0x868>
 8e4:	add	r1, pc, #0
 8e8:	ldr	pc, [r1, r0, lsl #2]
 8ec:	.word	0x00000908
 8f0:	.word	0x00000934
 8f4:	.word	0x00000928
 8f8:	.word	0x00000940
 8fc:	.word	0x000008ac
 900:	.word	0x0000094c
 904:	.word	0x00000954
 908:	movw	r0, #0
 90c:	movt	r0, #0
 910:	b	8b4 <write_data+0x808>
 914:	cmp	r2, #92	; 0x5c
 918:	bne	95c <write_data+0x8b0>
 91c:	movw	r0, #0
 920:	movt	r0, #0
 924:	b	8b4 <write_data+0x808>
 928:	movw	r0, #0
 92c:	movt	r0, #0
 930:	b	8b4 <write_data+0x808>
 934:	movw	r0, #0
 938:	movt	r0, #0
 93c:	b	8b4 <write_data+0x808>
 940:	movw	r0, #0
 944:	movt	r0, #0
 948:	b	8b4 <write_data+0x808>
 94c:	mov	r0, r7
 950:	b	8b4 <write_data+0x808>
 954:	mov	r0, r4
 958:	b	8b4 <write_data+0x808>
 95c:	sub	r0, r2, #32
 960:	uxtb	r0, r0
 964:	cmp	r0, #94	; 0x5e
 968:	bhi	97c <write_data+0x8d0>
 96c:	mov	r0, r2
 970:	mov	r1, r8
 974:	bl	0 <fputc>
 978:	b	8c4 <write_data+0x818>
 97c:	movw	r1, #0
 980:	mov	r0, r8
 984:	movt	r1, #0
 988:	bl	0 <fprintf>
 98c:	b	8c4 <write_data+0x818>
 990:	mov	r0, r6
 994:	bl	0 <free>
 998:	b	a54 <write_data+0x9a8>
 99c:	add	r0, r9, #144	; 0x90
 9a0:	sub	r1, fp, #48	; 0x30
 9a4:	bl	0 <coda_cursor_read_uint64>
 9a8:	cmp	r0, #0
 9ac:	beq	9b4 <write_data+0x908>
 9b0:	bl	0 <handle_coda_error>
 9b4:	ldr	r0, [fp, #-48]	; 0xffffffd0
 9b8:	ldr	r1, [fp, #-44]	; 0xffffffd4
 9bc:	add	r5, sp, #56	; 0x38
 9c0:	mov	r2, r5
 9c4:	bl	0 <coda_str64u>
 9c8:	mov	r0, r5
 9cc:	mov	r1, r8
 9d0:	bl	0 <fputs>
 9d4:	b	a54 <write_data+0x9a8>
 9d8:	add	r0, r9, #144	; 0x90
 9dc:	add	r1, sp, #56	; 0x38
 9e0:	bl	0 <coda_cursor_read_char>
 9e4:	cmp	r0, #0
 9e8:	beq	9f0 <write_data+0x944>
 9ec:	bl	0 <handle_coda_error>
 9f0:	movw	r0, #0
 9f4:	ldrb	r2, [sp, #56]	; 0x38
 9f8:	movt	r0, #0
 9fc:	ldr	r0, [r0]
 a00:	cmp	r0, #0
 a04:	beq	a48 <write_data+0x99c>
 a08:	movw	r1, #0
 a0c:	movt	r1, #0
 a10:	b	658 <write_data+0x5ac>
 a14:	vldr	d16, [fp, #-48]	; 0xffffffd0
 a18:	movw	r1, #0
 a1c:	movt	r1, #0
 a20:	vmov	r2, r3, d16
 a24:	mov	r0, r8
 a28:	bl	0 <fprintf>
 a2c:	b	a54 <write_data+0x9a8>
 a30:	mov	r0, r5
 a34:	mov	r1, r8
 a38:	bl	0 <fputs>
 a3c:	mov	r0, r5
 a40:	bl	0 <free>
 a44:	b	a54 <write_data+0x9a8>
 a48:	mov	r0, r2
 a4c:	mov	r1, r8
 a50:	bl	0 <fputc>
 a54:	mov	r0, #10
 a58:	mov	r1, r8
 a5c:	bl	0 <fputc>
 a60:	sub	sp, fp, #28
 a64:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
 a68:	add	r0, sp, #56	; 0x38
 a6c:	b	9cc <write_data+0x920>
 a70:	vldr	d0, [fp, #-48]	; 0xffffffd0
 a74:	movw	r0, #0
 a78:	add	r1, sp, #56	; 0x38
 a7c:	movt	r0, #0
 a80:	bl	0 <coda_time_double_to_string>
 a84:	cmp	r0, #0
 a88:	beq	610 <write_data+0x564>
 a8c:	bl	0 <handle_coda_error>
 a90:	b	610 <write_data+0x564>
 a94:	movw	r0, #0
 a98:	movw	r1, #0
 a9c:	movw	r3, #0
 aa0:	movw	r2, #294	; 0x126
 aa4:	movt	r0, #0
 aa8:	movt	r1, #0
 aac:	movt	r3, #0
 ab0:	bl	0 <__assert_fail>
