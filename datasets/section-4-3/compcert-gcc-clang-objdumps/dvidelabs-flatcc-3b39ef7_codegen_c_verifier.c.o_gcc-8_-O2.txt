
../compcert-repos/dvidelabs-flatcc-3b39ef7/src/compiler/CMakeFiles/flatcc.dir/codegen_c_verifier.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <gen_table_verifier>:
   0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   4:	mov	r2, #220	; 0xdc
   8:	mov	r4, r1
   c:	strd	r6, [sp, #8]
  10:	mov	r1, #0
  14:	strd	r8, [sp, #16]
  18:	mov	r9, r0
  1c:	strd	sl, [sp, #24]
  20:	str	lr, [sp, #32]
  24:	sub	sp, sp, #508	; 0x1fc
  28:	add	r8, sp, #64	; 0x40
  2c:	add	sl, sp, #284	; 0x11c
  30:	mov	r0, r8
  34:	bl	0 <memset>
  38:	mov	r2, #220	; 0xdc
  3c:	mov	r1, #0
  40:	mov	r0, sl
  44:	bl	0 <memset>
  48:	mov	r1, r4
  4c:	mov	r2, r8
  50:	ldr	r0, [r4, #12]
  54:	bl	0 <__flatcc_fb_scoped_symbol_name>
  58:	mov	r2, r8
  5c:	movw	r1, #0
  60:	movt	r1, #0
  64:	ldr	r0, [r9, #204]	; 0xcc
  68:	bl	0 <fprintf>
  6c:	ldr	r4, [r4, #20]
  70:	ldr	r3, [r9, #204]	; 0xcc
  74:	cmp	r4, #0
  78:	beq	178 <gen_table_verifier+0x178>
  7c:	movw	r2, #0
  80:	movt	r2, #0
  84:	movw	fp, #0
  88:	movt	fp, #0
  8c:	mov	r1, #1
  90:	str	r2, [sp, #60]	; 0x3c
  94:	movw	r2, #0
  98:	movt	r2, #0
  9c:	str	r2, [sp, #32]
  a0:	ldrh	r2, [r4, #72]	; 0x48
  a4:	tst	r2, #4
  a8:	bne	14c <gen_table_verifier+0x14c>
  ac:	cmp	r1, #0
  b0:	beq	3fc <gen_table_verifier+0x3fc>
  b4:	movw	r0, #0
  b8:	movt	r0, #0
  bc:	mov	r2, #28
  c0:	mov	r1, #1
  c4:	bl	0 <fwrite>
  c8:	ldrh	r3, [r4, #24]
  cc:	ldrh	r5, [r4, #72]	; 0x48
  d0:	sub	r3, r3, #7
  d4:	ubfx	r5, r5, #8, #1
  d8:	cmp	r3, #8
  dc:	ldrls	pc, [pc, r3, lsl #2]
  e0:	b	12c <gen_table_verifier+0x12c>
  e4:	.word	0x00000268
  e8:	.word	0x00000108
  ec:	.word	0x0000030c
  f0:	.word	0x000002b8
  f4:	.word	0x0000012c
  f8:	.word	0x0000012c
  fc:	.word	0x0000012c
 100:	.word	0x000002d4
 104:	.word	0x00000230
 108:	ldrh	r0, [r4, #74]	; 0x4a
 10c:	movw	r1, #0
 110:	movt	r1, #0
 114:	ldrd	r2, [r4, #96]	; 0x60
 118:	str	r0, [sp, #8]
 11c:	ldrd	r6, [r4, #88]	; 0x58
 120:	ldr	r0, [r9, #204]	; 0xcc
 124:	strd	r6, [sp]
 128:	bl	0 <fprintf>
 12c:	ldr	r2, [r4, #4]
 130:	mov	r1, fp
 134:	ldr	r0, [r9, #204]	; 0xcc
 138:	ldr	r3, [r2]
 13c:	ldr	r2, [r2, #4]
 140:	bl	0 <fprintf>
 144:	ldr	r3, [r9, #204]	; 0xcc
 148:	mov	r1, #0
 14c:	ldr	r4, [r4]
 150:	cmp	r4, #0
 154:	bne	a0 <gen_table_verifier+0xa0>
 158:	cmp	r1, #0
 15c:	bne	178 <gen_table_verifier+0x178>
 160:	movw	r0, #0
 164:	movt	r0, #0
 168:	mov	r2, #15
 16c:	mov	r1, #1
 170:	bl	0 <fwrite>
 174:	ldr	r3, [r9, #204]	; 0xcc
 178:	mov	r2, #29
 17c:	mov	r1, #1
 180:	movw	r0, #0
 184:	movt	r0, #0
 188:	bl	0 <fwrite>
 18c:	mov	r2, #3
 190:	mov	r1, #1
 194:	ldr	r3, [r9, #204]	; 0xcc
 198:	movw	r0, #0
 19c:	movt	r0, #0
 1a0:	bl	0 <fwrite>
 1a4:	mov	r3, r8
 1a8:	mov	r2, r8
 1ac:	str	r8, [sp]
 1b0:	movw	r1, #0
 1b4:	movt	r1, #0
 1b8:	ldr	r0, [r9, #204]	; 0xcc
 1bc:	bl	0 <fprintf>
 1c0:	mov	r3, r8
 1c4:	mov	r2, r8
 1c8:	str	r8, [sp]
 1cc:	movw	r1, #0
 1d0:	movt	r1, #0
 1d4:	ldr	r0, [r9, #204]	; 0xcc
 1d8:	bl	0 <fprintf>
 1dc:	mov	r3, r8
 1e0:	mov	r2, r8
 1e4:	ldr	r0, [r9, #204]	; 0xcc
 1e8:	movw	r1, #0
 1ec:	movt	r1, #0
 1f0:	bl	0 <fprintf>
 1f4:	mov	r2, r8
 1f8:	mov	r3, r9
 1fc:	str	r8, [sp]
 200:	movw	r1, #0
 204:	movt	r1, #0
 208:	ldr	r0, [r9, #204]	; 0xcc
 20c:	bl	0 <fprintf>
 210:	mov	r0, #0
 214:	add	sp, sp, #508	; 0x1fc
 218:	ldrd	r4, [sp]
 21c:	ldrd	r6, [sp, #8]
 220:	ldrd	r8, [sp, #16]
 224:	ldrd	sl, [sp, #24]
 228:	add	sp, sp, #32
 22c:	pop	{pc}		; (ldr pc, [sp], #4)
 230:	ldr	r1, [r4, #16]
 234:	mov	r2, sl
 238:	ldr	r0, [r1, #12]
 23c:	bl	0 <__flatcc_fb_scoped_symbol_name>
 240:	ldr	r3, [r4, #16]
 244:	ldrh	r3, [r3, #8]
 248:	cmp	r3, #4
 24c:	ldrls	pc, [pc, r3, lsl #2]
 250:	b	4a0 <gen_table_verifier+0x4a0>
 254:	.word	0x00000390
 258:	.word	0x00000328
 25c:	.word	0x000004a0
 260:	.word	0x00000328
 264:	.word	0x000003ac
 268:	ldr	r1, [r4, #104]	; 0x68
 26c:	cmp	r1, #0
 270:	beq	328 <gen_table_verifier+0x328>
 274:	mov	r2, sl
 278:	ldr	r0, [r1, #12]
 27c:	bl	0 <__flatcc_fb_scoped_symbol_name>
 280:	ldr	r3, [r4, #104]	; 0x68
 284:	ldrh	r3, [r3, #8]
 288:	cmp	r3, #0
 28c:	bne	424 <gen_table_verifier+0x424>
 290:	ldrd	r2, [r4, #96]	; 0x60
 294:	movw	r1, #0
 298:	movt	r1, #0
 29c:	str	sl, [sp, #8]
 2a0:	ldrh	ip, [r4, #74]	; 0x4a
 2a4:	str	r5, [sp]
 2a8:	ldr	r0, [r9, #204]	; 0xcc
 2ac:	str	ip, [sp, #4]
 2b0:	bl	0 <fprintf>
 2b4:	b	12c <gen_table_verifier+0x12c>
 2b8:	movw	r1, #0
 2bc:	movt	r1, #0
 2c0:	ldrd	r2, [r4, #96]	; 0x60
 2c4:	str	r5, [sp]
 2c8:	ldr	r0, [r9, #204]	; 0xcc
 2cc:	bl	0 <fprintf>
 2d0:	b	12c <gen_table_verifier+0x12c>
 2d4:	ldr	r1, [r4, #16]
 2d8:	mov	r2, sl
 2dc:	ldr	r0, [r1, #12]
 2e0:	bl	0 <__flatcc_fb_scoped_symbol_name>
 2e4:	ldr	r3, [r4, #16]
 2e8:	ldrh	r3, [r3, #8]
 2ec:	cmp	r3, #4
 2f0:	ldrls	pc, [pc, r3, lsl #2]
 2f4:	b	450 <gen_table_verifier+0x450>
 2f8:	.word	0x000003e0
 2fc:	.word	0x00000108
 300:	.word	0x00000450
 304:	.word	0x00000108
 308:	.word	0x000003c4
 30c:	movw	r1, #0
 310:	movt	r1, #0
 314:	ldrd	r2, [r4, #96]	; 0x60
 318:	str	r5, [sp]
 31c:	ldr	r0, [r9, #204]	; 0xcc
 320:	bl	0 <fprintf>
 324:	b	12c <gen_table_verifier+0x12c>
 328:	ldrh	r3, [r4, #74]	; 0x4a
 32c:	ldrd	r6, [r4, #88]	; 0x58
 330:	str	r3, [sp, #56]	; 0x38
 334:	ldrd	r2, [r4, #96]	; 0x60
 338:	strd	r2, [sp, #40]	; 0x28
 33c:	orrs	r3, r6, r7
 340:	ldr	r3, [r9, #204]	; 0xcc
 344:	str	r3, [sp, #36]	; 0x24
 348:	beq	414 <gen_table_verifier+0x414>
 34c:	mov	r2, r6
 350:	mov	r3, r7
 354:	mvn	r0, #0
 358:	mov	r1, #0
 35c:	bl	0 <__aeabi_uldivmod>
 360:	strd	r0, [sp, #48]	; 0x30
 364:	str	r5, [sp]
 368:	strd	r6, [sp, #8]
 36c:	ldr	ip, [sp, #56]	; 0x38
 370:	ldrd	r6, [sp, #48]	; 0x30
 374:	ldr	r1, [sp, #32]
 378:	str	ip, [sp, #16]
 37c:	ldr	r0, [sp, #36]	; 0x24
 380:	strd	r6, [sp, #24]
 384:	ldrd	r2, [sp, #40]	; 0x28
 388:	bl	0 <fprintf>
 38c:	b	12c <gen_table_verifier+0x12c>
 390:	movw	r1, #0
 394:	movt	r1, #0
 398:	ldrd	r2, [r4, #96]	; 0x60
 39c:	stm	sp, {r5, sl}
 3a0:	ldr	r0, [r9, #204]	; 0xcc
 3a4:	bl	0 <fprintf>
 3a8:	b	12c <gen_table_verifier+0x12c>
 3ac:	ldr	r1, [sp, #60]	; 0x3c
 3b0:	ldrd	r2, [r4, #96]	; 0x60
 3b4:	stm	sp, {r5, sl}
 3b8:	ldr	r0, [r9, #204]	; 0xcc
 3bc:	bl	0 <fprintf>
 3c0:	b	12c <gen_table_verifier+0x12c>
 3c4:	movw	r1, #0
 3c8:	movt	r1, #0
 3cc:	ldrd	r2, [r4, #96]	; 0x60
 3d0:	stm	sp, {r5, sl}
 3d4:	ldr	r0, [r9, #204]	; 0xcc
 3d8:	bl	0 <fprintf>
 3dc:	b	12c <gen_table_verifier+0x12c>
 3e0:	movw	r1, #0
 3e4:	movt	r1, #0
 3e8:	ldrd	r2, [r4, #96]	; 0x60
 3ec:	stm	sp, {r5, sl}
 3f0:	ldr	r0, [r9, #204]	; 0xcc
 3f4:	bl	0 <fprintf>
 3f8:	b	12c <gen_table_verifier+0x12c>
 3fc:	movw	r0, #0
 400:	movt	r0, #0
 404:	mov	r2, #30
 408:	mov	r1, #1
 40c:	bl	0 <fwrite>
 410:	b	c8 <gen_table_verifier+0xc8>
 414:	mvn	r2, #0
 418:	mov	r3, #0
 41c:	strd	r2, [sp, #48]	; 0x30
 420:	b	364 <gen_table_verifier+0x364>
 424:	ldrh	r0, [r4, #74]	; 0x4a
 428:	movw	r1, #0
 42c:	movt	r1, #0
 430:	ldrd	r2, [r4, #96]	; 0x60
 434:	str	r0, [sp, #16]
 438:	ldrd	r6, [r4, #88]	; 0x58
 43c:	str	r5, [sp]
 440:	ldr	r0, [r9, #204]	; 0xcc
 444:	strd	r6, [sp, #8]
 448:	bl	0 <fprintf>
 44c:	b	12c <gen_table_verifier+0x12c>
 450:	movw	r1, #0
 454:	movt	r1, #0
 458:	movw	r3, #0
 45c:	movt	r3, #0
 460:	movw	r2, #0
 464:	movt	r2, #0
 468:	str	r1, [sp]
 46c:	movw	r1, #0
 470:	movt	r1, #0
 474:	ldr	r0, [r3]
 478:	mov	r3, #178	; 0xb2
 47c:	bl	0 <fprintf>
 480:	movw	r3, #0
 484:	movt	r3, #0
 488:	movw	r1, #0
 48c:	movt	r1, #0
 490:	movw	r0, #0
 494:	movt	r0, #0
 498:	mov	r2, #178	; 0xb2
 49c:	bl	0 <__assert_fail>
 4a0:	movw	r1, #0
 4a4:	movt	r1, #0
 4a8:	movw	r3, #0
 4ac:	movt	r3, #0
 4b0:	movw	r2, #0
 4b4:	movt	r2, #0
 4b8:	str	r1, [sp]
 4bc:	movw	r1, #0
 4c0:	movt	r1, #0
 4c4:	ldr	r0, [r3]
 4c8:	mov	r3, #202	; 0xca
 4cc:	bl	0 <fprintf>
 4d0:	movw	r3, #0
 4d4:	movt	r3, #0
 4d8:	movw	r1, #0
 4dc:	movt	r1, #0
 4e0:	movw	r0, #0
 4e4:	movt	r0, #0
 4e8:	mov	r2, #202	; 0xca
 4ec:	bl	0 <__assert_fail>

000004f0 <gen_union_verifier.isra.5>:
 4f0:	strd	r4, [sp, #-32]!	; 0xffffffe0
 4f4:	mov	r2, #220	; 0xdc
 4f8:	mov	r4, r1
 4fc:	strd	r6, [sp, #8]
 500:	mov	r5, r0
 504:	mov	r1, #0
 508:	strd	r8, [sp, #16]
 50c:	str	sl, [sp, #24]
 510:	str	lr, [sp, #28]
 514:	sub	sp, sp, #464	; 0x1d0
 518:	add	r0, sp, #24
 51c:	bl	0 <memset>
 520:	mov	r2, #220	; 0xdc
 524:	mov	r1, #0
 528:	add	r0, sp, #244	; 0xf4
 52c:	bl	0 <memset>
 530:	mov	r1, r4
 534:	add	r2, sp, #24
 538:	ldr	r0, [r4, #12]
 53c:	bl	0 <__flatcc_fb_scoped_symbol_name>
 540:	add	r2, sp, #24
 544:	movw	r1, #0
 548:	movt	r1, #0
 54c:	ldr	r0, [r5]
 550:	bl	0 <fprintf>
 554:	ldr	r4, [r4, #20]
 558:	cmp	r4, #0
 55c:	beq	658 <gen_union_verifier.isra.5+0x168>
 560:	movw	r8, #0
 564:	movt	r8, #0
 568:	movw	sl, #0
 56c:	movt	sl, #0
 570:	movw	r9, #0
 574:	movt	r9, #0
 578:	b	5c4 <gen_union_verifier.isra.5+0xd4>
 57c:	ldr	r1, [r4, #16]
 580:	add	r2, sp, #244	; 0xf4
 584:	ldr	r0, [r1, #12]
 588:	bl	0 <__flatcc_fb_scoped_symbol_name>
 58c:	ldr	ip, [r4, #16]
 590:	ldrh	r3, [ip, #8]
 594:	cmp	r3, #0
 598:	bne	690 <gen_union_verifier.isra.5+0x1a0>
 59c:	add	r3, sp, #244	; 0xf4
 5a0:	mov	r1, sl
 5a4:	ldr	r2, [r4, #48]	; 0x30
 5a8:	str	r7, [sp]
 5ac:	str	r6, [sp, #4]
 5b0:	ldr	r0, [r5]
 5b4:	bl	0 <fprintf>
 5b8:	ldr	r4, [r4]
 5bc:	cmp	r4, #0
 5c0:	beq	658 <gen_union_verifier.isra.5+0x168>
 5c4:	ldrh	r3, [r4, #24]
 5c8:	ldr	r2, [r4, #4]
 5cc:	cmp	r3, #10
 5d0:	ldrd	r6, [r2]
 5d4:	beq	634 <gen_union_verifier.isra.5+0x144>
 5d8:	cmp	r3, #14
 5dc:	beq	57c <gen_union_verifier.isra.5+0x8c>
 5e0:	cmp	r3, #0
 5e4:	beq	5b8 <gen_union_verifier.isra.5+0xc8>
 5e8:	movw	r1, #0
 5ec:	movt	r1, #0
 5f0:	movw	r3, #0
 5f4:	movt	r3, #0
 5f8:	movw	r2, #0
 5fc:	movt	r2, #0
 600:	str	r1, [sp]
 604:	movw	r1, #0
 608:	movt	r1, #0
 60c:	ldr	r0, [r3]
 610:	mov	r3, #83	; 0x53
 614:	bl	0 <fprintf>
 618:	movw	r1, #0
 61c:	movt	r1, #0
 620:	ldr	r3, [pc, #232]	; 710 <gen_union_verifier.isra.5+0x220>
 624:	movw	r0, #0
 628:	movt	r0, #0
 62c:	mov	r2, #83	; 0x53
 630:	bl	0 <__assert_fail>
 634:	mov	r3, r7
 638:	mov	r1, r8
 63c:	ldr	r2, [r4, #48]	; 0x30
 640:	str	r6, [sp]
 644:	ldr	r0, [r5]
 648:	bl	0 <fprintf>
 64c:	ldr	r4, [r4]
 650:	cmp	r4, #0
 654:	bne	5c4 <gen_union_verifier.isra.5+0xd4>
 658:	ldr	r3, [r5]
 65c:	mov	r2, #47	; 0x2f
 660:	mov	r1, #1
 664:	movw	r0, #0
 668:	movt	r0, #0
 66c:	bl	0 <fwrite>
 670:	mov	r0, #0
 674:	add	sp, sp, #464	; 0x1d0
 678:	ldrd	r4, [sp]
 67c:	ldrd	r6, [sp, #8]
 680:	ldrd	r8, [sp, #16]
 684:	ldr	sl, [sp, #24]
 688:	add	sp, sp, #28
 68c:	pop	{pc}		; (ldr pc, [sp], #4)
 690:	cmp	r3, #1
 694:	bne	6c4 <gen_union_verifier.isra.5+0x1d4>
 698:	ldr	r2, [r4, #48]	; 0x30
 69c:	mov	r1, r9
 6a0:	str	r7, [sp, #12]
 6a4:	str	r6, [sp, #16]
 6a8:	ldrh	r3, [ip, #104]	; 0x68
 6ac:	ldr	r0, [r5]
 6b0:	str	r3, [sp, #8]
 6b4:	ldrd	r6, [ip, #112]	; 0x70
 6b8:	strd	r6, [sp]
 6bc:	bl	0 <fprintf>
 6c0:	b	5b8 <gen_union_verifier.isra.5+0xc8>
 6c4:	movw	r1, #0
 6c8:	movt	r1, #0
 6cc:	movw	r3, #0
 6d0:	movt	r3, #0
 6d4:	movw	r2, #0
 6d8:	movt	r2, #0
 6dc:	str	r1, [sp]
 6e0:	movw	r1, #0
 6e4:	movt	r1, #0
 6e8:	ldr	r0, [r3]
 6ec:	mov	r3, #74	; 0x4a
 6f0:	bl	0 <fprintf>
 6f4:	movw	r1, #0
 6f8:	movt	r1, #0
 6fc:	ldr	r3, [pc, #12]	; 710 <gen_union_verifier.isra.5+0x220>
 700:	movw	r0, #0
 704:	movt	r0, #0
 708:	mov	r2, #74	; 0x4a
 70c:	bl	0 <__assert_fail>
 710:	.word	0x00000014

00000714 <__flatcc_fb_gen_c_verifier>:
 714:	ldr	r3, [r0, #208]	; 0xd0
 718:	movw	r1, #0
 71c:	movt	r1, #0
 720:	strd	r4, [sp, #-32]!	; 0xffffffe0
 724:	mov	r4, r0
 728:	ldr	r0, [r0, #204]	; 0xcc
 72c:	ldr	r3, [r3, #164]	; 0xa4
 730:	strd	r6, [sp, #8]
 734:	strd	r8, [sp, #16]
 738:	str	sl, [sp, #24]
 73c:	str	lr, [sp, #28]
 740:	sub	sp, sp, #240	; 0xf0
 744:	mov	r2, r3
 748:	bl	0 <fprintf>
 74c:	mov	r2, #81	; 0x51
 750:	mov	r1, #1
 754:	ldr	r3, [r4, #204]	; 0xcc
 758:	movw	r0, #0
 75c:	movt	r0, #0
 760:	bl	0 <fwrite>
 764:	movw	r1, #0
 768:	movt	r1, #0
 76c:	ldr	r0, [r4, #204]	; 0xcc
 770:	ldr	r3, [r4, #208]	; 0xd0
 774:	ldr	r2, [r3, #164]	; 0xa4
 778:	bl	0 <fprintf>
 77c:	movw	r1, #0
 780:	movt	r1, #0
 784:	ldr	r0, [r4, #204]	; 0xcc
 788:	ldr	r3, [r4, #208]	; 0xd0
 78c:	ldr	r2, [r3, #160]	; 0xa0
 790:	bl	0 <fprintf>
 794:	mov	r2, #7
 798:	mov	r1, #1
 79c:	ldr	r3, [r4, #204]	; 0xcc
 7a0:	movw	r0, #0
 7a4:	movt	r0, #0
 7a8:	bl	0 <fwrite>
 7ac:	mov	r2, #36	; 0x24
 7b0:	mov	r1, #1
 7b4:	ldr	r3, [r4, #204]	; 0xcc
 7b8:	movw	r0, #0
 7bc:	movt	r0, #0
 7c0:	bl	0 <fwrite>
 7c4:	mov	r0, r4
 7c8:	movw	r2, #0
 7cc:	movt	r2, #0
 7d0:	movw	r1, #0
 7d4:	movt	r1, #0
 7d8:	bl	0 <__flatcc_fb_gen_c_includes>
 7dc:	ldr	r1, [r4, #204]	; 0xcc
 7e0:	ldr	r3, [r4, #212]	; 0xd4
 7e4:	ldr	r3, [r3, #140]	; 0x8c
 7e8:	cmp	r3, #0
 7ec:	bne	a48 <__flatcc_fb_gen_c_verifier+0x334>
 7f0:	mov	r0, #10
 7f4:	bl	0 <fputc>
 7f8:	add	r0, sp, #20
 7fc:	mov	r2, #220	; 0xdc
 800:	mov	r1, #0
 804:	bl	0 <memset>
 808:	ldr	r3, [r4, #208]	; 0xd0
 80c:	ldr	r5, [r3, #40]	; 0x28
 810:	cmp	r5, #0
 814:	beq	868 <__flatcc_fb_gen_c_verifier+0x154>
 818:	movw	r6, #0
 81c:	movt	r6, #0
 820:	b	830 <__flatcc_fb_gen_c_verifier+0x11c>
 824:	ldr	r5, [r5]
 828:	cmp	r5, #0
 82c:	beq	868 <__flatcc_fb_gen_c_verifier+0x154>
 830:	ldrh	r3, [r5, #8]
 834:	cmp	r3, #0
 838:	bne	824 <__flatcc_fb_gen_c_verifier+0x110>
 83c:	mov	r1, r5
 840:	add	r2, sp, #20
 844:	ldr	r0, [r5, #12]
 848:	bl	0 <__flatcc_fb_scoped_symbol_name>
 84c:	add	r2, sp, #20
 850:	mov	r1, r6
 854:	ldr	r0, [r4, #204]	; 0xcc
 858:	bl	0 <fprintf>
 85c:	ldr	r5, [r5]
 860:	cmp	r5, #0
 864:	bne	830 <__flatcc_fb_gen_c_verifier+0x11c>
 868:	mov	r0, #10
 86c:	ldr	r1, [r4, #204]	; 0xcc
 870:	bl	0 <fputc>
 874:	ldr	r3, [r4, #208]	; 0xd0
 878:	ldr	r5, [r3, #40]	; 0x28
 87c:	cmp	r5, #0
 880:	beq	a00 <__flatcc_fb_gen_c_verifier+0x2ec>
 884:	add	r6, r4, #204	; 0xcc
 888:	b	898 <__flatcc_fb_gen_c_verifier+0x184>
 88c:	ldr	r5, [r5]
 890:	cmp	r5, #0
 894:	beq	8bc <__flatcc_fb_gen_c_verifier+0x1a8>
 898:	ldrh	r3, [r5, #8]
 89c:	cmp	r3, #4
 8a0:	bne	88c <__flatcc_fb_gen_c_verifier+0x178>
 8a4:	mov	r1, r5
 8a8:	mov	r0, r6
 8ac:	bl	4f0 <gen_union_verifier.isra.5>
 8b0:	ldr	r5, [r5]
 8b4:	cmp	r5, #0
 8b8:	bne	898 <__flatcc_fb_gen_c_verifier+0x184>
 8bc:	ldr	r3, [r4, #208]	; 0xd0
 8c0:	ldr	r5, [r3, #40]	; 0x28
 8c4:	cmp	r5, #0
 8c8:	beq	a00 <__flatcc_fb_gen_c_verifier+0x2ec>
 8cc:	movw	sl, #0
 8d0:	movt	sl, #0
 8d4:	movw	r9, #0
 8d8:	movt	r9, #0
 8dc:	movw	r8, #0
 8e0:	movt	r8, #0
 8e4:	b	8f4 <__flatcc_fb_gen_c_verifier+0x1e0>
 8e8:	ldr	r5, [r5]
 8ec:	cmp	r5, #0
 8f0:	beq	9bc <__flatcc_fb_gen_c_verifier+0x2a8>
 8f4:	ldrh	r3, [r5, #8]
 8f8:	cmp	r3, #1
 8fc:	bne	8e8 <__flatcc_fb_gen_c_verifier+0x1d4>
 900:	mov	r2, #220	; 0xdc
 904:	mov	r1, #0
 908:	add	r0, sp, #20
 90c:	bl	0 <memset>
 910:	mov	r1, r5
 914:	add	r2, sp, #20
 918:	ldr	r0, [r5, #12]
 91c:	bl	0 <__flatcc_fb_scoped_symbol_name>
 920:	ldrh	ip, [r5, #104]	; 0x68
 924:	add	r3, sp, #20
 928:	mov	r1, sl
 92c:	mov	r2, r3
 930:	ldr	r0, [r4, #204]	; 0xcc
 934:	str	ip, [sp, #8]
 938:	ldrd	r6, [r5, #112]	; 0x70
 93c:	strd	r6, [sp]
 940:	bl	0 <fprintf>
 944:	ldrh	ip, [r5, #104]	; 0x68
 948:	add	r3, sp, #20
 94c:	mov	r1, r9
 950:	mov	r2, r3
 954:	ldr	r0, [r4, #204]	; 0xcc
 958:	str	ip, [sp, #8]
 95c:	ldrd	r6, [r5, #112]	; 0x70
 960:	strd	r6, [sp]
 964:	bl	0 <fprintf>
 968:	ldrh	ip, [r5, #104]	; 0x68
 96c:	mov	r3, r4
 970:	add	r2, sp, #20
 974:	mov	r1, r8
 978:	ldr	r0, [r4, #204]	; 0xcc
 97c:	str	ip, [sp, #8]
 980:	ldrd	r6, [r5, #112]	; 0x70
 984:	strd	r6, [sp]
 988:	bl	0 <fprintf>
 98c:	ldrh	r3, [r5, #104]	; 0x68
 990:	movw	r1, #0
 994:	movt	r1, #0
 998:	add	r2, sp, #20
 99c:	ldr	r0, [r4, #204]	; 0xcc
 9a0:	str	r3, [sp, #8]
 9a4:	ldrd	r6, [r5, #112]	; 0x70
 9a8:	strd	r6, [sp]
 9ac:	bl	0 <fprintf>
 9b0:	ldr	r5, [r5]
 9b4:	cmp	r5, #0
 9b8:	bne	8f4 <__flatcc_fb_gen_c_verifier+0x1e0>
 9bc:	ldr	r3, [r4, #208]	; 0xd0
 9c0:	ldr	r5, [r3, #40]	; 0x28
 9c4:	cmp	r5, #0
 9c8:	bne	9dc <__flatcc_fb_gen_c_verifier+0x2c8>
 9cc:	b	a00 <__flatcc_fb_gen_c_verifier+0x2ec>
 9d0:	ldr	r5, [r5]
 9d4:	cmp	r5, #0
 9d8:	beq	a00 <__flatcc_fb_gen_c_verifier+0x2ec>
 9dc:	ldrh	r3, [r5, #8]
 9e0:	cmp	r3, #0
 9e4:	bne	9d0 <__flatcc_fb_gen_c_verifier+0x2bc>
 9e8:	mov	r1, r5
 9ec:	mov	r0, r4
 9f0:	bl	0 <gen_table_verifier>
 9f4:	ldr	r5, [r5]
 9f8:	cmp	r5, #0
 9fc:	bne	9dc <__flatcc_fb_gen_c_verifier+0x2c8>
 a00:	ldr	r0, [r4, #204]	; 0xcc
 a04:	ldr	r3, [r4, #212]	; 0xd4
 a08:	ldr	r3, [r3, #140]	; 0x8c
 a0c:	cmp	r3, #0
 a10:	bne	a68 <__flatcc_fb_gen_c_verifier+0x354>
 a14:	ldr	r3, [r4, #208]	; 0xd0
 a18:	movw	r1, #0
 a1c:	movt	r1, #0
 a20:	ldr	r2, [r3, #164]	; 0xa4
 a24:	bl	0 <fprintf>
 a28:	mov	r0, #0
 a2c:	add	sp, sp, #240	; 0xf0
 a30:	ldrd	r4, [sp]
 a34:	ldrd	r6, [sp, #8]
 a38:	ldrd	r8, [sp, #16]
 a3c:	ldr	sl, [sp, #24]
 a40:	add	sp, sp, #28
 a44:	pop	{pc}		; (ldr pc, [sp], #4)
 a48:	mov	r3, r1
 a4c:	movw	r0, #0
 a50:	movt	r0, #0
 a54:	mov	r1, #1
 a58:	mov	r2, #36	; 0x24
 a5c:	bl	0 <fwrite>
 a60:	ldr	r1, [r4, #204]	; 0xcc
 a64:	b	7f0 <__flatcc_fb_gen_c_verifier+0xdc>
 a68:	mov	r3, r0
 a6c:	mov	r2, #36	; 0x24
 a70:	movw	r0, #0
 a74:	movt	r0, #0
 a78:	mov	r1, #1
 a7c:	bl	0 <fwrite>
 a80:	ldr	r0, [r4, #204]	; 0xcc
 a84:	b	a14 <__flatcc_fb_gen_c_verifier+0x300>
