
../compcert-repos/prog2/CMakeFiles/0.10.dir/Aula00_Conceitos_base/10.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <nova_tarefa>:
   0:	push	{fp, lr}
   4:	mov	fp, sp
   8:	sub	sp, sp, #8
   c:	mov	r1, r0
  10:	add	r0, r0, #64	; 0x40
  14:	str	r0, [sp]
  18:	movw	r0, #0
  1c:	add	r2, r1, #30
  20:	add	r3, r1, #60	; 0x3c
  24:	movt	r0, #0
  28:	bl	0 <__isoc99_scanf>
  2c:	sub	r0, r0, #4
  30:	clz	r0, r0
  34:	lsr	r0, r0, #5
  38:	mov	sp, fp
  3c:	pop	{fp, pc}

00000040 <ler_tarefas>:
  40:	push	{r4, r5, r6, sl, fp, lr}
  44:	add	fp, sp, #16
  48:	sub	sp, sp, #8
  4c:	movw	r6, #0
  50:	mov	r5, r0
  54:	mvn	r4, #0
  58:	movt	r6, #0
  5c:	add	r0, r5, #64	; 0x40
  60:	add	r2, r5, #30
  64:	add	r3, r5, #60	; 0x3c
  68:	mov	r1, r5
  6c:	str	r0, [sp]
  70:	mov	r0, r6
  74:	bl	0 <__isoc99_scanf>
  78:	add	r4, r4, #1
  7c:	cmp	r4, #99	; 0x63
  80:	bhi	90 <ler_tarefas+0x50>
  84:	add	r5, r5, #68	; 0x44
  88:	cmp	r0, #4
  8c:	beq	5c <ler_tarefas+0x1c>
  90:	mov	r0, r4
  94:	sub	sp, fp, #16
  98:	pop	{r4, r5, r6, sl, fp, pc}

0000009c <lista_tarefas>:
  9c:	push	{r4, r5, r6, sl, fp, lr}
  a0:	add	fp, sp, #16
  a4:	sub	sp, sp, #8
  a8:	cmp	r1, #1
  ac:	blt	e8 <lista_tarefas+0x4c>
  b0:	movw	r6, #0
  b4:	mov	r4, r1
  b8:	mov	r5, r0
  bc:	movt	r6, #0
  c0:	ldr	r0, [r5, #64]	; 0x40
  c4:	ldr	r3, [r5, #60]	; 0x3c
  c8:	add	r2, r5, #30
  cc:	mov	r1, r5
  d0:	str	r0, [sp]
  d4:	mov	r0, r6
  d8:	bl	0 <printf>
  dc:	add	r5, r5, #68	; 0x44
  e0:	subs	r4, r4, #1
  e4:	bne	c0 <lista_tarefas+0x24>
  e8:	sub	sp, fp, #16
  ec:	pop	{r4, r5, r6, sl, fp, pc}

000000f0 <analisa_tarefas>:
  f0:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
  f4:	add	fp, sp, #24
  f8:	cmp	r1, #1
  fc:	blt	168 <analisa_tarefas+0x78>
 100:	add	r6, r0, #60	; 0x3c
 104:	mov	r9, r2
 108:	mov	r8, r1
 10c:	mov	r0, #0
 110:	mov	r4, r1
 114:	mov	r7, #0
 118:	b	12c <analisa_tarefas+0x3c>
 11c:	add	r7, r5, r7
 120:	add	r6, r6, #68	; 0x44
 124:	subs	r4, r4, #1
 128:	beq	150 <analisa_tarefas+0x60>
 12c:	ldr	r5, [r6]
 130:	cmp	r5, r0
 134:	ble	11c <analisa_tarefas+0x2c>
 138:	sub	r1, r6, #60	; 0x3c
 13c:	mov	r0, r9
 140:	mov	r2, #68	; 0x44
 144:	bl	0 <memcpy>
 148:	mov	r0, r5
 14c:	b	11c <analisa_tarefas+0x2c>
 150:	vmov	s0, r8
 154:	vmov	s2, r7
 158:	vcvt.f32.s32	s0, s0
 15c:	vcvt.f32.s32	s2, s2
 160:	vdiv.f32	s0, s2, s0
 164:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
 168:	vldr	s0, [pc, #4]	; 174 <analisa_tarefas+0x84>
 16c:	vdiv.f32	s0, s0, s0
 170:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
 174:	.word	0x00000000

00000178 <main>:
 178:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
 17c:	add	fp, sp, #24
 180:	sub	sp, sp, #2784	; 0xae0
 184:	sub	sp, sp, #4096	; 0x1000
 188:	movw	r6, #0
 18c:	mvn	r4, #0
 190:	mov	r7, #0
 194:	add	r5, sp, #76	; 0x4c
 198:	movt	r6, #0
 19c:	add	r1, r5, r7
 1a0:	add	r0, r1, #64	; 0x40
 1a4:	add	r2, r1, #30
 1a8:	add	r3, r1, #60	; 0x3c
 1ac:	str	r0, [sp]
 1b0:	mov	r0, r6
 1b4:	bl	0 <__isoc99_scanf>
 1b8:	add	r4, r4, #1
 1bc:	add	r7, r7, #68	; 0x44
 1c0:	cmp	r4, #99	; 0x63
 1c4:	bhi	1d0 <main+0x58>
 1c8:	cmp	r0, #4
 1cc:	beq	19c <main+0x24>
 1d0:	cmp	r7, #68	; 0x44
 1d4:	bne	1f4 <main+0x7c>
 1d8:	movw	r0, #0
 1dc:	mov	r1, #0
 1e0:	movt	r0, #0
 1e4:	bl	0 <printf>
 1e8:	vldr	s0, [pc, #220]	; 2cc <main+0x154>
 1ec:	vmov.f32	s2, s0
 1f0:	b	298 <main+0x120>
 1f4:	movw	r6, #0
 1f8:	mov	r7, r4
 1fc:	movt	r6, #0
 200:	ldr	r0, [r5, #64]	; 0x40
 204:	ldr	r3, [r5, #60]	; 0x3c
 208:	add	r2, r5, #30
 20c:	mov	r1, r5
 210:	str	r0, [sp]
 214:	mov	r0, r6
 218:	bl	0 <printf>
 21c:	subs	r7, r7, #1
 220:	add	r5, r5, #68	; 0x44
 224:	bne	200 <main+0x88>
 228:	movw	r0, #0
 22c:	mov	r1, r4
 230:	movt	r0, #0
 234:	bl	0 <printf>
 238:	add	r0, sp, #76	; 0x4c
 23c:	add	r8, sp, #8
 240:	mov	r5, r4
 244:	mov	r7, #0
 248:	add	r6, r0, #60	; 0x3c
 24c:	mov	r0, #0
 250:	b	264 <main+0xec>
 254:	add	r7, r9, r7
 258:	subs	r5, r5, #1
 25c:	add	r6, r6, #68	; 0x44
 260:	beq	288 <main+0x110>
 264:	ldr	r9, [r6]
 268:	cmp	r9, r0
 26c:	ble	254 <main+0xdc>
 270:	sub	r1, r6, #60	; 0x3c
 274:	mov	r0, r8
 278:	mov	r2, #68	; 0x44
 27c:	bl	0 <memcpy>
 280:	mov	r0, r9
 284:	b	254 <main+0xdc>
 288:	vmov	s0, r4
 28c:	vmov	s2, r7
 290:	vcvt.f32.s32	s0, s0
 294:	vcvt.f32.s32	s2, s2
 298:	vdiv.f32	s0, s2, s0
 29c:	movw	r0, #0
 2a0:	movt	r0, #0
 2a4:	vcvt.f64.f32	d16, s0
 2a8:	vmov	r2, r3, d16
 2ac:	bl	0 <printf>
 2b0:	movw	r0, #0
 2b4:	add	r1, sp, #8
 2b8:	movt	r0, #0
 2bc:	bl	0 <printf>
 2c0:	mov	r0, #0
 2c4:	sub	sp, fp, #24
 2c8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
 2cc:	.word	0x00000000
