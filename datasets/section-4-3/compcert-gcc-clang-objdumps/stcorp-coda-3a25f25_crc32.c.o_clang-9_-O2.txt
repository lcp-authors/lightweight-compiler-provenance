
../compcert-repos/stcorp-coda-3a25f25/CMakeFiles/coda_static.dir/libcoda/zlib/crc32.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <coda_get_crc_table>:
   0:	movw	r0, #0
   4:	movt	r0, #0
   8:	bx	lr

0000000c <coda_crc32>:
   c:	cmp	r1, #0
  10:	moveq	r0, #0
  14:	bxeq	lr
  18:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
  1c:	add	fp, sp, #28
  20:	sub	sp, sp, #8
  24:	mvn	r3, r0
  28:	cmp	r2, #0
  2c:	beq	a0 <coda_crc32+0x94>
  30:	movw	lr, #0
  34:	sub	r2, r2, #32
  38:	movt	lr, #0
  3c:	tst	r1, #3
  40:	beq	68 <coda_crc32+0x5c>
  44:	ldrb	r0, [r1], #1
  48:	uxtb	r6, r3
  4c:	sub	r2, r2, #1
  50:	cmn	r2, #32
  54:	eor	r0, r6, r0
  58:	ldr	r0, [lr, r0, lsl #2]
  5c:	eor	r3, r0, r3, lsr #8
  60:	bne	3c <coda_crc32+0x30>
  64:	b	a0 <coda_crc32+0x94>
  68:	add	r0, r2, #32
  6c:	cmp	r0, #32
  70:	bcs	ac <coda_crc32+0xa0>
  74:	cmp	r0, #4
  78:	bcs	294 <coda_crc32+0x288>
  7c:	cmp	r0, #0
  80:	beq	a0 <coda_crc32+0x94>
  84:	ldrb	r2, [r1], #1
  88:	uxtb	r7, r3
  8c:	subs	r0, r0, #1
  90:	eor	r2, r7, r2
  94:	ldr	r2, [lr, r2, lsl #2]
  98:	eor	r3, r2, r3, lsr #8
  9c:	bne	84 <coda_crc32+0x78>
  a0:	mvn	r0, r3
  a4:	sub	sp, fp, #28
  a8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
  ac:	mov	sl, #0
  b0:	add	r8, lr, #3072	; 0xc00
  b4:	add	r4, lr, #2048	; 0x800
  b8:	add	r5, lr, #1024	; 0x400
  bc:	mov	r6, r1
  c0:	ldr	r7, [r6, -sl]!
  c4:	eor	r3, r7, r3
  c8:	uxtb	r7, r3
  cc:	ubfx	r0, r3, #8, #8
  d0:	ldr	r0, [r4, r0, lsl #2]
  d4:	ldr	r7, [r8, r7, lsl #2]
  d8:	eor	r0, r0, r7
  dc:	ubfx	r7, r3, #16, #8
  e0:	lsr	r3, r3, #24
  e4:	ldr	r7, [r5, r7, lsl #2]
  e8:	ldr	r3, [lr, r3, lsl #2]
  ec:	eor	r0, r0, r7
  f0:	ldmib	r6, {r7, r9}
  f4:	eor	r0, r0, r3
  f8:	ldr	r3, [r6, #12]
  fc:	eor	r0, r0, r7
 100:	uxtb	r7, r0
 104:	str	r3, [sp]
 108:	ldr	r3, [r6, #16]
 10c:	ldr	r7, [r8, r7, lsl #2]
 110:	str	r3, [sp, #4]
 114:	ubfx	ip, r0, #8, #8
 118:	ldr	r3, [r4, ip, lsl #2]
 11c:	eor	r3, r3, r7
 120:	ubfx	r7, r0, #16, #8
 124:	lsr	r0, r0, #24
 128:	ldr	r7, [r5, r7, lsl #2]
 12c:	ldr	r0, [lr, r0, lsl #2]
 130:	eor	r3, r3, r7
 134:	eor	r0, r3, r0
 138:	eor	r0, r0, r9
 13c:	uxtb	r3, r0
 140:	ubfx	r7, r0, #8, #8
 144:	ldr	r7, [r4, r7, lsl #2]
 148:	ldr	r3, [r8, r3, lsl #2]
 14c:	eor	r3, r7, r3
 150:	ubfx	r7, r0, #16, #8
 154:	lsr	r0, r0, #24
 158:	ldr	r7, [r5, r7, lsl #2]
 15c:	ldr	r0, [lr, r0, lsl #2]
 160:	eor	r3, r3, r7
 164:	eor	r0, r3, r0
 168:	ldr	r3, [sp]
 16c:	eor	r0, r0, r3
 170:	uxtb	r3, r0
 174:	ubfx	r7, r0, #8, #8
 178:	ldr	r7, [r4, r7, lsl #2]
 17c:	ldr	r3, [r8, r3, lsl #2]
 180:	eor	r3, r7, r3
 184:	ubfx	r7, r0, #16, #8
 188:	lsr	r0, r0, #24
 18c:	ldr	r7, [r5, r7, lsl #2]
 190:	ldr	r0, [lr, r0, lsl #2]
 194:	eor	r3, r3, r7
 198:	eor	r0, r3, r0
 19c:	ldr	r3, [sp, #4]
 1a0:	eor	r0, r0, r3
 1a4:	uxtb	r3, r0
 1a8:	ubfx	r7, r0, #8, #8
 1ac:	ldr	r7, [r4, r7, lsl #2]
 1b0:	ldr	r3, [r8, r3, lsl #2]
 1b4:	eor	r3, r7, r3
 1b8:	ubfx	r7, r0, #16, #8
 1bc:	lsr	r0, r0, #24
 1c0:	ldr	r7, [r5, r7, lsl #2]
 1c4:	ldr	r0, [lr, r0, lsl #2]
 1c8:	eor	r3, r3, r7
 1cc:	eor	r0, r3, r0
 1d0:	ldr	r3, [r6, #20]
 1d4:	eor	r0, r0, r3
 1d8:	uxtb	r3, r0
 1dc:	ubfx	r7, r0, #8, #8
 1e0:	ldr	r7, [r4, r7, lsl #2]
 1e4:	ldr	r3, [r8, r3, lsl #2]
 1e8:	eor	r3, r7, r3
 1ec:	ubfx	r7, r0, #16, #8
 1f0:	lsr	r0, r0, #24
 1f4:	ldr	r7, [r5, r7, lsl #2]
 1f8:	ldr	r0, [lr, r0, lsl #2]
 1fc:	eor	r3, r3, r7
 200:	eor	r0, r3, r0
 204:	ldr	r3, [r6, #24]
 208:	eor	r0, r0, r3
 20c:	uxtb	r3, r0
 210:	ubfx	r7, r0, #8, #8
 214:	ldr	r7, [r4, r7, lsl #2]
 218:	ldr	r3, [r8, r3, lsl #2]
 21c:	eor	r3, r7, r3
 220:	ubfx	r7, r0, #16, #8
 224:	lsr	r0, r0, #24
 228:	ldr	r7, [r5, r7, lsl #2]
 22c:	ldr	r0, [lr, r0, lsl #2]
 230:	eor	r3, r3, r7
 234:	eor	r0, r3, r0
 238:	ldr	r3, [r6, #28]
 23c:	eor	r0, r0, r3
 240:	uxtb	r3, r0
 244:	ubfx	r7, r0, #8, #8
 248:	ldr	r7, [r4, r7, lsl #2]
 24c:	ldr	r3, [r8, r3, lsl #2]
 250:	eor	r3, r7, r3
 254:	ubfx	r7, r0, #16, #8
 258:	lsr	r0, r0, #24
 25c:	ldr	r7, [r5, r7, lsl #2]
 260:	ldr	r0, [lr, r0, lsl #2]
 264:	eor	r3, r3, r7
 268:	eor	r3, r3, r0
 26c:	add	r0, r2, sl
 270:	sub	sl, sl, #32
 274:	cmp	r0, #31
 278:	bhi	bc <coda_crc32+0xb0>
 27c:	bic	r6, r2, #31
 280:	add	r1, r1, r6
 284:	sub	r0, r2, r6
 288:	add	r1, r1, #32
 28c:	cmp	r0, #4
 290:	bcc	7c <coda_crc32+0x70>
 294:	sub	r2, r0, #4
 298:	mov	r5, r1
 29c:	lsr	r6, r2, #2
 2a0:	ldr	r7, [r5], #4
 2a4:	sub	r0, r0, #4
 2a8:	cmp	r0, #3
 2ac:	eor	r3, r7, r3
 2b0:	uxtb	r7, r3
 2b4:	ubfx	r4, r3, #8, #8
 2b8:	add	r4, lr, r4, lsl #2
 2bc:	add	r7, lr, r7, lsl #2
 2c0:	ldr	r4, [r4, #2048]	; 0x800
 2c4:	ldr	r7, [r7, #3072]	; 0xc00
 2c8:	eor	r7, r4, r7
 2cc:	ubfx	r4, r3, #16, #8
 2d0:	lsr	r3, r3, #24
 2d4:	add	r4, lr, r4, lsl #2
 2d8:	ldr	r3, [lr, r3, lsl #2]
 2dc:	ldr	r4, [r4, #1024]	; 0x400
 2e0:	eor	r7, r7, r4
 2e4:	eor	r3, r7, r3
 2e8:	bhi	2a0 <coda_crc32+0x294>
 2ec:	add	r0, r1, r6, lsl #2
 2f0:	add	r1, r0, #4
 2f4:	and	r0, r2, #3
 2f8:	cmp	r0, #0
 2fc:	bne	84 <coda_crc32+0x78>
 300:	b	a0 <coda_crc32+0x94>

00000304 <coda_crc32_combine>:
 304:	b	310 <crc32_combine_>
 308:	nop	{0}
 30c:	nop	{0}

00000310 <crc32_combine_>:
 310:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
 314:	add	fp, sp, #24
 318:	sub	sp, sp, #256	; 0x100
 31c:	cmp	r2, #1
 320:	blt	5c0 <crc32_combine_+0x2b0>
 324:	add	r7, pc, #676	; 0x2a4
 328:	add	lr, pc, #688	; 0x2b0
 32c:	add	r8, pc, #700	; 0x2bc
 330:	add	r5, pc, #712	; 0x2c8
 334:	mov	ip, sp
 338:	add	r4, pc, #720	; 0x2d0
 33c:	vld1.64	{d16-d17}, [r7 :128]
 340:	add	r7, pc, #728	; 0x2d8
 344:	add	r6, pc, #740	; 0x2e4
 348:	vld1.64	{d22-d23}, [r4 :128]
 34c:	vld1.64	{d24-d25}, [r5 :128]
 350:	add	r3, ip, #16
 354:	vld1.64	{d26-d27}, [r8 :128]
 358:	vld1.64	{d28-d29}, [lr :128]
 35c:	movw	r5, #33568	; 0x8320
 360:	mov	r4, #0
 364:	add	lr, sp, #128	; 0x80
 368:	mov	r8, #0
 36c:	vld1.64	{d18-d19}, [r6 :128]
 370:	vld1.64	{d20-d21}, [r7 :128]
 374:	add	r6, r3, #80	; 0x50
 378:	movt	r5, #60856	; 0xedb8
 37c:	vst1.32	{d16-d17}, [ip]
 380:	add	r7, pc, #696	; 0x2b8
 384:	vld1.64	{d16-d17}, [r7 :128]
 388:	add	r7, r3, #64	; 0x40
 38c:	vst1.32	{d18-d19}, [r6]
 390:	vst1.32	{d20-d21}, [r7]
 394:	add	r7, r3, #48	; 0x30
 398:	vst1.32	{d16-d17}, [r7]
 39c:	add	r7, r3, #32
 3a0:	vst1.32	{d22-d23}, [r7]
 3a4:	add	r7, r3, #16
 3a8:	vst1.32	{d24-d25}, [r7]
 3ac:	mov	r7, #96	; 0x60
 3b0:	vst1.32	{d26-d27}, [r3], r7
 3b4:	vst1.32	{d28-d29}, [r3]
 3b8:	cmp	r5, #0
 3bc:	mov	r6, #0
 3c0:	beq	3ec <crc32_combine_+0xdc>
 3c4:	mov	r6, #0
 3c8:	mov	r7, ip
 3cc:	tst	r5, #1
 3d0:	ldrne	r3, [r7]
 3d4:	add	r7, r7, #4
 3d8:	eorne	r6, r3, r6
 3dc:	lsr	r3, r5, #1
 3e0:	cmp	r4, r5, lsr #1
 3e4:	mov	r5, r3
 3e8:	bne	3cc <crc32_combine_+0xbc>
 3ec:	str	r6, [lr, r8, lsl #2]
 3f0:	add	r8, r8, #1
 3f4:	cmp	r8, #32
 3f8:	beq	404 <crc32_combine_+0xf4>
 3fc:	ldr	r5, [ip, r8, lsl #2]
 400:	b	3b8 <crc32_combine_+0xa8>
 404:	mov	r3, #0
 408:	mov	ip, sp
 40c:	mov	r8, #0
 410:	b	424 <crc32_combine_+0x114>
 414:	str	r5, [ip, r8, lsl #2]
 418:	add	r8, r8, #1
 41c:	cmp	r8, #32
 420:	beq	460 <crc32_combine_+0x150>
 424:	ldr	r6, [lr, r8, lsl #2]
 428:	mov	r5, #0
 42c:	cmp	r6, #0
 430:	beq	414 <crc32_combine_+0x104>
 434:	mov	r5, #0
 438:	mov	r7, lr
 43c:	tst	r6, #1
 440:	ldrne	r4, [r7]
 444:	add	r7, r7, #4
 448:	eorne	r5, r4, r5
 44c:	lsr	r4, r6, #1
 450:	cmp	r3, r6, lsr #1
 454:	mov	r6, r4
 458:	bne	43c <crc32_combine_+0x12c>
 45c:	b	414 <crc32_combine_+0x104>
 460:	add	lr, sp, #128	; 0x80
 464:	mov	r3, #0
 468:	b	47c <crc32_combine_+0x16c>
 46c:	mov	r0, r2
 470:	cmp	r3, r8, asr #2
 474:	asr	r2, r8, #2
 478:	beq	5bc <crc32_combine_+0x2ac>
 47c:	mov	r8, r2
 480:	mov	r2, #0
 484:	b	498 <crc32_combine_+0x188>
 488:	str	r5, [lr, r2, lsl #2]
 48c:	add	r2, r2, #1
 490:	cmp	r2, #32
 494:	beq	4d0 <crc32_combine_+0x1c0>
 498:	ldr	r6, [ip, r2, lsl #2]
 49c:	mov	r5, #0
 4a0:	cmp	r6, #0
 4a4:	beq	488 <crc32_combine_+0x178>
 4a8:	mov	r7, ip
 4ac:	tst	r6, #1
 4b0:	ldrne	r4, [r7]
 4b4:	add	r7, r7, #4
 4b8:	eorne	r5, r4, r5
 4bc:	lsr	r4, r6, #1
 4c0:	cmp	r3, r6, lsr #1
 4c4:	mov	r6, r4
 4c8:	bne	4ac <crc32_combine_+0x19c>
 4cc:	b	488 <crc32_combine_+0x178>
 4d0:	tst	r8, #1
 4d4:	bne	4e8 <crc32_combine_+0x1d8>
 4d8:	mov	r2, r0
 4dc:	cmp	r8, #2
 4e0:	bcs	524 <crc32_combine_+0x214>
 4e4:	b	5b8 <crc32_combine_+0x2a8>
 4e8:	mov	r2, #0
 4ec:	cmp	r0, #0
 4f0:	beq	51c <crc32_combine_+0x20c>
 4f4:	mov	r2, #0
 4f8:	mov	r5, lr
 4fc:	tst	r0, #1
 500:	ldrne	r4, [r5]
 504:	add	r5, r5, #4
 508:	eorne	r2, r4, r2
 50c:	lsr	r4, r0, #1
 510:	cmp	r3, r0, lsr #1
 514:	mov	r0, r4
 518:	bne	4fc <crc32_combine_+0x1ec>
 51c:	cmp	r8, #2
 520:	bcc	5b8 <crc32_combine_+0x2a8>
 524:	mov	r0, #0
 528:	b	53c <crc32_combine_+0x22c>
 52c:	str	r5, [ip, r0, lsl #2]
 530:	add	r0, r0, #1
 534:	cmp	r0, #32
 538:	beq	578 <crc32_combine_+0x268>
 53c:	ldr	r6, [lr, r0, lsl #2]
 540:	mov	r5, #0
 544:	cmp	r6, #0
 548:	beq	52c <crc32_combine_+0x21c>
 54c:	mov	r5, #0
 550:	mov	r7, lr
 554:	tst	r6, #1
 558:	ldrne	r4, [r7]
 55c:	add	r7, r7, #4
 560:	eorne	r5, r4, r5
 564:	lsr	r4, r6, #1
 568:	cmp	r3, r6, lsr #1
 56c:	mov	r6, r4
 570:	bne	554 <crc32_combine_+0x244>
 574:	b	52c <crc32_combine_+0x21c>
 578:	tst	r8, #2
 57c:	beq	46c <crc32_combine_+0x15c>
 580:	mov	r0, #0
 584:	cmp	r2, #0
 588:	beq	470 <crc32_combine_+0x160>
 58c:	mov	r0, #0
 590:	mov	r5, ip
 594:	tst	r2, #1
 598:	ldrne	r4, [r5]
 59c:	add	r5, r5, #4
 5a0:	eorne	r0, r4, r0
 5a4:	lsr	r4, r2, #1
 5a8:	cmp	r3, r2, lsr #1
 5ac:	mov	r2, r4
 5b0:	bne	594 <crc32_combine_+0x284>
 5b4:	b	470 <crc32_combine_+0x160>
 5b8:	mov	r0, r2
 5bc:	eor	r0, r0, r1
 5c0:	sub	sp, fp, #24
 5c4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
 5c8:	nop	{0}
 5cc:	nop	{0}
 5d0:	.word	0xedb88320
 5d4:	.word	0x00000001
 5d8:	.word	0x00000002
 5dc:	.word	0x00000004
 5e0:	.word	0x08000000
 5e4:	.word	0x10000000
 5e8:	.word	0x20000000
 5ec:	.word	0x40000000
 5f0:	.word	0x00000008
 5f4:	.word	0x00000010
 5f8:	.word	0x00000020
 5fc:	.word	0x00000040
 600:	.word	0x00000080
 604:	.word	0x00000100
 608:	.word	0x00000200
 60c:	.word	0x00000400
 610:	.word	0x00000800
 614:	.word	0x00001000
 618:	.word	0x00002000
 61c:	.word	0x00004000
 620:	.word	0x00080000
 624:	.word	0x00100000
 628:	.word	0x00200000
 62c:	.word	0x00400000
 630:	.word	0x00800000
 634:	.word	0x01000000
 638:	.word	0x02000000
 63c:	.word	0x04000000
 640:	.word	0x00008000
 644:	.word	0x00010000
 648:	.word	0x00020000
 64c:	.word	0x00040000

00000650 <coda_crc32_combine64>:
 650:	b	310 <crc32_combine_>
