
../compcert-repos/stcorp-coda-3a25f25/CMakeFiles/coda_static.dir/libcoda/coda-ascii.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <coda_ascii_reopen_with_definition>:
   0:	push	{r4, r5, r6, r7, r9, sl, fp, lr}
   4:	add	fp, sp, #24
   8:	sub	sp, sp, #8
   c:	cmp	r1, #0
  10:	beq	154 <coda_ascii_reopen_with_definition+0x154>
  14:	ldr	r7, [r0]
  18:	mov	r4, r0
  1c:	ldr	r0, [r7, #16]
  20:	cmp	r0, #1
  24:	bne	16c <coda_ascii_reopen_with_definition+0x16c>
  28:	ldr	r0, [r1]
  2c:	mov	r6, r1
  30:	cmp	r0, #0
  34:	bne	184 <coda_ascii_reopen_with_definition+0x184>
  38:	mov	r0, #80	; 0x50
  3c:	bl	0 <malloc>
  40:	cmp	r0, #0
  44:	beq	f8 <coda_ascii_reopen_with_definition+0xf8>
  48:	mov	r5, r0
  4c:	mov	r3, #0
  50:	add	r0, r7, #8
  54:	add	r1, r7, #40	; 0x28
  58:	str	r3, [r5]
  5c:	add	r2, r5, #8
  60:	ldm	r0, {r0, r9}
  64:	stm	r2, {r0, r9}
  68:	ldr	r0, [r6, #28]
  6c:	str	r3, [r5, #16]
  70:	str	r0, [r5, #20]
  74:	str	r6, [r5, #24]
  78:	str	r3, [r5, #28]
  7c:	str	r3, [r5, #32]
  80:	mvn	r6, #0
  84:	ldm	r1, {r0, r9}
  88:	str	r0, [r2, #32]
  8c:	str	r9, [r2, #36]	; 0x24
  90:	str	r3, [r1]
  94:	str	r3, [r1, #4]
  98:	ldr	r0, [r7, #48]	; 0x30
  9c:	str	r0, [r5, #48]	; 0x30
  a0:	str	r3, [r7, #48]	; 0x30
  a4:	ldr	r0, [r4]
  a8:	ldr	r1, [r0, #52]	; 0x34
  ac:	str	r1, [r5, #52]	; 0x34
  b0:	ldr	r1, [r0, #56]	; 0x38
  b4:	str	r1, [r5, #56]	; 0x38
  b8:	str	r6, [r0, #56]	; 0x38
  bc:	str	r3, [r5, #76]	; 0x4c
  c0:	str	r3, [r5, #72]	; 0x48
  c4:	str	r3, [r5, #68]	; 0x44
  c8:	str	r6, [r5, #64]	; 0x40
  cc:	str	r3, [r5, #60]	; 0x3c
  d0:	ldr	r0, [r0]
  d4:	bl	0 <strdup>
  d8:	cmp	r0, #0
  dc:	str	r0, [r5]
  e0:	beq	124 <coda_ascii_reopen_with_definition+0x124>
  e4:	ldr	r0, [r4]
  e8:	bl	0 <coda_close>
  ec:	mov	r6, #0
  f0:	str	r5, [r4]
  f4:	b	148 <coda_ascii_reopen_with_definition+0x148>
  f8:	movw	r1, #0
  fc:	movw	r3, #0
 100:	mov	r0, #61	; 0x3d
 104:	mov	r2, #80	; 0x50
 108:	mvn	r6, #0
 10c:	movt	r1, #0
 110:	movt	r3, #0
 114:	str	r0, [sp]
 118:	mvn	r0, #0
 11c:	bl	0 <coda_set_error>
 120:	b	148 <coda_ascii_reopen_with_definition+0x148>
 124:	movw	r1, #0
 128:	movw	r2, #0
 12c:	mvn	r0, #0
 130:	mov	r3, #97	; 0x61
 134:	movt	r1, #0
 138:	movt	r2, #0
 13c:	bl	0 <coda_set_error>
 140:	mov	r0, r5
 144:	bl	0 <free>
 148:	mov	r0, r6
 14c:	sub	sp, fp, #24
 150:	pop	{r4, r5, r6, r7, r9, sl, fp, pc}
 154:	movw	r0, #0
 158:	movw	r1, #0
 15c:	movw	r3, #0
 160:	mov	r2, #52	; 0x34
 164:	movt	r0, #0
 168:	b	198 <coda_ascii_reopen_with_definition+0x198>
 16c:	movw	r0, #0
 170:	movw	r1, #0
 174:	movw	r3, #0
 178:	mov	r2, #53	; 0x35
 17c:	movt	r0, #0
 180:	b	198 <coda_ascii_reopen_with_definition+0x198>
 184:	movw	r0, #0
 188:	movw	r1, #0
 18c:	movw	r3, #0
 190:	mov	r2, #54	; 0x36
 194:	movt	r0, #0
 198:	movt	r1, #0
 19c:	movt	r3, #0
 1a0:	bl	0 <__assert_fail>

000001a4 <coda_ascii_close>:
 1a4:	push	{r4, sl, fp, lr}
 1a8:	add	fp, sp, #8
 1ac:	mov	r4, r0
 1b0:	bl	0 <coda_bin_product_close>
 1b4:	mov	r1, r0
 1b8:	mvn	r0, #0
 1bc:	cmp	r1, #0
 1c0:	popne	{r4, sl, fp, pc}
 1c4:	ldr	r0, [r4]
 1c8:	cmp	r0, #0
 1cc:	beq	1d4 <coda_ascii_close+0x30>
 1d0:	bl	0 <free>
 1d4:	ldr	r0, [r4, #68]	; 0x44
 1d8:	cmp	r0, #0
 1dc:	beq	1e4 <coda_ascii_close+0x40>
 1e0:	bl	0 <free>
 1e4:	ldr	r0, [r4, #76]	; 0x4c
 1e8:	cmp	r0, #0
 1ec:	beq	1f4 <coda_ascii_close+0x50>
 1f0:	bl	0 <coda_type_release>
 1f4:	mov	r0, r4
 1f8:	bl	0 <free>
 1fc:	mov	r0, #0
 200:	pop	{r4, sl, fp, pc}

00000204 <coda_ascii_init_asciilines>:
 204:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
 208:	add	fp, sp, #28
 20c:	sub	sp, sp, #124	; 0x7c
 210:	sub	sp, sp, #4096	; 0x1000
 214:	mov	r4, r0
 218:	ldr	r0, [r0, #64]	; 0x40
 21c:	cmn	r0, #1
 220:	bne	8c0 <coda_ascii_init_asciilines+0x6bc>
 224:	ldr	r0, [r4, #52]	; 0x34
 228:	cmp	r0, #0
 22c:	bne	248 <coda_ascii_init_asciilines+0x44>
 230:	ldr	r0, [r4, #56]	; 0x38
 234:	mov	r1, #0
 238:	mov	r2, #0
 23c:	bl	0 <lseek>
 240:	cmn	r0, #1
 244:	ble	6d0 <coda_ascii_init_asciilines+0x4cc>
 248:	add	r0, r4, #8
 24c:	mov	r6, #0
 250:	mov	r7, #4096	; 0x1000
 254:	mov	r5, #0
 258:	str	r0, [sp, #24]
 25c:	ldrd	r0, [r0]
 260:	subs	r2, r0, #4096	; 0x1000
 264:	sbcs	r2, r1, #0
 268:	movwlt	r6, #1
 26c:	cmp	r6, #0
 270:	movne	r7, r0
 274:	movne	r6, r1
 278:	orrs	r2, r7, r6
 27c:	beq	6b4 <coda_ascii_init_asciilines+0x4b0>
 280:	mov	r2, #0
 284:	add	lr, r4, #40	; 0x28
 288:	mov	sl, #0
 28c:	mov	r3, #0
 290:	mov	ip, #0
 294:	mov	r8, #0
 298:	str	r4, [sp, #40]	; 0x28
 29c:	str	r2, [sp, #44]	; 0x2c
 2a0:	mov	r2, #0
 2a4:	str	lr, [sp, #16]
 2a8:	str	r2, [sp, #48]	; 0x30
 2ac:	mov	r2, #0
 2b0:	str	r2, [sp, #12]
 2b4:	mov	r2, #0
 2b8:	str	r2, [sp, #32]
 2bc:	ldr	r2, [r4, #48]	; 0x30
 2c0:	str	r6, [sp, #52]	; 0x34
 2c4:	cmp	r2, #0
 2c8:	beq	308 <coda_ascii_init_asciilines+0x104>
 2cc:	ldm	lr, {r0, r9}
 2d0:	mov	r5, r4
 2d4:	adds	r4, r7, r3
 2d8:	adc	r1, r6, ip
 2dc:	subs	r0, r0, r4
 2e0:	sbcs	r0, r9, r1
 2e4:	bcc	760 <coda_ascii_init_asciilines+0x55c>
 2e8:	add	r1, r2, r3
 2ec:	add	r0, sp, #56	; 0x38
 2f0:	mov	r2, r7
 2f4:	mov	r9, ip
 2f8:	mov	r4, r3
 2fc:	bl	0 <memcpy>
 300:	ldr	r6, [sp, #52]	; 0x34
 304:	b	34c <coda_ascii_init_asciilines+0x148>
 308:	ldr	r2, [r4, #16]
 30c:	cmp	r2, #2
 310:	bcs	900 <coda_ascii_init_asciilines+0x6fc>
 314:	adds	r2, r7, r3
 318:	mov	r5, r4
 31c:	adc	r4, r6, ip
 320:	subs	r0, r0, r2
 324:	sbcs	r0, r1, r4
 328:	bcc	76c <coda_ascii_init_asciilines+0x568>
 32c:	ldr	r0, [r5, #56]	; 0x38
 330:	add	r1, sp, #56	; 0x38
 334:	mov	r2, r7
 338:	mov	r9, ip
 33c:	mov	r4, r3
 340:	bl	0 <pread>
 344:	cmn	r0, #1
 348:	ble	7c4 <coda_ascii_init_asciilines+0x5c0>
 34c:	mov	r3, r4
 350:	ldrb	r2, [sp, #56]	; 0x38
 354:	ldr	r4, [sp, #40]	; 0x28
 358:	uxtb	lr, sl
 35c:	mov	ip, r9
 360:	cmp	lr, #13
 364:	bne	39c <coda_ascii_init_asciilines+0x198>
 368:	cmp	r2, #10
 36c:	beq	39c <coda_ascii_init_asciilines+0x198>
 370:	ldr	r0, [r4, #60]	; 0x3c
 374:	cmp	r0, #3
 378:	bhi	8e0 <coda_ascii_init_asciilines+0x6dc>
 37c:	add	r1, pc, #0
 380:	ldr	pc, [r1, r0, lsl #2]
 384:	.word	0x00000394
 388:	.word	0x000006f4
 38c:	.word	0x0000039c
 390:	.word	0x00000788
 394:	mov	r0, #2
 398:	str	r0, [r4, #60]	; 0x3c
 39c:	subs	r0, r7, #1
 3a0:	str	r7, [sp, #36]	; 0x24
 3a4:	sbcs	r0, r6, #0
 3a8:	blt	5f8 <coda_ascii_init_asciilines+0x3f4>
 3ac:	subs	r0, r7, #1
 3b0:	mov	sl, #0
 3b4:	mov	r9, #0
 3b8:	str	r2, [sp, #28]
 3bc:	str	lr, [sp, #20]
 3c0:	str	r0, [sp, #8]
 3c4:	sbc	r0, r6, #0
 3c8:	ldr	r6, [sp, #44]	; 0x2c
 3cc:	str	r0, [sp, #4]
 3d0:	ldr	r0, [sp, #28]
 3d4:	cmp	r0, #10
 3d8:	bne	3e8 <coda_ascii_init_asciilines+0x1e4>
 3dc:	cmp	lr, #13
 3e0:	cmpeq	sl, #0
 3e4:	beq	40c <coda_ascii_init_asciilines+0x208>
 3e8:	add	r0, sp, #56	; 0x38
 3ec:	ldrb	r5, [r0, sl]
 3f0:	cmp	r5, #10
 3f4:	cmpne	r5, #13
 3f8:	bne	53c <coda_ascii_init_asciilines+0x338>
 3fc:	tst	r8, #15
 400:	beq	454 <coda_ascii_init_asciilines+0x250>
 404:	ldr	r0, [sp, #48]	; 0x30
 408:	b	48c <coda_ascii_init_asciilines+0x288>
 40c:	ldr	r0, [sp, #48]	; 0x30
 410:	add	r0, r0, r8, lsl #2
 414:	ldr	r1, [r0, #-4]
 418:	add	r1, r1, #1
 41c:	str	r1, [r0, #-4]
 420:	ldr	r6, [r4, #60]	; 0x3c
 424:	cmp	r6, #3
 428:	bhi	8e0 <coda_ascii_init_asciilines+0x6dc>
 42c:	add	r0, pc, #4
 430:	mov	sl, #0
 434:	ldr	pc, [r0, r6, lsl #2]
 438:	.word	0x00000448
 43c:	.word	0x0000070c
 440:	.word	0x00000700
 444:	.word	0x000005d8
 448:	mov	r6, #3
 44c:	str	r6, [r4, #60]	; 0x3c
 450:	b	5d8 <coda_ascii_init_asciilines+0x3d4>
 454:	mov	r0, #64	; 0x40
 458:	mov	r6, ip
 45c:	mov	r7, r3
 460:	add	r4, r0, r8, lsl #2
 464:	ldr	r0, [sp, #32]
 468:	mov	r1, r4
 46c:	bl	0 <realloc>
 470:	cmp	r0, #0
 474:	beq	7e0 <coda_ascii_init_asciilines+0x5dc>
 478:	ldr	r4, [sp, #40]	; 0x28
 47c:	mov	r3, r7
 480:	mov	ip, r6
 484:	str	r0, [sp, #32]
 488:	str	r0, [sp, #12]
 48c:	add	r1, sl, #1
 490:	str	r0, [sp, #48]	; 0x30
 494:	cmp	r5, #13
 498:	add	r2, r1, r3
 49c:	str	r2, [r0, r8, lsl #2]
 4a0:	add	r0, r8, #1
 4a4:	beq	4e8 <coda_ascii_init_asciilines+0x2e4>
 4a8:	ldr	lr, [sp, #20]
 4ac:	mov	r6, #0
 4b0:	cmp	r5, #10
 4b4:	bne	5d4 <coda_ascii_init_asciilines+0x3d0>
 4b8:	ldr	r6, [r4, #60]	; 0x3c
 4bc:	cmp	r6, #3
 4c0:	bhi	8e0 <coda_ascii_init_asciilines+0x6dc>
 4c4:	add	r1, pc, #4
 4c8:	mov	r8, r0
 4cc:	ldr	pc, [r1, r6, lsl #2]
 4d0:	.word	0x000004e0
 4d4:	.word	0x000005d8
 4d8:	.word	0x0000073c
 4dc:	.word	0x00000730
 4e0:	mov	r6, #1
 4e4:	b	5d0 <coda_ascii_init_asciilines+0x3cc>
 4e8:	ldr	r7, [sp, #8]
 4ec:	mov	r6, #2
 4f0:	subs	r7, sl, r7
 4f4:	ldr	r7, [sp, #4]
 4f8:	sbcs	r7, r9, r7
 4fc:	bge	580 <coda_ascii_init_asciilines+0x37c>
 500:	add	r7, sp, #56	; 0x38
 504:	ldr	r6, [r4, #60]	; 0x3c
 508:	ldrb	r7, [r7, r1]
 50c:	cmp	r7, #10
 510:	bne	588 <coda_ascii_init_asciilines+0x384>
 514:	cmp	r6, #0
 518:	beq	5a8 <coda_ascii_init_asciilines+0x3a4>
 51c:	ldr	r5, [sp, #48]	; 0x30
 520:	cmp	r6, #1
 524:	beq	70c <coda_ascii_init_asciilines+0x508>
 528:	cmp	r6, #2
 52c:	beq	700 <coda_ascii_init_asciilines+0x4fc>
 530:	cmp	r6, #3
 534:	beq	5b4 <coda_ascii_init_asciilines+0x3b0>
 538:	b	8e0 <coda_ascii_init_asciilines+0x6dc>
 53c:	ldr	r2, [sp, #24]
 540:	str	r6, [sp, #44]	; 0x2c
 544:	mov	r6, r4
 548:	adds	r4, sl, r3
 54c:	ldr	lr, [sp, #20]
 550:	adc	r7, r9, ip
 554:	ldr	r1, [r2, #4]
 558:	ldr	r2, [r2]
 55c:	subs	r2, r2, #1
 560:	eor	r0, r4, r2
 564:	mov	r4, r6
 568:	ldr	r6, [sp, #44]	; 0x2c
 56c:	sbc	r1, r1, #0
 570:	eor	r1, r7, r1
 574:	orrs	r0, r0, r1
 578:	bne	5d8 <coda_ascii_init_asciilines+0x3d4>
 57c:	b	3fc <coda_ascii_init_asciilines+0x1f8>
 580:	ldr	lr, [sp, #20]
 584:	b	5d4 <coda_ascii_init_asciilines+0x3d0>
 588:	ldr	lr, [sp, #20]
 58c:	cmp	r6, #0
 590:	beq	5cc <coda_ascii_init_asciilines+0x3c8>
 594:	cmp	r6, #1
 598:	beq	6f4 <coda_ascii_init_asciilines+0x4f0>
 59c:	cmp	r6, #2
 5a0:	bne	780 <coda_ascii_init_asciilines+0x57c>
 5a4:	b	5d4 <coda_ascii_init_asciilines+0x3d0>
 5a8:	mov	r5, #3
 5ac:	str	r5, [r4, #60]	; 0x3c
 5b0:	ldr	r5, [sp, #48]	; 0x30
 5b4:	ldr	lr, [sp, #20]
 5b8:	add	r2, r2, #1
 5bc:	mov	r6, #3
 5c0:	mov	sl, r1
 5c4:	str	r2, [r5, r8, lsl #2]
 5c8:	b	5d4 <coda_ascii_init_asciilines+0x3d0>
 5cc:	mov	r6, #2
 5d0:	str	r6, [r4, #60]	; 0x3c
 5d4:	mov	r8, r0
 5d8:	ldr	r0, [sp, #36]	; 0x24
 5dc:	add	sl, sl, #1
 5e0:	asr	r9, sl, #31
 5e4:	subs	r0, sl, r0
 5e8:	ldr	r0, [sp, #52]	; 0x34
 5ec:	rscs	r0, r0, sl, asr #31
 5f0:	blt	3d0 <coda_ascii_init_asciilines+0x1cc>
 5f4:	b	5fc <coda_ascii_init_asciilines+0x3f8>
 5f8:	ldr	r6, [sp, #44]	; 0x2c
 5fc:	mov	r5, r4
 600:	ldr	r4, [sp, #36]	; 0x24
 604:	ldr	r0, [sp, #52]	; 0x34
 608:	str	r6, [sp, #44]	; 0x2c
 60c:	ldr	lr, [sp, #16]
 610:	adds	r3, r4, r3
 614:	adc	ip, r0, ip
 618:	ldr	r0, [sp, #24]
 61c:	adds	r2, r3, #4096	; 0x1000
 620:	adc	r7, ip, #0
 624:	ldrd	r0, [r0]
 628:	subs	r2, r0, r2
 62c:	sbcs	r2, r1, r7
 630:	mov	r2, #0
 634:	movwlt	r2, #1
 638:	subs	r7, r0, r3
 63c:	sbc	r6, r1, ip
 640:	cmp	r2, #0
 644:	moveq	r6, r2
 648:	mov	r2, #4096	; 0x1000
 64c:	moveq	r7, r2
 650:	add	r2, sp, #56	; 0x38
 654:	add	r2, r4, r2
 658:	mov	r4, r5
 65c:	ldrb	sl, [r2, #-1]
 660:	orrs	r2, r7, r6
 664:	bne	2bc <coda_ascii_init_asciilines+0xb8>
 668:	cmp	sl, #13
 66c:	bne	884 <coda_ascii_init_asciilines+0x680>
 670:	ldr	r0, [r4, #60]	; 0x3c
 674:	ldr	r7, [sp, #44]	; 0x2c
 678:	mov	r5, #0
 67c:	cmp	r0, #3
 680:	bhi	8e0 <coda_ascii_init_asciilines+0x6dc>
 684:	add	r1, pc, #12
 688:	ldr	r2, [sp, #32]
 68c:	movw	r3, #0
 690:	movt	r3, #0
 694:	ldr	pc, [r1, r0, lsl #2]
 698:	.word	0x000006a8
 69c:	.word	0x0000089c
 6a0:	.word	0x000006c0
 6a4:	.word	0x00000894
 6a8:	mov	r0, #2
 6ac:	str	r0, [r4, #60]	; 0x3c
 6b0:	b	6c0 <coda_ascii_init_asciilines+0x4bc>
 6b4:	mov	r7, #0
 6b8:	mov	r2, #0
 6bc:	mov	r8, #0
 6c0:	str	r8, [r4, #64]	; 0x40
 6c4:	str	r2, [r4, #68]	; 0x44
 6c8:	str	r7, [r4, #72]	; 0x48
 6cc:	b	7b8 <coda_ascii_init_asciilines+0x5b4>
 6d0:	bl	0 <__errno_location>
 6d4:	ldr	r0, [r0]
 6d8:	bl	0 <strerror>
 6dc:	movw	r1, #0
 6e0:	mov	r2, r0
 6e4:	movt	r1, #0
 6e8:	mvn	r0, #21
 6ec:	bl	0 <coda_set_error>
 6f0:	b	7b4 <coda_ascii_init_asciilines+0x5b0>
 6f4:	movw	r3, #0
 6f8:	movt	r3, #0
 6fc:	b	790 <coda_ascii_init_asciilines+0x58c>
 700:	movw	r3, #0
 704:	movt	r3, #0
 708:	b	714 <coda_ascii_init_asciilines+0x510>
 70c:	movw	r3, #0
 710:	movt	r3, #0
 714:	movw	r0, #65236	; 0xfed4
 718:	movw	r1, #0
 71c:	movw	r2, #0
 720:	movt	r0, #65535	; 0xffff
 724:	movt	r1, #0
 728:	movt	r2, #0
 72c:	b	7a8 <coda_ascii_init_asciilines+0x5a4>
 730:	movw	r3, #0
 734:	movt	r3, #0
 738:	b	744 <coda_ascii_init_asciilines+0x540>
 73c:	movw	r3, #0
 740:	movt	r3, #0
 744:	movw	r0, #65236	; 0xfed4
 748:	movw	r1, #0
 74c:	movw	r2, #0
 750:	movt	r0, #65535	; 0xffff
 754:	movt	r1, #0
 758:	movt	r2, #0
 75c:	b	7a8 <coda_ascii_init_asciilines+0x5a4>
 760:	ldr	r0, [r5, #16]
 764:	cmp	r0, #1
 768:	bhi	820 <coda_ascii_init_asciilines+0x61c>
 76c:	movw	r1, #0
 770:	mvn	r0, #300	; 0x12c
 774:	movt	r1, #0
 778:	bl	0 <coda_set_error>
 77c:	b	7b4 <coda_ascii_init_asciilines+0x5b0>
 780:	cmp	r6, #3
 784:	bne	8e0 <coda_ascii_init_asciilines+0x6dc>
 788:	movw	r3, #0
 78c:	movt	r3, #0
 790:	movw	r0, #65236	; 0xfed4
 794:	movw	r1, #0
 798:	movw	r2, #0
 79c:	movt	r0, #65535	; 0xffff
 7a0:	movt	r1, #0
 7a4:	movt	r2, #0
 7a8:	bl	0 <coda_set_error>
 7ac:	ldr	r0, [sp, #32]
 7b0:	bl	0 <free>
 7b4:	mvn	r5, #0
 7b8:	mov	r0, r5
 7bc:	sub	sp, fp, #28
 7c0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
 7c4:	bl	0 <__errno_location>
 7c8:	ldr	r0, [r0]
 7cc:	bl	0 <strerror>
 7d0:	movw	r1, #0
 7d4:	mov	r2, r0
 7d8:	movt	r1, #0
 7dc:	b	6e8 <coda_ascii_init_asciilines+0x4e4>
 7e0:	movw	r1, #0
 7e4:	movw	r3, #0
 7e8:	mov	r0, #245	; 0xf5
 7ec:	mov	r2, r4
 7f0:	mvn	r5, #0
 7f4:	movt	r1, #0
 7f8:	movt	r3, #0
 7fc:	str	r0, [sp]
 800:	mvn	r0, #0
 804:	bl	0 <coda_set_error>
 808:	ldr	r0, [sp, #48]	; 0x30
 80c:	cmp	r0, #0
 810:	beq	7b8 <coda_ascii_init_asciilines+0x5b4>
 814:	ldr	r0, [sp, #32]
 818:	bl	0 <free>
 81c:	b	7b8 <coda_ascii_init_asciilines+0x5b4>
 820:	ldr	r1, [sp, #52]	; 0x34
 824:	sub	r8, fp, #53	; 0x35
 828:	mov	r0, r7
 82c:	mov	r5, r3
 830:	mov	r7, ip
 834:	mov	r6, lr
 838:	mov	r2, r8
 83c:	bl	0 <coda_str64>
 840:	sub	r4, fp, #74	; 0x4a
 844:	mov	r0, r5
 848:	mov	r1, r7
 84c:	mov	r2, r4
 850:	bl	0 <coda_str64>
 854:	ldrd	r0, [r6]
 858:	sub	r5, fp, #95	; 0x5f
 85c:	mov	r2, r5
 860:	bl	0 <coda_str64>
 864:	movw	r1, #0
 868:	mvn	r0, #300	; 0x12c
 86c:	mov	r2, r8
 870:	mov	r3, r4
 874:	str	r5, [sp]
 878:	movt	r1, #0
 87c:	bl	0 <coda_set_error>
 880:	b	7b4 <coda_ascii_init_asciilines+0x5b0>
 884:	ldr	r2, [sp, #32]
 888:	ldr	r7, [sp, #44]	; 0x2c
 88c:	mov	r5, #0
 890:	b	6c0 <coda_ascii_init_asciilines+0x4bc>
 894:	movw	r3, #0
 898:	movt	r3, #0
 89c:	movw	r0, #65236	; 0xfed4
 8a0:	movw	r1, #0
 8a4:	movw	r2, #0
 8a8:	movt	r0, #65535	; 0xffff
 8ac:	movt	r1, #0
 8b0:	movt	r2, #0
 8b4:	bl	0 <coda_set_error>
 8b8:	ldr	r0, [sp, #12]
 8bc:	b	7b0 <coda_ascii_init_asciilines+0x5ac>
 8c0:	movw	r0, #0
 8c4:	movw	r1, #0
 8c8:	movw	r3, #0
 8cc:	mov	r2, #185	; 0xb9
 8d0:	movt	r0, #0
 8d4:	movt	r1, #0
 8d8:	movt	r3, #0
 8dc:	bl	0 <__assert_fail>
 8e0:	movw	r0, #0
 8e4:	movw	r1, #0
 8e8:	movw	r3, #0
 8ec:	mov	r2, #150	; 0x96
 8f0:	movt	r0, #0
 8f4:	movt	r1, #0
 8f8:	movt	r3, #0
 8fc:	bl	0 <__assert_fail>
 900:	movw	r0, #0
 904:	movw	r1, #0
 908:	movw	r3, #0
 90c:	mov	r2, #83	; 0x53
 910:	movt	r0, #0
 914:	movt	r1, #0
 918:	movt	r3, #0
 91c:	bl	0 <__assert_fail>
