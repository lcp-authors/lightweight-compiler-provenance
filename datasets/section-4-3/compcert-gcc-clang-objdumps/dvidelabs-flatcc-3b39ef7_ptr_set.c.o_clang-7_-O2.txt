
../compcert-repos/dvidelabs-flatcc-3b39ef7/src/compiler/CMakeFiles/flatcc.dir/__/__/external/hash/ptr_set.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <ptr_set_clear>:
   0:	push	{r4, sl, fp, lr}
   4:	add	fp, sp, #8
   8:	mov	r4, r0
   c:	ldr	r0, [r0]
  10:	cmp	r0, #0
  14:	beq	1c <ptr_set_clear+0x1c>
  18:	bl	0 <free>
  1c:	vmov.i32	q8, #0	; 0x00000000
  20:	vst1.32	{d16-d17}, [r4]
  24:	pop	{r4, sl, fp, pc}

00000028 <ptr_set_destroy>:
  28:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
  2c:	add	fp, sp, #24
  30:	mov	r4, r0
  34:	cmp	r1, #0
  38:	ldrne	r0, [r4, #12]
  3c:	cmpne	r0, #0
  40:	beq	7c <ptr_set_destroy+0x54>
  44:	ldr	r7, [r4]
  48:	mov	r8, r2
  4c:	mov	r6, r1
  50:	mov	r5, #0
  54:	ldr	r1, [r7, r5, lsl #2]
  58:	orr	r2, r1, #2
  5c:	cmp	r2, #2
  60:	beq	70 <ptr_set_destroy+0x48>
  64:	mov	r0, r8
  68:	blx	r6
  6c:	ldr	r0, [r4, #12]
  70:	add	r5, r5, #1
  74:	cmp	r5, r0
  78:	bcc	54 <ptr_set_destroy+0x2c>
  7c:	ldr	r0, [r4]
  80:	cmp	r0, #0
  84:	beq	8c <ptr_set_destroy+0x64>
  88:	bl	0 <free>
  8c:	vmov.i32	q8, #0	; 0x00000000
  90:	vst1.32	{d16-d17}, [r4]
  94:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

00000098 <ptr_set_init>:
  98:	push	{r4, r5, fp, lr}
  9c:	add	fp, sp, #8
  a0:	mov	r4, r0
  a4:	mov	r2, #4
  a8:	mov	r0, #179	; 0xb3
  ac:	mul	r3, r2, r0
  b0:	mov	r5, r2
  b4:	lsl	r2, r2, #1
  b8:	cmp	r1, r3, lsr #8
  bc:	bhi	ac <ptr_set_init+0x14>
  c0:	mov	r0, r5
  c4:	mov	r1, #4
  c8:	bl	0 <calloc>
  cc:	cmp	r0, #0
  d0:	str	r0, [r4]
  d4:	movne	r0, #0
  d8:	strne	r0, [r4, #4]
  dc:	strne	r0, [r4, #8]
  e0:	strne	r5, [r4, #12]
  e4:	popne	{r4, r5, fp, pc}
  e8:	mvn	r0, #0
  ec:	pop	{r4, r5, fp, pc}

000000f0 <ptr_set_resize>:
  f0:	b	f4 <ht_resize>

000000f4 <ht_resize>:
  f4:	push	{r4, r5, r6, r7, fp, lr}
  f8:	add	fp, sp, #16
  fc:	sub	sp, sp, #16
 100:	mov	r4, r0
 104:	ldr	r5, [r0]
 108:	ldr	r0, [r0, #8]
 10c:	mov	r2, #4
 110:	cmp	r0, r1
 114:	movhi	r1, r0
 118:	mov	r0, #179	; 0xb3
 11c:	mul	r3, r2, r0
 120:	mov	r6, r2
 124:	lsl	r2, r2, #1
 128:	cmp	r1, r3, lsr #8
 12c:	bhi	11c <ht_resize+0x28>
 130:	mov	r0, r6
 134:	mov	r1, #4
 138:	bl	0 <calloc>
 13c:	cmp	r0, #0
 140:	str	r0, [sp]
 144:	mvneq	r0, #0
 148:	subeq	sp, fp, #16
 14c:	popeq	{r4, r5, r6, r7, fp, pc}
 150:	mov	r7, #0
 154:	str	r6, [sp, #12]
 158:	str	r7, [sp, #4]
 15c:	str	r7, [sp, #8]
 160:	ldr	r0, [r4, #12]
 164:	cmp	r0, #0
 168:	beq	1a4 <ht_resize+0xb0>
 16c:	mov	r6, sp
 170:	ldr	r1, [r5, r7, lsl #2]
 174:	orr	r2, r1, #2
 178:	cmp	r2, #2
 17c:	beq	194 <ht_resize+0xa0>
 180:	mov	r0, r6
 184:	mov	r2, r1
 188:	mov	r3, #3
 18c:	bl	1d8 <ht_insert>
 190:	ldr	r0, [r4, #12]
 194:	add	r7, r7, #1
 198:	cmp	r7, r0
 19c:	bcc	170 <ht_resize+0x7c>
 1a0:	ldr	r5, [r4]
 1a4:	cmp	r5, #0
 1a8:	beq	1b4 <ht_resize+0xc0>
 1ac:	mov	r0, r5
 1b0:	bl	0 <free>
 1b4:	mov	r0, sp
 1b8:	vld1.64	{d16-d17}, [r0]
 1bc:	mov	r0, #0
 1c0:	vst1.32	{d16-d17}, [r4]
 1c4:	sub	sp, fp, #16
 1c8:	pop	{r4, r5, r6, r7, fp, pc}

000001cc <ptr_set_insert>:
 1cc:	mov	r2, r3
 1d0:	ldr	r3, [sp]
 1d4:	b	1d8 <ht_insert>

000001d8 <ht_insert>:
 1d8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
 1dc:	add	fp, sp, #28
 1e0:	sub	sp, sp, #28
 1e4:	cmp	r2, #2
 1e8:	beq	32c <ht_insert+0x154>
 1ec:	mov	r9, r2
 1f0:	cmp	r2, #1
 1f4:	beq	34c <ht_insert+0x174>
 1f8:	cmp	r9, #0
 1fc:	beq	36c <ht_insert+0x194>
 200:	mov	sl, r0
 204:	ldr	r0, [r0, #8]
 208:	mov	r5, r1
 20c:	mov	r1, #179	; 0xb3
 210:	mov	r8, r3
 214:	ldr	r6, [sl, #12]
 218:	mul	r1, r6, r1
 21c:	cmp	r0, r1, lsr #8
 220:	bcc	23c <ht_insert+0x64>
 224:	lsl	r1, r0, #1
 228:	mov	r0, sl
 22c:	bl	f4 <ht_resize>
 230:	cmp	r0, #0
 234:	bne	38c <ht_insert+0x1b4>
 238:	ldr	r6, [sl, #12]
 23c:	ldr	r7, [sl]
 240:	movw	r1, #15186	; 0x3b52
 244:	add	r0, sp, #16
 248:	mov	r2, #4
 24c:	mov	r3, #0
 250:	str	r5, [sp, #12]
 254:	mov	r4, #0
 258:	movt	r1, #12137	; 0x2f69
 25c:	str	r0, [sp, #4]
 260:	add	r0, sp, #12
 264:	str	r1, [sp]
 268:	bl	0 <cmetrohash64_1>
 26c:	ldr	r1, [sp, #16]
 270:	sub	r0, r6, #1
 274:	orr	r3, r8, #1
 278:	cmp	r3, #3
 27c:	and	r2, r0, r1
 280:	bne	2b8 <ht_insert+0xe0>
 284:	ldr	r3, [sl, #8]
 288:	add	r3, r3, #1
 28c:	str	r3, [sl, #8]
 290:	add	r3, r1, #1
 294:	b	2a0 <ht_insert+0xc8>
 298:	and	r2, r3, r0
 29c:	add	r3, r3, #1
 2a0:	mov	r1, r7
 2a4:	ldr	r2, [r1, r2, lsl #2]!
 2a8:	orr	r2, r2, #2
 2ac:	cmp	r2, #2
 2b0:	bne	298 <ht_insert+0xc0>
 2b4:	b	30c <ht_insert+0x134>
 2b8:	add	r3, r1, #1
 2bc:	b	2c8 <ht_insert+0xf0>
 2c0:	and	r2, r3, r0
 2c4:	add	r3, r3, #1
 2c8:	mov	r1, r7
 2cc:	ldr	r2, [r1, r2, lsl #2]!
 2d0:	cmp	r2, #2
 2d4:	beq	2ec <ht_insert+0x114>
 2d8:	cmp	r2, #0
 2dc:	beq	2f8 <ht_insert+0x120>
 2e0:	cmp	r2, r5
 2e4:	bne	2c0 <ht_insert+0xe8>
 2e8:	b	320 <ht_insert+0x148>
 2ec:	cmp	r4, #0
 2f0:	moveq	r4, r1
 2f4:	b	2c0 <ht_insert+0xe8>
 2f8:	ldr	r0, [sl, #8]
 2fc:	cmp	r4, #0
 300:	movne	r1, r4
 304:	add	r0, r0, #1
 308:	str	r0, [sl, #8]
 30c:	mov	r5, #0
 310:	str	r9, [r1]
 314:	mov	r0, r5
 318:	sub	sp, fp, #28
 31c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
 320:	cmp	r8, #0
 324:	streq	r9, [r1]
 328:	b	314 <ht_insert+0x13c>
 32c:	movw	r0, #0
 330:	movw	r1, #0
 334:	movw	r3, #0
 338:	mov	r2, #115	; 0x73
 33c:	movt	r0, #0
 340:	movt	r1, #0
 344:	movt	r3, #0
 348:	bl	0 <__assert_fail>
 34c:	movw	r0, #0
 350:	movw	r1, #0
 354:	movw	r3, #0
 358:	mov	r2, #116	; 0x74
 35c:	movt	r0, #0
 360:	movt	r1, #0
 364:	movt	r3, #0
 368:	bl	0 <__assert_fail>
 36c:	movw	r0, #0
 370:	movw	r1, #0
 374:	movw	r3, #0
 378:	mov	r2, #114	; 0x72
 37c:	movt	r0, #0
 380:	movt	r1, #0
 384:	movt	r3, #0
 388:	bl	0 <__assert_fail>
 38c:	movw	r0, #0
 390:	movw	r1, #0
 394:	movw	r2, #0
 398:	movt	r0, #0
 39c:	movt	r1, #0
 3a0:	movt	r2, #0
 3a4:	ldr	r0, [r0]
 3a8:	bl	0 <fprintf>
 3ac:	mov	r0, #1
 3b0:	bl	0 <exit>

000003b4 <ptr_set_insert_item>:
 3b4:	mov	r3, r2
 3b8:	mov	r2, r1
 3bc:	b	1d8 <ht_insert>

000003c0 <ptr_set_find>:
 3c0:	push	{r4, r5, r6, r7, fp, lr}
 3c4:	add	fp, sp, #16
 3c8:	sub	sp, sp, #24
 3cc:	ldr	r6, [r0]
 3d0:	cmp	r6, #0
 3d4:	beq	444 <ptr_set_find+0x84>
 3d8:	ldr	r7, [r0, #12]
 3dc:	add	r0, sp, #16
 3e0:	mov	r4, r1
 3e4:	str	r1, [sp, #12]
 3e8:	movw	r1, #15186	; 0x3b52
 3ec:	mov	r2, #4
 3f0:	mov	r3, #0
 3f4:	mov	r5, #0
 3f8:	movt	r1, #12137	; 0x2f69
 3fc:	str	r0, [sp, #4]
 400:	add	r0, sp, #12
 404:	str	r1, [sp]
 408:	bl	0 <cmetrohash64_1>
 40c:	ldr	r0, [sp, #16]
 410:	sub	r1, r7, #1
 414:	b	41c <ptr_set_find+0x5c>
 418:	add	r0, r0, #1
 41c:	and	r2, r0, r1
 420:	ldr	r2, [r6, r2, lsl #2]
 424:	cmp	r2, #2
 428:	beq	418 <ptr_set_find+0x58>
 42c:	cmp	r2, #0
 430:	beq	448 <ptr_set_find+0x88>
 434:	cmp	r2, r4
 438:	bne	418 <ptr_set_find+0x58>
 43c:	mov	r5, r4
 440:	b	448 <ptr_set_find+0x88>
 444:	mov	r5, #0
 448:	mov	r0, r5
 44c:	sub	sp, fp, #16
 450:	pop	{r4, r5, r6, r7, fp, pc}

00000454 <ptr_set_find_item>:
 454:	push	{r4, r5, r6, r7, fp, lr}
 458:	add	fp, sp, #16
 45c:	sub	sp, sp, #24
 460:	ldr	r6, [r0]
 464:	cmp	r6, #0
 468:	beq	4d8 <ptr_set_find_item+0x84>
 46c:	ldr	r7, [r0, #12]
 470:	add	r0, sp, #16
 474:	mov	r4, r1
 478:	str	r1, [sp, #12]
 47c:	movw	r1, #15186	; 0x3b52
 480:	mov	r2, #4
 484:	mov	r3, #0
 488:	mov	r5, #0
 48c:	movt	r1, #12137	; 0x2f69
 490:	str	r0, [sp, #4]
 494:	add	r0, sp, #12
 498:	str	r1, [sp]
 49c:	bl	0 <cmetrohash64_1>
 4a0:	ldr	r0, [sp, #16]
 4a4:	sub	r1, r7, #1
 4a8:	b	4b0 <ptr_set_find_item+0x5c>
 4ac:	add	r0, r0, #1
 4b0:	and	r2, r0, r1
 4b4:	ldr	r2, [r6, r2, lsl #2]
 4b8:	cmp	r2, #2
 4bc:	beq	4ac <ptr_set_find_item+0x58>
 4c0:	cmp	r2, #0
 4c4:	beq	4dc <ptr_set_find_item+0x88>
 4c8:	cmp	r2, r4
 4cc:	bne	4ac <ptr_set_find_item+0x58>
 4d0:	mov	r5, r4
 4d4:	b	4dc <ptr_set_find_item+0x88>
 4d8:	mov	r5, #0
 4dc:	mov	r0, r5
 4e0:	sub	sp, fp, #16
 4e4:	pop	{r4, r5, r6, r7, fp, pc}

000004e8 <ptr_set_remove>:
 4e8:	push	{r4, r5, r6, r7, fp, lr}
 4ec:	add	fp, sp, #16
 4f0:	sub	sp, sp, #24
 4f4:	ldr	r6, [r0]
 4f8:	cmp	r6, #0
 4fc:	beq	57c <ptr_set_remove+0x94>
 500:	ldr	r7, [r0, #12]
 504:	mov	r5, r0
 508:	add	r0, sp, #16
 50c:	mov	r4, r1
 510:	str	r1, [sp, #12]
 514:	movw	r1, #15186	; 0x3b52
 518:	mov	r2, #4
 51c:	mov	r3, #0
 520:	movt	r1, #12137	; 0x2f69
 524:	str	r0, [sp, #4]
 528:	add	r0, sp, #12
 52c:	str	r1, [sp]
 530:	bl	0 <cmetrohash64_1>
 534:	ldr	r0, [sp, #16]
 538:	sub	r1, r7, #1
 53c:	b	544 <ptr_set_remove+0x5c>
 540:	add	r0, r0, #1
 544:	and	r2, r0, r1
 548:	ldr	r3, [r6, r2, lsl #2]
 54c:	cmp	r3, #2
 550:	beq	540 <ptr_set_remove+0x58>
 554:	cmp	r3, #0
 558:	beq	57c <ptr_set_remove+0x94>
 55c:	cmp	r3, r4
 560:	bne	540 <ptr_set_remove+0x58>
 564:	mov	r0, #2
 568:	str	r0, [r6, r2, lsl #2]
 56c:	ldr	r0, [r5, #8]
 570:	sub	r0, r0, #1
 574:	str	r0, [r5, #8]
 578:	b	580 <ptr_set_remove+0x98>
 57c:	mov	r4, #0
 580:	mov	r0, r4
 584:	sub	sp, fp, #16
 588:	pop	{r4, r5, r6, r7, fp, pc}

0000058c <ptr_set_remove_item>:
 58c:	push	{r4, r5, r6, r7, fp, lr}
 590:	add	fp, sp, #16
 594:	sub	sp, sp, #24
 598:	ldr	r6, [r0]
 59c:	cmp	r6, #0
 5a0:	beq	620 <ptr_set_remove_item+0x94>
 5a4:	ldr	r7, [r0, #12]
 5a8:	mov	r5, r0
 5ac:	add	r0, sp, #16
 5b0:	mov	r4, r1
 5b4:	str	r1, [sp, #12]
 5b8:	movw	r1, #15186	; 0x3b52
 5bc:	mov	r2, #4
 5c0:	mov	r3, #0
 5c4:	movt	r1, #12137	; 0x2f69
 5c8:	str	r0, [sp, #4]
 5cc:	add	r0, sp, #12
 5d0:	str	r1, [sp]
 5d4:	bl	0 <cmetrohash64_1>
 5d8:	ldr	r0, [sp, #16]
 5dc:	sub	r1, r7, #1
 5e0:	b	5e8 <ptr_set_remove_item+0x5c>
 5e4:	add	r0, r0, #1
 5e8:	and	r2, r0, r1
 5ec:	ldr	r3, [r6, r2, lsl #2]
 5f0:	cmp	r3, #2
 5f4:	beq	5e4 <ptr_set_remove_item+0x58>
 5f8:	cmp	r3, #0
 5fc:	beq	620 <ptr_set_remove_item+0x94>
 600:	cmp	r3, r4
 604:	bne	5e4 <ptr_set_remove_item+0x58>
 608:	mov	r0, #2
 60c:	str	r0, [r6, r2, lsl #2]
 610:	ldr	r0, [r5, #8]
 614:	sub	r0, r0, #1
 618:	str	r0, [r5, #8]
 61c:	b	624 <ptr_set_remove_item+0x98>
 620:	mov	r4, #0
 624:	mov	r0, r4
 628:	sub	sp, fp, #16
 62c:	pop	{r4, r5, r6, r7, fp, pc}

00000630 <ptr_set_visit>:
 630:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
 634:	add	fp, sp, #24
 638:	mov	r6, r0
 63c:	ldr	r0, [r0, #12]
 640:	cmp	r0, #0
 644:	popeq	{r4, r5, r6, r7, r8, sl, fp, pc}
 648:	ldr	r7, [r6]
 64c:	mov	r8, r2
 650:	mov	r5, r1
 654:	mov	r4, #0
 658:	ldr	r1, [r7, r4, lsl #2]
 65c:	orr	r2, r1, #2
 660:	cmp	r2, #2
 664:	beq	674 <ptr_set_visit+0x44>
 668:	mov	r0, r8
 66c:	blx	r5
 670:	ldr	r0, [r6, #12]
 674:	add	r4, r4, #1
 678:	cmp	r4, r0
 67c:	bcc	658 <ptr_set_visit+0x28>
 680:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
