
../compcert-repos/stcorp-coda-3a25f25/CMakeFiles/coda_static.dir/libcoda/coda-check.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <check_data>:
       0:	strd	r4, [sp, #-36]!	; 0xffffffdc
       4:	mov	r5, r1
       8:	mov	r4, r0
       c:	strd	r6, [sp, #8]
      10:	mov	r6, r3
      14:	strd	r8, [sp, #16]
      18:	strd	sl, [sp, #24]
      1c:	mov	sl, r2
      20:	str	lr, [sp, #32]
      24:	sub	sp, sp, #956	; 0x3bc
      28:	add	r1, sp, #88	; 0x58
      2c:	bl	0 <coda_cursor_get_type>
      30:	cmp	r0, #0
      34:	bne	4fc <check_data+0x4fc>
      38:	add	r1, sp, #80	; 0x50
      3c:	ldr	r0, [sp, #88]	; 0x58
      40:	bl	0 <coda_type_get_class>
      44:	subs	r3, r0, #0
      48:	str	r3, [sp, #16]
      4c:	bne	4fc <check_data+0x4fc>
      50:	ldr	r3, [r5]
      54:	cmp	r3, #0
      58:	beq	c8 <check_data+0xc8>
      5c:	add	r1, sp, #96	; 0x60
      60:	mov	r0, r4
      64:	bl	0 <coda_cursor_get_type_class>
      68:	cmp	r0, #0
      6c:	bne	4fc <check_data+0x4fc>
      70:	add	r1, sp, #92	; 0x5c
      74:	ldr	r0, [r5]
      78:	bl	0 <coda_type_get_class>
      7c:	cmp	r0, #0
      80:	bne	4fc <check_data+0x4fc>
      84:	ldr	r3, [sp, #92]	; 0x5c
      88:	ldr	r0, [sp, #96]	; 0x60
      8c:	cmp	r0, r3
      90:	bne	44c <check_data+0x44c>
      94:	cmp	r0, #6
      98:	ldrls	pc, [pc, r0, lsl #2]
      9c:	b	c8 <check_data+0xc8>
      a0:	.word	0x00000988
      a4:	.word	0x00000870
      a8:	.word	0x000007e0
      ac:	.word	0x000007e0
      b0:	.word	0x000000c8
      b4:	.word	0x000000c8
      b8:	.word	0x0000079c
      bc:	ldr	r5, [sp, #24]
      c0:	ldr	sl, [sp, #32]
      c4:	ldr	r6, [sp, #44]	; 0x2c
      c8:	cmp	r6, #0
      cc:	bne	328 <check_data+0x328>
      d0:	cmp	sl, #0
      d4:	beq	504 <check_data+0x504>
      d8:	ldr	r3, [sp, #80]	; 0x50
      dc:	sub	r3, r3, #2
      e0:	cmp	r3, #4
      e4:	ldrls	pc, [pc, r3, lsl #2]
      e8:	b	194 <check_data+0x194>
      ec:	.word	0x00000634
      f0:	.word	0x00000634
      f4:	.word	0x00000684
      f8:	.word	0x00000538
      fc:	.word	0x000005d8
     100:	ldr	r3, [sp, #144]	; 0x90
     104:	cmp	r3, #0
     108:	blt	f7c <check_data+0xf7c>
     10c:	ldr	r0, [r5]
     110:	add	r2, sp, #432	; 0x1b0
     114:	add	r1, sp, #176	; 0xb0
     118:	cmp	r0, #0
     11c:	ldreq	r0, [sp, #88]	; 0x58
     120:	bl	0 <coda_type_get_fixed_value>
     124:	subs	r3, r0, #0
     128:	str	r3, [sp, #16]
     12c:	bne	4fc <check_data+0x4fc>
     130:	ldr	r0, [sp, #144]	; 0x90
     134:	cmp	r0, #0
     138:	bgt	4c0 <check_data+0x4c0>
     13c:	ldr	r7, [sp, #16]
     140:	ldr	r1, [sp, #176]	; 0xb0
     144:	cmp	r1, #0
     148:	beq	174 <check_data+0x174>
     14c:	ldr	r2, [sp, #144]	; 0x90
     150:	ldr	r3, [sp, #432]	; 0x1b0
     154:	cmp	r2, r3
     158:	beq	14b8 <check_data+0x14b8>
     15c:	movw	r1, #0
     160:	movt	r1, #0
     164:	ldr	r3, [sp, #996]	; 0x3e4
     168:	mov	r0, r4
     16c:	ldr	r2, [sp, #1000]	; 0x3e8
     170:	blx	r3
     174:	ldr	r3, [sp, #88]	; 0x58
     178:	ldr	r3, [r3, #44]	; 0x2c
     17c:	cmp	r3, #1
     180:	beq	139c <check_data+0x139c>
     184:	cmp	r7, #0
     188:	beq	194 <check_data+0x194>
     18c:	mov	r0, r7
     190:	bl	0 <free>
     194:	add	r1, sp, #84	; 0x54
     198:	mov	r0, r4
     19c:	bl	0 <coda_cursor_has_attributes>
     1a0:	subs	r8, r0, #0
     1a4:	bne	4fc <check_data+0x4fc>
     1a8:	ldr	r3, [sp, #84]	; 0x54
     1ac:	ldr	r0, [r5]
     1b0:	cmp	r3, #0
     1b4:	beq	354 <check_data+0x354>
     1b8:	cmp	r0, #0
     1bc:	str	r8, [sp, #176]	; 0xb0
     1c0:	beq	1d4 <check_data+0x1d4>
     1c4:	add	r1, sp, #176	; 0xb0
     1c8:	bl	0 <coda_type_get_attributes>
     1cc:	cmp	r0, #0
     1d0:	bne	4fc <check_data+0x4fc>
     1d4:	mov	r0, r4
     1d8:	bl	0 <coda_cursor_goto_attributes>
     1dc:	subs	r3, r0, #0
     1e0:	bne	4fc <check_data+0x4fc>
     1e4:	ldr	r2, [sp, #996]	; 0x3e4
     1e8:	add	r0, sp, #432	; 0x1b0
     1ec:	add	r1, sp, #176	; 0xb0
     1f0:	ldr	ip, [sp, #1000]	; 0x3e8
     1f4:	stm	sp, {r0, r2, ip}
     1f8:	mov	r2, sl
     1fc:	mov	r0, r4
     200:	bl	0 <check_data>
     204:	cmp	r0, #0
     208:	bne	4fc <check_data+0x4fc>
     20c:	mov	r0, r4
     210:	bl	0 <coda_cursor_goto_parent>
     214:	ldr	r0, [r5]
     218:	cmp	r0, #0
     21c:	beq	230 <check_data+0x230>
     220:	ldr	r3, [sp, #176]	; 0xb0
     224:	cmp	r3, #0
     228:	streq	r3, [r5]
     22c:	bne	35c <check_data+0x35c>
     230:	orrs	r3, r6, sl
     234:	beq	42c <check_data+0x42c>
     238:	ldr	r3, [sp, #80]	; 0x50
     23c:	cmp	r3, #1
     240:	bne	368 <check_data+0x368>
     244:	mov	r3, #0
     248:	str	r3, [sp, #176]	; 0xb0
     24c:	add	r1, sp, #432	; 0x1b0
     250:	mov	r0, r4
     254:	bl	0 <coda_cursor_get_num_elements>
     258:	cmp	r0, #0
     25c:	bne	4fc <check_data+0x4fc>
     260:	ldr	r3, [sp, #432]	; 0x1b0
     264:	cmp	r3, #0
     268:	ble	3fc <check_data+0x3fc>
     26c:	mov	r0, r4
     270:	bl	0 <coda_cursor_goto_first_array_element>
     274:	subs	r7, r0, #0
     278:	bne	4fc <check_data+0x4fc>
     27c:	ldr	r3, [sp, #432]	; 0x1b0
     280:	cmp	r3, #0
     284:	ble	1130 <check_data+0x1130>
     288:	add	r9, sp, #96	; 0x60
     28c:	add	fp, sp, #176	; 0xb0
     290:	str	r8, [sp, #24]
     294:	str	r5, [sp, #32]
     298:	ldr	r5, [sp, #992]	; 0x3e0
     29c:	ldr	r8, [sp, #1000]	; 0x3e8
     2a0:	b	2b0 <check_data+0x2b0>
     2a4:	add	r7, r7, #1
     2a8:	cmp	r7, r3
     2ac:	bge	1128 <check_data+0x1128>
     2b0:	ldr	ip, [sp, #996]	; 0x3e4
     2b4:	mov	r3, r6
     2b8:	mov	r2, sl
     2bc:	mov	r1, fp
     2c0:	mov	r0, r4
     2c4:	stm	sp, {r9, ip}
     2c8:	str	r8, [sp, #8]
     2cc:	bl	0 <check_data>
     2d0:	cmp	r0, #0
     2d4:	bne	4fc <check_data+0x4fc>
     2d8:	cmp	r6, #0
     2dc:	beq	300 <check_data+0x300>
     2e0:	ldr	r3, [r5]
     2e4:	ldr	r1, [sp, #96]	; 0x60
     2e8:	ldr	r2, [r5, #4]
     2ec:	ldr	r0, [sp, #100]	; 0x64
     2f0:	adds	r3, r3, r1
     2f4:	str	r3, [r5]
     2f8:	adc	r3, r2, r0
     2fc:	str	r3, [r5, #4]
     300:	ldr	r3, [sp, #432]	; 0x1b0
     304:	sub	r2, r3, #1
     308:	cmp	r2, r7
     30c:	ble	2a4 <check_data+0x2a4>
     310:	mov	r0, r4
     314:	bl	0 <coda_cursor_goto_next_array_element>
     318:	cmp	r0, #0
     31c:	bne	4fc <check_data+0x4fc>
     320:	ldr	r3, [sp, #432]	; 0x1b0
     324:	b	2a4 <check_data+0x2a4>
     328:	ldr	r3, [sp, #80]	; 0x50
     32c:	cmp	r3, #6
     330:	ldrls	pc, [pc, r3, lsl #2]
     334:	b	d0 <check_data+0xd0>
     338:	.word	0x00000524
     33c:	.word	0x00000524
     340:	.word	0x0000050c
     344:	.word	0x0000050c
     348:	.word	0x0000050c
     34c:	.word	0x0000050c
     350:	.word	0x00000524
     354:	cmp	r0, #0
     358:	beq	230 <check_data+0x230>
     35c:	ldr	r3, [sp, #80]	; 0x50
     360:	cmp	r3, #1
     364:	beq	d30 <check_data+0xd30>
     368:	cmp	r3, #0
     36c:	beq	bf4 <check_data+0xbf4>
     370:	cmp	r3, #6
     374:	bne	3fc <check_data+0x3fc>
     378:	mov	r3, #0
     37c:	add	r1, sp, #176	; 0xb0
     380:	mov	r0, r4
     384:	str	r3, [sp, #432]	; 0x1b0
     388:	bl	0 <coda_cursor_get_special_type>
     38c:	cmp	r0, #0
     390:	bne	4fc <check_data+0x4fc>
     394:	ldr	r3, [sp, #176]	; 0xb0
     398:	cmp	r3, #0
     39c:	beq	1688 <check_data+0x1688>
     3a0:	ldr	r0, [r5]
     3a4:	cmp	r0, #0
     3a8:	beq	3bc <check_data+0x3bc>
     3ac:	add	r1, sp, #432	; 0x1b0
     3b0:	bl	0 <coda_type_get_special_base_type>
     3b4:	cmp	r0, #0
     3b8:	bne	4fc <check_data+0x4fc>
     3bc:	mov	r0, r4
     3c0:	bl	0 <coda_cursor_use_base_type_of_special_type>
     3c4:	cmp	r0, #0
     3c8:	bne	4fc <check_data+0x4fc>
     3cc:	ldr	r1, [sp, #992]	; 0x3e0
     3d0:	mov	r2, sl
     3d4:	mov	r3, r6
     3d8:	mov	r0, r4
     3dc:	ldr	ip, [sp, #996]	; 0x3e4
     3e0:	stm	sp, {r1, ip}
     3e4:	add	r1, sp, #432	; 0x1b0
     3e8:	ldr	ip, [sp, #1000]	; 0x3e8
     3ec:	str	ip, [sp, #8]
     3f0:	bl	0 <check_data>
     3f4:	cmp	r0, #0
     3f8:	bne	4fc <check_data+0x4fc>
     3fc:	ldr	r3, [sp, #16]
     400:	eor	r3, r3, #1
     404:	and	r6, r6, r3
     408:	and	r6, r6, #1
     40c:	cmp	r6, #0
     410:	beq	42c <check_data+0x42c>
     414:	ldr	r3, [r4, #4]
     418:	add	r3, r4, r3, lsl #4
     41c:	ldr	ip, [r3, #-8]
     420:	ldr	r3, [ip]
     424:	cmp	r3, #100	; 0x64
     428:	beq	6dc <check_data+0x6dc>
     42c:	mov	r0, r8
     430:	add	sp, sp, #956	; 0x3bc
     434:	ldrd	r4, [sp]
     438:	ldrd	r6, [sp, #8]
     43c:	ldrd	r8, [sp, #16]
     440:	ldrd	sl, [sp, #24]
     444:	add	sp, sp, #32
     448:	pop	{pc}		; (ldr pc, [sp], #4)
     44c:	bl	0 <coda_type_get_class_name>
     450:	mov	r8, r0
     454:	ldr	r0, [sp, #92]	; 0x5c
     458:	mrc	15, 0, r7, cr13, cr0, {3}
     45c:	bl	0 <coda_type_get_class_name>
     460:	mov	r3, r0
     464:	mov	r2, r8
     468:	movw	r1, #0
     46c:	movt	r1, #0
     470:	movw	r0, #65236	; 0xfed4
     474:	movt	r0, #65535	; 0xffff
     478:	bl	0 <coda_set_error>
     47c:	ldr	r3, [pc, #4020]	; 1438 <check_data+0x1438>
     480:	ldr	r3, [pc, r3]
     484:	ldr	r0, [r7, r3]
     488:	bl	0 <coda_errno_to_string>
     48c:	mov	r1, r0
     490:	mov	r0, r4
     494:	ldr	r3, [sp, #996]	; 0x3e4
     498:	ldr	r2, [sp, #1000]	; 0x3e8
     49c:	blx	r3
     4a0:	ldr	r3, [pc, #3988]	; 143c <check_data+0x143c>
     4a4:	cmp	r6, #0
     4a8:	ldr	r2, [sp, #16]
     4ac:	ldr	r3, [pc, r3]
     4b0:	str	r2, [r7, r3]
     4b4:	str	r2, [r5]
     4b8:	beq	d0 <check_data+0xd0>
     4bc:	b	328 <check_data+0x328>
     4c0:	add	r0, r0, #1
     4c4:	bl	0 <malloc>
     4c8:	cmp	r0, #0
     4cc:	mov	r8, r0
     4d0:	ldr	r2, [sp, #144]	; 0x90
     4d4:	mov	r7, r0
     4d8:	beq	16a8 <check_data+0x16a8>
     4dc:	mov	r1, r0
     4e0:	add	r2, r2, #1
     4e4:	mov	r0, r4
     4e8:	bl	0 <coda_cursor_read_string>
     4ec:	cmp	r0, #0
     4f0:	beq	140 <check_data+0x140>
     4f4:	mov	r0, r8
     4f8:	bl	0 <free>
     4fc:	mvn	r8, #0
     500:	b	42c <check_data+0x42c>
     504:	str	sl, [sp, #16]
     508:	b	194 <check_data+0x194>
     50c:	mov	r0, r4
     510:	ldr	r1, [sp, #992]	; 0x3e0
     514:	bl	0 <coda_cursor_get_bit_size>
     518:	cmp	r0, #0
     51c:	beq	d0 <check_data+0xd0>
     520:	b	4fc <check_data+0x4fc>
     524:	ldr	r1, [sp, #992]	; 0x3e0
     528:	mov	r2, #0
     52c:	mov	r3, #0
     530:	strd	r2, [r1]
     534:	b	d0 <check_data+0xd0>
     538:	cmp	r6, #0
     53c:	beq	1000 <check_data+0x1000>
     540:	ldr	r3, [sp, #992]	; 0x3e0
     544:	ldrd	r8, [r3]
     548:	cmp	r8, #0
     54c:	sbcs	r3, r9, #0
     550:	blt	fe4 <check_data+0xfe4>
     554:	ldr	r0, [r5]
     558:	add	r2, sp, #432	; 0x1b0
     55c:	add	r1, sp, #176	; 0xb0
     560:	cmp	r0, #0
     564:	ldreq	r0, [sp, #88]	; 0x58
     568:	bl	0 <coda_type_get_fixed_value>
     56c:	subs	r3, r0, #0
     570:	str	r3, [sp, #16]
     574:	bne	4fc <check_data+0x4fc>
     578:	ldr	r3, [sp, #176]	; 0xb0
     57c:	cmp	r3, #0
     580:	beq	194 <check_data+0x194>
     584:	lsr	r2, r8, #3
     588:	ldr	r7, [sp, #432]	; 0x1b0
     58c:	and	r3, r8, #7
     590:	adds	r3, r3, #0
     594:	orr	r2, r2, r9, lsl #29
     598:	movne	r3, #1
     59c:	mov	r0, r2
     5a0:	asr	r2, r9, #3
     5a4:	adds	r0, r0, r3
     5a8:	asr	r9, r7, #31
     5ac:	adc	r1, r2, #0
     5b0:	cmp	r9, r1
     5b4:	cmpeq	r7, r0
     5b8:	beq	12e4 <check_data+0x12e4>
     5bc:	movw	r1, #0
     5c0:	movt	r1, #0
     5c4:	ldr	r3, [sp, #996]	; 0x3e4
     5c8:	mov	r0, r4
     5cc:	ldr	r2, [sp, #1000]	; 0x3e8
     5d0:	blx	r3
     5d4:	b	194 <check_data+0x194>
     5d8:	add	r1, sp, #176	; 0xb0
     5dc:	mov	r0, r4
     5e0:	bl	0 <coda_cursor_get_special_type>
     5e4:	subs	r3, r0, #0
     5e8:	str	r3, [sp, #16]
     5ec:	bne	4fc <check_data+0x4fc>
     5f0:	ldr	r3, [sp, #176]	; 0xb0
     5f4:	cmp	r3, #2
     5f8:	bne	194 <check_data+0x194>
     5fc:	add	r1, sp, #432	; 0x1b0
     600:	mov	r0, r4
     604:	bl	0 <coda_cursor_read_double>
     608:	cmp	r0, #0
     60c:	beq	194 <check_data+0x194>
     610:	ldr	r3, [pc, #3624]	; 1440 <check_data+0x1440>
     614:	mrc	15, 0, r2, cr13, cr0, {3}
     618:	ldr	r3, [pc, r3]
     61c:	ldr	r0, [r2, r3]
     620:	add	r3, r0, #104	; 0x68
     624:	cmn	r0, #300	; 0x12c
     628:	cmpne	r3, #1
     62c:	bls	668 <check_data+0x668>
     630:	b	4fc <check_data+0x4fc>
     634:	add	r1, sp, #432	; 0x1b0
     638:	mov	r0, r4
     63c:	bl	0 <coda_cursor_read_double>
     640:	cmp	r0, #0
     644:	beq	194 <check_data+0x194>
     648:	ldr	r3, [pc, #3572]	; 1444 <check_data+0x1444>
     64c:	mrc	15, 0, r2, cr13, cr0, {3}
     650:	ldr	r3, [pc, r3]
     654:	ldr	r0, [r2, r3]
     658:	add	r3, r0, #104	; 0x68
     65c:	cmn	r0, #300	; 0x12c
     660:	cmpne	r3, #1
     664:	bhi	4fc <check_data+0x4fc>
     668:	bl	0 <coda_errno_to_string>
     66c:	mov	r1, r0
     670:	mov	r0, r4
     674:	ldr	r3, [sp, #996]	; 0x3e4
     678:	ldr	r2, [sp, #1000]	; 0x3e8
     67c:	blx	r3
     680:	b	194 <check_data+0x194>
     684:	add	r1, sp, #144	; 0x90
     688:	mov	r0, r4
     68c:	bl	0 <coda_cursor_get_string_length>
     690:	cmp	r0, #0
     694:	beq	100 <check_data+0x100>
     698:	ldr	r3, [pc, #3496]	; 1448 <check_data+0x1448>
     69c:	mrc	15, 0, r2, cr13, cr0, {3}
     6a0:	ldr	r3, [pc, r3]
     6a4:	ldr	r0, [r2, r3]
     6a8:	add	r3, r0, #104	; 0x68
     6ac:	cmn	r0, #300	; 0x12c
     6b0:	cmpne	r3, #1
     6b4:	bhi	4fc <check_data+0x4fc>
     6b8:	bl	0 <coda_errno_to_string>
     6bc:	mov	r1, r0
     6c0:	mov	r0, r4
     6c4:	ldr	r3, [sp, #996]	; 0x3e4
     6c8:	ldr	r2, [sp, #1000]	; 0x3e8
     6cc:	blx	r3
     6d0:	mov	r3, #1
     6d4:	str	r3, [sp, #16]
     6d8:	b	194 <check_data+0x194>
     6dc:	ldr	r3, [ip, #8]
     6e0:	cmp	r3, #2
     6e4:	bne	42c <check_data+0x42c>
     6e8:	ldr	r3, [sp, #992]	; 0x3e0
     6ec:	ldr	r7, [r4]
     6f0:	ldr	r0, [ip, #16]
     6f4:	ldr	r5, [r3]
     6f8:	ldr	r3, [r3, #4]
     6fc:	asr	r1, r0, #31
     700:	ldr	r9, [r7, #16]
     704:	lsr	sl, r5, #3
     708:	ands	r6, r5, #7
     70c:	movne	lr, #1
     710:	moveq	lr, #0
     714:	orr	sl, sl, r3, lsl #29
     718:	asr	fp, r3, #3
     71c:	adds	r2, sl, lr
     720:	adc	r3, fp, #0
     724:	cmp	r9, #2
     728:	beq	1208 <check_data+0x1208>
     72c:	cmp	r1, r3
     730:	cmpeq	r0, r2
     734:	beq	42c <check_data+0x42c>
     738:	add	r3, sp, #176	; 0xb0
     73c:	add	r7, sp, #144	; 0x90
     740:	mov	r9, r3
     744:	mov	r2, r7
     748:	bl	0 <coda_str64>
     74c:	mov	r2, r9
     750:	mov	r0, sl
     754:	mov	r1, fp
     758:	bl	0 <coda_str64>
     75c:	and	r2, r5, #7
     760:	mov	r3, #0
     764:	orrs	r3, r2, r3
     768:	bne	151c <check_data+0x151c>
     76c:	mov	r3, r9
     770:	mov	r2, r7
     774:	add	r0, sp, #432	; 0x1b0
     778:	movw	r1, #0
     77c:	movt	r1, #0
     780:	bl	0 <sprintf>
     784:	add	r1, sp, #432	; 0x1b0
     788:	mov	r0, r4
     78c:	ldr	r3, [sp, #996]	; 0x3e4
     790:	ldr	r2, [sp, #1000]	; 0x3e8
     794:	blx	r3
     798:	b	42c <check_data+0x42c>
     79c:	add	r1, sp, #176	; 0xb0
     7a0:	mov	r0, r4
     7a4:	bl	0 <coda_cursor_get_special_type>
     7a8:	cmp	r0, #0
     7ac:	bne	4fc <check_data+0x4fc>
     7b0:	add	r1, sp, #432	; 0x1b0
     7b4:	ldr	r0, [r5]
     7b8:	bl	0 <coda_type_get_special_type>
     7bc:	subs	r8, r0, #0
     7c0:	bne	4fc <check_data+0x4fc>
     7c4:	ldr	r0, [sp, #176]	; 0xb0
     7c8:	ldr	r3, [sp, #432]	; 0x1b0
     7cc:	cmp	r0, r3
     7d0:	bne	f08 <check_data+0xf08>
     7d4:	mov	r3, #0
     7d8:	str	r3, [r5]
     7dc:	b	c8 <check_data+0xc8>
     7e0:	add	r1, sp, #432	; 0x1b0
     7e4:	mov	r0, r4
     7e8:	bl	0 <coda_cursor_get_read_type>
     7ec:	subs	r8, r0, #0
     7f0:	bne	4fc <check_data+0x4fc>
     7f4:	ldr	r3, [r5]
     7f8:	ldr	r0, [sp, #432]	; 0x1b0
     7fc:	ldr	r3, [r3, #12]
     800:	cmp	r3, r0
     804:	beq	c8 <check_data+0xc8>
     808:	bl	0 <coda_type_get_native_type_name>
     80c:	ldr	r3, [r5]
     810:	mov	r9, r0
     814:	mrc	15, 0, r7, cr13, cr0, {3}
     818:	ldr	r0, [r3, #12]
     81c:	bl	0 <coda_type_get_native_type_name>
     820:	mov	r3, r0
     824:	mov	r2, r9
     828:	movw	r1, #0
     82c:	movt	r1, #0
     830:	movw	r0, #65236	; 0xfed4
     834:	movt	r0, #65535	; 0xffff
     838:	bl	0 <coda_set_error>
     83c:	ldr	r3, [pc, #3080]	; 144c <check_data+0x144c>
     840:	ldr	r3, [pc, r3]
     844:	ldr	r0, [r7, r3]
     848:	bl	0 <coda_errno_to_string>
     84c:	mov	r1, r0
     850:	mov	r0, r4
     854:	ldr	r3, [sp, #996]	; 0x3e4
     858:	ldr	r2, [sp, #1000]	; 0x3e8
     85c:	blx	r3
     860:	ldr	r3, [pc, #3048]	; 1450 <check_data+0x1450>
     864:	ldr	r3, [pc, r3]
     868:	str	r8, [r7, r3]
     86c:	b	c8 <check_data+0xc8>
     870:	add	fp, sp, #432	; 0x1b0
     874:	add	r1, sp, #144	; 0x90
     878:	ldr	r8, [r5]
     87c:	mov	r2, fp
     880:	mov	r0, r4
     884:	bl	0 <coda_cursor_get_array_dim>
     888:	subs	r7, r0, #0
     88c:	bne	4fc <check_data+0x4fc>
     890:	ldr	r3, [r8, #48]	; 0x30
     894:	ldr	r2, [sp, #144]	; 0x90
     898:	cmp	r3, r2
     89c:	bne	f98 <check_data+0xf98>
     8a0:	cmp	r2, #0
     8a4:	ble	c8 <check_data+0xc8>
     8a8:	movw	r3, #0
     8ac:	movt	r3, #0
     8b0:	str	r5, [sp, #24]
     8b4:	movw	r1, #65236	; 0xfed4
     8b8:	movt	r1, #65535	; 0xffff
     8bc:	str	sl, [sp, #32]
     8c0:	add	r8, r8, #52	; 0x34
     8c4:	mrc	15, 0, r9, cr13, cr0, {3}
     8c8:	str	r6, [sp, #44]	; 0x2c
     8cc:	mov	sl, r1
     8d0:	mov	r6, r3
     8d4:	b	93c <check_data+0x93c>
     8d8:	ldr	r3, [fp, r7, lsl #2]
     8dc:	cmp	r1, r3
     8e0:	beq	930 <check_data+0x930>
     8e4:	mov	r2, r7
     8e8:	mov	r0, sl
     8ec:	str	r1, [sp]
     8f0:	mov	r1, r6
     8f4:	bl	0 <coda_set_error>
     8f8:	ldr	r3, [pc, #2900]	; 1454 <check_data+0x1454>
     8fc:	ldr	r3, [pc, r3]
     900:	ldr	r0, [r9, r3]
     904:	bl	0 <coda_errno_to_string>
     908:	mov	r1, r0
     90c:	mov	r0, r4
     910:	ldr	r3, [sp, #996]	; 0x3e4
     914:	ldr	r2, [sp, #1000]	; 0x3e8
     918:	blx	r3
     91c:	ldr	r3, [pc, #2868]	; 1458 <check_data+0x1458>
     920:	mov	r1, #0
     924:	ldr	r2, [sp, #144]	; 0x90
     928:	ldr	r3, [pc, r3]
     92c:	str	r1, [r9, r3]
     930:	add	r7, r7, #1
     934:	cmp	r7, r2
     938:	bge	bc <check_data+0xbc>
     93c:	ldr	r1, [r8], #4
     940:	cmp	r1, #0
     944:	bge	8d8 <check_data+0x8d8>
     948:	ldr	r0, [r8, #28]
     94c:	cmp	r0, #0
     950:	beq	930 <check_data+0x930>
     954:	add	r2, sp, #176	; 0xb0
     958:	mov	r1, r4
     95c:	bl	0 <coda_expression_eval_integer>
     960:	subs	r5, r0, #0
     964:	bne	1164 <check_data+0x1164>
     968:	ldr	ip, [fp, r7, lsl #2]
     96c:	ldrd	r0, [sp, #176]	; 0xb0
     970:	asr	r3, ip, #31
     974:	cmp	r3, r1
     978:	cmpeq	ip, r0
     97c:	bne	11b0 <check_data+0x11b0>
     980:	ldr	r2, [sp, #144]	; 0x90
     984:	b	930 <check_data+0x930>
     988:	add	r1, sp, #104	; 0x68
     98c:	mov	r0, r4
     990:	ldr	r8, [r5]
     994:	bl	0 <coda_cursor_get_type>
     998:	subs	r7, r0, #0
     99c:	bne	4fc <check_data+0x4fc>
     9a0:	ldr	r3, [r8, #48]	; 0x30
     9a4:	cmp	r3, #0
     9a8:	ble	1044 <check_data+0x1044>
     9ac:	movw	r3, #0
     9b0:	movt	r3, #0
     9b4:	ldr	fp, [sp, #1000]	; 0x3e8
     9b8:	mrc	15, 0, r9, cr13, cr0, {3}
     9bc:	str	r3, [sp, #48]	; 0x30
     9c0:	movw	r3, #65236	; 0xfed4
     9c4:	movt	r3, #65535	; 0xffff
     9c8:	str	r5, [sp, #52]	; 0x34
     9cc:	str	r3, [sp, #24]
     9d0:	add	r3, sp, #176	; 0xb0
     9d4:	str	sl, [sp, #56]	; 0x38
     9d8:	str	r6, [sp, #60]	; 0x3c
     9dc:	mov	r6, r3
     9e0:	ldr	sl, [sp, #996]	; 0x3e4
     9e4:	b	af8 <check_data+0xaf8>
     9e8:	ldr	r3, [pc, #2668]	; 145c <check_data+0x145c>
     9ec:	ldr	r3, [pc, r3]
     9f0:	ldr	r3, [r9, r3]
     9f4:	cmn	r3, #102	; 0x66
     9f8:	bne	4fc <check_data+0x4fc>
     9fc:	ldr	r3, [pc, #2652]	; 1460 <check_data+0x1460>
     a00:	mov	r2, #0
     a04:	ldr	r3, [pc, r3]
     a08:	str	r2, [sp, #144]	; 0x90
     a0c:	str	r2, [r9, r3]
     a10:	ldr	r3, [r8, #52]	; 0x34
     a14:	ldr	r3, [r3, r5]
     a18:	ldrb	r2, [r3, #16]
     a1c:	cmp	r2, #0
     a20:	beq	a44 <check_data+0xa44>
     a24:	ldr	r0, [r3, #20]
     a28:	cmp	r0, #0
     a2c:	beq	b44 <check_data+0xb44>
     a30:	add	r2, sp, #112	; 0x70
     a34:	mov	r1, r4
     a38:	bl	0 <coda_expression_eval_bool>
     a3c:	cmp	r0, #0
     a40:	bne	d4c <check_data+0xd4c>
     a44:	ldr	r1, [sp, #112]	; 0x70
     a48:	ldr	r2, [sp, #144]	; 0x90
     a4c:	cmn	r1, #1
     a50:	beq	b50 <check_data+0xb50>
     a54:	cmp	r1, r2
     a58:	beq	ad4 <check_data+0xad4>
     a5c:	ldr	ip, [r8, #52]	; 0x34
     a60:	cmp	r1, #0
     a64:	movw	r0, #0
     a68:	movt	r0, #0
     a6c:	movw	r3, #0
     a70:	movt	r3, #0
     a74:	moveq	lr, r0
     a78:	movne	lr, r3
     a7c:	cmp	r2, #0
     a80:	moveq	r3, r0
     a84:	movw	r1, #0
     a88:	movt	r1, #0
     a8c:	ldr	r2, [ip, r5]
     a90:	ldr	r0, [sp, #24]
     a94:	ldr	r2, [r2]
     a98:	str	lr, [sp]
     a9c:	bl	0 <coda_set_error>
     aa0:	ldr	r3, [pc, #2492]	; 1464 <check_data+0x1464>
     aa4:	ldr	r3, [pc, r3]
     aa8:	ldr	r0, [r9, r3]
     aac:	bl	0 <coda_errno_to_string>
     ab0:	mov	r1, r0
     ab4:	mov	r2, fp
     ab8:	mov	r0, r4
     abc:	blx	sl
     ac0:	ldr	r3, [pc, #2464]	; 1468 <check_data+0x1468>
     ac4:	mov	r1, #0
     ac8:	ldr	r2, [sp, #144]	; 0x90
     acc:	ldr	r3, [pc, r3]
     ad0:	str	r1, [r9, r3]
     ad4:	cmp	r2, #0
     ad8:	beq	ae8 <check_data+0xae8>
     adc:	ldr	r3, [sp, #112]	; 0x70
     ae0:	cmp	r3, #0
     ae4:	bne	b58 <check_data+0xb58>
     ae8:	ldr	r3, [r8, #48]	; 0x30
     aec:	add	r7, r7, #1
     af0:	cmp	r7, r3
     af4:	bge	1038 <check_data+0x1038>
     af8:	ldr	r1, [r8, #52]	; 0x34
     afc:	mov	r3, #1
     b00:	mov	r2, r6
     b04:	mov	r0, r4
     b08:	lsl	r5, r7, #2
     b0c:	str	r3, [sp, #112]	; 0x70
     b10:	str	r3, [sp, #144]	; 0x90
     b14:	ldr	r3, [r1, r7, lsl #2]
     b18:	ldr	r1, [r3]
     b1c:	bl	0 <coda_cursor_get_record_field_index_from_name>
     b20:	cmp	r0, #0
     b24:	bne	9e8 <check_data+0x9e8>
     b28:	add	r2, sp, #144	; 0x90
     b2c:	mov	r0, r4
     b30:	ldr	r1, [sp, #176]	; 0xb0
     b34:	bl	0 <coda_cursor_get_record_field_available_status>
     b38:	cmp	r0, #0
     b3c:	beq	a10 <check_data+0xa10>
     b40:	b	4fc <check_data+0x4fc>
     b44:	ldr	r2, [sp, #144]	; 0x90
     b48:	mvn	r3, #0
     b4c:	str	r3, [sp, #112]	; 0x70
     b50:	cmp	r2, #0
     b54:	beq	ae8 <check_data+0xae8>
     b58:	add	r2, sp, #432	; 0x1b0
     b5c:	ldr	r0, [sp, #104]	; 0x68
     b60:	ldr	r1, [sp, #176]	; 0xb0
     b64:	bl	0 <coda_type_get_record_field_real_name>
     b68:	cmp	r0, #0
     b6c:	bne	4fc <check_data+0x4fc>
     b70:	ldr	r3, [r8, #52]	; 0x34
     b74:	ldr	r2, [r3, r5]
     b78:	ldr	r3, [sp, #432]	; 0x1b0
     b7c:	ldr	r5, [r2, #4]
     b80:	mov	r0, r3
     b84:	str	r3, [sp, #32]
     b88:	str	r2, [sp, #44]	; 0x2c
     b8c:	cmp	r5, #0
     b90:	ldreq	r5, [r2]
     b94:	mov	r1, r5
     b98:	bl	0 <strcmp>
     b9c:	cmp	r0, #0
     ba0:	ldr	r3, [sp, #32]
     ba4:	ldr	r2, [sp, #44]	; 0x2c
     ba8:	beq	ae8 <check_data+0xae8>
     bac:	ldr	r2, [r2]
     bb0:	str	r5, [sp]
     bb4:	ldr	r0, [sp, #24]
     bb8:	ldr	r1, [sp, #48]	; 0x30
     bbc:	bl	0 <coda_set_error>
     bc0:	ldr	r3, [pc, #2212]	; 146c <check_data+0x146c>
     bc4:	ldr	r3, [pc, r3]
     bc8:	ldr	r0, [r9, r3]
     bcc:	bl	0 <coda_errno_to_string>
     bd0:	mov	r1, r0
     bd4:	mov	r2, fp
     bd8:	mov	r0, r4
     bdc:	blx	sl
     be0:	ldr	r3, [pc, #2184]	; 1470 <check_data+0x1470>
     be4:	mov	r2, #0
     be8:	ldr	r3, [pc, r3]
     bec:	str	r2, [r9, r3]
     bf0:	b	ae8 <check_data+0xae8>
     bf4:	add	fp, sp, #432	; 0x1b0
     bf8:	mov	r2, #520	; 0x208
     bfc:	mov	r1, r4
     c00:	mov	r0, fp
     c04:	bl	0 <memcpy>
     c08:	mov	r0, fp
     c0c:	add	r1, sp, #92	; 0x5c
     c10:	bl	0 <coda_cursor_get_num_elements>
     c14:	cmp	r0, #0
     c18:	bne	4fc <check_data+0x4fc>
     c1c:	ldr	r3, [sp, #92]	; 0x5c
     c20:	cmp	r3, #0
     c24:	bgt	d98 <check_data+0xd98>
     c28:	cmp	r6, #0
     c2c:	beq	42c <check_data+0x42c>
     c30:	ldr	r3, [sp, #88]	; 0x58
     c34:	ldr	r3, [r3, #32]
     c38:	cmp	r3, #0
     c3c:	beq	f6c <check_data+0xf6c>
     c40:	bl	0 <coda_get_option_use_fast_size_expressions>
     c44:	mov	r9, r0
     c48:	add	r5, sp, #104	; 0x68
     c4c:	mov	r0, #1
     c50:	bl	0 <coda_set_option_use_fast_size_expressions>
     c54:	mov	r1, r5
     c58:	mov	r0, r4
     c5c:	bl	0 <coda_cursor_get_bit_size>
     c60:	subs	r7, r0, #0
     c64:	bne	1368 <check_data+0x1368>
     c68:	ldr	r1, [sp, #16]
     c6c:	ldr	r3, [sp, #992]	; 0x3e0
     c70:	eor	r6, r1, #1
     c74:	ldrd	r0, [r5]
     c78:	and	r6, r6, #1
     c7c:	ldrd	r2, [r3]
     c80:	cmp	r3, r1
     c84:	cmpeq	r2, r0
     c88:	beq	d24 <check_data+0xd24>
     c8c:	add	r1, sp, #112	; 0x70
     c90:	lsr	r0, r2, #3
     c94:	mov	ip, r1
     c98:	mov	fp, r1
     c9c:	asr	r1, r3, #3
     ca0:	orr	r0, r0, r3, lsl #29
     ca4:	mov	r2, ip
     ca8:	bl	0 <coda_str64>
     cac:	ldr	r3, [sp, #992]	; 0x3e0
     cb0:	mov	r1, r7
     cb4:	ldr	sl, [r3]
     cb8:	and	r0, sl, #7
     cbc:	orrs	r3, r0, r1
     cc0:	bne	1610 <check_data+0x1610>
     cc4:	ldr	r0, [sp, #104]	; 0x68
     cc8:	add	r7, sp, #144	; 0x90
     ccc:	mov	r2, r7
     cd0:	ldr	r1, [r5, #4]
     cd4:	lsr	r0, r0, #3
     cd8:	orr	r0, r0, r1, lsl #29
     cdc:	asr	r1, r1, #3
     ce0:	bl	0 <coda_str64>
     ce4:	ldr	r5, [sp, #104]	; 0x68
     ce8:	mov	r1, #0
     cec:	and	r0, r5, #7
     cf0:	orrs	r3, r0, r1
     cf4:	bne	15f0 <check_data+0x15f0>
     cf8:	mov	r3, r7
     cfc:	mov	r2, fp
     d00:	add	r0, sp, #176	; 0xb0
     d04:	movw	r1, #0
     d08:	movt	r1, #0
     d0c:	bl	0 <sprintf>
     d10:	add	r1, sp, #176	; 0xb0
     d14:	mov	r0, r4
     d18:	ldr	r3, [sp, #996]	; 0x3e4
     d1c:	ldr	r2, [sp, #1000]	; 0x3e8
     d20:	blx	r3
     d24:	mov	r0, r9
     d28:	bl	0 <coda_set_option_use_fast_size_expressions>
     d2c:	b	40c <check_data+0x40c>
     d30:	mov	r3, #0
     d34:	add	r1, sp, #176	; 0xb0
     d38:	str	r3, [sp, #176]	; 0xb0
     d3c:	bl	0 <coda_type_get_array_base_type>
     d40:	cmp	r0, #0
     d44:	beq	24c <check_data+0x24c>
     d48:	b	4fc <check_data+0x4fc>
     d4c:	ldr	r3, [r8, #52]	; 0x34
     d50:	movw	r0, #0
     d54:	movt	r0, #0
     d58:	ldr	r3, [r3, r5]
     d5c:	ldr	r1, [r3]
     d60:	bl	0 <coda_add_error_message>
     d64:	ldr	r3, [pc, #1800]	; 1474 <check_data+0x1474>
     d68:	ldr	r3, [pc, r3]
     d6c:	ldr	r0, [r9, r3]
     d70:	bl	0 <coda_errno_to_string>
     d74:	mov	r1, r0
     d78:	mov	r2, fp
     d7c:	mov	r0, r4
     d80:	blx	sl
     d84:	ldr	r3, [pc, #1772]	; 1478 <check_data+0x1478>
     d88:	mov	r2, #0
     d8c:	ldr	r3, [pc, r3]
     d90:	str	r2, [r9, r3]
     d94:	b	a44 <check_data+0xa44>
     d98:	mov	r0, r4
     d9c:	bl	0 <coda_cursor_goto_first_record_field>
     da0:	subs	r7, r0, #0
     da4:	bne	4fc <check_data+0x4fc>
     da8:	ldr	r3, [sp, #92]	; 0x5c
     dac:	cmp	r3, #0
     db0:	ble	1158 <check_data+0x1158>
     db4:	mrc	15, 0, r2, cr13, cr0, {3}
     db8:	add	r3, sp, #112	; 0x70
     dbc:	str	sl, [sp, #24]
     dc0:	mov	sl, r3
     dc4:	ldr	r9, [sp, #992]	; 0x3e0
     dc8:	str	r2, [sp, #44]	; 0x2c
     dcc:	str	r8, [sp, #48]	; 0x30
     dd0:	b	de0 <check_data+0xde0>
     dd4:	add	r7, r7, #1
     dd8:	cmp	r7, r3
     ddc:	bge	1154 <check_data+0x1154>
     de0:	mov	r3, #0
     de4:	mov	r2, sl
     de8:	mov	r1, r7
     dec:	mov	r0, fp
     df0:	str	r3, [sp, #104]	; 0x68
     df4:	bl	0 <coda_cursor_get_record_field_available_status>
     df8:	cmp	r0, #0
     dfc:	bne	4fc <check_data+0x4fc>
     e00:	ldr	r3, [sp, #112]	; 0x70
     e04:	cmp	r3, #0
     e08:	beq	ec0 <check_data+0xec0>
     e0c:	ldr	r3, [r5]
     e10:	cmp	r3, #0
     e14:	addeq	r8, sp, #104	; 0x68
     e18:	beq	e68 <check_data+0xe68>
     e1c:	add	r2, sp, #144	; 0x90
     e20:	mov	r1, r7
     e24:	ldr	r0, [sp, #88]	; 0x58
     e28:	bl	0 <coda_type_get_record_field_name>
     e2c:	subs	r3, r0, #0
     e30:	str	r3, [sp, #32]
     e34:	bne	4fc <check_data+0x4fc>
     e38:	add	r2, sp, #176	; 0xb0
     e3c:	ldr	r0, [r5]
     e40:	ldr	r1, [sp, #144]	; 0x90
     e44:	bl	0 <coda_type_get_record_field_index_from_name>
     e48:	cmp	r0, #0
     e4c:	beq	ee8 <check_data+0xee8>
     e50:	ldr	r3, [pc, #1572]	; 147c <check_data+0x147c>
     e54:	add	r8, sp, #104	; 0x68
     e58:	ldr	r2, [sp, #32]
     e5c:	ldr	r1, [sp, #44]	; 0x2c
     e60:	ldr	r3, [pc, r3]
     e64:	str	r2, [r1, r3]
     e68:	add	r1, sp, #96	; 0x60
     e6c:	mov	r3, r6
     e70:	ldr	r2, [sp, #24]
     e74:	mov	r0, r4
     e78:	ldr	ip, [sp, #996]	; 0x3e4
     e7c:	stm	sp, {r1, ip}
     e80:	mov	r1, r8
     e84:	ldr	ip, [sp, #1000]	; 0x3e8
     e88:	str	ip, [sp, #8]
     e8c:	bl	0 <check_data>
     e90:	cmp	r0, #0
     e94:	bne	4fc <check_data+0x4fc>
     e98:	cmp	r6, #0
     e9c:	beq	ec0 <check_data+0xec0>
     ea0:	ldr	r1, [r8, #-8]
     ea4:	ldr	r3, [r9]
     ea8:	ldr	r0, [r8, #-4]
     eac:	ldr	r2, [r9, #4]
     eb0:	adds	r3, r3, r1
     eb4:	str	r3, [r9]
     eb8:	adc	r3, r2, r0
     ebc:	str	r3, [r9, #4]
     ec0:	ldr	r3, [sp, #92]	; 0x5c
     ec4:	sub	r2, r3, #1
     ec8:	cmp	r2, r7
     ecc:	ble	dd4 <check_data+0xdd4>
     ed0:	mov	r0, r4
     ed4:	bl	0 <coda_cursor_goto_next_record_field>
     ed8:	cmp	r0, #0
     edc:	bne	4fc <check_data+0x4fc>
     ee0:	ldr	r3, [sp, #92]	; 0x5c
     ee4:	b	dd4 <check_data+0xdd4>
     ee8:	add	r8, sp, #104	; 0x68
     eec:	ldr	r0, [r5]
     ef0:	mov	r2, r8
     ef4:	ldr	r1, [sp, #176]	; 0xb0
     ef8:	bl	0 <coda_type_get_record_field_type>
     efc:	cmp	r0, #0
     f00:	beq	e68 <check_data+0xe68>
     f04:	b	4fc <check_data+0x4fc>
     f08:	bl	0 <coda_type_get_special_type_name>
     f0c:	mov	r9, r0
     f10:	ldr	r0, [sp, #432]	; 0x1b0
     f14:	mrc	15, 0, r7, cr13, cr0, {3}
     f18:	bl	0 <coda_type_get_special_type_name>
     f1c:	mov	r3, r0
     f20:	mov	r2, r9
     f24:	movw	r1, #0
     f28:	movt	r1, #0
     f2c:	movw	r0, #65236	; 0xfed4
     f30:	movt	r0, #65535	; 0xffff
     f34:	bl	0 <coda_set_error>
     f38:	ldr	r3, [pc, #1344]	; 1480 <check_data+0x1480>
     f3c:	ldr	r3, [pc, r3]
     f40:	ldr	r0, [r7, r3]
     f44:	bl	0 <coda_errno_to_string>
     f48:	mov	r1, r0
     f4c:	mov	r0, r4
     f50:	ldr	r3, [sp, #996]	; 0x3e4
     f54:	ldr	r2, [sp, #1000]	; 0x3e8
     f58:	blx	r3
     f5c:	ldr	r3, [pc, #1312]	; 1484 <check_data+0x1484>
     f60:	ldr	r3, [pc, r3]
     f64:	str	r8, [r7, r3]
     f68:	b	7d4 <check_data+0x7d4>
     f6c:	ldr	r3, [sp, #16]
     f70:	eor	r6, r3, #1
     f74:	and	r6, r6, #1
     f78:	b	40c <check_data+0x40c>
     f7c:	movw	r1, #0
     f80:	movt	r1, #0
     f84:	ldr	r3, [sp, #996]	; 0x3e4
     f88:	mov	r0, r4
     f8c:	ldr	r2, [sp, #1000]	; 0x3e8
     f90:	blx	r3
     f94:	b	6d0 <check_data+0x6d0>
     f98:	movw	r1, #0
     f9c:	movt	r1, #0
     fa0:	movw	r0, #65236	; 0xfed4
     fa4:	movt	r0, #65535	; 0xffff
     fa8:	bl	0 <coda_set_error>
     fac:	ldr	r3, [pc, #1236]	; 1488 <check_data+0x1488>
     fb0:	mrc	15, 0, r8, cr13, cr0, {3}
     fb4:	ldr	r3, [pc, r3]
     fb8:	ldr	r0, [r8, r3]
     fbc:	bl	0 <coda_errno_to_string>
     fc0:	mov	r1, r0
     fc4:	mov	r0, r4
     fc8:	ldr	r3, [sp, #996]	; 0x3e4
     fcc:	ldr	r2, [sp, #1000]	; 0x3e8
     fd0:	blx	r3
     fd4:	ldr	r3, [pc, #1200]	; 148c <check_data+0x148c>
     fd8:	ldr	r3, [pc, r3]
     fdc:	str	r7, [r8, r3]
     fe0:	b	c8 <check_data+0xc8>
     fe4:	movw	r1, #0
     fe8:	movt	r1, #0
     fec:	ldr	r3, [sp, #996]	; 0x3e4
     ff0:	mov	r0, r4
     ff4:	ldr	r2, [sp, #1000]	; 0x3e8
     ff8:	blx	r3
     ffc:	b	6d0 <check_data+0x6d0>
    1000:	mov	r0, r4
    1004:	ldr	r1, [sp, #992]	; 0x3e0
    1008:	bl	0 <coda_cursor_get_bit_size>
    100c:	cmp	r0, #0
    1010:	beq	540 <check_data+0x540>
    1014:	ldr	r3, [pc, #1140]	; 1490 <check_data+0x1490>
    1018:	mrc	15, 0, r2, cr13, cr0, {3}
    101c:	ldr	r3, [pc, r3]
    1020:	ldr	r0, [r2, r3]
    1024:	add	r3, r0, #104	; 0x68
    1028:	cmn	r0, #300	; 0x12c
    102c:	cmpne	r3, #1
    1030:	bls	6b8 <check_data+0x6b8>
    1034:	b	4fc <check_data+0x4fc>
    1038:	ldr	r5, [sp, #52]	; 0x34
    103c:	ldr	sl, [sp, #56]	; 0x38
    1040:	ldr	r6, [sp, #60]	; 0x3c
    1044:	add	r1, sp, #144	; 0x90
    1048:	mov	r0, r4
    104c:	bl	0 <coda_cursor_get_num_elements>
    1050:	subs	r7, r0, #0
    1054:	bne	4fc <check_data+0x4fc>
    1058:	ldr	r3, [sp, #144]	; 0x90
    105c:	cmp	r3, #0
    1060:	ble	c8 <check_data+0xc8>
    1064:	movw	r3, #0
    1068:	movt	r3, #0
    106c:	movw	fp, #65236	; 0xfed4
    1070:	movt	fp, #65535	; 0xffff
    1074:	str	r3, [sp, #24]
    1078:	add	r3, sp, #176	; 0xb0
    107c:	mrc	15, 0, r9, cr13, cr0, {3}
    1080:	str	r6, [sp, #32]
    1084:	mov	r6, fp
    1088:	mov	fp, r3
    108c:	b	10a0 <check_data+0x10a0>
    1090:	ldr	r3, [sp, #144]	; 0x90
    1094:	add	r7, r7, #1
    1098:	cmp	r7, r3
    109c:	bge	1200 <check_data+0x1200>
    10a0:	mov	r2, fp
    10a4:	mov	r1, r7
    10a8:	ldr	r0, [sp, #104]	; 0x68
    10ac:	bl	0 <coda_type_get_record_field_name>
    10b0:	subs	r8, r0, #0
    10b4:	bne	4fc <check_data+0x4fc>
    10b8:	add	r2, sp, #432	; 0x1b0
    10bc:	ldr	r0, [r5]
    10c0:	ldr	r1, [sp, #176]	; 0xb0
    10c4:	bl	0 <coda_type_get_record_field_index_from_name>
    10c8:	cmp	r0, #0
    10cc:	beq	1090 <check_data+0x1090>
    10d0:	ldr	r3, [pc, #956]	; 1494 <check_data+0x1494>
    10d4:	ldr	r3, [pc, r3]
    10d8:	ldr	r3, [r9, r3]
    10dc:	cmn	r3, #102	; 0x66
    10e0:	bne	1090 <check_data+0x1090>
    10e4:	mov	r0, r6
    10e8:	ldr	r1, [sp, #24]
    10ec:	ldr	r2, [sp, #176]	; 0xb0
    10f0:	bl	0 <coda_set_error>
    10f4:	ldr	r3, [pc, #924]	; 1498 <check_data+0x1498>
    10f8:	ldr	r3, [pc, r3]
    10fc:	ldr	r0, [r9, r3]
    1100:	bl	0 <coda_errno_to_string>
    1104:	mov	r1, r0
    1108:	mov	r0, r4
    110c:	ldr	r3, [sp, #996]	; 0x3e4
    1110:	ldr	r2, [sp, #1000]	; 0x3e8
    1114:	blx	r3
    1118:	ldr	r3, [pc, #892]	; 149c <check_data+0x149c>
    111c:	ldr	r3, [pc, r3]
    1120:	str	r8, [r9, r3]
    1124:	b	1090 <check_data+0x1090>
    1128:	ldr	r8, [sp, #24]
    112c:	ldr	r5, [sp, #32]
    1130:	mov	r0, r4
    1134:	bl	0 <coda_cursor_goto_parent>
    1138:	ldr	r3, [r5]
    113c:	cmp	r3, #0
    1140:	beq	3fc <check_data+0x3fc>
    1144:	ldr	r3, [sp, #176]	; 0xb0
    1148:	cmp	r3, #0
    114c:	streq	r3, [r5]
    1150:	b	3fc <check_data+0x3fc>
    1154:	ldr	r8, [sp, #48]	; 0x30
    1158:	mov	r0, r4
    115c:	bl	0 <coda_cursor_goto_parent>
    1160:	b	c28 <check_data+0xc28>
    1164:	mov	r1, r7
    1168:	movw	r0, #0
    116c:	movt	r0, #0
    1170:	bl	0 <coda_add_error_message>
    1174:	ldr	r3, [pc, #804]	; 14a0 <check_data+0x14a0>
    1178:	ldr	r3, [pc, r3]
    117c:	ldr	r0, [r9, r3]
    1180:	bl	0 <coda_errno_to_string>
    1184:	mov	r1, r0
    1188:	mov	r0, r4
    118c:	ldr	r3, [sp, #996]	; 0x3e4
    1190:	ldr	r2, [sp, #1000]	; 0x3e8
    1194:	blx	r3
    1198:	ldr	r3, [pc, #772]	; 14a4 <check_data+0x14a4>
    119c:	mov	r1, #0
    11a0:	ldr	r2, [sp, #144]	; 0x90
    11a4:	ldr	r3, [pc, r3]
    11a8:	str	r1, [r9, r3]
    11ac:	b	930 <check_data+0x930>
    11b0:	mov	r3, ip
    11b4:	mov	r2, r7
    11b8:	str	r0, [sp]
    11bc:	mov	r1, r6
    11c0:	mov	r0, sl
    11c4:	bl	0 <coda_set_error>
    11c8:	ldr	r3, [pc, #728]	; 14a8 <check_data+0x14a8>
    11cc:	ldr	r3, [pc, r3]
    11d0:	ldr	r0, [r9, r3]
    11d4:	bl	0 <coda_errno_to_string>
    11d8:	mov	r1, r0
    11dc:	mov	r0, r4
    11e0:	ldr	r3, [sp, #996]	; 0x3e4
    11e4:	ldr	r2, [sp, #1000]	; 0x3e8
    11e8:	blx	r3
    11ec:	ldr	r3, [pc, #696]	; 14ac <check_data+0x14ac>
    11f0:	ldr	r2, [sp, #144]	; 0x90
    11f4:	ldr	r3, [pc, r3]
    11f8:	str	r5, [r9, r3]
    11fc:	b	930 <check_data+0x930>
    1200:	ldr	r6, [sp, #32]
    1204:	b	c8 <check_data+0xc8>
    1208:	cmp	r2, r0
    120c:	sbcs	lr, r3, r1
    1210:	bge	72c <check_data+0x72c>
    1214:	subs	r3, r0, sl
    1218:	ldr	r9, [ip, #24]
    121c:	str	r3, [sp, #64]	; 0x40
    1220:	sbc	r3, r1, fp
    1224:	str	r3, [sp, #68]	; 0x44
    1228:	ldrd	r2, [sp, #64]	; 0x40
    122c:	add	r0, r2, #1
    1230:	mov	r6, r2
    1234:	bl	0 <malloc>
    1238:	subs	r5, r0, #0
    123c:	beq	1714 <check_data+0x1714>
    1240:	ldr	r1, [r7, #48]	; 0x30
    1244:	cmp	r1, #0
    1248:	beq	16f8 <check_data+0x16f8>
    124c:	ldrd	r2, [r7, #40]	; 0x28
    1250:	strd	r2, [sp, #32]
    1254:	adds	r2, sl, r9
    1258:	adc	r3, fp, r9, asr #31
    125c:	ldrd	sl, [sp, #64]	; 0x40
    1260:	strd	r2, [sp, #16]
    1264:	ldr	lr, [sp, #20]
    1268:	adds	ip, r2, sl
    126c:	strd	sl, [sp, #24]
    1270:	ldrd	r2, [sp, #32]
    1274:	str	ip, [sp, #72]	; 0x48
    1278:	adc	ip, lr, fp
    127c:	str	ip, [sp, #76]	; 0x4c
    1280:	ldrd	sl, [sp, #72]	; 0x48
    1284:	cmp	fp, r3
    1288:	cmpeq	sl, r2
    128c:	bls	153c <check_data+0x153c>
    1290:	add	r2, sp, #144	; 0x90
    1294:	ldrd	r0, [sp, #24]
    1298:	add	r4, sp, #432	; 0x1b0
    129c:	bl	0 <coda_str64>
    12a0:	add	r2, sp, #176	; 0xb0
    12a4:	ldrd	r0, [sp, #16]
    12a8:	mvn	r8, #0
    12ac:	bl	0 <coda_str64>
    12b0:	mov	r2, r4
    12b4:	ldrd	r0, [r7, #40]	; 0x28
    12b8:	bl	0 <coda_str64>
    12bc:	add	r3, sp, #176	; 0xb0
    12c0:	add	r2, sp, #144	; 0x90
    12c4:	str	r4, [sp]
    12c8:	mvn	r0, #300	; 0x12c
    12cc:	movw	r1, #0
    12d0:	movt	r1, #0
    12d4:	bl	0 <coda_set_error>
    12d8:	mov	r0, r5
    12dc:	bl	0 <free>
    12e0:	b	42c <check_data+0x42c>
    12e4:	cmp	r7, #0
    12e8:	ble	194 <check_data+0x194>
    12ec:	mov	r0, r7
    12f0:	bl	0 <malloc>
    12f4:	subs	fp, r0, #0
    12f8:	beq	16d0 <check_data+0x16d0>
    12fc:	ldr	r3, [sp, #992]	; 0x3e0
    1300:	mov	r1, fp
    1304:	mov	r0, r4
    1308:	ldrd	r2, [r3]
    130c:	mov	r8, r2
    1310:	mov	r9, r3
    1314:	mov	r2, #0
    1318:	mov	r3, #0
    131c:	strd	r8, [sp]
    1320:	bl	0 <coda_cursor_read_bits>
    1324:	cmp	r0, #0
    1328:	mov	r0, fp
    132c:	bne	1760 <check_data+0x1760>
    1330:	ldr	r1, [sp, #176]	; 0xb0
    1334:	ldr	r2, [sp, #432]	; 0x1b0
    1338:	bl	0 <memcmp>
    133c:	cmp	r0, #0
    1340:	beq	135c <check_data+0x135c>
    1344:	movw	r1, #0
    1348:	movt	r1, #0
    134c:	ldr	r3, [sp, #996]	; 0x3e4
    1350:	mov	r0, r4
    1354:	ldr	r2, [sp, #1000]	; 0x3e8
    1358:	blx	r3
    135c:	mov	r0, fp
    1360:	bl	0 <free>
    1364:	b	194 <check_data+0x194>
    1368:	ldr	r3, [pc, #320]	; 14b0 <check_data+0x14b0>
    136c:	mrc	15, 0, r2, cr13, cr0, {3}
    1370:	ldr	r3, [pc, r3]
    1374:	ldr	r0, [r2, r3]
    1378:	bl	0 <coda_errno_to_string>
    137c:	mov	r1, r0
    1380:	mov	r0, r4
    1384:	ldr	r3, [sp, #996]	; 0x3e4
    1388:	ldr	r2, [sp, #1000]	; 0x3e8
    138c:	blx	r3
    1390:	mov	r0, r9
    1394:	bl	0 <coda_set_option_use_fast_size_expressions>
    1398:	b	42c <check_data+0x42c>
    139c:	ldr	r3, [r4]
    13a0:	ldr	r3, [r3, #60]	; 0x3c
    13a4:	cmp	r3, #3
    13a8:	ldrls	pc, [pc, r3, lsl #2]
    13ac:	b	184 <check_data+0x184>
    13b0:	.word	0x00001740
    13b4:	.word	0x00001410
    13b8:	.word	0x000013e8
    13bc:	.word	0x000013c0
    13c0:	ldr	r3, [sp, #144]	; 0x90
    13c4:	cmp	r3, #2
    13c8:	beq	164c <check_data+0x164c>
    13cc:	movw	r1, #0
    13d0:	movt	r1, #0
    13d4:	ldr	r3, [sp, #996]	; 0x3e4
    13d8:	mov	r0, r4
    13dc:	ldr	r2, [sp, #1000]	; 0x3e8
    13e0:	blx	r3
    13e4:	b	184 <check_data+0x184>
    13e8:	ldr	r3, [sp, #144]	; 0x90
    13ec:	cmp	r3, #1
    13f0:	beq	1668 <check_data+0x1668>
    13f4:	movw	r1, #0
    13f8:	movt	r1, #0
    13fc:	ldr	r3, [sp, #996]	; 0x3e4
    1400:	mov	r0, r4
    1404:	ldr	r2, [sp, #1000]	; 0x3e8
    1408:	blx	r3
    140c:	b	184 <check_data+0x184>
    1410:	ldr	r3, [sp, #144]	; 0x90
    1414:	cmp	r3, #1
    1418:	beq	1678 <check_data+0x1678>
    141c:	movw	r1, #0
    1420:	movt	r1, #0
    1424:	ldr	r3, [sp, #996]	; 0x3e4
    1428:	mov	r0, r4
    142c:	ldr	r2, [sp, #1000]	; 0x3e8
    1430:	blx	r3
    1434:	b	184 <check_data+0x184>
    1438:	.word	0x00000fb0
    143c:	.word	0x00000f88
    1440:	.word	0x00000e20
    1444:	.word	0x00000dec
    1448:	.word	0x00000da0
    144c:	.word	0x00000c04
    1450:	.word	0x00000be4
    1454:	.word	0x00000b50
    1458:	.word	0x00000b28
    145c:	.word	0x00000a68
    1460:	.word	0x00000a54
    1464:	.word	0x000009b8
    1468:	.word	0x00000994
    146c:	.word	0x000008a0
    1470:	.word	0x00000880
    1474:	.word	0x00000704
    1478:	.word	0x000006e4
    147c:	.word	0x00000614
    1480:	.word	0x0000053c
    1484:	.word	0x0000051c
    1488:	.word	0x000004cc
    148c:	.word	0x000004ac
    1490:	.word	0x0000046c
    1494:	.word	0x000003b8
    1498:	.word	0x00000398
    149c:	.word	0x00000378
    14a0:	.word	0x00000320
    14a4:	.word	0x000002f8
    14a8:	.word	0x000002d4
    14ac:	.word	0x000002b0
    14b0:	.word	0x00000138
    14b4:	.word	0x0000000c
    14b8:	cmp	r2, #0
    14bc:	ble	174 <check_data+0x174>
    14c0:	mov	r0, r7
    14c4:	bl	0 <memcmp>
    14c8:	cmp	r0, #0
    14cc:	beq	14e8 <check_data+0x14e8>
    14d0:	movw	r1, #0
    14d4:	movt	r1, #0
    14d8:	ldr	r3, [sp, #996]	; 0x3e4
    14dc:	mov	r0, r4
    14e0:	ldr	r2, [sp, #1000]	; 0x3e8
    14e4:	blx	r3
    14e8:	ldr	r3, [sp, #88]	; 0x58
    14ec:	ldr	r3, [r3, #44]	; 0x2c
    14f0:	cmp	r3, #1
    14f4:	bne	18c <check_data+0x18c>
    14f8:	ldr	r3, [r4]
    14fc:	ldr	r3, [r3, #60]	; 0x3c
    1500:	cmp	r3, #3
    1504:	ldrls	pc, [pc, r3, lsl #2]
    1508:	b	18c <check_data+0x18c>
    150c:	.word	0x00001740
    1510:	.word	0x00001410
    1514:	.word	0x000013e8
    1518:	.word	0x000013c0
    151c:	mov	r0, r9
    1520:	bl	0 <strlen>
    1524:	add	r0, r9, r0
    1528:	mov	r2, r6
    152c:	movw	r1, #0
    1530:	movt	r1, #0
    1534:	bl	0 <sprintf>
    1538:	b	76c <check_data+0x76c>
    153c:	ldr	r3, [sp, #16]
    1540:	ldrd	sl, [sp, #64]	; 0x40
    1544:	add	r1, r1, r3
    1548:	mov	r2, sl
    154c:	bl	0 <memcpy>
    1550:	mov	r3, #0
    1554:	cmp	sl, #1
    1558:	sbcs	r2, fp, #0
    155c:	strb	r3, [r5, r6]
    1560:	blt	15e4 <check_data+0x15e4>
    1564:	ldrb	r3, [r5]
    1568:	cmp	r3, #13
    156c:	cmpne	r3, #32
    1570:	sub	r3, r3, #9
    1574:	movne	r2, #1
    1578:	moveq	r2, #0
    157c:	cmp	r3, #1
    1580:	movls	r3, #0
    1584:	andhi	r3, r2, #1
    1588:	cmp	r3, #0
    158c:	bne	1630 <check_data+0x1630>
    1590:	mov	r2, r5
    1594:	mov	r0, #1
    1598:	ldrd	r6, [sp, #64]	; 0x40
    159c:	mov	r1, #0
    15a0:	b	15d8 <check_data+0x15d8>
    15a4:	ldrb	r3, [r2, #1]!
    15a8:	adds	r0, r0, #1
    15ac:	adc	r1, r1, #0
    15b0:	cmp	r3, #32
    15b4:	cmpne	r3, #13
    15b8:	sub	ip, r3, #9
    15bc:	movne	r3, #1
    15c0:	moveq	r3, #0
    15c4:	cmp	ip, #1
    15c8:	movls	r3, #0
    15cc:	andhi	r3, r3, #1
    15d0:	cmp	r3, #0
    15d4:	bne	1630 <check_data+0x1630>
    15d8:	cmp	r1, r7
    15dc:	cmpeq	r0, r6
    15e0:	bne	15a4 <check_data+0x15a4>
    15e4:	mov	r0, r5
    15e8:	bl	0 <free>
    15ec:	b	42c <check_data+0x42c>
    15f0:	mov	r0, r7
    15f4:	bl	0 <strlen>
    15f8:	add	r0, r7, r0
    15fc:	and	r2, r5, #7
    1600:	movw	r1, #0
    1604:	movt	r1, #0
    1608:	bl	0 <sprintf>
    160c:	b	cf8 <check_data+0xcf8>
    1610:	mov	r0, fp
    1614:	bl	0 <strlen>
    1618:	add	r0, fp, r0
    161c:	and	r2, sl, #7
    1620:	movw	r1, #0
    1624:	movt	r1, #0
    1628:	bl	0 <sprintf>
    162c:	b	cc4 <check_data+0xcc4>
    1630:	mov	r0, r4
    1634:	movw	r1, #0
    1638:	movt	r1, #0
    163c:	ldr	r3, [sp, #996]	; 0x3e4
    1640:	ldr	r2, [sp, #1000]	; 0x3e8
    1644:	blx	r3
    1648:	b	15e4 <check_data+0x15e4>
    164c:	ldrb	r3, [r7]
    1650:	cmp	r3, #13
    1654:	bne	13cc <check_data+0x13cc>
    1658:	ldrb	r3, [r7, #1]
    165c:	cmp	r3, #10
    1660:	bne	13cc <check_data+0x13cc>
    1664:	b	18c <check_data+0x18c>
    1668:	ldrb	r3, [r7]
    166c:	cmp	r3, #13
    1670:	bne	13f4 <check_data+0x13f4>
    1674:	b	18c <check_data+0x18c>
    1678:	ldrb	r3, [r7]
    167c:	cmp	r3, #10
    1680:	bne	141c <check_data+0x141c>
    1684:	b	18c <check_data+0x18c>
    1688:	movw	r3, #0
    168c:	movt	r3, #0
    1690:	movw	r1, #0
    1694:	movt	r1, #0
    1698:	movw	r0, #0
    169c:	movt	r0, #0
    16a0:	movw	r2, #778	; 0x30a
    16a4:	bl	0 <__assert_fail>
    16a8:	movw	ip, #411	; 0x19b
    16ac:	movw	r3, #0
    16b0:	movt	r3, #0
    16b4:	movw	r1, #0
    16b8:	movt	r1, #0
    16bc:	mvn	r0, #0
    16c0:	str	ip, [sp]
    16c4:	add	r2, r2, #1
    16c8:	bl	0 <coda_set_error>
    16cc:	b	4fc <check_data+0x4fc>
    16d0:	mov	r0, #524	; 0x20c
    16d4:	mov	r2, r7
    16d8:	movw	r3, #0
    16dc:	movt	r3, #0
    16e0:	movw	r1, #0
    16e4:	movt	r1, #0
    16e8:	str	r0, [sp]
    16ec:	mvn	r0, #0
    16f0:	bl	0 <coda_set_error>
    16f4:	b	4fc <check_data+0x4fc>
    16f8:	movw	r1, #0
    16fc:	movt	r1, #0
    1700:	ldr	r3, [pc, #-596]	; 14b4 <check_data+0x14b4>
    1704:	movw	r0, #0
    1708:	movt	r0, #0
    170c:	mov	r2, #83	; 0x53
    1710:	bl	0 <__assert_fail>
    1714:	movw	r0, #831	; 0x33f
    1718:	movw	r3, #0
    171c:	movt	r3, #0
    1720:	movw	r1, #0
    1724:	movt	r1, #0
    1728:	str	r0, [sp]
    172c:	mvn	r0, #0
    1730:	ldr	r2, [sp, #64]	; 0x40
    1734:	mov	r8, r0
    1738:	bl	0 <coda_set_error>
    173c:	b	42c <check_data+0x42c>
    1740:	movw	r3, #0
    1744:	movt	r3, #0
    1748:	movw	r1, #0
    174c:	movt	r1, #0
    1750:	movw	r0, #0
    1754:	movt	r0, #0
    1758:	movw	r2, #462	; 0x1ce
    175c:	bl	0 <__assert_fail>
    1760:	bl	0 <free>
    1764:	b	4fc <check_data+0x4fc>

00001768 <coda_product_check>:
    1768:	strd	r4, [sp, #-28]!	; 0xffffffe4
    176c:	mov	r4, r0
    1770:	mov	r0, #0
    1774:	strd	r6, [sp, #8]
    1778:	mov	r6, #0
    177c:	mov	r7, #0
    1780:	strd	r8, [sp, #16]
    1784:	mov	r5, r1
    1788:	mov	r1, r4
    178c:	str	lr, [sp, #24]
    1790:	sub	sp, sp, #868	; 0x364
    1794:	mov	r9, r2
    1798:	mov	r8, r3
    179c:	str	r0, [sp, #16]
    17a0:	add	r0, sp, #344	; 0x158
    17a4:	strd	r6, [sp, #24]
    17a8:	strd	r6, [sp, #32]
    17ac:	bl	0 <coda_cursor_set_product>
    17b0:	cmp	r0, #0
    17b4:	bne	18a8 <coda_product_check+0x140>
    17b8:	add	r1, sp, #20
    17bc:	mov	r0, r4
    17c0:	bl	0 <coda_get_product_format>
    17c4:	subs	r6, r0, #0
    17c8:	bne	18a8 <coda_product_check+0x140>
    17cc:	ldr	r3, [sp, #20]
    17d0:	cmp	r3, #2
    17d4:	bhi	1868 <coda_product_check+0x100>
    17d8:	beq	1880 <coda_product_check+0x118>
    17dc:	mov	r0, r4
    17e0:	add	r1, sp, #24
    17e4:	bl	0 <coda_get_product_file_size>
    17e8:	cmp	r0, #0
    17ec:	bne	18a8 <coda_product_check+0x140>
    17f0:	ldrd	r2, [sp, #24]
    17f4:	cmp	r5, #0
    17f8:	lsl	r3, r3, #3
    17fc:	orr	r3, r3, r2, lsr #29
    1800:	lsl	r2, r2, #3
    1804:	strd	r2, [sp, #24]
    1808:	bne	1958 <coda_product_check+0x1f0>
    180c:	bl	0 <coda_get_option_use_fast_size_expressions>
    1810:	mov	r4, r0
    1814:	mov	r0, r6
    1818:	bl	0 <coda_set_option_use_fast_size_expressions>
    181c:	add	r1, sp, #32
    1820:	add	r0, sp, #344	; 0x158
    1824:	bl	0 <coda_cursor_get_bit_size>
    1828:	cmp	r0, #0
    182c:	mov	r0, r4
    1830:	bne	194c <coda_product_check+0x1e4>
    1834:	bl	0 <coda_set_option_use_fast_size_expressions>
    1838:	ldrd	r4, [sp, #24]
    183c:	ldrd	r2, [sp, #32]
    1840:	cmp	r5, r3
    1844:	cmpeq	r4, r2
    1848:	bne	18b0 <coda_product_check+0x148>
    184c:	mov	r0, r6
    1850:	add	sp, sp, #868	; 0x364
    1854:	ldrd	r4, [sp]
    1858:	ldrd	r6, [sp, #8]
    185c:	ldrd	r8, [sp, #16]
    1860:	add	sp, sp, #24
    1864:	pop	{pc}		; (ldr pc, [sp], #4)
    1868:	ldr	r3, [r4, #24]
    186c:	cmp	r3, #0
    1870:	beq	1880 <coda_product_check+0x118>
    1874:	ldr	r3, [r3, #28]
    1878:	cmp	r3, #0
    187c:	strne	r3, [sp, #16]
    1880:	add	r3, sp, #32
    1884:	mov	r2, r5
    1888:	add	r0, sp, #344	; 0x158
    188c:	add	r1, sp, #16
    1890:	stm	sp, {r3, r9}
    1894:	mov	r3, #0
    1898:	str	r8, [sp, #8]
    189c:	bl	0 <check_data>
    18a0:	cmp	r0, #0
    18a4:	beq	184c <coda_product_check+0xe4>
    18a8:	mvn	r6, #0
    18ac:	b	184c <coda_product_check+0xe4>
    18b0:	lsr	r0, r4, #3
    18b4:	add	r2, sp, #40	; 0x28
    18b8:	asr	r1, r5, #3
    18bc:	orr	r0, r0, r5, lsl #29
    18c0:	bl	0 <coda_str64>
    18c4:	ldrd	r0, [sp, #32]
    18c8:	add	r2, sp, #64	; 0x40
    18cc:	lsr	r0, r0, #3
    18d0:	orr	r0, r0, r1, lsl #29
    18d4:	asr	r1, r1, #3
    18d8:	bl	0 <coda_str64>
    18dc:	ldr	r1, [sp, #32]
    18e0:	mov	r3, #0
    18e4:	and	r2, r1, #7
    18e8:	orrs	r3, r2, r3
    18ec:	beq	192c <coda_product_check+0x1c4>
    18f0:	mov	r1, r2
    18f4:	add	r4, sp, #88	; 0x58
    18f8:	add	r3, sp, #64	; 0x40
    18fc:	add	r2, sp, #40	; 0x28
    1900:	mov	r0, r4
    1904:	str	r1, [sp]
    1908:	movw	r1, #0
    190c:	movt	r1, #0
    1910:	bl	0 <sprintf>
    1914:	mov	r0, #0
    1918:	mov	r2, r8
    191c:	mov	r1, r4
    1920:	mov	r6, r0
    1924:	blx	r9
    1928:	b	184c <coda_product_check+0xe4>
    192c:	add	r4, sp, #88	; 0x58
    1930:	add	r3, sp, #64	; 0x40
    1934:	add	r2, sp, #40	; 0x28
    1938:	mov	r0, r4
    193c:	movw	r1, #0
    1940:	movt	r1, #0
    1944:	bl	0 <sprintf>
    1948:	b	1914 <coda_product_check+0x1ac>
    194c:	mvn	r6, #0
    1950:	bl	0 <coda_set_option_use_fast_size_expressions>
    1954:	b	184c <coda_product_check+0xe4>
    1958:	add	r3, sp, #32
    195c:	mov	r2, r5
    1960:	add	r0, sp, #344	; 0x158
    1964:	add	r1, sp, #16
    1968:	stm	sp, {r3, r9}
    196c:	mov	r3, #1
    1970:	str	r8, [sp, #8]
    1974:	bl	0 <check_data>
    1978:	cmp	r0, #0
    197c:	beq	1838 <coda_product_check+0xd0>
    1980:	b	18a8 <coda_product_check+0x140>
