
../compcert-repos/stcorp-coda-3a25f25/CMakeFiles/coda_static.dir/libcoda/coda.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <coda_get_libcoda_version>:
   0:	push	{fp, lr}
   4:	add	fp, sp, #4
   8:	bl	0 <__aeabi_read_tp>
   c:	mov	r2, r0
  10:	ldr	r3, [pc, #8]	; 20 <coda_get_libcoda_version+0x20>
  14:	ldr	r3, [r2, r3]
  18:	mov	r0, r3
  1c:	pop	{fp, pc}
  20:	.word	0x00000000

00000024 <coda_set_option_bypass_special_types>:
  24:	push	{fp, lr}
  28:	add	fp, sp, #4
  2c:	sub	sp, sp, #8
  30:	str	r0, [fp, #-8]
  34:	ldr	r3, [fp, #-8]
  38:	cmp	r3, #0
  3c:	beq	64 <coda_set_option_bypass_special_types+0x40>
  40:	ldr	r3, [fp, #-8]
  44:	cmp	r3, #1
  48:	beq	64 <coda_set_option_bypass_special_types+0x40>
  4c:	ldr	r2, [fp, #-8]
  50:	ldr	r1, [pc, #48]	; 88 <coda_set_option_bypass_special_types+0x64>
  54:	mvn	r0, #99	; 0x63
  58:	bl	0 <coda_set_error>
  5c:	mvn	r3, #0
  60:	b	7c <coda_set_option_bypass_special_types+0x58>
  64:	bl	0 <__aeabi_read_tp>
  68:	mov	r1, r0
  6c:	ldr	r2, [pc, #24]	; 8c <coda_set_option_bypass_special_types+0x68>
  70:	ldr	r3, [fp, #-8]
  74:	str	r3, [r1, r2]
  78:	mov	r3, #0
  7c:	mov	r0, r3
  80:	sub	sp, fp, #4
  84:	pop	{fp, pc}
  88:	.word	0x00000008
  8c:	.word	0x00000000

00000090 <coda_get_option_bypass_special_types>:
  90:	push	{fp, lr}
  94:	add	fp, sp, #4
  98:	bl	0 <__aeabi_read_tp>
  9c:	mov	r2, r0
  a0:	ldr	r3, [pc, #8]	; b0 <coda_get_option_bypass_special_types+0x20>
  a4:	ldr	r3, [r2, r3]
  a8:	mov	r0, r3
  ac:	pop	{fp, pc}
  b0:	.word	0x00000000

000000b4 <coda_set_option_perform_boundary_checks>:
  b4:	push	{fp, lr}
  b8:	add	fp, sp, #4
  bc:	sub	sp, sp, #8
  c0:	str	r0, [fp, #-8]
  c4:	ldr	r3, [fp, #-8]
  c8:	cmp	r3, #0
  cc:	beq	f4 <coda_set_option_perform_boundary_checks+0x40>
  d0:	ldr	r3, [fp, #-8]
  d4:	cmp	r3, #1
  d8:	beq	f4 <coda_set_option_perform_boundary_checks+0x40>
  dc:	ldr	r2, [fp, #-8]
  e0:	ldr	r1, [pc, #48]	; 118 <coda_set_option_perform_boundary_checks+0x64>
  e4:	mvn	r0, #99	; 0x63
  e8:	bl	0 <coda_set_error>
  ec:	mvn	r3, #0
  f0:	b	10c <coda_set_option_perform_boundary_checks+0x58>
  f4:	bl	0 <__aeabi_read_tp>
  f8:	mov	r1, r0
  fc:	ldr	r2, [pc, #24]	; 11c <coda_set_option_perform_boundary_checks+0x68>
 100:	ldr	r3, [fp, #-8]
 104:	str	r3, [r1, r2]
 108:	mov	r3, #0
 10c:	mov	r0, r3
 110:	sub	sp, fp, #4
 114:	pop	{fp, pc}
 118:	.word	0x00000008
 11c:	.word	0x00000000

00000120 <coda_get_option_perform_boundary_checks>:
 120:	push	{fp, lr}
 124:	add	fp, sp, #4
 128:	bl	0 <__aeabi_read_tp>
 12c:	mov	r2, r0
 130:	ldr	r3, [pc, #8]	; 140 <coda_get_option_perform_boundary_checks+0x20>
 134:	ldr	r3, [r2, r3]
 138:	mov	r0, r3
 13c:	pop	{fp, pc}
 140:	.word	0x00000000

00000144 <coda_set_option_perform_conversions>:
 144:	push	{fp, lr}
 148:	add	fp, sp, #4
 14c:	sub	sp, sp, #8
 150:	str	r0, [fp, #-8]
 154:	ldr	r3, [fp, #-8]
 158:	cmp	r3, #0
 15c:	beq	184 <coda_set_option_perform_conversions+0x40>
 160:	ldr	r3, [fp, #-8]
 164:	cmp	r3, #1
 168:	beq	184 <coda_set_option_perform_conversions+0x40>
 16c:	ldr	r2, [fp, #-8]
 170:	ldr	r1, [pc, #48]	; 1a8 <coda_set_option_perform_conversions+0x64>
 174:	mvn	r0, #99	; 0x63
 178:	bl	0 <coda_set_error>
 17c:	mvn	r3, #0
 180:	b	19c <coda_set_option_perform_conversions+0x58>
 184:	bl	0 <__aeabi_read_tp>
 188:	mov	r1, r0
 18c:	ldr	r2, [pc, #24]	; 1ac <coda_set_option_perform_conversions+0x68>
 190:	ldr	r3, [fp, #-8]
 194:	str	r3, [r1, r2]
 198:	mov	r3, #0
 19c:	mov	r0, r3
 1a0:	sub	sp, fp, #4
 1a4:	pop	{fp, pc}
 1a8:	.word	0x00000008
 1ac:	.word	0x00000000

000001b0 <coda_get_option_perform_conversions>:
 1b0:	push	{fp, lr}
 1b4:	add	fp, sp, #4
 1b8:	bl	0 <__aeabi_read_tp>
 1bc:	mov	r2, r0
 1c0:	ldr	r3, [pc, #8]	; 1d0 <coda_get_option_perform_conversions+0x20>
 1c4:	ldr	r3, [r2, r3]
 1c8:	mov	r0, r3
 1cc:	pop	{fp, pc}
 1d0:	.word	0x00000000

000001d4 <coda_set_option_use_fast_size_expressions>:
 1d4:	push	{fp, lr}
 1d8:	add	fp, sp, #4
 1dc:	sub	sp, sp, #8
 1e0:	str	r0, [fp, #-8]
 1e4:	ldr	r3, [fp, #-8]
 1e8:	cmp	r3, #0
 1ec:	beq	214 <coda_set_option_use_fast_size_expressions+0x40>
 1f0:	ldr	r3, [fp, #-8]
 1f4:	cmp	r3, #1
 1f8:	beq	214 <coda_set_option_use_fast_size_expressions+0x40>
 1fc:	ldr	r2, [fp, #-8]
 200:	ldr	r1, [pc, #48]	; 238 <coda_set_option_use_fast_size_expressions+0x64>
 204:	mvn	r0, #99	; 0x63
 208:	bl	0 <coda_set_error>
 20c:	mvn	r3, #0
 210:	b	22c <coda_set_option_use_fast_size_expressions+0x58>
 214:	bl	0 <__aeabi_read_tp>
 218:	mov	r1, r0
 21c:	ldr	r2, [pc, #24]	; 23c <coda_set_option_use_fast_size_expressions+0x68>
 220:	ldr	r3, [fp, #-8]
 224:	str	r3, [r1, r2]
 228:	mov	r3, #0
 22c:	mov	r0, r3
 230:	sub	sp, fp, #4
 234:	pop	{fp, pc}
 238:	.word	0x00000008
 23c:	.word	0x00000000

00000240 <coda_get_option_use_fast_size_expressions>:
 240:	push	{fp, lr}
 244:	add	fp, sp, #4
 248:	bl	0 <__aeabi_read_tp>
 24c:	mov	r2, r0
 250:	ldr	r3, [pc, #8]	; 260 <coda_get_option_use_fast_size_expressions+0x20>
 254:	ldr	r3, [r2, r3]
 258:	mov	r0, r3
 25c:	pop	{fp, pc}
 260:	.word	0x00000000

00000264 <coda_set_option_use_mmap>:
 264:	push	{fp, lr}
 268:	add	fp, sp, #4
 26c:	sub	sp, sp, #8
 270:	str	r0, [fp, #-8]
 274:	ldr	r3, [fp, #-8]
 278:	cmp	r3, #0
 27c:	beq	2a4 <coda_set_option_use_mmap+0x40>
 280:	ldr	r3, [fp, #-8]
 284:	cmp	r3, #1
 288:	beq	2a4 <coda_set_option_use_mmap+0x40>
 28c:	ldr	r2, [fp, #-8]
 290:	ldr	r1, [pc, #48]	; 2c8 <coda_set_option_use_mmap+0x64>
 294:	mvn	r0, #99	; 0x63
 298:	bl	0 <coda_set_error>
 29c:	mvn	r3, #0
 2a0:	b	2bc <coda_set_option_use_mmap+0x58>
 2a4:	bl	0 <__aeabi_read_tp>
 2a8:	mov	r1, r0
 2ac:	ldr	r2, [pc, #24]	; 2cc <coda_set_option_use_mmap+0x68>
 2b0:	ldr	r3, [fp, #-8]
 2b4:	str	r3, [r1, r2]
 2b8:	mov	r3, #0
 2bc:	mov	r0, r3
 2c0:	sub	sp, fp, #4
 2c4:	pop	{fp, pc}
 2c8:	.word	0x00000008
 2cc:	.word	0x00000000

000002d0 <coda_get_option_use_mmap>:
 2d0:	push	{fp, lr}
 2d4:	add	fp, sp, #4
 2d8:	bl	0 <__aeabi_read_tp>
 2dc:	mov	r2, r0
 2e0:	ldr	r3, [pc, #8]	; 2f0 <coda_get_option_use_mmap+0x20>
 2e4:	ldr	r3, [r2, r3]
 2e8:	mov	r0, r3
 2ec:	pop	{fp, pc}
 2f0:	.word	0x00000000

000002f4 <coda_set_definition_path>:
 2f4:	push	{fp, lr}
 2f8:	add	fp, sp, #4
 2fc:	sub	sp, sp, #8
 300:	str	r0, [fp, #-8]
 304:	bl	0 <__aeabi_read_tp>
 308:	mov	r2, r0
 30c:	ldr	r3, [pc, #172]	; 3c0 <coda_set_definition_path+0xcc>
 310:	ldr	r3, [r2, r3]
 314:	cmp	r3, #0
 318:	beq	348 <coda_set_definition_path+0x54>
 31c:	bl	0 <__aeabi_read_tp>
 320:	mov	r2, r0
 324:	ldr	r3, [pc, #148]	; 3c0 <coda_set_definition_path+0xcc>
 328:	ldr	r3, [r2, r3]
 32c:	mov	r0, r3
 330:	bl	0 <free>
 334:	bl	0 <__aeabi_read_tp>
 338:	mov	r1, r0
 33c:	ldr	r3, [pc, #124]	; 3c0 <coda_set_definition_path+0xcc>
 340:	mov	r2, #0
 344:	str	r2, [r1, r3]
 348:	ldr	r3, [fp, #-8]
 34c:	cmp	r3, #0
 350:	bne	35c <coda_set_definition_path+0x68>
 354:	mov	r3, #0
 358:	b	3b4 <coda_set_definition_path+0xc0>
 35c:	ldr	r0, [fp, #-8]
 360:	bl	0 <strdup>
 364:	mov	r3, r0
 368:	mov	r1, r3
 36c:	bl	0 <__aeabi_read_tp>
 370:	mov	r2, r0
 374:	ldr	r3, [pc, #68]	; 3c0 <coda_set_definition_path+0xcc>
 378:	str	r1, [r2, r3]
 37c:	bl	0 <__aeabi_read_tp>
 380:	mov	r2, r0
 384:	ldr	r3, [pc, #52]	; 3c0 <coda_set_definition_path+0xcc>
 388:	ldr	r3, [r2, r3]
 38c:	cmp	r3, #0
 390:	bne	3b0 <coda_set_definition_path+0xbc>
 394:	ldr	r3, [pc, #40]	; 3c4 <coda_set_definition_path+0xd0>
 398:	ldr	r2, [pc, #40]	; 3c8 <coda_set_definition_path+0xd4>
 39c:	ldr	r1, [pc, #40]	; 3cc <coda_set_definition_path+0xd8>
 3a0:	mvn	r0, #0
 3a4:	bl	0 <coda_set_error>
 3a8:	mvn	r3, #0
 3ac:	b	3b4 <coda_set_definition_path+0xc0>
 3b0:	mov	r3, #0
 3b4:	mov	r0, r3
 3b8:	sub	sp, fp, #4
 3bc:	pop	{fp, pc}
 3c0:	.word	0x00000000
 3c4:	.word	0x00000181
 3c8:	.word	0x0000002c
 3cc:	.word	0x00000070

000003d0 <coda_set_definition_path_conditional>:
 3d0:	push	{fp, lr}
 3d4:	add	fp, sp, #4
 3d8:	sub	sp, sp, #24
 3dc:	str	r0, [fp, #-16]
 3e0:	str	r1, [fp, #-20]	; 0xffffffec
 3e4:	str	r2, [fp, #-24]	; 0xffffffe8
 3e8:	ldr	r0, [pc, #256]	; 4f0 <coda_set_definition_path_conditional+0x120>
 3ec:	bl	0 <getenv>
 3f0:	mov	r3, r0
 3f4:	cmp	r3, #0
 3f8:	beq	404 <coda_set_definition_path_conditional+0x34>
 3fc:	mov	r3, #0
 400:	b	4e4 <coda_set_definition_path_conditional+0x114>
 404:	ldr	r3, [fp, #-20]	; 0xffffffec
 408:	cmp	r3, #0
 40c:	bne	434 <coda_set_definition_path_conditional+0x64>
 410:	sub	r3, fp, #8
 414:	mov	r1, r3
 418:	ldr	r0, [fp, #-16]
 41c:	bl	0 <coda_path_for_program>
 420:	mov	r3, r0
 424:	cmp	r3, #0
 428:	beq	45c <coda_set_definition_path_conditional+0x8c>
 42c:	mvn	r3, #0
 430:	b	4e4 <coda_set_definition_path_conditional+0x114>
 434:	sub	r3, fp, #8
 438:	mov	r2, r3
 43c:	ldr	r1, [fp, #-16]
 440:	ldr	r0, [fp, #-20]	; 0xffffffec
 444:	bl	0 <coda_path_find_file>
 448:	mov	r3, r0
 44c:	cmp	r3, #0
 450:	beq	45c <coda_set_definition_path_conditional+0x8c>
 454:	mvn	r3, #0
 458:	b	4e4 <coda_set_definition_path_conditional+0x114>
 45c:	ldr	r3, [fp, #-8]
 460:	cmp	r3, #0
 464:	beq	4e0 <coda_set_definition_path_conditional+0x110>
 468:	ldr	r0, [fp, #-8]
 46c:	sub	r3, fp, #12
 470:	ldr	r2, [fp, #-24]	; 0xffffffe8
 474:	mov	r1, #1
 478:	bl	0 <coda_path_from_path>
 47c:	mov	r3, r0
 480:	cmp	r3, #0
 484:	beq	49c <coda_set_definition_path_conditional+0xcc>
 488:	ldr	r3, [fp, #-8]
 48c:	mov	r0, r3
 490:	bl	0 <free>
 494:	mvn	r3, #0
 498:	b	4e4 <coda_set_definition_path_conditional+0x114>
 49c:	ldr	r3, [fp, #-8]
 4a0:	mov	r0, r3
 4a4:	bl	0 <free>
 4a8:	ldr	r3, [fp, #-12]
 4ac:	mov	r0, r3
 4b0:	bl	2f4 <coda_set_definition_path>
 4b4:	mov	r3, r0
 4b8:	cmp	r3, #0
 4bc:	beq	4d4 <coda_set_definition_path_conditional+0x104>
 4c0:	ldr	r3, [fp, #-12]
 4c4:	mov	r0, r3
 4c8:	bl	0 <free>
 4cc:	mvn	r3, #0
 4d0:	b	4e4 <coda_set_definition_path_conditional+0x114>
 4d4:	ldr	r3, [fp, #-12]
 4d8:	mov	r0, r3
 4dc:	bl	0 <free>
 4e0:	mov	r3, #0
 4e4:	mov	r0, r3
 4e8:	sub	sp, fp, #4
 4ec:	pop	{fp, pc}
 4f0:	.word	0x000000a4

000004f4 <coda_init>:
 4f4:	push	{fp, lr}
 4f8:	add	fp, sp, #4
 4fc:	bl	0 <__aeabi_read_tp>
 500:	mov	r2, r0
 504:	ldr	r3, [pc, #372]	; 680 <coda_init+0x18c>
 508:	ldr	r3, [r2, r3]
 50c:	cmp	r3, #0
 510:	bne	650 <coda_init+0x15c>
 514:	bl	0 <coda_leap_second_table_init>
 518:	mov	r3, r0
 51c:	cmp	r3, #0
 520:	beq	52c <coda_init+0x38>
 524:	mvn	r3, #0
 528:	b	678 <coda_init+0x184>
 52c:	bl	0 <coda_data_dictionary_init>
 530:	mov	r3, r0
 534:	cmp	r3, #0
 538:	beq	548 <coda_init+0x54>
 53c:	bl	0 <coda_leap_second_table_done>
 540:	mvn	r3, #0
 544:	b	678 <coda_init+0x184>
 548:	bl	0 <__aeabi_read_tp>
 54c:	mov	r2, r0
 550:	ldr	r3, [pc, #300]	; 684 <coda_init+0x190>
 554:	ldr	r3, [r2, r3]
 558:	cmp	r3, #0
 55c:	bne	5dc <coda_init+0xe8>
 560:	ldr	r0, [pc, #288]	; 688 <coda_init+0x194>
 564:	bl	0 <getenv>
 568:	mov	r3, r0
 56c:	cmp	r3, #0
 570:	beq	5dc <coda_init+0xe8>
 574:	ldr	r0, [pc, #268]	; 688 <coda_init+0x194>
 578:	bl	0 <getenv>
 57c:	mov	r3, r0
 580:	mov	r0, r3
 584:	bl	0 <strdup>
 588:	mov	r3, r0
 58c:	mov	r1, r3
 590:	bl	0 <__aeabi_read_tp>
 594:	mov	r2, r0
 598:	ldr	r3, [pc, #228]	; 684 <coda_init+0x190>
 59c:	str	r1, [r2, r3]
 5a0:	bl	0 <__aeabi_read_tp>
 5a4:	mov	r2, r0
 5a8:	ldr	r3, [pc, #212]	; 684 <coda_init+0x190>
 5ac:	ldr	r3, [r2, r3]
 5b0:	cmp	r3, #0
 5b4:	bne	5dc <coda_init+0xe8>
 5b8:	bl	0 <coda_data_dictionary_done>
 5bc:	bl	0 <coda_leap_second_table_done>
 5c0:	mov	r3, #512	; 0x200
 5c4:	ldr	r2, [pc, #192]	; 68c <coda_init+0x198>
 5c8:	ldr	r1, [pc, #192]	; 690 <coda_init+0x19c>
 5cc:	mvn	r0, #0
 5d0:	bl	0 <coda_set_error>
 5d4:	mvn	r3, #0
 5d8:	b	678 <coda_init+0x184>
 5dc:	bl	0 <__aeabi_read_tp>
 5e0:	mov	r2, r0
 5e4:	ldr	r3, [pc, #152]	; 684 <coda_init+0x190>
 5e8:	ldr	r3, [r2, r3]
 5ec:	cmp	r3, #0
 5f0:	beq	628 <coda_init+0x134>
 5f4:	bl	0 <__aeabi_read_tp>
 5f8:	mov	r2, r0
 5fc:	ldr	r3, [pc, #128]	; 684 <coda_init+0x190>
 600:	ldr	r3, [r2, r3]
 604:	mov	r0, r3
 608:	bl	0 <coda_read_definitions>
 60c:	mov	r3, r0
 610:	cmp	r3, #0
 614:	beq	628 <coda_init+0x134>
 618:	bl	0 <coda_data_dictionary_done>
 61c:	bl	0 <coda_leap_second_table_done>
 620:	mvn	r3, #0
 624:	b	678 <coda_init+0x184>
 628:	bl	0 <__aeabi_read_tp>
 62c:	mov	r1, r0
 630:	ldr	r3, [pc, #92]	; 694 <coda_init+0x1a0>
 634:	mov	r2, #1
 638:	str	r2, [r1, r3]
 63c:	bl	0 <__aeabi_read_tp>
 640:	mov	r1, r0
 644:	ldr	r3, [pc, #76]	; 698 <coda_init+0x1a4>
 648:	mov	r2, #1
 64c:	str	r2, [r1, r3]
 650:	bl	0 <__aeabi_read_tp>
 654:	mov	r2, r0
 658:	ldr	r3, [pc, #32]	; 680 <coda_init+0x18c>
 65c:	ldr	r3, [r2, r3]
 660:	add	r3, r3, #1
 664:	bl	0 <__aeabi_read_tp>
 668:	mov	r1, r0
 66c:	ldr	r2, [pc, #12]	; 680 <coda_init+0x18c>
 670:	str	r3, [r1, r2]
 674:	mov	r3, #0
 678:	mov	r0, r3
 67c:	pop	{fp, pc}
	...
 688:	.word	0x000000a4
 68c:	.word	0x0000002c
 690:	.word	0x00000070
	...

0000069c <coda_done>:
 69c:	push	{fp, lr}
 6a0:	add	fp, sp, #4
 6a4:	bl	0 <__aeabi_read_tp>
 6a8:	mov	r2, r0
 6ac:	ldr	r3, [pc, #172]	; 760 <coda_done+0xc4>
 6b0:	ldr	r3, [r2, r3]
 6b4:	cmp	r3, #0
 6b8:	ble	758 <coda_done+0xbc>
 6bc:	bl	0 <__aeabi_read_tp>
 6c0:	mov	r2, r0
 6c4:	ldr	r3, [pc, #148]	; 760 <coda_done+0xc4>
 6c8:	ldr	r3, [r2, r3]
 6cc:	sub	r3, r3, #1
 6d0:	bl	0 <__aeabi_read_tp>
 6d4:	mov	r1, r0
 6d8:	ldr	r2, [pc, #128]	; 760 <coda_done+0xc4>
 6dc:	str	r3, [r1, r2]
 6e0:	bl	0 <__aeabi_read_tp>
 6e4:	mov	r2, r0
 6e8:	ldr	r3, [pc, #112]	; 760 <coda_done+0xc4>
 6ec:	ldr	r3, [r2, r3]
 6f0:	cmp	r3, #0
 6f4:	bne	758 <coda_done+0xbc>
 6f8:	bl	0 <coda_sp3_done>
 6fc:	bl	0 <coda_rinex_done>
 700:	bl	0 <coda_grib_done>
 704:	bl	0 <coda_data_dictionary_done>
 708:	bl	0 <__aeabi_read_tp>
 70c:	mov	r2, r0
 710:	ldr	r3, [pc, #76]	; 764 <coda_done+0xc8>
 714:	ldr	r3, [r2, r3]
 718:	cmp	r3, #0
 71c:	beq	74c <coda_done+0xb0>
 720:	bl	0 <__aeabi_read_tp>
 724:	mov	r2, r0
 728:	ldr	r3, [pc, #52]	; 764 <coda_done+0xc8>
 72c:	ldr	r3, [r2, r3]
 730:	mov	r0, r3
 734:	bl	0 <free>
 738:	bl	0 <__aeabi_read_tp>
 73c:	mov	r1, r0
 740:	ldr	r3, [pc, #28]	; 764 <coda_done+0xc8>
 744:	mov	r2, #0
 748:	str	r2, [r1, r3]
 74c:	bl	0 <coda_mem_done>
 750:	bl	0 <coda_type_done>
 754:	bl	0 <coda_leap_second_table_done>
 758:	nop			; (mov r0, r0)
 75c:	pop	{fp, pc}
	...

00000768 <coda_free>:
 768:	push	{fp, lr}
 76c:	add	fp, sp, #4
 770:	sub	sp, sp, #8
 774:	str	r0, [fp, #-8]
 778:	ldr	r0, [fp, #-8]
 77c:	bl	0 <free>
 780:	nop			; (mov r0, r0)
 784:	sub	sp, fp, #4
 788:	pop	{fp, pc}
