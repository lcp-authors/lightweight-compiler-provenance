
../compcert-repos/dvidelabs-flatcc-3b39ef7/src/compiler/CMakeFiles/flatcc.dir/__/__/external/hash/ptr_set.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <ht_clear>:
   0:	push	{r4, lr}
   4:	mov	r4, r0
   8:	ldr	r0, [r0]
   c:	cmp	r0, #0
  10:	beq	18 <ht_clear+0x18>
  14:	bl	0 <free>
  18:	mov	r3, #0
  1c:	str	r3, [r4]
  20:	str	r3, [r4, #4]
  24:	str	r3, [r4, #8]
  28:	str	r3, [r4, #12]
  2c:	pop	{r4, pc}

00000030 <ht_insert.isra.4>:
  30:	push	{r4, r5, r6, r7, r8, r9, lr}
  34:	subs	r7, r2, #0
  38:	sub	sp, sp, #28
  3c:	beq	1dc <ht_insert.isra.4+0x1ac>
  40:	cmp	r7, #2
  44:	beq	1ac <ht_insert.isra.4+0x17c>
  48:	cmp	r7, #1
  4c:	beq	198 <ht_insert.isra.4+0x168>
  50:	ldr	r9, [r0, #12]
  54:	mov	r8, r3
  58:	mov	r3, #179	; 0xb3
  5c:	mov	r5, r1
  60:	mul	r3, r3, r9
  64:	ldr	r1, [r0, #8]
  68:	mov	r6, r0
  6c:	cmp	r1, r3, lsr #8
  70:	bcc	88 <ht_insert.isra.4+0x58>
  74:	lsl	r1, r1, #1
  78:	bl	214 <ht_resize>
  7c:	cmp	r0, #0
  80:	bne	1c0 <ht_insert.isra.4+0x190>
  84:	ldr	r9, [r6, #12]
  88:	ldr	r2, [pc, #352]	; 1f0 <ht_insert.isra.4+0x1c0>
  8c:	add	r0, sp, #24
  90:	add	r3, sp, #16
  94:	str	r5, [r0, #-12]!
  98:	stm	sp, {r2, r3}
  9c:	mov	r2, #4
  a0:	mov	r3, #0
  a4:	ldr	r4, [r6]
  a8:	bl	0 <cmetrohash64_1>
  ac:	sub	r3, r8, #2
  b0:	ldr	r2, [sp, #16]
  b4:	sub	r9, r9, #1
  b8:	cmp	r3, #1
  bc:	and	r3, r9, r2
  c0:	bls	14c <ht_insert.isra.4+0x11c>
  c4:	ldr	r0, [r4, r3, lsl #2]
  c8:	add	r3, r4, r3, lsl #2
  cc:	cmp	r0, #0
  d0:	moveq	r1, r3
  d4:	beq	120 <ht_insert.isra.4+0xf0>
  d8:	add	r2, r2, #1
  dc:	mov	r1, #0
  e0:	b	104 <ht_insert.isra.4+0xd4>
  e4:	cmp	r5, r0
  e8:	beq	13c <ht_insert.isra.4+0x10c>
  ec:	and	r3, r9, r2
  f0:	add	r2, r2, #1
  f4:	ldr	r0, [r4, r3, lsl #2]
  f8:	add	r3, r4, r3, lsl #2
  fc:	cmp	r0, #0
 100:	beq	118 <ht_insert.isra.4+0xe8>
 104:	cmp	r0, #2
 108:	bne	e4 <ht_insert.isra.4+0xb4>
 10c:	cmp	r1, #0
 110:	moveq	r1, r3
 114:	b	ec <ht_insert.isra.4+0xbc>
 118:	cmp	r1, #0
 11c:	moveq	r1, r3
 120:	ldr	r3, [r6, #8]
 124:	mov	r0, #0
 128:	add	r3, r3, #1
 12c:	str	r3, [r6, #8]
 130:	str	r7, [r1]
 134:	add	sp, sp, #28
 138:	pop	{r4, r5, r6, r7, r8, r9, pc}
 13c:	cmp	r8, #0
 140:	streq	r7, [r3]
 144:	add	sp, sp, #28
 148:	pop	{r4, r5, r6, r7, r8, r9, pc}
 14c:	ldr	r0, [r4, r3, lsl #2]
 150:	ldr	r1, [r6, #8]
 154:	cmp	r0, #0
 158:	cmpne	r0, #2
 15c:	add	r1, r1, #1
 160:	str	r1, [r6, #8]
 164:	add	r3, r4, r3, lsl #2
 168:	beq	18c <ht_insert.isra.4+0x15c>
 16c:	add	r2, r2, #1
 170:	and	r3, r9, r2
 174:	add	r2, r2, #1
 178:	ldr	r1, [r4, r3, lsl #2]
 17c:	add	r3, r4, r3, lsl #2
 180:	cmp	r1, #0
 184:	cmpne	r1, #2
 188:	bne	170 <ht_insert.isra.4+0x140>
 18c:	str	r7, [r3]
 190:	mov	r0, #0
 194:	b	134 <ht_insert.isra.4+0x104>
 198:	ldr	r3, [pc, #84]	; 1f4 <ht_insert.isra.4+0x1c4>
 19c:	mov	r2, #116	; 0x74
 1a0:	ldr	r1, [pc, #80]	; 1f8 <ht_insert.isra.4+0x1c8>
 1a4:	ldr	r0, [pc, #80]	; 1fc <ht_insert.isra.4+0x1cc>
 1a8:	bl	0 <__assert_fail>
 1ac:	ldr	r3, [pc, #64]	; 1f4 <ht_insert.isra.4+0x1c4>
 1b0:	mov	r2, #115	; 0x73
 1b4:	ldr	r1, [pc, #60]	; 1f8 <ht_insert.isra.4+0x1c8>
 1b8:	ldr	r0, [pc, #64]	; 200 <ht_insert.isra.4+0x1d0>
 1bc:	bl	0 <__assert_fail>
 1c0:	ldr	r3, [pc, #60]	; 204 <ht_insert.isra.4+0x1d4>
 1c4:	ldr	r2, [pc, #60]	; 208 <ht_insert.isra.4+0x1d8>
 1c8:	ldr	r1, [pc, #60]	; 20c <ht_insert.isra.4+0x1dc>
 1cc:	ldr	r0, [r3]
 1d0:	bl	0 <fprintf>
 1d4:	mov	r0, #1
 1d8:	bl	0 <exit>
 1dc:	ldr	r3, [pc, #16]	; 1f4 <ht_insert.isra.4+0x1c4>
 1e0:	mov	r2, #114	; 0x72
 1e4:	ldr	r1, [pc, #12]	; 1f8 <ht_insert.isra.4+0x1c8>
 1e8:	ldr	r0, [pc, #32]	; 210 <ht_insert.isra.4+0x1e0>
 1ec:	bl	0 <__assert_fail>
 1f0:	.word	0x2f693b52
	...
 1fc:	.word	0x0000008c
 200:	.word	0x00000074
 204:	.word	0x00000000
 208:	.word	0x000000a4
 20c:	.word	0x000000d8
 210:	.word	0x0000005c

00000214 <ht_resize>:
 214:	ldr	r3, [r0, #8]
 218:	push	{r4, r5, r6, r7, r8, lr}
 21c:	cmp	r1, r3
 220:	movcc	r1, r3
 224:	cmp	r1, #2
 228:	sub	sp, sp, #16
 22c:	mov	r7, r0
 230:	ldr	r6, [r0]
 234:	mov	r5, #4
 238:	bls	250 <ht_resize+0x3c>
 23c:	mov	r2, #179	; 0xb3
 240:	lsl	r5, r5, #1
 244:	mul	r3, r2, r5
 248:	cmp	r1, r3, lsr #8
 24c:	bhi	240 <ht_resize+0x2c>
 250:	mov	r1, #4
 254:	mov	r0, r5
 258:	bl	0 <calloc>
 25c:	cmp	r0, #0
 260:	str	r0, [sp]
 264:	beq	304 <ht_resize+0xf0>
 268:	ldr	r3, [r7, #12]
 26c:	mov	r4, #0
 270:	cmp	r3, r4
 274:	str	r5, [sp, #12]
 278:	str	r4, [sp, #4]
 27c:	subne	r5, r6, #4
 280:	str	r4, [sp, #8]
 284:	movne	r6, sp
 288:	movne	r8, #3
 28c:	bne	29c <ht_resize+0x88>
 290:	b	2fc <ht_resize+0xe8>
 294:	cmp	r3, r4
 298:	bls	2cc <ht_resize+0xb8>
 29c:	ldr	r2, [r5, #4]!
 2a0:	add	r4, r4, #1
 2a4:	cmp	r2, #0
 2a8:	cmpne	r2, #2
 2ac:	beq	294 <ht_resize+0x80>
 2b0:	mov	r3, r8
 2b4:	mov	r1, r2
 2b8:	mov	r0, r6
 2bc:	bl	30 <ht_insert.isra.4>
 2c0:	ldr	r3, [r7, #12]
 2c4:	cmp	r3, r4
 2c8:	bhi	29c <ht_resize+0x88>
 2cc:	mov	r0, r7
 2d0:	bl	0 <ht_clear>
 2d4:	mov	ip, r6
 2d8:	mov	lr, #0
 2dc:	ldm	ip!, {r0, r1, r2, r3}
 2e0:	str	r0, [r7]
 2e4:	str	r1, [r7, #4]
 2e8:	str	r2, [r7, #8]
 2ec:	str	r3, [r7, #12]
 2f0:	mov	r0, lr
 2f4:	add	sp, sp, #16
 2f8:	pop	{r4, r5, r6, r7, r8, pc}
 2fc:	mov	r6, sp
 300:	b	2cc <ht_resize+0xb8>
 304:	mvn	lr, #0
 308:	b	2f0 <ht_resize+0xdc>

0000030c <ht_find.isra.5>:
 30c:	push	{r4, r5, r6, lr}
 310:	subs	r5, r0, #0
 314:	sub	sp, sp, #24
 318:	beq	384 <ht_find.isra.5+0x78>
 31c:	mov	r6, r2
 320:	ldr	r2, [pc, #104]	; 390 <ht_find.isra.5+0x84>
 324:	add	r0, sp, #24
 328:	add	r3, sp, #16
 32c:	ldr	r4, [r1]
 330:	str	r6, [r0, #-12]!
 334:	stm	sp, {r2, r3}
 338:	mov	r2, #4
 33c:	mov	r3, #0
 340:	bl	0 <cmetrohash64_1>
 344:	ldr	r3, [sp, #16]
 348:	sub	r4, r4, #1
 34c:	and	r2, r4, r3
 350:	ldr	r0, [r5, r2, lsl #2]
 354:	cmp	r0, #0
 358:	beq	384 <ht_find.isra.5+0x78>
 35c:	add	r3, r3, #1
 360:	cmp	r0, #2
 364:	and	r1, r3, r4
 368:	beq	374 <ht_find.isra.5+0x68>
 36c:	cmp	r6, r0
 370:	beq	388 <ht_find.isra.5+0x7c>
 374:	ldr	r0, [r5, r1, lsl #2]
 378:	add	r3, r3, #1
 37c:	cmp	r0, #0
 380:	bne	360 <ht_find.isra.5+0x54>
 384:	mov	r0, #0
 388:	add	sp, sp, #24
 38c:	pop	{r4, r5, r6, pc}
 390:	.word	0x2f693b52

00000394 <ht_remove.isra.6>:
 394:	push	{r4, r5, r6, r7, lr}
 398:	sub	sp, sp, #28
 39c:	ldr	r4, [r0]
 3a0:	cmp	r4, #0
 3a4:	beq	41c <ht_remove.isra.6+0x88>
 3a8:	ldr	r2, [pc, #148]	; 444 <ht_remove.isra.6+0xb0>
 3ac:	mov	r7, r0
 3b0:	add	r3, sp, #16
 3b4:	add	r0, sp, #24
 3b8:	ldr	r5, [r7, #12]
 3bc:	str	r1, [r0, #-12]!
 3c0:	stm	sp, {r2, r3}
 3c4:	mov	r3, #0
 3c8:	mov	r2, #4
 3cc:	mov	r6, r1
 3d0:	bl	0 <cmetrohash64_1>
 3d4:	ldr	r3, [sp, #16]
 3d8:	sub	r5, r5, #1
 3dc:	and	ip, r5, r3
 3e0:	ldr	r0, [r4, ip, lsl #2]
 3e4:	add	ip, r4, ip, lsl #2
 3e8:	cmp	r0, #0
 3ec:	beq	41c <ht_remove.isra.6+0x88>
 3f0:	add	r3, r3, #1
 3f4:	cmp	r0, #2
 3f8:	and	r2, r5, r3
 3fc:	beq	408 <ht_remove.isra.6+0x74>
 400:	cmp	r6, r0
 404:	beq	428 <ht_remove.isra.6+0x94>
 408:	ldr	r0, [r4, r2, lsl #2]
 40c:	add	r3, r3, #1
 410:	cmp	r0, #0
 414:	add	ip, r4, r2, lsl #2
 418:	bne	3f4 <ht_remove.isra.6+0x60>
 41c:	mov	r0, #0
 420:	add	sp, sp, #28
 424:	pop	{r4, r5, r6, r7, pc}
 428:	ldr	r3, [r7, #8]
 42c:	mov	r2, #2
 430:	sub	r3, r3, #1
 434:	str	r2, [ip]
 438:	str	r3, [r7, #8]
 43c:	add	sp, sp, #28
 440:	pop	{r4, r5, r6, r7, pc}
 444:	.word	0x2f693b52

00000448 <ptr_set_clear>:
 448:	b	0 <ht_clear>

0000044c <ptr_set_destroy>:
 44c:	push	{r4, r5, r6, r7, r8, lr}
 450:	subs	r7, r1, #0
 454:	mov	r6, r0
 458:	beq	4ac <ptr_set_destroy+0x60>
 45c:	ldr	r3, [r0, #12]
 460:	ldr	r5, [r0]
 464:	cmp	r3, #0
 468:	beq	4ac <ptr_set_destroy+0x60>
 46c:	mov	r8, r2
 470:	sub	r5, r5, #4
 474:	mov	r4, #0
 478:	b	484 <ptr_set_destroy+0x38>
 47c:	cmp	r4, r3
 480:	bcs	4ac <ptr_set_destroy+0x60>
 484:	ldr	r1, [r5, #4]!
 488:	add	r4, r4, #1
 48c:	cmp	r1, #0
 490:	cmpne	r1, #2
 494:	beq	47c <ptr_set_destroy+0x30>
 498:	mov	r0, r8
 49c:	blx	r7
 4a0:	ldr	r3, [r6, #12]
 4a4:	cmp	r4, r3
 4a8:	bcc	484 <ptr_set_destroy+0x38>
 4ac:	mov	r0, r6
 4b0:	pop	{r4, r5, r6, r7, r8, lr}
 4b4:	b	0 <ht_clear>

000004b8 <ptr_set_init>:
 4b8:	cmp	r1, #2
 4bc:	push	{r4, r5, r6, lr}
 4c0:	mov	r4, #4
 4c4:	mov	r5, r0
 4c8:	bls	4e0 <ptr_set_init+0x28>
 4cc:	mov	r2, #179	; 0xb3
 4d0:	lsl	r4, r4, #1
 4d4:	mul	r3, r2, r4
 4d8:	cmp	r1, r3, lsr #8
 4dc:	bhi	4d0 <ptr_set_init+0x18>
 4e0:	mov	r1, #4
 4e4:	mov	r0, r4
 4e8:	bl	0 <calloc>
 4ec:	cmp	r0, #0
 4f0:	str	r0, [r5]
 4f4:	movne	r0, #0
 4f8:	strne	r4, [r5, #12]
 4fc:	strne	r0, [r5, #4]
 500:	strne	r0, [r5, #8]
 504:	mvneq	r0, #0
 508:	pop	{r4, r5, r6, pc}

0000050c <ptr_set_resize>:
 50c:	b	214 <ht_resize>

00000510 <ptr_set_insert>:
 510:	mov	r2, r3
 514:	ldr	r3, [sp]
 518:	b	30 <ht_insert.isra.4>

0000051c <ptr_set_insert_item>:
 51c:	mov	r3, r2
 520:	mov	r2, r1
 524:	b	30 <ht_insert.isra.4>

00000528 <ptr_set_find>:
 528:	mov	r3, r0
 52c:	mov	r2, r1
 530:	ldr	r0, [r0]
 534:	add	r1, r3, #12
 538:	b	30c <ht_find.isra.5>

0000053c <ptr_set_find_item>:
 53c:	mov	r3, r0
 540:	mov	r2, r1
 544:	ldr	r0, [r0]
 548:	add	r1, r3, #12
 54c:	b	30c <ht_find.isra.5>

00000550 <ptr_set_remove>:
 550:	b	394 <ht_remove.isra.6>

00000554 <ptr_set_remove_item>:
 554:	b	394 <ht_remove.isra.6>

00000558 <ptr_set_visit>:
 558:	ldr	r3, [r0, #12]
 55c:	push	{r4, r5, r6, r7, r8, lr}
 560:	cmp	r3, #0
 564:	ldr	r5, [r0]
 568:	popeq	{r4, r5, r6, r7, r8, pc}
 56c:	mov	r7, r2
 570:	mov	r6, r1
 574:	mov	r8, r0
 578:	sub	r5, r5, #4
 57c:	mov	r4, #0
 580:	b	58c <ptr_set_visit+0x34>
 584:	cmp	r4, r3
 588:	bcs	5b4 <ptr_set_visit+0x5c>
 58c:	ldr	r1, [r5, #4]!
 590:	add	r4, r4, #1
 594:	cmp	r1, #0
 598:	cmpne	r1, #2
 59c:	beq	584 <ptr_set_visit+0x2c>
 5a0:	mov	r0, r7
 5a4:	blx	r6
 5a8:	ldr	r3, [r8, #12]
 5ac:	cmp	r4, r3
 5b0:	bcc	58c <ptr_set_visit+0x34>
 5b4:	pop	{r4, r5, r6, r7, r8, pc}
