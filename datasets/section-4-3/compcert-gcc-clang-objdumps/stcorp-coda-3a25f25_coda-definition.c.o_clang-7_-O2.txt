
../compcert-repos/stcorp-coda-3a25f25/CMakeFiles/coda_static.dir/libcoda/coda-definition.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <coda_product_variable_delete>:
       0:	push	{r4, sl, fp, lr}
       4:	add	fp, sp, #8
       8:	cmp	r0, #0
       c:	beq	50 <coda_product_variable_delete+0x50>
      10:	mov	r4, r0
      14:	ldr	r0, [r0]
      18:	cmp	r0, #0
      1c:	beq	24 <coda_product_variable_delete+0x24>
      20:	bl	0 <free>
      24:	ldr	r0, [r4, #4]
      28:	cmp	r0, #0
      2c:	beq	34 <coda_product_variable_delete+0x34>
      30:	bl	0 <coda_expression_delete>
      34:	ldr	r0, [r4, #8]
      38:	cmp	r0, #0
      3c:	beq	44 <coda_product_variable_delete+0x44>
      40:	bl	0 <coda_expression_delete>
      44:	mov	r0, r4
      48:	pop	{r4, sl, fp, lr}
      4c:	b	0 <free>
      50:	movw	r0, #0
      54:	movw	r1, #0
      58:	movw	r3, #0
      5c:	mov	r2, #49	; 0x31
      60:	movt	r0, #0
      64:	movt	r1, #0
      68:	movt	r3, #0
      6c:	bl	0 <__assert_fail>

00000070 <coda_product_variable_new>:
      70:	push	{r4, r5, fp, lr}
      74:	add	fp, sp, #8
      78:	sub	sp, sp, #8
      7c:	mov	r5, r0
      80:	bl	0 <coda_is_identifier>
      84:	cmp	r0, #0
      88:	beq	e8 <coda_product_variable_new+0x78>
      8c:	mov	r0, #12
      90:	bl	0 <malloc>
      94:	cmp	r0, #0
      98:	beq	104 <coda_product_variable_new+0x94>
      9c:	mov	r4, r0
      a0:	mov	r0, #0
      a4:	str	r0, [r4, #4]
      a8:	str	r0, [r4, #8]
      ac:	mov	r0, r5
      b0:	bl	0 <strdup>
      b4:	cmp	r0, #0
      b8:	str	r0, [r4]
      bc:	bne	12c <coda_product_variable_new+0xbc>
      c0:	movw	r1, #0
      c4:	movw	r2, #0
      c8:	mvn	r0, #0
      cc:	mov	r3, #93	; 0x5d
      d0:	movt	r1, #0
      d4:	movt	r2, #0
      d8:	bl	0 <coda_set_error>
      dc:	mov	r0, r4
      e0:	bl	0 <free>
      e4:	b	128 <coda_product_variable_new+0xb8>
      e8:	movw	r0, #65136	; 0xfe70
      ec:	movw	r1, #0
      f0:	mov	r2, r5
      f4:	movt	r0, #65535	; 0xffff
      f8:	movt	r1, #0
      fc:	bl	0 <coda_set_error>
     100:	b	128 <coda_product_variable_new+0xb8>
     104:	movw	r1, #0
     108:	movw	r3, #0
     10c:	mov	r0, #82	; 0x52
     110:	mov	r2, #12
     114:	str	r0, [sp]
     118:	movt	r1, #0
     11c:	movt	r3, #0
     120:	mvn	r0, #0
     124:	bl	0 <coda_set_error>
     128:	mov	r4, #0
     12c:	mov	r0, r4
     130:	sub	sp, fp, #8
     134:	pop	{r4, r5, fp, pc}

00000138 <coda_product_variable_set_size_expression>:
     138:	push	{fp, lr}
     13c:	mov	fp, sp
     140:	cmp	r1, #0
     144:	beq	178 <coda_product_variable_set_size_expression+0x40>
     148:	ldr	r2, [r0, #4]
     14c:	cmp	r2, #0
     150:	streq	r1, [r0, #4]
     154:	moveq	r0, #0
     158:	popeq	{fp, pc}
     15c:	movw	r0, #65136	; 0xfe70
     160:	movw	r1, #0
     164:	movt	r0, #65535	; 0xffff
     168:	movt	r1, #0
     16c:	bl	0 <coda_set_error>
     170:	mvn	r0, #0
     174:	pop	{fp, pc}
     178:	movw	r0, #0
     17c:	movw	r1, #0
     180:	movw	r3, #0
     184:	mov	r2, #103	; 0x67
     188:	movt	r0, #0
     18c:	movt	r1, #0
     190:	movt	r3, #0
     194:	bl	0 <__assert_fail>

00000198 <coda_product_variable_set_init_expression>:
     198:	push	{fp, lr}
     19c:	mov	fp, sp
     1a0:	cmp	r1, #0
     1a4:	beq	1d8 <coda_product_variable_set_init_expression+0x40>
     1a8:	ldr	r2, [r0, #8]
     1ac:	cmp	r2, #0
     1b0:	streq	r1, [r0, #8]
     1b4:	moveq	r0, #0
     1b8:	popeq	{fp, pc}
     1bc:	movw	r0, #65136	; 0xfe70
     1c0:	movw	r1, #0
     1c4:	movt	r0, #65535	; 0xffff
     1c8:	movt	r1, #0
     1cc:	bl	0 <coda_set_error>
     1d0:	mvn	r0, #0
     1d4:	pop	{fp, pc}
     1d8:	movw	r0, #0
     1dc:	movw	r1, #0
     1e0:	movw	r3, #0
     1e4:	mov	r2, #115	; 0x73
     1e8:	movt	r0, #0
     1ec:	movt	r1, #0
     1f0:	movt	r3, #0
     1f4:	bl	0 <__assert_fail>

000001f8 <coda_product_variable_validate>:
     1f8:	ldr	r1, [r0, #8]
     1fc:	mov	r0, #0
     200:	cmp	r1, #0
     204:	bxne	lr
     208:	push	{fp, lr}
     20c:	mov	fp, sp
     210:	movw	r0, #65136	; 0xfe70
     214:	movw	r1, #0
     218:	movt	r0, #65535	; 0xffff
     21c:	movt	r1, #0
     220:	bl	0 <coda_set_error>
     224:	mvn	r0, #0
     228:	pop	{fp, lr}
     22c:	bx	lr

00000230 <coda_product_variable_get_size>:
     230:	push	{r4, r5, r6, r7, fp, lr}
     234:	add	fp, sp, #16
     238:	sub	sp, sp, #8
     23c:	cmp	r0, #0
     240:	beq	258 <coda_product_variable_get_size+0x28>
     244:	cmp	r1, #0
     248:	mov	r6, r1
     24c:	movne	r4, r2
     250:	cmpne	r2, #0
     254:	bne	278 <coda_product_variable_get_size+0x48>
     258:	movw	r0, #0
     25c:	movw	r1, #0
     260:	movw	r3, #0
     264:	mov	r2, #180	; 0xb4
     268:	movt	r0, #0
     26c:	movt	r1, #0
     270:	movt	r3, #0
     274:	bl	0 <__assert_fail>
     278:	mov	r5, r0
     27c:	ldr	r0, [r0, #32]
     280:	cmp	r0, #0
     284:	beq	324 <coda_product_variable_get_size+0xf4>
     288:	ldr	r0, [r5, #24]
     28c:	mov	r1, r6
     290:	ldr	r0, [r0, #40]	; 0x28
     294:	bl	0 <coda_hashtable_get_index_from_name>
     298:	cmn	r0, #1
     29c:	beq	2cc <coda_product_variable_get_size+0x9c>
     2a0:	mov	r7, r0
     2a4:	ldr	r0, [r5, #32]
     2a8:	ldr	r0, [r0, r7, lsl #2]
     2ac:	cmp	r0, #0
     2b0:	beq	300 <coda_product_variable_get_size+0xd0>
     2b4:	ldr	r0, [r5, #28]
     2b8:	ldr	r0, [r0, r7, lsl #2]
     2bc:	str	r0, [r4]
     2c0:	mov	r0, #0
     2c4:	sub	sp, fp, #16
     2c8:	pop	{r4, r5, r6, r7, fp, pc}
     2cc:	ldr	r0, [r5, #24]
     2d0:	movw	r1, #0
     2d4:	movt	r1, #0
     2d8:	ldr	r3, [r0, #4]
     2dc:	ldr	r0, [r0, #44]	; 0x2c
     2e0:	ldr	r2, [r0]
     2e4:	movw	r0, #65136	; 0xfe70
     2e8:	str	r6, [sp]
     2ec:	movt	r0, #65535	; 0xffff
     2f0:	bl	0 <coda_set_error>
     2f4:	mvn	r0, #0
     2f8:	sub	sp, fp, #16
     2fc:	pop	{r4, r5, r6, r7, fp, pc}
     300:	mov	r0, r5
     304:	mov	r1, r7
     308:	bl	344 <init_product_variable>
     30c:	mov	r1, r0
     310:	mvn	r0, #0
     314:	cmp	r1, #0
     318:	beq	2b4 <coda_product_variable_get_size+0x84>
     31c:	sub	sp, fp, #16
     320:	pop	{r4, r5, r6, r7, fp, pc}
     324:	movw	r0, #0
     328:	movw	r1, #0
     32c:	movw	r3, #0
     330:	mov	r2, #181	; 0xb5
     334:	movt	r0, #0
     338:	movt	r1, #0
     33c:	movt	r3, #0
     340:	bl	0 <__assert_fail>

00000344 <init_product_variable>:
     344:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
     348:	add	fp, sp, #24
     34c:	sub	sp, sp, #536	; 0x218
     350:	mov	r5, r0
     354:	mov	r0, #0
     358:	mov	r4, r1
     35c:	mov	r7, #1
     360:	str	r0, [sp, #12]
     364:	add	r0, sp, #16
     368:	mov	r1, r5
     36c:	str	r7, [sp, #8]
     370:	bl	0 <coda_cursor_set_product>
     374:	mvn	r6, #0
     378:	cmp	r0, #0
     37c:	bne	474 <init_product_variable+0x130>
     380:	ldr	r0, [r5, #24]
     384:	ldr	r0, [r0, #36]	; 0x24
     388:	ldr	r0, [r0, r4, lsl #2]
     38c:	ldr	r0, [r0, #4]
     390:	cmp	r0, #0
     394:	beq	3cc <init_product_variable+0x88>
     398:	add	r1, sp, #16
     39c:	add	r2, sp, #8
     3a0:	bl	0 <coda_expression_eval_integer>
     3a4:	cmp	r0, #0
     3a8:	beq	3c8 <init_product_variable+0x84>
     3ac:	ldr	r0, [r5, #24]
     3b0:	ldr	r0, [r0, #36]	; 0x24
     3b4:	ldr	r0, [r0, r4, lsl #2]
     3b8:	ldr	r1, [r0]
     3bc:	movw	r0, #0
     3c0:	movt	r0, #0
     3c4:	b	440 <init_product_variable+0xfc>
     3c8:	ldr	r7, [sp, #8]
     3cc:	ldr	r0, [r5, #28]
     3d0:	str	r7, [r0, r4, lsl #2]
     3d4:	lsl	r7, r7, #3
     3d8:	mov	r0, r7
     3dc:	bl	0 <malloc>
     3e0:	ldr	r1, [r5, #32]
     3e4:	str	r0, [r1, r4, lsl #2]
     3e8:	ldr	r0, [r5, #32]
     3ec:	ldr	r0, [r0, r4, lsl #2]
     3f0:	cmp	r0, #0
     3f4:	beq	44c <init_product_variable+0x108>
     3f8:	mov	r1, #0
     3fc:	mov	r2, r7
     400:	mov	r6, #0
     404:	bl	0 <memset>
     408:	ldr	r0, [r5, #24]
     40c:	add	r1, sp, #16
     410:	ldr	r0, [r0, #36]	; 0x24
     414:	ldr	r0, [r0, r4, lsl #2]
     418:	ldr	r0, [r0, #8]
     41c:	bl	0 <coda_expression_eval_void>
     420:	cmp	r0, #0
     424:	beq	474 <init_product_variable+0x130>
     428:	ldr	r0, [r5, #24]
     42c:	ldr	r0, [r0, #36]	; 0x24
     430:	ldr	r0, [r0, r4, lsl #2]
     434:	ldr	r1, [r0]
     438:	movw	r0, #0
     43c:	movt	r0, #0
     440:	bl	0 <coda_add_error_message>
     444:	mvn	r6, #0
     448:	b	474 <init_product_variable+0x130>
     44c:	movw	r1, #0
     450:	movw	r3, #0
     454:	mov	r0, #162	; 0xa2
     458:	mov	r2, r7
     45c:	mvn	r6, #0
     460:	str	r0, [sp]
     464:	movt	r1, #0
     468:	movt	r3, #0
     46c:	mvn	r0, #0
     470:	bl	0 <coda_set_error>
     474:	mov	r0, r6
     478:	sub	sp, fp, #24
     47c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}

00000480 <coda_product_variable_get_pointer>:
     480:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
     484:	add	fp, sp, #24
     488:	sub	sp, sp, #8
     48c:	cmp	r0, #0
     490:	beq	4a8 <coda_product_variable_get_pointer+0x28>
     494:	cmp	r1, #0
     498:	mov	r4, r1
     49c:	movne	r8, r3
     4a0:	cmpne	r3, #0
     4a4:	bne	4c8 <coda_product_variable_get_pointer+0x48>
     4a8:	movw	r0, #0
     4ac:	movw	r1, #0
     4b0:	movw	r3, #0
     4b4:	mov	r2, #208	; 0xd0
     4b8:	movt	r0, #0
     4bc:	movt	r1, #0
     4c0:	movt	r3, #0
     4c4:	bl	0 <__assert_fail>
     4c8:	mov	r7, r0
     4cc:	ldr	r0, [r0, #24]
     4d0:	mov	r1, r4
     4d4:	mov	r5, r2
     4d8:	ldr	r0, [r0, #40]	; 0x28
     4dc:	bl	0 <coda_hashtable_get_index_from_name>
     4e0:	cmn	r0, #1
     4e4:	beq	530 <coda_product_variable_get_pointer+0xb0>
     4e8:	mov	r6, r0
     4ec:	ldr	r0, [r7, #32]
     4f0:	ldr	r0, [r0, r6, lsl #2]
     4f4:	cmp	r0, #0
     4f8:	beq	580 <coda_product_variable_get_pointer+0x100>
     4fc:	cmp	r5, #0
     500:	blt	558 <coda_product_variable_get_pointer+0xd8>
     504:	ldr	r0, [r7, #28]
     508:	ldr	r0, [r0, r6, lsl #2]
     50c:	cmp	r0, r5
     510:	ble	558 <coda_product_variable_get_pointer+0xd8>
     514:	ldr	r0, [r7, #32]
     518:	ldr	r0, [r0, r6, lsl #2]
     51c:	add	r0, r0, r5, lsl #3
     520:	str	r0, [r8]
     524:	mov	r0, #0
     528:	sub	sp, fp, #24
     52c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
     530:	ldr	r0, [r7, #24]
     534:	movw	r1, #0
     538:	movt	r1, #0
     53c:	ldr	r3, [r0, #4]
     540:	ldr	r0, [r0, #44]	; 0x2c
     544:	ldr	r2, [r0]
     548:	movw	r0, #65136	; 0xfe70
     54c:	str	r4, [sp]
     550:	movt	r0, #65535	; 0xffff
     554:	b	570 <coda_product_variable_get_pointer+0xf0>
     558:	movw	r0, #65136	; 0xfe70
     55c:	movw	r1, #0
     560:	mov	r2, r5
     564:	mov	r3, r4
     568:	movt	r0, #65535	; 0xffff
     56c:	movt	r1, #0
     570:	bl	0 <coda_set_error>
     574:	mvn	r0, #0
     578:	sub	sp, fp, #24
     57c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
     580:	mov	r0, r7
     584:	mov	r1, r6
     588:	bl	344 <init_product_variable>
     58c:	mov	r1, r0
     590:	mvn	r0, #0
     594:	cmp	r1, #0
     598:	beq	4fc <coda_product_variable_get_pointer+0x7c>
     59c:	sub	sp, fp, #24
     5a0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

000005a4 <coda_product_definition_delete>:
     5a4:	push	{r4, r5, r6, sl, fp, lr}
     5a8:	add	fp, sp, #16
     5ac:	mov	r4, r0
     5b0:	ldr	r0, [r0, #20]
     5b4:	cmp	r0, #0
     5b8:	beq	5ec <coda_product_definition_delete+0x48>
     5bc:	ldr	r1, [r4, #16]
     5c0:	cmp	r1, #1
     5c4:	blt	5e8 <coda_product_definition_delete+0x44>
     5c8:	mov	r5, #0
     5cc:	ldr	r0, [r0, r5, lsl #2]
     5d0:	bl	0 <coda_detection_rule_delete>
     5d4:	ldr	r1, [r4, #16]
     5d8:	ldr	r0, [r4, #20]
     5dc:	add	r5, r5, #1
     5e0:	cmp	r5, r1
     5e4:	blt	5cc <coda_product_definition_delete+0x28>
     5e8:	bl	0 <free>
     5ec:	ldr	r0, [r4, #8]
     5f0:	cmp	r0, #0
     5f4:	beq	5fc <coda_product_definition_delete+0x58>
     5f8:	bl	0 <free>
     5fc:	ldr	r0, [r4, #12]
     600:	cmp	r0, #0
     604:	beq	60c <coda_product_definition_delete+0x68>
     608:	bl	0 <free>
     60c:	ldr	r0, [r4, #28]
     610:	cmp	r0, #0
     614:	beq	61c <coda_product_definition_delete+0x78>
     618:	bl	0 <coda_type_release>
     61c:	ldr	r0, [r4, #40]	; 0x28
     620:	cmp	r0, #0
     624:	beq	62c <coda_product_definition_delete+0x88>
     628:	bl	0 <coda_hashtable_delete>
     62c:	ldr	r0, [r4, #36]	; 0x24
     630:	cmp	r0, #0
     634:	beq	6a4 <coda_product_definition_delete+0x100>
     638:	ldr	r1, [r4, #32]
     63c:	cmp	r1, #1
     640:	blt	6a0 <coda_product_definition_delete+0xfc>
     644:	mov	r6, #0
     648:	ldr	r5, [r0, r6, lsl #2]
     64c:	cmp	r5, #0
     650:	beq	6b0 <coda_product_definition_delete+0x10c>
     654:	ldr	r0, [r5]
     658:	cmp	r0, #0
     65c:	beq	664 <coda_product_definition_delete+0xc0>
     660:	bl	0 <free>
     664:	ldr	r0, [r5, #4]
     668:	cmp	r0, #0
     66c:	beq	674 <coda_product_definition_delete+0xd0>
     670:	bl	0 <coda_expression_delete>
     674:	ldr	r0, [r5, #8]
     678:	cmp	r0, #0
     67c:	beq	684 <coda_product_definition_delete+0xe0>
     680:	bl	0 <coda_expression_delete>
     684:	mov	r0, r5
     688:	bl	0 <free>
     68c:	ldr	r1, [r4, #32]
     690:	ldr	r0, [r4, #36]	; 0x24
     694:	add	r6, r6, #1
     698:	cmp	r6, r1
     69c:	blt	648 <coda_product_definition_delete+0xa4>
     6a0:	bl	0 <free>
     6a4:	mov	r0, r4
     6a8:	pop	{r4, r5, r6, sl, fp, lr}
     6ac:	b	0 <free>
     6b0:	movw	r0, #0
     6b4:	movw	r1, #0
     6b8:	movw	r3, #0
     6bc:	mov	r2, #49	; 0x31
     6c0:	movt	r0, #0
     6c4:	movt	r1, #0
     6c8:	movt	r3, #0
     6cc:	bl	0 <__assert_fail>

000006d0 <coda_product_definition_new>:
     6d0:	push	{r4, r5, r6, r7, fp, lr}
     6d4:	add	fp, sp, #16
     6d8:	sub	sp, sp, #8
     6dc:	mov	r6, r2
     6e0:	mov	r7, r1
     6e4:	mov	r5, r0
     6e8:	bl	0 <coda_is_identifier>
     6ec:	cmp	r0, #0
     6f0:	beq	76c <coda_product_definition_new+0x9c>
     6f4:	mov	r0, #48	; 0x30
     6f8:	bl	0 <malloc>
     6fc:	cmp	r0, #0
     700:	beq	788 <coda_product_definition_new+0xb8>
     704:	str	r7, [r0]
     708:	mov	r4, r0
     70c:	str	r6, [r0, #4]
     710:	mov	r0, #0
     714:	vmov.i32	q8, #0	; 0x00000000
     718:	str	r0, [r4, #44]	; 0x2c
     71c:	add	r0, r4, #28
     720:	vst1.32	{d16-d17}, [r0]
     724:	add	r0, r4, #12
     728:	vst1.32	{d16-d17}, [r0]
     72c:	mov	r0, r5
     730:	bl	0 <strdup>
     734:	cmp	r0, #0
     738:	str	r0, [r4, #8]
     73c:	beq	7b0 <coda_product_definition_new+0xe0>
     740:	mov	r0, #1
     744:	bl	0 <coda_hashtable_new>
     748:	cmp	r0, #0
     74c:	str	r0, [r4, #40]	; 0x28
     750:	bne	7d8 <coda_product_definition_new+0x108>
     754:	movw	r1, #0
     758:	movw	r2, #0
     75c:	mvn	r0, #0
     760:	mov	r3, #320	; 0x140
     764:	movt	r1, #0
     768:	b	7c4 <coda_product_definition_new+0xf4>
     76c:	movw	r0, #65136	; 0xfe70
     770:	movw	r1, #0
     774:	mov	r2, r5
     778:	movt	r0, #65535	; 0xffff
     77c:	movt	r1, #0
     780:	bl	0 <coda_set_error>
     784:	b	7d4 <coda_product_definition_new+0x104>
     788:	movw	r1, #0
     78c:	movw	r3, #0
     790:	movw	r0, #291	; 0x123
     794:	mov	r2, #48	; 0x30
     798:	str	r0, [sp]
     79c:	movt	r1, #0
     7a0:	movt	r3, #0
     7a4:	mvn	r0, #0
     7a8:	bl	0 <coda_set_error>
     7ac:	b	7d4 <coda_product_definition_new+0x104>
     7b0:	movw	r1, #0
     7b4:	movw	r2, #0
     7b8:	mvn	r0, #0
     7bc:	movw	r3, #311	; 0x137
     7c0:	movt	r1, #0
     7c4:	movt	r2, #0
     7c8:	bl	0 <coda_set_error>
     7cc:	mov	r0, r4
     7d0:	bl	5a4 <coda_product_definition_delete>
     7d4:	mov	r4, #0
     7d8:	mov	r0, r4
     7dc:	sub	sp, fp, #16
     7e0:	pop	{r4, r5, r6, r7, fp, pc}

000007e4 <coda_product_definition_set_description>:
     7e4:	push	{r4, r5, fp, lr}
     7e8:	add	fp, sp, #8
     7ec:	mov	r5, r0
     7f0:	ldr	r0, [r0, #12]
     7f4:	cmp	r0, #0
     7f8:	beq	81c <coda_product_definition_set_description+0x38>
     7fc:	movw	r0, #65136	; 0xfe70
     800:	movw	r1, #0
     804:	movt	r0, #65535	; 0xffff
     808:	movt	r1, #0
     80c:	bl	0 <coda_set_error>
     810:	mvn	r4, #0
     814:	mov	r0, r4
     818:	pop	{r4, r5, fp, pc}
     81c:	mov	r4, #0
     820:	cmp	r1, #0
     824:	mov	r0, #0
     828:	beq	83c <coda_product_definition_set_description+0x58>
     82c:	mov	r0, r1
     830:	bl	0 <strdup>
     834:	cmp	r0, #0
     838:	beq	848 <coda_product_definition_set_description+0x64>
     83c:	str	r0, [r5, #12]
     840:	mov	r0, r4
     844:	pop	{r4, r5, fp, pc}
     848:	movw	r1, #0
     84c:	movw	r2, #0
     850:	mvn	r0, #0
     854:	movw	r3, #343	; 0x157
     858:	mvn	r4, #0
     85c:	movt	r1, #0
     860:	movt	r2, #0
     864:	bl	0 <coda_set_error>
     868:	mov	r0, r4
     86c:	pop	{r4, r5, fp, pc}

00000870 <coda_product_definition_set_root_type>:
     870:	push	{fp, lr}
     874:	mov	fp, sp
     878:	cmp	r1, #0
     87c:	beq	8c0 <coda_product_definition_set_root_type+0x50>
     880:	ldr	r2, [r0, #28]
     884:	cmp	r2, #0
     888:	beq	8a8 <coda_product_definition_set_root_type+0x38>
     88c:	movw	r0, #65136	; 0xfe70
     890:	movw	r1, #0
     894:	movt	r0, #65535	; 0xffff
     898:	movt	r1, #0
     89c:	bl	0 <coda_set_error>
     8a0:	mvn	r0, #0
     8a4:	pop	{fp, pc}
     8a8:	str	r1, [r0, #28]
     8ac:	ldr	r0, [r1, #4]
     8b0:	add	r0, r0, #1
     8b4:	str	r0, [r1, #4]
     8b8:	mov	r0, #0
     8bc:	pop	{fp, pc}
     8c0:	movw	r0, #0
     8c4:	movw	r1, #0
     8c8:	movw	r3, #0
     8cc:	movw	r2, #354	; 0x162
     8d0:	movt	r0, #0
     8d4:	movt	r1, #0
     8d8:	movt	r3, #0
     8dc:	bl	0 <__assert_fail>

000008e0 <coda_product_definition_add_detection_rule>:
     8e0:	push	{r4, r5, r6, sl, fp, lr}
     8e4:	add	fp, sp, #16
     8e8:	sub	sp, sp, #8
     8ec:	mov	r4, r0
     8f0:	ldr	r0, [r1]
     8f4:	cmp	r0, #0
     8f8:	beq	970 <coda_product_definition_add_detection_rule+0x90>
     8fc:	mov	r5, r1
     900:	str	r4, [r1, #8]
     904:	ldr	r1, [pc, #188]	; 9c8 <coda_product_definition_add_detection_rule+0xe8>
     908:	bl	0 <__aeabi_read_tp>
     90c:	ldr	r0, [r0, r1]
     910:	ldr	r1, [r4]
     914:	cmp	r1, #0
     918:	movweq	r1, #1
     91c:	add	r0, r0, r1, lsl #2
     920:	mov	r1, r5
     924:	add	r0, r0, #12
     928:	bl	0 <coda_detection_tree_add_rule>
     92c:	mvn	r6, #0
     930:	cmp	r0, #0
     934:	bne	9bc <coda_product_definition_add_detection_rule+0xdc>
     938:	ldr	r1, [r4, #16]
     93c:	ldr	r0, [r4, #20]
     940:	mov	r6, #4
     944:	add	r1, r6, r1, lsl #2
     948:	bl	0 <realloc>
     94c:	cmp	r0, #0
     950:	beq	990 <coda_product_definition_add_detection_rule+0xb0>
     954:	str	r0, [r4, #20]
     958:	mov	r6, #0
     95c:	ldr	r1, [r4, #16]
     960:	add	r2, r1, #1
     964:	str	r2, [r4, #16]
     968:	str	r5, [r0, r1, lsl #2]
     96c:	b	9bc <coda_product_definition_add_detection_rule+0xdc>
     970:	ldr	r2, [r4, #8]
     974:	movw	r0, #65136	; 0xfe70
     978:	movw	r1, #0
     97c:	movt	r0, #65535	; 0xffff
     980:	movt	r1, #0
     984:	bl	0 <coda_set_error>
     988:	mvn	r6, #0
     98c:	b	9bc <coda_product_definition_add_detection_rule+0xdc>
     990:	ldr	r0, [r4, #16]
     994:	movw	r1, #390	; 0x186
     998:	movw	r3, #0
     99c:	str	r1, [sp]
     9a0:	movw	r1, #0
     9a4:	movt	r3, #0
     9a8:	movt	r1, #0
     9ac:	add	r2, r6, r0, lsl #2
     9b0:	mvn	r0, #0
     9b4:	mvn	r6, #0
     9b8:	bl	0 <coda_set_error>
     9bc:	mov	r0, r6
     9c0:	sub	sp, fp, #16
     9c4:	pop	{r4, r5, r6, sl, fp, pc}
     9c8:	.word	0x00000000

000009cc <coda_product_definition_add_product_variable>:
     9cc:	push	{r4, r5, r6, sl, fp, lr}
     9d0:	add	fp, sp, #16
     9d4:	sub	sp, sp, #8
     9d8:	mov	r4, r1
     9dc:	mov	r5, r0
     9e0:	ldr	r1, [r1]
     9e4:	ldr	r0, [r0, #40]	; 0x28
     9e8:	bl	0 <coda_hashtable_add_name>
     9ec:	cmp	r0, #0
     9f0:	beq	a18 <coda_product_definition_add_product_variable+0x4c>
     9f4:	ldr	r3, [r5, #8]
     9f8:	ldr	r2, [r4]
     9fc:	movw	r0, #65136	; 0xfe70
     a00:	movw	r1, #0
     a04:	movt	r0, #65535	; 0xffff
     a08:	movt	r1, #0
     a0c:	bl	0 <coda_set_error>
     a10:	mvn	r4, #0
     a14:	b	a5c <coda_product_definition_add_product_variable+0x90>
     a18:	ldr	r1, [r5, #32]
     a1c:	tst	r1, #15
     a20:	beq	a2c <coda_product_definition_add_product_variable+0x60>
     a24:	ldr	r0, [r5, #36]	; 0x24
     a28:	b	a4c <coda_product_definition_add_product_variable+0x80>
     a2c:	ldr	r0, [r5, #36]	; 0x24
     a30:	mov	r6, #64	; 0x40
     a34:	add	r1, r6, r1, lsl #2
     a38:	bl	0 <realloc>
     a3c:	cmp	r0, #0
     a40:	beq	a68 <coda_product_definition_add_product_variable+0x9c>
     a44:	str	r0, [r5, #36]	; 0x24
     a48:	ldr	r1, [r5, #32]
     a4c:	add	r2, r1, #1
     a50:	str	r2, [r5, #32]
     a54:	str	r4, [r0, r1, lsl #2]
     a58:	mov	r4, #0
     a5c:	mov	r0, r4
     a60:	sub	sp, fp, #16
     a64:	pop	{r4, r5, r6, sl, fp, pc}
     a68:	ldr	r0, [r5, #32]
     a6c:	mov	r1, #420	; 0x1a4
     a70:	movw	r3, #0
     a74:	mvn	r4, #0
     a78:	str	r1, [sp]
     a7c:	movw	r1, #0
     a80:	movt	r3, #0
     a84:	movt	r1, #0
     a88:	add	r2, r6, r0, lsl #2
     a8c:	mvn	r0, #0
     a90:	bl	0 <coda_set_error>
     a94:	b	a5c <coda_product_definition_add_product_variable+0x90>

00000a98 <coda_product_definition_validate>:
     a98:	ldr	r1, [r0]
     a9c:	cmp	r1, #1
     aa0:	bhi	ab0 <coda_product_definition_validate+0x18>
     aa4:	ldr	r1, [r0, #28]
     aa8:	cmp	r1, #0
     aac:	beq	ac0 <coda_product_definition_validate+0x28>
     ab0:	mov	r1, #1
     ab4:	str	r1, [r0, #24]
     ab8:	mov	r0, #0
     abc:	bx	lr
     ac0:	push	{fp, lr}
     ac4:	mov	fp, sp
     ac8:	movw	r0, #65136	; 0xfe70
     acc:	movw	r1, #0
     ad0:	movt	r0, #65535	; 0xffff
     ad4:	movt	r1, #0
     ad8:	bl	0 <coda_set_error>
     adc:	mvn	r0, #0
     ae0:	pop	{fp, pc}

00000ae4 <coda_product_type_delete>:
     ae4:	push	{r4, r5, fp, lr}
     ae8:	add	fp, sp, #8
     aec:	mov	r4, r0
     af0:	ldr	r0, [r0]
     af4:	cmp	r0, #0
     af8:	beq	b00 <coda_product_type_delete+0x1c>
     afc:	bl	0 <free>
     b00:	ldr	r0, [r4, #4]
     b04:	cmp	r0, #0
     b08:	beq	b10 <coda_product_type_delete+0x2c>
     b0c:	bl	0 <free>
     b10:	ldr	r0, [r4, #16]
     b14:	cmp	r0, #0
     b18:	beq	b20 <coda_product_type_delete+0x3c>
     b1c:	bl	0 <coda_hashtable_delete>
     b20:	ldr	r0, [r4, #12]
     b24:	cmp	r0, #0
     b28:	beq	b5c <coda_product_type_delete+0x78>
     b2c:	ldr	r1, [r4, #8]
     b30:	cmp	r1, #1
     b34:	blt	b58 <coda_product_type_delete+0x74>
     b38:	mov	r5, #0
     b3c:	ldr	r0, [r0, r5, lsl #2]
     b40:	bl	5a4 <coda_product_definition_delete>
     b44:	ldr	r1, [r4, #8]
     b48:	ldr	r0, [r4, #12]
     b4c:	add	r5, r5, #1
     b50:	cmp	r5, r1
     b54:	blt	b3c <coda_product_type_delete+0x58>
     b58:	bl	0 <free>
     b5c:	mov	r0, r4
     b60:	pop	{r4, r5, fp, lr}
     b64:	b	0 <free>

00000b68 <coda_product_type_new>:
     b68:	push	{r4, r5, fp, lr}
     b6c:	add	fp, sp, #8
     b70:	sub	sp, sp, #8
     b74:	mov	r5, r0
     b78:	mov	r0, #24
     b7c:	bl	0 <malloc>
     b80:	cmp	r0, #0
     b84:	beq	bd8 <coda_product_type_new+0x70>
     b88:	mov	r4, r0
     b8c:	vmov.i32	q8, #0	; 0x00000000
     b90:	add	r0, r0, #4
     b94:	vst1.32	{d16-d17}, [r0]
     b98:	mov	r0, r5
     b9c:	bl	0 <strdup>
     ba0:	cmp	r0, #0
     ba4:	str	r0, [r4]
     ba8:	beq	c00 <coda_product_type_new+0x98>
     bac:	mov	r0, #1
     bb0:	bl	0 <coda_hashtable_new>
     bb4:	cmp	r0, #0
     bb8:	str	r0, [r4, #16]
     bbc:	bne	c28 <coda_product_type_new+0xc0>
     bc0:	movw	r1, #0
     bc4:	movw	r2, #0
     bc8:	mvn	r0, #0
     bcc:	mov	r3, #504	; 0x1f8
     bd0:	movt	r1, #0
     bd4:	b	c14 <coda_product_type_new+0xac>
     bd8:	movw	r1, #0
     bdc:	movw	r3, #0
     be0:	movw	r0, #482	; 0x1e2
     be4:	mov	r2, #24
     be8:	str	r0, [sp]
     bec:	movt	r1, #0
     bf0:	movt	r3, #0
     bf4:	mvn	r0, #0
     bf8:	bl	0 <coda_set_error>
     bfc:	b	c24 <coda_product_type_new+0xbc>
     c00:	movw	r1, #0
     c04:	movw	r2, #0
     c08:	mvn	r0, #0
     c0c:	movw	r3, #495	; 0x1ef
     c10:	movt	r1, #0
     c14:	movt	r2, #0
     c18:	bl	0 <coda_set_error>
     c1c:	mov	r0, r4
     c20:	bl	ae4 <coda_product_type_delete>
     c24:	mov	r4, #0
     c28:	mov	r0, r4
     c2c:	sub	sp, fp, #8
     c30:	pop	{r4, r5, fp, pc}

00000c34 <coda_product_type_set_description>:
     c34:	push	{r4, r5, fp, lr}
     c38:	add	fp, sp, #8
     c3c:	mov	r5, r0
     c40:	ldr	r0, [r0, #4]
     c44:	cmp	r0, #0
     c48:	beq	c6c <coda_product_type_set_description+0x38>
     c4c:	movw	r0, #65136	; 0xfe70
     c50:	movw	r1, #0
     c54:	movt	r0, #65535	; 0xffff
     c58:	movt	r1, #0
     c5c:	bl	0 <coda_set_error>
     c60:	mvn	r4, #0
     c64:	mov	r0, r4
     c68:	pop	{r4, r5, fp, pc}
     c6c:	mov	r4, #0
     c70:	cmp	r1, #0
     c74:	mov	r0, #0
     c78:	beq	c8c <coda_product_type_set_description+0x58>
     c7c:	mov	r0, r1
     c80:	bl	0 <strdup>
     c84:	cmp	r0, #0
     c88:	beq	c98 <coda_product_type_set_description+0x64>
     c8c:	str	r0, [r5, #4]
     c90:	mov	r0, r4
     c94:	pop	{r4, r5, fp, pc}
     c98:	movw	r1, #0
     c9c:	movw	r2, #0
     ca0:	mvn	r0, #0
     ca4:	movw	r3, #527	; 0x20f
     ca8:	mvn	r4, #0
     cac:	movt	r1, #0
     cb0:	movt	r2, #0
     cb4:	bl	0 <coda_set_error>
     cb8:	mov	r0, r4
     cbc:	pop	{r4, r5, fp, pc}

00000cc0 <coda_product_type_add_product_definition>:
     cc0:	push	{r4, r5, r6, sl, fp, lr}
     cc4:	add	fp, sp, #16
     cc8:	sub	sp, sp, #8
     ccc:	mov	r4, r0
     cd0:	ldr	r0, [r1, #44]	; 0x2c
     cd4:	mov	r5, r1
     cd8:	cmp	r0, #0
     cdc:	beq	d04 <coda_product_type_add_product_definition+0x44>
     ce0:	ldr	r3, [r0]
     ce4:	ldr	r0, [r4]
     ce8:	ldr	r2, [r5, #8]
     cec:	movw	r1, #0
     cf0:	movt	r1, #0
     cf4:	str	r0, [sp]
     cf8:	movw	r0, #65136	; 0xfe70
     cfc:	movt	r0, #65535	; 0xffff
     d00:	b	d7c <coda_product_type_add_product_definition+0xbc>
     d04:	ldr	r0, [r4, #8]
     d08:	cmp	r0, #1
     d0c:	blt	d38 <coda_product_type_add_product_definition+0x78>
     d10:	ldr	r2, [r5, #4]
     d14:	ldr	r1, [r4, #12]
     d18:	mov	r3, #0
     d1c:	ldr	r6, [r1, r3, lsl #2]
     d20:	ldr	r6, [r6, #4]
     d24:	cmp	r6, r2
     d28:	beq	d68 <coda_product_type_add_product_definition+0xa8>
     d2c:	add	r3, r3, #1
     d30:	cmp	r3, r0
     d34:	blt	d1c <coda_product_type_add_product_definition+0x5c>
     d38:	ldr	r1, [r5, #8]
     d3c:	ldr	r0, [r4, #16]
     d40:	bl	0 <coda_hashtable_add_name>
     d44:	cmp	r0, #0
     d48:	beq	d90 <coda_product_type_add_product_definition+0xd0>
     d4c:	ldr	r3, [r4]
     d50:	ldr	r2, [r5, #8]
     d54:	movw	r0, #65136	; 0xfe70
     d58:	movw	r1, #0
     d5c:	movt	r0, #65535	; 0xffff
     d60:	movt	r1, #0
     d64:	b	d7c <coda_product_type_add_product_definition+0xbc>
     d68:	ldr	r3, [r4]
     d6c:	movw	r0, #65136	; 0xfe70
     d70:	movw	r1, #0
     d74:	movt	r0, #65535	; 0xffff
     d78:	movt	r1, #0
     d7c:	bl	0 <coda_set_error>
     d80:	mvn	r4, #0
     d84:	mov	r0, r4
     d88:	sub	sp, fp, #16
     d8c:	pop	{r4, r5, r6, sl, fp, pc}
     d90:	ldr	r1, [r4, #8]
     d94:	tst	r1, #15
     d98:	beq	da4 <coda_product_type_add_product_definition+0xe4>
     d9c:	ldr	r0, [r4, #12]
     da0:	b	dc4 <coda_product_type_add_product_definition+0x104>
     da4:	ldr	r0, [r4, #12]
     da8:	mov	r6, #64	; 0x40
     dac:	add	r1, r6, r1, lsl #2
     db0:	bl	0 <realloc>
     db4:	cmp	r0, #0
     db8:	beq	ddc <coda_product_type_add_product_definition+0x11c>
     dbc:	str	r0, [r4, #12]
     dc0:	ldr	r1, [r4, #8]
     dc4:	add	r2, r1, #1
     dc8:	str	r2, [r4, #8]
     dcc:	str	r5, [r0, r1, lsl #2]
     dd0:	str	r4, [r5, #44]	; 0x2c
     dd4:	mov	r4, #0
     dd8:	b	d84 <coda_product_type_add_product_definition+0xc4>
     ddc:	ldr	r0, [r4, #8]
     de0:	movw	r1, #574	; 0x23e
     de4:	movw	r3, #0
     de8:	mvn	r4, #0
     dec:	str	r1, [sp]
     df0:	movw	r1, #0
     df4:	movt	r3, #0
     df8:	movt	r1, #0
     dfc:	add	r2, r6, r0, lsl #2
     e00:	mvn	r0, #0
     e04:	bl	0 <coda_set_error>
     e08:	b	d84 <coda_product_type_add_product_definition+0xc4>

00000e0c <coda_product_type_get_product_definition_by_version>:
     e0c:	push	{r4, sl, fp, lr}
     e10:	add	fp, sp, #8
     e14:	ldr	lr, [r0, #8]
     e18:	mov	ip, r1
     e1c:	cmp	lr, #1
     e20:	blt	e48 <coda_product_type_get_product_definition_by_version+0x3c>
     e24:	ldr	r3, [r0, #12]
     e28:	mov	r2, #0
     e2c:	ldr	r1, [r3, r2, lsl #2]
     e30:	ldr	r4, [r1, #4]
     e34:	cmp	r4, ip
     e38:	beq	e68 <coda_product_type_get_product_definition_by_version+0x5c>
     e3c:	add	r2, r2, #1
     e40:	cmp	r2, lr
     e44:	blt	e2c <coda_product_type_get_product_definition_by_version+0x20>
     e48:	ldr	r2, [r0]
     e4c:	movw	r0, #65136	; 0xfe70
     e50:	movw	r1, #0
     e54:	mov	r3, ip
     e58:	movt	r0, #65535	; 0xffff
     e5c:	movt	r1, #0
     e60:	bl	0 <coda_set_error>
     e64:	mov	r1, #0
     e68:	mov	r0, r1
     e6c:	pop	{r4, sl, fp, pc}

00000e70 <coda_product_type_get_latest_product_definition>:
     e70:	push	{fp, lr}
     e74:	mov	fp, sp
     e78:	ldr	lr, [r0, #8]
     e7c:	cmp	lr, #0
     e80:	beq	ec8 <coda_product_type_get_latest_product_definition+0x58>
     e84:	ldr	ip, [r0, #12]
     e88:	cmp	lr, #2
     e8c:	ldr	r0, [ip]
     e90:	poplt	{fp, pc}
     e94:	ldr	r3, [r0, #4]
     e98:	mov	r0, #0
     e9c:	mov	r2, #1
     ea0:	ldr	r1, [ip, r2, lsl #2]
     ea4:	ldr	r1, [r1, #4]
     ea8:	cmp	r1, r3
     eac:	movgt	r0, r2
     eb0:	add	r2, r2, #1
     eb4:	movgt	r3, r1
     eb8:	cmp	lr, r2
     ebc:	bne	ea0 <coda_product_type_get_latest_product_definition+0x30>
     ec0:	ldr	r0, [ip, r0, lsl #2]
     ec4:	pop	{fp, pc}
     ec8:	ldr	r2, [r0]
     ecc:	movw	r0, #65136	; 0xfe70
     ed0:	movw	r1, #0
     ed4:	movt	r0, #65535	; 0xffff
     ed8:	movt	r1, #0
     edc:	bl	0 <coda_set_error>
     ee0:	mov	r0, #0
     ee4:	pop	{fp, pc}

00000ee8 <coda_product_class_delete>:
     ee8:	push	{r4, r5, fp, lr}
     eec:	add	fp, sp, #8
     ef0:	mov	r4, r0
     ef4:	ldr	r0, [r0]
     ef8:	cmp	r0, #0
     efc:	beq	f04 <coda_product_class_delete+0x1c>
     f00:	bl	0 <free>
     f04:	ldr	r0, [r4, #4]
     f08:	cmp	r0, #0
     f0c:	beq	f14 <coda_product_class_delete+0x2c>
     f10:	bl	0 <free>
     f14:	ldr	r0, [r4, #8]
     f18:	cmp	r0, #0
     f1c:	beq	f24 <coda_product_class_delete+0x3c>
     f20:	bl	0 <free>
     f24:	ldr	r0, [r4, #24]
     f28:	cmp	r0, #0
     f2c:	beq	f34 <coda_product_class_delete+0x4c>
     f30:	bl	0 <coda_hashtable_delete>
     f34:	ldr	r0, [r4, #36]	; 0x24
     f38:	cmp	r0, #0
     f3c:	beq	f44 <coda_product_class_delete+0x5c>
     f40:	bl	0 <coda_hashtable_delete>
     f44:	ldr	r0, [r4, #20]
     f48:	cmp	r0, #0
     f4c:	beq	f80 <coda_product_class_delete+0x98>
     f50:	ldr	r1, [r4, #16]
     f54:	cmp	r1, #1
     f58:	blt	f7c <coda_product_class_delete+0x94>
     f5c:	mov	r5, #0
     f60:	ldr	r0, [r0, r5, lsl #2]
     f64:	bl	0 <coda_type_release>
     f68:	ldr	r1, [r4, #16]
     f6c:	ldr	r0, [r4, #20]
     f70:	add	r5, r5, #1
     f74:	cmp	r5, r1
     f78:	blt	f60 <coda_product_class_delete+0x78>
     f7c:	bl	0 <free>
     f80:	ldr	r0, [r4, #32]
     f84:	cmp	r0, #0
     f88:	beq	fbc <coda_product_class_delete+0xd4>
     f8c:	ldr	r1, [r4, #28]
     f90:	cmp	r1, #1
     f94:	blt	fb8 <coda_product_class_delete+0xd0>
     f98:	mov	r5, #0
     f9c:	ldr	r0, [r0, r5, lsl #2]
     fa0:	bl	ae4 <coda_product_type_delete>
     fa4:	ldr	r1, [r4, #28]
     fa8:	ldr	r0, [r4, #32]
     fac:	add	r5, r5, #1
     fb0:	cmp	r5, r1
     fb4:	blt	f9c <coda_product_class_delete+0xb4>
     fb8:	bl	0 <free>
     fbc:	mov	r0, r4
     fc0:	pop	{r4, r5, fp, lr}
     fc4:	b	0 <free>

00000fc8 <coda_product_class_new>:
     fc8:	push	{r4, r5, fp, lr}
     fcc:	add	fp, sp, #8
     fd0:	mov	r5, r0
     fd4:	bl	0 <coda_is_identifier>
     fd8:	cmp	r0, #0
     fdc:	beq	1054 <coda_product_class_new+0x8c>
     fe0:	mov	r0, #40	; 0x28
     fe4:	bl	0 <malloc>
     fe8:	cmp	r0, #0
     fec:	beq	10cc <coda_product_class_new+0x104>
     ff0:	mov	r4, r0
     ff4:	mov	r0, #0
     ff8:	vmov.i32	q8, #0	; 0x00000000
     ffc:	str	r0, [r4, #36]	; 0x24
    1000:	add	r0, r4, #20
    1004:	vst1.32	{d16-d17}, [r0]
    1008:	add	r0, r4, #4
    100c:	vst1.32	{d16-d17}, [r0]
    1010:	mov	r0, r5
    1014:	bl	0 <strdup>
    1018:	cmp	r0, #0
    101c:	str	r0, [r4]
    1020:	beq	1070 <coda_product_class_new+0xa8>
    1024:	mov	r0, #1
    1028:	bl	0 <coda_hashtable_new>
    102c:	cmp	r0, #0
    1030:	str	r0, [r4, #24]
    1034:	beq	1088 <coda_product_class_new+0xc0>
    1038:	mov	r0, #1
    103c:	bl	0 <coda_hashtable_new>
    1040:	cmp	r0, #0
    1044:	str	r0, [r4, #36]	; 0x24
    1048:	beq	109c <coda_product_class_new+0xd4>
    104c:	mov	r0, r4
    1050:	pop	{r4, r5, fp, pc}
    1054:	movw	r0, #65136	; 0xfe70
    1058:	movw	r1, #0
    105c:	mov	r2, r5
    1060:	movt	r0, #65535	; 0xffff
    1064:	movt	r1, #0
    1068:	bl	0 <coda_set_error>
    106c:	b	10c0 <coda_product_class_new+0xf8>
    1070:	movw	r1, #0
    1074:	movw	r2, #0
    1078:	mvn	r0, #0
    107c:	movw	r3, #702	; 0x2be
    1080:	movt	r1, #0
    1084:	b	10b0 <coda_product_class_new+0xe8>
    1088:	movw	r1, #0
    108c:	movw	r2, #0
    1090:	mvn	r0, #0
    1094:	movw	r3, #711	; 0x2c7
    1098:	b	10ac <coda_product_class_new+0xe4>
    109c:	movw	r1, #0
    10a0:	movw	r2, #0
    10a4:	mvn	r0, #0
    10a8:	mov	r3, #720	; 0x2d0
    10ac:	movt	r1, #0
    10b0:	movt	r2, #0
    10b4:	bl	0 <coda_set_error>
    10b8:	mov	r0, r4
    10bc:	bl	ee8 <coda_product_class_delete>
    10c0:	mov	r4, #0
    10c4:	mov	r0, r4
    10c8:	pop	{r4, r5, fp, pc}
    10cc:	movw	r0, #0
    10d0:	movw	r1, #0
    10d4:	movw	r3, #0
    10d8:	movw	r2, #686	; 0x2ae
    10dc:	movt	r0, #0
    10e0:	movt	r1, #0
    10e4:	movt	r3, #0
    10e8:	bl	0 <__assert_fail>

000010ec <coda_product_class_set_description>:
    10ec:	push	{r4, r5, fp, lr}
    10f0:	add	fp, sp, #8
    10f4:	mov	r5, r0
    10f8:	ldr	r0, [r0, #4]
    10fc:	cmp	r0, #0
    1100:	beq	1124 <coda_product_class_set_description+0x38>
    1104:	movw	r0, #65136	; 0xfe70
    1108:	movw	r1, #0
    110c:	movt	r0, #65535	; 0xffff
    1110:	movt	r1, #0
    1114:	bl	0 <coda_set_error>
    1118:	mvn	r4, #0
    111c:	mov	r0, r4
    1120:	pop	{r4, r5, fp, pc}
    1124:	mov	r4, #0
    1128:	cmp	r1, #0
    112c:	mov	r0, #0
    1130:	beq	1144 <coda_product_class_set_description+0x58>
    1134:	mov	r0, r1
    1138:	bl	0 <strdup>
    113c:	cmp	r0, #0
    1140:	beq	1150 <coda_product_class_set_description+0x64>
    1144:	str	r0, [r5, #4]
    1148:	mov	r0, r4
    114c:	pop	{r4, r5, fp, pc}
    1150:	movw	r1, #0
    1154:	movw	r2, #0
    1158:	mvn	r0, #0
    115c:	movw	r3, #743	; 0x2e7
    1160:	mvn	r4, #0
    1164:	movt	r1, #0
    1168:	movt	r2, #0
    116c:	bl	0 <coda_set_error>
    1170:	mov	r0, r4
    1174:	pop	{r4, r5, fp, pc}

00001178 <coda_product_class_set_definition_file>:
    1178:	push	{r4, r5, fp, lr}
    117c:	add	fp, sp, #8
    1180:	mov	r5, r0
    1184:	ldr	r0, [r0, #8]
    1188:	cmp	r0, #0
    118c:	beq	11b0 <coda_product_class_set_definition_file+0x38>
    1190:	movw	r0, #65136	; 0xfe70
    1194:	movw	r1, #0
    1198:	movt	r0, #65535	; 0xffff
    119c:	movt	r1, #0
    11a0:	bl	0 <coda_set_error>
    11a4:	mvn	r4, #0
    11a8:	mov	r0, r4
    11ac:	pop	{r4, r5, fp, pc}
    11b0:	mov	r4, #0
    11b4:	cmp	r1, #0
    11b8:	mov	r0, #0
    11bc:	beq	11d0 <coda_product_class_set_definition_file+0x58>
    11c0:	mov	r0, r1
    11c4:	bl	0 <strdup>
    11c8:	cmp	r0, #0
    11cc:	beq	11dc <coda_product_class_set_definition_file+0x64>
    11d0:	str	r0, [r5, #8]
    11d4:	mov	r0, r4
    11d8:	pop	{r4, r5, fp, pc}
    11dc:	movw	r1, #0
    11e0:	movw	r2, #0
    11e4:	mvn	r0, #0
    11e8:	movw	r3, #767	; 0x2ff
    11ec:	mvn	r4, #0
    11f0:	movt	r1, #0
    11f4:	movt	r2, #0
    11f8:	bl	0 <coda_set_error>
    11fc:	mov	r0, r4
    1200:	pop	{r4, r5, fp, pc}

00001204 <coda_product_class_set_revision>:
    1204:	str	r1, [r0, #12]
    1208:	mov	r0, #0
    120c:	bx	lr

00001210 <coda_product_class_add_product_type>:
    1210:	push	{r4, r5, r6, sl, fp, lr}
    1214:	add	fp, sp, #16
    1218:	sub	sp, sp, #8
    121c:	mov	r4, r1
    1220:	mov	r5, r0
    1224:	ldr	r1, [r1]
    1228:	ldr	r0, [r0, #36]	; 0x24
    122c:	bl	0 <coda_hashtable_add_name>
    1230:	cmp	r0, #0
    1234:	beq	125c <coda_product_class_add_product_type+0x4c>
    1238:	ldr	r3, [r5]
    123c:	ldr	r2, [r4]
    1240:	movw	r0, #65136	; 0xfe70
    1244:	movw	r1, #0
    1248:	movt	r0, #65535	; 0xffff
    124c:	movt	r1, #0
    1250:	bl	0 <coda_set_error>
    1254:	mvn	r4, #0
    1258:	b	12a4 <coda_product_class_add_product_type+0x94>
    125c:	ldr	r1, [r5, #28]
    1260:	tst	r1, #15
    1264:	beq	1270 <coda_product_class_add_product_type+0x60>
    1268:	ldr	r0, [r5, #32]
    126c:	b	1290 <coda_product_class_add_product_type+0x80>
    1270:	ldr	r0, [r5, #32]
    1274:	mov	r6, #64	; 0x40
    1278:	add	r1, r6, r1, lsl #2
    127c:	bl	0 <realloc>
    1280:	cmp	r0, #0
    1284:	beq	12b0 <coda_product_class_add_product_type+0xa0>
    1288:	str	r0, [r5, #32]
    128c:	ldr	r1, [r5, #28]
    1290:	add	r2, r1, #1
    1294:	str	r2, [r5, #28]
    1298:	str	r4, [r0, r1, lsl #2]
    129c:	str	r5, [r4, #20]
    12a0:	mov	r4, #0
    12a4:	mov	r0, r4
    12a8:	sub	sp, fp, #16
    12ac:	pop	{r4, r5, r6, sl, fp, pc}
    12b0:	ldr	r0, [r5, #28]
    12b4:	mov	r1, #800	; 0x320
    12b8:	movw	r3, #0
    12bc:	mvn	r4, #0
    12c0:	str	r1, [sp]
    12c4:	movw	r1, #0
    12c8:	movt	r3, #0
    12cc:	movt	r1, #0
    12d0:	add	r2, r6, r0, lsl #2
    12d4:	mvn	r0, #0
    12d8:	bl	0 <coda_set_error>
    12dc:	b	12a4 <coda_product_class_add_product_type+0x94>

000012e0 <coda_product_class_get_product_type>:
    12e0:	push	{r4, r5, fp, lr}
    12e4:	add	fp, sp, #8
    12e8:	mov	r5, r0
    12ec:	ldr	r0, [r0, #36]	; 0x24
    12f0:	mov	r4, r1
    12f4:	bl	0 <coda_hashtable_get_index_from_name>
    12f8:	cmn	r0, #1
    12fc:	ldrne	r1, [r5, #32]
    1300:	ldrne	r0, [r1, r0, lsl #2]
    1304:	popne	{r4, r5, fp, pc}
    1308:	ldr	r2, [r5]
    130c:	movw	r0, #65136	; 0xfe70
    1310:	movw	r1, #0
    1314:	mov	r3, r4
    1318:	movt	r0, #65535	; 0xffff
    131c:	movt	r1, #0
    1320:	bl	0 <coda_set_error>
    1324:	mov	r0, #0
    1328:	pop	{r4, r5, fp, pc}

0000132c <coda_product_class_has_product_type>:
    132c:	push	{fp, lr}
    1330:	mov	fp, sp
    1334:	ldr	r0, [r0, #36]	; 0x24
    1338:	bl	0 <coda_hashtable_get_index_from_name>
    133c:	add	r1, r0, #1
    1340:	cmn	r0, #1
    1344:	movwne	r1, #1
    1348:	mov	r0, r1
    134c:	pop	{fp, pc}

00001350 <coda_product_class_add_named_type>:
    1350:	push	{r4, r5, fp, lr}
    1354:	add	fp, sp, #8
    1358:	mov	r4, r1
    135c:	mov	r5, r0
    1360:	ldr	r1, [r1, #16]
    1364:	ldr	r0, [r0, #24]
    1368:	bl	0 <coda_hashtable_add_name>
    136c:	cmp	r0, #0
    1370:	beq	1398 <coda_product_class_add_named_type+0x48>
    1374:	ldr	r3, [r5]
    1378:	ldr	r2, [r4, #16]
    137c:	movw	r0, #65136	; 0xfe70
    1380:	movw	r1, #0
    1384:	movt	r0, #65535	; 0xffff
    1388:	movt	r1, #0
    138c:	bl	0 <coda_set_error>
    1390:	mvn	r0, #0
    1394:	pop	{r4, r5, fp, pc}
    1398:	ldr	r1, [r5, #16]
    139c:	tst	r1, #15
    13a0:	beq	13ac <coda_product_class_add_named_type+0x5c>
    13a4:	ldr	r0, [r5, #20]
    13a8:	b	13cc <coda_product_class_add_named_type+0x7c>
    13ac:	mov	r0, #64	; 0x40
    13b0:	add	r1, r0, r1, lsl #2
    13b4:	ldr	r0, [r5, #20]
    13b8:	bl	0 <realloc>
    13bc:	cmp	r0, #0
    13c0:	beq	13ec <coda_product_class_add_named_type+0x9c>
    13c4:	str	r0, [r5, #20]
    13c8:	ldr	r1, [r5, #16]
    13cc:	add	r2, r1, #1
    13d0:	str	r2, [r5, #16]
    13d4:	str	r4, [r0, r1, lsl #2]
    13d8:	ldr	r0, [r4, #4]
    13dc:	add	r0, r0, #1
    13e0:	str	r0, [r4, #4]
    13e4:	mov	r0, #0
    13e8:	pop	{r4, r5, fp, pc}
    13ec:	movw	r0, #0
    13f0:	movw	r1, #0
    13f4:	movw	r3, #0
    13f8:	mov	r2, #848	; 0x350
    13fc:	movt	r0, #0
    1400:	movt	r1, #0
    1404:	movt	r3, #0
    1408:	bl	0 <__assert_fail>

0000140c <coda_product_class_get_named_type>:
    140c:	push	{r4, r5, fp, lr}
    1410:	add	fp, sp, #8
    1414:	mov	r5, r0
    1418:	ldr	r0, [r0, #24]
    141c:	mov	r4, r1
    1420:	bl	0 <coda_hashtable_get_index_from_name>
    1424:	cmn	r0, #1
    1428:	ldrne	r1, [r5, #20]
    142c:	ldrne	r0, [r1, r0, lsl #2]
    1430:	popne	{r4, r5, fp, pc}
    1434:	ldr	r2, [r5]
    1438:	movw	r0, #65136	; 0xfe70
    143c:	movw	r1, #0
    1440:	mov	r3, r4
    1444:	movt	r0, #65535	; 0xffff
    1448:	movt	r1, #0
    144c:	bl	0 <coda_set_error>
    1450:	mov	r0, #0
    1454:	pop	{r4, r5, fp, pc}

00001458 <coda_product_class_has_named_type>:
    1458:	push	{fp, lr}
    145c:	mov	fp, sp
    1460:	ldr	r0, [r0, #24]
    1464:	bl	0 <coda_hashtable_get_index_from_name>
    1468:	add	r1, r0, #1
    146c:	cmn	r0, #1
    1470:	movwne	r1, #1
    1474:	mov	r0, r1
    1478:	pop	{fp, pc}

0000147c <coda_product_class_get_revision>:
    147c:	ldr	r0, [r0, #12]
    1480:	bx	lr

00001484 <coda_data_dictionary_add_product_class>:
    1484:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
    1488:	add	fp, sp, #24
    148c:	sub	sp, sp, #8
    1490:	ldr	r8, [pc, #336]	; 15e8 <coda_data_dictionary_add_product_class+0x164>
    1494:	mov	r9, r0
    1498:	bl	0 <__aeabi_read_tp>
    149c:	ldr	r0, [r0, r8]
    14a0:	cmp	r0, #0
    14a4:	beq	14dc <coda_data_dictionary_add_product_class+0x58>
    14a8:	ldr	r1, [r9]
    14ac:	ldr	r0, [r0, #8]
    14b0:	bl	0 <coda_hashtable_add_name>
    14b4:	cmp	r0, #0
    14b8:	beq	14f8 <coda_data_dictionary_add_product_class+0x74>
    14bc:	ldr	r2, [r9]
    14c0:	movw	r0, #65136	; 0xfe70
    14c4:	movw	r1, #0
    14c8:	movt	r0, #65535	; 0xffff
    14cc:	movt	r1, #0
    14d0:	bl	0 <coda_set_error>
    14d4:	mvn	r4, #0
    14d8:	b	15ac <coda_data_dictionary_add_product_class+0x128>
    14dc:	movw	r0, #65136	; 0xfe70
    14e0:	movw	r1, #0
    14e4:	movt	r0, #65535	; 0xffff
    14e8:	movt	r1, #0
    14ec:	bl	0 <coda_set_error>
    14f0:	mvn	r4, #0
    14f4:	b	15ac <coda_data_dictionary_add_product_class+0x128>
    14f8:	bl	0 <__aeabi_read_tp>
    14fc:	ldr	r6, [r0, r8]
    1500:	ldr	r0, [r6]
    1504:	tst	r0, #15
    1508:	beq	1518 <coda_data_dictionary_add_product_class+0x94>
    150c:	cmp	r0, #1
    1510:	bge	154c <coda_data_dictionary_add_product_class+0xc8>
    1514:	b	158c <coda_data_dictionary_add_product_class+0x108>
    1518:	mov	r7, #64	; 0x40
    151c:	add	r1, r7, r0, lsl #2
    1520:	ldr	r0, [r6, #4]
    1524:	bl	0 <realloc>
    1528:	mov	r1, r0
    152c:	bl	0 <__aeabi_read_tp>
    1530:	ldr	r6, [r0, r8]
    1534:	cmp	r1, #0
    1538:	beq	15b8 <coda_data_dictionary_add_product_class+0x134>
    153c:	str	r1, [r6, #4]
    1540:	ldr	r0, [r6]
    1544:	cmp	r0, #1
    1548:	blt	158c <coda_data_dictionary_add_product_class+0x108>
    154c:	mov	r7, #0
    1550:	ldr	r5, [r6, #4]
    1554:	ldr	r0, [r9]
    1558:	ldr	r4, [r5, r7, lsl #2]
    155c:	ldr	r1, [r4]
    1560:	bl	0 <strcmp>
    1564:	cmn	r0, #1
    1568:	bgt	157c <coda_data_dictionary_add_product_class+0xf8>
    156c:	str	r9, [r5, r7, lsl #2]
    1570:	bl	0 <__aeabi_read_tp>
    1574:	ldr	r6, [r0, r8]
    1578:	mov	r9, r4
    157c:	ldr	r0, [r6]
    1580:	add	r7, r7, #1
    1584:	cmp	r7, r0
    1588:	blt	1550 <coda_data_dictionary_add_product_class+0xcc>
    158c:	add	r1, r0, #1
    1590:	str	r1, [r6]
    1594:	ldr	r1, [r6, #4]
    1598:	str	r9, [r1, r0, lsl #2]
    159c:	bl	15ec <data_dictionary_rebuild_product_class_hash_data>
    15a0:	mov	r4, r0
    15a4:	cmp	r0, #0
    15a8:	mvnne	r4, #0
    15ac:	mov	r0, r4
    15b0:	sub	sp, fp, #24
    15b4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
    15b8:	ldr	r0, [r6]
    15bc:	movw	r1, #994	; 0x3e2
    15c0:	movw	r3, #0
    15c4:	mvn	r4, #0
    15c8:	str	r1, [sp]
    15cc:	movw	r1, #0
    15d0:	movt	r3, #0
    15d4:	movt	r1, #0
    15d8:	add	r2, r7, r0, lsl #2
    15dc:	mvn	r0, #0
    15e0:	bl	0 <coda_set_error>
    15e4:	b	15ac <coda_data_dictionary_add_product_class+0x128>
    15e8:	.word	0x00000000

000015ec <data_dictionary_rebuild_product_class_hash_data>:
    15ec:	push	{r4, r5, r6, sl, fp, lr}
    15f0:	add	fp, sp, #16
    15f4:	ldr	r5, [pc, #208]	; 16cc <data_dictionary_rebuild_product_class_hash_data+0xe0>
    15f8:	bl	0 <__aeabi_read_tp>
    15fc:	mov	r4, r0
    1600:	ldr	r0, [r0, r5]
    1604:	ldr	r0, [r0, #8]
    1608:	bl	0 <coda_hashtable_delete>
    160c:	mov	r0, #1
    1610:	bl	0 <coda_hashtable_new>
    1614:	ldr	r1, [r4, r5]
    1618:	cmp	r0, #0
    161c:	str	r0, [r1, #8]
    1620:	beq	16a4 <data_dictionary_rebuild_product_class_hash_data+0xb8>
    1624:	ldr	r2, [r1]
    1628:	mov	r4, #0
    162c:	cmp	r2, #1
    1630:	blt	16c4 <data_dictionary_rebuild_product_class_hash_data+0xd8>
    1634:	ldr	r1, [r1, #4]
    1638:	ldr	r1, [r1]
    163c:	ldr	r1, [r1]
    1640:	bl	0 <coda_hashtable_add_name>
    1644:	cmp	r0, #0
    1648:	bne	1684 <data_dictionary_rebuild_product_class_hash_data+0x98>
    164c:	mov	r6, #1
    1650:	bl	0 <__aeabi_read_tp>
    1654:	ldr	r0, [r0, r5]
    1658:	ldr	r1, [r0]
    165c:	cmp	r6, r1
    1660:	bge	16c4 <data_dictionary_rebuild_product_class_hash_data+0xd8>
    1664:	ldr	r1, [r0, #4]
    1668:	ldr	r0, [r0, #8]
    166c:	ldr	r1, [r1, r6, lsl #2]
    1670:	ldr	r1, [r1]
    1674:	bl	0 <coda_hashtable_add_name>
    1678:	add	r6, r6, #1
    167c:	cmp	r0, #0
    1680:	beq	1650 <data_dictionary_rebuild_product_class_hash_data+0x64>
    1684:	movw	r0, #0
    1688:	movw	r1, #0
    168c:	movw	r3, #0
    1690:	mov	r2, #960	; 0x3c0
    1694:	movt	r0, #0
    1698:	movt	r1, #0
    169c:	movt	r3, #0
    16a0:	bl	0 <__assert_fail>
    16a4:	movw	r1, #0
    16a8:	movw	r2, #0
    16ac:	mvn	r0, #0
    16b0:	mov	r3, #952	; 0x3b8
    16b4:	mvn	r4, #0
    16b8:	movt	r1, #0
    16bc:	movt	r2, #0
    16c0:	bl	0 <coda_set_error>
    16c4:	mov	r0, r4
    16c8:	pop	{r4, r5, r6, sl, fp, pc}
    16cc:	.word	0x00000000

000016d0 <coda_data_dictionary_get_product_class>:
    16d0:	push	{r4, r5, fp, lr}
    16d4:	add	fp, sp, #8
    16d8:	ldr	r5, [pc, #120]	; 1758 <coda_data_dictionary_get_product_class+0x88>
    16dc:	mov	r4, r0
    16e0:	bl	0 <__aeabi_read_tp>
    16e4:	ldr	r0, [r0, r5]
    16e8:	cmp	r0, #0
    16ec:	beq	171c <coda_data_dictionary_get_product_class+0x4c>
    16f0:	ldr	r0, [r0, #8]
    16f4:	mov	r1, r4
    16f8:	bl	0 <coda_hashtable_get_index_from_name>
    16fc:	cmn	r0, #1
    1700:	beq	1738 <coda_data_dictionary_get_product_class+0x68>
    1704:	mov	r1, r0
    1708:	bl	0 <__aeabi_read_tp>
    170c:	ldr	r0, [r0, r5]
    1710:	ldr	r0, [r0, #4]
    1714:	ldr	r0, [r0, r1, lsl #2]
    1718:	pop	{r4, r5, fp, pc}
    171c:	movw	r0, #65136	; 0xfe70
    1720:	movw	r1, #0
    1724:	movt	r0, #65535	; 0xffff
    1728:	movt	r1, #0
    172c:	bl	0 <coda_set_error>
    1730:	mov	r0, #0
    1734:	pop	{r4, r5, fp, pc}
    1738:	movw	r0, #65136	; 0xfe70
    173c:	movw	r1, #0
    1740:	mov	r2, r4
    1744:	movt	r0, #65535	; 0xffff
    1748:	movt	r1, #0
    174c:	bl	0 <coda_set_error>
    1750:	mov	r0, #0
    1754:	pop	{r4, r5, fp, pc}
    1758:	.word	0x00000000

0000175c <coda_data_dictionary_has_product_class>:
    175c:	push	{fp, lr}
    1760:	mov	fp, sp
    1764:	ldr	r2, [pc, #48]	; 179c <coda_data_dictionary_has_product_class+0x40>
    1768:	mov	r1, r0
    176c:	bl	0 <__aeabi_read_tp>
    1770:	ldr	r0, [r0, r2]
    1774:	cmp	r0, #0
    1778:	moveq	r0, #0
    177c:	popeq	{fp, pc}
    1780:	ldr	r0, [r0, #8]
    1784:	bl	0 <coda_hashtable_get_index_from_name>
    1788:	mov	r1, r0
    178c:	add	r0, r0, #1
    1790:	cmn	r1, #1
    1794:	movwne	r0, #1
    1798:	pop	{fp, pc}
    179c:	.word	0x00000000

000017a0 <coda_data_dictionary_remove_product_class>:
    17a0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    17a4:	add	fp, sp, #28
    17a8:	sub	sp, sp, #4
    17ac:	ldr	r5, [pc, #764]	; 1ab0 <coda_data_dictionary_remove_product_class+0x310>
    17b0:	mov	r4, r0
    17b4:	bl	0 <__aeabi_read_tp>
    17b8:	ldr	r0, [r0, r5]
    17bc:	cmp	r0, #0
    17c0:	beq	1a74 <coda_data_dictionary_remove_product_class+0x2d4>
    17c4:	ldr	r1, [r4]
    17c8:	ldr	r0, [r0, #8]
    17cc:	bl	0 <coda_hashtable_get_index_from_name>
    17d0:	cmn	r0, #1
    17d4:	beq	1a8c <coda_data_dictionary_remove_product_class+0x2ec>
    17d8:	mov	r1, r0
    17dc:	bl	0 <__aeabi_read_tp>
    17e0:	ldr	r0, [r0, r5]
    17e4:	add	r3, r1, #1
    17e8:	ldr	r2, [r0]
    17ec:	cmp	r3, r2
    17f0:	bge	1824 <coda_data_dictionary_remove_product_class+0x84>
    17f4:	ldr	r0, [r0, #4]
    17f8:	add	r2, r0, r1, lsl #2
    17fc:	ldr	r2, [r2, #4]
    1800:	str	r2, [r0, r1, lsl #2]
    1804:	bl	0 <__aeabi_read_tp>
    1808:	ldr	r0, [r0, r5]
    180c:	add	r3, r1, #1
    1810:	add	r1, r1, #2
    1814:	ldr	r2, [r0]
    1818:	cmp	r1, r2
    181c:	mov	r1, r3
    1820:	blt	17f4 <coda_data_dictionary_remove_product_class+0x54>
    1824:	sub	r1, r2, #1
    1828:	str	r1, [r0]
    182c:	mov	r0, r4
    1830:	bl	ee8 <coda_product_class_delete>
    1834:	bl	15ec <data_dictionary_rebuild_product_class_hash_data>
    1838:	cmp	r0, #0
    183c:	bne	1aa4 <coda_data_dictionary_remove_product_class+0x304>
    1840:	bl	0 <__aeabi_read_tp>
    1844:	ldr	r1, [r0, r5]
    1848:	ldr	r0, [r1, #12]
    184c:	cmp	r0, #0
    1850:	beq	1868 <coda_data_dictionary_remove_product_class+0xc8>
    1854:	bl	0 <coda_detection_tree_delete>
    1858:	bl	0 <__aeabi_read_tp>
    185c:	ldr	r1, [r0, r5]
    1860:	mov	r0, #0
    1864:	str	r0, [r1, #12]
    1868:	ldr	r0, [r1, #16]
    186c:	cmp	r0, #0
    1870:	beq	1888 <coda_data_dictionary_remove_product_class+0xe8>
    1874:	bl	0 <coda_detection_tree_delete>
    1878:	bl	0 <__aeabi_read_tp>
    187c:	ldr	r1, [r0, r5]
    1880:	mov	r0, #0
    1884:	str	r0, [r1, #16]
    1888:	ldr	r0, [r1, #20]
    188c:	cmp	r0, #0
    1890:	beq	18a8 <coda_data_dictionary_remove_product_class+0x108>
    1894:	bl	0 <coda_detection_tree_delete>
    1898:	bl	0 <__aeabi_read_tp>
    189c:	ldr	r1, [r0, r5]
    18a0:	mov	r0, #0
    18a4:	str	r0, [r1, #20]
    18a8:	ldr	r0, [r1, #24]
    18ac:	cmp	r0, #0
    18b0:	beq	18c8 <coda_data_dictionary_remove_product_class+0x128>
    18b4:	bl	0 <coda_detection_tree_delete>
    18b8:	bl	0 <__aeabi_read_tp>
    18bc:	ldr	r1, [r0, r5]
    18c0:	mov	r0, #0
    18c4:	str	r0, [r1, #24]
    18c8:	ldr	r0, [r1, #28]
    18cc:	cmp	r0, #0
    18d0:	beq	18e8 <coda_data_dictionary_remove_product_class+0x148>
    18d4:	bl	0 <coda_detection_tree_delete>
    18d8:	bl	0 <__aeabi_read_tp>
    18dc:	ldr	r1, [r0, r5]
    18e0:	mov	r0, #0
    18e4:	str	r0, [r1, #28]
    18e8:	ldr	r0, [r1, #32]
    18ec:	cmp	r0, #0
    18f0:	beq	1908 <coda_data_dictionary_remove_product_class+0x168>
    18f4:	bl	0 <coda_detection_tree_delete>
    18f8:	bl	0 <__aeabi_read_tp>
    18fc:	ldr	r1, [r0, r5]
    1900:	mov	r0, #0
    1904:	str	r0, [r1, #32]
    1908:	ldr	r0, [r1, #36]	; 0x24
    190c:	cmp	r0, #0
    1910:	beq	1928 <coda_data_dictionary_remove_product_class+0x188>
    1914:	bl	0 <coda_detection_tree_delete>
    1918:	bl	0 <__aeabi_read_tp>
    191c:	ldr	r1, [r0, r5]
    1920:	mov	r0, #0
    1924:	str	r0, [r1, #36]	; 0x24
    1928:	ldr	r0, [r1, #40]	; 0x28
    192c:	cmp	r0, #0
    1930:	beq	1948 <coda_data_dictionary_remove_product_class+0x1a8>
    1934:	bl	0 <coda_detection_tree_delete>
    1938:	bl	0 <__aeabi_read_tp>
    193c:	ldr	r1, [r0, r5]
    1940:	mov	r0, #0
    1944:	str	r0, [r1, #40]	; 0x28
    1948:	ldr	r0, [r1, #44]	; 0x2c
    194c:	cmp	r0, #0
    1950:	beq	1968 <coda_data_dictionary_remove_product_class+0x1c8>
    1954:	bl	0 <coda_detection_tree_delete>
    1958:	bl	0 <__aeabi_read_tp>
    195c:	ldr	r1, [r0, r5]
    1960:	mov	r0, #0
    1964:	str	r0, [r1, #44]	; 0x2c
    1968:	ldr	r0, [r1, #48]	; 0x30
    196c:	cmp	r0, #0
    1970:	beq	1988 <coda_data_dictionary_remove_product_class+0x1e8>
    1974:	bl	0 <coda_detection_tree_delete>
    1978:	bl	0 <__aeabi_read_tp>
    197c:	ldr	r1, [r0, r5]
    1980:	mov	r0, #0
    1984:	str	r0, [r1, #48]	; 0x30
    1988:	ldr	r0, [r1]
    198c:	cmp	r0, #1
    1990:	movlt	r0, #0
    1994:	sublt	sp, fp, #28
    1998:	poplt	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    199c:	mov	r9, #0
    19a0:	ldr	r0, [r1, #4]
    19a4:	ldr	r3, [r0, r9, lsl #2]
    19a8:	ldr	r2, [r3, #28]
    19ac:	cmp	r2, #1
    19b0:	blt	1a5c <coda_data_dictionary_remove_product_class+0x2bc>
    19b4:	mov	sl, #0
    19b8:	str	r3, [sp]
    19bc:	ldr	r0, [r3, #32]
    19c0:	ldr	r6, [r0, sl, lsl #2]
    19c4:	ldr	r0, [r6, #8]
    19c8:	cmp	r0, #1
    19cc:	blt	1a48 <coda_data_dictionary_remove_product_class+0x2a8>
    19d0:	mov	r4, #0
    19d4:	ldr	r1, [r6, #12]
    19d8:	ldr	r7, [r1, r4, lsl #2]
    19dc:	ldr	r1, [r7, #16]
    19e0:	cmp	r1, #1
    19e4:	blt	1a34 <coda_data_dictionary_remove_product_class+0x294>
    19e8:	mov	r8, #0
    19ec:	bl	0 <__aeabi_read_tp>
    19f0:	ldr	r1, [r7, #20]
    19f4:	ldr	r0, [r0, r5]
    19f8:	ldr	r1, [r1, r8, lsl #2]
    19fc:	ldr	r2, [r1, #8]
    1a00:	ldr	r2, [r2]
    1a04:	cmp	r2, #0
    1a08:	movweq	r2, #1
    1a0c:	add	r0, r0, r2, lsl #2
    1a10:	add	r0, r0, #12
    1a14:	bl	0 <coda_detection_tree_add_rule>
    1a18:	cmp	r0, #0
    1a1c:	bne	1aa4 <coda_data_dictionary_remove_product_class+0x304>
    1a20:	ldr	r0, [r7, #16]
    1a24:	add	r8, r8, #1
    1a28:	cmp	r8, r0
    1a2c:	blt	19ec <coda_data_dictionary_remove_product_class+0x24c>
    1a30:	ldr	r0, [r6, #8]
    1a34:	add	r4, r4, #1
    1a38:	cmp	r4, r0
    1a3c:	blt	19d4 <coda_data_dictionary_remove_product_class+0x234>
    1a40:	ldr	r3, [sp]
    1a44:	ldr	r2, [r3, #28]
    1a48:	add	sl, sl, #1
    1a4c:	cmp	sl, r2
    1a50:	blt	19bc <coda_data_dictionary_remove_product_class+0x21c>
    1a54:	bl	0 <__aeabi_read_tp>
    1a58:	ldr	r1, [r0, r5]
    1a5c:	ldr	r2, [r1]
    1a60:	add	r9, r9, #1
    1a64:	mov	r0, #0
    1a68:	cmp	r9, r2
    1a6c:	blt	19a0 <coda_data_dictionary_remove_product_class+0x200>
    1a70:	b	1aa8 <coda_data_dictionary_remove_product_class+0x308>
    1a74:	movw	r0, #65136	; 0xfe70
    1a78:	movw	r1, #0
    1a7c:	movt	r0, #65535	; 0xffff
    1a80:	movt	r1, #0
    1a84:	bl	0 <coda_set_error>
    1a88:	b	1aa4 <coda_data_dictionary_remove_product_class+0x304>
    1a8c:	ldr	r2, [r4]
    1a90:	movw	r0, #65136	; 0xfe70
    1a94:	movw	r1, #0
    1a98:	movt	r0, #65535	; 0xffff
    1a9c:	movt	r1, #0
    1aa0:	bl	0 <coda_set_error>
    1aa4:	mvn	r0, #0
    1aa8:	sub	sp, fp, #28
    1aac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1ab0:	.word	0x00000000

00001ab4 <coda_data_dictionary_get_definition>:
    1ab4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
    1ab8:	add	fp, sp, #24
    1abc:	ldr	r5, [pc, #420]	; 1c68 <coda_data_dictionary_get_definition+0x1b4>
    1ac0:	mov	r8, r3
    1ac4:	mov	r6, r2
    1ac8:	mov	r7, r1
    1acc:	mov	r4, r0
    1ad0:	bl	0 <__aeabi_read_tp>
    1ad4:	ldr	r0, [r0, r5]
    1ad8:	cmp	r0, #0
    1adc:	beq	1b8c <coda_data_dictionary_get_definition+0xd8>
    1ae0:	ldr	r0, [r0, #8]
    1ae4:	mov	r1, r4
    1ae8:	bl	0 <coda_hashtable_get_index_from_name>
    1aec:	cmn	r0, #1
    1af0:	beq	1ba4 <coda_data_dictionary_get_definition+0xf0>
    1af4:	mov	r1, r0
    1af8:	bl	0 <__aeabi_read_tp>
    1afc:	ldr	r0, [r0, r5]
    1b00:	mvn	r4, #0
    1b04:	ldr	r0, [r0, #4]
    1b08:	ldr	r5, [r0, r1, lsl #2]
    1b0c:	cmp	r5, #0
    1b10:	beq	1c40 <coda_data_dictionary_get_definition+0x18c>
    1b14:	ldr	r0, [r5, #36]	; 0x24
    1b18:	mov	r1, r7
    1b1c:	bl	0 <coda_hashtable_get_index_from_name>
    1b20:	cmn	r0, #1
    1b24:	beq	1bc8 <coda_data_dictionary_get_definition+0x114>
    1b28:	ldr	r1, [r5, #32]
    1b2c:	ldr	r1, [r1, r0, lsl #2]
    1b30:	cmp	r1, #0
    1b34:	beq	1c40 <coda_data_dictionary_get_definition+0x18c>
    1b38:	ldr	r0, [r1, #8]
    1b3c:	cmn	r6, #1
    1b40:	ble	1bec <coda_data_dictionary_get_definition+0x138>
    1b44:	cmp	r0, #1
    1b48:	blt	1b70 <coda_data_dictionary_get_definition+0xbc>
    1b4c:	ldr	r3, [r1, #12]
    1b50:	mov	r7, #0
    1b54:	ldr	r2, [r3, r7, lsl #2]
    1b58:	ldr	r5, [r2, #4]
    1b5c:	cmp	r5, r6
    1b60:	beq	1c34 <coda_data_dictionary_get_definition+0x180>
    1b64:	add	r7, r7, #1
    1b68:	cmp	r7, r0
    1b6c:	blt	1b54 <coda_data_dictionary_get_definition+0xa0>
    1b70:	ldr	r2, [r1]
    1b74:	movw	r0, #65136	; 0xfe70
    1b78:	movw	r1, #0
    1b7c:	mov	r3, r6
    1b80:	movt	r0, #65535	; 0xffff
    1b84:	movt	r1, #0
    1b88:	b	1be0 <coda_data_dictionary_get_definition+0x12c>
    1b8c:	movw	r0, #65136	; 0xfe70
    1b90:	movw	r1, #0
    1b94:	movt	r0, #65535	; 0xffff
    1b98:	movt	r1, #0
    1b9c:	bl	0 <coda_set_error>
    1ba0:	b	1bbc <coda_data_dictionary_get_definition+0x108>
    1ba4:	movw	r0, #65136	; 0xfe70
    1ba8:	movw	r1, #0
    1bac:	mov	r2, r4
    1bb0:	movt	r0, #65535	; 0xffff
    1bb4:	movt	r1, #0
    1bb8:	bl	0 <coda_set_error>
    1bbc:	mvn	r4, #0
    1bc0:	mov	r0, r4
    1bc4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
    1bc8:	ldr	r2, [r5]
    1bcc:	movw	r0, #65136	; 0xfe70
    1bd0:	movw	r1, #0
    1bd4:	mov	r3, r7
    1bd8:	movt	r0, #65535	; 0xffff
    1bdc:	movt	r1, #0
    1be0:	bl	0 <coda_set_error>
    1be4:	mov	r0, r4
    1be8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
    1bec:	cmp	r0, #0
    1bf0:	beq	1c48 <coda_data_dictionary_get_definition+0x194>
    1bf4:	ldr	r1, [r1, #12]
    1bf8:	cmp	r0, #2
    1bfc:	ldr	r2, [r1]
    1c00:	blt	1c34 <coda_data_dictionary_get_definition+0x180>
    1c04:	ldr	r3, [r2, #4]
    1c08:	mov	r2, #0
    1c0c:	mov	r7, #1
    1c10:	ldr	r6, [r1, r7, lsl #2]
    1c14:	ldr	r6, [r6, #4]
    1c18:	cmp	r6, r3
    1c1c:	movgt	r2, r7
    1c20:	add	r7, r7, #1
    1c24:	movgt	r3, r6
    1c28:	cmp	r0, r7
    1c2c:	bne	1c10 <coda_data_dictionary_get_definition+0x15c>
    1c30:	ldr	r2, [r1, r2, lsl #2]
    1c34:	cmp	r2, #0
    1c38:	movne	r4, #0
    1c3c:	strne	r2, [r8]
    1c40:	mov	r0, r4
    1c44:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
    1c48:	ldr	r2, [r1]
    1c4c:	movw	r0, #65136	; 0xfe70
    1c50:	movw	r1, #0
    1c54:	movt	r0, #65535	; 0xffff
    1c58:	movt	r1, #0
    1c5c:	bl	0 <coda_set_error>
    1c60:	mov	r0, r4
    1c64:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
    1c68:	.word	0x00000000

00001c6c <coda_data_dictionary_get_detection_tree>:
    1c6c:	push	{fp, lr}
    1c70:	mov	fp, sp
    1c74:	ldr	r2, [pc, #28]	; 1c98 <coda_data_dictionary_get_detection_tree+0x2c>
    1c78:	mov	r1, r0
    1c7c:	bl	0 <__aeabi_read_tp>
    1c80:	ldr	r0, [r0, r2]
    1c84:	cmp	r1, #0
    1c88:	movweq	r1, #1
    1c8c:	add	r0, r0, r1, lsl #2
    1c90:	ldr	r0, [r0, #12]
    1c94:	pop	{fp, pc}
    1c98:	.word	0x00000000

00001c9c <coda_data_dictionary_find_definition_for_product>:
    1c9c:	push	{r4, r5, r6, r7, fp, lr}
    1ca0:	add	fp, sp, #16
    1ca4:	sub	sp, sp, #520	; 0x208
    1ca8:	mov	r5, r0
    1cac:	mov	r4, r1
    1cb0:	mov	r0, sp
    1cb4:	mov	r1, r5
    1cb8:	bl	0 <coda_cursor_set_product>
    1cbc:	mov	r1, r0
    1cc0:	mvn	r0, #0
    1cc4:	cmp	r1, #0
    1cc8:	beq	1cd4 <coda_data_dictionary_find_definition_for_product+0x38>
    1ccc:	sub	sp, fp, #16
    1cd0:	pop	{r4, r5, r6, r7, fp, pc}
    1cd4:	ldr	r1, [pc, #44]	; 1d08 <coda_data_dictionary_find_definition_for_product+0x6c>
    1cd8:	bl	0 <__aeabi_read_tp>
    1cdc:	ldr	r0, [r0, r1]
    1ce0:	ldr	r1, [r5, #16]
    1ce4:	mov	r2, r4
    1ce8:	cmp	r1, #0
    1cec:	movweq	r1, #1
    1cf0:	add	r0, r0, r1, lsl #2
    1cf4:	mov	r1, sp
    1cf8:	ldr	r0, [r0, #12]
    1cfc:	bl	0 <coda_evaluate_detection_node>
    1d00:	sub	sp, fp, #16
    1d04:	pop	{r4, r5, r6, r7, fp, pc}
    1d08:	.word	0x00000000

00001d0c <coda_data_dictionary_init>:
    1d0c:	push	{r4, r5, fp, lr}
    1d10:	add	fp, sp, #8
    1d14:	sub	sp, sp, #8
    1d18:	ldr	r5, [pc, #232]	; 1e08 <coda_data_dictionary_init+0xfc>
    1d1c:	bl	0 <__aeabi_read_tp>
    1d20:	ldr	r0, [r0, r5]
    1d24:	cmp	r0, #0
    1d28:	bne	1de8 <coda_data_dictionary_init+0xdc>
    1d2c:	mov	r0, #52	; 0x34
    1d30:	bl	0 <malloc>
    1d34:	cmp	r0, #0
    1d38:	beq	1da4 <coda_data_dictionary_init+0x98>
    1d3c:	mov	r4, r0
    1d40:	vmov.i32	q8, #0	; 0x00000000
    1d44:	mov	r0, #48	; 0x30
    1d48:	mov	r1, r4
    1d4c:	vst1.32	{d16-d17}, [r1], r0
    1d50:	mov	r0, #0
    1d54:	str	r0, [r1]
    1d58:	add	r0, r4, #32
    1d5c:	vst1.32	{d16-d17}, [r0]
    1d60:	add	r0, r4, #16
    1d64:	vst1.32	{d16-d17}, [r0]
    1d68:	mov	r0, #1
    1d6c:	bl	0 <coda_hashtable_new>
    1d70:	cmp	r0, #0
    1d74:	str	r0, [r4, #8]
    1d78:	bne	1dcc <coda_data_dictionary_init+0xc0>
    1d7c:	movw	r1, #0
    1d80:	movw	r2, #0
    1d84:	mvn	r0, #0
    1d88:	movw	r3, #935	; 0x3a7
    1d8c:	movt	r1, #0
    1d90:	movt	r2, #0
    1d94:	bl	0 <coda_set_error>
    1d98:	mov	r0, r4
    1d9c:	bl	1e60 <delete_data_dictionary>
    1da0:	b	1dc8 <coda_data_dictionary_init+0xbc>
    1da4:	movw	r1, #0
    1da8:	movw	r3, #0
    1dac:	mov	r0, #920	; 0x398
    1db0:	mov	r2, #52	; 0x34
    1db4:	str	r0, [sp]
    1db8:	movt	r1, #0
    1dbc:	movt	r3, #0
    1dc0:	mvn	r0, #0
    1dc4:	bl	0 <coda_set_error>
    1dc8:	mov	r4, #0
    1dcc:	bl	0 <__aeabi_read_tp>
    1dd0:	str	r4, [r0, r5]
    1dd4:	mov	r0, #0
    1dd8:	cmp	r4, #0
    1ddc:	mvneq	r0, #0
    1de0:	sub	sp, fp, #8
    1de4:	pop	{r4, r5, fp, pc}
    1de8:	movw	r0, #0
    1dec:	movw	r1, #0
    1df0:	movw	r3, #0
    1df4:	mov	r2, #1200	; 0x4b0
    1df8:	movt	r0, #0
    1dfc:	movt	r1, #0
    1e00:	movt	r3, #0
    1e04:	bl	0 <__assert_fail>
    1e08:	.word	0x00000000

00001e0c <coda_data_dictionary_done>:
    1e0c:	push	{r4, sl, fp, lr}
    1e10:	add	fp, sp, #8
    1e14:	ldr	r4, [pc, #64]	; 1e5c <coda_data_dictionary_done+0x50>
    1e18:	bl	0 <__aeabi_read_tp>
    1e1c:	ldr	r0, [r0, r4]
    1e20:	cmp	r0, #0
    1e24:	beq	1e3c <coda_data_dictionary_done+0x30>
    1e28:	bl	1e60 <delete_data_dictionary>
    1e2c:	mov	r1, #0
    1e30:	bl	0 <__aeabi_read_tp>
    1e34:	str	r1, [r0, r4]
    1e38:	pop	{r4, sl, fp, pc}
    1e3c:	movw	r0, #0
    1e40:	movw	r1, #0
    1e44:	movw	r3, #0
    1e48:	movw	r2, #1213	; 0x4bd
    1e4c:	movt	r0, #0
    1e50:	movt	r1, #0
    1e54:	movt	r3, #0
    1e58:	bl	0 <__assert_fail>
    1e5c:	.word	0x00000000

00001e60 <delete_data_dictionary>:
    1e60:	push	{r4, r5, fp, lr}
    1e64:	add	fp, sp, #8
    1e68:	cmp	r0, #0
    1e6c:	beq	1f6c <delete_data_dictionary+0x10c>
    1e70:	mov	r4, r0
    1e74:	ldr	r0, [r0, #8]
    1e78:	cmp	r0, #0
    1e7c:	beq	1e84 <delete_data_dictionary+0x24>
    1e80:	bl	0 <coda_hashtable_delete>
    1e84:	ldr	r0, [r4, #4]
    1e88:	cmp	r0, #0
    1e8c:	beq	1ec0 <delete_data_dictionary+0x60>
    1e90:	ldr	r1, [r4]
    1e94:	cmp	r1, #1
    1e98:	blt	1ebc <delete_data_dictionary+0x5c>
    1e9c:	mov	r5, #0
    1ea0:	ldr	r0, [r0, r5, lsl #2]
    1ea4:	bl	ee8 <coda_product_class_delete>
    1ea8:	ldr	r1, [r4]
    1eac:	ldr	r0, [r4, #4]
    1eb0:	add	r5, r5, #1
    1eb4:	cmp	r5, r1
    1eb8:	blt	1ea0 <delete_data_dictionary+0x40>
    1ebc:	bl	0 <free>
    1ec0:	ldr	r0, [r4, #12]
    1ec4:	cmp	r0, #0
    1ec8:	beq	1ed0 <delete_data_dictionary+0x70>
    1ecc:	bl	0 <coda_detection_tree_delete>
    1ed0:	ldr	r0, [r4, #16]
    1ed4:	cmp	r0, #0
    1ed8:	beq	1ee0 <delete_data_dictionary+0x80>
    1edc:	bl	0 <coda_detection_tree_delete>
    1ee0:	ldr	r0, [r4, #20]
    1ee4:	cmp	r0, #0
    1ee8:	beq	1ef0 <delete_data_dictionary+0x90>
    1eec:	bl	0 <coda_detection_tree_delete>
    1ef0:	ldr	r0, [r4, #24]
    1ef4:	cmp	r0, #0
    1ef8:	beq	1f00 <delete_data_dictionary+0xa0>
    1efc:	bl	0 <coda_detection_tree_delete>
    1f00:	ldr	r0, [r4, #28]
    1f04:	cmp	r0, #0
    1f08:	beq	1f10 <delete_data_dictionary+0xb0>
    1f0c:	bl	0 <coda_detection_tree_delete>
    1f10:	ldr	r0, [r4, #32]
    1f14:	cmp	r0, #0
    1f18:	beq	1f20 <delete_data_dictionary+0xc0>
    1f1c:	bl	0 <coda_detection_tree_delete>
    1f20:	ldr	r0, [r4, #36]	; 0x24
    1f24:	cmp	r0, #0
    1f28:	beq	1f30 <delete_data_dictionary+0xd0>
    1f2c:	bl	0 <coda_detection_tree_delete>
    1f30:	ldr	r0, [r4, #40]	; 0x28
    1f34:	cmp	r0, #0
    1f38:	beq	1f40 <delete_data_dictionary+0xe0>
    1f3c:	bl	0 <coda_detection_tree_delete>
    1f40:	ldr	r0, [r4, #44]	; 0x2c
    1f44:	cmp	r0, #0
    1f48:	beq	1f50 <delete_data_dictionary+0xf0>
    1f4c:	bl	0 <coda_detection_tree_delete>
    1f50:	ldr	r0, [r4, #48]	; 0x30
    1f54:	cmp	r0, #0
    1f58:	beq	1f60 <delete_data_dictionary+0x100>
    1f5c:	bl	0 <coda_detection_tree_delete>
    1f60:	mov	r0, r4
    1f64:	pop	{r4, r5, fp, lr}
    1f68:	b	0 <free>
    1f6c:	movw	r0, #0
    1f70:	movw	r1, #0
    1f74:	movw	r3, #0
    1f78:	movw	r2, #887	; 0x377
    1f7c:	movt	r0, #0
    1f80:	movt	r1, #0
    1f84:	movt	r3, #0
    1f88:	bl	0 <__assert_fail>
