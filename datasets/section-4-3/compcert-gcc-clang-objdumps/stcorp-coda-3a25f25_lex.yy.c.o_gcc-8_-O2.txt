
../compcert-repos/stcorp-coda-3a25f25/CMakeFiles/coda_static.dir/lex.yy.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <yy_get_previous_state>:
       0:	strd	r4, [sp, #-36]!	; 0xffffffdc
       4:	ldr	r2, [r0, #44]	; 0x2c
       8:	strd	r6, [sp, #8]
       c:	strd	sl, [sp, #24]
      10:	ldr	fp, [r0, #36]	; 0x24
      14:	strd	r8, [sp, #16]
      18:	ldr	sl, [r0, #80]	; 0x50
      1c:	str	lr, [sp, #32]
      20:	cmp	sl, fp
      24:	bcs	ac <yy_get_previous_state+0xac>
      28:	ldr	r7, [pc, #152]	; c8 <yy_get_previous_state+0xc8>
      2c:	movw	r5, #0
      30:	movt	r5, #0
      34:	add	r6, r5, #1952	; 0x7a0
      38:	add	r9, r5, #804	; 0x324
      3c:	movw	r8, #273	; 0x111
      40:	mov	lr, sl
      44:	ldrb	r3, [sl], #1
      48:	lsl	r1, r2, #1
      4c:	cmp	r3, #0
      50:	ldrbne	ip, [r5, r3]
      54:	moveq	ip, #1
      58:	ldr	r3, [pc, #108]	; cc <yy_get_previous_state+0xcc>
      5c:	ldrsh	r3, [r3, r1]
      60:	cmp	r3, #0
      64:	strne	r2, [r0, #64]	; 0x40
      68:	strne	lr, [r0, #68]	; 0x44
      6c:	b	80 <yy_get_previous_state+0x80>
      70:	ldrsh	r2, [r9, r1]
      74:	cmp	r2, r8
      78:	lsl	r1, r2, #1
      7c:	ldrbgt	ip, [lr, #1356]	; 0x54c
      80:	add	lr, r5, ip
      84:	ldrsh	r3, [r7, r1]
      88:	add	r3, r3, ip
      8c:	lsl	r3, r3, #1
      90:	ldrsh	r4, [r6, r3]
      94:	cmp	r4, r2
      98:	bne	70 <yy_get_previous_state+0x70>
      9c:	ldr	r2, [pc, #44]	; d0 <yy_get_previous_state+0xd0>
      a0:	cmp	fp, sl
      a4:	ldrsh	r2, [r2, r3]
      a8:	bne	40 <yy_get_previous_state+0x40>
      ac:	mov	r0, r2
      b0:	ldrd	r4, [sp]
      b4:	ldrd	r6, [sp, #8]
      b8:	ldrd	r8, [sp, #16]
      bc:	ldrd	sl, [sp, #24]
      c0:	add	sp, sp, #32
      c4:	pop	{pc}		; (ldr pc, [sp], #4)
      c8:	.word	0x00000578
      cc:	.word	0x00000100
      d0:	.word	0x00000a5c

000000d4 <yy_fatal_error.isra.0>:
      d4:	movw	r3, #0
      d8:	movt	r3, #0
      dc:	str	r4, [sp, #-8]!
      e0:	mov	r2, r0
      e4:	movw	r1, #0
      e8:	movt	r1, #0
      ec:	ldr	r0, [r3]
      f0:	str	lr, [sp, #4]
      f4:	bl	0 <fprintf>
      f8:	mov	r0, #2
      fc:	bl	0 <exit>

00000100 <coda_expression_ensure_buffer_stack>:
     100:	strd	r4, [sp, #-16]!
     104:	mov	r4, r0
     108:	str	r6, [sp, #8]
     10c:	ldr	r6, [r0, #20]
     110:	str	lr, [sp, #12]
     114:	cmp	r6, #0
     118:	beq	194 <coda_expression_ensure_buffer_stack+0x94>
     11c:	ldr	r1, [r0, #12]
     120:	ldr	r3, [r0, #16]
     124:	sub	r2, r3, #1
     128:	cmp	r1, r2
     12c:	bcs	140 <coda_expression_ensure_buffer_stack+0x40>
     130:	ldrd	r4, [sp]
     134:	ldr	r6, [sp, #8]
     138:	add	sp, sp, #12
     13c:	pop	{pc}		; (ldr pc, [sp], #4)
     140:	add	r5, r3, #8
     144:	mov	r0, r6
     148:	lsl	r1, r5, #2
     14c:	bl	0 <realloc>
     150:	cmp	r0, #0
     154:	str	r0, [r4, #20]
     158:	beq	1b8 <coda_expression_ensure_buffer_stack+0xb8>
     15c:	ldr	r1, [r4, #16]
     160:	mov	r2, #0
     164:	mov	r3, #0
     168:	lsl	r1, r1, #2
     16c:	add	ip, r0, r1
     170:	strd	r2, [r0, r1]
     174:	strd	r2, [ip, #8]
     178:	strd	r2, [ip, #16]
     17c:	strd	r2, [ip, #24]
     180:	str	r5, [r4, #16]
     184:	ldrd	r4, [sp]
     188:	ldr	r6, [sp, #8]
     18c:	add	sp, sp, #12
     190:	pop	{pc}		; (ldr pc, [sp], #4)
     194:	mov	r1, #1
     198:	mov	r0, #4
     19c:	bl	0 <calloc>
     1a0:	cmp	r0, #0
     1a4:	str	r0, [r4, #20]
     1a8:	movne	r3, #1
     1ac:	strne	r6, [r4, #12]
     1b0:	strne	r3, [r4, #16]
     1b4:	bne	130 <coda_expression_ensure_buffer_stack+0x30>
     1b8:	movw	r0, #0
     1bc:	movt	r0, #0
     1c0:	bl	d4 <yy_fatal_error.isra.0>

000001c4 <coda_expression__switch_to_buffer>:
     1c4:	strd	r4, [sp, #-16]!
     1c8:	mov	r4, r1
     1cc:	mov	r5, r0
     1d0:	mov	r0, r1
     1d4:	str	r6, [sp, #8]
     1d8:	str	lr, [sp, #12]
     1dc:	bl	100 <coda_expression_ensure_buffer_stack>
     1e0:	ldr	r3, [r4, #20]
     1e4:	cmp	r3, #0
     1e8:	beq	274 <coda_expression__switch_to_buffer+0xb0>
     1ec:	ldr	r2, [r4, #12]
     1f0:	ldr	r1, [r3, r2, lsl #2]
     1f4:	add	r3, r3, r2, lsl #2
     1f8:	cmp	r1, r5
     1fc:	beq	264 <coda_expression__switch_to_buffer+0xa0>
     200:	cmp	r1, #0
     204:	beq	234 <coda_expression__switch_to_buffer+0x70>
     208:	ldrb	r2, [r4, #24]
     20c:	ldr	r3, [r4, #36]	; 0x24
     210:	strb	r2, [r3]
     214:	ldr	r1, [r4, #12]
     218:	ldr	r2, [r4, #20]
     21c:	ldr	r0, [r4, #28]
     220:	ldr	ip, [r4, #36]	; 0x24
     224:	add	r3, r2, r1, lsl #2
     228:	ldr	r2, [r2, r1, lsl #2]
     22c:	str	ip, [r2, #8]
     230:	str	r0, [r2, #16]
     234:	ldr	r0, [r5]
     238:	mov	r2, #1
     23c:	ldr	r1, [r5, #16]
     240:	str	r5, [r3]
     244:	ldr	r3, [r5, #8]
     248:	str	r0, [r4, #4]
     24c:	str	r1, [r4, #28]
     250:	str	r3, [r4, #36]	; 0x24
     254:	str	r3, [r4, #80]	; 0x50
     258:	ldrb	r3, [r3]
     25c:	strb	r3, [r4, #24]
     260:	str	r2, [r4, #48]	; 0x30
     264:	ldrd	r4, [sp]
     268:	ldr	r6, [sp, #8]
     26c:	add	sp, sp, #12
     270:	pop	{pc}		; (ldr pc, [sp], #4)
     274:	cmp	r5, #0
     278:	beq	264 <coda_expression__switch_to_buffer+0xa0>
     27c:	ldr	r3, [r4, #12]
     280:	lsl	r3, r3, #2
     284:	b	234 <coda_expression__switch_to_buffer+0x70>

00000288 <coda_expression__delete_buffer>:
     288:	str	r4, [sp, #-8]!
     28c:	subs	r4, r0, #0
     290:	str	lr, [sp, #4]
     294:	beq	2e4 <coda_expression__delete_buffer+0x5c>
     298:	ldr	r3, [r1, #20]
     29c:	cmp	r3, #0
     2a0:	beq	2b8 <coda_expression__delete_buffer+0x30>
     2a4:	ldr	r2, [r1, #12]
     2a8:	ldr	r1, [r3, r2, lsl #2]
     2ac:	cmp	r4, r1
     2b0:	moveq	r1, #0
     2b4:	streq	r1, [r3, r2, lsl #2]
     2b8:	ldr	r3, [r4, #20]
     2bc:	cmp	r3, #0
     2c0:	bne	2d8 <coda_expression__delete_buffer+0x50>
     2c4:	mov	r0, r4
     2c8:	ldr	r4, [sp]
     2cc:	ldr	lr, [sp, #4]
     2d0:	add	sp, sp, #8
     2d4:	b	0 <free>
     2d8:	ldr	r0, [r4, #4]
     2dc:	bl	0 <free>
     2e0:	b	2c4 <coda_expression__delete_buffer+0x3c>
     2e4:	ldr	r4, [sp]
     2e8:	add	sp, sp, #4
     2ec:	pop	{pc}		; (ldr pc, [sp], #4)

000002f0 <coda_expression__flush_buffer>:
     2f0:	cmp	r0, #0
     2f4:	beq	340 <coda_expression__flush_buffer+0x50>
     2f8:	ldr	ip, [r0, #4]
     2fc:	mov	r3, #0
     300:	mov	r2, #1
     304:	str	r3, [r0, #16]
     308:	strb	r3, [ip]
     30c:	ldr	ip, [r0, #4]
     310:	strb	r3, [ip, #1]
     314:	ldr	ip, [r1, #20]
     318:	str	r2, [r0, #28]
     31c:	ldr	r2, [r0, #4]
     320:	cmp	ip, r3
     324:	str	r2, [r0, #8]
     328:	str	r3, [r0, #44]	; 0x2c
     32c:	beq	340 <coda_expression__flush_buffer+0x50>
     330:	ldr	r3, [r1, #12]
     334:	ldr	r3, [ip, r3, lsl #2]
     338:	cmp	r0, r3
     33c:	beq	344 <coda_expression__flush_buffer+0x54>
     340:	bx	lr
     344:	ldr	ip, [r0]
     348:	ldr	r3, [r0, #16]
     34c:	str	ip, [r1, #4]
     350:	str	r2, [r1, #36]	; 0x24
     354:	str	r3, [r1, #28]
     358:	str	r2, [r1, #80]	; 0x50
     35c:	ldrb	r3, [r2]
     360:	strb	r3, [r1, #24]
     364:	bx	lr

00000368 <coda_expression__init_buffer>:
     368:	strd	r4, [sp, #-24]!	; 0xffffffe8
     36c:	mov	r5, r2
     370:	mov	r4, r0
     374:	strd	r6, [sp, #8]
     378:	str	r8, [sp, #16]
     37c:	mov	r8, r1
     380:	str	lr, [sp, #20]
     384:	bl	0 <__errno_location>
     388:	mov	r6, r0
     38c:	mov	r1, r5
     390:	mov	r0, r4
     394:	ldr	r7, [r6]
     398:	bl	2f0 <coda_expression__flush_buffer>
     39c:	ldr	r3, [r5, #20]
     3a0:	mov	r2, #1
     3a4:	str	r8, [r4]
     3a8:	str	r2, [r4, #40]	; 0x28
     3ac:	cmp	r3, #0
     3b0:	beq	3c4 <coda_expression__init_buffer+0x5c>
     3b4:	ldr	r2, [r5, #12]
     3b8:	ldr	r3, [r3, r2, lsl #2]
     3bc:	cmp	r4, r3
     3c0:	beq	3d0 <coda_expression__init_buffer+0x68>
     3c4:	mov	r2, #1
     3c8:	mov	r3, #0
     3cc:	strd	r2, [r4, #32]
     3d0:	mov	r3, #1
     3d4:	ldr	r8, [sp, #16]
     3d8:	str	r3, [r4, #24]
     3dc:	str	r7, [r6]
     3e0:	ldrd	r4, [sp]
     3e4:	ldrd	r6, [sp, #8]
     3e8:	add	sp, sp, #20
     3ec:	pop	{pc}		; (ldr pc, [sp], #4)

000003f0 <coda_expression__create_buffer>:
     3f0:	strd	r4, [sp, #-24]!	; 0xffffffe8
     3f4:	mov	r5, r1
     3f8:	strd	r6, [sp, #8]
     3fc:	mov	r6, r0
     400:	mov	r0, #48	; 0x30
     404:	mov	r7, r2
     408:	str	r8, [sp, #16]
     40c:	str	lr, [sp, #20]
     410:	bl	0 <malloc>
     414:	subs	r4, r0, #0
     418:	beq	464 <coda_expression__create_buffer+0x74>
     41c:	add	r0, r5, #2
     420:	str	r5, [r4, #12]
     424:	bl	0 <malloc>
     428:	cmp	r0, #0
     42c:	str	r0, [r4, #4]
     430:	beq	464 <coda_expression__create_buffer+0x74>
     434:	mov	r3, #1
     438:	mov	r0, r4
     43c:	mov	r2, r7
     440:	mov	r1, r6
     444:	str	r3, [r4, #20]
     448:	bl	368 <coda_expression__init_buffer>
     44c:	mov	r0, r4
     450:	ldrd	r4, [sp]
     454:	ldrd	r6, [sp, #8]
     458:	ldr	r8, [sp, #16]
     45c:	add	sp, sp, #20
     460:	pop	{pc}		; (ldr pc, [sp], #4)
     464:	movw	r0, #0
     468:	movt	r0, #0
     46c:	bl	d4 <yy_fatal_error.isra.0>

00000470 <coda_expression_restart>:
     470:	ldr	r3, [r1, #20]
     474:	strd	r4, [sp, #-24]!	; 0xffffffe8
     478:	mov	r4, r1
     47c:	mov	r5, r0
     480:	strd	r6, [sp, #8]
     484:	str	r8, [sp, #16]
     488:	str	lr, [sp, #20]
     48c:	cmp	r3, #0
     490:	beq	4f8 <coda_expression_restart+0x88>
     494:	ldr	r2, [r1, #12]
     498:	ldr	r3, [r3, r2, lsl #2]
     49c:	cmp	r3, #0
     4a0:	beq	4f8 <coda_expression_restart+0x88>
     4a4:	mov	r1, r5
     4a8:	mov	r2, r4
     4ac:	mov	r0, r3
     4b0:	bl	368 <coda_expression__init_buffer>
     4b4:	ldr	r2, [r4, #12]
     4b8:	ldr	r3, [r4, #20]
     4bc:	ldr	r2, [r3, r2, lsl #2]
     4c0:	ldr	r1, [r2]
     4c4:	ldr	r3, [r2, #8]
     4c8:	ldr	r2, [r2, #16]
     4cc:	str	r1, [r4, #4]
     4d0:	str	r2, [r4, #28]
     4d4:	str	r3, [r4, #36]	; 0x24
     4d8:	str	r3, [r4, #80]	; 0x50
     4dc:	ldrb	r3, [r3]
     4e0:	strb	r3, [r4, #24]
     4e4:	ldrd	r4, [sp]
     4e8:	ldrd	r6, [sp, #8]
     4ec:	ldr	r8, [sp, #16]
     4f0:	add	sp, sp, #20
     4f4:	pop	{pc}		; (ldr pc, [sp], #4)
     4f8:	mov	r0, r4
     4fc:	bl	100 <coda_expression_ensure_buffer_stack>
     500:	mov	r2, r4
     504:	mov	r1, #16384	; 0x4000
     508:	ldr	r0, [r4, #4]
     50c:	ldr	r7, [r4, #12]
     510:	ldr	r6, [r4, #20]
     514:	bl	3f0 <coda_expression__create_buffer>
     518:	ldr	r3, [r4, #20]
     51c:	str	r0, [r6, r7, lsl #2]
     520:	cmp	r3, #0
     524:	ldrne	r2, [r4, #12]
     528:	ldrne	r3, [r3, r2, lsl #2]
     52c:	b	4a4 <coda_expression_restart+0x34>

00000530 <coda_expression_lex>:
     530:	ldr	r3, [r1, #40]	; 0x28
     534:	strd	r4, [sp, #-36]!	; 0xffffffdc
     538:	strd	r6, [sp, #8]
     53c:	mov	r6, r1
     540:	strd	r8, [sp, #16]
     544:	strd	sl, [sp, #24]
     548:	cmp	r3, #0
     54c:	str	lr, [sp, #32]
     550:	sub	sp, sp, #36	; 0x24
     554:	str	r0, [r1, #92]	; 0x5c
     558:	beq	7a4 <coda_expression_lex+0x274>
     55c:	ldrb	lr, [r1, #24]
     560:	ldr	fp, [r1, #36]	; 0x24
     564:	movw	r9, #0
     568:	movt	r9, #0
     56c:	ldr	r4, [pc, #3056]	; 1164 <coda_expression_lex+0xc34>
     570:	mov	r3, r9
     574:	add	r5, r9, #256	; 0x100
     578:	add	sl, r9, #1952	; 0x7a0
     57c:	add	r8, r9, #804	; 0x324
     580:	movw	r7, #273	; 0x111
     584:	mov	r9, fp
     588:	mov	fp, r6
     58c:	mov	r6, r3
     590:	mov	r3, r6
     594:	mov	r6, r9
     598:	mov	r9, fp
     59c:	mov	fp, r3
     5a0:	strb	lr, [r6]
     5a4:	ldr	r2, [r9, #44]	; 0x2c
     5a8:	str	r6, [sp, #4]
     5ac:	lsl	r1, r2, #1
     5b0:	ldrsh	r3, [r4, r1]
     5b4:	ldrsh	ip, [r5, r1]
     5b8:	ldrb	r0, [fp, lr]
     5bc:	cmp	ip, #0
     5c0:	strne	r2, [r9, #64]	; 0x40
     5c4:	strne	r6, [r9, #68]	; 0x44
     5c8:	b	5e4 <coda_expression_lex+0xb4>
     5cc:	ldrsh	r2, [r8, r1]
     5d0:	cmp	r2, r7
     5d4:	lsl	r1, r2, #1
     5d8:	addgt	r0, fp, r0
     5dc:	ldrbgt	r0, [r0, #1356]	; 0x54c
     5e0:	ldrsh	r3, [r4, r1]
     5e4:	add	r3, r3, r0
     5e8:	lsl	r3, r3, #1
     5ec:	ldrsh	ip, [sl, r3]
     5f0:	cmp	ip, r2
     5f4:	bne	5cc <coda_expression_lex+0x9c>
     5f8:	ldr	r2, [pc, #2920]	; 1168 <coda_expression_lex+0xc38>
     5fc:	movw	r0, #307	; 0x133
     600:	add	r6, r6, #1
     604:	ldrsh	r2, [r2, r3]
     608:	lsl	r1, r2, #1
     60c:	ldrsh	r3, [r4, r1]
     610:	cmp	r3, r0
     614:	beq	620 <coda_expression_lex+0xf0>
     618:	ldrb	lr, [r6]
     61c:	b	5b4 <coda_expression_lex+0x84>
     620:	str	fp, [sp, #8]
     624:	ldrsh	r3, [r5, r1]
     628:	cmp	r3, #0
     62c:	bne	640 <coda_expression_lex+0x110>
     630:	ldr	r3, [r9, #64]	; 0x40
     634:	ldr	r6, [r9, #68]	; 0x44
     638:	lsl	r3, r3, #1
     63c:	ldrsh	r3, [r5, r3]
     640:	ldr	r2, [sp, #4]
     644:	sub	r1, r6, r2
     648:	str	r1, [r9, #32]
     64c:	str	r2, [r9, #80]	; 0x50
     650:	mov	r2, #0
     654:	ldrb	r1, [r6]
     658:	strb	r1, [r9, #24]
     65c:	strb	r2, [r6]
     660:	str	r6, [r9, #36]	; 0x24
     664:	cmp	r3, #76	; 0x4c
     668:	ldrls	pc, [pc, r3, lsl #2]
     66c:	b	1158 <coda_expression_lex+0xc28>
     670:	.word	0x00000888
     674:	.word	0x00000c2c
     678:	.word	0x00000c24
     67c:	.word	0x00000c1c
     680:	.word	0x00000c14
     684:	.word	0x00000c0c
     688:	.word	0x00000c04
     68c:	.word	0x00000bfc
     690:	.word	0x00000bf4
     694:	.word	0x00000bec
     698:	.word	0x00000be4
     69c:	.word	0x00000bdc
     6a0:	.word	0x00000bd4
     6a4:	.word	0x00000c70
     6a8:	.word	0x000009b4
     6ac:	.word	0x000009ac
     6b0:	.word	0x000009a4
     6b4:	.word	0x0000099c
     6b8:	.word	0x00000994
     6bc:	.word	0x0000098c
     6c0:	.word	0x00000984
     6c4:	.word	0x0000097c
     6c8:	.word	0x00000974
     6cc:	.word	0x0000096c
     6d0:	.word	0x00000964
     6d4:	.word	0x0000095c
     6d8:	.word	0x00000954
     6dc:	.word	0x0000094c
     6e0:	.word	0x00000944
     6e4:	.word	0x0000093c
     6e8:	.word	0x00000934
     6ec:	.word	0x0000092c
     6f0:	.word	0x00000924
     6f4:	.word	0x0000091c
     6f8:	.word	0x00000914
     6fc:	.word	0x0000090c
     700:	.word	0x00000904
     704:	.word	0x000008fc
     708:	.word	0x000008f4
     70c:	.word	0x000008ec
     710:	.word	0x000008e4
     714:	.word	0x000008dc
     718:	.word	0x000008d4
     71c:	.word	0x000008cc
     720:	.word	0x000008c4
     724:	.word	0x000008a0
     728:	.word	0x00000a34
     72c:	.word	0x00000a2c
     730:	.word	0x00000a24
     734:	.word	0x00000a1c
     738:	.word	0x00000a14
     73c:	.word	0x00000a0c
     740:	.word	0x00000a04
     744:	.word	0x000009fc
     748:	.word	0x000009f4
     74c:	.word	0x000009ec
     750:	.word	0x000009e4
     754:	.word	0x000009dc
     758:	.word	0x000009d4
     75c:	.word	0x000009cc
     760:	.word	0x000009c4
     764:	.word	0x000009bc
     768:	.word	0x00000a94
     76c:	.word	0x00000a8c
     770:	.word	0x00000a84
     774:	.word	0x00000a7c
     778:	.word	0x00000a74
     77c:	.word	0x00000a6c
     780:	.word	0x00000a54
     784:	.word	0x00000a3c
     788:	.word	0x00000ad0
     78c:	.word	0x00000ab8
     790:	.word	0x00000aa8
     794:	.word	0x00000a9c
     798:	.word	0x00000bac
     79c:	.word	0x00000ae8
     7a0:	.word	0x00000c68
     7a4:	ldr	r2, [r1, #44]	; 0x2c
     7a8:	mov	r3, #1
     7ac:	str	r3, [r1, #40]	; 0x28
     7b0:	cmp	r2, #0
     7b4:	streq	r3, [r1, #44]	; 0x2c
     7b8:	ldr	r3, [r1, #4]
     7bc:	cmp	r3, #0
     7c0:	beq	868 <coda_expression_lex+0x338>
     7c4:	ldr	r3, [r6, #8]
     7c8:	cmp	r3, #0
     7cc:	beq	848 <coda_expression_lex+0x318>
     7d0:	ldr	r3, [r6, #20]
     7d4:	cmp	r3, #0
     7d8:	beq	814 <coda_expression_lex+0x2e4>
     7dc:	ldr	r2, [r6, #12]
     7e0:	ldr	r3, [r3, r2, lsl #2]
     7e4:	cmp	r3, #0
     7e8:	beq	814 <coda_expression_lex+0x2e4>
     7ec:	ldr	r2, [r3]
     7f0:	ldr	fp, [r3, #8]
     7f4:	ldr	r3, [r3, #16]
     7f8:	str	r2, [r6, #4]
     7fc:	str	r3, [r6, #28]
     800:	str	fp, [r6, #36]	; 0x24
     804:	str	fp, [r6, #80]	; 0x50
     808:	ldrb	lr, [fp]
     80c:	strb	lr, [r6, #24]
     810:	b	564 <coda_expression_lex+0x34>
     814:	mov	r0, r6
     818:	bl	100 <coda_expression_ensure_buffer_stack>
     81c:	mov	r2, r6
     820:	mov	r1, #16384	; 0x4000
     824:	ldr	r0, [r6, #4]
     828:	ldr	r5, [r6, #12]
     82c:	ldr	r4, [r6, #20]
     830:	bl	3f0 <coda_expression__create_buffer>
     834:	ldr	r2, [r6, #12]
     838:	ldr	r3, [r6, #20]
     83c:	str	r0, [r4, r5, lsl #2]
     840:	ldr	r3, [r3, r2, lsl #2]
     844:	b	7ec <coda_expression_lex+0x2bc>
     848:	movw	r3, #0
     84c:	movt	r3, #0
     850:	ldr	r3, [r3]
     854:	str	r3, [r6, #8]
     858:	ldr	r3, [r6, #20]
     85c:	cmp	r3, #0
     860:	bne	7dc <coda_expression_lex+0x2ac>
     864:	b	814 <coda_expression_lex+0x2e4>
     868:	movw	r3, #0
     86c:	movt	r3, #0
     870:	ldr	r3, [r3]
     874:	str	r3, [r1, #4]
     878:	ldr	r3, [r6, #8]
     87c:	cmp	r3, #0
     880:	bne	7d0 <coda_expression_lex+0x2a0>
     884:	b	848 <coda_expression_lex+0x318>
     888:	ldrb	r3, [r9, #24]
     88c:	strb	r3, [r6]
     890:	ldr	r0, [r9, #64]	; 0x40
     894:	ldr	r6, [r9, #68]	; 0x44
     898:	lsl	r1, r0, #1
     89c:	b	624 <coda_expression_lex+0xf4>
     8a0:	movw	r3, #307	; 0x133
     8a4:	mov	r0, r3
     8a8:	add	sp, sp, #36	; 0x24
     8ac:	ldrd	r4, [sp]
     8b0:	ldrd	r6, [sp, #8]
     8b4:	ldrd	r8, [sp, #16]
     8b8:	ldrd	sl, [sp, #24]
     8bc:	add	sp, sp, #32
     8c0:	pop	{pc}		; (ldr pc, [sp], #4)
     8c4:	movw	r3, #306	; 0x132
     8c8:	b	8a4 <coda_expression_lex+0x374>
     8cc:	movw	r3, #305	; 0x131
     8d0:	b	8a4 <coda_expression_lex+0x374>
     8d4:	mov	r3, #304	; 0x130
     8d8:	b	8a4 <coda_expression_lex+0x374>
     8dc:	movw	r3, #303	; 0x12f
     8e0:	b	8a4 <coda_expression_lex+0x374>
     8e4:	movw	r3, #302	; 0x12e
     8e8:	b	8a4 <coda_expression_lex+0x374>
     8ec:	movw	r3, #301	; 0x12d
     8f0:	b	8a4 <coda_expression_lex+0x374>
     8f4:	mov	r3, #300	; 0x12c
     8f8:	b	8a4 <coda_expression_lex+0x374>
     8fc:	movw	r3, #299	; 0x12b
     900:	b	8a4 <coda_expression_lex+0x374>
     904:	movw	r3, #298	; 0x12a
     908:	b	8a4 <coda_expression_lex+0x374>
     90c:	movw	r3, #297	; 0x129
     910:	b	8a4 <coda_expression_lex+0x374>
     914:	mov	r3, #296	; 0x128
     918:	b	8a4 <coda_expression_lex+0x374>
     91c:	movw	r3, #295	; 0x127
     920:	b	8a4 <coda_expression_lex+0x374>
     924:	movw	r3, #294	; 0x126
     928:	b	8a4 <coda_expression_lex+0x374>
     92c:	movw	r3, #293	; 0x125
     930:	b	8a4 <coda_expression_lex+0x374>
     934:	mov	r3, #292	; 0x124
     938:	b	8a4 <coda_expression_lex+0x374>
     93c:	movw	r3, #291	; 0x123
     940:	b	8a4 <coda_expression_lex+0x374>
     944:	movw	r3, #290	; 0x122
     948:	b	8a4 <coda_expression_lex+0x374>
     94c:	movw	r3, #289	; 0x121
     950:	b	8a4 <coda_expression_lex+0x374>
     954:	mov	r3, #288	; 0x120
     958:	b	8a4 <coda_expression_lex+0x374>
     95c:	movw	r3, #287	; 0x11f
     960:	b	8a4 <coda_expression_lex+0x374>
     964:	movw	r3, #286	; 0x11e
     968:	b	8a4 <coda_expression_lex+0x374>
     96c:	movw	r3, #285	; 0x11d
     970:	b	8a4 <coda_expression_lex+0x374>
     974:	mov	r3, #284	; 0x11c
     978:	b	8a4 <coda_expression_lex+0x374>
     97c:	movw	r3, #283	; 0x11b
     980:	b	8a4 <coda_expression_lex+0x374>
     984:	movw	r3, #282	; 0x11a
     988:	b	8a4 <coda_expression_lex+0x374>
     98c:	movw	r3, #281	; 0x119
     990:	b	8a4 <coda_expression_lex+0x374>
     994:	mov	r3, #280	; 0x118
     998:	b	8a4 <coda_expression_lex+0x374>
     99c:	movw	r3, #279	; 0x117
     9a0:	b	8a4 <coda_expression_lex+0x374>
     9a4:	movw	r3, #278	; 0x116
     9a8:	b	8a4 <coda_expression_lex+0x374>
     9ac:	movw	r3, #277	; 0x115
     9b0:	b	8a4 <coda_expression_lex+0x374>
     9b4:	mov	r3, #276	; 0x114
     9b8:	b	8a4 <coda_expression_lex+0x374>
     9bc:	movw	r3, #323	; 0x143
     9c0:	b	8a4 <coda_expression_lex+0x374>
     9c4:	movw	r3, #322	; 0x142
     9c8:	b	8a4 <coda_expression_lex+0x374>
     9cc:	movw	r3, #321	; 0x141
     9d0:	b	8a4 <coda_expression_lex+0x374>
     9d4:	mov	r3, #320	; 0x140
     9d8:	b	8a4 <coda_expression_lex+0x374>
     9dc:	movw	r3, #319	; 0x13f
     9e0:	b	8a4 <coda_expression_lex+0x374>
     9e4:	movw	r3, #318	; 0x13e
     9e8:	b	8a4 <coda_expression_lex+0x374>
     9ec:	movw	r3, #317	; 0x13d
     9f0:	b	8a4 <coda_expression_lex+0x374>
     9f4:	mov	r3, #316	; 0x13c
     9f8:	b	8a4 <coda_expression_lex+0x374>
     9fc:	movw	r3, #315	; 0x13b
     a00:	b	8a4 <coda_expression_lex+0x374>
     a04:	movw	r3, #314	; 0x13a
     a08:	b	8a4 <coda_expression_lex+0x374>
     a0c:	movw	r3, #313	; 0x139
     a10:	b	8a4 <coda_expression_lex+0x374>
     a14:	mov	r3, #312	; 0x138
     a18:	b	8a4 <coda_expression_lex+0x374>
     a1c:	movw	r3, #311	; 0x137
     a20:	b	8a4 <coda_expression_lex+0x374>
     a24:	movw	r3, #310	; 0x136
     a28:	b	8a4 <coda_expression_lex+0x374>
     a2c:	movw	r3, #309	; 0x135
     a30:	b	8a4 <coda_expression_lex+0x374>
     a34:	mov	r3, #308	; 0x134
     a38:	b	8a4 <coda_expression_lex+0x374>
     a3c:	ldr	r0, [r9, #80]	; 0x50
     a40:	ldr	r4, [r9, #92]	; 0x5c
     a44:	bl	0 <strdup>
     a48:	movw	r3, #261	; 0x105
     a4c:	str	r0, [r4]
     a50:	b	8a4 <coda_expression_lex+0x374>
     a54:	ldr	r0, [r9, #80]	; 0x50
     a58:	ldr	r4, [r9, #92]	; 0x5c
     a5c:	bl	0 <strdup>
     a60:	movw	r3, #262	; 0x106
     a64:	str	r0, [r4]
     a68:	b	8a4 <coda_expression_lex+0x374>
     a6c:	movw	r3, #329	; 0x149
     a70:	b	8a4 <coda_expression_lex+0x374>
     a74:	mov	r3, #328	; 0x148
     a78:	b	8a4 <coda_expression_lex+0x374>
     a7c:	movw	r3, #327	; 0x147
     a80:	b	8a4 <coda_expression_lex+0x374>
     a84:	movw	r3, #326	; 0x146
     a88:	b	8a4 <coda_expression_lex+0x374>
     a8c:	movw	r3, #325	; 0x145
     a90:	b	8a4 <coda_expression_lex+0x374>
     a94:	mov	r3, #324	; 0x144
     a98:	b	8a4 <coda_expression_lex+0x374>
     a9c:	ldr	r3, [r9, #80]	; 0x50
     aa0:	ldrb	r3, [r3]
     aa4:	b	8a4 <coda_expression_lex+0x374>
     aa8:	ldrb	lr, [r9, #24]
     aac:	ldr	fp, [sp, #8]
     ab0:	ldr	r6, [r9, #36]	; 0x24
     ab4:	b	5a0 <coda_expression_lex+0x70>
     ab8:	ldr	r0, [r9, #80]	; 0x50
     abc:	ldr	r4, [r9, #92]	; 0x5c
     ac0:	bl	0 <strdup>
     ac4:	movw	r3, #259	; 0x103
     ac8:	str	r0, [r4]
     acc:	b	8a4 <coda_expression_lex+0x374>
     ad0:	ldr	r0, [r9, #80]	; 0x50
     ad4:	ldr	r4, [r9, #92]	; 0x5c
     ad8:	bl	0 <strdup>
     adc:	movw	r3, #258	; 0x102
     ae0:	str	r0, [r4]
     ae4:	b	8a4 <coda_expression_lex+0x374>
     ae8:	ldrb	r2, [r9, #24]
     aec:	ldr	r3, [r9, #80]	; 0x50
     af0:	strb	r2, [r6]
     af4:	ldr	lr, [r9, #12]
     af8:	sub	r3, r6, r3
     afc:	ldr	r1, [r9, #20]
     b00:	sub	r3, r3, #1
     b04:	str	r3, [sp, #20]
     b08:	ldr	r2, [r1, lr, lsl #2]
     b0c:	ldr	r3, [r2, #44]	; 0x2c
     b10:	cmp	r3, #0
     b14:	beq	e38 <coda_expression_lex+0x908>
     b18:	ldr	r3, [r9, #28]
     b1c:	ldr	r0, [r2, #4]
     b20:	ldr	ip, [r9, #36]	; 0x24
     b24:	str	r0, [sp, #16]
     b28:	add	r0, r0, r3
     b2c:	mov	fp, ip
     b30:	ldr	ip, [r9, #80]	; 0x50
     b34:	str	r0, [sp, #24]
     b38:	mov	r0, fp
     b3c:	str	fp, [sp, #12]
     b40:	ldr	fp, [sp, #24]
     b44:	cmp	r0, fp
     b48:	mov	r0, ip
     b4c:	bls	e54 <coda_expression_lex+0x924>
     b50:	ldr	fp, [sp, #16]
     b54:	add	r3, r3, #1
     b58:	add	r3, fp, r3
     b5c:	ldr	fp, [sp, #12]
     b60:	cmp	fp, r3
     b64:	bhi	fd4 <coda_expression_lex+0xaa4>
     b68:	ldr	r3, [r2, #40]	; 0x28
     b6c:	ldr	r2, [sp, #12]
     b70:	cmp	r3, #0
     b74:	sub	r2, r2, ip
     b78:	str	r2, [sp, #28]
     b7c:	bne	c78 <coda_expression_lex+0x748>
     b80:	cmp	r2, #1
     b84:	bne	ef4 <coda_expression_lex+0x9c4>
     b88:	ldr	r3, [r9, #44]	; 0x2c
     b8c:	mov	r2, #0
     b90:	str	ip, [r9, #36]	; 0x24
     b94:	str	r2, [r9, #48]	; 0x30
     b98:	sub	r3, r3, #1
     b9c:	add	r3, r3, r3, lsr #31
     ba0:	asr	r3, r3, #1
     ba4:	add	r3, r3, #76	; 0x4c
     ba8:	b	664 <coda_expression_lex+0x134>
     bac:	mov	r2, #1
     bb0:	ldr	r3, [r9, #8]
     bb4:	mov	fp, r9
     bb8:	ldr	r1, [r9, #32]
     bbc:	ldr	r0, [r9, #80]	; 0x50
     bc0:	ldr	r6, [sp, #8]
     bc4:	bl	0 <fwrite>
     bc8:	ldrb	lr, [r9, #24]
     bcc:	ldr	r9, [r9, #36]	; 0x24
     bd0:	b	590 <coda_expression_lex+0x60>
     bd4:	movw	r3, #274	; 0x112
     bd8:	b	8a4 <coda_expression_lex+0x374>
     bdc:	movw	r3, #273	; 0x111
     be0:	b	8a4 <coda_expression_lex+0x374>
     be4:	movw	r3, #265	; 0x109
     be8:	b	8a4 <coda_expression_lex+0x374>
     bec:	mov	r3, #264	; 0x108
     bf0:	b	8a4 <coda_expression_lex+0x374>
     bf4:	movw	r3, #263	; 0x107
     bf8:	b	8a4 <coda_expression_lex+0x374>
     bfc:	movw	r3, #271	; 0x10f
     c00:	b	8a4 <coda_expression_lex+0x374>
     c04:	movw	r3, #270	; 0x10e
     c08:	b	8a4 <coda_expression_lex+0x374>
     c0c:	movw	r3, #269	; 0x10d
     c10:	b	8a4 <coda_expression_lex+0x374>
     c14:	mov	r3, #268	; 0x10c
     c18:	b	8a4 <coda_expression_lex+0x374>
     c1c:	movw	r3, #267	; 0x10b
     c20:	b	8a4 <coda_expression_lex+0x374>
     c24:	movw	r3, #266	; 0x10a
     c28:	b	8a4 <coda_expression_lex+0x374>
     c2c:	ldr	r4, [r9, #32]
     c30:	ldr	r5, [r9, #92]	; 0x5c
     c34:	sub	r0, r4, #1
     c38:	bl	0 <malloc>
     c3c:	ldr	r1, [r9, #80]	; 0x50
     c40:	sub	r2, r4, #2
     c44:	str	r0, [r5]
     c48:	add	r1, r1, #1
     c4c:	bl	0 <memcpy>
     c50:	ldr	r2, [r5]
     c54:	mov	r1, #0
     c58:	mov	r3, #260	; 0x104
     c5c:	add	r2, r2, r4
     c60:	strb	r1, [r2, #-2]
     c64:	b	8a4 <coda_expression_lex+0x374>
     c68:	mov	r3, #0
     c6c:	b	8a4 <coda_expression_lex+0x374>
     c70:	movw	r3, #275	; 0x113
     c74:	b	8a4 <coda_expression_lex+0x374>
     c78:	ldr	r3, [sp, #28]
     c7c:	sub	fp, r3, #1
     c80:	cmp	fp, #0
     c84:	ble	cac <coda_expression_lex+0x77c>
     c88:	ldr	r3, [sp, #16]
     c8c:	add	r2, ip, fp
     c90:	sub	r3, r3, #1
     c94:	ldrb	r1, [r0], #1
     c98:	cmp	r0, r2
     c9c:	strb	r1, [r3, #1]!
     ca0:	bne	c94 <coda_expression_lex+0x764>
     ca4:	ldr	lr, [r9, #12]
     ca8:	ldr	r1, [r9, #20]
     cac:	str	r1, [sp, #16]
     cb0:	ldr	r3, [r1, lr, lsl #2]
     cb4:	ldr	r2, [r3, #44]	; 0x2c
     cb8:	cmp	r2, #2
     cbc:	beq	f18 <coda_expression_lex+0x9e8>
     cc0:	ldr	r1, [r3, #12]
     cc4:	sub	r1, r1, fp
     cc8:	sub	r1, r1, #1
     ccc:	cmp	r1, #0
     cd0:	bgt	d84 <coda_expression_lex+0x854>
     cd4:	str	r6, [sp, #12]
     cd8:	mov	r6, r3
     cdc:	mov	r3, fp
     ce0:	ldr	r2, [r9, #36]	; 0x24
     ce4:	b	d4c <coda_expression_lex+0x81c>
     ce8:	ldr	r1, [r6, #12]
     cec:	cmp	r1, #0
     cf0:	lslgt	r1, r1, #1
     cf4:	bgt	d04 <coda_expression_lex+0x7d4>
     cf8:	add	r2, r1, #7
     cfc:	movge	r2, r1
     d00:	add	r1, r1, r2, asr #3
     d04:	str	r1, [r6, #12]
     d08:	add	r1, r1, #2
     d0c:	str	r3, [sp, #16]
     d10:	bl	0 <realloc>
     d14:	cmp	r0, #0
     d18:	str	r0, [r6, #4]
     d1c:	ldr	r3, [sp, #16]
     d20:	beq	d68 <coda_expression_lex+0x838>
     d24:	add	r2, r0, fp
     d28:	ldr	r1, [r9, #12]
     d2c:	ldr	r0, [r9, #20]
     d30:	ldr	r6, [r0, r1, lsl #2]
     d34:	ldr	r1, [r6, #12]
     d38:	str	r2, [r9, #36]	; 0x24
     d3c:	sub	r1, r1, r3
     d40:	sub	r1, r1, #1
     d44:	cmp	r1, #0
     d48:	bgt	d74 <coda_expression_lex+0x844>
     d4c:	ldr	r0, [r6, #4]
     d50:	ldr	r1, [r6, #20]
     d54:	sub	fp, r2, r0
     d58:	cmp	r1, #0
     d5c:	bne	ce8 <coda_expression_lex+0x7b8>
     d60:	mov	r3, r6
     d64:	str	r1, [r3, #4]
     d68:	movw	r0, #0
     d6c:	movt	r0, #0
     d70:	bl	d4 <yy_fatal_error.isra.0>
     d74:	mov	fp, r3
     d78:	mov	r3, r6
     d7c:	ldr	r6, [sp, #12]
     d80:	str	r0, [sp, #16]
     d84:	ldr	r3, [r3, #24]
     d88:	cmp	r1, #8192	; 0x2000
     d8c:	movlt	r2, r1
     d90:	movge	r2, #8192	; 0x2000
     d94:	cmp	r3, #0
     d98:	str	r3, [sp, #12]
     d9c:	str	r2, [sp, #24]
     da0:	beq	10b8 <coda_expression_lex+0xb88>
     da4:	ldr	r3, [sp, #28]
     da8:	str	r6, [sp, #12]
     dac:	str	fp, [sp, #16]
     db0:	sub	r2, r3, #2
     db4:	mov	r3, #0
     db8:	mov	r6, r3
     dbc:	mov	fp, r2
     dc0:	ldr	r0, [r9, #4]
     dc4:	bl	0 <getc>
     dc8:	cmn	r0, #1
     dcc:	beq	1088 <coda_expression_lex+0xb58>
     dd0:	ldr	lr, [r9, #12]
     dd4:	add	r6, r6, #1
     dd8:	cmp	r0, #10
     ddc:	add	r1, fp, r6
     de0:	ldr	ip, [r9, #20]
     de4:	ldr	ip, [ip, lr, lsl #2]
     de8:	ldr	ip, [ip, #4]
     dec:	add	lr, ip, r1
     df0:	beq	1074 <coda_expression_lex+0xb44>
     df4:	ldr	r3, [sp, #24]
     df8:	strb	r0, [ip, r1]
     dfc:	cmp	r3, r6
     e00:	bne	dc0 <coda_expression_lex+0x890>
     e04:	mov	r3, r6
     e08:	ldr	r6, [sp, #12]
     e0c:	ldr	fp, [sp, #16]
     e10:	str	r3, [r9, #28]
     e14:	ldr	lr, [r9, #12]
     e18:	cmp	r3, #0
     e1c:	ldr	r1, [r9, #20]
     e20:	ldr	r2, [r1, lr, lsl #2]
     e24:	movne	r1, #0
     e28:	strne	r1, [sp, #12]
     e2c:	str	r3, [r2, #16]
     e30:	bne	f44 <coda_expression_lex+0xa14>
     e34:	b	f24 <coda_expression_lex+0x9f4>
     e38:	ldr	r0, [r9, #4]
     e3c:	ldr	r3, [r2, #16]
     e40:	str	r3, [r9, #28]
     e44:	str	r0, [r2]
     e48:	mov	r0, #1
     e4c:	str	r0, [r2, #44]	; 0x2c
     e50:	b	b1c <coda_expression_lex+0x5ec>
     e54:	ldr	r3, [sp, #20]
     e58:	mov	r0, r9
     e5c:	add	r3, ip, r3
     e60:	str	r3, [r9, #36]	; 0x24
     e64:	bl	0 <yy_get_previous_state>
     e68:	lsl	r1, r0, #1
     e6c:	ldr	r6, [r9, #36]	; 0x24
     e70:	ldrsh	r3, [r5, r1]
     e74:	cmp	r3, #0
     e78:	ldrsh	r3, [r4, r1]
     e7c:	strne	r0, [r9, #64]	; 0x40
     e80:	strne	r6, [r9, #68]	; 0x44
     e84:	add	r3, r3, #1
     e88:	lsl	r3, r3, #1
     e8c:	ldrsh	r2, [sl, r3]
     e90:	cmp	r0, r2
     e94:	beq	ebc <coda_expression_lex+0x98c>
     e98:	lsl	r2, r0, #1
     e9c:	ldrsh	r0, [r8, r2]
     ea0:	lsl	r2, r0, #1
     ea4:	ldrsh	r3, [r4, r2]
     ea8:	add	r3, r3, #1
     eac:	lsl	r3, r3, #1
     eb0:	ldrsh	ip, [sl, r3]
     eb4:	cmp	r0, ip
     eb8:	bne	e9c <coda_expression_lex+0x96c>
     ebc:	ldr	r2, [pc, #676]	; 1168 <coda_expression_lex+0xc38>
     ec0:	ldrsh	r0, [r2, r3]
     ec4:	ldr	r3, [r9, #80]	; 0x50
     ec8:	cmp	r0, r7
     ecc:	str	r3, [sp, #4]
     ed0:	beq	624 <coda_expression_lex+0xf4>
     ed4:	cmp	r0, #0
     ed8:	beq	624 <coda_expression_lex+0xf4>
     edc:	ldr	fp, [sp, #8]
     ee0:	add	r6, r6, #1
     ee4:	str	r6, [r9, #36]	; 0x24
     ee8:	ldrb	lr, [r6]
     eec:	mov	r2, r0
     ef0:	b	5ac <coda_expression_lex+0x7c>
     ef4:	ldr	fp, [sp, #24]
     ef8:	mov	r0, r9
     efc:	str	fp, [r9, #36]	; 0x24
     f00:	bl	0 <yy_get_previous_state>
     f04:	lsl	r1, r0, #1
     f08:	ldr	r6, [r9, #36]	; 0x24
     f0c:	ldr	r3, [r9, #80]	; 0x50
     f10:	str	r3, [sp, #4]
     f14:	b	624 <coda_expression_lex+0xf4>
     f18:	mov	r2, #0
     f1c:	str	r2, [r9, #28]
     f20:	str	r2, [r3, #16]
     f24:	cmp	fp, #0
     f28:	beq	1040 <coda_expression_lex+0xb10>
     f2c:	ldr	r2, [r1, lr, lsl #2]
     f30:	mov	r3, #2
     f34:	mov	r1, #2
     f38:	str	r3, [sp, #12]
     f3c:	ldr	r3, [r9, #28]
     f40:	str	r1, [r2, #44]	; 0x2c
     f44:	add	r1, fp, r3
     f48:	ldr	r0, [r2, #4]
     f4c:	ldr	ip, [r2, #12]
     f50:	cmp	r1, ip
     f54:	bgt	ff4 <coda_expression_lex+0xac4>
     f58:	ldr	r3, [sp, #12]
     f5c:	mov	r2, #0
     f60:	str	r1, [r9, #28]
     f64:	strb	r2, [r0, r1]
     f68:	ldr	r0, [r9, #12]
     f6c:	cmp	r3, #1
     f70:	ldr	r3, [r9, #20]
     f74:	ldr	r1, [r9, #28]
     f78:	ldr	r3, [r3, r0, lsl #2]
     f7c:	ldr	r3, [r3, #4]
     f80:	add	r3, r3, r1
     f84:	strb	r2, [r3, #1]
     f88:	ldr	r2, [r9, #12]
     f8c:	ldr	r3, [r9, #20]
     f90:	ldr	r3, [r3, r2, lsl #2]
     f94:	ldr	r3, [r3, #4]
     f98:	str	r3, [r9, #80]	; 0x50
     f9c:	beq	fec <coda_expression_lex+0xabc>
     fa0:	ldr	r2, [sp, #12]
     fa4:	cmp	r2, #2
     fa8:	beq	fe0 <coda_expression_lex+0xab0>
     fac:	mov	r0, r9
     fb0:	ldr	fp, [sp, #8]
     fb4:	ldr	r2, [sp, #20]
     fb8:	add	r3, r3, r2
     fbc:	str	r3, [r9, #36]	; 0x24
     fc0:	bl	0 <yy_get_previous_state>
     fc4:	ldr	r6, [r9, #36]	; 0x24
     fc8:	ldr	r3, [r9, #80]	; 0x50
     fcc:	str	r3, [sp, #4]
     fd0:	b	ee8 <coda_expression_lex+0x9b8>
     fd4:	movw	r0, #0
     fd8:	movt	r0, #0
     fdc:	bl	d4 <yy_fatal_error.isra.0>
     fe0:	ldr	fp, [r9, #28]
     fe4:	add	fp, r3, fp
     fe8:	b	ef8 <coda_expression_lex+0x9c8>
     fec:	mov	ip, r3
     ff0:	b	b88 <coda_expression_lex+0x658>
     ff4:	add	r3, r1, r3, asr #1
     ff8:	mov	r1, r3
     ffc:	str	r3, [sp, #16]
    1000:	str	r2, [sp, #24]
    1004:	bl	0 <realloc>
    1008:	ldr	r1, [r9, #12]
    100c:	ldr	r2, [sp, #24]
    1010:	ldr	r3, [sp, #16]
    1014:	str	r0, [r2, #4]
    1018:	ldr	r2, [r9, #20]
    101c:	ldr	r1, [r2, r1, lsl #2]
    1020:	ldr	r0, [r1, #4]
    1024:	cmp	r0, #0
    1028:	beq	1068 <coda_expression_lex+0xb38>
    102c:	ldr	r2, [r9, #28]
    1030:	sub	r3, r3, #2
    1034:	str	r3, [r1, #12]
    1038:	add	r1, fp, r2
    103c:	b	f58 <coda_expression_lex+0xa28>
    1040:	mov	r3, #1
    1044:	mov	r1, r9
    1048:	ldr	r0, [r9, #4]
    104c:	str	r3, [sp, #12]
    1050:	bl	470 <coda_expression_restart>
    1054:	ldr	r1, [r9, #12]
    1058:	ldr	r2, [r9, #20]
    105c:	ldr	r3, [r9, #28]
    1060:	ldr	r2, [r2, r1, lsl #2]
    1064:	b	f44 <coda_expression_lex+0xa14>
    1068:	movw	r0, #0
    106c:	movt	r0, #0
    1070:	bl	d4 <yy_fatal_error.isra.0>
    1074:	mov	r3, r6
    1078:	strb	r0, [lr]
    107c:	ldr	r6, [sp, #12]
    1080:	ldr	fp, [sp, #16]
    1084:	b	e10 <coda_expression_lex+0x8e0>
    1088:	mov	r3, r6
    108c:	ldr	r0, [r9, #4]
    1090:	ldr	r6, [sp, #12]
    1094:	ldr	fp, [sp, #16]
    1098:	str	r3, [sp, #16]
    109c:	bl	0 <ferror>
    10a0:	cmp	r0, #0
    10a4:	ldr	r3, [sp, #16]
    10a8:	beq	e10 <coda_expression_lex+0x8e0>
    10ac:	movw	r0, #0
    10b0:	movt	r0, #0
    10b4:	bl	d4 <yy_fatal_error.isra.0>
    10b8:	bl	0 <__errno_location>
    10bc:	ldr	r2, [sp, #12]
    10c0:	mov	r3, r0
    10c4:	str	r3, [sp, #28]
    10c8:	ldr	r0, [sp, #16]
    10cc:	str	r2, [r3]
    10d0:	b	110c <coda_expression_lex+0xbdc>
    10d4:	ldr	r0, [r9, #4]
    10d8:	str	r3, [sp, #16]
    10dc:	bl	0 <ferror>
    10e0:	cmp	r0, #0
    10e4:	ldr	r3, [sp, #16]
    10e8:	beq	1150 <coda_expression_lex+0xc20>
    10ec:	ldr	r1, [sp, #28]
    10f0:	ldr	r2, [r1]
    10f4:	cmp	r2, #4
    10f8:	bne	10ac <coda_expression_lex+0xb7c>
    10fc:	ldr	r0, [r9, #4]
    1100:	str	r3, [r1]
    1104:	bl	0 <clearerr>
    1108:	ldr	r0, [r9, #20]
    110c:	mov	r1, #1
    1110:	ldr	r3, [r9, #4]
    1114:	ldr	ip, [r9, #12]
    1118:	ldr	r2, [sp, #24]
    111c:	ldr	r0, [r0, ip, lsl #2]
    1120:	ldr	r0, [r0, #4]
    1124:	add	r0, r0, fp
    1128:	bl	0 <fread>
    112c:	cmp	r0, #0
    1130:	mov	r3, r0
    1134:	str	r0, [r9, #28]
    1138:	beq	10d4 <coda_expression_lex+0xba4>
    113c:	ldr	r1, [r9, #12]
    1140:	ldr	r2, [r9, #20]
    1144:	ldr	r2, [r2, r1, lsl #2]
    1148:	str	r0, [r2, #16]
    114c:	b	f44 <coda_expression_lex+0xa14>
    1150:	ldr	r3, [r9, #28]
    1154:	b	e14 <coda_expression_lex+0x8e4>
    1158:	movw	r0, #0
    115c:	movt	r0, #0
    1160:	bl	d4 <yy_fatal_error.isra.0>
    1164:	.word	0x00000578
    1168:	.word	0x00000a5c

0000116c <coda_expression_push_buffer_state>:
    116c:	strd	r4, [sp, #-16]!
    1170:	subs	r5, r0, #0
    1174:	str	r6, [sp, #8]
    1178:	str	lr, [sp, #12]
    117c:	beq	121c <coda_expression_push_buffer_state+0xb0>
    1180:	mov	r4, r1
    1184:	mov	r0, r1
    1188:	bl	100 <coda_expression_ensure_buffer_stack>
    118c:	ldr	r3, [r4, #20]
    1190:	cmp	r3, #0
    1194:	beq	122c <coda_expression_push_buffer_state+0xc0>
    1198:	ldr	r2, [r4, #12]
    119c:	ldr	r1, [r3, r2, lsl #2]
    11a0:	add	r3, r3, r2, lsl #2
    11a4:	cmp	r1, #0
    11a8:	beq	11ec <coda_expression_push_buffer_state+0x80>
    11ac:	ldrb	r2, [r4, #24]
    11b0:	ldr	r3, [r4, #36]	; 0x24
    11b4:	strb	r2, [r3]
    11b8:	ldr	r2, [r4, #12]
    11bc:	ldr	r1, [r4, #20]
    11c0:	ldr	ip, [r4, #28]
    11c4:	ldr	lr, [r4, #36]	; 0x24
    11c8:	cmp	r1, #0
    11cc:	add	r3, r1, r2, lsl #2
    11d0:	ldr	r0, [r1, r2, lsl #2]
    11d4:	str	lr, [r0, #8]
    11d8:	str	ip, [r0, #16]
    11dc:	beq	11ec <coda_expression_push_buffer_state+0x80>
    11e0:	add	r2, r2, #1
    11e4:	add	r3, r1, r2, lsl #2
    11e8:	str	r2, [r4, #12]
    11ec:	ldr	r0, [r5]
    11f0:	mov	r2, #1
    11f4:	ldr	r1, [r5, #16]
    11f8:	str	r5, [r3]
    11fc:	ldr	r3, [r5, #8]
    1200:	str	r0, [r4, #4]
    1204:	str	r1, [r4, #28]
    1208:	str	r3, [r4, #36]	; 0x24
    120c:	str	r3, [r4, #80]	; 0x50
    1210:	ldrb	r3, [r3]
    1214:	strb	r3, [r4, #24]
    1218:	str	r2, [r4, #48]	; 0x30
    121c:	ldrd	r4, [sp]
    1220:	ldr	r6, [sp, #8]
    1224:	add	sp, sp, #12
    1228:	pop	{pc}		; (ldr pc, [sp], #4)
    122c:	ldr	r3, [r4, #12]
    1230:	lsl	r3, r3, #2
    1234:	b	11ec <coda_expression_push_buffer_state+0x80>

00001238 <coda_expression_pop_buffer_state>:
    1238:	ldr	r3, [r0, #20]
    123c:	cmp	r3, #0
    1240:	bxeq	lr
    1244:	ldr	r2, [r0, #12]
    1248:	ldr	r3, [r3, r2, lsl #2]
    124c:	cmp	r3, #0
    1250:	bxeq	lr
    1254:	str	r4, [sp, #-8]!
    1258:	mov	r4, r0
    125c:	mov	r0, r3
    1260:	mov	r1, r4
    1264:	str	lr, [sp, #4]
    1268:	bl	288 <coda_expression__delete_buffer>
    126c:	ldr	r3, [r4, #12]
    1270:	mov	r1, #0
    1274:	ldr	r2, [r4, #20]
    1278:	cmp	r3, r1
    127c:	str	r1, [r2, r3, lsl #2]
    1280:	subne	r3, r3, #1
    1284:	strne	r3, [r4, #12]
    1288:	cmp	r2, #0
    128c:	beq	12cc <coda_expression_pop_buffer_state+0x94>
    1290:	ldr	r3, [r4, #12]
    1294:	ldr	r3, [r2, r3, lsl #2]
    1298:	cmp	r3, #0
    129c:	beq	12cc <coda_expression_pop_buffer_state+0x94>
    12a0:	ldr	r0, [r3]
    12a4:	mov	r2, #1
    12a8:	ldr	r1, [r3, #16]
    12ac:	ldr	r3, [r3, #8]
    12b0:	str	r0, [r4, #4]
    12b4:	str	r1, [r4, #28]
    12b8:	str	r3, [r4, #36]	; 0x24
    12bc:	str	r3, [r4, #80]	; 0x50
    12c0:	ldrb	r3, [r3]
    12c4:	strb	r3, [r4, #24]
    12c8:	str	r2, [r4, #48]	; 0x30
    12cc:	ldr	r4, [sp]
    12d0:	add	sp, sp, #4
    12d4:	pop	{pc}		; (ldr pc, [sp], #4)

000012d8 <coda_expression__scan_buffer>:
    12d8:	cmp	r1, #1
    12dc:	strd	r4, [sp, #-24]!	; 0xffffffe8
    12e0:	strd	r6, [sp, #8]
    12e4:	str	r8, [sp, #16]
    12e8:	str	lr, [sp, #20]
    12ec:	bls	1374 <coda_expression__scan_buffer+0x9c>
    12f0:	sub	r7, r1, #2
    12f4:	ldrb	r4, [r0, r7]
    12f8:	cmp	r4, #0
    12fc:	bne	1374 <coda_expression__scan_buffer+0x9c>
    1300:	add	r3, r0, r1
    1304:	ldrb	r6, [r3, #-1]
    1308:	cmp	r6, #0
    130c:	bne	135c <coda_expression__scan_buffer+0x84>
    1310:	mov	r5, r0
    1314:	mov	r0, #48	; 0x30
    1318:	mov	r8, r2
    131c:	bl	0 <malloc>
    1320:	subs	r4, r0, #0
    1324:	beq	137c <coda_expression__scan_buffer+0xa4>
    1328:	mov	r3, #1
    132c:	mov	r1, r8
    1330:	str	r6, [r4]
    1334:	str	r5, [r4, #4]
    1338:	str	r5, [r4, #8]
    133c:	str	r7, [r4, #12]
    1340:	str	r7, [r4, #16]
    1344:	str	r6, [r4, #20]
    1348:	str	r6, [r4, #24]
    134c:	str	r3, [r4, #28]
    1350:	str	r6, [r4, #40]	; 0x28
    1354:	str	r6, [r4, #44]	; 0x2c
    1358:	bl	1c4 <coda_expression__switch_to_buffer>
    135c:	mov	r0, r4
    1360:	ldrd	r4, [sp]
    1364:	ldrd	r6, [sp, #8]
    1368:	ldr	r8, [sp, #16]
    136c:	add	sp, sp, #20
    1370:	pop	{pc}		; (ldr pc, [sp], #4)
    1374:	mov	r4, #0
    1378:	b	135c <coda_expression__scan_buffer+0x84>
    137c:	movw	r0, #0
    1380:	movt	r0, #0
    1384:	bl	d4 <yy_fatal_error.isra.0>

00001388 <coda_expression__scan_bytes>:
    1388:	strd	r4, [sp, #-24]!	; 0xffffffe8
    138c:	mov	r4, r0
    1390:	mov	r5, r1
    1394:	strd	r6, [sp, #8]
    1398:	add	r7, r1, #2
    139c:	mov	r0, r7
    13a0:	str	r8, [sp, #16]
    13a4:	mov	r8, r2
    13a8:	str	lr, [sp, #20]
    13ac:	bl	0 <malloc>
    13b0:	subs	r6, r0, #0
    13b4:	beq	1420 <coda_expression__scan_bytes+0x98>
    13b8:	cmp	r5, #0
    13bc:	subgt	r0, r4, #1
    13c0:	subgt	r3, r6, #1
    13c4:	addgt	lr, r0, r5
    13c8:	ble	13dc <coda_expression__scan_bytes+0x54>
    13cc:	ldrb	ip, [r0, #1]!
    13d0:	cmp	r0, lr
    13d4:	strb	ip, [r3, #1]!
    13d8:	bne	13cc <coda_expression__scan_bytes+0x44>
    13dc:	mov	r3, #0
    13e0:	add	r0, r6, r5
    13e4:	mov	r2, r8
    13e8:	mov	r1, r7
    13ec:	strb	r3, [r0, #1]
    13f0:	mov	r0, r6
    13f4:	strb	r3, [r6, r5]
    13f8:	bl	12d8 <coda_expression__scan_buffer>
    13fc:	subs	r3, r0, #0
    1400:	beq	142c <coda_expression__scan_bytes+0xa4>
    1404:	mov	r2, #1
    1408:	ldrd	r4, [sp]
    140c:	ldrd	r6, [sp, #8]
    1410:	ldr	r8, [sp, #16]
    1414:	add	sp, sp, #20
    1418:	str	r2, [r3, #20]
    141c:	pop	{pc}		; (ldr pc, [sp], #4)
    1420:	movw	r0, #0
    1424:	movt	r0, #0
    1428:	bl	d4 <yy_fatal_error.isra.0>
    142c:	movw	r0, #0
    1430:	movt	r0, #0
    1434:	bl	d4 <yy_fatal_error.isra.0>

00001438 <coda_expression__scan_string>:
    1438:	strd	r4, [sp, #-16]!
    143c:	mov	r5, r1
    1440:	mov	r4, r0
    1444:	str	r6, [sp, #8]
    1448:	str	lr, [sp, #12]
    144c:	bl	0 <strlen>
    1450:	mov	r1, r0
    1454:	mov	r2, r5
    1458:	ldr	r6, [sp, #8]
    145c:	mov	r0, r4
    1460:	ldrd	r4, [sp]
    1464:	ldr	lr, [sp, #12]
    1468:	add	sp, sp, #16
    146c:	b	1388 <coda_expression__scan_bytes>

00001470 <coda_expression_get_extra>:
    1470:	ldr	r0, [r0]
    1474:	bx	lr

00001478 <coda_expression_get_lineno>:
    1478:	ldr	r3, [r0, #20]
    147c:	cmp	r3, #0
    1480:	beq	149c <coda_expression_get_lineno+0x24>
    1484:	ldr	r2, [r0, #12]
    1488:	ldr	r0, [r3, r2, lsl #2]
    148c:	cmp	r0, #0
    1490:	beq	14a0 <coda_expression_get_lineno+0x28>
    1494:	ldr	r0, [r0, #32]
    1498:	bx	lr
    149c:	mov	r0, r3
    14a0:	bx	lr

000014a4 <coda_expression_get_column>:
    14a4:	ldr	r3, [r0, #20]
    14a8:	cmp	r3, #0
    14ac:	beq	14c8 <coda_expression_get_column+0x24>
    14b0:	ldr	r2, [r0, #12]
    14b4:	ldr	r0, [r3, r2, lsl #2]
    14b8:	cmp	r0, #0
    14bc:	beq	14cc <coda_expression_get_column+0x28>
    14c0:	ldr	r0, [r0, #36]	; 0x24
    14c4:	bx	lr
    14c8:	mov	r0, r3
    14cc:	bx	lr

000014d0 <coda_expression_get_in>:
    14d0:	ldr	r0, [r0, #4]
    14d4:	bx	lr

000014d8 <coda_expression_get_out>:
    14d8:	ldr	r0, [r0, #8]
    14dc:	bx	lr

000014e0 <coda_expression_get_leng>:
    14e0:	ldr	r0, [r0, #32]
    14e4:	bx	lr

000014e8 <coda_expression_get_text>:
    14e8:	ldr	r0, [r0, #80]	; 0x50
    14ec:	bx	lr

000014f0 <coda_expression_set_extra>:
    14f0:	str	r0, [r1]
    14f4:	bx	lr

000014f8 <coda_expression_set_lineno>:
    14f8:	ldr	r3, [r1, #20]
    14fc:	cmp	r3, #0
    1500:	beq	151c <coda_expression_set_lineno+0x24>
    1504:	ldr	r2, [r1, #12]
    1508:	ldr	r3, [r3, r2, lsl #2]
    150c:	cmp	r3, #0
    1510:	beq	151c <coda_expression_set_lineno+0x24>
    1514:	str	r0, [r3, #32]
    1518:	bx	lr
    151c:	movw	r0, #0
    1520:	movt	r0, #0
    1524:	str	r4, [sp, #-8]!
    1528:	str	lr, [sp, #4]
    152c:	bl	d4 <yy_fatal_error.isra.0>

00001530 <coda_expression_set_column>:
    1530:	ldr	r3, [r1, #20]
    1534:	cmp	r3, #0
    1538:	beq	1554 <coda_expression_set_column+0x24>
    153c:	ldr	r2, [r1, #12]
    1540:	ldr	r3, [r3, r2, lsl #2]
    1544:	cmp	r3, #0
    1548:	beq	1554 <coda_expression_set_column+0x24>
    154c:	str	r0, [r3, #36]	; 0x24
    1550:	bx	lr
    1554:	movw	r0, #0
    1558:	movt	r0, #0
    155c:	str	r4, [sp, #-8]!
    1560:	str	lr, [sp, #4]
    1564:	bl	d4 <yy_fatal_error.isra.0>

00001568 <coda_expression_set_in>:
    1568:	str	r0, [r1, #4]
    156c:	bx	lr

00001570 <coda_expression_set_out>:
    1570:	str	r0, [r1, #8]
    1574:	bx	lr

00001578 <coda_expression_get_debug>:
    1578:	ldr	r0, [r0, #76]	; 0x4c
    157c:	bx	lr

00001580 <coda_expression_set_debug>:
    1580:	str	r0, [r1, #76]	; 0x4c
    1584:	bx	lr

00001588 <coda_expression_get_lval>:
    1588:	ldr	r0, [r0, #92]	; 0x5c
    158c:	bx	lr

00001590 <coda_expression_set_lval>:
    1590:	str	r0, [r1, #92]	; 0x5c
    1594:	bx	lr

00001598 <coda_expression_lex_init>:
    1598:	str	r4, [sp, #-8]!
    159c:	subs	r4, r0, #0
    15a0:	str	lr, [sp, #4]
    15a4:	beq	1624 <coda_expression_lex_init+0x8c>
    15a8:	mov	r1, #1
    15ac:	mov	r0, #96	; 0x60
    15b0:	bl	0 <calloc>
    15b4:	cmp	r0, #0
    15b8:	str	r0, [r4]
    15bc:	beq	1604 <coda_expression_lex_init+0x6c>
    15c0:	mov	r3, #0
    15c4:	ldr	r4, [sp]
    15c8:	add	sp, sp, #4
    15cc:	mov	r2, r3
    15d0:	str	r3, [r0, #4]
    15d4:	str	r3, [r0, #8]
    15d8:	str	r3, [r0, #12]
    15dc:	str	r3, [r0, #16]
    15e0:	str	r3, [r0, #20]
    15e4:	str	r3, [r0, #36]	; 0x24
    15e8:	str	r3, [r0, #40]	; 0x28
    15ec:	str	r3, [r0, #44]	; 0x2c
    15f0:	str	r3, [r0, #52]	; 0x34
    15f4:	str	r3, [r0, #56]	; 0x38
    15f8:	str	r3, [r0, #60]	; 0x3c
    15fc:	mov	r0, r2
    1600:	pop	{pc}		; (ldr pc, [sp], #4)
    1604:	bl	0 <__errno_location>
    1608:	mov	r3, #12
    160c:	mov	r2, #1
    1610:	ldr	r4, [sp]
    1614:	add	sp, sp, #4
    1618:	str	r3, [r0]
    161c:	mov	r0, r2
    1620:	pop	{pc}		; (ldr pc, [sp], #4)
    1624:	bl	0 <__errno_location>
    1628:	mov	r3, #22
    162c:	mov	r2, #1
    1630:	ldr	r4, [sp]
    1634:	add	sp, sp, #4
    1638:	str	r3, [r0]
    163c:	mov	r0, r2
    1640:	pop	{pc}		; (ldr pc, [sp], #4)

00001644 <coda_expression_lex_init_extra>:
    1644:	strd	r4, [sp, #-16]!
    1648:	subs	r5, r1, #0
    164c:	str	r6, [sp, #8]
    1650:	str	lr, [sp, #12]
    1654:	beq	16cc <coda_expression_lex_init_extra+0x88>
    1658:	mov	r6, r0
    165c:	mov	r0, #96	; 0x60
    1660:	bl	0 <malloc>
    1664:	cmp	r0, #0
    1668:	mov	r4, r0
    166c:	str	r0, [r5]
    1670:	beq	16b8 <coda_expression_lex_init_extra+0x74>
    1674:	mov	r2, #72	; 0x48
    1678:	mov	r1, #0
    167c:	add	r0, r0, #24
    1680:	bl	0 <memset>
    1684:	mov	r3, #0
    1688:	str	r6, [r4]
    168c:	mov	r2, r3
    1690:	str	r3, [r4, #4]
    1694:	str	r3, [r4, #8]
    1698:	str	r3, [r4, #12]
    169c:	str	r3, [r4, #16]
    16a0:	str	r3, [r4, #20]
    16a4:	ldrd	r4, [sp]
    16a8:	mov	r0, r2
    16ac:	ldr	r6, [sp, #8]
    16b0:	add	sp, sp, #12
    16b4:	pop	{pc}		; (ldr pc, [sp], #4)
    16b8:	bl	0 <__errno_location>
    16bc:	mov	r3, #12
    16c0:	mov	r2, #1
    16c4:	str	r3, [r0]
    16c8:	b	16a4 <coda_expression_lex_init_extra+0x60>
    16cc:	bl	0 <__errno_location>
    16d0:	mov	r3, #22
    16d4:	mov	r2, #1
    16d8:	str	r3, [r0]
    16dc:	b	16a4 <coda_expression_lex_init_extra+0x60>

000016e0 <coda_expression_lex_destroy>:
    16e0:	ldr	r3, [r0, #20]
    16e4:	strd	r4, [sp, #-16]!
    16e8:	mov	r4, r0
    16ec:	str	r6, [sp, #8]
    16f0:	str	lr, [sp, #12]
    16f4:	cmp	r3, #0
    16f8:	beq	174c <coda_expression_lex_destroy+0x6c>
    16fc:	ldr	r2, [r0, #12]
    1700:	ldr	r0, [r3, r2, lsl #2]
    1704:	cmp	r0, #0
    1708:	beq	1750 <coda_expression_lex_destroy+0x70>
    170c:	mov	r5, #0
    1710:	b	1724 <coda_expression_lex_destroy+0x44>
    1714:	ldr	r2, [r4, #12]
    1718:	ldr	r0, [r3, r2, lsl #2]
    171c:	cmp	r0, #0
    1720:	beq	1750 <coda_expression_lex_destroy+0x70>
    1724:	mov	r1, r4
    1728:	bl	288 <coda_expression__delete_buffer>
    172c:	ldr	r2, [r4, #12]
    1730:	mov	r0, r4
    1734:	ldr	r3, [r4, #20]
    1738:	str	r5, [r3, r2, lsl #2]
    173c:	bl	1238 <coda_expression_pop_buffer_state>
    1740:	ldr	r3, [r4, #20]
    1744:	cmp	r3, #0
    1748:	bne	1714 <coda_expression_lex_destroy+0x34>
    174c:	mov	r3, #0
    1750:	mov	r0, r3
    1754:	bl	0 <free>
    1758:	ldr	r0, [r4, #60]	; 0x3c
    175c:	bl	0 <free>
    1760:	mov	r0, r4
    1764:	bl	0 <free>
    1768:	ldrd	r4, [sp]
    176c:	mov	r0, #0
    1770:	ldr	r6, [sp, #8]
    1774:	add	sp, sp, #12
    1778:	pop	{pc}		; (ldr pc, [sp], #4)

0000177c <coda_expression_alloc>:
    177c:	b	0 <malloc>

00001780 <coda_expression_realloc>:
    1780:	b	0 <realloc>

00001784 <coda_expression_free>:
    1784:	b	0 <free>
