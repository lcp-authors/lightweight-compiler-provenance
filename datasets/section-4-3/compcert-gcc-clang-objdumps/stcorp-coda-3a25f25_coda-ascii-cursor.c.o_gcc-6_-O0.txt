
../compcert-repos/stcorp-coda-3a25f25/CMakeFiles/coda_static.dir/libcoda/coda-ascii-cursor.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <read_bytes>:
       0:	push	{fp, lr}
       4:	add	fp, sp, #4
       8:	sub	sp, sp, #96	; 0x60
       c:	str	r0, [fp, #-80]	; 0xffffffb0
      10:	strd	r2, [fp, #-92]	; 0xffffffa4
      14:	ldr	r3, [fp, #-80]	; 0xffffffb0
      18:	ldr	r3, [r3, #48]	; 0x30
      1c:	cmp	r3, #0
      20:	beq	fc <read_bytes+0xfc>
      24:	ldrd	r0, [fp, #-92]	; 0xffffffa4
      28:	ldrd	r2, [fp, #4]
      2c:	adds	r2, r2, r0
      30:	adc	r3, r3, r1
      34:	ldr	r1, [fp, #-80]	; 0xffffffb0
      38:	ldrd	r0, [r1, #40]	; 0x28
      3c:	cmp	r3, r1
      40:	cmpeq	r2, r0
      44:	bls	d8 <read_bytes+0xd8>
      48:	ldr	r3, [fp, #-80]	; 0xffffffb0
      4c:	ldr	r3, [r3, #16]
      50:	cmp	r3, #0
      54:	beq	68 <read_bytes+0x68>
      58:	ldr	r3, [fp, #-80]	; 0xffffffb0
      5c:	ldr	r3, [r3, #16]
      60:	cmp	r3, #1
      64:	bne	7c <read_bytes+0x7c>
      68:	ldr	r1, [pc, #348]	; 1cc <read_bytes+0x1cc>
      6c:	mvn	r0, #300	; 0x12c
      70:	bl	0 <coda_set_error>
      74:	mvn	r3, #0
      78:	b	1c0 <read_bytes+0x1c0>
      7c:	sub	r3, fp, #28
      80:	mov	r2, r3
      84:	ldrd	r0, [fp, #4]
      88:	bl	0 <coda_str64>
      8c:	sub	r3, fp, #52	; 0x34
      90:	mov	r2, r3
      94:	ldrd	r0, [fp, #-92]	; 0xffffffa4
      98:	bl	0 <coda_str64>
      9c:	ldr	r3, [fp, #-80]	; 0xffffffb0
      a0:	ldrd	r0, [r3, #40]	; 0x28
      a4:	sub	r3, fp, #76	; 0x4c
      a8:	mov	r2, r3
      ac:	bl	0 <coda_str64>
      b0:	sub	r1, fp, #52	; 0x34
      b4:	sub	r2, fp, #28
      b8:	sub	r3, fp, #76	; 0x4c
      bc:	str	r3, [sp]
      c0:	mov	r3, r1
      c4:	ldr	r1, [pc, #260]	; 1d0 <read_bytes+0x1d0>
      c8:	mvn	r0, #300	; 0x12c
      cc:	bl	0 <coda_set_error>
      d0:	mvn	r3, #0
      d4:	b	1c0 <read_bytes+0x1c0>
      d8:	ldr	r3, [fp, #-80]	; 0xffffffb0
      dc:	ldr	r2, [r3, #48]	; 0x30
      e0:	ldr	r3, [fp, #-92]	; 0xffffffa4
      e4:	add	r3, r2, r3
      e8:	ldr	r2, [fp, #4]
      ec:	mov	r1, r3
      f0:	ldr	r0, [fp, #12]
      f4:	bl	0 <memcpy>
      f8:	b	1bc <read_bytes+0x1bc>
      fc:	ldr	r3, [fp, #-80]	; 0xffffffb0
     100:	ldr	r3, [r3, #16]
     104:	cmp	r3, #0
     108:	beq	130 <read_bytes+0x130>
     10c:	ldr	r3, [fp, #-80]	; 0xffffffb0
     110:	ldr	r3, [r3, #16]
     114:	cmp	r3, #1
     118:	beq	130 <read_bytes+0x130>
     11c:	ldr	r3, [pc, #176]	; 1d4 <read_bytes+0x1d4>
     120:	mov	r2, #83	; 0x53
     124:	ldr	r1, [pc, #172]	; 1d8 <read_bytes+0x1d8>
     128:	ldr	r0, [pc, #172]	; 1dc <read_bytes+0x1dc>
     12c:	bl	0 <__assert_fail>
     130:	ldrd	r0, [fp, #-92]	; 0xffffffa4
     134:	ldrd	r2, [fp, #4]
     138:	adds	r2, r2, r0
     13c:	adc	r3, r3, r1
     140:	ldr	r1, [fp, #-80]	; 0xffffffb0
     144:	ldrd	r0, [r1, #8]
     148:	cmp	r3, r1
     14c:	cmpeq	r2, r0
     150:	bls	168 <read_bytes+0x168>
     154:	ldr	r1, [pc, #112]	; 1cc <read_bytes+0x1cc>
     158:	mvn	r0, #300	; 0x12c
     15c:	bl	0 <coda_set_error>
     160:	mvn	r3, #0
     164:	b	1c0 <read_bytes+0x1c0>
     168:	ldr	r3, [fp, #-80]	; 0xffffffb0
     16c:	ldr	r0, [r3, #56]	; 0x38
     170:	ldr	r2, [fp, #4]
     174:	ldr	r3, [fp, #-92]	; 0xffffffa4
     178:	ldr	r1, [fp, #12]
     17c:	bl	0 <pread>
     180:	mov	r3, r0
     184:	cmp	r3, #0
     188:	bge	1bc <read_bytes+0x1bc>
     18c:	bl	0 <__errno_location>
     190:	mov	r3, r0
     194:	ldr	r3, [r3]
     198:	mov	r0, r3
     19c:	bl	0 <strerror>
     1a0:	mov	r3, r0
     1a4:	mov	r2, r3
     1a8:	ldr	r1, [pc, #48]	; 1e0 <read_bytes+0x1e0>
     1ac:	mvn	r0, #21
     1b0:	bl	0 <coda_set_error>
     1b4:	mvn	r3, #0
     1b8:	b	1c0 <read_bytes+0x1c0>
     1bc:	mov	r3, #0
     1c0:	mov	r0, r3
     1c4:	sub	sp, fp, #4
     1c8:	pop	{fp, pc}
     1cc:	.word	0x00000000
     1d0:	.word	0x0000002c
     1d4:	.word	0x000009e8
     1d8:	.word	0x00000068
     1dc:	.word	0x000000b8
     1e0:	.word	0x00000108

000001e4 <read_bytes_in_bounds>:
     1e4:	push	{fp, lr}
     1e8:	add	fp, sp, #4
     1ec:	sub	sp, sp, #16
     1f0:	str	r0, [fp, #-8]
     1f4:	strd	r2, [fp, #-20]	; 0xffffffec
     1f8:	ldr	r3, [fp, #-8]
     1fc:	ldr	r3, [r3, #48]	; 0x30
     200:	cmp	r3, #0
     204:	beq	22c <read_bytes_in_bounds+0x48>
     208:	ldr	r3, [fp, #-8]
     20c:	ldr	r2, [r3, #48]	; 0x30
     210:	ldr	r3, [fp, #-20]	; 0xffffffec
     214:	add	r3, r2, r3
     218:	ldr	r2, [fp, #4]
     21c:	mov	r1, r3
     220:	ldr	r0, [fp, #12]
     224:	bl	0 <memcpy>
     228:	b	2b4 <read_bytes_in_bounds+0xd0>
     22c:	ldr	r3, [fp, #-8]
     230:	ldr	r3, [r3, #16]
     234:	cmp	r3, #0
     238:	beq	260 <read_bytes_in_bounds+0x7c>
     23c:	ldr	r3, [fp, #-8]
     240:	ldr	r3, [r3, #16]
     244:	cmp	r3, #1
     248:	beq	260 <read_bytes_in_bounds+0x7c>
     24c:	ldr	r3, [pc, #112]	; 2c4 <read_bytes_in_bounds+0xe0>
     250:	mov	r2, #62	; 0x3e
     254:	ldr	r1, [pc, #108]	; 2c8 <read_bytes_in_bounds+0xe4>
     258:	ldr	r0, [pc, #108]	; 2cc <read_bytes_in_bounds+0xe8>
     25c:	bl	0 <__assert_fail>
     260:	ldr	r3, [fp, #-8]
     264:	ldr	r0, [r3, #56]	; 0x38
     268:	ldr	r2, [fp, #4]
     26c:	ldr	r3, [fp, #-20]	; 0xffffffec
     270:	ldr	r1, [fp, #12]
     274:	bl	0 <pread>
     278:	mov	r3, r0
     27c:	cmp	r3, #0
     280:	bge	2b4 <read_bytes_in_bounds+0xd0>
     284:	bl	0 <__errno_location>
     288:	mov	r3, r0
     28c:	ldr	r3, [r3]
     290:	mov	r0, r3
     294:	bl	0 <strerror>
     298:	mov	r3, r0
     29c:	mov	r2, r3
     2a0:	ldr	r1, [pc, #40]	; 2d0 <read_bytes_in_bounds+0xec>
     2a4:	mvn	r0, #21
     2a8:	bl	0 <coda_set_error>
     2ac:	mvn	r3, #0
     2b0:	b	2b8 <read_bytes_in_bounds+0xd4>
     2b4:	mov	r3, #0
     2b8:	mov	r0, r3
     2bc:	sub	sp, fp, #4
     2c0:	pop	{fp, pc}
     2c4:	.word	0x000009f4
     2c8:	.word	0x00000128
     2cc:	.word	0x000000b8
     2d0:	.word	0x00000108

000002d4 <read_array>:
     2d4:	push	{fp, lr}
     2d8:	add	fp, sp, #4
     2dc:	sub	sp, sp, #632	; 0x278
     2e0:	str	r0, [fp, #-624]	; 0xfffffd90
     2e4:	str	r1, [fp, #-628]	; 0xfffffd8c
     2e8:	str	r2, [fp, #-632]	; 0xfffffd88
     2ec:	str	r3, [fp, #-636]	; 0xfffffd84
     2f0:	sub	r2, fp, #580	; 0x244
     2f4:	sub	r3, fp, #584	; 0x248
     2f8:	mov	r1, r3
     2fc:	ldr	r0, [fp, #-624]	; 0xfffffd90
     300:	bl	0 <coda_cursor_get_array_dim>
     304:	mov	r3, r0
     308:	cmp	r3, #0
     30c:	beq	318 <read_array+0x44>
     310:	mvn	r3, #0
     314:	b	6c4 <read_array+0x3f0>
     318:	ldr	r2, [fp, #-624]	; 0xfffffd90
     31c:	sub	r3, fp, #548	; 0x224
     320:	mov	r1, r2
     324:	mov	r2, #520	; 0x208
     328:	mov	r0, r3
     32c:	bl	0 <memcpy>
     330:	ldr	r3, [fp, #-584]	; 0xfffffdb8
     334:	cmp	r3, #1
     338:	ble	348 <read_array+0x74>
     33c:	ldr	r3, [fp, #4]
     340:	cmp	r3, #1
     344:	beq	464 <read_array+0x190>
     348:	mov	r3, #1
     34c:	str	r3, [fp, #-8]
     350:	mov	r3, #0
     354:	str	r3, [fp, #-12]
     358:	b	388 <read_array+0xb4>
     35c:	ldr	r3, [fp, #-12]
     360:	lsl	r3, r3, #2
     364:	sub	r2, fp, #4
     368:	add	r3, r2, r3
     36c:	ldr	r2, [r3, #-576]	; 0xfffffdc0
     370:	ldr	r3, [fp, #-8]
     374:	mul	r3, r2, r3
     378:	str	r3, [fp, #-8]
     37c:	ldr	r3, [fp, #-12]
     380:	add	r3, r3, #1
     384:	str	r3, [fp, #-12]
     388:	ldr	r3, [fp, #-584]	; 0xfffffdb8
     38c:	ldr	r2, [fp, #-12]
     390:	cmp	r2, r3
     394:	blt	35c <read_array+0x88>
     398:	ldr	r3, [fp, #-8]
     39c:	cmp	r3, #0
     3a0:	ble	6c0 <read_array+0x3ec>
     3a4:	sub	r3, fp, #548	; 0x224
     3a8:	mov	r1, #0
     3ac:	mov	r0, r3
     3b0:	bl	0 <coda_cursor_goto_array_element_by_index>
     3b4:	mov	r3, r0
     3b8:	cmp	r3, #0
     3bc:	beq	3c8 <read_array+0xf4>
     3c0:	mvn	r3, #0
     3c4:	b	6c4 <read_array+0x3f0>
     3c8:	mov	r3, #0
     3cc:	str	r3, [fp, #-12]
     3d0:	b	450 <read_array+0x17c>
     3d4:	ldr	r3, [fp, #-12]
     3d8:	ldr	r2, [fp, #-636]	; 0xfffffd84
     3dc:	mul	r3, r2, r3
     3e0:	mov	r2, r3
     3e4:	ldr	r3, [fp, #-632]	; 0xfffffd88
     3e8:	add	r1, r3, r2
     3ec:	sub	r2, fp, #548	; 0x224
     3f0:	ldr	r3, [fp, #-628]	; 0xfffffd8c
     3f4:	mov	r0, r2
     3f8:	blx	r3
     3fc:	mov	r3, r0
     400:	cmp	r3, #0
     404:	beq	410 <read_array+0x13c>
     408:	mvn	r3, #0
     40c:	b	6c4 <read_array+0x3f0>
     410:	ldr	r3, [fp, #-8]
     414:	sub	r2, r3, #1
     418:	ldr	r3, [fp, #-12]
     41c:	cmp	r2, r3
     420:	ble	444 <read_array+0x170>
     424:	sub	r3, fp, #548	; 0x224
     428:	mov	r0, r3
     42c:	bl	0 <coda_cursor_goto_next_array_element>
     430:	mov	r3, r0
     434:	cmp	r3, #0
     438:	beq	444 <read_array+0x170>
     43c:	mvn	r3, #0
     440:	b	6c4 <read_array+0x3f0>
     444:	ldr	r3, [fp, #-12]
     448:	add	r3, r3, #1
     44c:	str	r3, [fp, #-12]
     450:	ldr	r2, [fp, #-12]
     454:	ldr	r3, [fp, #-8]
     458:	cmp	r2, r3
     45c:	blt	3d4 <read_array+0x100>
     460:	b	6c0 <read_array+0x3ec>
     464:	mov	r3, #1
     468:	str	r3, [fp, #-620]	; 0xfffffd94
     46c:	mov	r3, #0
     470:	str	r3, [fp, #-12]
     474:	b	4c8 <read_array+0x1f4>
     478:	ldr	r3, [fp, #-12]
     47c:	add	r1, r3, #1
     480:	ldr	r3, [fp, #-12]
     484:	lsl	r3, r3, #2
     488:	sub	r2, fp, #4
     48c:	add	r3, r2, r3
     490:	ldr	r2, [r3, #-616]	; 0xfffffd98
     494:	ldr	r3, [fp, #-12]
     498:	lsl	r3, r3, #2
     49c:	sub	r0, fp, #4
     4a0:	add	r3, r0, r3
     4a4:	ldr	r3, [r3, #-576]	; 0xfffffdc0
     4a8:	mul	r2, r3, r2
     4ac:	lsl	r3, r1, #2
     4b0:	sub	r1, fp, #4
     4b4:	add	r3, r1, r3
     4b8:	str	r2, [r3, #-616]	; 0xfffffd98
     4bc:	ldr	r3, [fp, #-12]
     4c0:	add	r3, r3, #1
     4c4:	str	r3, [fp, #-12]
     4c8:	ldr	r3, [fp, #-584]	; 0xfffffdb8
     4cc:	ldr	r2, [fp, #-12]
     4d0:	cmp	r2, r3
     4d4:	blt	478 <read_array+0x1a4>
     4d8:	ldr	r3, [fp, #-584]	; 0xfffffdb8
     4dc:	sub	r3, r3, #1
     4e0:	lsl	r3, r3, #2
     4e4:	sub	r2, fp, #4
     4e8:	add	r3, r2, r3
     4ec:	ldr	r3, [r3, #-616]	; 0xfffffd98
     4f0:	str	r3, [fp, #-24]	; 0xffffffe8
     4f4:	ldr	r3, [fp, #-584]	; 0xfffffdb8
     4f8:	lsl	r3, r3, #2
     4fc:	sub	r2, fp, #4
     500:	add	r3, r2, r3
     504:	ldr	r3, [r3, #-616]	; 0xfffffd98
     508:	str	r3, [fp, #-8]
     50c:	ldr	r3, [fp, #-8]
     510:	cmp	r3, #0
     514:	ble	6c0 <read_array+0x3ec>
     518:	mov	r3, #0
     51c:	str	r3, [fp, #-16]
     520:	mov	r3, #0
     524:	str	r3, [fp, #-20]	; 0xffffffec
     528:	sub	r3, fp, #548	; 0x224
     52c:	mov	r1, #0
     530:	mov	r0, r3
     534:	bl	0 <coda_cursor_goto_array_element_by_index>
     538:	mov	r3, r0
     53c:	cmp	r3, #0
     540:	beq	54c <read_array+0x278>
     544:	mvn	r3, #0
     548:	b	6c4 <read_array+0x3f0>
     54c:	ldr	r3, [fp, #-20]	; 0xffffffec
     550:	ldr	r2, [fp, #-636]	; 0xfffffd84
     554:	mul	r3, r2, r3
     558:	mov	r2, r3
     55c:	ldr	r3, [fp, #-632]	; 0xfffffd88
     560:	add	r1, r3, r2
     564:	sub	r2, fp, #548	; 0x224
     568:	ldr	r3, [fp, #-628]	; 0xfffffd8c
     56c:	mov	r0, r2
     570:	blx	r3
     574:	mov	r3, r0
     578:	cmp	r3, #0
     57c:	beq	588 <read_array+0x2b4>
     580:	mvn	r3, #0
     584:	b	6c4 <read_array+0x3f0>
     588:	ldr	r3, [fp, #-16]
     58c:	add	r3, r3, #1
     590:	str	r3, [fp, #-16]
     594:	ldr	r2, [fp, #-16]
     598:	ldr	r3, [fp, #-8]
     59c:	cmp	r2, r3
     5a0:	bge	5c4 <read_array+0x2f0>
     5a4:	sub	r3, fp, #548	; 0x224
     5a8:	mov	r0, r3
     5ac:	bl	0 <coda_cursor_goto_next_array_element>
     5b0:	mov	r3, r0
     5b4:	cmp	r3, #0
     5b8:	beq	5c4 <read_array+0x2f0>
     5bc:	mvn	r3, #0
     5c0:	b	6c4 <read_array+0x3f0>
     5c4:	ldr	r2, [fp, #-20]	; 0xffffffec
     5c8:	ldr	r3, [fp, #-24]	; 0xffffffe8
     5cc:	add	r3, r2, r3
     5d0:	str	r3, [fp, #-20]	; 0xffffffec
     5d4:	ldr	r2, [fp, #-20]	; 0xffffffec
     5d8:	ldr	r3, [fp, #-8]
     5dc:	cmp	r2, r3
     5e0:	blt	54c <read_array+0x278>
     5e4:	ldr	r2, [fp, #-16]
     5e8:	ldr	r3, [fp, #-8]
     5ec:	cmp	r2, r3
     5f0:	beq	6bc <read_array+0x3e8>
     5f4:	ldr	r3, [fp, #-584]	; 0xfffffdb8
     5f8:	sub	r3, r3, #2
     5fc:	lsl	r3, r3, #2
     600:	sub	r2, fp, #4
     604:	add	r3, r2, r3
     608:	ldr	r2, [r3, #-616]	; 0xfffffd98
     60c:	ldr	r3, [fp, #-584]	; 0xfffffdb8
     610:	lsl	r3, r3, #2
     614:	sub	r1, fp, #4
     618:	add	r3, r1, r3
     61c:	ldr	r3, [r3, #-616]	; 0xfffffd98
     620:	sub	r3, r2, r3
     624:	ldr	r2, [fp, #-20]	; 0xffffffec
     628:	add	r3, r2, r3
     62c:	str	r3, [fp, #-20]	; 0xffffffec
     630:	ldr	r3, [fp, #-584]	; 0xfffffdb8
     634:	sub	r3, r3, #3
     638:	str	r3, [fp, #-12]
     63c:	b	688 <read_array+0x3b4>
     640:	ldr	r3, [fp, #-12]
     644:	lsl	r3, r3, #2
     648:	sub	r2, fp, #4
     64c:	add	r3, r2, r3
     650:	ldr	r2, [r3, #-616]	; 0xfffffd98
     654:	ldr	r3, [fp, #-12]
     658:	add	r3, r3, #2
     65c:	lsl	r3, r3, #2
     660:	sub	r1, fp, #4
     664:	add	r3, r1, r3
     668:	ldr	r3, [r3, #-616]	; 0xfffffd98
     66c:	sub	r3, r2, r3
     670:	ldr	r2, [fp, #-20]	; 0xffffffec
     674:	add	r3, r2, r3
     678:	str	r3, [fp, #-20]	; 0xffffffec
     67c:	ldr	r3, [fp, #-12]
     680:	sub	r3, r3, #1
     684:	str	r3, [fp, #-12]
     688:	ldr	r3, [fp, #-12]
     68c:	cmp	r3, #0
     690:	blt	54c <read_array+0x278>
     694:	ldr	r3, [fp, #-12]
     698:	add	r3, r3, #2
     69c:	lsl	r3, r3, #2
     6a0:	sub	r2, fp, #4
     6a4:	add	r3, r2, r3
     6a8:	ldr	r2, [r3, #-616]	; 0xfffffd98
     6ac:	ldr	r3, [fp, #-20]	; 0xffffffec
     6b0:	cmp	r2, r3
     6b4:	ble	640 <read_array+0x36c>
     6b8:	b	54c <read_array+0x278>
     6bc:	nop			; (mov r0, r0)
     6c0:	mov	r3, #0
     6c4:	mov	r0, r3
     6c8:	sub	sp, fp, #4
     6cc:	pop	{fp, pc}

000006d0 <read_partial_array>:
     6d0:	push	{fp, lr}
     6d4:	add	fp, sp, #4
     6d8:	sub	sp, sp, #544	; 0x220
     6dc:	str	r0, [fp, #-536]	; 0xfffffde8
     6e0:	str	r1, [fp, #-540]	; 0xfffffde4
     6e4:	str	r2, [fp, #-544]	; 0xfffffde0
     6e8:	str	r3, [fp, #-548]	; 0xfffffddc
     6ec:	ldr	r2, [fp, #-536]	; 0xfffffde8
     6f0:	sub	r3, fp, #532	; 0x214
     6f4:	mov	r1, r2
     6f8:	mov	r2, #520	; 0x208
     6fc:	mov	r0, r3
     700:	bl	0 <memcpy>
     704:	ldr	r3, [fp, #-548]	; 0xfffffddc
     708:	cmp	r3, #0
     70c:	ble	7cc <read_partial_array+0xfc>
     710:	sub	r3, fp, #532	; 0x214
     714:	ldr	r1, [fp, #-544]	; 0xfffffde0
     718:	mov	r0, r3
     71c:	bl	0 <coda_cursor_goto_array_element_by_index>
     720:	mov	r3, r0
     724:	cmp	r3, #0
     728:	beq	734 <read_partial_array+0x64>
     72c:	mvn	r3, #0
     730:	b	7d0 <read_partial_array+0x100>
     734:	mov	r3, #0
     738:	str	r3, [fp, #-8]
     73c:	b	7bc <read_partial_array+0xec>
     740:	ldr	r3, [fp, #-8]
     744:	ldr	r2, [fp, #8]
     748:	mul	r3, r2, r3
     74c:	mov	r2, r3
     750:	ldr	r3, [fp, #4]
     754:	add	r1, r3, r2
     758:	sub	r2, fp, #532	; 0x214
     75c:	ldr	r3, [fp, #-540]	; 0xfffffde4
     760:	mov	r0, r2
     764:	blx	r3
     768:	mov	r3, r0
     76c:	cmp	r3, #0
     770:	beq	77c <read_partial_array+0xac>
     774:	mvn	r3, #0
     778:	b	7d0 <read_partial_array+0x100>
     77c:	ldr	r3, [fp, #-548]	; 0xfffffddc
     780:	sub	r2, r3, #1
     784:	ldr	r3, [fp, #-8]
     788:	cmp	r2, r3
     78c:	ble	7b0 <read_partial_array+0xe0>
     790:	sub	r3, fp, #532	; 0x214
     794:	mov	r0, r3
     798:	bl	0 <coda_cursor_goto_next_array_element>
     79c:	mov	r3, r0
     7a0:	cmp	r3, #0
     7a4:	beq	7b0 <read_partial_array+0xe0>
     7a8:	mvn	r3, #0
     7ac:	b	7d0 <read_partial_array+0x100>
     7b0:	ldr	r3, [fp, #-8]
     7b4:	add	r3, r3, #1
     7b8:	str	r3, [fp, #-8]
     7bc:	ldr	r2, [fp, #-8]
     7c0:	ldr	r3, [fp, #-548]	; 0xfffffddc
     7c4:	cmp	r2, r3
     7c8:	blt	740 <read_partial_array+0x70>
     7cc:	mov	r3, #0
     7d0:	mov	r0, r3
     7d4:	sub	sp, fp, #4
     7d8:	pop	{fp, pc}

000007dc <transpose_array>:
     7dc:	push	{fp, lr}
     7e0:	add	fp, sp, #4
     7e4:	sub	sp, sp, #208	; 0xd0
     7e8:	str	r0, [fp, #-192]	; 0xffffff40
     7ec:	str	r1, [fp, #-196]	; 0xffffff3c
     7f0:	str	r2, [fp, #-200]	; 0xffffff38
     7f4:	mov	r3, #0
     7f8:	str	r3, [fp, #-12]
     7fc:	sub	r2, fp, #72	; 0x48
     800:	sub	r3, fp, #76	; 0x4c
     804:	mov	r1, r3
     808:	ldr	r0, [fp, #-192]	; 0xffffff40
     80c:	bl	0 <coda_cursor_get_array_dim>
     810:	mov	r3, r0
     814:	cmp	r3, #0
     818:	beq	824 <transpose_array+0x48>
     81c:	mvn	r3, #0
     820:	b	1084 <transpose_array+0x8a8>
     824:	ldr	r3, [fp, #-76]	; 0xffffffb4
     828:	cmp	r3, #1
     82c:	bgt	838 <transpose_array+0x5c>
     830:	mov	r3, #0
     834:	b	1084 <transpose_array+0x8a8>
     838:	ldr	r3, [fp, #-196]	; 0xffffff3c
     83c:	str	r3, [fp, #-36]	; 0xffffffdc
     840:	mov	r3, #1
     844:	str	r3, [fp, #-8]
     848:	mov	r3, #0
     84c:	str	r3, [fp, #-16]
     850:	b	8cc <transpose_array+0xf0>
     854:	ldr	r3, [fp, #-16]
     858:	lsl	r3, r3, #2
     85c:	sub	r2, fp, #4
     860:	add	r3, r2, r3
     864:	ldr	r2, [r3, #-68]	; 0xffffffbc
     868:	ldr	r3, [fp, #-8]
     86c:	mul	r3, r2, r3
     870:	str	r3, [fp, #-8]
     874:	ldr	r3, [fp, #-16]
     878:	lsl	r3, r3, #2
     87c:	sub	r2, fp, #4
     880:	add	r3, r2, r3
     884:	mov	r2, #0
     888:	str	r2, [r3, #-144]	; 0xffffff70
     88c:	ldr	r3, [fp, #-76]	; 0xffffffb4
     890:	sub	r2, r3, #1
     894:	ldr	r3, [fp, #-16]
     898:	sub	r3, r2, r3
     89c:	lsl	r3, r3, #2
     8a0:	sub	r2, fp, #4
     8a4:	add	r3, r2, r3
     8a8:	ldr	r2, [r3, #-68]	; 0xffffffbc
     8ac:	ldr	r3, [fp, #-16]
     8b0:	lsl	r3, r3, #2
     8b4:	sub	r1, fp, #4
     8b8:	add	r3, r1, r3
     8bc:	str	r2, [r3, #-180]	; 0xffffff4c
     8c0:	ldr	r3, [fp, #-16]
     8c4:	add	r3, r3, #1
     8c8:	str	r3, [fp, #-16]
     8cc:	ldr	r3, [fp, #-76]	; 0xffffffb4
     8d0:	ldr	r2, [fp, #-16]
     8d4:	cmp	r2, r3
     8d8:	blt	854 <transpose_array+0x78>
     8dc:	ldr	r3, [fp, #-8]
     8e0:	cmp	r3, #1
     8e4:	bgt	8f0 <transpose_array+0x114>
     8e8:	mov	r3, #0
     8ec:	b	1084 <transpose_array+0x8a8>
     8f0:	ldr	r3, [fp, #-76]	; 0xffffffb4
     8f4:	lsl	r3, r3, #2
     8f8:	sub	r2, fp, #4
     8fc:	add	r3, r2, r3
     900:	mov	r2, #1
     904:	str	r2, [r3, #-108]	; 0xffffff94
     908:	ldr	r3, [fp, #-76]	; 0xffffffb4
     90c:	lsl	r3, r3, #2
     910:	sub	r2, fp, #4
     914:	add	r3, r2, r3
     918:	mov	r2, #1
     91c:	str	r2, [r3, #-180]	; 0xffffff4c
     920:	ldr	r3, [fp, #-76]	; 0xffffffb4
     924:	str	r3, [fp, #-16]
     928:	b	97c <transpose_array+0x1a0>
     92c:	ldr	r3, [fp, #-16]
     930:	sub	r1, r3, #1
     934:	ldr	r3, [fp, #-16]
     938:	lsl	r3, r3, #2
     93c:	sub	r2, fp, #4
     940:	add	r3, r2, r3
     944:	ldr	r2, [r3, #-108]	; 0xffffff94
     948:	ldr	r3, [fp, #-16]
     94c:	lsl	r3, r3, #2
     950:	sub	r0, fp, #4
     954:	add	r3, r0, r3
     958:	ldr	r3, [r3, #-180]	; 0xffffff4c
     95c:	mul	r2, r3, r2
     960:	lsl	r3, r1, #2
     964:	sub	r1, fp, #4
     968:	add	r3, r1, r3
     96c:	str	r2, [r3, #-108]	; 0xffffff94
     970:	ldr	r3, [fp, #-16]
     974:	sub	r3, r3, #1
     978:	str	r3, [fp, #-16]
     97c:	ldr	r3, [fp, #-16]
     980:	cmp	r3, #0
     984:	bgt	92c <transpose_array+0x150>
     988:	ldr	r3, [fp, #-76]	; 0xffffffb4
     98c:	lsl	r3, r3, #2
     990:	sub	r2, fp, #4
     994:	add	r3, r2, r3
     998:	mov	r2, #0
     99c:	str	r2, [r3, #-180]	; 0xffffff4c
     9a0:	ldr	r3, [fp, #-76]	; 0xffffffb4
     9a4:	lsl	r3, r3, #2
     9a8:	sub	r2, fp, #4
     9ac:	add	r3, r2, r3
     9b0:	mov	r2, #0
     9b4:	str	r2, [r3, #-144]	; 0xffffff70
     9b8:	ldr	r3, [fp, #-8]
     9bc:	ldr	r2, [fp, #-200]	; 0xffffff38
     9c0:	mul	r3, r2, r3
     9c4:	mov	r0, r3
     9c8:	bl	0 <malloc>
     9cc:	mov	r3, r0
     9d0:	str	r3, [fp, #-40]	; 0xffffffd8
     9d4:	ldr	r3, [fp, #-40]	; 0xffffffd8
     9d8:	cmp	r3, #0
     9dc:	bne	a0c <transpose_array+0x230>
     9e0:	ldr	r3, [fp, #-8]
     9e4:	ldr	r2, [fp, #-200]	; 0xffffff38
     9e8:	mul	r2, r2, r3
     9ec:	mov	r3, #93	; 0x5d
     9f0:	str	r3, [sp]
     9f4:	ldr	r3, [pc, #1684]	; 1090 <transpose_array+0x8b4>
     9f8:	ldr	r1, [pc, #1684]	; 1094 <transpose_array+0x8b8>
     9fc:	mvn	r0, #0
     a00:	bl	0 <coda_set_error>
     a04:	mvn	r3, #0
     a08:	b	1084 <transpose_array+0x8a8>
     a0c:	ldr	r3, [fp, #-200]	; 0xffffff38
     a10:	sub	r3, r3, #1
     a14:	cmp	r3, #7
     a18:	ldrls	pc, [pc, r3, lsl #2]
     a1c:	b	1048 <transpose_array+0x86c>
     a20:	.word	0x00000a40
     a24:	.word	0x00000bbc
     a28:	.word	0x00001048
     a2c:	.word	0x00000d40
     a30:	.word	0x00001048
     a34:	.word	0x00001048
     a38:	.word	0x00001048
     a3c:	.word	0x00000ec4
     a40:	mov	r3, #0
     a44:	str	r3, [fp, #-16]
     a48:	b	ba8 <transpose_array+0x3cc>
     a4c:	mov	r3, #0
     a50:	str	r3, [fp, #-20]	; 0xffffffec
     a54:	ldr	r3, [fp, #-12]
     a58:	ldr	r2, [fp, #-40]	; 0xffffffd8
     a5c:	add	r3, r2, r3
     a60:	ldr	r2, [fp, #-16]
     a64:	ldr	r1, [fp, #-36]	; 0xffffffdc
     a68:	add	r2, r1, r2
     a6c:	ldrb	r2, [r2]
     a70:	strb	r2, [r3]
     a74:	ldr	r3, [fp, #-20]	; 0xffffffec
     a78:	lsl	r3, r3, #2
     a7c:	sub	r2, fp, #4
     a80:	add	r3, r2, r3
     a84:	ldr	r3, [r3, #-108]	; 0xffffff94
     a88:	ldr	r2, [fp, #-12]
     a8c:	add	r3, r2, r3
     a90:	str	r3, [fp, #-12]
     a94:	ldr	r3, [fp, #-20]	; 0xffffffec
     a98:	lsl	r3, r3, #2
     a9c:	sub	r2, fp, #4
     aa0:	add	r3, r2, r3
     aa4:	ldr	r3, [r3, #-144]	; 0xffffff70
     aa8:	add	r2, r3, #1
     aac:	ldr	r3, [fp, #-20]	; 0xffffffec
     ab0:	lsl	r3, r3, #2
     ab4:	sub	r1, fp, #4
     ab8:	add	r3, r1, r3
     abc:	str	r2, [r3, #-144]	; 0xffffff70
     ac0:	b	b6c <transpose_array+0x390>
     ac4:	ldr	r3, [fp, #-20]	; 0xffffffec
     ac8:	lsl	r3, r3, #2
     acc:	sub	r2, fp, #4
     ad0:	add	r3, r2, r3
     ad4:	mov	r2, #0
     ad8:	str	r2, [r3, #-144]	; 0xffffff70
     adc:	ldr	r3, [fp, #-20]	; 0xffffffec
     ae0:	lsl	r3, r3, #2
     ae4:	sub	r2, fp, #4
     ae8:	add	r3, r2, r3
     aec:	ldr	r2, [r3, #-108]	; 0xffffff94
     af0:	ldr	r3, [fp, #-20]	; 0xffffffec
     af4:	lsl	r3, r3, #2
     af8:	sub	r1, fp, #4
     afc:	add	r3, r1, r3
     b00:	ldr	r3, [r3, #-180]	; 0xffffff4c
     b04:	mul	r3, r3, r2
     b08:	ldr	r2, [fp, #-12]
     b0c:	sub	r3, r2, r3
     b10:	str	r3, [fp, #-12]
     b14:	ldr	r3, [fp, #-20]	; 0xffffffec
     b18:	add	r3, r3, #1
     b1c:	str	r3, [fp, #-20]	; 0xffffffec
     b20:	ldr	r3, [fp, #-20]	; 0xffffffec
     b24:	lsl	r3, r3, #2
     b28:	sub	r2, fp, #4
     b2c:	add	r3, r2, r3
     b30:	ldr	r3, [r3, #-108]	; 0xffffff94
     b34:	ldr	r2, [fp, #-12]
     b38:	add	r3, r2, r3
     b3c:	str	r3, [fp, #-12]
     b40:	ldr	r3, [fp, #-20]	; 0xffffffec
     b44:	lsl	r3, r3, #2
     b48:	sub	r2, fp, #4
     b4c:	add	r3, r2, r3
     b50:	ldr	r3, [r3, #-144]	; 0xffffff70
     b54:	add	r2, r3, #1
     b58:	ldr	r3, [fp, #-20]	; 0xffffffec
     b5c:	lsl	r3, r3, #2
     b60:	sub	r1, fp, #4
     b64:	add	r3, r1, r3
     b68:	str	r2, [r3, #-144]	; 0xffffff70
     b6c:	ldr	r3, [fp, #-20]	; 0xffffffec
     b70:	lsl	r3, r3, #2
     b74:	sub	r2, fp, #4
     b78:	add	r3, r2, r3
     b7c:	ldr	r2, [r3, #-144]	; 0xffffff70
     b80:	ldr	r3, [fp, #-20]	; 0xffffffec
     b84:	lsl	r3, r3, #2
     b88:	sub	r1, fp, #4
     b8c:	add	r3, r1, r3
     b90:	ldr	r3, [r3, #-180]	; 0xffffff4c
     b94:	cmp	r2, r3
     b98:	beq	ac4 <transpose_array+0x2e8>
     b9c:	ldr	r3, [fp, #-16]
     ba0:	add	r3, r3, #1
     ba4:	str	r3, [fp, #-16]
     ba8:	ldr	r2, [fp, #-16]
     bac:	ldr	r3, [fp, #-8]
     bb0:	cmp	r2, r3
     bb4:	blt	a4c <transpose_array+0x270>
     bb8:	b	105c <transpose_array+0x880>
     bbc:	mov	r3, #0
     bc0:	str	r3, [fp, #-16]
     bc4:	b	d2c <transpose_array+0x550>
     bc8:	mov	r3, #0
     bcc:	str	r3, [fp, #-24]	; 0xffffffe8
     bd0:	ldr	r3, [fp, #-12]
     bd4:	lsl	r3, r3, #1
     bd8:	ldr	r2, [fp, #-40]	; 0xffffffd8
     bdc:	add	r3, r2, r3
     be0:	ldr	r2, [fp, #-16]
     be4:	lsl	r2, r2, #1
     be8:	ldr	r1, [fp, #-36]	; 0xffffffdc
     bec:	add	r2, r1, r2
     bf0:	ldrh	r2, [r2]
     bf4:	strh	r2, [r3]
     bf8:	ldr	r3, [fp, #-24]	; 0xffffffe8
     bfc:	lsl	r3, r3, #2
     c00:	sub	r2, fp, #4
     c04:	add	r3, r2, r3
     c08:	ldr	r3, [r3, #-108]	; 0xffffff94
     c0c:	ldr	r2, [fp, #-12]
     c10:	add	r3, r2, r3
     c14:	str	r3, [fp, #-12]
     c18:	ldr	r3, [fp, #-24]	; 0xffffffe8
     c1c:	lsl	r3, r3, #2
     c20:	sub	r2, fp, #4
     c24:	add	r3, r2, r3
     c28:	ldr	r3, [r3, #-144]	; 0xffffff70
     c2c:	add	r2, r3, #1
     c30:	ldr	r3, [fp, #-24]	; 0xffffffe8
     c34:	lsl	r3, r3, #2
     c38:	sub	r1, fp, #4
     c3c:	add	r3, r1, r3
     c40:	str	r2, [r3, #-144]	; 0xffffff70
     c44:	b	cf0 <transpose_array+0x514>
     c48:	ldr	r3, [fp, #-24]	; 0xffffffe8
     c4c:	lsl	r3, r3, #2
     c50:	sub	r2, fp, #4
     c54:	add	r3, r2, r3
     c58:	mov	r2, #0
     c5c:	str	r2, [r3, #-144]	; 0xffffff70
     c60:	ldr	r3, [fp, #-24]	; 0xffffffe8
     c64:	lsl	r3, r3, #2
     c68:	sub	r2, fp, #4
     c6c:	add	r3, r2, r3
     c70:	ldr	r2, [r3, #-108]	; 0xffffff94
     c74:	ldr	r3, [fp, #-24]	; 0xffffffe8
     c78:	lsl	r3, r3, #2
     c7c:	sub	r1, fp, #4
     c80:	add	r3, r1, r3
     c84:	ldr	r3, [r3, #-180]	; 0xffffff4c
     c88:	mul	r3, r3, r2
     c8c:	ldr	r2, [fp, #-12]
     c90:	sub	r3, r2, r3
     c94:	str	r3, [fp, #-12]
     c98:	ldr	r3, [fp, #-24]	; 0xffffffe8
     c9c:	add	r3, r3, #1
     ca0:	str	r3, [fp, #-24]	; 0xffffffe8
     ca4:	ldr	r3, [fp, #-24]	; 0xffffffe8
     ca8:	lsl	r3, r3, #2
     cac:	sub	r2, fp, #4
     cb0:	add	r3, r2, r3
     cb4:	ldr	r3, [r3, #-108]	; 0xffffff94
     cb8:	ldr	r2, [fp, #-12]
     cbc:	add	r3, r2, r3
     cc0:	str	r3, [fp, #-12]
     cc4:	ldr	r3, [fp, #-24]	; 0xffffffe8
     cc8:	lsl	r3, r3, #2
     ccc:	sub	r2, fp, #4
     cd0:	add	r3, r2, r3
     cd4:	ldr	r3, [r3, #-144]	; 0xffffff70
     cd8:	add	r2, r3, #1
     cdc:	ldr	r3, [fp, #-24]	; 0xffffffe8
     ce0:	lsl	r3, r3, #2
     ce4:	sub	r1, fp, #4
     ce8:	add	r3, r1, r3
     cec:	str	r2, [r3, #-144]	; 0xffffff70
     cf0:	ldr	r3, [fp, #-24]	; 0xffffffe8
     cf4:	lsl	r3, r3, #2
     cf8:	sub	r2, fp, #4
     cfc:	add	r3, r2, r3
     d00:	ldr	r2, [r3, #-144]	; 0xffffff70
     d04:	ldr	r3, [fp, #-24]	; 0xffffffe8
     d08:	lsl	r3, r3, #2
     d0c:	sub	r1, fp, #4
     d10:	add	r3, r1, r3
     d14:	ldr	r3, [r3, #-180]	; 0xffffff4c
     d18:	cmp	r2, r3
     d1c:	beq	c48 <transpose_array+0x46c>
     d20:	ldr	r3, [fp, #-16]
     d24:	add	r3, r3, #1
     d28:	str	r3, [fp, #-16]
     d2c:	ldr	r2, [fp, #-16]
     d30:	ldr	r3, [fp, #-8]
     d34:	cmp	r2, r3
     d38:	blt	bc8 <transpose_array+0x3ec>
     d3c:	b	105c <transpose_array+0x880>
     d40:	mov	r3, #0
     d44:	str	r3, [fp, #-16]
     d48:	b	eb0 <transpose_array+0x6d4>
     d4c:	mov	r3, #0
     d50:	str	r3, [fp, #-28]	; 0xffffffe4
     d54:	ldr	r3, [fp, #-12]
     d58:	lsl	r3, r3, #2
     d5c:	ldr	r2, [fp, #-40]	; 0xffffffd8
     d60:	add	r3, r2, r3
     d64:	ldr	r2, [fp, #-16]
     d68:	lsl	r2, r2, #2
     d6c:	ldr	r1, [fp, #-36]	; 0xffffffdc
     d70:	add	r2, r1, r2
     d74:	ldr	r2, [r2]
     d78:	str	r2, [r3]
     d7c:	ldr	r3, [fp, #-28]	; 0xffffffe4
     d80:	lsl	r3, r3, #2
     d84:	sub	r2, fp, #4
     d88:	add	r3, r2, r3
     d8c:	ldr	r3, [r3, #-108]	; 0xffffff94
     d90:	ldr	r2, [fp, #-12]
     d94:	add	r3, r2, r3
     d98:	str	r3, [fp, #-12]
     d9c:	ldr	r3, [fp, #-28]	; 0xffffffe4
     da0:	lsl	r3, r3, #2
     da4:	sub	r2, fp, #4
     da8:	add	r3, r2, r3
     dac:	ldr	r3, [r3, #-144]	; 0xffffff70
     db0:	add	r2, r3, #1
     db4:	ldr	r3, [fp, #-28]	; 0xffffffe4
     db8:	lsl	r3, r3, #2
     dbc:	sub	r1, fp, #4
     dc0:	add	r3, r1, r3
     dc4:	str	r2, [r3, #-144]	; 0xffffff70
     dc8:	b	e74 <transpose_array+0x698>
     dcc:	ldr	r3, [fp, #-28]	; 0xffffffe4
     dd0:	lsl	r3, r3, #2
     dd4:	sub	r2, fp, #4
     dd8:	add	r3, r2, r3
     ddc:	mov	r2, #0
     de0:	str	r2, [r3, #-144]	; 0xffffff70
     de4:	ldr	r3, [fp, #-28]	; 0xffffffe4
     de8:	lsl	r3, r3, #2
     dec:	sub	r2, fp, #4
     df0:	add	r3, r2, r3
     df4:	ldr	r2, [r3, #-108]	; 0xffffff94
     df8:	ldr	r3, [fp, #-28]	; 0xffffffe4
     dfc:	lsl	r3, r3, #2
     e00:	sub	r1, fp, #4
     e04:	add	r3, r1, r3
     e08:	ldr	r3, [r3, #-180]	; 0xffffff4c
     e0c:	mul	r3, r3, r2
     e10:	ldr	r2, [fp, #-12]
     e14:	sub	r3, r2, r3
     e18:	str	r3, [fp, #-12]
     e1c:	ldr	r3, [fp, #-28]	; 0xffffffe4
     e20:	add	r3, r3, #1
     e24:	str	r3, [fp, #-28]	; 0xffffffe4
     e28:	ldr	r3, [fp, #-28]	; 0xffffffe4
     e2c:	lsl	r3, r3, #2
     e30:	sub	r2, fp, #4
     e34:	add	r3, r2, r3
     e38:	ldr	r3, [r3, #-108]	; 0xffffff94
     e3c:	ldr	r2, [fp, #-12]
     e40:	add	r3, r2, r3
     e44:	str	r3, [fp, #-12]
     e48:	ldr	r3, [fp, #-28]	; 0xffffffe4
     e4c:	lsl	r3, r3, #2
     e50:	sub	r2, fp, #4
     e54:	add	r3, r2, r3
     e58:	ldr	r3, [r3, #-144]	; 0xffffff70
     e5c:	add	r2, r3, #1
     e60:	ldr	r3, [fp, #-28]	; 0xffffffe4
     e64:	lsl	r3, r3, #2
     e68:	sub	r1, fp, #4
     e6c:	add	r3, r1, r3
     e70:	str	r2, [r3, #-144]	; 0xffffff70
     e74:	ldr	r3, [fp, #-28]	; 0xffffffe4
     e78:	lsl	r3, r3, #2
     e7c:	sub	r2, fp, #4
     e80:	add	r3, r2, r3
     e84:	ldr	r2, [r3, #-144]	; 0xffffff70
     e88:	ldr	r3, [fp, #-28]	; 0xffffffe4
     e8c:	lsl	r3, r3, #2
     e90:	sub	r1, fp, #4
     e94:	add	r3, r1, r3
     e98:	ldr	r3, [r3, #-180]	; 0xffffff4c
     e9c:	cmp	r2, r3
     ea0:	beq	dcc <transpose_array+0x5f0>
     ea4:	ldr	r3, [fp, #-16]
     ea8:	add	r3, r3, #1
     eac:	str	r3, [fp, #-16]
     eb0:	ldr	r2, [fp, #-16]
     eb4:	ldr	r3, [fp, #-8]
     eb8:	cmp	r2, r3
     ebc:	blt	d4c <transpose_array+0x570>
     ec0:	b	105c <transpose_array+0x880>
     ec4:	mov	r3, #0
     ec8:	str	r3, [fp, #-16]
     ecc:	b	1034 <transpose_array+0x858>
     ed0:	mov	r3, #0
     ed4:	str	r3, [fp, #-32]	; 0xffffffe0
     ed8:	ldr	r3, [fp, #-12]
     edc:	lsl	r3, r3, #3
     ee0:	ldr	r2, [fp, #-40]	; 0xffffffd8
     ee4:	add	r1, r2, r3
     ee8:	ldr	r3, [fp, #-16]
     eec:	lsl	r3, r3, #3
     ef0:	ldr	r2, [fp, #-36]	; 0xffffffdc
     ef4:	add	r3, r2, r3
     ef8:	ldrd	r2, [r3]
     efc:	strd	r2, [r1]
     f00:	ldr	r3, [fp, #-32]	; 0xffffffe0
     f04:	lsl	r3, r3, #2
     f08:	sub	r2, fp, #4
     f0c:	add	r3, r2, r3
     f10:	ldr	r3, [r3, #-108]	; 0xffffff94
     f14:	ldr	r2, [fp, #-12]
     f18:	add	r3, r2, r3
     f1c:	str	r3, [fp, #-12]
     f20:	ldr	r3, [fp, #-32]	; 0xffffffe0
     f24:	lsl	r3, r3, #2
     f28:	sub	r2, fp, #4
     f2c:	add	r3, r2, r3
     f30:	ldr	r3, [r3, #-144]	; 0xffffff70
     f34:	add	r2, r3, #1
     f38:	ldr	r3, [fp, #-32]	; 0xffffffe0
     f3c:	lsl	r3, r3, #2
     f40:	sub	r1, fp, #4
     f44:	add	r3, r1, r3
     f48:	str	r2, [r3, #-144]	; 0xffffff70
     f4c:	b	ff8 <transpose_array+0x81c>
     f50:	ldr	r3, [fp, #-32]	; 0xffffffe0
     f54:	lsl	r3, r3, #2
     f58:	sub	r2, fp, #4
     f5c:	add	r3, r2, r3
     f60:	mov	r2, #0
     f64:	str	r2, [r3, #-144]	; 0xffffff70
     f68:	ldr	r3, [fp, #-32]	; 0xffffffe0
     f6c:	lsl	r3, r3, #2
     f70:	sub	r2, fp, #4
     f74:	add	r3, r2, r3
     f78:	ldr	r2, [r3, #-108]	; 0xffffff94
     f7c:	ldr	r3, [fp, #-32]	; 0xffffffe0
     f80:	lsl	r3, r3, #2
     f84:	sub	r1, fp, #4
     f88:	add	r3, r1, r3
     f8c:	ldr	r3, [r3, #-180]	; 0xffffff4c
     f90:	mul	r3, r3, r2
     f94:	ldr	r2, [fp, #-12]
     f98:	sub	r3, r2, r3
     f9c:	str	r3, [fp, #-12]
     fa0:	ldr	r3, [fp, #-32]	; 0xffffffe0
     fa4:	add	r3, r3, #1
     fa8:	str	r3, [fp, #-32]	; 0xffffffe0
     fac:	ldr	r3, [fp, #-32]	; 0xffffffe0
     fb0:	lsl	r3, r3, #2
     fb4:	sub	r2, fp, #4
     fb8:	add	r3, r2, r3
     fbc:	ldr	r3, [r3, #-108]	; 0xffffff94
     fc0:	ldr	r2, [fp, #-12]
     fc4:	add	r3, r2, r3
     fc8:	str	r3, [fp, #-12]
     fcc:	ldr	r3, [fp, #-32]	; 0xffffffe0
     fd0:	lsl	r3, r3, #2
     fd4:	sub	r2, fp, #4
     fd8:	add	r3, r2, r3
     fdc:	ldr	r3, [r3, #-144]	; 0xffffff70
     fe0:	add	r2, r3, #1
     fe4:	ldr	r3, [fp, #-32]	; 0xffffffe0
     fe8:	lsl	r3, r3, #2
     fec:	sub	r1, fp, #4
     ff0:	add	r3, r1, r3
     ff4:	str	r2, [r3, #-144]	; 0xffffff70
     ff8:	ldr	r3, [fp, #-32]	; 0xffffffe0
     ffc:	lsl	r3, r3, #2
    1000:	sub	r2, fp, #4
    1004:	add	r3, r2, r3
    1008:	ldr	r2, [r3, #-144]	; 0xffffff70
    100c:	ldr	r3, [fp, #-32]	; 0xffffffe0
    1010:	lsl	r3, r3, #2
    1014:	sub	r1, fp, #4
    1018:	add	r3, r1, r3
    101c:	ldr	r3, [r3, #-180]	; 0xffffff4c
    1020:	cmp	r2, r3
    1024:	beq	f50 <transpose_array+0x774>
    1028:	ldr	r3, [fp, #-16]
    102c:	add	r3, r3, #1
    1030:	str	r3, [fp, #-16]
    1034:	ldr	r2, [fp, #-16]
    1038:	ldr	r3, [fp, #-8]
    103c:	cmp	r2, r3
    1040:	blt	ed0 <transpose_array+0x6f4>
    1044:	b	105c <transpose_array+0x880>
    1048:	ldr	r3, [pc, #72]	; 1098 <transpose_array+0x8bc>
    104c:	mov	r2, #172	; 0xac
    1050:	ldr	r1, [pc, #56]	; 1090 <transpose_array+0x8b4>
    1054:	ldr	r0, [pc, #64]	; 109c <transpose_array+0x8c0>
    1058:	bl	0 <__assert_fail>
    105c:	ldr	r3, [fp, #-8]
    1060:	ldr	r2, [fp, #-200]	; 0xffffff38
    1064:	mul	r3, r2, r3
    1068:	mov	r2, r3
    106c:	ldr	r1, [fp, #-40]	; 0xffffffd8
    1070:	ldr	r0, [fp, #-196]	; 0xffffff3c
    1074:	bl	0 <memcpy>
    1078:	ldr	r0, [fp, #-40]	; 0xffffffd8
    107c:	bl	0 <free>
    1080:	mov	r3, #0
    1084:	mov	r0, r3
    1088:	sub	sp, fp, #4
    108c:	pop	{fp, pc}
    1090:	.word	0x00000180
    1094:	.word	0x000001d4
    1098:	.word	0x00000a0c
    109c:	.word	0x0000020c

000010a0 <ipow>:
    10a0:	push	{fp}		; (str fp, [sp, #-4]!)
    10a4:	add	fp, sp, #0
    10a8:	sub	sp, sp, #28
    10ac:	vstr	d0, [fp, #-20]	; 0xffffffec
    10b0:	str	r0, [fp, #-24]	; 0xffffffe8
    10b4:	mov	r2, #0
    10b8:	ldr	r3, [pc, #144]	; 1150 <ipow+0xb0>
    10bc:	strd	r2, [fp, #-12]
    10c0:	ldr	r3, [fp, #-24]	; 0xffffffe8
    10c4:	cmp	r3, #0
    10c8:	bge	1118 <ipow+0x78>
    10cc:	b	10e0 <ipow+0x40>
    10d0:	vldr	d6, [fp, #-12]
    10d4:	vldr	d7, [fp, #-20]	; 0xffffffec
    10d8:	vmul.f64	d7, d6, d7
    10dc:	vstr	d7, [fp, #-12]
    10e0:	ldr	r3, [fp, #-24]	; 0xffffffe8
    10e4:	add	r2, r3, #1
    10e8:	str	r2, [fp, #-24]	; 0xffffffe8
    10ec:	cmp	r3, #0
    10f0:	bne	10d0 <ipow+0x30>
    10f4:	vldr	d5, [pc, #76]	; 1148 <ipow+0xa8>
    10f8:	vldr	d6, [fp, #-12]
    10fc:	vdiv.f64	d7, d5, d6
    1100:	vstr	d7, [fp, #-12]
    1104:	b	112c <ipow+0x8c>
    1108:	vldr	d6, [fp, #-12]
    110c:	vldr	d7, [fp, #-20]	; 0xffffffec
    1110:	vmul.f64	d7, d6, d7
    1114:	vstr	d7, [fp, #-12]
    1118:	ldr	r3, [fp, #-24]	; 0xffffffe8
    111c:	sub	r2, r3, #1
    1120:	str	r2, [fp, #-24]	; 0xffffffe8
    1124:	cmp	r3, #0
    1128:	bne	1108 <ipow+0x68>
    112c:	ldrd	r2, [fp, #-12]
    1130:	vmov	d7, r2, r3
    1134:	vmov.f64	d0, d7
    1138:	add	sp, fp, #0
    113c:	pop	{fp}		; (ldr fp, [sp], #4)
    1140:	bx	lr
    1144:	nop			; (mov r0, r0)
    1148:	.word	0x00000000
    114c:	.word	0x3ff00000
    1150:	.word	0x3ff00000

00001154 <get_bit_size_boundary>:
    1154:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
    1158:	add	fp, sp, #28
    115c:	sub	sp, sp, #240	; 0xf0
    1160:	str	r0, [fp, #-208]	; 0xffffff30
    1164:	str	r1, [fp, #-212]	; 0xffffff2c
    1168:	strd	r2, [fp, #-220]	; 0xffffff24
    116c:	ldr	r3, [fp, #-208]	; 0xffffff30
    1170:	ldr	r3, [r3, #4]
    1174:	sub	r3, r3, #1
    1178:	ldr	r2, [fp, #-208]	; 0xffffff30
    117c:	add	r3, r3, #1
    1180:	lsl	r3, r3, #4
    1184:	add	r3, r2, r3
    1188:	ldrd	r2, [r3]
    118c:	strd	r2, [fp, #-36]	; 0xffffffdc
    1190:	ldrd	r2, [fp, #-220]	; 0xffffff24
    1194:	cmp	r2, #0
    1198:	sbcs	r3, r3, #0
    119c:	bge	11ac <get_bit_size_boundary+0x58>
    11a0:	mov	r2, #0
    11a4:	mov	r3, #0
    11a8:	strd	r2, [fp, #-220]	; 0xffffff24
    11ac:	ldr	r3, [fp, #-208]	; 0xffffff30
    11b0:	ldr	r3, [r3]
    11b4:	ldr	r3, [r3, #16]
    11b8:	cmp	r3, #0
    11bc:	beq	11d4 <get_bit_size_boundary+0x80>
    11c0:	ldr	r3, [fp, #-208]	; 0xffffff30
    11c4:	ldr	r3, [r3]
    11c8:	ldr	r3, [r3, #16]
    11cc:	cmp	r3, #1
    11d0:	bne	1258 <get_bit_size_boundary+0x104>
    11d4:	ldr	r3, [fp, #-208]	; 0xffffff30
    11d8:	ldr	r3, [r3]
    11dc:	ldr	r3, [r3, #48]	; 0x30
    11e0:	cmp	r3, #0
    11e4:	beq	1208 <get_bit_size_boundary+0xb4>
    11e8:	ldr	r3, [fp, #-208]	; 0xffffff30
    11ec:	ldr	r3, [r3]
    11f0:	ldrd	r2, [r3, #40]	; 0x28
    11f4:	lsl	r7, r3, #3
    11f8:	orr	r7, r7, r2, lsr #29
    11fc:	lsl	r6, r2, #3
    1200:	strd	r6, [fp, #-44]	; 0xffffffd4
    1204:	b	1224 <get_bit_size_boundary+0xd0>
    1208:	ldr	r3, [fp, #-208]	; 0xffffff30
    120c:	ldr	r3, [r3]
    1210:	ldrd	r2, [r3, #8]
    1214:	lsl	r5, r3, #3
    1218:	orr	r5, r5, r2, lsr #29
    121c:	lsl	r4, r2, #3
    1220:	strd	r4, [fp, #-44]	; 0xffffffd4
    1224:	ldrd	r0, [fp, #-36]	; 0xffffffdc
    1228:	ldrd	r2, [fp, #-220]	; 0xffffff24
    122c:	adds	r0, r0, r2
    1230:	adc	r1, r1, r3
    1234:	ldrd	r2, [fp, #-44]	; 0xffffffd4
    1238:	cmp	r0, r2
    123c:	sbcs	r3, r1, r3
    1240:	blt	161c <get_bit_size_boundary+0x4c8>
    1244:	ldr	r1, [pc, #1016]	; 1644 <get_bit_size_boundary+0x4f0>
    1248:	mvn	r0, #300	; 0x12c
    124c:	bl	0 <coda_set_error>
    1250:	mvn	r3, #0
    1254:	b	1638 <get_bit_size_boundary+0x4e4>
    1258:	ldr	r3, [fp, #-208]	; 0xffffff30
    125c:	ldr	r3, [r3, #4]
    1260:	sub	r3, r3, #1
    1264:	str	r3, [fp, #-48]	; 0xffffffd0
    1268:	b	1278 <get_bit_size_boundary+0x124>
    126c:	ldr	r3, [fp, #-48]	; 0xffffffd0
    1270:	sub	r3, r3, #1
    1274:	str	r3, [fp, #-48]	; 0xffffffd0
    1278:	ldr	r3, [fp, #-48]	; 0xffffffd0
    127c:	cmp	r3, #0
    1280:	ble	12c4 <get_bit_size_boundary+0x170>
    1284:	ldr	r2, [fp, #-208]	; 0xffffff30
    1288:	ldr	r3, [fp, #-48]	; 0xffffffd0
    128c:	lsl	r3, r3, #4
    1290:	add	r3, r2, r3
    1294:	ldr	r3, [r3, #8]
    1298:	ldr	r3, [r3]
    129c:	cmp	r3, #0
    12a0:	beq	126c <get_bit_size_boundary+0x118>
    12a4:	ldr	r2, [fp, #-208]	; 0xffffff30
    12a8:	ldr	r3, [fp, #-48]	; 0xffffffd0
    12ac:	lsl	r3, r3, #4
    12b0:	add	r3, r2, r3
    12b4:	ldr	r3, [r3, #8]
    12b8:	ldr	r3, [r3]
    12bc:	cmp	r3, #1
    12c0:	beq	126c <get_bit_size_boundary+0x118>
    12c4:	ldr	r3, [fp, #-48]	; 0xffffffd0
    12c8:	cmp	r3, #0
    12cc:	blt	1310 <get_bit_size_boundary+0x1bc>
    12d0:	ldr	r2, [fp, #-208]	; 0xffffff30
    12d4:	ldr	r3, [fp, #-48]	; 0xffffffd0
    12d8:	lsl	r3, r3, #4
    12dc:	add	r3, r2, r3
    12e0:	ldr	r3, [r3, #8]
    12e4:	ldr	r3, [r3]
    12e8:	cmp	r3, #100	; 0x64
    12ec:	bne	1310 <get_bit_size_boundary+0x1bc>
    12f0:	ldr	r2, [fp, #-208]	; 0xffffff30
    12f4:	ldr	r3, [fp, #-48]	; 0xffffffd0
    12f8:	lsl	r3, r3, #4
    12fc:	add	r3, r2, r3
    1300:	ldr	r3, [r3, #8]
    1304:	ldr	r3, [r3, #8]
    1308:	cmp	r3, #2
    130c:	beq	1324 <get_bit_size_boundary+0x1d0>
    1310:	ldr	r3, [pc, #816]	; 1648 <get_bit_size_boundary+0x4f4>
    1314:	mov	r2, #122	; 0x7a
    1318:	ldr	r1, [pc, #812]	; 164c <get_bit_size_boundary+0x4f8>
    131c:	ldr	r0, [pc, #812]	; 1650 <get_bit_size_boundary+0x4fc>
    1320:	bl	0 <__assert_fail>
    1324:	ldr	r2, [fp, #-208]	; 0xffffff30
    1328:	ldr	r3, [fp, #-48]	; 0xffffffd0
    132c:	lsl	r3, r3, #4
    1330:	add	r3, r2, r3
    1334:	ldr	r3, [r3, #8]
    1338:	ldrd	r2, [r3, #24]
    133c:	lsl	r9, r3, #3
    1340:	orr	r9, r9, r2, lsr #29
    1344:	lsl	r8, r2, #3
    1348:	ldrd	r2, [fp, #-36]	; 0xffffffdc
    134c:	subs	r2, r2, r8
    1350:	sbc	r3, r3, r9
    1354:	strd	r2, [fp, #-36]	; 0xffffffdc
    1358:	ldr	r2, [fp, #-208]	; 0xffffff30
    135c:	ldr	r3, [fp, #-48]	; 0xffffffd0
    1360:	lsl	r3, r3, #4
    1364:	add	r3, r2, r3
    1368:	ldr	r3, [r3, #8]
    136c:	ldr	r3, [r3, #16]
    1370:	lsl	r3, r3, #3
    1374:	mov	r2, r3
    1378:	asr	r3, r2, #31
    137c:	strd	r2, [fp, #-44]	; 0xffffffd4
    1380:	ldrd	r2, [fp, #-36]	; 0xffffffdc
    1384:	cmp	r2, #0
    1388:	sbcs	r3, r3, #0
    138c:	blt	13a4 <get_bit_size_boundary+0x250>
    1390:	ldrd	r2, [fp, #-36]	; 0xffffffdc
    1394:	ldrd	r0, [fp, #-44]	; 0xffffffd4
    1398:	cmp	r0, r2
    139c:	sbcs	r3, r1, r3
    13a0:	bge	146c <get_bit_size_boundary+0x318>
    13a4:	ldrd	r2, [fp, #-36]	; 0xffffffdc
    13a8:	lsr	r1, r2, #3
    13ac:	str	r1, [fp, #-252]	; 0xffffff04
    13b0:	ldr	r1, [fp, #-252]	; 0xffffff04
    13b4:	orr	r1, r1, r3, lsl #29
    13b8:	str	r1, [fp, #-252]	; 0xffffff04
    13bc:	asr	r3, r3, #3
    13c0:	str	r3, [fp, #-248]	; 0xffffff08
    13c4:	sub	r3, fp, #80	; 0x50
    13c8:	mov	r2, r3
    13cc:	ldrd	r0, [fp, #-252]	; 0xffffff04
    13d0:	bl	0 <coda_str64>
    13d4:	ldrd	r2, [fp, #-36]	; 0xffffffdc
    13d8:	mov	r0, #7
    13dc:	mov	r1, #0
    13e0:	and	r2, r2, r0
    13e4:	and	r3, r3, r1
    13e8:	orrs	r3, r2, r3
    13ec:	beq	141c <get_bit_size_boundary+0x2c8>
    13f0:	sub	r3, fp, #80	; 0x50
    13f4:	mov	r0, r3
    13f8:	bl	0 <strlen>
    13fc:	mov	r2, r0
    1400:	sub	r3, fp, #80	; 0x50
    1404:	add	r0, r3, r2
    1408:	ldr	r3, [fp, #-36]	; 0xffffffdc
    140c:	and	r3, r3, #7
    1410:	mov	r2, r3
    1414:	ldr	r1, [pc, #568]	; 1654 <get_bit_size_boundary+0x500>
    1418:	bl	0 <sprintf>
    141c:	ldrd	r2, [fp, #-44]	; 0xffffffd4
    1420:	lsr	r1, r2, #3
    1424:	str	r1, [fp, #-260]	; 0xfffffefc
    1428:	ldr	r1, [fp, #-260]	; 0xfffffefc
    142c:	orr	r1, r1, r3, lsl #29
    1430:	str	r1, [fp, #-260]	; 0xfffffefc
    1434:	asr	r3, r3, #3
    1438:	str	r3, [fp, #-256]	; 0xffffff00
    143c:	sub	r3, fp, #104	; 0x68
    1440:	mov	r2, r3
    1444:	sub	r3, fp, #260	; 0x104
    1448:	ldrd	r0, [r3]
    144c:	bl	0 <coda_str64>
    1450:	sub	r3, fp, #104	; 0x68
    1454:	sub	r2, fp, #80	; 0x50
    1458:	ldr	r1, [pc, #504]	; 1658 <get_bit_size_boundary+0x504>
    145c:	mvn	r0, #300	; 0x12c
    1460:	bl	0 <coda_set_error>
    1464:	mvn	r3, #0
    1468:	b	1638 <get_bit_size_boundary+0x4e4>
    146c:	ldrd	r0, [fp, #-36]	; 0xffffffdc
    1470:	ldrd	r2, [fp, #-220]	; 0xffffff24
    1474:	adds	r2, r2, r0
    1478:	adc	r3, r3, r1
    147c:	ldrd	r0, [fp, #-44]	; 0xffffffd4
    1480:	cmp	r0, r2
    1484:	sbcs	r3, r1, r3
    1488:	bge	161c <get_bit_size_boundary+0x4c8>
    148c:	ldrd	r2, [fp, #-220]	; 0xffffff24
    1490:	lsr	r1, r2, #3
    1494:	str	r1, [fp, #-228]	; 0xffffff1c
    1498:	ldr	r1, [fp, #-228]	; 0xffffff1c
    149c:	orr	r1, r1, r3, lsl #29
    14a0:	str	r1, [fp, #-228]	; 0xffffff1c
    14a4:	asr	r3, r3, #3
    14a8:	str	r3, [fp, #-224]	; 0xffffff20
    14ac:	sub	r3, fp, #136	; 0x88
    14b0:	mov	r2, r3
    14b4:	ldrd	r0, [fp, #-228]	; 0xffffff1c
    14b8:	bl	0 <coda_str64>
    14bc:	ldrd	r2, [fp, #-220]	; 0xffffff24
    14c0:	mov	r0, #7
    14c4:	mov	r1, #0
    14c8:	and	r2, r2, r0
    14cc:	and	r3, r3, r1
    14d0:	orrs	r3, r2, r3
    14d4:	beq	1504 <get_bit_size_boundary+0x3b0>
    14d8:	sub	r3, fp, #136	; 0x88
    14dc:	mov	r0, r3
    14e0:	bl	0 <strlen>
    14e4:	mov	r2, r0
    14e8:	sub	r3, fp, #136	; 0x88
    14ec:	add	r0, r3, r2
    14f0:	ldr	r3, [fp, #-220]	; 0xffffff24
    14f4:	and	r3, r3, #7
    14f8:	mov	r2, r3
    14fc:	ldr	r1, [pc, #336]	; 1654 <get_bit_size_boundary+0x500>
    1500:	bl	0 <sprintf>
    1504:	ldrd	r2, [fp, #-36]	; 0xffffffdc
    1508:	lsr	r1, r2, #3
    150c:	str	r1, [fp, #-236]	; 0xffffff14
    1510:	ldr	r1, [fp, #-236]	; 0xffffff14
    1514:	orr	r1, r1, r3, lsl #29
    1518:	str	r1, [fp, #-236]	; 0xffffff14
    151c:	asr	r3, r3, #3
    1520:	str	r3, [fp, #-232]	; 0xffffff18
    1524:	sub	r3, fp, #168	; 0xa8
    1528:	mov	r2, r3
    152c:	ldrd	r0, [fp, #-236]	; 0xffffff14
    1530:	bl	0 <coda_str64>
    1534:	ldrd	r2, [fp, #-36]	; 0xffffffdc
    1538:	mov	r0, #7
    153c:	mov	r1, #0
    1540:	and	r2, r2, r0
    1544:	and	r3, r3, r1
    1548:	orrs	r3, r2, r3
    154c:	beq	157c <get_bit_size_boundary+0x428>
    1550:	sub	r3, fp, #168	; 0xa8
    1554:	mov	r0, r3
    1558:	bl	0 <strlen>
    155c:	mov	r2, r0
    1560:	sub	r3, fp, #168	; 0xa8
    1564:	add	r0, r3, r2
    1568:	ldr	r3, [fp, #-36]	; 0xffffffdc
    156c:	and	r3, r3, #7
    1570:	mov	r2, r3
    1574:	ldr	r1, [pc, #216]	; 1654 <get_bit_size_boundary+0x500>
    1578:	bl	0 <sprintf>
    157c:	ldrd	r2, [fp, #-44]	; 0xffffffd4
    1580:	lsr	r1, r2, #3
    1584:	str	r1, [fp, #-244]	; 0xffffff0c
    1588:	ldr	r1, [fp, #-244]	; 0xffffff0c
    158c:	orr	r1, r1, r3, lsl #29
    1590:	str	r1, [fp, #-244]	; 0xffffff0c
    1594:	asr	r3, r3, #3
    1598:	str	r3, [fp, #-240]	; 0xffffff10
    159c:	sub	r3, fp, #200	; 0xc8
    15a0:	mov	r2, r3
    15a4:	ldrd	r0, [fp, #-244]	; 0xffffff0c
    15a8:	bl	0 <coda_str64>
    15ac:	ldrd	r2, [fp, #-44]	; 0xffffffd4
    15b0:	mov	r0, #7
    15b4:	mov	r1, #0
    15b8:	and	r2, r2, r0
    15bc:	and	r3, r3, r1
    15c0:	orrs	r3, r2, r3
    15c4:	beq	15f4 <get_bit_size_boundary+0x4a0>
    15c8:	sub	r3, fp, #200	; 0xc8
    15cc:	mov	r0, r3
    15d0:	bl	0 <strlen>
    15d4:	mov	r2, r0
    15d8:	sub	r3, fp, #200	; 0xc8
    15dc:	add	r0, r3, r2
    15e0:	ldr	r3, [fp, #-44]	; 0xffffffd4
    15e4:	and	r3, r3, #7
    15e8:	mov	r2, r3
    15ec:	ldr	r1, [pc, #96]	; 1654 <get_bit_size_boundary+0x500>
    15f0:	bl	0 <sprintf>
    15f4:	sub	r1, fp, #168	; 0xa8
    15f8:	sub	r2, fp, #136	; 0x88
    15fc:	sub	r3, fp, #200	; 0xc8
    1600:	str	r3, [sp]
    1604:	mov	r3, r1
    1608:	ldr	r1, [pc, #76]	; 165c <get_bit_size_boundary+0x508>
    160c:	mvn	r0, #300	; 0x12c
    1610:	bl	0 <coda_set_error>
    1614:	mvn	r3, #0
    1618:	b	1638 <get_bit_size_boundary+0x4e4>
    161c:	ldrd	r0, [fp, #-44]	; 0xffffffd4
    1620:	ldrd	r2, [fp, #-36]	; 0xffffffdc
    1624:	subs	r2, r0, r2
    1628:	sbc	r3, r1, r3
    162c:	ldr	r1, [fp, #-212]	; 0xffffff2c
    1630:	strd	r2, [r1]
    1634:	mov	r3, #0
    1638:	mov	r0, r3
    163c:	sub	sp, fp, #28
    1640:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
    1644:	.word	0x00000000
    1648:	.word	0x00000a1c
    164c:	.word	0x00000210
    1650:	.word	0x00000260
    1654:	.word	0x000002e4
    1658:	.word	0x000002e8
    165c:	.word	0x0000002c

00001660 <parse_mapping_size>:
    1660:	push	{fp, lr}
    1664:	add	fp, sp, #4
    1668:	sub	sp, sp, #24
    166c:	str	r0, [fp, #-16]
    1670:	str	r1, [fp, #-20]	; 0xffffffec
    1674:	str	r2, [fp, #-24]	; 0xffffffe8
    1678:	str	r3, [fp, #-28]	; 0xffffffe4
    167c:	mov	r3, #0
    1680:	str	r3, [fp, #-8]
    1684:	b	178c <parse_mapping_size+0x12c>
    1688:	ldr	r3, [fp, #-24]	; 0xffffffe8
    168c:	ldr	r2, [r3, #12]
    1690:	ldr	r3, [fp, #-8]
    1694:	lsl	r3, r3, #2
    1698:	add	r3, r2, r3
    169c:	ldr	r3, [r3]
    16a0:	ldr	r3, [r3]
    16a4:	cmp	r3, #0
    16a8:	bne	16d0 <parse_mapping_size+0x70>
    16ac:	ldr	r3, [fp, #-20]	; 0xffffffec
    16b0:	cmp	r3, #0
    16b4:	bne	1780 <parse_mapping_size+0x120>
    16b8:	ldr	r1, [fp, #-28]	; 0xffffffe4
    16bc:	mov	r2, #0
    16c0:	mov	r3, #0
    16c4:	strd	r2, [r1]
    16c8:	mov	r3, #1
    16cc:	b	17d0 <parse_mapping_size+0x170>
    16d0:	ldr	r3, [fp, #-24]	; 0xffffffe8
    16d4:	ldr	r2, [r3, #12]
    16d8:	ldr	r3, [fp, #-8]
    16dc:	lsl	r3, r3, #2
    16e0:	add	r3, r2, r3
    16e4:	ldr	r3, [r3]
    16e8:	ldr	r2, [r3]
    16ec:	ldr	r3, [fp, #-20]	; 0xffffffec
    16f0:	cmp	r2, r3
    16f4:	bgt	1780 <parse_mapping_size+0x120>
    16f8:	ldr	r3, [fp, #-24]	; 0xffffffe8
    16fc:	ldr	r2, [r3, #12]
    1700:	ldr	r3, [fp, #-8]
    1704:	lsl	r3, r3, #2
    1708:	add	r3, r2, r3
    170c:	ldr	r3, [r3]
    1710:	ldr	r0, [r3, #4]
    1714:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1718:	ldr	r2, [r3, #12]
    171c:	ldr	r3, [fp, #-8]
    1720:	lsl	r3, r3, #2
    1724:	add	r3, r2, r3
    1728:	ldr	r3, [r3]
    172c:	ldr	r3, [r3]
    1730:	mov	r2, r3
    1734:	ldr	r1, [fp, #-16]
    1738:	bl	0 <memcmp>
    173c:	mov	r3, r0
    1740:	cmp	r3, #0
    1744:	bne	1780 <parse_mapping_size+0x120>
    1748:	ldr	r3, [fp, #-24]	; 0xffffffe8
    174c:	ldr	r2, [r3, #12]
    1750:	ldr	r3, [fp, #-8]
    1754:	lsl	r3, r3, #2
    1758:	add	r3, r2, r3
    175c:	ldr	r3, [r3]
    1760:	ldr	r3, [r3]
    1764:	lsl	r3, r3, #3
    1768:	mov	r2, r3
    176c:	asr	r3, r2, #31
    1770:	ldr	r1, [fp, #-28]	; 0xffffffe4
    1774:	strd	r2, [r1]
    1778:	mov	r3, #1
    177c:	b	17d0 <parse_mapping_size+0x170>
    1780:	ldr	r3, [fp, #-8]
    1784:	add	r3, r3, #1
    1788:	str	r3, [fp, #-8]
    178c:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1790:	ldr	r2, [r3, #8]
    1794:	ldr	r3, [fp, #-8]
    1798:	cmp	r2, r3
    179c:	bgt	1688 <parse_mapping_size+0x28>
    17a0:	ldr	r3, [fp, #-24]	; 0xffffffe8
    17a4:	ldrd	r2, [r3]
    17a8:	cmp	r2, #0
    17ac:	sbcs	r3, r3, #0
    17b0:	blt	17cc <parse_mapping_size+0x16c>
    17b4:	ldr	r3, [fp, #-24]	; 0xffffffe8
    17b8:	ldrd	r2, [r3]
    17bc:	ldr	r1, [fp, #-28]	; 0xffffffe4
    17c0:	strd	r2, [r1]
    17c4:	mov	r3, #1
    17c8:	b	17d0 <parse_mapping_size+0x170>
    17cc:	mov	r3, #0
    17d0:	mov	r0, r3
    17d4:	sub	sp, fp, #4
    17d8:	pop	{fp, pc}

000017dc <parse_integer_mapping>:
    17dc:	push	{fp, lr}
    17e0:	add	fp, sp, #4
    17e4:	sub	sp, sp, #24
    17e8:	str	r0, [fp, #-16]
    17ec:	str	r1, [fp, #-20]	; 0xffffffec
    17f0:	str	r2, [fp, #-24]	; 0xffffffe8
    17f4:	str	r3, [fp, #-28]	; 0xffffffe4
    17f8:	mov	r3, #0
    17fc:	str	r3, [fp, #-8]
    1800:	b	1958 <parse_integer_mapping+0x17c>
    1804:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1808:	ldr	r2, [r3, #12]
    180c:	ldr	r3, [fp, #-8]
    1810:	lsl	r3, r3, #2
    1814:	add	r3, r2, r3
    1818:	ldr	r3, [r3]
    181c:	ldr	r3, [r3]
    1820:	cmp	r3, #0
    1824:	bne	1860 <parse_integer_mapping+0x84>
    1828:	ldr	r3, [fp, #-20]	; 0xffffffec
    182c:	cmp	r3, #0
    1830:	bne	194c <parse_integer_mapping+0x170>
    1834:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1838:	ldr	r2, [r3, #12]
    183c:	ldr	r3, [fp, #-8]
    1840:	lsl	r3, r3, #2
    1844:	add	r3, r2, r3
    1848:	ldr	r3, [r3]
    184c:	ldrd	r2, [r3, #8]
    1850:	ldr	r1, [fp, #4]
    1854:	strd	r2, [r1]
    1858:	mov	r3, #1
    185c:	b	1970 <parse_integer_mapping+0x194>
    1860:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1864:	ldr	r2, [r3, #12]
    1868:	ldr	r3, [fp, #-8]
    186c:	lsl	r3, r3, #2
    1870:	add	r3, r2, r3
    1874:	ldr	r3, [r3]
    1878:	ldr	r2, [r3]
    187c:	ldr	r3, [fp, #-20]	; 0xffffffec
    1880:	cmp	r2, r3
    1884:	bgt	194c <parse_integer_mapping+0x170>
    1888:	ldr	r3, [fp, #-24]	; 0xffffffe8
    188c:	ldr	r2, [r3, #12]
    1890:	ldr	r3, [fp, #-8]
    1894:	lsl	r3, r3, #2
    1898:	add	r3, r2, r3
    189c:	ldr	r3, [r3]
    18a0:	ldr	r0, [r3, #4]
    18a4:	ldr	r3, [fp, #-24]	; 0xffffffe8
    18a8:	ldr	r2, [r3, #12]
    18ac:	ldr	r3, [fp, #-8]
    18b0:	lsl	r3, r3, #2
    18b4:	add	r3, r2, r3
    18b8:	ldr	r3, [r3]
    18bc:	ldr	r3, [r3]
    18c0:	mov	r2, r3
    18c4:	ldr	r1, [fp, #-16]
    18c8:	bl	0 <memcmp>
    18cc:	mov	r3, r0
    18d0:	cmp	r3, #0
    18d4:	bne	194c <parse_integer_mapping+0x170>
    18d8:	ldr	r3, [fp, #-28]	; 0xffffffe4
    18dc:	cmp	r3, #0
    18e0:	bne	1920 <parse_integer_mapping+0x144>
    18e4:	ldr	r3, [fp, #-24]	; 0xffffffe8
    18e8:	ldr	r2, [r3, #12]
    18ec:	ldr	r3, [fp, #-8]
    18f0:	lsl	r3, r3, #2
    18f4:	add	r3, r2, r3
    18f8:	ldr	r3, [r3]
    18fc:	ldr	r2, [r3]
    1900:	ldr	r3, [fp, #-20]	; 0xffffffec
    1904:	cmp	r2, r3
    1908:	beq	1920 <parse_integer_mapping+0x144>
    190c:	ldr	r1, [pc, #104]	; 197c <parse_integer_mapping+0x1a0>
    1910:	mvn	r0, #102	; 0x66
    1914:	bl	0 <coda_set_error>
    1918:	mvn	r3, #0
    191c:	b	1970 <parse_integer_mapping+0x194>
    1920:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1924:	ldr	r2, [r3, #12]
    1928:	ldr	r3, [fp, #-8]
    192c:	lsl	r3, r3, #2
    1930:	add	r3, r2, r3
    1934:	ldr	r3, [r3]
    1938:	ldrd	r2, [r3, #8]
    193c:	ldr	r1, [fp, #4]
    1940:	strd	r2, [r1]
    1944:	mov	r3, #1
    1948:	b	1970 <parse_integer_mapping+0x194>
    194c:	ldr	r3, [fp, #-8]
    1950:	add	r3, r3, #1
    1954:	str	r3, [fp, #-8]
    1958:	ldr	r3, [fp, #-24]	; 0xffffffe8
    195c:	ldr	r2, [r3, #8]
    1960:	ldr	r3, [fp, #-8]
    1964:	cmp	r2, r3
    1968:	bgt	1804 <parse_integer_mapping+0x28>
    196c:	mov	r3, #0
    1970:	mov	r0, r3
    1974:	sub	sp, fp, #4
    1978:	pop	{fp, pc}
    197c:	.word	0x0000031c

00001980 <parse_float_mapping>:
    1980:	push	{fp, lr}
    1984:	add	fp, sp, #4
    1988:	sub	sp, sp, #24
    198c:	str	r0, [fp, #-16]
    1990:	str	r1, [fp, #-20]	; 0xffffffec
    1994:	str	r2, [fp, #-24]	; 0xffffffe8
    1998:	str	r3, [fp, #-28]	; 0xffffffe4
    199c:	mov	r3, #0
    19a0:	str	r3, [fp, #-8]
    19a4:	b	1afc <parse_float_mapping+0x17c>
    19a8:	ldr	r3, [fp, #-24]	; 0xffffffe8
    19ac:	ldr	r2, [r3, #12]
    19b0:	ldr	r3, [fp, #-8]
    19b4:	lsl	r3, r3, #2
    19b8:	add	r3, r2, r3
    19bc:	ldr	r3, [r3]
    19c0:	ldr	r3, [r3]
    19c4:	cmp	r3, #0
    19c8:	bne	1a04 <parse_float_mapping+0x84>
    19cc:	ldr	r3, [fp, #-20]	; 0xffffffec
    19d0:	cmp	r3, #0
    19d4:	bne	1af0 <parse_float_mapping+0x170>
    19d8:	ldr	r3, [fp, #-24]	; 0xffffffe8
    19dc:	ldr	r2, [r3, #12]
    19e0:	ldr	r3, [fp, #-8]
    19e4:	lsl	r3, r3, #2
    19e8:	add	r3, r2, r3
    19ec:	ldr	r3, [r3]
    19f0:	ldrd	r2, [r3, #8]
    19f4:	ldr	r1, [fp, #4]
    19f8:	strd	r2, [r1]
    19fc:	mov	r3, #1
    1a00:	b	1b14 <parse_float_mapping+0x194>
    1a04:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1a08:	ldr	r2, [r3, #12]
    1a0c:	ldr	r3, [fp, #-8]
    1a10:	lsl	r3, r3, #2
    1a14:	add	r3, r2, r3
    1a18:	ldr	r3, [r3]
    1a1c:	ldr	r2, [r3]
    1a20:	ldr	r3, [fp, #-20]	; 0xffffffec
    1a24:	cmp	r2, r3
    1a28:	bgt	1af0 <parse_float_mapping+0x170>
    1a2c:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1a30:	ldr	r2, [r3, #12]
    1a34:	ldr	r3, [fp, #-8]
    1a38:	lsl	r3, r3, #2
    1a3c:	add	r3, r2, r3
    1a40:	ldr	r3, [r3]
    1a44:	ldr	r0, [r3, #4]
    1a48:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1a4c:	ldr	r2, [r3, #12]
    1a50:	ldr	r3, [fp, #-8]
    1a54:	lsl	r3, r3, #2
    1a58:	add	r3, r2, r3
    1a5c:	ldr	r3, [r3]
    1a60:	ldr	r3, [r3]
    1a64:	mov	r2, r3
    1a68:	ldr	r1, [fp, #-16]
    1a6c:	bl	0 <memcmp>
    1a70:	mov	r3, r0
    1a74:	cmp	r3, #0
    1a78:	bne	1af0 <parse_float_mapping+0x170>
    1a7c:	ldr	r3, [fp, #-28]	; 0xffffffe4
    1a80:	cmp	r3, #0
    1a84:	bne	1ac4 <parse_float_mapping+0x144>
    1a88:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1a8c:	ldr	r2, [r3, #12]
    1a90:	ldr	r3, [fp, #-8]
    1a94:	lsl	r3, r3, #2
    1a98:	add	r3, r2, r3
    1a9c:	ldr	r3, [r3]
    1aa0:	ldr	r2, [r3]
    1aa4:	ldr	r3, [fp, #-20]	; 0xffffffec
    1aa8:	cmp	r2, r3
    1aac:	beq	1ac4 <parse_float_mapping+0x144>
    1ab0:	ldr	r1, [pc, #104]	; 1b20 <parse_float_mapping+0x1a0>
    1ab4:	mvn	r0, #102	; 0x66
    1ab8:	bl	0 <coda_set_error>
    1abc:	mvn	r3, #0
    1ac0:	b	1b14 <parse_float_mapping+0x194>
    1ac4:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1ac8:	ldr	r2, [r3, #12]
    1acc:	ldr	r3, [fp, #-8]
    1ad0:	lsl	r3, r3, #2
    1ad4:	add	r3, r2, r3
    1ad8:	ldr	r3, [r3]
    1adc:	ldrd	r2, [r3, #8]
    1ae0:	ldr	r1, [fp, #4]
    1ae4:	strd	r2, [r1]
    1ae8:	mov	r3, #1
    1aec:	b	1b14 <parse_float_mapping+0x194>
    1af0:	ldr	r3, [fp, #-8]
    1af4:	add	r3, r3, #1
    1af8:	str	r3, [fp, #-8]
    1afc:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1b00:	ldr	r2, [r3, #8]
    1b04:	ldr	r3, [fp, #-8]
    1b08:	cmp	r2, r3
    1b0c:	bgt	19a8 <parse_float_mapping+0x28>
    1b10:	mov	r3, #0
    1b14:	mov	r0, r3
    1b18:	sub	sp, fp, #4
    1b1c:	pop	{fp, pc}
    1b20:	.word	0x00000340

00001b24 <coda_ascii_parse_int64>:
    1b24:	push	{fp, lr}
    1b28:	add	fp, sp, #4
    1b2c:	sub	sp, sp, #48	; 0x30
    1b30:	str	r0, [fp, #-40]	; 0xffffffd8
    1b34:	str	r1, [fp, #-44]	; 0xffffffd4
    1b38:	str	r2, [fp, #-48]	; 0xffffffd0
    1b3c:	str	r3, [fp, #-52]	; 0xffffffcc
    1b40:	mov	r3, #0
    1b44:	str	r3, [fp, #-24]	; 0xffffffe8
    1b48:	ldr	r3, [fp, #-44]	; 0xffffffd4
    1b4c:	str	r3, [fp, #-8]
    1b50:	b	1b6c <coda_ascii_parse_int64+0x48>
    1b54:	ldr	r3, [fp, #-40]	; 0xffffffd8
    1b58:	add	r3, r3, #1
    1b5c:	str	r3, [fp, #-40]	; 0xffffffd8
    1b60:	ldr	r3, [fp, #-8]
    1b64:	sub	r3, r3, #1
    1b68:	str	r3, [fp, #-8]
    1b6c:	ldr	r3, [fp, #-8]
    1b70:	cmp	r3, #0
    1b74:	ble	1b98 <coda_ascii_parse_int64+0x74>
    1b78:	ldr	r3, [fp, #-40]	; 0xffffffd8
    1b7c:	ldrb	r3, [r3]
    1b80:	cmp	r3, #32
    1b84:	beq	1b54 <coda_ascii_parse_int64+0x30>
    1b88:	ldr	r3, [fp, #-40]	; 0xffffffd8
    1b8c:	ldrb	r3, [r3]
    1b90:	cmp	r3, #9
    1b94:	beq	1b54 <coda_ascii_parse_int64+0x30>
    1b98:	ldr	r3, [fp, #-40]	; 0xffffffd8
    1b9c:	ldrb	r3, [r3]
    1ba0:	cmp	r3, #43	; 0x2b
    1ba4:	beq	1bb8 <coda_ascii_parse_int64+0x94>
    1ba8:	ldr	r3, [fp, #-40]	; 0xffffffd8
    1bac:	ldrb	r3, [r3]
    1bb0:	cmp	r3, #45	; 0x2d
    1bb4:	bne	1bec <coda_ascii_parse_int64+0xc8>
    1bb8:	ldr	r3, [fp, #-40]	; 0xffffffd8
    1bbc:	ldrb	r3, [r3]
    1bc0:	cmp	r3, #45	; 0x2d
    1bc4:	moveq	r3, #1
    1bc8:	movne	r3, #0
    1bcc:	uxtb	r3, r3
    1bd0:	str	r3, [fp, #-24]	; 0xffffffe8
    1bd4:	ldr	r3, [fp, #-40]	; 0xffffffd8
    1bd8:	add	r3, r3, #1
    1bdc:	str	r3, [fp, #-40]	; 0xffffffd8
    1be0:	ldr	r3, [fp, #-8]
    1be4:	sub	r3, r3, #1
    1be8:	str	r3, [fp, #-8]
    1bec:	mov	r2, #0
    1bf0:	mov	r3, #0
    1bf4:	strd	r2, [fp, #-20]	; 0xffffffec
    1bf8:	mov	r3, #0
    1bfc:	str	r3, [fp, #-12]
    1c00:	b	1cf4 <coda_ascii_parse_int64+0x1d0>
    1c04:	ldr	r3, [fp, #-40]	; 0xffffffd8
    1c08:	ldrb	r3, [r3]
    1c0c:	cmp	r3, #47	; 0x2f
    1c10:	bls	1d00 <coda_ascii_parse_int64+0x1dc>
    1c14:	ldr	r3, [fp, #-40]	; 0xffffffd8
    1c18:	ldrb	r3, [r3]
    1c1c:	cmp	r3, #57	; 0x39
    1c20:	bhi	1d00 <coda_ascii_parse_int64+0x1dc>
    1c24:	ldr	r3, [fp, #-40]	; 0xffffffd8
    1c28:	ldrb	r3, [r3]
    1c2c:	sub	r3, r3, #48	; 0x30
    1c30:	mov	r2, r3
    1c34:	asr	r3, r2, #31
    1c38:	strd	r2, [fp, #-36]	; 0xffffffdc
    1c3c:	mvn	r0, #0
    1c40:	mvn	r1, #-2147483648	; 0x80000000
    1c44:	ldrd	r2, [fp, #-36]	; 0xffffffdc
    1c48:	subs	r0, r0, r2
    1c4c:	sbc	r1, r1, r3
    1c50:	mov	r2, #10
    1c54:	mov	r3, #0
    1c58:	bl	0 <__aeabi_ldivmod>
    1c5c:	mov	r2, r0
    1c60:	mov	r3, r1
    1c64:	mov	r0, r2
    1c68:	mov	r1, r3
    1c6c:	ldrd	r2, [fp, #-20]	; 0xffffffec
    1c70:	cmp	r0, r2
    1c74:	sbcs	r3, r1, r3
    1c78:	bge	1c90 <coda_ascii_parse_int64+0x16c>
    1c7c:	ldr	r1, [pc, #348]	; 1de0 <coda_ascii_parse_int64+0x2bc>
    1c80:	mvn	r0, #102	; 0x66
    1c84:	bl	0 <coda_set_error>
    1c88:	mvn	r3, #0
    1c8c:	b	1dd4 <coda_ascii_parse_int64+0x2b0>
    1c90:	ldr	r3, [fp, #-16]
    1c94:	mov	r2, #10
    1c98:	mul	r2, r2, r3
    1c9c:	ldr	r3, [fp, #-20]	; 0xffffffec
    1ca0:	mov	r1, #0
    1ca4:	mul	r3, r1, r3
    1ca8:	add	r1, r2, r3
    1cac:	ldr	r3, [fp, #-20]	; 0xffffffec
    1cb0:	mov	r2, #10
    1cb4:	umull	r2, r3, r3, r2
    1cb8:	add	r1, r1, r3
    1cbc:	mov	r3, r1
    1cc0:	ldrd	r0, [fp, #-36]	; 0xffffffdc
    1cc4:	adds	r2, r2, r0
    1cc8:	adc	r3, r3, r1
    1ccc:	strd	r2, [fp, #-20]	; 0xffffffec
    1cd0:	ldr	r3, [fp, #-12]
    1cd4:	add	r3, r3, #1
    1cd8:	str	r3, [fp, #-12]
    1cdc:	ldr	r3, [fp, #-40]	; 0xffffffd8
    1ce0:	add	r3, r3, #1
    1ce4:	str	r3, [fp, #-40]	; 0xffffffd8
    1ce8:	ldr	r3, [fp, #-8]
    1cec:	sub	r3, r3, #1
    1cf0:	str	r3, [fp, #-8]
    1cf4:	ldr	r3, [fp, #-8]
    1cf8:	cmp	r3, #0
    1cfc:	bgt	1c04 <coda_ascii_parse_int64+0xe0>
    1d00:	ldr	r3, [fp, #-12]
    1d04:	cmp	r3, #0
    1d08:	bne	1d20 <coda_ascii_parse_int64+0x1fc>
    1d0c:	ldr	r1, [pc, #208]	; 1de4 <coda_ascii_parse_int64+0x2c0>
    1d10:	mvn	r0, #102	; 0x66
    1d14:	bl	0 <coda_set_error>
    1d18:	mvn	r3, #0
    1d1c:	b	1dd4 <coda_ascii_parse_int64+0x2b0>
    1d20:	ldr	r3, [fp, #-52]	; 0xffffffcc
    1d24:	cmp	r3, #0
    1d28:	bne	1da0 <coda_ascii_parse_int64+0x27c>
    1d2c:	ldr	r3, [fp, #-8]
    1d30:	cmp	r3, #0
    1d34:	beq	1da0 <coda_ascii_parse_int64+0x27c>
    1d38:	b	1d54 <coda_ascii_parse_int64+0x230>
    1d3c:	ldr	r3, [fp, #-40]	; 0xffffffd8
    1d40:	add	r3, r3, #1
    1d44:	str	r3, [fp, #-40]	; 0xffffffd8
    1d48:	ldr	r3, [fp, #-8]
    1d4c:	sub	r3, r3, #1
    1d50:	str	r3, [fp, #-8]
    1d54:	ldr	r3, [fp, #-8]
    1d58:	cmp	r3, #0
    1d5c:	ble	1d80 <coda_ascii_parse_int64+0x25c>
    1d60:	ldr	r3, [fp, #-40]	; 0xffffffd8
    1d64:	ldrb	r3, [r3]
    1d68:	cmp	r3, #32
    1d6c:	beq	1d3c <coda_ascii_parse_int64+0x218>
    1d70:	ldr	r3, [fp, #-40]	; 0xffffffd8
    1d74:	ldrb	r3, [r3]
    1d78:	cmp	r3, #9
    1d7c:	beq	1d3c <coda_ascii_parse_int64+0x218>
    1d80:	ldr	r3, [fp, #-8]
    1d84:	cmp	r3, #0
    1d88:	beq	1da0 <coda_ascii_parse_int64+0x27c>
    1d8c:	ldr	r1, [pc, #84]	; 1de8 <coda_ascii_parse_int64+0x2c4>
    1d90:	mvn	r0, #102	; 0x66
    1d94:	bl	0 <coda_set_error>
    1d98:	mvn	r3, #0
    1d9c:	b	1dd4 <coda_ascii_parse_int64+0x2b0>
    1da0:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1da4:	cmp	r3, #0
    1da8:	beq	1dbc <coda_ascii_parse_int64+0x298>
    1dac:	ldrd	r2, [fp, #-20]	; 0xffffffec
    1db0:	rsbs	r2, r2, #0
    1db4:	rsc	r3, r3, #0
    1db8:	strd	r2, [fp, #-20]	; 0xffffffec
    1dbc:	ldr	r1, [fp, #-48]	; 0xffffffd0
    1dc0:	ldrd	r2, [fp, #-20]	; 0xffffffec
    1dc4:	strd	r2, [r1]
    1dc8:	ldr	r2, [fp, #-44]	; 0xffffffd4
    1dcc:	ldr	r3, [fp, #-8]
    1dd0:	sub	r3, r2, r3
    1dd4:	mov	r0, r3
    1dd8:	sub	sp, fp, #4
    1ddc:	pop	{fp, pc}
    1de0:	.word	0x00000360
    1de4:	.word	0x00000384
    1de8:	.word	0x0000031c

00001dec <coda_ascii_parse_uint64>:
    1dec:	push	{fp, lr}
    1df0:	add	fp, sp, #4
    1df4:	sub	sp, sp, #40	; 0x28
    1df8:	str	r0, [fp, #-32]	; 0xffffffe0
    1dfc:	str	r1, [fp, #-36]	; 0xffffffdc
    1e00:	str	r2, [fp, #-40]	; 0xffffffd8
    1e04:	str	r3, [fp, #-44]	; 0xffffffd4
    1e08:	ldr	r3, [fp, #-36]	; 0xffffffdc
    1e0c:	str	r3, [fp, #-8]
    1e10:	b	1e2c <coda_ascii_parse_uint64+0x40>
    1e14:	ldr	r3, [fp, #-32]	; 0xffffffe0
    1e18:	add	r3, r3, #1
    1e1c:	str	r3, [fp, #-32]	; 0xffffffe0
    1e20:	ldr	r3, [fp, #-8]
    1e24:	sub	r3, r3, #1
    1e28:	str	r3, [fp, #-8]
    1e2c:	ldr	r3, [fp, #-8]
    1e30:	cmp	r3, #0
    1e34:	ble	1e58 <coda_ascii_parse_uint64+0x6c>
    1e38:	ldr	r3, [fp, #-32]	; 0xffffffe0
    1e3c:	ldrb	r3, [r3]
    1e40:	cmp	r3, #32
    1e44:	beq	1e14 <coda_ascii_parse_uint64+0x28>
    1e48:	ldr	r3, [fp, #-32]	; 0xffffffe0
    1e4c:	ldrb	r3, [r3]
    1e50:	cmp	r3, #9
    1e54:	beq	1e14 <coda_ascii_parse_uint64+0x28>
    1e58:	ldr	r3, [fp, #-32]	; 0xffffffe0
    1e5c:	ldrb	r3, [r3]
    1e60:	cmp	r3, #43	; 0x2b
    1e64:	bne	1e80 <coda_ascii_parse_uint64+0x94>
    1e68:	ldr	r3, [fp, #-32]	; 0xffffffe0
    1e6c:	add	r3, r3, #1
    1e70:	str	r3, [fp, #-32]	; 0xffffffe0
    1e74:	ldr	r3, [fp, #-8]
    1e78:	sub	r3, r3, #1
    1e7c:	str	r3, [fp, #-8]
    1e80:	mov	r2, #0
    1e84:	mov	r3, #0
    1e88:	strd	r2, [fp, #-20]	; 0xffffffec
    1e8c:	mov	r3, #0
    1e90:	str	r3, [fp, #-12]
    1e94:	b	1f80 <coda_ascii_parse_uint64+0x194>
    1e98:	ldr	r3, [fp, #-32]	; 0xffffffe0
    1e9c:	ldrb	r3, [r3]
    1ea0:	cmp	r3, #47	; 0x2f
    1ea4:	bls	1f8c <coda_ascii_parse_uint64+0x1a0>
    1ea8:	ldr	r3, [fp, #-32]	; 0xffffffe0
    1eac:	ldrb	r3, [r3]
    1eb0:	cmp	r3, #57	; 0x39
    1eb4:	bhi	1f8c <coda_ascii_parse_uint64+0x1a0>
    1eb8:	ldr	r3, [fp, #-32]	; 0xffffffe0
    1ebc:	ldrb	r3, [r3]
    1ec0:	sub	r3, r3, #48	; 0x30
    1ec4:	mov	r2, r3
    1ec8:	asr	r3, r2, #31
    1ecc:	strd	r2, [fp, #-28]	; 0xffffffe4
    1ed0:	ldrd	r2, [fp, #-28]	; 0xffffffe4
    1ed4:	mvn	r0, r2
    1ed8:	mvn	r1, r3
    1edc:	mov	r2, #10
    1ee0:	mov	r3, #0
    1ee4:	bl	0 <__aeabi_uldivmod>
    1ee8:	mov	r2, r0
    1eec:	mov	r3, r1
    1ef0:	mov	r0, r2
    1ef4:	mov	r1, r3
    1ef8:	ldrd	r2, [fp, #-20]	; 0xffffffec
    1efc:	cmp	r1, r3
    1f00:	cmpeq	r0, r2
    1f04:	bcs	1f1c <coda_ascii_parse_uint64+0x130>
    1f08:	ldr	r1, [pc, #320]	; 2050 <coda_ascii_parse_uint64+0x264>
    1f0c:	mvn	r0, #102	; 0x66
    1f10:	bl	0 <coda_set_error>
    1f14:	mvn	r3, #0
    1f18:	b	2044 <coda_ascii_parse_uint64+0x258>
    1f1c:	ldr	r3, [fp, #-16]
    1f20:	mov	r2, #10
    1f24:	mul	r2, r2, r3
    1f28:	ldr	r3, [fp, #-20]	; 0xffffffec
    1f2c:	mov	r1, #0
    1f30:	mul	r3, r1, r3
    1f34:	add	r1, r2, r3
    1f38:	ldr	r3, [fp, #-20]	; 0xffffffec
    1f3c:	mov	r2, #10
    1f40:	umull	r2, r3, r3, r2
    1f44:	add	r1, r1, r3
    1f48:	mov	r3, r1
    1f4c:	ldrd	r0, [fp, #-28]	; 0xffffffe4
    1f50:	adds	r2, r2, r0
    1f54:	adc	r3, r3, r1
    1f58:	strd	r2, [fp, #-20]	; 0xffffffec
    1f5c:	ldr	r3, [fp, #-12]
    1f60:	add	r3, r3, #1
    1f64:	str	r3, [fp, #-12]
    1f68:	ldr	r3, [fp, #-32]	; 0xffffffe0
    1f6c:	add	r3, r3, #1
    1f70:	str	r3, [fp, #-32]	; 0xffffffe0
    1f74:	ldr	r3, [fp, #-8]
    1f78:	sub	r3, r3, #1
    1f7c:	str	r3, [fp, #-8]
    1f80:	ldr	r3, [fp, #-8]
    1f84:	cmp	r3, #0
    1f88:	bgt	1e98 <coda_ascii_parse_uint64+0xac>
    1f8c:	ldr	r3, [fp, #-12]
    1f90:	cmp	r3, #0
    1f94:	bne	1fac <coda_ascii_parse_uint64+0x1c0>
    1f98:	ldr	r1, [pc, #180]	; 2054 <coda_ascii_parse_uint64+0x268>
    1f9c:	mvn	r0, #102	; 0x66
    1fa0:	bl	0 <coda_set_error>
    1fa4:	mvn	r3, #0
    1fa8:	b	2044 <coda_ascii_parse_uint64+0x258>
    1fac:	ldr	r3, [fp, #-44]	; 0xffffffd4
    1fb0:	cmp	r3, #0
    1fb4:	bne	202c <coda_ascii_parse_uint64+0x240>
    1fb8:	ldr	r3, [fp, #-8]
    1fbc:	cmp	r3, #0
    1fc0:	beq	202c <coda_ascii_parse_uint64+0x240>
    1fc4:	b	1fe0 <coda_ascii_parse_uint64+0x1f4>
    1fc8:	ldr	r3, [fp, #-32]	; 0xffffffe0
    1fcc:	add	r3, r3, #1
    1fd0:	str	r3, [fp, #-32]	; 0xffffffe0
    1fd4:	ldr	r3, [fp, #-8]
    1fd8:	sub	r3, r3, #1
    1fdc:	str	r3, [fp, #-8]
    1fe0:	ldr	r3, [fp, #-8]
    1fe4:	cmp	r3, #0
    1fe8:	ble	200c <coda_ascii_parse_uint64+0x220>
    1fec:	ldr	r3, [fp, #-32]	; 0xffffffe0
    1ff0:	ldrb	r3, [r3]
    1ff4:	cmp	r3, #32
    1ff8:	beq	1fc8 <coda_ascii_parse_uint64+0x1dc>
    1ffc:	ldr	r3, [fp, #-32]	; 0xffffffe0
    2000:	ldrb	r3, [r3]
    2004:	cmp	r3, #9
    2008:	beq	1fc8 <coda_ascii_parse_uint64+0x1dc>
    200c:	ldr	r3, [fp, #-8]
    2010:	cmp	r3, #0
    2014:	beq	202c <coda_ascii_parse_uint64+0x240>
    2018:	ldr	r1, [pc, #56]	; 2058 <coda_ascii_parse_uint64+0x26c>
    201c:	mvn	r0, #102	; 0x66
    2020:	bl	0 <coda_set_error>
    2024:	mvn	r3, #0
    2028:	b	2044 <coda_ascii_parse_uint64+0x258>
    202c:	ldr	r1, [fp, #-40]	; 0xffffffd8
    2030:	ldrd	r2, [fp, #-20]	; 0xffffffec
    2034:	strd	r2, [r1]
    2038:	ldr	r2, [fp, #-36]	; 0xffffffdc
    203c:	ldr	r3, [fp, #-8]
    2040:	sub	r3, r2, r3
    2044:	mov	r0, r3
    2048:	sub	sp, fp, #4
    204c:	pop	{fp, pc}
    2050:	.word	0x00000360
    2054:	.word	0x00000384
    2058:	.word	0x0000031c

0000205c <coda_ascii_parse_double>:
    205c:	push	{fp, lr}
    2060:	add	fp, sp, #4
    2064:	sub	sp, sp, #56	; 0x38
    2068:	str	r0, [fp, #-48]	; 0xffffffd0
    206c:	str	r1, [fp, #-52]	; 0xffffffcc
    2070:	str	r2, [fp, #-56]	; 0xffffffc8
    2074:	str	r3, [fp, #-60]	; 0xffffffc4
    2078:	mov	r3, #0
    207c:	str	r3, [fp, #-36]	; 0xffffffdc
    2080:	ldr	r3, [fp, #-52]	; 0xffffffcc
    2084:	str	r3, [fp, #-8]
    2088:	b	20a4 <coda_ascii_parse_double+0x48>
    208c:	ldr	r3, [fp, #-48]	; 0xffffffd0
    2090:	add	r3, r3, #1
    2094:	str	r3, [fp, #-48]	; 0xffffffd0
    2098:	ldr	r3, [fp, #-8]
    209c:	sub	r3, r3, #1
    20a0:	str	r3, [fp, #-8]
    20a4:	ldr	r3, [fp, #-8]
    20a8:	cmp	r3, #0
    20ac:	ble	20d0 <coda_ascii_parse_double+0x74>
    20b0:	ldr	r3, [fp, #-48]	; 0xffffffd0
    20b4:	ldrb	r3, [r3]
    20b8:	cmp	r3, #32
    20bc:	beq	208c <coda_ascii_parse_double+0x30>
    20c0:	ldr	r3, [fp, #-48]	; 0xffffffd0
    20c4:	ldrb	r3, [r3]
    20c8:	cmp	r3, #9
    20cc:	beq	208c <coda_ascii_parse_double+0x30>
    20d0:	mov	r3, #0
    20d4:	str	r3, [fp, #-20]	; 0xffffffec
    20d8:	ldr	r3, [fp, #-8]
    20dc:	cmp	r3, #0
    20e0:	ble	2140 <coda_ascii_parse_double+0xe4>
    20e4:	ldr	r3, [fp, #-48]	; 0xffffffd0
    20e8:	ldrb	r3, [r3]
    20ec:	cmp	r3, #43	; 0x2b
    20f0:	beq	2104 <coda_ascii_parse_double+0xa8>
    20f4:	ldr	r3, [fp, #-48]	; 0xffffffd0
    20f8:	ldrb	r3, [r3]
    20fc:	cmp	r3, #45	; 0x2d
    2100:	bne	2140 <coda_ascii_parse_double+0xe4>
    2104:	ldr	r3, [fp, #-48]	; 0xffffffd0
    2108:	ldrb	r3, [r3]
    210c:	cmp	r3, #45	; 0x2d
    2110:	moveq	r3, #1
    2114:	movne	r3, #0
    2118:	uxtb	r3, r3
    211c:	str	r3, [fp, #-36]	; 0xffffffdc
    2120:	mov	r3, #1
    2124:	str	r3, [fp, #-20]	; 0xffffffec
    2128:	ldr	r3, [fp, #-48]	; 0xffffffd0
    212c:	add	r3, r3, #1
    2130:	str	r3, [fp, #-48]	; 0xffffffd0
    2134:	ldr	r3, [fp, #-8]
    2138:	sub	r3, r3, #1
    213c:	str	r3, [fp, #-8]
    2140:	ldr	r3, [fp, #-8]
    2144:	cmp	r3, #2
    2148:	ble	2300 <coda_ascii_parse_double+0x2a4>
    214c:	ldr	r3, [fp, #-48]	; 0xffffffd0
    2150:	ldrb	r3, [r3]
    2154:	cmp	r3, #78	; 0x4e
    2158:	beq	216c <coda_ascii_parse_double+0x110>
    215c:	ldr	r3, [fp, #-48]	; 0xffffffd0
    2160:	ldrb	r3, [r3]
    2164:	cmp	r3, #110	; 0x6e
    2168:	bne	2220 <coda_ascii_parse_double+0x1c4>
    216c:	ldr	r3, [fp, #-48]	; 0xffffffd0
    2170:	add	r3, r3, #1
    2174:	ldrb	r3, [r3]
    2178:	cmp	r3, #65	; 0x41
    217c:	beq	2194 <coda_ascii_parse_double+0x138>
    2180:	ldr	r3, [fp, #-48]	; 0xffffffd0
    2184:	add	r3, r3, #1
    2188:	ldrb	r3, [r3]
    218c:	cmp	r3, #97	; 0x61
    2190:	bne	2220 <coda_ascii_parse_double+0x1c4>
    2194:	ldr	r3, [fp, #-48]	; 0xffffffd0
    2198:	add	r3, r3, #2
    219c:	ldrb	r3, [r3]
    21a0:	cmp	r3, #78	; 0x4e
    21a4:	beq	21bc <coda_ascii_parse_double+0x160>
    21a8:	ldr	r3, [fp, #-48]	; 0xffffffd0
    21ac:	add	r3, r3, #2
    21b0:	ldrb	r3, [r3]
    21b4:	cmp	r3, #110	; 0x6e
    21b8:	bne	2220 <coda_ascii_parse_double+0x1c4>
    21bc:	ldr	r3, [fp, #-20]	; 0xffffffec
    21c0:	cmp	r3, #0
    21c4:	bne	2220 <coda_ascii_parse_double+0x1c4>
    21c8:	ldr	r3, [fp, #-8]
    21cc:	sub	r3, r3, #3
    21d0:	str	r3, [fp, #-8]
    21d4:	ldr	r3, [fp, #-60]	; 0xffffffc4
    21d8:	cmp	r3, #0
    21dc:	bne	2200 <coda_ascii_parse_double+0x1a4>
    21e0:	ldr	r3, [fp, #-8]
    21e4:	cmp	r3, #0
    21e8:	beq	2200 <coda_ascii_parse_double+0x1a4>
    21ec:	ldr	r1, [pc, #1300]	; 2708 <coda_ascii_parse_double+0x6ac>
    21f0:	mvn	r0, #102	; 0x66
    21f4:	bl	0 <coda_set_error>
    21f8:	mvn	r3, #0
    21fc:	b	26f0 <coda_ascii_parse_double+0x694>
    2200:	bl	0 <coda_NaN>
    2204:	vmov.f64	d7, d0
    2208:	ldr	r3, [fp, #-56]	; 0xffffffc8
    220c:	vstr	d7, [r3]
    2210:	ldr	r2, [fp, #-52]	; 0xffffffcc
    2214:	ldr	r3, [fp, #-8]
    2218:	sub	r3, r2, r3
    221c:	b	26f0 <coda_ascii_parse_double+0x694>
    2220:	ldr	r3, [fp, #-48]	; 0xffffffd0
    2224:	ldrb	r3, [r3]
    2228:	cmp	r3, #73	; 0x49
    222c:	beq	2240 <coda_ascii_parse_double+0x1e4>
    2230:	ldr	r3, [fp, #-48]	; 0xffffffd0
    2234:	ldrb	r3, [r3]
    2238:	cmp	r3, #105	; 0x69
    223c:	bne	2300 <coda_ascii_parse_double+0x2a4>
    2240:	ldr	r3, [fp, #-48]	; 0xffffffd0
    2244:	add	r3, r3, #1
    2248:	ldrb	r3, [r3]
    224c:	cmp	r3, #78	; 0x4e
    2250:	beq	2268 <coda_ascii_parse_double+0x20c>
    2254:	ldr	r3, [fp, #-48]	; 0xffffffd0
    2258:	add	r3, r3, #1
    225c:	ldrb	r3, [r3]
    2260:	cmp	r3, #110	; 0x6e
    2264:	bne	2300 <coda_ascii_parse_double+0x2a4>
    2268:	ldr	r3, [fp, #-48]	; 0xffffffd0
    226c:	add	r3, r3, #2
    2270:	ldrb	r3, [r3]
    2274:	cmp	r3, #70	; 0x46
    2278:	beq	2290 <coda_ascii_parse_double+0x234>
    227c:	ldr	r3, [fp, #-48]	; 0xffffffd0
    2280:	add	r3, r3, #2
    2284:	ldrb	r3, [r3]
    2288:	cmp	r3, #102	; 0x66
    228c:	bne	2300 <coda_ascii_parse_double+0x2a4>
    2290:	ldr	r3, [fp, #-8]
    2294:	sub	r3, r3, #3
    2298:	str	r3, [fp, #-8]
    229c:	ldr	r3, [fp, #-60]	; 0xffffffc4
    22a0:	cmp	r3, #0
    22a4:	bne	22c8 <coda_ascii_parse_double+0x26c>
    22a8:	ldr	r3, [fp, #-8]
    22ac:	cmp	r3, #0
    22b0:	beq	22c8 <coda_ascii_parse_double+0x26c>
    22b4:	ldr	r1, [pc, #1100]	; 2708 <coda_ascii_parse_double+0x6ac>
    22b8:	mvn	r0, #102	; 0x66
    22bc:	bl	0 <coda_set_error>
    22c0:	mvn	r3, #0
    22c4:	b	26f0 <coda_ascii_parse_double+0x694>
    22c8:	ldr	r3, [fp, #-36]	; 0xffffffdc
    22cc:	cmp	r3, #0
    22d0:	beq	22e0 <coda_ascii_parse_double+0x284>
    22d4:	bl	0 <coda_MinInf>
    22d8:	vmov.f64	d7, d0
    22dc:	b	22e8 <coda_ascii_parse_double+0x28c>
    22e0:	bl	0 <coda_PlusInf>
    22e4:	vmov.f64	d7, d0
    22e8:	ldr	r3, [fp, #-56]	; 0xffffffc8
    22ec:	vstr	d7, [r3]
    22f0:	ldr	r2, [fp, #-52]	; 0xffffffcc
    22f4:	ldr	r3, [fp, #-8]
    22f8:	sub	r3, r2, r3
    22fc:	b	26f0 <coda_ascii_parse_double+0x694>
    2300:	mov	r2, #0
    2304:	mov	r3, #0
    2308:	strd	r2, [fp, #-28]	; 0xffffffe4
    230c:	mov	r3, #0
    2310:	str	r3, [fp, #-32]	; 0xffffffe0
    2314:	mov	r3, #0
    2318:	str	r3, [fp, #-12]
    231c:	b	238c <coda_ascii_parse_double+0x330>
    2320:	ldr	r3, [fp, #-48]	; 0xffffffd0
    2324:	ldrb	r3, [r3]
    2328:	cmp	r3, #47	; 0x2f
    232c:	bls	2398 <coda_ascii_parse_double+0x33c>
    2330:	ldr	r3, [fp, #-48]	; 0xffffffd0
    2334:	ldrb	r3, [r3]
    2338:	cmp	r3, #57	; 0x39
    233c:	bhi	2398 <coda_ascii_parse_double+0x33c>
    2340:	vldr	d7, [fp, #-28]	; 0xffffffe4
    2344:	vldr	d6, [pc, #948]	; 2700 <coda_ascii_parse_double+0x6a4>
    2348:	vmul.f64	d6, d7, d6
    234c:	ldr	r3, [fp, #-48]	; 0xffffffd0
    2350:	ldrb	r3, [r3]
    2354:	sub	r3, r3, #48	; 0x30
    2358:	vmov	s15, r3
    235c:	vcvt.f64.s32	d7, s15
    2360:	vadd.f64	d7, d6, d7
    2364:	vstr	d7, [fp, #-28]	; 0xffffffe4
    2368:	ldr	r3, [fp, #-12]
    236c:	add	r3, r3, #1
    2370:	str	r3, [fp, #-12]
    2374:	ldr	r3, [fp, #-48]	; 0xffffffd0
    2378:	add	r3, r3, #1
    237c:	str	r3, [fp, #-48]	; 0xffffffd0
    2380:	ldr	r3, [fp, #-8]
    2384:	sub	r3, r3, #1
    2388:	str	r3, [fp, #-8]
    238c:	ldr	r3, [fp, #-8]
    2390:	cmp	r3, #0
    2394:	bgt	2320 <coda_ascii_parse_double+0x2c4>
    2398:	ldr	r3, [fp, #-8]
    239c:	cmp	r3, #0
    23a0:	ble	2454 <coda_ascii_parse_double+0x3f8>
    23a4:	ldr	r3, [fp, #-48]	; 0xffffffd0
    23a8:	ldrb	r3, [r3]
    23ac:	cmp	r3, #46	; 0x2e
    23b0:	bne	2454 <coda_ascii_parse_double+0x3f8>
    23b4:	ldr	r3, [fp, #-48]	; 0xffffffd0
    23b8:	add	r3, r3, #1
    23bc:	str	r3, [fp, #-48]	; 0xffffffd0
    23c0:	ldr	r3, [fp, #-8]
    23c4:	sub	r3, r3, #1
    23c8:	str	r3, [fp, #-8]
    23cc:	b	2448 <coda_ascii_parse_double+0x3ec>
    23d0:	ldr	r3, [fp, #-48]	; 0xffffffd0
    23d4:	ldrb	r3, [r3]
    23d8:	cmp	r3, #47	; 0x2f
    23dc:	bls	2454 <coda_ascii_parse_double+0x3f8>
    23e0:	ldr	r3, [fp, #-48]	; 0xffffffd0
    23e4:	ldrb	r3, [r3]
    23e8:	cmp	r3, #57	; 0x39
    23ec:	bhi	2454 <coda_ascii_parse_double+0x3f8>
    23f0:	vldr	d7, [fp, #-28]	; 0xffffffe4
    23f4:	vldr	d6, [pc, #772]	; 2700 <coda_ascii_parse_double+0x6a4>
    23f8:	vmul.f64	d6, d7, d6
    23fc:	ldr	r3, [fp, #-48]	; 0xffffffd0
    2400:	ldrb	r3, [r3]
    2404:	sub	r3, r3, #48	; 0x30
    2408:	vmov	s15, r3
    240c:	vcvt.f64.s32	d7, s15
    2410:	vadd.f64	d7, d6, d7
    2414:	vstr	d7, [fp, #-28]	; 0xffffffe4
    2418:	ldr	r3, [fp, #-32]	; 0xffffffe0
    241c:	sub	r3, r3, #1
    2420:	str	r3, [fp, #-32]	; 0xffffffe0
    2424:	ldr	r3, [fp, #-12]
    2428:	add	r3, r3, #1
    242c:	str	r3, [fp, #-12]
    2430:	ldr	r3, [fp, #-48]	; 0xffffffd0
    2434:	add	r3, r3, #1
    2438:	str	r3, [fp, #-48]	; 0xffffffd0
    243c:	ldr	r3, [fp, #-8]
    2440:	sub	r3, r3, #1
    2444:	str	r3, [fp, #-8]
    2448:	ldr	r3, [fp, #-8]
    244c:	cmp	r3, #0
    2450:	bgt	23d0 <coda_ascii_parse_double+0x374>
    2454:	ldr	r3, [fp, #-12]
    2458:	cmp	r3, #0
    245c:	bne	2474 <coda_ascii_parse_double+0x418>
    2460:	ldr	r1, [pc, #676]	; 270c <coda_ascii_parse_double+0x6b0>
    2464:	mvn	r0, #102	; 0x66
    2468:	bl	0 <coda_set_error>
    246c:	mvn	r3, #0
    2470:	b	26f0 <coda_ascii_parse_double+0x694>
    2474:	ldr	r3, [fp, #-36]	; 0xffffffdc
    2478:	cmp	r3, #0
    247c:	beq	248c <coda_ascii_parse_double+0x430>
    2480:	vldr	d7, [fp, #-28]	; 0xffffffe4
    2484:	vneg.f64	d7, d7
    2488:	vstr	d7, [fp, #-28]	; 0xffffffe4
    248c:	ldr	r3, [fp, #-8]
    2490:	cmp	r3, #0
    2494:	ble	2630 <coda_ascii_parse_double+0x5d4>
    2498:	ldr	r3, [fp, #-48]	; 0xffffffd0
    249c:	ldrb	r3, [r3]
    24a0:	cmp	r3, #100	; 0x64
    24a4:	beq	24d8 <coda_ascii_parse_double+0x47c>
    24a8:	ldr	r3, [fp, #-48]	; 0xffffffd0
    24ac:	ldrb	r3, [r3]
    24b0:	cmp	r3, #68	; 0x44
    24b4:	beq	24d8 <coda_ascii_parse_double+0x47c>
    24b8:	ldr	r3, [fp, #-48]	; 0xffffffd0
    24bc:	ldrb	r3, [r3]
    24c0:	cmp	r3, #101	; 0x65
    24c4:	beq	24d8 <coda_ascii_parse_double+0x47c>
    24c8:	ldr	r3, [fp, #-48]	; 0xffffffd0
    24cc:	ldrb	r3, [r3]
    24d0:	cmp	r3, #69	; 0x45
    24d4:	bne	2630 <coda_ascii_parse_double+0x5d4>
    24d8:	ldr	r3, [fp, #-48]	; 0xffffffd0
    24dc:	add	r3, r3, #1
    24e0:	str	r3, [fp, #-48]	; 0xffffffd0
    24e4:	ldr	r3, [fp, #-8]
    24e8:	sub	r3, r3, #1
    24ec:	str	r3, [fp, #-8]
    24f0:	mov	r3, #0
    24f4:	str	r3, [fp, #-36]	; 0xffffffdc
    24f8:	ldr	r3, [fp, #-8]
    24fc:	cmp	r3, #0
    2500:	ble	2558 <coda_ascii_parse_double+0x4fc>
    2504:	ldr	r3, [fp, #-48]	; 0xffffffd0
    2508:	ldrb	r3, [r3]
    250c:	cmp	r3, #43	; 0x2b
    2510:	beq	2524 <coda_ascii_parse_double+0x4c8>
    2514:	ldr	r3, [fp, #-48]	; 0xffffffd0
    2518:	ldrb	r3, [r3]
    251c:	cmp	r3, #45	; 0x2d
    2520:	bne	2558 <coda_ascii_parse_double+0x4fc>
    2524:	ldr	r3, [fp, #-48]	; 0xffffffd0
    2528:	ldrb	r3, [r3]
    252c:	cmp	r3, #45	; 0x2d
    2530:	moveq	r3, #1
    2534:	movne	r3, #0
    2538:	uxtb	r3, r3
    253c:	str	r3, [fp, #-36]	; 0xffffffdc
    2540:	ldr	r3, [fp, #-48]	; 0xffffffd0
    2544:	add	r3, r3, #1
    2548:	str	r3, [fp, #-48]	; 0xffffffd0
    254c:	ldr	r3, [fp, #-8]
    2550:	sub	r3, r3, #1
    2554:	str	r3, [fp, #-8]
    2558:	mov	r3, #0
    255c:	str	r3, [fp, #-40]	; 0xffffffd8
    2560:	mov	r3, #0
    2564:	str	r3, [fp, #-16]
    2568:	b	25dc <coda_ascii_parse_double+0x580>
    256c:	ldr	r3, [fp, #-48]	; 0xffffffd0
    2570:	ldrb	r3, [r3]
    2574:	cmp	r3, #47	; 0x2f
    2578:	bls	25e8 <coda_ascii_parse_double+0x58c>
    257c:	ldr	r3, [fp, #-48]	; 0xffffffd0
    2580:	ldrb	r3, [r3]
    2584:	cmp	r3, #57	; 0x39
    2588:	bhi	25e8 <coda_ascii_parse_double+0x58c>
    258c:	ldr	r2, [fp, #-40]	; 0xffffffd8
    2590:	mov	r3, r2
    2594:	lsl	r3, r3, #2
    2598:	add	r3, r3, r2
    259c:	lsl	r3, r3, #1
    25a0:	mov	r2, r3
    25a4:	ldr	r3, [fp, #-48]	; 0xffffffd0
    25a8:	ldrb	r3, [r3]
    25ac:	sub	r3, r3, #48	; 0x30
    25b0:	add	r3, r2, r3
    25b4:	str	r3, [fp, #-40]	; 0xffffffd8
    25b8:	ldr	r3, [fp, #-16]
    25bc:	add	r3, r3, #1
    25c0:	str	r3, [fp, #-16]
    25c4:	ldr	r3, [fp, #-48]	; 0xffffffd0
    25c8:	add	r3, r3, #1
    25cc:	str	r3, [fp, #-48]	; 0xffffffd0
    25d0:	ldr	r3, [fp, #-8]
    25d4:	sub	r3, r3, #1
    25d8:	str	r3, [fp, #-8]
    25dc:	ldr	r3, [fp, #-8]
    25e0:	cmp	r3, #0
    25e4:	bgt	256c <coda_ascii_parse_double+0x510>
    25e8:	ldr	r3, [fp, #-16]
    25ec:	cmp	r3, #0
    25f0:	bne	2608 <coda_ascii_parse_double+0x5ac>
    25f4:	ldr	r1, [pc, #276]	; 2710 <coda_ascii_parse_double+0x6b4>
    25f8:	mvn	r0, #102	; 0x66
    25fc:	bl	0 <coda_set_error>
    2600:	mvn	r3, #0
    2604:	b	26f0 <coda_ascii_parse_double+0x694>
    2608:	ldr	r3, [fp, #-36]	; 0xffffffdc
    260c:	cmp	r3, #0
    2610:	beq	2620 <coda_ascii_parse_double+0x5c4>
    2614:	ldr	r3, [fp, #-40]	; 0xffffffd8
    2618:	rsb	r3, r3, #0
    261c:	str	r3, [fp, #-40]	; 0xffffffd8
    2620:	ldr	r2, [fp, #-32]	; 0xffffffe0
    2624:	ldr	r3, [fp, #-40]	; 0xffffffd8
    2628:	add	r3, r2, r3
    262c:	str	r3, [fp, #-32]	; 0xffffffe0
    2630:	ldr	r3, [fp, #-60]	; 0xffffffc4
    2634:	cmp	r3, #0
    2638:	bne	26b0 <coda_ascii_parse_double+0x654>
    263c:	ldr	r3, [fp, #-8]
    2640:	cmp	r3, #0
    2644:	beq	26b0 <coda_ascii_parse_double+0x654>
    2648:	b	2664 <coda_ascii_parse_double+0x608>
    264c:	ldr	r3, [fp, #-48]	; 0xffffffd0
    2650:	add	r3, r3, #1
    2654:	str	r3, [fp, #-48]	; 0xffffffd0
    2658:	ldr	r3, [fp, #-8]
    265c:	sub	r3, r3, #1
    2660:	str	r3, [fp, #-8]
    2664:	ldr	r3, [fp, #-8]
    2668:	cmp	r3, #0
    266c:	ble	2690 <coda_ascii_parse_double+0x634>
    2670:	ldr	r3, [fp, #-48]	; 0xffffffd0
    2674:	ldrb	r3, [r3]
    2678:	cmp	r3, #32
    267c:	beq	264c <coda_ascii_parse_double+0x5f0>
    2680:	ldr	r3, [fp, #-48]	; 0xffffffd0
    2684:	ldrb	r3, [r3]
    2688:	cmp	r3, #9
    268c:	beq	264c <coda_ascii_parse_double+0x5f0>
    2690:	ldr	r3, [fp, #-8]
    2694:	cmp	r3, #0
    2698:	beq	26b0 <coda_ascii_parse_double+0x654>
    269c:	ldr	r1, [pc, #100]	; 2708 <coda_ascii_parse_double+0x6ac>
    26a0:	mvn	r0, #102	; 0x66
    26a4:	bl	0 <coda_set_error>
    26a8:	mvn	r3, #0
    26ac:	b	26f0 <coda_ascii_parse_double+0x694>
    26b0:	ldr	r3, [fp, #-32]	; 0xffffffe0
    26b4:	cmp	r3, #0
    26b8:	beq	26d8 <coda_ascii_parse_double+0x67c>
    26bc:	ldr	r0, [fp, #-32]	; 0xffffffe0
    26c0:	vldr	d0, [pc, #56]	; 2700 <coda_ascii_parse_double+0x6a4>
    26c4:	bl	10a0 <ipow>
    26c8:	vmov.f64	d6, d0
    26cc:	vldr	d7, [fp, #-28]	; 0xffffffe4
    26d0:	vmul.f64	d7, d7, d6
    26d4:	vstr	d7, [fp, #-28]	; 0xffffffe4
    26d8:	ldr	r1, [fp, #-56]	; 0xffffffc8
    26dc:	ldrd	r2, [fp, #-28]	; 0xffffffe4
    26e0:	strd	r2, [r1]
    26e4:	ldr	r2, [fp, #-52]	; 0xffffffcc
    26e8:	ldr	r3, [fp, #-8]
    26ec:	sub	r3, r2, r3
    26f0:	mov	r0, r3
    26f4:	sub	sp, fp, #4
    26f8:	pop	{fp, pc}
    26fc:	nop			; (mov r0, r0)
    2700:	.word	0x00000000
    2704:	.word	0x40240000
    2708:	.word	0x000003b4
    270c:	.word	0x000003e4
    2710:	.word	0x00000420

00002714 <coda_ascii_cursor_set_asciilines>:
    2714:	push	{fp, lr}
    2718:	add	fp, sp, #4
    271c:	sub	sp, sp, #24
    2720:	str	r0, [fp, #-24]	; 0xffffffe8
    2724:	str	r1, [fp, #-28]	; 0xffffffe4
    2728:	ldr	r3, [fp, #-28]	; 0xffffffe4
    272c:	str	r3, [fp, #-8]
    2730:	ldr	r3, [fp, #-8]
    2734:	ldr	r3, [r3, #68]	; 0x44
    2738:	cmp	r3, #0
    273c:	bne	275c <coda_ascii_cursor_set_asciilines+0x48>
    2740:	ldr	r0, [fp, #-28]	; 0xffffffe4
    2744:	bl	0 <coda_ascii_init_asciilines>
    2748:	mov	r3, r0
    274c:	cmp	r3, #0
    2750:	beq	275c <coda_ascii_cursor_set_asciilines+0x48>
    2754:	mvn	r3, #0
    2758:	b	2874 <coda_ascii_cursor_set_asciilines+0x160>
    275c:	ldr	r3, [fp, #-8]
    2760:	ldr	r3, [r3, #76]	; 0x4c
    2764:	cmp	r3, #0
    2768:	bne	282c <coda_ascii_cursor_set_asciilines+0x118>
    276c:	mov	r0, #0
    2770:	bl	0 <coda_type_array_new>
    2774:	str	r0, [fp, #-12]
    2778:	ldr	r3, [fp, #-12]
    277c:	cmp	r3, #0
    2780:	bne	278c <coda_ascii_cursor_set_asciilines+0x78>
    2784:	mvn	r3, #0
    2788:	b	2874 <coda_ascii_cursor_set_asciilines+0x160>
    278c:	ldr	r3, [fp, #-8]
    2790:	ldr	r3, [r3, #64]	; 0x40
    2794:	mov	r1, r3
    2798:	ldr	r0, [fp, #-12]
    279c:	bl	0 <coda_type_array_add_fixed_dimension>
    27a0:	mov	r3, r0
    27a4:	cmp	r3, #0
    27a8:	beq	27bc <coda_ascii_cursor_set_asciilines+0xa8>
    27ac:	ldr	r0, [fp, #-12]
    27b0:	bl	0 <coda_type_release>
    27b4:	mvn	r3, #0
    27b8:	b	2874 <coda_ascii_cursor_set_asciilines+0x160>
    27bc:	mov	r0, #0
    27c0:	bl	0 <coda_type_text_new>
    27c4:	str	r0, [fp, #-16]
    27c8:	ldr	r3, [fp, #-16]
    27cc:	cmp	r3, #0
    27d0:	bne	27e4 <coda_ascii_cursor_set_asciilines+0xd0>
    27d4:	ldr	r0, [fp, #-12]
    27d8:	bl	0 <coda_type_release>
    27dc:	mvn	r3, #0
    27e0:	b	2874 <coda_ascii_cursor_set_asciilines+0x160>
    27e4:	mov	r1, #2
    27e8:	ldr	r0, [fp, #-16]
    27ec:	bl	0 <coda_type_text_set_special_text_type>
    27f0:	ldr	r1, [fp, #-16]
    27f4:	ldr	r0, [fp, #-12]
    27f8:	bl	0 <coda_type_array_set_base_type>
    27fc:	mov	r3, r0
    2800:	cmp	r3, #0
    2804:	beq	2820 <coda_ascii_cursor_set_asciilines+0x10c>
    2808:	ldr	r0, [fp, #-12]
    280c:	bl	0 <coda_type_release>
    2810:	ldr	r0, [fp, #-16]
    2814:	bl	0 <coda_type_release>
    2818:	mvn	r3, #0
    281c:	b	2874 <coda_ascii_cursor_set_asciilines+0x160>
    2820:	ldr	r3, [fp, #-8]
    2824:	ldr	r2, [fp, #-12]
    2828:	str	r2, [r3, #76]	; 0x4c
    282c:	ldr	r3, [fp, #-24]	; 0xffffffe8
    2830:	ldr	r2, [fp, #-28]	; 0xffffffe4
    2834:	str	r2, [r3]
    2838:	ldr	r3, [fp, #-24]	; 0xffffffe8
    283c:	mov	r2, #1
    2840:	str	r2, [r3, #4]
    2844:	ldr	r3, [fp, #-8]
    2848:	ldr	r2, [r3, #76]	; 0x4c
    284c:	ldr	r3, [fp, #-24]	; 0xffffffe8
    2850:	str	r2, [r3, #8]
    2854:	ldr	r3, [fp, #-24]	; 0xffffffe8
    2858:	mvn	r2, #0
    285c:	str	r2, [r3, #12]
    2860:	ldr	r1, [fp, #-24]	; 0xffffffe8
    2864:	mov	r2, #0
    2868:	mov	r3, #0
    286c:	strd	r2, [r1, #16]
    2870:	mov	r3, #0
    2874:	mov	r0, r3
    2878:	sub	sp, fp, #4
    287c:	pop	{fp, pc}

00002880 <coda_ascii_cursor_get_string_length>:
    2880:	push	{r4, r5, fp, lr}
    2884:	add	fp, sp, #12
    2888:	sub	sp, sp, #16
    288c:	str	r0, [fp, #-24]	; 0xffffffe8
    2890:	str	r1, [fp, #-28]	; 0xffffffe4
    2894:	sub	r3, fp, #20
    2898:	mov	r1, r3
    289c:	ldr	r0, [fp, #-24]	; 0xffffffe8
    28a0:	bl	2904 <coda_ascii_cursor_get_bit_size>
    28a4:	mov	r3, r0
    28a8:	cmp	r3, #0
    28ac:	beq	28b8 <coda_ascii_cursor_get_string_length+0x38>
    28b0:	mvn	r3, #0
    28b4:	b	28f8 <coda_ascii_cursor_get_string_length+0x78>
    28b8:	ldrd	r2, [fp, #-20]	; 0xffffffec
    28bc:	cmp	r2, #0
    28c0:	sbcs	r3, r3, #0
    28c4:	bge	28d8 <coda_ascii_cursor_get_string_length+0x58>
    28c8:	ldr	r3, [fp, #-28]	; 0xffffffe4
    28cc:	mvn	r2, #0
    28d0:	str	r2, [r3]
    28d4:	b	28f4 <coda_ascii_cursor_get_string_length+0x74>
    28d8:	ldrd	r2, [fp, #-20]	; 0xffffffec
    28dc:	lsr	r4, r2, #3
    28e0:	orr	r4, r4, r3, lsl #29
    28e4:	asr	r5, r3, #3
    28e8:	mov	r2, r4
    28ec:	ldr	r3, [fp, #-28]	; 0xffffffe4
    28f0:	str	r2, [r3]
    28f4:	mov	r3, #0
    28f8:	mov	r0, r3
    28fc:	sub	sp, fp, #12
    2900:	pop	{r4, r5, fp, pc}

00002904 <coda_ascii_cursor_get_bit_size>:
    2904:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
    2908:	add	fp, sp, #28
    290c:	sub	sp, sp, #864	; 0x360
    2910:	str	r0, [fp, #-800]	; 0xfffffce0
    2914:	str	r1, [fp, #-804]	; 0xfffffcdc
    2918:	ldr	r3, [fp, #-800]	; 0xfffffce0
    291c:	ldr	r3, [r3, #4]
    2920:	sub	r3, r3, #1
    2924:	ldr	r2, [fp, #-800]	; 0xfffffce0
    2928:	lsl	r3, r3, #4
    292c:	add	r3, r2, r3
    2930:	ldr	r3, [r3, #8]
    2934:	ldr	r3, [r3]
    2938:	cmp	r3, #99	; 0x63
    293c:	bhi	2960 <coda_ascii_cursor_get_bit_size+0x5c>
    2940:	ldr	r3, [fp, #-800]	; 0xfffffce0
    2944:	ldr	r3, [r3, #4]
    2948:	sub	r3, r3, #1
    294c:	ldr	r2, [fp, #-800]	; 0xfffffce0
    2950:	lsl	r3, r3, #4
    2954:	add	r3, r2, r3
    2958:	ldr	r3, [r3, #8]
    295c:	b	2980 <coda_ascii_cursor_get_bit_size+0x7c>
    2960:	ldr	r3, [fp, #-800]	; 0xfffffce0
    2964:	ldr	r3, [r3, #4]
    2968:	sub	r3, r3, #1
    296c:	ldr	r2, [fp, #-800]	; 0xfffffce0
    2970:	lsl	r3, r3, #4
    2974:	add	r3, r2, r3
    2978:	ldr	r3, [r3, #8]
    297c:	ldr	r3, [r3, #4]
    2980:	str	r3, [fp, #-72]	; 0xffffffb8
    2984:	mov	r3, #0
    2988:	str	r3, [fp, #-32]	; 0xffffffe0
    298c:	ldr	r3, [fp, #-800]	; 0xfffffce0
    2990:	ldr	r3, [r3, #4]
    2994:	sub	r3, r3, #1
    2998:	ldr	r2, [fp, #-800]	; 0xfffffce0
    299c:	add	r3, r3, #1
    29a0:	lsl	r3, r3, #4
    29a4:	add	r3, r2, r3
    29a8:	ldrd	r2, [r3]
    29ac:	strd	r2, [fp, #-84]	; 0xffffffac
    29b0:	mvn	r3, #0
    29b4:	str	r3, [fp, #-36]	; 0xffffffdc
    29b8:	mov	r3, #0
    29bc:	str	r3, [fp, #-40]	; 0xffffffd8
    29c0:	ldr	r3, [fp, #-72]	; 0xffffffb8
    29c4:	ldrd	r2, [r3, #24]
    29c8:	cmp	r2, #0
    29cc:	sbcs	r3, r3, #0
    29d0:	blt	29ec <coda_ascii_cursor_get_bit_size+0xe8>
    29d4:	ldr	r3, [fp, #-72]	; 0xffffffb8
    29d8:	ldrd	r2, [r3, #24]
    29dc:	ldr	r1, [fp, #-804]	; 0xfffffcdc
    29e0:	strd	r2, [r1]
    29e4:	mov	r3, #0
    29e8:	b	37cc <coda_ascii_cursor_get_bit_size+0xec8>
    29ec:	ldr	r3, [fp, #-72]	; 0xffffffb8
    29f0:	ldr	r3, [r3, #8]
    29f4:	cmp	r3, #0
    29f8:	beq	2a0c <coda_ascii_cursor_get_bit_size+0x108>
    29fc:	ldr	r3, [fp, #-72]	; 0xffffffb8
    2a00:	ldr	r3, [r3, #8]
    2a04:	cmp	r3, #1
    2a08:	bne	2a20 <coda_ascii_cursor_get_bit_size+0x11c>
    2a0c:	ldr	r1, [fp, #-804]	; 0xfffffcdc
    2a10:	ldr	r0, [fp, #-800]	; 0xfffffce0
    2a14:	bl	0 <coda_ascbin_cursor_get_bit_size>
    2a18:	mov	r3, r0
    2a1c:	b	37cc <coda_ascii_cursor_get_bit_size+0xec8>
    2a20:	sub	r1, fp, #148	; 0x94
    2a24:	mvn	r2, #0
    2a28:	mvn	r3, #0
    2a2c:	ldr	r0, [fp, #-800]	; 0xfffffce0
    2a30:	bl	1154 <get_bit_size_boundary>
    2a34:	mov	r3, r0
    2a38:	cmp	r3, #0
    2a3c:	beq	2a48 <coda_ascii_cursor_get_bit_size+0x144>
    2a40:	mvn	r3, #0
    2a44:	b	37cc <coda_ascii_cursor_get_bit_size+0xec8>
    2a48:	ldr	r3, [fp, #-72]	; 0xffffffb8
    2a4c:	ldr	r3, [r3, #8]
    2a50:	cmp	r3, #2
    2a54:	beq	2a68 <coda_ascii_cursor_get_bit_size+0x164>
    2a58:	ldr	r3, [fp, #-72]	; 0xffffffb8
    2a5c:	ldr	r3, [r3, #8]
    2a60:	cmp	r3, #3
    2a64:	bne	2aa4 <coda_ascii_cursor_get_bit_size+0x1a0>
    2a68:	ldr	r3, [fp, #-72]	; 0xffffffb8
    2a6c:	ldr	r3, [r3, #52]	; 0x34
    2a70:	str	r3, [fp, #-32]	; 0xffffffe0
    2a74:	ldr	r3, [fp, #-32]	; 0xffffffe0
    2a78:	cmp	r3, #0
    2a7c:	bne	2a90 <coda_ascii_cursor_get_bit_size+0x18c>
    2a80:	ldr	r3, [fp, #-72]	; 0xffffffb8
    2a84:	ldr	r3, [r3, #32]
    2a88:	cmp	r3, #0
    2a8c:	bne	2a98 <coda_ascii_cursor_get_bit_size+0x194>
    2a90:	mov	r3, #1
    2a94:	b	2a9c <coda_ascii_cursor_get_bit_size+0x198>
    2a98:	mov	r3, #0
    2a9c:	str	r3, [fp, #-40]	; 0xffffffd8
    2aa0:	b	2b7c <coda_ascii_cursor_get_bit_size+0x278>
    2aa4:	ldr	r3, [fp, #-72]	; 0xffffffb8
    2aa8:	ldr	r3, [r3, #8]
    2aac:	cmp	r3, #4
    2ab0:	bne	2b08 <coda_ascii_cursor_get_bit_size+0x204>
    2ab4:	ldr	r3, [fp, #-72]	; 0xffffffb8
    2ab8:	ldr	r3, [r3, #32]
    2abc:	cmp	r3, #0
    2ac0:	bne	2ae8 <coda_ascii_cursor_get_bit_size+0x1e4>
    2ac4:	ldr	r3, [fp, #-72]	; 0xffffffb8
    2ac8:	ldr	r3, [r3, #44]	; 0x2c
    2acc:	cmp	r3, #0
    2ad0:	bne	2ae8 <coda_ascii_cursor_get_bit_size+0x1e4>
    2ad4:	ldrd	r2, [fp, #-148]	; 0xffffff6c
    2ad8:	ldr	r1, [fp, #-804]	; 0xfffffcdc
    2adc:	strd	r2, [r1]
    2ae0:	mov	r3, #0
    2ae4:	b	37cc <coda_ascii_cursor_get_bit_size+0xec8>
    2ae8:	ldr	r3, [fp, #-72]	; 0xffffffb8
    2aec:	ldr	r3, [r3, #32]
    2af0:	cmp	r3, #0
    2af4:	moveq	r3, #1
    2af8:	movne	r3, #0
    2afc:	uxtb	r3, r3
    2b00:	str	r3, [fp, #-40]	; 0xffffffd8
    2b04:	b	2b7c <coda_ascii_cursor_get_bit_size+0x278>
    2b08:	ldr	r3, [fp, #-72]	; 0xffffffb8
    2b0c:	ldr	r3, [r3, #8]
    2b10:	cmp	r3, #6
    2b14:	bne	2b7c <coda_ascii_cursor_get_bit_size+0x278>
    2b18:	ldr	r3, [fp, #-72]	; 0xffffffb8
    2b1c:	ldr	r3, [r3, #40]	; 0x28
    2b20:	cmp	r3, #2
    2b24:	bne	2b7c <coda_ascii_cursor_get_bit_size+0x278>
    2b28:	ldr	r3, [fp, #-72]	; 0xffffffb8
    2b2c:	ldr	r3, [r3, #44]	; 0x2c
    2b30:	str	r3, [fp, #-88]	; 0xffffffa8
    2b34:	ldr	r3, [fp, #-88]	; 0xffffffa8
    2b38:	ldr	r3, [r3, #8]
    2b3c:	cmp	r3, #4
    2b40:	beq	2b58 <coda_ascii_cursor_get_bit_size+0x254>
    2b44:	ldr	r3, [pc, #3212]	; 37d8 <coda_ascii_cursor_get_bit_size+0xed4>
    2b48:	ldr	r2, [pc, #3212]	; 37dc <coda_ascii_cursor_get_bit_size+0xed8>
    2b4c:	ldr	r1, [pc, #3212]	; 37e0 <coda_ascii_cursor_get_bit_size+0xedc>
    2b50:	ldr	r0, [pc, #3212]	; 37e4 <coda_ascii_cursor_get_bit_size+0xee0>
    2b54:	bl	0 <__assert_fail>
    2b58:	ldr	r3, [fp, #-88]	; 0xffffffa8
    2b5c:	ldr	r3, [r3, #44]	; 0x2c
    2b60:	cmp	r3, #0
    2b64:	bne	2b7c <coda_ascii_cursor_get_bit_size+0x278>
    2b68:	ldrd	r2, [fp, #-148]	; 0xffffff6c
    2b6c:	ldr	r1, [fp, #-804]	; 0xfffffcdc
    2b70:	strd	r2, [r1]
    2b74:	mov	r3, #0
    2b78:	b	37cc <coda_ascii_cursor_get_bit_size+0xec8>
    2b7c:	ldr	r3, [fp, #-40]	; 0xffffffd8
    2b80:	cmp	r3, #0
    2b84:	beq	2c2c <coda_ascii_cursor_get_bit_size+0x328>
    2b88:	ldrd	r2, [fp, #-148]	; 0xffffff6c
    2b8c:	lsr	r4, r2, #3
    2b90:	orr	r4, r4, r3, lsl #29
    2b94:	asr	r5, r3, #3
    2b98:	cmp	r4, #64	; 0x40
    2b9c:	sbcs	r3, r5, #0
    2ba0:	bge	2bc0 <coda_ascii_cursor_get_bit_size+0x2bc>
    2ba4:	ldrd	r2, [fp, #-148]	; 0xffffff6c
    2ba8:	lsr	r6, r2, #3
    2bac:	orr	r6, r6, r3, lsl #29
    2bb0:	asr	r7, r3, #3
    2bb4:	mov	r3, r6
    2bb8:	str	r3, [fp, #-36]	; 0xffffffdc
    2bbc:	b	2bc8 <coda_ascii_cursor_get_bit_size+0x2c4>
    2bc0:	mov	r3, #64	; 0x40
    2bc4:	str	r3, [fp, #-36]	; 0xffffffdc
    2bc8:	ldr	r3, [fp, #-800]	; 0xfffffce0
    2bcc:	ldr	ip, [r3]
    2bd0:	ldrd	r2, [fp, #-84]	; 0xffffffac
    2bd4:	lsr	r1, r2, #3
    2bd8:	str	r1, [fp, #-812]	; 0xfffffcd4
    2bdc:	ldr	r1, [fp, #-812]	; 0xfffffcd4
    2be0:	orr	r1, r1, r3, lsl #29
    2be4:	str	r1, [fp, #-812]	; 0xfffffcd4
    2be8:	asr	r3, r3, #3
    2bec:	str	r3, [fp, #-808]	; 0xfffffcd8
    2bf0:	ldr	r3, [fp, #-36]	; 0xffffffdc
    2bf4:	mov	r0, r3
    2bf8:	asr	r1, r0, #31
    2bfc:	sub	r3, fp, #212	; 0xd4
    2c00:	str	r3, [sp, #8]
    2c04:	strd	r0, [sp]
    2c08:	sub	r3, fp, #812	; 0x32c
    2c0c:	ldrd	r2, [r3]
    2c10:	mov	r0, ip
    2c14:	bl	1e4 <read_bytes_in_bounds>
    2c18:	mov	r3, r0
    2c1c:	cmp	r3, #0
    2c20:	beq	2c2c <coda_ascii_cursor_get_bit_size+0x328>
    2c24:	mvn	r3, #0
    2c28:	b	37cc <coda_ascii_cursor_get_bit_size+0xec8>
    2c2c:	ldr	r3, [fp, #-32]	; 0xffffffe0
    2c30:	cmp	r3, #0
    2c34:	beq	2c60 <coda_ascii_cursor_get_bit_size+0x35c>
    2c38:	sub	r0, fp, #212	; 0xd4
    2c3c:	ldr	r3, [fp, #-804]	; 0xfffffcdc
    2c40:	ldr	r2, [fp, #-32]	; 0xffffffe0
    2c44:	ldr	r1, [fp, #-36]	; 0xffffffdc
    2c48:	bl	1660 <parse_mapping_size>
    2c4c:	mov	r3, r0
    2c50:	cmp	r3, #0
    2c54:	beq	2c60 <coda_ascii_cursor_get_bit_size+0x35c>
    2c58:	mov	r3, #0
    2c5c:	b	37cc <coda_ascii_cursor_get_bit_size+0xec8>
    2c60:	ldr	r3, [fp, #-72]	; 0xffffffb8
    2c64:	ldr	r3, [r3, #8]
    2c68:	cmp	r3, #6
    2c6c:	bne	2cc0 <coda_ascii_cursor_get_bit_size+0x3bc>
    2c70:	ldr	r2, [fp, #-800]	; 0xfffffce0
    2c74:	sub	r3, fp, #796	; 0x31c
    2c78:	mov	r1, r2
    2c7c:	mov	r2, #520	; 0x208
    2c80:	mov	r0, r3
    2c84:	bl	0 <memcpy>
    2c88:	sub	r3, fp, #796	; 0x31c
    2c8c:	mov	r0, r3
    2c90:	bl	0 <coda_cursor_use_base_type_of_special_type>
    2c94:	mov	r3, r0
    2c98:	cmp	r3, #0
    2c9c:	beq	2ca8 <coda_ascii_cursor_get_bit_size+0x3a4>
    2ca0:	mvn	r3, #0
    2ca4:	b	37cc <coda_ascii_cursor_get_bit_size+0xec8>
    2ca8:	sub	r3, fp, #796	; 0x31c
    2cac:	ldr	r1, [fp, #-804]	; 0xfffffcdc
    2cb0:	mov	r0, r3
    2cb4:	bl	0 <coda_cursor_get_bit_size>
    2cb8:	mov	r3, r0
    2cbc:	b	37cc <coda_ascii_cursor_get_bit_size+0xec8>
    2cc0:	ldr	r3, [fp, #-72]	; 0xffffffb8
    2cc4:	ldr	r3, [r3, #32]
    2cc8:	cmp	r3, #0
    2ccc:	beq	2d8c <coda_ascii_cursor_get_bit_size+0x488>
    2cd0:	ldr	r3, [fp, #-72]	; 0xffffffb8
    2cd4:	ldr	r3, [r3, #32]
    2cd8:	ldr	r2, [fp, #-804]	; 0xfffffcdc
    2cdc:	ldr	r1, [fp, #-800]	; 0xfffffce0
    2ce0:	mov	r0, r3
    2ce4:	bl	0 <coda_expression_eval_integer>
    2ce8:	mov	r3, r0
    2cec:	cmp	r3, #0
    2cf0:	beq	2d0c <coda_ascii_cursor_get_bit_size+0x408>
    2cf4:	ldr	r0, [pc, #2796]	; 37e8 <coda_ascii_cursor_get_bit_size+0xee4>
    2cf8:	bl	0 <coda_add_error_message>
    2cfc:	ldr	r0, [fp, #-800]	; 0xfffffce0
    2d00:	bl	0 <coda_cursor_add_to_error_message>
    2d04:	mvn	r3, #0
    2d08:	b	37cc <coda_ascii_cursor_get_bit_size+0xec8>
    2d0c:	ldr	r3, [fp, #-72]	; 0xffffffb8
    2d10:	ldrd	r2, [r3, #24]
    2d14:	mvn	r0, #7
    2d18:	mvn	r1, #0
    2d1c:	cmp	r3, r1
    2d20:	cmpeq	r2, r0
    2d24:	bne	2d44 <coda_ascii_cursor_get_bit_size+0x440>
    2d28:	ldr	r3, [fp, #-804]	; 0xfffffcdc
    2d2c:	ldrd	r2, [r3]
    2d30:	lsl	r9, r3, #3
    2d34:	orr	r9, r9, r2, lsr #29
    2d38:	lsl	r8, r2, #3
    2d3c:	ldr	r3, [fp, #-804]	; 0xfffffcdc
    2d40:	strd	r8, [r3]
    2d44:	ldr	r3, [fp, #-804]	; 0xfffffcdc
    2d48:	ldrd	r2, [r3]
    2d4c:	cmp	r2, #0
    2d50:	sbcs	r3, r3, #0
    2d54:	bge	2d84 <coda_ascii_cursor_get_bit_size+0x480>
    2d58:	ldr	r3, [fp, #-804]	; 0xfffffcdc
    2d5c:	ldrd	r2, [r3]
    2d60:	mov	r3, r2
    2d64:	mov	r2, r3
    2d68:	ldr	r1, [pc, #2684]	; 37ec <coda_ascii_cursor_get_bit_size+0xee8>
    2d6c:	ldr	r0, [pc, #2684]	; 37f0 <coda_ascii_cursor_get_bit_size+0xeec>
    2d70:	bl	0 <coda_set_error>
    2d74:	ldr	r0, [fp, #-800]	; 0xfffffce0
    2d78:	bl	0 <coda_cursor_add_to_error_message>
    2d7c:	mvn	r3, #0
    2d80:	b	37cc <coda_ascii_cursor_get_bit_size+0xec8>
    2d84:	mov	r3, #0
    2d88:	b	37cc <coda_ascii_cursor_get_bit_size+0xec8>
    2d8c:	ldr	r3, [fp, #-72]	; 0xffffffb8
    2d90:	ldr	r3, [r3, #8]
    2d94:	cmp	r3, #2
    2d98:	beq	2dac <coda_ascii_cursor_get_bit_size+0x4a8>
    2d9c:	ldr	r3, [fp, #-72]	; 0xffffffb8
    2da0:	ldr	r3, [r3, #8]
    2da4:	cmp	r3, #3
    2da8:	bne	2e84 <coda_ascii_cursor_get_bit_size+0x580>
    2dac:	ldr	r3, [fp, #-72]	; 0xffffffb8
    2db0:	ldr	r3, [r3, #12]
    2db4:	cmp	r3, #9
    2db8:	ldrls	pc, [pc, r3, lsl #2]
    2dbc:	b	2e3c <coda_ascii_cursor_get_bit_size+0x538>
    2dc0:	.word	0x00002de8
    2dc4:	.word	0x00002e04
    2dc8:	.word	0x00002de8
    2dcc:	.word	0x00002e04
    2dd0:	.word	0x00002de8
    2dd4:	.word	0x00002e04
    2dd8:	.word	0x00002de8
    2ddc:	.word	0x00002e04
    2de0:	.word	0x00002e20
    2de4:	.word	0x00002e20
    2de8:	sub	r2, fp, #220	; 0xdc
    2dec:	sub	r0, fp, #212	; 0xd4
    2df0:	mov	r3, #1
    2df4:	ldr	r1, [fp, #-36]	; 0xffffffdc
    2df8:	bl	1b24 <coda_ascii_parse_int64>
    2dfc:	str	r0, [fp, #-44]	; 0xffffffd4
    2e00:	b	2e50 <coda_ascii_cursor_get_bit_size+0x54c>
    2e04:	sub	r2, fp, #228	; 0xe4
    2e08:	sub	r0, fp, #212	; 0xd4
    2e0c:	mov	r3, #1
    2e10:	ldr	r1, [fp, #-36]	; 0xffffffdc
    2e14:	bl	1dec <coda_ascii_parse_uint64>
    2e18:	str	r0, [fp, #-44]	; 0xffffffd4
    2e1c:	b	2e50 <coda_ascii_cursor_get_bit_size+0x54c>
    2e20:	sub	r2, fp, #236	; 0xec
    2e24:	sub	r0, fp, #212	; 0xd4
    2e28:	mov	r3, #1
    2e2c:	ldr	r1, [fp, #-36]	; 0xffffffdc
    2e30:	bl	205c <coda_ascii_parse_double>
    2e34:	str	r0, [fp, #-44]	; 0xffffffd4
    2e38:	b	2e50 <coda_ascii_cursor_get_bit_size+0x54c>
    2e3c:	ldr	r3, [pc, #2452]	; 37d8 <coda_ascii_cursor_get_bit_size+0xed4>
    2e40:	mov	r2, #800	; 0x320
    2e44:	ldr	r1, [pc, #2452]	; 37e0 <coda_ascii_cursor_get_bit_size+0xedc>
    2e48:	ldr	r0, [pc, #2468]	; 37f4 <coda_ascii_cursor_get_bit_size+0xef0>
    2e4c:	bl	0 <__assert_fail>
    2e50:	ldr	r3, [fp, #-44]	; 0xffffffd4
    2e54:	cmp	r3, #0
    2e58:	bge	2e64 <coda_ascii_cursor_get_bit_size+0x560>
    2e5c:	mvn	r3, #0
    2e60:	b	37cc <coda_ascii_cursor_get_bit_size+0xec8>
    2e64:	ldr	r3, [fp, #-44]	; 0xffffffd4
    2e68:	lsl	r3, r3, #3
    2e6c:	mov	r2, r3
    2e70:	asr	r3, r2, #31
    2e74:	ldr	r1, [fp, #-804]	; 0xfffffcdc
    2e78:	strd	r2, [r1]
    2e7c:	mov	r3, #0
    2e80:	b	37cc <coda_ascii_cursor_get_bit_size+0xec8>
    2e84:	ldr	r3, [fp, #-72]	; 0xffffffb8
    2e88:	ldr	r3, [r3, #8]
    2e8c:	cmp	r3, #4
    2e90:	beq	2ea8 <coda_ascii_cursor_get_bit_size+0x5a4>
    2e94:	ldr	r3, [pc, #2364]	; 37d8 <coda_ascii_cursor_get_bit_size+0xed4>
    2e98:	mov	r2, #812	; 0x32c
    2e9c:	ldr	r1, [pc, #2364]	; 37e0 <coda_ascii_cursor_get_bit_size+0xedc>
    2ea0:	ldr	r0, [pc, #2384]	; 37f8 <coda_ascii_cursor_get_bit_size+0xef4>
    2ea4:	bl	0 <__assert_fail>
    2ea8:	ldr	r3, [fp, #-72]	; 0xffffffb8
    2eac:	ldr	r3, [r3, #44]	; 0x2c
    2eb0:	cmp	r3, #4
    2eb4:	ldrls	pc, [pc, r3, lsl #2]
    2eb8:	b	37c8 <coda_ascii_cursor_get_bit_size+0xec4>
    2ebc:	.word	0x000037a8
    2ec0:	.word	0x00002ed0
    2ec4:	.word	0x00003160
    2ec8:	.word	0x00003160
    2ecc:	.word	0x00003620
    2ed0:	ldr	r3, [fp, #-800]	; 0xfffffce0
    2ed4:	ldr	r3, [r3]
    2ed8:	ldr	r3, [r3, #16]
    2edc:	cmp	r3, #0
    2ee0:	beq	2ef8 <coda_ascii_cursor_get_bit_size+0x5f4>
    2ee4:	ldr	r3, [pc, #2284]	; 37d8 <coda_ascii_cursor_get_bit_size+0xed4>
    2ee8:	mov	r2, #816	; 0x330
    2eec:	ldr	r1, [pc, #2284]	; 37e0 <coda_ascii_cursor_get_bit_size+0xedc>
    2ef0:	ldr	r0, [pc, #2308]	; 37fc <coda_ascii_cursor_get_bit_size+0xef8>
    2ef4:	bl	0 <__assert_fail>
    2ef8:	ldr	r3, [fp, #-800]	; 0xfffffce0
    2efc:	ldr	r3, [r3]
    2f00:	ldr	r3, [r3, #60]	; 0x3c
    2f04:	cmp	r3, #3
    2f08:	ldrls	pc, [pc, r3, lsl #2]
    2f0c:	b	37bc <coda_ascii_cursor_get_bit_size+0xeb8>
    2f10:	.word	0x00002f48
    2f14:	.word	0x00002f20
    2f18:	.word	0x00002f20
    2f1c:	.word	0x00002f34
    2f20:	ldr	r1, [fp, #-804]	; 0xfffffcdc
    2f24:	mov	r2, #8
    2f28:	mov	r3, #0
    2f2c:	strd	r2, [r1]
    2f30:	b	315c <coda_ascii_cursor_get_bit_size+0x858>
    2f34:	ldr	r1, [fp, #-804]	; 0xfffffcdc
    2f38:	mov	r2, #16
    2f3c:	mov	r3, #0
    2f40:	strd	r2, [r1]
    2f44:	b	315c <coda_ascii_cursor_get_bit_size+0x858>
    2f48:	ldr	r3, [fp, #-800]	; 0xfffffce0
    2f4c:	ldr	r3, [r3, #4]
    2f50:	sub	r3, r3, #1
    2f54:	ldr	r2, [fp, #-800]	; 0xfffffce0
    2f58:	add	r3, r3, #1
    2f5c:	lsl	r3, r3, #4
    2f60:	add	r3, r2, r3
    2f64:	ldrd	r2, [r3]
    2f68:	mov	r0, #7
    2f6c:	mov	r1, #0
    2f70:	and	r2, r2, r0
    2f74:	and	r3, r3, r1
    2f78:	orrs	r3, r2, r3
    2f7c:	beq	2f94 <coda_ascii_cursor_get_bit_size+0x690>
    2f80:	ldr	r1, [pc, #2168]	; 3800 <coda_ascii_cursor_get_bit_size+0xefc>
    2f84:	ldr	r0, [pc, #2148]	; 37f0 <coda_ascii_cursor_get_bit_size+0xeec>
    2f88:	bl	0 <coda_set_error>
    2f8c:	mvn	r3, #0
    2f90:	b	37cc <coda_ascii_cursor_get_bit_size+0xec8>
    2f94:	sub	r1, fp, #240	; 0xf0
    2f98:	mov	r2, #1
    2f9c:	mov	r3, #0
    2fa0:	strd	r2, [sp]
    2fa4:	mov	r2, #0
    2fa8:	mov	r3, #0
    2fac:	ldr	r0, [fp, #-800]	; 0xfffffce0
    2fb0:	bl	4914 <coda_ascii_cursor_read_bytes>
    2fb4:	mov	r3, r0
    2fb8:	cmp	r3, #0
    2fbc:	beq	2fc8 <coda_ascii_cursor_get_bit_size+0x6c4>
    2fc0:	mvn	r3, #0
    2fc4:	b	37cc <coda_ascii_cursor_get_bit_size+0xec8>
    2fc8:	ldrb	r3, [fp, #-240]	; 0xffffff10
    2fcc:	cmp	r3, #10
    2fd0:	beq	2fe0 <coda_ascii_cursor_get_bit_size+0x6dc>
    2fd4:	cmp	r3, #13
    2fd8:	beq	3004 <coda_ascii_cursor_get_bit_size+0x700>
    2fdc:	b	30f0 <coda_ascii_cursor_get_bit_size+0x7ec>
    2fe0:	ldr	r1, [fp, #-804]	; 0xfffffcdc
    2fe4:	mov	r2, #8
    2fe8:	mov	r3, #0
    2fec:	strd	r2, [r1]
    2ff0:	ldr	r3, [fp, #-800]	; 0xfffffce0
    2ff4:	ldr	r3, [r3]
    2ff8:	mov	r2, #1
    2ffc:	str	r2, [r3, #60]	; 0x3c
    3000:	b	315c <coda_ascii_cursor_get_bit_size+0x858>
    3004:	ldr	r3, [fp, #-800]	; 0xfffffce0
    3008:	ldr	r3, [r3]
    300c:	ldrd	r0, [r3, #8]
    3010:	ldr	r3, [fp, #-800]	; 0xfffffce0
    3014:	ldr	r3, [r3, #4]
    3018:	sub	r3, r3, #1
    301c:	ldr	r2, [fp, #-800]	; 0xfffffce0
    3020:	add	r3, r3, #1
    3024:	lsl	r3, r3, #4
    3028:	add	r3, r2, r3
    302c:	ldrd	r2, [r3]
    3030:	lsr	ip, r2, #3
    3034:	str	ip, [fp, #-820]	; 0xfffffccc
    3038:	ldr	ip, [fp, #-820]	; 0xfffffccc
    303c:	orr	ip, ip, r3, lsl #29
    3040:	str	ip, [fp, #-820]	; 0xfffffccc
    3044:	asr	r3, r3, #3
    3048:	str	r3, [fp, #-816]	; 0xfffffcd0
    304c:	sub	r3, fp, #820	; 0x334
    3050:	ldrd	r2, [r3]
    3054:	subs	r2, r0, r2
    3058:	sbc	r3, r1, r3
    305c:	cmp	r2, #2
    3060:	sbcs	r3, r3, #0
    3064:	blt	30cc <coda_ascii_cursor_get_bit_size+0x7c8>
    3068:	sub	r1, fp, #240	; 0xf0
    306c:	mov	r2, #1
    3070:	mov	r3, #0
    3074:	strd	r2, [sp]
    3078:	mov	r2, #1
    307c:	mov	r3, #0
    3080:	ldr	r0, [fp, #-800]	; 0xfffffce0
    3084:	bl	4914 <coda_ascii_cursor_read_bytes>
    3088:	mov	r3, r0
    308c:	cmp	r3, #0
    3090:	beq	309c <coda_ascii_cursor_get_bit_size+0x798>
    3094:	mvn	r3, #0
    3098:	b	37cc <coda_ascii_cursor_get_bit_size+0xec8>
    309c:	ldrb	r3, [fp, #-240]	; 0xffffff10
    30a0:	cmp	r3, #10
    30a4:	bne	30cc <coda_ascii_cursor_get_bit_size+0x7c8>
    30a8:	ldr	r1, [fp, #-804]	; 0xfffffcdc
    30ac:	mov	r2, #16
    30b0:	mov	r3, #0
    30b4:	strd	r2, [r1]
    30b8:	ldr	r3, [fp, #-800]	; 0xfffffce0
    30bc:	ldr	r3, [r3]
    30c0:	mov	r2, #3
    30c4:	str	r2, [r3, #60]	; 0x3c
    30c8:	b	315c <coda_ascii_cursor_get_bit_size+0x858>
    30cc:	ldr	r1, [fp, #-804]	; 0xfffffcdc
    30d0:	mov	r2, #8
    30d4:	mov	r3, #0
    30d8:	strd	r2, [r1]
    30dc:	ldr	r3, [fp, #-800]	; 0xfffffce0
    30e0:	ldr	r3, [r3]
    30e4:	mov	r2, #2
    30e8:	str	r2, [r3, #60]	; 0x3c
    30ec:	b	315c <coda_ascii_cursor_get_bit_size+0x858>
    30f0:	ldr	r3, [fp, #-800]	; 0xfffffce0
    30f4:	ldr	r3, [r3, #4]
    30f8:	sub	r3, r3, #1
    30fc:	ldr	r2, [fp, #-800]	; 0xfffffce0
    3100:	add	r3, r3, #1
    3104:	lsl	r3, r3, #4
    3108:	add	r3, r2, r3
    310c:	ldrd	r2, [r3]
    3110:	lsr	r1, r2, #3
    3114:	str	r1, [fp, #-828]	; 0xfffffcc4
    3118:	ldr	r1, [fp, #-828]	; 0xfffffcc4
    311c:	orr	r1, r1, r3, lsl #29
    3120:	str	r1, [fp, #-828]	; 0xfffffcc4
    3124:	asr	r3, r3, #3
    3128:	str	r3, [fp, #-824]	; 0xfffffcc8
    312c:	sub	r3, fp, #264	; 0x108
    3130:	mov	r2, r3
    3134:	sub	r3, fp, #828	; 0x33c
    3138:	ldrd	r0, [r3]
    313c:	bl	0 <coda_str64>
    3140:	sub	r3, fp, #264	; 0x108
    3144:	mov	r2, r3
    3148:	ldr	r1, [pc, #1716]	; 3804 <coda_ascii_cursor_get_bit_size+0xf00>
    314c:	ldr	r0, [pc, #1692]	; 37f0 <coda_ascii_cursor_get_bit_size+0xeec>
    3150:	bl	0 <coda_set_error>
    3154:	mvn	r3, #0
    3158:	b	37cc <coda_ascii_cursor_get_bit_size+0xec8>
    315c:	b	37bc <coda_ascii_cursor_get_bit_size+0xeb8>
    3160:	ldr	r3, [fp, #-800]	; 0xfffffce0
    3164:	ldr	r3, [r3]
    3168:	ldr	r3, [r3, #16]
    316c:	cmp	r3, #0
    3170:	bne	33e4 <coda_ascii_cursor_get_bit_size+0xae0>
    3174:	ldr	r3, [fp, #-800]	; 0xfffffce0
    3178:	ldr	r3, [r3, #4]
    317c:	sub	r3, r3, #1
    3180:	ldr	r2, [fp, #-800]	; 0xfffffce0
    3184:	add	r3, r3, #1
    3188:	lsl	r3, r3, #4
    318c:	add	r3, r2, r3
    3190:	ldrd	r2, [r3]
    3194:	mov	r0, #7
    3198:	mov	r1, #0
    319c:	and	r2, r2, r0
    31a0:	and	r3, r3, r1
    31a4:	orrs	r3, r2, r3
    31a8:	beq	31c0 <coda_ascii_cursor_get_bit_size+0x8bc>
    31ac:	ldr	r1, [pc, #1620]	; 3808 <coda_ascii_cursor_get_bit_size+0xf04>
    31b0:	ldr	r0, [pc, #1592]	; 37f0 <coda_ascii_cursor_get_bit_size+0xeec>
    31b4:	bl	0 <coda_set_error>
    31b8:	mvn	r3, #0
    31bc:	b	37cc <coda_ascii_cursor_get_bit_size+0xec8>
    31c0:	ldr	r3, [fp, #-800]	; 0xfffffce0
    31c4:	ldr	r3, [r3]
    31c8:	ldr	r3, [r3, #68]	; 0x44
    31cc:	cmp	r3, #0
    31d0:	bne	31f8 <coda_ascii_cursor_get_bit_size+0x8f4>
    31d4:	ldr	r3, [fp, #-800]	; 0xfffffce0
    31d8:	ldr	r3, [r3]
    31dc:	mov	r0, r3
    31e0:	bl	0 <coda_ascii_init_asciilines>
    31e4:	mov	r3, r0
    31e8:	cmp	r3, #0
    31ec:	beq	31f8 <coda_ascii_cursor_get_bit_size+0x8f4>
    31f0:	mvn	r3, #0
    31f4:	b	37cc <coda_ascii_cursor_get_bit_size+0xec8>
    31f8:	ldr	r3, [fp, #-800]	; 0xfffffce0
    31fc:	ldr	r3, [r3]
    3200:	ldr	r3, [r3, #64]	; 0x40
    3204:	cmp	r3, #0
    3208:	bne	3220 <coda_ascii_cursor_get_bit_size+0x91c>
    320c:	ldr	r1, [pc, #1528]	; 380c <coda_ascii_cursor_get_bit_size+0xf08>
    3210:	mvn	r0, #300	; 0x12c
    3214:	bl	0 <coda_set_error>
    3218:	mvn	r3, #0
    321c:	b	37cc <coda_ascii_cursor_get_bit_size+0xec8>
    3220:	mov	r3, #0
    3224:	str	r3, [fp, #-48]	; 0xffffffd0
    3228:	ldr	r3, [fp, #-800]	; 0xfffffce0
    322c:	ldr	r3, [r3]
    3230:	ldr	r3, [r3, #64]	; 0x40
    3234:	sub	r3, r3, #1
    3238:	str	r3, [fp, #-52]	; 0xffffffcc
    323c:	ldr	r3, [fp, #-800]	; 0xfffffce0
    3240:	ldr	r3, [r3]
    3244:	ldr	r3, [r3, #68]	; 0x44
    3248:	str	r3, [fp, #-92]	; 0xffffffa4
    324c:	ldr	r3, [fp, #-800]	; 0xfffffce0
    3250:	ldr	r3, [r3, #4]
    3254:	sub	r3, r3, #1
    3258:	ldr	r2, [fp, #-800]	; 0xfffffce0
    325c:	add	r3, r3, #1
    3260:	lsl	r3, r3, #4
    3264:	add	r3, r2, r3
    3268:	ldrd	r2, [r3]
    326c:	lsr	r1, r2, #3
    3270:	str	r1, [fp, #-860]	; 0xfffffca4
    3274:	ldr	r1, [fp, #-860]	; 0xfffffca4
    3278:	orr	r1, r1, r3, lsl #29
    327c:	str	r1, [fp, #-860]	; 0xfffffca4
    3280:	asr	r3, r3, #3
    3284:	str	r3, [fp, #-856]	; 0xfffffca8
    3288:	sub	r3, fp, #860	; 0x35c
    328c:	ldrd	r2, [r3]
    3290:	strd	r2, [fp, #-100]	; 0xffffff9c
    3294:	b	32f8 <coda_ascii_cursor_get_bit_size+0x9f4>
    3298:	ldr	r2, [fp, #-48]	; 0xffffffd0
    329c:	ldr	r3, [fp, #-52]	; 0xffffffcc
    32a0:	add	r3, r2, r3
    32a4:	lsr	r2, r3, #31
    32a8:	add	r3, r2, r3
    32ac:	asr	r3, r3, #1
    32b0:	str	r3, [fp, #-104]	; 0xffffff98
    32b4:	ldr	r3, [fp, #-104]	; 0xffffff98
    32b8:	lsl	r3, r3, #2
    32bc:	ldr	r2, [fp, #-92]	; 0xffffffa4
    32c0:	add	r3, r2, r3
    32c4:	ldr	r3, [r3]
    32c8:	mov	r2, r3
    32cc:	asr	r3, r2, #31
    32d0:	ldrd	r0, [fp, #-100]	; 0xffffff9c
    32d4:	cmp	r0, r2
    32d8:	sbcs	r3, r1, r3
    32dc:	bge	32ec <coda_ascii_cursor_get_bit_size+0x9e8>
    32e0:	ldr	r3, [fp, #-104]	; 0xffffff98
    32e4:	str	r3, [fp, #-52]	; 0xffffffcc
    32e8:	b	32f8 <coda_ascii_cursor_get_bit_size+0x9f4>
    32ec:	ldr	r3, [fp, #-104]	; 0xffffff98
    32f0:	add	r3, r3, #1
    32f4:	str	r3, [fp, #-48]	; 0xffffffd0
    32f8:	ldr	r2, [fp, #-52]	; 0xffffffcc
    32fc:	ldr	r3, [fp, #-48]	; 0xffffffd0
    3300:	cmp	r2, r3
    3304:	bne	3298 <coda_ascii_cursor_get_bit_size+0x994>
    3308:	ldr	r3, [fp, #-52]	; 0xffffffcc
    330c:	lsl	r3, r3, #2
    3310:	ldr	r2, [fp, #-92]	; 0xffffffa4
    3314:	add	r3, r2, r3
    3318:	ldr	r3, [r3]
    331c:	mov	r0, r3
    3320:	asr	r1, r0, #31
    3324:	ldrd	r2, [fp, #-100]	; 0xffffff9c
    3328:	subs	r2, r0, r2
    332c:	sbc	r3, r1, r3
    3330:	lsl	r1, r3, #3
    3334:	str	r1, [fp, #-832]	; 0xfffffcc0
    3338:	ldr	r1, [fp, #-832]	; 0xfffffcc0
    333c:	orr	r1, r1, r2, lsr #29
    3340:	str	r1, [fp, #-832]	; 0xfffffcc0
    3344:	lsl	r3, r2, #3
    3348:	str	r3, [fp, #-836]	; 0xfffffcbc
    334c:	ldr	r3, [fp, #-804]	; 0xfffffcdc
    3350:	sub	r2, fp, #836	; 0x344
    3354:	ldrd	r0, [r2]
    3358:	strd	r0, [r3]
    335c:	ldr	r3, [fp, #-72]	; 0xffffffb8
    3360:	ldr	r3, [r3, #44]	; 0x2c
    3364:	cmp	r3, #3
    3368:	bne	37c4 <coda_ascii_cursor_get_bit_size+0xec0>
    336c:	ldr	r3, [fp, #-800]	; 0xfffffce0
    3370:	ldr	r3, [r3]
    3374:	ldr	r3, [r3, #64]	; 0x40
    3378:	sub	r2, r3, #1
    337c:	ldr	r3, [fp, #-52]	; 0xffffffcc
    3380:	cmp	r2, r3
    3384:	bne	339c <coda_ascii_cursor_get_bit_size+0xa98>
    3388:	ldr	r3, [fp, #-800]	; 0xfffffce0
    338c:	ldr	r3, [r3]
    3390:	ldr	r3, [r3, #72]	; 0x48
    3394:	cmp	r3, #0
    3398:	beq	37c4 <coda_ascii_cursor_get_bit_size+0xec0>
    339c:	ldr	r3, [fp, #-804]	; 0xfffffcdc
    33a0:	ldrd	r2, [r3]
    33a4:	subs	r2, r2, #8
    33a8:	sbc	r3, r3, #0
    33ac:	ldr	r1, [fp, #-804]	; 0xfffffcdc
    33b0:	strd	r2, [r1]
    33b4:	ldr	r3, [fp, #-800]	; 0xfffffce0
    33b8:	ldr	r3, [r3]
    33bc:	ldr	r3, [r3, #60]	; 0x3c
    33c0:	cmp	r3, #3
    33c4:	bne	37c4 <coda_ascii_cursor_get_bit_size+0xec0>
    33c8:	ldr	r3, [fp, #-804]	; 0xfffffcdc
    33cc:	ldrd	r2, [r3]
    33d0:	subs	r2, r2, #8
    33d4:	sbc	r3, r3, #0
    33d8:	ldr	r1, [fp, #-804]	; 0xfffffcdc
    33dc:	strd	r2, [r1]
    33e0:	b	37c4 <coda_ascii_cursor_get_bit_size+0xec0>
    33e4:	ldr	r3, [fp, #-800]	; 0xfffffce0
    33e8:	ldr	r3, [r3, #4]
    33ec:	sub	r3, r3, #1
    33f0:	ldr	r2, [fp, #-800]	; 0xfffffce0
    33f4:	add	r3, r3, #1
    33f8:	lsl	r3, r3, #4
    33fc:	add	r3, r2, r3
    3400:	ldrd	r2, [r3]
    3404:	mov	r0, #7
    3408:	mov	r1, #0
    340c:	and	r2, r2, r0
    3410:	and	r3, r3, r1
    3414:	orrs	r3, r2, r3
    3418:	beq	3430 <coda_ascii_cursor_get_bit_size+0xb2c>
    341c:	ldr	r1, [pc, #996]	; 3808 <coda_ascii_cursor_get_bit_size+0xf04>
    3420:	ldr	r0, [pc, #968]	; 37f0 <coda_ascii_cursor_get_bit_size+0xeec>
    3424:	bl	0 <coda_set_error>
    3428:	mvn	r3, #0
    342c:	b	37cc <coda_ascii_cursor_get_bit_size+0xec8>
    3430:	ldr	r3, [fp, #-800]	; 0xfffffce0
    3434:	ldr	r3, [r3, #4]
    3438:	sub	r3, r3, #1
    343c:	ldr	r2, [fp, #-800]	; 0xfffffce0
    3440:	add	r3, r3, #1
    3444:	lsl	r3, r3, #4
    3448:	add	r3, r2, r3
    344c:	ldrd	r2, [r3]
    3450:	lsr	r1, r2, #3
    3454:	str	r1, [fp, #-868]	; 0xfffffc9c
    3458:	ldr	r1, [fp, #-868]	; 0xfffffc9c
    345c:	orr	r1, r1, r3, lsl #29
    3460:	str	r1, [fp, #-868]	; 0xfffffc9c
    3464:	asr	r3, r3, #3
    3468:	str	r3, [fp, #-864]	; 0xfffffca0
    346c:	sub	r3, fp, #868	; 0x364
    3470:	ldrd	r2, [r3]
    3474:	strd	r2, [fp, #-116]	; 0xffffff8c
    3478:	ldr	r3, [fp, #-800]	; 0xfffffce0
    347c:	ldr	r3, [r3]
    3480:	ldrd	r0, [r3, #8]
    3484:	ldrd	r2, [fp, #-116]	; 0xffffff8c
    3488:	subs	r2, r0, r2
    348c:	sbc	r3, r1, r3
    3490:	strd	r2, [fp, #-124]	; 0xffffff84
    3494:	mov	r2, #0
    3498:	mov	r3, #0
    349c:	strd	r2, [fp, #-60]	; 0xffffffc4
    34a0:	b	351c <coda_ascii_cursor_get_bit_size+0xc18>
    34a4:	ldr	r3, [fp, #-800]	; 0xfffffce0
    34a8:	ldr	ip, [r3]
    34ac:	ldrd	r0, [fp, #-116]	; 0xffffff8c
    34b0:	ldrd	r2, [fp, #-60]	; 0xffffffc4
    34b4:	adds	r0, r0, r2
    34b8:	adc	r1, r1, r3
    34bc:	sub	r3, fp, #268	; 0x10c
    34c0:	str	r3, [sp, #8]
    34c4:	mov	r2, #1
    34c8:	mov	r3, #0
    34cc:	strd	r2, [sp]
    34d0:	mov	r2, r0
    34d4:	mov	r3, r1
    34d8:	mov	r0, ip
    34dc:	bl	1e4 <read_bytes_in_bounds>
    34e0:	mov	r3, r0
    34e4:	cmp	r3, #0
    34e8:	beq	34f4 <coda_ascii_cursor_get_bit_size+0xbf0>
    34ec:	mvn	r3, #0
    34f0:	b	37cc <coda_ascii_cursor_get_bit_size+0xec8>
    34f4:	ldrb	r3, [fp, #-268]	; 0xfffffef4
    34f8:	cmp	r3, #13
    34fc:	beq	3530 <coda_ascii_cursor_get_bit_size+0xc2c>
    3500:	ldrb	r3, [fp, #-268]	; 0xfffffef4
    3504:	cmp	r3, #10
    3508:	beq	3530 <coda_ascii_cursor_get_bit_size+0xc2c>
    350c:	ldrd	r2, [fp, #-60]	; 0xffffffc4
    3510:	adds	r2, r2, #1
    3514:	adc	r3, r3, #0
    3518:	strd	r2, [fp, #-60]	; 0xffffffc4
    351c:	ldrd	r0, [fp, #-60]	; 0xffffffc4
    3520:	ldrd	r2, [fp, #-124]	; 0xffffff84
    3524:	cmp	r0, r2
    3528:	sbcs	r3, r1, r3
    352c:	blt	34a4 <coda_ascii_cursor_get_bit_size+0xba0>
    3530:	ldr	r3, [fp, #-72]	; 0xffffffb8
    3534:	ldr	r3, [r3, #44]	; 0x2c
    3538:	cmp	r3, #2
    353c:	bne	35ec <coda_ascii_cursor_get_bit_size+0xce8>
    3540:	ldrb	r3, [fp, #-268]	; 0xfffffef4
    3544:	cmp	r3, #13
    3548:	bne	35dc <coda_ascii_cursor_get_bit_size+0xcd8>
    354c:	ldrd	r2, [fp, #-60]	; 0xffffffc4
    3550:	adds	r0, r2, #1
    3554:	adc	r1, r3, #0
    3558:	ldrd	r2, [fp, #-124]	; 0xffffff84
    355c:	cmp	r0, r2
    3560:	sbcs	r3, r1, r3
    3564:	bge	35dc <coda_ascii_cursor_get_bit_size+0xcd8>
    3568:	ldr	r3, [fp, #-800]	; 0xfffffce0
    356c:	ldr	ip, [r3]
    3570:	ldrd	r0, [fp, #-116]	; 0xffffff8c
    3574:	ldrd	r2, [fp, #-60]	; 0xffffffc4
    3578:	adds	r2, r2, r0
    357c:	adc	r3, r3, r1
    3580:	adds	r0, r2, #1
    3584:	adc	r1, r3, #0
    3588:	sub	r3, fp, #268	; 0x10c
    358c:	str	r3, [sp, #8]
    3590:	mov	r2, #1
    3594:	mov	r3, #0
    3598:	strd	r2, [sp]
    359c:	mov	r2, r0
    35a0:	mov	r3, r1
    35a4:	mov	r0, ip
    35a8:	bl	1e4 <read_bytes_in_bounds>
    35ac:	mov	r3, r0
    35b0:	cmp	r3, #0
    35b4:	beq	35c0 <coda_ascii_cursor_get_bit_size+0xcbc>
    35b8:	mvn	r3, #0
    35bc:	b	37cc <coda_ascii_cursor_get_bit_size+0xec8>
    35c0:	ldrb	r3, [fp, #-268]	; 0xfffffef4
    35c4:	cmp	r3, #10
    35c8:	bne	35dc <coda_ascii_cursor_get_bit_size+0xcd8>
    35cc:	ldrd	r2, [fp, #-60]	; 0xffffffc4
    35d0:	adds	r2, r2, #1
    35d4:	adc	r3, r3, #0
    35d8:	strd	r2, [fp, #-60]	; 0xffffffc4
    35dc:	ldrd	r2, [fp, #-60]	; 0xffffffc4
    35e0:	adds	r2, r2, #1
    35e4:	adc	r3, r3, #0
    35e8:	strd	r2, [fp, #-60]	; 0xffffffc4
    35ec:	ldrd	r2, [fp, #-60]	; 0xffffffc4
    35f0:	lsl	r1, r3, #3
    35f4:	str	r1, [fp, #-840]	; 0xfffffcb8
    35f8:	ldr	r1, [fp, #-840]	; 0xfffffcb8
    35fc:	orr	r1, r1, r2, lsr #29
    3600:	str	r1, [fp, #-840]	; 0xfffffcb8
    3604:	lsl	r3, r2, #3
    3608:	str	r3, [fp, #-844]	; 0xfffffcb4
    360c:	ldr	r3, [fp, #-804]	; 0xfffffcdc
    3610:	sub	r2, fp, #844	; 0x34c
    3614:	ldrd	r0, [r2]
    3618:	strd	r0, [r3]
    361c:	b	37c4 <coda_ascii_cursor_get_bit_size+0xec0>
    3620:	ldr	r3, [fp, #-800]	; 0xfffffce0
    3624:	ldr	r3, [r3, #4]
    3628:	sub	r3, r3, #1
    362c:	ldr	r2, [fp, #-800]	; 0xfffffce0
    3630:	add	r3, r3, #1
    3634:	lsl	r3, r3, #4
    3638:	add	r3, r2, r3
    363c:	ldrd	r2, [r3]
    3640:	mov	r0, #7
    3644:	mov	r1, #0
    3648:	and	r2, r2, r0
    364c:	and	r3, r3, r1
    3650:	orrs	r3, r2, r3
    3654:	beq	366c <coda_ascii_cursor_get_bit_size+0xd68>
    3658:	ldr	r1, [pc, #432]	; 3810 <coda_ascii_cursor_get_bit_size+0xf0c>
    365c:	ldr	r0, [pc, #396]	; 37f0 <coda_ascii_cursor_get_bit_size+0xeec>
    3660:	bl	0 <coda_set_error>
    3664:	mvn	r3, #0
    3668:	b	37cc <coda_ascii_cursor_get_bit_size+0xec8>
    366c:	ldr	r3, [fp, #-800]	; 0xfffffce0
    3670:	ldr	r3, [r3, #4]
    3674:	sub	r3, r3, #1
    3678:	ldr	r2, [fp, #-800]	; 0xfffffce0
    367c:	add	r3, r3, #1
    3680:	lsl	r3, r3, #4
    3684:	add	r3, r2, r3
    3688:	ldrd	r2, [r3]
    368c:	lsr	r1, r2, #3
    3690:	str	r1, [fp, #-876]	; 0xfffffc94
    3694:	ldr	r1, [fp, #-876]	; 0xfffffc94
    3698:	orr	r1, r1, r3, lsl #29
    369c:	str	r1, [fp, #-876]	; 0xfffffc94
    36a0:	asr	r3, r3, #3
    36a4:	str	r3, [fp, #-872]	; 0xfffffc98
    36a8:	sub	r3, fp, #876	; 0x36c
    36ac:	ldrd	r2, [r3]
    36b0:	strd	r2, [fp, #-132]	; 0xffffff7c
    36b4:	ldr	r3, [fp, #-800]	; 0xfffffce0
    36b8:	ldr	r3, [r3]
    36bc:	ldrd	r0, [r3, #8]
    36c0:	ldrd	r2, [fp, #-132]	; 0xffffff7c
    36c4:	subs	r2, r0, r2
    36c8:	sbc	r3, r1, r3
    36cc:	strd	r2, [fp, #-140]	; 0xffffff74
    36d0:	mov	r2, #0
    36d4:	mov	r3, #0
    36d8:	strd	r2, [fp, #-68]	; 0xffffffbc
    36dc:	b	3758 <coda_ascii_cursor_get_bit_size+0xe54>
    36e0:	ldr	r3, [fp, #-800]	; 0xfffffce0
    36e4:	ldr	ip, [r3]
    36e8:	ldrd	r0, [fp, #-132]	; 0xffffff7c
    36ec:	ldrd	r2, [fp, #-68]	; 0xffffffbc
    36f0:	adds	r0, r0, r2
    36f4:	adc	r1, r1, r3
    36f8:	sub	r3, fp, #272	; 0x110
    36fc:	str	r3, [sp, #8]
    3700:	mov	r2, #1
    3704:	mov	r3, #0
    3708:	strd	r2, [sp]
    370c:	mov	r2, r0
    3710:	mov	r3, r1
    3714:	mov	r0, ip
    3718:	bl	1e4 <read_bytes_in_bounds>
    371c:	mov	r3, r0
    3720:	cmp	r3, #0
    3724:	beq	3730 <coda_ascii_cursor_get_bit_size+0xe2c>
    3728:	mvn	r3, #0
    372c:	b	37cc <coda_ascii_cursor_get_bit_size+0xec8>
    3730:	ldrb	r3, [fp, #-272]	; 0xfffffef0
    3734:	cmp	r3, #32
    3738:	beq	3748 <coda_ascii_cursor_get_bit_size+0xe44>
    373c:	ldrb	r3, [fp, #-272]	; 0xfffffef0
    3740:	cmp	r3, #9
    3744:	bne	3770 <coda_ascii_cursor_get_bit_size+0xe6c>
    3748:	ldrd	r2, [fp, #-68]	; 0xffffffbc
    374c:	adds	r2, r2, #1
    3750:	adc	r3, r3, #0
    3754:	strd	r2, [fp, #-68]	; 0xffffffbc
    3758:	ldrd	r0, [fp, #-68]	; 0xffffffbc
    375c:	ldrd	r2, [fp, #-140]	; 0xffffff74
    3760:	cmp	r0, r2
    3764:	sbcs	r3, r1, r3
    3768:	blt	36e0 <coda_ascii_cursor_get_bit_size+0xddc>
    376c:	b	3774 <coda_ascii_cursor_get_bit_size+0xe70>
    3770:	nop			; (mov r0, r0)
    3774:	ldrd	r2, [fp, #-68]	; 0xffffffbc
    3778:	lsl	r1, r3, #3
    377c:	str	r1, [fp, #-848]	; 0xfffffcb0
    3780:	ldr	r1, [fp, #-848]	; 0xfffffcb0
    3784:	orr	r1, r1, r2, lsr #29
    3788:	str	r1, [fp, #-848]	; 0xfffffcb0
    378c:	lsl	r3, r2, #3
    3790:	str	r3, [fp, #-852]	; 0xfffffcac
    3794:	ldr	r3, [fp, #-804]	; 0xfffffcdc
    3798:	sub	r2, fp, #852	; 0x354
    379c:	ldrd	r0, [r2]
    37a0:	strd	r0, [r3]
    37a4:	b	37c8 <coda_ascii_cursor_get_bit_size+0xec4>
    37a8:	ldr	r3, [pc, #40]	; 37d8 <coda_ascii_cursor_get_bit_size+0xed4>
    37ac:	ldr	r2, [pc, #96]	; 3814 <coda_ascii_cursor_get_bit_size+0xf10>
    37b0:	ldr	r1, [pc, #40]	; 37e0 <coda_ascii_cursor_get_bit_size+0xedc>
    37b4:	ldr	r0, [pc, #56]	; 37f4 <coda_ascii_cursor_get_bit_size+0xef0>
    37b8:	bl	0 <__assert_fail>
    37bc:	nop			; (mov r0, r0)
    37c0:	b	37c8 <coda_ascii_cursor_get_bit_size+0xec4>
    37c4:	nop			; (mov r0, r0)
    37c8:	mov	r3, #0
    37cc:	mov	r0, r3
    37d0:	sub	sp, fp, #28
    37d4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
    37d8:	.word	0x00000a34
    37dc:	.word	0x000002b5
    37e0:	.word	0x00000210
    37e4:	.word	0x00000468
    37e8:	.word	0x00000494
    37ec:	.word	0x000004ac
    37f0:	.word	0xfffffed4
    37f4:	.word	0x0000020c
    37f8:	.word	0x000004d4
    37fc:	.word	0x000004f8
    3800:	.word	0x00000528
    3804:	.word	0x00000578
    3808:	.word	0x000005f0
    380c:	.word	0x00000634
    3810:	.word	0x00000658
    3814:	.word	0x00000406

00003818 <coda_ascii_cursor_get_num_elements>:
    3818:	push	{fp, lr}
    381c:	add	fp, sp, #4
    3820:	sub	sp, sp, #8
    3824:	str	r0, [fp, #-8]
    3828:	str	r1, [fp, #-12]
    382c:	ldr	r3, [fp, #-8]
    3830:	ldr	r3, [r3, #4]
    3834:	sub	r3, r3, #1
    3838:	ldr	r2, [fp, #-8]
    383c:	lsl	r3, r3, #4
    3840:	add	r3, r2, r3
    3844:	ldr	r3, [r3, #8]
    3848:	ldr	r3, [r3]
    384c:	cmp	r3, #99	; 0x63
    3850:	bhi	3874 <coda_ascii_cursor_get_num_elements+0x5c>
    3854:	ldr	r3, [fp, #-8]
    3858:	ldr	r3, [r3, #4]
    385c:	sub	r3, r3, #1
    3860:	ldr	r2, [fp, #-8]
    3864:	lsl	r3, r3, #4
    3868:	add	r3, r2, r3
    386c:	ldr	r3, [r3, #8]
    3870:	b	3894 <coda_ascii_cursor_get_num_elements+0x7c>
    3874:	ldr	r3, [fp, #-8]
    3878:	ldr	r3, [r3, #4]
    387c:	sub	r3, r3, #1
    3880:	ldr	r2, [fp, #-8]
    3884:	lsl	r3, r3, #4
    3888:	add	r3, r2, r3
    388c:	ldr	r3, [r3, #8]
    3890:	ldr	r3, [r3, #4]
    3894:	ldr	r3, [r3, #8]
    3898:	cmp	r3, #1
    389c:	bhi	38b4 <coda_ascii_cursor_get_num_elements+0x9c>
    38a0:	ldr	r1, [fp, #-12]
    38a4:	ldr	r0, [fp, #-8]
    38a8:	bl	0 <coda_ascbin_cursor_get_num_elements>
    38ac:	mov	r3, r0
    38b0:	b	38c8 <coda_ascii_cursor_get_num_elements+0xb0>
    38b4:	ldr	r3, [fp, #-12]
    38b8:	mov	r2, #1
    38bc:	str	r2, [r3]
    38c0:	nop			; (mov r0, r0)
    38c4:	mov	r3, #0
    38c8:	mov	r0, r3
    38cc:	sub	sp, fp, #4
    38d0:	pop	{fp, pc}

000038d4 <coda_ascii_cursor_read_int64>:
    38d4:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
    38d8:	add	fp, sp, #28
    38dc:	sub	sp, sp, #128	; 0x80
    38e0:	str	r0, [fp, #-128]	; 0xffffff80
    38e4:	str	r1, [fp, #-132]	; 0xffffff7c
    38e8:	ldr	r3, [fp, #-128]	; 0xffffff80
    38ec:	ldr	r3, [r3, #4]
    38f0:	sub	r3, r3, #1
    38f4:	ldr	r2, [fp, #-128]	; 0xffffff80
    38f8:	lsl	r3, r3, #4
    38fc:	add	r3, r2, r3
    3900:	ldr	r3, [r3, #8]
    3904:	ldr	r3, [r3]
    3908:	cmp	r3, #99	; 0x63
    390c:	bhi	3930 <coda_ascii_cursor_read_int64+0x5c>
    3910:	ldr	r3, [fp, #-128]	; 0xffffff80
    3914:	ldr	r3, [r3, #4]
    3918:	sub	r3, r3, #1
    391c:	ldr	r2, [fp, #-128]	; 0xffffff80
    3920:	lsl	r3, r3, #4
    3924:	add	r3, r2, r3
    3928:	ldr	r3, [r3, #8]
    392c:	b	3950 <coda_ascii_cursor_read_int64+0x7c>
    3930:	ldr	r3, [fp, #-128]	; 0xffffff80
    3934:	ldr	r3, [r3, #4]
    3938:	sub	r3, r3, #1
    393c:	ldr	r2, [fp, #-128]	; 0xffffff80
    3940:	lsl	r3, r3, #4
    3944:	add	r3, r2, r3
    3948:	ldr	r3, [r3, #8]
    394c:	ldr	r3, [r3, #4]
    3950:	str	r3, [fp, #-40]	; 0xffffffd8
    3954:	ldr	r3, [fp, #-128]	; 0xffffff80
    3958:	ldr	r3, [r3, #4]
    395c:	sub	r3, r3, #1
    3960:	ldr	r2, [fp, #-128]	; 0xffffff80
    3964:	add	r3, r3, #1
    3968:	lsl	r3, r3, #4
    396c:	add	r3, r2, r3
    3970:	ldrd	r2, [r3]
    3974:	strd	r2, [fp, #-52]	; 0xffffffcc
    3978:	mov	r3, #1
    397c:	str	r3, [fp, #-36]	; 0xffffffdc
    3980:	ldr	r3, [fp, #-40]	; 0xffffffd8
    3984:	ldrd	r2, [r3, #24]
    3988:	sub	r1, fp, #60	; 0x3c
    398c:	ldr	r0, [fp, #-128]	; 0xffffff80
    3990:	bl	1154 <get_bit_size_boundary>
    3994:	mov	r3, r0
    3998:	cmp	r3, #0
    399c:	beq	39a8 <coda_ascii_cursor_read_int64+0xd4>
    39a0:	mvn	r3, #0
    39a4:	b	3b54 <coda_ascii_cursor_read_int64+0x280>
    39a8:	ldrd	r2, [fp, #-52]	; 0xffffffcc
    39ac:	mov	r0, #7
    39b0:	mov	r1, #0
    39b4:	and	r2, r2, r0
    39b8:	and	r3, r3, r1
    39bc:	orrs	r3, r2, r3
    39c0:	beq	39d8 <coda_ascii_cursor_read_int64+0x104>
    39c4:	ldr	r1, [pc, #404]	; 3b60 <coda_ascii_cursor_read_int64+0x28c>
    39c8:	mvn	r0, #21
    39cc:	bl	0 <coda_set_error>
    39d0:	mvn	r3, #0
    39d4:	b	3b54 <coda_ascii_cursor_read_int64+0x280>
    39d8:	ldr	r3, [fp, #-40]	; 0xffffffd8
    39dc:	ldrd	r2, [r3, #24]
    39e0:	cmp	r2, #0
    39e4:	sbcs	r3, r3, #0
    39e8:	blt	3a40 <coda_ascii_cursor_read_int64+0x16c>
    39ec:	mov	r3, #0
    39f0:	str	r3, [fp, #-36]	; 0xffffffdc
    39f4:	ldr	r3, [fp, #-40]	; 0xffffffd8
    39f8:	ldrd	r2, [r3, #24]
    39fc:	lsr	r1, r2, #3
    3a00:	str	r1, [fp, #-140]	; 0xffffff74
    3a04:	ldr	r1, [fp, #-140]	; 0xffffff74
    3a08:	orr	r1, r1, r3, lsl #29
    3a0c:	str	r1, [fp, #-140]	; 0xffffff74
    3a10:	asr	r3, r3, #3
    3a14:	str	r3, [fp, #-136]	; 0xffffff78
    3a18:	ldr	r3, [fp, #-140]	; 0xffffff74
    3a1c:	str	r3, [fp, #-32]	; 0xffffffe0
    3a20:	ldr	r3, [fp, #-32]	; 0xffffffe0
    3a24:	cmp	r3, #64	; 0x40
    3a28:	ble	3a80 <coda_ascii_cursor_read_int64+0x1ac>
    3a2c:	ldr	r3, [pc, #304]	; 3b64 <coda_ascii_cursor_read_int64+0x290>
    3a30:	ldr	r2, [pc, #304]	; 3b68 <coda_ascii_cursor_read_int64+0x294>
    3a34:	ldr	r1, [pc, #304]	; 3b6c <coda_ascii_cursor_read_int64+0x298>
    3a38:	ldr	r0, [pc, #304]	; 3b70 <coda_ascii_cursor_read_int64+0x29c>
    3a3c:	bl	0 <__assert_fail>
    3a40:	ldrd	r2, [fp, #-60]	; 0xffffffc4
    3a44:	lsr	r4, r2, #3
    3a48:	orr	r4, r4, r3, lsl #29
    3a4c:	asr	r5, r3, #3
    3a50:	cmp	r4, #64	; 0x40
    3a54:	sbcs	r3, r5, #0
    3a58:	bge	3a78 <coda_ascii_cursor_read_int64+0x1a4>
    3a5c:	ldrd	r2, [fp, #-60]	; 0xffffffc4
    3a60:	lsr	r8, r2, #3
    3a64:	orr	r8, r8, r3, lsl #29
    3a68:	asr	r9, r3, #3
    3a6c:	mov	r3, r8
    3a70:	str	r3, [fp, #-32]	; 0xffffffe0
    3a74:	b	3a80 <coda_ascii_cursor_read_int64+0x1ac>
    3a78:	mov	r3, #64	; 0x40
    3a7c:	str	r3, [fp, #-32]	; 0xffffffe0
    3a80:	ldr	r3, [fp, #-128]	; 0xffffff80
    3a84:	ldr	r0, [r3]
    3a88:	ldrd	r2, [fp, #-52]	; 0xffffffcc
    3a8c:	lsr	r6, r2, #3
    3a90:	orr	r6, r6, r3, lsl #29
    3a94:	asr	r7, r3, #3
    3a98:	ldr	r3, [fp, #-32]	; 0xffffffe0
    3a9c:	mov	r2, r3
    3aa0:	asr	r3, r2, #31
    3aa4:	sub	r1, fp, #124	; 0x7c
    3aa8:	str	r1, [sp, #8]
    3aac:	strd	r2, [sp]
    3ab0:	mov	r2, r6
    3ab4:	mov	r3, r7
    3ab8:	bl	1e4 <read_bytes_in_bounds>
    3abc:	mov	r3, r0
    3ac0:	cmp	r3, #0
    3ac4:	beq	3ad0 <coda_ascii_cursor_read_int64+0x1fc>
    3ac8:	mvn	r3, #0
    3acc:	b	3b54 <coda_ascii_cursor_read_int64+0x280>
    3ad0:	ldr	r3, [fp, #-40]	; 0xffffffd8
    3ad4:	ldr	r3, [r3, #52]	; 0x34
    3ad8:	cmp	r3, #0
    3adc:	beq	3b28 <coda_ascii_cursor_read_int64+0x254>
    3ae0:	ldr	r3, [fp, #-40]	; 0xffffffd8
    3ae4:	ldr	r2, [r3, #52]	; 0x34
    3ae8:	sub	r0, fp, #124	; 0x7c
    3aec:	ldr	r3, [fp, #-132]	; 0xffffff7c
    3af0:	str	r3, [sp]
    3af4:	ldr	r3, [fp, #-36]	; 0xffffffdc
    3af8:	ldr	r1, [fp, #-32]	; 0xffffffe0
    3afc:	bl	17dc <parse_integer_mapping>
    3b00:	mov	r3, r0
    3b04:	cmp	r3, #0
    3b08:	beq	3b24 <coda_ascii_cursor_read_int64+0x250>
    3b0c:	cmp	r3, #1
    3b10:	bne	3b1c <coda_ascii_cursor_read_int64+0x248>
    3b14:	mov	r3, #0
    3b18:	b	3b54 <coda_ascii_cursor_read_int64+0x280>
    3b1c:	mvn	r3, #0
    3b20:	b	3b54 <coda_ascii_cursor_read_int64+0x280>
    3b24:	nop			; (mov r0, r0)
    3b28:	sub	r0, fp, #124	; 0x7c
    3b2c:	ldr	r3, [fp, #-36]	; 0xffffffdc
    3b30:	ldr	r2, [fp, #-132]	; 0xffffff7c
    3b34:	ldr	r1, [fp, #-32]	; 0xffffffe0
    3b38:	bl	1b24 <coda_ascii_parse_int64>
    3b3c:	mov	r3, r0
    3b40:	cmp	r3, #0
    3b44:	bge	3b50 <coda_ascii_cursor_read_int64+0x27c>
    3b48:	mvn	r3, #0
    3b4c:	b	3b54 <coda_ascii_cursor_read_int64+0x280>
    3b50:	mov	r3, #0
    3b54:	mov	r0, r3
    3b58:	sub	sp, fp, #28
    3b5c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
    3b60:	.word	0x000006a4
    3b64:	.word	0x00000a54
    3b68:	.word	0x00000434
    3b6c:	.word	0x00000210
    3b70:	.word	0x000006dc

00003b74 <coda_ascii_cursor_read_uint64>:
    3b74:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
    3b78:	add	fp, sp, #28
    3b7c:	sub	sp, sp, #128	; 0x80
    3b80:	str	r0, [fp, #-128]	; 0xffffff80
    3b84:	str	r1, [fp, #-132]	; 0xffffff7c
    3b88:	ldr	r3, [fp, #-128]	; 0xffffff80
    3b8c:	ldr	r3, [r3, #4]
    3b90:	sub	r3, r3, #1
    3b94:	ldr	r2, [fp, #-128]	; 0xffffff80
    3b98:	lsl	r3, r3, #4
    3b9c:	add	r3, r2, r3
    3ba0:	ldr	r3, [r3, #8]
    3ba4:	ldr	r3, [r3]
    3ba8:	cmp	r3, #99	; 0x63
    3bac:	bhi	3bd0 <coda_ascii_cursor_read_uint64+0x5c>
    3bb0:	ldr	r3, [fp, #-128]	; 0xffffff80
    3bb4:	ldr	r3, [r3, #4]
    3bb8:	sub	r3, r3, #1
    3bbc:	ldr	r2, [fp, #-128]	; 0xffffff80
    3bc0:	lsl	r3, r3, #4
    3bc4:	add	r3, r2, r3
    3bc8:	ldr	r3, [r3, #8]
    3bcc:	b	3bf0 <coda_ascii_cursor_read_uint64+0x7c>
    3bd0:	ldr	r3, [fp, #-128]	; 0xffffff80
    3bd4:	ldr	r3, [r3, #4]
    3bd8:	sub	r3, r3, #1
    3bdc:	ldr	r2, [fp, #-128]	; 0xffffff80
    3be0:	lsl	r3, r3, #4
    3be4:	add	r3, r2, r3
    3be8:	ldr	r3, [r3, #8]
    3bec:	ldr	r3, [r3, #4]
    3bf0:	str	r3, [fp, #-40]	; 0xffffffd8
    3bf4:	ldr	r3, [fp, #-128]	; 0xffffff80
    3bf8:	ldr	r3, [r3, #4]
    3bfc:	sub	r3, r3, #1
    3c00:	ldr	r2, [fp, #-128]	; 0xffffff80
    3c04:	add	r3, r3, #1
    3c08:	lsl	r3, r3, #4
    3c0c:	add	r3, r2, r3
    3c10:	ldrd	r2, [r3]
    3c14:	strd	r2, [fp, #-52]	; 0xffffffcc
    3c18:	mov	r3, #1
    3c1c:	str	r3, [fp, #-36]	; 0xffffffdc
    3c20:	ldr	r3, [fp, #-40]	; 0xffffffd8
    3c24:	ldrd	r2, [r3, #24]
    3c28:	sub	r1, fp, #60	; 0x3c
    3c2c:	ldr	r0, [fp, #-128]	; 0xffffff80
    3c30:	bl	1154 <get_bit_size_boundary>
    3c34:	mov	r3, r0
    3c38:	cmp	r3, #0
    3c3c:	beq	3c48 <coda_ascii_cursor_read_uint64+0xd4>
    3c40:	mvn	r3, #0
    3c44:	b	3df4 <coda_ascii_cursor_read_uint64+0x280>
    3c48:	ldrd	r2, [fp, #-52]	; 0xffffffcc
    3c4c:	mov	r0, #7
    3c50:	mov	r1, #0
    3c54:	and	r2, r2, r0
    3c58:	and	r3, r3, r1
    3c5c:	orrs	r3, r2, r3
    3c60:	beq	3c78 <coda_ascii_cursor_read_uint64+0x104>
    3c64:	ldr	r1, [pc, #404]	; 3e00 <coda_ascii_cursor_read_uint64+0x28c>
    3c68:	mvn	r0, #21
    3c6c:	bl	0 <coda_set_error>
    3c70:	mvn	r3, #0
    3c74:	b	3df4 <coda_ascii_cursor_read_uint64+0x280>
    3c78:	ldr	r3, [fp, #-40]	; 0xffffffd8
    3c7c:	ldrd	r2, [r3, #24]
    3c80:	cmp	r2, #0
    3c84:	sbcs	r3, r3, #0
    3c88:	blt	3ce0 <coda_ascii_cursor_read_uint64+0x16c>
    3c8c:	mov	r3, #0
    3c90:	str	r3, [fp, #-36]	; 0xffffffdc
    3c94:	ldr	r3, [fp, #-40]	; 0xffffffd8
    3c98:	ldrd	r2, [r3, #24]
    3c9c:	lsr	r1, r2, #3
    3ca0:	str	r1, [fp, #-140]	; 0xffffff74
    3ca4:	ldr	r1, [fp, #-140]	; 0xffffff74
    3ca8:	orr	r1, r1, r3, lsl #29
    3cac:	str	r1, [fp, #-140]	; 0xffffff74
    3cb0:	asr	r3, r3, #3
    3cb4:	str	r3, [fp, #-136]	; 0xffffff78
    3cb8:	ldr	r3, [fp, #-140]	; 0xffffff74
    3cbc:	str	r3, [fp, #-32]	; 0xffffffe0
    3cc0:	ldr	r3, [fp, #-32]	; 0xffffffe0
    3cc4:	cmp	r3, #64	; 0x40
    3cc8:	ble	3d20 <coda_ascii_cursor_read_uint64+0x1ac>
    3ccc:	ldr	r3, [pc, #304]	; 3e04 <coda_ascii_cursor_read_uint64+0x290>
    3cd0:	ldr	r2, [pc, #304]	; 3e08 <coda_ascii_cursor_read_uint64+0x294>
    3cd4:	ldr	r1, [pc, #304]	; 3e0c <coda_ascii_cursor_read_uint64+0x298>
    3cd8:	ldr	r0, [pc, #304]	; 3e10 <coda_ascii_cursor_read_uint64+0x29c>
    3cdc:	bl	0 <__assert_fail>
    3ce0:	ldrd	r2, [fp, #-60]	; 0xffffffc4
    3ce4:	lsr	r4, r2, #3
    3ce8:	orr	r4, r4, r3, lsl #29
    3cec:	asr	r5, r3, #3
    3cf0:	cmp	r4, #64	; 0x40
    3cf4:	sbcs	r3, r5, #0
    3cf8:	bge	3d18 <coda_ascii_cursor_read_uint64+0x1a4>
    3cfc:	ldrd	r2, [fp, #-60]	; 0xffffffc4
    3d00:	lsr	r8, r2, #3
    3d04:	orr	r8, r8, r3, lsl #29
    3d08:	asr	r9, r3, #3
    3d0c:	mov	r3, r8
    3d10:	str	r3, [fp, #-32]	; 0xffffffe0
    3d14:	b	3d20 <coda_ascii_cursor_read_uint64+0x1ac>
    3d18:	mov	r3, #64	; 0x40
    3d1c:	str	r3, [fp, #-32]	; 0xffffffe0
    3d20:	ldr	r3, [fp, #-128]	; 0xffffff80
    3d24:	ldr	r0, [r3]
    3d28:	ldrd	r2, [fp, #-52]	; 0xffffffcc
    3d2c:	lsr	r6, r2, #3
    3d30:	orr	r6, r6, r3, lsl #29
    3d34:	asr	r7, r3, #3
    3d38:	ldr	r3, [fp, #-32]	; 0xffffffe0
    3d3c:	mov	r2, r3
    3d40:	asr	r3, r2, #31
    3d44:	sub	r1, fp, #124	; 0x7c
    3d48:	str	r1, [sp, #8]
    3d4c:	strd	r2, [sp]
    3d50:	mov	r2, r6
    3d54:	mov	r3, r7
    3d58:	bl	1e4 <read_bytes_in_bounds>
    3d5c:	mov	r3, r0
    3d60:	cmp	r3, #0
    3d64:	beq	3d70 <coda_ascii_cursor_read_uint64+0x1fc>
    3d68:	mvn	r3, #0
    3d6c:	b	3df4 <coda_ascii_cursor_read_uint64+0x280>
    3d70:	ldr	r3, [fp, #-40]	; 0xffffffd8
    3d74:	ldr	r3, [r3, #52]	; 0x34
    3d78:	cmp	r3, #0
    3d7c:	beq	3dc8 <coda_ascii_cursor_read_uint64+0x254>
    3d80:	ldr	r3, [fp, #-40]	; 0xffffffd8
    3d84:	ldr	r2, [r3, #52]	; 0x34
    3d88:	sub	r0, fp, #124	; 0x7c
    3d8c:	ldr	r3, [fp, #-132]	; 0xffffff7c
    3d90:	str	r3, [sp]
    3d94:	ldr	r3, [fp, #-36]	; 0xffffffdc
    3d98:	ldr	r1, [fp, #-32]	; 0xffffffe0
    3d9c:	bl	17dc <parse_integer_mapping>
    3da0:	mov	r3, r0
    3da4:	cmp	r3, #0
    3da8:	beq	3dc4 <coda_ascii_cursor_read_uint64+0x250>
    3dac:	cmp	r3, #1
    3db0:	bne	3dbc <coda_ascii_cursor_read_uint64+0x248>
    3db4:	mov	r3, #0
    3db8:	b	3df4 <coda_ascii_cursor_read_uint64+0x280>
    3dbc:	mvn	r3, #0
    3dc0:	b	3df4 <coda_ascii_cursor_read_uint64+0x280>
    3dc4:	nop			; (mov r0, r0)
    3dc8:	sub	r0, fp, #124	; 0x7c
    3dcc:	ldr	r3, [fp, #-36]	; 0xffffffdc
    3dd0:	ldr	r2, [fp, #-132]	; 0xffffff7c
    3dd4:	ldr	r1, [fp, #-32]	; 0xffffffe0
    3dd8:	bl	1dec <coda_ascii_parse_uint64>
    3ddc:	mov	r3, r0
    3de0:	cmp	r3, #0
    3de4:	bge	3df0 <coda_ascii_cursor_read_uint64+0x27c>
    3de8:	mvn	r3, #0
    3dec:	b	3df4 <coda_ascii_cursor_read_uint64+0x280>
    3df0:	mov	r3, #0
    3df4:	mov	r0, r3
    3df8:	sub	sp, fp, #28
    3dfc:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
    3e00:	.word	0x000006a4
    3e04:	.word	0x00000a74
    3e08:	.word	0x00000471
    3e0c:	.word	0x00000210
    3e10:	.word	0x000006dc

00003e14 <coda_ascii_cursor_read_int8>:
    3e14:	push	{fp, lr}
    3e18:	add	fp, sp, #4
    3e1c:	sub	sp, sp, #16
    3e20:	str	r0, [fp, #-16]
    3e24:	str	r1, [fp, #-20]	; 0xffffffec
    3e28:	sub	r3, fp, #12
    3e2c:	mov	r1, r3
    3e30:	ldr	r0, [fp, #-16]
    3e34:	bl	38d4 <coda_ascii_cursor_read_int64>
    3e38:	mov	r3, r0
    3e3c:	cmp	r3, #0
    3e40:	beq	3e4c <coda_ascii_cursor_read_int8+0x38>
    3e44:	mvn	r3, #0
    3e48:	b	3e9c <coda_ascii_cursor_read_int8+0x88>
    3e4c:	ldrd	r2, [fp, #-12]
    3e50:	cmp	r2, #128	; 0x80
    3e54:	sbcs	r3, r3, #0
    3e58:	bge	3e74 <coda_ascii_cursor_read_int8+0x60>
    3e5c:	ldrd	r2, [fp, #-12]
    3e60:	mvn	r0, #127	; 0x7f
    3e64:	mvn	r1, #0
    3e68:	cmp	r2, r0
    3e6c:	sbcs	r3, r3, r1
    3e70:	bge	3e88 <coda_ascii_cursor_read_int8+0x74>
    3e74:	ldr	r1, [pc, #44]	; 3ea8 <coda_ascii_cursor_read_int8+0x94>
    3e78:	ldr	r0, [pc, #44]	; 3eac <coda_ascii_cursor_read_int8+0x98>
    3e7c:	bl	0 <coda_set_error>
    3e80:	mvn	r3, #0
    3e84:	b	3e9c <coda_ascii_cursor_read_int8+0x88>
    3e88:	ldrd	r2, [fp, #-12]
    3e8c:	sxtb	r2, r2
    3e90:	ldr	r3, [fp, #-20]	; 0xffffffec
    3e94:	strb	r2, [r3]
    3e98:	mov	r3, #0
    3e9c:	mov	r0, r3
    3ea0:	sub	sp, fp, #4
    3ea4:	pop	{fp, pc}
    3ea8:	.word	0x00000704
    3eac:	.word	0xfffffed4

00003eb0 <coda_ascii_cursor_read_uint8>:
    3eb0:	push	{fp, lr}
    3eb4:	add	fp, sp, #4
    3eb8:	sub	sp, sp, #16
    3ebc:	str	r0, [fp, #-16]
    3ec0:	str	r1, [fp, #-20]	; 0xffffffec
    3ec4:	sub	r3, fp, #12
    3ec8:	mov	r1, r3
    3ecc:	ldr	r0, [fp, #-16]
    3ed0:	bl	3b74 <coda_ascii_cursor_read_uint64>
    3ed4:	mov	r3, r0
    3ed8:	cmp	r3, #0
    3edc:	beq	3ee8 <coda_ascii_cursor_read_uint8+0x38>
    3ee0:	mvn	r3, #0
    3ee4:	b	3f20 <coda_ascii_cursor_read_uint8+0x70>
    3ee8:	ldrd	r2, [fp, #-12]
    3eec:	cmp	r3, #0
    3ef0:	cmpeq	r2, #255	; 0xff
    3ef4:	bls	3f0c <coda_ascii_cursor_read_uint8+0x5c>
    3ef8:	ldr	r1, [pc, #44]	; 3f2c <coda_ascii_cursor_read_uint8+0x7c>
    3efc:	ldr	r0, [pc, #44]	; 3f30 <coda_ascii_cursor_read_uint8+0x80>
    3f00:	bl	0 <coda_set_error>
    3f04:	mvn	r3, #0
    3f08:	b	3f20 <coda_ascii_cursor_read_uint8+0x70>
    3f0c:	ldrd	r2, [fp, #-12]
    3f10:	uxtb	r2, r2
    3f14:	ldr	r3, [fp, #-20]	; 0xffffffec
    3f18:	strb	r2, [r3]
    3f1c:	mov	r3, #0
    3f20:	mov	r0, r3
    3f24:	sub	sp, fp, #4
    3f28:	pop	{fp, pc}
    3f2c:	.word	0x00000748
    3f30:	.word	0xfffffed4

00003f34 <coda_ascii_cursor_read_int16>:
    3f34:	push	{fp, lr}
    3f38:	add	fp, sp, #4
    3f3c:	sub	sp, sp, #16
    3f40:	str	r0, [fp, #-16]
    3f44:	str	r1, [fp, #-20]	; 0xffffffec
    3f48:	sub	r3, fp, #12
    3f4c:	mov	r1, r3
    3f50:	ldr	r0, [fp, #-16]
    3f54:	bl	38d4 <coda_ascii_cursor_read_int64>
    3f58:	mov	r3, r0
    3f5c:	cmp	r3, #0
    3f60:	beq	3f6c <coda_ascii_cursor_read_int16+0x38>
    3f64:	mvn	r3, #0
    3f68:	b	3fc4 <coda_ascii_cursor_read_int16+0x90>
    3f6c:	ldrd	r2, [fp, #-12]
    3f70:	ldr	r0, [pc, #88]	; 3fd0 <coda_ascii_cursor_read_int16+0x9c>
    3f74:	mov	r1, #0
    3f78:	cmp	r0, r2
    3f7c:	sbcs	r3, r1, r3
    3f80:	blt	3f9c <coda_ascii_cursor_read_int16+0x68>
    3f84:	ldrd	r2, [fp, #-12]
    3f88:	ldr	r0, [pc, #68]	; 3fd4 <coda_ascii_cursor_read_int16+0xa0>
    3f8c:	mvn	r1, #0
    3f90:	cmp	r2, r0
    3f94:	sbcs	r3, r3, r1
    3f98:	bge	3fb0 <coda_ascii_cursor_read_int16+0x7c>
    3f9c:	ldr	r1, [pc, #52]	; 3fd8 <coda_ascii_cursor_read_int16+0xa4>
    3fa0:	ldr	r0, [pc, #52]	; 3fdc <coda_ascii_cursor_read_int16+0xa8>
    3fa4:	bl	0 <coda_set_error>
    3fa8:	mvn	r3, #0
    3fac:	b	3fc4 <coda_ascii_cursor_read_int16+0x90>
    3fb0:	ldrd	r2, [fp, #-12]
    3fb4:	sxth	r2, r2
    3fb8:	ldr	r3, [fp, #-20]	; 0xffffffec
    3fbc:	strh	r2, [r3]
    3fc0:	mov	r3, #0
    3fc4:	mov	r0, r3
    3fc8:	sub	sp, fp, #4
    3fcc:	pop	{fp, pc}
    3fd0:	.word	0x00007fff
    3fd4:	.word	0xffff8000
    3fd8:	.word	0x00000790
    3fdc:	.word	0xfffffed4

00003fe0 <coda_ascii_cursor_read_uint16>:
    3fe0:	push	{fp, lr}
    3fe4:	add	fp, sp, #4
    3fe8:	sub	sp, sp, #16
    3fec:	str	r0, [fp, #-16]
    3ff0:	str	r1, [fp, #-20]	; 0xffffffec
    3ff4:	sub	r3, fp, #12
    3ff8:	mov	r1, r3
    3ffc:	ldr	r0, [fp, #-16]
    4000:	bl	3b74 <coda_ascii_cursor_read_uint64>
    4004:	mov	r3, r0
    4008:	cmp	r3, #0
    400c:	beq	4018 <coda_ascii_cursor_read_uint16+0x38>
    4010:	mvn	r3, #0
    4014:	b	4058 <coda_ascii_cursor_read_uint16+0x78>
    4018:	ldrd	r2, [fp, #-12]
    401c:	ldr	r0, [pc, #64]	; 4064 <coda_ascii_cursor_read_uint16+0x84>
    4020:	mov	r1, #0
    4024:	cmp	r3, r1
    4028:	cmpeq	r2, r0
    402c:	bls	4044 <coda_ascii_cursor_read_uint16+0x64>
    4030:	ldr	r1, [pc, #48]	; 4068 <coda_ascii_cursor_read_uint16+0x88>
    4034:	ldr	r0, [pc, #48]	; 406c <coda_ascii_cursor_read_uint16+0x8c>
    4038:	bl	0 <coda_set_error>
    403c:	mvn	r3, #0
    4040:	b	4058 <coda_ascii_cursor_read_uint16+0x78>
    4044:	ldrd	r2, [fp, #-12]
    4048:	uxth	r2, r2
    404c:	ldr	r3, [fp, #-20]	; 0xffffffec
    4050:	strh	r2, [r3]
    4054:	mov	r3, #0
    4058:	mov	r0, r3
    405c:	sub	sp, fp, #4
    4060:	pop	{fp, pc}
    4064:	.word	0x0000ffff
    4068:	.word	0x000007d8
    406c:	.word	0xfffffed4

00004070 <coda_ascii_cursor_read_int32>:
    4070:	push	{fp, lr}
    4074:	add	fp, sp, #4
    4078:	sub	sp, sp, #16
    407c:	str	r0, [fp, #-16]
    4080:	str	r1, [fp, #-20]	; 0xffffffec
    4084:	sub	r3, fp, #12
    4088:	mov	r1, r3
    408c:	ldr	r0, [fp, #-16]
    4090:	bl	38d4 <coda_ascii_cursor_read_int64>
    4094:	mov	r3, r0
    4098:	cmp	r3, #0
    409c:	beq	40a8 <coda_ascii_cursor_read_int32+0x38>
    40a0:	mvn	r3, #0
    40a4:	b	40fc <coda_ascii_cursor_read_int32+0x8c>
    40a8:	ldrd	r2, [fp, #-12]
    40ac:	mvn	r0, #-2147483648	; 0x80000000
    40b0:	mov	r1, #0
    40b4:	cmp	r0, r2
    40b8:	sbcs	r3, r1, r3
    40bc:	blt	40d8 <coda_ascii_cursor_read_int32+0x68>
    40c0:	ldrd	r2, [fp, #-12]
    40c4:	mov	r0, #-2147483648	; 0x80000000
    40c8:	mvn	r1, #0
    40cc:	cmp	r2, r0
    40d0:	sbcs	r3, r3, r1
    40d4:	bge	40ec <coda_ascii_cursor_read_int32+0x7c>
    40d8:	ldr	r1, [pc, #40]	; 4108 <coda_ascii_cursor_read_int32+0x98>
    40dc:	ldr	r0, [pc, #40]	; 410c <coda_ascii_cursor_read_int32+0x9c>
    40e0:	bl	0 <coda_set_error>
    40e4:	mvn	r3, #0
    40e8:	b	40fc <coda_ascii_cursor_read_int32+0x8c>
    40ec:	ldrd	r2, [fp, #-12]
    40f0:	ldr	r3, [fp, #-20]	; 0xffffffec
    40f4:	str	r2, [r3]
    40f8:	mov	r3, #0
    40fc:	mov	r0, r3
    4100:	sub	sp, fp, #4
    4104:	pop	{fp, pc}
    4108:	.word	0x00000820
    410c:	.word	0xfffffed4

00004110 <coda_ascii_cursor_read_uint32>:
    4110:	push	{fp, lr}
    4114:	add	fp, sp, #4
    4118:	sub	sp, sp, #16
    411c:	str	r0, [fp, #-16]
    4120:	str	r1, [fp, #-20]	; 0xffffffec
    4124:	sub	r3, fp, #12
    4128:	mov	r1, r3
    412c:	ldr	r0, [fp, #-16]
    4130:	bl	3b74 <coda_ascii_cursor_read_uint64>
    4134:	mov	r3, r0
    4138:	cmp	r3, #0
    413c:	beq	4148 <coda_ascii_cursor_read_uint32+0x38>
    4140:	mvn	r3, #0
    4144:	b	4184 <coda_ascii_cursor_read_uint32+0x74>
    4148:	ldrd	r2, [fp, #-12]
    414c:	mvn	r0, #0
    4150:	mov	r1, #0
    4154:	cmp	r3, r1
    4158:	cmpeq	r2, r0
    415c:	bls	4174 <coda_ascii_cursor_read_uint32+0x64>
    4160:	ldr	r1, [pc, #40]	; 4190 <coda_ascii_cursor_read_uint32+0x80>
    4164:	ldr	r0, [pc, #40]	; 4194 <coda_ascii_cursor_read_uint32+0x84>
    4168:	bl	0 <coda_set_error>
    416c:	mvn	r3, #0
    4170:	b	4184 <coda_ascii_cursor_read_uint32+0x74>
    4174:	ldrd	r2, [fp, #-12]
    4178:	ldr	r3, [fp, #-20]	; 0xffffffec
    417c:	str	r2, [r3]
    4180:	mov	r3, #0
    4184:	mov	r0, r3
    4188:	sub	sp, fp, #4
    418c:	pop	{fp, pc}
    4190:	.word	0x00000868
    4194:	.word	0xfffffed4

00004198 <coda_ascii_cursor_read_double>:
    4198:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
    419c:	add	fp, sp, #28
    41a0:	sub	sp, sp, #128	; 0x80
    41a4:	str	r0, [fp, #-128]	; 0xffffff80
    41a8:	str	r1, [fp, #-132]	; 0xffffff7c
    41ac:	ldr	r3, [fp, #-128]	; 0xffffff80
    41b0:	ldr	r3, [r3, #4]
    41b4:	sub	r3, r3, #1
    41b8:	ldr	r2, [fp, #-128]	; 0xffffff80
    41bc:	lsl	r3, r3, #4
    41c0:	add	r3, r2, r3
    41c4:	ldr	r3, [r3, #8]
    41c8:	ldr	r3, [r3]
    41cc:	cmp	r3, #99	; 0x63
    41d0:	bhi	41f4 <coda_ascii_cursor_read_double+0x5c>
    41d4:	ldr	r3, [fp, #-128]	; 0xffffff80
    41d8:	ldr	r3, [r3, #4]
    41dc:	sub	r3, r3, #1
    41e0:	ldr	r2, [fp, #-128]	; 0xffffff80
    41e4:	lsl	r3, r3, #4
    41e8:	add	r3, r2, r3
    41ec:	ldr	r3, [r3, #8]
    41f0:	b	4214 <coda_ascii_cursor_read_double+0x7c>
    41f4:	ldr	r3, [fp, #-128]	; 0xffffff80
    41f8:	ldr	r3, [r3, #4]
    41fc:	sub	r3, r3, #1
    4200:	ldr	r2, [fp, #-128]	; 0xffffff80
    4204:	lsl	r3, r3, #4
    4208:	add	r3, r2, r3
    420c:	ldr	r3, [r3, #8]
    4210:	ldr	r3, [r3, #4]
    4214:	str	r3, [fp, #-40]	; 0xffffffd8
    4218:	ldr	r3, [fp, #-128]	; 0xffffff80
    421c:	ldr	r3, [r3, #4]
    4220:	sub	r3, r3, #1
    4224:	ldr	r2, [fp, #-128]	; 0xffffff80
    4228:	add	r3, r3, #1
    422c:	lsl	r3, r3, #4
    4230:	add	r3, r2, r3
    4234:	ldrd	r2, [r3]
    4238:	strd	r2, [fp, #-52]	; 0xffffffcc
    423c:	mov	r3, #1
    4240:	str	r3, [fp, #-36]	; 0xffffffdc
    4244:	ldr	r3, [fp, #-40]	; 0xffffffd8
    4248:	ldrd	r2, [r3, #24]
    424c:	sub	r1, fp, #60	; 0x3c
    4250:	ldr	r0, [fp, #-128]	; 0xffffff80
    4254:	bl	1154 <get_bit_size_boundary>
    4258:	mov	r3, r0
    425c:	cmp	r3, #0
    4260:	beq	426c <coda_ascii_cursor_read_double+0xd4>
    4264:	mvn	r3, #0
    4268:	b	4418 <coda_ascii_cursor_read_double+0x280>
    426c:	ldrd	r2, [fp, #-52]	; 0xffffffcc
    4270:	mov	r0, #7
    4274:	mov	r1, #0
    4278:	and	r2, r2, r0
    427c:	and	r3, r3, r1
    4280:	orrs	r3, r2, r3
    4284:	beq	429c <coda_ascii_cursor_read_double+0x104>
    4288:	ldr	r1, [pc, #404]	; 4424 <coda_ascii_cursor_read_double+0x28c>
    428c:	mvn	r0, #21
    4290:	bl	0 <coda_set_error>
    4294:	mvn	r3, #0
    4298:	b	4418 <coda_ascii_cursor_read_double+0x280>
    429c:	ldr	r3, [fp, #-40]	; 0xffffffd8
    42a0:	ldrd	r2, [r3, #24]
    42a4:	cmp	r2, #0
    42a8:	sbcs	r3, r3, #0
    42ac:	blt	4304 <coda_ascii_cursor_read_double+0x16c>
    42b0:	mov	r3, #0
    42b4:	str	r3, [fp, #-36]	; 0xffffffdc
    42b8:	ldr	r3, [fp, #-40]	; 0xffffffd8
    42bc:	ldrd	r2, [r3, #24]
    42c0:	lsr	r1, r2, #3
    42c4:	str	r1, [fp, #-140]	; 0xffffff74
    42c8:	ldr	r1, [fp, #-140]	; 0xffffff74
    42cc:	orr	r1, r1, r3, lsl #29
    42d0:	str	r1, [fp, #-140]	; 0xffffff74
    42d4:	asr	r3, r3, #3
    42d8:	str	r3, [fp, #-136]	; 0xffffff78
    42dc:	ldr	r3, [fp, #-140]	; 0xffffff74
    42e0:	str	r3, [fp, #-32]	; 0xffffffe0
    42e4:	ldr	r3, [fp, #-32]	; 0xffffffe0
    42e8:	cmp	r3, #64	; 0x40
    42ec:	ble	4344 <coda_ascii_cursor_read_double+0x1ac>
    42f0:	ldr	r3, [pc, #304]	; 4428 <coda_ascii_cursor_read_double+0x290>
    42f4:	ldr	r2, [pc, #304]	; 442c <coda_ascii_cursor_read_double+0x294>
    42f8:	ldr	r1, [pc, #304]	; 4430 <coda_ascii_cursor_read_double+0x298>
    42fc:	ldr	r0, [pc, #304]	; 4434 <coda_ascii_cursor_read_double+0x29c>
    4300:	bl	0 <__assert_fail>
    4304:	ldrd	r2, [fp, #-60]	; 0xffffffc4
    4308:	lsr	r4, r2, #3
    430c:	orr	r4, r4, r3, lsl #29
    4310:	asr	r5, r3, #3
    4314:	cmp	r4, #64	; 0x40
    4318:	sbcs	r3, r5, #0
    431c:	bge	433c <coda_ascii_cursor_read_double+0x1a4>
    4320:	ldrd	r2, [fp, #-60]	; 0xffffffc4
    4324:	lsr	r8, r2, #3
    4328:	orr	r8, r8, r3, lsl #29
    432c:	asr	r9, r3, #3
    4330:	mov	r3, r8
    4334:	str	r3, [fp, #-32]	; 0xffffffe0
    4338:	b	4344 <coda_ascii_cursor_read_double+0x1ac>
    433c:	mov	r3, #64	; 0x40
    4340:	str	r3, [fp, #-32]	; 0xffffffe0
    4344:	ldr	r3, [fp, #-128]	; 0xffffff80
    4348:	ldr	r0, [r3]
    434c:	ldrd	r2, [fp, #-52]	; 0xffffffcc
    4350:	lsr	r6, r2, #3
    4354:	orr	r6, r6, r3, lsl #29
    4358:	asr	r7, r3, #3
    435c:	ldr	r3, [fp, #-32]	; 0xffffffe0
    4360:	mov	r2, r3
    4364:	asr	r3, r2, #31
    4368:	sub	r1, fp, #124	; 0x7c
    436c:	str	r1, [sp, #8]
    4370:	strd	r2, [sp]
    4374:	mov	r2, r6
    4378:	mov	r3, r7
    437c:	bl	1e4 <read_bytes_in_bounds>
    4380:	mov	r3, r0
    4384:	cmp	r3, #0
    4388:	beq	4394 <coda_ascii_cursor_read_double+0x1fc>
    438c:	mvn	r3, #0
    4390:	b	4418 <coda_ascii_cursor_read_double+0x280>
    4394:	ldr	r3, [fp, #-40]	; 0xffffffd8
    4398:	ldr	r3, [r3, #52]	; 0x34
    439c:	cmp	r3, #0
    43a0:	beq	43ec <coda_ascii_cursor_read_double+0x254>
    43a4:	ldr	r3, [fp, #-40]	; 0xffffffd8
    43a8:	ldr	r2, [r3, #52]	; 0x34
    43ac:	sub	r0, fp, #124	; 0x7c
    43b0:	ldr	r3, [fp, #-132]	; 0xffffff7c
    43b4:	str	r3, [sp]
    43b8:	ldr	r3, [fp, #-36]	; 0xffffffdc
    43bc:	ldr	r1, [fp, #-32]	; 0xffffffe0
    43c0:	bl	1980 <parse_float_mapping>
    43c4:	mov	r3, r0
    43c8:	cmp	r3, #0
    43cc:	beq	43e8 <coda_ascii_cursor_read_double+0x250>
    43d0:	cmp	r3, #1
    43d4:	bne	43e0 <coda_ascii_cursor_read_double+0x248>
    43d8:	mov	r3, #0
    43dc:	b	4418 <coda_ascii_cursor_read_double+0x280>
    43e0:	mvn	r3, #0
    43e4:	b	4418 <coda_ascii_cursor_read_double+0x280>
    43e8:	nop			; (mov r0, r0)
    43ec:	sub	r0, fp, #124	; 0x7c
    43f0:	ldr	r3, [fp, #-36]	; 0xffffffdc
    43f4:	ldr	r2, [fp, #-132]	; 0xffffff7c
    43f8:	ldr	r1, [fp, #-32]	; 0xffffffe0
    43fc:	bl	205c <coda_ascii_parse_double>
    4400:	mov	r3, r0
    4404:	cmp	r3, #0
    4408:	bge	4414 <coda_ascii_cursor_read_double+0x27c>
    440c:	mvn	r3, #0
    4410:	b	4418 <coda_ascii_cursor_read_double+0x280>
    4414:	mov	r3, #0
    4418:	mov	r0, r3
    441c:	sub	sp, fp, #28
    4420:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
    4424:	.word	0x000006a4
    4428:	.word	0x00000a94
    442c:	.word	0x0000051a
    4430:	.word	0x00000210
    4434:	.word	0x000006dc

00004438 <coda_ascii_cursor_read_float>:
    4438:	push	{fp, lr}
    443c:	add	fp, sp, #4
    4440:	sub	sp, sp, #16
    4444:	str	r0, [fp, #-16]
    4448:	str	r1, [fp, #-20]	; 0xffffffec
    444c:	sub	r3, fp, #12
    4450:	mov	r1, r3
    4454:	ldr	r0, [fp, #-16]
    4458:	bl	4198 <coda_ascii_cursor_read_double>
    445c:	mov	r3, r0
    4460:	cmp	r3, #0
    4464:	beq	4470 <coda_ascii_cursor_read_float+0x38>
    4468:	mvn	r3, #0
    446c:	b	4484 <coda_ascii_cursor_read_float+0x4c>
    4470:	vldr	d7, [fp, #-12]
    4474:	vcvt.f32.f64	s15, d7
    4478:	ldr	r3, [fp, #-20]	; 0xffffffec
    447c:	vstr	s15, [r3]
    4480:	mov	r3, #0
    4484:	mov	r0, r3
    4488:	sub	sp, fp, #4
    448c:	pop	{fp, pc}

00004490 <coda_ascii_cursor_read_char>:
    4490:	push	{r4, r5, fp, lr}
    4494:	add	fp, sp, #12
    4498:	sub	sp, sp, #40	; 0x28
    449c:	str	r0, [fp, #-32]	; 0xffffffe0
    44a0:	str	r1, [fp, #-36]	; 0xffffffdc
    44a4:	sub	r1, fp, #28
    44a8:	mov	r2, #8
    44ac:	mov	r3, #0
    44b0:	ldr	r0, [fp, #-32]	; 0xffffffe0
    44b4:	bl	1154 <get_bit_size_boundary>
    44b8:	mov	r3, r0
    44bc:	cmp	r3, #0
    44c0:	beq	44cc <coda_ascii_cursor_read_char+0x3c>
    44c4:	mvn	r3, #0
    44c8:	b	4560 <coda_ascii_cursor_read_char+0xd0>
    44cc:	ldr	r3, [fp, #-32]	; 0xffffffe0
    44d0:	ldr	r3, [r3, #4]
    44d4:	sub	r3, r3, #1
    44d8:	ldr	r2, [fp, #-32]	; 0xffffffe0
    44dc:	add	r3, r3, #1
    44e0:	lsl	r3, r3, #4
    44e4:	add	r3, r2, r3
    44e8:	ldrd	r2, [r3]
    44ec:	strd	r2, [fp, #-20]	; 0xffffffec
    44f0:	ldrd	r2, [fp, #-20]	; 0xffffffec
    44f4:	mov	r0, #7
    44f8:	mov	r1, #0
    44fc:	and	r2, r2, r0
    4500:	and	r3, r3, r1
    4504:	orrs	r3, r2, r3
    4508:	beq	4520 <coda_ascii_cursor_read_char+0x90>
    450c:	ldr	r1, [pc, #88]	; 456c <coda_ascii_cursor_read_char+0xdc>
    4510:	ldr	r0, [pc, #88]	; 4570 <coda_ascii_cursor_read_char+0xe0>
    4514:	bl	0 <coda_set_error>
    4518:	mvn	r3, #0
    451c:	b	4560 <coda_ascii_cursor_read_char+0xd0>
    4520:	ldr	r3, [fp, #-32]	; 0xffffffe0
    4524:	ldr	r1, [r3]
    4528:	ldrd	r2, [fp, #-20]	; 0xffffffec
    452c:	lsr	r4, r2, #3
    4530:	orr	r4, r4, r3, lsl #29
    4534:	asr	r5, r3, #3
    4538:	ldr	r3, [fp, #-36]	; 0xffffffdc
    453c:	str	r3, [sp, #8]
    4540:	mov	r2, #1
    4544:	mov	r3, #0
    4548:	strd	r2, [sp]
    454c:	mov	r2, r4
    4550:	mov	r3, r5
    4554:	mov	r0, r1
    4558:	bl	1e4 <read_bytes_in_bounds>
    455c:	mov	r3, r0
    4560:	mov	r0, r3
    4564:	sub	sp, fp, #12
    4568:	pop	{r4, r5, fp, pc}
    456c:	.word	0x000008b0
    4570:	.word	0xfffffed4

00004574 <coda_ascii_cursor_read_string>:
    4574:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
    4578:	add	fp, sp, #28
    457c:	sub	sp, sp, #72	; 0x48
    4580:	str	r0, [fp, #-72]	; 0xffffffb8
    4584:	str	r1, [fp, #-76]	; 0xffffffb4
    4588:	str	r2, [fp, #-80]	; 0xffffffb0
    458c:	ldr	r3, [fp, #-72]	; 0xffffffb8
    4590:	ldr	r3, [r3, #4]
    4594:	sub	r3, r3, #1
    4598:	ldr	r2, [fp, #-72]	; 0xffffffb8
    459c:	lsl	r3, r3, #4
    45a0:	add	r3, r2, r3
    45a4:	ldr	r3, [r3, #8]
    45a8:	ldr	r3, [r3]
    45ac:	cmp	r3, #99	; 0x63
    45b0:	bhi	45d4 <coda_ascii_cursor_read_string+0x60>
    45b4:	ldr	r3, [fp, #-72]	; 0xffffffb8
    45b8:	ldr	r3, [r3, #4]
    45bc:	sub	r3, r3, #1
    45c0:	ldr	r2, [fp, #-72]	; 0xffffffb8
    45c4:	lsl	r3, r3, #4
    45c8:	add	r3, r2, r3
    45cc:	ldr	r3, [r3, #8]
    45d0:	b	45f4 <coda_ascii_cursor_read_string+0x80>
    45d4:	ldr	r3, [fp, #-72]	; 0xffffffb8
    45d8:	ldr	r3, [r3, #4]
    45dc:	sub	r3, r3, #1
    45e0:	ldr	r2, [fp, #-72]	; 0xffffffb8
    45e4:	lsl	r3, r3, #4
    45e8:	add	r3, r2, r3
    45ec:	ldr	r3, [r3, #8]
    45f0:	ldr	r3, [r3, #4]
    45f4:	str	r3, [fp, #-40]	; 0xffffffd8
    45f8:	ldr	r3, [fp, #-72]	; 0xffffffb8
    45fc:	ldr	r3, [r3, #4]
    4600:	sub	r3, r3, #1
    4604:	ldr	r2, [fp, #-72]	; 0xffffffb8
    4608:	add	r3, r3, #1
    460c:	lsl	r3, r3, #4
    4610:	add	r3, r2, r3
    4614:	ldrd	r2, [r3]
    4618:	strd	r2, [fp, #-52]	; 0xffffffcc
    461c:	mov	r2, #0
    4620:	mov	r3, #0
    4624:	strd	r2, [fp, #-36]	; 0xffffffdc
    4628:	ldrd	r2, [fp, #-52]	; 0xffffffcc
    462c:	mov	r0, #7
    4630:	mov	r1, #0
    4634:	and	r2, r2, r0
    4638:	and	r3, r3, r1
    463c:	orrs	r3, r2, r3
    4640:	beq	4658 <coda_ascii_cursor_read_string+0xe4>
    4644:	ldr	r1, [pc, #404]	; 47e0 <coda_ascii_cursor_read_string+0x26c>
    4648:	ldr	r0, [pc, #404]	; 47e4 <coda_ascii_cursor_read_string+0x270>
    464c:	bl	0 <coda_set_error>
    4650:	mvn	r3, #0
    4654:	b	47d4 <coda_ascii_cursor_read_string+0x260>
    4658:	ldr	r3, [fp, #-40]	; 0xffffffd8
    465c:	ldrd	r2, [r3, #24]
    4660:	cmp	r2, #0
    4664:	sbcs	r3, r3, #0
    4668:	bge	46d8 <coda_ascii_cursor_read_string+0x164>
    466c:	sub	r3, fp, #60	; 0x3c
    4670:	mov	r1, r3
    4674:	ldr	r0, [fp, #-72]	; 0xffffffb8
    4678:	bl	2904 <coda_ascii_cursor_get_bit_size>
    467c:	mov	r3, r0
    4680:	cmp	r3, #0
    4684:	beq	4690 <coda_ascii_cursor_read_string+0x11c>
    4688:	mvn	r3, #0
    468c:	b	47d4 <coda_ascii_cursor_read_string+0x260>
    4690:	ldrd	r2, [fp, #-60]	; 0xffffffc4
    4694:	mov	r0, #7
    4698:	mov	r1, #0
    469c:	and	r2, r2, r0
    46a0:	and	r3, r3, r1
    46a4:	orrs	r3, r2, r3
    46a8:	beq	46c0 <coda_ascii_cursor_read_string+0x14c>
    46ac:	ldr	r1, [pc, #308]	; 47e8 <coda_ascii_cursor_read_string+0x274>
    46b0:	ldr	r0, [pc, #300]	; 47e4 <coda_ascii_cursor_read_string+0x270>
    46b4:	bl	0 <coda_set_error>
    46b8:	mvn	r3, #0
    46bc:	b	47d4 <coda_ascii_cursor_read_string+0x260>
    46c0:	ldrd	r2, [fp, #-60]	; 0xffffffc4
    46c4:	lsr	r6, r2, #3
    46c8:	orr	r6, r6, r3, lsl #29
    46cc:	asr	r7, r3, #3
    46d0:	strd	r6, [fp, #-36]	; 0xffffffdc
    46d4:	b	4718 <coda_ascii_cursor_read_string+0x1a4>
    46d8:	ldr	r3, [fp, #-40]	; 0xffffffd8
    46dc:	ldrd	r2, [r3, #24]
    46e0:	sub	r1, fp, #68	; 0x44
    46e4:	ldr	r0, [fp, #-72]	; 0xffffffb8
    46e8:	bl	1154 <get_bit_size_boundary>
    46ec:	mov	r3, r0
    46f0:	cmp	r3, #0
    46f4:	beq	4700 <coda_ascii_cursor_read_string+0x18c>
    46f8:	mvn	r3, #0
    46fc:	b	47d4 <coda_ascii_cursor_read_string+0x260>
    4700:	ldr	r3, [fp, #-40]	; 0xffffffd8
    4704:	ldrd	r2, [r3, #24]
    4708:	lsr	r4, r2, #3
    470c:	orr	r4, r4, r3, lsl #29
    4710:	asr	r5, r3, #3
    4714:	strd	r4, [fp, #-36]	; 0xffffffdc
    4718:	ldrd	r2, [fp, #-36]	; 0xffffffdc
    471c:	adds	r2, r2, #1
    4720:	adc	r3, r3, #0
    4724:	ldr	r1, [fp, #-80]	; 0xffffffb0
    4728:	mov	r0, r1
    472c:	asr	r1, r0, #31
    4730:	cmp	r0, r2
    4734:	sbcs	r3, r1, r3
    4738:	bge	4750 <coda_ascii_cursor_read_string+0x1dc>
    473c:	ldr	r3, [fp, #-80]	; 0xffffffb0
    4740:	sub	r3, r3, #1
    4744:	mov	r2, r3
    4748:	asr	r3, r2, #31
    474c:	strd	r2, [fp, #-36]	; 0xffffffdc
    4750:	ldrd	r2, [fp, #-36]	; 0xffffffdc
    4754:	cmp	r2, #1
    4758:	sbcs	r3, r3, #0
    475c:	blt	47c4 <coda_ascii_cursor_read_string+0x250>
    4760:	ldr	r3, [fp, #-72]	; 0xffffffb8
    4764:	ldr	r1, [r3]
    4768:	ldrd	r2, [fp, #-52]	; 0xffffffcc
    476c:	lsr	r8, r2, #3
    4770:	orr	r8, r8, r3, lsl #29
    4774:	asr	r9, r3, #3
    4778:	ldr	r3, [fp, #-76]	; 0xffffffb4
    477c:	str	r3, [sp, #8]
    4780:	ldrd	r2, [fp, #-36]	; 0xffffffdc
    4784:	strd	r2, [sp]
    4788:	mov	r2, r8
    478c:	mov	r3, r9
    4790:	mov	r0, r1
    4794:	bl	0 <read_bytes>
    4798:	mov	r3, r0
    479c:	cmp	r3, #0
    47a0:	beq	47ac <coda_ascii_cursor_read_string+0x238>
    47a4:	mvn	r3, #0
    47a8:	b	47d4 <coda_ascii_cursor_read_string+0x260>
    47ac:	ldr	r3, [fp, #-36]	; 0xffffffdc
    47b0:	ldr	r2, [fp, #-76]	; 0xffffffb4
    47b4:	add	r3, r2, r3
    47b8:	mov	r2, #0
    47bc:	strb	r2, [r3]
    47c0:	b	47d0 <coda_ascii_cursor_read_string+0x25c>
    47c4:	ldr	r3, [fp, #-76]	; 0xffffffb4
    47c8:	mov	r2, #0
    47cc:	strb	r2, [r3]
    47d0:	mov	r3, #0
    47d4:	mov	r0, r3
    47d8:	sub	sp, fp, #28
    47dc:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
    47e0:	.word	0x000008f4
    47e4:	.word	0xfffffed4
    47e8:	.word	0x00000934

000047ec <coda_ascii_cursor_read_bits>:
    47ec:	push	{r4, r5, r6, r7, fp, lr}
    47f0:	add	fp, sp, #20
    47f4:	sub	sp, sp, #32
    47f8:	str	r0, [fp, #-24]	; 0xffffffe8
    47fc:	str	r1, [fp, #-28]	; 0xffffffe4
    4800:	strd	r2, [fp, #-36]	; 0xffffffdc
    4804:	ldrd	r2, [fp, #4]
    4808:	mov	r0, #7
    480c:	mov	r1, #0
    4810:	and	r2, r2, r0
    4814:	and	r3, r3, r1
    4818:	orrs	r3, r2, r3
    481c:	beq	4834 <coda_ascii_cursor_read_bits+0x48>
    4820:	ldr	r1, [pc, #224]	; 4908 <coda_ascii_cursor_read_bits+0x11c>
    4824:	mvn	r0, #99	; 0x63
    4828:	bl	0 <coda_set_error>
    482c:	mvn	r3, #0
    4830:	b	48fc <coda_ascii_cursor_read_bits+0x110>
    4834:	ldr	r3, [fp, #-24]	; 0xffffffe8
    4838:	ldr	r3, [r3, #4]
    483c:	sub	r3, r3, #1
    4840:	ldr	r2, [fp, #-24]	; 0xffffffe8
    4844:	add	r3, r3, #1
    4848:	lsl	r3, r3, #4
    484c:	add	r3, r2, r3
    4850:	ldrd	r0, [r3]
    4854:	ldrd	r2, [fp, #-36]	; 0xffffffdc
    4858:	adds	r2, r2, r0
    485c:	adc	r3, r3, r1
    4860:	mov	r0, #7
    4864:	mov	r1, #0
    4868:	and	r2, r2, r0
    486c:	and	r3, r3, r1
    4870:	orrs	r3, r2, r3
    4874:	beq	488c <coda_ascii_cursor_read_bits+0xa0>
    4878:	ldr	r1, [pc, #140]	; 490c <coda_ascii_cursor_read_bits+0x120>
    487c:	ldr	r0, [pc, #140]	; 4910 <coda_ascii_cursor_read_bits+0x124>
    4880:	bl	0 <coda_set_error>
    4884:	mvn	r3, #0
    4888:	b	48fc <coda_ascii_cursor_read_bits+0x110>
    488c:	ldr	r3, [fp, #-24]	; 0xffffffe8
    4890:	ldr	ip, [r3]
    4894:	ldr	r3, [fp, #-24]	; 0xffffffe8
    4898:	ldr	r3, [r3, #4]
    489c:	sub	r3, r3, #1
    48a0:	ldr	r2, [fp, #-24]	; 0xffffffe8
    48a4:	add	r3, r3, #1
    48a8:	lsl	r3, r3, #4
    48ac:	add	r3, r2, r3
    48b0:	ldrd	r0, [r3]
    48b4:	ldrd	r2, [fp, #-36]	; 0xffffffdc
    48b8:	adds	r2, r2, r0
    48bc:	adc	r3, r3, r1
    48c0:	lsr	r6, r2, #3
    48c4:	orr	r6, r6, r3, lsl #29
    48c8:	asr	r7, r3, #3
    48cc:	ldrd	r2, [fp, #4]
    48d0:	lsr	r4, r2, #3
    48d4:	orr	r4, r4, r3, lsl #29
    48d8:	asr	r5, r3, #3
    48dc:	ldr	r3, [fp, #-28]	; 0xffffffe4
    48e0:	str	r3, [sp, #8]
    48e4:	strd	r4, [sp]
    48e8:	mov	r2, r6
    48ec:	mov	r3, r7
    48f0:	mov	r0, ip
    48f4:	bl	0 <read_bytes>
    48f8:	mov	r3, r0
    48fc:	mov	r0, r3
    4900:	sub	sp, fp, #20
    4904:	pop	{r4, r5, r6, r7, fp, pc}
    4908:	.word	0x00000974
    490c:	.word	0x000008b0
    4910:	.word	0xfffffed4

00004914 <coda_ascii_cursor_read_bytes>:
    4914:	push	{r4, r5, fp, lr}
    4918:	add	fp, sp, #12
    491c:	sub	sp, sp, #32
    4920:	str	r0, [fp, #-16]
    4924:	str	r1, [fp, #-20]	; 0xffffffec
    4928:	strd	r2, [fp, #-28]	; 0xffffffe4
    492c:	ldr	r3, [fp, #-16]
    4930:	ldr	r3, [r3, #4]
    4934:	sub	r3, r3, #1
    4938:	ldr	r2, [fp, #-16]
    493c:	add	r3, r3, #1
    4940:	lsl	r3, r3, #4
    4944:	add	r3, r2, r3
    4948:	ldrd	r2, [r3]
    494c:	mov	r0, #7
    4950:	mov	r1, #0
    4954:	and	r2, r2, r0
    4958:	and	r3, r3, r1
    495c:	orrs	r3, r2, r3
    4960:	beq	4978 <coda_ascii_cursor_read_bytes+0x64>
    4964:	ldr	r1, [pc, #124]	; 49e8 <coda_ascii_cursor_read_bytes+0xd4>
    4968:	ldr	r0, [pc, #124]	; 49ec <coda_ascii_cursor_read_bytes+0xd8>
    496c:	bl	0 <coda_set_error>
    4970:	mvn	r3, #0
    4974:	b	49dc <coda_ascii_cursor_read_bytes+0xc8>
    4978:	ldr	r3, [fp, #-16]
    497c:	ldr	ip, [r3]
    4980:	ldr	r3, [fp, #-16]
    4984:	ldr	r3, [r3, #4]
    4988:	sub	r3, r3, #1
    498c:	ldr	r2, [fp, #-16]
    4990:	add	r3, r3, #1
    4994:	lsl	r3, r3, #4
    4998:	add	r3, r2, r3
    499c:	ldrd	r2, [r3]
    49a0:	lsr	r4, r2, #3
    49a4:	orr	r4, r4, r3, lsl #29
    49a8:	asr	r5, r3, #3
    49ac:	ldrd	r2, [fp, #-28]	; 0xffffffe4
    49b0:	adds	r0, r4, r2
    49b4:	adc	r1, r5, r3
    49b8:	ldr	r3, [fp, #-20]	; 0xffffffec
    49bc:	str	r3, [sp, #8]
    49c0:	ldrd	r2, [fp, #4]
    49c4:	strd	r2, [sp]
    49c8:	mov	r2, r0
    49cc:	mov	r3, r1
    49d0:	mov	r0, ip
    49d4:	bl	0 <read_bytes>
    49d8:	mov	r3, r0
    49dc:	mov	r0, r3
    49e0:	sub	sp, fp, #12
    49e4:	pop	{r4, r5, fp, pc}
    49e8:	.word	0x000008b0
    49ec:	.word	0xfffffed4

000049f0 <coda_ascii_cursor_read_int8_array>:
    49f0:	push	{fp, lr}
    49f4:	add	fp, sp, #4
    49f8:	sub	sp, sp, #32
    49fc:	str	r0, [fp, #-16]
    4a00:	str	r1, [fp, #-20]	; 0xffffffec
    4a04:	str	r2, [fp, #-24]	; 0xffffffe8
    4a08:	ldr	r3, [fp, #-16]
    4a0c:	ldr	r3, [r3, #4]
    4a10:	sub	r3, r3, #1
    4a14:	ldr	r2, [fp, #-16]
    4a18:	lsl	r3, r3, #4
    4a1c:	add	r3, r2, r3
    4a20:	ldr	r3, [r3, #8]
    4a24:	ldr	r3, [r3]
    4a28:	cmp	r3, #99	; 0x63
    4a2c:	bhi	4a50 <coda_ascii_cursor_read_int8_array+0x60>
    4a30:	ldr	r3, [fp, #-16]
    4a34:	ldr	r3, [r3, #4]
    4a38:	sub	r3, r3, #1
    4a3c:	ldr	r2, [fp, #-16]
    4a40:	lsl	r3, r3, #4
    4a44:	add	r3, r2, r3
    4a48:	ldr	r3, [r3, #8]
    4a4c:	b	4a70 <coda_ascii_cursor_read_int8_array+0x80>
    4a50:	ldr	r3, [fp, #-16]
    4a54:	ldr	r3, [r3, #4]
    4a58:	sub	r3, r3, #1
    4a5c:	ldr	r2, [fp, #-16]
    4a60:	lsl	r3, r3, #4
    4a64:	add	r3, r2, r3
    4a68:	ldr	r3, [r3, #8]
    4a6c:	ldr	r3, [r3, #4]
    4a70:	str	r3, [fp, #-8]
    4a74:	ldr	r3, [fp, #-8]
    4a78:	ldr	r3, [r3, #40]	; 0x28
    4a7c:	ldr	r3, [r3]
    4a80:	cmp	r3, #0
    4a84:	beq	4a9c <coda_ascii_cursor_read_int8_array+0xac>
    4a88:	ldr	r3, [pc, #124]	; 4b0c <coda_ascii_cursor_read_int8_array+0x11c>
    4a8c:	ldr	r2, [pc, #124]	; 4b10 <coda_ascii_cursor_read_int8_array+0x120>
    4a90:	ldr	r1, [pc, #124]	; 4b14 <coda_ascii_cursor_read_int8_array+0x124>
    4a94:	ldr	r0, [pc, #124]	; 4b18 <coda_ascii_cursor_read_int8_array+0x128>
    4a98:	bl	0 <__assert_fail>
    4a9c:	mov	r3, #0
    4aa0:	str	r3, [sp]
    4aa4:	mov	r3, #1
    4aa8:	ldr	r2, [fp, #-20]	; 0xffffffec
    4aac:	ldr	r1, [pc, #104]	; 4b1c <coda_ascii_cursor_read_int8_array+0x12c>
    4ab0:	ldr	r0, [fp, #-16]
    4ab4:	bl	2d4 <read_array>
    4ab8:	mov	r3, r0
    4abc:	cmp	r3, #0
    4ac0:	beq	4acc <coda_ascii_cursor_read_int8_array+0xdc>
    4ac4:	mvn	r3, #0
    4ac8:	b	4b00 <coda_ascii_cursor_read_int8_array+0x110>
    4acc:	ldr	r3, [fp, #-24]	; 0xffffffe8
    4ad0:	cmp	r3, #0
    4ad4:	beq	4afc <coda_ascii_cursor_read_int8_array+0x10c>
    4ad8:	mov	r2, #1
    4adc:	ldr	r1, [fp, #-20]	; 0xffffffec
    4ae0:	ldr	r0, [fp, #-16]
    4ae4:	bl	7dc <transpose_array>
    4ae8:	mov	r3, r0
    4aec:	cmp	r3, #0
    4af0:	beq	4afc <coda_ascii_cursor_read_int8_array+0x10c>
    4af4:	mvn	r3, #0
    4af8:	b	4b00 <coda_ascii_cursor_read_int8_array+0x110>
    4afc:	mov	r3, #0
    4b00:	mov	r0, r3
    4b04:	sub	sp, fp, #4
    4b08:	pop	{fp, pc}
    4b0c:	.word	0x00000ab4
    4b10:	.word	0x000005b8
    4b14:	.word	0x00000210
    4b18:	.word	0x000009b8
    4b1c:	.word	0x00000000

00004b20 <coda_ascii_cursor_read_uint8_array>:
    4b20:	push	{fp, lr}
    4b24:	add	fp, sp, #4
    4b28:	sub	sp, sp, #32
    4b2c:	str	r0, [fp, #-16]
    4b30:	str	r1, [fp, #-20]	; 0xffffffec
    4b34:	str	r2, [fp, #-24]	; 0xffffffe8
    4b38:	ldr	r3, [fp, #-16]
    4b3c:	ldr	r3, [r3, #4]
    4b40:	sub	r3, r3, #1
    4b44:	ldr	r2, [fp, #-16]
    4b48:	lsl	r3, r3, #4
    4b4c:	add	r3, r2, r3
    4b50:	ldr	r3, [r3, #8]
    4b54:	ldr	r3, [r3]
    4b58:	cmp	r3, #99	; 0x63
    4b5c:	bhi	4b80 <coda_ascii_cursor_read_uint8_array+0x60>
    4b60:	ldr	r3, [fp, #-16]
    4b64:	ldr	r3, [r3, #4]
    4b68:	sub	r3, r3, #1
    4b6c:	ldr	r2, [fp, #-16]
    4b70:	lsl	r3, r3, #4
    4b74:	add	r3, r2, r3
    4b78:	ldr	r3, [r3, #8]
    4b7c:	b	4ba0 <coda_ascii_cursor_read_uint8_array+0x80>
    4b80:	ldr	r3, [fp, #-16]
    4b84:	ldr	r3, [r3, #4]
    4b88:	sub	r3, r3, #1
    4b8c:	ldr	r2, [fp, #-16]
    4b90:	lsl	r3, r3, #4
    4b94:	add	r3, r2, r3
    4b98:	ldr	r3, [r3, #8]
    4b9c:	ldr	r3, [r3, #4]
    4ba0:	str	r3, [fp, #-8]
    4ba4:	ldr	r3, [fp, #-8]
    4ba8:	ldr	r3, [r3, #40]	; 0x28
    4bac:	ldr	r3, [r3]
    4bb0:	cmp	r3, #0
    4bb4:	beq	4bcc <coda_ascii_cursor_read_uint8_array+0xac>
    4bb8:	ldr	r3, [pc, #124]	; 4c3c <coda_ascii_cursor_read_uint8_array+0x11c>
    4bbc:	ldr	r2, [pc, #124]	; 4c40 <coda_ascii_cursor_read_uint8_array+0x120>
    4bc0:	ldr	r1, [pc, #124]	; 4c44 <coda_ascii_cursor_read_uint8_array+0x124>
    4bc4:	ldr	r0, [pc, #124]	; 4c48 <coda_ascii_cursor_read_uint8_array+0x128>
    4bc8:	bl	0 <__assert_fail>
    4bcc:	mov	r3, #0
    4bd0:	str	r3, [sp]
    4bd4:	mov	r3, #1
    4bd8:	ldr	r2, [fp, #-20]	; 0xffffffec
    4bdc:	ldr	r1, [pc, #104]	; 4c4c <coda_ascii_cursor_read_uint8_array+0x12c>
    4be0:	ldr	r0, [fp, #-16]
    4be4:	bl	2d4 <read_array>
    4be8:	mov	r3, r0
    4bec:	cmp	r3, #0
    4bf0:	beq	4bfc <coda_ascii_cursor_read_uint8_array+0xdc>
    4bf4:	mvn	r3, #0
    4bf8:	b	4c30 <coda_ascii_cursor_read_uint8_array+0x110>
    4bfc:	ldr	r3, [fp, #-24]	; 0xffffffe8
    4c00:	cmp	r3, #0
    4c04:	beq	4c2c <coda_ascii_cursor_read_uint8_array+0x10c>
    4c08:	mov	r2, #1
    4c0c:	ldr	r1, [fp, #-20]	; 0xffffffec
    4c10:	ldr	r0, [fp, #-16]
    4c14:	bl	7dc <transpose_array>
    4c18:	mov	r3, r0
    4c1c:	cmp	r3, #0
    4c20:	beq	4c2c <coda_ascii_cursor_read_uint8_array+0x10c>
    4c24:	mvn	r3, #0
    4c28:	b	4c30 <coda_ascii_cursor_read_uint8_array+0x110>
    4c2c:	mov	r3, #0
    4c30:	mov	r0, r3
    4c34:	sub	sp, fp, #4
    4c38:	pop	{fp, pc}
    4c3c:	.word	0x00000ad8
    4c40:	.word	0x000005cc
    4c44:	.word	0x00000210
    4c48:	.word	0x000009b8
    4c4c:	.word	0x00000000

00004c50 <coda_ascii_cursor_read_int16_array>:
    4c50:	push	{fp, lr}
    4c54:	add	fp, sp, #4
    4c58:	sub	sp, sp, #32
    4c5c:	str	r0, [fp, #-16]
    4c60:	str	r1, [fp, #-20]	; 0xffffffec
    4c64:	str	r2, [fp, #-24]	; 0xffffffe8
    4c68:	ldr	r3, [fp, #-16]
    4c6c:	ldr	r3, [r3, #4]
    4c70:	sub	r3, r3, #1
    4c74:	ldr	r2, [fp, #-16]
    4c78:	lsl	r3, r3, #4
    4c7c:	add	r3, r2, r3
    4c80:	ldr	r3, [r3, #8]
    4c84:	ldr	r3, [r3]
    4c88:	cmp	r3, #99	; 0x63
    4c8c:	bhi	4cb0 <coda_ascii_cursor_read_int16_array+0x60>
    4c90:	ldr	r3, [fp, #-16]
    4c94:	ldr	r3, [r3, #4]
    4c98:	sub	r3, r3, #1
    4c9c:	ldr	r2, [fp, #-16]
    4ca0:	lsl	r3, r3, #4
    4ca4:	add	r3, r2, r3
    4ca8:	ldr	r3, [r3, #8]
    4cac:	b	4cd0 <coda_ascii_cursor_read_int16_array+0x80>
    4cb0:	ldr	r3, [fp, #-16]
    4cb4:	ldr	r3, [r3, #4]
    4cb8:	sub	r3, r3, #1
    4cbc:	ldr	r2, [fp, #-16]
    4cc0:	lsl	r3, r3, #4
    4cc4:	add	r3, r2, r3
    4cc8:	ldr	r3, [r3, #8]
    4ccc:	ldr	r3, [r3, #4]
    4cd0:	str	r3, [fp, #-8]
    4cd4:	ldr	r3, [fp, #-8]
    4cd8:	ldr	r3, [r3, #40]	; 0x28
    4cdc:	ldr	r3, [r3]
    4ce0:	cmp	r3, #0
    4ce4:	beq	4cfc <coda_ascii_cursor_read_int16_array+0xac>
    4ce8:	ldr	r3, [pc, #124]	; 4d6c <coda_ascii_cursor_read_int16_array+0x11c>
    4cec:	mov	r2, #1504	; 0x5e0
    4cf0:	ldr	r1, [pc, #120]	; 4d70 <coda_ascii_cursor_read_int16_array+0x120>
    4cf4:	ldr	r0, [pc, #120]	; 4d74 <coda_ascii_cursor_read_int16_array+0x124>
    4cf8:	bl	0 <__assert_fail>
    4cfc:	mov	r3, #0
    4d00:	str	r3, [sp]
    4d04:	mov	r3, #2
    4d08:	ldr	r2, [fp, #-20]	; 0xffffffec
    4d0c:	ldr	r1, [pc, #100]	; 4d78 <coda_ascii_cursor_read_int16_array+0x128>
    4d10:	ldr	r0, [fp, #-16]
    4d14:	bl	2d4 <read_array>
    4d18:	mov	r3, r0
    4d1c:	cmp	r3, #0
    4d20:	beq	4d2c <coda_ascii_cursor_read_int16_array+0xdc>
    4d24:	mvn	r3, #0
    4d28:	b	4d60 <coda_ascii_cursor_read_int16_array+0x110>
    4d2c:	ldr	r3, [fp, #-24]	; 0xffffffe8
    4d30:	cmp	r3, #0
    4d34:	beq	4d5c <coda_ascii_cursor_read_int16_array+0x10c>
    4d38:	mov	r2, #2
    4d3c:	ldr	r1, [fp, #-20]	; 0xffffffec
    4d40:	ldr	r0, [fp, #-16]
    4d44:	bl	7dc <transpose_array>
    4d48:	mov	r3, r0
    4d4c:	cmp	r3, #0
    4d50:	beq	4d5c <coda_ascii_cursor_read_int16_array+0x10c>
    4d54:	mvn	r3, #0
    4d58:	b	4d60 <coda_ascii_cursor_read_int16_array+0x110>
    4d5c:	mov	r3, #0
    4d60:	mov	r0, r3
    4d64:	sub	sp, fp, #4
    4d68:	pop	{fp, pc}
    4d6c:	.word	0x00000afc
    4d70:	.word	0x00000210
    4d74:	.word	0x000009b8
    4d78:	.word	0x00000000

00004d7c <coda_ascii_cursor_read_uint16_array>:
    4d7c:	push	{fp, lr}
    4d80:	add	fp, sp, #4
    4d84:	sub	sp, sp, #32
    4d88:	str	r0, [fp, #-16]
    4d8c:	str	r1, [fp, #-20]	; 0xffffffec
    4d90:	str	r2, [fp, #-24]	; 0xffffffe8
    4d94:	ldr	r3, [fp, #-16]
    4d98:	ldr	r3, [r3, #4]
    4d9c:	sub	r3, r3, #1
    4da0:	ldr	r2, [fp, #-16]
    4da4:	lsl	r3, r3, #4
    4da8:	add	r3, r2, r3
    4dac:	ldr	r3, [r3, #8]
    4db0:	ldr	r3, [r3]
    4db4:	cmp	r3, #99	; 0x63
    4db8:	bhi	4ddc <coda_ascii_cursor_read_uint16_array+0x60>
    4dbc:	ldr	r3, [fp, #-16]
    4dc0:	ldr	r3, [r3, #4]
    4dc4:	sub	r3, r3, #1
    4dc8:	ldr	r2, [fp, #-16]
    4dcc:	lsl	r3, r3, #4
    4dd0:	add	r3, r2, r3
    4dd4:	ldr	r3, [r3, #8]
    4dd8:	b	4dfc <coda_ascii_cursor_read_uint16_array+0x80>
    4ddc:	ldr	r3, [fp, #-16]
    4de0:	ldr	r3, [r3, #4]
    4de4:	sub	r3, r3, #1
    4de8:	ldr	r2, [fp, #-16]
    4dec:	lsl	r3, r3, #4
    4df0:	add	r3, r2, r3
    4df4:	ldr	r3, [r3, #8]
    4df8:	ldr	r3, [r3, #4]
    4dfc:	str	r3, [fp, #-8]
    4e00:	ldr	r3, [fp, #-8]
    4e04:	ldr	r3, [r3, #40]	; 0x28
    4e08:	ldr	r3, [r3]
    4e0c:	cmp	r3, #0
    4e10:	beq	4e28 <coda_ascii_cursor_read_uint16_array+0xac>
    4e14:	ldr	r3, [pc, #124]	; 4e98 <coda_ascii_cursor_read_uint16_array+0x11c>
    4e18:	ldr	r2, [pc, #124]	; 4e9c <coda_ascii_cursor_read_uint16_array+0x120>
    4e1c:	ldr	r1, [pc, #124]	; 4ea0 <coda_ascii_cursor_read_uint16_array+0x124>
    4e20:	ldr	r0, [pc, #124]	; 4ea4 <coda_ascii_cursor_read_uint16_array+0x128>
    4e24:	bl	0 <__assert_fail>
    4e28:	mov	r3, #0
    4e2c:	str	r3, [sp]
    4e30:	mov	r3, #2
    4e34:	ldr	r2, [fp, #-20]	; 0xffffffec
    4e38:	ldr	r1, [pc, #104]	; 4ea8 <coda_ascii_cursor_read_uint16_array+0x12c>
    4e3c:	ldr	r0, [fp, #-16]
    4e40:	bl	2d4 <read_array>
    4e44:	mov	r3, r0
    4e48:	cmp	r3, #0
    4e4c:	beq	4e58 <coda_ascii_cursor_read_uint16_array+0xdc>
    4e50:	mvn	r3, #0
    4e54:	b	4e8c <coda_ascii_cursor_read_uint16_array+0x110>
    4e58:	ldr	r3, [fp, #-24]	; 0xffffffe8
    4e5c:	cmp	r3, #0
    4e60:	beq	4e88 <coda_ascii_cursor_read_uint16_array+0x10c>
    4e64:	mov	r2, #2
    4e68:	ldr	r1, [fp, #-20]	; 0xffffffec
    4e6c:	ldr	r0, [fp, #-16]
    4e70:	bl	7dc <transpose_array>
    4e74:	mov	r3, r0
    4e78:	cmp	r3, #0
    4e7c:	beq	4e88 <coda_ascii_cursor_read_uint16_array+0x10c>
    4e80:	mvn	r3, #0
    4e84:	b	4e8c <coda_ascii_cursor_read_uint16_array+0x110>
    4e88:	mov	r3, #0
    4e8c:	mov	r0, r3
    4e90:	sub	sp, fp, #4
    4e94:	pop	{fp, pc}
    4e98:	.word	0x00000b20
    4e9c:	.word	0x000005f4
    4ea0:	.word	0x00000210
    4ea4:	.word	0x000009b8
    4ea8:	.word	0x00000000

00004eac <coda_ascii_cursor_read_int32_array>:
    4eac:	push	{fp, lr}
    4eb0:	add	fp, sp, #4
    4eb4:	sub	sp, sp, #32
    4eb8:	str	r0, [fp, #-16]
    4ebc:	str	r1, [fp, #-20]	; 0xffffffec
    4ec0:	str	r2, [fp, #-24]	; 0xffffffe8
    4ec4:	ldr	r3, [fp, #-16]
    4ec8:	ldr	r3, [r3, #4]
    4ecc:	sub	r3, r3, #1
    4ed0:	ldr	r2, [fp, #-16]
    4ed4:	lsl	r3, r3, #4
    4ed8:	add	r3, r2, r3
    4edc:	ldr	r3, [r3, #8]
    4ee0:	ldr	r3, [r3]
    4ee4:	cmp	r3, #99	; 0x63
    4ee8:	bhi	4f0c <coda_ascii_cursor_read_int32_array+0x60>
    4eec:	ldr	r3, [fp, #-16]
    4ef0:	ldr	r3, [r3, #4]
    4ef4:	sub	r3, r3, #1
    4ef8:	ldr	r2, [fp, #-16]
    4efc:	lsl	r3, r3, #4
    4f00:	add	r3, r2, r3
    4f04:	ldr	r3, [r3, #8]
    4f08:	b	4f2c <coda_ascii_cursor_read_int32_array+0x80>
    4f0c:	ldr	r3, [fp, #-16]
    4f10:	ldr	r3, [r3, #4]
    4f14:	sub	r3, r3, #1
    4f18:	ldr	r2, [fp, #-16]
    4f1c:	lsl	r3, r3, #4
    4f20:	add	r3, r2, r3
    4f24:	ldr	r3, [r3, #8]
    4f28:	ldr	r3, [r3, #4]
    4f2c:	str	r3, [fp, #-8]
    4f30:	ldr	r3, [fp, #-8]
    4f34:	ldr	r3, [r3, #40]	; 0x28
    4f38:	ldr	r3, [r3]
    4f3c:	cmp	r3, #0
    4f40:	beq	4f58 <coda_ascii_cursor_read_int32_array+0xac>
    4f44:	ldr	r3, [pc, #124]	; 4fc8 <coda_ascii_cursor_read_int32_array+0x11c>
    4f48:	ldr	r2, [pc, #124]	; 4fcc <coda_ascii_cursor_read_int32_array+0x120>
    4f4c:	ldr	r1, [pc, #124]	; 4fd0 <coda_ascii_cursor_read_int32_array+0x124>
    4f50:	ldr	r0, [pc, #124]	; 4fd4 <coda_ascii_cursor_read_int32_array+0x128>
    4f54:	bl	0 <__assert_fail>
    4f58:	mov	r3, #0
    4f5c:	str	r3, [sp]
    4f60:	mov	r3, #4
    4f64:	ldr	r2, [fp, #-20]	; 0xffffffec
    4f68:	ldr	r1, [pc, #104]	; 4fd8 <coda_ascii_cursor_read_int32_array+0x12c>
    4f6c:	ldr	r0, [fp, #-16]
    4f70:	bl	2d4 <read_array>
    4f74:	mov	r3, r0
    4f78:	cmp	r3, #0
    4f7c:	beq	4f88 <coda_ascii_cursor_read_int32_array+0xdc>
    4f80:	mvn	r3, #0
    4f84:	b	4fbc <coda_ascii_cursor_read_int32_array+0x110>
    4f88:	ldr	r3, [fp, #-24]	; 0xffffffe8
    4f8c:	cmp	r3, #0
    4f90:	beq	4fb8 <coda_ascii_cursor_read_int32_array+0x10c>
    4f94:	mov	r2, #4
    4f98:	ldr	r1, [fp, #-20]	; 0xffffffec
    4f9c:	ldr	r0, [fp, #-16]
    4fa0:	bl	7dc <transpose_array>
    4fa4:	mov	r3, r0
    4fa8:	cmp	r3, #0
    4fac:	beq	4fb8 <coda_ascii_cursor_read_int32_array+0x10c>
    4fb0:	mvn	r3, #0
    4fb4:	b	4fbc <coda_ascii_cursor_read_int32_array+0x110>
    4fb8:	mov	r3, #0
    4fbc:	mov	r0, r3
    4fc0:	sub	sp, fp, #4
    4fc4:	pop	{fp, pc}
    4fc8:	.word	0x00000b44
    4fcc:	.word	0x00000608
    4fd0:	.word	0x00000210
    4fd4:	.word	0x000009b8
    4fd8:	.word	0x00000000

00004fdc <coda_ascii_cursor_read_uint32_array>:
    4fdc:	push	{fp, lr}
    4fe0:	add	fp, sp, #4
    4fe4:	sub	sp, sp, #32
    4fe8:	str	r0, [fp, #-16]
    4fec:	str	r1, [fp, #-20]	; 0xffffffec
    4ff0:	str	r2, [fp, #-24]	; 0xffffffe8
    4ff4:	ldr	r3, [fp, #-16]
    4ff8:	ldr	r3, [r3, #4]
    4ffc:	sub	r3, r3, #1
    5000:	ldr	r2, [fp, #-16]
    5004:	lsl	r3, r3, #4
    5008:	add	r3, r2, r3
    500c:	ldr	r3, [r3, #8]
    5010:	ldr	r3, [r3]
    5014:	cmp	r3, #99	; 0x63
    5018:	bhi	503c <coda_ascii_cursor_read_uint32_array+0x60>
    501c:	ldr	r3, [fp, #-16]
    5020:	ldr	r3, [r3, #4]
    5024:	sub	r3, r3, #1
    5028:	ldr	r2, [fp, #-16]
    502c:	lsl	r3, r3, #4
    5030:	add	r3, r2, r3
    5034:	ldr	r3, [r3, #8]
    5038:	b	505c <coda_ascii_cursor_read_uint32_array+0x80>
    503c:	ldr	r3, [fp, #-16]
    5040:	ldr	r3, [r3, #4]
    5044:	sub	r3, r3, #1
    5048:	ldr	r2, [fp, #-16]
    504c:	lsl	r3, r3, #4
    5050:	add	r3, r2, r3
    5054:	ldr	r3, [r3, #8]
    5058:	ldr	r3, [r3, #4]
    505c:	str	r3, [fp, #-8]
    5060:	ldr	r3, [fp, #-8]
    5064:	ldr	r3, [r3, #40]	; 0x28
    5068:	ldr	r3, [r3]
    506c:	cmp	r3, #0
    5070:	beq	5088 <coda_ascii_cursor_read_uint32_array+0xac>
    5074:	ldr	r3, [pc, #124]	; 50f8 <coda_ascii_cursor_read_uint32_array+0x11c>
    5078:	ldr	r2, [pc, #124]	; 50fc <coda_ascii_cursor_read_uint32_array+0x120>
    507c:	ldr	r1, [pc, #124]	; 5100 <coda_ascii_cursor_read_uint32_array+0x124>
    5080:	ldr	r0, [pc, #124]	; 5104 <coda_ascii_cursor_read_uint32_array+0x128>
    5084:	bl	0 <__assert_fail>
    5088:	mov	r3, #0
    508c:	str	r3, [sp]
    5090:	mov	r3, #4
    5094:	ldr	r2, [fp, #-20]	; 0xffffffec
    5098:	ldr	r1, [pc, #104]	; 5108 <coda_ascii_cursor_read_uint32_array+0x12c>
    509c:	ldr	r0, [fp, #-16]
    50a0:	bl	2d4 <read_array>
    50a4:	mov	r3, r0
    50a8:	cmp	r3, #0
    50ac:	beq	50b8 <coda_ascii_cursor_read_uint32_array+0xdc>
    50b0:	mvn	r3, #0
    50b4:	b	50ec <coda_ascii_cursor_read_uint32_array+0x110>
    50b8:	ldr	r3, [fp, #-24]	; 0xffffffe8
    50bc:	cmp	r3, #0
    50c0:	beq	50e8 <coda_ascii_cursor_read_uint32_array+0x10c>
    50c4:	mov	r2, #4
    50c8:	ldr	r1, [fp, #-20]	; 0xffffffec
    50cc:	ldr	r0, [fp, #-16]
    50d0:	bl	7dc <transpose_array>
    50d4:	mov	r3, r0
    50d8:	cmp	r3, #0
    50dc:	beq	50e8 <coda_ascii_cursor_read_uint32_array+0x10c>
    50e0:	mvn	r3, #0
    50e4:	b	50ec <coda_ascii_cursor_read_uint32_array+0x110>
    50e8:	mov	r3, #0
    50ec:	mov	r0, r3
    50f0:	sub	sp, fp, #4
    50f4:	pop	{fp, pc}
    50f8:	.word	0x00000b68
    50fc:	.word	0x0000061c
    5100:	.word	0x00000210
    5104:	.word	0x000009b8
    5108:	.word	0x00000000

0000510c <coda_ascii_cursor_read_int64_array>:
    510c:	push	{fp, lr}
    5110:	add	fp, sp, #4
    5114:	sub	sp, sp, #32
    5118:	str	r0, [fp, #-16]
    511c:	str	r1, [fp, #-20]	; 0xffffffec
    5120:	str	r2, [fp, #-24]	; 0xffffffe8
    5124:	ldr	r3, [fp, #-16]
    5128:	ldr	r3, [r3, #4]
    512c:	sub	r3, r3, #1
    5130:	ldr	r2, [fp, #-16]
    5134:	lsl	r3, r3, #4
    5138:	add	r3, r2, r3
    513c:	ldr	r3, [r3, #8]
    5140:	ldr	r3, [r3]
    5144:	cmp	r3, #99	; 0x63
    5148:	bhi	516c <coda_ascii_cursor_read_int64_array+0x60>
    514c:	ldr	r3, [fp, #-16]
    5150:	ldr	r3, [r3, #4]
    5154:	sub	r3, r3, #1
    5158:	ldr	r2, [fp, #-16]
    515c:	lsl	r3, r3, #4
    5160:	add	r3, r2, r3
    5164:	ldr	r3, [r3, #8]
    5168:	b	518c <coda_ascii_cursor_read_int64_array+0x80>
    516c:	ldr	r3, [fp, #-16]
    5170:	ldr	r3, [r3, #4]
    5174:	sub	r3, r3, #1
    5178:	ldr	r2, [fp, #-16]
    517c:	lsl	r3, r3, #4
    5180:	add	r3, r2, r3
    5184:	ldr	r3, [r3, #8]
    5188:	ldr	r3, [r3, #4]
    518c:	str	r3, [fp, #-8]
    5190:	ldr	r3, [fp, #-8]
    5194:	ldr	r3, [r3, #40]	; 0x28
    5198:	ldr	r3, [r3]
    519c:	cmp	r3, #0
    51a0:	beq	51b8 <coda_ascii_cursor_read_int64_array+0xac>
    51a4:	ldr	r3, [pc, #124]	; 5228 <coda_ascii_cursor_read_int64_array+0x11c>
    51a8:	mov	r2, #1584	; 0x630
    51ac:	ldr	r1, [pc, #120]	; 522c <coda_ascii_cursor_read_int64_array+0x120>
    51b0:	ldr	r0, [pc, #120]	; 5230 <coda_ascii_cursor_read_int64_array+0x124>
    51b4:	bl	0 <__assert_fail>
    51b8:	mov	r3, #0
    51bc:	str	r3, [sp]
    51c0:	mov	r3, #8
    51c4:	ldr	r2, [fp, #-20]	; 0xffffffec
    51c8:	ldr	r1, [pc, #100]	; 5234 <coda_ascii_cursor_read_int64_array+0x128>
    51cc:	ldr	r0, [fp, #-16]
    51d0:	bl	2d4 <read_array>
    51d4:	mov	r3, r0
    51d8:	cmp	r3, #0
    51dc:	beq	51e8 <coda_ascii_cursor_read_int64_array+0xdc>
    51e0:	mvn	r3, #0
    51e4:	b	521c <coda_ascii_cursor_read_int64_array+0x110>
    51e8:	ldr	r3, [fp, #-24]	; 0xffffffe8
    51ec:	cmp	r3, #0
    51f0:	beq	5218 <coda_ascii_cursor_read_int64_array+0x10c>
    51f4:	mov	r2, #4
    51f8:	ldr	r1, [fp, #-20]	; 0xffffffec
    51fc:	ldr	r0, [fp, #-16]
    5200:	bl	7dc <transpose_array>
    5204:	mov	r3, r0
    5208:	cmp	r3, #0
    520c:	beq	5218 <coda_ascii_cursor_read_int64_array+0x10c>
    5210:	mvn	r3, #0
    5214:	b	521c <coda_ascii_cursor_read_int64_array+0x110>
    5218:	mov	r3, #0
    521c:	mov	r0, r3
    5220:	sub	sp, fp, #4
    5224:	pop	{fp, pc}
    5228:	.word	0x00000b8c
    522c:	.word	0x00000210
    5230:	.word	0x000009b8
    5234:	.word	0x00000000

00005238 <coda_ascii_cursor_read_uint64_array>:
    5238:	push	{fp, lr}
    523c:	add	fp, sp, #4
    5240:	sub	sp, sp, #32
    5244:	str	r0, [fp, #-16]
    5248:	str	r1, [fp, #-20]	; 0xffffffec
    524c:	str	r2, [fp, #-24]	; 0xffffffe8
    5250:	ldr	r3, [fp, #-16]
    5254:	ldr	r3, [r3, #4]
    5258:	sub	r3, r3, #1
    525c:	ldr	r2, [fp, #-16]
    5260:	lsl	r3, r3, #4
    5264:	add	r3, r2, r3
    5268:	ldr	r3, [r3, #8]
    526c:	ldr	r3, [r3]
    5270:	cmp	r3, #99	; 0x63
    5274:	bhi	5298 <coda_ascii_cursor_read_uint64_array+0x60>
    5278:	ldr	r3, [fp, #-16]
    527c:	ldr	r3, [r3, #4]
    5280:	sub	r3, r3, #1
    5284:	ldr	r2, [fp, #-16]
    5288:	lsl	r3, r3, #4
    528c:	add	r3, r2, r3
    5290:	ldr	r3, [r3, #8]
    5294:	b	52b8 <coda_ascii_cursor_read_uint64_array+0x80>
    5298:	ldr	r3, [fp, #-16]
    529c:	ldr	r3, [r3, #4]
    52a0:	sub	r3, r3, #1
    52a4:	ldr	r2, [fp, #-16]
    52a8:	lsl	r3, r3, #4
    52ac:	add	r3, r2, r3
    52b0:	ldr	r3, [r3, #8]
    52b4:	ldr	r3, [r3, #4]
    52b8:	str	r3, [fp, #-8]
    52bc:	ldr	r3, [fp, #-8]
    52c0:	ldr	r3, [r3, #40]	; 0x28
    52c4:	ldr	r3, [r3]
    52c8:	cmp	r3, #0
    52cc:	beq	52e4 <coda_ascii_cursor_read_uint64_array+0xac>
    52d0:	ldr	r3, [pc, #124]	; 5354 <coda_ascii_cursor_read_uint64_array+0x11c>
    52d4:	ldr	r2, [pc, #124]	; 5358 <coda_ascii_cursor_read_uint64_array+0x120>
    52d8:	ldr	r1, [pc, #124]	; 535c <coda_ascii_cursor_read_uint64_array+0x124>
    52dc:	ldr	r0, [pc, #124]	; 5360 <coda_ascii_cursor_read_uint64_array+0x128>
    52e0:	bl	0 <__assert_fail>
    52e4:	mov	r3, #0
    52e8:	str	r3, [sp]
    52ec:	mov	r3, #8
    52f0:	ldr	r2, [fp, #-20]	; 0xffffffec
    52f4:	ldr	r1, [pc, #104]	; 5364 <coda_ascii_cursor_read_uint64_array+0x12c>
    52f8:	ldr	r0, [fp, #-16]
    52fc:	bl	2d4 <read_array>
    5300:	mov	r3, r0
    5304:	cmp	r3, #0
    5308:	beq	5314 <coda_ascii_cursor_read_uint64_array+0xdc>
    530c:	mvn	r3, #0
    5310:	b	5348 <coda_ascii_cursor_read_uint64_array+0x110>
    5314:	ldr	r3, [fp, #-24]	; 0xffffffe8
    5318:	cmp	r3, #0
    531c:	beq	5344 <coda_ascii_cursor_read_uint64_array+0x10c>
    5320:	mov	r2, #8
    5324:	ldr	r1, [fp, #-20]	; 0xffffffec
    5328:	ldr	r0, [fp, #-16]
    532c:	bl	7dc <transpose_array>
    5330:	mov	r3, r0
    5334:	cmp	r3, #0
    5338:	beq	5344 <coda_ascii_cursor_read_uint64_array+0x10c>
    533c:	mvn	r3, #0
    5340:	b	5348 <coda_ascii_cursor_read_uint64_array+0x110>
    5344:	mov	r3, #0
    5348:	mov	r0, r3
    534c:	sub	sp, fp, #4
    5350:	pop	{fp, pc}
    5354:	.word	0x00000bb0
    5358:	.word	0x00000644
    535c:	.word	0x00000210
    5360:	.word	0x000009b8
    5364:	.word	0x00000000

00005368 <coda_ascii_cursor_read_float_array>:
    5368:	push	{fp, lr}
    536c:	add	fp, sp, #4
    5370:	sub	sp, sp, #32
    5374:	str	r0, [fp, #-16]
    5378:	str	r1, [fp, #-20]	; 0xffffffec
    537c:	str	r2, [fp, #-24]	; 0xffffffe8
    5380:	ldr	r3, [fp, #-16]
    5384:	ldr	r3, [r3, #4]
    5388:	sub	r3, r3, #1
    538c:	ldr	r2, [fp, #-16]
    5390:	lsl	r3, r3, #4
    5394:	add	r3, r2, r3
    5398:	ldr	r3, [r3, #8]
    539c:	ldr	r3, [r3]
    53a0:	cmp	r3, #99	; 0x63
    53a4:	bhi	53c8 <coda_ascii_cursor_read_float_array+0x60>
    53a8:	ldr	r3, [fp, #-16]
    53ac:	ldr	r3, [r3, #4]
    53b0:	sub	r3, r3, #1
    53b4:	ldr	r2, [fp, #-16]
    53b8:	lsl	r3, r3, #4
    53bc:	add	r3, r2, r3
    53c0:	ldr	r3, [r3, #8]
    53c4:	b	53e8 <coda_ascii_cursor_read_float_array+0x80>
    53c8:	ldr	r3, [fp, #-16]
    53cc:	ldr	r3, [r3, #4]
    53d0:	sub	r3, r3, #1
    53d4:	ldr	r2, [fp, #-16]
    53d8:	lsl	r3, r3, #4
    53dc:	add	r3, r2, r3
    53e0:	ldr	r3, [r3, #8]
    53e4:	ldr	r3, [r3, #4]
    53e8:	str	r3, [fp, #-8]
    53ec:	ldr	r3, [fp, #-8]
    53f0:	ldr	r3, [r3, #40]	; 0x28
    53f4:	ldr	r3, [r3]
    53f8:	cmp	r3, #0
    53fc:	beq	5414 <coda_ascii_cursor_read_float_array+0xac>
    5400:	ldr	r3, [pc, #124]	; 5484 <coda_ascii_cursor_read_float_array+0x11c>
    5404:	ldr	r2, [pc, #124]	; 5488 <coda_ascii_cursor_read_float_array+0x120>
    5408:	ldr	r1, [pc, #124]	; 548c <coda_ascii_cursor_read_float_array+0x124>
    540c:	ldr	r0, [pc, #124]	; 5490 <coda_ascii_cursor_read_float_array+0x128>
    5410:	bl	0 <__assert_fail>
    5414:	mov	r3, #0
    5418:	str	r3, [sp]
    541c:	mov	r3, #4
    5420:	ldr	r2, [fp, #-20]	; 0xffffffec
    5424:	ldr	r1, [pc, #104]	; 5494 <coda_ascii_cursor_read_float_array+0x12c>
    5428:	ldr	r0, [fp, #-16]
    542c:	bl	2d4 <read_array>
    5430:	mov	r3, r0
    5434:	cmp	r3, #0
    5438:	beq	5444 <coda_ascii_cursor_read_float_array+0xdc>
    543c:	mvn	r3, #0
    5440:	b	5478 <coda_ascii_cursor_read_float_array+0x110>
    5444:	ldr	r3, [fp, #-24]	; 0xffffffe8
    5448:	cmp	r3, #0
    544c:	beq	5474 <coda_ascii_cursor_read_float_array+0x10c>
    5450:	mov	r2, #4
    5454:	ldr	r1, [fp, #-20]	; 0xffffffec
    5458:	ldr	r0, [fp, #-16]
    545c:	bl	7dc <transpose_array>
    5460:	mov	r3, r0
    5464:	cmp	r3, #0
    5468:	beq	5474 <coda_ascii_cursor_read_float_array+0x10c>
    546c:	mvn	r3, #0
    5470:	b	5478 <coda_ascii_cursor_read_float_array+0x110>
    5474:	mov	r3, #0
    5478:	mov	r0, r3
    547c:	sub	sp, fp, #4
    5480:	pop	{fp, pc}
    5484:	.word	0x00000bd4
    5488:	.word	0x00000658
    548c:	.word	0x00000210
    5490:	.word	0x000009b8
    5494:	.word	0x00000000

00005498 <coda_ascii_cursor_read_double_array>:
    5498:	push	{fp, lr}
    549c:	add	fp, sp, #4
    54a0:	sub	sp, sp, #32
    54a4:	str	r0, [fp, #-16]
    54a8:	str	r1, [fp, #-20]	; 0xffffffec
    54ac:	str	r2, [fp, #-24]	; 0xffffffe8
    54b0:	ldr	r3, [fp, #-16]
    54b4:	ldr	r3, [r3, #4]
    54b8:	sub	r3, r3, #1
    54bc:	ldr	r2, [fp, #-16]
    54c0:	lsl	r3, r3, #4
    54c4:	add	r3, r2, r3
    54c8:	ldr	r3, [r3, #8]
    54cc:	ldr	r3, [r3]
    54d0:	cmp	r3, #99	; 0x63
    54d4:	bhi	54f8 <coda_ascii_cursor_read_double_array+0x60>
    54d8:	ldr	r3, [fp, #-16]
    54dc:	ldr	r3, [r3, #4]
    54e0:	sub	r3, r3, #1
    54e4:	ldr	r2, [fp, #-16]
    54e8:	lsl	r3, r3, #4
    54ec:	add	r3, r2, r3
    54f0:	ldr	r3, [r3, #8]
    54f4:	b	5518 <coda_ascii_cursor_read_double_array+0x80>
    54f8:	ldr	r3, [fp, #-16]
    54fc:	ldr	r3, [r3, #4]
    5500:	sub	r3, r3, #1
    5504:	ldr	r2, [fp, #-16]
    5508:	lsl	r3, r3, #4
    550c:	add	r3, r2, r3
    5510:	ldr	r3, [r3, #8]
    5514:	ldr	r3, [r3, #4]
    5518:	str	r3, [fp, #-8]
    551c:	ldr	r3, [fp, #-8]
    5520:	ldr	r3, [r3, #40]	; 0x28
    5524:	ldr	r3, [r3]
    5528:	cmp	r3, #0
    552c:	beq	5544 <coda_ascii_cursor_read_double_array+0xac>
    5530:	ldr	r3, [pc, #124]	; 55b4 <coda_ascii_cursor_read_double_array+0x11c>
    5534:	ldr	r2, [pc, #124]	; 55b8 <coda_ascii_cursor_read_double_array+0x120>
    5538:	ldr	r1, [pc, #124]	; 55bc <coda_ascii_cursor_read_double_array+0x124>
    553c:	ldr	r0, [pc, #124]	; 55c0 <coda_ascii_cursor_read_double_array+0x128>
    5540:	bl	0 <__assert_fail>
    5544:	mov	r3, #0
    5548:	str	r3, [sp]
    554c:	mov	r3, #8
    5550:	ldr	r2, [fp, #-20]	; 0xffffffec
    5554:	ldr	r1, [pc, #104]	; 55c4 <coda_ascii_cursor_read_double_array+0x12c>
    5558:	ldr	r0, [fp, #-16]
    555c:	bl	2d4 <read_array>
    5560:	mov	r3, r0
    5564:	cmp	r3, #0
    5568:	beq	5574 <coda_ascii_cursor_read_double_array+0xdc>
    556c:	mvn	r3, #0
    5570:	b	55a8 <coda_ascii_cursor_read_double_array+0x110>
    5574:	ldr	r3, [fp, #-24]	; 0xffffffe8
    5578:	cmp	r3, #0
    557c:	beq	55a4 <coda_ascii_cursor_read_double_array+0x10c>
    5580:	mov	r2, #8
    5584:	ldr	r1, [fp, #-20]	; 0xffffffec
    5588:	ldr	r0, [fp, #-16]
    558c:	bl	7dc <transpose_array>
    5590:	mov	r3, r0
    5594:	cmp	r3, #0
    5598:	beq	55a4 <coda_ascii_cursor_read_double_array+0x10c>
    559c:	mvn	r3, #0
    55a0:	b	55a8 <coda_ascii_cursor_read_double_array+0x110>
    55a4:	mov	r3, #0
    55a8:	mov	r0, r3
    55ac:	sub	sp, fp, #4
    55b0:	pop	{fp, pc}
    55b4:	.word	0x00000bf8
    55b8:	.word	0x0000066c
    55bc:	.word	0x00000210
    55c0:	.word	0x000009b8
    55c4:	.word	0x00000000

000055c8 <coda_ascii_cursor_read_char_array>:
    55c8:	push	{fp, lr}
    55cc:	add	fp, sp, #4
    55d0:	sub	sp, sp, #32
    55d4:	str	r0, [fp, #-16]
    55d8:	str	r1, [fp, #-20]	; 0xffffffec
    55dc:	str	r2, [fp, #-24]	; 0xffffffe8
    55e0:	ldr	r3, [fp, #-16]
    55e4:	ldr	r3, [r3, #4]
    55e8:	sub	r3, r3, #1
    55ec:	ldr	r2, [fp, #-16]
    55f0:	lsl	r3, r3, #4
    55f4:	add	r3, r2, r3
    55f8:	ldr	r3, [r3, #8]
    55fc:	ldr	r3, [r3]
    5600:	cmp	r3, #99	; 0x63
    5604:	bhi	5628 <coda_ascii_cursor_read_char_array+0x60>
    5608:	ldr	r3, [fp, #-16]
    560c:	ldr	r3, [r3, #4]
    5610:	sub	r3, r3, #1
    5614:	ldr	r2, [fp, #-16]
    5618:	lsl	r3, r3, #4
    561c:	add	r3, r2, r3
    5620:	ldr	r3, [r3, #8]
    5624:	b	5648 <coda_ascii_cursor_read_char_array+0x80>
    5628:	ldr	r3, [fp, #-16]
    562c:	ldr	r3, [r3, #4]
    5630:	sub	r3, r3, #1
    5634:	ldr	r2, [fp, #-16]
    5638:	lsl	r3, r3, #4
    563c:	add	r3, r2, r3
    5640:	ldr	r3, [r3, #8]
    5644:	ldr	r3, [r3, #4]
    5648:	str	r3, [fp, #-8]
    564c:	ldr	r3, [fp, #-8]
    5650:	ldr	r3, [r3, #40]	; 0x28
    5654:	ldr	r3, [r3]
    5658:	cmp	r3, #0
    565c:	beq	5674 <coda_ascii_cursor_read_char_array+0xac>
    5660:	ldr	r3, [pc, #124]	; 56e4 <coda_ascii_cursor_read_char_array+0x11c>
    5664:	mov	r2, #1664	; 0x680
    5668:	ldr	r1, [pc, #120]	; 56e8 <coda_ascii_cursor_read_char_array+0x120>
    566c:	ldr	r0, [pc, #120]	; 56ec <coda_ascii_cursor_read_char_array+0x124>
    5670:	bl	0 <__assert_fail>
    5674:	mov	r3, #0
    5678:	str	r3, [sp]
    567c:	mov	r3, #1
    5680:	ldr	r2, [fp, #-20]	; 0xffffffec
    5684:	ldr	r1, [pc, #100]	; 56f0 <coda_ascii_cursor_read_char_array+0x128>
    5688:	ldr	r0, [fp, #-16]
    568c:	bl	2d4 <read_array>
    5690:	mov	r3, r0
    5694:	cmp	r3, #0
    5698:	beq	56a4 <coda_ascii_cursor_read_char_array+0xdc>
    569c:	mvn	r3, #0
    56a0:	b	56d8 <coda_ascii_cursor_read_char_array+0x110>
    56a4:	ldr	r3, [fp, #-24]	; 0xffffffe8
    56a8:	cmp	r3, #0
    56ac:	beq	56d4 <coda_ascii_cursor_read_char_array+0x10c>
    56b0:	mov	r2, #1
    56b4:	ldr	r1, [fp, #-20]	; 0xffffffec
    56b8:	ldr	r0, [fp, #-16]
    56bc:	bl	7dc <transpose_array>
    56c0:	mov	r3, r0
    56c4:	cmp	r3, #0
    56c8:	beq	56d4 <coda_ascii_cursor_read_char_array+0x10c>
    56cc:	mvn	r3, #0
    56d0:	b	56d8 <coda_ascii_cursor_read_char_array+0x110>
    56d4:	mov	r3, #0
    56d8:	mov	r0, r3
    56dc:	sub	sp, fp, #4
    56e0:	pop	{fp, pc}
    56e4:	.word	0x00000c1c
    56e8:	.word	0x00000210
    56ec:	.word	0x000009b8
    56f0:	.word	0x00000000

000056f4 <coda_ascii_cursor_read_int8_partial_array>:
    56f4:	push	{fp, lr}
    56f8:	add	fp, sp, #4
    56fc:	sub	sp, sp, #32
    5700:	str	r0, [fp, #-16]
    5704:	str	r1, [fp, #-20]	; 0xffffffec
    5708:	str	r2, [fp, #-24]	; 0xffffffe8
    570c:	str	r3, [fp, #-28]	; 0xffffffe4
    5710:	ldr	r3, [fp, #-16]
    5714:	ldr	r3, [r3, #4]
    5718:	sub	r3, r3, #1
    571c:	ldr	r2, [fp, #-16]
    5720:	lsl	r3, r3, #4
    5724:	add	r3, r2, r3
    5728:	ldr	r3, [r3, #8]
    572c:	ldr	r3, [r3]
    5730:	cmp	r3, #99	; 0x63
    5734:	bhi	5758 <coda_ascii_cursor_read_int8_partial_array+0x64>
    5738:	ldr	r3, [fp, #-16]
    573c:	ldr	r3, [r3, #4]
    5740:	sub	r3, r3, #1
    5744:	ldr	r2, [fp, #-16]
    5748:	lsl	r3, r3, #4
    574c:	add	r3, r2, r3
    5750:	ldr	r3, [r3, #8]
    5754:	b	5778 <coda_ascii_cursor_read_int8_partial_array+0x84>
    5758:	ldr	r3, [fp, #-16]
    575c:	ldr	r3, [r3, #4]
    5760:	sub	r3, r3, #1
    5764:	ldr	r2, [fp, #-16]
    5768:	lsl	r3, r3, #4
    576c:	add	r3, r2, r3
    5770:	ldr	r3, [r3, #8]
    5774:	ldr	r3, [r3, #4]
    5778:	str	r3, [fp, #-8]
    577c:	ldr	r3, [fp, #-8]
    5780:	ldr	r3, [r3, #40]	; 0x28
    5784:	ldr	r3, [r3]
    5788:	cmp	r3, #0
    578c:	beq	57a4 <coda_ascii_cursor_read_int8_partial_array+0xb0>
    5790:	ldr	r3, [pc, #64]	; 57d8 <coda_ascii_cursor_read_int8_partial_array+0xe4>
    5794:	ldr	r2, [pc, #64]	; 57dc <coda_ascii_cursor_read_int8_partial_array+0xe8>
    5798:	ldr	r1, [pc, #64]	; 57e0 <coda_ascii_cursor_read_int8_partial_array+0xec>
    579c:	ldr	r0, [pc, #64]	; 57e4 <coda_ascii_cursor_read_int8_partial_array+0xf0>
    57a0:	bl	0 <__assert_fail>
    57a4:	mov	r3, #1
    57a8:	str	r3, [sp, #4]
    57ac:	ldr	r3, [fp, #-28]	; 0xffffffe4
    57b0:	str	r3, [sp]
    57b4:	ldr	r3, [fp, #-24]	; 0xffffffe8
    57b8:	ldr	r2, [fp, #-20]	; 0xffffffec
    57bc:	ldr	r1, [pc, #36]	; 57e8 <coda_ascii_cursor_read_int8_partial_array+0xf4>
    57c0:	ldr	r0, [fp, #-16]
    57c4:	bl	6d0 <read_partial_array>
    57c8:	mov	r3, r0
    57cc:	mov	r0, r3
    57d0:	sub	sp, fp, #4
    57d4:	pop	{fp, pc}
    57d8:	.word	0x00000c40
    57dc:	.word	0x00000694
    57e0:	.word	0x00000210
    57e4:	.word	0x000009b8
    57e8:	.word	0x00000000

000057ec <coda_ascii_cursor_read_uint8_partial_array>:
    57ec:	push	{fp, lr}
    57f0:	add	fp, sp, #4
    57f4:	sub	sp, sp, #32
    57f8:	str	r0, [fp, #-16]
    57fc:	str	r1, [fp, #-20]	; 0xffffffec
    5800:	str	r2, [fp, #-24]	; 0xffffffe8
    5804:	str	r3, [fp, #-28]	; 0xffffffe4
    5808:	ldr	r3, [fp, #-16]
    580c:	ldr	r3, [r3, #4]
    5810:	sub	r3, r3, #1
    5814:	ldr	r2, [fp, #-16]
    5818:	lsl	r3, r3, #4
    581c:	add	r3, r2, r3
    5820:	ldr	r3, [r3, #8]
    5824:	ldr	r3, [r3]
    5828:	cmp	r3, #99	; 0x63
    582c:	bhi	5850 <coda_ascii_cursor_read_uint8_partial_array+0x64>
    5830:	ldr	r3, [fp, #-16]
    5834:	ldr	r3, [r3, #4]
    5838:	sub	r3, r3, #1
    583c:	ldr	r2, [fp, #-16]
    5840:	lsl	r3, r3, #4
    5844:	add	r3, r2, r3
    5848:	ldr	r3, [r3, #8]
    584c:	b	5870 <coda_ascii_cursor_read_uint8_partial_array+0x84>
    5850:	ldr	r3, [fp, #-16]
    5854:	ldr	r3, [r3, #4]
    5858:	sub	r3, r3, #1
    585c:	ldr	r2, [fp, #-16]
    5860:	lsl	r3, r3, #4
    5864:	add	r3, r2, r3
    5868:	ldr	r3, [r3, #8]
    586c:	ldr	r3, [r3, #4]
    5870:	str	r3, [fp, #-8]
    5874:	ldr	r3, [fp, #-8]
    5878:	ldr	r3, [r3, #40]	; 0x28
    587c:	ldr	r3, [r3]
    5880:	cmp	r3, #0
    5884:	beq	589c <coda_ascii_cursor_read_uint8_partial_array+0xb0>
    5888:	ldr	r3, [pc, #64]	; 58d0 <coda_ascii_cursor_read_uint8_partial_array+0xe4>
    588c:	ldr	r2, [pc, #64]	; 58d4 <coda_ascii_cursor_read_uint8_partial_array+0xe8>
    5890:	ldr	r1, [pc, #64]	; 58d8 <coda_ascii_cursor_read_uint8_partial_array+0xec>
    5894:	ldr	r0, [pc, #64]	; 58dc <coda_ascii_cursor_read_uint8_partial_array+0xf0>
    5898:	bl	0 <__assert_fail>
    589c:	mov	r3, #1
    58a0:	str	r3, [sp, #4]
    58a4:	ldr	r3, [fp, #-28]	; 0xffffffe4
    58a8:	str	r3, [sp]
    58ac:	ldr	r3, [fp, #-24]	; 0xffffffe8
    58b0:	ldr	r2, [fp, #-20]	; 0xffffffec
    58b4:	ldr	r1, [pc, #36]	; 58e0 <coda_ascii_cursor_read_uint8_partial_array+0xf4>
    58b8:	ldr	r0, [fp, #-16]
    58bc:	bl	6d0 <read_partial_array>
    58c0:	mov	r3, r0
    58c4:	mov	r0, r3
    58c8:	sub	sp, fp, #4
    58cc:	pop	{fp, pc}
    58d0:	.word	0x00000c6c
    58d4:	.word	0x0000069d
    58d8:	.word	0x00000210
    58dc:	.word	0x000009b8
    58e0:	.word	0x00000000

000058e4 <coda_ascii_cursor_read_int16_partial_array>:
    58e4:	push	{fp, lr}
    58e8:	add	fp, sp, #4
    58ec:	sub	sp, sp, #32
    58f0:	str	r0, [fp, #-16]
    58f4:	str	r1, [fp, #-20]	; 0xffffffec
    58f8:	str	r2, [fp, #-24]	; 0xffffffe8
    58fc:	str	r3, [fp, #-28]	; 0xffffffe4
    5900:	ldr	r3, [fp, #-16]
    5904:	ldr	r3, [r3, #4]
    5908:	sub	r3, r3, #1
    590c:	ldr	r2, [fp, #-16]
    5910:	lsl	r3, r3, #4
    5914:	add	r3, r2, r3
    5918:	ldr	r3, [r3, #8]
    591c:	ldr	r3, [r3]
    5920:	cmp	r3, #99	; 0x63
    5924:	bhi	5948 <coda_ascii_cursor_read_int16_partial_array+0x64>
    5928:	ldr	r3, [fp, #-16]
    592c:	ldr	r3, [r3, #4]
    5930:	sub	r3, r3, #1
    5934:	ldr	r2, [fp, #-16]
    5938:	lsl	r3, r3, #4
    593c:	add	r3, r2, r3
    5940:	ldr	r3, [r3, #8]
    5944:	b	5968 <coda_ascii_cursor_read_int16_partial_array+0x84>
    5948:	ldr	r3, [fp, #-16]
    594c:	ldr	r3, [r3, #4]
    5950:	sub	r3, r3, #1
    5954:	ldr	r2, [fp, #-16]
    5958:	lsl	r3, r3, #4
    595c:	add	r3, r2, r3
    5960:	ldr	r3, [r3, #8]
    5964:	ldr	r3, [r3, #4]
    5968:	str	r3, [fp, #-8]
    596c:	ldr	r3, [fp, #-8]
    5970:	ldr	r3, [r3, #40]	; 0x28
    5974:	ldr	r3, [r3]
    5978:	cmp	r3, #0
    597c:	beq	5994 <coda_ascii_cursor_read_int16_partial_array+0xb0>
    5980:	ldr	r3, [pc, #64]	; 59c8 <coda_ascii_cursor_read_int16_partial_array+0xe4>
    5984:	ldr	r2, [pc, #64]	; 59cc <coda_ascii_cursor_read_int16_partial_array+0xe8>
    5988:	ldr	r1, [pc, #64]	; 59d0 <coda_ascii_cursor_read_int16_partial_array+0xec>
    598c:	ldr	r0, [pc, #64]	; 59d4 <coda_ascii_cursor_read_int16_partial_array+0xf0>
    5990:	bl	0 <__assert_fail>
    5994:	mov	r3, #2
    5998:	str	r3, [sp, #4]
    599c:	ldr	r3, [fp, #-28]	; 0xffffffe4
    59a0:	str	r3, [sp]
    59a4:	ldr	r3, [fp, #-24]	; 0xffffffe8
    59a8:	ldr	r2, [fp, #-20]	; 0xffffffec
    59ac:	ldr	r1, [pc, #36]	; 59d8 <coda_ascii_cursor_read_int16_partial_array+0xf4>
    59b0:	ldr	r0, [fp, #-16]
    59b4:	bl	6d0 <read_partial_array>
    59b8:	mov	r3, r0
    59bc:	mov	r0, r3
    59c0:	sub	sp, fp, #4
    59c4:	pop	{fp, pc}
    59c8:	.word	0x00000c98
    59cc:	.word	0x000006a6
    59d0:	.word	0x00000210
    59d4:	.word	0x000009b8
    59d8:	.word	0x00000000

000059dc <coda_ascii_cursor_read_uint16_partial_array>:
    59dc:	push	{fp, lr}
    59e0:	add	fp, sp, #4
    59e4:	sub	sp, sp, #32
    59e8:	str	r0, [fp, #-16]
    59ec:	str	r1, [fp, #-20]	; 0xffffffec
    59f0:	str	r2, [fp, #-24]	; 0xffffffe8
    59f4:	str	r3, [fp, #-28]	; 0xffffffe4
    59f8:	ldr	r3, [fp, #-16]
    59fc:	ldr	r3, [r3, #4]
    5a00:	sub	r3, r3, #1
    5a04:	ldr	r2, [fp, #-16]
    5a08:	lsl	r3, r3, #4
    5a0c:	add	r3, r2, r3
    5a10:	ldr	r3, [r3, #8]
    5a14:	ldr	r3, [r3]
    5a18:	cmp	r3, #99	; 0x63
    5a1c:	bhi	5a40 <coda_ascii_cursor_read_uint16_partial_array+0x64>
    5a20:	ldr	r3, [fp, #-16]
    5a24:	ldr	r3, [r3, #4]
    5a28:	sub	r3, r3, #1
    5a2c:	ldr	r2, [fp, #-16]
    5a30:	lsl	r3, r3, #4
    5a34:	add	r3, r2, r3
    5a38:	ldr	r3, [r3, #8]
    5a3c:	b	5a60 <coda_ascii_cursor_read_uint16_partial_array+0x84>
    5a40:	ldr	r3, [fp, #-16]
    5a44:	ldr	r3, [r3, #4]
    5a48:	sub	r3, r3, #1
    5a4c:	ldr	r2, [fp, #-16]
    5a50:	lsl	r3, r3, #4
    5a54:	add	r3, r2, r3
    5a58:	ldr	r3, [r3, #8]
    5a5c:	ldr	r3, [r3, #4]
    5a60:	str	r3, [fp, #-8]
    5a64:	ldr	r3, [fp, #-8]
    5a68:	ldr	r3, [r3, #40]	; 0x28
    5a6c:	ldr	r3, [r3]
    5a70:	cmp	r3, #0
    5a74:	beq	5a8c <coda_ascii_cursor_read_uint16_partial_array+0xb0>
    5a78:	ldr	r3, [pc, #64]	; 5ac0 <coda_ascii_cursor_read_uint16_partial_array+0xe4>
    5a7c:	ldr	r2, [pc, #64]	; 5ac4 <coda_ascii_cursor_read_uint16_partial_array+0xe8>
    5a80:	ldr	r1, [pc, #64]	; 5ac8 <coda_ascii_cursor_read_uint16_partial_array+0xec>
    5a84:	ldr	r0, [pc, #64]	; 5acc <coda_ascii_cursor_read_uint16_partial_array+0xf0>
    5a88:	bl	0 <__assert_fail>
    5a8c:	mov	r3, #2
    5a90:	str	r3, [sp, #4]
    5a94:	ldr	r3, [fp, #-28]	; 0xffffffe4
    5a98:	str	r3, [sp]
    5a9c:	ldr	r3, [fp, #-24]	; 0xffffffe8
    5aa0:	ldr	r2, [fp, #-20]	; 0xffffffec
    5aa4:	ldr	r1, [pc, #36]	; 5ad0 <coda_ascii_cursor_read_uint16_partial_array+0xf4>
    5aa8:	ldr	r0, [fp, #-16]
    5aac:	bl	6d0 <read_partial_array>
    5ab0:	mov	r3, r0
    5ab4:	mov	r0, r3
    5ab8:	sub	sp, fp, #4
    5abc:	pop	{fp, pc}
    5ac0:	.word	0x00000cc4
    5ac4:	.word	0x000006af
    5ac8:	.word	0x00000210
    5acc:	.word	0x000009b8
    5ad0:	.word	0x00000000

00005ad4 <coda_ascii_cursor_read_int32_partial_array>:
    5ad4:	push	{fp, lr}
    5ad8:	add	fp, sp, #4
    5adc:	sub	sp, sp, #32
    5ae0:	str	r0, [fp, #-16]
    5ae4:	str	r1, [fp, #-20]	; 0xffffffec
    5ae8:	str	r2, [fp, #-24]	; 0xffffffe8
    5aec:	str	r3, [fp, #-28]	; 0xffffffe4
    5af0:	ldr	r3, [fp, #-16]
    5af4:	ldr	r3, [r3, #4]
    5af8:	sub	r3, r3, #1
    5afc:	ldr	r2, [fp, #-16]
    5b00:	lsl	r3, r3, #4
    5b04:	add	r3, r2, r3
    5b08:	ldr	r3, [r3, #8]
    5b0c:	ldr	r3, [r3]
    5b10:	cmp	r3, #99	; 0x63
    5b14:	bhi	5b38 <coda_ascii_cursor_read_int32_partial_array+0x64>
    5b18:	ldr	r3, [fp, #-16]
    5b1c:	ldr	r3, [r3, #4]
    5b20:	sub	r3, r3, #1
    5b24:	ldr	r2, [fp, #-16]
    5b28:	lsl	r3, r3, #4
    5b2c:	add	r3, r2, r3
    5b30:	ldr	r3, [r3, #8]
    5b34:	b	5b58 <coda_ascii_cursor_read_int32_partial_array+0x84>
    5b38:	ldr	r3, [fp, #-16]
    5b3c:	ldr	r3, [r3, #4]
    5b40:	sub	r3, r3, #1
    5b44:	ldr	r2, [fp, #-16]
    5b48:	lsl	r3, r3, #4
    5b4c:	add	r3, r2, r3
    5b50:	ldr	r3, [r3, #8]
    5b54:	ldr	r3, [r3, #4]
    5b58:	str	r3, [fp, #-8]
    5b5c:	ldr	r3, [fp, #-8]
    5b60:	ldr	r3, [r3, #40]	; 0x28
    5b64:	ldr	r3, [r3]
    5b68:	cmp	r3, #0
    5b6c:	beq	5b84 <coda_ascii_cursor_read_int32_partial_array+0xb0>
    5b70:	ldr	r3, [pc, #64]	; 5bb8 <coda_ascii_cursor_read_int32_partial_array+0xe4>
    5b74:	ldr	r2, [pc, #64]	; 5bbc <coda_ascii_cursor_read_int32_partial_array+0xe8>
    5b78:	ldr	r1, [pc, #64]	; 5bc0 <coda_ascii_cursor_read_int32_partial_array+0xec>
    5b7c:	ldr	r0, [pc, #64]	; 5bc4 <coda_ascii_cursor_read_int32_partial_array+0xf0>
    5b80:	bl	0 <__assert_fail>
    5b84:	mov	r3, #4
    5b88:	str	r3, [sp, #4]
    5b8c:	ldr	r3, [fp, #-28]	; 0xffffffe4
    5b90:	str	r3, [sp]
    5b94:	ldr	r3, [fp, #-24]	; 0xffffffe8
    5b98:	ldr	r2, [fp, #-20]	; 0xffffffec
    5b9c:	ldr	r1, [pc, #36]	; 5bc8 <coda_ascii_cursor_read_int32_partial_array+0xf4>
    5ba0:	ldr	r0, [fp, #-16]
    5ba4:	bl	6d0 <read_partial_array>
    5ba8:	mov	r3, r0
    5bac:	mov	r0, r3
    5bb0:	sub	sp, fp, #4
    5bb4:	pop	{fp, pc}
    5bb8:	.word	0x00000cf0
    5bbc:	.word	0x000006b8
    5bc0:	.word	0x00000210
    5bc4:	.word	0x000009b8
    5bc8:	.word	0x00000000

00005bcc <coda_ascii_cursor_read_uint32_partial_array>:
    5bcc:	push	{fp, lr}
    5bd0:	add	fp, sp, #4
    5bd4:	sub	sp, sp, #32
    5bd8:	str	r0, [fp, #-16]
    5bdc:	str	r1, [fp, #-20]	; 0xffffffec
    5be0:	str	r2, [fp, #-24]	; 0xffffffe8
    5be4:	str	r3, [fp, #-28]	; 0xffffffe4
    5be8:	ldr	r3, [fp, #-16]
    5bec:	ldr	r3, [r3, #4]
    5bf0:	sub	r3, r3, #1
    5bf4:	ldr	r2, [fp, #-16]
    5bf8:	lsl	r3, r3, #4
    5bfc:	add	r3, r2, r3
    5c00:	ldr	r3, [r3, #8]
    5c04:	ldr	r3, [r3]
    5c08:	cmp	r3, #99	; 0x63
    5c0c:	bhi	5c30 <coda_ascii_cursor_read_uint32_partial_array+0x64>
    5c10:	ldr	r3, [fp, #-16]
    5c14:	ldr	r3, [r3, #4]
    5c18:	sub	r3, r3, #1
    5c1c:	ldr	r2, [fp, #-16]
    5c20:	lsl	r3, r3, #4
    5c24:	add	r3, r2, r3
    5c28:	ldr	r3, [r3, #8]
    5c2c:	b	5c50 <coda_ascii_cursor_read_uint32_partial_array+0x84>
    5c30:	ldr	r3, [fp, #-16]
    5c34:	ldr	r3, [r3, #4]
    5c38:	sub	r3, r3, #1
    5c3c:	ldr	r2, [fp, #-16]
    5c40:	lsl	r3, r3, #4
    5c44:	add	r3, r2, r3
    5c48:	ldr	r3, [r3, #8]
    5c4c:	ldr	r3, [r3, #4]
    5c50:	str	r3, [fp, #-8]
    5c54:	ldr	r3, [fp, #-8]
    5c58:	ldr	r3, [r3, #40]	; 0x28
    5c5c:	ldr	r3, [r3]
    5c60:	cmp	r3, #0
    5c64:	beq	5c7c <coda_ascii_cursor_read_uint32_partial_array+0xb0>
    5c68:	ldr	r3, [pc, #64]	; 5cb0 <coda_ascii_cursor_read_uint32_partial_array+0xe4>
    5c6c:	ldr	r2, [pc, #64]	; 5cb4 <coda_ascii_cursor_read_uint32_partial_array+0xe8>
    5c70:	ldr	r1, [pc, #64]	; 5cb8 <coda_ascii_cursor_read_uint32_partial_array+0xec>
    5c74:	ldr	r0, [pc, #64]	; 5cbc <coda_ascii_cursor_read_uint32_partial_array+0xf0>
    5c78:	bl	0 <__assert_fail>
    5c7c:	mov	r3, #4
    5c80:	str	r3, [sp, #4]
    5c84:	ldr	r3, [fp, #-28]	; 0xffffffe4
    5c88:	str	r3, [sp]
    5c8c:	ldr	r3, [fp, #-24]	; 0xffffffe8
    5c90:	ldr	r2, [fp, #-20]	; 0xffffffec
    5c94:	ldr	r1, [pc, #36]	; 5cc0 <coda_ascii_cursor_read_uint32_partial_array+0xf4>
    5c98:	ldr	r0, [fp, #-16]
    5c9c:	bl	6d0 <read_partial_array>
    5ca0:	mov	r3, r0
    5ca4:	mov	r0, r3
    5ca8:	sub	sp, fp, #4
    5cac:	pop	{fp, pc}
    5cb0:	.word	0x00000d1c
    5cb4:	.word	0x000006c1
    5cb8:	.word	0x00000210
    5cbc:	.word	0x000009b8
    5cc0:	.word	0x00000000

00005cc4 <coda_ascii_cursor_read_int64_partial_array>:
    5cc4:	push	{fp, lr}
    5cc8:	add	fp, sp, #4
    5ccc:	sub	sp, sp, #32
    5cd0:	str	r0, [fp, #-16]
    5cd4:	str	r1, [fp, #-20]	; 0xffffffec
    5cd8:	str	r2, [fp, #-24]	; 0xffffffe8
    5cdc:	str	r3, [fp, #-28]	; 0xffffffe4
    5ce0:	ldr	r3, [fp, #-16]
    5ce4:	ldr	r3, [r3, #4]
    5ce8:	sub	r3, r3, #1
    5cec:	ldr	r2, [fp, #-16]
    5cf0:	lsl	r3, r3, #4
    5cf4:	add	r3, r2, r3
    5cf8:	ldr	r3, [r3, #8]
    5cfc:	ldr	r3, [r3]
    5d00:	cmp	r3, #99	; 0x63
    5d04:	bhi	5d28 <coda_ascii_cursor_read_int64_partial_array+0x64>
    5d08:	ldr	r3, [fp, #-16]
    5d0c:	ldr	r3, [r3, #4]
    5d10:	sub	r3, r3, #1
    5d14:	ldr	r2, [fp, #-16]
    5d18:	lsl	r3, r3, #4
    5d1c:	add	r3, r2, r3
    5d20:	ldr	r3, [r3, #8]
    5d24:	b	5d48 <coda_ascii_cursor_read_int64_partial_array+0x84>
    5d28:	ldr	r3, [fp, #-16]
    5d2c:	ldr	r3, [r3, #4]
    5d30:	sub	r3, r3, #1
    5d34:	ldr	r2, [fp, #-16]
    5d38:	lsl	r3, r3, #4
    5d3c:	add	r3, r2, r3
    5d40:	ldr	r3, [r3, #8]
    5d44:	ldr	r3, [r3, #4]
    5d48:	str	r3, [fp, #-8]
    5d4c:	ldr	r3, [fp, #-8]
    5d50:	ldr	r3, [r3, #40]	; 0x28
    5d54:	ldr	r3, [r3]
    5d58:	cmp	r3, #0
    5d5c:	beq	5d74 <coda_ascii_cursor_read_int64_partial_array+0xb0>
    5d60:	ldr	r3, [pc, #64]	; 5da8 <coda_ascii_cursor_read_int64_partial_array+0xe4>
    5d64:	ldr	r2, [pc, #64]	; 5dac <coda_ascii_cursor_read_int64_partial_array+0xe8>
    5d68:	ldr	r1, [pc, #64]	; 5db0 <coda_ascii_cursor_read_int64_partial_array+0xec>
    5d6c:	ldr	r0, [pc, #64]	; 5db4 <coda_ascii_cursor_read_int64_partial_array+0xf0>
    5d70:	bl	0 <__assert_fail>
    5d74:	mov	r3, #8
    5d78:	str	r3, [sp, #4]
    5d7c:	ldr	r3, [fp, #-28]	; 0xffffffe4
    5d80:	str	r3, [sp]
    5d84:	ldr	r3, [fp, #-24]	; 0xffffffe8
    5d88:	ldr	r2, [fp, #-20]	; 0xffffffec
    5d8c:	ldr	r1, [pc, #36]	; 5db8 <coda_ascii_cursor_read_int64_partial_array+0xf4>
    5d90:	ldr	r0, [fp, #-16]
    5d94:	bl	6d0 <read_partial_array>
    5d98:	mov	r3, r0
    5d9c:	mov	r0, r3
    5da0:	sub	sp, fp, #4
    5da4:	pop	{fp, pc}
    5da8:	.word	0x00000d48
    5dac:	.word	0x000006ca
    5db0:	.word	0x00000210
    5db4:	.word	0x000009b8
    5db8:	.word	0x00000000

00005dbc <coda_ascii_cursor_read_uint64_partial_array>:
    5dbc:	push	{fp, lr}
    5dc0:	add	fp, sp, #4
    5dc4:	sub	sp, sp, #32
    5dc8:	str	r0, [fp, #-16]
    5dcc:	str	r1, [fp, #-20]	; 0xffffffec
    5dd0:	str	r2, [fp, #-24]	; 0xffffffe8
    5dd4:	str	r3, [fp, #-28]	; 0xffffffe4
    5dd8:	ldr	r3, [fp, #-16]
    5ddc:	ldr	r3, [r3, #4]
    5de0:	sub	r3, r3, #1
    5de4:	ldr	r2, [fp, #-16]
    5de8:	lsl	r3, r3, #4
    5dec:	add	r3, r2, r3
    5df0:	ldr	r3, [r3, #8]
    5df4:	ldr	r3, [r3]
    5df8:	cmp	r3, #99	; 0x63
    5dfc:	bhi	5e20 <coda_ascii_cursor_read_uint64_partial_array+0x64>
    5e00:	ldr	r3, [fp, #-16]
    5e04:	ldr	r3, [r3, #4]
    5e08:	sub	r3, r3, #1
    5e0c:	ldr	r2, [fp, #-16]
    5e10:	lsl	r3, r3, #4
    5e14:	add	r3, r2, r3
    5e18:	ldr	r3, [r3, #8]
    5e1c:	b	5e40 <coda_ascii_cursor_read_uint64_partial_array+0x84>
    5e20:	ldr	r3, [fp, #-16]
    5e24:	ldr	r3, [r3, #4]
    5e28:	sub	r3, r3, #1
    5e2c:	ldr	r2, [fp, #-16]
    5e30:	lsl	r3, r3, #4
    5e34:	add	r3, r2, r3
    5e38:	ldr	r3, [r3, #8]
    5e3c:	ldr	r3, [r3, #4]
    5e40:	str	r3, [fp, #-8]
    5e44:	ldr	r3, [fp, #-8]
    5e48:	ldr	r3, [r3, #40]	; 0x28
    5e4c:	ldr	r3, [r3]
    5e50:	cmp	r3, #0
    5e54:	beq	5e6c <coda_ascii_cursor_read_uint64_partial_array+0xb0>
    5e58:	ldr	r3, [pc, #64]	; 5ea0 <coda_ascii_cursor_read_uint64_partial_array+0xe4>
    5e5c:	ldr	r2, [pc, #64]	; 5ea4 <coda_ascii_cursor_read_uint64_partial_array+0xe8>
    5e60:	ldr	r1, [pc, #64]	; 5ea8 <coda_ascii_cursor_read_uint64_partial_array+0xec>
    5e64:	ldr	r0, [pc, #64]	; 5eac <coda_ascii_cursor_read_uint64_partial_array+0xf0>
    5e68:	bl	0 <__assert_fail>
    5e6c:	mov	r3, #8
    5e70:	str	r3, [sp, #4]
    5e74:	ldr	r3, [fp, #-28]	; 0xffffffe4
    5e78:	str	r3, [sp]
    5e7c:	ldr	r3, [fp, #-24]	; 0xffffffe8
    5e80:	ldr	r2, [fp, #-20]	; 0xffffffec
    5e84:	ldr	r1, [pc, #36]	; 5eb0 <coda_ascii_cursor_read_uint64_partial_array+0xf4>
    5e88:	ldr	r0, [fp, #-16]
    5e8c:	bl	6d0 <read_partial_array>
    5e90:	mov	r3, r0
    5e94:	mov	r0, r3
    5e98:	sub	sp, fp, #4
    5e9c:	pop	{fp, pc}
    5ea0:	.word	0x00000d74
    5ea4:	.word	0x000006d3
    5ea8:	.word	0x00000210
    5eac:	.word	0x000009b8
    5eb0:	.word	0x00000000

00005eb4 <coda_ascii_cursor_read_float_partial_array>:
    5eb4:	push	{fp, lr}
    5eb8:	add	fp, sp, #4
    5ebc:	sub	sp, sp, #32
    5ec0:	str	r0, [fp, #-16]
    5ec4:	str	r1, [fp, #-20]	; 0xffffffec
    5ec8:	str	r2, [fp, #-24]	; 0xffffffe8
    5ecc:	str	r3, [fp, #-28]	; 0xffffffe4
    5ed0:	ldr	r3, [fp, #-16]
    5ed4:	ldr	r3, [r3, #4]
    5ed8:	sub	r3, r3, #1
    5edc:	ldr	r2, [fp, #-16]
    5ee0:	lsl	r3, r3, #4
    5ee4:	add	r3, r2, r3
    5ee8:	ldr	r3, [r3, #8]
    5eec:	ldr	r3, [r3]
    5ef0:	cmp	r3, #99	; 0x63
    5ef4:	bhi	5f18 <coda_ascii_cursor_read_float_partial_array+0x64>
    5ef8:	ldr	r3, [fp, #-16]
    5efc:	ldr	r3, [r3, #4]
    5f00:	sub	r3, r3, #1
    5f04:	ldr	r2, [fp, #-16]
    5f08:	lsl	r3, r3, #4
    5f0c:	add	r3, r2, r3
    5f10:	ldr	r3, [r3, #8]
    5f14:	b	5f38 <coda_ascii_cursor_read_float_partial_array+0x84>
    5f18:	ldr	r3, [fp, #-16]
    5f1c:	ldr	r3, [r3, #4]
    5f20:	sub	r3, r3, #1
    5f24:	ldr	r2, [fp, #-16]
    5f28:	lsl	r3, r3, #4
    5f2c:	add	r3, r2, r3
    5f30:	ldr	r3, [r3, #8]
    5f34:	ldr	r3, [r3, #4]
    5f38:	str	r3, [fp, #-8]
    5f3c:	ldr	r3, [fp, #-8]
    5f40:	ldr	r3, [r3, #40]	; 0x28
    5f44:	ldr	r3, [r3]
    5f48:	cmp	r3, #0
    5f4c:	beq	5f64 <coda_ascii_cursor_read_float_partial_array+0xb0>
    5f50:	ldr	r3, [pc, #64]	; 5f98 <coda_ascii_cursor_read_float_partial_array+0xe4>
    5f54:	ldr	r2, [pc, #64]	; 5f9c <coda_ascii_cursor_read_float_partial_array+0xe8>
    5f58:	ldr	r1, [pc, #64]	; 5fa0 <coda_ascii_cursor_read_float_partial_array+0xec>
    5f5c:	ldr	r0, [pc, #64]	; 5fa4 <coda_ascii_cursor_read_float_partial_array+0xf0>
    5f60:	bl	0 <__assert_fail>
    5f64:	mov	r3, #4
    5f68:	str	r3, [sp, #4]
    5f6c:	ldr	r3, [fp, #-28]	; 0xffffffe4
    5f70:	str	r3, [sp]
    5f74:	ldr	r3, [fp, #-24]	; 0xffffffe8
    5f78:	ldr	r2, [fp, #-20]	; 0xffffffec
    5f7c:	ldr	r1, [pc, #36]	; 5fa8 <coda_ascii_cursor_read_float_partial_array+0xf4>
    5f80:	ldr	r0, [fp, #-16]
    5f84:	bl	6d0 <read_partial_array>
    5f88:	mov	r3, r0
    5f8c:	mov	r0, r3
    5f90:	sub	sp, fp, #4
    5f94:	pop	{fp, pc}
    5f98:	.word	0x00000da0
    5f9c:	.word	0x000006dc
    5fa0:	.word	0x00000210
    5fa4:	.word	0x000009b8
    5fa8:	.word	0x00000000

00005fac <coda_ascii_cursor_read_double_partial_array>:
    5fac:	push	{fp, lr}
    5fb0:	add	fp, sp, #4
    5fb4:	sub	sp, sp, #32
    5fb8:	str	r0, [fp, #-16]
    5fbc:	str	r1, [fp, #-20]	; 0xffffffec
    5fc0:	str	r2, [fp, #-24]	; 0xffffffe8
    5fc4:	str	r3, [fp, #-28]	; 0xffffffe4
    5fc8:	ldr	r3, [fp, #-16]
    5fcc:	ldr	r3, [r3, #4]
    5fd0:	sub	r3, r3, #1
    5fd4:	ldr	r2, [fp, #-16]
    5fd8:	lsl	r3, r3, #4
    5fdc:	add	r3, r2, r3
    5fe0:	ldr	r3, [r3, #8]
    5fe4:	ldr	r3, [r3]
    5fe8:	cmp	r3, #99	; 0x63
    5fec:	bhi	6010 <coda_ascii_cursor_read_double_partial_array+0x64>
    5ff0:	ldr	r3, [fp, #-16]
    5ff4:	ldr	r3, [r3, #4]
    5ff8:	sub	r3, r3, #1
    5ffc:	ldr	r2, [fp, #-16]
    6000:	lsl	r3, r3, #4
    6004:	add	r3, r2, r3
    6008:	ldr	r3, [r3, #8]
    600c:	b	6030 <coda_ascii_cursor_read_double_partial_array+0x84>
    6010:	ldr	r3, [fp, #-16]
    6014:	ldr	r3, [r3, #4]
    6018:	sub	r3, r3, #1
    601c:	ldr	r2, [fp, #-16]
    6020:	lsl	r3, r3, #4
    6024:	add	r3, r2, r3
    6028:	ldr	r3, [r3, #8]
    602c:	ldr	r3, [r3, #4]
    6030:	str	r3, [fp, #-8]
    6034:	ldr	r3, [fp, #-8]
    6038:	ldr	r3, [r3, #40]	; 0x28
    603c:	ldr	r3, [r3]
    6040:	cmp	r3, #0
    6044:	beq	605c <coda_ascii_cursor_read_double_partial_array+0xb0>
    6048:	ldr	r3, [pc, #64]	; 6090 <coda_ascii_cursor_read_double_partial_array+0xe4>
    604c:	ldr	r2, [pc, #64]	; 6094 <coda_ascii_cursor_read_double_partial_array+0xe8>
    6050:	ldr	r1, [pc, #64]	; 6098 <coda_ascii_cursor_read_double_partial_array+0xec>
    6054:	ldr	r0, [pc, #64]	; 609c <coda_ascii_cursor_read_double_partial_array+0xf0>
    6058:	bl	0 <__assert_fail>
    605c:	mov	r3, #8
    6060:	str	r3, [sp, #4]
    6064:	ldr	r3, [fp, #-28]	; 0xffffffe4
    6068:	str	r3, [sp]
    606c:	ldr	r3, [fp, #-24]	; 0xffffffe8
    6070:	ldr	r2, [fp, #-20]	; 0xffffffec
    6074:	ldr	r1, [pc, #36]	; 60a0 <coda_ascii_cursor_read_double_partial_array+0xf4>
    6078:	ldr	r0, [fp, #-16]
    607c:	bl	6d0 <read_partial_array>
    6080:	mov	r3, r0
    6084:	mov	r0, r3
    6088:	sub	sp, fp, #4
    608c:	pop	{fp, pc}
    6090:	.word	0x00000dcc
    6094:	.word	0x000006e5
    6098:	.word	0x00000210
    609c:	.word	0x000009b8
    60a0:	.word	0x00000000

000060a4 <coda_ascii_cursor_read_char_partial_array>:
    60a4:	push	{fp, lr}
    60a8:	add	fp, sp, #4
    60ac:	sub	sp, sp, #32
    60b0:	str	r0, [fp, #-16]
    60b4:	str	r1, [fp, #-20]	; 0xffffffec
    60b8:	str	r2, [fp, #-24]	; 0xffffffe8
    60bc:	str	r3, [fp, #-28]	; 0xffffffe4
    60c0:	ldr	r3, [fp, #-16]
    60c4:	ldr	r3, [r3, #4]
    60c8:	sub	r3, r3, #1
    60cc:	ldr	r2, [fp, #-16]
    60d0:	lsl	r3, r3, #4
    60d4:	add	r3, r2, r3
    60d8:	ldr	r3, [r3, #8]
    60dc:	ldr	r3, [r3]
    60e0:	cmp	r3, #99	; 0x63
    60e4:	bhi	6108 <coda_ascii_cursor_read_char_partial_array+0x64>
    60e8:	ldr	r3, [fp, #-16]
    60ec:	ldr	r3, [r3, #4]
    60f0:	sub	r3, r3, #1
    60f4:	ldr	r2, [fp, #-16]
    60f8:	lsl	r3, r3, #4
    60fc:	add	r3, r2, r3
    6100:	ldr	r3, [r3, #8]
    6104:	b	6128 <coda_ascii_cursor_read_char_partial_array+0x84>
    6108:	ldr	r3, [fp, #-16]
    610c:	ldr	r3, [r3, #4]
    6110:	sub	r3, r3, #1
    6114:	ldr	r2, [fp, #-16]
    6118:	lsl	r3, r3, #4
    611c:	add	r3, r2, r3
    6120:	ldr	r3, [r3, #8]
    6124:	ldr	r3, [r3, #4]
    6128:	str	r3, [fp, #-8]
    612c:	ldr	r3, [fp, #-8]
    6130:	ldr	r3, [r3, #40]	; 0x28
    6134:	ldr	r3, [r3]
    6138:	cmp	r3, #0
    613c:	beq	6154 <coda_ascii_cursor_read_char_partial_array+0xb0>
    6140:	ldr	r3, [pc, #64]	; 6188 <coda_ascii_cursor_read_char_partial_array+0xe4>
    6144:	ldr	r2, [pc, #64]	; 618c <coda_ascii_cursor_read_char_partial_array+0xe8>
    6148:	ldr	r1, [pc, #64]	; 6190 <coda_ascii_cursor_read_char_partial_array+0xec>
    614c:	ldr	r0, [pc, #64]	; 6194 <coda_ascii_cursor_read_char_partial_array+0xf0>
    6150:	bl	0 <__assert_fail>
    6154:	mov	r3, #1
    6158:	str	r3, [sp, #4]
    615c:	ldr	r3, [fp, #-28]	; 0xffffffe4
    6160:	str	r3, [sp]
    6164:	ldr	r3, [fp, #-24]	; 0xffffffe8
    6168:	ldr	r2, [fp, #-20]	; 0xffffffec
    616c:	ldr	r1, [pc, #36]	; 6198 <coda_ascii_cursor_read_char_partial_array+0xf4>
    6170:	ldr	r0, [fp, #-16]
    6174:	bl	6d0 <read_partial_array>
    6178:	mov	r3, r0
    617c:	mov	r0, r3
    6180:	sub	sp, fp, #4
    6184:	pop	{fp, pc}
    6188:	.word	0x00000df8
    618c:	.word	0x000006ee
    6190:	.word	0x00000210
    6194:	.word	0x000009b8
    6198:	.word	0x00000000
