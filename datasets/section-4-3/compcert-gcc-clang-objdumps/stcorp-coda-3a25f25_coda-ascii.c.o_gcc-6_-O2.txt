
../compcert-repos/stcorp-coda-3a25f25/CMakeFiles/coda_static.dir/libcoda/coda-ascii.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <eol_type_to_string.part.0>:
   0:	push	{r4, lr}
   4:	mov	r2, #150	; 0x96
   8:	ldr	r3, [pc, #8]	; 18 <eol_type_to_string.part.0+0x18>
   c:	ldr	r1, [pc, #8]	; 1c <eol_type_to_string.part.0+0x1c>
  10:	ldr	r0, [pc, #8]	; 20 <eol_type_to_string.part.0+0x20>
  14:	bl	0 <__assert_fail>
	...
  20:	.word	0x0000004c

00000024 <verify_eol_type.isra.1>:
  24:	cmp	r1, #0
  28:	push	{r4, lr}
  2c:	beq	c4 <verify_eol_type.isra.1+0xa0>
  30:	ldr	r3, [r0]
  34:	cmp	r3, #0
  38:	beq	98 <verify_eol_type.isra.1+0x74>
  3c:	cmp	r1, r3
  40:	beq	a4 <verify_eol_type.isra.1+0x80>
  44:	cmp	r1, #2
  48:	beq	b4 <verify_eol_type.isra.1+0x90>
  4c:	cmp	r1, #3
  50:	beq	64 <verify_eol_type.isra.1+0x40>
  54:	cmp	r1, #1
  58:	ldreq	r2, [pc, #120]	; d8 <verify_eol_type.isra.1+0xb4>
  5c:	beq	68 <verify_eol_type.isra.1+0x44>
  60:	bl	0 <eol_type_to_string.part.0>
  64:	ldr	r2, [pc, #112]	; dc <verify_eol_type.isra.1+0xb8>
  68:	cmp	r3, #2
  6c:	beq	bc <verify_eol_type.isra.1+0x98>
  70:	cmp	r3, #3
  74:	beq	ac <verify_eol_type.isra.1+0x88>
  78:	cmp	r3, #1
  7c:	ldreq	r3, [pc, #84]	; d8 <verify_eol_type.isra.1+0xb4>
  80:	bne	60 <verify_eol_type.isra.1+0x3c>
  84:	ldr	r1, [pc, #84]	; e0 <verify_eol_type.isra.1+0xbc>
  88:	ldr	r0, [pc, #84]	; e4 <verify_eol_type.isra.1+0xc0>
  8c:	bl	0 <coda_set_error>
  90:	mvn	r0, #0
  94:	pop	{r4, pc}
  98:	str	r1, [r0]
  9c:	mov	r0, r3
  a0:	pop	{r4, pc}
  a4:	mov	r0, #0
  a8:	pop	{r4, pc}
  ac:	ldr	r3, [pc, #40]	; dc <verify_eol_type.isra.1+0xb8>
  b0:	b	84 <verify_eol_type.isra.1+0x60>
  b4:	ldr	r2, [pc, #44]	; e8 <verify_eol_type.isra.1+0xc4>
  b8:	b	68 <verify_eol_type.isra.1+0x44>
  bc:	ldr	r3, [pc, #36]	; e8 <verify_eol_type.isra.1+0xc4>
  c0:	b	84 <verify_eol_type.isra.1+0x60>
  c4:	ldr	r3, [pc, #32]	; ec <verify_eol_type.isra.1+0xc8>
  c8:	mov	r2, #156	; 0x9c
  cc:	ldr	r1, [pc, #28]	; f0 <verify_eol_type.isra.1+0xcc>
  d0:	ldr	r0, [pc, #28]	; f4 <verify_eol_type.isra.1+0xd0>
  d4:	bl	0 <__assert_fail>
  d8:	.word	0x00000054
  dc:	.word	0x00000058
  e0:	.word	0x0000007c
  e4:	.word	0xfffffed4
  e8:	.word	0x00000050
  ec:	.word	0x00000014
  f0:	.word	0x00000000
  f4:	.word	0x00000060

000000f8 <coda_ascii_reopen_with_definition>:
  f8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
  fc:	subs	sl, r1, #0
 100:	sub	sp, sp, #8
 104:	beq	21c <coda_ascii_reopen_with_definition+0x124>
 108:	ldr	r9, [r0]
 10c:	mov	r8, r0
 110:	ldr	r3, [r9, #16]
 114:	cmp	r3, #1
 118:	bne	244 <coda_ascii_reopen_with_definition+0x14c>
 11c:	ldr	r5, [sl]
 120:	cmp	r5, #0
 124:	bne	230 <coda_ascii_reopen_with_definition+0x138>
 128:	mov	r0, #80	; 0x50
 12c:	bl	0 <malloc>
 130:	subs	r4, r0, #0
 134:	beq	1d4 <coda_ascii_reopen_with_definition+0xdc>
 138:	ldrd	r2, [r9, #40]	; 0x28
 13c:	ldrd	r6, [r9, #8]
 140:	ldr	ip, [sl, #28]
 144:	strd	r2, [r4, #40]	; 0x28
 148:	str	ip, [r4, #20]
 14c:	ldr	r3, [r9, #56]	; 0x38
 150:	ldr	ip, [r9, #48]	; 0x30
 154:	ldr	r2, [r9, #52]	; 0x34
 158:	mov	r0, #0
 15c:	mov	r1, #0
 160:	strd	r6, [r4, #8]
 164:	mvn	r6, #0
 168:	str	r5, [r4]
 16c:	str	r5, [r4, #16]
 170:	str	sl, [r4, #24]
 174:	str	r5, [r4, #28]
 178:	str	r5, [r4, #32]
 17c:	strd	r0, [r9, #40]	; 0x28
 180:	ldr	r0, [r9]
 184:	str	ip, [r4, #48]	; 0x30
 188:	str	r5, [r9, #48]	; 0x30
 18c:	str	r2, [r4, #52]	; 0x34
 190:	str	r3, [r4, #56]	; 0x38
 194:	str	r6, [r9, #56]	; 0x38
 198:	str	r6, [r4, #64]	; 0x40
 19c:	str	r5, [r4, #60]	; 0x3c
 1a0:	str	r5, [r4, #68]	; 0x44
 1a4:	str	r5, [r4, #72]	; 0x48
 1a8:	str	r5, [r4, #76]	; 0x4c
 1ac:	bl	0 <strdup>
 1b0:	cmp	r0, #0
 1b4:	str	r0, [r4]
 1b8:	beq	1f8 <coda_ascii_reopen_with_definition+0x100>
 1bc:	mov	r0, r9
 1c0:	bl	0 <coda_close>
 1c4:	mov	r0, r5
 1c8:	str	r4, [r8]
 1cc:	add	sp, sp, #8
 1d0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
 1d4:	mov	r3, #61	; 0x3d
 1d8:	str	r3, [sp]
 1dc:	mvn	r0, #0
 1e0:	ldr	r3, [pc, #112]	; 258 <coda_ascii_reopen_with_definition+0x160>
 1e4:	mov	r2, #80	; 0x50
 1e8:	ldr	r1, [pc, #108]	; 25c <coda_ascii_reopen_with_definition+0x164>
 1ec:	bl	0 <coda_set_error>
 1f0:	mvn	r0, #0
 1f4:	b	1cc <coda_ascii_reopen_with_definition+0xd4>
 1f8:	mov	r3, #97	; 0x61
 1fc:	ldr	r2, [pc, #84]	; 258 <coda_ascii_reopen_with_definition+0x160>
 200:	ldr	r1, [pc, #88]	; 260 <coda_ascii_reopen_with_definition+0x168>
 204:	mov	r0, r6
 208:	bl	0 <coda_set_error>
 20c:	mov	r0, r4
 210:	bl	0 <free>
 214:	mov	r0, r6
 218:	b	1cc <coda_ascii_reopen_with_definition+0xd4>
 21c:	ldr	r3, [pc, #64]	; 264 <coda_ascii_reopen_with_definition+0x16c>
 220:	mov	r2, #52	; 0x34
 224:	ldr	r1, [pc, #44]	; 258 <coda_ascii_reopen_with_definition+0x160>
 228:	ldr	r0, [pc, #56]	; 268 <coda_ascii_reopen_with_definition+0x170>
 22c:	bl	0 <__assert_fail>
 230:	ldr	r3, [pc, #44]	; 264 <coda_ascii_reopen_with_definition+0x16c>
 234:	mov	r2, #54	; 0x36
 238:	ldr	r1, [pc, #24]	; 258 <coda_ascii_reopen_with_definition+0x160>
 23c:	ldr	r0, [pc, #40]	; 26c <coda_ascii_reopen_with_definition+0x174>
 240:	bl	0 <__assert_fail>
 244:	ldr	r3, [pc, #24]	; 264 <coda_ascii_reopen_with_definition+0x16c>
 248:	mov	r2, #53	; 0x35
 24c:	ldr	r1, [pc, #4]	; 258 <coda_ascii_reopen_with_definition+0x160>
 250:	ldr	r0, [pc, #24]	; 270 <coda_ascii_reopen_with_definition+0x178>
 254:	bl	0 <__assert_fail>
 258:	.word	0x00000000
 25c:	.word	0x00000138
 260:	.word	0x00000170
 264:	.word	0x00000024
 268:	.word	0x000000d0
 26c:	.word	0x00000110
 270:	.word	0x000000e4

00000274 <coda_ascii_close>:
 274:	push	{r4, r5, r6, lr}
 278:	mov	r4, r0
 27c:	bl	0 <coda_bin_product_close>
 280:	subs	r5, r0, #0
 284:	bne	2c8 <coda_ascii_close+0x54>
 288:	ldr	r0, [r4]
 28c:	cmp	r0, #0
 290:	beq	298 <coda_ascii_close+0x24>
 294:	bl	0 <free>
 298:	ldr	r0, [r4, #68]	; 0x44
 29c:	cmp	r0, #0
 2a0:	beq	2a8 <coda_ascii_close+0x34>
 2a4:	bl	0 <free>
 2a8:	ldr	r0, [r4, #76]	; 0x4c
 2ac:	cmp	r0, #0
 2b0:	beq	2b8 <coda_ascii_close+0x44>
 2b4:	bl	0 <coda_type_release>
 2b8:	mov	r0, r4
 2bc:	bl	0 <free>
 2c0:	mov	r0, r5
 2c4:	pop	{r4, r5, r6, pc}
 2c8:	mvn	r5, #0
 2cc:	b	2c0 <coda_ascii_close+0x4c>

000002d0 <coda_ascii_init_asciilines>:
 2d0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
 2d4:	sub	sp, sp, #4224	; 0x1080
 2d8:	ldr	r4, [r0, #64]	; 0x40
 2dc:	sub	sp, sp, #12
 2e0:	cmn	r4, #1
 2e4:	bne	7fc <coda_ascii_init_asciilines+0x52c>
 2e8:	ldr	r2, [r0, #52]	; 0x34
 2ec:	mov	fp, r0
 2f0:	cmp	r2, #0
 2f4:	beq	780 <coda_ascii_init_asciilines+0x4b0>
 2f8:	mov	r3, #0
 2fc:	mov	r2, #0
 300:	mov	r9, #0
 304:	strd	r2, [sp, #8]
 308:	str	r3, [sp, #48]	; 0x30
 30c:	mov	r6, r9
 310:	add	r3, sp, #132	; 0x84
 314:	mov	r8, r9
 318:	mov	r7, r9
 31c:	str	r3, [sp, #52]	; 0x34
 320:	add	r3, fp, #60	; 0x3c
 324:	str	r2, [sp, #44]	; 0x2c
 328:	str	r3, [sp, #40]	; 0x28
 32c:	str	fp, [sp, #24]
 330:	ldr	r3, [sp, #24]
 334:	ldrd	r4, [sp, #8]
 338:	ldrd	r2, [r3, #8]
 33c:	adds	r0, r4, #4096	; 0x1000
 340:	adc	r1, r5, #0
 344:	cmp	r2, r0
 348:	sbcs	r1, r3, r1
 34c:	bge	3f8 <coda_ascii_init_asciilines+0x128>
 350:	subs	r0, r2, r4
 354:	sbc	r1, r3, r5
 358:	strd	r0, [sp, #16]
 35c:	orrs	r1, r0, r1
 360:	beq	7c0 <coda_ascii_init_asciilines+0x4f0>
 364:	ldr	fp, [sp, #24]
 368:	ldr	ip, [fp, #48]	; 0x30
 36c:	cmp	ip, #0
 370:	beq	418 <coda_ascii_init_asciilines+0x148>
 374:	ldrd	r0, [sp, #8]
 378:	ldrd	r4, [sp, #16]
 37c:	ldrd	r2, [fp, #40]	; 0x28
 380:	adds	r0, r0, r4
 384:	adc	r1, r1, r5
 388:	cmp	r1, r3
 38c:	cmpeq	r0, r2
 390:	bls	4a4 <coda_ascii_init_asciilines+0x1d4>
 394:	ldr	r3, [fp, #16]
 398:	cmp	r3, #1
 39c:	bls	488 <coda_ascii_init_asciilines+0x1b8>
 3a0:	add	r3, sp, #60	; 0x3c
 3a4:	mov	r2, r3
 3a8:	ldrd	r0, [sp, #16]
 3ac:	str	r3, [sp, #24]
 3b0:	add	r4, sp, #108	; 0x6c
 3b4:	bl	0 <coda_str64>
 3b8:	ldrd	r0, [sp, #8]
 3bc:	add	r2, sp, #84	; 0x54
 3c0:	bl	0 <coda_str64>
 3c4:	ldrd	r0, [fp, #40]	; 0x28
 3c8:	mov	r2, r4
 3cc:	bl	0 <coda_str64>
 3d0:	mvn	r0, #300	; 0x12c
 3d4:	str	r4, [sp]
 3d8:	add	r3, sp, #84	; 0x54
 3dc:	ldr	r2, [sp, #24]
 3e0:	ldr	r1, [pc, #1084]	; 824 <coda_ascii_init_asciilines+0x554>
 3e4:	bl	0 <coda_set_error>
 3e8:	mvn	r0, #0
 3ec:	add	sp, sp, #4224	; 0x1080
 3f0:	add	sp, sp, #12
 3f4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
 3f8:	ldr	fp, [sp, #24]
 3fc:	mov	r1, #4096	; 0x1000
 400:	str	r1, [sp, #16]
 404:	ldr	ip, [fp, #48]	; 0x30
 408:	mov	r1, #0
 40c:	cmp	ip, #0
 410:	str	r1, [sp, #20]
 414:	bne	374 <coda_ascii_init_asciilines+0xa4>
 418:	ldr	r1, [sp, #24]
 41c:	ldr	r1, [r1, #16]
 420:	cmp	r1, #1
 424:	bhi	810 <coda_ascii_init_asciilines+0x540>
 428:	ldrd	r4, [sp, #8]
 42c:	ldrd	sl, [sp, #16]
 430:	adds	r0, r4, sl
 434:	adc	r1, r5, fp
 438:	cmp	r1, r3
 43c:	cmpeq	r0, r2
 440:	bhi	488 <coda_ascii_init_asciilines+0x1b8>
 444:	ldr	r0, [sp, #24]
 448:	mov	r3, r4
 44c:	mov	r2, sl
 450:	ldr	r1, [sp, #52]	; 0x34
 454:	ldr	r0, [r0, #56]	; 0x38
 458:	bl	0 <pread>
 45c:	cmp	r0, #0
 460:	bge	4b8 <coda_ascii_init_asciilines+0x1e8>
 464:	bl	0 <__errno_location>
 468:	ldr	r0, [r0]
 46c:	bl	0 <strerror>
 470:	ldr	r1, [pc, #944]	; 828 <coda_ascii_init_asciilines+0x558>
 474:	mov	r2, r0
 478:	mvn	r0, #21
 47c:	bl	0 <coda_set_error>
 480:	mvn	r0, #0
 484:	b	3ec <coda_ascii_init_asciilines+0x11c>
 488:	ldr	r1, [pc, #924]	; 82c <coda_ascii_init_asciilines+0x55c>
 48c:	mvn	r0, #300	; 0x12c
 490:	bl	0 <coda_set_error>
 494:	mvn	r0, #0
 498:	add	sp, sp, #4224	; 0x1080
 49c:	add	sp, sp, #12
 4a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
 4a4:	ldr	r3, [sp, #8]
 4a8:	ldr	r2, [sp, #16]
 4ac:	add	r1, ip, r3
 4b0:	ldr	r0, [sp, #52]	; 0x34
 4b4:	bl	0 <memcpy>
 4b8:	cmp	r7, #13
 4bc:	beq	714 <coda_ascii_init_asciilines+0x444>
 4c0:	ldrd	r2, [sp, #16]
 4c4:	cmp	r2, #1
 4c8:	sbcs	r3, r3, #0
 4cc:	blt	6b8 <coda_ascii_init_asciilines+0x3e8>
 4d0:	ldrd	r2, [sp, #16]
 4d4:	sub	r7, r7, #13
 4d8:	mov	r4, #0
 4dc:	subs	r2, r2, #1
 4e0:	sbc	r3, r3, #0
 4e4:	clz	r7, r7
 4e8:	ldr	sl, [sp, #44]	; 0x2c
 4ec:	ldr	fp, [sp, #48]	; 0x30
 4f0:	lsr	r7, r7, #5
 4f4:	strd	r2, [sp, #32]
 4f8:	mov	ip, r6
 4fc:	b	544 <coda_ascii_init_asciilines+0x274>
 500:	ldr	r3, [sp, #24]
 504:	ldrd	r0, [sp, #8]
 508:	ldrd	r2, [r3, #8]
 50c:	adds	r0, r0, sl
 510:	adc	r1, r1, fp
 514:	subs	r2, r2, #1
 518:	sbc	r3, r3, #0
 51c:	cmp	r1, r3
 520:	cmpeq	r0, r2
 524:	beq	584 <coda_ascii_init_asciilines+0x2b4>
 528:	add	r4, r4, #1
 52c:	mov	sl, r4
 530:	asr	fp, r4, #31
 534:	ldrd	r2, [sp, #16]
 538:	cmp	sl, r2
 53c:	sbcs	r3, fp, r3
 540:	bge	6b4 <coda_ascii_init_asciilines+0x3e4>
 544:	cmp	r4, #0
 548:	movne	r3, #0
 54c:	andeq	r3, r7, #1
 550:	cmp	r3, #0
 554:	beq	564 <coda_ascii_init_asciilines+0x294>
 558:	ldrb	r3, [sp, #132]	; 0x84
 55c:	cmp	r3, #10
 560:	beq	67c <coda_ascii_init_asciilines+0x3ac>
 564:	add	r3, sp, #136	; 0x88
 568:	add	r3, r3, r4
 56c:	ldrb	r5, [r3, #-4]
 570:	cmp	r5, #10
 574:	cmpne	r5, #13
 578:	moveq	r6, #1
 57c:	movne	r6, #0
 580:	bne	500 <coda_ascii_init_asciilines+0x230>
 584:	tst	r9, #15
 588:	beq	5c4 <coda_ascii_init_asciilines+0x2f4>
 58c:	ldr	r3, [sp, #8]
 590:	cmp	r5, #10
 594:	add	r3, r4, r3
 598:	add	r3, r3, #1
 59c:	str	r3, [r8, r9, lsl #2]
 5a0:	add	r9, r9, #1
 5a4:	beq	614 <coda_ascii_init_asciilines+0x344>
 5a8:	cmp	r6, #0
 5ac:	bne	5f0 <coda_ascii_init_asciilines+0x320>
 5b0:	add	r4, r4, #1
 5b4:	mov	sl, r4
 5b8:	asr	fp, r4, #31
 5bc:	mov	ip, #0
 5c0:	b	534 <coda_ascii_init_asciilines+0x264>
 5c4:	add	r2, r9, #16
 5c8:	mov	r0, r8
 5cc:	lsl	r2, r2, #2
 5d0:	mov	r1, r2
 5d4:	str	r2, [sp, #28]
 5d8:	bl	0 <realloc>
 5dc:	ldr	r2, [sp, #28]
 5e0:	cmp	r0, #0
 5e4:	beq	74c <coda_ascii_init_asciilines+0x47c>
 5e8:	mov	r8, r0
 5ec:	b	58c <coda_ascii_init_asciilines+0x2bc>
 5f0:	ldrd	r2, [sp, #32]
 5f4:	cmp	sl, r2
 5f8:	sbcs	r3, fp, r3
 5fc:	blt	63c <coda_ascii_init_asciilines+0x36c>
 600:	add	r4, r4, #1
 604:	mov	sl, r4
 608:	asr	fp, r4, #31
 60c:	mov	ip, #2
 610:	b	534 <coda_ascii_init_asciilines+0x264>
 614:	mov	r1, #1
 618:	ldr	r0, [sp, #40]	; 0x28
 61c:	bl	24 <verify_eol_type.isra.1>
 620:	cmp	r0, #0
 624:	bne	734 <coda_ascii_init_asciilines+0x464>
 628:	add	r4, r4, #1
 62c:	mov	sl, r4
 630:	asr	fp, r4, #31
 634:	mov	ip, #1
 638:	b	534 <coda_ascii_init_asciilines+0x264>
 63c:	add	r5, r4, #1
 640:	add	r3, sp, #136	; 0x88
 644:	add	r3, r3, r5
 648:	ldrb	r3, [r3, #-4]
 64c:	cmp	r3, #10
 650:	beq	6dc <coda_ascii_init_asciilines+0x40c>
 654:	mov	r1, #2
 658:	ldr	r0, [sp, #40]	; 0x28
 65c:	bl	24 <verify_eol_type.isra.1>
 660:	cmp	r0, #0
 664:	bne	734 <coda_ascii_init_asciilines+0x464>
 668:	mov	sl, r5
 66c:	asr	fp, r5, #31
 670:	mov	r4, r5
 674:	mov	ip, #2
 678:	b	534 <coda_ascii_init_asciilines+0x264>
 67c:	sub	r2, r9, #-1073741823	; 0xc0000001
 680:	mov	r1, #3
 684:	ldr	r3, [r8, r2, lsl #2]
 688:	ldr	r0, [sp, #40]	; 0x28
 68c:	add	r3, r3, #1
 690:	str	r3, [r8, r2, lsl #2]
 694:	bl	24 <verify_eol_type.isra.1>
 698:	cmp	r0, #0
 69c:	bne	734 <coda_ascii_init_asciilines+0x464>
 6a0:	mov	r4, #1
 6a4:	mov	sl, #1
 6a8:	mov	fp, #0
 6ac:	mov	ip, #3
 6b0:	b	534 <coda_ascii_init_asciilines+0x264>
 6b4:	mov	r6, ip
 6b8:	ldrd	r0, [sp, #16]
 6bc:	ldrd	r4, [sp, #8]
 6c0:	add	r3, sp, #136	; 0x88
 6c4:	add	r3, r3, r0
 6c8:	adds	r0, r0, r4
 6cc:	adc	r1, r1, r5
 6d0:	ldrb	r7, [r3, #-5]
 6d4:	strd	r0, [sp, #8]
 6d8:	b	330 <coda_ascii_init_asciilines+0x60>
 6dc:	mov	r1, #3
 6e0:	ldr	r0, [sp, #40]	; 0x28
 6e4:	bl	24 <verify_eol_type.isra.1>
 6e8:	cmp	r0, #0
 6ec:	bne	734 <coda_ascii_init_asciilines+0x464>
 6f0:	sub	r2, r9, #-1073741823	; 0xc0000001
 6f4:	add	r4, r4, #2
 6f8:	ldr	r3, [r8, r2, lsl #2]
 6fc:	mov	ip, #3
 700:	add	r3, r3, #1
 704:	str	r3, [r8, r2, lsl #2]
 708:	mov	sl, r4
 70c:	asr	fp, r4, #31
 710:	b	534 <coda_ascii_init_asciilines+0x264>
 714:	ldrb	r3, [sp, #132]	; 0x84
 718:	cmp	r3, #10
 71c:	beq	4c0 <coda_ascii_init_asciilines+0x1f0>
 720:	mov	r1, #2
 724:	ldr	r0, [sp, #40]	; 0x28
 728:	bl	24 <verify_eol_type.isra.1>
 72c:	cmp	r0, #0
 730:	beq	4c0 <coda_ascii_init_asciilines+0x1f0>
 734:	mov	r0, r8
 738:	bl	0 <free>
 73c:	mvn	r0, #0
 740:	add	sp, sp, #4224	; 0x1080
 744:	add	sp, sp, #12
 748:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
 74c:	mov	r3, #245	; 0xf5
 750:	str	r3, [sp]
 754:	ldr	r1, [pc, #212]	; 830 <coda_ascii_init_asciilines+0x560>
 758:	ldr	r3, [pc, #212]	; 834 <coda_ascii_init_asciilines+0x564>
 75c:	mvn	r0, #0
 760:	bl	0 <coda_set_error>
 764:	cmp	r8, #0
 768:	mov	sl, r8
 76c:	beq	7b8 <coda_ascii_init_asciilines+0x4e8>
 770:	mov	r0, sl
 774:	bl	0 <free>
 778:	mvn	r0, #0
 77c:	b	3ec <coda_ascii_init_asciilines+0x11c>
 780:	mov	r1, r2
 784:	ldr	r0, [r0, #56]	; 0x38
 788:	bl	0 <lseek>
 78c:	cmp	r0, #0
 790:	bge	2f8 <coda_ascii_init_asciilines+0x28>
 794:	bl	0 <__errno_location>
 798:	ldr	r0, [r0]
 79c:	bl	0 <strerror>
 7a0:	ldr	r1, [pc, #144]	; 838 <coda_ascii_init_asciilines+0x568>
 7a4:	mov	r2, r0
 7a8:	mvn	r0, #21
 7ac:	bl	0 <coda_set_error>
 7b0:	mov	r0, r4
 7b4:	b	3ec <coda_ascii_init_asciilines+0x11c>
 7b8:	mvn	r0, #0
 7bc:	b	3ec <coda_ascii_init_asciilines+0x11c>
 7c0:	cmp	r7, #13
 7c4:	mov	sl, r8
 7c8:	ldr	fp, [sp, #24]
 7cc:	beq	7e4 <coda_ascii_init_asciilines+0x514>
 7d0:	str	r9, [fp, #64]	; 0x40
 7d4:	str	sl, [fp, #68]	; 0x44
 7d8:	str	r6, [fp, #72]	; 0x48
 7dc:	mov	r0, #0
 7e0:	b	3ec <coda_ascii_init_asciilines+0x11c>
 7e4:	mov	r1, #2
 7e8:	add	r0, fp, #60	; 0x3c
 7ec:	bl	24 <verify_eol_type.isra.1>
 7f0:	cmp	r0, #0
 7f4:	beq	7d0 <coda_ascii_init_asciilines+0x500>
 7f8:	b	770 <coda_ascii_init_asciilines+0x4a0>
 7fc:	ldr	r3, [pc, #56]	; 83c <coda_ascii_init_asciilines+0x56c>
 800:	mov	r2, #185	; 0xb9
 804:	ldr	r1, [pc, #40]	; 834 <coda_ascii_init_asciilines+0x564>
 808:	ldr	r0, [pc, #48]	; 840 <coda_ascii_init_asciilines+0x570>
 80c:	bl	0 <__assert_fail>
 810:	ldr	r3, [pc, #44]	; 844 <coda_ascii_init_asciilines+0x574>
 814:	mov	r2, #83	; 0x53
 818:	ldr	r1, [pc, #40]	; 848 <coda_ascii_init_asciilines+0x578>
 81c:	ldr	r0, [pc, #40]	; 84c <coda_ascii_init_asciilines+0x57c>
 820:	bl	0 <__assert_fail>
 824:	.word	0x00000224
 828:	.word	0x00000300
 82c:	.word	0x000001f8
 830:	.word	0x00000138
 834:	.word	0x00000000
 838:	.word	0x000001d0
 83c:	.word	0x00000048
 840:	.word	0x000001ac
 844:	.word	0x00000064
 848:	.word	0x00000260
 84c:	.word	0x000002b0
