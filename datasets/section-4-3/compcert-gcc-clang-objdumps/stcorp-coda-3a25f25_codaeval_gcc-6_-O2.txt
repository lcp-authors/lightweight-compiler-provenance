
../compcert-repos/stcorp-coda-3a25f25/codaeval:     file format elf32-littlearm


Disassembly of section .init:

00010ca8 <.init>:
   10ca8:	push	{r3, lr}
   10cac:	bl	114ac <_start@@Base+0x3c>
   10cb0:	pop	{r3, pc}

Disassembly of section .plt:

00010cb4 <coda_match_filefilter@plt-0x14>:
   10cb4:	push	{lr}		; (str lr, [sp, #-4]!)
   10cb8:	ldr	lr, [pc, #4]	; 10cc4 <coda_match_filefilter@plt-0x4>
   10cbc:	add	lr, pc, lr
   10cc0:	ldr	pc, [lr, #8]!
   10cc4:	andeq	r2, r1, ip, lsr r3

00010cc8 <coda_match_filefilter@plt>:
   10cc8:	add	ip, pc, #0, 12
   10ccc:	add	ip, ip, #73728	; 0x12000
   10cd0:	ldr	pc, [ip, #828]!	; 0x33c

00010cd4 <coda_expression_eval_integer@plt>:
   10cd4:	add	ip, pc, #0, 12
   10cd8:	add	ip, ip, #73728	; 0x12000
   10cdc:	ldr	pc, [ip, #820]!	; 0x334

00010ce0 <strcmp@plt>:
   10ce0:	add	ip, pc, #0, 12
   10ce4:	add	ip, ip, #73728	; 0x12000
   10ce8:	ldr	pc, [ip, #812]!	; 0x32c

00010cec <printf@plt>:
   10cec:	add	ip, pc, #0, 12
   10cf0:	add	ip, ip, #73728	; 0x12000
   10cf4:	ldr	pc, [ip, #804]!	; 0x324

00010cf8 <coda_set_error@plt>:
   10cf8:	add	ip, pc, #0, 12
   10cfc:	add	ip, ip, #73728	; 0x12000
   10d00:	ldr	pc, [ip, #796]!	; 0x31c

00010d04 <coda_open@plt>:
   10d04:	add	ip, pc, #0, 12
   10d08:	add	ip, ip, #73728	; 0x12000
   10d0c:	ldr	pc, [ip, #788]!	; 0x314

00010d10 <free@plt>:
   10d10:	add	ip, pc, #0, 12
   10d14:	add	ip, ip, #73728	; 0x12000
   10d18:	ldr	pc, [ip, #780]!	; 0x30c

00010d1c <coda_set_definition_path_conditional@plt>:
   10d1c:	add	ip, pc, #0, 12
   10d20:	add	ip, ip, #73728	; 0x12000
   10d24:	ldr	pc, [ip, #772]!	; 0x304

00010d28 <coda_set_definition_path@plt>:
   10d28:	add	ip, pc, #0, 12
   10d2c:	add	ip, ip, #73728	; 0x12000
   10d30:	ldr	pc, [ip, #764]!	; 0x2fc

00010d34 <fwrite@plt>:
   10d34:	add	ip, pc, #0, 12
   10d38:	add	ip, ip, #73728	; 0x12000
   10d3c:	ldr	pc, [ip, #756]!	; 0x2f4

00010d40 <coda_expression_eval_bool@plt>:
   10d40:	add	ip, pc, #0, 12
   10d44:	add	ip, ip, #73728	; 0x12000
   10d48:	ldr	pc, [ip, #748]!	; 0x2ec

00010d4c <coda_cursor_set_product@plt>:
   10d4c:	add	ip, pc, #0, 12
   10d50:	add	ip, ip, #73728	; 0x12000
   10d54:	ldr	pc, [ip, #740]!	; 0x2e4

00010d58 <coda_done@plt>:
   10d58:	add	ip, pc, #0, 12
   10d5c:	add	ip, ip, #73728	; 0x12000
   10d60:	ldr	pc, [ip, #732]!	; 0x2dc

00010d64 <puts@plt>:
   10d64:	add	ip, pc, #0, 12
   10d68:	add	ip, ip, #73728	; 0x12000
   10d6c:	ldr	pc, [ip, #724]!	; 0x2d4

00010d70 <__libc_start_main@plt>:
   10d70:	add	ip, pc, #0, 12
   10d74:	add	ip, ip, #73728	; 0x12000
   10d78:	ldr	pc, [ip, #716]!	; 0x2cc

00010d7c <coda_expression_delete@plt>:
   10d7c:	add	ip, pc, #0, 12
   10d80:	add	ip, ip, #73728	; 0x12000
   10d84:	ldr	pc, [ip, #708]!	; 0x2c4

00010d88 <__gmon_start__@plt>:
   10d88:	add	ip, pc, #0, 12
   10d8c:	add	ip, ip, #73728	; 0x12000
   10d90:	ldr	pc, [ip, #700]!	; 0x2bc

00010d94 <__ctype_b_loc@plt>:
   10d94:	add	ip, pc, #0, 12
   10d98:	add	ip, ip, #73728	; 0x12000
   10d9c:	ldr	pc, [ip, #692]!	; 0x2b4

00010da0 <exit@plt>:
   10da0:	add	ip, pc, #0, 12
   10da4:	add	ip, ip, #73728	; 0x12000
   10da8:	ldr	pc, [ip, #684]!	; 0x2ac

00010dac <strlen@plt>:
   10dac:	add	ip, pc, #0, 12
   10db0:	add	ip, ip, #73728	; 0x12000
   10db4:	ldr	pc, [ip, #676]!	; 0x2a4

00010db8 <fprintf@plt>:
   10db8:	add	ip, pc, #0, 12
   10dbc:	add	ip, ip, #73728	; 0x12000
   10dc0:	ldr	pc, [ip, #668]!	; 0x29c

00010dc4 <coda_init@plt>:
   10dc4:	add	ip, pc, #0, 12
   10dc8:	add	ip, ip, #73728	; 0x12000
   10dcc:	ldr	pc, [ip, #660]!	; 0x294

00010dd0 <coda_set_option_perform_conversions@plt>:
   10dd0:	add	ip, pc, #0, 12
   10dd4:	add	ip, ip, #73728	; 0x12000
   10dd8:	ldr	pc, [ip, #652]!	; 0x28c

00010ddc <coda_expression_eval_string@plt>:
   10ddc:	add	ip, pc, #0, 12
   10de0:	add	ip, ip, #73728	; 0x12000
   10de4:	ldr	pc, [ip, #644]!	; 0x284

00010de8 <putchar@plt>:
   10de8:	add	ip, pc, #0, 12
   10dec:	add	ip, ip, #73728	; 0x12000
   10df0:	ldr	pc, [ip, #636]!	; 0x27c

00010df4 <coda_expression_get_type@plt>:
   10df4:	add	ip, pc, #0, 12
   10df8:	add	ip, ip, #73728	; 0x12000
   10dfc:	ldr	pc, [ip, #628]!	; 0x274

00010e00 <coda_close@plt>:
   10e00:	add	ip, pc, #0, 12
   10e04:	add	ip, ip, #73728	; 0x12000
   10e08:	ldr	pc, [ip, #620]!	; 0x26c

00010e0c <coda_expression_is_constant@plt>:
   10e0c:	add	ip, pc, #0, 12
   10e10:	add	ip, ip, #73728	; 0x12000
   10e14:	ldr	pc, [ip, #612]!	; 0x264

00010e18 <coda_expression_eval_float@plt>:
   10e18:	add	ip, pc, #0, 12
   10e1c:	add	ip, ip, #73728	; 0x12000
   10e20:	ldr	pc, [ip, #604]!	; 0x25c

00010e24 <coda_expression_eval_node@plt>:
   10e24:	add	ip, pc, #0, 12
   10e28:	add	ip, ip, #73728	; 0x12000
   10e2c:	ldr	pc, [ip, #596]!	; 0x254

00010e30 <coda_errno_to_string@plt>:
   10e30:	add	ip, pc, #0, 12
   10e34:	add	ip, ip, #73728	; 0x12000
   10e38:	ldr	pc, [ip, #588]!	; 0x24c

00010e3c <coda_expression_get_type_name@plt>:
   10e3c:	add	ip, pc, #0, 12
   10e40:	add	ip, ip, #73728	; 0x12000
   10e44:	ldr	pc, [ip, #580]!	; 0x244

00010e48 <coda_expression_from_string@plt>:
   10e48:	add	ip, pc, #0, 12
   10e4c:	add	ip, ip, #73728	; 0x12000
   10e50:	ldr	pc, [ip, #572]!	; 0x23c

00010e54 <coda_get_libcoda_version@plt>:
   10e54:	add	ip, pc, #0, 12
   10e58:	add	ip, ip, #73728	; 0x12000
   10e5c:	ldr	pc, [ip, #564]!	; 0x234

00010e60 <coda_get_errno@plt>:
   10e60:	add	ip, pc, #0, 12
   10e64:	add	ip, ip, #73728	; 0x12000
   10e68:	ldr	pc, [ip, #556]!	; 0x22c

00010e6c <abort@plt>:
   10e6c:	add	ip, pc, #0, 12
   10e70:	add	ip, ip, #73728	; 0x12000
   10e74:	ldr	pc, [ip, #548]!	; 0x224

00010e78 <coda_str64@plt>:
   10e78:	add	ip, pc, #0, 12
   10e7c:	add	ip, ip, #73728	; 0x12000
   10e80:	ldr	pc, [ip, #540]!	; 0x21c

00010e84 <__assert_fail@plt>:
   10e84:	add	ip, pc, #0, 12
   10e88:	add	ip, ip, #73728	; 0x12000
   10e8c:	ldr	pc, [ip, #532]!	; 0x214

Disassembly of section .text:

00010e90 <main@@Base-0x1b8>:
   10e90:	push	{r4, lr}
   10e94:	ldr	r0, [pc, #300]	; 10fc8 <__assert_fail@plt+0x144>
   10e98:	bl	10d64 <puts@plt>
   10e9c:	ldr	r0, [pc, #296]	; 10fcc <__assert_fail@plt+0x148>
   10ea0:	bl	10d64 <puts@plt>
   10ea4:	ldr	r0, [pc, #292]	; 10fd0 <__assert_fail@plt+0x14c>
   10ea8:	bl	10d64 <puts@plt>
   10eac:	ldr	r0, [pc, #288]	; 10fd4 <__assert_fail@plt+0x150>
   10eb0:	bl	10d64 <puts@plt>
   10eb4:	ldr	r0, [pc, #284]	; 10fd8 <__assert_fail@plt+0x154>
   10eb8:	bl	10d64 <puts@plt>
   10ebc:	ldr	r0, [pc, #280]	; 10fdc <__assert_fail@plt+0x158>
   10ec0:	bl	10d64 <puts@plt>
   10ec4:	ldr	r0, [pc, #276]	; 10fe0 <__assert_fail@plt+0x15c>
   10ec8:	bl	10d64 <puts@plt>
   10ecc:	mov	r0, #10
   10ed0:	bl	10de8 <putchar@plt>
   10ed4:	ldr	r0, [pc, #264]	; 10fe4 <__assert_fail@plt+0x160>
   10ed8:	bl	10d64 <puts@plt>
   10edc:	ldr	r0, [pc, #260]	; 10fe8 <__assert_fail@plt+0x164>
   10ee0:	bl	10d64 <puts@plt>
   10ee4:	ldr	r0, [pc, #256]	; 10fec <__assert_fail@plt+0x168>
   10ee8:	bl	10d64 <puts@plt>
   10eec:	ldr	r0, [pc, #252]	; 10ff0 <__assert_fail@plt+0x16c>
   10ef0:	bl	10d64 <puts@plt>
   10ef4:	ldr	r0, [pc, #248]	; 10ff4 <__assert_fail@plt+0x170>
   10ef8:	bl	10d64 <puts@plt>
   10efc:	ldr	r0, [pc, #244]	; 10ff8 <__assert_fail@plt+0x174>
   10f00:	bl	10d64 <puts@plt>
   10f04:	ldr	r0, [pc, #240]	; 10ffc <__assert_fail@plt+0x178>
   10f08:	bl	10d64 <puts@plt>
   10f0c:	ldr	r0, [pc, #236]	; 11000 <__assert_fail@plt+0x17c>
   10f10:	bl	10d64 <puts@plt>
   10f14:	ldr	r0, [pc, #232]	; 11004 <__assert_fail@plt+0x180>
   10f18:	bl	10d64 <puts@plt>
   10f1c:	ldr	r0, [pc, #228]	; 11008 <__assert_fail@plt+0x184>
   10f20:	bl	10d64 <puts@plt>
   10f24:	ldr	r0, [pc, #224]	; 1100c <__assert_fail@plt+0x188>
   10f28:	bl	10d64 <puts@plt>
   10f2c:	ldr	r0, [pc, #220]	; 11010 <__assert_fail@plt+0x18c>
   10f30:	bl	10d64 <puts@plt>
   10f34:	mov	r0, #10
   10f38:	bl	10de8 <putchar@plt>
   10f3c:	ldr	r0, [pc, #208]	; 11014 <__assert_fail@plt+0x190>
   10f40:	bl	10d64 <puts@plt>
   10f44:	ldr	r0, [pc, #204]	; 11018 <__assert_fail@plt+0x194>
   10f48:	bl	10d64 <puts@plt>
   10f4c:	mov	r0, #10
   10f50:	bl	10de8 <putchar@plt>
   10f54:	ldr	r0, [pc, #192]	; 1101c <__assert_fail@plt+0x198>
   10f58:	bl	10d64 <puts@plt>
   10f5c:	ldr	r0, [pc, #188]	; 11020 <__assert_fail@plt+0x19c>
   10f60:	bl	10d64 <puts@plt>
   10f64:	mov	r0, #10
   10f68:	bl	10de8 <putchar@plt>
   10f6c:	ldr	r0, [pc, #176]	; 11024 <__assert_fail@plt+0x1a0>
   10f70:	bl	10d64 <puts@plt>
   10f74:	ldr	r0, [pc, #172]	; 11028 <__assert_fail@plt+0x1a4>
   10f78:	bl	10d64 <puts@plt>
   10f7c:	mov	r0, #10
   10f80:	bl	10de8 <putchar@plt>
   10f84:	ldr	r0, [pc, #160]	; 1102c <__assert_fail@plt+0x1a8>
   10f88:	bl	10d64 <puts@plt>
   10f8c:	ldr	r0, [pc, #156]	; 11030 <__assert_fail@plt+0x1ac>
   10f90:	bl	10d64 <puts@plt>
   10f94:	ldr	r0, [pc, #152]	; 11034 <__assert_fail@plt+0x1b0>
   10f98:	bl	10d64 <puts@plt>
   10f9c:	ldr	r0, [pc, #148]	; 11038 <__assert_fail@plt+0x1b4>
   10fa0:	bl	10d64 <puts@plt>
   10fa4:	ldr	r0, [pc, #144]	; 1103c <__assert_fail@plt+0x1b8>
   10fa8:	bl	10d64 <puts@plt>
   10fac:	ldr	r0, [pc, #140]	; 11040 <__assert_fail@plt+0x1bc>
   10fb0:	bl	10d64 <puts@plt>
   10fb4:	ldr	r0, [pc, #136]	; 11044 <__assert_fail@plt+0x1c0>
   10fb8:	bl	10d64 <puts@plt>
   10fbc:	mov	r0, #10
   10fc0:	pop	{r4, lr}
   10fc4:	b	10de8 <putchar@plt>
   10fc8:	andeq	r1, r1, r0, asr ip
   10fcc:	andeq	r1, r1, r8, asr ip
   10fd0:	andeq	r1, r1, r8, lsr #25
   10fd4:	strdeq	r1, [r1], -r8
   10fd8:	andeq	r1, r1, ip, lsl sp
   10fdc:	andeq	r1, r1, r8, ror #26
   10fe0:			; <UNDEFINED> instruction: 0x00011db4
   10fe4:	andeq	r1, r1, r4, ror #27
   10fe8:	strdeq	r1, [r1], -r8
   10fec:	andeq	r1, r1, r0, lsl lr
   10ff0:	andeq	r1, r1, r0, ror #28
   10ff4:			; <UNDEFINED> instruction: 0x00011eb0
   10ff8:	ldrdeq	r1, [r1], -r8
   10ffc:	andeq	r1, r1, r4, lsl pc
   11000:	andeq	r1, r1, ip, lsr #30
   11004:	andeq	r1, r1, r8, ror pc
   11008:	andeq	r1, r1, r4, asr #31
   1100c:	andeq	r1, r1, r4, ror #31
   11010:	andeq	r2, r1, r0, lsr r0
   11014:	andeq	r2, r1, r0, rrx
   11018:	strheq	r2, [r1], -r0
   1101c:	andeq	r2, r1, r8, asr #1
   11020:	andeq	r2, r1, r0, ror #1
   11024:	andeq	r2, r1, r0, lsl #2
   11028:	andeq	r2, r1, ip, lsl r1
   1102c:	andeq	r2, r1, r0, asr r1
   11030:	muleq	r1, ip, r1
   11034:	andeq	r2, r1, r8, ror #3
   11038:	andeq	r2, r1, r8, lsl r2
   1103c:	andeq	r2, r1, r4, ror #4
   11040:			; <UNDEFINED> instruction: 0x000122b0
   11044:	strdeq	r2, [r1], -r0

00011048 <main@@Base>:
   11048:	cmp	r0, #1
   1104c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11050:	sub	sp, sp, #20
   11054:	beq	11374 <main@@Base+0x32c>
   11058:	ldr	r4, [r1, #4]
   1105c:	mov	r6, r0
   11060:	mov	r7, r1
   11064:	mov	r0, r4
   11068:	ldr	r1, [pc, #928]	; 11410 <main@@Base+0x3c8>
   1106c:	bl	10ce0 <strcmp@plt>
   11070:	cmp	r0, #0
   11074:	beq	11374 <main@@Base+0x32c>
   11078:	ldr	r1, [pc, #916]	; 11414 <main@@Base+0x3cc>
   1107c:	mov	r0, r4
   11080:	bl	10ce0 <strcmp@plt>
   11084:	cmp	r0, #0
   11088:	beq	11374 <main@@Base+0x32c>
   1108c:	ldr	r1, [pc, #900]	; 11418 <main@@Base+0x3d0>
   11090:	mov	r0, r4
   11094:	bl	10ce0 <strcmp@plt>
   11098:	cmp	r0, #0
   1109c:	beq	11320 <main@@Base+0x2d8>
   110a0:	ldr	r1, [pc, #884]	; 1141c <main@@Base+0x3d4>
   110a4:	mov	r0, r4
   110a8:	bl	10ce0 <strcmp@plt>
   110ac:	cmp	r0, #0
   110b0:	beq	11320 <main@@Base+0x2d8>
   110b4:	cmp	r6, #2
   110b8:	ble	110d0 <main@@Base+0x88>
   110bc:	mov	r0, r4
   110c0:	ldr	r1, [pc, #856]	; 11420 <main@@Base+0x3d8>
   110c4:	bl	10ce0 <strcmp@plt>
   110c8:	cmp	r0, #0
   110cc:	beq	111fc <main@@Base+0x1b4>
   110d0:	ldr	r2, [pc, #844]	; 11424 <main@@Base+0x3dc>
   110d4:	mov	r1, #0
   110d8:	ldr	r0, [r7]
   110dc:	bl	10d1c <coda_set_definition_path_conditional@plt>
   110e0:	cmp	r0, #0
   110e4:	moveq	fp, #1
   110e8:	bne	11348 <main@@Base+0x300>
   110ec:	cmp	r6, fp
   110f0:	ble	111d0 <main@@Base+0x188>
   110f4:	mov	r3, #1
   110f8:	ldr	r8, [pc, #808]	; 11428 <main@@Base+0x3e0>
   110fc:	ldr	sl, [pc, #808]	; 1142c <main@@Base+0x3e4>
   11100:	mov	r9, #0
   11104:	str	r3, [sp, #8]
   11108:	b	111a4 <main@@Base+0x15c>
   1110c:	mov	r1, sl
   11110:	mov	r0, r4
   11114:	bl	10ce0 <strcmp@plt>
   11118:	cmp	r0, #0
   1111c:	beq	111c0 <main@@Base+0x178>
   11120:	ldr	r1, [pc, #776]	; 11430 <main@@Base+0x3e8>
   11124:	mov	r0, r4
   11128:	bl	10ce0 <strcmp@plt>
   1112c:	cmp	r0, #0
   11130:	beq	111f4 <main@@Base+0x1ac>
   11134:	ldr	r1, [pc, #760]	; 11434 <main@@Base+0x3ec>
   11138:	mov	r0, r4
   1113c:	bl	10ce0 <strcmp@plt>
   11140:	cmp	r0, #0
   11144:	beq	111f4 <main@@Base+0x1ac>
   11148:	ldr	r1, [pc, #744]	; 11438 <main@@Base+0x3f0>
   1114c:	mov	r0, r4
   11150:	bl	10ce0 <strcmp@plt>
   11154:	cmp	r0, #0
   11158:	bne	1120c <main@@Base+0x1c4>
   1115c:	add	r2, fp, #1
   11160:	cmp	r6, r2
   11164:	str	r2, [sp, #12]
   11168:	ble	1120c <main@@Base+0x1c4>
   1116c:	add	r5, r7, r5
   11170:	ldr	r0, [r5, #4]
   11174:	ldrb	r1, [r0]
   11178:	cmp	r1, #45	; 0x2d
   1117c:	beq	1120c <main@@Base+0x1c4>
   11180:	ldr	r1, [pc, #692]	; 1143c <main@@Base+0x3f4>
   11184:	bl	10e48 <coda_expression_from_string@plt>
   11188:	ldr	r2, [sp, #12]
   1118c:	cmp	r0, #0
   11190:	bne	11380 <main@@Base+0x338>
   11194:	mov	fp, r2
   11198:	add	fp, fp, #1
   1119c:	cmp	r6, fp
   111a0:	ble	111d0 <main@@Base+0x188>
   111a4:	ldr	r4, [r7, fp, lsl #2]
   111a8:	mov	r1, r8
   111ac:	mov	r0, r4
   111b0:	bl	10ce0 <strcmp@plt>
   111b4:	lsl	r5, fp, #2
   111b8:	cmp	r0, #0
   111bc:	bne	1110c <main@@Base+0xc4>
   111c0:	add	fp, fp, #1
   111c4:	cmp	r6, fp
   111c8:	mov	r9, #1
   111cc:	bgt	111a4 <main@@Base+0x15c>
   111d0:	ldr	r3, [pc, #616]	; 11440 <main@@Base+0x3f8>
   111d4:	mov	r2, #25
   111d8:	mov	r1, #1
   111dc:	ldr	r3, [r3]
   111e0:	ldr	r0, [pc, #604]	; 11444 <main@@Base+0x3fc>
   111e4:	bl	10d34 <fwrite@plt>
   111e8:	bl	10e90 <__assert_fail@plt+0xc>
   111ec:	mov	r0, #1
   111f0:	bl	10da0 <exit@plt>
   111f4:	str	r0, [sp, #8]
   111f8:	b	11198 <main@@Base+0x150>
   111fc:	ldr	r0, [r7, #8]
   11200:	bl	10d28 <coda_set_definition_path@plt>
   11204:	mov	fp, #3
   11208:	b	110ec <main@@Base+0xa4>
   1120c:	ldrb	r2, [r4]
   11210:	cmp	r2, #45	; 0x2d
   11214:	beq	111d0 <main@@Base+0x188>
   11218:	ldr	r5, [pc, #552]	; 11448 <main@@Base+0x400>
   1121c:	mov	r0, r4
   11220:	add	r1, r5, #4
   11224:	bl	10e48 <coda_expression_from_string@plt>
   11228:	cmp	r0, #0
   1122c:	bne	112f4 <main@@Base+0x2ac>
   11230:	mov	r1, r5
   11234:	ldr	r0, [r5, #4]
   11238:	bl	10df4 <coda_expression_get_type@plt>
   1123c:	cmp	r0, #0
   11240:	bne	11348 <main@@Base+0x300>
   11244:	ldr	r0, [r5]
   11248:	sub	r2, r0, #4
   1124c:	cmp	r2, #1
   11250:	bls	113ec <main@@Base+0x3a4>
   11254:	cmp	r9, #0
   11258:	bne	11294 <main@@Base+0x24c>
   1125c:	add	fp, fp, #1
   11260:	cmp	r6, fp
   11264:	bgt	112b8 <main@@Base+0x270>
   11268:	ldr	r3, [r5, #8]
   1126c:	cmp	r3, #0
   11270:	bne	113cc <main@@Base+0x384>
   11274:	ldr	r0, [r5, #4]
   11278:	bl	10e0c <coda_expression_is_constant@plt>
   1127c:	cmp	r0, #0
   11280:	beq	113ac <main@@Base+0x364>
   11284:	mov	r0, r9
   11288:	bl	11598 <_start@@Base+0x128>
   1128c:	cmp	r0, #0
   11290:	bne	11348 <main@@Base+0x300>
   11294:	ldr	r0, [r5, #4]
   11298:	bl	10d7c <coda_expression_delete@plt>
   1129c:	ldr	r0, [r5, #8]
   112a0:	cmp	r0, #0
   112a4:	beq	112ac <main@@Base+0x264>
   112a8:	bl	10d7c <coda_expression_delete@plt>
   112ac:	mov	r0, #0
   112b0:	add	sp, sp, #20
   112b4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   112b8:	bl	10dc4 <coda_init@plt>
   112bc:	cmp	r0, #0
   112c0:	bne	11348 <main@@Base+0x300>
   112c4:	ldr	r0, [sp, #8]
   112c8:	bl	10dd0 <coda_set_option_perform_conversions@plt>
   112cc:	str	r9, [sp]
   112d0:	add	r2, r7, fp, lsl #2
   112d4:	sub	r1, r6, fp
   112d8:	mov	r0, r9
   112dc:	ldr	r3, [pc, #360]	; 1144c <main@@Base+0x404>
   112e0:	bl	10cc8 <coda_match_filefilter@plt>
   112e4:	cmp	r0, #0
   112e8:	bne	11348 <main@@Base+0x300>
   112ec:	bl	10d58 <coda_done@plt>
   112f0:	b	11294 <main@@Base+0x24c>
   112f4:	ldr	r3, [pc, #324]	; 11440 <main@@Base+0x3f8>
   112f8:	ldr	r4, [r3]
   112fc:	bl	10e60 <coda_get_errno@plt>
   11300:	ldr	r0, [r0]
   11304:	bl	10e30 <coda_errno_to_string@plt>
   11308:	ldr	r1, [pc, #320]	; 11450 <main@@Base+0x408>
   1130c:	mov	r2, r0
   11310:	mov	r0, r4
   11314:	bl	10db8 <fprintf@plt>
   11318:	mov	r0, #1
   1131c:	bl	10da0 <exit@plt>
   11320:	bl	10e54 <coda_get_libcoda_version@plt>
   11324:	mov	r1, r0
   11328:	ldr	r0, [pc, #292]	; 11454 <main@@Base+0x40c>
   1132c:	bl	10cec <printf@plt>
   11330:	ldr	r0, [pc, #288]	; 11458 <main@@Base+0x410>
   11334:	bl	10d64 <puts@plt>
   11338:	mov	r0, #10
   1133c:	bl	10de8 <putchar@plt>
   11340:	mov	r0, #0
   11344:	bl	10da0 <exit@plt>
   11348:	ldr	r3, [pc, #240]	; 11440 <main@@Base+0x3f8>
   1134c:	ldr	r4, [r3]
   11350:	bl	10e60 <coda_get_errno@plt>
   11354:	ldr	r0, [r0]
   11358:	bl	10e30 <coda_errno_to_string@plt>
   1135c:	ldr	r1, [pc, #248]	; 1145c <main@@Base+0x414>
   11360:	mov	r2, r0
   11364:	mov	r0, r4
   11368:	bl	10db8 <fprintf@plt>
   1136c:	mov	r0, #1
   11370:	bl	10da0 <exit@plt>
   11374:	bl	10e90 <__assert_fail@plt+0xc>
   11378:	mov	r0, #0
   1137c:	bl	10da0 <exit@plt>
   11380:	ldr	r3, [pc, #184]	; 11440 <main@@Base+0x3f8>
   11384:	ldr	r4, [r3]
   11388:	bl	10e60 <coda_get_errno@plt>
   1138c:	ldr	r0, [r0]
   11390:	bl	10e30 <coda_errno_to_string@plt>
   11394:	ldr	r1, [pc, #196]	; 11460 <main@@Base+0x418>
   11398:	mov	r2, r0
   1139c:	mov	r0, r4
   113a0:	bl	10db8 <fprintf@plt>
   113a4:	mov	r0, #1
   113a8:	bl	10da0 <exit@plt>
   113ac:	ldr	r3, [pc, #140]	; 11440 <main@@Base+0x3f8>
   113b0:	mov	r2, #111	; 0x6f
   113b4:	mov	r1, #1
   113b8:	ldr	r3, [r3]
   113bc:	ldr	r0, [pc, #160]	; 11464 <main@@Base+0x41c>
   113c0:	bl	10d34 <fwrite@plt>
   113c4:	mov	r0, #1
   113c8:	bl	10da0 <exit@plt>
   113cc:	ldr	r3, [pc, #108]	; 11440 <main@@Base+0x3f8>
   113d0:	mov	r2, #96	; 0x60
   113d4:	mov	r1, #1
   113d8:	ldr	r3, [r3]
   113dc:	ldr	r0, [pc, #132]	; 11468 <main@@Base+0x420>
   113e0:	bl	10d34 <fwrite@plt>
   113e4:	mov	r0, #1
   113e8:	bl	10da0 <exit@plt>
   113ec:	ldr	r3, [pc, #76]	; 11440 <main@@Base+0x3f8>
   113f0:	ldr	r4, [r3]
   113f4:	bl	10e3c <coda_expression_get_type_name@plt>
   113f8:	ldr	r1, [pc, #108]	; 1146c <main@@Base+0x424>
   113fc:	mov	r2, r0
   11400:	mov	r0, r4
   11404:	bl	10db8 <fprintf@plt>
   11408:	mov	r0, #1
   1140c:	bl	10da0 <exit@plt>
   11410:	andeq	r2, r1, r4, lsl #10
   11414:	ldrdeq	r2, [r1], -r8
   11418:	andeq	r2, r1, r8, lsl #10
   1141c:	andeq	r2, r1, ip, lsl #10
   11420:	andeq	r2, r1, r8, asr r5
   11424:	andeq	r2, r1, ip, asr r5
   11428:	andeq	r2, r1, r4, lsl #11
   1142c:	andeq	r1, r1, r8, lsl #28
   11430:	andeq	r2, r1, r8, lsl #11
   11434:	andeq	r1, r1, r0, asr #29
   11438:	andeq	r2, r1, ip, lsl #11
   1143c:	andeq	r3, r2, r0, asr #1
   11440:	strheq	r3, [r2], -r0
   11444:			; <UNDEFINED> instruction: 0x000125b8
   11448:	strheq	r3, [r2], -r8
   1144c:	andeq	r1, r1, r8, lsr fp
   11450:	ldrdeq	r2, [r1], -r4
   11454:	andeq	r2, r1, r8, lsl r5
   11458:	andeq	r2, r1, r8, lsr #10
   1145c:	andeq	r2, r1, r8, ror r5
   11460:	muleq	r1, r0, r5
   11464:	andeq	r2, r1, r8, lsl #13
   11468:	andeq	r2, r1, r4, lsr #12
   1146c:	strdeq	r2, [r1], -r4

00011470 <_start@@Base>:
   11470:	mov	fp, #0
   11474:	mov	lr, #0
   11478:	pop	{r1}		; (ldr r1, [sp], #4)
   1147c:	mov	r2, sp
   11480:	push	{r2}		; (str r2, [sp, #-4]!)
   11484:	push	{r0}		; (str r0, [sp, #-4]!)
   11488:	ldr	ip, [pc, #16]	; 114a0 <_start@@Base+0x30>
   1148c:	push	{ip}		; (str ip, [sp, #-4]!)
   11490:	ldr	r0, [pc, #12]	; 114a4 <_start@@Base+0x34>
   11494:	ldr	r3, [pc, #12]	; 114a8 <_start@@Base+0x38>
   11498:	bl	10d70 <__libc_start_main@plt>
   1149c:	bl	10e6c <abort@plt>
   114a0:	andeq	r1, r1, r0, lsr ip
   114a4:	andeq	r1, r1, r8, asr #32
   114a8:	ldrdeq	r1, [r1], -r0
   114ac:	ldr	r3, [pc, #20]	; 114c8 <_start@@Base+0x58>
   114b0:	ldr	r2, [pc, #20]	; 114cc <_start@@Base+0x5c>
   114b4:	add	r3, pc, r3
   114b8:	ldr	r2, [r3, r2]
   114bc:	cmp	r2, #0
   114c0:	bxeq	lr
   114c4:	b	10d88 <__gmon_start__@plt>
   114c8:	andeq	r1, r1, r4, asr #22
   114cc:	andeq	r0, r0, r4, lsr #1
   114d0:	ldr	r3, [pc, #28]	; 114f4 <_start@@Base+0x84>
   114d4:	ldr	r0, [pc, #28]	; 114f8 <_start@@Base+0x88>
   114d8:	sub	r3, r3, r0
   114dc:	cmp	r3, #6
   114e0:	bxls	lr
   114e4:	ldr	r3, [pc, #16]	; 114fc <_start@@Base+0x8c>
   114e8:	cmp	r3, #0
   114ec:	bxeq	lr
   114f0:	bx	r3
   114f4:	strheq	r3, [r2], -r3	; <UNPREDICTABLE>
   114f8:	strheq	r3, [r2], -r0
   114fc:	andeq	r0, r0, r0
   11500:	ldr	r1, [pc, #36]	; 1152c <_start@@Base+0xbc>
   11504:	ldr	r0, [pc, #36]	; 11530 <_start@@Base+0xc0>
   11508:	sub	r1, r1, r0
   1150c:	asr	r1, r1, #2
   11510:	add	r1, r1, r1, lsr #31
   11514:	asrs	r1, r1, #1
   11518:	bxeq	lr
   1151c:	ldr	r3, [pc, #16]	; 11534 <_start@@Base+0xc4>
   11520:	cmp	r3, #0
   11524:	bxeq	lr
   11528:	bx	r3
   1152c:	strheq	r3, [r2], -r0
   11530:	strheq	r3, [r2], -r0
   11534:	andeq	r0, r0, r0
   11538:	push	{r4, lr}
   1153c:	ldr	r4, [pc, #24]	; 1155c <_start@@Base+0xec>
   11540:	ldrb	r3, [r4]
   11544:	cmp	r3, #0
   11548:	popne	{r4, pc}
   1154c:	bl	114d0 <_start@@Base+0x60>
   11550:	mov	r3, #1
   11554:	strb	r3, [r4]
   11558:	pop	{r4, pc}
   1155c:	strheq	r3, [r2], -r4
   11560:	ldr	r0, [pc, #40]	; 11590 <_start@@Base+0x120>
   11564:	ldr	r3, [r0]
   11568:	cmp	r3, #0
   1156c:	bne	11574 <_start@@Base+0x104>
   11570:	b	11500 <_start@@Base+0x90>
   11574:	ldr	r3, [pc, #24]	; 11594 <_start@@Base+0x124>
   11578:	cmp	r3, #0
   1157c:	beq	11570 <_start@@Base+0x100>
   11580:	push	{r4, lr}
   11584:	blx	r3
   11588:	pop	{r4, lr}
   1158c:	b	11500 <_start@@Base+0x90>
   11590:	strdeq	r2, [r2], -ip
   11594:	andeq	r0, r0, r0
   11598:	ldr	r2, [pc, #1072]	; 119d0 <_start@@Base+0x560>
   1159c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   115a0:	sub	sp, sp, #44	; 0x2c
   115a4:	ldr	r3, [r2]
   115a8:	cmp	r3, #5
   115ac:	ldrls	pc, [pc, r3, lsl #2]
   115b0:	b	119c8 <_start@@Base+0x558>
   115b4:	andeq	r1, r1, r0, ror #11
   115b8:	andeq	r1, r1, r0, lsr #12
   115bc:	andeq	r1, r1, r8, asr r6
   115c0:	andeq	r1, r1, r8, lsl #13
   115c4:	andeq	r1, r1, ip, asr #11
   115c8:	andeq	r1, r1, ip, asr #11
   115cc:	ldr	r3, [pc, #1024]	; 119d4 <_start@@Base+0x564>
   115d0:	mov	r2, #230	; 0xe6
   115d4:	ldr	r1, [pc, #1020]	; 119d8 <_start@@Base+0x568>
   115d8:	ldr	r0, [pc, #1020]	; 119dc <_start@@Base+0x56c>
   115dc:	bl	10e84 <__assert_fail@plt>
   115e0:	mov	r1, r0
   115e4:	ldr	r0, [r2, #4]
   115e8:	add	r2, sp, #16
   115ec:	bl	10d40 <coda_expression_eval_bool@plt>
   115f0:	subs	r5, r0, #0
   115f4:	bne	119a4 <_start@@Base+0x534>
   115f8:	ldr	r0, [sp, #16]
   115fc:	ldr	r2, [pc, #988]	; 119e0 <_start@@Base+0x570>
   11600:	ldr	r3, [pc, #988]	; 119e4 <_start@@Base+0x574>
   11604:	cmp	r0, #0
   11608:	movne	r0, r2
   1160c:	moveq	r0, r3
   11610:	bl	10d64 <puts@plt>
   11614:	mov	r0, r5
   11618:	add	sp, sp, #44	; 0x2c
   1161c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11620:	mov	r1, r0
   11624:	ldr	r0, [r2, #4]
   11628:	add	r2, sp, #8
   1162c:	bl	10cd4 <coda_expression_eval_integer@plt>
   11630:	subs	r5, r0, #0
   11634:	bne	11980 <_start@@Base+0x510>
   11638:	ldrd	r0, [sp, #8]
   1163c:	add	r2, sp, #16
   11640:	bl	10e78 <coda_str64@plt>
   11644:	add	r0, sp, #16
   11648:	bl	10d64 <puts@plt>
   1164c:	mov	r0, r5
   11650:	add	sp, sp, #44	; 0x2c
   11654:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11658:	mov	r1, r0
   1165c:	ldr	r0, [r2, #4]
   11660:	add	r2, sp, #16
   11664:	bl	10e18 <coda_expression_eval_float@plt>
   11668:	subs	r5, r0, #0
   1166c:	bne	1195c <_start@@Base+0x4ec>
   11670:	ldrd	r2, [sp, #16]
   11674:	ldr	r0, [pc, #876]	; 119e8 <_start@@Base+0x578>
   11678:	bl	10cec <printf@plt>
   1167c:	mov	r0, r5
   11680:	add	sp, sp, #44	; 0x2c
   11684:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11688:	mov	r1, r0
   1168c:	mov	ip, #0
   11690:	ldr	r0, [r2, #4]
   11694:	add	r3, sp, #16
   11698:	add	r2, sp, #8
   1169c:	str	ip, [sp, #8]
   116a0:	bl	10ddc <coda_expression_eval_string@plt>
   116a4:	subs	r5, r0, #0
   116a8:	bne	11938 <_start@@Base+0x4c8>
   116ac:	ldr	fp, [sp, #8]
   116b0:	ldr	r0, [sp, #16]
   116b4:	cmp	fp, #0
   116b8:	cmpne	r0, #0
   116bc:	beq	1185c <_start@@Base+0x3ec>
   116c0:	cmp	r0, #0
   116c4:	blt	11924 <_start@@Base+0x4b4>
   116c8:	ldr	sl, [pc, #796]	; 119ec <_start@@Base+0x57c>
   116cc:	ldr	r9, [pc, #796]	; 119f0 <_start@@Base+0x580>
   116d0:	ldr	r8, [pc, #796]	; 119f4 <_start@@Base+0x584>
   116d4:	ldr	r7, [pc, #796]	; 119f8 <_start@@Base+0x588>
   116d8:	ldr	r6, [pc, #796]	; 119fc <_start@@Base+0x58c>
   116dc:	add	r4, fp, r0
   116e0:	ldrb	r1, [fp], #1
   116e4:	sub	r2, r1, #7
   116e8:	cmp	r2, #85	; 0x55
   116ec:	ldrls	pc, [pc, r2, lsl #2]
   116f0:	b	118ec <_start@@Base+0x47c>
   116f4:	andeq	r1, r1, r0, ror #17
   116f8:	ldrdeq	r1, [r1], -r4
   116fc:	andeq	r1, r1, r8, asr #17
   11700:			; <UNDEFINED> instruction: 0x000118bc
   11704:			; <UNDEFINED> instruction: 0x000118b0
   11708:	andeq	r1, r1, r4, lsr #17
   1170c:	muleq	r1, r8, r8
   11710:	andeq	r1, r1, ip, ror #17
   11714:	andeq	r1, r1, ip, ror #17
   11718:	andeq	r1, r1, ip, ror #17
   1171c:	andeq	r1, r1, ip, ror #17
   11720:	andeq	r1, r1, ip, ror #17
   11724:	andeq	r1, r1, ip, ror #17
   11728:	andeq	r1, r1, ip, ror #17
   1172c:	andeq	r1, r1, ip, ror #17
   11730:	andeq	r1, r1, ip, ror #17
   11734:	andeq	r1, r1, ip, ror #17
   11738:	andeq	r1, r1, ip, ror #17
   1173c:	andeq	r1, r1, ip, ror #17
   11740:	andeq	r1, r1, ip, ror #17
   11744:	andeq	r1, r1, ip, lsl #17
   11748:	andeq	r1, r1, ip, ror #17
   1174c:	andeq	r1, r1, ip, ror #17
   11750:	andeq	r1, r1, ip, ror #17
   11754:	andeq	r1, r1, ip, ror #17
   11758:	andeq	r1, r1, ip, ror #17
   1175c:	andeq	r1, r1, ip, ror #17
   11760:	andeq	r1, r1, r0, lsl #17
   11764:	andeq	r1, r1, ip, ror #17
   11768:	andeq	r1, r1, ip, ror #17
   1176c:	andeq	r1, r1, ip, ror #17
   11770:	andeq	r1, r1, ip, ror #17
   11774:	andeq	r1, r1, ip, ror #17
   11778:	andeq	r1, r1, ip, ror #17
   1177c:	andeq	r1, r1, ip, ror #17
   11780:	andeq	r1, r1, ip, ror #17
   11784:	andeq	r1, r1, ip, ror #17
   11788:	andeq	r1, r1, ip, ror #17
   1178c:	andeq	r1, r1, ip, ror #17
   11790:	andeq	r1, r1, ip, ror #17
   11794:	andeq	r1, r1, ip, ror #17
   11798:	andeq	r1, r1, ip, ror #17
   1179c:	andeq	r1, r1, ip, ror #17
   117a0:	andeq	r1, r1, ip, ror #17
   117a4:	andeq	r1, r1, ip, ror #17
   117a8:	andeq	r1, r1, ip, ror #17
   117ac:	andeq	r1, r1, ip, ror #17
   117b0:	andeq	r1, r1, ip, ror #17
   117b4:	andeq	r1, r1, ip, ror #17
   117b8:	andeq	r1, r1, ip, ror #17
   117bc:	andeq	r1, r1, ip, ror #17
   117c0:	andeq	r1, r1, ip, ror #17
   117c4:	andeq	r1, r1, ip, ror #17
   117c8:	andeq	r1, r1, ip, ror #17
   117cc:	andeq	r1, r1, ip, ror #17
   117d0:	andeq	r1, r1, ip, ror #17
   117d4:	andeq	r1, r1, ip, ror #17
   117d8:	andeq	r1, r1, ip, ror #17
   117dc:	andeq	r1, r1, ip, ror #17
   117e0:	andeq	r1, r1, ip, ror #17
   117e4:	andeq	r1, r1, ip, ror #17
   117e8:	andeq	r1, r1, ip, ror #17
   117ec:	andeq	r1, r1, ip, ror #17
   117f0:	andeq	r1, r1, ip, ror #17
   117f4:	andeq	r1, r1, ip, ror #17
   117f8:	andeq	r1, r1, ip, ror #17
   117fc:	andeq	r1, r1, ip, ror #17
   11800:	andeq	r1, r1, ip, ror #17
   11804:	andeq	r1, r1, ip, ror #17
   11808:	andeq	r1, r1, ip, ror #17
   1180c:	andeq	r1, r1, ip, ror #17
   11810:	andeq	r1, r1, ip, ror #17
   11814:	andeq	r1, r1, ip, ror #17
   11818:	andeq	r1, r1, ip, ror #17
   1181c:	andeq	r1, r1, ip, ror #17
   11820:	andeq	r1, r1, ip, ror #17
   11824:	andeq	r1, r1, ip, ror #17
   11828:	andeq	r1, r1, ip, ror #17
   1182c:	andeq	r1, r1, ip, ror #17
   11830:	andeq	r1, r1, ip, ror #17
   11834:	andeq	r1, r1, ip, ror #17
   11838:	andeq	r1, r1, ip, ror #17
   1183c:	andeq	r1, r1, ip, ror #17
   11840:	andeq	r1, r1, ip, ror #17
   11844:	andeq	r1, r1, ip, ror #17
   11848:	andeq	r1, r1, ip, asr #16
   1184c:	mov	r0, r9
   11850:	bl	10cec <printf@plt>
   11854:	cmp	r4, fp
   11858:	bne	116e0 <_start@@Base+0x270>
   1185c:	mov	r0, #10
   11860:	bl	10de8 <putchar@plt>
   11864:	ldr	r0, [sp, #8]
   11868:	cmp	r0, #0
   1186c:	beq	11614 <_start@@Base+0x1a4>
   11870:	bl	10d10 <free@plt>
   11874:	mov	r0, r5
   11878:	add	sp, sp, #44	; 0x2c
   1187c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11880:	mov	r0, sl
   11884:	bl	10cec <printf@plt>
   11888:	b	11854 <_start@@Base+0x3e4>
   1188c:	ldr	r0, [pc, #364]	; 11a00 <_start@@Base+0x590>
   11890:	bl	10cec <printf@plt>
   11894:	b	11854 <_start@@Base+0x3e4>
   11898:	mov	r0, r6
   1189c:	bl	10cec <printf@plt>
   118a0:	b	11854 <_start@@Base+0x3e4>
   118a4:	ldr	r0, [pc, #344]	; 11a04 <_start@@Base+0x594>
   118a8:	bl	10cec <printf@plt>
   118ac:	b	11854 <_start@@Base+0x3e4>
   118b0:	mov	r0, r8
   118b4:	bl	10cec <printf@plt>
   118b8:	b	11854 <_start@@Base+0x3e4>
   118bc:	ldr	r0, [pc, #324]	; 11a08 <_start@@Base+0x598>
   118c0:	bl	10cec <printf@plt>
   118c4:	b	11854 <_start@@Base+0x3e4>
   118c8:	mov	r0, r7
   118cc:	bl	10cec <printf@plt>
   118d0:	b	11854 <_start@@Base+0x3e4>
   118d4:	ldr	r0, [pc, #304]	; 11a0c <_start@@Base+0x59c>
   118d8:	bl	10cec <printf@plt>
   118dc:	b	11854 <_start@@Base+0x3e4>
   118e0:	ldr	r0, [pc, #296]	; 11a10 <_start@@Base+0x5a0>
   118e4:	bl	10cec <printf@plt>
   118e8:	b	11854 <_start@@Base+0x3e4>
   118ec:	str	r1, [sp, #4]
   118f0:	bl	10d94 <__ctype_b_loc@plt>
   118f4:	ldr	r1, [sp, #4]
   118f8:	lsl	r2, r1, #1
   118fc:	ldr	r0, [r0]
   11900:	ldrh	r2, [r0, r2]
   11904:	tst	r2, #16384	; 0x4000
   11908:	bne	11918 <_start@@Base+0x4a8>
   1190c:	ldr	r0, [pc, #256]	; 11a14 <_start@@Base+0x5a4>
   11910:	bl	10cec <printf@plt>
   11914:	b	11854 <_start@@Base+0x3e4>
   11918:	mov	r0, r1
   1191c:	bl	10de8 <putchar@plt>
   11920:	b	11854 <_start@@Base+0x3e4>
   11924:	mov	r0, fp
   11928:	bl	10dac <strlen@plt>
   1192c:	cmp	r0, #0
   11930:	bgt	116c8 <_start@@Base+0x258>
   11934:	b	1185c <_start@@Base+0x3ec>
   11938:	bl	10e60 <coda_get_errno@plt>
   1193c:	mvn	r5, #0
   11940:	ldr	r0, [r0]
   11944:	bl	10e30 <coda_errno_to_string@plt>
   11948:	ldr	r1, [pc, #200]	; 11a18 <_start@@Base+0x5a8>
   1194c:	mov	r2, r0
   11950:	mvn	r0, #400	; 0x190
   11954:	bl	10cf8 <coda_set_error@plt>
   11958:	b	11614 <_start@@Base+0x1a4>
   1195c:	bl	10e60 <coda_get_errno@plt>
   11960:	mvn	r5, #0
   11964:	ldr	r0, [r0]
   11968:	bl	10e30 <coda_errno_to_string@plt>
   1196c:	ldr	r1, [pc, #168]	; 11a1c <_start@@Base+0x5ac>
   11970:	mov	r2, r0
   11974:	mvn	r0, #400	; 0x190
   11978:	bl	10cf8 <coda_set_error@plt>
   1197c:	b	11614 <_start@@Base+0x1a4>
   11980:	bl	10e60 <coda_get_errno@plt>
   11984:	mvn	r5, #0
   11988:	ldr	r0, [r0]
   1198c:	bl	10e30 <coda_errno_to_string@plt>
   11990:	ldr	r1, [pc, #136]	; 11a20 <_start@@Base+0x5b0>
   11994:	mov	r2, r0
   11998:	mvn	r0, #400	; 0x190
   1199c:	bl	10cf8 <coda_set_error@plt>
   119a0:	b	11614 <_start@@Base+0x1a4>
   119a4:	bl	10e60 <coda_get_errno@plt>
   119a8:	mvn	r5, #0
   119ac:	ldr	r0, [r0]
   119b0:	bl	10e30 <coda_errno_to_string@plt>
   119b4:	ldr	r1, [pc, #104]	; 11a24 <_start@@Base+0x5b4>
   119b8:	mov	r2, r0
   119bc:	mvn	r0, #400	; 0x190
   119c0:	bl	10cf8 <coda_set_error@plt>
   119c4:	b	11614 <_start@@Base+0x1a4>
   119c8:	mov	r5, #0
   119cc:	b	11614 <_start@@Base+0x1a4>
   119d0:	strheq	r3, [r2], -r8
   119d4:	andeq	r1, r1, r0, asr #24
   119d8:	andeq	r2, r1, r0, lsr #8
   119dc:	andeq	r2, r1, r0, ror r4
   119e0:	andeq	r2, r1, r0, lsr r3
   119e4:	andeq	r2, r1, r8, lsr r3
   119e8:	andeq	r2, r1, r0, asr #7
   119ec:	andeq	r2, r1, r4, lsl r4
   119f0:	andeq	r2, r1, r0, lsl r4
   119f4:	andeq	r2, r1, ip, lsl #8
   119f8:	andeq	r2, r1, r8, lsl #8
   119fc:	andeq	r2, r1, r4, lsl #8
   11a00:	strdeq	r2, [r1], -r0
   11a04:	strdeq	r2, [r1], -ip
   11a08:	andeq	r2, r1, r0, lsl #8
   11a0c:	strdeq	r2, [r1], -r8
   11a10:	strdeq	r2, [r1], -r4
   11a14:	andeq	r2, r1, r8, lsl r4
   11a18:	andeq	r2, r1, r8, asr #7
   11a1c:	muleq	r1, r0, r3
   11a20:	andeq	r2, r1, r8, ror #6
   11a24:	andeq	r2, r1, r0, asr #6
   11a28:	push	{r4, r5, lr}
   11a2c:	sub	sp, sp, #532	; 0x214
   11a30:	add	r1, sp, #528	; 0x210
   11a34:	mov	r3, #0
   11a38:	str	r3, [r1, #-524]!	; 0xfffffdf4
   11a3c:	mov	r5, r0
   11a40:	bl	10d04 <coda_open@plt>
   11a44:	cmp	r0, #0
   11a48:	movne	r4, #1
   11a4c:	beq	11a5c <_start@@Base+0x5ec>
   11a50:	mov	r0, r4
   11a54:	add	sp, sp, #532	; 0x214
   11a58:	pop	{r4, r5, pc}
   11a5c:	add	r0, sp, #8
   11a60:	ldr	r1, [sp, #4]
   11a64:	bl	10d4c <coda_cursor_set_product@plt>
   11a68:	subs	r4, r0, #0
   11a6c:	bne	11ae8 <_start@@Base+0x678>
   11a70:	ldr	r3, [pc, #176]	; 11b28 <_start@@Base+0x6b8>
   11a74:	ldr	r0, [r3, #8]
   11a78:	cmp	r0, #0
   11a7c:	beq	11a90 <_start@@Base+0x620>
   11a80:	add	r1, sp, #8
   11a84:	bl	10e24 <coda_expression_eval_node@plt>
   11a88:	cmp	r0, #0
   11a8c:	bne	11af8 <_start@@Base+0x688>
   11a90:	add	r0, sp, #8
   11a94:	bl	11598 <_start@@Base+0x128>
   11a98:	cmp	r0, #0
   11a9c:	bne	11abc <_start@@Base+0x64c>
   11aa0:	ldr	r0, [sp, #4]
   11aa4:	bl	10e00 <coda_close@plt>
   11aa8:	adds	r4, r0, #0
   11aac:	movne	r4, #1
   11ab0:	mov	r0, r4
   11ab4:	add	sp, sp, #532	; 0x214
   11ab8:	pop	{r4, r5, pc}
   11abc:	ldr	r3, [pc, #104]	; 11b2c <_start@@Base+0x6bc>
   11ac0:	ldr	r4, [r3]
   11ac4:	bl	10e60 <coda_get_errno@plt>
   11ac8:	ldr	r0, [r0]
   11acc:	bl	10e30 <coda_errno_to_string@plt>
   11ad0:	mov	r3, r5
   11ad4:	ldr	r1, [pc, #84]	; 11b30 <_start@@Base+0x6c0>
   11ad8:	mov	r2, r0
   11adc:	mov	r0, r4
   11ae0:	bl	10db8 <fprintf@plt>
   11ae4:	b	11aa0 <_start@@Base+0x630>
   11ae8:	ldr	r0, [sp, #4]
   11aec:	bl	10e00 <coda_close@plt>
   11af0:	mov	r4, #1
   11af4:	b	11a50 <_start@@Base+0x5e0>
   11af8:	ldr	r3, [pc, #44]	; 11b2c <_start@@Base+0x6bc>
   11afc:	ldr	r5, [r3]
   11b00:	bl	10e60 <coda_get_errno@plt>
   11b04:	ldr	r0, [r0]
   11b08:	bl	10e30 <coda_errno_to_string@plt>
   11b0c:	ldr	r1, [pc, #32]	; 11b34 <_start@@Base+0x6c4>
   11b10:	mov	r2, r0
   11b14:	mov	r0, r5
   11b18:	bl	10db8 <fprintf@plt>
   11b1c:	ldr	r0, [sp, #4]
   11b20:	bl	10e00 <coda_close@plt>
   11b24:	b	11a50 <_start@@Base+0x5e0>
   11b28:	strheq	r3, [r2], -r8
   11b2c:	strheq	r3, [r2], -r0
   11b30:	andeq	r2, r1, r4, lsr #9
   11b34:	andeq	r2, r1, r4, ror r4

00011b38 <callback@@Base>:
   11b38:	push	{r4, lr}
   11b3c:	subs	r4, r1, #0
   11b40:	mov	r1, r0
   11b44:	beq	11b68 <callback@@Base+0x30>
   11b48:	cmp	r4, #2
   11b4c:	beq	11b8c <callback@@Base+0x54>
   11b50:	cmp	r4, #1
   11b54:	beq	11ba4 <callback@@Base+0x6c>
   11b58:	cmp	r4, #4
   11b5c:	beq	11b84 <callback@@Base+0x4c>
   11b60:	mov	r0, #0
   11b64:	pop	{r4, pc}
   11b68:	ldr	r0, [pc, #80]	; 11bc0 <callback@@Base+0x88>
   11b6c:	mov	r3, r1
   11b70:	ldr	r1, [pc, #76]	; 11bc4 <callback@@Base+0x8c>
   11b74:	ldr	r0, [r0]
   11b78:	bl	10db8 <fprintf@plt>
   11b7c:	mov	r0, r4
   11b80:	pop	{r4, pc}
   11b84:	pop	{r4, lr}
   11b88:	b	11a28 <_start@@Base+0x5b8>
   11b8c:	ldr	r3, [pc, #44]	; 11bc0 <callback@@Base+0x88>
   11b90:	mov	r2, r0
   11b94:	ldr	r1, [pc, #44]	; 11bc8 <callback@@Base+0x90>
   11b98:	ldr	r0, [r3]
   11b9c:	bl	10db8 <fprintf@plt>
   11ba0:	b	11b60 <callback@@Base+0x28>
   11ba4:	ldr	r0, [pc, #20]	; 11bc0 <callback@@Base+0x88>
   11ba8:	mov	r3, r2
   11bac:	mov	r2, r1
   11bb0:	ldr	r0, [r0]
   11bb4:	ldr	r1, [pc, #16]	; 11bcc <callback@@Base+0x94>
   11bb8:	bl	10db8 <fprintf@plt>
   11bbc:	b	11b60 <callback@@Base+0x28>
   11bc0:	strheq	r3, [r2], -r0
   11bc4:	andeq	r2, r1, r4, lsr #9
   11bc8:			; <UNDEFINED> instruction: 0x000124b8
   11bcc:	andeq	r2, r1, r0, ror #9

00011bd0 <__libc_csu_init@@Base>:
   11bd0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   11bd4:	mov	r7, r0
   11bd8:	ldr	r6, [pc, #72]	; 11c28 <__libc_csu_init@@Base+0x58>
   11bdc:	ldr	r5, [pc, #72]	; 11c2c <__libc_csu_init@@Base+0x5c>
   11be0:	add	r6, pc, r6
   11be4:	add	r5, pc, r5
   11be8:	sub	r6, r6, r5
   11bec:	mov	r8, r1
   11bf0:	mov	r9, r2
   11bf4:	bl	10ca8 <coda_match_filefilter@plt-0x20>
   11bf8:	asrs	r6, r6, #2
   11bfc:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   11c00:	mov	r4, #0
   11c04:	add	r4, r4, #1
   11c08:	ldr	r3, [r5], #4
   11c0c:	mov	r2, r9
   11c10:	mov	r1, r8
   11c14:	mov	r0, r7
   11c18:	blx	r3
   11c1c:	cmp	r6, r4
   11c20:	bne	11c04 <__libc_csu_init@@Base+0x34>
   11c24:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   11c28:	andeq	r1, r1, r0, lsl r3
   11c2c:	andeq	r1, r1, r8, lsl #6

00011c30 <__libc_csu_fini@@Base>:
   11c30:	bx	lr

Disassembly of section .fini:

00011c34 <.fini>:
   11c34:	push	{r3, lr}
   11c38:	pop	{r3, pc}
