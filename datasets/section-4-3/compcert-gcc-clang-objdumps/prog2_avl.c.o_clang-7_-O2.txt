
../compcert-repos/prog2/CMakeFiles/MT2E1-1.dir/Extras/Miniteste2-Exemplo1/prob1/avl.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <avl_nova>:
   0:	push	{fp, lr}
   4:	mov	fp, sp
   8:	mov	r0, #4
   c:	bl	0 <malloc>
  10:	cmp	r0, #0
  14:	moveq	r0, #0
  18:	movne	r1, #0
  1c:	strne	r1, [r0]
  20:	pop	{fp, pc}

00000024 <avl_apaga>:
  24:	cmp	r0, #0
  28:	bxeq	lr
  2c:	push	{r4, sl, fp, lr}
  30:	add	fp, sp, #8
  34:	mov	r4, r0
  38:	ldr	r0, [r0]
  3c:	cmp	r0, #0
  40:	beq	58 <avl_apaga+0x34>
  44:	ldr	r1, [r0]
  48:	bl	64 <avl_remove_impl>
  4c:	str	r0, [r4]
  50:	cmp	r0, #0
  54:	bne	44 <avl_apaga+0x20>
  58:	mov	r0, r4
  5c:	pop	{r4, sl, fp, lr}
  60:	b	0 <free>

00000064 <avl_remove_impl>:
  64:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
  68:	add	fp, sp, #24
  6c:	mov	r8, #0
  70:	cmp	r0, #0
  74:	beq	410 <avl_remove_impl+0x3ac>
  78:	ldr	r6, [r0]
  7c:	mov	r5, r0
  80:	mov	r7, r1
  84:	mov	r0, r1
  88:	mov	r1, r6
  8c:	bl	0 <strcmp>
  90:	mov	r4, r5
  94:	cmn	r0, #1
  98:	bgt	a4 <avl_remove_impl+0x40>
  9c:	ldr	r0, [r4, #4]!
  a0:	b	b0 <avl_remove_impl+0x4c>
  a4:	cmp	r0, #0
  a8:	beq	2f8 <avl_remove_impl+0x294>
  ac:	ldr	r0, [r4, #8]!
  b0:	mov	r1, r7
  b4:	bl	64 <avl_remove_impl>
  b8:	str	r0, [r4]
  bc:	ldr	r1, [r5, #4]
  c0:	ldr	r2, [r5, #8]
  c4:	cmp	r1, #0
  c8:	ldrne	r0, [r1, #12]
  cc:	mvneq	r0, #0
  d0:	cmp	r2, #0
  d4:	beq	f8 <avl_remove_impl+0x94>
  d8:	ldr	r3, [r2, #12]
  dc:	cmp	r0, r3
  e0:	movgt	r3, r0
  e4:	mov	r0, r5
  e8:	add	r3, r3, #1
  ec:	str	r3, [r0, #12]!
  f0:	ldr	r3, [r2, #12]
  f4:	b	10c <avl_remove_impl+0xa8>
  f8:	orr	r0, r0, r0, asr #31
  fc:	add	r3, r0, #1
 100:	mov	r0, r5
 104:	str	r3, [r0, #12]!
 108:	mvn	r3, #0
 10c:	cmp	r1, #0
 110:	ldrne	r7, [r1, #12]
 114:	mvneq	r7, #0
 118:	sub	r3, r3, r7
 11c:	cmp	r3, #2
 120:	blt	204 <avl_remove_impl+0x1a0>
 124:	cmp	r2, #0
 128:	beq	34c <avl_remove_impl+0x2e8>
 12c:	ldr	r1, [r2, #8]
 130:	mvn	r7, #0
 134:	mvn	r3, #0
 138:	cmp	r1, #0
 13c:	ldrne	r7, [r1, #12]
 140:	mov	r1, r2
 144:	ldr	r8, [r1, #4]!
 148:	cmp	r8, #0
 14c:	ldrne	r3, [r8, #12]
 150:	cmp	r7, r3
 154:	bge	354 <avl_remove_impl+0x2f0>
 158:	ldr	r7, [r8, #8]
 15c:	str	r2, [r8, #8]
 160:	mvn	r3, #0
 164:	mvn	r1, #0
 168:	str	r7, [r2, #4]
 16c:	cmp	r7, #0
 170:	ldrne	r3, [r7, #12]
 174:	ldr	r7, [r2, #8]
 178:	cmp	r7, #0
 17c:	ldrne	r1, [r7, #12]
 180:	mvn	r7, #0
 184:	cmp	r3, r1
 188:	movgt	r1, r3
 18c:	add	r3, r1, #1
 190:	mvn	r1, #0
 194:	str	r3, [r2, #12]
 198:	ldr	r2, [r8, #4]
 19c:	cmp	r2, #0
 1a0:	ldrne	r7, [r2, #12]
 1a4:	str	r5, [r8, #4]
 1a8:	cmp	r7, r3
 1ac:	movgt	r3, r7
 1b0:	mvn	r7, #0
 1b4:	add	r3, r3, #1
 1b8:	str	r3, [r8, #12]
 1bc:	str	r2, [r5, #8]
 1c0:	ldr	r3, [r5, #4]
 1c4:	cmp	r3, #0
 1c8:	ldrne	r1, [r3, #12]
 1cc:	cmp	r2, #0
 1d0:	mvn	r3, #0
 1d4:	ldrne	r7, [r2, #12]
 1d8:	cmp	r1, r7
 1dc:	movgt	r7, r1
 1e0:	add	r1, r7, #1
 1e4:	str	r1, [r0]
 1e8:	ldr	r0, [r8, #8]
 1ec:	cmp	r0, #0
 1f0:	ldrne	r3, [r0, #12]
 1f4:	cmp	r1, r3
 1f8:	movgt	r3, r1
 1fc:	add	r0, r3, #1
 200:	b	2ec <avl_remove_impl+0x288>
 204:	cmn	r3, #2
 208:	movgt	r0, r5
 20c:	popgt	{r4, r5, r6, r7, r8, sl, fp, pc}
 210:	cmp	r1, #0
 214:	beq	3b0 <avl_remove_impl+0x34c>
 218:	mov	r2, r1
 21c:	ldr	r6, [r1, #4]
 220:	mvn	r7, #0
 224:	mvn	r3, #0
 228:	ldr	r8, [r2, #8]!
 22c:	cmp	r8, #0
 230:	ldrne	r7, [r8, #12]
 234:	cmp	r6, #0
 238:	ldrne	r3, [r6, #12]
 23c:	cmp	r7, r3
 240:	ble	3b8 <avl_remove_impl+0x354>
 244:	ldr	r3, [r8, #4]
 248:	str	r1, [r8, #4]
 24c:	mvn	r7, #0
 250:	mvn	r2, #0
 254:	str	r3, [r1, #8]
 258:	ldr	r6, [r1, #4]
 25c:	cmp	r6, #0
 260:	ldrne	r7, [r6, #12]
 264:	cmp	r3, #0
 268:	ldrne	r2, [r3, #12]
 26c:	cmp	r7, r2
 270:	movgt	r2, r7
 274:	mvn	r7, #0
 278:	add	r3, r2, #1
 27c:	str	r3, [r1, #12]
 280:	mvn	r1, #0
 284:	ldr	r2, [r8, #8]
 288:	cmp	r2, #0
 28c:	ldrne	r7, [r2, #12]
 290:	str	r5, [r8, #8]
 294:	cmp	r3, r7
 298:	movgt	r7, r3
 29c:	cmp	r2, #0
 2a0:	add	r3, r7, #1
 2a4:	str	r3, [r8, #12]
 2a8:	str	r2, [r5, #4]
 2ac:	mvn	r3, #0
 2b0:	ldr	r7, [r5, #8]
 2b4:	ldrne	r1, [r2, #12]
 2b8:	mvn	r2, #0
 2bc:	cmp	r7, #0
 2c0:	ldrne	r3, [r7, #12]
 2c4:	cmp	r1, r3
 2c8:	movgt	r3, r1
 2cc:	add	r1, r3, #1
 2d0:	str	r1, [r0]
 2d4:	ldr	r0, [r8, #4]
 2d8:	cmp	r0, #0
 2dc:	ldrne	r2, [r0, #12]
 2e0:	cmp	r2, r1
 2e4:	movgt	r1, r2
 2e8:	add	r0, r1, #1
 2ec:	str	r0, [r8, #12]
 2f0:	mov	r0, r8
 2f4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
 2f8:	ldr	r0, [r4, #8]!
 2fc:	ldr	r7, [r4, #-4]
 300:	cmp	r7, #0
 304:	beq	418 <avl_remove_impl+0x3b4>
 308:	cmp	r0, #0
 30c:	beq	424 <avl_remove_impl+0x3c0>
 310:	mov	r7, r0
 314:	ldr	r0, [r0, #4]
 318:	cmp	r0, #0
 31c:	bne	310 <avl_remove_impl+0x2ac>
 320:	ldr	r0, [r7]
 324:	bl	0 <strlen>
 328:	add	r1, r0, #1
 32c:	mov	r0, r6
 330:	bl	0 <realloc>
 334:	str	r0, [r5]
 338:	ldr	r1, [r7]
 33c:	bl	0 <strcpy>
 340:	ldr	r0, [r5, #8]
 344:	ldr	r1, [r7]
 348:	b	b4 <avl_remove_impl+0x50>
 34c:	mov	r1, #4
 350:	ldr	r8, [r1]
 354:	str	r5, [r1]
 358:	str	r8, [r5, #8]
 35c:	mvn	r3, #0
 360:	mvn	r1, #0
 364:	ldr	r7, [r5, #4]
 368:	cmp	r7, #0
 36c:	ldrne	r3, [r7, #12]
 370:	cmp	r8, #0
 374:	ldrne	r1, [r8, #12]
 378:	cmp	r3, r1
 37c:	movgt	r1, r3
 380:	add	r1, r1, #1
 384:	str	r1, [r0]
 388:	ldr	r0, [r2, #8]
 38c:	cmp	r0, #0
 390:	ldrne	r0, [r0, #12]
 394:	mvneq	r0, #0
 398:	cmp	r1, r0
 39c:	movgt	r0, r1
 3a0:	add	r0, r0, #1
 3a4:	str	r0, [r2, #12]
 3a8:	mov	r0, r2
 3ac:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
 3b0:	mov	r2, #8
 3b4:	ldr	r8, [r2]
 3b8:	str	r5, [r2]
 3bc:	str	r8, [r5, #4]
 3c0:	cmp	r8, #0
 3c4:	mvn	r3, #0
 3c8:	mvn	r2, #0
 3cc:	ldr	r7, [r5, #8]
 3d0:	ldrne	r3, [r8, #12]
 3d4:	mov	r8, r1
 3d8:	cmp	r7, #0
 3dc:	ldrne	r2, [r7, #12]
 3e0:	cmp	r3, r2
 3e4:	movgt	r2, r3
 3e8:	add	r2, r2, #1
 3ec:	str	r2, [r0]
 3f0:	ldr	r0, [r1, #4]
 3f4:	cmp	r0, #0
 3f8:	ldrne	r0, [r0, #12]
 3fc:	mvneq	r0, #0
 400:	cmp	r0, r2
 404:	movgt	r2, r0
 408:	add	r0, r2, #1
 40c:	str	r0, [r1, #12]
 410:	mov	r0, r8
 414:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
 418:	cmp	r0, #0
 41c:	mov	r7, r0
 420:	beq	464 <avl_remove_impl+0x400>
 424:	ldr	r0, [r7]
 428:	bl	0 <strlen>
 42c:	add	r1, r0, #1
 430:	mov	r0, r6
 434:	bl	0 <realloc>
 438:	str	r0, [r5]
 43c:	ldr	r1, [r7]
 440:	bl	0 <strcpy>
 444:	ldr	r0, [r7, #4]
 448:	str	r0, [r5, #4]
 44c:	ldr	r0, [r7, #8]
 450:	str	r0, [r5, #8]
 454:	ldr	r0, [r7, #12]
 458:	str	r0, [r5, #12]
 45c:	ldr	r6, [r7]
 460:	b	46c <avl_remove_impl+0x408>
 464:	mov	r7, r5
 468:	mov	r5, #0
 46c:	mov	r0, r6
 470:	bl	0 <free>
 474:	mov	r0, r7
 478:	bl	0 <free>
 47c:	cmp	r5, #0
 480:	bne	bc <avl_remove_impl+0x58>
 484:	b	410 <avl_remove_impl+0x3ac>

00000488 <avl_pesquisa>:
 488:	push	{r4, r5, r6, sl, fp, lr}
 48c:	add	fp, sp, #16
 490:	cmp	r0, #0
 494:	mov	r4, #0
 498:	movne	r5, r1
 49c:	cmpne	r1, #0
 4a0:	beq	4e0 <avl_pesquisa+0x58>
 4a4:	b	4ac <avl_pesquisa+0x24>
 4a8:	add	r0, r6, #4
 4ac:	ldr	r6, [r0]
 4b0:	cmp	r6, #0
 4b4:	beq	4e0 <avl_pesquisa+0x58>
 4b8:	ldr	r1, [r6]
 4bc:	mov	r0, r5
 4c0:	bl	0 <strcmp>
 4c4:	cmn	r0, #1
 4c8:	ble	4a8 <avl_pesquisa+0x20>
 4cc:	cmp	r0, #0
 4d0:	beq	4dc <avl_pesquisa+0x54>
 4d4:	add	r0, r6, #8
 4d8:	b	4ac <avl_pesquisa+0x24>
 4dc:	mov	r4, r6
 4e0:	mov	r0, r4
 4e4:	pop	{r4, r5, r6, sl, fp, pc}

000004e8 <avl_pesquisa_impl>:
 4e8:	push	{r4, r5, r6, sl, fp, lr}
 4ec:	add	fp, sp, #16
 4f0:	mov	r4, #0
 4f4:	cmp	r0, #0
 4f8:	beq	538 <avl_pesquisa_impl+0x50>
 4fc:	mov	r5, r1
 500:	mov	r6, r0
 504:	ldr	r1, [r6]
 508:	mov	r0, r5
 50c:	bl	0 <strcmp>
 510:	cmn	r0, #1
 514:	bgt	520 <avl_pesquisa_impl+0x38>
 518:	add	r0, r6, #4
 51c:	b	52c <avl_pesquisa_impl+0x44>
 520:	cmp	r0, #0
 524:	beq	540 <avl_pesquisa_impl+0x58>
 528:	add	r0, r6, #8
 52c:	ldr	r6, [r0]
 530:	cmp	r6, #0
 534:	bne	504 <avl_pesquisa_impl+0x1c>
 538:	mov	r0, r4
 53c:	pop	{r4, r5, r6, sl, fp, pc}
 540:	mov	r4, r6
 544:	mov	r0, r4
 548:	pop	{r4, r5, r6, sl, fp, pc}

0000054c <avl_insere>:
 54c:	push	{r4, sl, fp, lr}
 550:	add	fp, sp, #8
 554:	mov	r4, r0
 558:	mvn	r0, #0
 55c:	cmp	r4, #0
 560:	cmpne	r1, #0
 564:	bne	56c <avl_insere+0x20>
 568:	pop	{r4, sl, fp, pc}
 56c:	ldr	r0, [r4]
 570:	bl	580 <avl_insere_impl>
 574:	str	r0, [r4]
 578:	mov	r0, #0
 57c:	pop	{r4, sl, fp, pc}

00000580 <avl_insere_impl>:
 580:	push	{r4, r5, r6, sl, fp, lr}
 584:	add	fp, sp, #16
 588:	mov	r6, r1
 58c:	cmp	r0, #0
 590:	beq	5c0 <avl_insere_impl+0x40>
 594:	ldr	r1, [r0]
 598:	mov	r4, r0
 59c:	mov	r0, r6
 5a0:	bl	0 <strcmp>
 5a4:	cmn	r0, #1
 5a8:	bgt	600 <avl_insere_impl+0x80>
 5ac:	ldr	r0, [r4, #4]
 5b0:	mov	r1, r6
 5b4:	bl	580 <avl_insere_impl>
 5b8:	str	r0, [r4, #4]
 5bc:	b	61c <avl_insere_impl+0x9c>
 5c0:	mov	r0, #16
 5c4:	bl	0 <malloc>
 5c8:	mov	r5, r0
 5cc:	mov	r0, r6
 5d0:	bl	0 <strlen>
 5d4:	add	r0, r0, #1
 5d8:	bl	0 <malloc>
 5dc:	mov	r1, r6
 5e0:	str	r0, [r5]
 5e4:	bl	0 <strcpy>
 5e8:	mov	r0, #0
 5ec:	str	r0, [r5, #4]
 5f0:	str	r0, [r5, #8]
 5f4:	str	r0, [r5, #12]
 5f8:	mov	r0, r5
 5fc:	pop	{r4, r5, r6, sl, fp, pc}
 600:	cmp	r0, #0
 604:	beq	848 <avl_insere_impl+0x2c8>
 608:	ldr	r0, [r4, #8]
 60c:	mov	r1, r6
 610:	bl	580 <avl_insere_impl>
 614:	str	r0, [r4, #8]
 618:	ldr	r0, [r4, #4]
 61c:	cmp	r0, #0
 620:	ldr	r2, [r4, #8]
 624:	ldrne	r1, [r0, #12]
 628:	mvneq	r1, #0
 62c:	cmp	r2, #0
 630:	beq	654 <avl_insere_impl+0xd4>
 634:	ldr	r3, [r2, #12]
 638:	cmp	r1, r3
 63c:	movgt	r3, r1
 640:	mov	r1, r4
 644:	add	r3, r3, #1
 648:	str	r3, [r1, #12]!
 64c:	ldr	r3, [r2, #12]
 650:	b	668 <avl_insere_impl+0xe8>
 654:	orr	r1, r1, r1, asr #31
 658:	add	r3, r1, #1
 65c:	mov	r1, r4
 660:	str	r3, [r1, #12]!
 664:	mvn	r3, #0
 668:	cmp	r0, #0
 66c:	ldrne	r6, [r0, #12]
 670:	mvneq	r6, #0
 674:	sub	r3, r3, r6
 678:	cmp	r3, #2
 67c:	blt	760 <avl_insere_impl+0x1e0>
 680:	cmp	r2, #0
 684:	beq	850 <avl_insere_impl+0x2d0>
 688:	ldr	r0, [r2, #8]
 68c:	mvn	r6, #0
 690:	mvn	r3, #0
 694:	cmp	r0, #0
 698:	ldrne	r6, [r0, #12]
 69c:	mov	r0, r2
 6a0:	ldr	r5, [r0, #4]!
 6a4:	cmp	r5, #0
 6a8:	ldrne	r3, [r5, #12]
 6ac:	cmp	r6, r3
 6b0:	bge	858 <avl_insere_impl+0x2d8>
 6b4:	ldr	r6, [r5, #8]
 6b8:	str	r2, [r5, #8]
 6bc:	mvn	r3, #0
 6c0:	mvn	r0, #0
 6c4:	str	r6, [r2, #4]
 6c8:	cmp	r6, #0
 6cc:	ldrne	r3, [r6, #12]
 6d0:	ldr	r6, [r2, #8]
 6d4:	cmp	r6, #0
 6d8:	ldrne	r0, [r6, #12]
 6dc:	mvn	r6, #0
 6e0:	cmp	r3, r0
 6e4:	movgt	r0, r3
 6e8:	add	r3, r0, #1
 6ec:	mvn	r0, #0
 6f0:	str	r3, [r2, #12]
 6f4:	ldr	r2, [r5, #4]
 6f8:	cmp	r2, #0
 6fc:	ldrne	r6, [r2, #12]
 700:	str	r4, [r5, #4]
 704:	cmp	r6, r3
 708:	movgt	r3, r6
 70c:	mvn	r6, #0
 710:	add	r3, r3, #1
 714:	str	r3, [r5, #12]
 718:	str	r2, [r4, #8]
 71c:	ldr	r3, [r4, #4]
 720:	cmp	r3, #0
 724:	ldrne	r0, [r3, #12]
 728:	cmp	r2, #0
 72c:	mvn	r3, #0
 730:	ldrne	r6, [r2, #12]
 734:	cmp	r0, r6
 738:	movgt	r6, r0
 73c:	add	r0, r6, #1
 740:	str	r0, [r1]
 744:	ldr	r1, [r5, #8]
 748:	cmp	r1, #0
 74c:	ldrne	r3, [r1, #12]
 750:	cmp	r0, r3
 754:	movgt	r3, r0
 758:	add	r0, r3, #1
 75c:	b	5f4 <avl_insere_impl+0x74>
 760:	cmn	r3, #2
 764:	bgt	848 <avl_insere_impl+0x2c8>
 768:	cmp	r0, #0
 76c:	beq	8b4 <avl_insere_impl+0x334>
 770:	mov	r2, r0
 774:	ldr	r3, [r0, #4]
 778:	mvn	r6, #0
 77c:	mvn	ip, #0
 780:	ldr	r5, [r2, #8]!
 784:	cmp	r5, #0
 788:	ldrne	r6, [r5, #12]
 78c:	cmp	r3, #0
 790:	ldrne	ip, [r3, #12]
 794:	cmp	r6, ip
 798:	ble	8bc <avl_insere_impl+0x33c>
 79c:	ldr	r3, [r5, #4]
 7a0:	str	r0, [r5, #4]
 7a4:	mvn	r6, #0
 7a8:	mvn	r2, #0
 7ac:	str	r3, [r0, #8]
 7b0:	ldr	ip, [r0, #4]
 7b4:	cmp	ip, #0
 7b8:	ldrne	r6, [ip, #12]
 7bc:	cmp	r3, #0
 7c0:	ldrne	r2, [r3, #12]
 7c4:	cmp	r6, r2
 7c8:	movgt	r2, r6
 7cc:	mvn	r6, #0
 7d0:	add	r3, r2, #1
 7d4:	str	r3, [r0, #12]
 7d8:	mvn	r0, #0
 7dc:	ldr	r2, [r5, #8]
 7e0:	cmp	r2, #0
 7e4:	ldrne	r6, [r2, #12]
 7e8:	str	r4, [r5, #8]
 7ec:	cmp	r3, r6
 7f0:	movgt	r6, r3
 7f4:	cmp	r2, #0
 7f8:	add	r3, r6, #1
 7fc:	str	r3, [r5, #12]
 800:	str	r2, [r4, #4]
 804:	mvn	r3, #0
 808:	ldr	r6, [r4, #8]
 80c:	ldrne	r0, [r2, #12]
 810:	mvn	r2, #0
 814:	cmp	r6, #0
 818:	ldrne	r3, [r6, #12]
 81c:	cmp	r0, r3
 820:	movgt	r3, r0
 824:	add	r0, r3, #1
 828:	str	r0, [r1]
 82c:	ldr	r1, [r5, #4]
 830:	cmp	r1, #0
 834:	ldrne	r2, [r1, #12]
 838:	cmp	r2, r0
 83c:	movgt	r0, r2
 840:	add	r0, r0, #1
 844:	b	5f4 <avl_insere_impl+0x74>
 848:	mov	r0, r4
 84c:	pop	{r4, r5, r6, sl, fp, pc}
 850:	mov	r0, #4
 854:	ldr	r5, [r0]
 858:	str	r4, [r0]
 85c:	str	r5, [r4, #8]
 860:	mvn	r3, #0
 864:	mvn	r0, #0
 868:	ldr	r6, [r4, #4]
 86c:	cmp	r6, #0
 870:	ldrne	r3, [r6, #12]
 874:	cmp	r5, #0
 878:	ldrne	r0, [r5, #12]
 87c:	cmp	r3, r0
 880:	movgt	r0, r3
 884:	add	r0, r0, #1
 888:	str	r0, [r1]
 88c:	ldr	r1, [r2, #8]
 890:	cmp	r1, #0
 894:	ldrne	r1, [r1, #12]
 898:	mvneq	r1, #0
 89c:	cmp	r0, r1
 8a0:	movgt	r1, r0
 8a4:	add	r0, r1, #1
 8a8:	str	r0, [r2, #12]
 8ac:	mov	r0, r2
 8b0:	pop	{r4, r5, r6, sl, fp, pc}
 8b4:	mov	r2, #8
 8b8:	ldr	r5, [r2]
 8bc:	str	r4, [r2]
 8c0:	str	r5, [r4, #4]
 8c4:	cmp	r5, #0
 8c8:	mvn	r3, #0
 8cc:	mvn	r2, #0
 8d0:	ldr	r6, [r4, #8]
 8d4:	ldrne	r3, [r5, #12]
 8d8:	cmp	r6, #0
 8dc:	ldrne	r2, [r6, #12]
 8e0:	cmp	r3, r2
 8e4:	movgt	r2, r3
 8e8:	add	r2, r2, #1
 8ec:	str	r2, [r1]
 8f0:	ldr	r1, [r0, #4]
 8f4:	cmp	r1, #0
 8f8:	ldrne	r1, [r1, #12]
 8fc:	mvneq	r1, #0
 900:	cmp	r1, r2
 904:	movgt	r2, r1
 908:	add	r1, r2, #1
 90c:	str	r1, [r0, #12]
 910:	pop	{r4, r5, r6, sl, fp, pc}

00000914 <avl_remove>:
 914:	push	{r4, sl, fp, lr}
 918:	add	fp, sp, #8
 91c:	mov	r4, r0
 920:	mvn	r0, #0
 924:	cmp	r4, #0
 928:	cmpne	r1, #0
 92c:	bne	934 <avl_remove+0x20>
 930:	pop	{r4, sl, fp, pc}
 934:	ldr	r0, [r4]
 938:	bl	64 <avl_remove_impl>
 93c:	str	r0, [r4]
 940:	mov	r0, #0
 944:	pop	{r4, sl, fp, pc}

00000948 <avl_min>:
 948:	cmp	r0, #0
 94c:	moveq	r0, #0
 950:	bxeq	lr
 954:	ldr	r0, [r0]
 958:	mov	r1, r0
 95c:	ldr	r0, [r0, #4]
 960:	cmp	r0, #0
 964:	bne	958 <avl_min+0x10>
 968:	ldr	r0, [r1]
 96c:	bx	lr

00000970 <avl_no_valormin>:
 970:	mov	r1, r0
 974:	ldr	r0, [r0, #4]
 978:	cmp	r0, #0
 97c:	bne	970 <avl_no_valormin>
 980:	mov	r0, r1
 984:	bx	lr

00000988 <avl_max>:
 988:	cmp	r0, #0
 98c:	moveq	r0, #0
 990:	bxeq	lr
 994:	ldr	r0, [r0]
 998:	mov	r1, r0
 99c:	ldr	r0, [r0, #8]
 9a0:	cmp	r0, #0
 9a4:	bne	998 <avl_max+0x10>
 9a8:	ldr	r0, [r1]
 9ac:	bx	lr

000009b0 <avl_no_valormax>:
 9b0:	mov	r1, r0
 9b4:	ldr	r0, [r0, #8]
 9b8:	cmp	r0, #0
 9bc:	bne	9b0 <avl_no_valormax>
 9c0:	mov	r0, r1
 9c4:	bx	lr

000009c8 <avl_imprime>:
 9c8:	cmp	r0, #0
 9cc:	bxeq	lr
 9d0:	push	{fp, lr}
 9d4:	mov	fp, sp
 9d8:	ldr	r0, [r0]
 9dc:	bl	9ec <avl_preordem_impl>
 9e0:	mov	r0, #10
 9e4:	pop	{fp, lr}
 9e8:	b	0 <putchar>

000009ec <avl_preordem_impl>:
 9ec:	push	{r4, r5, fp, lr}
 9f0:	add	fp, sp, #8
 9f4:	cmp	r0, #0
 9f8:	popeq	{r4, r5, fp, pc}
 9fc:	movw	r5, #0
 a00:	mov	r4, r0
 a04:	movt	r5, #0
 a08:	ldr	r1, [r4]
 a0c:	mov	r0, r5
 a10:	bl	0 <printf>
 a14:	ldr	r0, [r4, #4]
 a18:	bl	9ec <avl_preordem_impl>
 a1c:	ldr	r4, [r4, #8]
 a20:	cmp	r4, #0
 a24:	bne	a08 <avl_preordem_impl+0x1c>
 a28:	pop	{r4, r5, fp, pc}

00000a2c <avl_altura>:
 a2c:	cmp	r0, #0
 a30:	ldrne	r0, [r0, #12]
 a34:	mvneq	r0, #0
 a38:	bx	lr

00000a3c <max>:
 a3c:	cmp	r0, r1
 a40:	movle	r0, r1
 a44:	bx	lr

00000a48 <avl_novo_no>:
 a48:	push	{r4, r5, fp, lr}
 a4c:	add	fp, sp, #8
 a50:	mov	r4, r0
 a54:	mov	r0, #16
 a58:	bl	0 <malloc>
 a5c:	mov	r5, r0
 a60:	mov	r0, r4
 a64:	bl	0 <strlen>
 a68:	add	r0, r0, #1
 a6c:	bl	0 <malloc>
 a70:	mov	r1, r4
 a74:	str	r0, [r5]
 a78:	bl	0 <strcpy>
 a7c:	mov	r0, #0
 a80:	str	r0, [r5, #4]
 a84:	str	r0, [r5, #8]
 a88:	str	r0, [r5, #12]
 a8c:	mov	r0, r5
 a90:	pop	{r4, r5, fp, pc}

00000a94 <roda_direita>:
 a94:	mov	r1, r0
 a98:	ldr	r0, [r0, #4]
 a9c:	mvn	ip, #0
 aa0:	mvn	r2, #0
 aa4:	ldr	r3, [r0, #8]
 aa8:	str	r1, [r0, #8]
 aac:	str	r3, [r1, #4]
 ab0:	cmp	r3, #0
 ab4:	ldrne	ip, [r3, #12]
 ab8:	ldr	r3, [r1, #8]
 abc:	cmp	r3, #0
 ac0:	ldrne	r2, [r3, #12]
 ac4:	cmp	ip, r2
 ac8:	movgt	r2, ip
 acc:	add	r2, r2, #1
 ad0:	str	r2, [r1, #12]
 ad4:	ldr	r1, [r0, #4]
 ad8:	cmp	r1, #0
 adc:	ldrne	r1, [r1, #12]
 ae0:	mvneq	r1, #0
 ae4:	cmp	r1, r2
 ae8:	movgt	r2, r1
 aec:	add	r1, r2, #1
 af0:	str	r1, [r0, #12]
 af4:	bx	lr

00000af8 <roda_esquerda>:
 af8:	push	{fp, lr}
 afc:	mov	fp, sp
 b00:	mov	r1, r0
 b04:	ldr	r0, [r0, #8]
 b08:	mvn	r3, #0
 b0c:	mvn	r2, #0
 b10:	ldr	ip, [r0, #4]
 b14:	str	r1, [r0, #4]
 b18:	str	ip, [r1, #8]
 b1c:	ldr	lr, [r1, #4]
 b20:	cmp	lr, #0
 b24:	ldrne	r3, [lr, #12]
 b28:	cmp	ip, #0
 b2c:	ldrne	r2, [ip, #12]
 b30:	cmp	r3, r2
 b34:	movgt	r2, r3
 b38:	add	r2, r2, #1
 b3c:	str	r2, [r1, #12]
 b40:	ldr	r1, [r0, #8]
 b44:	cmp	r1, #0
 b48:	ldrne	r1, [r1, #12]
 b4c:	mvneq	r1, #0
 b50:	cmp	r2, r1
 b54:	movgt	r1, r2
 b58:	add	r1, r1, #1
 b5c:	str	r1, [r0, #12]
 b60:	pop	{fp, pc}

00000b64 <calc_balanceamento>:
 b64:	cmp	r0, #0
 b68:	moveq	r0, #0
 b6c:	bxeq	lr
 b70:	ldr	r3, [r0, #8]
 b74:	ldr	r0, [r0, #4]
 b78:	mvn	r2, #0
 b7c:	mvn	r1, #0
 b80:	cmp	r3, #0
 b84:	ldrne	r2, [r3, #12]
 b88:	cmp	r0, #0
 b8c:	ldrne	r1, [r0, #12]
 b90:	sub	r0, r2, r1
 b94:	bx	lr
