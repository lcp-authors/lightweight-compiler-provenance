
../compcert-repos/dvidelabs-flatcc-3b39ef7/test/json_test/CMakeFiles/test_basic_parse.dir/test_basic_parse.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <test>:
       0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
       4:	add	fp, sp, #28
       8:	sub	sp, sp, #84	; 0x54
       c:	vmov.i32	q8, #0	; 0x00000000
      10:	mov	r9, r0
      14:	add	r0, sp, #24
      18:	mov	r4, r1
      1c:	str	r3, [sp, #12]
      20:	mov	r7, r2
      24:	mov	r2, #0
      28:	mov	r3, #0
      2c:	add	r1, r0, #16
      30:	vst1.64	{d16-d17}, [r1]
      34:	mov	r1, #28
      38:	vst1.64	{d16-d17}, [r0], r1
      3c:	movw	r1, #0
      40:	vst1.32	{d16-d17}, [r0]
      44:	mov	r0, #1
      48:	movt	r1, #0
      4c:	str	r4, [sp, #28]
      50:	str	r0, [sp, #40]	; 0x28
      54:	mov	r0, r9
      58:	bl	0 <flatcc_builder_start_buffer>
      5c:	sub	r0, r7, r4
      60:	cmp	r0, #2
      64:	blt	90 <test+0x90>
      68:	ldrb	r0, [r4]
      6c:	cmp	r0, #32
      70:	bls	7c <test+0x7c>
      74:	mov	r6, r4
      78:	b	a4 <test+0xa4>
      7c:	bne	90 <test+0x90>
      80:	mov	r6, r4
      84:	ldrb	r0, [r6, #1]!
      88:	cmp	r0, #32
      8c:	bhi	a4 <test+0xa4>
      90:	add	r0, sp, #24
      94:	mov	r1, r4
      98:	mov	r2, r7
      9c:	bl	0 <flatcc_json_parser_space_ext>
      a0:	mov	r6, r0
      a4:	movw	r4, #0
      a8:	cmp	r6, r7
      ac:	movt	r4, #0
      b0:	beq	1164 <test+0x1164>
      b4:	bcs	1198 <test+0x1198>
      b8:	ldrb	r0, [r6]
      bc:	cmp	r0, #123	; 0x7b
      c0:	bne	1198 <test+0x1198>
      c4:	add	r1, r6, #1
      c8:	sub	r0, r7, r1
      cc:	cmp	r0, #2
      d0:	blt	100 <test+0x100>
      d4:	ldrb	r0, [r1]
      d8:	cmp	r0, #32
      dc:	bls	f0 <test+0xf0>
      e0:	mov	r6, r1
      e4:	cmp	r6, r7
      e8:	bne	118 <test+0x118>
      ec:	b	1164 <test+0x1164>
      f0:	bne	100 <test+0x100>
      f4:	ldrb	r0, [r6, #2]!
      f8:	cmp	r0, #32
      fc:	bhi	110 <test+0x110>
     100:	add	r0, sp, #24
     104:	mov	r2, r7
     108:	bl	0 <flatcc_json_parser_space_ext>
     10c:	mov	r6, r0
     110:	cmp	r6, r7
     114:	beq	1164 <test+0x1164>
     118:	mov	r0, r9
     11c:	mov	r1, #11
     120:	bl	0 <flatcc_builder_start_table>
     124:	add	r0, sp, #20
     128:	add	r5, sp, #24
     12c:	str	r9, [sp, #16]
     130:	add	r0, r0, #1
     134:	str	r0, [sp, #8]
     138:	cmp	r6, r7
     13c:	mov	ip, r7
     140:	beq	18c <test+0x18c>
     144:	ldrb	r0, [r6]
     148:	cmp	r0, #46	; 0x2e
     14c:	beq	164 <test+0x164>
     150:	cmp	r0, #34	; 0x22
     154:	bne	180 <test+0x180>
     158:	mov	r0, #0
     15c:	add	ip, r6, #1
     160:	b	188 <test+0x188>
     164:	mov	r0, r5
     168:	mov	r1, r6
     16c:	mov	r2, r7
     170:	mov	r3, #5
     174:	bl	0 <flatcc_json_parser_set_error>
     178:	mov	ip, r0
     17c:	b	18c <test+0x18c>
     180:	mov	r0, #1
     184:	mov	ip, r6
     188:	str	r0, [sp, #36]	; 0x24
     18c:	sub	r3, r7, ip
     190:	mov	r0, #8
     194:	mov	r8, r7
     198:	cmp	r3, #8
     19c:	movcc	r0, r3
     1a0:	sub	r7, r0, #1
     1a4:	cmp	r7, #7
     1a8:	bhi	1184 <test+0x1184>
     1ac:	add	r4, pc, #32
     1b0:	mov	sl, #0
     1b4:	mov	lr, #0
     1b8:	mov	r9, #0
     1bc:	mov	r0, #0
     1c0:	mov	r6, #0
     1c4:	mov	r5, #0
     1c8:	mov	r1, #0
     1cc:	mov	r2, #0
     1d0:	ldr	pc, [r4, r7, lsl #2]
     1d4:	.word	0x00000238
     1d8:	.word	0x00000230
     1dc:	.word	0x00000228
     1e0:	.word	0x00000220
     1e4:	.word	0x00000214
     1e8:	.word	0x00000208
     1ec:	.word	0x000001f8
     1f0:	.word	0x000001f4
     1f4:	ldrb	lr, [ip, #7]
     1f8:	ldrb	r0, [ip, #6]
     1fc:	mov	r9, sl
     200:	orr	r0, lr, r0, lsl #8
     204:	mov	sl, r0
     208:	ldrb	r0, [ip, #5]
     20c:	orr	sl, sl, r0, lsl #16
     210:	mov	r0, r9
     214:	ldrb	r1, [ip, #4]
     218:	mov	r6, r0
     21c:	orr	sl, sl, r1, lsl #24
     220:	ldrb	r0, [ip, #3]
     224:	orr	r5, r0, r6
     228:	ldrb	r0, [ip, #2]
     22c:	orr	r1, r5, r0, lsl #8
     230:	ldrb	r0, [ip, #1]
     234:	orr	r2, r1, r0, lsl #16
     238:	mov	r1, ip
     23c:	cmp	r3, #8
     240:	movw	r6, #25455	; 0x636f
     244:	ldrb	r0, [r1], #8
     248:	movt	r6, #29541	; 0x7365
     24c:	movle	r1, r8
     250:	orr	r3, r2, r0, lsl #24
     254:	mov	r0, sl
     258:	movw	r2, #0
     25c:	bfc	r0, #0, #16
     260:	movt	r2, #28260	; 0x6e64
     264:	subs	r2, r0, r2
     268:	sbcs	r2, r3, r6
     26c:	bcs	338 <test+0x338>
     270:	movw	r0, #29299	; 0x7273
     274:	ldr	r9, [sp, #16]
     278:	and	r1, sl, #-16777216	; 0xff000000
     27c:	movw	r4, #0
     280:	add	r5, sp, #24
     284:	movt	r0, #26217	; 0x6669
     288:	eor	r1, r1, #1946157056	; 0x74000000
     28c:	movt	r4, #0
     290:	eor	r0, r3, r0
     294:	orrs	r0, r1, r0
     298:	bne	1184 <test+0x1184>
     29c:	ldr	r1, [sp, #36]	; 0x24
     2a0:	add	r0, ip, #5
     2a4:	mov	r7, r8
     2a8:	cmp	r1, #0
     2ac:	beq	4d8 <test+0x4d8>
     2b0:	cmp	r0, r8
     2b4:	mov	r1, r8
     2b8:	beq	7f8 <test+0x7f8>
     2bc:	ldrb	r3, [r0]
     2c0:	mov	r1, r0
     2c4:	cmp	r3, #33	; 0x21
     2c8:	bcc	7f8 <test+0x7f8>
     2cc:	add	r1, ip, #6
     2d0:	uxtb	r0, r3
     2d4:	cmp	r0, #46	; 0x2e
     2d8:	cmpne	r0, #95	; 0x5f
     2dc:	bne	2f8 <test+0x2f8>
     2e0:	cmp	r7, r1
     2e4:	beq	798 <test+0x798>
     2e8:	ldrb	r3, [r1], #1
     2ec:	cmp	r3, #33	; 0x21
     2f0:	bcs	2d0 <test+0x2d0>
     2f4:	b	328 <test+0x328>
     2f8:	sxtb	r2, r3
     2fc:	cmp	r2, #0
     300:	bmi	2e0 <test+0x2e0>
     304:	sub	r2, r3, #48	; 0x30
     308:	uxtb	r2, r2
     30c:	cmp	r2, #9
     310:	bls	2e0 <test+0x2e0>
     314:	orr	r2, r3, #32
     318:	sub	r2, r2, #97	; 0x61
     31c:	uxtb	r2, r2
     320:	cmp	r2, #26
     324:	bcc	2e0 <test+0x2e0>
     328:	sub	r1, r1, #1
     32c:	cmp	r0, #46	; 0x2e
     330:	beq	7a4 <test+0x7a4>
     334:	b	7f8 <test+0x7f8>
     338:	movw	r2, #27764	; 0x6c74
     33c:	mov	r7, r8
     340:	movt	r2, #31349	; 0x7a75
     344:	cmp	r3, r2
     348:	bhi	420 <test+0x420>
     34c:	movw	r5, #29472	; 0x7320
     350:	movt	r5, #28260	; 0x6e64
     354:	subs	r2, sl, r5
     358:	sbcs	r2, r3, r6
     35c:	bcs	51c <test+0x51c>
     360:	movw	r1, #0
     364:	movt	r1, #28260	; 0x6e64
     368:	eor	r0, r0, r1
     36c:	eor	r1, r3, r6
     370:	orrs	r0, r0, r1
     374:	bne	11d0 <test+0x11d0>
     378:	ldr	r1, [sp, #36]	; 0x24
     37c:	ldr	r9, [sp, #16]
     380:	movw	r4, #0
     384:	add	r0, ip, #6
     388:	movt	r4, #0
     38c:	cmp	r1, #0
     390:	beq	750 <test+0x750>
     394:	cmp	r0, r7
     398:	mov	r1, r7
     39c:	add	r5, sp, #24
     3a0:	beq	d3c <test+0xd3c>
     3a4:	ldrb	r3, [r0]
     3a8:	mov	r1, r0
     3ac:	cmp	r3, #33	; 0x21
     3b0:	bcc	d3c <test+0xd3c>
     3b4:	add	r1, ip, #7
     3b8:	uxtb	r0, r3
     3bc:	cmp	r0, #46	; 0x2e
     3c0:	cmpne	r0, #95	; 0x5f
     3c4:	bne	3e0 <test+0x3e0>
     3c8:	cmp	r7, r1
     3cc:	beq	ad4 <test+0xad4>
     3d0:	ldrb	r3, [r1], #1
     3d4:	cmp	r3, #33	; 0x21
     3d8:	bcs	3b8 <test+0x3b8>
     3dc:	b	410 <test+0x410>
     3e0:	sxtb	r2, r3
     3e4:	cmp	r2, #0
     3e8:	bmi	3c8 <test+0x3c8>
     3ec:	sub	r2, r3, #48	; 0x30
     3f0:	uxtb	r2, r2
     3f4:	cmp	r2, #9
     3f8:	bls	3c8 <test+0x3c8>
     3fc:	orr	r2, r3, #32
     400:	sub	r2, r2, #97	; 0x61
     404:	uxtb	r2, r2
     408:	cmp	r2, #26
     40c:	bcc	3c8 <test+0x3c8>
     410:	sub	r1, r1, #1
     414:	cmp	r0, #46	; 0x2e
     418:	beq	ae0 <test+0xae0>
     41c:	b	d3c <test+0xd3c>
     420:	movw	r0, #27765	; 0x6c75
     424:	movt	r0, #31349	; 0x7a75
     428:	teq	r3, r0
     42c:	bne	11d0 <test+0x11d0>
     430:	ldr	r1, [sp, #36]	; 0x24
     434:	ldr	r9, [sp, #16]
     438:	movw	r4, #0
     43c:	add	r0, ip, #4
     440:	movt	r4, #0
     444:	cmp	r1, #0
     448:	beq	658 <test+0x658>
     44c:	cmp	r0, r7
     450:	mov	r1, r7
     454:	add	r5, sp, #24
     458:	beq	b08 <test+0xb08>
     45c:	ldrb	r3, [r0]
     460:	mov	r1, r0
     464:	cmp	r3, #33	; 0x21
     468:	bcc	b08 <test+0xb08>
     46c:	add	r1, ip, #5
     470:	uxtb	r0, r3
     474:	cmp	r0, #46	; 0x2e
     478:	cmpne	r0, #95	; 0x5f
     47c:	bne	498 <test+0x498>
     480:	cmp	r7, r1
     484:	beq	7c4 <test+0x7c4>
     488:	ldrb	r3, [r1], #1
     48c:	cmp	r3, #33	; 0x21
     490:	bcs	470 <test+0x470>
     494:	b	4c8 <test+0x4c8>
     498:	sxtb	r2, r3
     49c:	cmp	r2, #0
     4a0:	bmi	480 <test+0x480>
     4a4:	sub	r2, r3, #48	; 0x30
     4a8:	uxtb	r2, r2
     4ac:	cmp	r2, #9
     4b0:	bls	480 <test+0x480>
     4b4:	orr	r2, r3, #32
     4b8:	sub	r2, r2, #97	; 0x61
     4bc:	uxtb	r2, r2
     4c0:	cmp	r2, #26
     4c4:	bcc	480 <test+0x480>
     4c8:	sub	r1, r1, #1
     4cc:	cmp	r0, #46	; 0x2e
     4d0:	beq	7d0 <test+0x7d0>
     4d4:	b	b08 <test+0xb08>
     4d8:	cmp	r0, r8
     4dc:	mov	r1, r8
     4e0:	bne	4fc <test+0x4fc>
     4e4:	b	7e4 <test+0x7e4>
     4e8:	cmp	r1, #34	; 0x22
     4ec:	beq	748 <test+0x748>
     4f0:	add	r0, r0, #1
     4f4:	cmp	r0, r7
     4f8:	beq	7b4 <test+0x7b4>
     4fc:	ldrb	r1, [r0]
     500:	cmp	r1, #92	; 0x5c
     504:	bne	4e8 <test+0x4e8>
     508:	sub	r1, r7, r0
     50c:	cmp	r1, #2
     510:	blt	7e0 <test+0x7e0>
     514:	add	r0, r0, #1
     518:	b	4f0 <test+0x4f0>
     51c:	eor	r0, sl, r5
     520:	eor	r2, r3, r6
     524:	orrs	r0, r0, r2
     528:	bne	11d0 <test+0x11d0>
     52c:	sub	r0, r7, r1
     530:	mov	r2, #8
     534:	ldr	r9, [sp, #16]
     538:	movw	r4, #0
     53c:	add	r5, sp, #24
     540:	cmp	r0, #8
     544:	movt	r4, #0
     548:	movcs	r0, r2
     54c:	sub	r2, r0, #1
     550:	cmp	r2, #7
     554:	bhi	12fc <test+0x12fc>
     558:	add	r3, pc, #4
     55c:	mov	r0, #0
     560:	ldr	pc, [r3, r2, lsl #2]
     564:	.word	0x00000598
     568:	.word	0x00000590
     56c:	.word	0x00000588
     570:	.word	0x00000584
     574:	.word	0x00000584
     578:	.word	0x00000584
     57c:	.word	0x00000584
     580:	.word	0x00000584
     584:	ldrb	r0, [r1, #3]
     588:	ldrb	r2, [r1, #2]
     58c:	orr	r0, r0, r2, lsl #8
     590:	ldrb	r2, [r1, #1]
     594:	orr	r0, r0, r2, lsl #16
     598:	ldrb	r2, [r1]
     59c:	orr	r0, r0, r2, lsl #24
     5a0:	movw	r2, #26227	; 0x6673
     5a4:	movt	r2, #27749	; 0x6c65
     5a8:	cmp	r0, r2
     5ac:	bhi	6a0 <test+0x6a0>
     5b0:	movw	r2, #24932	; 0x6164
     5b4:	movt	r2, #27749	; 0x6c65
     5b8:	teq	r0, r2
     5bc:	bne	12fc <test+0x12fc>
     5c0:	ldr	r2, [sp, #36]	; 0x24
     5c4:	add	r0, r1, #4
     5c8:	cmp	r2, #0
     5cc:	beq	a44 <test+0xa44>
     5d0:	cmp	r0, r7
     5d4:	mov	r2, r7
     5d8:	beq	eac <test+0xeac>
     5dc:	ldrb	r3, [r0]
     5e0:	mov	r2, r0
     5e4:	cmp	r3, #33	; 0x21
     5e8:	bcc	eac <test+0xeac>
     5ec:	add	r1, r1, #5
     5f0:	uxtb	r0, r3
     5f4:	cmp	r0, #46	; 0x2e
     5f8:	cmpne	r0, #95	; 0x5f
     5fc:	bne	618 <test+0x618>
     600:	cmp	r7, r1
     604:	beq	e34 <test+0xe34>
     608:	ldrb	r3, [r1], #1
     60c:	cmp	r3, #33	; 0x21
     610:	bcs	5f0 <test+0x5f0>
     614:	b	648 <test+0x648>
     618:	sxtb	r2, r3
     61c:	cmp	r2, #0
     620:	bmi	600 <test+0x600>
     624:	sub	r2, r3, #48	; 0x30
     628:	uxtb	r2, r2
     62c:	cmp	r2, #9
     630:	bls	600 <test+0x600>
     634:	orr	r2, r3, #32
     638:	sub	r2, r2, #97	; 0x61
     63c:	uxtb	r2, r2
     640:	cmp	r2, #26
     644:	bcc	600 <test+0x600>
     648:	sub	r2, r1, #1
     64c:	cmp	r0, #46	; 0x2e
     650:	beq	e40 <test+0xe40>
     654:	b	eac <test+0xeac>
     658:	cmp	r0, r7
     65c:	mov	r1, r7
     660:	add	r5, sp, #24
     664:	bne	680 <test+0x680>
     668:	b	af4 <test+0xaf4>
     66c:	cmp	r1, #34	; 0x22
     670:	beq	7bc <test+0x7bc>
     674:	add	r0, r0, #1
     678:	cmp	r0, r7
     67c:	beq	a3c <test+0xa3c>
     680:	ldrb	r1, [r0]
     684:	cmp	r1, #92	; 0x5c
     688:	bne	66c <test+0x66c>
     68c:	sub	r1, r7, r0
     690:	cmp	r1, #2
     694:	blt	af0 <test+0xaf0>
     698:	add	r0, r0, #1
     69c:	b	674 <test+0x674>
     6a0:	movw	r2, #26228	; 0x6674
     6a4:	movt	r2, #27749	; 0x6c65
     6a8:	teq	r0, r2
     6ac:	bne	12fc <test+0x12fc>
     6b0:	ldr	r2, [sp, #36]	; 0x24
     6b4:	add	r0, r1, #4
     6b8:	cmp	r2, #0
     6bc:	beq	a88 <test+0xa88>
     6c0:	cmp	r0, r7
     6c4:	mov	r2, r7
     6c8:	beq	1024 <test+0x1024>
     6cc:	ldrb	r3, [r0]
     6d0:	mov	r2, r0
     6d4:	cmp	r3, #33	; 0x21
     6d8:	bcc	1024 <test+0x1024>
     6dc:	add	r1, r1, #5
     6e0:	uxtb	r0, r3
     6e4:	cmp	r0, #46	; 0x2e
     6e8:	cmpne	r0, #95	; 0x5f
     6ec:	bne	708 <test+0x708>
     6f0:	cmp	r7, r1
     6f4:	beq	e54 <test+0xe54>
     6f8:	ldrb	r3, [r1], #1
     6fc:	cmp	r3, #33	; 0x21
     700:	bcs	6e0 <test+0x6e0>
     704:	b	738 <test+0x738>
     708:	sxtb	r2, r3
     70c:	cmp	r2, #0
     710:	bmi	6f0 <test+0x6f0>
     714:	sub	r2, r3, #48	; 0x30
     718:	uxtb	r2, r2
     71c:	cmp	r2, #9
     720:	bls	6f0 <test+0x6f0>
     724:	orr	r2, r3, #32
     728:	sub	r2, r2, #97	; 0x61
     72c:	uxtb	r2, r2
     730:	cmp	r2, #26
     734:	bcc	6f0 <test+0x6f0>
     738:	sub	r2, r1, #1
     73c:	cmp	r0, #46	; 0x2e
     740:	beq	e60 <test+0xe60>
     744:	b	1024 <test+0x1024>
     748:	add	r1, r0, #1
     74c:	b	7f8 <test+0x7f8>
     750:	cmp	r0, r7
     754:	mov	r1, r7
     758:	add	r5, sp, #24
     75c:	bne	778 <test+0x778>
     760:	b	d28 <test+0xd28>
     764:	cmp	r1, #34	; 0x22
     768:	beq	acc <test+0xacc>
     76c:	add	r0, r0, #1
     770:	cmp	r0, r7
     774:	beq	d1c <test+0xd1c>
     778:	ldrb	r1, [r0]
     77c:	cmp	r1, #92	; 0x5c
     780:	bne	764 <test+0x764>
     784:	sub	r1, r7, r0
     788:	cmp	r1, #2
     78c:	blt	d24 <test+0xd24>
     790:	add	r0, r0, #1
     794:	b	76c <test+0x76c>
     798:	mov	r1, r7
     79c:	cmp	r0, #46	; 0x2e
     7a0:	bne	7f8 <test+0x7f8>
     7a4:	mov	r0, r5
     7a8:	mov	r2, r7
     7ac:	mov	r3, #5
     7b0:	b	7f0 <test+0x7f0>
     7b4:	mov	r1, r7
     7b8:	b	7e4 <test+0x7e4>
     7bc:	add	r1, r0, #1
     7c0:	b	b08 <test+0xb08>
     7c4:	mov	r1, r7
     7c8:	cmp	r0, #46	; 0x2e
     7cc:	bne	b08 <test+0xb08>
     7d0:	mov	r0, r5
     7d4:	mov	r2, r7
     7d8:	mov	r3, #5
     7dc:	b	b00 <test+0xb00>
     7e0:	mov	r1, r0
     7e4:	mov	r0, r5
     7e8:	mov	r2, r7
     7ec:	mov	r3, #20
     7f0:	bl	0 <flatcc_json_parser_set_error>
     7f4:	mov	r1, r0
     7f8:	sub	r0, r7, r1
     7fc:	cmp	r0, #2
     800:	blt	86c <test+0x86c>
     804:	ldrb	r0, [r1]
     808:	cmp	r0, #32
     80c:	bls	858 <test+0x858>
     810:	mov	sl, r1
     814:	cmp	sl, r7
     818:	beq	1164 <test+0x1164>
     81c:	bcs	11a8 <test+0x11a8>
     820:	ldrb	r0, [sl]
     824:	cmp	r0, #58	; 0x3a
     828:	bne	11a8 <test+0x11a8>
     82c:	add	r1, sl, #1
     830:	sub	r0, r7, r1
     834:	cmp	r0, #2
     838:	blt	898 <test+0x898>
     83c:	ldrb	r0, [r1]
     840:	cmp	r0, #32
     844:	bls	888 <test+0x888>
     848:	mov	sl, r1
     84c:	cmp	sl, r7
     850:	bne	8b0 <test+0x8b0>
     854:	b	1164 <test+0x1164>
     858:	bne	86c <test+0x86c>
     85c:	mov	sl, r1
     860:	ldrb	r0, [sl, #1]!
     864:	cmp	r0, #32
     868:	bhi	87c <test+0x87c>
     86c:	mov	r0, r5
     870:	mov	r2, r7
     874:	bl	0 <flatcc_json_parser_space_ext>
     878:	mov	sl, r0
     87c:	cmp	sl, r7
     880:	bne	81c <test+0x81c>
     884:	b	1164 <test+0x1164>
     888:	bne	898 <test+0x898>
     88c:	ldrb	r0, [sl, #2]!
     890:	cmp	r0, #32
     894:	bhi	8a8 <test+0x8a8>
     898:	mov	r0, r5
     89c:	mov	r2, r7
     8a0:	bl	0 <flatcc_json_parser_space_ext>
     8a4:	mov	sl, r0
     8a8:	cmp	sl, r7
     8ac:	beq	1164 <test+0x1164>
     8b0:	mov	r0, r9
     8b4:	mov	r1, #0
     8b8:	mov	r2, #1
     8bc:	mov	r3, #1
     8c0:	bl	0 <flatcc_builder_table_add>
     8c4:	cmp	r0, #0
     8c8:	beq	1280 <test+0x1280>
     8cc:	mov	r6, r0
     8d0:	mov	r0, #0
     8d4:	mov	r1, sl
     8d8:	mov	r2, r7
     8dc:	sub	r3, fp, #44	; 0x2c
     8e0:	str	r0, [fp, #-36]	; 0xffffffdc
     8e4:	str	r0, [fp, #-40]	; 0xffffffd8
     8e8:	str	r0, [fp, #-44]	; 0xffffffd4
     8ec:	strb	r0, [r6]
     8f0:	sub	r0, fp, #40	; 0x28
     8f4:	str	r0, [sp]
     8f8:	mov	r0, r5
     8fc:	bl	0 <flatcc_json_parser_integer>
     900:	cmp	r0, sl
     904:	mov	r1, sl
     908:	beq	970 <test+0x970>
     90c:	mov	r2, r0
     910:	ldr	r0, [fp, #-44]	; 0xffffffd4
     914:	cmp	r0, #0
     918:	beq	930 <test+0x930>
     91c:	mov	r1, r2
     920:	mov	r0, r5
     924:	mov	r2, r7
     928:	mov	r3, #8
     92c:	b	954 <test+0x954>
     930:	ldr	r0, [fp, #-40]	; 0xffffffd8
     934:	ldr	r1, [fp, #-36]	; 0xffffffdc
     938:	subs	r3, r0, #256	; 0x100
     93c:	sbcs	r1, r1, #0
     940:	bcc	968 <test+0x968>
     944:	mov	r1, r2
     948:	mov	r0, r5
     94c:	mov	r2, r7
     950:	mov	r3, #7
     954:	bl	0 <flatcc_json_parser_set_error>
     958:	mov	r1, r0
     95c:	cmp	sl, r1
     960:	bne	978 <test+0x978>
     964:	b	1280 <test+0x1280>
     968:	strb	r0, [r6]
     96c:	mov	r1, r2
     970:	cmp	sl, r1
     974:	beq	1280 <test+0x1280>
     978:	sub	r0, r7, r1
     97c:	cmp	r0, #2
     980:	blt	9b4 <test+0x9b4>
     984:	ldrb	r0, [r1]
     988:	cmp	r0, #32
     98c:	bls	9a0 <test+0x9a0>
     990:	mov	r6, r1
     994:	cmp	r6, r7
     998:	bne	9cc <test+0x9cc>
     99c:	b	1164 <test+0x1164>
     9a0:	bne	9b4 <test+0x9b4>
     9a4:	mov	r6, r1
     9a8:	ldrb	r0, [r6, #1]!
     9ac:	cmp	r0, #32
     9b0:	bhi	9c4 <test+0x9c4>
     9b4:	mov	r0, r5
     9b8:	mov	r2, r7
     9bc:	bl	0 <flatcc_json_parser_space_ext>
     9c0:	mov	r6, r0
     9c4:	cmp	r6, r7
     9c8:	beq	1164 <test+0x1164>
     9cc:	ldrb	r0, [r6]
     9d0:	cmp	r0, #44	; 0x2c
     9d4:	bne	11fc <test+0x11fc>
     9d8:	add	r1, r6, #1
     9dc:	sub	r0, r7, r1
     9e0:	cmp	r0, #2
     9e4:	blt	a14 <test+0xa14>
     9e8:	ldrb	r0, [r1]
     9ec:	cmp	r0, #32
     9f0:	bls	a04 <test+0xa04>
     9f4:	mov	r6, r1
     9f8:	cmp	r6, r7
     9fc:	bne	a2c <test+0xa2c>
     a00:	b	1164 <test+0x1164>
     a04:	bne	a14 <test+0xa14>
     a08:	ldrb	r0, [r6, #2]!
     a0c:	cmp	r0, #32
     a10:	bhi	a24 <test+0xa24>
     a14:	mov	r0, r5
     a18:	mov	r2, r7
     a1c:	bl	0 <flatcc_json_parser_space_ext>
     a20:	mov	r6, r0
     a24:	cmp	r6, r7
     a28:	beq	1164 <test+0x1164>
     a2c:	ldrb	r0, [r6]
     a30:	cmp	r0, #125	; 0x7d
     a34:	bne	138 <test+0x138>
     a38:	b	11f8 <test+0x11f8>
     a3c:	mov	r1, r7
     a40:	b	af4 <test+0xaf4>
     a44:	cmp	r0, r7
     a48:	mov	r1, r7
     a4c:	bne	a68 <test+0xa68>
     a50:	b	e98 <test+0xe98>
     a54:	cmp	r1, #34	; 0x22
     a58:	beq	e74 <test+0xe74>
     a5c:	add	r0, r0, #1
     a60:	cmp	r0, r7
     a64:	beq	e84 <test+0xe84>
     a68:	ldrb	r1, [r0]
     a6c:	cmp	r1, #92	; 0x5c
     a70:	bne	a54 <test+0xa54>
     a74:	sub	r1, r7, r0
     a78:	cmp	r1, #2
     a7c:	blt	e94 <test+0xe94>
     a80:	add	r0, r0, #1
     a84:	b	a5c <test+0xa5c>
     a88:	cmp	r0, r7
     a8c:	mov	r1, r7
     a90:	bne	aac <test+0xaac>
     a94:	b	1010 <test+0x1010>
     a98:	cmp	r1, #34	; 0x22
     a9c:	beq	e7c <test+0xe7c>
     aa0:	add	r0, r0, #1
     aa4:	cmp	r0, r7
     aa8:	beq	e8c <test+0xe8c>
     aac:	ldrb	r1, [r0]
     ab0:	cmp	r1, #92	; 0x5c
     ab4:	bne	a98 <test+0xa98>
     ab8:	sub	r1, r7, r0
     abc:	cmp	r1, #2
     ac0:	blt	100c <test+0x100c>
     ac4:	add	r0, r0, #1
     ac8:	b	aa0 <test+0xaa0>
     acc:	add	r1, r0, #1
     ad0:	b	d3c <test+0xd3c>
     ad4:	mov	r1, r7
     ad8:	cmp	r0, #46	; 0x2e
     adc:	bne	d3c <test+0xd3c>
     ae0:	mov	r0, r5
     ae4:	mov	r2, r7
     ae8:	mov	r3, #5
     aec:	b	d34 <test+0xd34>
     af0:	mov	r1, r0
     af4:	mov	r0, r5
     af8:	mov	r2, r7
     afc:	mov	r3, #20
     b00:	bl	0 <flatcc_json_parser_set_error>
     b04:	mov	r1, r0
     b08:	sub	r0, r7, r1
     b0c:	cmp	r0, #2
     b10:	blt	b7c <test+0xb7c>
     b14:	ldrb	r0, [r1]
     b18:	cmp	r0, #32
     b1c:	bls	b68 <test+0xb68>
     b20:	mov	r6, r1
     b24:	cmp	r6, r7
     b28:	beq	1164 <test+0x1164>
     b2c:	bcs	1254 <test+0x1254>
     b30:	ldrb	r0, [r6]
     b34:	cmp	r0, #58	; 0x3a
     b38:	bne	1254 <test+0x1254>
     b3c:	add	r1, r6, #1
     b40:	sub	r0, r7, r1
     b44:	cmp	r0, #2
     b48:	blt	ba8 <test+0xba8>
     b4c:	ldrb	r0, [r1]
     b50:	cmp	r0, #32
     b54:	bls	b98 <test+0xb98>
     b58:	mov	r6, r1
     b5c:	cmp	r6, r7
     b60:	bne	bc0 <test+0xbc0>
     b64:	b	1164 <test+0x1164>
     b68:	bne	b7c <test+0xb7c>
     b6c:	mov	r6, r1
     b70:	ldrb	r0, [r6, #1]!
     b74:	cmp	r0, #32
     b78:	bhi	b8c <test+0xb8c>
     b7c:	mov	r0, r5
     b80:	mov	r2, r7
     b84:	bl	0 <flatcc_json_parser_space_ext>
     b88:	mov	r6, r0
     b8c:	cmp	r6, r7
     b90:	bne	b2c <test+0xb2c>
     b94:	b	1164 <test+0x1164>
     b98:	bne	ba8 <test+0xba8>
     b9c:	ldrb	r0, [r6, #2]!
     ba0:	cmp	r0, #32
     ba4:	bhi	bb8 <test+0xbb8>
     ba8:	mov	r0, r5
     bac:	mov	r2, r7
     bb0:	bl	0 <flatcc_json_parser_space_ext>
     bb4:	mov	r6, r0
     bb8:	cmp	r6, r7
     bbc:	beq	1164 <test+0x1164>
     bc0:	ldrb	r0, [r6]
     bc4:	cmp	r0, #34	; 0x22
     bc8:	bne	bd4 <test+0xbd4>
     bcc:	add	r6, r6, #1
     bd0:	b	bec <test+0xbec>
     bd4:	mov	r0, r5
     bd8:	mov	r1, r6
     bdc:	mov	r2, r7
     be0:	mov	r3, #16
     be4:	bl	0 <flatcc_json_parser_set_error>
     be8:	mov	r6, r0
     bec:	mov	r0, r5
     bf0:	mov	r1, r6
     bf4:	mov	r2, r7
     bf8:	bl	0 <flatcc_json_parser_string_part>
     bfc:	cmp	r0, r7
     c00:	beq	11c8 <test+0x11c8>
     c04:	mov	sl, r0
     c08:	ldrb	r0, [r0]
     c0c:	cmp	r0, #34	; 0x22
     c10:	bne	c28 <test+0xc28>
     c14:	sub	r2, sl, r6
     c18:	mov	r0, r9
     c1c:	mov	r1, r6
     c20:	bl	0 <flatcc_builder_create_string>
     c24:	b	cc0 <test+0xcc0>
     c28:	mov	r0, r9
     c2c:	bl	0 <flatcc_builder_start_string>
     c30:	mov	r0, r9
     c34:	sub	r9, sl, r6
     c38:	mov	r1, r9
     c3c:	bl	0 <flatcc_builder_extend_string>
     c40:	cmp	r0, #0
     c44:	beq	1354 <test+0x1354>
     c48:	mov	r1, r6
     c4c:	mov	r2, r9
     c50:	bl	0 <memcpy>
     c54:	ldr	r9, [sp, #16]
     c58:	mov	r0, r5
     c5c:	mov	r1, sl
     c60:	mov	r2, r7
     c64:	add	r3, sp, #20
     c68:	bl	0 <flatcc_json_parser_string_escape>
     c6c:	ldrb	r2, [sp, #20]
     c70:	ldr	r1, [sp, #8]
     c74:	mov	r6, r0
     c78:	mov	r0, r9
     c7c:	bl	0 <flatcc_builder_append_string>
     c80:	mov	r0, r5
     c84:	mov	r1, r6
     c88:	mov	r2, r7
     c8c:	bl	0 <flatcc_json_parser_string_part>
     c90:	cmp	r0, r7
     c94:	beq	11c8 <test+0x11c8>
     c98:	mov	sl, r0
     c9c:	sub	r2, r0, r6
     ca0:	mov	r0, r9
     ca4:	mov	r1, r6
     ca8:	bl	0 <flatcc_builder_append_string>
     cac:	ldrb	r0, [sl]
     cb0:	cmp	r0, #34	; 0x22
     cb4:	bne	c58 <test+0xc58>
     cb8:	mov	r0, r9
     cbc:	bl	0 <flatcc_builder_end_string>
     cc0:	mov	r6, r0
     cc4:	cmp	r0, #0
     cc8:	beq	1280 <test+0x1280>
     ccc:	mov	r0, r9
     cd0:	mov	r1, #10
     cd4:	bl	0 <flatcc_builder_table_add_offset>
     cd8:	cmp	r0, #0
     cdc:	beq	1280 <test+0x1280>
     ce0:	cmp	sl, r7
     ce4:	str	r6, [r0]
     ce8:	beq	d00 <test+0xd00>
     cec:	ldrb	r0, [sl]
     cf0:	cmp	r0, #34	; 0x22
     cf4:	bne	d00 <test+0xd00>
     cf8:	add	r1, sl, #1
     cfc:	b	978 <test+0x978>
     d00:	mov	r0, r5
     d04:	mov	r1, sl
     d08:	mov	r2, r7
     d0c:	mov	r3, #20
     d10:	bl	0 <flatcc_json_parser_set_error>
     d14:	mov	r1, r0
     d18:	b	978 <test+0x978>
     d1c:	mov	r1, r7
     d20:	b	d28 <test+0xd28>
     d24:	mov	r1, r0
     d28:	mov	r0, r5
     d2c:	mov	r2, r7
     d30:	mov	r3, #20
     d34:	bl	0 <flatcc_json_parser_set_error>
     d38:	mov	r1, r0
     d3c:	sub	r0, r7, r1
     d40:	cmp	r0, #2
     d44:	blt	db0 <test+0xdb0>
     d48:	ldrb	r0, [r1]
     d4c:	cmp	r0, #32
     d50:	bls	d9c <test+0xd9c>
     d54:	mov	sl, r1
     d58:	cmp	sl, r7
     d5c:	beq	1164 <test+0x1164>
     d60:	bcs	11a8 <test+0x11a8>
     d64:	ldrb	r0, [sl]
     d68:	cmp	r0, #58	; 0x3a
     d6c:	bne	11a8 <test+0x11a8>
     d70:	add	r1, sl, #1
     d74:	sub	r0, r7, r1
     d78:	cmp	r0, #2
     d7c:	blt	ddc <test+0xddc>
     d80:	ldrb	r0, [r1]
     d84:	cmp	r0, #32
     d88:	bls	dcc <test+0xdcc>
     d8c:	mov	sl, r1
     d90:	cmp	sl, r7
     d94:	bne	df4 <test+0xdf4>
     d98:	b	1164 <test+0x1164>
     d9c:	bne	db0 <test+0xdb0>
     da0:	mov	sl, r1
     da4:	ldrb	r0, [sl, #1]!
     da8:	cmp	r0, #32
     dac:	bhi	dc0 <test+0xdc0>
     db0:	mov	r0, r5
     db4:	mov	r2, r7
     db8:	bl	0 <flatcc_json_parser_space_ext>
     dbc:	mov	sl, r0
     dc0:	cmp	sl, r7
     dc4:	bne	d60 <test+0xd60>
     dc8:	b	1164 <test+0x1164>
     dcc:	bne	ddc <test+0xddc>
     dd0:	ldrb	r0, [sl, #2]!
     dd4:	cmp	r0, #32
     dd8:	bhi	dec <test+0xdec>
     ddc:	mov	r0, r5
     de0:	mov	r2, r7
     de4:	bl	0 <flatcc_json_parser_space_ext>
     de8:	mov	sl, r0
     dec:	cmp	sl, r7
     df0:	beq	1164 <test+0x1164>
     df4:	mov	r0, r9
     df8:	mov	r1, #1
     dfc:	mov	r2, #8
     e00:	mov	r3, #8
     e04:	bl	0 <flatcc_builder_table_add>
     e08:	cmp	r0, #0
     e0c:	beq	1280 <test+0x1280>
     e10:	mov	r3, r0
     e14:	mov	r0, r5
     e18:	mov	r1, sl
     e1c:	mov	r2, r7
     e20:	bl	0 <flatcc_json_parser_double>
     e24:	mov	r1, r0
     e28:	cmp	sl, r0
     e2c:	bne	978 <test+0x978>
     e30:	b	1280 <test+0x1280>
     e34:	mov	r2, r7
     e38:	cmp	r0, #46	; 0x2e
     e3c:	bne	eac <test+0xeac>
     e40:	mov	r1, r2
     e44:	mov	r0, r5
     e48:	mov	r2, r7
     e4c:	mov	r3, #5
     e50:	b	ea4 <test+0xea4>
     e54:	mov	r2, r7
     e58:	cmp	r0, #46	; 0x2e
     e5c:	bne	1024 <test+0x1024>
     e60:	mov	r1, r2
     e64:	mov	r0, r5
     e68:	mov	r2, r7
     e6c:	mov	r3, #5
     e70:	b	101c <test+0x101c>
     e74:	add	r2, r0, #1
     e78:	b	eac <test+0xeac>
     e7c:	add	r2, r0, #1
     e80:	b	1024 <test+0x1024>
     e84:	mov	r1, r7
     e88:	b	e98 <test+0xe98>
     e8c:	mov	r1, r7
     e90:	b	1010 <test+0x1010>
     e94:	mov	r1, r0
     e98:	mov	r0, r5
     e9c:	mov	r2, r7
     ea0:	mov	r3, #20
     ea4:	bl	0 <flatcc_json_parser_set_error>
     ea8:	mov	r2, r0
     eac:	sub	r0, r7, r2
     eb0:	cmp	r0, #2
     eb4:	blt	ee8 <test+0xee8>
     eb8:	ldrb	r0, [r2]
     ebc:	cmp	r0, #32
     ec0:	bls	ed4 <test+0xed4>
     ec4:	mov	sl, r2
     ec8:	cmp	sl, r7
     ecc:	bne	f04 <test+0xf04>
     ed0:	b	1164 <test+0x1164>
     ed4:	bne	ee8 <test+0xee8>
     ed8:	mov	sl, r2
     edc:	ldrb	r0, [sl, #1]!
     ee0:	cmp	r0, #32
     ee4:	bhi	efc <test+0xefc>
     ee8:	mov	r1, r2
     eec:	mov	r0, r5
     ef0:	mov	r2, r7
     ef4:	bl	0 <flatcc_json_parser_space_ext>
     ef8:	mov	sl, r0
     efc:	cmp	sl, r7
     f00:	beq	1164 <test+0x1164>
     f04:	bcs	11a8 <test+0x11a8>
     f08:	ldrb	r0, [sl]
     f0c:	cmp	r0, #58	; 0x3a
     f10:	bne	11a8 <test+0x11a8>
     f14:	add	r1, sl, #1
     f18:	sub	r0, r7, r1
     f1c:	cmp	r0, #2
     f20:	blt	f50 <test+0xf50>
     f24:	ldrb	r0, [r1]
     f28:	cmp	r0, #32
     f2c:	bls	f40 <test+0xf40>
     f30:	mov	sl, r1
     f34:	cmp	sl, r7
     f38:	bne	f68 <test+0xf68>
     f3c:	b	1164 <test+0x1164>
     f40:	bne	f50 <test+0xf50>
     f44:	ldrb	r0, [sl, #2]!
     f48:	cmp	r0, #32
     f4c:	bhi	f60 <test+0xf60>
     f50:	mov	r0, r5
     f54:	mov	r2, r7
     f58:	bl	0 <flatcc_json_parser_space_ext>
     f5c:	mov	sl, r0
     f60:	cmp	sl, r7
     f64:	beq	1164 <test+0x1164>
     f68:	mov	r0, r9
     f6c:	mov	r1, #3
     f70:	mov	r2, #8
     f74:	mov	r3, #8
     f78:	bl	0 <flatcc_builder_table_add>
     f7c:	cmp	r0, #0
     f80:	beq	1280 <test+0x1280>
     f84:	mov	r6, r0
     f88:	mov	r0, #0
     f8c:	mov	r1, sl
     f90:	mov	r2, r7
     f94:	sub	r3, fp, #44	; 0x2c
     f98:	str	r0, [fp, #-36]	; 0xffffffdc
     f9c:	str	r0, [fp, #-40]	; 0xffffffd8
     fa0:	str	r0, [fp, #-44]	; 0xffffffd4
     fa4:	str	r0, [r6]
     fa8:	str	r0, [r6, #4]
     fac:	sub	r0, fp, #40	; 0x28
     fb0:	str	r0, [sp]
     fb4:	mov	r0, r5
     fb8:	bl	0 <flatcc_json_parser_integer>
     fbc:	cmp	r0, sl
     fc0:	mov	r1, sl
     fc4:	beq	970 <test+0x970>
     fc8:	ldr	r3, [fp, #-44]	; 0xffffffd4
     fcc:	mov	r2, r0
     fd0:	ldr	r0, [fp, #-40]	; 0xffffffd8
     fd4:	ldr	r1, [fp, #-36]	; 0xffffffdc
     fd8:	cmp	r3, #0
     fdc:	beq	ffc <test+0xffc>
     fe0:	subs	r3, r0, #1
     fe4:	sbcs	r3, r1, #-2147483648	; 0x80000000
     fe8:	bcs	91c <test+0x91c>
     fec:	rsbs	r0, r0, #0
     ff0:	rsc	r1, r1, #0
     ff4:	strd	r0, [r6]
     ff8:	b	96c <test+0x96c>
     ffc:	cmn	r1, #1
    1000:	ble	944 <test+0x944>
    1004:	strd	r0, [r6]
    1008:	b	96c <test+0x96c>
    100c:	mov	r1, r0
    1010:	mov	r0, r5
    1014:	mov	r2, r7
    1018:	mov	r3, #20
    101c:	bl	0 <flatcc_json_parser_set_error>
    1020:	mov	r2, r0
    1024:	sub	r0, r7, r2
    1028:	cmp	r0, #2
    102c:	blt	1060 <test+0x1060>
    1030:	ldrb	r0, [r2]
    1034:	cmp	r0, #32
    1038:	bls	104c <test+0x104c>
    103c:	mov	sl, r2
    1040:	cmp	sl, r7
    1044:	bne	107c <test+0x107c>
    1048:	b	1164 <test+0x1164>
    104c:	bne	1060 <test+0x1060>
    1050:	mov	sl, r2
    1054:	ldrb	r0, [sl, #1]!
    1058:	cmp	r0, #32
    105c:	bhi	1074 <test+0x1074>
    1060:	mov	r1, r2
    1064:	mov	r0, r5
    1068:	mov	r2, r7
    106c:	bl	0 <flatcc_json_parser_space_ext>
    1070:	mov	sl, r0
    1074:	cmp	sl, r7
    1078:	beq	1164 <test+0x1164>
    107c:	bcs	11a8 <test+0x11a8>
    1080:	ldrb	r0, [sl]
    1084:	cmp	r0, #58	; 0x3a
    1088:	bne	11a8 <test+0x11a8>
    108c:	add	r1, sl, #1
    1090:	sub	r0, r7, r1
    1094:	cmp	r0, #2
    1098:	blt	10c8 <test+0x10c8>
    109c:	ldrb	r0, [r1]
    10a0:	cmp	r0, #32
    10a4:	bls	10b8 <test+0x10b8>
    10a8:	mov	sl, r1
    10ac:	cmp	sl, r7
    10b0:	bne	10e0 <test+0x10e0>
    10b4:	b	1164 <test+0x1164>
    10b8:	bne	10c8 <test+0x10c8>
    10bc:	ldrb	r0, [sl, #2]!
    10c0:	cmp	r0, #32
    10c4:	bhi	10d8 <test+0x10d8>
    10c8:	mov	r0, r5
    10cc:	mov	r2, r7
    10d0:	bl	0 <flatcc_json_parser_space_ext>
    10d4:	mov	sl, r0
    10d8:	cmp	sl, r7
    10dc:	beq	1164 <test+0x1164>
    10e0:	mov	r0, r9
    10e4:	mov	r1, #2
    10e8:	mov	r2, #4
    10ec:	mov	r3, #4
    10f0:	bl	0 <flatcc_builder_table_add>
    10f4:	cmp	r0, #0
    10f8:	beq	1280 <test+0x1280>
    10fc:	mov	r6, r0
    1100:	mov	r0, #0
    1104:	mov	r1, sl
    1108:	mov	r2, r7
    110c:	sub	r3, fp, #44	; 0x2c
    1110:	str	r0, [fp, #-36]	; 0xffffffdc
    1114:	str	r0, [fp, #-40]	; 0xffffffd8
    1118:	str	r0, [fp, #-44]	; 0xffffffd4
    111c:	str	r0, [r6]
    1120:	sub	r0, fp, #40	; 0x28
    1124:	str	r0, [sp]
    1128:	mov	r0, r5
    112c:	bl	0 <flatcc_json_parser_integer>
    1130:	cmp	r0, sl
    1134:	mov	r1, sl
    1138:	beq	970 <test+0x970>
    113c:	mov	r2, r0
    1140:	ldr	r0, [fp, #-44]	; 0xffffffd4
    1144:	cmp	r0, #0
    1148:	bne	91c <test+0x91c>
    114c:	ldr	r0, [fp, #-36]	; 0xffffffdc
    1150:	cmp	r0, #0
    1154:	bne	944 <test+0x944>
    1158:	ldr	r0, [fp, #-40]	; 0xffffffd8
    115c:	str	r0, [r6]
    1160:	b	96c <test+0x96c>
    1164:	ldr	r3, [r4]
    1168:	movw	r0, #0
    116c:	mov	r1, #13
    1170:	mov	r2, #1
    1174:	movt	r0, #0
    1178:	bl	0 <fwrite>
    117c:	mov	sl, r7
    1180:	b	1280 <test+0x1280>
    1184:	add	r0, sp, #24
    1188:	mov	r1, ip
    118c:	mov	r2, r8
    1190:	mov	r3, #13
    1194:	b	1278 <test+0x1278>
    1198:	ldr	r0, [r4]
    119c:	movw	r1, #0
    11a0:	mov	r2, #123	; 0x7b
    11a4:	b	1260 <test+0x1260>
    11a8:	ldr	r0, [r4]
    11ac:	movw	r1, #0
    11b0:	mov	r2, #58	; 0x3a
    11b4:	movt	r1, #0
    11b8:	bl	0 <fprintf>
    11bc:	add	r0, sp, #24
    11c0:	mov	r1, sl
    11c4:	b	1270 <test+0x1270>
    11c8:	mov	sl, r7
    11cc:	b	1280 <test+0x1280>
    11d0:	add	r0, sp, #24
    11d4:	mov	r1, ip
    11d8:	mov	r2, r7
    11dc:	mov	r3, #13
    11e0:	bl	0 <flatcc_json_parser_set_error>
    11e4:	ldr	r9, [sp, #16]
    11e8:	movw	r4, #0
    11ec:	mov	sl, r0
    11f0:	movt	r4, #0
    11f4:	b	1280 <test+0x1280>
    11f8:	mov	r0, #125	; 0x7d
    11fc:	cmp	r6, r7
    1200:	bcs	1244 <test+0x1244>
    1204:	cmp	r0, #125	; 0x7d
    1208:	bne	1244 <test+0x1244>
    120c:	mov	r0, r9
    1210:	bl	0 <flatcc_builder_end_table>
    1214:	mov	r1, r0
    1218:	mov	r0, r9
    121c:	bl	0 <flatcc_builder_end_buffer>
    1220:	add	r1, r6, #1
    1224:	sub	r0, r7, r1
    1228:	cmp	r0, #2
    122c:	blt	1318 <test+0x1318>
    1230:	ldrb	r0, [r1]
    1234:	cmp	r0, #32
    1238:	bls	1308 <test+0x1308>
    123c:	mov	r6, r1
    1240:	b	1328 <test+0x1328>
    1244:	ldr	r0, [r4]
    1248:	movw	r1, #0
    124c:	mov	r2, #125	; 0x7d
    1250:	b	1260 <test+0x1260>
    1254:	ldr	r0, [r4]
    1258:	movw	r1, #0
    125c:	mov	r2, #58	; 0x3a
    1260:	movt	r1, #0
    1264:	bl	0 <fprintf>
    1268:	add	r0, sp, #24
    126c:	mov	r1, r6
    1270:	mov	r2, r7
    1274:	mov	r3, #17
    1278:	bl	0 <flatcc_json_parser_set_error>
    127c:	mov	sl, r0
    1280:	ldr	r0, [sp, #48]	; 0x30
    1284:	ldr	r4, [r4]
    1288:	cmp	r0, #0
    128c:	bne	12ac <test+0x12ac>
    1290:	movw	r0, #0
    1294:	mov	r1, #15
    1298:	mov	r2, #1
    129c:	mov	r3, r4
    12a0:	movt	r0, #0
    12a4:	bl	0 <fwrite>
    12a8:	b	12e4 <test+0x12e4>
    12ac:	ldr	r5, [sp, #28]
    12b0:	ldr	r6, [sp, #40]	; 0x28
    12b4:	ldr	r7, [sp, #60]	; 0x3c
    12b8:	bl	0 <flatcc_json_parser_error_string>
    12bc:	movw	r1, #0
    12c0:	str	r0, [sp]
    12c4:	sub	r0, r7, r5
    12c8:	mov	r2, r6
    12cc:	movt	r1, #0
    12d0:	add	r3, r0, #1
    12d4:	mov	r0, r4
    12d8:	bl	0 <fprintf>
    12dc:	mov	r0, r9
    12e0:	bl	0 <flatcc_builder_reset>
    12e4:	ldr	r0, [sp, #48]	; 0x30
    12e8:	ldr	r1, [sp, #12]
    12ec:	str	r0, [r1]
    12f0:	mov	r0, sl
    12f4:	sub	sp, fp, #28
    12f8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    12fc:	add	r0, sp, #24
    1300:	mov	r2, r7
    1304:	b	1190 <test+0x1190>
    1308:	bne	1318 <test+0x1318>
    130c:	ldrb	r0, [r6, #2]!
    1310:	cmp	r0, #32
    1314:	bhi	1328 <test+0x1328>
    1318:	add	r0, sp, #24
    131c:	mov	r2, r7
    1320:	bl	0 <flatcc_json_parser_space_ext>
    1324:	mov	r6, r0
    1328:	cmp	r6, r7
    132c:	mov	sl, r7
    1330:	beq	1280 <test+0x1280>
    1334:	ldr	r3, [r4]
    1338:	movw	r0, #0
    133c:	mov	r1, #26
    1340:	mov	r2, #1
    1344:	movt	r0, #0
    1348:	bl	0 <fwrite>
    134c:	mov	sl, r6
    1350:	b	1280 <test+0x1280>
    1354:	ldr	r9, [sp, #16]
    1358:	b	1280 <test+0x1280>

0000135c <main>:
    135c:	push	{r4, sl, fp, lr}
    1360:	add	fp, sp, #8
    1364:	sub	sp, sp, #240	; 0xf0
    1368:	mvn	r0, #0
    136c:	add	r4, sp, #4
    1370:	str	r0, [fp, #-12]
    1374:	mov	r0, r4
    1378:	bl	0 <flatcc_builder_init>
    137c:	movw	r1, #0
    1380:	movw	r0, #645	; 0x285
    1384:	sub	r3, fp, #12
    1388:	movt	r1, #0
    138c:	add	r2, r1, r0
    1390:	mov	r0, r4
    1394:	bl	0 <test>
    1398:	mov	r0, r4
    139c:	bl	0 <flatcc_builder_clear>
    13a0:	ldr	r0, [fp, #-12]
    13a4:	sub	sp, fp, #8
    13a8:	pop	{r4, sl, fp, pc}
