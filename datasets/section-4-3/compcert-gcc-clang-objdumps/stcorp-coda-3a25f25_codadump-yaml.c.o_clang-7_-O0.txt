
../compcert-repos/stcorp-coda-3a25f25/CMakeFiles/codadump.dir/tools/codadump/codadump-yaml.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <print_yaml_data>:
       0:	push	{r4, r5, fp, lr}
       4:	add	fp, sp, #8
       8:	sub	sp, sp, #552	; 0x228
       c:	str	r0, [fp, #-12]
      10:	ldr	r0, [fp, #-12]
      14:	movw	r1, #0
      18:	movt	r1, #0
      1c:	str	r0, [r1]
      20:	movw	r0, #0
      24:	movt	r0, #0
      28:	ldr	r0, [r0]
      2c:	sub	r1, fp, #16
      30:	bl	0 <coda_open>
      34:	str	r0, [sp, #20]
      38:	ldr	r0, [sp, #20]
      3c:	cmp	r0, #0
      40:	beq	88 <print_yaml_data+0x88>
      44:	bl	0 <coda_get_errno>
      48:	ldr	r0, [r0]
      4c:	cmn	r0, #21
      50:	bne	88 <print_yaml_data+0x88>
      54:	movw	r0, #0
      58:	bl	0 <coda_set_option_use_mmap>
      5c:	movw	lr, #0
      60:	movt	lr, #0
      64:	ldr	lr, [lr]
      68:	str	r0, [sp, #16]
      6c:	mov	r0, lr
      70:	sub	r1, fp, #16
      74:	bl	0 <coda_open>
      78:	str	r0, [sp, #20]
      7c:	movw	r0, #1
      80:	bl	0 <coda_set_option_use_mmap>
      84:	str	r0, [sp, #12]
      88:	ldr	r0, [sp, #20]
      8c:	cmp	r0, #0
      90:	beq	a0 <print_yaml_data+0xa0>
      94:	movw	r0, #0
      98:	movt	r0, #0
      9c:	blx	r0
      a0:	ldr	r1, [fp, #-16]
      a4:	add	r0, sp, #24
      a8:	bl	0 <coda_cursor_set_product>
      ac:	cmp	r0, #0
      b0:	beq	c0 <print_yaml_data+0xc0>
      b4:	movw	r0, #0
      b8:	movt	r0, #0
      bc:	blx	r0
      c0:	movw	r0, #0
      c4:	movt	r0, #0
      c8:	ldr	r0, [r0]
      cc:	movw	r1, #0
      d0:	cmp	r0, r1
      d4:	beq	10c <print_yaml_data+0x10c>
      d8:	movw	r0, #0
      dc:	movt	r0, #0
      e0:	ldr	r1, [r0]
      e4:	add	r0, sp, #24
      e8:	bl	0 <coda_cursor_goto>
      ec:	str	r0, [sp, #20]
      f0:	ldr	r0, [sp, #20]
      f4:	cmp	r0, #0
      f8:	beq	108 <print_yaml_data+0x108>
      fc:	movw	r0, #0
     100:	movt	r0, #0
     104:	blx	r0
     108:	b	10c <print_yaml_data+0x10c>
     10c:	movw	r0, #0
     110:	bl	0 <coda_set_option_perform_boundary_checks>
     114:	add	lr, sp, #24
     118:	str	r0, [sp, #8]
     11c:	mov	r0, lr
     120:	movw	r1, #0
     124:	bl	13c <print_data>
     128:	ldr	r0, [fp, #-16]
     12c:	bl	0 <coda_close>
     130:	str	r0, [sp, #4]
     134:	sub	sp, fp, #8
     138:	pop	{r4, r5, fp, pc}

0000013c <print_data>:
     13c:	push	{r4, r5, fp, lr}
     140:	add	fp, sp, #8
     144:	sub	sp, sp, #448	; 0x1c0
     148:	str	r0, [fp, #-12]
     14c:	str	r1, [fp, #-16]
     150:	movw	r0, #0
     154:	str	r0, [fp, #-24]	; 0xffffffe8
     158:	movw	r0, #0
     15c:	movt	r0, #0
     160:	ldr	r0, [r0]
     164:	cmp	r0, #0
     168:	beq	258 <print_data+0x11c>
     16c:	ldr	r0, [fp, #-12]
     170:	sub	r1, fp, #24
     174:	bl	0 <coda_cursor_has_attributes>
     178:	cmp	r0, #0
     17c:	beq	18c <print_data+0x50>
     180:	movw	r0, #0
     184:	movt	r0, #0
     188:	blx	r0
     18c:	ldr	r0, [fp, #-24]	; 0xffffffe8
     190:	cmp	r0, #0
     194:	beq	254 <print_data+0x118>
     198:	ldr	r0, [fp, #-16]
     19c:	cmp	r0, #0
     1a0:	beq	1b8 <print_data+0x7c>
     1a4:	movw	r0, #0
     1a8:	movt	r0, #0
     1ac:	bl	d3c <ff_printf>
     1b0:	str	r0, [sp, #156]	; 0x9c
     1b4:	bl	da0 <indent>
     1b8:	movw	r0, #0
     1bc:	movt	r0, #0
     1c0:	bl	d3c <ff_printf>
     1c4:	ldr	lr, [fp, #-12]
     1c8:	str	r0, [sp, #152]	; 0x98
     1cc:	mov	r0, lr
     1d0:	bl	0 <coda_cursor_goto_attributes>
     1d4:	cmp	r0, #0
     1d8:	beq	1e8 <print_data+0xac>
     1dc:	movw	r0, #0
     1e0:	movt	r0, #0
     1e4:	blx	r0
     1e8:	movw	r0, #0
     1ec:	movt	r0, #0
     1f0:	ldr	r1, [r0]
     1f4:	add	r1, r1, #1
     1f8:	str	r1, [r0]
     1fc:	ldr	r0, [fp, #-12]
     200:	movw	r1, #1
     204:	bl	13c <print_data>
     208:	movw	r0, #0
     20c:	movt	r0, #0
     210:	ldr	r1, [r0]
     214:	mvn	lr, #0
     218:	add	r1, r1, lr
     21c:	str	r1, [r0]
     220:	ldr	r0, [fp, #-12]
     224:	bl	0 <coda_cursor_goto_parent>
     228:	movw	r1, #0
     22c:	movt	r1, #0
     230:	str	r0, [sp, #148]	; 0x94
     234:	mov	r0, r1
     238:	bl	e38 <fi_printf>
     23c:	movw	r1, #0
     240:	movt	r1, #0
     244:	ldr	lr, [r1]
     248:	add	lr, lr, #1
     24c:	str	lr, [r1]
     250:	str	r0, [sp, #144]	; 0x90
     254:	b	258 <print_data+0x11c>
     258:	ldr	r0, [fp, #-12]
     25c:	sub	r1, fp, #20
     260:	bl	0 <coda_cursor_get_type_class>
     264:	cmp	r0, #0
     268:	beq	278 <print_data+0x13c>
     26c:	movw	r0, #0
     270:	movt	r0, #0
     274:	blx	r0
     278:	ldr	r0, [fp, #-20]	; 0xffffffec
     27c:	cmp	r0, #6
     280:	str	r0, [sp, #140]	; 0x8c
     284:	bhi	d10 <print_data+0xbd4>
     288:	add	r0, pc, #8
     28c:	ldr	r1, [sp, #140]	; 0x8c
     290:	ldr	r0, [r0, r1, lsl #2]
     294:	mov	pc, r0
     298:	.word	0x000002b4
     29c:	.word	0x00000598
     2a0:	.word	0x00000734
     2a4:	.word	0x00000734
     2a8:	.word	0x00000734
     2ac:	.word	0x00000734
     2b0:	.word	0x00000b80
     2b4:	ldr	r0, [fp, #-12]
     2b8:	sub	r1, fp, #28
     2bc:	bl	0 <coda_cursor_get_num_elements>
     2c0:	cmp	r0, #0
     2c4:	beq	2d4 <print_data+0x198>
     2c8:	movw	r0, #0
     2cc:	movt	r0, #0
     2d0:	blx	r0
     2d4:	ldr	r0, [fp, #-28]	; 0xffffffe4
     2d8:	cmp	r0, #0
     2dc:	ble	584 <print_data+0x448>
     2e0:	ldr	r0, [fp, #-16]
     2e4:	cmp	r0, #0
     2e8:	beq	2fc <print_data+0x1c0>
     2ec:	movw	r0, #0
     2f0:	movt	r0, #0
     2f4:	bl	d3c <ff_printf>
     2f8:	str	r0, [sp, #136]	; 0x88
     2fc:	ldr	r0, [fp, #-12]
     300:	sub	r1, fp, #32
     304:	bl	0 <coda_cursor_get_type>
     308:	cmp	r0, #0
     30c:	beq	31c <print_data+0x1e0>
     310:	movw	r0, #0
     314:	movt	r0, #0
     318:	blx	r0
     31c:	ldr	r0, [fp, #-32]	; 0xffffffe0
     320:	sub	r1, fp, #36	; 0x24
     324:	bl	0 <coda_type_get_record_union_status>
     328:	cmp	r0, #0
     32c:	beq	33c <print_data+0x200>
     330:	movw	r0, #0
     334:	movt	r0, #0
     338:	blx	r0
     33c:	ldr	r0, [fp, #-36]	; 0xffffffdc
     340:	cmp	r0, #0
     344:	beq	41c <print_data+0x2e0>
     348:	ldr	r0, [fp, #-12]
     34c:	sub	r1, fp, #40	; 0x28
     350:	bl	0 <coda_cursor_get_available_union_field_index>
     354:	cmp	r0, #0
     358:	beq	368 <print_data+0x22c>
     35c:	movw	r0, #0
     360:	movt	r0, #0
     364:	blx	r0
     368:	ldr	r0, [fp, #-32]	; 0xffffffe0
     36c:	ldr	r1, [fp, #-40]	; 0xffffffd8
     370:	sub	r2, fp, #44	; 0x2c
     374:	bl	0 <coda_type_get_record_field_name>
     378:	cmp	r0, #0
     37c:	beq	38c <print_data+0x250>
     380:	movw	r0, #0
     384:	movt	r0, #0
     388:	blx	r0
     38c:	ldr	r0, [fp, #-12]
     390:	ldr	r1, [fp, #-40]	; 0xffffffd8
     394:	bl	0 <coda_cursor_goto_record_field_by_index>
     398:	cmp	r0, #0
     39c:	beq	3ac <print_data+0x270>
     3a0:	movw	r0, #0
     3a4:	movt	r0, #0
     3a8:	blx	r0
     3ac:	ldr	r0, [fp, #-16]
     3b0:	cmp	r0, #0
     3b4:	beq	3bc <print_data+0x280>
     3b8:	bl	da0 <indent>
     3bc:	ldr	r1, [fp, #-44]	; 0xffffffd4
     3c0:	movw	r0, #0
     3c4:	movt	r0, #0
     3c8:	bl	d3c <ff_printf>
     3cc:	movw	r1, #0
     3d0:	movt	r1, #0
     3d4:	ldr	lr, [r1]
     3d8:	add	lr, lr, #1
     3dc:	str	lr, [r1]
     3e0:	ldr	r1, [fp, #-12]
     3e4:	str	r0, [sp, #132]	; 0x84
     3e8:	mov	r0, r1
     3ec:	movw	r1, #1
     3f0:	bl	13c <print_data>
     3f4:	movw	r0, #0
     3f8:	movt	r0, #0
     3fc:	ldr	r1, [r0]
     400:	mvn	lr, #0
     404:	add	r1, r1, lr
     408:	str	r1, [r0]
     40c:	ldr	r0, [fp, #-12]
     410:	bl	0 <coda_cursor_goto_parent>
     414:	str	r0, [sp, #128]	; 0x80
     418:	b	580 <print_data+0x444>
     41c:	movw	r0, #1
     420:	str	r0, [fp, #-48]	; 0xffffffd0
     424:	ldr	r0, [fp, #-12]
     428:	bl	0 <coda_cursor_goto_first_record_field>
     42c:	cmp	r0, #0
     430:	beq	440 <print_data+0x304>
     434:	movw	r0, #0
     438:	movt	r0, #0
     43c:	blx	r0
     440:	movw	r0, #0
     444:	str	r0, [fp, #-40]	; 0xffffffd8
     448:	ldr	r0, [fp, #-40]	; 0xffffffd8
     44c:	ldr	r1, [fp, #-28]	; 0xffffffe4
     450:	cmp	r0, r1
     454:	bge	574 <print_data+0x438>
     458:	ldr	r0, [fp, #-32]	; 0xffffffe0
     45c:	ldr	r1, [fp, #-40]	; 0xffffffd8
     460:	sub	r2, fp, #56	; 0x38
     464:	bl	0 <coda_type_get_record_field_hidden_status>
     468:	cmp	r0, #0
     46c:	beq	47c <print_data+0x340>
     470:	movw	r0, #0
     474:	movt	r0, #0
     478:	blx	r0
     47c:	ldr	r0, [fp, #-56]	; 0xffffffc8
     480:	cmp	r0, #0
     484:	bne	52c <print_data+0x3f0>
     488:	ldr	r0, [fp, #-32]	; 0xffffffe0
     48c:	ldr	r1, [fp, #-40]	; 0xffffffd8
     490:	sub	r2, fp, #52	; 0x34
     494:	bl	0 <coda_type_get_record_field_name>
     498:	cmp	r0, #0
     49c:	beq	4ac <print_data+0x370>
     4a0:	movw	r0, #0
     4a4:	movt	r0, #0
     4a8:	blx	r0
     4ac:	ldr	r0, [fp, #-16]
     4b0:	cmp	r0, #0
     4b4:	bne	4c4 <print_data+0x388>
     4b8:	ldr	r0, [fp, #-48]	; 0xffffffd0
     4bc:	cmp	r0, #0
     4c0:	bne	4c8 <print_data+0x38c>
     4c4:	bl	da0 <indent>
     4c8:	ldr	r0, [fp, #-48]	; 0xffffffd0
     4cc:	cmp	r0, #0
     4d0:	beq	4dc <print_data+0x3a0>
     4d4:	movw	r0, #0
     4d8:	str	r0, [fp, #-48]	; 0xffffffd0
     4dc:	ldr	r1, [fp, #-52]	; 0xffffffcc
     4e0:	movw	r0, #0
     4e4:	movt	r0, #0
     4e8:	bl	d3c <ff_printf>
     4ec:	movw	r1, #0
     4f0:	movt	r1, #0
     4f4:	ldr	lr, [r1]
     4f8:	add	lr, lr, #1
     4fc:	str	lr, [r1]
     500:	ldr	r1, [fp, #-12]
     504:	str	r0, [sp, #124]	; 0x7c
     508:	mov	r0, r1
     50c:	movw	r1, #1
     510:	bl	13c <print_data>
     514:	movw	r0, #0
     518:	movt	r0, #0
     51c:	ldr	r1, [r0]
     520:	mvn	lr, #0
     524:	add	r1, r1, lr
     528:	str	r1, [r0]
     52c:	ldr	r0, [fp, #-40]	; 0xffffffd8
     530:	ldr	r1, [fp, #-28]	; 0xffffffe4
     534:	sub	r1, r1, #1
     538:	cmp	r0, r1
     53c:	bge	560 <print_data+0x424>
     540:	ldr	r0, [fp, #-12]
     544:	bl	0 <coda_cursor_goto_next_record_field>
     548:	cmp	r0, #0
     54c:	beq	55c <print_data+0x420>
     550:	movw	r0, #0
     554:	movt	r0, #0
     558:	blx	r0
     55c:	b	560 <print_data+0x424>
     560:	b	564 <print_data+0x428>
     564:	ldr	r0, [fp, #-40]	; 0xffffffd8
     568:	add	r0, r0, #1
     56c:	str	r0, [fp, #-40]	; 0xffffffd8
     570:	b	448 <print_data+0x30c>
     574:	ldr	r0, [fp, #-12]
     578:	bl	0 <coda_cursor_goto_parent>
     57c:	str	r0, [sp, #120]	; 0x78
     580:	b	594 <print_data+0x458>
     584:	movw	r0, #0
     588:	movt	r0, #0
     58c:	bl	d3c <ff_printf>
     590:	str	r0, [sp, #116]	; 0x74
     594:	b	d10 <print_data+0xbd4>
     598:	sub	r2, fp, #88	; 0x58
     59c:	ldr	r0, [fp, #-12]
     5a0:	sub	r1, fp, #92	; 0x5c
     5a4:	bl	0 <coda_cursor_get_array_dim>
     5a8:	cmp	r0, #0
     5ac:	beq	5bc <print_data+0x480>
     5b0:	movw	r0, #0
     5b4:	movt	r0, #0
     5b8:	blx	r0
     5bc:	ldr	r0, [fp, #-92]	; 0xffffffa4
     5c0:	cmp	r0, #0
     5c4:	blt	720 <print_data+0x5e4>
     5c8:	movw	r0, #1
     5cc:	str	r0, [fp, #-96]	; 0xffffffa0
     5d0:	movw	r0, #0
     5d4:	str	r0, [fp, #-100]	; 0xffffff9c
     5d8:	ldr	r0, [fp, #-100]	; 0xffffff9c
     5dc:	ldr	r1, [fp, #-92]	; 0xffffffa4
     5e0:	cmp	r0, r1
     5e4:	bge	614 <print_data+0x4d8>
     5e8:	ldr	r0, [fp, #-100]	; 0xffffff9c
     5ec:	sub	r1, fp, #88	; 0x58
     5f0:	add	r0, r1, r0, lsl #2
     5f4:	ldr	r0, [r0]
     5f8:	ldr	r1, [fp, #-96]	; 0xffffffa0
     5fc:	mul	r0, r1, r0
     600:	str	r0, [fp, #-96]	; 0xffffffa0
     604:	ldr	r0, [fp, #-100]	; 0xffffff9c
     608:	add	r0, r0, #1
     60c:	str	r0, [fp, #-100]	; 0xffffff9c
     610:	b	5d8 <print_data+0x49c>
     614:	ldr	r0, [fp, #-96]	; 0xffffffa0
     618:	cmp	r0, #0
     61c:	ble	70c <print_data+0x5d0>
     620:	movw	r0, #0
     624:	movt	r0, #0
     628:	bl	d3c <ff_printf>
     62c:	ldr	lr, [fp, #-12]
     630:	str	r0, [sp, #112]	; 0x70
     634:	mov	r0, lr
     638:	bl	0 <coda_cursor_goto_first_array_element>
     63c:	cmp	r0, #0
     640:	beq	650 <print_data+0x514>
     644:	movw	r0, #0
     648:	movt	r0, #0
     64c:	blx	r0
     650:	movw	r0, #0
     654:	str	r0, [fp, #-100]	; 0xffffff9c
     658:	ldr	r0, [fp, #-100]	; 0xffffff9c
     65c:	ldr	r1, [fp, #-96]	; 0xffffffa0
     660:	cmp	r0, r1
     664:	bge	6fc <print_data+0x5c0>
     668:	movw	r0, #0
     66c:	movt	r0, #0
     670:	bl	e38 <fi_printf>
     674:	movw	lr, #0
     678:	movt	lr, #0
     67c:	ldr	r1, [lr]
     680:	add	r1, r1, #1
     684:	str	r1, [lr]
     688:	ldr	r1, [fp, #-12]
     68c:	str	r0, [sp, #108]	; 0x6c
     690:	mov	r0, r1
     694:	movw	r1, #0
     698:	bl	13c <print_data>
     69c:	movw	r0, #0
     6a0:	movt	r0, #0
     6a4:	ldr	r1, [r0]
     6a8:	mvn	lr, #0
     6ac:	add	r1, r1, lr
     6b0:	str	r1, [r0]
     6b4:	ldr	r0, [fp, #-100]	; 0xffffff9c
     6b8:	ldr	r1, [fp, #-96]	; 0xffffffa0
     6bc:	sub	r1, r1, #1
     6c0:	cmp	r0, r1
     6c4:	bge	6e8 <print_data+0x5ac>
     6c8:	ldr	r0, [fp, #-12]
     6cc:	bl	0 <coda_cursor_goto_next_array_element>
     6d0:	cmp	r0, #0
     6d4:	beq	6e4 <print_data+0x5a8>
     6d8:	movw	r0, #0
     6dc:	movt	r0, #0
     6e0:	blx	r0
     6e4:	b	6e8 <print_data+0x5ac>
     6e8:	b	6ec <print_data+0x5b0>
     6ec:	ldr	r0, [fp, #-100]	; 0xffffff9c
     6f0:	add	r0, r0, #1
     6f4:	str	r0, [fp, #-100]	; 0xffffff9c
     6f8:	b	658 <print_data+0x51c>
     6fc:	ldr	r0, [fp, #-12]
     700:	bl	0 <coda_cursor_goto_parent>
     704:	str	r0, [sp, #104]	; 0x68
     708:	b	71c <print_data+0x5e0>
     70c:	movw	r0, #0
     710:	movt	r0, #0
     714:	bl	d3c <ff_printf>
     718:	str	r0, [sp, #100]	; 0x64
     71c:	b	730 <print_data+0x5f4>
     720:	movw	r0, #0
     724:	movt	r0, #0
     728:	bl	d3c <ff_printf>
     72c:	str	r0, [sp, #96]	; 0x60
     730:	b	d10 <print_data+0xbd4>
     734:	ldr	r0, [fp, #-12]
     738:	sub	r1, fp, #104	; 0x68
     73c:	bl	0 <coda_cursor_get_read_type>
     740:	cmp	r0, #0
     744:	beq	754 <print_data+0x618>
     748:	movw	r0, #0
     74c:	movt	r0, #0
     750:	blx	r0
     754:	ldr	r0, [fp, #-104]	; 0xffffff98
     758:	add	r0, r0, #1
     75c:	cmp	r0, #13
     760:	str	r0, [sp, #92]	; 0x5c
     764:	bhi	b7c <print_data+0xa40>
     768:	add	r0, pc, #8
     76c:	ldr	r1, [sp, #92]	; 0x5c
     770:	ldr	r0, [r0, r1, lsl #2]
     774:	mov	pc, r0
     778:	.word	0x00000b6c
     77c:	.word	0x00000a08
     780:	.word	0x00000a40
     784:	.word	0x00000a08
     788:	.word	0x00000a40
     78c:	.word	0x00000a08
     790:	.word	0x00000a40
     794:	.word	0x00000a78
     798:	.word	0x00000ac0
     79c:	.word	0x00000b08
     7a0:	.word	0x00000b08
     7a4:	.word	0x000007b0
     7a8:	.word	0x00000804
     7ac:	.word	0x000008e4
     7b0:	ldr	r0, [fp, #-12]
     7b4:	sub	r1, fp, #105	; 0x69
     7b8:	bl	0 <coda_cursor_read_char>
     7bc:	cmp	r0, #0
     7c0:	beq	7d0 <print_data+0x694>
     7c4:	movw	r0, #0
     7c8:	movt	r0, #0
     7cc:	blx	r0
     7d0:	movw	r0, #0
     7d4:	movt	r0, #0
     7d8:	bl	d3c <ff_printf>
     7dc:	sub	lr, fp, #105	; 0x69
     7e0:	str	r0, [sp, #88]	; 0x58
     7e4:	mov	r0, lr
     7e8:	movw	r1, #1
     7ec:	bl	ea0 <print_escaped>
     7f0:	movw	r0, #0
     7f4:	movt	r0, #0
     7f8:	bl	d3c <ff_printf>
     7fc:	str	r0, [sp, #84]	; 0x54
     800:	b	b7c <print_data+0xa40>
     804:	ldr	r0, [fp, #-12]
     808:	sub	r1, fp, #112	; 0x70
     80c:	bl	0 <coda_cursor_get_string_length>
     810:	cmp	r0, #0
     814:	beq	824 <print_data+0x6e8>
     818:	movw	r0, #0
     81c:	movt	r0, #0
     820:	blx	r0
     824:	ldr	r0, [fp, #-112]	; 0xffffff90
     828:	add	r0, r0, #1
     82c:	bl	0 <malloc>
     830:	str	r0, [fp, #-116]	; 0xffffff8c
     834:	ldr	r0, [fp, #-116]	; 0xffffff8c
     838:	movw	lr, #0
     83c:	cmp	r0, lr
     840:	bne	878 <print_data+0x73c>
     844:	ldr	r0, [fp, #-112]	; 0xffffff90
     848:	add	r2, r0, #1
     84c:	mvn	r0, #0
     850:	movw	r1, #0
     854:	movt	r1, #0
     858:	movw	r3, #0
     85c:	movt	r3, #0
     860:	movw	ip, #361	; 0x169
     864:	str	ip, [sp]
     868:	bl	0 <coda_set_error>
     86c:	movw	r0, #0
     870:	movt	r0, #0
     874:	blx	r0
     878:	ldr	r0, [fp, #-12]
     87c:	ldr	r1, [fp, #-116]	; 0xffffff8c
     880:	ldr	r2, [fp, #-112]	; 0xffffff90
     884:	add	r2, r2, #1
     888:	bl	0 <coda_cursor_read_string>
     88c:	cmp	r0, #0
     890:	beq	8a0 <print_data+0x764>
     894:	movw	r0, #0
     898:	movt	r0, #0
     89c:	blx	r0
     8a0:	movw	r0, #0
     8a4:	movt	r0, #0
     8a8:	bl	d3c <ff_printf>
     8ac:	ldr	lr, [fp, #-116]	; 0xffffff8c
     8b0:	ldr	r1, [fp, #-112]	; 0xffffff90
     8b4:	str	r0, [sp, #80]	; 0x50
     8b8:	mov	r0, lr
     8bc:	bl	ea0 <print_escaped>
     8c0:	ldr	r1, [fp, #-112]	; 0xffffff90
     8c4:	movw	r0, #0
     8c8:	movt	r0, #0
     8cc:	bl	d3c <ff_printf>
     8d0:	ldr	r1, [fp, #-116]	; 0xffffff8c
     8d4:	str	r0, [sp, #76]	; 0x4c
     8d8:	mov	r0, r1
     8dc:	bl	0 <free>
     8e0:	b	b7c <print_data+0xa40>
     8e4:	ldr	r0, [fp, #-12]
     8e8:	sub	r1, fp, #128	; 0x80
     8ec:	bl	0 <coda_cursor_get_bit_size>
     8f0:	cmp	r0, #0
     8f4:	beq	904 <print_data+0x7c8>
     8f8:	movw	r0, #0
     8fc:	movt	r0, #0
     900:	blx	r0
     904:	ldr	r0, [fp, #-128]	; 0xffffff80
     908:	ldr	r1, [fp, #-124]	; 0xffffff84
     90c:	lsr	r2, r0, #3
     910:	orr	r2, r2, r1, lsl #29
     914:	asr	r1, r1, #3
     918:	and	r0, r0, #7
     91c:	adds	r3, r2, #1
     920:	adc	ip, r1, #0
     924:	cmp	r0, #0
     928:	movne	r2, r3
     92c:	cmp	r0, #0
     930:	movne	r1, ip
     934:	str	r2, [fp, #-136]	; 0xffffff78
     938:	str	r1, [fp, #-132]	; 0xffffff7c
     93c:	ldr	r0, [fp, #-136]	; 0xffffff78
     940:	bl	0 <malloc>
     944:	str	r0, [fp, #-140]	; 0xffffff74
     948:	ldr	r0, [fp, #-140]	; 0xffffff74
     94c:	movw	r1, #0
     950:	cmp	r0, r1
     954:	bne	988 <print_data+0x84c>
     958:	ldr	r2, [fp, #-136]	; 0xffffff78
     95c:	mvn	r0, #0
     960:	movw	r1, #0
     964:	movt	r1, #0
     968:	movw	r3, #0
     96c:	movt	r3, #0
     970:	movw	ip, #392	; 0x188
     974:	str	ip, [sp]
     978:	bl	0 <coda_set_error>
     97c:	movw	r0, #0
     980:	movt	r0, #0
     984:	blx	r0
     988:	ldr	r0, [fp, #-12]
     98c:	ldr	r1, [fp, #-140]	; 0xffffff74
     990:	ldr	r2, [fp, #-128]	; 0xffffff80
     994:	ldr	r3, [fp, #-124]	; 0xffffff84
     998:	mov	ip, sp
     99c:	str	r3, [ip, #4]
     9a0:	str	r2, [ip]
     9a4:	mov	r2, #0
     9a8:	str	r2, [sp, #72]	; 0x48
     9ac:	ldr	r3, [sp, #72]	; 0x48
     9b0:	bl	0 <coda_cursor_read_bits>
     9b4:	cmp	r0, #0
     9b8:	beq	9c8 <print_data+0x88c>
     9bc:	movw	r0, #0
     9c0:	movt	r0, #0
     9c4:	blx	r0
     9c8:	movw	r0, #0
     9cc:	movt	r0, #0
     9d0:	bl	d3c <ff_printf>
     9d4:	ldr	lr, [fp, #-140]	; 0xffffff74
     9d8:	ldr	r1, [fp, #-136]	; 0xffffff78
     9dc:	str	r0, [sp, #68]	; 0x44
     9e0:	mov	r0, lr
     9e4:	bl	ea0 <print_escaped>
     9e8:	movw	r0, #0
     9ec:	movt	r0, #0
     9f0:	bl	d3c <ff_printf>
     9f4:	ldr	r1, [fp, #-140]	; 0xffffff74
     9f8:	str	r0, [sp, #64]	; 0x40
     9fc:	mov	r0, r1
     a00:	bl	0 <free>
     a04:	b	b7c <print_data+0xa40>
     a08:	ldr	r0, [fp, #-12]
     a0c:	sub	r1, fp, #144	; 0x90
     a10:	bl	0 <coda_cursor_read_int32>
     a14:	cmp	r0, #0
     a18:	beq	a28 <print_data+0x8ec>
     a1c:	movw	r0, #0
     a20:	movt	r0, #0
     a24:	blx	r0
     a28:	ldr	r1, [fp, #-144]	; 0xffffff70
     a2c:	movw	r0, #0
     a30:	movt	r0, #0
     a34:	bl	d3c <ff_printf>
     a38:	str	r0, [sp, #60]	; 0x3c
     a3c:	b	b7c <print_data+0xa40>
     a40:	ldr	r0, [fp, #-12]
     a44:	sub	r1, fp, #148	; 0x94
     a48:	bl	0 <coda_cursor_read_uint32>
     a4c:	cmp	r0, #0
     a50:	beq	a60 <print_data+0x924>
     a54:	movw	r0, #0
     a58:	movt	r0, #0
     a5c:	blx	r0
     a60:	ldr	r1, [fp, #-148]	; 0xffffff6c
     a64:	movw	r0, #0
     a68:	movt	r0, #0
     a6c:	bl	d3c <ff_printf>
     a70:	str	r0, [sp, #56]	; 0x38
     a74:	b	b7c <print_data+0xa40>
     a78:	ldr	r0, [fp, #-12]
     a7c:	sub	r1, fp, #160	; 0xa0
     a80:	bl	0 <coda_cursor_read_int64>
     a84:	cmp	r0, #0
     a88:	beq	a98 <print_data+0x95c>
     a8c:	movw	r0, #0
     a90:	movt	r0, #0
     a94:	blx	r0
     a98:	sub	r2, fp, #181	; 0xb5
     a9c:	ldr	r0, [fp, #-160]	; 0xffffff60
     aa0:	ldr	r1, [fp, #-156]	; 0xffffff64
     aa4:	bl	0 <coda_str64>
     aa8:	sub	r1, fp, #181	; 0xb5
     aac:	movw	r0, #0
     ab0:	movt	r0, #0
     ab4:	bl	d3c <ff_printf>
     ab8:	str	r0, [sp, #52]	; 0x34
     abc:	b	b7c <print_data+0xa40>
     ac0:	ldr	r0, [fp, #-12]
     ac4:	sub	r1, fp, #192	; 0xc0
     ac8:	bl	0 <coda_cursor_read_uint64>
     acc:	cmp	r0, #0
     ad0:	beq	ae0 <print_data+0x9a4>
     ad4:	movw	r0, #0
     ad8:	movt	r0, #0
     adc:	blx	r0
     ae0:	sub	r2, fp, #213	; 0xd5
     ae4:	ldr	r0, [fp, #-192]	; 0xffffff40
     ae8:	ldr	r1, [fp, #-188]	; 0xffffff44
     aec:	bl	0 <coda_str64u>
     af0:	sub	r1, fp, #213	; 0xd5
     af4:	movw	r0, #0
     af8:	movt	r0, #0
     afc:	bl	d3c <ff_printf>
     b00:	str	r0, [sp, #48]	; 0x30
     b04:	b	b7c <print_data+0xa40>
     b08:	ldr	r0, [fp, #-12]
     b0c:	sub	r1, fp, #224	; 0xe0
     b10:	bl	0 <coda_cursor_read_double>
     b14:	cmp	r0, #0
     b18:	beq	b28 <print_data+0x9ec>
     b1c:	movw	r0, #0
     b20:	movt	r0, #0
     b24:	blx	r0
     b28:	ldr	r0, [fp, #-104]	; 0xffffff98
     b2c:	cmp	r0, #8
     b30:	bne	b50 <print_data+0xa14>
     b34:	vldr	d16, [fp, #-224]	; 0xffffff20
     b38:	movw	r0, #0
     b3c:	movt	r0, #0
     b40:	vmov	r2, r3, d16
     b44:	bl	d3c <ff_printf>
     b48:	str	r0, [sp, #44]	; 0x2c
     b4c:	b	b68 <print_data+0xa2c>
     b50:	vldr	d16, [fp, #-224]	; 0xffffff20
     b54:	movw	r0, #0
     b58:	movt	r0, #0
     b5c:	vmov	r2, r3, d16
     b60:	bl	d3c <ff_printf>
     b64:	str	r0, [sp, #40]	; 0x28
     b68:	b	b7c <print_data+0xa40>
     b6c:	movw	r0, #0
     b70:	movt	r0, #0
     b74:	bl	d3c <ff_printf>
     b78:	str	r0, [sp, #36]	; 0x24
     b7c:	b	d10 <print_data+0xbd4>
     b80:	ldr	r0, [fp, #-12]
     b84:	add	r1, sp, #228	; 0xe4
     b88:	bl	0 <coda_cursor_get_special_type>
     b8c:	cmp	r0, #0
     b90:	beq	ba0 <print_data+0xa64>
     b94:	movw	r0, #0
     b98:	movt	r0, #0
     b9c:	blx	r0
     ba0:	ldr	r0, [sp, #228]	; 0xe4
     ba4:	cmp	r0, #3
     ba8:	str	r0, [sp, #32]
     bac:	bhi	d0c <print_data+0xbd0>
     bb0:	add	r0, pc, #8
     bb4:	ldr	r1, [sp, #32]
     bb8:	ldr	r0, [r0, r1, lsl #2]
     bbc:	mov	pc, r0
     bc0:	.word	0x00000bd0
     bc4:	.word	0x00000be4
     bc8:	.word	0x00000c20
     bcc:	.word	0x00000cc8
     bd0:	movw	r0, #0
     bd4:	movt	r0, #0
     bd8:	bl	d3c <ff_printf>
     bdc:	str	r0, [sp, #28]
     be0:	b	d0c <print_data+0xbd0>
     be4:	ldr	r0, [fp, #-12]
     be8:	add	r1, sp, #216	; 0xd8
     bec:	bl	0 <coda_cursor_read_double>
     bf0:	cmp	r0, #0
     bf4:	beq	c04 <print_data+0xac8>
     bf8:	movw	r0, #0
     bfc:	movt	r0, #0
     c00:	blx	r0
     c04:	vldr	d16, [sp, #216]	; 0xd8
     c08:	movw	r0, #0
     c0c:	movt	r0, #0
     c10:	vmov	r2, r3, d16
     c14:	bl	d3c <ff_printf>
     c18:	str	r0, [sp, #24]
     c1c:	b	d0c <print_data+0xbd0>
     c20:	ldr	r0, [fp, #-12]
     c24:	add	r1, sp, #208	; 0xd0
     c28:	bl	0 <coda_cursor_read_double>
     c2c:	cmp	r0, #0
     c30:	beq	c40 <print_data+0xb04>
     c34:	movw	r0, #0
     c38:	movt	r0, #0
     c3c:	blx	r0
     c40:	vldr	d0, [sp, #208]	; 0xd0
     c44:	bl	0 <coda_isNaN>
     c48:	cmp	r0, #0
     c4c:	bne	c60 <print_data+0xb24>
     c50:	vldr	d0, [sp, #208]	; 0xd0
     c54:	bl	0 <coda_isInf>
     c58:	cmp	r0, #0
     c5c:	beq	c7c <print_data+0xb40>
     c60:	vldr	d16, [sp, #208]	; 0xd0
     c64:	movw	r0, #0
     c68:	movt	r0, #0
     c6c:	vmov	r2, r3, d16
     c70:	bl	d3c <ff_printf>
     c74:	str	r0, [sp, #20]
     c78:	b	cc4 <print_data+0xb88>
     c7c:	add	r1, sp, #181	; 0xb5
     c80:	vldr	d0, [sp, #208]	; 0xd0
     c84:	movw	r0, #0
     c88:	movt	r0, #0
     c8c:	bl	0 <coda_time_double_to_string>
     c90:	cmp	r0, #0
     c94:	beq	cac <print_data+0xb70>
     c98:	movw	r0, #0
     c9c:	movt	r0, #0
     ca0:	bl	d3c <ff_printf>
     ca4:	str	r0, [sp, #16]
     ca8:	b	cc0 <print_data+0xb84>
     cac:	add	r1, sp, #181	; 0xb5
     cb0:	movw	r0, #0
     cb4:	movt	r0, #0
     cb8:	bl	d3c <ff_printf>
     cbc:	str	r0, [sp, #12]
     cc0:	b	cc4 <print_data+0xb88>
     cc4:	b	d0c <print_data+0xbd0>
     cc8:	ldr	r0, [fp, #-12]
     ccc:	add	r1, sp, #168	; 0xa8
     cd0:	add	r2, sp, #160	; 0xa0
     cd4:	bl	0 <coda_cursor_read_complex_double_split>
     cd8:	cmp	r0, #0
     cdc:	beq	cec <print_data+0xbb0>
     ce0:	movw	r0, #0
     ce4:	movt	r0, #0
     ce8:	blx	r0
     cec:	vldr	d16, [sp, #168]	; 0xa8
     cf0:	vldr	d17, [sp, #160]	; 0xa0
     cf4:	movw	r0, #0
     cf8:	movt	r0, #0
     cfc:	vmov	r2, r3, d16
     d00:	vstr	d17, [sp]
     d04:	bl	d3c <ff_printf>
     d08:	str	r0, [sp, #8]
     d0c:	b	d10 <print_data+0xbd4>
     d10:	ldr	r0, [fp, #-24]	; 0xffffffe8
     d14:	cmp	r0, #0
     d18:	beq	d34 <print_data+0xbf8>
     d1c:	movw	r0, #0
     d20:	movt	r0, #0
     d24:	ldr	r1, [r0]
     d28:	mvn	r2, #0
     d2c:	add	r1, r1, r2
     d30:	str	r1, [r0]
     d34:	sub	sp, fp, #8
     d38:	pop	{r4, r5, fp, pc}

00000d3c <ff_printf>:
     d3c:	sub	sp, sp, #12
     d40:	push	{fp, lr}
     d44:	mov	fp, sp
     d48:	sub	sp, sp, #20
     d4c:	str	r3, [fp, #16]
     d50:	str	r2, [fp, #12]
     d54:	str	r1, [fp, #8]
     d58:	str	r0, [fp, #-4]
     d5c:	add	r0, fp, #8
     d60:	str	r0, [sp, #8]
     d64:	movw	r0, #0
     d68:	movt	r0, #0
     d6c:	ldr	r0, [r0]
     d70:	ldr	r1, [fp, #-4]
     d74:	ldr	r2, [sp, #8]
     d78:	bl	0 <vfprintf>
     d7c:	str	r0, [fp, #-8]
     d80:	add	r0, sp, #8
     d84:	ldr	r1, [fp, #-8]
     d88:	str	r0, [sp, #4]
     d8c:	mov	r0, r1
     d90:	mov	sp, fp
     d94:	pop	{fp, lr}
     d98:	add	sp, sp, #12
     d9c:	bx	lr

00000da0 <indent>:
     da0:	push	{fp, lr}
     da4:	mov	fp, sp
     da8:	sub	sp, sp, #8
     dac:	movw	r0, #0
     db0:	movt	r0, #0
     db4:	ldr	r0, [r0]
     db8:	cmp	r0, #0
     dbc:	blt	dc4 <indent+0x24>
     dc0:	b	de4 <indent+0x44>
     dc4:	movw	r0, #0
     dc8:	movt	r0, #0
     dcc:	movw	r1, #0
     dd0:	movt	r1, #0
     dd4:	movw	r2, #44	; 0x2c
     dd8:	movw	r3, #0
     ddc:	movt	r3, #0
     de0:	bl	0 <__assert_fail>
     de4:	movw	r0, #0
     de8:	movt	r0, #0
     dec:	ldr	r0, [r0]
     df0:	str	r0, [sp, #4]
     df4:	ldr	r0, [sp, #4]
     df8:	cmp	r0, #0
     dfc:	ble	e30 <indent+0x90>
     e00:	movw	r0, #0
     e04:	movt	r0, #0
     e08:	ldr	r0, [r0]
     e0c:	movw	r1, #0
     e10:	movt	r1, #0
     e14:	bl	0 <fprintf>
     e18:	str	r0, [sp]
     e1c:	ldr	r0, [sp, #4]
     e20:	mvn	r1, #0
     e24:	add	r0, r0, r1
     e28:	str	r0, [sp, #4]
     e2c:	b	df4 <indent+0x54>
     e30:	mov	sp, fp
     e34:	pop	{fp, pc}

00000e38 <fi_printf>:
     e38:	sub	sp, sp, #12
     e3c:	push	{fp, lr}
     e40:	mov	fp, sp
     e44:	sub	sp, sp, #20
     e48:	str	r3, [fp, #16]
     e4c:	str	r2, [fp, #12]
     e50:	str	r1, [fp, #8]
     e54:	str	r0, [fp, #-4]
     e58:	bl	da0 <indent>
     e5c:	add	r0, fp, #8
     e60:	str	r0, [sp, #8]
     e64:	movw	r0, #0
     e68:	movt	r0, #0
     e6c:	ldr	r0, [r0]
     e70:	ldr	r1, [fp, #-4]
     e74:	ldr	r2, [sp, #8]
     e78:	bl	0 <vfprintf>
     e7c:	str	r0, [fp, #-8]
     e80:	add	r0, sp, #8
     e84:	ldr	r1, [fp, #-8]
     e88:	str	r0, [sp, #4]
     e8c:	mov	r0, r1
     e90:	mov	sp, fp
     e94:	pop	{fp, lr}
     e98:	add	sp, sp, #12
     e9c:	bx	lr

00000ea0 <print_escaped>:
     ea0:	push	{fp, lr}
     ea4:	mov	fp, sp
     ea8:	sub	sp, sp, #56	; 0x38
     eac:	str	r0, [fp, #-4]
     eb0:	str	r1, [fp, #-8]
     eb4:	movw	r0, #0
     eb8:	str	r0, [fp, #-12]
     ebc:	ldr	r0, [fp, #-12]
     ec0:	ldr	r1, [fp, #-8]
     ec4:	cmp	r0, r1
     ec8:	bge	103c <print_escaped+0x19c>
     ecc:	ldr	r0, [fp, #-4]
     ed0:	ldr	r1, [fp, #-12]
     ed4:	ldrb	r0, [r0, r1]
     ed8:	strb	r0, [fp, #-13]
     edc:	ldrb	r0, [fp, #-13]
     ee0:	mov	r1, r0
     ee4:	cmp	r0, #8
     ee8:	str	r1, [fp, #-20]	; 0xffffffec
     eec:	beq	f54 <print_escaped+0xb4>
     ef0:	b	ef4 <print_escaped+0x54>
     ef4:	ldr	r0, [fp, #-20]	; 0xffffffec
     ef8:	cmp	r0, #9
     efc:	beq	fa4 <print_escaped+0x104>
     f00:	b	f04 <print_escaped+0x64>
     f04:	ldr	r0, [fp, #-20]	; 0xffffffec
     f08:	cmp	r0, #10
     f0c:	beq	f7c <print_escaped+0xdc>
     f10:	b	f14 <print_escaped+0x74>
     f14:	ldr	r0, [fp, #-20]	; 0xffffffec
     f18:	cmp	r0, #12
     f1c:	beq	f68 <print_escaped+0xc8>
     f20:	b	f24 <print_escaped+0x84>
     f24:	ldr	r0, [fp, #-20]	; 0xffffffec
     f28:	cmp	r0, #13
     f2c:	beq	f90 <print_escaped+0xf0>
     f30:	b	f34 <print_escaped+0x94>
     f34:	ldr	r0, [fp, #-20]	; 0xffffffec
     f38:	cmp	r0, #34	; 0x22
     f3c:	beq	fb8 <print_escaped+0x118>
     f40:	b	f44 <print_escaped+0xa4>
     f44:	ldr	r0, [fp, #-20]	; 0xffffffec
     f48:	cmp	r0, #92	; 0x5c
     f4c:	beq	fcc <print_escaped+0x12c>
     f50:	b	fe0 <print_escaped+0x140>
     f54:	movw	r0, #0
     f58:	movt	r0, #0
     f5c:	bl	d3c <ff_printf>
     f60:	str	r0, [fp, #-24]	; 0xffffffe8
     f64:	b	1028 <print_escaped+0x188>
     f68:	movw	r0, #0
     f6c:	movt	r0, #0
     f70:	bl	d3c <ff_printf>
     f74:	str	r0, [sp, #28]
     f78:	b	1028 <print_escaped+0x188>
     f7c:	movw	r0, #0
     f80:	movt	r0, #0
     f84:	bl	d3c <ff_printf>
     f88:	str	r0, [sp, #24]
     f8c:	b	1028 <print_escaped+0x188>
     f90:	movw	r0, #0
     f94:	movt	r0, #0
     f98:	bl	d3c <ff_printf>
     f9c:	str	r0, [sp, #20]
     fa0:	b	1028 <print_escaped+0x188>
     fa4:	movw	r0, #0
     fa8:	movt	r0, #0
     fac:	bl	d3c <ff_printf>
     fb0:	str	r0, [sp, #16]
     fb4:	b	1028 <print_escaped+0x188>
     fb8:	movw	r0, #0
     fbc:	movt	r0, #0
     fc0:	bl	d3c <ff_printf>
     fc4:	str	r0, [sp, #12]
     fc8:	b	1028 <print_escaped+0x188>
     fcc:	movw	r0, #0
     fd0:	movt	r0, #0
     fd4:	bl	d3c <ff_printf>
     fd8:	str	r0, [sp, #8]
     fdc:	b	1028 <print_escaped+0x188>
     fe0:	ldrb	r0, [fp, #-13]
     fe4:	cmp	r0, #32
     fe8:	blt	1010 <print_escaped+0x170>
     fec:	ldrb	r0, [fp, #-13]
     ff0:	cmp	r0, #126	; 0x7e
     ff4:	bgt	1010 <print_escaped+0x170>
     ff8:	ldrb	r1, [fp, #-13]
     ffc:	movw	r0, #0
    1000:	movt	r0, #0
    1004:	bl	d3c <ff_printf>
    1008:	str	r0, [sp, #4]
    100c:	b	1024 <print_escaped+0x184>
    1010:	ldrb	r1, [fp, #-13]
    1014:	movw	r0, #0
    1018:	movt	r0, #0
    101c:	bl	d3c <ff_printf>
    1020:	str	r0, [sp]
    1024:	b	1028 <print_escaped+0x188>
    1028:	b	102c <print_escaped+0x18c>
    102c:	ldr	r0, [fp, #-12]
    1030:	add	r0, r0, #1
    1034:	str	r0, [fp, #-12]
    1038:	b	ebc <print_escaped+0x1c>
    103c:	mov	sp, fp
    1040:	pop	{fp, pc}
