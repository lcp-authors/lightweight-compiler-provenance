
../compcert-repos/dvidelabs-flatcc-3b39ef7/test/reflection_test/CMakeFiles/reflection_test.dir/reflection_test.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <readfile>:
       0:	push	{fp, lr}
       4:	add	fp, sp, #4
       8:	sub	sp, sp, #40	; 0x28
       c:	str	r0, [fp, #-32]	; 0xffffffe0
      10:	str	r1, [fp, #-36]	; 0xffffffdc
      14:	str	r2, [fp, #-40]	; 0xffffffd8
      18:	ldr	r3, [fp, #-40]	; 0xffffffd8
      1c:	cmp	r3, #0
      20:	bne	2c <readfile+0x2c>
      24:	sub	r3, fp, #28
      28:	b	30 <readfile+0x30>
      2c:	ldr	r3, [fp, #-40]	; 0xffffffd8
      30:	str	r3, [fp, #-40]	; 0xffffffd8
      34:	ldr	r1, [pc, #388]	; 1c0 <readfile+0x1c0>
      38:	ldr	r0, [fp, #-32]	; 0xffffffe0
      3c:	bl	0 <fopen>
      40:	str	r0, [fp, #-20]	; 0xffffffec
      44:	mov	r3, #0
      48:	str	r3, [fp, #-8]
      4c:	mov	r3, #0
      50:	str	r3, [fp, #-16]
      54:	ldr	r3, [fp, #-20]	; 0xffffffec
      58:	cmp	r3, #0
      5c:	beq	160 <readfile+0x160>
      60:	mov	r2, #2
      64:	mov	r1, #0
      68:	ldr	r0, [fp, #-20]	; 0xffffffec
      6c:	bl	0 <fseek>
      70:	ldr	r0, [fp, #-20]	; 0xffffffec
      74:	bl	0 <ftell>
      78:	mov	r3, r0
      7c:	str	r3, [fp, #-8]
      80:	ldr	r3, [fp, #-40]	; 0xffffffd8
      84:	ldr	r2, [fp, #-8]
      88:	str	r2, [r3]
      8c:	ldr	r3, [fp, #-36]	; 0xffffffdc
      90:	cmp	r3, #0
      94:	beq	a8 <readfile+0xa8>
      98:	ldr	r2, [fp, #-8]
      9c:	ldr	r3, [fp, #-36]	; 0xffffffdc
      a0:	cmp	r2, r3
      a4:	bhi	168 <readfile+0x168>
      a8:	ldr	r0, [fp, #-20]	; 0xffffffec
      ac:	bl	0 <rewind>
      b0:	ldr	r3, [fp, #-8]
      b4:	cmp	r3, #0
      b8:	beq	c4 <readfile+0xc4>
      bc:	ldr	r3, [fp, #-8]
      c0:	b	c8 <readfile+0xc8>
      c4:	mov	r3, #1
      c8:	mov	r0, r3
      cc:	bl	0 <malloc>
      d0:	mov	r3, r0
      d4:	str	r3, [fp, #-16]
      d8:	ldr	r3, [fp, #-16]
      dc:	cmp	r3, #0
      e0:	beq	170 <readfile+0x170>
      e4:	mov	r3, #0
      e8:	str	r3, [fp, #-12]
      ec:	b	100 <readfile+0x100>
      f0:	ldr	r2, [fp, #-12]
      f4:	ldr	r3, [fp, #-24]	; 0xffffffe8
      f8:	add	r3, r2, r3
      fc:	str	r3, [fp, #-12]
     100:	ldr	r2, [fp, #-16]
     104:	ldr	r3, [fp, #-12]
     108:	add	r0, r2, r3
     10c:	ldr	r2, [fp, #-8]
     110:	ldr	r3, [fp, #-12]
     114:	sub	r2, r2, r3
     118:	ldr	r3, [fp, #-20]	; 0xffffffec
     11c:	mov	r1, #1
     120:	bl	0 <fread>
     124:	str	r0, [fp, #-24]	; 0xffffffe8
     128:	ldr	r3, [fp, #-24]	; 0xffffffe8
     12c:	cmp	r3, #0
     130:	bne	f0 <readfile+0xf0>
     134:	ldr	r2, [fp, #-12]
     138:	ldr	r3, [fp, #-8]
     13c:	cmp	r2, r3
     140:	bne	178 <readfile+0x178>
     144:	ldr	r0, [fp, #-20]	; 0xffffffec
     148:	bl	0 <fclose>
     14c:	ldr	r3, [fp, #-40]	; 0xffffffd8
     150:	ldr	r2, [fp, #-8]
     154:	str	r2, [r3]
     158:	ldr	r3, [fp, #-16]
     15c:	b	1b4 <readfile+0x1b4>
     160:	nop			; (mov r0, r0)
     164:	b	17c <readfile+0x17c>
     168:	nop			; (mov r0, r0)
     16c:	b	17c <readfile+0x17c>
     170:	nop			; (mov r0, r0)
     174:	b	17c <readfile+0x17c>
     178:	nop			; (mov r0, r0)
     17c:	ldr	r3, [fp, #-20]	; 0xffffffec
     180:	cmp	r3, #0
     184:	beq	190 <readfile+0x190>
     188:	ldr	r0, [fp, #-20]	; 0xffffffec
     18c:	bl	0 <fclose>
     190:	ldr	r3, [fp, #-16]
     194:	cmp	r3, #0
     198:	beq	1a4 <readfile+0x1a4>
     19c:	ldr	r0, [fp, #-16]
     1a0:	bl	0 <free>
     1a4:	ldr	r3, [fp, #-40]	; 0xffffffd8
     1a8:	ldr	r2, [fp, #-8]
     1ac:	str	r2, [r3]
     1b0:	mov	r3, #0
     1b4:	mov	r0, r3
     1b8:	sub	sp, fp, #4
     1bc:	pop	{fp, pc}
     1c0:	.word	0x00000000

000001c4 <flatbuffers_int32_cast_from_pe>:
     1c4:	push	{fp}		; (str fp, [sp, #-4]!)
     1c8:	add	fp, sp, #0
     1cc:	sub	sp, sp, #12
     1d0:	str	r0, [fp, #-8]
     1d4:	ldr	r3, [fp, #-8]
     1d8:	mov	r0, r3
     1dc:	add	sp, fp, #0
     1e0:	pop	{fp}		; (ldr fp, [sp], #4)
     1e4:	bx	lr

000001e8 <flatbuffers_int32_read_from_pe>:
     1e8:	push	{fp, lr}
     1ec:	add	fp, sp, #4
     1f0:	sub	sp, sp, #8
     1f4:	str	r0, [fp, #-8]
     1f8:	ldr	r3, [fp, #-8]
     1fc:	ldr	r3, [r3]
     200:	mov	r0, r3
     204:	bl	1c4 <flatbuffers_int32_cast_from_pe>
     208:	mov	r3, r0
     20c:	mov	r0, r3
     210:	sub	sp, fp, #4
     214:	pop	{fp, pc}

00000218 <flatbuffers_int64_cast_from_pe>:
     218:	push	{fp}		; (str fp, [sp, #-4]!)
     21c:	add	fp, sp, #0
     220:	sub	sp, sp, #12
     224:	strd	r0, [fp, #-12]
     228:	ldrd	r2, [fp, #-12]
     22c:	mov	r0, r2
     230:	mov	r1, r3
     234:	add	sp, fp, #0
     238:	pop	{fp}		; (ldr fp, [sp], #4)
     23c:	bx	lr

00000240 <flatbuffers_int64_read_from_pe>:
     240:	push	{fp, lr}
     244:	add	fp, sp, #4
     248:	sub	sp, sp, #8
     24c:	str	r0, [fp, #-8]
     250:	ldr	r3, [fp, #-8]
     254:	ldrd	r2, [r3]
     258:	mov	r0, r2
     25c:	mov	r1, r3
     260:	bl	218 <flatbuffers_int64_cast_from_pe>
     264:	mov	r2, r0
     268:	mov	r3, r1
     26c:	mov	r0, r2
     270:	mov	r1, r3
     274:	sub	sp, fp, #4
     278:	pop	{fp, pc}

0000027c <__flatbuffers_uoffset_cast_from_pe>:
     27c:	push	{fp}		; (str fp, [sp, #-4]!)
     280:	add	fp, sp, #0
     284:	sub	sp, sp, #12
     288:	str	r0, [fp, #-8]
     28c:	ldr	r3, [fp, #-8]
     290:	mov	r0, r3
     294:	add	sp, fp, #0
     298:	pop	{fp}		; (ldr fp, [sp], #4)
     29c:	bx	lr

000002a0 <__flatbuffers_uoffset_read_from_pe>:
     2a0:	push	{fp, lr}
     2a4:	add	fp, sp, #4
     2a8:	sub	sp, sp, #8
     2ac:	str	r0, [fp, #-8]
     2b0:	ldr	r3, [fp, #-8]
     2b4:	ldr	r3, [r3]
     2b8:	mov	r0, r3
     2bc:	bl	27c <__flatbuffers_uoffset_cast_from_pe>
     2c0:	mov	r3, r0
     2c4:	mov	r0, r3
     2c8:	sub	sp, fp, #4
     2cc:	pop	{fp, pc}

000002d0 <__flatbuffers_soffset_cast_from_pe>:
     2d0:	push	{fp}		; (str fp, [sp, #-4]!)
     2d4:	add	fp, sp, #0
     2d8:	sub	sp, sp, #12
     2dc:	str	r0, [fp, #-8]
     2e0:	ldr	r3, [fp, #-8]
     2e4:	mov	r0, r3
     2e8:	add	sp, fp, #0
     2ec:	pop	{fp}		; (ldr fp, [sp], #4)
     2f0:	bx	lr

000002f4 <__flatbuffers_soffset_read_from_pe>:
     2f4:	push	{fp, lr}
     2f8:	add	fp, sp, #4
     2fc:	sub	sp, sp, #8
     300:	str	r0, [fp, #-8]
     304:	ldr	r3, [fp, #-8]
     308:	ldr	r3, [r3]
     30c:	mov	r0, r3
     310:	bl	2d0 <__flatbuffers_soffset_cast_from_pe>
     314:	mov	r3, r0
     318:	mov	r0, r3
     31c:	sub	sp, fp, #4
     320:	pop	{fp, pc}

00000324 <__flatbuffers_voffset_cast_from_pe>:
     324:	push	{fp}		; (str fp, [sp, #-4]!)
     328:	add	fp, sp, #0
     32c:	sub	sp, sp, #12
     330:	mov	r3, r0
     334:	strh	r3, [fp, #-6]
     338:	ldrh	r3, [fp, #-6]
     33c:	mov	r0, r3
     340:	add	sp, fp, #0
     344:	pop	{fp}		; (ldr fp, [sp], #4)
     348:	bx	lr

0000034c <__flatbuffers_voffset_read_from_pe>:
     34c:	push	{fp, lr}
     350:	add	fp, sp, #4
     354:	sub	sp, sp, #8
     358:	str	r0, [fp, #-8]
     35c:	ldr	r3, [fp, #-8]
     360:	ldrh	r3, [r3]
     364:	mov	r0, r3
     368:	bl	324 <__flatbuffers_voffset_cast_from_pe>
     36c:	mov	r3, r0
     370:	mov	r0, r3
     374:	sub	sp, fp, #4
     378:	pop	{fp, pc}

0000037c <__flatbuffers_thash_cast_from_pe>:
     37c:	push	{fp}		; (str fp, [sp, #-4]!)
     380:	add	fp, sp, #0
     384:	sub	sp, sp, #12
     388:	str	r0, [fp, #-8]
     38c:	ldr	r3, [fp, #-8]
     390:	mov	r0, r3
     394:	add	sp, fp, #0
     398:	pop	{fp}		; (ldr fp, [sp], #4)
     39c:	bx	lr

000003a0 <__flatbuffers_thash_cast_from_le>:
     3a0:	push	{fp}		; (str fp, [sp, #-4]!)
     3a4:	add	fp, sp, #0
     3a8:	sub	sp, sp, #12
     3ac:	str	r0, [fp, #-8]
     3b0:	ldr	r3, [fp, #-8]
     3b4:	mov	r0, r3
     3b8:	add	sp, fp, #0
     3bc:	pop	{fp}		; (ldr fp, [sp], #4)
     3c0:	bx	lr

000003c4 <__flatbuffers_thash_read_from_pe>:
     3c4:	push	{fp, lr}
     3c8:	add	fp, sp, #4
     3cc:	sub	sp, sp, #8
     3d0:	str	r0, [fp, #-8]
     3d4:	ldr	r3, [fp, #-8]
     3d8:	ldr	r3, [r3]
     3dc:	mov	r0, r3
     3e0:	bl	37c <__flatbuffers_thash_cast_from_pe>
     3e4:	mov	r3, r0
     3e8:	mov	r0, r3
     3ec:	sub	sp, fp, #4
     3f0:	pop	{fp, pc}

000003f4 <flatbuffers_vec_len>:
     3f4:	push	{fp, lr}
     3f8:	add	fp, sp, #4
     3fc:	sub	sp, sp, #8
     400:	str	r0, [fp, #-8]
     404:	ldr	r3, [fp, #-8]
     408:	cmp	r3, #0
     40c:	beq	428 <flatbuffers_vec_len+0x34>
     410:	ldr	r3, [fp, #-8]
     414:	sub	r3, r3, #4
     418:	mov	r0, r3
     41c:	bl	2a0 <__flatbuffers_uoffset_read_from_pe>
     420:	mov	r3, r0
     424:	b	42c <flatbuffers_vec_len+0x38>
     428:	mov	r3, #0
     42c:	mov	r0, r3
     430:	sub	sp, fp, #4
     434:	pop	{fp, pc}

00000438 <__flatbuffers_string_cmp>:
     438:	push	{fp, lr}
     43c:	add	fp, sp, #4
     440:	sub	sp, sp, #16
     444:	str	r0, [fp, #-8]
     448:	str	r1, [fp, #-12]
     44c:	str	r2, [fp, #-16]
     450:	ldr	r1, [fp, #-12]
     454:	ldr	r0, [fp, #-8]
     458:	bl	0 <strcmp>
     45c:	mov	r3, r0
     460:	mov	r0, r3
     464:	sub	sp, fp, #4
     468:	pop	{fp, pc}

0000046c <flatbuffers_has_identifier>:
     46c:	push	{fp, lr}
     470:	add	fp, sp, #4
     474:	sub	sp, sp, #16
     478:	str	r0, [fp, #-16]
     47c:	str	r1, [fp, #-20]	; 0xffffffec
     480:	mov	r3, #0
     484:	str	r3, [fp, #-12]
     488:	ldr	r3, [fp, #-20]	; 0xffffffec
     48c:	cmp	r3, #0
     490:	bne	49c <flatbuffers_has_identifier+0x30>
     494:	mov	r3, #1
     498:	b	500 <flatbuffers_has_identifier+0x94>
     49c:	sub	r3, fp, #12
     4a0:	mov	r2, #4
     4a4:	ldr	r1, [fp, #-20]	; 0xffffffec
     4a8:	mov	r0, r3
     4ac:	bl	0 <strncpy>
     4b0:	ldr	r3, [fp, #-12]
     4b4:	mov	r0, r3
     4b8:	bl	3a0 <__flatbuffers_thash_cast_from_le>
     4bc:	mov	r3, r0
     4c0:	str	r3, [fp, #-12]
     4c4:	ldr	r3, [fp, #-16]
     4c8:	add	r3, r3, #4
     4cc:	mov	r0, r3
     4d0:	bl	3c4 <__flatbuffers_thash_read_from_pe>
     4d4:	str	r0, [fp, #-8]
     4d8:	ldr	r3, [fp, #-12]
     4dc:	cmp	r3, #0
     4e0:	beq	4f4 <flatbuffers_has_identifier+0x88>
     4e4:	ldr	r3, [fp, #-12]
     4e8:	ldr	r2, [fp, #-8]
     4ec:	cmp	r2, r3
     4f0:	bne	4fc <flatbuffers_has_identifier+0x90>
     4f4:	mov	r3, #1
     4f8:	b	500 <flatbuffers_has_identifier+0x94>
     4fc:	mov	r3, #0
     500:	mov	r0, r3
     504:	sub	sp, fp, #4
     508:	pop	{fp, pc}

0000050c <reflection_BaseType_cast_from_pe>:
     50c:	push	{fp}		; (str fp, [sp, #-4]!)
     510:	add	fp, sp, #0
     514:	sub	sp, sp, #12
     518:	mov	r3, r0
     51c:	strb	r3, [fp, #-5]
     520:	ldrsb	r3, [fp, #-5]
     524:	mov	r0, r3
     528:	add	sp, fp, #0
     52c:	pop	{fp}		; (ldr fp, [sp], #4)
     530:	bx	lr

00000534 <reflection_BaseType_read_from_pe>:
     534:	push	{fp, lr}
     538:	add	fp, sp, #4
     53c:	sub	sp, sp, #8
     540:	str	r0, [fp, #-8]
     544:	ldr	r3, [fp, #-8]
     548:	ldrsb	r3, [r3]
     54c:	mov	r0, r3
     550:	bl	50c <reflection_BaseType_cast_from_pe>
     554:	mov	r3, r0
     558:	mov	r0, r3
     55c:	sub	sp, fp, #4
     560:	pop	{fp, pc}

00000564 <reflection_Type_base_type>:
     564:	push	{fp, lr}
     568:	add	fp, sp, #4
     56c:	sub	sp, sp, #16
     570:	str	r0, [fp, #-16]
     574:	mov	r3, #0
     578:	strh	r3, [fp, #-6]
     57c:	ldr	r3, [fp, #-16]
     580:	cmp	r3, #0
     584:	bne	59c <reflection_Type_base_type+0x38>
     588:	ldr	r3, [pc, #176]	; 640 <reflection_Type_base_type+0xdc>
     58c:	mov	r2, #147	; 0x93
     590:	ldr	r1, [pc, #172]	; 644 <reflection_Type_base_type+0xe0>
     594:	ldr	r0, [pc, #172]	; 648 <reflection_Type_base_type+0xe4>
     598:	bl	0 <__assert_fail>
     59c:	mov	r3, #0
     5a0:	strh	r3, [fp, #-8]
     5a4:	ldr	r0, [fp, #-16]
     5a8:	bl	2f4 <__flatbuffers_soffset_read_from_pe>
     5ac:	mov	r3, r0
     5b0:	rsb	r3, r3, #0
     5b4:	ldr	r2, [fp, #-16]
     5b8:	add	r3, r2, r3
     5bc:	str	r3, [fp, #-12]
     5c0:	ldr	r0, [fp, #-12]
     5c4:	bl	34c <__flatbuffers_voffset_read_from_pe>
     5c8:	mov	r3, r0
     5cc:	mov	r2, r3
     5d0:	ldrh	r3, [fp, #-8]
     5d4:	add	r3, r3, #3
     5d8:	lsl	r3, r3, #1
     5dc:	cmp	r2, r3
     5e0:	bcc	608 <reflection_Type_base_type+0xa4>
     5e4:	ldrh	r3, [fp, #-8]
     5e8:	add	r3, r3, #2
     5ec:	lsl	r3, r3, #1
     5f0:	ldr	r2, [fp, #-12]
     5f4:	add	r3, r2, r3
     5f8:	mov	r0, r3
     5fc:	bl	34c <__flatbuffers_voffset_read_from_pe>
     600:	mov	r3, r0
     604:	strh	r3, [fp, #-6]
     608:	ldrh	r3, [fp, #-6]
     60c:	cmp	r3, #0
     610:	beq	630 <reflection_Type_base_type+0xcc>
     614:	ldrh	r3, [fp, #-6]
     618:	ldr	r2, [fp, #-16]
     61c:	add	r3, r2, r3
     620:	mov	r0, r3
     624:	bl	534 <reflection_BaseType_read_from_pe>
     628:	mov	r3, r0
     62c:	b	634 <reflection_Type_base_type+0xd0>
     630:	mov	r3, #0
     634:	mov	r0, r3
     638:	sub	sp, fp, #4
     63c:	pop	{fp, pc}
     640:	.word	0x00000450
     644:	.word	0x00000008
     648:	.word	0x00000070

0000064c <reflection_Type_element>:
     64c:	push	{fp, lr}
     650:	add	fp, sp, #4
     654:	sub	sp, sp, #16
     658:	str	r0, [fp, #-16]
     65c:	mov	r3, #0
     660:	strh	r3, [fp, #-6]
     664:	ldr	r3, [fp, #-16]
     668:	cmp	r3, #0
     66c:	bne	684 <reflection_Type_element+0x38>
     670:	ldr	r3, [pc, #176]	; 728 <reflection_Type_element+0xdc>
     674:	mov	r2, #148	; 0x94
     678:	ldr	r1, [pc, #172]	; 72c <reflection_Type_element+0xe0>
     67c:	ldr	r0, [pc, #172]	; 730 <reflection_Type_element+0xe4>
     680:	bl	0 <__assert_fail>
     684:	mov	r3, #1
     688:	strh	r3, [fp, #-8]
     68c:	ldr	r0, [fp, #-16]
     690:	bl	2f4 <__flatbuffers_soffset_read_from_pe>
     694:	mov	r3, r0
     698:	rsb	r3, r3, #0
     69c:	ldr	r2, [fp, #-16]
     6a0:	add	r3, r2, r3
     6a4:	str	r3, [fp, #-12]
     6a8:	ldr	r0, [fp, #-12]
     6ac:	bl	34c <__flatbuffers_voffset_read_from_pe>
     6b0:	mov	r3, r0
     6b4:	mov	r2, r3
     6b8:	ldrh	r3, [fp, #-8]
     6bc:	add	r3, r3, #3
     6c0:	lsl	r3, r3, #1
     6c4:	cmp	r2, r3
     6c8:	bcc	6f0 <reflection_Type_element+0xa4>
     6cc:	ldrh	r3, [fp, #-8]
     6d0:	add	r3, r3, #2
     6d4:	lsl	r3, r3, #1
     6d8:	ldr	r2, [fp, #-12]
     6dc:	add	r3, r2, r3
     6e0:	mov	r0, r3
     6e4:	bl	34c <__flatbuffers_voffset_read_from_pe>
     6e8:	mov	r3, r0
     6ec:	strh	r3, [fp, #-6]
     6f0:	ldrh	r3, [fp, #-6]
     6f4:	cmp	r3, #0
     6f8:	beq	718 <reflection_Type_element+0xcc>
     6fc:	ldrh	r3, [fp, #-6]
     700:	ldr	r2, [fp, #-16]
     704:	add	r3, r2, r3
     708:	mov	r0, r3
     70c:	bl	534 <reflection_BaseType_read_from_pe>
     710:	mov	r3, r0
     714:	b	71c <reflection_Type_element+0xd0>
     718:	mov	r3, #0
     71c:	mov	r0, r3
     720:	sub	sp, fp, #4
     724:	pop	{fp, pc}
     728:	.word	0x0000046c
     72c:	.word	0x00000008
     730:	.word	0x00000070

00000734 <reflection_Type_index>:
     734:	push	{fp, lr}
     738:	add	fp, sp, #4
     73c:	sub	sp, sp, #16
     740:	str	r0, [fp, #-16]
     744:	mov	r3, #0
     748:	strh	r3, [fp, #-6]
     74c:	ldr	r3, [fp, #-16]
     750:	cmp	r3, #0
     754:	bne	76c <reflection_Type_index+0x38>
     758:	ldr	r3, [pc, #176]	; 810 <reflection_Type_index+0xdc>
     75c:	mov	r2, #149	; 0x95
     760:	ldr	r1, [pc, #172]	; 814 <reflection_Type_index+0xe0>
     764:	ldr	r0, [pc, #172]	; 818 <reflection_Type_index+0xe4>
     768:	bl	0 <__assert_fail>
     76c:	mov	r3, #2
     770:	strh	r3, [fp, #-8]
     774:	ldr	r0, [fp, #-16]
     778:	bl	2f4 <__flatbuffers_soffset_read_from_pe>
     77c:	mov	r3, r0
     780:	rsb	r3, r3, #0
     784:	ldr	r2, [fp, #-16]
     788:	add	r3, r2, r3
     78c:	str	r3, [fp, #-12]
     790:	ldr	r0, [fp, #-12]
     794:	bl	34c <__flatbuffers_voffset_read_from_pe>
     798:	mov	r3, r0
     79c:	mov	r2, r3
     7a0:	ldrh	r3, [fp, #-8]
     7a4:	add	r3, r3, #3
     7a8:	lsl	r3, r3, #1
     7ac:	cmp	r2, r3
     7b0:	bcc	7d8 <reflection_Type_index+0xa4>
     7b4:	ldrh	r3, [fp, #-8]
     7b8:	add	r3, r3, #2
     7bc:	lsl	r3, r3, #1
     7c0:	ldr	r2, [fp, #-12]
     7c4:	add	r3, r2, r3
     7c8:	mov	r0, r3
     7cc:	bl	34c <__flatbuffers_voffset_read_from_pe>
     7d0:	mov	r3, r0
     7d4:	strh	r3, [fp, #-6]
     7d8:	ldrh	r3, [fp, #-6]
     7dc:	cmp	r3, #0
     7e0:	beq	800 <reflection_Type_index+0xcc>
     7e4:	ldrh	r3, [fp, #-6]
     7e8:	ldr	r2, [fp, #-16]
     7ec:	add	r3, r2, r3
     7f0:	mov	r0, r3
     7f4:	bl	1e8 <flatbuffers_int32_read_from_pe>
     7f8:	mov	r3, r0
     7fc:	b	804 <reflection_Type_index+0xd0>
     800:	mvn	r3, #0
     804:	mov	r0, r3
     808:	sub	sp, fp, #4
     80c:	pop	{fp, pc}
     810:	.word	0x00000484
     814:	.word	0x00000008
     818:	.word	0x00000070

0000081c <reflection_Field_vec_len>:
     81c:	push	{fp, lr}
     820:	add	fp, sp, #4
     824:	sub	sp, sp, #8
     828:	str	r0, [fp, #-8]
     82c:	ldr	r3, [fp, #-8]
     830:	cmp	r3, #0
     834:	beq	850 <reflection_Field_vec_len+0x34>
     838:	ldr	r3, [fp, #-8]
     83c:	sub	r3, r3, #4
     840:	mov	r0, r3
     844:	bl	2a0 <__flatbuffers_uoffset_read_from_pe>
     848:	mov	r3, r0
     84c:	b	854 <reflection_Field_vec_len+0x38>
     850:	mov	r3, #0
     854:	mov	r0, r3
     858:	sub	sp, fp, #4
     85c:	pop	{fp, pc}

00000860 <reflection_Field_vec_at>:
     860:	push	{fp, lr}
     864:	add	fp, sp, #4
     868:	sub	sp, sp, #16
     86c:	str	r0, [fp, #-16]
     870:	str	r1, [fp, #-20]	; 0xffffffec
     874:	ldr	r3, [fp, #-20]	; 0xffffffec
     878:	lsl	r3, r3, #2
     87c:	ldr	r2, [fp, #-16]
     880:	add	r3, r2, r3
     884:	str	r3, [fp, #-8]
     888:	ldr	r0, [fp, #-16]
     88c:	bl	3f4 <flatbuffers_vec_len>
     890:	mov	r2, r0
     894:	ldr	r3, [fp, #-20]	; 0xffffffec
     898:	cmp	r2, r3
     89c:	bhi	8b4 <reflection_Field_vec_at+0x54>
     8a0:	ldr	r3, [pc, #44]	; 8d4 <reflection_Field_vec_at+0x74>
     8a4:	mov	r2, #192	; 0xc0
     8a8:	ldr	r1, [pc, #40]	; 8d8 <reflection_Field_vec_at+0x78>
     8ac:	ldr	r0, [pc, #40]	; 8dc <reflection_Field_vec_at+0x7c>
     8b0:	bl	0 <__assert_fail>
     8b4:	ldr	r0, [fp, #-8]
     8b8:	bl	2a0 <__flatbuffers_uoffset_read_from_pe>
     8bc:	mov	r2, r0
     8c0:	ldr	r3, [fp, #-8]
     8c4:	add	r3, r3, r2
     8c8:	mov	r0, r3
     8cc:	sub	sp, fp, #4
     8d0:	pop	{fp, pc}
     8d4:	.word	0x00000420
     8d8:	.word	0x00000008
     8dc:	.word	0x00000098

000008e0 <reflection_Field_name>:
     8e0:	push	{fp, lr}
     8e4:	add	fp, sp, #4
     8e8:	sub	sp, sp, #24
     8ec:	str	r0, [fp, #-24]	; 0xffffffe8
     8f0:	mov	r3, #0
     8f4:	strh	r3, [fp, #-6]
     8f8:	ldr	r3, [fp, #-24]	; 0xffffffe8
     8fc:	cmp	r3, #0
     900:	bne	918 <reflection_Field_name+0x38>
     904:	ldr	r3, [pc, #208]	; 9dc <reflection_Field_name+0xfc>
     908:	mov	r2, #195	; 0xc3
     90c:	ldr	r1, [pc, #204]	; 9e0 <reflection_Field_name+0x100>
     910:	ldr	r0, [pc, #204]	; 9e4 <reflection_Field_name+0x104>
     914:	bl	0 <__assert_fail>
     918:	mov	r3, #0
     91c:	strh	r3, [fp, #-8]
     920:	ldr	r0, [fp, #-24]	; 0xffffffe8
     924:	bl	2f4 <__flatbuffers_soffset_read_from_pe>
     928:	mov	r3, r0
     92c:	rsb	r3, r3, #0
     930:	ldr	r2, [fp, #-24]	; 0xffffffe8
     934:	add	r3, r2, r3
     938:	str	r3, [fp, #-12]
     93c:	ldr	r0, [fp, #-12]
     940:	bl	34c <__flatbuffers_voffset_read_from_pe>
     944:	mov	r3, r0
     948:	mov	r2, r3
     94c:	ldrh	r3, [fp, #-8]
     950:	add	r3, r3, #3
     954:	lsl	r3, r3, #1
     958:	cmp	r2, r3
     95c:	bcc	984 <reflection_Field_name+0xa4>
     960:	ldrh	r3, [fp, #-8]
     964:	add	r3, r3, #2
     968:	lsl	r3, r3, #1
     96c:	ldr	r2, [fp, #-12]
     970:	add	r3, r2, r3
     974:	mov	r0, r3
     978:	bl	34c <__flatbuffers_voffset_read_from_pe>
     97c:	mov	r3, r0
     980:	strh	r3, [fp, #-6]
     984:	ldrh	r3, [fp, #-6]
     988:	cmp	r3, #0
     98c:	beq	9bc <reflection_Field_name+0xdc>
     990:	ldrh	r3, [fp, #-6]
     994:	ldr	r2, [fp, #-24]	; 0xffffffe8
     998:	add	r3, r2, r3
     99c:	str	r3, [fp, #-16]
     9a0:	ldr	r0, [fp, #-16]
     9a4:	bl	2a0 <__flatbuffers_uoffset_read_from_pe>
     9a8:	mov	r3, r0
     9ac:	add	r3, r3, #4
     9b0:	ldr	r2, [fp, #-16]
     9b4:	add	r3, r2, r3
     9b8:	b	9d0 <reflection_Field_name+0xf0>
     9bc:	ldr	r3, [pc, #24]	; 9dc <reflection_Field_name+0xfc>
     9c0:	mov	r2, #195	; 0xc3
     9c4:	ldr	r1, [pc, #20]	; 9e0 <reflection_Field_name+0x100>
     9c8:	ldr	r0, [pc, #24]	; 9e8 <reflection_Field_name+0x108>
     9cc:	bl	0 <__assert_fail>
     9d0:	mov	r0, r3
     9d4:	sub	sp, fp, #4
     9d8:	pop	{fp, pc}
     9dc:	.word	0x000003e4
     9e0:	.word	0x00000008
     9e4:	.word	0x00000070
     9e8:	.word	0x000000d0

000009ec <reflection_Field_vec_find_by_name>:
     9ec:	push	{fp, lr}
     9f0:	add	fp, sp, #4
     9f4:	sub	sp, sp, #24
     9f8:	str	r0, [fp, #-24]	; 0xffffffe8
     9fc:	str	r1, [fp, #-28]	; 0xffffffe4
     a00:	mov	r3, #0
     a04:	str	r3, [fp, #-8]
     a08:	ldr	r0, [fp, #-24]	; 0xffffffe8
     a0c:	bl	81c <reflection_Field_vec_len>
     a10:	str	r0, [fp, #-12]
     a14:	ldr	r3, [fp, #-12]
     a18:	cmp	r3, #0
     a1c:	bne	a2c <reflection_Field_vec_find_by_name+0x40>
     a20:	ldr	r3, [pc, #244]	; b1c <reflection_Field_vec_find_by_name+0x130>
     a24:	ldr	r3, [r3]
     a28:	b	b10 <reflection_Field_vec_find_by_name+0x124>
     a2c:	ldr	r3, [fp, #-12]
     a30:	sub	r3, r3, #1
     a34:	str	r3, [fp, #-12]
     a38:	b	aa8 <reflection_Field_vec_find_by_name+0xbc>
     a3c:	ldr	r2, [fp, #-12]
     a40:	ldr	r3, [fp, #-8]
     a44:	sub	r3, r2, r3
     a48:	lsr	r2, r3, #1
     a4c:	ldr	r3, [fp, #-8]
     a50:	add	r3, r2, r3
     a54:	str	r3, [fp, #-16]
     a58:	ldr	r1, [fp, #-16]
     a5c:	ldr	r0, [fp, #-24]	; 0xffffffe8
     a60:	bl	860 <reflection_Field_vec_at>
     a64:	mov	r3, r0
     a68:	mov	r0, r3
     a6c:	bl	8e0 <reflection_Field_name>
     a70:	str	r0, [fp, #-20]	; 0xffffffec
     a74:	mov	r2, #0
     a78:	ldr	r1, [fp, #-28]	; 0xffffffe4
     a7c:	ldr	r0, [fp, #-20]	; 0xffffffec
     a80:	bl	438 <__flatbuffers_string_cmp>
     a84:	mov	r3, r0
     a88:	cmp	r3, #0
     a8c:	bge	aa0 <reflection_Field_vec_find_by_name+0xb4>
     a90:	ldr	r3, [fp, #-16]
     a94:	add	r3, r3, #1
     a98:	str	r3, [fp, #-8]
     a9c:	b	aa8 <reflection_Field_vec_find_by_name+0xbc>
     aa0:	ldr	r3, [fp, #-16]
     aa4:	str	r3, [fp, #-12]
     aa8:	ldr	r2, [fp, #-8]
     aac:	ldr	r3, [fp, #-12]
     ab0:	cmp	r2, r3
     ab4:	bcc	a3c <reflection_Field_vec_find_by_name+0x50>
     ab8:	ldr	r2, [fp, #-8]
     abc:	ldr	r3, [fp, #-12]
     ac0:	cmp	r2, r3
     ac4:	bne	b08 <reflection_Field_vec_find_by_name+0x11c>
     ac8:	ldr	r1, [fp, #-8]
     acc:	ldr	r0, [fp, #-24]	; 0xffffffe8
     ad0:	bl	860 <reflection_Field_vec_at>
     ad4:	mov	r3, r0
     ad8:	mov	r0, r3
     adc:	bl	8e0 <reflection_Field_name>
     ae0:	str	r0, [fp, #-20]	; 0xffffffec
     ae4:	mov	r2, #0
     ae8:	ldr	r1, [fp, #-28]	; 0xffffffe4
     aec:	ldr	r0, [fp, #-20]	; 0xffffffec
     af0:	bl	438 <__flatbuffers_string_cmp>
     af4:	mov	r3, r0
     af8:	cmp	r3, #0
     afc:	bne	b08 <reflection_Field_vec_find_by_name+0x11c>
     b00:	ldr	r3, [fp, #-8]
     b04:	b	b10 <reflection_Field_vec_find_by_name+0x124>
     b08:	ldr	r3, [pc, #12]	; b1c <reflection_Field_vec_find_by_name+0x130>
     b0c:	ldr	r3, [r3]
     b10:	mov	r0, r3
     b14:	sub	sp, fp, #4
     b18:	pop	{fp, pc}
     b1c:	.word	0x00000000

00000b20 <reflection_Field_vec_find>:
     b20:	push	{fp, lr}
     b24:	add	fp, sp, #4
     b28:	sub	sp, sp, #8
     b2c:	str	r0, [fp, #-8]
     b30:	str	r1, [fp, #-12]
     b34:	ldr	r1, [fp, #-12]
     b38:	ldr	r0, [fp, #-8]
     b3c:	bl	9ec <reflection_Field_vec_find_by_name>
     b40:	mov	r3, r0
     b44:	mov	r0, r3
     b48:	sub	sp, fp, #4
     b4c:	pop	{fp, pc}

00000b50 <reflection_Field_type>:
     b50:	push	{fp, lr}
     b54:	add	fp, sp, #4
     b58:	sub	sp, sp, #24
     b5c:	str	r0, [fp, #-24]	; 0xffffffe8
     b60:	mov	r3, #0
     b64:	strh	r3, [fp, #-6]
     b68:	ldr	r3, [fp, #-24]	; 0xffffffe8
     b6c:	cmp	r3, #0
     b70:	bne	b88 <reflection_Field_type+0x38>
     b74:	ldr	r3, [pc, #204]	; c48 <reflection_Field_type+0xf8>
     b78:	mov	r2, #201	; 0xc9
     b7c:	ldr	r1, [pc, #200]	; c4c <reflection_Field_type+0xfc>
     b80:	ldr	r0, [pc, #200]	; c50 <reflection_Field_type+0x100>
     b84:	bl	0 <__assert_fail>
     b88:	mov	r3, #1
     b8c:	strh	r3, [fp, #-8]
     b90:	ldr	r0, [fp, #-24]	; 0xffffffe8
     b94:	bl	2f4 <__flatbuffers_soffset_read_from_pe>
     b98:	mov	r3, r0
     b9c:	rsb	r3, r3, #0
     ba0:	ldr	r2, [fp, #-24]	; 0xffffffe8
     ba4:	add	r3, r2, r3
     ba8:	str	r3, [fp, #-12]
     bac:	ldr	r0, [fp, #-12]
     bb0:	bl	34c <__flatbuffers_voffset_read_from_pe>
     bb4:	mov	r3, r0
     bb8:	mov	r2, r3
     bbc:	ldrh	r3, [fp, #-8]
     bc0:	add	r3, r3, #3
     bc4:	lsl	r3, r3, #1
     bc8:	cmp	r2, r3
     bcc:	bcc	bf4 <reflection_Field_type+0xa4>
     bd0:	ldrh	r3, [fp, #-8]
     bd4:	add	r3, r3, #2
     bd8:	lsl	r3, r3, #1
     bdc:	ldr	r2, [fp, #-12]
     be0:	add	r3, r2, r3
     be4:	mov	r0, r3
     be8:	bl	34c <__flatbuffers_voffset_read_from_pe>
     bec:	mov	r3, r0
     bf0:	strh	r3, [fp, #-6]
     bf4:	ldrh	r3, [fp, #-6]
     bf8:	cmp	r3, #0
     bfc:	beq	c28 <reflection_Field_type+0xd8>
     c00:	ldrh	r3, [fp, #-6]
     c04:	ldr	r2, [fp, #-24]	; 0xffffffe8
     c08:	add	r3, r2, r3
     c0c:	str	r3, [fp, #-16]
     c10:	ldr	r0, [fp, #-16]
     c14:	bl	2a0 <__flatbuffers_uoffset_read_from_pe>
     c18:	mov	r2, r0
     c1c:	ldr	r3, [fp, #-16]
     c20:	add	r3, r3, r2
     c24:	b	c3c <reflection_Field_type+0xec>
     c28:	ldr	r3, [pc, #24]	; c48 <reflection_Field_type+0xf8>
     c2c:	mov	r2, #201	; 0xc9
     c30:	ldr	r1, [pc, #20]	; c4c <reflection_Field_type+0xfc>
     c34:	ldr	r0, [pc, #24]	; c54 <reflection_Field_type+0x104>
     c38:	bl	0 <__assert_fail>
     c3c:	mov	r0, r3
     c40:	sub	sp, fp, #4
     c44:	pop	{fp, pc}
     c48:	.word	0x00000438
     c4c:	.word	0x00000008
     c50:	.word	0x00000070
     c54:	.word	0x000000d0

00000c58 <reflection_Field_default_integer>:
     c58:	push	{fp, lr}
     c5c:	add	fp, sp, #4
     c60:	sub	sp, sp, #16
     c64:	str	r0, [fp, #-16]
     c68:	mov	r3, #0
     c6c:	strh	r3, [fp, #-6]
     c70:	ldr	r3, [fp, #-16]
     c74:	cmp	r3, #0
     c78:	bne	c90 <reflection_Field_default_integer+0x38>
     c7c:	ldr	r3, [pc, #188]	; d40 <reflection_Field_default_integer+0xe8>
     c80:	mov	r2, #204	; 0xcc
     c84:	ldr	r1, [pc, #184]	; d44 <reflection_Field_default_integer+0xec>
     c88:	ldr	r0, [pc, #184]	; d48 <reflection_Field_default_integer+0xf0>
     c8c:	bl	0 <__assert_fail>
     c90:	mov	r3, #4
     c94:	strh	r3, [fp, #-8]
     c98:	ldr	r0, [fp, #-16]
     c9c:	bl	2f4 <__flatbuffers_soffset_read_from_pe>
     ca0:	mov	r3, r0
     ca4:	rsb	r3, r3, #0
     ca8:	ldr	r2, [fp, #-16]
     cac:	add	r3, r2, r3
     cb0:	str	r3, [fp, #-12]
     cb4:	ldr	r0, [fp, #-12]
     cb8:	bl	34c <__flatbuffers_voffset_read_from_pe>
     cbc:	mov	r3, r0
     cc0:	mov	r2, r3
     cc4:	ldrh	r3, [fp, #-8]
     cc8:	add	r3, r3, #3
     ccc:	lsl	r3, r3, #1
     cd0:	cmp	r2, r3
     cd4:	bcc	cfc <reflection_Field_default_integer+0xa4>
     cd8:	ldrh	r3, [fp, #-8]
     cdc:	add	r3, r3, #2
     ce0:	lsl	r3, r3, #1
     ce4:	ldr	r2, [fp, #-12]
     ce8:	add	r3, r2, r3
     cec:	mov	r0, r3
     cf0:	bl	34c <__flatbuffers_voffset_read_from_pe>
     cf4:	mov	r3, r0
     cf8:	strh	r3, [fp, #-6]
     cfc:	ldrh	r3, [fp, #-6]
     d00:	cmp	r3, #0
     d04:	beq	d28 <reflection_Field_default_integer+0xd0>
     d08:	ldrh	r3, [fp, #-6]
     d0c:	ldr	r2, [fp, #-16]
     d10:	add	r3, r2, r3
     d14:	mov	r0, r3
     d18:	bl	240 <flatbuffers_int64_read_from_pe>
     d1c:	mov	r2, r0
     d20:	mov	r3, r1
     d24:	b	d30 <reflection_Field_default_integer+0xd8>
     d28:	mov	r2, #0
     d2c:	mov	r3, #0
     d30:	mov	r0, r2
     d34:	mov	r1, r3
     d38:	sub	sp, fp, #4
     d3c:	pop	{fp, pc}
     d40:	.word	0x000003fc
     d44:	.word	0x00000008
     d48:	.word	0x00000070

00000d4c <reflection_Object_vec_len>:
     d4c:	push	{fp, lr}
     d50:	add	fp, sp, #4
     d54:	sub	sp, sp, #8
     d58:	str	r0, [fp, #-8]
     d5c:	ldr	r3, [fp, #-8]
     d60:	cmp	r3, #0
     d64:	beq	d80 <reflection_Object_vec_len+0x34>
     d68:	ldr	r3, [fp, #-8]
     d6c:	sub	r3, r3, #4
     d70:	mov	r0, r3
     d74:	bl	2a0 <__flatbuffers_uoffset_read_from_pe>
     d78:	mov	r3, r0
     d7c:	b	d84 <reflection_Object_vec_len+0x38>
     d80:	mov	r3, #0
     d84:	mov	r0, r3
     d88:	sub	sp, fp, #4
     d8c:	pop	{fp, pc}

00000d90 <reflection_Object_vec_at>:
     d90:	push	{fp, lr}
     d94:	add	fp, sp, #4
     d98:	sub	sp, sp, #16
     d9c:	str	r0, [fp, #-16]
     da0:	str	r1, [fp, #-20]	; 0xffffffec
     da4:	ldr	r3, [fp, #-20]	; 0xffffffec
     da8:	lsl	r3, r3, #2
     dac:	ldr	r2, [fp, #-16]
     db0:	add	r3, r2, r3
     db4:	str	r3, [fp, #-8]
     db8:	ldr	r0, [fp, #-16]
     dbc:	bl	3f4 <flatbuffers_vec_len>
     dc0:	mov	r2, r0
     dc4:	ldr	r3, [fp, #-20]	; 0xffffffec
     dc8:	cmp	r2, r3
     dcc:	bhi	de4 <reflection_Object_vec_at+0x54>
     dd0:	ldr	r3, [pc, #44]	; e04 <reflection_Object_vec_at+0x74>
     dd4:	mov	r2, #215	; 0xd7
     dd8:	ldr	r1, [pc, #40]	; e08 <reflection_Object_vec_at+0x78>
     ddc:	ldr	r0, [pc, #40]	; e0c <reflection_Object_vec_at+0x7c>
     de0:	bl	0 <__assert_fail>
     de4:	ldr	r0, [fp, #-8]
     de8:	bl	2a0 <__flatbuffers_uoffset_read_from_pe>
     dec:	mov	r2, r0
     df0:	ldr	r3, [fp, #-8]
     df4:	add	r3, r3, r2
     df8:	mov	r0, r3
     dfc:	sub	sp, fp, #4
     e00:	pop	{fp, pc}
     e04:	.word	0x00000394
     e08:	.word	0x00000008
     e0c:	.word	0x00000098

00000e10 <reflection_Object_name>:
     e10:	push	{fp, lr}
     e14:	add	fp, sp, #4
     e18:	sub	sp, sp, #24
     e1c:	str	r0, [fp, #-24]	; 0xffffffe8
     e20:	mov	r3, #0
     e24:	strh	r3, [fp, #-6]
     e28:	ldr	r3, [fp, #-24]	; 0xffffffe8
     e2c:	cmp	r3, #0
     e30:	bne	e48 <reflection_Object_name+0x38>
     e34:	ldr	r3, [pc, #208]	; f0c <reflection_Object_name+0xfc>
     e38:	mov	r2, #218	; 0xda
     e3c:	ldr	r1, [pc, #204]	; f10 <reflection_Object_name+0x100>
     e40:	ldr	r0, [pc, #204]	; f14 <reflection_Object_name+0x104>
     e44:	bl	0 <__assert_fail>
     e48:	mov	r3, #0
     e4c:	strh	r3, [fp, #-8]
     e50:	ldr	r0, [fp, #-24]	; 0xffffffe8
     e54:	bl	2f4 <__flatbuffers_soffset_read_from_pe>
     e58:	mov	r3, r0
     e5c:	rsb	r3, r3, #0
     e60:	ldr	r2, [fp, #-24]	; 0xffffffe8
     e64:	add	r3, r2, r3
     e68:	str	r3, [fp, #-12]
     e6c:	ldr	r0, [fp, #-12]
     e70:	bl	34c <__flatbuffers_voffset_read_from_pe>
     e74:	mov	r3, r0
     e78:	mov	r2, r3
     e7c:	ldrh	r3, [fp, #-8]
     e80:	add	r3, r3, #3
     e84:	lsl	r3, r3, #1
     e88:	cmp	r2, r3
     e8c:	bcc	eb4 <reflection_Object_name+0xa4>
     e90:	ldrh	r3, [fp, #-8]
     e94:	add	r3, r3, #2
     e98:	lsl	r3, r3, #1
     e9c:	ldr	r2, [fp, #-12]
     ea0:	add	r3, r2, r3
     ea4:	mov	r0, r3
     ea8:	bl	34c <__flatbuffers_voffset_read_from_pe>
     eac:	mov	r3, r0
     eb0:	strh	r3, [fp, #-6]
     eb4:	ldrh	r3, [fp, #-6]
     eb8:	cmp	r3, #0
     ebc:	beq	eec <reflection_Object_name+0xdc>
     ec0:	ldrh	r3, [fp, #-6]
     ec4:	ldr	r2, [fp, #-24]	; 0xffffffe8
     ec8:	add	r3, r2, r3
     ecc:	str	r3, [fp, #-16]
     ed0:	ldr	r0, [fp, #-16]
     ed4:	bl	2a0 <__flatbuffers_uoffset_read_from_pe>
     ed8:	mov	r3, r0
     edc:	add	r3, r3, #4
     ee0:	ldr	r2, [fp, #-16]
     ee4:	add	r3, r2, r3
     ee8:	b	f00 <reflection_Object_name+0xf0>
     eec:	ldr	r3, [pc, #24]	; f0c <reflection_Object_name+0xfc>
     ef0:	mov	r2, #218	; 0xda
     ef4:	ldr	r1, [pc, #20]	; f10 <reflection_Object_name+0x100>
     ef8:	ldr	r0, [pc, #24]	; f18 <reflection_Object_name+0x108>
     efc:	bl	0 <__assert_fail>
     f00:	mov	r0, r3
     f04:	sub	sp, fp, #4
     f08:	pop	{fp, pc}
     f0c:	.word	0x000003b0
     f10:	.word	0x00000008
     f14:	.word	0x00000070
     f18:	.word	0x000000d0

00000f1c <reflection_Object_vec_find_by_name>:
     f1c:	push	{fp, lr}
     f20:	add	fp, sp, #4
     f24:	sub	sp, sp, #24
     f28:	str	r0, [fp, #-24]	; 0xffffffe8
     f2c:	str	r1, [fp, #-28]	; 0xffffffe4
     f30:	mov	r3, #0
     f34:	str	r3, [fp, #-8]
     f38:	ldr	r0, [fp, #-24]	; 0xffffffe8
     f3c:	bl	d4c <reflection_Object_vec_len>
     f40:	str	r0, [fp, #-12]
     f44:	ldr	r3, [fp, #-12]
     f48:	cmp	r3, #0
     f4c:	bne	f5c <reflection_Object_vec_find_by_name+0x40>
     f50:	ldr	r3, [pc, #244]	; 104c <reflection_Object_vec_find_by_name+0x130>
     f54:	ldr	r3, [r3]
     f58:	b	1040 <reflection_Object_vec_find_by_name+0x124>
     f5c:	ldr	r3, [fp, #-12]
     f60:	sub	r3, r3, #1
     f64:	str	r3, [fp, #-12]
     f68:	b	fd8 <reflection_Object_vec_find_by_name+0xbc>
     f6c:	ldr	r2, [fp, #-12]
     f70:	ldr	r3, [fp, #-8]
     f74:	sub	r3, r2, r3
     f78:	lsr	r2, r3, #1
     f7c:	ldr	r3, [fp, #-8]
     f80:	add	r3, r2, r3
     f84:	str	r3, [fp, #-16]
     f88:	ldr	r1, [fp, #-16]
     f8c:	ldr	r0, [fp, #-24]	; 0xffffffe8
     f90:	bl	d90 <reflection_Object_vec_at>
     f94:	mov	r3, r0
     f98:	mov	r0, r3
     f9c:	bl	e10 <reflection_Object_name>
     fa0:	str	r0, [fp, #-20]	; 0xffffffec
     fa4:	mov	r2, #0
     fa8:	ldr	r1, [fp, #-28]	; 0xffffffe4
     fac:	ldr	r0, [fp, #-20]	; 0xffffffec
     fb0:	bl	438 <__flatbuffers_string_cmp>
     fb4:	mov	r3, r0
     fb8:	cmp	r3, #0
     fbc:	bge	fd0 <reflection_Object_vec_find_by_name+0xb4>
     fc0:	ldr	r3, [fp, #-16]
     fc4:	add	r3, r3, #1
     fc8:	str	r3, [fp, #-8]
     fcc:	b	fd8 <reflection_Object_vec_find_by_name+0xbc>
     fd0:	ldr	r3, [fp, #-16]
     fd4:	str	r3, [fp, #-12]
     fd8:	ldr	r2, [fp, #-8]
     fdc:	ldr	r3, [fp, #-12]
     fe0:	cmp	r2, r3
     fe4:	bcc	f6c <reflection_Object_vec_find_by_name+0x50>
     fe8:	ldr	r2, [fp, #-8]
     fec:	ldr	r3, [fp, #-12]
     ff0:	cmp	r2, r3
     ff4:	bne	1038 <reflection_Object_vec_find_by_name+0x11c>
     ff8:	ldr	r1, [fp, #-8]
     ffc:	ldr	r0, [fp, #-24]	; 0xffffffe8
    1000:	bl	d90 <reflection_Object_vec_at>
    1004:	mov	r3, r0
    1008:	mov	r0, r3
    100c:	bl	e10 <reflection_Object_name>
    1010:	str	r0, [fp, #-20]	; 0xffffffec
    1014:	mov	r2, #0
    1018:	ldr	r1, [fp, #-28]	; 0xffffffe4
    101c:	ldr	r0, [fp, #-20]	; 0xffffffec
    1020:	bl	438 <__flatbuffers_string_cmp>
    1024:	mov	r3, r0
    1028:	cmp	r3, #0
    102c:	bne	1038 <reflection_Object_vec_find_by_name+0x11c>
    1030:	ldr	r3, [fp, #-8]
    1034:	b	1040 <reflection_Object_vec_find_by_name+0x124>
    1038:	ldr	r3, [pc, #12]	; 104c <reflection_Object_vec_find_by_name+0x130>
    103c:	ldr	r3, [r3]
    1040:	mov	r0, r3
    1044:	sub	sp, fp, #4
    1048:	pop	{fp, pc}
    104c:	.word	0x00000000

00001050 <reflection_Object_vec_find>:
    1050:	push	{fp, lr}
    1054:	add	fp, sp, #4
    1058:	sub	sp, sp, #8
    105c:	str	r0, [fp, #-8]
    1060:	str	r1, [fp, #-12]
    1064:	ldr	r1, [fp, #-12]
    1068:	ldr	r0, [fp, #-8]
    106c:	bl	f1c <reflection_Object_vec_find_by_name>
    1070:	mov	r3, r0
    1074:	mov	r0, r3
    1078:	sub	sp, fp, #4
    107c:	pop	{fp, pc}

00001080 <reflection_Object_fields>:
    1080:	push	{fp, lr}
    1084:	add	fp, sp, #4
    1088:	sub	sp, sp, #24
    108c:	str	r0, [fp, #-24]	; 0xffffffe8
    1090:	mov	r3, #0
    1094:	strh	r3, [fp, #-6]
    1098:	ldr	r3, [fp, #-24]	; 0xffffffe8
    109c:	cmp	r3, #0
    10a0:	bne	10b8 <reflection_Object_fields+0x38>
    10a4:	ldr	r3, [pc, #208]	; 117c <reflection_Object_fields+0xfc>
    10a8:	mov	r2, #224	; 0xe0
    10ac:	ldr	r1, [pc, #204]	; 1180 <reflection_Object_fields+0x100>
    10b0:	ldr	r0, [pc, #204]	; 1184 <reflection_Object_fields+0x104>
    10b4:	bl	0 <__assert_fail>
    10b8:	mov	r3, #1
    10bc:	strh	r3, [fp, #-8]
    10c0:	ldr	r0, [fp, #-24]	; 0xffffffe8
    10c4:	bl	2f4 <__flatbuffers_soffset_read_from_pe>
    10c8:	mov	r3, r0
    10cc:	rsb	r3, r3, #0
    10d0:	ldr	r2, [fp, #-24]	; 0xffffffe8
    10d4:	add	r3, r2, r3
    10d8:	str	r3, [fp, #-12]
    10dc:	ldr	r0, [fp, #-12]
    10e0:	bl	34c <__flatbuffers_voffset_read_from_pe>
    10e4:	mov	r3, r0
    10e8:	mov	r2, r3
    10ec:	ldrh	r3, [fp, #-8]
    10f0:	add	r3, r3, #3
    10f4:	lsl	r3, r3, #1
    10f8:	cmp	r2, r3
    10fc:	bcc	1124 <reflection_Object_fields+0xa4>
    1100:	ldrh	r3, [fp, #-8]
    1104:	add	r3, r3, #2
    1108:	lsl	r3, r3, #1
    110c:	ldr	r2, [fp, #-12]
    1110:	add	r3, r2, r3
    1114:	mov	r0, r3
    1118:	bl	34c <__flatbuffers_voffset_read_from_pe>
    111c:	mov	r3, r0
    1120:	strh	r3, [fp, #-6]
    1124:	ldrh	r3, [fp, #-6]
    1128:	cmp	r3, #0
    112c:	beq	115c <reflection_Object_fields+0xdc>
    1130:	ldrh	r3, [fp, #-6]
    1134:	ldr	r2, [fp, #-24]	; 0xffffffe8
    1138:	add	r3, r2, r3
    113c:	str	r3, [fp, #-16]
    1140:	ldr	r0, [fp, #-16]
    1144:	bl	2a0 <__flatbuffers_uoffset_read_from_pe>
    1148:	mov	r3, r0
    114c:	add	r3, r3, #4
    1150:	ldr	r2, [fp, #-16]
    1154:	add	r3, r2, r3
    1158:	b	1170 <reflection_Object_fields+0xf0>
    115c:	ldr	r3, [pc, #24]	; 117c <reflection_Object_fields+0xfc>
    1160:	mov	r2, #224	; 0xe0
    1164:	ldr	r1, [pc, #20]	; 1180 <reflection_Object_fields+0x100>
    1168:	ldr	r0, [pc, #24]	; 1188 <reflection_Object_fields+0x108>
    116c:	bl	0 <__assert_fail>
    1170:	mov	r0, r3
    1174:	sub	sp, fp, #4
    1178:	pop	{fp, pc}
    117c:	.word	0x000003c8
    1180:	.word	0x00000008
    1184:	.word	0x00000070
    1188:	.word	0x000000d0

0000118c <reflection_Schema_as_root>:
    118c:	push	{fp, lr}
    1190:	add	fp, sp, #4
    1194:	sub	sp, sp, #16
    1198:	str	r0, [fp, #-16]
    119c:	ldr	r3, [pc, #76]	; 11f0 <reflection_Schema_as_root+0x64>
    11a0:	str	r3, [fp, #-8]
    11a4:	ldr	r3, [fp, #-16]
    11a8:	cmp	r3, #0
    11ac:	beq	11e0 <reflection_Schema_as_root+0x54>
    11b0:	ldr	r1, [fp, #-8]
    11b4:	ldr	r0, [fp, #-16]
    11b8:	bl	46c <flatbuffers_has_identifier>
    11bc:	mov	r3, r0
    11c0:	cmp	r3, #0
    11c4:	beq	11e0 <reflection_Schema_as_root+0x54>
    11c8:	ldr	r0, [fp, #-16]
    11cc:	bl	2a0 <__flatbuffers_uoffset_read_from_pe>
    11d0:	mov	r2, r0
    11d4:	ldr	r3, [fp, #-16]
    11d8:	add	r3, r3, r2
    11dc:	b	11e4 <reflection_Schema_as_root+0x58>
    11e0:	mov	r3, #0
    11e4:	mov	r0, r3
    11e8:	sub	sp, fp, #4
    11ec:	pop	{fp, pc}
    11f0:	.word	0x000000f4

000011f4 <reflection_Schema_objects>:
    11f4:	push	{fp, lr}
    11f8:	add	fp, sp, #4
    11fc:	sub	sp, sp, #24
    1200:	str	r0, [fp, #-24]	; 0xffffffe8
    1204:	mov	r3, #0
    1208:	strh	r3, [fp, #-6]
    120c:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1210:	cmp	r3, #0
    1214:	bne	122c <reflection_Schema_objects+0x38>
    1218:	ldr	r3, [pc, #208]	; 12f0 <reflection_Schema_objects+0xfc>
    121c:	mov	r2, #237	; 0xed
    1220:	ldr	r1, [pc, #204]	; 12f4 <reflection_Schema_objects+0x100>
    1224:	ldr	r0, [pc, #204]	; 12f8 <reflection_Schema_objects+0x104>
    1228:	bl	0 <__assert_fail>
    122c:	mov	r3, #0
    1230:	strh	r3, [fp, #-8]
    1234:	ldr	r0, [fp, #-24]	; 0xffffffe8
    1238:	bl	2f4 <__flatbuffers_soffset_read_from_pe>
    123c:	mov	r3, r0
    1240:	rsb	r3, r3, #0
    1244:	ldr	r2, [fp, #-24]	; 0xffffffe8
    1248:	add	r3, r2, r3
    124c:	str	r3, [fp, #-12]
    1250:	ldr	r0, [fp, #-12]
    1254:	bl	34c <__flatbuffers_voffset_read_from_pe>
    1258:	mov	r3, r0
    125c:	mov	r2, r3
    1260:	ldrh	r3, [fp, #-8]
    1264:	add	r3, r3, #3
    1268:	lsl	r3, r3, #1
    126c:	cmp	r2, r3
    1270:	bcc	1298 <reflection_Schema_objects+0xa4>
    1274:	ldrh	r3, [fp, #-8]
    1278:	add	r3, r3, #2
    127c:	lsl	r3, r3, #1
    1280:	ldr	r2, [fp, #-12]
    1284:	add	r3, r2, r3
    1288:	mov	r0, r3
    128c:	bl	34c <__flatbuffers_voffset_read_from_pe>
    1290:	mov	r3, r0
    1294:	strh	r3, [fp, #-6]
    1298:	ldrh	r3, [fp, #-6]
    129c:	cmp	r3, #0
    12a0:	beq	12d0 <reflection_Schema_objects+0xdc>
    12a4:	ldrh	r3, [fp, #-6]
    12a8:	ldr	r2, [fp, #-24]	; 0xffffffe8
    12ac:	add	r3, r2, r3
    12b0:	str	r3, [fp, #-16]
    12b4:	ldr	r0, [fp, #-16]
    12b8:	bl	2a0 <__flatbuffers_uoffset_read_from_pe>
    12bc:	mov	r3, r0
    12c0:	add	r3, r3, #4
    12c4:	ldr	r2, [fp, #-16]
    12c8:	add	r3, r2, r3
    12cc:	b	12e4 <reflection_Schema_objects+0xf0>
    12d0:	ldr	r3, [pc, #24]	; 12f0 <reflection_Schema_objects+0xfc>
    12d4:	mov	r2, #237	; 0xed
    12d8:	ldr	r1, [pc, #20]	; 12f4 <reflection_Schema_objects+0x100>
    12dc:	ldr	r0, [pc, #24]	; 12fc <reflection_Schema_objects+0x108>
    12e0:	bl	0 <__assert_fail>
    12e4:	mov	r0, r3
    12e8:	sub	sp, fp, #4
    12ec:	pop	{fp, pc}
    12f0:	.word	0x00000378
    12f4:	.word	0x00000008
    12f8:	.word	0x00000070
    12fc:	.word	0x000000d0

00001300 <test_schema>:
    1300:	push	{r4, fp, lr}
    1304:	add	fp, sp, #8
    1308:	sub	sp, sp, #60	; 0x3c
    130c:	str	r0, [fp, #-64]	; 0xffffffc0
    1310:	mvn	r3, #0
    1314:	str	r3, [fp, #-16]
    1318:	sub	r3, fp, #56	; 0x38
    131c:	mov	r2, r3
    1320:	ldr	r1, [pc, #844]	; 1674 <test_schema+0x374>
    1324:	ldr	r0, [fp, #-64]	; 0xffffffc0
    1328:	bl	0 <readfile>
    132c:	str	r0, [fp, #-24]	; 0xffffffe8
    1330:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1334:	cmp	r3, #0
    1338:	bne	1348 <test_schema+0x48>
    133c:	ldr	r0, [pc, #820]	; 1678 <test_schema+0x378>
    1340:	bl	0 <puts>
    1344:	b	1650 <test_schema+0x350>
    1348:	ldr	r0, [fp, #-24]	; 0xffffffe8
    134c:	bl	118c <reflection_Schema_as_root>
    1350:	str	r0, [fp, #-28]	; 0xffffffe4
    1354:	ldr	r0, [fp, #-28]	; 0xffffffe4
    1358:	bl	11f4 <reflection_Schema_objects>
    135c:	str	r0, [fp, #-32]	; 0xffffffe0
    1360:	mov	r3, #0
    1364:	str	r3, [fp, #-20]	; 0xffffffec
    1368:	b	13a8 <test_schema+0xa8>
    136c:	ldr	r4, [fp, #-20]	; 0xffffffec
    1370:	ldr	r1, [fp, #-20]	; 0xffffffec
    1374:	ldr	r0, [fp, #-32]	; 0xffffffe0
    1378:	bl	d90 <reflection_Object_vec_at>
    137c:	mov	r3, r0
    1380:	mov	r0, r3
    1384:	bl	e10 <reflection_Object_name>
    1388:	mov	r3, r0
    138c:	mov	r2, r3
    1390:	mov	r1, r4
    1394:	ldr	r0, [pc, #736]	; 167c <test_schema+0x37c>
    1398:	bl	0 <printf>
    139c:	ldr	r3, [fp, #-20]	; 0xffffffec
    13a0:	add	r3, r3, #1
    13a4:	str	r3, [fp, #-20]	; 0xffffffec
    13a8:	ldr	r0, [fp, #-32]	; 0xffffffe0
    13ac:	bl	d4c <reflection_Object_vec_len>
    13b0:	mov	r2, r0
    13b4:	ldr	r3, [fp, #-20]	; 0xffffffec
    13b8:	cmp	r2, r3
    13bc:	bhi	136c <test_schema+0x6c>
    13c0:	ldr	r1, [pc, #696]	; 1680 <test_schema+0x380>
    13c4:	ldr	r0, [fp, #-32]	; 0xffffffe0
    13c8:	bl	1050 <reflection_Object_vec_find>
    13cc:	str	r0, [fp, #-20]	; 0xffffffec
    13d0:	ldr	r3, [pc, #684]	; 1684 <test_schema+0x384>
    13d4:	ldr	r3, [r3]
    13d8:	ldr	r2, [fp, #-20]	; 0xffffffec
    13dc:	cmp	r2, r3
    13e0:	bne	13f0 <test_schema+0xf0>
    13e4:	ldr	r0, [pc, #668]	; 1688 <test_schema+0x388>
    13e8:	bl	0 <puts>
    13ec:	b	1650 <test_schema+0x350>
    13f0:	ldr	r3, [fp, #-20]	; 0xffffffec
    13f4:	str	r3, [fp, #-36]	; 0xffffffdc
    13f8:	ldr	r1, [fp, #-20]	; 0xffffffec
    13fc:	ldr	r0, [fp, #-32]	; 0xffffffe0
    1400:	bl	d90 <reflection_Object_vec_at>
    1404:	str	r0, [fp, #-40]	; 0xffffffd8
    1408:	ldr	r0, [fp, #-40]	; 0xffffffd8
    140c:	bl	e10 <reflection_Object_name>
    1410:	mov	r3, r0
    1414:	ldr	r1, [pc, #612]	; 1680 <test_schema+0x380>
    1418:	mov	r0, r3
    141c:	bl	0 <strcmp>
    1420:	mov	r3, r0
    1424:	cmp	r3, #0
    1428:	beq	1438 <test_schema+0x138>
    142c:	ldr	r0, [pc, #600]	; 168c <test_schema+0x38c>
    1430:	bl	0 <puts>
    1434:	b	1650 <test_schema+0x350>
    1438:	ldr	r0, [fp, #-40]	; 0xffffffd8
    143c:	bl	1080 <reflection_Object_fields>
    1440:	str	r0, [fp, #-44]	; 0xffffffd4
    1444:	ldr	r1, [pc, #580]	; 1690 <test_schema+0x390>
    1448:	ldr	r0, [fp, #-44]	; 0xffffffd4
    144c:	bl	b20 <reflection_Field_vec_find>
    1450:	str	r0, [fp, #-20]	; 0xffffffec
    1454:	ldr	r3, [pc, #552]	; 1684 <test_schema+0x384>
    1458:	ldr	r3, [r3]
    145c:	ldr	r2, [fp, #-20]	; 0xffffffec
    1460:	cmp	r2, r3
    1464:	bne	1474 <test_schema+0x174>
    1468:	ldr	r0, [pc, #548]	; 1694 <test_schema+0x394>
    146c:	bl	0 <puts>
    1470:	b	1650 <test_schema+0x350>
    1474:	ldr	r1, [fp, #-20]	; 0xffffffec
    1478:	ldr	r0, [fp, #-44]	; 0xffffffd4
    147c:	bl	860 <reflection_Field_vec_at>
    1480:	str	r0, [fp, #-48]	; 0xffffffd0
    1484:	ldr	r0, [fp, #-48]	; 0xffffffd0
    1488:	bl	c58 <reflection_Field_default_integer>
    148c:	mov	r2, r0
    1490:	mov	r3, r1
    1494:	cmp	r3, #0
    1498:	cmpeq	r2, #150	; 0x96
    149c:	beq	14dc <test_schema+0x1dc>
    14a0:	ldr	r0, [pc, #496]	; 1698 <test_schema+0x398>
    14a4:	bl	0 <puts>
    14a8:	ldr	r0, [fp, #-48]	; 0xffffffd0
    14ac:	bl	8e0 <reflection_Field_name>
    14b0:	mov	r3, r0
    14b4:	mov	r1, r3
    14b8:	ldr	r0, [pc, #476]	; 169c <test_schema+0x39c>
    14bc:	bl	0 <printf>
    14c0:	ldr	r0, [fp, #-48]	; 0xffffffd0
    14c4:	bl	c58 <reflection_Field_default_integer>
    14c8:	mov	r2, r0
    14cc:	mov	r3, r1
    14d0:	ldr	r0, [pc, #456]	; 16a0 <test_schema+0x3a0>
    14d4:	bl	0 <printf>
    14d8:	b	1650 <test_schema+0x350>
    14dc:	ldr	r0, [fp, #-48]	; 0xffffffd0
    14e0:	bl	b50 <reflection_Field_type>
    14e4:	str	r0, [fp, #-52]	; 0xffffffcc
    14e8:	ldr	r0, [fp, #-52]	; 0xffffffcc
    14ec:	bl	564 <reflection_Type_base_type>
    14f0:	mov	r3, r0
    14f4:	cmp	r3, #5
    14f8:	beq	1508 <test_schema+0x208>
    14fc:	ldr	r0, [pc, #416]	; 16a4 <test_schema+0x3a4>
    1500:	bl	0 <puts>
    1504:	b	1650 <test_schema+0x350>
    1508:	ldr	r1, [pc, #408]	; 16a8 <test_schema+0x3a8>
    150c:	ldr	r0, [fp, #-44]	; 0xffffffd4
    1510:	bl	b20 <reflection_Field_vec_find>
    1514:	str	r0, [fp, #-20]	; 0xffffffec
    1518:	ldr	r3, [pc, #356]	; 1684 <test_schema+0x384>
    151c:	ldr	r3, [r3]
    1520:	ldr	r2, [fp, #-20]	; 0xffffffec
    1524:	cmp	r2, r3
    1528:	bne	1538 <test_schema+0x238>
    152c:	ldr	r0, [pc, #376]	; 16ac <test_schema+0x3ac>
    1530:	bl	0 <puts>
    1534:	b	1650 <test_schema+0x350>
    1538:	ldr	r1, [fp, #-20]	; 0xffffffec
    153c:	ldr	r0, [fp, #-44]	; 0xffffffd4
    1540:	bl	860 <reflection_Field_vec_at>
    1544:	mov	r3, r0
    1548:	mov	r0, r3
    154c:	bl	b50 <reflection_Field_type>
    1550:	str	r0, [fp, #-52]	; 0xffffffcc
    1554:	ldr	r0, [fp, #-52]	; 0xffffffcc
    1558:	bl	564 <reflection_Type_base_type>
    155c:	mov	r3, r0
    1560:	cmp	r3, #15
    1564:	beq	1574 <test_schema+0x274>
    1568:	ldr	r0, [pc, #320]	; 16b0 <test_schema+0x3b0>
    156c:	bl	0 <puts>
    1570:	b	1650 <test_schema+0x350>
    1574:	ldr	r0, [fp, #-52]	; 0xffffffcc
    1578:	bl	734 <reflection_Type_index>
    157c:	mov	r2, r0
    1580:	ldr	r3, [fp, #-36]	; 0xffffffdc
    1584:	cmp	r2, r3
    1588:	beq	1598 <test_schema+0x298>
    158c:	ldr	r0, [pc, #288]	; 16b4 <test_schema+0x3b4>
    1590:	bl	0 <puts>
    1594:	b	1650 <test_schema+0x350>
    1598:	ldr	r1, [pc, #280]	; 16b8 <test_schema+0x3b8>
    159c:	ldr	r0, [fp, #-44]	; 0xffffffd4
    15a0:	bl	b20 <reflection_Field_vec_find>
    15a4:	str	r0, [fp, #-20]	; 0xffffffec
    15a8:	ldr	r3, [pc, #212]	; 1684 <test_schema+0x384>
    15ac:	ldr	r3, [r3]
    15b0:	ldr	r2, [fp, #-20]	; 0xffffffec
    15b4:	cmp	r2, r3
    15b8:	bne	15c8 <test_schema+0x2c8>
    15bc:	ldr	r0, [pc, #248]	; 16bc <test_schema+0x3bc>
    15c0:	bl	0 <puts>
    15c4:	b	1650 <test_schema+0x350>
    15c8:	ldr	r1, [fp, #-20]	; 0xffffffec
    15cc:	ldr	r0, [fp, #-44]	; 0xffffffd4
    15d0:	bl	860 <reflection_Field_vec_at>
    15d4:	mov	r3, r0
    15d8:	mov	r0, r3
    15dc:	bl	b50 <reflection_Field_type>
    15e0:	str	r0, [fp, #-52]	; 0xffffffcc
    15e4:	ldr	r0, [fp, #-52]	; 0xffffffcc
    15e8:	bl	564 <reflection_Type_base_type>
    15ec:	mov	r3, r0
    15f0:	cmp	r3, #14
    15f4:	beq	1604 <test_schema+0x304>
    15f8:	ldr	r0, [pc, #192]	; 16c0 <test_schema+0x3c0>
    15fc:	bl	0 <puts>
    1600:	b	1650 <test_schema+0x350>
    1604:	ldr	r0, [fp, #-52]	; 0xffffffcc
    1608:	bl	64c <reflection_Type_element>
    160c:	mov	r3, r0
    1610:	cmp	r3, #15
    1614:	beq	1624 <test_schema+0x324>
    1618:	ldr	r0, [pc, #164]	; 16c4 <test_schema+0x3c4>
    161c:	bl	0 <puts>
    1620:	b	1650 <test_schema+0x350>
    1624:	ldr	r0, [fp, #-52]	; 0xffffffcc
    1628:	bl	734 <reflection_Type_index>
    162c:	mov	r2, r0
    1630:	ldr	r3, [fp, #-36]	; 0xffffffdc
    1634:	cmp	r2, r3
    1638:	beq	1648 <test_schema+0x348>
    163c:	ldr	r0, [pc, #132]	; 16c8 <test_schema+0x3c8>
    1640:	bl	0 <puts>
    1644:	b	1650 <test_schema+0x350>
    1648:	mov	r3, #0
    164c:	str	r3, [fp, #-16]
    1650:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1654:	cmp	r3, #0
    1658:	beq	1664 <test_schema+0x364>
    165c:	ldr	r0, [fp, #-24]	; 0xffffffe8
    1660:	bl	0 <free>
    1664:	ldr	r3, [fp, #-16]
    1668:	mov	r0, r3
    166c:	sub	sp, fp, #8
    1670:	pop	{r4, fp, pc}
    1674:	.word	0x00002710
    1678:	.word	0x000000fc
    167c:	.word	0x0000011c
    1680:	.word	0x00000130
    1684:	.word	0x00000000
    1688:	.word	0x00000148
    168c:	.word	0x0000016c
    1690:	.word	0x0000018c
    1694:	.word	0x00000194
    1698:	.word	0x000001c0
    169c:	.word	0x000001e4
    16a0:	.word	0x000001f4
    16a4:	.word	0x000001fc
    16a8:	.word	0x00000218
    16ac:	.word	0x00000220
    16b0:	.word	0x00000238
    16b4:	.word	0x00000250
    16b8:	.word	0x00000268
    16bc:	.word	0x0000027c
    16c0:	.word	0x00000298
    16c4:	.word	0x000002c0
    16c8:	.word	0x000002f0

000016cc <main>:
    16cc:	push	{fp, lr}
    16d0:	add	fp, sp, #4
    16d4:	sub	sp, sp, #8
    16d8:	str	r0, [fp, #-8]
    16dc:	str	r1, [fp, #-12]
    16e0:	ldr	r3, [fp, #-8]
    16e4:	cmp	r3, #1
    16e8:	beq	1718 <main+0x4c>
    16ec:	ldr	r3, [fp, #-8]
    16f0:	cmp	r3, #2
    16f4:	beq	1718 <main+0x4c>
    16f8:	ldr	r3, [pc, #84]	; 1754 <main+0x88>
    16fc:	ldr	r3, [r3]
    1700:	mov	r2, #64	; 0x40
    1704:	mov	r1, #1
    1708:	ldr	r0, [pc, #72]	; 1758 <main+0x8c>
    170c:	bl	0 <fwrite>
    1710:	mov	r0, #1
    1714:	bl	0 <exit>
    1718:	ldr	r3, [fp, #-8]
    171c:	cmp	r3, #2
    1720:	bne	1734 <main+0x68>
    1724:	ldr	r3, [fp, #-12]
    1728:	ldr	r3, [r3, #4]
    172c:	ldr	r2, [pc, #40]	; 175c <main+0x90>
    1730:	str	r3, [r2]
    1734:	ldr	r3, [pc, #32]	; 175c <main+0x90>
    1738:	ldr	r3, [r3]
    173c:	mov	r0, r3
    1740:	bl	1300 <test_schema>
    1744:	mov	r3, r0
    1748:	mov	r0, r3
    174c:	sub	sp, fp, #4
    1750:	pop	{fp, pc}
    1754:	.word	0x00000000
    1758:	.word	0x00000334
    175c:	.word	0x00000000
