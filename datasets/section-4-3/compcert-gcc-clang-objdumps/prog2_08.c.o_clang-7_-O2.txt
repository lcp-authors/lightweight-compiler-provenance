
../compcert-repos/prog2/CMakeFiles/0.8.dir/Aula00_Conceitos_base/08.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <lerpontuacoes>:
   0:	push	{r4, r5, r6, r7, fp, lr}
   4:	add	fp, sp, #16
   8:	sub	sp, sp, #8
   c:	mov	r5, r0
  10:	movw	r0, #0
  14:	mov	r4, r1
  18:	add	r1, sp, #4
  1c:	movt	r0, #0
  20:	bl	0 <__isoc99_scanf>
  24:	ldr	r0, [sp, #4]
  28:	cmp	r0, #1
  2c:	blt	64 <lerpontuacoes+0x64>
  30:	movw	r6, #0
  34:	mov	r7, #0
  38:	movt	r6, #0
  3c:	mov	r0, r6
  40:	mov	r1, r5
  44:	mov	r2, r4
  48:	bl	0 <__isoc99_scanf>
  4c:	ldr	r0, [sp, #4]
  50:	add	r7, r7, #1
  54:	add	r5, r5, #50	; 0x32
  58:	add	r4, r4, #4
  5c:	cmp	r7, r0
  60:	blt	3c <lerpontuacoes+0x3c>
  64:	sub	sp, fp, #16
  68:	pop	{r4, r5, r6, r7, fp, pc}

0000006c <primeiroUltimo>:
  6c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
  70:	add	fp, sp, #28
  74:	push	{r3}		; (str r3, [sp, #-4]!)
  78:	cmp	r2, #2
  7c:	blt	ec <primeiroUltimo+0x80>
  80:	ldr	r9, [r1]
  84:	add	r7, r1, #4
  88:	add	r6, r0, #50	; 0x32
  8c:	sub	r5, r2, #1
  90:	mov	r8, r9
  94:	ldr	r4, [r7]
  98:	cmp	r4, r8
  9c:	ble	c0 <primeiroUltimo+0x54>
  a0:	ldr	r0, [sp]
  a4:	mov	r1, r6
  a8:	bl	0 <strcpy>
  ac:	ldr	sl, [r7]
  b0:	mov	r8, r4
  b4:	cmp	sl, r9
  b8:	blt	cc <primeiroUltimo+0x60>
  bc:	b	dc <primeiroUltimo+0x70>
  c0:	mov	sl, r4
  c4:	cmp	sl, r9
  c8:	bge	dc <primeiroUltimo+0x70>
  cc:	ldr	r0, [fp, #8]
  d0:	mov	r1, r6
  d4:	bl	0 <strcpy>
  d8:	mov	r9, sl
  dc:	add	r7, r7, #4
  e0:	add	r6, r6, #50	; 0x32
  e4:	subs	r5, r5, #1
  e8:	bne	94 <primeiroUltimo+0x28>
  ec:	sub	sp, fp, #28
  f0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

000000f4 <main>:
  f4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
  f8:	add	fp, sp, #28
  fc:	sub	sp, sp, #4
 100:	vpush	{d8-d9}
 104:	sub	sp, sp, #1200	; 0x4b0
 108:	sub	r5, fp, #136	; 0x88
 10c:	vmov.i32	q4, #0	; 0x00000000
 110:	mov	r0, #64	; 0x40
 114:	add	r6, sp, #112	; 0x70
 118:	mov	r2, #1000	; 0x3e8
 11c:	mov	r7, #0
 120:	mov	r1, r5
 124:	vst1.64	{d8-d9}, [r1], r0
 128:	add	r0, r5, #48	; 0x30
 12c:	vst1.64	{d8-d9}, [r0]
 130:	add	r0, r5, #32
 134:	vst1.64	{d8-d9}, [r1]
 138:	mov	r1, #0
 13c:	vst1.64	{d8-d9}, [r0]
 140:	add	r0, r5, #16
 144:	vst1.64	{d8-d9}, [r0]
 148:	mov	r0, r6
 14c:	bl	0 <memset>
 150:	add	r0, sp, #56	; 0x38
 154:	add	r1, r0, #32
 158:	vst1.64	{d8-d9}, [r1]
 15c:	add	r1, r0, #16
 160:	vst1.64	{d8-d9}, [r1]
 164:	mov	r1, #48	; 0x30
 168:	vst1.64	{d8-d9}, [r0], r1
 16c:	strh	r7, [r0]
 170:	mov	r0, sp
 174:	add	r2, r0, #32
 178:	vst1.64	{d8-d9}, [r2]
 17c:	add	r2, r0, #16
 180:	vst1.64	{d8-d9}, [r0], r1
 184:	sub	r1, fp, #56	; 0x38
 188:	strh	r7, [r0]
 18c:	movw	r0, #0
 190:	vst1.64	{d8-d9}, [r2]
 194:	movt	r0, #0
 198:	bl	0 <__isoc99_scanf>
 19c:	ldr	r4, [fp, #-56]	; 0xffffffc8
 1a0:	cmp	r4, #1
 1a4:	blt	258 <main+0x164>
 1a8:	movw	r8, #0
 1ac:	movt	r8, #0
 1b0:	mov	r0, r8
 1b4:	mov	r1, r6
 1b8:	mov	r2, r5
 1bc:	bl	0 <__isoc99_scanf>
 1c0:	ldr	r4, [fp, #-56]	; 0xffffffc8
 1c4:	add	r7, r7, #1
 1c8:	add	r6, r6, #50	; 0x32
 1cc:	add	r5, r5, #4
 1d0:	cmp	r7, r4
 1d4:	blt	1b0 <main+0xbc>
 1d8:	cmp	r4, #2
 1dc:	blt	258 <main+0x164>
 1e0:	ldr	sl, [fp, #-136]	; 0xffffff78
 1e4:	add	r0, sp, #112	; 0x70
 1e8:	mov	r6, #1
 1ec:	add	r5, r0, #50	; 0x32
 1f0:	sub	r0, fp, #136	; 0x88
 1f4:	mov	r9, sl
 1f8:	ldr	r7, [r0, r6, lsl #2]
 1fc:	cmp	r7, r9
 200:	ble	228 <main+0x134>
 204:	add	r0, sp, #56	; 0x38
 208:	mov	r1, r5
 20c:	bl	0 <strcpy>
 210:	sub	r0, fp, #136	; 0x88
 214:	mov	r9, r7
 218:	ldr	r8, [r0, r6, lsl #2]
 21c:	cmp	r8, sl
 220:	blt	234 <main+0x140>
 224:	b	248 <main+0x154>
 228:	mov	r8, r7
 22c:	cmp	r8, sl
 230:	bge	248 <main+0x154>
 234:	mov	r0, sp
 238:	mov	r1, r5
 23c:	bl	0 <strcpy>
 240:	sub	r0, fp, #136	; 0x88
 244:	mov	sl, r8
 248:	add	r6, r6, #1
 24c:	add	r5, r5, #50	; 0x32
 250:	cmp	r4, r6
 254:	bne	1f8 <main+0x104>
 258:	movw	r0, #0
 25c:	mov	r1, r4
 260:	movt	r0, #0
 264:	bl	0 <printf>
 268:	movw	r0, #0
 26c:	add	r1, sp, #56	; 0x38
 270:	movt	r0, #0
 274:	bl	0 <printf>
 278:	movw	r0, #0
 27c:	mov	r1, sp
 280:	movt	r0, #0
 284:	bl	0 <printf>
 288:	mov	r0, #0
 28c:	sub	sp, fp, #48	; 0x30
 290:	vpop	{d8-d9}
 294:	add	sp, sp, #4
 298:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
