
../repos/stcorp-coda-3a25f25/CMakeFiles/coda.dir/libcoda/coda-grib-cursor.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <read_bytes>:
   0:	mov	ip, sp
   4:	sub	sp, sp, #112	; 0x70
   8:	str	ip, [sp, #4]
   c:	str	lr, [sp, #8]
  10:	str	r4, [sp, #16]
  14:	str	r5, [sp, #20]
  18:	str	r6, [sp, #24]
  1c:	str	r7, [sp, #28]
  20:	str	r8, [sp, #32]
  24:	str	r9, [sp, #36]	; 0x24
  28:	ldr	r7, [ip, #8]
  2c:	ldr	r9, [ip, #4]
  30:	ldr	r4, [ip]
  34:	mov	r8, r3
  38:	mov	r6, r2
  3c:	mov	r5, r0
  40:	ldr	ip, [r5, #48]	; 0x30
  44:	cmp	ip, #0
  48:	bne	f8 <read_bytes+0xf8>
  4c:	ldr	r0, [r5, #16]
  50:	cmp	r0, #0
  54:	beq	74 <read_bytes+0x74>
  58:	cmp	r0, #1
  5c:	beq	74 <read_bytes+0x74>
  60:	ldr	r0, [pc, #384]	; 1e8 <read_bytes+0x1e8>
  64:	ldr	r1, [pc, #388]	; 1f0 <read_bytes+0x1f0>
  68:	mov	r2, #83	; 0x53
  6c:	ldr	r3, [pc, #364]	; 1e0 <read_bytes+0x1e0>
  70:	bl	0 <__assert_fail>
  74:	adds	r0, r6, r4
  78:	adc	r1, r8, r9
  7c:	ldr	r2, [r5, #8]
  80:	ldr	ip, [r5, #12]
  84:	cmp	r1, ip
  88:	bne	98 <read_bytes+0x98>
  8c:	cmp	r0, r2
  90:	bhi	a0 <read_bytes+0xa0>
  94:	b	b4 <read_bytes+0xb4>
  98:	cmp	r1, ip
  9c:	bls	b4 <read_bytes+0xb4>
  a0:	mvn	r0, #300	; 0x12c
  a4:	ldr	r1, [pc, #304]	; 1dc <read_bytes+0x1dc>
  a8:	bl	0 <coda_set_error>
  ac:	mvn	r0, #0
  b0:	b	1b8 <read_bytes+0x1b8>
  b4:	ldr	r0, [r5, #56]	; 0x38
  b8:	mov	r2, r4
  bc:	mov	r3, r6
  c0:	mov	r1, r7
  c4:	bl	0 <pread>
  c8:	cmp	r0, #0
  cc:	bge	1b4 <read_bytes+0x1b4>
  d0:	bl	0 <__errno_location>
  d4:	ldr	r0, [r0]
  d8:	bl	0 <strerror>
  dc:	mvn	r3, #21
  e0:	ldr	r1, [pc, #252]	; 1e4 <read_bytes+0x1e4>
  e4:	mov	r2, r0
  e8:	mov	r0, r3
  ec:	bl	0 <coda_set_error>
  f0:	mvn	r0, #0
  f4:	b	1b8 <read_bytes+0x1b8>
  f8:	adds	ip, r6, r4
  fc:	adc	r1, r8, r9
 100:	ldr	r2, [r5, #40]	; 0x28
 104:	ldr	r3, [r5, #44]	; 0x2c
 108:	cmp	r1, r3
 10c:	bne	11c <read_bytes+0x11c>
 110:	cmp	ip, r2
 114:	bhi	124 <read_bytes+0x124>
 118:	b	1a0 <read_bytes+0x1a0>
 11c:	cmp	r1, r3
 120:	bls	1a0 <read_bytes+0x1a0>
 124:	ldr	r3, [r5, #16]
 128:	cmp	r3, #0
 12c:	beq	18c <read_bytes+0x18c>
 130:	cmp	r3, #1
 134:	beq	18c <read_bytes+0x18c>
 138:	add	r2, sp, #64	; 0x40
 13c:	mov	r1, r9
 140:	mov	r0, r4
 144:	bl	0 <coda_str64>
 148:	add	r2, sp, #88	; 0x58
 14c:	mov	r1, r8
 150:	mov	r0, r6
 154:	bl	0 <coda_str64>
 158:	ldr	r0, [r5, #40]	; 0x28
 15c:	ldr	r1, [r5, #44]	; 0x2c
 160:	add	r2, sp, #40	; 0x28
 164:	bl	0 <coda_str64>
 168:	mvn	r0, #300	; 0x12c
 16c:	ldr	r1, [pc, #120]	; 1ec <read_bytes+0x1ec>
 170:	add	r2, sp, #64	; 0x40
 174:	add	r3, sp, #88	; 0x58
 178:	add	ip, sp, #40	; 0x28
 17c:	str	ip, [sp]
 180:	bl	0 <coda_set_error>
 184:	mvn	r0, #0
 188:	b	1b8 <read_bytes+0x1b8>
 18c:	mvn	r0, #300	; 0x12c
 190:	ldr	r1, [pc, #68]	; 1dc <read_bytes+0x1dc>
 194:	bl	0 <coda_set_error>
 198:	mvn	r0, #0
 19c:	b	1b8 <read_bytes+0x1b8>
 1a0:	ldr	r0, [r5, #48]	; 0x30
 1a4:	add	r1, r0, r6
 1a8:	mov	r2, r4
 1ac:	mov	r0, r7
 1b0:	bl	0 <memcpy>
 1b4:	mov	r0, #0
 1b8:	ldr	r4, [sp, #16]
 1bc:	ldr	r5, [sp, #20]
 1c0:	ldr	r6, [sp, #24]
 1c4:	ldr	r7, [sp, #28]
 1c8:	ldr	r8, [sp, #32]
 1cc:	ldr	r9, [sp, #36]	; 0x24
 1d0:	ldr	lr, [sp, #8]
 1d4:	add	sp, sp, #112	; 0x70
 1d8:	bx	lr
 1dc:	.word	0x00000148
 1e0:	.word	0x00000252
 1e4:	.word	0x00000082
 1e8:	.word	0x000001a4
 1ec:	.word	0x000000ff
 1f0:	.word	0x000000a0

000001f4 <coda_grib_cursor_set_product>:
 1f4:	mov	ip, sp
 1f8:	sub	sp, sp, #8
 1fc:	str	ip, [sp]
 200:	str	lr, [sp, #4]
 204:	str	r1, [r0]
 208:	mov	r3, #1
 20c:	str	r3, [r0, #4]
 210:	ldr	r2, [r1, #20]
 214:	str	r2, [r0, #8]
 218:	mvn	ip, #0
 21c:	str	ip, [r0, #12]
 220:	mvn	r2, #0
 224:	mvn	r1, #0
 228:	str	r1, [r0, #16]
 22c:	str	r2, [r0, #20]
 230:	mov	r0, #0
 234:	ldr	lr, [sp, #4]
 238:	add	sp, sp, #8
 23c:	bx	lr

00000240 <coda_grib_cursor_goto_array_element>:
 240:	mov	ip, sp
 244:	sub	sp, sp, #24
 248:	str	ip, [sp, #4]
 24c:	str	lr, [sp, #8]
 250:	str	r4, [sp, #16]
 254:	cmp	r1, #1
 258:	beq	294 <coda_grib_cursor_goto_array_element+0x54>
 25c:	mvn	r0, #105	; 0x69
 260:	ldr	r2, [pc, #64]	; 2a8 <coda_grib_cursor_goto_array_element+0x68>
 264:	ldr	r3, [pc, #64]	; 2ac <coda_grib_cursor_goto_array_element+0x6c>
 268:	mov	ip, #68	; 0x44
 26c:	str	ip, [sp]
 270:	mov	r4, r1
 274:	mov	r1, r2
 278:	mov	r2, r4
 27c:	bl	0 <coda_set_error>
 280:	mvn	r0, #0
 284:	ldr	r4, [sp, #16]
 288:	ldr	lr, [sp, #8]
 28c:	add	sp, sp, #24
 290:	bx	lr
 294:	ldr	r1, [r2]
 298:	ldr	r4, [sp, #16]
 29c:	ldr	lr, [sp, #8]
 2a0:	add	sp, sp, #24
 2a4:	b	2b0 <coda_grib_cursor_goto_array_element_by_index>
 2a8:	.word	0x00000036
 2ac:	.word	0x000001f2

000002b0 <coda_grib_cursor_goto_array_element_by_index>:
 2b0:	mov	ip, sp
 2b4:	sub	sp, sp, #24
 2b8:	str	ip, [sp, #8]
 2bc:	str	lr, [sp, #12]
 2c0:	str	r4, [sp, #16]
 2c4:	str	r5, [sp, #20]
 2c8:	mov	r2, r1
 2cc:	ldr	r1, [r0, #4]
 2d0:	lsl	r1, r1, #4
 2d4:	add	ip, r0, r1
 2d8:	sub	lr, ip, #4096	; 0x1000
 2dc:	ldr	r4, [lr, #4088]	; 0xff8
 2e0:	ldr	r3, [pc, #176]	; 398 <coda_grib_cursor_goto_array_element_by_index+0xe8>
 2e4:	ldr	ip, [r3]
 2e8:	cmp	ip, #0
 2ec:	beq	32c <coda_grib_cursor_goto_array_element_by_index+0x7c>
 2f0:	cmp	r2, #0
 2f4:	blt	304 <coda_grib_cursor_goto_array_element_by_index+0x54>
 2f8:	ldr	r3, [r4, #8]
 2fc:	cmp	r2, r3
 300:	blt	32c <coda_grib_cursor_goto_array_element_by_index+0x7c>
 304:	mvn	r0, #106	; 0x6a
 308:	ldr	r1, [pc, #140]	; 39c <coda_grib_cursor_goto_array_element_by_index+0xec>
 30c:	ldr	r3, [r4, #8]
 310:	ldr	r5, [pc, #124]	; 394 <coda_grib_cursor_goto_array_element_by_index+0xe4>
 314:	mov	ip, #84	; 0x54
 318:	str	ip, [sp, #4]
 31c:	str	r5, [sp]
 320:	bl	0 <coda_set_error>
 324:	mvn	r0, #0
 328:	b	380 <coda_grib_cursor_goto_array_element_by_index+0xd0>
 32c:	ldr	ip, [r0, #4]
 330:	add	r3, ip, #1
 334:	str	r3, [r0, #4]
 338:	lsl	r1, r3, #4
 33c:	add	r3, r0, r1
 340:	ldr	r1, [r4, #12]
 344:	sub	lr, r3, #4096	; 0x1000
 348:	str	r1, [lr, #4088]	; 0xff8
 34c:	ldr	r3, [r0, #4]
 350:	lsl	r3, r3, #4
 354:	add	r1, r0, r3
 358:	sub	lr, r1, #4096	; 0x1000
 35c:	str	r2, [lr, #4092]	; 0xffc
 360:	ldr	r3, [r0, #4]
 364:	lsl	r1, r3, #4
 368:	add	r2, r0, r1
 36c:	mvn	r1, #0
 370:	mvn	r0, #0
 374:	str	r0, [r2]
 378:	str	r1, [r2, #4]
 37c:	mov	r0, #0
 380:	ldr	r4, [sp, #16]
 384:	ldr	r5, [sp, #20]
 388:	ldr	lr, [sp, #12]
 38c:	add	sp, sp, #24
 390:	bx	lr
 394:	.word	0x000001f2
	...

000003a0 <coda_grib_cursor_goto_next_array_element>:
 3a0:	mov	ip, sp
 3a4:	sub	sp, sp, #16
 3a8:	str	ip, [sp]
 3ac:	str	lr, [sp, #4]
 3b0:	str	r4, [sp, #8]
 3b4:	mov	r4, r0
 3b8:	ldr	r3, [r4, #4]
 3bc:	sub	r0, r3, #1
 3c0:	str	r0, [r4, #4]
 3c4:	lsl	r2, r0, #4
 3c8:	add	ip, r4, r2
 3cc:	ldr	r1, [ip, #12]
 3d0:	add	r1, r1, #1
 3d4:	mov	r0, r4
 3d8:	bl	2b0 <coda_grib_cursor_goto_array_element_by_index>
 3dc:	cmp	r0, #0
 3e0:	beq	3f8 <coda_grib_cursor_goto_next_array_element+0x58>
 3e4:	ldr	r0, [r4, #4]
 3e8:	add	r1, r0, #1
 3ec:	str	r1, [r4, #4]
 3f0:	mvn	r0, #0
 3f4:	b	3fc <coda_grib_cursor_goto_next_array_element+0x5c>
 3f8:	mov	r0, #0
 3fc:	ldr	r4, [sp, #8]
 400:	ldr	lr, [sp, #4]
 404:	add	sp, sp, #16
 408:	bx	lr

0000040c <coda_grib_cursor_goto_attributes>:
 40c:	mov	ip, sp
 410:	sub	sp, sp, #16
 414:	str	ip, [sp]
 418:	str	lr, [sp, #4]
 41c:	str	r4, [sp, #8]
 420:	mov	r4, r0
 424:	ldr	r2, [r4, #4]
 428:	lsl	r3, r2, #4
 42c:	add	r3, r4, r3
 430:	sub	lr, r3, #4096	; 0x1000
 434:	ldr	r3, [lr, #4088]	; 0xff8
 438:	ldr	ip, [r3, #4]
 43c:	ldr	r0, [ip]
 440:	add	r3, r2, #1
 444:	str	r3, [r4, #4]
 448:	bl	0 <coda_mem_empty_record>
 44c:	ldr	r2, [r4, #4]
 450:	lsl	ip, r2, #4
 454:	add	r1, r4, ip
 458:	sub	lr, r1, #4096	; 0x1000
 45c:	str	r0, [lr, #4088]	; 0xff8
 460:	ldr	r1, [r4, #4]
 464:	lsl	r1, r1, #4
 468:	add	r1, r4, r1
 46c:	mvn	r0, #0
 470:	sub	lr, r1, #4096	; 0x1000
 474:	str	r0, [lr, #4092]	; 0xffc
 478:	ldr	r2, [r4, #4]
 47c:	lsl	r0, r2, #4
 480:	add	ip, r4, r0
 484:	mvn	r1, #0
 488:	mvn	r0, #0
 48c:	str	r0, [ip]
 490:	str	r1, [ip, #4]
 494:	mov	r0, #0
 498:	ldr	r4, [sp, #8]
 49c:	ldr	lr, [sp, #4]
 4a0:	add	sp, sp, #16
 4a4:	bx	lr

000004a8 <coda_grib_cursor_get_num_elements>:
 4a8:	mov	ip, sp
 4ac:	sub	sp, sp, #8
 4b0:	str	ip, [sp]
 4b4:	str	lr, [sp, #4]
 4b8:	ldr	ip, [r0, #4]
 4bc:	lsl	r2, ip, #4
 4c0:	add	r2, r0, r2
 4c4:	sub	lr, r2, #4096	; 0x1000
 4c8:	ldr	r0, [lr, #4088]	; 0xff8
 4cc:	ldr	r2, [r0, #4]
 4d0:	ldr	r3, [r2, #8]
 4d4:	cmp	r3, #1
 4d8:	bne	4e8 <coda_grib_cursor_get_num_elements+0x40>
 4dc:	ldr	r2, [r0, #8]
 4e0:	str	r2, [r1]
 4e4:	b	4f0 <coda_grib_cursor_get_num_elements+0x48>
 4e8:	mov	r3, #1
 4ec:	str	r3, [r1]
 4f0:	mov	r0, #0
 4f4:	ldr	lr, [sp, #4]
 4f8:	add	sp, sp, #8
 4fc:	bx	lr

00000500 <coda_grib_cursor_get_array_dim>:
 500:	mov	ip, sp
 504:	sub	sp, sp, #8
 508:	str	ip, [sp]
 50c:	str	lr, [sp, #4]
 510:	mov	r3, r2
 514:	mov	r2, r1
 518:	mov	r1, r3
 51c:	mov	r3, #1
 520:	str	r3, [r2]
 524:	ldr	lr, [sp, #4]
 528:	add	sp, sp, #8
 52c:	b	4a8 <coda_grib_cursor_get_num_elements>

00000530 <coda_grib_cursor_read_float>:
 530:	mov	ip, sp
 534:	sub	sp, sp, #96	; 0x60
 538:	str	ip, [sp, #12]
 53c:	str	lr, [sp, #16]
 540:	str	r4, [sp, #40]	; 0x28
 544:	str	r5, [sp, #44]	; 0x2c
 548:	str	r6, [sp, #48]	; 0x30
 54c:	str	r7, [sp, #52]	; 0x34
 550:	str	r8, [sp, #56]	; 0x38
 554:	str	r9, [sp, #60]	; 0x3c
 558:	str	sl, [sp, #64]	; 0x40
 55c:	str	fp, [sp, #68]	; 0x44
 560:	str	r1, [sp, #28]
 564:	mov	r6, r0
 568:	ldr	r3, [r6, #4]
 56c:	cmp	r3, #1
 570:	bgt	588 <coda_grib_cursor_read_float+0x58>
 574:	ldr	r0, [pc, #1980]	; d38 <coda_grib_cursor_read_float+0x808>
 578:	ldr	r1, [pc, #1984]	; d40 <coda_grib_cursor_read_float+0x810>
 57c:	mov	r2, #144	; 0x90
 580:	ldr	r3, [pc, #1980]	; d44 <coda_grib_cursor_read_float+0x814>
 584:	bl	0 <__assert_fail>
 588:	ldr	r2, [r6, #4]
 58c:	lsl	r2, r2, #4
 590:	add	r3, r6, r2
 594:	sub	lr, r3, #4096	; 0x1000
 598:	ldr	fp, [lr, #4072]	; 0xfe8
 59c:	ldr	ip, [fp, #4]
 5a0:	ldr	r3, [ip, #8]
 5a4:	cmp	r3, #1
 5a8:	beq	5c0 <coda_grib_cursor_read_float+0x90>
 5ac:	ldr	r0, [pc, #1928]	; d3c <coda_grib_cursor_read_float+0x80c>
 5b0:	ldr	r1, [pc, #1928]	; d40 <coda_grib_cursor_read_float+0x810>
 5b4:	mov	r2, #146	; 0x92
 5b8:	ldr	r3, [pc, #1924]	; d44 <coda_grib_cursor_read_float+0x814>
 5bc:	bl	0 <__assert_fail>
 5c0:	ldr	r2, [r6, #4]
 5c4:	lsl	r2, r2, #4
 5c8:	add	r1, r6, r2
 5cc:	sub	lr, r1, #4096	; 0x1000
 5d0:	ldr	r1, [lr, #4092]	; 0xffc
 5d4:	ldr	r2, [fp, #24]
 5d8:	cmp	r2, #0
 5dc:	beq	c58 <coda_grib_cursor_read_float+0x728>
 5e0:	mov	r3, #0
 5e4:	mov	r2, #0
 5e8:	str	r2, [sp, #72]	; 0x48
 5ec:	str	r3, [sp, #76]	; 0x4c
 5f0:	ldr	r0, [fp, #28]
 5f4:	cmp	r0, #0
 5f8:	bne	610 <coda_grib_cursor_read_float+0xe0>
 5fc:	vldr	s12, [fp, #36]	; 0x24
 600:	ldr	r1, [sp, #28]
 604:	vstr	s12, [r1]
 608:	mov	r0, #0
 60c:	b	d0c <coda_grib_cursor_read_float+0x7dc>
 610:	ldr	r3, [fp, #56]	; 0x38
 614:	cmp	r3, #0
 618:	beq	6f0 <coda_grib_cursor_read_float+0x1c0>
 61c:	mov	ip, #0
 620:	asr	r2, r1, #3
 624:	ldrb	r0, [r3, r2]
 628:	and	r3, r0, #255	; 0xff
 62c:	and	r0, r1, #7
 630:	rsb	r0, r0, #7
 634:	asr	r3, r3, r0
 638:	and	r3, r3, #1
 63c:	cmp	r3, #0
 640:	bne	65c <coda_grib_cursor_read_float+0x12c>
 644:	bl	0 <coda_NaN>
 648:	vcvt.f32.f64	s2, d0
 64c:	ldr	r0, [sp, #28]
 650:	vstr	s2, [r0]
 654:	mov	r0, #0
 658:	b	d0c <coda_grib_cursor_read_float+0x7dc>
 65c:	mov	r3, #0
 660:	asr	r0, r2, #4
 664:	cmp	r3, r0
 668:	bge	688 <coda_grib_cursor_read_float+0x158>
 66c:	ldr	r4, [fp, #60]	; 0x3c
 670:	lsl	r0, r3, #4
 674:	add	r0, r4, r0
 678:	ldrb	r0, [r0, #15]
 67c:	add	ip, ip, r0
 680:	add	r3, r3, #1
 684:	b	660 <coda_grib_cursor_read_float+0x130>
 688:	asr	lr, r2, #31
 68c:	add	lr, r2, lr, lsr #28
 690:	asr	r3, lr, #4
 694:	lsl	r0, r3, #4
 698:	sub	r3, r2, r0
 69c:	cmp	r3, #0
 6a0:	beq	6b8 <coda_grib_cursor_read_float+0x188>
 6a4:	ldr	r3, [fp, #60]	; 0x3c
 6a8:	add	r0, r3, r2
 6ac:	sub	lr, r0, #4096	; 0x1000
 6b0:	ldrb	r3, [lr, #4095]	; 0xfff
 6b4:	add	ip, ip, r3
 6b8:	ldr	r0, [fp, #56]	; 0x38
 6bc:	ldrb	r2, [r0, r2]
 6c0:	and	r4, r2, #255	; 0xff
 6c4:	mov	r2, #0
 6c8:	and	r3, r1, #7
 6cc:	cmp	r2, r3
 6d0:	bge	6ec <coda_grib_cursor_read_float+0x1bc>
 6d4:	rsb	r0, r2, #7
 6d8:	asr	r3, r4, r0
 6dc:	and	r0, r3, #1
 6e0:	add	ip, ip, r0
 6e4:	add	r2, r2, #1
 6e8:	b	6c8 <coda_grib_cursor_read_float+0x198>
 6ec:	mov	r1, ip
 6f0:	add	r0, sp, #72	; 0x48
 6f4:	ldr	r5, [fp, #28]
 6f8:	and	r2, r5, #7
 6fc:	cmp	r2, #0
 700:	movne	ip, #1
 704:	moveq	ip, #0
 708:	add	ip, ip, r5, asr #3
 70c:	rsb	r3, ip, #8
 710:	add	r4, r0, r3
 714:	ldr	ip, [r6]
 718:	ldr	r3, [ip, #52]	; 0x34
 71c:	ldr	ip, [fp, #16]
 720:	ldr	r0, [fp, #20]
 724:	mul	r1, r1, r5
 728:	asr	r2, r1, #31
 72c:	adds	r6, ip, r1
 730:	adc	r7, r0, r2
 734:	asr	sl, r5, #31
 738:	str	r3, [sp, #36]	; 0x24
 73c:	mov	r3, r6
 740:	mov	r2, #0
 744:	and	r1, r3, #7
 748:	adds	r1, r1, r5
 74c:	adc	r0, r2, sl
 750:	rsbs	r2, r1, #0
 754:	rsc	r3, r0, #0
 758:	and	r9, r2, #7
 75c:	cmp	r0, #0
 760:	bne	770 <coda_grib_cursor_read_float+0x240>
 764:	cmp	r1, #8
 768:	bls	b30 <coda_grib_cursor_read_float+0x600>
 76c:	b	778 <coda_grib_cursor_read_float+0x248>
 770:	cmp	r0, #0
 774:	blt	b30 <coda_grib_cursor_read_float+0x600>
 778:	cmp	r9, #0
 77c:	beq	a3c <coda_grib_cursor_read_float+0x50c>
 780:	mov	r8, sl
 784:	movw	r3, #43690	; 0xaaaa
 788:	movt	r3, #10922	; 0x2aaa
 78c:	movw	r2, #43691	; 0xaaab
 790:	movt	r2, #43690	; 0xaaaa
 794:	mov	r1, r8
 798:	mov	r0, r5
 79c:	bl	0 <__compcert_i64_smulh>
 7a0:	asr	ip, r1, #2
 7a4:	lsr	r0, r0, #2
 7a8:	orr	r1, r0, r1, lsl #30
 7ac:	mov	r3, ip
 7b0:	mov	r0, #0
 7b4:	mov	r2, r8
 7b8:	lsr	r2, r2, #31
 7bc:	adds	r1, r1, r2
 7c0:	adc	r2, r3, r0
 7c4:	mov	r3, #24
 7c8:	umull	ip, r0, r1, r3
 7cc:	lsl	r1, r2, #4
 7d0:	add	r1, r1, r2, lsl #3
 7d4:	add	r0, r0, r1
 7d8:	subs	r3, r5, ip
 7dc:	sbc	r0, r8, r0
 7e0:	orr	r2, r0, r3
 7e4:	cmp	r2, #0
 7e8:	beq	970 <coda_grib_cursor_read_float+0x440>
 7ec:	mov	r8, sl
 7f0:	movw	r3, #43690	; 0xaaaa
 7f4:	movt	r3, #10922	; 0x2aaa
 7f8:	movw	r2, #43691	; 0xaaab
 7fc:	movt	r2, #43690	; 0xaaaa
 800:	mov	r1, r8
 804:	mov	r0, r5
 808:	bl	0 <__compcert_i64_smulh>
 80c:	mov	r2, r1
 810:	asr	r1, r2, #2
 814:	lsr	ip, r0, #2
 818:	orr	ip, ip, r2, lsl #30
 81c:	mov	r3, r1
 820:	mov	r2, #0
 824:	mov	r0, r8
 828:	lsr	r0, r0, #31
 82c:	adds	r0, ip, r0
 830:	adc	r1, r3, r2
 834:	mov	r2, #24
 838:	umull	r3, ip, r0, r2
 83c:	lsl	r2, r1, #4
 840:	add	r0, r2, r1, lsl #3
 844:	add	r1, ip, r0
 848:	subs	lr, r5, r3
 84c:	sbc	ip, r8, r1
 850:	mov	r8, lr
 854:	mov	ip, r6
 858:	and	r0, ip, #7
 85c:	add	r2, r0, r8
 860:	and	r0, r2, #7
 864:	cmp	r0, #0
 868:	movne	r1, #1
 86c:	moveq	r1, #0
 870:	add	r3, r1, r2, lsr #3
 874:	str	r3, [sp, #24]
 878:	and	r0, r8, #7
 87c:	cmp	r0, #0
 880:	movne	r0, #1
 884:	moveq	r0, #0
 888:	add	r3, r0, r8, lsr #3
 88c:	str	r3, [sp, #32]
 890:	mov	r0, r7
 894:	asr	r3, r0, #3
 898:	lsr	r1, ip, #3
 89c:	orr	r2, r1, r0, lsl #29
 8a0:	mov	r0, #0
 8a4:	add	ip, sp, #88	; 0x58
 8a8:	str	ip, [sp, #8]
 8ac:	str	r0, [sp, #4]
 8b0:	ldr	r1, [sp, #24]
 8b4:	str	r1, [sp]
 8b8:	ldr	r0, [sp, #36]	; 0x24
 8bc:	bl	0 <read_bytes>
 8c0:	cmp	r0, #0
 8c4:	beq	8d0 <coda_grib_cursor_read_float+0x3a0>
 8c8:	mvn	r2, #0
 8cc:	b	bac <coda_grib_cursor_read_float+0x67c>
 8d0:	mov	r0, #0
 8d4:	str	r0, [sp, #84]	; 0x54
 8d8:	mov	ip, #0
 8dc:	ldr	r0, [sp, #24]
 8e0:	cmp	ip, r0
 8e4:	bcs	904 <coda_grib_cursor_read_float+0x3d4>
 8e8:	add	r0, sp, #84	; 0x54
 8ec:	rsb	r1, ip, #3
 8f0:	add	r2, sp, #88	; 0x58
 8f4:	ldrb	r2, [r2, ip]
 8f8:	strb	r2, [r0, r1]
 8fc:	add	ip, ip, #1
 900:	b	8dc <coda_grib_cursor_read_float+0x3ac>
 904:	ldr	ip, [sp, #84]	; 0x54
 908:	rsb	r0, r0, #4
 90c:	add	r0, r9, r0, lsl #3
 910:	lsr	r0, ip, r0
 914:	mov	r1, #1
 918:	lsl	r1, r1, r8
 91c:	sub	ip, r1, #1
 920:	and	r1, r0, ip
 924:	str	r1, [sp, #84]	; 0x54
 928:	mov	r2, #0
 92c:	ldr	ip, [sp, #32]
 930:	cmp	r2, ip
 934:	bcs	958 <coda_grib_cursor_read_float+0x428>
 938:	add	r3, sp, #84	; 0x54
 93c:	sub	r1, ip, r2
 940:	add	r0, r3, r1
 944:	sub	lr, r0, #4096	; 0x1000
 948:	ldrb	r0, [lr, #4095]	; 0xfff
 94c:	strb	r0, [r4, r2]
 950:	add	r2, r2, #1
 954:	b	92c <coda_grib_cursor_read_float+0x3fc>
 958:	add	r4, r4, ip
 95c:	mov	r3, #0
 960:	adds	r6, r6, r8
 964:	adc	r7, r7, r3
 968:	subs	r5, r5, r8
 96c:	sbc	sl, sl, r3
 970:	mov	r1, sl
 974:	mov	r0, r5
 978:	cmp	r1, #0
 97c:	bne	98c <coda_grib_cursor_read_float+0x45c>
 980:	cmp	r0, #0
 984:	bhi	994 <coda_grib_cursor_read_float+0x464>
 988:	b	ba8 <coda_grib_cursor_read_float+0x678>
 98c:	cmp	r1, #0
 990:	ble	ba8 <coda_grib_cursor_read_float+0x678>
 994:	mov	r0, r7
 998:	mov	ip, r6
 99c:	asr	r3, r0, #3
 9a0:	lsr	r2, ip, #3
 9a4:	orr	r2, r2, r0, lsl #29
 9a8:	mov	r8, #0
 9ac:	mov	r0, #4
 9b0:	add	r1, sp, #88	; 0x58
 9b4:	str	r1, [sp, #8]
 9b8:	str	r8, [sp, #4]
 9bc:	str	r0, [sp]
 9c0:	ldr	r0, [sp, #36]	; 0x24
 9c4:	bl	0 <read_bytes>
 9c8:	cmp	r0, #0
 9cc:	beq	9d8 <coda_grib_cursor_read_float+0x4a8>
 9d0:	mvn	r2, #0
 9d4:	b	bac <coda_grib_cursor_read_float+0x67c>
 9d8:	ldrb	r1, [sp, #91]	; 0x5b
 9dc:	strb	r1, [sp, #84]	; 0x54
 9e0:	ldrb	r2, [sp, #90]	; 0x5a
 9e4:	strb	r2, [sp, #85]	; 0x55
 9e8:	ldrb	r3, [sp, #89]	; 0x59
 9ec:	strb	r3, [sp, #86]	; 0x56
 9f0:	ldrb	r1, [sp, #88]	; 0x58
 9f4:	strb	r1, [sp, #87]	; 0x57
 9f8:	ldr	r0, [sp, #84]	; 0x54
 9fc:	lsr	r3, r0, r9
 a00:	str	r3, [sp, #84]	; 0x54
 a04:	ldrb	ip, [sp, #86]	; 0x56
 a08:	strb	ip, [r4]
 a0c:	ldrb	r3, [sp, #85]	; 0x55
 a10:	strb	r3, [r4, #1]
 a14:	ldrb	r1, [sp, #84]	; 0x54
 a18:	strb	r1, [r4, #2]
 a1c:	add	r4, r4, #3
 a20:	mov	r2, #0
 a24:	mov	r1, #24
 a28:	adds	r6, r6, r1
 a2c:	adc	r7, r7, r2
 a30:	subs	r5, r5, r1
 a34:	sbc	sl, sl, r2
 a38:	b	970 <coda_grib_cursor_read_float+0x440>
 a3c:	mov	r2, #0
 a40:	mov	r3, r5
 a44:	and	r1, r3, #7
 a48:	orr	r1, r2, r1
 a4c:	cmp	r1, #0
 a50:	beq	ad0 <coda_grib_cursor_read_float+0x5a0>
 a54:	mov	r0, r7
 a58:	asr	r3, r0, #3
 a5c:	mov	ip, r6
 a60:	lsr	ip, ip, #3
 a64:	orr	r2, ip, r0, lsl #29
 a68:	mov	r0, #0
 a6c:	mov	r1, #1
 a70:	add	r8, sp, #80	; 0x50
 a74:	str	r8, [sp, #8]
 a78:	str	r0, [sp, #4]
 a7c:	str	r1, [sp]
 a80:	ldr	r0, [sp, #36]	; 0x24
 a84:	bl	0 <read_bytes>
 a88:	cmp	r0, #0
 a8c:	beq	a98 <coda_grib_cursor_read_float+0x568>
 a90:	mvn	r2, #0
 a94:	b	bac <coda_grib_cursor_read_float+0x67c>
 a98:	mov	r0, r5
 a9c:	and	r2, r0, #7
 aa0:	ldrb	r1, [sp, #80]	; 0x50
 aa4:	mov	r3, #1
 aa8:	lsl	r3, r3, r2
 aac:	sub	r3, r3, #1
 ab0:	and	r3, r1, r3
 ab4:	strb	r3, [r4]
 ab8:	add	r4, r4, #1
 abc:	mov	r0, #0
 ac0:	adds	r6, r6, r2
 ac4:	adc	r7, r7, r0
 ac8:	subs	r5, r5, r2
 acc:	sbc	sl, sl, r0
 ad0:	mov	r0, sl
 ad4:	mov	ip, r5
 ad8:	cmp	r0, #0
 adc:	bne	aec <coda_grib_cursor_read_float+0x5bc>
 ae0:	cmp	ip, #0
 ae4:	bhi	af4 <coda_grib_cursor_read_float+0x5c4>
 ae8:	b	ba8 <coda_grib_cursor_read_float+0x678>
 aec:	cmp	r0, #0
 af0:	ble	ba8 <coda_grib_cursor_read_float+0x678>
 af4:	asr	r3, r7, #3
 af8:	lsr	ip, r6, #3
 afc:	orr	r2, ip, r7, lsl #29
 b00:	asr	r0, sl, #3
 b04:	lsr	ip, r5, #3
 b08:	orr	ip, ip, sl, lsl #29
 b0c:	str	r4, [sp, #8]
 b10:	str	r0, [sp, #4]
 b14:	str	ip, [sp]
 b18:	ldr	r0, [sp, #36]	; 0x24
 b1c:	bl	0 <read_bytes>
 b20:	cmp	r0, #0
 b24:	beq	ba8 <coda_grib_cursor_read_float+0x678>
 b28:	mvn	r2, #0
 b2c:	b	bac <coda_grib_cursor_read_float+0x67c>
 b30:	asr	r3, r7, #3
 b34:	lsr	r1, r6, #3
 b38:	orr	r2, r1, r7, lsl #29
 b3c:	mov	r0, #0
 b40:	mov	ip, #1
 b44:	str	r4, [sp, #8]
 b48:	str	r0, [sp, #4]
 b4c:	str	ip, [sp]
 b50:	ldr	r0, [sp, #36]	; 0x24
 b54:	bl	0 <read_bytes>
 b58:	cmp	r0, #0
 b5c:	beq	b68 <coda_grib_cursor_read_float+0x638>
 b60:	mvn	r2, #0
 b64:	b	bac <coda_grib_cursor_read_float+0x67c>
 b68:	cmp	r9, #0
 b6c:	beq	b7c <coda_grib_cursor_read_float+0x64c>
 b70:	ldrb	r2, [r4]
 b74:	asr	ip, r2, r9
 b78:	strb	ip, [r4]
 b7c:	mov	r2, #0
 b80:	and	r3, r5, #7
 b84:	orr	r2, r2, r3
 b88:	cmp	r2, #0
 b8c:	beq	ba8 <coda_grib_cursor_read_float+0x678>
 b90:	ldrb	r2, [r4]
 b94:	mov	r3, #1
 b98:	lsl	r0, r3, r5
 b9c:	sub	r3, r0, #1
 ba0:	and	ip, r2, r3
 ba4:	strb	ip, [r4]
 ba8:	mov	r2, #0
 bac:	cmp	r2, #0
 bb0:	beq	bbc <coda_grib_cursor_read_float+0x68c>
 bb4:	mvn	r0, #0
 bb8:	b	d0c <coda_grib_cursor_read_float+0x7dc>
 bbc:	ldrb	r1, [sp, #72]	; 0x48
 bc0:	ldrb	r0, [sp, #79]	; 0x4f
 bc4:	eor	ip, r1, r0
 bc8:	eor	r2, ip, r0
 bcc:	strb	r2, [sp, #79]	; 0x4f
 bd0:	eor	r0, ip, r2
 bd4:	strb	r0, [sp, #72]	; 0x48
 bd8:	ldrb	r1, [sp, #73]	; 0x49
 bdc:	ldrb	r2, [sp, #78]	; 0x4e
 be0:	eor	r1, r1, r2
 be4:	eor	r2, r1, r2
 be8:	strb	r2, [sp, #78]	; 0x4e
 bec:	eor	r0, r1, r2
 bf0:	strb	r0, [sp, #73]	; 0x49
 bf4:	ldrb	r0, [sp, #74]	; 0x4a
 bf8:	ldrb	r1, [sp, #77]	; 0x4d
 bfc:	eor	r0, r0, r1
 c00:	eor	ip, r0, r1
 c04:	strb	ip, [sp, #77]	; 0x4d
 c08:	eor	ip, r0, ip
 c0c:	strb	ip, [sp, #74]	; 0x4a
 c10:	ldrb	r2, [sp, #75]	; 0x4b
 c14:	ldrb	ip, [sp, #76]	; 0x4c
 c18:	eor	r0, r2, ip
 c1c:	eor	r3, r0, ip
 c20:	strb	r3, [sp, #76]	; 0x4c
 c24:	eor	r3, r0, r3
 c28:	strb	r3, [sp, #75]	; 0x4b
 c2c:	ldr	r0, [sp, #72]	; 0x48
 c30:	ldr	r1, [sp, #76]	; 0x4c
 c34:	bl	0 <__compcert_i64_stod>
 c38:	vldr	d4, [fp, #40]	; 0x28
 c3c:	vmul.f64	d1, d0, d4
 c40:	vldr	d0, [fp, #48]	; 0x30
 c44:	vadd.f64	d2, d1, d0
 c48:	vcvt.f32.f64	s10, d2
 c4c:	ldr	r2, [sp, #28]
 c50:	vstr	s10, [r2]
 c54:	b	d08 <coda_grib_cursor_read_float+0x7d8>
 c58:	ldr	r2, [r6]
 c5c:	ldr	r0, [r2, #52]	; 0x34
 c60:	ldr	ip, [fp, #16]
 c64:	ldr	r3, [fp, #20]
 c68:	asr	r2, r3, #3
 c6c:	lsr	ip, ip, #3
 c70:	orr	r4, ip, r3, lsl #29
 c74:	lsl	r3, r1, #2
 c78:	asr	ip, r3, #31
 c7c:	adds	lr, r4, r3
 c80:	adc	r3, r2, ip
 c84:	mov	r2, lr
 c88:	mov	r1, #0
 c8c:	mov	ip, #4
 c90:	ldr	r4, [sp, #28]
 c94:	str	r4, [sp, #8]
 c98:	str	r1, [sp, #4]
 c9c:	str	ip, [sp]
 ca0:	bl	0 <read_bytes>
 ca4:	cmp	r0, #0
 ca8:	beq	cb4 <coda_grib_cursor_read_float+0x784>
 cac:	mvn	r0, #0
 cb0:	b	d0c <coda_grib_cursor_read_float+0x7dc>
 cb4:	ldr	r0, [sp, #28]
 cb8:	ldrb	r2, [r0]
 cbc:	ldrb	r1, [r0, #3]
 cc0:	eor	r1, r2, r1
 cc4:	strb	r1, [r0]
 cc8:	ldrb	ip, [r0, #3]
 ccc:	eor	r2, r1, ip
 cd0:	strb	r2, [r0, #3]
 cd4:	ldrb	r3, [r0]
 cd8:	eor	r2, r3, r2
 cdc:	strb	r2, [r0]
 ce0:	ldrb	r1, [r0, #1]
 ce4:	ldrb	ip, [r0, #2]
 ce8:	eor	ip, r1, ip
 cec:	strb	ip, [r0, #1]
 cf0:	ldrb	r3, [r0, #2]
 cf4:	eor	r3, ip, r3
 cf8:	strb	r3, [r0, #2]
 cfc:	ldrb	r2, [r0, #1]
 d00:	eor	r1, r2, r3
 d04:	strb	r1, [r0, #1]
 d08:	mov	r0, #0
 d0c:	ldr	r4, [sp, #40]	; 0x28
 d10:	ldr	r5, [sp, #44]	; 0x2c
 d14:	ldr	r6, [sp, #48]	; 0x30
 d18:	ldr	r7, [sp, #52]	; 0x34
 d1c:	ldr	r8, [sp, #56]	; 0x38
 d20:	ldr	r9, [sp, #60]	; 0x3c
 d24:	ldr	sl, [sp, #64]	; 0x40
 d28:	ldr	fp, [sp, #68]	; 0x44
 d2c:	ldr	lr, [sp, #16]
 d30:	add	sp, sp, #96	; 0x60
 d34:	bx	lr
 d38:	.word	0x0000013a
 d3c:	.word	0x00000172
 d40:	.word	0x000001f2
 d44:	.word	0x0000025d

00000d48 <coda_grib_cursor_read_float_array>:
 d48:	mov	ip, sp
 d4c:	sub	sp, sp, #544	; 0x220
 d50:	str	ip, [sp]
 d54:	str	lr, [sp, #4]
 d58:	str	r4, [sp, #8]
 d5c:	str	r5, [sp, #12]
 d60:	str	r6, [sp, #16]
 d64:	mov	r4, r1
 d68:	ldr	r1, [r0, #4]
 d6c:	lsl	r1, r1, #4
 d70:	add	ip, r0, r1
 d74:	sub	lr, ip, #4096	; 0x1000
 d78:	ldr	r5, [lr, #4088]	; 0xff8
 d7c:	ldr	r1, [r5, #8]
 d80:	cmp	r1, #0
 d84:	ble	e3c <coda_grib_cursor_read_float_array+0xf4>
 d88:	mov	r2, r0
 d8c:	add	r3, sp, #24
 d90:	mov	lr, #130	; 0x82
 d94:	ldr	ip, [r2], #4
 d98:	subs	lr, lr, #1
 d9c:	str	ip, [r3], #4
 da0:	bne	d94 <coda_grib_cursor_read_float_array+0x4c>
 da4:	ldr	r2, [sp, #28]
 da8:	add	r2, r2, #1
 dac:	str	r2, [sp, #28]
 db0:	add	r3, sp, #32
 db4:	lsl	ip, r2, #4
 db8:	add	r3, r3, ip
 dbc:	ldr	ip, [r5, #12]
 dc0:	sub	lr, r3, #4096	; 0x1000
 dc4:	str	ip, [lr, #4080]	; 0xff0
 dc8:	add	r0, sp, #32
 dcc:	ldr	r2, [sp, #28]
 dd0:	lsl	r3, r2, #4
 dd4:	add	r2, r0, r3
 dd8:	mvn	r1, #0
 ddc:	mvn	r0, #0
 de0:	sub	lr, r2, #4096	; 0x1000
 de4:	str	r0, [lr, #4088]	; 0xff8
 de8:	sub	lr, r2, #4096	; 0x1000
 dec:	str	r1, [lr, #4092]	; 0xffc
 df0:	mov	r6, #0
 df4:	ldr	r1, [r5, #8]
 df8:	cmp	r6, r1
 dfc:	bge	e3c <coda_grib_cursor_read_float_array+0xf4>
 e00:	add	r1, sp, #32
 e04:	ldr	ip, [sp, #28]
 e08:	lsl	r2, ip, #4
 e0c:	add	r3, r1, r2
 e10:	sub	lr, r3, #4096	; 0x1000
 e14:	str	r6, [lr, #4084]	; 0xff4
 e18:	add	r0, sp, #24
 e1c:	add	r1, r4, r6, lsl #2
 e20:	bl	530 <coda_grib_cursor_read_float>
 e24:	cmp	r0, #0
 e28:	beq	e34 <coda_grib_cursor_read_float_array+0xec>
 e2c:	mvn	r0, #0
 e30:	b	e40 <coda_grib_cursor_read_float_array+0xf8>
 e34:	add	r6, r6, #1
 e38:	b	df4 <coda_grib_cursor_read_float_array+0xac>
 e3c:	mov	r0, #0
 e40:	ldr	r4, [sp, #8]
 e44:	ldr	r5, [sp, #12]
 e48:	ldr	r6, [sp, #16]
 e4c:	ldr	lr, [sp, #4]
 e50:	add	sp, sp, #544	; 0x220
 e54:	bx	lr

00000e58 <coda_grib_cursor_read_float_partial_array>:
 e58:	mov	ip, sp
 e5c:	sub	sp, sp, #544	; 0x220
 e60:	str	ip, [sp]
 e64:	str	lr, [sp, #4]
 e68:	str	r4, [sp, #8]
 e6c:	str	r5, [sp, #12]
 e70:	str	r6, [sp, #16]
 e74:	str	r7, [sp, #20]
 e78:	mov	r5, r3
 e7c:	mov	r6, r2
 e80:	mov	r4, r1
 e84:	ldr	r1, [r0, #4]
 e88:	lsl	r1, r1, #4
 e8c:	add	r3, r0, r1
 e90:	sub	lr, r3, #4096	; 0x1000
 e94:	ldr	r1, [lr, #4088]	; 0xff8
 e98:	ldr	ip, [r1, #8]
 e9c:	cmp	ip, #0
 ea0:	ble	f58 <coda_grib_cursor_read_float_partial_array+0x100>
 ea4:	mov	r2, r0
 ea8:	add	r3, sp, #24
 eac:	mov	lr, #130	; 0x82
 eb0:	ldr	ip, [r2], #4
 eb4:	subs	lr, lr, #1
 eb8:	str	ip, [r3], #4
 ebc:	bne	eb0 <coda_grib_cursor_read_float_partial_array+0x58>
 ec0:	ldr	r0, [sp, #28]
 ec4:	add	r2, r0, #1
 ec8:	str	r2, [sp, #28]
 ecc:	add	r3, sp, #32
 ed0:	lsl	r2, r2, #4
 ed4:	add	ip, r3, r2
 ed8:	ldr	r3, [r1, #12]
 edc:	sub	lr, ip, #4096	; 0x1000
 ee0:	str	r3, [lr, #4080]	; 0xff0
 ee4:	add	r1, sp, #32
 ee8:	ldr	r2, [sp, #28]
 eec:	lsl	r3, r2, #4
 ef0:	add	r2, r1, r3
 ef4:	mvn	r1, #0
 ef8:	mvn	r0, #0
 efc:	sub	lr, r2, #4096	; 0x1000
 f00:	str	r0, [lr, #4088]	; 0xff8
 f04:	sub	lr, r2, #4096	; 0x1000
 f08:	str	r1, [lr, #4092]	; 0xffc
 f0c:	mov	r7, #0
 f10:	cmp	r7, r6
 f14:	bge	f58 <coda_grib_cursor_read_float_partial_array+0x100>
 f18:	add	ip, sp, #32
 f1c:	ldr	r0, [sp, #28]
 f20:	lsl	r0, r0, #4
 f24:	add	ip, ip, r0
 f28:	add	r0, r4, r7
 f2c:	sub	lr, ip, #4096	; 0x1000
 f30:	str	r0, [lr, #4084]	; 0xff4
 f34:	add	r0, sp, #24
 f38:	add	r1, r5, r7, lsl #2
 f3c:	bl	530 <coda_grib_cursor_read_float>
 f40:	cmp	r0, #0
 f44:	beq	f50 <coda_grib_cursor_read_float_partial_array+0xf8>
 f48:	mvn	r0, #0
 f4c:	b	f5c <coda_grib_cursor_read_float_partial_array+0x104>
 f50:	add	r7, r7, #1
 f54:	b	f10 <coda_grib_cursor_read_float_partial_array+0xb8>
 f58:	mov	r0, #0
 f5c:	ldr	r4, [sp, #8]
 f60:	ldr	r5, [sp, #12]
 f64:	ldr	r6, [sp, #16]
 f68:	ldr	r7, [sp, #20]
 f6c:	ldr	lr, [sp, #4]
 f70:	add	sp, sp, #544	; 0x220
 f74:	bx	lr
