
../repos/stcorp-coda-3a25f25/CMakeFiles/coda.dir/libcoda/coda-grib-type.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <fpow>:
   0:	mov	ip, sp
   4:	sub	sp, sp, #8
   8:	str	ip, [sp]
   c:	str	lr, [sp, #4]
  10:	vmov.f64	d0, #112	; 0x3f800000  1.0
  14:	cmp	r1, #0
  18:	bge	4c <fpow+0x4c>
  1c:	rsb	r1, r1, #0
  20:	mov	r2, r1
  24:	sub	r1, r2, #1
  28:	cmp	r2, #0
  2c:	beq	40 <fpow+0x40>
  30:	vmov	s2, r0
  34:	vcvt.f64.s32	d1, s2
  38:	vmul.f64	d0, d0, d1
  3c:	b	20 <fpow+0x20>
  40:	vmov.f64	d3, #112	; 0x3f800000  1.0
  44:	vdiv.f64	d0, d3, d0
  48:	b	6c <fpow+0x6c>
  4c:	mov	r2, r1
  50:	sub	r1, r2, #1
  54:	cmp	r2, #0
  58:	beq	6c <fpow+0x6c>
  5c:	vmov	s2, r0
  60:	vcvt.f64.s32	d1, s2
  64:	vmul.f64	d0, d0, d1
  68:	b	4c <fpow+0x4c>
  6c:	ldr	lr, [sp, #4]
  70:	add	sp, sp, #8
  74:	bx	lr

00000078 <coda_grib_type_delete>:
  78:	mov	ip, sp
  7c:	sub	sp, sp, #16
  80:	str	ip, [sp]
  84:	str	lr, [sp, #4]
  88:	str	r4, [sp, #8]
  8c:	mov	r4, r0
  90:	cmp	r4, #0
  94:	bne	ac <coda_grib_type_delete+0x34>
  98:	ldr	r0, [pc, #168]	; 148 <coda_grib_type_delete+0xd0>
  9c:	ldr	r1, [pc, #160]	; 144 <coda_grib_type_delete+0xcc>
  a0:	mov	r2, #61	; 0x3d
  a4:	ldr	r3, [pc, #160]	; 14c <coda_grib_type_delete+0xd4>
  a8:	bl	0 <__assert_fail>
  ac:	ldr	r1, [r4]
  b0:	cmp	r1, #105	; 0x69
  b4:	beq	cc <coda_grib_type_delete+0x54>
  b8:	ldr	r0, [pc, #144]	; 150 <coda_grib_type_delete+0xd8>
  bc:	ldr	r1, [pc, #128]	; 144 <coda_grib_type_delete+0xcc>
  c0:	mov	r2, #62	; 0x3e
  c4:	ldr	r3, [pc, #128]	; 14c <coda_grib_type_delete+0xd4>
  c8:	bl	0 <__assert_fail>
  cc:	ldr	r0, [r4, #4]
  d0:	ldr	r1, [r0, #8]
  d4:	cmp	r1, #1
  d8:	bne	118 <coda_grib_type_delete+0xa0>
  dc:	ldr	r3, [r4, #12]
  e0:	cmp	r3, #0
  e4:	beq	f0 <coda_grib_type_delete+0x78>
  e8:	ldr	r0, [r4, #12]
  ec:	bl	0 <coda_dynamic_type_delete>
  f0:	ldr	r3, [r4, #56]	; 0x38
  f4:	cmp	r3, #0
  f8:	beq	104 <coda_grib_type_delete+0x8c>
  fc:	ldr	r0, [r4, #56]	; 0x38
 100:	bl	0 <free>
 104:	ldr	r2, [r4, #60]	; 0x3c
 108:	cmp	r2, #0
 10c:	beq	118 <coda_grib_type_delete+0xa0>
 110:	ldr	r0, [r4, #60]	; 0x3c
 114:	bl	0 <free>
 118:	ldr	r0, [r4, #4]
 11c:	cmp	r0, #0
 120:	beq	12c <coda_grib_type_delete+0xb4>
 124:	ldr	r0, [r4, #4]
 128:	bl	0 <coda_type_release>
 12c:	mov	r0, r4
 130:	bl	0 <free>
 134:	ldr	r4, [sp, #8]
 138:	ldr	lr, [sp, #4]
 13c:	add	sp, sp, #16
 140:	bx	lr
 144:	.word	0x0000006d
 148:	.word	0x00000060
 14c:	.word	0x00000124
 150:	.word	0x00000000

00000154 <coda_grib_value_array_new>:
 154:	mov	ip, sp
 158:	sub	sp, sp, #40	; 0x28
 15c:	str	ip, [sp, #4]
 160:	str	lr, [sp, #8]
 164:	str	r4, [sp, #16]
 168:	str	r5, [sp, #20]
 16c:	str	r6, [sp, #24]
 170:	str	r7, [sp, #28]
 174:	str	r8, [sp, #32]
 178:	mov	r5, r3
 17c:	mov	r6, r2
 180:	mov	r7, r1
 184:	mov	r8, r0
 188:	cmp	r8, #0
 18c:	bne	1ac <coda_grib_value_array_new+0x58>
 190:	mvn	r0, #99	; 0x63
 194:	ldr	r1, [pc, #428]	; 348 <coda_grib_value_array_new+0x1f4>
 198:	ldr	r2, [pc, #416]	; 340 <coda_grib_value_array_new+0x1ec>
 19c:	mov	r3, #92	; 0x5c
 1a0:	bl	0 <coda_set_error>
 1a4:	mov	r0, #0
 1a8:	b	31c <coda_grib_value_array_new+0x1c8>
 1ac:	ldr	r1, [r8, #40]	; 0x28
 1b0:	ldr	r3, [r1, #8]
 1b4:	cmp	r3, #3
 1b8:	beq	1ec <coda_grib_value_array_new+0x98>
 1bc:	ldr	r0, [r8, #40]	; 0x28
 1c0:	ldr	r0, [r0, #8]
 1c4:	bl	0 <coda_type_get_class_name>
 1c8:	movw	r2, #65136	; 0xfe70
 1cc:	movt	r2, #65535	; 0xffff
 1d0:	ldr	r1, [pc, #356]	; 33c <coda_grib_value_array_new+0x1e8>
 1d4:	mov	r3, r0
 1d8:	mov	r0, r2
 1dc:	mov	r2, r3
 1e0:	bl	0 <coda_set_error>
 1e4:	mov	r0, #0
 1e8:	b	31c <coda_grib_value_array_new+0x1c8>
 1ec:	mov	r0, #64	; 0x40
 1f0:	bl	0 <malloc>
 1f4:	mov	r4, r0
 1f8:	cmp	r4, #0
 1fc:	bne	224 <coda_grib_value_array_new+0xd0>
 200:	mvn	r0, #0
 204:	ldr	r1, [pc, #312]	; 344 <coda_grib_value_array_new+0x1f0>
 208:	mov	r2, #64	; 0x40
 20c:	ldr	r3, [pc, #300]	; 340 <coda_grib_value_array_new+0x1ec>
 210:	mov	ip, #106	; 0x6a
 214:	str	ip, [sp]
 218:	bl	0 <coda_set_error>
 21c:	mov	r0, #0
 220:	b	31c <coda_grib_value_array_new+0x1c8>
 224:	mov	r0, #105	; 0x69
 228:	str	r0, [r4]
 22c:	str	r8, [r4, #4]
 230:	ldr	r2, [r8, #4]
 234:	add	r1, r2, #1
 238:	str	r1, [r8, #4]
 23c:	str	r7, [r4, #8]
 240:	mov	r0, #0
 244:	str	r0, [r4, #12]
 248:	lsl	r1, r5, #3
 24c:	orr	r2, r1, r6, lsr #29
 250:	lsl	r1, r6, #3
 254:	str	r1, [r4, #16]
 258:	str	r2, [r4, #20]
 25c:	mov	r2, #0
 260:	str	r2, [r4, #24]
 264:	mov	r2, #32
 268:	str	r2, [r4, #28]
 26c:	mov	r1, #0
 270:	strh	r1, [r4, #32]
 274:	mov	ip, #0
 278:	strh	ip, [r4, #34]	; 0x22
 27c:	vldr	d6, [pc, #200]	; 34c <coda_grib_value_array_new+0x1f8>
 280:	vcvt.f32.f64	s8, d6
 284:	vstr	s8, [r4, #36]	; 0x24
 288:	vldr	d3, [pc, #188]	; 34c <coda_grib_value_array_new+0x1f8>
 28c:	vstr	d3, [r4, #40]	; 0x28
 290:	vldr	d2, [pc, #180]	; 34c <coda_grib_value_array_new+0x1f8>
 294:	vstr	d2, [r4, #48]	; 0x30
 298:	mov	ip, #0
 29c:	str	ip, [r4, #56]	; 0x38
 2a0:	mov	r0, #0
 2a4:	str	r0, [r4, #60]	; 0x3c
 2a8:	mov	r0, #8
 2ac:	bl	0 <malloc>
 2b0:	str	r0, [r4, #12]
 2b4:	ldr	r3, [r4, #12]
 2b8:	cmp	r3, #0
 2bc:	bne	2ec <coda_grib_value_array_new+0x198>
 2c0:	mov	r0, r4
 2c4:	bl	78 <coda_grib_type_delete>
 2c8:	mvn	r0, #0
 2cc:	ldr	r1, [pc, #112]	; 344 <coda_grib_value_array_new+0x1f0>
 2d0:	mov	r2, #8
 2d4:	ldr	r3, [pc, #100]	; 340 <coda_grib_value_array_new+0x1ec>
 2d8:	mov	ip, #130	; 0x82
 2dc:	str	ip, [sp]
 2e0:	bl	0 <coda_set_error>
 2e4:	mov	r0, #0
 2e8:	b	31c <coda_grib_value_array_new+0x1c8>
 2ec:	ldr	r2, [r4, #12]
 2f0:	mov	r3, #105	; 0x69
 2f4:	str	r3, [r2]
 2f8:	ldr	ip, [r4, #12]
 2fc:	ldr	r3, [r8, #40]	; 0x28
 300:	str	r3, [ip, #4]
 304:	ldr	r2, [r8, #40]	; 0x28
 308:	ldr	r1, [r8, #40]	; 0x28
 30c:	ldr	r0, [r1, #4]
 310:	add	ip, r0, #1
 314:	str	ip, [r2, #4]
 318:	mov	r0, r4
 31c:	ldr	r4, [sp, #16]
 320:	ldr	r5, [sp, #20]
 324:	ldr	r6, [sp, #24]
 328:	ldr	r7, [sp, #28]
 32c:	ldr	r8, [sp, #32]
 330:	ldr	lr, [sp, #8]
 334:	add	sp, sp, #40	; 0x28
 338:	bx	lr
 33c:	.word	0x00000023
 340:	.word	0x0000006d
 344:	.word	0x000000cb
 348:	.word	0x00000100
	...

00000354 <coda_grib_value_array_simple_packing_new>:
 354:	mov	ip, sp
 358:	sub	sp, sp, #56	; 0x38
 35c:	str	ip, [sp, #4]
 360:	str	lr, [sp, #8]
 364:	str	r4, [sp, #16]
 368:	str	r5, [sp, #20]
 36c:	str	r6, [sp, #24]
 370:	str	r7, [sp, #28]
 374:	str	r8, [sp, #32]
 378:	str	r9, [sp, #36]	; 0x24
 37c:	vstr	d8, [sp, #40]	; 0x28
 380:	vstr	d9, [sp, #48]	; 0x30
 384:	ldr	r6, [ip, #12]
 388:	vmov.f64	d9, d0
 38c:	ldr	r8, [ip, #8]
 390:	ldr	r7, [ip, #4]
 394:	ldr	r9, [ip]
 398:	mov	r4, r1
 39c:	mov	r1, r4
 3a0:	bl	154 <coda_grib_value_array_new>
 3a4:	mov	r5, r0
 3a8:	cmp	r5, #0
 3ac:	bne	3b8 <coda_grib_value_array_simple_packing_new+0x64>
 3b0:	mov	r0, #0
 3b4:	b	5a4 <coda_grib_value_array_simple_packing_new+0x250>
 3b8:	mov	r1, #1
 3bc:	str	r1, [r5, #24]
 3c0:	str	r9, [r5, #28]
 3c4:	sbfx	r0, r7, #0, #16
 3c8:	strh	r0, [r5, #32]
 3cc:	sbfx	r1, r8, #0, #16
 3d0:	strh	r1, [r5, #34]	; 0x22
 3d4:	vstr	s18, [r5, #36]	; 0x24
 3d8:	mov	r0, #2
 3dc:	mov	r1, r8
 3e0:	bl	0 <fpow>
 3e4:	vmov.f64	d8, d0
 3e8:	mov	r0, #10
 3ec:	rsb	r1, r7, #0
 3f0:	bl	0 <fpow>
 3f4:	vmul.f64	d4, d8, d0
 3f8:	vstr	d4, [r5, #40]	; 0x28
 3fc:	mov	r0, #10
 400:	rsb	r1, r7, #0
 404:	bl	0 <fpow>
 408:	vcvt.f64.f32	d6, s18
 40c:	vmul.f64	d3, d6, d0
 410:	vstr	d3, [r5, #48]	; 0x30
 414:	mov	r0, #0
 418:	str	r0, [r5, #56]	; 0x38
 41c:	mov	r0, #0
 420:	str	r0, [r5, #60]	; 0x3c
 424:	cmp	r6, #0
 428:	beq	5a0 <coda_grib_value_array_simple_packing_new+0x24c>
 42c:	and	ip, r4, #7
 430:	cmp	ip, #0
 434:	movne	r3, #1
 438:	moveq	r3, #0
 43c:	add	r4, r3, r4, asr #3
 440:	mov	r0, r4
 444:	bl	0 <malloc>
 448:	str	r0, [r5, #56]	; 0x38
 44c:	ldr	r3, [r5, #56]	; 0x38
 450:	cmp	r3, #0
 454:	bne	484 <coda_grib_value_array_simple_packing_new+0x130>
 458:	mov	r0, r5
 45c:	bl	78 <coda_grib_type_delete>
 460:	mvn	r0, #0
 464:	ldr	r1, [pc, #360]	; 5d4 <coda_grib_value_array_simple_packing_new+0x280>
 468:	ldr	r3, [pc, #352]	; 5d0 <coda_grib_value_array_simple_packing_new+0x27c>
 46c:	mov	r2, #173	; 0xad
 470:	str	r2, [sp]
 474:	mov	r2, r4
 478:	bl	0 <coda_set_error>
 47c:	mov	r0, #0
 480:	b	5a4 <coda_grib_value_array_simple_packing_new+0x250>
 484:	ldr	r0, [r5, #56]	; 0x38
 488:	mov	r2, r4
 48c:	mov	r1, r6
 490:	bl	0 <memcpy>
 494:	mov	r0, r4
 498:	bl	0 <malloc>
 49c:	str	r0, [r5, #60]	; 0x3c
 4a0:	ldr	ip, [r5, #60]	; 0x3c
 4a4:	cmp	ip, #0
 4a8:	bne	4d8 <coda_grib_value_array_simple_packing_new+0x184>
 4ac:	mov	r0, r5
 4b0:	bl	78 <coda_grib_type_delete>
 4b4:	mvn	r0, #0
 4b8:	ldr	r1, [pc, #276]	; 5d4 <coda_grib_value_array_simple_packing_new+0x280>
 4bc:	ldr	r3, [pc, #268]	; 5d0 <coda_grib_value_array_simple_packing_new+0x27c>
 4c0:	mov	r2, #183	; 0xb7
 4c4:	str	r2, [sp]
 4c8:	mov	r2, r4
 4cc:	bl	0 <coda_set_error>
 4d0:	mov	r0, #0
 4d4:	b	5a4 <coda_grib_value_array_simple_packing_new+0x250>
 4d8:	mov	r0, #0
 4dc:	cmp	r0, r4
 4e0:	bge	5a0 <coda_grib_value_array_simple_packing_new+0x24c>
 4e4:	ldr	r1, [r5, #56]	; 0x38
 4e8:	ldrb	r2, [r1, r0]
 4ec:	and	r7, r2, #255	; 0xff
 4f0:	ldr	r6, [r5, #60]	; 0x3c
 4f4:	asr	r1, r7, #7
 4f8:	and	ip, r1, #1
 4fc:	asr	r1, r7, #6
 500:	and	r1, r1, #1
 504:	add	r3, ip, r1
 508:	asr	r1, r7, #5
 50c:	and	r2, r1, #1
 510:	add	r1, r3, r2
 514:	asr	r2, r7, #4
 518:	and	r3, r2, #1
 51c:	add	r3, r1, r3
 520:	asr	r1, r7, #3
 524:	and	r2, r1, #1
 528:	add	ip, r3, r2
 52c:	asr	r3, r7, #2
 530:	and	r3, r3, #1
 534:	add	r1, ip, r3
 538:	asr	r2, r7, #1
 53c:	and	r2, r2, #1
 540:	add	ip, r1, r2
 544:	and	r1, r7, #1
 548:	add	r3, ip, r1
 54c:	and	r3, r3, #255	; 0xff
 550:	strb	r3, [r6, r0]
 554:	asr	lr, r0, #31
 558:	add	lr, r0, lr, lsr #28
 55c:	asr	r1, lr, #4
 560:	lsl	r3, r1, #4
 564:	sub	r3, r0, r3
 568:	cmp	r3, #0
 56c:	beq	598 <coda_grib_value_array_simple_packing_new+0x244>
 570:	ldr	r3, [r5, #60]	; 0x3c
 574:	ldr	r2, [r5, #60]	; 0x3c
 578:	ldrb	ip, [r2, r0]
 57c:	ldr	r1, [r5, #60]	; 0x3c
 580:	add	r2, r1, r0
 584:	sub	lr, r2, #4096	; 0x1000
 588:	ldrb	r1, [lr, #4095]	; 0xfff
 58c:	add	r2, ip, r1
 590:	and	r1, r2, #255	; 0xff
 594:	strb	r1, [r3, r0]
 598:	add	r0, r0, #1
 59c:	b	4dc <coda_grib_value_array_simple_packing_new+0x188>
 5a0:	mov	r0, r5
 5a4:	ldr	r4, [sp, #16]
 5a8:	ldr	r5, [sp, #20]
 5ac:	ldr	r6, [sp, #24]
 5b0:	ldr	r7, [sp, #28]
 5b4:	ldr	r8, [sp, #32]
 5b8:	ldr	r9, [sp, #36]	; 0x24
 5bc:	vldr	d8, [sp, #40]	; 0x28
 5c0:	vldr	d9, [sp, #48]	; 0x30
 5c4:	ldr	lr, [sp, #8]
 5c8:	add	sp, sp, #56	; 0x38
 5cc:	bx	lr
 5d0:	.word	0x0000006d
 5d4:	.word	0x000000cb
