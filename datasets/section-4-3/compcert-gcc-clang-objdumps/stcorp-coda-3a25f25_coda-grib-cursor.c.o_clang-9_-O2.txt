
../compcert-repos/stcorp-coda-3a25f25/CMakeFiles/coda_static.dir/libcoda/coda-grib-cursor.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <coda_grib_cursor_set_product>:
   0:	mov	r2, #1
   4:	stm	r0, {r1, r2}
   8:	mvn	r2, #0
   c:	ldr	r1, [r1, #20]
  10:	str	r2, [r0, #20]
  14:	str	r2, [r0, #16]
  18:	str	r2, [r0, #12]
  1c:	str	r1, [r0, #8]
  20:	mov	r0, #0
  24:	bx	lr

00000028 <coda_grib_cursor_goto_array_element>:
  28:	push	{fp, lr}
  2c:	mov	fp, sp
  30:	sub	sp, sp, #8
  34:	mov	ip, r1
  38:	cmp	r1, #1
  3c:	bne	a8 <coda_grib_cursor_goto_array_element+0x80>
  40:	mov	r1, r0
  44:	ldr	r0, [pc, #176]	; fc <coda_grib_cursor_goto_array_element+0xd4>
  48:	ldr	r3, [pc, r0]
  4c:	bl	0 <__aeabi_read_tp>
  50:	ldr	ip, [r1, #4]
  54:	ldr	r3, [r0, r3]
  58:	ldr	r2, [r2]
  5c:	add	r0, r1, ip, lsl #4
  60:	cmp	r3, #0
  64:	ldr	lr, [r0, #-8]
  68:	beq	80 <coda_grib_cursor_goto_array_element+0x58>
  6c:	ldr	r3, [lr, #8]
  70:	cmp	r2, #0
  74:	bmi	cc <coda_grib_cursor_goto_array_element+0xa4>
  78:	cmp	r3, r2
  7c:	ble	cc <coda_grib_cursor_goto_array_element+0xa4>
  80:	add	r3, ip, #1
  84:	add	ip, r0, #8
  88:	str	r3, [r1, #4]
  8c:	mvn	r3, #0
  90:	ldr	r1, [lr, #12]
  94:	stm	ip, {r1, r2, r3}
  98:	str	r3, [r0, #20]
  9c:	mov	r0, #0
  a0:	mov	sp, fp
  a4:	pop	{fp, pc}
  a8:	movw	r1, #0
  ac:	movw	r3, #0
  b0:	mov	r0, #68	; 0x44
  b4:	mov	r2, ip
  b8:	movt	r1, #0
  bc:	movt	r3, #0
  c0:	str	r0, [sp]
  c4:	mvn	r0, #105	; 0x69
  c8:	b	ec <coda_grib_cursor_goto_array_element+0xc4>
  cc:	movw	r1, #0
  d0:	mov	r0, #84	; 0x54
  d4:	movt	r1, #0
  d8:	str	r0, [sp, #4]
  dc:	mvn	r0, #106	; 0x6a
  e0:	str	r1, [sp]
  e4:	movw	r1, #0
  e8:	movt	r1, #0
  ec:	bl	0 <coda_set_error>
  f0:	mvn	r0, #0
  f4:	mov	sp, fp
  f8:	pop	{fp, pc}
  fc:	.word	0x000000ac

00000100 <coda_grib_cursor_goto_array_element_by_index>:
 100:	push	{r4, r5, fp, lr}
 104:	add	fp, sp, #8
 108:	sub	sp, sp, #8
 10c:	mov	r5, r1
 110:	mov	r1, r0
 114:	ldr	r0, [pc, #144]	; 1ac <coda_grib_cursor_goto_array_element_by_index+0xac>
 118:	ldr	r2, [pc, r0]
 11c:	bl	0 <__aeabi_read_tp>
 120:	ldr	r3, [r0, r2]
 124:	ldr	r2, [r1, #4]
 128:	add	r0, r1, r2, lsl #4
 12c:	cmp	r3, #0
 130:	ldr	r4, [r0, #-8]
 134:	beq	14c <coda_grib_cursor_goto_array_element_by_index+0x4c>
 138:	ldr	r3, [r4, #8]
 13c:	cmp	r5, #0
 140:	bmi	178 <coda_grib_cursor_goto_array_element_by_index+0x78>
 144:	cmp	r3, r5
 148:	ble	178 <coda_grib_cursor_goto_array_element_by_index+0x78>
 14c:	add	r2, r2, #1
 150:	str	r2, [r1, #4]
 154:	mvn	r2, #0
 158:	ldr	r1, [r4, #12]
 15c:	str	r1, [r0, #8]
 160:	str	r5, [r0, #12]
 164:	str	r2, [r0, #16]
 168:	str	r2, [r0, #20]
 16c:	mov	r0, #0
 170:	sub	sp, fp, #8
 174:	pop	{r4, r5, fp, pc}
 178:	movw	r1, #0
 17c:	mov	r0, #84	; 0x54
 180:	mov	r2, r5
 184:	movt	r1, #0
 188:	str	r0, [sp, #4]
 18c:	mvn	r0, #106	; 0x6a
 190:	str	r1, [sp]
 194:	movw	r1, #0
 198:	movt	r1, #0
 19c:	bl	0 <coda_set_error>
 1a0:	mvn	r0, #0
 1a4:	sub	sp, fp, #8
 1a8:	pop	{r4, r5, fp, pc}
 1ac:	.word	0x0000008c

000001b0 <coda_grib_cursor_goto_next_array_element>:
 1b0:	push	{r4, r5, r6, sl, fp, lr}
 1b4:	add	fp, sp, #16
 1b8:	sub	sp, sp, #8
 1bc:	ldr	r6, [r0, #4]
 1c0:	mov	r4, r0
 1c4:	sub	r5, r6, #1
 1c8:	str	r5, [r0, #4]
 1cc:	ldr	r0, [pc, #160]	; 274 <coda_grib_cursor_goto_next_array_element+0xc4>
 1d0:	ldr	r1, [pc, r0]
 1d4:	bl	0 <__aeabi_read_tp>
 1d8:	ldr	r3, [r0, r1]
 1dc:	add	r0, r4, #8
 1e0:	add	r1, r0, r6, lsl #4
 1e4:	add	r0, r0, r5, lsl #4
 1e8:	ldr	ip, [r1, #-32]	; 0xffffffe0
 1ec:	ldr	r1, [r0, #4]!
 1f0:	cmp	r3, #0
 1f4:	add	r2, r1, #1
 1f8:	beq	248 <coda_grib_cursor_goto_next_array_element+0x98>
 1fc:	ldr	r3, [ip, #8]
 200:	cmn	r1, #1
 204:	cmpge	r3, r2
 208:	bgt	248 <coda_grib_cursor_goto_next_array_element+0x98>
 20c:	movw	r1, #0
 210:	mov	r0, #84	; 0x54
 214:	movt	r1, #0
 218:	str	r0, [sp, #4]
 21c:	mvn	r0, #106	; 0x6a
 220:	str	r1, [sp]
 224:	movw	r1, #0
 228:	movt	r1, #0
 22c:	bl	0 <coda_set_error>
 230:	ldr	r0, [r4, #4]
 234:	add	r0, r0, #1
 238:	str	r0, [r4, #4]
 23c:	mvn	r0, #0
 240:	sub	sp, fp, #16
 244:	pop	{r4, r5, r6, sl, fp, pc}
 248:	str	r6, [r4, #4]
 24c:	add	r1, r4, r5, lsl #4
 250:	ldr	r3, [ip, #12]
 254:	str	r3, [r1, #8]
 258:	str	r2, [r0]
 25c:	mvn	r0, #0
 260:	str	r0, [r1, #16]
 264:	str	r0, [r1, #20]
 268:	mov	r0, #0
 26c:	sub	sp, fp, #16
 270:	pop	{r4, r5, r6, sl, fp, pc}
 274:	.word	0x0000009c

00000278 <coda_grib_cursor_goto_attributes>:
 278:	push	{r4, r5, fp, lr}
 27c:	add	fp, sp, #8
 280:	ldr	r1, [r0, #4]
 284:	add	r5, r0, #8
 288:	mov	r4, r0
 28c:	add	r0, r5, r1, lsl #4
 290:	add	r1, r1, #1
 294:	ldr	r0, [r0, #-16]
 298:	ldr	r0, [r0, #4]
 29c:	ldr	r0, [r0]
 2a0:	str	r1, [r4, #4]
 2a4:	bl	0 <coda_mem_empty_record>
 2a8:	ldr	r1, [r4, #4]
 2ac:	mvn	r2, #0
 2b0:	add	r1, r5, r1, lsl #4
 2b4:	str	r0, [r1, #-16]
 2b8:	mov	r0, #0
 2bc:	str	r2, [r1, #-12]
 2c0:	str	r2, [r1, #-8]
 2c4:	str	r2, [r1, #-4]
 2c8:	pop	{r4, r5, fp, pc}

000002cc <coda_grib_cursor_get_num_elements>:
 2cc:	ldr	r2, [r0, #4]
 2d0:	add	r0, r0, r2, lsl #4
 2d4:	ldr	r0, [r0, #-8]
 2d8:	ldr	r2, [r0, #4]
 2dc:	ldr	r3, [r2, #8]
 2e0:	mov	r2, #1
 2e4:	cmp	r3, #1
 2e8:	ldreq	r2, [r0, #8]
 2ec:	mov	r0, #0
 2f0:	str	r2, [r1]
 2f4:	bx	lr

000002f8 <coda_grib_cursor_get_array_dim>:
 2f8:	mov	r3, #1
 2fc:	str	r3, [r1]
 300:	ldr	r1, [r0, #4]
 304:	add	r0, r0, r1, lsl #4
 308:	ldr	r0, [r0, #-8]
 30c:	ldr	r1, [r0, #4]
 310:	ldr	r1, [r1, #8]
 314:	cmp	r1, #1
 318:	ldreq	r3, [r0, #8]
 31c:	mov	r0, #0
 320:	str	r3, [r2]
 324:	bx	lr

00000328 <coda_grib_cursor_read_float>:
 328:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
 32c:	add	fp, sp, #28
 330:	sub	sp, sp, #76	; 0x4c
 334:	mov	r4, r1
 338:	ldr	r1, [r0, #4]
 33c:	cmp	r1, #1
 340:	ble	aa0 <coda_grib_cursor_read_float+0x778>
 344:	add	r1, r0, r1, lsl #4
 348:	ldr	r3, [r1, #-24]	; 0xffffffe8
 34c:	ldr	r2, [r3, #4]
 350:	ldr	r2, [r2, #8]
 354:	cmp	r2, #1
 358:	bne	ab8 <coda_grib_cursor_read_float+0x790>
 35c:	ldr	r7, [r1, #-4]
 360:	ldr	r1, [r3, #24]
 364:	cmp	r1, #0
 368:	beq	468 <coda_grib_cursor_read_float+0x140>
 36c:	mov	r1, #0
 370:	str	r1, [fp, #-44]	; 0xffffffd4
 374:	str	r1, [fp, #-48]	; 0xffffffd0
 378:	ldr	r6, [r3, #28]
 37c:	cmp	r6, #0
 380:	beq	4d0 <coda_grib_cursor_read_float+0x1a8>
 384:	ldr	r1, [r3, #56]	; 0x38
 388:	cmp	r1, #0
 38c:	beq	4dc <coda_grib_cursor_read_float+0x1b4>
 390:	ldrb	ip, [r1, r7, asr #3]
 394:	and	lr, r7, #7
 398:	mov	r2, #1
 39c:	eor	r1, lr, #7
 3a0:	tst	ip, r2, lsl r1
 3a4:	beq	4e4 <coda_grib_cursor_read_float+0x1bc>
 3a8:	mov	r8, r6
 3ac:	mov	r2, #0
 3b0:	cmp	r7, #128	; 0x80
 3b4:	str	r4, [sp, #40]	; 0x28
 3b8:	blt	3e4 <coda_grib_cursor_read_float+0xbc>
 3bc:	ldr	r1, [r3, #60]	; 0x3c
 3c0:	asr	r5, r7, #7
 3c4:	mov	r2, #0
 3c8:	add	r4, r1, #15
 3cc:	mov	r1, #0
 3d0:	ldrb	r6, [r4, r1, lsl #4]
 3d4:	add	r1, r1, #1
 3d8:	cmp	r1, r5
 3dc:	add	r2, r2, r6
 3e0:	blt	3d0 <coda_grib_cursor_read_float+0xa8>
 3e4:	tst	r7, #120	; 0x78
 3e8:	beq	400 <coda_grib_cursor_read_float+0xd8>
 3ec:	asr	r1, r7, #3
 3f0:	ldr	r7, [r3, #60]	; 0x3c
 3f4:	add	r1, r1, r7
 3f8:	ldrb	r1, [r1, #-1]
 3fc:	add	r2, r2, r1
 400:	mov	r6, r8
 404:	cmp	lr, #0
 408:	beq	4f4 <coda_grib_cursor_read_float+0x1cc>
 40c:	cmp	lr, #1
 410:	add	r7, r2, ip, lsr #7
 414:	ubfxne	r1, ip, #6, #1
 418:	addne	r7, r1, r7
 41c:	cmpne	lr, #2
 420:	beq	4f8 <coda_grib_cursor_read_float+0x1d0>
 424:	ubfx	r1, ip, #5, #1
 428:	cmp	lr, #3
 42c:	add	r7, r1, r7
 430:	beq	4f8 <coda_grib_cursor_read_float+0x1d0>
 434:	ubfx	r1, ip, #4, #1
 438:	cmp	lr, #4
 43c:	add	r7, r1, r7
 440:	ubfxne	r1, ip, #3, #1
 444:	addne	r7, r1, r7
 448:	cmpne	lr, #5
 44c:	beq	4f8 <coda_grib_cursor_read_float+0x1d0>
 450:	ubfx	r1, ip, #2, #1
 454:	cmp	lr, #6
 458:	add	r7, r1, r7
 45c:	ubfxne	r1, ip, #1, #1
 460:	addne	r7, r1, r7
 464:	b	4f8 <coda_grib_cursor_read_float+0x1d0>
 468:	ldr	r0, [r0]
 46c:	ldrd	r2, [r3, #16]
 470:	mov	r1, #0
 474:	mov	r6, #4
 478:	ldr	r0, [r0, #52]	; 0x34
 47c:	str	r6, [sp]
 480:	stmib	sp, {r1, r4}
 484:	lsr	r1, r2, #3
 488:	lsl	r6, r7, #2
 48c:	orr	r1, r1, r3, lsl #29
 490:	asr	r3, r3, #3
 494:	adds	r2, r1, r7, lsl #2
 498:	adc	r3, r3, r6, asr #31
 49c:	bl	ad8 <read_bytes>
 4a0:	mvn	r1, #0
 4a4:	cmp	r0, #0
 4a8:	bne	a8c <coda_grib_cursor_read_float+0x764>
 4ac:	ldrb	r0, [r4]
 4b0:	ldrb	r1, [r4, #1]
 4b4:	ldrb	r2, [r4, #2]
 4b8:	ldrb	r3, [r4, #3]
 4bc:	strb	r0, [r4, #3]
 4c0:	strb	r3, [r4]
 4c4:	strb	r2, [r4, #1]
 4c8:	strb	r1, [r4, #2]
 4cc:	b	a88 <coda_grib_cursor_read_float+0x760>
 4d0:	ldr	r0, [r3, #36]	; 0x24
 4d4:	str	r0, [r4]
 4d8:	b	a8c <coda_grib_cursor_read_float+0x764>
 4dc:	str	r4, [sp, #40]	; 0x28
 4e0:	b	4f8 <coda_grib_cursor_read_float+0x1d0>
 4e4:	bl	0 <coda_NaN>
 4e8:	vcvt.f32.f64	s0, d0
 4ec:	vstr	s0, [r4]
 4f0:	b	a88 <coda_grib_cursor_read_float+0x760>
 4f4:	mov	r7, r2
 4f8:	ldr	r2, [r3, #16]
 4fc:	mul	r1, r6, r7
 500:	ldr	r5, [r3, #20]
 504:	ldr	r0, [r0]
 508:	asr	r7, r6, #31
 50c:	str	r6, [sp, #44]	; 0x2c
 510:	str	r3, [sp, #36]	; 0x24
 514:	adds	ip, r2, r1
 518:	ldr	r0, [r0, #52]	; 0x34
 51c:	adc	r8, r5, r1, asr #31
 520:	mov	r1, #8
 524:	ands	r4, r6, #7
 528:	and	sl, ip, #7
 52c:	sub	r1, r1, r6, asr #3
 530:	str	r4, [sp, #52]	; 0x34
 534:	movwne	r4, #1
 538:	sub	lr, r1, r4
 53c:	sub	r1, fp, #48	; 0x30
 540:	add	r9, r1, lr
 544:	adds	r1, sl, r6
 548:	rsb	r2, r1, #0
 54c:	and	r5, r2, #7
 550:	adc	r2, r7, #0
 554:	rsbs	r1, r1, #8
 558:	rscs	r1, r2, #0
 55c:	blt	5b8 <coda_grib_cursor_read_float+0x290>
 560:	mov	r1, #1
 564:	mov	r2, #0
 568:	asr	r3, r8, #3
 56c:	stm	sp, {r1, r2, r9}
 570:	lsr	r1, ip, #3
 574:	orr	r2, r1, r8, lsl #29
 578:	bl	ad8 <read_bytes>
 57c:	ldr	r2, [sp, #44]	; 0x2c
 580:	mvn	r1, #0
 584:	cmp	r0, #0
 588:	bne	a8c <coda_grib_cursor_read_float+0x764>
 58c:	cmp	r5, #0
 590:	ldrbne	r0, [r9]
 594:	lsrne	r0, r0, r5
 598:	strbne	r0, [r9]
 59c:	tst	r2, #7
 5a0:	beq	a1c <coda_grib_cursor_read_float+0x6f4>
 5a4:	ldrb	r0, [r9]
 5a8:	mvn	r1, #0
 5ac:	bic	r0, r0, r1, lsl r2
 5b0:	strb	r0, [r9]
 5b4:	b	a1c <coda_grib_cursor_read_float+0x6f4>
 5b8:	mov	r6, ip
 5bc:	cmp	r5, #0
 5c0:	beq	6ec <coda_grib_cursor_read_float+0x3c4>
 5c4:	str	r5, [sp, #48]	; 0x30
 5c8:	ldr	r5, [sp, #44]	; 0x2c
 5cc:	str	r0, [sp, #52]	; 0x34
 5d0:	mov	r1, r7
 5d4:	mov	r2, #24
 5d8:	mov	r3, #0
 5dc:	str	r4, [sp, #32]
 5e0:	str	lr, [sp, #28]
 5e4:	mov	r4, #0
 5e8:	mov	r0, r5
 5ec:	bl	0 <__aeabi_ldivmod>
 5f0:	orrs	r0, r2, r3
 5f4:	beq	758 <coda_grib_cursor_read_float+0x430>
 5f8:	mov	r1, r2
 5fc:	sub	r2, fp, #32
 600:	asr	r3, r8, #3
 604:	add	r7, sl, r1
 608:	ands	r5, r7, #7
 60c:	movwne	r5, #1
 610:	ands	sl, r1, #7
 614:	add	r0, r5, r7, lsr #3
 618:	movwne	sl, #1
 61c:	stm	sp, {r0, r4}
 620:	str	r0, [sp, #24]
 624:	lsr	r0, r6, #3
 628:	str	r2, [sp, #8]
 62c:	mov	r4, r6
 630:	mov	r6, r1
 634:	orr	r2, r0, r8, lsl #29
 638:	ldr	r0, [sp, #52]	; 0x34
 63c:	bl	ad8 <read_bytes>
 640:	cmp	r0, #0
 644:	bne	a98 <coda_grib_cursor_read_float+0x770>
 648:	ldr	ip, [sp, #24]
 64c:	add	r0, sl, r6, lsr #3
 650:	sub	lr, fp, #32
 654:	str	r0, [sp, #20]
 658:	mov	r0, #0
 65c:	str	r0, [fp, #-36]	; 0xffffffdc
 660:	cmp	ip, #0
 664:	beq	818 <coda_grib_cursor_read_float+0x4f0>
 668:	lsr	r0, r7, #3
 66c:	mov	r2, #0
 670:	mov	r3, lr
 674:	add	r1, r0, r5
 678:	cmp	r1, #16
 67c:	bcc	7f0 <coda_grib_cursor_read_float+0x4c8>
 680:	bic	r2, r1, #15
 684:	mov	r3, #1
 688:	str	r6, [sp, #16]
 68c:	subs	r0, r2, #16
 690:	add	r0, r3, r0, lsr #4
 694:	and	r3, r0, #1
 698:	str	r3, [sp, #12]
 69c:	beq	7ac <coda_grib_cursor_read_float+0x484>
 6a0:	sub	r7, r0, r3
 6a4:	sub	r0, fp, #36	; 0x24
 6a8:	mov	r5, #0
 6ac:	mvn	r3, #31
 6b0:	sub	r0, r0, #28
 6b4:	add	r6, lr, r5
 6b8:	add	ip, r0, #16
 6bc:	subs	r7, r7, #2
 6c0:	add	r5, r5, #32
 6c4:	vld1.8	{d16-d17}, [r6]!
 6c8:	vrev64.8	q8, q8
 6cc:	vext.8	q8, q8, q8, #8
 6d0:	vst1.8	{d16-d17}, [ip]
 6d4:	vld1.8	{d16-d17}, [r6]
 6d8:	vrev64.8	q8, q8
 6dc:	vext.8	q8, q8, q8, #8
 6e0:	vst1.8	{d16-d17}, [r0], r3
 6e4:	bne	6b4 <coda_grib_cursor_read_float+0x38c>
 6e8:	b	7b0 <coda_grib_cursor_read_float+0x488>
 6ec:	ldr	r4, [sp, #52]	; 0x34
 6f0:	cmp	r4, #0
 6f4:	beq	764 <coda_grib_cursor_read_float+0x43c>
 6f8:	mov	r1, #1
 6fc:	mov	sl, #0
 700:	sub	r2, fp, #32
 704:	asr	r3, r8, #3
 708:	mov	r7, r0
 70c:	stm	sp, {r1, sl}
 710:	lsr	r1, r6, #3
 714:	str	r2, [sp, #8]
 718:	orr	r2, r1, r8, lsl #29
 71c:	bl	ad8 <read_bytes>
 720:	ldr	r2, [sp, #44]	; 0x2c
 724:	cmp	r0, #0
 728:	bne	a98 <coda_grib_cursor_read_float+0x770>
 72c:	ldrb	r0, [fp, #-32]	; 0xffffffe0
 730:	mvn	r1, #0
 734:	bic	r0, r0, r1, lsl r4
 738:	subs	r1, r2, r4
 73c:	rsc	r3, sl, r2, asr #31
 740:	adds	r6, r6, r4
 744:	mov	r2, r1
 748:	strb	r0, [r9], #1
 74c:	adc	r8, r8, #0
 750:	mov	r0, r7
 754:	b	76c <coda_grib_cursor_read_float+0x444>
 758:	ldr	r0, [sp, #52]	; 0x34
 75c:	mov	r4, r6
 760:	b	97c <coda_grib_cursor_read_float+0x654>
 764:	ldr	r2, [sp, #44]	; 0x2c
 768:	asr	r3, r2, #31
 76c:	subs	r1, r2, #1
 770:	sbcs	r1, r3, #0
 774:	blt	a1c <coda_grib_cursor_read_float+0x6f4>
 778:	lsr	r2, r2, #3
 77c:	lsr	r1, r3, #3
 780:	orr	r2, r2, r3, lsl #29
 784:	asr	r3, r8, #3
 788:	str	r2, [sp]
 78c:	stmib	sp, {r1, r9}
 790:	lsr	r1, r6, #3
 794:	orr	r2, r1, r8, lsl #29
 798:	bl	ad8 <read_bytes>
 79c:	mvn	r1, #0
 7a0:	cmp	r0, #0
 7a4:	bne	a8c <coda_grib_cursor_read_float+0x764>
 7a8:	b	a1c <coda_grib_cursor_read_float+0x6f4>
 7ac:	mov	r5, #0
 7b0:	ldr	r0, [sp, #12]
 7b4:	mov	r3, lr
 7b8:	cmp	r0, #0
 7bc:	beq	7e0 <coda_grib_cursor_read_float+0x4b8>
 7c0:	add	r0, r3, r5
 7c4:	vld1.8	{d16-d17}, [r0]
 7c8:	sub	r0, fp, #36	; 0x24
 7cc:	sub	r0, r0, r5
 7d0:	sub	r0, r0, #12
 7d4:	vrev64.8	q8, q8
 7d8:	vext.8	q8, q8, q8, #8
 7dc:	vst1.8	{d16-d17}, [r0]
 7e0:	ldr	r6, [sp, #16]
 7e4:	ldr	ip, [sp, #24]
 7e8:	cmp	r1, r2
 7ec:	beq	814 <coda_grib_cursor_read_float+0x4ec>
 7f0:	add	r0, r3, r2
 7f4:	sub	r3, fp, #36	; 0x24
 7f8:	sub	r1, r1, r2
 7fc:	sub	r2, r3, r2
 800:	add	r2, r2, #3
 804:	ldrb	r3, [r0], #1
 808:	subs	r1, r1, #1
 80c:	strb	r3, [r2], #-1
 810:	bne	804 <coda_grib_cursor_read_float+0x4dc>
 814:	ldr	r0, [fp, #-36]	; 0xffffffdc
 818:	ldr	r1, [sp, #48]	; 0x30
 81c:	ldr	lr, [sp, #20]
 820:	ldr	r7, [sp, #44]	; 0x2c
 824:	sub	r1, r1, ip, lsl #3
 828:	cmp	lr, #0
 82c:	add	r1, r1, #32
 830:	lsr	r0, r0, r1
 834:	mvn	r1, #0
 838:	bic	r0, r0, r1, lsl r6
 83c:	str	r0, [fp, #-36]	; 0xffffffdc
 840:	beq	960 <coda_grib_cursor_read_float+0x638>
 844:	lsr	r0, r6, #3
 848:	add	r1, r0, sl
 84c:	mov	sl, #0
 850:	cmp	r1, #16
 854:	bcc	928 <coda_grib_cursor_read_float+0x600>
 858:	bic	sl, r1, #15
 85c:	mov	r2, #1
 860:	str	r6, [sp, #16]
 864:	subs	r0, sl, #16
 868:	add	r0, r2, r0, lsr #4
 86c:	and	r2, r0, #1
 870:	str	r2, [sp, #24]
 874:	beq	8e0 <coda_grib_cursor_read_float+0x5b8>
 878:	sub	r5, r0, r2
 87c:	ldr	r2, [sp, #28]
 880:	sub	r0, fp, #36	; 0x24
 884:	mov	r3, #0
 888:	add	r0, r0, r1
 88c:	sub	r7, r0, #32
 890:	sub	r0, fp, #48	; 0x30
 894:	add	r0, r0, r2
 898:	mvn	r2, #31
 89c:	sub	r0, r0, #8
 8a0:	add	r6, r7, #16
 8a4:	subs	r5, r5, #2
 8a8:	vld1.8	{d16-d17}, [r6]
 8ac:	add	r6, r0, r3
 8b0:	add	r3, r3, #32
 8b4:	add	ip, r6, #8
 8b8:	add	r6, r6, #24
 8bc:	vrev64.8	q8, q8
 8c0:	vext.8	q8, q8, q8, #8
 8c4:	vst1.8	{d16-d17}, [ip]
 8c8:	vld1.8	{d16-d17}, [r7], r2
 8cc:	vrev64.8	q8, q8
 8d0:	vext.8	q8, q8, q8, #8
 8d4:	vst1.8	{d16-d17}, [r6]
 8d8:	bne	8a0 <coda_grib_cursor_read_float+0x578>
 8dc:	b	8e4 <coda_grib_cursor_read_float+0x5bc>
 8e0:	mov	r3, #0
 8e4:	ldr	r0, [sp, #24]
 8e8:	cmp	r0, #0
 8ec:	beq	918 <coda_grib_cursor_read_float+0x5f0>
 8f0:	mvn	r0, r3
 8f4:	sub	r2, fp, #36	; 0x24
 8f8:	add	r0, lr, r0
 8fc:	add	r0, r2, r0
 900:	sub	r0, r0, #15
 904:	vld1.8	{d16-d17}, [r0]
 908:	add	r0, r9, r3
 90c:	vrev64.8	q8, q8
 910:	vext.8	q8, q8, q8, #8
 914:	vst1.8	{d16-d17}, [r0]
 918:	ldr	r7, [sp, #44]	; 0x2c
 91c:	ldr	r6, [sp, #16]
 920:	cmp	r1, sl
 924:	beq	960 <coda_grib_cursor_read_float+0x638>
 928:	asr	r2, r7, #3
 92c:	sub	r0, r1, sl
 930:	sub	r1, sl, r2
 934:	ldr	r2, [sp, #32]
 938:	sub	r1, r1, r2
 93c:	sub	r2, fp, #48	; 0x30
 940:	add	r1, r2, r1
 944:	sub	r2, fp, #36	; 0x24
 948:	add	r1, r1, #8
 94c:	sub	r2, r2, #1
 950:	ldrb	r3, [r2, r0]
 954:	subs	r0, r0, #1
 958:	strb	r3, [r1], #1
 95c:	bne	950 <coda_grib_cursor_read_float+0x628>
 960:	mov	r0, #0
 964:	subs	r5, r7, r6
 968:	add	r9, r9, lr
 96c:	rsc	r7, r0, r7, asr #31
 970:	ldr	r0, [sp, #52]	; 0x34
 974:	adds	r4, r4, r6
 978:	adc	r8, r8, #0
 97c:	subs	r1, r5, #1
 980:	sbcs	r1, r7, #0
 984:	blt	a1c <coda_grib_cursor_read_float+0x6f4>
 988:	sub	r6, fp, #32
 98c:	mov	sl, #4
 990:	mov	r1, #0
 994:	str	sl, [sp]
 998:	asr	r3, r8, #3
 99c:	stmib	sp, {r1, r6}
 9a0:	lsr	r1, r4, #3
 9a4:	orr	r2, r1, r8, lsl #29
 9a8:	bl	ad8 <read_bytes>
 9ac:	cmp	r0, #0
 9b0:	bne	a98 <coda_grib_cursor_read_float+0x770>
 9b4:	ldrb	r3, [fp, #-29]	; 0xffffffe3
 9b8:	ldrb	r0, [fp, #-32]	; 0xffffffe0
 9bc:	ldrb	r1, [fp, #-31]	; 0xffffffe1
 9c0:	ldrb	r2, [fp, #-30]	; 0xffffffe2
 9c4:	adds	r4, r4, #24
 9c8:	adc	r8, r8, #0
 9cc:	subs	r5, r5, #24
 9d0:	sbc	r7, r7, #0
 9d4:	strb	r3, [fp, #-36]	; 0xffffffdc
 9d8:	strb	r2, [fp, #-35]	; 0xffffffdd
 9dc:	strb	r1, [fp, #-34]	; 0xffffffde
 9e0:	strb	r0, [fp, #-33]	; 0xffffffdf
 9e4:	ldr	r1, [sp, #48]	; 0x30
 9e8:	ldr	r0, [fp, #-36]	; 0xffffffdc
 9ec:	lsr	r0, r0, r1
 9f0:	str	r0, [fp, #-36]	; 0xffffffdc
 9f4:	strb	r0, [r9, #2]
 9f8:	lsr	r1, r0, #8
 9fc:	lsr	r0, r0, #16
 a00:	strb	r1, [r9, #1]
 a04:	strb	r0, [r9]
 a08:	rsbs	r0, r5, #0
 a0c:	add	r9, r9, #3
 a10:	rscs	r0, r7, #0
 a14:	ldr	r0, [sp, #52]	; 0x34
 a18:	blt	990 <coda_grib_cursor_read_float+0x668>
 a1c:	ldrb	r7, [fp, #-41]	; 0xffffffd7
 a20:	ldrb	r0, [fp, #-48]	; 0xffffffd0
 a24:	ldrb	r1, [fp, #-47]	; 0xffffffd1
 a28:	ldrb	r2, [fp, #-46]	; 0xffffffd2
 a2c:	ldrb	r3, [fp, #-45]	; 0xffffffd3
 a30:	strb	r7, [fp, #-48]	; 0xffffffd0
 a34:	ldrb	r7, [fp, #-42]	; 0xffffffd6
 a38:	strb	r7, [fp, #-47]	; 0xffffffd1
 a3c:	ldrb	r7, [fp, #-43]	; 0xffffffd5
 a40:	strb	r7, [fp, #-46]	; 0xffffffd2
 a44:	ldrb	r7, [fp, #-44]	; 0xffffffd4
 a48:	strb	r7, [fp, #-45]	; 0xffffffd3
 a4c:	strb	r0, [fp, #-41]	; 0xffffffd7
 a50:	strb	r1, [fp, #-42]	; 0xffffffd6
 a54:	strb	r2, [fp, #-43]	; 0xffffffd5
 a58:	strb	r3, [fp, #-44]	; 0xffffffd4
 a5c:	ldr	r0, [fp, #-48]	; 0xffffffd0
 a60:	ldr	r1, [fp, #-44]	; 0xffffffd4
 a64:	bl	0 <__aeabi_l2d>
 a68:	ldr	r2, [sp, #36]	; 0x24
 a6c:	vmov	d18, r0, r1
 a70:	ldr	r0, [sp, #40]	; 0x28
 a74:	vldr	d16, [r2, #40]	; 0x28
 a78:	vldr	d17, [r2, #48]	; 0x30
 a7c:	vmla.f64	d17, d16, d18
 a80:	vcvt.f32.f64	s0, d17
 a84:	vstr	s0, [r0]
 a88:	mov	r1, #0
 a8c:	mov	r0, r1
 a90:	sub	sp, fp, #28
 a94:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
 a98:	mvn	r1, #0
 a9c:	b	a8c <coda_grib_cursor_read_float+0x764>
 aa0:	movw	r0, #0
 aa4:	movw	r1, #0
 aa8:	movw	r3, #0
 aac:	mov	r2, #144	; 0x90
 ab0:	movt	r0, #0
 ab4:	b	acc <coda_grib_cursor_read_float+0x7a4>
 ab8:	movw	r0, #0
 abc:	movw	r1, #0
 ac0:	movw	r3, #0
 ac4:	mov	r2, #146	; 0x92
 ac8:	movt	r0, #0
 acc:	movt	r1, #0
 ad0:	movt	r3, #0
 ad4:	bl	0 <__assert_fail>

00000ad8 <read_bytes>:
 ad8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
 adc:	add	fp, sp, #28
 ae0:	sub	sp, sp, #68	; 0x44
 ae4:	ldr	r7, [r0, #48]	; 0x30
 ae8:	mov	r4, r2
 aec:	ldr	r1, [fp, #12]
 af0:	ldr	r2, [fp, #8]
 af4:	ldr	ip, [fp, #16]
 af8:	mov	sl, r3
 afc:	cmp	r7, #0
 b00:	beq	b84 <read_bytes+0xac>
 b04:	add	r9, r0, #40	; 0x28
 b08:	adds	r5, r2, r4
 b0c:	ldr	r8, [r9]
 b10:	ldr	r3, [r9, #4]
 b14:	adc	r6, r1, sl
 b18:	subs	r5, r8, r5
 b1c:	sbcs	r3, r3, r6
 b20:	bcs	bcc <read_bytes+0xf4>
 b24:	ldr	r0, [r0, #16]
 b28:	cmp	r0, #1
 b2c:	bls	bb0 <read_bytes+0xd8>
 b30:	add	r8, sp, #47	; 0x2f
 b34:	mov	r0, r2
 b38:	mov	r2, r8
 b3c:	bl	0 <coda_str64>
 b40:	add	r7, sp, #26
 b44:	mov	r0, r4
 b48:	mov	r1, sl
 b4c:	mov	r2, r7
 b50:	bl	0 <coda_str64>
 b54:	ldrd	r0, [r9]
 b58:	add	r4, sp, #5
 b5c:	mov	r2, r4
 b60:	bl	0 <coda_str64>
 b64:	movw	r1, #0
 b68:	mvn	r0, #300	; 0x12c
 b6c:	mov	r2, r8
 b70:	mov	r3, r7
 b74:	str	r4, [sp]
 b78:	movt	r1, #0
 b7c:	bl	0 <coda_set_error>
 b80:	b	bc0 <read_bytes+0xe8>
 b84:	ldr	r3, [r0, #16]
 b88:	cmp	r3, #2
 b8c:	bcs	c28 <read_bytes+0x150>
 b90:	add	r3, r0, #8
 b94:	adds	r7, r2, r4
 b98:	ldr	r6, [r3]
 b9c:	ldr	r3, [r3, #4]
 ba0:	adc	r1, r1, sl
 ba4:	subs	r7, r6, r7
 ba8:	sbcs	r1, r3, r1
 bac:	bcs	be4 <read_bytes+0x10c>
 bb0:	movw	r1, #0
 bb4:	mvn	r0, #300	; 0x12c
 bb8:	movt	r1, #0
 bbc:	bl	0 <coda_set_error>
 bc0:	mvn	r0, #0
 bc4:	sub	sp, fp, #28
 bc8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
 bcc:	add	r1, r7, r4
 bd0:	mov	r0, ip
 bd4:	bl	0 <memcpy>
 bd8:	mov	r0, #0
 bdc:	sub	sp, fp, #28
 be0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
 be4:	ldr	r0, [r0, #56]	; 0x38
 be8:	mov	r1, ip
 bec:	mov	r3, r4
 bf0:	bl	0 <pread>
 bf4:	mov	r1, r0
 bf8:	mov	r0, #0
 bfc:	cmn	r1, #1
 c00:	bgt	bc4 <read_bytes+0xec>
 c04:	bl	0 <__errno_location>
 c08:	ldr	r0, [r0]
 c0c:	bl	0 <strerror>
 c10:	movw	r1, #0
 c14:	mov	r2, r0
 c18:	mvn	r0, #21
 c1c:	movt	r1, #0
 c20:	bl	0 <coda_set_error>
 c24:	b	bc0 <read_bytes+0xe8>
 c28:	movw	r0, #0
 c2c:	movw	r1, #0
 c30:	movw	r3, #0
 c34:	mov	r2, #83	; 0x53
 c38:	movt	r0, #0
 c3c:	movt	r1, #0
 c40:	movt	r3, #0
 c44:	bl	0 <__assert_fail>

00000c48 <coda_grib_cursor_read_float_array>:
 c48:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
 c4c:	add	fp, sp, #24
 c50:	sub	sp, sp, #528	; 0x210
 c54:	mov	r4, r1
 c58:	mov	r1, r0
 c5c:	ldr	r0, [r0, #4]
 c60:	add	r0, r1, r0, lsl #4
 c64:	ldr	r7, [r0, #-8]
 c68:	ldr	r0, [r7, #8]
 c6c:	cmp	r0, #1
 c70:	blt	cdc <coda_grib_cursor_read_float_array+0x94>
 c74:	mov	r9, sp
 c78:	mov	r2, #520	; 0x208
 c7c:	mov	r0, r9
 c80:	bl	0 <memcpy>
 c84:	ldr	r0, [sp, #4]
 c88:	mvn	r8, #0
 c8c:	mov	r6, #0
 c90:	add	r1, r0, #1
 c94:	add	r0, r9, r0, lsl #4
 c98:	str	r1, [sp, #4]
 c9c:	ldr	r1, [r7, #12]
 ca0:	add	r5, r0, #12
 ca4:	str	r8, [r0, #16]
 ca8:	str	r8, [r0, #20]
 cac:	str	r1, [r0, #8]
 cb0:	mov	r0, r9
 cb4:	mov	r1, r4
 cb8:	str	r6, [r5]
 cbc:	bl	328 <coda_grib_cursor_read_float>
 cc0:	cmp	r0, #0
 cc4:	bne	ce0 <coda_grib_cursor_read_float_array+0x98>
 cc8:	ldr	r0, [r7, #8]
 ccc:	add	r6, r6, #1
 cd0:	add	r4, r4, #4
 cd4:	cmp	r6, r0
 cd8:	blt	cb0 <coda_grib_cursor_read_float_array+0x68>
 cdc:	mov	r8, #0
 ce0:	mov	r0, r8
 ce4:	sub	sp, fp, #24
 ce8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}

00000cec <coda_grib_cursor_read_float_partial_array>:
 cec:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
 cf0:	add	fp, sp, #24
 cf4:	sub	sp, sp, #528	; 0x210
 cf8:	mov	r6, r1
 cfc:	mov	r1, r0
 d00:	ldr	r0, [r0, #4]
 d04:	add	r0, r1, r0, lsl #4
 d08:	ldr	r7, [r0, #-8]
 d0c:	ldr	r0, [r7, #8]
 d10:	cmp	r0, #1
 d14:	blt	d90 <coda_grib_cursor_read_float_partial_array+0xa4>
 d18:	mov	r9, sp
 d1c:	mov	r5, r2
 d20:	mov	r2, #520	; 0x208
 d24:	mov	r4, r3
 d28:	mov	r0, r9
 d2c:	bl	0 <memcpy>
 d30:	ldr	r0, [sp, #4]
 d34:	mvn	r2, #0
 d38:	mov	r8, #0
 d3c:	cmp	r5, #1
 d40:	add	r1, r0, #1
 d44:	add	r0, r9, r0, lsl #4
 d48:	str	r1, [sp, #4]
 d4c:	ldr	r1, [r7, #12]
 d50:	str	r2, [r0, #16]
 d54:	str	r2, [r0, #20]
 d58:	str	r1, [r0, #8]
 d5c:	blt	d9c <coda_grib_cursor_read_float_partial_array+0xb0>
 d60:	add	r7, r0, #12
 d64:	mov	r0, r9
 d68:	mov	r1, r4
 d6c:	str	r6, [r7]
 d70:	bl	328 <coda_grib_cursor_read_float>
 d74:	cmp	r0, #0
 d78:	bne	d98 <coda_grib_cursor_read_float_partial_array+0xac>
 d7c:	add	r6, r6, #1
 d80:	add	r4, r4, #4
 d84:	subs	r5, r5, #1
 d88:	bne	d64 <coda_grib_cursor_read_float_partial_array+0x78>
 d8c:	b	d9c <coda_grib_cursor_read_float_partial_array+0xb0>
 d90:	mov	r8, #0
 d94:	b	d9c <coda_grib_cursor_read_float_partial_array+0xb0>
 d98:	mvn	r8, #0
 d9c:	mov	r0, r8
 da0:	sub	sp, fp, #24
 da4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
