
../compcert-repos/stcorp-coda-3a25f25/CMakeFiles/codacheck.dir/tools/codacheck/codacheck.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <main>:
   0:	push	{r4, r5, fp, lr}
   4:	add	fp, sp, #8
   8:	sub	sp, sp, #72	; 0x48
   c:	sub	sp, sp, #1024	; 0x400
  10:	movw	r2, #0
  14:	str	r2, [fp, #-12]
  18:	str	r0, [fp, #-16]
  1c:	str	r1, [fp, #-20]	; 0xffffffec
  20:	str	r2, [fp, #-24]	; 0xffffffe8
  24:	movw	r0, #0
  28:	movt	r0, #0
  2c:	str	r2, [r0]
  30:	movw	r0, #0
  34:	movt	r0, #0
  38:	str	r2, [r0]
  3c:	movw	r0, #1
  40:	str	r0, [fp, #-28]	; 0xffffffe4
  44:	movw	r0, #0
  48:	movt	r0, #0
  4c:	str	r2, [r0]
  50:	ldr	r0, [fp, #-16]
  54:	cmp	r0, #1
  58:	beq	94 <main+0x94>
  5c:	ldr	r0, [fp, #-20]	; 0xffffffec
  60:	ldr	r0, [r0, #4]
  64:	movw	r1, #0
  68:	movt	r1, #0
  6c:	bl	0 <strcmp>
  70:	cmp	r0, #0
  74:	beq	94 <main+0x94>
  78:	ldr	r0, [fp, #-20]	; 0xffffffec
  7c:	ldr	r0, [r0, #4]
  80:	movw	r1, #0
  84:	movt	r1, #0
  88:	bl	0 <strcmp>
  8c:	cmp	r0, #0
  90:	bne	a0 <main+0xa0>
  94:	bl	8e0 <print_help>
  98:	movw	r0, #0
  9c:	bl	0 <exit>
  a0:	ldr	r0, [fp, #-20]	; 0xffffffec
  a4:	ldr	r0, [r0, #4]
  a8:	movw	r1, #0
  ac:	movt	r1, #0
  b0:	bl	0 <strcmp>
  b4:	cmp	r0, #0
  b8:	beq	d8 <main+0xd8>
  bc:	ldr	r0, [fp, #-20]	; 0xffffffec
  c0:	ldr	r0, [r0, #4]
  c4:	movw	r1, #0
  c8:	movt	r1, #0
  cc:	bl	0 <strcmp>
  d0:	cmp	r0, #0
  d4:	bne	e4 <main+0xe4>
  d8:	bl	b84 <print_version>
  dc:	movw	r0, #0
  e0:	bl	0 <exit>
  e4:	movw	r0, #1
  e8:	str	r0, [fp, #-32]	; 0xffffffe0
  ec:	ldr	r0, [fp, #-32]	; 0xffffffe0
  f0:	add	r0, r0, #1
  f4:	ldr	r1, [fp, #-16]
  f8:	cmp	r0, r1
  fc:	bge	150 <main+0x150>
 100:	ldr	r0, [fp, #-20]	; 0xffffffec
 104:	ldr	r1, [fp, #-32]	; 0xffffffe0
 108:	add	r0, r0, r1, lsl #2
 10c:	ldr	r0, [r0]
 110:	movw	r1, #0
 114:	movt	r1, #0
 118:	bl	0 <strcmp>
 11c:	cmp	r0, #0
 120:	bne	150 <main+0x150>
 124:	ldr	r0, [fp, #-20]	; 0xffffffec
 128:	ldr	r1, [fp, #-32]	; 0xffffffe0
 12c:	add	r1, r1, #1
 130:	add	r0, r0, r1, lsl #2
 134:	ldr	r0, [r0]
 138:	bl	0 <coda_set_definition_path>
 13c:	ldr	r1, [fp, #-32]	; 0xffffffe0
 140:	add	r1, r1, #2
 144:	str	r1, [fp, #-32]	; 0xffffffe0
 148:	str	r0, [sp, #52]	; 0x34
 14c:	b	1c4 <main+0x1c4>
 150:	movw	r0, #0
 154:	movt	r0, #0
 158:	str	r0, [fp, #-36]	; 0xffffffdc
 15c:	ldr	r0, [fp, #-20]	; 0xffffffec
 160:	ldr	r0, [r0]
 164:	ldr	r2, [fp, #-36]	; 0xffffffdc
 168:	movw	r1, #0
 16c:	bl	0 <coda_set_definition_path_conditional>
 170:	cmp	r0, #0
 174:	beq	1c0 <main+0x1c0>
 178:	movw	r0, #0
 17c:	movt	r0, #0
 180:	ldr	r0, [r0]
 184:	str	r0, [sp, #48]	; 0x30
 188:	bl	0 <coda_get_errno>
 18c:	ldr	r0, [r0]
 190:	bl	0 <coda_errno_to_string>
 194:	ldr	lr, [sp, #48]	; 0x30
 198:	str	r0, [sp, #44]	; 0x2c
 19c:	mov	r0, lr
 1a0:	movw	r1, #0
 1a4:	movt	r1, #0
 1a8:	ldr	r2, [sp, #44]	; 0x2c
 1ac:	bl	0 <fprintf>
 1b0:	movw	r1, #1
 1b4:	str	r0, [sp, #40]	; 0x28
 1b8:	mov	r0, r1
 1bc:	bl	0 <exit>
 1c0:	b	1c4 <main+0x1c4>
 1c4:	b	1c8 <main+0x1c8>
 1c8:	ldr	r0, [fp, #-32]	; 0xffffffe0
 1cc:	ldr	r1, [fp, #-16]
 1d0:	cmp	r0, r1
 1d4:	bge	3c4 <main+0x3c4>
 1d8:	ldr	r0, [fp, #-20]	; 0xffffffec
 1dc:	ldr	r1, [fp, #-32]	; 0xffffffe0
 1e0:	add	r0, r0, r1, lsl #2
 1e4:	ldr	r0, [r0]
 1e8:	movw	r1, #0
 1ec:	movt	r1, #0
 1f0:	bl	0 <strcmp>
 1f4:	cmp	r0, #0
 1f8:	beq	220 <main+0x220>
 1fc:	ldr	r0, [fp, #-20]	; 0xffffffec
 200:	ldr	r1, [fp, #-32]	; 0xffffffe0
 204:	add	r0, r0, r1, lsl #2
 208:	ldr	r0, [r0]
 20c:	movw	r1, #0
 210:	movt	r1, #0
 214:	bl	0 <strcmp>
 218:	cmp	r0, #0
 21c:	bne	234 <main+0x234>
 220:	movw	r0, #0
 224:	movt	r0, #0
 228:	movw	r1, #1
 22c:	str	r1, [r0]
 230:	b	3b4 <main+0x3b4>
 234:	ldr	r0, [fp, #-20]	; 0xffffffec
 238:	ldr	r1, [fp, #-32]	; 0xffffffe0
 23c:	add	r0, r0, r1, lsl #2
 240:	ldr	r0, [r0]
 244:	movw	r1, #0
 248:	movt	r1, #0
 24c:	bl	0 <strcmp>
 250:	cmp	r0, #0
 254:	beq	27c <main+0x27c>
 258:	ldr	r0, [fp, #-20]	; 0xffffffec
 25c:	ldr	r1, [fp, #-32]	; 0xffffffe0
 260:	add	r0, r0, r1, lsl #2
 264:	ldr	r0, [r0]
 268:	movw	r1, #0
 26c:	movt	r1, #0
 270:	bl	0 <strcmp>
 274:	cmp	r0, #0
 278:	bne	290 <main+0x290>
 27c:	movw	r0, #0
 280:	movt	r0, #0
 284:	movw	r1, #1
 288:	str	r1, [r0]
 28c:	b	3b0 <main+0x3b0>
 290:	ldr	r0, [fp, #-20]	; 0xffffffec
 294:	ldr	r1, [fp, #-32]	; 0xffffffe0
 298:	add	r0, r0, r1, lsl #2
 29c:	ldr	r0, [r0]
 2a0:	movw	r1, #0
 2a4:	movt	r1, #0
 2a8:	bl	0 <strcmp>
 2ac:	cmp	r0, #0
 2b0:	beq	2d8 <main+0x2d8>
 2b4:	ldr	r0, [fp, #-20]	; 0xffffffec
 2b8:	ldr	r1, [fp, #-32]	; 0xffffffe0
 2bc:	add	r0, r0, r1, lsl #2
 2c0:	ldr	r0, [r0]
 2c4:	movw	r1, #0
 2c8:	movt	r1, #0
 2cc:	bl	0 <strcmp>
 2d0:	cmp	r0, #0
 2d4:	bne	2ec <main+0x2ec>
 2d8:	movw	r0, #0
 2dc:	movt	r0, #0
 2e0:	movw	r1, #1
 2e4:	str	r1, [r0]
 2e8:	b	3ac <main+0x3ac>
 2ec:	ldr	r0, [fp, #-20]	; 0xffffffec
 2f0:	ldr	r1, [fp, #-32]	; 0xffffffe0
 2f4:	add	r0, r0, r1, lsl #2
 2f8:	ldr	r0, [r0]
 2fc:	movw	r1, #0
 300:	movt	r1, #0
 304:	bl	0 <strcmp>
 308:	cmp	r0, #0
 30c:	bne	31c <main+0x31c>
 310:	movw	r0, #0
 314:	str	r0, [fp, #-28]	; 0xffffffe4
 318:	b	3a8 <main+0x3a8>
 31c:	ldr	r0, [fp, #-20]	; 0xffffffec
 320:	ldr	r1, [fp, #-32]	; 0xffffffe0
 324:	add	r0, r0, r1, lsl #2
 328:	ldr	r0, [r0]
 32c:	movw	r1, #0
 330:	movt	r1, #0
 334:	bl	0 <strcmp>
 338:	cmp	r0, #0
 33c:	bne	360 <main+0x360>
 340:	ldr	r0, [fp, #-32]	; 0xffffffe0
 344:	ldr	r1, [fp, #-16]
 348:	sub	r1, r1, #1
 34c:	cmp	r0, r1
 350:	bne	360 <main+0x360>
 354:	movw	r0, #1
 358:	str	r0, [fp, #-24]	; 0xffffffe8
 35c:	b	3c4 <main+0x3c4>
 360:	ldr	r0, [fp, #-20]	; 0xffffffec
 364:	ldr	r1, [fp, #-32]	; 0xffffffe0
 368:	add	r0, r0, r1, lsl #2
 36c:	ldr	r0, [r0]
 370:	ldrb	r0, [r0]
 374:	cmp	r0, #45	; 0x2d
 378:	beq	380 <main+0x380>
 37c:	b	3c4 <main+0x3c4>
 380:	movw	r0, #0
 384:	movt	r0, #0
 388:	ldr	r0, [r0]
 38c:	movw	r1, #0
 390:	movt	r1, #0
 394:	bl	0 <fprintf>
 398:	str	r0, [sp, #36]	; 0x24
 39c:	bl	8e0 <print_help>
 3a0:	movw	r0, #1
 3a4:	bl	0 <exit>
 3a8:	b	3ac <main+0x3ac>
 3ac:	b	3b0 <main+0x3b0>
 3b0:	b	3b4 <main+0x3b4>
 3b4:	ldr	r0, [fp, #-32]	; 0xffffffe0
 3b8:	add	r0, r0, #1
 3bc:	str	r0, [fp, #-32]	; 0xffffffe0
 3c0:	b	1c8 <main+0x1c8>
 3c4:	bl	0 <coda_init>
 3c8:	cmp	r0, #0
 3cc:	beq	418 <main+0x418>
 3d0:	movw	r0, #0
 3d4:	movt	r0, #0
 3d8:	ldr	r0, [r0]
 3dc:	str	r0, [sp, #32]
 3e0:	bl	0 <coda_get_errno>
 3e4:	ldr	r0, [r0]
 3e8:	bl	0 <coda_errno_to_string>
 3ec:	ldr	lr, [sp, #32]
 3f0:	str	r0, [sp, #28]
 3f4:	mov	r0, lr
 3f8:	movw	r1, #0
 3fc:	movt	r1, #0
 400:	ldr	r2, [sp, #28]
 404:	bl	0 <fprintf>
 408:	movw	r1, #1
 40c:	str	r0, [sp, #24]
 410:	mov	r0, r1
 414:	bl	0 <exit>
 418:	movw	r0, #0
 41c:	bl	0 <coda_set_option_perform_boundary_checks>
 420:	movw	lr, #0
 424:	str	r0, [sp, #20]
 428:	mov	r0, lr
 42c:	bl	0 <coda_set_option_perform_conversions>
 430:	ldr	lr, [fp, #-28]	; 0xffffffe4
 434:	str	r0, [sp, #16]
 438:	mov	r0, lr
 43c:	bl	0 <coda_set_option_use_mmap>
 440:	ldr	lr, [fp, #-24]	; 0xffffffe8
 444:	cmp	lr, #0
 448:	str	r0, [sp, #12]
 44c:	beq	564 <main+0x564>
 450:	b	454 <main+0x454>
 454:	movw	r0, #0
 458:	str	r0, [sp, #60]	; 0x3c
 45c:	bl	0 <getchar>
 460:	strb	r0, [sp, #67]	; 0x43
 464:	ldrb	r0, [sp, #67]	; 0x43
 468:	cmp	r0, #13
 46c:	bne	4a0 <main+0x4a0>
 470:	bl	0 <getchar>
 474:	strb	r0, [sp, #59]	; 0x3b
 478:	ldrb	r0, [sp, #59]	; 0x3b
 47c:	cmp	r0, #10
 480:	beq	49c <main+0x49c>
 484:	ldrb	r0, [sp, #59]	; 0x3b
 488:	movw	r1, #0
 48c:	movt	r1, #0
 490:	ldr	r1, [r1]
 494:	bl	0 <ungetc>
 498:	str	r0, [sp, #8]
 49c:	b	4a0 <main+0x4a0>
 4a0:	ldrb	r0, [sp, #67]	; 0x43
 4a4:	cmn	r0, #1
 4a8:	beq	4c4 <main+0x4c4>
 4ac:	ldrb	r0, [sp, #67]	; 0x43
 4b0:	cmp	r0, #10
 4b4:	beq	4c4 <main+0x4c4>
 4b8:	ldrb	r0, [sp, #67]	; 0x43
 4bc:	cmp	r0, #13
 4c0:	bne	4dc <main+0x4dc>
 4c4:	ldr	r0, [sp, #60]	; 0x3c
 4c8:	add	r1, sp, #68	; 0x44
 4cc:	add	r0, r1, r0
 4d0:	movw	r1, #0
 4d4:	strb	r1, [r0]
 4d8:	b	530 <main+0x530>
 4dc:	ldrb	r0, [sp, #67]	; 0x43
 4e0:	ldr	r1, [sp, #60]	; 0x3c
 4e4:	add	r2, sp, #68	; 0x44
 4e8:	add	r1, r2, r1
 4ec:	strb	r0, [r1]
 4f0:	ldr	r0, [sp, #60]	; 0x3c
 4f4:	add	r0, r0, #1
 4f8:	str	r0, [sp, #60]	; 0x3c
 4fc:	ldr	r0, [sp, #60]	; 0x3c
 500:	cmp	r0, #1000	; 0x3e8
 504:	bge	50c <main+0x50c>
 508:	b	52c <main+0x52c>
 50c:	movw	r0, #0
 510:	movt	r0, #0
 514:	movw	r1, #0
 518:	movt	r1, #0
 51c:	movw	r2, #316	; 0x13c
 520:	movw	r3, #0
 524:	movt	r3, #0
 528:	bl	0 <__assert_fail>
 52c:	b	45c <main+0x45c>
 530:	ldr	r0, [sp, #60]	; 0x3c
 534:	cmp	r0, #0
 538:	ble	550 <main+0x550>
 53c:	add	r0, sp, #68	; 0x44
 540:	bl	5d8 <check_file>
 544:	movw	r0, #0
 548:	bl	0 <fflush>
 54c:	str	r0, [sp, #4]
 550:	b	554 <main+0x554>
 554:	ldrb	r0, [sp, #67]	; 0x43
 558:	cmn	r0, #1
 55c:	bne	454 <main+0x454>
 560:	b	5ac <main+0x5ac>
 564:	b	568 <main+0x568>
 568:	ldr	r0, [fp, #-32]	; 0xffffffe0
 56c:	ldr	r1, [fp, #-16]
 570:	cmp	r0, r1
 574:	bge	5a8 <main+0x5a8>
 578:	ldr	r0, [fp, #-20]	; 0xffffffec
 57c:	ldr	r1, [fp, #-32]	; 0xffffffe0
 580:	add	r0, r0, r1, lsl #2
 584:	ldr	r0, [r0]
 588:	bl	5d8 <check_file>
 58c:	movw	r0, #0
 590:	bl	0 <fflush>
 594:	ldr	r1, [fp, #-32]	; 0xffffffe0
 598:	add	r1, r1, #1
 59c:	str	r1, [fp, #-32]	; 0xffffffe0
 5a0:	str	r0, [sp]
 5a4:	b	568 <main+0x568>
 5a8:	b	5ac <main+0x5ac>
 5ac:	bl	0 <coda_done>
 5b0:	movw	lr, #0
 5b4:	movt	lr, #0
 5b8:	ldr	lr, [lr]
 5bc:	cmp	lr, #0
 5c0:	beq	5cc <main+0x5cc>
 5c4:	movw	r0, #1
 5c8:	bl	0 <exit>
 5cc:	movw	r0, #0
 5d0:	sub	sp, fp, #8
 5d4:	pop	{r4, r5, fp, pc}

000005d8 <check_file>:
 5d8:	push	{fp, lr}
 5dc:	mov	fp, sp
 5e0:	sub	sp, sp, #120	; 0x78
 5e4:	str	r0, [fp, #-4]
 5e8:	ldr	r1, [fp, #-4]
 5ec:	movw	r0, #0
 5f0:	movt	r0, #0
 5f4:	bl	0 <printf>
 5f8:	ldr	r1, [fp, #-4]
 5fc:	str	r0, [fp, #-44]	; 0xffffffd4
 600:	mov	r0, r1
 604:	sub	r1, fp, #24
 608:	sub	r2, fp, #12
 60c:	sub	r3, fp, #28
 610:	sub	lr, fp, #32
 614:	str	lr, [sp]
 618:	sub	lr, fp, #36	; 0x24
 61c:	str	lr, [sp, #4]
 620:	bl	0 <coda_recognize_file>
 624:	cmp	r0, #0
 628:	beq	674 <check_file+0x9c>
 62c:	bl	0 <coda_get_errno>
 630:	ldr	r0, [r0]
 634:	bl	0 <coda_errno_to_string>
 638:	movw	lr, #0
 63c:	movt	lr, #0
 640:	str	r0, [fp, #-48]	; 0xffffffd0
 644:	mov	r0, lr
 648:	ldr	r1, [fp, #-48]	; 0xffffffd0
 64c:	bl	0 <printf>
 650:	movw	r1, #0
 654:	str	r0, [fp, #-52]	; 0xffffffcc
 658:	mov	r0, r1
 65c:	bl	0 <coda_set_error>
 660:	movw	r0, #0
 664:	movt	r0, #0
 668:	movw	r1, #1
 66c:	str	r1, [r0]
 670:	b	8d8 <check_file+0x300>
 674:	movw	r0, #0
 678:	movt	r0, #0
 67c:	ldr	r0, [r0]
 680:	cmp	r0, #0
 684:	beq	6cc <check_file+0xf4>
 688:	ldr	r0, [fp, #-28]	; 0xffffffe4
 68c:	movw	r1, #0
 690:	cmp	r0, r1
 694:	beq	6a8 <check_file+0xd0>
 698:	ldr	r0, [fp, #-32]	; 0xffffffe0
 69c:	movw	r1, #0
 6a0:	cmp	r0, r1
 6a4:	bne	6cc <check_file+0xf4>
 6a8:	movw	r0, #0
 6ac:	movt	r0, #0
 6b0:	bl	0 <printf>
 6b4:	movw	lr, #0
 6b8:	movt	lr, #0
 6bc:	movw	r1, #1
 6c0:	str	r1, [lr]
 6c4:	str	r0, [fp, #-56]	; 0xffffffc8
 6c8:	b	8d8 <check_file+0x300>
 6cc:	movw	r0, #0
 6d0:	movt	r0, #0
 6d4:	ldr	r0, [r0]
 6d8:	cmp	r0, #0
 6dc:	beq	750 <check_file+0x178>
 6e0:	ldr	r0, [fp, #-12]
 6e4:	bl	0 <coda_type_get_format_name>
 6e8:	movw	lr, #0
 6ec:	movt	lr, #0
 6f0:	str	r0, [sp, #60]	; 0x3c
 6f4:	mov	r0, lr
 6f8:	ldr	r1, [sp, #60]	; 0x3c
 6fc:	bl	0 <printf>
 700:	ldr	r1, [fp, #-28]	; 0xffffffe4
 704:	movw	lr, #0
 708:	cmp	r1, lr
 70c:	str	r0, [sp, #56]	; 0x38
 710:	beq	740 <check_file+0x168>
 714:	ldr	r0, [fp, #-32]	; 0xffffffe0
 718:	movw	r1, #0
 71c:	cmp	r0, r1
 720:	beq	740 <check_file+0x168>
 724:	ldr	r1, [fp, #-28]	; 0xffffffe4
 728:	ldr	r2, [fp, #-32]	; 0xffffffe0
 72c:	ldr	r3, [fp, #-36]	; 0xffffffdc
 730:	movw	r0, #0
 734:	movt	r0, #0
 738:	bl	0 <printf>
 73c:	str	r0, [sp, #52]	; 0x34
 740:	movw	r0, #0
 744:	movt	r0, #0
 748:	bl	0 <printf>
 74c:	str	r0, [sp, #48]	; 0x30
 750:	ldr	r0, [fp, #-4]
 754:	sub	r1, fp, #8
 758:	bl	0 <coda_open>
 75c:	str	r0, [fp, #-40]	; 0xffffffd8
 760:	ldr	r0, [fp, #-40]	; 0xffffffd8
 764:	cmp	r0, #0
 768:	beq	7a8 <check_file+0x1d0>
 76c:	bl	0 <coda_get_errno>
 770:	ldr	r0, [r0]
 774:	cmn	r0, #21
 778:	bne	7a8 <check_file+0x1d0>
 77c:	movw	r0, #0
 780:	bl	0 <coda_set_option_use_mmap>
 784:	ldr	lr, [fp, #-4]
 788:	str	r0, [sp, #44]	; 0x2c
 78c:	mov	r0, lr
 790:	sub	r1, fp, #8
 794:	bl	0 <coda_open>
 798:	str	r0, [fp, #-40]	; 0xffffffd8
 79c:	movw	r0, #1
 7a0:	bl	0 <coda_set_option_use_mmap>
 7a4:	str	r0, [sp, #40]	; 0x28
 7a8:	ldr	r0, [fp, #-40]	; 0xffffffd8
 7ac:	cmp	r0, #0
 7b0:	beq	7f0 <check_file+0x218>
 7b4:	bl	0 <coda_get_errno>
 7b8:	ldr	r0, [r0]
 7bc:	bl	0 <coda_errno_to_string>
 7c0:	movw	lr, #0
 7c4:	movt	lr, #0
 7c8:	str	r0, [sp, #36]	; 0x24
 7cc:	mov	r0, lr
 7d0:	ldr	r1, [sp, #36]	; 0x24
 7d4:	bl	0 <printf>
 7d8:	movw	r1, #0
 7dc:	movt	r1, #0
 7e0:	movw	lr, #1
 7e4:	str	lr, [r1]
 7e8:	str	r0, [sp, #32]
 7ec:	b	8d8 <check_file+0x300>
 7f0:	ldr	r0, [fp, #-8]
 7f4:	movw	r1, #0
 7f8:	movt	r1, #0
 7fc:	ldr	r1, [r1]
 800:	cmp	r1, #0
 804:	movw	r1, #0
 808:	movne	r1, #1
 80c:	mvn	r2, #0
 810:	eor	r1, r1, r2
 814:	and	r1, r1, #1
 818:	movw	r2, #0
 81c:	movt	r2, #0
 820:	movw	r3, #0
 824:	bl	0 <coda_product_check>
 828:	cmp	r0, #0
 82c:	beq	87c <check_file+0x2a4>
 830:	bl	0 <coda_get_errno>
 834:	ldr	r0, [r0]
 838:	bl	0 <coda_errno_to_string>
 83c:	movw	lr, #0
 840:	movt	lr, #0
 844:	str	r0, [sp, #28]
 848:	mov	r0, lr
 84c:	ldr	r1, [sp, #28]
 850:	bl	0 <printf>
 854:	movw	r1, #0
 858:	movt	r1, #0
 85c:	movw	lr, #1
 860:	str	lr, [r1]
 864:	ldr	r1, [fp, #-8]
 868:	str	r0, [sp, #24]
 86c:	mov	r0, r1
 870:	bl	0 <coda_close>
 874:	str	r0, [sp, #20]
 878:	b	8d8 <check_file+0x300>
 87c:	ldr	r0, [fp, #-8]
 880:	bl	0 <coda_close>
 884:	cmp	r0, #0
 888:	beq	8c8 <check_file+0x2f0>
 88c:	bl	0 <coda_get_errno>
 890:	ldr	r0, [r0]
 894:	bl	0 <coda_errno_to_string>
 898:	movw	lr, #0
 89c:	movt	lr, #0
 8a0:	str	r0, [sp, #16]
 8a4:	mov	r0, lr
 8a8:	ldr	r1, [sp, #16]
 8ac:	bl	0 <printf>
 8b0:	movw	r1, #0
 8b4:	movt	r1, #0
 8b8:	movw	lr, #1
 8bc:	str	lr, [r1]
 8c0:	str	r0, [sp, #12]
 8c4:	b	8d8 <check_file+0x300>
 8c8:	movw	r0, #0
 8cc:	movt	r0, #0
 8d0:	bl	0 <printf>
 8d4:	str	r0, [sp, #8]
 8d8:	mov	sp, fp
 8dc:	pop	{fp, pc}

000008e0 <print_help>:
 8e0:	push	{fp, lr}
 8e4:	mov	fp, sp
 8e8:	sub	sp, sp, #136	; 0x88
 8ec:	movw	r0, #0
 8f0:	movt	r0, #0
 8f4:	bl	0 <printf>
 8f8:	movw	lr, #0
 8fc:	movt	lr, #0
 900:	str	r0, [fp, #-4]
 904:	mov	r0, lr
 908:	bl	0 <printf>
 90c:	movw	lr, #0
 910:	movt	lr, #0
 914:	str	r0, [fp, #-8]
 918:	mov	r0, lr
 91c:	bl	0 <printf>
 920:	movw	lr, #0
 924:	movt	lr, #0
 928:	str	r0, [fp, #-12]
 92c:	mov	r0, lr
 930:	bl	0 <printf>
 934:	movw	lr, #0
 938:	movt	lr, #0
 93c:	str	r0, [fp, #-16]
 940:	mov	r0, lr
 944:	bl	0 <printf>
 948:	movw	lr, #0
 94c:	movt	lr, #0
 950:	str	r0, [fp, #-20]	; 0xffffffec
 954:	mov	r0, lr
 958:	bl	0 <printf>
 95c:	movw	lr, #0
 960:	movt	lr, #0
 964:	str	r0, [fp, #-24]	; 0xffffffe8
 968:	mov	r0, lr
 96c:	bl	0 <printf>
 970:	movw	lr, #0
 974:	movt	lr, #0
 978:	str	r0, [fp, #-28]	; 0xffffffe4
 97c:	mov	r0, lr
 980:	bl	0 <printf>
 984:	movw	lr, #0
 988:	movt	lr, #0
 98c:	str	r0, [fp, #-32]	; 0xffffffe0
 990:	mov	r0, lr
 994:	bl	0 <printf>
 998:	movw	lr, #0
 99c:	movt	lr, #0
 9a0:	str	r0, [fp, #-36]	; 0xffffffdc
 9a4:	mov	r0, lr
 9a8:	bl	0 <printf>
 9ac:	movw	lr, #0
 9b0:	movt	lr, #0
 9b4:	str	r0, [fp, #-40]	; 0xffffffd8
 9b8:	mov	r0, lr
 9bc:	bl	0 <printf>
 9c0:	movw	lr, #0
 9c4:	movt	lr, #0
 9c8:	str	r0, [fp, #-44]	; 0xffffffd4
 9cc:	mov	r0, lr
 9d0:	bl	0 <printf>
 9d4:	movw	lr, #0
 9d8:	movt	lr, #0
 9dc:	str	r0, [fp, #-48]	; 0xffffffd0
 9e0:	mov	r0, lr
 9e4:	bl	0 <printf>
 9e8:	movw	lr, #0
 9ec:	movt	lr, #0
 9f0:	str	r0, [fp, #-52]	; 0xffffffcc
 9f4:	mov	r0, lr
 9f8:	bl	0 <printf>
 9fc:	movw	lr, #0
 a00:	movt	lr, #0
 a04:	str	r0, [fp, #-56]	; 0xffffffc8
 a08:	mov	r0, lr
 a0c:	bl	0 <printf>
 a10:	movw	lr, #0
 a14:	movt	lr, #0
 a18:	str	r0, [fp, #-60]	; 0xffffffc4
 a1c:	mov	r0, lr
 a20:	bl	0 <printf>
 a24:	movw	lr, #0
 a28:	movt	lr, #0
 a2c:	str	r0, [fp, #-64]	; 0xffffffc0
 a30:	mov	r0, lr
 a34:	bl	0 <printf>
 a38:	movw	lr, #0
 a3c:	movt	lr, #0
 a40:	str	r0, [sp, #68]	; 0x44
 a44:	mov	r0, lr
 a48:	bl	0 <printf>
 a4c:	movw	lr, #0
 a50:	movt	lr, #0
 a54:	str	r0, [sp, #64]	; 0x40
 a58:	mov	r0, lr
 a5c:	bl	0 <printf>
 a60:	movw	lr, #0
 a64:	movt	lr, #0
 a68:	str	r0, [sp, #60]	; 0x3c
 a6c:	mov	r0, lr
 a70:	bl	0 <printf>
 a74:	movw	lr, #0
 a78:	movt	lr, #0
 a7c:	str	r0, [sp, #56]	; 0x38
 a80:	mov	r0, lr
 a84:	bl	0 <printf>
 a88:	movw	lr, #0
 a8c:	movt	lr, #0
 a90:	str	r0, [sp, #52]	; 0x34
 a94:	mov	r0, lr
 a98:	bl	0 <printf>
 a9c:	movw	lr, #0
 aa0:	movt	lr, #0
 aa4:	str	r0, [sp, #48]	; 0x30
 aa8:	mov	r0, lr
 aac:	bl	0 <printf>
 ab0:	movw	lr, #0
 ab4:	movt	lr, #0
 ab8:	str	r0, [sp, #44]	; 0x2c
 abc:	mov	r0, lr
 ac0:	bl	0 <printf>
 ac4:	movw	lr, #0
 ac8:	movt	lr, #0
 acc:	str	r0, [sp, #40]	; 0x28
 ad0:	mov	r0, lr
 ad4:	bl	0 <printf>
 ad8:	movw	lr, #0
 adc:	movt	lr, #0
 ae0:	str	r0, [sp, #36]	; 0x24
 ae4:	mov	r0, lr
 ae8:	bl	0 <printf>
 aec:	movw	lr, #0
 af0:	movt	lr, #0
 af4:	str	r0, [sp, #32]
 af8:	mov	r0, lr
 afc:	bl	0 <printf>
 b00:	movw	lr, #0
 b04:	movt	lr, #0
 b08:	str	r0, [sp, #28]
 b0c:	mov	r0, lr
 b10:	bl	0 <printf>
 b14:	movw	lr, #0
 b18:	movt	lr, #0
 b1c:	str	r0, [sp, #24]
 b20:	mov	r0, lr
 b24:	bl	0 <printf>
 b28:	movw	lr, #0
 b2c:	movt	lr, #0
 b30:	str	r0, [sp, #20]
 b34:	mov	r0, lr
 b38:	bl	0 <printf>
 b3c:	movw	lr, #0
 b40:	movt	lr, #0
 b44:	str	r0, [sp, #16]
 b48:	mov	r0, lr
 b4c:	bl	0 <printf>
 b50:	movw	lr, #0
 b54:	movt	lr, #0
 b58:	str	r0, [sp, #12]
 b5c:	mov	r0, lr
 b60:	bl	0 <printf>
 b64:	movw	lr, #0
 b68:	movt	lr, #0
 b6c:	str	r0, [sp, #8]
 b70:	mov	r0, lr
 b74:	bl	0 <printf>
 b78:	str	r0, [sp, #4]
 b7c:	mov	sp, fp
 b80:	pop	{fp, pc}

00000b84 <print_version>:
 b84:	push	{fp, lr}
 b88:	mov	fp, sp
 b8c:	sub	sp, sp, #16
 b90:	bl	0 <coda_get_libcoda_version>
 b94:	movw	lr, #0
 b98:	movt	lr, #0
 b9c:	str	r0, [fp, #-4]
 ba0:	mov	r0, lr
 ba4:	ldr	r1, [fp, #-4]
 ba8:	bl	0 <printf>
 bac:	movw	r1, #0
 bb0:	movt	r1, #0
 bb4:	str	r0, [sp, #8]
 bb8:	mov	r0, r1
 bbc:	bl	0 <printf>
 bc0:	movw	r1, #0
 bc4:	movt	r1, #0
 bc8:	str	r0, [sp, #4]
 bcc:	mov	r0, r1
 bd0:	bl	0 <printf>
 bd4:	str	r0, [sp]
 bd8:	mov	sp, fp
 bdc:	pop	{fp, pc}

00000be0 <print_error>:
 be0:	push	{fp, lr}
 be4:	mov	fp, sp
 be8:	sub	sp, sp, #32
 bec:	str	r0, [fp, #-4]
 bf0:	str	r1, [fp, #-8]
 bf4:	str	r2, [fp, #-12]
 bf8:	ldr	r1, [fp, #-8]
 bfc:	movw	r0, #0
 c00:	movt	r0, #0
 c04:	bl	0 <printf>
 c08:	ldr	r1, [fp, #-4]
 c0c:	movw	r2, #0
 c10:	cmp	r1, r2
 c14:	str	r0, [sp, #16]
 c18:	beq	c44 <print_error+0x64>
 c1c:	movw	r0, #0
 c20:	movt	r0, #0
 c24:	bl	0 <printf>
 c28:	ldr	lr, [fp, #-4]
 c2c:	str	r0, [sp, #12]
 c30:	mov	r0, lr
 c34:	movw	r1, #0
 c38:	movt	r1, #0
 c3c:	bl	0 <coda_cursor_print_path>
 c40:	str	r0, [sp, #8]
 c44:	movw	r0, #0
 c48:	movt	r0, #0
 c4c:	bl	0 <printf>
 c50:	movw	lr, #0
 c54:	movt	lr, #0
 c58:	movw	r1, #1
 c5c:	str	r1, [lr]
 c60:	str	r0, [sp, #4]
 c64:	mov	sp, fp
 c68:	pop	{fp, pc}
