
../repos/stcorp-coda-3a25f25/CMakeFiles/coda.dir/libcoda/coda-cdf.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <read_bytes>:
       0:	mov	ip, sp
       4:	sub	sp, sp, #112	; 0x70
       8:	str	ip, [sp, #4]
       c:	str	lr, [sp, #8]
      10:	str	r4, [sp, #16]
      14:	str	r5, [sp, #20]
      18:	str	r6, [sp, #24]
      1c:	str	r7, [sp, #28]
      20:	str	r8, [sp, #32]
      24:	str	r9, [sp, #36]	; 0x24
      28:	ldr	r7, [ip, #8]
      2c:	ldr	r9, [ip, #4]
      30:	ldr	r4, [ip]
      34:	mov	r8, r3
      38:	mov	r6, r2
      3c:	mov	r5, r0
      40:	ldr	ip, [r5, #48]	; 0x30
      44:	cmp	ip, #0
      48:	bne	f8 <read_bytes+0xf8>
      4c:	ldr	r0, [r5, #16]
      50:	cmp	r0, #0
      54:	beq	74 <read_bytes+0x74>
      58:	cmp	r0, #1
      5c:	beq	74 <read_bytes+0x74>
      60:	ldr	r0, [pc, #388]	; 1ec <read_bytes+0x1ec>
      64:	ldr	r1, [pc, #372]	; 1e0 <read_bytes+0x1e0>
      68:	mov	r2, #83	; 0x53
      6c:	ldr	r3, [pc, #368]	; 1e4 <read_bytes+0x1e4>
      70:	bl	0 <__assert_fail>
      74:	adds	r0, r6, r4
      78:	adc	r1, r8, r9
      7c:	ldr	r2, [r5, #8]
      80:	ldr	ip, [r5, #12]
      84:	cmp	r1, ip
      88:	bne	98 <read_bytes+0x98>
      8c:	cmp	r0, r2
      90:	bhi	a0 <read_bytes+0xa0>
      94:	b	b4 <read_bytes+0xb4>
      98:	cmp	r1, ip
      9c:	bls	b4 <read_bytes+0xb4>
      a0:	mvn	r0, #300	; 0x12c
      a4:	ldr	r1, [pc, #324]	; 1f0 <read_bytes+0x1f0>
      a8:	bl	0 <coda_set_error>
      ac:	mvn	r0, #0
      b0:	b	1b8 <read_bytes+0x1b8>
      b4:	ldr	r0, [r5, #56]	; 0x38
      b8:	mov	r2, r4
      bc:	mov	r3, r6
      c0:	mov	r1, r7
      c4:	bl	0 <pread>
      c8:	cmp	r0, #0
      cc:	bge	1b4 <read_bytes+0x1b4>
      d0:	bl	0 <__errno_location>
      d4:	ldr	r0, [r0]
      d8:	bl	0 <strerror>
      dc:	mvn	r3, #21
      e0:	ldr	r1, [pc, #256]	; 1e8 <read_bytes+0x1e8>
      e4:	mov	r2, r0
      e8:	mov	r0, r3
      ec:	bl	0 <coda_set_error>
      f0:	mvn	r0, #0
      f4:	b	1b8 <read_bytes+0x1b8>
      f8:	adds	ip, r6, r4
      fc:	adc	r1, r8, r9
     100:	ldr	r2, [r5, #40]	; 0x28
     104:	ldr	r3, [r5, #44]	; 0x2c
     108:	cmp	r1, r3
     10c:	bne	11c <read_bytes+0x11c>
     110:	cmp	ip, r2
     114:	bhi	124 <read_bytes+0x124>
     118:	b	1a0 <read_bytes+0x1a0>
     11c:	cmp	r1, r3
     120:	bls	1a0 <read_bytes+0x1a0>
     124:	ldr	r3, [r5, #16]
     128:	cmp	r3, #0
     12c:	beq	18c <read_bytes+0x18c>
     130:	cmp	r3, #1
     134:	beq	18c <read_bytes+0x18c>
     138:	add	r2, sp, #64	; 0x40
     13c:	mov	r1, r9
     140:	mov	r0, r4
     144:	bl	0 <coda_str64>
     148:	add	r2, sp, #88	; 0x58
     14c:	mov	r1, r8
     150:	mov	r0, r6
     154:	bl	0 <coda_str64>
     158:	ldr	r0, [r5, #40]	; 0x28
     15c:	ldr	r1, [r5, #44]	; 0x2c
     160:	add	r2, sp, #40	; 0x28
     164:	bl	0 <coda_str64>
     168:	mvn	r0, #300	; 0x12c
     16c:	ldr	r1, [pc, #104]	; 1dc <read_bytes+0x1dc>
     170:	add	r2, sp, #64	; 0x40
     174:	add	r3, sp, #88	; 0x58
     178:	add	ip, sp, #40	; 0x28
     17c:	str	ip, [sp]
     180:	bl	0 <coda_set_error>
     184:	mvn	r0, #0
     188:	b	1b8 <read_bytes+0x1b8>
     18c:	mvn	r0, #300	; 0x12c
     190:	ldr	r1, [pc, #88]	; 1f0 <read_bytes+0x1f0>
     194:	bl	0 <coda_set_error>
     198:	mvn	r0, #0
     19c:	b	1b8 <read_bytes+0x1b8>
     1a0:	ldr	r0, [r5, #48]	; 0x30
     1a4:	add	r1, r0, r6
     1a8:	mov	r2, r4
     1ac:	mov	r0, r7
     1b0:	bl	0 <memcpy>
     1b4:	mov	r0, #0
     1b8:	ldr	r4, [sp, #16]
     1bc:	ldr	r5, [sp, #20]
     1c0:	ldr	r6, [sp, #24]
     1c4:	ldr	r7, [sp, #28]
     1c8:	ldr	r8, [sp, #32]
     1cc:	ldr	r9, [sp, #36]	; 0x24
     1d0:	ldr	lr, [sp, #8]
     1d4:	add	sp, sp, #112	; 0x70
     1d8:	bx	lr
     1dc:	.word	0x0000045b
     1e0:	.word	0x00000395
     1e4:	.word	0x00000888
     1e8:	.word	0x0000025e
     1ec:	.word	0x00000798
     1f0:	.word	0x0000076e

000001f4 <swap4>:
     1f4:	mov	ip, sp
     1f8:	sub	sp, sp, #8
     1fc:	str	ip, [sp]
     200:	str	lr, [sp, #4]
     204:	ldrb	r2, [r0]
     208:	ldrb	r1, [r0, #3]
     20c:	eor	r2, r2, r1
     210:	strb	r2, [r0]
     214:	ldrb	r3, [r0, #3]
     218:	eor	r1, r2, r3
     21c:	strb	r1, [r0, #3]
     220:	ldrb	r2, [r0]
     224:	eor	r3, r2, r1
     228:	strb	r3, [r0]
     22c:	ldrb	r3, [r0, #1]
     230:	ldrb	ip, [r0, #2]
     234:	eor	ip, r3, ip
     238:	strb	ip, [r0, #1]
     23c:	ldrb	r1, [r0, #2]
     240:	eor	r1, ip, r1
     244:	strb	r1, [r0, #2]
     248:	ldrb	r3, [r0, #1]
     24c:	eor	r1, r3, r1
     250:	strb	r1, [r0, #1]
     254:	ldr	lr, [sp, #4]
     258:	add	sp, sp, #8
     25c:	bx	lr

00000260 <swap8>:
     260:	mov	ip, sp
     264:	sub	sp, sp, #8
     268:	str	ip, [sp]
     26c:	str	lr, [sp, #4]
     270:	ldrb	r1, [r0]
     274:	ldrb	r2, [r0, #7]
     278:	eor	r2, r1, r2
     27c:	strb	r2, [r0]
     280:	ldrb	r3, [r0, #7]
     284:	eor	r1, r2, r3
     288:	strb	r1, [r0, #7]
     28c:	ldrb	r3, [r0]
     290:	eor	r1, r3, r1
     294:	strb	r1, [r0]
     298:	ldrb	r1, [r0, #1]
     29c:	ldrb	r2, [r0, #6]
     2a0:	eor	ip, r1, r2
     2a4:	strb	ip, [r0, #1]
     2a8:	ldrb	r1, [r0, #6]
     2ac:	eor	r2, ip, r1
     2b0:	strb	r2, [r0, #6]
     2b4:	ldrb	r1, [r0, #1]
     2b8:	eor	r3, r1, r2
     2bc:	strb	r3, [r0, #1]
     2c0:	ldrb	r3, [r0, #2]
     2c4:	ldrb	r1, [r0, #5]
     2c8:	eor	ip, r3, r1
     2cc:	strb	ip, [r0, #2]
     2d0:	ldrb	r1, [r0, #5]
     2d4:	eor	r3, ip, r1
     2d8:	strb	r3, [r0, #5]
     2dc:	ldrb	r2, [r0, #2]
     2e0:	eor	r1, r2, r3
     2e4:	strb	r1, [r0, #2]
     2e8:	ldrb	r1, [r0, #3]
     2ec:	ldrb	r2, [r0, #4]
     2f0:	eor	r1, r1, r2
     2f4:	strb	r1, [r0, #3]
     2f8:	ldrb	ip, [r0, #4]
     2fc:	eor	r1, r1, ip
     300:	strb	r1, [r0, #4]
     304:	ldrb	r2, [r0, #3]
     308:	eor	r1, r2, r1
     30c:	strb	r1, [r0, #3]
     310:	ldr	lr, [sp, #4]
     314:	add	sp, sp, #8
     318:	bx	lr

0000031c <rtrim>:
     31c:	mov	ip, sp
     320:	sub	sp, sp, #16
     324:	str	ip, [sp]
     328:	str	lr, [sp, #4]
     32c:	str	r4, [sp, #8]
     330:	mov	r4, r0
     334:	mov	r0, r4
     338:	bl	0 <strlen>
     33c:	cmp	r0, #0
     340:	ble	36c <rtrim+0x50>
     344:	add	r1, r4, r0
     348:	sub	lr, r1, #4096	; 0x1000
     34c:	ldrb	r2, [lr, #4095]	; 0xfff
     350:	cmp	r2, #32
     354:	bne	36c <rtrim+0x50>
     358:	mov	r2, #0
     35c:	sub	lr, r1, #4096	; 0x1000
     360:	strb	r2, [lr, #4095]	; 0xfff
     364:	sub	r0, r0, #1
     368:	b	33c <rtrim+0x20>
     36c:	ldr	r4, [sp, #8]
     370:	ldr	lr, [sp, #4]
     374:	add	sp, sp, #16
     378:	bx	lr

0000037c <read_attribute_sub>:
     37c:	mov	ip, sp
     380:	sub	sp, sp, #64	; 0x40
     384:	str	ip, [sp, #12]
     388:	str	lr, [sp, #16]
     38c:	str	r4, [sp, #24]
     390:	str	r5, [sp, #28]
     394:	str	r6, [sp, #32]
     398:	str	r7, [sp, #36]	; 0x24
     39c:	str	r8, [sp, #40]	; 0x28
     3a0:	str	r9, [sp, #44]	; 0x2c
     3a4:	str	sl, [sp, #48]	; 0x30
     3a8:	ldr	r7, [ip, #8]
     3ac:	ldr	r5, [ip, #4]
     3b0:	ldr	r6, [ip]
     3b4:	mov	sl, r3
     3b8:	mov	r9, r2
     3bc:	mov	r4, r0
     3c0:	ldr	ip, [r5, #8]
     3c4:	cmp	ip, #4
     3c8:	beq	600 <read_attribute_sub+0x284>
     3cc:	ldr	r0, [r4, #52]	; 0x34
     3d0:	asr	r2, r6, #31
     3d4:	mov	r1, r6
     3d8:	add	r3, sp, #56	; 0x38
     3dc:	str	r3, [sp, #8]
     3e0:	str	r2, [sp, #4]
     3e4:	str	r1, [sp]
     3e8:	mov	r3, sl
     3ec:	mov	r2, r9
     3f0:	bl	0 <read_bytes>
     3f4:	cmp	r0, #0
     3f8:	beq	404 <read_attribute_sub+0x88>
     3fc:	mvn	r0, #0
     400:	b	6b4 <read_attribute_sub+0x338>
     404:	ldr	r3, [r4, #68]	; 0x44
     408:	cmp	r3, #0
     40c:	bne	48c <read_attribute_sub+0x110>
     410:	cmp	r6, #4
     414:	bcs	448 <read_attribute_sub+0xcc>
     418:	cmp	r6, #1
     41c:	beq	48c <read_attribute_sub+0x110>
     420:	cmp	r6, #2
     424:	bne	464 <read_attribute_sub+0xe8>
     428:	ldrb	r2, [sp, #56]	; 0x38
     42c:	ldrb	r3, [sp, #57]	; 0x39
     430:	eor	ip, r2, r3
     434:	eor	r2, ip, r3
     438:	strb	r2, [sp, #57]	; 0x39
     43c:	eor	r3, ip, r2
     440:	strb	r3, [sp, #56]	; 0x38
     444:	b	48c <read_attribute_sub+0x110>
     448:	cmp	r6, #4
     44c:	beq	484 <read_attribute_sub+0x108>
     450:	cmp	r6, #8
     454:	bne	464 <read_attribute_sub+0xe8>
     458:	add	r0, sp, #56	; 0x38
     45c:	bl	260 <swap8>
     460:	b	48c <read_attribute_sub+0x110>
     464:	ldr	r0, [pc, #636]	; 6e8 <read_attribute_sub+0x36c>
     468:	ldr	r1, [pc, #620]	; 6dc <read_attribute_sub+0x360>
     46c:	mov	r2, #129	; 0x81
     470:	ldr	r3, [pc, #620]	; 6e4 <read_attribute_sub+0x368>
     474:	bl	0 <__assert_fail>
     478:	mov	r0, #1
     47c:	bl	0 <exit>
     480:	b	48c <read_attribute_sub+0x110>
     484:	add	r0, sp, #56	; 0x38
     488:	bl	1f4 <swap4>
     48c:	ldr	r2, [r5, #12]
     490:	cmp	r2, #10
     494:	bcs	5e0 <read_attribute_sub+0x264>
     498:	add	pc, pc, r2, lsl #2
     49c:	nop	{0}
     4a0:	b	4c8 <read_attribute_sub+0x14c>
     4a4:	b	4e4 <read_attribute_sub+0x168>
     4a8:	b	504 <read_attribute_sub+0x188>
     4ac:	b	520 <read_attribute_sub+0x1a4>
     4b0:	b	544 <read_attribute_sub+0x1c8>
     4b4:	b	560 <read_attribute_sub+0x1e4>
     4b8:	b	57c <read_attribute_sub+0x200>
     4bc:	b	5e0 <read_attribute_sub+0x264>
     4c0:	b	5a4 <read_attribute_sub+0x228>
     4c4:	b	5c4 <read_attribute_sub+0x248>
     4c8:	mov	r1, #0
     4cc:	ldrsb	r3, [sp, #56]	; 0x38
     4d0:	mov	r2, r4
     4d4:	mov	r0, r5
     4d8:	bl	0 <coda_mem_int8_new>
     4dc:	str	r0, [r7]
     4e0:	b	69c <read_attribute_sub+0x320>
     4e4:	mov	r1, #0
     4e8:	ldrb	r0, [sp, #56]	; 0x38
     4ec:	and	r3, r0, #255	; 0xff
     4f0:	mov	r2, r4
     4f4:	mov	r0, r5
     4f8:	bl	0 <coda_mem_uint8_new>
     4fc:	str	r0, [r7]
     500:	b	69c <read_attribute_sub+0x320>
     504:	mov	r1, #0
     508:	ldrsh	r3, [sp, #56]	; 0x38
     50c:	mov	r2, r4
     510:	mov	r0, r5
     514:	bl	0 <coda_mem_int16_new>
     518:	str	r0, [r7]
     51c:	b	69c <read_attribute_sub+0x320>
     520:	mov	r1, #0
     524:	ldrh	r2, [sp, #56]	; 0x38
     528:	bic	r3, r2, #16711680	; 0xff0000
     52c:	bic	r3, r3, #-16777216	; 0xff000000
     530:	mov	r2, r4
     534:	mov	r0, r5
     538:	bl	0 <coda_mem_uint16_new>
     53c:	str	r0, [r7]
     540:	b	69c <read_attribute_sub+0x320>
     544:	mov	r1, #0
     548:	ldr	r3, [sp, #56]	; 0x38
     54c:	mov	r2, r4
     550:	mov	r0, r5
     554:	bl	0 <coda_mem_int32_new>
     558:	str	r0, [r7]
     55c:	b	69c <read_attribute_sub+0x320>
     560:	mov	r1, #0
     564:	ldr	r3, [sp, #56]	; 0x38
     568:	mov	r2, r4
     56c:	mov	r0, r5
     570:	bl	0 <coda_mem_uint32_new>
     574:	str	r0, [r7]
     578:	b	69c <read_attribute_sub+0x320>
     57c:	mov	r1, #0
     580:	ldr	r2, [sp, #56]	; 0x38
     584:	ldr	r3, [sp, #60]	; 0x3c
     588:	str	r3, [sp, #4]
     58c:	str	r2, [sp]
     590:	mov	r2, r4
     594:	mov	r0, r5
     598:	bl	0 <coda_mem_int64_new>
     59c:	str	r0, [r7]
     5a0:	b	69c <read_attribute_sub+0x320>
     5a4:	mov	r1, #0
     5a8:	vldr	s0, [sp, #56]	; 0x38
     5ac:	mov	r2, r4
     5b0:	mov	r0, r5
     5b4:	vmov.f32	s0, s0
     5b8:	bl	0 <coda_mem_float_new>
     5bc:	str	r0, [r7]
     5c0:	b	69c <read_attribute_sub+0x320>
     5c4:	mov	r1, #0
     5c8:	vldr	d0, [sp, #56]	; 0x38
     5cc:	mov	r2, r4
     5d0:	mov	r0, r5
     5d4:	bl	0 <coda_mem_double_new>
     5d8:	str	r0, [r7]
     5dc:	b	69c <read_attribute_sub+0x320>
     5e0:	ldr	r0, [pc, #256]	; 6e8 <read_attribute_sub+0x36c>
     5e4:	ldr	r1, [pc, #240]	; 6dc <read_attribute_sub+0x360>
     5e8:	mov	r2, #175	; 0xaf
     5ec:	ldr	r3, [pc, #240]	; 6e4 <read_attribute_sub+0x368>
     5f0:	bl	0 <__assert_fail>
     5f4:	mov	r0, #1
     5f8:	bl	0 <exit>
     5fc:	b	69c <read_attribute_sub+0x320>
     600:	add	r0, r6, #1
     604:	bl	0 <malloc>
     608:	mov	r8, r0
     60c:	cmp	r8, #0
     610:	bne	638 <read_attribute_sub+0x2bc>
     614:	mvn	r0, #0
     618:	ldr	r1, [pc, #192]	; 6e0 <read_attribute_sub+0x364>
     61c:	add	r2, r6, #1
     620:	ldr	r3, [pc, #180]	; 6dc <read_attribute_sub+0x360>
     624:	mov	ip, #76	; 0x4c
     628:	str	ip, [sp]
     62c:	bl	0 <coda_set_error>
     630:	mvn	r0, #0
     634:	b	6b4 <read_attribute_sub+0x338>
     638:	ldr	r0, [r4, #52]	; 0x34
     63c:	asr	r2, r6, #31
     640:	mov	r1, r6
     644:	str	r8, [sp, #8]
     648:	str	r2, [sp, #4]
     64c:	str	r1, [sp]
     650:	mov	r3, sl
     654:	mov	r2, r9
     658:	bl	0 <read_bytes>
     65c:	cmp	r0, #0
     660:	beq	674 <read_attribute_sub+0x2f8>
     664:	mov	r0, r8
     668:	bl	0 <free>
     66c:	mvn	r0, #0
     670:	b	6b4 <read_attribute_sub+0x338>
     674:	mov	r1, #0
     678:	strb	r1, [r8, r6]
     67c:	mov	r1, #0
     680:	mov	r3, r8
     684:	mov	r2, r4
     688:	mov	r0, r5
     68c:	bl	0 <coda_mem_string_new>
     690:	str	r0, [r7]
     694:	mov	r0, r8
     698:	bl	0 <free>
     69c:	ldr	r0, [r7]
     6a0:	cmp	r0, #0
     6a4:	bne	6b0 <read_attribute_sub+0x334>
     6a8:	mvn	r0, #0
     6ac:	b	6b4 <read_attribute_sub+0x338>
     6b0:	mov	r0, #0
     6b4:	ldr	r4, [sp, #24]
     6b8:	ldr	r5, [sp, #28]
     6bc:	ldr	r6, [sp, #32]
     6c0:	ldr	r7, [sp, #36]	; 0x24
     6c4:	ldr	r8, [sp, #40]	; 0x28
     6c8:	ldr	r9, [sp, #44]	; 0x2c
     6cc:	ldr	sl, [sp, #48]	; 0x30
     6d0:	ldr	lr, [sp, #16]
     6d4:	add	sp, sp, #64	; 0x40
     6d8:	bx	lr
     6dc:	.word	0x0000067b
     6e0:	.word	0x00000739
     6e4:	.word	0x00000893
     6e8:	.word	0x00000702

000006ec <read_AEDR>:
     6ec:	mov	ip, sp
     6f0:	sub	sp, sp, #104	; 0x68
     6f4:	str	ip, [sp, #12]
     6f8:	str	lr, [sp, #16]
     6fc:	str	r4, [sp, #40]	; 0x28
     700:	str	r5, [sp, #44]	; 0x2c
     704:	str	r6, [sp, #48]	; 0x30
     708:	str	r7, [sp, #52]	; 0x34
     70c:	str	r8, [sp, #56]	; 0x38
     710:	str	r9, [sp, #60]	; 0x3c
     714:	str	sl, [sp, #64]	; 0x40
     718:	str	fp, [sp, #68]	; 0x44
     71c:	ldr	ip, [ip, #4]
     720:	str	ip, [sp, #28]
     724:	ldr	ip, [sp, #12]
     728:	ldr	ip, [ip]
     72c:	str	ip, [sp, #24]
     730:	mov	r4, r3
     734:	mov	r5, r2
     738:	mov	r8, r0
     73c:	mov	ip, r5
     740:	mov	r0, r4
     744:	orr	ip, r0, ip
     748:	cmp	ip, #0
     74c:	bne	758 <read_AEDR+0x6c>
     750:	mov	r0, #0
     754:	b	ee8 <read_AEDR+0x7fc>
     758:	ldr	r0, [r8, #52]	; 0x34
     75c:	mov	r1, #0
     760:	mov	ip, #8
     764:	adds	r2, r5, ip
     768:	adc	r3, r4, r1
     76c:	mov	r7, #0
     770:	mov	r1, #4
     774:	add	r9, sp, #88	; 0x58
     778:	str	r9, [sp, #8]
     77c:	str	r7, [sp, #4]
     780:	str	r1, [sp]
     784:	bl	0 <read_bytes>
     788:	cmp	r0, #0
     78c:	bge	798 <read_AEDR+0xac>
     790:	mvn	r0, #0
     794:	b	ee8 <read_AEDR+0x7fc>
     798:	add	r0, sp, #88	; 0x58
     79c:	bl	1f4 <swap4>
     7a0:	ldr	r2, [sp, #88]	; 0x58
     7a4:	cmp	r2, #5
     7a8:	beq	7cc <read_AEDR+0xe0>
     7ac:	cmp	r2, #9
     7b0:	beq	7cc <read_AEDR+0xe0>
     7b4:	movw	r0, #65236	; 0xfed4
     7b8:	movt	r0, #65535	; 0xffff
     7bc:	ldr	r1, [pc, #1888]	; f24 <read_AEDR+0x838>
     7c0:	bl	0 <coda_set_error>
     7c4:	mvn	r0, #0
     7c8:	b	ee8 <read_AEDR+0x7fc>
     7cc:	ldr	r0, [r8, #52]	; 0x34
     7d0:	mov	r3, #0
     7d4:	mov	r2, #12
     7d8:	adds	r2, r5, r2
     7dc:	adc	r3, r4, r3
     7e0:	mov	r7, #0
     7e4:	mov	ip, #8
     7e8:	add	r9, sp, #96	; 0x60
     7ec:	str	r9, [sp, #8]
     7f0:	str	r7, [sp, #4]
     7f4:	str	ip, [sp]
     7f8:	bl	0 <read_bytes>
     7fc:	cmp	r0, #0
     800:	bge	80c <read_AEDR+0x120>
     804:	mvn	r0, #0
     808:	b	ee8 <read_AEDR+0x7fc>
     80c:	ldr	r0, [r8, #52]	; 0x34
     810:	mov	ip, #0
     814:	mov	r3, #20
     818:	adds	r2, r5, r3
     81c:	adc	r3, r4, ip
     820:	mov	r7, #0
     824:	mov	ip, #4
     828:	add	r9, sp, #92	; 0x5c
     82c:	str	r9, [sp, #8]
     830:	str	r7, [sp, #4]
     834:	str	ip, [sp]
     838:	bl	0 <read_bytes>
     83c:	cmp	r0, #0
     840:	bge	84c <read_AEDR+0x160>
     844:	mvn	r0, #0
     848:	b	ee8 <read_AEDR+0x7fc>
     84c:	ldr	r0, [r8, #52]	; 0x34
     850:	mov	r3, #0
     854:	mov	r2, #24
     858:	adds	r2, r5, r2
     85c:	adc	r3, r4, r3
     860:	mov	r7, #0
     864:	mov	r1, #4
     868:	add	r9, sp, #76	; 0x4c
     86c:	str	r9, [sp, #8]
     870:	str	r7, [sp, #4]
     874:	str	r1, [sp]
     878:	bl	0 <read_bytes>
     87c:	cmp	r0, #0
     880:	bge	88c <read_AEDR+0x1a0>
     884:	mvn	r0, #0
     888:	b	ee8 <read_AEDR+0x7fc>
     88c:	ldr	r0, [r8, #52]	; 0x34
     890:	mov	r2, #0
     894:	mov	r1, #28
     898:	adds	lr, r5, r1
     89c:	adc	r3, r4, r2
     8a0:	mov	r2, lr
     8a4:	mov	r7, #0
     8a8:	mov	r1, #4
     8ac:	add	r9, sp, #80	; 0x50
     8b0:	str	r9, [sp, #8]
     8b4:	str	r7, [sp, #4]
     8b8:	str	r1, [sp]
     8bc:	bl	0 <read_bytes>
     8c0:	cmp	r0, #0
     8c4:	bge	8d0 <read_AEDR+0x1e4>
     8c8:	mvn	r0, #0
     8cc:	b	ee8 <read_AEDR+0x7fc>
     8d0:	ldr	r0, [r8, #52]	; 0x34
     8d4:	mov	r2, #0
     8d8:	mov	r1, #32
     8dc:	adds	lr, r5, r1
     8e0:	adc	r3, r4, r2
     8e4:	mov	r2, lr
     8e8:	mov	r7, #0
     8ec:	mov	ip, #4
     8f0:	add	r9, sp, #72	; 0x48
     8f4:	str	r9, [sp, #8]
     8f8:	str	r7, [sp, #4]
     8fc:	str	ip, [sp]
     900:	bl	0 <read_bytes>
     904:	cmp	r0, #0
     908:	bge	914 <read_AEDR+0x228>
     90c:	mvn	r0, #0
     910:	b	ee8 <read_AEDR+0x7fc>
     914:	add	r0, sp, #96	; 0x60
     918:	bl	260 <swap8>
     91c:	add	r0, sp, #92	; 0x5c
     920:	bl	1f4 <swap4>
     924:	add	r0, sp, #76	; 0x4c
     928:	bl	1f4 <swap4>
     92c:	add	r0, sp, #80	; 0x50
     930:	bl	1f4 <swap4>
     934:	add	r0, sp, #72	; 0x48
     938:	bl	1f4 <swap4>
     93c:	mov	r3, #0
     940:	mov	r2, #56	; 0x38
     944:	adds	r5, r5, r2
     948:	adc	ip, r4, r3
     94c:	ldr	r4, [sp, #76]	; 0x4c
     950:	cmp	r4, #32
     954:	bne	96c <read_AEDR+0x280>
     958:	mvn	r0, #199	; 0xc7
     95c:	ldr	r1, [pc, #1488]	; f34 <read_AEDR+0x848>
     960:	bl	0 <coda_set_error>
     964:	mvn	r0, #0
     968:	b	ee8 <read_AEDR+0x7fc>
     96c:	ldr	r7, [sp, #72]	; 0x48
     970:	add	r1, sp, #84	; 0x54
     974:	str	r1, [sp, #36]	; 0x24
     978:	str	ip, [sp, #32]
     97c:	sub	r0, r4, #1
     980:	cmp	r0, #52	; 0x34
     984:	bcs	d9c <read_AEDR+0x6b0>
     988:	add	pc, pc, r0, lsl #2
     98c:	nop	{0}
     990:	b	a60 <read_AEDR+0x374>
     994:	b	a70 <read_AEDR+0x384>
     998:	b	d9c <read_AEDR+0x6b0>
     99c:	b	a80 <read_AEDR+0x394>
     9a0:	b	d9c <read_AEDR+0x6b0>
     9a4:	b	d9c <read_AEDR+0x6b0>
     9a8:	b	d9c <read_AEDR+0x6b0>
     9ac:	b	a90 <read_AEDR+0x3a4>
     9b0:	b	d9c <read_AEDR+0x6b0>
     9b4:	b	d9c <read_AEDR+0x6b0>
     9b8:	b	aa0 <read_AEDR+0x3b4>
     9bc:	b	ab0 <read_AEDR+0x3c4>
     9c0:	b	d9c <read_AEDR+0x6b0>
     9c4:	b	ac0 <read_AEDR+0x3d4>
     9c8:	b	d9c <read_AEDR+0x6b0>
     9cc:	b	d9c <read_AEDR+0x6b0>
     9d0:	b	d9c <read_AEDR+0x6b0>
     9d4:	b	d9c <read_AEDR+0x6b0>
     9d8:	b	d9c <read_AEDR+0x6b0>
     9dc:	b	d9c <read_AEDR+0x6b0>
     9e0:	b	ad0 <read_AEDR+0x3e4>
     9e4:	b	ae0 <read_AEDR+0x3f4>
     9e8:	b	d9c <read_AEDR+0x6b0>
     9ec:	b	d9c <read_AEDR+0x6b0>
     9f0:	b	d9c <read_AEDR+0x6b0>
     9f4:	b	d9c <read_AEDR+0x6b0>
     9f8:	b	d9c <read_AEDR+0x6b0>
     9fc:	b	d9c <read_AEDR+0x6b0>
     a00:	b	d9c <read_AEDR+0x6b0>
     a04:	b	d9c <read_AEDR+0x6b0>
     a08:	b	ae0 <read_AEDR+0x3f4>
     a0c:	b	d9c <read_AEDR+0x6b0>
     a10:	b	a90 <read_AEDR+0x3a4>
     a14:	b	d9c <read_AEDR+0x6b0>
     a18:	b	d9c <read_AEDR+0x6b0>
     a1c:	b	d9c <read_AEDR+0x6b0>
     a20:	b	d9c <read_AEDR+0x6b0>
     a24:	b	d9c <read_AEDR+0x6b0>
     a28:	b	d9c <read_AEDR+0x6b0>
     a2c:	b	d9c <read_AEDR+0x6b0>
     a30:	b	a60 <read_AEDR+0x374>
     a34:	b	d9c <read_AEDR+0x6b0>
     a38:	b	d9c <read_AEDR+0x6b0>
     a3c:	b	ad0 <read_AEDR+0x3e4>
     a40:	b	ae0 <read_AEDR+0x3f4>
     a44:	b	d9c <read_AEDR+0x6b0>
     a48:	b	d9c <read_AEDR+0x6b0>
     a4c:	b	d9c <read_AEDR+0x6b0>
     a50:	b	d9c <read_AEDR+0x6b0>
     a54:	b	d9c <read_AEDR+0x6b0>
     a58:	b	af0 <read_AEDR+0x404>
     a5c:	b	af0 <read_AEDR+0x404>
     a60:	mov	sl, #2
     a64:	mov	fp, #0
     a68:	mov	r9, #1
     a6c:	b	afc <read_AEDR+0x410>
     a70:	mov	sl, #2
     a74:	mov	fp, #2
     a78:	mov	r9, #2
     a7c:	b	afc <read_AEDR+0x410>
     a80:	mov	sl, #2
     a84:	mov	fp, #4
     a88:	mov	r9, #4
     a8c:	b	afc <read_AEDR+0x410>
     a90:	mov	sl, #2
     a94:	mov	fp, #6
     a98:	mov	r9, #8
     a9c:	b	afc <read_AEDR+0x410>
     aa0:	mov	sl, #2
     aa4:	mov	fp, #1
     aa8:	mov	r9, #1
     aac:	b	afc <read_AEDR+0x410>
     ab0:	mov	sl, #2
     ab4:	mov	fp, #3
     ab8:	mov	r9, #2
     abc:	b	afc <read_AEDR+0x410>
     ac0:	mov	sl, #2
     ac4:	mov	fp, #5
     ac8:	mov	r9, #4
     acc:	b	afc <read_AEDR+0x410>
     ad0:	mov	sl, #3
     ad4:	mov	fp, #8
     ad8:	mov	r9, #4
     adc:	b	afc <read_AEDR+0x410>
     ae0:	mov	sl, #3
     ae4:	mov	fp, #9
     ae8:	mov	r9, #8
     aec:	b	afc <read_AEDR+0x410>
     af0:	mov	sl, #4
     af4:	mov	fp, #11
     af8:	mov	r9, r7
     afc:	mov	r2, sl
     b00:	cmp	r2, #2
     b04:	beq	b48 <read_AEDR+0x45c>
     b08:	cmp	r2, #3
     b0c:	beq	b48 <read_AEDR+0x45c>
     b10:	cmp	r2, #4
     b14:	bne	b28 <read_AEDR+0x43c>
     b18:	mov	r0, #5
     b1c:	bl	0 <coda_type_text_new>
     b20:	mov	r6, r0
     b24:	b	b58 <read_AEDR+0x46c>
     b28:	ldr	r0, [pc, #1020]	; f2c <read_AEDR+0x840>
     b2c:	ldr	r1, [pc, #992]	; f14 <read_AEDR+0x828>
     b30:	movw	r2, #266	; 0x10a
     b34:	ldr	r3, [pc, #992]	; f1c <read_AEDR+0x830>
     b38:	bl	0 <__assert_fail>
     b3c:	mov	r0, #1
     b40:	bl	0 <exit>
     b44:	b	b58 <read_AEDR+0x46c>
     b48:	mov	r0, #5
     b4c:	mov	r1, sl
     b50:	bl	0 <coda_type_number_new>
     b54:	mov	r6, r0
     b58:	cmp	r6, #0
     b5c:	bne	b68 <read_AEDR+0x47c>
     b60:	mvn	r1, #0
     b64:	b	db0 <read_AEDR+0x6c4>
     b68:	mov	r1, fp
     b6c:	mov	r0, r6
     b70:	bl	0 <coda_type_set_read_type>
     b74:	cmp	r0, #0
     b78:	beq	b8c <read_AEDR+0x4a0>
     b7c:	mov	r0, r6
     b80:	bl	0 <coda_type_release>
     b84:	mvn	r1, #0
     b88:	b	db0 <read_AEDR+0x6c4>
     b8c:	cmp	sl, #4
     b90:	beq	be0 <read_AEDR+0x4f4>
     b94:	mov	r2, r9
     b98:	asr	r3, r2, #31
     b9c:	mov	r0, r6
     ba0:	bl	0 <coda_type_set_byte_size>
     ba4:	cmp	r0, #0
     ba8:	beq	bbc <read_AEDR+0x4d0>
     bac:	mov	r0, r6
     bb0:	bl	0 <coda_type_release>
     bb4:	mvn	r1, #0
     bb8:	b	db0 <read_AEDR+0x6c4>
     bbc:	mov	r1, #1
     bc0:	mov	r0, r6
     bc4:	bl	0 <coda_type_number_set_endianness>
     bc8:	cmp	r0, #0
     bcc:	beq	be0 <read_AEDR+0x4f4>
     bd0:	mov	r0, r6
     bd4:	bl	0 <coda_type_release>
     bd8:	mvn	r1, #0
     bdc:	b	db0 <read_AEDR+0x6c4>
     be0:	cmp	r4, #51	; 0x33
     be4:	movne	r0, #1
     be8:	moveq	r0, #0
     bec:	mov	r2, #0
     bf0:	cmp	r7, #1
     bf4:	movne	r3, r0
     bf8:	moveq	r3, r2
     bfc:	cmp	r4, #52	; 0x34
     c00:	movne	ip, #1
     c04:	moveq	ip, #0
     c08:	mov	r1, #0
     c0c:	cmp	r3, #0
     c10:	movne	r2, ip
     c14:	moveq	r2, r1
     c18:	cmp	r2, #0
     c1c:	beq	d54 <read_AEDR+0x668>
     c20:	mov	r0, #5
     c24:	bl	0 <coda_type_array_new>
     c28:	mov	r4, r0
     c2c:	cmp	r4, #0
     c30:	bne	c44 <read_AEDR+0x558>
     c34:	mov	r0, r6
     c38:	bl	0 <coda_type_release>
     c3c:	mvn	r1, #0
     c40:	b	db0 <read_AEDR+0x6c4>
     c44:	mov	r1, r6
     c48:	mov	r0, r4
     c4c:	bl	0 <coda_type_array_set_base_type>
     c50:	cmp	r0, #0
     c54:	beq	c70 <read_AEDR+0x584>
     c58:	mov	r0, r4
     c5c:	bl	0 <coda_type_release>
     c60:	mov	r0, r6
     c64:	bl	0 <coda_type_release>
     c68:	mvn	r1, #0
     c6c:	b	db0 <read_AEDR+0x6c4>
     c70:	mov	r0, r6
     c74:	bl	0 <coda_type_release>
     c78:	mov	r1, #0
     c7c:	mov	r0, r4
     c80:	bl	0 <coda_type_array_add_variable_dimension>
     c84:	cmp	r0, #0
     c88:	beq	c9c <read_AEDR+0x5b0>
     c8c:	mov	r0, r4
     c90:	bl	0 <coda_type_release>
     c94:	mvn	r1, #0
     c98:	b	db0 <read_AEDR+0x6c4>
     c9c:	mov	r1, #0
     ca0:	mov	r0, r4
     ca4:	bl	0 <coda_mem_array_new>
     ca8:	mov	sl, r0
     cac:	cmp	sl, #0
     cb0:	bne	cc4 <read_AEDR+0x5d8>
     cb4:	mov	r0, r4
     cb8:	bl	0 <coda_type_release>
     cbc:	mvn	r1, #0
     cc0:	b	db0 <read_AEDR+0x6c4>
     cc4:	mov	r0, r4
     cc8:	bl	0 <coda_type_release>
     ccc:	mov	r4, #0
     cd0:	cmp	r4, r7
     cd4:	bge	d94 <read_AEDR+0x6a8>
     cd8:	mul	r0, r4, r9
     cdc:	asr	r1, r0, #31
     ce0:	ldr	r2, [sp, #32]
     ce4:	adds	lr, r5, r0
     ce8:	adc	r3, r2, r1
     cec:	mov	r2, lr
     cf0:	ldr	r1, [sp, #36]	; 0x24
     cf4:	str	r1, [sp, #8]
     cf8:	str	r6, [sp, #4]
     cfc:	str	r9, [sp]
     d00:	mov	r0, r8
     d04:	bl	37c <read_attribute_sub>
     d08:	cmp	r0, #0
     d0c:	beq	d20 <read_AEDR+0x634>
     d10:	mov	r0, sl
     d14:	bl	0 <coda_dynamic_type_delete>
     d18:	mvn	r1, #0
     d1c:	b	db0 <read_AEDR+0x6c4>
     d20:	ldr	r1, [sp, #84]	; 0x54
     d24:	mov	r0, sl
     d28:	bl	0 <coda_mem_array_add_element>
     d2c:	cmp	r0, #0
     d30:	beq	d4c <read_AEDR+0x660>
     d34:	mov	r0, sl
     d38:	bl	0 <coda_dynamic_type_delete>
     d3c:	ldr	r0, [sp, #84]	; 0x54
     d40:	bl	0 <coda_dynamic_type_delete>
     d44:	mvn	r1, #0
     d48:	b	db0 <read_AEDR+0x6c4>
     d4c:	add	r4, r4, #1
     d50:	b	cd0 <read_AEDR+0x5e4>
     d54:	ldr	ip, [sp, #36]	; 0x24
     d58:	str	ip, [sp, #8]
     d5c:	str	r6, [sp, #4]
     d60:	str	r9, [sp]
     d64:	ldr	r3, [sp, #32]
     d68:	mov	r2, r5
     d6c:	mov	r0, r8
     d70:	bl	37c <read_attribute_sub>
     d74:	cmp	r0, #0
     d78:	beq	d8c <read_AEDR+0x6a0>
     d7c:	mov	r0, r6
     d80:	bl	0 <coda_type_release>
     d84:	mvn	r1, #0
     d88:	b	db0 <read_AEDR+0x6c4>
     d8c:	mov	r0, r6
     d90:	bl	0 <coda_type_release>
     d94:	mov	r1, #0
     d98:	b	db0 <read_AEDR+0x6c4>
     d9c:	mvn	r0, #99	; 0x63
     da0:	ldr	r1, [pc, #376]	; f20 <read_AEDR+0x834>
     da4:	mov	r2, r4
     da8:	bl	0 <coda_set_error>
     dac:	mvn	r1, #0
     db0:	cmp	r1, #0
     db4:	beq	dc0 <read_AEDR+0x6d4>
     db8:	mvn	r0, #0
     dbc:	b	ee8 <read_AEDR+0x7fc>
     dc0:	ldr	r3, [sp, #28]
     dc4:	and	r2, r3, #1
     dc8:	mov	r0, #0
     dcc:	ldr	r3, [sp, #88]	; 0x58
     dd0:	cmp	r3, #5
     dd4:	moveq	ip, r2
     dd8:	movne	ip, r0
     ddc:	cmp	ip, #0
     de0:	bne	e88 <read_AEDR+0x79c>
     de4:	ldr	ip, [sp, #80]	; 0x50
     de8:	cmp	ip, #0
     dec:	blt	e60 <read_AEDR+0x774>
     df0:	ldr	r3, [r8, #20]
     df4:	ldr	r0, [r3, #16]
     df8:	cmp	ip, r0
     dfc:	bge	e60 <read_AEDR+0x774>
     e00:	ldr	r0, [r3, #20]
     e04:	ldr	r1, [r0, ip, lsl #2]
     e08:	ldr	r1, [r1]
     e0c:	cmp	r1, #103	; 0x67
     e10:	beq	e28 <read_AEDR+0x73c>
     e14:	ldr	r0, [pc, #276]	; f30 <read_AEDR+0x844>
     e18:	ldr	r1, [pc, #244]	; f14 <read_AEDR+0x828>
     e1c:	movw	r2, #439	; 0x1b7
     e20:	ldr	r3, [pc, #240]	; f18 <read_AEDR+0x82c>
     e24:	bl	0 <__assert_fail>
     e28:	ldr	r3, [r8, #20]
     e2c:	ldr	r0, [r3, #20]
     e30:	ldr	ip, [sp, #80]	; 0x50
     e34:	ldr	r0, [r0, ip, lsl #2]
     e38:	ldr	r2, [sp, #84]	; 0x54
     e3c:	mov	r3, #1
     e40:	ldr	r1, [sp, #24]
     e44:	bl	0 <coda_cdf_variable_add_attribute>
     e48:	cmp	r0, #0
     e4c:	beq	eb4 <read_AEDR+0x7c8>
     e50:	ldr	r0, [sp, #84]	; 0x54
     e54:	bl	0 <coda_dynamic_type_delete>
     e58:	mvn	r0, #0
     e5c:	b	ee8 <read_AEDR+0x7fc>
     e60:	movw	r0, #65236	; 0xfed4
     e64:	movt	r0, #65535	; 0xffff
     e68:	ldr	r1, [pc, #184]	; f28 <read_AEDR+0x83c>
     e6c:	ldr	r2, [sp, #80]	; 0x50
     e70:	ldr	r3, [r8, #20]
     e74:	ldr	r3, [r3, #16]
     e78:	sub	r3, r3, #1
     e7c:	bl	0 <coda_set_error>
     e80:	mvn	r0, #0
     e84:	b	ee8 <read_AEDR+0x7fc>
     e88:	ldr	r0, [r8, #20]
     e8c:	ldr	r2, [sp, #84]	; 0x54
     e90:	mov	r3, #1
     e94:	ldr	r1, [sp, #24]
     e98:	bl	0 <coda_mem_type_add_attribute>
     e9c:	cmp	r0, #0
     ea0:	beq	eb4 <read_AEDR+0x7c8>
     ea4:	ldr	r0, [sp, #84]	; 0x54
     ea8:	bl	0 <coda_dynamic_type_delete>
     eac:	mvn	r0, #0
     eb0:	b	ee8 <read_AEDR+0x7fc>
     eb4:	ldr	r2, [sp, #96]	; 0x60
     eb8:	ldr	r3, [sp, #100]	; 0x64
     ebc:	ldr	ip, [sp, #28]
     ec0:	str	ip, [sp, #4]
     ec4:	ldr	ip, [sp, #24]
     ec8:	str	ip, [sp]
     ecc:	mov	r0, r8
     ed0:	bl	6ec <read_AEDR>
     ed4:	cmp	r0, #0
     ed8:	beq	ee4 <read_AEDR+0x7f8>
     edc:	mvn	r0, #0
     ee0:	b	ee8 <read_AEDR+0x7fc>
     ee4:	mov	r0, #0
     ee8:	ldr	r4, [sp, #40]	; 0x28
     eec:	ldr	r5, [sp, #44]	; 0x2c
     ef0:	ldr	r6, [sp, #48]	; 0x30
     ef4:	ldr	r7, [sp, #52]	; 0x34
     ef8:	ldr	r8, [sp, #56]	; 0x38
     efc:	ldr	r9, [sp, #60]	; 0x3c
     f00:	ldr	sl, [sp, #64]	; 0x40
     f04:	ldr	fp, [sp, #68]	; 0x44
     f08:	ldr	lr, [sp, #16]
     f0c:	add	sp, sp, #104	; 0x68
     f10:	bx	lr
     f14:	.word	0x0000067b
     f18:	.word	0x000008b5
     f1c:	.word	0x000008a6
     f20:	.word	0x0000010d
     f24:	.word	0x000000d7
     f28:	.word	0x00000345
     f2c:	.word	0x00000702
     f30:	.word	0x00000496
     f34:	.word	0x00000576

00000f38 <read_ADR>:
     f38:	mov	ip, sp
     f3c:	sub	sp, sp, #368	; 0x170
     f40:	str	ip, [sp, #12]
     f44:	str	lr, [sp, #16]
     f48:	str	r4, [sp, #24]
     f4c:	str	r5, [sp, #28]
     f50:	str	r6, [sp, #32]
     f54:	str	r7, [sp, #36]	; 0x24
     f58:	str	r8, [sp, #40]	; 0x28
     f5c:	mov	r4, r3
     f60:	mov	r6, r2
     f64:	mov	r5, r0
     f68:	mov	ip, r6
     f6c:	mov	r0, r4
     f70:	orr	r0, r0, ip
     f74:	cmp	r0, #0
     f78:	bne	f84 <read_ADR+0x4c>
     f7c:	mov	r0, #0
     f80:	b	137c <read_ADR+0x444>
     f84:	ldr	r0, [r5, #52]	; 0x34
     f88:	mov	ip, #0
     f8c:	mov	r3, #8
     f90:	adds	r2, r6, r3
     f94:	adc	r3, r4, ip
     f98:	mov	ip, #0
     f9c:	mov	r1, #4
     fa0:	add	r8, sp, #56	; 0x38
     fa4:	str	r8, [sp, #8]
     fa8:	str	ip, [sp, #4]
     fac:	str	r1, [sp]
     fb0:	bl	0 <read_bytes>
     fb4:	cmp	r0, #0
     fb8:	bge	fc4 <read_ADR+0x8c>
     fbc:	mvn	r0, #0
     fc0:	b	137c <read_ADR+0x444>
     fc4:	add	r0, sp, #56	; 0x38
     fc8:	bl	1f4 <swap4>
     fcc:	ldr	r2, [sp, #56]	; 0x38
     fd0:	cmp	r2, #4
     fd4:	beq	ff0 <read_ADR+0xb8>
     fd8:	movw	r0, #65236	; 0xfed4
     fdc:	movt	r0, #65535	; 0xffff
     fe0:	ldr	r1, [pc, #952]	; 13a0 <read_ADR+0x468>
     fe4:	bl	0 <coda_set_error>
     fe8:	mvn	r0, #0
     fec:	b	137c <read_ADR+0x444>
     ff0:	ldr	r0, [r5, #52]	; 0x34
     ff4:	mov	r2, #0
     ff8:	mov	r1, #12
     ffc:	adds	lr, r6, r1
    1000:	adc	r3, r4, r2
    1004:	mov	r2, lr
    1008:	mov	ip, #0
    100c:	mov	r1, #8
    1010:	add	r8, sp, #80	; 0x50
    1014:	str	r8, [sp, #8]
    1018:	str	ip, [sp, #4]
    101c:	str	r1, [sp]
    1020:	bl	0 <read_bytes>
    1024:	cmp	r0, #0
    1028:	bge	1034 <read_ADR+0xfc>
    102c:	mvn	r0, #0
    1030:	b	137c <read_ADR+0x444>
    1034:	ldr	r0, [r5, #52]	; 0x34
    1038:	mov	r2, #0
    103c:	mov	r1, #20
    1040:	adds	lr, r6, r1
    1044:	adc	r3, r4, r2
    1048:	mov	r2, lr
    104c:	mov	r1, #0
    1050:	mov	ip, #8
    1054:	add	r8, sp, #88	; 0x58
    1058:	str	r8, [sp, #8]
    105c:	str	r1, [sp, #4]
    1060:	str	ip, [sp]
    1064:	bl	0 <read_bytes>
    1068:	cmp	r0, #0
    106c:	bge	1078 <read_ADR+0x140>
    1070:	mvn	r0, #0
    1074:	b	137c <read_ADR+0x444>
    1078:	ldr	r0, [r5, #52]	; 0x34
    107c:	mov	r2, #0
    1080:	mov	r1, #28
    1084:	adds	lr, r6, r1
    1088:	adc	r3, r4, r2
    108c:	mov	r2, lr
    1090:	mov	r1, #0
    1094:	mov	ip, #4
    1098:	add	r8, sp, #60	; 0x3c
    109c:	str	r8, [sp, #8]
    10a0:	str	r1, [sp, #4]
    10a4:	str	ip, [sp]
    10a8:	bl	0 <read_bytes>
    10ac:	cmp	r0, #0
    10b0:	bge	10bc <read_ADR+0x184>
    10b4:	mvn	r0, #0
    10b8:	b	137c <read_ADR+0x444>
    10bc:	ldr	r0, [r5, #52]	; 0x34
    10c0:	mov	r2, #0
    10c4:	mov	r1, #32
    10c8:	adds	lr, r6, r1
    10cc:	adc	r3, r4, r2
    10d0:	mov	r2, lr
    10d4:	mov	ip, #0
    10d8:	mov	r1, #4
    10dc:	add	r8, sp, #64	; 0x40
    10e0:	str	r8, [sp, #8]
    10e4:	str	ip, [sp, #4]
    10e8:	str	r1, [sp]
    10ec:	bl	0 <read_bytes>
    10f0:	cmp	r0, #0
    10f4:	bge	1100 <read_ADR+0x1c8>
    10f8:	mvn	r0, #0
    10fc:	b	137c <read_ADR+0x444>
    1100:	ldr	r0, [r5, #52]	; 0x34
    1104:	mov	ip, #0
    1108:	mov	r3, #36	; 0x24
    110c:	adds	r2, r6, r3
    1110:	adc	r3, r4, ip
    1114:	mov	ip, #0
    1118:	mov	r1, #4
    111c:	add	r8, sp, #68	; 0x44
    1120:	str	r8, [sp, #8]
    1124:	str	ip, [sp, #4]
    1128:	str	r1, [sp]
    112c:	bl	0 <read_bytes>
    1130:	cmp	r0, #0
    1134:	bge	1140 <read_ADR+0x208>
    1138:	mvn	r0, #0
    113c:	b	137c <read_ADR+0x444>
    1140:	ldr	r0, [r5, #52]	; 0x34
    1144:	mov	r1, #0
    1148:	mov	ip, #40	; 0x28
    114c:	adds	r2, r6, ip
    1150:	adc	r3, r4, r1
    1154:	mov	r1, #0
    1158:	mov	ip, #4
    115c:	add	r8, sp, #72	; 0x48
    1160:	str	r8, [sp, #8]
    1164:	str	r1, [sp, #4]
    1168:	str	ip, [sp]
    116c:	bl	0 <read_bytes>
    1170:	cmp	r0, #0
    1174:	bge	1180 <read_ADR+0x248>
    1178:	mvn	r0, #0
    117c:	b	137c <read_ADR+0x444>
    1180:	ldr	r0, [r5, #52]	; 0x34
    1184:	mov	r1, #0
    1188:	mov	ip, #48	; 0x30
    118c:	adds	r2, r6, ip
    1190:	adc	r3, r4, r1
    1194:	mov	r1, #0
    1198:	mov	ip, #8
    119c:	add	r8, sp, #96	; 0x60
    11a0:	str	r8, [sp, #8]
    11a4:	str	r1, [sp, #4]
    11a8:	str	ip, [sp]
    11ac:	bl	0 <read_bytes>
    11b0:	cmp	r0, #0
    11b4:	bge	11c0 <read_ADR+0x288>
    11b8:	mvn	r0, #0
    11bc:	b	137c <read_ADR+0x444>
    11c0:	ldr	r0, [r5, #52]	; 0x34
    11c4:	mov	ip, #0
    11c8:	mov	r3, #56	; 0x38
    11cc:	adds	r2, r6, r3
    11d0:	adc	r3, r4, ip
    11d4:	mov	r1, #0
    11d8:	mov	ip, #4
    11dc:	add	r7, sp, #48	; 0x30
    11e0:	str	r7, [sp, #8]
    11e4:	str	r1, [sp, #4]
    11e8:	str	ip, [sp]
    11ec:	bl	0 <read_bytes>
    11f0:	cmp	r0, #0
    11f4:	bge	1200 <read_ADR+0x2c8>
    11f8:	mvn	r0, #0
    11fc:	b	137c <read_ADR+0x444>
    1200:	ldr	r0, [r5, #52]	; 0x34
    1204:	mov	r3, #0
    1208:	mov	r2, #60	; 0x3c
    120c:	adds	r2, r6, r2
    1210:	adc	r3, r4, r3
    1214:	mov	r1, #0
    1218:	mov	ip, #4
    121c:	add	r7, sp, #52	; 0x34
    1220:	str	r7, [sp, #8]
    1224:	str	r1, [sp, #4]
    1228:	str	ip, [sp]
    122c:	bl	0 <read_bytes>
    1230:	cmp	r0, #0
    1234:	bge	1240 <read_ADR+0x308>
    1238:	mvn	r0, #0
    123c:	b	137c <read_ADR+0x444>
    1240:	ldr	r0, [r5, #52]	; 0x34
    1244:	mov	r2, #0
    1248:	mov	r1, #68	; 0x44
    124c:	adds	lr, r6, r1
    1250:	adc	r3, r4, r2
    1254:	mov	r2, lr
    1258:	mov	ip, #0
    125c:	mov	r1, #256	; 0x100
    1260:	add	r6, sp, #104	; 0x68
    1264:	str	r6, [sp, #8]
    1268:	str	ip, [sp, #4]
    126c:	str	r1, [sp]
    1270:	bl	0 <read_bytes>
    1274:	cmp	r0, #0
    1278:	bge	1284 <read_ADR+0x34c>
    127c:	mvn	r0, #0
    1280:	b	137c <read_ADR+0x444>
    1284:	mov	r3, #0
    1288:	strb	r3, [sp, #360]	; 0x168
    128c:	add	r0, sp, #104	; 0x68
    1290:	bl	31c <rtrim>
    1294:	add	r0, sp, #80	; 0x50
    1298:	bl	260 <swap8>
    129c:	add	r0, sp, #88	; 0x58
    12a0:	bl	260 <swap8>
    12a4:	add	r0, sp, #60	; 0x3c
    12a8:	bl	1f4 <swap4>
    12ac:	add	r0, sp, #64	; 0x40
    12b0:	bl	1f4 <swap4>
    12b4:	add	r0, sp, #68	; 0x44
    12b8:	bl	1f4 <swap4>
    12bc:	add	r0, sp, #72	; 0x48
    12c0:	bl	1f4 <swap4>
    12c4:	add	r0, sp, #96	; 0x60
    12c8:	bl	260 <swap8>
    12cc:	add	r0, sp, #48	; 0x30
    12d0:	bl	1f4 <swap4>
    12d4:	add	r0, sp, #52	; 0x34
    12d8:	bl	1f4 <swap4>
    12dc:	ldr	r2, [sp, #88]	; 0x58
    12e0:	ldr	r3, [sp, #92]	; 0x5c
    12e4:	ldr	r1, [sp, #60]	; 0x3c
    12e8:	and	ip, r1, #1
    12ec:	cmp	ip, #0
    12f0:	beq	131c <read_ADR+0x3e4>
    12f4:	ldr	ip, [sp, #48]	; 0x30
    12f8:	cmp	ip, #0
    12fc:	beq	1330 <read_ADR+0x3f8>
    1300:	movw	r0, #65236	; 0xfed4
    1304:	movt	r0, #65535	; 0xffff
    1308:	ldr	r1, [pc, #140]	; 139c <read_ADR+0x464>
    130c:	mov	r2, ip
    1310:	bl	0 <coda_set_error>
    1314:	mvn	r0, #0
    1318:	b	137c <read_ADR+0x444>
    131c:	ldr	r1, [sp, #68]	; 0x44
    1320:	cmp	r1, #0
    1324:	bne	1330 <read_ADR+0x3f8>
    1328:	ldr	r2, [sp, #96]	; 0x60
    132c:	ldr	r3, [sp, #100]	; 0x64
    1330:	add	r1, sp, #104	; 0x68
    1334:	ldr	r0, [sp, #60]	; 0x3c
    1338:	str	r0, [sp, #4]
    133c:	str	r1, [sp]
    1340:	mov	r0, r5
    1344:	bl	6ec <read_AEDR>
    1348:	cmp	r0, #0
    134c:	beq	1358 <read_ADR+0x420>
    1350:	mvn	r0, #0
    1354:	b	137c <read_ADR+0x444>
    1358:	ldr	r2, [sp, #80]	; 0x50
    135c:	ldr	r3, [sp, #84]	; 0x54
    1360:	mov	r0, r5
    1364:	bl	f38 <read_ADR>
    1368:	cmp	r0, #0
    136c:	beq	1378 <read_ADR+0x440>
    1370:	mvn	r0, #0
    1374:	b	137c <read_ADR+0x444>
    1378:	mov	r0, #0
    137c:	ldr	r4, [sp, #24]
    1380:	ldr	r5, [sp, #28]
    1384:	ldr	r6, [sp, #32]
    1388:	ldr	r7, [sp, #36]	; 0x24
    138c:	ldr	r8, [sp, #40]	; 0x28
    1390:	ldr	lr, [sp, #16]
    1394:	add	sp, sp, #368	; 0x170
    1398:	bx	lr
    139c:	.word	0x00000519
    13a0:	.word	0x00000000

000013a4 <read_VXR>:
    13a4:	mov	ip, sp
    13a8:	sub	sp, sp, #192	; 0xc0
    13ac:	str	ip, [sp, #12]
    13b0:	str	lr, [sp, #16]
    13b4:	str	r4, [sp, #48]	; 0x30
    13b8:	str	r5, [sp, #52]	; 0x34
    13bc:	str	r6, [sp, #56]	; 0x38
    13c0:	str	r7, [sp, #60]	; 0x3c
    13c4:	str	r8, [sp, #64]	; 0x40
    13c8:	str	r9, [sp, #68]	; 0x44
    13cc:	str	sl, [sp, #72]	; 0x48
    13d0:	str	fp, [sp, #76]	; 0x4c
    13d4:	ldr	ip, [ip, #4]
    13d8:	str	ip, [sp, #44]	; 0x2c
    13dc:	ldr	ip, [sp, #12]
    13e0:	ldr	ip, [ip]
    13e4:	str	ip, [sp, #40]	; 0x28
    13e8:	mov	r4, r3
    13ec:	mov	r5, r2
    13f0:	mov	sl, r1
    13f4:	mov	r8, r0
    13f8:	mov	r3, r4
    13fc:	mov	r2, r5
    1400:	orr	r2, r3, r2
    1404:	cmp	r2, #0
    1408:	bne	1414 <read_VXR+0x70>
    140c:	mov	r0, #0
    1410:	b	1bb8 <read_VXR+0x814>
    1414:	ldr	r0, [r8, #52]	; 0x34
    1418:	mov	r3, #0
    141c:	mov	r2, #8
    1420:	adds	r2, r5, r2
    1424:	adc	r3, r4, r3
    1428:	mov	r6, #0
    142c:	mov	ip, #4
    1430:	add	r7, sp, #88	; 0x58
    1434:	str	r7, [sp, #8]
    1438:	str	r6, [sp, #4]
    143c:	str	ip, [sp]
    1440:	bl	0 <read_bytes>
    1444:	cmp	r0, #0
    1448:	bge	1454 <read_VXR+0xb0>
    144c:	mvn	r0, #0
    1450:	b	1bb8 <read_VXR+0x814>
    1454:	add	r0, sp, #88	; 0x58
    1458:	bl	1f4 <swap4>
    145c:	ldr	r2, [sp, #88]	; 0x58
    1460:	cmp	r2, #6
    1464:	beq	1480 <read_VXR+0xdc>
    1468:	movw	r0, #65236	; 0xfed4
    146c:	movt	r0, #65535	; 0xffff
    1470:	ldr	r1, [pc, #1920]	; 1bf8 <read_VXR+0x854>
    1474:	bl	0 <coda_set_error>
    1478:	mvn	r0, #0
    147c:	b	1bb8 <read_VXR+0x814>
    1480:	ldr	r0, [r8, #52]	; 0x34
    1484:	mov	ip, #0
    1488:	mov	r3, #12
    148c:	adds	r2, r5, r3
    1490:	adc	r3, r4, ip
    1494:	mov	r6, #0
    1498:	mov	r1, #8
    149c:	add	r7, sp, #112	; 0x70
    14a0:	str	r7, [sp, #8]
    14a4:	str	r6, [sp, #4]
    14a8:	str	r1, [sp]
    14ac:	bl	0 <read_bytes>
    14b0:	cmp	r0, #0
    14b4:	bge	14c0 <read_VXR+0x11c>
    14b8:	mvn	r0, #0
    14bc:	b	1bb8 <read_VXR+0x814>
    14c0:	ldr	r0, [r8, #52]	; 0x34
    14c4:	mov	r1, #0
    14c8:	mov	ip, #20
    14cc:	adds	r2, r5, ip
    14d0:	adc	r3, r4, r1
    14d4:	mov	r6, #0
    14d8:	mov	ip, #4
    14dc:	add	r7, sp, #92	; 0x5c
    14e0:	str	r7, [sp, #8]
    14e4:	str	r6, [sp, #4]
    14e8:	str	ip, [sp]
    14ec:	bl	0 <read_bytes>
    14f0:	cmp	r0, #0
    14f4:	bge	1500 <read_VXR+0x15c>
    14f8:	mvn	r0, #0
    14fc:	b	1bb8 <read_VXR+0x814>
    1500:	ldr	r0, [r8, #52]	; 0x34
    1504:	mov	r2, #0
    1508:	mov	r1, #24
    150c:	adds	lr, r5, r1
    1510:	adc	r3, r4, r2
    1514:	mov	r2, lr
    1518:	mov	r6, #0
    151c:	mov	ip, #4
    1520:	add	r7, sp, #96	; 0x60
    1524:	str	r7, [sp, #8]
    1528:	str	r6, [sp, #4]
    152c:	str	ip, [sp]
    1530:	bl	0 <read_bytes>
    1534:	cmp	r0, #0
    1538:	bge	1544 <read_VXR+0x1a0>
    153c:	mvn	r0, #0
    1540:	b	1bb8 <read_VXR+0x814>
    1544:	add	r0, sp, #112	; 0x70
    1548:	bl	260 <swap8>
    154c:	add	r0, sp, #92	; 0x5c
    1550:	bl	1f4 <swap4>
    1554:	add	r0, sp, #96	; 0x60
    1558:	bl	1f4 <swap4>
    155c:	mov	r3, #0
    1560:	mov	r2, #28
    1564:	adds	ip, r5, r2
    1568:	adc	r2, r4, r3
    156c:	str	r2, [sp, #36]	; 0x24
    1570:	str	ip, [sp, #32]
    1574:	mov	r9, #0
    1578:	ldr	r2, [sp, #96]	; 0x60
    157c:	cmp	r9, r2
    1580:	bge	1b80 <read_VXR+0x7dc>
    1584:	ldr	r0, [r8, #52]	; 0x34
    1588:	lsl	r1, r9, #2
    158c:	asr	ip, r1, #31
    1590:	ldr	r3, [sp, #36]	; 0x24
    1594:	ldr	r2, [sp, #32]
    1598:	adds	r2, r2, r1
    159c:	adc	r3, r3, ip
    15a0:	mov	ip, #0
    15a4:	mov	r4, #4
    15a8:	add	r5, sp, #80	; 0x50
    15ac:	str	r5, [sp, #8]
    15b0:	str	ip, [sp, #4]
    15b4:	str	r4, [sp]
    15b8:	bl	0 <read_bytes>
    15bc:	cmp	r0, #0
    15c0:	bge	15cc <read_VXR+0x228>
    15c4:	mvn	r0, #0
    15c8:	b	1bb8 <read_VXR+0x814>
    15cc:	ldr	r0, [r8, #52]	; 0x34
    15d0:	ldr	ip, [sp, #92]	; 0x5c
    15d4:	add	r2, r9, ip
    15d8:	lsl	r2, r2, #2
    15dc:	asr	r3, r2, #31
    15e0:	ldr	r1, [sp, #36]	; 0x24
    15e4:	ldr	ip, [sp, #32]
    15e8:	adds	r2, ip, r2
    15ec:	adc	r3, r1, r3
    15f0:	mov	ip, #0
    15f4:	mov	r5, #4
    15f8:	add	r4, sp, #84	; 0x54
    15fc:	str	r4, [sp, #8]
    1600:	str	ip, [sp, #4]
    1604:	str	r5, [sp]
    1608:	bl	0 <read_bytes>
    160c:	cmp	r0, #0
    1610:	bge	161c <read_VXR+0x278>
    1614:	mvn	r0, #0
    1618:	b	1bb8 <read_VXR+0x814>
    161c:	ldr	r0, [r8, #52]	; 0x34
    1620:	ldr	r1, [sp, #92]	; 0x5c
    1624:	add	ip, r9, r1
    1628:	lsl	r2, ip, #3
    162c:	asr	ip, r2, #31
    1630:	ldr	r3, [sp, #36]	; 0x24
    1634:	ldr	r1, [sp, #32]
    1638:	adds	r2, r1, r2
    163c:	adc	r3, r3, ip
    1640:	mov	r1, #0
    1644:	mov	r4, #8
    1648:	add	r5, sp, #104	; 0x68
    164c:	str	r5, [sp, #8]
    1650:	str	r1, [sp, #4]
    1654:	str	r4, [sp]
    1658:	bl	0 <read_bytes>
    165c:	cmp	r0, #0
    1660:	bge	166c <read_VXR+0x2c8>
    1664:	mvn	r0, #0
    1668:	b	1bb8 <read_VXR+0x814>
    166c:	add	r0, sp, #80	; 0x50
    1670:	bl	1f4 <swap4>
    1674:	add	r0, sp, #84	; 0x54
    1678:	bl	1f4 <swap4>
    167c:	add	r0, sp, #104	; 0x68
    1680:	bl	260 <swap8>
    1684:	ldr	r4, [sp, #104]	; 0x68
    1688:	ldr	r5, [sp, #108]	; 0x6c
    168c:	ldr	r7, [sp, #80]	; 0x50
    1690:	ldr	r6, [sp, #84]	; 0x54
    1694:	mov	r3, r5
    1698:	mov	r2, r4
    169c:	orr	ip, r3, r2
    16a0:	cmp	ip, #0
    16a4:	bne	16b0 <read_VXR+0x30c>
    16a8:	mov	r0, #0
    16ac:	b	1b68 <read_VXR+0x7c4>
    16b0:	ldr	r0, [r8, #52]	; 0x34
    16b4:	mov	r1, #0
    16b8:	mov	r3, #8
    16bc:	adds	r2, r4, r3
    16c0:	adc	r3, r5, r1
    16c4:	mov	fp, #0
    16c8:	mov	ip, #4
    16cc:	add	r1, sp, #120	; 0x78
    16d0:	str	r1, [sp, #24]
    16d4:	ldr	r1, [sp, #24]
    16d8:	str	r1, [sp, #8]
    16dc:	str	fp, [sp, #4]
    16e0:	str	ip, [sp]
    16e4:	bl	0 <read_bytes>
    16e8:	cmp	r0, #0
    16ec:	bge	16f8 <read_VXR+0x354>
    16f0:	mvn	r0, #0
    16f4:	b	1b68 <read_VXR+0x7c4>
    16f8:	add	r0, sp, #120	; 0x78
    16fc:	bl	1f4 <swap4>
    1700:	ldr	r2, [sp, #120]	; 0x78
    1704:	cmp	r2, #6
    1708:	bne	172c <read_VXR+0x388>
    170c:	str	r6, [sp, #4]
    1710:	str	r7, [sp]
    1714:	mov	r3, r5
    1718:	mov	r2, r4
    171c:	mov	r1, sl
    1720:	mov	r0, r8
    1724:	bl	13a4 <read_VXR>
    1728:	b	1b68 <read_VXR+0x7c4>
    172c:	cmp	r2, #7
    1730:	beq	1b00 <read_VXR+0x75c>
    1734:	cmp	r2, #13
    1738:	bne	1ae8 <read_VXR+0x744>
    173c:	mov	fp, #0
    1740:	ldr	r0, [sl, #20]
    1744:	cmp	r7, r0
    1748:	blt	1754 <read_VXR+0x3b0>
    174c:	mov	r0, #0
    1750:	b	1b68 <read_VXR+0x7c4>
    1754:	ldr	ip, [sl, #40]	; 0x28
    1758:	cmp	ip, #0
    175c:	bne	17b4 <read_VXR+0x410>
    1760:	ldr	r3, [sl, #24]
    1764:	mul	r0, r0, r3
    1768:	ldr	r1, [sl, #28]
    176c:	mul	r0, r0, r1
    1770:	bl	0 <malloc>
    1774:	str	r0, [sl, #40]	; 0x28
    1778:	cmp	r0, #0
    177c:	bne	17b4 <read_VXR+0x410>
    1780:	mvn	r0, #0
    1784:	ldr	r1, [pc, #1124]	; 1bf0 <read_VXR+0x84c>
    1788:	ldr	r2, [sl, #20]
    178c:	ldr	ip, [sl, #24]
    1790:	mul	r2, r2, ip
    1794:	ldr	r3, [sl, #28]
    1798:	mul	r2, r2, r3
    179c:	ldr	r3, [pc, #1096]	; 1bec <read_VXR+0x848>
    17a0:	movw	r4, #629	; 0x275
    17a4:	str	r4, [sp]
    17a8:	bl	0 <coda_set_error>
    17ac:	mvn	r0, #0
    17b0:	b	1b68 <read_VXR+0x7c4>
    17b4:	ldr	r0, [r8, #52]	; 0x34
    17b8:	str	r0, [sp, #28]
    17bc:	mov	r3, #0
    17c0:	mov	ip, #16
    17c4:	adds	r2, r4, ip
    17c8:	adc	r1, r5, r3
    17cc:	str	r1, [sp, #24]
    17d0:	mov	r3, #0
    17d4:	mov	ip, #8
    17d8:	add	r0, sp, #128	; 0x80
    17dc:	str	r0, [sp, #8]
    17e0:	str	r3, [sp, #4]
    17e4:	str	ip, [sp]
    17e8:	ldr	r3, [sp, #24]
    17ec:	ldr	r0, [sp, #28]
    17f0:	bl	0 <read_bytes>
    17f4:	cmp	r0, #0
    17f8:	bge	1804 <read_VXR+0x460>
    17fc:	mvn	r0, #0
    1800:	b	1b68 <read_VXR+0x7c4>
    1804:	add	r0, sp, #128	; 0x80
    1808:	bl	260 <swap8>
    180c:	mov	r1, #0
    1810:	mov	r2, #24
    1814:	adds	r4, r4, r2
    1818:	adc	ip, r5, r1
    181c:	str	ip, [sp, #24]
    1820:	ldr	ip, [sp, #128]	; 0x80
    1824:	ldr	r0, [sp, #132]	; 0x84
    1828:	cmp	r0, #0
    182c:	bne	183c <read_VXR+0x498>
    1830:	cmp	ip, #20
    1834:	bcc	1844 <read_VXR+0x4a0>
    1838:	b	185c <read_VXR+0x4b8>
    183c:	cmp	r0, #0
    1840:	bge	185c <read_VXR+0x4b8>
    1844:	movw	r0, #65236	; 0xfed4
    1848:	movt	r0, #65535	; 0xffff
    184c:	ldr	r1, [pc, #936]	; 1bfc <read_VXR+0x858>
    1850:	bl	0 <coda_set_error>
    1854:	mvn	r0, #0
    1858:	b	1b68 <read_VXR+0x7c4>
    185c:	ldr	r0, [sp, #128]	; 0x80
    1860:	bl	0 <malloc>
    1864:	mov	r5, r0
    1868:	cmp	r5, #0
    186c:	bne	1894 <read_VXR+0x4f0>
    1870:	mvn	r0, #0
    1874:	ldr	r1, [pc, #884]	; 1bf0 <read_VXR+0x84c>
    1878:	ldr	r2, [sp, #128]	; 0x80
    187c:	ldr	r3, [pc, #872]	; 1bec <read_VXR+0x848>
    1880:	mov	r4, #652	; 0x28c
    1884:	str	r4, [sp]
    1888:	bl	0 <coda_set_error>
    188c:	mvn	r0, #0
    1890:	b	1b68 <read_VXR+0x7c4>
    1894:	ldr	r0, [r8, #52]	; 0x34
    1898:	ldr	r1, [sp, #128]	; 0x80
    189c:	ldr	r2, [sp, #132]	; 0x84
    18a0:	str	r5, [sp, #8]
    18a4:	str	r2, [sp, #4]
    18a8:	str	r1, [sp]
    18ac:	ldr	r3, [sp, #24]
    18b0:	mov	r2, r4
    18b4:	bl	0 <read_bytes>
    18b8:	cmp	r0, #0
    18bc:	bge	18d0 <read_VXR+0x52c>
    18c0:	mov	r0, r5
    18c4:	bl	0 <free>
    18c8:	mvn	r0, #0
    18cc:	b	1b68 <read_VXR+0x7c4>
    18d0:	mov	r3, #0
    18d4:	str	r3, [sp, #136]	; 0x88
    18d8:	mov	r0, #0
    18dc:	str	r0, [sp, #140]	; 0x8c
    18e0:	mov	r3, #0
    18e4:	str	r3, [sp, #168]	; 0xa8
    18e8:	mov	r3, #0
    18ec:	str	r3, [sp, #172]	; 0xac
    18f0:	mov	r3, #0
    18f4:	str	r3, [sp, #176]	; 0xb0
    18f8:	mov	ip, #0
    18fc:	str	ip, [sp, #160]	; 0xa0
    1900:	add	r0, sp, #136	; 0x88
    1904:	mov	r1, #31
    1908:	ldr	r2, [pc, #740]	; 1bf4 <read_VXR+0x850>
    190c:	mov	r3, #56	; 0x38
    1910:	bl	0 <coda_inflateInit2_>
    1914:	cmp	r0, #0
    1918:	beq	194c <read_VXR+0x5a8>
    191c:	mvn	r0, #21
    1920:	ldr	r1, [pc, #736]	; 1c08 <read_VXR+0x864>
    1924:	bl	0 <coda_set_error>
    1928:	ldr	r1, [sp, #160]	; 0xa0
    192c:	cmp	r1, #0
    1930:	beq	193c <read_VXR+0x598>
    1934:	ldr	r0, [pc, #728]	; 1c14 <read_VXR+0x870>
    1938:	bl	0 <coda_add_error_message>
    193c:	mov	r0, r5
    1940:	bl	0 <free>
    1944:	mvn	r0, #0
    1948:	b	1b68 <read_VXR+0x7c4>
    194c:	str	r5, [sp, #136]	; 0x88
    1950:	ldr	ip, [sp, #128]	; 0x80
    1954:	str	ip, [sp, #140]	; 0x8c
    1958:	ldr	r0, [sl, #20]
    195c:	cmp	r6, r0
    1960:	blt	196c <read_VXR+0x5c8>
    1964:	sub	r6, r0, #1
    1968:	mov	fp, #1
    196c:	ldr	r0, [sl, #24]
    1970:	mul	r2, r7, r0
    1974:	ldr	r3, [sl, #28]
    1978:	ldr	ip, [sl, #40]	; 0x28
    197c:	mla	r1, r2, r3, ip
    1980:	str	r1, [sp, #148]	; 0x94
    1984:	sub	r1, r6, r7
    1988:	add	ip, r1, #1
    198c:	mul	r0, ip, r0
    1990:	mul	r0, r0, r3
    1994:	str	r0, [sp, #152]	; 0x98
    1998:	add	r0, sp, #136	; 0x88
    199c:	mov	r1, #4
    19a0:	bl	0 <coda_inflate>
    19a4:	mov	r4, r0
    19a8:	cmn	r4, #2
    19ac:	bne	19c4 <read_VXR+0x620>
    19b0:	ldr	r0, [pc, #596]	; 1c0c <read_VXR+0x868>
    19b4:	ldr	r1, [pc, #560]	; 1bec <read_VXR+0x848>
    19b8:	movw	r2, #687	; 0x2af
    19bc:	ldr	r3, [pc, #576]	; 1c04 <read_VXR+0x860>
    19c0:	bl	0 <__assert_fail>
    19c4:	cmp	r4, #0
    19c8:	bge	1a70 <read_VXR+0x6cc>
    19cc:	mov	r2, #0
    19d0:	cmn	r4, #5
    19d4:	moveq	r2, fp
    19d8:	movne	r2, r2
    19dc:	eor	r1, r2, #1
    19e0:	cmp	r1, #0
    19e4:	beq	1a70 <read_VXR+0x6cc>
    19e8:	mov	r1, r4
    19ec:	cmp	r1, #2
    19f0:	beq	1a38 <read_VXR+0x694>
    19f4:	cmn	r1, #4
    19f8:	beq	1a28 <read_VXR+0x684>
    19fc:	cmn	r1, #3
    1a00:	beq	1a38 <read_VXR+0x694>
    1a04:	mvn	r0, #21
    1a08:	ldr	r1, [pc, #472]	; 1be8 <read_VXR+0x844>
    1a0c:	bl	0 <coda_set_error>
    1a10:	ldr	r1, [sp, #160]	; 0xa0
    1a14:	cmp	r1, #0
    1a18:	beq	1a58 <read_VXR+0x6b4>
    1a1c:	ldr	r0, [pc, #496]	; 1c14 <read_VXR+0x870>
    1a20:	bl	0 <coda_add_error_message>
    1a24:	b	1a58 <read_VXR+0x6b4>
    1a28:	mvn	r0, #0
    1a2c:	mov	r1, #0
    1a30:	bl	0 <coda_set_error>
    1a34:	b	1a58 <read_VXR+0x6b4>
    1a38:	mvn	r0, #21
    1a3c:	ldr	r1, [pc, #416]	; 1be4 <read_VXR+0x840>
    1a40:	bl	0 <coda_set_error>
    1a44:	ldr	r1, [sp, #160]	; 0xa0
    1a48:	cmp	r1, #0
    1a4c:	beq	1a58 <read_VXR+0x6b4>
    1a50:	ldr	r0, [pc, #444]	; 1c14 <read_VXR+0x870>
    1a54:	bl	0 <coda_add_error_message>
    1a58:	add	r0, sp, #136	; 0x88
    1a5c:	bl	0 <coda_inflateEnd>
    1a60:	mov	r0, r5
    1a64:	bl	0 <free>
    1a68:	mvn	r0, #0
    1a6c:	b	1b68 <read_VXR+0x7c4>
    1a70:	mov	r0, r5
    1a74:	bl	0 <free>
    1a78:	add	r0, sp, #136	; 0x88
    1a7c:	bl	0 <coda_inflateEnd>
    1a80:	cmp	r0, #0
    1a84:	beq	1ab0 <read_VXR+0x70c>
    1a88:	mvn	r0, #21
    1a8c:	ldr	r1, [pc, #380]	; 1c10 <read_VXR+0x86c>
    1a90:	bl	0 <coda_set_error>
    1a94:	ldr	r1, [sp, #160]	; 0xa0
    1a98:	cmp	r1, #0
    1a9c:	beq	1aa8 <read_VXR+0x704>
    1aa0:	ldr	r0, [pc, #364]	; 1c14 <read_VXR+0x870>
    1aa4:	bl	0 <coda_add_error_message>
    1aa8:	mvn	r0, #0
    1aac:	b	1b68 <read_VXR+0x7c4>
    1ab0:	mov	r1, r7
    1ab4:	cmp	r1, r6
    1ab8:	bgt	1b64 <read_VXR+0x7c0>
    1abc:	ldr	ip, [sl, #36]	; 0x24
    1ac0:	add	r0, ip, r1, lsl #3
    1ac4:	ldr	ip, [sl, #24]
    1ac8:	mul	r2, r1, ip
    1acc:	ldr	r3, [sl, #28]
    1ad0:	mul	r2, r2, r3
    1ad4:	asr	ip, r2, #31
    1ad8:	str	r2, [r0]
    1adc:	str	ip, [r0, #4]
    1ae0:	add	r1, r1, #1
    1ae4:	b	1ab4 <read_VXR+0x710>
    1ae8:	movw	r0, #65236	; 0xfed4
    1aec:	movt	r0, #65535	; 0xffff
    1af0:	ldr	r1, [pc, #264]	; 1c00 <read_VXR+0x85c>
    1af4:	bl	0 <coda_set_error>
    1af8:	mvn	r0, #0
    1afc:	b	1b68 <read_VXR+0x7c4>
    1b00:	ldr	r3, [sl, #20]
    1b04:	cmp	r6, r3
    1b08:	blt	1b10 <read_VXR+0x76c>
    1b0c:	sub	r6, r3, #1
    1b10:	mov	r1, r7
    1b14:	cmp	r1, r6
    1b18:	bgt	1b64 <read_VXR+0x7c0>
    1b1c:	ldr	r3, [sl, #36]	; 0x24
    1b20:	add	fp, r3, r1, lsl #3
    1b24:	mov	r0, #0
    1b28:	mov	r3, #12
    1b2c:	adds	r2, r4, r3
    1b30:	adc	r3, r5, r0
    1b34:	sub	r0, r1, r7
    1b38:	ldr	ip, [sl, #24]
    1b3c:	mul	ip, r0, ip
    1b40:	ldr	r0, [sl, #28]
    1b44:	mul	ip, ip, r0
    1b48:	asr	r0, ip, #31
    1b4c:	adds	r2, r2, ip
    1b50:	adc	r3, r3, r0
    1b54:	str	r2, [fp]
    1b58:	str	r3, [fp, #4]
    1b5c:	add	r1, r1, #1
    1b60:	b	1b14 <read_VXR+0x770>
    1b64:	mov	r0, #0
    1b68:	cmp	r0, #0
    1b6c:	beq	1b78 <read_VXR+0x7d4>
    1b70:	mvn	r0, #0
    1b74:	b	1bb8 <read_VXR+0x814>
    1b78:	add	r9, r9, #1
    1b7c:	b	1578 <read_VXR+0x1d4>
    1b80:	ldr	r2, [sp, #112]	; 0x70
    1b84:	ldr	r3, [sp, #116]	; 0x74
    1b88:	ldr	ip, [sp, #44]	; 0x2c
    1b8c:	str	ip, [sp, #4]
    1b90:	ldr	ip, [sp, #40]	; 0x28
    1b94:	str	ip, [sp]
    1b98:	mov	r1, sl
    1b9c:	mov	r0, r8
    1ba0:	bl	13a4 <read_VXR>
    1ba4:	cmp	r0, #0
    1ba8:	beq	1bb4 <read_VXR+0x810>
    1bac:	mvn	r0, #0
    1bb0:	b	1bb8 <read_VXR+0x814>
    1bb4:	mov	r0, #0
    1bb8:	ldr	r4, [sp, #48]	; 0x30
    1bbc:	ldr	r5, [sp, #52]	; 0x34
    1bc0:	ldr	r6, [sp, #56]	; 0x38
    1bc4:	ldr	r7, [sp, #60]	; 0x3c
    1bc8:	ldr	r8, [sp, #64]	; 0x40
    1bcc:	ldr	r9, [sp, #68]	; 0x44
    1bd0:	ldr	sl, [sp, #72]	; 0x48
    1bd4:	ldr	fp, [sp, #76]	; 0x4c
    1bd8:	ldr	lr, [sp, #16]
    1bdc:	add	sp, sp, #192	; 0xc0
    1be0:	bx	lr
    1be4:	.word	0x000002ae
    1be8:	.word	0x000001bc
    1bec:	.word	0x0000067b
    1bf0:	.word	0x00000739
    1bf4:	.word	0x00000180
    1bf8:	.word	0x00000229
    1bfc:	.word	0x0000064c
    1c00:	.word	0x00000704
    1c04:	.word	0x000008bf
    1c08:	.word	0x000004f3
    1c0c:	.word	0x000005d3
    1c10:	.word	0x00000621
    1c14:	.word	0x00000223

00001c18 <read_VDR>:
    1c18:	mov	ip, sp
    1c1c:	sub	sp, sp, #472	; 0x1d8
    1c20:	str	ip, [sp, #24]
    1c24:	str	lr, [sp, #28]
    1c28:	str	r4, [sp, #32]
    1c2c:	str	r5, [sp, #36]	; 0x24
    1c30:	str	r6, [sp, #40]	; 0x28
    1c34:	str	r7, [sp, #44]	; 0x2c
    1c38:	str	r8, [sp, #48]	; 0x30
    1c3c:	str	r9, [sp, #52]	; 0x34
    1c40:	str	sl, [sp, #56]	; 0x38
    1c44:	str	fp, [sp, #60]	; 0x3c
    1c48:	ldr	r4, [ip]
    1c4c:	mov	r7, r3
    1c50:	mov	r5, r2
    1c54:	mov	r6, r0
    1c58:	mov	ip, r5
    1c5c:	mov	r1, r7
    1c60:	orr	r0, r1, ip
    1c64:	cmp	r0, #0
    1c68:	bne	1c74 <read_VDR+0x5c>
    1c6c:	mov	r0, #0
    1c70:	b	2538 <read_VDR+0x920>
    1c74:	ldr	r0, [r6, #52]	; 0x34
    1c78:	mov	ip, #0
    1c7c:	mov	r3, #8
    1c80:	adds	r2, r5, r3
    1c84:	adc	r3, r7, ip
    1c88:	mov	r1, #0
    1c8c:	mov	ip, #4
    1c90:	add	r9, sp, #68	; 0x44
    1c94:	str	r9, [sp, #8]
    1c98:	str	r1, [sp, #4]
    1c9c:	str	ip, [sp]
    1ca0:	bl	0 <read_bytes>
    1ca4:	cmp	r0, #0
    1ca8:	bge	1cb4 <read_VDR+0x9c>
    1cac:	mvn	r0, #0
    1cb0:	b	2538 <read_VDR+0x920>
    1cb4:	add	r0, sp, #68	; 0x44
    1cb8:	bl	1f4 <swap4>
    1cbc:	cmp	r4, #0
    1cc0:	bne	1ce8 <read_VDR+0xd0>
    1cc4:	ldr	r2, [sp, #68]	; 0x44
    1cc8:	cmp	r2, #3
    1ccc:	beq	1d0c <read_VDR+0xf4>
    1cd0:	movw	r0, #65236	; 0xfed4
    1cd4:	movt	r0, #65535	; 0xffff
    1cd8:	ldr	r1, [pc, #2200]	; 2578 <read_VDR+0x960>
    1cdc:	bl	0 <coda_set_error>
    1ce0:	mvn	r0, #0
    1ce4:	b	2538 <read_VDR+0x920>
    1ce8:	ldr	r2, [sp, #68]	; 0x44
    1cec:	cmp	r2, #8
    1cf0:	beq	1d0c <read_VDR+0xf4>
    1cf4:	movw	r0, #65236	; 0xfed4
    1cf8:	movt	r0, #65535	; 0xffff
    1cfc:	ldr	r1, [pc, #2148]	; 2568 <read_VDR+0x950>
    1d00:	bl	0 <coda_set_error>
    1d04:	mvn	r0, #0
    1d08:	b	2538 <read_VDR+0x920>
    1d0c:	ldr	r0, [r6, #52]	; 0x34
    1d10:	mov	ip, #0
    1d14:	mov	r3, #12
    1d18:	adds	r2, r5, r3
    1d1c:	adc	r3, r7, ip
    1d20:	mov	r1, #0
    1d24:	mov	ip, #8
    1d28:	add	r9, sp, #104	; 0x68
    1d2c:	str	r9, [sp, #8]
    1d30:	str	r1, [sp, #4]
    1d34:	str	ip, [sp]
    1d38:	bl	0 <read_bytes>
    1d3c:	cmp	r0, #0
    1d40:	bge	1d4c <read_VDR+0x134>
    1d44:	mvn	r0, #0
    1d48:	b	2538 <read_VDR+0x920>
    1d4c:	ldr	r0, [r6, #52]	; 0x34
    1d50:	mov	r2, #0
    1d54:	mov	r1, #20
    1d58:	adds	lr, r5, r1
    1d5c:	adc	r3, r7, r2
    1d60:	mov	r2, lr
    1d64:	mov	r1, #0
    1d68:	mov	ip, #4
    1d6c:	add	r9, sp, #72	; 0x48
    1d70:	str	r9, [sp, #8]
    1d74:	str	r1, [sp, #4]
    1d78:	str	ip, [sp]
    1d7c:	bl	0 <read_bytes>
    1d80:	cmp	r0, #0
    1d84:	bge	1d90 <read_VDR+0x178>
    1d88:	mvn	r0, #0
    1d8c:	b	2538 <read_VDR+0x920>
    1d90:	ldr	r0, [r6, #52]	; 0x34
    1d94:	mov	r2, #0
    1d98:	mov	r1, #24
    1d9c:	adds	lr, r5, r1
    1da0:	adc	r3, r7, r2
    1da4:	mov	r2, lr
    1da8:	mov	ip, #0
    1dac:	mov	r1, #4
    1db0:	add	r9, sp, #76	; 0x4c
    1db4:	str	r9, [sp, #8]
    1db8:	str	ip, [sp, #4]
    1dbc:	str	r1, [sp]
    1dc0:	bl	0 <read_bytes>
    1dc4:	cmp	r0, #0
    1dc8:	bge	1dd4 <read_VDR+0x1bc>
    1dcc:	mvn	r0, #0
    1dd0:	b	2538 <read_VDR+0x920>
    1dd4:	ldr	r0, [r6, #52]	; 0x34
    1dd8:	mov	r1, #0
    1ddc:	mov	ip, #28
    1de0:	adds	r2, r5, ip
    1de4:	adc	r3, r7, r1
    1de8:	mov	ip, #0
    1dec:	mov	r1, #8
    1df0:	add	r9, sp, #112	; 0x70
    1df4:	str	r9, [sp, #8]
    1df8:	str	ip, [sp, #4]
    1dfc:	str	r1, [sp]
    1e00:	bl	0 <read_bytes>
    1e04:	cmp	r0, #0
    1e08:	bge	1e14 <read_VDR+0x1fc>
    1e0c:	mvn	r0, #0
    1e10:	b	2538 <read_VDR+0x920>
    1e14:	ldr	r0, [r6, #52]	; 0x34
    1e18:	mov	r2, #0
    1e1c:	mov	r1, #36	; 0x24
    1e20:	adds	lr, r5, r1
    1e24:	adc	r3, r7, r2
    1e28:	mov	r2, lr
    1e2c:	mov	r1, #0
    1e30:	mov	ip, #8
    1e34:	add	r9, sp, #120	; 0x78
    1e38:	str	r9, [sp, #8]
    1e3c:	str	r1, [sp, #4]
    1e40:	str	ip, [sp]
    1e44:	bl	0 <read_bytes>
    1e48:	cmp	r0, #0
    1e4c:	bge	1e58 <read_VDR+0x240>
    1e50:	mvn	r0, #0
    1e54:	b	2538 <read_VDR+0x920>
    1e58:	ldr	r0, [r6, #52]	; 0x34
    1e5c:	mov	r1, #0
    1e60:	mov	ip, #44	; 0x2c
    1e64:	adds	r2, r5, ip
    1e68:	adc	r3, r7, r1
    1e6c:	mov	ip, #0
    1e70:	mov	r1, #4
    1e74:	add	r9, sp, #80	; 0x50
    1e78:	str	r9, [sp, #8]
    1e7c:	str	ip, [sp, #4]
    1e80:	str	r1, [sp]
    1e84:	bl	0 <read_bytes>
    1e88:	cmp	r0, #0
    1e8c:	bge	1e98 <read_VDR+0x280>
    1e90:	mvn	r0, #0
    1e94:	b	2538 <read_VDR+0x920>
    1e98:	ldr	r0, [r6, #52]	; 0x34
    1e9c:	mov	ip, #0
    1ea0:	mov	r3, #48	; 0x30
    1ea4:	adds	r2, r5, r3
    1ea8:	adc	r3, r7, ip
    1eac:	mov	r1, #0
    1eb0:	mov	ip, #4
    1eb4:	add	r9, sp, #84	; 0x54
    1eb8:	str	r9, [sp, #8]
    1ebc:	str	r1, [sp, #4]
    1ec0:	str	ip, [sp]
    1ec4:	bl	0 <read_bytes>
    1ec8:	cmp	r0, #0
    1ecc:	bge	1ed8 <read_VDR+0x2c0>
    1ed0:	mvn	r0, #0
    1ed4:	b	2538 <read_VDR+0x920>
    1ed8:	ldr	r0, [r6, #52]	; 0x34
    1edc:	mov	r2, #0
    1ee0:	mov	r1, #64	; 0x40
    1ee4:	adds	lr, r5, r1
    1ee8:	adc	r3, r7, r2
    1eec:	mov	r2, lr
    1ef0:	mov	r1, #0
    1ef4:	mov	ip, #4
    1ef8:	add	r9, sp, #88	; 0x58
    1efc:	str	r9, [sp, #8]
    1f00:	str	r1, [sp, #4]
    1f04:	str	ip, [sp]
    1f08:	bl	0 <read_bytes>
    1f0c:	cmp	r0, #0
    1f10:	bge	1f1c <read_VDR+0x304>
    1f14:	mvn	r0, #0
    1f18:	b	2538 <read_VDR+0x920>
    1f1c:	ldr	r0, [r6, #52]	; 0x34
    1f20:	mov	r3, #0
    1f24:	mov	r2, #68	; 0x44
    1f28:	adds	r2, r5, r2
    1f2c:	adc	r3, r7, r3
    1f30:	mov	ip, #0
    1f34:	mov	r1, #4
    1f38:	add	r9, sp, #92	; 0x5c
    1f3c:	str	r9, [sp, #8]
    1f40:	str	ip, [sp, #4]
    1f44:	str	r1, [sp]
    1f48:	bl	0 <read_bytes>
    1f4c:	cmp	r0, #0
    1f50:	bge	1f5c <read_VDR+0x344>
    1f54:	mvn	r0, #0
    1f58:	b	2538 <read_VDR+0x920>
    1f5c:	ldr	r0, [r6, #52]	; 0x34
    1f60:	mov	r2, #0
    1f64:	mov	r1, #72	; 0x48
    1f68:	adds	lr, r5, r1
    1f6c:	adc	r3, r7, r2
    1f70:	mov	r2, lr
    1f74:	mov	r1, #0
    1f78:	mov	ip, #8
    1f7c:	add	r9, sp, #128	; 0x80
    1f80:	str	r9, [sp, #8]
    1f84:	str	r1, [sp, #4]
    1f88:	str	ip, [sp]
    1f8c:	bl	0 <read_bytes>
    1f90:	cmp	r0, #0
    1f94:	bge	1fa0 <read_VDR+0x388>
    1f98:	mvn	r0, #0
    1f9c:	b	2538 <read_VDR+0x920>
    1fa0:	ldr	r0, [r6, #52]	; 0x34
    1fa4:	mov	r3, #0
    1fa8:	mov	r2, #80	; 0x50
    1fac:	adds	r2, r5, r2
    1fb0:	adc	r3, r7, r3
    1fb4:	mov	r1, #0
    1fb8:	mov	ip, #4
    1fbc:	add	r9, sp, #96	; 0x60
    1fc0:	str	r9, [sp, #8]
    1fc4:	str	r1, [sp, #4]
    1fc8:	str	ip, [sp]
    1fcc:	bl	0 <read_bytes>
    1fd0:	cmp	r0, #0
    1fd4:	bge	1fe0 <read_VDR+0x3c8>
    1fd8:	mvn	r0, #0
    1fdc:	b	2538 <read_VDR+0x920>
    1fe0:	ldr	r0, [r6, #52]	; 0x34
    1fe4:	mov	r2, #0
    1fe8:	mov	r1, #84	; 0x54
    1fec:	adds	lr, r5, r1
    1ff0:	adc	r3, r7, r2
    1ff4:	mov	r2, lr
    1ff8:	mov	ip, #0
    1ffc:	mov	r1, #256	; 0x100
    2000:	add	r9, sp, #200	; 0xc8
    2004:	str	r9, [sp, #8]
    2008:	str	ip, [sp, #4]
    200c:	str	r1, [sp]
    2010:	bl	0 <read_bytes>
    2014:	cmp	r0, #0
    2018:	bge	2024 <read_VDR+0x40c>
    201c:	mvn	r0, #0
    2020:	b	2538 <read_VDR+0x920>
    2024:	mov	r2, #0
    2028:	strb	r2, [sp, #456]	; 0x1c8
    202c:	add	r0, sp, #200	; 0xc8
    2030:	bl	31c <rtrim>
    2034:	add	r0, sp, #104	; 0x68
    2038:	bl	260 <swap8>
    203c:	add	r0, sp, #72	; 0x48
    2040:	bl	1f4 <swap4>
    2044:	add	r0, sp, #76	; 0x4c
    2048:	bl	1f4 <swap4>
    204c:	add	r0, sp, #112	; 0x70
    2050:	bl	260 <swap8>
    2054:	add	r0, sp, #120	; 0x78
    2058:	bl	260 <swap8>
    205c:	add	r0, sp, #80	; 0x50
    2060:	bl	1f4 <swap4>
    2064:	add	r0, sp, #84	; 0x54
    2068:	bl	1f4 <swap4>
    206c:	add	r0, sp, #88	; 0x58
    2070:	bl	1f4 <swap4>
    2074:	add	r0, sp, #92	; 0x5c
    2078:	bl	1f4 <swap4>
    207c:	add	r0, sp, #128	; 0x80
    2080:	bl	260 <swap8>
    2084:	add	r0, sp, #96	; 0x60
    2088:	bl	1f4 <swap4>
    208c:	ldr	r0, [sp, #72]	; 0x48
    2090:	cmp	r0, #32
    2094:	bne	20ac <read_VDR+0x494>
    2098:	mvn	r0, #199	; 0xc7
    209c:	ldr	r1, [pc, #1244]	; 2580 <read_VDR+0x968>
    20a0:	bl	0 <coda_set_error>
    20a4:	mvn	r0, #0
    20a8:	b	2538 <read_VDR+0x920>
    20ac:	cmp	r4, #0
    20b0:	beq	21e0 <read_VDR+0x5c8>
    20b4:	ldr	r0, [r6, #52]	; 0x34
    20b8:	mov	r2, #0
    20bc:	mov	r1, #340	; 0x154
    20c0:	adds	lr, r5, r1
    20c4:	adc	r3, r7, r2
    20c8:	mov	r2, lr
    20cc:	mov	r1, #0
    20d0:	mov	ip, #4
    20d4:	add	r9, sp, #100	; 0x64
    20d8:	str	r9, [sp, #8]
    20dc:	str	r1, [sp, #4]
    20e0:	str	ip, [sp]
    20e4:	bl	0 <read_bytes>
    20e8:	cmp	r0, #0
    20ec:	bge	20f8 <read_VDR+0x4e0>
    20f0:	mvn	r0, #0
    20f4:	b	2538 <read_VDR+0x920>
    20f8:	add	r0, sp, #100	; 0x64
    20fc:	bl	1f4 <swap4>
    2100:	ldr	r3, [sp, #100]	; 0x64
    2104:	cmp	r3, #0
    2108:	bge	2128 <read_VDR+0x510>
    210c:	movw	r0, #65236	; 0xfed4
    2110:	movt	r0, #65535	; 0xffff
    2114:	ldr	r1, [pc, #1104]	; 256c <read_VDR+0x954>
    2118:	add	r2, sp, #200	; 0xc8
    211c:	bl	0 <coda_set_error>
    2120:	mvn	r0, #0
    2124:	b	2538 <read_VDR+0x920>
    2128:	cmp	r3, #8
    212c:	ble	214c <read_VDR+0x534>
    2130:	movw	r0, #65236	; 0xfed4
    2134:	movt	r0, #65535	; 0xffff
    2138:	ldr	r1, [pc, #1060]	; 2564 <read_VDR+0x94c>
    213c:	add	r2, sp, #200	; 0xc8
    2140:	bl	0 <coda_set_error>
    2144:	mvn	r0, #0
    2148:	b	2538 <read_VDR+0x920>
    214c:	mov	r1, #0
    2150:	mov	r0, #344	; 0x158
    2154:	adds	r5, r5, r0
    2158:	adc	r7, r7, r1
    215c:	cmp	r3, #0
    2160:	ble	21e8 <read_VDR+0x5d0>
    2164:	mov	r8, #0
    2168:	ldr	ip, [sp, #100]	; 0x64
    216c:	cmp	r8, ip
    2170:	bge	21cc <read_VDR+0x5b4>
    2174:	ldr	r0, [r6, #52]	; 0x34
    2178:	lsl	ip, r8, #2
    217c:	asr	r1, ip, #31
    2180:	adds	r2, r5, ip
    2184:	adc	r3, r7, r1
    2188:	mov	r1, #0
    218c:	mov	ip, #4
    2190:	add	r9, sp, #168	; 0xa8
    2194:	add	sl, r9, r8, lsl #2
    2198:	str	sl, [sp, #8]
    219c:	str	r1, [sp, #4]
    21a0:	str	ip, [sp]
    21a4:	bl	0 <read_bytes>
    21a8:	cmp	r0, #0
    21ac:	bge	21b8 <read_VDR+0x5a0>
    21b0:	mvn	r0, #0
    21b4:	b	2538 <read_VDR+0x920>
    21b8:	add	r0, sp, #168	; 0xa8
    21bc:	add	r0, r0, r8, lsl #2
    21c0:	bl	1f4 <swap4>
    21c4:	add	r8, r8, #1
    21c8:	b	2168 <read_VDR+0x550>
    21cc:	lsl	r0, ip, #2
    21d0:	asr	r1, r0, #31
    21d4:	adds	r5, r5, r0
    21d8:	adc	r7, r7, r1
    21dc:	b	21e8 <read_VDR+0x5d0>
    21e0:	ldr	ip, [r6, #80]	; 0x50
    21e4:	str	ip, [sp, #100]	; 0x64
    21e8:	ldr	ip, [sp, #100]	; 0x64
    21ec:	cmp	ip, #0
    21f0:	ble	2270 <read_VDR+0x658>
    21f4:	mov	r8, #0
    21f8:	ldr	r2, [sp, #100]	; 0x64
    21fc:	cmp	r8, r2
    2200:	bge	2260 <read_VDR+0x648>
    2204:	ldr	r0, [r6, #52]	; 0x34
    2208:	lsl	r1, r8, #2
    220c:	asr	r2, r1, #31
    2210:	adds	lr, r5, r1
    2214:	adc	r3, r7, r2
    2218:	mov	r2, lr
    221c:	mov	r9, #0
    2220:	mov	ip, #4
    2224:	add	r1, sp, #136	; 0x88
    2228:	add	sl, r1, r8, lsl #2
    222c:	str	sl, [sp, #8]
    2230:	str	r9, [sp, #4]
    2234:	str	ip, [sp]
    2238:	bl	0 <read_bytes>
    223c:	cmp	r0, #0
    2240:	bge	224c <read_VDR+0x634>
    2244:	mvn	r0, #0
    2248:	b	2538 <read_VDR+0x920>
    224c:	add	r0, sp, #136	; 0x88
    2250:	add	r0, r0, r8, lsl #2
    2254:	bl	1f4 <swap4>
    2258:	add	r8, r8, #1
    225c:	b	21f8 <read_VDR+0x5e0>
    2260:	lsl	r2, r2, #2
    2264:	asr	r3, r2, #31
    2268:	adds	r1, r5, r2
    226c:	adc	r0, r7, r3
    2270:	ldr	r3, [sp, #80]	; 0x50
    2274:	and	r8, r3, #1
    2278:	and	r1, r3, #4
    227c:	cmp	r8, #0
    2280:	bne	22b0 <read_VDR+0x698>
    2284:	ldr	r3, [sp, #76]	; 0x4c
    2288:	cmp	r3, #0
    228c:	beq	22b0 <read_VDR+0x698>
    2290:	movw	r0, #65236	; 0xfed4
    2294:	movt	r0, #65535	; 0xffff
    2298:	ldr	r1, [pc, #720]	; 2570 <read_VDR+0x958>
    229c:	add	r2, sp, #200	; 0xc8
    22a0:	add	r3, r3, #1
    22a4:	bl	0 <coda_set_error>
    22a8:	mvn	r0, #0
    22ac:	b	2538 <read_VDR+0x920>
    22b0:	cmp	r1, #0
    22b4:	beq	23d8 <read_VDR+0x7c0>
    22b8:	ldr	r2, [sp, #128]	; 0x80
    22bc:	ldr	r3, [sp, #132]	; 0x84
    22c0:	mvn	r0, r3
    22c4:	mvn	ip, r2
    22c8:	orr	ip, r0, ip
    22cc:	cmp	ip, #0
    22d0:	beq	23d8 <read_VDR+0x7c0>
    22d4:	mov	r7, r3
    22d8:	mov	r5, r2
    22dc:	orr	r1, r3, r2
    22e0:	cmp	r1, #0
    22e4:	bne	22f0 <read_VDR+0x6d8>
    22e8:	mov	r1, #0
    22ec:	b	23c8 <read_VDR+0x7b0>
    22f0:	ldr	r0, [r6, #52]	; 0x34
    22f4:	mov	r3, #0
    22f8:	mov	r2, #8
    22fc:	adds	r2, r5, r2
    2300:	adc	r3, r7, r3
    2304:	mov	r1, #0
    2308:	mov	ip, #4
    230c:	add	sl, sp, #464	; 0x1d0
    2310:	str	sl, [sp, #8]
    2314:	str	r1, [sp, #4]
    2318:	str	ip, [sp]
    231c:	bl	0 <read_bytes>
    2320:	cmp	r0, #0
    2324:	bge	2330 <read_VDR+0x718>
    2328:	mvn	r1, #0
    232c:	b	23c8 <read_VDR+0x7b0>
    2330:	add	r0, sp, #464	; 0x1d0
    2334:	bl	1f4 <swap4>
    2338:	ldr	r2, [sp, #464]	; 0x1d0
    233c:	cmp	r2, #11
    2340:	beq	235c <read_VDR+0x744>
    2344:	movw	r0, #65236	; 0xfed4
    2348:	movt	r0, #65535	; 0xffff
    234c:	ldr	r1, [pc, #560]	; 2584 <read_VDR+0x96c>
    2350:	bl	0 <coda_set_error>
    2354:	mvn	r1, #0
    2358:	b	23c8 <read_VDR+0x7b0>
    235c:	ldr	r0, [r6, #52]	; 0x34
    2360:	mov	ip, #0
    2364:	mov	r3, #12
    2368:	adds	r2, r5, r3
    236c:	adc	r3, r7, ip
    2370:	mov	r1, #0
    2374:	mov	ip, #4
    2378:	add	r7, sp, #468	; 0x1d4
    237c:	str	r7, [sp, #8]
    2380:	str	r1, [sp, #4]
    2384:	str	ip, [sp]
    2388:	bl	0 <read_bytes>
    238c:	cmp	r0, #0
    2390:	bge	239c <read_VDR+0x784>
    2394:	mvn	r1, #0
    2398:	b	23c8 <read_VDR+0x7b0>
    239c:	add	r0, sp, #468	; 0x1d4
    23a0:	bl	1f4 <swap4>
    23a4:	ldr	r2, [sp, #468]	; 0x1d4
    23a8:	cmp	r2, #5
    23ac:	beq	23c4 <read_VDR+0x7ac>
    23b0:	mvn	r0, #199	; 0xc7
    23b4:	ldr	r1, [pc, #440]	; 2574 <read_VDR+0x95c>
    23b8:	bl	0 <coda_set_error>
    23bc:	mvn	r1, #0
    23c0:	b	23c8 <read_VDR+0x7b0>
    23c4:	mov	r1, #0
    23c8:	cmp	r1, #0
    23cc:	beq	23d8 <read_VDR+0x7c0>
    23d0:	mvn	r0, #0
    23d4:	b	2538 <read_VDR+0x920>
    23d8:	ldr	r3, [r6, #20]
    23dc:	ldr	r3, [r3, #16]
    23e0:	ldr	r2, [sp, #92]	; 0x5c
    23e4:	cmp	r3, r2
    23e8:	beq	2404 <read_VDR+0x7ec>
    23ec:	movw	r0, #65236	; 0xfed4
    23f0:	movt	r0, #65535	; 0xffff
    23f4:	ldr	r1, [pc, #384]	; 257c <read_VDR+0x964>
    23f8:	bl	0 <coda_set_error>
    23fc:	mvn	r0, #0
    2400:	b	2538 <read_VDR+0x920>
    2404:	cmp	r4, #0
    2408:	bne	2458 <read_VDR+0x840>
    240c:	ldr	r0, [sp, #72]	; 0x48
    2410:	ldr	r1, [sp, #76]	; 0x4c
    2414:	ldr	r3, [sp, #100]	; 0x64
    2418:	add	sl, r6, #84	; 0x54
    241c:	add	ip, sp, #136	; 0x88
    2420:	ldr	fp, [r6, #72]	; 0x48
    2424:	ldr	r7, [sp, #88]	; 0x58
    2428:	ldr	r9, [sp, #84]	; 0x54
    242c:	add	r2, sp, #64	; 0x40
    2430:	str	r2, [sp, #20]
    2434:	str	r9, [sp, #16]
    2438:	str	r7, [sp, #12]
    243c:	str	fp, [sp, #8]
    2440:	str	ip, [sp, #4]
    2444:	str	sl, [sp]
    2448:	mov	r2, r8
    244c:	bl	0 <coda_cdf_variable_new>
    2450:	mov	r5, r0
    2454:	b	24a0 <read_VDR+0x888>
    2458:	ldr	r0, [sp, #72]	; 0x48
    245c:	ldr	r1, [sp, #76]	; 0x4c
    2460:	ldr	r3, [sp, #100]	; 0x64
    2464:	add	fp, sp, #168	; 0xa8
    2468:	add	r9, sp, #136	; 0x88
    246c:	ldr	ip, [r6, #72]	; 0x48
    2470:	ldr	r2, [sp, #88]	; 0x58
    2474:	ldr	r7, [sp, #84]	; 0x54
    2478:	add	sl, sp, #64	; 0x40
    247c:	str	sl, [sp, #20]
    2480:	str	r7, [sp, #16]
    2484:	str	r2, [sp, #12]
    2488:	str	ip, [sp, #8]
    248c:	str	r9, [sp, #4]
    2490:	str	fp, [sp]
    2494:	mov	r2, r8
    2498:	bl	0 <coda_cdf_variable_new>
    249c:	mov	r5, r0
    24a0:	cmp	r5, #0
    24a4:	bne	24b0 <read_VDR+0x898>
    24a8:	mvn	r0, #0
    24ac:	b	2538 <read_VDR+0x920>
    24b0:	ldr	r0, [r6, #20]
    24b4:	add	r1, sp, #200	; 0xc8
    24b8:	mov	r3, #1
    24bc:	mov	r2, r5
    24c0:	bl	0 <coda_mem_record_add_field>
    24c4:	cmp	r0, #0
    24c8:	beq	24dc <read_VDR+0x8c4>
    24cc:	mov	r0, r5
    24d0:	bl	0 <coda_cdf_type_delete>
    24d4:	mvn	r0, #0
    24d8:	b	2538 <read_VDR+0x920>
    24dc:	ldr	r1, [sp, #64]	; 0x40
    24e0:	ldr	r2, [sp, #112]	; 0x70
    24e4:	ldr	r3, [sp, #116]	; 0x74
    24e8:	mov	r0, #0
    24ec:	mvn	ip, #0
    24f0:	str	ip, [sp, #4]
    24f4:	str	r0, [sp]
    24f8:	mov	r0, r6
    24fc:	bl	13a4 <read_VXR>
    2500:	cmp	r0, #0
    2504:	beq	2510 <read_VDR+0x8f8>
    2508:	mvn	r0, #0
    250c:	b	2538 <read_VDR+0x920>
    2510:	ldr	r2, [sp, #104]	; 0x68
    2514:	ldr	r3, [sp, #108]	; 0x6c
    2518:	str	r4, [sp]
    251c:	mov	r0, r6
    2520:	bl	1c18 <read_VDR>
    2524:	cmp	r0, #0
    2528:	beq	2534 <read_VDR+0x91c>
    252c:	mvn	r0, #0
    2530:	b	2538 <read_VDR+0x920>
    2534:	mov	r0, #0
    2538:	ldr	r4, [sp, #32]
    253c:	ldr	r5, [sp, #36]	; 0x24
    2540:	ldr	r6, [sp, #40]	; 0x28
    2544:	ldr	r7, [sp, #44]	; 0x2c
    2548:	ldr	r8, [sp, #48]	; 0x30
    254c:	ldr	r9, [sp, #52]	; 0x34
    2550:	ldr	sl, [sp, #56]	; 0x38
    2554:	ldr	fp, [sp, #60]	; 0x3c
    2558:	ldr	lr, [sp, #28]
    255c:	add	sp, sp, #472	; 0x1d8
    2560:	bx	lr
    2564:	.word	0x000006d3
    2568:	.word	0x00000186
    256c:	.word	0x0000006a
    2570:	.word	0x000002e5
    2574:	.word	0x00000035
    2578:	.word	0x0000059d
    257c:	.word	0x00000541
    2580:	.word	0x00000576
    2584:	.word	0x00000853

00002588 <coda_cdf_reopen>:
    2588:	mov	ip, sp
    258c:	sub	sp, sp, #184	; 0xb8
    2590:	str	ip, [sp, #12]
    2594:	str	lr, [sp, #16]
    2598:	str	r4, [sp, #24]
    259c:	str	r5, [sp, #28]
    25a0:	str	r6, [sp, #32]
    25a4:	str	r7, [sp, #36]	; 0x24
    25a8:	str	r8, [sp, #40]	; 0x28
    25ac:	str	r9, [sp, #44]	; 0x2c
    25b0:	str	sl, [sp, #48]	; 0x30
    25b4:	mov	r4, r0
    25b8:	mov	r0, #120	; 0x78
    25bc:	bl	0 <malloc>
    25c0:	mov	r5, r0
    25c4:	cmp	r5, #0
    25c8:	bne	25f8 <coda_cdf_reopen+0x70>
    25cc:	mvn	r0, #0
    25d0:	ldr	r1, [pc, #2332]	; 2ef4 <coda_cdf_reopen+0x96c>
    25d4:	mov	r2, #120	; 0x78
    25d8:	ldr	r3, [pc, #2312]	; 2ee8 <coda_cdf_reopen+0x960>
    25dc:	movw	ip, #1315	; 0x523
    25e0:	str	ip, [sp]
    25e4:	bl	0 <coda_set_error>
    25e8:	ldr	r0, [r4]
    25ec:	bl	0 <coda_close>
    25f0:	mvn	r0, #0
    25f4:	b	2ec0 <coda_cdf_reopen+0x938>
    25f8:	mov	ip, #0
    25fc:	str	ip, [r5]
    2600:	ldr	ip, [r4]
    2604:	ldr	r3, [ip, #8]
    2608:	ldr	ip, [ip, #12]
    260c:	str	r3, [r5, #8]
    2610:	str	ip, [r5, #12]
    2614:	mov	r2, #5
    2618:	str	r2, [r5, #16]
    261c:	mov	r2, #0
    2620:	str	r2, [r5, #20]
    2624:	mov	r2, #0
    2628:	str	r2, [r5, #24]
    262c:	mov	r2, #0
    2630:	str	r2, [r5, #28]
    2634:	mov	r0, #0
    2638:	str	r0, [r5, #32]
    263c:	mov	r3, #0
    2640:	mov	r2, #0
    2644:	str	r2, [r5, #40]	; 0x28
    2648:	str	r3, [r5, #44]	; 0x2c
    264c:	mov	r2, #0
    2650:	str	r2, [r5, #48]	; 0x30
    2654:	ldr	r1, [r4]
    2658:	str	r1, [r5, #52]	; 0x34
    265c:	ldr	r0, [r4]
    2660:	ldr	r0, [r0]
    2664:	bl	0 <strdup>
    2668:	str	r0, [r5]
    266c:	cmp	r0, #0
    2670:	bne	2698 <coda_cdf_reopen+0x110>
    2674:	mvn	r0, #0
    2678:	ldr	r1, [pc, #2200]	; 2f18 <coda_cdf_reopen+0x990>
    267c:	ldr	r2, [pc, #2148]	; 2ee8 <coda_cdf_reopen+0x960>
    2680:	movw	r3, #1335	; 0x537
    2684:	bl	0 <coda_set_error>
    2688:	mov	r0, r5
    268c:	bl	2f1c <coda_cdf_close>
    2690:	mvn	r0, #0
    2694:	b	2ec0 <coda_cdf_reopen+0x938>
    2698:	ldr	r0, [r5, #52]	; 0x34
    269c:	mov	r3, #0
    26a0:	mov	r2, #0
    26a4:	mov	ip, #0
    26a8:	mov	r1, #8
    26ac:	add	r7, sp, #56	; 0x38
    26b0:	str	r7, [sp, #8]
    26b4:	str	ip, [sp, #4]
    26b8:	str	r1, [sp]
    26bc:	bl	0 <read_bytes>
    26c0:	cmp	r0, #0
    26c4:	bge	26d8 <coda_cdf_reopen+0x150>
    26c8:	mov	r0, r5
    26cc:	bl	2f1c <coda_cdf_close>
    26d0:	mvn	r0, #0
    26d4:	b	2ec0 <coda_cdf_reopen+0x938>
    26d8:	add	r0, sp, #56	; 0x38
    26dc:	bl	1f4 <swap4>
    26e0:	add	r0, sp, #60	; 0x3c
    26e4:	bl	1f4 <swap4>
    26e8:	ldr	r1, [sp, #56]	; 0x38
    26ec:	movw	lr, #65535	; 0xffff
    26f0:	cmp	r1, lr
    26f4:	beq	2ea8 <coda_cdf_reopen+0x920>
    26f8:	movw	lr, #24578	; 0x6002
    26fc:	movt	lr, #52722	; 0xcdf2
    2700:	cmp	r1, lr
    2704:	beq	2ea8 <coda_cdf_reopen+0x920>
    2708:	ldr	r3, [sp, #60]	; 0x3c
    270c:	movw	lr, #1
    2710:	movt	lr, #52428	; 0xcccc
    2714:	cmp	r3, lr
    2718:	bne	2738 <coda_cdf_reopen+0x1b0>
    271c:	mvn	r0, #199	; 0xc7
    2720:	ldr	r1, [pc, #1992]	; 2ef0 <coda_cdf_reopen+0x968>
    2724:	bl	0 <coda_set_error>
    2728:	mov	r0, r5
    272c:	bl	2f1c <coda_cdf_close>
    2730:	mvn	r0, #0
    2734:	b	2ec0 <coda_cdf_reopen+0x938>
    2738:	movw	lr, #1
    273c:	movt	lr, #52723	; 0xcdf3
    2740:	cmp	r1, lr
    2744:	bne	2754 <coda_cdf_reopen+0x1cc>
    2748:	movw	lr, #65535	; 0xffff
    274c:	cmp	r3, lr
    2750:	beq	2768 <coda_cdf_reopen+0x1e0>
    2754:	ldr	r0, [pc, #1960]	; 2f04 <coda_cdf_reopen+0x97c>
    2758:	ldr	r1, [pc, #1928]	; 2ee8 <coda_cdf_reopen+0x960>
    275c:	movw	r2, #1362	; 0x552
    2760:	ldr	r3, [pc, #1952]	; 2f08 <coda_cdf_reopen+0x980>
    2764:	bl	0 <__assert_fail>
    2768:	mov	r0, #5
    276c:	bl	0 <coda_type_record_new>
    2770:	mov	r6, r0
    2774:	cmp	r6, #0
    2778:	bne	278c <coda_cdf_reopen+0x204>
    277c:	mov	r0, r5
    2780:	bl	2f1c <coda_cdf_close>
    2784:	mvn	r0, #0
    2788:	b	2ec0 <coda_cdf_reopen+0x938>
    278c:	mov	r1, #0
    2790:	mov	r0, r6
    2794:	bl	0 <coda_mem_record_new>
    2798:	str	r0, [r5, #20]
    279c:	cmp	r0, #0
    27a0:	bne	27bc <coda_cdf_reopen+0x234>
    27a4:	mov	r0, r5
    27a8:	bl	2f1c <coda_cdf_close>
    27ac:	mov	r0, r6
    27b0:	bl	0 <coda_type_release>
    27b4:	mvn	r0, #0
    27b8:	b	2ec0 <coda_cdf_reopen+0x938>
    27bc:	mov	r0, r6
    27c0:	bl	0 <coda_type_release>
    27c4:	ldr	r0, [r5, #52]	; 0x34
    27c8:	mov	r3, #0
    27cc:	mov	r2, #16
    27d0:	mov	ip, #0
    27d4:	mov	r1, #4
    27d8:	add	r7, sp, #64	; 0x40
    27dc:	str	r7, [sp, #8]
    27e0:	str	ip, [sp, #4]
    27e4:	str	r1, [sp]
    27e8:	bl	0 <read_bytes>
    27ec:	cmp	r0, #0
    27f0:	bge	27fc <coda_cdf_reopen+0x274>
    27f4:	mvn	ip, #0
    27f8:	b	2e84 <coda_cdf_reopen+0x8fc>
    27fc:	add	r0, sp, #64	; 0x40
    2800:	bl	1f4 <swap4>
    2804:	ldr	r2, [sp, #64]	; 0x40
    2808:	cmp	r2, #1
    280c:	beq	2828 <coda_cdf_reopen+0x2a0>
    2810:	movw	r0, #65236	; 0xfed4
    2814:	movt	r0, #65535	; 0xffff
    2818:	ldr	r1, [pc, #1740]	; 2eec <coda_cdf_reopen+0x964>
    281c:	bl	0 <coda_set_error>
    2820:	mvn	ip, #0
    2824:	b	2e84 <coda_cdf_reopen+0x8fc>
    2828:	ldr	r0, [r5, #52]	; 0x34
    282c:	mov	r3, #0
    2830:	mov	r2, #20
    2834:	mov	r1, #0
    2838:	mov	ip, #8
    283c:	add	r6, sp, #80	; 0x50
    2840:	str	r6, [sp, #8]
    2844:	str	r1, [sp, #4]
    2848:	str	ip, [sp]
    284c:	bl	0 <read_bytes>
    2850:	cmp	r0, #0
    2854:	bge	2860 <coda_cdf_reopen+0x2d8>
    2858:	mvn	ip, #0
    285c:	b	2e84 <coda_cdf_reopen+0x8fc>
    2860:	ldr	r0, [r5, #52]	; 0x34
    2864:	mov	r3, #0
    2868:	mov	r2, #28
    286c:	mov	r1, #0
    2870:	mov	ip, #4
    2874:	add	r7, r5, #56	; 0x38
    2878:	str	r7, [sp, #8]
    287c:	str	r1, [sp, #4]
    2880:	str	ip, [sp]
    2884:	bl	0 <read_bytes>
    2888:	cmp	r0, #0
    288c:	bge	2898 <coda_cdf_reopen+0x310>
    2890:	mvn	ip, #0
    2894:	b	2e84 <coda_cdf_reopen+0x8fc>
    2898:	ldr	r0, [r5, #52]	; 0x34
    289c:	mov	r3, #0
    28a0:	mov	r2, #32
    28a4:	mov	r1, #0
    28a8:	mov	ip, #4
    28ac:	add	r7, r5, #60	; 0x3c
    28b0:	str	r7, [sp, #8]
    28b4:	str	r1, [sp, #4]
    28b8:	str	ip, [sp]
    28bc:	bl	0 <read_bytes>
    28c0:	cmp	r0, #0
    28c4:	bge	28d0 <coda_cdf_reopen+0x348>
    28c8:	mvn	ip, #0
    28cc:	b	2e84 <coda_cdf_reopen+0x8fc>
    28d0:	ldr	r0, [r5, #52]	; 0x34
    28d4:	mov	r3, #0
    28d8:	mov	r2, #36	; 0x24
    28dc:	mov	ip, #0
    28e0:	mov	r1, #4
    28e4:	add	r7, sp, #68	; 0x44
    28e8:	str	r7, [sp, #8]
    28ec:	str	ip, [sp, #4]
    28f0:	str	r1, [sp]
    28f4:	bl	0 <read_bytes>
    28f8:	cmp	r0, #0
    28fc:	bge	2908 <coda_cdf_reopen+0x380>
    2900:	mvn	ip, #0
    2904:	b	2e84 <coda_cdf_reopen+0x8fc>
    2908:	ldr	r0, [r5, #52]	; 0x34
    290c:	mov	r3, #0
    2910:	mov	r2, #40	; 0x28
    2914:	mov	r1, #0
    2918:	mov	ip, #4
    291c:	add	r7, sp, #72	; 0x48
    2920:	str	r7, [sp, #8]
    2924:	str	r1, [sp, #4]
    2928:	str	ip, [sp]
    292c:	bl	0 <read_bytes>
    2930:	cmp	r0, #0
    2934:	bge	2940 <coda_cdf_reopen+0x3b8>
    2938:	mvn	ip, #0
    293c:	b	2e84 <coda_cdf_reopen+0x8fc>
    2940:	ldr	r0, [r5, #52]	; 0x34
    2944:	mov	r3, #0
    2948:	mov	r2, #52	; 0x34
    294c:	mov	r1, #0
    2950:	mov	ip, #4
    2954:	add	r7, r5, #64	; 0x40
    2958:	str	r7, [sp, #8]
    295c:	str	r1, [sp, #4]
    2960:	str	ip, [sp]
    2964:	bl	0 <read_bytes>
    2968:	cmp	r0, #0
    296c:	bge	2978 <coda_cdf_reopen+0x3f0>
    2970:	mvn	ip, #0
    2974:	b	2e84 <coda_cdf_reopen+0x8fc>
    2978:	add	r0, sp, #80	; 0x50
    297c:	bl	260 <swap8>
    2980:	add	r0, r5, #56	; 0x38
    2984:	bl	1f4 <swap4>
    2988:	add	r0, r5, #60	; 0x3c
    298c:	bl	1f4 <swap4>
    2990:	add	r0, sp, #68	; 0x44
    2994:	bl	1f4 <swap4>
    2998:	add	r0, sp, #72	; 0x48
    299c:	bl	1f4 <swap4>
    29a0:	add	r0, r5, #64	; 0x40
    29a4:	bl	1f4 <swap4>
    29a8:	ldr	r1, [sp, #68]	; 0x44
    29ac:	sub	r3, r1, #1
    29b0:	cmp	r3, #16
    29b4:	bcs	2e70 <coda_cdf_reopen+0x8e8>
    29b8:	add	pc, pc, r3, lsl #2
    29bc:	nop	{0}
    29c0:	b	2a00 <coda_cdf_reopen+0x478>
    29c4:	b	2a00 <coda_cdf_reopen+0x478>
    29c8:	b	2e5c <coda_cdf_reopen+0x8d4>
    29cc:	b	2a0c <coda_cdf_reopen+0x484>
    29d0:	b	2a00 <coda_cdf_reopen+0x478>
    29d4:	b	2a0c <coda_cdf_reopen+0x484>
    29d8:	b	2a00 <coda_cdf_reopen+0x478>
    29dc:	b	2e70 <coda_cdf_reopen+0x8e8>
    29e0:	b	2a00 <coda_cdf_reopen+0x478>
    29e4:	b	2e70 <coda_cdf_reopen+0x8e8>
    29e8:	b	2a00 <coda_cdf_reopen+0x478>
    29ec:	b	2a00 <coda_cdf_reopen+0x478>
    29f0:	b	2a0c <coda_cdf_reopen+0x484>
    29f4:	b	2e5c <coda_cdf_reopen+0x8d4>
    29f8:	b	2e5c <coda_cdf_reopen+0x8d4>
    29fc:	b	2a0c <coda_cdf_reopen+0x484>
    2a00:	mov	r0, #0
    2a04:	str	r0, [r5, #68]	; 0x44
    2a08:	b	2a14 <coda_cdf_reopen+0x48c>
    2a0c:	mov	r0, #1
    2a10:	str	r0, [r5, #68]	; 0x44
    2a14:	ldr	ip, [sp, #72]	; 0x48
    2a18:	and	r1, ip, #1
    2a1c:	cmp	r1, #0
    2a20:	bne	2a30 <coda_cdf_reopen+0x4a8>
    2a24:	mov	ip, #1
    2a28:	str	ip, [r5, #72]	; 0x48
    2a2c:	b	2a38 <coda_cdf_reopen+0x4b0>
    2a30:	mov	r3, #0
    2a34:	str	r3, [r5, #72]	; 0x48
    2a38:	ldr	r2, [sp, #72]	; 0x48
    2a3c:	and	r3, r2, #2
    2a40:	cmp	r3, #0
    2a44:	bne	2a5c <coda_cdf_reopen+0x4d4>
    2a48:	mvn	r0, #199	; 0xc7
    2a4c:	ldr	r1, [pc, #1216]	; 2f14 <coda_cdf_reopen+0x98c>
    2a50:	bl	0 <coda_set_error>
    2a54:	mvn	ip, #0
    2a58:	b	2e84 <coda_cdf_reopen+0x8fc>
    2a5c:	and	ip, r2, #4
    2a60:	cmp	ip, #0
    2a64:	beq	2a7c <coda_cdf_reopen+0x4f4>
    2a68:	and	r1, r2, #8
    2a6c:	cmp	r1, #0
    2a70:	movne	r3, #1
    2a74:	moveq	r3, #0
    2a78:	b	2a80 <coda_cdf_reopen+0x4f8>
    2a7c:	mov	r3, #0
    2a80:	str	r3, [r5, #76]	; 0x4c
    2a84:	ldr	r6, [sp, #80]	; 0x50
    2a88:	ldr	r8, [sp, #84]	; 0x54
    2a8c:	mov	r7, r5
    2a90:	ldr	r0, [r7, #52]	; 0x34
    2a94:	mov	ip, #0
    2a98:	mov	r3, #8
    2a9c:	adds	r2, r6, r3
    2aa0:	adc	r3, r8, ip
    2aa4:	mov	r1, #0
    2aa8:	mov	ip, #4
    2aac:	add	sl, sp, #88	; 0x58
    2ab0:	str	sl, [sp, #8]
    2ab4:	str	r1, [sp, #4]
    2ab8:	str	ip, [sp]
    2abc:	bl	0 <read_bytes>
    2ac0:	cmp	r0, #0
    2ac4:	bge	2ad0 <coda_cdf_reopen+0x548>
    2ac8:	mvn	r1, #0
    2acc:	b	2e44 <coda_cdf_reopen+0x8bc>
    2ad0:	add	r0, sp, #88	; 0x58
    2ad4:	bl	1f4 <swap4>
    2ad8:	ldr	r2, [sp, #88]	; 0x58
    2adc:	cmp	r2, #2
    2ae0:	beq	2afc <coda_cdf_reopen+0x574>
    2ae4:	movw	r0, #65236	; 0xfed4
    2ae8:	movt	r0, #65535	; 0xffff
    2aec:	ldr	r1, [pc, #1036]	; 2f00 <coda_cdf_reopen+0x978>
    2af0:	bl	0 <coda_set_error>
    2af4:	mvn	r1, #0
    2af8:	b	2e44 <coda_cdf_reopen+0x8bc>
    2afc:	ldr	r0, [r7, #52]	; 0x34
    2b00:	mov	ip, #0
    2b04:	mov	r3, #12
    2b08:	adds	r2, r6, r3
    2b0c:	adc	r3, r8, ip
    2b10:	mov	r9, #0
    2b14:	mov	ip, #8
    2b18:	add	sl, sp, #104	; 0x68
    2b1c:	str	sl, [sp, #8]
    2b20:	str	r9, [sp, #4]
    2b24:	str	ip, [sp]
    2b28:	bl	0 <read_bytes>
    2b2c:	cmp	r0, #0
    2b30:	bge	2b3c <coda_cdf_reopen+0x5b4>
    2b34:	mvn	r1, #0
    2b38:	b	2e44 <coda_cdf_reopen+0x8bc>
    2b3c:	ldr	r0, [r7, #52]	; 0x34
    2b40:	mov	r2, #0
    2b44:	mov	r1, #20
    2b48:	adds	lr, r6, r1
    2b4c:	adc	r3, r8, r2
    2b50:	mov	r2, lr
    2b54:	mov	r9, #0
    2b58:	mov	r1, #8
    2b5c:	add	sl, sp, #112	; 0x70
    2b60:	str	sl, [sp, #8]
    2b64:	str	r9, [sp, #4]
    2b68:	str	r1, [sp]
    2b6c:	bl	0 <read_bytes>
    2b70:	cmp	r0, #0
    2b74:	bge	2b80 <coda_cdf_reopen+0x5f8>
    2b78:	mvn	r1, #0
    2b7c:	b	2e44 <coda_cdf_reopen+0x8bc>
    2b80:	ldr	r0, [r7, #52]	; 0x34
    2b84:	mov	r2, #0
    2b88:	mov	r1, #28
    2b8c:	adds	lr, r6, r1
    2b90:	adc	r3, r8, r2
    2b94:	mov	r2, lr
    2b98:	mov	r9, #0
    2b9c:	mov	ip, #8
    2ba0:	add	sl, sp, #120	; 0x78
    2ba4:	str	sl, [sp, #8]
    2ba8:	str	r9, [sp, #4]
    2bac:	str	ip, [sp]
    2bb0:	bl	0 <read_bytes>
    2bb4:	cmp	r0, #0
    2bb8:	bge	2bc4 <coda_cdf_reopen+0x63c>
    2bbc:	mvn	r1, #0
    2bc0:	b	2e44 <coda_cdf_reopen+0x8bc>
    2bc4:	ldr	r0, [r7, #52]	; 0x34
    2bc8:	mov	r2, #0
    2bcc:	mov	r1, #36	; 0x24
    2bd0:	adds	lr, r6, r1
    2bd4:	adc	r3, r8, r2
    2bd8:	mov	r2, lr
    2bdc:	mov	r9, #0
    2be0:	mov	ip, #8
    2be4:	add	sl, sp, #128	; 0x80
    2be8:	str	sl, [sp, #8]
    2bec:	str	r9, [sp, #4]
    2bf0:	str	ip, [sp]
    2bf4:	bl	0 <read_bytes>
    2bf8:	cmp	r0, #0
    2bfc:	bge	2c08 <coda_cdf_reopen+0x680>
    2c00:	mvn	r1, #0
    2c04:	b	2e44 <coda_cdf_reopen+0x8bc>
    2c08:	ldr	r0, [r7, #52]	; 0x34
    2c0c:	mov	ip, #0
    2c10:	mov	r3, #44	; 0x2c
    2c14:	adds	r2, r6, r3
    2c18:	adc	r3, r8, ip
    2c1c:	mov	r9, #0
    2c20:	mov	r1, #4
    2c24:	add	sl, sp, #92	; 0x5c
    2c28:	str	sl, [sp, #8]
    2c2c:	str	r9, [sp, #4]
    2c30:	str	r1, [sp]
    2c34:	bl	0 <read_bytes>
    2c38:	cmp	r0, #0
    2c3c:	bge	2c48 <coda_cdf_reopen+0x6c0>
    2c40:	mvn	r1, #0
    2c44:	b	2e44 <coda_cdf_reopen+0x8bc>
    2c48:	ldr	r0, [r7, #52]	; 0x34
    2c4c:	mov	r3, #0
    2c50:	mov	r2, #48	; 0x30
    2c54:	adds	r2, r6, r2
    2c58:	adc	r3, r8, r3
    2c5c:	mov	r9, #0
    2c60:	mov	r1, #4
    2c64:	add	sl, sp, #96	; 0x60
    2c68:	str	sl, [sp, #8]
    2c6c:	str	r9, [sp, #4]
    2c70:	str	r1, [sp]
    2c74:	bl	0 <read_bytes>
    2c78:	cmp	r0, #0
    2c7c:	bge	2c88 <coda_cdf_reopen+0x700>
    2c80:	mvn	r1, #0
    2c84:	b	2e44 <coda_cdf_reopen+0x8bc>
    2c88:	ldr	r0, [r7, #52]	; 0x34
    2c8c:	mov	r2, #0
    2c90:	mov	r1, #56	; 0x38
    2c94:	adds	lr, r6, r1
    2c98:	adc	r3, r8, r2
    2c9c:	mov	r2, lr
    2ca0:	mov	r9, #0
    2ca4:	mov	ip, #4
    2ca8:	add	sl, r7, #80	; 0x50
    2cac:	str	sl, [sp, #8]
    2cb0:	str	r9, [sp, #4]
    2cb4:	str	ip, [sp]
    2cb8:	bl	0 <read_bytes>
    2cbc:	cmp	r0, #0
    2cc0:	bge	2ccc <coda_cdf_reopen+0x744>
    2cc4:	mvn	r1, #0
    2cc8:	b	2e44 <coda_cdf_reopen+0x8bc>
    2ccc:	ldr	r0, [r7, #52]	; 0x34
    2cd0:	mov	r1, #0
    2cd4:	mov	ip, #60	; 0x3c
    2cd8:	adds	r2, r6, ip
    2cdc:	adc	r3, r8, r1
    2ce0:	mov	r1, #0
    2ce4:	mov	ip, #4
    2ce8:	add	r6, sp, #100	; 0x64
    2cec:	str	r6, [sp, #8]
    2cf0:	str	r1, [sp, #4]
    2cf4:	str	ip, [sp]
    2cf8:	bl	0 <read_bytes>
    2cfc:	cmp	r0, #0
    2d00:	bge	2d0c <coda_cdf_reopen+0x784>
    2d04:	mvn	r1, #0
    2d08:	b	2e44 <coda_cdf_reopen+0x8bc>
    2d0c:	add	r0, sp, #104	; 0x68
    2d10:	bl	260 <swap8>
    2d14:	add	r0, sp, #112	; 0x70
    2d18:	bl	260 <swap8>
    2d1c:	add	r0, sp, #120	; 0x78
    2d20:	bl	260 <swap8>
    2d24:	add	r0, sp, #128	; 0x80
    2d28:	bl	260 <swap8>
    2d2c:	add	r0, sp, #92	; 0x5c
    2d30:	bl	1f4 <swap4>
    2d34:	add	r0, sp, #96	; 0x60
    2d38:	bl	1f4 <swap4>
    2d3c:	add	r0, r7, #80	; 0x50
    2d40:	bl	1f4 <swap4>
    2d44:	add	r0, sp, #100	; 0x64
    2d48:	bl	1f4 <swap4>
    2d4c:	ldr	r0, [sp, #128]	; 0x80
    2d50:	ldr	r1, [sp, #132]	; 0x84
    2d54:	ldr	r2, [r7, #8]
    2d58:	ldr	r3, [r7, #12]
    2d5c:	eor	ip, r1, r3
    2d60:	eor	r2, r0, r2
    2d64:	orr	r2, ip, r2
    2d68:	cmp	r2, #0
    2d6c:	beq	2da8 <coda_cdf_reopen+0x820>
    2d70:	add	r2, sp, #136	; 0x88
    2d74:	bl	0 <coda_str64>
    2d78:	ldr	r0, [r7, #8]
    2d7c:	ldr	r1, [r7, #12]
    2d80:	add	r2, sp, #160	; 0xa0
    2d84:	bl	0 <coda_str64>
    2d88:	movw	r0, #65236	; 0xfed4
    2d8c:	movt	r0, #65535	; 0xffff
    2d90:	ldr	r1, [pc, #356]	; 2efc <coda_cdf_reopen+0x974>
    2d94:	add	r2, sp, #136	; 0x88
    2d98:	add	r3, sp, #160	; 0xa0
    2d9c:	bl	0 <coda_set_error>
    2da0:	mvn	r1, #0
    2da4:	b	2e44 <coda_cdf_reopen+0x8bc>
    2da8:	ldr	r2, [sp, #104]	; 0x68
    2dac:	ldr	r3, [sp, #108]	; 0x6c
    2db0:	mov	ip, r3
    2db4:	mov	r0, r2
    2db8:	orr	ip, ip, r0
    2dbc:	cmp	ip, #0
    2dc0:	beq	2de4 <coda_cdf_reopen+0x85c>
    2dc4:	mov	ip, #0
    2dc8:	str	ip, [sp]
    2dcc:	mov	r0, r7
    2dd0:	bl	1c18 <read_VDR>
    2dd4:	cmp	r0, #0
    2dd8:	beq	2de4 <coda_cdf_reopen+0x85c>
    2ddc:	mvn	r1, #0
    2de0:	b	2e44 <coda_cdf_reopen+0x8bc>
    2de4:	ldr	r2, [sp, #112]	; 0x70
    2de8:	ldr	r3, [sp, #116]	; 0x74
    2dec:	mov	r0, r2
    2df0:	mov	r1, r3
    2df4:	orr	r1, r1, r0
    2df8:	cmp	r1, #0
    2dfc:	beq	2e20 <coda_cdf_reopen+0x898>
    2e00:	mov	ip, #1
    2e04:	str	ip, [sp]
    2e08:	mov	r0, r7
    2e0c:	bl	1c18 <read_VDR>
    2e10:	cmp	r0, #0
    2e14:	beq	2e20 <coda_cdf_reopen+0x898>
    2e18:	mvn	r1, #0
    2e1c:	b	2e44 <coda_cdf_reopen+0x8bc>
    2e20:	ldr	r2, [sp, #120]	; 0x78
    2e24:	ldr	r3, [sp, #124]	; 0x7c
    2e28:	mov	r0, r7
    2e2c:	bl	f38 <read_ADR>
    2e30:	cmp	r0, #0
    2e34:	beq	2e40 <coda_cdf_reopen+0x8b8>
    2e38:	mvn	r1, #0
    2e3c:	b	2e44 <coda_cdf_reopen+0x8bc>
    2e40:	mov	r1, #0
    2e44:	cmp	r1, #0
    2e48:	beq	2e54 <coda_cdf_reopen+0x8cc>
    2e4c:	mvn	ip, #0
    2e50:	b	2e84 <coda_cdf_reopen+0x8fc>
    2e54:	mov	ip, #0
    2e58:	b	2e84 <coda_cdf_reopen+0x8fc>
    2e5c:	mvn	r0, #199	; 0xc7
    2e60:	ldr	r1, [pc, #164]	; 2f0c <coda_cdf_reopen+0x984>
    2e64:	bl	0 <coda_set_error>
    2e68:	mvn	ip, #0
    2e6c:	b	2e84 <coda_cdf_reopen+0x8fc>
    2e70:	mvn	r0, #199	; 0xc7
    2e74:	ldr	r1, [pc, #124]	; 2ef8 <coda_cdf_reopen+0x970>
    2e78:	ldr	r2, [sp, #68]	; 0x44
    2e7c:	bl	0 <coda_set_error>
    2e80:	mvn	ip, #0
    2e84:	cmp	ip, #0
    2e88:	beq	2e9c <coda_cdf_reopen+0x914>
    2e8c:	mov	r0, r5
    2e90:	bl	2f1c <coda_cdf_close>
    2e94:	mvn	r0, #0
    2e98:	b	2ec0 <coda_cdf_reopen+0x938>
    2e9c:	str	r5, [r4]
    2ea0:	mov	r0, #0
    2ea4:	b	2ec0 <coda_cdf_reopen+0x938>
    2ea8:	mvn	r0, #199	; 0xc7
    2eac:	ldr	r1, [pc, #92]	; 2f10 <coda_cdf_reopen+0x988>
    2eb0:	bl	0 <coda_set_error>
    2eb4:	mov	r0, r5
    2eb8:	bl	2f1c <coda_cdf_close>
    2ebc:	mvn	r0, #0
    2ec0:	ldr	r4, [sp, #24]
    2ec4:	ldr	r5, [sp, #28]
    2ec8:	ldr	r6, [sp, #32]
    2ecc:	ldr	r7, [sp, #36]	; 0x24
    2ed0:	ldr	r8, [sp, #40]	; 0x28
    2ed4:	ldr	r9, [sp, #44]	; 0x2c
    2ed8:	ldr	sl, [sp, #48]	; 0x30
    2edc:	ldr	lr, [sp, #16]
    2ee0:	add	sp, sp, #184	; 0xb8
    2ee4:	bx	lr
    2ee8:	.word	0x0000067b
    2eec:	.word	0x000000a2
    2ef0:	.word	0x0000027c
    2ef4:	.word	0x00000739
    2ef8:	.word	0x0000015b
    2efc:	.word	0x000001e7
    2f00:	.word	0x000005ec
    2f04:	.word	0x000007e6
    2f08:	.word	0x000008c7
    2f0c:	.word	0x000003f4
    2f10:	.word	0x00000128
    2f14:	.word	0x0000062c
    2f18:	.word	0x00000817

00002f1c <coda_cdf_close>:
    2f1c:	mov	ip, sp
    2f20:	sub	sp, sp, #16
    2f24:	str	ip, [sp]
    2f28:	str	lr, [sp, #4]
    2f2c:	str	r4, [sp, #8]
    2f30:	mov	r4, r0
    2f34:	ldr	r0, [r4]
    2f38:	cmp	r0, #0
    2f3c:	beq	2f44 <coda_cdf_close+0x28>
    2f40:	bl	0 <free>
    2f44:	ldr	r0, [r4, #20]
    2f48:	cmp	r0, #0
    2f4c:	beq	2f54 <coda_cdf_close+0x38>
    2f50:	bl	0 <coda_dynamic_type_delete>
    2f54:	ldr	r0, [r4, #48]	; 0x30
    2f58:	cmp	r0, #0
    2f5c:	beq	2f64 <coda_cdf_close+0x48>
    2f60:	bl	0 <free>
    2f64:	ldr	r0, [r4, #52]	; 0x34
    2f68:	cmp	r0, #0
    2f6c:	beq	2f74 <coda_cdf_close+0x58>
    2f70:	bl	0 <coda_bin_close>
    2f74:	mov	r0, r4
    2f78:	bl	0 <free>
    2f7c:	mov	r0, #0
    2f80:	ldr	r4, [sp, #8]
    2f84:	ldr	lr, [sp, #4]
    2f88:	add	sp, sp, #16
    2f8c:	bx	lr
