
../compcert-repos/stcorp-coda-3a25f25/CMakeFiles/coda_static.dir/libcoda/coda-bin-cursor.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <read_bytes>:
       0:	strd	r4, [sp, #-36]!	; 0xffffffdc
       4:	mov	r4, r2
       8:	ldr	r5, [r0, #48]	; 0x30
       c:	strd	r6, [sp, #8]
      10:	mov	r6, r0
      14:	mov	r7, r3
      18:	strd	r8, [sp, #16]
      1c:	strd	sl, [sp, #24]
      20:	str	lr, [sp, #32]
      24:	sub	sp, sp, #84	; 0x54
      28:	cmp	r5, #0
      2c:	ldr	r2, [sp, #120]	; 0x78
      30:	ldr	r1, [sp, #124]	; 0x7c
      34:	beq	d8 <read_bytes+0xd8>
      38:	adds	r8, r4, r2
      3c:	ldrd	sl, [r0, #40]	; 0x28
      40:	adc	r9, r3, r1
      44:	cmp	r9, fp
      48:	cmpeq	r8, sl
      4c:	bls	c4 <read_bytes+0xc4>
      50:	ldr	r3, [r0, #16]
      54:	cmp	r3, #1
      58:	bls	140 <read_bytes+0x140>
      5c:	mov	r0, r2
      60:	add	r2, sp, #8
      64:	bl	0 <coda_str64>
      68:	add	r5, sp, #56	; 0x38
      6c:	mov	r0, r4
      70:	mov	r1, r7
      74:	add	r2, sp, #32
      78:	bl	0 <coda_str64>
      7c:	mov	r2, r5
      80:	ldrd	r0, [r6, #40]	; 0x28
      84:	bl	0 <coda_str64>
      88:	mvn	r0, #300	; 0x12c
      8c:	add	r3, sp, #32
      90:	str	r5, [sp]
      94:	add	r2, sp, #8
      98:	movw	r1, #0
      9c:	movt	r1, #0
      a0:	bl	0 <coda_set_error>
      a4:	mvn	r0, #0
      a8:	add	sp, sp, #84	; 0x54
      ac:	ldrd	r4, [sp]
      b0:	ldrd	r6, [sp, #8]
      b4:	ldrd	r8, [sp, #16]
      b8:	ldrd	sl, [sp, #24]
      bc:	add	sp, sp, #32
      c0:	pop	{pc}		; (ldr pc, [sp], #4)
      c4:	add	r1, r5, r4
      c8:	ldr	r0, [sp, #128]	; 0x80
      cc:	bl	0 <memcpy>
      d0:	mov	r0, #0
      d4:	b	a8 <read_bytes+0xa8>
      d8:	ldr	r3, [r0, #16]
      dc:	cmp	r3, #1
      e0:	bhi	158 <read_bytes+0x158>
      e4:	ldrd	r8, [r0, #8]
      e8:	adds	sl, r4, r2
      ec:	adc	fp, r7, r1
      f0:	cmp	fp, r9
      f4:	cmpeq	sl, r8
      f8:	bhi	140 <read_bytes+0x140>
      fc:	mov	r3, r4
     100:	ldr	r0, [r0, #56]	; 0x38
     104:	ldr	r1, [sp, #128]	; 0x80
     108:	bl	0 <pread>
     10c:	cmp	r0, #0
     110:	movge	r0, r5
     114:	bge	a8 <read_bytes+0xa8>
     118:	bl	0 <__errno_location>
     11c:	ldr	r0, [r0]
     120:	bl	0 <strerror>
     124:	mov	r2, r0
     128:	movw	r1, #0
     12c:	movt	r1, #0
     130:	mvn	r0, #21
     134:	bl	0 <coda_set_error>
     138:	mvn	r0, #0
     13c:	b	a8 <read_bytes+0xa8>
     140:	mvn	r0, #300	; 0x12c
     144:	movw	r1, #0
     148:	movt	r1, #0
     14c:	bl	0 <coda_set_error>
     150:	mvn	r0, #0
     154:	b	a8 <read_bytes+0xa8>
     158:	movw	r3, #0
     15c:	movt	r3, #0
     160:	movw	r1, #0
     164:	movt	r1, #0
     168:	movw	r0, #0
     16c:	movt	r0, #0
     170:	mov	r2, #83	; 0x53
     174:	bl	0 <__assert_fail>

00000178 <read_bits>:
     178:	strd	r4, [sp, #-36]!	; 0xffffffdc
     17c:	mov	r5, r3
     180:	mov	r4, r2
     184:	strd	r6, [sp, #8]
     188:	and	r2, r2, #7
     18c:	mov	r6, #0
     190:	strd	r8, [sp, #16]
     194:	strd	sl, [sp, #24]
     198:	str	lr, [sp, #32]
     19c:	sub	sp, sp, #52	; 0x34
     1a0:	ldr	r3, [sp, #88]	; 0x58
     1a4:	str	r0, [sp, #20]
     1a8:	ldr	r7, [sp, #96]	; 0x60
     1ac:	adds	r8, r2, r3
     1b0:	ldr	r3, [sp, #92]	; 0x5c
     1b4:	adc	r9, r6, r3
     1b8:	cmp	r8, #9
     1bc:	sbcs	r3, r9, #0
     1c0:	rsb	r8, r8, #0
     1c4:	and	r8, r8, #7
     1c8:	blt	2f0 <read_bits+0x178>
     1cc:	cmp	r8, #0
     1d0:	beq	2ac <read_bits+0x134>
     1d4:	mov	r2, #24
     1d8:	mov	r3, #0
     1dc:	ldrd	r0, [sp, #88]	; 0x58
     1e0:	bl	0 <__aeabi_ldivmod>
     1e4:	strd	r2, [sp, #24]
     1e8:	orrs	r3, r2, r3
     1ec:	bne	394 <read_bits+0x21c>
     1f0:	ldrd	r2, [sp, #88]	; 0x58
     1f4:	cmp	r2, #1
     1f8:	sbcs	r3, r3, #0
     1fc:	blt	2d0 <read_bits+0x158>
     200:	ldr	r3, [sp, #88]	; 0x58
     204:	add	r9, r7, #3
     208:	mov	r6, #4
     20c:	mov	r7, #0
     210:	adds	r3, r3, r4
     214:	str	r3, [sp, #24]
     218:	ldr	r3, [sp, #92]	; 0x5c
     21c:	adc	r3, r3, r5
     220:	str	r3, [sp, #36]	; 0x24
     224:	add	r3, sp, #40	; 0x28
     228:	str	r3, [sp, #32]
     22c:	b	27c <read_bits+0x104>
     230:	ldr	r2, [sp, #24]
     234:	adds	r4, r4, #24
     238:	add	r9, r9, #3
     23c:	adc	r5, r5, #0
     240:	ldr	r3, [sp, #40]	; 0x28
     244:	subs	sl, r2, r4
     248:	ldr	r2, [sp, #36]	; 0x24
     24c:	rev	r3, r3
     250:	lsr	r3, r3, r8
     254:	sbc	fp, r2, r5
     258:	cmp	sl, #1
     25c:	ubfx	r0, r3, #16, #8
     260:	sbcs	r2, fp, #0
     264:	ubfx	r2, r3, #8, #8
     268:	str	r3, [sp, #44]	; 0x2c
     26c:	strb	r0, [r9, #-6]
     270:	strb	r2, [r9, #-5]
     274:	strb	r3, [r9, #-4]
     278:	blt	2d0 <read_bits+0x158>
     27c:	lsr	r2, r4, #3
     280:	strd	r6, [sp]
     284:	ldr	r1, [sp, #32]
     288:	asr	r3, r5, #3
     28c:	orr	r2, r2, r5, lsl #29
     290:	ldr	r0, [sp, #20]
     294:	str	r1, [sp, #8]
     298:	bl	0 <read_bytes>
     29c:	cmp	r0, #0
     2a0:	beq	230 <read_bits+0xb8>
     2a4:	mvn	r0, #0
     2a8:	b	2d4 <read_bits+0x15c>
     2ac:	ldr	r1, [sp, #88]	; 0x58
     2b0:	mov	r3, r8
     2b4:	and	r2, r1, #7
     2b8:	orrs	r3, r2, r3
     2bc:	bne	48c <read_bits+0x314>
     2c0:	ldrd	r2, [sp, #88]	; 0x58
     2c4:	cmp	r2, #1
     2c8:	sbcs	r3, r3, #0
     2cc:	bge	358 <read_bits+0x1e0>
     2d0:	mov	r0, #0
     2d4:	add	sp, sp, #52	; 0x34
     2d8:	ldrd	r4, [sp]
     2dc:	ldrd	r6, [sp, #8]
     2e0:	ldrd	r8, [sp, #16]
     2e4:	ldrd	sl, [sp, #24]
     2e8:	add	sp, sp, #32
     2ec:	pop	{pc}		; (ldr pc, [sp], #4)
     2f0:	lsr	r4, r4, #3
     2f4:	mov	sl, #1
     2f8:	mov	fp, #0
     2fc:	asr	r3, r5, #3
     300:	orr	r2, r4, r5, lsl #29
     304:	strd	sl, [sp]
     308:	str	r7, [sp, #8]
     30c:	bl	0 <read_bytes>
     310:	cmp	r0, #0
     314:	bne	2a4 <read_bits+0x12c>
     318:	cmp	r8, r6
     31c:	beq	32c <read_bits+0x1b4>
     320:	ldrb	r3, [r7]
     324:	asr	r8, r3, r8
     328:	strb	r8, [r7]
     32c:	ldr	r1, [sp, #88]	; 0x58
     330:	mov	r3, #0
     334:	and	r2, r1, #7
     338:	orrs	r3, r2, r3
     33c:	beq	2d0 <read_bits+0x158>
     340:	ldrb	r3, [r7]
     344:	mvn	r2, #0
     348:	ldr	r1, [sp, #88]	; 0x58
     34c:	bic	r3, r3, r2, lsl r1
     350:	strb	r3, [r7]
     354:	b	2d4 <read_bits+0x15c>
     358:	lsr	r4, r4, #3
     35c:	ldr	r0, [sp, #20]
     360:	ldr	r3, [sp, #88]	; 0x58
     364:	lsr	r1, r3, #3
     368:	ldr	r3, [sp, #92]	; 0x5c
     36c:	asr	r2, r3, #3
     370:	orr	r1, r1, r3, lsl #29
     374:	asr	r3, r5, #3
     378:	stm	sp, {r1, r2, r7}
     37c:	orr	r2, r4, r5, lsl #29
     380:	bl	0 <read_bytes>
     384:	adds	r0, r0, #0
     388:	movne	r0, #1
     38c:	rsb	r0, r0, #0
     390:	b	2d4 <read_bits+0x15c>
     394:	ldrb	r9, [sp, #24]
     398:	and	r0, r4, #7
     39c:	add	ip, sp, #40	; 0x28
     3a0:	lsr	r2, r4, #3
     3a4:	ldr	r3, [sp, #24]
     3a8:	stmib	sp, {r6, ip}
     3ac:	orr	r2, r2, r5, lsl #29
     3b0:	str	ip, [sp, #32]
     3b4:	add	r1, r9, r0
     3b8:	ands	r1, r1, #7
     3bc:	movne	r1, #1
     3c0:	add	r0, r0, r3
     3c4:	asr	r3, r5, #3
     3c8:	add	r6, r1, r0, lsr #3
     3cc:	ldrd	r0, [sp, #20]
     3d0:	ands	r9, r9, #7
     3d4:	movne	r9, #1
     3d8:	str	r6, [sp]
     3dc:	add	r9, r9, r1, lsr #3
     3e0:	bl	0 <read_bytes>
     3e4:	subs	r3, r0, #0
     3e8:	bne	2a4 <read_bits+0x12c>
     3ec:	str	r3, [sp, #44]	; 0x2c
     3f0:	add	r0, r8, #32
     3f4:	mvn	r1, #0
     3f8:	ldr	r3, [sp, #24]
     3fc:	cmp	r6, #0
     400:	sub	r0, r0, r6, lsl #3
     404:	mvn	r1, r1, lsl r3
     408:	beq	430 <read_bits+0x2b8>
     40c:	ldr	ip, [sp, #32]
     410:	add	r3, sp, #47	; 0x2f
     414:	add	r6, ip, r6
     418:	ldrb	r2, [ip], #1
     41c:	cmp	r6, ip
     420:	strb	r2, [r3], #-1
     424:	bne	418 <read_bits+0x2a0>
     428:	ldr	r6, [sp, #44]	; 0x2c
     42c:	and	r6, r1, r6, lsr r0
     430:	cmp	r9, #0
     434:	str	r6, [sp, #44]	; 0x2c
     438:	beq	460 <read_bits+0x2e8>
     43c:	add	r3, sp, #48	; 0x30
     440:	mov	r1, r7
     444:	add	r3, r3, r9
     448:	add	r7, r7, r9
     44c:	sub	r3, r3, #5
     450:	ldrb	r2, [r3], #-1
     454:	strb	r2, [r1], #1
     458:	cmp	r1, r7
     45c:	bne	450 <read_bits+0x2d8>
     460:	ldr	r3, [sp, #24]
     464:	mov	r2, #0
     468:	ldr	r1, [sp, #88]	; 0x58
     46c:	adds	r4, r4, r3
     470:	adc	r5, r5, r2
     474:	subs	r3, r1, r3
     478:	str	r3, [sp, #88]	; 0x58
     47c:	ldr	r3, [sp, #92]	; 0x5c
     480:	sbc	r3, r3, r2
     484:	str	r3, [sp, #92]	; 0x5c
     488:	b	1f0 <read_bits+0x78>
     48c:	add	r1, sp, #44	; 0x2c
     490:	lsr	r2, r4, #3
     494:	mov	r8, #1
     498:	mov	r9, #0
     49c:	asr	r3, r5, #3
     4a0:	orr	r2, r2, r5, lsl #29
     4a4:	strd	r8, [sp]
     4a8:	str	r1, [sp, #8]
     4ac:	bl	0 <read_bytes>
     4b0:	cmp	r0, #0
     4b4:	bne	2a4 <read_bits+0x12c>
     4b8:	ldr	r3, [sp, #88]	; 0x58
     4bc:	mov	r0, #0
     4c0:	mvn	ip, #0
     4c4:	ldr	lr, [sp, #88]	; 0x58
     4c8:	ldrb	r2, [sp, #44]	; 0x2c
     4cc:	and	r1, r3, #7
     4d0:	adds	r4, r4, r1
     4d4:	adc	r5, r5, r0
     4d8:	subs	r3, lr, r1
     4dc:	str	r3, [sp, #88]	; 0x58
     4e0:	ldr	r3, [sp, #92]	; 0x5c
     4e4:	sbc	r3, r3, r0
     4e8:	str	r3, [sp, #92]	; 0x5c
     4ec:	bic	r3, r2, ip, lsl r1
     4f0:	strb	r3, [r7], #1
     4f4:	b	2c0 <read_bits+0x148>

000004f8 <coda_bin_cursor_read_float>:
     4f8:	ldr	r3, [r0, #4]
     4fc:	strd	r4, [sp, #-20]!	; 0xffffffec
     500:	mov	r5, r1
     504:	sub	r3, r3, #1
     508:	add	r2, r0, r3, lsl #4
     50c:	add	r3, r3, #1
     510:	ldr	ip, [r2, #8]
     514:	ldr	r2, [ip]
     518:	strd	r6, [sp, #8]
     51c:	mov	r7, #0
     520:	str	lr, [sp, #16]
     524:	sub	sp, sp, #20
     528:	cmp	r2, #99	; 0x63
     52c:	ldr	r2, [r0, r3, lsl #4]
     530:	add	r3, r0, r3, lsl #4
     534:	ldrhi	ip, [ip, #4]
     538:	ldr	r1, [r3, #4]
     53c:	and	r6, r2, #7
     540:	orrs	r3, r6, r7
     544:	ldr	r0, [r0]
     548:	ldr	r4, [ip, #44]	; 0x2c
     54c:	beq	5c0 <coda_bin_cursor_read_float+0xc8>
     550:	mov	r6, #32
     554:	mov	r7, #0
     558:	mov	r3, r1
     55c:	strd	r6, [sp]
     560:	str	r5, [sp, #8]
     564:	bl	178 <read_bits>
     568:	cmp	r0, #0
     56c:	bne	5e8 <coda_bin_cursor_read_float+0xf0>
     570:	cmp	r4, #0
     574:	movne	r0, #0
     578:	beq	590 <coda_bin_cursor_read_float+0x98>
     57c:	add	sp, sp, #20
     580:	ldrd	r4, [sp]
     584:	ldrd	r6, [sp, #8]
     588:	add	sp, sp, #16
     58c:	pop	{pc}		; (ldr pc, [sp], #4)
     590:	ldrb	r2, [r5, #3]
     594:	mov	r3, #0
     598:	mov	r0, r4
     59c:	ldrb	ip, [r5, #2]
     5a0:	ldrb	r1, [r5, #1]
     5a4:	bfi	r3, r2, #0, #8
     5a8:	ldrb	r2, [r5]
     5ac:	bfi	r3, ip, #8, #8
     5b0:	bfi	r3, r1, #16, #8
     5b4:	bfi	r3, r2, #24, #8
     5b8:	str	r3, [r5]
     5bc:	b	57c <coda_bin_cursor_read_float+0x84>
     5c0:	lsr	r2, r2, #3
     5c4:	mov	r6, #4
     5c8:	mov	r7, #0
     5cc:	asr	r3, r1, #3
     5d0:	orr	r2, r2, r1, lsl #29
     5d4:	strd	r6, [sp]
     5d8:	str	r5, [sp, #8]
     5dc:	bl	0 <read_bytes>
     5e0:	cmp	r0, #0
     5e4:	beq	570 <coda_bin_cursor_read_float+0x78>
     5e8:	mvn	r0, #0
     5ec:	b	57c <coda_bin_cursor_read_float+0x84>

000005f0 <coda_bin_cursor_read_double>:
     5f0:	ldr	r3, [r0, #4]
     5f4:	strd	r4, [sp, #-20]!	; 0xffffffec
     5f8:	mov	r4, r1
     5fc:	sub	r3, r3, #1
     600:	add	r2, r0, r3, lsl #4
     604:	add	r3, r3, #1
     608:	ldr	ip, [r2, #8]
     60c:	ldr	r2, [ip]
     610:	strd	r6, [sp, #8]
     614:	mov	r7, #0
     618:	str	lr, [sp, #16]
     61c:	sub	sp, sp, #20
     620:	cmp	r2, #99	; 0x63
     624:	ldr	r2, [r0, r3, lsl #4]
     628:	add	r3, r0, r3, lsl #4
     62c:	ldrhi	ip, [ip, #4]
     630:	ldr	r1, [r3, #4]
     634:	and	r6, r2, #7
     638:	orrs	r3, r6, r7
     63c:	ldr	r0, [r0]
     640:	ldr	r5, [ip, #44]	; 0x2c
     644:	beq	6dc <coda_bin_cursor_read_double+0xec>
     648:	mov	r6, #64	; 0x40
     64c:	mov	r7, #0
     650:	mov	r3, r1
     654:	strd	r6, [sp]
     658:	str	r4, [sp, #8]
     65c:	bl	178 <read_bits>
     660:	cmp	r0, #0
     664:	bne	704 <coda_bin_cursor_read_double+0x114>
     668:	cmp	r5, #0
     66c:	movne	r0, #0
     670:	beq	688 <coda_bin_cursor_read_double+0x98>
     674:	add	sp, sp, #20
     678:	ldrd	r4, [sp]
     67c:	ldrd	r6, [sp, #8]
     680:	add	sp, sp, #16
     684:	pop	{pc}		; (ldr pc, [sp], #4)
     688:	ldrb	ip, [r4, #7]
     68c:	mov	r2, #0
     690:	mov	r3, #0
     694:	mov	r0, r5
     698:	ldrb	r1, [r4, #6]
     69c:	ldrb	lr, [r4, #5]
     6a0:	bfi	r2, ip, #0, #8
     6a4:	ldrb	ip, [r4, #4]
     6a8:	bfi	r2, r1, #8, #8
     6ac:	ldrb	r1, [r4, #3]
     6b0:	bfi	r2, lr, #16, #8
     6b4:	ldrb	lr, [r4, #2]
     6b8:	bfi	r2, ip, #24, #8
     6bc:	ldrb	ip, [r4, #1]
     6c0:	bfi	r3, r1, #0, #8
     6c4:	ldrb	r1, [r4]
     6c8:	bfi	r3, lr, #8, #8
     6cc:	bfi	r3, ip, #16, #8
     6d0:	bfi	r3, r1, #24, #8
     6d4:	strd	r2, [r4]
     6d8:	b	674 <coda_bin_cursor_read_double+0x84>
     6dc:	lsr	r2, r2, #3
     6e0:	mov	r6, #8
     6e4:	mov	r7, #0
     6e8:	asr	r3, r1, #3
     6ec:	orr	r2, r2, r1, lsl #29
     6f0:	strd	r6, [sp]
     6f4:	str	r4, [sp, #8]
     6f8:	bl	0 <read_bytes>
     6fc:	cmp	r0, #0
     700:	beq	668 <coda_bin_cursor_read_double+0x78>
     704:	mvn	r0, #0
     708:	b	674 <coda_bin_cursor_read_double+0x84>

0000070c <read_array>:
     70c:	strd	r4, [sp, #-36]!	; 0xffffffdc
     710:	mov	r4, r0
     714:	strd	r6, [sp, #8]
     718:	mov	r7, r1
     71c:	mov	r6, r2
     720:	strd	r8, [sp, #16]
     724:	mov	r8, r3
     728:	strd	sl, [sp, #24]
     72c:	str	lr, [sp, #32]
     730:	sub	sp, sp, #596	; 0x254
     734:	mov	r1, sp
     738:	add	r2, sp, #4
     73c:	bl	0 <coda_cursor_get_array_dim>
     740:	subs	r9, r0, #0
     744:	bne	824 <read_array+0x118>
     748:	mov	r1, r4
     74c:	mov	r2, #520	; 0x208
     750:	add	r0, sp, #72	; 0x48
     754:	bl	0 <memcpy>
     758:	ldr	r1, [sp]
     75c:	ldr	r2, [sp, #632]	; 0x278
     760:	cmp	r1, #1
     764:	movgt	r3, #0
     768:	movle	r3, #1
     76c:	cmp	r2, #1
     770:	orrne	r3, r3, #1
     774:	cmp	r3, #0
     778:	beq	82c <read_array+0x120>
     77c:	cmp	r1, #0
     780:	ble	7c8 <read_array+0xbc>
     784:	mov	r3, sp
     788:	mov	r4, #1
     78c:	add	r1, r3, r1, lsl #2
     790:	ldr	r2, [r3, #4]!
     794:	cmp	r1, r3
     798:	mul	r4, r2, r4
     79c:	bne	790 <read_array+0x84>
     7a0:	cmp	r4, #0
     7a4:	bgt	7cc <read_array+0xc0>
     7a8:	mov	r0, r9
     7ac:	add	sp, sp, #596	; 0x254
     7b0:	ldrd	r4, [sp]
     7b4:	ldrd	r6, [sp, #8]
     7b8:	ldrd	r8, [sp, #16]
     7bc:	ldrd	sl, [sp, #24]
     7c0:	add	sp, sp, #32
     7c4:	pop	{pc}		; (ldr pc, [sp], #4)
     7c8:	mov	r4, #1
     7cc:	mov	r1, #0
     7d0:	add	r0, sp, #72	; 0x48
     7d4:	bl	0 <coda_cursor_goto_array_element_by_index>
     7d8:	subs	r5, r0, #0
     7dc:	bne	824 <read_array+0x118>
     7e0:	sub	sl, r4, #1
     7e4:	b	7f4 <read_array+0xe8>
     7e8:	cmp	r5, r4
     7ec:	add	r6, r6, r8
     7f0:	bge	7a8 <read_array+0x9c>
     7f4:	mov	r1, r6
     7f8:	add	r0, sp, #72	; 0x48
     7fc:	blx	r7
     800:	cmp	r0, #0
     804:	add	r0, sp, #72	; 0x48
     808:	bne	824 <read_array+0x118>
     80c:	cmp	sl, r5
     810:	add	r5, r5, #1
     814:	ble	7e8 <read_array+0xdc>
     818:	bl	0 <coda_cursor_goto_next_array_element>
     81c:	cmp	r0, #0
     820:	beq	7e8 <read_array+0xdc>
     824:	mvn	r9, #0
     828:	b	7a8 <read_array+0x9c>
     82c:	mov	lr, #1
     830:	mov	r3, sp
     834:	mov	r0, lr
     838:	add	ip, sp, #40	; 0x28
     83c:	mov	r2, r9
     840:	str	lr, [sp, #36]	; 0x24
     844:	ldr	lr, [r3, #4]!
     848:	add	r2, r2, #1
     84c:	cmp	r1, r2
     850:	mul	r0, lr, r0
     854:	str	r0, [ip], #4
     858:	bgt	844 <read_array+0x138>
     85c:	add	r3, sp, #592	; 0x250
     860:	add	r3, r3, r1, lsl #2
     864:	ldr	r5, [r3, #-556]	; 0xfffffdd4
     868:	cmp	r5, #0
     86c:	ble	7a8 <read_array+0x9c>
     870:	add	r3, sp, #592	; 0x250
     874:	add	r0, sp, #72	; 0x48
     878:	add	r3, r3, r1, lsl #2
     87c:	mov	r1, #0
     880:	ldr	sl, [r3, #-560]	; 0xfffffdd0
     884:	bl	0 <coda_cursor_goto_array_element_by_index>
     888:	subs	fp, r0, #0
     88c:	bne	824 <read_array+0x118>
     890:	mov	r4, fp
     894:	mla	r1, r8, r4, r6
     898:	add	r0, sp, #72	; 0x48
     89c:	blx	r7
     8a0:	cmp	r0, #0
     8a4:	bne	824 <read_array+0x118>
     8a8:	add	fp, fp, #1
     8ac:	cmp	r5, fp
     8b0:	bgt	938 <read_array+0x22c>
     8b4:	add	r4, r4, sl
     8b8:	cmp	r5, r4
     8bc:	bgt	894 <read_array+0x188>
     8c0:	cmp	r5, fp
     8c4:	beq	7a8 <read_array+0x9c>
     8c8:	ldr	r3, [sp]
     8cc:	add	r2, sp, #592	; 0x250
     8d0:	add	r2, r2, r3, lsl #2
     8d4:	subs	r1, r3, #3
     8d8:	ldr	r0, [r2, #-556]	; 0xfffffdd4
     8dc:	ldr	r2, [r2, #-564]	; 0xfffffdcc
     8e0:	sub	r2, r2, r0
     8e4:	add	r4, r4, r2
     8e8:	bmi	894 <read_array+0x188>
     8ec:	add	r2, sp, #592	; 0x250
     8f0:	add	r2, r2, r3, lsl #2
     8f4:	ldr	r0, [r2, #-560]	; 0xfffffdd0
     8f8:	cmp	r0, r4
     8fc:	bgt	894 <read_array+0x188>
     900:	sub	r3, r3, #-1073741822	; 0xc0000002
     904:	add	r2, sp, #36	; 0x24
     908:	add	r3, r2, r3, lsl #2
     90c:	b	91c <read_array+0x210>
     910:	ldr	r0, [r3, #4]
     914:	cmp	r0, r4
     918:	bgt	894 <read_array+0x188>
     91c:	ldr	r2, [r3, #-4]!
     920:	sub	r1, r1, #1
     924:	cmn	r1, #1
     928:	sub	r2, r2, r0
     92c:	add	r4, r4, r2
     930:	bne	910 <read_array+0x204>
     934:	b	894 <read_array+0x188>
     938:	add	r0, sp, #72	; 0x48
     93c:	bl	0 <coda_cursor_goto_next_array_element>
     940:	cmp	r0, #0
     944:	bne	824 <read_array+0x118>
     948:	add	r4, r4, sl
     94c:	cmp	r4, r5
     950:	blt	894 <read_array+0x188>
     954:	b	8c8 <read_array+0x1bc>

00000958 <read_partial_array>:
     958:	strd	r4, [sp, #-28]!	; 0xffffffe4
     95c:	mov	r4, r2
     960:	mov	r2, #520	; 0x208
     964:	strd	r6, [sp, #8]
     968:	mov	r6, r3
     96c:	mov	r7, r1
     970:	strd	r8, [sp, #16]
     974:	mov	r1, r0
     978:	str	lr, [sp, #24]
     97c:	sub	sp, sp, #524	; 0x20c
     980:	mov	r0, sp
     984:	ldr	r8, [sp, #556]	; 0x22c
     988:	bl	0 <memcpy>
     98c:	cmp	r6, #0
     990:	bgt	9b0 <read_partial_array+0x58>
     994:	mov	r0, #0
     998:	add	sp, sp, #524	; 0x20c
     99c:	ldrd	r4, [sp]
     9a0:	ldrd	r6, [sp, #8]
     9a4:	ldrd	r8, [sp, #16]
     9a8:	add	sp, sp, #24
     9ac:	pop	{pc}		; (ldr pc, [sp], #4)
     9b0:	mov	r1, r4
     9b4:	mov	r0, sp
     9b8:	bl	0 <coda_cursor_goto_array_element_by_index>
     9bc:	subs	r4, r0, #0
     9c0:	bne	a0c <read_partial_array+0xb4>
     9c4:	sub	r9, r6, #1
     9c8:	ldr	r5, [sp, #552]	; 0x228
     9cc:	b	9dc <read_partial_array+0x84>
     9d0:	cmp	r6, r4
     9d4:	add	r5, r5, r8
     9d8:	beq	994 <read_partial_array+0x3c>
     9dc:	mov	r1, r5
     9e0:	mov	r0, sp
     9e4:	blx	r7
     9e8:	cmp	r0, #0
     9ec:	mov	r0, sp
     9f0:	bne	a0c <read_partial_array+0xb4>
     9f4:	cmp	r9, r4
     9f8:	add	r4, r4, #1
     9fc:	ble	9d0 <read_partial_array+0x78>
     a00:	bl	0 <coda_cursor_goto_next_array_element>
     a04:	cmp	r0, #0
     a08:	beq	9d0 <read_partial_array+0x78>
     a0c:	mvn	r0, #0
     a10:	b	998 <read_partial_array+0x40>

00000a14 <transpose_array>:
     a14:	strd	r4, [sp, #-36]!	; 0xffffffdc
     a18:	strd	r6, [sp, #8]
     a1c:	mov	r6, r2
     a20:	strd	r8, [sp, #16]
     a24:	strd	sl, [sp, #24]
     a28:	str	lr, [sp, #32]
     a2c:	sub	sp, sp, #164	; 0xa4
     a30:	add	r5, sp, #20
     a34:	mov	r2, r5
     a38:	str	r1, [sp, #8]
     a3c:	add	r1, sp, #16
     a40:	bl	0 <coda_cursor_get_array_dim>
     a44:	subs	r4, r0, #0
     a48:	bne	d7c <transpose_array+0x368>
     a4c:	ldr	r9, [sp, #16]
     a50:	cmp	r9, #1
     a54:	ble	bd4 <transpose_array+0x1c0>
     a58:	sub	r3, r9, #-1073741823	; 0xc0000001
     a5c:	add	r1, sp, #16
     a60:	lsl	r2, r3, #2
     a64:	add	ip, sp, #84	; 0x54
     a68:	add	r0, sp, #120	; 0x78
     a6c:	mov	r7, #1
     a70:	mov	r8, r4
     a74:	add	r3, r5, r2
     a78:	cmp	r3, r5
     a7c:	ldr	sl, [r1, #4]!
     a80:	str	r8, [ip, #4]!
     a84:	ldr	lr, [r3], #-4
     a88:	mul	r7, sl, r7
     a8c:	str	lr, [r0, #4]!
     a90:	bne	a78 <transpose_array+0x64>
     a94:	cmp	r7, #1
     a98:	ble	bd4 <transpose_array+0x1c0>
     a9c:	lsl	r9, r9, #2
     aa0:	add	r3, sp, #160	; 0xa0
     aa4:	mov	lr, #1
     aa8:	add	ip, sp, #52	; 0x34
     aac:	mov	r1, lr
     ab0:	add	r5, r3, r9
     ab4:	add	r3, sp, #124	; 0x7c
     ab8:	add	r0, r3, r2
     abc:	add	r3, ip, r2
     ac0:	mov	r2, lr
     ac4:	str	lr, [r5, #-108]	; 0xffffff94
     ac8:	str	lr, [r5, #-36]	; 0xffffffdc
     acc:	b	ad4 <transpose_array+0xc0>
     ad0:	ldr	r1, [r0], #-4
     ad4:	mul	r2, r1, r2
     ad8:	cmp	r3, ip
     adc:	str	r2, [r3], #-4
     ae0:	bne	ad0 <transpose_array+0xbc>
     ae4:	mul	r0, r6, r7
     ae8:	add	r3, sp, #160	; 0xa0
     aec:	add	r9, r3, r9
     af0:	mov	r3, #0
     af4:	str	r3, [r9, #-72]	; 0xffffffb8
     af8:	str	r3, [r9, #-36]	; 0xffffffdc
     afc:	str	r0, [sp, #12]
     b00:	bl	0 <malloc>
     b04:	subs	r5, r0, #0
     b08:	beq	d84 <transpose_array+0x370>
     b0c:	sub	r6, r6, #1
     b10:	cmp	r6, #7
     b14:	ldrls	pc, [pc, r6, lsl #2]
     b18:	b	db0 <transpose_array+0x39c>
     b1c:	.word	0x00000bf4
     b20:	.word	0x00000c78
     b24:	.word	0x00000db0
     b28:	.word	0x00000cfc
     b2c:	.word	0x00000db0
     b30:	.word	0x00000db0
     b34:	.word	0x00000db0
     b38:	.word	0x00000b3c
     b3c:	ldr	r6, [sp, #8]
     b40:	mov	r3, #0
     b44:	mov	lr, r3
     b48:	ldr	r8, [sp, #52]	; 0x34
     b4c:	add	ip, r6, r7, lsl #3
     b50:	ldr	r7, [sp, #124]	; 0x7c
     b54:	lsl	r9, r3, #3
     b58:	add	r3, r3, r8
     b5c:	ldr	r2, [sp, #88]	; 0x58
     b60:	ldrd	r0, [r6], #8
     b64:	add	r2, r2, #1
     b68:	cmp	r2, r7
     b6c:	strd	r0, [r5, r9]
     b70:	str	r2, [sp, #88]	; 0x58
     b74:	bne	bb4 <transpose_array+0x1a0>
     b78:	add	r2, sp, #88	; 0x58
     b7c:	add	sl, sp, #56	; 0x38
     b80:	add	r9, sp, #128	; 0x80
     b84:	mov	r0, r8
     b88:	mov	r1, r7
     b8c:	str	lr, [r2]
     b90:	mls	r3, r0, r1, r3
     b94:	ldr	fp, [r2, #4]!
     b98:	ldr	r1, [r9], #4
     b9c:	ldr	r0, [sl], #4
     ba0:	add	fp, fp, #1
     ba4:	cmp	fp, r1
     ba8:	str	fp, [r2]
     bac:	add	r3, r0, r3
     bb0:	beq	b8c <transpose_array+0x178>
     bb4:	cmp	r6, ip
     bb8:	bne	b54 <transpose_array+0x140>
     bbc:	mov	r1, r5
     bc0:	ldr	r0, [sp, #8]
     bc4:	ldr	r2, [sp, #12]
     bc8:	bl	0 <memcpy>
     bcc:	mov	r0, r5
     bd0:	bl	0 <free>
     bd4:	mov	r0, r4
     bd8:	add	sp, sp, #164	; 0xa4
     bdc:	ldrd	r4, [sp]
     be0:	ldrd	r6, [sp, #8]
     be4:	ldrd	r8, [sp, #16]
     be8:	ldrd	sl, [sp, #24]
     bec:	add	sp, sp, #32
     bf0:	pop	{pc}		; (ldr pc, [sp], #4)
     bf4:	ldr	r3, [sp, #8]
     bf8:	mov	r2, #0
     bfc:	mov	r8, r2
     c00:	ldr	fp, [sp, #52]	; 0x34
     c04:	ldr	sl, [sp, #124]	; 0x7c
     c08:	sub	r9, r3, #1
     c0c:	add	r7, r9, r7
     c10:	ldr	r3, [sp, #88]	; 0x58
     c14:	ldrb	r1, [r9, #1]!
     c18:	add	r3, r3, #1
     c1c:	cmp	r3, sl
     c20:	strb	r1, [r5, r2]
     c24:	add	r2, r2, fp
     c28:	str	r3, [sp, #88]	; 0x58
     c2c:	bne	c6c <transpose_array+0x258>
     c30:	add	r1, sp, #88	; 0x58
     c34:	add	r6, sp, #56	; 0x38
     c38:	add	lr, sp, #128	; 0x80
     c3c:	mov	ip, fp
     c40:	mov	r0, sl
     c44:	str	r8, [r1]
     c48:	mls	r2, ip, r0, r2
     c4c:	ldr	r3, [r1, #4]!
     c50:	ldr	r0, [lr], #4
     c54:	ldr	ip, [r6], #4
     c58:	add	r3, r3, #1
     c5c:	cmp	r3, r0
     c60:	str	r3, [r1]
     c64:	add	r2, ip, r2
     c68:	beq	c44 <transpose_array+0x230>
     c6c:	cmp	r7, r9
     c70:	bne	c10 <transpose_array+0x1fc>
     c74:	b	bbc <transpose_array+0x1a8>
     c78:	ldr	r9, [sp, #8]
     c7c:	mov	r2, #0
     c80:	mov	r8, r2
     c84:	ldr	fp, [sp, #52]	; 0x34
     c88:	ldr	sl, [sp, #124]	; 0x7c
     c8c:	add	r7, r9, r7, lsl #1
     c90:	ldr	r3, [sp, #88]	; 0x58
     c94:	lsl	r1, r2, #1
     c98:	add	r2, r2, fp
     c9c:	ldrh	r0, [r9], #2
     ca0:	add	r3, r3, #1
     ca4:	cmp	r3, sl
     ca8:	strh	r0, [r5, r1]
     cac:	str	r3, [sp, #88]	; 0x58
     cb0:	bne	cf0 <transpose_array+0x2dc>
     cb4:	add	r1, sp, #88	; 0x58
     cb8:	add	r6, sp, #56	; 0x38
     cbc:	add	lr, sp, #128	; 0x80
     cc0:	mov	ip, fp
     cc4:	mov	r0, sl
     cc8:	str	r8, [r1]
     ccc:	mls	r2, ip, r0, r2
     cd0:	ldr	r3, [r1, #4]!
     cd4:	ldr	r0, [lr], #4
     cd8:	ldr	ip, [r6], #4
     cdc:	add	r3, r3, #1
     ce0:	cmp	r3, r0
     ce4:	str	r3, [r1]
     ce8:	add	r2, ip, r2
     cec:	beq	cc8 <transpose_array+0x2b4>
     cf0:	cmp	r9, r7
     cf4:	bne	c90 <transpose_array+0x27c>
     cf8:	b	bbc <transpose_array+0x1a8>
     cfc:	ldr	r9, [sp, #8]
     d00:	mov	r2, #0
     d04:	mov	r8, r2
     d08:	ldr	fp, [sp, #52]	; 0x34
     d0c:	ldr	sl, [sp, #124]	; 0x7c
     d10:	add	r7, r9, r7, lsl #2
     d14:	ldr	r3, [sp, #88]	; 0x58
     d18:	ldr	r1, [r9], #4
     d1c:	add	r3, r3, #1
     d20:	cmp	sl, r3
     d24:	str	r1, [r5, r2, lsl #2]
     d28:	add	r2, r2, fp
     d2c:	str	r3, [sp, #88]	; 0x58
     d30:	bne	d70 <transpose_array+0x35c>
     d34:	add	r1, sp, #88	; 0x58
     d38:	add	r6, sp, #56	; 0x38
     d3c:	add	lr, sp, #128	; 0x80
     d40:	mov	ip, fp
     d44:	mov	r0, sl
     d48:	str	r8, [r1]
     d4c:	mls	r2, ip, r0, r2
     d50:	ldr	r3, [r1, #4]!
     d54:	ldr	r0, [lr], #4
     d58:	ldr	ip, [r6], #4
     d5c:	add	r3, r3, #1
     d60:	cmp	r3, r0
     d64:	str	r3, [r1]
     d68:	add	r2, ip, r2
     d6c:	beq	d48 <transpose_array+0x334>
     d70:	cmp	r7, r9
     d74:	bne	d14 <transpose_array+0x300>
     d78:	b	bbc <transpose_array+0x1a8>
     d7c:	mvn	r4, #0
     d80:	b	bd4 <transpose_array+0x1c0>
     d84:	mov	r0, #93	; 0x5d
     d88:	movw	r3, #0
     d8c:	movt	r3, #0
     d90:	movw	r1, #0
     d94:	movt	r1, #0
     d98:	str	r0, [sp]
     d9c:	mvn	r0, #0
     da0:	ldr	r2, [sp, #12]
     da4:	mov	r4, r0
     da8:	bl	0 <coda_set_error>
     dac:	b	bd4 <transpose_array+0x1c0>
     db0:	movw	r1, #0
     db4:	movt	r1, #0
     db8:	ldr	r3, [pc, #12]	; dcc <transpose_array+0x3b8>
     dbc:	movw	r0, #0
     dc0:	movt	r0, #0
     dc4:	mov	r2, #172	; 0xac
     dc8:	bl	0 <__assert_fail>
     dcc:	.word	0x0000000c

00000dd0 <coda_bin_cursor_get_bit_size>:
     dd0:	ldr	r3, [r0, #4]
     dd4:	strd	r4, [sp, #-32]!	; 0xffffffe0
     dd8:	add	r3, r0, r3, lsl #4
     ddc:	ldr	r4, [r3, #-8]
     de0:	ldr	r3, [r4]
     de4:	str	r6, [sp, #8]
     de8:	strd	r8, [sp, #12]
     dec:	strd	sl, [sp, #20]
     df0:	str	lr, [sp, #28]
     df4:	sub	sp, sp, #520	; 0x208
     df8:	cmp	r3, #99	; 0x63
     dfc:	ldrhi	r4, [r4, #4]
     e00:	ldrd	r2, [r4, #24]
     e04:	cmp	r2, #0
     e08:	sbcs	ip, r3, #0
     e0c:	movge	r0, #0
     e10:	strdge	r2, [r1]
     e14:	bge	e50 <coda_bin_cursor_get_bit_size+0x80>
     e18:	ldr	r3, [r4, #8]
     e1c:	mov	r6, r1
     e20:	mov	r5, r0
     e24:	cmp	r3, #6
     e28:	ldrls	pc, [pc, r3, lsl #2]
     e2c:	b	e4c <coda_bin_cursor_get_bit_size+0x7c>
     e30:	.word	0x00000ea8
     e34:	.word	0x00000ea8
     e38:	.word	0x00000eb0
     e3c:	.word	0x00000eb0
     e40:	.word	0x00000eb0
     e44:	.word	0x00000eb0
     e48:	.word	0x00000e6c
     e4c:	mov	r0, #0
     e50:	add	sp, sp, #520	; 0x208
     e54:	ldrd	r4, [sp]
     e58:	ldr	r6, [sp, #8]
     e5c:	ldrd	r8, [sp, #12]
     e60:	ldrd	sl, [sp, #20]
     e64:	add	sp, sp, #28
     e68:	pop	{pc}		; (ldr pc, [sp], #4)
     e6c:	mov	r1, r0
     e70:	mov	r2, #520	; 0x208
     e74:	mov	r0, sp
     e78:	bl	0 <memcpy>
     e7c:	mov	r0, sp
     e80:	bl	0 <coda_ascbin_cursor_use_base_type_of_special_type>
     e84:	cmp	r0, #0
     e88:	bne	ea0 <coda_bin_cursor_get_bit_size+0xd0>
     e8c:	mov	r1, r6
     e90:	mov	r0, sp
     e94:	bl	0 <coda_cursor_get_bit_size>
     e98:	cmp	r0, #0
     e9c:	beq	e50 <coda_bin_cursor_get_bit_size+0x80>
     ea0:	mvn	r0, #0
     ea4:	b	e50 <coda_bin_cursor_get_bit_size+0x80>
     ea8:	bl	0 <coda_ascbin_cursor_get_bit_size>
     eac:	b	e50 <coda_bin_cursor_get_bit_size+0x80>
     eb0:	ldr	r0, [r4, #32]
     eb4:	cmp	r0, #0
     eb8:	beq	f34 <coda_bin_cursor_get_bit_size+0x164>
     ebc:	mov	r2, r1
     ec0:	mov	r1, r5
     ec4:	bl	0 <coda_expression_eval_integer>
     ec8:	cmp	r0, #0
     ecc:	bne	f44 <coda_bin_cursor_get_bit_size+0x174>
     ed0:	ldrd	sl, [r4, #24]
     ed4:	mvn	r9, #0
     ed8:	mvn	r8, #7
     edc:	ldrd	r2, [r6]
     ee0:	cmp	fp, r9
     ee4:	cmpeq	sl, r8
     ee8:	bne	f04 <coda_bin_cursor_get_bit_size+0x134>
     eec:	lsl	r1, r3, #3
     ef0:	lsl	ip, r2, #3
     ef4:	orr	r1, r1, r2, lsr #29
     ef8:	mov	r2, ip
     efc:	mov	r3, r1
     f00:	strd	r2, [r6]
     f04:	cmp	r2, #0
     f08:	sbcs	r1, r3, #0
     f0c:	bge	e50 <coda_bin_cursor_get_bit_size+0x80>
     f10:	movw	r1, #0
     f14:	movt	r1, #0
     f18:	movw	r0, #65236	; 0xfed4
     f1c:	movt	r0, #65535	; 0xffff
     f20:	bl	0 <coda_set_error>
     f24:	mov	r0, r5
     f28:	bl	0 <coda_cursor_add_to_error_message>
     f2c:	mvn	r0, #0
     f30:	b	e50 <coda_bin_cursor_get_bit_size+0x80>
     f34:	mvn	r2, #0
     f38:	mvn	r3, #0
     f3c:	strd	r2, [r1]
     f40:	b	e50 <coda_bin_cursor_get_bit_size+0x80>
     f44:	movw	r0, #0
     f48:	movt	r0, #0
     f4c:	bl	0 <coda_add_error_message>
     f50:	mov	r0, r5
     f54:	bl	0 <coda_cursor_add_to_error_message>
     f58:	mvn	r0, #0
     f5c:	b	e50 <coda_bin_cursor_get_bit_size+0x80>

00000f60 <coda_bin_cursor_read_int8>:
     f60:	ldr	r3, [r0, #4]
     f64:	strd	r4, [sp, #-36]!	; 0xffffffdc
     f68:	mov	r5, r1
     f6c:	mov	r4, r0
     f70:	sub	r3, r3, #1
     f74:	add	r2, r0, r3, lsl #4
     f78:	add	r3, r3, #1
     f7c:	ldr	r2, [r2, #8]
     f80:	ldr	r1, [r2]
     f84:	strd	r6, [sp, #8]
     f88:	strd	r8, [sp, #16]
     f8c:	ldr	r8, [r0, r3, lsl #4]
     f90:	strd	sl, [sp, #24]
     f94:	cmp	r1, #99	; 0x63
     f98:	str	lr, [sp, #32]
     f9c:	sub	sp, sp, #76	; 0x4c
     fa0:	ldrhi	r2, [r2, #4]
     fa4:	ldrd	r0, [r2, #24]
     fa8:	add	r2, r4, r3, lsl #4
     fac:	ldr	r9, [r2, #4]
     fb0:	cmp	r0, #0
     fb4:	strd	r0, [sp, #16]
     fb8:	sbcs	r3, r1, #0
     fbc:	blt	10b4 <coda_bin_cursor_read_int8+0x154>
     fc0:	and	r2, r8, #7
     fc4:	mov	r3, #0
     fc8:	orrs	r3, r2, r3
     fcc:	beq	1078 <coda_bin_cursor_read_int8+0x118>
     fd0:	lsr	sl, r0, #3
     fd4:	and	r3, r0, #7
     fd8:	adds	r3, r3, #0
     fdc:	asr	fp, r1, #3
     fe0:	orr	sl, sl, r1, lsl #29
     fe4:	movne	r3, #1
     fe8:	adds	r6, sl, r3
     fec:	adc	r7, fp, #0
     ff0:	cmp	r6, #2
     ff4:	sbcs	r3, r7, #0
     ff8:	bge	1138 <coda_bin_cursor_read_int8+0x1d8>
     ffc:	mov	ip, #0
    1000:	mov	r2, r8
    1004:	strd	r0, [sp]
    1008:	mov	r3, r9
    100c:	str	r5, [sp, #8]
    1010:	strb	ip, [r5]
    1014:	ldr	r0, [r4]
    1018:	bl	178 <read_bits>
    101c:	cmp	r0, #0
    1020:	bne	1130 <coda_bin_cursor_read_int8+0x1d0>
    1024:	ldrd	r6, [sp, #16]
    1028:	cmp	r6, #8
    102c:	sbcs	r3, r7, #0
    1030:	movge	r0, #0
    1034:	bge	105c <coda_bin_cursor_read_int8+0xfc>
    1038:	ldrb	r1, [r5]
    103c:	sub	r0, r6, #1
    1040:	asr	r0, r1, r0
    1044:	ands	r0, r0, #1
    1048:	beq	105c <coda_bin_cursor_read_int8+0xfc>
    104c:	mvn	r3, #0
    1050:	mov	r0, #0
    1054:	orr	r2, r1, r3, lsl r6
    1058:	strb	r2, [r5]
    105c:	add	sp, sp, #76	; 0x4c
    1060:	ldrd	r4, [sp]
    1064:	ldrd	r6, [sp, #8]
    1068:	ldrd	r8, [sp, #16]
    106c:	ldrd	sl, [sp, #24]
    1070:	add	sp, sp, #32
    1074:	pop	{pc}		; (ldr pc, [sp], #4)
    1078:	cmp	r1, #0
    107c:	cmpeq	r0, #8
    1080:	bne	fd0 <coda_bin_cursor_read_int8+0x70>
    1084:	lsr	r2, r8, #3
    1088:	mov	r6, #1
    108c:	mov	r7, #0
    1090:	asr	r3, r9, #3
    1094:	str	r5, [sp, #8]
    1098:	orr	r2, r2, r9, lsl #29
    109c:	ldr	r0, [r4]
    10a0:	strd	r6, [sp]
    10a4:	bl	0 <read_bytes>
    10a8:	cmp	r0, #0
    10ac:	beq	1024 <coda_bin_cursor_read_int8+0xc4>
    10b0:	b	1130 <coda_bin_cursor_read_int8+0x1d0>
    10b4:	add	r1, sp, #16
    10b8:	mov	r0, r4
    10bc:	bl	dd0 <coda_bin_cursor_get_bit_size>
    10c0:	cmp	r0, #0
    10c4:	bne	1130 <coda_bin_cursor_read_int8+0x1d0>
    10c8:	ldrd	r0, [sp, #16]
    10cc:	cmp	r1, #0
    10d0:	cmpeq	r0, #8
    10d4:	bls	fc0 <coda_bin_cursor_read_int8+0x60>
    10d8:	add	r2, sp, #24
    10dc:	bl	0 <coda_str64>
    10e0:	ldr	r3, [r4, #4]
    10e4:	add	r2, sp, #48	; 0x30
    10e8:	add	r1, r4, r3, lsl #4
    10ec:	ldr	r0, [r4, r3, lsl #4]
    10f0:	ldr	r1, [r1, #4]
    10f4:	lsr	r0, r0, #3
    10f8:	orr	r0, r0, r1, lsl #29
    10fc:	asr	r1, r1, #3
    1100:	bl	0 <coda_str64>
    1104:	ldr	ip, [r4, #4]
    1108:	movw	r1, #0
    110c:	movt	r1, #0
    1110:	movw	r0, #65236	; 0xfed4
    1114:	movt	r0, #65535	; 0xffff
    1118:	add	r3, sp, #48	; 0x30
    111c:	add	r2, sp, #24
    1120:	ldr	ip, [r4, ip, lsl #4]
    1124:	and	ip, ip, #7
    1128:	str	ip, [sp]
    112c:	bl	0 <coda_set_error>
    1130:	mvn	r0, #0
    1134:	b	105c <coda_bin_cursor_read_int8+0xfc>
    1138:	movw	r1, #0
    113c:	movt	r1, #0
    1140:	ldr	r3, [pc, #12]	; 1154 <coda_bin_cursor_read_int8+0x1f4>
    1144:	movw	r0, #0
    1148:	movt	r0, #0
    114c:	mov	r2, #177	; 0xb1
    1150:	bl	0 <__assert_fail>
    1154:	.word	0x0000001c

00001158 <coda_bin_cursor_read_uint8>:
    1158:	ldr	r3, [r0, #4]
    115c:	strd	r4, [sp, #-36]!	; 0xffffffdc
    1160:	mov	r5, r1
    1164:	mov	r4, r0
    1168:	sub	r3, r3, #1
    116c:	add	r2, r0, r3, lsl #4
    1170:	add	r3, r3, #1
    1174:	ldr	r2, [r2, #8]
    1178:	ldr	r1, [r2]
    117c:	strd	r6, [sp, #8]
    1180:	mvn	r7, #0
    1184:	mvn	r6, #0
    1188:	strd	r8, [sp, #16]
    118c:	ldr	r9, [r0, r3, lsl #4]
    1190:	strd	sl, [sp, #24]
    1194:	cmp	r1, #99	; 0x63
    1198:	str	lr, [sp, #32]
    119c:	sub	sp, sp, #76	; 0x4c
    11a0:	ldrhi	r2, [r2, #4]
    11a4:	ldrd	r0, [r2, #24]
    11a8:	add	r2, r4, r3, lsl #4
    11ac:	ldr	r8, [r2, #4]
    11b0:	cmp	r1, r7
    11b4:	strd	r0, [sp, #16]
    11b8:	cmpeq	r0, r6
    11bc:	beq	1284 <coda_bin_cursor_read_uint8+0x12c>
    11c0:	and	r2, r9, #7
    11c4:	mov	r3, #0
    11c8:	orrs	r3, r2, r3
    11cc:	beq	1244 <coda_bin_cursor_read_uint8+0xec>
    11d0:	lsr	sl, r0, #3
    11d4:	and	r3, r0, #7
    11d8:	adds	r3, r3, #0
    11dc:	asr	fp, r1, #3
    11e0:	orr	sl, sl, r1, lsl #29
    11e4:	movne	r3, #1
    11e8:	adds	r6, sl, r3
    11ec:	adc	r7, fp, #0
    11f0:	cmp	r6, #2
    11f4:	sbcs	r3, r7, #0
    11f8:	bge	1310 <coda_bin_cursor_read_uint8+0x1b8>
    11fc:	mov	ip, #0
    1200:	mov	r2, r9
    1204:	strd	r0, [sp]
    1208:	mov	r3, r8
    120c:	str	r5, [sp, #8]
    1210:	strb	ip, [r5]
    1214:	ldr	r0, [r4]
    1218:	bl	178 <read_bits>
    121c:	adds	r0, r0, #0
    1220:	movne	r0, #1
    1224:	rsb	r0, r0, #0
    1228:	add	sp, sp, #76	; 0x4c
    122c:	ldrd	r4, [sp]
    1230:	ldrd	r6, [sp, #8]
    1234:	ldrd	r8, [sp, #16]
    1238:	ldrd	sl, [sp, #24]
    123c:	add	sp, sp, #32
    1240:	pop	{pc}		; (ldr pc, [sp], #4)
    1244:	cmp	r1, #0
    1248:	cmpeq	r0, #8
    124c:	bne	11d0 <coda_bin_cursor_read_uint8+0x78>
    1250:	lsr	r2, r9, #3
    1254:	mov	r6, #1
    1258:	mov	r7, #0
    125c:	asr	r3, r8, #3
    1260:	str	r5, [sp, #8]
    1264:	orr	r2, r2, r8, lsl #29
    1268:	ldr	r0, [r4]
    126c:	strd	r6, [sp]
    1270:	bl	0 <read_bytes>
    1274:	adds	r0, r0, #0
    1278:	movne	r0, #1
    127c:	rsb	r0, r0, #0
    1280:	b	1228 <coda_bin_cursor_read_uint8+0xd0>
    1284:	add	r1, sp, #16
    1288:	mov	r0, r4
    128c:	bl	dd0 <coda_bin_cursor_get_bit_size>
    1290:	cmp	r0, #0
    1294:	bne	1308 <coda_bin_cursor_read_uint8+0x1b0>
    1298:	ldrd	r0, [sp, #16]
    129c:	cmp	r1, #0
    12a0:	cmpeq	r0, #8
    12a4:	bls	11c0 <coda_bin_cursor_read_uint8+0x68>
    12a8:	add	r2, sp, #24
    12ac:	bl	0 <coda_str64>
    12b0:	ldr	r3, [r4, #4]
    12b4:	add	r2, sp, #48	; 0x30
    12b8:	add	r1, r4, r3, lsl #4
    12bc:	ldr	r0, [r4, r3, lsl #4]
    12c0:	ldr	r1, [r1, #4]
    12c4:	lsr	r0, r0, #3
    12c8:	orr	r0, r0, r1, lsl #29
    12cc:	asr	r1, r1, #3
    12d0:	bl	0 <coda_str64>
    12d4:	ldr	ip, [r4, #4]
    12d8:	add	r3, sp, #48	; 0x30
    12dc:	add	r2, sp, #24
    12e0:	movw	r1, #0
    12e4:	movt	r1, #0
    12e8:	movw	r0, #65236	; 0xfed4
    12ec:	movt	r0, #65535	; 0xffff
    12f0:	ldr	ip, [r4, ip, lsl #4]
    12f4:	and	ip, ip, #7
    12f8:	str	ip, [sp]
    12fc:	bl	0 <coda_set_error>
    1300:	mvn	r0, #0
    1304:	b	1228 <coda_bin_cursor_read_uint8+0xd0>
    1308:	mvn	r0, #0
    130c:	b	1228 <coda_bin_cursor_read_uint8+0xd0>
    1310:	movw	r1, #0
    1314:	movt	r1, #0
    1318:	ldr	r3, [pc, #12]	; 132c <coda_bin_cursor_read_uint8+0x1d4>
    131c:	movw	r0, #0
    1320:	movt	r0, #0
    1324:	mov	r2, #233	; 0xe9
    1328:	bl	0 <__assert_fail>
    132c:	.word	0x00000038

00001330 <coda_bin_cursor_read_char>:
    1330:	b	1158 <coda_bin_cursor_read_uint8>

00001334 <coda_bin_cursor_read_int16>:
    1334:	ldr	r3, [r0, #4]
    1338:	strd	r4, [sp, #-36]!	; 0xffffffdc
    133c:	mov	r4, r0
    1340:	mov	r5, r1
    1344:	mvn	r1, #0
    1348:	sub	r3, r3, #1
    134c:	add	r2, r0, r3, lsl #4
    1350:	add	r3, r3, #1
    1354:	mvn	r0, #0
    1358:	ldr	ip, [r2, #8]
    135c:	ldr	r2, [ip]
    1360:	strd	r6, [sp, #8]
    1364:	strd	r8, [sp, #16]
    1368:	strd	sl, [sp, #24]
    136c:	str	lr, [sp, #32]
    1370:	sub	sp, sp, #84	; 0x54
    1374:	add	lr, r4, r3, lsl #4
    1378:	cmp	r2, #99	; 0x63
    137c:	ldr	r2, [r4, r3, lsl #4]
    1380:	ldrhi	ip, [ip, #4]
    1384:	ldr	fp, [lr, #4]
    1388:	ldrd	r6, [ip, #24]
    138c:	ldr	sl, [ip, #44]	; 0x2c
    1390:	cmp	r7, r1
    1394:	strd	r6, [sp, #24]
    1398:	cmpeq	r6, r0
    139c:	beq	14c4 <coda_bin_cursor_read_int16+0x190>
    13a0:	and	r8, r2, #7
    13a4:	mov	r9, #0
    13a8:	ldr	r0, [r4]
    13ac:	orrs	r3, r8, r9
    13b0:	beq	1430 <coda_bin_cursor_read_int16+0xfc>
    13b4:	cmp	sl, #0
    13b8:	beq	1470 <coda_bin_cursor_read_int16+0x13c>
    13bc:	mov	r1, #0
    13c0:	mov	r3, fp
    13c4:	strd	r6, [sp]
    13c8:	str	r5, [sp, #8]
    13cc:	strh	r1, [r5]
    13d0:	bl	178 <read_bits>
    13d4:	cmp	r0, #0
    13d8:	bne	1550 <coda_bin_cursor_read_int16+0x21c>
    13dc:	ldrd	r6, [sp, #24]
    13e0:	cmp	r6, #16
    13e4:	sbcs	r3, r7, #0
    13e8:	movge	r0, #0
    13ec:	bge	1414 <coda_bin_cursor_read_int16+0xe0>
    13f0:	ldrh	r1, [r5]
    13f4:	sub	r0, r6, #1
    13f8:	asr	r0, r1, r0
    13fc:	ands	r0, r0, #1
    1400:	beq	1414 <coda_bin_cursor_read_int16+0xe0>
    1404:	mvn	r3, #0
    1408:	mov	r0, #0
    140c:	orr	r2, r1, r3, lsl r6
    1410:	strh	r2, [r5]
    1414:	add	sp, sp, #84	; 0x54
    1418:	ldrd	r4, [sp]
    141c:	ldrd	r6, [sp, #8]
    1420:	ldrd	r8, [sp, #16]
    1424:	ldrd	sl, [sp, #24]
    1428:	add	sp, sp, #32
    142c:	pop	{pc}		; (ldr pc, [sp], #4)
    1430:	cmp	r7, #0
    1434:	cmpeq	r6, #16
    1438:	bne	13b4 <coda_bin_cursor_read_int16+0x80>
    143c:	lsr	r2, r2, #3
    1440:	mov	r6, #2
    1444:	mov	r7, #0
    1448:	asr	r3, fp, #3
    144c:	orr	r2, r2, fp, lsl #29
    1450:	strd	r6, [sp]
    1454:	str	r5, [sp, #8]
    1458:	bl	0 <read_bytes>
    145c:	cmp	r0, #0
    1460:	bne	1550 <coda_bin_cursor_read_int16+0x21c>
    1464:	cmp	sl, #0
    1468:	bne	13dc <coda_bin_cursor_read_int16+0xa8>
    146c:	b	14a8 <coda_bin_cursor_read_int16+0x174>
    1470:	lsr	r1, r6, #3
    1474:	and	ip, r6, #7
    1478:	mov	r3, fp
    147c:	strh	sl, [r5]
    1480:	orr	r1, r1, r7, lsl #29
    1484:	strd	r6, [sp]
    1488:	rsb	r1, r1, #2
    148c:	cmp	ip, #0
    1490:	subne	r1, r1, #1
    1494:	add	r1, r5, r1
    1498:	str	r1, [sp, #8]
    149c:	bl	178 <read_bits>
    14a0:	cmp	r0, #0
    14a4:	bne	1550 <coda_bin_cursor_read_int16+0x21c>
    14a8:	ldrb	r1, [r5, #1]
    14ac:	mov	r3, #0
    14b0:	ldrb	r2, [r5]
    14b4:	bfi	r3, r1, #0, #8
    14b8:	bfi	r3, r2, #8, #8
    14bc:	strh	r3, [r5]
    14c0:	b	13dc <coda_bin_cursor_read_int16+0xa8>
    14c4:	add	r1, sp, #24
    14c8:	mov	r0, r4
    14cc:	str	r2, [sp, #20]
    14d0:	bl	dd0 <coda_bin_cursor_get_bit_size>
    14d4:	cmp	r0, #0
    14d8:	ldr	r2, [sp, #20]
    14dc:	bne	1550 <coda_bin_cursor_read_int16+0x21c>
    14e0:	ldrd	r6, [sp, #24]
    14e4:	cmp	r7, #0
    14e8:	cmpeq	r6, #16
    14ec:	bls	13a0 <coda_bin_cursor_read_int16+0x6c>
    14f0:	mov	r0, r6
    14f4:	mov	r1, r7
    14f8:	add	r2, sp, #32
    14fc:	bl	0 <coda_str64>
    1500:	ldr	r3, [r4, #4]
    1504:	add	r2, sp, #56	; 0x38
    1508:	add	r1, r4, r3, lsl #4
    150c:	ldr	r0, [r4, r3, lsl #4]
    1510:	ldr	r1, [r1, #4]
    1514:	lsr	r0, r0, #3
    1518:	orr	r0, r0, r1, lsl #29
    151c:	asr	r1, r1, #3
    1520:	bl	0 <coda_str64>
    1524:	ldr	ip, [r4, #4]
    1528:	movw	r1, #0
    152c:	movt	r1, #0
    1530:	movw	r0, #65236	; 0xfed4
    1534:	movt	r0, #65535	; 0xffff
    1538:	add	r3, sp, #56	; 0x38
    153c:	add	r2, sp, #32
    1540:	ldr	ip, [r4, ip, lsl #4]
    1544:	and	ip, ip, #7
    1548:	str	ip, [sp]
    154c:	bl	0 <coda_set_error>
    1550:	mvn	r0, #0
    1554:	b	1414 <coda_bin_cursor_read_int16+0xe0>

00001558 <coda_bin_cursor_read_uint16>:
    1558:	ldr	r3, [r0, #4]
    155c:	strd	r4, [sp, #-36]!	; 0xffffffdc
    1560:	mov	r4, r0
    1564:	mov	r5, r1
    1568:	mvn	r1, #0
    156c:	sub	r3, r3, #1
    1570:	add	r2, r0, r3, lsl #4
    1574:	add	r3, r3, #1
    1578:	mvn	r0, #0
    157c:	ldr	ip, [r2, #8]
    1580:	ldr	r2, [ip]
    1584:	strd	r6, [sp, #8]
    1588:	strd	r8, [sp, #16]
    158c:	strd	sl, [sp, #24]
    1590:	str	lr, [sp, #32]
    1594:	sub	sp, sp, #84	; 0x54
    1598:	add	lr, r4, r3, lsl #4
    159c:	cmp	r2, #99	; 0x63
    15a0:	ldr	r2, [r4, r3, lsl #4]
    15a4:	ldrhi	ip, [ip, #4]
    15a8:	ldr	fp, [lr, #4]
    15ac:	ldrd	r6, [ip, #24]
    15b0:	ldr	sl, [ip, #44]	; 0x2c
    15b4:	cmp	r7, r1
    15b8:	strd	r6, [sp, #24]
    15bc:	cmpeq	r6, r0
    15c0:	beq	16b8 <coda_bin_cursor_read_uint16+0x160>
    15c4:	and	r8, r2, #7
    15c8:	mov	r9, #0
    15cc:	ldr	r0, [r4]
    15d0:	orrs	r3, r8, r9
    15d4:	beq	1638 <coda_bin_cursor_read_uint16+0xe0>
    15d8:	cmp	sl, #0
    15dc:	bne	1678 <coda_bin_cursor_read_uint16+0x120>
    15e0:	lsr	r1, r6, #3
    15e4:	and	ip, r6, #7
    15e8:	mov	r3, fp
    15ec:	strh	sl, [r5]
    15f0:	orr	r1, r1, r7, lsl #29
    15f4:	strd	r6, [sp]
    15f8:	rsb	r1, r1, #2
    15fc:	cmp	ip, #0
    1600:	subne	r1, r1, #1
    1604:	add	r1, r5, r1
    1608:	str	r1, [sp, #8]
    160c:	bl	178 <read_bits>
    1610:	cmp	r0, #0
    1614:	bne	1744 <coda_bin_cursor_read_uint16+0x1ec>
    1618:	ldrb	r1, [r5, #1]
    161c:	mov	r3, #0
    1620:	mov	r0, #0
    1624:	ldrb	r2, [r5]
    1628:	bfi	r3, r1, #0, #8
    162c:	bfi	r3, r2, #8, #8
    1630:	strh	r3, [r5]
    1634:	b	169c <coda_bin_cursor_read_uint16+0x144>
    1638:	cmp	r7, #0
    163c:	cmpeq	r6, #16
    1640:	bne	15d8 <coda_bin_cursor_read_uint16+0x80>
    1644:	lsr	r2, r2, #3
    1648:	mov	r6, #2
    164c:	mov	r7, #0
    1650:	asr	r3, fp, #3
    1654:	orr	r2, r2, fp, lsl #29
    1658:	strd	r6, [sp]
    165c:	str	r5, [sp, #8]
    1660:	bl	0 <read_bytes>
    1664:	cmp	r0, #0
    1668:	bne	1744 <coda_bin_cursor_read_uint16+0x1ec>
    166c:	cmp	sl, #0
    1670:	beq	1618 <coda_bin_cursor_read_uint16+0xc0>
    1674:	b	169c <coda_bin_cursor_read_uint16+0x144>
    1678:	mov	r1, #0
    167c:	mov	r3, fp
    1680:	strd	r6, [sp]
    1684:	str	r5, [sp, #8]
    1688:	strh	r1, [r5]
    168c:	bl	178 <read_bits>
    1690:	adds	r0, r0, #0
    1694:	movne	r0, #1
    1698:	rsb	r0, r0, #0
    169c:	add	sp, sp, #84	; 0x54
    16a0:	ldrd	r4, [sp]
    16a4:	ldrd	r6, [sp, #8]
    16a8:	ldrd	r8, [sp, #16]
    16ac:	ldrd	sl, [sp, #24]
    16b0:	add	sp, sp, #32
    16b4:	pop	{pc}		; (ldr pc, [sp], #4)
    16b8:	add	r1, sp, #24
    16bc:	mov	r0, r4
    16c0:	str	r2, [sp, #20]
    16c4:	bl	dd0 <coda_bin_cursor_get_bit_size>
    16c8:	cmp	r0, #0
    16cc:	ldr	r2, [sp, #20]
    16d0:	bne	1744 <coda_bin_cursor_read_uint16+0x1ec>
    16d4:	ldrd	r6, [sp, #24]
    16d8:	cmp	r7, #0
    16dc:	cmpeq	r6, #16
    16e0:	bls	15c4 <coda_bin_cursor_read_uint16+0x6c>
    16e4:	mov	r0, r6
    16e8:	mov	r1, r7
    16ec:	add	r2, sp, #32
    16f0:	bl	0 <coda_str64>
    16f4:	ldr	r3, [r4, #4]
    16f8:	add	r2, sp, #56	; 0x38
    16fc:	add	r1, r4, r3, lsl #4
    1700:	ldr	r0, [r4, r3, lsl #4]
    1704:	ldr	r1, [r1, #4]
    1708:	lsr	r0, r0, #3
    170c:	orr	r0, r0, r1, lsl #29
    1710:	asr	r1, r1, #3
    1714:	bl	0 <coda_str64>
    1718:	ldr	ip, [r4, #4]
    171c:	movw	r1, #0
    1720:	movt	r1, #0
    1724:	movw	r0, #65236	; 0xfed4
    1728:	movt	r0, #65535	; 0xffff
    172c:	add	r3, sp, #56	; 0x38
    1730:	add	r2, sp, #32
    1734:	ldr	ip, [r4, ip, lsl #4]
    1738:	and	ip, ip, #7
    173c:	str	ip, [sp]
    1740:	bl	0 <coda_set_error>
    1744:	mvn	r0, #0
    1748:	b	169c <coda_bin_cursor_read_uint16+0x144>

0000174c <coda_bin_cursor_read_int32>:
    174c:	ldr	r3, [r0, #4]
    1750:	strd	r4, [sp, #-36]!	; 0xffffffdc
    1754:	mov	r4, r0
    1758:	mov	r5, r1
    175c:	mvn	r1, #0
    1760:	sub	r3, r3, #1
    1764:	add	r2, r0, r3, lsl #4
    1768:	add	r3, r3, #1
    176c:	mvn	r0, #0
    1770:	ldr	ip, [r2, #8]
    1774:	ldr	r2, [ip]
    1778:	strd	r6, [sp, #8]
    177c:	strd	r8, [sp, #16]
    1780:	strd	sl, [sp, #24]
    1784:	str	lr, [sp, #32]
    1788:	sub	sp, sp, #84	; 0x54
    178c:	add	lr, r4, r3, lsl #4
    1790:	cmp	r2, #99	; 0x63
    1794:	ldr	r2, [r4, r3, lsl #4]
    1798:	ldrhi	ip, [ip, #4]
    179c:	ldr	fp, [lr, #4]
    17a0:	ldrd	r6, [ip, #24]
    17a4:	ldr	sl, [ip, #44]	; 0x2c
    17a8:	cmp	r7, r1
    17ac:	strd	r6, [sp, #24]
    17b0:	cmpeq	r6, r0
    17b4:	beq	18f0 <coda_bin_cursor_read_int32+0x1a4>
    17b8:	and	r8, r2, #7
    17bc:	mov	r9, #0
    17c0:	ldr	r0, [r4]
    17c4:	orrs	r3, r8, r9
    17c8:	beq	184c <coda_bin_cursor_read_int32+0x100>
    17cc:	cmp	sl, #0
    17d0:	beq	188c <coda_bin_cursor_read_int32+0x140>
    17d4:	mov	r1, #0
    17d8:	mov	r3, fp
    17dc:	strd	r6, [sp]
    17e0:	str	r5, [sp, #8]
    17e4:	str	r1, [r5]
    17e8:	bl	178 <read_bits>
    17ec:	cmp	r0, #0
    17f0:	bne	197c <coda_bin_cursor_read_int32+0x230>
    17f4:	ldrd	r6, [sp, #24]
    17f8:	cmp	r6, #32
    17fc:	sbcs	r3, r7, #0
    1800:	movge	r0, #0
    1804:	bge	1830 <coda_bin_cursor_read_int32+0xe4>
    1808:	ldr	r2, [r5]
    180c:	sub	r0, r6, #1
    1810:	mov	r3, #1
    1814:	ands	r0, r2, r3, lsl r0
    1818:	beq	1830 <coda_bin_cursor_read_int32+0xe4>
    181c:	lsl	r3, r3, r6
    1820:	mov	r0, #0
    1824:	rsb	r3, r3, #0
    1828:	orr	r3, r3, r2
    182c:	str	r3, [r5]
    1830:	add	sp, sp, #84	; 0x54
    1834:	ldrd	r4, [sp]
    1838:	ldrd	r6, [sp, #8]
    183c:	ldrd	r8, [sp, #16]
    1840:	ldrd	sl, [sp, #24]
    1844:	add	sp, sp, #32
    1848:	pop	{pc}		; (ldr pc, [sp], #4)
    184c:	cmp	r7, #0
    1850:	cmpeq	r6, #32
    1854:	bne	17cc <coda_bin_cursor_read_int32+0x80>
    1858:	lsr	r2, r2, #3
    185c:	mov	r6, #4
    1860:	mov	r7, #0
    1864:	asr	r3, fp, #3
    1868:	orr	r2, r2, fp, lsl #29
    186c:	strd	r6, [sp]
    1870:	str	r5, [sp, #8]
    1874:	bl	0 <read_bytes>
    1878:	cmp	r0, #0
    187c:	bne	197c <coda_bin_cursor_read_int32+0x230>
    1880:	cmp	sl, #0
    1884:	bne	17f4 <coda_bin_cursor_read_int32+0xa8>
    1888:	b	18c4 <coda_bin_cursor_read_int32+0x178>
    188c:	lsr	r1, r6, #3
    1890:	and	ip, r6, #7
    1894:	mov	r3, fp
    1898:	str	sl, [r5]
    189c:	orr	r1, r1, r7, lsl #29
    18a0:	strd	r6, [sp]
    18a4:	rsb	r1, r1, #4
    18a8:	cmp	ip, #0
    18ac:	subne	r1, r1, #1
    18b0:	add	r1, r5, r1
    18b4:	str	r1, [sp, #8]
    18b8:	bl	178 <read_bits>
    18bc:	cmp	r0, #0
    18c0:	bne	197c <coda_bin_cursor_read_int32+0x230>
    18c4:	ldrb	r2, [r5, #3]
    18c8:	mov	r3, #0
    18cc:	ldrb	r0, [r5, #2]
    18d0:	ldrb	r1, [r5, #1]
    18d4:	bfi	r3, r2, #0, #8
    18d8:	ldrb	r2, [r5]
    18dc:	bfi	r3, r0, #8, #8
    18e0:	bfi	r3, r1, #16, #8
    18e4:	bfi	r3, r2, #24, #8
    18e8:	str	r3, [r5]
    18ec:	b	17f4 <coda_bin_cursor_read_int32+0xa8>
    18f0:	add	r1, sp, #24
    18f4:	mov	r0, r4
    18f8:	str	r2, [sp, #20]
    18fc:	bl	dd0 <coda_bin_cursor_get_bit_size>
    1900:	cmp	r0, #0
    1904:	ldr	r2, [sp, #20]
    1908:	bne	197c <coda_bin_cursor_read_int32+0x230>
    190c:	ldrd	r6, [sp, #24]
    1910:	cmp	r7, #0
    1914:	cmpeq	r6, #32
    1918:	bls	17b8 <coda_bin_cursor_read_int32+0x6c>
    191c:	mov	r0, r6
    1920:	mov	r1, r7
    1924:	add	r2, sp, #32
    1928:	bl	0 <coda_str64>
    192c:	ldr	r3, [r4, #4]
    1930:	add	r2, sp, #56	; 0x38
    1934:	add	r1, r4, r3, lsl #4
    1938:	ldr	r0, [r4, r3, lsl #4]
    193c:	ldr	r1, [r1, #4]
    1940:	lsr	r0, r0, #3
    1944:	orr	r0, r0, r1, lsl #29
    1948:	asr	r1, r1, #3
    194c:	bl	0 <coda_str64>
    1950:	ldr	ip, [r4, #4]
    1954:	movw	r1, #0
    1958:	movt	r1, #0
    195c:	movw	r0, #65236	; 0xfed4
    1960:	movt	r0, #65535	; 0xffff
    1964:	add	r3, sp, #56	; 0x38
    1968:	add	r2, sp, #32
    196c:	ldr	ip, [r4, ip, lsl #4]
    1970:	and	ip, ip, #7
    1974:	str	ip, [sp]
    1978:	bl	0 <coda_set_error>
    197c:	mvn	r0, #0
    1980:	b	1830 <coda_bin_cursor_read_int32+0xe4>

00001984 <coda_bin_cursor_read_uint32>:
    1984:	ldr	r3, [r0, #4]
    1988:	strd	r4, [sp, #-36]!	; 0xffffffdc
    198c:	mov	r4, r0
    1990:	mov	r5, r1
    1994:	mvn	r1, #0
    1998:	sub	r3, r3, #1
    199c:	add	r2, r0, r3, lsl #4
    19a0:	add	r3, r3, #1
    19a4:	mvn	r0, #0
    19a8:	ldr	ip, [r2, #8]
    19ac:	ldr	r2, [ip]
    19b0:	strd	r6, [sp, #8]
    19b4:	strd	r8, [sp, #16]
    19b8:	strd	sl, [sp, #24]
    19bc:	str	lr, [sp, #32]
    19c0:	sub	sp, sp, #84	; 0x54
    19c4:	add	lr, r4, r3, lsl #4
    19c8:	cmp	r2, #99	; 0x63
    19cc:	ldr	r2, [r4, r3, lsl #4]
    19d0:	ldrhi	ip, [ip, #4]
    19d4:	ldr	fp, [lr, #4]
    19d8:	ldrd	r6, [ip, #24]
    19dc:	ldr	sl, [ip, #44]	; 0x2c
    19e0:	cmp	r7, r1
    19e4:	strd	r6, [sp, #24]
    19e8:	cmpeq	r6, r0
    19ec:	beq	1af4 <coda_bin_cursor_read_uint32+0x170>
    19f0:	and	r8, r2, #7
    19f4:	mov	r9, #0
    19f8:	ldr	r0, [r4]
    19fc:	orrs	r3, r8, r9
    1a00:	beq	1a74 <coda_bin_cursor_read_uint32+0xf0>
    1a04:	cmp	sl, #0
    1a08:	bne	1ab4 <coda_bin_cursor_read_uint32+0x130>
    1a0c:	lsr	r1, r6, #3
    1a10:	and	ip, r6, #7
    1a14:	mov	r3, fp
    1a18:	str	sl, [r5]
    1a1c:	orr	r1, r1, r7, lsl #29
    1a20:	strd	r6, [sp]
    1a24:	rsb	r1, r1, #4
    1a28:	cmp	ip, #0
    1a2c:	subne	r1, r1, #1
    1a30:	add	r1, r5, r1
    1a34:	str	r1, [sp, #8]
    1a38:	bl	178 <read_bits>
    1a3c:	cmp	r0, #0
    1a40:	bne	1b80 <coda_bin_cursor_read_uint32+0x1fc>
    1a44:	ldrb	r2, [r5, #3]
    1a48:	mov	r3, #0
    1a4c:	mov	r0, r3
    1a50:	ldrb	ip, [r5, #2]
    1a54:	ldrb	r1, [r5, #1]
    1a58:	bfi	r3, r2, #0, #8
    1a5c:	ldrb	r2, [r5]
    1a60:	bfi	r3, ip, #8, #8
    1a64:	bfi	r3, r1, #16, #8
    1a68:	bfi	r3, r2, #24, #8
    1a6c:	str	r3, [r5]
    1a70:	b	1ad8 <coda_bin_cursor_read_uint32+0x154>
    1a74:	cmp	r7, #0
    1a78:	cmpeq	r6, #32
    1a7c:	bne	1a04 <coda_bin_cursor_read_uint32+0x80>
    1a80:	lsr	r2, r2, #3
    1a84:	mov	r6, #4
    1a88:	mov	r7, #0
    1a8c:	asr	r3, fp, #3
    1a90:	orr	r2, r2, fp, lsl #29
    1a94:	strd	r6, [sp]
    1a98:	str	r5, [sp, #8]
    1a9c:	bl	0 <read_bytes>
    1aa0:	cmp	r0, #0
    1aa4:	bne	1b80 <coda_bin_cursor_read_uint32+0x1fc>
    1aa8:	cmp	sl, #0
    1aac:	beq	1a44 <coda_bin_cursor_read_uint32+0xc0>
    1ab0:	b	1ad8 <coda_bin_cursor_read_uint32+0x154>
    1ab4:	mov	r1, #0
    1ab8:	mov	r3, fp
    1abc:	strd	r6, [sp]
    1ac0:	str	r5, [sp, #8]
    1ac4:	str	r1, [r5]
    1ac8:	bl	178 <read_bits>
    1acc:	adds	r0, r0, #0
    1ad0:	movne	r0, #1
    1ad4:	rsb	r0, r0, #0
    1ad8:	add	sp, sp, #84	; 0x54
    1adc:	ldrd	r4, [sp]
    1ae0:	ldrd	r6, [sp, #8]
    1ae4:	ldrd	r8, [sp, #16]
    1ae8:	ldrd	sl, [sp, #24]
    1aec:	add	sp, sp, #32
    1af0:	pop	{pc}		; (ldr pc, [sp], #4)
    1af4:	add	r1, sp, #24
    1af8:	mov	r0, r4
    1afc:	str	r2, [sp, #20]
    1b00:	bl	dd0 <coda_bin_cursor_get_bit_size>
    1b04:	cmp	r0, #0
    1b08:	ldr	r2, [sp, #20]
    1b0c:	bne	1b80 <coda_bin_cursor_read_uint32+0x1fc>
    1b10:	ldrd	r6, [sp, #24]
    1b14:	cmp	r7, #0
    1b18:	cmpeq	r6, #32
    1b1c:	bls	19f0 <coda_bin_cursor_read_uint32+0x6c>
    1b20:	mov	r0, r6
    1b24:	mov	r1, r7
    1b28:	add	r2, sp, #32
    1b2c:	bl	0 <coda_str64>
    1b30:	ldr	r3, [r4, #4]
    1b34:	add	r2, sp, #56	; 0x38
    1b38:	add	r1, r4, r3, lsl #4
    1b3c:	ldr	r0, [r4, r3, lsl #4]
    1b40:	ldr	r1, [r1, #4]
    1b44:	lsr	r0, r0, #3
    1b48:	orr	r0, r0, r1, lsl #29
    1b4c:	asr	r1, r1, #3
    1b50:	bl	0 <coda_str64>
    1b54:	ldr	ip, [r4, #4]
    1b58:	movw	r1, #0
    1b5c:	movt	r1, #0
    1b60:	movw	r0, #65236	; 0xfed4
    1b64:	movt	r0, #65535	; 0xffff
    1b68:	add	r3, sp, #56	; 0x38
    1b6c:	add	r2, sp, #32
    1b70:	ldr	ip, [r4, ip, lsl #4]
    1b74:	and	ip, ip, #7
    1b78:	str	ip, [sp]
    1b7c:	bl	0 <coda_set_error>
    1b80:	mvn	r0, #0
    1b84:	b	1ad8 <coda_bin_cursor_read_uint32+0x154>

00001b88 <coda_bin_cursor_read_int64>:
    1b88:	ldr	r3, [r0, #4]
    1b8c:	strd	r4, [sp, #-36]!	; 0xffffffdc
    1b90:	mov	r5, r0
    1b94:	mov	r4, r1
    1b98:	mvn	r1, #0
    1b9c:	sub	r3, r3, #1
    1ba0:	add	r2, r0, r3, lsl #4
    1ba4:	add	r3, r3, #1
    1ba8:	mvn	r0, #0
    1bac:	ldr	ip, [r2, #8]
    1bb0:	ldr	r2, [ip]
    1bb4:	strd	r6, [sp, #8]
    1bb8:	strd	r8, [sp, #16]
    1bbc:	strd	sl, [sp, #24]
    1bc0:	str	lr, [sp, #32]
    1bc4:	sub	sp, sp, #84	; 0x54
    1bc8:	add	lr, r5, r3, lsl #4
    1bcc:	cmp	r2, #99	; 0x63
    1bd0:	ldr	r2, [r5, r3, lsl #4]
    1bd4:	ldrhi	ip, [ip, #4]
    1bd8:	ldr	sl, [lr, #4]
    1bdc:	ldrd	r6, [ip, #24]
    1be0:	ldr	fp, [ip, #44]	; 0x2c
    1be4:	cmp	r7, r1
    1be8:	strd	r6, [sp, #24]
    1bec:	cmpeq	r6, r0
    1bf0:	beq	1d88 <coda_bin_cursor_read_int64+0x200>
    1bf4:	and	r8, r2, #7
    1bf8:	mov	r9, #0
    1bfc:	ldr	r0, [r5]
    1c00:	orrs	r3, r8, r9
    1c04:	beq	1cb8 <coda_bin_cursor_read_int64+0x130>
    1c08:	cmp	fp, #0
    1c0c:	beq	1cf8 <coda_bin_cursor_read_int64+0x170>
    1c10:	mov	r8, #0
    1c14:	mov	r9, #0
    1c18:	strd	r6, [sp]
    1c1c:	mov	r3, sl
    1c20:	str	r4, [sp, #8]
    1c24:	strd	r8, [r4]
    1c28:	bl	178 <read_bits>
    1c2c:	cmp	r0, #0
    1c30:	bne	1e14 <coda_bin_cursor_read_int64+0x28c>
    1c34:	ldrd	r6, [sp, #24]
    1c38:	cmp	r6, #64	; 0x40
    1c3c:	sbcs	r3, r7, #0
    1c40:	movge	r0, #0
    1c44:	bge	1c9c <coda_bin_cursor_read_int64+0x114>
    1c48:	ldr	ip, [r4]
    1c4c:	sub	r3, r6, #1
    1c50:	sub	lr, r6, #33	; 0x21
    1c54:	rsb	r5, r3, #32
    1c58:	mov	r0, #0
    1c5c:	ldr	r1, [r4, #4]
    1c60:	mov	r2, #1
    1c64:	mov	r9, r0
    1c68:	lsr	r3, ip, r3
    1c6c:	orr	r3, r3, r1, lsl r5
    1c70:	orr	r3, r3, r1, lsr lr
    1c74:	and	r8, r3, r2
    1c78:	orrs	r3, r8, r9
    1c7c:	beq	1c9c <coda_bin_cursor_read_int64+0x114>
    1c80:	lsl	r6, r2, r6
    1c84:	rsb	r6, r6, #0
    1c88:	asr	r3, r6, #31
    1c8c:	orr	r6, r6, ip
    1c90:	orr	r1, r3, r1
    1c94:	str	r6, [r4]
    1c98:	str	r1, [r4, #4]
    1c9c:	add	sp, sp, #84	; 0x54
    1ca0:	ldrd	r4, [sp]
    1ca4:	ldrd	r6, [sp, #8]
    1ca8:	ldrd	r8, [sp, #16]
    1cac:	ldrd	sl, [sp, #24]
    1cb0:	add	sp, sp, #32
    1cb4:	pop	{pc}		; (ldr pc, [sp], #4)
    1cb8:	cmp	r7, #0
    1cbc:	cmpeq	r6, #64	; 0x40
    1cc0:	bne	1c08 <coda_bin_cursor_read_int64+0x80>
    1cc4:	lsr	r2, r2, #3
    1cc8:	mov	r6, #8
    1ccc:	mov	r7, #0
    1cd0:	asr	r3, sl, #3
    1cd4:	orr	r2, r2, sl, lsl #29
    1cd8:	strd	r6, [sp]
    1cdc:	str	r4, [sp, #8]
    1ce0:	bl	0 <read_bytes>
    1ce4:	cmp	r0, #0
    1ce8:	bne	1e14 <coda_bin_cursor_read_int64+0x28c>
    1cec:	cmp	fp, #0
    1cf0:	bne	1c34 <coda_bin_cursor_read_int64+0xac>
    1cf4:	b	1d38 <coda_bin_cursor_read_int64+0x1b0>
    1cf8:	lsr	r1, r6, #3
    1cfc:	and	ip, r6, #7
    1d00:	strd	r6, [sp]
    1d04:	mov	r6, #0
    1d08:	mov	r3, sl
    1d0c:	orr	r1, r1, r7, lsl #29
    1d10:	mov	r7, #0
    1d14:	rsb	r1, r1, #8
    1d18:	strd	r6, [r4]
    1d1c:	cmp	ip, #0
    1d20:	subne	r1, r1, #1
    1d24:	add	r1, r4, r1
    1d28:	str	r1, [sp, #8]
    1d2c:	bl	178 <read_bits>
    1d30:	cmp	r0, #0
    1d34:	bne	1e14 <coda_bin_cursor_read_int64+0x28c>
    1d38:	ldrb	r0, [r4, #7]
    1d3c:	mov	r2, #0
    1d40:	mov	r3, r2
    1d44:	ldrb	r1, [r4, #3]
    1d48:	ldrb	ip, [r4, #6]
    1d4c:	bfi	r2, r0, #0, #8
    1d50:	ldrb	r0, [r4, #2]
    1d54:	bfi	r3, r1, #0, #8
    1d58:	ldrb	r1, [r4, #5]
    1d5c:	bfi	r2, ip, #8, #8
    1d60:	ldrb	ip, [r4, #1]
    1d64:	bfi	r3, r0, #8, #8
    1d68:	ldrb	r0, [r4, #4]
    1d6c:	bfi	r2, r1, #16, #8
    1d70:	ldrb	r1, [r4]
    1d74:	bfi	r3, ip, #16, #8
    1d78:	bfi	r2, r0, #24, #8
    1d7c:	bfi	r3, r1, #24, #8
    1d80:	strd	r2, [r4]
    1d84:	b	1c34 <coda_bin_cursor_read_int64+0xac>
    1d88:	add	r1, sp, #24
    1d8c:	mov	r0, r5
    1d90:	str	r2, [sp, #20]
    1d94:	bl	dd0 <coda_bin_cursor_get_bit_size>
    1d98:	cmp	r0, #0
    1d9c:	ldr	r2, [sp, #20]
    1da0:	bne	1e14 <coda_bin_cursor_read_int64+0x28c>
    1da4:	ldrd	r6, [sp, #24]
    1da8:	cmp	r7, #0
    1dac:	cmpeq	r6, #64	; 0x40
    1db0:	bls	1bf4 <coda_bin_cursor_read_int64+0x6c>
    1db4:	mov	r0, r6
    1db8:	mov	r1, r7
    1dbc:	add	r2, sp, #32
    1dc0:	bl	0 <coda_str64>
    1dc4:	ldr	r3, [r5, #4]
    1dc8:	add	r2, sp, #56	; 0x38
    1dcc:	add	r1, r5, r3, lsl #4
    1dd0:	ldr	r0, [r5, r3, lsl #4]
    1dd4:	ldr	r1, [r1, #4]
    1dd8:	lsr	r0, r0, #3
    1ddc:	orr	r0, r0, r1, lsl #29
    1de0:	asr	r1, r1, #3
    1de4:	bl	0 <coda_str64>
    1de8:	ldr	ip, [r5, #4]
    1dec:	movw	r1, #0
    1df0:	movt	r1, #0
    1df4:	movw	r0, #65236	; 0xfed4
    1df8:	movt	r0, #65535	; 0xffff
    1dfc:	add	r3, sp, #56	; 0x38
    1e00:	add	r2, sp, #32
    1e04:	ldr	ip, [r5, ip, lsl #4]
    1e08:	and	ip, ip, #7
    1e0c:	str	ip, [sp]
    1e10:	bl	0 <coda_set_error>
    1e14:	mvn	r0, #0
    1e18:	b	1c9c <coda_bin_cursor_read_int64+0x114>

00001e1c <coda_bin_cursor_read_uint64>:
    1e1c:	ldr	r3, [r0, #4]
    1e20:	strd	r4, [sp, #-36]!	; 0xffffffdc
    1e24:	mov	r5, r0
    1e28:	mov	r4, r1
    1e2c:	mvn	r1, #0
    1e30:	sub	r3, r3, #1
    1e34:	add	r2, r0, r3, lsl #4
    1e38:	add	r3, r3, #1
    1e3c:	mvn	r0, #0
    1e40:	ldr	ip, [r2, #8]
    1e44:	ldr	r2, [ip]
    1e48:	strd	r6, [sp, #8]
    1e4c:	strd	r8, [sp, #16]
    1e50:	strd	sl, [sp, #24]
    1e54:	str	lr, [sp, #32]
    1e58:	sub	sp, sp, #84	; 0x54
    1e5c:	add	lr, r5, r3, lsl #4
    1e60:	cmp	r2, #99	; 0x63
    1e64:	ldr	r2, [r5, r3, lsl #4]
    1e68:	ldrhi	ip, [ip, #4]
    1e6c:	ldr	sl, [lr, #4]
    1e70:	ldrd	r6, [ip, #24]
    1e74:	ldr	fp, [ip, #44]	; 0x2c
    1e78:	cmp	r7, r1
    1e7c:	strd	r6, [sp, #24]
    1e80:	cmpeq	r6, r0
    1e84:	beq	1fbc <coda_bin_cursor_read_uint64+0x1a0>
    1e88:	and	r8, r2, #7
    1e8c:	mov	r9, #0
    1e90:	ldr	r0, [r5]
    1e94:	orrs	r3, r8, r9
    1e98:	beq	1f38 <coda_bin_cursor_read_uint64+0x11c>
    1e9c:	cmp	fp, #0
    1ea0:	bne	1f78 <coda_bin_cursor_read_uint64+0x15c>
    1ea4:	lsr	r1, r6, #3
    1ea8:	and	ip, r6, #7
    1eac:	strd	r6, [sp]
    1eb0:	mov	r6, #0
    1eb4:	mov	r3, sl
    1eb8:	orr	r1, r1, r7, lsl #29
    1ebc:	mov	r7, #0
    1ec0:	rsb	r1, r1, #8
    1ec4:	strd	r6, [r4]
    1ec8:	cmp	ip, #0
    1ecc:	subne	r1, r1, #1
    1ed0:	add	r1, r4, r1
    1ed4:	str	r1, [sp, #8]
    1ed8:	bl	178 <read_bits>
    1edc:	cmp	r0, #0
    1ee0:	bne	2048 <coda_bin_cursor_read_uint64+0x22c>
    1ee4:	ldrb	r1, [r4, #3]
    1ee8:	mov	r2, #0
    1eec:	mov	r3, r2
    1ef0:	ldrb	r0, [r4, #7]
    1ef4:	ldrb	lr, [r4, #6]
    1ef8:	bfi	r3, r1, #0, #8
    1efc:	ldrb	ip, [r4, #2]
    1f00:	bfi	r2, r0, #0, #8
    1f04:	mov	r0, #0
    1f08:	ldrb	r1, [r4, #5]
    1f0c:	bfi	r2, lr, #8, #8
    1f10:	ldrb	lr, [r4, #1]
    1f14:	bfi	r3, ip, #8, #8
    1f18:	ldrb	ip, [r4, #4]
    1f1c:	bfi	r2, r1, #16, #8
    1f20:	ldrb	r1, [r4]
    1f24:	bfi	r3, lr, #16, #8
    1f28:	bfi	r2, ip, #24, #8
    1f2c:	bfi	r3, r1, #24, #8
    1f30:	strd	r2, [r4]
    1f34:	b	1fa0 <coda_bin_cursor_read_uint64+0x184>
    1f38:	cmp	r7, #0
    1f3c:	cmpeq	r6, #64	; 0x40
    1f40:	bne	1e9c <coda_bin_cursor_read_uint64+0x80>
    1f44:	lsr	r2, r2, #3
    1f48:	mov	r6, #8
    1f4c:	mov	r7, #0
    1f50:	asr	r3, sl, #3
    1f54:	orr	r2, r2, sl, lsl #29
    1f58:	strd	r6, [sp]
    1f5c:	str	r4, [sp, #8]
    1f60:	bl	0 <read_bytes>
    1f64:	cmp	r0, #0
    1f68:	bne	2048 <coda_bin_cursor_read_uint64+0x22c>
    1f6c:	cmp	fp, #0
    1f70:	beq	1ee4 <coda_bin_cursor_read_uint64+0xc8>
    1f74:	b	1fa0 <coda_bin_cursor_read_uint64+0x184>
    1f78:	mov	r8, #0
    1f7c:	mov	r9, #0
    1f80:	strd	r6, [sp]
    1f84:	mov	r3, sl
    1f88:	str	r4, [sp, #8]
    1f8c:	strd	r8, [r4]
    1f90:	bl	178 <read_bits>
    1f94:	adds	r0, r0, #0
    1f98:	movne	r0, #1
    1f9c:	rsb	r0, r0, #0
    1fa0:	add	sp, sp, #84	; 0x54
    1fa4:	ldrd	r4, [sp]
    1fa8:	ldrd	r6, [sp, #8]
    1fac:	ldrd	r8, [sp, #16]
    1fb0:	ldrd	sl, [sp, #24]
    1fb4:	add	sp, sp, #32
    1fb8:	pop	{pc}		; (ldr pc, [sp], #4)
    1fbc:	add	r1, sp, #24
    1fc0:	mov	r0, r5
    1fc4:	str	r2, [sp, #20]
    1fc8:	bl	dd0 <coda_bin_cursor_get_bit_size>
    1fcc:	cmp	r0, #0
    1fd0:	ldr	r2, [sp, #20]
    1fd4:	bne	2048 <coda_bin_cursor_read_uint64+0x22c>
    1fd8:	ldrd	r6, [sp, #24]
    1fdc:	cmp	r7, #0
    1fe0:	cmpeq	r6, #64	; 0x40
    1fe4:	bls	1e88 <coda_bin_cursor_read_uint64+0x6c>
    1fe8:	mov	r0, r6
    1fec:	mov	r1, r7
    1ff0:	add	r2, sp, #32
    1ff4:	bl	0 <coda_str64>
    1ff8:	ldr	r3, [r5, #4]
    1ffc:	add	r2, sp, #56	; 0x38
    2000:	add	r1, r5, r3, lsl #4
    2004:	ldr	r0, [r5, r3, lsl #4]
    2008:	ldr	r1, [r1, #4]
    200c:	lsr	r0, r0, #3
    2010:	orr	r0, r0, r1, lsl #29
    2014:	asr	r1, r1, #3
    2018:	bl	0 <coda_str64>
    201c:	ldr	ip, [r5, #4]
    2020:	movw	r1, #0
    2024:	movt	r1, #0
    2028:	movw	r0, #65236	; 0xfed4
    202c:	movt	r0, #65535	; 0xffff
    2030:	add	r3, sp, #56	; 0x38
    2034:	add	r2, sp, #32
    2038:	ldr	ip, [r5, ip, lsl #4]
    203c:	and	ip, ip, #7
    2040:	str	ip, [sp]
    2044:	bl	0 <coda_set_error>
    2048:	mvn	r0, #0
    204c:	b	1fa0 <coda_bin_cursor_read_uint64+0x184>

00002050 <coda_bin_cursor_get_string_length>:
    2050:	str	r4, [sp, #-16]!
    2054:	mov	r4, r1
    2058:	strd	r6, [sp, #4]
    205c:	str	lr, [sp, #12]
    2060:	sub	sp, sp, #8
    2064:	mov	r1, sp
    2068:	bl	dd0 <coda_bin_cursor_get_bit_size>
    206c:	cmp	r0, #0
    2070:	bne	20ac <coda_bin_cursor_get_string_length+0x5c>
    2074:	ldrd	r6, [sp]
    2078:	cmp	r6, #0
    207c:	sbcs	r3, r7, #0
    2080:	mvnlt	r3, #0
    2084:	strlt	r3, [r4]
    2088:	blt	2098 <coda_bin_cursor_get_string_length+0x48>
    208c:	lsr	r2, r6, #3
    2090:	orr	r2, r2, r7, lsl #29
    2094:	str	r2, [r4]
    2098:	add	sp, sp, #8
    209c:	ldr	r4, [sp]
    20a0:	ldrd	r6, [sp, #4]
    20a4:	add	sp, sp, #12
    20a8:	pop	{pc}		; (ldr pc, [sp], #4)
    20ac:	mvn	r0, #0
    20b0:	b	2098 <coda_bin_cursor_get_string_length+0x48>

000020b4 <coda_bin_cursor_get_num_elements>:
    20b4:	ldr	r3, [r0, #4]
    20b8:	add	r3, r0, r3, lsl #4
    20bc:	ldr	r3, [r3, #-8]
    20c0:	ldr	r2, [r3]
    20c4:	cmp	r2, #99	; 0x63
    20c8:	ldrhi	r3, [r3, #4]
    20cc:	ldr	r3, [r3, #8]
    20d0:	cmp	r3, #1
    20d4:	bls	20e8 <coda_bin_cursor_get_num_elements+0x34>
    20d8:	mov	r3, #1
    20dc:	mov	r0, #0
    20e0:	str	r3, [r1]
    20e4:	bx	lr
    20e8:	b	0 <coda_ascbin_cursor_get_num_elements>

000020ec <coda_bin_cursor_read_string>:
    20ec:	ldr	r3, [r0, #4]
    20f0:	strd	r4, [sp, #-32]!	; 0xffffffe0
    20f4:	strd	r6, [sp, #8]
    20f8:	mov	r7, r2
    20fc:	mov	r6, r0
    2100:	str	r8, [sp, #16]
    2104:	mov	r8, r1
    2108:	strd	sl, [sp, #20]
    210c:	sub	r3, r3, #1
    2110:	str	lr, [sp, #28]
    2114:	sub	sp, sp, #80	; 0x50
    2118:	add	r2, r0, r3, lsl #4
    211c:	add	r3, r0, r3, lsl #4
    2120:	ldr	r2, [r2, #8]
    2124:	ldr	r1, [r2]
    2128:	cmp	r1, #99	; 0x63
    212c:	ldrhi	r2, [r2, #4]
    2130:	ldrd	r0, [r2, #24]
    2134:	ldrd	r2, [r3, #16]
    2138:	cmp	r0, #0
    213c:	strd	r2, [sp, #16]
    2140:	sbcs	r3, r1, #0
    2144:	blt	21d4 <coda_bin_cursor_read_string+0xe8>
    2148:	lsr	r4, r0, #3
    214c:	asr	r5, r1, #3
    2150:	orr	r4, r4, r1, lsl #29
    2154:	asr	r3, r7, #31
    2158:	cmp	r4, r7
    215c:	sbcs	r3, r5, r3
    2160:	subge	r4, r7, #1
    2164:	asrge	r5, r4, #31
    2168:	cmp	r4, #1
    216c:	sbcs	r3, r5, #0
    2170:	bge	219c <coda_bin_cursor_read_string+0xb0>
    2174:	mov	r3, #0
    2178:	mov	r0, r3
    217c:	strb	r3, [r8]
    2180:	add	sp, sp, #80	; 0x50
    2184:	ldrd	r4, [sp]
    2188:	ldrd	r6, [sp, #8]
    218c:	ldr	r8, [sp, #16]
    2190:	ldrd	sl, [sp, #20]
    2194:	add	sp, sp, #28
    2198:	pop	{pc}		; (ldr pc, [sp], #4)
    219c:	lsl	r1, r5, #3
    21a0:	str	r8, [sp, #8]
    21a4:	lsl	ip, r4, #3
    21a8:	ldr	r0, [r6]
    21ac:	orr	r1, r1, r4, lsr #29
    21b0:	ldrd	r2, [sp, #16]
    21b4:	str	ip, [sp]
    21b8:	str	r1, [sp, #4]
    21bc:	bl	178 <read_bits>
    21c0:	cmp	r0, #0
    21c4:	bne	2228 <coda_bin_cursor_read_string+0x13c>
    21c8:	add	r4, r8, r4
    21cc:	strb	r0, [r4]
    21d0:	b	2180 <coda_bin_cursor_read_string+0x94>
    21d4:	add	r1, sp, #24
    21d8:	mov	r0, r6
    21dc:	bl	dd0 <coda_bin_cursor_get_bit_size>
    21e0:	cmp	r0, #0
    21e4:	bne	2228 <coda_bin_cursor_read_string+0x13c>
    21e8:	ldrd	sl, [sp, #24]
    21ec:	cmp	sl, #0
    21f0:	sbcs	r3, fp, #0
    21f4:	blt	2230 <coda_bin_cursor_read_string+0x144>
    21f8:	and	r4, sl, #7
    21fc:	mov	r5, r0
    2200:	orrs	r3, r4, r5
    2204:	lsreq	r4, sl, #3
    2208:	asreq	r5, fp, #3
    220c:	orreq	r4, r4, fp, lsl #29
    2210:	beq	2154 <coda_bin_cursor_read_string+0x68>
    2214:	movw	r1, #0
    2218:	movt	r1, #0
    221c:	movw	r0, #65236	; 0xfed4
    2220:	movt	r0, #65535	; 0xffff
    2224:	bl	0 <coda_set_error>
    2228:	mvn	r0, #0
    222c:	b	2180 <coda_bin_cursor_read_string+0x94>
    2230:	mov	r0, sl
    2234:	mov	r1, fp
    2238:	add	r2, sp, #32
    223c:	bl	0 <coda_str64>
    2240:	ldr	r3, [r6, #4]
    2244:	add	r2, sp, #56	; 0x38
    2248:	add	r1, r6, r3, lsl #4
    224c:	ldr	r0, [r6, r3, lsl #4]
    2250:	ldr	r1, [r1, #4]
    2254:	lsr	r0, r0, #3
    2258:	orr	r0, r0, r1, lsl #29
    225c:	asr	r1, r1, #3
    2260:	bl	0 <coda_str64>
    2264:	ldr	ip, [r6, #4]
    2268:	add	r3, sp, #56	; 0x38
    226c:	add	r2, sp, #32
    2270:	movw	r1, #0
    2274:	movt	r1, #0
    2278:	movw	r0, #65236	; 0xfed4
    227c:	movt	r0, #65535	; 0xffff
    2280:	ldr	ip, [r6, ip, lsl #4]
    2284:	and	ip, ip, #7
    2288:	str	ip, [sp]
    228c:	bl	0 <coda_set_error>
    2290:	b	2228 <coda_bin_cursor_read_string+0x13c>

00002294 <coda_bin_cursor_read_bits>:
    2294:	strd	r4, [sp, #-12]!
    2298:	mov	ip, r0
    229c:	str	lr, [sp, #8]
    22a0:	sub	sp, sp, #20
    22a4:	ldrd	r4, [sp, #32]
    22a8:	str	r1, [sp, #8]
    22ac:	ldrd	r0, [r0]
    22b0:	lsl	r1, r1, #4
    22b4:	ldr	lr, [ip, r1]
    22b8:	add	ip, ip, r1
    22bc:	ldr	r1, [ip, #4]
    22c0:	strd	r4, [sp]
    22c4:	adds	r2, r2, lr
    22c8:	adc	r3, r3, r1
    22cc:	bl	178 <read_bits>
    22d0:	add	sp, sp, #20
    22d4:	ldrd	r4, [sp]
    22d8:	add	sp, sp, #8
    22dc:	pop	{pc}		; (ldr pc, [sp], #4)

000022e0 <coda_bin_cursor_read_bytes>:
    22e0:	strd	r4, [sp, #-20]!	; 0xffffffec
    22e4:	ldr	r4, [r0, #4]
    22e8:	strd	r6, [sp, #8]
    22ec:	mov	r7, #0
    22f0:	str	lr, [sp, #16]
    22f4:	sub	sp, sp, #20
    22f8:	ldr	r5, [sp, #40]	; 0x28
    22fc:	lsl	r4, r4, #4
    2300:	ldr	ip, [r0, r4]
    2304:	add	lr, r0, r4
    2308:	ldr	r4, [lr, #4]
    230c:	ldr	r0, [r0]
    2310:	and	r6, ip, #7
    2314:	orrs	lr, r6, r7
    2318:	ldr	lr, [sp, #44]	; 0x2c
    231c:	bne	2354 <coda_bin_cursor_read_bytes+0x74>
    2320:	lsr	ip, ip, #3
    2324:	stm	sp, {r5, lr}
    2328:	asr	r5, r4, #3
    232c:	str	r1, [sp, #8]
    2330:	orr	ip, ip, r4, lsl #29
    2334:	adds	r2, ip, r2
    2338:	adc	r3, r5, r3
    233c:	bl	0 <read_bytes>
    2340:	add	sp, sp, #20
    2344:	ldrd	r4, [sp]
    2348:	ldrd	r6, [sp, #8]
    234c:	add	sp, sp, #16
    2350:	pop	{pc}		; (ldr pc, [sp], #4)
    2354:	lsl	lr, lr, #3
    2358:	str	r1, [sp, #8]
    235c:	lsl	r3, r3, #3
    2360:	orr	lr, lr, r5, lsr #29
    2364:	lsl	r1, r2, #3
    2368:	lsl	r5, r5, #3
    236c:	orr	r3, r3, r2, lsr #29
    2370:	adds	r2, r1, ip
    2374:	adc	r3, r3, r4
    2378:	stm	sp, {r5, lr}
    237c:	bl	178 <read_bits>
    2380:	b	2340 <coda_bin_cursor_read_bytes+0x60>

00002384 <coda_bin_cursor_read_int8_array>:
    2384:	ldr	r3, [r0, #4]
    2388:	strd	r4, [sp, #-16]!
    238c:	mov	r4, r0
    2390:	mov	r5, r1
    2394:	add	r3, r0, r3, lsl #4
    2398:	ldr	r3, [r3, #-8]
    239c:	str	r6, [sp, #8]
    23a0:	mov	r6, r2
    23a4:	str	lr, [sp, #12]
    23a8:	sub	sp, sp, #8
    23ac:	ldr	r2, [r3]
    23b0:	cmp	r2, #99	; 0x63
    23b4:	ldrhi	r3, [r3, #4]
    23b8:	ldr	r3, [r3, #40]	; 0x28
    23bc:	ldr	r3, [r3]
    23c0:	cmp	r3, #1
    23c4:	beq	242c <coda_bin_cursor_read_int8_array+0xa8>
    23c8:	cmp	r3, #0
    23cc:	bne	244c <coda_bin_cursor_read_int8_array+0xc8>
    23d0:	movw	r1, #0
    23d4:	movt	r1, #0
    23d8:	str	r3, [sp]
    23dc:	mov	r2, r5
    23e0:	mov	r3, #1
    23e4:	bl	70c <read_array>
    23e8:	cmp	r0, #0
    23ec:	bne	2444 <coda_bin_cursor_read_int8_array+0xc0>
    23f0:	cmp	r6, #0
    23f4:	bne	240c <coda_bin_cursor_read_int8_array+0x88>
    23f8:	add	sp, sp, #8
    23fc:	ldrd	r4, [sp]
    2400:	ldr	r6, [sp, #8]
    2404:	add	sp, sp, #12
    2408:	pop	{pc}		; (ldr pc, [sp], #4)
    240c:	mov	r1, r5
    2410:	mov	r0, r4
    2414:	mov	r2, #1
    2418:	bl	a14 <transpose_array>
    241c:	adds	r0, r0, #0
    2420:	movne	r0, #1
    2424:	rsb	r0, r0, #0
    2428:	b	23f8 <coda_bin_cursor_read_int8_array+0x74>
    242c:	mov	r2, r1
    2430:	movw	r1, #0
    2434:	movt	r1, #0
    2438:	str	r6, [sp]
    243c:	bl	70c <read_array>
    2440:	b	23f8 <coda_bin_cursor_read_int8_array+0x74>
    2444:	mvn	r0, #0
    2448:	b	23f8 <coda_bin_cursor_read_int8_array+0x74>
    244c:	movw	r1, #0
    2450:	movt	r1, #0
    2454:	ldr	r3, [pc, #12]	; 2468 <coda_bin_cursor_read_int8_array+0xe4>
    2458:	movw	r0, #0
    245c:	movt	r0, #0
    2460:	movw	r2, #906	; 0x38a
    2464:	bl	0 <__assert_fail>
    2468:	.word	0x00000054

0000246c <coda_bin_cursor_read_uint8_array>:
    246c:	ldr	r3, [r0, #4]
    2470:	strd	r4, [sp, #-16]!
    2474:	mov	r4, r0
    2478:	mov	r5, r1
    247c:	add	r3, r0, r3, lsl #4
    2480:	ldr	r3, [r3, #-8]
    2484:	str	r6, [sp, #8]
    2488:	mov	r6, r2
    248c:	str	lr, [sp, #12]
    2490:	sub	sp, sp, #8
    2494:	ldr	r2, [r3]
    2498:	cmp	r2, #99	; 0x63
    249c:	ldrhi	r3, [r3, #4]
    24a0:	ldr	r3, [r3, #40]	; 0x28
    24a4:	ldr	r3, [r3]
    24a8:	cmp	r3, #1
    24ac:	beq	2514 <coda_bin_cursor_read_uint8_array+0xa8>
    24b0:	cmp	r3, #0
    24b4:	bne	2534 <coda_bin_cursor_read_uint8_array+0xc8>
    24b8:	movw	r1, #0
    24bc:	movt	r1, #0
    24c0:	str	r3, [sp]
    24c4:	mov	r2, r5
    24c8:	mov	r3, #1
    24cc:	bl	70c <read_array>
    24d0:	cmp	r0, #0
    24d4:	bne	252c <coda_bin_cursor_read_uint8_array+0xc0>
    24d8:	cmp	r6, #0
    24dc:	bne	24f4 <coda_bin_cursor_read_uint8_array+0x88>
    24e0:	add	sp, sp, #8
    24e4:	ldrd	r4, [sp]
    24e8:	ldr	r6, [sp, #8]
    24ec:	add	sp, sp, #12
    24f0:	pop	{pc}		; (ldr pc, [sp], #4)
    24f4:	mov	r1, r5
    24f8:	mov	r0, r4
    24fc:	mov	r2, #1
    2500:	bl	a14 <transpose_array>
    2504:	adds	r0, r0, #0
    2508:	movne	r0, #1
    250c:	rsb	r0, r0, #0
    2510:	b	24e0 <coda_bin_cursor_read_uint8_array+0x74>
    2514:	mov	r2, r1
    2518:	movw	r1, #0
    251c:	movt	r1, #0
    2520:	str	r6, [sp]
    2524:	bl	70c <read_array>
    2528:	b	24e0 <coda_bin_cursor_read_uint8_array+0x74>
    252c:	mvn	r0, #0
    2530:	b	24e0 <coda_bin_cursor_read_uint8_array+0x74>
    2534:	movw	r1, #0
    2538:	movt	r1, #0
    253c:	ldr	r3, [pc, #12]	; 2550 <coda_bin_cursor_read_uint8_array+0xe4>
    2540:	movw	r0, #0
    2544:	movt	r0, #0
    2548:	mov	r2, #932	; 0x3a4
    254c:	bl	0 <__assert_fail>
    2550:	.word	0x00000074

00002554 <coda_bin_cursor_read_int16_array>:
    2554:	ldr	r3, [r0, #4]
    2558:	strd	r4, [sp, #-16]!
    255c:	mov	r4, r0
    2560:	mov	r5, r1
    2564:	add	r3, r0, r3, lsl #4
    2568:	ldr	r3, [r3, #-8]
    256c:	str	r6, [sp, #8]
    2570:	mov	r6, r2
    2574:	str	lr, [sp, #12]
    2578:	sub	sp, sp, #8
    257c:	ldr	r2, [r3]
    2580:	cmp	r2, #99	; 0x63
    2584:	ldrhi	r3, [r3, #4]
    2588:	ldr	r3, [r3, #40]	; 0x28
    258c:	ldr	r3, [r3]
    2590:	cmp	r3, #1
    2594:	beq	25fc <coda_bin_cursor_read_int16_array+0xa8>
    2598:	cmp	r3, #0
    259c:	bne	2620 <coda_bin_cursor_read_int16_array+0xcc>
    25a0:	movw	r1, #0
    25a4:	movt	r1, #0
    25a8:	str	r3, [sp]
    25ac:	mov	r2, r5
    25b0:	mov	r3, #2
    25b4:	bl	70c <read_array>
    25b8:	cmp	r0, #0
    25bc:	bne	2618 <coda_bin_cursor_read_int16_array+0xc4>
    25c0:	cmp	r6, #0
    25c4:	bne	25dc <coda_bin_cursor_read_int16_array+0x88>
    25c8:	add	sp, sp, #8
    25cc:	ldrd	r4, [sp]
    25d0:	ldr	r6, [sp, #8]
    25d4:	add	sp, sp, #12
    25d8:	pop	{pc}		; (ldr pc, [sp], #4)
    25dc:	mov	r1, r5
    25e0:	mov	r0, r4
    25e4:	mov	r2, #2
    25e8:	bl	a14 <transpose_array>
    25ec:	adds	r0, r0, #0
    25f0:	movne	r0, #1
    25f4:	rsb	r0, r0, #0
    25f8:	b	25c8 <coda_bin_cursor_read_int16_array+0x74>
    25fc:	mov	r2, r1
    2600:	mov	r3, #2
    2604:	str	r6, [sp]
    2608:	movw	r1, #0
    260c:	movt	r1, #0
    2610:	bl	70c <read_array>
    2614:	b	25c8 <coda_bin_cursor_read_int16_array+0x74>
    2618:	mvn	r0, #0
    261c:	b	25c8 <coda_bin_cursor_read_int16_array+0x74>
    2620:	movw	r1, #0
    2624:	movt	r1, #0
    2628:	ldr	r3, [pc, #12]	; 263c <coda_bin_cursor_read_int16_array+0xe8>
    262c:	movw	r0, #0
    2630:	movt	r0, #0
    2634:	movw	r2, #958	; 0x3be
    2638:	bl	0 <__assert_fail>
    263c:	.word	0x00000098

00002640 <coda_bin_cursor_read_uint16_array>:
    2640:	ldr	r3, [r0, #4]
    2644:	strd	r4, [sp, #-16]!
    2648:	mov	r4, r0
    264c:	mov	r5, r1
    2650:	add	r3, r0, r3, lsl #4
    2654:	ldr	r3, [r3, #-8]
    2658:	str	r6, [sp, #8]
    265c:	mov	r6, r2
    2660:	str	lr, [sp, #12]
    2664:	sub	sp, sp, #8
    2668:	ldr	r2, [r3]
    266c:	cmp	r2, #99	; 0x63
    2670:	ldrhi	r3, [r3, #4]
    2674:	ldr	r3, [r3, #40]	; 0x28
    2678:	ldr	r3, [r3]
    267c:	cmp	r3, #1
    2680:	beq	26e8 <coda_bin_cursor_read_uint16_array+0xa8>
    2684:	cmp	r3, #0
    2688:	bne	270c <coda_bin_cursor_read_uint16_array+0xcc>
    268c:	movw	r1, #0
    2690:	movt	r1, #0
    2694:	str	r3, [sp]
    2698:	mov	r2, r5
    269c:	mov	r3, #2
    26a0:	bl	70c <read_array>
    26a4:	cmp	r0, #0
    26a8:	bne	2704 <coda_bin_cursor_read_uint16_array+0xc4>
    26ac:	cmp	r6, #0
    26b0:	bne	26c8 <coda_bin_cursor_read_uint16_array+0x88>
    26b4:	add	sp, sp, #8
    26b8:	ldrd	r4, [sp]
    26bc:	ldr	r6, [sp, #8]
    26c0:	add	sp, sp, #12
    26c4:	pop	{pc}		; (ldr pc, [sp], #4)
    26c8:	mov	r1, r5
    26cc:	mov	r0, r4
    26d0:	mov	r2, #2
    26d4:	bl	a14 <transpose_array>
    26d8:	adds	r0, r0, #0
    26dc:	movne	r0, #1
    26e0:	rsb	r0, r0, #0
    26e4:	b	26b4 <coda_bin_cursor_read_uint16_array+0x74>
    26e8:	mov	r2, r1
    26ec:	mov	r3, #2
    26f0:	str	r6, [sp]
    26f4:	movw	r1, #0
    26f8:	movt	r1, #0
    26fc:	bl	70c <read_array>
    2700:	b	26b4 <coda_bin_cursor_read_uint16_array+0x74>
    2704:	mvn	r0, #0
    2708:	b	26b4 <coda_bin_cursor_read_uint16_array+0x74>
    270c:	movw	r1, #0
    2710:	movt	r1, #0
    2714:	ldr	r3, [pc, #12]	; 2728 <coda_bin_cursor_read_uint16_array+0xe8>
    2718:	movw	r0, #0
    271c:	movt	r0, #0
    2720:	mov	r2, #984	; 0x3d8
    2724:	bl	0 <__assert_fail>
    2728:	.word	0x000000bc

0000272c <coda_bin_cursor_read_int32_array>:
    272c:	ldr	r3, [r0, #4]
    2730:	strd	r4, [sp, #-16]!
    2734:	mov	r4, r0
    2738:	mov	r5, r1
    273c:	add	r3, r0, r3, lsl #4
    2740:	ldr	r3, [r3, #-8]
    2744:	str	r6, [sp, #8]
    2748:	mov	r6, r2
    274c:	str	lr, [sp, #12]
    2750:	sub	sp, sp, #8
    2754:	ldr	r2, [r3]
    2758:	cmp	r2, #99	; 0x63
    275c:	ldrhi	r3, [r3, #4]
    2760:	ldr	r3, [r3, #40]	; 0x28
    2764:	ldr	r3, [r3]
    2768:	cmp	r3, #1
    276c:	beq	27d4 <coda_bin_cursor_read_int32_array+0xa8>
    2770:	cmp	r3, #0
    2774:	bne	27f8 <coda_bin_cursor_read_int32_array+0xcc>
    2778:	movw	r1, #0
    277c:	movt	r1, #0
    2780:	str	r3, [sp]
    2784:	mov	r2, r5
    2788:	mov	r3, #4
    278c:	bl	70c <read_array>
    2790:	cmp	r0, #0
    2794:	bne	27f0 <coda_bin_cursor_read_int32_array+0xc4>
    2798:	cmp	r6, #0
    279c:	bne	27b4 <coda_bin_cursor_read_int32_array+0x88>
    27a0:	add	sp, sp, #8
    27a4:	ldrd	r4, [sp]
    27a8:	ldr	r6, [sp, #8]
    27ac:	add	sp, sp, #12
    27b0:	pop	{pc}		; (ldr pc, [sp], #4)
    27b4:	mov	r1, r5
    27b8:	mov	r0, r4
    27bc:	mov	r2, #4
    27c0:	bl	a14 <transpose_array>
    27c4:	adds	r0, r0, #0
    27c8:	movne	r0, #1
    27cc:	rsb	r0, r0, #0
    27d0:	b	27a0 <coda_bin_cursor_read_int32_array+0x74>
    27d4:	mov	r2, r1
    27d8:	mov	r3, #4
    27dc:	str	r6, [sp]
    27e0:	movw	r1, #0
    27e4:	movt	r1, #0
    27e8:	bl	70c <read_array>
    27ec:	b	27a0 <coda_bin_cursor_read_int32_array+0x74>
    27f0:	mvn	r0, #0
    27f4:	b	27a0 <coda_bin_cursor_read_int32_array+0x74>
    27f8:	movw	r1, #0
    27fc:	movt	r1, #0
    2800:	ldr	r3, [pc, #12]	; 2814 <coda_bin_cursor_read_int32_array+0xe8>
    2804:	movw	r0, #0
    2808:	movt	r0, #0
    280c:	movw	r2, #1010	; 0x3f2
    2810:	bl	0 <__assert_fail>
    2814:	.word	0x000000e0

00002818 <coda_bin_cursor_read_uint32_array>:
    2818:	ldr	r3, [r0, #4]
    281c:	strd	r4, [sp, #-16]!
    2820:	mov	r4, r0
    2824:	mov	r5, r1
    2828:	add	r3, r0, r3, lsl #4
    282c:	ldr	r3, [r3, #-8]
    2830:	str	r6, [sp, #8]
    2834:	mov	r6, r2
    2838:	str	lr, [sp, #12]
    283c:	sub	sp, sp, #8
    2840:	ldr	r2, [r3]
    2844:	cmp	r2, #99	; 0x63
    2848:	ldrhi	r3, [r3, #4]
    284c:	ldr	r3, [r3, #40]	; 0x28
    2850:	ldr	r3, [r3]
    2854:	cmp	r3, #1
    2858:	beq	28c0 <coda_bin_cursor_read_uint32_array+0xa8>
    285c:	cmp	r3, #0
    2860:	bne	28e4 <coda_bin_cursor_read_uint32_array+0xcc>
    2864:	movw	r1, #0
    2868:	movt	r1, #0
    286c:	str	r3, [sp]
    2870:	mov	r2, r5
    2874:	mov	r3, #4
    2878:	bl	70c <read_array>
    287c:	cmp	r0, #0
    2880:	bne	28dc <coda_bin_cursor_read_uint32_array+0xc4>
    2884:	cmp	r6, #0
    2888:	bne	28a0 <coda_bin_cursor_read_uint32_array+0x88>
    288c:	add	sp, sp, #8
    2890:	ldrd	r4, [sp]
    2894:	ldr	r6, [sp, #8]
    2898:	add	sp, sp, #12
    289c:	pop	{pc}		; (ldr pc, [sp], #4)
    28a0:	mov	r1, r5
    28a4:	mov	r0, r4
    28a8:	mov	r2, #4
    28ac:	bl	a14 <transpose_array>
    28b0:	adds	r0, r0, #0
    28b4:	movne	r0, #1
    28b8:	rsb	r0, r0, #0
    28bc:	b	288c <coda_bin_cursor_read_uint32_array+0x74>
    28c0:	mov	r2, r1
    28c4:	mov	r3, #4
    28c8:	str	r6, [sp]
    28cc:	movw	r1, #0
    28d0:	movt	r1, #0
    28d4:	bl	70c <read_array>
    28d8:	b	288c <coda_bin_cursor_read_uint32_array+0x74>
    28dc:	mvn	r0, #0
    28e0:	b	288c <coda_bin_cursor_read_uint32_array+0x74>
    28e4:	movw	r1, #0
    28e8:	movt	r1, #0
    28ec:	ldr	r3, [pc, #12]	; 2900 <coda_bin_cursor_read_uint32_array+0xe8>
    28f0:	movw	r0, #0
    28f4:	movt	r0, #0
    28f8:	movw	r2, #1036	; 0x40c
    28fc:	bl	0 <__assert_fail>
    2900:	.word	0x00000104

00002904 <coda_bin_cursor_read_int64_array>:
    2904:	ldr	r3, [r0, #4]
    2908:	strd	r4, [sp, #-16]!
    290c:	mov	r4, r0
    2910:	mov	r5, r1
    2914:	add	r3, r0, r3, lsl #4
    2918:	ldr	r3, [r3, #-8]
    291c:	str	r6, [sp, #8]
    2920:	mov	r6, r2
    2924:	str	lr, [sp, #12]
    2928:	sub	sp, sp, #8
    292c:	ldr	r2, [r3]
    2930:	cmp	r2, #99	; 0x63
    2934:	ldrhi	r3, [r3, #4]
    2938:	ldr	r3, [r3, #40]	; 0x28
    293c:	ldr	r3, [r3]
    2940:	cmp	r3, #1
    2944:	beq	29ac <coda_bin_cursor_read_int64_array+0xa8>
    2948:	cmp	r3, #0
    294c:	bne	29d0 <coda_bin_cursor_read_int64_array+0xcc>
    2950:	movw	r1, #0
    2954:	movt	r1, #0
    2958:	str	r3, [sp]
    295c:	mov	r2, r5
    2960:	mov	r3, #8
    2964:	bl	70c <read_array>
    2968:	cmp	r0, #0
    296c:	bne	29c8 <coda_bin_cursor_read_int64_array+0xc4>
    2970:	cmp	r6, #0
    2974:	bne	298c <coda_bin_cursor_read_int64_array+0x88>
    2978:	add	sp, sp, #8
    297c:	ldrd	r4, [sp]
    2980:	ldr	r6, [sp, #8]
    2984:	add	sp, sp, #12
    2988:	pop	{pc}		; (ldr pc, [sp], #4)
    298c:	mov	r1, r5
    2990:	mov	r0, r4
    2994:	mov	r2, #8
    2998:	bl	a14 <transpose_array>
    299c:	adds	r0, r0, #0
    29a0:	movne	r0, #1
    29a4:	rsb	r0, r0, #0
    29a8:	b	2978 <coda_bin_cursor_read_int64_array+0x74>
    29ac:	mov	r2, r1
    29b0:	mov	r3, #8
    29b4:	str	r6, [sp]
    29b8:	movw	r1, #0
    29bc:	movt	r1, #0
    29c0:	bl	70c <read_array>
    29c4:	b	2978 <coda_bin_cursor_read_int64_array+0x74>
    29c8:	mvn	r0, #0
    29cc:	b	2978 <coda_bin_cursor_read_int64_array+0x74>
    29d0:	movw	r1, #0
    29d4:	movt	r1, #0
    29d8:	ldr	r3, [pc, #12]	; 29ec <coda_bin_cursor_read_int64_array+0xe8>
    29dc:	movw	r0, #0
    29e0:	movt	r0, #0
    29e4:	movw	r2, #1062	; 0x426
    29e8:	bl	0 <__assert_fail>
    29ec:	.word	0x00000128

000029f0 <coda_bin_cursor_read_uint64_array>:
    29f0:	ldr	r3, [r0, #4]
    29f4:	strd	r4, [sp, #-16]!
    29f8:	mov	r4, r0
    29fc:	mov	r5, r1
    2a00:	add	r3, r0, r3, lsl #4
    2a04:	ldr	r3, [r3, #-8]
    2a08:	str	r6, [sp, #8]
    2a0c:	mov	r6, r2
    2a10:	str	lr, [sp, #12]
    2a14:	sub	sp, sp, #8
    2a18:	ldr	r2, [r3]
    2a1c:	cmp	r2, #99	; 0x63
    2a20:	ldrhi	r3, [r3, #4]
    2a24:	ldr	r3, [r3, #40]	; 0x28
    2a28:	ldr	r3, [r3]
    2a2c:	cmp	r3, #1
    2a30:	beq	2a98 <coda_bin_cursor_read_uint64_array+0xa8>
    2a34:	cmp	r3, #0
    2a38:	bne	2abc <coda_bin_cursor_read_uint64_array+0xcc>
    2a3c:	movw	r1, #0
    2a40:	movt	r1, #0
    2a44:	str	r3, [sp]
    2a48:	mov	r2, r5
    2a4c:	mov	r3, #8
    2a50:	bl	70c <read_array>
    2a54:	cmp	r0, #0
    2a58:	bne	2ab4 <coda_bin_cursor_read_uint64_array+0xc4>
    2a5c:	cmp	r6, #0
    2a60:	bne	2a78 <coda_bin_cursor_read_uint64_array+0x88>
    2a64:	add	sp, sp, #8
    2a68:	ldrd	r4, [sp]
    2a6c:	ldr	r6, [sp, #8]
    2a70:	add	sp, sp, #12
    2a74:	pop	{pc}		; (ldr pc, [sp], #4)
    2a78:	mov	r1, r5
    2a7c:	mov	r0, r4
    2a80:	mov	r2, #8
    2a84:	bl	a14 <transpose_array>
    2a88:	adds	r0, r0, #0
    2a8c:	movne	r0, #1
    2a90:	rsb	r0, r0, #0
    2a94:	b	2a64 <coda_bin_cursor_read_uint64_array+0x74>
    2a98:	mov	r2, r1
    2a9c:	mov	r3, #8
    2aa0:	str	r6, [sp]
    2aa4:	movw	r1, #0
    2aa8:	movt	r1, #0
    2aac:	bl	70c <read_array>
    2ab0:	b	2a64 <coda_bin_cursor_read_uint64_array+0x74>
    2ab4:	mvn	r0, #0
    2ab8:	b	2a64 <coda_bin_cursor_read_uint64_array+0x74>
    2abc:	movw	r1, #0
    2ac0:	movt	r1, #0
    2ac4:	ldr	r3, [pc, #12]	; 2ad8 <coda_bin_cursor_read_uint64_array+0xe8>
    2ac8:	movw	r0, #0
    2acc:	movt	r0, #0
    2ad0:	mov	r2, #1088	; 0x440
    2ad4:	bl	0 <__assert_fail>
    2ad8:	.word	0x0000014c

00002adc <coda_bin_cursor_read_float_array>:
    2adc:	ldr	r3, [r0, #4]
    2ae0:	strd	r4, [sp, #-16]!
    2ae4:	mov	r4, r0
    2ae8:	mov	r5, r1
    2aec:	add	r3, r0, r3, lsl #4
    2af0:	ldr	r3, [r3, #-8]
    2af4:	str	r6, [sp, #8]
    2af8:	mov	r6, r2
    2afc:	str	lr, [sp, #12]
    2b00:	sub	sp, sp, #8
    2b04:	ldr	r2, [r3]
    2b08:	cmp	r2, #99	; 0x63
    2b0c:	ldrhi	r3, [r3, #4]
    2b10:	ldr	r3, [r3, #40]	; 0x28
    2b14:	ldr	r3, [r3]
    2b18:	cmp	r3, #1
    2b1c:	beq	2b84 <coda_bin_cursor_read_float_array+0xa8>
    2b20:	cmp	r3, #0
    2b24:	bne	2ba8 <coda_bin_cursor_read_float_array+0xcc>
    2b28:	movw	r1, #0
    2b2c:	movt	r1, #0
    2b30:	str	r3, [sp]
    2b34:	mov	r2, r5
    2b38:	mov	r3, #4
    2b3c:	bl	70c <read_array>
    2b40:	cmp	r0, #0
    2b44:	bne	2ba0 <coda_bin_cursor_read_float_array+0xc4>
    2b48:	cmp	r6, #0
    2b4c:	bne	2b64 <coda_bin_cursor_read_float_array+0x88>
    2b50:	add	sp, sp, #8
    2b54:	ldrd	r4, [sp]
    2b58:	ldr	r6, [sp, #8]
    2b5c:	add	sp, sp, #12
    2b60:	pop	{pc}		; (ldr pc, [sp], #4)
    2b64:	mov	r1, r5
    2b68:	mov	r0, r4
    2b6c:	mov	r2, #4
    2b70:	bl	a14 <transpose_array>
    2b74:	adds	r0, r0, #0
    2b78:	movne	r0, #1
    2b7c:	rsb	r0, r0, #0
    2b80:	b	2b50 <coda_bin_cursor_read_float_array+0x74>
    2b84:	mov	r2, r1
    2b88:	mov	r3, #4
    2b8c:	str	r6, [sp]
    2b90:	movw	r1, #0
    2b94:	movt	r1, #0
    2b98:	bl	70c <read_array>
    2b9c:	b	2b50 <coda_bin_cursor_read_float_array+0x74>
    2ba0:	mvn	r0, #0
    2ba4:	b	2b50 <coda_bin_cursor_read_float_array+0x74>
    2ba8:	movw	r1, #0
    2bac:	movt	r1, #0
    2bb0:	ldr	r3, [pc, #12]	; 2bc4 <coda_bin_cursor_read_float_array+0xe8>
    2bb4:	movw	r0, #0
    2bb8:	movt	r0, #0
    2bbc:	movw	r2, #1114	; 0x45a
    2bc0:	bl	0 <__assert_fail>
    2bc4:	.word	0x00000170

00002bc8 <coda_bin_cursor_read_double_array>:
    2bc8:	ldr	r3, [r0, #4]
    2bcc:	strd	r4, [sp, #-16]!
    2bd0:	mov	r4, r0
    2bd4:	mov	r5, r1
    2bd8:	add	r3, r0, r3, lsl #4
    2bdc:	ldr	r3, [r3, #-8]
    2be0:	str	r6, [sp, #8]
    2be4:	mov	r6, r2
    2be8:	str	lr, [sp, #12]
    2bec:	sub	sp, sp, #8
    2bf0:	ldr	r2, [r3]
    2bf4:	cmp	r2, #99	; 0x63
    2bf8:	ldrhi	r3, [r3, #4]
    2bfc:	ldr	r3, [r3, #40]	; 0x28
    2c00:	ldr	r3, [r3]
    2c04:	cmp	r3, #1
    2c08:	beq	2c70 <coda_bin_cursor_read_double_array+0xa8>
    2c0c:	cmp	r3, #0
    2c10:	bne	2c94 <coda_bin_cursor_read_double_array+0xcc>
    2c14:	movw	r1, #0
    2c18:	movt	r1, #0
    2c1c:	str	r3, [sp]
    2c20:	mov	r2, r5
    2c24:	mov	r3, #8
    2c28:	bl	70c <read_array>
    2c2c:	cmp	r0, #0
    2c30:	bne	2c8c <coda_bin_cursor_read_double_array+0xc4>
    2c34:	cmp	r6, #0
    2c38:	bne	2c50 <coda_bin_cursor_read_double_array+0x88>
    2c3c:	add	sp, sp, #8
    2c40:	ldrd	r4, [sp]
    2c44:	ldr	r6, [sp, #8]
    2c48:	add	sp, sp, #12
    2c4c:	pop	{pc}		; (ldr pc, [sp], #4)
    2c50:	mov	r1, r5
    2c54:	mov	r0, r4
    2c58:	mov	r2, #8
    2c5c:	bl	a14 <transpose_array>
    2c60:	adds	r0, r0, #0
    2c64:	movne	r0, #1
    2c68:	rsb	r0, r0, #0
    2c6c:	b	2c3c <coda_bin_cursor_read_double_array+0x74>
    2c70:	mov	r2, r1
    2c74:	mov	r3, #8
    2c78:	str	r6, [sp]
    2c7c:	movw	r1, #0
    2c80:	movt	r1, #0
    2c84:	bl	70c <read_array>
    2c88:	b	2c3c <coda_bin_cursor_read_double_array+0x74>
    2c8c:	mvn	r0, #0
    2c90:	b	2c3c <coda_bin_cursor_read_double_array+0x74>
    2c94:	movw	r1, #0
    2c98:	movt	r1, #0
    2c9c:	ldr	r3, [pc, #12]	; 2cb0 <coda_bin_cursor_read_double_array+0xe8>
    2ca0:	movw	r0, #0
    2ca4:	movt	r0, #0
    2ca8:	movw	r2, #1140	; 0x474
    2cac:	bl	0 <__assert_fail>
    2cb0:	.word	0x00000194

00002cb4 <coda_bin_cursor_read_char_array>:
    2cb4:	ldr	r3, [r0, #4]
    2cb8:	strd	r4, [sp, #-16]!
    2cbc:	mov	r4, r0
    2cc0:	mov	r5, r1
    2cc4:	add	r3, r0, r3, lsl #4
    2cc8:	ldr	r3, [r3, #-8]
    2ccc:	str	r6, [sp, #8]
    2cd0:	mov	r6, r2
    2cd4:	str	lr, [sp, #12]
    2cd8:	sub	sp, sp, #8
    2cdc:	ldr	r2, [r3]
    2ce0:	cmp	r2, #99	; 0x63
    2ce4:	ldrhi	r3, [r3, #4]
    2ce8:	ldr	r3, [r3, #40]	; 0x28
    2cec:	ldr	r3, [r3]
    2cf0:	cmp	r3, #1
    2cf4:	beq	2d5c <coda_bin_cursor_read_char_array+0xa8>
    2cf8:	cmp	r3, #0
    2cfc:	bne	2d7c <coda_bin_cursor_read_char_array+0xc8>
    2d00:	movw	r1, #0
    2d04:	movt	r1, #0
    2d08:	str	r3, [sp]
    2d0c:	mov	r2, r5
    2d10:	mov	r3, #1
    2d14:	bl	70c <read_array>
    2d18:	cmp	r0, #0
    2d1c:	bne	2d74 <coda_bin_cursor_read_char_array+0xc0>
    2d20:	cmp	r6, #0
    2d24:	bne	2d3c <coda_bin_cursor_read_char_array+0x88>
    2d28:	add	sp, sp, #8
    2d2c:	ldrd	r4, [sp]
    2d30:	ldr	r6, [sp, #8]
    2d34:	add	sp, sp, #12
    2d38:	pop	{pc}		; (ldr pc, [sp], #4)
    2d3c:	mov	r1, r5
    2d40:	mov	r0, r4
    2d44:	mov	r2, #1
    2d48:	bl	a14 <transpose_array>
    2d4c:	adds	r0, r0, #0
    2d50:	movne	r0, #1
    2d54:	rsb	r0, r0, #0
    2d58:	b	2d28 <coda_bin_cursor_read_char_array+0x74>
    2d5c:	mov	r2, r1
    2d60:	movw	r1, #0
    2d64:	movt	r1, #0
    2d68:	str	r6, [sp]
    2d6c:	bl	70c <read_array>
    2d70:	b	2d28 <coda_bin_cursor_read_char_array+0x74>
    2d74:	mvn	r0, #0
    2d78:	b	2d28 <coda_bin_cursor_read_char_array+0x74>
    2d7c:	movw	r1, #0
    2d80:	movt	r1, #0
    2d84:	ldr	r3, [pc, #12]	; 2d98 <coda_bin_cursor_read_char_array+0xe4>
    2d88:	movw	r0, #0
    2d8c:	movt	r0, #0
    2d90:	movw	r2, #1166	; 0x48e
    2d94:	bl	0 <__assert_fail>
    2d98:	.word	0x000001b8

00002d9c <coda_bin_cursor_read_int8_partial_array>:
    2d9c:	ldr	ip, [r0, #4]
    2da0:	push	{lr}		; (str lr, [sp, #-4]!)
    2da4:	mov	lr, r3
    2da8:	sub	sp, sp, #12
    2dac:	add	ip, r0, ip, lsl #4
    2db0:	ldr	r3, [ip, #-8]
    2db4:	ldr	ip, [r3]
    2db8:	cmp	ip, #99	; 0x63
    2dbc:	ldrhi	r3, [r3, #4]
    2dc0:	ldr	r3, [r3, #40]	; 0x28
    2dc4:	ldr	ip, [r3]
    2dc8:	cmp	ip, #1
    2dcc:	beq	2e00 <coda_bin_cursor_read_int8_partial_array+0x64>
    2dd0:	cmp	ip, #0
    2dd4:	bne	2e24 <coda_bin_cursor_read_int8_partial_array+0x88>
    2dd8:	mov	ip, #1
    2ddc:	mov	r3, r2
    2de0:	str	lr, [sp]
    2de4:	mov	r2, r1
    2de8:	movw	r1, #0
    2dec:	movt	r1, #0
    2df0:	str	ip, [sp, #4]
    2df4:	bl	958 <read_partial_array>
    2df8:	add	sp, sp, #12
    2dfc:	pop	{pc}		; (ldr pc, [sp], #4)
    2e00:	mov	r3, r2
    2e04:	mov	r2, r1
    2e08:	str	lr, [sp]
    2e0c:	movw	r1, #0
    2e10:	movt	r1, #0
    2e14:	str	ip, [sp, #4]
    2e18:	bl	958 <read_partial_array>
    2e1c:	add	sp, sp, #12
    2e20:	pop	{pc}		; (ldr pc, [sp], #4)
    2e24:	movw	r1, #0
    2e28:	movt	r1, #0
    2e2c:	ldr	r3, [pc, #12]	; 2e40 <coda_bin_cursor_read_int8_partial_array+0xa4>
    2e30:	movw	r0, #0
    2e34:	movt	r0, #0
    2e38:	movw	r2, #1192	; 0x4a8
    2e3c:	bl	0 <__assert_fail>
    2e40:	.word	0x000001d8

00002e44 <coda_bin_cursor_read_uint8_partial_array>:
    2e44:	ldr	ip, [r0, #4]
    2e48:	push	{lr}		; (str lr, [sp, #-4]!)
    2e4c:	mov	lr, r3
    2e50:	sub	sp, sp, #12
    2e54:	add	ip, r0, ip, lsl #4
    2e58:	ldr	r3, [ip, #-8]
    2e5c:	ldr	ip, [r3]
    2e60:	cmp	ip, #99	; 0x63
    2e64:	ldrhi	r3, [r3, #4]
    2e68:	ldr	r3, [r3, #40]	; 0x28
    2e6c:	ldr	ip, [r3]
    2e70:	cmp	ip, #1
    2e74:	beq	2ea8 <coda_bin_cursor_read_uint8_partial_array+0x64>
    2e78:	cmp	ip, #0
    2e7c:	bne	2ecc <coda_bin_cursor_read_uint8_partial_array+0x88>
    2e80:	mov	ip, #1
    2e84:	mov	r3, r2
    2e88:	str	lr, [sp]
    2e8c:	mov	r2, r1
    2e90:	movw	r1, #0
    2e94:	movt	r1, #0
    2e98:	str	ip, [sp, #4]
    2e9c:	bl	958 <read_partial_array>
    2ea0:	add	sp, sp, #12
    2ea4:	pop	{pc}		; (ldr pc, [sp], #4)
    2ea8:	mov	r3, r2
    2eac:	mov	r2, r1
    2eb0:	str	lr, [sp]
    2eb4:	movw	r1, #0
    2eb8:	movt	r1, #0
    2ebc:	str	ip, [sp, #4]
    2ec0:	bl	958 <read_partial_array>
    2ec4:	add	sp, sp, #12
    2ec8:	pop	{pc}		; (ldr pc, [sp], #4)
    2ecc:	movw	r1, #0
    2ed0:	movt	r1, #0
    2ed4:	ldr	r3, [pc, #12]	; 2ee8 <coda_bin_cursor_read_uint8_partial_array+0xa4>
    2ed8:	movw	r0, #0
    2edc:	movt	r0, #0
    2ee0:	movw	r2, #1206	; 0x4b6
    2ee4:	bl	0 <__assert_fail>
    2ee8:	.word	0x00000200

00002eec <coda_bin_cursor_read_int16_partial_array>:
    2eec:	ldr	ip, [r0, #4]
    2ef0:	push	{lr}		; (str lr, [sp, #-4]!)
    2ef4:	mov	lr, r3
    2ef8:	sub	sp, sp, #12
    2efc:	add	ip, r0, ip, lsl #4
    2f00:	ldr	r3, [ip, #-8]
    2f04:	ldr	ip, [r3]
    2f08:	cmp	ip, #99	; 0x63
    2f0c:	ldrhi	r3, [r3, #4]
    2f10:	ldr	r3, [r3, #40]	; 0x28
    2f14:	ldr	r3, [r3]
    2f18:	cmp	r3, #1
    2f1c:	beq	2f50 <coda_bin_cursor_read_int16_partial_array+0x64>
    2f20:	cmp	r3, #0
    2f24:	bne	2f78 <coda_bin_cursor_read_int16_partial_array+0x8c>
    2f28:	mov	ip, #2
    2f2c:	mov	r3, r2
    2f30:	str	lr, [sp]
    2f34:	mov	r2, r1
    2f38:	movw	r1, #0
    2f3c:	movt	r1, #0
    2f40:	str	ip, [sp, #4]
    2f44:	bl	958 <read_partial_array>
    2f48:	add	sp, sp, #12
    2f4c:	pop	{pc}		; (ldr pc, [sp], #4)
    2f50:	mov	ip, #2
    2f54:	mov	r3, r2
    2f58:	str	lr, [sp]
    2f5c:	mov	r2, r1
    2f60:	movw	r1, #0
    2f64:	movt	r1, #0
    2f68:	str	ip, [sp, #4]
    2f6c:	bl	958 <read_partial_array>
    2f70:	add	sp, sp, #12
    2f74:	pop	{pc}		; (ldr pc, [sp], #4)
    2f78:	movw	r1, #0
    2f7c:	movt	r1, #0
    2f80:	ldr	r3, [pc, #12]	; 2f94 <coda_bin_cursor_read_int16_partial_array+0xa8>
    2f84:	movw	r0, #0
    2f88:	movt	r0, #0
    2f8c:	movw	r2, #1220	; 0x4c4
    2f90:	bl	0 <__assert_fail>
    2f94:	.word	0x0000022c

00002f98 <coda_bin_cursor_read_uint16_partial_array>:
    2f98:	ldr	ip, [r0, #4]
    2f9c:	push	{lr}		; (str lr, [sp, #-4]!)
    2fa0:	mov	lr, r3
    2fa4:	sub	sp, sp, #12
    2fa8:	add	ip, r0, ip, lsl #4
    2fac:	ldr	r3, [ip, #-8]
    2fb0:	ldr	ip, [r3]
    2fb4:	cmp	ip, #99	; 0x63
    2fb8:	ldrhi	r3, [r3, #4]
    2fbc:	ldr	r3, [r3, #40]	; 0x28
    2fc0:	ldr	r3, [r3]
    2fc4:	cmp	r3, #1
    2fc8:	beq	2ffc <coda_bin_cursor_read_uint16_partial_array+0x64>
    2fcc:	cmp	r3, #0
    2fd0:	bne	3024 <coda_bin_cursor_read_uint16_partial_array+0x8c>
    2fd4:	mov	ip, #2
    2fd8:	mov	r3, r2
    2fdc:	str	lr, [sp]
    2fe0:	mov	r2, r1
    2fe4:	movw	r1, #0
    2fe8:	movt	r1, #0
    2fec:	str	ip, [sp, #4]
    2ff0:	bl	958 <read_partial_array>
    2ff4:	add	sp, sp, #12
    2ff8:	pop	{pc}		; (ldr pc, [sp], #4)
    2ffc:	mov	ip, #2
    3000:	mov	r3, r2
    3004:	str	lr, [sp]
    3008:	mov	r2, r1
    300c:	movw	r1, #0
    3010:	movt	r1, #0
    3014:	str	ip, [sp, #4]
    3018:	bl	958 <read_partial_array>
    301c:	add	sp, sp, #12
    3020:	pop	{pc}		; (ldr pc, [sp], #4)
    3024:	movw	r1, #0
    3028:	movt	r1, #0
    302c:	ldr	r3, [pc, #12]	; 3040 <coda_bin_cursor_read_uint16_partial_array+0xa8>
    3030:	movw	r0, #0
    3034:	movt	r0, #0
    3038:	movw	r2, #1234	; 0x4d2
    303c:	bl	0 <__assert_fail>
    3040:	.word	0x00000258

00003044 <coda_bin_cursor_read_int32_partial_array>:
    3044:	ldr	ip, [r0, #4]
    3048:	push	{lr}		; (str lr, [sp, #-4]!)
    304c:	mov	lr, r3
    3050:	sub	sp, sp, #12
    3054:	add	ip, r0, ip, lsl #4
    3058:	ldr	r3, [ip, #-8]
    305c:	ldr	ip, [r3]
    3060:	cmp	ip, #99	; 0x63
    3064:	ldrhi	r3, [r3, #4]
    3068:	ldr	r3, [r3, #40]	; 0x28
    306c:	ldr	r3, [r3]
    3070:	cmp	r3, #1
    3074:	beq	30a8 <coda_bin_cursor_read_int32_partial_array+0x64>
    3078:	cmp	r3, #0
    307c:	bne	30d0 <coda_bin_cursor_read_int32_partial_array+0x8c>
    3080:	mov	ip, #4
    3084:	mov	r3, r2
    3088:	str	lr, [sp]
    308c:	mov	r2, r1
    3090:	movw	r1, #0
    3094:	movt	r1, #0
    3098:	str	ip, [sp, #4]
    309c:	bl	958 <read_partial_array>
    30a0:	add	sp, sp, #12
    30a4:	pop	{pc}		; (ldr pc, [sp], #4)
    30a8:	mov	ip, #4
    30ac:	mov	r3, r2
    30b0:	str	lr, [sp]
    30b4:	mov	r2, r1
    30b8:	movw	r1, #0
    30bc:	movt	r1, #0
    30c0:	str	ip, [sp, #4]
    30c4:	bl	958 <read_partial_array>
    30c8:	add	sp, sp, #12
    30cc:	pop	{pc}		; (ldr pc, [sp], #4)
    30d0:	movw	r1, #0
    30d4:	movt	r1, #0
    30d8:	ldr	r3, [pc, #12]	; 30ec <coda_bin_cursor_read_int32_partial_array+0xa8>
    30dc:	movw	r0, #0
    30e0:	movt	r0, #0
    30e4:	mov	r2, #1248	; 0x4e0
    30e8:	bl	0 <__assert_fail>
    30ec:	.word	0x00000284

000030f0 <coda_bin_cursor_read_uint32_partial_array>:
    30f0:	ldr	ip, [r0, #4]
    30f4:	push	{lr}		; (str lr, [sp, #-4]!)
    30f8:	mov	lr, r3
    30fc:	sub	sp, sp, #12
    3100:	add	ip, r0, ip, lsl #4
    3104:	ldr	r3, [ip, #-8]
    3108:	ldr	ip, [r3]
    310c:	cmp	ip, #99	; 0x63
    3110:	ldrhi	r3, [r3, #4]
    3114:	ldr	r3, [r3, #40]	; 0x28
    3118:	ldr	r3, [r3]
    311c:	cmp	r3, #1
    3120:	beq	3154 <coda_bin_cursor_read_uint32_partial_array+0x64>
    3124:	cmp	r3, #0
    3128:	bne	317c <coda_bin_cursor_read_uint32_partial_array+0x8c>
    312c:	mov	ip, #4
    3130:	mov	r3, r2
    3134:	str	lr, [sp]
    3138:	mov	r2, r1
    313c:	movw	r1, #0
    3140:	movt	r1, #0
    3144:	str	ip, [sp, #4]
    3148:	bl	958 <read_partial_array>
    314c:	add	sp, sp, #12
    3150:	pop	{pc}		; (ldr pc, [sp], #4)
    3154:	mov	ip, #4
    3158:	mov	r3, r2
    315c:	str	lr, [sp]
    3160:	mov	r2, r1
    3164:	movw	r1, #0
    3168:	movt	r1, #0
    316c:	str	ip, [sp, #4]
    3170:	bl	958 <read_partial_array>
    3174:	add	sp, sp, #12
    3178:	pop	{pc}		; (ldr pc, [sp], #4)
    317c:	movw	r1, #0
    3180:	movt	r1, #0
    3184:	ldr	r3, [pc, #12]	; 3198 <coda_bin_cursor_read_uint32_partial_array+0xa8>
    3188:	movw	r0, #0
    318c:	movt	r0, #0
    3190:	movw	r2, #1262	; 0x4ee
    3194:	bl	0 <__assert_fail>
    3198:	.word	0x000002b0

0000319c <coda_bin_cursor_read_int64_partial_array>:
    319c:	ldr	ip, [r0, #4]
    31a0:	push	{lr}		; (str lr, [sp, #-4]!)
    31a4:	mov	lr, r3
    31a8:	sub	sp, sp, #12
    31ac:	add	ip, r0, ip, lsl #4
    31b0:	ldr	r3, [ip, #-8]
    31b4:	ldr	ip, [r3]
    31b8:	cmp	ip, #99	; 0x63
    31bc:	ldrhi	r3, [r3, #4]
    31c0:	ldr	r3, [r3, #40]	; 0x28
    31c4:	ldr	r3, [r3]
    31c8:	cmp	r3, #1
    31cc:	beq	3200 <coda_bin_cursor_read_int64_partial_array+0x64>
    31d0:	cmp	r3, #0
    31d4:	bne	3228 <coda_bin_cursor_read_int64_partial_array+0x8c>
    31d8:	mov	ip, #8
    31dc:	mov	r3, r2
    31e0:	str	lr, [sp]
    31e4:	mov	r2, r1
    31e8:	movw	r1, #0
    31ec:	movt	r1, #0
    31f0:	str	ip, [sp, #4]
    31f4:	bl	958 <read_partial_array>
    31f8:	add	sp, sp, #12
    31fc:	pop	{pc}		; (ldr pc, [sp], #4)
    3200:	mov	ip, #8
    3204:	mov	r3, r2
    3208:	str	lr, [sp]
    320c:	mov	r2, r1
    3210:	movw	r1, #0
    3214:	movt	r1, #0
    3218:	str	ip, [sp, #4]
    321c:	bl	958 <read_partial_array>
    3220:	add	sp, sp, #12
    3224:	pop	{pc}		; (ldr pc, [sp], #4)
    3228:	movw	r1, #0
    322c:	movt	r1, #0
    3230:	ldr	r3, [pc, #12]	; 3244 <coda_bin_cursor_read_int64_partial_array+0xa8>
    3234:	movw	r0, #0
    3238:	movt	r0, #0
    323c:	movw	r2, #1276	; 0x4fc
    3240:	bl	0 <__assert_fail>
    3244:	.word	0x000002dc

00003248 <coda_bin_cursor_read_uint64_partial_array>:
    3248:	ldr	ip, [r0, #4]
    324c:	push	{lr}		; (str lr, [sp, #-4]!)
    3250:	mov	lr, r3
    3254:	sub	sp, sp, #12
    3258:	add	ip, r0, ip, lsl #4
    325c:	ldr	r3, [ip, #-8]
    3260:	ldr	ip, [r3]
    3264:	cmp	ip, #99	; 0x63
    3268:	ldrhi	r3, [r3, #4]
    326c:	ldr	r3, [r3, #40]	; 0x28
    3270:	ldr	r3, [r3]
    3274:	cmp	r3, #1
    3278:	beq	32ac <coda_bin_cursor_read_uint64_partial_array+0x64>
    327c:	cmp	r3, #0
    3280:	bne	32d4 <coda_bin_cursor_read_uint64_partial_array+0x8c>
    3284:	mov	ip, #8
    3288:	mov	r3, r2
    328c:	str	lr, [sp]
    3290:	mov	r2, r1
    3294:	movw	r1, #0
    3298:	movt	r1, #0
    329c:	str	ip, [sp, #4]
    32a0:	bl	958 <read_partial_array>
    32a4:	add	sp, sp, #12
    32a8:	pop	{pc}		; (ldr pc, [sp], #4)
    32ac:	mov	ip, #8
    32b0:	mov	r3, r2
    32b4:	str	lr, [sp]
    32b8:	mov	r2, r1
    32bc:	movw	r1, #0
    32c0:	movt	r1, #0
    32c4:	str	ip, [sp, #4]
    32c8:	bl	958 <read_partial_array>
    32cc:	add	sp, sp, #12
    32d0:	pop	{pc}		; (ldr pc, [sp], #4)
    32d4:	movw	r1, #0
    32d8:	movt	r1, #0
    32dc:	ldr	r3, [pc, #12]	; 32f0 <coda_bin_cursor_read_uint64_partial_array+0xa8>
    32e0:	movw	r0, #0
    32e4:	movt	r0, #0
    32e8:	movw	r2, #1290	; 0x50a
    32ec:	bl	0 <__assert_fail>
    32f0:	.word	0x00000308

000032f4 <coda_bin_cursor_read_float_partial_array>:
    32f4:	ldr	ip, [r0, #4]
    32f8:	push	{lr}		; (str lr, [sp, #-4]!)
    32fc:	mov	lr, r3
    3300:	sub	sp, sp, #12
    3304:	add	ip, r0, ip, lsl #4
    3308:	ldr	r3, [ip, #-8]
    330c:	ldr	ip, [r3]
    3310:	cmp	ip, #99	; 0x63
    3314:	ldrhi	r3, [r3, #4]
    3318:	ldr	r3, [r3, #40]	; 0x28
    331c:	ldr	r3, [r3]
    3320:	cmp	r3, #1
    3324:	beq	3358 <coda_bin_cursor_read_float_partial_array+0x64>
    3328:	cmp	r3, #0
    332c:	bne	3380 <coda_bin_cursor_read_float_partial_array+0x8c>
    3330:	mov	ip, #4
    3334:	mov	r3, r2
    3338:	str	lr, [sp]
    333c:	mov	r2, r1
    3340:	movw	r1, #0
    3344:	movt	r1, #0
    3348:	str	ip, [sp, #4]
    334c:	bl	958 <read_partial_array>
    3350:	add	sp, sp, #12
    3354:	pop	{pc}		; (ldr pc, [sp], #4)
    3358:	mov	ip, #4
    335c:	mov	r3, r2
    3360:	str	lr, [sp]
    3364:	mov	r2, r1
    3368:	movw	r1, #0
    336c:	movt	r1, #0
    3370:	str	ip, [sp, #4]
    3374:	bl	958 <read_partial_array>
    3378:	add	sp, sp, #12
    337c:	pop	{pc}		; (ldr pc, [sp], #4)
    3380:	movw	r1, #0
    3384:	movt	r1, #0
    3388:	ldr	r3, [pc, #12]	; 339c <coda_bin_cursor_read_float_partial_array+0xa8>
    338c:	movw	r0, #0
    3390:	movt	r0, #0
    3394:	movw	r2, #1304	; 0x518
    3398:	bl	0 <__assert_fail>
    339c:	.word	0x00000334

000033a0 <coda_bin_cursor_read_double_partial_array>:
    33a0:	ldr	ip, [r0, #4]
    33a4:	push	{lr}		; (str lr, [sp, #-4]!)
    33a8:	mov	lr, r3
    33ac:	sub	sp, sp, #12
    33b0:	add	ip, r0, ip, lsl #4
    33b4:	ldr	r3, [ip, #-8]
    33b8:	ldr	ip, [r3]
    33bc:	cmp	ip, #99	; 0x63
    33c0:	ldrhi	r3, [r3, #4]
    33c4:	ldr	r3, [r3, #40]	; 0x28
    33c8:	ldr	r3, [r3]
    33cc:	cmp	r3, #1
    33d0:	beq	3404 <coda_bin_cursor_read_double_partial_array+0x64>
    33d4:	cmp	r3, #0
    33d8:	bne	342c <coda_bin_cursor_read_double_partial_array+0x8c>
    33dc:	mov	ip, #8
    33e0:	mov	r3, r2
    33e4:	str	lr, [sp]
    33e8:	mov	r2, r1
    33ec:	movw	r1, #0
    33f0:	movt	r1, #0
    33f4:	str	ip, [sp, #4]
    33f8:	bl	958 <read_partial_array>
    33fc:	add	sp, sp, #12
    3400:	pop	{pc}		; (ldr pc, [sp], #4)
    3404:	mov	ip, #8
    3408:	mov	r3, r2
    340c:	str	lr, [sp]
    3410:	mov	r2, r1
    3414:	movw	r1, #0
    3418:	movt	r1, #0
    341c:	str	ip, [sp, #4]
    3420:	bl	958 <read_partial_array>
    3424:	add	sp, sp, #12
    3428:	pop	{pc}		; (ldr pc, [sp], #4)
    342c:	movw	r1, #0
    3430:	movt	r1, #0
    3434:	ldr	r3, [pc, #12]	; 3448 <coda_bin_cursor_read_double_partial_array+0xa8>
    3438:	movw	r0, #0
    343c:	movt	r0, #0
    3440:	movw	r2, #1318	; 0x526
    3444:	bl	0 <__assert_fail>
    3448:	.word	0x00000360

0000344c <coda_bin_cursor_read_char_partial_array>:
    344c:	ldr	ip, [r0, #4]
    3450:	push	{lr}		; (str lr, [sp, #-4]!)
    3454:	mov	lr, r3
    3458:	sub	sp, sp, #12
    345c:	add	ip, r0, ip, lsl #4
    3460:	ldr	r3, [ip, #-8]
    3464:	ldr	ip, [r3]
    3468:	cmp	ip, #99	; 0x63
    346c:	ldrhi	r3, [r3, #4]
    3470:	ldr	r3, [r3, #40]	; 0x28
    3474:	ldr	ip, [r3]
    3478:	cmp	ip, #1
    347c:	beq	34b0 <coda_bin_cursor_read_char_partial_array+0x64>
    3480:	cmp	ip, #0
    3484:	bne	34d4 <coda_bin_cursor_read_char_partial_array+0x88>
    3488:	mov	ip, #1
    348c:	mov	r3, r2
    3490:	str	lr, [sp]
    3494:	mov	r2, r1
    3498:	movw	r1, #0
    349c:	movt	r1, #0
    34a0:	str	ip, [sp, #4]
    34a4:	bl	958 <read_partial_array>
    34a8:	add	sp, sp, #12
    34ac:	pop	{pc}		; (ldr pc, [sp], #4)
    34b0:	mov	r3, r2
    34b4:	mov	r2, r1
    34b8:	str	lr, [sp]
    34bc:	movw	r1, #0
    34c0:	movt	r1, #0
    34c4:	str	ip, [sp, #4]
    34c8:	bl	958 <read_partial_array>
    34cc:	add	sp, sp, #12
    34d0:	pop	{pc}		; (ldr pc, [sp], #4)
    34d4:	movw	r1, #0
    34d8:	movt	r1, #0
    34dc:	ldr	r3, [pc, #12]	; 34f0 <coda_bin_cursor_read_char_partial_array+0xa4>
    34e0:	movw	r0, #0
    34e4:	movt	r0, #0
    34e8:	movw	r2, #1332	; 0x534
    34ec:	bl	0 <__assert_fail>
    34f0:	.word	0x0000038c
