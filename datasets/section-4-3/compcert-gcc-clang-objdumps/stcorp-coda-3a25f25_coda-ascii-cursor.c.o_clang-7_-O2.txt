
../compcert-repos/stcorp-coda-3a25f25/CMakeFiles/coda_static.dir/libcoda/coda-ascii-cursor.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <coda_ascii_parse_int64>:
       0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
       4:	add	fp, sp, #28
       8:	sub	sp, sp, #20
       c:	mov	r7, r0
      10:	ldrb	r0, [r0]
      14:	cmp	r1, #1
      18:	blt	dc <coda_ascii_parse_int64+0xdc>
      1c:	mvn	ip, #8
      20:	mov	r4, r1
      24:	uxtab	r5, ip, r0
      28:	cmp	r5, #36	; 0x24
      2c:	bhi	24c <coda_ascii_parse_int64+0x24c>
      30:	add	r6, pc, #0
      34:	ldr	pc, [r6, r5, lsl #2]
      38:	.word	0x000000cc
      3c:	.word	0x0000024c
      40:	.word	0x0000024c
      44:	.word	0x0000024c
      48:	.word	0x0000024c
      4c:	.word	0x0000024c
      50:	.word	0x0000024c
      54:	.word	0x0000024c
      58:	.word	0x0000024c
      5c:	.word	0x0000024c
      60:	.word	0x0000024c
      64:	.word	0x0000024c
      68:	.word	0x0000024c
      6c:	.word	0x0000024c
      70:	.word	0x0000024c
      74:	.word	0x0000024c
      78:	.word	0x0000024c
      7c:	.word	0x0000024c
      80:	.word	0x0000024c
      84:	.word	0x0000024c
      88:	.word	0x0000024c
      8c:	.word	0x0000024c
      90:	.word	0x0000024c
      94:	.word	0x000000cc
      98:	.word	0x0000024c
      9c:	.word	0x0000024c
      a0:	.word	0x0000024c
      a4:	.word	0x0000024c
      a8:	.word	0x0000024c
      ac:	.word	0x0000024c
      b0:	.word	0x0000024c
      b4:	.word	0x0000024c
      b8:	.word	0x0000024c
      bc:	.word	0x0000024c
      c0:	.word	0x000000f0
      c4:	.word	0x0000024c
      c8:	.word	0x000000f0
      cc:	ldrb	r0, [r7, #1]!
      d0:	subs	r4, r4, #1
      d4:	bgt	24 <coda_ascii_parse_int64+0x24>
      d8:	b	e0 <coda_ascii_parse_int64+0xe0>
      dc:	mov	r4, r1
      e0:	cmp	r0, #43	; 0x2b
      e4:	movne	r6, #0
      e8:	cmpne	r0, #45	; 0x2d
      ec:	bne	108 <coda_ascii_parse_int64+0x108>
      f0:	mvn	r6, #44	; 0x2c
      f4:	sub	r4, r4, #1
      f8:	add	r7, r7, #1
      fc:	uxtab	r0, r6, r0
     100:	clz	r0, r0
     104:	lsr	r6, r0, #5
     108:	cmp	r4, #1
     10c:	blt	258 <coda_ascii_parse_int64+0x258>
     110:	mov	r9, #0
     114:	mvn	sl, #-2147483648	; 0x80000000
     118:	mov	r8, #0
     11c:	mov	r5, #0
     120:	str	r6, [sp, #4]
     124:	str	r3, [sp, #8]
     128:	str	r2, [sp, #12]
     12c:	str	r1, [sp, #16]
     130:	ldrb	r0, [r7, -r9]
     134:	sub	r6, r0, #48	; 0x30
     138:	uxtb	r0, r6
     13c:	cmp	r0, #9
     140:	bhi	1f4 <coda_ascii_parse_int64+0x1f4>
     144:	sub	r1, sl, r6, asr #31
     148:	mvn	r0, r6
     14c:	mov	r2, #10
     150:	mov	r3, #0
     154:	bl	0 <__aeabi_ldivmod>
     158:	subs	r0, r0, r8
     15c:	sbcs	r0, r1, r5
     160:	blt	240 <coda_ascii_parse_int64+0x240>
     164:	mov	r0, #10
     168:	add	r2, r5, r5, lsl #2
     16c:	sub	r9, r9, #1
     170:	umull	r0, r1, r8, r0
     174:	adds	r8, r0, r6
     178:	add	r1, r1, r2, lsl #1
     17c:	add	r0, r4, r9
     180:	adc	r5, r1, r6, asr #31
     184:	add	r1, r0, #1
     188:	cmp	r1, #1
     18c:	bgt	130 <coda_ascii_parse_int64+0x130>
     190:	ldr	ip, [sp, #16]
     194:	ldr	lr, [sp, #12]
     198:	ldr	r2, [sp, #8]
     19c:	ldr	r6, [sp, #4]
     1a0:	sub	r1, r7, r9
     1a4:	cmp	r2, #0
     1a8:	bne	21c <coda_ascii_parse_int64+0x21c>
     1ac:	cmp	r0, #0
     1b0:	beq	21c <coda_ascii_parse_int64+0x21c>
     1b4:	cmp	r0, #1
     1b8:	blt	1e8 <coda_ascii_parse_int64+0x1e8>
     1bc:	add	r0, r0, #1
     1c0:	ldrb	r2, [r1]
     1c4:	cmp	r2, #32
     1c8:	cmpne	r2, #9
     1cc:	bne	1e8 <coda_ascii_parse_int64+0x1e8>
     1d0:	sub	r0, r0, #1
     1d4:	add	r1, r1, #1
     1d8:	cmp	r0, #1
     1dc:	bgt	1c0 <coda_ascii_parse_int64+0x1c0>
     1e0:	mov	r0, #0
     1e4:	beq	21c <coda_ascii_parse_int64+0x21c>
     1e8:	movw	r1, #0
     1ec:	movt	r1, #0
     1f0:	b	260 <coda_ascii_parse_int64+0x260>
     1f4:	ldr	ip, [sp, #16]
     1f8:	ldr	lr, [sp, #12]
     1fc:	ldr	r2, [sp, #8]
     200:	ldr	r6, [sp, #4]
     204:	cmp	r9, #0
     208:	beq	258 <coda_ascii_parse_int64+0x258>
     20c:	sub	r1, r7, r9
     210:	add	r0, r4, r9
     214:	cmp	r2, #0
     218:	beq	1ac <coda_ascii_parse_int64+0x1ac>
     21c:	rsbs	r2, r8, #0
     220:	sub	r0, ip, r0
     224:	rsc	r3, r5, #0
     228:	cmp	r6, #0
     22c:	moveq	r2, r8
     230:	moveq	r3, r5
     234:	strd	r2, [lr]
     238:	sub	sp, fp, #28
     23c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
     240:	movw	r1, #0
     244:	movt	r1, #0
     248:	b	260 <coda_ascii_parse_int64+0x260>
     24c:	mov	r6, #0
     250:	cmp	r4, #1
     254:	bge	110 <coda_ascii_parse_int64+0x110>
     258:	movw	r1, #0
     25c:	movt	r1, #0
     260:	mvn	r0, #102	; 0x66
     264:	bl	0 <coda_set_error>
     268:	mvn	r0, #0
     26c:	sub	sp, fp, #28
     270:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

00000274 <coda_ascii_parse_uint64>:
     274:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
     278:	add	fp, sp, #28
     27c:	sub	sp, sp, #12
     280:	mov	r7, r0
     284:	mov	r0, r1
     288:	cmp	r1, #1
     28c:	str	r3, [sp, #8]
     290:	blt	2b0 <coda_ascii_parse_uint64+0x3c>
     294:	ldrb	r3, [r7]
     298:	cmp	r3, #32
     29c:	cmpne	r3, #9
     2a0:	bne	2b0 <coda_ascii_parse_uint64+0x3c>
     2a4:	subs	r0, r0, #1
     2a8:	add	r7, r7, #1
     2ac:	bgt	294 <coda_ascii_parse_uint64+0x20>
     2b0:	ldrb	r6, [r7]
     2b4:	mov	r3, r0
     2b8:	mov	r4, #0
     2bc:	mov	r5, #0
     2c0:	cmp	r6, #43	; 0x2b
     2c4:	subeq	r3, r3, #1
     2c8:	mvneq	r4, #0
     2cc:	cmp	r3, #1
     2d0:	blt	3d4 <coda_ascii_parse_uint64+0x160>
     2d4:	cmp	r6, #43	; 0x2b
     2d8:	add	sl, r0, r4
     2dc:	mvn	r6, #1
     2e0:	mov	r8, #0
     2e4:	mov	r9, #0
     2e8:	str	r2, [sp]
     2ec:	str	r1, [sp, #4]
     2f0:	addeq	r7, r7, #1
     2f4:	ldrb	r0, [r7, -r5]
     2f8:	sub	r4, r0, #48	; 0x30
     2fc:	uxtb	r0, r4
     300:	cmp	r0, #9
     304:	bhi	364 <coda_ascii_parse_uint64+0xf0>
     308:	eor	r0, r4, r6
     30c:	mvn	r1, r4, asr #31
     310:	mov	r2, #10
     314:	mov	r3, #0
     318:	bl	0 <__aeabi_uldivmod>
     31c:	subs	r0, r0, r8
     320:	sbcs	r0, r1, r9
     324:	bcc	3e0 <coda_ascii_parse_uint64+0x16c>
     328:	mov	r0, #10
     32c:	add	r2, r9, r9, lsl #2
     330:	sub	r5, r5, #1
     334:	umull	r0, r1, r8, r0
     338:	add	r1, r1, r2, lsl #1
     33c:	adds	r8, r0, r4
     340:	adc	r9, r1, r4, asr #31
     344:	add	r1, sl, r5
     348:	add	r0, r1, #1
     34c:	cmp	r0, #1
     350:	bgt	2f4 <coda_ascii_parse_uint64+0x80>
     354:	ldr	r3, [sp, #4]
     358:	ldr	r6, [sp]
     35c:	sub	r0, r7, r5
     360:	b	37c <coda_ascii_parse_uint64+0x108>
     364:	ldr	r3, [sp, #4]
     368:	ldr	r6, [sp]
     36c:	cmp	r5, #0
     370:	beq	3d4 <coda_ascii_parse_uint64+0x160>
     374:	sub	r0, r7, r5
     378:	add	r1, sl, r5
     37c:	ldr	r2, [sp, #8]
     380:	cmp	r2, #0
     384:	bne	3c4 <coda_ascii_parse_uint64+0x150>
     388:	cmp	r1, #0
     38c:	beq	3c4 <coda_ascii_parse_uint64+0x150>
     390:	cmp	r1, #1
     394:	blt	3ec <coda_ascii_parse_uint64+0x178>
     398:	add	r1, r1, #1
     39c:	ldrb	r2, [r0]
     3a0:	cmp	r2, #32
     3a4:	cmpne	r2, #9
     3a8:	bne	3ec <coda_ascii_parse_uint64+0x178>
     3ac:	sub	r1, r1, #1
     3b0:	add	r0, r0, #1
     3b4:	cmp	r1, #1
     3b8:	bgt	39c <coda_ascii_parse_uint64+0x128>
     3bc:	mov	r1, #0
     3c0:	bne	3ec <coda_ascii_parse_uint64+0x178>
     3c4:	strd	r8, [r6]
     3c8:	sub	r0, r3, r1
     3cc:	sub	sp, fp, #28
     3d0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
     3d4:	movw	r1, #0
     3d8:	movt	r1, #0
     3dc:	b	3f4 <coda_ascii_parse_uint64+0x180>
     3e0:	movw	r1, #0
     3e4:	movt	r1, #0
     3e8:	b	3f4 <coda_ascii_parse_uint64+0x180>
     3ec:	movw	r1, #0
     3f0:	movt	r1, #0
     3f4:	mvn	r0, #102	; 0x66
     3f8:	bl	0 <coda_set_error>
     3fc:	mvn	r0, #0
     400:	sub	sp, fp, #28
     404:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

00000408 <coda_ascii_parse_double>:
     408:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
     40c:	add	fp, sp, #24
     410:	cmp	r1, #1
     414:	blt	894 <coda_ascii_parse_double+0x48c>
     418:	mov	r8, r2
     41c:	mov	r9, r1
     420:	mov	lr, r1
     424:	ldrb	r1, [r0]
     428:	sub	r2, r1, #9
     42c:	cmp	r2, #36	; 0x24
     430:	bhi	62c <coda_ascii_parse_double+0x224>
     434:	add	r7, pc, #0
     438:	ldr	pc, [r7, r2, lsl #2]
     43c:	.word	0x000004d0
     440:	.word	0x0000062c
     444:	.word	0x0000062c
     448:	.word	0x0000062c
     44c:	.word	0x0000062c
     450:	.word	0x0000062c
     454:	.word	0x0000062c
     458:	.word	0x0000062c
     45c:	.word	0x0000062c
     460:	.word	0x0000062c
     464:	.word	0x0000062c
     468:	.word	0x0000062c
     46c:	.word	0x0000062c
     470:	.word	0x0000062c
     474:	.word	0x0000062c
     478:	.word	0x0000062c
     47c:	.word	0x0000062c
     480:	.word	0x0000062c
     484:	.word	0x0000062c
     488:	.word	0x0000062c
     48c:	.word	0x0000062c
     490:	.word	0x0000062c
     494:	.word	0x0000062c
     498:	.word	0x000004d0
     49c:	.word	0x0000062c
     4a0:	.word	0x0000062c
     4a4:	.word	0x0000062c
     4a8:	.word	0x0000062c
     4ac:	.word	0x0000062c
     4b0:	.word	0x0000062c
     4b4:	.word	0x0000062c
     4b8:	.word	0x0000062c
     4bc:	.word	0x0000062c
     4c0:	.word	0x0000062c
     4c4:	.word	0x000004ec
     4c8:	.word	0x0000062c
     4cc:	.word	0x000004ec
     4d0:	subs	lr, lr, #1
     4d4:	add	r0, r0, #1
     4d8:	bgt	424 <coda_ascii_parse_double+0x1c>
     4dc:	mov	ip, #0
     4e0:	cmp	lr, #1
     4e4:	bge	644 <coda_ascii_parse_double+0x23c>
     4e8:	b	894 <coda_ascii_parse_double+0x48c>
     4ec:	sub	r1, r1, #45	; 0x2d
     4f0:	sub	lr, lr, #1
     4f4:	add	r0, r0, #1
     4f8:	clz	r1, r1
     4fc:	lsr	ip, r1, #5
     500:	mov	r1, #1
     504:	cmp	lr, #3
     508:	blt	63c <coda_ascii_parse_double+0x234>
     50c:	ldrb	r2, [r0]
     510:	sub	r7, r2, #73	; 0x49
     514:	cmp	r7, #37	; 0x25
     518:	bhi	644 <coda_ascii_parse_double+0x23c>
     51c:	add	r6, pc, #0
     520:	ldr	pc, [r6, r7, lsl #2]
     524:	.word	0x000005e8
     528:	.word	0x00000644
     52c:	.word	0x00000644
     530:	.word	0x00000644
     534:	.word	0x00000644
     538:	.word	0x000005bc
     53c:	.word	0x00000644
     540:	.word	0x00000644
     544:	.word	0x00000644
     548:	.word	0x00000644
     54c:	.word	0x00000644
     550:	.word	0x00000644
     554:	.word	0x00000644
     558:	.word	0x00000644
     55c:	.word	0x00000644
     560:	.word	0x00000644
     564:	.word	0x00000644
     568:	.word	0x00000644
     56c:	.word	0x00000644
     570:	.word	0x00000644
     574:	.word	0x00000644
     578:	.word	0x00000644
     57c:	.word	0x00000644
     580:	.word	0x00000644
     584:	.word	0x00000644
     588:	.word	0x00000644
     58c:	.word	0x00000644
     590:	.word	0x00000644
     594:	.word	0x00000644
     598:	.word	0x00000644
     59c:	.word	0x00000644
     5a0:	.word	0x00000644
     5a4:	.word	0x000005e8
     5a8:	.word	0x00000644
     5ac:	.word	0x00000644
     5b0:	.word	0x00000644
     5b4:	.word	0x00000644
     5b8:	.word	0x000005bc
     5bc:	ldrb	r7, [r0, #1]
     5c0:	orr	r7, r7, #32
     5c4:	cmp	r7, #97	; 0x61
     5c8:	bne	5e0 <coda_ascii_parse_double+0x1d8>
     5cc:	ldrb	r7, [r0, #2]
     5d0:	cmp	r7, #78	; 0x4e
     5d4:	bne	8c4 <coda_ascii_parse_double+0x4bc>
     5d8:	cmp	r1, #0
     5dc:	beq	8d0 <coda_ascii_parse_double+0x4c8>
     5e0:	cmp	r2, #105	; 0x69
     5e4:	bne	644 <coda_ascii_parse_double+0x23c>
     5e8:	ldrb	r1, [r0, #1]
     5ec:	orr	r1, r1, #32
     5f0:	cmp	r1, #110	; 0x6e
     5f4:	bne	644 <coda_ascii_parse_double+0x23c>
     5f8:	ldrb	r1, [r0, #2]
     5fc:	orr	r1, r1, #32
     600:	cmp	r1, #102	; 0x66
     604:	bne	644 <coda_ascii_parse_double+0x23c>
     608:	sub	r4, lr, #3
     60c:	cmp	r3, #0
     610:	bne	61c <coda_ascii_parse_double+0x214>
     614:	cmp	r4, #0
     618:	bne	8e4 <coda_ascii_parse_double+0x4dc>
     61c:	cmp	ip, #0
     620:	beq	8f8 <coda_ascii_parse_double+0x4f0>
     624:	bl	0 <coda_MinInf>
     628:	b	8fc <coda_ascii_parse_double+0x4f4>
     62c:	mov	r1, #0
     630:	mov	ip, #0
     634:	cmp	lr, #3
     638:	bge	50c <coda_ascii_parse_double+0x104>
     63c:	cmp	lr, #1
     640:	blt	894 <coda_ascii_parse_double+0x48c>
     644:	mov	r6, #0
     648:	vmov.i32	d17, #0	; 0x00000000
     64c:	mov	r1, #1
     650:	vmov.f64	d16, #36	; 0x41200000  10.0
     654:	mov	r2, r0
     658:	ldrb	r7, [r0, r6]
     65c:	sub	r5, r7, #48	; 0x30
     660:	uxtb	r4, r5
     664:	cmp	r4, #9
     668:	bhi	6a8 <coda_ascii_parse_double+0x2a0>
     66c:	vmov	s0, r5
     670:	sub	r1, r1, #1
     674:	add	r2, r2, #1
     678:	add	r6, r6, #1
     67c:	vcvt.f64.s32	d18, s0
     680:	add	r4, lr, r1
     684:	vmla.f64	d18, d17, d16
     688:	cmp	r4, #1
     68c:	vmov.f64	d17, d18
     690:	bgt	658 <coda_ascii_parse_double+0x250>
     694:	add	r0, r0, r6
     698:	sub	r5, lr, r6
     69c:	mov	r1, #0
     6a0:	vmov.f64	d17, d18
     6a4:	b	720 <coda_ascii_parse_double+0x318>
     6a8:	sub	r5, lr, r6
     6ac:	mov	r1, #0
     6b0:	cmp	r7, #46	; 0x2e
     6b4:	bne	714 <coda_ascii_parse_double+0x30c>
     6b8:	sub	r7, lr, #1
     6bc:	cmp	r5, #2
     6c0:	blt	880 <coda_ascii_parse_double+0x478>
     6c4:	sub	r0, r7, r6
     6c8:	mov	r1, #0
     6cc:	sub	r7, r2, r1
     6d0:	ldrb	r5, [r7, #1]
     6d4:	sub	r5, r5, #48	; 0x30
     6d8:	uxtb	r4, r5
     6dc:	cmp	r4, #9
     6e0:	bhi	8ac <coda_ascii_parse_double+0x4a4>
     6e4:	vmov	s0, r5
     6e8:	add	r7, r0, r1
     6ec:	sub	r1, r1, #1
     6f0:	vcvt.f64.s32	d18, s0
     6f4:	cmp	r7, #1
     6f8:	vmla.f64	d18, d17, d16
     6fc:	vmov.f64	d17, d18
     700:	bgt	6cc <coda_ascii_parse_double+0x2c4>
     704:	add	r5, r0, r1
     708:	sub	r0, r2, r1
     70c:	add	r0, r0, #1
     710:	b	6a0 <coda_ascii_parse_double+0x298>
     714:	add	r0, r0, r6
     718:	cmp	r6, #0
     71c:	beq	894 <coda_ascii_parse_double+0x48c>
     720:	vneg.f64	d18, d17
     724:	cmp	ip, #0
     728:	vseleq.f64	d17, d17, d18
     72c:	cmp	r5, #1
     730:	blt	7ec <coda_ascii_parse_double+0x3e4>
     734:	ldrb	r2, [r0]
     738:	sub	r7, r2, #100	; 0x64
     73c:	cmp	r7, #2
     740:	subcs	r2, r2, #68	; 0x44
     744:	cmpcs	r2, #1
     748:	bhi	7ec <coda_ascii_parse_double+0x3e4>
     74c:	sub	r6, r5, #1
     750:	add	r4, r0, #1
     754:	mov	ip, #0
     758:	cmp	r5, #2
     75c:	blt	784 <coda_ascii_parse_double+0x37c>
     760:	ldrb	r2, [r4]
     764:	cmp	r2, #45	; 0x2d
     768:	cmpne	r2, #43	; 0x2b
     76c:	bne	784 <coda_ascii_parse_double+0x37c>
     770:	add	r4, r0, #2
     774:	sub	r0, r2, #45	; 0x2d
     778:	sub	r6, r5, #2
     77c:	clz	r0, r0
     780:	lsr	ip, r0, #5
     784:	cmp	r6, #1
     788:	blt	874 <coda_ascii_parse_double+0x46c>
     78c:	mov	r7, #0
     790:	mov	r2, #0
     794:	ldrb	r0, [r4, -r7]
     798:	sub	r5, r0, #48	; 0x30
     79c:	uxtb	r5, r5
     7a0:	cmp	r5, #9
     7a4:	bhi	7d0 <coda_ascii_parse_double+0x3c8>
     7a8:	add	r2, r2, r2, lsl #2
     7ac:	sub	r7, r7, #1
     7b0:	add	r0, r0, r2, lsl #1
     7b4:	add	r5, r6, r7
     7b8:	sub	r2, r0, #48	; 0x30
     7bc:	add	r0, r5, #1
     7c0:	cmp	r0, #1
     7c4:	bgt	794 <coda_ascii_parse_double+0x38c>
     7c8:	sub	r0, r4, r7
     7cc:	b	7e0 <coda_ascii_parse_double+0x3d8>
     7d0:	cmp	r7, #0
     7d4:	beq	874 <coda_ascii_parse_double+0x46c>
     7d8:	sub	r0, r4, r7
     7dc:	add	r5, r6, r7
     7e0:	cmp	ip, #0
     7e4:	rsbne	r2, r2, #0
     7e8:	add	r1, r2, r1
     7ec:	cmp	r3, #0
     7f0:	bne	830 <coda_ascii_parse_double+0x428>
     7f4:	cmp	r5, #0
     7f8:	beq	830 <coda_ascii_parse_double+0x428>
     7fc:	cmp	r5, #1
     800:	blt	8e4 <coda_ascii_parse_double+0x4dc>
     804:	add	r2, r5, #1
     808:	ldrb	r3, [r0]
     80c:	cmp	r3, #32
     810:	cmpne	r3, #9
     814:	bne	8e4 <coda_ascii_parse_double+0x4dc>
     818:	sub	r2, r2, #1
     81c:	add	r0, r0, #1
     820:	cmp	r2, #1
     824:	bgt	808 <coda_ascii_parse_double+0x400>
     828:	mov	r5, #0
     82c:	bne	8e4 <coda_ascii_parse_double+0x4dc>
     830:	cmp	r1, #0
     834:	beq	868 <coda_ascii_parse_double+0x460>
     838:	vmov.f64	d18, #112	; 0x3f800000  1.0
     83c:	blt	850 <coda_ascii_parse_double+0x448>
     840:	vmul.f64	d18, d18, d16
     844:	subs	r1, r1, #1
     848:	bne	840 <coda_ascii_parse_double+0x438>
     84c:	b	864 <coda_ascii_parse_double+0x45c>
     850:	vmul.f64	d18, d18, d16
     854:	adds	r1, r1, #1
     858:	bne	850 <coda_ascii_parse_double+0x448>
     85c:	vmov.f64	d16, #112	; 0x3f800000  1.0
     860:	vdiv.f64	d18, d16, d18
     864:	vmul.f64	d17, d17, d18
     868:	sub	r0, r9, r5
     86c:	vstr	d17, [r8]
     870:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
     874:	movw	r1, #0
     878:	movt	r1, #0
     87c:	b	89c <coda_ascii_parse_double+0x494>
     880:	add	r0, r0, r6
     884:	sub	r5, r7, r6
     888:	add	r0, r0, #1
     88c:	cmp	r6, #0
     890:	bne	720 <coda_ascii_parse_double+0x318>
     894:	movw	r1, #0
     898:	movt	r1, #0
     89c:	mvn	r0, #102	; 0x66
     8a0:	bl	0 <coda_set_error>
     8a4:	mvn	r0, #0
     8a8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
     8ac:	add	r5, r0, r1
     8b0:	sub	r6, r6, r1
     8b4:	add	r0, r7, #1
     8b8:	cmp	r6, #0
     8bc:	bne	720 <coda_ascii_parse_double+0x318>
     8c0:	b	894 <coda_ascii_parse_double+0x48c>
     8c4:	cmp	r1, #0
     8c8:	cmpeq	r7, #110	; 0x6e
     8cc:	bne	5e0 <coda_ascii_parse_double+0x1d8>
     8d0:	sub	r4, lr, #3
     8d4:	cmp	r3, #0
     8d8:	bne	8f0 <coda_ascii_parse_double+0x4e8>
     8dc:	cmp	r4, #0
     8e0:	beq	8f0 <coda_ascii_parse_double+0x4e8>
     8e4:	movw	r1, #0
     8e8:	movt	r1, #0
     8ec:	b	89c <coda_ascii_parse_double+0x494>
     8f0:	bl	0 <coda_NaN>
     8f4:	b	8fc <coda_ascii_parse_double+0x4f4>
     8f8:	bl	0 <coda_PlusInf>
     8fc:	sub	r0, r9, r4
     900:	vstr	d0, [r8]
     904:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}

00000908 <coda_ascii_cursor_set_asciilines>:
     908:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
     90c:	add	fp, sp, #24
     910:	mov	r5, r0
     914:	ldr	r0, [r1, #68]	; 0x44
     918:	mov	r6, r1
     91c:	cmp	r0, #0
     920:	beq	954 <coda_ascii_cursor_set_asciilines+0x4c>
     924:	ldr	r7, [r6, #76]	; 0x4c
     928:	cmp	r7, #0
     92c:	beq	96c <coda_ascii_cursor_set_asciilines+0x64>
     930:	mov	r4, #0
     934:	mov	r0, #1
     938:	mvn	r1, #0
     93c:	str	r6, [r5]
     940:	stmib	r5, {r0, r7}
     944:	str	r1, [r5, #12]
     948:	str	r4, [r5, #16]
     94c:	str	r4, [r5, #20]
     950:	b	9a4 <coda_ascii_cursor_set_asciilines+0x9c>
     954:	mov	r0, r6
     958:	bl	0 <coda_ascii_init_asciilines>
     95c:	mvn	r4, #0
     960:	cmp	r0, #0
     964:	bne	9a4 <coda_ascii_cursor_set_asciilines+0x9c>
     968:	b	924 <coda_ascii_cursor_set_asciilines+0x1c>
     96c:	mov	r0, #0
     970:	bl	0 <coda_type_array_new>
     974:	mvn	r4, #0
     978:	cmp	r0, #0
     97c:	beq	9a4 <coda_ascii_cursor_set_asciilines+0x9c>
     980:	ldr	r1, [r6, #64]	; 0x40
     984:	mov	r7, r0
     988:	bl	0 <coda_type_array_add_fixed_dimension>
     98c:	cmp	r0, #0
     990:	beq	9ac <coda_ascii_cursor_set_asciilines+0xa4>
     994:	mov	r0, r7
     998:	bl	0 <coda_type_release>
     99c:	mov	r0, r4
     9a0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
     9a4:	mov	r0, r4
     9a8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
     9ac:	mov	r0, #0
     9b0:	bl	0 <coda_type_text_new>
     9b4:	cmp	r0, #0
     9b8:	beq	994 <coda_ascii_cursor_set_asciilines+0x8c>
     9bc:	mov	r1, #2
     9c0:	mov	r8, r0
     9c4:	bl	0 <coda_type_text_set_special_text_type>
     9c8:	mov	r0, r7
     9cc:	mov	r1, r8
     9d0:	bl	0 <coda_type_array_set_base_type>
     9d4:	cmp	r0, #0
     9d8:	beq	9ec <coda_ascii_cursor_set_asciilines+0xe4>
     9dc:	mov	r0, r7
     9e0:	bl	0 <coda_type_release>
     9e4:	mov	r0, r8
     9e8:	b	998 <coda_ascii_cursor_set_asciilines+0x90>
     9ec:	str	r7, [r6, #76]	; 0x4c
     9f0:	b	930 <coda_ascii_cursor_set_asciilines+0x28>

000009f4 <coda_ascii_cursor_get_string_length>:
     9f4:	push	{r4, sl, fp, lr}
     9f8:	add	fp, sp, #8
     9fc:	sub	sp, sp, #8
     a00:	mov	r4, r1
     a04:	mov	r1, sp
     a08:	bl	a48 <coda_ascii_cursor_get_bit_size>
     a0c:	mov	r1, r0
     a10:	mvn	r0, #0
     a14:	cmp	r1, #0
     a18:	beq	a24 <coda_ascii_cursor_get_string_length+0x30>
     a1c:	sub	sp, fp, #8
     a20:	pop	{r4, sl, fp, pc}
     a24:	ldm	sp, {r0, r1}
     a28:	lsr	r0, r0, #3
     a2c:	cmp	r1, #0
     a30:	orr	r0, r0, r1, lsl #29
     a34:	mvnlt	r0, #0
     a38:	str	r0, [r4]
     a3c:	mov	r0, #0
     a40:	sub	sp, fp, #8
     a44:	pop	{r4, sl, fp, pc}

00000a48 <coda_ascii_cursor_get_bit_size>:
     a48:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
     a4c:	add	fp, sp, #28
     a50:	sub	sp, sp, #628	; 0x274
     a54:	mov	r5, r0
     a58:	ldr	r0, [r0, #4]
     a5c:	mov	r4, r1
     a60:	sub	r0, r0, #1
     a64:	add	r0, r5, r0, lsl #4
     a68:	ldr	sl, [r0, #8]
     a6c:	ldr	r1, [sl]
     a70:	cmp	r1, #99	; 0x63
     a74:	ldrhi	sl, [sl, #4]
     a78:	mov	r6, sl
     a7c:	ldr	r2, [r6, #24]!
     a80:	ldr	r3, [r6, #4]
     a84:	cmp	r3, #0
     a88:	blt	a98 <coda_ascii_cursor_get_bit_size+0x50>
     a8c:	strd	r2, [r4]
     a90:	mov	r7, #0
     a94:	b	adc <coda_ascii_cursor_get_bit_size+0x94>
     a98:	ldr	r1, [sl, #8]
     a9c:	cmp	r1, #1
     aa0:	bhi	ab8 <coda_ascii_cursor_get_bit_size+0x70>
     aa4:	mov	r0, r5
     aa8:	mov	r1, r4
     aac:	bl	0 <coda_ascbin_cursor_get_bit_size>
     ab0:	mov	r7, r0
     ab4:	b	adc <coda_ascii_cursor_get_bit_size+0x94>
     ab8:	ldrd	r8, [r0, #16]
     abc:	sub	r1, fp, #40	; 0x28
     ac0:	mov	r0, r5
     ac4:	mvn	r2, #0
     ac8:	mvn	r3, #0
     acc:	bl	15f0 <get_bit_size_boundary>
     ad0:	mvn	r7, #0
     ad4:	cmp	r0, #0
     ad8:	beq	ae8 <coda_ascii_cursor_get_bit_size+0xa0>
     adc:	mov	r0, r7
     ae0:	sub	sp, fp, #28
     ae4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
     ae8:	ldr	r2, [sl, #8]
     aec:	sub	r0, r2, #2
     af0:	cmp	r0, #2
     af4:	bcc	b40 <coda_ascii_cursor_get_bit_size+0xf8>
     af8:	cmp	r2, #4
     afc:	mvn	r7, #0
     b00:	beq	b9c <coda_ascii_cursor_get_bit_size+0x154>
     b04:	mvn	r1, #0
     b08:	cmp	r2, #6
     b0c:	bne	ca4 <coda_ascii_cursor_get_bit_size+0x25c>
     b10:	ldr	r0, [sl, #40]	; 0x28
     b14:	cmp	r0, #2
     b18:	bne	cac <coda_ascii_cursor_get_bit_size+0x264>
     b1c:	ldr	r0, [sl, #44]	; 0x2c
     b20:	ldr	r1, [r0, #8]
     b24:	cmp	r1, #4
     b28:	bne	1570 <coda_ascii_cursor_get_bit_size+0xb28>
     b2c:	ldr	r0, [r0, #44]	; 0x2c
     b30:	mvn	r1, #0
     b34:	cmp	r0, #0
     b38:	bne	ca0 <coda_ascii_cursor_get_bit_size+0x258>
     b3c:	b	bb8 <coda_ascii_cursor_get_bit_size+0x170>
     b40:	ldr	r1, [sl, #52]	; 0x34
     b44:	mvn	r7, #0
     b48:	cmp	r1, #0
     b4c:	beq	bc4 <coda_ascii_cursor_get_bit_size+0x17c>
     b50:	ldr	r0, [fp, #-40]	; 0xffffffd8
     b54:	str	r1, [sp, #20]
     b58:	ldr	r1, [fp, #-36]	; 0xffffffdc
     b5c:	mov	r2, #64	; 0x40
     b60:	lsr	r3, r0, #3
     b64:	subs	r0, r0, #512	; 0x200
     b68:	sbcs	r0, r1, #0
     b6c:	lsr	r0, r8, #3
     b70:	orrlt	r2, r3, r1, lsl #29
     b74:	orr	r3, r0, r9, lsl #29
     b78:	ldr	r0, [r5]
     b7c:	str	r2, [sp, #24]
     b80:	ldr	r1, [r0, #48]	; 0x30
     b84:	cmp	r1, #0
     b88:	beq	bdc <coda_ascii_cursor_get_bit_size+0x194>
     b8c:	add	r1, r1, r3
     b90:	sub	r0, fp, #104	; 0x68
     b94:	bl	0 <memcpy>
     b98:	b	bfc <coda_ascii_cursor_get_bit_size+0x1b4>
     b9c:	ldr	r0, [sl, #32]
     ba0:	cmp	r0, #0
     ba4:	bne	cf4 <coda_ascii_cursor_get_bit_size+0x2ac>
     ba8:	ldr	r0, [sl, #44]	; 0x2c
     bac:	mov	r1, #0
     bb0:	cmp	r0, #0
     bb4:	bne	b50 <coda_ascii_cursor_get_bit_size+0x108>
     bb8:	ldr	r0, [fp, #-40]	; 0xffffffd8
     bbc:	ldr	r1, [fp, #-36]	; 0xffffffdc
     bc0:	b	1018 <coda_ascii_cursor_get_bit_size+0x5d0>
     bc4:	ldr	r0, [sl, #32]
     bc8:	mvn	r1, #0
     bcc:	cmp	r0, #0
     bd0:	bne	ca0 <coda_ascii_cursor_get_bit_size+0x258>
     bd4:	mov	r1, #0
     bd8:	b	b50 <coda_ascii_cursor_get_bit_size+0x108>
     bdc:	ldr	r1, [r0, #16]
     be0:	cmp	r1, #2
     be4:	bcs	1530 <coda_ascii_cursor_get_bit_size+0xae8>
     be8:	ldr	r0, [r0, #56]	; 0x38
     bec:	sub	r1, fp, #104	; 0x68
     bf0:	bl	0 <pread>
     bf4:	cmn	r0, #1
     bf8:	ble	1408 <coda_ascii_cursor_get_bit_size+0x9c0>
     bfc:	ldr	r0, [sp, #20]
     c00:	cmp	r0, #0
     c04:	beq	c9c <coda_ascii_cursor_get_bit_size+0x254>
     c08:	ldr	r9, [r0, #8]
     c0c:	ldr	r1, [sp, #24]
     c10:	str	r4, [sp, #16]
     c14:	cmp	r9, #1
     c18:	blt	c74 <coda_ascii_cursor_get_bit_size+0x22c>
     c1c:	ldr	r0, [sp, #20]
     c20:	mov	r4, #0
     c24:	ldr	r8, [r0, #12]
     c28:	ldr	r0, [r8, r4, lsl #2]
     c2c:	ldr	r7, [r0]
     c30:	cmp	r7, #0
     c34:	beq	c60 <coda_ascii_cursor_get_bit_size+0x218>
     c38:	cmp	r7, r1
     c3c:	bgt	c68 <coda_ascii_cursor_get_bit_size+0x220>
     c40:	ldr	r0, [r0, #4]
     c44:	sub	r1, fp, #104	; 0x68
     c48:	mov	r2, r7
     c4c:	bl	0 <memcmp>
     c50:	ldr	r1, [sp, #24]
     c54:	cmp	r0, #0
     c58:	bne	c68 <coda_ascii_cursor_get_bit_size+0x220>
     c5c:	b	f5c <coda_ascii_cursor_get_bit_size+0x514>
     c60:	cmp	r1, #0
     c64:	beq	f48 <coda_ascii_cursor_get_bit_size+0x500>
     c68:	add	r4, r4, #1
     c6c:	cmp	r4, r9
     c70:	blt	c28 <coda_ascii_cursor_get_bit_size+0x1e0>
     c74:	ldr	r0, [sp, #20]
     c78:	mvn	r7, #0
     c7c:	ldm	r0, {r0, r3}
     c80:	ldr	r4, [sp, #16]
     c84:	subs	r2, r7, r0
     c88:	sbcs	r2, r7, r3
     c8c:	bge	ca0 <coda_ascii_cursor_get_bit_size+0x258>
     c90:	stm	r4, {r0, r3}
     c94:	mov	r7, #0
     c98:	b	adc <coda_ascii_cursor_get_bit_size+0x94>
     c9c:	ldr	r1, [sp, #24]
     ca0:	ldr	r2, [sl, #8]
     ca4:	cmp	r2, #6
     ca8:	bne	ce8 <coda_ascii_cursor_get_bit_size+0x2a0>
     cac:	add	r6, sp, #32
     cb0:	mov	r1, r5
     cb4:	mov	r2, #520	; 0x208
     cb8:	mov	r0, r6
     cbc:	bl	0 <memcpy>
     cc0:	mov	r0, r6
     cc4:	bl	0 <coda_cursor_use_base_type_of_special_type>
     cc8:	mvn	r7, #0
     ccc:	cmp	r0, #0
     cd0:	bne	adc <coda_ascii_cursor_get_bit_size+0x94>
     cd4:	add	r0, sp, #32
     cd8:	mov	r1, r4
     cdc:	bl	0 <coda_cursor_get_bit_size>
     ce0:	mov	r7, r0
     ce4:	b	adc <coda_ascii_cursor_get_bit_size+0x94>
     ce8:	ldr	r0, [sl, #32]
     cec:	cmp	r0, #0
     cf0:	beq	d5c <coda_ascii_cursor_get_bit_size+0x314>
     cf4:	mov	r1, r5
     cf8:	mov	r2, r4
     cfc:	bl	0 <coda_expression_eval_integer>
     d00:	cmp	r0, #0
     d04:	beq	d24 <coda_ascii_cursor_get_bit_size+0x2dc>
     d08:	movw	r0, #0
     d0c:	movt	r0, #0
     d10:	bl	0 <coda_add_error_message>
     d14:	mov	r0, r5
     d18:	bl	0 <coda_cursor_add_to_error_message>
     d1c:	mvn	r7, #0
     d20:	b	adc <coda_ascii_cursor_get_bit_size+0x94>
     d24:	ldrd	r2, [r6]
     d28:	subs	r0, r7, #7
     d2c:	sbc	r1, r7, #0
     d30:	eor	r1, r3, r1
     d34:	eor	r0, r2, r0
     d38:	orrs	r0, r0, r1
     d3c:	ldrd	r0, [r4]
     d40:	bne	e74 <coda_ascii_cursor_get_bit_size+0x42c>
     d44:	lsl	r1, r1, #3
     d48:	lsl	r2, r0, #3
     d4c:	orr	r1, r1, r0, lsr #29
     d50:	str	r2, [r4]
     d54:	str	r1, [r4, #4]
     d58:	b	e78 <coda_ascii_cursor_get_bit_size+0x430>
     d5c:	sub	r0, r2, #2
     d60:	cmp	r0, #2
     d64:	bcs	e9c <coda_ascii_cursor_get_bit_size+0x454>
     d68:	ldr	r0, [sl, #12]
     d6c:	cmp	r0, #9
     d70:	bhi	1590 <coda_ascii_cursor_get_bit_size+0xb48>
     d74:	mov	r3, #1
     d78:	mov	r2, #85	; 0x55
     d7c:	tst	r2, r3, lsl r0
     d80:	bne	f2c <coda_ascii_cursor_get_bit_size+0x4e4>
     d84:	mov	r2, #170	; 0xaa
     d88:	tst	r2, r3, lsl r0
     d8c:	beq	f74 <coda_ascii_cursor_get_bit_size+0x52c>
     d90:	sub	r5, fp, #104	; 0x68
     d94:	mov	r0, r1
     d98:	cmp	r1, #1
     d9c:	blt	dbc <coda_ascii_cursor_get_bit_size+0x374>
     da0:	ldrb	r2, [r5]
     da4:	cmp	r2, #32
     da8:	cmpne	r2, #9
     dac:	bne	dbc <coda_ascii_cursor_get_bit_size+0x374>
     db0:	subs	r0, r0, #1
     db4:	add	r5, r5, #1
     db8:	bgt	da0 <coda_ascii_cursor_get_bit_size+0x358>
     dbc:	ldrb	r7, [r5]
     dc0:	mov	r3, r0
     dc4:	mov	r2, #0
     dc8:	mov	r6, #0
     dcc:	cmp	r7, #43	; 0x2b
     dd0:	subeq	r3, r3, #1
     dd4:	mvneq	r2, #0
     dd8:	cmp	r3, #1
     ddc:	blt	1024 <coda_ascii_cursor_get_bit_size+0x5dc>
     de0:	cmp	r7, #43	; 0x2b
     de4:	add	r9, r0, r2
     de8:	mov	sl, #0
     dec:	mov	r7, #0
     df0:	str	r4, [sp, #16]
     df4:	addeq	r5, r5, #1
     df8:	ldrb	r0, [r5, -r6]
     dfc:	sub	r4, r0, #48	; 0x30
     e00:	uxtb	r0, r4
     e04:	cmp	r0, #9
     e08:	bhi	ff4 <coda_ascii_cursor_get_bit_size+0x5ac>
     e0c:	mov	r8, r1
     e10:	mvn	r1, #0
     e14:	mov	r2, #10
     e18:	mov	r3, #0
     e1c:	subs	r0, r1, #1
     e20:	sbc	r1, r1, #0
     e24:	eor	r0, r4, r0
     e28:	eor	r1, r1, r4, asr #31
     e2c:	bl	0 <__aeabi_uldivmod>
     e30:	subs	r0, r0, sl
     e34:	sbcs	r0, r1, r7
     e38:	bcc	1030 <coda_ascii_cursor_get_bit_size+0x5e8>
     e3c:	mov	r0, #10
     e40:	add	r2, r7, r7, lsl #2
     e44:	sub	r6, r6, #1
     e48:	umull	r0, r1, sl, r0
     e4c:	adds	sl, r0, r4
     e50:	add	r1, r1, r2, lsl #1
     e54:	add	r0, r9, r6
     e58:	adc	r7, r1, r4, asr #31
     e5c:	add	r1, r0, #1
     e60:	cmp	r1, #1
     e64:	mov	r1, r8
     e68:	bgt	df8 <coda_ascii_cursor_get_bit_size+0x3b0>
     e6c:	ldr	r4, [sp, #16]
     e70:	b	1004 <coda_ascii_cursor_get_bit_size+0x5bc>
     e74:	mov	r2, r0
     e78:	mov	r7, #0
     e7c:	cmn	r1, #1
     e80:	bgt	adc <coda_ascii_cursor_get_bit_size+0x94>
     e84:	movw	r0, #65236	; 0xfed4
     e88:	movw	r1, #0
     e8c:	movt	r0, #65535	; 0xffff
     e90:	movt	r1, #0
     e94:	bl	0 <coda_set_error>
     e98:	b	d14 <coda_ascii_cursor_get_bit_size+0x2cc>
     e9c:	cmp	r2, #4
     ea0:	bne	1550 <coda_ascii_cursor_get_bit_size+0xb08>
     ea4:	ldr	r1, [sl, #44]	; 0x2c
     ea8:	mov	r7, #0
     eac:	cmp	r1, #4
     eb0:	bhi	adc <coda_ascii_cursor_get_bit_size+0x94>
     eb4:	add	r0, pc, #0
     eb8:	ldr	pc, [r0, r1, lsl #2]
     ebc:	.word	0x000015b0
     ec0:	.word	0x00000f90
     ec4:	.word	0x00000ed0
     ec8:	.word	0x00000ed0
     ecc:	.word	0x00000fcc
     ed0:	ldr	r0, [r5]
     ed4:	ldr	r2, [r0, #16]
     ed8:	cmp	r2, #0
     edc:	beq	1040 <coda_ascii_cursor_get_bit_size+0x5f8>
     ee0:	ldr	r2, [r5, #4]
     ee4:	mov	r3, r5
     ee8:	ldr	r2, [r3, r2, lsl #4]!
     eec:	tst	r2, #7
     ef0:	bne	1050 <coda_ascii_cursor_get_bit_size+0x608>
     ef4:	ldr	r3, [r3, #4]
     ef8:	lsr	r2, r2, #3
     efc:	mov	r6, #0
     f00:	orr	ip, r2, r3, lsl #29
     f04:	ldr	r2, [r0, #8]
     f08:	ldr	r7, [r0, #12]
     f0c:	subs	lr, r2, ip
     f10:	sbc	r8, r7, r3, asr #3
     f14:	subs	r2, lr, #1
     f18:	sbcs	r2, r8, #0
     f1c:	blt	12e0 <coda_ascii_cursor_get_bit_size+0x898>
     f20:	mov	r7, #0
     f24:	str	r8, [sp, #24]
     f28:	b	1230 <coda_ascii_cursor_get_bit_size+0x7e8>
     f2c:	sub	r0, fp, #104	; 0x68
     f30:	add	r2, sp, #32
     f34:	mov	r3, #1
     f38:	bl	0 <coda_ascii_parse_int64>
     f3c:	cmp	r0, #0
     f40:	bge	1010 <coda_ascii_cursor_get_bit_size+0x5c8>
     f44:	b	1388 <coda_ascii_cursor_get_bit_size+0x940>
     f48:	ldr	r0, [sp, #16]
     f4c:	mov	r7, #0
     f50:	str	r7, [r0]
     f54:	str	r7, [r0, #4]
     f58:	b	adc <coda_ascii_cursor_get_bit_size+0x94>
     f5c:	sbfx	r1, r7, #28, #1
     f60:	ldr	r2, [sp, #16]
     f64:	lsl	r0, r7, #3
     f68:	mov	r7, #0
     f6c:	strd	r0, [r2]
     f70:	b	adc <coda_ascii_cursor_get_bit_size+0x94>
     f74:	sub	r0, fp, #104	; 0x68
     f78:	add	r2, sp, #32
     f7c:	mov	r3, #1
     f80:	bl	408 <coda_ascii_parse_double>
     f84:	cmp	r0, #0
     f88:	bge	1010 <coda_ascii_cursor_get_bit_size+0x5c8>
     f8c:	b	1388 <coda_ascii_cursor_get_bit_size+0x940>
     f90:	ldr	r0, [r5]
     f94:	ldr	r1, [r0, #16]
     f98:	cmp	r1, #0
     f9c:	bne	15d0 <coda_ascii_cursor_get_bit_size+0xb88>
     fa0:	ldr	r1, [r0, #60]	; 0x3c
     fa4:	sub	r2, r1, #1
     fa8:	cmp	r2, #2
     fac:	bcc	106c <coda_ascii_cursor_get_bit_size+0x624>
     fb0:	cmp	r1, #0
     fb4:	beq	12b8 <coda_ascii_cursor_get_bit_size+0x870>
     fb8:	cmp	r1, #3
     fbc:	bne	adc <coda_ascii_cursor_get_bit_size+0x94>
     fc0:	mov	r7, #0
     fc4:	mov	r6, #16
     fc8:	b	1074 <coda_ascii_cursor_get_bit_size+0x62c>
     fcc:	ldr	r0, [r5, #4]
     fd0:	mov	r1, r5
     fd4:	ldr	r0, [r1, r0, lsl #4]!
     fd8:	tst	r0, #7
     fdc:	beq	107c <coda_ascii_cursor_get_bit_size+0x634>
     fe0:	movw	r0, #65236	; 0xfed4
     fe4:	movw	r1, #0
     fe8:	movt	r0, #65535	; 0xffff
     fec:	movt	r1, #0
     ff0:	b	1060 <coda_ascii_cursor_get_bit_size+0x618>
     ff4:	ldr	r4, [sp, #16]
     ff8:	cmp	r6, #0
     ffc:	beq	1024 <coda_ascii_cursor_get_bit_size+0x5dc>
    1000:	add	r0, r9, r6
    1004:	sub	r0, r1, r0
    1008:	cmp	r0, #0
    100c:	blt	1388 <coda_ascii_cursor_get_bit_size+0x940>
    1010:	sbfx	r1, r0, #28, #1
    1014:	lsl	r0, r0, #3
    1018:	strd	r0, [r4]
    101c:	mov	r7, #0
    1020:	b	adc <coda_ascii_cursor_get_bit_size+0x94>
    1024:	movw	r1, #0
    1028:	movt	r1, #0
    102c:	b	1038 <coda_ascii_cursor_get_bit_size+0x5f0>
    1030:	movw	r1, #0
    1034:	movt	r1, #0
    1038:	mvn	r0, #102	; 0x66
    103c:	b	1060 <coda_ascii_cursor_get_bit_size+0x618>
    1040:	ldr	r1, [r5, #4]
    1044:	ldrb	r1, [r5, r1, lsl #4]
    1048:	tst	r1, #7
    104c:	beq	1138 <coda_ascii_cursor_get_bit_size+0x6f0>
    1050:	movw	r0, #65236	; 0xfed4
    1054:	movw	r1, #0
    1058:	movt	r0, #65535	; 0xffff
    105c:	movt	r1, #0
    1060:	bl	0 <coda_set_error>
    1064:	mvn	r7, #0
    1068:	b	adc <coda_ascii_cursor_get_bit_size+0x94>
    106c:	mov	r7, #0
    1070:	mov	r6, #8
    1074:	strd	r6, [r4]
    1078:	b	adc <coda_ascii_cursor_get_bit_size+0x94>
    107c:	ldr	r1, [r1, #4]
    1080:	lsr	r0, r0, #3
    1084:	mov	r7, #0
    1088:	mov	r6, #0
    108c:	mov	sl, #0
    1090:	orr	r8, r0, r1, lsl #29
    1094:	ldr	r0, [r5]
    1098:	ldrd	r2, [r0, #8]
    109c:	subs	r9, r2, r8
    10a0:	sbc	r2, r3, r1, asr #3
    10a4:	subs	r1, r9, #1
    10a8:	sbcs	r1, r2, #0
    10ac:	blt	1124 <coda_ascii_cursor_get_bit_size+0x6dc>
    10b0:	str	r2, [sp, #24]
    10b4:	b	10bc <coda_ascii_cursor_get_bit_size+0x674>
    10b8:	ldr	r0, [r5]
    10bc:	ldr	r1, [r0, #48]	; 0x30
    10c0:	adds	r3, r6, r8
    10c4:	cmp	r1, #0
    10c8:	beq	10d8 <coda_ascii_cursor_get_bit_size+0x690>
    10cc:	ldrb	r0, [r1, r3]
    10d0:	strb	r0, [sp, #32]
    10d4:	b	1104 <coda_ascii_cursor_get_bit_size+0x6bc>
    10d8:	ldr	r1, [r0, #16]
    10dc:	cmp	r1, #2
    10e0:	bcs	1530 <coda_ascii_cursor_get_bit_size+0xae8>
    10e4:	ldr	r0, [r0, #56]	; 0x38
    10e8:	add	r1, sp, #32
    10ec:	mov	r2, #1
    10f0:	bl	0 <pread>
    10f4:	cmp	r0, #0
    10f8:	blt	1408 <coda_ascii_cursor_get_bit_size+0x9c0>
    10fc:	ldrb	r0, [sp, #32]
    1100:	ldr	r2, [sp, #24]
    1104:	cmp	r0, #32
    1108:	cmpne	r0, #9
    110c:	bne	1124 <coda_ascii_cursor_get_bit_size+0x6dc>
    1110:	adds	r6, r6, #1
    1114:	adc	sl, sl, #0
    1118:	subs	r0, r6, r9
    111c:	sbcs	r0, sl, r2
    1120:	blt	10b8 <coda_ascii_cursor_get_bit_size+0x670>
    1124:	lsl	r1, sl, #3
    1128:	lsl	r0, r6, #3
    112c:	orr	r1, r1, r6, lsr #29
    1130:	strd	r0, [r4]
    1134:	b	adc <coda_ascii_cursor_get_bit_size+0x94>
    1138:	ldr	r1, [r0, #68]	; 0x44
    113c:	cmp	r1, #0
    1140:	beq	132c <coda_ascii_cursor_get_bit_size+0x8e4>
    1144:	ldr	r1, [r0, #64]	; 0x40
    1148:	cmp	r1, #0
    114c:	beq	1344 <coda_ascii_cursor_get_bit_size+0x8fc>
    1150:	ldr	r2, [r5, #4]
    1154:	subs	ip, r1, #1
    1158:	mov	r7, #0
    115c:	str	r4, [sp, #16]
    1160:	ldr	r2, [r5, r2, lsl #4]!
    1164:	ldr	r3, [r5, #4]
    1168:	ldr	r5, [r0, #68]	; 0x44
    116c:	lsr	r2, r2, #3
    1170:	orr	r9, r2, r3, lsl #29
    1174:	asr	r8, r3, #3
    1178:	mov	r2, #0
    117c:	beq	11c0 <coda_ascii_cursor_get_bit_size+0x778>
    1180:	mov	r2, #0
    1184:	mov	lr, #1
    1188:	mov	r1, ip
    118c:	add	r4, r1, r2
    1190:	add	r4, r4, r4, lsr #31
    1194:	asr	r3, r4, #1
    1198:	ldr	r3, [r5, r3, lsl #2]
    119c:	subs	r6, r9, r3
    11a0:	sbcs	r3, r8, r3, asr #31
    11a4:	mov	r3, #0
    11a8:	movwlt	r3, #1
    11ac:	cmp	r3, #0
    11b0:	asrne	r1, r4, #1
    11b4:	addeq	r2, lr, r4, asr #1
    11b8:	cmp	r1, r2
    11bc:	bne	118c <coda_ascii_cursor_get_bit_size+0x744>
    11c0:	ldr	r1, [r5, r2, lsl #2]
    11c4:	subs	r3, r1, r9
    11c8:	rsc	r1, r8, r1, asr #31
    11cc:	lsl	r4, r3, #3
    11d0:	lsl	r1, r1, #3
    11d4:	orr	r5, r1, r3, lsr #29
    11d8:	ldr	r1, [sp, #16]
    11dc:	strd	r4, [r1]
    11e0:	ldr	r1, [sl, #44]	; 0x2c
    11e4:	cmp	r1, #3
    11e8:	bne	adc <coda_ascii_cursor_get_bit_size+0x94>
    11ec:	cmp	r2, ip
    11f0:	ldreq	r1, [r0, #72]	; 0x48
    11f4:	cmpeq	r1, #0
    11f8:	beq	adc <coda_ascii_cursor_get_bit_size+0x94>
    11fc:	ldr	r1, [sp, #16]
    1200:	subs	r2, r4, #8
    1204:	sbc	r3, r5, #0
    1208:	strd	r2, [r1]
    120c:	ldr	r0, [r0, #60]	; 0x3c
    1210:	cmp	r0, #3
    1214:	bne	adc <coda_ascii_cursor_get_bit_size+0x94>
    1218:	ldr	r2, [sp, #16]
    121c:	subs	r0, r4, #16
    1220:	sbc	r1, r5, #0
    1224:	strd	r0, [r2]
    1228:	b	adc <coda_ascii_cursor_get_bit_size+0x94>
    122c:	ldr	r0, [r5]
    1230:	ldr	r1, [r0, #48]	; 0x30
    1234:	adds	r3, r6, ip
    1238:	cmp	r1, #0
    123c:	beq	124c <coda_ascii_cursor_get_bit_size+0x804>
    1240:	ldrb	r0, [r1, r3]
    1244:	strb	r0, [sp, #32]
    1248:	b	1288 <coda_ascii_cursor_get_bit_size+0x840>
    124c:	ldr	r1, [r0, #16]
    1250:	cmp	r1, #2
    1254:	bcs	1530 <coda_ascii_cursor_get_bit_size+0xae8>
    1258:	ldr	r0, [r0, #56]	; 0x38
    125c:	add	r1, sp, #32
    1260:	mov	r2, #1
    1264:	mov	r9, lr
    1268:	mov	r8, ip
    126c:	bl	0 <pread>
    1270:	cmp	r0, #0
    1274:	blt	1408 <coda_ascii_cursor_get_bit_size+0x9c0>
    1278:	mov	ip, r8
    127c:	ldrb	r0, [sp, #32]
    1280:	ldr	r8, [sp, #24]
    1284:	mov	lr, r9
    1288:	cmp	r0, #10
    128c:	cmpne	r0, #13
    1290:	beq	12a8 <coda_ascii_cursor_get_bit_size+0x860>
    1294:	adds	r6, r6, #1
    1298:	adc	r7, r7, #0
    129c:	subs	r1, r6, lr
    12a0:	sbcs	r1, r7, r8
    12a4:	blt	122c <coda_ascii_cursor_get_bit_size+0x7e4>
    12a8:	ldr	r1, [sl, #44]	; 0x2c
    12ac:	cmp	r1, #2
    12b0:	beq	12ec <coda_ascii_cursor_get_bit_size+0x8a4>
    12b4:	b	13f8 <coda_ascii_cursor_get_bit_size+0x9b0>
    12b8:	ldr	r1, [r5, #4]
    12bc:	mov	r2, r5
    12c0:	ldr	r1, [r2, r1, lsl #4]!
    12c4:	tst	r1, #7
    12c8:	beq	1354 <coda_ascii_cursor_get_bit_size+0x90c>
    12cc:	movw	r0, #65236	; 0xfed4
    12d0:	movw	r1, #0
    12d4:	movt	r0, #65535	; 0xffff
    12d8:	movt	r1, #0
    12dc:	b	1060 <coda_ascii_cursor_get_bit_size+0x618>
    12e0:	mov	r7, #0
    12e4:	cmp	r1, #2
    12e8:	bne	13f8 <coda_ascii_cursor_get_bit_size+0x9b0>
    12ec:	uxtb	r0, r0
    12f0:	cmp	r0, #13
    12f4:	bne	13f0 <coda_ascii_cursor_get_bit_size+0x9a8>
    12f8:	adds	sl, r6, #1
    12fc:	adc	r9, r7, #0
    1300:	subs	r0, sl, lr
    1304:	sbcs	r0, r9, r8
    1308:	bge	13f0 <coda_ascii_cursor_get_bit_size+0x9a8>
    130c:	ldr	r0, [r5]
    1310:	adds	r3, sl, ip
    1314:	ldr	r1, [r0, #48]	; 0x30
    1318:	cmp	r1, #0
    131c:	beq	13bc <coda_ascii_cursor_get_bit_size+0x974>
    1320:	ldrb	r0, [r1, r3]
    1324:	strb	r0, [sp, #32]
    1328:	b	13e4 <coda_ascii_cursor_get_bit_size+0x99c>
    132c:	bl	0 <coda_ascii_init_asciilines>
    1330:	mvn	r7, #0
    1334:	cmp	r0, #0
    1338:	bne	adc <coda_ascii_cursor_get_bit_size+0x94>
    133c:	ldr	r0, [r5]
    1340:	b	1144 <coda_ascii_cursor_get_bit_size+0x6fc>
    1344:	movw	r1, #0
    1348:	mvn	r0, #300	; 0x12c
    134c:	movt	r1, #0
    1350:	b	1060 <coda_ascii_cursor_get_bit_size+0x618>
    1354:	ldr	r3, [r2, #4]
    1358:	mov	r7, #1
    135c:	add	r6, sp, #31
    1360:	mov	r2, #0
    1364:	lsr	r1, r1, #3
    1368:	mov	r8, r4
    136c:	str	r7, [sp]
    1370:	stmib	sp, {r2, r6}
    1374:	orr	r2, r1, r3, lsl #29
    1378:	asr	r3, r3, #3
    137c:	bl	250c <read_bytes>
    1380:	cmp	r0, #0
    1384:	beq	1390 <coda_ascii_cursor_get_bit_size+0x948>
    1388:	mvn	r7, #0
    138c:	b	adc <coda_ascii_cursor_get_bit_size+0x94>
    1390:	ldrb	r0, [sp, #31]
    1394:	cmp	r0, #13
    1398:	beq	1430 <coda_ascii_cursor_get_bit_size+0x9e8>
    139c:	cmp	r0, #10
    13a0:	bne	1480 <coda_ascii_cursor_get_bit_size+0xa38>
    13a4:	mov	r1, #0
    13a8:	mov	r0, #8
    13ac:	strd	r0, [r8]
    13b0:	mov	r1, #1
    13b4:	ldr	r0, [r5]
    13b8:	b	1524 <coda_ascii_cursor_get_bit_size+0xadc>
    13bc:	ldr	r1, [r0, #16]
    13c0:	cmp	r1, #2
    13c4:	bcs	1530 <coda_ascii_cursor_get_bit_size+0xae8>
    13c8:	ldr	r0, [r0, #56]	; 0x38
    13cc:	add	r1, sp, #32
    13d0:	mov	r2, #1
    13d4:	bl	0 <pread>
    13d8:	cmp	r0, #0
    13dc:	blt	1408 <coda_ascii_cursor_get_bit_size+0x9c0>
    13e0:	ldrb	r0, [sp, #32]
    13e4:	cmp	r0, #10
    13e8:	moveq	r6, sl
    13ec:	moveq	r7, r9
    13f0:	adds	r6, r6, #1
    13f4:	adc	r7, r7, #0
    13f8:	lsl	r1, r7, #3
    13fc:	lsl	r0, r6, #3
    1400:	orr	r1, r1, r6, lsr #29
    1404:	b	1018 <coda_ascii_cursor_get_bit_size+0x5d0>
    1408:	bl	0 <__errno_location>
    140c:	ldr	r0, [r0]
    1410:	bl	0 <strerror>
    1414:	movw	r1, #0
    1418:	mov	r2, r0
    141c:	mvn	r0, #21
    1420:	movt	r1, #0
    1424:	bl	0 <coda_set_error>
    1428:	mvn	r7, #0
    142c:	b	adc <coda_ascii_cursor_get_bit_size+0x94>
    1430:	ldrd	r0, [r5]
    1434:	mov	r2, r5
    1438:	ldr	r3, [r2, r1, lsl #4]!
    143c:	ldr	r2, [r2, #4]
    1440:	ldr	r4, [r0, #8]
    1444:	ldr	r7, [r0, #12]
    1448:	lsr	r1, r3, #3
    144c:	orr	r1, r1, r2, lsl #29
    1450:	subs	r4, r4, r1
    1454:	sbc	r7, r7, r2, asr #3
    1458:	rsbs	r4, r4, #1
    145c:	rscs	r7, r7, #0
    1460:	bge	1510 <coda_ascii_cursor_get_bit_size+0xac8>
    1464:	tst	r3, #7
    1468:	beq	14c0 <coda_ascii_cursor_get_bit_size+0xa78>
    146c:	movw	r0, #65236	; 0xfed4
    1470:	movw	r1, #0
    1474:	movt	r0, #65535	; 0xffff
    1478:	movt	r1, #0
    147c:	b	1060 <coda_ascii_cursor_get_bit_size+0x618>
    1480:	ldr	r0, [r5, #4]
    1484:	add	r4, sp, #32
    1488:	mov	r2, r4
    148c:	ldr	r0, [r5, r0, lsl #4]!
    1490:	ldr	r1, [r5, #4]
    1494:	lsr	r0, r0, #3
    1498:	orr	r0, r0, r1, lsl #29
    149c:	asr	r1, r1, #3
    14a0:	bl	0 <coda_str64>
    14a4:	movw	r0, #65236	; 0xfed4
    14a8:	movw	r1, #0
    14ac:	mov	r2, r4
    14b0:	movt	r0, #65535	; 0xffff
    14b4:	movt	r1, #0
    14b8:	bl	0 <coda_set_error>
    14bc:	b	1388 <coda_ascii_cursor_get_bit_size+0x940>
    14c0:	asr	r3, r2, #3
    14c4:	mov	r7, #1
    14c8:	mov	r2, #0
    14cc:	str	r7, [sp]
    14d0:	stmib	sp, {r2, r6}
    14d4:	adds	r2, r1, #1
    14d8:	adc	r3, r3, #0
    14dc:	bl	250c <read_bytes>
    14e0:	cmp	r0, #0
    14e4:	bne	1388 <coda_ascii_cursor_get_bit_size+0x940>
    14e8:	ldrb	r0, [sp, #31]
    14ec:	cmp	r0, #10
    14f0:	bne	150c <coda_ascii_cursor_get_bit_size+0xac4>
    14f4:	mov	r1, #0
    14f8:	mov	r0, #16
    14fc:	strd	r0, [r8]
    1500:	mov	r1, #3
    1504:	ldr	r0, [r5]
    1508:	b	1524 <coda_ascii_cursor_get_bit_size+0xadc>
    150c:	ldr	r0, [r5]
    1510:	mov	r2, #8
    1514:	mov	r1, #0
    1518:	str	r2, [r8]
    151c:	str	r1, [r8, #4]
    1520:	mov	r1, #2
    1524:	str	r1, [r0, #60]	; 0x3c
    1528:	mov	r7, #0
    152c:	b	adc <coda_ascii_cursor_get_bit_size+0x94>
    1530:	movw	r0, #0
    1534:	movw	r1, #0
    1538:	movw	r3, #0
    153c:	mov	r2, #62	; 0x3e
    1540:	movt	r0, #0
    1544:	movt	r1, #0
    1548:	movt	r3, #0
    154c:	bl	0 <__assert_fail>
    1550:	movw	r0, #0
    1554:	movw	r1, #0
    1558:	movw	r3, #0
    155c:	mov	r2, #812	; 0x32c
    1560:	movt	r0, #0
    1564:	movt	r1, #0
    1568:	movt	r3, #0
    156c:	bl	0 <__assert_fail>
    1570:	movw	r0, #0
    1574:	movw	r1, #0
    1578:	movw	r3, #0
    157c:	movw	r2, #693	; 0x2b5
    1580:	movt	r0, #0
    1584:	movt	r1, #0
    1588:	movt	r3, #0
    158c:	bl	0 <__assert_fail>
    1590:	movw	r0, #0
    1594:	movw	r1, #0
    1598:	movw	r3, #0
    159c:	mov	r2, #800	; 0x320
    15a0:	movt	r0, #0
    15a4:	movt	r1, #0
    15a8:	movt	r3, #0
    15ac:	bl	0 <__assert_fail>
    15b0:	movw	r0, #0
    15b4:	movw	r1, #0
    15b8:	movw	r3, #0
    15bc:	movw	r2, #1030	; 0x406
    15c0:	movt	r0, #0
    15c4:	movt	r1, #0
    15c8:	movt	r3, #0
    15cc:	bl	0 <__assert_fail>
    15d0:	movw	r0, #0
    15d4:	movw	r1, #0
    15d8:	movw	r3, #0
    15dc:	mov	r2, #816	; 0x330
    15e0:	movt	r0, #0
    15e4:	movt	r1, #0
    15e8:	movt	r3, #0
    15ec:	bl	0 <__assert_fail>

000015f0 <get_bit_size_boundary>:
    15f0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    15f4:	add	fp, sp, #28
    15f8:	sub	sp, sp, #100	; 0x64
    15fc:	rsbs	r7, r2, #0
    1600:	mov	r5, #0
    1604:	ldrd	r8, [r0]
    1608:	rscs	r7, r3, #0
    160c:	movwlt	r5, #1
    1610:	cmp	r5, #0
    1614:	moveq	r3, r5
    1618:	movne	r5, r2
    161c:	mov	r2, r0
    1620:	ldr	ip, [r2, r9, lsl #4]!
    1624:	ldr	sl, [r2, #4]
    1628:	ldr	r2, [r8, #16]
    162c:	cmp	r2, #2
    1630:	bcs	1680 <get_bit_size_boundary+0x90>
    1634:	ldr	r0, [r8, #48]	; 0x30
    1638:	add	r2, r8, #40	; 0x28
    163c:	cmp	r0, #0
    1640:	addeq	r2, r8, #8
    1644:	adds	r6, ip, r5
    1648:	ldm	r2, {r2, r9}
    164c:	adc	r3, sl, r3
    1650:	lsl	r0, r9, #3
    1654:	subs	r6, r6, r2, lsl #3
    1658:	orr	r0, r0, r2, lsr #29
    165c:	sbcs	r3, r3, r0
    1660:	bge	16ec <get_bit_size_boundary+0xfc>
    1664:	lsl	r4, r2, #3
    1668:	subs	r2, r4, ip
    166c:	sbc	r3, r0, sl
    1670:	mov	r0, #0
    1674:	strd	r2, [r1]
    1678:	sub	sp, fp, #28
    167c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1680:	sub	r4, r0, #8
    1684:	cmp	r9, #2
    1688:	blt	16a8 <get_bit_size_boundary+0xb8>
    168c:	ldr	r2, [r4, r9, lsl #4]
    1690:	sub	r7, r9, #1
    1694:	mov	r9, r7
    1698:	ldr	r6, [r2]
    169c:	cmp	r6, #2
    16a0:	bcc	1684 <get_bit_size_boundary+0x94>
    16a4:	b	16bc <get_bit_size_boundary+0xcc>
    16a8:	cmp	r9, #1
    16ac:	bne	16cc <get_bit_size_boundary+0xdc>
    16b0:	add	r0, r0, r9, lsl #4
    16b4:	ldr	r2, [r0, #-8]
    16b8:	ldr	r6, [r2]
    16bc:	cmp	r6, #100	; 0x64
    16c0:	ldreq	r0, [r2, #8]
    16c4:	cmpeq	r0, #2
    16c8:	beq	1700 <get_bit_size_boundary+0x110>
    16cc:	movw	r0, #0
    16d0:	movw	r1, #0
    16d4:	movw	r3, #0
    16d8:	mov	r2, #122	; 0x7a
    16dc:	movt	r0, #0
    16e0:	movt	r1, #0
    16e4:	movt	r3, #0
    16e8:	bl	0 <__assert_fail>
    16ec:	movw	r1, #0
    16f0:	mvn	r0, #300	; 0x12c
    16f4:	movt	r1, #0
    16f8:	bl	0 <coda_set_error>
    16fc:	b	186c <get_bit_size_boundary+0x27c>
    1700:	ldr	r7, [r2, #16]
    1704:	ldr	r0, [r2, #24]
    1708:	ldr	r9, [r2, #28]
    170c:	lsl	r2, r9, #3
    1710:	subs	ip, ip, r0, lsl #3
    1714:	lsl	r4, r7, #3
    1718:	orr	r2, r2, r0, lsr #29
    171c:	sbfx	r0, r7, #28, #1
    1720:	sbc	sl, sl, r2
    1724:	cmp	sl, #0
    1728:	blt	17fc <get_bit_size_boundary+0x20c>
    172c:	subs	r2, r4, ip
    1730:	sbcs	r0, r0, sl
    1734:	blt	17fc <get_bit_size_boundary+0x20c>
    1738:	adds	r0, ip, r5
    173c:	adc	r2, sl, r3
    1740:	subs	r0, r4, r0
    1744:	rscs	r0, r2, r4, asr #31
    1748:	bge	1878 <get_bit_size_boundary+0x288>
    174c:	lsr	r0, r5, #3
    1750:	sub	r8, fp, #58	; 0x3a
    1754:	lsr	r1, r3, #3
    1758:	mov	r6, ip
    175c:	orr	r0, r0, r3, lsl #29
    1760:	mov	r2, r8
    1764:	bl	0 <coda_str64>
    1768:	ands	r5, r5, #7
    176c:	beq	178c <get_bit_size_boundary+0x19c>
    1770:	mov	r0, r8
    1774:	bl	0 <strlen>
    1778:	movw	r1, #0
    177c:	add	r0, r8, r0
    1780:	mov	r2, r5
    1784:	movt	r1, #0
    1788:	bl	0 <sprintf>
    178c:	lsr	r0, r6, #3
    1790:	add	r7, sp, #40	; 0x28
    1794:	lsr	r1, sl, #3
    1798:	orr	r0, r0, sl, lsl #29
    179c:	mov	r2, r7
    17a0:	bl	0 <coda_str64>
    17a4:	ands	r5, r6, #7
    17a8:	beq	17c8 <get_bit_size_boundary+0x1d8>
    17ac:	mov	r0, r7
    17b0:	bl	0 <strlen>
    17b4:	movw	r1, #0
    17b8:	add	r0, r7, r0
    17bc:	mov	r2, r5
    17c0:	movt	r1, #0
    17c4:	bl	0 <sprintf>
    17c8:	asr	r1, r4, #31
    17cc:	lsr	r0, r4, #3
    17d0:	add	r4, sp, #10
    17d4:	orr	r0, r0, r1, lsl #29
    17d8:	mov	r2, r4
    17dc:	bl	0 <coda_str64>
    17e0:	movw	r1, #0
    17e4:	sub	r2, fp, #58	; 0x3a
    17e8:	add	r3, sp, #40	; 0x28
    17ec:	mvn	r0, #300	; 0x12c
    17f0:	str	r4, [sp]
    17f4:	movt	r1, #0
    17f8:	b	1868 <get_bit_size_boundary+0x278>
    17fc:	lsr	r0, ip, #3
    1800:	sub	r7, fp, #58	; 0x3a
    1804:	asr	r1, sl, #3
    1808:	mov	r5, ip
    180c:	orr	r0, r0, sl, lsl #29
    1810:	mov	r2, r7
    1814:	bl	0 <coda_str64>
    1818:	ands	r5, r5, #7
    181c:	beq	183c <get_bit_size_boundary+0x24c>
    1820:	mov	r0, r7
    1824:	bl	0 <strlen>
    1828:	movw	r1, #0
    182c:	add	r0, r7, r0
    1830:	mov	r2, r5
    1834:	movt	r1, #0
    1838:	bl	0 <sprintf>
    183c:	asr	r1, r4, #31
    1840:	lsr	r0, r4, #3
    1844:	add	r4, sp, #40	; 0x28
    1848:	orr	r0, r0, r1, lsl #29
    184c:	mov	r2, r4
    1850:	bl	0 <coda_str64>
    1854:	movw	r1, #0
    1858:	sub	r2, fp, #58	; 0x3a
    185c:	mvn	r0, #300	; 0x12c
    1860:	mov	r3, r4
    1864:	movt	r1, #0
    1868:	bl	0 <coda_set_error>
    186c:	mvn	r0, #0
    1870:	sub	sp, fp, #28
    1874:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1878:	asr	r0, r4, #31
    187c:	b	1668 <get_bit_size_boundary+0x78>

00001880 <coda_ascii_cursor_read_bytes>:
    1880:	push	{r4, r5, fp, lr}
    1884:	add	fp, sp, #8
    1888:	sub	sp, sp, #16
    188c:	ldr	ip, [r0, #4]
    1890:	mov	lr, r0
    1894:	ldr	ip, [lr, ip, lsl #4]!
    1898:	tst	ip, #7
    189c:	beq	18c0 <coda_ascii_cursor_read_bytes+0x40>
    18a0:	movw	r0, #65236	; 0xfed4
    18a4:	movw	r1, #0
    18a8:	movt	r0, #65535	; 0xffff
    18ac:	movt	r1, #0
    18b0:	bl	0 <coda_set_error>
    18b4:	mvn	r0, #0
    18b8:	sub	sp, fp, #8
    18bc:	pop	{r4, r5, fp, pc}
    18c0:	ldr	lr, [lr, #4]
    18c4:	ldr	r5, [fp, #8]
    18c8:	ldr	r0, [r0]
    18cc:	ldr	r4, [fp, #12]
    18d0:	str	r1, [sp, #8]
    18d4:	lsr	r1, ip, #3
    18d8:	orr	r1, r1, lr, lsl #29
    18dc:	str	r5, [sp]
    18e0:	asr	r5, lr, #3
    18e4:	str	r4, [sp, #4]
    18e8:	adds	r2, r1, r2
    18ec:	adc	r3, r5, r3
    18f0:	bl	250c <read_bytes>
    18f4:	sub	sp, fp, #8
    18f8:	pop	{r4, r5, fp, pc}

000018fc <coda_ascii_cursor_get_num_elements>:
    18fc:	ldr	r2, [r0, #4]
    1900:	add	r2, r0, r2, lsl #4
    1904:	ldr	r2, [r2, #-8]
    1908:	ldr	r3, [r2]
    190c:	cmp	r3, #99	; 0x63
    1910:	ldrhi	r2, [r2, #4]
    1914:	ldr	r2, [r2, #8]
    1918:	cmp	r2, #1
    191c:	movhi	r0, #1
    1920:	strhi	r0, [r1]
    1924:	movhi	r0, #0
    1928:	bxhi	lr
    192c:	b	0 <coda_ascbin_cursor_get_num_elements>

00001930 <coda_ascii_cursor_read_int64>:
    1930:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1934:	add	fp, sp, #28
    1938:	sub	sp, sp, #84	; 0x54
    193c:	mov	r6, r0
    1940:	ldr	r0, [r0, #4]
    1944:	mov	r7, r1
    1948:	sub	r0, r0, #1
    194c:	add	r0, r6, r0, lsl #4
    1950:	ldr	r5, [r0, #8]
    1954:	ldrd	r8, [r0, #16]
    1958:	mov	r0, r6
    195c:	ldr	r1, [r5]
    1960:	cmp	r1, #99	; 0x63
    1964:	sub	r1, fp, #40	; 0x28
    1968:	ldrhi	r5, [r5, #4]
    196c:	mov	r4, r5
    1970:	ldr	r2, [r4, #24]!
    1974:	ldr	r3, [r4, #4]
    1978:	bl	15f0 <get_bit_size_boundary>
    197c:	mvn	sl, #0
    1980:	cmp	r0, #0
    1984:	bne	1af0 <coda_ascii_cursor_read_int64+0x1c0>
    1988:	tst	r8, #7
    198c:	beq	19a4 <coda_ascii_cursor_read_int64+0x74>
    1990:	movw	r1, #0
    1994:	mvn	r0, #21
    1998:	movt	r1, #0
    199c:	bl	0 <coda_set_error>
    19a0:	b	1af0 <coda_ascii_cursor_read_int64+0x1c0>
    19a4:	ldr	r0, [r4, #4]
    19a8:	str	r7, [sp, #4]
    19ac:	cmp	r0, #0
    19b0:	blt	19f0 <coda_ascii_cursor_read_int64+0xc0>
    19b4:	ldr	r1, [r4]
    19b8:	mov	r7, #0
    19bc:	lsr	r1, r1, #3
    19c0:	orr	r0, r1, r0, lsl #29
    19c4:	mov	r4, r0
    19c8:	cmp	r0, #65	; 0x41
    19cc:	blt	1a14 <coda_ascii_cursor_read_int64+0xe4>
    19d0:	movw	r0, #0
    19d4:	movw	r1, #0
    19d8:	movw	r3, #0
    19dc:	movw	r2, #1076	; 0x434
    19e0:	movt	r0, #0
    19e4:	movt	r1, #0
    19e8:	movt	r3, #0
    19ec:	bl	0 <__assert_fail>
    19f0:	ldr	r0, [fp, #-40]	; 0xffffffd8
    19f4:	ldr	r1, [fp, #-36]	; 0xffffffdc
    19f8:	movw	r2, #511	; 0x1ff
    19fc:	mov	r4, #64	; 0x40
    1a00:	mov	r7, #1
    1a04:	subs	r2, r2, r0
    1a08:	rscs	r2, r1, #0
    1a0c:	lsrge	r0, r0, #3
    1a10:	orrge	r4, r0, r1, lsl #29
    1a14:	lsr	r0, r8, #3
    1a18:	str	r7, [sp]
    1a1c:	orr	r3, r0, r9, lsl #29
    1a20:	ldr	r0, [r6]
    1a24:	ldr	r1, [r0, #48]	; 0x30
    1a28:	cmp	r1, #0
    1a2c:	beq	1a44 <coda_ascii_cursor_read_int64+0x114>
    1a30:	add	r1, r1, r3
    1a34:	add	r0, sp, #8
    1a38:	mov	r2, r4
    1a3c:	bl	0 <memcpy>
    1a40:	b	1a68 <coda_ascii_cursor_read_int64+0x138>
    1a44:	ldr	r1, [r0, #16]
    1a48:	cmp	r1, #2
    1a4c:	bcs	1b60 <coda_ascii_cursor_read_int64+0x230>
    1a50:	ldr	r0, [r0, #56]	; 0x38
    1a54:	add	r1, sp, #8
    1a58:	mov	r2, r4
    1a5c:	bl	0 <pread>
    1a60:	cmn	r0, #1
    1a64:	ble	1afc <coda_ascii_cursor_read_int64+0x1cc>
    1a68:	ldr	r0, [r5, #52]	; 0x34
    1a6c:	mov	sl, r4
    1a70:	cmp	r0, #0
    1a74:	beq	1ad8 <coda_ascii_cursor_read_int64+0x1a8>
    1a78:	ldr	r5, [r0, #8]
    1a7c:	cmp	r5, #1
    1a80:	blt	1ad8 <coda_ascii_cursor_read_int64+0x1a8>
    1a84:	ldr	r8, [r0, #12]
    1a88:	mov	r7, #0
    1a8c:	add	r9, sp, #8
    1a90:	ldr	r4, [r8, r7, lsl #2]
    1a94:	ldr	r6, [r4]
    1a98:	cmp	r6, #0
    1a9c:	beq	1ac4 <coda_ascii_cursor_read_int64+0x194>
    1aa0:	cmp	r6, sl
    1aa4:	bgt	1acc <coda_ascii_cursor_read_int64+0x19c>
    1aa8:	ldr	r0, [r4, #4]
    1aac:	mov	r1, r9
    1ab0:	mov	r2, r6
    1ab4:	bl	0 <memcmp>
    1ab8:	cmp	r0, #0
    1abc:	bne	1acc <coda_ascii_cursor_read_int64+0x19c>
    1ac0:	b	1b20 <coda_ascii_cursor_read_int64+0x1f0>
    1ac4:	cmp	sl, #0
    1ac8:	beq	1b4c <coda_ascii_cursor_read_int64+0x21c>
    1acc:	add	r7, r7, #1
    1ad0:	cmp	r7, r5
    1ad4:	blt	1a90 <coda_ascii_cursor_read_int64+0x160>
    1ad8:	ldr	r2, [sp, #4]
    1adc:	ldr	r3, [sp]
    1ae0:	add	r0, sp, #8
    1ae4:	mov	r1, sl
    1ae8:	bl	0 <coda_ascii_parse_int64>
    1aec:	asr	sl, r0, #31
    1af0:	mov	r0, sl
    1af4:	sub	sp, fp, #28
    1af8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1afc:	bl	0 <__errno_location>
    1b00:	ldr	r0, [r0]
    1b04:	bl	0 <strerror>
    1b08:	movw	r1, #0
    1b0c:	mov	r2, r0
    1b10:	mvn	r0, #21
    1b14:	movt	r1, #0
    1b18:	bl	0 <coda_set_error>
    1b1c:	b	1af0 <coda_ascii_cursor_read_int64+0x1c0>
    1b20:	ldr	r0, [sp]
    1b24:	cmp	r0, #0
    1b28:	bne	1b4c <coda_ascii_cursor_read_int64+0x21c>
    1b2c:	cmp	r6, sl
    1b30:	beq	1b4c <coda_ascii_cursor_read_int64+0x21c>
    1b34:	movw	r1, #0
    1b38:	mvn	r0, #102	; 0x66
    1b3c:	movt	r1, #0
    1b40:	bl	0 <coda_set_error>
    1b44:	mvn	sl, #0
    1b48:	b	1af0 <coda_ascii_cursor_read_int64+0x1c0>
    1b4c:	ldrd	r0, [r4, #8]
    1b50:	ldr	r2, [sp, #4]
    1b54:	mov	sl, #0
    1b58:	strd	r0, [r2]
    1b5c:	b	1af0 <coda_ascii_cursor_read_int64+0x1c0>
    1b60:	movw	r0, #0
    1b64:	movw	r1, #0
    1b68:	movw	r3, #0
    1b6c:	mov	r2, #62	; 0x3e
    1b70:	movt	r0, #0
    1b74:	movt	r1, #0
    1b78:	movt	r3, #0
    1b7c:	bl	0 <__assert_fail>

00001b80 <coda_ascii_cursor_read_uint64>:
    1b80:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1b84:	add	fp, sp, #28
    1b88:	sub	sp, sp, #84	; 0x54
    1b8c:	mov	r6, r0
    1b90:	ldr	r0, [r0, #4]
    1b94:	mov	r7, r1
    1b98:	sub	r0, r0, #1
    1b9c:	add	r0, r6, r0, lsl #4
    1ba0:	ldr	r5, [r0, #8]
    1ba4:	ldrd	r8, [r0, #16]
    1ba8:	mov	r0, r6
    1bac:	ldr	r1, [r5]
    1bb0:	cmp	r1, #99	; 0x63
    1bb4:	sub	r1, fp, #40	; 0x28
    1bb8:	ldrhi	r5, [r5, #4]
    1bbc:	mov	r4, r5
    1bc0:	ldr	r2, [r4, #24]!
    1bc4:	ldr	r3, [r4, #4]
    1bc8:	bl	15f0 <get_bit_size_boundary>
    1bcc:	mvn	sl, #0
    1bd0:	cmp	r0, #0
    1bd4:	bne	1d40 <coda_ascii_cursor_read_uint64+0x1c0>
    1bd8:	tst	r8, #7
    1bdc:	beq	1bf4 <coda_ascii_cursor_read_uint64+0x74>
    1be0:	movw	r1, #0
    1be4:	mvn	r0, #21
    1be8:	movt	r1, #0
    1bec:	bl	0 <coda_set_error>
    1bf0:	b	1d40 <coda_ascii_cursor_read_uint64+0x1c0>
    1bf4:	ldr	r0, [r4, #4]
    1bf8:	str	r7, [sp, #4]
    1bfc:	cmp	r0, #0
    1c00:	blt	1c40 <coda_ascii_cursor_read_uint64+0xc0>
    1c04:	ldr	r1, [r4]
    1c08:	mov	r7, #0
    1c0c:	lsr	r1, r1, #3
    1c10:	orr	r0, r1, r0, lsl #29
    1c14:	mov	r4, r0
    1c18:	cmp	r0, #65	; 0x41
    1c1c:	blt	1c64 <coda_ascii_cursor_read_uint64+0xe4>
    1c20:	movw	r0, #0
    1c24:	movw	r1, #0
    1c28:	movw	r3, #0
    1c2c:	movw	r2, #1137	; 0x471
    1c30:	movt	r0, #0
    1c34:	movt	r1, #0
    1c38:	movt	r3, #0
    1c3c:	bl	0 <__assert_fail>
    1c40:	ldr	r0, [fp, #-40]	; 0xffffffd8
    1c44:	ldr	r1, [fp, #-36]	; 0xffffffdc
    1c48:	movw	r2, #511	; 0x1ff
    1c4c:	mov	r4, #64	; 0x40
    1c50:	mov	r7, #1
    1c54:	subs	r2, r2, r0
    1c58:	rscs	r2, r1, #0
    1c5c:	lsrge	r0, r0, #3
    1c60:	orrge	r4, r0, r1, lsl #29
    1c64:	lsr	r0, r8, #3
    1c68:	str	r7, [sp]
    1c6c:	orr	r3, r0, r9, lsl #29
    1c70:	ldr	r0, [r6]
    1c74:	ldr	r1, [r0, #48]	; 0x30
    1c78:	cmp	r1, #0
    1c7c:	beq	1c94 <coda_ascii_cursor_read_uint64+0x114>
    1c80:	add	r1, r1, r3
    1c84:	add	r0, sp, #8
    1c88:	mov	r2, r4
    1c8c:	bl	0 <memcpy>
    1c90:	b	1cb8 <coda_ascii_cursor_read_uint64+0x138>
    1c94:	ldr	r1, [r0, #16]
    1c98:	cmp	r1, #2
    1c9c:	bcs	1db0 <coda_ascii_cursor_read_uint64+0x230>
    1ca0:	ldr	r0, [r0, #56]	; 0x38
    1ca4:	add	r1, sp, #8
    1ca8:	mov	r2, r4
    1cac:	bl	0 <pread>
    1cb0:	cmn	r0, #1
    1cb4:	ble	1d4c <coda_ascii_cursor_read_uint64+0x1cc>
    1cb8:	ldr	r0, [r5, #52]	; 0x34
    1cbc:	mov	sl, r4
    1cc0:	cmp	r0, #0
    1cc4:	beq	1d28 <coda_ascii_cursor_read_uint64+0x1a8>
    1cc8:	ldr	r5, [r0, #8]
    1ccc:	cmp	r5, #1
    1cd0:	blt	1d28 <coda_ascii_cursor_read_uint64+0x1a8>
    1cd4:	ldr	r8, [r0, #12]
    1cd8:	mov	r7, #0
    1cdc:	add	r9, sp, #8
    1ce0:	ldr	r4, [r8, r7, lsl #2]
    1ce4:	ldr	r6, [r4]
    1ce8:	cmp	r6, #0
    1cec:	beq	1d14 <coda_ascii_cursor_read_uint64+0x194>
    1cf0:	cmp	r6, sl
    1cf4:	bgt	1d1c <coda_ascii_cursor_read_uint64+0x19c>
    1cf8:	ldr	r0, [r4, #4]
    1cfc:	mov	r1, r9
    1d00:	mov	r2, r6
    1d04:	bl	0 <memcmp>
    1d08:	cmp	r0, #0
    1d0c:	bne	1d1c <coda_ascii_cursor_read_uint64+0x19c>
    1d10:	b	1d70 <coda_ascii_cursor_read_uint64+0x1f0>
    1d14:	cmp	sl, #0
    1d18:	beq	1d9c <coda_ascii_cursor_read_uint64+0x21c>
    1d1c:	add	r7, r7, #1
    1d20:	cmp	r7, r5
    1d24:	blt	1ce0 <coda_ascii_cursor_read_uint64+0x160>
    1d28:	ldr	r2, [sp, #4]
    1d2c:	ldr	r3, [sp]
    1d30:	add	r0, sp, #8
    1d34:	mov	r1, sl
    1d38:	bl	274 <coda_ascii_parse_uint64>
    1d3c:	asr	sl, r0, #31
    1d40:	mov	r0, sl
    1d44:	sub	sp, fp, #28
    1d48:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1d4c:	bl	0 <__errno_location>
    1d50:	ldr	r0, [r0]
    1d54:	bl	0 <strerror>
    1d58:	movw	r1, #0
    1d5c:	mov	r2, r0
    1d60:	mvn	r0, #21
    1d64:	movt	r1, #0
    1d68:	bl	0 <coda_set_error>
    1d6c:	b	1d40 <coda_ascii_cursor_read_uint64+0x1c0>
    1d70:	ldr	r0, [sp]
    1d74:	cmp	r0, #0
    1d78:	bne	1d9c <coda_ascii_cursor_read_uint64+0x21c>
    1d7c:	cmp	r6, sl
    1d80:	beq	1d9c <coda_ascii_cursor_read_uint64+0x21c>
    1d84:	movw	r1, #0
    1d88:	mvn	r0, #102	; 0x66
    1d8c:	movt	r1, #0
    1d90:	bl	0 <coda_set_error>
    1d94:	mvn	sl, #0
    1d98:	b	1d40 <coda_ascii_cursor_read_uint64+0x1c0>
    1d9c:	ldrd	r0, [r4, #8]
    1da0:	ldr	r2, [sp, #4]
    1da4:	mov	sl, #0
    1da8:	strd	r0, [r2]
    1dac:	b	1d40 <coda_ascii_cursor_read_uint64+0x1c0>
    1db0:	movw	r0, #0
    1db4:	movw	r1, #0
    1db8:	movw	r3, #0
    1dbc:	mov	r2, #62	; 0x3e
    1dc0:	movt	r0, #0
    1dc4:	movt	r1, #0
    1dc8:	movt	r3, #0
    1dcc:	bl	0 <__assert_fail>

00001dd0 <coda_ascii_cursor_read_int8>:
    1dd0:	push	{r4, r5, fp, lr}
    1dd4:	add	fp, sp, #8
    1dd8:	sub	sp, sp, #8
    1ddc:	mov	r5, r1
    1de0:	mov	r1, sp
    1de4:	bl	1930 <coda_ascii_cursor_read_int64>
    1de8:	mvn	r4, #0
    1dec:	cmp	r0, #0
    1df0:	bne	1e2c <coda_ascii_cursor_read_int8+0x5c>
    1df4:	ldm	sp, {r0, r1}
    1df8:	adds	r2, r0, #128	; 0x80
    1dfc:	adc	r1, r1, #0
    1e00:	subs	r2, r2, #256	; 0x100
    1e04:	sbcs	r1, r1, #0
    1e08:	bcc	1e24 <coda_ascii_cursor_read_int8+0x54>
    1e0c:	movw	r0, #65236	; 0xfed4
    1e10:	movw	r1, #0
    1e14:	movt	r0, #65535	; 0xffff
    1e18:	movt	r1, #0
    1e1c:	bl	0 <coda_set_error>
    1e20:	b	1e2c <coda_ascii_cursor_read_int8+0x5c>
    1e24:	mov	r4, #0
    1e28:	strb	r0, [r5]
    1e2c:	mov	r0, r4
    1e30:	sub	sp, fp, #8
    1e34:	pop	{r4, r5, fp, pc}

00001e38 <coda_ascii_cursor_read_uint8>:
    1e38:	push	{r4, r5, fp, lr}
    1e3c:	add	fp, sp, #8
    1e40:	sub	sp, sp, #8
    1e44:	mov	r5, r1
    1e48:	mov	r1, sp
    1e4c:	bl	1b80 <coda_ascii_cursor_read_uint64>
    1e50:	mvn	r4, #0
    1e54:	cmp	r0, #0
    1e58:	bne	1e8c <coda_ascii_cursor_read_uint8+0x54>
    1e5c:	ldm	sp, {r0, r1}
    1e60:	subs	r2, r0, #256	; 0x100
    1e64:	sbcs	r1, r1, #0
    1e68:	bcc	1e84 <coda_ascii_cursor_read_uint8+0x4c>
    1e6c:	movw	r0, #65236	; 0xfed4
    1e70:	movw	r1, #0
    1e74:	movt	r0, #65535	; 0xffff
    1e78:	movt	r1, #0
    1e7c:	bl	0 <coda_set_error>
    1e80:	b	1e8c <coda_ascii_cursor_read_uint8+0x54>
    1e84:	mov	r4, #0
    1e88:	strb	r0, [r5]
    1e8c:	mov	r0, r4
    1e90:	sub	sp, fp, #8
    1e94:	pop	{r4, r5, fp, pc}

00001e98 <coda_ascii_cursor_read_int16>:
    1e98:	push	{r4, r5, fp, lr}
    1e9c:	add	fp, sp, #8
    1ea0:	sub	sp, sp, #8
    1ea4:	mov	r5, r1
    1ea8:	mov	r1, sp
    1eac:	bl	1930 <coda_ascii_cursor_read_int64>
    1eb0:	mvn	r4, #0
    1eb4:	cmp	r0, #0
    1eb8:	bne	1ef4 <coda_ascii_cursor_read_int16+0x5c>
    1ebc:	ldm	sp, {r0, r1}
    1ec0:	adds	r2, r0, #32768	; 0x8000
    1ec4:	adc	r1, r1, #0
    1ec8:	subs	r2, r2, #65536	; 0x10000
    1ecc:	sbcs	r1, r1, #0
    1ed0:	bcc	1eec <coda_ascii_cursor_read_int16+0x54>
    1ed4:	movw	r0, #65236	; 0xfed4
    1ed8:	movw	r1, #0
    1edc:	movt	r0, #65535	; 0xffff
    1ee0:	movt	r1, #0
    1ee4:	bl	0 <coda_set_error>
    1ee8:	b	1ef4 <coda_ascii_cursor_read_int16+0x5c>
    1eec:	mov	r4, #0
    1ef0:	strh	r0, [r5]
    1ef4:	mov	r0, r4
    1ef8:	sub	sp, fp, #8
    1efc:	pop	{r4, r5, fp, pc}

00001f00 <coda_ascii_cursor_read_uint16>:
    1f00:	push	{r4, r5, fp, lr}
    1f04:	add	fp, sp, #8
    1f08:	sub	sp, sp, #8
    1f0c:	mov	r5, r1
    1f10:	mov	r1, sp
    1f14:	bl	1b80 <coda_ascii_cursor_read_uint64>
    1f18:	mvn	r4, #0
    1f1c:	cmp	r0, #0
    1f20:	bne	1f54 <coda_ascii_cursor_read_uint16+0x54>
    1f24:	ldm	sp, {r0, r1}
    1f28:	subs	r2, r0, #65536	; 0x10000
    1f2c:	sbcs	r1, r1, #0
    1f30:	bcc	1f4c <coda_ascii_cursor_read_uint16+0x4c>
    1f34:	movw	r0, #65236	; 0xfed4
    1f38:	movw	r1, #0
    1f3c:	movt	r0, #65535	; 0xffff
    1f40:	movt	r1, #0
    1f44:	bl	0 <coda_set_error>
    1f48:	b	1f54 <coda_ascii_cursor_read_uint16+0x54>
    1f4c:	mov	r4, #0
    1f50:	strh	r0, [r5]
    1f54:	mov	r0, r4
    1f58:	sub	sp, fp, #8
    1f5c:	pop	{r4, r5, fp, pc}

00001f60 <coda_ascii_cursor_read_int32>:
    1f60:	push	{r4, r5, fp, lr}
    1f64:	add	fp, sp, #8
    1f68:	sub	sp, sp, #8
    1f6c:	mov	r5, r1
    1f70:	mov	r1, sp
    1f74:	bl	1930 <coda_ascii_cursor_read_int64>
    1f78:	mvn	r4, #0
    1f7c:	cmp	r0, #0
    1f80:	bne	1fb4 <coda_ascii_cursor_read_int32+0x54>
    1f84:	ldm	sp, {r0, r1}
    1f88:	adds	r2, r0, #-2147483648	; 0x80000000
    1f8c:	adcs	r1, r1, #0
    1f90:	beq	1fac <coda_ascii_cursor_read_int32+0x4c>
    1f94:	movw	r0, #65236	; 0xfed4
    1f98:	movw	r1, #0
    1f9c:	movt	r0, #65535	; 0xffff
    1fa0:	movt	r1, #0
    1fa4:	bl	0 <coda_set_error>
    1fa8:	b	1fb4 <coda_ascii_cursor_read_int32+0x54>
    1fac:	mov	r4, #0
    1fb0:	str	r0, [r5]
    1fb4:	mov	r0, r4
    1fb8:	sub	sp, fp, #8
    1fbc:	pop	{r4, r5, fp, pc}

00001fc0 <coda_ascii_cursor_read_uint32>:
    1fc0:	push	{r4, r5, fp, lr}
    1fc4:	add	fp, sp, #8
    1fc8:	sub	sp, sp, #8
    1fcc:	mov	r5, r1
    1fd0:	mov	r1, sp
    1fd4:	bl	1b80 <coda_ascii_cursor_read_uint64>
    1fd8:	mvn	r4, #0
    1fdc:	cmp	r0, #0
    1fe0:	bne	2014 <coda_ascii_cursor_read_uint32+0x54>
    1fe4:	ldr	r0, [sp, #4]
    1fe8:	cmp	r0, #0
    1fec:	beq	2008 <coda_ascii_cursor_read_uint32+0x48>
    1ff0:	movw	r0, #65236	; 0xfed4
    1ff4:	movw	r1, #0
    1ff8:	movt	r0, #65535	; 0xffff
    1ffc:	movt	r1, #0
    2000:	bl	0 <coda_set_error>
    2004:	b	2014 <coda_ascii_cursor_read_uint32+0x54>
    2008:	ldr	r0, [sp]
    200c:	mov	r4, #0
    2010:	str	r0, [r5]
    2014:	mov	r0, r4
    2018:	sub	sp, fp, #8
    201c:	pop	{r4, r5, fp, pc}

00002020 <coda_ascii_cursor_read_double>:
    2020:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2024:	add	fp, sp, #28
    2028:	sub	sp, sp, #84	; 0x54
    202c:	mov	r6, r0
    2030:	ldr	r0, [r0, #4]
    2034:	mov	r7, r1
    2038:	sub	r0, r0, #1
    203c:	add	r0, r6, r0, lsl #4
    2040:	ldr	r5, [r0, #8]
    2044:	ldrd	r8, [r0, #16]
    2048:	mov	r0, r6
    204c:	ldr	r1, [r5]
    2050:	cmp	r1, #99	; 0x63
    2054:	sub	r1, fp, #40	; 0x28
    2058:	ldrhi	r5, [r5, #4]
    205c:	mov	r4, r5
    2060:	ldr	r2, [r4, #24]!
    2064:	ldr	r3, [r4, #4]
    2068:	bl	15f0 <get_bit_size_boundary>
    206c:	mvn	sl, #0
    2070:	cmp	r0, #0
    2074:	bne	21e0 <coda_ascii_cursor_read_double+0x1c0>
    2078:	tst	r8, #7
    207c:	beq	2094 <coda_ascii_cursor_read_double+0x74>
    2080:	movw	r1, #0
    2084:	mvn	r0, #21
    2088:	movt	r1, #0
    208c:	bl	0 <coda_set_error>
    2090:	b	21e0 <coda_ascii_cursor_read_double+0x1c0>
    2094:	ldr	r0, [r4, #4]
    2098:	str	r7, [sp, #4]
    209c:	cmp	r0, #0
    20a0:	blt	20e0 <coda_ascii_cursor_read_double+0xc0>
    20a4:	ldr	r1, [r4]
    20a8:	mov	r7, #0
    20ac:	lsr	r1, r1, #3
    20b0:	orr	r0, r1, r0, lsl #29
    20b4:	mov	r4, r0
    20b8:	cmp	r0, #65	; 0x41
    20bc:	blt	2104 <coda_ascii_cursor_read_double+0xe4>
    20c0:	movw	r0, #0
    20c4:	movw	r1, #0
    20c8:	movw	r3, #0
    20cc:	movw	r2, #1306	; 0x51a
    20d0:	movt	r0, #0
    20d4:	movt	r1, #0
    20d8:	movt	r3, #0
    20dc:	bl	0 <__assert_fail>
    20e0:	ldr	r0, [fp, #-40]	; 0xffffffd8
    20e4:	ldr	r1, [fp, #-36]	; 0xffffffdc
    20e8:	movw	r2, #511	; 0x1ff
    20ec:	mov	r4, #64	; 0x40
    20f0:	mov	r7, #1
    20f4:	subs	r2, r2, r0
    20f8:	rscs	r2, r1, #0
    20fc:	lsrge	r0, r0, #3
    2100:	orrge	r4, r0, r1, lsl #29
    2104:	lsr	r0, r8, #3
    2108:	str	r7, [sp]
    210c:	orr	r3, r0, r9, lsl #29
    2110:	ldr	r0, [r6]
    2114:	ldr	r1, [r0, #48]	; 0x30
    2118:	cmp	r1, #0
    211c:	beq	2134 <coda_ascii_cursor_read_double+0x114>
    2120:	add	r1, r1, r3
    2124:	add	r0, sp, #8
    2128:	mov	r2, r4
    212c:	bl	0 <memcpy>
    2130:	b	2158 <coda_ascii_cursor_read_double+0x138>
    2134:	ldr	r1, [r0, #16]
    2138:	cmp	r1, #2
    213c:	bcs	2250 <coda_ascii_cursor_read_double+0x230>
    2140:	ldr	r0, [r0, #56]	; 0x38
    2144:	add	r1, sp, #8
    2148:	mov	r2, r4
    214c:	bl	0 <pread>
    2150:	cmn	r0, #1
    2154:	ble	21ec <coda_ascii_cursor_read_double+0x1cc>
    2158:	ldr	r0, [r5, #52]	; 0x34
    215c:	mov	sl, r4
    2160:	cmp	r0, #0
    2164:	beq	21c8 <coda_ascii_cursor_read_double+0x1a8>
    2168:	ldr	r5, [r0, #8]
    216c:	cmp	r5, #1
    2170:	blt	21c8 <coda_ascii_cursor_read_double+0x1a8>
    2174:	ldr	r8, [r0, #12]
    2178:	mov	r7, #0
    217c:	add	r9, sp, #8
    2180:	ldr	r4, [r8, r7, lsl #2]
    2184:	ldr	r6, [r4]
    2188:	cmp	r6, #0
    218c:	beq	21b4 <coda_ascii_cursor_read_double+0x194>
    2190:	cmp	r6, sl
    2194:	bgt	21bc <coda_ascii_cursor_read_double+0x19c>
    2198:	ldr	r0, [r4, #4]
    219c:	mov	r1, r9
    21a0:	mov	r2, r6
    21a4:	bl	0 <memcmp>
    21a8:	cmp	r0, #0
    21ac:	bne	21bc <coda_ascii_cursor_read_double+0x19c>
    21b0:	b	2210 <coda_ascii_cursor_read_double+0x1f0>
    21b4:	cmp	sl, #0
    21b8:	beq	223c <coda_ascii_cursor_read_double+0x21c>
    21bc:	add	r7, r7, #1
    21c0:	cmp	r7, r5
    21c4:	blt	2180 <coda_ascii_cursor_read_double+0x160>
    21c8:	ldr	r2, [sp, #4]
    21cc:	ldr	r3, [sp]
    21d0:	add	r0, sp, #8
    21d4:	mov	r1, sl
    21d8:	bl	408 <coda_ascii_parse_double>
    21dc:	asr	sl, r0, #31
    21e0:	mov	r0, sl
    21e4:	sub	sp, fp, #28
    21e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    21ec:	bl	0 <__errno_location>
    21f0:	ldr	r0, [r0]
    21f4:	bl	0 <strerror>
    21f8:	movw	r1, #0
    21fc:	mov	r2, r0
    2200:	mvn	r0, #21
    2204:	movt	r1, #0
    2208:	bl	0 <coda_set_error>
    220c:	b	21e0 <coda_ascii_cursor_read_double+0x1c0>
    2210:	ldr	r0, [sp]
    2214:	cmp	r0, #0
    2218:	bne	223c <coda_ascii_cursor_read_double+0x21c>
    221c:	cmp	r6, sl
    2220:	beq	223c <coda_ascii_cursor_read_double+0x21c>
    2224:	movw	r1, #0
    2228:	mvn	r0, #102	; 0x66
    222c:	movt	r1, #0
    2230:	bl	0 <coda_set_error>
    2234:	mvn	sl, #0
    2238:	b	21e0 <coda_ascii_cursor_read_double+0x1c0>
    223c:	vldr	d16, [r4, #8]
    2240:	ldr	r0, [sp, #4]
    2244:	mov	sl, #0
    2248:	vstr	d16, [r0]
    224c:	b	21e0 <coda_ascii_cursor_read_double+0x1c0>
    2250:	movw	r0, #0
    2254:	movw	r1, #0
    2258:	movw	r3, #0
    225c:	mov	r2, #62	; 0x3e
    2260:	movt	r0, #0
    2264:	movt	r1, #0
    2268:	movt	r3, #0
    226c:	bl	0 <__assert_fail>

00002270 <coda_ascii_cursor_read_float>:
    2270:	push	{r4, sl, fp, lr}
    2274:	add	fp, sp, #8
    2278:	sub	sp, sp, #8
    227c:	mov	r4, r1
    2280:	mov	r1, sp
    2284:	bl	2020 <coda_ascii_cursor_read_double>
    2288:	mov	r1, r0
    228c:	mvn	r0, #0
    2290:	cmp	r1, #0
    2294:	beq	22a0 <coda_ascii_cursor_read_float+0x30>
    2298:	sub	sp, fp, #8
    229c:	pop	{r4, sl, fp, pc}
    22a0:	vldr	d16, [sp]
    22a4:	mov	r0, #0
    22a8:	vcvt.f32.f64	s0, d16
    22ac:	vstr	s0, [r4]
    22b0:	sub	sp, fp, #8
    22b4:	pop	{r4, sl, fp, pc}

000022b8 <coda_ascii_cursor_read_char>:
    22b8:	push	{r4, r5, fp, lr}
    22bc:	add	fp, sp, #8
    22c0:	sub	sp, sp, #8
    22c4:	mov	r4, r1
    22c8:	mov	r1, sp
    22cc:	mov	r2, #8
    22d0:	mov	r3, #0
    22d4:	mov	r5, r0
    22d8:	bl	15f0 <get_bit_size_boundary>
    22dc:	mov	r1, r0
    22e0:	mvn	r0, #0
    22e4:	cmp	r1, #0
    22e8:	bne	2378 <coda_ascii_cursor_read_char+0xc0>
    22ec:	ldr	r0, [r5, #4]
    22f0:	mov	r1, r5
    22f4:	ldr	r0, [r1, r0, lsl #4]!
    22f8:	tst	r0, #7
    22fc:	beq	2320 <coda_ascii_cursor_read_char+0x68>
    2300:	movw	r0, #65236	; 0xfed4
    2304:	movw	r1, #0
    2308:	movt	r0, #65535	; 0xffff
    230c:	movt	r1, #0
    2310:	bl	0 <coda_set_error>
    2314:	mvn	r0, #0
    2318:	sub	sp, fp, #8
    231c:	pop	{r4, r5, fp, pc}
    2320:	ldr	r1, [r1, #4]
    2324:	lsr	r0, r0, #3
    2328:	orr	r3, r0, r1, lsl #29
    232c:	ldr	r0, [r5]
    2330:	ldr	r1, [r0, #48]	; 0x30
    2334:	cmp	r1, #0
    2338:	ldrbne	r0, [r1, r3]
    233c:	strbne	r0, [r4]
    2340:	movne	r0, #0
    2344:	subne	sp, fp, #8
    2348:	popne	{r4, r5, fp, pc}
    234c:	ldr	r1, [r0, #16]
    2350:	cmp	r1, #2
    2354:	bcs	23a4 <coda_ascii_cursor_read_char+0xec>
    2358:	ldr	r0, [r0, #56]	; 0x38
    235c:	mov	r1, r4
    2360:	mov	r2, #1
    2364:	bl	0 <pread>
    2368:	mov	r1, r0
    236c:	mov	r0, #0
    2370:	cmn	r1, #1
    2374:	ble	2380 <coda_ascii_cursor_read_char+0xc8>
    2378:	sub	sp, fp, #8
    237c:	pop	{r4, r5, fp, pc}
    2380:	bl	0 <__errno_location>
    2384:	ldr	r0, [r0]
    2388:	bl	0 <strerror>
    238c:	movw	r1, #0
    2390:	mov	r2, r0
    2394:	mvn	r0, #21
    2398:	movt	r1, #0
    239c:	bl	0 <coda_set_error>
    23a0:	b	2314 <coda_ascii_cursor_read_char+0x5c>
    23a4:	movw	r0, #0
    23a8:	movw	r1, #0
    23ac:	movw	r3, #0
    23b0:	mov	r2, #62	; 0x3e
    23b4:	movt	r0, #0
    23b8:	movt	r1, #0
    23bc:	movt	r3, #0
    23c0:	bl	0 <__assert_fail>

000023c4 <coda_ascii_cursor_read_string>:
    23c4:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
    23c8:	add	fp, sp, #24
    23cc:	sub	sp, sp, #24
    23d0:	mov	r5, r0
    23d4:	ldr	r0, [r0, #4]
    23d8:	mov	r9, r1
    23dc:	mov	r6, r2
    23e0:	sub	r0, r0, #1
    23e4:	add	r0, r5, r0, lsl #4
    23e8:	ldr	r4, [r0, #8]
    23ec:	ldr	r7, [r0, #16]
    23f0:	ldr	r1, [r4]
    23f4:	cmp	r1, #99	; 0x63
    23f8:	ldrhi	r4, [r4, #4]
    23fc:	tst	r7, #7
    2400:	beq	2424 <coda_ascii_cursor_read_string+0x60>
    2404:	movw	r0, #65236	; 0xfed4
    2408:	movw	r1, #0
    240c:	movt	r0, #65535	; 0xffff
    2410:	movt	r1, #0
    2414:	bl	0 <coda_set_error>
    2418:	mvn	r0, #0
    241c:	sub	sp, fp, #24
    2420:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
    2424:	ldr	r2, [r4, #24]!
    2428:	ldr	r8, [r0, #20]
    242c:	add	r1, sp, #16
    2430:	mov	r0, r5
    2434:	ldr	r3, [r4, #4]
    2438:	cmn	r3, #1
    243c:	ble	24cc <coda_ascii_cursor_read_string+0x108>
    2440:	bl	15f0 <get_bit_size_boundary>
    2444:	cmp	r0, #0
    2448:	bne	2418 <coda_ascii_cursor_read_string+0x54>
    244c:	ldrd	r0, [r4]
    2450:	lsr	r0, r0, #3
    2454:	asr	r2, r1, #3
    2458:	orr	r4, r0, r1, lsl #29
    245c:	mov	r0, #0
    2460:	subs	r3, r4, r6
    2464:	sbcs	r2, r2, r6, asr #31
    2468:	sub	r3, r6, #1
    246c:	mov	r2, #0
    2470:	movwlt	r2, #1
    2474:	cmp	r2, #0
    2478:	asr	r2, r3, #31
    247c:	moveq	r4, r3
    2480:	asrne	r2, r1, #3
    2484:	subs	r1, r4, #1
    2488:	sbcs	r1, r2, #0
    248c:	blt	24f8 <coda_ascii_cursor_read_string+0x134>
    2490:	ldr	r0, [r5]
    2494:	lsr	r1, r7, #3
    2498:	str	r4, [sp]
    249c:	stmib	sp, {r2, r9}
    24a0:	asr	r3, r8, #3
    24a4:	orr	r2, r1, r8, lsl #29
    24a8:	bl	250c <read_bytes>
    24ac:	mov	r1, r0
    24b0:	mvn	r0, #0
    24b4:	cmp	r1, #0
    24b8:	bne	24fc <coda_ascii_cursor_read_string+0x138>
    24bc:	mov	r0, #0
    24c0:	strb	r0, [r9, r4]
    24c4:	sub	sp, fp, #24
    24c8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
    24cc:	bl	a48 <coda_ascii_cursor_get_bit_size>
    24d0:	cmp	r0, #0
    24d4:	bne	2418 <coda_ascii_cursor_read_string+0x54>
    24d8:	ldr	r0, [sp, #16]
    24dc:	tst	r0, #7
    24e0:	beq	2504 <coda_ascii_cursor_read_string+0x140>
    24e4:	movw	r0, #65236	; 0xfed4
    24e8:	movw	r1, #0
    24ec:	movt	r0, #65535	; 0xffff
    24f0:	movt	r1, #0
    24f4:	b	2414 <coda_ascii_cursor_read_string+0x50>
    24f8:	strb	r0, [r9]
    24fc:	sub	sp, fp, #24
    2500:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
    2504:	ldr	r1, [sp, #20]
    2508:	b	2450 <coda_ascii_cursor_read_string+0x8c>

0000250c <read_bytes>:
    250c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2510:	add	fp, sp, #28
    2514:	sub	sp, sp, #68	; 0x44
    2518:	ldr	r7, [r0, #48]	; 0x30
    251c:	mov	sl, r2
    2520:	ldr	r1, [fp, #12]
    2524:	ldr	r2, [fp, #8]
    2528:	ldr	ip, [fp, #16]
    252c:	mov	r9, r3
    2530:	cmp	r7, #0
    2534:	beq	25b8 <read_bytes+0xac>
    2538:	mov	r6, r0
    253c:	adds	lr, r2, sl
    2540:	ldr	r4, [r6, #40]!	; 0x28
    2544:	adc	r5, r1, r9
    2548:	ldr	r3, [r6, #4]
    254c:	subs	r4, r4, lr
    2550:	sbcs	r3, r3, r5
    2554:	bcs	25f8 <read_bytes+0xec>
    2558:	ldr	r0, [r0, #16]
    255c:	cmp	r0, #1
    2560:	bls	25dc <read_bytes+0xd0>
    2564:	add	r8, sp, #47	; 0x2f
    2568:	mov	r0, r2
    256c:	mov	r2, r8
    2570:	bl	0 <coda_str64>
    2574:	add	r7, sp, #26
    2578:	mov	r0, sl
    257c:	mov	r1, r9
    2580:	mov	r2, r7
    2584:	bl	0 <coda_str64>
    2588:	ldrd	r0, [r6]
    258c:	add	r4, sp, #5
    2590:	mov	r2, r4
    2594:	bl	0 <coda_str64>
    2598:	movw	r1, #0
    259c:	mvn	r0, #300	; 0x12c
    25a0:	mov	r2, r8
    25a4:	mov	r3, r7
    25a8:	str	r4, [sp]
    25ac:	movt	r1, #0
    25b0:	bl	0 <coda_set_error>
    25b4:	b	25ec <read_bytes+0xe0>
    25b8:	ldr	r3, [r0, #16]
    25bc:	cmp	r3, #2
    25c0:	bcs	2654 <read_bytes+0x148>
    25c4:	ldrd	r4, [r0, #8]
    25c8:	adds	r3, r2, sl
    25cc:	adc	r1, r1, r9
    25d0:	subs	r3, r4, r3
    25d4:	sbcs	r1, r5, r1
    25d8:	bcs	2610 <read_bytes+0x104>
    25dc:	movw	r1, #0
    25e0:	mvn	r0, #300	; 0x12c
    25e4:	movt	r1, #0
    25e8:	bl	0 <coda_set_error>
    25ec:	mvn	r0, #0
    25f0:	sub	sp, fp, #28
    25f4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    25f8:	add	r1, r7, sl
    25fc:	mov	r0, ip
    2600:	bl	0 <memcpy>
    2604:	mov	r0, #0
    2608:	sub	sp, fp, #28
    260c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2610:	ldr	r0, [r0, #56]	; 0x38
    2614:	mov	r1, ip
    2618:	mov	r3, sl
    261c:	bl	0 <pread>
    2620:	mov	r1, r0
    2624:	mov	r0, #0
    2628:	cmn	r1, #1
    262c:	bgt	25f0 <read_bytes+0xe4>
    2630:	bl	0 <__errno_location>
    2634:	ldr	r0, [r0]
    2638:	bl	0 <strerror>
    263c:	movw	r1, #0
    2640:	mov	r2, r0
    2644:	mvn	r0, #21
    2648:	movt	r1, #0
    264c:	bl	0 <coda_set_error>
    2650:	b	25ec <read_bytes+0xe0>
    2654:	movw	r0, #0
    2658:	movw	r1, #0
    265c:	movw	r3, #0
    2660:	mov	r2, #83	; 0x53
    2664:	movt	r0, #0
    2668:	movt	r1, #0
    266c:	movt	r3, #0
    2670:	bl	0 <__assert_fail>

00002674 <coda_ascii_cursor_read_bits>:
    2674:	push	{r4, r5, fp, lr}
    2678:	add	fp, sp, #8
    267c:	sub	sp, sp, #16
    2680:	ldr	ip, [fp, #8]
    2684:	tst	ip, #7
    2688:	beq	269c <coda_ascii_cursor_read_bits+0x28>
    268c:	movw	r1, #0
    2690:	mvn	r0, #99	; 0x63
    2694:	movt	r1, #0
    2698:	b	26cc <coda_ascii_cursor_read_bits+0x58>
    269c:	ldr	lr, [r0, #4]
    26a0:	mov	r4, r0
    26a4:	ldr	lr, [r4, lr, lsl #4]!
    26a8:	ldr	r4, [r4, #4]
    26ac:	adds	r2, lr, r2
    26b0:	adc	r3, r4, r3
    26b4:	tst	r2, #7
    26b8:	beq	26dc <coda_ascii_cursor_read_bits+0x68>
    26bc:	movw	r0, #65236	; 0xfed4
    26c0:	movw	r1, #0
    26c4:	movt	r0, #65535	; 0xffff
    26c8:	movt	r1, #0
    26cc:	bl	0 <coda_set_error>
    26d0:	mvn	r0, #0
    26d4:	sub	sp, fp, #8
    26d8:	pop	{r4, r5, fp, pc}
    26dc:	ldr	lr, [fp, #12]
    26e0:	lsr	r4, ip, #3
    26e4:	ldr	r0, [r0]
    26e8:	asr	r5, lr, #3
    26ec:	orr	r4, r4, lr, lsl #29
    26f0:	stm	sp, {r4, r5}
    26f4:	str	r1, [sp, #8]
    26f8:	lsr	r1, r2, #3
    26fc:	orr	r2, r1, r3, lsl #29
    2700:	asr	r3, r3, #3
    2704:	bl	250c <read_bytes>
    2708:	sub	sp, fp, #8
    270c:	pop	{r4, r5, fp, pc}

00002710 <coda_ascii_cursor_read_int8_array>:
    2710:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2714:	add	fp, sp, #28
    2718:	sub	sp, sp, #572	; 0x23c
    271c:	mov	r5, r0
    2720:	ldr	r0, [r0, #4]
    2724:	mov	sl, r1
    2728:	mov	r8, r2
    272c:	add	r0, r5, r0, lsl #4
    2730:	ldr	r0, [r0, #-8]
    2734:	ldr	r1, [r0]
    2738:	cmp	r1, #99	; 0x63
    273c:	ldrhi	r0, [r0, #4]
    2740:	ldr	r0, [r0, #40]	; 0x28
    2744:	ldr	r0, [r0]
    2748:	cmp	r0, #0
    274c:	bne	28e0 <coda_ascii_cursor_read_int8_array+0x1d0>
    2750:	add	r7, sp, #8
    2754:	add	r1, sp, #4
    2758:	mov	r0, r5
    275c:	mov	r2, r7
    2760:	bl	0 <coda_cursor_get_array_dim>
    2764:	cmp	r0, #0
    2768:	bne	2814 <coda_ascii_cursor_read_int8_array+0x104>
    276c:	add	r0, sp, #40	; 0x28
    2770:	mov	r1, r5
    2774:	mov	r2, #520	; 0x208
    2778:	bl	0 <memcpy>
    277c:	ldr	r0, [sp, #4]
    2780:	cmp	r0, #1
    2784:	blt	279c <coda_ascii_cursor_read_int8_array+0x8c>
    2788:	cmp	r0, #4
    278c:	bcs	27a4 <coda_ascii_cursor_read_int8_array+0x94>
    2790:	mov	r6, #1
    2794:	mov	r1, #0
    2798:	b	27d8 <coda_ascii_cursor_read_int8_array+0xc8>
    279c:	mov	r6, #1
    27a0:	b	27fc <coda_ascii_cursor_read_int8_array+0xec>
    27a4:	bic	r1, r0, #3
    27a8:	vmov.i32	q8, #1	; 0x00000001
    27ac:	mov	r2, r1
    27b0:	vld1.32	{d18-d19}, [r7]!
    27b4:	subs	r2, r2, #4
    27b8:	vmul.i32	q8, q9, q8
    27bc:	bne	27b0 <coda_ascii_cursor_read_int8_array+0xa0>
    27c0:	vext.8	q9, q8, q8, #8
    27c4:	cmp	r0, r1
    27c8:	vmul.i32	q0, q8, q9
    27cc:	vmul.i32	q8, q0, d0[1]
    27d0:	vmov.32	r6, d16[0]
    27d4:	beq	27f4 <coda_ascii_cursor_read_int8_array+0xe4>
    27d8:	add	r2, sp, #8
    27dc:	sub	r0, r0, r1
    27e0:	add	r2, r2, r1, lsl #2
    27e4:	ldr	r1, [r2], #4
    27e8:	subs	r0, r0, #1
    27ec:	mul	r6, r1, r6
    27f0:	bne	27e4 <coda_ascii_cursor_read_int8_array+0xd4>
    27f4:	cmp	r6, #1
    27f8:	blt	288c <coda_ascii_cursor_read_int8_array+0x17c>
    27fc:	add	r0, sp, #40	; 0x28
    2800:	mov	r1, #0
    2804:	mov	r4, #0
    2808:	bl	0 <coda_cursor_goto_array_element_by_index>
    280c:	cmp	r0, #0
    2810:	beq	2820 <coda_ascii_cursor_read_int8_array+0x110>
    2814:	mvn	r0, #0
    2818:	sub	sp, fp, #28
    281c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2820:	str	r8, [sp]
    2824:	sub	r8, r6, #1
    2828:	add	r7, sp, #40	; 0x28
    282c:	sub	r9, fp, #40	; 0x28
    2830:	mov	r0, r7
    2834:	mov	r1, r9
    2838:	bl	1930 <coda_ascii_cursor_read_int64>
    283c:	cmp	r0, #0
    2840:	bne	2814 <coda_ascii_cursor_read_int8_array+0x104>
    2844:	ldr	r0, [fp, #-40]	; 0xffffffd8
    2848:	ldr	r1, [fp, #-36]	; 0xffffffdc
    284c:	adds	r2, r0, #128	; 0x80
    2850:	adc	r1, r1, #0
    2854:	subs	r2, r2, #256	; 0x100
    2858:	sbcs	r1, r1, #0
    285c:	bcs	28c8 <coda_ascii_cursor_read_int8_array+0x1b8>
    2860:	cmp	r4, r8
    2864:	strb	r0, [sl, r4]
    2868:	bge	287c <coda_ascii_cursor_read_int8_array+0x16c>
    286c:	mov	r0, r7
    2870:	bl	0 <coda_cursor_goto_next_array_element>
    2874:	cmp	r0, #0
    2878:	bne	2814 <coda_ascii_cursor_read_int8_array+0x104>
    287c:	add	r4, r4, #1
    2880:	cmp	r4, r6
    2884:	blt	2830 <coda_ascii_cursor_read_int8_array+0x120>
    2888:	ldr	r8, [sp]
    288c:	cmp	r8, #0
    2890:	beq	28bc <coda_ascii_cursor_read_int8_array+0x1ac>
    2894:	mov	r0, r5
    2898:	mov	r1, sl
    289c:	mov	r2, #1
    28a0:	bl	2a38 <transpose_array>
    28a4:	mov	r1, r0
    28a8:	mvn	r0, #0
    28ac:	cmp	r1, #0
    28b0:	moveq	r0, #0
    28b4:	sub	sp, fp, #28
    28b8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    28bc:	mov	r0, #0
    28c0:	sub	sp, fp, #28
    28c4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    28c8:	movw	r0, #65236	; 0xfed4
    28cc:	movw	r1, #0
    28d0:	movt	r0, #65535	; 0xffff
    28d4:	movt	r1, #0
    28d8:	bl	0 <coda_set_error>
    28dc:	b	2814 <coda_ascii_cursor_read_int8_array+0x104>
    28e0:	movw	r0, #0
    28e4:	movw	r1, #0
    28e8:	movw	r3, #0
    28ec:	movw	r2, #1464	; 0x5b8
    28f0:	movt	r0, #0
    28f4:	movt	r1, #0
    28f8:	movt	r3, #0
    28fc:	bl	0 <__assert_fail>

00002900 <read_array>:
    2900:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2904:	add	fp, sp, #28
    2908:	sub	sp, sp, #564	; 0x234
    290c:	add	r4, sp, #8
    2910:	mov	r6, r2
    2914:	mov	sl, r1
    2918:	add	r1, sp, #4
    291c:	mov	r9, r3
    2920:	mov	r5, r0
    2924:	mov	r2, r4
    2928:	bl	0 <coda_cursor_get_array_dim>
    292c:	mvn	r8, #0
    2930:	cmp	r0, #0
    2934:	bne	2a2c <read_array+0x12c>
    2938:	add	r0, sp, #40	; 0x28
    293c:	mov	r1, r5
    2940:	mov	r2, #520	; 0x208
    2944:	bl	0 <memcpy>
    2948:	ldr	r0, [sp, #4]
    294c:	cmp	r0, #1
    2950:	blt	2968 <read_array+0x68>
    2954:	cmp	r0, #4
    2958:	bcs	2970 <read_array+0x70>
    295c:	mov	r5, #1
    2960:	mov	r1, #0
    2964:	b	29a4 <read_array+0xa4>
    2968:	mov	r5, #1
    296c:	b	29c4 <read_array+0xc4>
    2970:	bic	r1, r0, #3
    2974:	vmov.i32	q8, #1	; 0x00000001
    2978:	mov	r2, r1
    297c:	vld1.32	{d18-d19}, [r4]!
    2980:	subs	r2, r2, #4
    2984:	vmul.i32	q8, q9, q8
    2988:	bne	297c <read_array+0x7c>
    298c:	vext.8	q9, q8, q8, #8
    2990:	cmp	r0, r1
    2994:	vmul.i32	q0, q8, q9
    2998:	vmul.i32	q8, q0, d0[1]
    299c:	vmov.32	r5, d16[0]
    29a0:	beq	29bc <read_array+0xbc>
    29a4:	add	r2, sp, #8
    29a8:	ldr	r3, [r2, r1, lsl #2]
    29ac:	add	r1, r1, #1
    29b0:	cmp	r1, r0
    29b4:	mul	r5, r3, r5
    29b8:	blt	29a8 <read_array+0xa8>
    29bc:	cmp	r5, #1
    29c0:	blt	2a20 <read_array+0x120>
    29c4:	add	r0, sp, #40	; 0x28
    29c8:	mov	r1, #0
    29cc:	mov	r7, #0
    29d0:	bl	0 <coda_cursor_goto_array_element_by_index>
    29d4:	cmp	r0, #0
    29d8:	bne	2a2c <read_array+0x12c>
    29dc:	sub	r8, r5, #1
    29e0:	add	r4, sp, #40	; 0x28
    29e4:	mov	r0, r4
    29e8:	mov	r1, r6
    29ec:	blx	sl
    29f0:	cmp	r0, #0
    29f4:	bne	2a28 <read_array+0x128>
    29f8:	cmp	r7, r8
    29fc:	bge	2a10 <read_array+0x110>
    2a00:	mov	r0, r4
    2a04:	bl	0 <coda_cursor_goto_next_array_element>
    2a08:	cmp	r0, #0
    2a0c:	bne	2a28 <read_array+0x128>
    2a10:	add	r7, r7, #1
    2a14:	add	r6, r6, r9
    2a18:	cmp	r7, r5
    2a1c:	blt	29e4 <read_array+0xe4>
    2a20:	mov	r8, #0
    2a24:	b	2a2c <read_array+0x12c>
    2a28:	mvn	r8, #0
    2a2c:	mov	r0, r8
    2a30:	sub	sp, fp, #28
    2a34:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

00002a38 <transpose_array>:
    2a38:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2a3c:	add	fp, sp, #28
    2a40:	sub	sp, sp, #180	; 0xb4
    2a44:	sub	r6, fp, #60	; 0x3c
    2a48:	mov	r8, r2
    2a4c:	str	r1, [sp, #32]
    2a50:	sub	r1, fp, #64	; 0x40
    2a54:	mov	r2, r6
    2a58:	bl	0 <coda_cursor_get_array_dim>
    2a5c:	mvn	r7, #0
    2a60:	cmp	r0, #0
    2a64:	bne	2f08 <transpose_array+0x4d0>
    2a68:	ldr	r5, [fp, #-64]	; 0xffffffc0
    2a6c:	mov	r7, #0
    2a70:	cmp	r5, #2
    2a74:	blt	2f08 <transpose_array+0x4d0>
    2a78:	add	r9, sp, #72	; 0x48
    2a7c:	lsl	r2, r5, #2
    2a80:	mov	r1, #0
    2a84:	mov	r7, #0
    2a88:	mov	r0, r9
    2a8c:	bl	0 <memset>
    2a90:	mov	r4, #1
    2a94:	cmp	r5, #4
    2a98:	bcc	2af0 <transpose_array+0xb8>
    2a9c:	add	r0, r6, r5, lsl #2
    2aa0:	bic	r7, r5, #3
    2aa4:	vmov.i32	q8, #1	; 0x00000001
    2aa8:	add	r1, sp, #36	; 0x24
    2aac:	mvn	r2, #15
    2ab0:	sub	r0, r0, #16
    2ab4:	mov	r3, r7
    2ab8:	vld1.32	{d18-d19}, [r0], r2
    2abc:	vld1.32	{d20-d21}, [r6]!
    2ac0:	subs	r3, r3, #4
    2ac4:	vrev64.32	q9, q9
    2ac8:	vmul.i32	q8, q10, q8
    2acc:	vext.8	q9, q9, q9, #8
    2ad0:	vst1.32	{d18-d19}, [r1]!
    2ad4:	bne	2ab8 <transpose_array+0x80>
    2ad8:	vext.8	q9, q8, q8, #8
    2adc:	cmp	r5, r7
    2ae0:	vmul.i32	q0, q8, q9
    2ae4:	vmul.i32	q8, q0, d0[1]
    2ae8:	vmov.32	r4, d16[0]
    2aec:	beq	2b24 <transpose_array+0xec>
    2af0:	sub	r0, r5, #1
    2af4:	lsl	r1, r7, #2
    2af8:	sub	r2, fp, #60	; 0x3c
    2afc:	add	r3, sp, #36	; 0x24
    2b00:	sub	r0, r0, r7
    2b04:	ldr	r7, [r2, r0, lsl #2]
    2b08:	sub	r0, r0, #1
    2b0c:	cmn	r0, #1
    2b10:	str	r7, [r3, r1]
    2b14:	ldr	r7, [r2, r1]
    2b18:	add	r1, r1, #4
    2b1c:	mul	r4, r7, r4
    2b20:	bne	2b04 <transpose_array+0xcc>
    2b24:	mov	r7, #0
    2b28:	cmp	r4, #2
    2b2c:	blt	2f08 <transpose_array+0x4d0>
    2b30:	add	r7, sp, #36	; 0x24
    2b34:	mov	r0, #1
    2b38:	sub	sl, fp, #100	; 0x64
    2b3c:	cmp	r5, #1
    2b40:	str	r0, [r7, r5, lsl #2]
    2b44:	str	r0, [sl, r5, lsl #2]
    2b48:	blt	2b80 <transpose_array+0x148>
    2b4c:	add	r1, sl, r5, lsl #2
    2b50:	str	r0, [r1, #-4]
    2b54:	beq	2b80 <transpose_array+0x148>
    2b58:	sub	r0, r7, #4
    2b5c:	sub	r1, sl, #8
    2b60:	mov	r2, #1
    2b64:	mov	r3, r5
    2b68:	ldr	r6, [r0, r3, lsl #2]
    2b6c:	mul	r2, r6, r2
    2b70:	str	r2, [r1, r3, lsl #2]
    2b74:	sub	r3, r3, #1
    2b78:	cmp	r3, #1
    2b7c:	bgt	2b68 <transpose_array+0x130>
    2b80:	mov	r0, #0
    2b84:	str	r0, [r9, r5, lsl #2]
    2b88:	str	r0, [r7, r5, lsl #2]
    2b8c:	mul	r5, r4, r8
    2b90:	mov	r0, r5
    2b94:	bl	0 <malloc>
    2b98:	cmp	r0, #0
    2b9c:	str	r0, [sp, #28]
    2ba0:	beq	2c94 <transpose_array+0x25c>
    2ba4:	sub	r0, r8, #1
    2ba8:	str	r5, [sp, #8]
    2bac:	cmp	r0, #7
    2bb0:	bhi	2f14 <transpose_array+0x4dc>
    2bb4:	add	r1, pc, #0
    2bb8:	ldr	pc, [r1, r0, lsl #2]
    2bbc:	.word	0x00002bdc
    2bc0:	.word	0x00002d7c
    2bc4:	.word	0x00002f14
    2bc8:	.word	0x00002e38
    2bcc:	.word	0x00002f14
    2bd0:	.word	0x00002f14
    2bd4:	.word	0x00002f14
    2bd8:	.word	0x00002cc0
    2bdc:	cmp	r4, #1
    2be0:	blt	2ee8 <transpose_array+0x4b0>
    2be4:	add	r0, sl, #4
    2be8:	ldr	ip, [sp, #36]	; 0x24
    2bec:	ldr	lr, [fp, #-100]	; 0xffffff9c
    2bf0:	mov	r3, #0
    2bf4:	mov	r1, #0
    2bf8:	str	r0, [sp, #20]
    2bfc:	add	r0, r7, #4
    2c00:	str	r0, [sp, #16]
    2c04:	orr	r0, r9, #4
    2c08:	str	r0, [sp, #12]
    2c0c:	mov	r0, #0
    2c10:	str	ip, [sp, #24]
    2c14:	ldr	r2, [sp, #32]
    2c18:	ldr	r7, [sp, #28]
    2c1c:	ldrb	r2, [r2, r0]
    2c20:	strb	r2, [r7, r1]
    2c24:	ldr	r2, [sp, #72]	; 0x48
    2c28:	add	r1, lr, r1
    2c2c:	add	r2, r2, #1
    2c30:	cmp	r2, ip
    2c34:	str	r2, [sp, #72]	; 0x48
    2c38:	bne	2c80 <transpose_array+0x248>
    2c3c:	ldr	r2, [sp, #20]
    2c40:	ldr	r6, [sp, #16]
    2c44:	ldr	r8, [sp, #12]
    2c48:	mov	r5, lr
    2c4c:	ldr	r9, [r2], #4
    2c50:	str	r3, [r8, #-4]
    2c54:	ldr	sl, [r8]
    2c58:	add	r1, r9, r1
    2c5c:	mls	r1, r5, ip, r1
    2c60:	ldr	r5, [r6], #4
    2c64:	add	r7, sl, #1
    2c68:	str	r7, [r8]
    2c6c:	add	r8, r8, #4
    2c70:	mov	ip, r7
    2c74:	cmp	r7, r5
    2c78:	mov	r5, r9
    2c7c:	beq	2c4c <transpose_array+0x214>
    2c80:	ldr	ip, [sp, #24]
    2c84:	add	r0, r0, #1
    2c88:	cmp	r0, r4
    2c8c:	bne	2c14 <transpose_array+0x1dc>
    2c90:	b	2ee8 <transpose_array+0x4b0>
    2c94:	movw	r1, #0
    2c98:	movw	r3, #0
    2c9c:	mov	r0, #93	; 0x5d
    2ca0:	mov	r2, r5
    2ca4:	mvn	r7, #0
    2ca8:	str	r0, [sp]
    2cac:	movt	r1, #0
    2cb0:	movt	r3, #0
    2cb4:	mvn	r0, #0
    2cb8:	bl	0 <coda_set_error>
    2cbc:	b	2f08 <transpose_array+0x4d0>
    2cc0:	cmp	r4, #1
    2cc4:	blt	2ee8 <transpose_array+0x4b0>
    2cc8:	ldr	ip, [sp, #36]	; 0x24
    2ccc:	ldr	lr, [fp, #-100]	; 0xffffff9c
    2cd0:	add	r0, sl, #4
    2cd4:	mov	sl, #0
    2cd8:	mov	r1, #0
    2cdc:	str	r0, [sp, #24]
    2ce0:	add	r0, r7, #4
    2ce4:	str	r0, [sp, #20]
    2ce8:	orr	r0, r9, #4
    2cec:	mov	r9, #0
    2cf0:	str	r0, [sp, #16]
    2cf4:	ldr	r2, [sp, #32]
    2cf8:	ldr	r6, [sp, #28]
    2cfc:	ldr	r5, [r2, sl, lsl #3]!
    2d00:	ldr	r2, [r2, #4]
    2d04:	str	r5, [r6, r1, lsl #3]!
    2d08:	add	r1, lr, r1
    2d0c:	str	r2, [r6, #4]
    2d10:	ldr	r2, [sp, #72]	; 0x48
    2d14:	add	r2, r2, #1
    2d18:	cmp	r2, ip
    2d1c:	str	r2, [sp, #72]	; 0x48
    2d20:	bne	2d6c <transpose_array+0x334>
    2d24:	ldr	r2, [sp, #24]
    2d28:	ldr	r6, [sp, #20]
    2d2c:	ldr	r8, [sp, #16]
    2d30:	mov	r5, lr
    2d34:	mov	r7, ip
    2d38:	ldr	r3, [r2], #4
    2d3c:	str	r9, [r8, #-4]
    2d40:	ldr	r0, [r8]
    2d44:	add	r1, r3, r1
    2d48:	mls	r1, r5, r7, r1
    2d4c:	ldr	r5, [r6], #4
    2d50:	add	r0, r0, #1
    2d54:	str	r0, [r8]
    2d58:	add	r8, r8, #4
    2d5c:	mov	r7, r0
    2d60:	cmp	r0, r5
    2d64:	mov	r5, r3
    2d68:	beq	2d38 <transpose_array+0x300>
    2d6c:	add	sl, sl, #1
    2d70:	cmp	sl, r4
    2d74:	bne	2cf4 <transpose_array+0x2bc>
    2d78:	b	2ee8 <transpose_array+0x4b0>
    2d7c:	cmp	r4, #1
    2d80:	blt	2ee8 <transpose_array+0x4b0>
    2d84:	ldr	ip, [sp, #36]	; 0x24
    2d88:	ldr	lr, [fp, #-100]	; 0xffffff9c
    2d8c:	add	r0, sl, #4
    2d90:	mov	sl, #0
    2d94:	mov	r1, #0
    2d98:	str	r0, [sp, #24]
    2d9c:	add	r0, r7, #4
    2da0:	str	r0, [sp, #20]
    2da4:	orr	r0, r9, #4
    2da8:	mov	r9, #0
    2dac:	str	r0, [sp, #16]
    2db0:	ldr	r0, [sp, #28]
    2db4:	add	r2, r0, r1, lsl #1
    2db8:	ldr	r0, [sp, #32]
    2dbc:	add	r1, lr, r1
    2dc0:	add	r5, r0, sl, lsl #1
    2dc4:	ldrh	r5, [r5]
    2dc8:	strh	r5, [r2]
    2dcc:	ldr	r2, [sp, #72]	; 0x48
    2dd0:	add	r2, r2, #1
    2dd4:	cmp	r2, ip
    2dd8:	str	r2, [sp, #72]	; 0x48
    2ddc:	bne	2e28 <transpose_array+0x3f0>
    2de0:	ldr	r2, [sp, #24]
    2de4:	ldr	r6, [sp, #20]
    2de8:	ldr	r8, [sp, #16]
    2dec:	mov	r5, lr
    2df0:	mov	r7, ip
    2df4:	ldr	r3, [r2], #4
    2df8:	str	r9, [r8, #-4]
    2dfc:	ldr	r0, [r8]
    2e00:	add	r1, r3, r1
    2e04:	mls	r1, r5, r7, r1
    2e08:	ldr	r5, [r6], #4
    2e0c:	add	r0, r0, #1
    2e10:	str	r0, [r8]
    2e14:	add	r8, r8, #4
    2e18:	mov	r7, r0
    2e1c:	cmp	r0, r5
    2e20:	mov	r5, r3
    2e24:	beq	2df4 <transpose_array+0x3bc>
    2e28:	add	sl, sl, #1
    2e2c:	cmp	sl, r4
    2e30:	bne	2db0 <transpose_array+0x378>
    2e34:	b	2ee8 <transpose_array+0x4b0>
    2e38:	cmp	r4, #1
    2e3c:	blt	2ee8 <transpose_array+0x4b0>
    2e40:	ldr	ip, [sp, #36]	; 0x24
    2e44:	ldr	lr, [fp, #-100]	; 0xffffff9c
    2e48:	add	r0, sl, #4
    2e4c:	mov	sl, #0
    2e50:	mov	r1, #0
    2e54:	str	r0, [sp, #24]
    2e58:	add	r0, r7, #4
    2e5c:	str	r0, [sp, #20]
    2e60:	orr	r0, r9, #4
    2e64:	mov	r9, #0
    2e68:	str	r0, [sp, #16]
    2e6c:	ldr	r0, [sp, #32]
    2e70:	ldr	r2, [r0, sl, lsl #2]
    2e74:	ldr	r0, [sp, #28]
    2e78:	str	r2, [r0, r1, lsl #2]
    2e7c:	ldr	r2, [sp, #72]	; 0x48
    2e80:	add	r1, lr, r1
    2e84:	add	r2, r2, #1
    2e88:	cmp	r2, ip
    2e8c:	str	r2, [sp, #72]	; 0x48
    2e90:	bne	2edc <transpose_array+0x4a4>
    2e94:	ldr	r2, [sp, #24]
    2e98:	ldr	r6, [sp, #20]
    2e9c:	ldr	r8, [sp, #16]
    2ea0:	mov	r5, lr
    2ea4:	mov	r7, ip
    2ea8:	ldr	r3, [r2], #4
    2eac:	str	r9, [r8, #-4]
    2eb0:	ldr	r0, [r8]
    2eb4:	add	r1, r3, r1
    2eb8:	mls	r1, r5, r7, r1
    2ebc:	ldr	r5, [r6], #4
    2ec0:	add	r0, r0, #1
    2ec4:	str	r0, [r8]
    2ec8:	add	r8, r8, #4
    2ecc:	mov	r7, r0
    2ed0:	cmp	r0, r5
    2ed4:	mov	r5, r3
    2ed8:	beq	2ea8 <transpose_array+0x470>
    2edc:	add	sl, sl, #1
    2ee0:	cmp	sl, r4
    2ee4:	bne	2e6c <transpose_array+0x434>
    2ee8:	ldr	r4, [sp, #28]
    2eec:	ldr	r0, [sp, #32]
    2ef0:	ldr	r2, [sp, #8]
    2ef4:	mov	r1, r4
    2ef8:	bl	0 <memcpy>
    2efc:	mov	r0, r4
    2f00:	bl	0 <free>
    2f04:	mov	r7, #0
    2f08:	mov	r0, r7
    2f0c:	sub	sp, fp, #28
    2f10:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2f14:	movw	r0, #0
    2f18:	movw	r1, #0
    2f1c:	movw	r3, #0
    2f20:	mov	r2, #172	; 0xac
    2f24:	movt	r0, #0
    2f28:	movt	r1, #0
    2f2c:	movt	r3, #0
    2f30:	bl	0 <__assert_fail>

00002f34 <coda_ascii_cursor_read_uint8_array>:
    2f34:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2f38:	add	fp, sp, #28
    2f3c:	sub	sp, sp, #572	; 0x23c
    2f40:	mov	r5, r0
    2f44:	ldr	r0, [r0, #4]
    2f48:	mov	sl, r1
    2f4c:	mov	r8, r2
    2f50:	add	r0, r5, r0, lsl #4
    2f54:	ldr	r0, [r0, #-8]
    2f58:	ldr	r1, [r0]
    2f5c:	cmp	r1, #99	; 0x63
    2f60:	ldrhi	r0, [r0, #4]
    2f64:	ldr	r0, [r0, #40]	; 0x28
    2f68:	ldr	r0, [r0]
    2f6c:	cmp	r0, #0
    2f70:	bne	30fc <coda_ascii_cursor_read_uint8_array+0x1c8>
    2f74:	add	r7, sp, #8
    2f78:	add	r1, sp, #4
    2f7c:	mov	r0, r5
    2f80:	mov	r2, r7
    2f84:	bl	0 <coda_cursor_get_array_dim>
    2f88:	cmp	r0, #0
    2f8c:	bne	3038 <coda_ascii_cursor_read_uint8_array+0x104>
    2f90:	add	r0, sp, #40	; 0x28
    2f94:	mov	r1, r5
    2f98:	mov	r2, #520	; 0x208
    2f9c:	bl	0 <memcpy>
    2fa0:	ldr	r0, [sp, #4]
    2fa4:	cmp	r0, #1
    2fa8:	blt	2fc0 <coda_ascii_cursor_read_uint8_array+0x8c>
    2fac:	cmp	r0, #4
    2fb0:	bcs	2fc8 <coda_ascii_cursor_read_uint8_array+0x94>
    2fb4:	mov	r6, #1
    2fb8:	mov	r1, #0
    2fbc:	b	2ffc <coda_ascii_cursor_read_uint8_array+0xc8>
    2fc0:	mov	r6, #1
    2fc4:	b	3020 <coda_ascii_cursor_read_uint8_array+0xec>
    2fc8:	bic	r1, r0, #3
    2fcc:	vmov.i32	q8, #1	; 0x00000001
    2fd0:	mov	r2, r1
    2fd4:	vld1.32	{d18-d19}, [r7]!
    2fd8:	subs	r2, r2, #4
    2fdc:	vmul.i32	q8, q9, q8
    2fe0:	bne	2fd4 <coda_ascii_cursor_read_uint8_array+0xa0>
    2fe4:	vext.8	q9, q8, q8, #8
    2fe8:	cmp	r0, r1
    2fec:	vmul.i32	q0, q8, q9
    2ff0:	vmul.i32	q8, q0, d0[1]
    2ff4:	vmov.32	r6, d16[0]
    2ff8:	beq	3018 <coda_ascii_cursor_read_uint8_array+0xe4>
    2ffc:	add	r2, sp, #8
    3000:	sub	r0, r0, r1
    3004:	add	r2, r2, r1, lsl #2
    3008:	ldr	r1, [r2], #4
    300c:	subs	r0, r0, #1
    3010:	mul	r6, r1, r6
    3014:	bne	3008 <coda_ascii_cursor_read_uint8_array+0xd4>
    3018:	cmp	r6, #1
    301c:	blt	30a8 <coda_ascii_cursor_read_uint8_array+0x174>
    3020:	add	r0, sp, #40	; 0x28
    3024:	mov	r1, #0
    3028:	mov	r4, #0
    302c:	bl	0 <coda_cursor_goto_array_element_by_index>
    3030:	cmp	r0, #0
    3034:	beq	3044 <coda_ascii_cursor_read_uint8_array+0x110>
    3038:	mvn	r0, #0
    303c:	sub	sp, fp, #28
    3040:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3044:	str	r8, [sp]
    3048:	sub	r8, r6, #1
    304c:	add	r7, sp, #40	; 0x28
    3050:	sub	r9, fp, #40	; 0x28
    3054:	mov	r0, r7
    3058:	mov	r1, r9
    305c:	bl	1b80 <coda_ascii_cursor_read_uint64>
    3060:	cmp	r0, #0
    3064:	bne	3038 <coda_ascii_cursor_read_uint8_array+0x104>
    3068:	ldr	r0, [fp, #-40]	; 0xffffffd8
    306c:	ldr	r1, [fp, #-36]	; 0xffffffdc
    3070:	subs	r2, r0, #256	; 0x100
    3074:	sbcs	r1, r1, #0
    3078:	bcs	30e4 <coda_ascii_cursor_read_uint8_array+0x1b0>
    307c:	cmp	r4, r8
    3080:	strb	r0, [sl, r4]
    3084:	bge	3098 <coda_ascii_cursor_read_uint8_array+0x164>
    3088:	mov	r0, r7
    308c:	bl	0 <coda_cursor_goto_next_array_element>
    3090:	cmp	r0, #0
    3094:	bne	3038 <coda_ascii_cursor_read_uint8_array+0x104>
    3098:	add	r4, r4, #1
    309c:	cmp	r4, r6
    30a0:	blt	3054 <coda_ascii_cursor_read_uint8_array+0x120>
    30a4:	ldr	r8, [sp]
    30a8:	cmp	r8, #0
    30ac:	beq	30d8 <coda_ascii_cursor_read_uint8_array+0x1a4>
    30b0:	mov	r0, r5
    30b4:	mov	r1, sl
    30b8:	mov	r2, #1
    30bc:	bl	2a38 <transpose_array>
    30c0:	mov	r1, r0
    30c4:	mvn	r0, #0
    30c8:	cmp	r1, #0
    30cc:	moveq	r0, #0
    30d0:	sub	sp, fp, #28
    30d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    30d8:	mov	r0, #0
    30dc:	sub	sp, fp, #28
    30e0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    30e4:	movw	r0, #65236	; 0xfed4
    30e8:	movw	r1, #0
    30ec:	movt	r0, #65535	; 0xffff
    30f0:	movt	r1, #0
    30f4:	bl	0 <coda_set_error>
    30f8:	b	3038 <coda_ascii_cursor_read_uint8_array+0x104>
    30fc:	movw	r0, #0
    3100:	movw	r1, #0
    3104:	movw	r3, #0
    3108:	movw	r2, #1484	; 0x5cc
    310c:	movt	r0, #0
    3110:	movt	r1, #0
    3114:	movt	r3, #0
    3118:	bl	0 <__assert_fail>

0000311c <coda_ascii_cursor_read_int16_array>:
    311c:	push	{r4, r5, r6, r7, fp, lr}
    3120:	add	fp, sp, #16
    3124:	mov	r5, r0
    3128:	ldr	r0, [r0, #4]
    312c:	mov	r4, r1
    3130:	mov	r6, r2
    3134:	add	r0, r5, r0, lsl #4
    3138:	ldr	r0, [r0, #-8]
    313c:	ldr	r1, [r0]
    3140:	cmp	r1, #99	; 0x63
    3144:	ldrhi	r0, [r0, #4]
    3148:	ldr	r0, [r0, #40]	; 0x28
    314c:	ldr	r0, [r0]
    3150:	cmp	r0, #0
    3154:	bne	31b8 <coda_ascii_cursor_read_int16_array+0x9c>
    3158:	movw	r1, #0
    315c:	mov	r0, r5
    3160:	mov	r2, r4
    3164:	mov	r3, #2
    3168:	movt	r1, #0
    316c:	bl	2900 <read_array>
    3170:	mvn	r7, #0
    3174:	cmp	r0, #0
    3178:	beq	3184 <coda_ascii_cursor_read_int16_array+0x68>
    317c:	mov	r0, r7
    3180:	pop	{r4, r5, r6, r7, fp, pc}
    3184:	cmp	r6, #0
    3188:	beq	31ac <coda_ascii_cursor_read_int16_array+0x90>
    318c:	mov	r0, r5
    3190:	mov	r1, r4
    3194:	mov	r2, #2
    3198:	bl	2a38 <transpose_array>
    319c:	cmp	r0, #0
    31a0:	moveq	r7, #0
    31a4:	mov	r0, r7
    31a8:	pop	{r4, r5, r6, r7, fp, pc}
    31ac:	mov	r7, #0
    31b0:	mov	r0, r7
    31b4:	pop	{r4, r5, r6, r7, fp, pc}
    31b8:	movw	r0, #0
    31bc:	movw	r1, #0
    31c0:	movw	r3, #0
    31c4:	mov	r2, #1504	; 0x5e0
    31c8:	movt	r0, #0
    31cc:	movt	r1, #0
    31d0:	movt	r3, #0
    31d4:	bl	0 <__assert_fail>

000031d8 <coda_ascii_cursor_read_uint16_array>:
    31d8:	push	{r4, r5, r6, r7, fp, lr}
    31dc:	add	fp, sp, #16
    31e0:	mov	r5, r0
    31e4:	ldr	r0, [r0, #4]
    31e8:	mov	r4, r1
    31ec:	mov	r6, r2
    31f0:	add	r0, r5, r0, lsl #4
    31f4:	ldr	r0, [r0, #-8]
    31f8:	ldr	r1, [r0]
    31fc:	cmp	r1, #99	; 0x63
    3200:	ldrhi	r0, [r0, #4]
    3204:	ldr	r0, [r0, #40]	; 0x28
    3208:	ldr	r0, [r0]
    320c:	cmp	r0, #0
    3210:	bne	3274 <coda_ascii_cursor_read_uint16_array+0x9c>
    3214:	movw	r1, #0
    3218:	mov	r0, r5
    321c:	mov	r2, r4
    3220:	mov	r3, #2
    3224:	movt	r1, #0
    3228:	bl	2900 <read_array>
    322c:	mvn	r7, #0
    3230:	cmp	r0, #0
    3234:	beq	3240 <coda_ascii_cursor_read_uint16_array+0x68>
    3238:	mov	r0, r7
    323c:	pop	{r4, r5, r6, r7, fp, pc}
    3240:	cmp	r6, #0
    3244:	beq	3268 <coda_ascii_cursor_read_uint16_array+0x90>
    3248:	mov	r0, r5
    324c:	mov	r1, r4
    3250:	mov	r2, #2
    3254:	bl	2a38 <transpose_array>
    3258:	cmp	r0, #0
    325c:	moveq	r7, #0
    3260:	mov	r0, r7
    3264:	pop	{r4, r5, r6, r7, fp, pc}
    3268:	mov	r7, #0
    326c:	mov	r0, r7
    3270:	pop	{r4, r5, r6, r7, fp, pc}
    3274:	movw	r0, #0
    3278:	movw	r1, #0
    327c:	movw	r3, #0
    3280:	movw	r2, #1524	; 0x5f4
    3284:	movt	r0, #0
    3288:	movt	r1, #0
    328c:	movt	r3, #0
    3290:	bl	0 <__assert_fail>

00003294 <coda_ascii_cursor_read_int32_array>:
    3294:	push	{r4, r5, r6, r7, fp, lr}
    3298:	add	fp, sp, #16
    329c:	mov	r5, r0
    32a0:	ldr	r0, [r0, #4]
    32a4:	mov	r4, r1
    32a8:	mov	r6, r2
    32ac:	add	r0, r5, r0, lsl #4
    32b0:	ldr	r0, [r0, #-8]
    32b4:	ldr	r1, [r0]
    32b8:	cmp	r1, #99	; 0x63
    32bc:	ldrhi	r0, [r0, #4]
    32c0:	ldr	r0, [r0, #40]	; 0x28
    32c4:	ldr	r0, [r0]
    32c8:	cmp	r0, #0
    32cc:	bne	3330 <coda_ascii_cursor_read_int32_array+0x9c>
    32d0:	movw	r1, #0
    32d4:	mov	r0, r5
    32d8:	mov	r2, r4
    32dc:	mov	r3, #4
    32e0:	movt	r1, #0
    32e4:	bl	2900 <read_array>
    32e8:	mvn	r7, #0
    32ec:	cmp	r0, #0
    32f0:	beq	32fc <coda_ascii_cursor_read_int32_array+0x68>
    32f4:	mov	r0, r7
    32f8:	pop	{r4, r5, r6, r7, fp, pc}
    32fc:	cmp	r6, #0
    3300:	beq	3324 <coda_ascii_cursor_read_int32_array+0x90>
    3304:	mov	r0, r5
    3308:	mov	r1, r4
    330c:	mov	r2, #4
    3310:	bl	2a38 <transpose_array>
    3314:	cmp	r0, #0
    3318:	moveq	r7, #0
    331c:	mov	r0, r7
    3320:	pop	{r4, r5, r6, r7, fp, pc}
    3324:	mov	r7, #0
    3328:	mov	r0, r7
    332c:	pop	{r4, r5, r6, r7, fp, pc}
    3330:	movw	r0, #0
    3334:	movw	r1, #0
    3338:	movw	r3, #0
    333c:	movw	r2, #1544	; 0x608
    3340:	movt	r0, #0
    3344:	movt	r1, #0
    3348:	movt	r3, #0
    334c:	bl	0 <__assert_fail>

00003350 <coda_ascii_cursor_read_uint32_array>:
    3350:	push	{r4, r5, r6, r7, fp, lr}
    3354:	add	fp, sp, #16
    3358:	mov	r5, r0
    335c:	ldr	r0, [r0, #4]
    3360:	mov	r4, r1
    3364:	mov	r6, r2
    3368:	add	r0, r5, r0, lsl #4
    336c:	ldr	r0, [r0, #-8]
    3370:	ldr	r1, [r0]
    3374:	cmp	r1, #99	; 0x63
    3378:	ldrhi	r0, [r0, #4]
    337c:	ldr	r0, [r0, #40]	; 0x28
    3380:	ldr	r0, [r0]
    3384:	cmp	r0, #0
    3388:	bne	33ec <coda_ascii_cursor_read_uint32_array+0x9c>
    338c:	movw	r1, #0
    3390:	mov	r0, r5
    3394:	mov	r2, r4
    3398:	mov	r3, #4
    339c:	movt	r1, #0
    33a0:	bl	2900 <read_array>
    33a4:	mvn	r7, #0
    33a8:	cmp	r0, #0
    33ac:	beq	33b8 <coda_ascii_cursor_read_uint32_array+0x68>
    33b0:	mov	r0, r7
    33b4:	pop	{r4, r5, r6, r7, fp, pc}
    33b8:	cmp	r6, #0
    33bc:	beq	33e0 <coda_ascii_cursor_read_uint32_array+0x90>
    33c0:	mov	r0, r5
    33c4:	mov	r1, r4
    33c8:	mov	r2, #4
    33cc:	bl	2a38 <transpose_array>
    33d0:	cmp	r0, #0
    33d4:	moveq	r7, #0
    33d8:	mov	r0, r7
    33dc:	pop	{r4, r5, r6, r7, fp, pc}
    33e0:	mov	r7, #0
    33e4:	mov	r0, r7
    33e8:	pop	{r4, r5, r6, r7, fp, pc}
    33ec:	movw	r0, #0
    33f0:	movw	r1, #0
    33f4:	movw	r3, #0
    33f8:	movw	r2, #1564	; 0x61c
    33fc:	movt	r0, #0
    3400:	movt	r1, #0
    3404:	movt	r3, #0
    3408:	bl	0 <__assert_fail>

0000340c <coda_ascii_cursor_read_int64_array>:
    340c:	push	{r4, r5, r6, r7, fp, lr}
    3410:	add	fp, sp, #16
    3414:	mov	r5, r0
    3418:	ldr	r0, [r0, #4]
    341c:	mov	r4, r1
    3420:	mov	r6, r2
    3424:	add	r0, r5, r0, lsl #4
    3428:	ldr	r0, [r0, #-8]
    342c:	ldr	r1, [r0]
    3430:	cmp	r1, #99	; 0x63
    3434:	ldrhi	r0, [r0, #4]
    3438:	ldr	r0, [r0, #40]	; 0x28
    343c:	ldr	r0, [r0]
    3440:	cmp	r0, #0
    3444:	bne	34a8 <coda_ascii_cursor_read_int64_array+0x9c>
    3448:	movw	r1, #0
    344c:	mov	r0, r5
    3450:	mov	r2, r4
    3454:	mov	r3, #8
    3458:	movt	r1, #0
    345c:	bl	2900 <read_array>
    3460:	mvn	r7, #0
    3464:	cmp	r0, #0
    3468:	beq	3474 <coda_ascii_cursor_read_int64_array+0x68>
    346c:	mov	r0, r7
    3470:	pop	{r4, r5, r6, r7, fp, pc}
    3474:	cmp	r6, #0
    3478:	beq	349c <coda_ascii_cursor_read_int64_array+0x90>
    347c:	mov	r0, r5
    3480:	mov	r1, r4
    3484:	mov	r2, #4
    3488:	bl	2a38 <transpose_array>
    348c:	cmp	r0, #0
    3490:	moveq	r7, #0
    3494:	mov	r0, r7
    3498:	pop	{r4, r5, r6, r7, fp, pc}
    349c:	mov	r7, #0
    34a0:	mov	r0, r7
    34a4:	pop	{r4, r5, r6, r7, fp, pc}
    34a8:	movw	r0, #0
    34ac:	movw	r1, #0
    34b0:	movw	r3, #0
    34b4:	mov	r2, #1584	; 0x630
    34b8:	movt	r0, #0
    34bc:	movt	r1, #0
    34c0:	movt	r3, #0
    34c4:	bl	0 <__assert_fail>

000034c8 <coda_ascii_cursor_read_uint64_array>:
    34c8:	push	{r4, r5, r6, r7, fp, lr}
    34cc:	add	fp, sp, #16
    34d0:	mov	r5, r0
    34d4:	ldr	r0, [r0, #4]
    34d8:	mov	r4, r1
    34dc:	mov	r6, r2
    34e0:	add	r0, r5, r0, lsl #4
    34e4:	ldr	r0, [r0, #-8]
    34e8:	ldr	r1, [r0]
    34ec:	cmp	r1, #99	; 0x63
    34f0:	ldrhi	r0, [r0, #4]
    34f4:	ldr	r0, [r0, #40]	; 0x28
    34f8:	ldr	r0, [r0]
    34fc:	cmp	r0, #0
    3500:	bne	3564 <coda_ascii_cursor_read_uint64_array+0x9c>
    3504:	movw	r1, #0
    3508:	mov	r0, r5
    350c:	mov	r2, r4
    3510:	mov	r3, #8
    3514:	movt	r1, #0
    3518:	bl	2900 <read_array>
    351c:	mvn	r7, #0
    3520:	cmp	r0, #0
    3524:	beq	3530 <coda_ascii_cursor_read_uint64_array+0x68>
    3528:	mov	r0, r7
    352c:	pop	{r4, r5, r6, r7, fp, pc}
    3530:	cmp	r6, #0
    3534:	beq	3558 <coda_ascii_cursor_read_uint64_array+0x90>
    3538:	mov	r0, r5
    353c:	mov	r1, r4
    3540:	mov	r2, #8
    3544:	bl	2a38 <transpose_array>
    3548:	cmp	r0, #0
    354c:	moveq	r7, #0
    3550:	mov	r0, r7
    3554:	pop	{r4, r5, r6, r7, fp, pc}
    3558:	mov	r7, #0
    355c:	mov	r0, r7
    3560:	pop	{r4, r5, r6, r7, fp, pc}
    3564:	movw	r0, #0
    3568:	movw	r1, #0
    356c:	movw	r3, #0
    3570:	movw	r2, #1604	; 0x644
    3574:	movt	r0, #0
    3578:	movt	r1, #0
    357c:	movt	r3, #0
    3580:	bl	0 <__assert_fail>

00003584 <coda_ascii_cursor_read_float_array>:
    3584:	push	{r4, r5, r6, r7, fp, lr}
    3588:	add	fp, sp, #16
    358c:	mov	r5, r0
    3590:	ldr	r0, [r0, #4]
    3594:	mov	r4, r1
    3598:	mov	r6, r2
    359c:	add	r0, r5, r0, lsl #4
    35a0:	ldr	r0, [r0, #-8]
    35a4:	ldr	r1, [r0]
    35a8:	cmp	r1, #99	; 0x63
    35ac:	ldrhi	r0, [r0, #4]
    35b0:	ldr	r0, [r0, #40]	; 0x28
    35b4:	ldr	r0, [r0]
    35b8:	cmp	r0, #0
    35bc:	bne	3620 <coda_ascii_cursor_read_float_array+0x9c>
    35c0:	movw	r1, #0
    35c4:	mov	r0, r5
    35c8:	mov	r2, r4
    35cc:	mov	r3, #4
    35d0:	movt	r1, #0
    35d4:	bl	2900 <read_array>
    35d8:	mvn	r7, #0
    35dc:	cmp	r0, #0
    35e0:	beq	35ec <coda_ascii_cursor_read_float_array+0x68>
    35e4:	mov	r0, r7
    35e8:	pop	{r4, r5, r6, r7, fp, pc}
    35ec:	cmp	r6, #0
    35f0:	beq	3614 <coda_ascii_cursor_read_float_array+0x90>
    35f4:	mov	r0, r5
    35f8:	mov	r1, r4
    35fc:	mov	r2, #4
    3600:	bl	2a38 <transpose_array>
    3604:	cmp	r0, #0
    3608:	moveq	r7, #0
    360c:	mov	r0, r7
    3610:	pop	{r4, r5, r6, r7, fp, pc}
    3614:	mov	r7, #0
    3618:	mov	r0, r7
    361c:	pop	{r4, r5, r6, r7, fp, pc}
    3620:	movw	r0, #0
    3624:	movw	r1, #0
    3628:	movw	r3, #0
    362c:	movw	r2, #1624	; 0x658
    3630:	movt	r0, #0
    3634:	movt	r1, #0
    3638:	movt	r3, #0
    363c:	bl	0 <__assert_fail>

00003640 <coda_ascii_cursor_read_double_array>:
    3640:	push	{r4, r5, r6, r7, fp, lr}
    3644:	add	fp, sp, #16
    3648:	mov	r5, r0
    364c:	ldr	r0, [r0, #4]
    3650:	mov	r4, r1
    3654:	mov	r6, r2
    3658:	add	r0, r5, r0, lsl #4
    365c:	ldr	r0, [r0, #-8]
    3660:	ldr	r1, [r0]
    3664:	cmp	r1, #99	; 0x63
    3668:	ldrhi	r0, [r0, #4]
    366c:	ldr	r0, [r0, #40]	; 0x28
    3670:	ldr	r0, [r0]
    3674:	cmp	r0, #0
    3678:	bne	36dc <coda_ascii_cursor_read_double_array+0x9c>
    367c:	movw	r1, #0
    3680:	mov	r0, r5
    3684:	mov	r2, r4
    3688:	mov	r3, #8
    368c:	movt	r1, #0
    3690:	bl	2900 <read_array>
    3694:	mvn	r7, #0
    3698:	cmp	r0, #0
    369c:	beq	36a8 <coda_ascii_cursor_read_double_array+0x68>
    36a0:	mov	r0, r7
    36a4:	pop	{r4, r5, r6, r7, fp, pc}
    36a8:	cmp	r6, #0
    36ac:	beq	36d0 <coda_ascii_cursor_read_double_array+0x90>
    36b0:	mov	r0, r5
    36b4:	mov	r1, r4
    36b8:	mov	r2, #8
    36bc:	bl	2a38 <transpose_array>
    36c0:	cmp	r0, #0
    36c4:	moveq	r7, #0
    36c8:	mov	r0, r7
    36cc:	pop	{r4, r5, r6, r7, fp, pc}
    36d0:	mov	r7, #0
    36d4:	mov	r0, r7
    36d8:	pop	{r4, r5, r6, r7, fp, pc}
    36dc:	movw	r0, #0
    36e0:	movw	r1, #0
    36e4:	movw	r3, #0
    36e8:	movw	r2, #1644	; 0x66c
    36ec:	movt	r0, #0
    36f0:	movt	r1, #0
    36f4:	movt	r3, #0
    36f8:	bl	0 <__assert_fail>

000036fc <coda_ascii_cursor_read_char_array>:
    36fc:	push	{r4, r5, r6, r7, fp, lr}
    3700:	add	fp, sp, #16
    3704:	mov	r5, r0
    3708:	ldr	r0, [r0, #4]
    370c:	mov	r4, r1
    3710:	mov	r6, r2
    3714:	add	r0, r5, r0, lsl #4
    3718:	ldr	r0, [r0, #-8]
    371c:	ldr	r1, [r0]
    3720:	cmp	r1, #99	; 0x63
    3724:	ldrhi	r0, [r0, #4]
    3728:	ldr	r0, [r0, #40]	; 0x28
    372c:	ldr	r0, [r0]
    3730:	cmp	r0, #0
    3734:	bne	3798 <coda_ascii_cursor_read_char_array+0x9c>
    3738:	movw	r1, #0
    373c:	mov	r0, r5
    3740:	mov	r2, r4
    3744:	mov	r3, #1
    3748:	movt	r1, #0
    374c:	bl	2900 <read_array>
    3750:	mvn	r7, #0
    3754:	cmp	r0, #0
    3758:	beq	3764 <coda_ascii_cursor_read_char_array+0x68>
    375c:	mov	r0, r7
    3760:	pop	{r4, r5, r6, r7, fp, pc}
    3764:	cmp	r6, #0
    3768:	beq	378c <coda_ascii_cursor_read_char_array+0x90>
    376c:	mov	r0, r5
    3770:	mov	r1, r4
    3774:	mov	r2, #1
    3778:	bl	2a38 <transpose_array>
    377c:	cmp	r0, #0
    3780:	moveq	r7, #0
    3784:	mov	r0, r7
    3788:	pop	{r4, r5, r6, r7, fp, pc}
    378c:	mov	r7, #0
    3790:	mov	r0, r7
    3794:	pop	{r4, r5, r6, r7, fp, pc}
    3798:	movw	r0, #0
    379c:	movw	r1, #0
    37a0:	movw	r3, #0
    37a4:	mov	r2, #1664	; 0x680
    37a8:	movt	r0, #0
    37ac:	movt	r1, #0
    37b0:	movt	r3, #0
    37b4:	bl	0 <__assert_fail>

000037b8 <coda_ascii_cursor_read_int8_partial_array>:
    37b8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    37bc:	add	fp, sp, #28
    37c0:	sub	sp, sp, #532	; 0x214
    37c4:	mov	r6, r1
    37c8:	mov	r1, r0
    37cc:	ldr	r0, [r0, #4]
    37d0:	mov	r5, r2
    37d4:	mov	r4, r3
    37d8:	add	r0, r1, r0, lsl #4
    37dc:	ldr	r0, [r0, #-8]
    37e0:	ldr	r2, [r0]
    37e4:	cmp	r2, #99	; 0x63
    37e8:	ldrhi	r0, [r0, #4]
    37ec:	ldr	r0, [r0, #40]	; 0x28
    37f0:	ldr	r0, [r0]
    37f4:	cmp	r0, #0
    37f8:	bne	38b8 <coda_ascii_cursor_read_int8_partial_array+0x100>
    37fc:	mov	r0, sp
    3800:	mov	r2, #520	; 0x208
    3804:	bl	0 <memcpy>
    3808:	cmp	r5, #1
    380c:	blt	3890 <coda_ascii_cursor_read_int8_partial_array+0xd8>
    3810:	mov	r0, sp
    3814:	mov	r1, r6
    3818:	bl	0 <coda_cursor_goto_array_element_by_index>
    381c:	mvn	r9, #0
    3820:	cmp	r0, #0
    3824:	bne	3894 <coda_ascii_cursor_read_int8_partial_array+0xdc>
    3828:	sub	r6, r5, #1
    382c:	mov	r7, #0
    3830:	mov	sl, sp
    3834:	sub	r8, fp, #40	; 0x28
    3838:	mov	r0, sl
    383c:	mov	r1, r8
    3840:	bl	1930 <coda_ascii_cursor_read_int64>
    3844:	cmp	r0, #0
    3848:	bne	3894 <coda_ascii_cursor_read_int8_partial_array+0xdc>
    384c:	ldr	r0, [fp, #-40]	; 0xffffffd8
    3850:	ldr	r1, [fp, #-36]	; 0xffffffdc
    3854:	adds	r2, r0, #128	; 0x80
    3858:	adc	r1, r1, #0
    385c:	subs	r2, r2, #256	; 0x100
    3860:	sbcs	r1, r1, #0
    3864:	bcs	38a0 <coda_ascii_cursor_read_int8_partial_array+0xe8>
    3868:	cmp	r7, r6
    386c:	strb	r0, [r4, r7]
    3870:	bge	3884 <coda_ascii_cursor_read_int8_partial_array+0xcc>
    3874:	mov	r0, sl
    3878:	bl	0 <coda_cursor_goto_next_array_element>
    387c:	cmp	r0, #0
    3880:	bne	3894 <coda_ascii_cursor_read_int8_partial_array+0xdc>
    3884:	add	r7, r7, #1
    3888:	cmp	r7, r5
    388c:	blt	3838 <coda_ascii_cursor_read_int8_partial_array+0x80>
    3890:	mov	r9, #0
    3894:	mov	r0, r9
    3898:	sub	sp, fp, #28
    389c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    38a0:	movw	r0, #65236	; 0xfed4
    38a4:	movw	r1, #0
    38a8:	movt	r0, #65535	; 0xffff
    38ac:	movt	r1, #0
    38b0:	bl	0 <coda_set_error>
    38b4:	b	3894 <coda_ascii_cursor_read_int8_partial_array+0xdc>
    38b8:	movw	r0, #0
    38bc:	movw	r1, #0
    38c0:	movw	r3, #0
    38c4:	movw	r2, #1684	; 0x694
    38c8:	movt	r0, #0
    38cc:	movt	r1, #0
    38d0:	movt	r3, #0
    38d4:	bl	0 <__assert_fail>

000038d8 <coda_ascii_cursor_read_uint8_partial_array>:
    38d8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    38dc:	add	fp, sp, #28
    38e0:	sub	sp, sp, #532	; 0x214
    38e4:	mov	r6, r1
    38e8:	mov	r1, r0
    38ec:	ldr	r0, [r0, #4]
    38f0:	mov	r5, r2
    38f4:	mov	sl, r3
    38f8:	add	r0, r1, r0, lsl #4
    38fc:	ldr	r0, [r0, #-8]
    3900:	ldr	r2, [r0]
    3904:	cmp	r2, #99	; 0x63
    3908:	ldrhi	r0, [r0, #4]
    390c:	ldr	r0, [r0, #40]	; 0x28
    3910:	ldr	r0, [r0]
    3914:	cmp	r0, #0
    3918:	bne	39d0 <coda_ascii_cursor_read_uint8_partial_array+0xf8>
    391c:	mov	r0, sp
    3920:	mov	r2, #520	; 0x208
    3924:	bl	0 <memcpy>
    3928:	cmp	r5, #1
    392c:	blt	39a8 <coda_ascii_cursor_read_uint8_partial_array+0xd0>
    3930:	mov	r0, sp
    3934:	mov	r1, r6
    3938:	bl	0 <coda_cursor_goto_array_element_by_index>
    393c:	mvn	r9, #0
    3940:	cmp	r0, #0
    3944:	bne	39ac <coda_ascii_cursor_read_uint8_partial_array+0xd4>
    3948:	sub	r6, r5, #1
    394c:	mov	r4, #0
    3950:	mov	r7, sp
    3954:	sub	r8, fp, #40	; 0x28
    3958:	mov	r0, r7
    395c:	mov	r1, r8
    3960:	bl	1b80 <coda_ascii_cursor_read_uint64>
    3964:	cmp	r0, #0
    3968:	bne	39ac <coda_ascii_cursor_read_uint8_partial_array+0xd4>
    396c:	ldr	r0, [fp, #-40]	; 0xffffffd8
    3970:	ldr	r1, [fp, #-36]	; 0xffffffdc
    3974:	subs	r2, r0, #256	; 0x100
    3978:	sbcs	r1, r1, #0
    397c:	bcs	39b8 <coda_ascii_cursor_read_uint8_partial_array+0xe0>
    3980:	cmp	r4, r6
    3984:	strb	r0, [sl, r4]
    3988:	bge	399c <coda_ascii_cursor_read_uint8_partial_array+0xc4>
    398c:	mov	r0, r7
    3990:	bl	0 <coda_cursor_goto_next_array_element>
    3994:	cmp	r0, #0
    3998:	bne	39ac <coda_ascii_cursor_read_uint8_partial_array+0xd4>
    399c:	add	r4, r4, #1
    39a0:	cmp	r4, r5
    39a4:	blt	3958 <coda_ascii_cursor_read_uint8_partial_array+0x80>
    39a8:	mov	r9, #0
    39ac:	mov	r0, r9
    39b0:	sub	sp, fp, #28
    39b4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    39b8:	movw	r0, #65236	; 0xfed4
    39bc:	movw	r1, #0
    39c0:	movt	r0, #65535	; 0xffff
    39c4:	movt	r1, #0
    39c8:	bl	0 <coda_set_error>
    39cc:	b	39ac <coda_ascii_cursor_read_uint8_partial_array+0xd4>
    39d0:	movw	r0, #0
    39d4:	movw	r1, #0
    39d8:	movw	r3, #0
    39dc:	movw	r2, #1693	; 0x69d
    39e0:	movt	r0, #0
    39e4:	movt	r1, #0
    39e8:	movt	r3, #0
    39ec:	bl	0 <__assert_fail>

000039f0 <coda_ascii_cursor_read_int16_partial_array>:
    39f0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    39f4:	add	fp, sp, #28
    39f8:	sub	sp, sp, #532	; 0x214
    39fc:	mov	r6, r1
    3a00:	mov	r1, r0
    3a04:	ldr	r0, [r0, #4]
    3a08:	mov	r5, r2
    3a0c:	mov	r4, r3
    3a10:	add	r0, r1, r0, lsl #4
    3a14:	ldr	r0, [r0, #-8]
    3a18:	ldr	r2, [r0]
    3a1c:	cmp	r2, #99	; 0x63
    3a20:	ldrhi	r0, [r0, #4]
    3a24:	ldr	r0, [r0, #40]	; 0x28
    3a28:	ldr	r0, [r0]
    3a2c:	cmp	r0, #0
    3a30:	bne	3af4 <coda_ascii_cursor_read_int16_partial_array+0x104>
    3a34:	mov	r0, sp
    3a38:	mov	r2, #520	; 0x208
    3a3c:	bl	0 <memcpy>
    3a40:	cmp	r5, #1
    3a44:	blt	3acc <coda_ascii_cursor_read_int16_partial_array+0xdc>
    3a48:	mov	r0, sp
    3a4c:	mov	r1, r6
    3a50:	bl	0 <coda_cursor_goto_array_element_by_index>
    3a54:	mvn	r9, #0
    3a58:	cmp	r0, #0
    3a5c:	bne	3ad0 <coda_ascii_cursor_read_int16_partial_array+0xe0>
    3a60:	sub	r6, r5, #1
    3a64:	mov	r7, #0
    3a68:	mov	sl, sp
    3a6c:	sub	r8, fp, #40	; 0x28
    3a70:	mov	r0, sl
    3a74:	mov	r1, r8
    3a78:	bl	1930 <coda_ascii_cursor_read_int64>
    3a7c:	cmp	r0, #0
    3a80:	bne	3ad0 <coda_ascii_cursor_read_int16_partial_array+0xe0>
    3a84:	ldr	r0, [fp, #-40]	; 0xffffffd8
    3a88:	ldr	r1, [fp, #-36]	; 0xffffffdc
    3a8c:	adds	r2, r0, #32768	; 0x8000
    3a90:	adc	r1, r1, #0
    3a94:	subs	r2, r2, #65536	; 0x10000
    3a98:	sbcs	r1, r1, #0
    3a9c:	bcs	3adc <coda_ascii_cursor_read_int16_partial_array+0xec>
    3aa0:	cmp	r7, r6
    3aa4:	strh	r0, [r4]
    3aa8:	bge	3abc <coda_ascii_cursor_read_int16_partial_array+0xcc>
    3aac:	mov	r0, sl
    3ab0:	bl	0 <coda_cursor_goto_next_array_element>
    3ab4:	cmp	r0, #0
    3ab8:	bne	3ad0 <coda_ascii_cursor_read_int16_partial_array+0xe0>
    3abc:	add	r7, r7, #1
    3ac0:	add	r4, r4, #2
    3ac4:	cmp	r7, r5
    3ac8:	blt	3a70 <coda_ascii_cursor_read_int16_partial_array+0x80>
    3acc:	mov	r9, #0
    3ad0:	mov	r0, r9
    3ad4:	sub	sp, fp, #28
    3ad8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3adc:	movw	r0, #65236	; 0xfed4
    3ae0:	movw	r1, #0
    3ae4:	movt	r0, #65535	; 0xffff
    3ae8:	movt	r1, #0
    3aec:	bl	0 <coda_set_error>
    3af0:	b	3ad0 <coda_ascii_cursor_read_int16_partial_array+0xe0>
    3af4:	movw	r0, #0
    3af8:	movw	r1, #0
    3afc:	movw	r3, #0
    3b00:	movw	r2, #1702	; 0x6a6
    3b04:	movt	r0, #0
    3b08:	movt	r1, #0
    3b0c:	movt	r3, #0
    3b10:	bl	0 <__assert_fail>

00003b14 <coda_ascii_cursor_read_uint16_partial_array>:
    3b14:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3b18:	add	fp, sp, #28
    3b1c:	sub	sp, sp, #532	; 0x214
    3b20:	mov	r6, r1
    3b24:	mov	r1, r0
    3b28:	ldr	r0, [r0, #4]
    3b2c:	mov	r5, r2
    3b30:	mov	r4, r3
    3b34:	add	r0, r1, r0, lsl #4
    3b38:	ldr	r0, [r0, #-8]
    3b3c:	ldr	r2, [r0]
    3b40:	cmp	r2, #99	; 0x63
    3b44:	ldrhi	r0, [r0, #4]
    3b48:	ldr	r0, [r0, #40]	; 0x28
    3b4c:	ldr	r0, [r0]
    3b50:	cmp	r0, #0
    3b54:	bne	3c10 <coda_ascii_cursor_read_uint16_partial_array+0xfc>
    3b58:	mov	r0, sp
    3b5c:	mov	r2, #520	; 0x208
    3b60:	bl	0 <memcpy>
    3b64:	cmp	r5, #1
    3b68:	blt	3be8 <coda_ascii_cursor_read_uint16_partial_array+0xd4>
    3b6c:	mov	r0, sp
    3b70:	mov	r1, r6
    3b74:	bl	0 <coda_cursor_goto_array_element_by_index>
    3b78:	mvn	r9, #0
    3b7c:	cmp	r0, #0
    3b80:	bne	3bec <coda_ascii_cursor_read_uint16_partial_array+0xd8>
    3b84:	sub	r6, r5, #1
    3b88:	mov	r7, #0
    3b8c:	mov	sl, sp
    3b90:	sub	r8, fp, #40	; 0x28
    3b94:	mov	r0, sl
    3b98:	mov	r1, r8
    3b9c:	bl	1b80 <coda_ascii_cursor_read_uint64>
    3ba0:	cmp	r0, #0
    3ba4:	bne	3bec <coda_ascii_cursor_read_uint16_partial_array+0xd8>
    3ba8:	ldr	r0, [fp, #-40]	; 0xffffffd8
    3bac:	ldr	r1, [fp, #-36]	; 0xffffffdc
    3bb0:	subs	r2, r0, #65536	; 0x10000
    3bb4:	sbcs	r1, r1, #0
    3bb8:	bcs	3bf8 <coda_ascii_cursor_read_uint16_partial_array+0xe4>
    3bbc:	cmp	r7, r6
    3bc0:	strh	r0, [r4]
    3bc4:	bge	3bd8 <coda_ascii_cursor_read_uint16_partial_array+0xc4>
    3bc8:	mov	r0, sl
    3bcc:	bl	0 <coda_cursor_goto_next_array_element>
    3bd0:	cmp	r0, #0
    3bd4:	bne	3bec <coda_ascii_cursor_read_uint16_partial_array+0xd8>
    3bd8:	add	r7, r7, #1
    3bdc:	add	r4, r4, #2
    3be0:	cmp	r7, r5
    3be4:	blt	3b94 <coda_ascii_cursor_read_uint16_partial_array+0x80>
    3be8:	mov	r9, #0
    3bec:	mov	r0, r9
    3bf0:	sub	sp, fp, #28
    3bf4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3bf8:	movw	r0, #65236	; 0xfed4
    3bfc:	movw	r1, #0
    3c00:	movt	r0, #65535	; 0xffff
    3c04:	movt	r1, #0
    3c08:	bl	0 <coda_set_error>
    3c0c:	b	3bec <coda_ascii_cursor_read_uint16_partial_array+0xd8>
    3c10:	movw	r0, #0
    3c14:	movw	r1, #0
    3c18:	movw	r3, #0
    3c1c:	movw	r2, #1711	; 0x6af
    3c20:	movt	r0, #0
    3c24:	movt	r1, #0
    3c28:	movt	r3, #0
    3c2c:	bl	0 <__assert_fail>

00003c30 <coda_ascii_cursor_read_int32_partial_array>:
    3c30:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3c34:	add	fp, sp, #28
    3c38:	sub	sp, sp, #532	; 0x214
    3c3c:	mov	r6, r1
    3c40:	mov	r1, r0
    3c44:	ldr	r0, [r0, #4]
    3c48:	mov	r5, r2
    3c4c:	mov	sl, r3
    3c50:	add	r0, r1, r0, lsl #4
    3c54:	ldr	r0, [r0, #-8]
    3c58:	ldr	r2, [r0]
    3c5c:	cmp	r2, #99	; 0x63
    3c60:	ldrhi	r0, [r0, #4]
    3c64:	ldr	r0, [r0, #40]	; 0x28
    3c68:	ldr	r0, [r0]
    3c6c:	cmp	r0, #0
    3c70:	bne	3d28 <coda_ascii_cursor_read_int32_partial_array+0xf8>
    3c74:	mov	r0, sp
    3c78:	mov	r2, #520	; 0x208
    3c7c:	bl	0 <memcpy>
    3c80:	cmp	r5, #1
    3c84:	blt	3d00 <coda_ascii_cursor_read_int32_partial_array+0xd0>
    3c88:	mov	r0, sp
    3c8c:	mov	r1, r6
    3c90:	bl	0 <coda_cursor_goto_array_element_by_index>
    3c94:	mvn	r9, #0
    3c98:	cmp	r0, #0
    3c9c:	bne	3d04 <coda_ascii_cursor_read_int32_partial_array+0xd4>
    3ca0:	sub	r6, r5, #1
    3ca4:	mov	r4, #0
    3ca8:	mov	r7, sp
    3cac:	sub	r8, fp, #40	; 0x28
    3cb0:	mov	r0, r7
    3cb4:	mov	r1, r8
    3cb8:	bl	1930 <coda_ascii_cursor_read_int64>
    3cbc:	cmp	r0, #0
    3cc0:	bne	3d04 <coda_ascii_cursor_read_int32_partial_array+0xd4>
    3cc4:	ldr	r0, [fp, #-40]	; 0xffffffd8
    3cc8:	ldr	r1, [fp, #-36]	; 0xffffffdc
    3ccc:	adds	r2, r0, #-2147483648	; 0x80000000
    3cd0:	adcs	r1, r1, #0
    3cd4:	bne	3d10 <coda_ascii_cursor_read_int32_partial_array+0xe0>
    3cd8:	cmp	r4, r6
    3cdc:	str	r0, [sl, r4, lsl #2]
    3ce0:	bge	3cf4 <coda_ascii_cursor_read_int32_partial_array+0xc4>
    3ce4:	mov	r0, r7
    3ce8:	bl	0 <coda_cursor_goto_next_array_element>
    3cec:	cmp	r0, #0
    3cf0:	bne	3d04 <coda_ascii_cursor_read_int32_partial_array+0xd4>
    3cf4:	add	r4, r4, #1
    3cf8:	cmp	r4, r5
    3cfc:	blt	3cb0 <coda_ascii_cursor_read_int32_partial_array+0x80>
    3d00:	mov	r9, #0
    3d04:	mov	r0, r9
    3d08:	sub	sp, fp, #28
    3d0c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3d10:	movw	r0, #65236	; 0xfed4
    3d14:	movw	r1, #0
    3d18:	movt	r0, #65535	; 0xffff
    3d1c:	movt	r1, #0
    3d20:	bl	0 <coda_set_error>
    3d24:	b	3d04 <coda_ascii_cursor_read_int32_partial_array+0xd4>
    3d28:	movw	r0, #0
    3d2c:	movw	r1, #0
    3d30:	movw	r3, #0
    3d34:	movw	r2, #1720	; 0x6b8
    3d38:	movt	r0, #0
    3d3c:	movt	r1, #0
    3d40:	movt	r3, #0
    3d44:	bl	0 <__assert_fail>

00003d48 <coda_ascii_cursor_read_uint32_partial_array>:
    3d48:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3d4c:	add	fp, sp, #28
    3d50:	sub	sp, sp, #532	; 0x214
    3d54:	mov	r6, r1
    3d58:	mov	r1, r0
    3d5c:	ldr	r0, [r0, #4]
    3d60:	mov	r5, r2
    3d64:	mov	sl, r3
    3d68:	add	r0, r1, r0, lsl #4
    3d6c:	ldr	r0, [r0, #-8]
    3d70:	ldr	r2, [r0]
    3d74:	cmp	r2, #99	; 0x63
    3d78:	ldrhi	r0, [r0, #4]
    3d7c:	ldr	r0, [r0, #40]	; 0x28
    3d80:	ldr	r0, [r0]
    3d84:	cmp	r0, #0
    3d88:	bne	3e3c <coda_ascii_cursor_read_uint32_partial_array+0xf4>
    3d8c:	mov	r0, sp
    3d90:	mov	r2, #520	; 0x208
    3d94:	bl	0 <memcpy>
    3d98:	cmp	r5, #1
    3d9c:	blt	3e14 <coda_ascii_cursor_read_uint32_partial_array+0xcc>
    3da0:	mov	r0, sp
    3da4:	mov	r1, r6
    3da8:	bl	0 <coda_cursor_goto_array_element_by_index>
    3dac:	mvn	r9, #0
    3db0:	cmp	r0, #0
    3db4:	bne	3e18 <coda_ascii_cursor_read_uint32_partial_array+0xd0>
    3db8:	sub	r6, r5, #1
    3dbc:	mov	r4, #0
    3dc0:	mov	r7, sp
    3dc4:	sub	r8, fp, #40	; 0x28
    3dc8:	mov	r0, r7
    3dcc:	mov	r1, r8
    3dd0:	bl	1b80 <coda_ascii_cursor_read_uint64>
    3dd4:	cmp	r0, #0
    3dd8:	bne	3e18 <coda_ascii_cursor_read_uint32_partial_array+0xd0>
    3ddc:	ldr	r0, [fp, #-36]	; 0xffffffdc
    3de0:	cmp	r0, #0
    3de4:	bne	3e24 <coda_ascii_cursor_read_uint32_partial_array+0xdc>
    3de8:	ldr	r0, [fp, #-40]	; 0xffffffd8
    3dec:	cmp	r4, r6
    3df0:	str	r0, [sl, r4, lsl #2]
    3df4:	bge	3e08 <coda_ascii_cursor_read_uint32_partial_array+0xc0>
    3df8:	mov	r0, r7
    3dfc:	bl	0 <coda_cursor_goto_next_array_element>
    3e00:	cmp	r0, #0
    3e04:	bne	3e18 <coda_ascii_cursor_read_uint32_partial_array+0xd0>
    3e08:	add	r4, r4, #1
    3e0c:	cmp	r4, r5
    3e10:	blt	3dc8 <coda_ascii_cursor_read_uint32_partial_array+0x80>
    3e14:	mov	r9, #0
    3e18:	mov	r0, r9
    3e1c:	sub	sp, fp, #28
    3e20:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3e24:	movw	r0, #65236	; 0xfed4
    3e28:	movw	r1, #0
    3e2c:	movt	r0, #65535	; 0xffff
    3e30:	movt	r1, #0
    3e34:	bl	0 <coda_set_error>
    3e38:	b	3e18 <coda_ascii_cursor_read_uint32_partial_array+0xd0>
    3e3c:	movw	r0, #0
    3e40:	movw	r1, #0
    3e44:	movw	r3, #0
    3e48:	movw	r2, #1729	; 0x6c1
    3e4c:	movt	r0, #0
    3e50:	movt	r1, #0
    3e54:	movt	r3, #0
    3e58:	bl	0 <__assert_fail>

00003e5c <coda_ascii_cursor_read_int64_partial_array>:
    3e5c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
    3e60:	add	fp, sp, #24
    3e64:	sub	sp, sp, #528	; 0x210
    3e68:	mov	r6, r1
    3e6c:	mov	r1, r0
    3e70:	ldr	r0, [r0, #4]
    3e74:	mov	r5, r2
    3e78:	mov	r4, r3
    3e7c:	add	r0, r1, r0, lsl #4
    3e80:	ldr	r0, [r0, #-8]
    3e84:	ldr	r2, [r0]
    3e88:	cmp	r2, #99	; 0x63
    3e8c:	ldrhi	r0, [r0, #4]
    3e90:	ldr	r0, [r0, #40]	; 0x28
    3e94:	ldr	r0, [r0]
    3e98:	cmp	r0, #0
    3e9c:	bne	3f24 <coda_ascii_cursor_read_int64_partial_array+0xc8>
    3ea0:	mov	r0, sp
    3ea4:	mov	r2, #520	; 0x208
    3ea8:	bl	0 <memcpy>
    3eac:	cmp	r5, #1
    3eb0:	blt	3f14 <coda_ascii_cursor_read_int64_partial_array+0xb8>
    3eb4:	mov	r0, sp
    3eb8:	mov	r1, r6
    3ebc:	bl	0 <coda_cursor_goto_array_element_by_index>
    3ec0:	mvn	r8, #0
    3ec4:	cmp	r0, #0
    3ec8:	bne	3f18 <coda_ascii_cursor_read_int64_partial_array+0xbc>
    3ecc:	sub	r6, r5, #1
    3ed0:	mov	r7, #0
    3ed4:	mov	r9, sp
    3ed8:	mov	r0, r9
    3edc:	mov	r1, r4
    3ee0:	bl	1930 <coda_ascii_cursor_read_int64>
    3ee4:	cmp	r0, #0
    3ee8:	bne	3f18 <coda_ascii_cursor_read_int64_partial_array+0xbc>
    3eec:	cmp	r7, r6
    3ef0:	bge	3f04 <coda_ascii_cursor_read_int64_partial_array+0xa8>
    3ef4:	mov	r0, r9
    3ef8:	bl	0 <coda_cursor_goto_next_array_element>
    3efc:	cmp	r0, #0
    3f00:	bne	3f18 <coda_ascii_cursor_read_int64_partial_array+0xbc>
    3f04:	add	r7, r7, #1
    3f08:	add	r4, r4, #8
    3f0c:	cmp	r7, r5
    3f10:	blt	3ed8 <coda_ascii_cursor_read_int64_partial_array+0x7c>
    3f14:	mov	r8, #0
    3f18:	mov	r0, r8
    3f1c:	sub	sp, fp, #24
    3f20:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
    3f24:	movw	r0, #0
    3f28:	movw	r1, #0
    3f2c:	movw	r3, #0
    3f30:	movw	r2, #1738	; 0x6ca
    3f34:	movt	r0, #0
    3f38:	movt	r1, #0
    3f3c:	movt	r3, #0
    3f40:	bl	0 <__assert_fail>

00003f44 <coda_ascii_cursor_read_uint64_partial_array>:
    3f44:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
    3f48:	add	fp, sp, #24
    3f4c:	sub	sp, sp, #528	; 0x210
    3f50:	mov	r6, r1
    3f54:	mov	r1, r0
    3f58:	ldr	r0, [r0, #4]
    3f5c:	mov	r5, r2
    3f60:	mov	r4, r3
    3f64:	add	r0, r1, r0, lsl #4
    3f68:	ldr	r0, [r0, #-8]
    3f6c:	ldr	r2, [r0]
    3f70:	cmp	r2, #99	; 0x63
    3f74:	ldrhi	r0, [r0, #4]
    3f78:	ldr	r0, [r0, #40]	; 0x28
    3f7c:	ldr	r0, [r0]
    3f80:	cmp	r0, #0
    3f84:	bne	400c <coda_ascii_cursor_read_uint64_partial_array+0xc8>
    3f88:	mov	r0, sp
    3f8c:	mov	r2, #520	; 0x208
    3f90:	bl	0 <memcpy>
    3f94:	cmp	r5, #1
    3f98:	blt	3ffc <coda_ascii_cursor_read_uint64_partial_array+0xb8>
    3f9c:	mov	r0, sp
    3fa0:	mov	r1, r6
    3fa4:	bl	0 <coda_cursor_goto_array_element_by_index>
    3fa8:	mvn	r8, #0
    3fac:	cmp	r0, #0
    3fb0:	bne	4000 <coda_ascii_cursor_read_uint64_partial_array+0xbc>
    3fb4:	sub	r6, r5, #1
    3fb8:	mov	r7, #0
    3fbc:	mov	r9, sp
    3fc0:	mov	r0, r9
    3fc4:	mov	r1, r4
    3fc8:	bl	1b80 <coda_ascii_cursor_read_uint64>
    3fcc:	cmp	r0, #0
    3fd0:	bne	4000 <coda_ascii_cursor_read_uint64_partial_array+0xbc>
    3fd4:	cmp	r7, r6
    3fd8:	bge	3fec <coda_ascii_cursor_read_uint64_partial_array+0xa8>
    3fdc:	mov	r0, r9
    3fe0:	bl	0 <coda_cursor_goto_next_array_element>
    3fe4:	cmp	r0, #0
    3fe8:	bne	4000 <coda_ascii_cursor_read_uint64_partial_array+0xbc>
    3fec:	add	r7, r7, #1
    3ff0:	add	r4, r4, #8
    3ff4:	cmp	r7, r5
    3ff8:	blt	3fc0 <coda_ascii_cursor_read_uint64_partial_array+0x7c>
    3ffc:	mov	r8, #0
    4000:	mov	r0, r8
    4004:	sub	sp, fp, #24
    4008:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
    400c:	movw	r0, #0
    4010:	movw	r1, #0
    4014:	movw	r3, #0
    4018:	movw	r2, #1747	; 0x6d3
    401c:	movt	r0, #0
    4020:	movt	r1, #0
    4024:	movt	r3, #0
    4028:	bl	0 <__assert_fail>

0000402c <coda_ascii_cursor_read_float_partial_array>:
    402c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4030:	add	fp, sp, #28
    4034:	sub	sp, sp, #532	; 0x214
    4038:	mov	r6, r1
    403c:	mov	r1, r0
    4040:	ldr	r0, [r0, #4]
    4044:	mov	r5, r2
    4048:	mov	r4, r3
    404c:	add	r0, r1, r0, lsl #4
    4050:	ldr	r0, [r0, #-8]
    4054:	ldr	r2, [r0]
    4058:	cmp	r2, #99	; 0x63
    405c:	ldrhi	r0, [r0, #4]
    4060:	ldr	r0, [r0, #40]	; 0x28
    4064:	ldr	r0, [r0]
    4068:	cmp	r0, #0
    406c:	bne	4104 <coda_ascii_cursor_read_float_partial_array+0xd8>
    4070:	mov	r0, sp
    4074:	mov	r2, #520	; 0x208
    4078:	bl	0 <memcpy>
    407c:	cmp	r5, #1
    4080:	blt	40f4 <coda_ascii_cursor_read_float_partial_array+0xc8>
    4084:	mov	r0, sp
    4088:	mov	r1, r6
    408c:	bl	0 <coda_cursor_goto_array_element_by_index>
    4090:	mvn	r8, #0
    4094:	cmp	r0, #0
    4098:	bne	40f8 <coda_ascii_cursor_read_float_partial_array+0xcc>
    409c:	sub	r6, r5, #1
    40a0:	mov	r7, #0
    40a4:	mov	sl, sp
    40a8:	sub	r9, fp, #40	; 0x28
    40ac:	mov	r0, sl
    40b0:	mov	r1, r9
    40b4:	bl	2020 <coda_ascii_cursor_read_double>
    40b8:	cmp	r0, #0
    40bc:	bne	40f8 <coda_ascii_cursor_read_float_partial_array+0xcc>
    40c0:	vldr	d16, [fp, #-40]	; 0xffffffd8
    40c4:	cmp	r7, r6
    40c8:	vcvt.f32.f64	s0, d16
    40cc:	vstr	s0, [r4]
    40d0:	bge	40e4 <coda_ascii_cursor_read_float_partial_array+0xb8>
    40d4:	mov	r0, sl
    40d8:	bl	0 <coda_cursor_goto_next_array_element>
    40dc:	cmp	r0, #0
    40e0:	bne	40f8 <coda_ascii_cursor_read_float_partial_array+0xcc>
    40e4:	add	r7, r7, #1
    40e8:	add	r4, r4, #4
    40ec:	cmp	r7, r5
    40f0:	blt	40ac <coda_ascii_cursor_read_float_partial_array+0x80>
    40f4:	mov	r8, #0
    40f8:	mov	r0, r8
    40fc:	sub	sp, fp, #28
    4100:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4104:	movw	r0, #0
    4108:	movw	r1, #0
    410c:	movw	r3, #0
    4110:	movw	r2, #1756	; 0x6dc
    4114:	movt	r0, #0
    4118:	movt	r1, #0
    411c:	movt	r3, #0
    4120:	bl	0 <__assert_fail>

00004124 <coda_ascii_cursor_read_double_partial_array>:
    4124:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
    4128:	add	fp, sp, #24
    412c:	sub	sp, sp, #528	; 0x210
    4130:	mov	r6, r1
    4134:	mov	r1, r0
    4138:	ldr	r0, [r0, #4]
    413c:	mov	r5, r2
    4140:	mov	r4, r3
    4144:	add	r0, r1, r0, lsl #4
    4148:	ldr	r0, [r0, #-8]
    414c:	ldr	r2, [r0]
    4150:	cmp	r2, #99	; 0x63
    4154:	ldrhi	r0, [r0, #4]
    4158:	ldr	r0, [r0, #40]	; 0x28
    415c:	ldr	r0, [r0]
    4160:	cmp	r0, #0
    4164:	bne	41ec <coda_ascii_cursor_read_double_partial_array+0xc8>
    4168:	mov	r0, sp
    416c:	mov	r2, #520	; 0x208
    4170:	bl	0 <memcpy>
    4174:	cmp	r5, #1
    4178:	blt	41dc <coda_ascii_cursor_read_double_partial_array+0xb8>
    417c:	mov	r0, sp
    4180:	mov	r1, r6
    4184:	bl	0 <coda_cursor_goto_array_element_by_index>
    4188:	mvn	r8, #0
    418c:	cmp	r0, #0
    4190:	bne	41e0 <coda_ascii_cursor_read_double_partial_array+0xbc>
    4194:	sub	r6, r5, #1
    4198:	mov	r7, #0
    419c:	mov	r9, sp
    41a0:	mov	r0, r9
    41a4:	mov	r1, r4
    41a8:	bl	2020 <coda_ascii_cursor_read_double>
    41ac:	cmp	r0, #0
    41b0:	bne	41e0 <coda_ascii_cursor_read_double_partial_array+0xbc>
    41b4:	cmp	r7, r6
    41b8:	bge	41cc <coda_ascii_cursor_read_double_partial_array+0xa8>
    41bc:	mov	r0, r9
    41c0:	bl	0 <coda_cursor_goto_next_array_element>
    41c4:	cmp	r0, #0
    41c8:	bne	41e0 <coda_ascii_cursor_read_double_partial_array+0xbc>
    41cc:	add	r7, r7, #1
    41d0:	add	r4, r4, #8
    41d4:	cmp	r7, r5
    41d8:	blt	41a0 <coda_ascii_cursor_read_double_partial_array+0x7c>
    41dc:	mov	r8, #0
    41e0:	mov	r0, r8
    41e4:	sub	sp, fp, #24
    41e8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
    41ec:	movw	r0, #0
    41f0:	movw	r1, #0
    41f4:	movw	r3, #0
    41f8:	movw	r2, #1765	; 0x6e5
    41fc:	movt	r0, #0
    4200:	movt	r1, #0
    4204:	movt	r3, #0
    4208:	bl	0 <__assert_fail>

0000420c <coda_ascii_cursor_read_char_partial_array>:
    420c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
    4210:	add	fp, sp, #24
    4214:	sub	sp, sp, #528	; 0x210
    4218:	mov	r6, r1
    421c:	mov	r1, r0
    4220:	ldr	r0, [r0, #4]
    4224:	mov	r5, r2
    4228:	mov	r9, r3
    422c:	add	r0, r1, r0, lsl #4
    4230:	ldr	r0, [r0, #-8]
    4234:	ldr	r2, [r0]
    4238:	cmp	r2, #99	; 0x63
    423c:	ldrhi	r0, [r0, #4]
    4240:	ldr	r0, [r0, #40]	; 0x28
    4244:	ldr	r0, [r0]
    4248:	cmp	r0, #0
    424c:	bne	42d0 <coda_ascii_cursor_read_char_partial_array+0xc4>
    4250:	mov	r0, sp
    4254:	mov	r2, #520	; 0x208
    4258:	bl	0 <memcpy>
    425c:	cmp	r5, #1
    4260:	blt	42c0 <coda_ascii_cursor_read_char_partial_array+0xb4>
    4264:	mov	r0, sp
    4268:	mov	r1, r6
    426c:	bl	0 <coda_cursor_goto_array_element_by_index>
    4270:	mvn	r8, #0
    4274:	cmp	r0, #0
    4278:	bne	42c4 <coda_ascii_cursor_read_char_partial_array+0xb8>
    427c:	sub	r6, r5, #1
    4280:	mov	r4, #0
    4284:	mov	r7, sp
    4288:	add	r1, r9, r4
    428c:	mov	r0, r7
    4290:	bl	22b8 <coda_ascii_cursor_read_char>
    4294:	cmp	r0, #0
    4298:	bne	42c4 <coda_ascii_cursor_read_char_partial_array+0xb8>
    429c:	cmp	r4, r6
    42a0:	bge	42b4 <coda_ascii_cursor_read_char_partial_array+0xa8>
    42a4:	mov	r0, r7
    42a8:	bl	0 <coda_cursor_goto_next_array_element>
    42ac:	cmp	r0, #0
    42b0:	bne	42c4 <coda_ascii_cursor_read_char_partial_array+0xb8>
    42b4:	add	r4, r4, #1
    42b8:	cmp	r4, r5
    42bc:	blt	4288 <coda_ascii_cursor_read_char_partial_array+0x7c>
    42c0:	mov	r8, #0
    42c4:	mov	r0, r8
    42c8:	sub	sp, fp, #24
    42cc:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
    42d0:	movw	r0, #0
    42d4:	movw	r1, #0
    42d8:	movw	r3, #0
    42dc:	movw	r2, #1774	; 0x6ee
    42e0:	movt	r0, #0
    42e4:	movt	r1, #0
    42e8:	movt	r3, #0
    42ec:	bl	0 <__assert_fail>
