
../compcert-repos/stcorp-coda-3a25f25/CMakeFiles/codadd.dir/tools/codadd/codadd-list.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <generate_list>:
   0:	push	{fp, lr}
   4:	mov	fp, sp
   8:	sub	sp, sp, #16
   c:	str	r0, [fp, #-4]
  10:	str	r1, [sp, #8]
  14:	str	r2, [sp, #4]
  18:	ldr	r0, [sp, #4]
  1c:	cmp	r0, #0
  20:	bge	34 <generate_list+0x34>
  24:	ldr	r0, [fp, #-4]
  28:	ldr	r1, [sp, #8]
  2c:	bl	4c <generate_product_list>
  30:	b	44 <generate_list+0x44>
  34:	ldr	r0, [fp, #-4]
  38:	ldr	r1, [sp, #8]
  3c:	ldr	r2, [sp, #4]
  40:	bl	338 <generate_field_list>
  44:	mov	sp, fp
  48:	pop	{fp, pc}

0000004c <generate_product_list>:
  4c:	push	{fp, lr}
  50:	mov	fp, sp
  54:	sub	sp, sp, #96	; 0x60
  58:	str	r0, [fp, #-4]
  5c:	str	r1, [fp, #-8]
  60:	movw	r0, #0
  64:	str	r0, [fp, #-12]
  68:	ldr	r0, [fp, #-12]
  6c:	ldr	r1, [pc, #700]	; 330 <generate_product_list+0x2e4>
  70:	ldr	r1, [pc, r1]
  74:	str	r0, [fp, #-36]	; 0xffffffdc
  78:	str	r1, [fp, #-40]	; 0xffffffd8
  7c:	bl	0 <__aeabi_read_tp>
  80:	ldr	r1, [fp, #-40]	; 0xffffffd8
  84:	ldr	r0, [r0, r1]
  88:	ldr	r0, [r0]
  8c:	ldr	r1, [fp, #-36]	; 0xffffffdc
  90:	cmp	r1, r0
  94:	bge	328 <generate_product_list+0x2dc>
  98:	ldr	r0, [pc, #660]	; 334 <generate_product_list+0x2e8>
  9c:	ldr	r0, [pc, r0]
  a0:	str	r0, [fp, #-44]	; 0xffffffd4
  a4:	bl	0 <__aeabi_read_tp>
  a8:	ldr	ip, [fp, #-44]	; 0xffffffd4
  ac:	ldr	r0, [r0, ip]
  b0:	ldr	r0, [r0, #4]
  b4:	ldr	ip, [fp, #-12]
  b8:	add	r0, r0, ip, lsl #2
  bc:	ldr	r0, [r0]
  c0:	str	r0, [fp, #-16]
  c4:	ldr	r0, [fp, #-4]
  c8:	movw	ip, #0
  cc:	cmp	r0, ip
  d0:	beq	f0 <generate_product_list+0xa4>
  d4:	ldr	r0, [fp, #-16]
  d8:	ldr	r0, [r0]
  dc:	ldr	r1, [fp, #-4]
  e0:	bl	0 <strcmp>
  e4:	cmp	r0, #0
  e8:	beq	f0 <generate_product_list+0xa4>
  ec:	b	318 <generate_product_list+0x2cc>
  f0:	movw	r0, #0
  f4:	str	r0, [fp, #-20]	; 0xffffffec
  f8:	ldr	r0, [fp, #-20]	; 0xffffffec
  fc:	ldr	r1, [fp, #-16]
 100:	ldr	r1, [r1, #28]
 104:	cmp	r0, r1
 108:	bge	314 <generate_product_list+0x2c8>
 10c:	ldr	r0, [fp, #-16]
 110:	ldr	r0, [r0, #32]
 114:	ldr	r1, [fp, #-20]	; 0xffffffec
 118:	add	r0, r0, r1, lsl #2
 11c:	ldr	r0, [r0]
 120:	str	r0, [fp, #-24]	; 0xffffffe8
 124:	ldr	r0, [fp, #-8]
 128:	movw	r1, #0
 12c:	cmp	r0, r1
 130:	beq	150 <generate_product_list+0x104>
 134:	ldr	r0, [fp, #-24]	; 0xffffffe8
 138:	ldr	r0, [r0]
 13c:	ldr	r1, [fp, #-8]
 140:	bl	0 <strcmp>
 144:	cmp	r0, #0
 148:	beq	150 <generate_product_list+0x104>
 14c:	b	304 <generate_product_list+0x2b8>
 150:	ldr	r0, [fp, #-24]	; 0xffffffe8
 154:	ldr	r0, [r0, #8]
 158:	cmp	r0, #0
 15c:	ble	300 <generate_product_list+0x2b4>
 160:	movw	r0, #0
 164:	str	r0, [fp, #-28]	; 0xffffffe4
 168:	ldr	r0, [fp, #-28]	; 0xffffffe4
 16c:	ldr	r1, [fp, #-24]	; 0xffffffe8
 170:	ldr	r1, [r1, #8]
 174:	cmp	r0, r1
 178:	bge	2fc <generate_product_list+0x2b0>
 17c:	ldr	r0, [fp, #-24]	; 0xffffffe8
 180:	ldr	r0, [r0, #12]
 184:	ldr	r1, [fp, #-28]	; 0xffffffe4
 188:	add	r0, r0, r1, lsl #2
 18c:	ldr	r0, [r0]
 190:	str	r0, [fp, #-32]	; 0xffffffe0
 194:	ldr	r0, [fp, #-16]
 198:	ldr	r1, [r0]
 19c:	movw	r0, #0
 1a0:	movt	r0, #0
 1a4:	ldr	r2, [r0]
 1a8:	ldr	r3, [fp, #-24]	; 0xffffffe8
 1ac:	ldr	r3, [r3]
 1b0:	ldr	r0, [r0]
 1b4:	ldr	ip, [fp, #-32]	; 0xffffffe0
 1b8:	ldr	ip, [ip, #4]
 1bc:	movw	lr, #0
 1c0:	movt	lr, #0
 1c4:	str	r0, [sp, #48]	; 0x30
 1c8:	mov	r0, lr
 1cc:	ldr	lr, [sp, #48]	; 0x30
 1d0:	str	lr, [sp]
 1d4:	str	ip, [sp, #4]
 1d8:	bl	0 <printf>
 1dc:	movw	r1, #0
 1e0:	movt	r1, #0
 1e4:	ldr	r1, [r1]
 1e8:	cmp	r1, #0
 1ec:	str	r0, [sp, #44]	; 0x2c
 1f0:	beq	230 <generate_product_list+0x1e4>
 1f4:	movw	r0, #0
 1f8:	movt	r0, #0
 1fc:	ldr	r1, [r0]
 200:	ldr	r0, [fp, #-32]	; 0xffffffe0
 204:	ldr	r0, [r0]
 208:	str	r1, [sp, #40]	; 0x28
 20c:	bl	0 <coda_type_get_format_name>
 210:	movw	r1, #0
 214:	movt	r1, #0
 218:	str	r0, [sp, #36]	; 0x24
 21c:	mov	r0, r1
 220:	ldr	r1, [sp, #40]	; 0x28
 224:	ldr	r2, [sp, #36]	; 0x24
 228:	bl	0 <printf>
 22c:	str	r0, [sp, #32]
 230:	movw	r0, #0
 234:	movt	r0, #0
 238:	ldr	r0, [r0]
 23c:	cmp	r0, #0
 240:	beq	2dc <generate_product_list+0x290>
 244:	movw	r0, #0
 248:	movt	r0, #0
 24c:	ldr	r1, [r0]
 250:	movw	r0, #0
 254:	movt	r0, #0
 258:	bl	0 <printf>
 25c:	ldr	r1, [fp, #-32]	; 0xffffffe0
 260:	ldr	r1, [r1, #12]
 264:	movw	lr, #0
 268:	cmp	r1, lr
 26c:	str	r0, [sp, #28]
 270:	beq	2d8 <generate_product_list+0x28c>
 274:	movw	r0, #0
 278:	movt	r0, #0
 27c:	ldr	r0, [r0]
 280:	cmp	r0, #0
 284:	beq	298 <generate_product_list+0x24c>
 288:	movw	r0, #0
 28c:	movt	r0, #0
 290:	bl	0 <printf>
 294:	str	r0, [sp, #24]
 298:	ldr	r0, [fp, #-32]	; 0xffffffe0
 29c:	ldr	r1, [r0, #12]
 2a0:	movw	r0, #0
 2a4:	movt	r0, #0
 2a8:	bl	0 <printf>
 2ac:	movw	r1, #0
 2b0:	movt	r1, #0
 2b4:	ldr	r1, [r1]
 2b8:	cmp	r1, #0
 2bc:	str	r0, [sp, #20]
 2c0:	beq	2d4 <generate_product_list+0x288>
 2c4:	movw	r0, #0
 2c8:	movt	r0, #0
 2cc:	bl	0 <printf>
 2d0:	str	r0, [sp, #16]
 2d4:	b	2d8 <generate_product_list+0x28c>
 2d8:	b	2dc <generate_product_list+0x290>
 2dc:	movw	r0, #0
 2e0:	movt	r0, #0
 2e4:	bl	0 <printf>
 2e8:	str	r0, [sp, #12]
 2ec:	ldr	r0, [fp, #-28]	; 0xffffffe4
 2f0:	add	r0, r0, #1
 2f4:	str	r0, [fp, #-28]	; 0xffffffe4
 2f8:	b	168 <generate_product_list+0x11c>
 2fc:	b	300 <generate_product_list+0x2b4>
 300:	b	304 <generate_product_list+0x2b8>
 304:	ldr	r0, [fp, #-20]	; 0xffffffec
 308:	add	r0, r0, #1
 30c:	str	r0, [fp, #-20]	; 0xffffffec
 310:	b	f8 <generate_product_list+0xac>
 314:	b	318 <generate_product_list+0x2cc>
 318:	ldr	r0, [fp, #-12]
 31c:	add	r0, r0, #1
 320:	str	r0, [fp, #-12]
 324:	b	68 <generate_product_list+0x1c>
 328:	mov	sp, fp
 32c:	pop	{fp, pc}
 330:	.word	0x000002b8
 334:	.word	0x00000290

00000338 <generate_field_list>:
 338:	push	{fp, lr}
 33c:	mov	fp, sp
 340:	sub	sp, sp, #72	; 0x48
 344:	str	r0, [fp, #-4]
 348:	str	r1, [fp, #-8]
 34c:	str	r2, [fp, #-12]
 350:	ldr	r0, [fp, #-4]
 354:	bl	0 <coda_data_dictionary_get_product_class>
 358:	str	r0, [fp, #-16]
 35c:	ldr	r0, [fp, #-16]
 360:	movw	r1, #0
 364:	cmp	r0, r1
 368:	bne	3c4 <generate_field_list+0x8c>
 36c:	movw	r0, #0
 370:	movt	r0, #0
 374:	ldr	r0, [r0]
 378:	ldr	r1, [pc, #360]	; 4e8 <generate_field_list+0x1b0>
 37c:	ldr	r1, [pc, r1]
 380:	str	r0, [fp, #-28]	; 0xffffffe4
 384:	str	r1, [fp, #-32]	; 0xffffffe0
 388:	bl	0 <__aeabi_read_tp>
 38c:	ldr	r1, [fp, #-32]	; 0xffffffe0
 390:	ldr	r0, [r0, r1]
 394:	bl	0 <coda_errno_to_string>
 398:	ldr	r1, [fp, #-28]	; 0xffffffe4
 39c:	str	r0, [sp, #36]	; 0x24
 3a0:	mov	r0, r1
 3a4:	movw	r1, #0
 3a8:	movt	r1, #0
 3ac:	ldr	r2, [sp, #36]	; 0x24
 3b0:	bl	0 <fprintf>
 3b4:	movw	r1, #1
 3b8:	str	r0, [sp, #32]
 3bc:	mov	r0, r1
 3c0:	bl	0 <exit>
 3c4:	ldr	r0, [fp, #-16]
 3c8:	ldr	r1, [fp, #-8]
 3cc:	bl	0 <coda_product_class_get_product_type>
 3d0:	str	r0, [fp, #-20]	; 0xffffffec
 3d4:	ldr	r0, [fp, #-20]	; 0xffffffec
 3d8:	movw	r1, #0
 3dc:	cmp	r0, r1
 3e0:	bne	43c <generate_field_list+0x104>
 3e4:	movw	r0, #0
 3e8:	movt	r0, #0
 3ec:	ldr	r0, [r0]
 3f0:	ldr	r1, [pc, #236]	; 4e4 <generate_field_list+0x1ac>
 3f4:	ldr	r1, [pc, r1]
 3f8:	str	r0, [sp, #28]
 3fc:	str	r1, [sp, #24]
 400:	bl	0 <__aeabi_read_tp>
 404:	ldr	r1, [sp, #24]
 408:	ldr	r0, [r0, r1]
 40c:	bl	0 <coda_errno_to_string>
 410:	ldr	r1, [sp, #28]
 414:	str	r0, [sp, #20]
 418:	mov	r0, r1
 41c:	movw	r1, #0
 420:	movt	r1, #0
 424:	ldr	r2, [sp, #20]
 428:	bl	0 <fprintf>
 42c:	movw	r1, #1
 430:	str	r0, [sp, #16]
 434:	mov	r0, r1
 438:	bl	0 <exit>
 43c:	ldr	r0, [fp, #-20]	; 0xffffffec
 440:	ldr	r1, [fp, #-12]
 444:	bl	0 <coda_product_type_get_product_definition_by_version>
 448:	str	r0, [fp, #-24]	; 0xffffffe8
 44c:	ldr	r0, [fp, #-24]	; 0xffffffe8
 450:	movw	r1, #0
 454:	cmp	r0, r1
 458:	bne	4b4 <generate_field_list+0x17c>
 45c:	movw	r0, #0
 460:	movt	r0, #0
 464:	ldr	r0, [r0]
 468:	ldr	r1, [pc, #112]	; 4e0 <generate_field_list+0x1a8>
 46c:	ldr	r1, [pc, r1]
 470:	str	r0, [sp, #12]
 474:	str	r1, [sp, #8]
 478:	bl	0 <__aeabi_read_tp>
 47c:	ldr	r1, [sp, #8]
 480:	ldr	r0, [r0, r1]
 484:	bl	0 <coda_errno_to_string>
 488:	ldr	r1, [sp, #12]
 48c:	str	r0, [sp, #4]
 490:	mov	r0, r1
 494:	movw	r1, #0
 498:	movt	r1, #0
 49c:	ldr	r2, [sp, #4]
 4a0:	bl	0 <fprintf>
 4a4:	movw	r1, #1
 4a8:	str	r0, [sp]
 4ac:	mov	r0, r1
 4b0:	bl	0 <exit>
 4b4:	ldr	r0, [fp, #-24]	; 0xffffffe8
 4b8:	ldr	r0, [r0, #28]
 4bc:	movw	r1, #0
 4c0:	cmp	r0, r1
 4c4:	beq	4d8 <generate_field_list+0x1a0>
 4c8:	ldr	r0, [fp, #-24]	; 0xffffffe8
 4cc:	ldr	r0, [r0, #28]
 4d0:	movw	r1, #0
 4d4:	bl	4ec <print_type>
 4d8:	mov	sp, fp
 4dc:	pop	{fp, pc}
 4e0:	.word	0x0000006c
 4e4:	.word	0x000000e8
 4e8:	.word	0x00000164

000004ec <print_type>:
 4ec:	push	{fp, lr}
 4f0:	mov	fp, sp
 4f4:	sub	sp, sp, #184	; 0xb8
 4f8:	str	r0, [fp, #-4]
 4fc:	str	r1, [fp, #-8]
 500:	movw	r0, #0
 504:	str	r0, [fp, #-16]
 508:	ldr	r0, [fp, #-8]
 50c:	cmp	r0, #32
 510:	blt	558 <print_type+0x6c>
 514:	movw	r0, #0
 518:	movt	r0, #0
 51c:	bl	0 <printf>
 520:	movw	lr, #0
 524:	movt	lr, #0
 528:	ldr	lr, [lr]
 52c:	ldr	r2, [fp, #-8]
 530:	str	r0, [fp, #-68]	; 0xffffffbc
 534:	mov	r0, lr
 538:	movw	r1, #0
 53c:	movt	r1, #0
 540:	movw	r3, #32
 544:	bl	0 <fprintf>
 548:	movw	r1, #1
 54c:	str	r0, [fp, #-72]	; 0xffffffb8
 550:	mov	r0, r1
 554:	bl	0 <exit>
 558:	ldr	r0, [fp, #-4]
 55c:	ldr	r1, [fp, #-8]
 560:	movw	r2, #0
 564:	movt	r2, #0
 568:	add	r1, r2, r1, lsl #2
 56c:	str	r0, [r1]
 570:	ldr	r0, [fp, #-4]
 574:	sub	r1, fp, #12
 578:	bl	0 <coda_type_get_class>
 57c:	ldr	r1, [fp, #-12]
 580:	cmp	r1, #0
 584:	str	r0, [fp, #-76]	; 0xffffffb4
 588:	beq	598 <print_type+0xac>
 58c:	ldr	r0, [fp, #-12]
 590:	cmp	r0, #1
 594:	bne	5ac <print_type+0xc0>
 598:	movw	r0, #0
 59c:	movt	r0, #0
 5a0:	ldr	r0, [r0]
 5a4:	str	r0, [fp, #-16]
 5a8:	b	5d8 <print_type+0xec>
 5ac:	ldr	r0, [fp, #-12]
 5b0:	cmp	r0, #6
 5b4:	bne	5cc <print_type+0xe0>
 5b8:	movw	r0, #0
 5bc:	movt	r0, #0
 5c0:	ldr	r0, [r0]
 5c4:	str	r0, [fp, #-16]
 5c8:	b	5d4 <print_type+0xe8>
 5cc:	movw	r0, #1
 5d0:	str	r0, [fp, #-16]
 5d4:	b	5d8 <print_type+0xec>
 5d8:	ldr	r0, [fp, #-16]
 5dc:	cmp	r0, #0
 5e0:	beq	82c <print_type+0x340>
 5e4:	ldr	r0, [fp, #-8]
 5e8:	bl	a24 <print_path>
 5ec:	movw	r0, #0
 5f0:	movt	r0, #0
 5f4:	ldr	r0, [r0]
 5f8:	cmp	r0, #0
 5fc:	beq	64c <print_type+0x160>
 600:	ldr	r0, [fp, #-4]
 604:	sub	r1, fp, #20
 608:	bl	0 <coda_type_get_read_type>
 60c:	movw	r1, #0
 610:	movt	r1, #0
 614:	ldr	r1, [r1]
 618:	ldr	lr, [fp, #-20]	; 0xffffffec
 61c:	str	r0, [fp, #-80]	; 0xffffffb0
 620:	mov	r0, lr
 624:	str	r1, [fp, #-84]	; 0xffffffac
 628:	bl	0 <coda_type_get_native_type_name>
 62c:	movw	r1, #0
 630:	movt	r1, #0
 634:	str	r0, [fp, #-88]	; 0xffffffa8
 638:	mov	r0, r1
 63c:	ldr	r1, [fp, #-84]	; 0xffffffac
 640:	ldr	r2, [fp, #-88]	; 0xffffffa8
 644:	bl	0 <printf>
 648:	str	r0, [sp, #92]	; 0x5c
 64c:	movw	r0, #0
 650:	movt	r0, #0
 654:	ldr	r0, [r0]
 658:	cmp	r0, #0
 65c:	beq	6ac <print_type+0x1c0>
 660:	ldr	r0, [fp, #-4]
 664:	sub	r1, fp, #24
 668:	bl	0 <coda_type_get_format>
 66c:	movw	r1, #0
 670:	movt	r1, #0
 674:	ldr	r1, [r1]
 678:	ldr	lr, [fp, #-24]	; 0xffffffe8
 67c:	str	r0, [sp, #88]	; 0x58
 680:	mov	r0, lr
 684:	str	r1, [sp, #84]	; 0x54
 688:	bl	0 <coda_type_get_format_name>
 68c:	movw	r1, #0
 690:	movt	r1, #0
 694:	str	r0, [sp, #80]	; 0x50
 698:	mov	r0, r1
 69c:	ldr	r1, [sp, #84]	; 0x54
 6a0:	ldr	r2, [sp, #80]	; 0x50
 6a4:	bl	0 <printf>
 6a8:	str	r0, [sp, #76]	; 0x4c
 6ac:	movw	r0, #0
 6b0:	movt	r0, #0
 6b4:	ldr	r0, [r0]
 6b8:	cmp	r0, #0
 6bc:	beq	764 <print_type+0x278>
 6c0:	movw	r0, #0
 6c4:	movt	r0, #0
 6c8:	ldr	r1, [r0]
 6cc:	movw	r0, #0
 6d0:	movt	r0, #0
 6d4:	bl	0 <printf>
 6d8:	ldr	r1, [fp, #-4]
 6dc:	str	r0, [sp, #72]	; 0x48
 6e0:	mov	r0, r1
 6e4:	sub	r1, fp, #28
 6e8:	bl	0 <coda_type_get_unit>
 6ec:	ldr	r1, [fp, #-28]	; 0xffffffe4
 6f0:	movw	lr, #0
 6f4:	cmp	r1, lr
 6f8:	str	r0, [sp, #68]	; 0x44
 6fc:	beq	760 <print_type+0x274>
 700:	movw	r0, #0
 704:	movt	r0, #0
 708:	ldr	r0, [r0]
 70c:	cmp	r0, #0
 710:	beq	724 <print_type+0x238>
 714:	movw	r0, #0
 718:	movt	r0, #0
 71c:	bl	0 <printf>
 720:	str	r0, [sp, #64]	; 0x40
 724:	ldr	r1, [fp, #-28]	; 0xffffffe4
 728:	movw	r0, #0
 72c:	movt	r0, #0
 730:	bl	0 <printf>
 734:	movw	r1, #0
 738:	movt	r1, #0
 73c:	ldr	r1, [r1]
 740:	cmp	r1, #0
 744:	str	r0, [sp, #60]	; 0x3c
 748:	beq	75c <print_type+0x270>
 74c:	movw	r0, #0
 750:	movt	r0, #0
 754:	bl	0 <printf>
 758:	str	r0, [sp, #56]	; 0x38
 75c:	b	760 <print_type+0x274>
 760:	b	764 <print_type+0x278>
 764:	movw	r0, #0
 768:	movt	r0, #0
 76c:	ldr	r0, [r0]
 770:	cmp	r0, #0
 774:	beq	81c <print_type+0x330>
 778:	movw	r0, #0
 77c:	movt	r0, #0
 780:	ldr	r1, [r0]
 784:	movw	r0, #0
 788:	movt	r0, #0
 78c:	bl	0 <printf>
 790:	ldr	r1, [fp, #-4]
 794:	str	r0, [sp, #52]	; 0x34
 798:	mov	r0, r1
 79c:	sub	r1, fp, #32
 7a0:	bl	0 <coda_type_get_description>
 7a4:	ldr	r1, [fp, #-32]	; 0xffffffe0
 7a8:	movw	lr, #0
 7ac:	cmp	r1, lr
 7b0:	str	r0, [sp, #48]	; 0x30
 7b4:	beq	818 <print_type+0x32c>
 7b8:	movw	r0, #0
 7bc:	movt	r0, #0
 7c0:	ldr	r0, [r0]
 7c4:	cmp	r0, #0
 7c8:	beq	7dc <print_type+0x2f0>
 7cc:	movw	r0, #0
 7d0:	movt	r0, #0
 7d4:	bl	0 <printf>
 7d8:	str	r0, [sp, #44]	; 0x2c
 7dc:	ldr	r1, [fp, #-32]	; 0xffffffe0
 7e0:	movw	r0, #0
 7e4:	movt	r0, #0
 7e8:	bl	0 <printf>
 7ec:	movw	r1, #0
 7f0:	movt	r1, #0
 7f4:	ldr	r1, [r1]
 7f8:	cmp	r1, #0
 7fc:	str	r0, [sp, #40]	; 0x28
 800:	beq	814 <print_type+0x328>
 804:	movw	r0, #0
 808:	movt	r0, #0
 80c:	bl	0 <printf>
 810:	str	r0, [sp, #36]	; 0x24
 814:	b	818 <print_type+0x32c>
 818:	b	81c <print_type+0x330>
 81c:	movw	r0, #0
 820:	movt	r0, #0
 824:	bl	0 <printf>
 828:	str	r0, [sp, #32]
 82c:	movw	r0, #0
 830:	movt	r0, #0
 834:	ldr	r0, [r0]
 838:	cmp	r0, #0
 83c:	beq	8a4 <print_type+0x3b8>
 840:	ldr	r0, [fp, #-4]
 844:	sub	r1, fp, #36	; 0x24
 848:	bl	0 <coda_type_has_attributes>
 84c:	ldr	r1, [fp, #-36]	; 0xffffffdc
 850:	cmp	r1, #0
 854:	str	r0, [sp, #28]
 858:	beq	8a0 <print_type+0x3b4>
 85c:	ldr	r0, [fp, #-4]
 860:	sub	r1, fp, #40	; 0x28
 864:	bl	0 <coda_type_get_attributes>
 868:	ldr	r1, [fp, #-8]
 86c:	add	r1, r1, #1
 870:	movw	lr, #0
 874:	movt	lr, #0
 878:	add	r1, lr, r1, lsl #2
 87c:	mvn	lr, #0
 880:	str	lr, [r1]
 884:	ldr	r1, [fp, #-40]	; 0xffffffd8
 888:	ldr	lr, [fp, #-8]
 88c:	add	lr, lr, #1
 890:	str	r0, [sp, #24]
 894:	mov	r0, r1
 898:	mov	r1, lr
 89c:	bl	4ec <print_type>
 8a0:	b	8a4 <print_type+0x3b8>
 8a4:	ldr	r0, [fp, #-12]
 8a8:	cmp	r0, #0
 8ac:	str	r0, [sp, #20]
 8b0:	beq	8d8 <print_type+0x3ec>
 8b4:	b	8b8 <print_type+0x3cc>
 8b8:	ldr	r0, [sp, #20]
 8bc:	cmp	r0, #1
 8c0:	beq	990 <print_type+0x4a4>
 8c4:	b	8c8 <print_type+0x3dc>
 8c8:	ldr	r0, [sp, #20]
 8cc:	cmp	r0, #6
 8d0:	beq	9d8 <print_type+0x4ec>
 8d4:	b	a18 <print_type+0x52c>
 8d8:	ldr	r0, [fp, #-4]
 8dc:	sub	r1, fp, #44	; 0x2c
 8e0:	bl	0 <coda_type_get_num_record_fields>
 8e4:	movw	r1, #0
 8e8:	str	r1, [fp, #-48]	; 0xffffffd0
 8ec:	str	r0, [sp, #16]
 8f0:	ldr	r0, [fp, #-48]	; 0xffffffd0
 8f4:	ldr	r1, [fp, #-44]	; 0xffffffd4
 8f8:	cmp	r0, r1
 8fc:	bge	98c <print_type+0x4a0>
 900:	ldr	r0, [fp, #-4]
 904:	ldr	r1, [fp, #-48]	; 0xffffffd0
 908:	sub	r2, fp, #52	; 0x34
 90c:	bl	0 <coda_type_get_record_field_type>
 910:	movw	r1, #0
 914:	movt	r1, #0
 918:	ldr	r1, [r1]
 91c:	cmp	r1, #0
 920:	str	r0, [sp, #12]
 924:	bne	950 <print_type+0x464>
 928:	ldr	r0, [fp, #-4]
 92c:	ldr	r1, [fp, #-48]	; 0xffffffd0
 930:	sub	r2, fp, #56	; 0x38
 934:	bl	0 <coda_type_get_record_field_hidden_status>
 938:	ldr	r1, [fp, #-56]	; 0xffffffc8
 93c:	cmp	r1, #0
 940:	str	r0, [sp, #8]
 944:	beq	94c <print_type+0x460>
 948:	b	97c <print_type+0x490>
 94c:	b	950 <print_type+0x464>
 950:	ldr	r0, [fp, #-48]	; 0xffffffd0
 954:	ldr	r1, [fp, #-8]
 958:	add	r1, r1, #1
 95c:	movw	r2, #0
 960:	movt	r2, #0
 964:	add	r1, r2, r1, lsl #2
 968:	str	r0, [r1]
 96c:	ldr	r0, [fp, #-52]	; 0xffffffcc
 970:	ldr	r1, [fp, #-8]
 974:	add	r1, r1, #1
 978:	bl	4ec <print_type>
 97c:	ldr	r0, [fp, #-48]	; 0xffffffd0
 980:	add	r0, r0, #1
 984:	str	r0, [fp, #-48]	; 0xffffffd0
 988:	b	8f0 <print_type+0x404>
 98c:	b	a1c <print_type+0x530>
 990:	ldr	r0, [fp, #-4]
 994:	sub	r1, fp, #60	; 0x3c
 998:	bl	0 <coda_type_get_array_base_type>
 99c:	ldr	r1, [fp, #-8]
 9a0:	add	r1, r1, #1
 9a4:	movw	lr, #0
 9a8:	movt	lr, #0
 9ac:	add	r1, lr, r1, lsl #2
 9b0:	movw	lr, #0
 9b4:	str	lr, [r1]
 9b8:	ldr	r1, [fp, #-60]	; 0xffffffc4
 9bc:	ldr	lr, [fp, #-8]
 9c0:	add	lr, lr, #1
 9c4:	str	r0, [sp, #4]
 9c8:	mov	r0, r1
 9cc:	mov	r1, lr
 9d0:	bl	4ec <print_type>
 9d4:	b	a1c <print_type+0x530>
 9d8:	movw	r0, #0
 9dc:	movt	r0, #0
 9e0:	ldr	r0, [r0]
 9e4:	cmp	r0, #0
 9e8:	bne	a14 <print_type+0x528>
 9ec:	ldr	r0, [fp, #-4]
 9f0:	sub	r1, fp, #64	; 0x40
 9f4:	bl	0 <coda_type_get_special_base_type>
 9f8:	ldr	r1, [fp, #-64]	; 0xffffffc0
 9fc:	ldr	lr, [fp, #-8]
 a00:	str	r0, [sp]
 a04:	mov	r0, r1
 a08:	mov	r1, lr
 a0c:	bl	4ec <print_type>
 a10:	b	a1c <print_type+0x530>
 a14:	b	a18 <print_type+0x52c>
 a18:	b	a1c <print_type+0x530>
 a1c:	mov	sp, fp
 a20:	pop	{fp, pc}

00000a24 <print_path>:
 a24:	push	{fp, lr}
 a28:	mov	fp, sp
 a2c:	sub	sp, sp, #112	; 0x70
 a30:	str	r0, [fp, #-4]
 a34:	movw	r0, #0
 a38:	movt	r0, #0
 a3c:	bl	0 <printf>
 a40:	movw	lr, #0
 a44:	str	lr, [fp, #-8]
 a48:	str	r0, [sp, #52]	; 0x34
 a4c:	ldr	r0, [fp, #-8]
 a50:	ldr	r1, [fp, #-4]
 a54:	cmp	r0, r1
 a58:	bge	ca8 <print_path+0x284>
 a5c:	ldr	r0, [fp, #-8]
 a60:	add	r0, r0, #1
 a64:	movw	r1, #0
 a68:	movt	r1, #0
 a6c:	add	r0, r1, r0, lsl #2
 a70:	ldr	r0, [r0]
 a74:	cmn	r0, #1
 a78:	bne	a90 <print_path+0x6c>
 a7c:	movw	r0, #0
 a80:	movt	r0, #0
 a84:	bl	0 <printf>
 a88:	str	r0, [sp, #48]	; 0x30
 a8c:	b	c94 <print_path+0x270>
 a90:	ldr	r0, [fp, #-8]
 a94:	movw	r1, #0
 a98:	movt	r1, #0
 a9c:	ldr	r0, [r1, r0, lsl #2]
 aa0:	str	r0, [fp, #-12]
 aa4:	ldr	r0, [fp, #-12]
 aa8:	ldr	r0, [r0, #8]
 aac:	cmp	r0, #0
 ab0:	str	r0, [sp, #44]	; 0x2c
 ab4:	beq	acc <print_path+0xa8>
 ab8:	b	abc <print_path+0x98>
 abc:	ldr	r0, [sp, #44]	; 0x2c
 ac0:	cmp	r0, #1
 ac4:	beq	b44 <print_path+0x120>
 ac8:	b	c70 <print_path+0x24c>
 acc:	ldr	r0, [fp, #-12]
 ad0:	ldr	r1, [fp, #-8]
 ad4:	add	r1, r1, #1
 ad8:	movw	r2, #0
 adc:	movt	r2, #0
 ae0:	add	r1, r2, r1, lsl #2
 ae4:	ldr	r1, [r1]
 ae8:	sub	r2, fp, #16
 aec:	bl	0 <coda_type_get_record_field_name>
 af0:	ldr	r1, [fp, #-8]
 af4:	cmp	r1, #0
 af8:	str	r0, [sp, #40]	; 0x28
 afc:	ble	b2c <print_path+0x108>
 b00:	ldr	r0, [fp, #-8]
 b04:	movw	r1, #0
 b08:	movt	r1, #0
 b0c:	add	r0, r1, r0, lsl #2
 b10:	ldr	r0, [r0]
 b14:	cmn	r0, #1
 b18:	beq	b2c <print_path+0x108>
 b1c:	movw	r0, #0
 b20:	movt	r0, #0
 b24:	bl	0 <printf>
 b28:	str	r0, [sp, #36]	; 0x24
 b2c:	ldr	r1, [fp, #-16]
 b30:	movw	r0, #0
 b34:	movt	r0, #0
 b38:	bl	0 <printf>
 b3c:	str	r0, [sp, #32]
 b40:	b	c90 <print_path+0x26c>
 b44:	sub	r2, fp, #48	; 0x30
 b48:	ldr	r0, [fp, #-12]
 b4c:	sub	r1, fp, #52	; 0x34
 b50:	bl	0 <coda_type_get_array_dim>
 b54:	movw	r1, #0
 b58:	movt	r1, #0
 b5c:	str	r0, [sp, #28]
 b60:	mov	r0, r1
 b64:	bl	0 <printf>
 b68:	movw	r1, #0
 b6c:	str	r1, [sp, #56]	; 0x38
 b70:	str	r0, [sp, #24]
 b74:	ldr	r0, [sp, #56]	; 0x38
 b78:	ldr	r1, [fp, #-52]	; 0xffffffcc
 b7c:	cmp	r0, r1
 b80:	bge	c5c <print_path+0x238>
 b84:	ldr	r0, [sp, #56]	; 0x38
 b88:	cmp	r0, #0
 b8c:	ble	ba0 <print_path+0x17c>
 b90:	movw	r0, #0
 b94:	movt	r0, #0
 b98:	bl	0 <printf>
 b9c:	str	r0, [sp, #20]
 ba0:	ldr	r0, [sp, #56]	; 0x38
 ba4:	sub	r1, fp, #48	; 0x30
 ba8:	add	r0, r1, r0, lsl #2
 bac:	ldr	r0, [r0]
 bb0:	cmp	r0, #0
 bb4:	bge	c28 <print_path+0x204>
 bb8:	movw	r0, #0
 bbc:	movt	r0, #0
 bc0:	ldr	r0, [r0]
 bc4:	cmp	r0, #0
 bc8:	beq	c14 <print_path+0x1f0>
 bcc:	ldr	r0, [fp, #-12]
 bd0:	add	r0, r0, #84	; 0x54
 bd4:	ldr	r1, [sp, #56]	; 0x38
 bd8:	add	r0, r0, r1, lsl #2
 bdc:	ldr	r0, [r0]
 be0:	movw	r1, #0
 be4:	cmp	r0, r1
 be8:	beq	c14 <print_path+0x1f0>
 bec:	ldr	r0, [fp, #-12]
 bf0:	add	r0, r0, #84	; 0x54
 bf4:	ldr	r1, [sp, #56]	; 0x38
 bf8:	add	r0, r0, r1, lsl #2
 bfc:	ldr	r0, [r0]
 c00:	movw	r1, #0
 c04:	movt	r1, #0
 c08:	bl	0 <coda_expression_print>
 c0c:	str	r0, [sp, #16]
 c10:	b	c24 <print_path+0x200>
 c14:	movw	r0, #0
 c18:	movt	r0, #0
 c1c:	bl	0 <printf>
 c20:	str	r0, [sp, #12]
 c24:	b	c48 <print_path+0x224>
 c28:	ldr	r0, [sp, #56]	; 0x38
 c2c:	sub	r1, fp, #48	; 0x30
 c30:	add	r0, r1, r0, lsl #2
 c34:	ldr	r1, [r0]
 c38:	movw	r0, #0
 c3c:	movt	r0, #0
 c40:	bl	0 <printf>
 c44:	str	r0, [sp, #8]
 c48:	b	c4c <print_path+0x228>
 c4c:	ldr	r0, [sp, #56]	; 0x38
 c50:	add	r0, r0, #1
 c54:	str	r0, [sp, #56]	; 0x38
 c58:	b	b74 <print_path+0x150>
 c5c:	movw	r0, #0
 c60:	movt	r0, #0
 c64:	bl	0 <printf>
 c68:	str	r0, [sp, #4]
 c6c:	b	c90 <print_path+0x26c>
 c70:	movw	r0, #0
 c74:	movt	r0, #0
 c78:	movw	r1, #0
 c7c:	movt	r1, #0
 c80:	movw	r2, #125	; 0x7d
 c84:	movw	r3, #0
 c88:	movt	r3, #0
 c8c:	bl	0 <__assert_fail>
 c90:	b	c94 <print_path+0x270>
 c94:	b	c98 <print_path+0x274>
 c98:	ldr	r0, [fp, #-8]
 c9c:	add	r0, r0, #1
 ca0:	str	r0, [fp, #-8]
 ca4:	b	a4c <print_path+0x28>
 ca8:	mov	sp, fp
 cac:	pop	{fp, pc}
