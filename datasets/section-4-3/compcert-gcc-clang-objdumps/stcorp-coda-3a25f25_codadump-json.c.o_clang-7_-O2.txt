
../compcert-repos/stcorp-coda-3a25f25/CMakeFiles/codadump.dir/tools/codadump/codadump-json.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <print_json_data>:
   0:	push	{r4, sl, fp, lr}
   4:	add	fp, sp, #8
   8:	sub	sp, sp, #528	; 0x210
   c:	movw	r1, #0
  10:	movw	r4, #0
  14:	movt	r1, #0
  18:	movt	r4, #0
  1c:	str	r0, [r1]
  20:	ldr	r0, [r4]
  24:	sub	r1, fp, #12
  28:	bl	0 <coda_open>
  2c:	cmp	r0, #0
  30:	beq	70 <print_json_data+0x70>
  34:	bl	0 <coda_get_errno>
  38:	ldr	r0, [r0]
  3c:	cmn	r0, #21
  40:	bne	6c <print_json_data+0x6c>
  44:	mov	r0, #0
  48:	bl	0 <coda_set_option_use_mmap>
  4c:	ldr	r0, [r4]
  50:	sub	r1, fp, #12
  54:	bl	0 <coda_open>
  58:	mov	r4, r0
  5c:	mov	r0, #1
  60:	bl	0 <coda_set_option_use_mmap>
  64:	cmp	r4, #0
  68:	beq	70 <print_json_data+0x70>
  6c:	bl	0 <handle_coda_error>
  70:	ldr	r1, [fp, #-12]
  74:	mov	r0, sp
  78:	bl	0 <coda_cursor_set_product>
  7c:	cmp	r0, #0
  80:	beq	88 <print_json_data+0x88>
  84:	bl	0 <handle_coda_error>
  88:	movw	r0, #0
  8c:	movt	r0, #0
  90:	ldr	r1, [r0]
  94:	cmp	r1, #0
  98:	beq	b0 <print_json_data+0xb0>
  9c:	mov	r0, sp
  a0:	bl	0 <coda_cursor_goto>
  a4:	cmp	r0, #0
  a8:	beq	b0 <print_json_data+0xb0>
  ac:	bl	0 <handle_coda_error>
  b0:	mov	r0, #0
  b4:	bl	0 <coda_set_option_perform_boundary_checks>
  b8:	mov	r0, sp
  bc:	bl	dc <print_data>
  c0:	movw	r0, #0
  c4:	movt	r0, #0
  c8:	bl	914 <ff_printf>
  cc:	ldr	r0, [fp, #-12]
  d0:	bl	0 <coda_close>
  d4:	sub	sp, fp, #8
  d8:	pop	{r4, sl, fp, pc}

000000dc <print_data>:
  dc:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
  e0:	add	fp, sp, #24
  e4:	sub	sp, sp, #72	; 0x48
  e8:	mov	r4, r0
  ec:	mov	r0, #0
  f0:	str	r0, [fp, #-32]	; 0xffffffe0
  f4:	movw	r0, #0
  f8:	movt	r0, #0
  fc:	ldr	r0, [r0]
 100:	cmp	r0, #0
 104:	beq	168 <print_data+0x8c>
 108:	sub	r1, fp, #32
 10c:	mov	r0, r4
 110:	bl	0 <coda_cursor_has_attributes>
 114:	cmp	r0, #0
 118:	beq	120 <print_data+0x44>
 11c:	bl	0 <handle_coda_error>
 120:	ldr	r0, [fp, #-32]	; 0xffffffe0
 124:	cmp	r0, #0
 128:	beq	168 <print_data+0x8c>
 12c:	movw	r0, #0
 130:	movt	r0, #0
 134:	bl	914 <ff_printf>
 138:	mov	r0, r4
 13c:	bl	0 <coda_cursor_goto_attributes>
 140:	cmp	r0, #0
 144:	beq	14c <print_data+0x70>
 148:	bl	0 <handle_coda_error>
 14c:	mov	r0, r4
 150:	bl	dc <print_data>
 154:	mov	r0, r4
 158:	bl	0 <coda_cursor_goto_parent>
 15c:	movw	r0, #0
 160:	movt	r0, #0
 164:	bl	914 <ff_printf>
 168:	sub	r1, fp, #28
 16c:	mov	r0, r4
 170:	bl	0 <coda_cursor_get_type_class>
 174:	cmp	r0, #0
 178:	beq	180 <print_data+0xa4>
 17c:	bl	0 <handle_coda_error>
 180:	ldr	r0, [fp, #-28]	; 0xffffffe4
 184:	cmp	r0, #6
 188:	bhi	8b8 <print_data+0x7dc>
 18c:	add	r1, pc, #0
 190:	ldr	pc, [r1, r0, lsl #2]
 194:	.word	0x00000244
 198:	.word	0x00000318
 19c:	.word	0x000001b0
 1a0:	.word	0x000001b0
 1a4:	.word	0x000001b0
 1a8:	.word	0x000001b0
 1ac:	.word	0x00000368
 1b0:	sub	r1, fp, #36	; 0x24
 1b4:	mov	r0, r4
 1b8:	bl	0 <coda_cursor_get_read_type>
 1bc:	cmp	r0, #0
 1c0:	beq	1c8 <print_data+0xec>
 1c4:	bl	0 <handle_coda_error>
 1c8:	ldr	r0, [fp, #-36]	; 0xffffffdc
 1cc:	add	r0, r0, #1
 1d0:	cmp	r0, #13
 1d4:	bhi	8b8 <print_data+0x7dc>
 1d8:	add	r1, pc, #0
 1dc:	ldr	pc, [r1, r0, lsl #2]
 1e0:	.word	0x000003a4
 1e4:	.word	0x00000218
 1e8:	.word	0x000003b0
 1ec:	.word	0x00000218
 1f0:	.word	0x000003b0
 1f4:	.word	0x00000218
 1f8:	.word	0x000003b0
 1fc:	.word	0x00000414
 200:	.word	0x00000444
 204:	.word	0x000003dc
 208:	.word	0x000003dc
 20c:	.word	0x00000484
 210:	.word	0x000004c0
 214:	.word	0x00000574
 218:	add	r1, sp, #16
 21c:	mov	r0, r4
 220:	bl	0 <coda_cursor_read_int32>
 224:	cmp	r0, #0
 228:	beq	230 <print_data+0x154>
 22c:	bl	0 <handle_coda_error>
 230:	ldr	r1, [sp, #16]
 234:	movw	r0, #0
 238:	movt	r0, #0
 23c:	bl	914 <ff_printf>
 240:	b	8b8 <print_data+0x7dc>
 244:	movw	r0, #0
 248:	movt	r0, #0
 24c:	bl	914 <ff_printf>
 250:	add	r1, sp, #16
 254:	mov	r0, r4
 258:	bl	0 <coda_cursor_get_num_elements>
 25c:	cmp	r0, #0
 260:	beq	268 <print_data+0x18c>
 264:	bl	0 <handle_coda_error>
 268:	ldr	r0, [sp, #16]
 26c:	cmp	r0, #1
 270:	blt	734 <print_data+0x658>
 274:	add	r1, sp, #8
 278:	mov	r0, r4
 27c:	bl	0 <coda_cursor_get_type>
 280:	cmp	r0, #0
 284:	beq	28c <print_data+0x1b0>
 288:	bl	0 <handle_coda_error>
 28c:	ldr	r0, [sp, #8]
 290:	sub	r1, fp, #36	; 0x24
 294:	bl	0 <coda_type_get_record_union_status>
 298:	cmp	r0, #0
 29c:	beq	2a4 <print_data+0x1c8>
 2a0:	bl	0 <handle_coda_error>
 2a4:	ldr	r0, [fp, #-36]	; 0xffffffdc
 2a8:	cmp	r0, #0
 2ac:	beq	640 <print_data+0x564>
 2b0:	sub	r1, fp, #40	; 0x28
 2b4:	mov	r0, r4
 2b8:	bl	0 <coda_cursor_get_available_union_field_index>
 2bc:	cmp	r0, #0
 2c0:	beq	2c8 <print_data+0x1ec>
 2c4:	bl	0 <handle_coda_error>
 2c8:	ldr	r1, [fp, #-40]	; 0xffffffd8
 2cc:	ldr	r0, [sp, #8]
 2d0:	sub	r2, fp, #44	; 0x2c
 2d4:	bl	0 <coda_type_get_record_field_name>
 2d8:	cmp	r0, #0
 2dc:	beq	2e4 <print_data+0x208>
 2e0:	bl	0 <handle_coda_error>
 2e4:	ldr	r1, [fp, #-40]	; 0xffffffd8
 2e8:	mov	r0, r4
 2ec:	bl	0 <coda_cursor_goto_record_field_by_index>
 2f0:	cmp	r0, #0
 2f4:	beq	2fc <print_data+0x220>
 2f8:	bl	0 <handle_coda_error>
 2fc:	ldr	r1, [fp, #-44]	; 0xffffffd4
 300:	movw	r0, #0
 304:	movt	r0, #0
 308:	bl	914 <ff_printf>
 30c:	mov	r0, r4
 310:	bl	dc <print_data>
 314:	b	72c <print_data+0x650>
 318:	movw	r0, #0
 31c:	movt	r0, #0
 320:	bl	914 <ff_printf>
 324:	add	r5, sp, #16
 328:	add	r1, sp, #8
 32c:	mov	r0, r4
 330:	mov	r2, r5
 334:	bl	0 <coda_cursor_get_array_dim>
 338:	cmp	r0, #0
 33c:	beq	344 <print_data+0x268>
 340:	bl	0 <handle_coda_error>
 344:	ldr	r0, [sp, #8]
 348:	cmp	r0, #0
 34c:	blt	8ac <print_data+0x7d0>
 350:	beq	740 <print_data+0x664>
 354:	cmp	r0, #4
 358:	bcs	7f0 <print_data+0x714>
 35c:	mov	r1, #0
 360:	mov	r6, #1
 364:	b	824 <print_data+0x748>
 368:	sub	r1, fp, #36	; 0x24
 36c:	mov	r0, r4
 370:	bl	0 <coda_cursor_get_special_type>
 374:	cmp	r0, #0
 378:	beq	380 <print_data+0x2a4>
 37c:	bl	0 <handle_coda_error>
 380:	ldr	r0, [fp, #-36]	; 0xffffffdc
 384:	cmp	r0, #3
 388:	bhi	8b8 <print_data+0x7dc>
 38c:	add	r1, pc, #0
 390:	ldr	pc, [r1, r0, lsl #2]
 394:	.word	0x000003a4
 398:	.word	0x00000748
 39c:	.word	0x00000768
 3a0:	.word	0x000007b4
 3a4:	movw	r0, #0
 3a8:	movt	r0, #0
 3ac:	b	8b4 <print_data+0x7d8>
 3b0:	add	r1, sp, #16
 3b4:	mov	r0, r4
 3b8:	bl	0 <coda_cursor_read_uint32>
 3bc:	cmp	r0, #0
 3c0:	beq	3c8 <print_data+0x2ec>
 3c4:	bl	0 <handle_coda_error>
 3c8:	ldr	r1, [sp, #16]
 3cc:	movw	r0, #0
 3d0:	movt	r0, #0
 3d4:	bl	914 <ff_printf>
 3d8:	b	8b8 <print_data+0x7dc>
 3dc:	add	r1, sp, #16
 3e0:	mov	r0, r4
 3e4:	bl	0 <coda_cursor_read_double>
 3e8:	cmp	r0, #0
 3ec:	beq	3f4 <print_data+0x318>
 3f0:	bl	0 <handle_coda_error>
 3f4:	vldr	d16, [sp, #16]
 3f8:	ldr	r0, [fp, #-36]	; 0xffffffdc
 3fc:	vmov	r2, r3, d16
 400:	cmp	r0, #8
 404:	bne	7a8 <print_data+0x6cc>
 408:	movw	r0, #0
 40c:	movt	r0, #0
 410:	b	7e8 <print_data+0x70c>
 414:	add	r1, sp, #8
 418:	mov	r0, r4
 41c:	bl	0 <coda_cursor_read_int64>
 420:	cmp	r0, #0
 424:	beq	42c <print_data+0x350>
 428:	bl	0 <handle_coda_error>
 42c:	ldr	r0, [sp, #8]
 430:	ldr	r1, [sp, #12]
 434:	add	r4, sp, #16
 438:	mov	r2, r4
 43c:	bl	0 <coda_str64>
 440:	b	470 <print_data+0x394>
 444:	add	r1, sp, #8
 448:	mov	r0, r4
 44c:	bl	0 <coda_cursor_read_uint64>
 450:	cmp	r0, #0
 454:	beq	45c <print_data+0x380>
 458:	bl	0 <handle_coda_error>
 45c:	ldr	r0, [sp, #8]
 460:	ldr	r1, [sp, #12]
 464:	add	r4, sp, #16
 468:	mov	r2, r4
 46c:	bl	0 <coda_str64u>
 470:	movw	r0, #0
 474:	mov	r1, r4
 478:	movt	r0, #0
 47c:	bl	914 <ff_printf>
 480:	b	8b8 <print_data+0x7dc>
 484:	add	r1, sp, #16
 488:	mov	r0, r4
 48c:	bl	0 <coda_cursor_read_char>
 490:	cmp	r0, #0
 494:	beq	49c <print_data+0x3c0>
 498:	bl	0 <handle_coda_error>
 49c:	movw	r4, #0
 4a0:	movt	r4, #0
 4a4:	mov	r0, r4
 4a8:	bl	914 <ff_printf>
 4ac:	add	r0, sp, #16
 4b0:	mov	r1, #1
 4b4:	bl	95c <print_escaped>
 4b8:	mov	r0, r4
 4bc:	b	8b4 <print_data+0x7d8>
 4c0:	add	r1, sp, #16
 4c4:	mov	r0, r4
 4c8:	bl	0 <coda_cursor_get_string_length>
 4cc:	cmp	r0, #0
 4d0:	beq	4d8 <print_data+0x3fc>
 4d4:	bl	0 <handle_coda_error>
 4d8:	ldr	r0, [sp, #16]
 4dc:	add	r6, r0, #1
 4e0:	mov	r0, r6
 4e4:	bl	0 <malloc>
 4e8:	mov	r5, r0
 4ec:	cmp	r0, #0
 4f0:	bne	524 <print_data+0x448>
 4f4:	movw	r1, #0
 4f8:	movw	r3, #0
 4fc:	movw	r0, #303	; 0x12f
 500:	mov	r2, r6
 504:	str	r0, [sp]
 508:	movt	r1, #0
 50c:	movt	r3, #0
 510:	mvn	r0, #0
 514:	bl	0 <coda_set_error>
 518:	bl	0 <handle_coda_error>
 51c:	ldr	r0, [sp, #16]
 520:	add	r6, r0, #1
 524:	mov	r0, r4
 528:	mov	r1, r5
 52c:	mov	r2, r6
 530:	bl	0 <coda_cursor_read_string>
 534:	cmp	r0, #0
 538:	beq	540 <print_data+0x464>
 53c:	bl	0 <handle_coda_error>
 540:	movw	r4, #0
 544:	movt	r4, #0
 548:	mov	r0, r4
 54c:	bl	914 <ff_printf>
 550:	ldr	r1, [sp, #16]
 554:	mov	r0, r5
 558:	bl	95c <print_escaped>
 55c:	ldr	r1, [sp, #16]
 560:	mov	r0, r4
 564:	bl	914 <ff_printf>
 568:	mov	r0, r5
 56c:	bl	0 <free>
 570:	b	8b8 <print_data+0x7dc>
 574:	add	r1, sp, #16
 578:	mov	r0, r4
 57c:	bl	0 <coda_cursor_get_bit_size>
 580:	cmp	r0, #0
 584:	beq	58c <print_data+0x4b0>
 588:	bl	0 <handle_coda_error>
 58c:	ldr	r7, [sp, #16]
 590:	ldr	r6, [sp, #20]
 594:	lsr	r0, r7, #3
 598:	tst	r7, #7
 59c:	orr	r5, r0, r6, lsl #29
 5a0:	addne	r5, r5, #1
 5a4:	mov	r0, r5
 5a8:	bl	0 <malloc>
 5ac:	mov	r8, r0
 5b0:	cmp	r0, #0
 5b4:	bne	5e8 <print_data+0x50c>
 5b8:	movw	r1, #0
 5bc:	movw	r3, #0
 5c0:	movw	r0, #334	; 0x14e
 5c4:	mov	r2, r5
 5c8:	str	r0, [sp]
 5cc:	movt	r1, #0
 5d0:	movt	r3, #0
 5d4:	mvn	r0, #0
 5d8:	bl	0 <coda_set_error>
 5dc:	bl	0 <handle_coda_error>
 5e0:	ldr	r7, [sp, #16]
 5e4:	ldr	r6, [sp, #20]
 5e8:	mov	r0, r4
 5ec:	mov	r1, r8
 5f0:	mov	r2, #0
 5f4:	mov	r3, #0
 5f8:	str	r7, [sp]
 5fc:	str	r6, [sp, #4]
 600:	bl	0 <coda_cursor_read_bits>
 604:	cmp	r0, #0
 608:	beq	610 <print_data+0x534>
 60c:	bl	0 <handle_coda_error>
 610:	movw	r4, #0
 614:	movt	r4, #0
 618:	mov	r0, r4
 61c:	bl	914 <ff_printf>
 620:	mov	r0, r8
 624:	mov	r1, r5
 628:	bl	95c <print_escaped>
 62c:	mov	r0, r4
 630:	bl	914 <ff_printf>
 634:	mov	r0, r8
 638:	bl	0 <free>
 63c:	b	8b8 <print_data+0x7dc>
 640:	mov	r0, r4
 644:	bl	0 <coda_cursor_goto_first_record_field>
 648:	cmp	r0, #0
 64c:	beq	654 <print_data+0x578>
 650:	bl	0 <handle_coda_error>
 654:	ldr	r0, [sp, #16]
 658:	mov	r1, #0
 65c:	str	r1, [fp, #-40]	; 0xffffffd8
 660:	cmp	r0, #1
 664:	blt	72c <print_data+0x650>
 668:	movw	r8, #0
 66c:	movw	r6, #0
 670:	mov	r7, #1
 674:	add	r5, sp, #48	; 0x30
 678:	sub	r9, fp, #44	; 0x2c
 67c:	movt	r8, #0
 680:	movt	r6, #0
 684:	ldr	r0, [sp, #8]
 688:	mov	r2, r5
 68c:	bl	0 <coda_type_get_record_field_hidden_status>
 690:	cmp	r0, #0
 694:	beq	69c <print_data+0x5c0>
 698:	bl	0 <handle_coda_error>
 69c:	ldr	r0, [sp, #48]	; 0x30
 6a0:	cmp	r0, #0
 6a4:	bne	6ec <print_data+0x610>
 6a8:	cmp	r7, #0
 6ac:	bne	6b8 <print_data+0x5dc>
 6b0:	mov	r0, r8
 6b4:	bl	914 <ff_printf>
 6b8:	ldr	r1, [fp, #-40]	; 0xffffffd8
 6bc:	ldr	r0, [sp, #8]
 6c0:	mov	r2, r9
 6c4:	bl	0 <coda_type_get_record_field_name>
 6c8:	cmp	r0, #0
 6cc:	beq	6d4 <print_data+0x5f8>
 6d0:	bl	0 <handle_coda_error>
 6d4:	ldr	r1, [fp, #-44]	; 0xffffffd4
 6d8:	mov	r0, r6
 6dc:	bl	914 <ff_printf>
 6e0:	mov	r0, r4
 6e4:	bl	dc <print_data>
 6e8:	mov	r7, #0
 6ec:	ldr	r0, [sp, #16]
 6f0:	ldr	r1, [fp, #-40]	; 0xffffffd8
 6f4:	sub	r0, r0, #1
 6f8:	cmp	r1, r0
 6fc:	bge	714 <print_data+0x638>
 700:	mov	r0, r4
 704:	bl	0 <coda_cursor_goto_next_record_field>
 708:	cmp	r0, #0
 70c:	beq	714 <print_data+0x638>
 710:	bl	0 <handle_coda_error>
 714:	ldr	r0, [fp, #-40]	; 0xffffffd8
 718:	add	r1, r0, #1
 71c:	ldr	r0, [sp, #16]
 720:	str	r1, [fp, #-40]	; 0xffffffd8
 724:	cmp	r1, r0
 728:	blt	684 <print_data+0x5a8>
 72c:	mov	r0, r4
 730:	bl	0 <coda_cursor_goto_parent>
 734:	movw	r0, #0
 738:	movt	r0, #0
 73c:	b	8b4 <print_data+0x7d8>
 740:	mov	r6, #1
 744:	b	848 <print_data+0x76c>
 748:	add	r1, sp, #16
 74c:	mov	r0, r4
 750:	bl	0 <coda_cursor_read_double>
 754:	cmp	r0, #0
 758:	beq	760 <print_data+0x684>
 75c:	bl	0 <handle_coda_error>
 760:	vldr	d16, [sp, #16]
 764:	b	7a4 <print_data+0x6c8>
 768:	add	r1, sp, #8
 76c:	mov	r0, r4
 770:	bl	0 <coda_cursor_read_double>
 774:	cmp	r0, #0
 778:	beq	780 <print_data+0x6a4>
 77c:	bl	0 <handle_coda_error>
 780:	vldr	d0, [sp, #8]
 784:	bl	0 <coda_isNaN>
 788:	cmp	r0, #0
 78c:	bne	7a0 <print_data+0x6c4>
 790:	vldr	d0, [sp, #8]
 794:	bl	0 <coda_isInf>
 798:	cmp	r0, #0
 79c:	beq	8d8 <print_data+0x7fc>
 7a0:	vldr	d16, [sp, #8]
 7a4:	vmov	r2, r3, d16
 7a8:	movw	r0, #0
 7ac:	movt	r0, #0
 7b0:	b	7e8 <print_data+0x70c>
 7b4:	add	r1, sp, #16
 7b8:	add	r2, sp, #8
 7bc:	mov	r0, r4
 7c0:	bl	0 <coda_cursor_read_complex_double_split>
 7c4:	cmp	r0, #0
 7c8:	beq	7d0 <print_data+0x6f4>
 7cc:	bl	0 <handle_coda_error>
 7d0:	vldr	d16, [sp, #16]
 7d4:	vldr	d17, [sp, #8]
 7d8:	movw	r0, #0
 7dc:	movt	r0, #0
 7e0:	vmov	r2, r3, d16
 7e4:	vstr	d17, [sp]
 7e8:	bl	914 <ff_printf>
 7ec:	b	8b8 <print_data+0x7dc>
 7f0:	bic	r1, r0, #3
 7f4:	vmov.i32	q8, #1	; 0x00000001
 7f8:	mov	r2, r1
 7fc:	vld1.32	{d18-d19}, [r5]!
 800:	subs	r2, r2, #4
 804:	vmul.i32	q8, q9, q8
 808:	bne	7fc <print_data+0x720>
 80c:	vext.8	q9, q8, q8, #8
 810:	cmp	r0, r1
 814:	vmul.i32	q0, q8, q9
 818:	vmul.i32	q8, q0, d0[1]
 81c:	vmov.32	r6, d16[0]
 820:	beq	840 <print_data+0x764>
 824:	add	r2, sp, #16
 828:	sub	r0, r0, r1
 82c:	add	r1, r2, r1, lsl #2
 830:	ldr	r2, [r1], #4
 834:	subs	r0, r0, #1
 838:	mul	r6, r2, r6
 83c:	bne	830 <print_data+0x754>
 840:	cmp	r6, #1
 844:	blt	8ac <print_data+0x7d0>
 848:	mov	r0, r4
 84c:	bl	0 <coda_cursor_goto_first_array_element>
 850:	cmp	r0, #0
 854:	beq	85c <print_data+0x780>
 858:	bl	0 <handle_coda_error>
 85c:	movw	r8, #0
 860:	sub	r7, r6, #1
 864:	mov	r5, #0
 868:	movt	r8, #0
 86c:	mov	r0, r4
 870:	bl	dc <print_data>
 874:	cmp	r5, r7
 878:	bge	898 <print_data+0x7bc>
 87c:	mov	r0, r8
 880:	bl	914 <ff_printf>
 884:	mov	r0, r4
 888:	bl	0 <coda_cursor_goto_next_array_element>
 88c:	cmp	r0, #0
 890:	beq	898 <print_data+0x7bc>
 894:	bl	0 <handle_coda_error>
 898:	add	r5, r5, #1
 89c:	cmp	r6, r5
 8a0:	bne	86c <print_data+0x790>
 8a4:	mov	r0, r4
 8a8:	bl	0 <coda_cursor_goto_parent>
 8ac:	movw	r0, #0
 8b0:	movt	r0, #0
 8b4:	bl	914 <ff_printf>
 8b8:	ldr	r0, [fp, #-32]	; 0xffffffe0
 8bc:	cmp	r0, #0
 8c0:	beq	8d0 <print_data+0x7f4>
 8c4:	movw	r0, #0
 8c8:	movt	r0, #0
 8cc:	bl	914 <ff_printf>
 8d0:	sub	sp, fp, #24
 8d4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
 8d8:	vldr	d0, [sp, #8]
 8dc:	movw	r0, #0
 8e0:	add	r1, sp, #16
 8e4:	movt	r0, #0
 8e8:	bl	0 <coda_time_double_to_string>
 8ec:	cmp	r0, #0
 8f0:	beq	900 <print_data+0x824>
 8f4:	movw	r0, #0
 8f8:	movt	r0, #0
 8fc:	b	8b4 <print_data+0x7d8>
 900:	movw	r0, #0
 904:	add	r1, sp, #16
 908:	movt	r0, #0
 90c:	bl	914 <ff_printf>
 910:	b	8b8 <print_data+0x7dc>

00000914 <ff_printf>:
 914:	sub	sp, sp, #12
 918:	push	{fp, lr}
 91c:	mov	fp, sp
 920:	sub	sp, sp, #4
 924:	mov	ip, r0
 928:	add	r0, fp, #8
 92c:	stm	r0, {r1, r2, r3}
 930:	movw	r0, #0
 934:	add	r2, fp, #8
 938:	mov	r1, ip
 93c:	movt	r0, #0
 940:	str	r2, [sp]
 944:	ldr	r0, [r0]
 948:	bl	0 <vfprintf>
 94c:	mov	sp, fp
 950:	pop	{fp, lr}
 954:	add	sp, sp, #12
 958:	bx	lr

0000095c <print_escaped>:
 95c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
 960:	add	fp, sp, #28
 964:	sub	sp, sp, #4
 968:	cmp	r1, #1
 96c:	blt	abc <print_escaped+0x160>
 970:	movw	r6, #0
 974:	movw	r8, #0
 978:	movw	r9, #0
 97c:	movw	sl, #0
 980:	movw	r7, #0
 984:	mov	r4, r1
 988:	mov	r5, r0
 98c:	movt	r6, #0
 990:	movt	r8, #0
 994:	movt	r9, #0
 998:	movt	sl, #0
 99c:	movt	r7, #0
 9a0:	ldrb	r1, [r5]
 9a4:	sub	r0, r1, #8
 9a8:	cmp	r0, #26
 9ac:	bhi	a34 <print_escaped+0xd8>
 9b0:	add	r2, pc, #0
 9b4:	ldr	pc, [r2, r0, lsl #2]
 9b8:	.word	0x00000a24
 9bc:	.word	0x00000a68
 9c0:	.word	0x00000a74
 9c4:	.word	0x00000a4c
 9c8:	.word	0x00000a80
 9cc:	.word	0x00000a8c
 9d0:	.word	0x00000a4c
 9d4:	.word	0x00000a4c
 9d8:	.word	0x00000a4c
 9dc:	.word	0x00000a4c
 9e0:	.word	0x00000a4c
 9e4:	.word	0x00000a4c
 9e8:	.word	0x00000a4c
 9ec:	.word	0x00000a4c
 9f0:	.word	0x00000a4c
 9f4:	.word	0x00000a4c
 9f8:	.word	0x00000a4c
 9fc:	.word	0x00000a4c
 a00:	.word	0x00000a4c
 a04:	.word	0x00000a4c
 a08:	.word	0x00000a4c
 a0c:	.word	0x00000a4c
 a10:	.word	0x00000a4c
 a14:	.word	0x00000a4c
 a18:	.word	0x00000a4c
 a1c:	.word	0x00000a4c
 a20:	.word	0x00000a98
 a24:	movw	r0, #0
 a28:	movt	r0, #0
 a2c:	bl	914 <ff_printf>
 a30:	b	ab0 <print_escaped+0x154>
 a34:	cmp	r1, #92	; 0x5c
 a38:	bne	a4c <print_escaped+0xf0>
 a3c:	movw	r0, #0
 a40:	movt	r0, #0
 a44:	bl	914 <ff_printf>
 a48:	b	ab0 <print_escaped+0x154>
 a4c:	sub	r0, r1, #32
 a50:	uxtb	r0, r0
 a54:	cmp	r0, #94	; 0x5e
 a58:	bhi	aa4 <print_escaped+0x148>
 a5c:	movw	r0, #0
 a60:	movt	r0, #0
 a64:	b	aac <print_escaped+0x150>
 a68:	mov	r0, r6
 a6c:	bl	914 <ff_printf>
 a70:	b	ab0 <print_escaped+0x154>
 a74:	mov	r0, r8
 a78:	bl	914 <ff_printf>
 a7c:	b	ab0 <print_escaped+0x154>
 a80:	mov	r0, r9
 a84:	bl	914 <ff_printf>
 a88:	b	ab0 <print_escaped+0x154>
 a8c:	mov	r0, sl
 a90:	bl	914 <ff_printf>
 a94:	b	ab0 <print_escaped+0x154>
 a98:	mov	r0, r7
 a9c:	bl	914 <ff_printf>
 aa0:	b	ab0 <print_escaped+0x154>
 aa4:	movw	r0, #0
 aa8:	movt	r0, #0
 aac:	bl	914 <ff_printf>
 ab0:	subs	r4, r4, #1
 ab4:	add	r5, r5, #1
 ab8:	bne	9a0 <print_escaped+0x44>
 abc:	sub	sp, fp, #28
 ac0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
