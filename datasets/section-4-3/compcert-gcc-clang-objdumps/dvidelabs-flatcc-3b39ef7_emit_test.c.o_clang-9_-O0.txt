
../compcert-repos/dvidelabs-flatcc-3b39ef7/test/emit_test/CMakeFiles/emit_test.dir/emit_test.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <dbg_emitter>:
       0:	push	{fp, lr}
       4:	mov	fp, sp
       8:	sub	sp, sp, #24
       c:	ldr	ip, [fp, #8]
      10:	str	r0, [fp, #-4]
      14:	str	r1, [fp, #-8]
      18:	str	r2, [sp, #12]
      1c:	str	r3, [sp, #8]
      20:	ldr	r1, [sp, #12]
      24:	ldr	r2, [sp, #8]
      28:	ldr	r3, [fp, #8]
      2c:	movw	r0, #0
      30:	movt	r0, #0
      34:	str	ip, [sp]
      38:	bl	0 <printf>
      3c:	movw	r1, #0
      40:	str	r1, [sp, #4]
      44:	ldr	r0, [sp, #4]
      48:	ldr	r1, [sp, #12]
      4c:	cmp	r0, r1
      50:	bge	fc <dbg_emitter+0xfc>
      54:	ldr	r0, [fp, #-8]
      58:	ldr	r1, [sp, #4]
      5c:	add	r0, r0, r1, lsl #3
      60:	ldr	r0, [r0]
      64:	movw	r1, #0
      68:	movt	r1, #0
      6c:	cmp	r0, r1
      70:	bne	94 <dbg_emitter+0x94>
      74:	ldr	r1, [sp, #8]
      78:	ldr	r0, [fp, #-8]
      7c:	ldr	r2, [sp, #4]
      80:	add	r0, r0, r2, lsl #3
      84:	ldr	r2, [r0, #4]
      88:	movw	r0, #0
      8c:	movt	r0, #0
      90:	bl	0 <printf>
      94:	ldr	r0, [fp, #-8]
      98:	ldr	r1, [sp, #4]
      9c:	add	r0, r0, r1, lsl #3
      a0:	ldr	r0, [r0]
      a4:	movw	r1, #0
      a8:	cmp	r0, r1
      ac:	bne	d0 <dbg_emitter+0xd0>
      b0:	ldr	r1, [sp, #8]
      b4:	ldr	r0, [fp, #-8]
      b8:	ldr	r2, [sp, #4]
      bc:	add	r0, r0, r2, lsl #3
      c0:	ldr	r2, [r0, #4]
      c4:	movw	r0, #0
      c8:	movt	r0, #0
      cc:	bl	0 <printf>
      d0:	ldr	r0, [fp, #-8]
      d4:	ldr	r1, [sp, #4]
      d8:	add	r0, r0, r1, lsl #3
      dc:	ldr	r0, [r0, #4]
      e0:	ldr	r1, [sp, #8]
      e4:	add	r0, r1, r0
      e8:	str	r0, [sp, #8]
      ec:	ldr	r0, [sp, #4]
      f0:	add	r0, r0, #1
      f4:	str	r0, [sp, #4]
      f8:	b	44 <dbg_emitter+0x44>
      fc:	movw	r0, #0
     100:	mov	sp, fp
     104:	pop	{fp, pc}

00000108 <debug_test>:
     108:	push	{r4, r5, fp, lr}
     10c:	add	fp, sp, #8
     110:	sub	sp, sp, #304	; 0x130
     114:	add	r0, sp, #28
     118:	movw	r1, #0
     11c:	and	r1, r1, #255	; 0xff
     120:	movw	r2, #40	; 0x28
     124:	bl	0 <memset>
     128:	add	r0, sp, #72	; 0x48
     12c:	str	r0, [sp, #68]	; 0x44
     130:	movw	r0, #0
     134:	movt	r0, #0
     138:	bl	0 <printf>
     13c:	ldr	r1, [sp, #68]	; 0x44
     140:	str	r0, [sp, #24]
     144:	mov	r0, r1
     148:	movw	r1, #0
     14c:	movt	r1, #0
     150:	movw	r2, #0
     154:	str	r2, [sp, #20]
     158:	ldr	r3, [sp, #20]
     15c:	ldr	ip, [sp, #20]
     160:	str	ip, [sp]
     164:	bl	0 <flatcc_builder_custom_init>
     168:	add	r1, sp, #28
     16c:	ldr	r2, [sp, #68]	; 0x44
     170:	ldr	r3, [sp, #68]	; 0x44
     174:	str	r0, [sp, #16]
     178:	mov	r0, r3
     17c:	movw	r3, #10
     180:	str	r2, [sp, #12]
     184:	mov	r2, r3
     188:	bl	268 <flatbuffers_float_vec_create>
     18c:	mov	r1, sp
     190:	str	r0, [r1, #4]
     194:	mov	r0, #1
     198:	str	r0, [r1]
     19c:	mov	r2, #42	; 0x2a
     1a0:	mov	r3, #0
     1a4:	ldr	r0, [sp, #12]
     1a8:	bl	1c8 <main_create_as_root>
     1ac:	ldr	r1, [sp, #68]	; 0x44
     1b0:	str	r0, [sp, #8]
     1b4:	mov	r0, r1
     1b8:	bl	0 <flatcc_builder_clear>
     1bc:	movw	r0, #0
     1c0:	sub	sp, fp, #8
     1c4:	pop	{r4, r5, fp, pc}

000001c8 <main_create_as_root>:
     1c8:	push	{r4, sl, fp, lr}
     1cc:	add	fp, sp, #8
     1d0:	sub	sp, sp, #40	; 0x28
     1d4:	ldr	r1, [fp, #12]
     1d8:	ldr	ip, [fp, #8]
     1dc:	str	r0, [fp, #-16]
     1e0:	str	r3, [sp, #28]
     1e4:	str	r2, [sp, #24]
     1e8:	strb	ip, [sp, #23]
     1ec:	ldr	r0, [fp, #-16]
     1f0:	movw	r2, #0
     1f4:	str	r1, [sp, #16]
     1f8:	mov	r1, r2
     1fc:	bl	cec <flatbuffers_buffer_start>
     200:	cmp	r0, #0
     204:	beq	214 <main_create_as_root+0x4c>
     208:	movw	r0, #0
     20c:	str	r0, [fp, #-12]
     210:	b	25c <main_create_as_root+0x94>
     214:	ldr	r0, [fp, #-16]
     218:	mov	r1, r0
     21c:	ldr	r2, [sp, #24]
     220:	ldr	r3, [sp, #28]
     224:	ldrb	ip, [sp, #23]
     228:	ldr	lr, [fp, #12]
     22c:	mov	r4, sp
     230:	str	lr, [r4, #4]
     234:	uxtb	ip, ip
     238:	str	ip, [r4]
     23c:	str	r1, [sp, #12]
     240:	bl	d48 <main_create>
     244:	ldr	r1, [sp, #12]
     248:	str	r0, [sp, #8]
     24c:	mov	r0, r1
     250:	ldr	r1, [sp, #8]
     254:	bl	d20 <flatbuffers_buffer_end>
     258:	str	r0, [fp, #-12]
     25c:	ldr	r0, [fp, #-12]
     260:	sub	sp, fp, #8
     264:	pop	{r4, sl, fp, pc}

00000268 <flatbuffers_float_vec_create>:
     268:	push	{fp, lr}
     26c:	mov	fp, sp
     270:	sub	sp, sp, #24
     274:	ldr	r3, [pc, #64]	; 2bc <flatbuffers_float_vec_create+0x54>
     278:	str	r0, [fp, #-4]
     27c:	str	r1, [fp, #-8]
     280:	str	r2, [sp, #12]
     284:	ldr	r0, [fp, #-4]
     288:	ldr	r1, [fp, #-8]
     28c:	ldr	r2, [sp, #12]
     290:	movw	ip, #4
     294:	str	r3, [sp, #8]
     298:	mov	r3, ip
     29c:	movw	ip, #4
     2a0:	uxth	ip, ip
     2a4:	str	ip, [sp]
     2a8:	ldr	ip, [sp, #8]
     2ac:	str	ip, [sp, #4]
     2b0:	bl	0 <flatcc_builder_create_vector>
     2b4:	mov	sp, fp
     2b8:	pop	{fp, pc}
     2bc:	.word	0x3fffffff

000002c0 <emit_test>:
     2c0:	push	{r4, r5, fp, lr}
     2c4:	add	fp, sp, #8
     2c8:	sub	sp, sp, #376	; 0x178
     2cc:	sub	r0, fp, #71	; 0x47
     2d0:	movw	r1, #0
     2d4:	movt	r1, #0
     2d8:	movw	r2, #59	; 0x3b
     2dc:	bl	0 <memcpy>
     2e0:	movw	r0, #0
     2e4:	movt	r0, #0
     2e8:	ldr	r1, [r0]
     2ec:	str	r1, [sp, #44]	; 0x2c
     2f0:	ldr	r1, [r0, #4]
     2f4:	str	r1, [sp, #48]	; 0x30
     2f8:	ldr	r1, [r0, #8]
     2fc:	str	r1, [sp, #52]	; 0x34
     300:	ldr	r0, [r0, #12]
     304:	str	r0, [sp, #56]	; 0x38
     308:	add	r0, sp, #68	; 0x44
     30c:	str	r0, [sp, #64]	; 0x40
     310:	ldr	r0, [sp, #64]	; 0x40
     314:	bl	0 <flatcc_builder_init>
     318:	ldr	r1, [sp, #64]	; 0x40
     31c:	str	r0, [sp, #28]
     320:	mov	r0, r1
     324:	bl	0 <flatcc_builder_get_emit_context>
     328:	add	r1, sp, #44	; 0x2c
     32c:	str	r0, [fp, #-84]	; 0xffffffac
     330:	ldr	r0, [sp, #64]	; 0x40
     334:	movw	r2, #4
     338:	bl	268 <flatbuffers_float_vec_create>
     33c:	str	r0, [sp, #60]	; 0x3c
     340:	ldr	r0, [sp, #64]	; 0x40
     344:	ldr	r1, [sp, #60]	; 0x3c
     348:	mov	r2, sp
     34c:	str	r1, [r2, #4]
     350:	mov	r1, #1
     354:	str	r1, [r2]
     358:	mov	r2, #42	; 0x2a
     35c:	mov	r3, #0
     360:	bl	1c8 <main_create_as_root>
     364:	ldr	r1, [fp, #-84]	; 0xffffffac
     368:	str	r0, [sp, #24]
     36c:	mov	r0, r1
     370:	sub	r1, fp, #76	; 0x4c
     374:	bl	654 <flatcc_emitter_get_direct_buffer>
     378:	str	r0, [fp, #-80]	; 0xffffffb0
     37c:	ldr	r0, [fp, #-80]	; 0xffffffb0
     380:	movw	r1, #0
     384:	cmp	r0, r1
     388:	bne	398 <emit_test+0xd8>
     38c:	mvn	r0, #0
     390:	str	r0, [fp, #-12]
     394:	b	644 <emit_test+0x384>
     398:	b	39c <emit_test+0xdc>
     39c:	ldr	r0, [fp, #-76]	; 0xffffffb4
     3a0:	ldr	r1, [fp, #-84]	; 0xffffffac
     3a4:	str	r0, [sp, #20]
     3a8:	mov	r0, r1
     3ac:	bl	6d8 <flatcc_emitter_get_buffer_size>
     3b0:	ldr	r1, [sp, #20]
     3b4:	cmp	r1, r0
     3b8:	beq	3dc <emit_test+0x11c>
     3bc:	movw	r0, #0
     3c0:	movt	r0, #0
     3c4:	movw	r1, #0
     3c8:	movt	r1, #0
     3cc:	movw	r2, #100	; 0x64
     3d0:	movw	r3, #0
     3d4:	movt	r3, #0
     3d8:	bl	0 <__assert_fail>
     3dc:	b	3e0 <emit_test+0x120>
     3e0:	b	3e4 <emit_test+0x124>
     3e4:	ldr	r0, [fp, #-76]	; 0xffffffb4
     3e8:	ldr	r1, [sp, #64]	; 0x40
     3ec:	str	r0, [sp, #16]
     3f0:	mov	r0, r1
     3f4:	bl	0 <flatcc_builder_get_buffer_size>
     3f8:	ldr	r1, [sp, #16]
     3fc:	cmp	r1, r0
     400:	beq	424 <emit_test+0x164>
     404:	movw	r0, #0
     408:	movt	r0, #0
     40c:	movw	r1, #0
     410:	movt	r1, #0
     414:	movw	r2, #101	; 0x65
     418:	movw	r3, #0
     41c:	movt	r3, #0
     420:	bl	0 <__assert_fail>
     424:	b	428 <emit_test+0x168>
     428:	movw	r0, #0
     42c:	movt	r0, #0
     430:	ldr	r0, [r0]
     434:	ldr	r2, [fp, #-76]	; 0xffffffb4
     438:	movw	r1, #0
     43c:	movt	r1, #0
     440:	bl	0 <fprintf>
     444:	ldr	r1, [fp, #-80]	; 0xffffffb0
     448:	ldr	r2, [fp, #-76]	; 0xffffffb4
     44c:	movw	r3, #0
     450:	movt	r3, #0
     454:	ldr	r3, [r3]
     458:	movw	ip, #0
     45c:	movt	ip, #0
     460:	str	r0, [sp, #12]
     464:	mov	r0, ip
     468:	bl	6f0 <hexdump>
     46c:	ldr	r0, [fp, #-76]	; 0xffffffb4
     470:	cmp	r0, #58	; 0x3a
     474:	beq	498 <emit_test+0x1d8>
     478:	movw	r0, #0
     47c:	movt	r0, #0
     480:	movw	r1, #0
     484:	movt	r1, #0
     488:	movw	r2, #106	; 0x6a
     48c:	movw	r3, #0
     490:	movt	r3, #0
     494:	bl	0 <__assert_fail>
     498:	b	49c <emit_test+0x1dc>
     49c:	b	4a0 <emit_test+0x1e0>
     4a0:	ldr	r0, [fp, #-76]	; 0xffffffb4
     4a4:	movw	r1, #58	; 0x3a
     4a8:	cmp	r1, r0
     4ac:	beq	4d0 <emit_test+0x210>
     4b0:	movw	r0, #0
     4b4:	movt	r0, #0
     4b8:	movw	r1, #0
     4bc:	movt	r1, #0
     4c0:	movw	r2, #107	; 0x6b
     4c4:	movw	r3, #0
     4c8:	movt	r3, #0
     4cc:	bl	0 <__assert_fail>
     4d0:	b	4d4 <emit_test+0x214>
     4d4:	b	4d8 <emit_test+0x218>
     4d8:	sub	r1, fp, #71	; 0x47
     4dc:	ldr	r0, [fp, #-80]	; 0xffffffb0
     4e0:	ldr	r2, [fp, #-76]	; 0xffffffb4
     4e4:	bl	0 <memcmp>
     4e8:	movw	r1, #0
     4ec:	cmp	r1, r0
     4f0:	beq	514 <emit_test+0x254>
     4f4:	movw	r0, #0
     4f8:	movt	r0, #0
     4fc:	movw	r1, #0
     500:	movt	r1, #0
     504:	movw	r2, #108	; 0x6c
     508:	movw	r3, #0
     50c:	movt	r3, #0
     510:	bl	0 <__assert_fail>
     514:	b	518 <emit_test+0x258>
     518:	ldr	r0, [fp, #-80]	; 0xffffffb0
     51c:	bl	8c8 <main_as_root>
     520:	str	r0, [sp, #40]	; 0x28
     524:	ldr	r0, [sp, #40]	; 0x28
     528:	bl	938 <main_time>
     52c:	str	r1, [sp, #36]	; 0x24
     530:	str	r0, [sp, #32]
     534:	ldr	r0, [sp, #32]
     538:	ldr	r1, [sp, #36]	; 0x24
     53c:	eor	r0, r0, #42	; 0x2a
     540:	orr	r0, r0, r1
     544:	cmp	r0, #0
     548:	beq	570 <emit_test+0x2b0>
     54c:	b	550 <emit_test+0x290>
     550:	movw	r0, #0
     554:	movt	r0, #0
     558:	movw	r1, #0
     55c:	movt	r1, #0
     560:	movw	r2, #112	; 0x70
     564:	movw	r3, #0
     568:	movt	r3, #0
     56c:	bl	0 <__assert_fail>
     570:	b	574 <emit_test+0x2b4>
     574:	b	578 <emit_test+0x2b8>
     578:	ldr	r0, [sp, #40]	; 0x28
     57c:	bl	a34 <main_device>
     580:	and	r0, r0, #255	; 0xff
     584:	cmp	r0, #1
     588:	beq	5ac <emit_test+0x2ec>
     58c:	movw	r0, #0
     590:	movt	r0, #0
     594:	movw	r1, #0
     598:	movt	r1, #0
     59c:	movw	r2, #113	; 0x71
     5a0:	movw	r3, #0
     5a4:	movt	r3, #0
     5a8:	bl	0 <__assert_fail>
     5ac:	b	5b0 <emit_test+0x2f0>
     5b0:	b	5b4 <emit_test+0x2f4>
     5b4:	ldr	r0, [sp, #40]	; 0x28
     5b8:	bl	b3c <main_samples>
     5bc:	bl	b1c <flatbuffers_float_vec_len>
     5c0:	cmp	r0, #4
     5c4:	beq	5e8 <emit_test+0x328>
     5c8:	movw	r0, #0
     5cc:	movt	r0, #0
     5d0:	movw	r1, #0
     5d4:	movt	r1, #0
     5d8:	movw	r2, #114	; 0x72
     5dc:	movw	r3, #0
     5e0:	movt	r3, #0
     5e4:	bl	0 <__assert_fail>
     5e8:	b	5ec <emit_test+0x32c>
     5ec:	b	5f0 <emit_test+0x330>
     5f0:	ldr	r0, [sp, #40]	; 0x28
     5f4:	bl	b3c <main_samples>
     5f8:	movw	r1, #2
     5fc:	bl	c38 <flatbuffers_float_vec_at>
     600:	vldr	s2, [pc, #72]	; 650 <emit_test+0x390>
     604:	vcmp.f32	s0, s2
     608:	vmrs	APSR_nzcv, fpscr
     60c:	beq	630 <emit_test+0x370>
     610:	movw	r0, #0
     614:	movt	r0, #0
     618:	movw	r1, #0
     61c:	movt	r1, #0
     620:	movw	r2, #115	; 0x73
     624:	movw	r3, #0
     628:	movt	r3, #0
     62c:	bl	0 <__assert_fail>
     630:	b	634 <emit_test+0x374>
     634:	ldr	r0, [sp, #64]	; 0x40
     638:	bl	0 <flatcc_builder_clear>
     63c:	movw	r0, #0
     640:	str	r0, [fp, #-12]
     644:	ldr	r0, [fp, #-12]
     648:	sub	sp, fp, #8
     64c:	pop	{r4, r5, fp, pc}
     650:	.word	0x3f99999a

00000654 <flatcc_emitter_get_direct_buffer>:
     654:	sub	sp, sp, #12
     658:	str	r0, [sp, #4]
     65c:	str	r1, [sp]
     660:	ldr	r0, [sp, #4]
     664:	ldr	r0, [r0]
     668:	ldr	r1, [sp, #4]
     66c:	ldr	r1, [r1, #4]
     670:	cmp	r0, r1
     674:	bne	6a8 <flatcc_emitter_get_direct_buffer+0x54>
     678:	ldr	r0, [sp]
     67c:	movw	r1, #0
     680:	cmp	r0, r1
     684:	beq	698 <flatcc_emitter_get_direct_buffer+0x44>
     688:	ldr	r0, [sp, #4]
     68c:	ldr	r0, [r0, #24]
     690:	ldr	r1, [sp]
     694:	str	r0, [r1]
     698:	ldr	r0, [sp, #4]
     69c:	ldr	r0, [r0, #8]
     6a0:	str	r0, [sp, #8]
     6a4:	b	6cc <flatcc_emitter_get_direct_buffer+0x78>
     6a8:	ldr	r0, [sp]
     6ac:	movw	r1, #0
     6b0:	cmp	r0, r1
     6b4:	beq	6c4 <flatcc_emitter_get_direct_buffer+0x70>
     6b8:	ldr	r0, [sp]
     6bc:	movw	r1, #0
     6c0:	str	r1, [r0]
     6c4:	movw	r0, #0
     6c8:	str	r0, [sp, #8]
     6cc:	ldr	r0, [sp, #8]
     6d0:	add	sp, sp, #12
     6d4:	bx	lr

000006d8 <flatcc_emitter_get_buffer_size>:
     6d8:	sub	sp, sp, #4
     6dc:	str	r0, [sp]
     6e0:	ldr	r0, [sp]
     6e4:	ldr	r0, [r0, #24]
     6e8:	add	sp, sp, #4
     6ec:	bx	lr

000006f0 <hexdump>:
     6f0:	push	{fp, lr}
     6f4:	mov	fp, sp
     6f8:	sub	sp, sp, #48	; 0x30
     6fc:	str	r0, [fp, #-4]
     700:	str	r1, [fp, #-8]
     704:	str	r2, [fp, #-12]
     708:	str	r3, [fp, #-16]
     70c:	ldr	r0, [fp, #-8]
     710:	str	r0, [sp, #4]
     714:	ldr	r0, [fp, #-4]
     718:	movw	r1, #0
     71c:	cmp	r0, r1
     720:	beq	738 <hexdump+0x48>
     724:	ldr	r0, [fp, #-16]
     728:	ldr	r2, [fp, #-4]
     72c:	movw	r1, #0
     730:	movt	r1, #0
     734:	bl	0 <fprintf>
     738:	movw	r0, #0
     73c:	str	r0, [fp, #-20]	; 0xffffffec
     740:	ldr	r0, [fp, #-20]	; 0xffffffec
     744:	ldr	r1, [fp, #-12]
     748:	cmp	r0, r1
     74c:	bcs	878 <hexdump+0x188>
     750:	ldr	r0, [fp, #-20]	; 0xffffffec
     754:	and	r0, r0, #15
     758:	cmp	r0, #0
     75c:	bne	798 <hexdump+0xa8>
     760:	ldr	r0, [fp, #-20]	; 0xffffffec
     764:	cmp	r0, #0
     768:	beq	780 <hexdump+0x90>
     76c:	add	r2, sp, #11
     770:	ldr	r0, [fp, #-16]
     774:	movw	r1, #0
     778:	movt	r1, #0
     77c:	bl	0 <fprintf>
     780:	ldr	r0, [fp, #-16]
     784:	ldr	r2, [fp, #-20]	; 0xffffffec
     788:	movw	r1, #0
     78c:	movt	r1, #0
     790:	bl	0 <fprintf>
     794:	b	7bc <hexdump+0xcc>
     798:	ldr	r0, [fp, #-20]	; 0xffffffec
     79c:	and	r0, r0, #7
     7a0:	cmp	r0, #0
     7a4:	bne	7b8 <hexdump+0xc8>
     7a8:	ldr	r0, [fp, #-16]
     7ac:	movw	r1, #0
     7b0:	movt	r1, #0
     7b4:	bl	0 <fprintf>
     7b8:	b	7bc <hexdump+0xcc>
     7bc:	ldr	r0, [fp, #-16]
     7c0:	ldr	r1, [sp, #4]
     7c4:	ldr	r2, [fp, #-20]	; 0xffffffec
     7c8:	add	r1, r1, r2
     7cc:	ldrb	r2, [r1]
     7d0:	movw	r1, #0
     7d4:	movt	r1, #0
     7d8:	bl	0 <fprintf>
     7dc:	ldr	r1, [sp, #4]
     7e0:	ldr	r2, [fp, #-20]	; 0xffffffec
     7e4:	add	r1, r1, r2
     7e8:	ldrb	r1, [r1]
     7ec:	cmp	r1, #32
     7f0:	blt	80c <hexdump+0x11c>
     7f4:	ldr	r0, [sp, #4]
     7f8:	ldr	r1, [fp, #-20]	; 0xffffffec
     7fc:	add	r0, r0, r1
     800:	ldrb	r0, [r0]
     804:	cmp	r0, #126	; 0x7e
     808:	ble	828 <hexdump+0x138>
     80c:	ldr	r0, [fp, #-20]	; 0xffffffec
     810:	and	r0, r0, #15
     814:	add	r1, sp, #11
     818:	add	r0, r1, r0
     81c:	movw	r1, #46	; 0x2e
     820:	strb	r1, [r0]
     824:	b	84c <hexdump+0x15c>
     828:	ldr	r0, [sp, #4]
     82c:	ldr	r1, [fp, #-20]	; 0xffffffec
     830:	add	r0, r0, r1
     834:	ldrb	r0, [r0]
     838:	ldr	r1, [fp, #-20]	; 0xffffffec
     83c:	and	r1, r1, #15
     840:	add	r2, sp, #11
     844:	add	r1, r2, r1
     848:	strb	r0, [r1]
     84c:	ldr	r0, [fp, #-20]	; 0xffffffec
     850:	and	r0, r0, #15
     854:	add	r0, r0, #1
     858:	add	r1, sp, #11
     85c:	add	r0, r1, r0
     860:	movw	r1, #0
     864:	strb	r1, [r0]
     868:	ldr	r0, [fp, #-20]	; 0xffffffec
     86c:	add	r0, r0, #1
     870:	str	r0, [fp, #-20]	; 0xffffffec
     874:	b	740 <hexdump+0x50>
     878:	b	87c <hexdump+0x18c>
     87c:	ldr	r0, [fp, #-20]	; 0xffffffec
     880:	and	r0, r0, #15
     884:	cmp	r0, #0
     888:	beq	8ac <hexdump+0x1bc>
     88c:	ldr	r0, [fp, #-16]
     890:	movw	r1, #0
     894:	movt	r1, #0
     898:	bl	0 <fprintf>
     89c:	ldr	r1, [fp, #-20]	; 0xffffffec
     8a0:	add	r1, r1, #1
     8a4:	str	r1, [fp, #-20]	; 0xffffffec
     8a8:	b	87c <hexdump+0x18c>
     8ac:	add	r2, sp, #11
     8b0:	ldr	r0, [fp, #-16]
     8b4:	movw	r1, #0
     8b8:	movt	r1, #0
     8bc:	bl	0 <fprintf>
     8c0:	mov	sp, fp
     8c4:	pop	{fp, pc}

000008c8 <main_as_root>:
     8c8:	push	{fp, lr}
     8cc:	mov	fp, sp
     8d0:	sub	sp, sp, #16
     8d4:	str	r0, [fp, #-4]
     8d8:	movw	r0, #0
     8dc:	str	r0, [sp, #8]
     8e0:	ldr	r1, [fp, #-4]
     8e4:	cmp	r1, r0
     8e8:	beq	900 <main_as_root+0x38>
     8ec:	ldr	r0, [fp, #-4]
     8f0:	ldr	r1, [sp, #8]
     8f4:	bl	1088 <flatbuffers_has_identifier>
     8f8:	cmp	r0, #0
     8fc:	bne	90c <main_as_root+0x44>
     900:	movw	r0, #0
     904:	str	r0, [sp, #4]
     908:	b	92c <main_as_root+0x64>
     90c:	ldr	r0, [fp, #-4]
     910:	ldr	r1, [fp, #-4]
     914:	str	r0, [sp]
     918:	mov	r0, r1
     91c:	bl	1134 <__flatbuffers_uoffset_read_from_pe>
     920:	ldr	r1, [sp]
     924:	add	r0, r1, r0
     928:	str	r0, [sp, #4]
     92c:	ldr	r0, [sp, #4]
     930:	mov	sp, fp
     934:	pop	{fp, pc}

00000938 <main_time>:
     938:	push	{fp, lr}
     93c:	mov	fp, sp
     940:	sub	sp, sp, #32
     944:	str	r0, [fp, #-4]
     948:	movw	r0, #0
     94c:	strh	r0, [fp, #-6]
     950:	ldr	r0, [fp, #-4]
     954:	movw	r1, #0
     958:	cmp	r0, r1
     95c:	beq	968 <main_time+0x30>
     960:	b	964 <main_time+0x2c>
     964:	b	988 <main_time+0x50>
     968:	movw	r0, #0
     96c:	movt	r0, #0
     970:	movw	r1, #0
     974:	movt	r1, #0
     978:	movw	r2, #41	; 0x29
     97c:	movw	r3, #0
     980:	movt	r3, #0
     984:	bl	0 <__assert_fail>
     988:	mov	r0, #0
     98c:	strh	r0, [fp, #-8]
     990:	ldr	r0, [fp, #-4]
     994:	str	r0, [sp, #16]
     998:	bl	11b8 <__flatbuffers_soffset_read_from_pe>
     99c:	ldr	r1, [sp, #16]
     9a0:	sub	r0, r1, r0
     9a4:	str	r0, [fp, #-12]
     9a8:	ldr	r0, [fp, #-12]
     9ac:	bl	11dc <__flatbuffers_voffset_read_from_pe>
     9b0:	ldrh	r1, [fp, #-8]
     9b4:	add	r1, r1, #3
     9b8:	lsl	r1, r1, #1
     9bc:	cmp	r0, r1
     9c0:	bcc	9dc <main_time+0xa4>
     9c4:	ldr	r0, [fp, #-12]
     9c8:	ldrh	r1, [fp, #-8]
     9cc:	add	r0, r0, r1, lsl #1
     9d0:	add	r0, r0, #4
     9d4:	bl	11dc <__flatbuffers_voffset_read_from_pe>
     9d8:	strh	r0, [fp, #-6]
     9dc:	ldrh	r0, [fp, #-6]
     9e0:	cmp	r0, #0
     9e4:	beq	a04 <main_time+0xcc>
     9e8:	ldr	r0, [fp, #-4]
     9ec:	ldrh	r1, [fp, #-6]
     9f0:	add	r0, r0, r1
     9f4:	bl	1204 <flatbuffers_int64_read_from_pe>
     9f8:	str	r0, [sp, #12]
     9fc:	str	r1, [sp, #8]
     a00:	b	a18 <main_time+0xe0>
     a04:	mov	r0, #0
     a08:	mov	r1, r0
     a0c:	str	r1, [sp, #12]
     a10:	str	r0, [sp, #8]
     a14:	b	a18 <main_time+0xe0>
     a18:	ldr	r0, [sp, #8]
     a1c:	ldr	r1, [sp, #12]
     a20:	str	r0, [sp, #4]
     a24:	mov	r0, r1
     a28:	ldr	r1, [sp, #4]
     a2c:	mov	sp, fp
     a30:	pop	{fp, pc}

00000a34 <main_device>:
     a34:	push	{fp, lr}
     a38:	mov	fp, sp
     a3c:	sub	sp, sp, #24
     a40:	str	r0, [fp, #-4]
     a44:	movw	r0, #0
     a48:	strh	r0, [fp, #-6]
     a4c:	ldr	r0, [fp, #-4]
     a50:	movw	r1, #0
     a54:	cmp	r0, r1
     a58:	beq	a64 <main_device+0x30>
     a5c:	b	a60 <main_device+0x2c>
     a60:	b	a84 <main_device+0x50>
     a64:	movw	r0, #0
     a68:	movt	r0, #0
     a6c:	movw	r1, #0
     a70:	movt	r1, #0
     a74:	movw	r2, #42	; 0x2a
     a78:	movw	r3, #0
     a7c:	movt	r3, #0
     a80:	bl	0 <__assert_fail>
     a84:	mov	r0, #1
     a88:	strh	r0, [fp, #-8]
     a8c:	ldr	r0, [fp, #-4]
     a90:	str	r0, [sp, #8]
     a94:	bl	11b8 <__flatbuffers_soffset_read_from_pe>
     a98:	ldr	r1, [sp, #8]
     a9c:	sub	r0, r1, r0
     aa0:	str	r0, [sp, #12]
     aa4:	ldr	r0, [sp, #12]
     aa8:	bl	11dc <__flatbuffers_voffset_read_from_pe>
     aac:	ldrh	r1, [fp, #-8]
     ab0:	add	r1, r1, #3
     ab4:	lsl	r1, r1, #1
     ab8:	cmp	r0, r1
     abc:	bcc	ad8 <main_device+0xa4>
     ac0:	ldr	r0, [sp, #12]
     ac4:	ldrh	r1, [fp, #-8]
     ac8:	add	r0, r0, r1, lsl #1
     acc:	add	r0, r0, #4
     ad0:	bl	11dc <__flatbuffers_voffset_read_from_pe>
     ad4:	strh	r0, [fp, #-6]
     ad8:	ldrh	r0, [fp, #-6]
     adc:	cmp	r0, #0
     ae0:	beq	b00 <main_device+0xcc>
     ae4:	ldr	r0, [fp, #-4]
     ae8:	ldrh	r1, [fp, #-6]
     aec:	add	r0, r0, r1
     af0:	bl	127c <flatbuffers_uint8_read_from_pe>
     af4:	and	r0, r0, #255	; 0xff
     af8:	str	r0, [sp, #4]
     afc:	b	b0c <main_device+0xd8>
     b00:	movw	r0, #0
     b04:	str	r0, [sp, #4]
     b08:	b	b0c <main_device+0xd8>
     b0c:	ldr	r0, [sp, #4]
     b10:	and	r0, r0, #255	; 0xff
     b14:	mov	sp, fp
     b18:	pop	{fp, pc}

00000b1c <flatbuffers_float_vec_len>:
     b1c:	push	{fp, lr}
     b20:	mov	fp, sp
     b24:	sub	sp, sp, #8
     b28:	str	r0, [sp, #4]
     b2c:	ldr	r0, [sp, #4]
     b30:	bl	12b8 <flatbuffers_vec_len>
     b34:	mov	sp, fp
     b38:	pop	{fp, pc}

00000b3c <main_samples>:
     b3c:	push	{fp, lr}
     b40:	mov	fp, sp
     b44:	sub	sp, sp, #32
     b48:	str	r0, [fp, #-8]
     b4c:	movw	r0, #0
     b50:	strh	r0, [fp, #-14]
     b54:	ldr	r0, [fp, #-8]
     b58:	movw	r1, #0
     b5c:	cmp	r0, r1
     b60:	beq	b6c <main_samples+0x30>
     b64:	b	b68 <main_samples+0x2c>
     b68:	b	b8c <main_samples+0x50>
     b6c:	movw	r0, #0
     b70:	movt	r0, #0
     b74:	movw	r1, #0
     b78:	movt	r1, #0
     b7c:	movw	r2, #43	; 0x2b
     b80:	movw	r3, #0
     b84:	movt	r3, #0
     b88:	bl	0 <__assert_fail>
     b8c:	mov	r0, #2
     b90:	strh	r0, [sp, #16]
     b94:	ldr	r0, [fp, #-8]
     b98:	str	r0, [sp, #8]
     b9c:	bl	11b8 <__flatbuffers_soffset_read_from_pe>
     ba0:	ldr	r1, [sp, #8]
     ba4:	sub	r0, r1, r0
     ba8:	str	r0, [sp, #12]
     bac:	ldr	r0, [sp, #12]
     bb0:	bl	11dc <__flatbuffers_voffset_read_from_pe>
     bb4:	ldrh	r1, [sp, #16]
     bb8:	add	r1, r1, #3
     bbc:	lsl	r1, r1, #1
     bc0:	cmp	r0, r1
     bc4:	bcc	be0 <main_samples+0xa4>
     bc8:	ldr	r0, [sp, #12]
     bcc:	ldrh	r1, [sp, #16]
     bd0:	add	r0, r0, r1, lsl #1
     bd4:	add	r0, r0, #4
     bd8:	bl	11dc <__flatbuffers_voffset_read_from_pe>
     bdc:	strh	r0, [fp, #-14]
     be0:	ldrsh	r0, [fp, #-14]
     be4:	cmp	r0, #0
     be8:	beq	c24 <main_samples+0xe8>
     bec:	ldr	r0, [fp, #-8]
     bf0:	ldrh	r1, [fp, #-14]
     bf4:	add	r0, r0, r1
     bf8:	str	r0, [fp, #-12]
     bfc:	ldr	r0, [fp, #-12]
     c00:	add	r0, r0, #4
     c04:	ldr	r1, [fp, #-12]
     c08:	str	r0, [sp, #4]
     c0c:	mov	r0, r1
     c10:	bl	1134 <__flatbuffers_uoffset_read_from_pe>
     c14:	ldr	r1, [sp, #4]
     c18:	add	r0, r1, r0
     c1c:	str	r0, [fp, #-4]
     c20:	b	c2c <main_samples+0xf0>
     c24:	movw	r0, #0
     c28:	str	r0, [fp, #-4]
     c2c:	ldr	r0, [fp, #-4]
     c30:	mov	sp, fp
     c34:	pop	{fp, pc}

00000c38 <flatbuffers_float_vec_at>:
     c38:	push	{fp, lr}
     c3c:	mov	fp, sp
     c40:	sub	sp, sp, #8
     c44:	str	r0, [sp, #4]
     c48:	str	r1, [sp]
     c4c:	ldr	r0, [sp, #4]
     c50:	bl	12b8 <flatbuffers_vec_len>
     c54:	ldr	r1, [sp]
     c58:	cmp	r0, r1
     c5c:	bls	c68 <flatbuffers_float_vec_at+0x30>
     c60:	b	c64 <flatbuffers_float_vec_at+0x2c>
     c64:	b	c88 <flatbuffers_float_vec_at+0x50>
     c68:	movw	r0, #0
     c6c:	movt	r0, #0
     c70:	movw	r1, #0
     c74:	movt	r1, #0
     c78:	movw	r2, #403	; 0x193
     c7c:	movw	r3, #0
     c80:	movt	r3, #0
     c84:	bl	0 <__assert_fail>
     c88:	ldr	r0, [sp, #4]
     c8c:	ldr	r1, [sp]
     c90:	add	r0, r0, r1, lsl #2
     c94:	bl	1308 <flatbuffers_float_read_from_pe>
     c98:	mov	sp, fp
     c9c:	pop	{fp, pc}

00000ca0 <main>:
     ca0:	push	{fp, lr}
     ca4:	mov	fp, sp
     ca8:	sub	sp, sp, #16
     cac:	movw	r2, #0
     cb0:	str	r2, [fp, #-4]
     cb4:	str	r0, [sp, #8]
     cb8:	str	r1, [sp, #4]
     cbc:	str	r2, [sp]
     cc0:	bl	108 <debug_test>
     cc4:	ldr	r1, [sp]
     cc8:	orr	r0, r1, r0
     ccc:	str	r0, [sp]
     cd0:	bl	2c0 <emit_test>
     cd4:	ldr	r1, [sp]
     cd8:	orr	r0, r1, r0
     cdc:	str	r0, [sp]
     ce0:	ldr	r0, [sp]
     ce4:	mov	sp, fp
     ce8:	pop	{fp, pc}

00000cec <flatbuffers_buffer_start>:
     cec:	push	{fp, lr}
     cf0:	mov	fp, sp
     cf4:	sub	sp, sp, #8
     cf8:	str	r0, [sp, #4]
     cfc:	str	r1, [sp]
     d00:	ldr	r0, [sp, #4]
     d04:	ldr	r1, [sp]
     d08:	movw	r2, #0
     d0c:	uxth	r2, r2
     d10:	movw	r3, #0
     d14:	bl	0 <flatcc_builder_start_buffer>
     d18:	mov	sp, fp
     d1c:	pop	{fp, pc}

00000d20 <flatbuffers_buffer_end>:
     d20:	push	{fp, lr}
     d24:	mov	fp, sp
     d28:	sub	sp, sp, #8
     d2c:	str	r0, [sp, #4]
     d30:	str	r1, [sp]
     d34:	ldr	r0, [sp, #4]
     d38:	ldr	r1, [sp]
     d3c:	bl	0 <flatcc_builder_end_buffer>
     d40:	mov	sp, fp
     d44:	pop	{fp, pc}

00000d48 <main_create>:
     d48:	push	{fp, lr}
     d4c:	mov	fp, sp
     d50:	sub	sp, sp, #24
     d54:	ldr	r1, [fp, #12]
     d58:	ldr	ip, [fp, #8]
     d5c:	str	r0, [fp, #-8]
     d60:	str	r3, [sp, #12]
     d64:	str	r2, [sp, #8]
     d68:	strb	ip, [sp, #7]
     d6c:	ldr	r0, [fp, #-8]
     d70:	str	r1, [sp]
     d74:	bl	de4 <main_start>
     d78:	cmp	r0, #0
     d7c:	bne	dc0 <main_create+0x78>
     d80:	ldr	r0, [fp, #-8]
     d84:	ldr	r2, [sp, #8]
     d88:	ldr	r3, [sp, #12]
     d8c:	bl	e08 <main_time_add>
     d90:	cmp	r0, #0
     d94:	bne	dc0 <main_create+0x78>
     d98:	ldr	r0, [fp, #-8]
     d9c:	ldr	r1, [fp, #12]
     da0:	bl	e9c <main_samples_add>
     da4:	cmp	r0, #0
     da8:	bne	dc0 <main_create+0x78>
     dac:	ldr	r0, [fp, #-8]
     db0:	ldrb	r1, [sp, #7]
     db4:	bl	f08 <main_device_add>
     db8:	cmp	r0, #0
     dbc:	beq	dcc <main_create+0x84>
     dc0:	movw	r0, #0
     dc4:	str	r0, [fp, #-4]
     dc8:	b	dd8 <main_create+0x90>
     dcc:	ldr	r0, [fp, #-8]
     dd0:	bl	f8c <main_end>
     dd4:	str	r0, [fp, #-4]
     dd8:	ldr	r0, [fp, #-4]
     ddc:	mov	sp, fp
     de0:	pop	{fp, pc}

00000de4 <main_start>:
     de4:	push	{fp, lr}
     de8:	mov	fp, sp
     dec:	sub	sp, sp, #8
     df0:	str	r0, [sp, #4]
     df4:	ldr	r0, [sp, #4]
     df8:	movw	r1, #3
     dfc:	bl	0 <flatcc_builder_start_table>
     e00:	mov	sp, fp
     e04:	pop	{fp, pc}

00000e08 <main_time_add>:
     e08:	push	{fp, lr}
     e0c:	mov	fp, sp
     e10:	sub	sp, sp, #24
     e14:	str	r0, [fp, #-8]
     e18:	str	r3, [sp, #12]
     e1c:	str	r2, [sp, #8]
     e20:	ldr	r0, [sp, #8]
     e24:	ldr	r1, [sp, #12]
     e28:	orr	r0, r0, r1
     e2c:	cmp	r0, #0
     e30:	bne	e44 <main_time_add+0x3c>
     e34:	b	e38 <main_time_add+0x30>
     e38:	movw	r0, #0
     e3c:	str	r0, [fp, #-4]
     e40:	b	e90 <main_time_add+0x88>
     e44:	ldr	r0, [fp, #-8]
     e48:	movw	r1, #0
     e4c:	movw	r2, #8
     e50:	movw	r3, #8
     e54:	uxth	r3, r3
     e58:	bl	0 <flatcc_builder_table_add>
     e5c:	str	r0, [sp, #4]
     e60:	movw	r1, #0
     e64:	cmp	r0, r1
     e68:	bne	e78 <main_time_add+0x70>
     e6c:	mvn	r0, #0
     e70:	str	r0, [fp, #-4]
     e74:	b	e90 <main_time_add+0x88>
     e78:	ldr	r0, [sp, #4]
     e7c:	ldr	r2, [sp, #8]
     e80:	ldr	r3, [sp, #12]
     e84:	bl	fec <flatbuffers_int64_assign_to_pe>
     e88:	movw	r1, #0
     e8c:	str	r1, [fp, #-4]
     e90:	ldr	r0, [fp, #-4]
     e94:	mov	sp, fp
     e98:	pop	{fp, pc}

00000e9c <main_samples_add>:
     e9c:	push	{fp, lr}
     ea0:	mov	fp, sp
     ea4:	sub	sp, sp, #16
     ea8:	str	r0, [fp, #-4]
     eac:	str	r1, [sp, #8]
     eb0:	ldr	r0, [sp, #8]
     eb4:	cmp	r0, #0
     eb8:	beq	ef0 <main_samples_add+0x54>
     ebc:	ldr	r0, [fp, #-4]
     ec0:	movw	r1, #2
     ec4:	bl	0 <flatcc_builder_table_add_offset>
     ec8:	str	r0, [sp, #4]
     ecc:	movw	r1, #0
     ed0:	cmp	r0, r1
     ed4:	beq	ef0 <main_samples_add+0x54>
     ed8:	ldr	r0, [sp, #8]
     edc:	ldr	r1, [sp, #4]
     ee0:	str	r0, [r1]
     ee4:	movw	r0, #0
     ee8:	str	r0, [sp]
     eec:	b	efc <main_samples_add+0x60>
     ef0:	mvn	r0, #0
     ef4:	str	r0, [sp]
     ef8:	b	efc <main_samples_add+0x60>
     efc:	ldr	r0, [sp]
     f00:	mov	sp, fp
     f04:	pop	{fp, pc}

00000f08 <main_device_add>:
     f08:	push	{fp, lr}
     f0c:	mov	fp, sp
     f10:	sub	sp, sp, #24
     f14:	str	r0, [fp, #-8]
     f18:	strb	r1, [fp, #-9]
     f1c:	ldrb	r0, [fp, #-9]
     f20:	cmp	r0, #0
     f24:	bne	f34 <main_device_add+0x2c>
     f28:	movw	r0, #0
     f2c:	str	r0, [fp, #-4]
     f30:	b	f80 <main_device_add+0x78>
     f34:	ldr	r0, [fp, #-8]
     f38:	movw	r1, #1
     f3c:	str	r1, [sp, #4]
     f40:	ldr	r2, [sp, #4]
     f44:	movw	r3, #1
     f48:	uxth	r3, r3
     f4c:	bl	0 <flatcc_builder_table_add>
     f50:	str	r0, [sp, #8]
     f54:	movw	r1, #0
     f58:	cmp	r0, r1
     f5c:	bne	f6c <main_device_add+0x64>
     f60:	mvn	r0, #0
     f64:	str	r0, [fp, #-4]
     f68:	b	f80 <main_device_add+0x78>
     f6c:	ldr	r0, [sp, #8]
     f70:	ldrb	r1, [fp, #-9]
     f74:	bl	1044 <flatbuffers_uint8_assign_to_pe>
     f78:	movw	r1, #0
     f7c:	str	r1, [fp, #-4]
     f80:	ldr	r0, [fp, #-4]
     f84:	mov	sp, fp
     f88:	pop	{fp, pc}

00000f8c <main_end>:
     f8c:	push	{fp, lr}
     f90:	mov	fp, sp
     f94:	sub	sp, sp, #8
     f98:	str	r0, [sp, #4]
     f9c:	ldr	r0, [sp, #4]
     fa0:	movw	r1, #0
     fa4:	movt	r1, #0
     fa8:	movw	r2, #0
     fac:	bl	0 <flatcc_builder_check_required>
     fb0:	cmp	r0, #0
     fb4:	beq	fbc <main_end+0x30>
     fb8:	b	fdc <main_end+0x50>
     fbc:	movw	r0, #0
     fc0:	movt	r0, #0
     fc4:	movw	r1, #0
     fc8:	movt	r1, #0
     fcc:	movw	r2, #21
     fd0:	movw	r3, #0
     fd4:	movt	r3, #0
     fd8:	bl	0 <__assert_fail>
     fdc:	ldr	r0, [sp, #4]
     fe0:	bl	0 <flatcc_builder_end_table>
     fe4:	mov	sp, fp
     fe8:	pop	{fp, pc}

00000fec <flatbuffers_int64_assign_to_pe>:
     fec:	push	{fp, lr}
     ff0:	mov	fp, sp
     ff4:	sub	sp, sp, #16
     ff8:	str	r0, [fp, #-4]
     ffc:	str	r3, [sp, #4]
    1000:	str	r2, [sp]
    1004:	ldr	r0, [sp]
    1008:	ldr	r1, [sp, #4]
    100c:	bl	1028 <flatbuffers_int64_cast_to_pe>
    1010:	ldr	r2, [fp, #-4]
    1014:	str	r1, [r2, #4]
    1018:	str	r0, [r2]
    101c:	ldr	r0, [fp, #-4]
    1020:	mov	sp, fp
    1024:	pop	{fp, pc}

00001028 <flatbuffers_int64_cast_to_pe>:
    1028:	sub	sp, sp, #8
    102c:	str	r0, [sp]
    1030:	str	r1, [sp, #4]
    1034:	ldr	r0, [sp]
    1038:	ldr	r1, [sp, #4]
    103c:	add	sp, sp, #8
    1040:	bx	lr

00001044 <flatbuffers_uint8_assign_to_pe>:
    1044:	push	{fp, lr}
    1048:	mov	fp, sp
    104c:	sub	sp, sp, #8
    1050:	str	r0, [sp, #4]
    1054:	strb	r1, [sp, #3]
    1058:	ldrb	r0, [sp, #3]
    105c:	bl	1074 <flatbuffers_uint8_cast_to_pe>
    1060:	ldr	r1, [sp, #4]
    1064:	strb	r0, [r1]
    1068:	ldr	r0, [sp, #4]
    106c:	mov	sp, fp
    1070:	pop	{fp, pc}

00001074 <flatbuffers_uint8_cast_to_pe>:
    1074:	sub	sp, sp, #4
    1078:	strb	r0, [sp, #3]
    107c:	ldrb	r0, [sp, #3]
    1080:	add	sp, sp, #4
    1084:	bx	lr

00001088 <flatbuffers_has_identifier>:
    1088:	push	{fp, lr}
    108c:	mov	fp, sp
    1090:	sub	sp, sp, #32
    1094:	str	r0, [fp, #-8]
    1098:	str	r1, [fp, #-12]
    109c:	movw	r0, #0
    10a0:	str	r0, [sp, #12]
    10a4:	ldr	r1, [fp, #-12]
    10a8:	cmp	r1, r0
    10ac:	bne	10bc <flatbuffers_has_identifier+0x34>
    10b0:	movw	r0, #1
    10b4:	str	r0, [fp, #-4]
    10b8:	b	1128 <flatbuffers_has_identifier+0xa0>
    10bc:	add	r0, sp, #12
    10c0:	ldr	r1, [fp, #-12]
    10c4:	movw	r2, #4
    10c8:	bl	0 <strncpy>
    10cc:	ldr	r1, [sp, #12]
    10d0:	str	r0, [sp, #8]
    10d4:	mov	r0, r1
    10d8:	bl	1158 <__flatbuffers_thash_cast_from_le>
    10dc:	str	r0, [sp, #12]
    10e0:	ldr	r0, [fp, #-8]
    10e4:	add	r0, r0, #4
    10e8:	bl	116c <__flatbuffers_thash_read_from_pe>
    10ec:	str	r0, [sp, #16]
    10f0:	ldr	r0, [sp, #12]
    10f4:	cmp	r0, #0
    10f8:	movw	r0, #1
    10fc:	str	r0, [sp, #4]
    1100:	beq	111c <flatbuffers_has_identifier+0x94>
    1104:	ldr	r0, [sp, #16]
    1108:	ldr	r1, [sp, #12]
    110c:	cmp	r0, r1
    1110:	movw	r0, #0
    1114:	moveq	r0, #1
    1118:	str	r0, [sp, #4]
    111c:	ldr	r0, [sp, #4]
    1120:	and	r0, r0, #1
    1124:	str	r0, [fp, #-4]
    1128:	ldr	r0, [fp, #-4]
    112c:	mov	sp, fp
    1130:	pop	{fp, pc}

00001134 <__flatbuffers_uoffset_read_from_pe>:
    1134:	push	{fp, lr}
    1138:	mov	fp, sp
    113c:	sub	sp, sp, #8
    1140:	str	r0, [sp, #4]
    1144:	ldr	r0, [sp, #4]
    1148:	ldr	r0, [r0]
    114c:	bl	11a4 <__flatbuffers_uoffset_cast_from_pe>
    1150:	mov	sp, fp
    1154:	pop	{fp, pc}

00001158 <__flatbuffers_thash_cast_from_le>:
    1158:	sub	sp, sp, #4
    115c:	str	r0, [sp]
    1160:	ldr	r0, [sp]
    1164:	add	sp, sp, #4
    1168:	bx	lr

0000116c <__flatbuffers_thash_read_from_pe>:
    116c:	push	{fp, lr}
    1170:	mov	fp, sp
    1174:	sub	sp, sp, #8
    1178:	str	r0, [sp, #4]
    117c:	ldr	r0, [sp, #4]
    1180:	ldr	r0, [r0]
    1184:	bl	1190 <__flatbuffers_thash_cast_from_pe>
    1188:	mov	sp, fp
    118c:	pop	{fp, pc}

00001190 <__flatbuffers_thash_cast_from_pe>:
    1190:	sub	sp, sp, #4
    1194:	str	r0, [sp]
    1198:	ldr	r0, [sp]
    119c:	add	sp, sp, #4
    11a0:	bx	lr

000011a4 <__flatbuffers_uoffset_cast_from_pe>:
    11a4:	sub	sp, sp, #4
    11a8:	str	r0, [sp]
    11ac:	ldr	r0, [sp]
    11b0:	add	sp, sp, #4
    11b4:	bx	lr

000011b8 <__flatbuffers_soffset_read_from_pe>:
    11b8:	push	{fp, lr}
    11bc:	mov	fp, sp
    11c0:	sub	sp, sp, #8
    11c4:	str	r0, [sp, #4]
    11c8:	ldr	r0, [sp, #4]
    11cc:	ldr	r0, [r0]
    11d0:	bl	1238 <__flatbuffers_soffset_cast_from_pe>
    11d4:	mov	sp, fp
    11d8:	pop	{fp, pc}

000011dc <__flatbuffers_voffset_read_from_pe>:
    11dc:	push	{fp, lr}
    11e0:	mov	fp, sp
    11e4:	sub	sp, sp, #8
    11e8:	str	r0, [sp, #4]
    11ec:	ldr	r0, [sp, #4]
    11f0:	ldrh	r0, [r0]
    11f4:	bl	124c <__flatbuffers_voffset_cast_from_pe>
    11f8:	uxth	r0, r0
    11fc:	mov	sp, fp
    1200:	pop	{fp, pc}

00001204 <flatbuffers_int64_read_from_pe>:
    1204:	push	{fp, lr}
    1208:	mov	fp, sp
    120c:	sub	sp, sp, #8
    1210:	str	r0, [sp, #4]
    1214:	ldr	r0, [sp, #4]
    1218:	ldr	r1, [r0]
    121c:	ldr	r0, [r0, #4]
    1220:	str	r0, [sp]
    1224:	mov	r0, r1
    1228:	ldr	r1, [sp]
    122c:	bl	1260 <flatbuffers_int64_cast_from_pe>
    1230:	mov	sp, fp
    1234:	pop	{fp, pc}

00001238 <__flatbuffers_soffset_cast_from_pe>:
    1238:	sub	sp, sp, #4
    123c:	str	r0, [sp]
    1240:	ldr	r0, [sp]
    1244:	add	sp, sp, #4
    1248:	bx	lr

0000124c <__flatbuffers_voffset_cast_from_pe>:
    124c:	sub	sp, sp, #4
    1250:	strh	r0, [sp, #2]
    1254:	ldrh	r0, [sp, #2]
    1258:	add	sp, sp, #4
    125c:	bx	lr

00001260 <flatbuffers_int64_cast_from_pe>:
    1260:	sub	sp, sp, #8
    1264:	str	r0, [sp]
    1268:	str	r1, [sp, #4]
    126c:	ldr	r0, [sp]
    1270:	ldr	r1, [sp, #4]
    1274:	add	sp, sp, #8
    1278:	bx	lr

0000127c <flatbuffers_uint8_read_from_pe>:
    127c:	push	{fp, lr}
    1280:	mov	fp, sp
    1284:	sub	sp, sp, #8
    1288:	str	r0, [sp, #4]
    128c:	ldr	r0, [sp, #4]
    1290:	ldrb	r0, [r0]
    1294:	bl	12a4 <flatbuffers_uint8_cast_from_pe>
    1298:	and	r0, r0, #255	; 0xff
    129c:	mov	sp, fp
    12a0:	pop	{fp, pc}

000012a4 <flatbuffers_uint8_cast_from_pe>:
    12a4:	sub	sp, sp, #4
    12a8:	strb	r0, [sp, #3]
    12ac:	ldrb	r0, [sp, #3]
    12b0:	add	sp, sp, #4
    12b4:	bx	lr

000012b8 <flatbuffers_vec_len>:
    12b8:	push	{fp, lr}
    12bc:	mov	fp, sp
    12c0:	sub	sp, sp, #8
    12c4:	str	r0, [sp, #4]
    12c8:	ldr	r0, [sp, #4]
    12cc:	movw	r1, #0
    12d0:	cmp	r0, r1
    12d4:	beq	12f0 <flatbuffers_vec_len+0x38>
    12d8:	ldr	r0, [sp, #4]
    12dc:	mvn	r1, #3
    12e0:	add	r0, r0, r1
    12e4:	bl	1134 <__flatbuffers_uoffset_read_from_pe>
    12e8:	str	r0, [sp]
    12ec:	b	12fc <flatbuffers_vec_len+0x44>
    12f0:	movw	r0, #0
    12f4:	str	r0, [sp]
    12f8:	b	12fc <flatbuffers_vec_len+0x44>
    12fc:	ldr	r0, [sp]
    1300:	mov	sp, fp
    1304:	pop	{fp, pc}

00001308 <flatbuffers_float_read_from_pe>:
    1308:	push	{fp, lr}
    130c:	mov	fp, sp
    1310:	sub	sp, sp, #8
    1314:	str	r0, [sp, #4]
    1318:	ldr	r0, [sp, #4]
    131c:	vldr	s0, [r0]
    1320:	bl	132c <flatbuffers_float_cast_from_pe>
    1324:	mov	sp, fp
    1328:	pop	{fp, pc}

0000132c <flatbuffers_float_cast_from_pe>:
    132c:	sub	sp, sp, #8
    1330:	vstr	s0, [sp, #4]
    1334:	vldr	s0, [sp, #4]
    1338:	vstr	s0, [sp]
    133c:	ldr	r0, [sp]
    1340:	str	r0, [sp]
    1344:	vldr	s0, [sp]
    1348:	add	sp, sp, #8
    134c:	bx	lr
