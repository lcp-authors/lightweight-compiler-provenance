
../compcert-repos/stcorp-coda-3a25f25/CMakeFiles/coda_static.dir/lex.yy.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <coda_expression_lex>:
       0:	push	{r4, fp, lr}
       4:	add	fp, sp, #8
       8:	sub	sp, sp, #44	; 0x2c
       c:	str	r0, [fp, #-48]	; 0xffffffd0
      10:	str	r1, [fp, #-52]	; 0xffffffcc
      14:	ldr	r3, [fp, #-52]	; 0xffffffcc
      18:	str	r3, [fp, #-36]	; 0xffffffdc
      1c:	ldr	r3, [fp, #-36]	; 0xffffffdc
      20:	ldr	r2, [fp, #-48]	; 0xffffffd0
      24:	str	r2, [r3, #92]	; 0x5c
      28:	ldr	r3, [fp, #-36]	; 0xffffffdc
      2c:	ldr	r3, [r3, #40]	; 0x28
      30:	cmp	r3, #0
      34:	bne	11c <coda_expression_lex+0x11c>
      38:	ldr	r3, [fp, #-36]	; 0xffffffdc
      3c:	mov	r2, #1
      40:	str	r2, [r3, #40]	; 0x28
      44:	ldr	r3, [fp, #-36]	; 0xffffffdc
      48:	ldr	r3, [r3, #44]	; 0x2c
      4c:	cmp	r3, #0
      50:	bne	60 <coda_expression_lex+0x60>
      54:	ldr	r3, [fp, #-36]	; 0xffffffdc
      58:	mov	r2, #1
      5c:	str	r2, [r3, #44]	; 0x2c
      60:	ldr	r3, [fp, #-36]	; 0xffffffdc
      64:	ldr	r3, [r3, #4]
      68:	cmp	r3, #0
      6c:	bne	80 <coda_expression_lex+0x80>
      70:	ldr	r3, [pc, #2592]	; a98 <coda_expression_lex+0xa98>
      74:	ldr	r2, [r3]
      78:	ldr	r3, [fp, #-36]	; 0xffffffdc
      7c:	str	r2, [r3, #4]
      80:	ldr	r3, [fp, #-36]	; 0xffffffdc
      84:	ldr	r3, [r3, #8]
      88:	cmp	r3, #0
      8c:	bne	a0 <coda_expression_lex+0xa0>
      90:	ldr	r3, [pc, #2564]	; a9c <coda_expression_lex+0xa9c>
      94:	ldr	r2, [r3]
      98:	ldr	r3, [fp, #-36]	; 0xffffffdc
      9c:	str	r2, [r3, #8]
      a0:	ldr	r3, [fp, #-36]	; 0xffffffdc
      a4:	ldr	r3, [r3, #20]
      a8:	cmp	r3, #0
      ac:	beq	d4 <coda_expression_lex+0xd4>
      b0:	ldr	r3, [fp, #-36]	; 0xffffffdc
      b4:	ldr	r2, [r3, #20]
      b8:	ldr	r3, [fp, #-36]	; 0xffffffdc
      bc:	ldr	r3, [r3, #12]
      c0:	lsl	r3, r3, #2
      c4:	add	r3, r2, r3
      c8:	ldr	r3, [r3]
      cc:	cmp	r3, #0
      d0:	bne	114 <coda_expression_lex+0x114>
      d4:	ldr	r0, [fp, #-52]	; 0xffffffcc
      d8:	bl	1f30 <coda_expression_ensure_buffer_stack>
      dc:	ldr	r3, [fp, #-36]	; 0xffffffdc
      e0:	ldr	r2, [r3, #20]
      e4:	ldr	r3, [fp, #-36]	; 0xffffffdc
      e8:	ldr	r3, [r3, #12]
      ec:	lsl	r3, r3, #2
      f0:	add	r4, r2, r3
      f4:	ldr	r3, [fp, #-36]	; 0xffffffdc
      f8:	ldr	r3, [r3, #4]
      fc:	ldr	r2, [fp, #-52]	; 0xffffffcc
     100:	mov	r1, #16384	; 0x4000
     104:	mov	r0, r3
     108:	bl	1984 <coda_expression__create_buffer>
     10c:	mov	r3, r0
     110:	str	r3, [r4]
     114:	ldr	r0, [fp, #-52]	; 0xffffffcc
     118:	bl	18c0 <coda_expression__load_buffer_state>
     11c:	ldr	r3, [fp, #-36]	; 0xffffffdc
     120:	ldr	r3, [r3, #36]	; 0x24
     124:	str	r3, [fp, #-20]	; 0xffffffec
     128:	ldr	r3, [fp, #-36]	; 0xffffffdc
     12c:	ldrb	r2, [r3, #24]
     130:	ldr	r3, [fp, #-20]	; 0xffffffec
     134:	strb	r2, [r3]
     138:	ldr	r3, [fp, #-20]	; 0xffffffec
     13c:	str	r3, [fp, #-24]	; 0xffffffe8
     140:	ldr	r3, [fp, #-36]	; 0xffffffdc
     144:	ldr	r3, [r3, #44]	; 0x2c
     148:	str	r3, [fp, #-16]
     14c:	ldr	r3, [fp, #-20]	; 0xffffffec
     150:	ldrb	r3, [r3]
     154:	mov	r2, r3
     158:	ldr	r3, [pc, #2368]	; aa0 <coda_expression_lex+0xaa0>
     15c:	ldrb	r3, [r3, r2]
     160:	strb	r3, [fp, #-29]	; 0xffffffe3
     164:	ldr	r2, [pc, #2360]	; aa4 <coda_expression_lex+0xaa4>
     168:	ldr	r3, [fp, #-16]
     16c:	lsl	r3, r3, #1
     170:	add	r3, r2, r3
     174:	ldrsh	r3, [r3]
     178:	cmp	r3, #0
     17c:	beq	1d4 <coda_expression_lex+0x1d4>
     180:	ldr	r3, [fp, #-36]	; 0xffffffdc
     184:	ldr	r2, [fp, #-16]
     188:	str	r2, [r3, #64]	; 0x40
     18c:	ldr	r3, [fp, #-36]	; 0xffffffdc
     190:	ldr	r2, [fp, #-20]	; 0xffffffec
     194:	str	r2, [r3, #68]	; 0x44
     198:	b	1d4 <coda_expression_lex+0x1d4>
     19c:	ldr	r2, [pc, #2308]	; aa8 <coda_expression_lex+0xaa8>
     1a0:	ldr	r3, [fp, #-16]
     1a4:	lsl	r3, r3, #1
     1a8:	add	r3, r2, r3
     1ac:	ldrsh	r3, [r3]
     1b0:	str	r3, [fp, #-16]
     1b4:	ldr	r3, [fp, #-16]
     1b8:	ldr	r2, [pc, #2284]	; aac <coda_expression_lex+0xaac>
     1bc:	cmp	r3, r2
     1c0:	ble	1d4 <coda_expression_lex+0x1d4>
     1c4:	ldrb	r3, [fp, #-29]	; 0xffffffe3
     1c8:	ldr	r2, [pc, #2272]	; ab0 <coda_expression_lex+0xab0>
     1cc:	ldrb	r3, [r2, r3]
     1d0:	strb	r3, [fp, #-29]	; 0xffffffe3
     1d4:	ldr	r2, [pc, #2264]	; ab4 <coda_expression_lex+0xab4>
     1d8:	ldr	r3, [fp, #-16]
     1dc:	lsl	r3, r3, #1
     1e0:	add	r3, r2, r3
     1e4:	ldrsh	r3, [r3]
     1e8:	mov	r2, r3
     1ec:	ldrb	r3, [fp, #-29]	; 0xffffffe3
     1f0:	add	r3, r2, r3
     1f4:	ldr	r2, [pc, #2236]	; ab8 <coda_expression_lex+0xab8>
     1f8:	lsl	r3, r3, #1
     1fc:	add	r3, r2, r3
     200:	ldrsh	r3, [r3]
     204:	mov	r2, r3
     208:	ldr	r3, [fp, #-16]
     20c:	cmp	r2, r3
     210:	bne	19c <coda_expression_lex+0x19c>
     214:	ldr	r2, [pc, #2200]	; ab4 <coda_expression_lex+0xab4>
     218:	ldr	r3, [fp, #-16]
     21c:	lsl	r3, r3, #1
     220:	add	r3, r2, r3
     224:	ldrsh	r3, [r3]
     228:	mov	r2, r3
     22c:	ldrb	r3, [fp, #-29]	; 0xffffffe3
     230:	add	r3, r2, r3
     234:	ldr	r2, [pc, #2176]	; abc <coda_expression_lex+0xabc>
     238:	lsl	r3, r3, #1
     23c:	add	r3, r2, r3
     240:	ldrsh	r3, [r3]
     244:	str	r3, [fp, #-16]
     248:	ldr	r3, [fp, #-20]	; 0xffffffec
     24c:	add	r3, r3, #1
     250:	str	r3, [fp, #-20]	; 0xffffffec
     254:	ldr	r2, [pc, #2136]	; ab4 <coda_expression_lex+0xab4>
     258:	ldr	r3, [fp, #-16]
     25c:	lsl	r3, r3, #1
     260:	add	r3, r2, r3
     264:	ldrsh	r3, [r3]
     268:	ldr	r2, [pc, #2128]	; ac0 <coda_expression_lex+0xac0>
     26c:	cmp	r3, r2
     270:	bne	14c <coda_expression_lex+0x14c>
     274:	ldr	r2, [pc, #2088]	; aa4 <coda_expression_lex+0xaa4>
     278:	ldr	r3, [fp, #-16]
     27c:	lsl	r3, r3, #1
     280:	add	r3, r2, r3
     284:	ldrsh	r3, [r3]
     288:	str	r3, [fp, #-28]	; 0xffffffe4
     28c:	ldr	r3, [fp, #-28]	; 0xffffffe4
     290:	cmp	r3, #0
     294:	bne	2c8 <coda_expression_lex+0x2c8>
     298:	ldr	r3, [fp, #-36]	; 0xffffffdc
     29c:	ldr	r3, [r3, #68]	; 0x44
     2a0:	str	r3, [fp, #-20]	; 0xffffffec
     2a4:	ldr	r3, [fp, #-36]	; 0xffffffdc
     2a8:	ldr	r3, [r3, #64]	; 0x40
     2ac:	str	r3, [fp, #-16]
     2b0:	ldr	r2, [pc, #2028]	; aa4 <coda_expression_lex+0xaa4>
     2b4:	ldr	r3, [fp, #-16]
     2b8:	lsl	r3, r3, #1
     2bc:	add	r3, r2, r3
     2c0:	ldrsh	r3, [r3]
     2c4:	str	r3, [fp, #-28]	; 0xffffffe4
     2c8:	ldr	r3, [fp, #-36]	; 0xffffffdc
     2cc:	ldr	r2, [fp, #-24]	; 0xffffffe8
     2d0:	str	r2, [r3, #80]	; 0x50
     2d4:	ldr	r2, [fp, #-20]	; 0xffffffec
     2d8:	ldr	r3, [fp, #-24]	; 0xffffffe8
     2dc:	sub	r2, r2, r3
     2e0:	ldr	r3, [fp, #-36]	; 0xffffffdc
     2e4:	str	r2, [r3, #32]
     2e8:	ldr	r3, [fp, #-20]	; 0xffffffec
     2ec:	ldrb	r2, [r3]
     2f0:	ldr	r3, [fp, #-36]	; 0xffffffdc
     2f4:	strb	r2, [r3, #24]
     2f8:	ldr	r3, [fp, #-20]	; 0xffffffec
     2fc:	mov	r2, #0
     300:	strb	r2, [r3]
     304:	ldr	r3, [fp, #-36]	; 0xffffffdc
     308:	ldr	r2, [fp, #-20]	; 0xffffffec
     30c:	str	r2, [r3, #36]	; 0x24
     310:	ldr	r3, [fp, #-28]	; 0xffffffe4
     314:	cmp	r3, #76	; 0x4c
     318:	ldrls	pc, [pc, r3, lsl #2]
     31c:	b	a78 <coda_expression_lex+0xa78>
     320:	.word	0x00000454
     324:	.word	0x00000480
     328:	.word	0x000004fc
     32c:	.word	0x00000504
     330:	.word	0x0000050c
     334:	.word	0x00000514
     338:	.word	0x0000051c
     33c:	.word	0x00000524
     340:	.word	0x0000052c
     344:	.word	0x00000534
     348:	.word	0x0000053c
     34c:	.word	0x00000544
     350:	.word	0x0000054c
     354:	.word	0x00000554
     358:	.word	0x0000055c
     35c:	.word	0x00000564
     360:	.word	0x0000056c
     364:	.word	0x00000574
     368:	.word	0x0000057c
     36c:	.word	0x00000584
     370:	.word	0x0000058c
     374:	.word	0x00000594
     378:	.word	0x0000059c
     37c:	.word	0x000005a4
     380:	.word	0x000005ac
     384:	.word	0x000005b4
     388:	.word	0x000005bc
     38c:	.word	0x000005c4
     390:	.word	0x000005cc
     394:	.word	0x000005d4
     398:	.word	0x000005dc
     39c:	.word	0x000005e4
     3a0:	.word	0x000005ec
     3a4:	.word	0x000005f4
     3a8:	.word	0x000005fc
     3ac:	.word	0x00000604
     3b0:	.word	0x0000060c
     3b4:	.word	0x00000614
     3b8:	.word	0x0000061c
     3bc:	.word	0x00000624
     3c0:	.word	0x0000062c
     3c4:	.word	0x00000634
     3c8:	.word	0x0000063c
     3cc:	.word	0x00000644
     3d0:	.word	0x0000064c
     3d4:	.word	0x00000654
     3d8:	.word	0x0000065c
     3dc:	.word	0x00000664
     3e0:	.word	0x0000066c
     3e4:	.word	0x00000674
     3e8:	.word	0x0000067c
     3ec:	.word	0x00000684
     3f0:	.word	0x0000068c
     3f4:	.word	0x00000694
     3f8:	.word	0x0000069c
     3fc:	.word	0x000006a4
     400:	.word	0x000006ac
     404:	.word	0x000006b4
     408:	.word	0x000006bc
     40c:	.word	0x000006c4
     410:	.word	0x000006cc
     414:	.word	0x000006d4
     418:	.word	0x000006dc
     41c:	.word	0x000006e4
     420:	.word	0x000006ec
     424:	.word	0x000006f4
     428:	.word	0x000006fc
     42c:	.word	0x00000704
     430:	.word	0x0000070c
     434:	.word	0x00000734
     438:	.word	0x0000075c
     43c:	.word	0x00000784
     440:	.word	0x00000a84
     444:	.word	0x000007ac
     448:	.word	0x000007bc
     44c:	.word	0x000007ec
     450:	.word	0x000007e4
     454:	ldr	r3, [fp, #-36]	; 0xffffffdc
     458:	ldrb	r2, [r3, #24]
     45c:	ldr	r3, [fp, #-20]	; 0xffffffec
     460:	strb	r2, [r3]
     464:	ldr	r3, [fp, #-36]	; 0xffffffdc
     468:	ldr	r3, [r3, #68]	; 0x44
     46c:	str	r3, [fp, #-20]	; 0xffffffec
     470:	ldr	r3, [fp, #-36]	; 0xffffffdc
     474:	ldr	r3, [r3, #64]	; 0x40
     478:	str	r3, [fp, #-16]
     47c:	b	274 <coda_expression_lex+0x274>
     480:	ldr	r3, [fp, #-36]	; 0xffffffdc
     484:	ldr	r4, [r3, #92]	; 0x5c
     488:	ldr	r3, [fp, #-36]	; 0xffffffdc
     48c:	ldr	r3, [r3, #32]
     490:	sub	r3, r3, #1
     494:	mov	r0, r3
     498:	bl	0 <malloc>
     49c:	mov	r3, r0
     4a0:	str	r3, [r4]
     4a4:	ldr	r3, [fp, #-36]	; 0xffffffdc
     4a8:	ldr	r3, [r3, #92]	; 0x5c
     4ac:	ldr	r0, [r3]
     4b0:	ldr	r3, [fp, #-36]	; 0xffffffdc
     4b4:	ldr	r3, [r3, #80]	; 0x50
     4b8:	add	r1, r3, #1
     4bc:	ldr	r3, [fp, #-36]	; 0xffffffdc
     4c0:	ldr	r3, [r3, #32]
     4c4:	sub	r3, r3, #2
     4c8:	mov	r2, r3
     4cc:	bl	0 <memcpy>
     4d0:	ldr	r3, [fp, #-36]	; 0xffffffdc
     4d4:	ldr	r3, [r3, #92]	; 0x5c
     4d8:	ldr	r2, [r3]
     4dc:	ldr	r3, [fp, #-36]	; 0xffffffdc
     4e0:	ldr	r3, [r3, #32]
     4e4:	sub	r3, r3, #2
     4e8:	add	r3, r2, r3
     4ec:	mov	r2, #0
     4f0:	strb	r2, [r3]
     4f4:	mov	r3, #260	; 0x104
     4f8:	b	a8c <coda_expression_lex+0xa8c>
     4fc:	ldr	r3, [pc, #1472]	; ac4 <coda_expression_lex+0xac4>
     500:	b	a8c <coda_expression_lex+0xa8c>
     504:	ldr	r3, [pc, #1468]	; ac8 <coda_expression_lex+0xac8>
     508:	b	a8c <coda_expression_lex+0xa8c>
     50c:	mov	r3, #268	; 0x10c
     510:	b	a8c <coda_expression_lex+0xa8c>
     514:	ldr	r3, [pc, #1456]	; acc <coda_expression_lex+0xacc>
     518:	b	a8c <coda_expression_lex+0xa8c>
     51c:	ldr	r3, [pc, #1452]	; ad0 <coda_expression_lex+0xad0>
     520:	b	a8c <coda_expression_lex+0xa8c>
     524:	ldr	r3, [pc, #1448]	; ad4 <coda_expression_lex+0xad4>
     528:	b	a8c <coda_expression_lex+0xa8c>
     52c:	ldr	r3, [pc, #1444]	; ad8 <coda_expression_lex+0xad8>
     530:	b	a8c <coda_expression_lex+0xa8c>
     534:	mov	r3, #264	; 0x108
     538:	b	a8c <coda_expression_lex+0xa8c>
     53c:	ldr	r3, [pc, #1432]	; adc <coda_expression_lex+0xadc>
     540:	b	a8c <coda_expression_lex+0xa8c>
     544:	ldr	r3, [pc, #1376]	; aac <coda_expression_lex+0xaac>
     548:	b	a8c <coda_expression_lex+0xa8c>
     54c:	ldr	r3, [pc, #1420]	; ae0 <coda_expression_lex+0xae0>
     550:	b	a8c <coda_expression_lex+0xa8c>
     554:	ldr	r3, [pc, #1416]	; ae4 <coda_expression_lex+0xae4>
     558:	b	a8c <coda_expression_lex+0xa8c>
     55c:	mov	r3, #276	; 0x114
     560:	b	a8c <coda_expression_lex+0xa8c>
     564:	ldr	r3, [pc, #1404]	; ae8 <coda_expression_lex+0xae8>
     568:	b	a8c <coda_expression_lex+0xa8c>
     56c:	ldr	r3, [pc, #1400]	; aec <coda_expression_lex+0xaec>
     570:	b	a8c <coda_expression_lex+0xa8c>
     574:	ldr	r3, [pc, #1396]	; af0 <coda_expression_lex+0xaf0>
     578:	b	a8c <coda_expression_lex+0xa8c>
     57c:	mov	r3, #280	; 0x118
     580:	b	a8c <coda_expression_lex+0xa8c>
     584:	ldr	r3, [pc, #1384]	; af4 <coda_expression_lex+0xaf4>
     588:	b	a8c <coda_expression_lex+0xa8c>
     58c:	ldr	r3, [pc, #1380]	; af8 <coda_expression_lex+0xaf8>
     590:	b	a8c <coda_expression_lex+0xa8c>
     594:	ldr	r3, [pc, #1376]	; afc <coda_expression_lex+0xafc>
     598:	b	a8c <coda_expression_lex+0xa8c>
     59c:	mov	r3, #284	; 0x11c
     5a0:	b	a8c <coda_expression_lex+0xa8c>
     5a4:	ldr	r3, [pc, #1364]	; b00 <coda_expression_lex+0xb00>
     5a8:	b	a8c <coda_expression_lex+0xa8c>
     5ac:	ldr	r3, [pc, #1360]	; b04 <coda_expression_lex+0xb04>
     5b0:	b	a8c <coda_expression_lex+0xa8c>
     5b4:	ldr	r3, [pc, #1356]	; b08 <coda_expression_lex+0xb08>
     5b8:	b	a8c <coda_expression_lex+0xa8c>
     5bc:	mov	r3, #288	; 0x120
     5c0:	b	a8c <coda_expression_lex+0xa8c>
     5c4:	ldr	r3, [pc, #1344]	; b0c <coda_expression_lex+0xb0c>
     5c8:	b	a8c <coda_expression_lex+0xa8c>
     5cc:	ldr	r3, [pc, #1340]	; b10 <coda_expression_lex+0xb10>
     5d0:	b	a8c <coda_expression_lex+0xa8c>
     5d4:	ldr	r3, [pc, #1336]	; b14 <coda_expression_lex+0xb14>
     5d8:	b	a8c <coda_expression_lex+0xa8c>
     5dc:	mov	r3, #292	; 0x124
     5e0:	b	a8c <coda_expression_lex+0xa8c>
     5e4:	ldr	r3, [pc, #1324]	; b18 <coda_expression_lex+0xb18>
     5e8:	b	a8c <coda_expression_lex+0xa8c>
     5ec:	ldr	r3, [pc, #1320]	; b1c <coda_expression_lex+0xb1c>
     5f0:	b	a8c <coda_expression_lex+0xa8c>
     5f4:	ldr	r3, [pc, #1316]	; b20 <coda_expression_lex+0xb20>
     5f8:	b	a8c <coda_expression_lex+0xa8c>
     5fc:	mov	r3, #296	; 0x128
     600:	b	a8c <coda_expression_lex+0xa8c>
     604:	ldr	r3, [pc, #1304]	; b24 <coda_expression_lex+0xb24>
     608:	b	a8c <coda_expression_lex+0xa8c>
     60c:	ldr	r3, [pc, #1300]	; b28 <coda_expression_lex+0xb28>
     610:	b	a8c <coda_expression_lex+0xa8c>
     614:	ldr	r3, [pc, #1296]	; b2c <coda_expression_lex+0xb2c>
     618:	b	a8c <coda_expression_lex+0xa8c>
     61c:	mov	r3, #300	; 0x12c
     620:	b	a8c <coda_expression_lex+0xa8c>
     624:	ldr	r3, [pc, #1284]	; b30 <coda_expression_lex+0xb30>
     628:	b	a8c <coda_expression_lex+0xa8c>
     62c:	ldr	r3, [pc, #1280]	; b34 <coda_expression_lex+0xb34>
     630:	b	a8c <coda_expression_lex+0xa8c>
     634:	ldr	r3, [pc, #1276]	; b38 <coda_expression_lex+0xb38>
     638:	b	a8c <coda_expression_lex+0xa8c>
     63c:	mov	r3, #304	; 0x130
     640:	b	a8c <coda_expression_lex+0xa8c>
     644:	ldr	r3, [pc, #1264]	; b3c <coda_expression_lex+0xb3c>
     648:	b	a8c <coda_expression_lex+0xa8c>
     64c:	ldr	r3, [pc, #1260]	; b40 <coda_expression_lex+0xb40>
     650:	b	a8c <coda_expression_lex+0xa8c>
     654:	ldr	r3, [pc, #1124]	; ac0 <coda_expression_lex+0xac0>
     658:	b	a8c <coda_expression_lex+0xa8c>
     65c:	mov	r3, #308	; 0x134
     660:	b	a8c <coda_expression_lex+0xa8c>
     664:	ldr	r3, [pc, #1240]	; b44 <coda_expression_lex+0xb44>
     668:	b	a8c <coda_expression_lex+0xa8c>
     66c:	ldr	r3, [pc, #1236]	; b48 <coda_expression_lex+0xb48>
     670:	b	a8c <coda_expression_lex+0xa8c>
     674:	ldr	r3, [pc, #1232]	; b4c <coda_expression_lex+0xb4c>
     678:	b	a8c <coda_expression_lex+0xa8c>
     67c:	mov	r3, #312	; 0x138
     680:	b	a8c <coda_expression_lex+0xa8c>
     684:	ldr	r3, [pc, #1220]	; b50 <coda_expression_lex+0xb50>
     688:	b	a8c <coda_expression_lex+0xa8c>
     68c:	ldr	r3, [pc, #1216]	; b54 <coda_expression_lex+0xb54>
     690:	b	a8c <coda_expression_lex+0xa8c>
     694:	ldr	r3, [pc, #1212]	; b58 <coda_expression_lex+0xb58>
     698:	b	a8c <coda_expression_lex+0xa8c>
     69c:	mov	r3, #316	; 0x13c
     6a0:	b	a8c <coda_expression_lex+0xa8c>
     6a4:	ldr	r3, [pc, #1200]	; b5c <coda_expression_lex+0xb5c>
     6a8:	b	a8c <coda_expression_lex+0xa8c>
     6ac:	ldr	r3, [pc, #1196]	; b60 <coda_expression_lex+0xb60>
     6b0:	b	a8c <coda_expression_lex+0xa8c>
     6b4:	ldr	r3, [pc, #1192]	; b64 <coda_expression_lex+0xb64>
     6b8:	b	a8c <coda_expression_lex+0xa8c>
     6bc:	mov	r3, #320	; 0x140
     6c0:	b	a8c <coda_expression_lex+0xa8c>
     6c4:	ldr	r3, [pc, #1180]	; b68 <coda_expression_lex+0xb68>
     6c8:	b	a8c <coda_expression_lex+0xa8c>
     6cc:	ldr	r3, [pc, #1176]	; b6c <coda_expression_lex+0xb6c>
     6d0:	b	a8c <coda_expression_lex+0xa8c>
     6d4:	ldr	r3, [pc, #1172]	; b70 <coda_expression_lex+0xb70>
     6d8:	b	a8c <coda_expression_lex+0xa8c>
     6dc:	mov	r3, #324	; 0x144
     6e0:	b	a8c <coda_expression_lex+0xa8c>
     6e4:	ldr	r3, [pc, #1160]	; b74 <coda_expression_lex+0xb74>
     6e8:	b	a8c <coda_expression_lex+0xa8c>
     6ec:	ldr	r3, [pc, #1156]	; b78 <coda_expression_lex+0xb78>
     6f0:	b	a8c <coda_expression_lex+0xa8c>
     6f4:	ldr	r3, [pc, #1152]	; b7c <coda_expression_lex+0xb7c>
     6f8:	b	a8c <coda_expression_lex+0xa8c>
     6fc:	mov	r3, #328	; 0x148
     700:	b	a8c <coda_expression_lex+0xa8c>
     704:	ldr	r3, [pc, #1140]	; b80 <coda_expression_lex+0xb80>
     708:	b	a8c <coda_expression_lex+0xa8c>
     70c:	ldr	r3, [fp, #-36]	; 0xffffffdc
     710:	ldr	r4, [r3, #92]	; 0x5c
     714:	ldr	r3, [fp, #-36]	; 0xffffffdc
     718:	ldr	r3, [r3, #80]	; 0x50
     71c:	mov	r0, r3
     720:	bl	0 <strdup>
     724:	mov	r3, r0
     728:	str	r3, [r4]
     72c:	ldr	r3, [pc, #1104]	; b84 <coda_expression_lex+0xb84>
     730:	b	a8c <coda_expression_lex+0xa8c>
     734:	ldr	r3, [fp, #-36]	; 0xffffffdc
     738:	ldr	r4, [r3, #92]	; 0x5c
     73c:	ldr	r3, [fp, #-36]	; 0xffffffdc
     740:	ldr	r3, [r3, #80]	; 0x50
     744:	mov	r0, r3
     748:	bl	0 <strdup>
     74c:	mov	r3, r0
     750:	str	r3, [r4]
     754:	ldr	r3, [pc, #1068]	; b88 <coda_expression_lex+0xb88>
     758:	b	a8c <coda_expression_lex+0xa8c>
     75c:	ldr	r3, [fp, #-36]	; 0xffffffdc
     760:	ldr	r4, [r3, #92]	; 0x5c
     764:	ldr	r3, [fp, #-36]	; 0xffffffdc
     768:	ldr	r3, [r3, #80]	; 0x50
     76c:	mov	r0, r3
     770:	bl	0 <strdup>
     774:	mov	r3, r0
     778:	str	r3, [r4]
     77c:	ldr	r3, [pc, #1032]	; b8c <coda_expression_lex+0xb8c>
     780:	b	a8c <coda_expression_lex+0xa8c>
     784:	ldr	r3, [fp, #-36]	; 0xffffffdc
     788:	ldr	r4, [r3, #92]	; 0x5c
     78c:	ldr	r3, [fp, #-36]	; 0xffffffdc
     790:	ldr	r3, [r3, #80]	; 0x50
     794:	mov	r0, r3
     798:	bl	0 <strdup>
     79c:	mov	r3, r0
     7a0:	str	r3, [r4]
     7a4:	ldr	r3, [pc, #996]	; b90 <coda_expression_lex+0xb90>
     7a8:	b	a8c <coda_expression_lex+0xa8c>
     7ac:	ldr	r3, [fp, #-36]	; 0xffffffdc
     7b0:	ldr	r3, [r3, #80]	; 0x50
     7b4:	ldrb	r3, [r3]
     7b8:	b	a8c <coda_expression_lex+0xa8c>
     7bc:	ldr	r3, [fp, #-36]	; 0xffffffdc
     7c0:	ldr	r0, [r3, #80]	; 0x50
     7c4:	ldr	r3, [fp, #-36]	; 0xffffffdc
     7c8:	ldr	r3, [r3, #32]
     7cc:	mov	r1, r3
     7d0:	ldr	r3, [fp, #-36]	; 0xffffffdc
     7d4:	ldr	r3, [r3, #8]
     7d8:	mov	r2, #1
     7dc:	bl	0 <fwrite>
     7e0:	b	a88 <coda_expression_lex+0xa88>
     7e4:	mov	r3, #0
     7e8:	b	a8c <coda_expression_lex+0xa8c>
     7ec:	ldr	r3, [fp, #-20]	; 0xffffffec
     7f0:	ldr	r2, [fp, #-36]	; 0xffffffdc
     7f4:	ldr	r2, [r2, #80]	; 0x50
     7f8:	sub	r3, r3, r2
     7fc:	sub	r3, r3, #1
     800:	str	r3, [fp, #-40]	; 0xffffffd8
     804:	ldr	r3, [fp, #-36]	; 0xffffffdc
     808:	ldrb	r2, [r3, #24]
     80c:	ldr	r3, [fp, #-20]	; 0xffffffec
     810:	strb	r2, [r3]
     814:	ldr	r3, [fp, #-36]	; 0xffffffdc
     818:	ldr	r2, [r3, #20]
     81c:	ldr	r3, [fp, #-36]	; 0xffffffdc
     820:	ldr	r3, [r3, #12]
     824:	lsl	r3, r3, #2
     828:	add	r3, r2, r3
     82c:	ldr	r3, [r3]
     830:	ldr	r3, [r3, #44]	; 0x2c
     834:	cmp	r3, #0
     838:	bne	8b0 <coda_expression_lex+0x8b0>
     83c:	ldr	r3, [fp, #-36]	; 0xffffffdc
     840:	ldr	r2, [r3, #20]
     844:	ldr	r3, [fp, #-36]	; 0xffffffdc
     848:	ldr	r3, [r3, #12]
     84c:	lsl	r3, r3, #2
     850:	add	r3, r2, r3
     854:	ldr	r3, [r3]
     858:	ldr	r2, [r3, #16]
     85c:	ldr	r3, [fp, #-36]	; 0xffffffdc
     860:	str	r2, [r3, #28]
     864:	ldr	r3, [fp, #-36]	; 0xffffffdc
     868:	ldr	r2, [r3, #20]
     86c:	ldr	r3, [fp, #-36]	; 0xffffffdc
     870:	ldr	r3, [r3, #12]
     874:	lsl	r3, r3, #2
     878:	add	r3, r2, r3
     87c:	ldr	r3, [r3]
     880:	ldr	r2, [fp, #-36]	; 0xffffffdc
     884:	ldr	r2, [r2, #4]
     888:	str	r2, [r3]
     88c:	ldr	r3, [fp, #-36]	; 0xffffffdc
     890:	ldr	r2, [r3, #20]
     894:	ldr	r3, [fp, #-36]	; 0xffffffdc
     898:	ldr	r3, [r3, #12]
     89c:	lsl	r3, r3, #2
     8a0:	add	r3, r2, r3
     8a4:	ldr	r3, [r3]
     8a8:	mov	r2, #1
     8ac:	str	r2, [r3, #44]	; 0x2c
     8b0:	ldr	r3, [fp, #-36]	; 0xffffffdc
     8b4:	ldr	r2, [r3, #36]	; 0x24
     8b8:	ldr	r3, [fp, #-36]	; 0xffffffdc
     8bc:	ldr	r1, [r3, #20]
     8c0:	ldr	r3, [fp, #-36]	; 0xffffffdc
     8c4:	ldr	r3, [r3, #12]
     8c8:	lsl	r3, r3, #2
     8cc:	add	r3, r1, r3
     8d0:	ldr	r3, [r3]
     8d4:	ldr	r3, [r3, #4]
     8d8:	ldr	r1, [fp, #-36]	; 0xffffffdc
     8dc:	ldr	r1, [r1, #28]
     8e0:	add	r3, r3, r1
     8e4:	cmp	r2, r3
     8e8:	bhi	974 <coda_expression_lex+0x974>
     8ec:	ldr	r3, [fp, #-36]	; 0xffffffdc
     8f0:	ldr	r2, [r3, #80]	; 0x50
     8f4:	ldr	r3, [fp, #-40]	; 0xffffffd8
     8f8:	add	r2, r2, r3
     8fc:	ldr	r3, [fp, #-36]	; 0xffffffdc
     900:	str	r2, [r3, #36]	; 0x24
     904:	ldr	r0, [fp, #-52]	; 0xffffffcc
     908:	bl	1388 <yy_get_previous_state>
     90c:	str	r0, [fp, #-16]
     910:	ldr	r1, [fp, #-52]	; 0xffffffcc
     914:	ldr	r0, [fp, #-16]
     918:	bl	1524 <yy_try_NUL_trans>
     91c:	str	r0, [fp, #-44]	; 0xffffffd4
     920:	ldr	r3, [fp, #-36]	; 0xffffffdc
     924:	ldr	r3, [r3, #80]	; 0x50
     928:	str	r3, [fp, #-24]	; 0xffffffe8
     92c:	ldr	r3, [fp, #-44]	; 0xffffffd4
     930:	cmp	r3, #0
     934:	beq	964 <coda_expression_lex+0x964>
     938:	ldr	r3, [fp, #-36]	; 0xffffffdc
     93c:	ldr	r3, [r3, #36]	; 0x24
     940:	add	r2, r3, #1
     944:	ldr	r3, [fp, #-36]	; 0xffffffdc
     948:	str	r2, [r3, #36]	; 0x24
     94c:	ldr	r3, [fp, #-36]	; 0xffffffdc
     950:	ldr	r3, [r3, #36]	; 0x24
     954:	str	r3, [fp, #-20]	; 0xffffffec
     958:	ldr	r3, [fp, #-44]	; 0xffffffd4
     95c:	str	r3, [fp, #-16]
     960:	b	14c <coda_expression_lex+0x14c>
     964:	ldr	r3, [fp, #-36]	; 0xffffffdc
     968:	ldr	r3, [r3, #36]	; 0x24
     96c:	str	r3, [fp, #-20]	; 0xffffffec
     970:	b	274 <coda_expression_lex+0x274>
     974:	ldr	r0, [fp, #-52]	; 0xffffffcc
     978:	bl	b98 <yy_get_next_buffer>
     97c:	mov	r3, r0
     980:	cmp	r3, #1
     984:	beq	99c <coda_expression_lex+0x99c>
     988:	cmp	r3, #2
     98c:	beq	a1c <coda_expression_lex+0xa1c>
     990:	cmp	r3, #0
     994:	beq	9dc <coda_expression_lex+0x9dc>
     998:	b	a88 <coda_expression_lex+0xa88>
     99c:	ldr	r3, [fp, #-36]	; 0xffffffdc
     9a0:	mov	r2, #0
     9a4:	str	r2, [r3, #48]	; 0x30
     9a8:	ldr	r3, [fp, #-36]	; 0xffffffdc
     9ac:	ldr	r2, [r3, #80]	; 0x50
     9b0:	ldr	r3, [fp, #-36]	; 0xffffffdc
     9b4:	str	r2, [r3, #36]	; 0x24
     9b8:	ldr	r3, [fp, #-36]	; 0xffffffdc
     9bc:	ldr	r3, [r3, #44]	; 0x2c
     9c0:	sub	r3, r3, #1
     9c4:	lsr	r2, r3, #31
     9c8:	add	r3, r2, r3
     9cc:	asr	r3, r3, #1
     9d0:	add	r3, r3, #76	; 0x4c
     9d4:	str	r3, [fp, #-28]	; 0xffffffe4
     9d8:	b	310 <coda_expression_lex+0x310>
     9dc:	ldr	r3, [fp, #-36]	; 0xffffffdc
     9e0:	ldr	r2, [r3, #80]	; 0x50
     9e4:	ldr	r3, [fp, #-40]	; 0xffffffd8
     9e8:	add	r2, r2, r3
     9ec:	ldr	r3, [fp, #-36]	; 0xffffffdc
     9f0:	str	r2, [r3, #36]	; 0x24
     9f4:	ldr	r0, [fp, #-52]	; 0xffffffcc
     9f8:	bl	1388 <yy_get_previous_state>
     9fc:	str	r0, [fp, #-16]
     a00:	ldr	r3, [fp, #-36]	; 0xffffffdc
     a04:	ldr	r3, [r3, #36]	; 0x24
     a08:	str	r3, [fp, #-20]	; 0xffffffec
     a0c:	ldr	r3, [fp, #-36]	; 0xffffffdc
     a10:	ldr	r3, [r3, #80]	; 0x50
     a14:	str	r3, [fp, #-24]	; 0xffffffe8
     a18:	b	14c <coda_expression_lex+0x14c>
     a1c:	ldr	r3, [fp, #-36]	; 0xffffffdc
     a20:	ldr	r2, [r3, #20]
     a24:	ldr	r3, [fp, #-36]	; 0xffffffdc
     a28:	ldr	r3, [r3, #12]
     a2c:	lsl	r3, r3, #2
     a30:	add	r3, r2, r3
     a34:	ldr	r3, [r3]
     a38:	ldr	r3, [r3, #4]
     a3c:	ldr	r2, [fp, #-36]	; 0xffffffdc
     a40:	ldr	r2, [r2, #28]
     a44:	add	r2, r3, r2
     a48:	ldr	r3, [fp, #-36]	; 0xffffffdc
     a4c:	str	r2, [r3, #36]	; 0x24
     a50:	ldr	r0, [fp, #-52]	; 0xffffffcc
     a54:	bl	1388 <yy_get_previous_state>
     a58:	str	r0, [fp, #-16]
     a5c:	ldr	r3, [fp, #-36]	; 0xffffffdc
     a60:	ldr	r3, [r3, #36]	; 0x24
     a64:	str	r3, [fp, #-20]	; 0xffffffec
     a68:	ldr	r3, [fp, #-36]	; 0xffffffdc
     a6c:	ldr	r3, [r3, #80]	; 0x50
     a70:	str	r3, [fp, #-24]	; 0xffffffe8
     a74:	b	274 <coda_expression_lex+0x274>
     a78:	ldr	r1, [fp, #-52]	; 0xffffffcc
     a7c:	ldr	r0, [pc, #272]	; b94 <coda_expression_lex+0xb94>
     a80:	bl	2318 <yy_fatal_error>
     a84:	nop			; (mov r0, r0)
     a88:	b	11c <coda_expression_lex+0x11c>
     a8c:	mov	r0, r3
     a90:	sub	sp, fp, #8
     a94:	pop	{r4, fp, pc}
	...
     aa0:	.word	0x00000224
     aa4:	.word	0x00000000
     aa8:	.word	0x00000578
     aac:	.word	0x00000111
     ab0:	.word	0x00000324
     ab4:	.word	0x00000350
     ab8:	.word	0x00000a5c
     abc:	.word	0x000007a0
     ac0:	.word	0x00000133
     ac4:	.word	0x0000010a
     ac8:	.word	0x0000010b
     acc:	.word	0x0000010d
     ad0:	.word	0x0000010e
     ad4:	.word	0x0000010f
     ad8:	.word	0x00000107
     adc:	.word	0x00000109
     ae0:	.word	0x00000112
     ae4:	.word	0x00000113
     ae8:	.word	0x00000115
     aec:	.word	0x00000116
     af0:	.word	0x00000117
     af4:	.word	0x00000119
     af8:	.word	0x0000011a
     afc:	.word	0x0000011b
     b00:	.word	0x0000011d
     b04:	.word	0x0000011e
     b08:	.word	0x0000011f
     b0c:	.word	0x00000121
     b10:	.word	0x00000122
     b14:	.word	0x00000123
     b18:	.word	0x00000125
     b1c:	.word	0x00000126
     b20:	.word	0x00000127
     b24:	.word	0x00000129
     b28:	.word	0x0000012a
     b2c:	.word	0x0000012b
     b30:	.word	0x0000012d
     b34:	.word	0x0000012e
     b38:	.word	0x0000012f
     b3c:	.word	0x00000131
     b40:	.word	0x00000132
     b44:	.word	0x00000135
     b48:	.word	0x00000136
     b4c:	.word	0x00000137
     b50:	.word	0x00000139
     b54:	.word	0x0000013a
     b58:	.word	0x0000013b
     b5c:	.word	0x0000013d
     b60:	.word	0x0000013e
     b64:	.word	0x0000013f
     b68:	.word	0x00000141
     b6c:	.word	0x00000142
     b70:	.word	0x00000143
     b74:	.word	0x00000145
     b78:	.word	0x00000146
     b7c:	.word	0x00000147
     b80:	.word	0x00000149
     b84:	.word	0x00000106
     b88:	.word	0x00000105
     b8c:	.word	0x00000102
     b90:	.word	0x00000103
     b94:	.word	0x00000d18

00000b98 <yy_get_next_buffer>:
     b98:	push	{r4, fp, lr}
     b9c:	add	fp, sp, #8
     ba0:	sub	sp, sp, #68	; 0x44
     ba4:	str	r0, [fp, #-72]	; 0xffffffb8
     ba8:	ldr	r3, [fp, #-72]	; 0xffffffb8
     bac:	str	r3, [fp, #-44]	; 0xffffffd4
     bb0:	ldr	r3, [fp, #-44]	; 0xffffffd4
     bb4:	ldr	r2, [r3, #20]
     bb8:	ldr	r3, [fp, #-44]	; 0xffffffd4
     bbc:	ldr	r3, [r3, #12]
     bc0:	lsl	r3, r3, #2
     bc4:	add	r3, r2, r3
     bc8:	ldr	r3, [r3]
     bcc:	ldr	r3, [r3, #4]
     bd0:	str	r3, [fp, #-16]
     bd4:	ldr	r3, [fp, #-44]	; 0xffffffd4
     bd8:	ldr	r3, [r3, #80]	; 0x50
     bdc:	str	r3, [fp, #-20]	; 0xffffffec
     be0:	ldr	r3, [fp, #-44]	; 0xffffffd4
     be4:	ldr	r2, [r3, #36]	; 0x24
     be8:	ldr	r3, [fp, #-44]	; 0xffffffd4
     bec:	ldr	r1, [r3, #20]
     bf0:	ldr	r3, [fp, #-44]	; 0xffffffd4
     bf4:	ldr	r3, [r3, #12]
     bf8:	lsl	r3, r3, #2
     bfc:	add	r3, r1, r3
     c00:	ldr	r3, [r3]
     c04:	ldr	r1, [r3, #4]
     c08:	ldr	r3, [fp, #-44]	; 0xffffffd4
     c0c:	ldr	r3, [r3, #28]
     c10:	add	r3, r3, #1
     c14:	add	r3, r1, r3
     c18:	cmp	r2, r3
     c1c:	bls	c2c <yy_get_next_buffer+0x94>
     c20:	ldr	r1, [fp, #-72]	; 0xffffffb8
     c24:	ldr	r0, [pc, #1868]	; 1378 <yy_get_next_buffer+0x7e0>
     c28:	bl	2318 <yy_fatal_error>
     c2c:	ldr	r3, [fp, #-44]	; 0xffffffd4
     c30:	ldr	r2, [r3, #20]
     c34:	ldr	r3, [fp, #-44]	; 0xffffffd4
     c38:	ldr	r3, [r3, #12]
     c3c:	lsl	r3, r3, #2
     c40:	add	r3, r2, r3
     c44:	ldr	r3, [r3]
     c48:	ldr	r3, [r3, #40]	; 0x28
     c4c:	cmp	r3, #0
     c50:	bne	c84 <yy_get_next_buffer+0xec>
     c54:	ldr	r3, [fp, #-44]	; 0xffffffd4
     c58:	ldr	r3, [r3, #36]	; 0x24
     c5c:	mov	r2, r3
     c60:	ldr	r3, [fp, #-44]	; 0xffffffd4
     c64:	ldr	r3, [r3, #80]	; 0x50
     c68:	sub	r3, r2, r3
     c6c:	cmp	r3, #1
     c70:	bne	c7c <yy_get_next_buffer+0xe4>
     c74:	mov	r3, #1
     c78:	b	136c <yy_get_next_buffer+0x7d4>
     c7c:	mov	r3, #2
     c80:	b	136c <yy_get_next_buffer+0x7d4>
     c84:	ldr	r3, [fp, #-44]	; 0xffffffd4
     c88:	ldr	r3, [r3, #36]	; 0x24
     c8c:	mov	r2, r3
     c90:	ldr	r3, [fp, #-44]	; 0xffffffd4
     c94:	ldr	r3, [r3, #80]	; 0x50
     c98:	sub	r3, r2, r3
     c9c:	sub	r3, r3, #1
     ca0:	str	r3, [fp, #-48]	; 0xffffffd0
     ca4:	mov	r3, #0
     ca8:	str	r3, [fp, #-24]	; 0xffffffe8
     cac:	b	cdc <yy_get_next_buffer+0x144>
     cb0:	ldr	r3, [fp, #-16]
     cb4:	add	r2, r3, #1
     cb8:	str	r2, [fp, #-16]
     cbc:	ldr	r2, [fp, #-20]	; 0xffffffec
     cc0:	add	r1, r2, #1
     cc4:	str	r1, [fp, #-20]	; 0xffffffec
     cc8:	ldrb	r2, [r2]
     ccc:	strb	r2, [r3]
     cd0:	ldr	r3, [fp, #-24]	; 0xffffffe8
     cd4:	add	r3, r3, #1
     cd8:	str	r3, [fp, #-24]	; 0xffffffe8
     cdc:	ldr	r2, [fp, #-24]	; 0xffffffe8
     ce0:	ldr	r3, [fp, #-48]	; 0xffffffd0
     ce4:	cmp	r2, r3
     ce8:	blt	cb0 <yy_get_next_buffer+0x118>
     cec:	ldr	r3, [fp, #-44]	; 0xffffffd4
     cf0:	ldr	r2, [r3, #20]
     cf4:	ldr	r3, [fp, #-44]	; 0xffffffd4
     cf8:	ldr	r3, [r3, #12]
     cfc:	lsl	r3, r3, #2
     d00:	add	r3, r2, r3
     d04:	ldr	r3, [r3]
     d08:	ldr	r3, [r3, #44]	; 0x2c
     d0c:	cmp	r3, #2
     d10:	bne	d4c <yy_get_next_buffer+0x1b4>
     d14:	ldr	r3, [fp, #-44]	; 0xffffffd4
     d18:	ldr	r2, [r3, #20]
     d1c:	ldr	r3, [fp, #-44]	; 0xffffffd4
     d20:	ldr	r3, [r3, #12]
     d24:	lsl	r3, r3, #2
     d28:	add	r3, r2, r3
     d2c:	ldr	r3, [r3]
     d30:	ldr	r2, [fp, #-44]	; 0xffffffd4
     d34:	mov	r1, #0
     d38:	str	r1, [r2, #28]
     d3c:	ldr	r2, [fp, #-44]	; 0xffffffd4
     d40:	ldr	r2, [r2, #28]
     d44:	str	r2, [r3, #16]
     d48:	b	113c <yy_get_next_buffer+0x5a4>
     d4c:	ldr	r3, [fp, #-44]	; 0xffffffd4
     d50:	ldr	r2, [r3, #20]
     d54:	ldr	r3, [fp, #-44]	; 0xffffffd4
     d58:	ldr	r3, [r3, #12]
     d5c:	lsl	r3, r3, #2
     d60:	add	r3, r2, r3
     d64:	ldr	r3, [r3]
     d68:	ldr	r2, [r3, #12]
     d6c:	ldr	r3, [fp, #-48]	; 0xffffffd0
     d70:	sub	r3, r2, r3
     d74:	sub	r3, r3, #1
     d78:	str	r3, [fp, #-32]	; 0xffffffe0
     d7c:	b	ed0 <yy_get_next_buffer+0x338>
     d80:	ldr	r3, [fp, #-44]	; 0xffffffd4
     d84:	ldr	r2, [r3, #20]
     d88:	ldr	r3, [fp, #-44]	; 0xffffffd4
     d8c:	ldr	r3, [r3, #12]
     d90:	lsl	r3, r3, #2
     d94:	add	r3, r2, r3
     d98:	ldr	r3, [r3]
     d9c:	str	r3, [fp, #-52]	; 0xffffffcc
     da0:	ldr	r3, [fp, #-44]	; 0xffffffd4
     da4:	ldr	r3, [r3, #36]	; 0x24
     da8:	mov	r2, r3
     dac:	ldr	r3, [fp, #-52]	; 0xffffffcc
     db0:	ldr	r3, [r3, #4]
     db4:	sub	r3, r2, r3
     db8:	str	r3, [fp, #-56]	; 0xffffffc8
     dbc:	ldr	r3, [fp, #-52]	; 0xffffffcc
     dc0:	ldr	r3, [r3, #20]
     dc4:	cmp	r3, #0
     dc8:	beq	e60 <yy_get_next_buffer+0x2c8>
     dcc:	ldr	r3, [fp, #-52]	; 0xffffffcc
     dd0:	ldr	r3, [r3, #12]
     dd4:	lsl	r3, r3, #1
     dd8:	str	r3, [fp, #-60]	; 0xffffffc4
     ddc:	ldr	r3, [fp, #-60]	; 0xffffffc4
     de0:	cmp	r3, #0
     de4:	bgt	e1c <yy_get_next_buffer+0x284>
     de8:	ldr	r3, [fp, #-52]	; 0xffffffcc
     dec:	ldr	r2, [r3, #12]
     df0:	ldr	r3, [fp, #-52]	; 0xffffffcc
     df4:	ldr	r3, [r3, #12]
     df8:	add	r1, r3, #7
     dfc:	cmp	r3, #0
     e00:	movlt	r3, r1
     e04:	movge	r3, r3
     e08:	asr	r3, r3, #3
     e0c:	add	r2, r2, r3
     e10:	ldr	r3, [fp, #-52]	; 0xffffffcc
     e14:	str	r2, [r3, #12]
     e18:	b	e30 <yy_get_next_buffer+0x298>
     e1c:	ldr	r3, [fp, #-52]	; 0xffffffcc
     e20:	ldr	r3, [r3, #12]
     e24:	lsl	r2, r3, #1
     e28:	ldr	r3, [fp, #-52]	; 0xffffffcc
     e2c:	str	r2, [r3, #12]
     e30:	ldr	r3, [fp, #-52]	; 0xffffffcc
     e34:	ldr	r0, [r3, #4]
     e38:	ldr	r3, [fp, #-52]	; 0xffffffcc
     e3c:	ldr	r3, [r3, #12]
     e40:	add	r3, r3, #2
     e44:	ldr	r2, [fp, #-72]	; 0xffffffb8
     e48:	mov	r1, r3
     e4c:	bl	2b78 <coda_expression_realloc>
     e50:	mov	r2, r0
     e54:	ldr	r3, [fp, #-52]	; 0xffffffcc
     e58:	str	r2, [r3, #4]
     e5c:	b	e6c <yy_get_next_buffer+0x2d4>
     e60:	ldr	r3, [fp, #-52]	; 0xffffffcc
     e64:	mov	r2, #0
     e68:	str	r2, [r3, #4]
     e6c:	ldr	r3, [fp, #-52]	; 0xffffffcc
     e70:	ldr	r3, [r3, #4]
     e74:	cmp	r3, #0
     e78:	bne	e88 <yy_get_next_buffer+0x2f0>
     e7c:	ldr	r1, [fp, #-72]	; 0xffffffb8
     e80:	ldr	r0, [pc, #1268]	; 137c <yy_get_next_buffer+0x7e4>
     e84:	bl	2318 <yy_fatal_error>
     e88:	ldr	r3, [fp, #-52]	; 0xffffffcc
     e8c:	ldr	r2, [r3, #4]
     e90:	ldr	r3, [fp, #-56]	; 0xffffffc8
     e94:	add	r2, r2, r3
     e98:	ldr	r3, [fp, #-44]	; 0xffffffd4
     e9c:	str	r2, [r3, #36]	; 0x24
     ea0:	ldr	r3, [fp, #-44]	; 0xffffffd4
     ea4:	ldr	r2, [r3, #20]
     ea8:	ldr	r3, [fp, #-44]	; 0xffffffd4
     eac:	ldr	r3, [r3, #12]
     eb0:	lsl	r3, r3, #2
     eb4:	add	r3, r2, r3
     eb8:	ldr	r3, [r3]
     ebc:	ldr	r2, [r3, #12]
     ec0:	ldr	r3, [fp, #-48]	; 0xffffffd0
     ec4:	sub	r3, r2, r3
     ec8:	sub	r3, r3, #1
     ecc:	str	r3, [fp, #-32]	; 0xffffffe0
     ed0:	ldr	r3, [fp, #-32]	; 0xffffffe0
     ed4:	cmp	r3, #0
     ed8:	ble	d80 <yy_get_next_buffer+0x1e8>
     edc:	ldr	r3, [fp, #-32]	; 0xffffffe0
     ee0:	cmp	r3, #8192	; 0x2000
     ee4:	ble	ef0 <yy_get_next_buffer+0x358>
     ee8:	mov	r3, #8192	; 0x2000
     eec:	str	r3, [fp, #-32]	; 0xffffffe0
     ef0:	ldr	r3, [fp, #-44]	; 0xffffffd4
     ef4:	ldr	r2, [r3, #20]
     ef8:	ldr	r3, [fp, #-44]	; 0xffffffd4
     efc:	ldr	r3, [r3, #12]
     f00:	lsl	r3, r3, #2
     f04:	add	r3, r2, r3
     f08:	ldr	r3, [r3]
     f0c:	ldr	r3, [r3, #24]
     f10:	cmp	r3, #0
     f14:	beq	1048 <yy_get_next_buffer+0x4b0>
     f18:	mov	r3, #42	; 0x2a
     f1c:	str	r3, [fp, #-36]	; 0xffffffdc
     f20:	mov	r3, #0
     f24:	str	r3, [fp, #-40]	; 0xffffffd8
     f28:	b	f74 <yy_get_next_buffer+0x3dc>
     f2c:	ldr	r3, [fp, #-44]	; 0xffffffd4
     f30:	ldr	r2, [r3, #20]
     f34:	ldr	r3, [fp, #-44]	; 0xffffffd4
     f38:	ldr	r3, [r3, #12]
     f3c:	lsl	r3, r3, #2
     f40:	add	r3, r2, r3
     f44:	ldr	r3, [r3]
     f48:	ldr	r2, [r3, #4]
     f4c:	ldr	r1, [fp, #-48]	; 0xffffffd0
     f50:	ldr	r3, [fp, #-40]	; 0xffffffd8
     f54:	add	r3, r1, r3
     f58:	add	r3, r2, r3
     f5c:	ldr	r2, [fp, #-36]	; 0xffffffdc
     f60:	uxtb	r2, r2
     f64:	strb	r2, [r3]
     f68:	ldr	r3, [fp, #-40]	; 0xffffffd8
     f6c:	add	r3, r3, #1
     f70:	str	r3, [fp, #-40]	; 0xffffffd8
     f74:	ldr	r2, [fp, #-40]	; 0xffffffd8
     f78:	ldr	r3, [fp, #-32]	; 0xffffffe0
     f7c:	cmp	r2, r3
     f80:	bge	fb0 <yy_get_next_buffer+0x418>
     f84:	ldr	r3, [fp, #-44]	; 0xffffffd4
     f88:	ldr	r3, [r3, #4]
     f8c:	mov	r0, r3
     f90:	bl	0 <getc>
     f94:	str	r0, [fp, #-36]	; 0xffffffdc
     f98:	ldr	r3, [fp, #-36]	; 0xffffffdc
     f9c:	cmn	r3, #1
     fa0:	beq	fb0 <yy_get_next_buffer+0x418>
     fa4:	ldr	r3, [fp, #-36]	; 0xffffffdc
     fa8:	cmp	r3, #10
     fac:	bne	f2c <yy_get_next_buffer+0x394>
     fb0:	ldr	r3, [fp, #-36]	; 0xffffffdc
     fb4:	cmp	r3, #10
     fb8:	bne	1004 <yy_get_next_buffer+0x46c>
     fbc:	ldr	r3, [fp, #-44]	; 0xffffffd4
     fc0:	ldr	r2, [r3, #20]
     fc4:	ldr	r3, [fp, #-44]	; 0xffffffd4
     fc8:	ldr	r3, [r3, #12]
     fcc:	lsl	r3, r3, #2
     fd0:	add	r3, r2, r3
     fd4:	ldr	r3, [r3]
     fd8:	ldr	r2, [r3, #4]
     fdc:	ldr	r3, [fp, #-40]	; 0xffffffd8
     fe0:	add	r1, r3, #1
     fe4:	str	r1, [fp, #-40]	; 0xffffffd8
     fe8:	mov	r1, r3
     fec:	ldr	r3, [fp, #-48]	; 0xffffffd0
     ff0:	add	r3, r1, r3
     ff4:	add	r3, r2, r3
     ff8:	ldr	r2, [fp, #-36]	; 0xffffffdc
     ffc:	uxtb	r2, r2
    1000:	strb	r2, [r3]
    1004:	ldr	r3, [fp, #-36]	; 0xffffffdc
    1008:	cmn	r3, #1
    100c:	bne	1038 <yy_get_next_buffer+0x4a0>
    1010:	ldr	r3, [fp, #-44]	; 0xffffffd4
    1014:	ldr	r3, [r3, #4]
    1018:	mov	r0, r3
    101c:	bl	0 <ferror>
    1020:	mov	r3, r0
    1024:	cmp	r3, #0
    1028:	beq	1038 <yy_get_next_buffer+0x4a0>
    102c:	ldr	r1, [fp, #-72]	; 0xffffffb8
    1030:	ldr	r0, [pc, #840]	; 1380 <yy_get_next_buffer+0x7e8>
    1034:	bl	2318 <yy_fatal_error>
    1038:	ldr	r3, [fp, #-44]	; 0xffffffd4
    103c:	ldr	r2, [fp, #-40]	; 0xffffffd8
    1040:	str	r2, [r3, #28]
    1044:	b	1114 <yy_get_next_buffer+0x57c>
    1048:	bl	0 <__errno_location>
    104c:	mov	r2, r0
    1050:	mov	r3, #0
    1054:	str	r3, [r2]
    1058:	b	109c <yy_get_next_buffer+0x504>
    105c:	bl	0 <__errno_location>
    1060:	mov	r3, r0
    1064:	ldr	r3, [r3]
    1068:	cmp	r3, #4
    106c:	beq	107c <yy_get_next_buffer+0x4e4>
    1070:	ldr	r1, [fp, #-72]	; 0xffffffb8
    1074:	ldr	r0, [pc, #772]	; 1380 <yy_get_next_buffer+0x7e8>
    1078:	bl	2318 <yy_fatal_error>
    107c:	bl	0 <__errno_location>
    1080:	mov	r2, r0
    1084:	mov	r3, #0
    1088:	str	r3, [r2]
    108c:	ldr	r3, [fp, #-44]	; 0xffffffd4
    1090:	ldr	r3, [r3, #4]
    1094:	mov	r0, r3
    1098:	bl	0 <clearerr>
    109c:	ldr	r3, [fp, #-44]	; 0xffffffd4
    10a0:	ldr	r2, [r3, #20]
    10a4:	ldr	r3, [fp, #-44]	; 0xffffffd4
    10a8:	ldr	r3, [r3, #12]
    10ac:	lsl	r3, r3, #2
    10b0:	add	r3, r2, r3
    10b4:	ldr	r3, [r3]
    10b8:	ldr	r2, [r3, #4]
    10bc:	ldr	r3, [fp, #-48]	; 0xffffffd0
    10c0:	add	r0, r2, r3
    10c4:	ldr	r2, [fp, #-32]	; 0xffffffe0
    10c8:	ldr	r3, [fp, #-44]	; 0xffffffd4
    10cc:	ldr	r3, [r3, #4]
    10d0:	mov	r1, #1
    10d4:	bl	0 <fread>
    10d8:	mov	r3, r0
    10dc:	mov	r2, r3
    10e0:	ldr	r3, [fp, #-44]	; 0xffffffd4
    10e4:	str	r2, [r3, #28]
    10e8:	ldr	r3, [fp, #-44]	; 0xffffffd4
    10ec:	ldr	r3, [r3, #28]
    10f0:	cmp	r3, #0
    10f4:	bne	1114 <yy_get_next_buffer+0x57c>
    10f8:	ldr	r3, [fp, #-44]	; 0xffffffd4
    10fc:	ldr	r3, [r3, #4]
    1100:	mov	r0, r3
    1104:	bl	0 <ferror>
    1108:	mov	r3, r0
    110c:	cmp	r3, #0
    1110:	bne	105c <yy_get_next_buffer+0x4c4>
    1114:	ldr	r3, [fp, #-44]	; 0xffffffd4
    1118:	ldr	r2, [r3, #20]
    111c:	ldr	r3, [fp, #-44]	; 0xffffffd4
    1120:	ldr	r3, [r3, #12]
    1124:	lsl	r3, r3, #2
    1128:	add	r3, r2, r3
    112c:	ldr	r3, [r3]
    1130:	ldr	r2, [fp, #-44]	; 0xffffffd4
    1134:	ldr	r2, [r2, #28]
    1138:	str	r2, [r3, #16]
    113c:	ldr	r3, [fp, #-44]	; 0xffffffd4
    1140:	ldr	r3, [r3, #28]
    1144:	cmp	r3, #0
    1148:	bne	11a8 <yy_get_next_buffer+0x610>
    114c:	ldr	r3, [fp, #-48]	; 0xffffffd0
    1150:	cmp	r3, #0
    1154:	bne	1178 <yy_get_next_buffer+0x5e0>
    1158:	mov	r3, #1
    115c:	str	r3, [fp, #-28]	; 0xffffffe4
    1160:	ldr	r3, [fp, #-44]	; 0xffffffd4
    1164:	ldr	r3, [r3, #4]
    1168:	ldr	r1, [fp, #-72]	; 0xffffffb8
    116c:	mov	r0, r3
    1170:	bl	1698 <coda_expression_restart>
    1174:	b	11b0 <yy_get_next_buffer+0x618>
    1178:	mov	r3, #2
    117c:	str	r3, [fp, #-28]	; 0xffffffe4
    1180:	ldr	r3, [fp, #-44]	; 0xffffffd4
    1184:	ldr	r2, [r3, #20]
    1188:	ldr	r3, [fp, #-44]	; 0xffffffd4
    118c:	ldr	r3, [r3, #12]
    1190:	lsl	r3, r3, #2
    1194:	add	r3, r2, r3
    1198:	ldr	r3, [r3]
    119c:	mov	r2, #2
    11a0:	str	r2, [r3, #44]	; 0x2c
    11a4:	b	11b0 <yy_get_next_buffer+0x618>
    11a8:	mov	r3, #0
    11ac:	str	r3, [fp, #-28]	; 0xffffffe4
    11b0:	ldr	r3, [fp, #-44]	; 0xffffffd4
    11b4:	ldr	r2, [r3, #28]
    11b8:	ldr	r3, [fp, #-48]	; 0xffffffd0
    11bc:	add	r2, r2, r3
    11c0:	ldr	r3, [fp, #-44]	; 0xffffffd4
    11c4:	ldr	r1, [r3, #20]
    11c8:	ldr	r3, [fp, #-44]	; 0xffffffd4
    11cc:	ldr	r3, [r3, #12]
    11d0:	lsl	r3, r3, #2
    11d4:	add	r3, r1, r3
    11d8:	ldr	r3, [r3]
    11dc:	ldr	r3, [r3, #12]
    11e0:	cmp	r2, r3
    11e4:	ble	12bc <yy_get_next_buffer+0x724>
    11e8:	ldr	r3, [fp, #-44]	; 0xffffffd4
    11ec:	ldr	r2, [r3, #28]
    11f0:	ldr	r3, [fp, #-48]	; 0xffffffd0
    11f4:	add	r2, r2, r3
    11f8:	ldr	r3, [fp, #-44]	; 0xffffffd4
    11fc:	ldr	r3, [r3, #28]
    1200:	asr	r3, r3, #1
    1204:	add	r3, r2, r3
    1208:	str	r3, [fp, #-64]	; 0xffffffc0
    120c:	ldr	r3, [fp, #-44]	; 0xffffffd4
    1210:	ldr	r2, [r3, #20]
    1214:	ldr	r3, [fp, #-44]	; 0xffffffd4
    1218:	ldr	r3, [r3, #12]
    121c:	lsl	r3, r3, #2
    1220:	add	r3, r2, r3
    1224:	ldr	r4, [r3]
    1228:	ldr	r3, [fp, #-44]	; 0xffffffd4
    122c:	ldr	r2, [r3, #20]
    1230:	ldr	r3, [fp, #-44]	; 0xffffffd4
    1234:	ldr	r3, [r3, #12]
    1238:	lsl	r3, r3, #2
    123c:	add	r3, r2, r3
    1240:	ldr	r3, [r3]
    1244:	ldr	r3, [r3, #4]
    1248:	ldr	r1, [fp, #-64]	; 0xffffffc0
    124c:	ldr	r2, [fp, #-72]	; 0xffffffb8
    1250:	mov	r0, r3
    1254:	bl	2b78 <coda_expression_realloc>
    1258:	mov	r3, r0
    125c:	str	r3, [r4, #4]
    1260:	ldr	r3, [fp, #-44]	; 0xffffffd4
    1264:	ldr	r2, [r3, #20]
    1268:	ldr	r3, [fp, #-44]	; 0xffffffd4
    126c:	ldr	r3, [r3, #12]
    1270:	lsl	r3, r3, #2
    1274:	add	r3, r2, r3
    1278:	ldr	r3, [r3]
    127c:	ldr	r3, [r3, #4]
    1280:	cmp	r3, #0
    1284:	bne	1294 <yy_get_next_buffer+0x6fc>
    1288:	ldr	r1, [fp, #-72]	; 0xffffffb8
    128c:	ldr	r0, [pc, #240]	; 1384 <yy_get_next_buffer+0x7ec>
    1290:	bl	2318 <yy_fatal_error>
    1294:	ldr	r3, [fp, #-44]	; 0xffffffd4
    1298:	ldr	r2, [r3, #20]
    129c:	ldr	r3, [fp, #-44]	; 0xffffffd4
    12a0:	ldr	r3, [r3, #12]
    12a4:	lsl	r3, r3, #2
    12a8:	add	r3, r2, r3
    12ac:	ldr	r3, [r3]
    12b0:	ldr	r2, [fp, #-64]	; 0xffffffc0
    12b4:	sub	r2, r2, #2
    12b8:	str	r2, [r3, #12]
    12bc:	ldr	r3, [fp, #-44]	; 0xffffffd4
    12c0:	ldr	r2, [r3, #28]
    12c4:	ldr	r3, [fp, #-48]	; 0xffffffd0
    12c8:	add	r2, r2, r3
    12cc:	ldr	r3, [fp, #-44]	; 0xffffffd4
    12d0:	str	r2, [r3, #28]
    12d4:	ldr	r3, [fp, #-44]	; 0xffffffd4
    12d8:	ldr	r2, [r3, #20]
    12dc:	ldr	r3, [fp, #-44]	; 0xffffffd4
    12e0:	ldr	r3, [r3, #12]
    12e4:	lsl	r3, r3, #2
    12e8:	add	r3, r2, r3
    12ec:	ldr	r3, [r3]
    12f0:	ldr	r3, [r3, #4]
    12f4:	ldr	r2, [fp, #-44]	; 0xffffffd4
    12f8:	ldr	r2, [r2, #28]
    12fc:	add	r3, r3, r2
    1300:	mov	r2, #0
    1304:	strb	r2, [r3]
    1308:	ldr	r3, [fp, #-44]	; 0xffffffd4
    130c:	ldr	r2, [r3, #20]
    1310:	ldr	r3, [fp, #-44]	; 0xffffffd4
    1314:	ldr	r3, [r3, #12]
    1318:	lsl	r3, r3, #2
    131c:	add	r3, r2, r3
    1320:	ldr	r3, [r3]
    1324:	ldr	r2, [r3, #4]
    1328:	ldr	r3, [fp, #-44]	; 0xffffffd4
    132c:	ldr	r3, [r3, #28]
    1330:	add	r3, r3, #1
    1334:	add	r3, r2, r3
    1338:	mov	r2, #0
    133c:	strb	r2, [r3]
    1340:	ldr	r3, [fp, #-44]	; 0xffffffd4
    1344:	ldr	r2, [r3, #20]
    1348:	ldr	r3, [fp, #-44]	; 0xffffffd4
    134c:	ldr	r3, [r3, #12]
    1350:	lsl	r3, r3, #2
    1354:	add	r3, r2, r3
    1358:	ldr	r3, [r3]
    135c:	ldr	r2, [r3, #4]
    1360:	ldr	r3, [fp, #-44]	; 0xffffffd4
    1364:	str	r2, [r3, #80]	; 0x50
    1368:	ldr	r3, [fp, #-28]	; 0xffffffe4
    136c:	mov	r0, r3
    1370:	sub	sp, fp, #8
    1374:	pop	{r4, fp, pc}
    1378:	.word	0x00000d4c
    137c:	.word	0x00000d84
    1380:	.word	0x00000db0
    1384:	.word	0x00000dd0

00001388 <yy_get_previous_state>:
    1388:	push	{fp}		; (str fp, [sp, #-4]!)
    138c:	add	fp, sp, #0
    1390:	sub	sp, sp, #28
    1394:	str	r0, [fp, #-24]	; 0xffffffe8
    1398:	ldr	r3, [fp, #-24]	; 0xffffffe8
    139c:	str	r3, [fp, #-20]	; 0xffffffec
    13a0:	ldr	r3, [fp, #-20]	; 0xffffffec
    13a4:	ldr	r3, [r3, #44]	; 0x2c
    13a8:	str	r3, [fp, #-8]
    13ac:	ldr	r3, [fp, #-20]	; 0xffffffec
    13b0:	ldr	r3, [r3, #80]	; 0x50
    13b4:	str	r3, [fp, #-12]
    13b8:	b	14dc <yy_get_previous_state+0x154>
    13bc:	ldr	r3, [fp, #-12]
    13c0:	ldrb	r3, [r3]
    13c4:	cmp	r3, #0
    13c8:	beq	13e4 <yy_get_previous_state+0x5c>
    13cc:	ldr	r3, [fp, #-12]
    13d0:	ldrb	r3, [r3]
    13d4:	mov	r2, r3
    13d8:	ldr	r3, [pc, #292]	; 1504 <yy_get_previous_state+0x17c>
    13dc:	ldrb	r3, [r3, r2]
    13e0:	b	13e8 <yy_get_previous_state+0x60>
    13e4:	mov	r3, #1
    13e8:	strb	r3, [fp, #-13]
    13ec:	ldr	r2, [pc, #276]	; 1508 <yy_get_previous_state+0x180>
    13f0:	ldr	r3, [fp, #-8]
    13f4:	lsl	r3, r3, #1
    13f8:	add	r3, r2, r3
    13fc:	ldrsh	r3, [r3]
    1400:	cmp	r3, #0
    1404:	beq	145c <yy_get_previous_state+0xd4>
    1408:	ldr	r3, [fp, #-20]	; 0xffffffec
    140c:	ldr	r2, [fp, #-8]
    1410:	str	r2, [r3, #64]	; 0x40
    1414:	ldr	r3, [fp, #-20]	; 0xffffffec
    1418:	ldr	r2, [fp, #-12]
    141c:	str	r2, [r3, #68]	; 0x44
    1420:	b	145c <yy_get_previous_state+0xd4>
    1424:	ldr	r2, [pc, #224]	; 150c <yy_get_previous_state+0x184>
    1428:	ldr	r3, [fp, #-8]
    142c:	lsl	r3, r3, #1
    1430:	add	r3, r2, r3
    1434:	ldrsh	r3, [r3]
    1438:	str	r3, [fp, #-8]
    143c:	ldr	r3, [fp, #-8]
    1440:	ldr	r2, [pc, #200]	; 1510 <yy_get_previous_state+0x188>
    1444:	cmp	r3, r2
    1448:	ble	145c <yy_get_previous_state+0xd4>
    144c:	ldrb	r3, [fp, #-13]
    1450:	ldr	r2, [pc, #188]	; 1514 <yy_get_previous_state+0x18c>
    1454:	ldrb	r3, [r2, r3]
    1458:	strb	r3, [fp, #-13]
    145c:	ldr	r2, [pc, #180]	; 1518 <yy_get_previous_state+0x190>
    1460:	ldr	r3, [fp, #-8]
    1464:	lsl	r3, r3, #1
    1468:	add	r3, r2, r3
    146c:	ldrsh	r3, [r3]
    1470:	mov	r2, r3
    1474:	ldrb	r3, [fp, #-13]
    1478:	add	r3, r2, r3
    147c:	ldr	r2, [pc, #152]	; 151c <yy_get_previous_state+0x194>
    1480:	lsl	r3, r3, #1
    1484:	add	r3, r2, r3
    1488:	ldrsh	r3, [r3]
    148c:	mov	r2, r3
    1490:	ldr	r3, [fp, #-8]
    1494:	cmp	r2, r3
    1498:	bne	1424 <yy_get_previous_state+0x9c>
    149c:	ldr	r2, [pc, #116]	; 1518 <yy_get_previous_state+0x190>
    14a0:	ldr	r3, [fp, #-8]
    14a4:	lsl	r3, r3, #1
    14a8:	add	r3, r2, r3
    14ac:	ldrsh	r3, [r3]
    14b0:	mov	r2, r3
    14b4:	ldrb	r3, [fp, #-13]
    14b8:	add	r3, r2, r3
    14bc:	ldr	r2, [pc, #92]	; 1520 <yy_get_previous_state+0x198>
    14c0:	lsl	r3, r3, #1
    14c4:	add	r3, r2, r3
    14c8:	ldrsh	r3, [r3]
    14cc:	str	r3, [fp, #-8]
    14d0:	ldr	r3, [fp, #-12]
    14d4:	add	r3, r3, #1
    14d8:	str	r3, [fp, #-12]
    14dc:	ldr	r3, [fp, #-20]	; 0xffffffec
    14e0:	ldr	r2, [r3, #36]	; 0x24
    14e4:	ldr	r3, [fp, #-12]
    14e8:	cmp	r2, r3
    14ec:	bhi	13bc <yy_get_previous_state+0x34>
    14f0:	ldr	r3, [fp, #-8]
    14f4:	mov	r0, r3
    14f8:	add	sp, fp, #0
    14fc:	pop	{fp}		; (ldr fp, [sp], #4)
    1500:	bx	lr
    1504:	.word	0x00000224
    1508:	.word	0x00000000
    150c:	.word	0x00000578
    1510:	.word	0x00000111
    1514:	.word	0x00000324
    1518:	.word	0x00000350
    151c:	.word	0x00000a5c
    1520:	.word	0x000007a0

00001524 <yy_try_NUL_trans>:
    1524:	push	{fp}		; (str fp, [sp, #-4]!)
    1528:	add	fp, sp, #0
    152c:	sub	sp, sp, #28
    1530:	str	r0, [fp, #-24]	; 0xffffffe8
    1534:	str	r1, [fp, #-28]	; 0xffffffe4
    1538:	ldr	r3, [fp, #-28]	; 0xffffffe4
    153c:	str	r3, [fp, #-12]
    1540:	ldr	r3, [fp, #-12]
    1544:	ldr	r3, [r3, #36]	; 0x24
    1548:	str	r3, [fp, #-16]
    154c:	mov	r3, #1
    1550:	strb	r3, [fp, #-5]
    1554:	ldr	r2, [pc, #288]	; 167c <yy_try_NUL_trans+0x158>
    1558:	ldr	r3, [fp, #-24]	; 0xffffffe8
    155c:	lsl	r3, r3, #1
    1560:	add	r3, r2, r3
    1564:	ldrsh	r3, [r3]
    1568:	cmp	r3, #0
    156c:	beq	15c4 <yy_try_NUL_trans+0xa0>
    1570:	ldr	r3, [fp, #-12]
    1574:	ldr	r2, [fp, #-24]	; 0xffffffe8
    1578:	str	r2, [r3, #64]	; 0x40
    157c:	ldr	r3, [fp, #-12]
    1580:	ldr	r2, [fp, #-16]
    1584:	str	r2, [r3, #68]	; 0x44
    1588:	b	15c4 <yy_try_NUL_trans+0xa0>
    158c:	ldr	r2, [pc, #236]	; 1680 <yy_try_NUL_trans+0x15c>
    1590:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1594:	lsl	r3, r3, #1
    1598:	add	r3, r2, r3
    159c:	ldrsh	r3, [r3]
    15a0:	str	r3, [fp, #-24]	; 0xffffffe8
    15a4:	ldr	r3, [fp, #-24]	; 0xffffffe8
    15a8:	ldr	r2, [pc, #212]	; 1684 <yy_try_NUL_trans+0x160>
    15ac:	cmp	r3, r2
    15b0:	ble	15c4 <yy_try_NUL_trans+0xa0>
    15b4:	ldrb	r3, [fp, #-5]
    15b8:	ldr	r2, [pc, #200]	; 1688 <yy_try_NUL_trans+0x164>
    15bc:	ldrb	r3, [r2, r3]
    15c0:	strb	r3, [fp, #-5]
    15c4:	ldr	r2, [pc, #192]	; 168c <yy_try_NUL_trans+0x168>
    15c8:	ldr	r3, [fp, #-24]	; 0xffffffe8
    15cc:	lsl	r3, r3, #1
    15d0:	add	r3, r2, r3
    15d4:	ldrsh	r3, [r3]
    15d8:	mov	r2, r3
    15dc:	ldrb	r3, [fp, #-5]
    15e0:	add	r3, r2, r3
    15e4:	ldr	r2, [pc, #164]	; 1690 <yy_try_NUL_trans+0x16c>
    15e8:	lsl	r3, r3, #1
    15ec:	add	r3, r2, r3
    15f0:	ldrsh	r3, [r3]
    15f4:	mov	r2, r3
    15f8:	ldr	r3, [fp, #-24]	; 0xffffffe8
    15fc:	cmp	r2, r3
    1600:	bne	158c <yy_try_NUL_trans+0x68>
    1604:	ldr	r2, [pc, #128]	; 168c <yy_try_NUL_trans+0x168>
    1608:	ldr	r3, [fp, #-24]	; 0xffffffe8
    160c:	lsl	r3, r3, #1
    1610:	add	r3, r2, r3
    1614:	ldrsh	r3, [r3]
    1618:	mov	r2, r3
    161c:	ldrb	r3, [fp, #-5]
    1620:	add	r3, r2, r3
    1624:	ldr	r2, [pc, #104]	; 1694 <yy_try_NUL_trans+0x170>
    1628:	lsl	r3, r3, #1
    162c:	add	r3, r2, r3
    1630:	ldrsh	r3, [r3]
    1634:	str	r3, [fp, #-24]	; 0xffffffe8
    1638:	ldr	r3, [fp, #-24]	; 0xffffffe8
    163c:	ldr	r2, [pc, #64]	; 1684 <yy_try_NUL_trans+0x160>
    1640:	cmp	r3, r2
    1644:	moveq	r3, #1
    1648:	movne	r3, #0
    164c:	uxtb	r3, r3
    1650:	str	r3, [fp, #-20]	; 0xffffffec
    1654:	ldr	r3, [fp, #-20]	; 0xffffffec
    1658:	cmp	r3, #0
    165c:	bne	1668 <yy_try_NUL_trans+0x144>
    1660:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1664:	b	166c <yy_try_NUL_trans+0x148>
    1668:	mov	r3, #0
    166c:	mov	r0, r3
    1670:	add	sp, fp, #0
    1674:	pop	{fp}		; (ldr fp, [sp], #4)
    1678:	bx	lr
    167c:	.word	0x00000000
    1680:	.word	0x00000578
    1684:	.word	0x00000111
    1688:	.word	0x00000324
    168c:	.word	0x00000350
    1690:	.word	0x00000a5c
    1694:	.word	0x000007a0

00001698 <coda_expression_restart>:
    1698:	push	{r4, fp, lr}
    169c:	add	fp, sp, #8
    16a0:	sub	sp, sp, #20
    16a4:	str	r0, [fp, #-24]	; 0xffffffe8
    16a8:	str	r1, [fp, #-28]	; 0xffffffe4
    16ac:	ldr	r3, [fp, #-28]	; 0xffffffe4
    16b0:	str	r3, [fp, #-16]
    16b4:	ldr	r3, [fp, #-16]
    16b8:	ldr	r3, [r3, #20]
    16bc:	cmp	r3, #0
    16c0:	beq	16e8 <coda_expression_restart+0x50>
    16c4:	ldr	r3, [fp, #-16]
    16c8:	ldr	r2, [r3, #20]
    16cc:	ldr	r3, [fp, #-16]
    16d0:	ldr	r3, [r3, #12]
    16d4:	lsl	r3, r3, #2
    16d8:	add	r3, r2, r3
    16dc:	ldr	r3, [r3]
    16e0:	cmp	r3, #0
    16e4:	bne	1728 <coda_expression_restart+0x90>
    16e8:	ldr	r0, [fp, #-28]	; 0xffffffe4
    16ec:	bl	1f30 <coda_expression_ensure_buffer_stack>
    16f0:	ldr	r3, [fp, #-16]
    16f4:	ldr	r2, [r3, #20]
    16f8:	ldr	r3, [fp, #-16]
    16fc:	ldr	r3, [r3, #12]
    1700:	lsl	r3, r3, #2
    1704:	add	r4, r2, r3
    1708:	ldr	r3, [fp, #-16]
    170c:	ldr	r3, [r3, #4]
    1710:	ldr	r2, [fp, #-28]	; 0xffffffe4
    1714:	mov	r1, #16384	; 0x4000
    1718:	mov	r0, r3
    171c:	bl	1984 <coda_expression__create_buffer>
    1720:	mov	r3, r0
    1724:	str	r3, [r4]
    1728:	ldr	r3, [fp, #-16]
    172c:	ldr	r3, [r3, #20]
    1730:	cmp	r3, #0
    1734:	beq	1758 <coda_expression_restart+0xc0>
    1738:	ldr	r3, [fp, #-16]
    173c:	ldr	r2, [r3, #20]
    1740:	ldr	r3, [fp, #-16]
    1744:	ldr	r3, [r3, #12]
    1748:	lsl	r3, r3, #2
    174c:	add	r3, r2, r3
    1750:	ldr	r3, [r3]
    1754:	b	175c <coda_expression_restart+0xc4>
    1758:	mov	r3, #0
    175c:	ldr	r2, [fp, #-28]	; 0xffffffe4
    1760:	ldr	r1, [fp, #-24]	; 0xffffffe8
    1764:	mov	r0, r3
    1768:	bl	1b08 <coda_expression__init_buffer>
    176c:	ldr	r0, [fp, #-28]	; 0xffffffe4
    1770:	bl	18c0 <coda_expression__load_buffer_state>
    1774:	nop			; (mov r0, r0)
    1778:	sub	sp, fp, #8
    177c:	pop	{r4, fp, pc}

00001780 <coda_expression__switch_to_buffer>:
    1780:	push	{fp, lr}
    1784:	add	fp, sp, #4
    1788:	sub	sp, sp, #16
    178c:	str	r0, [fp, #-16]
    1790:	str	r1, [fp, #-20]	; 0xffffffec
    1794:	ldr	r3, [fp, #-20]	; 0xffffffec
    1798:	str	r3, [fp, #-8]
    179c:	ldr	r0, [fp, #-20]	; 0xffffffec
    17a0:	bl	1f30 <coda_expression_ensure_buffer_stack>
    17a4:	ldr	r3, [fp, #-8]
    17a8:	ldr	r3, [r3, #20]
    17ac:	cmp	r3, #0
    17b0:	beq	17d4 <coda_expression__switch_to_buffer+0x54>
    17b4:	ldr	r3, [fp, #-8]
    17b8:	ldr	r2, [r3, #20]
    17bc:	ldr	r3, [fp, #-8]
    17c0:	ldr	r3, [r3, #12]
    17c4:	lsl	r3, r3, #2
    17c8:	add	r3, r2, r3
    17cc:	ldr	r3, [r3]
    17d0:	b	17d8 <coda_expression__switch_to_buffer+0x58>
    17d4:	mov	r3, #0
    17d8:	ldr	r2, [fp, #-16]
    17dc:	cmp	r3, r2
    17e0:	beq	18b4 <coda_expression__switch_to_buffer+0x134>
    17e4:	ldr	r3, [fp, #-8]
    17e8:	ldr	r3, [r3, #20]
    17ec:	cmp	r3, #0
    17f0:	beq	187c <coda_expression__switch_to_buffer+0xfc>
    17f4:	ldr	r3, [fp, #-8]
    17f8:	ldr	r2, [r3, #20]
    17fc:	ldr	r3, [fp, #-8]
    1800:	ldr	r3, [r3, #12]
    1804:	lsl	r3, r3, #2
    1808:	add	r3, r2, r3
    180c:	ldr	r3, [r3]
    1810:	cmp	r3, #0
    1814:	beq	187c <coda_expression__switch_to_buffer+0xfc>
    1818:	ldr	r3, [fp, #-8]
    181c:	ldr	r3, [r3, #36]	; 0x24
    1820:	ldr	r2, [fp, #-8]
    1824:	ldrb	r2, [r2, #24]
    1828:	strb	r2, [r3]
    182c:	ldr	r3, [fp, #-8]
    1830:	ldr	r2, [r3, #20]
    1834:	ldr	r3, [fp, #-8]
    1838:	ldr	r3, [r3, #12]
    183c:	lsl	r3, r3, #2
    1840:	add	r3, r2, r3
    1844:	ldr	r3, [r3]
    1848:	ldr	r2, [fp, #-8]
    184c:	ldr	r2, [r2, #36]	; 0x24
    1850:	str	r2, [r3, #8]
    1854:	ldr	r3, [fp, #-8]
    1858:	ldr	r2, [r3, #20]
    185c:	ldr	r3, [fp, #-8]
    1860:	ldr	r3, [r3, #12]
    1864:	lsl	r3, r3, #2
    1868:	add	r3, r2, r3
    186c:	ldr	r3, [r3]
    1870:	ldr	r2, [fp, #-8]
    1874:	ldr	r2, [r2, #28]
    1878:	str	r2, [r3, #16]
    187c:	ldr	r3, [fp, #-8]
    1880:	ldr	r2, [r3, #20]
    1884:	ldr	r3, [fp, #-8]
    1888:	ldr	r3, [r3, #12]
    188c:	lsl	r3, r3, #2
    1890:	add	r3, r2, r3
    1894:	ldr	r2, [fp, #-16]
    1898:	str	r2, [r3]
    189c:	ldr	r0, [fp, #-20]	; 0xffffffec
    18a0:	bl	18c0 <coda_expression__load_buffer_state>
    18a4:	ldr	r3, [fp, #-8]
    18a8:	mov	r2, #1
    18ac:	str	r2, [r3, #48]	; 0x30
    18b0:	b	18b8 <coda_expression__switch_to_buffer+0x138>
    18b4:	nop			; (mov r0, r0)
    18b8:	sub	sp, fp, #4
    18bc:	pop	{fp, pc}

000018c0 <coda_expression__load_buffer_state>:
    18c0:	push	{fp}		; (str fp, [sp, #-4]!)
    18c4:	add	fp, sp, #0
    18c8:	sub	sp, sp, #20
    18cc:	str	r0, [fp, #-16]
    18d0:	ldr	r3, [fp, #-16]
    18d4:	str	r3, [fp, #-8]
    18d8:	ldr	r3, [fp, #-8]
    18dc:	ldr	r2, [r3, #20]
    18e0:	ldr	r3, [fp, #-8]
    18e4:	ldr	r3, [r3, #12]
    18e8:	lsl	r3, r3, #2
    18ec:	add	r3, r2, r3
    18f0:	ldr	r3, [r3]
    18f4:	ldr	r2, [r3, #16]
    18f8:	ldr	r3, [fp, #-8]
    18fc:	str	r2, [r3, #28]
    1900:	ldr	r3, [fp, #-8]
    1904:	ldr	r2, [r3, #20]
    1908:	ldr	r3, [fp, #-8]
    190c:	ldr	r3, [r3, #12]
    1910:	lsl	r3, r3, #2
    1914:	add	r3, r2, r3
    1918:	ldr	r3, [r3]
    191c:	ldr	r2, [r3, #8]
    1920:	ldr	r3, [fp, #-8]
    1924:	str	r2, [r3, #36]	; 0x24
    1928:	ldr	r3, [fp, #-8]
    192c:	ldr	r2, [r3, #36]	; 0x24
    1930:	ldr	r3, [fp, #-8]
    1934:	str	r2, [r3, #80]	; 0x50
    1938:	ldr	r3, [fp, #-8]
    193c:	ldr	r2, [r3, #20]
    1940:	ldr	r3, [fp, #-8]
    1944:	ldr	r3, [r3, #12]
    1948:	lsl	r3, r3, #2
    194c:	add	r3, r2, r3
    1950:	ldr	r3, [r3]
    1954:	ldr	r2, [r3]
    1958:	ldr	r3, [fp, #-8]
    195c:	str	r2, [r3, #4]
    1960:	ldr	r3, [fp, #-8]
    1964:	ldr	r3, [r3, #36]	; 0x24
    1968:	ldrb	r2, [r3]
    196c:	ldr	r3, [fp, #-8]
    1970:	strb	r2, [r3, #24]
    1974:	nop			; (mov r0, r0)
    1978:	add	sp, fp, #0
    197c:	pop	{fp}		; (ldr fp, [sp], #4)
    1980:	bx	lr

00001984 <coda_expression__create_buffer>:
    1984:	push	{fp, lr}
    1988:	add	fp, sp, #4
    198c:	sub	sp, sp, #24
    1990:	str	r0, [fp, #-16]
    1994:	str	r1, [fp, #-20]	; 0xffffffec
    1998:	str	r2, [fp, #-24]	; 0xffffffe8
    199c:	ldr	r1, [fp, #-24]	; 0xffffffe8
    19a0:	mov	r0, #48	; 0x30
    19a4:	bl	2b44 <coda_expression_alloc>
    19a8:	str	r0, [fp, #-8]
    19ac:	ldr	r3, [fp, #-8]
    19b0:	cmp	r3, #0
    19b4:	bne	19c4 <coda_expression__create_buffer+0x40>
    19b8:	ldr	r1, [fp, #-24]	; 0xffffffe8
    19bc:	ldr	r0, [pc, #120]	; 1a3c <coda_expression__create_buffer+0xb8>
    19c0:	bl	2318 <yy_fatal_error>
    19c4:	ldr	r3, [fp, #-8]
    19c8:	ldr	r2, [fp, #-20]	; 0xffffffec
    19cc:	str	r2, [r3, #12]
    19d0:	ldr	r3, [fp, #-8]
    19d4:	ldr	r3, [r3, #12]
    19d8:	add	r3, r3, #2
    19dc:	ldr	r1, [fp, #-24]	; 0xffffffe8
    19e0:	mov	r0, r3
    19e4:	bl	2b44 <coda_expression_alloc>
    19e8:	mov	r2, r0
    19ec:	ldr	r3, [fp, #-8]
    19f0:	str	r2, [r3, #4]
    19f4:	ldr	r3, [fp, #-8]
    19f8:	ldr	r3, [r3, #4]
    19fc:	cmp	r3, #0
    1a00:	bne	1a10 <coda_expression__create_buffer+0x8c>
    1a04:	ldr	r1, [fp, #-24]	; 0xffffffe8
    1a08:	ldr	r0, [pc, #44]	; 1a3c <coda_expression__create_buffer+0xb8>
    1a0c:	bl	2318 <yy_fatal_error>
    1a10:	ldr	r3, [fp, #-8]
    1a14:	mov	r2, #1
    1a18:	str	r2, [r3, #20]
    1a1c:	ldr	r2, [fp, #-24]	; 0xffffffe8
    1a20:	ldr	r1, [fp, #-16]
    1a24:	ldr	r0, [fp, #-8]
    1a28:	bl	1b08 <coda_expression__init_buffer>
    1a2c:	ldr	r3, [fp, #-8]
    1a30:	mov	r0, r3
    1a34:	sub	sp, fp, #4
    1a38:	pop	{fp, pc}
    1a3c:	.word	0x00000e00

00001a40 <coda_expression__delete_buffer>:
    1a40:	push	{fp, lr}
    1a44:	add	fp, sp, #4
    1a48:	sub	sp, sp, #16
    1a4c:	str	r0, [fp, #-16]
    1a50:	str	r1, [fp, #-20]	; 0xffffffec
    1a54:	ldr	r3, [fp, #-20]	; 0xffffffec
    1a58:	str	r3, [fp, #-8]
    1a5c:	ldr	r3, [fp, #-16]
    1a60:	cmp	r3, #0
    1a64:	beq	1afc <coda_expression__delete_buffer+0xbc>
    1a68:	ldr	r3, [fp, #-8]
    1a6c:	ldr	r3, [r3, #20]
    1a70:	cmp	r3, #0
    1a74:	beq	1a98 <coda_expression__delete_buffer+0x58>
    1a78:	ldr	r3, [fp, #-8]
    1a7c:	ldr	r2, [r3, #20]
    1a80:	ldr	r3, [fp, #-8]
    1a84:	ldr	r3, [r3, #12]
    1a88:	lsl	r3, r3, #2
    1a8c:	add	r3, r2, r3
    1a90:	ldr	r3, [r3]
    1a94:	b	1a9c <coda_expression__delete_buffer+0x5c>
    1a98:	mov	r3, #0
    1a9c:	ldr	r2, [fp, #-16]
    1aa0:	cmp	r3, r2
    1aa4:	bne	1ac8 <coda_expression__delete_buffer+0x88>
    1aa8:	ldr	r3, [fp, #-8]
    1aac:	ldr	r2, [r3, #20]
    1ab0:	ldr	r3, [fp, #-8]
    1ab4:	ldr	r3, [r3, #12]
    1ab8:	lsl	r3, r3, #2
    1abc:	add	r3, r2, r3
    1ac0:	mov	r2, #0
    1ac4:	str	r2, [r3]
    1ac8:	ldr	r3, [fp, #-16]
    1acc:	ldr	r3, [r3, #20]
    1ad0:	cmp	r3, #0
    1ad4:	beq	1aec <coda_expression__delete_buffer+0xac>
    1ad8:	ldr	r3, [fp, #-16]
    1adc:	ldr	r3, [r3, #4]
    1ae0:	ldr	r1, [fp, #-20]	; 0xffffffec
    1ae4:	mov	r0, r3
    1ae8:	bl	2bb4 <coda_expression_free>
    1aec:	ldr	r1, [fp, #-20]	; 0xffffffec
    1af0:	ldr	r0, [fp, #-16]
    1af4:	bl	2bb4 <coda_expression_free>
    1af8:	b	1b00 <coda_expression__delete_buffer+0xc0>
    1afc:	nop			; (mov r0, r0)
    1b00:	sub	sp, fp, #4
    1b04:	pop	{fp, pc}

00001b08 <coda_expression__init_buffer>:
    1b08:	push	{fp, lr}
    1b0c:	add	fp, sp, #4
    1b10:	sub	sp, sp, #24
    1b14:	str	r0, [fp, #-16]
    1b18:	str	r1, [fp, #-20]	; 0xffffffec
    1b1c:	str	r2, [fp, #-24]	; 0xffffffe8
    1b20:	bl	0 <__errno_location>
    1b24:	mov	r3, r0
    1b28:	ldr	r3, [r3]
    1b2c:	str	r3, [fp, #-8]
    1b30:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1b34:	str	r3, [fp, #-12]
    1b38:	ldr	r1, [fp, #-24]	; 0xffffffe8
    1b3c:	ldr	r0, [fp, #-16]
    1b40:	bl	1bdc <coda_expression__flush_buffer>
    1b44:	ldr	r3, [fp, #-16]
    1b48:	ldr	r2, [fp, #-20]	; 0xffffffec
    1b4c:	str	r2, [r3]
    1b50:	ldr	r3, [fp, #-16]
    1b54:	mov	r2, #1
    1b58:	str	r2, [r3, #40]	; 0x28
    1b5c:	ldr	r3, [fp, #-12]
    1b60:	ldr	r3, [r3, #20]
    1b64:	cmp	r3, #0
    1b68:	beq	1b8c <coda_expression__init_buffer+0x84>
    1b6c:	ldr	r3, [fp, #-12]
    1b70:	ldr	r2, [r3, #20]
    1b74:	ldr	r3, [fp, #-12]
    1b78:	ldr	r3, [r3, #12]
    1b7c:	lsl	r3, r3, #2
    1b80:	add	r3, r2, r3
    1b84:	ldr	r3, [r3]
    1b88:	b	1b90 <coda_expression__init_buffer+0x88>
    1b8c:	mov	r3, #0
    1b90:	ldr	r2, [fp, #-16]
    1b94:	cmp	r3, r2
    1b98:	beq	1bb4 <coda_expression__init_buffer+0xac>
    1b9c:	ldr	r3, [fp, #-16]
    1ba0:	mov	r2, #1
    1ba4:	str	r2, [r3, #32]
    1ba8:	ldr	r3, [fp, #-16]
    1bac:	mov	r2, #0
    1bb0:	str	r2, [r3, #36]	; 0x24
    1bb4:	ldr	r3, [fp, #-16]
    1bb8:	mov	r2, #1
    1bbc:	str	r2, [r3, #24]
    1bc0:	bl	0 <__errno_location>
    1bc4:	mov	r2, r0
    1bc8:	ldr	r3, [fp, #-8]
    1bcc:	str	r3, [r2]
    1bd0:	nop			; (mov r0, r0)
    1bd4:	sub	sp, fp, #4
    1bd8:	pop	{fp, pc}

00001bdc <coda_expression__flush_buffer>:
    1bdc:	push	{fp, lr}
    1be0:	add	fp, sp, #4
    1be4:	sub	sp, sp, #16
    1be8:	str	r0, [fp, #-16]
    1bec:	str	r1, [fp, #-20]	; 0xffffffec
    1bf0:	ldr	r3, [fp, #-20]	; 0xffffffec
    1bf4:	str	r3, [fp, #-8]
    1bf8:	ldr	r3, [fp, #-16]
    1bfc:	cmp	r3, #0
    1c00:	beq	1ca8 <coda_expression__flush_buffer+0xcc>
    1c04:	ldr	r3, [fp, #-16]
    1c08:	mov	r2, #0
    1c0c:	str	r2, [r3, #16]
    1c10:	ldr	r3, [fp, #-16]
    1c14:	ldr	r3, [r3, #4]
    1c18:	mov	r2, #0
    1c1c:	strb	r2, [r3]
    1c20:	ldr	r3, [fp, #-16]
    1c24:	ldr	r3, [r3, #4]
    1c28:	add	r3, r3, #1
    1c2c:	mov	r2, #0
    1c30:	strb	r2, [r3]
    1c34:	ldr	r3, [fp, #-16]
    1c38:	ldr	r2, [r3, #4]
    1c3c:	ldr	r3, [fp, #-16]
    1c40:	str	r2, [r3, #8]
    1c44:	ldr	r3, [fp, #-16]
    1c48:	mov	r2, #1
    1c4c:	str	r2, [r3, #28]
    1c50:	ldr	r3, [fp, #-16]
    1c54:	mov	r2, #0
    1c58:	str	r2, [r3, #44]	; 0x2c
    1c5c:	ldr	r3, [fp, #-8]
    1c60:	ldr	r3, [r3, #20]
    1c64:	cmp	r3, #0
    1c68:	beq	1c8c <coda_expression__flush_buffer+0xb0>
    1c6c:	ldr	r3, [fp, #-8]
    1c70:	ldr	r2, [r3, #20]
    1c74:	ldr	r3, [fp, #-8]
    1c78:	ldr	r3, [r3, #12]
    1c7c:	lsl	r3, r3, #2
    1c80:	add	r3, r2, r3
    1c84:	ldr	r3, [r3]
    1c88:	b	1c90 <coda_expression__flush_buffer+0xb4>
    1c8c:	mov	r3, #0
    1c90:	ldr	r2, [fp, #-16]
    1c94:	cmp	r3, r2
    1c98:	bne	1cac <coda_expression__flush_buffer+0xd0>
    1c9c:	ldr	r0, [fp, #-20]	; 0xffffffec
    1ca0:	bl	18c0 <coda_expression__load_buffer_state>
    1ca4:	b	1cac <coda_expression__flush_buffer+0xd0>
    1ca8:	nop			; (mov r0, r0)
    1cac:	sub	sp, fp, #4
    1cb0:	pop	{fp, pc}

00001cb4 <coda_expression_push_buffer_state>:
    1cb4:	push	{fp, lr}
    1cb8:	add	fp, sp, #4
    1cbc:	sub	sp, sp, #16
    1cc0:	str	r0, [fp, #-16]
    1cc4:	str	r1, [fp, #-20]	; 0xffffffec
    1cc8:	ldr	r3, [fp, #-20]	; 0xffffffec
    1ccc:	str	r3, [fp, #-8]
    1cd0:	ldr	r3, [fp, #-16]
    1cd4:	cmp	r3, #0
    1cd8:	beq	1dfc <coda_expression_push_buffer_state+0x148>
    1cdc:	ldr	r0, [fp, #-20]	; 0xffffffec
    1ce0:	bl	1f30 <coda_expression_ensure_buffer_stack>
    1ce4:	ldr	r3, [fp, #-8]
    1ce8:	ldr	r3, [r3, #20]
    1cec:	cmp	r3, #0
    1cf0:	beq	1d7c <coda_expression_push_buffer_state+0xc8>
    1cf4:	ldr	r3, [fp, #-8]
    1cf8:	ldr	r2, [r3, #20]
    1cfc:	ldr	r3, [fp, #-8]
    1d00:	ldr	r3, [r3, #12]
    1d04:	lsl	r3, r3, #2
    1d08:	add	r3, r2, r3
    1d0c:	ldr	r3, [r3]
    1d10:	cmp	r3, #0
    1d14:	beq	1d7c <coda_expression_push_buffer_state+0xc8>
    1d18:	ldr	r3, [fp, #-8]
    1d1c:	ldr	r3, [r3, #36]	; 0x24
    1d20:	ldr	r2, [fp, #-8]
    1d24:	ldrb	r2, [r2, #24]
    1d28:	strb	r2, [r3]
    1d2c:	ldr	r3, [fp, #-8]
    1d30:	ldr	r2, [r3, #20]
    1d34:	ldr	r3, [fp, #-8]
    1d38:	ldr	r3, [r3, #12]
    1d3c:	lsl	r3, r3, #2
    1d40:	add	r3, r2, r3
    1d44:	ldr	r3, [r3]
    1d48:	ldr	r2, [fp, #-8]
    1d4c:	ldr	r2, [r2, #36]	; 0x24
    1d50:	str	r2, [r3, #8]
    1d54:	ldr	r3, [fp, #-8]
    1d58:	ldr	r2, [r3, #20]
    1d5c:	ldr	r3, [fp, #-8]
    1d60:	ldr	r3, [r3, #12]
    1d64:	lsl	r3, r3, #2
    1d68:	add	r3, r2, r3
    1d6c:	ldr	r3, [r3]
    1d70:	ldr	r2, [fp, #-8]
    1d74:	ldr	r2, [r2, #28]
    1d78:	str	r2, [r3, #16]
    1d7c:	ldr	r3, [fp, #-8]
    1d80:	ldr	r3, [r3, #20]
    1d84:	cmp	r3, #0
    1d88:	beq	1dc4 <coda_expression_push_buffer_state+0x110>
    1d8c:	ldr	r3, [fp, #-8]
    1d90:	ldr	r2, [r3, #20]
    1d94:	ldr	r3, [fp, #-8]
    1d98:	ldr	r3, [r3, #12]
    1d9c:	lsl	r3, r3, #2
    1da0:	add	r3, r2, r3
    1da4:	ldr	r3, [r3]
    1da8:	cmp	r3, #0
    1dac:	beq	1dc4 <coda_expression_push_buffer_state+0x110>
    1db0:	ldr	r3, [fp, #-8]
    1db4:	ldr	r3, [r3, #12]
    1db8:	add	r2, r3, #1
    1dbc:	ldr	r3, [fp, #-8]
    1dc0:	str	r2, [r3, #12]
    1dc4:	ldr	r3, [fp, #-8]
    1dc8:	ldr	r2, [r3, #20]
    1dcc:	ldr	r3, [fp, #-8]
    1dd0:	ldr	r3, [r3, #12]
    1dd4:	lsl	r3, r3, #2
    1dd8:	add	r3, r2, r3
    1ddc:	ldr	r2, [fp, #-16]
    1de0:	str	r2, [r3]
    1de4:	ldr	r0, [fp, #-20]	; 0xffffffec
    1de8:	bl	18c0 <coda_expression__load_buffer_state>
    1dec:	ldr	r3, [fp, #-8]
    1df0:	mov	r2, #1
    1df4:	str	r2, [r3, #48]	; 0x30
    1df8:	b	1e00 <coda_expression_push_buffer_state+0x14c>
    1dfc:	nop			; (mov r0, r0)
    1e00:	sub	sp, fp, #4
    1e04:	pop	{fp, pc}

00001e08 <coda_expression_pop_buffer_state>:
    1e08:	push	{fp, lr}
    1e0c:	add	fp, sp, #4
    1e10:	sub	sp, sp, #16
    1e14:	str	r0, [fp, #-16]
    1e18:	ldr	r3, [fp, #-16]
    1e1c:	str	r3, [fp, #-8]
    1e20:	ldr	r3, [fp, #-8]
    1e24:	ldr	r3, [r3, #20]
    1e28:	cmp	r3, #0
    1e2c:	beq	1f24 <coda_expression_pop_buffer_state+0x11c>
    1e30:	ldr	r3, [fp, #-8]
    1e34:	ldr	r2, [r3, #20]
    1e38:	ldr	r3, [fp, #-8]
    1e3c:	ldr	r3, [r3, #12]
    1e40:	lsl	r3, r3, #2
    1e44:	add	r3, r2, r3
    1e48:	ldr	r3, [r3]
    1e4c:	cmp	r3, #0
    1e50:	beq	1f24 <coda_expression_pop_buffer_state+0x11c>
    1e54:	ldr	r3, [fp, #-8]
    1e58:	ldr	r3, [r3, #20]
    1e5c:	cmp	r3, #0
    1e60:	beq	1e84 <coda_expression_pop_buffer_state+0x7c>
    1e64:	ldr	r3, [fp, #-8]
    1e68:	ldr	r2, [r3, #20]
    1e6c:	ldr	r3, [fp, #-8]
    1e70:	ldr	r3, [r3, #12]
    1e74:	lsl	r3, r3, #2
    1e78:	add	r3, r2, r3
    1e7c:	ldr	r3, [r3]
    1e80:	b	1e88 <coda_expression_pop_buffer_state+0x80>
    1e84:	mov	r3, #0
    1e88:	ldr	r1, [fp, #-16]
    1e8c:	mov	r0, r3
    1e90:	bl	1a40 <coda_expression__delete_buffer>
    1e94:	ldr	r3, [fp, #-8]
    1e98:	ldr	r2, [r3, #20]
    1e9c:	ldr	r3, [fp, #-8]
    1ea0:	ldr	r3, [r3, #12]
    1ea4:	lsl	r3, r3, #2
    1ea8:	add	r3, r2, r3
    1eac:	mov	r2, #0
    1eb0:	str	r2, [r3]
    1eb4:	ldr	r3, [fp, #-8]
    1eb8:	ldr	r3, [r3, #12]
    1ebc:	cmp	r3, #0
    1ec0:	beq	1ed8 <coda_expression_pop_buffer_state+0xd0>
    1ec4:	ldr	r3, [fp, #-8]
    1ec8:	ldr	r3, [r3, #12]
    1ecc:	sub	r2, r3, #1
    1ed0:	ldr	r3, [fp, #-8]
    1ed4:	str	r2, [r3, #12]
    1ed8:	ldr	r3, [fp, #-8]
    1edc:	ldr	r3, [r3, #20]
    1ee0:	cmp	r3, #0
    1ee4:	beq	1f28 <coda_expression_pop_buffer_state+0x120>
    1ee8:	ldr	r3, [fp, #-8]
    1eec:	ldr	r2, [r3, #20]
    1ef0:	ldr	r3, [fp, #-8]
    1ef4:	ldr	r3, [r3, #12]
    1ef8:	lsl	r3, r3, #2
    1efc:	add	r3, r2, r3
    1f00:	ldr	r3, [r3]
    1f04:	cmp	r3, #0
    1f08:	beq	1f28 <coda_expression_pop_buffer_state+0x120>
    1f0c:	ldr	r0, [fp, #-16]
    1f10:	bl	18c0 <coda_expression__load_buffer_state>
    1f14:	ldr	r3, [fp, #-8]
    1f18:	mov	r2, #1
    1f1c:	str	r2, [r3, #48]	; 0x30
    1f20:	b	1f28 <coda_expression_pop_buffer_state+0x120>
    1f24:	nop			; (mov r0, r0)
    1f28:	sub	sp, fp, #4
    1f2c:	pop	{fp, pc}

00001f30 <coda_expression_ensure_buffer_stack>:
    1f30:	push	{fp, lr}
    1f34:	add	fp, sp, #4
    1f38:	sub	sp, sp, #24
    1f3c:	str	r0, [fp, #-24]	; 0xffffffe8
    1f40:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1f44:	str	r3, [fp, #-8]
    1f48:	ldr	r3, [fp, #-8]
    1f4c:	ldr	r3, [r3, #20]
    1f50:	cmp	r3, #0
    1f54:	bne	1fd4 <coda_expression_ensure_buffer_stack+0xa4>
    1f58:	mov	r3, #1
    1f5c:	str	r3, [fp, #-12]
    1f60:	ldr	r3, [fp, #-12]
    1f64:	lsl	r3, r3, #2
    1f68:	ldr	r1, [fp, #-24]	; 0xffffffe8
    1f6c:	mov	r0, r3
    1f70:	bl	2b44 <coda_expression_alloc>
    1f74:	mov	r2, r0
    1f78:	ldr	r3, [fp, #-8]
    1f7c:	str	r2, [r3, #20]
    1f80:	ldr	r3, [fp, #-8]
    1f84:	ldr	r3, [r3, #20]
    1f88:	cmp	r3, #0
    1f8c:	bne	1f9c <coda_expression_ensure_buffer_stack+0x6c>
    1f90:	ldr	r1, [fp, #-24]	; 0xffffffe8
    1f94:	ldr	r0, [pc, #244]	; 2090 <coda_expression_ensure_buffer_stack+0x160>
    1f98:	bl	2318 <yy_fatal_error>
    1f9c:	ldr	r3, [fp, #-8]
    1fa0:	ldr	r0, [r3, #20]
    1fa4:	ldr	r3, [fp, #-12]
    1fa8:	lsl	r3, r3, #2
    1fac:	mov	r2, r3
    1fb0:	mov	r1, #0
    1fb4:	bl	0 <memset>
    1fb8:	ldr	r3, [fp, #-8]
    1fbc:	ldr	r2, [fp, #-12]
    1fc0:	str	r2, [r3, #16]
    1fc4:	ldr	r3, [fp, #-8]
    1fc8:	mov	r2, #0
    1fcc:	str	r2, [r3, #12]
    1fd0:	b	2088 <coda_expression_ensure_buffer_stack+0x158>
    1fd4:	ldr	r3, [fp, #-8]
    1fd8:	ldr	r2, [r3, #12]
    1fdc:	ldr	r3, [fp, #-8]
    1fe0:	ldr	r3, [r3, #16]
    1fe4:	sub	r3, r3, #1
    1fe8:	cmp	r2, r3
    1fec:	bcc	2088 <coda_expression_ensure_buffer_stack+0x158>
    1ff0:	mov	r3, #8
    1ff4:	str	r3, [fp, #-16]
    1ff8:	ldr	r3, [fp, #-8]
    1ffc:	ldr	r2, [r3, #16]
    2000:	ldr	r3, [fp, #-16]
    2004:	add	r3, r2, r3
    2008:	str	r3, [fp, #-12]
    200c:	ldr	r3, [fp, #-8]
    2010:	ldr	r0, [r3, #20]
    2014:	ldr	r3, [fp, #-12]
    2018:	lsl	r3, r3, #2
    201c:	ldr	r2, [fp, #-24]	; 0xffffffe8
    2020:	mov	r1, r3
    2024:	bl	2b78 <coda_expression_realloc>
    2028:	mov	r2, r0
    202c:	ldr	r3, [fp, #-8]
    2030:	str	r2, [r3, #20]
    2034:	ldr	r3, [fp, #-8]
    2038:	ldr	r3, [r3, #20]
    203c:	cmp	r3, #0
    2040:	bne	2050 <coda_expression_ensure_buffer_stack+0x120>
    2044:	ldr	r1, [fp, #-24]	; 0xffffffe8
    2048:	ldr	r0, [pc, #64]	; 2090 <coda_expression_ensure_buffer_stack+0x160>
    204c:	bl	2318 <yy_fatal_error>
    2050:	ldr	r3, [fp, #-8]
    2054:	ldr	r2, [r3, #20]
    2058:	ldr	r3, [fp, #-8]
    205c:	ldr	r3, [r3, #16]
    2060:	lsl	r3, r3, #2
    2064:	add	r0, r2, r3
    2068:	ldr	r3, [fp, #-16]
    206c:	lsl	r3, r3, #2
    2070:	mov	r2, r3
    2074:	mov	r1, #0
    2078:	bl	0 <memset>
    207c:	ldr	r3, [fp, #-8]
    2080:	ldr	r2, [fp, #-12]
    2084:	str	r2, [r3, #16]
    2088:	sub	sp, fp, #4
    208c:	pop	{fp, pc}
    2090:	.word	0x00000e2c

00002094 <coda_expression__scan_buffer>:
    2094:	push	{fp, lr}
    2098:	add	fp, sp, #4
    209c:	sub	sp, sp, #24
    20a0:	str	r0, [fp, #-16]
    20a4:	str	r1, [fp, #-20]	; 0xffffffec
    20a8:	str	r2, [fp, #-24]	; 0xffffffe8
    20ac:	ldr	r3, [fp, #-20]	; 0xffffffec
    20b0:	cmp	r3, #1
    20b4:	bls	20f0 <coda_expression__scan_buffer+0x5c>
    20b8:	ldr	r3, [fp, #-20]	; 0xffffffec
    20bc:	sub	r3, r3, #2
    20c0:	ldr	r2, [fp, #-16]
    20c4:	add	r3, r2, r3
    20c8:	ldrb	r3, [r3]
    20cc:	cmp	r3, #0
    20d0:	bne	20f0 <coda_expression__scan_buffer+0x5c>
    20d4:	ldr	r3, [fp, #-20]	; 0xffffffec
    20d8:	sub	r3, r3, #1
    20dc:	ldr	r2, [fp, #-16]
    20e0:	add	r3, r2, r3
    20e4:	ldrb	r3, [r3]
    20e8:	cmp	r3, #0
    20ec:	beq	20f8 <coda_expression__scan_buffer+0x64>
    20f0:	mov	r3, #0
    20f4:	b	21b8 <coda_expression__scan_buffer+0x124>
    20f8:	ldr	r1, [fp, #-24]	; 0xffffffe8
    20fc:	mov	r0, #48	; 0x30
    2100:	bl	2b44 <coda_expression_alloc>
    2104:	str	r0, [fp, #-8]
    2108:	ldr	r3, [fp, #-8]
    210c:	cmp	r3, #0
    2110:	bne	2120 <coda_expression__scan_buffer+0x8c>
    2114:	ldr	r1, [fp, #-24]	; 0xffffffe8
    2118:	ldr	r0, [pc, #164]	; 21c4 <coda_expression__scan_buffer+0x130>
    211c:	bl	2318 <yy_fatal_error>
    2120:	ldr	r3, [fp, #-20]	; 0xffffffec
    2124:	sub	r3, r3, #2
    2128:	mov	r2, r3
    212c:	ldr	r3, [fp, #-8]
    2130:	str	r2, [r3, #12]
    2134:	ldr	r3, [fp, #-8]
    2138:	ldr	r2, [fp, #-16]
    213c:	str	r2, [r3, #4]
    2140:	ldr	r3, [fp, #-8]
    2144:	ldr	r2, [r3, #4]
    2148:	ldr	r3, [fp, #-8]
    214c:	str	r2, [r3, #8]
    2150:	ldr	r3, [fp, #-8]
    2154:	mov	r2, #0
    2158:	str	r2, [r3, #20]
    215c:	ldr	r3, [fp, #-8]
    2160:	mov	r2, #0
    2164:	str	r2, [r3]
    2168:	ldr	r3, [fp, #-8]
    216c:	ldr	r2, [r3, #12]
    2170:	ldr	r3, [fp, #-8]
    2174:	str	r2, [r3, #16]
    2178:	ldr	r3, [fp, #-8]
    217c:	mov	r2, #0
    2180:	str	r2, [r3, #24]
    2184:	ldr	r3, [fp, #-8]
    2188:	mov	r2, #1
    218c:	str	r2, [r3, #28]
    2190:	ldr	r3, [fp, #-8]
    2194:	mov	r2, #0
    2198:	str	r2, [r3, #40]	; 0x28
    219c:	ldr	r3, [fp, #-8]
    21a0:	mov	r2, #0
    21a4:	str	r2, [r3, #44]	; 0x2c
    21a8:	ldr	r1, [fp, #-24]	; 0xffffffe8
    21ac:	ldr	r0, [fp, #-8]
    21b0:	bl	1780 <coda_expression__switch_to_buffer>
    21b4:	ldr	r3, [fp, #-8]
    21b8:	mov	r0, r3
    21bc:	sub	sp, fp, #4
    21c0:	pop	{fp, pc}
    21c4:	.word	0x00000e60

000021c8 <coda_expression__scan_string>:
    21c8:	push	{fp, lr}
    21cc:	add	fp, sp, #4
    21d0:	sub	sp, sp, #8
    21d4:	str	r0, [fp, #-8]
    21d8:	str	r1, [fp, #-12]
    21dc:	ldr	r0, [fp, #-8]
    21e0:	bl	0 <strlen>
    21e4:	mov	r3, r0
    21e8:	ldr	r2, [fp, #-12]
    21ec:	mov	r1, r3
    21f0:	ldr	r0, [fp, #-8]
    21f4:	bl	2208 <coda_expression__scan_bytes>
    21f8:	mov	r3, r0
    21fc:	mov	r0, r3
    2200:	sub	sp, fp, #4
    2204:	pop	{fp, pc}

00002208 <coda_expression__scan_bytes>:
    2208:	push	{fp, lr}
    220c:	add	fp, sp, #4
    2210:	sub	sp, sp, #32
    2214:	str	r0, [fp, #-24]	; 0xffffffe8
    2218:	str	r1, [fp, #-28]	; 0xffffffe4
    221c:	str	r2, [fp, #-32]	; 0xffffffe0
    2220:	ldr	r3, [fp, #-28]	; 0xffffffe4
    2224:	add	r3, r3, #2
    2228:	str	r3, [fp, #-12]
    222c:	ldr	r1, [fp, #-32]	; 0xffffffe0
    2230:	ldr	r0, [fp, #-12]
    2234:	bl	2b44 <coda_expression_alloc>
    2238:	str	r0, [fp, #-16]
    223c:	ldr	r3, [fp, #-16]
    2240:	cmp	r3, #0
    2244:	bne	2254 <coda_expression__scan_bytes+0x4c>
    2248:	ldr	r1, [fp, #-32]	; 0xffffffe0
    224c:	ldr	r0, [pc, #188]	; 2310 <coda_expression__scan_bytes+0x108>
    2250:	bl	2318 <yy_fatal_error>
    2254:	mov	r3, #0
    2258:	str	r3, [fp, #-8]
    225c:	b	228c <coda_expression__scan_bytes+0x84>
    2260:	ldr	r3, [fp, #-8]
    2264:	ldr	r2, [fp, #-16]
    2268:	add	r3, r2, r3
    226c:	ldr	r2, [fp, #-8]
    2270:	ldr	r1, [fp, #-24]	; 0xffffffe8
    2274:	add	r2, r1, r2
    2278:	ldrb	r2, [r2]
    227c:	strb	r2, [r3]
    2280:	ldr	r3, [fp, #-8]
    2284:	add	r3, r3, #1
    2288:	str	r3, [fp, #-8]
    228c:	ldr	r2, [fp, #-8]
    2290:	ldr	r3, [fp, #-28]	; 0xffffffe4
    2294:	cmp	r2, r3
    2298:	blt	2260 <coda_expression__scan_bytes+0x58>
    229c:	ldr	r3, [fp, #-28]	; 0xffffffe4
    22a0:	ldr	r2, [fp, #-16]
    22a4:	add	r2, r2, r3
    22a8:	ldr	r3, [fp, #-28]	; 0xffffffe4
    22ac:	add	r3, r3, #1
    22b0:	ldr	r1, [fp, #-16]
    22b4:	add	r3, r1, r3
    22b8:	mov	r1, #0
    22bc:	strb	r1, [r3]
    22c0:	ldrb	r3, [r3]
    22c4:	strb	r3, [r2]
    22c8:	ldr	r2, [fp, #-32]	; 0xffffffe0
    22cc:	ldr	r1, [fp, #-12]
    22d0:	ldr	r0, [fp, #-16]
    22d4:	bl	2094 <coda_expression__scan_buffer>
    22d8:	str	r0, [fp, #-20]	; 0xffffffec
    22dc:	ldr	r3, [fp, #-20]	; 0xffffffec
    22e0:	cmp	r3, #0
    22e4:	bne	22f4 <coda_expression__scan_bytes+0xec>
    22e8:	ldr	r1, [fp, #-32]	; 0xffffffe0
    22ec:	ldr	r0, [pc, #32]	; 2314 <coda_expression__scan_bytes+0x10c>
    22f0:	bl	2318 <yy_fatal_error>
    22f4:	ldr	r3, [fp, #-20]	; 0xffffffec
    22f8:	mov	r2, #1
    22fc:	str	r2, [r3, #20]
    2300:	ldr	r3, [fp, #-20]	; 0xffffffec
    2304:	mov	r0, r3
    2308:	sub	sp, fp, #4
    230c:	pop	{fp, pc}
    2310:	.word	0x00000e8c
    2314:	.word	0x00000eb8

00002318 <yy_fatal_error>:
    2318:	push	{fp, lr}
    231c:	add	fp, sp, #4
    2320:	sub	sp, sp, #16
    2324:	str	r0, [fp, #-16]
    2328:	str	r1, [fp, #-20]	; 0xffffffec
    232c:	ldr	r3, [fp, #-20]	; 0xffffffec
    2330:	str	r3, [fp, #-8]
    2334:	ldr	r3, [pc, #24]	; 2354 <yy_fatal_error+0x3c>
    2338:	ldr	r3, [r3]
    233c:	ldr	r2, [fp, #-16]
    2340:	ldr	r1, [pc, #16]	; 2358 <yy_fatal_error+0x40>
    2344:	mov	r0, r3
    2348:	bl	0 <fprintf>
    234c:	mov	r0, #2
    2350:	bl	0 <exit>
    2354:	.word	0x00000000
    2358:	.word	0x00000ed8

0000235c <coda_expression_get_extra>:
    235c:	push	{fp}		; (str fp, [sp, #-4]!)
    2360:	add	fp, sp, #0
    2364:	sub	sp, sp, #20
    2368:	str	r0, [fp, #-16]
    236c:	ldr	r3, [fp, #-16]
    2370:	str	r3, [fp, #-8]
    2374:	ldr	r3, [fp, #-8]
    2378:	ldr	r3, [r3]
    237c:	mov	r0, r3
    2380:	add	sp, fp, #0
    2384:	pop	{fp}		; (ldr fp, [sp], #4)
    2388:	bx	lr

0000238c <coda_expression_get_lineno>:
    238c:	push	{fp}		; (str fp, [sp, #-4]!)
    2390:	add	fp, sp, #0
    2394:	sub	sp, sp, #20
    2398:	str	r0, [fp, #-16]
    239c:	ldr	r3, [fp, #-16]
    23a0:	str	r3, [fp, #-8]
    23a4:	ldr	r3, [fp, #-8]
    23a8:	ldr	r3, [r3, #20]
    23ac:	cmp	r3, #0
    23b0:	beq	23d8 <coda_expression_get_lineno+0x4c>
    23b4:	ldr	r3, [fp, #-8]
    23b8:	ldr	r2, [r3, #20]
    23bc:	ldr	r3, [fp, #-8]
    23c0:	ldr	r3, [r3, #12]
    23c4:	lsl	r3, r3, #2
    23c8:	add	r3, r2, r3
    23cc:	ldr	r3, [r3]
    23d0:	cmp	r3, #0
    23d4:	bne	23e0 <coda_expression_get_lineno+0x54>
    23d8:	mov	r3, #0
    23dc:	b	2400 <coda_expression_get_lineno+0x74>
    23e0:	ldr	r3, [fp, #-8]
    23e4:	ldr	r2, [r3, #20]
    23e8:	ldr	r3, [fp, #-8]
    23ec:	ldr	r3, [r3, #12]
    23f0:	lsl	r3, r3, #2
    23f4:	add	r3, r2, r3
    23f8:	ldr	r3, [r3]
    23fc:	ldr	r3, [r3, #32]
    2400:	mov	r0, r3
    2404:	add	sp, fp, #0
    2408:	pop	{fp}		; (ldr fp, [sp], #4)
    240c:	bx	lr

00002410 <coda_expression_get_column>:
    2410:	push	{fp}		; (str fp, [sp, #-4]!)
    2414:	add	fp, sp, #0
    2418:	sub	sp, sp, #20
    241c:	str	r0, [fp, #-16]
    2420:	ldr	r3, [fp, #-16]
    2424:	str	r3, [fp, #-8]
    2428:	ldr	r3, [fp, #-8]
    242c:	ldr	r3, [r3, #20]
    2430:	cmp	r3, #0
    2434:	beq	245c <coda_expression_get_column+0x4c>
    2438:	ldr	r3, [fp, #-8]
    243c:	ldr	r2, [r3, #20]
    2440:	ldr	r3, [fp, #-8]
    2444:	ldr	r3, [r3, #12]
    2448:	lsl	r3, r3, #2
    244c:	add	r3, r2, r3
    2450:	ldr	r3, [r3]
    2454:	cmp	r3, #0
    2458:	bne	2464 <coda_expression_get_column+0x54>
    245c:	mov	r3, #0
    2460:	b	2484 <coda_expression_get_column+0x74>
    2464:	ldr	r3, [fp, #-8]
    2468:	ldr	r2, [r3, #20]
    246c:	ldr	r3, [fp, #-8]
    2470:	ldr	r3, [r3, #12]
    2474:	lsl	r3, r3, #2
    2478:	add	r3, r2, r3
    247c:	ldr	r3, [r3]
    2480:	ldr	r3, [r3, #36]	; 0x24
    2484:	mov	r0, r3
    2488:	add	sp, fp, #0
    248c:	pop	{fp}		; (ldr fp, [sp], #4)
    2490:	bx	lr

00002494 <coda_expression_get_in>:
    2494:	push	{fp}		; (str fp, [sp, #-4]!)
    2498:	add	fp, sp, #0
    249c:	sub	sp, sp, #20
    24a0:	str	r0, [fp, #-16]
    24a4:	ldr	r3, [fp, #-16]
    24a8:	str	r3, [fp, #-8]
    24ac:	ldr	r3, [fp, #-8]
    24b0:	ldr	r3, [r3, #4]
    24b4:	mov	r0, r3
    24b8:	add	sp, fp, #0
    24bc:	pop	{fp}		; (ldr fp, [sp], #4)
    24c0:	bx	lr

000024c4 <coda_expression_get_out>:
    24c4:	push	{fp}		; (str fp, [sp, #-4]!)
    24c8:	add	fp, sp, #0
    24cc:	sub	sp, sp, #20
    24d0:	str	r0, [fp, #-16]
    24d4:	ldr	r3, [fp, #-16]
    24d8:	str	r3, [fp, #-8]
    24dc:	ldr	r3, [fp, #-8]
    24e0:	ldr	r3, [r3, #8]
    24e4:	mov	r0, r3
    24e8:	add	sp, fp, #0
    24ec:	pop	{fp}		; (ldr fp, [sp], #4)
    24f0:	bx	lr

000024f4 <coda_expression_get_leng>:
    24f4:	push	{fp}		; (str fp, [sp, #-4]!)
    24f8:	add	fp, sp, #0
    24fc:	sub	sp, sp, #20
    2500:	str	r0, [fp, #-16]
    2504:	ldr	r3, [fp, #-16]
    2508:	str	r3, [fp, #-8]
    250c:	ldr	r3, [fp, #-8]
    2510:	ldr	r3, [r3, #32]
    2514:	mov	r0, r3
    2518:	add	sp, fp, #0
    251c:	pop	{fp}		; (ldr fp, [sp], #4)
    2520:	bx	lr

00002524 <coda_expression_get_text>:
    2524:	push	{fp}		; (str fp, [sp, #-4]!)
    2528:	add	fp, sp, #0
    252c:	sub	sp, sp, #20
    2530:	str	r0, [fp, #-16]
    2534:	ldr	r3, [fp, #-16]
    2538:	str	r3, [fp, #-8]
    253c:	ldr	r3, [fp, #-8]
    2540:	ldr	r3, [r3, #80]	; 0x50
    2544:	mov	r0, r3
    2548:	add	sp, fp, #0
    254c:	pop	{fp}		; (ldr fp, [sp], #4)
    2550:	bx	lr

00002554 <coda_expression_set_extra>:
    2554:	push	{fp}		; (str fp, [sp, #-4]!)
    2558:	add	fp, sp, #0
    255c:	sub	sp, sp, #20
    2560:	str	r0, [fp, #-16]
    2564:	str	r1, [fp, #-20]	; 0xffffffec
    2568:	ldr	r3, [fp, #-20]	; 0xffffffec
    256c:	str	r3, [fp, #-8]
    2570:	ldr	r3, [fp, #-8]
    2574:	ldr	r2, [fp, #-16]
    2578:	str	r2, [r3]
    257c:	nop			; (mov r0, r0)
    2580:	add	sp, fp, #0
    2584:	pop	{fp}		; (ldr fp, [sp], #4)
    2588:	bx	lr

0000258c <coda_expression_set_lineno>:
    258c:	push	{fp, lr}
    2590:	add	fp, sp, #4
    2594:	sub	sp, sp, #16
    2598:	str	r0, [fp, #-16]
    259c:	str	r1, [fp, #-20]	; 0xffffffec
    25a0:	ldr	r3, [fp, #-20]	; 0xffffffec
    25a4:	str	r3, [fp, #-8]
    25a8:	ldr	r3, [fp, #-8]
    25ac:	ldr	r3, [r3, #20]
    25b0:	cmp	r3, #0
    25b4:	beq	25dc <coda_expression_set_lineno+0x50>
    25b8:	ldr	r3, [fp, #-8]
    25bc:	ldr	r2, [r3, #20]
    25c0:	ldr	r3, [fp, #-8]
    25c4:	ldr	r3, [r3, #12]
    25c8:	lsl	r3, r3, #2
    25cc:	add	r3, r2, r3
    25d0:	ldr	r3, [r3]
    25d4:	cmp	r3, #0
    25d8:	bne	25e8 <coda_expression_set_lineno+0x5c>
    25dc:	ldr	r1, [fp, #-20]	; 0xffffffec
    25e0:	ldr	r0, [pc, #48]	; 2618 <coda_expression_set_lineno+0x8c>
    25e4:	bl	2318 <yy_fatal_error>
    25e8:	ldr	r3, [fp, #-8]
    25ec:	ldr	r2, [r3, #20]
    25f0:	ldr	r3, [fp, #-8]
    25f4:	ldr	r3, [r3, #12]
    25f8:	lsl	r3, r3, #2
    25fc:	add	r3, r2, r3
    2600:	ldr	r3, [r3]
    2604:	ldr	r2, [fp, #-16]
    2608:	str	r2, [r3, #32]
    260c:	nop			; (mov r0, r0)
    2610:	sub	sp, fp, #4
    2614:	pop	{fp, pc}
    2618:	.word	0x00000edc

0000261c <coda_expression_set_column>:
    261c:	push	{fp, lr}
    2620:	add	fp, sp, #4
    2624:	sub	sp, sp, #16
    2628:	str	r0, [fp, #-16]
    262c:	str	r1, [fp, #-20]	; 0xffffffec
    2630:	ldr	r3, [fp, #-20]	; 0xffffffec
    2634:	str	r3, [fp, #-8]
    2638:	ldr	r3, [fp, #-8]
    263c:	ldr	r3, [r3, #20]
    2640:	cmp	r3, #0
    2644:	beq	266c <coda_expression_set_column+0x50>
    2648:	ldr	r3, [fp, #-8]
    264c:	ldr	r2, [r3, #20]
    2650:	ldr	r3, [fp, #-8]
    2654:	ldr	r3, [r3, #12]
    2658:	lsl	r3, r3, #2
    265c:	add	r3, r2, r3
    2660:	ldr	r3, [r3]
    2664:	cmp	r3, #0
    2668:	bne	2678 <coda_expression_set_column+0x5c>
    266c:	ldr	r1, [fp, #-20]	; 0xffffffec
    2670:	ldr	r0, [pc, #48]	; 26a8 <coda_expression_set_column+0x8c>
    2674:	bl	2318 <yy_fatal_error>
    2678:	ldr	r3, [fp, #-8]
    267c:	ldr	r2, [r3, #20]
    2680:	ldr	r3, [fp, #-8]
    2684:	ldr	r3, [r3, #12]
    2688:	lsl	r3, r3, #2
    268c:	add	r3, r2, r3
    2690:	ldr	r3, [r3]
    2694:	ldr	r2, [fp, #-16]
    2698:	str	r2, [r3, #36]	; 0x24
    269c:	nop			; (mov r0, r0)
    26a0:	sub	sp, fp, #4
    26a4:	pop	{fp, pc}
    26a8:	.word	0x00000f00

000026ac <coda_expression_set_in>:
    26ac:	push	{fp}		; (str fp, [sp, #-4]!)
    26b0:	add	fp, sp, #0
    26b4:	sub	sp, sp, #20
    26b8:	str	r0, [fp, #-16]
    26bc:	str	r1, [fp, #-20]	; 0xffffffec
    26c0:	ldr	r3, [fp, #-20]	; 0xffffffec
    26c4:	str	r3, [fp, #-8]
    26c8:	ldr	r3, [fp, #-8]
    26cc:	ldr	r2, [fp, #-16]
    26d0:	str	r2, [r3, #4]
    26d4:	nop			; (mov r0, r0)
    26d8:	add	sp, fp, #0
    26dc:	pop	{fp}		; (ldr fp, [sp], #4)
    26e0:	bx	lr

000026e4 <coda_expression_set_out>:
    26e4:	push	{fp}		; (str fp, [sp, #-4]!)
    26e8:	add	fp, sp, #0
    26ec:	sub	sp, sp, #20
    26f0:	str	r0, [fp, #-16]
    26f4:	str	r1, [fp, #-20]	; 0xffffffec
    26f8:	ldr	r3, [fp, #-20]	; 0xffffffec
    26fc:	str	r3, [fp, #-8]
    2700:	ldr	r3, [fp, #-8]
    2704:	ldr	r2, [fp, #-16]
    2708:	str	r2, [r3, #8]
    270c:	nop			; (mov r0, r0)
    2710:	add	sp, fp, #0
    2714:	pop	{fp}		; (ldr fp, [sp], #4)
    2718:	bx	lr

0000271c <coda_expression_get_debug>:
    271c:	push	{fp}		; (str fp, [sp, #-4]!)
    2720:	add	fp, sp, #0
    2724:	sub	sp, sp, #20
    2728:	str	r0, [fp, #-16]
    272c:	ldr	r3, [fp, #-16]
    2730:	str	r3, [fp, #-8]
    2734:	ldr	r3, [fp, #-8]
    2738:	ldr	r3, [r3, #76]	; 0x4c
    273c:	mov	r0, r3
    2740:	add	sp, fp, #0
    2744:	pop	{fp}		; (ldr fp, [sp], #4)
    2748:	bx	lr

0000274c <coda_expression_set_debug>:
    274c:	push	{fp}		; (str fp, [sp, #-4]!)
    2750:	add	fp, sp, #0
    2754:	sub	sp, sp, #20
    2758:	str	r0, [fp, #-16]
    275c:	str	r1, [fp, #-20]	; 0xffffffec
    2760:	ldr	r3, [fp, #-20]	; 0xffffffec
    2764:	str	r3, [fp, #-8]
    2768:	ldr	r3, [fp, #-8]
    276c:	ldr	r2, [fp, #-16]
    2770:	str	r2, [r3, #76]	; 0x4c
    2774:	nop			; (mov r0, r0)
    2778:	add	sp, fp, #0
    277c:	pop	{fp}		; (ldr fp, [sp], #4)
    2780:	bx	lr

00002784 <coda_expression_get_lval>:
    2784:	push	{fp}		; (str fp, [sp, #-4]!)
    2788:	add	fp, sp, #0
    278c:	sub	sp, sp, #20
    2790:	str	r0, [fp, #-16]
    2794:	ldr	r3, [fp, #-16]
    2798:	str	r3, [fp, #-8]
    279c:	ldr	r3, [fp, #-8]
    27a0:	ldr	r3, [r3, #92]	; 0x5c
    27a4:	mov	r0, r3
    27a8:	add	sp, fp, #0
    27ac:	pop	{fp}		; (ldr fp, [sp], #4)
    27b0:	bx	lr

000027b4 <coda_expression_set_lval>:
    27b4:	push	{fp}		; (str fp, [sp, #-4]!)
    27b8:	add	fp, sp, #0
    27bc:	sub	sp, sp, #20
    27c0:	str	r0, [fp, #-16]
    27c4:	str	r1, [fp, #-20]	; 0xffffffec
    27c8:	ldr	r3, [fp, #-20]	; 0xffffffec
    27cc:	str	r3, [fp, #-8]
    27d0:	ldr	r3, [fp, #-8]
    27d4:	ldr	r2, [fp, #-16]
    27d8:	str	r2, [r3, #92]	; 0x5c
    27dc:	nop			; (mov r0, r0)
    27e0:	add	sp, fp, #0
    27e4:	pop	{fp}		; (ldr fp, [sp], #4)
    27e8:	bx	lr

000027ec <coda_expression_lex_init>:
    27ec:	push	{fp, lr}
    27f0:	add	fp, sp, #4
    27f4:	sub	sp, sp, #8
    27f8:	str	r0, [fp, #-8]
    27fc:	ldr	r3, [fp, #-8]
    2800:	cmp	r3, #0
    2804:	bne	2820 <coda_expression_lex_init+0x34>
    2808:	bl	0 <__errno_location>
    280c:	mov	r2, r0
    2810:	mov	r3, #22
    2814:	str	r3, [r2]
    2818:	mov	r3, #1
    281c:	b	288c <coda_expression_lex_init+0xa0>
    2820:	mov	r1, #0
    2824:	mov	r0, #96	; 0x60
    2828:	bl	2b44 <coda_expression_alloc>
    282c:	mov	r2, r0
    2830:	ldr	r3, [fp, #-8]
    2834:	str	r2, [r3]
    2838:	ldr	r3, [fp, #-8]
    283c:	ldr	r3, [r3]
    2840:	cmp	r3, #0
    2844:	bne	2860 <coda_expression_lex_init+0x74>
    2848:	bl	0 <__errno_location>
    284c:	mov	r2, r0
    2850:	mov	r3, #12
    2854:	str	r3, [r2]
    2858:	mov	r3, #1
    285c:	b	288c <coda_expression_lex_init+0xa0>
    2860:	ldr	r3, [fp, #-8]
    2864:	ldr	r3, [r3]
    2868:	mov	r2, #96	; 0x60
    286c:	mov	r1, #0
    2870:	mov	r0, r3
    2874:	bl	0 <memset>
    2878:	ldr	r3, [fp, #-8]
    287c:	ldr	r3, [r3]
    2880:	mov	r0, r3
    2884:	bl	2970 <yy_init_globals>
    2888:	mov	r3, r0
    288c:	mov	r0, r3
    2890:	sub	sp, fp, #4
    2894:	pop	{fp, pc}

00002898 <coda_expression_lex_init_extra>:
    2898:	push	{fp, lr}
    289c:	add	fp, sp, #4
    28a0:	sub	sp, sp, #104	; 0x68
    28a4:	str	r0, [fp, #-104]	; 0xffffff98
    28a8:	str	r1, [fp, #-108]	; 0xffffff94
    28ac:	sub	r3, fp, #100	; 0x64
    28b0:	mov	r1, r3
    28b4:	ldr	r0, [fp, #-104]	; 0xffffff98
    28b8:	bl	2554 <coda_expression_set_extra>
    28bc:	ldr	r3, [fp, #-108]	; 0xffffff94
    28c0:	cmp	r3, #0
    28c4:	bne	28e0 <coda_expression_lex_init_extra+0x48>
    28c8:	bl	0 <__errno_location>
    28cc:	mov	r2, r0
    28d0:	mov	r3, #22
    28d4:	str	r3, [r2]
    28d8:	mov	r3, #1
    28dc:	b	2964 <coda_expression_lex_init_extra+0xcc>
    28e0:	sub	r3, fp, #100	; 0x64
    28e4:	mov	r1, r3
    28e8:	mov	r0, #96	; 0x60
    28ec:	bl	2b44 <coda_expression_alloc>
    28f0:	mov	r2, r0
    28f4:	ldr	r3, [fp, #-108]	; 0xffffff94
    28f8:	str	r2, [r3]
    28fc:	ldr	r3, [fp, #-108]	; 0xffffff94
    2900:	ldr	r3, [r3]
    2904:	cmp	r3, #0
    2908:	bne	2924 <coda_expression_lex_init_extra+0x8c>
    290c:	bl	0 <__errno_location>
    2910:	mov	r2, r0
    2914:	mov	r3, #12
    2918:	str	r3, [r2]
    291c:	mov	r3, #1
    2920:	b	2964 <coda_expression_lex_init_extra+0xcc>
    2924:	ldr	r3, [fp, #-108]	; 0xffffff94
    2928:	ldr	r3, [r3]
    292c:	mov	r2, #96	; 0x60
    2930:	mov	r1, #0
    2934:	mov	r0, r3
    2938:	bl	0 <memset>
    293c:	ldr	r3, [fp, #-108]	; 0xffffff94
    2940:	ldr	r3, [r3]
    2944:	mov	r1, r3
    2948:	ldr	r0, [fp, #-104]	; 0xffffff98
    294c:	bl	2554 <coda_expression_set_extra>
    2950:	ldr	r3, [fp, #-108]	; 0xffffff94
    2954:	ldr	r3, [r3]
    2958:	mov	r0, r3
    295c:	bl	2970 <yy_init_globals>
    2960:	mov	r3, r0
    2964:	mov	r0, r3
    2968:	sub	sp, fp, #4
    296c:	pop	{fp, pc}

00002970 <yy_init_globals>:
    2970:	push	{fp}		; (str fp, [sp, #-4]!)
    2974:	add	fp, sp, #0
    2978:	sub	sp, sp, #20
    297c:	str	r0, [fp, #-16]
    2980:	ldr	r3, [fp, #-16]
    2984:	str	r3, [fp, #-8]
    2988:	ldr	r3, [fp, #-8]
    298c:	mov	r2, #0
    2990:	str	r2, [r3, #20]
    2994:	ldr	r3, [fp, #-8]
    2998:	mov	r2, #0
    299c:	str	r2, [r3, #12]
    29a0:	ldr	r3, [fp, #-8]
    29a4:	mov	r2, #0
    29a8:	str	r2, [r3, #16]
    29ac:	ldr	r3, [fp, #-8]
    29b0:	mov	r2, #0
    29b4:	str	r2, [r3, #36]	; 0x24
    29b8:	ldr	r3, [fp, #-8]
    29bc:	mov	r2, #0
    29c0:	str	r2, [r3, #40]	; 0x28
    29c4:	ldr	r3, [fp, #-8]
    29c8:	mov	r2, #0
    29cc:	str	r2, [r3, #44]	; 0x2c
    29d0:	ldr	r3, [fp, #-8]
    29d4:	mov	r2, #0
    29d8:	str	r2, [r3, #52]	; 0x34
    29dc:	ldr	r3, [fp, #-8]
    29e0:	mov	r2, #0
    29e4:	str	r2, [r3, #56]	; 0x38
    29e8:	ldr	r3, [fp, #-8]
    29ec:	mov	r2, #0
    29f0:	str	r2, [r3, #60]	; 0x3c
    29f4:	ldr	r3, [fp, #-8]
    29f8:	mov	r2, #0
    29fc:	str	r2, [r3, #4]
    2a00:	ldr	r3, [fp, #-8]
    2a04:	mov	r2, #0
    2a08:	str	r2, [r3, #8]
    2a0c:	mov	r3, #0
    2a10:	mov	r0, r3
    2a14:	add	sp, fp, #0
    2a18:	pop	{fp}		; (ldr fp, [sp], #4)
    2a1c:	bx	lr

00002a20 <coda_expression_lex_destroy>:
    2a20:	push	{fp, lr}
    2a24:	add	fp, sp, #4
    2a28:	sub	sp, sp, #16
    2a2c:	str	r0, [fp, #-16]
    2a30:	ldr	r3, [fp, #-16]
    2a34:	str	r3, [fp, #-8]
    2a38:	b	2aa4 <coda_expression_lex_destroy+0x84>
    2a3c:	ldr	r3, [fp, #-8]
    2a40:	ldr	r3, [r3, #20]
    2a44:	cmp	r3, #0
    2a48:	beq	2a6c <coda_expression_lex_destroy+0x4c>
    2a4c:	ldr	r3, [fp, #-8]
    2a50:	ldr	r2, [r3, #20]
    2a54:	ldr	r3, [fp, #-8]
    2a58:	ldr	r3, [r3, #12]
    2a5c:	lsl	r3, r3, #2
    2a60:	add	r3, r2, r3
    2a64:	ldr	r3, [r3]
    2a68:	b	2a70 <coda_expression_lex_destroy+0x50>
    2a6c:	mov	r3, #0
    2a70:	ldr	r1, [fp, #-16]
    2a74:	mov	r0, r3
    2a78:	bl	1a40 <coda_expression__delete_buffer>
    2a7c:	ldr	r3, [fp, #-8]
    2a80:	ldr	r2, [r3, #20]
    2a84:	ldr	r3, [fp, #-8]
    2a88:	ldr	r3, [r3, #12]
    2a8c:	lsl	r3, r3, #2
    2a90:	add	r3, r2, r3
    2a94:	mov	r2, #0
    2a98:	str	r2, [r3]
    2a9c:	ldr	r0, [fp, #-16]
    2aa0:	bl	1e08 <coda_expression_pop_buffer_state>
    2aa4:	ldr	r3, [fp, #-8]
    2aa8:	ldr	r3, [r3, #20]
    2aac:	cmp	r3, #0
    2ab0:	beq	2ad8 <coda_expression_lex_destroy+0xb8>
    2ab4:	ldr	r3, [fp, #-8]
    2ab8:	ldr	r2, [r3, #20]
    2abc:	ldr	r3, [fp, #-8]
    2ac0:	ldr	r3, [r3, #12]
    2ac4:	lsl	r3, r3, #2
    2ac8:	add	r3, r2, r3
    2acc:	ldr	r3, [r3]
    2ad0:	cmp	r3, #0
    2ad4:	bne	2a3c <coda_expression_lex_destroy+0x1c>
    2ad8:	ldr	r3, [fp, #-8]
    2adc:	ldr	r3, [r3, #20]
    2ae0:	ldr	r1, [fp, #-16]
    2ae4:	mov	r0, r3
    2ae8:	bl	2bb4 <coda_expression_free>
    2aec:	ldr	r3, [fp, #-8]
    2af0:	mov	r2, #0
    2af4:	str	r2, [r3, #20]
    2af8:	ldr	r3, [fp, #-8]
    2afc:	ldr	r3, [r3, #60]	; 0x3c
    2b00:	ldr	r1, [fp, #-16]
    2b04:	mov	r0, r3
    2b08:	bl	2bb4 <coda_expression_free>
    2b0c:	ldr	r3, [fp, #-8]
    2b10:	mov	r2, #0
    2b14:	str	r2, [r3, #60]	; 0x3c
    2b18:	ldr	r0, [fp, #-16]
    2b1c:	bl	2970 <yy_init_globals>
    2b20:	ldr	r1, [fp, #-16]
    2b24:	ldr	r0, [fp, #-16]
    2b28:	bl	2bb4 <coda_expression_free>
    2b2c:	mov	r3, #0
    2b30:	str	r3, [fp, #-16]
    2b34:	mov	r3, #0
    2b38:	mov	r0, r3
    2b3c:	sub	sp, fp, #4
    2b40:	pop	{fp, pc}

00002b44 <coda_expression_alloc>:
    2b44:	push	{fp, lr}
    2b48:	add	fp, sp, #4
    2b4c:	sub	sp, sp, #16
    2b50:	str	r0, [fp, #-16]
    2b54:	str	r1, [fp, #-20]	; 0xffffffec
    2b58:	ldr	r3, [fp, #-20]	; 0xffffffec
    2b5c:	str	r3, [fp, #-8]
    2b60:	ldr	r0, [fp, #-16]
    2b64:	bl	0 <malloc>
    2b68:	mov	r3, r0
    2b6c:	mov	r0, r3
    2b70:	sub	sp, fp, #4
    2b74:	pop	{fp, pc}

00002b78 <coda_expression_realloc>:
    2b78:	push	{fp, lr}
    2b7c:	add	fp, sp, #4
    2b80:	sub	sp, sp, #24
    2b84:	str	r0, [fp, #-16]
    2b88:	str	r1, [fp, #-20]	; 0xffffffec
    2b8c:	str	r2, [fp, #-24]	; 0xffffffe8
    2b90:	ldr	r3, [fp, #-24]	; 0xffffffe8
    2b94:	str	r3, [fp, #-8]
    2b98:	ldr	r1, [fp, #-20]	; 0xffffffec
    2b9c:	ldr	r0, [fp, #-16]
    2ba0:	bl	0 <realloc>
    2ba4:	mov	r3, r0
    2ba8:	mov	r0, r3
    2bac:	sub	sp, fp, #4
    2bb0:	pop	{fp, pc}

00002bb4 <coda_expression_free>:
    2bb4:	push	{fp, lr}
    2bb8:	add	fp, sp, #4
    2bbc:	sub	sp, sp, #16
    2bc0:	str	r0, [fp, #-16]
    2bc4:	str	r1, [fp, #-20]	; 0xffffffec
    2bc8:	ldr	r3, [fp, #-20]	; 0xffffffec
    2bcc:	str	r3, [fp, #-8]
    2bd0:	ldr	r0, [fp, #-16]
    2bd4:	bl	0 <free>
    2bd8:	nop			; (mov r0, r0)
    2bdc:	sub	sp, fp, #4
    2be0:	pop	{fp, pc}
