
../compcert-repos/stcorp-coda-3a25f25/CMakeFiles/coda_static.dir/libcoda/coda-bin.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <coda_bin_product_open>:
   0:	str	r4, [sp, #-12]!
   4:	str	fp, [sp, #4]
   8:	str	lr, [sp, #8]
   c:	add	fp, sp, #8
  10:	sub	sp, sp, #28
  14:	str	r0, [fp, #-24]	; 0xffffffe8
  18:	ldr	r3, [fp, #-24]	; 0xffffffe8
  1c:	mov	r2, #0
  20:	str	r2, [r3, #52]	; 0x34
  24:	ldr	r3, [fp, #-24]	; 0xffffffe8
  28:	mvn	r2, #0
  2c:	str	r2, [r3, #56]	; 0x38
  30:	ldr	r3, [pc, #468]	; 20c <coda_bin_product_open+0x20c>
  34:	ldr	r3, [pc, r3]
  38:	mrc	15, 0, r2, cr13, cr0, {3}
  3c:	ldr	r3, [r2, r3]
  40:	cmp	r3, #0
  44:	beq	17c <coda_bin_product_open+0x17c>
  48:	ldr	r3, [fp, #-24]	; 0xffffffe8
  4c:	ldrd	r2, [r3, #8]
  50:	cmp	r2, #1
  54:	sbcs	r3, r3, #0
  58:	blt	17c <coda_bin_product_open+0x17c>
  5c:	ldr	r3, [fp, #-24]	; 0xffffffe8
  60:	mov	r2, #1
  64:	str	r2, [r3, #52]	; 0x34
  68:	ldr	r3, [fp, #-24]	; 0xffffffe8
  6c:	ldr	r3, [r3]
  70:	mov	r1, #0
  74:	mov	r0, r3
  78:	bl	0 <open>
  7c:	str	r0, [fp, #-16]
  80:	ldr	r3, [fp, #-16]
  84:	cmp	r3, #0
  88:	bge	c8 <coda_bin_product_open+0xc8>
  8c:	ldr	r3, [fp, #-24]	; 0xffffffe8
  90:	ldr	r4, [r3]
  94:	bl	0 <__errno_location>
  98:	mov	r3, r0
  9c:	ldr	r3, [r3]
  a0:	mov	r0, r3
  a4:	bl	0 <strerror>
  a8:	mov	r3, r0
  ac:	mov	r2, r4
  b0:	movw	r1, #0
  b4:	movt	r1, #0
  b8:	mvn	r0, #20
  bc:	bl	0 <coda_set_error>
  c0:	mvn	r3, #0
  c4:	b	1f4 <coda_bin_product_open+0x1f4>
  c8:	ldr	r3, [fp, #-24]	; 0xffffffe8
  cc:	ldrd	r2, [r3, #8]
  d0:	mov	r1, r2
  d4:	mov	r3, #0
  d8:	str	r3, [sp, #4]
  dc:	ldr	r3, [fp, #-16]
  e0:	str	r3, [sp]
  e4:	mov	r3, #1
  e8:	mov	r2, #1
  ec:	mov	r0, #0
  f0:	bl	0 <mmap>
  f4:	mov	r2, r0
  f8:	ldr	r3, [fp, #-24]	; 0xffffffe8
  fc:	str	r2, [r3, #48]	; 0x30
 100:	ldr	r3, [fp, #-24]	; 0xffffffe8
 104:	ldr	r3, [r3, #48]	; 0x30
 108:	cmn	r3, #1
 10c:	bne	160 <coda_bin_product_open+0x160>
 110:	ldr	r3, [fp, #-24]	; 0xffffffe8
 114:	ldr	r4, [r3]
 118:	bl	0 <__errno_location>
 11c:	mov	r3, r0
 120:	ldr	r3, [r3]
 124:	mov	r0, r3
 128:	bl	0 <strerror>
 12c:	mov	r3, r0
 130:	mov	r2, r4
 134:	movw	r1, #0
 138:	movt	r1, #0
 13c:	mvn	r0, #20
 140:	bl	0 <coda_set_error>
 144:	ldr	r3, [fp, #-24]	; 0xffffffe8
 148:	mov	r2, #0
 14c:	str	r2, [r3, #48]	; 0x30
 150:	ldr	r0, [fp, #-16]
 154:	bl	0 <close>
 158:	mvn	r3, #0
 15c:	b	1f4 <coda_bin_product_open+0x1f4>
 160:	ldr	r0, [fp, #-16]
 164:	bl	0 <close>
 168:	ldr	r3, [fp, #-24]	; 0xffffffe8
 16c:	ldrd	r2, [r3, #8]
 170:	ldr	r1, [fp, #-24]	; 0xffffffe8
 174:	strd	r2, [r1, #40]	; 0x28
 178:	b	1f0 <coda_bin_product_open+0x1f0>
 17c:	mov	r3, #0
 180:	str	r3, [fp, #-20]	; 0xffffffec
 184:	ldr	r3, [fp, #-24]	; 0xffffffe8
 188:	ldr	r3, [r3]
 18c:	ldr	r1, [fp, #-20]	; 0xffffffec
 190:	mov	r0, r3
 194:	bl	0 <open>
 198:	mov	r2, r0
 19c:	ldr	r3, [fp, #-24]	; 0xffffffe8
 1a0:	str	r2, [r3, #56]	; 0x38
 1a4:	ldr	r3, [fp, #-24]	; 0xffffffe8
 1a8:	ldr	r3, [r3, #56]	; 0x38
 1ac:	cmp	r3, #0
 1b0:	bge	1f0 <coda_bin_product_open+0x1f0>
 1b4:	ldr	r3, [fp, #-24]	; 0xffffffe8
 1b8:	ldr	r4, [r3]
 1bc:	bl	0 <__errno_location>
 1c0:	mov	r3, r0
 1c4:	ldr	r3, [r3]
 1c8:	mov	r0, r3
 1cc:	bl	0 <strerror>
 1d0:	mov	r3, r0
 1d4:	mov	r2, r4
 1d8:	movw	r1, #0
 1dc:	movt	r1, #0
 1e0:	mvn	r0, #20
 1e4:	bl	0 <coda_set_error>
 1e8:	mvn	r3, #0
 1ec:	b	1f4 <coda_bin_product_open+0x1f4>
 1f0:	mov	r3, #0
 1f4:	mov	r0, r3
 1f8:	sub	sp, fp, #8
 1fc:	ldr	r4, [sp]
 200:	ldr	fp, [sp, #4]
 204:	add	sp, sp, #8
 208:	pop	{pc}		; (ldr pc, [sp], #4)
 20c:	.word	0x000001d0

00000210 <coda_bin_product_close>:
 210:	str	fp, [sp, #-8]!
 214:	str	lr, [sp, #4]
 218:	add	fp, sp, #4
 21c:	sub	sp, sp, #8
 220:	str	r0, [fp, #-8]
 224:	ldr	r3, [fp, #-8]
 228:	ldr	r3, [r3, #52]	; 0x34
 22c:	cmp	r3, #0
 230:	beq	27c <coda_bin_product_close+0x6c>
 234:	ldr	r3, [fp, #-8]
 238:	ldr	r3, [r3, #48]	; 0x30
 23c:	cmp	r3, #0
 240:	beq	26c <coda_bin_product_close+0x5c>
 244:	ldr	r3, [fp, #-8]
 248:	ldr	r0, [r3, #48]	; 0x30
 24c:	ldr	r3, [fp, #-8]
 250:	ldrd	r2, [r3, #8]
 254:	mov	r3, r2
 258:	mov	r1, r3
 25c:	bl	0 <munmap>
 260:	ldr	r3, [fp, #-8]
 264:	mov	r2, #0
 268:	str	r2, [r3, #48]	; 0x30
 26c:	ldr	r3, [fp, #-8]
 270:	mov	r2, #0
 274:	str	r2, [r3, #52]	; 0x34
 278:	b	2a8 <coda_bin_product_close+0x98>
 27c:	ldr	r3, [fp, #-8]
 280:	ldr	r3, [r3, #56]	; 0x38
 284:	cmp	r3, #0
 288:	blt	2a8 <coda_bin_product_close+0x98>
 28c:	ldr	r3, [fp, #-8]
 290:	ldr	r3, [r3, #56]	; 0x38
 294:	mov	r0, r3
 298:	bl	0 <close>
 29c:	ldr	r3, [fp, #-8]
 2a0:	mvn	r2, #0
 2a4:	str	r2, [r3, #56]	; 0x38
 2a8:	mov	r3, #0
 2ac:	mov	r0, r3
 2b0:	sub	sp, fp, #4
 2b4:	ldr	fp, [sp]
 2b8:	add	sp, sp, #4
 2bc:	pop	{pc}		; (ldr pc, [sp], #4)

000002c0 <coda_bin_open>:
 2c0:	str	fp, [sp, #-8]!
 2c4:	str	lr, [sp, #4]
 2c8:	add	fp, sp, #4
 2cc:	sub	sp, sp, #32
 2d0:	str	r0, [fp, #-16]
 2d4:	strd	r2, [fp, #-28]	; 0xffffffe4
 2d8:	mov	r0, #64	; 0x40
 2dc:	bl	0 <malloc>
 2e0:	mov	r3, r0
 2e4:	str	r3, [fp, #-8]
 2e8:	ldr	r3, [fp, #-8]
 2ec:	cmp	r3, #0
 2f0:	bne	320 <coda_bin_open+0x60>
 2f4:	mov	r3, #241	; 0xf1
 2f8:	str	r3, [sp]
 2fc:	movw	r3, #0
 300:	movt	r3, #0
 304:	mov	r2, #64	; 0x40
 308:	movw	r1, #0
 30c:	movt	r1, #0
 310:	mvn	r0, #0
 314:	bl	0 <coda_set_error>
 318:	mvn	r3, #0
 31c:	b	460 <coda_bin_open+0x1a0>
 320:	ldr	r3, [fp, #-8]
 324:	mov	r2, #0
 328:	str	r2, [r3]
 32c:	ldr	r1, [fp, #-8]
 330:	ldrd	r2, [fp, #-28]	; 0xffffffe4
 334:	strd	r2, [r1, #8]
 338:	ldr	r3, [fp, #-8]
 33c:	mov	r2, #1
 340:	str	r2, [r3, #16]
 344:	ldr	r3, [fp, #-8]
 348:	mov	r2, #0
 34c:	str	r2, [r3, #20]
 350:	ldr	r3, [fp, #-8]
 354:	mov	r2, #0
 358:	str	r2, [r3, #24]
 35c:	ldr	r3, [fp, #-8]
 360:	mov	r2, #0
 364:	str	r2, [r3, #28]
 368:	ldr	r3, [fp, #-8]
 36c:	mov	r2, #0
 370:	str	r2, [r3, #32]
 374:	ldr	r1, [fp, #-8]
 378:	mov	r2, #0
 37c:	mov	r3, #0
 380:	strd	r2, [r1, #40]	; 0x28
 384:	ldr	r3, [fp, #-8]
 388:	mov	r2, #0
 38c:	str	r2, [r3, #48]	; 0x30
 390:	ldr	r3, [fp, #-8]
 394:	mov	r2, #0
 398:	str	r2, [r3, #52]	; 0x34
 39c:	ldr	r3, [fp, #-8]
 3a0:	mvn	r2, #0
 3a4:	str	r2, [r3, #56]	; 0x38
 3a8:	bl	0 <coda_type_raw_file_singleton>
 3ac:	mov	r2, r0
 3b0:	ldr	r3, [fp, #-8]
 3b4:	str	r2, [r3, #20]
 3b8:	ldr	r3, [fp, #-8]
 3bc:	ldr	r3, [r3, #20]
 3c0:	cmp	r3, #0
 3c4:	bne	3d8 <coda_bin_open+0x118>
 3c8:	ldr	r0, [fp, #-8]
 3cc:	bl	558 <coda_bin_close>
 3d0:	mvn	r3, #0
 3d4:	b	460 <coda_bin_open+0x1a0>
 3d8:	ldr	r0, [fp, #-16]
 3dc:	bl	0 <strdup>
 3e0:	mov	r3, r0
 3e4:	mov	r2, r3
 3e8:	ldr	r3, [fp, #-8]
 3ec:	str	r2, [r3]
 3f0:	ldr	r3, [fp, #-8]
 3f4:	ldr	r3, [r3]
 3f8:	cmp	r3, #0
 3fc:	bne	42c <coda_bin_open+0x16c>
 400:	mov	r3, #268	; 0x10c
 404:	movw	r2, #0
 408:	movt	r2, #0
 40c:	movw	r1, #0
 410:	movt	r1, #0
 414:	mvn	r0, #0
 418:	bl	0 <coda_set_error>
 41c:	ldr	r0, [fp, #-8]
 420:	bl	558 <coda_bin_close>
 424:	mvn	r3, #0
 428:	b	460 <coda_bin_open+0x1a0>
 42c:	ldr	r0, [fp, #-8]
 430:	bl	0 <coda_bin_product_open>
 434:	mov	r3, r0
 438:	cmp	r3, #0
 43c:	beq	450 <coda_bin_open+0x190>
 440:	ldr	r0, [fp, #-8]
 444:	bl	558 <coda_bin_close>
 448:	mvn	r3, #0
 44c:	b	460 <coda_bin_open+0x1a0>
 450:	ldr	r3, [fp, #4]
 454:	ldr	r2, [fp, #-8]
 458:	str	r2, [r3]
 45c:	mov	r3, #0
 460:	mov	r0, r3
 464:	sub	sp, fp, #4
 468:	ldr	fp, [sp]
 46c:	add	sp, sp, #4
 470:	pop	{pc}		; (ldr pc, [sp], #4)

00000474 <coda_bin_reopen_with_definition>:
 474:	str	fp, [sp, #-8]!
 478:	str	lr, [sp, #4]
 47c:	add	fp, sp, #4
 480:	sub	sp, sp, #16
 484:	str	r0, [fp, #-16]
 488:	str	r1, [fp, #-20]	; 0xffffffec
 48c:	ldr	r3, [fp, #-16]
 490:	ldr	r3, [r3]
 494:	str	r3, [fp, #-8]
 498:	ldr	r3, [fp, #-20]	; 0xffffffec
 49c:	cmp	r3, #0
 4a0:	bne	4c4 <coda_bin_reopen_with_definition+0x50>
 4a4:	movw	r3, #0
 4a8:	movt	r3, #0
 4ac:	mov	r2, #288	; 0x120
 4b0:	movw	r1, #0
 4b4:	movt	r1, #0
 4b8:	movw	r0, #0
 4bc:	movt	r0, #0
 4c0:	bl	0 <__assert_fail>
 4c4:	ldr	r3, [fp, #-8]
 4c8:	ldr	r3, [r3, #16]
 4cc:	cmp	r3, #1
 4d0:	beq	4f4 <coda_bin_reopen_with_definition+0x80>
 4d4:	movw	r3, #0
 4d8:	movt	r3, #0
 4dc:	movw	r2, #289	; 0x121
 4e0:	movw	r1, #0
 4e4:	movt	r1, #0
 4e8:	movw	r0, #0
 4ec:	movt	r0, #0
 4f0:	bl	0 <__assert_fail>
 4f4:	ldr	r3, [fp, #-20]	; 0xffffffec
 4f8:	ldr	r3, [r3]
 4fc:	cmp	r3, #1
 500:	beq	524 <coda_bin_reopen_with_definition+0xb0>
 504:	movw	r3, #0
 508:	movt	r3, #0
 50c:	movw	r2, #290	; 0x122
 510:	movw	r1, #0
 514:	movt	r1, #0
 518:	movw	r0, #0
 51c:	movt	r0, #0
 520:	bl	0 <__assert_fail>
 524:	ldr	r3, [fp, #-20]	; 0xffffffec
 528:	ldr	r2, [r3, #28]
 52c:	ldr	r3, [fp, #-8]
 530:	str	r2, [r3, #20]
 534:	ldr	r3, [fp, #-8]
 538:	ldr	r2, [fp, #-20]	; 0xffffffec
 53c:	str	r2, [r3, #24]
 540:	mov	r3, #0
 544:	mov	r0, r3
 548:	sub	sp, fp, #4
 54c:	ldr	fp, [sp]
 550:	add	sp, sp, #4
 554:	pop	{pc}		; (ldr pc, [sp], #4)

00000558 <coda_bin_close>:
 558:	str	fp, [sp, #-8]!
 55c:	str	lr, [sp, #4]
 560:	add	fp, sp, #4
 564:	sub	sp, sp, #16
 568:	str	r0, [fp, #-16]
 56c:	ldr	r3, [fp, #-16]
 570:	str	r3, [fp, #-8]
 574:	ldr	r0, [fp, #-8]
 578:	bl	210 <coda_bin_product_close>
 57c:	mov	r3, r0
 580:	cmp	r3, #0
 584:	beq	590 <coda_bin_close+0x38>
 588:	mvn	r3, #0
 58c:	b	5bc <coda_bin_close+0x64>
 590:	ldr	r3, [fp, #-8]
 594:	ldr	r3, [r3]
 598:	cmp	r3, #0
 59c:	beq	5b0 <coda_bin_close+0x58>
 5a0:	ldr	r3, [fp, #-8]
 5a4:	ldr	r3, [r3]
 5a8:	mov	r0, r3
 5ac:	bl	0 <free>
 5b0:	ldr	r0, [fp, #-8]
 5b4:	bl	0 <free>
 5b8:	mov	r3, #0
 5bc:	mov	r0, r3
 5c0:	sub	sp, fp, #4
 5c4:	ldr	fp, [sp]
 5c8:	add	sp, sp, #4
 5cc:	pop	{pc}		; (ldr pc, [sp], #4)
