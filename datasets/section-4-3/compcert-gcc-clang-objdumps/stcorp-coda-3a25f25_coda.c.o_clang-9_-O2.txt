
../compcert-repos/stcorp-coda-3a25f25/CMakeFiles/coda_static.dir/libcoda/coda.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <coda_get_libcoda_version>:
   0:	push	{fp, lr}
   4:	mov	fp, sp
   8:	ldr	r1, [pc, #8]	; 18 <coda_get_libcoda_version+0x18>
   c:	bl	0 <__aeabi_read_tp>
  10:	ldr	r0, [r0, r1]
  14:	pop	{fp, pc}
  18:	.word	0x00000000

0000001c <coda_set_option_bypass_special_types>:
  1c:	push	{fp, lr}
  20:	mov	fp, sp
  24:	mov	r2, r0
  28:	cmp	r0, #2
  2c:	bcc	48 <coda_set_option_bypass_special_types+0x2c>
  30:	movw	r1, #0
  34:	mvn	r0, #99	; 0x63
  38:	movt	r1, #0
  3c:	bl	0 <coda_set_error>
  40:	mvn	r0, #0
  44:	pop	{fp, pc}
  48:	ldr	r1, [pc, #12]	; 5c <coda_set_option_bypass_special_types+0x40>
  4c:	bl	0 <__aeabi_read_tp>
  50:	str	r2, [r0, r1]
  54:	mov	r0, #0
  58:	pop	{fp, pc}
  5c:	.word	0x00000000

00000060 <coda_get_option_bypass_special_types>:
  60:	push	{fp, lr}
  64:	mov	fp, sp
  68:	ldr	r1, [pc, #8]	; 78 <coda_get_option_bypass_special_types+0x18>
  6c:	bl	0 <__aeabi_read_tp>
  70:	ldr	r0, [r0, r1]
  74:	pop	{fp, pc}
  78:	.word	0x00000000

0000007c <coda_set_option_perform_boundary_checks>:
  7c:	push	{fp, lr}
  80:	mov	fp, sp
  84:	mov	r2, r0
  88:	cmp	r0, #2
  8c:	bcc	a8 <coda_set_option_perform_boundary_checks+0x2c>
  90:	movw	r1, #0
  94:	mvn	r0, #99	; 0x63
  98:	movt	r1, #0
  9c:	bl	0 <coda_set_error>
  a0:	mvn	r0, #0
  a4:	pop	{fp, pc}
  a8:	ldr	r1, [pc, #12]	; bc <coda_set_option_perform_boundary_checks+0x40>
  ac:	bl	0 <__aeabi_read_tp>
  b0:	str	r2, [r0, r1]
  b4:	mov	r0, #0
  b8:	pop	{fp, pc}
  bc:	.word	0x00000000

000000c0 <coda_get_option_perform_boundary_checks>:
  c0:	push	{fp, lr}
  c4:	mov	fp, sp
  c8:	ldr	r1, [pc, #8]	; d8 <coda_get_option_perform_boundary_checks+0x18>
  cc:	bl	0 <__aeabi_read_tp>
  d0:	ldr	r0, [r0, r1]
  d4:	pop	{fp, pc}
  d8:	.word	0x00000000

000000dc <coda_set_option_perform_conversions>:
  dc:	push	{fp, lr}
  e0:	mov	fp, sp
  e4:	mov	r2, r0
  e8:	cmp	r0, #2
  ec:	bcs	104 <coda_set_option_perform_conversions+0x28>
  f0:	ldr	r1, [pc, #36]	; 11c <coda_set_option_perform_conversions+0x40>
  f4:	bl	0 <__aeabi_read_tp>
  f8:	str	r2, [r0, r1]
  fc:	mov	r0, #0
 100:	pop	{fp, pc}
 104:	movw	r1, #0
 108:	mvn	r0, #99	; 0x63
 10c:	movt	r1, #0
 110:	bl	0 <coda_set_error>
 114:	mvn	r0, #0
 118:	pop	{fp, pc}
 11c:	.word	0x00000000

00000120 <coda_get_option_perform_conversions>:
 120:	push	{fp, lr}
 124:	mov	fp, sp
 128:	ldr	r1, [pc, #8]	; 138 <coda_get_option_perform_conversions+0x18>
 12c:	bl	0 <__aeabi_read_tp>
 130:	ldr	r0, [r0, r1]
 134:	pop	{fp, pc}
 138:	.word	0x00000000

0000013c <coda_set_option_use_fast_size_expressions>:
 13c:	push	{fp, lr}
 140:	mov	fp, sp
 144:	mov	r2, r0
 148:	cmp	r0, #2
 14c:	bcs	164 <coda_set_option_use_fast_size_expressions+0x28>
 150:	ldr	r1, [pc, #36]	; 17c <coda_set_option_use_fast_size_expressions+0x40>
 154:	bl	0 <__aeabi_read_tp>
 158:	str	r2, [r0, r1]
 15c:	mov	r0, #0
 160:	pop	{fp, pc}
 164:	movw	r1, #0
 168:	mvn	r0, #99	; 0x63
 16c:	movt	r1, #0
 170:	bl	0 <coda_set_error>
 174:	mvn	r0, #0
 178:	pop	{fp, pc}
 17c:	.word	0x00000000

00000180 <coda_get_option_use_fast_size_expressions>:
 180:	push	{fp, lr}
 184:	mov	fp, sp
 188:	ldr	r1, [pc, #8]	; 198 <coda_get_option_use_fast_size_expressions+0x18>
 18c:	bl	0 <__aeabi_read_tp>
 190:	ldr	r0, [r0, r1]
 194:	pop	{fp, pc}
 198:	.word	0x00000000

0000019c <coda_set_option_use_mmap>:
 19c:	push	{fp, lr}
 1a0:	mov	fp, sp
 1a4:	mov	r2, r0
 1a8:	cmp	r0, #2
 1ac:	bcs	1c4 <coda_set_option_use_mmap+0x28>
 1b0:	ldr	r1, [pc, #36]	; 1dc <coda_set_option_use_mmap+0x40>
 1b4:	bl	0 <__aeabi_read_tp>
 1b8:	str	r2, [r0, r1]
 1bc:	mov	r0, #0
 1c0:	pop	{fp, pc}
 1c4:	movw	r1, #0
 1c8:	mvn	r0, #99	; 0x63
 1cc:	movt	r1, #0
 1d0:	bl	0 <coda_set_error>
 1d4:	mvn	r0, #0
 1d8:	pop	{fp, pc}
 1dc:	.word	0x00000000

000001e0 <coda_get_option_use_mmap>:
 1e0:	push	{fp, lr}
 1e4:	mov	fp, sp
 1e8:	ldr	r1, [pc, #8]	; 1f8 <coda_get_option_use_mmap+0x18>
 1ec:	bl	0 <__aeabi_read_tp>
 1f0:	ldr	r0, [r0, r1]
 1f4:	pop	{fp, pc}
 1f8:	.word	0x00000000

000001fc <coda_set_definition_path>:
 1fc:	push	{r4, r5, r6, sl, fp, lr}
 200:	add	fp, sp, #16
 204:	ldr	r6, [pc, #120]	; 284 <coda_set_definition_path+0x88>
 208:	mov	r5, r0
 20c:	bl	0 <__aeabi_read_tp>
 210:	ldr	r0, [r0, r6]
 214:	cmp	r0, #0
 218:	beq	22c <coda_set_definition_path+0x30>
 21c:	bl	0 <free>
 220:	mov	r1, #0
 224:	bl	0 <__aeabi_read_tp>
 228:	str	r1, [r0, r6]
 22c:	mov	r4, #0
 230:	cmp	r5, #0
 234:	beq	254 <coda_set_definition_path+0x58>
 238:	mov	r0, r5
 23c:	bl	0 <strdup>
 240:	mov	r1, r0
 244:	bl	0 <__aeabi_read_tp>
 248:	cmp	r1, #0
 24c:	str	r1, [r0, r6]
 250:	beq	25c <coda_set_definition_path+0x60>
 254:	mov	r0, r4
 258:	pop	{r4, r5, r6, sl, fp, pc}
 25c:	movw	r1, #0
 260:	movw	r2, #0
 264:	mvn	r0, #0
 268:	movw	r3, #385	; 0x181
 26c:	mvn	r4, #0
 270:	movt	r1, #0
 274:	movt	r2, #0
 278:	bl	0 <coda_set_error>
 27c:	mov	r0, r4
 280:	pop	{r4, r5, r6, sl, fp, pc}
 284:	.word	0x00000000

00000288 <coda_set_definition_path_conditional>:
 288:	push	{r4, r5, r6, sl, fp, lr}
 28c:	add	fp, sp, #16
 290:	sub	sp, sp, #8
 294:	mov	r5, r0
 298:	movw	r0, #0
 29c:	mov	r4, r2
 2a0:	mov	r6, r1
 2a4:	movt	r0, #0
 2a8:	bl	0 <getenv>
 2ac:	cmp	r0, #0
 2b0:	beq	2bc <coda_set_definition_path_conditional+0x34>
 2b4:	mov	r5, #0
 2b8:	b	2f0 <coda_set_definition_path_conditional+0x68>
 2bc:	cmp	r6, #0
 2c0:	beq	2d8 <coda_set_definition_path_conditional+0x50>
 2c4:	add	r2, sp, #4
 2c8:	mov	r0, r6
 2cc:	mov	r1, r5
 2d0:	bl	0 <coda_path_find_file>
 2d4:	b	2e4 <coda_set_definition_path_conditional+0x5c>
 2d8:	add	r1, sp, #4
 2dc:	mov	r0, r5
 2e0:	bl	0 <coda_path_for_program>
 2e4:	mvn	r5, #0
 2e8:	cmp	r0, #0
 2ec:	beq	2fc <coda_set_definition_path_conditional+0x74>
 2f0:	mov	r0, r5
 2f4:	sub	sp, fp, #16
 2f8:	pop	{r4, r5, r6, sl, fp, pc}
 2fc:	ldr	r0, [sp, #4]
 300:	cmp	r0, #0
 304:	beq	2b4 <coda_set_definition_path_conditional+0x2c>
 308:	mov	r3, sp
 30c:	mov	r1, #1
 310:	mov	r2, r4
 314:	bl	0 <coda_path_from_path>
 318:	mov	r4, r0
 31c:	ldr	r0, [sp, #4]
 320:	bl	0 <free>
 324:	cmp	r4, #0
 328:	beq	334 <coda_set_definition_path_conditional+0xac>
 32c:	mvn	r5, #0
 330:	b	2f0 <coda_set_definition_path_conditional+0x68>
 334:	ldr	r5, [pc, #128]	; 3bc <coda_set_definition_path_conditional+0x134>
 338:	bl	0 <__aeabi_read_tp>
 33c:	ldr	r0, [r0, r5]
 340:	ldr	r4, [sp]
 344:	cmp	r0, #0
 348:	beq	35c <coda_set_definition_path_conditional+0xd4>
 34c:	bl	0 <free>
 350:	mov	r1, #0
 354:	bl	0 <__aeabi_read_tp>
 358:	str	r1, [r0, r5]
 35c:	cmp	r4, #0
 360:	beq	380 <coda_set_definition_path_conditional+0xf8>
 364:	mov	r0, r4
 368:	bl	0 <strdup>
 36c:	mov	r1, r0
 370:	bl	0 <__aeabi_read_tp>
 374:	cmp	r1, #0
 378:	str	r1, [r0, r5]
 37c:	beq	390 <coda_set_definition_path_conditional+0x108>
 380:	ldr	r0, [sp]
 384:	bl	0 <free>
 388:	mov	r5, #0
 38c:	b	2f0 <coda_set_definition_path_conditional+0x68>
 390:	movw	r1, #0
 394:	movw	r2, #0
 398:	mvn	r0, #0
 39c:	movw	r3, #385	; 0x181
 3a0:	mvn	r5, #0
 3a4:	movt	r1, #0
 3a8:	movt	r2, #0
 3ac:	bl	0 <coda_set_error>
 3b0:	ldr	r0, [sp]
 3b4:	bl	0 <free>
 3b8:	b	2f0 <coda_set_definition_path_conditional+0x68>
 3bc:	.word	0x00000000

000003c0 <coda_init>:
 3c0:	push	{r4, r5, r6, sl, fp, lr}
 3c4:	add	fp, sp, #16
 3c8:	ldr	r5, [pc, #248]	; 4c8 <coda_init+0x108>
 3cc:	bl	0 <__aeabi_read_tp>
 3d0:	ldr	r0, [r0, r5]
 3d4:	cmp	r0, #0
 3d8:	beq	3f4 <coda_init+0x34>
 3dc:	add	r1, r0, #1
 3e0:	bl	0 <__aeabi_read_tp>
 3e4:	mov	r4, #0
 3e8:	str	r1, [r0, r5]
 3ec:	mov	r0, r4
 3f0:	pop	{r4, r5, r6, sl, fp, pc}
 3f4:	bl	0 <coda_leap_second_table_init>
 3f8:	mvn	r4, #0
 3fc:	cmp	r0, #0
 400:	beq	40c <coda_init+0x4c>
 404:	mov	r0, r4
 408:	pop	{r4, r5, r6, sl, fp, pc}
 40c:	bl	0 <coda_data_dictionary_init>
 410:	cmp	r0, #0
 414:	bne	440 <coda_init+0x80>
 418:	ldr	r6, [pc, #172]	; 4cc <coda_init+0x10c>
 41c:	bl	0 <__aeabi_read_tp>
 420:	ldr	r1, [r0, r6]
 424:	cmp	r1, #0
 428:	beq	44c <coda_init+0x8c>
 42c:	mov	r0, r1
 430:	bl	0 <coda_read_definitions>
 434:	cmp	r0, #0
 438:	beq	4a8 <coda_init+0xe8>
 43c:	bl	0 <coda_data_dictionary_done>
 440:	bl	0 <coda_leap_second_table_done>
 444:	mov	r0, r4
 448:	pop	{r4, r5, r6, sl, fp, pc}
 44c:	movw	r0, #0
 450:	movt	r0, #0
 454:	bl	0 <getenv>
 458:	cmp	r0, #0
 45c:	beq	4a8 <coda_init+0xe8>
 460:	bl	0 <strdup>
 464:	mov	r1, r0
 468:	bl	0 <__aeabi_read_tp>
 46c:	cmp	r1, #0
 470:	str	r1, [r0, r6]
 474:	bne	42c <coda_init+0x6c>
 478:	bl	0 <coda_data_dictionary_done>
 47c:	bl	0 <coda_leap_second_table_done>
 480:	movw	r1, #0
 484:	movw	r2, #0
 488:	mvn	r0, #0
 48c:	mov	r3, #512	; 0x200
 490:	mvn	r4, #0
 494:	movt	r1, #0
 498:	movt	r2, #0
 49c:	bl	0 <coda_set_error>
 4a0:	mov	r0, r4
 4a4:	pop	{r4, r5, r6, sl, fp, pc}
 4a8:	ldr	r1, [pc, #32]	; 4d0 <coda_init+0x110>
 4ac:	mov	r2, #1
 4b0:	bl	0 <__aeabi_read_tp>
 4b4:	str	r2, [r0, r1]
 4b8:	ldr	r1, [pc, #20]	; 4d4 <coda_init+0x114>
 4bc:	str	r2, [r0, r1]
 4c0:	ldr	r0, [r0, r5]
 4c4:	b	3dc <coda_init+0x1c>
	...

000004d8 <coda_done>:
 4d8:	push	{r4, sl, fp, lr}
 4dc:	add	fp, sp, #8
 4e0:	ldr	r1, [pc, #104]	; 550 <coda_done+0x78>
 4e4:	bl	0 <__aeabi_read_tp>
 4e8:	ldr	r0, [r0, r1]
 4ec:	cmp	r0, #1
 4f0:	blt	54c <coda_done+0x74>
 4f4:	sub	r2, r0, #1
 4f8:	bl	0 <__aeabi_read_tp>
 4fc:	cmp	r2, #0
 500:	str	r2, [r0, r1]
 504:	popne	{r4, sl, fp, pc}
 508:	bl	0 <coda_sp3_done>
 50c:	bl	0 <coda_rinex_done>
 510:	bl	0 <coda_grib_done>
 514:	bl	0 <coda_data_dictionary_done>
 518:	ldr	r4, [pc, #52]	; 554 <coda_done+0x7c>
 51c:	bl	0 <__aeabi_read_tp>
 520:	ldr	r0, [r0, r4]
 524:	cmp	r0, #0
 528:	beq	53c <coda_done+0x64>
 52c:	bl	0 <free>
 530:	mov	r1, #0
 534:	bl	0 <__aeabi_read_tp>
 538:	str	r1, [r0, r4]
 53c:	bl	0 <coda_mem_done>
 540:	bl	0 <coda_type_done>
 544:	pop	{r4, sl, fp, lr}
 548:	b	0 <coda_leap_second_table_done>
 54c:	pop	{r4, sl, fp, pc}
	...

00000558 <coda_free>:
 558:	b	0 <free>
