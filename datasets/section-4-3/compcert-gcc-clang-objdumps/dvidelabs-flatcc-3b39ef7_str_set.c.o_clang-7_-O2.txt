
../compcert-repos/dvidelabs-flatcc-3b39ef7/src/compiler/CMakeFiles/flatcc.dir/__/__/external/hash/str_set.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <str_set_clear>:
   0:	push	{r4, sl, fp, lr}
   4:	add	fp, sp, #8
   8:	mov	r4, r0
   c:	ldr	r0, [r0]
  10:	cmp	r0, #0
  14:	beq	1c <str_set_clear+0x1c>
  18:	bl	0 <free>
  1c:	vmov.i32	q8, #0	; 0x00000000
  20:	vst1.32	{d16-d17}, [r4]
  24:	pop	{r4, sl, fp, pc}

00000028 <str_set_destroy>:
  28:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
  2c:	add	fp, sp, #24
  30:	mov	r4, r0
  34:	cmp	r1, #0
  38:	ldrne	r0, [r4, #12]
  3c:	cmpne	r0, #0
  40:	beq	7c <str_set_destroy+0x54>
  44:	ldr	r7, [r4]
  48:	mov	r8, r2
  4c:	mov	r6, r1
  50:	mov	r5, #0
  54:	ldr	r1, [r7, r5, lsl #2]
  58:	orr	r2, r1, #2
  5c:	cmp	r2, #2
  60:	beq	70 <str_set_destroy+0x48>
  64:	mov	r0, r8
  68:	blx	r6
  6c:	ldr	r0, [r4, #12]
  70:	add	r5, r5, #1
  74:	cmp	r5, r0
  78:	bcc	54 <str_set_destroy+0x2c>
  7c:	ldr	r0, [r4]
  80:	cmp	r0, #0
  84:	beq	8c <str_set_destroy+0x64>
  88:	bl	0 <free>
  8c:	vmov.i32	q8, #0	; 0x00000000
  90:	vst1.32	{d16-d17}, [r4]
  94:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

00000098 <str_set_init>:
  98:	push	{r4, r5, fp, lr}
  9c:	add	fp, sp, #8
  a0:	mov	r4, r0
  a4:	mov	r2, #4
  a8:	mov	r0, #179	; 0xb3
  ac:	mul	r3, r2, r0
  b0:	mov	r5, r2
  b4:	lsl	r2, r2, #1
  b8:	cmp	r1, r3, lsr #8
  bc:	bhi	ac <str_set_init+0x14>
  c0:	mov	r0, r5
  c4:	mov	r1, #4
  c8:	bl	0 <calloc>
  cc:	cmp	r0, #0
  d0:	str	r0, [r4]
  d4:	movne	r0, #0
  d8:	strne	r0, [r4, #4]
  dc:	strne	r0, [r4, #8]
  e0:	strne	r5, [r4, #12]
  e4:	popne	{r4, r5, fp, pc}
  e8:	mvn	r0, #0
  ec:	pop	{r4, r5, fp, pc}

000000f0 <str_set_resize>:
  f0:	b	f4 <ht_resize>

000000f4 <ht_resize>:
  f4:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
  f8:	add	fp, sp, #24
  fc:	sub	sp, sp, #24
 100:	mov	r4, r0
 104:	ldr	r5, [r0]
 108:	ldr	r0, [r0, #8]
 10c:	mov	r2, #4
 110:	cmp	r0, r1
 114:	movhi	r1, r0
 118:	mov	r0, #179	; 0xb3
 11c:	mul	r3, r2, r0
 120:	mov	r6, r2
 124:	lsl	r2, r2, #1
 128:	cmp	r1, r3, lsr #8
 12c:	bhi	11c <ht_resize+0x28>
 130:	mov	r0, r6
 134:	mov	r1, #4
 138:	bl	0 <calloc>
 13c:	cmp	r0, #0
 140:	str	r0, [sp, #8]
 144:	mvneq	r0, #0
 148:	subeq	sp, fp, #24
 14c:	popeq	{r4, r5, r6, r7, r8, r9, fp, pc}
 150:	str	r6, [sp, #20]
 154:	mov	r6, #0
 158:	str	r6, [sp, #12]
 15c:	str	r6, [sp, #16]
 160:	ldr	r0, [r4, #12]
 164:	cmp	r0, #0
 168:	beq	1b8 <ht_resize+0xc4>
 16c:	mov	r9, #3
 170:	add	r8, sp, #8
 174:	ldr	r7, [r5, r6, lsl #2]
 178:	orr	r1, r7, #2
 17c:	cmp	r1, #2
 180:	beq	1a8 <ht_resize+0xb4>
 184:	mov	r0, r7
 188:	bl	0 <strlen>
 18c:	mov	r2, r0
 190:	mov	r0, r8
 194:	mov	r1, r7
 198:	mov	r3, r7
 19c:	str	r9, [sp]
 1a0:	bl	1e4 <ht_insert>
 1a4:	ldr	r0, [r4, #12]
 1a8:	add	r6, r6, #1
 1ac:	cmp	r6, r0
 1b0:	bcc	174 <ht_resize+0x80>
 1b4:	ldr	r5, [r4]
 1b8:	cmp	r5, #0
 1bc:	beq	1c8 <ht_resize+0xd4>
 1c0:	mov	r0, r5
 1c4:	bl	0 <free>
 1c8:	add	r0, sp, #8
 1cc:	vld1.64	{d16-d17}, [r0]
 1d0:	mov	r0, #0
 1d4:	vst1.32	{d16-d17}, [r4]
 1d8:	sub	sp, fp, #24
 1dc:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}

000001e0 <str_set_insert>:
 1e0:	b	1e4 <ht_insert>

000001e4 <ht_insert>:
 1e4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
 1e8:	add	fp, sp, #28
 1ec:	sub	sp, sp, #36	; 0x24
 1f0:	cmp	r3, #2
 1f4:	str	r2, [sp, #20]
 1f8:	beq	360 <ht_insert+0x17c>
 1fc:	mov	sl, r3
 200:	cmp	r3, #1
 204:	beq	380 <ht_insert+0x19c>
 208:	cmp	sl, #0
 20c:	beq	3a0 <ht_insert+0x1bc>
 210:	mov	r5, r0
 214:	ldr	r0, [r0, #8]
 218:	mov	r7, r1
 21c:	mov	r1, #179	; 0xb3
 220:	ldr	r4, [r5, #12]
 224:	mul	r1, r4, r1
 228:	cmp	r0, r1, lsr #8
 22c:	bcc	248 <ht_insert+0x64>
 230:	lsl	r1, r0, #1
 234:	mov	r0, r5
 238:	bl	f4 <ht_resize>
 23c:	cmp	r0, #0
 240:	bne	3c0 <ht_insert+0x1dc>
 244:	ldr	r4, [r5, #12]
 248:	ldr	r2, [sp, #20]
 24c:	ldr	r9, [r5]
 250:	movw	r1, #15186	; 0x3b52
 254:	add	r0, sp, #24
 258:	mov	r3, #0
 25c:	mov	r8, #0
 260:	movt	r1, #12137	; 0x2f69
 264:	str	r0, [sp, #4]
 268:	mov	r0, r7
 26c:	str	r1, [sp]
 270:	bl	0 <cmetrohash64_1>
 274:	ldr	r2, [fp, #8]
 278:	ldr	r1, [sp, #24]
 27c:	sub	r6, r4, #1
 280:	orr	r2, r2, #1
 284:	and	r0, r6, r1
 288:	cmp	r2, #3
 28c:	bne	2c4 <ht_insert+0xe0>
 290:	ldr	r2, [r5, #8]
 294:	add	r2, r2, #1
 298:	str	r2, [r5, #8]
 29c:	b	2a4 <ht_insert+0xc0>
 2a0:	and	r0, r1, r6
 2a4:	mov	r5, r9
 2a8:	add	r1, r1, #1
 2ac:	ldr	r0, [r5, r0, lsl #2]!
 2b0:	orr	r0, r0, #2
 2b4:	cmp	r0, #2
 2b8:	bne	2a0 <ht_insert+0xbc>
 2bc:	mov	r4, #0
 2c0:	b	33c <ht_insert+0x158>
 2c4:	str	sl, [sp, #16]
 2c8:	add	sl, r1, #1
 2cc:	str	r5, [sp, #12]
 2d0:	b	2dc <ht_insert+0xf8>
 2d4:	and	r0, sl, r6
 2d8:	add	sl, sl, #1
 2dc:	mov	r5, r9
 2e0:	ldr	r4, [r5, r0, lsl #2]!
 2e4:	cmp	r4, #2
 2e8:	beq	310 <ht_insert+0x12c>
 2ec:	cmp	r4, #0
 2f0:	beq	31c <ht_insert+0x138>
 2f4:	ldr	r2, [sp, #20]
 2f8:	mov	r0, r7
 2fc:	mov	r1, r4
 300:	bl	0 <strncmp>
 304:	cmp	r0, #0
 308:	bne	2d4 <ht_insert+0xf0>
 30c:	b	34c <ht_insert+0x168>
 310:	cmp	r8, #0
 314:	moveq	r8, r5
 318:	b	2d4 <ht_insert+0xf0>
 31c:	ldr	r1, [sp, #12]
 320:	ldr	sl, [sp, #16]
 324:	cmp	r8, #0
 328:	mov	r4, #0
 32c:	movne	r5, r8
 330:	ldr	r0, [r1, #8]
 334:	add	r0, r0, #1
 338:	str	r0, [r1, #8]
 33c:	str	sl, [r5]
 340:	mov	r0, r4
 344:	sub	sp, fp, #28
 348:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
 34c:	ldr	r0, [fp, #8]
 350:	ldr	sl, [sp, #16]
 354:	cmp	r0, #0
 358:	streq	sl, [r5]
 35c:	b	340 <ht_insert+0x15c>
 360:	movw	r0, #0
 364:	movw	r1, #0
 368:	movw	r3, #0
 36c:	mov	r2, #115	; 0x73
 370:	movt	r0, #0
 374:	movt	r1, #0
 378:	movt	r3, #0
 37c:	bl	0 <__assert_fail>
 380:	movw	r0, #0
 384:	movw	r1, #0
 388:	movw	r3, #0
 38c:	mov	r2, #116	; 0x74
 390:	movt	r0, #0
 394:	movt	r1, #0
 398:	movt	r3, #0
 39c:	bl	0 <__assert_fail>
 3a0:	movw	r0, #0
 3a4:	movw	r1, #0
 3a8:	movw	r3, #0
 3ac:	mov	r2, #114	; 0x72
 3b0:	movt	r0, #0
 3b4:	movt	r1, #0
 3b8:	movt	r3, #0
 3bc:	bl	0 <__assert_fail>
 3c0:	movw	r0, #0
 3c4:	movw	r1, #0
 3c8:	movw	r2, #0
 3cc:	movt	r0, #0
 3d0:	movt	r1, #0
 3d4:	movt	r2, #0
 3d8:	ldr	r0, [r0]
 3dc:	bl	0 <fprintf>
 3e0:	mov	r0, #1
 3e4:	bl	0 <exit>

000003e8 <str_set_insert_item>:
 3e8:	push	{r4, r5, r6, sl, fp, lr}
 3ec:	add	fp, sp, #16
 3f0:	sub	sp, sp, #8
 3f4:	mov	r6, r0
 3f8:	mov	r0, r1
 3fc:	mov	r4, r2
 400:	mov	r5, r1
 404:	bl	0 <strlen>
 408:	mov	r2, r0
 40c:	mov	r0, r6
 410:	mov	r1, r5
 414:	mov	r3, r5
 418:	str	r4, [sp]
 41c:	bl	1e4 <ht_insert>
 420:	sub	sp, fp, #16
 424:	pop	{r4, r5, r6, sl, fp, pc}

00000428 <str_set_find>:
 428:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
 42c:	add	fp, sp, #24
 430:	sub	sp, sp, #16
 434:	ldr	r7, [r0]
 438:	cmp	r7, #0
 43c:	beq	4b0 <str_set_find+0x88>
 440:	ldr	r5, [r0, #12]
 444:	mov	r9, r1
 448:	movw	r1, #15186	; 0x3b52
 44c:	add	r0, sp, #8
 450:	mov	r3, #0
 454:	mov	r8, r2
 458:	movt	r1, #12137	; 0x2f69
 45c:	str	r0, [sp, #4]
 460:	mov	r0, r9
 464:	str	r1, [sp]
 468:	bl	0 <cmetrohash64_1>
 46c:	ldr	r4, [sp, #8]
 470:	sub	r5, r5, #1
 474:	b	47c <str_set_find+0x54>
 478:	add	r4, r4, #1
 47c:	and	r0, r4, r5
 480:	ldr	r6, [r7, r0, lsl #2]
 484:	cmp	r6, #2
 488:	beq	478 <str_set_find+0x50>
 48c:	cmp	r6, #0
 490:	beq	4b0 <str_set_find+0x88>
 494:	mov	r0, r9
 498:	mov	r1, r6
 49c:	mov	r2, r8
 4a0:	bl	0 <strncmp>
 4a4:	cmp	r0, #0
 4a8:	bne	478 <str_set_find+0x50>
 4ac:	b	4b4 <str_set_find+0x8c>
 4b0:	mov	r6, #0
 4b4:	mov	r0, r6
 4b8:	sub	sp, fp, #24
 4bc:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}

000004c0 <str_set_find_item>:
 4c0:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
 4c4:	add	fp, sp, #24
 4c8:	sub	sp, sp, #16
 4cc:	mov	r6, r0
 4d0:	mov	r0, r1
 4d4:	mov	r9, r1
 4d8:	bl	0 <strlen>
 4dc:	ldr	r7, [r6]
 4e0:	cmp	r7, #0
 4e4:	beq	558 <str_set_find_item+0x98>
 4e8:	ldr	r4, [r6, #12]
 4ec:	mov	r8, r0
 4f0:	movw	r1, #15186	; 0x3b52
 4f4:	add	r0, sp, #8
 4f8:	mov	r3, #0
 4fc:	movt	r1, #12137	; 0x2f69
 500:	str	r0, [sp, #4]
 504:	mov	r0, r9
 508:	mov	r2, r8
 50c:	str	r1, [sp]
 510:	bl	0 <cmetrohash64_1>
 514:	ldr	r5, [sp, #8]
 518:	sub	r4, r4, #1
 51c:	b	524 <str_set_find_item+0x64>
 520:	add	r5, r5, #1
 524:	and	r0, r5, r4
 528:	ldr	r6, [r7, r0, lsl #2]
 52c:	cmp	r6, #2
 530:	beq	520 <str_set_find_item+0x60>
 534:	cmp	r6, #0
 538:	beq	558 <str_set_find_item+0x98>
 53c:	mov	r0, r9
 540:	mov	r1, r6
 544:	mov	r2, r8
 548:	bl	0 <strncmp>
 54c:	cmp	r0, #0
 550:	bne	520 <str_set_find_item+0x60>
 554:	b	55c <str_set_find_item+0x9c>
 558:	mov	r6, #0
 55c:	mov	r0, r6
 560:	sub	sp, fp, #24
 564:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}

00000568 <str_set_remove>:
 568:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
 56c:	add	fp, sp, #28
 570:	sub	sp, sp, #28
 574:	ldr	r4, [r0]
 578:	cmp	r4, #0
 57c:	beq	60c <str_set_remove+0xa4>
 580:	ldr	r6, [r0, #12]
 584:	mov	sl, r1
 588:	movw	r1, #15186	; 0x3b52
 58c:	str	r0, [sp, #12]
 590:	add	r0, sp, #16
 594:	mov	r3, #0
 598:	mov	r9, r2
 59c:	movt	r1, #12137	; 0x2f69
 5a0:	str	r0, [sp, #4]
 5a4:	mov	r0, sl
 5a8:	str	r1, [sp]
 5ac:	bl	0 <cmetrohash64_1>
 5b0:	ldr	r5, [sp, #16]
 5b4:	sub	r6, r6, #1
 5b8:	b	5c0 <str_set_remove+0x58>
 5bc:	add	r5, r5, #1
 5c0:	and	r8, r5, r6
 5c4:	ldr	r7, [r4, r8, lsl #2]
 5c8:	cmp	r7, #2
 5cc:	beq	5bc <str_set_remove+0x54>
 5d0:	cmp	r7, #0
 5d4:	beq	60c <str_set_remove+0xa4>
 5d8:	mov	r0, sl
 5dc:	mov	r1, r7
 5e0:	mov	r2, r9
 5e4:	bl	0 <strncmp>
 5e8:	cmp	r0, #0
 5ec:	bne	5bc <str_set_remove+0x54>
 5f0:	ldr	r1, [sp, #12]
 5f4:	mov	r0, #2
 5f8:	str	r0, [r4, r8, lsl #2]
 5fc:	ldr	r0, [r1, #8]
 600:	sub	r0, r0, #1
 604:	str	r0, [r1, #8]
 608:	b	610 <str_set_remove+0xa8>
 60c:	mov	r7, #0
 610:	mov	r0, r7
 614:	sub	sp, fp, #28
 618:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000061c <str_set_remove_item>:
 61c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
 620:	add	fp, sp, #28
 624:	sub	sp, sp, #28
 628:	mov	r5, r0
 62c:	mov	r0, r1
 630:	mov	sl, r1
 634:	bl	0 <strlen>
 638:	ldr	r4, [r5]
 63c:	cmp	r4, #0
 640:	beq	6d0 <str_set_remove_item+0xb4>
 644:	str	r5, [sp, #12]
 648:	ldr	r5, [r5, #12]
 64c:	mov	r9, r0
 650:	movw	r1, #15186	; 0x3b52
 654:	add	r0, sp, #16
 658:	mov	r3, #0
 65c:	movt	r1, #12137	; 0x2f69
 660:	str	r0, [sp, #4]
 664:	mov	r0, sl
 668:	mov	r2, r9
 66c:	str	r1, [sp]
 670:	bl	0 <cmetrohash64_1>
 674:	ldr	r6, [sp, #16]
 678:	sub	r5, r5, #1
 67c:	b	684 <str_set_remove_item+0x68>
 680:	add	r6, r6, #1
 684:	and	r8, r6, r5
 688:	ldr	r7, [r4, r8, lsl #2]
 68c:	cmp	r7, #2
 690:	beq	680 <str_set_remove_item+0x64>
 694:	cmp	r7, #0
 698:	beq	6d0 <str_set_remove_item+0xb4>
 69c:	mov	r0, sl
 6a0:	mov	r1, r7
 6a4:	mov	r2, r9
 6a8:	bl	0 <strncmp>
 6ac:	cmp	r0, #0
 6b0:	bne	680 <str_set_remove_item+0x64>
 6b4:	ldr	r1, [sp, #12]
 6b8:	mov	r0, #2
 6bc:	str	r0, [r4, r8, lsl #2]
 6c0:	ldr	r0, [r1, #8]
 6c4:	sub	r0, r0, #1
 6c8:	str	r0, [r1, #8]
 6cc:	b	6d4 <str_set_remove_item+0xb8>
 6d0:	mov	r7, #0
 6d4:	mov	r0, r7
 6d8:	sub	sp, fp, #28
 6dc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

000006e0 <str_set_visit>:
 6e0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
 6e4:	add	fp, sp, #24
 6e8:	mov	r6, r0
 6ec:	ldr	r0, [r0, #12]
 6f0:	cmp	r0, #0
 6f4:	popeq	{r4, r5, r6, r7, r8, sl, fp, pc}
 6f8:	ldr	r7, [r6]
 6fc:	mov	r8, r2
 700:	mov	r5, r1
 704:	mov	r4, #0
 708:	ldr	r1, [r7, r4, lsl #2]
 70c:	orr	r2, r1, #2
 710:	cmp	r2, #2
 714:	beq	724 <str_set_visit+0x44>
 718:	mov	r0, r8
 71c:	blx	r5
 720:	ldr	r0, [r6, #12]
 724:	add	r4, r4, #1
 728:	cmp	r4, r0
 72c:	bcc	708 <str_set_visit+0x28>
 730:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
