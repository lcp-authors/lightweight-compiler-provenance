
../repos/dvidelabs-flatcc-3b39ef7/test/json_test/CMakeFiles/json_test_uql.dir/__/__/src/runtime/emitter.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <flatcc_emitter_recycle_page>:
   0:	mov	ip, sp
   4:	sub	sp, sp, #8
   8:	str	ip, [sp]
   c:	str	lr, [sp, #4]
  10:	ldr	r2, [r0]
  14:	cmp	r1, r2
  18:	beq	6c <flatcc_emitter_recycle_page+0x6c>
  1c:	ldr	r2, [r0, #4]
  20:	cmp	r1, r2
  24:	beq	6c <flatcc_emitter_recycle_page+0x6c>
  28:	ldr	r3, [r1, #2944]	; 0xb80
  2c:	ldr	r2, [r1, #2948]	; 0xb84
  30:	str	r2, [r3, #2948]	; 0xb84
  34:	ldr	r3, [r1, #2948]	; 0xb84
  38:	ldr	ip, [r1, #2944]	; 0xb80
  3c:	str	ip, [r3, #2944]	; 0xb80
  40:	ldr	r2, [r0]
  44:	ldr	ip, [r2, #2948]	; 0xb84
  48:	str	ip, [r1, #2948]	; 0xb84
  4c:	ldr	r0, [r0]
  50:	str	r0, [r1, #2944]	; 0xb80
  54:	ldr	r3, [r1, #2948]	; 0xb84
  58:	str	r1, [r3, #2944]	; 0xb80
  5c:	ldr	r0, [r1, #2944]	; 0xb80
  60:	str	r1, [r0, #2948]	; 0xb84
  64:	mov	r0, #0
  68:	b	70 <flatcc_emitter_recycle_page+0x70>
  6c:	mvn	r0, #0
  70:	ldr	lr, [sp, #4]
  74:	add	sp, sp, #8
  78:	bx	lr

0000007c <flatcc_emitter_reset>:
  7c:	mov	ip, sp
  80:	sub	sp, sp, #16
  84:	str	ip, [sp]
  88:	str	lr, [sp, #4]
  8c:	str	r4, [sp, #8]
  90:	mov	r4, r0
  94:	ldr	r0, [r4]
  98:	cmp	r0, #0
  9c:	beq	158 <flatcc_emitter_reset+0xdc>
  a0:	str	r0, [r4, #4]
  a4:	ldr	r1, [r4]
  a8:	add	r2, r1, #1472	; 0x5c0
  ac:	str	r2, [r4, #8]
  b0:	str	r2, [r4, #16]
  b4:	mov	ip, #1472	; 0x5c0
  b8:	str	ip, [r4, #12]
  bc:	mov	r0, #1472	; 0x5c0
  c0:	str	r0, [r4, #20]
  c4:	ldr	r0, [r4]
  c8:	ldr	r3, [r4, #12]
  cc:	rsb	ip, r3, #0
  d0:	str	ip, [r0, #2952]	; 0xb88
  d4:	ldr	r3, [r4, #32]
  d8:	cmp	r3, #0
  dc:	bne	e8 <flatcc_emitter_reset+0x6c>
  e0:	ldr	r1, [r4, #24]
  e4:	str	r1, [r4, #32]
  e8:	ldr	r2, [r4, #24]
  ec:	lsr	r0, r2, #2
  f0:	ldr	r3, [r4, #32]
  f4:	add	r2, r3, r3, lsl #1
  f8:	add	r3, r0, r2, lsr #2
  fc:	str	r3, [r4, #32]
 100:	mov	ip, #0
 104:	str	ip, [r4, #24]
 108:	ldr	r3, [r4, #32]
 10c:	lsl	ip, r3, #1
 110:	ldr	r1, [r4, #28]
 114:	cmp	ip, r1
 118:	bcs	158 <flatcc_emitter_reset+0xdc>
 11c:	ldr	r1, [r4, #4]
 120:	ldr	r0, [r1, #2944]	; 0xb80
 124:	ldr	r2, [r4]
 128:	cmp	r0, r2
 12c:	beq	158 <flatcc_emitter_reset+0xdc>
 130:	ldr	r2, [r0, #2944]	; 0xb80
 134:	str	r2, [r1, #2944]	; 0xb80
 138:	ldr	r2, [r0, #2944]	; 0xb80
 13c:	ldr	r1, [r4, #4]
 140:	str	r1, [r2, #2948]	; 0xb84
 144:	bl	0 <free>
 148:	ldr	r2, [r4, #28]
 14c:	sub	r1, r2, #2944	; 0xb80
 150:	str	r1, [r4, #28]
 154:	b	108 <flatcc_emitter_reset+0x8c>
 158:	ldr	r4, [sp, #8]
 15c:	ldr	lr, [sp, #4]
 160:	add	sp, sp, #16
 164:	bx	lr

00000168 <flatcc_emitter_clear>:
 168:	mov	ip, sp
 16c:	sub	sp, sp, #16
 170:	str	ip, [sp]
 174:	str	lr, [sp, #4]
 178:	str	r4, [sp, #8]
 17c:	str	r5, [sp, #12]
 180:	mov	r4, r0
 184:	ldr	r5, [r4]
 188:	cmp	r5, #0
 18c:	beq	1d0 <flatcc_emitter_clear+0x68>
 190:	ldr	r3, [r5, #2948]	; 0xb84
 194:	mov	r1, #0
 198:	str	r1, [r3, #2944]	; 0xb80
 19c:	ldr	r0, [r5, #2944]	; 0xb80
 1a0:	cmp	r0, #0
 1a4:	beq	1b8 <flatcc_emitter_clear+0x50>
 1a8:	mov	r5, r0
 1ac:	ldr	r0, [r5, #2948]	; 0xb84
 1b0:	bl	0 <free>
 1b4:	b	19c <flatcc_emitter_clear+0x34>
 1b8:	mov	r0, r5
 1bc:	bl	0 <free>
 1c0:	mov	r1, #0
 1c4:	mov	r2, #36	; 0x24
 1c8:	mov	r0, r4
 1cc:	bl	0 <memset>
 1d0:	ldr	r4, [sp, #8]
 1d4:	ldr	r5, [sp, #12]
 1d8:	ldr	lr, [sp, #4]
 1dc:	add	sp, sp, #16
 1e0:	bx	lr

000001e4 <flatcc_emitter>:
 1e4:	mov	ip, sp
 1e8:	sub	sp, sp, #40	; 0x28
 1ec:	str	ip, [sp]
 1f0:	str	lr, [sp, #4]
 1f4:	str	r4, [sp, #8]
 1f8:	str	r5, [sp, #12]
 1fc:	str	r6, [sp, #16]
 200:	str	r7, [sp, #20]
 204:	str	r8, [sp, #24]
 208:	str	r9, [sp, #28]
 20c:	str	sl, [sp, #32]
 210:	ldr	r5, [ip]
 214:	mov	r7, r2
 218:	mov	r6, r1
 21c:	mov	r8, r0
 220:	ldr	r0, [r8, #24]
 224:	add	r1, r0, r5
 228:	str	r1, [r8, #24]
 22c:	cmp	r3, #0
 230:	bge	3fc <flatcc_emitter+0x218>
 234:	ldr	r2, [r8, #12]
 238:	cmp	r5, r2
 23c:	bhi	260 <flatcc_emitter+0x7c>
 240:	ldr	ip, [r8, #8]
 244:	sub	r3, ip, r5
 248:	str	r3, [r8, #8]
 24c:	ldr	r1, [r8, #12]
 250:	sub	r1, r1, r5
 254:	str	r1, [r8, #12]
 258:	ldr	r4, [r8, #8]
 25c:	b	420 <flatcc_emitter+0x23c>
 260:	add	r5, r6, r7, lsl #3
 264:	mov	ip, r7
 268:	sub	r7, ip, #1
 26c:	cmp	ip, #0
 270:	beq	5d8 <flatcc_emitter+0x3f4>
 274:	sub	r5, r5, #8
 278:	ldr	r3, [r5]
 27c:	ldr	r4, [r5, #4]
 280:	mov	r9, r8
 284:	add	r6, r3, r4
 288:	cmp	r4, #0
 28c:	beq	3e8 <flatcc_emitter+0x204>
 290:	mov	r2, r4
 294:	ldr	r0, [r9, #12]
 298:	cmp	r2, r0
 29c:	bls	3b8 <flatcc_emitter+0x1d4>
 2a0:	mov	r2, r0
 2a4:	cmp	r2, #0
 2a8:	bne	3b8 <flatcc_emitter+0x1d4>
 2ac:	ldr	r2, [r9]
 2b0:	cmp	r2, #0
 2b4:	beq	2e4 <flatcc_emitter+0x100>
 2b8:	ldr	r3, [r2, #2948]	; 0xb84
 2bc:	ldr	r0, [r9, #4]
 2c0:	cmp	r3, r0
 2c4:	beq	2e4 <flatcc_emitter+0x100>
 2c8:	ldr	r2, [r2, #2952]	; 0xb88
 2cc:	sub	ip, r2, #2944	; 0xb80
 2d0:	str	ip, [r3, #2952]	; 0xb88
 2d4:	ldr	r3, [r9]
 2d8:	ldr	r2, [r3, #2948]	; 0xb84
 2dc:	str	r2, [r9]
 2e0:	b	338 <flatcc_emitter+0x154>
 2e4:	movw	r0, #2956	; 0xb8c
 2e8:	bl	0 <malloc>
 2ec:	cmp	r0, #0
 2f0:	bne	2fc <flatcc_emitter+0x118>
 2f4:	mvn	r1, #0
 2f8:	b	3a8 <flatcc_emitter+0x1c4>
 2fc:	ldr	r1, [r9, #28]
 300:	add	r1, r1, #2944	; 0xb80
 304:	str	r1, [r9, #28]
 308:	ldr	r2, [r9]
 30c:	cmp	r2, #0
 310:	beq	368 <flatcc_emitter+0x184>
 314:	ldr	r3, [r9, #4]
 318:	str	r3, [r0, #2948]	; 0xb84
 31c:	ldr	r1, [r9]
 320:	str	r1, [r0, #2944]	; 0xb80
 324:	ldr	ip, [r9]
 328:	str	r0, [ip, #2948]	; 0xb84
 32c:	ldr	ip, [r9, #4]
 330:	str	r0, [ip, #2944]	; 0xb80
 334:	str	r0, [r9]
 338:	ldr	r2, [r9]
 33c:	add	ip, r2, #2944	; 0xb80
 340:	str	ip, [r9, #8]
 344:	mov	r3, #2944	; 0xb80
 348:	str	r3, [r9, #12]
 34c:	ldr	r3, [r9]
 350:	ldr	r0, [r3, #2944]	; 0xb80
 354:	ldr	ip, [r0, #2952]	; 0xb88
 358:	sub	r2, ip, #2944	; 0xb80
 35c:	str	r2, [r3, #2952]	; 0xb88
 360:	mov	r1, #0
 364:	b	3a8 <flatcc_emitter+0x1c4>
 368:	str	r0, [r9]
 36c:	str	r0, [r9, #4]
 370:	str	r0, [r0, #2944]	; 0xb80
 374:	str	r0, [r0, #2948]	; 0xb84
 378:	ldr	r3, [r9]
 37c:	add	r3, r3, #1472	; 0x5c0
 380:	str	r3, [r9, #8]
 384:	str	r3, [r9, #16]
 388:	mov	r1, #1472	; 0x5c0
 38c:	str	r1, [r9, #12]
 390:	rsb	ip, r1, #2944	; 0xb80
 394:	str	ip, [r9, #20]
 398:	ldr	ip, [r9, #12]
 39c:	rsb	r1, ip, #0
 3a0:	str	r1, [r0, #2952]	; 0xb88
 3a4:	mov	r1, #0
 3a8:	cmp	r1, #0
 3ac:	beq	288 <flatcc_emitter+0xa4>
 3b0:	mvn	r1, #0
 3b4:	b	3ec <flatcc_emitter+0x208>
 3b8:	ldr	r3, [r9, #8]
 3bc:	sub	r1, r3, r2
 3c0:	str	r1, [r9, #8]
 3c4:	ldr	r3, [r9, #12]
 3c8:	sub	r3, r3, r2
 3cc:	str	r3, [r9, #12]
 3d0:	sub	r6, r6, r2
 3d4:	sub	r4, r4, r2
 3d8:	ldr	r0, [r9, #8]
 3dc:	mov	r1, r6
 3e0:	bl	0 <memcpy>
 3e4:	b	288 <flatcc_emitter+0xa4>
 3e8:	mov	r1, #0
 3ec:	cmp	r1, #0
 3f0:	beq	264 <flatcc_emitter+0x80>
 3f4:	mvn	r0, #0
 3f8:	b	5dc <flatcc_emitter+0x3f8>
 3fc:	ldr	r3, [r8, #20]
 400:	cmp	r5, r3
 404:	bhi	458 <flatcc_emitter+0x274>
 408:	ldr	r4, [r8, #16]
 40c:	add	r1, r4, r5
 410:	str	r1, [r8, #16]
 414:	ldr	r2, [r8, #20]
 418:	sub	r1, r2, r5
 41c:	str	r1, [r8, #20]
 420:	mov	r0, r7
 424:	sub	r7, r0, #1
 428:	cmp	r0, #0
 42c:	beq	450 <flatcc_emitter+0x26c>
 430:	ldr	r1, [r6]
 434:	ldr	r2, [r6, #4]
 438:	mov	r0, r4
 43c:	bl	0 <memcpy>
 440:	ldr	r0, [r6, #4]
 444:	add	r4, r4, r0
 448:	add	r6, r6, #8
 44c:	b	420 <flatcc_emitter+0x23c>
 450:	mov	r0, #0
 454:	b	5dc <flatcc_emitter+0x3f8>
 458:	mov	ip, r7
 45c:	sub	r7, ip, #1
 460:	cmp	ip, #0
 464:	beq	5d8 <flatcc_emitter+0x3f4>
 468:	ldr	r5, [r6]
 46c:	ldr	r4, [r6, #4]
 470:	mov	r9, r8
 474:	cmp	r4, #0
 478:	beq	5bc <flatcc_emitter+0x3d8>
 47c:	mov	sl, r4
 480:	ldr	ip, [r9, #20]
 484:	cmp	sl, ip
 488:	bls	588 <flatcc_emitter+0x3a4>
 48c:	mov	sl, ip
 490:	cmp	sl, #0
 494:	bne	588 <flatcc_emitter+0x3a4>
 498:	ldr	r1, [r9, #4]
 49c:	cmp	r1, #0
 4a0:	beq	4bc <flatcc_emitter+0x2d8>
 4a4:	ldr	r3, [r1, #2944]	; 0xb80
 4a8:	ldr	r2, [r9]
 4ac:	cmp	r3, r2
 4b0:	beq	4bc <flatcc_emitter+0x2d8>
 4b4:	str	r3, [r9, #4]
 4b8:	b	50c <flatcc_emitter+0x328>
 4bc:	movw	r0, #2956	; 0xb8c
 4c0:	bl	0 <malloc>
 4c4:	cmp	r0, #0
 4c8:	bne	4d4 <flatcc_emitter+0x2f0>
 4cc:	mvn	r0, #0
 4d0:	b	578 <flatcc_emitter+0x394>
 4d4:	ldr	r1, [r9, #28]
 4d8:	add	ip, r1, #2944	; 0xb80
 4dc:	str	ip, [r9, #28]
 4e0:	ldr	r2, [r9, #4]
 4e4:	cmp	r2, #0
 4e8:	beq	538 <flatcc_emitter+0x354>
 4ec:	str	r2, [r0, #2948]	; 0xb84
 4f0:	ldr	r3, [r9]
 4f4:	str	r3, [r0, #2944]	; 0xb80
 4f8:	ldr	r1, [r9]
 4fc:	str	r0, [r1, #2948]	; 0xb84
 500:	ldr	r1, [r9, #4]
 504:	str	r0, [r1, #2944]	; 0xb80
 508:	str	r0, [r9, #4]
 50c:	ldr	r0, [r9, #4]
 510:	str	r0, [r9, #16]
 514:	mov	r1, #2944	; 0xb80
 518:	str	r1, [r9, #20]
 51c:	ldr	r2, [r9, #4]
 520:	ldr	r1, [r2, #2948]	; 0xb84
 524:	ldr	r3, [r1, #2952]	; 0xb88
 528:	add	r0, r3, #2944	; 0xb80
 52c:	str	r0, [r2, #2952]	; 0xb88
 530:	mov	r0, #0
 534:	b	578 <flatcc_emitter+0x394>
 538:	str	r0, [r9]
 53c:	str	r0, [r9, #4]
 540:	str	r0, [r0, #2944]	; 0xb80
 544:	str	r0, [r0, #2948]	; 0xb84
 548:	ldr	ip, [r9]
 54c:	add	r1, ip, #1472	; 0x5c0
 550:	str	r1, [r9, #8]
 554:	str	r1, [r9, #16]
 558:	mov	r1, #1472	; 0x5c0
 55c:	str	r1, [r9, #12]
 560:	rsb	r2, r1, #2944	; 0xb80
 564:	str	r2, [r9, #20]
 568:	ldr	r1, [r9, #12]
 56c:	rsb	r3, r1, #0
 570:	str	r3, [r0, #2952]	; 0xb88
 574:	mov	r0, #0
 578:	cmp	r0, #0
 57c:	beq	474 <flatcc_emitter+0x290>
 580:	mvn	ip, #0
 584:	b	5c0 <flatcc_emitter+0x3dc>
 588:	ldr	r0, [r9, #16]
 58c:	mov	r2, sl
 590:	mov	r1, r5
 594:	bl	0 <memcpy>
 598:	sub	r4, r4, sl
 59c:	add	r5, r5, sl
 5a0:	ldr	ip, [r9, #16]
 5a4:	add	r3, ip, sl
 5a8:	str	r3, [r9, #16]
 5ac:	ldr	r2, [r9, #20]
 5b0:	sub	ip, r2, sl
 5b4:	str	ip, [r9, #20]
 5b8:	b	474 <flatcc_emitter+0x290>
 5bc:	mov	ip, #0
 5c0:	cmp	ip, #0
 5c4:	beq	5d0 <flatcc_emitter+0x3ec>
 5c8:	mvn	r0, #0
 5cc:	b	5dc <flatcc_emitter+0x3f8>
 5d0:	add	r6, r6, #8
 5d4:	b	458 <flatcc_emitter+0x274>
 5d8:	mov	r0, #0
 5dc:	ldr	r4, [sp, #8]
 5e0:	ldr	r5, [sp, #12]
 5e4:	ldr	r6, [sp, #16]
 5e8:	ldr	r7, [sp, #20]
 5ec:	ldr	r8, [sp, #24]
 5f0:	ldr	r9, [sp, #28]
 5f4:	ldr	sl, [sp, #32]
 5f8:	ldr	lr, [sp, #4]
 5fc:	add	sp, sp, #40	; 0x28
 600:	bx	lr

00000604 <flatcc_emitter_copy_buffer>:
 604:	mov	ip, sp
 608:	sub	sp, sp, #24
 60c:	str	ip, [sp]
 610:	str	lr, [sp, #4]
 614:	str	r4, [sp, #8]
 618:	str	r5, [sp, #12]
 61c:	str	r6, [sp, #16]
 620:	mov	r5, r0
 624:	mov	r0, r2
 628:	mov	r4, r1
 62c:	ldr	r2, [r5, #24]
 630:	cmp	r0, r2
 634:	bcs	640 <flatcc_emitter_copy_buffer+0x3c>
 638:	mov	r4, #0
 63c:	b	6d0 <flatcc_emitter_copy_buffer+0xcc>
 640:	ldr	r1, [r5]
 644:	cmp	r1, #0
 648:	bne	654 <flatcc_emitter_copy_buffer+0x50>
 64c:	mov	r4, #0
 650:	b	6d0 <flatcc_emitter_copy_buffer+0xcc>
 654:	ldr	r3, [r5, #4]
 658:	cmp	r1, r3
 65c:	bne	670 <flatcc_emitter_copy_buffer+0x6c>
 660:	ldr	r1, [r5, #8]
 664:	mov	r0, r4
 668:	bl	0 <memcpy>
 66c:	b	6d0 <flatcc_emitter_copy_buffer+0xcc>
 670:	ldr	r1, [r5, #12]
 674:	rsb	r6, r1, #2944	; 0xb80
 678:	ldr	r1, [r5, #8]
 67c:	mov	r2, r6
 680:	mov	r0, r4
 684:	bl	0 <memcpy>
 688:	add	r4, r4, r6
 68c:	ldr	ip, [r5]
 690:	ldr	r6, [ip, #2944]	; 0xb80
 694:	ldr	r2, [r5, #4]
 698:	cmp	r6, r2
 69c:	beq	6bc <flatcc_emitter_copy_buffer+0xb8>
 6a0:	mov	r2, #2944	; 0xb80
 6a4:	mov	r1, r6
 6a8:	mov	r0, r4
 6ac:	bl	0 <memcpy>
 6b0:	add	r4, r4, #2944	; 0xb80
 6b4:	ldr	r6, [r6, #2944]	; 0xb80
 6b8:	b	694 <flatcc_emitter_copy_buffer+0x90>
 6bc:	ldr	r3, [r5, #20]
 6c0:	rsb	r2, r3, #2944	; 0xb80
 6c4:	mov	r1, r6
 6c8:	mov	r0, r4
 6cc:	bl	0 <memcpy>
 6d0:	mov	r0, r4
 6d4:	ldr	r4, [sp, #8]
 6d8:	ldr	r5, [sp, #12]
 6dc:	ldr	r6, [sp, #16]
 6e0:	ldr	lr, [sp, #4]
 6e4:	add	sp, sp, #24
 6e8:	bx	lr
