
../compcert-repos/stcorp-coda-3a25f25/CMakeFiles/codacmp.dir/tools/codacmp/codacmp.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <main>:
       0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
       4:	add	fp, sp, #28
       8:	sub	sp, sp, #44	; 0x2c
       c:	sub	sp, sp, #1024	; 0x400
      10:	mov	r6, r0
      14:	movw	r9, #0
      18:	mov	r0, #0
      1c:	movt	r9, #0
      20:	cmp	r6, #1
      24:	str	r0, [r9]
      28:	beq	6b4 <main+0x6b4>
      2c:	ldr	r4, [r1, #4]
      30:	mov	r5, r1
      34:	movw	r1, #0
      38:	movt	r1, #0
      3c:	mov	r0, r4
      40:	bl	0 <strcmp>
      44:	cmp	r0, #0
      48:	beq	6b4 <main+0x6b4>
      4c:	movw	r1, #0
      50:	mov	r0, r4
      54:	movt	r1, #0
      58:	bl	0 <strcmp>
      5c:	cmp	r0, #0
      60:	beq	6b4 <main+0x6b4>
      64:	movw	r1, #0
      68:	mov	r0, r4
      6c:	movt	r1, #0
      70:	bl	0 <strcmp>
      74:	cmp	r0, #0
      78:	beq	6c0 <main+0x6c0>
      7c:	movw	r1, #0
      80:	mov	r0, r4
      84:	movt	r1, #0
      88:	bl	0 <strcmp>
      8c:	cmp	r0, #0
      90:	beq	6c0 <main+0x6c0>
      94:	movw	r0, #0
      98:	cmp	r6, #3
      9c:	vmov.i32	q8, #0	; 0x00000000
      a0:	movt	r0, #0
      a4:	vst1.32	{d16-d17}, [r0]
      a8:	blt	c4 <main+0xc4>
      ac:	ldr	r0, [r5, #4]
      b0:	movw	r1, #0
      b4:	movt	r1, #0
      b8:	bl	0 <strcmp>
      bc:	cmp	r0, #0
      c0:	beq	2b4 <main+0x2b4>
      c4:	ldr	r0, [r5]
      c8:	movw	r2, #0
      cc:	mov	r1, #0
      d0:	movt	r2, #0
      d4:	bl	0 <coda_set_definition_path_conditional>
      d8:	mov	sl, #1
      dc:	cmp	r0, #0
      e0:	bne	6cc <main+0x6cc>
      e4:	cmp	sl, r6
      e8:	bge	2c8 <main+0x2c8>
      ec:	movw	r7, #0
      f0:	mov	r0, #0
      f4:	mov	r4, #1
      f8:	str	r0, [sp, #8]
      fc:	movt	r7, #0
     100:	mov	r0, #1
     104:	str	r0, [sp, #12]
     108:	b	118 <main+0x118>
     10c:	str	r1, [sp, #8]
     110:	mov	sl, r0
     114:	b	2a4 <main+0x2a4>
     118:	ldr	r8, [r5, sl, lsl #2]
     11c:	mov	r1, r7
     120:	mov	r0, r8
     124:	bl	0 <strcmp>
     128:	cmp	r0, #0
     12c:	beq	294 <main+0x294>
     130:	movw	r1, #0
     134:	mov	r0, r8
     138:	movt	r1, #0
     13c:	bl	0 <strcmp>
     140:	cmp	r0, #0
     144:	beq	294 <main+0x294>
     148:	movw	r1, #0
     14c:	mov	r0, r8
     150:	movt	r1, #0
     154:	bl	0 <strcmp>
     158:	cmp	r0, #0
     15c:	beq	29c <main+0x29c>
     160:	movw	r1, #0
     164:	mov	r0, r8
     168:	movt	r1, #0
     16c:	bl	0 <strcmp>
     170:	cmp	r0, #0
     174:	beq	29c <main+0x29c>
     178:	movw	r1, #0
     17c:	mov	r0, r8
     180:	movt	r1, #0
     184:	bl	0 <strcmp>
     188:	cmp	r0, #0
     18c:	beq	1a8 <main+0x1a8>
     190:	movw	r1, #0
     194:	mov	r0, r8
     198:	movt	r1, #0
     19c:	bl	0 <strcmp>
     1a0:	cmp	r0, #0
     1a4:	bne	1c4 <main+0x1c4>
     1a8:	add	r0, sl, #1
     1ac:	cmp	r0, r6
     1b0:	bge	1c4 <main+0x1c4>
     1b4:	ldr	r1, [r5, r0, lsl #2]
     1b8:	ldrb	r2, [r1]
     1bc:	cmp	r2, #45	; 0x2d
     1c0:	bne	10c <main+0x10c>
     1c4:	movw	r1, #0
     1c8:	mov	r0, r8
     1cc:	movt	r1, #0
     1d0:	bl	0 <strcmp>
     1d4:	cmp	r0, #0
     1d8:	beq	1f4 <main+0x1f4>
     1dc:	movw	r1, #0
     1e0:	mov	r0, r8
     1e4:	movt	r1, #0
     1e8:	bl	0 <strcmp>
     1ec:	cmp	r0, #0
     1f0:	bne	4fc <main+0x4fc>
     1f4:	add	r9, sl, #2
     1f8:	cmp	r9, r6
     1fc:	bge	4fc <main+0x4fc>
     200:	movw	r7, #0
     204:	add	r0, r5, sl, lsl #2
     208:	ldr	r8, [r5, r9, lsl #2]
     20c:	movt	r7, #0
     210:	ldr	r4, [r0, #4]
     214:	ldr	r0, [r7]
     218:	tst	r0, #15
     21c:	bne	25c <main+0x25c>
     220:	mov	sl, #64	; 0x40
     224:	add	r1, sl, r0, lsl #2
     228:	ldr	r0, [r7, #4]
     22c:	bl	0 <realloc>
     230:	cmp	r0, #0
     234:	beq	674 <main+0x674>
     238:	str	r0, [r7, #4]
     23c:	ldr	r1, [r7]
     240:	ldr	r0, [r7, #8]
     244:	add	r1, sl, r1, lsl #2
     248:	bl	0 <realloc>
     24c:	cmp	r0, #0
     250:	beq	680 <main+0x680>
     254:	str	r0, [r7, #8]
     258:	ldr	r0, [r7]
     25c:	ldr	r1, [r7, #4]
     260:	mov	sl, r9
     264:	str	r4, [r1, r0, lsl #2]
     268:	mov	r4, #1
     26c:	ldr	r1, [r7, #8]
     270:	str	r8, [r1, r0, lsl #2]
     274:	add	r0, r0, #1
     278:	str	r0, [r7]
     27c:	movw	r7, #0
     280:	movt	r7, #0
     284:	mov	r9, r7
     288:	movw	r7, #0
     28c:	movt	r7, #0
     290:	b	2a4 <main+0x2a4>
     294:	str	r4, [r9]
     298:	b	2a4 <main+0x2a4>
     29c:	mov	r0, #0
     2a0:	str	r0, [sp, #12]
     2a4:	add	sl, sl, #1
     2a8:	cmp	sl, r6
     2ac:	blt	118 <main+0x118>
     2b0:	b	2d8 <main+0x2d8>
     2b4:	ldr	r0, [r5, #8]
     2b8:	bl	0 <coda_set_definition_path>
     2bc:	mov	sl, #3
     2c0:	cmp	sl, r6
     2c4:	blt	ec <main+0xec>
     2c8:	mov	r0, #1
     2cc:	str	r0, [sp, #12]
     2d0:	mov	r0, #0
     2d4:	str	r0, [sp, #8]
     2d8:	sub	r0, r6, #2
     2dc:	cmp	sl, r0
     2e0:	bne	508 <main+0x508>
     2e4:	bl	0 <coda_init>
     2e8:	cmp	r0, #0
     2ec:	bne	6cc <main+0x6cc>
     2f0:	mov	r0, #0
     2f4:	bl	0 <coda_set_option_perform_boundary_checks>
     2f8:	ldr	r0, [sp, #12]
     2fc:	bl	0 <coda_set_option_perform_conversions>
     300:	add	r0, r5, r6, lsl #2
     304:	ldr	r5, [r5, sl, lsl #2]
     308:	sub	r1, fp, #36	; 0x24
     30c:	ldr	r4, [r0, #-4]
     310:	mov	r0, r5
     314:	bl	0 <coda_open>
     318:	cmp	r0, #0
     31c:	beq	358 <main+0x358>
     320:	bl	0 <coda_get_errno>
     324:	ldr	r0, [r0]
     328:	cmn	r0, #21
     32c:	bne	534 <main+0x534>
     330:	mov	r0, #0
     334:	bl	0 <coda_set_option_use_mmap>
     338:	sub	r1, fp, #36	; 0x24
     33c:	mov	r0, r5
     340:	bl	0 <coda_open>
     344:	mov	r5, r0
     348:	mov	r0, #1
     34c:	bl	0 <coda_set_option_use_mmap>
     350:	cmp	r5, #0
     354:	bne	534 <main+0x534>
     358:	movw	r6, #0
     35c:	movt	r6, #0
     360:	ldr	r0, [r6]
     364:	cmp	r0, #0
     368:	beq	430 <main+0x430>
     36c:	ldr	r0, [fp, #-36]	; 0xffffffdc
     370:	add	r1, sp, #536	; 0x218
     374:	bl	0 <coda_get_product_root_type>
     378:	cmp	r0, #0
     37c:	bne	3f0 <main+0x3f0>
     380:	ldr	r0, [sp, #536]	; 0x218
     384:	bl	0 <coda_tree_node_new>
     388:	cmp	r0, #0
     38c:	str	r0, [r6, #12]
     390:	beq	3f0 <main+0x3f0>
     394:	ldr	r1, [r6]
     398:	cmp	r1, #1
     39c:	blt	430 <main+0x430>
     3a0:	ldmib	r6, {r1, r2}
     3a4:	mov	r3, #0
     3a8:	ldr	r2, [r2]
     3ac:	ldr	r1, [r1]
     3b0:	bl	0 <coda_tree_node_add_item_for_path>
     3b4:	cmp	r0, #0
     3b8:	bne	3f0 <main+0x3f0>
     3bc:	mov	r5, #1
     3c0:	ldr	r0, [r6]
     3c4:	cmp	r5, r0
     3c8:	bge	430 <main+0x430>
     3cc:	ldmib	r6, {r1, r2}
     3d0:	ldr	r0, [r6, #12]
     3d4:	mov	r3, #0
     3d8:	ldr	r2, [r2, r5, lsl #2]
     3dc:	ldr	r1, [r1, r5, lsl #2]
     3e0:	bl	0 <coda_tree_node_add_item_for_path>
     3e4:	add	r5, r5, #1
     3e8:	cmp	r0, #0
     3ec:	beq	3c0 <main+0x3c0>
     3f0:	movw	r0, #0
     3f4:	movt	r0, #0
     3f8:	ldr	r4, [r0]
     3fc:	movw	r0, #0
     400:	movt	r0, #0
     404:	ldr	r5, [r0]
     408:	bl	0 <coda_get_errno>
     40c:	ldr	r0, [r0]
     410:	bl	0 <coda_errno_to_string>
     414:	movw	r1, #0
     418:	mov	r3, r0
     41c:	mov	r0, r5
     420:	mov	r2, r4
     424:	movt	r1, #0
     428:	bl	0 <fprintf>
     42c:	b	620 <main+0x620>
     430:	sub	r1, fp, #40	; 0x28
     434:	mov	r0, r4
     438:	bl	0 <coda_open>
     43c:	cmp	r0, #0
     440:	beq	47c <main+0x47c>
     444:	bl	0 <coda_get_errno>
     448:	ldr	r0, [r0]
     44c:	cmn	r0, #21
     450:	bne	5dc <main+0x5dc>
     454:	mov	r0, #0
     458:	bl	0 <coda_set_option_use_mmap>
     45c:	sub	r1, fp, #40	; 0x28
     460:	mov	r0, r4
     464:	bl	0 <coda_open>
     468:	mov	r4, r0
     46c:	mov	r0, #1
     470:	bl	0 <coda_set_option_use_mmap>
     474:	cmp	r4, #0
     478:	bne	5dc <main+0x5dc>
     47c:	ldr	r1, [fp, #-36]	; 0xffffffdc
     480:	add	r0, sp, #536	; 0x218
     484:	bl	0 <coda_cursor_set_product>
     488:	cmp	r0, #0
     48c:	bne	580 <main+0x580>
     490:	ldr	r1, [fp, #-40]	; 0xffffffd8
     494:	add	r0, sp, #16
     498:	bl	0 <coda_cursor_set_product>
     49c:	cmp	r0, #0
     4a0:	bne	590 <main+0x590>
     4a4:	ldr	r4, [sp, #8]
     4a8:	cmp	r4, #0
     4ac:	beq	4d8 <main+0x4d8>
     4b0:	add	r0, sp, #536	; 0x218
     4b4:	mov	r1, r4
     4b8:	bl	0 <coda_cursor_goto>
     4bc:	cmp	r0, #0
     4c0:	bne	580 <main+0x580>
     4c4:	add	r0, sp, #16
     4c8:	mov	r1, r4
     4cc:	bl	0 <coda_cursor_goto>
     4d0:	cmp	r0, #0
     4d4:	bne	590 <main+0x590>
     4d8:	add	r0, sp, #536	; 0x218
     4dc:	add	r1, sp, #16
     4e0:	bl	8d4 <compare_data>
     4e4:	mov	r4, r0
     4e8:	ldr	r0, [fp, #-36]	; 0xffffffdc
     4ec:	bl	0 <coda_close>
     4f0:	ldr	r0, [fp, #-40]	; 0xffffffd8
     4f4:	bl	0 <coda_close>
     4f8:	b	624 <main+0x624>
     4fc:	ldrb	r0, [r8]
     500:	cmp	r0, #45	; 0x2d
     504:	bne	2d8 <main+0x2d8>
     508:	movw	r0, #0
     50c:	mov	r1, #25
     510:	mov	r2, #1
     514:	movt	r0, #0
     518:	ldr	r3, [r0]
     51c:	movw	r0, #0
     520:	movt	r0, #0
     524:	bl	0 <fwrite>
     528:	bl	700 <print_help>
     52c:	mov	r0, #1
     530:	bl	0 <exit>
     534:	movw	r0, #0
     538:	movt	r0, #0
     53c:	ldr	r4, [r0]
     540:	movw	r0, #0
     544:	movt	r0, #0
     548:	ldr	r5, [r0]
     54c:	bl	0 <coda_get_errno>
     550:	ldr	r0, [r0]
     554:	bl	0 <coda_errno_to_string>
     558:	movw	r1, #0
     55c:	mov	r3, r0
     560:	mov	r0, r5
     564:	mov	r2, r4
     568:	movt	r1, #0
     56c:	bl	0 <fprintf>
     570:	movw	r6, #0
     574:	mvn	r4, #0
     578:	movt	r6, #0
     57c:	b	624 <main+0x624>
     580:	movw	r0, #0
     584:	movt	r0, #0
     588:	ldr	r4, [r0]
     58c:	b	59c <main+0x59c>
     590:	movw	r0, #0
     594:	movt	r0, #0
     598:	ldr	r4, [r0, #4]
     59c:	movw	r0, #0
     5a0:	movt	r0, #0
     5a4:	ldr	r5, [r0]
     5a8:	bl	0 <coda_get_errno>
     5ac:	ldr	r0, [r0]
     5b0:	bl	0 <coda_errno_to_string>
     5b4:	movw	r1, #0
     5b8:	mov	r3, r0
     5bc:	mov	r0, r5
     5c0:	mov	r2, r4
     5c4:	movt	r1, #0
     5c8:	bl	0 <fprintf>
     5cc:	ldr	r0, [fp, #-36]	; 0xffffffdc
     5d0:	bl	0 <coda_close>
     5d4:	ldr	r0, [fp, #-40]	; 0xffffffd8
     5d8:	b	61c <main+0x61c>
     5dc:	movw	r0, #0
     5e0:	movt	r0, #0
     5e4:	ldr	r4, [r0, #4]
     5e8:	movw	r0, #0
     5ec:	movt	r0, #0
     5f0:	ldr	r5, [r0]
     5f4:	bl	0 <coda_get_errno>
     5f8:	ldr	r0, [r0]
     5fc:	bl	0 <coda_errno_to_string>
     600:	movw	r1, #0
     604:	mov	r3, r0
     608:	mov	r0, r5
     60c:	mov	r2, r4
     610:	movt	r1, #0
     614:	bl	0 <fprintf>
     618:	ldr	r0, [fp, #-36]	; 0xffffffdc
     61c:	bl	0 <coda_close>
     620:	mvn	r4, #0
     624:	bl	0 <coda_done>
     628:	ldr	r0, [r6, #4]
     62c:	cmp	r0, #0
     630:	beq	638 <main+0x638>
     634:	bl	0 <free>
     638:	ldr	r0, [r6, #8]
     63c:	cmp	r0, #0
     640:	beq	648 <main+0x648>
     644:	bl	0 <free>
     648:	ldr	r0, [r6, #12]
     64c:	cmp	r0, #0
     650:	beq	65c <main+0x65c>
     654:	mov	r1, #0
     658:	bl	0 <coda_tree_node_delete>
     65c:	mov	r5, #0
     660:	cmp	r4, #0
     664:	bne	6f8 <main+0x6f8>
     668:	mov	r0, r5
     66c:	sub	sp, fp, #28
     670:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
     674:	ldr	r0, [r7]
     678:	mov	r1, #198	; 0xc6
     67c:	b	688 <main+0x688>
     680:	ldr	r0, [r7]
     684:	mov	r1, #207	; 0xcf
     688:	str	r1, [sp]
     68c:	mov	r1, #64	; 0x40
     690:	movw	r3, #0
     694:	mvn	r5, #0
     698:	add	r2, r1, r0, lsl #2
     69c:	movw	r1, #0
     6a0:	movt	r3, #0
     6a4:	mvn	r0, #0
     6a8:	movt	r1, #0
     6ac:	bl	0 <coda_set_error>
     6b0:	b	668 <main+0x668>
     6b4:	bl	700 <print_help>
     6b8:	mov	r0, #0
     6bc:	bl	0 <exit>
     6c0:	bl	8a0 <print_version>
     6c4:	mov	r0, #0
     6c8:	bl	0 <exit>
     6cc:	movw	r0, #0
     6d0:	movt	r0, #0
     6d4:	ldr	r4, [r0]
     6d8:	bl	0 <coda_get_errno>
     6dc:	ldr	r0, [r0]
     6e0:	bl	0 <coda_errno_to_string>
     6e4:	movw	r1, #0
     6e8:	mov	r2, r0
     6ec:	mov	r0, r4
     6f0:	movt	r1, #0
     6f4:	bl	0 <fprintf>
     6f8:	mov	r0, #1
     6fc:	bl	0 <exit>

00000700 <print_help>:
     700:	push	{fp, lr}
     704:	mov	fp, sp
     708:	movw	r0, #0
     70c:	movt	r0, #0
     710:	bl	0 <puts>
     714:	movw	r0, #0
     718:	movt	r0, #0
     71c:	bl	0 <puts>
     720:	movw	r0, #0
     724:	movt	r0, #0
     728:	bl	0 <puts>
     72c:	movw	r0, #0
     730:	movt	r0, #0
     734:	bl	0 <puts>
     738:	movw	r0, #0
     73c:	movt	r0, #0
     740:	bl	0 <puts>
     744:	movw	r0, #0
     748:	movt	r0, #0
     74c:	bl	0 <puts>
     750:	movw	r0, #0
     754:	movt	r0, #0
     758:	bl	0 <puts>
     75c:	movw	r0, #0
     760:	movt	r0, #0
     764:	bl	0 <puts>
     768:	movw	r0, #0
     76c:	movt	r0, #0
     770:	bl	0 <puts>
     774:	movw	r0, #0
     778:	movt	r0, #0
     77c:	bl	0 <puts>
     780:	movw	r0, #0
     784:	movt	r0, #0
     788:	bl	0 <puts>
     78c:	movw	r0, #0
     790:	movt	r0, #0
     794:	bl	0 <puts>
     798:	movw	r0, #0
     79c:	movt	r0, #0
     7a0:	bl	0 <puts>
     7a4:	movw	r0, #0
     7a8:	movt	r0, #0
     7ac:	bl	0 <puts>
     7b0:	movw	r0, #0
     7b4:	movt	r0, #0
     7b8:	bl	0 <puts>
     7bc:	movw	r0, #0
     7c0:	movt	r0, #0
     7c4:	bl	0 <puts>
     7c8:	movw	r0, #0
     7cc:	movt	r0, #0
     7d0:	bl	0 <puts>
     7d4:	movw	r0, #0
     7d8:	movt	r0, #0
     7dc:	bl	0 <puts>
     7e0:	movw	r0, #0
     7e4:	movt	r0, #0
     7e8:	bl	0 <puts>
     7ec:	movw	r0, #0
     7f0:	movt	r0, #0
     7f4:	bl	0 <puts>
     7f8:	mov	r0, #10
     7fc:	bl	0 <putchar>
     800:	movw	r0, #0
     804:	movt	r0, #0
     808:	bl	0 <puts>
     80c:	movw	r0, #0
     810:	movt	r0, #0
     814:	bl	0 <puts>
     818:	mov	r0, #10
     81c:	bl	0 <putchar>
     820:	movw	r0, #0
     824:	movt	r0, #0
     828:	bl	0 <puts>
     82c:	movw	r0, #0
     830:	movt	r0, #0
     834:	bl	0 <puts>
     838:	mov	r0, #10
     83c:	bl	0 <putchar>
     840:	movw	r0, #0
     844:	movt	r0, #0
     848:	bl	0 <puts>
     84c:	movw	r0, #0
     850:	movt	r0, #0
     854:	bl	0 <puts>
     858:	movw	r0, #0
     85c:	movt	r0, #0
     860:	bl	0 <puts>
     864:	movw	r0, #0
     868:	movt	r0, #0
     86c:	bl	0 <puts>
     870:	movw	r0, #0
     874:	movt	r0, #0
     878:	bl	0 <puts>
     87c:	movw	r0, #0
     880:	movt	r0, #0
     884:	bl	0 <puts>
     888:	movw	r0, #0
     88c:	movt	r0, #0
     890:	bl	0 <puts>
     894:	mov	r0, #10
     898:	pop	{fp, lr}
     89c:	b	0 <putchar>

000008a0 <print_version>:
     8a0:	push	{fp, lr}
     8a4:	mov	fp, sp
     8a8:	bl	0 <coda_get_libcoda_version>
     8ac:	mov	r1, r0
     8b0:	movw	r0, #0
     8b4:	movt	r0, #0
     8b8:	bl	0 <printf>
     8bc:	movw	r0, #0
     8c0:	movt	r0, #0
     8c4:	bl	0 <puts>
     8c8:	mov	r0, #10
     8cc:	pop	{fp, lr}
     8d0:	b	0 <putchar>

000008d4 <compare_data>:
     8d4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
     8d8:	add	fp, sp, #28
     8dc:	sub	sp, sp, #596	; 0x254
     8e0:	mov	sl, r1
     8e4:	add	r1, sp, #20
     8e8:	mov	r4, r0
     8ec:	bl	0 <coda_cursor_get_type_class>
     8f0:	cmp	r0, #0
     8f4:	bne	1858 <compare_data+0xf84>
     8f8:	add	r1, sp, #16
     8fc:	mov	r0, sl
     900:	bl	0 <coda_cursor_get_type_class>
     904:	cmp	r0, #0
     908:	bne	1870 <compare_data+0xf9c>
     90c:	ldr	r0, [sp, #20]
     910:	ldr	r1, [sp, #16]
     914:	cmp	r0, r1
     918:	bne	a68 <compare_data+0x194>
     91c:	cmp	r0, #6
     920:	bhi	17e4 <compare_data+0xf10>
     924:	add	r1, pc, #0
     928:	ldr	pc, [r1, r0, lsl #2]
     92c:	.word	0x00000af0
     930:	.word	0x00000c08
     934:	.word	0x00000948
     938:	.word	0x00000948
     93c:	.word	0x00000e7c
     940:	.word	0x00000c44
     944:	.word	0x00000e08
     948:	sub	r1, fp, #36	; 0x24
     94c:	mov	r0, r4
     950:	bl	0 <coda_cursor_get_read_type>
     954:	cmp	r0, #0
     958:	bne	1858 <compare_data+0xf84>
     95c:	sub	r1, fp, #40	; 0x28
     960:	mov	r0, sl
     964:	bl	0 <coda_cursor_get_read_type>
     968:	cmp	r0, #0
     96c:	bne	1870 <compare_data+0xf9c>
     970:	ldr	r0, [fp, #-36]	; 0xffffffdc
     974:	ldr	r1, [fp, #-40]	; 0xffffffd8
     978:	cmp	r0, r1
     97c:	bne	fac <compare_data+0x6d8>
     980:	cmp	r0, #9
     984:	bhi	1b20 <compare_data+0x124c>
     988:	mov	r1, #1
     98c:	mov	r2, #85	; 0x55
     990:	tst	r2, r1, lsl r0
     994:	bne	1138 <compare_data+0x864>
     998:	mov	r2, #170	; 0xaa
     99c:	tst	r2, r1, lsl r0
     9a0:	beq	15ec <compare_data+0xd18>
     9a4:	add	r1, sp, #32
     9a8:	mov	r0, r4
     9ac:	bl	0 <coda_cursor_read_uint64>
     9b0:	cmp	r0, #0
     9b4:	bne	174c <compare_data+0xe78>
     9b8:	add	r1, sp, #24
     9bc:	mov	r0, sl
     9c0:	bl	0 <coda_cursor_read_uint64>
     9c4:	cmp	r0, #0
     9c8:	bne	177c <compare_data+0xea8>
     9cc:	add	r3, sp, #24
     9d0:	ldm	r3, {r0, r1, r2, r3}
     9d4:	eor	r1, r3, r1
     9d8:	eor	r0, r2, r0
     9dc:	orrs	r0, r0, r1
     9e0:	beq	17e4 <compare_data+0xf10>
     9e4:	movw	r0, #0
     9e8:	movt	r0, #0
     9ec:	bl	0 <printf>
     9f0:	movw	r1, #0
     9f4:	mov	r0, r4
     9f8:	movt	r1, #0
     9fc:	bl	0 <coda_cursor_print_path>
     a00:	mov	r0, #10
     a04:	bl	0 <putchar>
     a08:	movw	r0, #0
     a0c:	mov	r7, #0
     a10:	movt	r0, #0
     a14:	ldr	r0, [r0]
     a18:	cmp	r0, #0
     a1c:	beq	1208 <compare_data+0x934>
     a20:	ldr	r0, [sp, #32]
     a24:	ldr	r1, [sp, #36]	; 0x24
     a28:	add	r5, sp, #56	; 0x38
     a2c:	mov	r2, r5
     a30:	bl	0 <coda_str64u>
     a34:	movw	r8, #0
     a38:	movw	r6, #0
     a3c:	mov	r2, r5
     a40:	movt	r8, #0
     a44:	movt	r6, #0
     a48:	ldr	r1, [r8]
     a4c:	mov	r0, r6
     a50:	bl	0 <printf>
     a54:	ldr	r0, [sp, #24]
     a58:	ldr	r1, [sp, #28]
     a5c:	mov	r2, r5
     a60:	bl	0 <coda_str64u>
     a64:	b	11f8 <compare_data+0x924>
     a68:	movw	r0, #0
     a6c:	movt	r0, #0
     a70:	bl	0 <printf>
     a74:	movw	r1, #0
     a78:	mov	r0, r4
     a7c:	movt	r1, #0
     a80:	bl	0 <coda_cursor_print_path>
     a84:	mov	r0, #10
     a88:	bl	0 <putchar>
     a8c:	movw	r0, #0
     a90:	mov	r6, #0
     a94:	movt	r0, #0
     a98:	ldr	r0, [r0]
     a9c:	cmp	r0, #0
     aa0:	beq	18d0 <compare_data+0xffc>
     aa4:	movw	r7, #0
     aa8:	ldr	r0, [sp, #20]
     aac:	movt	r7, #0
     ab0:	ldr	r4, [r7]
     ab4:	bl	0 <coda_type_get_class_name>
     ab8:	movw	r5, #0
     abc:	mov	r2, r0
     ac0:	mov	r1, r4
     ac4:	movt	r5, #0
     ac8:	mov	r0, r5
     acc:	bl	0 <printf>
     ad0:	ldr	r0, [sp, #16]
     ad4:	ldr	r4, [r7, #4]
     ad8:	bl	0 <coda_type_get_class_name>
     adc:	mov	r2, r0
     ae0:	mov	r0, r5
     ae4:	mov	r1, r4
     ae8:	bl	0 <printf>
     aec:	b	18d0 <compare_data+0xffc>
     af0:	add	r1, sp, #32
     af4:	mov	r0, r4
     af8:	bl	0 <coda_cursor_get_type>
     afc:	cmp	r0, #0
     b00:	bne	1858 <compare_data+0xf84>
     b04:	add	r1, sp, #24
     b08:	mov	r0, sl
     b0c:	bl	0 <coda_cursor_get_type>
     b10:	cmp	r0, #0
     b14:	bne	1870 <compare_data+0xf9c>
     b18:	sub	r1, fp, #36	; 0x24
     b1c:	mov	r0, r4
     b20:	bl	0 <coda_cursor_get_num_elements>
     b24:	cmp	r0, #0
     b28:	bne	1858 <compare_data+0xf84>
     b2c:	sub	r1, fp, #40	; 0x28
     b30:	mov	r0, sl
     b34:	bl	0 <coda_cursor_get_num_elements>
     b38:	cmp	r0, #0
     b3c:	bne	1870 <compare_data+0xf9c>
     b40:	ldr	r0, [fp, #-36]	; 0xffffffdc
     b44:	cmp	r0, #1
     b48:	blt	1300 <compare_data+0xa2c>
     b4c:	movw	r5, #0
     b50:	movw	r9, #0
     b54:	mov	r1, #0
     b58:	mov	r8, #1
     b5c:	add	r6, sp, #56	; 0x38
     b60:	sub	r7, fp, #48	; 0x30
     b64:	movt	r5, #0
     b68:	movt	r9, #0
     b6c:	str	r1, [fp, #-44]	; 0xffffffd4
     b70:	ldr	r0, [sp, #32]
     b74:	mov	r2, r6
     b78:	bl	0 <coda_type_get_record_field_name>
     b7c:	cmp	r0, #0
     b80:	bne	12f0 <compare_data+0xa1c>
     b84:	ldr	r1, [sp, #56]	; 0x38
     b88:	ldr	r0, [sp, #24]
     b8c:	mov	r2, r7
     b90:	bl	0 <coda_type_get_record_field_index_from_name>
     b94:	cmp	r0, #0
     b98:	beq	bec <compare_data+0x318>
     b9c:	cmp	r8, #0
     ba0:	beq	bc8 <compare_data+0x2f4>
     ba4:	movw	r0, #0
     ba8:	movt	r0, #0
     bac:	bl	0 <printf>
     bb0:	movw	r1, #0
     bb4:	mov	r0, r4
     bb8:	movt	r1, #0
     bbc:	bl	0 <coda_cursor_print_path>
     bc0:	mov	r0, #10
     bc4:	bl	0 <putchar>
     bc8:	ldr	r0, [r5]
     bcc:	mov	r8, #0
     bd0:	cmp	r0, #0
     bd4:	beq	bec <compare_data+0x318>
     bd8:	ldr	r1, [r9]
     bdc:	ldr	r2, [sp, #56]	; 0x38
     be0:	movw	r0, #0
     be4:	movt	r0, #0
     be8:	bl	0 <printf>
     bec:	ldr	r0, [fp, #-44]	; 0xffffffd4
     bf0:	add	r1, r0, #1
     bf4:	ldr	r0, [fp, #-36]	; 0xffffffdc
     bf8:	str	r1, [fp, #-44]	; 0xffffffd4
     bfc:	cmp	r1, r0
     c00:	blt	b70 <compare_data+0x29c>
     c04:	b	1304 <compare_data+0xa30>
     c08:	movw	r0, #0
     c0c:	add	r2, sp, #56	; 0x38
     c10:	mov	r1, r4
     c14:	movt	r0, #0
     c18:	ldr	r0, [r0, #12]
     c1c:	bl	0 <coda_tree_node_get_item_for_cursor>
     c20:	cmp	r0, #0
     c24:	bne	1858 <compare_data+0xf84>
     c28:	ldr	r2, [sp, #56]	; 0x38
     c2c:	cmp	r2, #0
     c30:	beq	1218 <compare_data+0x944>
     c34:	mov	r0, r4
     c38:	mov	r1, sl
     c3c:	bl	1b40 <compare_arrays_as_records>
     c40:	b	e6c <compare_data+0x598>
     c44:	add	r1, sp, #32
     c48:	mov	r0, r4
     c4c:	bl	0 <coda_cursor_get_bit_size>
     c50:	cmp	r0, #0
     c54:	bne	1858 <compare_data+0xf84>
     c58:	ldr	r0, [sp, #32]
     c5c:	ldr	r1, [sp, #36]	; 0x24
     c60:	lsr	r2, r0, #3
     c64:	orr	r2, r2, r1, lsl #29
     c68:	asr	r1, r1, #3
     c6c:	adds	r7, r2, #1
     c70:	adc	r5, r1, #0
     c74:	ands	r0, r0, #7
     c78:	moveq	r5, r1
     c7c:	add	r1, sp, #24
     c80:	mov	r0, sl
     c84:	moveq	r7, r2
     c88:	bl	0 <coda_cursor_get_bit_size>
     c8c:	cmp	r0, #0
     c90:	bne	1870 <compare_data+0xf9c>
     c94:	ldr	r8, [sp, #24]
     c98:	ldr	r0, [sp, #32]
     c9c:	ldr	r6, [sp, #28]
     ca0:	ldr	r1, [sp, #36]	; 0x24
     ca4:	eor	r1, r1, r6
     ca8:	eor	r0, r0, r8
     cac:	orr	r0, r0, r1
     cb0:	lsr	r1, r8, #3
     cb4:	orr	r1, r1, r6, lsl #29
     cb8:	adds	r9, r1, #1
     cbc:	ands	r2, r8, #7
     cc0:	moveq	r9, r1
     cc4:	cmp	r0, #0
     cc8:	bne	1030 <compare_data+0x75c>
     ccc:	subs	r0, r8, #1
     cd0:	sbcs	r0, r6, #0
     cd4:	blt	17e4 <compare_data+0xf10>
     cd8:	mov	r0, r7
     cdc:	bl	0 <malloc>
     ce0:	cmp	r0, #0
     ce4:	str	r0, [sp, #8]
     ce8:	beq	19d4 <compare_data+0x1100>
     cec:	mov	r0, r9
     cf0:	bl	0 <malloc>
     cf4:	cmp	r0, #0
     cf8:	str	r0, [sp, #12]
     cfc:	beq	1a44 <compare_data+0x1170>
     d00:	str	r8, [sp]
     d04:	ldr	r8, [sp, #8]
     d08:	mov	r0, r4
     d0c:	mov	r2, #0
     d10:	mov	r3, #0
     d14:	str	r6, [sp, #4]
     d18:	mov	r1, r8
     d1c:	bl	0 <coda_cursor_read_bits>
     d20:	cmp	r0, #0
     d24:	bne	1abc <compare_data+0x11e8>
     d28:	ldr	r0, [sp, #24]
     d2c:	ldr	r1, [sp, #28]
     d30:	mov	r2, #0
     d34:	mov	r3, #0
     d38:	stm	sp, {r0, r1}
     d3c:	mov	r0, sl
     d40:	ldr	r6, [sp, #12]
     d44:	mov	r1, r6
     d48:	bl	0 <coda_cursor_read_bits>
     d4c:	cmp	r0, #0
     d50:	bne	1734 <compare_data+0xe60>
     d54:	mov	r0, r8
     d58:	mov	r1, r6
     d5c:	mov	r2, r7
     d60:	bl	0 <memcmp>
     d64:	cmp	r0, #0
     d68:	beq	f98 <compare_data+0x6c4>
     d6c:	movw	r0, #0
     d70:	movt	r0, #0
     d74:	bl	0 <printf>
     d78:	movw	r1, #0
     d7c:	mov	r0, r4
     d80:	movt	r1, #0
     d84:	bl	0 <coda_cursor_print_path>
     d88:	mov	r0, #10
     d8c:	bl	0 <putchar>
     d90:	rsbs	r0, r7, #256	; 0x100
     d94:	rscs	r0, r5, #0
     d98:	blt	f98 <compare_data+0x6c4>
     d9c:	movw	r0, #0
     da0:	movt	r0, #0
     da4:	ldr	r0, [r0]
     da8:	cmp	r0, #0
     dac:	beq	f98 <compare_data+0x6c4>
     db0:	movw	r6, #0
     db4:	movw	r5, #0
     db8:	movt	r6, #0
     dbc:	movt	r5, #0
     dc0:	ldr	r1, [r6]
     dc4:	mov	r0, r5
     dc8:	bl	0 <printf>
     dcc:	mov	r0, r8
     dd0:	mov	r1, r7
     dd4:	bl	23b4 <print_escaped>
     dd8:	mov	r0, #10
     ddc:	bl	0 <putchar>
     de0:	ldr	r1, [r6, #4]
     de4:	ldr	r6, [sp, #12]
     de8:	mov	r0, r5
     dec:	bl	0 <printf>
     df0:	mov	r0, r6
     df4:	mov	r1, r9
     df8:	bl	23b4 <print_escaped>
     dfc:	mov	r0, #10
     e00:	bl	0 <putchar>
     e04:	b	f98 <compare_data+0x6c4>
     e08:	add	r1, sp, #56	; 0x38
     e0c:	mov	r0, r4
     e10:	bl	0 <coda_cursor_get_special_type>
     e14:	cmp	r0, #0
     e18:	bne	1858 <compare_data+0xf84>
     e1c:	add	r1, sp, #32
     e20:	mov	r0, sl
     e24:	bl	0 <coda_cursor_get_special_type>
     e28:	cmp	r0, #0
     e2c:	bne	1870 <compare_data+0xf9c>
     e30:	ldr	r0, [sp, #32]
     e34:	ldr	r1, [sp, #56]	; 0x38
     e38:	cmp	r1, r0
     e3c:	bne	10c0 <compare_data+0x7ec>
     e40:	mov	r0, r4
     e44:	bl	0 <coda_cursor_use_base_type_of_special_type>
     e48:	cmp	r0, #0
     e4c:	bne	1858 <compare_data+0xf84>
     e50:	mov	r0, sl
     e54:	bl	0 <coda_cursor_use_base_type_of_special_type>
     e58:	cmp	r0, #0
     e5c:	bne	1870 <compare_data+0xf9c>
     e60:	mov	r0, r4
     e64:	mov	r1, sl
     e68:	bl	8d4 <compare_data>
     e6c:	mvn	r6, #0
     e70:	cmp	r0, #0
     e74:	bne	18d0 <compare_data+0xffc>
     e78:	b	17e4 <compare_data+0xf10>
     e7c:	add	r1, sp, #56	; 0x38
     e80:	mov	r0, r4
     e84:	bl	0 <coda_cursor_get_string_length>
     e88:	cmp	r0, #0
     e8c:	bne	1858 <compare_data+0xf84>
     e90:	add	r1, sp, #32
     e94:	mov	r0, sl
     e98:	bl	0 <coda_cursor_get_string_length>
     e9c:	cmp	r0, #0
     ea0:	bne	1870 <compare_data+0xf9c>
     ea4:	ldr	r5, [sp, #56]	; 0x38
     ea8:	add	r7, r5, #1
     eac:	mov	r0, r7
     eb0:	bl	0 <malloc>
     eb4:	cmp	r0, #0
     eb8:	beq	1764 <compare_data+0xe90>
     ebc:	ldr	r5, [sp, #32]
     ec0:	mov	r8, r0
     ec4:	add	r0, r5, #1
     ec8:	bl	0 <malloc>
     ecc:	cmp	r0, #0
     ed0:	beq	18dc <compare_data+0x1008>
     ed4:	mov	r6, r0
     ed8:	mov	r0, r4
     edc:	mov	r1, r8
     ee0:	mov	r2, r7
     ee4:	bl	0 <coda_cursor_read_string>
     ee8:	cmp	r0, #0
     eec:	bne	1954 <compare_data+0x1080>
     ef0:	ldr	r0, [sp, #32]
     ef4:	mov	r1, r6
     ef8:	add	r2, r0, #1
     efc:	mov	r0, sl
     f00:	bl	0 <coda_cursor_read_string>
     f04:	cmp	r0, #0
     f08:	bne	1734 <compare_data+0xe60>
     f0c:	ldr	r2, [sp, #56]	; 0x38
     f10:	ldr	r0, [sp, #32]
     f14:	cmp	r2, r0
     f18:	bne	f30 <compare_data+0x65c>
     f1c:	mov	r0, r8
     f20:	mov	r1, r6
     f24:	bl	0 <memcmp>
     f28:	cmp	r0, #0
     f2c:	beq	f98 <compare_data+0x6c4>
     f30:	movw	r0, #0
     f34:	movt	r0, #0
     f38:	bl	0 <printf>
     f3c:	movw	r1, #0
     f40:	mov	r0, r4
     f44:	movt	r1, #0
     f48:	bl	0 <coda_cursor_print_path>
     f4c:	mov	r0, #10
     f50:	bl	0 <putchar>
     f54:	movw	r0, #0
     f58:	movt	r0, #0
     f5c:	ldr	r0, [r0]
     f60:	cmp	r0, #0
     f64:	beq	f98 <compare_data+0x6c4>
     f68:	movw	r7, #0
     f6c:	movw	r5, #0
     f70:	mov	r2, r8
     f74:	movt	r7, #0
     f78:	movt	r5, #0
     f7c:	ldr	r1, [r7]
     f80:	mov	r0, r5
     f84:	bl	0 <printf>
     f88:	ldr	r1, [r7, #4]
     f8c:	mov	r0, r5
     f90:	mov	r2, r6
     f94:	bl	0 <printf>
     f98:	mov	r0, r8
     f9c:	bl	0 <free>
     fa0:	mov	r0, r6
     fa4:	bl	0 <free>
     fa8:	b	17e4 <compare_data+0xf10>
     fac:	movw	r0, #0
     fb0:	movt	r0, #0
     fb4:	bl	0 <printf>
     fb8:	movw	r1, #0
     fbc:	mov	r0, r4
     fc0:	movt	r1, #0
     fc4:	bl	0 <coda_cursor_print_path>
     fc8:	mov	r0, #10
     fcc:	bl	0 <putchar>
     fd0:	movw	r0, #0
     fd4:	movt	r0, #0
     fd8:	ldr	r0, [r0]
     fdc:	cmp	r0, #0
     fe0:	beq	17e4 <compare_data+0xf10>
     fe4:	movw	r7, #0
     fe8:	ldr	r0, [fp, #-36]	; 0xffffffdc
     fec:	movt	r7, #0
     ff0:	ldr	r5, [r7]
     ff4:	bl	0 <coda_type_get_native_type_name>
     ff8:	movw	r6, #0
     ffc:	mov	r2, r0
    1000:	mov	r1, r5
    1004:	movt	r6, #0
    1008:	mov	r0, r6
    100c:	bl	0 <printf>
    1010:	ldr	r0, [fp, #-40]	; 0xffffffd8
    1014:	ldr	r5, [r7, #4]
    1018:	bl	0 <coda_type_get_native_type_name>
    101c:	mov	r2, r0
    1020:	mov	r0, r6
    1024:	mov	r1, r5
    1028:	bl	0 <printf>
    102c:	b	17e4 <compare_data+0xf10>
    1030:	movw	r0, #0
    1034:	movt	r0, #0
    1038:	bl	0 <printf>
    103c:	movw	r1, #0
    1040:	mov	r0, r4
    1044:	movt	r1, #0
    1048:	bl	0 <coda_cursor_print_path>
    104c:	mov	r0, #10
    1050:	bl	0 <putchar>
    1054:	movw	r0, #0
    1058:	movt	r0, #0
    105c:	ldr	r0, [r0]
    1060:	cmp	r0, #0
    1064:	beq	17e4 <compare_data+0xf10>
    1068:	ldr	r0, [sp, #32]
    106c:	ldr	r1, [sp, #36]	; 0x24
    1070:	add	r5, sp, #56	; 0x38
    1074:	mov	r2, r5
    1078:	bl	0 <coda_str64>
    107c:	movw	r7, #0
    1080:	movw	r6, #0
    1084:	mov	r2, r5
    1088:	movt	r7, #0
    108c:	movt	r6, #0
    1090:	ldr	r1, [r7]
    1094:	mov	r0, r6
    1098:	bl	0 <printf>
    109c:	ldr	r0, [sp, #24]
    10a0:	ldr	r1, [sp, #28]
    10a4:	mov	r2, r5
    10a8:	bl	0 <coda_str64>
    10ac:	ldr	r1, [r7, #4]
    10b0:	mov	r0, r6
    10b4:	mov	r2, r5
    10b8:	bl	0 <printf>
    10bc:	b	17e4 <compare_data+0xf10>
    10c0:	movw	r0, #0
    10c4:	movt	r0, #0
    10c8:	bl	0 <printf>
    10cc:	movw	r1, #0
    10d0:	mov	r0, r4
    10d4:	movt	r1, #0
    10d8:	bl	0 <coda_cursor_print_path>
    10dc:	mov	r0, #10
    10e0:	bl	0 <putchar>
    10e4:	movw	r0, #0
    10e8:	mov	r6, #0
    10ec:	movt	r0, #0
    10f0:	ldr	r0, [r0]
    10f4:	cmp	r0, #0
    10f8:	beq	18d0 <compare_data+0xffc>
    10fc:	movw	r7, #0
    1100:	ldr	r0, [sp, #56]	; 0x38
    1104:	movt	r7, #0
    1108:	ldr	r4, [r7]
    110c:	bl	0 <coda_type_get_special_type_name>
    1110:	movw	r5, #0
    1114:	mov	r2, r0
    1118:	mov	r1, r4
    111c:	movt	r5, #0
    1120:	mov	r0, r5
    1124:	bl	0 <printf>
    1128:	ldr	r0, [sp, #32]
    112c:	ldr	r4, [r7, #4]
    1130:	bl	0 <coda_type_get_special_type_name>
    1134:	b	adc <compare_data+0x208>
    1138:	add	r1, sp, #32
    113c:	mov	r0, r4
    1140:	bl	0 <coda_cursor_read_int64>
    1144:	cmp	r0, #0
    1148:	bne	174c <compare_data+0xe78>
    114c:	add	r1, sp, #24
    1150:	mov	r0, sl
    1154:	bl	0 <coda_cursor_read_int64>
    1158:	cmp	r0, #0
    115c:	bne	177c <compare_data+0xea8>
    1160:	add	r3, sp, #24
    1164:	ldm	r3, {r0, r1, r2, r3}
    1168:	eor	r1, r3, r1
    116c:	eor	r0, r2, r0
    1170:	orrs	r0, r0, r1
    1174:	beq	17e4 <compare_data+0xf10>
    1178:	movw	r0, #0
    117c:	movt	r0, #0
    1180:	bl	0 <printf>
    1184:	movw	r1, #0
    1188:	mov	r0, r4
    118c:	movt	r1, #0
    1190:	bl	0 <coda_cursor_print_path>
    1194:	mov	r0, #10
    1198:	bl	0 <putchar>
    119c:	movw	r0, #0
    11a0:	mov	r7, #0
    11a4:	movt	r0, #0
    11a8:	ldr	r0, [r0]
    11ac:	cmp	r0, #0
    11b0:	beq	1208 <compare_data+0x934>
    11b4:	ldr	r0, [sp, #32]
    11b8:	ldr	r1, [sp, #36]	; 0x24
    11bc:	add	r5, sp, #56	; 0x38
    11c0:	mov	r2, r5
    11c4:	bl	0 <coda_str64>
    11c8:	movw	r8, #0
    11cc:	movw	r6, #0
    11d0:	mov	r2, r5
    11d4:	movt	r8, #0
    11d8:	movt	r6, #0
    11dc:	ldr	r1, [r8]
    11e0:	mov	r0, r6
    11e4:	bl	0 <printf>
    11e8:	ldr	r0, [sp, #24]
    11ec:	ldr	r1, [sp, #28]
    11f0:	mov	r2, r5
    11f4:	bl	0 <coda_str64>
    11f8:	ldr	r1, [r8, #4]
    11fc:	mov	r0, r6
    1200:	mov	r2, r5
    1204:	bl	0 <printf>
    1208:	mvn	r6, #0
    120c:	cmp	r7, #0
    1210:	bne	18d0 <compare_data+0xffc>
    1214:	b	17e4 <compare_data+0xf10>
    1218:	add	r1, sp, #32
    121c:	mov	r0, r4
    1220:	bl	0 <coda_cursor_get_num_elements>
    1224:	cmp	r0, #0
    1228:	bne	1858 <compare_data+0xf84>
    122c:	add	r1, sp, #24
    1230:	mov	r0, sl
    1234:	bl	0 <coda_cursor_get_num_elements>
    1238:	cmp	r0, #0
    123c:	bne	1870 <compare_data+0xf9c>
    1240:	ldr	r0, [sp, #32]
    1244:	ldr	r1, [sp, #24]
    1248:	cmp	r0, r1
    124c:	bne	16bc <compare_data+0xde8>
    1250:	cmp	r0, #1
    1254:	blt	17e4 <compare_data+0xf10>
    1258:	mov	r0, r4
    125c:	bl	0 <coda_cursor_goto_first_array_element>
    1260:	cmp	r0, #0
    1264:	bne	1858 <compare_data+0xf84>
    1268:	mov	r0, sl
    126c:	bl	0 <coda_cursor_goto_first_array_element>
    1270:	cmp	r0, #0
    1274:	bne	1b18 <compare_data+0x1244>
    1278:	ldr	r0, [sp, #32]
    127c:	cmp	r0, #1
    1280:	blt	12dc <compare_data+0xa08>
    1284:	mov	r5, #0
    1288:	mov	r0, r4
    128c:	mov	r1, sl
    1290:	bl	8d4 <compare_data>
    1294:	cmp	r0, #0
    1298:	bne	1850 <compare_data+0xf7c>
    129c:	ldr	r0, [sp, #32]
    12a0:	sub	r1, r0, #1
    12a4:	cmp	r5, r1
    12a8:	bge	12d0 <compare_data+0x9fc>
    12ac:	mov	r0, r4
    12b0:	bl	0 <coda_cursor_goto_next_array_element>
    12b4:	cmp	r0, #0
    12b8:	bne	1858 <compare_data+0xf84>
    12bc:	mov	r0, sl
    12c0:	bl	0 <coda_cursor_goto_next_array_element>
    12c4:	cmp	r0, #0
    12c8:	bne	1870 <compare_data+0xf9c>
    12cc:	ldr	r0, [sp, #32]
    12d0:	add	r5, r5, #1
    12d4:	cmp	r5, r0
    12d8:	blt	1288 <compare_data+0x9b4>
    12dc:	mov	r0, r4
    12e0:	bl	0 <coda_cursor_goto_parent>
    12e4:	mov	r0, sl
    12e8:	bl	0 <coda_cursor_goto_parent>
    12ec:	b	17e4 <compare_data+0xf10>
    12f0:	mov	r0, r4
    12f4:	bl	0 <coda_cursor_add_to_error_message>
    12f8:	ldr	r4, [r9]
    12fc:	b	1884 <compare_data+0xfb0>
    1300:	mov	r8, #1
    1304:	ldr	r1, [fp, #-40]	; 0xffffffd8
    1308:	cmp	r1, #1
    130c:	blt	13c8 <compare_data+0xaf4>
    1310:	movw	r5, #0
    1314:	movw	r9, #0
    1318:	mov	r1, #0
    131c:	add	r6, sp, #56	; 0x38
    1320:	sub	r7, fp, #44	; 0x2c
    1324:	movt	r5, #0
    1328:	movt	r9, #0
    132c:	str	r1, [fp, #-48]	; 0xffffffd0
    1330:	ldr	r0, [sp, #24]
    1334:	mov	r2, r6
    1338:	bl	0 <coda_type_get_record_field_name>
    133c:	cmp	r0, #0
    1340:	bne	15dc <compare_data+0xd08>
    1344:	ldr	r1, [sp, #56]	; 0x38
    1348:	ldr	r0, [sp, #32]
    134c:	mov	r2, r7
    1350:	bl	0 <coda_type_get_record_field_index_from_name>
    1354:	cmp	r0, #0
    1358:	beq	13ac <compare_data+0xad8>
    135c:	cmp	r8, #0
    1360:	beq	1388 <compare_data+0xab4>
    1364:	movw	r0, #0
    1368:	movt	r0, #0
    136c:	bl	0 <printf>
    1370:	movw	r1, #0
    1374:	mov	r0, r4
    1378:	movt	r1, #0
    137c:	bl	0 <coda_cursor_print_path>
    1380:	mov	r0, #10
    1384:	bl	0 <putchar>
    1388:	ldr	r0, [r5]
    138c:	mov	r8, #0
    1390:	cmp	r0, #0
    1394:	beq	13ac <compare_data+0xad8>
    1398:	ldr	r1, [r9, #4]
    139c:	ldr	r2, [sp, #56]	; 0x38
    13a0:	movw	r0, #0
    13a4:	movt	r0, #0
    13a8:	bl	0 <printf>
    13ac:	ldr	r0, [fp, #-48]	; 0xffffffd0
    13b0:	add	r1, r0, #1
    13b4:	ldr	r0, [fp, #-40]	; 0xffffffd8
    13b8:	str	r1, [fp, #-48]	; 0xffffffd0
    13bc:	cmp	r1, r0
    13c0:	blt	1330 <compare_data+0xa5c>
    13c4:	ldr	r0, [fp, #-36]	; 0xffffffdc
    13c8:	cmp	r0, #1
    13cc:	blt	17e4 <compare_data+0xf10>
    13d0:	add	r0, sp, #56	; 0x38
    13d4:	mov	r1, r4
    13d8:	mov	r2, #520	; 0x208
    13dc:	bl	0 <memcpy>
    13e0:	mov	r0, r4
    13e4:	bl	0 <coda_cursor_goto_first_record_field>
    13e8:	cmp	r0, #0
    13ec:	bne	1858 <compare_data+0xf84>
    13f0:	ldr	r0, [fp, #-36]	; 0xffffffdc
    13f4:	mov	r1, #0
    13f8:	str	r1, [fp, #-44]	; 0xffffffd4
    13fc:	cmp	r0, #1
    1400:	blt	1728 <compare_data+0xe54>
    1404:	add	r6, sp, #56	; 0x38
    1408:	add	r7, sp, #48	; 0x30
    140c:	add	r8, sp, #52	; 0x34
    1410:	sub	r9, fp, #48	; 0x30
    1414:	add	r5, sp, #44	; 0x2c
    1418:	mov	r0, r6
    141c:	mov	r2, r7
    1420:	bl	0 <coda_cursor_get_record_field_available_status>
    1424:	cmp	r0, #0
    1428:	bne	19cc <compare_data+0x10f8>
    142c:	ldr	r1, [fp, #-44]	; 0xffffffd4
    1430:	ldr	r0, [sp, #32]
    1434:	mov	r2, r8
    1438:	bl	0 <coda_type_get_record_field_name>
    143c:	cmp	r0, #0
    1440:	bne	1858 <compare_data+0xf84>
    1444:	ldr	r1, [sp, #52]	; 0x34
    1448:	ldr	r0, [sp, #24]
    144c:	mov	r2, r9
    1450:	bl	0 <coda_type_get_record_field_index_from_name>
    1454:	cmp	r0, #0
    1458:	beq	149c <compare_data+0xbc8>
    145c:	ldr	r0, [fp, #-36]	; 0xffffffdc
    1460:	ldr	r1, [fp, #-44]	; 0xffffffd4
    1464:	sub	r2, r0, #1
    1468:	cmp	r1, r2
    146c:	bge	1488 <compare_data+0xbb4>
    1470:	mov	r0, r4
    1474:	bl	0 <coda_cursor_goto_next_record_field>
    1478:	cmp	r0, #0
    147c:	bne	1858 <compare_data+0xf84>
    1480:	ldr	r0, [fp, #-36]	; 0xffffffdc
    1484:	ldr	r1, [fp, #-44]	; 0xffffffd4
    1488:	add	r1, r1, #1
    148c:	cmp	r1, r0
    1490:	str	r1, [fp, #-44]	; 0xffffffd4
    1494:	blt	1418 <compare_data+0xb44>
    1498:	b	1728 <compare_data+0xe54>
    149c:	ldr	r1, [fp, #-48]	; 0xffffffd0
    14a0:	mov	r0, sl
    14a4:	mov	r2, r5
    14a8:	bl	0 <coda_cursor_get_record_field_available_status>
    14ac:	cmp	r0, #0
    14b0:	bne	1870 <compare_data+0xf9c>
    14b4:	ldr	r1, [sp, #48]	; 0x30
    14b8:	ldr	r0, [sp, #44]	; 0x2c
    14bc:	cmp	r1, #0
    14c0:	beq	1500 <compare_data+0xc2c>
    14c4:	cmp	r0, #0
    14c8:	beq	1570 <compare_data+0xc9c>
    14cc:	ldr	r1, [fp, #-48]	; 0xffffffd0
    14d0:	mov	r0, sl
    14d4:	bl	0 <coda_cursor_goto_record_field_by_index>
    14d8:	cmp	r0, #0
    14dc:	bne	1870 <compare_data+0xf9c>
    14e0:	mov	r0, r4
    14e4:	mov	r1, sl
    14e8:	bl	8d4 <compare_data>
    14ec:	cmp	r0, #0
    14f0:	bne	1850 <compare_data+0xf7c>
    14f4:	mov	r0, sl
    14f8:	bl	0 <coda_cursor_goto_parent>
    14fc:	b	145c <compare_data+0xb88>
    1500:	cmp	r0, #0
    1504:	beq	145c <compare_data+0xb88>
    1508:	movw	r0, #0
    150c:	movt	r0, #0
    1510:	bl	0 <printf>
    1514:	movw	r1, #0
    1518:	mov	r0, r4
    151c:	movt	r1, #0
    1520:	bl	0 <coda_cursor_print_path>
    1524:	mov	r0, #10
    1528:	bl	0 <putchar>
    152c:	movw	r0, #0
    1530:	movt	r0, #0
    1534:	ldr	r0, [r0]
    1538:	cmp	r0, #0
    153c:	beq	145c <compare_data+0xb88>
    1540:	movw	r0, #0
    1544:	movt	r0, #0
    1548:	ldr	r1, [r0]
    154c:	movw	r0, #0
    1550:	movt	r0, #0
    1554:	bl	0 <printf>
    1558:	movw	r0, #0
    155c:	movt	r0, #0
    1560:	ldr	r1, [r0, #4]
    1564:	movw	r0, #0
    1568:	movt	r0, #0
    156c:	b	15d4 <compare_data+0xd00>
    1570:	movw	r0, #0
    1574:	movt	r0, #0
    1578:	bl	0 <printf>
    157c:	movw	r1, #0
    1580:	mov	r0, r4
    1584:	movt	r1, #0
    1588:	bl	0 <coda_cursor_print_path>
    158c:	mov	r0, #10
    1590:	bl	0 <putchar>
    1594:	movw	r0, #0
    1598:	movt	r0, #0
    159c:	ldr	r0, [r0]
    15a0:	cmp	r0, #0
    15a4:	beq	145c <compare_data+0xb88>
    15a8:	movw	r0, #0
    15ac:	movt	r0, #0
    15b0:	ldr	r1, [r0]
    15b4:	movw	r0, #0
    15b8:	movt	r0, #0
    15bc:	bl	0 <printf>
    15c0:	movw	r0, #0
    15c4:	movt	r0, #0
    15c8:	ldr	r1, [r0, #4]
    15cc:	movw	r0, #0
    15d0:	movt	r0, #0
    15d4:	bl	0 <printf>
    15d8:	b	145c <compare_data+0xb88>
    15dc:	mov	r0, sl
    15e0:	bl	0 <coda_cursor_add_to_error_message>
    15e4:	ldr	r4, [r9, #4]
    15e8:	b	1884 <compare_data+0xfb0>
    15ec:	add	r1, sp, #56	; 0x38
    15f0:	mov	r0, r4
    15f4:	bl	0 <coda_cursor_read_double>
    15f8:	cmp	r0, #0
    15fc:	bne	174c <compare_data+0xe78>
    1600:	add	r1, sp, #32
    1604:	mov	r0, sl
    1608:	bl	0 <coda_cursor_read_double>
    160c:	cmp	r0, #0
    1610:	bne	177c <compare_data+0xea8>
    1614:	vldr	d0, [sp, #56]	; 0x38
    1618:	vldr	d16, [sp, #32]
    161c:	vcmp.f64	d0, d16
    1620:	vmrs	APSR_nzcv, fpscr
    1624:	beq	17e4 <compare_data+0xf10>
    1628:	bl	0 <coda_isNaN>
    162c:	cmp	r0, #0
    1630:	beq	1644 <compare_data+0xd70>
    1634:	vldr	d0, [sp, #32]
    1638:	bl	0 <coda_isNaN>
    163c:	cmp	r0, #0
    1640:	bne	17e4 <compare_data+0xf10>
    1644:	movw	r0, #0
    1648:	movt	r0, #0
    164c:	bl	0 <printf>
    1650:	movw	r1, #0
    1654:	mov	r0, r4
    1658:	movt	r1, #0
    165c:	bl	0 <coda_cursor_print_path>
    1660:	mov	r0, #10
    1664:	bl	0 <putchar>
    1668:	movw	r0, #0
    166c:	mov	r7, #0
    1670:	movt	r0, #0
    1674:	ldr	r0, [r0]
    1678:	cmp	r0, #0
    167c:	beq	1208 <compare_data+0x934>
    1680:	movw	r6, #0
    1684:	vldr	d16, [sp, #56]	; 0x38
    1688:	movw	r5, #0
    168c:	movt	r6, #0
    1690:	movt	r5, #0
    1694:	ldr	r1, [r6]
    1698:	mov	r0, r5
    169c:	vmov	r2, r3, d16
    16a0:	bl	0 <printf>
    16a4:	vldr	d16, [sp, #32]
    16a8:	ldr	r1, [r6, #4]
    16ac:	mov	r0, r5
    16b0:	vmov	r2, r3, d16
    16b4:	bl	0 <printf>
    16b8:	b	1208 <compare_data+0x934>
    16bc:	movw	r0, #0
    16c0:	movt	r0, #0
    16c4:	bl	0 <printf>
    16c8:	movw	r1, #0
    16cc:	mov	r0, r4
    16d0:	movt	r1, #0
    16d4:	bl	0 <coda_cursor_print_path>
    16d8:	mov	r0, #10
    16dc:	bl	0 <putchar>
    16e0:	movw	r0, #0
    16e4:	movt	r0, #0
    16e8:	ldr	r0, [r0]
    16ec:	cmp	r0, #0
    16f0:	beq	17e4 <compare_data+0xf10>
    16f4:	movw	r6, #0
    16f8:	ldr	r2, [sp, #32]
    16fc:	movw	r5, #0
    1700:	movt	r6, #0
    1704:	movt	r5, #0
    1708:	ldr	r1, [r6]
    170c:	mov	r0, r5
    1710:	bl	0 <printf>
    1714:	ldr	r1, [r6, #4]
    1718:	ldr	r2, [sp, #24]
    171c:	mov	r0, r5
    1720:	bl	0 <printf>
    1724:	b	17e4 <compare_data+0xf10>
    1728:	mov	r0, r4
    172c:	bl	0 <coda_cursor_goto_parent>
    1730:	b	17e4 <compare_data+0xf10>
    1734:	mov	r0, sl
    1738:	bl	0 <coda_cursor_add_to_error_message>
    173c:	movw	r0, #0
    1740:	movt	r0, #0
    1744:	ldr	r5, [r0, #4]
    1748:	b	1968 <compare_data+0x1094>
    174c:	mov	r0, r4
    1750:	bl	0 <coda_cursor_add_to_error_message>
    1754:	movw	r0, #0
    1758:	movt	r0, #0
    175c:	ldr	r5, [r0]
    1760:	b	1790 <compare_data+0xebc>
    1764:	movw	r1, #0
    1768:	movw	r3, #0
    176c:	movw	r0, #978	; 0x3d2
    1770:	mvn	r6, #0
    1774:	mov	r2, r5
    1778:	b	19e8 <compare_data+0x1114>
    177c:	mov	r0, sl
    1780:	bl	0 <coda_cursor_add_to_error_message>
    1784:	movw	r0, #0
    1788:	movt	r0, #0
    178c:	ldr	r5, [r0, #4]
    1790:	movw	r0, #0
    1794:	movt	r0, #0
    1798:	ldr	r6, [r0]
    179c:	bl	0 <coda_get_errno>
    17a0:	ldr	r0, [r0]
    17a4:	bl	0 <coda_errno_to_string>
    17a8:	movw	r1, #0
    17ac:	mov	r3, r0
    17b0:	mov	r0, r6
    17b4:	mov	r2, r5
    17b8:	movt	r1, #0
    17bc:	bl	0 <fprintf>
    17c0:	bl	0 <coda_get_errno>
    17c4:	ldr	r0, [r0]
    17c8:	cmn	r0, #300	; 0x12c
    17cc:	beq	17e4 <compare_data+0xf10>
    17d0:	bl	0 <coda_get_errno>
    17d4:	ldr	r0, [r0]
    17d8:	mvn	r7, #0
    17dc:	cmn	r0, #103	; 0x67
    17e0:	bne	1208 <compare_data+0x934>
    17e4:	add	r1, sp, #56	; 0x38
    17e8:	mov	r0, r4
    17ec:	bl	0 <coda_cursor_has_attributes>
    17f0:	cmp	r0, #0
    17f4:	bne	1858 <compare_data+0xf84>
    17f8:	add	r1, sp, #32
    17fc:	mov	r0, sl
    1800:	bl	0 <coda_cursor_has_attributes>
    1804:	cmp	r0, #0
    1808:	bne	1870 <compare_data+0xf9c>
    180c:	ldr	r0, [sp, #56]	; 0x38
    1810:	ldr	r1, [sp, #32]
    1814:	orrs	r0, r1, r0
    1818:	beq	18cc <compare_data+0xff8>
    181c:	mov	r0, r4
    1820:	bl	0 <coda_cursor_goto_attributes>
    1824:	cmp	r0, #0
    1828:	bne	1858 <compare_data+0xf84>
    182c:	mov	r0, sl
    1830:	bl	0 <coda_cursor_goto_attributes>
    1834:	cmp	r0, #0
    1838:	bne	1870 <compare_data+0xf9c>
    183c:	mov	r0, r4
    1840:	mov	r1, sl
    1844:	bl	8d4 <compare_data>
    1848:	cmp	r0, #0
    184c:	beq	18bc <compare_data+0xfe8>
    1850:	mvn	r6, #0
    1854:	b	18d0 <compare_data+0xffc>
    1858:	mov	r0, r4
    185c:	bl	0 <coda_cursor_add_to_error_message>
    1860:	movw	r0, #0
    1864:	movt	r0, #0
    1868:	ldr	r4, [r0]
    186c:	b	1884 <compare_data+0xfb0>
    1870:	mov	r0, sl
    1874:	bl	0 <coda_cursor_add_to_error_message>
    1878:	movw	r0, #0
    187c:	movt	r0, #0
    1880:	ldr	r4, [r0, #4]
    1884:	movw	r0, #0
    1888:	movt	r0, #0
    188c:	ldr	r5, [r0]
    1890:	bl	0 <coda_get_errno>
    1894:	ldr	r0, [r0]
    1898:	bl	0 <coda_errno_to_string>
    189c:	movw	r1, #0
    18a0:	mov	r3, r0
    18a4:	mov	r0, r5
    18a8:	mov	r2, r4
    18ac:	movt	r1, #0
    18b0:	bl	0 <fprintf>
    18b4:	mvn	r6, #0
    18b8:	b	18d0 <compare_data+0xffc>
    18bc:	mov	r0, r4
    18c0:	bl	0 <coda_cursor_goto_parent>
    18c4:	mov	r0, sl
    18c8:	bl	0 <coda_cursor_goto_parent>
    18cc:	mov	r6, #0
    18d0:	mov	r0, r6
    18d4:	sub	sp, fp, #28
    18d8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    18dc:	movw	r1, #0
    18e0:	movw	r3, #0
    18e4:	movw	r0, #986	; 0x3da
    18e8:	mov	r2, r5
    18ec:	mvn	r6, #0
    18f0:	str	r0, [sp]
    18f4:	movt	r1, #0
    18f8:	movt	r3, #0
    18fc:	mvn	r0, #0
    1900:	bl	0 <coda_set_error>
    1904:	mov	r0, sl
    1908:	bl	0 <coda_cursor_add_to_error_message>
    190c:	movw	r0, #0
    1910:	movt	r0, #0
    1914:	ldr	r4, [r0, #4]
    1918:	movw	r0, #0
    191c:	movt	r0, #0
    1920:	ldr	r5, [r0]
    1924:	bl	0 <coda_get_errno>
    1928:	ldr	r0, [r0]
    192c:	bl	0 <coda_errno_to_string>
    1930:	movw	r1, #0
    1934:	mov	r3, r0
    1938:	mov	r0, r5
    193c:	mov	r2, r4
    1940:	movt	r1, #0
    1944:	bl	0 <fprintf>
    1948:	mov	r0, r8
    194c:	bl	0 <free>
    1950:	b	18d0 <compare_data+0xffc>
    1954:	mov	r0, r4
    1958:	bl	0 <coda_cursor_add_to_error_message>
    195c:	movw	r0, #0
    1960:	movt	r0, #0
    1964:	ldr	r5, [r0]
    1968:	movw	r0, #0
    196c:	movt	r0, #0
    1970:	ldr	r7, [r0]
    1974:	bl	0 <coda_get_errno>
    1978:	ldr	r0, [r0]
    197c:	bl	0 <coda_errno_to_string>
    1980:	movw	r1, #0
    1984:	mov	r3, r0
    1988:	mov	r0, r7
    198c:	mov	r2, r5
    1990:	movt	r1, #0
    1994:	bl	0 <fprintf>
    1998:	bl	0 <coda_get_errno>
    199c:	ldr	r0, [r0]
    19a0:	cmn	r0, #300	; 0x12c
    19a4:	beq	f98 <compare_data+0x6c4>
    19a8:	bl	0 <coda_get_errno>
    19ac:	ldr	r0, [r0]
    19b0:	cmn	r0, #103	; 0x67
    19b4:	beq	f98 <compare_data+0x6c4>
    19b8:	mov	r0, r8
    19bc:	bl	0 <free>
    19c0:	mov	r0, r6
    19c4:	bl	0 <free>
    19c8:	b	1850 <compare_data+0xf7c>
    19cc:	add	r0, sp, #56	; 0x38
    19d0:	b	185c <compare_data+0xf88>
    19d4:	movw	r1, #0
    19d8:	movw	r3, #0
    19dc:	mov	r0, #1072	; 0x430
    19e0:	mvn	r6, #0
    19e4:	mov	r2, r7
    19e8:	str	r0, [sp]
    19ec:	movt	r1, #0
    19f0:	movt	r3, #0
    19f4:	mvn	r0, #0
    19f8:	bl	0 <coda_set_error>
    19fc:	mov	r0, r4
    1a00:	bl	0 <coda_cursor_add_to_error_message>
    1a04:	movw	r0, #0
    1a08:	movt	r0, #0
    1a0c:	ldr	r4, [r0]
    1a10:	movw	r0, #0
    1a14:	movt	r0, #0
    1a18:	ldr	r5, [r0]
    1a1c:	bl	0 <coda_get_errno>
    1a20:	ldr	r0, [r0]
    1a24:	bl	0 <coda_errno_to_string>
    1a28:	movw	r1, #0
    1a2c:	mov	r3, r0
    1a30:	mov	r0, r5
    1a34:	mov	r2, r4
    1a38:	movt	r1, #0
    1a3c:	bl	0 <fprintf>
    1a40:	b	18d0 <compare_data+0xffc>
    1a44:	movw	r1, #0
    1a48:	movw	r3, #0
    1a4c:	movw	r0, #1080	; 0x438
    1a50:	mov	r2, r9
    1a54:	mvn	r6, #0
    1a58:	str	r0, [sp]
    1a5c:	movt	r1, #0
    1a60:	movt	r3, #0
    1a64:	mvn	r0, #0
    1a68:	bl	0 <coda_set_error>
    1a6c:	mov	r0, sl
    1a70:	bl	0 <coda_cursor_add_to_error_message>
    1a74:	movw	r0, #0
    1a78:	movt	r0, #0
    1a7c:	ldr	r4, [r0, #4]
    1a80:	movw	r0, #0
    1a84:	movt	r0, #0
    1a88:	ldr	r5, [r0]
    1a8c:	bl	0 <coda_get_errno>
    1a90:	ldr	r0, [r0]
    1a94:	bl	0 <coda_errno_to_string>
    1a98:	movw	r1, #0
    1a9c:	mov	r3, r0
    1aa0:	mov	r0, r5
    1aa4:	mov	r2, r4
    1aa8:	movt	r1, #0
    1aac:	bl	0 <fprintf>
    1ab0:	ldr	r0, [sp, #8]
    1ab4:	bl	0 <free>
    1ab8:	b	18d0 <compare_data+0xffc>
    1abc:	mov	r0, r4
    1ac0:	bl	0 <coda_cursor_add_to_error_message>
    1ac4:	movw	r0, #0
    1ac8:	movt	r0, #0
    1acc:	ldr	r5, [r0]
    1ad0:	movw	r0, #0
    1ad4:	movt	r0, #0
    1ad8:	ldr	r7, [r0]
    1adc:	bl	0 <coda_get_errno>
    1ae0:	ldr	r0, [r0]
    1ae4:	bl	0 <coda_errno_to_string>
    1ae8:	movw	r1, #0
    1aec:	mov	r3, r0
    1af0:	mov	r0, r7
    1af4:	mov	r2, r5
    1af8:	movt	r1, #0
    1afc:	bl	0 <fprintf>
    1b00:	bl	0 <coda_get_errno>
    1b04:	ldr	r0, [r0]
    1b08:	ldr	r6, [sp, #12]
    1b0c:	cmn	r0, #300	; 0x12c
    1b10:	beq	f98 <compare_data+0x6c4>
    1b14:	b	19a8 <compare_data+0x10d4>
    1b18:	mov	r0, sl
    1b1c:	b	185c <compare_data+0xf88>
    1b20:	movw	r0, #0
    1b24:	movw	r1, #0
    1b28:	movw	r3, #0
    1b2c:	movw	r2, #950	; 0x3b6
    1b30:	movt	r0, #0
    1b34:	movt	r1, #0
    1b38:	movt	r3, #0
    1b3c:	bl	0 <__assert_fail>

00001b40 <compare_arrays_as_records>:
    1b40:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1b44:	add	fp, sp, #28
    1b48:	sub	sp, sp, #44	; 0x2c
    1b4c:	mov	r6, r1
    1b50:	mov	r1, #0
    1b54:	mov	r4, r2
    1b58:	str	r0, [sp, #24]
    1b5c:	str	r1, [sp, #36]	; 0x24
    1b60:	add	r1, sp, #32
    1b64:	bl	0 <coda_cursor_get_num_elements>
    1b68:	cmp	r0, #0
    1b6c:	bne	1eb4 <compare_arrays_as_records+0x374>
    1b70:	add	r1, sp, #28
    1b74:	mov	r0, r6
    1b78:	bl	0 <coda_cursor_get_num_elements>
    1b7c:	cmp	r0, #0
    1b80:	bne	1ecc <compare_arrays_as_records+0x38c>
    1b84:	add	r1, sp, #36	; 0x24
    1b88:	mov	r0, r4
    1b8c:	bl	0 <coda_expression_from_string>
    1b90:	cmp	r0, #0
    1b94:	bne	2054 <compare_arrays_as_records+0x514>
    1b98:	ldr	r5, [sp, #32]
    1b9c:	lsl	r4, r5, #2
    1ba0:	mov	r0, r4
    1ba4:	bl	0 <malloc>
    1ba8:	cmp	r0, #0
    1bac:	beq	2088 <compare_arrays_as_records+0x548>
    1bb0:	mov	sl, r0
    1bb4:	cmp	r5, #1
    1bb8:	blt	1bcc <compare_arrays_as_records+0x8c>
    1bbc:	mov	r0, sl
    1bc0:	mov	r1, #0
    1bc4:	mov	r2, r4
    1bc8:	bl	0 <memset>
    1bcc:	ldr	r5, [sp, #28]
    1bd0:	lsl	r4, r5, #2
    1bd4:	mov	r0, r4
    1bd8:	bl	0 <malloc>
    1bdc:	cmp	r0, #0
    1be0:	beq	2118 <compare_arrays_as_records+0x5d8>
    1be4:	mov	r7, r0
    1be8:	cmp	r5, #1
    1bec:	blt	1c00 <compare_arrays_as_records+0xc0>
    1bf0:	mov	r0, r7
    1bf4:	mov	r1, #0
    1bf8:	mov	r2, r4
    1bfc:	bl	0 <memset>
    1c00:	mov	r0, #1
    1c04:	bl	0 <coda_hashtable_new>
    1c08:	cmp	r0, #0
    1c0c:	str	r0, [sp, #20]
    1c10:	beq	2198 <compare_arrays_as_records+0x658>
    1c14:	mov	r0, #1
    1c18:	bl	0 <coda_hashtable_new>
    1c1c:	cmp	r0, #0
    1c20:	str	r0, [sp, #16]
    1c24:	beq	2208 <compare_arrays_as_records+0x6c8>
    1c28:	ldr	r0, [sp, #32]
    1c2c:	ldr	r8, [sp, #28]
    1c30:	ldr	r9, [sp, #36]	; 0x24
    1c34:	cmp	r0, #1
    1c38:	str	r0, [sp, #12]
    1c3c:	blt	1cd0 <compare_arrays_as_records+0x190>
    1c40:	ldr	r0, [sp, #24]
    1c44:	bl	0 <coda_cursor_goto_first_array_element>
    1c48:	cmp	r0, #0
    1c4c:	bne	2100 <compare_arrays_as_records+0x5c0>
    1c50:	stmib	sp, {r6, r7}
    1c54:	mov	r7, #0
    1c58:	sub	r6, fp, #32
    1c5c:	mov	r4, sl
    1c60:	ldr	r0, [sp, #12]
    1c64:	sub	r5, r0, #1
    1c68:	ldr	r1, [sp, #24]
    1c6c:	mov	r0, r9
    1c70:	mov	r2, r4
    1c74:	mov	r3, r6
    1c78:	bl	0 <coda_expression_eval_string>
    1c7c:	cmp	r0, #0
    1c80:	bne	1e8c <compare_arrays_as_records+0x34c>
    1c84:	ldr	r1, [r4]
    1c88:	ldr	r0, [sp, #20]
    1c8c:	bl	0 <coda_hashtable_add_name>
    1c90:	cmp	r0, #0
    1c94:	bne	1e6c <compare_arrays_as_records+0x32c>
    1c98:	cmp	r7, r5
    1c9c:	bge	1cb0 <compare_arrays_as_records+0x170>
    1ca0:	ldr	r0, [sp, #24]
    1ca4:	bl	0 <coda_cursor_goto_next_array_element>
    1ca8:	cmp	r0, #0
    1cac:	bne	1e84 <compare_arrays_as_records+0x344>
    1cb0:	ldr	r0, [sp, #12]
    1cb4:	add	r7, r7, #1
    1cb8:	add	r4, r4, #4
    1cbc:	cmp	r7, r0
    1cc0:	blt	1c68 <compare_arrays_as_records+0x128>
    1cc4:	ldr	r0, [sp, #24]
    1cc8:	bl	0 <coda_cursor_goto_parent>
    1ccc:	ldmib	sp, {r6, r7}
    1cd0:	cmp	r8, #1
    1cd4:	blt	1d5c <compare_arrays_as_records+0x21c>
    1cd8:	mov	r0, r6
    1cdc:	bl	0 <coda_cursor_goto_first_array_element>
    1ce0:	cmp	r0, #0
    1ce4:	bne	228c <compare_arrays_as_records+0x74c>
    1ce8:	mov	r4, r7
    1cec:	sub	r5, r8, #1
    1cf0:	mov	r7, #0
    1cf4:	str	r4, [sp, #8]
    1cf8:	mov	r0, r9
    1cfc:	mov	r1, r6
    1d00:	mov	r2, r4
    1d04:	sub	r3, fp, #32
    1d08:	bl	0 <coda_expression_eval_string>
    1d0c:	cmp	r0, #0
    1d10:	bne	22dc <compare_arrays_as_records+0x79c>
    1d14:	ldr	r1, [r4]
    1d18:	ldr	r0, [sp, #16]
    1d1c:	bl	0 <coda_hashtable_add_name>
    1d20:	cmp	r0, #0
    1d24:	bne	1e9c <compare_arrays_as_records+0x35c>
    1d28:	cmp	r7, r5
    1d2c:	bge	1d40 <compare_arrays_as_records+0x200>
    1d30:	mov	r0, r6
    1d34:	bl	0 <coda_cursor_goto_next_array_element>
    1d38:	cmp	r0, #0
    1d3c:	bne	22d4 <compare_arrays_as_records+0x794>
    1d40:	add	r7, r7, #1
    1d44:	add	r4, r4, #4
    1d48:	cmp	r7, r8
    1d4c:	blt	1cf8 <compare_arrays_as_records+0x1b8>
    1d50:	mov	r0, r6
    1d54:	bl	0 <coda_cursor_goto_parent>
    1d58:	ldr	r7, [sp, #8]
    1d5c:	ldr	r5, [sp, #12]
    1d60:	cmp	r5, r8
    1d64:	beq	1dd0 <compare_arrays_as_records+0x290>
    1d68:	movw	r0, #0
    1d6c:	movt	r0, #0
    1d70:	bl	0 <printf>
    1d74:	ldr	r0, [sp, #24]
    1d78:	movw	r1, #0
    1d7c:	movt	r1, #0
    1d80:	bl	0 <coda_cursor_print_path>
    1d84:	mov	r0, #10
    1d88:	bl	0 <putchar>
    1d8c:	movw	r0, #0
    1d90:	movt	r0, #0
    1d94:	ldr	r0, [r0]
    1d98:	cmp	r0, #0
    1d9c:	beq	1dd0 <compare_arrays_as_records+0x290>
    1da0:	movw	r9, #0
    1da4:	movw	r4, #0
    1da8:	mov	r2, r5
    1dac:	movt	r9, #0
    1db0:	movt	r4, #0
    1db4:	ldr	r1, [r9]
    1db8:	mov	r0, r4
    1dbc:	bl	0 <printf>
    1dc0:	ldr	r1, [r9, #4]
    1dc4:	mov	r0, r4
    1dc8:	mov	r2, r8
    1dcc:	bl	0 <printf>
    1dd0:	cmp	r5, #1
    1dd4:	str	r6, [sp, #4]
    1dd8:	blt	1f18 <compare_arrays_as_records+0x3d8>
    1ddc:	movw	r6, #0
    1de0:	mov	r9, r5
    1de4:	mov	r4, #1
    1de8:	mov	r5, sl
    1dec:	movt	r6, #0
    1df0:	ldr	r1, [sl]
    1df4:	ldr	r0, [sp, #16]
    1df8:	bl	0 <coda_hashtable_get_index_from_name>
    1dfc:	cmn	r0, #1
    1e00:	bgt	1e5c <compare_arrays_as_records+0x31c>
    1e04:	cmp	r4, #0
    1e08:	beq	1e30 <compare_arrays_as_records+0x2f0>
    1e0c:	movw	r0, #0
    1e10:	movt	r0, #0
    1e14:	bl	0 <printf>
    1e18:	ldr	r0, [sp, #24]
    1e1c:	movw	r1, #0
    1e20:	movt	r1, #0
    1e24:	bl	0 <coda_cursor_print_path>
    1e28:	mov	r0, #10
    1e2c:	bl	0 <putchar>
    1e30:	ldr	r0, [r6]
    1e34:	mov	r4, #0
    1e38:	cmp	r0, #0
    1e3c:	beq	1e5c <compare_arrays_as_records+0x31c>
    1e40:	movw	r0, #0
    1e44:	ldr	r2, [sl]
    1e48:	movt	r0, #0
    1e4c:	ldr	r1, [r0]
    1e50:	movw	r0, #0
    1e54:	movt	r0, #0
    1e58:	bl	0 <printf>
    1e5c:	subs	r9, r9, #1
    1e60:	add	sl, sl, #4
    1e64:	bne	1df0 <compare_arrays_as_records+0x2b0>
    1e68:	b	1f20 <compare_arrays_as_records+0x3e0>
    1e6c:	ldr	r2, [r4]
    1e70:	movw	r1, #0
    1e74:	mvn	r0, #99	; 0x63
    1e78:	movt	r1, #0
    1e7c:	bl	0 <coda_set_error>
    1e80:	b	1e8c <compare_arrays_as_records+0x34c>
    1e84:	ldr	r0, [sp, #24]
    1e88:	bl	0 <coda_cursor_add_to_error_message>
    1e8c:	movw	r0, #0
    1e90:	movt	r0, #0
    1e94:	ldr	r4, [r0]
    1e98:	b	22e8 <compare_arrays_as_records+0x7a8>
    1e9c:	ldr	r2, [r4]
    1ea0:	movw	r1, #0
    1ea4:	mvn	r0, #99	; 0x63
    1ea8:	movt	r1, #0
    1eac:	bl	0 <coda_set_error>
    1eb0:	b	22dc <compare_arrays_as_records+0x79c>
    1eb4:	ldr	r0, [sp, #24]
    1eb8:	bl	0 <coda_cursor_add_to_error_message>
    1ebc:	movw	r0, #0
    1ec0:	movt	r0, #0
    1ec4:	ldr	r4, [r0]
    1ec8:	b	1ee0 <compare_arrays_as_records+0x3a0>
    1ecc:	mov	r0, r6
    1ed0:	bl	0 <coda_cursor_add_to_error_message>
    1ed4:	movw	r0, #0
    1ed8:	movt	r0, #0
    1edc:	ldr	r4, [r0, #4]
    1ee0:	movw	r0, #0
    1ee4:	movt	r0, #0
    1ee8:	ldr	r5, [r0]
    1eec:	bl	0 <coda_get_errno>
    1ef0:	ldr	r0, [r0]
    1ef4:	bl	0 <coda_errno_to_string>
    1ef8:	movw	r1, #0
    1efc:	mov	r3, r0
    1f00:	mov	r0, r5
    1f04:	mov	r2, r4
    1f08:	movt	r1, #0
    1f0c:	bl	0 <fprintf>
    1f10:	mvn	r6, #0
    1f14:	b	23a8 <compare_arrays_as_records+0x868>
    1f18:	mov	r5, sl
    1f1c:	mov	r4, #1
    1f20:	cmp	r8, #1
    1f24:	mov	sl, r5
    1f28:	blt	1fb4 <compare_arrays_as_records+0x474>
    1f2c:	movw	r6, #0
    1f30:	movw	r9, #0
    1f34:	mov	r5, r7
    1f38:	movt	r6, #0
    1f3c:	movt	r9, #0
    1f40:	ldr	r1, [r5]
    1f44:	ldr	r0, [sp, #20]
    1f48:	bl	0 <coda_hashtable_get_index_from_name>
    1f4c:	cmn	r0, #1
    1f50:	bgt	1fa8 <compare_arrays_as_records+0x468>
    1f54:	cmp	r4, #0
    1f58:	beq	1f7c <compare_arrays_as_records+0x43c>
    1f5c:	movw	r0, #0
    1f60:	movt	r0, #0
    1f64:	bl	0 <printf>
    1f68:	ldr	r0, [sp, #24]
    1f6c:	mov	r1, r9
    1f70:	bl	0 <coda_cursor_print_path>
    1f74:	mov	r0, #10
    1f78:	bl	0 <putchar>
    1f7c:	ldr	r0, [r6]
    1f80:	mov	r4, #0
    1f84:	cmp	r0, #0
    1f88:	beq	1fa8 <compare_arrays_as_records+0x468>
    1f8c:	movw	r0, #0
    1f90:	ldr	r2, [r5]
    1f94:	movt	r0, #0
    1f98:	ldr	r1, [r0, #4]
    1f9c:	movw	r0, #0
    1fa0:	movt	r0, #0
    1fa4:	bl	0 <printf>
    1fa8:	subs	r8, r8, #1
    1fac:	add	r5, r5, #4
    1fb0:	bne	1f40 <compare_arrays_as_records+0x400>
    1fb4:	ldr	r4, [sp, #12]
    1fb8:	cmp	r4, #1
    1fbc:	blt	204c <compare_arrays_as_records+0x50c>
    1fc0:	ldr	r0, [sp, #24]
    1fc4:	bl	0 <coda_cursor_goto_first_array_element>
    1fc8:	cmp	r0, #0
    1fcc:	bne	2100 <compare_arrays_as_records+0x5c0>
    1fd0:	ldr	r6, [sp, #4]
    1fd4:	sub	r8, r4, #1
    1fd8:	mov	r5, #0
    1fdc:	ldr	r1, [sl, r5, lsl #2]
    1fe0:	ldr	r0, [sp, #16]
    1fe4:	bl	0 <coda_hashtable_get_index_from_name>
    1fe8:	cmp	r0, #0
    1fec:	blt	2020 <compare_arrays_as_records+0x4e0>
    1ff0:	mov	r1, r0
    1ff4:	mov	r0, r6
    1ff8:	bl	0 <coda_cursor_goto_array_element_by_index>
    1ffc:	cmp	r0, #0
    2000:	bne	228c <compare_arrays_as_records+0x74c>
    2004:	ldr	r0, [sp, #24]
    2008:	mov	r1, r6
    200c:	bl	8d4 <compare_data>
    2010:	cmp	r0, #0
    2014:	bne	231c <compare_arrays_as_records+0x7dc>
    2018:	mov	r0, r6
    201c:	bl	0 <coda_cursor_goto_parent>
    2020:	cmp	r5, r8
    2024:	bge	2038 <compare_arrays_as_records+0x4f8>
    2028:	ldr	r0, [sp, #24]
    202c:	bl	0 <coda_cursor_goto_next_array_element>
    2030:	cmp	r0, #0
    2034:	bne	2100 <compare_arrays_as_records+0x5c0>
    2038:	add	r5, r5, #1
    203c:	cmp	r5, r4
    2040:	blt	1fdc <compare_arrays_as_records+0x49c>
    2044:	ldr	r0, [sp, #24]
    2048:	bl	0 <coda_cursor_goto_parent>
    204c:	mov	r6, #0
    2050:	b	2320 <compare_arrays_as_records+0x7e0>
    2054:	movw	r0, #0
    2058:	movt	r0, #0
    205c:	ldr	r4, [r0]
    2060:	bl	0 <coda_get_errno>
    2064:	ldr	r0, [r0]
    2068:	bl	0 <coda_errno_to_string>
    206c:	movw	r1, #0
    2070:	mov	r2, r0
    2074:	mov	r0, r4
    2078:	movt	r1, #0
    207c:	bl	0 <fprintf>
    2080:	mvn	r6, #0
    2084:	b	23a8 <compare_arrays_as_records+0x868>
    2088:	movw	r1, #0
    208c:	movw	r3, #0
    2090:	movw	r0, #461	; 0x1cd
    2094:	mov	r2, r4
    2098:	mvn	r6, #0
    209c:	str	r0, [sp]
    20a0:	movt	r1, #0
    20a4:	movt	r3, #0
    20a8:	mvn	r0, #0
    20ac:	bl	0 <coda_set_error>
    20b0:	ldr	r0, [sp, #24]
    20b4:	bl	0 <coda_cursor_add_to_error_message>
    20b8:	movw	r0, #0
    20bc:	movt	r0, #0
    20c0:	ldr	r4, [r0]
    20c4:	movw	r0, #0
    20c8:	movt	r0, #0
    20cc:	ldr	r5, [r0]
    20d0:	bl	0 <coda_get_errno>
    20d4:	ldr	r0, [r0]
    20d8:	bl	0 <coda_errno_to_string>
    20dc:	movw	r1, #0
    20e0:	mov	r3, r0
    20e4:	mov	r0, r5
    20e8:	mov	r2, r4
    20ec:	movt	r1, #0
    20f0:	bl	0 <fprintf>
    20f4:	ldr	r0, [sp, #36]	; 0x24
    20f8:	bl	0 <coda_expression_delete>
    20fc:	b	23a8 <compare_arrays_as_records+0x868>
    2100:	ldr	r0, [sp, #24]
    2104:	bl	0 <coda_cursor_add_to_error_message>
    2108:	movw	r0, #0
    210c:	movt	r0, #0
    2110:	ldr	r4, [r0]
    2114:	b	22a0 <compare_arrays_as_records+0x760>
    2118:	movw	r1, #0
    211c:	movw	r3, #0
    2120:	movw	r0, #475	; 0x1db
    2124:	mov	r2, r4
    2128:	mov	r5, r6
    212c:	mvn	r6, #0
    2130:	str	r0, [sp]
    2134:	movt	r1, #0
    2138:	movt	r3, #0
    213c:	mvn	r0, #0
    2140:	bl	0 <coda_set_error>
    2144:	mov	r0, r5
    2148:	bl	0 <coda_cursor_add_to_error_message>
    214c:	movw	r0, #0
    2150:	movt	r0, #0
    2154:	ldr	r4, [r0, #4]
    2158:	movw	r0, #0
    215c:	movt	r0, #0
    2160:	ldr	r5, [r0]
    2164:	bl	0 <coda_get_errno>
    2168:	ldr	r0, [r0]
    216c:	bl	0 <coda_errno_to_string>
    2170:	movw	r1, #0
    2174:	mov	r3, r0
    2178:	mov	r0, r5
    217c:	mov	r2, r4
    2180:	movt	r1, #0
    2184:	bl	0 <fprintf>
    2188:	ldr	r0, [sp, #36]	; 0x24
    218c:	bl	0 <coda_expression_delete>
    2190:	mov	r0, sl
    2194:	b	23a4 <compare_arrays_as_records+0x864>
    2198:	movw	r1, #0
    219c:	movw	r2, #0
    21a0:	mvn	r0, #0
    21a4:	movw	r3, #489	; 0x1e9
    21a8:	mvn	r6, #0
    21ac:	movt	r1, #0
    21b0:	movt	r2, #0
    21b4:	bl	0 <coda_set_error>
    21b8:	ldr	r0, [sp, #24]
    21bc:	bl	0 <coda_cursor_add_to_error_message>
    21c0:	movw	r0, #0
    21c4:	movt	r0, #0
    21c8:	ldr	r8, [r0]
    21cc:	movw	r0, #0
    21d0:	movt	r0, #0
    21d4:	ldr	r4, [r0]
    21d8:	bl	0 <coda_get_errno>
    21dc:	ldr	r0, [r0]
    21e0:	bl	0 <coda_errno_to_string>
    21e4:	movw	r1, #0
    21e8:	mov	r3, r0
    21ec:	mov	r0, r4
    21f0:	mov	r2, r8
    21f4:	movt	r1, #0
    21f8:	bl	0 <fprintf>
    21fc:	ldr	r0, [sp, #36]	; 0x24
    2200:	bl	0 <coda_expression_delete>
    2204:	b	2280 <compare_arrays_as_records+0x740>
    2208:	movw	r1, #0
    220c:	movw	r2, #0
    2210:	mvn	r0, #0
    2214:	mov	r3, #500	; 0x1f4
    2218:	mov	r4, r6
    221c:	mvn	r6, #0
    2220:	movt	r1, #0
    2224:	movt	r2, #0
    2228:	bl	0 <coda_set_error>
    222c:	mov	r0, r4
    2230:	bl	0 <coda_cursor_add_to_error_message>
    2234:	movw	r0, #0
    2238:	movt	r0, #0
    223c:	ldr	r8, [r0, #4]
    2240:	movw	r0, #0
    2244:	movt	r0, #0
    2248:	ldr	r4, [r0]
    224c:	bl	0 <coda_get_errno>
    2250:	ldr	r0, [r0]
    2254:	bl	0 <coda_errno_to_string>
    2258:	movw	r1, #0
    225c:	mov	r3, r0
    2260:	mov	r0, r4
    2264:	mov	r2, r8
    2268:	movt	r1, #0
    226c:	bl	0 <fprintf>
    2270:	ldr	r0, [sp, #36]	; 0x24
    2274:	bl	0 <coda_expression_delete>
    2278:	ldr	r0, [sp, #20]
    227c:	bl	0 <coda_hashtable_delete>
    2280:	mov	r0, sl
    2284:	bl	0 <free>
    2288:	b	23a0 <compare_arrays_as_records+0x860>
    228c:	mov	r0, r6
    2290:	bl	0 <coda_cursor_add_to_error_message>
    2294:	movw	r0, #0
    2298:	movt	r0, #0
    229c:	ldr	r4, [r0, #4]
    22a0:	movw	r0, #0
    22a4:	movt	r0, #0
    22a8:	ldr	r6, [r0]
    22ac:	bl	0 <coda_get_errno>
    22b0:	ldr	r0, [r0]
    22b4:	bl	0 <coda_errno_to_string>
    22b8:	movw	r1, #0
    22bc:	mov	r3, r0
    22c0:	mov	r0, r6
    22c4:	mov	r2, r4
    22c8:	movt	r1, #0
    22cc:	bl	0 <fprintf>
    22d0:	b	231c <compare_arrays_as_records+0x7dc>
    22d4:	mov	r0, r6
    22d8:	bl	0 <coda_cursor_add_to_error_message>
    22dc:	movw	r0, #0
    22e0:	movt	r0, #0
    22e4:	ldr	r4, [r0, #4]
    22e8:	movw	r0, #0
    22ec:	movt	r0, #0
    22f0:	ldr	r6, [r0]
    22f4:	bl	0 <coda_get_errno>
    22f8:	ldr	r0, [r0]
    22fc:	bl	0 <coda_errno_to_string>
    2300:	movw	r1, #0
    2304:	mov	r3, r0
    2308:	mov	r0, r6
    230c:	mov	r2, r4
    2310:	movt	r1, #0
    2314:	bl	0 <fprintf>
    2318:	ldr	r7, [sp, #8]
    231c:	mvn	r6, #0
    2320:	ldr	r0, [sp, #36]	; 0x24
    2324:	bl	0 <coda_expression_delete>
    2328:	ldr	r0, [sp, #20]
    232c:	bl	0 <coda_hashtable_delete>
    2330:	ldr	r0, [sp, #16]
    2334:	bl	0 <coda_hashtable_delete>
    2338:	ldr	r1, [sp, #32]
    233c:	cmp	r1, #1
    2340:	blt	2368 <compare_arrays_as_records+0x828>
    2344:	mov	r4, #0
    2348:	ldr	r0, [sl, r4, lsl #2]
    234c:	cmp	r0, #0
    2350:	beq	235c <compare_arrays_as_records+0x81c>
    2354:	bl	0 <coda_free>
    2358:	ldr	r1, [sp, #32]
    235c:	add	r4, r4, #1
    2360:	cmp	r4, r1
    2364:	blt	2348 <compare_arrays_as_records+0x808>
    2368:	mov	r0, sl
    236c:	bl	0 <free>
    2370:	ldr	r1, [sp, #28]
    2374:	cmp	r1, #1
    2378:	blt	23a0 <compare_arrays_as_records+0x860>
    237c:	mov	r4, #0
    2380:	ldr	r0, [r7, r4, lsl #2]
    2384:	cmp	r0, #0
    2388:	beq	2394 <compare_arrays_as_records+0x854>
    238c:	bl	0 <coda_free>
    2390:	ldr	r1, [sp, #28]
    2394:	add	r4, r4, #1
    2398:	cmp	r4, r1
    239c:	blt	2380 <compare_arrays_as_records+0x840>
    23a0:	mov	r0, r7
    23a4:	bl	0 <free>
    23a8:	mov	r0, r6
    23ac:	sub	sp, fp, #28
    23b0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

000023b4 <print_escaped>:
    23b4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    23b8:	add	fp, sp, #28
    23bc:	sub	sp, sp, #4
    23c0:	cmp	r1, #1
    23c4:	blt	24d4 <print_escaped+0x120>
    23c8:	movw	r7, #0
    23cc:	movw	r8, #0
    23d0:	movw	r9, #0
    23d4:	movw	sl, #0
    23d8:	movw	r6, #0
    23dc:	mov	r4, r1
    23e0:	mov	r5, r0
    23e4:	movt	r7, #0
    23e8:	movt	r8, #0
    23ec:	movt	r9, #0
    23f0:	movt	sl, #0
    23f4:	movt	r6, #0
    23f8:	ldrb	r1, [r5]
    23fc:	sub	r0, r1, #7
    2400:	cmp	r0, #6
    2404:	bhi	243c <print_escaped+0x88>
    2408:	add	r1, pc, #0
    240c:	ldr	pc, [r1, r0, lsl #2]
    2410:	.word	0x0000242c
    2414:	.word	0x00002454
    2418:	.word	0x00002464
    241c:	.word	0x00002470
    2420:	.word	0x0000247c
    2424:	.word	0x00002488
    2428:	.word	0x00002494
    242c:	movw	r0, #0
    2430:	movt	r0, #0
    2434:	bl	0 <printf>
    2438:	b	24c8 <print_escaped+0x114>
    243c:	cmp	r1, #92	; 0x5c
    2440:	bne	24a0 <print_escaped+0xec>
    2444:	movw	r0, #0
    2448:	movt	r0, #0
    244c:	bl	0 <printf>
    2450:	b	24c8 <print_escaped+0x114>
    2454:	movw	r0, #0
    2458:	movt	r0, #0
    245c:	bl	0 <printf>
    2460:	b	24c8 <print_escaped+0x114>
    2464:	mov	r0, r7
    2468:	bl	0 <printf>
    246c:	b	24c8 <print_escaped+0x114>
    2470:	mov	r0, r8
    2474:	bl	0 <printf>
    2478:	b	24c8 <print_escaped+0x114>
    247c:	mov	r0, r9
    2480:	bl	0 <printf>
    2484:	b	24c8 <print_escaped+0x114>
    2488:	mov	r0, sl
    248c:	bl	0 <printf>
    2490:	b	24c8 <print_escaped+0x114>
    2494:	mov	r0, r6
    2498:	bl	0 <printf>
    249c:	b	24c8 <print_escaped+0x114>
    24a0:	sub	r0, r1, #32
    24a4:	uxtb	r0, r0
    24a8:	cmp	r0, #94	; 0x5e
    24ac:	bhi	24bc <print_escaped+0x108>
    24b0:	mov	r0, r1
    24b4:	bl	0 <putchar>
    24b8:	b	24c8 <print_escaped+0x114>
    24bc:	movw	r0, #0
    24c0:	movt	r0, #0
    24c4:	bl	0 <printf>
    24c8:	subs	r4, r4, #1
    24cc:	add	r5, r5, #1
    24d0:	bne	23f8 <print_escaped+0x44>
    24d4:	sub	sp, fp, #28
    24d8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
