
../compcert-repos/stcorp-coda-3a25f25/CMakeFiles/coda_static.dir/libcoda/coda-expr.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <ipow>:
       0:	push	{fp}		; (str fp, [sp, #-4]!)
       4:	add	fp, sp, #0
       8:	sub	sp, sp, #28
       c:	vstr	d0, [fp, #-20]	; 0xffffffec
      10:	str	r0, [fp, #-24]	; 0xffffffe8
      14:	mov	r2, #0
      18:	mov	r3, #0
      1c:	movt	r3, #16368	; 0x3ff0
      20:	strd	r2, [fp, #-12]
      24:	ldr	r3, [fp, #-24]	; 0xffffffe8
      28:	cmp	r3, #0
      2c:	bge	7c <ipow+0x7c>
      30:	b	44 <ipow+0x44>
      34:	vldr	d6, [fp, #-12]
      38:	vldr	d7, [fp, #-20]	; 0xffffffec
      3c:	vmul.f64	d7, d6, d7
      40:	vstr	d7, [fp, #-12]
      44:	ldr	r3, [fp, #-24]	; 0xffffffe8
      48:	add	r2, r3, #1
      4c:	str	r2, [fp, #-24]	; 0xffffffe8
      50:	cmp	r3, #0
      54:	bne	34 <ipow+0x34>
      58:	vldr	d5, [pc, #72]	; a8 <ipow+0xa8>
      5c:	vldr	d6, [fp, #-12]
      60:	vdiv.f64	d7, d5, d6
      64:	vstr	d7, [fp, #-12]
      68:	b	90 <ipow+0x90>
      6c:	vldr	d6, [fp, #-12]
      70:	vldr	d7, [fp, #-20]	; 0xffffffec
      74:	vmul.f64	d7, d6, d7
      78:	vstr	d7, [fp, #-12]
      7c:	ldr	r3, [fp, #-24]	; 0xffffffe8
      80:	sub	r2, r3, #1
      84:	str	r2, [fp, #-24]	; 0xffffffe8
      88:	cmp	r3, #0
      8c:	bne	6c <ipow+0x6c>
      90:	ldrd	r2, [fp, #-12]
      94:	vmov	d7, r2, r3
      98:	vmov.f64	d0, d7
      9c:	add	sp, fp, #0
      a0:	pop	{fp}		; (ldr fp, [sp], #4)
      a4:	bx	lr
      a8:	.word	0x00000000
      ac:	.word	0x3ff00000

000000b0 <iswhitespace>:
      b0:	push	{fp}		; (str fp, [sp, #-4]!)
      b4:	add	fp, sp, #0
      b8:	sub	sp, sp, #12
      bc:	mov	r3, r0
      c0:	strb	r3, [fp, #-5]
      c4:	ldrb	r3, [fp, #-5]
      c8:	cmp	r3, #32
      cc:	beq	f4 <iswhitespace+0x44>
      d0:	ldrb	r3, [fp, #-5]
      d4:	cmp	r3, #9
      d8:	beq	f4 <iswhitespace+0x44>
      dc:	ldrb	r3, [fp, #-5]
      e0:	cmp	r3, #10
      e4:	beq	f4 <iswhitespace+0x44>
      e8:	ldrb	r3, [fp, #-5]
      ec:	cmp	r3, #13
      f0:	bne	fc <iswhitespace+0x4c>
      f4:	mov	r3, #1
      f8:	b	100 <iswhitespace+0x50>
      fc:	mov	r3, #0
     100:	mov	r0, r3
     104:	add	sp, fp, #0
     108:	pop	{fp}		; (ldr fp, [sp], #4)
     10c:	bx	lr

00000110 <compare_strings>:
     110:	push	{fp}		; (str fp, [sp, #-4]!)
     114:	add	fp, sp, #0
     118:	sub	sp, sp, #28
     11c:	str	r0, [fp, #-16]
     120:	str	r1, [fp, #-20]	; 0xffffffec
     124:	str	r2, [fp, #-24]	; 0xffffffe8
     128:	str	r3, [fp, #-28]	; 0xffffffe4
     12c:	mov	r3, #0
     130:	str	r3, [fp, #-8]
     134:	b	144 <compare_strings+0x34>
     138:	ldr	r3, [fp, #-8]
     13c:	add	r3, r3, #1
     140:	str	r3, [fp, #-8]
     144:	ldr	r2, [fp, #-8]
     148:	ldr	r3, [fp, #-20]	; 0xffffffec
     14c:	cmp	r2, r3
     150:	bge	1a4 <compare_strings+0x94>
     154:	ldr	r2, [fp, #-8]
     158:	ldr	r3, [fp, #4]
     15c:	cmp	r2, r3
     160:	bge	1a4 <compare_strings+0x94>
     164:	ldr	r2, [fp, #-16]
     168:	ldr	r3, [fp, #-8]
     16c:	add	r3, r2, r3
     170:	mov	r2, r3
     174:	ldr	r3, [fp, #-24]	; 0xffffffe8
     178:	add	r3, r3, r2
     17c:	ldrb	r2, [r3]
     180:	ldr	r1, [fp, #-28]	; 0xffffffe4
     184:	ldr	r3, [fp, #-8]
     188:	add	r3, r1, r3
     18c:	mov	r1, r3
     190:	ldr	r3, [fp, #8]
     194:	add	r3, r3, r1
     198:	ldrb	r3, [r3]
     19c:	cmp	r2, r3
     1a0:	beq	138 <compare_strings+0x28>
     1a4:	ldr	r2, [fp, #-8]
     1a8:	ldr	r3, [fp, #-20]	; 0xffffffec
     1ac:	cmp	r2, r3
     1b0:	bne	1d4 <compare_strings+0xc4>
     1b4:	ldr	r2, [fp, #-8]
     1b8:	ldr	r3, [fp, #4]
     1bc:	cmp	r2, r3
     1c0:	bne	1cc <compare_strings+0xbc>
     1c4:	mov	r3, #0
     1c8:	b	230 <compare_strings+0x120>
     1cc:	mvn	r3, #0
     1d0:	b	230 <compare_strings+0x120>
     1d4:	ldr	r2, [fp, #-8]
     1d8:	ldr	r3, [fp, #4]
     1dc:	cmp	r2, r3
     1e0:	beq	224 <compare_strings+0x114>
     1e4:	ldr	r2, [fp, #-16]
     1e8:	ldr	r3, [fp, #-8]
     1ec:	add	r3, r2, r3
     1f0:	mov	r2, r3
     1f4:	ldr	r3, [fp, #-24]	; 0xffffffe8
     1f8:	add	r3, r3, r2
     1fc:	ldrb	r2, [r3]
     200:	ldr	r1, [fp, #-28]	; 0xffffffe4
     204:	ldr	r3, [fp, #-8]
     208:	add	r3, r1, r3
     20c:	mov	r1, r3
     210:	ldr	r3, [fp, #8]
     214:	add	r3, r3, r1
     218:	ldrb	r3, [r3]
     21c:	cmp	r2, r3
     220:	bls	22c <compare_strings+0x11c>
     224:	mov	r3, #1
     228:	b	230 <compare_strings+0x120>
     22c:	mvn	r3, #0
     230:	mov	r0, r3
     234:	add	sp, fp, #0
     238:	pop	{fp}		; (ldr fp, [sp], #4)
     23c:	bx	lr

00000240 <decode_escaped_string>:
     240:	str	fp, [sp, #-8]!
     244:	str	lr, [sp, #4]
     248:	add	fp, sp, #4
     24c:	sub	sp, sp, #16
     250:	str	r0, [fp, #-16]
     254:	ldr	r3, [fp, #-16]
     258:	cmp	r3, #0
     25c:	bne	268 <decode_escaped_string+0x28>
     260:	mov	r3, #0
     264:	b	7b8 <decode_escaped_string+0x578>
     268:	mov	r3, #0
     26c:	str	r3, [fp, #-8]
     270:	mov	r3, #0
     274:	str	r3, [fp, #-12]
     278:	b	788 <decode_escaped_string+0x548>
     27c:	ldr	r3, [fp, #-8]
     280:	ldr	r2, [fp, #-16]
     284:	add	r3, r2, r3
     288:	ldrb	r3, [r3]
     28c:	cmp	r3, #92	; 0x5c
     290:	bne	750 <decode_escaped_string+0x510>
     294:	ldr	r3, [fp, #-8]
     298:	add	r3, r3, #1
     29c:	str	r3, [fp, #-8]
     2a0:	ldr	r3, [fp, #-8]
     2a4:	ldr	r2, [fp, #-16]
     2a8:	add	r3, r2, r3
     2ac:	ldrb	r3, [r3]
     2b0:	sub	r3, r3, #34	; 0x22
     2b4:	cmp	r3, #84	; 0x54
     2b8:	ldrls	pc, [pc, r3, lsl #2]
     2bc:	b	5a0 <decode_escaped_string+0x360>
     2c0:	.word	0x00000558
     2c4:	.word	0x000005a0
     2c8:	.word	0x000005a0
     2cc:	.word	0x000005a0
     2d0:	.word	0x000005a0
     2d4:	.word	0x0000057c
     2d8:	.word	0x000005a0
     2dc:	.word	0x000005a0
     2e0:	.word	0x000005a0
     2e4:	.word	0x000005a0
     2e8:	.word	0x000005a0
     2ec:	.word	0x000005a0
     2f0:	.word	0x000005a0
     2f4:	.word	0x000005a0
     2f8:	.word	0x000005a0
     2fc:	.word	0x000005a0
     300:	.word	0x000005a0
     304:	.word	0x000005a0
     308:	.word	0x000005a0
     30c:	.word	0x000005a0
     310:	.word	0x000005a0
     314:	.word	0x000005a0
     318:	.word	0x000005a0
     31c:	.word	0x000005a0
     320:	.word	0x000005a0
     324:	.word	0x000005a0
     328:	.word	0x000005a0
     32c:	.word	0x000005a0
     330:	.word	0x000005a0
     334:	.word	0x000005a0
     338:	.word	0x000005a0
     33c:	.word	0x000005a0
     340:	.word	0x000005a0
     344:	.word	0x000005a0
     348:	.word	0x000005a0
     34c:	.word	0x000005a0
     350:	.word	0x000005a0
     354:	.word	0x000005a0
     358:	.word	0x000005a0
     35c:	.word	0x000005a0
     360:	.word	0x000005a0
     364:	.word	0x000005a0
     368:	.word	0x000005a0
     36c:	.word	0x000005a0
     370:	.word	0x000005a0
     374:	.word	0x000005a0
     378:	.word	0x000005a0
     37c:	.word	0x000005a0
     380:	.word	0x000005a0
     384:	.word	0x000005a0
     388:	.word	0x000005a0
     38c:	.word	0x000005a0
     390:	.word	0x000005a0
     394:	.word	0x000005a0
     398:	.word	0x000005a0
     39c:	.word	0x000005a0
     3a0:	.word	0x000005a0
     3a4:	.word	0x000005a0
     3a8:	.word	0x00000534
     3ac:	.word	0x000005a0
     3b0:	.word	0x000005a0
     3b4:	.word	0x000005a0
     3b8:	.word	0x000005a0
     3bc:	.word	0x00000438
     3c0:	.word	0x0000045c
     3c4:	.word	0x000005a0
     3c8:	.word	0x000005a0
     3cc:	.word	0x00000414
     3d0:	.word	0x00000480
     3d4:	.word	0x000005a0
     3d8:	.word	0x000005a0
     3dc:	.word	0x000005a0
     3e0:	.word	0x000005a0
     3e4:	.word	0x000005a0
     3e8:	.word	0x000005a0
     3ec:	.word	0x000005a0
     3f0:	.word	0x000004a4
     3f4:	.word	0x000005a0
     3f8:	.word	0x000005a0
     3fc:	.word	0x000005a0
     400:	.word	0x000004c8
     404:	.word	0x000005a0
     408:	.word	0x000004ec
     40c:	.word	0x000005a0
     410:	.word	0x00000510
     414:	ldr	r3, [fp, #-12]
     418:	add	r2, r3, #1
     41c:	str	r2, [fp, #-12]
     420:	mov	r2, r3
     424:	ldr	r3, [fp, #-16]
     428:	add	r3, r3, r2
     42c:	mov	r2, #27
     430:	strb	r2, [r3]
     434:	b	77c <decode_escaped_string+0x53c>
     438:	ldr	r3, [fp, #-12]
     43c:	add	r2, r3, #1
     440:	str	r2, [fp, #-12]
     444:	mov	r2, r3
     448:	ldr	r3, [fp, #-16]
     44c:	add	r3, r3, r2
     450:	mov	r2, #7
     454:	strb	r2, [r3]
     458:	b	77c <decode_escaped_string+0x53c>
     45c:	ldr	r3, [fp, #-12]
     460:	add	r2, r3, #1
     464:	str	r2, [fp, #-12]
     468:	mov	r2, r3
     46c:	ldr	r3, [fp, #-16]
     470:	add	r3, r3, r2
     474:	mov	r2, #8
     478:	strb	r2, [r3]
     47c:	b	77c <decode_escaped_string+0x53c>
     480:	ldr	r3, [fp, #-12]
     484:	add	r2, r3, #1
     488:	str	r2, [fp, #-12]
     48c:	mov	r2, r3
     490:	ldr	r3, [fp, #-16]
     494:	add	r3, r3, r2
     498:	mov	r2, #12
     49c:	strb	r2, [r3]
     4a0:	b	77c <decode_escaped_string+0x53c>
     4a4:	ldr	r3, [fp, #-12]
     4a8:	add	r2, r3, #1
     4ac:	str	r2, [fp, #-12]
     4b0:	mov	r2, r3
     4b4:	ldr	r3, [fp, #-16]
     4b8:	add	r3, r3, r2
     4bc:	mov	r2, #10
     4c0:	strb	r2, [r3]
     4c4:	b	77c <decode_escaped_string+0x53c>
     4c8:	ldr	r3, [fp, #-12]
     4cc:	add	r2, r3, #1
     4d0:	str	r2, [fp, #-12]
     4d4:	mov	r2, r3
     4d8:	ldr	r3, [fp, #-16]
     4dc:	add	r3, r3, r2
     4e0:	mov	r2, #13
     4e4:	strb	r2, [r3]
     4e8:	b	77c <decode_escaped_string+0x53c>
     4ec:	ldr	r3, [fp, #-12]
     4f0:	add	r2, r3, #1
     4f4:	str	r2, [fp, #-12]
     4f8:	mov	r2, r3
     4fc:	ldr	r3, [fp, #-16]
     500:	add	r3, r3, r2
     504:	mov	r2, #9
     508:	strb	r2, [r3]
     50c:	b	77c <decode_escaped_string+0x53c>
     510:	ldr	r3, [fp, #-12]
     514:	add	r2, r3, #1
     518:	str	r2, [fp, #-12]
     51c:	mov	r2, r3
     520:	ldr	r3, [fp, #-16]
     524:	add	r3, r3, r2
     528:	mov	r2, #11
     52c:	strb	r2, [r3]
     530:	b	77c <decode_escaped_string+0x53c>
     534:	ldr	r3, [fp, #-12]
     538:	add	r2, r3, #1
     53c:	str	r2, [fp, #-12]
     540:	mov	r2, r3
     544:	ldr	r3, [fp, #-16]
     548:	add	r3, r3, r2
     54c:	mov	r2, #92	; 0x5c
     550:	strb	r2, [r3]
     554:	b	77c <decode_escaped_string+0x53c>
     558:	ldr	r3, [fp, #-12]
     55c:	add	r2, r3, #1
     560:	str	r2, [fp, #-12]
     564:	mov	r2, r3
     568:	ldr	r3, [fp, #-16]
     56c:	add	r3, r3, r2
     570:	mov	r2, #34	; 0x22
     574:	strb	r2, [r3]
     578:	b	77c <decode_escaped_string+0x53c>
     57c:	ldr	r3, [fp, #-12]
     580:	add	r2, r3, #1
     584:	str	r2, [fp, #-12]
     588:	mov	r2, r3
     58c:	ldr	r3, [fp, #-16]
     590:	add	r3, r3, r2
     594:	mov	r2, #39	; 0x27
     598:	strb	r2, [r3]
     59c:	b	77c <decode_escaped_string+0x53c>
     5a0:	ldr	r3, [fp, #-8]
     5a4:	ldr	r2, [fp, #-16]
     5a8:	add	r3, r2, r3
     5ac:	ldrb	r3, [r3]
     5b0:	cmp	r3, #47	; 0x2f
     5b4:	bls	5d0 <decode_escaped_string+0x390>
     5b8:	ldr	r3, [fp, #-8]
     5bc:	ldr	r2, [fp, #-16]
     5c0:	add	r3, r2, r3
     5c4:	ldrb	r3, [r3]
     5c8:	cmp	r3, #57	; 0x39
     5cc:	bls	5e8 <decode_escaped_string+0x3a8>
     5d0:	movw	r1, #0
     5d4:	movt	r1, #0
     5d8:	mvn	r0, #102	; 0x66
     5dc:	bl	0 <coda_set_error>
     5e0:	mvn	r3, #0
     5e4:	b	7b8 <decode_escaped_string+0x578>
     5e8:	ldr	r3, [fp, #-8]
     5ec:	ldr	r2, [fp, #-16]
     5f0:	add	r3, r2, r3
     5f4:	ldrb	r2, [r3]
     5f8:	ldr	r3, [fp, #-12]
     5fc:	ldr	r1, [fp, #-16]
     600:	add	r3, r1, r3
     604:	lsl	r2, r2, #6
     608:	uxtb	r2, r2
     60c:	strb	r2, [r3]
     610:	ldr	r3, [fp, #-8]
     614:	add	r3, r3, #1
     618:	str	r3, [fp, #-8]
     61c:	ldr	r3, [fp, #-8]
     620:	ldr	r2, [fp, #-16]
     624:	add	r3, r2, r3
     628:	ldrb	r3, [r3]
     62c:	cmp	r3, #47	; 0x2f
     630:	bls	64c <decode_escaped_string+0x40c>
     634:	ldr	r3, [fp, #-8]
     638:	ldr	r2, [fp, #-16]
     63c:	add	r3, r2, r3
     640:	ldrb	r3, [r3]
     644:	cmp	r3, #57	; 0x39
     648:	bls	664 <decode_escaped_string+0x424>
     64c:	movw	r1, #0
     650:	movt	r1, #0
     654:	mvn	r0, #102	; 0x66
     658:	bl	0 <coda_set_error>
     65c:	mvn	r3, #0
     660:	b	7b8 <decode_escaped_string+0x578>
     664:	ldr	r3, [fp, #-12]
     668:	ldr	r2, [fp, #-16]
     66c:	add	r3, r2, r3
     670:	ldrb	r1, [r3]
     674:	ldr	r3, [fp, #-8]
     678:	ldr	r2, [fp, #-16]
     67c:	add	r3, r2, r3
     680:	ldrb	r3, [r3]
     684:	add	r3, r3, #16
     688:	uxtb	r3, r3
     68c:	lsl	r3, r3, #3
     690:	uxtb	r2, r3
     694:	ldr	r3, [fp, #-12]
     698:	ldr	r0, [fp, #-16]
     69c:	add	r3, r0, r3
     6a0:	add	r2, r1, r2
     6a4:	uxtb	r2, r2
     6a8:	strb	r2, [r3]
     6ac:	ldr	r3, [fp, #-8]
     6b0:	add	r3, r3, #1
     6b4:	str	r3, [fp, #-8]
     6b8:	ldr	r3, [fp, #-8]
     6bc:	ldr	r2, [fp, #-16]
     6c0:	add	r3, r2, r3
     6c4:	ldrb	r3, [r3]
     6c8:	cmp	r3, #47	; 0x2f
     6cc:	bls	6e8 <decode_escaped_string+0x4a8>
     6d0:	ldr	r3, [fp, #-8]
     6d4:	ldr	r2, [fp, #-16]
     6d8:	add	r3, r2, r3
     6dc:	ldrb	r3, [r3]
     6e0:	cmp	r3, #57	; 0x39
     6e4:	bls	700 <decode_escaped_string+0x4c0>
     6e8:	movw	r1, #0
     6ec:	movt	r1, #0
     6f0:	mvn	r0, #102	; 0x66
     6f4:	bl	0 <coda_set_error>
     6f8:	mvn	r3, #0
     6fc:	b	7b8 <decode_escaped_string+0x578>
     700:	ldr	r3, [fp, #-12]
     704:	ldr	r2, [fp, #-16]
     708:	add	r3, r2, r3
     70c:	ldrb	r2, [r3]
     710:	ldr	r3, [fp, #-8]
     714:	ldr	r1, [fp, #-16]
     718:	add	r3, r1, r3
     71c:	ldrb	r3, [r3]
     720:	add	r3, r2, r3
     724:	uxtb	r2, r3
     728:	ldr	r3, [fp, #-12]
     72c:	ldr	r1, [fp, #-16]
     730:	add	r3, r1, r3
     734:	sub	r2, r2, #48	; 0x30
     738:	uxtb	r2, r2
     73c:	strb	r2, [r3]
     740:	ldr	r3, [fp, #-12]
     744:	add	r3, r3, #1
     748:	str	r3, [fp, #-12]
     74c:	b	77c <decode_escaped_string+0x53c>
     750:	ldr	r3, [fp, #-8]
     754:	ldr	r2, [fp, #-16]
     758:	add	r2, r2, r3
     75c:	ldr	r3, [fp, #-12]
     760:	add	r1, r3, #1
     764:	str	r1, [fp, #-12]
     768:	mov	r1, r3
     76c:	ldr	r3, [fp, #-16]
     770:	add	r3, r3, r1
     774:	ldrb	r2, [r2]
     778:	strb	r2, [r3]
     77c:	ldr	r3, [fp, #-8]
     780:	add	r3, r3, #1
     784:	str	r3, [fp, #-8]
     788:	ldr	r3, [fp, #-8]
     78c:	ldr	r2, [fp, #-16]
     790:	add	r3, r2, r3
     794:	ldrb	r3, [r3]
     798:	cmp	r3, #0
     79c:	bne	27c <decode_escaped_string+0x3c>
     7a0:	ldr	r3, [fp, #-12]
     7a4:	ldr	r2, [fp, #-16]
     7a8:	add	r3, r2, r3
     7ac:	mov	r2, #0
     7b0:	strb	r2, [r3]
     7b4:	ldr	r3, [fp, #-12]
     7b8:	mov	r0, r3
     7bc:	sub	sp, fp, #4
     7c0:	ldr	fp, [sp]
     7c4:	add	sp, sp, #4
     7c8:	pop	{pc}		; (ldr pc, [sp], #4)

000007cc <boolean_constant_new>:
     7cc:	str	fp, [sp, #-8]!
     7d0:	str	lr, [sp, #4]
     7d4:	add	fp, sp, #4
     7d8:	sub	sp, sp, #24
     7dc:	str	r0, [fp, #-16]
     7e0:	mov	r0, #16
     7e4:	bl	0 <malloc>
     7e8:	mov	r3, r0
     7ec:	str	r3, [fp, #-8]
     7f0:	ldr	r3, [fp, #-8]
     7f4:	cmp	r3, #0
     7f8:	bne	830 <boolean_constant_new+0x64>
     7fc:	mov	r3, #232	; 0xe8
     800:	str	r3, [sp]
     804:	movw	r3, #0
     808:	movt	r3, #0
     80c:	mov	r2, #16
     810:	movw	r1, #0
     814:	movt	r1, #0
     818:	mvn	r0, #0
     81c:	bl	0 <coda_set_error>
     820:	ldr	r0, [fp, #-16]
     824:	bl	0 <free>
     828:	mov	r3, #0
     82c:	b	894 <boolean_constant_new+0xc8>
     830:	ldr	r3, [fp, #-8]
     834:	mov	r2, #18
     838:	str	r2, [r3]
     83c:	ldr	r3, [fp, #-8]
     840:	mov	r2, #0
     844:	str	r2, [r3, #4]
     848:	ldr	r3, [fp, #-8]
     84c:	mov	r2, #1
     850:	str	r2, [r3, #8]
     854:	ldr	r3, [fp, #-16]
     858:	ldrb	r3, [r3]
     85c:	cmp	r3, #116	; 0x74
     860:	beq	874 <boolean_constant_new+0xa8>
     864:	ldr	r3, [fp, #-16]
     868:	ldrb	r3, [r3]
     86c:	cmp	r3, #84	; 0x54
     870:	bne	87c <boolean_constant_new+0xb0>
     874:	mov	r2, #1
     878:	b	880 <boolean_constant_new+0xb4>
     87c:	mov	r2, #0
     880:	ldr	r3, [fp, #-8]
     884:	str	r2, [r3, #12]
     888:	ldr	r0, [fp, #-16]
     88c:	bl	0 <free>
     890:	ldr	r3, [fp, #-8]
     894:	mov	r0, r3
     898:	sub	sp, fp, #4
     89c:	ldr	fp, [sp]
     8a0:	add	sp, sp, #4
     8a4:	pop	{pc}		; (ldr pc, [sp], #4)

000008a8 <float_constant_new>:
     8a8:	str	fp, [sp, #-8]!
     8ac:	str	lr, [sp, #4]
     8b0:	add	fp, sp, #4
     8b4:	sub	sp, sp, #32
     8b8:	str	r0, [fp, #-24]	; 0xffffffe8
     8bc:	ldr	r0, [fp, #-24]	; 0xffffffe8
     8c0:	bl	0 <strlen>
     8c4:	mov	r3, r0
     8c8:	mov	r1, r3
     8cc:	sub	r2, fp, #20
     8d0:	mov	r3, #0
     8d4:	ldr	r0, [fp, #-24]	; 0xffffffe8
     8d8:	bl	0 <coda_ascii_parse_double>
     8dc:	mov	r3, r0
     8e0:	cmp	r3, #0
     8e4:	bge	8f8 <float_constant_new+0x50>
     8e8:	ldr	r0, [fp, #-24]	; 0xffffffe8
     8ec:	bl	0 <free>
     8f0:	mov	r3, #0
     8f4:	b	97c <float_constant_new+0xd4>
     8f8:	ldr	r0, [fp, #-24]	; 0xffffffe8
     8fc:	bl	0 <free>
     900:	mov	r0, #24
     904:	bl	0 <malloc>
     908:	mov	r3, r0
     90c:	str	r3, [fp, #-8]
     910:	ldr	r3, [fp, #-8]
     914:	cmp	r3, #0
     918:	bne	948 <float_constant_new+0xa0>
     91c:	movw	r3, #261	; 0x105
     920:	str	r3, [sp]
     924:	movw	r3, #0
     928:	movt	r3, #0
     92c:	mov	r2, #24
     930:	movw	r1, #0
     934:	movt	r1, #0
     938:	mvn	r0, #0
     93c:	bl	0 <coda_set_error>
     940:	mov	r3, #0
     944:	b	97c <float_constant_new+0xd4>
     948:	ldr	r3, [fp, #-8]
     94c:	mov	r2, #19
     950:	str	r2, [r3]
     954:	ldr	r3, [fp, #-8]
     958:	mov	r2, #2
     95c:	str	r2, [r3, #4]
     960:	ldr	r3, [fp, #-8]
     964:	mov	r2, #1
     968:	str	r2, [r3, #8]
     96c:	ldrd	r2, [fp, #-20]	; 0xffffffec
     970:	ldr	r1, [fp, #-8]
     974:	strd	r2, [r1, #16]
     978:	ldr	r3, [fp, #-8]
     97c:	mov	r0, r3
     980:	sub	sp, fp, #4
     984:	ldr	fp, [sp]
     988:	add	sp, sp, #4
     98c:	pop	{pc}		; (ldr pc, [sp], #4)

00000990 <integer_constant_new>:
     990:	str	fp, [sp, #-8]!
     994:	str	lr, [sp, #4]
     998:	add	fp, sp, #4
     99c:	sub	sp, sp, #32
     9a0:	str	r0, [fp, #-24]	; 0xffffffe8
     9a4:	ldr	r0, [fp, #-24]	; 0xffffffe8
     9a8:	bl	0 <strlen>
     9ac:	mov	r3, r0
     9b0:	mov	r1, r3
     9b4:	sub	r2, fp, #20
     9b8:	mov	r3, #0
     9bc:	ldr	r0, [fp, #-24]	; 0xffffffe8
     9c0:	bl	0 <coda_ascii_parse_int64>
     9c4:	mov	r3, r0
     9c8:	cmp	r3, #0
     9cc:	bge	9e0 <integer_constant_new+0x50>
     9d0:	ldr	r0, [fp, #-24]	; 0xffffffe8
     9d4:	bl	0 <free>
     9d8:	mov	r3, #0
     9dc:	b	a64 <integer_constant_new+0xd4>
     9e0:	ldr	r0, [fp, #-24]	; 0xffffffe8
     9e4:	bl	0 <free>
     9e8:	mov	r0, #24
     9ec:	bl	0 <malloc>
     9f0:	mov	r3, r0
     9f4:	str	r3, [fp, #-8]
     9f8:	ldr	r3, [fp, #-8]
     9fc:	cmp	r3, #0
     a00:	bne	a30 <integer_constant_new+0xa0>
     a04:	mov	r3, #288	; 0x120
     a08:	str	r3, [sp]
     a0c:	movw	r3, #0
     a10:	movt	r3, #0
     a14:	mov	r2, #24
     a18:	movw	r1, #0
     a1c:	movt	r1, #0
     a20:	mvn	r0, #0
     a24:	bl	0 <coda_set_error>
     a28:	mov	r3, #0
     a2c:	b	a64 <integer_constant_new+0xd4>
     a30:	ldr	r3, [fp, #-8]
     a34:	mov	r2, #20
     a38:	str	r2, [r3]
     a3c:	ldr	r3, [fp, #-8]
     a40:	mov	r2, #1
     a44:	str	r2, [r3, #4]
     a48:	ldr	r3, [fp, #-8]
     a4c:	mov	r2, #1
     a50:	str	r2, [r3, #8]
     a54:	ldrd	r2, [fp, #-20]	; 0xffffffec
     a58:	ldr	r1, [fp, #-8]
     a5c:	strd	r2, [r1, #16]
     a60:	ldr	r3, [fp, #-8]
     a64:	mov	r0, r3
     a68:	sub	sp, fp, #4
     a6c:	ldr	fp, [sp]
     a70:	add	sp, sp, #4
     a74:	pop	{pc}		; (ldr pc, [sp], #4)

00000a78 <rawstring_constant_new>:
     a78:	str	fp, [sp, #-8]!
     a7c:	str	lr, [sp, #4]
     a80:	add	fp, sp, #4
     a84:	sub	sp, sp, #24
     a88:	str	r0, [fp, #-16]
     a8c:	mov	r0, #20
     a90:	bl	0 <malloc>
     a94:	mov	r3, r0
     a98:	str	r3, [fp, #-8]
     a9c:	ldr	r3, [fp, #-8]
     aa0:	cmp	r3, #0
     aa4:	bne	ad4 <rawstring_constant_new+0x5c>
     aa8:	movw	r3, #307	; 0x133
     aac:	str	r3, [sp]
     ab0:	movw	r3, #0
     ab4:	movt	r3, #0
     ab8:	mov	r2, #20
     abc:	movw	r1, #0
     ac0:	movt	r1, #0
     ac4:	mvn	r0, #0
     ac8:	bl	0 <coda_set_error>
     acc:	mov	r3, #0
     ad0:	b	b20 <rawstring_constant_new+0xa8>
     ad4:	ldr	r3, [fp, #-8]
     ad8:	mov	r2, #21
     adc:	str	r2, [r3]
     ae0:	ldr	r3, [fp, #-8]
     ae4:	mov	r2, #3
     ae8:	str	r2, [r3, #4]
     aec:	ldr	r3, [fp, #-8]
     af0:	mov	r2, #1
     af4:	str	r2, [r3, #8]
     af8:	ldr	r0, [fp, #-16]
     afc:	bl	0 <strlen>
     b00:	mov	r3, r0
     b04:	mov	r2, r3
     b08:	ldr	r3, [fp, #-8]
     b0c:	str	r2, [r3, #12]
     b10:	ldr	r3, [fp, #-8]
     b14:	ldr	r2, [fp, #-16]
     b18:	str	r2, [r3, #16]
     b1c:	ldr	r3, [fp, #-8]
     b20:	mov	r0, r3
     b24:	sub	sp, fp, #4
     b28:	ldr	fp, [sp]
     b2c:	add	sp, sp, #4
     b30:	pop	{pc}		; (ldr pc, [sp], #4)

00000b34 <string_constant_new>:
     b34:	str	fp, [sp, #-8]!
     b38:	str	lr, [sp, #4]
     b3c:	add	fp, sp, #4
     b40:	sub	sp, sp, #24
     b44:	str	r0, [fp, #-16]
     b48:	ldr	r0, [fp, #-16]
     b4c:	bl	240 <decode_escaped_string>
     b50:	str	r0, [fp, #-8]
     b54:	ldr	r3, [fp, #-8]
     b58:	cmp	r3, #0
     b5c:	bge	b70 <string_constant_new+0x3c>
     b60:	ldr	r0, [fp, #-16]
     b64:	bl	0 <free>
     b68:	mov	r3, #0
     b6c:	b	bf8 <string_constant_new+0xc4>
     b70:	mov	r0, #20
     b74:	bl	0 <malloc>
     b78:	mov	r3, r0
     b7c:	str	r3, [fp, #-12]
     b80:	ldr	r3, [fp, #-12]
     b84:	cmp	r3, #0
     b88:	bne	bb8 <string_constant_new+0x84>
     b8c:	movw	r3, #335	; 0x14f
     b90:	str	r3, [sp]
     b94:	movw	r3, #0
     b98:	movt	r3, #0
     b9c:	mov	r2, #20
     ba0:	movw	r1, #0
     ba4:	movt	r1, #0
     ba8:	mvn	r0, #0
     bac:	bl	0 <coda_set_error>
     bb0:	mov	r3, #0
     bb4:	b	bf8 <string_constant_new+0xc4>
     bb8:	ldr	r3, [fp, #-12]
     bbc:	mov	r2, #22
     bc0:	str	r2, [r3]
     bc4:	ldr	r3, [fp, #-12]
     bc8:	mov	r2, #3
     bcc:	str	r2, [r3, #4]
     bd0:	ldr	r3, [fp, #-12]
     bd4:	mov	r2, #1
     bd8:	str	r2, [r3, #8]
     bdc:	ldr	r3, [fp, #-12]
     be0:	ldr	r2, [fp, #-8]
     be4:	str	r2, [r3, #12]
     be8:	ldr	r3, [fp, #-12]
     bec:	ldr	r2, [fp, #-16]
     bf0:	str	r2, [r3, #16]
     bf4:	ldr	r3, [fp, #-12]
     bf8:	mov	r0, r3
     bfc:	sub	sp, fp, #4
     c00:	ldr	fp, [sp]
     c04:	add	sp, sp, #4
     c08:	pop	{pc}		; (ldr pc, [sp], #4)

00000c0c <coda_expression_new>:
     c0c:	str	fp, [sp, #-8]!
     c10:	str	lr, [sp, #4]
     c14:	add	fp, sp, #4
     c18:	sub	sp, sp, #32
     c1c:	str	r0, [fp, #-16]
     c20:	str	r1, [fp, #-20]	; 0xffffffec
     c24:	str	r2, [fp, #-24]	; 0xffffffe8
     c28:	str	r3, [fp, #-28]	; 0xffffffe4
     c2c:	ldr	r3, [fp, #-16]
     c30:	sub	r3, r3, #18
     c34:	cmp	r3, #4
     c38:	ldrls	pc, [pc, r3, lsl #2]
     c3c:	b	ca4 <coda_expression_new+0x98>
     c40:	.word	0x00000c54
     c44:	.word	0x00000c64
     c48:	.word	0x00000c74
     c4c:	.word	0x00000c84
     c50:	.word	0x00000c94
     c54:	ldr	r0, [fp, #-20]	; 0xffffffec
     c58:	bl	7cc <boolean_constant_new>
     c5c:	mov	r3, r0
     c60:	b	1234 <coda_expression_new+0x628>
     c64:	ldr	r0, [fp, #-20]	; 0xffffffec
     c68:	bl	8a8 <float_constant_new>
     c6c:	mov	r3, r0
     c70:	b	1234 <coda_expression_new+0x628>
     c74:	ldr	r0, [fp, #-20]	; 0xffffffec
     c78:	bl	990 <integer_constant_new>
     c7c:	mov	r3, r0
     c80:	b	1234 <coda_expression_new+0x628>
     c84:	ldr	r0, [fp, #-20]	; 0xffffffec
     c88:	bl	a78 <rawstring_constant_new>
     c8c:	mov	r3, r0
     c90:	b	1234 <coda_expression_new+0x628>
     c94:	ldr	r0, [fp, #-20]	; 0xffffffec
     c98:	bl	b34 <string_constant_new>
     c9c:	mov	r3, r0
     ca0:	b	1234 <coda_expression_new+0x628>
     ca4:	nop	{0}
     ca8:	ldr	r3, [fp, #-16]
     cac:	cmp	r3, #60	; 0x3c
     cb0:	bne	d10 <coda_expression_new+0x104>
     cb4:	ldr	r3, [fp, #-24]	; 0xffffffe8
     cb8:	ldr	r3, [r3]
     cbc:	cmp	r3, #19
     cc0:	bne	ce0 <coda_expression_new+0xd4>
     cc4:	ldr	r3, [fp, #-24]	; 0xffffffe8
     cc8:	vldr	d7, [r3, #16]
     ccc:	vneg.f64	d7, d7
     cd0:	ldr	r3, [fp, #-24]	; 0xffffffe8
     cd4:	vstr	d7, [r3, #16]
     cd8:	ldr	r3, [fp, #-24]	; 0xffffffe8
     cdc:	b	1234 <coda_expression_new+0x628>
     ce0:	ldr	r3, [fp, #-24]	; 0xffffffe8
     ce4:	ldr	r3, [r3]
     ce8:	cmp	r3, #20
     cec:	bne	d10 <coda_expression_new+0x104>
     cf0:	ldr	r3, [fp, #-24]	; 0xffffffe8
     cf4:	ldrd	r2, [r3, #16]
     cf8:	rsbs	r2, r2, #0
     cfc:	rsc	r3, r3, #0
     d00:	ldr	r1, [fp, #-24]	; 0xffffffe8
     d04:	strd	r2, [r1, #16]
     d08:	ldr	r3, [fp, #-24]	; 0xffffffe8
     d0c:	b	1234 <coda_expression_new+0x628>
     d10:	mov	r0, #32
     d14:	bl	0 <malloc>
     d18:	mov	r3, r0
     d1c:	str	r3, [fp, #-8]
     d20:	ldr	r3, [fp, #-8]
     d24:	cmp	r3, #0
     d28:	bne	dbc <coda_expression_new+0x1b0>
     d2c:	movw	r3, #387	; 0x183
     d30:	str	r3, [sp]
     d34:	movw	r3, #0
     d38:	movt	r3, #0
     d3c:	mov	r2, #32
     d40:	movw	r1, #0
     d44:	movt	r1, #0
     d48:	mvn	r0, #0
     d4c:	bl	0 <coda_set_error>
     d50:	ldr	r3, [fp, #-20]	; 0xffffffec
     d54:	cmp	r3, #0
     d58:	beq	d64 <coda_expression_new+0x158>
     d5c:	ldr	r0, [fp, #-20]	; 0xffffffec
     d60:	bl	0 <free>
     d64:	ldr	r3, [fp, #-24]	; 0xffffffe8
     d68:	cmp	r3, #0
     d6c:	beq	d78 <coda_expression_new+0x16c>
     d70:	ldr	r0, [fp, #-24]	; 0xffffffe8
     d74:	bl	c960 <coda_expression_delete>
     d78:	ldr	r3, [fp, #-28]	; 0xffffffe4
     d7c:	cmp	r3, #0
     d80:	beq	d8c <coda_expression_new+0x180>
     d84:	ldr	r0, [fp, #-28]	; 0xffffffe4
     d88:	bl	c960 <coda_expression_delete>
     d8c:	ldr	r3, [fp, #4]
     d90:	cmp	r3, #0
     d94:	beq	da0 <coda_expression_new+0x194>
     d98:	ldr	r0, [fp, #4]
     d9c:	bl	c960 <coda_expression_delete>
     da0:	ldr	r3, [fp, #8]
     da4:	cmp	r3, #0
     da8:	beq	db4 <coda_expression_new+0x1a8>
     dac:	ldr	r0, [fp, #8]
     db0:	bl	c960 <coda_expression_delete>
     db4:	mov	r3, #0
     db8:	b	1234 <coda_expression_new+0x628>
     dbc:	ldr	r3, [fp, #-8]
     dc0:	ldr	r2, [fp, #-16]
     dc4:	str	r2, [r3]
     dc8:	ldr	r3, [fp, #-8]
     dcc:	ldr	r2, [fp, #-20]	; 0xffffffec
     dd0:	str	r2, [r3, #12]
     dd4:	ldr	r3, [fp, #-8]
     dd8:	ldr	r2, [fp, #-24]	; 0xffffffe8
     ddc:	str	r2, [r3, #16]
     de0:	ldr	r3, [fp, #-8]
     de4:	ldr	r2, [fp, #-28]	; 0xffffffe4
     de8:	str	r2, [r3, #20]
     dec:	ldr	r3, [fp, #-8]
     df0:	ldr	r2, [fp, #4]
     df4:	str	r2, [r3, #24]
     df8:	ldr	r3, [fp, #-8]
     dfc:	ldr	r2, [fp, #8]
     e00:	str	r2, [r3, #28]
     e04:	ldr	r3, [fp, #-16]
     e08:	cmp	r3, #86	; 0x56
     e0c:	ldrls	pc, [pc, r3, lsl #2]
     e10:	b	1088 <coda_expression_new+0x47c>
     e14:	.word	0x00000fd0
     e18:	.word	0x00000fe4
     e1c:	.word	0x00000f90
     e20:	.word	0x00001028
     e24:	.word	0x00000f70
     e28:	.word	0x00000f90
     e2c:	.word	0x00000f70
     e30:	.word	0x00000f90
     e34:	.word	0x00001028
     e38:	.word	0x00001028
     e3c:	.word	0x00000fc0
     e40:	.word	0x00001028
     e44:	.word	0x00000f90
     e48:	.word	0x00000f90
     e4c:	.word	0x00000f90
     e50:	.word	0x00000f90
     e54:	.word	0x00000fa0
     e58:	.word	0x00000f80
     e5c:	.word	0x00001068
     e60:	.word	0x00001068
     e64:	.word	0x00001068
     e68:	.word	0x00001068
     e6c:	.word	0x00001068
     e70:	.word	0x00000f90
     e74:	.word	0x00000fe4
     e78:	.word	0x00000f70
     e7c:	.word	0x00000f70
     e80:	.word	0x00000f90
     e84:	.word	0x00000fa0
     e88:	.word	0x00000f80
     e8c:	.word	0x00000f80
     e90:	.word	0x00000fb0
     e94:	.word	0x00000fc0
     e98:	.word	0x00000fc0
     e9c:	.word	0x00000fc0
     ea0:	.word	0x00000fc0
     ea4:	.word	0x00000fc0
     ea8:	.word	0x00000fc0
     eac:	.word	0x00000fc0
     eb0:	.word	0x00000fb0
     eb4:	.word	0x00000f70
     eb8:	.word	0x00000f70
     ebc:	.word	0x00001028
     ec0:	.word	0x00000f90
     ec4:	.word	0x00000f90
     ec8:	.word	0x00000f90
     ecc:	.word	0x00000f70
     ed0:	.word	0x00000f70
     ed4:	.word	0x00000f70
     ed8:	.word	0x00000f70
     edc:	.word	0x00000f90
     ee0:	.word	0x00000f70
     ee4:	.word	0x00000f70
     ee8:	.word	0x00000f70
     eec:	.word	0x00000f70
     ef0:	.word	0x00000fa0
     ef4:	.word	0x00000fe4
     ef8:	.word	0x00000fe4
     efc:	.word	0x00000fe4
     f00:	.word	0x00000fe4
     f04:	.word	0x00000fd0
     f08:	.word	0x00000f70
     f0c:	.word	0x00000f70
     f10:	.word	0x00000f90
     f14:	.word	0x00000f90
     f18:	.word	0x00000f90
     f1c:	.word	0x00000f80
     f20:	.word	0x00000fa0
     f24:	.word	0x00000fa0
     f28:	.word	0x00000fa0
     f2c:	.word	0x00000f90
     f30:	.word	0x0000103c
     f34:	.word	0x00000f80
     f38:	.word	0x00000fa0
     f3c:	.word	0x00000fb0
     f40:	.word	0x00000fa0
     f44:	.word	0x00000fa0
     f48:	.word	0x00000fa0
     f4c:	.word	0x00000fe4
     f50:	.word	0x00000f80
     f54:	.word	0x00000fa0
     f58:	.word	0x00000f90
     f5c:	.word	0x00000f70
     f60:	.word	0x00000f90
     f64:	.word	0x00000fb0
     f68:	.word	0x00000f90
     f6c:	.word	0x00001028
     f70:	ldr	r3, [fp, #-8]
     f74:	mov	r2, #0
     f78:	str	r2, [r3, #4]
     f7c:	b	1088 <coda_expression_new+0x47c>
     f80:	ldr	r3, [fp, #-8]
     f84:	mov	r2, #2
     f88:	str	r2, [r3, #4]
     f8c:	b	1088 <coda_expression_new+0x47c>
     f90:	ldr	r3, [fp, #-8]
     f94:	mov	r2, #1
     f98:	str	r2, [r3, #4]
     f9c:	b	1088 <coda_expression_new+0x47c>
     fa0:	ldr	r3, [fp, #-8]
     fa4:	mov	r2, #3
     fa8:	str	r2, [r3, #4]
     fac:	b	1088 <coda_expression_new+0x47c>
     fb0:	ldr	r3, [fp, #-8]
     fb4:	mov	r2, #5
     fb8:	str	r2, [r3, #4]
     fbc:	b	1088 <coda_expression_new+0x47c>
     fc0:	ldr	r3, [fp, #-8]
     fc4:	mov	r2, #4
     fc8:	str	r2, [r3, #4]
     fcc:	b	1088 <coda_expression_new+0x47c>
     fd0:	ldr	r3, [fp, #-24]	; 0xffffffe8
     fd4:	ldr	r2, [r3, #4]
     fd8:	ldr	r3, [fp, #-8]
     fdc:	str	r2, [r3, #4]
     fe0:	b	1088 <coda_expression_new+0x47c>
     fe4:	ldr	r3, [fp, #-24]	; 0xffffffe8
     fe8:	ldr	r3, [r3, #4]
     fec:	cmp	r3, #2
     ff0:	beq	1004 <coda_expression_new+0x3f8>
     ff4:	ldr	r3, [fp, #-28]	; 0xffffffe4
     ff8:	ldr	r3, [r3, #4]
     ffc:	cmp	r3, #2
    1000:	bne	1014 <coda_expression_new+0x408>
    1004:	ldr	r3, [fp, #-8]
    1008:	mov	r2, #2
    100c:	str	r2, [r3, #4]
    1010:	b	1088 <coda_expression_new+0x47c>
    1014:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1018:	ldr	r2, [r3, #4]
    101c:	ldr	r3, [fp, #-8]
    1020:	str	r2, [r3, #4]
    1024:	b	1088 <coda_expression_new+0x47c>
    1028:	ldr	r3, [fp, #-28]	; 0xffffffe4
    102c:	ldr	r2, [r3, #4]
    1030:	ldr	r3, [fp, #-8]
    1034:	str	r2, [r3, #4]
    1038:	b	1088 <coda_expression_new+0x47c>
    103c:	ldr	r3, [fp, #4]
    1040:	cmp	r3, #0
    1044:	bne	1058 <coda_expression_new+0x44c>
    1048:	ldr	r3, [fp, #-8]
    104c:	mov	r2, #0
    1050:	str	r2, [r3, #4]
    1054:	b	1088 <coda_expression_new+0x47c>
    1058:	ldr	r3, [fp, #-8]
    105c:	mov	r2, #3
    1060:	str	r2, [r3, #4]
    1064:	b	1088 <coda_expression_new+0x47c>
    1068:	movw	r3, #0
    106c:	movt	r3, #0
    1070:	movw	r2, #541	; 0x21d
    1074:	movw	r1, #0
    1078:	movt	r1, #0
    107c:	movw	r0, #0
    1080:	movt	r0, #0
    1084:	bl	0 <__assert_fail>
    1088:	ldr	r3, [fp, #-8]
    108c:	ldr	r3, [r3]
    1090:	sub	r3, r3, #27
    1094:	cmp	r3, #58	; 0x3a
    1098:	ldrls	pc, [pc, r3, lsl #2]
    109c:	b	119c <coda_expression_new+0x590>
    10a0:	.word	0x0000118c
    10a4:	.word	0x0000118c
    10a8:	.word	0x0000119c
    10ac:	.word	0x0000119c
    10b0:	.word	0x0000119c
    10b4:	.word	0x0000119c
    10b8:	.word	0x0000119c
    10bc:	.word	0x0000119c
    10c0:	.word	0x0000119c
    10c4:	.word	0x0000119c
    10c8:	.word	0x0000119c
    10cc:	.word	0x0000119c
    10d0:	.word	0x0000119c
    10d4:	.word	0x0000119c
    10d8:	.word	0x0000119c
    10dc:	.word	0x0000119c
    10e0:	.word	0x0000119c
    10e4:	.word	0x0000119c
    10e8:	.word	0x0000119c
    10ec:	.word	0x0000119c
    10f0:	.word	0x0000119c
    10f4:	.word	0x0000119c
    10f8:	.word	0x0000119c
    10fc:	.word	0x0000119c
    1100:	.word	0x0000119c
    1104:	.word	0x0000119c
    1108:	.word	0x0000119c
    110c:	.word	0x0000119c
    1110:	.word	0x0000119c
    1114:	.word	0x0000119c
    1118:	.word	0x0000119c
    111c:	.word	0x0000119c
    1120:	.word	0x0000119c
    1124:	.word	0x0000119c
    1128:	.word	0x0000119c
    112c:	.word	0x0000119c
    1130:	.word	0x0000119c
    1134:	.word	0x0000119c
    1138:	.word	0x0000119c
    113c:	.word	0x0000119c
    1140:	.word	0x0000118c
    1144:	.word	0x0000118c
    1148:	.word	0x0000118c
    114c:	.word	0x0000118c
    1150:	.word	0x0000119c
    1154:	.word	0x0000119c
    1158:	.word	0x0000119c
    115c:	.word	0x0000119c
    1160:	.word	0x0000119c
    1164:	.word	0x0000119c
    1168:	.word	0x0000119c
    116c:	.word	0x0000119c
    1170:	.word	0x0000119c
    1174:	.word	0x0000119c
    1178:	.word	0x0000119c
    117c:	.word	0x0000119c
    1180:	.word	0x0000118c
    1184:	.word	0x0000118c
    1188:	.word	0x0000118c
    118c:	ldr	r3, [fp, #-8]
    1190:	mov	r2, #0
    1194:	str	r2, [r3, #8]
    1198:	b	1230 <coda_expression_new+0x624>
    119c:	ldr	r3, [fp, #-8]
    11a0:	ldr	r3, [r3, #4]
    11a4:	cmp	r3, #4
    11a8:	beq	1224 <coda_expression_new+0x618>
    11ac:	ldr	r3, [fp, #-24]	; 0xffffffe8
    11b0:	cmp	r3, #0
    11b4:	beq	11c8 <coda_expression_new+0x5bc>
    11b8:	ldr	r3, [fp, #-24]	; 0xffffffe8
    11bc:	ldr	r3, [r3, #8]
    11c0:	cmp	r3, #0
    11c4:	beq	1224 <coda_expression_new+0x618>
    11c8:	ldr	r3, [fp, #-28]	; 0xffffffe4
    11cc:	cmp	r3, #0
    11d0:	beq	11e4 <coda_expression_new+0x5d8>
    11d4:	ldr	r3, [fp, #-28]	; 0xffffffe4
    11d8:	ldr	r3, [r3, #8]
    11dc:	cmp	r3, #0
    11e0:	beq	1224 <coda_expression_new+0x618>
    11e4:	ldr	r3, [fp, #4]
    11e8:	cmp	r3, #0
    11ec:	beq	1200 <coda_expression_new+0x5f4>
    11f0:	ldr	r3, [fp, #4]
    11f4:	ldr	r3, [r3, #8]
    11f8:	cmp	r3, #0
    11fc:	beq	1224 <coda_expression_new+0x618>
    1200:	ldr	r3, [fp, #8]
    1204:	cmp	r3, #0
    1208:	beq	121c <coda_expression_new+0x610>
    120c:	ldr	r3, [fp, #8]
    1210:	ldr	r3, [r3, #8]
    1214:	cmp	r3, #0
    1218:	beq	1224 <coda_expression_new+0x618>
    121c:	mov	r2, #1
    1220:	b	1228 <coda_expression_new+0x61c>
    1224:	mov	r2, #0
    1228:	ldr	r3, [fp, #-8]
    122c:	str	r2, [r3, #8]
    1230:	ldr	r3, [fp, #-8]
    1234:	mov	r0, r3
    1238:	sub	sp, fp, #4
    123c:	ldr	fp, [sp]
    1240:	add	sp, sp, #4
    1244:	pop	{pc}		; (ldr pc, [sp], #4)

00001248 <init_eval_info>:
    1248:	str	fp, [sp, #-8]!
    124c:	str	lr, [sp, #4]
    1250:	add	fp, sp, #4
    1254:	sub	sp, sp, #8
    1258:	str	r0, [fp, #-8]
    125c:	str	r1, [fp, #-12]
    1260:	ldr	r3, [fp, #-8]
    1264:	ldr	r2, [fp, #-12]
    1268:	str	r2, [r3]
    126c:	ldr	r3, [fp, #-12]
    1270:	cmp	r3, #0
    1274:	beq	1294 <init_eval_info+0x4c>
    1278:	ldr	r3, [fp, #-8]
    127c:	ldr	r2, [fp, #-12]
    1280:	add	r3, r3, #8
    1284:	mov	r1, r2
    1288:	mov	r2, #520	; 0x208
    128c:	mov	r0, r3
    1290:	bl	0 <memcpy>
    1294:	ldr	r3, [fp, #-8]
    1298:	add	r3, r3, #528	; 0x210
    129c:	mov	r1, r3
    12a0:	mov	r2, #0
    12a4:	mov	r3, #0
    12a8:	strd	r2, [r1]
    12ac:	ldr	r3, [fp, #-8]
    12b0:	add	r3, r3, #544	; 0x220
    12b4:	mov	r1, r3
    12b8:	mov	r2, #0
    12bc:	mov	r3, #0
    12c0:	strd	r2, [r1, #-8]
    12c4:	ldr	r3, [fp, #-8]
    12c8:	add	r3, r3, #544	; 0x220
    12cc:	mov	r1, r3
    12d0:	mov	r2, #0
    12d4:	mov	r3, #0
    12d8:	strd	r2, [r1]
    12dc:	ldr	r3, [fp, #-8]
    12e0:	add	r3, r3, #560	; 0x230
    12e4:	mov	r1, r3
    12e8:	mov	r2, #0
    12ec:	mov	r3, #0
    12f0:	strd	r2, [r1, #-8]
    12f4:	ldr	r3, [fp, #-8]
    12f8:	mov	r2, #0
    12fc:	str	r2, [r3, #560]	; 0x230
    1300:	nop	{0}
    1304:	sub	sp, fp, #4
    1308:	ldr	fp, [sp]
    130c:	add	sp, sp, #4
    1310:	pop	{pc}		; (ldr pc, [sp], #4)

00001314 <eval_boolean>:
    1314:	str	fp, [sp, #-8]!
    1318:	str	lr, [sp, #4]
    131c:	add	fp, sp, #4
    1320:	sub	sp, sp, #1024	; 0x400
    1324:	sub	sp, sp, #8
    1328:	str	r0, [fp, #-1008]	; 0xfffffc10
    132c:	str	r1, [fp, #-1012]	; 0xfffffc0c
    1330:	str	r2, [fp, #-1016]	; 0xfffffc08
    1334:	ldr	r3, [fp, #-1012]	; 0xfffffc0c
    1338:	ldr	r3, [r3]
    133c:	cmp	r3, #18
    1340:	bne	135c <eval_boolean+0x48>
    1344:	ldr	r3, [fp, #-1012]	; 0xfffffc0c
    1348:	ldr	r2, [r3, #12]
    134c:	ldr	r3, [fp, #-1016]	; 0xfffffc08
    1350:	str	r2, [r3]
    1354:	mov	r3, #0
    1358:	b	3130 <eval_boolean+0x1e1c>
    135c:	ldr	r3, [fp, #-1012]	; 0xfffffc0c
    1360:	str	r3, [fp, #-24]	; 0xffffffe8
    1364:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1368:	ldr	r3, [r3]
    136c:	sub	r3, r3, #4
    1370:	cmp	r3, #82	; 0x52
    1374:	ldrls	pc, [pc, r3, lsl #2]
    1378:	b	30c8 <eval_boolean+0x1db4>
    137c:	.word	0x00002a28
    1380:	.word	0x000030c8
    1384:	.word	0x00002bd0
    1388:	.word	0x000030c8
    138c:	.word	0x000030c8
    1390:	.word	0x000030c8
    1394:	.word	0x000030c8
    1398:	.word	0x00002f58
    139c:	.word	0x000030c8
    13a0:	.word	0x000030c8
    13a4:	.word	0x000030c8
    13a8:	.word	0x000030c8
    13ac:	.word	0x000030c8
    13b0:	.word	0x000030c8
    13b4:	.word	0x000030c8
    13b8:	.word	0x000030c8
    13bc:	.word	0x000030c8
    13c0:	.word	0x000030c8
    13c4:	.word	0x000030c8
    13c8:	.word	0x000030c8
    13cc:	.word	0x000030c8
    13d0:	.word	0x000014c8
    13d4:	.word	0x00002898
    13d8:	.word	0x000030c8
    13dc:	.word	0x000030c8
    13e0:	.word	0x000030c8
    13e4:	.word	0x000030c8
    13e8:	.word	0x000030c8
    13ec:	.word	0x000030c8
    13f0:	.word	0x000030c8
    13f4:	.word	0x000030c8
    13f8:	.word	0x000030c8
    13fc:	.word	0x000030c8
    1400:	.word	0x000030c8
    1404:	.word	0x000030c8
    1408:	.word	0x000030c8
    140c:	.word	0x00001c30
    1410:	.word	0x000019b8
    1414:	.word	0x00002ec8
    1418:	.word	0x000030c8
    141c:	.word	0x000030c8
    1420:	.word	0x000030c8
    1424:	.word	0x00002518
    1428:	.word	0x000025a8
    142c:	.word	0x000024d0
    1430:	.word	0x00002560
    1434:	.word	0x000030c8
    1438:	.word	0x0000211c
    143c:	.word	0x00001ea4
    1440:	.word	0x000023f0
    1444:	.word	0x00002460
    1448:	.word	0x000030c8
    144c:	.word	0x000030c8
    1450:	.word	0x000030c8
    1454:	.word	0x000030c8
    1458:	.word	0x000030c8
    145c:	.word	0x000030c8
    1460:	.word	0x00001740
    1464:	.word	0x0000239c
    1468:	.word	0x000030c8
    146c:	.word	0x000030c8
    1470:	.word	0x000030c8
    1474:	.word	0x000030c8
    1478:	.word	0x000030c8
    147c:	.word	0x000030c8
    1480:	.word	0x000030c8
    1484:	.word	0x000030c8
    1488:	.word	0x000025f0
    148c:	.word	0x000030c8
    1490:	.word	0x000030c8
    1494:	.word	0x000030c8
    1498:	.word	0x000030c8
    149c:	.word	0x000030c8
    14a0:	.word	0x000030c8
    14a4:	.word	0x000030c8
    14a8:	.word	0x000030c8
    14ac:	.word	0x000030c8
    14b0:	.word	0x000030c8
    14b4:	.word	0x00002d78
    14b8:	.word	0x000030c8
    14bc:	.word	0x000030c8
    14c0:	.word	0x000030c8
    14c4:	.word	0x00003010
    14c8:	ldr	r3, [fp, #-24]	; 0xffffffe8
    14cc:	ldr	r3, [r3, #16]
    14d0:	ldr	r3, [r3, #4]
    14d4:	cmp	r3, #2
    14d8:	beq	14f0 <eval_boolean+0x1dc>
    14dc:	ldr	r3, [fp, #-24]	; 0xffffffe8
    14e0:	ldr	r3, [r3, #20]
    14e4:	ldr	r3, [r3, #4]
    14e8:	cmp	r3, #2
    14ec:	bne	1578 <eval_boolean+0x264>
    14f0:	ldr	r3, [fp, #-24]	; 0xffffffe8
    14f4:	ldr	r3, [r3, #16]
    14f8:	sub	r2, fp, #52	; 0x34
    14fc:	mov	r1, r3
    1500:	ldr	r0, [fp, #-1008]	; 0xfffffc10
    1504:	bl	314c <eval_float>
    1508:	mov	r3, r0
    150c:	cmp	r3, #0
    1510:	beq	151c <eval_boolean+0x208>
    1514:	mvn	r3, #0
    1518:	b	3130 <eval_boolean+0x1e1c>
    151c:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1520:	ldr	r3, [r3, #20]
    1524:	sub	r2, fp, #60	; 0x3c
    1528:	mov	r1, r3
    152c:	ldr	r0, [fp, #-1008]	; 0xfffffc10
    1530:	bl	314c <eval_float>
    1534:	mov	r3, r0
    1538:	cmp	r3, #0
    153c:	beq	1548 <eval_boolean+0x234>
    1540:	mvn	r3, #0
    1544:	b	3130 <eval_boolean+0x1e1c>
    1548:	vldr	d6, [fp, #-52]	; 0xffffffcc
    154c:	vldr	d7, [fp, #-60]	; 0xffffffc4
    1550:	vcmp.f64	d6, d7
    1554:	vmrs	APSR_nzcv, fpscr
    1558:	moveq	r3, #1
    155c:	movne	r3, #0
    1560:	uxtb	r3, r3
    1564:	mov	r2, r3
    1568:	ldr	r3, [fp, #-1016]	; 0xfffffc08
    156c:	str	r2, [r3]
    1570:	nop	{0}
    1574:	b	30e8 <eval_boolean+0x1dd4>
    1578:	ldr	r3, [fp, #-24]	; 0xffffffe8
    157c:	ldr	r3, [r3, #16]
    1580:	ldr	r3, [r3, #4]
    1584:	cmp	r3, #1
    1588:	bne	1610 <eval_boolean+0x2fc>
    158c:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1590:	ldr	r3, [r3, #16]
    1594:	sub	r2, fp, #68	; 0x44
    1598:	mov	r1, r3
    159c:	ldr	r0, [fp, #-1008]	; 0xfffffc10
    15a0:	bl	4510 <eval_integer>
    15a4:	mov	r3, r0
    15a8:	cmp	r3, #0
    15ac:	beq	15b8 <eval_boolean+0x2a4>
    15b0:	mvn	r3, #0
    15b4:	b	3130 <eval_boolean+0x1e1c>
    15b8:	ldr	r3, [fp, #-24]	; 0xffffffe8
    15bc:	ldr	r3, [r3, #20]
    15c0:	sub	r2, fp, #76	; 0x4c
    15c4:	mov	r1, r3
    15c8:	ldr	r0, [fp, #-1008]	; 0xfffffc10
    15cc:	bl	4510 <eval_integer>
    15d0:	mov	r3, r0
    15d4:	cmp	r3, #0
    15d8:	beq	15e4 <eval_boolean+0x2d0>
    15dc:	mvn	r3, #0
    15e0:	b	3130 <eval_boolean+0x1e1c>
    15e4:	ldrd	r0, [fp, #-68]	; 0xffffffbc
    15e8:	ldrd	r2, [fp, #-76]	; 0xffffffb4
    15ec:	cmp	r1, r3
    15f0:	cmpeq	r0, r2
    15f4:	moveq	r3, #1
    15f8:	movne	r3, #0
    15fc:	uxtb	r3, r3
    1600:	mov	r2, r3
    1604:	ldr	r3, [fp, #-1016]	; 0xfffffc08
    1608:	str	r2, [r3]
    160c:	b	30e8 <eval_boolean+0x1dd4>
    1610:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1614:	ldr	r3, [r3, #16]
    1618:	ldr	r3, [r3, #4]
    161c:	cmp	r3, #3
    1620:	bne	1720 <eval_boolean+0x40c>
    1624:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1628:	ldr	r1, [r3, #16]
    162c:	sub	r0, fp, #88	; 0x58
    1630:	sub	r2, fp, #80	; 0x50
    1634:	sub	r3, fp, #96	; 0x60
    1638:	str	r3, [sp]
    163c:	mov	r3, r0
    1640:	ldr	r0, [fp, #-1008]	; 0xfffffc10
    1644:	bl	684c <eval_string>
    1648:	mov	r3, r0
    164c:	cmp	r3, #0
    1650:	beq	165c <eval_boolean+0x348>
    1654:	mvn	r3, #0
    1658:	b	3130 <eval_boolean+0x1e1c>
    165c:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1660:	ldr	r1, [r3, #20]
    1664:	sub	r0, fp, #92	; 0x5c
    1668:	sub	r2, fp, #84	; 0x54
    166c:	sub	r3, fp, #100	; 0x64
    1670:	str	r3, [sp]
    1674:	mov	r3, r0
    1678:	ldr	r0, [fp, #-1008]	; 0xfffffc10
    167c:	bl	684c <eval_string>
    1680:	mov	r3, r0
    1684:	cmp	r3, #0
    1688:	beq	16a0 <eval_boolean+0x38c>
    168c:	ldr	r3, [fp, #-96]	; 0xffffffa0
    1690:	mov	r0, r3
    1694:	bl	0 <free>
    1698:	mvn	r3, #0
    169c:	b	3130 <eval_boolean+0x1e1c>
    16a0:	ldr	r0, [fp, #-80]	; 0xffffffb0
    16a4:	ldr	r1, [fp, #-88]	; 0xffffffa8
    16a8:	ldr	ip, [fp, #-96]	; 0xffffffa0
    16ac:	ldr	lr, [fp, #-84]	; 0xffffffac
    16b0:	ldr	r3, [fp, #-92]	; 0xffffffa4
    16b4:	ldr	r2, [fp, #-100]	; 0xffffff9c
    16b8:	str	r2, [sp, #4]
    16bc:	str	r3, [sp]
    16c0:	mov	r3, lr
    16c4:	mov	r2, ip
    16c8:	bl	110 <compare_strings>
    16cc:	mov	r3, r0
    16d0:	cmp	r3, #0
    16d4:	moveq	r3, #1
    16d8:	movne	r3, #0
    16dc:	uxtb	r3, r3
    16e0:	mov	r2, r3
    16e4:	ldr	r3, [fp, #-1016]	; 0xfffffc08
    16e8:	str	r2, [r3]
    16ec:	ldr	r3, [fp, #-88]	; 0xffffffa8
    16f0:	cmp	r3, #0
    16f4:	ble	1704 <eval_boolean+0x3f0>
    16f8:	ldr	r3, [fp, #-96]	; 0xffffffa0
    16fc:	mov	r0, r3
    1700:	bl	0 <free>
    1704:	ldr	r3, [fp, #-92]	; 0xffffffa4
    1708:	cmp	r3, #0
    170c:	ble	30e8 <eval_boolean+0x1dd4>
    1710:	ldr	r3, [fp, #-100]	; 0xffffff9c
    1714:	mov	r0, r3
    1718:	bl	0 <free>
    171c:	b	30e8 <eval_boolean+0x1dd4>
    1720:	movw	r3, #0
    1724:	movt	r3, #0
    1728:	mov	r2, #668	; 0x29c
    172c:	movw	r1, #0
    1730:	movt	r1, #0
    1734:	movw	r0, #0
    1738:	movt	r0, #0
    173c:	bl	0 <__assert_fail>
    1740:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1744:	ldr	r3, [r3, #16]
    1748:	ldr	r3, [r3, #4]
    174c:	cmp	r3, #2
    1750:	beq	1768 <eval_boolean+0x454>
    1754:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1758:	ldr	r3, [r3, #20]
    175c:	ldr	r3, [r3, #4]
    1760:	cmp	r3, #2
    1764:	bne	17f0 <eval_boolean+0x4dc>
    1768:	ldr	r3, [fp, #-24]	; 0xffffffe8
    176c:	ldr	r3, [r3, #16]
    1770:	sub	r2, fp, #108	; 0x6c
    1774:	mov	r1, r3
    1778:	ldr	r0, [fp, #-1008]	; 0xfffffc10
    177c:	bl	314c <eval_float>
    1780:	mov	r3, r0
    1784:	cmp	r3, #0
    1788:	beq	1794 <eval_boolean+0x480>
    178c:	mvn	r3, #0
    1790:	b	3130 <eval_boolean+0x1e1c>
    1794:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1798:	ldr	r3, [r3, #20]
    179c:	sub	r2, fp, #116	; 0x74
    17a0:	mov	r1, r3
    17a4:	ldr	r0, [fp, #-1008]	; 0xfffffc10
    17a8:	bl	314c <eval_float>
    17ac:	mov	r3, r0
    17b0:	cmp	r3, #0
    17b4:	beq	17c0 <eval_boolean+0x4ac>
    17b8:	mvn	r3, #0
    17bc:	b	3130 <eval_boolean+0x1e1c>
    17c0:	vldr	d6, [fp, #-108]	; 0xffffff94
    17c4:	vldr	d7, [fp, #-116]	; 0xffffff8c
    17c8:	vcmp.f64	d6, d7
    17cc:	vmrs	APSR_nzcv, fpscr
    17d0:	movne	r3, #1
    17d4:	moveq	r3, #0
    17d8:	uxtb	r3, r3
    17dc:	mov	r2, r3
    17e0:	ldr	r3, [fp, #-1016]	; 0xfffffc08
    17e4:	str	r2, [r3]
    17e8:	nop	{0}
    17ec:	b	30f0 <eval_boolean+0x1ddc>
    17f0:	ldr	r3, [fp, #-24]	; 0xffffffe8
    17f4:	ldr	r3, [r3, #16]
    17f8:	ldr	r3, [r3, #4]
    17fc:	cmp	r3, #1
    1800:	bne	1888 <eval_boolean+0x574>
    1804:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1808:	ldr	r3, [r3, #16]
    180c:	sub	r2, fp, #124	; 0x7c
    1810:	mov	r1, r3
    1814:	ldr	r0, [fp, #-1008]	; 0xfffffc10
    1818:	bl	4510 <eval_integer>
    181c:	mov	r3, r0
    1820:	cmp	r3, #0
    1824:	beq	1830 <eval_boolean+0x51c>
    1828:	mvn	r3, #0
    182c:	b	3130 <eval_boolean+0x1e1c>
    1830:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1834:	ldr	r3, [r3, #20]
    1838:	sub	r2, fp, #132	; 0x84
    183c:	mov	r1, r3
    1840:	ldr	r0, [fp, #-1008]	; 0xfffffc10
    1844:	bl	4510 <eval_integer>
    1848:	mov	r3, r0
    184c:	cmp	r3, #0
    1850:	beq	185c <eval_boolean+0x548>
    1854:	mvn	r3, #0
    1858:	b	3130 <eval_boolean+0x1e1c>
    185c:	ldrd	r0, [fp, #-124]	; 0xffffff84
    1860:	ldrd	r2, [fp, #-132]	; 0xffffff7c
    1864:	cmp	r1, r3
    1868:	cmpeq	r0, r2
    186c:	movne	r3, #1
    1870:	moveq	r3, #0
    1874:	uxtb	r3, r3
    1878:	mov	r2, r3
    187c:	ldr	r3, [fp, #-1016]	; 0xfffffc08
    1880:	str	r2, [r3]
    1884:	b	30f0 <eval_boolean+0x1ddc>
    1888:	ldr	r3, [fp, #-24]	; 0xffffffe8
    188c:	ldr	r3, [r3, #16]
    1890:	ldr	r3, [r3, #4]
    1894:	cmp	r3, #3
    1898:	bne	1998 <eval_boolean+0x684>
    189c:	ldr	r3, [fp, #-24]	; 0xffffffe8
    18a0:	ldr	r1, [r3, #16]
    18a4:	sub	r0, fp, #144	; 0x90
    18a8:	sub	r2, fp, #136	; 0x88
    18ac:	sub	r3, fp, #152	; 0x98
    18b0:	str	r3, [sp]
    18b4:	mov	r3, r0
    18b8:	ldr	r0, [fp, #-1008]	; 0xfffffc10
    18bc:	bl	684c <eval_string>
    18c0:	mov	r3, r0
    18c4:	cmp	r3, #0
    18c8:	beq	18d4 <eval_boolean+0x5c0>
    18cc:	mvn	r3, #0
    18d0:	b	3130 <eval_boolean+0x1e1c>
    18d4:	ldr	r3, [fp, #-24]	; 0xffffffe8
    18d8:	ldr	r1, [r3, #20]
    18dc:	sub	r0, fp, #148	; 0x94
    18e0:	sub	r2, fp, #140	; 0x8c
    18e4:	sub	r3, fp, #156	; 0x9c
    18e8:	str	r3, [sp]
    18ec:	mov	r3, r0
    18f0:	ldr	r0, [fp, #-1008]	; 0xfffffc10
    18f4:	bl	684c <eval_string>
    18f8:	mov	r3, r0
    18fc:	cmp	r3, #0
    1900:	beq	1918 <eval_boolean+0x604>
    1904:	ldr	r3, [fp, #-152]	; 0xffffff68
    1908:	mov	r0, r3
    190c:	bl	0 <free>
    1910:	mvn	r3, #0
    1914:	b	3130 <eval_boolean+0x1e1c>
    1918:	ldr	r0, [fp, #-136]	; 0xffffff78
    191c:	ldr	r1, [fp, #-144]	; 0xffffff70
    1920:	ldr	ip, [fp, #-152]	; 0xffffff68
    1924:	ldr	lr, [fp, #-140]	; 0xffffff74
    1928:	ldr	r3, [fp, #-148]	; 0xffffff6c
    192c:	ldr	r2, [fp, #-156]	; 0xffffff64
    1930:	str	r2, [sp, #4]
    1934:	str	r3, [sp]
    1938:	mov	r3, lr
    193c:	mov	r2, ip
    1940:	bl	110 <compare_strings>
    1944:	mov	r3, r0
    1948:	cmp	r3, #0
    194c:	movne	r3, #1
    1950:	moveq	r3, #0
    1954:	uxtb	r3, r3
    1958:	mov	r2, r3
    195c:	ldr	r3, [fp, #-1016]	; 0xfffffc08
    1960:	str	r2, [r3]
    1964:	ldr	r3, [fp, #-144]	; 0xffffff70
    1968:	cmp	r3, #0
    196c:	ble	197c <eval_boolean+0x668>
    1970:	ldr	r3, [fp, #-152]	; 0xffffff68
    1974:	mov	r0, r3
    1978:	bl	0 <free>
    197c:	ldr	r3, [fp, #-148]	; 0xffffff6c
    1980:	cmp	r3, #0
    1984:	ble	30f0 <eval_boolean+0x1ddc>
    1988:	ldr	r3, [fp, #-156]	; 0xffffff64
    198c:	mov	r0, r3
    1990:	bl	0 <free>
    1994:	b	30f0 <eval_boolean+0x1ddc>
    1998:	movw	r3, #0
    199c:	movt	r3, #0
    19a0:	movw	r2, #730	; 0x2da
    19a4:	movw	r1, #0
    19a8:	movt	r1, #0
    19ac:	movw	r0, #0
    19b0:	movt	r0, #0
    19b4:	bl	0 <__assert_fail>
    19b8:	ldr	r3, [fp, #-24]	; 0xffffffe8
    19bc:	ldr	r3, [r3, #16]
    19c0:	ldr	r3, [r3, #4]
    19c4:	cmp	r3, #2
    19c8:	beq	19e0 <eval_boolean+0x6cc>
    19cc:	ldr	r3, [fp, #-24]	; 0xffffffe8
    19d0:	ldr	r3, [r3, #20]
    19d4:	ldr	r3, [r3, #4]
    19d8:	cmp	r3, #2
    19dc:	bne	1a68 <eval_boolean+0x754>
    19e0:	ldr	r3, [fp, #-24]	; 0xffffffe8
    19e4:	ldr	r3, [r3, #16]
    19e8:	sub	r2, fp, #164	; 0xa4
    19ec:	mov	r1, r3
    19f0:	ldr	r0, [fp, #-1008]	; 0xfffffc10
    19f4:	bl	314c <eval_float>
    19f8:	mov	r3, r0
    19fc:	cmp	r3, #0
    1a00:	beq	1a0c <eval_boolean+0x6f8>
    1a04:	mvn	r3, #0
    1a08:	b	3130 <eval_boolean+0x1e1c>
    1a0c:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1a10:	ldr	r3, [r3, #20]
    1a14:	sub	r2, fp, #172	; 0xac
    1a18:	mov	r1, r3
    1a1c:	ldr	r0, [fp, #-1008]	; 0xfffffc10
    1a20:	bl	314c <eval_float>
    1a24:	mov	r3, r0
    1a28:	cmp	r3, #0
    1a2c:	beq	1a38 <eval_boolean+0x724>
    1a30:	mvn	r3, #0
    1a34:	b	3130 <eval_boolean+0x1e1c>
    1a38:	vldr	d6, [fp, #-164]	; 0xffffff5c
    1a3c:	vldr	d7, [fp, #-172]	; 0xffffff54
    1a40:	vcmpe.f64	d6, d7
    1a44:	vmrs	APSR_nzcv, fpscr
    1a48:	movgt	r3, #1
    1a4c:	movle	r3, #0
    1a50:	uxtb	r3, r3
    1a54:	mov	r2, r3
    1a58:	ldr	r3, [fp, #-1016]	; 0xfffffc08
    1a5c:	str	r2, [r3]
    1a60:	nop	{0}
    1a64:	b	30f8 <eval_boolean+0x1de4>
    1a68:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1a6c:	ldr	r3, [r3, #16]
    1a70:	ldr	r3, [r3, #4]
    1a74:	cmp	r3, #1
    1a78:	bne	1b00 <eval_boolean+0x7ec>
    1a7c:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1a80:	ldr	r3, [r3, #16]
    1a84:	sub	r2, fp, #180	; 0xb4
    1a88:	mov	r1, r3
    1a8c:	ldr	r0, [fp, #-1008]	; 0xfffffc10
    1a90:	bl	4510 <eval_integer>
    1a94:	mov	r3, r0
    1a98:	cmp	r3, #0
    1a9c:	beq	1aa8 <eval_boolean+0x794>
    1aa0:	mvn	r3, #0
    1aa4:	b	3130 <eval_boolean+0x1e1c>
    1aa8:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1aac:	ldr	r3, [r3, #20]
    1ab0:	sub	r2, fp, #188	; 0xbc
    1ab4:	mov	r1, r3
    1ab8:	ldr	r0, [fp, #-1008]	; 0xfffffc10
    1abc:	bl	4510 <eval_integer>
    1ac0:	mov	r3, r0
    1ac4:	cmp	r3, #0
    1ac8:	beq	1ad4 <eval_boolean+0x7c0>
    1acc:	mvn	r3, #0
    1ad0:	b	3130 <eval_boolean+0x1e1c>
    1ad4:	ldrd	r2, [fp, #-180]	; 0xffffff4c
    1ad8:	ldrd	r0, [fp, #-188]	; 0xffffff44
    1adc:	cmp	r0, r2
    1ae0:	sbcs	r3, r1, r3
    1ae4:	movlt	r3, #1
    1ae8:	movge	r3, #0
    1aec:	uxtb	r3, r3
    1af0:	mov	r2, r3
    1af4:	ldr	r3, [fp, #-1016]	; 0xfffffc08
    1af8:	str	r2, [r3]
    1afc:	b	30f8 <eval_boolean+0x1de4>
    1b00:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1b04:	ldr	r3, [r3, #16]
    1b08:	ldr	r3, [r3, #4]
    1b0c:	cmp	r3, #3
    1b10:	bne	1c10 <eval_boolean+0x8fc>
    1b14:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1b18:	ldr	r1, [r3, #16]
    1b1c:	sub	r0, fp, #200	; 0xc8
    1b20:	sub	r2, fp, #192	; 0xc0
    1b24:	sub	r3, fp, #208	; 0xd0
    1b28:	str	r3, [sp]
    1b2c:	mov	r3, r0
    1b30:	ldr	r0, [fp, #-1008]	; 0xfffffc10
    1b34:	bl	684c <eval_string>
    1b38:	mov	r3, r0
    1b3c:	cmp	r3, #0
    1b40:	beq	1b4c <eval_boolean+0x838>
    1b44:	mvn	r3, #0
    1b48:	b	3130 <eval_boolean+0x1e1c>
    1b4c:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1b50:	ldr	r1, [r3, #20]
    1b54:	sub	r0, fp, #204	; 0xcc
    1b58:	sub	r2, fp, #196	; 0xc4
    1b5c:	sub	r3, fp, #212	; 0xd4
    1b60:	str	r3, [sp]
    1b64:	mov	r3, r0
    1b68:	ldr	r0, [fp, #-1008]	; 0xfffffc10
    1b6c:	bl	684c <eval_string>
    1b70:	mov	r3, r0
    1b74:	cmp	r3, #0
    1b78:	beq	1b90 <eval_boolean+0x87c>
    1b7c:	ldr	r3, [fp, #-208]	; 0xffffff30
    1b80:	mov	r0, r3
    1b84:	bl	0 <free>
    1b88:	mvn	r3, #0
    1b8c:	b	3130 <eval_boolean+0x1e1c>
    1b90:	ldr	r0, [fp, #-192]	; 0xffffff40
    1b94:	ldr	r1, [fp, #-200]	; 0xffffff38
    1b98:	ldr	ip, [fp, #-208]	; 0xffffff30
    1b9c:	ldr	lr, [fp, #-196]	; 0xffffff3c
    1ba0:	ldr	r3, [fp, #-204]	; 0xffffff34
    1ba4:	ldr	r2, [fp, #-212]	; 0xffffff2c
    1ba8:	str	r2, [sp, #4]
    1bac:	str	r3, [sp]
    1bb0:	mov	r3, lr
    1bb4:	mov	r2, ip
    1bb8:	bl	110 <compare_strings>
    1bbc:	mov	r3, r0
    1bc0:	cmp	r3, #0
    1bc4:	movgt	r3, #1
    1bc8:	movle	r3, #0
    1bcc:	uxtb	r3, r3
    1bd0:	mov	r2, r3
    1bd4:	ldr	r3, [fp, #-1016]	; 0xfffffc08
    1bd8:	str	r2, [r3]
    1bdc:	ldr	r3, [fp, #-200]	; 0xffffff38
    1be0:	cmp	r3, #0
    1be4:	ble	1bf4 <eval_boolean+0x8e0>
    1be8:	ldr	r3, [fp, #-208]	; 0xffffff30
    1bec:	mov	r0, r3
    1bf0:	bl	0 <free>
    1bf4:	ldr	r3, [fp, #-204]	; 0xffffff34
    1bf8:	cmp	r3, #0
    1bfc:	ble	30f8 <eval_boolean+0x1de4>
    1c00:	ldr	r3, [fp, #-212]	; 0xffffff2c
    1c04:	mov	r0, r3
    1c08:	bl	0 <free>
    1c0c:	b	30f8 <eval_boolean+0x1de4>
    1c10:	movw	r3, #0
    1c14:	movt	r3, #0
    1c18:	mov	r2, #792	; 0x318
    1c1c:	movw	r1, #0
    1c20:	movt	r1, #0
    1c24:	movw	r0, #0
    1c28:	movt	r0, #0
    1c2c:	bl	0 <__assert_fail>
    1c30:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1c34:	ldr	r3, [r3, #16]
    1c38:	ldr	r3, [r3, #4]
    1c3c:	cmp	r3, #2
    1c40:	beq	1c58 <eval_boolean+0x944>
    1c44:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1c48:	ldr	r3, [r3, #20]
    1c4c:	ldr	r3, [r3, #4]
    1c50:	cmp	r3, #2
    1c54:	bne	1ce0 <eval_boolean+0x9cc>
    1c58:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1c5c:	ldr	r3, [r3, #16]
    1c60:	sub	r2, fp, #220	; 0xdc
    1c64:	mov	r1, r3
    1c68:	ldr	r0, [fp, #-1008]	; 0xfffffc10
    1c6c:	bl	314c <eval_float>
    1c70:	mov	r3, r0
    1c74:	cmp	r3, #0
    1c78:	beq	1c84 <eval_boolean+0x970>
    1c7c:	mvn	r3, #0
    1c80:	b	3130 <eval_boolean+0x1e1c>
    1c84:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1c88:	ldr	r3, [r3, #20]
    1c8c:	sub	r2, fp, #228	; 0xe4
    1c90:	mov	r1, r3
    1c94:	ldr	r0, [fp, #-1008]	; 0xfffffc10
    1c98:	bl	314c <eval_float>
    1c9c:	mov	r3, r0
    1ca0:	cmp	r3, #0
    1ca4:	beq	1cb0 <eval_boolean+0x99c>
    1ca8:	mvn	r3, #0
    1cac:	b	3130 <eval_boolean+0x1e1c>
    1cb0:	vldr	d6, [fp, #-220]	; 0xffffff24
    1cb4:	vldr	d7, [fp, #-228]	; 0xffffff1c
    1cb8:	vcmpe.f64	d6, d7
    1cbc:	vmrs	APSR_nzcv, fpscr
    1cc0:	movge	r3, #1
    1cc4:	movlt	r3, #0
    1cc8:	uxtb	r3, r3
    1ccc:	mov	r2, r3
    1cd0:	ldr	r3, [fp, #-1016]	; 0xfffffc08
    1cd4:	str	r2, [r3]
    1cd8:	nop	{0}
    1cdc:	b	3100 <eval_boolean+0x1dec>
    1ce0:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1ce4:	ldr	r3, [r3, #16]
    1ce8:	ldr	r3, [r3, #4]
    1cec:	cmp	r3, #1
    1cf0:	bne	1d78 <eval_boolean+0xa64>
    1cf4:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1cf8:	ldr	r3, [r3, #16]
    1cfc:	sub	r2, fp, #236	; 0xec
    1d00:	mov	r1, r3
    1d04:	ldr	r0, [fp, #-1008]	; 0xfffffc10
    1d08:	bl	4510 <eval_integer>
    1d0c:	mov	r3, r0
    1d10:	cmp	r3, #0
    1d14:	beq	1d20 <eval_boolean+0xa0c>
    1d18:	mvn	r3, #0
    1d1c:	b	3130 <eval_boolean+0x1e1c>
    1d20:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1d24:	ldr	r3, [r3, #20]
    1d28:	sub	r2, fp, #244	; 0xf4
    1d2c:	mov	r1, r3
    1d30:	ldr	r0, [fp, #-1008]	; 0xfffffc10
    1d34:	bl	4510 <eval_integer>
    1d38:	mov	r3, r0
    1d3c:	cmp	r3, #0
    1d40:	beq	1d4c <eval_boolean+0xa38>
    1d44:	mvn	r3, #0
    1d48:	b	3130 <eval_boolean+0x1e1c>
    1d4c:	ldrd	r0, [fp, #-236]	; 0xffffff14
    1d50:	ldrd	r2, [fp, #-244]	; 0xffffff0c
    1d54:	cmp	r0, r2
    1d58:	sbcs	r3, r1, r3
    1d5c:	movge	r3, #1
    1d60:	movlt	r3, #0
    1d64:	uxtb	r3, r3
    1d68:	mov	r2, r3
    1d6c:	ldr	r3, [fp, #-1016]	; 0xfffffc08
    1d70:	str	r2, [r3]
    1d74:	b	3100 <eval_boolean+0x1dec>
    1d78:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1d7c:	ldr	r3, [r3, #16]
    1d80:	ldr	r3, [r3, #4]
    1d84:	cmp	r3, #3
    1d88:	bne	1e84 <eval_boolean+0xb70>
    1d8c:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1d90:	ldr	r1, [r3, #16]
    1d94:	sub	r0, fp, #256	; 0x100
    1d98:	sub	r2, fp, #248	; 0xf8
    1d9c:	sub	r3, fp, #264	; 0x108
    1da0:	str	r3, [sp]
    1da4:	mov	r3, r0
    1da8:	ldr	r0, [fp, #-1008]	; 0xfffffc10
    1dac:	bl	684c <eval_string>
    1db0:	mov	r3, r0
    1db4:	cmp	r3, #0
    1db8:	beq	1dc4 <eval_boolean+0xab0>
    1dbc:	mvn	r3, #0
    1dc0:	b	3130 <eval_boolean+0x1e1c>
    1dc4:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1dc8:	ldr	r1, [r3, #20]
    1dcc:	sub	r0, fp, #260	; 0x104
    1dd0:	sub	r2, fp, #252	; 0xfc
    1dd4:	sub	r3, fp, #268	; 0x10c
    1dd8:	str	r3, [sp]
    1ddc:	mov	r3, r0
    1de0:	ldr	r0, [fp, #-1008]	; 0xfffffc10
    1de4:	bl	684c <eval_string>
    1de8:	mov	r3, r0
    1dec:	cmp	r3, #0
    1df0:	beq	1e08 <eval_boolean+0xaf4>
    1df4:	ldr	r3, [fp, #-264]	; 0xfffffef8
    1df8:	mov	r0, r3
    1dfc:	bl	0 <free>
    1e00:	mvn	r3, #0
    1e04:	b	3130 <eval_boolean+0x1e1c>
    1e08:	ldr	r0, [fp, #-248]	; 0xffffff08
    1e0c:	ldr	r1, [fp, #-256]	; 0xffffff00
    1e10:	ldr	ip, [fp, #-264]	; 0xfffffef8
    1e14:	ldr	lr, [fp, #-252]	; 0xffffff04
    1e18:	ldr	r3, [fp, #-260]	; 0xfffffefc
    1e1c:	ldr	r2, [fp, #-268]	; 0xfffffef4
    1e20:	str	r2, [sp, #4]
    1e24:	str	r3, [sp]
    1e28:	mov	r3, lr
    1e2c:	mov	r2, ip
    1e30:	bl	110 <compare_strings>
    1e34:	mov	r3, r0
    1e38:	mvn	r3, r3
    1e3c:	lsr	r3, r3, #31
    1e40:	uxtb	r3, r3
    1e44:	mov	r2, r3
    1e48:	ldr	r3, [fp, #-1016]	; 0xfffffc08
    1e4c:	str	r2, [r3]
    1e50:	ldr	r3, [fp, #-256]	; 0xffffff00
    1e54:	cmp	r3, #0
    1e58:	ble	1e68 <eval_boolean+0xb54>
    1e5c:	ldr	r3, [fp, #-264]	; 0xfffffef8
    1e60:	mov	r0, r3
    1e64:	bl	0 <free>
    1e68:	ldr	r3, [fp, #-260]	; 0xfffffefc
    1e6c:	cmp	r3, #0
    1e70:	ble	3100 <eval_boolean+0x1dec>
    1e74:	ldr	r3, [fp, #-268]	; 0xfffffef4
    1e78:	mov	r0, r3
    1e7c:	bl	0 <free>
    1e80:	b	3100 <eval_boolean+0x1dec>
    1e84:	movw	r3, #0
    1e88:	movt	r3, #0
    1e8c:	movw	r2, #854	; 0x356
    1e90:	movw	r1, #0
    1e94:	movt	r1, #0
    1e98:	movw	r0, #0
    1e9c:	movt	r0, #0
    1ea0:	bl	0 <__assert_fail>
    1ea4:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1ea8:	ldr	r3, [r3, #16]
    1eac:	ldr	r3, [r3, #4]
    1eb0:	cmp	r3, #2
    1eb4:	beq	1ecc <eval_boolean+0xbb8>
    1eb8:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1ebc:	ldr	r3, [r3, #20]
    1ec0:	ldr	r3, [r3, #4]
    1ec4:	cmp	r3, #2
    1ec8:	bne	1f54 <eval_boolean+0xc40>
    1ecc:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1ed0:	ldr	r3, [r3, #16]
    1ed4:	sub	r2, fp, #276	; 0x114
    1ed8:	mov	r1, r3
    1edc:	ldr	r0, [fp, #-1008]	; 0xfffffc10
    1ee0:	bl	314c <eval_float>
    1ee4:	mov	r3, r0
    1ee8:	cmp	r3, #0
    1eec:	beq	1ef8 <eval_boolean+0xbe4>
    1ef0:	mvn	r3, #0
    1ef4:	b	3130 <eval_boolean+0x1e1c>
    1ef8:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1efc:	ldr	r3, [r3, #20]
    1f00:	sub	r2, fp, #284	; 0x11c
    1f04:	mov	r1, r3
    1f08:	ldr	r0, [fp, #-1008]	; 0xfffffc10
    1f0c:	bl	314c <eval_float>
    1f10:	mov	r3, r0
    1f14:	cmp	r3, #0
    1f18:	beq	1f24 <eval_boolean+0xc10>
    1f1c:	mvn	r3, #0
    1f20:	b	3130 <eval_boolean+0x1e1c>
    1f24:	vldr	d6, [fp, #-276]	; 0xfffffeec
    1f28:	vldr	d7, [fp, #-284]	; 0xfffffee4
    1f2c:	vcmpe.f64	d6, d7
    1f30:	vmrs	APSR_nzcv, fpscr
    1f34:	movmi	r3, #1
    1f38:	movpl	r3, #0
    1f3c:	uxtb	r3, r3
    1f40:	mov	r2, r3
    1f44:	ldr	r3, [fp, #-1016]	; 0xfffffc08
    1f48:	str	r2, [r3]
    1f4c:	nop	{0}
    1f50:	b	3108 <eval_boolean+0x1df4>
    1f54:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1f58:	ldr	r3, [r3, #16]
    1f5c:	ldr	r3, [r3, #4]
    1f60:	cmp	r3, #1
    1f64:	bne	1ff4 <eval_boolean+0xce0>
    1f68:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1f6c:	ldr	r3, [r3, #16]
    1f70:	sub	r2, fp, #292	; 0x124
    1f74:	mov	r1, r3
    1f78:	ldr	r0, [fp, #-1008]	; 0xfffffc10
    1f7c:	bl	4510 <eval_integer>
    1f80:	mov	r3, r0
    1f84:	cmp	r3, #0
    1f88:	beq	1f94 <eval_boolean+0xc80>
    1f8c:	mvn	r3, #0
    1f90:	b	3130 <eval_boolean+0x1e1c>
    1f94:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1f98:	ldr	r3, [r3, #20]
    1f9c:	sub	r2, fp, #300	; 0x12c
    1fa0:	mov	r1, r3
    1fa4:	ldr	r0, [fp, #-1008]	; 0xfffffc10
    1fa8:	bl	4510 <eval_integer>
    1fac:	mov	r3, r0
    1fb0:	cmp	r3, #0
    1fb4:	beq	1fc0 <eval_boolean+0xcac>
    1fb8:	mvn	r3, #0
    1fbc:	b	3130 <eval_boolean+0x1e1c>
    1fc0:	sub	r3, fp, #292	; 0x124
    1fc4:	ldrd	r0, [r3]
    1fc8:	sub	r3, fp, #292	; 0x124
    1fcc:	ldrd	r2, [r3, #-8]
    1fd0:	cmp	r0, r2
    1fd4:	sbcs	r3, r1, r3
    1fd8:	movlt	r3, #1
    1fdc:	movge	r3, #0
    1fe0:	uxtb	r3, r3
    1fe4:	mov	r2, r3
    1fe8:	ldr	r3, [fp, #-1016]	; 0xfffffc08
    1fec:	str	r2, [r3]
    1ff0:	b	3108 <eval_boolean+0x1df4>
    1ff4:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1ff8:	ldr	r3, [r3, #16]
    1ffc:	ldr	r3, [r3, #4]
    2000:	cmp	r3, #3
    2004:	bne	20fc <eval_boolean+0xde8>
    2008:	ldr	r3, [fp, #-24]	; 0xffffffe8
    200c:	ldr	r1, [r3, #16]
    2010:	sub	r0, fp, #312	; 0x138
    2014:	sub	r2, fp, #304	; 0x130
    2018:	sub	r3, fp, #320	; 0x140
    201c:	str	r3, [sp]
    2020:	mov	r3, r0
    2024:	ldr	r0, [fp, #-1008]	; 0xfffffc10
    2028:	bl	684c <eval_string>
    202c:	mov	r3, r0
    2030:	cmp	r3, #0
    2034:	beq	2040 <eval_boolean+0xd2c>
    2038:	mvn	r3, #0
    203c:	b	3130 <eval_boolean+0x1e1c>
    2040:	ldr	r3, [fp, #-24]	; 0xffffffe8
    2044:	ldr	r1, [r3, #20]
    2048:	sub	r0, fp, #316	; 0x13c
    204c:	sub	r2, fp, #308	; 0x134
    2050:	sub	r3, fp, #324	; 0x144
    2054:	str	r3, [sp]
    2058:	mov	r3, r0
    205c:	ldr	r0, [fp, #-1008]	; 0xfffffc10
    2060:	bl	684c <eval_string>
    2064:	mov	r3, r0
    2068:	cmp	r3, #0
    206c:	beq	2084 <eval_boolean+0xd70>
    2070:	ldr	r3, [fp, #-320]	; 0xfffffec0
    2074:	mov	r0, r3
    2078:	bl	0 <free>
    207c:	mvn	r3, #0
    2080:	b	3130 <eval_boolean+0x1e1c>
    2084:	ldr	r0, [fp, #-304]	; 0xfffffed0
    2088:	ldr	r1, [fp, #-312]	; 0xfffffec8
    208c:	ldr	ip, [fp, #-320]	; 0xfffffec0
    2090:	ldr	lr, [fp, #-308]	; 0xfffffecc
    2094:	ldr	r3, [fp, #-316]	; 0xfffffec4
    2098:	ldr	r2, [fp, #-324]	; 0xfffffebc
    209c:	str	r2, [sp, #4]
    20a0:	str	r3, [sp]
    20a4:	mov	r3, lr
    20a8:	mov	r2, ip
    20ac:	bl	110 <compare_strings>
    20b0:	mov	r3, r0
    20b4:	lsr	r3, r3, #31
    20b8:	uxtb	r3, r3
    20bc:	mov	r2, r3
    20c0:	ldr	r3, [fp, #-1016]	; 0xfffffc08
    20c4:	str	r2, [r3]
    20c8:	ldr	r3, [fp, #-312]	; 0xfffffec8
    20cc:	cmp	r3, #0
    20d0:	ble	20e0 <eval_boolean+0xdcc>
    20d4:	ldr	r3, [fp, #-320]	; 0xfffffec0
    20d8:	mov	r0, r3
    20dc:	bl	0 <free>
    20e0:	ldr	r3, [fp, #-316]	; 0xfffffec4
    20e4:	cmp	r3, #0
    20e8:	ble	3108 <eval_boolean+0x1df4>
    20ec:	ldr	r3, [fp, #-324]	; 0xfffffebc
    20f0:	mov	r0, r3
    20f4:	bl	0 <free>
    20f8:	b	3108 <eval_boolean+0x1df4>
    20fc:	movw	r3, #0
    2100:	movt	r3, #0
    2104:	mov	r2, #916	; 0x394
    2108:	movw	r1, #0
    210c:	movt	r1, #0
    2110:	movw	r0, #0
    2114:	movt	r0, #0
    2118:	bl	0 <__assert_fail>
    211c:	ldr	r3, [fp, #-24]	; 0xffffffe8
    2120:	ldr	r3, [r3, #16]
    2124:	ldr	r3, [r3, #4]
    2128:	cmp	r3, #2
    212c:	beq	2144 <eval_boolean+0xe30>
    2130:	ldr	r3, [fp, #-24]	; 0xffffffe8
    2134:	ldr	r3, [r3, #20]
    2138:	ldr	r3, [r3, #4]
    213c:	cmp	r3, #2
    2140:	bne	21cc <eval_boolean+0xeb8>
    2144:	ldr	r3, [fp, #-24]	; 0xffffffe8
    2148:	ldr	r3, [r3, #16]
    214c:	sub	r2, fp, #332	; 0x14c
    2150:	mov	r1, r3
    2154:	ldr	r0, [fp, #-1008]	; 0xfffffc10
    2158:	bl	314c <eval_float>
    215c:	mov	r3, r0
    2160:	cmp	r3, #0
    2164:	beq	2170 <eval_boolean+0xe5c>
    2168:	mvn	r3, #0
    216c:	b	3130 <eval_boolean+0x1e1c>
    2170:	ldr	r3, [fp, #-24]	; 0xffffffe8
    2174:	ldr	r3, [r3, #20]
    2178:	sub	r2, fp, #340	; 0x154
    217c:	mov	r1, r3
    2180:	ldr	r0, [fp, #-1008]	; 0xfffffc10
    2184:	bl	314c <eval_float>
    2188:	mov	r3, r0
    218c:	cmp	r3, #0
    2190:	beq	219c <eval_boolean+0xe88>
    2194:	mvn	r3, #0
    2198:	b	3130 <eval_boolean+0x1e1c>
    219c:	vldr	d6, [fp, #-332]	; 0xfffffeb4
    21a0:	vldr	d7, [fp, #-340]	; 0xfffffeac
    21a4:	vcmpe.f64	d6, d7
    21a8:	vmrs	APSR_nzcv, fpscr
    21ac:	movls	r3, #1
    21b0:	movhi	r3, #0
    21b4:	uxtb	r3, r3
    21b8:	mov	r2, r3
    21bc:	ldr	r3, [fp, #-1016]	; 0xfffffc08
    21c0:	str	r2, [r3]
    21c4:	nop	{0}
    21c8:	b	3110 <eval_boolean+0x1dfc>
    21cc:	ldr	r3, [fp, #-24]	; 0xffffffe8
    21d0:	ldr	r3, [r3, #16]
    21d4:	ldr	r3, [r3, #4]
    21d8:	cmp	r3, #1
    21dc:	bne	226c <eval_boolean+0xf58>
    21e0:	ldr	r3, [fp, #-24]	; 0xffffffe8
    21e4:	ldr	r3, [r3, #16]
    21e8:	sub	r2, fp, #348	; 0x15c
    21ec:	mov	r1, r3
    21f0:	ldr	r0, [fp, #-1008]	; 0xfffffc10
    21f4:	bl	4510 <eval_integer>
    21f8:	mov	r3, r0
    21fc:	cmp	r3, #0
    2200:	beq	220c <eval_boolean+0xef8>
    2204:	mvn	r3, #0
    2208:	b	3130 <eval_boolean+0x1e1c>
    220c:	ldr	r3, [fp, #-24]	; 0xffffffe8
    2210:	ldr	r3, [r3, #20]
    2214:	sub	r2, fp, #356	; 0x164
    2218:	mov	r1, r3
    221c:	ldr	r0, [fp, #-1008]	; 0xfffffc10
    2220:	bl	4510 <eval_integer>
    2224:	mov	r3, r0
    2228:	cmp	r3, #0
    222c:	beq	2238 <eval_boolean+0xf24>
    2230:	mvn	r3, #0
    2234:	b	3130 <eval_boolean+0x1e1c>
    2238:	sub	r3, fp, #340	; 0x154
    223c:	ldrd	r2, [r3, #-8]
    2240:	sub	r1, fp, #356	; 0x164
    2244:	ldrd	r0, [r1]
    2248:	cmp	r0, r2
    224c:	sbcs	r3, r1, r3
    2250:	movge	r3, #1
    2254:	movlt	r3, #0
    2258:	uxtb	r3, r3
    225c:	mov	r2, r3
    2260:	ldr	r3, [fp, #-1016]	; 0xfffffc08
    2264:	str	r2, [r3]
    2268:	b	3110 <eval_boolean+0x1dfc>
    226c:	ldr	r3, [fp, #-24]	; 0xffffffe8
    2270:	ldr	r3, [r3, #16]
    2274:	ldr	r3, [r3, #4]
    2278:	cmp	r3, #3
    227c:	bne	237c <eval_boolean+0x1068>
    2280:	ldr	r3, [fp, #-24]	; 0xffffffe8
    2284:	ldr	r1, [r3, #16]
    2288:	sub	r0, fp, #368	; 0x170
    228c:	sub	r2, fp, #360	; 0x168
    2290:	sub	r3, fp, #376	; 0x178
    2294:	str	r3, [sp]
    2298:	mov	r3, r0
    229c:	ldr	r0, [fp, #-1008]	; 0xfffffc10
    22a0:	bl	684c <eval_string>
    22a4:	mov	r3, r0
    22a8:	cmp	r3, #0
    22ac:	beq	22b8 <eval_boolean+0xfa4>
    22b0:	mvn	r3, #0
    22b4:	b	3130 <eval_boolean+0x1e1c>
    22b8:	ldr	r3, [fp, #-24]	; 0xffffffe8
    22bc:	ldr	r1, [r3, #20]
    22c0:	sub	r0, fp, #372	; 0x174
    22c4:	sub	r2, fp, #364	; 0x16c
    22c8:	sub	r3, fp, #380	; 0x17c
    22cc:	str	r3, [sp]
    22d0:	mov	r3, r0
    22d4:	ldr	r0, [fp, #-1008]	; 0xfffffc10
    22d8:	bl	684c <eval_string>
    22dc:	mov	r3, r0
    22e0:	cmp	r3, #0
    22e4:	beq	22fc <eval_boolean+0xfe8>
    22e8:	ldr	r3, [fp, #-376]	; 0xfffffe88
    22ec:	mov	r0, r3
    22f0:	bl	0 <free>
    22f4:	mvn	r3, #0
    22f8:	b	3130 <eval_boolean+0x1e1c>
    22fc:	ldr	r0, [fp, #-360]	; 0xfffffe98
    2300:	ldr	r1, [fp, #-368]	; 0xfffffe90
    2304:	ldr	ip, [fp, #-376]	; 0xfffffe88
    2308:	ldr	lr, [fp, #-364]	; 0xfffffe94
    230c:	ldr	r3, [fp, #-372]	; 0xfffffe8c
    2310:	ldr	r2, [fp, #-380]	; 0xfffffe84
    2314:	str	r2, [sp, #4]
    2318:	str	r3, [sp]
    231c:	mov	r3, lr
    2320:	mov	r2, ip
    2324:	bl	110 <compare_strings>
    2328:	mov	r3, r0
    232c:	cmp	r3, #0
    2330:	movle	r3, #1
    2334:	movgt	r3, #0
    2338:	uxtb	r3, r3
    233c:	mov	r2, r3
    2340:	ldr	r3, [fp, #-1016]	; 0xfffffc08
    2344:	str	r2, [r3]
    2348:	ldr	r3, [fp, #-368]	; 0xfffffe90
    234c:	cmp	r3, #0
    2350:	ble	2360 <eval_boolean+0x104c>
    2354:	ldr	r3, [fp, #-376]	; 0xfffffe88
    2358:	mov	r0, r3
    235c:	bl	0 <free>
    2360:	ldr	r3, [fp, #-372]	; 0xfffffe8c
    2364:	cmp	r3, #0
    2368:	ble	3110 <eval_boolean+0x1dfc>
    236c:	ldr	r3, [fp, #-380]	; 0xfffffe84
    2370:	mov	r0, r3
    2374:	bl	0 <free>
    2378:	b	3110 <eval_boolean+0x1dfc>
    237c:	movw	r3, #0
    2380:	movt	r3, #0
    2384:	movw	r2, #978	; 0x3d2
    2388:	movw	r1, #0
    238c:	movt	r1, #0
    2390:	movw	r0, #0
    2394:	movt	r0, #0
    2398:	bl	0 <__assert_fail>
    239c:	ldr	r3, [fp, #-24]	; 0xffffffe8
    23a0:	ldr	r3, [r3, #16]
    23a4:	ldr	r2, [fp, #-1016]	; 0xfffffc08
    23a8:	mov	r1, r3
    23ac:	ldr	r0, [fp, #-1008]	; 0xfffffc10
    23b0:	bl	1314 <eval_boolean>
    23b4:	mov	r3, r0
    23b8:	cmp	r3, #0
    23bc:	beq	23c8 <eval_boolean+0x10b4>
    23c0:	mvn	r3, #0
    23c4:	b	3130 <eval_boolean+0x1e1c>
    23c8:	ldr	r3, [fp, #-1016]	; 0xfffffc08
    23cc:	ldr	r3, [r3]
    23d0:	cmp	r3, #0
    23d4:	moveq	r3, #1
    23d8:	movne	r3, #0
    23dc:	uxtb	r3, r3
    23e0:	mov	r2, r3
    23e4:	ldr	r3, [fp, #-1016]	; 0xfffffc08
    23e8:	str	r2, [r3]
    23ec:	b	312c <eval_boolean+0x1e18>
    23f0:	ldr	r3, [fp, #-24]	; 0xffffffe8
    23f4:	ldr	r3, [r3, #16]
    23f8:	ldr	r2, [fp, #-1016]	; 0xfffffc08
    23fc:	mov	r1, r3
    2400:	ldr	r0, [fp, #-1008]	; 0xfffffc10
    2404:	bl	1314 <eval_boolean>
    2408:	mov	r3, r0
    240c:	cmp	r3, #0
    2410:	beq	241c <eval_boolean+0x1108>
    2414:	mvn	r3, #0
    2418:	b	3130 <eval_boolean+0x1e1c>
    241c:	ldr	r3, [fp, #-1016]	; 0xfffffc08
    2420:	ldr	r3, [r3]
    2424:	cmp	r3, #0
    2428:	bne	2434 <eval_boolean+0x1120>
    242c:	mov	r3, #0
    2430:	b	3130 <eval_boolean+0x1e1c>
    2434:	ldr	r3, [fp, #-24]	; 0xffffffe8
    2438:	ldr	r3, [r3, #20]
    243c:	ldr	r2, [fp, #-1016]	; 0xfffffc08
    2440:	mov	r1, r3
    2444:	ldr	r0, [fp, #-1008]	; 0xfffffc10
    2448:	bl	1314 <eval_boolean>
    244c:	mov	r3, r0
    2450:	cmp	r3, #0
    2454:	beq	3118 <eval_boolean+0x1e04>
    2458:	mvn	r3, #0
    245c:	b	3130 <eval_boolean+0x1e1c>
    2460:	ldr	r3, [fp, #-24]	; 0xffffffe8
    2464:	ldr	r3, [r3, #16]
    2468:	ldr	r2, [fp, #-1016]	; 0xfffffc08
    246c:	mov	r1, r3
    2470:	ldr	r0, [fp, #-1008]	; 0xfffffc10
    2474:	bl	1314 <eval_boolean>
    2478:	mov	r3, r0
    247c:	cmp	r3, #0
    2480:	beq	248c <eval_boolean+0x1178>
    2484:	mvn	r3, #0
    2488:	b	3130 <eval_boolean+0x1e1c>
    248c:	ldr	r3, [fp, #-1016]	; 0xfffffc08
    2490:	ldr	r3, [r3]
    2494:	cmp	r3, #0
    2498:	beq	24a4 <eval_boolean+0x1190>
    249c:	mov	r3, #0
    24a0:	b	3130 <eval_boolean+0x1e1c>
    24a4:	ldr	r3, [fp, #-24]	; 0xffffffe8
    24a8:	ldr	r3, [r3, #20]
    24ac:	ldr	r2, [fp, #-1016]	; 0xfffffc08
    24b0:	mov	r1, r3
    24b4:	ldr	r0, [fp, #-1008]	; 0xfffffc10
    24b8:	bl	1314 <eval_boolean>
    24bc:	mov	r3, r0
    24c0:	cmp	r3, #0
    24c4:	beq	3120 <eval_boolean+0x1e0c>
    24c8:	mvn	r3, #0
    24cc:	b	3130 <eval_boolean+0x1e1c>
    24d0:	ldr	r3, [fp, #-24]	; 0xffffffe8
    24d4:	ldr	r3, [r3, #16]
    24d8:	sub	r2, fp, #388	; 0x184
    24dc:	mov	r1, r3
    24e0:	ldr	r0, [fp, #-1008]	; 0xfffffc10
    24e4:	bl	314c <eval_float>
    24e8:	mov	r3, r0
    24ec:	cmp	r3, #0
    24f0:	beq	24fc <eval_boolean+0x11e8>
    24f4:	mvn	r3, #0
    24f8:	b	3130 <eval_boolean+0x1e1c>
    24fc:	vldr	d7, [fp, #-388]	; 0xfffffe7c
    2500:	vmov.f64	d0, d7
    2504:	bl	0 <coda_isNaN>
    2508:	mov	r2, r0
    250c:	ldr	r3, [fp, #-1016]	; 0xfffffc08
    2510:	str	r2, [r3]
    2514:	b	312c <eval_boolean+0x1e18>
    2518:	ldr	r3, [fp, #-24]	; 0xffffffe8
    251c:	ldr	r3, [r3, #16]
    2520:	sub	r2, fp, #396	; 0x18c
    2524:	mov	r1, r3
    2528:	ldr	r0, [fp, #-1008]	; 0xfffffc10
    252c:	bl	314c <eval_float>
    2530:	mov	r3, r0
    2534:	cmp	r3, #0
    2538:	beq	2544 <eval_boolean+0x1230>
    253c:	mvn	r3, #0
    2540:	b	3130 <eval_boolean+0x1e1c>
    2544:	vldr	d7, [fp, #-396]	; 0xfffffe74
    2548:	vmov.f64	d0, d7
    254c:	bl	0 <coda_isInf>
    2550:	mov	r2, r0
    2554:	ldr	r3, [fp, #-1016]	; 0xfffffc08
    2558:	str	r2, [r3]
    255c:	b	312c <eval_boolean+0x1e18>
    2560:	ldr	r3, [fp, #-24]	; 0xffffffe8
    2564:	ldr	r3, [r3, #16]
    2568:	sub	r2, fp, #404	; 0x194
    256c:	mov	r1, r3
    2570:	ldr	r0, [fp, #-1008]	; 0xfffffc10
    2574:	bl	314c <eval_float>
    2578:	mov	r3, r0
    257c:	cmp	r3, #0
    2580:	beq	258c <eval_boolean+0x1278>
    2584:	mvn	r3, #0
    2588:	b	3130 <eval_boolean+0x1e1c>
    258c:	vldr	d7, [fp, #-404]	; 0xfffffe6c
    2590:	vmov.f64	d0, d7
    2594:	bl	0 <coda_isPlusInf>
    2598:	mov	r2, r0
    259c:	ldr	r3, [fp, #-1016]	; 0xfffffc08
    25a0:	str	r2, [r3]
    25a4:	b	312c <eval_boolean+0x1e18>
    25a8:	ldr	r3, [fp, #-24]	; 0xffffffe8
    25ac:	ldr	r3, [r3, #16]
    25b0:	sub	r2, fp, #412	; 0x19c
    25b4:	mov	r1, r3
    25b8:	ldr	r0, [fp, #-1008]	; 0xfffffc10
    25bc:	bl	314c <eval_float>
    25c0:	mov	r3, r0
    25c4:	cmp	r3, #0
    25c8:	beq	25d4 <eval_boolean+0x12c0>
    25cc:	mvn	r3, #0
    25d0:	b	3130 <eval_boolean+0x1e1c>
    25d4:	vldr	d7, [fp, #-412]	; 0xfffffe64
    25d8:	vmov.f64	d0, d7
    25dc:	bl	0 <coda_isMinInf>
    25e0:	mov	r2, r0
    25e4:	ldr	r3, [fp, #-1016]	; 0xfffffc08
    25e8:	str	r2, [r3]
    25ec:	b	312c <eval_boolean+0x1e18>
    25f0:	ldr	r3, [fp, #-24]	; 0xffffffe8
    25f4:	ldr	r1, [r3, #16]
    25f8:	sub	r0, fp, #440	; 0x1b8
    25fc:	sub	r2, fp, #436	; 0x1b4
    2600:	sub	r3, fp, #444	; 0x1bc
    2604:	str	r3, [sp]
    2608:	mov	r3, r0
    260c:	ldr	r0, [fp, #-1008]	; 0xfffffc10
    2610:	bl	684c <eval_string>
    2614:	mov	r3, r0
    2618:	cmp	r3, #0
    261c:	beq	2628 <eval_boolean+0x1314>
    2620:	mvn	r3, #0
    2624:	b	3130 <eval_boolean+0x1e1c>
    2628:	ldr	r3, [fp, #-24]	; 0xffffffe8
    262c:	ldr	r1, [r3, #20]
    2630:	sub	r0, fp, #428	; 0x1ac
    2634:	sub	r2, fp, #424	; 0x1a8
    2638:	sub	r3, fp, #432	; 0x1b0
    263c:	str	r3, [sp]
    2640:	mov	r3, r0
    2644:	ldr	r0, [fp, #-1008]	; 0xfffffc10
    2648:	bl	684c <eval_string>
    264c:	mov	r3, r0
    2650:	cmp	r3, #0
    2654:	beq	2678 <eval_boolean+0x1364>
    2658:	ldr	r3, [fp, #-444]	; 0xfffffe44
    265c:	cmp	r3, #0
    2660:	beq	2670 <eval_boolean+0x135c>
    2664:	ldr	r3, [fp, #-444]	; 0xfffffe44
    2668:	mov	r0, r3
    266c:	bl	0 <free>
    2670:	mvn	r3, #0
    2674:	b	3130 <eval_boolean+0x1e1c>
    2678:	ldr	r3, [fp, #-440]	; 0xfffffe48
    267c:	cmp	r3, #0
    2680:	ble	26d0 <eval_boolean+0x13bc>
    2684:	ldr	r3, [fp, #-444]	; 0xfffffe44
    2688:	ldr	r1, [fp, #-436]	; 0xfffffe4c
    268c:	ldr	r2, [fp, #-440]	; 0xfffffe48
    2690:	add	r2, r1, r2
    2694:	add	r3, r3, r2
    2698:	mov	r2, #0
    269c:	strb	r2, [r3]
    26a0:	ldr	r3, [fp, #-444]	; 0xfffffe44
    26a4:	ldr	r2, [fp, #-436]	; 0xfffffe4c
    26a8:	add	r0, r3, r2
    26ac:	sub	r1, fp, #420	; 0x1a4
    26b0:	sub	r2, fp, #416	; 0x1a0
    26b4:	mov	r3, #0
    26b8:	str	r3, [sp]
    26bc:	mov	r3, r1
    26c0:	mov	r1, #36	; 0x24
    26c4:	bl	0 <coda_pcre_compile>
    26c8:	str	r0, [fp, #-8]
    26cc:	b	26f8 <eval_boolean+0x13e4>
    26d0:	sub	r1, fp, #420	; 0x1a4
    26d4:	sub	r2, fp, #416	; 0x1a0
    26d8:	mov	r3, #0
    26dc:	str	r3, [sp]
    26e0:	mov	r3, r1
    26e4:	mov	r1, #36	; 0x24
    26e8:	movw	r0, #0
    26ec:	movt	r0, #0
    26f0:	bl	0 <coda_pcre_compile>
    26f4:	str	r0, [fp, #-8]
    26f8:	ldr	r3, [fp, #-444]	; 0xfffffe44
    26fc:	cmp	r3, #0
    2700:	beq	2710 <eval_boolean+0x13fc>
    2704:	ldr	r3, [fp, #-444]	; 0xfffffe44
    2708:	mov	r0, r3
    270c:	bl	0 <free>
    2710:	ldr	r3, [fp, #-8]
    2714:	cmp	r3, #0
    2718:	bne	2754 <eval_boolean+0x1440>
    271c:	ldr	r2, [fp, #-416]	; 0xfffffe60
    2720:	ldr	r3, [fp, #-420]	; 0xfffffe5c
    2724:	movw	r1, #0
    2728:	movt	r1, #0
    272c:	mvn	r0, #400	; 0x190
    2730:	bl	0 <coda_set_error>
    2734:	ldr	r3, [fp, #-432]	; 0xfffffe50
    2738:	cmp	r3, #0
    273c:	beq	274c <eval_boolean+0x1438>
    2740:	ldr	r3, [fp, #-432]	; 0xfffffe50
    2744:	mov	r0, r3
    2748:	bl	0 <free>
    274c:	mvn	r3, #0
    2750:	b	3130 <eval_boolean+0x1e1c>
    2754:	ldr	r3, [fp, #-432]	; 0xfffffe50
    2758:	cmp	r3, #0
    275c:	bne	27b8 <eval_boolean+0x14a4>
    2760:	movw	r0, #0
    2764:	movt	r0, #0
    2768:	bl	0 <strdup>
    276c:	mov	r3, r0
    2770:	str	r3, [fp, #-432]	; 0xfffffe50
    2774:	ldr	r3, [fp, #-432]	; 0xfffffe50
    2778:	cmp	r3, #0
    277c:	bne	27b8 <eval_boolean+0x14a4>
    2780:	mov	r3, #1120	; 0x460
    2784:	movw	r2, #0
    2788:	movt	r2, #0
    278c:	movw	r1, #0
    2790:	movt	r1, #0
    2794:	mvn	r0, #0
    2798:	bl	0 <coda_set_error>
    279c:	movw	r3, #0
    27a0:	movt	r3, #0
    27a4:	ldr	r3, [r3]
    27a8:	ldr	r0, [fp, #-8]
    27ac:	blx	r3
    27b0:	mvn	r3, #0
    27b4:	b	3130 <eval_boolean+0x1e1c>
    27b8:	ldr	r3, [fp, #-432]	; 0xfffffe50
    27bc:	ldr	r2, [fp, #-424]	; 0xfffffe58
    27c0:	add	r2, r3, r2
    27c4:	ldr	r1, [fp, #-428]	; 0xfffffe54
    27c8:	mov	r3, #48	; 0x30
    27cc:	str	r3, [sp, #12]
    27d0:	sub	r3, fp, #1004	; 0x3ec
    27d4:	str	r3, [sp, #8]
    27d8:	mov	r3, #0
    27dc:	str	r3, [sp, #4]
    27e0:	mov	r3, #0
    27e4:	str	r3, [sp]
    27e8:	mov	r3, r1
    27ec:	mov	r1, #0
    27f0:	ldr	r0, [fp, #-8]
    27f4:	bl	0 <coda_pcre_exec>
    27f8:	str	r0, [fp, #-28]	; 0xffffffe4
    27fc:	ldr	r3, [fp, #-432]	; 0xfffffe50
    2800:	mov	r0, r3
    2804:	bl	0 <free>
    2808:	movw	r3, #0
    280c:	movt	r3, #0
    2810:	ldr	r3, [r3]
    2814:	ldr	r0, [fp, #-8]
    2818:	blx	r3
    281c:	ldr	r3, [fp, #-28]	; 0xffffffe4
    2820:	cmp	r3, #0
    2824:	bge	2850 <eval_boolean+0x153c>
    2828:	ldr	r3, [fp, #-28]	; 0xffffffe4
    282c:	cmn	r3, #1
    2830:	beq	2850 <eval_boolean+0x153c>
    2834:	ldr	r2, [fp, #-28]	; 0xffffffe4
    2838:	movw	r1, #0
    283c:	movt	r1, #0
    2840:	mvn	r0, #400	; 0x190
    2844:	bl	0 <coda_set_error>
    2848:	mvn	r3, #0
    284c:	b	3130 <eval_boolean+0x1e1c>
    2850:	ldr	r3, [fp, #-28]	; 0xffffffe4
    2854:	cmp	r3, #0
    2858:	bne	2874 <eval_boolean+0x1560>
    285c:	movw	r1, #0
    2860:	movt	r1, #0
    2864:	mvn	r0, #400	; 0x190
    2868:	bl	0 <coda_set_error>
    286c:	mvn	r3, #0
    2870:	b	3130 <eval_boolean+0x1e1c>
    2874:	ldr	r3, [fp, #-28]	; 0xffffffe4
    2878:	cmp	r3, #0
    287c:	movgt	r3, #1
    2880:	movle	r3, #0
    2884:	uxtb	r3, r3
    2888:	mov	r2, r3
    288c:	ldr	r3, [fp, #-1016]	; 0xfffffc08
    2890:	str	r2, [r3]
    2894:	b	312c <eval_boolean+0x1e18>
    2898:	ldr	r3, [fp, #-1008]	; 0xfffffc10
    289c:	ldr	r3, [r3]
    28a0:	cmp	r3, #0
    28a4:	bne	28c8 <eval_boolean+0x15b4>
    28a8:	movw	r3, #0
    28ac:	movt	r3, #0
    28b0:	movw	r2, #1148	; 0x47c
    28b4:	movw	r1, #0
    28b8:	movt	r1, #0
    28bc:	movw	r0, #0
    28c0:	movt	r0, #0
    28c4:	bl	0 <__assert_fail>
    28c8:	ldr	r3, [fp, #-1008]	; 0xfffffc10
    28cc:	sub	r0, fp, #1004	; 0x3ec
    28d0:	add	r3, r3, #8
    28d4:	mov	r2, #520	; 0x208
    28d8:	mov	r1, r3
    28dc:	bl	0 <memcpy>
    28e0:	ldr	r3, [fp, #-24]	; 0xffffffe8
    28e4:	ldr	r3, [r3, #16]
    28e8:	mov	r1, r3
    28ec:	ldr	r0, [fp, #-1008]	; 0xfffffc10
    28f0:	bl	9334 <eval_cursor>
    28f4:	mov	r3, r0
    28f8:	cmp	r3, #0
    28fc:	beq	2964 <eval_boolean+0x1650>
    2900:	ldr	r3, [pc, #2108]	; 3144 <eval_boolean+0x1e30>
    2904:	ldr	r3, [pc, r3]
    2908:	mrc	15, 0, r2, cr13, cr0, {3}
    290c:	ldr	r3, [r2, r3]
    2910:	mvn	r2, #400	; 0x190
    2914:	cmp	r3, r2
    2918:	beq	295c <eval_boolean+0x1648>
    291c:	ldr	r3, [pc, #2084]	; 3148 <eval_boolean+0x1e34>
    2920:	ldr	r3, [pc, r3]
    2924:	mrc	15, 0, r2, cr13, cr0, {3}
    2928:	mov	r1, #0
    292c:	str	r1, [r2, r3]
    2930:	ldr	r3, [fp, #-1016]	; 0xfffffc08
    2934:	mov	r2, #0
    2938:	str	r2, [r3]
    293c:	ldr	r3, [fp, #-1008]	; 0xfffffc10
    2940:	add	r3, r3, #8
    2944:	sub	r1, fp, #1004	; 0x3ec
    2948:	mov	r2, #520	; 0x208
    294c:	mov	r0, r3
    2950:	bl	0 <memcpy>
    2954:	mov	r3, #0
    2958:	b	3130 <eval_boolean+0x1e1c>
    295c:	mvn	r3, #0
    2960:	b	3130 <eval_boolean+0x1e1c>
    2964:	ldr	r3, [fp, #-1008]	; 0xfffffc10
    2968:	add	r3, r3, #8
    296c:	sub	r2, fp, #448	; 0x1c0
    2970:	mov	r1, r2
    2974:	mov	r0, r3
    2978:	bl	0 <coda_cursor_get_type_class>
    297c:	mov	r3, r0
    2980:	cmp	r3, #0
    2984:	beq	2990 <eval_boolean+0x167c>
    2988:	mvn	r3, #0
    298c:	b	3130 <eval_boolean+0x1e1c>
    2990:	ldr	r3, [fp, #-448]	; 0xfffffe40
    2994:	cmp	r3, #6
    2998:	bne	2a00 <eval_boolean+0x16ec>
    299c:	ldr	r3, [fp, #-1008]	; 0xfffffc10
    29a0:	add	r3, r3, #8
    29a4:	sub	r2, fp, #452	; 0x1c4
    29a8:	mov	r1, r2
    29ac:	mov	r0, r3
    29b0:	bl	0 <coda_cursor_get_special_type>
    29b4:	mov	r3, r0
    29b8:	cmp	r3, #0
    29bc:	beq	29c8 <eval_boolean+0x16b4>
    29c0:	mvn	r3, #0
    29c4:	b	3130 <eval_boolean+0x1e1c>
    29c8:	ldr	r3, [fp, #-452]	; 0xfffffe3c
    29cc:	cmp	r3, #0
    29d0:	bne	2a00 <eval_boolean+0x16ec>
    29d4:	ldr	r3, [fp, #-1016]	; 0xfffffc08
    29d8:	mov	r2, #0
    29dc:	str	r2, [r3]
    29e0:	ldr	r3, [fp, #-1008]	; 0xfffffc10
    29e4:	add	r3, r3, #8
    29e8:	sub	r1, fp, #1004	; 0x3ec
    29ec:	mov	r2, #520	; 0x208
    29f0:	mov	r0, r3
    29f4:	bl	0 <memcpy>
    29f8:	mov	r3, #0
    29fc:	b	3130 <eval_boolean+0x1e1c>
    2a00:	ldr	r3, [fp, #-1016]	; 0xfffffc08
    2a04:	mov	r2, #1
    2a08:	str	r2, [r3]
    2a0c:	ldr	r3, [fp, #-1008]	; 0xfffffc10
    2a10:	add	r3, r3, #8
    2a14:	sub	r1, fp, #1004	; 0x3ec
    2a18:	mov	r2, #520	; 0x208
    2a1c:	mov	r0, r3
    2a20:	bl	0 <memcpy>
    2a24:	b	312c <eval_boolean+0x1e18>
    2a28:	ldr	r3, [fp, #-1008]	; 0xfffffc10
    2a2c:	ldr	r3, [r3]
    2a30:	cmp	r3, #0
    2a34:	bne	2a58 <eval_boolean+0x1744>
    2a38:	movw	r3, #0
    2a3c:	movt	r3, #0
    2a40:	movw	r2, #1190	; 0x4a6
    2a44:	movw	r1, #0
    2a48:	movt	r1, #0
    2a4c:	movw	r0, #0
    2a50:	movt	r0, #0
    2a54:	bl	0 <__assert_fail>
    2a58:	ldr	r3, [fp, #-1008]	; 0xfffffc10
    2a5c:	sub	r0, fp, #1004	; 0x3ec
    2a60:	add	r3, r3, #8
    2a64:	mov	r2, #520	; 0x208
    2a68:	mov	r1, r3
    2a6c:	bl	0 <memcpy>
    2a70:	ldr	r3, [fp, #-24]	; 0xffffffe8
    2a74:	ldr	r3, [r3, #16]
    2a78:	mov	r1, r3
    2a7c:	ldr	r0, [fp, #-1008]	; 0xfffffc10
    2a80:	bl	9334 <eval_cursor>
    2a84:	mov	r3, r0
    2a88:	cmp	r3, #0
    2a8c:	beq	2a98 <eval_boolean+0x1784>
    2a90:	mvn	r3, #0
    2a94:	b	3130 <eval_boolean+0x1e1c>
    2a98:	ldr	r3, [fp, #-1008]	; 0xfffffc10
    2a9c:	add	r3, r3, #8
    2aa0:	sub	r2, fp, #456	; 0x1c8
    2aa4:	mov	r1, r2
    2aa8:	mov	r0, r3
    2aac:	bl	0 <coda_cursor_get_num_elements>
    2ab0:	mov	r3, r0
    2ab4:	cmp	r3, #0
    2ab8:	beq	2ac4 <eval_boolean+0x17b0>
    2abc:	mvn	r3, #0
    2ac0:	b	3130 <eval_boolean+0x1e1c>
    2ac4:	ldr	r3, [fp, #-456]	; 0xfffffe38
    2ac8:	cmp	r3, #0
    2acc:	ble	2ba8 <eval_boolean+0x1894>
    2ad0:	ldr	r3, [fp, #-1008]	; 0xfffffc10
    2ad4:	add	r3, r3, #8
    2ad8:	mov	r0, r3
    2adc:	bl	0 <coda_cursor_goto_first_array_element>
    2ae0:	mov	r3, r0
    2ae4:	cmp	r3, #0
    2ae8:	beq	2af4 <eval_boolean+0x17e0>
    2aec:	mvn	r3, #0
    2af0:	b	3130 <eval_boolean+0x1e1c>
    2af4:	mov	r3, #0
    2af8:	str	r3, [fp, #-12]
    2afc:	b	2b98 <eval_boolean+0x1884>
    2b00:	ldr	r3, [fp, #-24]	; 0xffffffe8
    2b04:	ldr	r3, [r3, #20]
    2b08:	sub	r2, fp, #460	; 0x1cc
    2b0c:	mov	r1, r3
    2b10:	ldr	r0, [fp, #-1008]	; 0xfffffc10
    2b14:	bl	1314 <eval_boolean>
    2b18:	mov	r3, r0
    2b1c:	cmp	r3, #0
    2b20:	beq	2b2c <eval_boolean+0x1818>
    2b24:	mvn	r3, #0
    2b28:	b	3130 <eval_boolean+0x1e1c>
    2b2c:	ldr	r3, [fp, #-460]	; 0xfffffe34
    2b30:	cmp	r3, #0
    2b34:	bne	2b4c <eval_boolean+0x1838>
    2b38:	ldr	r3, [fp, #-1016]	; 0xfffffc08
    2b3c:	mov	r2, #0
    2b40:	str	r2, [r3]
    2b44:	mov	r3, #0
    2b48:	b	2b94 <eval_boolean+0x1880>
    2b4c:	ldr	r3, [fp, #-456]	; 0xfffffe38
    2b50:	sub	r3, r3, #1
    2b54:	ldr	r2, [fp, #-12]
    2b58:	cmp	r2, r3
    2b5c:	bge	2b84 <eval_boolean+0x1870>
    2b60:	ldr	r3, [fp, #-1008]	; 0xfffffc10
    2b64:	add	r3, r3, #8
    2b68:	mov	r0, r3
    2b6c:	bl	0 <coda_cursor_goto_next_array_element>
    2b70:	mov	r3, r0
    2b74:	cmp	r3, #0
    2b78:	beq	2b84 <eval_boolean+0x1870>
    2b7c:	mvn	r3, #0
    2b80:	b	2b94 <eval_boolean+0x1880>
    2b84:	ldr	r3, [fp, #-12]
    2b88:	add	r3, r3, #1
    2b8c:	str	r3, [fp, #-12]
    2b90:	b	2b98 <eval_boolean+0x1884>
    2b94:	b	3130 <eval_boolean+0x1e1c>
    2b98:	ldr	r3, [fp, #-456]	; 0xfffffe38
    2b9c:	ldr	r2, [fp, #-12]
    2ba0:	cmp	r2, r3
    2ba4:	blt	2b00 <eval_boolean+0x17ec>
    2ba8:	ldr	r3, [fp, #-1016]	; 0xfffffc08
    2bac:	mov	r2, #1
    2bb0:	str	r2, [r3]
    2bb4:	ldr	r3, [fp, #-1008]	; 0xfffffc10
    2bb8:	add	r3, r3, #8
    2bbc:	sub	r1, fp, #1004	; 0x3ec
    2bc0:	mov	r2, #520	; 0x208
    2bc4:	mov	r0, r3
    2bc8:	bl	0 <memcpy>
    2bcc:	b	312c <eval_boolean+0x1e18>
    2bd0:	ldr	r3, [fp, #-1008]	; 0xfffffc10
    2bd4:	ldr	r3, [r3]
    2bd8:	cmp	r3, #0
    2bdc:	bne	2c00 <eval_boolean+0x18ec>
    2be0:	movw	r3, #0
    2be4:	movt	r3, #0
    2be8:	movw	r2, #1239	; 0x4d7
    2bec:	movw	r1, #0
    2bf0:	movt	r1, #0
    2bf4:	movw	r0, #0
    2bf8:	movt	r0, #0
    2bfc:	bl	0 <__assert_fail>
    2c00:	ldr	r3, [fp, #-1008]	; 0xfffffc10
    2c04:	sub	r0, fp, #1004	; 0x3ec
    2c08:	add	r3, r3, #8
    2c0c:	mov	r2, #520	; 0x208
    2c10:	mov	r1, r3
    2c14:	bl	0 <memcpy>
    2c18:	ldr	r3, [fp, #-24]	; 0xffffffe8
    2c1c:	ldr	r3, [r3, #16]
    2c20:	mov	r1, r3
    2c24:	ldr	r0, [fp, #-1008]	; 0xfffffc10
    2c28:	bl	9334 <eval_cursor>
    2c2c:	mov	r3, r0
    2c30:	cmp	r3, #0
    2c34:	beq	2c40 <eval_boolean+0x192c>
    2c38:	mvn	r3, #0
    2c3c:	b	3130 <eval_boolean+0x1e1c>
    2c40:	ldr	r3, [fp, #-1008]	; 0xfffffc10
    2c44:	add	r3, r3, #8
    2c48:	sub	r2, fp, #464	; 0x1d0
    2c4c:	mov	r1, r2
    2c50:	mov	r0, r3
    2c54:	bl	0 <coda_cursor_get_num_elements>
    2c58:	mov	r3, r0
    2c5c:	cmp	r3, #0
    2c60:	beq	2c6c <eval_boolean+0x1958>
    2c64:	mvn	r3, #0
    2c68:	b	3130 <eval_boolean+0x1e1c>
    2c6c:	ldr	r3, [fp, #-464]	; 0xfffffe30
    2c70:	cmp	r3, #0
    2c74:	ble	2d50 <eval_boolean+0x1a3c>
    2c78:	ldr	r3, [fp, #-1008]	; 0xfffffc10
    2c7c:	add	r3, r3, #8
    2c80:	mov	r0, r3
    2c84:	bl	0 <coda_cursor_goto_first_array_element>
    2c88:	mov	r3, r0
    2c8c:	cmp	r3, #0
    2c90:	beq	2c9c <eval_boolean+0x1988>
    2c94:	mvn	r3, #0
    2c98:	b	3130 <eval_boolean+0x1e1c>
    2c9c:	mov	r3, #0
    2ca0:	str	r3, [fp, #-16]
    2ca4:	b	2d40 <eval_boolean+0x1a2c>
    2ca8:	ldr	r3, [fp, #-24]	; 0xffffffe8
    2cac:	ldr	r3, [r3, #20]
    2cb0:	sub	r2, fp, #468	; 0x1d4
    2cb4:	mov	r1, r3
    2cb8:	ldr	r0, [fp, #-1008]	; 0xfffffc10
    2cbc:	bl	1314 <eval_boolean>
    2cc0:	mov	r3, r0
    2cc4:	cmp	r3, #0
    2cc8:	beq	2cd4 <eval_boolean+0x19c0>
    2ccc:	mvn	r3, #0
    2cd0:	b	3130 <eval_boolean+0x1e1c>
    2cd4:	ldr	r3, [fp, #-468]	; 0xfffffe2c
    2cd8:	cmp	r3, #0
    2cdc:	beq	2cf4 <eval_boolean+0x19e0>
    2ce0:	ldr	r3, [fp, #-1016]	; 0xfffffc08
    2ce4:	mov	r2, #1
    2ce8:	str	r2, [r3]
    2cec:	mov	r3, #0
    2cf0:	b	2d3c <eval_boolean+0x1a28>
    2cf4:	ldr	r3, [fp, #-464]	; 0xfffffe30
    2cf8:	sub	r3, r3, #1
    2cfc:	ldr	r2, [fp, #-16]
    2d00:	cmp	r2, r3
    2d04:	bge	2d2c <eval_boolean+0x1a18>
    2d08:	ldr	r3, [fp, #-1008]	; 0xfffffc10
    2d0c:	add	r3, r3, #8
    2d10:	mov	r0, r3
    2d14:	bl	0 <coda_cursor_goto_next_array_element>
    2d18:	mov	r3, r0
    2d1c:	cmp	r3, #0
    2d20:	beq	2d2c <eval_boolean+0x1a18>
    2d24:	mvn	r3, #0
    2d28:	b	2d3c <eval_boolean+0x1a28>
    2d2c:	ldr	r3, [fp, #-16]
    2d30:	add	r3, r3, #1
    2d34:	str	r3, [fp, #-16]
    2d38:	b	2d40 <eval_boolean+0x1a2c>
    2d3c:	b	3130 <eval_boolean+0x1e1c>
    2d40:	ldr	r3, [fp, #-464]	; 0xfffffe30
    2d44:	ldr	r2, [fp, #-16]
    2d48:	cmp	r2, r3
    2d4c:	blt	2ca8 <eval_boolean+0x1994>
    2d50:	ldr	r3, [fp, #-1016]	; 0xfffffc08
    2d54:	mov	r2, #0
    2d58:	str	r2, [r3]
    2d5c:	ldr	r3, [fp, #-1008]	; 0xfffffc10
    2d60:	add	r3, r3, #8
    2d64:	sub	r1, fp, #1004	; 0x3ec
    2d68:	mov	r2, #520	; 0x208
    2d6c:	mov	r0, r3
    2d70:	bl	0 <memcpy>
    2d74:	b	312c <eval_boolean+0x1e18>
    2d78:	ldr	r3, [fp, #-1008]	; 0xfffffc10
    2d7c:	ldr	r3, [r3]
    2d80:	cmp	r3, #0
    2d84:	bne	2da8 <eval_boolean+0x1a94>
    2d88:	movw	r3, #0
    2d8c:	movt	r3, #0
    2d90:	movw	r2, #1288	; 0x508
    2d94:	movw	r1, #0
    2d98:	movt	r1, #0
    2d9c:	movw	r0, #0
    2da0:	movt	r0, #0
    2da4:	bl	0 <__assert_fail>
    2da8:	ldr	r3, [fp, #-1008]	; 0xfffffc10
    2dac:	ldr	r3, [r3, #560]	; 0x230
    2db0:	cmp	r3, #0
    2db4:	beq	2dd0 <eval_boolean+0x1abc>
    2db8:	movw	r1, #0
    2dbc:	movt	r1, #0
    2dc0:	mvn	r0, #400	; 0x190
    2dc4:	bl	0 <coda_set_error>
    2dc8:	mvn	r3, #0
    2dcc:	b	3130 <eval_boolean+0x1e1c>
    2dd0:	ldr	r3, [fp, #-1008]	; 0xfffffc10
    2dd4:	ldr	r3, [r3]
    2dd8:	ldr	r0, [r3]
    2ddc:	ldr	r3, [fp, #-24]	; 0xffffffe8
    2de0:	ldr	r3, [r3, #12]
    2de4:	sub	r2, fp, #472	; 0x1d8
    2de8:	mov	r1, r3
    2dec:	bl	0 <coda_product_variable_get_size>
    2df0:	mov	r3, r0
    2df4:	cmp	r3, #0
    2df8:	beq	2e04 <eval_boolean+0x1af0>
    2dfc:	mvn	r3, #0
    2e00:	b	3130 <eval_boolean+0x1e1c>
    2e04:	ldr	r3, [fp, #-24]	; 0xffffffe8
    2e08:	ldr	r2, [r3, #12]
    2e0c:	ldr	r3, [fp, #-1008]	; 0xfffffc10
    2e10:	str	r2, [r3, #560]	; 0x230
    2e14:	mov	r3, #0
    2e18:	str	r3, [fp, #-20]	; 0xffffffec
    2e1c:	b	2e9c <eval_boolean+0x1b88>
    2e20:	ldr	r3, [fp, #-20]	; 0xffffffec
    2e24:	mov	r2, r3
    2e28:	asr	r3, r2, #31
    2e2c:	ldr	r1, [fp, #-1008]	; 0xfffffc10
    2e30:	add	r1, r1, #560	; 0x230
    2e34:	strd	r2, [r1, #-8]
    2e38:	ldr	r3, [fp, #-24]	; 0xffffffe8
    2e3c:	ldr	r3, [r3, #16]
    2e40:	sub	r2, fp, #476	; 0x1dc
    2e44:	mov	r1, r3
    2e48:	ldr	r0, [fp, #-1008]	; 0xfffffc10
    2e4c:	bl	1314 <eval_boolean>
    2e50:	mov	r3, r0
    2e54:	cmp	r3, #0
    2e58:	beq	2e64 <eval_boolean+0x1b50>
    2e5c:	mvn	r3, #0
    2e60:	b	3130 <eval_boolean+0x1e1c>
    2e64:	ldr	r3, [fp, #-476]	; 0xfffffe24
    2e68:	cmp	r3, #0
    2e6c:	beq	2e90 <eval_boolean+0x1b7c>
    2e70:	ldr	r3, [fp, #-1016]	; 0xfffffc08
    2e74:	mov	r2, #1
    2e78:	str	r2, [r3]
    2e7c:	ldr	r3, [fp, #-1008]	; 0xfffffc10
    2e80:	mov	r2, #0
    2e84:	str	r2, [r3, #560]	; 0x230
    2e88:	mov	r3, #0
    2e8c:	b	3130 <eval_boolean+0x1e1c>
    2e90:	ldr	r3, [fp, #-20]	; 0xffffffec
    2e94:	add	r3, r3, #1
    2e98:	str	r3, [fp, #-20]	; 0xffffffec
    2e9c:	ldr	r3, [fp, #-472]	; 0xfffffe28
    2ea0:	ldr	r2, [fp, #-20]	; 0xffffffec
    2ea4:	cmp	r2, r3
    2ea8:	blt	2e20 <eval_boolean+0x1b0c>
    2eac:	ldr	r3, [fp, #-1016]	; 0xfffffc08
    2eb0:	mov	r2, #0
    2eb4:	str	r2, [r3]
    2eb8:	ldr	r3, [fp, #-1008]	; 0xfffffc10
    2ebc:	mov	r2, #0
    2ec0:	str	r2, [r3, #560]	; 0x230
    2ec4:	b	312c <eval_boolean+0x1e18>
    2ec8:	ldr	r3, [fp, #-24]	; 0xffffffe8
    2ecc:	ldr	r3, [r3, #16]
    2ed0:	sub	r2, fp, #480	; 0x1e0
    2ed4:	mov	r1, r3
    2ed8:	ldr	r0, [fp, #-1008]	; 0xfffffc10
    2edc:	bl	1314 <eval_boolean>
    2ee0:	mov	r3, r0
    2ee4:	cmp	r3, #0
    2ee8:	beq	2ef4 <eval_boolean+0x1be0>
    2eec:	mvn	r3, #0
    2ef0:	b	3130 <eval_boolean+0x1e1c>
    2ef4:	ldr	r3, [fp, #-480]	; 0xfffffe20
    2ef8:	cmp	r3, #0
    2efc:	beq	2f2c <eval_boolean+0x1c18>
    2f00:	ldr	r3, [fp, #-24]	; 0xffffffe8
    2f04:	ldr	r3, [r3, #20]
    2f08:	ldr	r2, [fp, #-1016]	; 0xfffffc08
    2f0c:	mov	r1, r3
    2f10:	ldr	r0, [fp, #-1008]	; 0xfffffc10
    2f14:	bl	1314 <eval_boolean>
    2f18:	mov	r3, r0
    2f1c:	cmp	r3, #0
    2f20:	beq	3128 <eval_boolean+0x1e14>
    2f24:	mvn	r3, #0
    2f28:	b	3130 <eval_boolean+0x1e1c>
    2f2c:	ldr	r3, [fp, #-24]	; 0xffffffe8
    2f30:	ldr	r3, [r3, #24]
    2f34:	ldr	r2, [fp, #-1016]	; 0xfffffc08
    2f38:	mov	r1, r3
    2f3c:	ldr	r0, [fp, #-1008]	; 0xfffffc10
    2f40:	bl	1314 <eval_boolean>
    2f44:	mov	r3, r0
    2f48:	cmp	r3, #0
    2f4c:	beq	3128 <eval_boolean+0x1e14>
    2f50:	mvn	r3, #0
    2f54:	b	3130 <eval_boolean+0x1e1c>
    2f58:	ldr	r3, [fp, #-1008]	; 0xfffffc10
    2f5c:	ldr	r3, [r3]
    2f60:	cmp	r3, #0
    2f64:	bne	2f88 <eval_boolean+0x1c74>
    2f68:	movw	r3, #0
    2f6c:	movt	r3, #0
    2f70:	movw	r2, #1348	; 0x544
    2f74:	movw	r1, #0
    2f78:	movt	r1, #0
    2f7c:	movw	r0, #0
    2f80:	movt	r0, #0
    2f84:	bl	0 <__assert_fail>
    2f88:	ldr	r3, [fp, #-1008]	; 0xfffffc10
    2f8c:	sub	r0, fp, #1004	; 0x3ec
    2f90:	add	r3, r3, #8
    2f94:	mov	r2, #520	; 0x208
    2f98:	mov	r1, r3
    2f9c:	bl	0 <memcpy>
    2fa0:	ldr	r3, [fp, #-24]	; 0xffffffe8
    2fa4:	ldr	r3, [r3, #16]
    2fa8:	mov	r1, r3
    2fac:	ldr	r0, [fp, #-1008]	; 0xfffffc10
    2fb0:	bl	9334 <eval_cursor>
    2fb4:	mov	r3, r0
    2fb8:	cmp	r3, #0
    2fbc:	beq	2fc8 <eval_boolean+0x1cb4>
    2fc0:	mvn	r3, #0
    2fc4:	b	3130 <eval_boolean+0x1e1c>
    2fc8:	ldr	r3, [fp, #-24]	; 0xffffffe8
    2fcc:	ldr	r3, [r3, #20]
    2fd0:	ldr	r2, [fp, #-1016]	; 0xfffffc08
    2fd4:	mov	r1, r3
    2fd8:	ldr	r0, [fp, #-1008]	; 0xfffffc10
    2fdc:	bl	1314 <eval_boolean>
    2fe0:	mov	r3, r0
    2fe4:	cmp	r3, #0
    2fe8:	beq	2ff4 <eval_boolean+0x1ce0>
    2fec:	mvn	r3, #0
    2ff0:	b	3130 <eval_boolean+0x1e1c>
    2ff4:	ldr	r3, [fp, #-1008]	; 0xfffffc10
    2ff8:	add	r3, r3, #8
    2ffc:	sub	r1, fp, #1004	; 0x3ec
    3000:	mov	r2, #520	; 0x208
    3004:	mov	r0, r3
    3008:	bl	0 <memcpy>
    300c:	b	312c <eval_boolean+0x1e18>
    3010:	ldr	r3, [fp, #-24]	; 0xffffffe8
    3014:	ldr	r3, [r3, #12]
    3018:	ldrb	r3, [r3]
    301c:	sub	r3, r3, #105	; 0x69
    3020:	str	r3, [fp, #-32]	; 0xffffffe0
    3024:	ldr	r2, [fp, #-1008]	; 0xfffffc10
    3028:	ldr	r3, [fp, #-32]	; 0xffffffe0
    302c:	add	r3, r3, #66	; 0x42
    3030:	lsl	r3, r3, #3
    3034:	add	r3, r2, r3
    3038:	ldrd	r2, [r3]
    303c:	strd	r2, [fp, #-44]	; 0xffffffd4
    3040:	ldr	r3, [fp, #-24]	; 0xffffffe8
    3044:	ldr	r1, [r3, #16]
    3048:	ldr	r3, [fp, #-32]	; 0xffffffe0
    304c:	add	r3, r3, #66	; 0x42
    3050:	lsl	r3, r3, #3
    3054:	ldr	r2, [fp, #-1008]	; 0xfffffc10
    3058:	add	r3, r2, r3
    305c:	mov	r2, r3
    3060:	ldr	r0, [fp, #-1008]	; 0xfffffc10
    3064:	bl	4510 <eval_integer>
    3068:	mov	r3, r0
    306c:	cmp	r3, #0
    3070:	beq	307c <eval_boolean+0x1d68>
    3074:	mvn	r3, #0
    3078:	b	3130 <eval_boolean+0x1e1c>
    307c:	ldr	r3, [fp, #-24]	; 0xffffffe8
    3080:	ldr	r3, [r3, #20]
    3084:	ldr	r2, [fp, #-1016]	; 0xfffffc08
    3088:	mov	r1, r3
    308c:	ldr	r0, [fp, #-1008]	; 0xfffffc10
    3090:	bl	1314 <eval_boolean>
    3094:	mov	r3, r0
    3098:	cmp	r3, #0
    309c:	beq	30a8 <eval_boolean+0x1d94>
    30a0:	mvn	r3, #0
    30a4:	b	3130 <eval_boolean+0x1e1c>
    30a8:	ldr	r2, [fp, #-1008]	; 0xfffffc10
    30ac:	ldr	r3, [fp, #-32]	; 0xffffffe0
    30b0:	add	r3, r3, #66	; 0x42
    30b4:	lsl	r3, r3, #3
    30b8:	add	r1, r2, r3
    30bc:	ldrd	r2, [fp, #-44]	; 0xffffffd4
    30c0:	strd	r2, [r1]
    30c4:	b	312c <eval_boolean+0x1e18>
    30c8:	movw	r3, #0
    30cc:	movt	r3, #0
    30d0:	movw	r2, #1379	; 0x563
    30d4:	movw	r1, #0
    30d8:	movt	r1, #0
    30dc:	movw	r0, #0
    30e0:	movt	r0, #0
    30e4:	bl	0 <__assert_fail>
    30e8:	nop	{0}
    30ec:	b	312c <eval_boolean+0x1e18>
    30f0:	nop	{0}
    30f4:	b	312c <eval_boolean+0x1e18>
    30f8:	nop	{0}
    30fc:	b	312c <eval_boolean+0x1e18>
    3100:	nop	{0}
    3104:	b	312c <eval_boolean+0x1e18>
    3108:	nop	{0}
    310c:	b	312c <eval_boolean+0x1e18>
    3110:	nop	{0}
    3114:	b	312c <eval_boolean+0x1e18>
    3118:	nop	{0}
    311c:	b	312c <eval_boolean+0x1e18>
    3120:	nop	{0}
    3124:	b	312c <eval_boolean+0x1e18>
    3128:	nop	{0}
    312c:	mov	r3, #0
    3130:	mov	r0, r3
    3134:	sub	sp, fp, #4
    3138:	ldr	fp, [sp]
    313c:	add	sp, sp, #4
    3140:	pop	{pc}		; (ldr pc, [sp], #4)
    3144:	.word	0x00000838
    3148:	.word	0x00000820

0000314c <eval_float>:
    314c:	str	fp, [sp, #-8]!
    3150:	str	lr, [sp, #4]
    3154:	vpush	{d8}
    3158:	add	fp, sp, #12
    315c:	sub	sp, sp, #816	; 0x330
    3160:	str	r0, [fp, #-808]	; 0xfffffcd8
    3164:	str	r1, [fp, #-812]	; 0xfffffcd4
    3168:	str	r2, [fp, #-816]	; 0xfffffcd0
    316c:	ldr	r3, [fp, #-812]	; 0xfffffcd4
    3170:	ldr	r3, [r3, #4]
    3174:	cmp	r3, #1
    3178:	bne	31cc <eval_float+0x80>
    317c:	sub	r3, fp, #52	; 0x34
    3180:	mov	r2, r3
    3184:	ldr	r1, [fp, #-812]	; 0xfffffcd4
    3188:	ldr	r0, [fp, #-808]	; 0xfffffcd8
    318c:	bl	4510 <eval_integer>
    3190:	mov	r3, r0
    3194:	cmp	r3, #0
    3198:	beq	31a4 <eval_float+0x58>
    319c:	mvn	r3, #0
    31a0:	b	44f8 <eval_float+0x13ac>
    31a4:	ldrd	r2, [fp, #-52]	; 0xffffffcc
    31a8:	mov	r0, r2
    31ac:	mov	r1, r3
    31b0:	bl	0 <__aeabi_l2d>
    31b4:	mov	r2, r0
    31b8:	mov	r3, r1
    31bc:	ldr	r1, [fp, #-816]	; 0xfffffcd0
    31c0:	strd	r2, [r1]
    31c4:	mov	r3, #0
    31c8:	b	44f8 <eval_float+0x13ac>
    31cc:	ldr	r3, [fp, #-812]	; 0xfffffcd4
    31d0:	ldr	r3, [r3]
    31d4:	cmp	r3, #19
    31d8:	bne	31f4 <eval_float+0xa8>
    31dc:	ldr	r3, [fp, #-812]	; 0xfffffcd4
    31e0:	ldrd	r2, [r3, #16]
    31e4:	ldr	r1, [fp, #-816]	; 0xfffffcd0
    31e8:	strd	r2, [r1]
    31ec:	mov	r3, #0
    31f0:	b	44f8 <eval_float+0x13ac>
    31f4:	ldr	r3, [fp, #-812]	; 0xfffffcd4
    31f8:	str	r3, [fp, #-28]	; 0xffffffe4
    31fc:	ldr	r3, [fp, #-28]	; 0xffffffe4
    3200:	ldr	r3, [r3]
    3204:	cmp	r3, #86	; 0x56
    3208:	ldrls	pc, [pc, r3, lsl #2]
    320c:	b	44d0 <eval_float+0x1384>
    3210:	.word	0x000035a4
    3214:	.word	0x00003730
    3218:	.word	0x000044d0
    321c:	.word	0x00003e54
    3220:	.word	0x000044d0
    3224:	.word	0x000044d0
    3228:	.word	0x000044d0
    322c:	.word	0x000044d0
    3230:	.word	0x00003ff0
    3234:	.word	0x000041a8
    3238:	.word	0x000044d0
    323c:	.word	0x00004360
    3240:	.word	0x000044d0
    3244:	.word	0x000044d0
    3248:	.word	0x000044d0
    324c:	.word	0x000044d0
    3250:	.word	0x000044d0
    3254:	.word	0x00003608
    3258:	.word	0x000044d0
    325c:	.word	0x000044d0
    3260:	.word	0x000044d0
    3264:	.word	0x000044d0
    3268:	.word	0x000044d0
    326c:	.word	0x000044d0
    3270:	.word	0x00003880
    3274:	.word	0x000044d0
    3278:	.word	0x000044d0
    327c:	.word	0x000044d0
    3280:	.word	0x000044d0
    3284:	.word	0x0000336c
    3288:	.word	0x00003654
    328c:	.word	0x000044d0
    3290:	.word	0x000044d0
    3294:	.word	0x000044d0
    3298:	.word	0x000044d0
    329c:	.word	0x000044d0
    32a0:	.word	0x000044d0
    32a4:	.word	0x000044d0
    32a8:	.word	0x000044d0
    32ac:	.word	0x000044d0
    32b0:	.word	0x000044d0
    32b4:	.word	0x000044d0
    32b8:	.word	0x00003dc4
    32bc:	.word	0x000044d0
    32c0:	.word	0x000044d0
    32c4:	.word	0x000044d0
    32c8:	.word	0x000044d0
    32cc:	.word	0x000044d0
    32d0:	.word	0x000044d0
    32d4:	.word	0x000044d0
    32d8:	.word	0x000044d0
    32dc:	.word	0x000044d0
    32e0:	.word	0x000044d0
    32e4:	.word	0x000044d0
    32e8:	.word	0x000044d0
    32ec:	.word	0x000044d0
    32f0:	.word	0x00003b0c
    32f4:	.word	0x00003b90
    32f8:	.word	0x00003918
    32fc:	.word	0x00003810
    3300:	.word	0x00003560
    3304:	.word	0x000044d0
    3308:	.word	0x000044d0
    330c:	.word	0x000044d0
    3310:	.word	0x000044d0
    3314:	.word	0x000044d0
    3318:	.word	0x000039bc
    331c:	.word	0x000044d0
    3320:	.word	0x000044d0
    3324:	.word	0x000044d0
    3328:	.word	0x000044d0
    332c:	.word	0x000044d0
    3330:	.word	0x000036a0
    3334:	.word	0x000044d0
    3338:	.word	0x000044d0
    333c:	.word	0x000044d0
    3340:	.word	0x000044d0
    3344:	.word	0x000044d0
    3348:	.word	0x000037a0
    334c:	.word	0x00003c14
    3350:	.word	0x000044d0
    3354:	.word	0x000044d0
    3358:	.word	0x000044d0
    335c:	.word	0x000044d0
    3360:	.word	0x000044d0
    3364:	.word	0x000044d0
    3368:	.word	0x00004418
    336c:	ldr	r3, [fp, #-28]	; 0xffffffe4
    3370:	ldr	r3, [r3, #16]
    3374:	ldr	r3, [r3, #4]
    3378:	cmp	r3, #4
    337c:	bne	3454 <eval_float+0x308>
    3380:	ldr	r3, [fp, #-808]	; 0xfffffcd8
    3384:	ldr	r3, [r3]
    3388:	cmp	r3, #0
    338c:	bne	33b0 <eval_float+0x264>
    3390:	movw	r3, #0
    3394:	movt	r3, #0
    3398:	movw	r2, #1418	; 0x58a
    339c:	movw	r1, #0
    33a0:	movt	r1, #0
    33a4:	movw	r0, #0
    33a8:	movt	r0, #0
    33ac:	bl	0 <__assert_fail>
    33b0:	ldr	r3, [fp, #-808]	; 0xfffffcd8
    33b4:	sub	r0, fp, #804	; 0x324
    33b8:	add	r3, r3, #8
    33bc:	mov	r2, #520	; 0x208
    33c0:	mov	r1, r3
    33c4:	bl	0 <memcpy>
    33c8:	ldr	r3, [fp, #-28]	; 0xffffffe4
    33cc:	ldr	r3, [r3, #16]
    33d0:	mov	r1, r3
    33d4:	ldr	r0, [fp, #-808]	; 0xfffffcd8
    33d8:	bl	9334 <eval_cursor>
    33dc:	mov	r3, r0
    33e0:	cmp	r3, #0
    33e4:	beq	33f0 <eval_float+0x2a4>
    33e8:	mvn	r3, #0
    33ec:	b	44f8 <eval_float+0x13ac>
    33f0:	bl	0 <coda_get_option_perform_conversions>
    33f4:	str	r0, [fp, #-32]	; 0xffffffe0
    33f8:	mov	r0, #0
    33fc:	bl	0 <coda_set_option_perform_conversions>
    3400:	ldr	r3, [fp, #-808]	; 0xfffffcd8
    3404:	add	r3, r3, #8
    3408:	ldr	r1, [fp, #-816]	; 0xfffffcd0
    340c:	mov	r0, r3
    3410:	bl	0 <coda_cursor_read_double>
    3414:	mov	r3, r0
    3418:	cmp	r3, #0
    341c:	beq	3430 <eval_float+0x2e4>
    3420:	ldr	r0, [fp, #-32]	; 0xffffffe0
    3424:	bl	0 <coda_set_option_perform_conversions>
    3428:	mvn	r3, #0
    342c:	b	44f8 <eval_float+0x13ac>
    3430:	ldr	r0, [fp, #-32]	; 0xffffffe0
    3434:	bl	0 <coda_set_option_perform_conversions>
    3438:	ldr	r3, [fp, #-808]	; 0xfffffcd8
    343c:	add	r3, r3, #8
    3440:	sub	r1, fp, #804	; 0x324
    3444:	mov	r2, #520	; 0x208
    3448:	mov	r0, r3
    344c:	bl	0 <memcpy>
    3450:	b	44f4 <eval_float+0x13a8>
    3454:	ldr	r3, [fp, #-28]	; 0xffffffe4
    3458:	ldr	r3, [r3, #16]
    345c:	ldr	r3, [r3, #4]
    3460:	cmp	r3, #3
    3464:	bne	3510 <eval_float+0x3c4>
    3468:	ldr	r3, [fp, #-28]	; 0xffffffe4
    346c:	ldr	r1, [r3, #16]
    3470:	sub	r0, fp, #60	; 0x3c
    3474:	sub	r2, fp, #56	; 0x38
    3478:	sub	r3, fp, #64	; 0x40
    347c:	str	r3, [sp]
    3480:	mov	r3, r0
    3484:	ldr	r0, [fp, #-808]	; 0xfffffcd8
    3488:	bl	684c <eval_string>
    348c:	mov	r3, r0
    3490:	cmp	r3, #0
    3494:	beq	34a0 <eval_float+0x354>
    3498:	mvn	r3, #0
    349c:	b	44f8 <eval_float+0x13ac>
    34a0:	ldr	r3, [fp, #-60]	; 0xffffffc4
    34a4:	cmp	r3, #0
    34a8:	bne	34c4 <eval_float+0x378>
    34ac:	movw	r1, #0
    34b0:	movt	r1, #0
    34b4:	mvn	r0, #102	; 0x66
    34b8:	bl	0 <coda_set_error>
    34bc:	mvn	r3, #0
    34c0:	b	44f8 <eval_float+0x13ac>
    34c4:	ldr	r3, [fp, #-64]	; 0xffffffc0
    34c8:	ldr	r2, [fp, #-56]	; 0xffffffc8
    34cc:	add	r0, r3, r2
    34d0:	ldr	r1, [fp, #-60]	; 0xffffffc4
    34d4:	mov	r3, #0
    34d8:	ldr	r2, [fp, #-816]	; 0xfffffcd0
    34dc:	bl	0 <coda_ascii_parse_double>
    34e0:	mov	r3, r0
    34e4:	cmp	r3, #0
    34e8:	bge	3500 <eval_float+0x3b4>
    34ec:	ldr	r3, [fp, #-64]	; 0xffffffc0
    34f0:	mov	r0, r3
    34f4:	bl	0 <free>
    34f8:	mvn	r3, #0
    34fc:	b	44f8 <eval_float+0x13ac>
    3500:	ldr	r3, [fp, #-64]	; 0xffffffc0
    3504:	mov	r0, r3
    3508:	bl	0 <free>
    350c:	b	44f4 <eval_float+0x13a8>
    3510:	ldr	r3, [fp, #-28]	; 0xffffffe4
    3514:	ldr	r3, [r3, #16]
    3518:	sub	r2, fp, #76	; 0x4c
    351c:	mov	r1, r3
    3520:	ldr	r0, [fp, #-808]	; 0xfffffcd8
    3524:	bl	4510 <eval_integer>
    3528:	mov	r3, r0
    352c:	cmp	r3, #0
    3530:	beq	353c <eval_float+0x3f0>
    3534:	mvn	r3, #0
    3538:	b	44f8 <eval_float+0x13ac>
    353c:	ldrd	r2, [fp, #-76]	; 0xffffffb4
    3540:	mov	r0, r2
    3544:	mov	r1, r3
    3548:	bl	0 <__aeabi_l2d>
    354c:	mov	r2, r0
    3550:	mov	r3, r1
    3554:	ldr	r1, [fp, #-816]	; 0xfffffcd0
    3558:	strd	r2, [r1]
    355c:	b	44f4 <eval_float+0x13a8>
    3560:	ldr	r3, [fp, #-28]	; 0xffffffe4
    3564:	ldr	r3, [r3, #16]
    3568:	ldr	r2, [fp, #-816]	; 0xfffffcd0
    356c:	mov	r1, r3
    3570:	ldr	r0, [fp, #-808]	; 0xfffffcd8
    3574:	bl	314c <eval_float>
    3578:	mov	r3, r0
    357c:	cmp	r3, #0
    3580:	beq	358c <eval_float+0x440>
    3584:	mvn	r3, #0
    3588:	b	44f8 <eval_float+0x13ac>
    358c:	ldr	r3, [fp, #-816]	; 0xfffffcd0
    3590:	vldr	d7, [r3]
    3594:	vneg.f64	d7, d7
    3598:	ldr	r3, [fp, #-816]	; 0xfffffcd0
    359c:	vstr	d7, [r3]
    35a0:	b	44f4 <eval_float+0x13a8>
    35a4:	ldr	r3, [fp, #-28]	; 0xffffffe4
    35a8:	ldr	r3, [r3, #16]
    35ac:	ldr	r2, [fp, #-816]	; 0xfffffcd0
    35b0:	mov	r1, r3
    35b4:	ldr	r0, [fp, #-808]	; 0xfffffcd8
    35b8:	bl	314c <eval_float>
    35bc:	mov	r3, r0
    35c0:	cmp	r3, #0
    35c4:	beq	35d0 <eval_float+0x484>
    35c8:	mvn	r3, #0
    35cc:	b	44f8 <eval_float+0x13ac>
    35d0:	ldr	r3, [fp, #-816]	; 0xfffffcd0
    35d4:	vldr	d7, [r3]
    35d8:	vcmpe.f64	d7, #0.0
    35dc:	vmrs	APSR_nzcv, fpscr
    35e0:	blt	35f0 <eval_float+0x4a4>
    35e4:	ldr	r3, [fp, #-816]	; 0xfffffcd0
    35e8:	vldr	d7, [r3]
    35ec:	b	35fc <eval_float+0x4b0>
    35f0:	ldr	r3, [fp, #-816]	; 0xfffffcd0
    35f4:	vldr	d7, [r3]
    35f8:	vneg.f64	d7, d7
    35fc:	ldr	r3, [fp, #-816]	; 0xfffffcd0
    3600:	vstr	d7, [r3]
    3604:	b	44f4 <eval_float+0x13a8>
    3608:	ldr	r3, [fp, #-28]	; 0xffffffe4
    360c:	ldr	r3, [r3, #16]
    3610:	ldr	r2, [fp, #-816]	; 0xfffffcd0
    3614:	mov	r1, r3
    3618:	ldr	r0, [fp, #-808]	; 0xfffffcd8
    361c:	bl	314c <eval_float>
    3620:	mov	r3, r0
    3624:	cmp	r3, #0
    3628:	beq	3634 <eval_float+0x4e8>
    362c:	mvn	r3, #0
    3630:	b	44f8 <eval_float+0x13ac>
    3634:	ldr	r3, [fp, #-816]	; 0xfffffcd0
    3638:	vldr	d7, [r3]
    363c:	vmov.f64	d0, d7
    3640:	bl	0 <ceil>
    3644:	vmov.f64	d7, d0
    3648:	ldr	r3, [fp, #-816]	; 0xfffffcd0
    364c:	vstr	d7, [r3]
    3650:	b	44f4 <eval_float+0x13a8>
    3654:	ldr	r3, [fp, #-28]	; 0xffffffe4
    3658:	ldr	r3, [r3, #16]
    365c:	ldr	r2, [fp, #-816]	; 0xfffffcd0
    3660:	mov	r1, r3
    3664:	ldr	r0, [fp, #-808]	; 0xfffffcd8
    3668:	bl	314c <eval_float>
    366c:	mov	r3, r0
    3670:	cmp	r3, #0
    3674:	beq	3680 <eval_float+0x534>
    3678:	mvn	r3, #0
    367c:	b	44f8 <eval_float+0x13ac>
    3680:	ldr	r3, [fp, #-816]	; 0xfffffcd0
    3684:	vldr	d7, [r3]
    3688:	vmov.f64	d0, d7
    368c:	bl	0 <floor>
    3690:	vmov.f64	d7, d0
    3694:	ldr	r3, [fp, #-816]	; 0xfffffcd0
    3698:	vstr	d7, [r3]
    369c:	b	44f4 <eval_float+0x13a8>
    36a0:	ldr	r3, [fp, #-28]	; 0xffffffe4
    36a4:	ldr	r3, [r3, #16]
    36a8:	ldr	r2, [fp, #-816]	; 0xfffffcd0
    36ac:	mov	r1, r3
    36b0:	ldr	r0, [fp, #-808]	; 0xfffffcd8
    36b4:	bl	314c <eval_float>
    36b8:	mov	r3, r0
    36bc:	cmp	r3, #0
    36c0:	beq	36cc <eval_float+0x580>
    36c4:	mvn	r3, #0
    36c8:	b	44f8 <eval_float+0x13ac>
    36cc:	ldr	r3, [fp, #-816]	; 0xfffffcd0
    36d0:	vldr	d7, [r3]
    36d4:	vcmpe.f64	d7, #0.0
    36d8:	vmrs	APSR_nzcv, fpscr
    36dc:	bpl	3708 <eval_float+0x5bc>
    36e0:	ldr	r3, [fp, #-816]	; 0xfffffcd0
    36e4:	vldr	d7, [r3]
    36e8:	vldr	d6, [pc, #1008]	; 3ae0 <eval_float+0x994>
    36ec:	vsub.f64	d7, d7, d6
    36f0:	vmov.f64	d0, d7
    36f4:	bl	0 <ceil>
    36f8:	vmov.f64	d7, d0
    36fc:	ldr	r3, [fp, #-816]	; 0xfffffcd0
    3700:	vstr	d7, [r3]
    3704:	b	44f4 <eval_float+0x13a8>
    3708:	ldr	r3, [fp, #-816]	; 0xfffffcd0
    370c:	vldr	d7, [r3]
    3710:	vldr	d6, [pc, #968]	; 3ae0 <eval_float+0x994>
    3714:	vadd.f64	d7, d7, d6
    3718:	vmov.f64	d0, d7
    371c:	bl	0 <floor>
    3720:	vmov.f64	d7, d0
    3724:	ldr	r3, [fp, #-816]	; 0xfffffcd0
    3728:	vstr	d7, [r3]
    372c:	b	44f4 <eval_float+0x13a8>
    3730:	ldr	r3, [fp, #-28]	; 0xffffffe4
    3734:	ldr	r3, [r3, #16]
    3738:	sub	r2, fp, #84	; 0x54
    373c:	mov	r1, r3
    3740:	ldr	r0, [fp, #-808]	; 0xfffffcd8
    3744:	bl	314c <eval_float>
    3748:	mov	r3, r0
    374c:	cmp	r3, #0
    3750:	beq	375c <eval_float+0x610>
    3754:	mvn	r3, #0
    3758:	b	44f8 <eval_float+0x13ac>
    375c:	ldr	r3, [fp, #-28]	; 0xffffffe4
    3760:	ldr	r3, [r3, #20]
    3764:	sub	r2, fp, #92	; 0x5c
    3768:	mov	r1, r3
    376c:	ldr	r0, [fp, #-808]	; 0xfffffcd8
    3770:	bl	314c <eval_float>
    3774:	mov	r3, r0
    3778:	cmp	r3, #0
    377c:	beq	3788 <eval_float+0x63c>
    3780:	mvn	r3, #0
    3784:	b	44f8 <eval_float+0x13ac>
    3788:	vldr	d6, [fp, #-84]	; 0xffffffac
    378c:	vldr	d7, [fp, #-92]	; 0xffffffa4
    3790:	vadd.f64	d7, d6, d7
    3794:	ldr	r3, [fp, #-816]	; 0xfffffcd0
    3798:	vstr	d7, [r3]
    379c:	b	44f4 <eval_float+0x13a8>
    37a0:	ldr	r3, [fp, #-28]	; 0xffffffe4
    37a4:	ldr	r3, [r3, #16]
    37a8:	sub	r2, fp, #100	; 0x64
    37ac:	mov	r1, r3
    37b0:	ldr	r0, [fp, #-808]	; 0xfffffcd8
    37b4:	bl	314c <eval_float>
    37b8:	mov	r3, r0
    37bc:	cmp	r3, #0
    37c0:	beq	37cc <eval_float+0x680>
    37c4:	mvn	r3, #0
    37c8:	b	44f8 <eval_float+0x13ac>
    37cc:	ldr	r3, [fp, #-28]	; 0xffffffe4
    37d0:	ldr	r3, [r3, #20]
    37d4:	sub	r2, fp, #108	; 0x6c
    37d8:	mov	r1, r3
    37dc:	ldr	r0, [fp, #-808]	; 0xfffffcd8
    37e0:	bl	314c <eval_float>
    37e4:	mov	r3, r0
    37e8:	cmp	r3, #0
    37ec:	beq	37f8 <eval_float+0x6ac>
    37f0:	mvn	r3, #0
    37f4:	b	44f8 <eval_float+0x13ac>
    37f8:	vldr	d6, [fp, #-100]	; 0xffffff9c
    37fc:	vldr	d7, [fp, #-108]	; 0xffffff94
    3800:	vsub.f64	d7, d6, d7
    3804:	ldr	r3, [fp, #-816]	; 0xfffffcd0
    3808:	vstr	d7, [r3]
    380c:	b	44f4 <eval_float+0x13a8>
    3810:	ldr	r3, [fp, #-28]	; 0xffffffe4
    3814:	ldr	r3, [r3, #16]
    3818:	sub	r2, fp, #116	; 0x74
    381c:	mov	r1, r3
    3820:	ldr	r0, [fp, #-808]	; 0xfffffcd8
    3824:	bl	314c <eval_float>
    3828:	mov	r3, r0
    382c:	cmp	r3, #0
    3830:	beq	383c <eval_float+0x6f0>
    3834:	mvn	r3, #0
    3838:	b	44f8 <eval_float+0x13ac>
    383c:	ldr	r3, [fp, #-28]	; 0xffffffe4
    3840:	ldr	r3, [r3, #20]
    3844:	sub	r2, fp, #124	; 0x7c
    3848:	mov	r1, r3
    384c:	ldr	r0, [fp, #-808]	; 0xfffffcd8
    3850:	bl	314c <eval_float>
    3854:	mov	r3, r0
    3858:	cmp	r3, #0
    385c:	beq	3868 <eval_float+0x71c>
    3860:	mvn	r3, #0
    3864:	b	44f8 <eval_float+0x13ac>
    3868:	vldr	d6, [fp, #-116]	; 0xffffff8c
    386c:	vldr	d7, [fp, #-124]	; 0xffffff84
    3870:	vmul.f64	d7, d6, d7
    3874:	ldr	r3, [fp, #-816]	; 0xfffffcd0
    3878:	vstr	d7, [r3]
    387c:	b	44f4 <eval_float+0x13a8>
    3880:	ldr	r3, [fp, #-28]	; 0xffffffe4
    3884:	ldr	r3, [r3, #16]
    3888:	sub	r2, fp, #132	; 0x84
    388c:	mov	r1, r3
    3890:	ldr	r0, [fp, #-808]	; 0xfffffcd8
    3894:	bl	314c <eval_float>
    3898:	mov	r3, r0
    389c:	cmp	r3, #0
    38a0:	beq	38ac <eval_float+0x760>
    38a4:	mvn	r3, #0
    38a8:	b	44f8 <eval_float+0x13ac>
    38ac:	ldr	r3, [fp, #-28]	; 0xffffffe4
    38b0:	ldr	r3, [r3, #20]
    38b4:	sub	r2, fp, #140	; 0x8c
    38b8:	mov	r1, r3
    38bc:	ldr	r0, [fp, #-808]	; 0xfffffcd8
    38c0:	bl	314c <eval_float>
    38c4:	mov	r3, r0
    38c8:	cmp	r3, #0
    38cc:	beq	38d8 <eval_float+0x78c>
    38d0:	mvn	r3, #0
    38d4:	b	44f8 <eval_float+0x13ac>
    38d8:	vldr	d7, [fp, #-140]	; 0xffffff74
    38dc:	vcmp.f64	d7, #0.0
    38e0:	vmrs	APSR_nzcv, fpscr
    38e4:	bne	3900 <eval_float+0x7b4>
    38e8:	movw	r1, #0
    38ec:	movt	r1, #0
    38f0:	mvn	r0, #400	; 0x190
    38f4:	bl	0 <coda_set_error>
    38f8:	mvn	r3, #0
    38fc:	b	44f8 <eval_float+0x13ac>
    3900:	vldr	d5, [fp, #-132]	; 0xffffff7c
    3904:	vldr	d6, [fp, #-140]	; 0xffffff74
    3908:	vdiv.f64	d7, d5, d6
    390c:	ldr	r3, [fp, #-816]	; 0xfffffcd0
    3910:	vstr	d7, [r3]
    3914:	b	44f4 <eval_float+0x13a8>
    3918:	ldr	r3, [fp, #-28]	; 0xffffffe4
    391c:	ldr	r3, [r3, #16]
    3920:	sub	r2, fp, #148	; 0x94
    3924:	mov	r1, r3
    3928:	ldr	r0, [fp, #-808]	; 0xfffffcd8
    392c:	bl	314c <eval_float>
    3930:	mov	r3, r0
    3934:	cmp	r3, #0
    3938:	beq	3944 <eval_float+0x7f8>
    393c:	mvn	r3, #0
    3940:	b	44f8 <eval_float+0x13ac>
    3944:	ldr	r3, [fp, #-28]	; 0xffffffe4
    3948:	ldr	r3, [r3, #20]
    394c:	sub	r2, fp, #156	; 0x9c
    3950:	mov	r1, r3
    3954:	ldr	r0, [fp, #-808]	; 0xfffffcd8
    3958:	bl	314c <eval_float>
    395c:	mov	r3, r0
    3960:	cmp	r3, #0
    3964:	beq	3970 <eval_float+0x824>
    3968:	mvn	r3, #0
    396c:	b	44f8 <eval_float+0x13ac>
    3970:	vldr	d7, [fp, #-156]	; 0xffffff64
    3974:	vcmp.f64	d7, #0.0
    3978:	vmrs	APSR_nzcv, fpscr
    397c:	bne	3998 <eval_float+0x84c>
    3980:	movw	r1, #0
    3984:	movt	r1, #0
    3988:	mvn	r0, #400	; 0x190
    398c:	bl	0 <coda_set_error>
    3990:	mvn	r3, #0
    3994:	b	44f8 <eval_float+0x13ac>
    3998:	vldr	d7, [fp, #-148]	; 0xffffff6c
    399c:	vldr	d6, [fp, #-156]	; 0xffffff64
    39a0:	vmov.f64	d1, d6
    39a4:	vmov.f64	d0, d7
    39a8:	bl	0 <fmod>
    39ac:	vmov.f64	d7, d0
    39b0:	ldr	r3, [fp, #-816]	; 0xfffffcd0
    39b4:	vstr	d7, [r3]
    39b8:	b	44f4 <eval_float+0x13a8>
    39bc:	ldr	r3, [fp, #-28]	; 0xffffffe4
    39c0:	ldr	r3, [r3, #16]
    39c4:	sub	r2, fp, #164	; 0xa4
    39c8:	mov	r1, r3
    39cc:	ldr	r0, [fp, #-808]	; 0xfffffcd8
    39d0:	bl	314c <eval_float>
    39d4:	mov	r3, r0
    39d8:	cmp	r3, #0
    39dc:	beq	39e8 <eval_float+0x89c>
    39e0:	mvn	r3, #0
    39e4:	b	44f8 <eval_float+0x13ac>
    39e8:	ldr	r3, [fp, #-28]	; 0xffffffe4
    39ec:	ldr	r3, [r3, #20]
    39f0:	ldr	r3, [r3, #4]
    39f4:	cmp	r3, #1
    39f8:	bne	3ab0 <eval_float+0x964>
    39fc:	ldr	r3, [fp, #-28]	; 0xffffffe4
    3a00:	ldr	r3, [r3, #20]
    3a04:	sub	r2, fp, #180	; 0xb4
    3a08:	mov	r1, r3
    3a0c:	ldr	r0, [fp, #-808]	; 0xfffffcd8
    3a10:	bl	4510 <eval_integer>
    3a14:	mov	r3, r0
    3a18:	cmp	r3, #0
    3a1c:	beq	3a28 <eval_float+0x8dc>
    3a20:	mvn	r3, #0
    3a24:	b	44f8 <eval_float+0x13ac>
    3a28:	ldrd	r2, [fp, #-180]	; 0xffffff4c
    3a2c:	mvn	r0, #63	; 0x3f
    3a30:	mvn	r1, #0
    3a34:	cmp	r2, r0
    3a38:	sbcs	r3, r3, r1
    3a3c:	blt	3a78 <eval_float+0x92c>
    3a40:	ldrd	r2, [fp, #-180]	; 0xffffff4c
    3a44:	cmp	r2, #65	; 0x41
    3a48:	sbcs	r3, r3, #0
    3a4c:	bge	3a78 <eval_float+0x92c>
    3a50:	vldr	d7, [fp, #-164]	; 0xffffff5c
    3a54:	ldrd	r2, [fp, #-180]	; 0xffffff4c
    3a58:	mov	r3, r2
    3a5c:	mov	r0, r3
    3a60:	vmov.f64	d0, d7
    3a64:	bl	0 <ipow>
    3a68:	vmov.f64	d7, d0
    3a6c:	ldr	r3, [fp, #-816]	; 0xfffffcd0
    3a70:	vstr	d7, [r3]
    3a74:	b	44f4 <eval_float+0x13a8>
    3a78:	vldr	d8, [fp, #-164]	; 0xffffff5c
    3a7c:	ldrd	r2, [fp, #-180]	; 0xffffff4c
    3a80:	mov	r0, r2
    3a84:	mov	r1, r3
    3a88:	bl	0 <__aeabi_l2d>
    3a8c:	mov	r2, r0
    3a90:	mov	r3, r1
    3a94:	vmov	d1, r2, r3
    3a98:	vmov.f64	d0, d8
    3a9c:	bl	0 <pow>
    3aa0:	vmov.f64	d7, d0
    3aa4:	ldr	r3, [fp, #-816]	; 0xfffffcd0
    3aa8:	vstr	d7, [r3]
    3aac:	b	44f4 <eval_float+0x13a8>
    3ab0:	ldr	r3, [fp, #-28]	; 0xffffffe4
    3ab4:	ldr	r3, [r3, #20]
    3ab8:	sub	r2, fp, #172	; 0xac
    3abc:	mov	r1, r3
    3ac0:	ldr	r0, [fp, #-808]	; 0xfffffcd8
    3ac4:	bl	314c <eval_float>
    3ac8:	mov	r3, r0
    3acc:	cmp	r3, #0
    3ad0:	beq	3ae8 <eval_float+0x99c>
    3ad4:	mvn	r3, #0
    3ad8:	b	44f8 <eval_float+0x13ac>
    3adc:	nop	{0}
    3ae0:	.word	0x00000000
    3ae4:	.word	0x3fe00000
    3ae8:	vldr	d7, [fp, #-164]	; 0xffffff5c
    3aec:	vldr	d6, [fp, #-172]	; 0xffffff54
    3af0:	vmov.f64	d1, d6
    3af4:	vmov.f64	d0, d7
    3af8:	bl	0 <pow>
    3afc:	vmov.f64	d7, d0
    3b00:	ldr	r3, [fp, #-816]	; 0xfffffcd0
    3b04:	vstr	d7, [r3]
    3b08:	b	44f4 <eval_float+0x13a8>
    3b0c:	ldr	r3, [fp, #-28]	; 0xffffffe4
    3b10:	ldr	r3, [r3, #16]
    3b14:	sub	r2, fp, #188	; 0xbc
    3b18:	mov	r1, r3
    3b1c:	ldr	r0, [fp, #-808]	; 0xfffffcd8
    3b20:	bl	314c <eval_float>
    3b24:	mov	r3, r0
    3b28:	cmp	r3, #0
    3b2c:	beq	3b38 <eval_float+0x9ec>
    3b30:	mvn	r3, #0
    3b34:	b	44f8 <eval_float+0x13ac>
    3b38:	ldr	r3, [fp, #-28]	; 0xffffffe4
    3b3c:	ldr	r3, [r3, #20]
    3b40:	sub	r2, fp, #196	; 0xc4
    3b44:	mov	r1, r3
    3b48:	ldr	r0, [fp, #-808]	; 0xfffffcd8
    3b4c:	bl	314c <eval_float>
    3b50:	mov	r3, r0
    3b54:	cmp	r3, #0
    3b58:	beq	3b64 <eval_float+0xa18>
    3b5c:	mvn	r3, #0
    3b60:	b	44f8 <eval_float+0x13ac>
    3b64:	vldr	d6, [fp, #-188]	; 0xffffff44
    3b68:	vldr	d7, [fp, #-196]	; 0xffffff3c
    3b6c:	vcmpe.f64	d6, d7
    3b70:	vmrs	APSR_nzcv, fpscr
    3b74:	ble	3b80 <eval_float+0xa34>
    3b78:	ldrd	r2, [fp, #-188]	; 0xffffff44
    3b7c:	b	3b84 <eval_float+0xa38>
    3b80:	ldrd	r2, [fp, #-196]	; 0xffffff3c
    3b84:	ldr	r1, [fp, #-816]	; 0xfffffcd0
    3b88:	strd	r2, [r1]
    3b8c:	b	44f4 <eval_float+0x13a8>
    3b90:	ldr	r3, [fp, #-28]	; 0xffffffe4
    3b94:	ldr	r3, [r3, #16]
    3b98:	sub	r2, fp, #204	; 0xcc
    3b9c:	mov	r1, r3
    3ba0:	ldr	r0, [fp, #-808]	; 0xfffffcd8
    3ba4:	bl	314c <eval_float>
    3ba8:	mov	r3, r0
    3bac:	cmp	r3, #0
    3bb0:	beq	3bbc <eval_float+0xa70>
    3bb4:	mvn	r3, #0
    3bb8:	b	44f8 <eval_float+0x13ac>
    3bbc:	ldr	r3, [fp, #-28]	; 0xffffffe4
    3bc0:	ldr	r3, [r3, #20]
    3bc4:	sub	r2, fp, #212	; 0xd4
    3bc8:	mov	r1, r3
    3bcc:	ldr	r0, [fp, #-808]	; 0xfffffcd8
    3bd0:	bl	314c <eval_float>
    3bd4:	mov	r3, r0
    3bd8:	cmp	r3, #0
    3bdc:	beq	3be8 <eval_float+0xa9c>
    3be0:	mvn	r3, #0
    3be4:	b	44f8 <eval_float+0x13ac>
    3be8:	vldr	d6, [fp, #-204]	; 0xffffff34
    3bec:	vldr	d7, [fp, #-212]	; 0xffffff2c
    3bf0:	vcmpe.f64	d6, d7
    3bf4:	vmrs	APSR_nzcv, fpscr
    3bf8:	bpl	3c04 <eval_float+0xab8>
    3bfc:	ldrd	r2, [fp, #-204]	; 0xffffff34
    3c00:	b	3c08 <eval_float+0xabc>
    3c04:	ldrd	r2, [fp, #-212]	; 0xffffff2c
    3c08:	ldr	r1, [fp, #-816]	; 0xfffffcd0
    3c0c:	strd	r2, [r1]
    3c10:	b	44f4 <eval_float+0x13a8>
    3c14:	ldr	r3, [fp, #-28]	; 0xffffffe4
    3c18:	ldr	r1, [r3, #16]
    3c1c:	sub	r0, fp, #224	; 0xe0
    3c20:	sub	r2, fp, #216	; 0xd8
    3c24:	sub	r3, fp, #232	; 0xe8
    3c28:	str	r3, [sp]
    3c2c:	mov	r3, r0
    3c30:	ldr	r0, [fp, #-808]	; 0xfffffcd8
    3c34:	bl	684c <eval_string>
    3c38:	mov	r3, r0
    3c3c:	cmp	r3, #0
    3c40:	beq	3c4c <eval_float+0xb00>
    3c44:	mvn	r3, #0
    3c48:	b	44f8 <eval_float+0x13ac>
    3c4c:	ldr	r3, [fp, #-224]	; 0xffffff20
    3c50:	cmp	r3, #0
    3c54:	bge	3c70 <eval_float+0xb24>
    3c58:	movw	r1, #0
    3c5c:	movt	r1, #0
    3c60:	mvn	r0, #400	; 0x190
    3c64:	bl	0 <coda_set_error>
    3c68:	mvn	r3, #0
    3c6c:	b	44f8 <eval_float+0x13ac>
    3c70:	ldr	r3, [fp, #-224]	; 0xffffff20
    3c74:	cmp	r3, #0
    3c78:	bne	3c94 <eval_float+0xb48>
    3c7c:	movw	r1, #0
    3c80:	movt	r1, #0
    3c84:	mvn	r0, #400	; 0x190
    3c88:	bl	0 <coda_set_error>
    3c8c:	mvn	r3, #0
    3c90:	b	44f8 <eval_float+0x13ac>
    3c94:	ldr	r3, [fp, #-232]	; 0xffffff18
    3c98:	ldr	r1, [fp, #-216]	; 0xffffff28
    3c9c:	ldr	r2, [fp, #-224]	; 0xffffff20
    3ca0:	add	r2, r1, r2
    3ca4:	add	r3, r3, r2
    3ca8:	mov	r2, #0
    3cac:	strb	r2, [r3]
    3cb0:	ldr	r3, [fp, #-28]	; 0xffffffe4
    3cb4:	ldr	r1, [r3, #20]
    3cb8:	sub	r0, fp, #228	; 0xe4
    3cbc:	sub	r2, fp, #220	; 0xdc
    3cc0:	sub	r3, fp, #236	; 0xec
    3cc4:	str	r3, [sp]
    3cc8:	mov	r3, r0
    3ccc:	ldr	r0, [fp, #-808]	; 0xfffffcd8
    3cd0:	bl	684c <eval_string>
    3cd4:	mov	r3, r0
    3cd8:	cmp	r3, #0
    3cdc:	beq	3cf4 <eval_float+0xba8>
    3ce0:	ldr	r3, [fp, #-232]	; 0xffffff18
    3ce4:	mov	r0, r3
    3ce8:	bl	0 <free>
    3cec:	mvn	r3, #0
    3cf0:	b	44f8 <eval_float+0x13ac>
    3cf4:	ldr	r3, [fp, #-228]	; 0xffffff1c
    3cf8:	cmp	r3, #0
    3cfc:	bge	3d18 <eval_float+0xbcc>
    3d00:	movw	r1, #0
    3d04:	movt	r1, #0
    3d08:	mvn	r0, #400	; 0x190
    3d0c:	bl	0 <coda_set_error>
    3d10:	mvn	r3, #0
    3d14:	b	44f8 <eval_float+0x13ac>
    3d18:	ldr	r3, [fp, #-228]	; 0xffffff1c
    3d1c:	cmp	r3, #0
    3d20:	bne	3d3c <eval_float+0xbf0>
    3d24:	movw	r1, #0
    3d28:	movt	r1, #0
    3d2c:	mvn	r0, #400	; 0x190
    3d30:	bl	0 <coda_set_error>
    3d34:	mvn	r3, #0
    3d38:	b	44f8 <eval_float+0x13ac>
    3d3c:	ldr	r3, [fp, #-236]	; 0xffffff14
    3d40:	ldr	r1, [fp, #-220]	; 0xffffff24
    3d44:	ldr	r2, [fp, #-228]	; 0xffffff1c
    3d48:	add	r2, r1, r2
    3d4c:	add	r3, r3, r2
    3d50:	mov	r2, #0
    3d54:	strb	r2, [r3]
    3d58:	ldr	r3, [fp, #-236]	; 0xffffff14
    3d5c:	ldr	r2, [fp, #-220]	; 0xffffff24
    3d60:	add	r0, r3, r2
    3d64:	ldr	r3, [fp, #-232]	; 0xffffff18
    3d68:	ldr	r2, [fp, #-216]	; 0xffffff28
    3d6c:	add	r3, r3, r2
    3d70:	ldr	r2, [fp, #-816]	; 0xfffffcd0
    3d74:	mov	r1, r3
    3d78:	bl	0 <coda_time_string_to_double>
    3d7c:	mov	r3, r0
    3d80:	cmp	r3, #0
    3d84:	beq	3da8 <eval_float+0xc5c>
    3d88:	ldr	r3, [fp, #-236]	; 0xffffff14
    3d8c:	mov	r0, r3
    3d90:	bl	0 <free>
    3d94:	ldr	r3, [fp, #-232]	; 0xffffff18
    3d98:	mov	r0, r3
    3d9c:	bl	0 <free>
    3da0:	mvn	r3, #0
    3da4:	b	44f8 <eval_float+0x13ac>
    3da8:	ldr	r3, [fp, #-236]	; 0xffffff14
    3dac:	mov	r0, r3
    3db0:	bl	0 <free>
    3db4:	ldr	r3, [fp, #-232]	; 0xffffff18
    3db8:	mov	r0, r3
    3dbc:	bl	0 <free>
    3dc0:	b	44f4 <eval_float+0x13a8>
    3dc4:	ldr	r3, [fp, #-28]	; 0xffffffe4
    3dc8:	ldr	r3, [r3, #16]
    3dcc:	sub	r2, fp, #240	; 0xf0
    3dd0:	mov	r1, r3
    3dd4:	ldr	r0, [fp, #-808]	; 0xfffffcd8
    3dd8:	bl	1314 <eval_boolean>
    3ddc:	mov	r3, r0
    3de0:	cmp	r3, #0
    3de4:	beq	3df0 <eval_float+0xca4>
    3de8:	mvn	r3, #0
    3dec:	b	44f8 <eval_float+0x13ac>
    3df0:	ldr	r3, [fp, #-240]	; 0xffffff10
    3df4:	cmp	r3, #0
    3df8:	beq	3e28 <eval_float+0xcdc>
    3dfc:	ldr	r3, [fp, #-28]	; 0xffffffe4
    3e00:	ldr	r3, [r3, #20]
    3e04:	ldr	r2, [fp, #-816]	; 0xfffffcd0
    3e08:	mov	r1, r3
    3e0c:	ldr	r0, [fp, #-808]	; 0xfffffcd8
    3e10:	bl	314c <eval_float>
    3e14:	mov	r3, r0
    3e18:	cmp	r3, #0
    3e1c:	beq	44f0 <eval_float+0x13a4>
    3e20:	mvn	r3, #0
    3e24:	b	44f8 <eval_float+0x13ac>
    3e28:	ldr	r3, [fp, #-28]	; 0xffffffe4
    3e2c:	ldr	r3, [r3, #24]
    3e30:	ldr	r2, [fp, #-816]	; 0xfffffcd0
    3e34:	mov	r1, r3
    3e38:	ldr	r0, [fp, #-808]	; 0xfffffcd8
    3e3c:	bl	314c <eval_float>
    3e40:	mov	r3, r0
    3e44:	cmp	r3, #0
    3e48:	beq	44f0 <eval_float+0x13a4>
    3e4c:	mvn	r3, #0
    3e50:	b	44f8 <eval_float+0x13ac>
    3e54:	ldr	r3, [fp, #-808]	; 0xfffffcd8
    3e58:	ldr	r3, [r3]
    3e5c:	cmp	r3, #0
    3e60:	bne	3e84 <eval_float+0xd38>
    3e64:	movw	r3, #0
    3e68:	movt	r3, #0
    3e6c:	movw	r2, #1738	; 0x6ca
    3e70:	movw	r1, #0
    3e74:	movt	r1, #0
    3e78:	movw	r0, #0
    3e7c:	movt	r0, #0
    3e80:	bl	0 <__assert_fail>
    3e84:	ldr	r3, [fp, #-808]	; 0xfffffcd8
    3e88:	sub	r0, fp, #804	; 0x324
    3e8c:	add	r3, r3, #8
    3e90:	mov	r2, #520	; 0x208
    3e94:	mov	r1, r3
    3e98:	bl	0 <memcpy>
    3e9c:	ldr	r3, [fp, #-28]	; 0xffffffe4
    3ea0:	ldr	r3, [r3, #16]
    3ea4:	mov	r1, r3
    3ea8:	ldr	r0, [fp, #-808]	; 0xfffffcd8
    3eac:	bl	9334 <eval_cursor>
    3eb0:	mov	r3, r0
    3eb4:	cmp	r3, #0
    3eb8:	beq	3ec4 <eval_float+0xd78>
    3ebc:	mvn	r3, #0
    3ec0:	b	44f8 <eval_float+0x13ac>
    3ec4:	ldr	r3, [fp, #-808]	; 0xfffffcd8
    3ec8:	add	r3, r3, #8
    3ecc:	sub	r2, fp, #244	; 0xf4
    3ed0:	mov	r1, r2
    3ed4:	mov	r0, r3
    3ed8:	bl	0 <coda_cursor_get_num_elements>
    3edc:	mov	r3, r0
    3ee0:	cmp	r3, #0
    3ee4:	beq	3ef0 <eval_float+0xda4>
    3ee8:	mvn	r3, #0
    3eec:	b	44f8 <eval_float+0x13ac>
    3ef0:	ldr	r1, [fp, #-816]	; 0xfffffcd0
    3ef4:	mov	r2, #0
    3ef8:	mov	r3, #0
    3efc:	strd	r2, [r1]
    3f00:	ldr	r3, [fp, #-244]	; 0xffffff0c
    3f04:	cmp	r3, #0
    3f08:	ble	3fd4 <eval_float+0xe88>
    3f0c:	ldr	r3, [fp, #-808]	; 0xfffffcd8
    3f10:	add	r3, r3, #8
    3f14:	mov	r0, r3
    3f18:	bl	0 <coda_cursor_goto_first_array_element>
    3f1c:	mov	r3, r0
    3f20:	cmp	r3, #0
    3f24:	beq	3f30 <eval_float+0xde4>
    3f28:	mvn	r3, #0
    3f2c:	b	44f8 <eval_float+0x13ac>
    3f30:	mov	r3, #0
    3f34:	str	r3, [fp, #-16]
    3f38:	b	3fc4 <eval_float+0xe78>
    3f3c:	ldr	r3, [fp, #-28]	; 0xffffffe4
    3f40:	ldr	r3, [r3, #20]
    3f44:	sub	r2, fp, #252	; 0xfc
    3f48:	mov	r1, r3
    3f4c:	ldr	r0, [fp, #-808]	; 0xfffffcd8
    3f50:	bl	314c <eval_float>
    3f54:	mov	r3, r0
    3f58:	cmp	r3, #0
    3f5c:	beq	3f68 <eval_float+0xe1c>
    3f60:	mvn	r3, #0
    3f64:	b	44f8 <eval_float+0x13ac>
    3f68:	ldr	r3, [fp, #-816]	; 0xfffffcd0
    3f6c:	vldr	d6, [r3]
    3f70:	vldr	d7, [fp, #-252]	; 0xffffff04
    3f74:	vadd.f64	d7, d6, d7
    3f78:	ldr	r3, [fp, #-816]	; 0xfffffcd0
    3f7c:	vstr	d7, [r3]
    3f80:	ldr	r3, [fp, #-244]	; 0xffffff0c
    3f84:	sub	r3, r3, #1
    3f88:	ldr	r2, [fp, #-16]
    3f8c:	cmp	r2, r3
    3f90:	bge	3fb8 <eval_float+0xe6c>
    3f94:	ldr	r3, [fp, #-808]	; 0xfffffcd8
    3f98:	add	r3, r3, #8
    3f9c:	mov	r0, r3
    3fa0:	bl	0 <coda_cursor_goto_next_array_element>
    3fa4:	mov	r3, r0
    3fa8:	cmp	r3, #0
    3fac:	beq	3fb8 <eval_float+0xe6c>
    3fb0:	mvn	r3, #0
    3fb4:	b	44f8 <eval_float+0x13ac>
    3fb8:	ldr	r3, [fp, #-16]
    3fbc:	add	r3, r3, #1
    3fc0:	str	r3, [fp, #-16]
    3fc4:	ldr	r3, [fp, #-244]	; 0xffffff0c
    3fc8:	ldr	r2, [fp, #-16]
    3fcc:	cmp	r2, r3
    3fd0:	blt	3f3c <eval_float+0xdf0>
    3fd4:	ldr	r3, [fp, #-808]	; 0xfffffcd8
    3fd8:	add	r3, r3, #8
    3fdc:	sub	r1, fp, #804	; 0x324
    3fe0:	mov	r2, #520	; 0x208
    3fe4:	mov	r0, r3
    3fe8:	bl	0 <memcpy>
    3fec:	b	44f4 <eval_float+0x13a8>
    3ff0:	ldr	r3, [fp, #-808]	; 0xfffffcd8
    3ff4:	ldr	r3, [r3]
    3ff8:	cmp	r3, #0
    3ffc:	bne	4020 <eval_float+0xed4>
    4000:	movw	r3, #0
    4004:	movt	r3, #0
    4008:	movw	r2, #1783	; 0x6f7
    400c:	movw	r1, #0
    4010:	movt	r1, #0
    4014:	movw	r0, #0
    4018:	movt	r0, #0
    401c:	bl	0 <__assert_fail>
    4020:	ldr	r3, [fp, #-808]	; 0xfffffcd8
    4024:	sub	r0, fp, #804	; 0x324
    4028:	add	r3, r3, #8
    402c:	mov	r2, #520	; 0x208
    4030:	mov	r1, r3
    4034:	bl	0 <memcpy>
    4038:	ldr	r3, [fp, #-28]	; 0xffffffe4
    403c:	ldr	r3, [r3, #16]
    4040:	mov	r1, r3
    4044:	ldr	r0, [fp, #-808]	; 0xfffffcd8
    4048:	bl	9334 <eval_cursor>
    404c:	mov	r3, r0
    4050:	cmp	r3, #0
    4054:	beq	4060 <eval_float+0xf14>
    4058:	mvn	r3, #0
    405c:	b	44f8 <eval_float+0x13ac>
    4060:	ldr	r3, [fp, #-808]	; 0xfffffcd8
    4064:	add	r3, r3, #8
    4068:	sub	r2, fp, #256	; 0x100
    406c:	mov	r1, r2
    4070:	mov	r0, r3
    4074:	bl	0 <coda_cursor_get_num_elements>
    4078:	mov	r3, r0
    407c:	cmp	r3, #0
    4080:	beq	408c <eval_float+0xf40>
    4084:	mvn	r3, #0
    4088:	b	44f8 <eval_float+0x13ac>
    408c:	bl	0 <coda_NaN>
    4090:	vmov.f64	d7, d0
    4094:	ldr	r3, [fp, #-816]	; 0xfffffcd0
    4098:	vstr	d7, [r3]
    409c:	ldr	r3, [fp, #-256]	; 0xffffff00
    40a0:	cmp	r3, #0
    40a4:	ble	418c <eval_float+0x1040>
    40a8:	ldr	r3, [fp, #-808]	; 0xfffffcd8
    40ac:	add	r3, r3, #8
    40b0:	mov	r0, r3
    40b4:	bl	0 <coda_cursor_goto_first_array_element>
    40b8:	mov	r3, r0
    40bc:	cmp	r3, #0
    40c0:	beq	40cc <eval_float+0xf80>
    40c4:	mvn	r3, #0
    40c8:	b	44f8 <eval_float+0x13ac>
    40cc:	mov	r3, #0
    40d0:	str	r3, [fp, #-20]	; 0xffffffec
    40d4:	b	417c <eval_float+0x1030>
    40d8:	ldr	r3, [fp, #-28]	; 0xffffffe4
    40dc:	ldr	r3, [r3, #20]
    40e0:	sub	r2, fp, #268	; 0x10c
    40e4:	mov	r1, r3
    40e8:	ldr	r0, [fp, #-808]	; 0xfffffcd8
    40ec:	bl	314c <eval_float>
    40f0:	mov	r3, r0
    40f4:	cmp	r3, #0
    40f8:	beq	4104 <eval_float+0xfb8>
    40fc:	mvn	r3, #0
    4100:	b	44f8 <eval_float+0x13ac>
    4104:	ldr	r3, [fp, #-20]	; 0xffffffec
    4108:	cmp	r3, #0
    410c:	beq	4128 <eval_float+0xfdc>
    4110:	ldr	r3, [fp, #-816]	; 0xfffffcd0
    4114:	vldr	d6, [r3]
    4118:	vldr	d7, [fp, #-268]	; 0xfffffef4
    411c:	vcmpe.f64	d6, d7
    4120:	vmrs	APSR_nzcv, fpscr
    4124:	bpl	4138 <eval_float+0xfec>
    4128:	sub	r3, fp, #268	; 0x10c
    412c:	ldrd	r2, [r3]
    4130:	ldr	r1, [fp, #-816]	; 0xfffffcd0
    4134:	strd	r2, [r1]
    4138:	ldr	r3, [fp, #-256]	; 0xffffff00
    413c:	sub	r3, r3, #1
    4140:	ldr	r2, [fp, #-20]	; 0xffffffec
    4144:	cmp	r2, r3
    4148:	bge	4170 <eval_float+0x1024>
    414c:	ldr	r3, [fp, #-808]	; 0xfffffcd8
    4150:	add	r3, r3, #8
    4154:	mov	r0, r3
    4158:	bl	0 <coda_cursor_goto_next_array_element>
    415c:	mov	r3, r0
    4160:	cmp	r3, #0
    4164:	beq	4170 <eval_float+0x1024>
    4168:	mvn	r3, #0
    416c:	b	44f8 <eval_float+0x13ac>
    4170:	ldr	r3, [fp, #-20]	; 0xffffffec
    4174:	add	r3, r3, #1
    4178:	str	r3, [fp, #-20]	; 0xffffffec
    417c:	ldr	r3, [fp, #-256]	; 0xffffff00
    4180:	ldr	r2, [fp, #-20]	; 0xffffffec
    4184:	cmp	r2, r3
    4188:	blt	40d8 <eval_float+0xf8c>
    418c:	ldr	r3, [fp, #-808]	; 0xfffffcd8
    4190:	add	r3, r3, #8
    4194:	sub	r1, fp, #804	; 0x324
    4198:	mov	r2, #520	; 0x208
    419c:	mov	r0, r3
    41a0:	bl	0 <memcpy>
    41a4:	b	44f4 <eval_float+0x13a8>
    41a8:	ldr	r3, [fp, #-808]	; 0xfffffcd8
    41ac:	ldr	r3, [r3]
    41b0:	cmp	r3, #0
    41b4:	bne	41d8 <eval_float+0x108c>
    41b8:	movw	r3, #0
    41bc:	movt	r3, #0
    41c0:	movw	r2, #1831	; 0x727
    41c4:	movw	r1, #0
    41c8:	movt	r1, #0
    41cc:	movw	r0, #0
    41d0:	movt	r0, #0
    41d4:	bl	0 <__assert_fail>
    41d8:	ldr	r3, [fp, #-808]	; 0xfffffcd8
    41dc:	sub	r0, fp, #804	; 0x324
    41e0:	add	r3, r3, #8
    41e4:	mov	r2, #520	; 0x208
    41e8:	mov	r1, r3
    41ec:	bl	0 <memcpy>
    41f0:	ldr	r3, [fp, #-28]	; 0xffffffe4
    41f4:	ldr	r3, [r3, #16]
    41f8:	mov	r1, r3
    41fc:	ldr	r0, [fp, #-808]	; 0xfffffcd8
    4200:	bl	9334 <eval_cursor>
    4204:	mov	r3, r0
    4208:	cmp	r3, #0
    420c:	beq	4218 <eval_float+0x10cc>
    4210:	mvn	r3, #0
    4214:	b	44f8 <eval_float+0x13ac>
    4218:	ldr	r3, [fp, #-808]	; 0xfffffcd8
    421c:	add	r3, r3, #8
    4220:	sub	r2, fp, #272	; 0x110
    4224:	mov	r1, r2
    4228:	mov	r0, r3
    422c:	bl	0 <coda_cursor_get_num_elements>
    4230:	mov	r3, r0
    4234:	cmp	r3, #0
    4238:	beq	4244 <eval_float+0x10f8>
    423c:	mvn	r3, #0
    4240:	b	44f8 <eval_float+0x13ac>
    4244:	bl	0 <coda_NaN>
    4248:	vmov.f64	d7, d0
    424c:	ldr	r3, [fp, #-816]	; 0xfffffcd0
    4250:	vstr	d7, [r3]
    4254:	ldr	r3, [fp, #-272]	; 0xfffffef0
    4258:	cmp	r3, #0
    425c:	ble	4344 <eval_float+0x11f8>
    4260:	ldr	r3, [fp, #-808]	; 0xfffffcd8
    4264:	add	r3, r3, #8
    4268:	mov	r0, r3
    426c:	bl	0 <coda_cursor_goto_first_array_element>
    4270:	mov	r3, r0
    4274:	cmp	r3, #0
    4278:	beq	4284 <eval_float+0x1138>
    427c:	mvn	r3, #0
    4280:	b	44f8 <eval_float+0x13ac>
    4284:	mov	r3, #0
    4288:	str	r3, [fp, #-24]	; 0xffffffe8
    428c:	b	4334 <eval_float+0x11e8>
    4290:	ldr	r3, [fp, #-28]	; 0xffffffe4
    4294:	ldr	r3, [r3, #20]
    4298:	sub	r2, fp, #284	; 0x11c
    429c:	mov	r1, r3
    42a0:	ldr	r0, [fp, #-808]	; 0xfffffcd8
    42a4:	bl	314c <eval_float>
    42a8:	mov	r3, r0
    42ac:	cmp	r3, #0
    42b0:	beq	42bc <eval_float+0x1170>
    42b4:	mvn	r3, #0
    42b8:	b	44f8 <eval_float+0x13ac>
    42bc:	ldr	r3, [fp, #-24]	; 0xffffffe8
    42c0:	cmp	r3, #0
    42c4:	beq	42e0 <eval_float+0x1194>
    42c8:	ldr	r3, [fp, #-816]	; 0xfffffcd0
    42cc:	vldr	d6, [r3]
    42d0:	vldr	d7, [fp, #-284]	; 0xfffffee4
    42d4:	vcmpe.f64	d6, d7
    42d8:	vmrs	APSR_nzcv, fpscr
    42dc:	ble	42f0 <eval_float+0x11a4>
    42e0:	sub	r3, fp, #284	; 0x11c
    42e4:	ldrd	r2, [r3]
    42e8:	ldr	r1, [fp, #-816]	; 0xfffffcd0
    42ec:	strd	r2, [r1]
    42f0:	ldr	r3, [fp, #-272]	; 0xfffffef0
    42f4:	sub	r3, r3, #1
    42f8:	ldr	r2, [fp, #-24]	; 0xffffffe8
    42fc:	cmp	r2, r3
    4300:	bge	4328 <eval_float+0x11dc>
    4304:	ldr	r3, [fp, #-808]	; 0xfffffcd8
    4308:	add	r3, r3, #8
    430c:	mov	r0, r3
    4310:	bl	0 <coda_cursor_goto_next_array_element>
    4314:	mov	r3, r0
    4318:	cmp	r3, #0
    431c:	beq	4328 <eval_float+0x11dc>
    4320:	mvn	r3, #0
    4324:	b	44f8 <eval_float+0x13ac>
    4328:	ldr	r3, [fp, #-24]	; 0xffffffe8
    432c:	add	r3, r3, #1
    4330:	str	r3, [fp, #-24]	; 0xffffffe8
    4334:	ldr	r3, [fp, #-272]	; 0xfffffef0
    4338:	ldr	r2, [fp, #-24]	; 0xffffffe8
    433c:	cmp	r2, r3
    4340:	blt	4290 <eval_float+0x1144>
    4344:	ldr	r3, [fp, #-808]	; 0xfffffcd8
    4348:	add	r3, r3, #8
    434c:	sub	r1, fp, #804	; 0x324
    4350:	mov	r2, #520	; 0x208
    4354:	mov	r0, r3
    4358:	bl	0 <memcpy>
    435c:	b	44f4 <eval_float+0x13a8>
    4360:	ldr	r3, [fp, #-808]	; 0xfffffcd8
    4364:	ldr	r3, [r3]
    4368:	cmp	r3, #0
    436c:	bne	4390 <eval_float+0x1244>
    4370:	movw	r3, #0
    4374:	movt	r3, #0
    4378:	movw	r2, #1878	; 0x756
    437c:	movw	r1, #0
    4380:	movt	r1, #0
    4384:	movw	r0, #0
    4388:	movt	r0, #0
    438c:	bl	0 <__assert_fail>
    4390:	ldr	r3, [fp, #-808]	; 0xfffffcd8
    4394:	sub	r0, fp, #804	; 0x324
    4398:	add	r3, r3, #8
    439c:	mov	r2, #520	; 0x208
    43a0:	mov	r1, r3
    43a4:	bl	0 <memcpy>
    43a8:	ldr	r3, [fp, #-28]	; 0xffffffe4
    43ac:	ldr	r3, [r3, #16]
    43b0:	mov	r1, r3
    43b4:	ldr	r0, [fp, #-808]	; 0xfffffcd8
    43b8:	bl	9334 <eval_cursor>
    43bc:	mov	r3, r0
    43c0:	cmp	r3, #0
    43c4:	beq	43d0 <eval_float+0x1284>
    43c8:	mvn	r3, #0
    43cc:	b	44f8 <eval_float+0x13ac>
    43d0:	ldr	r3, [fp, #-28]	; 0xffffffe4
    43d4:	ldr	r3, [r3, #20]
    43d8:	ldr	r2, [fp, #-816]	; 0xfffffcd0
    43dc:	mov	r1, r3
    43e0:	ldr	r0, [fp, #-808]	; 0xfffffcd8
    43e4:	bl	314c <eval_float>
    43e8:	mov	r3, r0
    43ec:	cmp	r3, #0
    43f0:	beq	43fc <eval_float+0x12b0>
    43f4:	mvn	r3, #0
    43f8:	b	44f8 <eval_float+0x13ac>
    43fc:	ldr	r3, [fp, #-808]	; 0xfffffcd8
    4400:	add	r3, r3, #8
    4404:	sub	r1, fp, #804	; 0x324
    4408:	mov	r2, #520	; 0x208
    440c:	mov	r0, r3
    4410:	bl	0 <memcpy>
    4414:	b	44f4 <eval_float+0x13a8>
    4418:	ldr	r3, [fp, #-28]	; 0xffffffe4
    441c:	ldr	r3, [r3, #12]
    4420:	ldrb	r3, [r3]
    4424:	sub	r3, r3, #105	; 0x69
    4428:	str	r3, [fp, #-36]	; 0xffffffdc
    442c:	ldr	r2, [fp, #-808]	; 0xfffffcd8
    4430:	ldr	r3, [fp, #-36]	; 0xffffffdc
    4434:	add	r3, r3, #66	; 0x42
    4438:	lsl	r3, r3, #3
    443c:	add	r3, r2, r3
    4440:	ldrd	r2, [r3]
    4444:	strd	r2, [fp, #-44]	; 0xffffffd4
    4448:	ldr	r3, [fp, #-28]	; 0xffffffe4
    444c:	ldr	r1, [r3, #16]
    4450:	ldr	r3, [fp, #-36]	; 0xffffffdc
    4454:	add	r3, r3, #66	; 0x42
    4458:	lsl	r3, r3, #3
    445c:	ldr	r2, [fp, #-808]	; 0xfffffcd8
    4460:	add	r3, r2, r3
    4464:	mov	r2, r3
    4468:	ldr	r0, [fp, #-808]	; 0xfffffcd8
    446c:	bl	4510 <eval_integer>
    4470:	mov	r3, r0
    4474:	cmp	r3, #0
    4478:	beq	4484 <eval_float+0x1338>
    447c:	mvn	r3, #0
    4480:	b	44f8 <eval_float+0x13ac>
    4484:	ldr	r3, [fp, #-28]	; 0xffffffe4
    4488:	ldr	r3, [r3, #20]
    448c:	ldr	r2, [fp, #-816]	; 0xfffffcd0
    4490:	mov	r1, r3
    4494:	ldr	r0, [fp, #-808]	; 0xfffffcd8
    4498:	bl	314c <eval_float>
    449c:	mov	r3, r0
    44a0:	cmp	r3, #0
    44a4:	beq	44b0 <eval_float+0x1364>
    44a8:	mvn	r3, #0
    44ac:	b	44f8 <eval_float+0x13ac>
    44b0:	ldr	r2, [fp, #-808]	; 0xfffffcd8
    44b4:	ldr	r3, [fp, #-36]	; 0xffffffdc
    44b8:	add	r3, r3, #66	; 0x42
    44bc:	lsl	r3, r3, #3
    44c0:	add	r1, r2, r3
    44c4:	ldrd	r2, [fp, #-44]	; 0xffffffd4
    44c8:	strd	r2, [r1]
    44cc:	b	44f4 <eval_float+0x13a8>
    44d0:	movw	r3, #0
    44d4:	movt	r3, #0
    44d8:	movw	r2, #1909	; 0x775
    44dc:	movw	r1, #0
    44e0:	movt	r1, #0
    44e4:	movw	r0, #0
    44e8:	movt	r0, #0
    44ec:	bl	0 <__assert_fail>
    44f0:	nop	{0}
    44f4:	mov	r3, #0
    44f8:	mov	r0, r3
    44fc:	sub	sp, fp, #12
    4500:	vpop	{d8}
    4504:	ldr	fp, [sp]
    4508:	add	sp, sp, #4
    450c:	pop	{pc}		; (ldr pc, [sp], #4)

00004510 <eval_integer>:
    4510:	strd	r4, [sp, #-32]!	; 0xffffffe0
    4514:	strd	r6, [sp, #8]
    4518:	strd	r8, [sp, #16]
    451c:	str	fp, [sp, #24]
    4520:	str	lr, [sp, #28]
    4524:	add	fp, sp, #28
    4528:	sub	sp, sp, #984	; 0x3d8
    452c:	str	r0, [fp, #-952]	; 0xfffffc48
    4530:	str	r1, [fp, #-956]	; 0xfffffc44
    4534:	str	r2, [fp, #-960]	; 0xfffffc40
    4538:	ldr	r3, [fp, #-956]	; 0xfffffc44
    453c:	ldr	r3, [r3]
    4540:	cmp	r3, #20
    4544:	bne	4560 <eval_integer+0x50>
    4548:	ldr	r3, [fp, #-956]	; 0xfffffc44
    454c:	ldrd	r2, [r3, #16]
    4550:	ldr	r1, [fp, #-960]	; 0xfffffc40
    4554:	strd	r2, [r1]
    4558:	mov	r3, #0
    455c:	b	6810 <eval_integer+0x2300>
    4560:	ldr	r3, [fp, #-956]	; 0xfffffc44
    4564:	str	r3, [fp, #-56]	; 0xffffffc8
    4568:	ldr	r3, [fp, #-56]	; 0xffffffc8
    456c:	ldr	r3, [r3]
    4570:	cmp	r3, #86	; 0x56
    4574:	ldrls	pc, [pc, r3, lsl #2]
    4578:	b	67e0 <eval_integer+0x22d0>
    457c:	.word	0x0000498c
    4580:	.word	0x000049ec
    4584:	.word	0x00004ca8
    4588:	.word	0x000050fc
    458c:	.word	0x000067e0
    4590:	.word	0x00004f44
    4594:	.word	0x000067e0
    4598:	.word	0x00005618
    459c:	.word	0x000052a0
    45a0:	.word	0x0000545c
    45a4:	.word	0x000067e0
    45a8:	.word	0x00006670
    45ac:	.word	0x00006068
    45b0:	.word	0x00005ec0
    45b4:	.word	0x0000611c
    45b8:	.word	0x00005f94
    45bc:	.word	0x000067e0
    45c0:	.word	0x000067e0
    45c4:	.word	0x000067e0
    45c8:	.word	0x000067e0
    45cc:	.word	0x000067e0
    45d0:	.word	0x000067e0
    45d4:	.word	0x000067e0
    45d8:	.word	0x00005b70
    45dc:	.word	0x00004b78
    45e0:	.word	0x000067e0
    45e4:	.word	0x000067e0
    45e8:	.word	0x000061d0
    45ec:	.word	0x000067e0
    45f0:	.word	0x000067e0
    45f4:	.word	0x000067e0
    45f8:	.word	0x000067e0
    45fc:	.word	0x000067e0
    4600:	.word	0x000067e0
    4604:	.word	0x000067e0
    4608:	.word	0x000067e0
    460c:	.word	0x000067e0
    4610:	.word	0x000067e0
    4614:	.word	0x000067e0
    4618:	.word	0x000067e0
    461c:	.word	0x000067e0
    4620:	.word	0x000067e0
    4624:	.word	0x00004eb4
    4628:	.word	0x000062a4
    462c:	.word	0x00006370
    4630:	.word	0x000046d8
    4634:	.word	0x000067e0
    4638:	.word	0x000067e0
    463c:	.word	0x000067e0
    4640:	.word	0x000067e0
    4644:	.word	0x00005a28
    4648:	.word	0x000067e0
    464c:	.word	0x000067e0
    4650:	.word	0x000067e0
    4654:	.word	0x000067e0
    4658:	.word	0x000067e0
    465c:	.word	0x00004db0
    4660:	.word	0x00004e30
    4664:	.word	0x00004c14
    4668:	.word	0x00004af4
    466c:	.word	0x00004944
    4670:	.word	0x000067e0
    4674:	.word	0x000067e0
    4678:	.word	0x00005d00
    467c:	.word	0x00005df4
    4680:	.word	0x00004d2c
    4684:	.word	0x000067e0
    4688:	.word	0x000067e0
    468c:	.word	0x000067e0
    4690:	.word	0x000067e0
    4694:	.word	0x0000622c
    4698:	.word	0x000067e0
    469c:	.word	0x000067e0
    46a0:	.word	0x000067e0
    46a4:	.word	0x000067e0
    46a8:	.word	0x000067e0
    46ac:	.word	0x000067e0
    46b0:	.word	0x000067e0
    46b4:	.word	0x00004a70
    46b8:	.word	0x000067e0
    46bc:	.word	0x000067e0
    46c0:	.word	0x000057f4
    46c4:	.word	0x000067e0
    46c8:	.word	0x000063a0
    46cc:	.word	0x000067e0
    46d0:	.word	0x000064fc
    46d4:	.word	0x00006728
    46d8:	ldr	r3, [fp, #-56]	; 0xffffffc8
    46dc:	ldr	r3, [r3, #16]
    46e0:	ldr	r3, [r3, #4]
    46e4:	cmp	r3, #4
    46e8:	bne	4844 <eval_integer+0x334>
    46ec:	ldr	r3, [fp, #-952]	; 0xfffffc48
    46f0:	ldr	r3, [r3]
    46f4:	cmp	r3, #0
    46f8:	bne	471c <eval_integer+0x20c>
    46fc:	movw	r3, #0
    4700:	movt	r3, #0
    4704:	mov	r2, #1936	; 0x790
    4708:	movw	r1, #0
    470c:	movt	r1, #0
    4710:	movw	r0, #0
    4714:	movt	r0, #0
    4718:	bl	0 <__assert_fail>
    471c:	ldr	r3, [fp, #-952]	; 0xfffffc48
    4720:	sub	r0, fp, #916	; 0x394
    4724:	add	r3, r3, #8
    4728:	mov	r2, #520	; 0x208
    472c:	mov	r1, r3
    4730:	bl	0 <memcpy>
    4734:	ldr	r3, [fp, #-56]	; 0xffffffc8
    4738:	ldr	r3, [r3, #16]
    473c:	mov	r1, r3
    4740:	ldr	r0, [fp, #-952]	; 0xfffffc48
    4744:	bl	9334 <eval_cursor>
    4748:	mov	r3, r0
    474c:	cmp	r3, #0
    4750:	beq	475c <eval_integer+0x24c>
    4754:	mvn	r3, #0
    4758:	b	6810 <eval_integer+0x2300>
    475c:	bl	0 <coda_get_option_perform_conversions>
    4760:	str	r0, [fp, #-60]	; 0xffffffc4
    4764:	mov	r0, #0
    4768:	bl	0 <coda_set_option_perform_conversions>
    476c:	ldr	r3, [fp, #-952]	; 0xfffffc48
    4770:	add	r3, r3, #8
    4774:	sub	r2, fp, #88	; 0x58
    4778:	mov	r1, r2
    477c:	mov	r0, r3
    4780:	bl	0 <coda_cursor_get_read_type>
    4784:	mov	r3, r0
    4788:	cmp	r3, #0
    478c:	beq	47a0 <eval_integer+0x290>
    4790:	ldr	r0, [fp, #-60]	; 0xffffffc4
    4794:	bl	0 <coda_set_option_perform_conversions>
    4798:	mvn	r3, #0
    479c:	b	6810 <eval_integer+0x2300>
    47a0:	ldr	r3, [fp, #-88]	; 0xffffffa8
    47a4:	cmp	r3, #7
    47a8:	bne	47f0 <eval_integer+0x2e0>
    47ac:	ldr	r3, [fp, #-952]	; 0xfffffc48
    47b0:	add	r3, r3, #8
    47b4:	sub	r2, fp, #100	; 0x64
    47b8:	mov	r1, r2
    47bc:	mov	r0, r3
    47c0:	bl	0 <coda_cursor_read_uint64>
    47c4:	mov	r3, r0
    47c8:	cmp	r3, #0
    47cc:	beq	47e0 <eval_integer+0x2d0>
    47d0:	ldr	r0, [fp, #-60]	; 0xffffffc4
    47d4:	bl	0 <coda_set_option_perform_conversions>
    47d8:	mvn	r3, #0
    47dc:	b	6810 <eval_integer+0x2300>
    47e0:	ldrd	r2, [fp, #-100]	; 0xffffff9c
    47e4:	ldr	r1, [fp, #-960]	; 0xfffffc40
    47e8:	strd	r2, [r1]
    47ec:	b	4820 <eval_integer+0x310>
    47f0:	ldr	r3, [fp, #-952]	; 0xfffffc48
    47f4:	add	r3, r3, #8
    47f8:	ldr	r1, [fp, #-960]	; 0xfffffc40
    47fc:	mov	r0, r3
    4800:	bl	0 <coda_cursor_read_int64>
    4804:	mov	r3, r0
    4808:	cmp	r3, #0
    480c:	beq	4820 <eval_integer+0x310>
    4810:	ldr	r0, [fp, #-60]	; 0xffffffc4
    4814:	bl	0 <coda_set_option_perform_conversions>
    4818:	mvn	r3, #0
    481c:	b	6810 <eval_integer+0x2300>
    4820:	ldr	r0, [fp, #-60]	; 0xffffffc4
    4824:	bl	0 <coda_set_option_perform_conversions>
    4828:	ldr	r3, [fp, #-952]	; 0xfffffc48
    482c:	add	r3, r3, #8
    4830:	sub	r1, fp, #916	; 0x394
    4834:	mov	r2, #520	; 0x208
    4838:	mov	r0, r3
    483c:	bl	0 <memcpy>
    4840:	b	680c <eval_integer+0x22fc>
    4844:	ldr	r3, [fp, #-56]	; 0xffffffc8
    4848:	ldr	r3, [r3, #16]
    484c:	ldr	r3, [r3, #4]
    4850:	cmp	r3, #0
    4854:	bne	489c <eval_integer+0x38c>
    4858:	ldr	r3, [fp, #-56]	; 0xffffffc8
    485c:	ldr	r3, [r3, #16]
    4860:	sub	r2, fp, #104	; 0x68
    4864:	mov	r1, r3
    4868:	ldr	r0, [fp, #-952]	; 0xfffffc48
    486c:	bl	1314 <eval_boolean>
    4870:	mov	r3, r0
    4874:	cmp	r3, #0
    4878:	beq	4884 <eval_integer+0x374>
    487c:	mvn	r3, #0
    4880:	b	6810 <eval_integer+0x2300>
    4884:	ldr	r3, [fp, #-104]	; 0xffffff98
    4888:	mov	r2, r3
    488c:	asr	r3, r2, #31
    4890:	ldr	r1, [fp, #-960]	; 0xfffffc40
    4894:	strd	r2, [r1]
    4898:	b	680c <eval_integer+0x22fc>
    489c:	ldr	r3, [fp, #-56]	; 0xffffffc8
    48a0:	ldr	r1, [r3, #16]
    48a4:	sub	r0, fp, #112	; 0x70
    48a8:	sub	r2, fp, #108	; 0x6c
    48ac:	sub	r3, fp, #116	; 0x74
    48b0:	str	r3, [sp]
    48b4:	mov	r3, r0
    48b8:	ldr	r0, [fp, #-952]	; 0xfffffc48
    48bc:	bl	684c <eval_string>
    48c0:	mov	r3, r0
    48c4:	cmp	r3, #0
    48c8:	beq	48d4 <eval_integer+0x3c4>
    48cc:	mvn	r3, #0
    48d0:	b	6810 <eval_integer+0x2300>
    48d4:	ldr	r3, [fp, #-112]	; 0xffffff90
    48d8:	cmp	r3, #0
    48dc:	bne	48f8 <eval_integer+0x3e8>
    48e0:	movw	r1, #0
    48e4:	movt	r1, #0
    48e8:	mvn	r0, #102	; 0x66
    48ec:	bl	0 <coda_set_error>
    48f0:	mvn	r3, #0
    48f4:	b	6810 <eval_integer+0x2300>
    48f8:	ldr	r3, [fp, #-116]	; 0xffffff8c
    48fc:	ldr	r2, [fp, #-108]	; 0xffffff94
    4900:	add	r0, r3, r2
    4904:	ldr	r1, [fp, #-112]	; 0xffffff90
    4908:	mov	r3, #0
    490c:	ldr	r2, [fp, #-960]	; 0xfffffc40
    4910:	bl	0 <coda_ascii_parse_int64>
    4914:	mov	r3, r0
    4918:	cmp	r3, #0
    491c:	bge	4934 <eval_integer+0x424>
    4920:	ldr	r3, [fp, #-116]	; 0xffffff8c
    4924:	mov	r0, r3
    4928:	bl	0 <free>
    492c:	mvn	r3, #0
    4930:	b	6810 <eval_integer+0x2300>
    4934:	ldr	r3, [fp, #-116]	; 0xffffff8c
    4938:	mov	r0, r3
    493c:	bl	0 <free>
    4940:	b	680c <eval_integer+0x22fc>
    4944:	ldr	r3, [fp, #-56]	; 0xffffffc8
    4948:	ldr	r3, [r3, #16]
    494c:	ldr	r2, [fp, #-960]	; 0xfffffc40
    4950:	mov	r1, r3
    4954:	ldr	r0, [fp, #-952]	; 0xfffffc48
    4958:	bl	4510 <eval_integer>
    495c:	mov	r3, r0
    4960:	cmp	r3, #0
    4964:	beq	4970 <eval_integer+0x460>
    4968:	mvn	r3, #0
    496c:	b	6810 <eval_integer+0x2300>
    4970:	ldr	r3, [fp, #-960]	; 0xfffffc40
    4974:	ldrd	r2, [r3]
    4978:	rsbs	r2, r2, #0
    497c:	rsc	r3, r3, #0
    4980:	ldr	r1, [fp, #-960]	; 0xfffffc40
    4984:	strd	r2, [r1]
    4988:	b	680c <eval_integer+0x22fc>
    498c:	ldr	r3, [fp, #-56]	; 0xffffffc8
    4990:	ldr	r3, [r3, #16]
    4994:	ldr	r2, [fp, #-960]	; 0xfffffc40
    4998:	mov	r1, r3
    499c:	ldr	r0, [fp, #-952]	; 0xfffffc48
    49a0:	bl	4510 <eval_integer>
    49a4:	mov	r3, r0
    49a8:	cmp	r3, #0
    49ac:	beq	49b8 <eval_integer+0x4a8>
    49b0:	mvn	r3, #0
    49b4:	b	6810 <eval_integer+0x2300>
    49b8:	ldr	r3, [fp, #-960]	; 0xfffffc40
    49bc:	ldrd	r0, [r3]
    49c0:	mov	r2, #0
    49c4:	mov	r3, #0
    49c8:	asr	r2, r1, #31
    49cc:	asr	r3, r1, #31
    49d0:	eor	r4, r2, r0
    49d4:	eor	r5, r3, r1
    49d8:	subs	r4, r4, r2
    49dc:	sbc	r5, r5, r3
    49e0:	ldr	r3, [fp, #-960]	; 0xfffffc40
    49e4:	strd	r4, [r3]
    49e8:	b	680c <eval_integer+0x22fc>
    49ec:	ldr	r3, [fp, #-56]	; 0xffffffc8
    49f0:	ldr	r3, [r3, #16]
    49f4:	sub	r2, fp, #124	; 0x7c
    49f8:	mov	r1, r3
    49fc:	ldr	r0, [fp, #-952]	; 0xfffffc48
    4a00:	bl	4510 <eval_integer>
    4a04:	mov	r3, r0
    4a08:	cmp	r3, #0
    4a0c:	beq	4a18 <eval_integer+0x508>
    4a10:	mvn	r3, #0
    4a14:	b	6810 <eval_integer+0x2300>
    4a18:	ldr	r3, [fp, #-56]	; 0xffffffc8
    4a1c:	ldr	r3, [r3, #20]
    4a20:	sub	r2, fp, #132	; 0x84
    4a24:	mov	r1, r3
    4a28:	ldr	r0, [fp, #-952]	; 0xfffffc48
    4a2c:	bl	4510 <eval_integer>
    4a30:	mov	r3, r0
    4a34:	cmp	r3, #0
    4a38:	beq	4a44 <eval_integer+0x534>
    4a3c:	mvn	r3, #0
    4a40:	b	6810 <eval_integer+0x2300>
    4a44:	ldrd	r0, [fp, #-124]	; 0xffffff84
    4a48:	ldrd	r2, [fp, #-132]	; 0xffffff7c
    4a4c:	adds	ip, r0, r2
    4a50:	str	ip, [fp, #-972]	; 0xfffffc34
    4a54:	adc	r3, r1, r3
    4a58:	str	r3, [fp, #-968]	; 0xfffffc38
    4a5c:	ldr	r3, [fp, #-960]	; 0xfffffc40
    4a60:	sub	r2, fp, #972	; 0x3cc
    4a64:	ldrd	r0, [r2]
    4a68:	strd	r0, [r3]
    4a6c:	b	680c <eval_integer+0x22fc>
    4a70:	ldr	r3, [fp, #-56]	; 0xffffffc8
    4a74:	ldr	r3, [r3, #16]
    4a78:	sub	r2, fp, #140	; 0x8c
    4a7c:	mov	r1, r3
    4a80:	ldr	r0, [fp, #-952]	; 0xfffffc48
    4a84:	bl	4510 <eval_integer>
    4a88:	mov	r3, r0
    4a8c:	cmp	r3, #0
    4a90:	beq	4a9c <eval_integer+0x58c>
    4a94:	mvn	r3, #0
    4a98:	b	6810 <eval_integer+0x2300>
    4a9c:	ldr	r3, [fp, #-56]	; 0xffffffc8
    4aa0:	ldr	r3, [r3, #20]
    4aa4:	sub	r2, fp, #148	; 0x94
    4aa8:	mov	r1, r3
    4aac:	ldr	r0, [fp, #-952]	; 0xfffffc48
    4ab0:	bl	4510 <eval_integer>
    4ab4:	mov	r3, r0
    4ab8:	cmp	r3, #0
    4abc:	beq	4ac8 <eval_integer+0x5b8>
    4ac0:	mvn	r3, #0
    4ac4:	b	6810 <eval_integer+0x2300>
    4ac8:	ldrd	r0, [fp, #-140]	; 0xffffff74
    4acc:	ldrd	r2, [fp, #-148]	; 0xffffff6c
    4ad0:	subs	ip, r0, r2
    4ad4:	str	ip, [fp, #-980]	; 0xfffffc2c
    4ad8:	sbc	r3, r1, r3
    4adc:	str	r3, [fp, #-976]	; 0xfffffc30
    4ae0:	ldr	r3, [fp, #-960]	; 0xfffffc40
    4ae4:	sub	r2, fp, #980	; 0x3d4
    4ae8:	ldrd	r0, [r2]
    4aec:	strd	r0, [r3]
    4af0:	b	680c <eval_integer+0x22fc>
    4af4:	ldr	r3, [fp, #-56]	; 0xffffffc8
    4af8:	ldr	r3, [r3, #16]
    4afc:	sub	r2, fp, #156	; 0x9c
    4b00:	mov	r1, r3
    4b04:	ldr	r0, [fp, #-952]	; 0xfffffc48
    4b08:	bl	4510 <eval_integer>
    4b0c:	mov	r3, r0
    4b10:	cmp	r3, #0
    4b14:	beq	4b20 <eval_integer+0x610>
    4b18:	mvn	r3, #0
    4b1c:	b	6810 <eval_integer+0x2300>
    4b20:	ldr	r3, [fp, #-56]	; 0xffffffc8
    4b24:	ldr	r3, [r3, #20]
    4b28:	sub	r2, fp, #164	; 0xa4
    4b2c:	mov	r1, r3
    4b30:	ldr	r0, [fp, #-952]	; 0xfffffc48
    4b34:	bl	4510 <eval_integer>
    4b38:	mov	r3, r0
    4b3c:	cmp	r3, #0
    4b40:	beq	4b4c <eval_integer+0x63c>
    4b44:	mvn	r3, #0
    4b48:	b	6810 <eval_integer+0x2300>
    4b4c:	ldrd	r0, [fp, #-156]	; 0xffffff64
    4b50:	ldrd	r2, [fp, #-164]	; 0xffffff5c
    4b54:	mul	lr, r2, r1
    4b58:	mul	ip, r0, r3
    4b5c:	add	ip, lr, ip
    4b60:	umull	r2, r3, r0, r2
    4b64:	add	r1, ip, r3
    4b68:	mov	r3, r1
    4b6c:	ldr	r1, [fp, #-960]	; 0xfffffc40
    4b70:	strd	r2, [r1]
    4b74:	b	680c <eval_integer+0x22fc>
    4b78:	ldr	r3, [fp, #-56]	; 0xffffffc8
    4b7c:	ldr	r3, [r3, #16]
    4b80:	sub	r2, fp, #172	; 0xac
    4b84:	mov	r1, r3
    4b88:	ldr	r0, [fp, #-952]	; 0xfffffc48
    4b8c:	bl	4510 <eval_integer>
    4b90:	mov	r3, r0
    4b94:	cmp	r3, #0
    4b98:	beq	4ba4 <eval_integer+0x694>
    4b9c:	mvn	r3, #0
    4ba0:	b	6810 <eval_integer+0x2300>
    4ba4:	ldr	r3, [fp, #-56]	; 0xffffffc8
    4ba8:	ldr	r3, [r3, #20]
    4bac:	sub	r2, fp, #180	; 0xb4
    4bb0:	mov	r1, r3
    4bb4:	ldr	r0, [fp, #-952]	; 0xfffffc48
    4bb8:	bl	4510 <eval_integer>
    4bbc:	mov	r3, r0
    4bc0:	cmp	r3, #0
    4bc4:	beq	4bd0 <eval_integer+0x6c0>
    4bc8:	mvn	r3, #0
    4bcc:	b	6810 <eval_integer+0x2300>
    4bd0:	ldrd	r2, [fp, #-180]	; 0xffffff4c
    4bd4:	orrs	r3, r2, r3
    4bd8:	bne	4bf4 <eval_integer+0x6e4>
    4bdc:	movw	r1, #0
    4be0:	movt	r1, #0
    4be4:	mvn	r0, #400	; 0x190
    4be8:	bl	0 <coda_set_error>
    4bec:	mvn	r3, #0
    4bf0:	b	6810 <eval_integer+0x2300>
    4bf4:	ldrd	r0, [fp, #-172]	; 0xffffff54
    4bf8:	ldrd	r2, [fp, #-180]	; 0xffffff4c
    4bfc:	bl	0 <__aeabi_ldivmod>
    4c00:	mov	r2, r0
    4c04:	mov	r3, r1
    4c08:	ldr	r1, [fp, #-960]	; 0xfffffc40
    4c0c:	strd	r2, [r1]
    4c10:	b	680c <eval_integer+0x22fc>
    4c14:	ldr	r3, [fp, #-56]	; 0xffffffc8
    4c18:	ldr	r3, [r3, #16]
    4c1c:	sub	r2, fp, #188	; 0xbc
    4c20:	mov	r1, r3
    4c24:	ldr	r0, [fp, #-952]	; 0xfffffc48
    4c28:	bl	4510 <eval_integer>
    4c2c:	mov	r3, r0
    4c30:	cmp	r3, #0
    4c34:	beq	4c40 <eval_integer+0x730>
    4c38:	mvn	r3, #0
    4c3c:	b	6810 <eval_integer+0x2300>
    4c40:	ldr	r3, [fp, #-56]	; 0xffffffc8
    4c44:	ldr	r3, [r3, #20]
    4c48:	sub	r2, fp, #196	; 0xc4
    4c4c:	mov	r1, r3
    4c50:	ldr	r0, [fp, #-952]	; 0xfffffc48
    4c54:	bl	4510 <eval_integer>
    4c58:	mov	r3, r0
    4c5c:	cmp	r3, #0
    4c60:	beq	4c6c <eval_integer+0x75c>
    4c64:	mvn	r3, #0
    4c68:	b	6810 <eval_integer+0x2300>
    4c6c:	ldrd	r2, [fp, #-196]	; 0xffffff3c
    4c70:	orrs	r3, r2, r3
    4c74:	bne	4c90 <eval_integer+0x780>
    4c78:	movw	r1, #0
    4c7c:	movt	r1, #0
    4c80:	mvn	r0, #400	; 0x190
    4c84:	bl	0 <coda_set_error>
    4c88:	mvn	r3, #0
    4c8c:	b	6810 <eval_integer+0x2300>
    4c90:	ldrd	r0, [fp, #-188]	; 0xffffff44
    4c94:	ldrd	r2, [fp, #-196]	; 0xffffff3c
    4c98:	bl	0 <__aeabi_ldivmod>
    4c9c:	ldr	r1, [fp, #-960]	; 0xfffffc40
    4ca0:	strd	r2, [r1]
    4ca4:	b	680c <eval_integer+0x22fc>
    4ca8:	ldr	r3, [fp, #-56]	; 0xffffffc8
    4cac:	ldr	r3, [r3, #16]
    4cb0:	sub	r2, fp, #204	; 0xcc
    4cb4:	mov	r1, r3
    4cb8:	ldr	r0, [fp, #-952]	; 0xfffffc48
    4cbc:	bl	4510 <eval_integer>
    4cc0:	mov	r3, r0
    4cc4:	cmp	r3, #0
    4cc8:	beq	4cd4 <eval_integer+0x7c4>
    4ccc:	mvn	r3, #0
    4cd0:	b	6810 <eval_integer+0x2300>
    4cd4:	ldr	r3, [fp, #-56]	; 0xffffffc8
    4cd8:	ldr	r3, [r3, #20]
    4cdc:	sub	r2, fp, #212	; 0xd4
    4ce0:	mov	r1, r3
    4ce4:	ldr	r0, [fp, #-952]	; 0xfffffc48
    4ce8:	bl	4510 <eval_integer>
    4cec:	mov	r3, r0
    4cf0:	cmp	r3, #0
    4cf4:	beq	4d00 <eval_integer+0x7f0>
    4cf8:	mvn	r3, #0
    4cfc:	b	6810 <eval_integer+0x2300>
    4d00:	ldrd	r0, [fp, #-204]	; 0xffffff34
    4d04:	ldrd	r2, [fp, #-212]	; 0xffffff2c
    4d08:	and	ip, r0, r2
    4d0c:	str	ip, [fp, #-988]	; 0xfffffc24
    4d10:	and	r3, r1, r3
    4d14:	str	r3, [fp, #-984]	; 0xfffffc28
    4d18:	ldr	r3, [fp, #-960]	; 0xfffffc40
    4d1c:	sub	r2, fp, #988	; 0x3dc
    4d20:	ldrd	r0, [r2]
    4d24:	strd	r0, [r3]
    4d28:	b	680c <eval_integer+0x22fc>
    4d2c:	ldr	r3, [fp, #-56]	; 0xffffffc8
    4d30:	ldr	r3, [r3, #16]
    4d34:	sub	r2, fp, #220	; 0xdc
    4d38:	mov	r1, r3
    4d3c:	ldr	r0, [fp, #-952]	; 0xfffffc48
    4d40:	bl	4510 <eval_integer>
    4d44:	mov	r3, r0
    4d48:	cmp	r3, #0
    4d4c:	beq	4d58 <eval_integer+0x848>
    4d50:	mvn	r3, #0
    4d54:	b	6810 <eval_integer+0x2300>
    4d58:	ldr	r3, [fp, #-56]	; 0xffffffc8
    4d5c:	ldr	r3, [r3, #20]
    4d60:	sub	r2, fp, #228	; 0xe4
    4d64:	mov	r1, r3
    4d68:	ldr	r0, [fp, #-952]	; 0xfffffc48
    4d6c:	bl	4510 <eval_integer>
    4d70:	mov	r3, r0
    4d74:	cmp	r3, #0
    4d78:	beq	4d84 <eval_integer+0x874>
    4d7c:	mvn	r3, #0
    4d80:	b	6810 <eval_integer+0x2300>
    4d84:	ldrd	r0, [fp, #-220]	; 0xffffff24
    4d88:	ldrd	r2, [fp, #-228]	; 0xffffff1c
    4d8c:	orr	ip, r0, r2
    4d90:	str	ip, [fp, #-996]	; 0xfffffc1c
    4d94:	orr	r3, r1, r3
    4d98:	str	r3, [fp, #-992]	; 0xfffffc20
    4d9c:	ldr	r3, [fp, #-960]	; 0xfffffc40
    4da0:	sub	r2, fp, #996	; 0x3e4
    4da4:	ldrd	r0, [r2]
    4da8:	strd	r0, [r3]
    4dac:	b	680c <eval_integer+0x22fc>
    4db0:	ldr	r3, [fp, #-56]	; 0xffffffc8
    4db4:	ldr	r3, [r3, #16]
    4db8:	sub	r2, fp, #236	; 0xec
    4dbc:	mov	r1, r3
    4dc0:	ldr	r0, [fp, #-952]	; 0xfffffc48
    4dc4:	bl	4510 <eval_integer>
    4dc8:	mov	r3, r0
    4dcc:	cmp	r3, #0
    4dd0:	beq	4ddc <eval_integer+0x8cc>
    4dd4:	mvn	r3, #0
    4dd8:	b	6810 <eval_integer+0x2300>
    4ddc:	ldr	r3, [fp, #-56]	; 0xffffffc8
    4de0:	ldr	r3, [r3, #20]
    4de4:	sub	r2, fp, #244	; 0xf4
    4de8:	mov	r1, r3
    4dec:	ldr	r0, [fp, #-952]	; 0xfffffc48
    4df0:	bl	4510 <eval_integer>
    4df4:	mov	r3, r0
    4df8:	cmp	r3, #0
    4dfc:	beq	4e08 <eval_integer+0x8f8>
    4e00:	mvn	r3, #0
    4e04:	b	6810 <eval_integer+0x2300>
    4e08:	ldrd	r2, [fp, #-244]	; 0xffffff0c
    4e0c:	ldrd	r0, [fp, #-236]	; 0xffffff14
    4e10:	cmp	r2, r0
    4e14:	sbcs	ip, r3, r1
    4e18:	bge	4e24 <eval_integer+0x914>
    4e1c:	mov	r2, r0
    4e20:	mov	r3, r1
    4e24:	ldr	r1, [fp, #-960]	; 0xfffffc40
    4e28:	strd	r2, [r1]
    4e2c:	b	680c <eval_integer+0x22fc>
    4e30:	ldr	r3, [fp, #-56]	; 0xffffffc8
    4e34:	ldr	r3, [r3, #16]
    4e38:	sub	r2, fp, #252	; 0xfc
    4e3c:	mov	r1, r3
    4e40:	ldr	r0, [fp, #-952]	; 0xfffffc48
    4e44:	bl	4510 <eval_integer>
    4e48:	mov	r3, r0
    4e4c:	cmp	r3, #0
    4e50:	beq	4e5c <eval_integer+0x94c>
    4e54:	mvn	r3, #0
    4e58:	b	6810 <eval_integer+0x2300>
    4e5c:	ldr	r3, [fp, #-56]	; 0xffffffc8
    4e60:	ldr	r3, [r3, #20]
    4e64:	sub	r2, fp, #260	; 0x104
    4e68:	mov	r1, r3
    4e6c:	ldr	r0, [fp, #-952]	; 0xfffffc48
    4e70:	bl	4510 <eval_integer>
    4e74:	mov	r3, r0
    4e78:	cmp	r3, #0
    4e7c:	beq	4e88 <eval_integer+0x978>
    4e80:	mvn	r3, #0
    4e84:	b	6810 <eval_integer+0x2300>
    4e88:	sub	r3, fp, #260	; 0x104
    4e8c:	ldrd	r2, [r3]
    4e90:	ldrd	r0, [fp, #-252]	; 0xffffff04
    4e94:	cmp	r0, r2
    4e98:	sbcs	ip, r1, r3
    4e9c:	bge	4ea8 <eval_integer+0x998>
    4ea0:	mov	r2, r0
    4ea4:	mov	r3, r1
    4ea8:	ldr	r1, [fp, #-960]	; 0xfffffc40
    4eac:	strd	r2, [r1]
    4eb0:	b	680c <eval_integer+0x22fc>
    4eb4:	ldr	r3, [fp, #-56]	; 0xffffffc8
    4eb8:	ldr	r3, [r3, #16]
    4ebc:	sub	r2, fp, #264	; 0x108
    4ec0:	mov	r1, r3
    4ec4:	ldr	r0, [fp, #-952]	; 0xfffffc48
    4ec8:	bl	1314 <eval_boolean>
    4ecc:	mov	r3, r0
    4ed0:	cmp	r3, #0
    4ed4:	beq	4ee0 <eval_integer+0x9d0>
    4ed8:	mvn	r3, #0
    4edc:	b	6810 <eval_integer+0x2300>
    4ee0:	ldr	r3, [fp, #-264]	; 0xfffffef8
    4ee4:	cmp	r3, #0
    4ee8:	beq	4f18 <eval_integer+0xa08>
    4eec:	ldr	r3, [fp, #-56]	; 0xffffffc8
    4ef0:	ldr	r3, [r3, #20]
    4ef4:	ldr	r2, [fp, #-960]	; 0xfffffc40
    4ef8:	mov	r1, r3
    4efc:	ldr	r0, [fp, #-952]	; 0xfffffc48
    4f00:	bl	4510 <eval_integer>
    4f04:	mov	r3, r0
    4f08:	cmp	r3, #0
    4f0c:	beq	6800 <eval_integer+0x22f0>
    4f10:	mvn	r3, #0
    4f14:	b	6810 <eval_integer+0x2300>
    4f18:	ldr	r3, [fp, #-56]	; 0xffffffc8
    4f1c:	ldr	r3, [r3, #24]
    4f20:	ldr	r2, [fp, #-960]	; 0xfffffc40
    4f24:	mov	r1, r3
    4f28:	ldr	r0, [fp, #-952]	; 0xfffffc48
    4f2c:	bl	4510 <eval_integer>
    4f30:	mov	r3, r0
    4f34:	cmp	r3, #0
    4f38:	beq	6800 <eval_integer+0x22f0>
    4f3c:	mvn	r3, #0
    4f40:	b	6810 <eval_integer+0x2300>
    4f44:	ldr	r3, [fp, #-952]	; 0xfffffc48
    4f48:	ldr	r3, [r3]
    4f4c:	cmp	r3, #0
    4f50:	bne	4f74 <eval_integer+0xa64>
    4f54:	movw	r3, #0
    4f58:	movt	r3, #0
    4f5c:	movw	r2, #2194	; 0x892
    4f60:	movw	r1, #0
    4f64:	movt	r1, #0
    4f68:	movw	r0, #0
    4f6c:	movt	r0, #0
    4f70:	bl	0 <__assert_fail>
    4f74:	ldr	r3, [fp, #-952]	; 0xfffffc48
    4f78:	sub	r0, fp, #916	; 0x394
    4f7c:	add	r3, r3, #8
    4f80:	mov	r2, #520	; 0x208
    4f84:	mov	r1, r3
    4f88:	bl	0 <memcpy>
    4f8c:	ldr	r3, [fp, #-56]	; 0xffffffc8
    4f90:	ldr	r3, [r3, #16]
    4f94:	mov	r1, r3
    4f98:	ldr	r0, [fp, #-952]	; 0xfffffc48
    4f9c:	bl	9334 <eval_cursor>
    4fa0:	mov	r3, r0
    4fa4:	cmp	r3, #0
    4fa8:	beq	4fb4 <eval_integer+0xaa4>
    4fac:	mvn	r3, #0
    4fb0:	b	6810 <eval_integer+0x2300>
    4fb4:	ldr	r3, [fp, #-952]	; 0xfffffc48
    4fb8:	add	r3, r3, #8
    4fbc:	sub	r2, fp, #268	; 0x10c
    4fc0:	mov	r1, r2
    4fc4:	mov	r0, r3
    4fc8:	bl	0 <coda_cursor_get_num_elements>
    4fcc:	mov	r3, r0
    4fd0:	cmp	r3, #0
    4fd4:	beq	4fe0 <eval_integer+0xad0>
    4fd8:	mvn	r3, #0
    4fdc:	b	6810 <eval_integer+0x2300>
    4fe0:	ldr	r1, [fp, #-960]	; 0xfffffc40
    4fe4:	mov	r2, #0
    4fe8:	mov	r3, #0
    4fec:	strd	r2, [r1]
    4ff0:	ldr	r3, [fp, #-268]	; 0xfffffef4
    4ff4:	cmp	r3, #0
    4ff8:	ble	50e0 <eval_integer+0xbd0>
    4ffc:	ldr	r3, [fp, #-952]	; 0xfffffc48
    5000:	add	r3, r3, #8
    5004:	mov	r0, r3
    5008:	bl	0 <coda_cursor_goto_first_array_element>
    500c:	mov	r3, r0
    5010:	cmp	r3, #0
    5014:	beq	5020 <eval_integer+0xb10>
    5018:	mvn	r3, #0
    501c:	b	6810 <eval_integer+0x2300>
    5020:	mov	r3, #0
    5024:	str	r3, [fp, #-32]	; 0xffffffe0
    5028:	b	50d0 <eval_integer+0xbc0>
    502c:	ldr	r3, [fp, #-56]	; 0xffffffc8
    5030:	ldr	r3, [r3, #20]
    5034:	sub	r2, fp, #272	; 0x110
    5038:	mov	r1, r3
    503c:	ldr	r0, [fp, #-952]	; 0xfffffc48
    5040:	bl	1314 <eval_boolean>
    5044:	mov	r3, r0
    5048:	cmp	r3, #0
    504c:	beq	5058 <eval_integer+0xb48>
    5050:	mvn	r3, #0
    5054:	b	6810 <eval_integer+0x2300>
    5058:	ldr	r3, [fp, #-272]	; 0xfffffef0
    505c:	cmp	r3, #0
    5060:	beq	508c <eval_integer+0xb7c>
    5064:	ldr	r3, [fp, #-960]	; 0xfffffc40
    5068:	ldrd	r2, [r3]
    506c:	adds	r1, r2, #1
    5070:	str	r1, [fp, #-1004]	; 0xfffffc14
    5074:	adc	r3, r3, #0
    5078:	str	r3, [fp, #-1000]	; 0xfffffc18
    507c:	ldr	r3, [fp, #-960]	; 0xfffffc40
    5080:	sub	r2, fp, #1004	; 0x3ec
    5084:	ldrd	r0, [r2]
    5088:	strd	r0, [r3]
    508c:	ldr	r3, [fp, #-268]	; 0xfffffef4
    5090:	sub	r3, r3, #1
    5094:	ldr	r2, [fp, #-32]	; 0xffffffe0
    5098:	cmp	r2, r3
    509c:	bge	50c4 <eval_integer+0xbb4>
    50a0:	ldr	r3, [fp, #-952]	; 0xfffffc48
    50a4:	add	r3, r3, #8
    50a8:	mov	r0, r3
    50ac:	bl	0 <coda_cursor_goto_next_array_element>
    50b0:	mov	r3, r0
    50b4:	cmp	r3, #0
    50b8:	beq	50c4 <eval_integer+0xbb4>
    50bc:	mvn	r3, #0
    50c0:	b	6810 <eval_integer+0x2300>
    50c4:	ldr	r3, [fp, #-32]	; 0xffffffe0
    50c8:	add	r3, r3, #1
    50cc:	str	r3, [fp, #-32]	; 0xffffffe0
    50d0:	ldr	r3, [fp, #-268]	; 0xfffffef4
    50d4:	ldr	r2, [fp, #-32]	; 0xffffffe0
    50d8:	cmp	r2, r3
    50dc:	blt	502c <eval_integer+0xb1c>
    50e0:	ldr	r3, [fp, #-952]	; 0xfffffc48
    50e4:	add	r3, r3, #8
    50e8:	sub	r1, fp, #916	; 0x394
    50ec:	mov	r2, #520	; 0x208
    50f0:	mov	r0, r3
    50f4:	bl	0 <memcpy>
    50f8:	b	680c <eval_integer+0x22fc>
    50fc:	ldr	r3, [fp, #-952]	; 0xfffffc48
    5100:	ldr	r3, [r3]
    5104:	cmp	r3, #0
    5108:	bne	512c <eval_integer+0xc1c>
    510c:	movw	r3, #0
    5110:	movt	r3, #0
    5114:	movw	r2, #2242	; 0x8c2
    5118:	movw	r1, #0
    511c:	movt	r1, #0
    5120:	movw	r0, #0
    5124:	movt	r0, #0
    5128:	bl	0 <__assert_fail>
    512c:	ldr	r3, [fp, #-952]	; 0xfffffc48
    5130:	sub	r0, fp, #916	; 0x394
    5134:	add	r3, r3, #8
    5138:	mov	r2, #520	; 0x208
    513c:	mov	r1, r3
    5140:	bl	0 <memcpy>
    5144:	ldr	r3, [fp, #-56]	; 0xffffffc8
    5148:	ldr	r3, [r3, #16]
    514c:	mov	r1, r3
    5150:	ldr	r0, [fp, #-952]	; 0xfffffc48
    5154:	bl	9334 <eval_cursor>
    5158:	mov	r3, r0
    515c:	cmp	r3, #0
    5160:	beq	516c <eval_integer+0xc5c>
    5164:	mvn	r3, #0
    5168:	b	6810 <eval_integer+0x2300>
    516c:	ldr	r3, [fp, #-952]	; 0xfffffc48
    5170:	add	r3, r3, #8
    5174:	sub	r2, fp, #276	; 0x114
    5178:	mov	r1, r2
    517c:	mov	r0, r3
    5180:	bl	0 <coda_cursor_get_num_elements>
    5184:	mov	r3, r0
    5188:	cmp	r3, #0
    518c:	beq	5198 <eval_integer+0xc88>
    5190:	mvn	r3, #0
    5194:	b	6810 <eval_integer+0x2300>
    5198:	ldr	r1, [fp, #-960]	; 0xfffffc40
    519c:	mov	r2, #0
    51a0:	mov	r3, #0
    51a4:	strd	r2, [r1]
    51a8:	ldr	r3, [fp, #-276]	; 0xfffffeec
    51ac:	cmp	r3, #0
    51b0:	ble	5284 <eval_integer+0xd74>
    51b4:	ldr	r3, [fp, #-952]	; 0xfffffc48
    51b8:	add	r3, r3, #8
    51bc:	mov	r0, r3
    51c0:	bl	0 <coda_cursor_goto_first_array_element>
    51c4:	mov	r3, r0
    51c8:	cmp	r3, #0
    51cc:	beq	51d8 <eval_integer+0xcc8>
    51d0:	mvn	r3, #0
    51d4:	b	6810 <eval_integer+0x2300>
    51d8:	mov	r3, #0
    51dc:	str	r3, [fp, #-36]	; 0xffffffdc
    51e0:	b	5274 <eval_integer+0xd64>
    51e4:	ldr	r3, [fp, #-56]	; 0xffffffc8
    51e8:	ldr	r3, [r3, #20]
    51ec:	sub	r2, fp, #284	; 0x11c
    51f0:	mov	r1, r3
    51f4:	ldr	r0, [fp, #-952]	; 0xfffffc48
    51f8:	bl	4510 <eval_integer>
    51fc:	mov	r3, r0
    5200:	cmp	r3, #0
    5204:	beq	5210 <eval_integer+0xd00>
    5208:	mvn	r3, #0
    520c:	b	6810 <eval_integer+0x2300>
    5210:	ldr	r3, [fp, #-960]	; 0xfffffc40
    5214:	ldrd	r0, [r3]
    5218:	sub	r3, fp, #284	; 0x11c
    521c:	ldrd	r2, [r3]
    5220:	adds	r8, r0, r2
    5224:	adc	r9, r1, r3
    5228:	ldr	r3, [fp, #-960]	; 0xfffffc40
    522c:	strd	r8, [r3]
    5230:	ldr	r3, [fp, #-276]	; 0xfffffeec
    5234:	sub	r3, r3, #1
    5238:	ldr	r2, [fp, #-36]	; 0xffffffdc
    523c:	cmp	r2, r3
    5240:	bge	5268 <eval_integer+0xd58>
    5244:	ldr	r3, [fp, #-952]	; 0xfffffc48
    5248:	add	r3, r3, #8
    524c:	mov	r0, r3
    5250:	bl	0 <coda_cursor_goto_next_array_element>
    5254:	mov	r3, r0
    5258:	cmp	r3, #0
    525c:	beq	5268 <eval_integer+0xd58>
    5260:	mvn	r3, #0
    5264:	b	6810 <eval_integer+0x2300>
    5268:	ldr	r3, [fp, #-36]	; 0xffffffdc
    526c:	add	r3, r3, #1
    5270:	str	r3, [fp, #-36]	; 0xffffffdc
    5274:	ldr	r3, [fp, #-276]	; 0xfffffeec
    5278:	ldr	r2, [fp, #-36]	; 0xffffffdc
    527c:	cmp	r2, r3
    5280:	blt	51e4 <eval_integer+0xcd4>
    5284:	ldr	r3, [fp, #-952]	; 0xfffffc48
    5288:	add	r3, r3, #8
    528c:	sub	r1, fp, #916	; 0x394
    5290:	mov	r2, #520	; 0x208
    5294:	mov	r0, r3
    5298:	bl	0 <memcpy>
    529c:	b	680c <eval_integer+0x22fc>
    52a0:	ldr	r3, [fp, #-952]	; 0xfffffc48
    52a4:	ldr	r3, [r3]
    52a8:	cmp	r3, #0
    52ac:	bne	52d0 <eval_integer+0xdc0>
    52b0:	movw	r3, #0
    52b4:	movt	r3, #0
    52b8:	movw	r2, #2287	; 0x8ef
    52bc:	movw	r1, #0
    52c0:	movt	r1, #0
    52c4:	movw	r0, #0
    52c8:	movt	r0, #0
    52cc:	bl	0 <__assert_fail>
    52d0:	ldr	r3, [fp, #-952]	; 0xfffffc48
    52d4:	sub	r0, fp, #916	; 0x394
    52d8:	add	r3, r3, #8
    52dc:	mov	r2, #520	; 0x208
    52e0:	mov	r1, r3
    52e4:	bl	0 <memcpy>
    52e8:	ldr	r3, [fp, #-56]	; 0xffffffc8
    52ec:	ldr	r3, [r3, #16]
    52f0:	mov	r1, r3
    52f4:	ldr	r0, [fp, #-952]	; 0xfffffc48
    52f8:	bl	9334 <eval_cursor>
    52fc:	mov	r3, r0
    5300:	cmp	r3, #0
    5304:	beq	5310 <eval_integer+0xe00>
    5308:	mvn	r3, #0
    530c:	b	6810 <eval_integer+0x2300>
    5310:	ldr	r3, [fp, #-952]	; 0xfffffc48
    5314:	add	r3, r3, #8
    5318:	sub	r2, fp, #288	; 0x120
    531c:	mov	r1, r2
    5320:	mov	r0, r3
    5324:	bl	0 <coda_cursor_get_num_elements>
    5328:	mov	r3, r0
    532c:	cmp	r3, #0
    5330:	beq	533c <eval_integer+0xe2c>
    5334:	mvn	r3, #0
    5338:	b	6810 <eval_integer+0x2300>
    533c:	ldr	r1, [fp, #-960]	; 0xfffffc40
    5340:	mov	r2, #0
    5344:	mov	r3, #0
    5348:	strd	r2, [r1]
    534c:	ldr	r3, [fp, #-288]	; 0xfffffee0
    5350:	cmp	r3, #0
    5354:	ble	5440 <eval_integer+0xf30>
    5358:	ldr	r3, [fp, #-952]	; 0xfffffc48
    535c:	add	r3, r3, #8
    5360:	mov	r0, r3
    5364:	bl	0 <coda_cursor_goto_first_array_element>
    5368:	mov	r3, r0
    536c:	cmp	r3, #0
    5370:	beq	537c <eval_integer+0xe6c>
    5374:	mvn	r3, #0
    5378:	b	6810 <eval_integer+0x2300>
    537c:	mov	r3, #0
    5380:	str	r3, [fp, #-40]	; 0xffffffd8
    5384:	b	5430 <eval_integer+0xf20>
    5388:	ldr	r3, [fp, #-56]	; 0xffffffc8
    538c:	ldr	r3, [r3, #20]
    5390:	sub	r2, fp, #300	; 0x12c
    5394:	mov	r1, r3
    5398:	ldr	r0, [fp, #-952]	; 0xfffffc48
    539c:	bl	4510 <eval_integer>
    53a0:	mov	r3, r0
    53a4:	cmp	r3, #0
    53a8:	beq	53b4 <eval_integer+0xea4>
    53ac:	mvn	r3, #0
    53b0:	b	6810 <eval_integer+0x2300>
    53b4:	ldr	r3, [fp, #-40]	; 0xffffffd8
    53b8:	cmp	r3, #0
    53bc:	beq	53dc <eval_integer+0xecc>
    53c0:	ldr	r3, [fp, #-960]	; 0xfffffc40
    53c4:	ldrd	r0, [r3]
    53c8:	sub	r3, fp, #300	; 0x12c
    53cc:	ldrd	r2, [r3]
    53d0:	cmp	r0, r2
    53d4:	sbcs	r3, r1, r3
    53d8:	bge	53ec <eval_integer+0xedc>
    53dc:	sub	r3, fp, #300	; 0x12c
    53e0:	ldrd	r2, [r3]
    53e4:	ldr	r1, [fp, #-960]	; 0xfffffc40
    53e8:	strd	r2, [r1]
    53ec:	ldr	r3, [fp, #-288]	; 0xfffffee0
    53f0:	sub	r3, r3, #1
    53f4:	ldr	r2, [fp, #-40]	; 0xffffffd8
    53f8:	cmp	r2, r3
    53fc:	bge	5424 <eval_integer+0xf14>
    5400:	ldr	r3, [fp, #-952]	; 0xfffffc48
    5404:	add	r3, r3, #8
    5408:	mov	r0, r3
    540c:	bl	0 <coda_cursor_goto_next_array_element>
    5410:	mov	r3, r0
    5414:	cmp	r3, #0
    5418:	beq	5424 <eval_integer+0xf14>
    541c:	mvn	r3, #0
    5420:	b	6810 <eval_integer+0x2300>
    5424:	ldr	r3, [fp, #-40]	; 0xffffffd8
    5428:	add	r3, r3, #1
    542c:	str	r3, [fp, #-40]	; 0xffffffd8
    5430:	ldr	r3, [fp, #-288]	; 0xfffffee0
    5434:	ldr	r2, [fp, #-40]	; 0xffffffd8
    5438:	cmp	r2, r3
    543c:	blt	5388 <eval_integer+0xe78>
    5440:	ldr	r3, [fp, #-952]	; 0xfffffc48
    5444:	add	r3, r3, #8
    5448:	sub	r1, fp, #916	; 0x394
    544c:	mov	r2, #520	; 0x208
    5450:	mov	r0, r3
    5454:	bl	0 <memcpy>
    5458:	b	680c <eval_integer+0x22fc>
    545c:	ldr	r3, [fp, #-952]	; 0xfffffc48
    5460:	ldr	r3, [r3]
    5464:	cmp	r3, #0
    5468:	bne	548c <eval_integer+0xf7c>
    546c:	movw	r3, #0
    5470:	movt	r3, #0
    5474:	movw	r2, #2335	; 0x91f
    5478:	movw	r1, #0
    547c:	movt	r1, #0
    5480:	movw	r0, #0
    5484:	movt	r0, #0
    5488:	bl	0 <__assert_fail>
    548c:	ldr	r3, [fp, #-952]	; 0xfffffc48
    5490:	sub	r0, fp, #916	; 0x394
    5494:	add	r3, r3, #8
    5498:	mov	r2, #520	; 0x208
    549c:	mov	r1, r3
    54a0:	bl	0 <memcpy>
    54a4:	ldr	r3, [fp, #-56]	; 0xffffffc8
    54a8:	ldr	r3, [r3, #16]
    54ac:	mov	r1, r3
    54b0:	ldr	r0, [fp, #-952]	; 0xfffffc48
    54b4:	bl	9334 <eval_cursor>
    54b8:	mov	r3, r0
    54bc:	cmp	r3, #0
    54c0:	beq	54cc <eval_integer+0xfbc>
    54c4:	mvn	r3, #0
    54c8:	b	6810 <eval_integer+0x2300>
    54cc:	ldr	r3, [fp, #-952]	; 0xfffffc48
    54d0:	add	r3, r3, #8
    54d4:	sub	r2, fp, #304	; 0x130
    54d8:	mov	r1, r2
    54dc:	mov	r0, r3
    54e0:	bl	0 <coda_cursor_get_num_elements>
    54e4:	mov	r3, r0
    54e8:	cmp	r3, #0
    54ec:	beq	54f8 <eval_integer+0xfe8>
    54f0:	mvn	r3, #0
    54f4:	b	6810 <eval_integer+0x2300>
    54f8:	ldr	r1, [fp, #-960]	; 0xfffffc40
    54fc:	mov	r2, #0
    5500:	mov	r3, #0
    5504:	strd	r2, [r1]
    5508:	ldr	r3, [fp, #-304]	; 0xfffffed0
    550c:	cmp	r3, #0
    5510:	ble	55fc <eval_integer+0x10ec>
    5514:	ldr	r3, [fp, #-952]	; 0xfffffc48
    5518:	add	r3, r3, #8
    551c:	mov	r0, r3
    5520:	bl	0 <coda_cursor_goto_first_array_element>
    5524:	mov	r3, r0
    5528:	cmp	r3, #0
    552c:	beq	5538 <eval_integer+0x1028>
    5530:	mvn	r3, #0
    5534:	b	6810 <eval_integer+0x2300>
    5538:	mov	r3, #0
    553c:	str	r3, [fp, #-44]	; 0xffffffd4
    5540:	b	55ec <eval_integer+0x10dc>
    5544:	ldr	r3, [fp, #-56]	; 0xffffffc8
    5548:	ldr	r3, [r3, #20]
    554c:	sub	r2, fp, #316	; 0x13c
    5550:	mov	r1, r3
    5554:	ldr	r0, [fp, #-952]	; 0xfffffc48
    5558:	bl	4510 <eval_integer>
    555c:	mov	r3, r0
    5560:	cmp	r3, #0
    5564:	beq	5570 <eval_integer+0x1060>
    5568:	mvn	r3, #0
    556c:	b	6810 <eval_integer+0x2300>
    5570:	ldr	r3, [fp, #-44]	; 0xffffffd4
    5574:	cmp	r3, #0
    5578:	beq	5598 <eval_integer+0x1088>
    557c:	ldr	r3, [fp, #-960]	; 0xfffffc40
    5580:	ldrd	r2, [r3]
    5584:	sub	r1, fp, #316	; 0x13c
    5588:	ldrd	r0, [r1]
    558c:	cmp	r0, r2
    5590:	sbcs	r3, r1, r3
    5594:	bge	55a8 <eval_integer+0x1098>
    5598:	sub	r3, fp, #316	; 0x13c
    559c:	ldrd	r2, [r3]
    55a0:	ldr	r1, [fp, #-960]	; 0xfffffc40
    55a4:	strd	r2, [r1]
    55a8:	ldr	r3, [fp, #-304]	; 0xfffffed0
    55ac:	sub	r3, r3, #1
    55b0:	ldr	r2, [fp, #-44]	; 0xffffffd4
    55b4:	cmp	r2, r3
    55b8:	bge	55e0 <eval_integer+0x10d0>
    55bc:	ldr	r3, [fp, #-952]	; 0xfffffc48
    55c0:	add	r3, r3, #8
    55c4:	mov	r0, r3
    55c8:	bl	0 <coda_cursor_goto_next_array_element>
    55cc:	mov	r3, r0
    55d0:	cmp	r3, #0
    55d4:	beq	55e0 <eval_integer+0x10d0>
    55d8:	mvn	r3, #0
    55dc:	b	6810 <eval_integer+0x2300>
    55e0:	ldr	r3, [fp, #-44]	; 0xffffffd4
    55e4:	add	r3, r3, #1
    55e8:	str	r3, [fp, #-44]	; 0xffffffd4
    55ec:	ldr	r3, [fp, #-304]	; 0xfffffed0
    55f0:	ldr	r2, [fp, #-44]	; 0xffffffd4
    55f4:	cmp	r2, r3
    55f8:	blt	5544 <eval_integer+0x1034>
    55fc:	ldr	r3, [fp, #-952]	; 0xfffffc48
    5600:	add	r3, r3, #8
    5604:	sub	r1, fp, #916	; 0x394
    5608:	mov	r2, #520	; 0x208
    560c:	mov	r0, r3
    5610:	bl	0 <memcpy>
    5614:	b	680c <eval_integer+0x22fc>
    5618:	ldr	r3, [fp, #-952]	; 0xfffffc48
    561c:	ldr	r3, [r3]
    5620:	cmp	r3, #0
    5624:	bne	5648 <eval_integer+0x1138>
    5628:	movw	r3, #0
    562c:	movt	r3, #0
    5630:	movw	r2, #2383	; 0x94f
    5634:	movw	r1, #0
    5638:	movt	r1, #0
    563c:	movw	r0, #0
    5640:	movt	r0, #0
    5644:	bl	0 <__assert_fail>
    5648:	ldr	r3, [fp, #-952]	; 0xfffffc48
    564c:	sub	r0, fp, #916	; 0x394
    5650:	add	r3, r3, #8
    5654:	mov	r2, #520	; 0x208
    5658:	mov	r1, r3
    565c:	bl	0 <memcpy>
    5660:	ldr	r3, [fp, #-56]	; 0xffffffc8
    5664:	ldr	r3, [r3, #16]
    5668:	mov	r1, r3
    566c:	ldr	r0, [fp, #-952]	; 0xfffffc48
    5670:	bl	9334 <eval_cursor>
    5674:	mov	r3, r0
    5678:	cmp	r3, #0
    567c:	beq	5688 <eval_integer+0x1178>
    5680:	mvn	r3, #0
    5684:	b	6810 <eval_integer+0x2300>
    5688:	ldr	r3, [fp, #-952]	; 0xfffffc48
    568c:	add	r3, r3, #8
    5690:	sub	r2, fp, #320	; 0x140
    5694:	mov	r1, r2
    5698:	mov	r0, r3
    569c:	bl	0 <coda_cursor_get_num_elements>
    56a0:	mov	r3, r0
    56a4:	cmp	r3, #0
    56a8:	beq	56b4 <eval_integer+0x11a4>
    56ac:	mvn	r3, #0
    56b0:	b	6810 <eval_integer+0x2300>
    56b4:	ldr	r1, [fp, #-960]	; 0xfffffc40
    56b8:	mov	r2, #0
    56bc:	mov	r3, #0
    56c0:	strd	r2, [r1]
    56c4:	ldr	r3, [fp, #-320]	; 0xfffffec0
    56c8:	cmp	r3, #0
    56cc:	ble	57c8 <eval_integer+0x12b8>
    56d0:	ldr	r3, [fp, #-952]	; 0xfffffc48
    56d4:	add	r3, r3, #8
    56d8:	mov	r0, r3
    56dc:	bl	0 <coda_cursor_goto_first_array_element>
    56e0:	mov	r3, r0
    56e4:	cmp	r3, #0
    56e8:	beq	56f4 <eval_integer+0x11e4>
    56ec:	mvn	r3, #0
    56f0:	b	6810 <eval_integer+0x2300>
    56f4:	mov	r3, #0
    56f8:	str	r3, [fp, #-48]	; 0xffffffd0
    56fc:	b	57b8 <eval_integer+0x12a8>
    5700:	ldr	r3, [fp, #-56]	; 0xffffffc8
    5704:	ldr	r3, [r3, #20]
    5708:	sub	r2, fp, #324	; 0x144
    570c:	mov	r1, r3
    5710:	ldr	r0, [fp, #-952]	; 0xfffffc48
    5714:	bl	1314 <eval_boolean>
    5718:	mov	r3, r0
    571c:	cmp	r3, #0
    5720:	beq	572c <eval_integer+0x121c>
    5724:	mvn	r3, #0
    5728:	b	6810 <eval_integer+0x2300>
    572c:	ldr	r3, [fp, #-324]	; 0xfffffebc
    5730:	cmp	r3, #0
    5734:	beq	576c <eval_integer+0x125c>
    5738:	ldr	r3, [fp, #-48]	; 0xffffffd0
    573c:	mov	r2, r3
    5740:	asr	r3, r2, #31
    5744:	ldr	r1, [fp, #-960]	; 0xfffffc40
    5748:	strd	r2, [r1]
    574c:	ldr	r3, [fp, #-952]	; 0xfffffc48
    5750:	add	r3, r3, #8
    5754:	sub	r1, fp, #916	; 0x394
    5758:	mov	r2, #520	; 0x208
    575c:	mov	r0, r3
    5760:	bl	0 <memcpy>
    5764:	mov	r3, #0
    5768:	b	57b4 <eval_integer+0x12a4>
    576c:	ldr	r3, [fp, #-320]	; 0xfffffec0
    5770:	sub	r3, r3, #1
    5774:	ldr	r2, [fp, #-48]	; 0xffffffd0
    5778:	cmp	r2, r3
    577c:	bge	57a4 <eval_integer+0x1294>
    5780:	ldr	r3, [fp, #-952]	; 0xfffffc48
    5784:	add	r3, r3, #8
    5788:	mov	r0, r3
    578c:	bl	0 <coda_cursor_goto_next_array_element>
    5790:	mov	r3, r0
    5794:	cmp	r3, #0
    5798:	beq	57a4 <eval_integer+0x1294>
    579c:	mvn	r3, #0
    57a0:	b	57b4 <eval_integer+0x12a4>
    57a4:	ldr	r3, [fp, #-48]	; 0xffffffd0
    57a8:	add	r3, r3, #1
    57ac:	str	r3, [fp, #-48]	; 0xffffffd0
    57b0:	b	57b8 <eval_integer+0x12a8>
    57b4:	b	6810 <eval_integer+0x2300>
    57b8:	ldr	r3, [fp, #-320]	; 0xfffffec0
    57bc:	ldr	r2, [fp, #-48]	; 0xffffffd0
    57c0:	cmp	r2, r3
    57c4:	blt	5700 <eval_integer+0x11f0>
    57c8:	ldr	r1, [fp, #-960]	; 0xfffffc40
    57cc:	mvn	r2, #0
    57d0:	mvn	r3, #0
    57d4:	strd	r2, [r1]
    57d8:	ldr	r3, [fp, #-952]	; 0xfffffc48
    57dc:	add	r3, r3, #8
    57e0:	sub	r1, fp, #916	; 0x394
    57e4:	mov	r2, #520	; 0x208
    57e8:	mov	r0, r3
    57ec:	bl	0 <memcpy>
    57f0:	b	680c <eval_integer+0x22fc>
    57f4:	mov	r3, #0
    57f8:	str	r3, [fp, #-328]	; 0xfffffeb8
    57fc:	ldr	r3, [fp, #-952]	; 0xfffffc48
    5800:	ldr	r3, [r3]
    5804:	cmp	r3, #0
    5808:	bne	582c <eval_integer+0x131c>
    580c:	movw	r3, #0
    5810:	movt	r3, #0
    5814:	movw	r2, #2435	; 0x983
    5818:	movw	r1, #0
    581c:	movt	r1, #0
    5820:	movw	r0, #0
    5824:	movt	r0, #0
    5828:	bl	0 <__assert_fail>
    582c:	ldr	r3, [fp, #-952]	; 0xfffffc48
    5830:	sub	r0, fp, #916	; 0x394
    5834:	add	r3, r3, #8
    5838:	mov	r2, #520	; 0x208
    583c:	mov	r1, r3
    5840:	bl	0 <memcpy>
    5844:	ldr	r3, [fp, #-56]	; 0xffffffc8
    5848:	ldr	r3, [r3, #16]
    584c:	mov	r1, r3
    5850:	ldr	r0, [fp, #-952]	; 0xfffffc48
    5854:	bl	9334 <eval_cursor>
    5858:	mov	r3, r0
    585c:	cmp	r3, #0
    5860:	beq	586c <eval_integer+0x135c>
    5864:	mvn	r3, #0
    5868:	b	6810 <eval_integer+0x2300>
    586c:	ldr	r3, [pc, #4028]	; 6830 <eval_integer+0x2320>
    5870:	ldr	r3, [pc, r3]
    5874:	mrc	15, 0, r2, cr13, cr0, {3}
    5878:	ldr	r3, [r2, r3]
    587c:	str	r3, [fp, #-64]	; 0xffffffc0
    5880:	ldr	r3, [pc, #4012]	; 6834 <eval_integer+0x2324>
    5884:	ldr	r3, [pc, r3]
    5888:	mrc	15, 0, r2, cr13, cr0, {3}
    588c:	mov	r1, #0
    5890:	str	r1, [r2, r3]
    5894:	ldr	r3, [fp, #-952]	; 0xfffffc48
    5898:	add	r3, r3, #8
    589c:	mov	r0, r3
    58a0:	bl	0 <coda_cursor_goto_first_array_element>
    58a4:	mov	r3, r0
    58a8:	cmp	r3, #0
    58ac:	beq	58cc <eval_integer+0x13bc>
    58b0:	ldr	r3, [pc, #3968]	; 6838 <eval_integer+0x2328>
    58b4:	ldr	r3, [pc, r3]
    58b8:	mrc	15, 0, r2, cr13, cr0, {3}
    58bc:	ldr	r1, [fp, #-64]	; 0xffffffc0
    58c0:	str	r1, [r2, r3]
    58c4:	mvn	r3, #0
    58c8:	b	6810 <eval_integer+0x2300>
    58cc:	ldr	r1, [fp, #-960]	; 0xfffffc40
    58d0:	mov	r2, #0
    58d4:	mov	r3, #0
    58d8:	strd	r2, [r1]
    58dc:	b	59ec <eval_integer+0x14dc>
    58e0:	ldr	r3, [fp, #-56]	; 0xffffffc8
    58e4:	ldr	r3, [r3, #24]
    58e8:	cmp	r3, #0
    58ec:	beq	5930 <eval_integer+0x1420>
    58f0:	ldr	r3, [fp, #-56]	; 0xffffffc8
    58f4:	ldr	r3, [r3, #20]
    58f8:	sub	r2, fp, #328	; 0x148
    58fc:	mov	r1, r3
    5900:	ldr	r0, [fp, #-952]	; 0xfffffc48
    5904:	bl	1314 <eval_boolean>
    5908:	mov	r3, r0
    590c:	cmp	r3, #0
    5910:	beq	5930 <eval_integer+0x1420>
    5914:	ldr	r3, [pc, #3872]	; 683c <eval_integer+0x232c>
    5918:	ldr	r3, [pc, r3]
    591c:	mrc	15, 0, r2, cr13, cr0, {3}
    5920:	ldr	r1, [fp, #-64]	; 0xffffffc0
    5924:	str	r1, [r2, r3]
    5928:	mvn	r3, #0
    592c:	b	6810 <eval_integer+0x2300>
    5930:	ldr	r3, [fp, #-328]	; 0xfffffeb8
    5934:	cmp	r3, #0
    5938:	beq	5950 <eval_integer+0x1440>
    593c:	ldr	r1, [fp, #-960]	; 0xfffffc40
    5940:	mvn	r2, #0
    5944:	mvn	r3, #0
    5948:	strd	r2, [r1]
    594c:	b	59ec <eval_integer+0x14dc>
    5950:	ldr	r3, [fp, #-56]	; 0xffffffc8
    5954:	ldr	r3, [r3, #20]
    5958:	sub	r2, fp, #328	; 0x148
    595c:	mov	r1, r3
    5960:	ldr	r0, [fp, #-952]	; 0xfffffc48
    5964:	bl	1314 <eval_boolean>
    5968:	mov	r3, r0
    596c:	cmp	r3, #0
    5970:	beq	5990 <eval_integer+0x1480>
    5974:	ldr	r3, [pc, #3780]	; 6840 <eval_integer+0x2330>
    5978:	ldr	r3, [pc, r3]
    597c:	mrc	15, 0, r2, cr13, cr0, {3}
    5980:	ldr	r1, [fp, #-64]	; 0xffffffc0
    5984:	str	r1, [r2, r3]
    5988:	mvn	r3, #0
    598c:	b	6810 <eval_integer+0x2300>
    5990:	ldr	r3, [fp, #-328]	; 0xfffffeb8
    5994:	cmp	r3, #0
    5998:	bne	59ec <eval_integer+0x14dc>
    599c:	ldr	r3, [fp, #-960]	; 0xfffffc40
    59a0:	ldrd	r2, [r3]
    59a4:	adds	r6, r2, #1
    59a8:	adc	r7, r3, #0
    59ac:	ldr	r3, [fp, #-960]	; 0xfffffc40
    59b0:	strd	r6, [r3]
    59b4:	ldr	r3, [fp, #-952]	; 0xfffffc48
    59b8:	add	r3, r3, #8
    59bc:	mov	r0, r3
    59c0:	bl	0 <coda_cursor_goto_next_array_element>
    59c4:	mov	r3, r0
    59c8:	cmp	r3, #0
    59cc:	beq	59ec <eval_integer+0x14dc>
    59d0:	ldr	r3, [pc, #3692]	; 6844 <eval_integer+0x2334>
    59d4:	ldr	r3, [pc, r3]
    59d8:	mrc	15, 0, r2, cr13, cr0, {3}
    59dc:	ldr	r1, [fp, #-64]	; 0xffffffc0
    59e0:	str	r1, [r2, r3]
    59e4:	mvn	r3, #0
    59e8:	b	6810 <eval_integer+0x2300>
    59ec:	ldr	r3, [fp, #-328]	; 0xfffffeb8
    59f0:	cmp	r3, #0
    59f4:	beq	58e0 <eval_integer+0x13d0>
    59f8:	ldr	r3, [pc, #3656]	; 6848 <eval_integer+0x2338>
    59fc:	ldr	r3, [pc, r3]
    5a00:	mrc	15, 0, r2, cr13, cr0, {3}
    5a04:	ldr	r1, [fp, #-64]	; 0xffffffc0
    5a08:	str	r1, [r2, r3]
    5a0c:	ldr	r3, [fp, #-952]	; 0xfffffc48
    5a10:	add	r3, r3, #8
    5a14:	sub	r1, fp, #916	; 0x394
    5a18:	mov	r2, #520	; 0x208
    5a1c:	mov	r0, r3
    5a20:	bl	0 <memcpy>
    5a24:	b	680c <eval_integer+0x22fc>
    5a28:	ldr	r3, [fp, #-56]	; 0xffffffc8
    5a2c:	ldr	r3, [r3, #16]
    5a30:	ldr	r3, [r3, #4]
    5a34:	cmp	r3, #4
    5a38:	bne	5b08 <eval_integer+0x15f8>
    5a3c:	ldr	r3, [fp, #-952]	; 0xfffffc48
    5a40:	ldr	r3, [r3]
    5a44:	cmp	r3, #0
    5a48:	bne	5a6c <eval_integer+0x155c>
    5a4c:	movw	r3, #0
    5a50:	movt	r3, #0
    5a54:	movw	r2, #2491	; 0x9bb
    5a58:	movw	r1, #0
    5a5c:	movt	r1, #0
    5a60:	movw	r0, #0
    5a64:	movt	r0, #0
    5a68:	bl	0 <__assert_fail>
    5a6c:	ldr	r3, [fp, #-952]	; 0xfffffc48
    5a70:	sub	r0, fp, #916	; 0x394
    5a74:	add	r3, r3, #8
    5a78:	mov	r2, #520	; 0x208
    5a7c:	mov	r1, r3
    5a80:	bl	0 <memcpy>
    5a84:	ldr	r3, [fp, #-56]	; 0xffffffc8
    5a88:	ldr	r3, [r3, #16]
    5a8c:	mov	r1, r3
    5a90:	ldr	r0, [fp, #-952]	; 0xfffffc48
    5a94:	bl	9334 <eval_cursor>
    5a98:	mov	r3, r0
    5a9c:	cmp	r3, #0
    5aa0:	beq	5aac <eval_integer+0x159c>
    5aa4:	mvn	r3, #0
    5aa8:	b	6810 <eval_integer+0x2300>
    5aac:	ldr	r3, [fp, #-952]	; 0xfffffc48
    5ab0:	add	r3, r3, #8
    5ab4:	sub	r2, fp, #332	; 0x14c
    5ab8:	mov	r1, r2
    5abc:	mov	r0, r3
    5ac0:	bl	0 <coda_cursor_get_string_length>
    5ac4:	mov	r3, r0
    5ac8:	cmp	r3, #0
    5acc:	beq	5ad8 <eval_integer+0x15c8>
    5ad0:	mvn	r3, #0
    5ad4:	b	6810 <eval_integer+0x2300>
    5ad8:	ldr	r3, [fp, #-332]	; 0xfffffeb4
    5adc:	mov	r2, r3
    5ae0:	asr	r3, r2, #31
    5ae4:	ldr	r1, [fp, #-960]	; 0xfffffc40
    5ae8:	strd	r2, [r1]
    5aec:	ldr	r3, [fp, #-952]	; 0xfffffc48
    5af0:	add	r3, r3, #8
    5af4:	sub	r1, fp, #916	; 0x394
    5af8:	mov	r2, #520	; 0x208
    5afc:	mov	r0, r3
    5b00:	bl	0 <memcpy>
    5b04:	b	680c <eval_integer+0x22fc>
    5b08:	ldr	r3, [fp, #-56]	; 0xffffffc8
    5b0c:	ldr	r1, [r3, #16]
    5b10:	sub	r0, fp, #340	; 0x154
    5b14:	sub	r2, fp, #336	; 0x150
    5b18:	sub	r3, fp, #344	; 0x158
    5b1c:	str	r3, [sp]
    5b20:	mov	r3, r0
    5b24:	ldr	r0, [fp, #-952]	; 0xfffffc48
    5b28:	bl	684c <eval_string>
    5b2c:	mov	r3, r0
    5b30:	cmp	r3, #0
    5b34:	beq	5b40 <eval_integer+0x1630>
    5b38:	mvn	r3, #0
    5b3c:	b	6810 <eval_integer+0x2300>
    5b40:	ldr	r3, [fp, #-340]	; 0xfffffeac
    5b44:	cmp	r3, #0
    5b48:	ble	5b58 <eval_integer+0x1648>
    5b4c:	ldr	r3, [fp, #-344]	; 0xfffffea8
    5b50:	mov	r0, r3
    5b54:	bl	0 <free>
    5b58:	ldr	r3, [fp, #-340]	; 0xfffffeac
    5b5c:	mov	r2, r3
    5b60:	asr	r3, r2, #31
    5b64:	ldr	r1, [fp, #-960]	; 0xfffffc40
    5b68:	strd	r2, [r1]
    5b6c:	b	680c <eval_integer+0x22fc>
    5b70:	ldr	r3, [fp, #-952]	; 0xfffffc48
    5b74:	ldr	r3, [r3]
    5b78:	cmp	r3, #0
    5b7c:	bne	5ba0 <eval_integer+0x1690>
    5b80:	movw	r3, #0
    5b84:	movt	r3, #0
    5b88:	mov	r2, #2528	; 0x9e0
    5b8c:	movw	r1, #0
    5b90:	movt	r1, #0
    5b94:	movw	r0, #0
    5b98:	movt	r0, #0
    5b9c:	bl	0 <__assert_fail>
    5ba0:	ldr	r3, [fp, #-952]	; 0xfffffc48
    5ba4:	sub	r0, fp, #916	; 0x394
    5ba8:	add	r3, r3, #8
    5bac:	mov	r2, #520	; 0x208
    5bb0:	mov	r1, r3
    5bb4:	bl	0 <memcpy>
    5bb8:	ldr	r3, [fp, #-56]	; 0xffffffc8
    5bbc:	ldr	r3, [r3, #16]
    5bc0:	mov	r1, r3
    5bc4:	ldr	r0, [fp, #-952]	; 0xfffffc48
    5bc8:	bl	9334 <eval_cursor>
    5bcc:	mov	r3, r0
    5bd0:	cmp	r3, #0
    5bd4:	beq	5be0 <eval_integer+0x16d0>
    5bd8:	mvn	r3, #0
    5bdc:	b	6810 <eval_integer+0x2300>
    5be0:	ldr	r3, [fp, #-56]	; 0xffffffc8
    5be4:	ldr	r3, [r3, #20]
    5be8:	sub	r2, fp, #356	; 0x164
    5bec:	mov	r1, r3
    5bf0:	ldr	r0, [fp, #-952]	; 0xfffffc48
    5bf4:	bl	4510 <eval_integer>
    5bf8:	mov	r3, r0
    5bfc:	cmp	r3, #0
    5c00:	beq	5c0c <eval_integer+0x16fc>
    5c04:	mvn	r3, #0
    5c08:	b	6810 <eval_integer+0x2300>
    5c0c:	ldr	r3, [fp, #-952]	; 0xfffffc48
    5c10:	add	r3, r3, #8
    5c14:	sub	r2, fp, #948	; 0x3b4
    5c18:	sub	r1, fp, #348	; 0x15c
    5c1c:	mov	r0, r3
    5c20:	bl	0 <coda_cursor_get_array_dim>
    5c24:	mov	r3, r0
    5c28:	cmp	r3, #0
    5c2c:	beq	5c38 <eval_integer+0x1728>
    5c30:	mvn	r3, #0
    5c34:	b	6810 <eval_integer+0x2300>
    5c38:	sub	r3, fp, #348	; 0x15c
    5c3c:	ldrd	r2, [r3, #-8]
    5c40:	cmp	r2, #0
    5c44:	sbcs	r3, r3, #0
    5c48:	bge	5c74 <eval_integer+0x1764>
    5c4c:	sub	r3, fp, #348	; 0x15c
    5c50:	ldrd	r2, [r3, #-8]
    5c54:	mov	r3, r2
    5c58:	mov	r2, r3
    5c5c:	movw	r1, #0
    5c60:	movt	r1, #0
    5c64:	mvn	r0, #400	; 0x190
    5c68:	bl	0 <coda_set_error>
    5c6c:	mvn	r3, #0
    5c70:	b	6810 <eval_integer+0x2300>
    5c74:	ldr	r3, [fp, #-348]	; 0xfffffea4
    5c78:	mov	r2, r3
    5c7c:	asr	r3, r2, #31
    5c80:	sub	r1, fp, #348	; 0x15c
    5c84:	ldrd	r0, [r1, #-8]
    5c88:	cmp	r0, r2
    5c8c:	sbcs	r3, r1, r3
    5c90:	blt	5cb8 <eval_integer+0x17a8>
    5c94:	sub	r3, fp, #348	; 0x15c
    5c98:	ldrd	r2, [r3, #-8]
    5c9c:	ldr	r3, [fp, #-348]	; 0xfffffea4
    5ca0:	movw	r1, #0
    5ca4:	movt	r1, #0
    5ca8:	mvn	r0, #400	; 0x190
    5cac:	bl	0 <coda_set_error>
    5cb0:	mvn	r3, #0
    5cb4:	b	6810 <eval_integer+0x2300>
    5cb8:	ldr	r3, [fp, #-952]	; 0xfffffc48
    5cbc:	add	r3, r3, #8
    5cc0:	sub	r1, fp, #916	; 0x394
    5cc4:	mov	r2, #520	; 0x208
    5cc8:	mov	r0, r3
    5ccc:	bl	0 <memcpy>
    5cd0:	sub	r3, fp, #348	; 0x15c
    5cd4:	ldrd	r2, [r3, #-8]
    5cd8:	mov	r3, r2
    5cdc:	lsl	r3, r3, #2
    5ce0:	sub	r2, fp, #28
    5ce4:	add	r3, r2, r3
    5ce8:	ldr	r3, [r3, #-920]	; 0xfffffc68
    5cec:	mov	r2, r3
    5cf0:	asr	r3, r2, #31
    5cf4:	ldr	r1, [fp, #-960]	; 0xfffffc40
    5cf8:	strd	r2, [r1]
    5cfc:	b	680c <eval_integer+0x22fc>
    5d00:	ldr	r3, [fp, #-952]	; 0xfffffc48
    5d04:	ldr	r3, [r3]
    5d08:	cmp	r3, #0
    5d0c:	bne	5d30 <eval_integer+0x1820>
    5d10:	movw	r3, #0
    5d14:	movt	r3, #0
    5d18:	movw	r2, #2563	; 0xa03
    5d1c:	movw	r1, #0
    5d20:	movt	r1, #0
    5d24:	movw	r0, #0
    5d28:	movt	r0, #0
    5d2c:	bl	0 <__assert_fail>
    5d30:	ldr	r3, [fp, #-952]	; 0xfffffc48
    5d34:	sub	r0, fp, #916	; 0x394
    5d38:	add	r3, r3, #8
    5d3c:	mov	r2, #520	; 0x208
    5d40:	mov	r1, r3
    5d44:	bl	0 <memcpy>
    5d48:	ldr	r3, [fp, #-56]	; 0xffffffc8
    5d4c:	ldr	r3, [r3, #16]
    5d50:	mov	r1, r3
    5d54:	ldr	r0, [fp, #-952]	; 0xfffffc48
    5d58:	bl	9334 <eval_cursor>
    5d5c:	mov	r3, r0
    5d60:	cmp	r3, #0
    5d64:	beq	5d70 <eval_integer+0x1860>
    5d68:	mvn	r3, #0
    5d6c:	b	6810 <eval_integer+0x2300>
    5d70:	ldr	r3, [fp, #-952]	; 0xfffffc48
    5d74:	add	r3, r3, #8
    5d78:	sub	r2, fp, #360	; 0x168
    5d7c:	mov	r1, r2
    5d80:	mov	r0, r3
    5d84:	bl	0 <coda_cursor_get_type>
    5d88:	mov	r3, r0
    5d8c:	cmp	r3, #0
    5d90:	beq	5d9c <eval_integer+0x188c>
    5d94:	mvn	r3, #0
    5d98:	b	6810 <eval_integer+0x2300>
    5d9c:	ldr	r3, [fp, #-360]	; 0xfffffe98
    5da0:	sub	r2, fp, #364	; 0x16c
    5da4:	mov	r1, r2
    5da8:	mov	r0, r3
    5dac:	bl	0 <coda_type_get_array_num_dims>
    5db0:	mov	r3, r0
    5db4:	cmp	r3, #0
    5db8:	beq	5dc4 <eval_integer+0x18b4>
    5dbc:	mvn	r3, #0
    5dc0:	b	6810 <eval_integer+0x2300>
    5dc4:	ldr	r3, [fp, #-952]	; 0xfffffc48
    5dc8:	add	r3, r3, #8
    5dcc:	sub	r1, fp, #916	; 0x394
    5dd0:	mov	r2, #520	; 0x208
    5dd4:	mov	r0, r3
    5dd8:	bl	0 <memcpy>
    5ddc:	ldr	r3, [fp, #-364]	; 0xfffffe94
    5de0:	mov	r2, r3
    5de4:	asr	r3, r2, #31
    5de8:	ldr	r1, [fp, #-960]	; 0xfffffc40
    5dec:	strd	r2, [r1]
    5df0:	b	680c <eval_integer+0x22fc>
    5df4:	ldr	r3, [fp, #-952]	; 0xfffffc48
    5df8:	ldr	r3, [r3]
    5dfc:	cmp	r3, #0
    5e00:	bne	5e24 <eval_integer+0x1914>
    5e04:	movw	r3, #0
    5e08:	movt	r3, #0
    5e0c:	movw	r2, #2586	; 0xa1a
    5e10:	movw	r1, #0
    5e14:	movt	r1, #0
    5e18:	movw	r0, #0
    5e1c:	movt	r0, #0
    5e20:	bl	0 <__assert_fail>
    5e24:	ldr	r3, [fp, #-952]	; 0xfffffc48
    5e28:	sub	r0, fp, #916	; 0x394
    5e2c:	add	r3, r3, #8
    5e30:	mov	r2, #520	; 0x208
    5e34:	mov	r1, r3
    5e38:	bl	0 <memcpy>
    5e3c:	ldr	r3, [fp, #-56]	; 0xffffffc8
    5e40:	ldr	r3, [r3, #16]
    5e44:	mov	r1, r3
    5e48:	ldr	r0, [fp, #-952]	; 0xfffffc48
    5e4c:	bl	9334 <eval_cursor>
    5e50:	mov	r3, r0
    5e54:	cmp	r3, #0
    5e58:	beq	5e64 <eval_integer+0x1954>
    5e5c:	mvn	r3, #0
    5e60:	b	6810 <eval_integer+0x2300>
    5e64:	ldr	r3, [fp, #-952]	; 0xfffffc48
    5e68:	add	r3, r3, #8
    5e6c:	sub	r2, fp, #368	; 0x170
    5e70:	mov	r1, r2
    5e74:	mov	r0, r3
    5e78:	bl	0 <coda_cursor_get_num_elements>
    5e7c:	mov	r3, r0
    5e80:	cmp	r3, #0
    5e84:	beq	5e90 <eval_integer+0x1980>
    5e88:	mvn	r3, #0
    5e8c:	b	6810 <eval_integer+0x2300>
    5e90:	ldr	r3, [fp, #-952]	; 0xfffffc48
    5e94:	add	r3, r3, #8
    5e98:	sub	r1, fp, #916	; 0x394
    5e9c:	mov	r2, #520	; 0x208
    5ea0:	mov	r0, r3
    5ea4:	bl	0 <memcpy>
    5ea8:	ldr	r3, [fp, #-368]	; 0xfffffe90
    5eac:	mov	r2, r3
    5eb0:	asr	r3, r2, #31
    5eb4:	ldr	r1, [fp, #-960]	; 0xfffffc40
    5eb8:	strd	r2, [r1]
    5ebc:	b	680c <eval_integer+0x22fc>
    5ec0:	ldr	r3, [fp, #-952]	; 0xfffffc48
    5ec4:	ldr	r3, [r3]
    5ec8:	cmp	r3, #0
    5ecc:	bne	5ef0 <eval_integer+0x19e0>
    5ed0:	movw	r3, #0
    5ed4:	movt	r3, #0
    5ed8:	movw	r2, #2605	; 0xa2d
    5edc:	movw	r1, #0
    5ee0:	movt	r1, #0
    5ee4:	movw	r0, #0
    5ee8:	movt	r0, #0
    5eec:	bl	0 <__assert_fail>
    5ef0:	ldr	r3, [fp, #-952]	; 0xfffffc48
    5ef4:	sub	r0, fp, #916	; 0x394
    5ef8:	add	r3, r3, #8
    5efc:	mov	r2, #520	; 0x208
    5f00:	mov	r1, r3
    5f04:	bl	0 <memcpy>
    5f08:	ldr	r3, [fp, #-56]	; 0xffffffc8
    5f0c:	ldr	r3, [r3, #16]
    5f10:	mov	r1, r3
    5f14:	ldr	r0, [fp, #-952]	; 0xfffffc48
    5f18:	bl	9334 <eval_cursor>
    5f1c:	mov	r3, r0
    5f20:	cmp	r3, #0
    5f24:	beq	5f30 <eval_integer+0x1a20>
    5f28:	mvn	r3, #0
    5f2c:	b	6810 <eval_integer+0x2300>
    5f30:	bl	0 <coda_get_option_use_fast_size_expressions>
    5f34:	str	r0, [fp, #-68]	; 0xffffffbc
    5f38:	mov	r0, #0
    5f3c:	bl	0 <coda_set_option_use_fast_size_expressions>
    5f40:	ldr	r3, [fp, #-952]	; 0xfffffc48
    5f44:	add	r3, r3, #8
    5f48:	ldr	r1, [fp, #-960]	; 0xfffffc40
    5f4c:	mov	r0, r3
    5f50:	bl	0 <coda_cursor_get_bit_size>
    5f54:	mov	r3, r0
    5f58:	cmp	r3, #0
    5f5c:	beq	5f70 <eval_integer+0x1a60>
    5f60:	ldr	r0, [fp, #-68]	; 0xffffffbc
    5f64:	bl	0 <coda_set_option_use_fast_size_expressions>
    5f68:	mvn	r3, #0
    5f6c:	b	6810 <eval_integer+0x2300>
    5f70:	ldr	r0, [fp, #-68]	; 0xffffffbc
    5f74:	bl	0 <coda_set_option_use_fast_size_expressions>
    5f78:	ldr	r3, [fp, #-952]	; 0xfffffc48
    5f7c:	add	r3, r3, #8
    5f80:	sub	r1, fp, #916	; 0x394
    5f84:	mov	r2, #520	; 0x208
    5f88:	mov	r0, r3
    5f8c:	bl	0 <memcpy>
    5f90:	b	680c <eval_integer+0x22fc>
    5f94:	ldr	r3, [fp, #-952]	; 0xfffffc48
    5f98:	ldr	r3, [r3]
    5f9c:	cmp	r3, #0
    5fa0:	bne	5fc4 <eval_integer+0x1ab4>
    5fa4:	movw	r3, #0
    5fa8:	movt	r3, #0
    5fac:	movw	r2, #2627	; 0xa43
    5fb0:	movw	r1, #0
    5fb4:	movt	r1, #0
    5fb8:	movw	r0, #0
    5fbc:	movt	r0, #0
    5fc0:	bl	0 <__assert_fail>
    5fc4:	ldr	r3, [fp, #-952]	; 0xfffffc48
    5fc8:	sub	r0, fp, #916	; 0x394
    5fcc:	add	r3, r3, #8
    5fd0:	mov	r2, #520	; 0x208
    5fd4:	mov	r1, r3
    5fd8:	bl	0 <memcpy>
    5fdc:	ldr	r3, [fp, #-56]	; 0xffffffc8
    5fe0:	ldr	r3, [r3, #16]
    5fe4:	mov	r1, r3
    5fe8:	ldr	r0, [fp, #-952]	; 0xfffffc48
    5fec:	bl	9334 <eval_cursor>
    5ff0:	mov	r3, r0
    5ff4:	cmp	r3, #0
    5ff8:	beq	6004 <eval_integer+0x1af4>
    5ffc:	mvn	r3, #0
    6000:	b	6810 <eval_integer+0x2300>
    6004:	bl	0 <coda_get_option_use_fast_size_expressions>
    6008:	str	r0, [fp, #-72]	; 0xffffffb8
    600c:	mov	r0, #0
    6010:	bl	0 <coda_set_option_use_fast_size_expressions>
    6014:	ldr	r3, [fp, #-952]	; 0xfffffc48
    6018:	add	r3, r3, #8
    601c:	ldr	r1, [fp, #-960]	; 0xfffffc40
    6020:	mov	r0, r3
    6024:	bl	0 <coda_cursor_get_byte_size>
    6028:	mov	r3, r0
    602c:	cmp	r3, #0
    6030:	beq	6044 <eval_integer+0x1b34>
    6034:	ldr	r0, [fp, #-72]	; 0xffffffb8
    6038:	bl	0 <coda_set_option_use_fast_size_expressions>
    603c:	mvn	r3, #0
    6040:	b	6810 <eval_integer+0x2300>
    6044:	ldr	r0, [fp, #-72]	; 0xffffffb8
    6048:	bl	0 <coda_set_option_use_fast_size_expressions>
    604c:	ldr	r3, [fp, #-952]	; 0xfffffc48
    6050:	add	r3, r3, #8
    6054:	sub	r1, fp, #916	; 0x394
    6058:	mov	r2, #520	; 0x208
    605c:	mov	r0, r3
    6060:	bl	0 <memcpy>
    6064:	b	680c <eval_integer+0x22fc>
    6068:	ldr	r3, [fp, #-952]	; 0xfffffc48
    606c:	ldr	r3, [r3]
    6070:	cmp	r3, #0
    6074:	bne	6098 <eval_integer+0x1b88>
    6078:	movw	r3, #0
    607c:	movt	r3, #0
    6080:	movw	r2, #2648	; 0xa58
    6084:	movw	r1, #0
    6088:	movt	r1, #0
    608c:	movw	r0, #0
    6090:	movt	r0, #0
    6094:	bl	0 <__assert_fail>
    6098:	ldr	r3, [fp, #-952]	; 0xfffffc48
    609c:	sub	r0, fp, #916	; 0x394
    60a0:	add	r3, r3, #8
    60a4:	mov	r2, #520	; 0x208
    60a8:	mov	r1, r3
    60ac:	bl	0 <memcpy>
    60b0:	ldr	r3, [fp, #-56]	; 0xffffffc8
    60b4:	ldr	r3, [r3, #16]
    60b8:	mov	r1, r3
    60bc:	ldr	r0, [fp, #-952]	; 0xfffffc48
    60c0:	bl	9334 <eval_cursor>
    60c4:	mov	r3, r0
    60c8:	cmp	r3, #0
    60cc:	beq	60d8 <eval_integer+0x1bc8>
    60d0:	mvn	r3, #0
    60d4:	b	6810 <eval_integer+0x2300>
    60d8:	ldr	r3, [fp, #-952]	; 0xfffffc48
    60dc:	add	r3, r3, #8
    60e0:	ldr	r1, [fp, #-960]	; 0xfffffc40
    60e4:	mov	r0, r3
    60e8:	bl	0 <coda_cursor_get_file_bit_offset>
    60ec:	mov	r3, r0
    60f0:	cmp	r3, #0
    60f4:	beq	6100 <eval_integer+0x1bf0>
    60f8:	mvn	r3, #0
    60fc:	b	6810 <eval_integer+0x2300>
    6100:	ldr	r3, [fp, #-952]	; 0xfffffc48
    6104:	add	r3, r3, #8
    6108:	sub	r1, fp, #916	; 0x394
    610c:	mov	r2, #520	; 0x208
    6110:	mov	r0, r3
    6114:	bl	0 <memcpy>
    6118:	b	680c <eval_integer+0x22fc>
    611c:	ldr	r3, [fp, #-952]	; 0xfffffc48
    6120:	ldr	r3, [r3]
    6124:	cmp	r3, #0
    6128:	bne	614c <eval_integer+0x1c3c>
    612c:	movw	r3, #0
    6130:	movt	r3, #0
    6134:	movw	r2, #2665	; 0xa69
    6138:	movw	r1, #0
    613c:	movt	r1, #0
    6140:	movw	r0, #0
    6144:	movt	r0, #0
    6148:	bl	0 <__assert_fail>
    614c:	ldr	r3, [fp, #-952]	; 0xfffffc48
    6150:	sub	r0, fp, #916	; 0x394
    6154:	add	r3, r3, #8
    6158:	mov	r2, #520	; 0x208
    615c:	mov	r1, r3
    6160:	bl	0 <memcpy>
    6164:	ldr	r3, [fp, #-56]	; 0xffffffc8
    6168:	ldr	r3, [r3, #16]
    616c:	mov	r1, r3
    6170:	ldr	r0, [fp, #-952]	; 0xfffffc48
    6174:	bl	9334 <eval_cursor>
    6178:	mov	r3, r0
    617c:	cmp	r3, #0
    6180:	beq	618c <eval_integer+0x1c7c>
    6184:	mvn	r3, #0
    6188:	b	6810 <eval_integer+0x2300>
    618c:	ldr	r3, [fp, #-952]	; 0xfffffc48
    6190:	add	r3, r3, #8
    6194:	ldr	r1, [fp, #-960]	; 0xfffffc40
    6198:	mov	r0, r3
    619c:	bl	0 <coda_cursor_get_file_byte_offset>
    61a0:	mov	r3, r0
    61a4:	cmp	r3, #0
    61a8:	beq	61b4 <eval_integer+0x1ca4>
    61ac:	mvn	r3, #0
    61b0:	b	6810 <eval_integer+0x2300>
    61b4:	ldr	r3, [fp, #-952]	; 0xfffffc48
    61b8:	add	r3, r3, #8
    61bc:	sub	r1, fp, #916	; 0x394
    61c0:	mov	r2, #520	; 0x208
    61c4:	mov	r0, r3
    61c8:	bl	0 <memcpy>
    61cc:	b	680c <eval_integer+0x22fc>
    61d0:	ldr	r3, [fp, #-952]	; 0xfffffc48
    61d4:	ldr	r3, [r3]
    61d8:	cmp	r3, #0
    61dc:	bne	6200 <eval_integer+0x1cf0>
    61e0:	movw	r3, #0
    61e4:	movt	r3, #0
    61e8:	movw	r2, #2679	; 0xa77
    61ec:	movw	r1, #0
    61f0:	movt	r1, #0
    61f4:	movw	r0, #0
    61f8:	movt	r0, #0
    61fc:	bl	0 <__assert_fail>
    6200:	ldr	r3, [fp, #-952]	; 0xfffffc48
    6204:	ldr	r3, [r3]
    6208:	ldr	r3, [r3]
    620c:	ldr	r1, [fp, #-960]	; 0xfffffc40
    6210:	mov	r0, r3
    6214:	bl	0 <coda_get_product_file_size>
    6218:	mov	r3, r0
    621c:	cmp	r3, #0
    6220:	beq	6808 <eval_integer+0x22f8>
    6224:	mvn	r3, #0
    6228:	b	6810 <eval_integer+0x2300>
    622c:	ldr	r3, [fp, #-952]	; 0xfffffc48
    6230:	ldr	r3, [r3]
    6234:	cmp	r3, #0
    6238:	bne	625c <eval_integer+0x1d4c>
    623c:	movw	r3, #0
    6240:	movt	r3, #0
    6244:	movw	r2, #2689	; 0xa81
    6248:	movw	r1, #0
    624c:	movt	r1, #0
    6250:	movw	r0, #0
    6254:	movt	r0, #0
    6258:	bl	0 <__assert_fail>
    625c:	ldr	r3, [fp, #-952]	; 0xfffffc48
    6260:	ldr	r3, [r3]
    6264:	ldr	r3, [r3]
    6268:	sub	r2, fp, #372	; 0x174
    626c:	mov	r1, r2
    6270:	mov	r0, r3
    6274:	bl	0 <coda_get_product_version>
    6278:	mov	r3, r0
    627c:	cmp	r3, #0
    6280:	beq	628c <eval_integer+0x1d7c>
    6284:	mvn	r3, #0
    6288:	b	6810 <eval_integer+0x2300>
    628c:	ldr	r3, [fp, #-372]	; 0xfffffe8c
    6290:	mov	r2, r3
    6294:	asr	r3, r2, #31
    6298:	ldr	r1, [fp, #-960]	; 0xfffffc40
    629c:	strd	r2, [r1]
    62a0:	b	680c <eval_integer+0x22fc>
    62a4:	ldr	r3, [fp, #-952]	; 0xfffffc48
    62a8:	ldr	r3, [r3]
    62ac:	cmp	r3, #0
    62b0:	bne	62d4 <eval_integer+0x1dc4>
    62b4:	movw	r3, #0
    62b8:	movt	r3, #0
    62bc:	movw	r2, #2702	; 0xa8e
    62c0:	movw	r1, #0
    62c4:	movt	r1, #0
    62c8:	movw	r0, #0
    62cc:	movt	r0, #0
    62d0:	bl	0 <__assert_fail>
    62d4:	ldr	r3, [fp, #-952]	; 0xfffffc48
    62d8:	sub	r0, fp, #916	; 0x394
    62dc:	add	r3, r3, #8
    62e0:	mov	r2, #520	; 0x208
    62e4:	mov	r1, r3
    62e8:	bl	0 <memcpy>
    62ec:	ldr	r3, [fp, #-56]	; 0xffffffc8
    62f0:	ldr	r3, [r3, #16]
    62f4:	mov	r1, r3
    62f8:	ldr	r0, [fp, #-952]	; 0xfffffc48
    62fc:	bl	9334 <eval_cursor>
    6300:	mov	r3, r0
    6304:	cmp	r3, #0
    6308:	beq	6314 <eval_integer+0x1e04>
    630c:	mvn	r3, #0
    6310:	b	6810 <eval_integer+0x2300>
    6314:	ldr	r3, [fp, #-952]	; 0xfffffc48
    6318:	add	r3, r3, #8
    631c:	sub	r2, fp, #376	; 0x178
    6320:	mov	r1, r2
    6324:	mov	r0, r3
    6328:	bl	0 <coda_cursor_get_index>
    632c:	mov	r3, r0
    6330:	cmp	r3, #0
    6334:	beq	6340 <eval_integer+0x1e30>
    6338:	mvn	r3, #0
    633c:	b	6810 <eval_integer+0x2300>
    6340:	ldr	r3, [fp, #-952]	; 0xfffffc48
    6344:	add	r3, r3, #8
    6348:	sub	r1, fp, #916	; 0x394
    634c:	mov	r2, #520	; 0x208
    6350:	mov	r0, r3
    6354:	bl	0 <memcpy>
    6358:	ldr	r3, [fp, #-376]	; 0xfffffe88
    635c:	mov	r2, r3
    6360:	asr	r3, r2, #31
    6364:	ldr	r1, [fp, #-960]	; 0xfffffc40
    6368:	strd	r2, [r1]
    636c:	b	680c <eval_integer+0x22fc>
    6370:	ldr	r3, [fp, #-56]	; 0xffffffc8
    6374:	ldr	r3, [r3, #12]
    6378:	ldrb	r3, [r3]
    637c:	sub	r3, r3, #105	; 0x69
    6380:	ldr	r2, [fp, #-952]	; 0xfffffc48
    6384:	add	r3, r3, #66	; 0x42
    6388:	lsl	r3, r3, #3
    638c:	add	r3, r2, r3
    6390:	ldrd	r2, [r3]
    6394:	ldr	r1, [fp, #-960]	; 0xfffffc40
    6398:	strd	r2, [r1]
    639c:	b	680c <eval_integer+0x22fc>
    63a0:	ldr	r3, [fp, #-952]	; 0xfffffc48
    63a4:	ldr	r3, [r3]
    63a8:	cmp	r3, #0
    63ac:	bne	63d0 <eval_integer+0x1ec0>
    63b0:	movw	r3, #0
    63b4:	movt	r3, #0
    63b8:	movw	r2, #2724	; 0xaa4
    63bc:	movw	r1, #0
    63c0:	movt	r1, #0
    63c4:	movw	r0, #0
    63c8:	movt	r0, #0
    63cc:	bl	0 <__assert_fail>
    63d0:	ldr	r3, [fp, #-952]	; 0xfffffc48
    63d4:	ldr	r3, [r3, #560]	; 0x230
    63d8:	cmp	r3, #0
    63dc:	beq	63f8 <eval_integer+0x1ee8>
    63e0:	movw	r1, #0
    63e4:	movt	r1, #0
    63e8:	mvn	r0, #400	; 0x190
    63ec:	bl	0 <coda_set_error>
    63f0:	mvn	r3, #0
    63f4:	b	6810 <eval_integer+0x2300>
    63f8:	ldr	r3, [fp, #-952]	; 0xfffffc48
    63fc:	ldr	r3, [r3]
    6400:	ldr	r0, [r3]
    6404:	ldr	r3, [fp, #-56]	; 0xffffffc8
    6408:	ldr	r3, [r3, #12]
    640c:	sub	r2, fp, #380	; 0x17c
    6410:	mov	r1, r3
    6414:	bl	0 <coda_product_variable_get_size>
    6418:	mov	r3, r0
    641c:	cmp	r3, #0
    6420:	beq	642c <eval_integer+0x1f1c>
    6424:	mvn	r3, #0
    6428:	b	6810 <eval_integer+0x2300>
    642c:	ldr	r3, [fp, #-56]	; 0xffffffc8
    6430:	ldr	r2, [r3, #12]
    6434:	ldr	r3, [fp, #-952]	; 0xfffffc48
    6438:	str	r2, [r3, #560]	; 0x230
    643c:	mov	r3, #0
    6440:	str	r3, [fp, #-52]	; 0xffffffcc
    6444:	b	64cc <eval_integer+0x1fbc>
    6448:	ldr	r3, [fp, #-52]	; 0xffffffcc
    644c:	mov	r2, r3
    6450:	asr	r3, r2, #31
    6454:	ldr	r1, [fp, #-952]	; 0xfffffc48
    6458:	add	r1, r1, #560	; 0x230
    645c:	strd	r2, [r1, #-8]
    6460:	ldr	r3, [fp, #-56]	; 0xffffffc8
    6464:	ldr	r3, [r3, #16]
    6468:	sub	r2, fp, #384	; 0x180
    646c:	mov	r1, r3
    6470:	ldr	r0, [fp, #-952]	; 0xfffffc48
    6474:	bl	1314 <eval_boolean>
    6478:	mov	r3, r0
    647c:	cmp	r3, #0
    6480:	beq	648c <eval_integer+0x1f7c>
    6484:	mvn	r3, #0
    6488:	b	6810 <eval_integer+0x2300>
    648c:	ldr	r3, [fp, #-384]	; 0xfffffe80
    6490:	cmp	r3, #0
    6494:	beq	64c0 <eval_integer+0x1fb0>
    6498:	ldr	r3, [fp, #-52]	; 0xffffffcc
    649c:	mov	r2, r3
    64a0:	asr	r3, r2, #31
    64a4:	ldr	r1, [fp, #-960]	; 0xfffffc40
    64a8:	strd	r2, [r1]
    64ac:	ldr	r3, [fp, #-952]	; 0xfffffc48
    64b0:	mov	r2, #0
    64b4:	str	r2, [r3, #560]	; 0x230
    64b8:	mov	r3, #0
    64bc:	b	6810 <eval_integer+0x2300>
    64c0:	ldr	r3, [fp, #-52]	; 0xffffffcc
    64c4:	add	r3, r3, #1
    64c8:	str	r3, [fp, #-52]	; 0xffffffcc
    64cc:	ldr	r3, [fp, #-380]	; 0xfffffe84
    64d0:	ldr	r2, [fp, #-52]	; 0xffffffcc
    64d4:	cmp	r2, r3
    64d8:	blt	6448 <eval_integer+0x1f38>
    64dc:	ldr	r1, [fp, #-960]	; 0xfffffc40
    64e0:	mvn	r2, #0
    64e4:	mvn	r3, #0
    64e8:	strd	r2, [r1]
    64ec:	ldr	r3, [fp, #-952]	; 0xfffffc48
    64f0:	mov	r2, #0
    64f4:	str	r2, [r3, #560]	; 0x230
    64f8:	b	680c <eval_integer+0x22fc>
    64fc:	sub	r3, fp, #396	; 0x18c
    6500:	mov	r1, r3
    6504:	mov	r2, #0
    6508:	mov	r3, #0
    650c:	strd	r2, [r1]
    6510:	ldr	r3, [fp, #-952]	; 0xfffffc48
    6514:	ldr	r3, [r3]
    6518:	cmp	r3, #0
    651c:	bne	6540 <eval_integer+0x2030>
    6520:	movw	r3, #0
    6524:	movt	r3, #0
    6528:	movw	r2, #2761	; 0xac9
    652c:	movw	r1, #0
    6530:	movt	r1, #0
    6534:	movw	r0, #0
    6538:	movt	r0, #0
    653c:	bl	0 <__assert_fail>
    6540:	ldr	r3, [fp, #-56]	; 0xffffffc8
    6544:	ldr	r3, [r3, #16]
    6548:	cmp	r3, #0
    654c:	beq	65d8 <eval_integer+0x20c8>
    6550:	ldr	r3, [fp, #-952]	; 0xfffffc48
    6554:	ldr	r3, [r3, #560]	; 0x230
    6558:	cmp	r3, #0
    655c:	beq	65ac <eval_integer+0x209c>
    6560:	ldr	r3, [fp, #-56]	; 0xffffffc8
    6564:	ldr	r2, [r3, #12]
    6568:	ldr	r3, [fp, #-952]	; 0xfffffc48
    656c:	ldr	r3, [r3, #560]	; 0x230
    6570:	mov	r1, r3
    6574:	mov	r0, r2
    6578:	bl	0 <strcmp>
    657c:	mov	r3, r0
    6580:	cmp	r3, #0
    6584:	bne	65ac <eval_integer+0x209c>
    6588:	ldr	r3, [fp, #-56]	; 0xffffffc8
    658c:	ldr	r3, [r3, #12]
    6590:	mov	r2, r3
    6594:	movw	r1, #0
    6598:	movt	r1, #0
    659c:	mvn	r0, #400	; 0x190
    65a0:	bl	0 <coda_set_error>
    65a4:	mvn	r3, #0
    65a8:	b	6810 <eval_integer+0x2300>
    65ac:	ldr	r3, [fp, #-56]	; 0xffffffc8
    65b0:	ldr	r3, [r3, #16]
    65b4:	sub	r2, fp, #396	; 0x18c
    65b8:	mov	r1, r3
    65bc:	ldr	r0, [fp, #-952]	; 0xfffffc48
    65c0:	bl	4510 <eval_integer>
    65c4:	mov	r3, r0
    65c8:	cmp	r3, #0
    65cc:	beq	6624 <eval_integer+0x2114>
    65d0:	mvn	r3, #0
    65d4:	b	6810 <eval_integer+0x2300>
    65d8:	ldr	r3, [fp, #-952]	; 0xfffffc48
    65dc:	ldr	r3, [r3, #560]	; 0x230
    65e0:	cmp	r3, #0
    65e4:	beq	6624 <eval_integer+0x2114>
    65e8:	ldr	r3, [fp, #-952]	; 0xfffffc48
    65ec:	ldr	r2, [r3, #560]	; 0x230
    65f0:	ldr	r3, [fp, #-56]	; 0xffffffc8
    65f4:	ldr	r3, [r3, #12]
    65f8:	mov	r1, r3
    65fc:	mov	r0, r2
    6600:	bl	0 <strcmp>
    6604:	mov	r3, r0
    6608:	cmp	r3, #0
    660c:	bne	6624 <eval_integer+0x2114>
    6610:	ldr	r3, [fp, #-952]	; 0xfffffc48
    6614:	add	r3, r3, #560	; 0x230
    6618:	ldrd	r2, [r3, #-8]
    661c:	sub	r1, fp, #396	; 0x18c
    6620:	strd	r2, [r1]
    6624:	ldr	r3, [fp, #-952]	; 0xfffffc48
    6628:	ldr	r3, [r3]
    662c:	ldr	r0, [r3]
    6630:	ldr	r3, [fp, #-56]	; 0xffffffc8
    6634:	ldr	r1, [r3, #12]
    6638:	sub	r3, fp, #396	; 0x18c
    663c:	ldrd	r2, [r3]
    6640:	sub	r3, fp, #388	; 0x184
    6644:	bl	0 <coda_product_variable_get_pointer>
    6648:	mov	r3, r0
    664c:	cmp	r3, #0
    6650:	beq	665c <eval_integer+0x214c>
    6654:	mvn	r3, #0
    6658:	b	6810 <eval_integer+0x2300>
    665c:	ldr	r3, [fp, #-388]	; 0xfffffe7c
    6660:	ldrd	r2, [r3]
    6664:	ldr	r1, [fp, #-960]	; 0xfffffc40
    6668:	strd	r2, [r1]
    666c:	b	680c <eval_integer+0x22fc>
    6670:	ldr	r3, [fp, #-952]	; 0xfffffc48
    6674:	ldr	r3, [r3]
    6678:	cmp	r3, #0
    667c:	bne	66a0 <eval_integer+0x2190>
    6680:	movw	r3, #0
    6684:	movt	r3, #0
    6688:	movw	r2, #2792	; 0xae8
    668c:	movw	r1, #0
    6690:	movt	r1, #0
    6694:	movw	r0, #0
    6698:	movt	r0, #0
    669c:	bl	0 <__assert_fail>
    66a0:	ldr	r3, [fp, #-952]	; 0xfffffc48
    66a4:	sub	r0, fp, #916	; 0x394
    66a8:	add	r3, r3, #8
    66ac:	mov	r2, #520	; 0x208
    66b0:	mov	r1, r3
    66b4:	bl	0 <memcpy>
    66b8:	ldr	r3, [fp, #-56]	; 0xffffffc8
    66bc:	ldr	r3, [r3, #16]
    66c0:	mov	r1, r3
    66c4:	ldr	r0, [fp, #-952]	; 0xfffffc48
    66c8:	bl	9334 <eval_cursor>
    66cc:	mov	r3, r0
    66d0:	cmp	r3, #0
    66d4:	beq	66e0 <eval_integer+0x21d0>
    66d8:	mvn	r3, #0
    66dc:	b	6810 <eval_integer+0x2300>
    66e0:	ldr	r3, [fp, #-56]	; 0xffffffc8
    66e4:	ldr	r3, [r3, #20]
    66e8:	ldr	r2, [fp, #-960]	; 0xfffffc40
    66ec:	mov	r1, r3
    66f0:	ldr	r0, [fp, #-952]	; 0xfffffc48
    66f4:	bl	4510 <eval_integer>
    66f8:	mov	r3, r0
    66fc:	cmp	r3, #0
    6700:	beq	670c <eval_integer+0x21fc>
    6704:	mvn	r3, #0
    6708:	b	6810 <eval_integer+0x2300>
    670c:	ldr	r3, [fp, #-952]	; 0xfffffc48
    6710:	add	r3, r3, #8
    6714:	sub	r1, fp, #916	; 0x394
    6718:	mov	r2, #520	; 0x208
    671c:	mov	r0, r3
    6720:	bl	0 <memcpy>
    6724:	b	680c <eval_integer+0x22fc>
    6728:	ldr	r3, [fp, #-56]	; 0xffffffc8
    672c:	ldr	r3, [r3, #12]
    6730:	ldrb	r3, [r3]
    6734:	sub	r3, r3, #105	; 0x69
    6738:	str	r3, [fp, #-76]	; 0xffffffb4
    673c:	ldr	r2, [fp, #-952]	; 0xfffffc48
    6740:	ldr	r3, [fp, #-76]	; 0xffffffb4
    6744:	add	r3, r3, #66	; 0x42
    6748:	lsl	r3, r3, #3
    674c:	add	r3, r2, r3
    6750:	ldrd	r2, [r3]
    6754:	strd	r2, [fp, #-84]	; 0xffffffac
    6758:	ldr	r3, [fp, #-56]	; 0xffffffc8
    675c:	ldr	r1, [r3, #16]
    6760:	ldr	r3, [fp, #-76]	; 0xffffffb4
    6764:	add	r3, r3, #66	; 0x42
    6768:	lsl	r3, r3, #3
    676c:	ldr	r2, [fp, #-952]	; 0xfffffc48
    6770:	add	r3, r2, r3
    6774:	mov	r2, r3
    6778:	ldr	r0, [fp, #-952]	; 0xfffffc48
    677c:	bl	4510 <eval_integer>
    6780:	mov	r3, r0
    6784:	cmp	r3, #0
    6788:	beq	6794 <eval_integer+0x2284>
    678c:	mvn	r3, #0
    6790:	b	6810 <eval_integer+0x2300>
    6794:	ldr	r3, [fp, #-56]	; 0xffffffc8
    6798:	ldr	r3, [r3, #20]
    679c:	ldr	r2, [fp, #-960]	; 0xfffffc40
    67a0:	mov	r1, r3
    67a4:	ldr	r0, [fp, #-952]	; 0xfffffc48
    67a8:	bl	4510 <eval_integer>
    67ac:	mov	r3, r0
    67b0:	cmp	r3, #0
    67b4:	beq	67c0 <eval_integer+0x22b0>
    67b8:	mvn	r3, #0
    67bc:	b	6810 <eval_integer+0x2300>
    67c0:	ldr	r2, [fp, #-952]	; 0xfffffc48
    67c4:	ldr	r3, [fp, #-76]	; 0xffffffb4
    67c8:	add	r3, r3, #66	; 0x42
    67cc:	lsl	r3, r3, #3
    67d0:	add	r1, r2, r3
    67d4:	ldrd	r2, [fp, #-84]	; 0xffffffac
    67d8:	strd	r2, [r1]
    67dc:	b	680c <eval_integer+0x22fc>
    67e0:	movw	r3, #0
    67e4:	movt	r3, #0
    67e8:	movw	r2, #2823	; 0xb07
    67ec:	movw	r1, #0
    67f0:	movt	r1, #0
    67f4:	movw	r0, #0
    67f8:	movt	r0, #0
    67fc:	bl	0 <__assert_fail>
    6800:	nop	{0}
    6804:	b	680c <eval_integer+0x22fc>
    6808:	nop	{0}
    680c:	mov	r3, #0
    6810:	mov	r0, r3
    6814:	sub	sp, fp, #28
    6818:	ldrd	r4, [sp]
    681c:	ldrd	r6, [sp, #8]
    6820:	ldrd	r8, [sp, #16]
    6824:	ldr	fp, [sp, #24]
    6828:	add	sp, sp, #28
    682c:	pop	{pc}		; (ldr pc, [sp], #4)
    6830:	.word	0x00000fb8
    6834:	.word	0x00000fa8
    6838:	.word	0x00000f7c
    683c:	.word	0x00000f1c
    6840:	.word	0x00000ec0
    6844:	.word	0x00000e68
    6848:	.word	0x00000e44

0000684c <eval_string>:
    684c:	strd	r4, [sp, #-32]!	; 0xffffffe0
    6850:	strd	r6, [sp, #8]
    6854:	strd	r8, [sp, #16]
    6858:	str	fp, [sp, #24]
    685c:	str	lr, [sp, #28]
    6860:	add	fp, sp, #28
    6864:	sub	sp, sp, #904	; 0x388
    6868:	str	r0, [fp, #-904]	; 0xfffffc78
    686c:	str	r1, [fp, #-908]	; 0xfffffc74
    6870:	str	r2, [fp, #-912]	; 0xfffffc70
    6874:	str	r3, [fp, #-916]	; 0xfffffc6c
    6878:	ldr	r3, [fp, #-908]	; 0xfffffc74
    687c:	ldr	r3, [r3]
    6880:	cmp	r3, #22
    6884:	beq	6898 <eval_string+0x4c>
    6888:	ldr	r3, [fp, #-908]	; 0xfffffc74
    688c:	ldr	r3, [r3]
    6890:	cmp	r3, #21
    6894:	bne	6954 <eval_string+0x108>
    6898:	ldr	r3, [fp, #-912]	; 0xfffffc70
    689c:	mov	r2, #0
    68a0:	str	r2, [r3]
    68a4:	ldr	r3, [fp, #-908]	; 0xfffffc74
    68a8:	ldr	r2, [r3, #12]
    68ac:	ldr	r3, [fp, #-916]	; 0xfffffc6c
    68b0:	str	r2, [r3]
    68b4:	ldr	r3, [fp, #-916]	; 0xfffffc6c
    68b8:	ldr	r3, [r3]
    68bc:	cmp	r3, #0
    68c0:	ble	6940 <eval_string+0xf4>
    68c4:	ldr	r3, [fp, #-916]	; 0xfffffc6c
    68c8:	ldr	r3, [r3]
    68cc:	add	r3, r3, #1
    68d0:	mov	r0, r3
    68d4:	bl	0 <malloc>
    68d8:	mov	r3, r0
    68dc:	mov	r2, r3
    68e0:	ldr	r3, [fp, #4]
    68e4:	str	r2, [r3]
    68e8:	ldr	r3, [fp, #4]
    68ec:	ldr	r3, [r3]
    68f0:	cmp	r3, #0
    68f4:	bne	691c <eval_string+0xd0>
    68f8:	movw	r3, #2845	; 0xb1d
    68fc:	movw	r2, #0
    6900:	movt	r2, #0
    6904:	movw	r1, #0
    6908:	movt	r1, #0
    690c:	mvn	r0, #0
    6910:	bl	0 <coda_set_error>
    6914:	mvn	r3, #0
    6918:	b	8e88 <eval_string+0x263c>
    691c:	ldr	r3, [fp, #4]
    6920:	ldr	r0, [r3]
    6924:	ldr	r3, [fp, #-908]	; 0xfffffc74
    6928:	ldr	r1, [r3, #16]
    692c:	ldr	r3, [fp, #-916]	; 0xfffffc6c
    6930:	ldr	r3, [r3]
    6934:	mov	r2, r3
    6938:	bl	0 <memcpy>
    693c:	b	694c <eval_string+0x100>
    6940:	ldr	r3, [fp, #4]
    6944:	mov	r2, #0
    6948:	str	r2, [r3]
    694c:	mov	r3, #0
    6950:	b	8e88 <eval_string+0x263c>
    6954:	ldr	r3, [fp, #-908]	; 0xfffffc74
    6958:	str	r3, [fp, #-56]	; 0xffffffc8
    695c:	ldr	r3, [fp, #-56]	; 0xffffffc8
    6960:	ldr	r3, [r3]
    6964:	sub	r3, r3, #1
    6968:	cmp	r3, #85	; 0x55
    696c:	ldrls	pc, [pc, r3, lsl #2]
    6970:	b	8e08 <eval_string+0x25bc>
    6974:	.word	0x000070cc
    6978:	.word	0x00008e08
    697c:	.word	0x00007910
    6980:	.word	0x00008e08
    6984:	.word	0x00008e08
    6988:	.word	0x00008e08
    698c:	.word	0x00008e08
    6990:	.word	0x00007ddc
    6994:	.word	0x00007b9c
    6998:	.word	0x00008e08
    699c:	.word	0x00008c88
    69a0:	.word	0x00008e08
    69a4:	.word	0x00008e08
    69a8:	.word	0x00008e08
    69ac:	.word	0x00008e08
    69b0:	.word	0x00006d88
    69b4:	.word	0x00008e08
    69b8:	.word	0x00008e08
    69bc:	.word	0x00008e08
    69c0:	.word	0x00008e08
    69c4:	.word	0x00008e08
    69c8:	.word	0x00008e08
    69cc:	.word	0x00008e08
    69d0:	.word	0x00008e08
    69d4:	.word	0x00008e08
    69d8:	.word	0x00008e08
    69dc:	.word	0x00008e08
    69e0:	.word	0x000080c4
    69e4:	.word	0x00008e08
    69e8:	.word	0x00008e08
    69ec:	.word	0x00008e08
    69f0:	.word	0x00008e08
    69f4:	.word	0x00008e08
    69f8:	.word	0x00008e08
    69fc:	.word	0x00008e08
    6a00:	.word	0x00008e08
    6a04:	.word	0x00008e08
    6a08:	.word	0x00008e08
    6a0c:	.word	0x00008e08
    6a10:	.word	0x00008e08
    6a14:	.word	0x00008e08
    6a18:	.word	0x00008024
    6a1c:	.word	0x00008e08
    6a20:	.word	0x00008e08
    6a24:	.word	0x00008e08
    6a28:	.word	0x00008e08
    6a2c:	.word	0x00008e08
    6a30:	.word	0x00008e08
    6a34:	.word	0x00008e08
    6a38:	.word	0x00008e08
    6a3c:	.word	0x00008e08
    6a40:	.word	0x00008e08
    6a44:	.word	0x00008e08
    6a48:	.word	0x00008e08
    6a4c:	.word	0x000076dc
    6a50:	.word	0x000073b8
    6a54:	.word	0x00007284
    6a58:	.word	0x00008e08
    6a5c:	.word	0x00008e08
    6a60:	.word	0x00008e08
    6a64:	.word	0x00008e08
    6a68:	.word	0x00008e08
    6a6c:	.word	0x00008e08
    6a70:	.word	0x00008e08
    6a74:	.word	0x00008e08
    6a78:	.word	0x00008e08
    6a7c:	.word	0x000086e4
    6a80:	.word	0x00008808
    6a84:	.word	0x00008938
    6a88:	.word	0x00008e08
    6a8c:	.word	0x00008220
    6a90:	.word	0x00008e08
    6a94:	.word	0x00007778
    6a98:	.word	0x00008e08
    6a9c:	.word	0x00006acc
    6aa0:	.word	0x00008a60
    6aa4:	.word	0x000074ec
    6aa8:	.word	0x00008e08
    6aac:	.word	0x00008e08
    6ab0:	.word	0x00007810
    6ab4:	.word	0x00008e08
    6ab8:	.word	0x00008e08
    6abc:	.word	0x00008e08
    6ac0:	.word	0x00008e08
    6ac4:	.word	0x00008e08
    6ac8:	.word	0x00008d48
    6acc:	ldr	r3, [fp, #-56]	; 0xffffffc8
    6ad0:	ldr	r3, [r3, #16]
    6ad4:	ldr	r3, [r3, #4]
    6ad8:	cmp	r3, #4
    6adc:	bne	6cd0 <eval_string+0x484>
    6ae0:	ldr	r3, [fp, #-904]	; 0xfffffc78
    6ae4:	ldr	r3, [r3]
    6ae8:	cmp	r3, #0
    6aec:	bne	6b10 <eval_string+0x2c4>
    6af0:	movw	r3, #0
    6af4:	movt	r3, #0
    6af8:	movw	r2, #2865	; 0xb31
    6afc:	movw	r1, #0
    6b00:	movt	r1, #0
    6b04:	movw	r0, #0
    6b08:	movt	r0, #0
    6b0c:	bl	0 <__assert_fail>
    6b10:	ldr	r3, [fp, #-904]	; 0xfffffc78
    6b14:	sub	r0, fp, #900	; 0x384
    6b18:	add	r3, r3, #8
    6b1c:	mov	r2, #520	; 0x208
    6b20:	mov	r1, r3
    6b24:	bl	0 <memcpy>
    6b28:	ldr	r3, [fp, #-56]	; 0xffffffc8
    6b2c:	ldr	r3, [r3, #16]
    6b30:	mov	r1, r3
    6b34:	ldr	r0, [fp, #-904]	; 0xfffffc78
    6b38:	bl	9334 <eval_cursor>
    6b3c:	mov	r3, r0
    6b40:	cmp	r3, #0
    6b44:	beq	6b50 <eval_string+0x304>
    6b48:	mvn	r3, #0
    6b4c:	b	8e88 <eval_string+0x263c>
    6b50:	ldr	r3, [fp, #-912]	; 0xfffffc70
    6b54:	mov	r2, #0
    6b58:	str	r2, [r3]
    6b5c:	ldr	r3, [fp, #-904]	; 0xfffffc78
    6b60:	add	r3, r3, #8
    6b64:	ldr	r1, [fp, #-916]	; 0xfffffc6c
    6b68:	mov	r0, r3
    6b6c:	bl	0 <coda_cursor_get_string_length>
    6b70:	mov	r3, r0
    6b74:	cmp	r3, #0
    6b78:	beq	6b84 <eval_string+0x338>
    6b7c:	mvn	r3, #0
    6b80:	b	8e88 <eval_string+0x263c>
    6b84:	ldr	r3, [fp, #-56]	; 0xffffffc8
    6b88:	ldr	r3, [r3, #20]
    6b8c:	cmp	r3, #0
    6b90:	beq	6bec <eval_string+0x3a0>
    6b94:	ldr	r3, [fp, #-56]	; 0xffffffc8
    6b98:	ldr	r3, [r3, #20]
    6b9c:	sub	r2, fp, #92	; 0x5c
    6ba0:	mov	r1, r3
    6ba4:	ldr	r0, [fp, #-904]	; 0xfffffc78
    6ba8:	bl	4510 <eval_integer>
    6bac:	mov	r3, r0
    6bb0:	cmp	r3, #0
    6bb4:	beq	6bc0 <eval_string+0x374>
    6bb8:	mvn	r3, #0
    6bbc:	b	8e88 <eval_string+0x263c>
    6bc0:	ldr	r3, [fp, #-916]	; 0xfffffc6c
    6bc4:	ldr	r3, [r3]
    6bc8:	mov	r2, r3
    6bcc:	asr	r3, r2, #31
    6bd0:	ldrd	r0, [fp, #-92]	; 0xffffffa4
    6bd4:	cmp	r0, r2
    6bd8:	sbcs	r3, r1, r3
    6bdc:	bge	6bec <eval_string+0x3a0>
    6be0:	ldrd	r2, [fp, #-92]	; 0xffffffa4
    6be4:	ldr	r3, [fp, #-916]	; 0xfffffc6c
    6be8:	str	r2, [r3]
    6bec:	ldr	r3, [fp, #-916]	; 0xfffffc6c
    6bf0:	ldr	r3, [r3]
    6bf4:	cmp	r3, #0
    6bf8:	ble	6ca8 <eval_string+0x45c>
    6bfc:	ldr	r3, [fp, #-916]	; 0xfffffc6c
    6c00:	ldr	r3, [r3]
    6c04:	add	r3, r3, #1
    6c08:	mov	r0, r3
    6c0c:	bl	0 <malloc>
    6c10:	mov	r3, r0
    6c14:	mov	r2, r3
    6c18:	ldr	r3, [fp, #4]
    6c1c:	str	r2, [r3]
    6c20:	ldr	r3, [fp, #4]
    6c24:	ldr	r3, [r3]
    6c28:	cmp	r3, #0
    6c2c:	bne	6c60 <eval_string+0x414>
    6c30:	ldr	r3, [fp, #-916]	; 0xfffffc6c
    6c34:	ldr	r2, [r3]
    6c38:	movw	r3, #2895	; 0xb4f
    6c3c:	str	r3, [sp]
    6c40:	movw	r3, #0
    6c44:	movt	r3, #0
    6c48:	movw	r1, #0
    6c4c:	movt	r1, #0
    6c50:	mvn	r0, #0
    6c54:	bl	0 <coda_set_error>
    6c58:	mvn	r3, #0
    6c5c:	b	8e88 <eval_string+0x263c>
    6c60:	ldr	r3, [fp, #-904]	; 0xfffffc78
    6c64:	add	r0, r3, #8
    6c68:	ldr	r3, [fp, #4]
    6c6c:	ldr	r1, [r3]
    6c70:	ldr	r3, [fp, #-916]	; 0xfffffc6c
    6c74:	ldr	r3, [r3]
    6c78:	add	r3, r3, #1
    6c7c:	mov	r2, r3
    6c80:	bl	0 <coda_cursor_read_string>
    6c84:	mov	r3, r0
    6c88:	cmp	r3, #0
    6c8c:	beq	6cb4 <eval_string+0x468>
    6c90:	ldr	r3, [fp, #4]
    6c94:	ldr	r3, [r3]
    6c98:	mov	r0, r3
    6c9c:	bl	0 <free>
    6ca0:	mvn	r3, #0
    6ca4:	b	8e88 <eval_string+0x263c>
    6ca8:	ldr	r3, [fp, #4]
    6cac:	mov	r2, #0
    6cb0:	str	r2, [r3]
    6cb4:	ldr	r3, [fp, #-904]	; 0xfffffc78
    6cb8:	add	r3, r3, #8
    6cbc:	sub	r1, fp, #900	; 0x384
    6cc0:	mov	r2, #520	; 0x208
    6cc4:	mov	r0, r3
    6cc8:	bl	0 <memcpy>
    6ccc:	b	8e84 <eval_string+0x2638>
    6cd0:	ldr	r3, [fp, #-56]	; 0xffffffc8
    6cd4:	ldr	r3, [r3, #16]
    6cd8:	sub	r2, fp, #100	; 0x64
    6cdc:	mov	r1, r3
    6ce0:	ldr	r0, [fp, #-904]	; 0xfffffc78
    6ce4:	bl	4510 <eval_integer>
    6ce8:	mov	r3, r0
    6cec:	cmp	r3, #0
    6cf0:	beq	6cfc <eval_string+0x4b0>
    6cf4:	mvn	r3, #0
    6cf8:	b	8e88 <eval_string+0x263c>
    6cfc:	ldrd	r0, [fp, #-100]	; 0xffffff9c
    6d00:	sub	r3, fp, #124	; 0x7c
    6d04:	mov	r2, r3
    6d08:	bl	0 <coda_str64>
    6d0c:	sub	r3, fp, #124	; 0x7c
    6d10:	mov	r0, r3
    6d14:	bl	0 <strdup>
    6d18:	mov	r3, r0
    6d1c:	mov	r2, r3
    6d20:	ldr	r3, [fp, #4]
    6d24:	str	r2, [r3]
    6d28:	ldr	r3, [fp, #4]
    6d2c:	ldr	r3, [r3]
    6d30:	cmp	r3, #0
    6d34:	bne	6d5c <eval_string+0x510>
    6d38:	movw	r3, #2924	; 0xb6c
    6d3c:	movw	r2, #0
    6d40:	movt	r2, #0
    6d44:	movw	r1, #0
    6d48:	movt	r1, #0
    6d4c:	mvn	r0, #0
    6d50:	bl	0 <coda_set_error>
    6d54:	mvn	r3, #0
    6d58:	b	8e88 <eval_string+0x263c>
    6d5c:	ldr	r3, [fp, #-912]	; 0xfffffc70
    6d60:	mov	r2, #0
    6d64:	str	r2, [r3]
    6d68:	sub	r3, fp, #124	; 0x7c
    6d6c:	mov	r0, r3
    6d70:	bl	0 <strlen>
    6d74:	mov	r3, r0
    6d78:	mov	r2, r3
    6d7c:	ldr	r3, [fp, #-916]	; 0xfffffc6c
    6d80:	str	r2, [r3]
    6d84:	b	8e84 <eval_string+0x2638>
    6d88:	mov	r2, #0
    6d8c:	mov	r3, #0
    6d90:	strd	r2, [fp, #-132]	; 0xffffff7c
    6d94:	mvn	r2, #0
    6d98:	mvn	r3, #0
    6d9c:	strd	r2, [fp, #-148]	; 0xffffff6c
    6da0:	ldr	r3, [fp, #-904]	; 0xfffffc78
    6da4:	ldr	r3, [r3]
    6da8:	cmp	r3, #0
    6dac:	bne	6dd0 <eval_string+0x584>
    6db0:	movw	r3, #0
    6db4:	movt	r3, #0
    6db8:	movw	r2, #2938	; 0xb7a
    6dbc:	movw	r1, #0
    6dc0:	movt	r1, #0
    6dc4:	movw	r0, #0
    6dc8:	movt	r0, #0
    6dcc:	bl	0 <__assert_fail>
    6dd0:	ldr	r3, [fp, #-904]	; 0xfffffc78
    6dd4:	sub	r0, fp, #900	; 0x384
    6dd8:	add	r3, r3, #8
    6ddc:	mov	r2, #520	; 0x208
    6de0:	mov	r1, r3
    6de4:	bl	0 <memcpy>
    6de8:	ldr	r3, [fp, #-56]	; 0xffffffc8
    6dec:	ldr	r3, [r3, #16]
    6df0:	mov	r1, r3
    6df4:	ldr	r0, [fp, #-904]	; 0xfffffc78
    6df8:	bl	9334 <eval_cursor>
    6dfc:	mov	r3, r0
    6e00:	cmp	r3, #0
    6e04:	beq	6e10 <eval_string+0x5c4>
    6e08:	mvn	r3, #0
    6e0c:	b	8e88 <eval_string+0x263c>
    6e10:	ldr	r3, [fp, #-56]	; 0xffffffc8
    6e14:	ldr	r3, [r3, #24]
    6e18:	cmp	r3, #0
    6e1c:	beq	6ea8 <eval_string+0x65c>
    6e20:	ldr	r3, [fp, #-56]	; 0xffffffc8
    6e24:	ldr	r3, [r3, #20]
    6e28:	sub	r2, fp, #132	; 0x84
    6e2c:	mov	r1, r3
    6e30:	ldr	r0, [fp, #-904]	; 0xfffffc78
    6e34:	bl	4510 <eval_integer>
    6e38:	mov	r3, r0
    6e3c:	cmp	r3, #0
    6e40:	beq	6e4c <eval_string+0x600>
    6e44:	mvn	r3, #0
    6e48:	b	8e88 <eval_string+0x263c>
    6e4c:	ldr	r3, [fp, #-56]	; 0xffffffc8
    6e50:	ldr	r3, [r3, #24]
    6e54:	sub	r2, fp, #140	; 0x8c
    6e58:	mov	r1, r3
    6e5c:	ldr	r0, [fp, #-904]	; 0xfffffc78
    6e60:	bl	4510 <eval_integer>
    6e64:	mov	r3, r0
    6e68:	cmp	r3, #0
    6e6c:	beq	6e78 <eval_string+0x62c>
    6e70:	mvn	r3, #0
    6e74:	b	8e88 <eval_string+0x263c>
    6e78:	ldrd	r2, [fp, #-140]	; 0xffffff74
    6e7c:	cmp	r2, #1
    6e80:	sbcs	r3, r3, #0
    6e84:	blt	6f40 <eval_string+0x6f4>
    6e88:	ldrd	r0, [fp, #-140]	; 0xffffff74
    6e8c:	mov	r2, #0
    6e90:	mov	r3, #0
    6e94:	lsl	r3, r1, #3
    6e98:	orr	r3, r3, r0, lsr #29
    6e9c:	lsl	r2, r0, #3
    6ea0:	strd	r2, [fp, #-148]	; 0xffffff6c
    6ea4:	b	6f40 <eval_string+0x6f4>
    6ea8:	ldr	r3, [fp, #-56]	; 0xffffffc8
    6eac:	ldr	r3, [r3, #20]
    6eb0:	cmp	r3, #0
    6eb4:	beq	6f14 <eval_string+0x6c8>
    6eb8:	ldr	r3, [fp, #-56]	; 0xffffffc8
    6ebc:	ldr	r3, [r3, #20]
    6ec0:	sub	r2, fp, #140	; 0x8c
    6ec4:	mov	r1, r3
    6ec8:	ldr	r0, [fp, #-904]	; 0xfffffc78
    6ecc:	bl	4510 <eval_integer>
    6ed0:	mov	r3, r0
    6ed4:	cmp	r3, #0
    6ed8:	beq	6ee4 <eval_string+0x698>
    6edc:	mvn	r3, #0
    6ee0:	b	8e88 <eval_string+0x263c>
    6ee4:	ldrd	r2, [fp, #-140]	; 0xffffff74
    6ee8:	cmp	r2, #1
    6eec:	sbcs	r3, r3, #0
    6ef0:	blt	6f40 <eval_string+0x6f4>
    6ef4:	ldrd	r0, [fp, #-140]	; 0xffffff74
    6ef8:	mov	r2, #0
    6efc:	mov	r3, #0
    6f00:	lsl	r3, r1, #3
    6f04:	orr	r3, r3, r0, lsr #29
    6f08:	lsl	r2, r0, #3
    6f0c:	strd	r2, [fp, #-148]	; 0xffffff6c
    6f10:	b	6f40 <eval_string+0x6f4>
    6f14:	ldr	r3, [fp, #-904]	; 0xfffffc78
    6f18:	add	r3, r3, #8
    6f1c:	sub	r2, fp, #148	; 0x94
    6f20:	mov	r1, r2
    6f24:	mov	r0, r3
    6f28:	bl	0 <coda_cursor_get_bit_size>
    6f2c:	mov	r3, r0
    6f30:	cmp	r3, #0
    6f34:	beq	6f40 <eval_string+0x6f4>
    6f38:	mvn	r3, #0
    6f3c:	b	8e88 <eval_string+0x263c>
    6f40:	ldrd	r2, [fp, #-148]	; 0xffffff6c
    6f44:	cmp	r2, #0
    6f48:	sbcs	r3, r3, #0
    6f4c:	bge	6f68 <eval_string+0x71c>
    6f50:	movw	r1, #0
    6f54:	movt	r1, #0
    6f58:	mvn	r0, #400	; 0x190
    6f5c:	bl	0 <coda_set_error>
    6f60:	mvn	r3, #0
    6f64:	b	8e88 <eval_string+0x263c>
    6f68:	ldrd	r0, [fp, #-148]	; 0xffffff6c
    6f6c:	mov	r2, #0
    6f70:	mov	r3, #0
    6f74:	lsr	r2, r0, #3
    6f78:	orr	r2, r2, r1, lsl #29
    6f7c:	asr	r3, r1, #3
    6f80:	ldrd	r0, [fp, #-148]	; 0xffffff6c
    6f84:	mov	r8, #7
    6f88:	mov	r9, #0
    6f8c:	and	r6, r0, r8
    6f90:	and	r7, r1, r9
    6f94:	orrs	r1, r6, r7
    6f98:	beq	6fa8 <eval_string+0x75c>
    6f9c:	mov	r0, #1
    6fa0:	mov	r1, #0
    6fa4:	b	6fb0 <eval_string+0x764>
    6fa8:	mov	r0, #0
    6fac:	mov	r1, #0
    6fb0:	adds	r4, r0, r2
    6fb4:	adc	r5, r1, r3
    6fb8:	strd	r4, [fp, #-140]	; 0xffffff74
    6fbc:	ldr	r3, [fp, #-912]	; 0xfffffc70
    6fc0:	mov	r2, #0
    6fc4:	str	r2, [r3]
    6fc8:	ldrd	r2, [fp, #-140]	; 0xffffff74
    6fcc:	ldr	r3, [fp, #-916]	; 0xfffffc6c
    6fd0:	str	r2, [r3]
    6fd4:	ldrd	r2, [fp, #-140]	; 0xffffff74
    6fd8:	cmp	r2, #1
    6fdc:	sbcs	r3, r3, #0
    6fe0:	blt	70a4 <eval_string+0x858>
    6fe4:	ldrd	r2, [fp, #-140]	; 0xffffff74
    6fe8:	mov	r3, r2
    6fec:	add	r3, r3, #1
    6ff0:	mov	r0, r3
    6ff4:	bl	0 <malloc>
    6ff8:	mov	r3, r0
    6ffc:	mov	r2, r3
    7000:	ldr	r3, [fp, #4]
    7004:	str	r2, [r3]
    7008:	ldr	r3, [fp, #4]
    700c:	ldr	r3, [r3]
    7010:	cmp	r3, #0
    7014:	bne	7044 <eval_string+0x7f8>
    7018:	ldrd	r2, [fp, #-140]	; 0xffffff74
    701c:	movw	r3, #2991	; 0xbaf
    7020:	str	r3, [sp]
    7024:	movw	r3, #0
    7028:	movt	r3, #0
    702c:	movw	r1, #0
    7030:	movt	r1, #0
    7034:	mvn	r0, #0
    7038:	bl	0 <coda_set_error>
    703c:	mvn	r3, #0
    7040:	b	8e88 <eval_string+0x263c>
    7044:	ldr	r3, [fp, #-904]	; 0xfffffc78
    7048:	add	ip, r3, #8
    704c:	ldr	r3, [fp, #4]
    7050:	ldr	lr, [r3]
    7054:	ldrd	r0, [fp, #-132]	; 0xffffff7c
    7058:	mov	r2, #0
    705c:	mov	r3, #0
    7060:	lsl	r3, r1, #3
    7064:	orr	r3, r3, r0, lsr #29
    7068:	lsl	r2, r0, #3
    706c:	ldrd	r0, [fp, #-148]	; 0xffffff6c
    7070:	strd	r0, [sp]
    7074:	mov	r1, lr
    7078:	mov	r0, ip
    707c:	bl	0 <coda_cursor_read_bits>
    7080:	mov	r3, r0
    7084:	cmp	r3, #0
    7088:	beq	70b0 <eval_string+0x864>
    708c:	ldr	r3, [fp, #4]
    7090:	ldr	r3, [r3]
    7094:	mov	r0, r3
    7098:	bl	0 <free>
    709c:	mvn	r3, #0
    70a0:	b	8e88 <eval_string+0x263c>
    70a4:	ldr	r3, [fp, #4]
    70a8:	mov	r2, #0
    70ac:	str	r2, [r3]
    70b0:	ldr	r3, [fp, #-904]	; 0xfffffc78
    70b4:	add	r3, r3, #8
    70b8:	sub	r1, fp, #900	; 0x384
    70bc:	mov	r2, #520	; 0x208
    70c0:	mov	r0, r3
    70c4:	bl	0 <memcpy>
    70c8:	b	8e84 <eval_string+0x2638>
    70cc:	ldr	r3, [fp, #-56]	; 0xffffffc8
    70d0:	ldr	r1, [r3, #16]
    70d4:	sub	r0, fp, #160	; 0xa0
    70d8:	sub	r2, fp, #152	; 0x98
    70dc:	sub	r3, fp, #168	; 0xa8
    70e0:	str	r3, [sp]
    70e4:	mov	r3, r0
    70e8:	ldr	r0, [fp, #-904]	; 0xfffffc78
    70ec:	bl	684c <eval_string>
    70f0:	mov	r3, r0
    70f4:	cmp	r3, #0
    70f8:	beq	7104 <eval_string+0x8b8>
    70fc:	mvn	r3, #0
    7100:	b	8e88 <eval_string+0x263c>
    7104:	ldr	r3, [fp, #-56]	; 0xffffffc8
    7108:	ldr	r1, [r3, #20]
    710c:	sub	r0, fp, #164	; 0xa4
    7110:	sub	r2, fp, #156	; 0x9c
    7114:	sub	r3, fp, #172	; 0xac
    7118:	str	r3, [sp]
    711c:	mov	r3, r0
    7120:	ldr	r0, [fp, #-904]	; 0xfffffc78
    7124:	bl	684c <eval_string>
    7128:	mov	r3, r0
    712c:	cmp	r3, #0
    7130:	beq	7148 <eval_string+0x8fc>
    7134:	ldr	r3, [fp, #-168]	; 0xffffff58
    7138:	mov	r0, r3
    713c:	bl	0 <free>
    7140:	mvn	r3, #0
    7144:	b	8e88 <eval_string+0x263c>
    7148:	ldr	r3, [fp, #-912]	; 0xfffffc70
    714c:	mov	r2, #0
    7150:	str	r2, [r3]
    7154:	ldr	r2, [fp, #-160]	; 0xffffff60
    7158:	ldr	r3, [fp, #-164]	; 0xffffff5c
    715c:	add	r2, r2, r3
    7160:	ldr	r3, [fp, #-916]	; 0xfffffc6c
    7164:	str	r2, [r3]
    7168:	ldr	r3, [fp, #-916]	; 0xfffffc6c
    716c:	ldr	r3, [r3]
    7170:	cmp	r3, #0
    7174:	ble	7244 <eval_string+0x9f8>
    7178:	ldr	r3, [fp, #-916]	; 0xfffffc6c
    717c:	ldr	r3, [r3]
    7180:	add	r3, r3, #1
    7184:	mov	r0, r3
    7188:	bl	0 <malloc>
    718c:	mov	r3, r0
    7190:	mov	r2, r3
    7194:	ldr	r3, [fp, #4]
    7198:	str	r2, [r3]
    719c:	ldr	r3, [fp, #4]
    71a0:	ldr	r3, [r3]
    71a4:	cmp	r3, #0
    71a8:	bne	71e0 <eval_string+0x994>
    71ac:	ldr	r3, [fp, #-916]	; 0xfffffc6c
    71b0:	ldr	r3, [r3]
    71b4:	add	r2, r3, #1
    71b8:	movw	r3, #3031	; 0xbd7
    71bc:	str	r3, [sp]
    71c0:	movw	r3, #0
    71c4:	movt	r3, #0
    71c8:	movw	r1, #0
    71cc:	movt	r1, #0
    71d0:	mvn	r0, #0
    71d4:	bl	0 <coda_set_error>
    71d8:	mvn	r3, #0
    71dc:	b	8e88 <eval_string+0x263c>
    71e0:	ldr	r3, [fp, #-160]	; 0xffffff60
    71e4:	cmp	r3, #0
    71e8:	ble	720c <eval_string+0x9c0>
    71ec:	ldr	r3, [fp, #4]
    71f0:	ldr	r0, [r3]
    71f4:	ldr	r3, [fp, #-168]	; 0xffffff58
    71f8:	ldr	r2, [fp, #-152]	; 0xffffff68
    71fc:	add	r3, r3, r2
    7200:	ldr	r2, [fp, #-160]	; 0xffffff60
    7204:	mov	r1, r3
    7208:	bl	0 <memcpy>
    720c:	ldr	r3, [fp, #-164]	; 0xffffff5c
    7210:	cmp	r3, #0
    7214:	ble	7250 <eval_string+0xa04>
    7218:	ldr	r3, [fp, #4]
    721c:	ldr	r3, [r3]
    7220:	ldr	r2, [fp, #-160]	; 0xffffff60
    7224:	add	r0, r3, r2
    7228:	ldr	r3, [fp, #-172]	; 0xffffff54
    722c:	ldr	r2, [fp, #-156]	; 0xffffff64
    7230:	add	r3, r3, r2
    7234:	ldr	r2, [fp, #-164]	; 0xffffff5c
    7238:	mov	r1, r3
    723c:	bl	0 <memcpy>
    7240:	b	7250 <eval_string+0xa04>
    7244:	ldr	r3, [fp, #4]
    7248:	mov	r2, #0
    724c:	str	r2, [r3]
    7250:	ldr	r3, [fp, #-160]	; 0xffffff60
    7254:	cmp	r3, #0
    7258:	ble	7268 <eval_string+0xa1c>
    725c:	ldr	r3, [fp, #-168]	; 0xffffff58
    7260:	mov	r0, r3
    7264:	bl	0 <free>
    7268:	ldr	r3, [fp, #-164]	; 0xffffff5c
    726c:	cmp	r3, #0
    7270:	ble	8e28 <eval_string+0x25dc>
    7274:	ldr	r3, [fp, #-172]	; 0xffffff54
    7278:	mov	r0, r3
    727c:	bl	0 <free>
    7280:	b	8e28 <eval_string+0x25dc>
    7284:	ldr	r3, [fp, #-56]	; 0xffffffc8
    7288:	ldr	r1, [r3, #16]
    728c:	sub	r0, fp, #184	; 0xb8
    7290:	sub	r2, fp, #176	; 0xb0
    7294:	sub	r3, fp, #192	; 0xc0
    7298:	str	r3, [sp]
    729c:	mov	r3, r0
    72a0:	ldr	r0, [fp, #-904]	; 0xfffffc78
    72a4:	bl	684c <eval_string>
    72a8:	mov	r3, r0
    72ac:	cmp	r3, #0
    72b0:	beq	72bc <eval_string+0xa70>
    72b4:	mvn	r3, #0
    72b8:	b	8e88 <eval_string+0x263c>
    72bc:	ldr	r3, [fp, #-56]	; 0xffffffc8
    72c0:	ldr	r1, [r3, #20]
    72c4:	sub	r0, fp, #188	; 0xbc
    72c8:	sub	r2, fp, #180	; 0xb4
    72cc:	sub	r3, fp, #196	; 0xc4
    72d0:	str	r3, [sp]
    72d4:	mov	r3, r0
    72d8:	ldr	r0, [fp, #-904]	; 0xfffffc78
    72dc:	bl	684c <eval_string>
    72e0:	mov	r3, r0
    72e4:	cmp	r3, #0
    72e8:	beq	7300 <eval_string+0xab4>
    72ec:	ldr	r3, [fp, #-192]	; 0xffffff40
    72f0:	mov	r0, r3
    72f4:	bl	0 <free>
    72f8:	mvn	r3, #0
    72fc:	b	8e88 <eval_string+0x263c>
    7300:	ldr	r0, [fp, #-176]	; 0xffffff50
    7304:	ldr	r1, [fp, #-184]	; 0xffffff48
    7308:	ldr	ip, [fp, #-192]	; 0xffffff40
    730c:	ldr	lr, [fp, #-180]	; 0xffffff4c
    7310:	ldr	r3, [fp, #-188]	; 0xffffff44
    7314:	ldr	r2, [fp, #-196]	; 0xffffff3c
    7318:	str	r2, [sp, #4]
    731c:	str	r3, [sp]
    7320:	mov	r3, lr
    7324:	mov	r2, ip
    7328:	bl	110 <compare_strings>
    732c:	mov	r3, r0
    7330:	cmp	r3, #0
    7334:	bgt	7378 <eval_string+0xb2c>
    7338:	ldr	r2, [fp, #-176]	; 0xffffff50
    733c:	ldr	r3, [fp, #-912]	; 0xfffffc70
    7340:	str	r2, [r3]
    7344:	ldr	r2, [fp, #-184]	; 0xffffff48
    7348:	ldr	r3, [fp, #-916]	; 0xfffffc6c
    734c:	str	r2, [r3]
    7350:	ldr	r2, [fp, #-192]	; 0xffffff40
    7354:	ldr	r3, [fp, #4]
    7358:	str	r2, [r3]
    735c:	ldr	r3, [fp, #-188]	; 0xffffff44
    7360:	cmp	r3, #0
    7364:	ble	8e30 <eval_string+0x25e4>
    7368:	ldr	r3, [fp, #-196]	; 0xffffff3c
    736c:	mov	r0, r3
    7370:	bl	0 <free>
    7374:	b	8e30 <eval_string+0x25e4>
    7378:	ldr	r2, [fp, #-180]	; 0xffffff4c
    737c:	ldr	r3, [fp, #-912]	; 0xfffffc70
    7380:	str	r2, [r3]
    7384:	ldr	r2, [fp, #-188]	; 0xffffff44
    7388:	ldr	r3, [fp, #-916]	; 0xfffffc6c
    738c:	str	r2, [r3]
    7390:	ldr	r2, [fp, #-196]	; 0xffffff3c
    7394:	ldr	r3, [fp, #4]
    7398:	str	r2, [r3]
    739c:	ldr	r3, [fp, #-184]	; 0xffffff48
    73a0:	cmp	r3, #0
    73a4:	ble	8e30 <eval_string+0x25e4>
    73a8:	ldr	r3, [fp, #-192]	; 0xffffff40
    73ac:	mov	r0, r3
    73b0:	bl	0 <free>
    73b4:	b	8e30 <eval_string+0x25e4>
    73b8:	ldr	r3, [fp, #-56]	; 0xffffffc8
    73bc:	ldr	r1, [r3, #16]
    73c0:	sub	r0, fp, #208	; 0xd0
    73c4:	sub	r2, fp, #200	; 0xc8
    73c8:	sub	r3, fp, #216	; 0xd8
    73cc:	str	r3, [sp]
    73d0:	mov	r3, r0
    73d4:	ldr	r0, [fp, #-904]	; 0xfffffc78
    73d8:	bl	684c <eval_string>
    73dc:	mov	r3, r0
    73e0:	cmp	r3, #0
    73e4:	beq	73f0 <eval_string+0xba4>
    73e8:	mvn	r3, #0
    73ec:	b	8e88 <eval_string+0x263c>
    73f0:	ldr	r3, [fp, #-56]	; 0xffffffc8
    73f4:	ldr	r1, [r3, #20]
    73f8:	sub	r0, fp, #212	; 0xd4
    73fc:	sub	r2, fp, #204	; 0xcc
    7400:	sub	r3, fp, #220	; 0xdc
    7404:	str	r3, [sp]
    7408:	mov	r3, r0
    740c:	ldr	r0, [fp, #-904]	; 0xfffffc78
    7410:	bl	684c <eval_string>
    7414:	mov	r3, r0
    7418:	cmp	r3, #0
    741c:	beq	7434 <eval_string+0xbe8>
    7420:	ldr	r3, [fp, #-216]	; 0xffffff28
    7424:	mov	r0, r3
    7428:	bl	0 <free>
    742c:	mvn	r3, #0
    7430:	b	8e88 <eval_string+0x263c>
    7434:	ldr	r0, [fp, #-200]	; 0xffffff38
    7438:	ldr	r1, [fp, #-208]	; 0xffffff30
    743c:	ldr	ip, [fp, #-216]	; 0xffffff28
    7440:	ldr	lr, [fp, #-204]	; 0xffffff34
    7444:	ldr	r3, [fp, #-212]	; 0xffffff2c
    7448:	ldr	r2, [fp, #-220]	; 0xffffff24
    744c:	str	r2, [sp, #4]
    7450:	str	r3, [sp]
    7454:	mov	r3, lr
    7458:	mov	r2, ip
    745c:	bl	110 <compare_strings>
    7460:	mov	r3, r0
    7464:	cmp	r3, #0
    7468:	blt	74ac <eval_string+0xc60>
    746c:	ldr	r2, [fp, #-200]	; 0xffffff38
    7470:	ldr	r3, [fp, #-912]	; 0xfffffc70
    7474:	str	r2, [r3]
    7478:	ldr	r2, [fp, #-208]	; 0xffffff30
    747c:	ldr	r3, [fp, #-916]	; 0xfffffc6c
    7480:	str	r2, [r3]
    7484:	ldr	r2, [fp, #-216]	; 0xffffff28
    7488:	ldr	r3, [fp, #4]
    748c:	str	r2, [r3]
    7490:	ldr	r3, [fp, #-212]	; 0xffffff2c
    7494:	cmp	r3, #0
    7498:	ble	8e38 <eval_string+0x25ec>
    749c:	ldr	r3, [fp, #-220]	; 0xffffff24
    74a0:	mov	r0, r3
    74a4:	bl	0 <free>
    74a8:	b	8e38 <eval_string+0x25ec>
    74ac:	ldr	r2, [fp, #-204]	; 0xffffff34
    74b0:	ldr	r3, [fp, #-912]	; 0xfffffc70
    74b4:	str	r2, [r3]
    74b8:	ldr	r2, [fp, #-212]	; 0xffffff2c
    74bc:	ldr	r3, [fp, #-916]	; 0xfffffc6c
    74c0:	str	r2, [r3]
    74c4:	ldr	r2, [fp, #-220]	; 0xffffff24
    74c8:	ldr	r3, [fp, #4]
    74cc:	str	r2, [r3]
    74d0:	ldr	r3, [fp, #-208]	; 0xffffff30
    74d4:	cmp	r3, #0
    74d8:	ble	8e38 <eval_string+0x25ec>
    74dc:	ldr	r3, [fp, #-216]	; 0xffffff28
    74e0:	mov	r0, r3
    74e4:	bl	0 <free>
    74e8:	b	8e38 <eval_string+0x25ec>
    74ec:	ldr	r3, [fp, #-56]	; 0xffffffc8
    74f0:	ldr	r3, [r3, #16]
    74f4:	sub	r2, fp, #228	; 0xe4
    74f8:	mov	r1, r3
    74fc:	ldr	r0, [fp, #-904]	; 0xfffffc78
    7500:	bl	4510 <eval_integer>
    7504:	mov	r3, r0
    7508:	cmp	r3, #0
    750c:	beq	7518 <eval_string+0xccc>
    7510:	mvn	r3, #0
    7514:	b	8e88 <eval_string+0x263c>
    7518:	ldrd	r2, [fp, #-228]	; 0xffffff1c
    751c:	cmp	r2, #0
    7520:	sbcs	r3, r3, #0
    7524:	bge	7540 <eval_string+0xcf4>
    7528:	movw	r1, #0
    752c:	movt	r1, #0
    7530:	mvn	r0, #400	; 0x190
    7534:	bl	0 <coda_set_error>
    7538:	mvn	r3, #0
    753c:	b	8e88 <eval_string+0x263c>
    7540:	ldr	r3, [fp, #-56]	; 0xffffffc8
    7544:	ldr	r3, [r3, #20]
    7548:	sub	r2, fp, #236	; 0xec
    754c:	mov	r1, r3
    7550:	ldr	r0, [fp, #-904]	; 0xfffffc78
    7554:	bl	4510 <eval_integer>
    7558:	mov	r3, r0
    755c:	cmp	r3, #0
    7560:	beq	756c <eval_string+0xd20>
    7564:	mvn	r3, #0
    7568:	b	8e88 <eval_string+0x263c>
    756c:	ldrd	r2, [fp, #-236]	; 0xffffff14
    7570:	orrs	r3, r2, r3
    7574:	bne	75a4 <eval_string+0xd58>
    7578:	ldr	r3, [fp, #-912]	; 0xfffffc70
    757c:	mov	r2, #0
    7580:	str	r2, [r3]
    7584:	ldr	r3, [fp, #-916]	; 0xfffffc6c
    7588:	mov	r2, #0
    758c:	str	r2, [r3]
    7590:	ldr	r3, [fp, #4]
    7594:	mov	r2, #0
    7598:	str	r2, [r3]
    759c:	mov	r3, #0
    75a0:	b	8e88 <eval_string+0x263c>
    75a4:	ldrd	r2, [fp, #-236]	; 0xffffff14
    75a8:	cmp	r2, #0
    75ac:	sbcs	r3, r3, #0
    75b0:	bge	75cc <eval_string+0xd80>
    75b4:	movw	r1, #0
    75b8:	movt	r1, #0
    75bc:	mvn	r0, #400	; 0x190
    75c0:	bl	0 <coda_set_error>
    75c4:	mvn	r3, #0
    75c8:	b	8e88 <eval_string+0x263c>
    75cc:	ldr	r3, [fp, #-56]	; 0xffffffc8
    75d0:	ldr	r1, [r3, #24]
    75d4:	ldr	r3, [fp, #4]
    75d8:	str	r3, [sp]
    75dc:	ldr	r3, [fp, #-916]	; 0xfffffc6c
    75e0:	ldr	r2, [fp, #-912]	; 0xfffffc70
    75e4:	ldr	r0, [fp, #-904]	; 0xfffffc78
    75e8:	bl	684c <eval_string>
    75ec:	mov	r3, r0
    75f0:	cmp	r3, #0
    75f4:	beq	7600 <eval_string+0xdb4>
    75f8:	mvn	r3, #0
    75fc:	b	8e88 <eval_string+0x263c>
    7600:	ldr	r3, [fp, #-916]	; 0xfffffc6c
    7604:	ldr	r3, [r3]
    7608:	cmp	r3, #0
    760c:	bne	7618 <eval_string+0xdcc>
    7610:	mov	r3, #0
    7614:	b	8e88 <eval_string+0x263c>
    7618:	ldr	r3, [fp, #-916]	; 0xfffffc6c
    761c:	ldr	r3, [r3]
    7620:	mov	r2, r3
    7624:	asr	r3, r2, #31
    7628:	ldrd	r0, [fp, #-228]	; 0xffffff1c
    762c:	cmp	r0, r2
    7630:	sbcs	r3, r1, r3
    7634:	blt	7674 <eval_string+0xe28>
    7638:	ldr	r3, [fp, #-912]	; 0xfffffc70
    763c:	mov	r2, #0
    7640:	str	r2, [r3]
    7644:	ldr	r3, [fp, #-916]	; 0xfffffc6c
    7648:	mov	r2, #0
    764c:	str	r2, [r3]
    7650:	ldr	r3, [fp, #4]
    7654:	ldr	r3, [r3]
    7658:	mov	r0, r3
    765c:	bl	0 <free>
    7660:	ldr	r3, [fp, #4]
    7664:	mov	r2, #0
    7668:	str	r2, [r3]
    766c:	mov	r3, #0
    7670:	b	8e88 <eval_string+0x263c>
    7674:	ldr	r3, [fp, #-912]	; 0xfffffc70
    7678:	ldr	r1, [r3]
    767c:	ldrd	r2, [fp, #-228]	; 0xffffff1c
    7680:	mov	r3, r2
    7684:	add	r2, r1, r3
    7688:	ldr	r3, [fp, #-912]	; 0xfffffc70
    768c:	str	r2, [r3]
    7690:	ldr	r3, [fp, #-916]	; 0xfffffc6c
    7694:	ldr	r1, [r3]
    7698:	ldrd	r2, [fp, #-228]	; 0xffffff1c
    769c:	mov	r3, r2
    76a0:	sub	r2, r1, r3
    76a4:	ldr	r3, [fp, #-916]	; 0xfffffc6c
    76a8:	str	r2, [r3]
    76ac:	ldr	r3, [fp, #-916]	; 0xfffffc6c
    76b0:	ldr	r3, [r3]
    76b4:	mov	r2, r3
    76b8:	asr	r3, r2, #31
    76bc:	ldrd	r0, [fp, #-236]	; 0xffffff14
    76c0:	cmp	r0, r2
    76c4:	sbcs	r3, r1, r3
    76c8:	bge	8e40 <eval_string+0x25f4>
    76cc:	ldrd	r2, [fp, #-236]	; 0xffffff14
    76d0:	ldr	r3, [fp, #-916]	; 0xfffffc6c
    76d4:	str	r2, [r3]
    76d8:	b	8e40 <eval_string+0x25f4>
    76dc:	ldr	r3, [fp, #-56]	; 0xffffffc8
    76e0:	ldr	r1, [r3, #16]
    76e4:	ldr	r3, [fp, #4]
    76e8:	str	r3, [sp]
    76ec:	ldr	r3, [fp, #-916]	; 0xfffffc6c
    76f0:	ldr	r2, [fp, #-912]	; 0xfffffc70
    76f4:	ldr	r0, [fp, #-904]	; 0xfffffc78
    76f8:	bl	684c <eval_string>
    76fc:	mov	r3, r0
    7700:	cmp	r3, #0
    7704:	beq	7738 <eval_string+0xeec>
    7708:	mvn	r3, #0
    770c:	b	8e88 <eval_string+0x263c>
    7710:	ldr	r3, [fp, #-916]	; 0xfffffc6c
    7714:	ldr	r3, [r3]
    7718:	sub	r2, r3, #1
    771c:	ldr	r3, [fp, #-916]	; 0xfffffc6c
    7720:	str	r2, [r3]
    7724:	ldr	r3, [fp, #-912]	; 0xfffffc70
    7728:	ldr	r3, [r3]
    772c:	add	r2, r3, #1
    7730:	ldr	r3, [fp, #-912]	; 0xfffffc70
    7734:	str	r2, [r3]
    7738:	ldr	r3, [fp, #-916]	; 0xfffffc6c
    773c:	ldr	r3, [r3]
    7740:	cmp	r3, #0
    7744:	ble	8e48 <eval_string+0x25fc>
    7748:	ldr	r3, [fp, #4]
    774c:	ldr	r3, [r3]
    7750:	ldr	r2, [fp, #-912]	; 0xfffffc70
    7754:	ldr	r2, [r2]
    7758:	add	r3, r3, r2
    775c:	ldrb	r3, [r3]
    7760:	mov	r0, r3
    7764:	bl	b0 <iswhitespace>
    7768:	mov	r3, r0
    776c:	cmp	r3, #0
    7770:	bne	7710 <eval_string+0xec4>
    7774:	b	8e48 <eval_string+0x25fc>
    7778:	ldr	r3, [fp, #-56]	; 0xffffffc8
    777c:	ldr	r1, [r3, #16]
    7780:	ldr	r3, [fp, #4]
    7784:	str	r3, [sp]
    7788:	ldr	r3, [fp, #-916]	; 0xfffffc6c
    778c:	ldr	r2, [fp, #-912]	; 0xfffffc70
    7790:	ldr	r0, [fp, #-904]	; 0xfffffc78
    7794:	bl	684c <eval_string>
    7798:	mov	r3, r0
    779c:	cmp	r3, #0
    77a0:	beq	77c0 <eval_string+0xf74>
    77a4:	mvn	r3, #0
    77a8:	b	8e88 <eval_string+0x263c>
    77ac:	ldr	r3, [fp, #-916]	; 0xfffffc6c
    77b0:	ldr	r3, [r3]
    77b4:	sub	r2, r3, #1
    77b8:	ldr	r3, [fp, #-916]	; 0xfffffc6c
    77bc:	str	r2, [r3]
    77c0:	ldr	r3, [fp, #-916]	; 0xfffffc6c
    77c4:	ldr	r3, [r3]
    77c8:	cmp	r3, #0
    77cc:	ble	8e50 <eval_string+0x2604>
    77d0:	ldr	r3, [fp, #4]
    77d4:	ldr	r2, [r3]
    77d8:	ldr	r3, [fp, #-912]	; 0xfffffc70
    77dc:	ldr	r1, [r3]
    77e0:	ldr	r3, [fp, #-916]	; 0xfffffc6c
    77e4:	ldr	r3, [r3]
    77e8:	add	r3, r1, r3
    77ec:	sub	r3, r3, #1
    77f0:	add	r3, r2, r3
    77f4:	ldrb	r3, [r3]
    77f8:	mov	r0, r3
    77fc:	bl	b0 <iswhitespace>
    7800:	mov	r3, r0
    7804:	cmp	r3, #0
    7808:	bne	77ac <eval_string+0xf60>
    780c:	b	8e50 <eval_string+0x2604>
    7810:	ldr	r3, [fp, #-56]	; 0xffffffc8
    7814:	ldr	r1, [r3, #16]
    7818:	ldr	r3, [fp, #4]
    781c:	str	r3, [sp]
    7820:	ldr	r3, [fp, #-916]	; 0xfffffc6c
    7824:	ldr	r2, [fp, #-912]	; 0xfffffc70
    7828:	ldr	r0, [fp, #-904]	; 0xfffffc78
    782c:	bl	684c <eval_string>
    7830:	mov	r3, r0
    7834:	cmp	r3, #0
    7838:	beq	786c <eval_string+0x1020>
    783c:	mvn	r3, #0
    7840:	b	8e88 <eval_string+0x263c>
    7844:	ldr	r3, [fp, #-916]	; 0xfffffc6c
    7848:	ldr	r3, [r3]
    784c:	sub	r2, r3, #1
    7850:	ldr	r3, [fp, #-916]	; 0xfffffc6c
    7854:	str	r2, [r3]
    7858:	ldr	r3, [fp, #-912]	; 0xfffffc70
    785c:	ldr	r3, [r3]
    7860:	add	r2, r3, #1
    7864:	ldr	r3, [fp, #-912]	; 0xfffffc70
    7868:	str	r2, [r3]
    786c:	ldr	r3, [fp, #-916]	; 0xfffffc6c
    7870:	ldr	r3, [r3]
    7874:	cmp	r3, #0
    7878:	ble	78c0 <eval_string+0x1074>
    787c:	ldr	r3, [fp, #4]
    7880:	ldr	r3, [r3]
    7884:	ldr	r2, [fp, #-912]	; 0xfffffc70
    7888:	ldr	r2, [r2]
    788c:	add	r3, r3, r2
    7890:	ldrb	r3, [r3]
    7894:	mov	r0, r3
    7898:	bl	b0 <iswhitespace>
    789c:	mov	r3, r0
    78a0:	cmp	r3, #0
    78a4:	bne	7844 <eval_string+0xff8>
    78a8:	b	78c0 <eval_string+0x1074>
    78ac:	ldr	r3, [fp, #-916]	; 0xfffffc6c
    78b0:	ldr	r3, [r3]
    78b4:	sub	r2, r3, #1
    78b8:	ldr	r3, [fp, #-916]	; 0xfffffc6c
    78bc:	str	r2, [r3]
    78c0:	ldr	r3, [fp, #-916]	; 0xfffffc6c
    78c4:	ldr	r3, [r3]
    78c8:	cmp	r3, #0
    78cc:	ble	8e58 <eval_string+0x260c>
    78d0:	ldr	r3, [fp, #4]
    78d4:	ldr	r2, [r3]
    78d8:	ldr	r3, [fp, #-912]	; 0xfffffc70
    78dc:	ldr	r1, [r3]
    78e0:	ldr	r3, [fp, #-916]	; 0xfffffc6c
    78e4:	ldr	r3, [r3]
    78e8:	add	r3, r1, r3
    78ec:	sub	r3, r3, #1
    78f0:	add	r3, r2, r3
    78f4:	ldrb	r3, [r3]
    78f8:	mov	r0, r3
    78fc:	bl	b0 <iswhitespace>
    7900:	mov	r3, r0
    7904:	cmp	r3, #0
    7908:	bne	78ac <eval_string+0x1060>
    790c:	b	8e58 <eval_string+0x260c>
    7910:	ldr	r3, [fp, #-904]	; 0xfffffc78
    7914:	ldr	r3, [r3]
    7918:	cmp	r3, #0
    791c:	bne	7940 <eval_string+0x10f4>
    7920:	movw	r3, #0
    7924:	movt	r3, #0
    7928:	movw	r2, #3234	; 0xca2
    792c:	movw	r1, #0
    7930:	movt	r1, #0
    7934:	movw	r0, #0
    7938:	movt	r0, #0
    793c:	bl	0 <__assert_fail>
    7940:	ldr	r3, [fp, #-904]	; 0xfffffc78
    7944:	sub	r0, fp, #900	; 0x384
    7948:	add	r3, r3, #8
    794c:	mov	r2, #520	; 0x208
    7950:	mov	r1, r3
    7954:	bl	0 <memcpy>
    7958:	ldr	r3, [fp, #-56]	; 0xffffffc8
    795c:	ldr	r3, [r3, #16]
    7960:	mov	r1, r3
    7964:	ldr	r0, [fp, #-904]	; 0xfffffc78
    7968:	bl	9334 <eval_cursor>
    796c:	mov	r3, r0
    7970:	cmp	r3, #0
    7974:	beq	7980 <eval_string+0x1134>
    7978:	mvn	r3, #0
    797c:	b	8e88 <eval_string+0x263c>
    7980:	ldr	r3, [fp, #-904]	; 0xfffffc78
    7984:	add	r3, r3, #8
    7988:	sub	r2, fp, #240	; 0xf0
    798c:	mov	r1, r2
    7990:	mov	r0, r3
    7994:	bl	0 <coda_cursor_get_num_elements>
    7998:	mov	r3, r0
    799c:	cmp	r3, #0
    79a0:	beq	79ac <eval_string+0x1160>
    79a4:	mvn	r3, #0
    79a8:	b	8e88 <eval_string+0x263c>
    79ac:	ldr	r3, [fp, #-912]	; 0xfffffc70
    79b0:	mov	r2, #0
    79b4:	str	r2, [r3]
    79b8:	ldr	r3, [fp, #-916]	; 0xfffffc6c
    79bc:	mov	r2, #0
    79c0:	str	r2, [r3]
    79c4:	ldr	r3, [fp, #4]
    79c8:	mov	r2, #0
    79cc:	str	r2, [r3]
    79d0:	ldr	r3, [fp, #-240]	; 0xffffff10
    79d4:	cmp	r3, #0
    79d8:	ble	7b80 <eval_string+0x1334>
    79dc:	ldr	r3, [fp, #-904]	; 0xfffffc78
    79e0:	add	r3, r3, #8
    79e4:	mov	r0, r3
    79e8:	bl	0 <coda_cursor_goto_first_array_element>
    79ec:	mov	r3, r0
    79f0:	cmp	r3, #0
    79f4:	beq	7a00 <eval_string+0x11b4>
    79f8:	mvn	r3, #0
    79fc:	b	8e88 <eval_string+0x263c>
    7a00:	mov	r3, #0
    7a04:	str	r3, [fp, #-32]	; 0xffffffe0
    7a08:	b	7b70 <eval_string+0x1324>
    7a0c:	ldr	r3, [fp, #-56]	; 0xffffffc8
    7a10:	ldr	r1, [r3, #20]
    7a14:	sub	r0, fp, #248	; 0xf8
    7a18:	sub	r2, fp, #244	; 0xf4
    7a1c:	sub	r3, fp, #252	; 0xfc
    7a20:	str	r3, [sp]
    7a24:	mov	r3, r0
    7a28:	ldr	r0, [fp, #-904]	; 0xfffffc78
    7a2c:	bl	684c <eval_string>
    7a30:	mov	r3, r0
    7a34:	cmp	r3, #0
    7a38:	beq	7a44 <eval_string+0x11f8>
    7a3c:	mvn	r3, #0
    7a40:	b	8e88 <eval_string+0x263c>
    7a44:	ldr	r3, [fp, #-248]	; 0xffffff08
    7a48:	cmp	r3, #0
    7a4c:	ble	7b24 <eval_string+0x12d8>
    7a50:	ldr	r3, [fp, #4]
    7a54:	ldr	r0, [r3]
    7a58:	ldr	r3, [fp, #-916]	; 0xfffffc6c
    7a5c:	ldr	r2, [r3]
    7a60:	ldr	r3, [fp, #-248]	; 0xffffff08
    7a64:	add	r3, r2, r3
    7a68:	add	r3, r3, #1
    7a6c:	mov	r1, r3
    7a70:	bl	0 <realloc>
    7a74:	str	r0, [fp, #-60]	; 0xffffffc4
    7a78:	ldr	r3, [fp, #-60]	; 0xffffffc4
    7a7c:	cmp	r3, #0
    7a80:	bne	7ac8 <eval_string+0x127c>
    7a84:	ldr	r3, [fp, #-916]	; 0xfffffc6c
    7a88:	ldr	r2, [r3]
    7a8c:	ldr	r3, [fp, #-248]	; 0xffffff08
    7a90:	add	r2, r2, r3
    7a94:	movw	r3, #3275	; 0xccb
    7a98:	str	r3, [sp]
    7a9c:	movw	r3, #0
    7aa0:	movt	r3, #0
    7aa4:	movw	r1, #0
    7aa8:	movt	r1, #0
    7aac:	mvn	r0, #0
    7ab0:	bl	0 <coda_set_error>
    7ab4:	ldr	r3, [fp, #-252]	; 0xffffff04
    7ab8:	mov	r0, r3
    7abc:	bl	0 <free>
    7ac0:	mvn	r3, #0
    7ac4:	b	7b6c <eval_string+0x1320>
    7ac8:	ldr	r3, [fp, #-916]	; 0xfffffc6c
    7acc:	ldr	r3, [r3]
    7ad0:	mov	r2, r3
    7ad4:	ldr	r3, [fp, #-60]	; 0xffffffc4
    7ad8:	add	r0, r3, r2
    7adc:	ldr	r3, [fp, #-252]	; 0xffffff04
    7ae0:	ldr	r2, [fp, #-244]	; 0xffffff0c
    7ae4:	add	r3, r3, r2
    7ae8:	ldr	r2, [fp, #-248]	; 0xffffff08
    7aec:	mov	r1, r3
    7af0:	bl	0 <memcpy>
    7af4:	ldr	r3, [fp, #-252]	; 0xffffff04
    7af8:	mov	r0, r3
    7afc:	bl	0 <free>
    7b00:	ldr	r3, [fp, #-916]	; 0xfffffc6c
    7b04:	ldr	r2, [r3]
    7b08:	ldr	r3, [fp, #-248]	; 0xffffff08
    7b0c:	add	r2, r2, r3
    7b10:	ldr	r3, [fp, #-916]	; 0xfffffc6c
    7b14:	str	r2, [r3]
    7b18:	ldr	r3, [fp, #4]
    7b1c:	ldr	r2, [fp, #-60]	; 0xffffffc4
    7b20:	str	r2, [r3]
    7b24:	ldr	r3, [fp, #-240]	; 0xffffff10
    7b28:	sub	r3, r3, #1
    7b2c:	ldr	r2, [fp, #-32]	; 0xffffffe0
    7b30:	cmp	r2, r3
    7b34:	bge	7b5c <eval_string+0x1310>
    7b38:	ldr	r3, [fp, #-904]	; 0xfffffc78
    7b3c:	add	r3, r3, #8
    7b40:	mov	r0, r3
    7b44:	bl	0 <coda_cursor_goto_next_array_element>
    7b48:	mov	r3, r0
    7b4c:	cmp	r3, #0
    7b50:	beq	7b5c <eval_string+0x1310>
    7b54:	mvn	r3, #0
    7b58:	b	7b6c <eval_string+0x1320>
    7b5c:	ldr	r3, [fp, #-32]	; 0xffffffe0
    7b60:	add	r3, r3, #1
    7b64:	str	r3, [fp, #-32]	; 0xffffffe0
    7b68:	b	7b70 <eval_string+0x1324>
    7b6c:	b	8e88 <eval_string+0x263c>
    7b70:	ldr	r3, [fp, #-240]	; 0xffffff10
    7b74:	ldr	r2, [fp, #-32]	; 0xffffffe0
    7b78:	cmp	r2, r3
    7b7c:	blt	7a0c <eval_string+0x11c0>
    7b80:	ldr	r3, [fp, #-904]	; 0xfffffc78
    7b84:	add	r3, r3, #8
    7b88:	sub	r1, fp, #900	; 0x384
    7b8c:	mov	r2, #520	; 0x208
    7b90:	mov	r0, r3
    7b94:	bl	0 <memcpy>
    7b98:	b	8e84 <eval_string+0x2638>
    7b9c:	ldr	r3, [fp, #-904]	; 0xfffffc78
    7ba0:	ldr	r3, [r3]
    7ba4:	cmp	r3, #0
    7ba8:	bne	7bcc <eval_string+0x1380>
    7bac:	movw	r3, #0
    7bb0:	movt	r3, #0
    7bb4:	movw	r2, #3301	; 0xce5
    7bb8:	movw	r1, #0
    7bbc:	movt	r1, #0
    7bc0:	movw	r0, #0
    7bc4:	movt	r0, #0
    7bc8:	bl	0 <__assert_fail>
    7bcc:	ldr	r3, [fp, #-904]	; 0xfffffc78
    7bd0:	sub	r0, fp, #900	; 0x384
    7bd4:	add	r3, r3, #8
    7bd8:	mov	r2, #520	; 0x208
    7bdc:	mov	r1, r3
    7be0:	bl	0 <memcpy>
    7be4:	ldr	r3, [fp, #-56]	; 0xffffffc8
    7be8:	ldr	r3, [r3, #16]
    7bec:	mov	r1, r3
    7bf0:	ldr	r0, [fp, #-904]	; 0xfffffc78
    7bf4:	bl	9334 <eval_cursor>
    7bf8:	mov	r3, r0
    7bfc:	cmp	r3, #0
    7c00:	beq	7c0c <eval_string+0x13c0>
    7c04:	mvn	r3, #0
    7c08:	b	8e88 <eval_string+0x263c>
    7c0c:	ldr	r3, [fp, #-904]	; 0xfffffc78
    7c10:	add	r3, r3, #8
    7c14:	sub	r2, fp, #256	; 0x100
    7c18:	mov	r1, r2
    7c1c:	mov	r0, r3
    7c20:	bl	0 <coda_cursor_get_num_elements>
    7c24:	mov	r3, r0
    7c28:	cmp	r3, #0
    7c2c:	beq	7c38 <eval_string+0x13ec>
    7c30:	mvn	r3, #0
    7c34:	b	8e88 <eval_string+0x263c>
    7c38:	ldr	r3, [fp, #-912]	; 0xfffffc70
    7c3c:	mov	r2, #0
    7c40:	str	r2, [r3]
    7c44:	ldr	r3, [fp, #-916]	; 0xfffffc6c
    7c48:	mov	r2, #0
    7c4c:	str	r2, [r3]
    7c50:	ldr	r3, [fp, #4]
    7c54:	mov	r2, #0
    7c58:	str	r2, [r3]
    7c5c:	ldr	r3, [fp, #-256]	; 0xffffff00
    7c60:	cmp	r3, #0
    7c64:	ble	7dc0 <eval_string+0x1574>
    7c68:	ldr	r3, [fp, #-904]	; 0xfffffc78
    7c6c:	add	r3, r3, #8
    7c70:	mov	r0, r3
    7c74:	bl	0 <coda_cursor_goto_first_array_element>
    7c78:	mov	r3, r0
    7c7c:	cmp	r3, #0
    7c80:	beq	7c8c <eval_string+0x1440>
    7c84:	mvn	r3, #0
    7c88:	b	8e88 <eval_string+0x263c>
    7c8c:	mov	r3, #0
    7c90:	str	r3, [fp, #-36]	; 0xffffffdc
    7c94:	b	7db0 <eval_string+0x1564>
    7c98:	ldr	r3, [fp, #-56]	; 0xffffffc8
    7c9c:	ldr	r1, [r3, #20]
    7ca0:	sub	r0, fp, #264	; 0x108
    7ca4:	sub	r2, fp, #260	; 0x104
    7ca8:	sub	r3, fp, #268	; 0x10c
    7cac:	str	r3, [sp]
    7cb0:	mov	r3, r0
    7cb4:	ldr	r0, [fp, #-904]	; 0xfffffc78
    7cb8:	bl	684c <eval_string>
    7cbc:	mov	r3, r0
    7cc0:	cmp	r3, #0
    7cc4:	beq	7cd0 <eval_string+0x1484>
    7cc8:	mvn	r3, #0
    7ccc:	b	8e88 <eval_string+0x263c>
    7cd0:	ldr	r0, [fp, #-260]	; 0xfffffefc
    7cd4:	ldr	r1, [fp, #-264]	; 0xfffffef8
    7cd8:	ldr	ip, [fp, #-268]	; 0xfffffef4
    7cdc:	ldr	r3, [fp, #-912]	; 0xfffffc70
    7ce0:	ldr	lr, [r3]
    7ce4:	ldr	r3, [fp, #-916]	; 0xfffffc6c
    7ce8:	ldr	r3, [r3]
    7cec:	ldr	r2, [fp, #4]
    7cf0:	ldr	r2, [r2]
    7cf4:	str	r2, [sp, #4]
    7cf8:	str	r3, [sp]
    7cfc:	mov	r3, lr
    7d00:	mov	r2, ip
    7d04:	bl	110 <compare_strings>
    7d08:	mov	r3, r0
    7d0c:	cmp	r3, #0
    7d10:	bge	7d54 <eval_string+0x1508>
    7d14:	ldr	r3, [fp, #-916]	; 0xfffffc6c
    7d18:	ldr	r3, [r3]
    7d1c:	cmp	r3, #0
    7d20:	ble	7d2c <eval_string+0x14e0>
    7d24:	ldr	r0, [fp, #4]
    7d28:	bl	0 <free>
    7d2c:	ldr	r2, [fp, #-260]	; 0xfffffefc
    7d30:	ldr	r3, [fp, #-912]	; 0xfffffc70
    7d34:	str	r2, [r3]
    7d38:	ldr	r2, [fp, #-264]	; 0xfffffef8
    7d3c:	ldr	r3, [fp, #-916]	; 0xfffffc6c
    7d40:	str	r2, [r3]
    7d44:	ldr	r2, [fp, #-268]	; 0xfffffef4
    7d48:	ldr	r3, [fp, #4]
    7d4c:	str	r2, [r3]
    7d50:	b	7d6c <eval_string+0x1520>
    7d54:	ldr	r3, [fp, #-264]	; 0xfffffef8
    7d58:	cmp	r3, #0
    7d5c:	ble	7d6c <eval_string+0x1520>
    7d60:	ldr	r3, [fp, #-268]	; 0xfffffef4
    7d64:	mov	r0, r3
    7d68:	bl	0 <free>
    7d6c:	ldr	r3, [fp, #-256]	; 0xffffff00
    7d70:	sub	r3, r3, #1
    7d74:	ldr	r2, [fp, #-36]	; 0xffffffdc
    7d78:	cmp	r2, r3
    7d7c:	bge	7da4 <eval_string+0x1558>
    7d80:	ldr	r3, [fp, #-904]	; 0xfffffc78
    7d84:	add	r3, r3, #8
    7d88:	mov	r0, r3
    7d8c:	bl	0 <coda_cursor_goto_next_array_element>
    7d90:	mov	r3, r0
    7d94:	cmp	r3, #0
    7d98:	beq	7da4 <eval_string+0x1558>
    7d9c:	mvn	r3, #0
    7da0:	b	8e88 <eval_string+0x263c>
    7da4:	ldr	r3, [fp, #-36]	; 0xffffffdc
    7da8:	add	r3, r3, #1
    7dac:	str	r3, [fp, #-36]	; 0xffffffdc
    7db0:	ldr	r3, [fp, #-256]	; 0xffffff00
    7db4:	ldr	r2, [fp, #-36]	; 0xffffffdc
    7db8:	cmp	r2, r3
    7dbc:	blt	7c98 <eval_string+0x144c>
    7dc0:	ldr	r3, [fp, #-904]	; 0xfffffc78
    7dc4:	add	r3, r3, #8
    7dc8:	sub	r1, fp, #900	; 0x384
    7dcc:	mov	r2, #520	; 0x208
    7dd0:	mov	r0, r3
    7dd4:	bl	0 <memcpy>
    7dd8:	b	8e84 <eval_string+0x2638>
    7ddc:	ldr	r3, [fp, #-904]	; 0xfffffc78
    7de0:	ldr	r3, [r3]
    7de4:	cmp	r3, #0
    7de8:	bne	7e0c <eval_string+0x15c0>
    7dec:	movw	r3, #0
    7df0:	movt	r3, #0
    7df4:	movw	r2, #3363	; 0xd23
    7df8:	movw	r1, #0
    7dfc:	movt	r1, #0
    7e00:	movw	r0, #0
    7e04:	movt	r0, #0
    7e08:	bl	0 <__assert_fail>
    7e0c:	ldr	r3, [fp, #-904]	; 0xfffffc78
    7e10:	sub	r0, fp, #900	; 0x384
    7e14:	add	r3, r3, #8
    7e18:	mov	r2, #520	; 0x208
    7e1c:	mov	r1, r3
    7e20:	bl	0 <memcpy>
    7e24:	ldr	r3, [fp, #-56]	; 0xffffffc8
    7e28:	ldr	r3, [r3, #16]
    7e2c:	mov	r1, r3
    7e30:	ldr	r0, [fp, #-904]	; 0xfffffc78
    7e34:	bl	9334 <eval_cursor>
    7e38:	mov	r3, r0
    7e3c:	cmp	r3, #0
    7e40:	beq	7e4c <eval_string+0x1600>
    7e44:	mvn	r3, #0
    7e48:	b	8e88 <eval_string+0x263c>
    7e4c:	ldr	r3, [fp, #-904]	; 0xfffffc78
    7e50:	add	r3, r3, #8
    7e54:	sub	r2, fp, #272	; 0x110
    7e58:	mov	r1, r2
    7e5c:	mov	r0, r3
    7e60:	bl	0 <coda_cursor_get_num_elements>
    7e64:	mov	r3, r0
    7e68:	cmp	r3, #0
    7e6c:	beq	7e78 <eval_string+0x162c>
    7e70:	mvn	r3, #0
    7e74:	b	8e88 <eval_string+0x263c>
    7e78:	ldr	r3, [fp, #-912]	; 0xfffffc70
    7e7c:	mov	r2, #0
    7e80:	str	r2, [r3]
    7e84:	ldr	r3, [fp, #-916]	; 0xfffffc6c
    7e88:	mov	r2, #0
    7e8c:	str	r2, [r3]
    7e90:	ldr	r3, [fp, #4]
    7e94:	mov	r2, #0
    7e98:	str	r2, [r3]
    7e9c:	ldr	r3, [fp, #-272]	; 0xfffffef0
    7ea0:	cmp	r3, #0
    7ea4:	ble	8008 <eval_string+0x17bc>
    7ea8:	ldr	r3, [fp, #-904]	; 0xfffffc78
    7eac:	add	r3, r3, #8
    7eb0:	mov	r0, r3
    7eb4:	bl	0 <coda_cursor_goto_first_array_element>
    7eb8:	mov	r3, r0
    7ebc:	cmp	r3, #0
    7ec0:	beq	7ecc <eval_string+0x1680>
    7ec4:	mvn	r3, #0
    7ec8:	b	8e88 <eval_string+0x263c>
    7ecc:	mov	r3, #0
    7ed0:	str	r3, [fp, #-40]	; 0xffffffd8
    7ed4:	b	7ff8 <eval_string+0x17ac>
    7ed8:	ldr	r3, [fp, #-56]	; 0xffffffc8
    7edc:	ldr	r1, [r3, #20]
    7ee0:	sub	r0, fp, #280	; 0x118
    7ee4:	sub	r2, fp, #276	; 0x114
    7ee8:	sub	r3, fp, #284	; 0x11c
    7eec:	str	r3, [sp]
    7ef0:	mov	r3, r0
    7ef4:	ldr	r0, [fp, #-904]	; 0xfffffc78
    7ef8:	bl	684c <eval_string>
    7efc:	mov	r3, r0
    7f00:	cmp	r3, #0
    7f04:	beq	7f10 <eval_string+0x16c4>
    7f08:	mvn	r3, #0
    7f0c:	b	8e88 <eval_string+0x263c>
    7f10:	ldr	r0, [fp, #-276]	; 0xfffffeec
    7f14:	ldr	r1, [fp, #-280]	; 0xfffffee8
    7f18:	ldr	ip, [fp, #-284]	; 0xfffffee4
    7f1c:	ldr	r3, [fp, #-912]	; 0xfffffc70
    7f20:	ldr	lr, [r3]
    7f24:	ldr	r3, [fp, #-916]	; 0xfffffc6c
    7f28:	ldr	r3, [r3]
    7f2c:	ldr	r2, [fp, #4]
    7f30:	ldr	r2, [r2]
    7f34:	str	r2, [sp, #4]
    7f38:	str	r3, [sp]
    7f3c:	mov	r3, lr
    7f40:	mov	r2, ip
    7f44:	bl	110 <compare_strings>
    7f48:	mov	r3, r0
    7f4c:	cmp	r3, #0
    7f50:	ble	7f9c <eval_string+0x1750>
    7f54:	ldr	r3, [fp, #-916]	; 0xfffffc6c
    7f58:	ldr	r3, [r3]
    7f5c:	cmp	r3, #0
    7f60:	ble	7f74 <eval_string+0x1728>
    7f64:	ldr	r3, [fp, #4]
    7f68:	ldr	r3, [r3]
    7f6c:	mov	r0, r3
    7f70:	bl	0 <free>
    7f74:	ldr	r2, [fp, #-276]	; 0xfffffeec
    7f78:	ldr	r3, [fp, #-912]	; 0xfffffc70
    7f7c:	str	r2, [r3]
    7f80:	ldr	r2, [fp, #-280]	; 0xfffffee8
    7f84:	ldr	r3, [fp, #-916]	; 0xfffffc6c
    7f88:	str	r2, [r3]
    7f8c:	ldr	r2, [fp, #-284]	; 0xfffffee4
    7f90:	ldr	r3, [fp, #4]
    7f94:	str	r2, [r3]
    7f98:	b	7fb4 <eval_string+0x1768>
    7f9c:	ldr	r3, [fp, #-280]	; 0xfffffee8
    7fa0:	cmp	r3, #0
    7fa4:	ble	7fb4 <eval_string+0x1768>
    7fa8:	ldr	r3, [fp, #-284]	; 0xfffffee4
    7fac:	mov	r0, r3
    7fb0:	bl	0 <free>
    7fb4:	ldr	r3, [fp, #-272]	; 0xfffffef0
    7fb8:	sub	r3, r3, #1
    7fbc:	ldr	r2, [fp, #-40]	; 0xffffffd8
    7fc0:	cmp	r2, r3
    7fc4:	bge	7fec <eval_string+0x17a0>
    7fc8:	ldr	r3, [fp, #-904]	; 0xfffffc78
    7fcc:	add	r3, r3, #8
    7fd0:	mov	r0, r3
    7fd4:	bl	0 <coda_cursor_goto_next_array_element>
    7fd8:	mov	r3, r0
    7fdc:	cmp	r3, #0
    7fe0:	beq	7fec <eval_string+0x17a0>
    7fe4:	mvn	r3, #0
    7fe8:	b	8e88 <eval_string+0x263c>
    7fec:	ldr	r3, [fp, #-40]	; 0xffffffd8
    7ff0:	add	r3, r3, #1
    7ff4:	str	r3, [fp, #-40]	; 0xffffffd8
    7ff8:	ldr	r3, [fp, #-272]	; 0xfffffef0
    7ffc:	ldr	r2, [fp, #-40]	; 0xffffffd8
    8000:	cmp	r2, r3
    8004:	blt	7ed8 <eval_string+0x168c>
    8008:	ldr	r3, [fp, #-904]	; 0xfffffc78
    800c:	add	r3, r3, #8
    8010:	sub	r1, fp, #900	; 0x384
    8014:	mov	r2, #520	; 0x208
    8018:	mov	r0, r3
    801c:	bl	0 <memcpy>
    8020:	b	8e84 <eval_string+0x2638>
    8024:	ldr	r3, [fp, #-56]	; 0xffffffc8
    8028:	ldr	r3, [r3, #16]
    802c:	sub	r2, fp, #288	; 0x120
    8030:	mov	r1, r3
    8034:	ldr	r0, [fp, #-904]	; 0xfffffc78
    8038:	bl	1314 <eval_boolean>
    803c:	mov	r3, r0
    8040:	cmp	r3, #0
    8044:	beq	8050 <eval_string+0x1804>
    8048:	mvn	r3, #0
    804c:	b	8e88 <eval_string+0x263c>
    8050:	ldr	r3, [fp, #-288]	; 0xfffffee0
    8054:	cmp	r3, #0
    8058:	beq	8090 <eval_string+0x1844>
    805c:	ldr	r3, [fp, #-56]	; 0xffffffc8
    8060:	ldr	r1, [r3, #20]
    8064:	ldr	r3, [fp, #4]
    8068:	str	r3, [sp]
    806c:	ldr	r3, [fp, #-916]	; 0xfffffc6c
    8070:	ldr	r2, [fp, #-912]	; 0xfffffc70
    8074:	ldr	r0, [fp, #-904]	; 0xfffffc78
    8078:	bl	684c <eval_string>
    807c:	mov	r3, r0
    8080:	cmp	r3, #0
    8084:	beq	8e60 <eval_string+0x2614>
    8088:	mvn	r3, #0
    808c:	b	8e88 <eval_string+0x263c>
    8090:	ldr	r3, [fp, #-56]	; 0xffffffc8
    8094:	ldr	r1, [r3, #24]
    8098:	ldr	r3, [fp, #4]
    809c:	str	r3, [sp]
    80a0:	ldr	r3, [fp, #-916]	; 0xfffffc6c
    80a4:	ldr	r2, [fp, #-912]	; 0xfffffc70
    80a8:	ldr	r0, [fp, #-904]	; 0xfffffc78
    80ac:	bl	684c <eval_string>
    80b0:	mov	r3, r0
    80b4:	cmp	r3, #0
    80b8:	beq	8e60 <eval_string+0x2614>
    80bc:	mvn	r3, #0
    80c0:	b	8e88 <eval_string+0x263c>
    80c4:	ldr	r3, [fp, #-904]	; 0xfffffc78
    80c8:	ldr	r3, [r3]
    80cc:	cmp	r3, #0
    80d0:	bne	80f4 <eval_string+0x18a8>
    80d4:	movw	r3, #0
    80d8:	movt	r3, #0
    80dc:	movw	r2, #3449	; 0xd79
    80e0:	movw	r1, #0
    80e4:	movt	r1, #0
    80e8:	movw	r0, #0
    80ec:	movt	r0, #0
    80f0:	bl	0 <__assert_fail>
    80f4:	ldr	r3, [fp, #-904]	; 0xfffffc78
    80f8:	ldr	r3, [r3]
    80fc:	ldr	r3, [r3]
    8100:	sub	r2, fp, #292	; 0x124
    8104:	mov	r1, r2
    8108:	mov	r0, r3
    810c:	bl	0 <coda_get_product_filename>
    8110:	mov	r3, r0
    8114:	cmp	r3, #0
    8118:	beq	8124 <eval_string+0x18d8>
    811c:	mvn	r3, #0
    8120:	b	8e88 <eval_string+0x263c>
    8124:	ldr	r3, [fp, #-292]	; 0xfffffedc
    8128:	str	r3, [fp, #-44]	; 0xffffffd4
    812c:	b	8168 <eval_string+0x191c>
    8130:	ldr	r3, [fp, #-292]	; 0xfffffedc
    8134:	ldrb	r3, [r3]
    8138:	cmp	r3, #47	; 0x2f
    813c:	beq	8150 <eval_string+0x1904>
    8140:	ldr	r3, [fp, #-292]	; 0xfffffedc
    8144:	ldrb	r3, [r3]
    8148:	cmp	r3, #92	; 0x5c
    814c:	bne	815c <eval_string+0x1910>
    8150:	ldr	r3, [fp, #-292]	; 0xfffffedc
    8154:	add	r3, r3, #1
    8158:	str	r3, [fp, #-44]	; 0xffffffd4
    815c:	ldr	r3, [fp, #-292]	; 0xfffffedc
    8160:	add	r3, r3, #1
    8164:	str	r3, [fp, #-292]	; 0xfffffedc
    8168:	ldr	r3, [fp, #-292]	; 0xfffffedc
    816c:	ldrb	r3, [r3]
    8170:	cmp	r3, #0
    8174:	bne	8130 <eval_string+0x18e4>
    8178:	ldr	r3, [fp, #-912]	; 0xfffffc70
    817c:	mov	r2, #0
    8180:	str	r2, [r3]
    8184:	ldr	r0, [fp, #-44]	; 0xffffffd4
    8188:	bl	0 <strlen>
    818c:	mov	r3, r0
    8190:	mov	r2, r3
    8194:	ldr	r3, [fp, #-916]	; 0xfffffc6c
    8198:	str	r2, [r3]
    819c:	ldr	r3, [fp, #-916]	; 0xfffffc6c
    81a0:	ldr	r3, [r3]
    81a4:	add	r3, r3, #1
    81a8:	mov	r0, r3
    81ac:	bl	0 <malloc>
    81b0:	mov	r3, r0
    81b4:	mov	r2, r3
    81b8:	ldr	r3, [fp, #4]
    81bc:	str	r2, [r3]
    81c0:	ldr	r3, [fp, #4]
    81c4:	ldr	r3, [r3]
    81c8:	cmp	r3, #0
    81cc:	bne	8200 <eval_string+0x19b4>
    81d0:	ldr	r3, [fp, #-916]	; 0xfffffc6c
    81d4:	ldr	r2, [r3]
    81d8:	movw	r3, #3469	; 0xd8d
    81dc:	str	r3, [sp]
    81e0:	movw	r3, #0
    81e4:	movt	r3, #0
    81e8:	movw	r1, #0
    81ec:	movt	r1, #0
    81f0:	mvn	r0, #0
    81f4:	bl	0 <coda_set_error>
    81f8:	mvn	r3, #0
    81fc:	b	8e88 <eval_string+0x263c>
    8200:	ldr	r3, [fp, #4]
    8204:	ldr	r0, [r3]
    8208:	ldr	r3, [fp, #-916]	; 0xfffffc6c
    820c:	ldr	r3, [r3]
    8210:	mov	r2, r3
    8214:	ldr	r1, [fp, #-44]	; 0xffffffd4
    8218:	bl	0 <memcpy>
    821c:	b	8e84 <eval_string+0x2638>
    8220:	mov	r3, #0
    8224:	str	r3, [fp, #-324]	; 0xfffffebc
    8228:	mov	r3, #0
    822c:	str	r3, [fp, #-52]	; 0xffffffcc
    8230:	ldr	r3, [fp, #-56]	; 0xffffffc8
    8234:	ldr	r1, [r3, #16]
    8238:	sub	r0, fp, #320	; 0x140
    823c:	sub	r2, fp, #316	; 0x13c
    8240:	sub	r3, fp, #324	; 0x144
    8244:	str	r3, [sp]
    8248:	mov	r3, r0
    824c:	ldr	r0, [fp, #-904]	; 0xfffffc78
    8250:	bl	684c <eval_string>
    8254:	mov	r3, r0
    8258:	cmp	r3, #0
    825c:	beq	8268 <eval_string+0x1a1c>
    8260:	mvn	r3, #0
    8264:	b	8e88 <eval_string+0x263c>
    8268:	ldr	r3, [fp, #-56]	; 0xffffffc8
    826c:	ldr	r1, [r3, #20]
    8270:	sub	r0, fp, #308	; 0x134
    8274:	sub	r2, fp, #304	; 0x130
    8278:	sub	r3, fp, #312	; 0x138
    827c:	str	r3, [sp]
    8280:	mov	r3, r0
    8284:	ldr	r0, [fp, #-904]	; 0xfffffc78
    8288:	bl	684c <eval_string>
    828c:	mov	r3, r0
    8290:	cmp	r3, #0
    8294:	beq	82b8 <eval_string+0x1a6c>
    8298:	ldr	r3, [fp, #-324]	; 0xfffffebc
    829c:	cmp	r3, #0
    82a0:	beq	82b0 <eval_string+0x1a64>
    82a4:	ldr	r3, [fp, #-324]	; 0xfffffebc
    82a8:	mov	r0, r3
    82ac:	bl	0 <free>
    82b0:	mvn	r3, #0
    82b4:	b	8e88 <eval_string+0x263c>
    82b8:	ldr	r3, [fp, #-320]	; 0xfffffec0
    82bc:	cmp	r3, #0
    82c0:	ble	8310 <eval_string+0x1ac4>
    82c4:	ldr	r3, [fp, #-324]	; 0xfffffebc
    82c8:	ldr	r1, [fp, #-316]	; 0xfffffec4
    82cc:	ldr	r2, [fp, #-320]	; 0xfffffec0
    82d0:	add	r2, r1, r2
    82d4:	add	r3, r3, r2
    82d8:	mov	r2, #0
    82dc:	strb	r2, [r3]
    82e0:	ldr	r3, [fp, #-324]	; 0xfffffebc
    82e4:	ldr	r2, [fp, #-316]	; 0xfffffec4
    82e8:	add	r0, r3, r2
    82ec:	sub	r1, fp, #300	; 0x12c
    82f0:	sub	r2, fp, #296	; 0x128
    82f4:	mov	r3, #0
    82f8:	str	r3, [sp]
    82fc:	mov	r3, r1
    8300:	mov	r1, #36	; 0x24
    8304:	bl	0 <coda_pcre_compile>
    8308:	str	r0, [fp, #-48]	; 0xffffffd0
    830c:	b	8338 <eval_string+0x1aec>
    8310:	sub	r1, fp, #300	; 0x12c
    8314:	sub	r2, fp, #296	; 0x128
    8318:	mov	r3, #0
    831c:	str	r3, [sp]
    8320:	mov	r3, r1
    8324:	mov	r1, #36	; 0x24
    8328:	movw	r0, #0
    832c:	movt	r0, #0
    8330:	bl	0 <coda_pcre_compile>
    8334:	str	r0, [fp, #-48]	; 0xffffffd0
    8338:	ldr	r3, [fp, #-324]	; 0xfffffebc
    833c:	cmp	r3, #0
    8340:	beq	8350 <eval_string+0x1b04>
    8344:	ldr	r3, [fp, #-324]	; 0xfffffebc
    8348:	mov	r0, r3
    834c:	bl	0 <free>
    8350:	ldr	r3, [fp, #-48]	; 0xffffffd0
    8354:	cmp	r3, #0
    8358:	bne	8394 <eval_string+0x1b48>
    835c:	ldr	r2, [fp, #-296]	; 0xfffffed8
    8360:	ldr	r3, [fp, #-300]	; 0xfffffed4
    8364:	movw	r1, #0
    8368:	movt	r1, #0
    836c:	mvn	r0, #400	; 0x190
    8370:	bl	0 <coda_set_error>
    8374:	ldr	r3, [fp, #-312]	; 0xfffffec8
    8378:	cmp	r3, #0
    837c:	beq	838c <eval_string+0x1b40>
    8380:	ldr	r3, [fp, #-312]	; 0xfffffec8
    8384:	mov	r0, r3
    8388:	bl	0 <free>
    838c:	mvn	r3, #0
    8390:	b	8e88 <eval_string+0x263c>
    8394:	ldr	r3, [fp, #-56]	; 0xffffffc8
    8398:	ldr	r3, [r3, #24]
    839c:	ldr	r3, [r3, #4]
    83a0:	cmp	r3, #1
    83a4:	bne	83fc <eval_string+0x1bb0>
    83a8:	ldr	r3, [fp, #-56]	; 0xffffffc8
    83ac:	ldr	r3, [r3, #24]
    83b0:	sub	r2, fp, #332	; 0x14c
    83b4:	mov	r1, r3
    83b8:	ldr	r0, [fp, #-904]	; 0xfffffc78
    83bc:	bl	4510 <eval_integer>
    83c0:	mov	r3, r0
    83c4:	cmp	r3, #0
    83c8:	beq	83e8 <eval_string+0x1b9c>
    83cc:	movw	r3, #0
    83d0:	movt	r3, #0
    83d4:	ldr	r3, [r3]
    83d8:	ldr	r0, [fp, #-48]	; 0xffffffd0
    83dc:	blx	r3
    83e0:	mvn	r3, #0
    83e4:	b	8e88 <eval_string+0x263c>
    83e8:	sub	r3, fp, #332	; 0x14c
    83ec:	ldrd	r2, [r3]
    83f0:	mov	r3, r2
    83f4:	str	r3, [fp, #-52]	; 0xffffffcc
    83f8:	b	8504 <eval_string+0x1cb8>
    83fc:	ldr	r3, [fp, #-56]	; 0xffffffc8
    8400:	ldr	r1, [r3, #24]
    8404:	sub	r0, fp, #340	; 0x154
    8408:	sub	r2, fp, #336	; 0x150
    840c:	sub	r3, fp, #344	; 0x158
    8410:	str	r3, [sp]
    8414:	mov	r3, r0
    8418:	ldr	r0, [fp, #-904]	; 0xfffffc78
    841c:	bl	684c <eval_string>
    8420:	mov	r3, r0
    8424:	cmp	r3, #0
    8428:	beq	8448 <eval_string+0x1bfc>
    842c:	movw	r3, #0
    8430:	movt	r3, #0
    8434:	ldr	r3, [r3]
    8438:	ldr	r0, [fp, #-48]	; 0xffffffd0
    843c:	blx	r3
    8440:	mvn	r3, #0
    8444:	b	8e88 <eval_string+0x263c>
    8448:	ldr	r3, [fp, #-916]	; 0xfffffc6c
    844c:	cmp	r3, #0
    8450:	bne	8498 <eval_string+0x1c4c>
    8454:	movw	r1, #0
    8458:	movt	r1, #0
    845c:	mvn	r0, #400	; 0x190
    8460:	bl	0 <coda_set_error>
    8464:	ldr	r3, [fp, #-344]	; 0xfffffea8
    8468:	cmp	r3, #0
    846c:	beq	847c <eval_string+0x1c30>
    8470:	ldr	r3, [fp, #-344]	; 0xfffffea8
    8474:	mov	r0, r3
    8478:	bl	0 <free>
    847c:	movw	r3, #0
    8480:	movt	r3, #0
    8484:	ldr	r3, [r3]
    8488:	ldr	r0, [fp, #-48]	; 0xffffffd0
    848c:	blx	r3
    8490:	mvn	r3, #0
    8494:	b	8500 <eval_string+0x1cb4>
    8498:	ldr	r3, [fp, #-344]	; 0xfffffea8
    849c:	mov	r1, r3
    84a0:	ldr	r0, [fp, #-48]	; 0xffffffd0
    84a4:	bl	0 <coda_pcre_get_stringnumber>
    84a8:	str	r0, [fp, #-52]	; 0xffffffcc
    84ac:	ldr	r3, [fp, #-52]	; 0xffffffcc
    84b0:	cmp	r3, #0
    84b4:	bge	84f0 <eval_string+0x1ca4>
    84b8:	movw	r1, #0
    84bc:	movt	r1, #0
    84c0:	mvn	r0, #400	; 0x190
    84c4:	bl	0 <coda_set_error>
    84c8:	ldr	r3, [fp, #-344]	; 0xfffffea8
    84cc:	mov	r0, r3
    84d0:	bl	0 <free>
    84d4:	movw	r3, #0
    84d8:	movt	r3, #0
    84dc:	ldr	r3, [r3]
    84e0:	ldr	r0, [fp, #-48]	; 0xffffffd0
    84e4:	blx	r3
    84e8:	mvn	r3, #0
    84ec:	b	8500 <eval_string+0x1cb4>
    84f0:	ldr	r3, [fp, #-344]	; 0xfffffea8
    84f4:	mov	r0, r3
    84f8:	bl	0 <free>
    84fc:	b	8504 <eval_string+0x1cb8>
    8500:	b	8e88 <eval_string+0x263c>
    8504:	ldr	r3, [fp, #-312]	; 0xfffffec8
    8508:	cmp	r3, #0
    850c:	bne	8568 <eval_string+0x1d1c>
    8510:	movw	r0, #0
    8514:	movt	r0, #0
    8518:	bl	0 <strdup>
    851c:	mov	r3, r0
    8520:	str	r3, [fp, #-312]	; 0xfffffec8
    8524:	ldr	r3, [fp, #-312]	; 0xfffffec8
    8528:	cmp	r3, #0
    852c:	bne	8568 <eval_string+0x1d1c>
    8530:	movw	r3, #3583	; 0xdff
    8534:	movw	r2, #0
    8538:	movt	r2, #0
    853c:	movw	r1, #0
    8540:	movt	r1, #0
    8544:	mvn	r0, #0
    8548:	bl	0 <coda_set_error>
    854c:	movw	r3, #0
    8550:	movt	r3, #0
    8554:	ldr	r3, [r3]
    8558:	ldr	r0, [fp, #-48]	; 0xffffffd0
    855c:	blx	r3
    8560:	mvn	r3, #0
    8564:	b	8e88 <eval_string+0x263c>
    8568:	ldr	r3, [fp, #-312]	; 0xfffffec8
    856c:	ldr	r2, [fp, #-304]	; 0xfffffed0
    8570:	add	r2, r3, r2
    8574:	ldr	r1, [fp, #-308]	; 0xfffffecc
    8578:	mov	r3, #48	; 0x30
    857c:	str	r3, [sp, #12]
    8580:	sub	r3, fp, #900	; 0x384
    8584:	str	r3, [sp, #8]
    8588:	mov	r3, #0
    858c:	str	r3, [sp, #4]
    8590:	mov	r3, #0
    8594:	str	r3, [sp]
    8598:	mov	r3, r1
    859c:	mov	r1, #0
    85a0:	ldr	r0, [fp, #-48]	; 0xffffffd0
    85a4:	bl	0 <coda_pcre_exec>
    85a8:	str	r0, [fp, #-64]	; 0xffffffc0
    85ac:	movw	r3, #0
    85b0:	movt	r3, #0
    85b4:	ldr	r3, [r3]
    85b8:	ldr	r0, [fp, #-48]	; 0xffffffd0
    85bc:	blx	r3
    85c0:	ldr	r3, [fp, #-64]	; 0xffffffc0
    85c4:	cmp	r3, #0
    85c8:	bge	8600 <eval_string+0x1db4>
    85cc:	ldr	r3, [fp, #-64]	; 0xffffffc0
    85d0:	cmn	r3, #1
    85d4:	beq	8600 <eval_string+0x1db4>
    85d8:	ldr	r2, [fp, #-64]	; 0xffffffc0
    85dc:	movw	r1, #0
    85e0:	movt	r1, #0
    85e4:	mvn	r0, #400	; 0x190
    85e8:	bl	0 <coda_set_error>
    85ec:	ldr	r3, [fp, #-312]	; 0xfffffec8
    85f0:	mov	r0, r3
    85f4:	bl	0 <free>
    85f8:	mvn	r3, #0
    85fc:	b	8e88 <eval_string+0x263c>
    8600:	ldr	r3, [fp, #-64]	; 0xffffffc0
    8604:	cmp	r3, #0
    8608:	bne	8630 <eval_string+0x1de4>
    860c:	movw	r1, #0
    8610:	movt	r1, #0
    8614:	mvn	r0, #400	; 0x190
    8618:	bl	0 <coda_set_error>
    861c:	ldr	r3, [fp, #-312]	; 0xfffffec8
    8620:	mov	r0, r3
    8624:	bl	0 <free>
    8628:	mvn	r3, #0
    862c:	b	8e88 <eval_string+0x263c>
    8630:	ldr	r2, [fp, #-52]	; 0xffffffcc
    8634:	ldr	r3, [fp, #-64]	; 0xffffffc0
    8638:	cmp	r2, r3
    863c:	blt	8674 <eval_string+0x1e28>
    8640:	ldr	r3, [fp, #-912]	; 0xfffffc70
    8644:	mov	r2, #0
    8648:	str	r2, [r3]
    864c:	ldr	r3, [fp, #-916]	; 0xfffffc6c
    8650:	mov	r2, #0
    8654:	str	r2, [r3]
    8658:	ldr	r3, [fp, #4]
    865c:	mov	r2, #0
    8660:	str	r2, [r3]
    8664:	ldr	r3, [fp, #-312]	; 0xfffffec8
    8668:	mov	r0, r3
    866c:	bl	0 <free>
    8670:	b	8e84 <eval_string+0x2638>
    8674:	ldr	r3, [fp, #-52]	; 0xffffffcc
    8678:	lsl	r3, r3, #1
    867c:	lsl	r3, r3, #2
    8680:	sub	r2, fp, #28
    8684:	add	r3, r2, r3
    8688:	ldr	r2, [r3, #-872]	; 0xfffffc98
    868c:	ldr	r3, [fp, #-912]	; 0xfffffc70
    8690:	str	r2, [r3]
    8694:	ldr	r3, [fp, #-52]	; 0xffffffcc
    8698:	lsl	r3, r3, #1
    869c:	add	r3, r3, #1
    86a0:	lsl	r3, r3, #2
    86a4:	sub	r2, fp, #28
    86a8:	add	r3, r2, r3
    86ac:	ldr	r2, [r3, #-872]	; 0xfffffc98
    86b0:	ldr	r3, [fp, #-52]	; 0xffffffcc
    86b4:	lsl	r3, r3, #1
    86b8:	lsl	r3, r3, #2
    86bc:	sub	r1, fp, #28
    86c0:	add	r3, r1, r3
    86c4:	ldr	r3, [r3, #-872]	; 0xfffffc98
    86c8:	sub	r2, r2, r3
    86cc:	ldr	r3, [fp, #-916]	; 0xfffffc6c
    86d0:	str	r2, [r3]
    86d4:	ldr	r2, [fp, #-312]	; 0xfffffec8
    86d8:	ldr	r3, [fp, #4]
    86dc:	str	r2, [r3]
    86e0:	b	8e84 <eval_string+0x2638>
    86e4:	ldr	r3, [fp, #-904]	; 0xfffffc78
    86e8:	ldr	r3, [r3]
    86ec:	cmp	r3, #0
    86f0:	bne	8714 <eval_string+0x1ec8>
    86f4:	movw	r3, #0
    86f8:	movt	r3, #0
    86fc:	movw	r2, #3624	; 0xe28
    8700:	movw	r1, #0
    8704:	movt	r1, #0
    8708:	movw	r0, #0
    870c:	movt	r0, #0
    8710:	bl	0 <__assert_fail>
    8714:	ldr	r3, [fp, #-904]	; 0xfffffc78
    8718:	ldr	r3, [r3]
    871c:	ldr	r3, [r3]
    8720:	sub	r2, fp, #348	; 0x15c
    8724:	mov	r1, r2
    8728:	mov	r0, r3
    872c:	bl	0 <coda_get_product_class>
    8730:	mov	r3, r0
    8734:	cmp	r3, #0
    8738:	beq	8744 <eval_string+0x1ef8>
    873c:	mvn	r3, #0
    8740:	b	8e88 <eval_string+0x263c>
    8744:	ldr	r3, [fp, #-912]	; 0xfffffc70
    8748:	mov	r2, #0
    874c:	str	r2, [r3]
    8750:	ldr	r3, [fp, #-916]	; 0xfffffc6c
    8754:	mov	r2, #0
    8758:	str	r2, [r3]
    875c:	ldr	r3, [fp, #-348]	; 0xfffffea4
    8760:	cmp	r3, #0
    8764:	beq	8e68 <eval_string+0x261c>
    8768:	ldr	r3, [fp, #-348]	; 0xfffffea4
    876c:	mov	r0, r3
    8770:	bl	0 <strlen>
    8774:	mov	r3, r0
    8778:	mov	r2, r3
    877c:	ldr	r3, [fp, #-916]	; 0xfffffc6c
    8780:	str	r2, [r3]
    8784:	ldr	r3, [fp, #-916]	; 0xfffffc6c
    8788:	ldr	r3, [r3]
    878c:	add	r3, r3, #1
    8790:	mov	r0, r3
    8794:	bl	0 <malloc>
    8798:	mov	r3, r0
    879c:	mov	r2, r3
    87a0:	ldr	r3, [fp, #4]
    87a4:	str	r2, [r3]
    87a8:	ldr	r3, [fp, #4]
    87ac:	ldr	r3, [r3]
    87b0:	cmp	r3, #0
    87b4:	bne	87e8 <eval_string+0x1f9c>
    87b8:	ldr	r3, [fp, #-916]	; 0xfffffc6c
    87bc:	ldr	r2, [r3]
    87c0:	movw	r3, #3638	; 0xe36
    87c4:	str	r3, [sp]
    87c8:	movw	r3, #0
    87cc:	movt	r3, #0
    87d0:	movw	r1, #0
    87d4:	movt	r1, #0
    87d8:	mvn	r0, #0
    87dc:	bl	0 <coda_set_error>
    87e0:	mvn	r3, #0
    87e4:	b	8e88 <eval_string+0x263c>
    87e8:	ldr	r3, [fp, #4]
    87ec:	ldr	r0, [r3]
    87f0:	ldr	r1, [fp, #-348]	; 0xfffffea4
    87f4:	ldr	r3, [fp, #-916]	; 0xfffffc6c
    87f8:	ldr	r3, [r3]
    87fc:	mov	r2, r3
    8800:	bl	0 <memcpy>
    8804:	b	8e68 <eval_string+0x261c>
    8808:	ldr	r3, [fp, #-904]	; 0xfffffc78
    880c:	ldr	r3, [r3]
    8810:	cmp	r3, #0
    8814:	bne	8838 <eval_string+0x1fec>
    8818:	movw	r3, #0
    881c:	movt	r3, #0
    8820:	movw	r2, #3650	; 0xe42
    8824:	movw	r1, #0
    8828:	movt	r1, #0
    882c:	movw	r0, #0
    8830:	movt	r0, #0
    8834:	bl	0 <__assert_fail>
    8838:	ldr	r3, [fp, #-904]	; 0xfffffc78
    883c:	ldr	r3, [r3]
    8840:	ldr	r3, [r3]
    8844:	sub	r2, fp, #352	; 0x160
    8848:	mov	r1, r2
    884c:	mov	r0, r3
    8850:	bl	0 <coda_get_product_format>
    8854:	mov	r3, r0
    8858:	cmp	r3, #0
    885c:	beq	8868 <eval_string+0x201c>
    8860:	mvn	r3, #0
    8864:	b	8e88 <eval_string+0x263c>
    8868:	ldr	r3, [fp, #-352]	; 0xfffffea0
    886c:	mov	r0, r3
    8870:	bl	0 <coda_type_get_format_name>
    8874:	str	r0, [fp, #-68]	; 0xffffffbc
    8878:	ldr	r3, [fp, #-912]	; 0xfffffc70
    887c:	mov	r2, #0
    8880:	str	r2, [r3]
    8884:	ldr	r3, [fp, #-916]	; 0xfffffc6c
    8888:	mov	r2, #0
    888c:	str	r2, [r3]
    8890:	ldr	r3, [fp, #-68]	; 0xffffffbc
    8894:	cmp	r3, #0
    8898:	beq	8e70 <eval_string+0x2624>
    889c:	ldr	r0, [fp, #-68]	; 0xffffffbc
    88a0:	bl	0 <strlen>
    88a4:	mov	r3, r0
    88a8:	mov	r2, r3
    88ac:	ldr	r3, [fp, #-916]	; 0xfffffc6c
    88b0:	str	r2, [r3]
    88b4:	ldr	r3, [fp, #-916]	; 0xfffffc6c
    88b8:	ldr	r3, [r3]
    88bc:	add	r3, r3, #1
    88c0:	mov	r0, r3
    88c4:	bl	0 <malloc>
    88c8:	mov	r3, r0
    88cc:	mov	r2, r3
    88d0:	ldr	r3, [fp, #4]
    88d4:	str	r2, [r3]
    88d8:	ldr	r3, [fp, #4]
    88dc:	ldr	r3, [r3]
    88e0:	cmp	r3, #0
    88e4:	bne	8918 <eval_string+0x20cc>
    88e8:	ldr	r3, [fp, #-916]	; 0xfffffc6c
    88ec:	ldr	r2, [r3]
    88f0:	movw	r3, #3665	; 0xe51
    88f4:	str	r3, [sp]
    88f8:	movw	r3, #0
    88fc:	movt	r3, #0
    8900:	movw	r1, #0
    8904:	movt	r1, #0
    8908:	mvn	r0, #0
    890c:	bl	0 <coda_set_error>
    8910:	mvn	r3, #0
    8914:	b	8e88 <eval_string+0x263c>
    8918:	ldr	r3, [fp, #4]
    891c:	ldr	r0, [r3]
    8920:	ldr	r3, [fp, #-916]	; 0xfffffc6c
    8924:	ldr	r3, [r3]
    8928:	mov	r2, r3
    892c:	ldr	r1, [fp, #-68]	; 0xffffffbc
    8930:	bl	0 <memcpy>
    8934:	b	8e70 <eval_string+0x2624>
    8938:	ldr	r3, [fp, #-904]	; 0xfffffc78
    893c:	ldr	r3, [r3]
    8940:	cmp	r3, #0
    8944:	bne	8968 <eval_string+0x211c>
    8948:	movw	r3, #0
    894c:	movt	r3, #0
    8950:	movw	r2, #3676	; 0xe5c
    8954:	movw	r1, #0
    8958:	movt	r1, #0
    895c:	movw	r0, #0
    8960:	movt	r0, #0
    8964:	bl	0 <__assert_fail>
    8968:	ldr	r3, [fp, #-904]	; 0xfffffc78
    896c:	ldr	r3, [r3]
    8970:	ldr	r3, [r3]
    8974:	sub	r2, fp, #356	; 0x164
    8978:	mov	r1, r2
    897c:	mov	r0, r3
    8980:	bl	0 <coda_get_product_type>
    8984:	mov	r3, r0
    8988:	cmp	r3, #0
    898c:	beq	8998 <eval_string+0x214c>
    8990:	mvn	r3, #0
    8994:	b	8e88 <eval_string+0x263c>
    8998:	ldr	r3, [fp, #-912]	; 0xfffffc70
    899c:	mov	r2, #0
    89a0:	str	r2, [r3]
    89a4:	ldr	r3, [fp, #-916]	; 0xfffffc6c
    89a8:	mov	r2, #0
    89ac:	str	r2, [r3]
    89b0:	ldr	r3, [fp, #-356]	; 0xfffffe9c
    89b4:	cmp	r3, #0
    89b8:	beq	8e78 <eval_string+0x262c>
    89bc:	ldr	r3, [fp, #-356]	; 0xfffffe9c
    89c0:	mov	r0, r3
    89c4:	bl	0 <strlen>
    89c8:	mov	r3, r0
    89cc:	mov	r2, r3
    89d0:	ldr	r3, [fp, #-916]	; 0xfffffc6c
    89d4:	str	r2, [r3]
    89d8:	ldr	r3, [fp, #-916]	; 0xfffffc6c
    89dc:	ldr	r3, [r3]
    89e0:	add	r3, r3, #1
    89e4:	mov	r0, r3
    89e8:	bl	0 <malloc>
    89ec:	mov	r3, r0
    89f0:	mov	r2, r3
    89f4:	ldr	r3, [fp, #4]
    89f8:	str	r2, [r3]
    89fc:	ldr	r3, [fp, #4]
    8a00:	ldr	r3, [r3]
    8a04:	cmp	r3, #0
    8a08:	bne	8a40 <eval_string+0x21f4>
    8a0c:	ldr	r3, [fp, #-916]	; 0xfffffc6c
    8a10:	ldr	r3, [r3]
    8a14:	add	r2, r3, #1
    8a18:	movw	r3, #3690	; 0xe6a
    8a1c:	str	r3, [sp]
    8a20:	movw	r3, #0
    8a24:	movt	r3, #0
    8a28:	movw	r1, #0
    8a2c:	movt	r1, #0
    8a30:	mvn	r0, #0
    8a34:	bl	0 <coda_set_error>
    8a38:	mvn	r3, #0
    8a3c:	b	8e88 <eval_string+0x263c>
    8a40:	ldr	r3, [fp, #4]
    8a44:	ldr	r0, [r3]
    8a48:	ldr	r1, [fp, #-356]	; 0xfffffe9c
    8a4c:	ldr	r3, [fp, #-916]	; 0xfffffc6c
    8a50:	ldr	r3, [r3]
    8a54:	mov	r2, r3
    8a58:	bl	0 <memcpy>
    8a5c:	b	8e78 <eval_string+0x262c>
    8a60:	ldr	r3, [fp, #-56]	; 0xffffffc8
    8a64:	ldr	r3, [r3, #16]
    8a68:	sub	r2, fp, #364	; 0x16c
    8a6c:	mov	r1, r3
    8a70:	ldr	r0, [fp, #-904]	; 0xfffffc78
    8a74:	bl	314c <eval_float>
    8a78:	mov	r3, r0
    8a7c:	cmp	r3, #0
    8a80:	beq	8a8c <eval_string+0x2240>
    8a84:	mvn	r3, #0
    8a88:	b	8e88 <eval_string+0x263c>
    8a8c:	ldr	r3, [fp, #-56]	; 0xffffffc8
    8a90:	ldr	r3, [r3, #20]
    8a94:	cmp	r3, #0
    8a98:	beq	8b3c <eval_string+0x22f0>
    8a9c:	ldr	r3, [fp, #-56]	; 0xffffffc8
    8aa0:	ldr	r1, [r3, #20]
    8aa4:	sub	r0, fp, #372	; 0x174
    8aa8:	sub	r2, fp, #368	; 0x170
    8aac:	sub	r3, fp, #376	; 0x178
    8ab0:	str	r3, [sp]
    8ab4:	mov	r3, r0
    8ab8:	ldr	r0, [fp, #-904]	; 0xfffffc78
    8abc:	bl	684c <eval_string>
    8ac0:	mov	r3, r0
    8ac4:	cmp	r3, #0
    8ac8:	beq	8ad4 <eval_string+0x2288>
    8acc:	mvn	r3, #0
    8ad0:	b	8e88 <eval_string+0x263c>
    8ad4:	ldr	r3, [fp, #-372]	; 0xfffffe8c
    8ad8:	cmp	r3, #0
    8adc:	bge	8af8 <eval_string+0x22ac>
    8ae0:	movw	r1, #0
    8ae4:	movt	r1, #0
    8ae8:	mvn	r0, #400	; 0x190
    8aec:	bl	0 <coda_set_error>
    8af0:	mvn	r3, #0
    8af4:	b	8e88 <eval_string+0x263c>
    8af8:	ldr	r3, [fp, #-372]	; 0xfffffe8c
    8afc:	cmp	r3, #0
    8b00:	bne	8b1c <eval_string+0x22d0>
    8b04:	movw	r1, #0
    8b08:	movt	r1, #0
    8b0c:	mvn	r0, #400	; 0x190
    8b10:	bl	0 <coda_set_error>
    8b14:	mvn	r3, #0
    8b18:	b	8e88 <eval_string+0x263c>
    8b1c:	ldr	r3, [fp, #-376]	; 0xfffffe88
    8b20:	ldr	r1, [fp, #-368]	; 0xfffffe90
    8b24:	ldr	r2, [fp, #-372]	; 0xfffffe8c
    8b28:	add	r2, r1, r2
    8b2c:	add	r3, r3, r2
    8b30:	mov	r2, #0
    8b34:	strb	r2, [r3]
    8b38:	b	8b64 <eval_string+0x2318>
    8b3c:	movw	r3, #0
    8b40:	movt	r3, #0
    8b44:	str	r3, [fp, #-376]	; 0xfffffe88
    8b48:	ldr	r3, [fp, #-376]	; 0xfffffe88
    8b4c:	mov	r0, r3
    8b50:	bl	0 <strlen>
    8b54:	mov	r3, r0
    8b58:	str	r3, [fp, #-372]	; 0xfffffe8c
    8b5c:	mov	r3, #0
    8b60:	str	r3, [fp, #-368]	; 0xfffffe90
    8b64:	ldr	r3, [fp, #-372]	; 0xfffffe8c
    8b68:	add	r3, r3, #1
    8b6c:	mov	r0, r3
    8b70:	bl	0 <malloc>
    8b74:	mov	r3, r0
    8b78:	mov	r2, r3
    8b7c:	ldr	r3, [fp, #4]
    8b80:	str	r2, [r3]
    8b84:	ldr	r3, [fp, #4]
    8b88:	ldr	r3, [r3]
    8b8c:	cmp	r3, #0
    8b90:	bne	8be4 <eval_string+0x2398>
    8b94:	ldr	r3, [fp, #-56]	; 0xffffffc8
    8b98:	ldr	r3, [r3, #20]
    8b9c:	cmp	r3, #0
    8ba0:	beq	8bb0 <eval_string+0x2364>
    8ba4:	ldr	r3, [fp, #-376]	; 0xfffffe88
    8ba8:	mov	r0, r3
    8bac:	bl	0 <free>
    8bb0:	ldr	r3, [fp, #-916]	; 0xfffffc6c
    8bb4:	ldr	r3, [r3]
    8bb8:	add	r2, r3, #1
    8bbc:	movw	r3, #3740	; 0xe9c
    8bc0:	str	r3, [sp]
    8bc4:	movw	r3, #0
    8bc8:	movt	r3, #0
    8bcc:	movw	r1, #0
    8bd0:	movt	r1, #0
    8bd4:	mvn	r0, #0
    8bd8:	bl	0 <coda_set_error>
    8bdc:	mvn	r3, #0
    8be0:	b	8e88 <eval_string+0x263c>
    8be4:	vldr	d7, [fp, #-364]	; 0xfffffe94
    8be8:	ldr	r3, [fp, #-376]	; 0xfffffe88
    8bec:	ldr	r2, [fp, #-368]	; 0xfffffe90
    8bf0:	add	r2, r3, r2
    8bf4:	ldr	r3, [fp, #4]
    8bf8:	ldr	r3, [r3]
    8bfc:	mov	r1, r3
    8c00:	mov	r0, r2
    8c04:	vmov.f64	d0, d7
    8c08:	bl	0 <coda_time_double_to_string>
    8c0c:	mov	r3, r0
    8c10:	cmp	r3, #0
    8c14:	beq	8c3c <eval_string+0x23f0>
    8c18:	ldr	r3, [fp, #-56]	; 0xffffffc8
    8c1c:	ldr	r3, [r3, #20]
    8c20:	cmp	r3, #0
    8c24:	beq	8c34 <eval_string+0x23e8>
    8c28:	ldr	r3, [fp, #-376]	; 0xfffffe88
    8c2c:	mov	r0, r3
    8c30:	bl	0 <free>
    8c34:	mvn	r3, #0
    8c38:	b	8e88 <eval_string+0x263c>
    8c3c:	ldr	r3, [fp, #-912]	; 0xfffffc70
    8c40:	mov	r2, #0
    8c44:	str	r2, [r3]
    8c48:	ldr	r3, [fp, #4]
    8c4c:	ldr	r3, [r3]
    8c50:	mov	r0, r3
    8c54:	bl	0 <strlen>
    8c58:	mov	r3, r0
    8c5c:	mov	r2, r3
    8c60:	ldr	r3, [fp, #-916]	; 0xfffffc6c
    8c64:	str	r2, [r3]
    8c68:	ldr	r3, [fp, #-56]	; 0xffffffc8
    8c6c:	ldr	r3, [r3, #20]
    8c70:	cmp	r3, #0
    8c74:	beq	8e80 <eval_string+0x2634>
    8c78:	ldr	r3, [fp, #-376]	; 0xfffffe88
    8c7c:	mov	r0, r3
    8c80:	bl	0 <free>
    8c84:	b	8e80 <eval_string+0x2634>
    8c88:	ldr	r3, [fp, #-904]	; 0xfffffc78
    8c8c:	ldr	r3, [r3]
    8c90:	cmp	r3, #0
    8c94:	bne	8cb8 <eval_string+0x246c>
    8c98:	movw	r3, #0
    8c9c:	movt	r3, #0
    8ca0:	movw	r2, #3763	; 0xeb3
    8ca4:	movw	r1, #0
    8ca8:	movt	r1, #0
    8cac:	movw	r0, #0
    8cb0:	movt	r0, #0
    8cb4:	bl	0 <__assert_fail>
    8cb8:	ldr	r3, [fp, #-904]	; 0xfffffc78
    8cbc:	sub	r0, fp, #900	; 0x384
    8cc0:	add	r3, r3, #8
    8cc4:	mov	r2, #520	; 0x208
    8cc8:	mov	r1, r3
    8ccc:	bl	0 <memcpy>
    8cd0:	ldr	r3, [fp, #-56]	; 0xffffffc8
    8cd4:	ldr	r3, [r3, #16]
    8cd8:	mov	r1, r3
    8cdc:	ldr	r0, [fp, #-904]	; 0xfffffc78
    8ce0:	bl	9334 <eval_cursor>
    8ce4:	mov	r3, r0
    8ce8:	cmp	r3, #0
    8cec:	beq	8cf8 <eval_string+0x24ac>
    8cf0:	mvn	r3, #0
    8cf4:	b	8e88 <eval_string+0x263c>
    8cf8:	ldr	r3, [fp, #-56]	; 0xffffffc8
    8cfc:	ldr	r1, [r3, #20]
    8d00:	ldr	r3, [fp, #4]
    8d04:	str	r3, [sp]
    8d08:	ldr	r3, [fp, #-916]	; 0xfffffc6c
    8d0c:	ldr	r2, [fp, #-912]	; 0xfffffc70
    8d10:	ldr	r0, [fp, #-904]	; 0xfffffc78
    8d14:	bl	684c <eval_string>
    8d18:	mov	r3, r0
    8d1c:	cmp	r3, #0
    8d20:	beq	8d2c <eval_string+0x24e0>
    8d24:	mvn	r3, #0
    8d28:	b	8e88 <eval_string+0x263c>
    8d2c:	ldr	r3, [fp, #-904]	; 0xfffffc78
    8d30:	add	r3, r3, #8
    8d34:	sub	r1, fp, #900	; 0x384
    8d38:	mov	r2, #520	; 0x208
    8d3c:	mov	r0, r3
    8d40:	bl	0 <memcpy>
    8d44:	b	8e84 <eval_string+0x2638>
    8d48:	ldr	r3, [fp, #-56]	; 0xffffffc8
    8d4c:	ldr	r3, [r3, #12]
    8d50:	ldrb	r3, [r3]
    8d54:	sub	r3, r3, #105	; 0x69
    8d58:	str	r3, [fp, #-72]	; 0xffffffb8
    8d5c:	ldr	r2, [fp, #-904]	; 0xfffffc78
    8d60:	ldr	r3, [fp, #-72]	; 0xffffffb8
    8d64:	add	r3, r3, #66	; 0x42
    8d68:	lsl	r3, r3, #3
    8d6c:	add	r3, r2, r3
    8d70:	ldrd	r2, [r3]
    8d74:	strd	r2, [fp, #-84]	; 0xffffffac
    8d78:	ldr	r3, [fp, #-56]	; 0xffffffc8
    8d7c:	ldr	r1, [r3, #16]
    8d80:	ldr	r3, [fp, #-72]	; 0xffffffb8
    8d84:	add	r3, r3, #66	; 0x42
    8d88:	lsl	r3, r3, #3
    8d8c:	ldr	r2, [fp, #-904]	; 0xfffffc78
    8d90:	add	r3, r2, r3
    8d94:	mov	r2, r3
    8d98:	ldr	r0, [fp, #-904]	; 0xfffffc78
    8d9c:	bl	4510 <eval_integer>
    8da0:	mov	r3, r0
    8da4:	cmp	r3, #0
    8da8:	beq	8db4 <eval_string+0x2568>
    8dac:	mvn	r3, #0
    8db0:	b	8e88 <eval_string+0x263c>
    8db4:	ldr	r3, [fp, #-56]	; 0xffffffc8
    8db8:	ldr	r1, [r3, #20]
    8dbc:	ldr	r3, [fp, #4]
    8dc0:	str	r3, [sp]
    8dc4:	ldr	r3, [fp, #-916]	; 0xfffffc6c
    8dc8:	ldr	r2, [fp, #-912]	; 0xfffffc70
    8dcc:	ldr	r0, [fp, #-904]	; 0xfffffc78
    8dd0:	bl	684c <eval_string>
    8dd4:	mov	r3, r0
    8dd8:	cmp	r3, #0
    8ddc:	beq	8de8 <eval_string+0x259c>
    8de0:	mvn	r3, #0
    8de4:	b	8e88 <eval_string+0x263c>
    8de8:	ldr	r2, [fp, #-904]	; 0xfffffc78
    8dec:	ldr	r3, [fp, #-72]	; 0xffffffb8
    8df0:	add	r3, r3, #66	; 0x42
    8df4:	lsl	r3, r3, #3
    8df8:	add	r1, r2, r3
    8dfc:	ldrd	r2, [fp, #-84]	; 0xffffffac
    8e00:	strd	r2, [r1]
    8e04:	b	8e84 <eval_string+0x2638>
    8e08:	movw	r3, #0
    8e0c:	movt	r3, #0
    8e10:	movw	r2, #3794	; 0xed2
    8e14:	movw	r1, #0
    8e18:	movt	r1, #0
    8e1c:	movw	r0, #0
    8e20:	movt	r0, #0
    8e24:	bl	0 <__assert_fail>
    8e28:	nop	{0}
    8e2c:	b	8e84 <eval_string+0x2638>
    8e30:	nop	{0}
    8e34:	b	8e84 <eval_string+0x2638>
    8e38:	nop	{0}
    8e3c:	b	8e84 <eval_string+0x2638>
    8e40:	nop	{0}
    8e44:	b	8e84 <eval_string+0x2638>
    8e48:	nop	{0}
    8e4c:	b	8e84 <eval_string+0x2638>
    8e50:	nop	{0}
    8e54:	b	8e84 <eval_string+0x2638>
    8e58:	nop	{0}
    8e5c:	b	8e84 <eval_string+0x2638>
    8e60:	nop	{0}
    8e64:	b	8e84 <eval_string+0x2638>
    8e68:	nop	{0}
    8e6c:	b	8e84 <eval_string+0x2638>
    8e70:	nop	{0}
    8e74:	b	8e84 <eval_string+0x2638>
    8e78:	nop	{0}
    8e7c:	b	8e84 <eval_string+0x2638>
    8e80:	nop	{0}
    8e84:	mov	r3, #0
    8e88:	mov	r0, r3
    8e8c:	sub	sp, fp, #28
    8e90:	ldrd	r4, [sp]
    8e94:	ldrd	r6, [sp, #8]
    8e98:	ldrd	r8, [sp, #16]
    8e9c:	ldr	fp, [sp, #24]
    8ea0:	add	sp, sp, #28
    8ea4:	pop	{pc}		; (ldr pc, [sp], #4)

00008ea8 <eval_void>:
    8ea8:	strd	r4, [sp, #-24]!	; 0xffffffe8
    8eac:	strd	r6, [sp, #8]
    8eb0:	str	fp, [sp, #16]
    8eb4:	str	lr, [sp, #20]
    8eb8:	add	fp, sp, #20
    8ebc:	sub	sp, sp, #72	; 0x48
    8ec0:	str	r0, [fp, #-88]	; 0xffffffa8
    8ec4:	str	r1, [fp, #-92]	; 0xffffffa4
    8ec8:	ldr	r3, [fp, #-92]	; 0xffffffa4
    8ecc:	str	r3, [fp, #-24]	; 0xffffffe8
    8ed0:	ldr	r3, [fp, #-24]	; 0xffffffe8
    8ed4:	ldr	r3, [r3]
    8ed8:	cmp	r3, #39	; 0x27
    8edc:	beq	9188 <eval_void+0x2e0>
    8ee0:	cmp	r3, #39	; 0x27
    8ee4:	bhi	8ef4 <eval_void+0x4c>
    8ee8:	cmp	r3, #31
    8eec:	beq	8f08 <eval_void+0x60>
    8ef0:	b	92e8 <eval_void+0x440>
    8ef4:	cmp	r3, #74	; 0x4a
    8ef8:	beq	91b0 <eval_void+0x308>
    8efc:	cmp	r3, #84	; 0x54
    8f00:	beq	9200 <eval_void+0x358>
    8f04:	b	92e8 <eval_void+0x440>
    8f08:	mov	r2, #1
    8f0c:	mov	r3, #0
    8f10:	strd	r2, [fp, #-60]	; 0xffffffc4
    8f14:	ldr	r3, [fp, #-24]	; 0xffffffe8
    8f18:	ldr	r3, [r3, #12]
    8f1c:	ldrb	r3, [r3]
    8f20:	sub	r3, r3, #105	; 0x69
    8f24:	str	r3, [fp, #-28]	; 0xffffffe4
    8f28:	ldr	r2, [fp, #-88]	; 0xffffffa8
    8f2c:	ldr	r3, [fp, #-28]	; 0xffffffe4
    8f30:	add	r3, r3, #66	; 0x42
    8f34:	lsl	r3, r3, #3
    8f38:	add	r3, r2, r3
    8f3c:	ldrd	r2, [r3]
    8f40:	strd	r2, [fp, #-36]	; 0xffffffdc
    8f44:	ldr	r3, [fp, #-24]	; 0xffffffe8
    8f48:	ldr	r3, [r3, #16]
    8f4c:	sub	r2, fp, #44	; 0x2c
    8f50:	mov	r1, r3
    8f54:	ldr	r0, [fp, #-88]	; 0xffffffa8
    8f58:	bl	4510 <eval_integer>
    8f5c:	mov	r3, r0
    8f60:	cmp	r3, #0
    8f64:	beq	8f70 <eval_void+0xc8>
    8f68:	mvn	r3, #0
    8f6c:	b	9318 <eval_void+0x470>
    8f70:	ldr	r3, [fp, #-24]	; 0xffffffe8
    8f74:	ldr	r3, [r3, #20]
    8f78:	sub	r2, fp, #52	; 0x34
    8f7c:	mov	r1, r3
    8f80:	ldr	r0, [fp, #-88]	; 0xffffffa8
    8f84:	bl	4510 <eval_integer>
    8f88:	mov	r3, r0
    8f8c:	cmp	r3, #0
    8f90:	beq	8f9c <eval_void+0xf4>
    8f94:	mvn	r3, #0
    8f98:	b	9318 <eval_void+0x470>
    8f9c:	ldr	r3, [fp, #-24]	; 0xffffffe8
    8fa0:	ldr	r3, [r3, #24]
    8fa4:	cmp	r3, #0
    8fa8:	beq	8ffc <eval_void+0x154>
    8fac:	ldr	r3, [fp, #-24]	; 0xffffffe8
    8fb0:	ldr	r3, [r3, #24]
    8fb4:	sub	r2, fp, #60	; 0x3c
    8fb8:	mov	r1, r3
    8fbc:	ldr	r0, [fp, #-88]	; 0xffffffa8
    8fc0:	bl	4510 <eval_integer>
    8fc4:	mov	r3, r0
    8fc8:	cmp	r3, #0
    8fcc:	beq	8fd8 <eval_void+0x130>
    8fd0:	mvn	r3, #0
    8fd4:	b	9318 <eval_void+0x470>
    8fd8:	ldrd	r2, [fp, #-60]	; 0xffffffc4
    8fdc:	orrs	r3, r2, r3
    8fe0:	bne	8ffc <eval_void+0x154>
    8fe4:	movw	r1, #0
    8fe8:	movt	r1, #0
    8fec:	mvn	r0, #400	; 0x190
    8ff0:	bl	0 <coda_set_error>
    8ff4:	mvn	r3, #0
    8ff8:	b	9318 <eval_void+0x470>
    8ffc:	ldrd	r2, [fp, #-60]	; 0xffffffc4
    9000:	cmp	r2, #1
    9004:	sbcs	r3, r3, #0
    9008:	blt	90bc <eval_void+0x214>
    900c:	ldrd	r2, [fp, #-44]	; 0xffffffd4
    9010:	ldr	r0, [fp, #-88]	; 0xffffffa8
    9014:	ldr	r1, [fp, #-28]	; 0xffffffe4
    9018:	add	r1, r1, #66	; 0x42
    901c:	lsl	r1, r1, #3
    9020:	add	r1, r0, r1
    9024:	strd	r2, [r1]
    9028:	b	9090 <eval_void+0x1e8>
    902c:	ldr	r3, [fp, #-24]	; 0xffffffe8
    9030:	ldr	r3, [r3, #28]
    9034:	mov	r1, r3
    9038:	ldr	r0, [fp, #-88]	; 0xffffffa8
    903c:	bl	8ea8 <eval_void>
    9040:	mov	r3, r0
    9044:	cmp	r3, #0
    9048:	beq	9054 <eval_void+0x1ac>
    904c:	mvn	r3, #0
    9050:	b	9318 <eval_void+0x470>
    9054:	ldr	r2, [fp, #-88]	; 0xffffffa8
    9058:	ldr	r3, [fp, #-28]	; 0xffffffe4
    905c:	add	r3, r3, #66	; 0x42
    9060:	lsl	r3, r3, #3
    9064:	add	r3, r2, r3
    9068:	ldrd	r0, [r3]
    906c:	ldrd	r2, [fp, #-60]	; 0xffffffc4
    9070:	adds	r6, r0, r2
    9074:	adc	r7, r1, r3
    9078:	ldr	r2, [fp, #-88]	; 0xffffffa8
    907c:	ldr	r3, [fp, #-28]	; 0xffffffe4
    9080:	add	r3, r3, #66	; 0x42
    9084:	lsl	r3, r3, #3
    9088:	add	r3, r2, r3
    908c:	strd	r6, [r3]
    9090:	ldr	r2, [fp, #-88]	; 0xffffffa8
    9094:	ldr	r3, [fp, #-28]	; 0xffffffe4
    9098:	add	r3, r3, #66	; 0x42
    909c:	lsl	r3, r3, #3
    90a0:	add	r3, r2, r3
    90a4:	ldrd	r2, [r3]
    90a8:	ldrd	r0, [fp, #-52]	; 0xffffffcc
    90ac:	cmp	r0, r2
    90b0:	sbcs	r3, r1, r3
    90b4:	bge	902c <eval_void+0x184>
    90b8:	b	9168 <eval_void+0x2c0>
    90bc:	ldrd	r2, [fp, #-44]	; 0xffffffd4
    90c0:	ldr	r0, [fp, #-88]	; 0xffffffa8
    90c4:	ldr	r1, [fp, #-28]	; 0xffffffe4
    90c8:	add	r1, r1, #66	; 0x42
    90cc:	lsl	r1, r1, #3
    90d0:	add	r1, r0, r1
    90d4:	strd	r2, [r1]
    90d8:	b	9140 <eval_void+0x298>
    90dc:	ldr	r3, [fp, #-24]	; 0xffffffe8
    90e0:	ldr	r3, [r3, #28]
    90e4:	mov	r1, r3
    90e8:	ldr	r0, [fp, #-88]	; 0xffffffa8
    90ec:	bl	8ea8 <eval_void>
    90f0:	mov	r3, r0
    90f4:	cmp	r3, #0
    90f8:	beq	9104 <eval_void+0x25c>
    90fc:	mvn	r3, #0
    9100:	b	9318 <eval_void+0x470>
    9104:	ldr	r2, [fp, #-88]	; 0xffffffa8
    9108:	ldr	r3, [fp, #-28]	; 0xffffffe4
    910c:	add	r3, r3, #66	; 0x42
    9110:	lsl	r3, r3, #3
    9114:	add	r3, r2, r3
    9118:	ldrd	r0, [r3]
    911c:	ldrd	r2, [fp, #-60]	; 0xffffffc4
    9120:	adds	r4, r0, r2
    9124:	adc	r5, r1, r3
    9128:	ldr	r2, [fp, #-88]	; 0xffffffa8
    912c:	ldr	r3, [fp, #-28]	; 0xffffffe4
    9130:	add	r3, r3, #66	; 0x42
    9134:	lsl	r3, r3, #3
    9138:	add	r3, r2, r3
    913c:	strd	r4, [r3]
    9140:	ldr	r2, [fp, #-88]	; 0xffffffa8
    9144:	ldr	r3, [fp, #-28]	; 0xffffffe4
    9148:	add	r3, r3, #66	; 0x42
    914c:	lsl	r3, r3, #3
    9150:	add	r3, r2, r3
    9154:	ldrd	r0, [r3]
    9158:	ldrd	r2, [fp, #-52]	; 0xffffffcc
    915c:	cmp	r0, r2
    9160:	sbcs	r3, r1, r3
    9164:	bge	90dc <eval_void+0x234>
    9168:	ldr	r2, [fp, #-88]	; 0xffffffa8
    916c:	ldr	r3, [fp, #-28]	; 0xffffffe4
    9170:	add	r3, r3, #66	; 0x42
    9174:	lsl	r3, r3, #3
    9178:	add	r1, r2, r3
    917c:	ldrd	r2, [fp, #-36]	; 0xffffffdc
    9180:	strd	r2, [r1]
    9184:	b	9314 <eval_void+0x46c>
    9188:	ldr	r3, [fp, #-24]	; 0xffffffe8
    918c:	ldr	r3, [r3, #16]
    9190:	mov	r1, r3
    9194:	ldr	r0, [fp, #-88]	; 0xffffffa8
    9198:	bl	9334 <eval_cursor>
    919c:	mov	r3, r0
    91a0:	cmp	r3, #0
    91a4:	beq	9308 <eval_void+0x460>
    91a8:	mvn	r3, #0
    91ac:	b	9318 <eval_void+0x470>
    91b0:	ldr	r3, [fp, #-24]	; 0xffffffe8
    91b4:	ldr	r3, [r3, #16]
    91b8:	mov	r1, r3
    91bc:	ldr	r0, [fp, #-88]	; 0xffffffa8
    91c0:	bl	8ea8 <eval_void>
    91c4:	mov	r3, r0
    91c8:	cmp	r3, #0
    91cc:	beq	91d8 <eval_void+0x330>
    91d0:	mvn	r3, #0
    91d4:	b	9318 <eval_void+0x470>
    91d8:	ldr	r3, [fp, #-24]	; 0xffffffe8
    91dc:	ldr	r3, [r3, #20]
    91e0:	mov	r1, r3
    91e4:	ldr	r0, [fp, #-88]	; 0xffffffa8
    91e8:	bl	8ea8 <eval_void>
    91ec:	mov	r3, r0
    91f0:	cmp	r3, #0
    91f4:	beq	9310 <eval_void+0x468>
    91f8:	mvn	r3, #0
    91fc:	b	9318 <eval_void+0x470>
    9200:	mov	r2, #0
    9204:	mov	r3, #0
    9208:	strd	r2, [fp, #-76]	; 0xffffffb4
    920c:	ldr	r3, [fp, #-88]	; 0xffffffa8
    9210:	ldr	r3, [r3]
    9214:	cmp	r3, #0
    9218:	bne	923c <eval_void+0x394>
    921c:	movw	r3, #0
    9220:	movt	r3, #0
    9224:	movw	r2, #3881	; 0xf29
    9228:	movw	r1, #0
    922c:	movt	r1, #0
    9230:	movw	r0, #0
    9234:	movt	r0, #0
    9238:	bl	0 <__assert_fail>
    923c:	ldr	r3, [fp, #-24]	; 0xffffffe8
    9240:	ldr	r3, [r3, #16]
    9244:	cmp	r3, #0
    9248:	beq	9278 <eval_void+0x3d0>
    924c:	ldr	r3, [fp, #-24]	; 0xffffffe8
    9250:	ldr	r3, [r3, #16]
    9254:	sub	r2, fp, #76	; 0x4c
    9258:	mov	r1, r3
    925c:	ldr	r0, [fp, #-88]	; 0xffffffa8
    9260:	bl	4510 <eval_integer>
    9264:	mov	r3, r0
    9268:	cmp	r3, #0
    926c:	beq	9278 <eval_void+0x3d0>
    9270:	mvn	r3, #0
    9274:	b	9318 <eval_void+0x470>
    9278:	ldr	r3, [fp, #-24]	; 0xffffffe8
    927c:	ldr	r3, [r3, #20]
    9280:	sub	r2, fp, #84	; 0x54
    9284:	mov	r1, r3
    9288:	ldr	r0, [fp, #-88]	; 0xffffffa8
    928c:	bl	4510 <eval_integer>
    9290:	mov	r3, r0
    9294:	cmp	r3, #0
    9298:	beq	92a4 <eval_void+0x3fc>
    929c:	mvn	r3, #0
    92a0:	b	9318 <eval_void+0x470>
    92a4:	ldr	r3, [fp, #-88]	; 0xffffffa8
    92a8:	ldr	r3, [r3]
    92ac:	ldr	r0, [r3]
    92b0:	ldr	r3, [fp, #-24]	; 0xffffffe8
    92b4:	ldr	r1, [r3, #12]
    92b8:	ldrd	r2, [fp, #-76]	; 0xffffffb4
    92bc:	sub	r3, fp, #64	; 0x40
    92c0:	bl	0 <coda_product_variable_get_pointer>
    92c4:	mov	r3, r0
    92c8:	cmp	r3, #0
    92cc:	beq	92d8 <eval_void+0x430>
    92d0:	mvn	r3, #0
    92d4:	b	9318 <eval_void+0x470>
    92d8:	ldr	r1, [fp, #-64]	; 0xffffffc0
    92dc:	ldrd	r2, [fp, #-84]	; 0xffffffac
    92e0:	strd	r2, [r1]
    92e4:	b	9314 <eval_void+0x46c>
    92e8:	movw	r3, #0
    92ec:	movt	r3, #0
    92f0:	movw	r2, #3902	; 0xf3e
    92f4:	movw	r1, #0
    92f8:	movt	r1, #0
    92fc:	movw	r0, #0
    9300:	movt	r0, #0
    9304:	bl	0 <__assert_fail>
    9308:	nop	{0}
    930c:	b	9314 <eval_void+0x46c>
    9310:	nop	{0}
    9314:	mov	r3, #0
    9318:	mov	r0, r3
    931c:	sub	sp, fp, #20
    9320:	ldrd	r4, [sp]
    9324:	ldrd	r6, [sp, #8]
    9328:	ldr	fp, [sp, #16]
    932c:	add	sp, sp, #20
    9330:	pop	{pc}		; (ldr pc, [sp], #4)

00009334 <eval_cursor>:
    9334:	str	fp, [sp, #-8]!
    9338:	str	lr, [sp, #4]
    933c:	add	fp, sp, #4
    9340:	sub	sp, sp, #40	; 0x28
    9344:	str	r0, [fp, #-40]	; 0xffffffd8
    9348:	str	r1, [fp, #-44]	; 0xffffffd4
    934c:	ldr	r3, [fp, #-40]	; 0xffffffd8
    9350:	ldr	r3, [r3]
    9354:	cmp	r3, #0
    9358:	bne	937c <eval_cursor+0x48>
    935c:	movw	r3, #0
    9360:	movt	r3, #0
    9364:	movw	r2, #3913	; 0xf49
    9368:	movw	r1, #0
    936c:	movt	r1, #0
    9370:	movw	r0, #0
    9374:	movt	r0, #0
    9378:	bl	0 <__assert_fail>
    937c:	ldr	r3, [fp, #-44]	; 0xffffffd4
    9380:	str	r3, [fp, #-8]
    9384:	ldr	r3, [fp, #-8]
    9388:	ldr	r3, [r3]
    938c:	sub	r3, r3, #10
    9390:	cmp	r3, #28
    9394:	ldrls	pc, [pc, r3, lsl #2]
    9398:	b	98b8 <eval_cursor+0x584>
    939c:	.word	0x00009834
    93a0:	.word	0x000098b8
    93a4:	.word	0x000098b8
    93a8:	.word	0x000098b8
    93ac:	.word	0x000098b8
    93b0:	.word	0x000098b8
    93b4:	.word	0x000098b8
    93b8:	.word	0x000098b8
    93bc:	.word	0x000098b8
    93c0:	.word	0x000098b8
    93c4:	.word	0x000098b8
    93c8:	.word	0x000098b8
    93cc:	.word	0x000098b8
    93d0:	.word	0x000098b8
    93d4:	.word	0x000098b8
    93d8:	.word	0x000098b8
    93dc:	.word	0x000098b8
    93e0:	.word	0x000098b8
    93e4:	.word	0x000098b8
    93e8:	.word	0x000098b8
    93ec:	.word	0x000098b8
    93f0:	.word	0x000098b8
    93f4:	.word	0x00009594
    93f8:	.word	0x000097a8
    93fc:	.word	0x00009410
    9400:	.word	0x00009468
    9404:	.word	0x000098d8
    9408:	.word	0x0000974c
    940c:	.word	0x00009434
    9410:	ldr	r3, [fp, #-40]	; 0xffffffd8
    9414:	ldr	r2, [r3]
    9418:	ldr	r3, [fp, #-40]	; 0xffffffd8
    941c:	add	r3, r3, #8
    9420:	mov	r1, r2
    9424:	mov	r2, #520	; 0x208
    9428:	mov	r0, r3
    942c:	bl	0 <memcpy>
    9430:	b	990c <eval_cursor+0x5d8>
    9434:	ldr	r3, [fp, #-40]	; 0xffffffd8
    9438:	add	r2, r3, #8
    943c:	ldr	r3, [fp, #-40]	; 0xffffffd8
    9440:	ldr	r3, [r3]
    9444:	ldr	r3, [r3]
    9448:	mov	r1, r3
    944c:	mov	r0, r2
    9450:	bl	0 <coda_cursor_set_product>
    9454:	mov	r3, r0
    9458:	cmp	r3, #0
    945c:	beq	98e0 <eval_cursor+0x5ac>
    9460:	mvn	r3, #0
    9464:	b	9910 <eval_cursor+0x5dc>
    9468:	ldr	r3, [fp, #-8]
    946c:	ldr	r3, [r3, #16]
    9470:	cmp	r3, #0
    9474:	beq	94a0 <eval_cursor+0x16c>
    9478:	ldr	r3, [fp, #-8]
    947c:	ldr	r3, [r3, #16]
    9480:	mov	r1, r3
    9484:	ldr	r0, [fp, #-40]	; 0xffffffd8
    9488:	bl	9334 <eval_cursor>
    948c:	mov	r3, r0
    9490:	cmp	r3, #0
    9494:	beq	94a0 <eval_cursor+0x16c>
    9498:	mvn	r3, #0
    949c:	b	9910 <eval_cursor+0x5dc>
    94a0:	ldr	r3, [fp, #-40]	; 0xffffffd8
    94a4:	add	r3, r3, #8
    94a8:	sub	r2, fp, #12
    94ac:	mov	r1, r2
    94b0:	mov	r0, r3
    94b4:	bl	0 <coda_cursor_get_type_class>
    94b8:	mov	r3, r0
    94bc:	cmp	r3, #0
    94c0:	beq	94cc <eval_cursor+0x198>
    94c4:	mvn	r3, #0
    94c8:	b	9910 <eval_cursor+0x5dc>
    94cc:	ldr	r3, [fp, #-12]
    94d0:	cmp	r3, #6
    94d4:	bne	94fc <eval_cursor+0x1c8>
    94d8:	ldr	r3, [fp, #-40]	; 0xffffffd8
    94dc:	add	r3, r3, #8
    94e0:	mov	r0, r3
    94e4:	bl	0 <coda_cursor_use_base_type_of_special_type>
    94e8:	mov	r3, r0
    94ec:	cmp	r3, #0
    94f0:	beq	94fc <eval_cursor+0x1c8>
    94f4:	mvn	r3, #0
    94f8:	b	9910 <eval_cursor+0x5dc>
    94fc:	ldr	r3, [fp, #-8]
    9500:	ldr	r3, [r3, #12]
    9504:	cmp	r3, #0
    9508:	beq	953c <eval_cursor+0x208>
    950c:	ldr	r3, [fp, #-40]	; 0xffffffd8
    9510:	add	r2, r3, #8
    9514:	ldr	r3, [fp, #-8]
    9518:	ldr	r3, [r3, #12]
    951c:	mov	r1, r3
    9520:	mov	r0, r2
    9524:	bl	0 <coda_cursor_goto_record_field_by_name>
    9528:	mov	r3, r0
    952c:	cmp	r3, #0
    9530:	beq	98e8 <eval_cursor+0x5b4>
    9534:	mvn	r3, #0
    9538:	b	9910 <eval_cursor+0x5dc>
    953c:	ldr	r3, [fp, #-8]
    9540:	ldr	r3, [r3, #20]
    9544:	sub	r2, fp, #20
    9548:	mov	r1, r3
    954c:	ldr	r0, [fp, #-40]	; 0xffffffd8
    9550:	bl	4510 <eval_integer>
    9554:	mov	r3, r0
    9558:	cmp	r3, #0
    955c:	beq	9568 <eval_cursor+0x234>
    9560:	mvn	r3, #0
    9564:	b	9910 <eval_cursor+0x5dc>
    9568:	ldr	r3, [fp, #-40]	; 0xffffffd8
    956c:	add	r0, r3, #8
    9570:	ldrd	r2, [fp, #-20]	; 0xffffffec
    9574:	mov	r3, r2
    9578:	mov	r1, r3
    957c:	bl	0 <coda_cursor_goto_record_field_by_index>
    9580:	mov	r3, r0
    9584:	cmp	r3, #0
    9588:	beq	98e8 <eval_cursor+0x5b4>
    958c:	mvn	r3, #0
    9590:	b	9910 <eval_cursor+0x5dc>
    9594:	ldr	r3, [fp, #-8]
    9598:	ldr	r3, [r3, #16]
    959c:	cmp	r3, #0
    95a0:	beq	95cc <eval_cursor+0x298>
    95a4:	ldr	r3, [fp, #-8]
    95a8:	ldr	r3, [r3, #16]
    95ac:	mov	r1, r3
    95b0:	ldr	r0, [fp, #-40]	; 0xffffffd8
    95b4:	bl	9334 <eval_cursor>
    95b8:	mov	r3, r0
    95bc:	cmp	r3, #0
    95c0:	beq	9600 <eval_cursor+0x2cc>
    95c4:	mvn	r3, #0
    95c8:	b	9910 <eval_cursor+0x5dc>
    95cc:	ldr	r3, [fp, #-40]	; 0xffffffd8
    95d0:	add	r2, r3, #8
    95d4:	ldr	r3, [fp, #-40]	; 0xffffffd8
    95d8:	ldr	r3, [r3]
    95dc:	ldr	r3, [r3]
    95e0:	mov	r1, r3
    95e4:	mov	r0, r2
    95e8:	bl	0 <coda_cursor_set_product>
    95ec:	mov	r3, r0
    95f0:	cmp	r3, #0
    95f4:	beq	9600 <eval_cursor+0x2cc>
    95f8:	mvn	r3, #0
    95fc:	b	9910 <eval_cursor+0x5dc>
    9600:	ldr	r3, [fp, #-8]
    9604:	ldr	r3, [r3, #20]
    9608:	sub	r2, fp, #28
    960c:	mov	r1, r3
    9610:	ldr	r0, [fp, #-40]	; 0xffffffd8
    9614:	bl	4510 <eval_integer>
    9618:	mov	r3, r0
    961c:	cmp	r3, #0
    9620:	beq	962c <eval_cursor+0x2f8>
    9624:	mvn	r3, #0
    9628:	b	9910 <eval_cursor+0x5dc>
    962c:	ldr	r3, [pc, #752]	; 9924 <eval_cursor+0x5f0>
    9630:	ldr	r3, [pc, r3]
    9634:	mrc	15, 0, r2, cr13, cr0, {3}
    9638:	ldr	r3, [r2, r3]
    963c:	cmp	r3, #0
    9640:	bne	9720 <eval_cursor+0x3ec>
    9644:	ldr	r3, [fp, #-40]	; 0xffffffd8
    9648:	add	r3, r3, #8
    964c:	sub	r2, fp, #36	; 0x24
    9650:	mov	r1, r2
    9654:	mov	r0, r3
    9658:	bl	0 <coda_cursor_get_type_class>
    965c:	mov	r3, r0
    9660:	cmp	r3, #0
    9664:	beq	9670 <eval_cursor+0x33c>
    9668:	mvn	r3, #0
    966c:	b	9910 <eval_cursor+0x5dc>
    9670:	ldr	r3, [fp, #-36]	; 0xffffffdc
    9674:	cmp	r3, #1
    9678:	beq	96a8 <eval_cursor+0x374>
    967c:	ldr	r3, [fp, #-36]	; 0xffffffdc
    9680:	mov	r0, r3
    9684:	bl	0 <coda_type_get_class_name>
    9688:	mov	r3, r0
    968c:	mov	r2, r3
    9690:	movw	r1, #0
    9694:	movt	r1, #0
    9698:	mvn	r0, #104	; 0x68
    969c:	bl	0 <coda_set_error>
    96a0:	mvn	r3, #0
    96a4:	b	971c <eval_cursor+0x3e8>
    96a8:	ldr	r3, [fp, #-40]	; 0xffffffd8
    96ac:	add	r3, r3, #8
    96b0:	sub	r2, fp, #32
    96b4:	mov	r1, r2
    96b8:	mov	r0, r3
    96bc:	bl	0 <coda_cursor_get_num_elements>
    96c0:	mov	r3, r0
    96c4:	cmp	r3, #0
    96c8:	beq	96d4 <eval_cursor+0x3a0>
    96cc:	mvn	r3, #0
    96d0:	b	971c <eval_cursor+0x3e8>
    96d4:	ldrd	r2, [fp, #-28]	; 0xffffffe4
    96d8:	cmp	r2, #0
    96dc:	sbcs	r3, r3, #0
    96e0:	blt	9700 <eval_cursor+0x3cc>
    96e4:	ldr	r3, [fp, #-32]	; 0xffffffe0
    96e8:	mov	r2, r3
    96ec:	asr	r3, r2, #31
    96f0:	ldrd	r0, [fp, #-28]	; 0xffffffe4
    96f4:	cmp	r0, r2
    96f8:	sbcs	r3, r1, r3
    96fc:	blt	9720 <eval_cursor+0x3ec>
    9700:	ldrd	r2, [fp, #-28]	; 0xffffffe4
    9704:	ldr	r3, [fp, #-32]	; 0xffffffe0
    9708:	movw	r1, #0
    970c:	movt	r1, #0
    9710:	mvn	r0, #106	; 0x6a
    9714:	bl	0 <coda_set_error>
    9718:	mvn	r3, #0
    971c:	b	9910 <eval_cursor+0x5dc>
    9720:	ldr	r3, [fp, #-40]	; 0xffffffd8
    9724:	add	r0, r3, #8
    9728:	ldrd	r2, [fp, #-28]	; 0xffffffe4
    972c:	mov	r3, r2
    9730:	mov	r1, r3
    9734:	bl	0 <coda_cursor_goto_array_element_by_index>
    9738:	mov	r3, r0
    973c:	cmp	r3, #0
    9740:	beq	98f0 <eval_cursor+0x5bc>
    9744:	mvn	r3, #0
    9748:	b	9910 <eval_cursor+0x5dc>
    974c:	ldr	r3, [fp, #-8]
    9750:	ldr	r3, [r3, #16]
    9754:	cmp	r3, #0
    9758:	beq	9784 <eval_cursor+0x450>
    975c:	ldr	r3, [fp, #-8]
    9760:	ldr	r3, [r3, #16]
    9764:	mov	r1, r3
    9768:	ldr	r0, [fp, #-40]	; 0xffffffd8
    976c:	bl	9334 <eval_cursor>
    9770:	mov	r3, r0
    9774:	cmp	r3, #0
    9778:	beq	9784 <eval_cursor+0x450>
    977c:	mvn	r3, #0
    9780:	b	9910 <eval_cursor+0x5dc>
    9784:	ldr	r3, [fp, #-40]	; 0xffffffd8
    9788:	add	r3, r3, #8
    978c:	mov	r0, r3
    9790:	bl	0 <coda_cursor_goto_parent>
    9794:	mov	r3, r0
    9798:	cmp	r3, #0
    979c:	beq	98f8 <eval_cursor+0x5c4>
    97a0:	mvn	r3, #0
    97a4:	b	9910 <eval_cursor+0x5dc>
    97a8:	ldr	r3, [fp, #-8]
    97ac:	ldr	r3, [r3, #16]
    97b0:	cmp	r3, #0
    97b4:	beq	97e0 <eval_cursor+0x4ac>
    97b8:	ldr	r3, [fp, #-8]
    97bc:	ldr	r3, [r3, #16]
    97c0:	mov	r1, r3
    97c4:	ldr	r0, [fp, #-40]	; 0xffffffd8
    97c8:	bl	9334 <eval_cursor>
    97cc:	mov	r3, r0
    97d0:	cmp	r3, #0
    97d4:	beq	97e0 <eval_cursor+0x4ac>
    97d8:	mvn	r3, #0
    97dc:	b	9910 <eval_cursor+0x5dc>
    97e0:	ldr	r3, [fp, #-40]	; 0xffffffd8
    97e4:	add	r3, r3, #8
    97e8:	mov	r0, r3
    97ec:	bl	0 <coda_cursor_goto_attributes>
    97f0:	mov	r3, r0
    97f4:	cmp	r3, #0
    97f8:	beq	9804 <eval_cursor+0x4d0>
    97fc:	mvn	r3, #0
    9800:	b	9910 <eval_cursor+0x5dc>
    9804:	ldr	r3, [fp, #-40]	; 0xffffffd8
    9808:	add	r2, r3, #8
    980c:	ldr	r3, [fp, #-8]
    9810:	ldr	r3, [r3, #12]
    9814:	mov	r1, r3
    9818:	mov	r0, r2
    981c:	bl	0 <coda_cursor_goto_record_field_by_name>
    9820:	mov	r3, r0
    9824:	cmp	r3, #0
    9828:	beq	9900 <eval_cursor+0x5cc>
    982c:	mvn	r3, #0
    9830:	b	9910 <eval_cursor+0x5dc>
    9834:	ldr	r3, [fp, #-40]	; 0xffffffd8
    9838:	ldr	r3, [r3]
    983c:	ldr	r3, [r3]
    9840:	ldr	r3, [r3, #16]
    9844:	cmp	r3, #0
    9848:	beq	9884 <eval_cursor+0x550>
    984c:	ldr	r3, [fp, #-40]	; 0xffffffd8
    9850:	ldr	r3, [r3]
    9854:	ldr	r3, [r3]
    9858:	ldr	r3, [r3, #16]
    985c:	mov	r0, r3
    9860:	bl	0 <coda_type_get_format_name>
    9864:	mov	r3, r0
    9868:	mov	r2, r3
    986c:	movw	r1, #0
    9870:	movt	r1, #0
    9874:	mvn	r0, #400	; 0x190
    9878:	bl	0 <coda_set_error>
    987c:	mvn	r3, #0
    9880:	b	9910 <eval_cursor+0x5dc>
    9884:	ldr	r3, [fp, #-40]	; 0xffffffd8
    9888:	add	r2, r3, #8
    988c:	ldr	r3, [fp, #-40]	; 0xffffffd8
    9890:	ldr	r3, [r3]
    9894:	ldr	r3, [r3]
    9898:	mov	r1, r3
    989c:	mov	r0, r2
    98a0:	bl	0 <coda_ascii_cursor_set_asciilines>
    98a4:	mov	r3, r0
    98a8:	cmp	r3, #0
    98ac:	beq	9908 <eval_cursor+0x5d4>
    98b0:	mvn	r3, #0
    98b4:	b	9910 <eval_cursor+0x5dc>
    98b8:	movw	r3, #0
    98bc:	movt	r3, #0
    98c0:	movw	r2, #4079	; 0xfef
    98c4:	movw	r1, #0
    98c8:	movt	r1, #0
    98cc:	movw	r0, #0
    98d0:	movt	r0, #0
    98d4:	bl	0 <__assert_fail>
    98d8:	nop	{0}
    98dc:	b	990c <eval_cursor+0x5d8>
    98e0:	nop	{0}
    98e4:	b	990c <eval_cursor+0x5d8>
    98e8:	nop	{0}
    98ec:	b	990c <eval_cursor+0x5d8>
    98f0:	nop	{0}
    98f4:	b	990c <eval_cursor+0x5d8>
    98f8:	nop	{0}
    98fc:	b	990c <eval_cursor+0x5d8>
    9900:	nop	{0}
    9904:	b	990c <eval_cursor+0x5d8>
    9908:	nop	{0}
    990c:	mov	r3, #0
    9910:	mov	r0, r3
    9914:	sub	sp, fp, #4
    9918:	ldr	fp, [sp]
    991c:	add	sp, sp, #4
    9920:	pop	{pc}		; (ldr pc, [sp], #4)
    9924:	.word	0x000002ec

00009928 <coda_expression_eval_void>:
    9928:	str	fp, [sp, #-8]!
    992c:	str	lr, [sp, #4]
    9930:	add	fp, sp, #4
    9934:	sub	sp, sp, #576	; 0x240
    9938:	str	r0, [fp, #-576]	; 0xfffffdc0
    993c:	str	r1, [fp, #-580]	; 0xfffffdbc
    9940:	ldr	r3, [fp, #-576]	; 0xfffffdc0
    9944:	ldr	r3, [r3, #4]
    9948:	cmp	r3, #5
    994c:	beq	9968 <coda_expression_eval_void+0x40>
    9950:	movw	r1, #0
    9954:	movt	r1, #0
    9958:	mvn	r0, #99	; 0x63
    995c:	bl	0 <coda_set_error>
    9960:	mvn	r3, #0
    9964:	b	99c0 <coda_expression_eval_void+0x98>
    9968:	ldr	r3, [fp, #-580]	; 0xfffffdbc
    996c:	cmp	r3, #0
    9970:	bne	999c <coda_expression_eval_void+0x74>
    9974:	ldr	r3, [fp, #-576]	; 0xfffffdc0
    9978:	ldr	r3, [r3, #8]
    997c:	cmp	r3, #0
    9980:	bne	999c <coda_expression_eval_void+0x74>
    9984:	movw	r1, #0
    9988:	movt	r1, #0
    998c:	mvn	r0, #99	; 0x63
    9990:	bl	0 <coda_set_error>
    9994:	mvn	r3, #0
    9998:	b	99c0 <coda_expression_eval_void+0x98>
    999c:	sub	r3, fp, #572	; 0x23c
    99a0:	ldr	r1, [fp, #-580]	; 0xfffffdbc
    99a4:	mov	r0, r3
    99a8:	bl	1248 <init_eval_info>
    99ac:	sub	r3, fp, #572	; 0x23c
    99b0:	ldr	r1, [fp, #-576]	; 0xfffffdc0
    99b4:	mov	r0, r3
    99b8:	bl	8ea8 <eval_void>
    99bc:	mov	r3, r0
    99c0:	mov	r0, r3
    99c4:	sub	sp, fp, #4
    99c8:	ldr	fp, [sp]
    99cc:	add	sp, sp, #4
    99d0:	pop	{pc}		; (ldr pc, [sp], #4)

000099d4 <print_escaped_string>:
    99d4:	str	fp, [sp, #-8]!
    99d8:	str	lr, [sp, #4]
    99dc:	add	fp, sp, #4
    99e0:	sub	sp, sp, #24
    99e4:	str	r0, [fp, #-16]
    99e8:	str	r1, [fp, #-20]	; 0xffffffec
    99ec:	str	r2, [fp, #-24]	; 0xffffffe8
    99f0:	str	r3, [fp, #-28]	; 0xffffffe4
    99f4:	mov	r3, #0
    99f8:	str	r3, [fp, #-8]
    99fc:	ldr	r3, [fp, #-20]	; 0xffffffec
    9a00:	cmp	r3, #0
    9a04:	beq	9e2c <print_escaped_string+0x458>
    9a08:	ldr	r3, [fp, #-16]
    9a0c:	cmp	r3, #0
    9a10:	beq	9e2c <print_escaped_string+0x458>
    9a14:	ldr	r3, [fp, #-20]	; 0xffffffec
    9a18:	cmp	r3, #0
    9a1c:	bge	9e18 <print_escaped_string+0x444>
    9a20:	ldr	r0, [fp, #-16]
    9a24:	bl	0 <strlen>
    9a28:	mov	r3, r0
    9a2c:	str	r3, [fp, #-20]	; 0xffffffec
    9a30:	b	9e18 <print_escaped_string+0x444>
    9a34:	ldr	r3, [fp, #-8]
    9a38:	ldr	r2, [fp, #-16]
    9a3c:	add	r3, r2, r3
    9a40:	ldrb	r3, [r3]
    9a44:	sub	r3, r3, #7
    9a48:	cmp	r3, #85	; 0x55
    9a4c:	ldrls	pc, [pc, r3, lsl #2]
    9a50:	b	9d80 <print_escaped_string+0x3ac>
    9a54:	.word	0x00009bc0
    9a58:	.word	0x00009bd4
    9a5c:	.word	0x00009c24
    9a60:	.word	0x00009bfc
    9a64:	.word	0x00009c38
    9a68:	.word	0x00009be8
    9a6c:	.word	0x00009c10
    9a70:	.word	0x00009d80
    9a74:	.word	0x00009d80
    9a78:	.word	0x00009d80
    9a7c:	.word	0x00009d80
    9a80:	.word	0x00009d80
    9a84:	.word	0x00009d80
    9a88:	.word	0x00009d80
    9a8c:	.word	0x00009d80
    9a90:	.word	0x00009d80
    9a94:	.word	0x00009d80
    9a98:	.word	0x00009d80
    9a9c:	.word	0x00009d80
    9aa0:	.word	0x00009d80
    9aa4:	.word	0x00009bac
    9aa8:	.word	0x00009d80
    9aac:	.word	0x00009d80
    9ab0:	.word	0x00009d80
    9ab4:	.word	0x00009d80
    9ab8:	.word	0x00009d44
    9abc:	.word	0x00009d80
    9ac0:	.word	0x00009c60
    9ac4:	.word	0x00009d80
    9ac8:	.word	0x00009d80
    9acc:	.word	0x00009d80
    9ad0:	.word	0x00009d08
    9ad4:	.word	0x00009d80
    9ad8:	.word	0x00009d80
    9adc:	.word	0x00009d80
    9ae0:	.word	0x00009d80
    9ae4:	.word	0x00009d80
    9ae8:	.word	0x00009d80
    9aec:	.word	0x00009d80
    9af0:	.word	0x00009d80
    9af4:	.word	0x00009d80
    9af8:	.word	0x00009d80
    9afc:	.word	0x00009d80
    9b00:	.word	0x00009d80
    9b04:	.word	0x00009d80
    9b08:	.word	0x00009d80
    9b0c:	.word	0x00009d80
    9b10:	.word	0x00009d80
    9b14:	.word	0x00009d80
    9b18:	.word	0x00009d80
    9b1c:	.word	0x00009d80
    9b20:	.word	0x00009d80
    9b24:	.word	0x00009d80
    9b28:	.word	0x00009c90
    9b2c:	.word	0x00009d80
    9b30:	.word	0x00009ccc
    9b34:	.word	0x00009d80
    9b38:	.word	0x00009d80
    9b3c:	.word	0x00009d80
    9b40:	.word	0x00009d80
    9b44:	.word	0x00009d80
    9b48:	.word	0x00009d80
    9b4c:	.word	0x00009d80
    9b50:	.word	0x00009d80
    9b54:	.word	0x00009d80
    9b58:	.word	0x00009d80
    9b5c:	.word	0x00009d80
    9b60:	.word	0x00009d80
    9b64:	.word	0x00009d80
    9b68:	.word	0x00009d80
    9b6c:	.word	0x00009d80
    9b70:	.word	0x00009d80
    9b74:	.word	0x00009d80
    9b78:	.word	0x00009d80
    9b7c:	.word	0x00009d80
    9b80:	.word	0x00009d80
    9b84:	.word	0x00009d80
    9b88:	.word	0x00009d80
    9b8c:	.word	0x00009d80
    9b90:	.word	0x00009d80
    9b94:	.word	0x00009d80
    9b98:	.word	0x00009d80
    9b9c:	.word	0x00009d80
    9ba0:	.word	0x00009d80
    9ba4:	.word	0x00009d80
    9ba8:	.word	0x00009c4c
    9bac:	ldr	r3, [fp, #-24]	; 0xffffffe8
    9bb0:	movw	r0, #0
    9bb4:	movt	r0, #0
    9bb8:	blx	r3
    9bbc:	b	9e0c <print_escaped_string+0x438>
    9bc0:	ldr	r3, [fp, #-24]	; 0xffffffe8
    9bc4:	movw	r0, #0
    9bc8:	movt	r0, #0
    9bcc:	blx	r3
    9bd0:	b	9e0c <print_escaped_string+0x438>
    9bd4:	ldr	r3, [fp, #-24]	; 0xffffffe8
    9bd8:	movw	r0, #0
    9bdc:	movt	r0, #0
    9be0:	blx	r3
    9be4:	b	9e0c <print_escaped_string+0x438>
    9be8:	ldr	r3, [fp, #-24]	; 0xffffffe8
    9bec:	movw	r0, #0
    9bf0:	movt	r0, #0
    9bf4:	blx	r3
    9bf8:	b	9e0c <print_escaped_string+0x438>
    9bfc:	ldr	r3, [fp, #-24]	; 0xffffffe8
    9c00:	movw	r0, #0
    9c04:	movt	r0, #0
    9c08:	blx	r3
    9c0c:	b	9e0c <print_escaped_string+0x438>
    9c10:	ldr	r3, [fp, #-24]	; 0xffffffe8
    9c14:	movw	r0, #0
    9c18:	movt	r0, #0
    9c1c:	blx	r3
    9c20:	b	9e0c <print_escaped_string+0x438>
    9c24:	ldr	r3, [fp, #-24]	; 0xffffffe8
    9c28:	movw	r0, #0
    9c2c:	movt	r0, #0
    9c30:	blx	r3
    9c34:	b	9e0c <print_escaped_string+0x438>
    9c38:	ldr	r3, [fp, #-24]	; 0xffffffe8
    9c3c:	movw	r0, #0
    9c40:	movt	r0, #0
    9c44:	blx	r3
    9c48:	b	9e0c <print_escaped_string+0x438>
    9c4c:	ldr	r3, [fp, #-24]	; 0xffffffe8
    9c50:	movw	r0, #0
    9c54:	movt	r0, #0
    9c58:	blx	r3
    9c5c:	b	9e0c <print_escaped_string+0x438>
    9c60:	ldr	r3, [fp, #-28]	; 0xffffffe4
    9c64:	cmp	r3, #0
    9c68:	beq	9c78 <print_escaped_string+0x2a4>
    9c6c:	movw	r3, #0
    9c70:	movt	r3, #0
    9c74:	b	9c80 <print_escaped_string+0x2ac>
    9c78:	movw	r3, #0
    9c7c:	movt	r3, #0
    9c80:	ldr	r2, [fp, #-24]	; 0xffffffe8
    9c84:	mov	r0, r3
    9c88:	blx	r2
    9c8c:	b	9e0c <print_escaped_string+0x438>
    9c90:	ldr	r3, [fp, #-28]	; 0xffffffe4
    9c94:	cmp	r3, #0
    9c98:	bne	9ca8 <print_escaped_string+0x2d4>
    9c9c:	ldr	r3, [fp, #4]
    9ca0:	cmp	r3, #0
    9ca4:	beq	9cb4 <print_escaped_string+0x2e0>
    9ca8:	movw	r3, #0
    9cac:	movt	r3, #0
    9cb0:	b	9cbc <print_escaped_string+0x2e8>
    9cb4:	movw	r3, #0
    9cb8:	movt	r3, #0
    9cbc:	ldr	r2, [fp, #-24]	; 0xffffffe8
    9cc0:	mov	r0, r3
    9cc4:	blx	r2
    9cc8:	b	9e0c <print_escaped_string+0x438>
    9ccc:	ldr	r3, [fp, #-28]	; 0xffffffe4
    9cd0:	cmp	r3, #0
    9cd4:	bne	9ce4 <print_escaped_string+0x310>
    9cd8:	ldr	r3, [fp, #4]
    9cdc:	cmp	r3, #0
    9ce0:	beq	9cf0 <print_escaped_string+0x31c>
    9ce4:	movw	r3, #0
    9ce8:	movt	r3, #0
    9cec:	b	9cf8 <print_escaped_string+0x324>
    9cf0:	movw	r3, #0
    9cf4:	movt	r3, #0
    9cf8:	ldr	r2, [fp, #-24]	; 0xffffffe8
    9cfc:	mov	r0, r3
    9d00:	blx	r2
    9d04:	b	9e0c <print_escaped_string+0x438>
    9d08:	ldr	r3, [fp, #-28]	; 0xffffffe4
    9d0c:	cmp	r3, #0
    9d10:	bne	9d20 <print_escaped_string+0x34c>
    9d14:	ldr	r3, [fp, #4]
    9d18:	cmp	r3, #0
    9d1c:	beq	9d2c <print_escaped_string+0x358>
    9d20:	movw	r3, #0
    9d24:	movt	r3, #0
    9d28:	b	9d34 <print_escaped_string+0x360>
    9d2c:	movw	r3, #0
    9d30:	movt	r3, #0
    9d34:	ldr	r2, [fp, #-24]	; 0xffffffe8
    9d38:	mov	r0, r3
    9d3c:	blx	r2
    9d40:	b	9e0c <print_escaped_string+0x438>
    9d44:	ldr	r3, [fp, #-28]	; 0xffffffe4
    9d48:	cmp	r3, #0
    9d4c:	bne	9d5c <print_escaped_string+0x388>
    9d50:	ldr	r3, [fp, #4]
    9d54:	cmp	r3, #0
    9d58:	beq	9d68 <print_escaped_string+0x394>
    9d5c:	movw	r3, #0
    9d60:	movt	r3, #0
    9d64:	b	9d70 <print_escaped_string+0x39c>
    9d68:	movw	r3, #0
    9d6c:	movt	r3, #0
    9d70:	ldr	r2, [fp, #-24]	; 0xffffffe8
    9d74:	mov	r0, r3
    9d78:	blx	r2
    9d7c:	b	9e0c <print_escaped_string+0x438>
    9d80:	bl	0 <__ctype_b_loc>
    9d84:	mov	r3, r0
    9d88:	ldr	r2, [r3]
    9d8c:	ldr	r3, [fp, #-8]
    9d90:	ldr	r1, [fp, #-16]
    9d94:	add	r3, r1, r3
    9d98:	ldrb	r3, [r3]
    9d9c:	lsl	r3, r3, #1
    9da0:	add	r3, r2, r3
    9da4:	ldrh	r3, [r3]
    9da8:	and	r3, r3, #16384	; 0x4000
    9dac:	cmp	r3, #0
    9db0:	bne	9de0 <print_escaped_string+0x40c>
    9db4:	ldr	r3, [fp, #-8]
    9db8:	ldr	r2, [fp, #-16]
    9dbc:	add	r3, r2, r3
    9dc0:	ldrb	r3, [r3]
    9dc4:	mov	r2, r3
    9dc8:	ldr	r3, [fp, #-24]	; 0xffffffe8
    9dcc:	mov	r1, r2
    9dd0:	movw	r0, #0
    9dd4:	movt	r0, #0
    9dd8:	blx	r3
    9ddc:	b	9e08 <print_escaped_string+0x434>
    9de0:	ldr	r3, [fp, #-8]
    9de4:	ldr	r2, [fp, #-16]
    9de8:	add	r3, r2, r3
    9dec:	ldrb	r3, [r3]
    9df0:	mov	r2, r3
    9df4:	ldr	r3, [fp, #-24]	; 0xffffffe8
    9df8:	mov	r1, r2
    9dfc:	movw	r0, #0
    9e00:	movt	r0, #0
    9e04:	blx	r3
    9e08:	nop	{0}
    9e0c:	ldr	r3, [fp, #-8]
    9e10:	add	r3, r3, #1
    9e14:	str	r3, [fp, #-8]
    9e18:	ldr	r2, [fp, #-8]
    9e1c:	ldr	r3, [fp, #-20]	; 0xffffffec
    9e20:	cmp	r2, r3
    9e24:	blt	9a34 <print_escaped_string+0x60>
    9e28:	b	9e30 <print_escaped_string+0x45c>
    9e2c:	nop	{0}
    9e30:	sub	sp, fp, #4
    9e34:	ldr	fp, [sp]
    9e38:	add	sp, sp, #4
    9e3c:	pop	{pc}		; (ldr pc, [sp], #4)

00009e40 <print_expression>:
    9e40:	str	fp, [sp, #-8]!
    9e44:	str	lr, [sp, #4]
    9e48:	add	fp, sp, #4
    9e4c:	sub	sp, sp, #72	; 0x48
    9e50:	str	r0, [fp, #-56]	; 0xffffffc8
    9e54:	str	r1, [fp, #-60]	; 0xffffffc4
    9e58:	str	r2, [fp, #-64]	; 0xffffffc0
    9e5c:	str	r3, [fp, #-68]	; 0xffffffbc
    9e60:	ldr	r3, [fp, #-56]	; 0xffffffc8
    9e64:	cmp	r3, #0
    9e68:	bne	9e8c <print_expression+0x4c>
    9e6c:	movw	r3, #0
    9e70:	movt	r3, #0
    9e74:	movw	r2, #4196	; 0x1064
    9e78:	movw	r1, #0
    9e7c:	movt	r1, #0
    9e80:	movw	r0, #0
    9e84:	movt	r0, #0
    9e88:	bl	0 <__assert_fail>
    9e8c:	ldr	r3, [fp, #-56]	; 0xffffffc8
    9e90:	ldr	r3, [r3]
    9e94:	cmp	r3, #86	; 0x56
    9e98:	ldrls	pc, [pc, r3, lsl #2]
    9e9c:	b	c7cc <print_expression+0x298c>
    9ea0:	.word	0x00009ffc
    9ea4:	.word	0x0000a05c
    9ea8:	.word	0x0000a328
    9eac:	.word	0x0000a0e8
    9eb0:	.word	0x0000a298
    9eb4:	.word	0x0000a43c
    9eb8:	.word	0x0000a4cc
    9ebc:	.word	0x0000a55c
    9ec0:	.word	0x0000a178
    9ec4:	.word	0x0000a208
    9ec8:	.word	0x0000a5ec
    9ecc:	.word	0x0000c620
    9ed0:	.word	0x0000a61c
    9ed4:	.word	0x0000a67c
    9ed8:	.word	0x0000a6dc
    9edc:	.word	0x0000a73c
    9ee0:	.word	0x0000a79c
    9ee4:	.word	0x0000a3dc
    9ee8:	.word	0x0000a87c
    9eec:	.word	0x0000a8ec
    9ef0:	.word	0x0000a920
    9ef4:	.word	0x0000a950
    9ef8:	.word	0x0000a950
    9efc:	.word	0x0000a9d0
    9f00:	.word	0x0000aa60
    9f04:	.word	0x0000aaec
    9f08:	.word	0x0000ab78
    9f0c:	.word	0x0000abd8
    9f10:	.word	0x0000ac08
    9f14:	.word	0x0000ac38
    9f18:	.word	0x0000ac98
    9f1c:	.word	0x0000acf8
    9f20:	.word	0x0000ae44
    9f24:	.word	0x0000aeb8
    9f28:	.word	0x0000af08
    9f2c:	.word	0x0000af1c
    9f30:	.word	0x0000af80
    9f34:	.word	0x0000af94
    9f38:	.word	0x0000afe8
    9f3c:	.word	0x0000affc
    9f40:	.word	0x0000b05c
    9f44:	.word	0x0000b110
    9f48:	.word	0x0000b1c4
    9f4c:	.word	0x0000b268
    9f50:	.word	0x0000b2c8
    9f54:	.word	0x0000b300
    9f58:	.word	0x0000b360
    9f5c:	.word	0x0000b3c0
    9f60:	.word	0x0000b420
    9f64:	.word	0x0000b480
    9f68:	.word	0x0000b4e0
    9f6c:	.word	0x0000b540
    9f70:	.word	0x0000b5f4
    9f74:	.word	0x0000b6a8
    9f78:	.word	0x0000b750
    9f7c:	.word	0x0000b7f8
    9f80:	.word	0x0000b858
    9f84:	.word	0x0000b8e8
    9f88:	.word	0x0000b978
    9f8c:	.word	0x0000ba04
    9f90:	.word	0x0000ba90
    9f94:	.word	0x0000bac4
    9f98:	.word	0x0000bb50
    9f9c:	.word	0x0000bb84
    9fa0:	.word	0x0000bbe4
    9fa4:	.word	0x0000bc44
    9fa8:	.word	0x0000bcd0
    9fac:	.word	0x0000bd5c
    9fb0:	.word	0x0000bd8c
    9fb4:	.word	0x0000bdbc
    9fb8:	.word	0x0000bdec
    9fbc:	.word	0x0000be1c
    9fc0:	.word	0x0000beec
    9fc4:	.word	0x0000bf4c
    9fc8:	.word	0x0000bfac
    9fcc:	.word	0x0000c01c
    9fd0:	.word	0x0000c0bc
    9fd4:	.word	0x0000c15c
    9fd8:	.word	0x0000c21c
    9fdc:	.word	0x0000c2a8
    9fe0:	.word	0x0000c338
    9fe4:	.word	0x0000c398
    9fe8:	.word	0x0000c428
    9fec:	.word	0x0000c490
    9ff0:	.word	0x0000c4f8
    9ff4:	.word	0x0000c5b0
    9ff8:	.word	0x0000c6b0
    9ffc:	ldr	r3, [fp, #-68]	; 0xffffffbc
    a000:	cmp	r3, #0
    a004:	beq	a014 <print_expression+0x1d4>
    a008:	movw	r3, #0
    a00c:	movt	r3, #0
    a010:	b	a01c <print_expression+0x1dc>
    a014:	movw	r3, #0
    a018:	movt	r3, #0
    a01c:	ldr	r2, [fp, #-60]	; 0xffffffc4
    a020:	mov	r0, r3
    a024:	blx	r2
    a028:	ldr	r3, [fp, #-56]	; 0xffffffc8
    a02c:	ldr	r0, [r3, #16]
    a030:	mov	r3, #15
    a034:	str	r3, [sp]
    a038:	ldr	r3, [fp, #-68]	; 0xffffffbc
    a03c:	ldr	r2, [fp, #-64]	; 0xffffffc0
    a040:	ldr	r1, [fp, #-60]	; 0xffffffc4
    a044:	bl	9e40 <print_expression>
    a048:	ldr	r3, [fp, #-60]	; 0xffffffc4
    a04c:	movw	r0, #0
    a050:	movt	r0, #0
    a054:	blx	r3
    a058:	b	c7cc <print_expression+0x298c>
    a05c:	ldr	r3, [fp, #4]
    a060:	cmp	r3, #3
    a064:	bgt	a078 <print_expression+0x238>
    a068:	ldr	r3, [fp, #-60]	; 0xffffffc4
    a06c:	movw	r0, #0
    a070:	movt	r0, #0
    a074:	blx	r3
    a078:	ldr	r3, [fp, #-56]	; 0xffffffc8
    a07c:	ldr	r0, [r3, #16]
    a080:	mov	r3, #4
    a084:	str	r3, [sp]
    a088:	ldr	r3, [fp, #-68]	; 0xffffffbc
    a08c:	ldr	r2, [fp, #-64]	; 0xffffffc0
    a090:	ldr	r1, [fp, #-60]	; 0xffffffc4
    a094:	bl	9e40 <print_expression>
    a098:	ldr	r3, [fp, #-60]	; 0xffffffc4
    a09c:	movw	r0, #0
    a0a0:	movt	r0, #0
    a0a4:	blx	r3
    a0a8:	ldr	r3, [fp, #-56]	; 0xffffffc8
    a0ac:	ldr	r0, [r3, #20]
    a0b0:	mov	r3, #4
    a0b4:	str	r3, [sp]
    a0b8:	ldr	r3, [fp, #-68]	; 0xffffffbc
    a0bc:	ldr	r2, [fp, #-64]	; 0xffffffc0
    a0c0:	ldr	r1, [fp, #-60]	; 0xffffffc4
    a0c4:	bl	9e40 <print_expression>
    a0c8:	ldr	r3, [fp, #4]
    a0cc:	cmp	r3, #3
    a0d0:	bgt	c748 <print_expression+0x2908>
    a0d4:	ldr	r3, [fp, #-60]	; 0xffffffc4
    a0d8:	movw	r0, #0
    a0dc:	movt	r0, #0
    a0e0:	blx	r3
    a0e4:	b	c748 <print_expression+0x2908>
    a0e8:	ldr	r3, [fp, #-68]	; 0xffffffbc
    a0ec:	cmp	r3, #0
    a0f0:	beq	a100 <print_expression+0x2c0>
    a0f4:	movw	r3, #0
    a0f8:	movt	r3, #0
    a0fc:	b	a108 <print_expression+0x2c8>
    a100:	movw	r3, #0
    a104:	movt	r3, #0
    a108:	ldr	r2, [fp, #-60]	; 0xffffffc4
    a10c:	mov	r0, r3
    a110:	blx	r2
    a114:	ldr	r3, [fp, #-56]	; 0xffffffc8
    a118:	ldr	r0, [r3, #16]
    a11c:	mov	r3, #15
    a120:	str	r3, [sp]
    a124:	ldr	r3, [fp, #-68]	; 0xffffffbc
    a128:	ldr	r2, [fp, #-64]	; 0xffffffc0
    a12c:	ldr	r1, [fp, #-60]	; 0xffffffc4
    a130:	bl	9e40 <print_expression>
    a134:	ldr	r3, [fp, #-60]	; 0xffffffc4
    a138:	movw	r0, #0
    a13c:	movt	r0, #0
    a140:	blx	r3
    a144:	ldr	r3, [fp, #-56]	; 0xffffffc8
    a148:	ldr	r0, [r3, #20]
    a14c:	mov	r3, #15
    a150:	str	r3, [sp]
    a154:	ldr	r3, [fp, #-68]	; 0xffffffbc
    a158:	ldr	r2, [fp, #-64]	; 0xffffffc0
    a15c:	ldr	r1, [fp, #-60]	; 0xffffffc4
    a160:	bl	9e40 <print_expression>
    a164:	ldr	r3, [fp, #-60]	; 0xffffffc4
    a168:	movw	r0, #0
    a16c:	movt	r0, #0
    a170:	blx	r3
    a174:	b	c7cc <print_expression+0x298c>
    a178:	ldr	r3, [fp, #-68]	; 0xffffffbc
    a17c:	cmp	r3, #0
    a180:	beq	a190 <print_expression+0x350>
    a184:	movw	r3, #0
    a188:	movt	r3, #0
    a18c:	b	a198 <print_expression+0x358>
    a190:	movw	r3, #0
    a194:	movt	r3, #0
    a198:	ldr	r2, [fp, #-60]	; 0xffffffc4
    a19c:	mov	r0, r3
    a1a0:	blx	r2
    a1a4:	ldr	r3, [fp, #-56]	; 0xffffffc8
    a1a8:	ldr	r0, [r3, #16]
    a1ac:	mov	r3, #15
    a1b0:	str	r3, [sp]
    a1b4:	ldr	r3, [fp, #-68]	; 0xffffffbc
    a1b8:	ldr	r2, [fp, #-64]	; 0xffffffc0
    a1bc:	ldr	r1, [fp, #-60]	; 0xffffffc4
    a1c0:	bl	9e40 <print_expression>
    a1c4:	ldr	r3, [fp, #-60]	; 0xffffffc4
    a1c8:	movw	r0, #0
    a1cc:	movt	r0, #0
    a1d0:	blx	r3
    a1d4:	ldr	r3, [fp, #-56]	; 0xffffffc8
    a1d8:	ldr	r0, [r3, #20]
    a1dc:	mov	r3, #15
    a1e0:	str	r3, [sp]
    a1e4:	ldr	r3, [fp, #-68]	; 0xffffffbc
    a1e8:	ldr	r2, [fp, #-64]	; 0xffffffc0
    a1ec:	ldr	r1, [fp, #-60]	; 0xffffffc4
    a1f0:	bl	9e40 <print_expression>
    a1f4:	ldr	r3, [fp, #-60]	; 0xffffffc4
    a1f8:	movw	r0, #0
    a1fc:	movt	r0, #0
    a200:	blx	r3
    a204:	b	c7cc <print_expression+0x298c>
    a208:	ldr	r3, [fp, #-68]	; 0xffffffbc
    a20c:	cmp	r3, #0
    a210:	beq	a220 <print_expression+0x3e0>
    a214:	movw	r3, #0
    a218:	movt	r3, #0
    a21c:	b	a228 <print_expression+0x3e8>
    a220:	movw	r3, #0
    a224:	movt	r3, #0
    a228:	ldr	r2, [fp, #-60]	; 0xffffffc4
    a22c:	mov	r0, r3
    a230:	blx	r2
    a234:	ldr	r3, [fp, #-56]	; 0xffffffc8
    a238:	ldr	r0, [r3, #16]
    a23c:	mov	r3, #15
    a240:	str	r3, [sp]
    a244:	ldr	r3, [fp, #-68]	; 0xffffffbc
    a248:	ldr	r2, [fp, #-64]	; 0xffffffc0
    a24c:	ldr	r1, [fp, #-60]	; 0xffffffc4
    a250:	bl	9e40 <print_expression>
    a254:	ldr	r3, [fp, #-60]	; 0xffffffc4
    a258:	movw	r0, #0
    a25c:	movt	r0, #0
    a260:	blx	r3
    a264:	ldr	r3, [fp, #-56]	; 0xffffffc8
    a268:	ldr	r0, [r3, #20]
    a26c:	mov	r3, #15
    a270:	str	r3, [sp]
    a274:	ldr	r3, [fp, #-68]	; 0xffffffbc
    a278:	ldr	r2, [fp, #-64]	; 0xffffffc0
    a27c:	ldr	r1, [fp, #-60]	; 0xffffffc4
    a280:	bl	9e40 <print_expression>
    a284:	ldr	r3, [fp, #-60]	; 0xffffffc4
    a288:	movw	r0, #0
    a28c:	movt	r0, #0
    a290:	blx	r3
    a294:	b	c7cc <print_expression+0x298c>
    a298:	ldr	r3, [fp, #-68]	; 0xffffffbc
    a29c:	cmp	r3, #0
    a2a0:	beq	a2b0 <print_expression+0x470>
    a2a4:	movw	r3, #0
    a2a8:	movt	r3, #0
    a2ac:	b	a2b8 <print_expression+0x478>
    a2b0:	movw	r3, #0
    a2b4:	movt	r3, #0
    a2b8:	ldr	r2, [fp, #-60]	; 0xffffffc4
    a2bc:	mov	r0, r3
    a2c0:	blx	r2
    a2c4:	ldr	r3, [fp, #-56]	; 0xffffffc8
    a2c8:	ldr	r0, [r3, #16]
    a2cc:	mov	r3, #15
    a2d0:	str	r3, [sp]
    a2d4:	ldr	r3, [fp, #-68]	; 0xffffffbc
    a2d8:	ldr	r2, [fp, #-64]	; 0xffffffc0
    a2dc:	ldr	r1, [fp, #-60]	; 0xffffffc4
    a2e0:	bl	9e40 <print_expression>
    a2e4:	ldr	r3, [fp, #-60]	; 0xffffffc4
    a2e8:	movw	r0, #0
    a2ec:	movt	r0, #0
    a2f0:	blx	r3
    a2f4:	ldr	r3, [fp, #-56]	; 0xffffffc8
    a2f8:	ldr	r0, [r3, #20]
    a2fc:	mov	r3, #15
    a300:	str	r3, [sp]
    a304:	ldr	r3, [fp, #-68]	; 0xffffffbc
    a308:	ldr	r2, [fp, #-64]	; 0xffffffc0
    a30c:	ldr	r1, [fp, #-60]	; 0xffffffc4
    a310:	bl	9e40 <print_expression>
    a314:	ldr	r3, [fp, #-60]	; 0xffffffc4
    a318:	movw	r0, #0
    a31c:	movt	r0, #0
    a320:	blx	r3
    a324:	b	c7cc <print_expression+0x298c>
    a328:	ldr	r3, [fp, #4]
    a32c:	cmp	r3, #6
    a330:	bgt	a344 <print_expression+0x504>
    a334:	ldr	r3, [fp, #-60]	; 0xffffffc4
    a338:	movw	r0, #0
    a33c:	movt	r0, #0
    a340:	blx	r3
    a344:	ldr	r3, [fp, #-56]	; 0xffffffc8
    a348:	ldr	r0, [r3, #16]
    a34c:	mov	r3, #7
    a350:	str	r3, [sp]
    a354:	ldr	r3, [fp, #-68]	; 0xffffffbc
    a358:	ldr	r2, [fp, #-64]	; 0xffffffc0
    a35c:	ldr	r1, [fp, #-60]	; 0xffffffc4
    a360:	bl	9e40 <print_expression>
    a364:	ldr	r3, [fp, #-68]	; 0xffffffbc
    a368:	cmp	r3, #0
    a36c:	bne	a37c <print_expression+0x53c>
    a370:	ldr	r3, [fp, #-64]	; 0xffffffc0
    a374:	cmp	r3, #0
    a378:	beq	a388 <print_expression+0x548>
    a37c:	movw	r3, #0
    a380:	movt	r3, #0
    a384:	b	a390 <print_expression+0x550>
    a388:	movw	r3, #0
    a38c:	movt	r3, #0
    a390:	ldr	r2, [fp, #-60]	; 0xffffffc4
    a394:	mov	r0, r3
    a398:	blx	r2
    a39c:	ldr	r3, [fp, #-56]	; 0xffffffc8
    a3a0:	ldr	r0, [r3, #20]
    a3a4:	mov	r3, #7
    a3a8:	str	r3, [sp]
    a3ac:	ldr	r3, [fp, #-68]	; 0xffffffbc
    a3b0:	ldr	r2, [fp, #-64]	; 0xffffffc0
    a3b4:	ldr	r1, [fp, #-60]	; 0xffffffc4
    a3b8:	bl	9e40 <print_expression>
    a3bc:	ldr	r3, [fp, #4]
    a3c0:	cmp	r3, #6
    a3c4:	bgt	c750 <print_expression+0x2910>
    a3c8:	ldr	r3, [fp, #-60]	; 0xffffffc4
    a3cc:	movw	r0, #0
    a3d0:	movt	r0, #0
    a3d4:	blx	r3
    a3d8:	b	c750 <print_expression+0x2910>
    a3dc:	ldr	r3, [fp, #-68]	; 0xffffffbc
    a3e0:	cmp	r3, #0
    a3e4:	beq	a3f4 <print_expression+0x5b4>
    a3e8:	movw	r3, #0
    a3ec:	movt	r3, #0
    a3f0:	b	a3fc <print_expression+0x5bc>
    a3f4:	movw	r3, #0
    a3f8:	movt	r3, #0
    a3fc:	ldr	r2, [fp, #-60]	; 0xffffffc4
    a400:	mov	r0, r3
    a404:	blx	r2
    a408:	ldr	r3, [fp, #-56]	; 0xffffffc8
    a40c:	ldr	r0, [r3, #16]
    a410:	mov	r3, #15
    a414:	str	r3, [sp]
    a418:	ldr	r3, [fp, #-68]	; 0xffffffbc
    a41c:	ldr	r2, [fp, #-64]	; 0xffffffc0
    a420:	ldr	r1, [fp, #-60]	; 0xffffffc4
    a424:	bl	9e40 <print_expression>
    a428:	ldr	r3, [fp, #-60]	; 0xffffffc4
    a42c:	movw	r0, #0
    a430:	movt	r0, #0
    a434:	blx	r3
    a438:	b	c7cc <print_expression+0x298c>
    a43c:	ldr	r3, [fp, #-68]	; 0xffffffbc
    a440:	cmp	r3, #0
    a444:	beq	a454 <print_expression+0x614>
    a448:	movw	r3, #0
    a44c:	movt	r3, #0
    a450:	b	a45c <print_expression+0x61c>
    a454:	movw	r3, #0
    a458:	movt	r3, #0
    a45c:	ldr	r2, [fp, #-60]	; 0xffffffc4
    a460:	mov	r0, r3
    a464:	blx	r2
    a468:	ldr	r3, [fp, #-56]	; 0xffffffc8
    a46c:	ldr	r0, [r3, #16]
    a470:	mov	r3, #15
    a474:	str	r3, [sp]
    a478:	ldr	r3, [fp, #-68]	; 0xffffffbc
    a47c:	ldr	r2, [fp, #-64]	; 0xffffffc0
    a480:	ldr	r1, [fp, #-60]	; 0xffffffc4
    a484:	bl	9e40 <print_expression>
    a488:	ldr	r3, [fp, #-60]	; 0xffffffc4
    a48c:	movw	r0, #0
    a490:	movt	r0, #0
    a494:	blx	r3
    a498:	ldr	r3, [fp, #-56]	; 0xffffffc8
    a49c:	ldr	r0, [r3, #20]
    a4a0:	mov	r3, #15
    a4a4:	str	r3, [sp]
    a4a8:	ldr	r3, [fp, #-68]	; 0xffffffbc
    a4ac:	ldr	r2, [fp, #-64]	; 0xffffffc0
    a4b0:	ldr	r1, [fp, #-60]	; 0xffffffc4
    a4b4:	bl	9e40 <print_expression>
    a4b8:	ldr	r3, [fp, #-60]	; 0xffffffc4
    a4bc:	movw	r0, #0
    a4c0:	movt	r0, #0
    a4c4:	blx	r3
    a4c8:	b	c7cc <print_expression+0x298c>
    a4cc:	ldr	r3, [fp, #-68]	; 0xffffffbc
    a4d0:	cmp	r3, #0
    a4d4:	beq	a4e4 <print_expression+0x6a4>
    a4d8:	movw	r3, #0
    a4dc:	movt	r3, #0
    a4e0:	b	a4ec <print_expression+0x6ac>
    a4e4:	movw	r3, #0
    a4e8:	movt	r3, #0
    a4ec:	ldr	r2, [fp, #-60]	; 0xffffffc4
    a4f0:	mov	r0, r3
    a4f4:	blx	r2
    a4f8:	ldr	r3, [fp, #-56]	; 0xffffffc8
    a4fc:	ldr	r0, [r3, #16]
    a500:	mov	r3, #15
    a504:	str	r3, [sp]
    a508:	ldr	r3, [fp, #-68]	; 0xffffffbc
    a50c:	ldr	r2, [fp, #-64]	; 0xffffffc0
    a510:	ldr	r1, [fp, #-60]	; 0xffffffc4
    a514:	bl	9e40 <print_expression>
    a518:	ldr	r3, [fp, #-60]	; 0xffffffc4
    a51c:	movw	r0, #0
    a520:	movt	r0, #0
    a524:	blx	r3
    a528:	ldr	r3, [fp, #-56]	; 0xffffffc8
    a52c:	ldr	r0, [r3, #20]
    a530:	mov	r3, #15
    a534:	str	r3, [sp]
    a538:	ldr	r3, [fp, #-68]	; 0xffffffbc
    a53c:	ldr	r2, [fp, #-64]	; 0xffffffc0
    a540:	ldr	r1, [fp, #-60]	; 0xffffffc4
    a544:	bl	9e40 <print_expression>
    a548:	ldr	r3, [fp, #-60]	; 0xffffffc4
    a54c:	movw	r0, #0
    a550:	movt	r0, #0
    a554:	blx	r3
    a558:	b	c7cc <print_expression+0x298c>
    a55c:	ldr	r3, [fp, #-68]	; 0xffffffbc
    a560:	cmp	r3, #0
    a564:	beq	a574 <print_expression+0x734>
    a568:	movw	r3, #0
    a56c:	movt	r3, #0
    a570:	b	a57c <print_expression+0x73c>
    a574:	movw	r3, #0
    a578:	movt	r3, #0
    a57c:	ldr	r2, [fp, #-60]	; 0xffffffc4
    a580:	mov	r0, r3
    a584:	blx	r2
    a588:	ldr	r3, [fp, #-56]	; 0xffffffc8
    a58c:	ldr	r0, [r3, #16]
    a590:	mov	r3, #15
    a594:	str	r3, [sp]
    a598:	ldr	r3, [fp, #-68]	; 0xffffffbc
    a59c:	ldr	r2, [fp, #-64]	; 0xffffffc0
    a5a0:	ldr	r1, [fp, #-60]	; 0xffffffc4
    a5a4:	bl	9e40 <print_expression>
    a5a8:	ldr	r3, [fp, #-60]	; 0xffffffc4
    a5ac:	movw	r0, #0
    a5b0:	movt	r0, #0
    a5b4:	blx	r3
    a5b8:	ldr	r3, [fp, #-56]	; 0xffffffc8
    a5bc:	ldr	r0, [r3, #20]
    a5c0:	mov	r3, #15
    a5c4:	str	r3, [sp]
    a5c8:	ldr	r3, [fp, #-68]	; 0xffffffbc
    a5cc:	ldr	r2, [fp, #-64]	; 0xffffffc0
    a5d0:	ldr	r1, [fp, #-60]	; 0xffffffc4
    a5d4:	bl	9e40 <print_expression>
    a5d8:	ldr	r3, [fp, #-60]	; 0xffffffc4
    a5dc:	movw	r0, #0
    a5e0:	movt	r0, #0
    a5e4:	blx	r3
    a5e8:	b	c7cc <print_expression+0x298c>
    a5ec:	ldr	r3, [fp, #-68]	; 0xffffffbc
    a5f0:	cmp	r3, #0
    a5f4:	beq	a604 <print_expression+0x7c4>
    a5f8:	movw	r3, #0
    a5fc:	movt	r3, #0
    a600:	b	a60c <print_expression+0x7cc>
    a604:	movw	r3, #0
    a608:	movt	r3, #0
    a60c:	ldr	r2, [fp, #-60]	; 0xffffffc4
    a610:	mov	r0, r3
    a614:	blx	r2
    a618:	b	c7cc <print_expression+0x298c>
    a61c:	ldr	r3, [fp, #-68]	; 0xffffffbc
    a620:	cmp	r3, #0
    a624:	beq	a634 <print_expression+0x7f4>
    a628:	movw	r3, #0
    a62c:	movt	r3, #0
    a630:	b	a63c <print_expression+0x7fc>
    a634:	movw	r3, #0
    a638:	movt	r3, #0
    a63c:	ldr	r2, [fp, #-60]	; 0xffffffc4
    a640:	mov	r0, r3
    a644:	blx	r2
    a648:	ldr	r3, [fp, #-56]	; 0xffffffc8
    a64c:	ldr	r0, [r3, #16]
    a650:	mov	r3, #15
    a654:	str	r3, [sp]
    a658:	ldr	r3, [fp, #-68]	; 0xffffffbc
    a65c:	ldr	r2, [fp, #-64]	; 0xffffffc0
    a660:	ldr	r1, [fp, #-60]	; 0xffffffc4
    a664:	bl	9e40 <print_expression>
    a668:	ldr	r3, [fp, #-60]	; 0xffffffc4
    a66c:	movw	r0, #0
    a670:	movt	r0, #0
    a674:	blx	r3
    a678:	b	c7cc <print_expression+0x298c>
    a67c:	ldr	r3, [fp, #-68]	; 0xffffffbc
    a680:	cmp	r3, #0
    a684:	beq	a694 <print_expression+0x854>
    a688:	movw	r3, #0
    a68c:	movt	r3, #0
    a690:	b	a69c <print_expression+0x85c>
    a694:	movw	r3, #0
    a698:	movt	r3, #0
    a69c:	ldr	r2, [fp, #-60]	; 0xffffffc4
    a6a0:	mov	r0, r3
    a6a4:	blx	r2
    a6a8:	ldr	r3, [fp, #-56]	; 0xffffffc8
    a6ac:	ldr	r0, [r3, #16]
    a6b0:	mov	r3, #15
    a6b4:	str	r3, [sp]
    a6b8:	ldr	r3, [fp, #-68]	; 0xffffffbc
    a6bc:	ldr	r2, [fp, #-64]	; 0xffffffc0
    a6c0:	ldr	r1, [fp, #-60]	; 0xffffffc4
    a6c4:	bl	9e40 <print_expression>
    a6c8:	ldr	r3, [fp, #-60]	; 0xffffffc4
    a6cc:	movw	r0, #0
    a6d0:	movt	r0, #0
    a6d4:	blx	r3
    a6d8:	b	c7cc <print_expression+0x298c>
    a6dc:	ldr	r3, [fp, #-68]	; 0xffffffbc
    a6e0:	cmp	r3, #0
    a6e4:	beq	a6f4 <print_expression+0x8b4>
    a6e8:	movw	r3, #0
    a6ec:	movt	r3, #0
    a6f0:	b	a6fc <print_expression+0x8bc>
    a6f4:	movw	r3, #0
    a6f8:	movt	r3, #0
    a6fc:	ldr	r2, [fp, #-60]	; 0xffffffc4
    a700:	mov	r0, r3
    a704:	blx	r2
    a708:	ldr	r3, [fp, #-56]	; 0xffffffc8
    a70c:	ldr	r0, [r3, #16]
    a710:	mov	r3, #15
    a714:	str	r3, [sp]
    a718:	ldr	r3, [fp, #-68]	; 0xffffffbc
    a71c:	ldr	r2, [fp, #-64]	; 0xffffffc0
    a720:	ldr	r1, [fp, #-60]	; 0xffffffc4
    a724:	bl	9e40 <print_expression>
    a728:	ldr	r3, [fp, #-60]	; 0xffffffc4
    a72c:	movw	r0, #0
    a730:	movt	r0, #0
    a734:	blx	r3
    a738:	b	c7cc <print_expression+0x298c>
    a73c:	ldr	r3, [fp, #-68]	; 0xffffffbc
    a740:	cmp	r3, #0
    a744:	beq	a754 <print_expression+0x914>
    a748:	movw	r3, #0
    a74c:	movt	r3, #0
    a750:	b	a75c <print_expression+0x91c>
    a754:	movw	r3, #0
    a758:	movt	r3, #0
    a75c:	ldr	r2, [fp, #-60]	; 0xffffffc4
    a760:	mov	r0, r3
    a764:	blx	r2
    a768:	ldr	r3, [fp, #-56]	; 0xffffffc8
    a76c:	ldr	r0, [r3, #16]
    a770:	mov	r3, #15
    a774:	str	r3, [sp]
    a778:	ldr	r3, [fp, #-68]	; 0xffffffbc
    a77c:	ldr	r2, [fp, #-64]	; 0xffffffc0
    a780:	ldr	r1, [fp, #-60]	; 0xffffffc4
    a784:	bl	9e40 <print_expression>
    a788:	ldr	r3, [fp, #-60]	; 0xffffffc4
    a78c:	movw	r0, #0
    a790:	movt	r0, #0
    a794:	blx	r3
    a798:	b	c7cc <print_expression+0x298c>
    a79c:	ldr	r3, [fp, #-68]	; 0xffffffbc
    a7a0:	cmp	r3, #0
    a7a4:	beq	a7b4 <print_expression+0x974>
    a7a8:	movw	r3, #0
    a7ac:	movt	r3, #0
    a7b0:	b	a7bc <print_expression+0x97c>
    a7b4:	movw	r3, #0
    a7b8:	movt	r3, #0
    a7bc:	ldr	r2, [fp, #-60]	; 0xffffffc4
    a7c0:	mov	r0, r3
    a7c4:	blx	r2
    a7c8:	ldr	r3, [fp, #-56]	; 0xffffffc8
    a7cc:	ldr	r0, [r3, #16]
    a7d0:	mov	r3, #15
    a7d4:	str	r3, [sp]
    a7d8:	ldr	r3, [fp, #-68]	; 0xffffffbc
    a7dc:	ldr	r2, [fp, #-64]	; 0xffffffc0
    a7e0:	ldr	r1, [fp, #-60]	; 0xffffffc4
    a7e4:	bl	9e40 <print_expression>
    a7e8:	ldr	r3, [fp, #-56]	; 0xffffffc8
    a7ec:	ldr	r3, [r3, #20]
    a7f0:	cmp	r3, #0
    a7f4:	beq	a828 <print_expression+0x9e8>
    a7f8:	ldr	r3, [fp, #-60]	; 0xffffffc4
    a7fc:	movw	r0, #0
    a800:	movt	r0, #0
    a804:	blx	r3
    a808:	ldr	r3, [fp, #-56]	; 0xffffffc8
    a80c:	ldr	r0, [r3, #20]
    a810:	mov	r3, #15
    a814:	str	r3, [sp]
    a818:	ldr	r3, [fp, #-68]	; 0xffffffbc
    a81c:	ldr	r2, [fp, #-64]	; 0xffffffc0
    a820:	ldr	r1, [fp, #-60]	; 0xffffffc4
    a824:	bl	9e40 <print_expression>
    a828:	ldr	r3, [fp, #-56]	; 0xffffffc8
    a82c:	ldr	r3, [r3, #24]
    a830:	cmp	r3, #0
    a834:	beq	a868 <print_expression+0xa28>
    a838:	ldr	r3, [fp, #-60]	; 0xffffffc4
    a83c:	movw	r0, #0
    a840:	movt	r0, #0
    a844:	blx	r3
    a848:	ldr	r3, [fp, #-56]	; 0xffffffc8
    a84c:	ldr	r0, [r3, #24]
    a850:	mov	r3, #15
    a854:	str	r3, [sp]
    a858:	ldr	r3, [fp, #-68]	; 0xffffffbc
    a85c:	ldr	r2, [fp, #-64]	; 0xffffffc0
    a860:	ldr	r1, [fp, #-60]	; 0xffffffc4
    a864:	bl	9e40 <print_expression>
    a868:	ldr	r3, [fp, #-60]	; 0xffffffc4
    a86c:	movw	r0, #0
    a870:	movt	r0, #0
    a874:	blx	r3
    a878:	b	c7cc <print_expression+0x298c>
    a87c:	ldr	r3, [fp, #-56]	; 0xffffffc8
    a880:	ldr	r3, [r3, #12]
    a884:	cmp	r3, #0
    a888:	beq	a8bc <print_expression+0xa7c>
    a88c:	ldr	r3, [fp, #-68]	; 0xffffffbc
    a890:	cmp	r3, #0
    a894:	beq	a8a4 <print_expression+0xa64>
    a898:	movw	r3, #0
    a89c:	movt	r3, #0
    a8a0:	b	a8ac <print_expression+0xa6c>
    a8a4:	movw	r3, #0
    a8a8:	movt	r3, #0
    a8ac:	ldr	r2, [fp, #-60]	; 0xffffffc4
    a8b0:	mov	r0, r3
    a8b4:	blx	r2
    a8b8:	b	c7cc <print_expression+0x298c>
    a8bc:	ldr	r3, [fp, #-68]	; 0xffffffbc
    a8c0:	cmp	r3, #0
    a8c4:	beq	a8d4 <print_expression+0xa94>
    a8c8:	movw	r3, #0
    a8cc:	movt	r3, #0
    a8d0:	b	a8dc <print_expression+0xa9c>
    a8d4:	movw	r3, #0
    a8d8:	movt	r3, #0
    a8dc:	ldr	r2, [fp, #-60]	; 0xffffffc4
    a8e0:	mov	r0, r3
    a8e4:	blx	r2
    a8e8:	b	c7cc <print_expression+0x298c>
    a8ec:	ldr	r3, [fp, #-56]	; 0xffffffc8
    a8f0:	vldr	d7, [r3, #16]
    a8f4:	sub	r3, fp, #28
    a8f8:	mov	r0, r3
    a8fc:	vmov.f64	d0, d7
    a900:	bl	0 <coda_strfl>
    a904:	sub	r2, fp, #28
    a908:	ldr	r3, [fp, #-60]	; 0xffffffc4
    a90c:	mov	r1, r2
    a910:	movw	r0, #0
    a914:	movt	r0, #0
    a918:	blx	r3
    a91c:	b	c7cc <print_expression+0x298c>
    a920:	ldr	r3, [fp, #-56]	; 0xffffffc8
    a924:	ldrd	r0, [r3, #16]
    a928:	sub	r3, fp, #52	; 0x34
    a92c:	mov	r2, r3
    a930:	bl	0 <coda_str64>
    a934:	sub	r2, fp, #52	; 0x34
    a938:	ldr	r3, [fp, #-60]	; 0xffffffc4
    a93c:	mov	r1, r2
    a940:	movw	r0, #0
    a944:	movt	r0, #0
    a948:	blx	r3
    a94c:	b	c7cc <print_expression+0x298c>
    a950:	ldr	r3, [fp, #-64]	; 0xffffffc0
    a954:	cmp	r3, #0
    a958:	beq	a968 <print_expression+0xb28>
    a95c:	movw	r3, #0
    a960:	movt	r3, #0
    a964:	b	a970 <print_expression+0xb30>
    a968:	movw	r3, #0
    a96c:	movt	r3, #0
    a970:	ldr	r2, [fp, #-60]	; 0xffffffc4
    a974:	mov	r0, r3
    a978:	blx	r2
    a97c:	ldr	r3, [fp, #-56]	; 0xffffffc8
    a980:	ldr	r0, [r3, #16]
    a984:	ldr	r3, [fp, #-56]	; 0xffffffc8
    a988:	ldr	r1, [r3, #12]
    a98c:	ldr	r3, [fp, #-68]	; 0xffffffbc
    a990:	str	r3, [sp]
    a994:	ldr	r3, [fp, #-64]	; 0xffffffc0
    a998:	ldr	r2, [fp, #-60]	; 0xffffffc4
    a99c:	bl	99d4 <print_escaped_string>
    a9a0:	ldr	r3, [fp, #-64]	; 0xffffffc0
    a9a4:	cmp	r3, #0
    a9a8:	beq	a9b8 <print_expression+0xb78>
    a9ac:	movw	r3, #0
    a9b0:	movt	r3, #0
    a9b4:	b	a9c0 <print_expression+0xb80>
    a9b8:	movw	r3, #0
    a9bc:	movt	r3, #0
    a9c0:	ldr	r2, [fp, #-60]	; 0xffffffc4
    a9c4:	mov	r0, r3
    a9c8:	blx	r2
    a9cc:	b	c7cc <print_expression+0x298c>
    a9d0:	ldr	r3, [fp, #-68]	; 0xffffffbc
    a9d4:	cmp	r3, #0
    a9d8:	beq	a9e8 <print_expression+0xba8>
    a9dc:	movw	r3, #0
    a9e0:	movt	r3, #0
    a9e4:	b	a9f0 <print_expression+0xbb0>
    a9e8:	movw	r3, #0
    a9ec:	movt	r3, #0
    a9f0:	ldr	r2, [fp, #-60]	; 0xffffffc4
    a9f4:	mov	r0, r3
    a9f8:	blx	r2
    a9fc:	ldr	r3, [fp, #-56]	; 0xffffffc8
    aa00:	ldr	r0, [r3, #16]
    aa04:	mov	r3, #15
    aa08:	str	r3, [sp]
    aa0c:	ldr	r3, [fp, #-68]	; 0xffffffbc
    aa10:	ldr	r2, [fp, #-64]	; 0xffffffc0
    aa14:	ldr	r1, [fp, #-60]	; 0xffffffc4
    aa18:	bl	9e40 <print_expression>
    aa1c:	ldr	r3, [fp, #-60]	; 0xffffffc4
    aa20:	movw	r0, #0
    aa24:	movt	r0, #0
    aa28:	blx	r3
    aa2c:	ldr	r3, [fp, #-56]	; 0xffffffc8
    aa30:	ldr	r0, [r3, #20]
    aa34:	mov	r3, #15
    aa38:	str	r3, [sp]
    aa3c:	ldr	r3, [fp, #-68]	; 0xffffffbc
    aa40:	ldr	r2, [fp, #-64]	; 0xffffffc0
    aa44:	ldr	r1, [fp, #-60]	; 0xffffffc4
    aa48:	bl	9e40 <print_expression>
    aa4c:	ldr	r3, [fp, #-60]	; 0xffffffc4
    aa50:	movw	r0, #0
    aa54:	movt	r0, #0
    aa58:	blx	r3
    aa5c:	b	c7cc <print_expression+0x298c>
    aa60:	ldr	r3, [fp, #4]
    aa64:	cmp	r3, #2
    aa68:	bgt	aa7c <print_expression+0xc3c>
    aa6c:	ldr	r3, [fp, #-60]	; 0xffffffc4
    aa70:	movw	r0, #0
    aa74:	movt	r0, #0
    aa78:	blx	r3
    aa7c:	ldr	r3, [fp, #-56]	; 0xffffffc8
    aa80:	ldr	r0, [r3, #16]
    aa84:	mov	r3, #3
    aa88:	str	r3, [sp]
    aa8c:	ldr	r3, [fp, #-68]	; 0xffffffbc
    aa90:	ldr	r2, [fp, #-64]	; 0xffffffc0
    aa94:	ldr	r1, [fp, #-60]	; 0xffffffc4
    aa98:	bl	9e40 <print_expression>
    aa9c:	ldr	r3, [fp, #-60]	; 0xffffffc4
    aaa0:	movw	r0, #0
    aaa4:	movt	r0, #0
    aaa8:	blx	r3
    aaac:	ldr	r3, [fp, #-56]	; 0xffffffc8
    aab0:	ldr	r0, [r3, #20]
    aab4:	mov	r3, #3
    aab8:	str	r3, [sp]
    aabc:	ldr	r3, [fp, #-68]	; 0xffffffbc
    aac0:	ldr	r2, [fp, #-64]	; 0xffffffc0
    aac4:	ldr	r1, [fp, #-60]	; 0xffffffc4
    aac8:	bl	9e40 <print_expression>
    aacc:	ldr	r3, [fp, #4]
    aad0:	cmp	r3, #2
    aad4:	bgt	c758 <print_expression+0x2918>
    aad8:	ldr	r3, [fp, #-60]	; 0xffffffc4
    aadc:	movw	r0, #0
    aae0:	movt	r0, #0
    aae4:	blx	r3
    aae8:	b	c758 <print_expression+0x2918>
    aaec:	ldr	r3, [fp, #4]
    aaf0:	cmp	r3, #5
    aaf4:	bgt	ab08 <print_expression+0xcc8>
    aaf8:	ldr	r3, [fp, #-60]	; 0xffffffc4
    aafc:	movw	r0, #0
    ab00:	movt	r0, #0
    ab04:	blx	r3
    ab08:	ldr	r3, [fp, #-56]	; 0xffffffc8
    ab0c:	ldr	r0, [r3, #16]
    ab10:	mov	r3, #6
    ab14:	str	r3, [sp]
    ab18:	ldr	r3, [fp, #-68]	; 0xffffffbc
    ab1c:	ldr	r2, [fp, #-64]	; 0xffffffc0
    ab20:	ldr	r1, [fp, #-60]	; 0xffffffc4
    ab24:	bl	9e40 <print_expression>
    ab28:	ldr	r3, [fp, #-60]	; 0xffffffc4
    ab2c:	movw	r0, #0
    ab30:	movt	r0, #0
    ab34:	blx	r3
    ab38:	ldr	r3, [fp, #-56]	; 0xffffffc8
    ab3c:	ldr	r0, [r3, #20]
    ab40:	mov	r3, #6
    ab44:	str	r3, [sp]
    ab48:	ldr	r3, [fp, #-68]	; 0xffffffbc
    ab4c:	ldr	r2, [fp, #-64]	; 0xffffffc0
    ab50:	ldr	r1, [fp, #-60]	; 0xffffffc4
    ab54:	bl	9e40 <print_expression>
    ab58:	ldr	r3, [fp, #4]
    ab5c:	cmp	r3, #5
    ab60:	bgt	c760 <print_expression+0x2920>
    ab64:	ldr	r3, [fp, #-60]	; 0xffffffc4
    ab68:	movw	r0, #0
    ab6c:	movt	r0, #0
    ab70:	blx	r3
    ab74:	b	c760 <print_expression+0x2920>
    ab78:	ldr	r3, [fp, #-68]	; 0xffffffbc
    ab7c:	cmp	r3, #0
    ab80:	beq	ab90 <print_expression+0xd50>
    ab84:	movw	r3, #0
    ab88:	movt	r3, #0
    ab8c:	b	ab98 <print_expression+0xd58>
    ab90:	movw	r3, #0
    ab94:	movt	r3, #0
    ab98:	ldr	r2, [fp, #-60]	; 0xffffffc4
    ab9c:	mov	r0, r3
    aba0:	blx	r2
    aba4:	ldr	r3, [fp, #-56]	; 0xffffffc8
    aba8:	ldr	r0, [r3, #16]
    abac:	mov	r3, #15
    abb0:	str	r3, [sp]
    abb4:	ldr	r3, [fp, #-68]	; 0xffffffbc
    abb8:	ldr	r2, [fp, #-64]	; 0xffffffc0
    abbc:	ldr	r1, [fp, #-60]	; 0xffffffc4
    abc0:	bl	9e40 <print_expression>
    abc4:	ldr	r3, [fp, #-60]	; 0xffffffc4
    abc8:	movw	r0, #0
    abcc:	movt	r0, #0
    abd0:	blx	r3
    abd4:	b	c7cc <print_expression+0x298c>
    abd8:	ldr	r3, [fp, #-68]	; 0xffffffbc
    abdc:	cmp	r3, #0
    abe0:	beq	abf0 <print_expression+0xdb0>
    abe4:	movw	r3, #0
    abe8:	movt	r3, #0
    abec:	b	abf8 <print_expression+0xdb8>
    abf0:	movw	r3, #0
    abf4:	movt	r3, #0
    abf8:	ldr	r2, [fp, #-60]	; 0xffffffc4
    abfc:	mov	r0, r3
    ac00:	blx	r2
    ac04:	b	c7cc <print_expression+0x298c>
    ac08:	ldr	r3, [fp, #-68]	; 0xffffffbc
    ac0c:	cmp	r3, #0
    ac10:	beq	ac20 <print_expression+0xde0>
    ac14:	movw	r3, #0
    ac18:	movt	r3, #0
    ac1c:	b	ac28 <print_expression+0xde8>
    ac20:	movw	r3, #0
    ac24:	movt	r3, #0
    ac28:	ldr	r2, [fp, #-60]	; 0xffffffc4
    ac2c:	mov	r0, r3
    ac30:	blx	r2
    ac34:	b	c7cc <print_expression+0x298c>
    ac38:	ldr	r3, [fp, #-68]	; 0xffffffbc
    ac3c:	cmp	r3, #0
    ac40:	beq	ac50 <print_expression+0xe10>
    ac44:	movw	r3, #0
    ac48:	movt	r3, #0
    ac4c:	b	ac58 <print_expression+0xe18>
    ac50:	movw	r3, #0
    ac54:	movt	r3, #0
    ac58:	ldr	r2, [fp, #-60]	; 0xffffffc4
    ac5c:	mov	r0, r3
    ac60:	blx	r2
    ac64:	ldr	r3, [fp, #-56]	; 0xffffffc8
    ac68:	ldr	r0, [r3, #16]
    ac6c:	mov	r3, #15
    ac70:	str	r3, [sp]
    ac74:	ldr	r3, [fp, #-68]	; 0xffffffbc
    ac78:	ldr	r2, [fp, #-64]	; 0xffffffc0
    ac7c:	ldr	r1, [fp, #-60]	; 0xffffffc4
    ac80:	bl	9e40 <print_expression>
    ac84:	ldr	r3, [fp, #-60]	; 0xffffffc4
    ac88:	movw	r0, #0
    ac8c:	movt	r0, #0
    ac90:	blx	r3
    ac94:	b	c7cc <print_expression+0x298c>
    ac98:	ldr	r3, [fp, #-68]	; 0xffffffbc
    ac9c:	cmp	r3, #0
    aca0:	beq	acb0 <print_expression+0xe70>
    aca4:	movw	r3, #0
    aca8:	movt	r3, #0
    acac:	b	acb8 <print_expression+0xe78>
    acb0:	movw	r3, #0
    acb4:	movt	r3, #0
    acb8:	ldr	r2, [fp, #-60]	; 0xffffffc4
    acbc:	mov	r0, r3
    acc0:	blx	r2
    acc4:	ldr	r3, [fp, #-56]	; 0xffffffc8
    acc8:	ldr	r0, [r3, #16]
    accc:	mov	r3, #15
    acd0:	str	r3, [sp]
    acd4:	ldr	r3, [fp, #-68]	; 0xffffffbc
    acd8:	ldr	r2, [fp, #-64]	; 0xffffffc0
    acdc:	ldr	r1, [fp, #-60]	; 0xffffffc4
    ace0:	bl	9e40 <print_expression>
    ace4:	ldr	r3, [fp, #-60]	; 0xffffffc4
    ace8:	movw	r0, #0
    acec:	movt	r0, #0
    acf0:	blx	r3
    acf4:	b	c7cc <print_expression+0x298c>
    acf8:	ldr	r3, [fp, #-68]	; 0xffffffbc
    acfc:	cmp	r3, #0
    ad00:	beq	ad10 <print_expression+0xed0>
    ad04:	movw	r3, #0
    ad08:	movt	r3, #0
    ad0c:	b	ad18 <print_expression+0xed8>
    ad10:	movw	r3, #0
    ad14:	movt	r3, #0
    ad18:	ldr	r2, [fp, #-56]	; 0xffffffc8
    ad1c:	ldr	r1, [r2, #12]
    ad20:	ldr	r2, [fp, #-60]	; 0xffffffc4
    ad24:	mov	r0, r3
    ad28:	blx	r2
    ad2c:	ldr	r3, [fp, #-56]	; 0xffffffc8
    ad30:	ldr	r0, [r3, #16]
    ad34:	mov	r3, #15
    ad38:	str	r3, [sp]
    ad3c:	ldr	r3, [fp, #-68]	; 0xffffffbc
    ad40:	ldr	r2, [fp, #-64]	; 0xffffffc0
    ad44:	ldr	r1, [fp, #-60]	; 0xffffffc4
    ad48:	bl	9e40 <print_expression>
    ad4c:	ldr	r3, [fp, #-68]	; 0xffffffbc
    ad50:	cmp	r3, #0
    ad54:	beq	ad64 <print_expression+0xf24>
    ad58:	movw	r3, #0
    ad5c:	movt	r3, #0
    ad60:	b	ad6c <print_expression+0xf2c>
    ad64:	movw	r3, #0
    ad68:	movt	r3, #0
    ad6c:	ldr	r2, [fp, #-60]	; 0xffffffc4
    ad70:	mov	r0, r3
    ad74:	blx	r2
    ad78:	ldr	r3, [fp, #-56]	; 0xffffffc8
    ad7c:	ldr	r0, [r3, #20]
    ad80:	mov	r3, #15
    ad84:	str	r3, [sp]
    ad88:	ldr	r3, [fp, #-68]	; 0xffffffbc
    ad8c:	ldr	r2, [fp, #-64]	; 0xffffffc0
    ad90:	ldr	r1, [fp, #-60]	; 0xffffffc4
    ad94:	bl	9e40 <print_expression>
    ad98:	ldr	r3, [fp, #-56]	; 0xffffffc8
    ad9c:	ldr	r3, [r3, #24]
    ada0:	cmp	r3, #0
    ada4:	beq	adf4 <print_expression+0xfb4>
    ada8:	ldr	r3, [fp, #-68]	; 0xffffffbc
    adac:	cmp	r3, #0
    adb0:	beq	adc0 <print_expression+0xf80>
    adb4:	movw	r3, #0
    adb8:	movt	r3, #0
    adbc:	b	adc8 <print_expression+0xf88>
    adc0:	movw	r3, #0
    adc4:	movt	r3, #0
    adc8:	ldr	r2, [fp, #-60]	; 0xffffffc4
    adcc:	mov	r0, r3
    add0:	blx	r2
    add4:	ldr	r3, [fp, #-56]	; 0xffffffc8
    add8:	ldr	r0, [r3, #24]
    addc:	mov	r3, #15
    ade0:	str	r3, [sp]
    ade4:	ldr	r3, [fp, #-68]	; 0xffffffbc
    ade8:	ldr	r2, [fp, #-64]	; 0xffffffc0
    adec:	ldr	r1, [fp, #-60]	; 0xffffffc4
    adf0:	bl	9e40 <print_expression>
    adf4:	ldr	r3, [fp, #-68]	; 0xffffffbc
    adf8:	cmp	r3, #0
    adfc:	beq	ae0c <print_expression+0xfcc>
    ae00:	movw	r3, #0
    ae04:	movt	r3, #0
    ae08:	b	ae14 <print_expression+0xfd4>
    ae0c:	movw	r3, #0
    ae10:	movt	r3, #0
    ae14:	ldr	r2, [fp, #-60]	; 0xffffffc4
    ae18:	mov	r0, r3
    ae1c:	blx	r2
    ae20:	ldr	r3, [fp, #-56]	; 0xffffffc8
    ae24:	ldr	r0, [r3, #28]
    ae28:	mov	r3, #15
    ae2c:	str	r3, [sp]
    ae30:	ldr	r3, [fp, #-68]	; 0xffffffbc
    ae34:	ldr	r2, [fp, #-64]	; 0xffffffc0
    ae38:	ldr	r1, [fp, #-60]	; 0xffffffc4
    ae3c:	bl	9e40 <print_expression>
    ae40:	b	c7cc <print_expression+0x298c>
    ae44:	ldr	r3, [fp, #-56]	; 0xffffffc8
    ae48:	ldr	r3, [r3, #16]
    ae4c:	cmp	r3, #0
    ae50:	beq	ae74 <print_expression+0x1034>
    ae54:	ldr	r3, [fp, #-56]	; 0xffffffc8
    ae58:	ldr	r0, [r3, #16]
    ae5c:	mov	r3, #15
    ae60:	str	r3, [sp]
    ae64:	ldr	r3, [fp, #-68]	; 0xffffffbc
    ae68:	ldr	r2, [fp, #-64]	; 0xffffffc0
    ae6c:	ldr	r1, [fp, #-60]	; 0xffffffc4
    ae70:	bl	9e40 <print_expression>
    ae74:	ldr	r3, [fp, #-60]	; 0xffffffc4
    ae78:	movw	r0, #0
    ae7c:	movt	r0, #0
    ae80:	blx	r3
    ae84:	ldr	r3, [fp, #-56]	; 0xffffffc8
    ae88:	ldr	r0, [r3, #20]
    ae8c:	mov	r3, #15
    ae90:	str	r3, [sp]
    ae94:	ldr	r3, [fp, #-68]	; 0xffffffbc
    ae98:	ldr	r2, [fp, #-64]	; 0xffffffc0
    ae9c:	ldr	r1, [fp, #-60]	; 0xffffffc4
    aea0:	bl	9e40 <print_expression>
    aea4:	ldr	r3, [fp, #-60]	; 0xffffffc4
    aea8:	movw	r0, #0
    aeac:	movt	r0, #0
    aeb0:	blx	r3
    aeb4:	b	c7cc <print_expression+0x298c>
    aeb8:	ldr	r3, [fp, #-56]	; 0xffffffc8
    aebc:	ldr	r3, [r3, #16]
    aec0:	cmp	r3, #0
    aec4:	beq	aee8 <print_expression+0x10a8>
    aec8:	ldr	r3, [fp, #-56]	; 0xffffffc8
    aecc:	ldr	r0, [r3, #16]
    aed0:	mov	r3, #15
    aed4:	str	r3, [sp]
    aed8:	ldr	r3, [fp, #-68]	; 0xffffffbc
    aedc:	ldr	r2, [fp, #-64]	; 0xffffffc0
    aee0:	ldr	r1, [fp, #-60]	; 0xffffffc4
    aee4:	bl	9e40 <print_expression>
    aee8:	ldr	r3, [fp, #-56]	; 0xffffffc8
    aeec:	ldr	r2, [r3, #12]
    aef0:	ldr	r3, [fp, #-60]	; 0xffffffc4
    aef4:	mov	r1, r2
    aef8:	movw	r0, #0
    aefc:	movt	r0, #0
    af00:	blx	r3
    af04:	b	c7cc <print_expression+0x298c>
    af08:	ldr	r3, [fp, #-60]	; 0xffffffc4
    af0c:	movw	r0, #0
    af10:	movt	r0, #0
    af14:	blx	r3
    af18:	b	c7cc <print_expression+0x298c>
    af1c:	ldr	r3, [fp, #-56]	; 0xffffffc8
    af20:	ldr	r0, [r3, #16]
    af24:	mov	r3, #15
    af28:	str	r3, [sp]
    af2c:	ldr	r3, [fp, #-68]	; 0xffffffbc
    af30:	ldr	r2, [fp, #-64]	; 0xffffffc0
    af34:	ldr	r1, [fp, #-60]	; 0xffffffc4
    af38:	bl	9e40 <print_expression>
    af3c:	ldr	r3, [fp, #-56]	; 0xffffffc8
    af40:	ldr	r3, [r3, #16]
    af44:	ldr	r3, [r3]
    af48:	cmp	r3, #38	; 0x26
    af4c:	beq	af60 <print_expression+0x1120>
    af50:	ldr	r3, [fp, #-60]	; 0xffffffc4
    af54:	movw	r0, #0
    af58:	movt	r0, #0
    af5c:	blx	r3
    af60:	ldr	r3, [fp, #-56]	; 0xffffffc8
    af64:	ldr	r2, [r3, #12]
    af68:	ldr	r3, [fp, #-60]	; 0xffffffc4
    af6c:	mov	r1, r2
    af70:	movw	r0, #0
    af74:	movt	r0, #0
    af78:	blx	r3
    af7c:	b	c7cc <print_expression+0x298c>
    af80:	ldr	r3, [fp, #-60]	; 0xffffffc4
    af84:	movw	r0, #0
    af88:	movt	r0, #0
    af8c:	blx	r3
    af90:	b	c7cc <print_expression+0x298c>
    af94:	ldr	r3, [fp, #-56]	; 0xffffffc8
    af98:	ldr	r3, [r3, #16]
    af9c:	cmp	r3, #0
    afa0:	beq	afd4 <print_expression+0x1194>
    afa4:	ldr	r3, [fp, #-56]	; 0xffffffc8
    afa8:	ldr	r0, [r3, #16]
    afac:	mov	r3, #15
    afb0:	str	r3, [sp]
    afb4:	ldr	r3, [fp, #-68]	; 0xffffffbc
    afb8:	ldr	r2, [fp, #-64]	; 0xffffffc0
    afbc:	ldr	r1, [fp, #-60]	; 0xffffffc4
    afc0:	bl	9e40 <print_expression>
    afc4:	ldr	r3, [fp, #-60]	; 0xffffffc4
    afc8:	movw	r0, #0
    afcc:	movt	r0, #0
    afd0:	blx	r3
    afd4:	ldr	r3, [fp, #-60]	; 0xffffffc4
    afd8:	movw	r0, #0
    afdc:	movt	r0, #0
    afe0:	blx	r3
    afe4:	b	c7cc <print_expression+0x298c>
    afe8:	ldr	r3, [fp, #-60]	; 0xffffffc4
    afec:	movw	r0, #0
    aff0:	movt	r0, #0
    aff4:	blx	r3
    aff8:	b	c7cc <print_expression+0x298c>
    affc:	ldr	r3, [fp, #-68]	; 0xffffffbc
    b000:	cmp	r3, #0
    b004:	beq	b014 <print_expression+0x11d4>
    b008:	movw	r3, #0
    b00c:	movt	r3, #0
    b010:	b	b01c <print_expression+0x11dc>
    b014:	movw	r3, #0
    b018:	movt	r3, #0
    b01c:	ldr	r2, [fp, #-60]	; 0xffffffc4
    b020:	mov	r0, r3
    b024:	blx	r2
    b028:	ldr	r3, [fp, #-56]	; 0xffffffc8
    b02c:	ldr	r0, [r3, #16]
    b030:	mov	r3, #15
    b034:	str	r3, [sp]
    b038:	ldr	r3, [fp, #-68]	; 0xffffffbc
    b03c:	ldr	r2, [fp, #-64]	; 0xffffffc0
    b040:	ldr	r1, [fp, #-60]	; 0xffffffc4
    b044:	bl	9e40 <print_expression>
    b048:	ldr	r3, [fp, #-60]	; 0xffffffc4
    b04c:	movw	r0, #0
    b050:	movt	r0, #0
    b054:	blx	r3
    b058:	b	c7cc <print_expression+0x298c>
    b05c:	ldr	r3, [fp, #4]
    b060:	cmp	r3, #4
    b064:	bgt	b078 <print_expression+0x1238>
    b068:	ldr	r3, [fp, #-60]	; 0xffffffc4
    b06c:	movw	r0, #0
    b070:	movt	r0, #0
    b074:	blx	r3
    b078:	ldr	r3, [fp, #-56]	; 0xffffffc8
    b07c:	ldr	r0, [r3, #16]
    b080:	mov	r3, #5
    b084:	str	r3, [sp]
    b088:	ldr	r3, [fp, #-68]	; 0xffffffbc
    b08c:	ldr	r2, [fp, #-64]	; 0xffffffc0
    b090:	ldr	r1, [fp, #-60]	; 0xffffffc4
    b094:	bl	9e40 <print_expression>
    b098:	ldr	r3, [fp, #-68]	; 0xffffffbc
    b09c:	cmp	r3, #0
    b0a0:	bne	b0b0 <print_expression+0x1270>
    b0a4:	ldr	r3, [fp, #-64]	; 0xffffffc0
    b0a8:	cmp	r3, #0
    b0ac:	beq	b0bc <print_expression+0x127c>
    b0b0:	movw	r3, #0
    b0b4:	movt	r3, #0
    b0b8:	b	b0c4 <print_expression+0x1284>
    b0bc:	movw	r3, #0
    b0c0:	movt	r3, #0
    b0c4:	ldr	r2, [fp, #-60]	; 0xffffffc4
    b0c8:	mov	r0, r3
    b0cc:	blx	r2
    b0d0:	ldr	r3, [fp, #-56]	; 0xffffffc8
    b0d4:	ldr	r0, [r3, #20]
    b0d8:	mov	r3, #5
    b0dc:	str	r3, [sp]
    b0e0:	ldr	r3, [fp, #-68]	; 0xffffffbc
    b0e4:	ldr	r2, [fp, #-64]	; 0xffffffc0
    b0e8:	ldr	r1, [fp, #-60]	; 0xffffffc4
    b0ec:	bl	9e40 <print_expression>
    b0f0:	ldr	r3, [fp, #4]
    b0f4:	cmp	r3, #4
    b0f8:	bgt	c768 <print_expression+0x2928>
    b0fc:	ldr	r3, [fp, #-60]	; 0xffffffc4
    b100:	movw	r0, #0
    b104:	movt	r0, #0
    b108:	blx	r3
    b10c:	b	c768 <print_expression+0x2928>
    b110:	ldr	r3, [fp, #4]
    b114:	cmp	r3, #4
    b118:	bgt	b12c <print_expression+0x12ec>
    b11c:	ldr	r3, [fp, #-60]	; 0xffffffc4
    b120:	movw	r0, #0
    b124:	movt	r0, #0
    b128:	blx	r3
    b12c:	ldr	r3, [fp, #-56]	; 0xffffffc8
    b130:	ldr	r0, [r3, #16]
    b134:	mov	r3, #5
    b138:	str	r3, [sp]
    b13c:	ldr	r3, [fp, #-68]	; 0xffffffbc
    b140:	ldr	r2, [fp, #-64]	; 0xffffffc0
    b144:	ldr	r1, [fp, #-60]	; 0xffffffc4
    b148:	bl	9e40 <print_expression>
    b14c:	ldr	r3, [fp, #-68]	; 0xffffffbc
    b150:	cmp	r3, #0
    b154:	bne	b164 <print_expression+0x1324>
    b158:	ldr	r3, [fp, #-64]	; 0xffffffc0
    b15c:	cmp	r3, #0
    b160:	beq	b170 <print_expression+0x1330>
    b164:	movw	r3, #0
    b168:	movt	r3, #0
    b16c:	b	b178 <print_expression+0x1338>
    b170:	movw	r3, #0
    b174:	movt	r3, #0
    b178:	ldr	r2, [fp, #-60]	; 0xffffffc4
    b17c:	mov	r0, r3
    b180:	blx	r2
    b184:	ldr	r3, [fp, #-56]	; 0xffffffc8
    b188:	ldr	r0, [r3, #20]
    b18c:	mov	r3, #5
    b190:	str	r3, [sp]
    b194:	ldr	r3, [fp, #-68]	; 0xffffffbc
    b198:	ldr	r2, [fp, #-64]	; 0xffffffc0
    b19c:	ldr	r1, [fp, #-60]	; 0xffffffc4
    b1a0:	bl	9e40 <print_expression>
    b1a4:	ldr	r3, [fp, #4]
    b1a8:	cmp	r3, #4
    b1ac:	bgt	c770 <print_expression+0x2930>
    b1b0:	ldr	r3, [fp, #-60]	; 0xffffffc4
    b1b4:	movw	r0, #0
    b1b8:	movt	r0, #0
    b1bc:	blx	r3
    b1c0:	b	c770 <print_expression+0x2930>
    b1c4:	ldr	r3, [fp, #-60]	; 0xffffffc4
    b1c8:	movw	r0, #0
    b1cc:	movt	r0, #0
    b1d0:	blx	r3
    b1d4:	ldr	r3, [fp, #-56]	; 0xffffffc8
    b1d8:	ldr	r0, [r3, #16]
    b1dc:	mov	r3, #15
    b1e0:	str	r3, [sp]
    b1e4:	ldr	r3, [fp, #-68]	; 0xffffffbc
    b1e8:	ldr	r2, [fp, #-64]	; 0xffffffc0
    b1ec:	ldr	r1, [fp, #-60]	; 0xffffffc4
    b1f0:	bl	9e40 <print_expression>
    b1f4:	ldr	r3, [fp, #-60]	; 0xffffffc4
    b1f8:	movw	r0, #0
    b1fc:	movt	r0, #0
    b200:	blx	r3
    b204:	ldr	r3, [fp, #-56]	; 0xffffffc8
    b208:	ldr	r0, [r3, #20]
    b20c:	mov	r3, #15
    b210:	str	r3, [sp]
    b214:	ldr	r3, [fp, #-68]	; 0xffffffbc
    b218:	ldr	r2, [fp, #-64]	; 0xffffffc0
    b21c:	ldr	r1, [fp, #-60]	; 0xffffffc4
    b220:	bl	9e40 <print_expression>
    b224:	ldr	r3, [fp, #-60]	; 0xffffffc4
    b228:	movw	r0, #0
    b22c:	movt	r0, #0
    b230:	blx	r3
    b234:	ldr	r3, [fp, #-56]	; 0xffffffc8
    b238:	ldr	r0, [r3, #24]
    b23c:	mov	r3, #15
    b240:	str	r3, [sp]
    b244:	ldr	r3, [fp, #-68]	; 0xffffffbc
    b248:	ldr	r2, [fp, #-64]	; 0xffffffc0
    b24c:	ldr	r1, [fp, #-60]	; 0xffffffc4
    b250:	bl	9e40 <print_expression>
    b254:	ldr	r3, [fp, #-60]	; 0xffffffc4
    b258:	movw	r0, #0
    b25c:	movt	r0, #0
    b260:	blx	r3
    b264:	b	c7cc <print_expression+0x298c>
    b268:	ldr	r3, [fp, #-68]	; 0xffffffbc
    b26c:	cmp	r3, #0
    b270:	beq	b280 <print_expression+0x1440>
    b274:	movw	r3, #0
    b278:	movt	r3, #0
    b27c:	b	b288 <print_expression+0x1448>
    b280:	movw	r3, #0
    b284:	movt	r3, #0
    b288:	ldr	r2, [fp, #-60]	; 0xffffffc4
    b28c:	mov	r0, r3
    b290:	blx	r2
    b294:	ldr	r3, [fp, #-56]	; 0xffffffc8
    b298:	ldr	r0, [r3, #16]
    b29c:	mov	r3, #15
    b2a0:	str	r3, [sp]
    b2a4:	ldr	r3, [fp, #-68]	; 0xffffffbc
    b2a8:	ldr	r2, [fp, #-64]	; 0xffffffc0
    b2ac:	ldr	r1, [fp, #-60]	; 0xffffffc4
    b2b0:	bl	9e40 <print_expression>
    b2b4:	ldr	r3, [fp, #-60]	; 0xffffffc4
    b2b8:	movw	r0, #0
    b2bc:	movt	r0, #0
    b2c0:	blx	r3
    b2c4:	b	c7cc <print_expression+0x298c>
    b2c8:	ldr	r3, [fp, #-68]	; 0xffffffbc
    b2cc:	cmp	r3, #0
    b2d0:	beq	b2e0 <print_expression+0x14a0>
    b2d4:	movw	r3, #0
    b2d8:	movt	r3, #0
    b2dc:	b	b2e8 <print_expression+0x14a8>
    b2e0:	movw	r3, #0
    b2e4:	movt	r3, #0
    b2e8:	ldr	r2, [fp, #-56]	; 0xffffffc8
    b2ec:	ldr	r1, [r2, #12]
    b2f0:	ldr	r2, [fp, #-60]	; 0xffffffc4
    b2f4:	mov	r0, r3
    b2f8:	blx	r2
    b2fc:	b	c7cc <print_expression+0x298c>
    b300:	ldr	r3, [fp, #-68]	; 0xffffffbc
    b304:	cmp	r3, #0
    b308:	beq	b318 <print_expression+0x14d8>
    b30c:	movw	r3, #0
    b310:	movt	r3, #0
    b314:	b	b320 <print_expression+0x14e0>
    b318:	movw	r3, #0
    b31c:	movt	r3, #0
    b320:	ldr	r2, [fp, #-60]	; 0xffffffc4
    b324:	mov	r0, r3
    b328:	blx	r2
    b32c:	ldr	r3, [fp, #-56]	; 0xffffffc8
    b330:	ldr	r0, [r3, #16]
    b334:	mov	r3, #15
    b338:	str	r3, [sp]
    b33c:	ldr	r3, [fp, #-68]	; 0xffffffbc
    b340:	ldr	r2, [fp, #-64]	; 0xffffffc0
    b344:	ldr	r1, [fp, #-60]	; 0xffffffc4
    b348:	bl	9e40 <print_expression>
    b34c:	ldr	r3, [fp, #-60]	; 0xffffffc4
    b350:	movw	r0, #0
    b354:	movt	r0, #0
    b358:	blx	r3
    b35c:	b	c7cc <print_expression+0x298c>
    b360:	ldr	r3, [fp, #-68]	; 0xffffffbc
    b364:	cmp	r3, #0
    b368:	beq	b378 <print_expression+0x1538>
    b36c:	movw	r3, #0
    b370:	movt	r3, #0
    b374:	b	b380 <print_expression+0x1540>
    b378:	movw	r3, #0
    b37c:	movt	r3, #0
    b380:	ldr	r2, [fp, #-60]	; 0xffffffc4
    b384:	mov	r0, r3
    b388:	blx	r2
    b38c:	ldr	r3, [fp, #-56]	; 0xffffffc8
    b390:	ldr	r0, [r3, #16]
    b394:	mov	r3, #15
    b398:	str	r3, [sp]
    b39c:	ldr	r3, [fp, #-68]	; 0xffffffbc
    b3a0:	ldr	r2, [fp, #-64]	; 0xffffffc0
    b3a4:	ldr	r1, [fp, #-60]	; 0xffffffc4
    b3a8:	bl	9e40 <print_expression>
    b3ac:	ldr	r3, [fp, #-60]	; 0xffffffc4
    b3b0:	movw	r0, #0
    b3b4:	movt	r0, #0
    b3b8:	blx	r3
    b3bc:	b	c7cc <print_expression+0x298c>
    b3c0:	ldr	r3, [fp, #-68]	; 0xffffffbc
    b3c4:	cmp	r3, #0
    b3c8:	beq	b3d8 <print_expression+0x1598>
    b3cc:	movw	r3, #0
    b3d0:	movt	r3, #0
    b3d4:	b	b3e0 <print_expression+0x15a0>
    b3d8:	movw	r3, #0
    b3dc:	movt	r3, #0
    b3e0:	ldr	r2, [fp, #-60]	; 0xffffffc4
    b3e4:	mov	r0, r3
    b3e8:	blx	r2
    b3ec:	ldr	r3, [fp, #-56]	; 0xffffffc8
    b3f0:	ldr	r0, [r3, #16]
    b3f4:	mov	r3, #15
    b3f8:	str	r3, [sp]
    b3fc:	ldr	r3, [fp, #-68]	; 0xffffffbc
    b400:	ldr	r2, [fp, #-64]	; 0xffffffc0
    b404:	ldr	r1, [fp, #-60]	; 0xffffffc4
    b408:	bl	9e40 <print_expression>
    b40c:	ldr	r3, [fp, #-60]	; 0xffffffc4
    b410:	movw	r0, #0
    b414:	movt	r0, #0
    b418:	blx	r3
    b41c:	b	c7cc <print_expression+0x298c>
    b420:	ldr	r3, [fp, #-68]	; 0xffffffbc
    b424:	cmp	r3, #0
    b428:	beq	b438 <print_expression+0x15f8>
    b42c:	movw	r3, #0
    b430:	movt	r3, #0
    b434:	b	b440 <print_expression+0x1600>
    b438:	movw	r3, #0
    b43c:	movt	r3, #0
    b440:	ldr	r2, [fp, #-60]	; 0xffffffc4
    b444:	mov	r0, r3
    b448:	blx	r2
    b44c:	ldr	r3, [fp, #-56]	; 0xffffffc8
    b450:	ldr	r0, [r3, #16]
    b454:	mov	r3, #15
    b458:	str	r3, [sp]
    b45c:	ldr	r3, [fp, #-68]	; 0xffffffbc
    b460:	ldr	r2, [fp, #-64]	; 0xffffffc0
    b464:	ldr	r1, [fp, #-60]	; 0xffffffc4
    b468:	bl	9e40 <print_expression>
    b46c:	ldr	r3, [fp, #-60]	; 0xffffffc4
    b470:	movw	r0, #0
    b474:	movt	r0, #0
    b478:	blx	r3
    b47c:	b	c7cc <print_expression+0x298c>
    b480:	ldr	r3, [fp, #-68]	; 0xffffffbc
    b484:	cmp	r3, #0
    b488:	beq	b498 <print_expression+0x1658>
    b48c:	movw	r3, #0
    b490:	movt	r3, #0
    b494:	b	b4a0 <print_expression+0x1660>
    b498:	movw	r3, #0
    b49c:	movt	r3, #0
    b4a0:	ldr	r2, [fp, #-60]	; 0xffffffc4
    b4a4:	mov	r0, r3
    b4a8:	blx	r2
    b4ac:	ldr	r3, [fp, #-56]	; 0xffffffc8
    b4b0:	ldr	r0, [r3, #16]
    b4b4:	mov	r3, #15
    b4b8:	str	r3, [sp]
    b4bc:	ldr	r3, [fp, #-68]	; 0xffffffbc
    b4c0:	ldr	r2, [fp, #-64]	; 0xffffffc0
    b4c4:	ldr	r1, [fp, #-60]	; 0xffffffc4
    b4c8:	bl	9e40 <print_expression>
    b4cc:	ldr	r3, [fp, #-60]	; 0xffffffc4
    b4d0:	movw	r0, #0
    b4d4:	movt	r0, #0
    b4d8:	blx	r3
    b4dc:	b	c7cc <print_expression+0x298c>
    b4e0:	ldr	r3, [fp, #-68]	; 0xffffffbc
    b4e4:	cmp	r3, #0
    b4e8:	beq	b4f8 <print_expression+0x16b8>
    b4ec:	movw	r3, #0
    b4f0:	movt	r3, #0
    b4f4:	b	b500 <print_expression+0x16c0>
    b4f8:	movw	r3, #0
    b4fc:	movt	r3, #0
    b500:	ldr	r2, [fp, #-60]	; 0xffffffc4
    b504:	mov	r0, r3
    b508:	blx	r2
    b50c:	ldr	r3, [fp, #-56]	; 0xffffffc8
    b510:	ldr	r0, [r3, #16]
    b514:	mov	r3, #15
    b518:	str	r3, [sp]
    b51c:	ldr	r3, [fp, #-68]	; 0xffffffbc
    b520:	ldr	r2, [fp, #-64]	; 0xffffffc0
    b524:	ldr	r1, [fp, #-60]	; 0xffffffc4
    b528:	bl	9e40 <print_expression>
    b52c:	ldr	r3, [fp, #-60]	; 0xffffffc4
    b530:	movw	r0, #0
    b534:	movt	r0, #0
    b538:	blx	r3
    b53c:	b	c7cc <print_expression+0x298c>
    b540:	ldr	r3, [fp, #4]
    b544:	cmp	r3, #4
    b548:	bgt	b55c <print_expression+0x171c>
    b54c:	ldr	r3, [fp, #-60]	; 0xffffffc4
    b550:	movw	r0, #0
    b554:	movt	r0, #0
    b558:	blx	r3
    b55c:	ldr	r3, [fp, #-56]	; 0xffffffc8
    b560:	ldr	r0, [r3, #16]
    b564:	mov	r3, #5
    b568:	str	r3, [sp]
    b56c:	ldr	r3, [fp, #-68]	; 0xffffffbc
    b570:	ldr	r2, [fp, #-64]	; 0xffffffc0
    b574:	ldr	r1, [fp, #-60]	; 0xffffffc4
    b578:	bl	9e40 <print_expression>
    b57c:	ldr	r3, [fp, #-68]	; 0xffffffbc
    b580:	cmp	r3, #0
    b584:	bne	b594 <print_expression+0x1754>
    b588:	ldr	r3, [fp, #-64]	; 0xffffffc0
    b58c:	cmp	r3, #0
    b590:	beq	b5a0 <print_expression+0x1760>
    b594:	movw	r3, #0
    b598:	movt	r3, #0
    b59c:	b	b5a8 <print_expression+0x1768>
    b5a0:	movw	r3, #0
    b5a4:	movt	r3, #0
    b5a8:	ldr	r2, [fp, #-60]	; 0xffffffc4
    b5ac:	mov	r0, r3
    b5b0:	blx	r2
    b5b4:	ldr	r3, [fp, #-56]	; 0xffffffc8
    b5b8:	ldr	r0, [r3, #20]
    b5bc:	mov	r3, #5
    b5c0:	str	r3, [sp]
    b5c4:	ldr	r3, [fp, #-68]	; 0xffffffbc
    b5c8:	ldr	r2, [fp, #-64]	; 0xffffffc0
    b5cc:	ldr	r1, [fp, #-60]	; 0xffffffc4
    b5d0:	bl	9e40 <print_expression>
    b5d4:	ldr	r3, [fp, #4]
    b5d8:	cmp	r3, #4
    b5dc:	bgt	c778 <print_expression+0x2938>
    b5e0:	ldr	r3, [fp, #-60]	; 0xffffffc4
    b5e4:	movw	r0, #0
    b5e8:	movt	r0, #0
    b5ec:	blx	r3
    b5f0:	b	c778 <print_expression+0x2938>
    b5f4:	ldr	r3, [fp, #4]
    b5f8:	cmp	r3, #4
    b5fc:	bgt	b610 <print_expression+0x17d0>
    b600:	ldr	r3, [fp, #-60]	; 0xffffffc4
    b604:	movw	r0, #0
    b608:	movt	r0, #0
    b60c:	blx	r3
    b610:	ldr	r3, [fp, #-56]	; 0xffffffc8
    b614:	ldr	r0, [r3, #16]
    b618:	mov	r3, #5
    b61c:	str	r3, [sp]
    b620:	ldr	r3, [fp, #-68]	; 0xffffffbc
    b624:	ldr	r2, [fp, #-64]	; 0xffffffc0
    b628:	ldr	r1, [fp, #-60]	; 0xffffffc4
    b62c:	bl	9e40 <print_expression>
    b630:	ldr	r3, [fp, #-68]	; 0xffffffbc
    b634:	cmp	r3, #0
    b638:	bne	b648 <print_expression+0x1808>
    b63c:	ldr	r3, [fp, #-64]	; 0xffffffc0
    b640:	cmp	r3, #0
    b644:	beq	b654 <print_expression+0x1814>
    b648:	movw	r3, #0
    b64c:	movt	r3, #0
    b650:	b	b65c <print_expression+0x181c>
    b654:	movw	r3, #0
    b658:	movt	r3, #0
    b65c:	ldr	r2, [fp, #-60]	; 0xffffffc4
    b660:	mov	r0, r3
    b664:	blx	r2
    b668:	ldr	r3, [fp, #-56]	; 0xffffffc8
    b66c:	ldr	r0, [r3, #20]
    b670:	mov	r3, #5
    b674:	str	r3, [sp]
    b678:	ldr	r3, [fp, #-68]	; 0xffffffbc
    b67c:	ldr	r2, [fp, #-64]	; 0xffffffc0
    b680:	ldr	r1, [fp, #-60]	; 0xffffffc4
    b684:	bl	9e40 <print_expression>
    b688:	ldr	r3, [fp, #4]
    b68c:	cmp	r3, #4
    b690:	bgt	c780 <print_expression+0x2940>
    b694:	ldr	r3, [fp, #-60]	; 0xffffffc4
    b698:	movw	r0, #0
    b69c:	movt	r0, #0
    b6a0:	blx	r3
    b6a4:	b	c780 <print_expression+0x2940>
    b6a8:	ldr	r3, [fp, #4]
    b6ac:	cmp	r3, #8
    b6b0:	bgt	b6c4 <print_expression+0x1884>
    b6b4:	ldr	r3, [fp, #-60]	; 0xffffffc4
    b6b8:	movw	r0, #0
    b6bc:	movt	r0, #0
    b6c0:	blx	r3
    b6c4:	ldr	r3, [fp, #-56]	; 0xffffffc8
    b6c8:	ldr	r0, [r3, #16]
    b6cc:	mov	r3, #9
    b6d0:	str	r3, [sp]
    b6d4:	ldr	r3, [fp, #-68]	; 0xffffffbc
    b6d8:	ldr	r2, [fp, #-64]	; 0xffffffc0
    b6dc:	ldr	r1, [fp, #-60]	; 0xffffffc4
    b6e0:	bl	9e40 <print_expression>
    b6e4:	ldr	r3, [fp, #-68]	; 0xffffffbc
    b6e8:	cmp	r3, #0
    b6ec:	beq	b6fc <print_expression+0x18bc>
    b6f0:	movw	r3, #0
    b6f4:	movt	r3, #0
    b6f8:	b	b704 <print_expression+0x18c4>
    b6fc:	movw	r3, #0
    b700:	movt	r3, #0
    b704:	ldr	r2, [fp, #-60]	; 0xffffffc4
    b708:	mov	r0, r3
    b70c:	blx	r2
    b710:	ldr	r3, [fp, #-56]	; 0xffffffc8
    b714:	ldr	r0, [r3, #20]
    b718:	mov	r3, #9
    b71c:	str	r3, [sp]
    b720:	ldr	r3, [fp, #-68]	; 0xffffffbc
    b724:	ldr	r2, [fp, #-64]	; 0xffffffc0
    b728:	ldr	r1, [fp, #-60]	; 0xffffffc4
    b72c:	bl	9e40 <print_expression>
    b730:	ldr	r3, [fp, #4]
    b734:	cmp	r3, #8
    b738:	bgt	c788 <print_expression+0x2948>
    b73c:	ldr	r3, [fp, #-60]	; 0xffffffc4
    b740:	movw	r0, #0
    b744:	movt	r0, #0
    b748:	blx	r3
    b74c:	b	c788 <print_expression+0x2948>
    b750:	ldr	r3, [fp, #4]
    b754:	cmp	r3, #9
    b758:	bgt	b76c <print_expression+0x192c>
    b75c:	ldr	r3, [fp, #-60]	; 0xffffffc4
    b760:	movw	r0, #0
    b764:	movt	r0, #0
    b768:	blx	r3
    b76c:	ldr	r3, [fp, #-56]	; 0xffffffc8
    b770:	ldr	r0, [r3, #16]
    b774:	mov	r3, #10
    b778:	str	r3, [sp]
    b77c:	ldr	r3, [fp, #-68]	; 0xffffffbc
    b780:	ldr	r2, [fp, #-64]	; 0xffffffc0
    b784:	ldr	r1, [fp, #-60]	; 0xffffffc4
    b788:	bl	9e40 <print_expression>
    b78c:	ldr	r3, [fp, #-68]	; 0xffffffbc
    b790:	cmp	r3, #0
    b794:	beq	b7a4 <print_expression+0x1964>
    b798:	movw	r3, #0
    b79c:	movt	r3, #0
    b7a0:	b	b7ac <print_expression+0x196c>
    b7a4:	movw	r3, #0
    b7a8:	movt	r3, #0
    b7ac:	ldr	r2, [fp, #-60]	; 0xffffffc4
    b7b0:	mov	r0, r3
    b7b4:	blx	r2
    b7b8:	ldr	r3, [fp, #-56]	; 0xffffffc8
    b7bc:	ldr	r0, [r3, #20]
    b7c0:	mov	r3, #10
    b7c4:	str	r3, [sp]
    b7c8:	ldr	r3, [fp, #-68]	; 0xffffffbc
    b7cc:	ldr	r2, [fp, #-64]	; 0xffffffc0
    b7d0:	ldr	r1, [fp, #-60]	; 0xffffffc4
    b7d4:	bl	9e40 <print_expression>
    b7d8:	ldr	r3, [fp, #4]
    b7dc:	cmp	r3, #9
    b7e0:	bgt	c790 <print_expression+0x2950>
    b7e4:	ldr	r3, [fp, #-60]	; 0xffffffc4
    b7e8:	movw	r0, #0
    b7ec:	movt	r0, #0
    b7f0:	blx	r3
    b7f4:	b	c790 <print_expression+0x2950>
    b7f8:	ldr	r3, [fp, #-68]	; 0xffffffbc
    b7fc:	cmp	r3, #0
    b800:	beq	b810 <print_expression+0x19d0>
    b804:	movw	r3, #0
    b808:	movt	r3, #0
    b80c:	b	b818 <print_expression+0x19d8>
    b810:	movw	r3, #0
    b814:	movt	r3, #0
    b818:	ldr	r2, [fp, #-60]	; 0xffffffc4
    b81c:	mov	r0, r3
    b820:	blx	r2
    b824:	ldr	r3, [fp, #-56]	; 0xffffffc8
    b828:	ldr	r0, [r3, #16]
    b82c:	mov	r3, #15
    b830:	str	r3, [sp]
    b834:	ldr	r3, [fp, #-68]	; 0xffffffbc
    b838:	ldr	r2, [fp, #-64]	; 0xffffffc0
    b83c:	ldr	r1, [fp, #-60]	; 0xffffffc4
    b840:	bl	9e40 <print_expression>
    b844:	ldr	r3, [fp, #-60]	; 0xffffffc4
    b848:	movw	r0, #0
    b84c:	movt	r0, #0
    b850:	blx	r3
    b854:	b	c7cc <print_expression+0x298c>
    b858:	ldr	r3, [fp, #-68]	; 0xffffffbc
    b85c:	cmp	r3, #0
    b860:	beq	b870 <print_expression+0x1a30>
    b864:	movw	r3, #0
    b868:	movt	r3, #0
    b86c:	b	b878 <print_expression+0x1a38>
    b870:	movw	r3, #0
    b874:	movt	r3, #0
    b878:	ldr	r2, [fp, #-60]	; 0xffffffc4
    b87c:	mov	r0, r3
    b880:	blx	r2
    b884:	ldr	r3, [fp, #-56]	; 0xffffffc8
    b888:	ldr	r0, [r3, #16]
    b88c:	mov	r3, #15
    b890:	str	r3, [sp]
    b894:	ldr	r3, [fp, #-68]	; 0xffffffbc
    b898:	ldr	r2, [fp, #-64]	; 0xffffffc0
    b89c:	ldr	r1, [fp, #-60]	; 0xffffffc4
    b8a0:	bl	9e40 <print_expression>
    b8a4:	ldr	r3, [fp, #-60]	; 0xffffffc4
    b8a8:	movw	r0, #0
    b8ac:	movt	r0, #0
    b8b0:	blx	r3
    b8b4:	ldr	r3, [fp, #-56]	; 0xffffffc8
    b8b8:	ldr	r0, [r3, #20]
    b8bc:	mov	r3, #15
    b8c0:	str	r3, [sp]
    b8c4:	ldr	r3, [fp, #-68]	; 0xffffffbc
    b8c8:	ldr	r2, [fp, #-64]	; 0xffffffc0
    b8cc:	ldr	r1, [fp, #-60]	; 0xffffffc4
    b8d0:	bl	9e40 <print_expression>
    b8d4:	ldr	r3, [fp, #-60]	; 0xffffffc4
    b8d8:	movw	r0, #0
    b8dc:	movt	r0, #0
    b8e0:	blx	r3
    b8e4:	b	c7cc <print_expression+0x298c>
    b8e8:	ldr	r3, [fp, #-68]	; 0xffffffbc
    b8ec:	cmp	r3, #0
    b8f0:	beq	b900 <print_expression+0x1ac0>
    b8f4:	movw	r3, #0
    b8f8:	movt	r3, #0
    b8fc:	b	b908 <print_expression+0x1ac8>
    b900:	movw	r3, #0
    b904:	movt	r3, #0
    b908:	ldr	r2, [fp, #-60]	; 0xffffffc4
    b90c:	mov	r0, r3
    b910:	blx	r2
    b914:	ldr	r3, [fp, #-56]	; 0xffffffc8
    b918:	ldr	r0, [r3, #16]
    b91c:	mov	r3, #15
    b920:	str	r3, [sp]
    b924:	ldr	r3, [fp, #-68]	; 0xffffffbc
    b928:	ldr	r2, [fp, #-64]	; 0xffffffc0
    b92c:	ldr	r1, [fp, #-60]	; 0xffffffc4
    b930:	bl	9e40 <print_expression>
    b934:	ldr	r3, [fp, #-60]	; 0xffffffc4
    b938:	movw	r0, #0
    b93c:	movt	r0, #0
    b940:	blx	r3
    b944:	ldr	r3, [fp, #-56]	; 0xffffffc8
    b948:	ldr	r0, [r3, #20]
    b94c:	mov	r3, #15
    b950:	str	r3, [sp]
    b954:	ldr	r3, [fp, #-68]	; 0xffffffbc
    b958:	ldr	r2, [fp, #-64]	; 0xffffffc0
    b95c:	ldr	r1, [fp, #-60]	; 0xffffffc4
    b960:	bl	9e40 <print_expression>
    b964:	ldr	r3, [fp, #-60]	; 0xffffffc4
    b968:	movw	r0, #0
    b96c:	movt	r0, #0
    b970:	blx	r3
    b974:	b	c7cc <print_expression+0x298c>
    b978:	ldr	r3, [fp, #4]
    b97c:	cmp	r3, #2
    b980:	bgt	b994 <print_expression+0x1b54>
    b984:	ldr	r3, [fp, #-60]	; 0xffffffc4
    b988:	movw	r0, #0
    b98c:	movt	r0, #0
    b990:	blx	r3
    b994:	ldr	r3, [fp, #-56]	; 0xffffffc8
    b998:	ldr	r0, [r3, #16]
    b99c:	mov	r3, #3
    b9a0:	str	r3, [sp]
    b9a4:	ldr	r3, [fp, #-68]	; 0xffffffbc
    b9a8:	ldr	r2, [fp, #-64]	; 0xffffffc0
    b9ac:	ldr	r1, [fp, #-60]	; 0xffffffc4
    b9b0:	bl	9e40 <print_expression>
    b9b4:	ldr	r3, [fp, #-60]	; 0xffffffc4
    b9b8:	movw	r0, #0
    b9bc:	movt	r0, #0
    b9c0:	blx	r3
    b9c4:	ldr	r3, [fp, #-56]	; 0xffffffc8
    b9c8:	ldr	r0, [r3, #20]
    b9cc:	mov	r3, #3
    b9d0:	str	r3, [sp]
    b9d4:	ldr	r3, [fp, #-68]	; 0xffffffbc
    b9d8:	ldr	r2, [fp, #-64]	; 0xffffffc0
    b9dc:	ldr	r1, [fp, #-60]	; 0xffffffc4
    b9e0:	bl	9e40 <print_expression>
    b9e4:	ldr	r3, [fp, #4]
    b9e8:	cmp	r3, #2
    b9ec:	bgt	c798 <print_expression+0x2958>
    b9f0:	ldr	r3, [fp, #-60]	; 0xffffffc4
    b9f4:	movw	r0, #0
    b9f8:	movt	r0, #0
    b9fc:	blx	r3
    ba00:	b	c798 <print_expression+0x2958>
    ba04:	ldr	r3, [fp, #4]
    ba08:	cmp	r3, #2
    ba0c:	bgt	ba20 <print_expression+0x1be0>
    ba10:	ldr	r3, [fp, #-60]	; 0xffffffc4
    ba14:	movw	r0, #0
    ba18:	movt	r0, #0
    ba1c:	blx	r3
    ba20:	ldr	r3, [fp, #-56]	; 0xffffffc8
    ba24:	ldr	r0, [r3, #16]
    ba28:	mov	r3, #3
    ba2c:	str	r3, [sp]
    ba30:	ldr	r3, [fp, #-68]	; 0xffffffbc
    ba34:	ldr	r2, [fp, #-64]	; 0xffffffc0
    ba38:	ldr	r1, [fp, #-60]	; 0xffffffc4
    ba3c:	bl	9e40 <print_expression>
    ba40:	ldr	r3, [fp, #-60]	; 0xffffffc4
    ba44:	movw	r0, #0
    ba48:	movt	r0, #0
    ba4c:	blx	r3
    ba50:	ldr	r3, [fp, #-56]	; 0xffffffc8
    ba54:	ldr	r0, [r3, #20]
    ba58:	mov	r3, #3
    ba5c:	str	r3, [sp]
    ba60:	ldr	r3, [fp, #-68]	; 0xffffffbc
    ba64:	ldr	r2, [fp, #-64]	; 0xffffffc0
    ba68:	ldr	r1, [fp, #-60]	; 0xffffffc4
    ba6c:	bl	9e40 <print_expression>
    ba70:	ldr	r3, [fp, #4]
    ba74:	cmp	r3, #2
    ba78:	bgt	c7a0 <print_expression+0x2960>
    ba7c:	ldr	r3, [fp, #-60]	; 0xffffffc4
    ba80:	movw	r0, #0
    ba84:	movt	r0, #0
    ba88:	blx	r3
    ba8c:	b	c7a0 <print_expression+0x2960>
    ba90:	ldr	r3, [fp, #-60]	; 0xffffffc4
    ba94:	movw	r0, #0
    ba98:	movt	r0, #0
    ba9c:	blx	r3
    baa0:	ldr	r3, [fp, #-56]	; 0xffffffc8
    baa4:	ldr	r0, [r3, #16]
    baa8:	mov	r3, #1
    baac:	str	r3, [sp]
    bab0:	ldr	r3, [fp, #-68]	; 0xffffffbc
    bab4:	ldr	r2, [fp, #-64]	; 0xffffffc0
    bab8:	ldr	r1, [fp, #-60]	; 0xffffffc4
    babc:	bl	9e40 <print_expression>
    bac0:	b	c7cc <print_expression+0x298c>
    bac4:	ldr	r3, [fp, #4]
    bac8:	cmp	r3, #5
    bacc:	bgt	bae0 <print_expression+0x1ca0>
    bad0:	ldr	r3, [fp, #-60]	; 0xffffffc4
    bad4:	movw	r0, #0
    bad8:	movt	r0, #0
    badc:	blx	r3
    bae0:	ldr	r3, [fp, #-56]	; 0xffffffc8
    bae4:	ldr	r0, [r3, #16]
    bae8:	mov	r3, #6
    baec:	str	r3, [sp]
    baf0:	ldr	r3, [fp, #-68]	; 0xffffffbc
    baf4:	ldr	r2, [fp, #-64]	; 0xffffffc0
    baf8:	ldr	r1, [fp, #-60]	; 0xffffffc4
    bafc:	bl	9e40 <print_expression>
    bb00:	ldr	r3, [fp, #-60]	; 0xffffffc4
    bb04:	movw	r0, #0
    bb08:	movt	r0, #0
    bb0c:	blx	r3
    bb10:	ldr	r3, [fp, #-56]	; 0xffffffc8
    bb14:	ldr	r0, [r3, #20]
    bb18:	mov	r3, #6
    bb1c:	str	r3, [sp]
    bb20:	ldr	r3, [fp, #-68]	; 0xffffffbc
    bb24:	ldr	r2, [fp, #-64]	; 0xffffffc0
    bb28:	ldr	r1, [fp, #-60]	; 0xffffffc4
    bb2c:	bl	9e40 <print_expression>
    bb30:	ldr	r3, [fp, #4]
    bb34:	cmp	r3, #5
    bb38:	bgt	c7a8 <print_expression+0x2968>
    bb3c:	ldr	r3, [fp, #-60]	; 0xffffffc4
    bb40:	movw	r0, #0
    bb44:	movt	r0, #0
    bb48:	blx	r3
    bb4c:	b	c7a8 <print_expression+0x2968>
    bb50:	ldr	r3, [fp, #-60]	; 0xffffffc4
    bb54:	movw	r0, #0
    bb58:	movt	r0, #0
    bb5c:	blx	r3
    bb60:	ldr	r3, [fp, #-56]	; 0xffffffc8
    bb64:	ldr	r0, [r3, #16]
    bb68:	mov	r3, #1
    bb6c:	str	r3, [sp]
    bb70:	ldr	r3, [fp, #-68]	; 0xffffffbc
    bb74:	ldr	r2, [fp, #-64]	; 0xffffffc0
    bb78:	ldr	r1, [fp, #-60]	; 0xffffffc4
    bb7c:	bl	9e40 <print_expression>
    bb80:	b	c7cc <print_expression+0x298c>
    bb84:	ldr	r3, [fp, #-68]	; 0xffffffbc
    bb88:	cmp	r3, #0
    bb8c:	beq	bb9c <print_expression+0x1d5c>
    bb90:	movw	r3, #0
    bb94:	movt	r3, #0
    bb98:	b	bba4 <print_expression+0x1d64>
    bb9c:	movw	r3, #0
    bba0:	movt	r3, #0
    bba4:	ldr	r2, [fp, #-60]	; 0xffffffc4
    bba8:	mov	r0, r3
    bbac:	blx	r2
    bbb0:	ldr	r3, [fp, #-56]	; 0xffffffc8
    bbb4:	ldr	r0, [r3, #16]
    bbb8:	mov	r3, #15
    bbbc:	str	r3, [sp]
    bbc0:	ldr	r3, [fp, #-68]	; 0xffffffbc
    bbc4:	ldr	r2, [fp, #-64]	; 0xffffffc0
    bbc8:	ldr	r1, [fp, #-60]	; 0xffffffc4
    bbcc:	bl	9e40 <print_expression>
    bbd0:	ldr	r3, [fp, #-60]	; 0xffffffc4
    bbd4:	movw	r0, #0
    bbd8:	movt	r0, #0
    bbdc:	blx	r3
    bbe0:	b	c7cc <print_expression+0x298c>
    bbe4:	ldr	r3, [fp, #-68]	; 0xffffffbc
    bbe8:	cmp	r3, #0
    bbec:	beq	bbfc <print_expression+0x1dbc>
    bbf0:	movw	r3, #0
    bbf4:	movt	r3, #0
    bbf8:	b	bc04 <print_expression+0x1dc4>
    bbfc:	movw	r3, #0
    bc00:	movt	r3, #0
    bc04:	ldr	r2, [fp, #-60]	; 0xffffffc4
    bc08:	mov	r0, r3
    bc0c:	blx	r2
    bc10:	ldr	r3, [fp, #-56]	; 0xffffffc8
    bc14:	ldr	r0, [r3, #16]
    bc18:	mov	r3, #15
    bc1c:	str	r3, [sp]
    bc20:	ldr	r3, [fp, #-68]	; 0xffffffbc
    bc24:	ldr	r2, [fp, #-64]	; 0xffffffc0
    bc28:	ldr	r1, [fp, #-60]	; 0xffffffc4
    bc2c:	bl	9e40 <print_expression>
    bc30:	ldr	r3, [fp, #-60]	; 0xffffffc4
    bc34:	movw	r0, #0
    bc38:	movt	r0, #0
    bc3c:	blx	r3
    bc40:	b	c7cc <print_expression+0x298c>
    bc44:	ldr	r3, [fp, #4]
    bc48:	cmp	r3, #6
    bc4c:	bgt	bc60 <print_expression+0x1e20>
    bc50:	ldr	r3, [fp, #-60]	; 0xffffffc4
    bc54:	movw	r0, #0
    bc58:	movt	r0, #0
    bc5c:	blx	r3
    bc60:	ldr	r3, [fp, #-56]	; 0xffffffc8
    bc64:	ldr	r0, [r3, #16]
    bc68:	mov	r3, #7
    bc6c:	str	r3, [sp]
    bc70:	ldr	r3, [fp, #-68]	; 0xffffffbc
    bc74:	ldr	r2, [fp, #-64]	; 0xffffffc0
    bc78:	ldr	r1, [fp, #-60]	; 0xffffffc4
    bc7c:	bl	9e40 <print_expression>
    bc80:	ldr	r3, [fp, #-60]	; 0xffffffc4
    bc84:	movw	r0, #0
    bc88:	movt	r0, #0
    bc8c:	blx	r3
    bc90:	ldr	r3, [fp, #-56]	; 0xffffffc8
    bc94:	ldr	r0, [r3, #20]
    bc98:	mov	r3, #7
    bc9c:	str	r3, [sp]
    bca0:	ldr	r3, [fp, #-68]	; 0xffffffbc
    bca4:	ldr	r2, [fp, #-64]	; 0xffffffc0
    bca8:	ldr	r1, [fp, #-60]	; 0xffffffc4
    bcac:	bl	9e40 <print_expression>
    bcb0:	ldr	r3, [fp, #4]
    bcb4:	cmp	r3, #6
    bcb8:	bgt	c7b0 <print_expression+0x2970>
    bcbc:	ldr	r3, [fp, #-60]	; 0xffffffc4
    bcc0:	movw	r0, #0
    bcc4:	movt	r0, #0
    bcc8:	blx	r3
    bccc:	b	c7b0 <print_expression+0x2970>
    bcd0:	ldr	r3, [fp, #4]
    bcd4:	cmp	r3, #1
    bcd8:	bgt	bcec <print_expression+0x1eac>
    bcdc:	ldr	r3, [fp, #-60]	; 0xffffffc4
    bce0:	movw	r0, #0
    bce4:	movt	r0, #0
    bce8:	blx	r3
    bcec:	ldr	r3, [fp, #-56]	; 0xffffffc8
    bcf0:	ldr	r0, [r3, #16]
    bcf4:	mov	r3, #2
    bcf8:	str	r3, [sp]
    bcfc:	ldr	r3, [fp, #-68]	; 0xffffffbc
    bd00:	ldr	r2, [fp, #-64]	; 0xffffffc0
    bd04:	ldr	r1, [fp, #-60]	; 0xffffffc4
    bd08:	bl	9e40 <print_expression>
    bd0c:	ldr	r3, [fp, #-60]	; 0xffffffc4
    bd10:	movw	r0, #0
    bd14:	movt	r0, #0
    bd18:	blx	r3
    bd1c:	ldr	r3, [fp, #-56]	; 0xffffffc8
    bd20:	ldr	r0, [r3, #20]
    bd24:	mov	r3, #2
    bd28:	str	r3, [sp]
    bd2c:	ldr	r3, [fp, #-68]	; 0xffffffbc
    bd30:	ldr	r2, [fp, #-64]	; 0xffffffc0
    bd34:	ldr	r1, [fp, #-60]	; 0xffffffc4
    bd38:	bl	9e40 <print_expression>
    bd3c:	ldr	r3, [fp, #4]
    bd40:	cmp	r3, #1
    bd44:	bgt	c7b8 <print_expression+0x2978>
    bd48:	ldr	r3, [fp, #-60]	; 0xffffffc4
    bd4c:	movw	r0, #0
    bd50:	movt	r0, #0
    bd54:	blx	r3
    bd58:	b	c7b8 <print_expression+0x2978>
    bd5c:	ldr	r3, [fp, #-68]	; 0xffffffbc
    bd60:	cmp	r3, #0
    bd64:	beq	bd74 <print_expression+0x1f34>
    bd68:	movw	r3, #0
    bd6c:	movt	r3, #0
    bd70:	b	bd7c <print_expression+0x1f3c>
    bd74:	movw	r3, #0
    bd78:	movt	r3, #0
    bd7c:	ldr	r2, [fp, #-60]	; 0xffffffc4
    bd80:	mov	r0, r3
    bd84:	blx	r2
    bd88:	b	c7cc <print_expression+0x298c>
    bd8c:	ldr	r3, [fp, #-68]	; 0xffffffbc
    bd90:	cmp	r3, #0
    bd94:	beq	bda4 <print_expression+0x1f64>
    bd98:	movw	r3, #0
    bd9c:	movt	r3, #0
    bda0:	b	bdac <print_expression+0x1f6c>
    bda4:	movw	r3, #0
    bda8:	movt	r3, #0
    bdac:	ldr	r2, [fp, #-60]	; 0xffffffc4
    bdb0:	mov	r0, r3
    bdb4:	blx	r2
    bdb8:	b	c7cc <print_expression+0x298c>
    bdbc:	ldr	r3, [fp, #-68]	; 0xffffffbc
    bdc0:	cmp	r3, #0
    bdc4:	beq	bdd4 <print_expression+0x1f94>
    bdc8:	movw	r3, #0
    bdcc:	movt	r3, #0
    bdd0:	b	bddc <print_expression+0x1f9c>
    bdd4:	movw	r3, #0
    bdd8:	movt	r3, #0
    bddc:	ldr	r2, [fp, #-60]	; 0xffffffc4
    bde0:	mov	r0, r3
    bde4:	blx	r2
    bde8:	b	c7cc <print_expression+0x298c>
    bdec:	ldr	r3, [fp, #-68]	; 0xffffffbc
    bdf0:	cmp	r3, #0
    bdf4:	beq	be04 <print_expression+0x1fc4>
    bdf8:	movw	r3, #0
    bdfc:	movt	r3, #0
    be00:	b	be0c <print_expression+0x1fcc>
    be04:	movw	r3, #0
    be08:	movt	r3, #0
    be0c:	ldr	r2, [fp, #-60]	; 0xffffffc4
    be10:	mov	r0, r3
    be14:	blx	r2
    be18:	b	c7cc <print_expression+0x298c>
    be1c:	ldr	r3, [fp, #-68]	; 0xffffffbc
    be20:	cmp	r3, #0
    be24:	beq	be34 <print_expression+0x1ff4>
    be28:	movw	r3, #0
    be2c:	movt	r3, #0
    be30:	b	be3c <print_expression+0x1ffc>
    be34:	movw	r3, #0
    be38:	movt	r3, #0
    be3c:	ldr	r2, [fp, #-60]	; 0xffffffc4
    be40:	mov	r0, r3
    be44:	blx	r2
    be48:	ldr	r3, [fp, #-56]	; 0xffffffc8
    be4c:	ldr	r0, [r3, #16]
    be50:	mov	r3, #15
    be54:	str	r3, [sp]
    be58:	ldr	r3, [fp, #-68]	; 0xffffffbc
    be5c:	ldr	r2, [fp, #-64]	; 0xffffffc0
    be60:	ldr	r1, [fp, #-60]	; 0xffffffc4
    be64:	bl	9e40 <print_expression>
    be68:	ldr	r3, [fp, #-60]	; 0xffffffc4
    be6c:	movw	r0, #0
    be70:	movt	r0, #0
    be74:	blx	r3
    be78:	ldr	r3, [fp, #-56]	; 0xffffffc8
    be7c:	ldr	r0, [r3, #20]
    be80:	mov	r3, #15
    be84:	str	r3, [sp]
    be88:	ldr	r3, [fp, #-68]	; 0xffffffbc
    be8c:	ldr	r2, [fp, #-64]	; 0xffffffc0
    be90:	ldr	r1, [fp, #-60]	; 0xffffffc4
    be94:	bl	9e40 <print_expression>
    be98:	ldr	r3, [fp, #-56]	; 0xffffffc8
    be9c:	ldr	r3, [r3, #24]
    bea0:	cmp	r3, #0
    bea4:	beq	bed8 <print_expression+0x2098>
    bea8:	ldr	r3, [fp, #-60]	; 0xffffffc4
    beac:	movw	r0, #0
    beb0:	movt	r0, #0
    beb4:	blx	r3
    beb8:	ldr	r3, [fp, #-56]	; 0xffffffc8
    bebc:	ldr	r0, [r3, #24]
    bec0:	mov	r3, #15
    bec4:	str	r3, [sp]
    bec8:	ldr	r3, [fp, #-68]	; 0xffffffbc
    becc:	ldr	r2, [fp, #-64]	; 0xffffffc0
    bed0:	ldr	r1, [fp, #-60]	; 0xffffffc4
    bed4:	bl	9e40 <print_expression>
    bed8:	ldr	r3, [fp, #-60]	; 0xffffffc4
    bedc:	movw	r0, #0
    bee0:	movt	r0, #0
    bee4:	blx	r3
    bee8:	b	c7cc <print_expression+0x298c>
    beec:	ldr	r3, [fp, #-68]	; 0xffffffbc
    bef0:	cmp	r3, #0
    bef4:	beq	bf04 <print_expression+0x20c4>
    bef8:	movw	r3, #0
    befc:	movt	r3, #0
    bf00:	b	bf0c <print_expression+0x20cc>
    bf04:	movw	r3, #0
    bf08:	movt	r3, #0
    bf0c:	ldr	r2, [fp, #-60]	; 0xffffffc4
    bf10:	mov	r0, r3
    bf14:	blx	r2
    bf18:	ldr	r3, [fp, #-56]	; 0xffffffc8
    bf1c:	ldr	r0, [r3, #16]
    bf20:	mov	r3, #15
    bf24:	str	r3, [sp]
    bf28:	ldr	r3, [fp, #-68]	; 0xffffffbc
    bf2c:	ldr	r2, [fp, #-64]	; 0xffffffc0
    bf30:	ldr	r1, [fp, #-60]	; 0xffffffc4
    bf34:	bl	9e40 <print_expression>
    bf38:	ldr	r3, [fp, #-60]	; 0xffffffc4
    bf3c:	movw	r0, #0
    bf40:	movt	r0, #0
    bf44:	blx	r3
    bf48:	b	c7cc <print_expression+0x298c>
    bf4c:	ldr	r3, [fp, #-68]	; 0xffffffbc
    bf50:	cmp	r3, #0
    bf54:	beq	bf64 <print_expression+0x2124>
    bf58:	movw	r3, #0
    bf5c:	movt	r3, #0
    bf60:	b	bf6c <print_expression+0x212c>
    bf64:	movw	r3, #0
    bf68:	movt	r3, #0
    bf6c:	ldr	r2, [fp, #-60]	; 0xffffffc4
    bf70:	mov	r0, r3
    bf74:	blx	r2
    bf78:	ldr	r3, [fp, #-56]	; 0xffffffc8
    bf7c:	ldr	r0, [r3, #16]
    bf80:	mov	r3, #15
    bf84:	str	r3, [sp]
    bf88:	ldr	r3, [fp, #-68]	; 0xffffffbc
    bf8c:	ldr	r2, [fp, #-64]	; 0xffffffc0
    bf90:	ldr	r1, [fp, #-60]	; 0xffffffc4
    bf94:	bl	9e40 <print_expression>
    bf98:	ldr	r3, [fp, #-60]	; 0xffffffc4
    bf9c:	movw	r0, #0
    bfa0:	movt	r0, #0
    bfa4:	blx	r3
    bfa8:	b	c7cc <print_expression+0x298c>
    bfac:	ldr	r3, [fp, #-56]	; 0xffffffc8
    bfb0:	ldr	r0, [r3, #16]
    bfb4:	mov	r3, #15
    bfb8:	str	r3, [sp]
    bfbc:	ldr	r3, [fp, #-68]	; 0xffffffbc
    bfc0:	ldr	r2, [fp, #-64]	; 0xffffffc0
    bfc4:	ldr	r1, [fp, #-60]	; 0xffffffc4
    bfc8:	bl	9e40 <print_expression>
    bfcc:	ldr	r3, [fp, #-68]	; 0xffffffbc
    bfd0:	cmp	r3, #0
    bfd4:	beq	bfe4 <print_expression+0x21a4>
    bfd8:	movw	r3, #0
    bfdc:	movt	r3, #0
    bfe0:	b	bfec <print_expression+0x21ac>
    bfe4:	movw	r3, #0
    bfe8:	movt	r3, #0
    bfec:	ldr	r2, [fp, #-60]	; 0xffffffc4
    bff0:	mov	r0, r3
    bff4:	blx	r2
    bff8:	ldr	r3, [fp, #-56]	; 0xffffffc8
    bffc:	ldr	r0, [r3, #20]
    c000:	mov	r3, #15
    c004:	str	r3, [sp]
    c008:	ldr	r3, [fp, #-68]	; 0xffffffbc
    c00c:	ldr	r2, [fp, #-64]	; 0xffffffc0
    c010:	ldr	r1, [fp, #-60]	; 0xffffffc4
    c014:	bl	9e40 <print_expression>
    c018:	b	c7cc <print_expression+0x298c>
    c01c:	ldr	r3, [fp, #-68]	; 0xffffffbc
    c020:	cmp	r3, #0
    c024:	beq	c034 <print_expression+0x21f4>
    c028:	movw	r3, #0
    c02c:	movt	r3, #0
    c030:	b	c03c <print_expression+0x21fc>
    c034:	movw	r3, #0
    c038:	movt	r3, #0
    c03c:	ldr	r2, [fp, #-60]	; 0xffffffc4
    c040:	mov	r0, r3
    c044:	blx	r2
    c048:	ldr	r3, [fp, #-56]	; 0xffffffc8
    c04c:	ldr	r0, [r3, #16]
    c050:	mov	r3, #15
    c054:	str	r3, [sp]
    c058:	ldr	r3, [fp, #-68]	; 0xffffffbc
    c05c:	ldr	r2, [fp, #-64]	; 0xffffffc0
    c060:	ldr	r1, [fp, #-60]	; 0xffffffc4
    c064:	bl	9e40 <print_expression>
    c068:	ldr	r3, [fp, #-56]	; 0xffffffc8
    c06c:	ldr	r3, [r3, #20]
    c070:	cmp	r3, #0
    c074:	beq	c0a8 <print_expression+0x2268>
    c078:	ldr	r3, [fp, #-60]	; 0xffffffc4
    c07c:	movw	r0, #0
    c080:	movt	r0, #0
    c084:	blx	r3
    c088:	ldr	r3, [fp, #-56]	; 0xffffffc8
    c08c:	ldr	r0, [r3, #20]
    c090:	mov	r3, #15
    c094:	str	r3, [sp]
    c098:	ldr	r3, [fp, #-68]	; 0xffffffbc
    c09c:	ldr	r2, [fp, #-64]	; 0xffffffc0
    c0a0:	ldr	r1, [fp, #-60]	; 0xffffffc4
    c0a4:	bl	9e40 <print_expression>
    c0a8:	ldr	r3, [fp, #-60]	; 0xffffffc4
    c0ac:	movw	r0, #0
    c0b0:	movt	r0, #0
    c0b4:	blx	r3
    c0b8:	b	c7cc <print_expression+0x298c>
    c0bc:	ldr	r3, [fp, #-68]	; 0xffffffbc
    c0c0:	cmp	r3, #0
    c0c4:	beq	c0d4 <print_expression+0x2294>
    c0c8:	movw	r3, #0
    c0cc:	movt	r3, #0
    c0d0:	b	c0dc <print_expression+0x229c>
    c0d4:	movw	r3, #0
    c0d8:	movt	r3, #0
    c0dc:	ldr	r2, [fp, #-60]	; 0xffffffc4
    c0e0:	mov	r0, r3
    c0e4:	blx	r2
    c0e8:	ldr	r3, [fp, #-56]	; 0xffffffc8
    c0ec:	ldr	r0, [r3, #16]
    c0f0:	mov	r3, #15
    c0f4:	str	r3, [sp]
    c0f8:	ldr	r3, [fp, #-68]	; 0xffffffbc
    c0fc:	ldr	r2, [fp, #-64]	; 0xffffffc0
    c100:	ldr	r1, [fp, #-60]	; 0xffffffc4
    c104:	bl	9e40 <print_expression>
    c108:	ldr	r3, [fp, #-56]	; 0xffffffc8
    c10c:	ldr	r3, [r3, #20]
    c110:	cmp	r3, #0
    c114:	beq	c148 <print_expression+0x2308>
    c118:	ldr	r3, [fp, #-60]	; 0xffffffc4
    c11c:	movw	r0, #0
    c120:	movt	r0, #0
    c124:	blx	r3
    c128:	ldr	r3, [fp, #-56]	; 0xffffffc8
    c12c:	ldr	r0, [r3, #20]
    c130:	mov	r3, #15
    c134:	str	r3, [sp]
    c138:	ldr	r3, [fp, #-68]	; 0xffffffbc
    c13c:	ldr	r2, [fp, #-64]	; 0xffffffc0
    c140:	ldr	r1, [fp, #-60]	; 0xffffffc4
    c144:	bl	9e40 <print_expression>
    c148:	ldr	r3, [fp, #-60]	; 0xffffffc4
    c14c:	movw	r0, #0
    c150:	movt	r0, #0
    c154:	blx	r3
    c158:	b	c7cc <print_expression+0x298c>
    c15c:	ldr	r3, [fp, #-68]	; 0xffffffbc
    c160:	cmp	r3, #0
    c164:	beq	c174 <print_expression+0x2334>
    c168:	movw	r3, #0
    c16c:	movt	r3, #0
    c170:	b	c17c <print_expression+0x233c>
    c174:	movw	r3, #0
    c178:	movt	r3, #0
    c17c:	ldr	r2, [fp, #-60]	; 0xffffffc4
    c180:	mov	r0, r3
    c184:	blx	r2
    c188:	ldr	r3, [fp, #-56]	; 0xffffffc8
    c18c:	ldr	r0, [r3, #16]
    c190:	mov	r3, #15
    c194:	str	r3, [sp]
    c198:	ldr	r3, [fp, #-68]	; 0xffffffbc
    c19c:	ldr	r2, [fp, #-64]	; 0xffffffc0
    c1a0:	ldr	r1, [fp, #-60]	; 0xffffffc4
    c1a4:	bl	9e40 <print_expression>
    c1a8:	ldr	r3, [fp, #-60]	; 0xffffffc4
    c1ac:	movw	r0, #0
    c1b0:	movt	r0, #0
    c1b4:	blx	r3
    c1b8:	ldr	r3, [fp, #-56]	; 0xffffffc8
    c1bc:	ldr	r0, [r3, #20]
    c1c0:	mov	r3, #15
    c1c4:	str	r3, [sp]
    c1c8:	ldr	r3, [fp, #-68]	; 0xffffffbc
    c1cc:	ldr	r2, [fp, #-64]	; 0xffffffc0
    c1d0:	ldr	r1, [fp, #-60]	; 0xffffffc4
    c1d4:	bl	9e40 <print_expression>
    c1d8:	ldr	r3, [fp, #-60]	; 0xffffffc4
    c1dc:	movw	r0, #0
    c1e0:	movt	r0, #0
    c1e4:	blx	r3
    c1e8:	ldr	r3, [fp, #-56]	; 0xffffffc8
    c1ec:	ldr	r0, [r3, #24]
    c1f0:	mov	r3, #15
    c1f4:	str	r3, [sp]
    c1f8:	ldr	r3, [fp, #-68]	; 0xffffffbc
    c1fc:	ldr	r2, [fp, #-64]	; 0xffffffc0
    c200:	ldr	r1, [fp, #-60]	; 0xffffffc4
    c204:	bl	9e40 <print_expression>
    c208:	ldr	r3, [fp, #-60]	; 0xffffffc4
    c20c:	movw	r0, #0
    c210:	movt	r0, #0
    c214:	blx	r3
    c218:	b	c7cc <print_expression+0x298c>
    c21c:	ldr	r3, [fp, #4]
    c220:	cmp	r3, #3
    c224:	bgt	c238 <print_expression+0x23f8>
    c228:	ldr	r3, [fp, #-60]	; 0xffffffc4
    c22c:	movw	r0, #0
    c230:	movt	r0, #0
    c234:	blx	r3
    c238:	ldr	r3, [fp, #-56]	; 0xffffffc8
    c23c:	ldr	r0, [r3, #16]
    c240:	mov	r3, #4
    c244:	str	r3, [sp]
    c248:	ldr	r3, [fp, #-68]	; 0xffffffbc
    c24c:	ldr	r2, [fp, #-64]	; 0xffffffc0
    c250:	ldr	r1, [fp, #-60]	; 0xffffffc4
    c254:	bl	9e40 <print_expression>
    c258:	ldr	r3, [fp, #-60]	; 0xffffffc4
    c25c:	movw	r0, #0
    c260:	movt	r0, #0
    c264:	blx	r3
    c268:	ldr	r3, [fp, #-56]	; 0xffffffc8
    c26c:	ldr	r0, [r3, #20]
    c270:	mov	r3, #4
    c274:	str	r3, [sp]
    c278:	ldr	r3, [fp, #-68]	; 0xffffffbc
    c27c:	ldr	r2, [fp, #-64]	; 0xffffffc0
    c280:	ldr	r1, [fp, #-60]	; 0xffffffc4
    c284:	bl	9e40 <print_expression>
    c288:	ldr	r3, [fp, #4]
    c28c:	cmp	r3, #3
    c290:	bgt	c7c0 <print_expression+0x2980>
    c294:	ldr	r3, [fp, #-60]	; 0xffffffc4
    c298:	movw	r0, #0
    c29c:	movt	r0, #0
    c2a0:	blx	r3
    c2a4:	b	c7c0 <print_expression+0x2980>
    c2a8:	ldr	r3, [fp, #-68]	; 0xffffffbc
    c2ac:	cmp	r3, #0
    c2b0:	beq	c2c0 <print_expression+0x2480>
    c2b4:	movw	r3, #0
    c2b8:	movt	r3, #0
    c2bc:	b	c2c8 <print_expression+0x2488>
    c2c0:	movw	r3, #0
    c2c4:	movt	r3, #0
    c2c8:	ldr	r2, [fp, #-60]	; 0xffffffc4
    c2cc:	mov	r0, r3
    c2d0:	blx	r2
    c2d4:	ldr	r3, [fp, #-56]	; 0xffffffc8
    c2d8:	ldr	r0, [r3, #16]
    c2dc:	mov	r3, #15
    c2e0:	str	r3, [sp]
    c2e4:	ldr	r3, [fp, #-68]	; 0xffffffbc
    c2e8:	ldr	r2, [fp, #-64]	; 0xffffffc0
    c2ec:	ldr	r1, [fp, #-60]	; 0xffffffc4
    c2f0:	bl	9e40 <print_expression>
    c2f4:	ldr	r3, [fp, #-60]	; 0xffffffc4
    c2f8:	movw	r0, #0
    c2fc:	movt	r0, #0
    c300:	blx	r3
    c304:	ldr	r3, [fp, #-56]	; 0xffffffc8
    c308:	ldr	r0, [r3, #20]
    c30c:	mov	r3, #15
    c310:	str	r3, [sp]
    c314:	ldr	r3, [fp, #-68]	; 0xffffffbc
    c318:	ldr	r2, [fp, #-64]	; 0xffffffc0
    c31c:	ldr	r1, [fp, #-60]	; 0xffffffc4
    c320:	bl	9e40 <print_expression>
    c324:	ldr	r3, [fp, #-60]	; 0xffffffc4
    c328:	movw	r0, #0
    c32c:	movt	r0, #0
    c330:	blx	r3
    c334:	b	c7cc <print_expression+0x298c>
    c338:	ldr	r3, [fp, #-68]	; 0xffffffbc
    c33c:	cmp	r3, #0
    c340:	beq	c350 <print_expression+0x2510>
    c344:	movw	r3, #0
    c348:	movt	r3, #0
    c34c:	b	c358 <print_expression+0x2518>
    c350:	movw	r3, #0
    c354:	movt	r3, #0
    c358:	ldr	r2, [fp, #-60]	; 0xffffffc4
    c35c:	mov	r0, r3
    c360:	blx	r2
    c364:	ldr	r3, [fp, #-56]	; 0xffffffc8
    c368:	ldr	r0, [r3, #16]
    c36c:	mov	r3, #15
    c370:	str	r3, [sp]
    c374:	ldr	r3, [fp, #-68]	; 0xffffffbc
    c378:	ldr	r2, [fp, #-64]	; 0xffffffc0
    c37c:	ldr	r1, [fp, #-60]	; 0xffffffc4
    c380:	bl	9e40 <print_expression>
    c384:	ldr	r3, [fp, #-60]	; 0xffffffc4
    c388:	movw	r0, #0
    c38c:	movt	r0, #0
    c390:	blx	r3
    c394:	b	c7cc <print_expression+0x298c>
    c398:	ldr	r3, [fp, #-68]	; 0xffffffbc
    c39c:	cmp	r3, #0
    c3a0:	beq	c3b0 <print_expression+0x2570>
    c3a4:	movw	r3, #0
    c3a8:	movt	r3, #0
    c3ac:	b	c3b8 <print_expression+0x2578>
    c3b0:	movw	r3, #0
    c3b4:	movt	r3, #0
    c3b8:	ldr	r2, [fp, #-60]	; 0xffffffc4
    c3bc:	mov	r0, r3
    c3c0:	blx	r2
    c3c4:	ldr	r3, [fp, #-56]	; 0xffffffc8
    c3c8:	ldr	r0, [r3, #16]
    c3cc:	mov	r3, #15
    c3d0:	str	r3, [sp]
    c3d4:	ldr	r3, [fp, #-68]	; 0xffffffbc
    c3d8:	ldr	r2, [fp, #-64]	; 0xffffffc0
    c3dc:	ldr	r1, [fp, #-60]	; 0xffffffc4
    c3e0:	bl	9e40 <print_expression>
    c3e4:	ldr	r3, [fp, #-60]	; 0xffffffc4
    c3e8:	movw	r0, #0
    c3ec:	movt	r0, #0
    c3f0:	blx	r3
    c3f4:	ldr	r3, [fp, #-56]	; 0xffffffc8
    c3f8:	ldr	r0, [r3, #20]
    c3fc:	mov	r3, #15
    c400:	str	r3, [sp]
    c404:	ldr	r3, [fp, #-68]	; 0xffffffbc
    c408:	ldr	r2, [fp, #-64]	; 0xffffffc0
    c40c:	ldr	r1, [fp, #-60]	; 0xffffffc4
    c410:	bl	9e40 <print_expression>
    c414:	ldr	r3, [fp, #-60]	; 0xffffffc4
    c418:	movw	r0, #0
    c41c:	movt	r0, #0
    c420:	blx	r3
    c424:	b	c7cc <print_expression+0x298c>
    c428:	ldr	r3, [fp, #-68]	; 0xffffffbc
    c42c:	cmp	r3, #0
    c430:	beq	c440 <print_expression+0x2600>
    c434:	movw	r3, #0
    c438:	movt	r3, #0
    c43c:	b	c448 <print_expression+0x2608>
    c440:	movw	r3, #0
    c444:	movt	r3, #0
    c448:	ldr	r2, [fp, #-56]	; 0xffffffc8
    c44c:	ldr	r1, [r2, #12]
    c450:	ldr	r2, [fp, #-60]	; 0xffffffc4
    c454:	mov	r0, r3
    c458:	blx	r2
    c45c:	ldr	r3, [fp, #-56]	; 0xffffffc8
    c460:	ldr	r0, [r3, #16]
    c464:	mov	r3, #15
    c468:	str	r3, [sp]
    c46c:	ldr	r3, [fp, #-68]	; 0xffffffbc
    c470:	ldr	r2, [fp, #-64]	; 0xffffffc0
    c474:	ldr	r1, [fp, #-60]	; 0xffffffc4
    c478:	bl	9e40 <print_expression>
    c47c:	ldr	r3, [fp, #-60]	; 0xffffffc4
    c480:	movw	r0, #0
    c484:	movt	r0, #0
    c488:	blx	r3
    c48c:	b	c7cc <print_expression+0x298c>
    c490:	ldr	r3, [fp, #-68]	; 0xffffffbc
    c494:	cmp	r3, #0
    c498:	beq	c4a8 <print_expression+0x2668>
    c49c:	movw	r3, #0
    c4a0:	movt	r3, #0
    c4a4:	b	c4b0 <print_expression+0x2670>
    c4a8:	movw	r3, #0
    c4ac:	movt	r3, #0
    c4b0:	ldr	r2, [fp, #-56]	; 0xffffffc8
    c4b4:	ldr	r1, [r2, #12]
    c4b8:	ldr	r2, [fp, #-60]	; 0xffffffc4
    c4bc:	mov	r0, r3
    c4c0:	blx	r2
    c4c4:	ldr	r3, [fp, #-56]	; 0xffffffc8
    c4c8:	ldr	r0, [r3, #16]
    c4cc:	mov	r3, #15
    c4d0:	str	r3, [sp]
    c4d4:	ldr	r3, [fp, #-68]	; 0xffffffbc
    c4d8:	ldr	r2, [fp, #-64]	; 0xffffffc0
    c4dc:	ldr	r1, [fp, #-60]	; 0xffffffc4
    c4e0:	bl	9e40 <print_expression>
    c4e4:	ldr	r3, [fp, #-60]	; 0xffffffc4
    c4e8:	movw	r0, #0
    c4ec:	movt	r0, #0
    c4f0:	blx	r3
    c4f4:	b	c7cc <print_expression+0x298c>
    c4f8:	ldr	r3, [fp, #-68]	; 0xffffffbc
    c4fc:	cmp	r3, #0
    c500:	beq	c510 <print_expression+0x26d0>
    c504:	movw	r3, #0
    c508:	movt	r3, #0
    c50c:	b	c518 <print_expression+0x26d8>
    c510:	movw	r3, #0
    c514:	movt	r3, #0
    c518:	ldr	r2, [fp, #-56]	; 0xffffffc8
    c51c:	ldr	r1, [r2, #12]
    c520:	ldr	r2, [fp, #-60]	; 0xffffffc4
    c524:	mov	r0, r3
    c528:	blx	r2
    c52c:	ldr	r3, [fp, #-56]	; 0xffffffc8
    c530:	ldr	r3, [r3, #16]
    c534:	cmp	r3, #0
    c538:	beq	c57c <print_expression+0x273c>
    c53c:	ldr	r3, [fp, #-60]	; 0xffffffc4
    c540:	movw	r0, #0
    c544:	movt	r0, #0
    c548:	blx	r3
    c54c:	ldr	r3, [fp, #-56]	; 0xffffffc8
    c550:	ldr	r0, [r3, #16]
    c554:	mov	r3, #15
    c558:	str	r3, [sp]
    c55c:	ldr	r3, [fp, #-68]	; 0xffffffbc
    c560:	ldr	r2, [fp, #-64]	; 0xffffffc0
    c564:	ldr	r1, [fp, #-60]	; 0xffffffc4
    c568:	bl	9e40 <print_expression>
    c56c:	ldr	r3, [fp, #-60]	; 0xffffffc4
    c570:	movw	r0, #0
    c574:	movt	r0, #0
    c578:	blx	r3
    c57c:	ldr	r3, [fp, #-60]	; 0xffffffc4
    c580:	movw	r0, #0
    c584:	movt	r0, #0
    c588:	blx	r3
    c58c:	ldr	r3, [fp, #-56]	; 0xffffffc8
    c590:	ldr	r0, [r3, #20]
    c594:	mov	r3, #15
    c598:	str	r3, [sp]
    c59c:	ldr	r3, [fp, #-68]	; 0xffffffbc
    c5a0:	ldr	r2, [fp, #-64]	; 0xffffffc0
    c5a4:	ldr	r1, [fp, #-60]	; 0xffffffc4
    c5a8:	bl	9e40 <print_expression>
    c5ac:	b	c7cc <print_expression+0x298c>
    c5b0:	ldr	r3, [fp, #-56]	; 0xffffffc8
    c5b4:	ldr	r2, [r3, #12]
    c5b8:	ldr	r3, [fp, #-60]	; 0xffffffc4
    c5bc:	mov	r1, r2
    c5c0:	movw	r0, #0
    c5c4:	movt	r0, #0
    c5c8:	blx	r3
    c5cc:	ldr	r3, [fp, #-56]	; 0xffffffc8
    c5d0:	ldr	r3, [r3, #16]
    c5d4:	cmp	r3, #0
    c5d8:	beq	c7c8 <print_expression+0x2988>
    c5dc:	ldr	r3, [fp, #-60]	; 0xffffffc4
    c5e0:	movw	r0, #0
    c5e4:	movt	r0, #0
    c5e8:	blx	r3
    c5ec:	ldr	r3, [fp, #-56]	; 0xffffffc8
    c5f0:	ldr	r0, [r3, #16]
    c5f4:	mov	r3, #15
    c5f8:	str	r3, [sp]
    c5fc:	ldr	r3, [fp, #-68]	; 0xffffffbc
    c600:	ldr	r2, [fp, #-64]	; 0xffffffc0
    c604:	ldr	r1, [fp, #-60]	; 0xffffffc4
    c608:	bl	9e40 <print_expression>
    c60c:	ldr	r3, [fp, #-60]	; 0xffffffc4
    c610:	movw	r0, #0
    c614:	movt	r0, #0
    c618:	blx	r3
    c61c:	b	c7c8 <print_expression+0x2988>
    c620:	ldr	r3, [fp, #-68]	; 0xffffffbc
    c624:	cmp	r3, #0
    c628:	beq	c638 <print_expression+0x27f8>
    c62c:	movw	r3, #0
    c630:	movt	r3, #0
    c634:	b	c640 <print_expression+0x2800>
    c638:	movw	r3, #0
    c63c:	movt	r3, #0
    c640:	ldr	r2, [fp, #-60]	; 0xffffffc4
    c644:	mov	r0, r3
    c648:	blx	r2
    c64c:	ldr	r3, [fp, #-56]	; 0xffffffc8
    c650:	ldr	r0, [r3, #16]
    c654:	mov	r3, #15
    c658:	str	r3, [sp]
    c65c:	ldr	r3, [fp, #-68]	; 0xffffffbc
    c660:	ldr	r2, [fp, #-64]	; 0xffffffc0
    c664:	ldr	r1, [fp, #-60]	; 0xffffffc4
    c668:	bl	9e40 <print_expression>
    c66c:	ldr	r3, [fp, #-60]	; 0xffffffc4
    c670:	movw	r0, #0
    c674:	movt	r0, #0
    c678:	blx	r3
    c67c:	ldr	r3, [fp, #-56]	; 0xffffffc8
    c680:	ldr	r0, [r3, #20]
    c684:	mov	r3, #15
    c688:	str	r3, [sp]
    c68c:	ldr	r3, [fp, #-68]	; 0xffffffbc
    c690:	ldr	r2, [fp, #-64]	; 0xffffffc0
    c694:	ldr	r1, [fp, #-60]	; 0xffffffc4
    c698:	bl	9e40 <print_expression>
    c69c:	ldr	r3, [fp, #-60]	; 0xffffffc4
    c6a0:	movw	r0, #0
    c6a4:	movt	r0, #0
    c6a8:	blx	r3
    c6ac:	b	c7cc <print_expression+0x298c>
    c6b0:	ldr	r3, [fp, #-68]	; 0xffffffbc
    c6b4:	cmp	r3, #0
    c6b8:	beq	c6c8 <print_expression+0x2888>
    c6bc:	movw	r3, #0
    c6c0:	movt	r3, #0
    c6c4:	b	c6d0 <print_expression+0x2890>
    c6c8:	movw	r3, #0
    c6cc:	movt	r3, #0
    c6d0:	ldr	r2, [fp, #-56]	; 0xffffffc8
    c6d4:	ldr	r1, [r2, #12]
    c6d8:	ldr	r2, [fp, #-60]	; 0xffffffc4
    c6dc:	mov	r0, r3
    c6e0:	blx	r2
    c6e4:	ldr	r3, [fp, #-56]	; 0xffffffc8
    c6e8:	ldr	r0, [r3, #16]
    c6ec:	mov	r3, #15
    c6f0:	str	r3, [sp]
    c6f4:	ldr	r3, [fp, #-68]	; 0xffffffbc
    c6f8:	ldr	r2, [fp, #-64]	; 0xffffffc0
    c6fc:	ldr	r1, [fp, #-60]	; 0xffffffc4
    c700:	bl	9e40 <print_expression>
    c704:	ldr	r3, [fp, #-60]	; 0xffffffc4
    c708:	movw	r0, #0
    c70c:	movt	r0, #0
    c710:	blx	r3
    c714:	ldr	r3, [fp, #-56]	; 0xffffffc8
    c718:	ldr	r0, [r3, #20]
    c71c:	mov	r3, #15
    c720:	str	r3, [sp]
    c724:	ldr	r3, [fp, #-68]	; 0xffffffbc
    c728:	ldr	r2, [fp, #-64]	; 0xffffffc0
    c72c:	ldr	r1, [fp, #-60]	; 0xffffffc4
    c730:	bl	9e40 <print_expression>
    c734:	ldr	r3, [fp, #-60]	; 0xffffffc4
    c738:	movw	r0, #0
    c73c:	movt	r0, #0
    c740:	blx	r3
    c744:	b	c7cc <print_expression+0x298c>
    c748:	nop	{0}
    c74c:	b	c7cc <print_expression+0x298c>
    c750:	nop	{0}
    c754:	b	c7cc <print_expression+0x298c>
    c758:	nop	{0}
    c75c:	b	c7cc <print_expression+0x298c>
    c760:	nop	{0}
    c764:	b	c7cc <print_expression+0x298c>
    c768:	nop	{0}
    c76c:	b	c7cc <print_expression+0x298c>
    c770:	nop	{0}
    c774:	b	c7cc <print_expression+0x298c>
    c778:	nop	{0}
    c77c:	b	c7cc <print_expression+0x298c>
    c780:	nop	{0}
    c784:	b	c7cc <print_expression+0x298c>
    c788:	nop	{0}
    c78c:	b	c7cc <print_expression+0x298c>
    c790:	nop	{0}
    c794:	b	c7cc <print_expression+0x298c>
    c798:	nop	{0}
    c79c:	b	c7cc <print_expression+0x298c>
    c7a0:	nop	{0}
    c7a4:	b	c7cc <print_expression+0x298c>
    c7a8:	nop	{0}
    c7ac:	b	c7cc <print_expression+0x298c>
    c7b0:	nop	{0}
    c7b4:	b	c7cc <print_expression+0x298c>
    c7b8:	nop	{0}
    c7bc:	b	c7cc <print_expression+0x298c>
    c7c0:	nop	{0}
    c7c4:	b	c7cc <print_expression+0x298c>
    c7c8:	nop	{0}
    c7cc:	mov	r3, #0
    c7d0:	mov	r0, r3
    c7d4:	sub	sp, fp, #4
    c7d8:	ldr	fp, [sp]
    c7dc:	add	sp, sp, #4
    c7e0:	pop	{pc}		; (ldr pc, [sp], #4)

0000c7e4 <coda_expression_print_html>:
    c7e4:	str	fp, [sp, #-8]!
    c7e8:	str	lr, [sp, #4]
    c7ec:	add	fp, sp, #4
    c7f0:	sub	sp, sp, #16
    c7f4:	str	r0, [fp, #-8]
    c7f8:	str	r1, [fp, #-12]
    c7fc:	mov	r3, #15
    c800:	str	r3, [sp]
    c804:	mov	r3, #1
    c808:	mov	r2, #1
    c80c:	ldr	r1, [fp, #-12]
    c810:	ldr	r0, [fp, #-8]
    c814:	bl	9e40 <print_expression>
    c818:	mov	r3, r0
    c81c:	mov	r0, r3
    c820:	sub	sp, fp, #4
    c824:	ldr	fp, [sp]
    c828:	add	sp, sp, #4
    c82c:	pop	{pc}		; (ldr pc, [sp], #4)

0000c830 <coda_expression_print_xml>:
    c830:	str	fp, [sp, #-8]!
    c834:	str	lr, [sp, #4]
    c838:	add	fp, sp, #4
    c83c:	sub	sp, sp, #16
    c840:	str	r0, [fp, #-8]
    c844:	str	r1, [fp, #-12]
    c848:	mov	r3, #15
    c84c:	str	r3, [sp]
    c850:	mov	r3, #0
    c854:	mov	r2, #1
    c858:	ldr	r1, [fp, #-12]
    c85c:	ldr	r0, [fp, #-8]
    c860:	bl	9e40 <print_expression>
    c864:	mov	r3, r0
    c868:	mov	r0, r3
    c86c:	sub	sp, fp, #4
    c870:	ldr	fp, [sp]
    c874:	add	sp, sp, #4
    c878:	pop	{pc}		; (ldr pc, [sp], #4)

0000c87c <coda_expression_print>:
    c87c:	str	fp, [sp, #-8]!
    c880:	str	lr, [sp, #4]
    c884:	add	fp, sp, #4
    c888:	sub	sp, sp, #16
    c88c:	str	r0, [fp, #-8]
    c890:	str	r1, [fp, #-12]
    c894:	mov	r3, #15
    c898:	str	r3, [sp]
    c89c:	mov	r3, #0
    c8a0:	mov	r2, #0
    c8a4:	ldr	r1, [fp, #-12]
    c8a8:	ldr	r0, [fp, #-8]
    c8ac:	bl	9e40 <print_expression>
    c8b0:	mov	r3, r0
    c8b4:	mov	r0, r3
    c8b8:	sub	sp, fp, #4
    c8bc:	ldr	fp, [sp]
    c8c0:	add	sp, sp, #4
    c8c4:	pop	{pc}		; (ldr pc, [sp], #4)

0000c8c8 <coda_expression_get_type_name>:
    c8c8:	push	{fp}		; (str fp, [sp, #-4]!)
    c8cc:	add	fp, sp, #0
    c8d0:	sub	sp, sp, #12
    c8d4:	str	r0, [fp, #-8]
    c8d8:	ldr	r3, [fp, #-8]
    c8dc:	cmp	r3, #5
    c8e0:	ldrls	pc, [pc, r3, lsl #2]
    c8e4:	b	c948 <coda_expression_get_type_name+0x80>
    c8e8:	.word	0x0000c900
    c8ec:	.word	0x0000c90c
    c8f0:	.word	0x0000c918
    c8f4:	.word	0x0000c924
    c8f8:	.word	0x0000c930
    c8fc:	.word	0x0000c93c
    c900:	movw	r3, #0
    c904:	movt	r3, #0
    c908:	b	c950 <coda_expression_get_type_name+0x88>
    c90c:	movw	r3, #0
    c910:	movt	r3, #0
    c914:	b	c950 <coda_expression_get_type_name+0x88>
    c918:	movw	r3, #0
    c91c:	movt	r3, #0
    c920:	b	c950 <coda_expression_get_type_name+0x88>
    c924:	movw	r3, #0
    c928:	movt	r3, #0
    c92c:	b	c950 <coda_expression_get_type_name+0x88>
    c930:	movw	r3, #0
    c934:	movt	r3, #0
    c938:	b	c950 <coda_expression_get_type_name+0x88>
    c93c:	movw	r3, #0
    c940:	movt	r3, #0
    c944:	b	c950 <coda_expression_get_type_name+0x88>
    c948:	movw	r3, #0
    c94c:	movt	r3, #0
    c950:	mov	r0, r3
    c954:	add	sp, fp, #0
    c958:	pop	{fp}		; (ldr fp, [sp], #4)
    c95c:	bx	lr

0000c960 <coda_expression_delete>:
    c960:	str	fp, [sp, #-8]!
    c964:	str	lr, [sp, #4]
    c968:	add	fp, sp, #4
    c96c:	sub	sp, sp, #16
    c970:	str	r0, [fp, #-16]
    c974:	ldr	r3, [fp, #-16]
    c978:	ldr	r3, [r3]
    c97c:	sub	r3, r3, #18
    c980:	cmp	r3, #4
    c984:	ldrls	pc, [pc, r3, lsl #2]
    c988:	b	c9c4 <coda_expression_delete+0x64>
    c98c:	.word	0x0000ca48
    c990:	.word	0x0000ca48
    c994:	.word	0x0000ca48
    c998:	.word	0x0000c9a0
    c99c:	.word	0x0000c9a0
    c9a0:	ldr	r3, [fp, #-16]
    c9a4:	ldr	r3, [r3, #16]
    c9a8:	cmp	r3, #0
    c9ac:	beq	ca50 <coda_expression_delete+0xf0>
    c9b0:	ldr	r3, [fp, #-16]
    c9b4:	ldr	r3, [r3, #16]
    c9b8:	mov	r0, r3
    c9bc:	bl	0 <free>
    c9c0:	b	ca50 <coda_expression_delete+0xf0>
    c9c4:	ldr	r3, [fp, #-16]
    c9c8:	str	r3, [fp, #-12]
    c9cc:	ldr	r3, [fp, #-12]
    c9d0:	ldr	r3, [r3, #12]
    c9d4:	cmp	r3, #0
    c9d8:	beq	c9ec <coda_expression_delete+0x8c>
    c9dc:	ldr	r3, [fp, #-12]
    c9e0:	ldr	r3, [r3, #12]
    c9e4:	mov	r0, r3
    c9e8:	bl	0 <free>
    c9ec:	mov	r3, #0
    c9f0:	str	r3, [fp, #-8]
    c9f4:	b	ca34 <coda_expression_delete+0xd4>
    c9f8:	ldr	r3, [fp, #-12]
    c9fc:	ldr	r2, [fp, #-8]
    ca00:	add	r2, r2, #4
    ca04:	ldr	r3, [r3, r2, lsl #2]
    ca08:	cmp	r3, #0
    ca0c:	beq	ca28 <coda_expression_delete+0xc8>
    ca10:	ldr	r3, [fp, #-12]
    ca14:	ldr	r2, [fp, #-8]
    ca18:	add	r2, r2, #4
    ca1c:	ldr	r3, [r3, r2, lsl #2]
    ca20:	mov	r0, r3
    ca24:	bl	c960 <coda_expression_delete>
    ca28:	ldr	r3, [fp, #-8]
    ca2c:	add	r3, r3, #1
    ca30:	str	r3, [fp, #-8]
    ca34:	ldr	r3, [fp, #-8]
    ca38:	cmp	r3, #3
    ca3c:	ble	c9f8 <coda_expression_delete+0x98>
    ca40:	nop	{0}
    ca44:	b	ca54 <coda_expression_delete+0xf4>
    ca48:	nop	{0}
    ca4c:	b	ca54 <coda_expression_delete+0xf4>
    ca50:	nop	{0}
    ca54:	ldr	r0, [fp, #-16]
    ca58:	bl	0 <free>
    ca5c:	nop	{0}
    ca60:	sub	sp, fp, #4
    ca64:	ldr	fp, [sp]
    ca68:	add	sp, sp, #4
    ca6c:	pop	{pc}		; (ldr pc, [sp], #4)

0000ca70 <coda_expression_is_constant>:
    ca70:	str	fp, [sp, #-8]!
    ca74:	str	lr, [sp, #4]
    ca78:	add	fp, sp, #4
    ca7c:	sub	sp, sp, #8
    ca80:	str	r0, [fp, #-8]
    ca84:	ldr	r3, [fp, #-8]
    ca88:	cmp	r3, #0
    ca8c:	bne	cab4 <coda_expression_is_constant+0x44>
    ca90:	movw	r3, #4969	; 0x1369
    ca94:	movw	r2, #0
    ca98:	movt	r2, #0
    ca9c:	movw	r1, #0
    caa0:	movt	r1, #0
    caa4:	mvn	r0, #99	; 0x63
    caa8:	bl	0 <coda_set_error>
    caac:	mvn	r3, #0
    cab0:	b	cabc <coda_expression_is_constant+0x4c>
    cab4:	ldr	r3, [fp, #-8]
    cab8:	ldr	r3, [r3, #8]
    cabc:	mov	r0, r3
    cac0:	sub	sp, fp, #4
    cac4:	ldr	fp, [sp]
    cac8:	add	sp, sp, #4
    cacc:	pop	{pc}		; (ldr pc, [sp], #4)

0000cad0 <coda_expression_is_equal>:
    cad0:	str	fp, [sp, #-8]!
    cad4:	str	lr, [sp, #4]
    cad8:	add	fp, sp, #4
    cadc:	sub	sp, sp, #24
    cae0:	str	r0, [fp, #-24]	; 0xffffffe8
    cae4:	str	r1, [fp, #-28]	; 0xffffffe4
    cae8:	ldr	r3, [fp, #-24]	; 0xffffffe8
    caec:	cmp	r3, #0
    caf0:	bne	cb0c <coda_expression_is_equal+0x3c>
    caf4:	ldr	r3, [fp, #-28]	; 0xffffffe4
    caf8:	cmp	r3, #0
    cafc:	moveq	r3, #1
    cb00:	movne	r3, #0
    cb04:	uxtb	r3, r3
    cb08:	b	cd20 <coda_expression_is_equal+0x250>
    cb0c:	ldr	r3, [fp, #-28]	; 0xffffffe4
    cb10:	cmp	r3, #0
    cb14:	bne	cb20 <coda_expression_is_equal+0x50>
    cb18:	mov	r3, #0
    cb1c:	b	cd20 <coda_expression_is_equal+0x250>
    cb20:	ldr	r3, [fp, #-24]	; 0xffffffe8
    cb24:	ldr	r2, [r3]
    cb28:	ldr	r3, [fp, #-28]	; 0xffffffe4
    cb2c:	ldr	r3, [r3]
    cb30:	cmp	r2, r3
    cb34:	beq	cb40 <coda_expression_is_equal+0x70>
    cb38:	mov	r3, #0
    cb3c:	b	cd20 <coda_expression_is_equal+0x250>
    cb40:	ldr	r3, [fp, #-24]	; 0xffffffe8
    cb44:	ldr	r3, [r3]
    cb48:	sub	r3, r3, #18
    cb4c:	cmp	r3, #4
    cb50:	ldrls	pc, [pc, r3, lsl #2]
    cb54:	b	cc38 <coda_expression_is_equal+0x168>
    cb58:	.word	0x0000cb6c
    cb5c:	.word	0x0000cb90
    cb60:	.word	0x0000cbb8
    cb64:	.word	0x0000cbe0
    cb68:	.word	0x0000cbe0
    cb6c:	ldr	r3, [fp, #-24]	; 0xffffffe8
    cb70:	ldr	r2, [r3, #12]
    cb74:	ldr	r3, [fp, #-28]	; 0xffffffe4
    cb78:	ldr	r3, [r3, #12]
    cb7c:	cmp	r2, r3
    cb80:	moveq	r3, #1
    cb84:	movne	r3, #0
    cb88:	uxtb	r3, r3
    cb8c:	b	cd20 <coda_expression_is_equal+0x250>
    cb90:	ldr	r3, [fp, #-24]	; 0xffffffe8
    cb94:	vldr	d6, [r3, #16]
    cb98:	ldr	r3, [fp, #-28]	; 0xffffffe4
    cb9c:	vldr	d7, [r3, #16]
    cba0:	vcmp.f64	d6, d7
    cba4:	vmrs	APSR_nzcv, fpscr
    cba8:	moveq	r3, #1
    cbac:	movne	r3, #0
    cbb0:	uxtb	r3, r3
    cbb4:	b	cd20 <coda_expression_is_equal+0x250>
    cbb8:	ldr	r3, [fp, #-24]	; 0xffffffe8
    cbbc:	ldrd	r0, [r3, #16]
    cbc0:	ldr	r3, [fp, #-28]	; 0xffffffe4
    cbc4:	ldrd	r2, [r3, #16]
    cbc8:	cmp	r1, r3
    cbcc:	cmpeq	r0, r2
    cbd0:	moveq	r3, #1
    cbd4:	movne	r3, #0
    cbd8:	uxtb	r3, r3
    cbdc:	b	cd20 <coda_expression_is_equal+0x250>
    cbe0:	ldr	r3, [fp, #-24]	; 0xffffffe8
    cbe4:	ldr	r2, [r3, #12]
    cbe8:	ldr	r3, [fp, #-28]	; 0xffffffe4
    cbec:	ldr	r3, [r3, #12]
    cbf0:	cmp	r2, r3
    cbf4:	beq	cc00 <coda_expression_is_equal+0x130>
    cbf8:	mov	r3, #0
    cbfc:	b	cd20 <coda_expression_is_equal+0x250>
    cc00:	ldr	r3, [fp, #-24]	; 0xffffffe8
    cc04:	ldr	r0, [r3, #16]
    cc08:	ldr	r3, [fp, #-28]	; 0xffffffe4
    cc0c:	ldr	r1, [r3, #16]
    cc10:	ldr	r3, [fp, #-24]	; 0xffffffe8
    cc14:	ldr	r3, [r3, #12]
    cc18:	mov	r2, r3
    cc1c:	bl	0 <memcmp>
    cc20:	mov	r3, r0
    cc24:	cmp	r3, #0
    cc28:	moveq	r3, #1
    cc2c:	movne	r3, #0
    cc30:	uxtb	r3, r3
    cc34:	b	cd20 <coda_expression_is_equal+0x250>
    cc38:	ldr	r3, [fp, #-24]	; 0xffffffe8
    cc3c:	str	r3, [fp, #-12]
    cc40:	ldr	r3, [fp, #-28]	; 0xffffffe4
    cc44:	str	r3, [fp, #-16]
    cc48:	ldr	r3, [fp, #-12]
    cc4c:	ldr	r3, [r3, #12]
    cc50:	cmp	r3, #0
    cc54:	beq	cca0 <coda_expression_is_equal+0x1d0>
    cc58:	ldr	r3, [fp, #-16]
    cc5c:	ldr	r3, [r3, #12]
    cc60:	cmp	r3, #0
    cc64:	bne	cc70 <coda_expression_is_equal+0x1a0>
    cc68:	mov	r3, #0
    cc6c:	b	cd20 <coda_expression_is_equal+0x250>
    cc70:	ldr	r3, [fp, #-12]
    cc74:	ldr	r2, [r3, #12]
    cc78:	ldr	r3, [fp, #-16]
    cc7c:	ldr	r3, [r3, #12]
    cc80:	mov	r1, r3
    cc84:	mov	r0, r2
    cc88:	bl	0 <strcmp>
    cc8c:	mov	r3, r0
    cc90:	cmp	r3, #0
    cc94:	beq	ccb8 <coda_expression_is_equal+0x1e8>
    cc98:	mov	r3, #0
    cc9c:	b	cd20 <coda_expression_is_equal+0x250>
    cca0:	ldr	r3, [fp, #-16]
    cca4:	ldr	r3, [r3, #12]
    cca8:	cmp	r3, #0
    ccac:	beq	ccb8 <coda_expression_is_equal+0x1e8>
    ccb0:	mov	r3, #0
    ccb4:	b	cd20 <coda_expression_is_equal+0x250>
    ccb8:	mov	r3, #0
    ccbc:	str	r3, [fp, #-8]
    ccc0:	b	cd0c <coda_expression_is_equal+0x23c>
    ccc4:	ldr	r3, [fp, #-12]
    ccc8:	ldr	r2, [fp, #-8]
    cccc:	add	r2, r2, #4
    ccd0:	ldr	r0, [r3, r2, lsl #2]
    ccd4:	ldr	r3, [fp, #-16]
    ccd8:	ldr	r2, [fp, #-8]
    ccdc:	add	r2, r2, #4
    cce0:	ldr	r3, [r3, r2, lsl #2]
    cce4:	mov	r1, r3
    cce8:	bl	cad0 <coda_expression_is_equal>
    ccec:	mov	r3, r0
    ccf0:	cmp	r3, #0
    ccf4:	bne	cd00 <coda_expression_is_equal+0x230>
    ccf8:	mov	r3, #0
    ccfc:	b	cd20 <coda_expression_is_equal+0x250>
    cd00:	ldr	r3, [fp, #-8]
    cd04:	add	r3, r3, #1
    cd08:	str	r3, [fp, #-8]
    cd0c:	ldr	r3, [fp, #-8]
    cd10:	cmp	r3, #3
    cd14:	ble	ccc4 <coda_expression_is_equal+0x1f4>
    cd18:	nop	{0}
    cd1c:	mov	r3, #1
    cd20:	mov	r0, r3
    cd24:	sub	sp, fp, #4
    cd28:	ldr	fp, [sp]
    cd2c:	add	sp, sp, #4
    cd30:	pop	{pc}		; (ldr pc, [sp], #4)

0000cd34 <coda_expression_get_type>:
    cd34:	str	fp, [sp, #-8]!
    cd38:	str	lr, [sp, #4]
    cd3c:	add	fp, sp, #4
    cd40:	sub	sp, sp, #8
    cd44:	str	r0, [fp, #-8]
    cd48:	str	r1, [fp, #-12]
    cd4c:	ldr	r3, [fp, #-8]
    cd50:	cmp	r3, #0
    cd54:	bne	cd7c <coda_expression_get_type+0x48>
    cd58:	movw	r3, #5071	; 0x13cf
    cd5c:	movw	r2, #0
    cd60:	movt	r2, #0
    cd64:	movw	r1, #0
    cd68:	movt	r1, #0
    cd6c:	mvn	r0, #99	; 0x63
    cd70:	bl	0 <coda_set_error>
    cd74:	mvn	r3, #0
    cd78:	b	cd90 <coda_expression_get_type+0x5c>
    cd7c:	ldr	r3, [fp, #-8]
    cd80:	ldr	r2, [r3, #4]
    cd84:	ldr	r3, [fp, #-12]
    cd88:	str	r2, [r3]
    cd8c:	mov	r3, #0
    cd90:	mov	r0, r3
    cd94:	sub	sp, fp, #4
    cd98:	ldr	fp, [sp]
    cd9c:	add	sp, sp, #4
    cda0:	pop	{pc}		; (ldr pc, [sp], #4)

0000cda4 <coda_expression_eval_bool>:
    cda4:	str	fp, [sp, #-8]!
    cda8:	str	lr, [sp, #4]
    cdac:	add	fp, sp, #4
    cdb0:	sub	sp, sp, #584	; 0x248
    cdb4:	str	r0, [fp, #-576]	; 0xfffffdc0
    cdb8:	str	r1, [fp, #-580]	; 0xfffffdbc
    cdbc:	str	r2, [fp, #-584]	; 0xfffffdb8
    cdc0:	ldr	r3, [fp, #-576]	; 0xfffffdc0
    cdc4:	ldr	r3, [r3, #4]
    cdc8:	cmp	r3, #0
    cdcc:	beq	cde8 <coda_expression_eval_bool+0x44>
    cdd0:	movw	r1, #0
    cdd4:	movt	r1, #0
    cdd8:	mvn	r0, #99	; 0x63
    cddc:	bl	0 <coda_set_error>
    cde0:	mvn	r3, #0
    cde4:	b	ce94 <coda_expression_eval_bool+0xf0>
    cde8:	ldr	r3, [fp, #-580]	; 0xfffffdbc
    cdec:	cmp	r3, #0
    cdf0:	bne	ce1c <coda_expression_eval_bool+0x78>
    cdf4:	ldr	r3, [fp, #-576]	; 0xfffffdc0
    cdf8:	ldr	r3, [r3, #8]
    cdfc:	cmp	r3, #0
    ce00:	bne	ce1c <coda_expression_eval_bool+0x78>
    ce04:	movw	r1, #0
    ce08:	movt	r1, #0
    ce0c:	mvn	r0, #99	; 0x63
    ce10:	bl	0 <coda_set_error>
    ce14:	mvn	r3, #0
    ce18:	b	ce94 <coda_expression_eval_bool+0xf0>
    ce1c:	sub	r3, fp, #572	; 0x23c
    ce20:	ldr	r1, [fp, #-580]	; 0xfffffdbc
    ce24:	mov	r0, r3
    ce28:	bl	1248 <init_eval_info>
    ce2c:	sub	r3, fp, #572	; 0x23c
    ce30:	ldr	r2, [fp, #-584]	; 0xfffffdb8
    ce34:	ldr	r1, [fp, #-576]	; 0xfffffdc0
    ce38:	mov	r0, r3
    ce3c:	bl	1314 <eval_boolean>
    ce40:	mov	r3, r0
    ce44:	cmp	r3, #0
    ce48:	beq	ce90 <coda_expression_eval_bool+0xec>
    ce4c:	ldr	r3, [fp, #-580]	; 0xfffffdbc
    ce50:	cmp	r3, #0
    ce54:	beq	ce88 <coda_expression_eval_bool+0xe4>
    ce58:	sub	r3, fp, #572	; 0x23c
    ce5c:	add	r3, r3, #8
    ce60:	mov	r1, r3
    ce64:	ldr	r0, [fp, #-580]	; 0xfffffdbc
    ce68:	bl	0 <coda_cursor_compare>
    ce6c:	mov	r3, r0
    ce70:	cmp	r3, #0
    ce74:	beq	ce88 <coda_expression_eval_bool+0xe4>
    ce78:	sub	r3, fp, #572	; 0x23c
    ce7c:	add	r3, r3, #8
    ce80:	mov	r0, r3
    ce84:	bl	0 <coda_cursor_add_to_error_message>
    ce88:	mvn	r3, #0
    ce8c:	b	ce94 <coda_expression_eval_bool+0xf0>
    ce90:	mov	r3, #0
    ce94:	mov	r0, r3
    ce98:	sub	sp, fp, #4
    ce9c:	ldr	fp, [sp]
    cea0:	add	sp, sp, #4
    cea4:	pop	{pc}		; (ldr pc, [sp], #4)

0000cea8 <coda_expression_eval_integer>:
    cea8:	str	fp, [sp, #-8]!
    ceac:	str	lr, [sp, #4]
    ceb0:	add	fp, sp, #4
    ceb4:	sub	sp, sp, #584	; 0x248
    ceb8:	str	r0, [fp, #-576]	; 0xfffffdc0
    cebc:	str	r1, [fp, #-580]	; 0xfffffdbc
    cec0:	str	r2, [fp, #-584]	; 0xfffffdb8
    cec4:	ldr	r3, [fp, #-576]	; 0xfffffdc0
    cec8:	ldr	r3, [r3, #4]
    cecc:	cmp	r3, #1
    ced0:	beq	ceec <coda_expression_eval_integer+0x44>
    ced4:	movw	r1, #0
    ced8:	movt	r1, #0
    cedc:	mvn	r0, #99	; 0x63
    cee0:	bl	0 <coda_set_error>
    cee4:	mvn	r3, #0
    cee8:	b	cf98 <coda_expression_eval_integer+0xf0>
    ceec:	ldr	r3, [fp, #-580]	; 0xfffffdbc
    cef0:	cmp	r3, #0
    cef4:	bne	cf20 <coda_expression_eval_integer+0x78>
    cef8:	ldr	r3, [fp, #-576]	; 0xfffffdc0
    cefc:	ldr	r3, [r3, #8]
    cf00:	cmp	r3, #0
    cf04:	bne	cf20 <coda_expression_eval_integer+0x78>
    cf08:	movw	r1, #0
    cf0c:	movt	r1, #0
    cf10:	mvn	r0, #99	; 0x63
    cf14:	bl	0 <coda_set_error>
    cf18:	mvn	r3, #0
    cf1c:	b	cf98 <coda_expression_eval_integer+0xf0>
    cf20:	sub	r3, fp, #572	; 0x23c
    cf24:	ldr	r1, [fp, #-580]	; 0xfffffdbc
    cf28:	mov	r0, r3
    cf2c:	bl	1248 <init_eval_info>
    cf30:	sub	r3, fp, #572	; 0x23c
    cf34:	ldr	r2, [fp, #-584]	; 0xfffffdb8
    cf38:	ldr	r1, [fp, #-576]	; 0xfffffdc0
    cf3c:	mov	r0, r3
    cf40:	bl	4510 <eval_integer>
    cf44:	mov	r3, r0
    cf48:	cmp	r3, #0
    cf4c:	beq	cf94 <coda_expression_eval_integer+0xec>
    cf50:	ldr	r3, [fp, #-580]	; 0xfffffdbc
    cf54:	cmp	r3, #0
    cf58:	beq	cf8c <coda_expression_eval_integer+0xe4>
    cf5c:	sub	r3, fp, #572	; 0x23c
    cf60:	add	r3, r3, #8
    cf64:	mov	r1, r3
    cf68:	ldr	r0, [fp, #-580]	; 0xfffffdbc
    cf6c:	bl	0 <coda_cursor_compare>
    cf70:	mov	r3, r0
    cf74:	cmp	r3, #0
    cf78:	beq	cf8c <coda_expression_eval_integer+0xe4>
    cf7c:	sub	r3, fp, #572	; 0x23c
    cf80:	add	r3, r3, #8
    cf84:	mov	r0, r3
    cf88:	bl	0 <coda_cursor_add_to_error_message>
    cf8c:	mvn	r3, #0
    cf90:	b	cf98 <coda_expression_eval_integer+0xf0>
    cf94:	mov	r3, #0
    cf98:	mov	r0, r3
    cf9c:	sub	sp, fp, #4
    cfa0:	ldr	fp, [sp]
    cfa4:	add	sp, sp, #4
    cfa8:	pop	{pc}		; (ldr pc, [sp], #4)

0000cfac <coda_expression_eval_float>:
    cfac:	str	fp, [sp, #-8]!
    cfb0:	str	lr, [sp, #4]
    cfb4:	add	fp, sp, #4
    cfb8:	sub	sp, sp, #584	; 0x248
    cfbc:	str	r0, [fp, #-576]	; 0xfffffdc0
    cfc0:	str	r1, [fp, #-580]	; 0xfffffdbc
    cfc4:	str	r2, [fp, #-584]	; 0xfffffdb8
    cfc8:	ldr	r3, [fp, #-576]	; 0xfffffdc0
    cfcc:	ldr	r3, [r3, #4]
    cfd0:	cmp	r3, #2
    cfd4:	beq	cff0 <coda_expression_eval_float+0x44>
    cfd8:	movw	r1, #0
    cfdc:	movt	r1, #0
    cfe0:	mvn	r0, #99	; 0x63
    cfe4:	bl	0 <coda_set_error>
    cfe8:	mvn	r3, #0
    cfec:	b	d09c <coda_expression_eval_float+0xf0>
    cff0:	ldr	r3, [fp, #-580]	; 0xfffffdbc
    cff4:	cmp	r3, #0
    cff8:	bne	d024 <coda_expression_eval_float+0x78>
    cffc:	ldr	r3, [fp, #-576]	; 0xfffffdc0
    d000:	ldr	r3, [r3, #8]
    d004:	cmp	r3, #0
    d008:	bne	d024 <coda_expression_eval_float+0x78>
    d00c:	movw	r1, #0
    d010:	movt	r1, #0
    d014:	mvn	r0, #99	; 0x63
    d018:	bl	0 <coda_set_error>
    d01c:	mvn	r3, #0
    d020:	b	d09c <coda_expression_eval_float+0xf0>
    d024:	sub	r3, fp, #572	; 0x23c
    d028:	ldr	r1, [fp, #-580]	; 0xfffffdbc
    d02c:	mov	r0, r3
    d030:	bl	1248 <init_eval_info>
    d034:	sub	r3, fp, #572	; 0x23c
    d038:	ldr	r2, [fp, #-584]	; 0xfffffdb8
    d03c:	ldr	r1, [fp, #-576]	; 0xfffffdc0
    d040:	mov	r0, r3
    d044:	bl	314c <eval_float>
    d048:	mov	r3, r0
    d04c:	cmp	r3, #0
    d050:	beq	d098 <coda_expression_eval_float+0xec>
    d054:	ldr	r3, [fp, #-580]	; 0xfffffdbc
    d058:	cmp	r3, #0
    d05c:	beq	d090 <coda_expression_eval_float+0xe4>
    d060:	sub	r3, fp, #572	; 0x23c
    d064:	add	r3, r3, #8
    d068:	mov	r1, r3
    d06c:	ldr	r0, [fp, #-580]	; 0xfffffdbc
    d070:	bl	0 <coda_cursor_compare>
    d074:	mov	r3, r0
    d078:	cmp	r3, #0
    d07c:	beq	d090 <coda_expression_eval_float+0xe4>
    d080:	sub	r3, fp, #572	; 0x23c
    d084:	add	r3, r3, #8
    d088:	mov	r0, r3
    d08c:	bl	0 <coda_cursor_add_to_error_message>
    d090:	mvn	r3, #0
    d094:	b	d09c <coda_expression_eval_float+0xf0>
    d098:	mov	r3, #0
    d09c:	mov	r0, r3
    d0a0:	sub	sp, fp, #4
    d0a4:	ldr	fp, [sp]
    d0a8:	add	sp, sp, #4
    d0ac:	pop	{pc}		; (ldr pc, [sp], #4)

0000d0b0 <coda_expression_eval_string>:
    d0b0:	str	fp, [sp, #-8]!
    d0b4:	str	lr, [sp, #4]
    d0b8:	add	fp, sp, #4
    d0bc:	sub	sp, sp, #608	; 0x260
    d0c0:	str	r0, [fp, #-592]	; 0xfffffdb0
    d0c4:	str	r1, [fp, #-596]	; 0xfffffdac
    d0c8:	str	r2, [fp, #-600]	; 0xfffffda8
    d0cc:	str	r3, [fp, #-604]	; 0xfffffda4
    d0d0:	ldr	r3, [fp, #-592]	; 0xfffffdb0
    d0d4:	ldr	r3, [r3, #4]
    d0d8:	cmp	r3, #3
    d0dc:	beq	d0f8 <coda_expression_eval_string+0x48>
    d0e0:	movw	r1, #0
    d0e4:	movt	r1, #0
    d0e8:	mvn	r0, #99	; 0x63
    d0ec:	bl	0 <coda_set_error>
    d0f0:	mvn	r3, #0
    d0f4:	b	d2ac <coda_expression_eval_string+0x1fc>
    d0f8:	ldr	r3, [fp, #-596]	; 0xfffffdac
    d0fc:	cmp	r3, #0
    d100:	bne	d12c <coda_expression_eval_string+0x7c>
    d104:	ldr	r3, [fp, #-592]	; 0xfffffdb0
    d108:	ldr	r3, [r3, #8]
    d10c:	cmp	r3, #0
    d110:	bne	d12c <coda_expression_eval_string+0x7c>
    d114:	movw	r1, #0
    d118:	movt	r1, #0
    d11c:	mvn	r0, #99	; 0x63
    d120:	bl	0 <coda_set_error>
    d124:	mvn	r3, #0
    d128:	b	d2ac <coda_expression_eval_string+0x1fc>
    d12c:	sub	r3, fp, #580	; 0x244
    d130:	ldr	r1, [fp, #-596]	; 0xfffffdac
    d134:	mov	r0, r3
    d138:	bl	1248 <init_eval_info>
    d13c:	sub	r2, fp, #584	; 0x248
    d140:	sub	r0, fp, #580	; 0x244
    d144:	ldr	r3, [fp, #-600]	; 0xfffffda8
    d148:	str	r3, [sp]
    d14c:	ldr	r3, [fp, #-604]	; 0xfffffda4
    d150:	ldr	r1, [fp, #-592]	; 0xfffffdb0
    d154:	bl	684c <eval_string>
    d158:	mov	r3, r0
    d15c:	cmp	r3, #0
    d160:	beq	d1a8 <coda_expression_eval_string+0xf8>
    d164:	ldr	r3, [fp, #-596]	; 0xfffffdac
    d168:	cmp	r3, #0
    d16c:	beq	d1a0 <coda_expression_eval_string+0xf0>
    d170:	sub	r3, fp, #580	; 0x244
    d174:	add	r3, r3, #8
    d178:	mov	r1, r3
    d17c:	ldr	r0, [fp, #-596]	; 0xfffffdac
    d180:	bl	0 <coda_cursor_compare>
    d184:	mov	r3, r0
    d188:	cmp	r3, #0
    d18c:	beq	d1a0 <coda_expression_eval_string+0xf0>
    d190:	sub	r3, fp, #580	; 0x244
    d194:	add	r3, r3, #8
    d198:	mov	r0, r3
    d19c:	bl	0 <coda_cursor_add_to_error_message>
    d1a0:	mvn	r3, #0
    d1a4:	b	d2ac <coda_expression_eval_string+0x1fc>
    d1a8:	ldr	r3, [fp, #-604]	; 0xfffffda4
    d1ac:	ldr	r3, [r3]
    d1b0:	cmp	r3, #0
    d1b4:	ble	d27c <coda_expression_eval_string+0x1cc>
    d1b8:	ldr	r3, [fp, #-584]	; 0xfffffdb8
    d1bc:	cmp	r3, #0
    d1c0:	beq	d25c <coda_expression_eval_string+0x1ac>
    d1c4:	ldr	r3, [fp, #-604]	; 0xfffffda4
    d1c8:	ldr	r3, [r3]
    d1cc:	add	r3, r3, #1
    d1d0:	mov	r0, r3
    d1d4:	bl	0 <malloc>
    d1d8:	mov	r3, r0
    d1dc:	str	r3, [fp, #-8]
    d1e0:	ldr	r3, [fp, #-8]
    d1e4:	cmp	r3, #0
    d1e8:	bne	d21c <coda_expression_eval_string+0x16c>
    d1ec:	ldr	r3, [fp, #-604]	; 0xfffffda4
    d1f0:	ldr	r2, [r3]
    d1f4:	movw	r3, #5251	; 0x1483
    d1f8:	str	r3, [sp]
    d1fc:	movw	r3, #0
    d200:	movt	r3, #0
    d204:	movw	r1, #0
    d208:	movt	r1, #0
    d20c:	mvn	r0, #0
    d210:	bl	0 <coda_set_error>
    d214:	mvn	r3, #0
    d218:	b	d2ac <coda_expression_eval_string+0x1fc>
    d21c:	ldr	r3, [fp, #-600]	; 0xfffffda8
    d220:	ldr	r3, [r3]
    d224:	ldr	r2, [fp, #-584]	; 0xfffffdb8
    d228:	add	r1, r3, r2
    d22c:	ldr	r3, [fp, #-604]	; 0xfffffda4
    d230:	ldr	r3, [r3]
    d234:	mov	r2, r3
    d238:	ldr	r0, [fp, #-8]
    d23c:	bl	0 <memcpy>
    d240:	ldr	r3, [fp, #-600]	; 0xfffffda8
    d244:	ldr	r3, [r3]
    d248:	mov	r0, r3
    d24c:	bl	0 <free>
    d250:	ldr	r3, [fp, #-600]	; 0xfffffda8
    d254:	ldr	r2, [fp, #-8]
    d258:	str	r2, [r3]
    d25c:	ldr	r3, [fp, #-600]	; 0xfffffda8
    d260:	ldr	r3, [r3]
    d264:	ldr	r2, [fp, #-604]	; 0xfffffda4
    d268:	ldr	r2, [r2]
    d26c:	add	r3, r3, r2
    d270:	mov	r2, #0
    d274:	strb	r2, [r3]
    d278:	b	d2a8 <coda_expression_eval_string+0x1f8>
    d27c:	ldr	r3, [fp, #-600]	; 0xfffffda8
    d280:	ldr	r3, [r3]
    d284:	cmp	r3, #0
    d288:	beq	d29c <coda_expression_eval_string+0x1ec>
    d28c:	ldr	r3, [fp, #-600]	; 0xfffffda8
    d290:	ldr	r3, [r3]
    d294:	mov	r0, r3
    d298:	bl	0 <free>
    d29c:	ldr	r3, [fp, #-600]	; 0xfffffda8
    d2a0:	mov	r2, #0
    d2a4:	str	r2, [r3]
    d2a8:	mov	r3, #0
    d2ac:	mov	r0, r3
    d2b0:	sub	sp, fp, #4
    d2b4:	ldr	fp, [sp]
    d2b8:	add	sp, sp, #4
    d2bc:	pop	{pc}		; (ldr pc, [sp], #4)

0000d2c0 <coda_expression_eval_node>:
    d2c0:	str	fp, [sp, #-8]!
    d2c4:	str	lr, [sp, #4]
    d2c8:	add	fp, sp, #4
    d2cc:	sub	sp, sp, #576	; 0x240
    d2d0:	str	r0, [fp, #-576]	; 0xfffffdc0
    d2d4:	str	r1, [fp, #-580]	; 0xfffffdbc
    d2d8:	ldr	r3, [fp, #-576]	; 0xfffffdc0
    d2dc:	ldr	r3, [r3, #4]
    d2e0:	cmp	r3, #4
    d2e4:	beq	d300 <coda_expression_eval_node+0x40>
    d2e8:	movw	r1, #0
    d2ec:	movt	r1, #0
    d2f0:	mvn	r0, #99	; 0x63
    d2f4:	bl	0 <coda_set_error>
    d2f8:	mvn	r3, #0
    d2fc:	b	d3b0 <coda_expression_eval_node+0xf0>
    d300:	ldr	r3, [fp, #-580]	; 0xfffffdbc
    d304:	cmp	r3, #0
    d308:	bne	d324 <coda_expression_eval_node+0x64>
    d30c:	movw	r1, #0
    d310:	movt	r1, #0
    d314:	mvn	r0, #99	; 0x63
    d318:	bl	0 <coda_set_error>
    d31c:	mvn	r3, #0
    d320:	b	d3b0 <coda_expression_eval_node+0xf0>
    d324:	sub	r3, fp, #572	; 0x23c
    d328:	ldr	r1, [fp, #-580]	; 0xfffffdbc
    d32c:	mov	r0, r3
    d330:	bl	1248 <init_eval_info>
    d334:	sub	r3, fp, #572	; 0x23c
    d338:	ldr	r1, [fp, #-576]	; 0xfffffdc0
    d33c:	mov	r0, r3
    d340:	bl	9334 <eval_cursor>
    d344:	mov	r3, r0
    d348:	cmp	r3, #0
    d34c:	beq	d394 <coda_expression_eval_node+0xd4>
    d350:	ldr	r3, [fp, #-580]	; 0xfffffdbc
    d354:	cmp	r3, #0
    d358:	beq	d38c <coda_expression_eval_node+0xcc>
    d35c:	sub	r3, fp, #572	; 0x23c
    d360:	add	r3, r3, #8
    d364:	mov	r1, r3
    d368:	ldr	r0, [fp, #-580]	; 0xfffffdbc
    d36c:	bl	0 <coda_cursor_compare>
    d370:	mov	r3, r0
    d374:	cmp	r3, #0
    d378:	beq	d38c <coda_expression_eval_node+0xcc>
    d37c:	sub	r3, fp, #572	; 0x23c
    d380:	add	r3, r3, #8
    d384:	mov	r0, r3
    d388:	bl	0 <coda_cursor_add_to_error_message>
    d38c:	mvn	r3, #0
    d390:	b	d3b0 <coda_expression_eval_node+0xf0>
    d394:	ldr	r3, [fp, #-580]	; 0xfffffdbc
    d398:	mov	r0, r3
    d39c:	sub	r3, fp, #564	; 0x234
    d3a0:	mov	r2, #520	; 0x208
    d3a4:	mov	r1, r3
    d3a8:	bl	0 <memcpy>
    d3ac:	mov	r3, #0
    d3b0:	mov	r0, r3
    d3b4:	sub	sp, fp, #4
    d3b8:	ldr	fp, [sp]
    d3bc:	add	sp, sp, #4
    d3c0:	pop	{pc}		; (ldr pc, [sp], #4)
