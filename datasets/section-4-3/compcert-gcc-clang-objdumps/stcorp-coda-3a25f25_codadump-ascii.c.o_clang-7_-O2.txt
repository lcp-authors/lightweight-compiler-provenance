
../compcert-repos/stcorp-coda-3a25f25/CMakeFiles/codadump.dir/tools/codadump/codadump-ascii.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <export_data_element_to_ascii>:
   0:	push	{r4, sl, fp, lr}
   4:	add	fp, sp, #8
   8:	movw	r0, #0
   c:	movt	r0, #0
  10:	ldrb	r1, [r0]
  14:	cmp	r1, #0
  18:	beq	34 <export_data_element_to_ascii+0x34>
  1c:	movw	r0, #0
  20:	movt	r0, #0
  24:	ldr	r1, [r0]
  28:	mov	r0, #10
  2c:	bl	0 <fputc>
  30:	b	3c <export_data_element_to_ascii+0x3c>
  34:	mov	r1, #1
  38:	strb	r1, [r0]
  3c:	movw	r0, #0
  40:	movt	r0, #0
  44:	ldr	r0, [r0]
  48:	cmp	r0, #0
  4c:	beq	74 <export_data_element_to_ascii+0x74>
  50:	movw	r4, #0
  54:	mov	r1, #2
  58:	mov	r2, #0
  5c:	movt	r4, #0
  60:	ldr	r0, [r4]
  64:	bl	0 <print_full_field_name>
  68:	ldr	r1, [r4]
  6c:	mov	r0, #10
  70:	bl	0 <fputc>
  74:	movw	r0, #0
  78:	movt	r0, #0
  7c:	ldr	r1, [r0]
  80:	cmp	r1, #1
  84:	blt	9c <export_data_element_to_ascii+0x9c>
  88:	add	r0, r0, r1, lsl #3
  8c:	ldr	r1, [r0, #296]	; 0x128
  90:	ldr	r0, [r0, #300]	; 0x12c
  94:	orrs	r0, r1, r0
  98:	popeq	{r4, sl, fp, pc}
  9c:	movw	r0, #0
  a0:	mov	r1, #0
  a4:	mov	r2, #0
  a8:	mov	r3, #0
  ac:	movt	r0, #0
  b0:	ldr	r0, [r0]
  b4:	pop	{r4, sl, fp, lr}
  b8:	b	bc <write_data>

000000bc <write_data>:
  bc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
  c0:	add	fp, sp, #28
  c4:	sub	sp, sp, #124	; 0x7c
  c8:	movw	sl, #0
  cc:	mov	r8, r0
  d0:	mov	r6, r1
  d4:	str	r3, [sp, #60]	; 0x3c
  d8:	str	r2, [sp, #48]	; 0x30
  dc:	movt	sl, #0
  e0:	add	r5, sl, r1, lsl #2
  e4:	sub	r1, fp, #52	; 0x34
  e8:	ldr	r0, [r5, #8]!
  ec:	bl	0 <coda_type_get_class>
  f0:	cmp	r0, #0
  f4:	beq	fc <write_data+0x40>
  f8:	bl	0 <handle_coda_error>
  fc:	ldr	r0, [fp, #-52]	; 0xffffffcc
 100:	cmp	r0, #0
 104:	beq	1f0 <write_data+0x134>
 108:	cmp	r0, #1
 10c:	bne	25c <write_data+0x1a0>
 110:	ldr	r2, [sp, #48]	; 0x30
 114:	str	r6, [sp, #20]
 118:	str	r8, [sp, #24]
 11c:	add	r0, r2, r2, lsl #2
 120:	cmp	r2, #0
 124:	add	r9, sl, r0, lsl #4
 128:	moveq	r0, #0
 12c:	ldr	r1, [r9, #800]	; 0x320
 130:	streq	r0, [sl, #844]	; 0x34c
 134:	mov	r2, r9
 138:	ldr	r0, [r2, #804]!	; 0x324
 13c:	str	r2, [sp, #32]
 140:	movw	r2, #0
 144:	add	r3, r0, r1
 148:	movt	r2, #0
 14c:	str	r3, [sp, #40]	; 0x28
 150:	ldr	r7, [r2, #104]	; 0x68
 154:	cmp	r7, r3
 158:	str	r7, [sp, #36]	; 0x24
 15c:	blt	180 <write_data+0xc4>
 160:	ldr	r3, [sl, #3360]	; 0xd20
 164:	ldr	r7, [sp, #48]	; 0x30
 168:	sub	r3, r3, #1
 16c:	cmp	r3, r7
 170:	ldrgt	r3, [r9, #840]	; 0x348
 174:	ldrgt	r7, [r9, #844]	; 0x34c
 178:	mulgt	r3, r3, r7
 17c:	strgt	r3, [r9, #924]	; 0x39c
 180:	cmp	r0, #1
 184:	blt	3f4 <write_data+0x338>
 188:	add	r1, r2, r1, lsl #2
 18c:	add	r2, r9, #848	; 0x350
 190:	add	r3, r9, #844	; 0x34c
 194:	mov	r8, #1
 198:	mov	ip, #0
 19c:	add	r5, sp, #64	; 0x40
 1a0:	mov	r4, #0
 1a4:	add	r6, r1, r4
 1a8:	ldr	r7, [r6, #72]	; 0x48
 1ac:	cmp	r7, #0
 1b0:	beq	1c4 <write_data+0x108>
 1b4:	ldr	r7, [r6, #108]	; 0x6c
 1b8:	ldr	r6, [r3]
 1bc:	add	r6, r7, r6, lsl #2
 1c0:	b	1c8 <write_data+0x10c>
 1c4:	add	r6, r6, #4
 1c8:	ldr	r7, [r6]
 1cc:	str	ip, [r2, r4]
 1d0:	subs	r0, r0, #1
 1d4:	str	r7, [r5, r4]
 1d8:	mul	r8, r7, r8
 1dc:	add	r4, r4, #4
 1e0:	bne	1a4 <write_data+0xe8>
 1e4:	cmp	r8, #0
 1e8:	bne	3f8 <write_data+0x33c>
 1ec:	b	a50 <write_data+0x994>
 1f0:	ldr	r0, [sp, #60]	; 0x3c
 1f4:	add	r5, sl, #144	; 0x90
 1f8:	add	r2, sp, #64	; 0x40
 1fc:	add	r7, sl, r0, lsl #2
 200:	mov	r0, r5
 204:	ldr	r1, [r7, #3492]!	; 0xda4
 208:	bl	0 <coda_cursor_get_record_field_available_status>
 20c:	cmp	r0, #0
 210:	beq	218 <write_data+0x15c>
 214:	bl	0 <handle_coda_error>
 218:	ldr	r0, [sp, #64]	; 0x40
 21c:	cmp	r0, #0
 220:	beq	a50 <write_data+0x994>
 224:	ldr	r1, [r7]
 228:	mov	r0, r5
 22c:	bl	0 <coda_cursor_goto_record_field_by_index>
 230:	cmp	r0, #0
 234:	beq	23c <write_data+0x180>
 238:	bl	0 <handle_coda_error>
 23c:	ldr	r0, [sp, #60]	; 0x3c
 240:	ldr	r2, [sp, #48]	; 0x30
 244:	add	r1, r6, #1
 248:	add	r3, r0, #1
 24c:	mov	r0, r8
 250:	bl	bc <write_data>
 254:	mov	r0, r5
 258:	b	528 <write_data+0x46c>
 25c:	movw	r0, #0
 260:	str	r5, [sp, #56]	; 0x38
 264:	movt	r0, #0
 268:	ldr	r0, [r0]
 26c:	cmp	r0, #0
 270:	beq	338 <write_data+0x27c>
 274:	ldr	r0, [sl, #136]	; 0x88
 278:	cmp	r0, #1
 27c:	blt	338 <write_data+0x27c>
 280:	movw	r5, #0
 284:	movw	r6, #0
 288:	mov	r7, #0
 28c:	add	r4, sp, #64	; 0x40
 290:	mov	r9, #0
 294:	movt	r5, #0
 298:	movt	r6, #0
 29c:	add	r0, sl, r7, lsl #2
 2a0:	mov	r1, r4
 2a4:	ldr	r0, [r0, #8]
 2a8:	bl	0 <coda_type_get_class>
 2ac:	cmp	r0, #0
 2b0:	beq	2b8 <write_data+0x1fc>
 2b4:	bl	0 <handle_coda_error>
 2b8:	ldr	r0, [sp, #64]	; 0x40
 2bc:	cmp	r0, #1
 2c0:	bne	328 <write_data+0x26c>
 2c4:	add	r0, r9, r9, lsl #2
 2c8:	str	r9, [sp, #60]	; 0x3c
 2cc:	add	r0, sl, r0, lsl #4
 2d0:	mov	sl, r8
 2d4:	mov	r4, r0
 2d8:	ldr	r1, [r4, #804]!	; 0x324
 2dc:	cmp	r1, #1
 2e0:	blt	310 <write_data+0x254>
 2e4:	add	r8, r0, #848	; 0x350
 2e8:	mov	r9, #0
 2ec:	ldr	r2, [r8, r9, lsl #2]
 2f0:	ldr	r3, [r5]
 2f4:	mov	r0, sl
 2f8:	mov	r1, r6
 2fc:	bl	0 <fprintf>
 300:	ldr	r0, [r4]
 304:	add	r9, r9, #1
 308:	cmp	r9, r0
 30c:	blt	2ec <write_data+0x230>
 310:	ldr	r9, [sp, #60]	; 0x3c
 314:	mov	r8, sl
 318:	movw	sl, #0
 31c:	add	r4, sp, #64	; 0x40
 320:	movt	sl, #0
 324:	add	r9, r9, #1
 328:	ldr	r0, [sl, #136]	; 0x88
 32c:	add	r7, r7, #1
 330:	cmp	r7, r0
 334:	blt	29c <write_data+0x1e0>
 338:	ldr	r5, [sp, #56]	; 0x38
 33c:	sub	r1, fp, #32
 340:	ldr	r0, [r5]
 344:	bl	0 <coda_type_get_class>
 348:	cmp	r0, #0
 34c:	beq	354 <write_data+0x298>
 350:	bl	0 <handle_coda_error>
 354:	ldr	r0, [fp, #-32]	; 0xffffffe0
 358:	sub	r1, r0, #2
 35c:	cmp	r1, #4
 360:	bcs	534 <write_data+0x478>
 364:	ldr	r0, [r5]
 368:	sub	r1, fp, #36	; 0x24
 36c:	bl	0 <coda_type_get_read_type>
 370:	cmp	r0, #0
 374:	beq	37c <write_data+0x2c0>
 378:	bl	0 <handle_coda_error>
 37c:	ldr	r0, [fp, #-36]	; 0xffffffdc
 380:	add	r0, r0, #1
 384:	cmp	r0, #13
 388:	bhi	a44 <write_data+0x988>
 38c:	add	r1, pc, #0
 390:	ldr	pc, [r1, r0, lsl #2]
 394:	.word	0x00000a84
 398:	.word	0x000003cc
 39c:	.word	0x00000628
 3a0:	.word	0x000003cc
 3a4:	.word	0x00000628
 3a8:	.word	0x000003cc
 3ac:	.word	0x00000628
 3b0:	.word	0x000006dc
 3b4:	.word	0x0000098c
 3b8:	.word	0x00000658
 3bc:	.word	0x00000658
 3c0:	.word	0x000009c8
 3c4:	.word	0x0000070c
 3c8:	.word	0x000007bc
 3cc:	add	r0, sl, #144	; 0x90
 3d0:	add	r1, sp, #64	; 0x40
 3d4:	bl	0 <coda_cursor_read_int32>
 3d8:	cmp	r0, #0
 3dc:	beq	3e4 <write_data+0x328>
 3e0:	bl	0 <handle_coda_error>
 3e4:	ldr	r2, [sp, #64]	; 0x40
 3e8:	movw	r1, #0
 3ec:	movt	r1, #0
 3f0:	b	64c <write_data+0x590>
 3f4:	mov	r8, #1
 3f8:	movw	r0, #0
 3fc:	movt	r0, #0
 400:	add	r0, r0, #144	; 0x90
 404:	str	r0, [sp, #44]	; 0x2c
 408:	bl	0 <coda_cursor_goto_first_array_element>
 40c:	cmp	r0, #0
 410:	beq	418 <write_data+0x35c>
 414:	bl	0 <handle_coda_error>
 418:	ldr	r4, [sp, #24]
 41c:	cmp	r8, #1
 420:	blt	524 <write_data+0x468>
 424:	add	r0, r9, #924	; 0x39c
 428:	mov	r7, #0
 42c:	mov	r5, #0
 430:	str	r0, [sp, #28]
 434:	add	r0, sp, #64	; 0x40
 438:	sub	sl, r0, #4
 43c:	sub	r0, r8, #1
 440:	str	r0, [sp, #56]	; 0x38
 444:	ldr	r0, [sp, #48]	; 0x30
 448:	add	r0, r0, #1
 44c:	str	r0, [sp, #52]	; 0x34
 450:	ldr	r0, [sp, #20]
 454:	add	r6, r0, #1
 458:	ldr	r2, [sp, #52]	; 0x34
 45c:	ldr	r3, [sp, #60]	; 0x3c
 460:	mov	r0, r4
 464:	mov	r1, r6
 468:	bl	bc <write_data>
 46c:	ldr	r0, [sp, #56]	; 0x38
 470:	cmp	r5, r0
 474:	bge	518 <write_data+0x45c>
 478:	ldr	r0, [sp, #44]	; 0x2c
 47c:	bl	0 <coda_cursor_goto_next_array_element>
 480:	cmp	r0, #0
 484:	beq	48c <write_data+0x3d0>
 488:	bl	0 <handle_coda_error>
 48c:	ldr	r0, [sp, #40]	; 0x28
 490:	ldr	r1, [sp, #36]	; 0x24
 494:	cmp	r1, r0
 498:	blt	4c4 <write_data+0x408>
 49c:	movw	r0, #0
 4a0:	ldr	r1, [sp, #48]	; 0x30
 4a4:	movt	r0, #0
 4a8:	ldr	r0, [r0, #3360]	; 0xd20
 4ac:	sub	r0, r0, #1
 4b0:	cmp	r0, r1
 4b4:	ldrgt	r1, [sp, #28]
 4b8:	ldrgt	r0, [r1]
 4bc:	addgt	r0, r0, #1
 4c0:	strgt	r0, [r1]
 4c4:	movw	r0, #0
 4c8:	movt	r0, #0
 4cc:	ldr	r0, [r0]
 4d0:	cmp	r0, #0
 4d4:	beq	518 <write_data+0x45c>
 4d8:	ldr	r0, [sp, #32]
 4dc:	ldr	r0, [r0]
 4e0:	cmp	r0, #1
 4e4:	blt	518 <write_data+0x45c>
 4e8:	add	r1, r9, r0, lsl #2
 4ec:	ldr	r3, [sl, r0, lsl #2]
 4f0:	ldr	r2, [r1, #844]	; 0x34c
 4f4:	add	r2, r2, #1
 4f8:	cmp	r2, r3
 4fc:	str	r2, [r1, #844]	; 0x34c
 500:	bne	518 <write_data+0x45c>
 504:	sub	r0, r0, #1
 508:	str	r7, [r1, #844]	; 0x34c
 50c:	add	r1, r0, #1
 510:	cmp	r1, #1
 514:	bgt	4e8 <write_data+0x42c>
 518:	add	r5, r5, #1
 51c:	cmp	r5, r8
 520:	bne	458 <write_data+0x39c>
 524:	ldr	r0, [sp, #44]	; 0x2c
 528:	bl	0 <coda_cursor_goto_parent>
 52c:	sub	sp, fp, #28
 530:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
 534:	cmp	r0, #6
 538:	beq	564 <write_data+0x4a8>
 53c:	cmp	r0, #2
 540:	bcs	a44 <write_data+0x988>
 544:	movw	r0, #0
 548:	movw	r1, #0
 54c:	movw	r3, #0
 550:	mov	r2, #368	; 0x170
 554:	movt	r0, #0
 558:	movt	r1, #0
 55c:	movt	r3, #0
 560:	bl	0 <__assert_fail>
 564:	ldr	r0, [r5]
 568:	sub	r1, fp, #36	; 0x24
 56c:	bl	0 <coda_type_get_special_type>
 570:	cmp	r0, #0
 574:	beq	57c <write_data+0x4c0>
 578:	bl	0 <handle_coda_error>
 57c:	ldr	r0, [fp, #-36]	; 0xffffffdc
 580:	sub	r1, r0, #1
 584:	cmp	r1, #2
 588:	bcs	690 <write_data+0x5d4>
 58c:	add	r0, sl, #144	; 0x90
 590:	sub	r1, fp, #48	; 0x30
 594:	bl	0 <coda_cursor_read_double>
 598:	cmp	r0, #0
 59c:	beq	5a4 <write_data+0x4e8>
 5a0:	bl	0 <handle_coda_error>
 5a4:	ldr	r0, [fp, #-36]	; 0xffffffdc
 5a8:	cmp	r0, #2
 5ac:	bne	a04 <write_data+0x948>
 5b0:	movw	r0, #0
 5b4:	movt	r0, #0
 5b8:	ldr	r0, [r0]
 5bc:	cmp	r0, #0
 5c0:	beq	a04 <write_data+0x948>
 5c4:	vldr	d0, [fp, #-48]	; 0xffffffd0
 5c8:	bl	0 <coda_isNaN>
 5cc:	cmp	r0, #0
 5d0:	bne	5e4 <write_data+0x528>
 5d4:	vldr	d0, [fp, #-48]	; 0xffffffd0
 5d8:	bl	0 <coda_isInf>
 5dc:	cmp	r0, #0
 5e0:	beq	a60 <write_data+0x9a4>
 5e4:	movw	r1, #0
 5e8:	mov	r0, #11
 5ec:	movt	r1, #0
 5f0:	vld1.64	{d16-d17}, [r1], r0
 5f4:	vld1.8	{d18-d19}, [r1]
 5f8:	add	r1, sp, #64	; 0x40
 5fc:	vst1.64	{d16-d17}, [r1], r0
 600:	vst1.8	{d18-d19}, [r1]
 604:	movw	r0, #0
 608:	movt	r0, #0
 60c:	ldr	r0, [r0]
 610:	cmp	r0, #0
 614:	beq	a58 <write_data+0x99c>
 618:	movw	r1, #0
 61c:	add	r2, sp, #64	; 0x40
 620:	movt	r1, #0
 624:	b	64c <write_data+0x590>
 628:	add	r0, sl, #144	; 0x90
 62c:	add	r1, sp, #64	; 0x40
 630:	bl	0 <coda_cursor_read_uint32>
 634:	cmp	r0, #0
 638:	beq	640 <write_data+0x584>
 63c:	bl	0 <handle_coda_error>
 640:	ldr	r2, [sp, #64]	; 0x40
 644:	movw	r1, #0
 648:	movt	r1, #0
 64c:	mov	r0, r8
 650:	bl	0 <fprintf>
 654:	b	a44 <write_data+0x988>
 658:	add	r0, sl, #144	; 0x90
 65c:	add	r1, sp, #64	; 0x40
 660:	bl	0 <coda_cursor_read_double>
 664:	cmp	r0, #0
 668:	beq	670 <write_data+0x5b4>
 66c:	bl	0 <handle_coda_error>
 670:	vldr	d16, [sp, #64]	; 0x40
 674:	ldr	r0, [fp, #-36]	; 0xffffffdc
 678:	vmov	r2, r3, d16
 67c:	cmp	r0, #8
 680:	bne	a0c <write_data+0x950>
 684:	movw	r1, #0
 688:	movt	r1, #0
 68c:	b	a14 <write_data+0x958>
 690:	cmp	r0, #3
 694:	bne	a44 <write_data+0x988>
 698:	add	r0, sl, #144	; 0x90
 69c:	add	r1, sp, #64	; 0x40
 6a0:	bl	0 <coda_cursor_read_complex_double_pair>
 6a4:	cmp	r0, #0
 6a8:	beq	6b0 <write_data+0x5f4>
 6ac:	bl	0 <handle_coda_error>
 6b0:	movw	r0, #0
 6b4:	vldr	d16, [sp, #64]	; 0x40
 6b8:	vldr	d17, [sp, #72]	; 0x48
 6bc:	movw	r1, #0
 6c0:	movt	r0, #0
 6c4:	movt	r1, #0
 6c8:	ldr	r0, [r0]
 6cc:	vstr	d17, [sp, #8]
 6d0:	vmov	r2, r3, d16
 6d4:	str	r0, [sp]
 6d8:	b	a14 <write_data+0x958>
 6dc:	add	r0, sl, #144	; 0x90
 6e0:	sub	r1, fp, #48	; 0x30
 6e4:	bl	0 <coda_cursor_read_int64>
 6e8:	cmp	r0, #0
 6ec:	beq	6f4 <write_data+0x638>
 6f0:	bl	0 <handle_coda_error>
 6f4:	ldr	r0, [fp, #-48]	; 0xffffffd0
 6f8:	ldr	r1, [fp, #-44]	; 0xffffffd4
 6fc:	add	r5, sp, #64	; 0x40
 700:	mov	r2, r5
 704:	bl	0 <coda_str64>
 708:	b	9b8 <write_data+0x8fc>
 70c:	add	r6, sl, #144	; 0x90
 710:	add	r1, sp, #64	; 0x40
 714:	mov	r0, r6
 718:	bl	0 <coda_cursor_get_string_length>
 71c:	cmp	r0, #0
 720:	beq	728 <write_data+0x66c>
 724:	bl	0 <handle_coda_error>
 728:	ldr	r0, [sp, #64]	; 0x40
 72c:	add	r7, r0, #1
 730:	mov	r0, r7
 734:	bl	0 <malloc>
 738:	mov	r5, r0
 73c:	cmp	r0, #0
 740:	bne	774 <write_data+0x6b8>
 744:	movw	r1, #0
 748:	movw	r3, #0
 74c:	mov	r0, #126	; 0x7e
 750:	mov	r2, r7
 754:	str	r0, [sp]
 758:	movt	r1, #0
 75c:	movt	r3, #0
 760:	mvn	r0, #0
 764:	bl	0 <coda_set_error>
 768:	bl	0 <handle_coda_error>
 76c:	ldr	r0, [sp, #64]	; 0x40
 770:	add	r7, r0, #1
 774:	mov	r0, r6
 778:	mov	r1, r5
 77c:	mov	r2, r7
 780:	bl	0 <coda_cursor_read_string>
 784:	cmp	r0, #0
 788:	beq	790 <write_data+0x6d4>
 78c:	bl	0 <handle_coda_error>
 790:	movw	r0, #0
 794:	movt	r0, #0
 798:	ldr	r0, [r0]
 79c:	cmp	r0, #0
 7a0:	beq	a20 <write_data+0x964>
 7a4:	movw	r1, #0
 7a8:	mov	r0, r8
 7ac:	mov	r2, r5
 7b0:	movt	r1, #0
 7b4:	bl	0 <fprintf>
 7b8:	b	a2c <write_data+0x970>
 7bc:	add	r0, sl, #144	; 0x90
 7c0:	add	r1, sp, #64	; 0x40
 7c4:	str	r8, [sp, #24]
 7c8:	str	r0, [sp, #60]	; 0x3c
 7cc:	bl	0 <coda_cursor_get_bit_size>
 7d0:	cmp	r0, #0
 7d4:	beq	7dc <write_data+0x720>
 7d8:	bl	0 <handle_coda_error>
 7dc:	ldr	sl, [sp, #64]	; 0x40
 7e0:	ldr	r7, [sp, #68]	; 0x44
 7e4:	lsr	r0, sl, #3
 7e8:	asr	r4, r7, #3
 7ec:	orr	r0, r0, r7, lsl #29
 7f0:	adds	r5, r0, #1
 7f4:	adc	r9, r4, #0
 7f8:	ands	r8, sl, #7
 7fc:	moveq	r5, r0
 800:	mov	r0, r5
 804:	bl	0 <malloc>
 808:	cmp	r8, #0
 80c:	mov	r6, r0
 810:	moveq	r9, r4
 814:	cmp	r0, #0
 818:	bne	84c <write_data+0x790>
 81c:	movw	r1, #0
 820:	movw	r3, #0
 824:	mov	r0, #163	; 0xa3
 828:	mov	r2, r5
 82c:	str	r0, [sp]
 830:	movt	r1, #0
 834:	movt	r3, #0
 838:	mvn	r0, #0
 83c:	bl	0 <coda_set_error>
 840:	bl	0 <handle_coda_error>
 844:	ldr	sl, [sp, #64]	; 0x40
 848:	ldr	r7, [sp, #68]	; 0x44
 84c:	ldr	r0, [sp, #60]	; 0x3c
 850:	mov	r1, r6
 854:	mov	r2, #0
 858:	mov	r3, #0
 85c:	str	sl, [sp]
 860:	str	r7, [sp, #4]
 864:	bl	0 <coda_cursor_read_bits>
 868:	ldr	r8, [sp, #24]
 86c:	cmp	r0, #0
 870:	beq	878 <write_data+0x7bc>
 874:	bl	0 <handle_coda_error>
 878:	subs	r0, r5, #1
 87c:	sbcs	r0, r9, #0
 880:	blt	980 <write_data+0x8c4>
 884:	movw	r7, #0
 888:	movw	r4, #0
 88c:	mov	sl, #0
 890:	movt	r7, #0
 894:	movt	r4, #0
 898:	b	8d0 <write_data+0x814>
 89c:	sub	r0, r2, #32
 8a0:	uxtb	r0, r0
 8a4:	cmp	r0, #94	; 0x5e
 8a8:	bhi	8bc <write_data+0x800>
 8ac:	mov	r0, r2
 8b0:	mov	r1, r8
 8b4:	bl	0 <fputc>
 8b8:	b	970 <write_data+0x8b4>
 8bc:	movw	r1, #0
 8c0:	mov	r0, r8
 8c4:	movt	r1, #0
 8c8:	bl	0 <fprintf>
 8cc:	b	970 <write_data+0x8b4>
 8d0:	ldrb	r2, [r6, sl]
 8d4:	sub	r0, r2, #7
 8d8:	cmp	r0, #6
 8dc:	bhi	910 <write_data+0x854>
 8e0:	add	r1, pc, #0
 8e4:	ldr	pc, [r1, r0, lsl #2]
 8e8:	.word	0x00000904
 8ec:	.word	0x0000093c
 8f0:	.word	0x00000930
 8f4:	.word	0x00000948
 8f8:	.word	0x00000924
 8fc:	.word	0x00000954
 900:	.word	0x0000095c
 904:	movw	r0, #0
 908:	movt	r0, #0
 90c:	b	960 <write_data+0x8a4>
 910:	cmp	r2, #92	; 0x5c
 914:	bne	89c <write_data+0x7e0>
 918:	movw	r0, #0
 91c:	movt	r0, #0
 920:	b	960 <write_data+0x8a4>
 924:	movw	r0, #0
 928:	movt	r0, #0
 92c:	b	960 <write_data+0x8a4>
 930:	movw	r0, #0
 934:	movt	r0, #0
 938:	b	960 <write_data+0x8a4>
 93c:	movw	r0, #0
 940:	movt	r0, #0
 944:	b	960 <write_data+0x8a4>
 948:	movw	r0, #0
 94c:	movt	r0, #0
 950:	b	960 <write_data+0x8a4>
 954:	mov	r0, r7
 958:	b	960 <write_data+0x8a4>
 95c:	mov	r0, r4
 960:	mov	r1, #2
 964:	mov	r2, #1
 968:	mov	r3, r8
 96c:	bl	0 <fwrite>
 970:	add	sl, sl, #1
 974:	subs	r0, sl, r5
 978:	rscs	r0, r9, #0
 97c:	blt	8d0 <write_data+0x814>
 980:	mov	r0, r6
 984:	bl	0 <free>
 988:	b	a44 <write_data+0x988>
 98c:	add	r0, sl, #144	; 0x90
 990:	sub	r1, fp, #48	; 0x30
 994:	bl	0 <coda_cursor_read_uint64>
 998:	cmp	r0, #0
 99c:	beq	9a4 <write_data+0x8e8>
 9a0:	bl	0 <handle_coda_error>
 9a4:	ldr	r0, [fp, #-48]	; 0xffffffd0
 9a8:	ldr	r1, [fp, #-44]	; 0xffffffd4
 9ac:	add	r5, sp, #64	; 0x40
 9b0:	mov	r2, r5
 9b4:	bl	0 <coda_str64u>
 9b8:	mov	r0, r5
 9bc:	mov	r1, r8
 9c0:	bl	0 <fputs>
 9c4:	b	a44 <write_data+0x988>
 9c8:	add	r0, sl, #144	; 0x90
 9cc:	add	r1, sp, #64	; 0x40
 9d0:	bl	0 <coda_cursor_read_char>
 9d4:	cmp	r0, #0
 9d8:	beq	9e0 <write_data+0x924>
 9dc:	bl	0 <handle_coda_error>
 9e0:	movw	r0, #0
 9e4:	ldrb	r2, [sp, #64]	; 0x40
 9e8:	movt	r0, #0
 9ec:	ldr	r0, [r0]
 9f0:	cmp	r0, #0
 9f4:	beq	a38 <write_data+0x97c>
 9f8:	movw	r1, #0
 9fc:	movt	r1, #0
 a00:	b	64c <write_data+0x590>
 a04:	vldr	d16, [fp, #-48]	; 0xffffffd0
 a08:	vmov	r2, r3, d16
 a0c:	movw	r1, #0
 a10:	movt	r1, #0
 a14:	mov	r0, r8
 a18:	bl	0 <fprintf>
 a1c:	b	a44 <write_data+0x988>
 a20:	mov	r0, r5
 a24:	mov	r1, r8
 a28:	bl	0 <fputs>
 a2c:	mov	r0, r5
 a30:	bl	0 <free>
 a34:	b	a44 <write_data+0x988>
 a38:	mov	r0, r2
 a3c:	mov	r1, r8
 a40:	bl	0 <fputc>
 a44:	mov	r0, #10
 a48:	mov	r1, r8
 a4c:	bl	0 <fputc>
 a50:	sub	sp, fp, #28
 a54:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
 a58:	add	r0, sp, #64	; 0x40
 a5c:	b	9bc <write_data+0x900>
 a60:	vldr	d0, [fp, #-48]	; 0xffffffd0
 a64:	movw	r0, #0
 a68:	add	r1, sp, #64	; 0x40
 a6c:	movt	r0, #0
 a70:	bl	0 <coda_time_double_to_string>
 a74:	cmp	r0, #0
 a78:	beq	604 <write_data+0x548>
 a7c:	bl	0 <handle_coda_error>
 a80:	b	604 <write_data+0x548>
 a84:	movw	r0, #0
 a88:	movw	r1, #0
 a8c:	movw	r3, #0
 a90:	movw	r2, #294	; 0x126
 a94:	movt	r0, #0
 a98:	movt	r1, #0
 a9c:	movt	r3, #0
 aa0:	bl	0 <__assert_fail>
