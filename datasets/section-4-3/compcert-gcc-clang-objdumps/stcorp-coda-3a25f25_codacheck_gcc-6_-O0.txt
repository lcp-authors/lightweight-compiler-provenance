
../compcert-repos/stcorp-coda-3a25f25/codacheck:     file format elf32-littlearm


Disassembly of section .init:

00010bc4 <.init>:
   10bc4:	push	{r3, lr}
   10bc8:	bl	10d94 <_start@@Base+0x3c>
   10bcc:	pop	{r3, pc}

Disassembly of section .plt:

00010bd0 <coda_set_option_perform_boundary_checks@plt-0x14>:
   10bd0:	push	{lr}		; (str lr, [sp, #-4]!)
   10bd4:	ldr	lr, [pc, #4]	; 10be0 <coda_set_option_perform_boundary_checks@plt-0x4>
   10bd8:	add	lr, pc, lr
   10bdc:	ldr	pc, [lr, #8]!
   10be0:	andeq	r2, r1, r0, lsr #8

00010be4 <coda_set_option_perform_boundary_checks@plt>:
   10be4:	add	ip, pc, #0, 12
   10be8:	add	ip, ip, #73728	; 0x12000
   10bec:	ldr	pc, [ip, #1056]!	; 0x420

00010bf0 <strcmp@plt>:
   10bf0:	add	ip, pc, #0, 12
   10bf4:	add	ip, ip, #73728	; 0x12000
   10bf8:	ldr	pc, [ip, #1048]!	; 0x418

00010bfc <printf@plt>:
   10bfc:	add	ip, pc, #0, 12
   10c00:	add	ip, ip, #73728	; 0x12000
   10c04:	ldr	pc, [ip, #1040]!	; 0x410

00010c08 <coda_set_error@plt>:
   10c08:	add	ip, pc, #0, 12
   10c0c:	add	ip, ip, #73728	; 0x12000
   10c10:	ldr	pc, [ip, #1032]!	; 0x408

00010c14 <coda_open@plt>:
   10c14:	add	ip, pc, #0, 12
   10c18:	add	ip, ip, #73728	; 0x12000
   10c1c:	ldr	pc, [ip, #1024]!	; 0x400

00010c20 <fflush@plt>:
   10c20:	add	ip, pc, #0, 12
   10c24:	add	ip, ip, #73728	; 0x12000
   10c28:	ldr	pc, [ip, #1016]!	; 0x3f8

00010c2c <coda_set_option_use_mmap@plt>:
   10c2c:	add	ip, pc, #0, 12
   10c30:	add	ip, ip, #73728	; 0x12000
   10c34:	ldr	pc, [ip, #1008]!	; 0x3f0

00010c38 <coda_cursor_print_path@plt>:
   10c38:	add	ip, pc, #0, 12
   10c3c:	add	ip, ip, #73728	; 0x12000
   10c40:	ldr	pc, [ip, #1000]!	; 0x3e8

00010c44 <coda_set_definition_path_conditional@plt>:
   10c44:	add	ip, pc, #0, 12
   10c48:	add	ip, ip, #73728	; 0x12000
   10c4c:	ldr	pc, [ip, #992]!	; 0x3e0

00010c50 <getchar@plt>:
   10c50:	add	ip, pc, #0, 12
   10c54:	add	ip, ip, #73728	; 0x12000
   10c58:	ldr	pc, [ip, #984]!	; 0x3d8

00010c5c <coda_set_definition_path@plt>:
   10c5c:	add	ip, pc, #0, 12
   10c60:	add	ip, ip, #73728	; 0x12000
   10c64:	ldr	pc, [ip, #976]!	; 0x3d0

00010c68 <coda_recognize_file@plt>:
   10c68:	add	ip, pc, #0, 12
   10c6c:	add	ip, ip, #73728	; 0x12000
   10c70:	ldr	pc, [ip, #968]!	; 0x3c8

00010c74 <fwrite@plt>:
   10c74:	add	ip, pc, #0, 12
   10c78:	add	ip, ip, #73728	; 0x12000
   10c7c:	ldr	pc, [ip, #960]!	; 0x3c0

00010c80 <coda_type_get_format_name@plt>:
   10c80:	add	ip, pc, #0, 12
   10c84:	add	ip, ip, #73728	; 0x12000
   10c88:	ldr	pc, [ip, #952]!	; 0x3b8

00010c8c <coda_done@plt>:
   10c8c:	add	ip, pc, #0, 12
   10c90:	add	ip, ip, #73728	; 0x12000
   10c94:	ldr	pc, [ip, #944]!	; 0x3b0

00010c98 <puts@plt>:
   10c98:	add	ip, pc, #0, 12
   10c9c:	add	ip, ip, #73728	; 0x12000
   10ca0:	ldr	pc, [ip, #936]!	; 0x3a8

00010ca4 <coda_product_check@plt>:
   10ca4:	add	ip, pc, #0, 12
   10ca8:	add	ip, ip, #73728	; 0x12000
   10cac:	ldr	pc, [ip, #928]!	; 0x3a0

00010cb0 <__libc_start_main@plt>:
   10cb0:	add	ip, pc, #0, 12
   10cb4:	add	ip, ip, #73728	; 0x12000
   10cb8:	ldr	pc, [ip, #920]!	; 0x398

00010cbc <__gmon_start__@plt>:
   10cbc:	add	ip, pc, #0, 12
   10cc0:	add	ip, ip, #73728	; 0x12000
   10cc4:	ldr	pc, [ip, #912]!	; 0x390

00010cc8 <exit@plt>:
   10cc8:	add	ip, pc, #0, 12
   10ccc:	add	ip, ip, #73728	; 0x12000
   10cd0:	ldr	pc, [ip, #904]!	; 0x388

00010cd4 <fprintf@plt>:
   10cd4:	add	ip, pc, #0, 12
   10cd8:	add	ip, ip, #73728	; 0x12000
   10cdc:	ldr	pc, [ip, #896]!	; 0x380

00010ce0 <coda_init@plt>:
   10ce0:	add	ip, pc, #0, 12
   10ce4:	add	ip, ip, #73728	; 0x12000
   10ce8:	ldr	pc, [ip, #888]!	; 0x378

00010cec <ungetc@plt>:
   10cec:	add	ip, pc, #0, 12
   10cf0:	add	ip, ip, #73728	; 0x12000
   10cf4:	ldr	pc, [ip, #880]!	; 0x370

00010cf8 <coda_set_option_perform_conversions@plt>:
   10cf8:	add	ip, pc, #0, 12
   10cfc:	add	ip, ip, #73728	; 0x12000
   10d00:	ldr	pc, [ip, #872]!	; 0x368

00010d04 <putchar@plt>:
   10d04:	add	ip, pc, #0, 12
   10d08:	add	ip, ip, #73728	; 0x12000
   10d0c:	ldr	pc, [ip, #864]!	; 0x360

00010d10 <coda_close@plt>:
   10d10:	add	ip, pc, #0, 12
   10d14:	add	ip, ip, #73728	; 0x12000
   10d18:	ldr	pc, [ip, #856]!	; 0x358

00010d1c <coda_errno_to_string@plt>:
   10d1c:	add	ip, pc, #0, 12
   10d20:	add	ip, ip, #73728	; 0x12000
   10d24:	ldr	pc, [ip, #848]!	; 0x350

00010d28 <coda_get_libcoda_version@plt>:
   10d28:	add	ip, pc, #0, 12
   10d2c:	add	ip, ip, #73728	; 0x12000
   10d30:	ldr	pc, [ip, #840]!	; 0x348

00010d34 <coda_get_errno@plt>:
   10d34:	add	ip, pc, #0, 12
   10d38:	add	ip, ip, #73728	; 0x12000
   10d3c:	ldr	pc, [ip, #832]!	; 0x340

00010d40 <abort@plt>:
   10d40:	add	ip, pc, #0, 12
   10d44:	add	ip, ip, #73728	; 0x12000
   10d48:	ldr	pc, [ip, #824]!	; 0x338

00010d4c <__assert_fail@plt>:
   10d4c:	add	ip, pc, #0, 12
   10d50:	add	ip, ip, #73728	; 0x12000
   10d54:	ldr	pc, [ip, #816]!	; 0x330

Disassembly of section .text:

00010d58 <_start@@Base>:
   10d58:	mov	fp, #0
   10d5c:	mov	lr, #0
   10d60:	pop	{r1}		; (ldr r1, [sp], #4)
   10d64:	mov	r2, sp
   10d68:	push	{r2}		; (str r2, [sp, #-4]!)
   10d6c:	push	{r0}		; (str r0, [sp, #-4]!)
   10d70:	ldr	ip, [pc, #16]	; 10d88 <_start@@Base+0x30>
   10d74:	push	{ip}		; (str ip, [sp, #-4]!)
   10d78:	ldr	r0, [pc, #12]	; 10d8c <_start@@Base+0x34>
   10d7c:	ldr	r3, [pc, #12]	; 10d90 <_start@@Base+0x38>
   10d80:	bl	10cb0 <__libc_start_main@plt>
   10d84:	bl	10d40 <abort@plt>
   10d88:	andeq	r1, r1, ip, lsl #20
   10d8c:	andeq	r1, r1, r8, ror r3
   10d90:	andeq	r1, r1, ip, lsr #19
   10d94:	ldr	r3, [pc, #20]	; 10db0 <_start@@Base+0x58>
   10d98:	ldr	r2, [pc, #20]	; 10db4 <_start@@Base+0x5c>
   10d9c:	add	r3, pc, r3
   10da0:	ldr	r2, [r3, r2]
   10da4:	cmp	r2, #0
   10da8:	bxeq	lr
   10dac:	b	10cbc <__gmon_start__@plt>
   10db0:	andeq	r2, r1, ip, asr r2
   10db4:	andeq	r0, r0, r8, lsl #1
   10db8:	ldr	r3, [pc, #28]	; 10ddc <_start@@Base+0x84>
   10dbc:	ldr	r0, [pc, #28]	; 10de0 <_start@@Base+0x88>
   10dc0:	sub	r3, r3, r0
   10dc4:	cmp	r3, #6
   10dc8:	bxls	lr
   10dcc:	ldr	r3, [pc, #16]	; 10de4 <_start@@Base+0x8c>
   10dd0:	cmp	r3, #0
   10dd4:	bxeq	lr
   10dd8:	bx	r3
   10ddc:	muleq	r2, r7, r0
   10de0:	muleq	r2, r4, r0
   10de4:	andeq	r0, r0, r0
   10de8:	ldr	r1, [pc, #36]	; 10e14 <_start@@Base+0xbc>
   10dec:	ldr	r0, [pc, #36]	; 10e18 <_start@@Base+0xc0>
   10df0:	sub	r1, r1, r0
   10df4:	asr	r1, r1, #2
   10df8:	add	r1, r1, r1, lsr #31
   10dfc:	asrs	r1, r1, #1
   10e00:	bxeq	lr
   10e04:	ldr	r3, [pc, #16]	; 10e1c <_start@@Base+0xc4>
   10e08:	cmp	r3, #0
   10e0c:	bxeq	lr
   10e10:	bx	r3
   10e14:	muleq	r2, r4, r0
   10e18:	muleq	r2, r4, r0
   10e1c:	andeq	r0, r0, r0
   10e20:	push	{r4, lr}
   10e24:	ldr	r4, [pc, #24]	; 10e44 <_start@@Base+0xec>
   10e28:	ldrb	r3, [r4]
   10e2c:	cmp	r3, #0
   10e30:	popne	{r4, pc}
   10e34:	bl	10db8 <_start@@Base+0x60>
   10e38:	mov	r3, #1
   10e3c:	strb	r3, [r4]
   10e40:	pop	{r4, pc}
   10e44:	andeq	r3, r2, r4, lsr #1
   10e48:	ldr	r0, [pc, #40]	; 10e78 <_start@@Base+0x120>
   10e4c:	ldr	r3, [r0]
   10e50:	cmp	r3, #0
   10e54:	bne	10e5c <_start@@Base+0x104>
   10e58:	b	10de8 <_start@@Base+0x90>
   10e5c:	ldr	r3, [pc, #24]	; 10e7c <_start@@Base+0x124>
   10e60:	cmp	r3, #0
   10e64:	beq	10e58 <_start@@Base+0x100>
   10e68:	push	{r4, lr}
   10e6c:	blx	r3
   10e70:	pop	{r4, lr}
   10e74:	b	10de8 <_start@@Base+0x90>
   10e78:	strdeq	r2, [r2], -ip
   10e7c:	andeq	r0, r0, r0
   10e80:	push	{fp, lr}
   10e84:	add	fp, sp, #4
   10e88:	bl	10d28 <coda_get_libcoda_version@plt>
   10e8c:	mov	r3, r0
   10e90:	mov	r1, r3
   10e94:	ldr	r0, [pc, #24]	; 10eb4 <_start@@Base+0x15c>
   10e98:	bl	10bfc <printf@plt>
   10e9c:	ldr	r0, [pc, #20]	; 10eb8 <_start@@Base+0x160>
   10ea0:	bl	10c98 <puts@plt>
   10ea4:	mov	r0, #10
   10ea8:	bl	10d04 <putchar@plt>
   10eac:	nop			; (mov r0, r0)
   10eb0:	pop	{fp, pc}
   10eb4:	andeq	r1, r1, ip, lsl sl
   10eb8:	andeq	r1, r1, r4, lsr sl
   10ebc:	push	{fp, lr}
   10ec0:	add	fp, sp, #4
   10ec4:	ldr	r0, [pc, #264]	; 10fd4 <_start@@Base+0x27c>
   10ec8:	bl	10c98 <puts@plt>
   10ecc:	ldr	r0, [pc, #260]	; 10fd8 <_start@@Base+0x280>
   10ed0:	bl	10c98 <puts@plt>
   10ed4:	ldr	r0, [pc, #256]	; 10fdc <_start@@Base+0x284>
   10ed8:	bl	10c98 <puts@plt>
   10edc:	ldr	r0, [pc, #252]	; 10fe0 <_start@@Base+0x288>
   10ee0:	bl	10c98 <puts@plt>
   10ee4:	ldr	r0, [pc, #248]	; 10fe4 <_start@@Base+0x28c>
   10ee8:	bl	10c98 <puts@plt>
   10eec:	ldr	r0, [pc, #244]	; 10fe8 <_start@@Base+0x290>
   10ef0:	bl	10c98 <puts@plt>
   10ef4:	ldr	r0, [pc, #240]	; 10fec <_start@@Base+0x294>
   10ef8:	bl	10c98 <puts@plt>
   10efc:	ldr	r0, [pc, #236]	; 10ff0 <_start@@Base+0x298>
   10f00:	bl	10c98 <puts@plt>
   10f04:	ldr	r0, [pc, #232]	; 10ff4 <_start@@Base+0x29c>
   10f08:	bl	10c98 <puts@plt>
   10f0c:	ldr	r0, [pc, #228]	; 10ff8 <_start@@Base+0x2a0>
   10f10:	bl	10c98 <puts@plt>
   10f14:	ldr	r0, [pc, #224]	; 10ffc <_start@@Base+0x2a4>
   10f18:	bl	10c98 <puts@plt>
   10f1c:	ldr	r0, [pc, #220]	; 11000 <_start@@Base+0x2a8>
   10f20:	bl	10c98 <puts@plt>
   10f24:	ldr	r0, [pc, #216]	; 11004 <_start@@Base+0x2ac>
   10f28:	bl	10c98 <puts@plt>
   10f2c:	ldr	r0, [pc, #212]	; 11008 <_start@@Base+0x2b0>
   10f30:	bl	10c98 <puts@plt>
   10f34:	ldr	r0, [pc, #208]	; 1100c <_start@@Base+0x2b4>
   10f38:	bl	10c98 <puts@plt>
   10f3c:	mov	r0, #10
   10f40:	bl	10d04 <putchar@plt>
   10f44:	ldr	r0, [pc, #196]	; 11010 <_start@@Base+0x2b8>
   10f48:	bl	10c98 <puts@plt>
   10f4c:	ldr	r0, [pc, #192]	; 11014 <_start@@Base+0x2bc>
   10f50:	bl	10c98 <puts@plt>
   10f54:	mov	r0, #10
   10f58:	bl	10d04 <putchar@plt>
   10f5c:	ldr	r0, [pc, #180]	; 11018 <_start@@Base+0x2c0>
   10f60:	bl	10c98 <puts@plt>
   10f64:	ldr	r0, [pc, #176]	; 1101c <_start@@Base+0x2c4>
   10f68:	bl	10c98 <puts@plt>
   10f6c:	mov	r0, #10
   10f70:	bl	10d04 <putchar@plt>
   10f74:	ldr	r0, [pc, #164]	; 11020 <_start@@Base+0x2c8>
   10f78:	bl	10c98 <puts@plt>
   10f7c:	ldr	r0, [pc, #160]	; 11024 <_start@@Base+0x2cc>
   10f80:	bl	10c98 <puts@plt>
   10f84:	mov	r0, #10
   10f88:	bl	10d04 <putchar@plt>
   10f8c:	ldr	r0, [pc, #148]	; 11028 <_start@@Base+0x2d0>
   10f90:	bl	10c98 <puts@plt>
   10f94:	ldr	r0, [pc, #144]	; 1102c <_start@@Base+0x2d4>
   10f98:	bl	10c98 <puts@plt>
   10f9c:	ldr	r0, [pc, #140]	; 11030 <_start@@Base+0x2d8>
   10fa0:	bl	10c98 <puts@plt>
   10fa4:	ldr	r0, [pc, #136]	; 11034 <_start@@Base+0x2dc>
   10fa8:	bl	10c98 <puts@plt>
   10fac:	ldr	r0, [pc, #132]	; 11038 <_start@@Base+0x2e0>
   10fb0:	bl	10c98 <puts@plt>
   10fb4:	ldr	r0, [pc, #128]	; 1103c <_start@@Base+0x2e4>
   10fb8:	bl	10c98 <puts@plt>
   10fbc:	ldr	r0, [pc, #124]	; 11040 <_start@@Base+0x2e8>
   10fc0:	bl	10c98 <puts@plt>
   10fc4:	mov	r0, #10
   10fc8:	bl	10d04 <putchar@plt>
   10fcc:	nop			; (mov r0, r0)
   10fd0:	pop	{fp, pc}
   10fd4:	andeq	r1, r1, r4, ror #20
   10fd8:	andeq	r1, r1, ip, ror #20
   10fdc:	andeq	r1, r1, r4, lsr #21
   10fe0:	andeq	r1, r1, ip, ror #21
   10fe4:	andeq	r1, r1, r0, lsl #22
   10fe8:	andeq	r1, r1, r0, lsr #22
   10fec:	andeq	r1, r1, r0, ror fp
   10ff0:			; <UNDEFINED> instruction: 0x00011bb8
   10ff4:	andeq	r1, r1, r4, lsl #24
   10ff8:	andeq	r1, r1, ip, lsl ip
   10ffc:	andeq	r1, r1, ip, asr ip
   11000:	muleq	r1, r4, ip
   11004:			; <UNDEFINED> instruction: 0x00011cb0
   11008:	strdeq	r1, [r1], -r8
   1100c:	andeq	r1, r1, r0, lsl sp
   11010:	andeq	r1, r1, r0, asr sp
   11014:	andeq	r1, r1, r0, lsr #27
   11018:			; <UNDEFINED> instruction: 0x00011dbc
   1101c:	ldrdeq	r1, [r1], -r8
   11020:	strdeq	r1, [r1], -r8
   11024:	andeq	r1, r1, r4, lsl lr
   11028:	andeq	r1, r1, r8, asr #28
   1102c:	muleq	r1, r8, lr
   11030:	andeq	r1, r1, r4, ror #29
   11034:	andeq	r1, r1, r0, lsl pc
   11038:	andeq	r1, r1, ip, asr pc
   1103c:	andeq	r1, r1, r4, lsr #31
   11040:	andeq	r1, r1, r4, ror #31
   11044:	push	{fp, lr}
   11048:	add	fp, sp, #4
   1104c:	sub	sp, sp, #16
   11050:	str	r0, [fp, #-8]
   11054:	str	r1, [fp, #-12]
   11058:	str	r2, [fp, #-16]
   1105c:	ldr	r1, [fp, #-12]
   11060:	ldr	r0, [pc, #64]	; 110a8 <_start@@Base+0x350>
   11064:	bl	10bfc <printf@plt>
   11068:	ldr	r3, [fp, #-8]
   1106c:	cmp	r3, #0
   11070:	beq	11088 <_start@@Base+0x330>
   11074:	ldr	r0, [pc, #48]	; 110ac <_start@@Base+0x354>
   11078:	bl	10bfc <printf@plt>
   1107c:	ldr	r1, [pc, #44]	; 110b0 <_start@@Base+0x358>
   11080:	ldr	r0, [fp, #-8]
   11084:	bl	10c38 <coda_cursor_print_path@plt>
   11088:	mov	r0, #10
   1108c:	bl	10d04 <putchar@plt>
   11090:	ldr	r3, [pc, #28]	; 110b4 <_start@@Base+0x35c>
   11094:	mov	r2, #1
   11098:	str	r2, [r3]
   1109c:	nop			; (mov r0, r0)
   110a0:	sub	sp, fp, #4
   110a4:	pop	{fp, pc}
   110a8:	andeq	r2, r1, r4, lsr #32
   110ac:	andeq	r2, r1, r0, lsr r0
   110b0:	strdeq	r0, [r1], -ip
   110b4:	andeq	r3, r2, ip, lsr #1
   110b8:	push	{fp, lr}
   110bc:	add	fp, sp, #4
   110c0:	sub	sp, sp, #56	; 0x38
   110c4:	str	r0, [fp, #-48]	; 0xffffffd0
   110c8:	ldr	r0, [fp, #-48]	; 0xffffffd0
   110cc:	bl	10c98 <puts@plt>
   110d0:	sub	r0, fp, #32
   110d4:	sub	r2, fp, #16
   110d8:	sub	r1, fp, #28
   110dc:	sub	r3, fp, #40	; 0x28
   110e0:	str	r3, [sp, #4]
   110e4:	sub	r3, fp, #36	; 0x24
   110e8:	str	r3, [sp]
   110ec:	mov	r3, r0
   110f0:	ldr	r0, [fp, #-48]	; 0xffffffd0
   110f4:	bl	10c68 <coda_recognize_file@plt>
   110f8:	mov	r3, r0
   110fc:	cmp	r3, #0
   11100:	beq	11144 <_start@@Base+0x3ec>
   11104:	bl	10d34 <coda_get_errno@plt>
   11108:	mov	r3, r0
   1110c:	ldr	r3, [r3]
   11110:	mov	r0, r3
   11114:	bl	10d1c <coda_errno_to_string@plt>
   11118:	mov	r3, r0
   1111c:	mov	r1, r3
   11120:	ldr	r0, [pc, #552]	; 11350 <_start@@Base+0x5f8>
   11124:	bl	10bfc <printf@plt>
   11128:	mov	r1, #0
   1112c:	mov	r0, #0
   11130:	bl	10c08 <coda_set_error@plt>
   11134:	ldr	r3, [pc, #536]	; 11354 <_start@@Base+0x5fc>
   11138:	mov	r2, #1
   1113c:	str	r2, [r3]
   11140:	b	11348 <_start@@Base+0x5f0>
   11144:	ldr	r3, [pc, #524]	; 11358 <_start@@Base+0x600>
   11148:	ldr	r3, [r3]
   1114c:	cmp	r3, #0
   11150:	beq	11184 <_start@@Base+0x42c>
   11154:	ldr	r3, [fp, #-32]	; 0xffffffe0
   11158:	cmp	r3, #0
   1115c:	beq	1116c <_start@@Base+0x414>
   11160:	ldr	r3, [fp, #-36]	; 0xffffffdc
   11164:	cmp	r3, #0
   11168:	bne	11184 <_start@@Base+0x42c>
   1116c:	ldr	r0, [pc, #488]	; 1135c <_start@@Base+0x604>
   11170:	bl	10c98 <puts@plt>
   11174:	ldr	r3, [pc, #472]	; 11354 <_start@@Base+0x5fc>
   11178:	mov	r2, #1
   1117c:	str	r2, [r3]
   11180:	b	11348 <_start@@Base+0x5f0>
   11184:	ldr	r3, [pc, #468]	; 11360 <_start@@Base+0x608>
   11188:	ldr	r3, [r3]
   1118c:	cmp	r3, #0
   11190:	beq	111e4 <_start@@Base+0x48c>
   11194:	ldr	r3, [fp, #-16]
   11198:	mov	r0, r3
   1119c:	bl	10c80 <coda_type_get_format_name@plt>
   111a0:	mov	r3, r0
   111a4:	mov	r1, r3
   111a8:	ldr	r0, [pc, #436]	; 11364 <_start@@Base+0x60c>
   111ac:	bl	10bfc <printf@plt>
   111b0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   111b4:	cmp	r3, #0
   111b8:	beq	111dc <_start@@Base+0x484>
   111bc:	ldr	r3, [fp, #-36]	; 0xffffffdc
   111c0:	cmp	r3, #0
   111c4:	beq	111dc <_start@@Base+0x484>
   111c8:	ldr	r1, [fp, #-32]	; 0xffffffe0
   111cc:	ldr	r2, [fp, #-36]	; 0xffffffdc
   111d0:	ldr	r3, [fp, #-40]	; 0xffffffd8
   111d4:	ldr	r0, [pc, #396]	; 11368 <_start@@Base+0x610>
   111d8:	bl	10bfc <printf@plt>
   111dc:	mov	r0, #10
   111e0:	bl	10d04 <putchar@plt>
   111e4:	sub	r3, fp, #12
   111e8:	mov	r1, r3
   111ec:	ldr	r0, [fp, #-48]	; 0xffffffd0
   111f0:	bl	10c14 <coda_open@plt>
   111f4:	str	r0, [fp, #-8]
   111f8:	ldr	r3, [fp, #-8]
   111fc:	cmp	r3, #0
   11200:	beq	1123c <_start@@Base+0x4e4>
   11204:	bl	10d34 <coda_get_errno@plt>
   11208:	mov	r3, r0
   1120c:	ldr	r3, [r3]
   11210:	cmn	r3, #21
   11214:	bne	1123c <_start@@Base+0x4e4>
   11218:	mov	r0, #0
   1121c:	bl	10c2c <coda_set_option_use_mmap@plt>
   11220:	sub	r3, fp, #12
   11224:	mov	r1, r3
   11228:	ldr	r0, [fp, #-48]	; 0xffffffd0
   1122c:	bl	10c14 <coda_open@plt>
   11230:	str	r0, [fp, #-8]
   11234:	mov	r0, #1
   11238:	bl	10c2c <coda_set_option_use_mmap@plt>
   1123c:	ldr	r3, [fp, #-8]
   11240:	cmp	r3, #0
   11244:	beq	1127c <_start@@Base+0x524>
   11248:	bl	10d34 <coda_get_errno@plt>
   1124c:	mov	r3, r0
   11250:	ldr	r3, [r3]
   11254:	mov	r0, r3
   11258:	bl	10d1c <coda_errno_to_string@plt>
   1125c:	mov	r3, r0
   11260:	mov	r1, r3
   11264:	ldr	r0, [pc, #228]	; 11350 <_start@@Base+0x5f8>
   11268:	bl	10bfc <printf@plt>
   1126c:	ldr	r3, [pc, #224]	; 11354 <_start@@Base+0x5fc>
   11270:	mov	r2, #1
   11274:	str	r2, [r3]
   11278:	b	11348 <_start@@Base+0x5f0>
   1127c:	ldr	r0, [fp, #-12]
   11280:	ldr	r3, [pc, #228]	; 1136c <_start@@Base+0x614>
   11284:	ldr	r3, [r3]
   11288:	cmp	r3, #0
   1128c:	moveq	r3, #1
   11290:	movne	r3, #0
   11294:	uxtb	r3, r3
   11298:	mov	r1, r3
   1129c:	mov	r3, #0
   112a0:	ldr	r2, [pc, #200]	; 11370 <_start@@Base+0x618>
   112a4:	bl	10ca4 <coda_product_check@plt>
   112a8:	mov	r3, r0
   112ac:	cmp	r3, #0
   112b0:	beq	112f4 <_start@@Base+0x59c>
   112b4:	bl	10d34 <coda_get_errno@plt>
   112b8:	mov	r3, r0
   112bc:	ldr	r3, [r3]
   112c0:	mov	r0, r3
   112c4:	bl	10d1c <coda_errno_to_string@plt>
   112c8:	mov	r3, r0
   112cc:	mov	r1, r3
   112d0:	ldr	r0, [pc, #120]	; 11350 <_start@@Base+0x5f8>
   112d4:	bl	10bfc <printf@plt>
   112d8:	ldr	r3, [pc, #116]	; 11354 <_start@@Base+0x5fc>
   112dc:	mov	r2, #1
   112e0:	str	r2, [r3]
   112e4:	ldr	r3, [fp, #-12]
   112e8:	mov	r0, r3
   112ec:	bl	10d10 <coda_close@plt>
   112f0:	b	11348 <_start@@Base+0x5f0>
   112f4:	ldr	r3, [fp, #-12]
   112f8:	mov	r0, r3
   112fc:	bl	10d10 <coda_close@plt>
   11300:	mov	r3, r0
   11304:	cmp	r3, #0
   11308:	beq	11340 <_start@@Base+0x5e8>
   1130c:	bl	10d34 <coda_get_errno@plt>
   11310:	mov	r3, r0
   11314:	ldr	r3, [r3]
   11318:	mov	r0, r3
   1131c:	bl	10d1c <coda_errno_to_string@plt>
   11320:	mov	r3, r0
   11324:	mov	r1, r3
   11328:	ldr	r0, [pc, #68]	; 11374 <_start@@Base+0x61c>
   1132c:	bl	10bfc <printf@plt>
   11330:	ldr	r3, [pc, #28]	; 11354 <_start@@Base+0x5fc>
   11334:	mov	r2, #1
   11338:	str	r2, [r3]
   1133c:	b	11348 <_start@@Base+0x5f0>
   11340:	mov	r0, #10
   11344:	bl	10d04 <putchar@plt>
   11348:	sub	sp, fp, #4
   1134c:	pop	{fp, pc}
   11350:	andeq	r2, r1, r8, lsr r0
   11354:	andeq	r3, r2, ip, lsr #1
   11358:	andeq	r3, r2, r8, lsr #1
   1135c:	andeq	r2, r1, r8, asr #32
   11360:	strheq	r3, [r2], -r0
   11364:	andeq	r2, r1, r4, ror r0
   11368:	andeq	r2, r1, ip, lsl #1
   1136c:	strheq	r3, [r2], -r4
   11370:	andeq	r1, r1, r4, asr #32
   11374:	muleq	r1, r8, r0

00011378 <main@@Base>:
   11378:	push	{r4, fp, lr}
   1137c:	add	fp, sp, #8
   11380:	sub	sp, sp, #1024	; 0x400
   11384:	sub	sp, sp, #12
   11388:	str	r0, [fp, #-1040]	; 0xfffffbf0
   1138c:	str	r1, [fp, #-1044]	; 0xfffffbec
   11390:	mov	r3, #0
   11394:	str	r3, [fp, #-16]
   11398:	ldr	r3, [pc, #1448]	; 11948 <main@@Base+0x5d0>
   1139c:	mov	r2, #0
   113a0:	str	r2, [r3]
   113a4:	ldr	r3, [pc, #1440]	; 1194c <main@@Base+0x5d4>
   113a8:	mov	r2, #0
   113ac:	str	r2, [r3]
   113b0:	mov	r3, #1
   113b4:	str	r3, [fp, #-20]	; 0xffffffec
   113b8:	ldr	r3, [pc, #1424]	; 11950 <main@@Base+0x5d8>
   113bc:	mov	r2, #0
   113c0:	str	r2, [r3]
   113c4:	ldr	r3, [fp, #-1040]	; 0xfffffbf0
   113c8:	cmp	r3, #1
   113cc:	beq	11418 <main@@Base+0xa0>
   113d0:	ldr	r3, [fp, #-1044]	; 0xfffffbec
   113d4:	add	r3, r3, #4
   113d8:	ldr	r3, [r3]
   113dc:	ldr	r1, [pc, #1392]	; 11954 <main@@Base+0x5dc>
   113e0:	mov	r0, r3
   113e4:	bl	10bf0 <strcmp@plt>
   113e8:	mov	r3, r0
   113ec:	cmp	r3, #0
   113f0:	beq	11418 <main@@Base+0xa0>
   113f4:	ldr	r3, [fp, #-1044]	; 0xfffffbec
   113f8:	add	r3, r3, #4
   113fc:	ldr	r3, [r3]
   11400:	ldr	r1, [pc, #1360]	; 11958 <main@@Base+0x5e0>
   11404:	mov	r0, r3
   11408:	bl	10bf0 <strcmp@plt>
   1140c:	mov	r3, r0
   11410:	cmp	r3, #0
   11414:	bne	11424 <main@@Base+0xac>
   11418:	bl	10ebc <_start@@Base+0x164>
   1141c:	mov	r0, #0
   11420:	bl	10cc8 <exit@plt>
   11424:	ldr	r3, [fp, #-1044]	; 0xfffffbec
   11428:	add	r3, r3, #4
   1142c:	ldr	r3, [r3]
   11430:	ldr	r1, [pc, #1316]	; 1195c <main@@Base+0x5e4>
   11434:	mov	r0, r3
   11438:	bl	10bf0 <strcmp@plt>
   1143c:	mov	r3, r0
   11440:	cmp	r3, #0
   11444:	beq	1146c <main@@Base+0xf4>
   11448:	ldr	r3, [fp, #-1044]	; 0xfffffbec
   1144c:	add	r3, r3, #4
   11450:	ldr	r3, [r3]
   11454:	ldr	r1, [pc, #1284]	; 11960 <main@@Base+0x5e8>
   11458:	mov	r0, r3
   1145c:	bl	10bf0 <strcmp@plt>
   11460:	mov	r3, r0
   11464:	cmp	r3, #0
   11468:	bne	11478 <main@@Base+0x100>
   1146c:	bl	10e80 <_start@@Base+0x128>
   11470:	mov	r0, #0
   11474:	bl	10cc8 <exit@plt>
   11478:	mov	r3, #1
   1147c:	str	r3, [fp, #-24]	; 0xffffffe8
   11480:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11484:	add	r2, r3, #1
   11488:	ldr	r3, [fp, #-1040]	; 0xfffffbf0
   1148c:	cmp	r2, r3
   11490:	bge	114f0 <main@@Base+0x178>
   11494:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11498:	lsl	r3, r3, #2
   1149c:	ldr	r2, [fp, #-1044]	; 0xfffffbec
   114a0:	add	r3, r2, r3
   114a4:	ldr	r3, [r3]
   114a8:	ldr	r1, [pc, #1204]	; 11964 <main@@Base+0x5ec>
   114ac:	mov	r0, r3
   114b0:	bl	10bf0 <strcmp@plt>
   114b4:	mov	r3, r0
   114b8:	cmp	r3, #0
   114bc:	bne	114f0 <main@@Base+0x178>
   114c0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   114c4:	add	r3, r3, #1
   114c8:	lsl	r3, r3, #2
   114cc:	ldr	r2, [fp, #-1044]	; 0xfffffbec
   114d0:	add	r3, r2, r3
   114d4:	ldr	r3, [r3]
   114d8:	mov	r0, r3
   114dc:	bl	10c5c <coda_set_definition_path@plt>
   114e0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   114e4:	add	r3, r3, #2
   114e8:	str	r3, [fp, #-24]	; 0xffffffe8
   114ec:	b	11554 <main@@Base+0x1dc>
   114f0:	ldr	r3, [pc, #1136]	; 11968 <main@@Base+0x5f0>
   114f4:	str	r3, [fp, #-32]	; 0xffffffe0
   114f8:	ldr	r3, [fp, #-1044]	; 0xfffffbec
   114fc:	ldr	r3, [r3]
   11500:	ldr	r2, [fp, #-32]	; 0xffffffe0
   11504:	mov	r1, #0
   11508:	mov	r0, r3
   1150c:	bl	10c44 <coda_set_definition_path_conditional@plt>
   11510:	mov	r3, r0
   11514:	cmp	r3, #0
   11518:	beq	11764 <main@@Base+0x3ec>
   1151c:	ldr	r3, [pc, #1096]	; 1196c <main@@Base+0x5f4>
   11520:	ldr	r4, [r3]
   11524:	bl	10d34 <coda_get_errno@plt>
   11528:	mov	r3, r0
   1152c:	ldr	r3, [r3]
   11530:	mov	r0, r3
   11534:	bl	10d1c <coda_errno_to_string@plt>
   11538:	mov	r3, r0
   1153c:	mov	r2, r3
   11540:	ldr	r1, [pc, #1064]	; 11970 <main@@Base+0x5f8>
   11544:	mov	r0, r4
   11548:	bl	10cd4 <fprintf@plt>
   1154c:	mov	r0, #1
   11550:	bl	10cc8 <exit@plt>
   11554:	b	11764 <main@@Base+0x3ec>
   11558:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1155c:	lsl	r3, r3, #2
   11560:	ldr	r2, [fp, #-1044]	; 0xfffffbec
   11564:	add	r3, r2, r3
   11568:	ldr	r3, [r3]
   1156c:	ldr	r1, [pc, #1024]	; 11974 <main@@Base+0x5fc>
   11570:	mov	r0, r3
   11574:	bl	10bf0 <strcmp@plt>
   11578:	mov	r3, r0
   1157c:	cmp	r3, #0
   11580:	beq	115b0 <main@@Base+0x238>
   11584:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11588:	lsl	r3, r3, #2
   1158c:	ldr	r2, [fp, #-1044]	; 0xfffffbec
   11590:	add	r3, r2, r3
   11594:	ldr	r3, [r3]
   11598:	ldr	r1, [pc, #984]	; 11978 <main@@Base+0x600>
   1159c:	mov	r0, r3
   115a0:	bl	10bf0 <strcmp@plt>
   115a4:	mov	r3, r0
   115a8:	cmp	r3, #0
   115ac:	bne	115c0 <main@@Base+0x248>
   115b0:	ldr	r3, [pc, #912]	; 11948 <main@@Base+0x5d0>
   115b4:	mov	r2, #1
   115b8:	str	r2, [r3]
   115bc:	b	11758 <main@@Base+0x3e0>
   115c0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   115c4:	lsl	r3, r3, #2
   115c8:	ldr	r2, [fp, #-1044]	; 0xfffffbec
   115cc:	add	r3, r2, r3
   115d0:	ldr	r3, [r3]
   115d4:	ldr	r1, [pc, #928]	; 1197c <main@@Base+0x604>
   115d8:	mov	r0, r3
   115dc:	bl	10bf0 <strcmp@plt>
   115e0:	mov	r3, r0
   115e4:	cmp	r3, #0
   115e8:	beq	11618 <main@@Base+0x2a0>
   115ec:	ldr	r3, [fp, #-24]	; 0xffffffe8
   115f0:	lsl	r3, r3, #2
   115f4:	ldr	r2, [fp, #-1044]	; 0xfffffbec
   115f8:	add	r3, r2, r3
   115fc:	ldr	r3, [r3]
   11600:	ldr	r1, [pc, #888]	; 11980 <main@@Base+0x608>
   11604:	mov	r0, r3
   11608:	bl	10bf0 <strcmp@plt>
   1160c:	mov	r3, r0
   11610:	cmp	r3, #0
   11614:	bne	11628 <main@@Base+0x2b0>
   11618:	ldr	r3, [pc, #812]	; 1194c <main@@Base+0x5d4>
   1161c:	mov	r2, #1
   11620:	str	r2, [r3]
   11624:	b	11758 <main@@Base+0x3e0>
   11628:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1162c:	lsl	r3, r3, #2
   11630:	ldr	r2, [fp, #-1044]	; 0xfffffbec
   11634:	add	r3, r2, r3
   11638:	ldr	r3, [r3]
   1163c:	ldr	r1, [pc, #832]	; 11984 <main@@Base+0x60c>
   11640:	mov	r0, r3
   11644:	bl	10bf0 <strcmp@plt>
   11648:	mov	r3, r0
   1164c:	cmp	r3, #0
   11650:	beq	11680 <main@@Base+0x308>
   11654:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11658:	lsl	r3, r3, #2
   1165c:	ldr	r2, [fp, #-1044]	; 0xfffffbec
   11660:	add	r3, r2, r3
   11664:	ldr	r3, [r3]
   11668:	ldr	r1, [pc, #792]	; 11988 <main@@Base+0x610>
   1166c:	mov	r0, r3
   11670:	bl	10bf0 <strcmp@plt>
   11674:	mov	r3, r0
   11678:	cmp	r3, #0
   1167c:	bne	11690 <main@@Base+0x318>
   11680:	ldr	r3, [pc, #712]	; 11950 <main@@Base+0x5d8>
   11684:	mov	r2, #1
   11688:	str	r2, [r3]
   1168c:	b	11758 <main@@Base+0x3e0>
   11690:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11694:	lsl	r3, r3, #2
   11698:	ldr	r2, [fp, #-1044]	; 0xfffffbec
   1169c:	add	r3, r2, r3
   116a0:	ldr	r3, [r3]
   116a4:	ldr	r1, [pc, #736]	; 1198c <main@@Base+0x614>
   116a8:	mov	r0, r3
   116ac:	bl	10bf0 <strcmp@plt>
   116b0:	mov	r3, r0
   116b4:	cmp	r3, #0
   116b8:	bne	116c8 <main@@Base+0x350>
   116bc:	mov	r3, #0
   116c0:	str	r3, [fp, #-20]	; 0xffffffec
   116c4:	b	11758 <main@@Base+0x3e0>
   116c8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   116cc:	lsl	r3, r3, #2
   116d0:	ldr	r2, [fp, #-1044]	; 0xfffffbec
   116d4:	add	r3, r2, r3
   116d8:	ldr	r3, [r3]
   116dc:	ldr	r1, [pc, #684]	; 11990 <main@@Base+0x618>
   116e0:	mov	r0, r3
   116e4:	bl	10bf0 <strcmp@plt>
   116e8:	mov	r3, r0
   116ec:	cmp	r3, #0
   116f0:	bne	11714 <main@@Base+0x39c>
   116f4:	ldr	r3, [fp, #-1040]	; 0xfffffbf0
   116f8:	sub	r2, r3, #1
   116fc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11700:	cmp	r2, r3
   11704:	bne	11714 <main@@Base+0x39c>
   11708:	mov	r3, #1
   1170c:	str	r3, [fp, #-16]
   11710:	b	1177c <main@@Base+0x404>
   11714:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11718:	lsl	r3, r3, #2
   1171c:	ldr	r2, [fp, #-1044]	; 0xfffffbec
   11720:	add	r3, r2, r3
   11724:	ldr	r3, [r3]
   11728:	ldrb	r3, [r3]
   1172c:	cmp	r3, #45	; 0x2d
   11730:	bne	11778 <main@@Base+0x400>
   11734:	ldr	r3, [pc, #560]	; 1196c <main@@Base+0x5f4>
   11738:	ldr	r3, [r3]
   1173c:	mov	r2, #25
   11740:	mov	r1, #1
   11744:	ldr	r0, [pc, #584]	; 11994 <main@@Base+0x61c>
   11748:	bl	10c74 <fwrite@plt>
   1174c:	bl	10ebc <_start@@Base+0x164>
   11750:	mov	r0, #1
   11754:	bl	10cc8 <exit@plt>
   11758:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1175c:	add	r3, r3, #1
   11760:	str	r3, [fp, #-24]	; 0xffffffe8
   11764:	ldr	r2, [fp, #-24]	; 0xffffffe8
   11768:	ldr	r3, [fp, #-1040]	; 0xfffffbf0
   1176c:	cmp	r2, r3
   11770:	blt	11558 <main@@Base+0x1e0>
   11774:	b	1177c <main@@Base+0x404>
   11778:	nop			; (mov r0, r0)
   1177c:	bl	10ce0 <coda_init@plt>
   11780:	mov	r3, r0
   11784:	cmp	r3, #0
   11788:	beq	117c4 <main@@Base+0x44c>
   1178c:	ldr	r3, [pc, #472]	; 1196c <main@@Base+0x5f4>
   11790:	ldr	r4, [r3]
   11794:	bl	10d34 <coda_get_errno@plt>
   11798:	mov	r3, r0
   1179c:	ldr	r3, [r3]
   117a0:	mov	r0, r3
   117a4:	bl	10d1c <coda_errno_to_string@plt>
   117a8:	mov	r3, r0
   117ac:	mov	r2, r3
   117b0:	ldr	r1, [pc, #440]	; 11970 <main@@Base+0x5f8>
   117b4:	mov	r0, r4
   117b8:	bl	10cd4 <fprintf@plt>
   117bc:	mov	r0, #1
   117c0:	bl	10cc8 <exit@plt>
   117c4:	mov	r0, #0
   117c8:	bl	10be4 <coda_set_option_perform_boundary_checks@plt>
   117cc:	mov	r0, #0
   117d0:	bl	10cf8 <coda_set_option_perform_conversions@plt>
   117d4:	ldr	r0, [fp, #-20]	; 0xffffffec
   117d8:	bl	10c2c <coda_set_option_use_mmap@plt>
   117dc:	ldr	r3, [fp, #-16]
   117e0:	cmp	r3, #0
   117e4:	beq	1190c <main@@Base+0x594>
   117e8:	mov	r3, #0
   117ec:	str	r3, [fp, #-28]	; 0xffffffe4
   117f0:	bl	10c50 <getchar@plt>
   117f4:	mov	r3, r0
   117f8:	strb	r3, [fp, #-33]	; 0xffffffdf
   117fc:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   11800:	cmp	r3, #13
   11804:	bne	11838 <main@@Base+0x4c0>
   11808:	bl	10c50 <getchar@plt>
   1180c:	mov	r3, r0
   11810:	strb	r3, [fp, #-34]	; 0xffffffde
   11814:	ldrb	r3, [fp, #-34]	; 0xffffffde
   11818:	cmp	r3, #10
   1181c:	beq	11838 <main@@Base+0x4c0>
   11820:	ldrb	r2, [fp, #-34]	; 0xffffffde
   11824:	ldr	r3, [pc, #364]	; 11998 <main@@Base+0x620>
   11828:	ldr	r3, [r3]
   1182c:	mov	r1, r3
   11830:	mov	r0, r2
   11834:	bl	10cec <ungetc@plt>
   11838:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   1183c:	cmp	r3, #10
   11840:	beq	11850 <main@@Base+0x4d8>
   11844:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   11848:	cmp	r3, #13
   1184c:	bne	1187c <main@@Base+0x504>
   11850:	sub	r2, fp, #1024	; 0x400
   11854:	sub	r2, r2, #12
   11858:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1185c:	add	r3, r2, r3
   11860:	mov	r2, #0
   11864:	strb	r2, [r3]
   11868:	nop			; (mov r0, r0)
   1186c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   11870:	cmp	r3, #0
   11874:	ble	117e8 <main@@Base+0x470>
   11878:	b	118c0 <main@@Base+0x548>
   1187c:	sub	r2, fp, #1024	; 0x400
   11880:	sub	r2, r2, #12
   11884:	ldr	r3, [fp, #-28]	; 0xffffffe4
   11888:	add	r3, r2, r3
   1188c:	ldrb	r2, [fp, #-33]	; 0xffffffdf
   11890:	strb	r2, [r3]
   11894:	ldr	r3, [fp, #-28]	; 0xffffffe4
   11898:	add	r3, r3, #1
   1189c:	str	r3, [fp, #-28]	; 0xffffffe4
   118a0:	ldr	r3, [fp, #-28]	; 0xffffffe4
   118a4:	cmp	r3, #1000	; 0x3e8
   118a8:	blt	117f0 <main@@Base+0x478>
   118ac:	ldr	r3, [pc, #232]	; 1199c <main@@Base+0x624>
   118b0:	mov	r2, #316	; 0x13c
   118b4:	ldr	r1, [pc, #228]	; 119a0 <main@@Base+0x628>
   118b8:	ldr	r0, [pc, #228]	; 119a4 <main@@Base+0x62c>
   118bc:	bl	10d4c <__assert_fail@plt>
   118c0:	sub	r3, fp, #1024	; 0x400
   118c4:	sub	r3, r3, #12
   118c8:	mov	r0, r3
   118cc:	bl	110b8 <_start@@Base+0x360>
   118d0:	mov	r0, #0
   118d4:	bl	10c20 <fflush@plt>
   118d8:	b	117e8 <main@@Base+0x470>
   118dc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   118e0:	lsl	r3, r3, #2
   118e4:	ldr	r2, [fp, #-1044]	; 0xfffffbec
   118e8:	add	r3, r2, r3
   118ec:	ldr	r3, [r3]
   118f0:	mov	r0, r3
   118f4:	bl	110b8 <_start@@Base+0x360>
   118f8:	mov	r0, #0
   118fc:	bl	10c20 <fflush@plt>
   11900:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11904:	add	r3, r3, #1
   11908:	str	r3, [fp, #-24]	; 0xffffffe8
   1190c:	ldr	r2, [fp, #-24]	; 0xffffffe8
   11910:	ldr	r3, [fp, #-1040]	; 0xfffffbf0
   11914:	cmp	r2, r3
   11918:	blt	118dc <main@@Base+0x564>
   1191c:	bl	10c8c <coda_done@plt>
   11920:	ldr	r3, [pc, #128]	; 119a8 <main@@Base+0x630>
   11924:	ldr	r3, [r3]
   11928:	cmp	r3, #0
   1192c:	beq	11938 <main@@Base+0x5c0>
   11930:	mov	r0, #1
   11934:	bl	10cc8 <exit@plt>
   11938:	mov	r3, #0
   1193c:	mov	r0, r3
   11940:	sub	sp, fp, #8
   11944:	pop	{r4, fp, pc}
   11948:	strheq	r3, [r2], -r0
   1194c:	strheq	r3, [r2], -r4
   11950:	andeq	r3, r2, r8, lsr #1
   11954:	andeq	r2, r1, r8, lsr #1
   11958:	andeq	r2, r1, ip, lsr #1
   1195c:	strheq	r2, [r1], -r4
   11960:	strheq	r2, [r1], -r8
   11964:	andeq	r2, r1, r4, asr #1
   11968:	andeq	r2, r1, r8, asr #1
   1196c:	muleq	r2, r8, r0
   11970:	andeq	r2, r1, r4, ror #1
   11974:	strdeq	r2, [r1], -r0
   11978:	strdeq	r2, [r1], -r4
   1197c:	andeq	r2, r1, r0, lsl #2
   11980:	andeq	r2, r1, r4, lsl #2
   11984:	andeq	r2, r1, ip, lsl #2
   11988:	andeq	r2, r1, r0, lsl r1
   1198c:	andeq	r2, r1, r0, lsr #2
   11990:	andeq	r2, r1, ip, lsr #2
   11994:	andeq	r2, r1, r0, lsr r1
   11998:	andeq	r3, r2, r0, lsr #1
   1199c:	andeq	r2, r1, r8, lsr #3
   119a0:	andeq	r2, r1, ip, asr #2
   119a4:	muleq	r1, ip, r1
   119a8:	andeq	r3, r2, ip, lsr #1

000119ac <__libc_csu_init@@Base>:
   119ac:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   119b0:	mov	r7, r0
   119b4:	ldr	r6, [pc, #72]	; 11a04 <__libc_csu_init@@Base+0x58>
   119b8:	ldr	r5, [pc, #72]	; 11a08 <__libc_csu_init@@Base+0x5c>
   119bc:	add	r6, pc, r6
   119c0:	add	r5, pc, r5
   119c4:	sub	r6, r6, r5
   119c8:	mov	r8, r1
   119cc:	mov	r9, r2
   119d0:	bl	10bc4 <coda_set_option_perform_boundary_checks@plt-0x20>
   119d4:	asrs	r6, r6, #2
   119d8:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   119dc:	mov	r4, #0
   119e0:	add	r4, r4, #1
   119e4:	ldr	r3, [r5], #4
   119e8:	mov	r2, r9
   119ec:	mov	r1, r8
   119f0:	mov	r0, r7
   119f4:	blx	r3
   119f8:	cmp	r6, r4
   119fc:	bne	119e0 <__libc_csu_init@@Base+0x34>
   11a00:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   11a04:	andeq	r1, r1, r4, lsr r5
   11a08:	andeq	r1, r1, ip, lsr #10

00011a0c <__libc_csu_fini@@Base>:
   11a0c:	bx	lr

Disassembly of section .fini:

00011a10 <.fini>:
   11a10:	push	{r3, lr}
   11a14:	pop	{r3, pc}
