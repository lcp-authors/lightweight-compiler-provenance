
../compcert-repos/stcorp-coda-3a25f25/CMakeFiles/codafind.dir/tools/codafind/codafind.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <print_version>:
   0:	str	fp, [sp, #-8]!
   4:	str	lr, [sp, #4]
   8:	add	fp, sp, #4
   c:	bl	0 <coda_get_libcoda_version>
  10:	mov	r3, r0
  14:	mov	r1, r3
  18:	movw	r0, #0
  1c:	movt	r0, #0
  20:	bl	0 <printf>
  24:	movw	r0, #0
  28:	movt	r0, #0
  2c:	bl	0 <puts>
  30:	mov	r0, #10
  34:	bl	0 <putchar>
  38:	nop	{0}
  3c:	sub	sp, fp, #4
  40:	ldr	fp, [sp]
  44:	add	sp, sp, #4
  48:	pop	{pc}		; (ldr pc, [sp], #4)

0000004c <print_help>:
  4c:	str	fp, [sp, #-8]!
  50:	str	lr, [sp, #4]
  54:	add	fp, sp, #4
  58:	movw	r0, #0
  5c:	movt	r0, #0
  60:	bl	0 <puts>
  64:	movw	r0, #0
  68:	movt	r0, #0
  6c:	bl	0 <puts>
  70:	movw	r0, #0
  74:	movt	r0, #0
  78:	bl	0 <puts>
  7c:	movw	r0, #0
  80:	movt	r0, #0
  84:	bl	0 <puts>
  88:	mov	r0, #10
  8c:	bl	0 <putchar>
  90:	movw	r0, #0
  94:	movt	r0, #0
  98:	bl	0 <puts>
  9c:	movw	r0, #0
  a0:	movt	r0, #0
  a4:	bl	0 <puts>
  a8:	movw	r0, #0
  ac:	movt	r0, #0
  b0:	bl	0 <puts>
  b4:	movw	r0, #0
  b8:	movt	r0, #0
  bc:	bl	0 <puts>
  c0:	movw	r0, #0
  c4:	movt	r0, #0
  c8:	bl	0 <puts>
  cc:	movw	r0, #0
  d0:	movt	r0, #0
  d4:	bl	0 <puts>
  d8:	movw	r0, #0
  dc:	movt	r0, #0
  e0:	bl	0 <puts>
  e4:	movw	r0, #0
  e8:	movt	r0, #0
  ec:	bl	0 <puts>
  f0:	movw	r0, #0
  f4:	movt	r0, #0
  f8:	bl	0 <puts>
  fc:	mov	r0, #10
 100:	bl	0 <putchar>
 104:	movw	r0, #0
 108:	movt	r0, #0
 10c:	bl	0 <puts>
 110:	movw	r0, #0
 114:	movt	r0, #0
 118:	bl	0 <puts>
 11c:	mov	r0, #10
 120:	bl	0 <putchar>
 124:	movw	r0, #0
 128:	movt	r0, #0
 12c:	bl	0 <puts>
 130:	movw	r0, #0
 134:	movt	r0, #0
 138:	bl	0 <puts>
 13c:	mov	r0, #10
 140:	bl	0 <putchar>
 144:	movw	r0, #0
 148:	movt	r0, #0
 14c:	bl	0 <puts>
 150:	movw	r0, #0
 154:	movt	r0, #0
 158:	bl	0 <puts>
 15c:	movw	r0, #0
 160:	movt	r0, #0
 164:	bl	0 <puts>
 168:	movw	r0, #0
 16c:	movt	r0, #0
 170:	bl	0 <puts>
 174:	movw	r0, #0
 178:	movt	r0, #0
 17c:	bl	0 <puts>
 180:	movw	r0, #0
 184:	movt	r0, #0
 188:	bl	0 <puts>
 18c:	movw	r0, #0
 190:	movt	r0, #0
 194:	bl	0 <puts>
 198:	mov	r0, #10
 19c:	bl	0 <putchar>
 1a0:	nop	{0}
 1a4:	sub	sp, fp, #4
 1a8:	ldr	fp, [sp]
 1ac:	add	sp, sp, #4
 1b0:	pop	{pc}		; (ldr pc, [sp], #4)

000001b4 <callback>:
 1b4:	str	fp, [sp, #-8]!
 1b8:	str	lr, [sp, #4]
 1bc:	add	fp, sp, #4
 1c0:	sub	sp, sp, #16
 1c4:	str	r0, [fp, #-8]
 1c8:	str	r1, [fp, #-12]
 1cc:	str	r2, [fp, #-16]
 1d0:	str	r3, [fp, #-20]	; 0xffffffec
 1d4:	ldr	r3, [fp, #-12]
 1d8:	cmp	r3, #0
 1dc:	bne	204 <callback+0x50>
 1e0:	movw	r3, #0
 1e4:	movt	r3, #0
 1e8:	ldr	r0, [r3]
 1ec:	ldr	r3, [fp, #-16]
 1f0:	ldr	r2, [fp, #-8]
 1f4:	movw	r1, #0
 1f8:	movt	r1, #0
 1fc:	bl	0 <fprintf>
 200:	b	318 <callback+0x164>
 204:	ldr	r3, [fp, #-12]
 208:	cmp	r3, #2
 20c:	bne	234 <callback+0x80>
 210:	movw	r3, #0
 214:	movt	r3, #0
 218:	ldr	r3, [r3]
 21c:	ldr	r2, [fp, #-8]
 220:	movw	r1, #0
 224:	movt	r1, #0
 228:	mov	r0, r3
 22c:	bl	0 <fprintf>
 230:	b	318 <callback+0x164>
 234:	ldr	r3, [fp, #-12]
 238:	cmp	r3, #1
 23c:	bne	264 <callback+0xb0>
 240:	movw	r3, #0
 244:	movt	r3, #0
 248:	ldr	r0, [r3]
 24c:	ldr	r3, [fp, #-16]
 250:	ldr	r2, [fp, #-8]
 254:	movw	r1, #0
 258:	movt	r1, #0
 25c:	bl	0 <fprintf>
 260:	b	318 <callback+0x164>
 264:	movw	r3, #0
 268:	movt	r3, #0
 26c:	ldr	r3, [r3]
 270:	cmp	r3, #0
 274:	beq	304 <callback+0x150>
 278:	ldr	r1, [fp, #-8]
 27c:	movw	r0, #0
 280:	movt	r0, #0
 284:	bl	0 <printf>
 288:	ldr	r3, [fp, #-12]
 28c:	cmp	r3, #5
 290:	ldrls	pc, [pc, r3, lsl #2]
 294:	b	318 <callback+0x164>
 298:	.word	0x000002b0
 29c:	.word	0x000002b0
 2a0:	.word	0x000002b0
 2a4:	.word	0x000002d0
 2a8:	.word	0x000002f0
 2ac:	.word	0x000002e0
 2b0:	movw	r3, #0
 2b4:	movt	r3, #0
 2b8:	mov	r2, #110	; 0x6e
 2bc:	movw	r1, #0
 2c0:	movt	r1, #0
 2c4:	movw	r0, #0
 2c8:	movt	r0, #0
 2cc:	bl	0 <__assert_fail>
 2d0:	movw	r0, #0
 2d4:	movt	r0, #0
 2d8:	bl	0 <puts>
 2dc:	b	318 <callback+0x164>
 2e0:	movw	r0, #0
 2e4:	movt	r0, #0
 2e8:	bl	0 <puts>
 2ec:	b	318 <callback+0x164>
 2f0:	movw	r0, #0
 2f4:	movt	r0, #0
 2f8:	bl	0 <puts>
 2fc:	nop	{0}
 300:	b	318 <callback+0x164>
 304:	ldr	r3, [fp, #-12]
 308:	cmp	r3, #4
 30c:	bne	318 <callback+0x164>
 310:	ldr	r0, [fp, #-8]
 314:	bl	0 <puts>
 318:	mov	r3, #0
 31c:	mov	r0, r3
 320:	sub	sp, fp, #4
 324:	ldr	fp, [sp]
 328:	add	sp, sp, #4
 32c:	pop	{pc}		; (ldr pc, [sp], #4)

00000330 <main>:
 330:	str	r4, [sp, #-12]!
 334:	str	fp, [sp, #4]
 338:	str	lr, [sp, #8]
 33c:	add	fp, sp, #8
 340:	sub	sp, sp, #36	; 0x24
 344:	str	r0, [fp, #-32]	; 0xffffffe0
 348:	str	r1, [fp, #-36]	; 0xffffffdc
 34c:	mov	r3, #0
 350:	str	r3, [fp, #-16]
 354:	movw	r3, #0
 358:	movt	r3, #0
 35c:	mov	r2, #0
 360:	str	r2, [r3]
 364:	mov	r3, #1
 368:	str	r3, [fp, #-20]	; 0xffffffec
 36c:	ldr	r3, [fp, #-32]	; 0xffffffe0
 370:	cmp	r3, #1
 374:	beq	3c8 <main+0x98>
 378:	ldr	r3, [fp, #-36]	; 0xffffffdc
 37c:	add	r3, r3, #4
 380:	ldr	r3, [r3]
 384:	movw	r1, #0
 388:	movt	r1, #0
 38c:	mov	r0, r3
 390:	bl	0 <strcmp>
 394:	mov	r3, r0
 398:	cmp	r3, #0
 39c:	beq	3c8 <main+0x98>
 3a0:	ldr	r3, [fp, #-36]	; 0xffffffdc
 3a4:	add	r3, r3, #4
 3a8:	ldr	r3, [r3]
 3ac:	movw	r1, #0
 3b0:	movt	r1, #0
 3b4:	mov	r0, r3
 3b8:	bl	0 <strcmp>
 3bc:	mov	r3, r0
 3c0:	cmp	r3, #0
 3c4:	bne	3d4 <main+0xa4>
 3c8:	bl	4c <print_help>
 3cc:	mov	r0, #0
 3d0:	bl	0 <exit>
 3d4:	ldr	r3, [fp, #-36]	; 0xffffffdc
 3d8:	add	r3, r3, #4
 3dc:	ldr	r3, [r3]
 3e0:	movw	r1, #0
 3e4:	movt	r1, #0
 3e8:	mov	r0, r3
 3ec:	bl	0 <strcmp>
 3f0:	mov	r3, r0
 3f4:	cmp	r3, #0
 3f8:	beq	424 <main+0xf4>
 3fc:	ldr	r3, [fp, #-36]	; 0xffffffdc
 400:	add	r3, r3, #4
 404:	ldr	r3, [r3]
 408:	movw	r1, #0
 40c:	movt	r1, #0
 410:	mov	r0, r3
 414:	bl	0 <strcmp>
 418:	mov	r3, r0
 41c:	cmp	r3, #0
 420:	bne	430 <main+0x100>
 424:	bl	0 <print_version>
 428:	mov	r0, #0
 42c:	bl	0 <exit>
 430:	mov	r3, #1
 434:	str	r3, [fp, #-24]	; 0xffffffe8
 438:	ldr	r3, [fp, #-24]	; 0xffffffe8
 43c:	add	r3, r3, #1
 440:	ldr	r2, [fp, #-32]	; 0xffffffe0
 444:	cmp	r2, r3
 448:	ble	4ac <main+0x17c>
 44c:	ldr	r3, [fp, #-24]	; 0xffffffe8
 450:	lsl	r3, r3, #2
 454:	ldr	r2, [fp, #-36]	; 0xffffffdc
 458:	add	r3, r2, r3
 45c:	ldr	r3, [r3]
 460:	movw	r1, #0
 464:	movt	r1, #0
 468:	mov	r0, r3
 46c:	bl	0 <strcmp>
 470:	mov	r3, r0
 474:	cmp	r3, #0
 478:	bne	4ac <main+0x17c>
 47c:	ldr	r3, [fp, #-24]	; 0xffffffe8
 480:	add	r3, r3, #1
 484:	lsl	r3, r3, #2
 488:	ldr	r2, [fp, #-36]	; 0xffffffdc
 48c:	add	r3, r2, r3
 490:	ldr	r3, [r3]
 494:	mov	r0, r3
 498:	bl	0 <coda_set_definition_path>
 49c:	ldr	r3, [fp, #-24]	; 0xffffffe8
 4a0:	add	r3, r3, #2
 4a4:	str	r3, [fp, #-24]	; 0xffffffe8
 4a8:	b	51c <main+0x1ec>
 4ac:	movw	r3, #0
 4b0:	movt	r3, #0
 4b4:	str	r3, [fp, #-28]	; 0xffffffe4
 4b8:	ldr	r3, [fp, #-36]	; 0xffffffdc
 4bc:	ldr	r3, [r3]
 4c0:	ldr	r2, [fp, #-28]	; 0xffffffe4
 4c4:	mov	r1, #0
 4c8:	mov	r0, r3
 4cc:	bl	0 <coda_set_definition_path_conditional>
 4d0:	mov	r3, r0
 4d4:	cmp	r3, #0
 4d8:	beq	71c <main+0x3ec>
 4dc:	movw	r3, #0
 4e0:	movt	r3, #0
 4e4:	ldr	r4, [r3]
 4e8:	bl	0 <coda_get_errno>
 4ec:	mov	r3, r0
 4f0:	ldr	r3, [r3]
 4f4:	mov	r0, r3
 4f8:	bl	0 <coda_errno_to_string>
 4fc:	mov	r3, r0
 500:	mov	r2, r3
 504:	movw	r1, #0
 508:	movt	r1, #0
 50c:	mov	r0, r4
 510:	bl	0 <fprintf>
 514:	mov	r0, #1
 518:	bl	0 <exit>
 51c:	b	71c <main+0x3ec>
 520:	ldr	r3, [fp, #-24]	; 0xffffffe8
 524:	lsl	r3, r3, #2
 528:	ldr	r2, [fp, #-36]	; 0xffffffdc
 52c:	add	r3, r2, r3
 530:	ldr	r3, [r3]
 534:	movw	r1, #0
 538:	movt	r1, #0
 53c:	mov	r0, r3
 540:	bl	0 <strcmp>
 544:	mov	r3, r0
 548:	cmp	r3, #0
 54c:	beq	580 <main+0x250>
 550:	ldr	r3, [fp, #-24]	; 0xffffffe8
 554:	lsl	r3, r3, #2
 558:	ldr	r2, [fp, #-36]	; 0xffffffdc
 55c:	add	r3, r2, r3
 560:	ldr	r3, [r3]
 564:	movw	r1, #0
 568:	movt	r1, #0
 56c:	mov	r0, r3
 570:	bl	0 <strcmp>
 574:	mov	r3, r0
 578:	cmp	r3, #0
 57c:	bne	58c <main+0x25c>
 580:	mov	r3, #0
 584:	str	r3, [fp, #-20]	; 0xffffffec
 588:	b	710 <main+0x3e0>
 58c:	ldr	r3, [fp, #-24]	; 0xffffffe8
 590:	lsl	r3, r3, #2
 594:	ldr	r2, [fp, #-36]	; 0xffffffdc
 598:	add	r3, r2, r3
 59c:	ldr	r3, [r3]
 5a0:	movw	r1, #0
 5a4:	movt	r1, #0
 5a8:	mov	r0, r3
 5ac:	bl	0 <strcmp>
 5b0:	mov	r3, r0
 5b4:	cmp	r3, #0
 5b8:	beq	5ec <main+0x2bc>
 5bc:	ldr	r3, [fp, #-24]	; 0xffffffe8
 5c0:	lsl	r3, r3, #2
 5c4:	ldr	r2, [fp, #-36]	; 0xffffffdc
 5c8:	add	r3, r2, r3
 5cc:	ldr	r3, [r3]
 5d0:	movw	r1, #0
 5d4:	movt	r1, #0
 5d8:	mov	r0, r3
 5dc:	bl	0 <strcmp>
 5e0:	mov	r3, r0
 5e4:	cmp	r3, #0
 5e8:	bne	650 <main+0x320>
 5ec:	ldr	r3, [fp, #-24]	; 0xffffffe8
 5f0:	add	r3, r3, #1
 5f4:	ldr	r2, [fp, #-32]	; 0xffffffe0
 5f8:	cmp	r2, r3
 5fc:	ble	650 <main+0x320>
 600:	ldr	r3, [fp, #-24]	; 0xffffffe8
 604:	add	r3, r3, #1
 608:	lsl	r3, r3, #2
 60c:	ldr	r2, [fp, #-36]	; 0xffffffdc
 610:	add	r3, r2, r3
 614:	ldr	r3, [r3]
 618:	ldrb	r3, [r3]
 61c:	cmp	r3, #45	; 0x2d
 620:	beq	650 <main+0x320>
 624:	ldr	r3, [fp, #-24]	; 0xffffffe8
 628:	add	r3, r3, #1
 62c:	lsl	r3, r3, #2
 630:	ldr	r2, [fp, #-36]	; 0xffffffdc
 634:	add	r3, r2, r3
 638:	ldr	r3, [r3]
 63c:	str	r3, [fp, #-16]
 640:	ldr	r3, [fp, #-24]	; 0xffffffe8
 644:	add	r3, r3, #1
 648:	str	r3, [fp, #-24]	; 0xffffffe8
 64c:	b	710 <main+0x3e0>
 650:	ldr	r3, [fp, #-24]	; 0xffffffe8
 654:	lsl	r3, r3, #2
 658:	ldr	r2, [fp, #-36]	; 0xffffffdc
 65c:	add	r3, r2, r3
 660:	ldr	r3, [r3]
 664:	movw	r1, #0
 668:	movt	r1, #0
 66c:	mov	r0, r3
 670:	bl	0 <strcmp>
 674:	mov	r3, r0
 678:	cmp	r3, #0
 67c:	beq	6b0 <main+0x380>
 680:	ldr	r3, [fp, #-24]	; 0xffffffe8
 684:	lsl	r3, r3, #2
 688:	ldr	r2, [fp, #-36]	; 0xffffffdc
 68c:	add	r3, r2, r3
 690:	ldr	r3, [r3]
 694:	movw	r1, #0
 698:	movt	r1, #0
 69c:	mov	r0, r3
 6a0:	bl	0 <strcmp>
 6a4:	mov	r3, r0
 6a8:	cmp	r3, #0
 6ac:	bne	6c4 <main+0x394>
 6b0:	movw	r3, #0
 6b4:	movt	r3, #0
 6b8:	mov	r2, #1
 6bc:	str	r2, [r3]
 6c0:	b	710 <main+0x3e0>
 6c4:	ldr	r3, [fp, #-24]	; 0xffffffe8
 6c8:	lsl	r3, r3, #2
 6cc:	ldr	r2, [fp, #-36]	; 0xffffffdc
 6d0:	add	r3, r2, r3
 6d4:	ldr	r3, [r3]
 6d8:	ldrb	r3, [r3]
 6dc:	cmp	r3, #45	; 0x2d
 6e0:	bne	730 <main+0x400>
 6e4:	movw	r3, #0
 6e8:	movt	r3, #0
 6ec:	ldr	r3, [r3]
 6f0:	mov	r2, #25
 6f4:	mov	r1, #1
 6f8:	movw	r0, #0
 6fc:	movt	r0, #0
 700:	bl	0 <fwrite>
 704:	bl	4c <print_help>
 708:	mov	r0, #1
 70c:	bl	0 <exit>
 710:	ldr	r3, [fp, #-24]	; 0xffffffe8
 714:	add	r3, r3, #1
 718:	str	r3, [fp, #-24]	; 0xffffffe8
 71c:	ldr	r2, [fp, #-24]	; 0xffffffe8
 720:	ldr	r3, [fp, #-32]	; 0xffffffe0
 724:	cmp	r2, r3
 728:	blt	520 <main+0x1f0>
 72c:	b	734 <main+0x404>
 730:	nop	{0}
 734:	ldr	r2, [fp, #-24]	; 0xffffffe8
 738:	ldr	r3, [fp, #-32]	; 0xffffffe0
 73c:	cmp	r2, r3
 740:	bne	770 <main+0x440>
 744:	movw	r3, #0
 748:	movt	r3, #0
 74c:	ldr	r3, [r3]
 750:	mov	r2, #25
 754:	mov	r1, #1
 758:	movw	r0, #0
 75c:	movt	r0, #0
 760:	bl	0 <fwrite>
 764:	bl	4c <print_help>
 768:	mov	r0, #1
 76c:	bl	0 <exit>
 770:	bl	0 <coda_init>
 774:	mov	r3, r0
 778:	cmp	r3, #0
 77c:	beq	7c0 <main+0x490>
 780:	movw	r3, #0
 784:	movt	r3, #0
 788:	ldr	r4, [r3]
 78c:	bl	0 <coda_get_errno>
 790:	mov	r3, r0
 794:	ldr	r3, [r3]
 798:	mov	r0, r3
 79c:	bl	0 <coda_errno_to_string>
 7a0:	mov	r3, r0
 7a4:	mov	r2, r3
 7a8:	movw	r1, #0
 7ac:	movt	r1, #0
 7b0:	mov	r0, r4
 7b4:	bl	0 <fprintf>
 7b8:	mov	r0, #1
 7bc:	bl	0 <exit>
 7c0:	ldr	r0, [fp, #-20]	; 0xffffffec
 7c4:	bl	0 <coda_set_option_perform_conversions>
 7c8:	ldr	r2, [fp, #-32]	; 0xffffffe0
 7cc:	ldr	r3, [fp, #-24]	; 0xffffffe8
 7d0:	sub	r1, r2, r3
 7d4:	ldr	r3, [fp, #-24]	; 0xffffffe8
 7d8:	lsl	r3, r3, #2
 7dc:	ldr	r2, [fp, #-36]	; 0xffffffdc
 7e0:	add	r2, r2, r3
 7e4:	mov	r3, #0
 7e8:	str	r3, [sp]
 7ec:	movw	r3, #0
 7f0:	movt	r3, #0
 7f4:	ldr	r0, [fp, #-16]
 7f8:	bl	0 <coda_match_filefilter>
 7fc:	mov	r3, r0
 800:	cmp	r3, #0
 804:	beq	848 <main+0x518>
 808:	movw	r3, #0
 80c:	movt	r3, #0
 810:	ldr	r4, [r3]
 814:	bl	0 <coda_get_errno>
 818:	mov	r3, r0
 81c:	ldr	r3, [r3]
 820:	mov	r0, r3
 824:	bl	0 <coda_errno_to_string>
 828:	mov	r3, r0
 82c:	mov	r2, r3
 830:	movw	r1, #0
 834:	movt	r1, #0
 838:	mov	r0, r4
 83c:	bl	0 <fprintf>
 840:	mov	r0, #1
 844:	bl	0 <exit>
 848:	bl	0 <coda_done>
 84c:	mov	r3, #0
 850:	mov	r0, r3
 854:	sub	sp, fp, #8
 858:	ldr	r4, [sp]
 85c:	ldr	fp, [sp, #4]
 860:	add	sp, sp, #8
 864:	pop	{pc}		; (ldr pc, [sp], #4)
