
../compcert-repos/stcorp-coda-3a25f25/CMakeFiles/coda_static.dir/libcoda/coda-bin-cursor.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <coda_bin_cursor_get_bit_size>:
       0:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
       4:	add	fp, sp, #24
       8:	sub	sp, sp, #520	; 0x208
       c:	mov	r4, r0
      10:	ldr	r0, [r0, #4]
      14:	mov	r5, r1
      18:	add	r0, r4, r0, lsl #4
      1c:	ldr	r0, [r0, #-8]
      20:	ldr	r1, [r0]
      24:	cmp	r1, #99	; 0x63
      28:	ldrhi	r0, [r0, #4]
      2c:	mov	r6, r0
      30:	ldr	r2, [r6, #24]!
      34:	ldr	r3, [r6, #4]
      38:	cmp	r3, #0
      3c:	bmi	50 <coda_bin_cursor_get_bit_size+0x50>
      40:	strd	r2, [r5]
      44:	mov	r0, #0
      48:	sub	sp, fp, #24
      4c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
      50:	ldr	r1, [r0, #8]
      54:	sub	r2, r1, #2
      58:	cmp	r2, #4
      5c:	bcs	9c <coda_bin_cursor_get_bit_size+0x9c>
      60:	ldr	r0, [r0, #32]
      64:	mvn	r8, #0
      68:	cmp	r0, #0
      6c:	beq	f0 <coda_bin_cursor_get_bit_size+0xf0>
      70:	mov	r1, r4
      74:	mov	r2, r5
      78:	bl	0 <coda_expression_eval_integer>
      7c:	cmp	r0, #0
      80:	beq	fc <coda_bin_cursor_get_bit_size+0xfc>
      84:	movw	r0, #0
      88:	movt	r0, #0
      8c:	bl	0 <coda_add_error_message>
      90:	mov	r0, r4
      94:	bl	0 <coda_cursor_add_to_error_message>
      98:	b	e4 <coda_bin_cursor_get_bit_size+0xe4>
      9c:	cmp	r1, #2
      a0:	bcs	b8 <coda_bin_cursor_get_bit_size+0xb8>
      a4:	mov	r0, r4
      a8:	mov	r1, r5
      ac:	sub	sp, fp, #24
      b0:	pop	{r4, r5, r6, r7, r8, r9, fp, lr}
      b4:	b	0 <coda_ascbin_cursor_get_bit_size>
      b8:	cmp	r1, #6
      bc:	bne	44 <coda_bin_cursor_get_bit_size+0x44>
      c0:	mov	r6, sp
      c4:	mov	r1, r4
      c8:	mov	r2, #520	; 0x208
      cc:	mov	r0, r6
      d0:	bl	0 <memcpy>
      d4:	mov	r0, r6
      d8:	bl	0 <coda_ascbin_cursor_use_base_type_of_special_type>
      dc:	cmp	r0, #0
      e0:	beq	160 <coda_bin_cursor_get_bit_size+0x160>
      e4:	mvn	r0, #0
      e8:	sub	sp, fp, #24
      ec:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
      f0:	str	r8, [r5]
      f4:	str	r8, [r5, #4]
      f8:	b	44 <coda_bin_cursor_get_bit_size+0x44>
      fc:	ldrd	r2, [r6]
     100:	subs	r0, r8, #7
     104:	sbc	r1, r8, #0
     108:	eor	r1, r3, r1
     10c:	eor	r0, r2, r0
     110:	orrs	r0, r0, r1
     114:	ldrd	r0, [r5]
     118:	bne	13c <coda_bin_cursor_get_bit_size+0x13c>
     11c:	lsl	r1, r1, #3
     120:	lsl	r2, r0, #3
     124:	orr	r1, r1, r0, lsr #29
     128:	str	r2, [r5]
     12c:	str	r1, [r5, #4]
     130:	cmn	r1, #1
     134:	bgt	44 <coda_bin_cursor_get_bit_size+0x44>
     138:	b	148 <coda_bin_cursor_get_bit_size+0x148>
     13c:	mov	r2, r0
     140:	cmn	r1, #1
     144:	bgt	44 <coda_bin_cursor_get_bit_size+0x44>
     148:	movw	r0, #65236	; 0xfed4
     14c:	movw	r1, #0
     150:	movt	r0, #65535	; 0xffff
     154:	movt	r1, #0
     158:	bl	0 <coda_set_error>
     15c:	b	90 <coda_bin_cursor_get_bit_size+0x90>
     160:	mov	r0, sp
     164:	mov	r1, r5
     168:	bl	0 <coda_cursor_get_bit_size>
     16c:	mov	r1, r0
     170:	mvn	r0, #0
     174:	cmp	r1, #0
     178:	bne	e8 <coda_bin_cursor_get_bit_size+0xe8>
     17c:	b	44 <coda_bin_cursor_get_bit_size+0x44>

00000180 <coda_bin_cursor_get_string_length>:
     180:	push	{r4, sl, fp, lr}
     184:	add	fp, sp, #8
     188:	sub	sp, sp, #8
     18c:	mov	r4, r1
     190:	mov	r1, sp
     194:	bl	0 <coda_bin_cursor_get_bit_size>
     198:	mov	r1, r0
     19c:	mvn	r0, #0
     1a0:	cmp	r1, #0
     1a4:	beq	1b0 <coda_bin_cursor_get_string_length+0x30>
     1a8:	sub	sp, fp, #8
     1ac:	pop	{r4, sl, fp, pc}
     1b0:	ldm	sp, {r0, r1}
     1b4:	cmp	r1, #0
     1b8:	lsr	r0, r0, #3
     1bc:	orr	r0, r0, r1, lsl #29
     1c0:	mvnmi	r0, #0
     1c4:	str	r0, [r4]
     1c8:	mov	r0, #0
     1cc:	sub	sp, fp, #8
     1d0:	pop	{r4, sl, fp, pc}

000001d4 <coda_bin_cursor_get_num_elements>:
     1d4:	ldr	r2, [r0, #4]
     1d8:	add	r2, r0, r2, lsl #4
     1dc:	ldr	r2, [r2, #-8]
     1e0:	ldr	r3, [r2]
     1e4:	cmp	r3, #99	; 0x63
     1e8:	ldrhi	r2, [r2, #4]
     1ec:	ldr	r2, [r2, #8]
     1f0:	cmp	r2, #1
     1f4:	movhi	r0, #1
     1f8:	strhi	r0, [r1]
     1fc:	movhi	r0, #0
     200:	bxhi	lr
     204:	b	0 <coda_ascbin_cursor_get_num_elements>

00000208 <coda_bin_cursor_read_int8>:
     208:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
     20c:	add	fp, sp, #28
     210:	sub	sp, sp, #68	; 0x44
     214:	mov	r5, r0
     218:	ldr	r0, [r0, #4]
     21c:	mov	r9, r1
     220:	sub	r0, r0, #1
     224:	add	r0, r5, r0, lsl #4
     228:	ldr	r1, [r0, #8]
     22c:	ldr	r2, [r1]
     230:	cmp	r2, #99	; 0x63
     234:	ldrhi	r1, [r1, #4]
     238:	ldr	r2, [r1, #24]
     23c:	ldr	r1, [r1, #28]
     240:	str	r1, [fp, #-36]	; 0xffffffdc
     244:	str	r2, [fp, #-40]	; 0xffffffd8
     248:	cmn	r1, #1
     24c:	ldr	r8, [r0, #16]
     250:	ldr	sl, [r0, #20]
     254:	ble	2b8 <coda_bin_cursor_read_int8+0xb0>
     258:	tst	r8, #7
     25c:	eoreq	r0, r2, #8
     260:	orrseq	r0, r0, r1
     264:	beq	350 <coda_bin_cursor_read_int8+0x148>
     268:	lsr	r0, r2, #3
     26c:	lsr	r3, r1, #3
     270:	orr	r0, r0, r1, lsl #29
     274:	adds	r6, r0, #1
     278:	adc	r4, r3, #0
     27c:	ands	r7, r2, #7
     280:	moveq	r6, r0
     284:	moveq	r4, r3
     288:	subs	r0, r6, #2
     28c:	sbcs	r0, r4, #0
     290:	bcs	3c0 <coda_bin_cursor_read_int8+0x1b8>
     294:	mov	r0, #0
     298:	mov	r3, sl
     29c:	strb	r0, [r9]
     2a0:	ldr	r0, [r5]
     2a4:	str	r2, [sp]
     2a8:	mov	r2, r8
     2ac:	stmib	sp, {r1, r9}
     2b0:	bl	3e0 <read_bits>
     2b4:	b	374 <coda_bin_cursor_read_int8+0x16c>
     2b8:	sub	r1, fp, #40	; 0x28
     2bc:	mov	r0, r5
     2c0:	bl	0 <coda_bin_cursor_get_bit_size>
     2c4:	mvn	r6, #0
     2c8:	cmp	r0, #0
     2cc:	bne	3b4 <coda_bin_cursor_read_int8+0x1ac>
     2d0:	ldr	r2, [fp, #-40]	; 0xffffffd8
     2d4:	ldr	r1, [fp, #-36]	; 0xffffffdc
     2d8:	subs	r0, r2, #9
     2dc:	sbcs	r0, r1, #0
     2e0:	bcc	258 <coda_bin_cursor_read_int8+0x50>
     2e4:	add	r8, sp, #35	; 0x23
     2e8:	mov	r0, r2
     2ec:	mov	r2, r8
     2f0:	bl	0 <coda_str64>
     2f4:	ldr	r0, [r5, #4]
     2f8:	add	r4, r5, #8
     2fc:	add	r7, sp, #14
     300:	mov	r2, r7
     304:	add	r0, r4, r0, lsl #4
     308:	ldrd	r0, [r0, #-8]
     30c:	lsr	r0, r0, #3
     310:	orr	r0, r0, r1, lsl #29
     314:	asr	r1, r1, #3
     318:	bl	0 <coda_str64>
     31c:	ldr	r0, [r5, #4]
     320:	movw	r1, #0
     324:	mov	r2, r8
     328:	mov	r3, r7
     32c:	movt	r1, #0
     330:	add	r0, r4, r0, lsl #4
     334:	ldr	r0, [r0, #-8]
     338:	and	r0, r0, #7
     33c:	str	r0, [sp]
     340:	movw	r0, #65236	; 0xfed4
     344:	movt	r0, #65535	; 0xffff
     348:	bl	0 <coda_set_error>
     34c:	b	3b4 <coda_bin_cursor_read_int8+0x1ac>
     350:	ldr	r0, [r5]
     354:	mov	r2, #1
     358:	mov	r1, #0
     35c:	asr	r3, sl, #3
     360:	str	r2, [sp]
     364:	stmib	sp, {r1, r9}
     368:	lsr	r1, r8, #3
     36c:	orr	r2, r1, sl, lsl #29
     370:	bl	8bc <read_bytes>
     374:	mvn	r6, #0
     378:	cmp	r0, #0
     37c:	bne	3b4 <coda_bin_cursor_read_int8+0x1ac>
     380:	ldr	r0, [fp, #-40]	; 0xffffffd8
     384:	ldr	r1, [fp, #-36]	; 0xffffffdc
     388:	mov	r6, #0
     38c:	rsbs	r2, r0, #7
     390:	rscs	r1, r1, #0
     394:	blt	3b4 <coda_bin_cursor_read_int8+0x1ac>
     398:	ldrb	r1, [r9]
     39c:	sub	r2, r0, #1
     3a0:	mov	r3, #1
     3a4:	tst	r1, r3, lsl r2
     3a8:	mvnne	r2, #0
     3ac:	orrne	r0, r1, r2, lsl r0
     3b0:	strbne	r0, [r9]
     3b4:	mov	r0, r6
     3b8:	sub	sp, fp, #28
     3bc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
     3c0:	movw	r0, #0
     3c4:	movw	r1, #0
     3c8:	movw	r3, #0
     3cc:	mov	r2, #177	; 0xb1
     3d0:	movt	r0, #0
     3d4:	movt	r1, #0
     3d8:	movt	r3, #0
     3dc:	bl	0 <__assert_fail>

000003e0 <read_bits>:
     3e0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
     3e4:	add	fp, sp, #28
     3e8:	sub	sp, sp, #60	; 0x3c
     3ec:	ldr	sl, [fp, #8]
     3f0:	ldr	r5, [fp, #12]
     3f4:	and	r7, r2, #7
     3f8:	mov	r8, r0
     3fc:	ldr	r4, [fp, #16]
     400:	mov	r9, r2
     404:	mov	r6, r3
     408:	adds	r0, r7, sl
     40c:	rsb	r1, r0, #0
     410:	and	r2, r1, #7
     414:	adc	r1, r5, #0
     418:	rsbs	r0, r0, #8
     41c:	rscs	r0, r1, #0
     420:	blt	464 <read_bits+0x84>
     424:	mov	r1, #1
     428:	mov	r0, #0
     42c:	mov	r5, r2
     430:	asr	r3, r6, #3
     434:	str	r1, [sp]
     438:	stmib	sp, {r0, r4}
     43c:	lsr	r0, r9, #3
     440:	orr	r2, r0, r6, lsl #29
     444:	mov	r0, r8
     448:	bl	8bc <read_bytes>
     44c:	mov	r1, r0
     450:	mvn	r0, #0
     454:	cmp	r1, #0
     458:	beq	59c <read_bits+0x1bc>
     45c:	sub	sp, fp, #28
     460:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
     464:	cmp	r2, #0
     468:	beq	5c8 <read_bits+0x1e8>
     46c:	str	r2, [sp, #40]	; 0x28
     470:	mov	r0, sl
     474:	mov	r1, r5
     478:	mov	r2, #24
     47c:	mov	r3, #0
     480:	str	r8, [sp, #44]	; 0x2c
     484:	mov	r8, #0
     488:	bl	0 <__aeabi_ldivmod>
     48c:	orrs	r0, r2, r3
     490:	beq	800 <read_bits+0x420>
     494:	mov	r1, r2
     498:	add	r2, r2, r7
     49c:	sub	r0, fp, #33	; 0x21
     4a0:	asr	r3, r6, #3
     4a4:	ands	r7, r2, #7
     4a8:	str	r2, [sp, #28]
     4ac:	str	r1, [sp, #36]	; 0x24
     4b0:	movwne	r7, #1
     4b4:	add	r2, r7, r2, lsr #3
     4b8:	stm	sp, {r2, r8}
     4bc:	str	r0, [sp, #8]
     4c0:	lsr	r0, r9, #3
     4c4:	str	r2, [sp, #32]
     4c8:	ands	r8, r1, #7
     4cc:	orr	r2, r0, r6, lsl #29
     4d0:	ldr	r0, [sp, #44]	; 0x2c
     4d4:	movwne	r8, #1
     4d8:	bl	8bc <read_bytes>
     4dc:	cmp	r0, #0
     4e0:	bne	8b0 <read_bits+0x4d0>
     4e4:	ldr	r3, [sp, #36]	; 0x24
     4e8:	ldr	r2, [sp, #32]
     4ec:	ldr	r1, [sp, #28]
     4f0:	mov	lr, r8
     4f4:	add	r0, r8, r3, lsr #3
     4f8:	cmp	r2, #0
     4fc:	mov	ip, r3
     500:	str	r0, [sp, #24]
     504:	mov	r0, #0
     508:	str	r0, [fp, #-40]	; 0xffffffd8
     50c:	beq	6e4 <read_bits+0x304>
     510:	lsr	r0, r1, #3
     514:	mov	r2, #0
     518:	sub	r8, fp, #33	; 0x21
     51c:	add	r1, r0, r7
     520:	cmp	r1, #16
     524:	bcc	6b8 <read_bits+0x2d8>
     528:	bic	r2, r1, #15
     52c:	str	r1, [sp, #20]
     530:	mov	r1, #1
     534:	str	lr, [sp, #28]
     538:	subs	r0, r2, #16
     53c:	add	r0, r1, r0, lsr #4
     540:	and	r1, r0, #1
     544:	str	r1, [sp, #16]
     548:	beq	670 <read_bits+0x290>
     54c:	sub	r7, r0, r1
     550:	sub	r0, fp, #40	; 0x28
     554:	mov	r3, #0
     558:	mvn	r1, #31
     55c:	sub	r8, fp, #33	; 0x21
     560:	sub	r0, r0, #28
     564:	add	ip, r8, r3
     568:	add	lr, r0, #16
     56c:	subs	r7, r7, #2
     570:	add	r3, r3, #32
     574:	vld1.8	{d16-d17}, [ip]!
     578:	vrev64.8	q8, q8
     57c:	vext.8	q8, q8, q8, #8
     580:	vst1.8	{d16-d17}, [lr]
     584:	vld1.8	{d16-d17}, [ip]
     588:	vrev64.8	q8, q8
     58c:	vext.8	q8, q8, q8, #8
     590:	vst1.8	{d16-d17}, [r0], r1
     594:	bne	564 <read_bits+0x184>
     598:	b	678 <read_bits+0x298>
     59c:	cmp	r5, #0
     5a0:	ldrbne	r0, [r4]
     5a4:	lsrne	r0, r0, r5
     5a8:	strbne	r0, [r4]
     5ac:	tst	sl, #7
     5b0:	beq	8a4 <read_bits+0x4c4>
     5b4:	ldrb	r0, [r4]
     5b8:	mvn	r1, #0
     5bc:	bic	r0, r0, r1, lsl sl
     5c0:	strb	r0, [r4]
     5c4:	b	8a4 <read_bits+0x4c4>
     5c8:	ands	r7, sl, #7
     5cc:	beq	624 <read_bits+0x244>
     5d0:	sub	r0, fp, #29
     5d4:	mov	r2, #1
     5d8:	mov	r1, #0
     5dc:	asr	r3, r6, #3
     5e0:	str	r0, [sp, #8]
     5e4:	lsr	r0, r9, #3
     5e8:	str	r2, [sp]
     5ec:	str	r1, [sp, #4]
     5f0:	orr	r2, r0, r6, lsl #29
     5f4:	mov	r0, r8
     5f8:	bl	8bc <read_bytes>
     5fc:	cmp	r0, #0
     600:	bne	8b0 <read_bits+0x4d0>
     604:	ldrb	r0, [fp, #-29]	; 0xffffffe3
     608:	mvn	r1, #0
     60c:	subs	sl, sl, r7
     610:	sbc	r5, r5, #0
     614:	adds	r9, r7, r9
     618:	adc	r6, r6, #0
     61c:	bic	r0, r0, r1, lsl r7
     620:	strb	r0, [r4], #1
     624:	subs	r0, sl, #1
     628:	sbcs	r0, r5, #0
     62c:	blt	8a4 <read_bits+0x4c4>
     630:	lsr	r1, sl, #3
     634:	lsr	r0, r5, #3
     638:	asr	r3, r6, #3
     63c:	orr	r1, r1, r5, lsl #29
     640:	str	r1, [sp]
     644:	stmib	sp, {r0, r4}
     648:	lsr	r0, r9, #3
     64c:	orr	r2, r0, r6, lsl #29
     650:	mov	r0, r8
     654:	bl	8bc <read_bytes>
     658:	mov	r1, r0
     65c:	mvn	r0, #0
     660:	cmp	r1, #0
     664:	moveq	r0, #0
     668:	sub	sp, fp, #28
     66c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
     670:	mov	r3, #0
     674:	sub	r8, fp, #33	; 0x21
     678:	ldr	r0, [sp, #16]
     67c:	cmp	r0, #0
     680:	beq	6a4 <read_bits+0x2c4>
     684:	add	r0, r8, r3
     688:	vld1.8	{d16-d17}, [r0]
     68c:	sub	r0, fp, #40	; 0x28
     690:	sub	r0, r0, r3
     694:	sub	r0, r0, #12
     698:	vrev64.8	q8, q8
     69c:	vext.8	q8, q8, q8, #8
     6a0:	vst1.8	{d16-d17}, [r0]
     6a4:	ldr	r1, [sp, #20]
     6a8:	ldr	ip, [sp, #36]	; 0x24
     6ac:	ldr	lr, [sp, #28]
     6b0:	cmp	r1, r2
     6b4:	beq	6dc <read_bits+0x2fc>
     6b8:	sub	r3, fp, #40	; 0x28
     6bc:	add	r0, r8, r2
     6c0:	sub	r1, r1, r2
     6c4:	sub	r2, r3, r2
     6c8:	add	r2, r2, #3
     6cc:	ldrb	r3, [r0], #1
     6d0:	subs	r1, r1, #1
     6d4:	strb	r3, [r2], #-1
     6d8:	bne	6cc <read_bits+0x2ec>
     6dc:	ldr	r0, [fp, #-40]	; 0xffffffd8
     6e0:	ldr	r2, [sp, #32]
     6e4:	ldr	r1, [sp, #40]	; 0x28
     6e8:	ldr	r7, [sp, #24]
     6ec:	sub	r1, r1, r2, lsl #3
     6f0:	cmp	r7, #0
     6f4:	add	r1, r1, #32
     6f8:	lsr	r0, r0, r1
     6fc:	mvn	r1, #0
     700:	bic	r0, r0, r1, lsl ip
     704:	str	r0, [fp, #-40]	; 0xffffffd8
     708:	beq	7ec <read_bits+0x40c>
     70c:	lsr	r0, ip, #3
     710:	add	r8, r0, lr
     714:	mov	lr, #0
     718:	cmp	r8, #16
     71c:	bcc	7cc <read_bits+0x3ec>
     720:	bic	lr, r8, #15
     724:	mov	r1, #1
     728:	subs	r0, lr, #16
     72c:	add	r0, r1, r0, lsr #4
     730:	and	ip, r0, #1
     734:	beq	788 <read_bits+0x3a8>
     738:	sub	r7, r0, ip
     73c:	sub	r0, fp, #40	; 0x28
     740:	mov	r3, #0
     744:	mvn	r1, #31
     748:	add	r0, r0, r8
     74c:	sub	r0, r0, #32
     750:	add	r2, r0, #16
     754:	subs	r7, r7, #2
     758:	vld1.8	{d16-d17}, [r2]
     75c:	add	r2, r4, r3
     760:	add	r3, r3, #32
     764:	vrev64.8	q8, q8
     768:	vext.8	q8, q8, q8, #8
     76c:	vst1.8	{d16-d17}, [r2]!
     770:	vld1.8	{d16-d17}, [r0], r1
     774:	vrev64.8	q8, q8
     778:	vext.8	q8, q8, q8, #8
     77c:	vst1.8	{d16-d17}, [r2]
     780:	bne	750 <read_bits+0x370>
     784:	b	78c <read_bits+0x3ac>
     788:	mov	r3, #0
     78c:	ldr	r7, [sp, #24]
     790:	cmp	ip, #0
     794:	beq	7c0 <read_bits+0x3e0>
     798:	mvn	r0, r3
     79c:	sub	r1, fp, #40	; 0x28
     7a0:	add	r0, r7, r0
     7a4:	add	r0, r1, r0
     7a8:	sub	r0, r0, #15
     7ac:	vld1.8	{d16-d17}, [r0]
     7b0:	add	r0, r4, r3
     7b4:	vrev64.8	q8, q8
     7b8:	vext.8	q8, q8, q8, #8
     7bc:	vst1.8	{d16-d17}, [r0]
     7c0:	ldr	ip, [sp, #36]	; 0x24
     7c4:	cmp	r8, lr
     7c8:	beq	7ec <read_bits+0x40c>
     7cc:	sub	r2, fp, #40	; 0x28
     7d0:	add	r0, r4, lr
     7d4:	sub	r1, r8, lr
     7d8:	sub	r2, r2, #1
     7dc:	ldrb	r3, [r2, r1]
     7e0:	subs	r1, r1, #1
     7e4:	strb	r3, [r0], #1
     7e8:	bne	7dc <read_bits+0x3fc>
     7ec:	subs	sl, sl, ip
     7f0:	add	r4, r4, r7
     7f4:	sbc	r5, r5, #0
     7f8:	adds	r9, ip, r9
     7fc:	adc	r6, r6, #0
     800:	subs	r0, sl, #1
     804:	sbcs	r0, r5, #0
     808:	blt	8a4 <read_bits+0x4c4>
     80c:	mov	r7, #0
     810:	mov	r8, #4
     814:	sub	r0, fp, #33	; 0x21
     818:	asr	r3, r6, #3
     81c:	str	r8, [sp]
     820:	str	r7, [sp, #4]
     824:	str	r0, [sp, #8]
     828:	lsr	r0, r9, #3
     82c:	orr	r2, r0, r6, lsl #29
     830:	ldr	r0, [sp, #44]	; 0x2c
     834:	bl	8bc <read_bytes>
     838:	cmp	r0, #0
     83c:	bne	8b0 <read_bits+0x4d0>
     840:	ldrb	r3, [fp, #-30]	; 0xffffffe2
     844:	ldrb	r0, [fp, #-33]	; 0xffffffdf
     848:	ldrb	r1, [fp, #-32]	; 0xffffffe0
     84c:	ldrb	r2, [fp, #-31]	; 0xffffffe1
     850:	adds	r9, r9, #24
     854:	adc	r6, r6, #0
     858:	subs	sl, sl, #24
     85c:	sbc	r5, r5, #0
     860:	strb	r3, [fp, #-40]	; 0xffffffd8
     864:	strb	r2, [fp, #-39]	; 0xffffffd9
     868:	strb	r1, [fp, #-38]	; 0xffffffda
     86c:	strb	r0, [fp, #-37]	; 0xffffffdb
     870:	ldr	r1, [sp, #40]	; 0x28
     874:	ldr	r0, [fp, #-40]	; 0xffffffd8
     878:	lsr	r0, r0, r1
     87c:	str	r0, [fp, #-40]	; 0xffffffd8
     880:	strb	r0, [r4, #2]
     884:	lsr	r1, r0, #8
     888:	lsr	r0, r0, #16
     88c:	strb	r1, [r4, #1]
     890:	strb	r0, [r4]
     894:	rsbs	r0, sl, #0
     898:	add	r4, r4, #3
     89c:	rscs	r0, r5, #0
     8a0:	blt	814 <read_bits+0x434>
     8a4:	mov	r0, #0
     8a8:	sub	sp, fp, #28
     8ac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
     8b0:	mvn	r0, #0
     8b4:	sub	sp, fp, #28
     8b8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

000008bc <read_bytes>:
     8bc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
     8c0:	add	fp, sp, #28
     8c4:	sub	sp, sp, #68	; 0x44
     8c8:	ldr	r7, [r0, #48]	; 0x30
     8cc:	mov	r4, r2
     8d0:	ldr	r1, [fp, #12]
     8d4:	ldr	r2, [fp, #8]
     8d8:	ldr	ip, [fp, #16]
     8dc:	mov	sl, r3
     8e0:	cmp	r7, #0
     8e4:	beq	968 <read_bytes+0xac>
     8e8:	add	r9, r0, #40	; 0x28
     8ec:	adds	r5, r2, r4
     8f0:	ldr	r8, [r9]
     8f4:	ldr	r3, [r9, #4]
     8f8:	adc	r6, r1, sl
     8fc:	subs	r5, r8, r5
     900:	sbcs	r3, r3, r6
     904:	bcs	9b0 <read_bytes+0xf4>
     908:	ldr	r0, [r0, #16]
     90c:	cmp	r0, #1
     910:	bls	994 <read_bytes+0xd8>
     914:	add	r8, sp, #47	; 0x2f
     918:	mov	r0, r2
     91c:	mov	r2, r8
     920:	bl	0 <coda_str64>
     924:	add	r7, sp, #26
     928:	mov	r0, r4
     92c:	mov	r1, sl
     930:	mov	r2, r7
     934:	bl	0 <coda_str64>
     938:	ldrd	r0, [r9]
     93c:	add	r4, sp, #5
     940:	mov	r2, r4
     944:	bl	0 <coda_str64>
     948:	movw	r1, #0
     94c:	mvn	r0, #300	; 0x12c
     950:	mov	r2, r8
     954:	mov	r3, r7
     958:	str	r4, [sp]
     95c:	movt	r1, #0
     960:	bl	0 <coda_set_error>
     964:	b	9a4 <read_bytes+0xe8>
     968:	ldr	r3, [r0, #16]
     96c:	cmp	r3, #2
     970:	bcs	a0c <read_bytes+0x150>
     974:	add	r3, r0, #8
     978:	adds	r7, r2, r4
     97c:	ldr	r6, [r3]
     980:	ldr	r3, [r3, #4]
     984:	adc	r1, r1, sl
     988:	subs	r7, r6, r7
     98c:	sbcs	r1, r3, r1
     990:	bcs	9c8 <read_bytes+0x10c>
     994:	movw	r1, #0
     998:	mvn	r0, #300	; 0x12c
     99c:	movt	r1, #0
     9a0:	bl	0 <coda_set_error>
     9a4:	mvn	r0, #0
     9a8:	sub	sp, fp, #28
     9ac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
     9b0:	add	r1, r7, r4
     9b4:	mov	r0, ip
     9b8:	bl	0 <memcpy>
     9bc:	mov	r0, #0
     9c0:	sub	sp, fp, #28
     9c4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
     9c8:	ldr	r0, [r0, #56]	; 0x38
     9cc:	mov	r1, ip
     9d0:	mov	r3, r4
     9d4:	bl	0 <pread>
     9d8:	mov	r1, r0
     9dc:	mov	r0, #0
     9e0:	cmn	r1, #1
     9e4:	bgt	9a8 <read_bytes+0xec>
     9e8:	bl	0 <__errno_location>
     9ec:	ldr	r0, [r0]
     9f0:	bl	0 <strerror>
     9f4:	movw	r1, #0
     9f8:	mov	r2, r0
     9fc:	mvn	r0, #21
     a00:	movt	r1, #0
     a04:	bl	0 <coda_set_error>
     a08:	b	9a4 <read_bytes+0xe8>
     a0c:	movw	r0, #0
     a10:	movw	r1, #0
     a14:	movw	r3, #0
     a18:	mov	r2, #83	; 0x53
     a1c:	movt	r0, #0
     a20:	movt	r1, #0
     a24:	movt	r3, #0
     a28:	bl	0 <__assert_fail>

00000a2c <coda_bin_cursor_read_uint8>:
     a2c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
     a30:	add	fp, sp, #28
     a34:	sub	sp, sp, #68	; 0x44
     a38:	mov	r4, r0
     a3c:	ldr	r0, [r0, #4]
     a40:	mov	r9, r1
     a44:	sub	r0, r0, #1
     a48:	add	r0, r4, r0, lsl #4
     a4c:	ldr	r1, [r0, #8]
     a50:	ldr	r2, [r1]
     a54:	cmp	r2, #99	; 0x63
     a58:	ldrhi	r1, [r1, #4]
     a5c:	ldr	r2, [r1, #24]
     a60:	ldr	r1, [r1, #28]
     a64:	str	r1, [fp, #-36]	; 0xffffffdc
     a68:	str	r2, [fp, #-40]	; 0xffffffd8
     a6c:	ldr	r8, [r0, #16]
     a70:	ldr	sl, [r0, #20]
     a74:	and	r0, r2, r1
     a78:	cmn	r0, #1
     a7c:	beq	ae0 <coda_bin_cursor_read_uint8+0xb4>
     a80:	tst	r8, #7
     a84:	eoreq	r0, r2, #8
     a88:	orrseq	r0, r0, r1
     a8c:	beq	b78 <coda_bin_cursor_read_uint8+0x14c>
     a90:	lsr	r0, r2, #3
     a94:	asr	r3, r1, #3
     a98:	orr	r0, r0, r1, lsl #29
     a9c:	adds	r6, r0, #1
     aa0:	adc	r5, r3, #0
     aa4:	ands	r7, r2, #7
     aa8:	moveq	r6, r0
     aac:	moveq	r5, r3
     ab0:	subs	r0, r6, #2
     ab4:	sbcs	r0, r5, #0
     ab8:	bge	bb4 <coda_bin_cursor_read_uint8+0x188>
     abc:	mov	r0, #0
     ac0:	mov	r3, sl
     ac4:	strb	r0, [r9]
     ac8:	ldr	r0, [r4]
     acc:	str	r2, [sp]
     ad0:	mov	r2, r8
     ad4:	stmib	sp, {r1, r9}
     ad8:	bl	3e0 <read_bits>
     adc:	b	b9c <coda_bin_cursor_read_uint8+0x170>
     ae0:	sub	r1, fp, #40	; 0x28
     ae4:	mov	r0, r4
     ae8:	bl	0 <coda_bin_cursor_get_bit_size>
     aec:	mvn	r6, #0
     af0:	cmp	r0, #0
     af4:	bne	ba8 <coda_bin_cursor_read_uint8+0x17c>
     af8:	ldr	r2, [fp, #-40]	; 0xffffffd8
     afc:	ldr	r1, [fp, #-36]	; 0xffffffdc
     b00:	subs	r0, r2, #9
     b04:	sbcs	r0, r1, #0
     b08:	bcc	a80 <coda_bin_cursor_read_uint8+0x54>
     b0c:	add	r8, sp, #35	; 0x23
     b10:	mov	r0, r2
     b14:	mov	r2, r8
     b18:	bl	0 <coda_str64>
     b1c:	ldr	r0, [r4, #4]
     b20:	add	r5, r4, #8
     b24:	add	r7, sp, #14
     b28:	mov	r2, r7
     b2c:	add	r0, r5, r0, lsl #4
     b30:	ldrd	r0, [r0, #-8]
     b34:	lsr	r0, r0, #3
     b38:	orr	r0, r0, r1, lsl #29
     b3c:	asr	r1, r1, #3
     b40:	bl	0 <coda_str64>
     b44:	ldr	r0, [r4, #4]
     b48:	movw	r1, #0
     b4c:	mov	r2, r8
     b50:	mov	r3, r7
     b54:	movt	r1, #0
     b58:	add	r0, r5, r0, lsl #4
     b5c:	ldr	r0, [r0, #-8]
     b60:	and	r0, r0, #7
     b64:	str	r0, [sp]
     b68:	movw	r0, #65236	; 0xfed4
     b6c:	movt	r0, #65535	; 0xffff
     b70:	bl	0 <coda_set_error>
     b74:	b	ba8 <coda_bin_cursor_read_uint8+0x17c>
     b78:	ldr	r0, [r4]
     b7c:	mov	r2, #1
     b80:	mov	r1, #0
     b84:	asr	r3, sl, #3
     b88:	str	r2, [sp]
     b8c:	stmib	sp, {r1, r9}
     b90:	lsr	r1, r8, #3
     b94:	orr	r2, r1, sl, lsl #29
     b98:	bl	8bc <read_bytes>
     b9c:	cmp	r0, #0
     ba0:	mvn	r6, #0
     ba4:	moveq	r6, #0
     ba8:	mov	r0, r6
     bac:	sub	sp, fp, #28
     bb0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
     bb4:	movw	r0, #0
     bb8:	movw	r1, #0
     bbc:	movw	r3, #0
     bc0:	mov	r2, #233	; 0xe9
     bc4:	movt	r0, #0
     bc8:	movt	r1, #0
     bcc:	movt	r3, #0
     bd0:	bl	0 <__assert_fail>

00000bd4 <coda_bin_cursor_read_int16>:
     bd4:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
     bd8:	add	fp, sp, #24
     bdc:	sub	sp, sp, #64	; 0x40
     be0:	mov	r5, r0
     be4:	ldr	r0, [r0, #4]
     be8:	mov	r4, r1
     bec:	sub	r0, r0, #1
     bf0:	add	r0, r5, r0, lsl #4
     bf4:	ldr	r3, [r0, #8]
     bf8:	ldr	r1, [r3]
     bfc:	cmp	r1, #99	; 0x63
     c00:	ldrhi	r3, [r3, #4]
     c04:	ldr	r2, [r3, #24]
     c08:	ldr	r1, [r3, #28]
     c0c:	str	r1, [fp, #-28]	; 0xffffffe4
     c10:	str	r2, [fp, #-32]	; 0xffffffe0
     c14:	ldrd	r8, [r0, #16]
     c18:	ldr	r7, [r3, #44]	; 0x2c
     c1c:	and	r0, r2, r1
     c20:	cmn	r0, #1
     c24:	beq	c80 <coda_bin_cursor_read_int16+0xac>
     c28:	tst	r8, #7
     c2c:	eoreq	r0, r2, #16
     c30:	orrseq	r0, r0, r1
     c34:	beq	d18 <coda_bin_cursor_read_int16+0x144>
     c38:	cmp	r7, #0
     c3c:	mov	r3, r4
     c40:	bne	c5c <coda_bin_cursor_read_int16+0x88>
     c44:	lsr	r0, r2, #3
     c48:	tst	r2, #7
     c4c:	orr	r0, r0, r1, lsl #29
     c50:	addne	r0, r0, #1
     c54:	sub	r0, r4, r0
     c58:	add	r3, r0, #2
     c5c:	mov	r0, #0
     c60:	strh	r0, [r4]
     c64:	ldr	r0, [r5]
     c68:	str	r2, [sp]
     c6c:	stmib	sp, {r1, r3}
     c70:	mov	r2, r8
     c74:	mov	r3, r9
     c78:	bl	3e0 <read_bits>
     c7c:	b	d3c <coda_bin_cursor_read_int16+0x168>
     c80:	sub	r1, fp, #32
     c84:	mov	r0, r5
     c88:	bl	0 <coda_bin_cursor_get_bit_size>
     c8c:	mvn	r6, #0
     c90:	cmp	r0, #0
     c94:	bne	d90 <coda_bin_cursor_read_int16+0x1bc>
     c98:	ldr	r2, [fp, #-32]	; 0xffffffe0
     c9c:	ldr	r1, [fp, #-28]	; 0xffffffe4
     ca0:	subs	r0, r2, #17
     ca4:	sbcs	r0, r1, #0
     ca8:	bcc	c28 <coda_bin_cursor_read_int16+0x54>
     cac:	add	r8, sp, #35	; 0x23
     cb0:	mov	r0, r2
     cb4:	mov	r2, r8
     cb8:	bl	0 <coda_str64>
     cbc:	ldr	r0, [r5, #4]
     cc0:	add	r4, r5, #8
     cc4:	add	r7, sp, #14
     cc8:	mov	r2, r7
     ccc:	add	r0, r4, r0, lsl #4
     cd0:	ldrd	r0, [r0, #-8]
     cd4:	lsr	r0, r0, #3
     cd8:	orr	r0, r0, r1, lsl #29
     cdc:	asr	r1, r1, #3
     ce0:	bl	0 <coda_str64>
     ce4:	ldr	r0, [r5, #4]
     ce8:	movw	r1, #0
     cec:	mov	r2, r8
     cf0:	mov	r3, r7
     cf4:	movt	r1, #0
     cf8:	add	r0, r4, r0, lsl #4
     cfc:	ldr	r0, [r0, #-8]
     d00:	and	r0, r0, #7
     d04:	str	r0, [sp]
     d08:	movw	r0, #65236	; 0xfed4
     d0c:	movt	r0, #65535	; 0xffff
     d10:	bl	0 <coda_set_error>
     d14:	b	d90 <coda_bin_cursor_read_int16+0x1bc>
     d18:	ldr	r0, [r5]
     d1c:	mov	r2, #2
     d20:	mov	r1, #0
     d24:	asr	r3, r9, #3
     d28:	str	r2, [sp]
     d2c:	stmib	sp, {r1, r4}
     d30:	lsr	r1, r8, #3
     d34:	orr	r2, r1, r9, lsl #29
     d38:	bl	8bc <read_bytes>
     d3c:	mvn	r6, #0
     d40:	cmp	r0, #0
     d44:	bne	d90 <coda_bin_cursor_read_int16+0x1bc>
     d48:	cmp	r7, #0
     d4c:	bne	d5c <coda_bin_cursor_read_int16+0x188>
     d50:	ldrh	r0, [r4]
     d54:	rev16	r0, r0
     d58:	strh	r0, [r4]
     d5c:	ldr	r0, [fp, #-32]	; 0xffffffe0
     d60:	ldr	r1, [fp, #-28]	; 0xffffffe4
     d64:	mov	r6, #0
     d68:	rsbs	r2, r0, #15
     d6c:	rscs	r1, r1, #0
     d70:	blt	d90 <coda_bin_cursor_read_int16+0x1bc>
     d74:	ldrh	r1, [r4]
     d78:	sub	r2, r0, #1
     d7c:	mov	r3, #1
     d80:	tst	r1, r3, lsl r2
     d84:	mvnne	r2, #0
     d88:	orrne	r0, r1, r2, lsl r0
     d8c:	strhne	r0, [r4]
     d90:	mov	r0, r6
     d94:	sub	sp, fp, #24
     d98:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}

00000d9c <coda_bin_cursor_read_uint16>:
     d9c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
     da0:	add	fp, sp, #24
     da4:	sub	sp, sp, #64	; 0x40
     da8:	mov	r5, r0
     dac:	ldr	r0, [r0, #4]
     db0:	mov	r4, r1
     db4:	sub	r0, r0, #1
     db8:	add	r0, r5, r0, lsl #4
     dbc:	ldr	r3, [r0, #8]
     dc0:	ldr	r1, [r3]
     dc4:	cmp	r1, #99	; 0x63
     dc8:	ldrhi	r3, [r3, #4]
     dcc:	ldr	r2, [r3, #24]
     dd0:	ldr	r1, [r3, #28]
     dd4:	str	r1, [fp, #-28]	; 0xffffffe4
     dd8:	str	r2, [fp, #-32]	; 0xffffffe0
     ddc:	ldrd	r8, [r0, #16]
     de0:	ldr	r7, [r3, #44]	; 0x2c
     de4:	and	r0, r2, r1
     de8:	cmn	r0, #1
     dec:	beq	e48 <coda_bin_cursor_read_uint16+0xac>
     df0:	tst	r8, #7
     df4:	eoreq	r0, r2, #16
     df8:	orrseq	r0, r0, r1
     dfc:	beq	ee0 <coda_bin_cursor_read_uint16+0x144>
     e00:	cmp	r7, #0
     e04:	mov	r3, r4
     e08:	bne	e24 <coda_bin_cursor_read_uint16+0x88>
     e0c:	lsr	r0, r2, #3
     e10:	tst	r2, #7
     e14:	orr	r0, r0, r1, lsl #29
     e18:	addne	r0, r0, #1
     e1c:	sub	r0, r4, r0
     e20:	add	r3, r0, #2
     e24:	mov	r0, #0
     e28:	strh	r0, [r4]
     e2c:	ldr	r0, [r5]
     e30:	str	r2, [sp]
     e34:	stmib	sp, {r1, r3}
     e38:	mov	r2, r8
     e3c:	mov	r3, r9
     e40:	bl	3e0 <read_bits>
     e44:	b	f04 <coda_bin_cursor_read_uint16+0x168>
     e48:	sub	r1, fp, #32
     e4c:	mov	r0, r5
     e50:	bl	0 <coda_bin_cursor_get_bit_size>
     e54:	mvn	r6, #0
     e58:	cmp	r0, #0
     e5c:	bne	f18 <coda_bin_cursor_read_uint16+0x17c>
     e60:	ldr	r2, [fp, #-32]	; 0xffffffe0
     e64:	ldr	r1, [fp, #-28]	; 0xffffffe4
     e68:	subs	r0, r2, #17
     e6c:	sbcs	r0, r1, #0
     e70:	bcc	df0 <coda_bin_cursor_read_uint16+0x54>
     e74:	add	r8, sp, #35	; 0x23
     e78:	mov	r0, r2
     e7c:	mov	r2, r8
     e80:	bl	0 <coda_str64>
     e84:	ldr	r0, [r5, #4]
     e88:	add	r4, r5, #8
     e8c:	add	r7, sp, #14
     e90:	mov	r2, r7
     e94:	add	r0, r4, r0, lsl #4
     e98:	ldrd	r0, [r0, #-8]
     e9c:	lsr	r0, r0, #3
     ea0:	orr	r0, r0, r1, lsl #29
     ea4:	asr	r1, r1, #3
     ea8:	bl	0 <coda_str64>
     eac:	ldr	r0, [r5, #4]
     eb0:	movw	r1, #0
     eb4:	mov	r2, r8
     eb8:	mov	r3, r7
     ebc:	movt	r1, #0
     ec0:	add	r0, r4, r0, lsl #4
     ec4:	ldr	r0, [r0, #-8]
     ec8:	and	r0, r0, #7
     ecc:	str	r0, [sp]
     ed0:	movw	r0, #65236	; 0xfed4
     ed4:	movt	r0, #65535	; 0xffff
     ed8:	bl	0 <coda_set_error>
     edc:	b	f18 <coda_bin_cursor_read_uint16+0x17c>
     ee0:	ldr	r0, [r5]
     ee4:	mov	r2, #2
     ee8:	mov	r1, #0
     eec:	asr	r3, r9, #3
     ef0:	str	r2, [sp]
     ef4:	stmib	sp, {r1, r4}
     ef8:	lsr	r1, r8, #3
     efc:	orr	r2, r1, r9, lsl #29
     f00:	bl	8bc <read_bytes>
     f04:	cmp	r0, #0
     f08:	mvn	r6, #0
     f0c:	moveq	r6, #0
     f10:	cmpeq	r7, #0
     f14:	beq	f24 <coda_bin_cursor_read_uint16+0x188>
     f18:	mov	r0, r6
     f1c:	sub	sp, fp, #24
     f20:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
     f24:	ldrh	r0, [r4]
     f28:	rev16	r0, r0
     f2c:	strh	r0, [r4]
     f30:	b	f18 <coda_bin_cursor_read_uint16+0x17c>

00000f34 <coda_bin_cursor_read_int32>:
     f34:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
     f38:	add	fp, sp, #24
     f3c:	sub	sp, sp, #64	; 0x40
     f40:	mov	r5, r0
     f44:	ldr	r0, [r0, #4]
     f48:	mov	r4, r1
     f4c:	sub	r0, r0, #1
     f50:	add	r0, r5, r0, lsl #4
     f54:	ldr	r3, [r0, #8]
     f58:	ldr	r1, [r3]
     f5c:	cmp	r1, #99	; 0x63
     f60:	ldrhi	r3, [r3, #4]
     f64:	ldr	r2, [r3, #24]
     f68:	ldr	r1, [r3, #28]
     f6c:	str	r1, [fp, #-28]	; 0xffffffe4
     f70:	str	r2, [fp, #-32]	; 0xffffffe0
     f74:	ldrd	r8, [r0, #16]
     f78:	ldr	r7, [r3, #44]	; 0x2c
     f7c:	and	r0, r2, r1
     f80:	cmn	r0, #1
     f84:	beq	fe0 <coda_bin_cursor_read_int32+0xac>
     f88:	tst	r8, #7
     f8c:	eoreq	r0, r2, #32
     f90:	orrseq	r0, r0, r1
     f94:	beq	1078 <coda_bin_cursor_read_int32+0x144>
     f98:	cmp	r7, #0
     f9c:	mov	r3, r4
     fa0:	bne	fbc <coda_bin_cursor_read_int32+0x88>
     fa4:	lsr	r0, r2, #3
     fa8:	tst	r2, #7
     fac:	orr	r0, r0, r1, lsl #29
     fb0:	addne	r0, r0, #1
     fb4:	sub	r0, r4, r0
     fb8:	add	r3, r0, #4
     fbc:	mov	r0, #0
     fc0:	str	r0, [r4]
     fc4:	ldr	r0, [r5]
     fc8:	str	r2, [sp]
     fcc:	stmib	sp, {r1, r3}
     fd0:	mov	r2, r8
     fd4:	mov	r3, r9
     fd8:	bl	3e0 <read_bits>
     fdc:	b	109c <coda_bin_cursor_read_int32+0x168>
     fe0:	sub	r1, fp, #32
     fe4:	mov	r0, r5
     fe8:	bl	0 <coda_bin_cursor_get_bit_size>
     fec:	mvn	r6, #0
     ff0:	cmp	r0, #0
     ff4:	bne	10f0 <coda_bin_cursor_read_int32+0x1bc>
     ff8:	ldr	r2, [fp, #-32]	; 0xffffffe0
     ffc:	ldr	r1, [fp, #-28]	; 0xffffffe4
    1000:	subs	r0, r2, #33	; 0x21
    1004:	sbcs	r0, r1, #0
    1008:	bcc	f88 <coda_bin_cursor_read_int32+0x54>
    100c:	add	r8, sp, #35	; 0x23
    1010:	mov	r0, r2
    1014:	mov	r2, r8
    1018:	bl	0 <coda_str64>
    101c:	ldr	r0, [r5, #4]
    1020:	add	r4, r5, #8
    1024:	add	r7, sp, #14
    1028:	mov	r2, r7
    102c:	add	r0, r4, r0, lsl #4
    1030:	ldrd	r0, [r0, #-8]
    1034:	lsr	r0, r0, #3
    1038:	orr	r0, r0, r1, lsl #29
    103c:	asr	r1, r1, #3
    1040:	bl	0 <coda_str64>
    1044:	ldr	r0, [r5, #4]
    1048:	movw	r1, #0
    104c:	mov	r2, r8
    1050:	mov	r3, r7
    1054:	movt	r1, #0
    1058:	add	r0, r4, r0, lsl #4
    105c:	ldr	r0, [r0, #-8]
    1060:	and	r0, r0, #7
    1064:	str	r0, [sp]
    1068:	movw	r0, #65236	; 0xfed4
    106c:	movt	r0, #65535	; 0xffff
    1070:	bl	0 <coda_set_error>
    1074:	b	10f0 <coda_bin_cursor_read_int32+0x1bc>
    1078:	ldr	r0, [r5]
    107c:	mov	r2, #4
    1080:	mov	r1, #0
    1084:	asr	r3, r9, #3
    1088:	str	r2, [sp]
    108c:	stmib	sp, {r1, r4}
    1090:	lsr	r1, r8, #3
    1094:	orr	r2, r1, r9, lsl #29
    1098:	bl	8bc <read_bytes>
    109c:	mvn	r6, #0
    10a0:	cmp	r0, #0
    10a4:	bne	10f0 <coda_bin_cursor_read_int32+0x1bc>
    10a8:	cmp	r7, #0
    10ac:	bne	10bc <coda_bin_cursor_read_int32+0x188>
    10b0:	ldr	r0, [r4]
    10b4:	rev	r0, r0
    10b8:	str	r0, [r4]
    10bc:	ldr	r0, [fp, #-32]	; 0xffffffe0
    10c0:	ldr	r1, [fp, #-28]	; 0xffffffe4
    10c4:	mov	r6, #0
    10c8:	rsbs	r2, r0, #31
    10cc:	rscs	r1, r1, #0
    10d0:	blt	10f0 <coda_bin_cursor_read_int32+0x1bc>
    10d4:	ldr	r1, [r4]
    10d8:	sub	r2, r0, #1
    10dc:	mov	r3, #1
    10e0:	tst	r1, r3, lsl r2
    10e4:	mvnne	r2, #0
    10e8:	orrne	r0, r1, r2, lsl r0
    10ec:	strne	r0, [r4]
    10f0:	mov	r0, r6
    10f4:	sub	sp, fp, #24
    10f8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}

000010fc <coda_bin_cursor_read_uint32>:
    10fc:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
    1100:	add	fp, sp, #24
    1104:	sub	sp, sp, #64	; 0x40
    1108:	mov	r5, r0
    110c:	ldr	r0, [r0, #4]
    1110:	mov	r4, r1
    1114:	sub	r0, r0, #1
    1118:	add	r0, r5, r0, lsl #4
    111c:	ldr	r3, [r0, #8]
    1120:	ldr	r1, [r3]
    1124:	cmp	r1, #99	; 0x63
    1128:	ldrhi	r3, [r3, #4]
    112c:	ldr	r2, [r3, #24]
    1130:	ldr	r1, [r3, #28]
    1134:	str	r1, [fp, #-28]	; 0xffffffe4
    1138:	str	r2, [fp, #-32]	; 0xffffffe0
    113c:	ldrd	r8, [r0, #16]
    1140:	ldr	r7, [r3, #44]	; 0x2c
    1144:	and	r0, r2, r1
    1148:	cmn	r0, #1
    114c:	beq	11a8 <coda_bin_cursor_read_uint32+0xac>
    1150:	tst	r8, #7
    1154:	eoreq	r0, r2, #32
    1158:	orrseq	r0, r0, r1
    115c:	beq	1240 <coda_bin_cursor_read_uint32+0x144>
    1160:	cmp	r7, #0
    1164:	mov	r3, r4
    1168:	bne	1184 <coda_bin_cursor_read_uint32+0x88>
    116c:	lsr	r0, r2, #3
    1170:	tst	r2, #7
    1174:	orr	r0, r0, r1, lsl #29
    1178:	addne	r0, r0, #1
    117c:	sub	r0, r4, r0
    1180:	add	r3, r0, #4
    1184:	mov	r0, #0
    1188:	str	r0, [r4]
    118c:	ldr	r0, [r5]
    1190:	str	r2, [sp]
    1194:	stmib	sp, {r1, r3}
    1198:	mov	r2, r8
    119c:	mov	r3, r9
    11a0:	bl	3e0 <read_bits>
    11a4:	b	1264 <coda_bin_cursor_read_uint32+0x168>
    11a8:	sub	r1, fp, #32
    11ac:	mov	r0, r5
    11b0:	bl	0 <coda_bin_cursor_get_bit_size>
    11b4:	mvn	r6, #0
    11b8:	cmp	r0, #0
    11bc:	bne	1278 <coda_bin_cursor_read_uint32+0x17c>
    11c0:	ldr	r2, [fp, #-32]	; 0xffffffe0
    11c4:	ldr	r1, [fp, #-28]	; 0xffffffe4
    11c8:	subs	r0, r2, #33	; 0x21
    11cc:	sbcs	r0, r1, #0
    11d0:	bcc	1150 <coda_bin_cursor_read_uint32+0x54>
    11d4:	add	r8, sp, #35	; 0x23
    11d8:	mov	r0, r2
    11dc:	mov	r2, r8
    11e0:	bl	0 <coda_str64>
    11e4:	ldr	r0, [r5, #4]
    11e8:	add	r4, r5, #8
    11ec:	add	r7, sp, #14
    11f0:	mov	r2, r7
    11f4:	add	r0, r4, r0, lsl #4
    11f8:	ldrd	r0, [r0, #-8]
    11fc:	lsr	r0, r0, #3
    1200:	orr	r0, r0, r1, lsl #29
    1204:	asr	r1, r1, #3
    1208:	bl	0 <coda_str64>
    120c:	ldr	r0, [r5, #4]
    1210:	movw	r1, #0
    1214:	mov	r2, r8
    1218:	mov	r3, r7
    121c:	movt	r1, #0
    1220:	add	r0, r4, r0, lsl #4
    1224:	ldr	r0, [r0, #-8]
    1228:	and	r0, r0, #7
    122c:	str	r0, [sp]
    1230:	movw	r0, #65236	; 0xfed4
    1234:	movt	r0, #65535	; 0xffff
    1238:	bl	0 <coda_set_error>
    123c:	b	1278 <coda_bin_cursor_read_uint32+0x17c>
    1240:	ldr	r0, [r5]
    1244:	mov	r2, #4
    1248:	mov	r1, #0
    124c:	asr	r3, r9, #3
    1250:	str	r2, [sp]
    1254:	stmib	sp, {r1, r4}
    1258:	lsr	r1, r8, #3
    125c:	orr	r2, r1, r9, lsl #29
    1260:	bl	8bc <read_bytes>
    1264:	cmp	r0, #0
    1268:	mvn	r6, #0
    126c:	moveq	r6, #0
    1270:	cmpeq	r7, #0
    1274:	beq	1284 <coda_bin_cursor_read_uint32+0x188>
    1278:	mov	r0, r6
    127c:	sub	sp, fp, #24
    1280:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
    1284:	ldr	r0, [r4]
    1288:	rev	r0, r0
    128c:	str	r0, [r4]
    1290:	b	1278 <coda_bin_cursor_read_uint32+0x17c>

00001294 <coda_bin_cursor_read_int64>:
    1294:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
    1298:	add	fp, sp, #24
    129c:	sub	sp, sp, #64	; 0x40
    12a0:	mov	r5, r0
    12a4:	ldr	r0, [r0, #4]
    12a8:	mov	r4, r1
    12ac:	sub	r0, r0, #1
    12b0:	add	r0, r5, r0, lsl #4
    12b4:	ldr	r3, [r0, #8]
    12b8:	ldr	r1, [r3]
    12bc:	cmp	r1, #99	; 0x63
    12c0:	ldrhi	r3, [r3, #4]
    12c4:	ldr	r2, [r3, #24]
    12c8:	ldr	r1, [r3, #28]
    12cc:	str	r1, [fp, #-28]	; 0xffffffe4
    12d0:	str	r2, [fp, #-32]	; 0xffffffe0
    12d4:	ldrd	r8, [r0, #16]
    12d8:	ldr	r7, [r3, #44]	; 0x2c
    12dc:	and	r0, r2, r1
    12e0:	cmn	r0, #1
    12e4:	beq	1344 <coda_bin_cursor_read_int64+0xb0>
    12e8:	tst	r8, #7
    12ec:	eoreq	r0, r2, #64	; 0x40
    12f0:	orrseq	r0, r0, r1
    12f4:	beq	13dc <coda_bin_cursor_read_int64+0x148>
    12f8:	cmp	r7, #0
    12fc:	mov	r3, r4
    1300:	bne	131c <coda_bin_cursor_read_int64+0x88>
    1304:	lsr	r0, r2, #3
    1308:	tst	r2, #7
    130c:	orr	r0, r0, r1, lsl #29
    1310:	addne	r0, r0, #1
    1314:	sub	r0, r4, r0
    1318:	add	r3, r0, #8
    131c:	mov	r0, #0
    1320:	str	r0, [r4]
    1324:	str	r0, [r4, #4]
    1328:	ldr	r0, [r5]
    132c:	str	r2, [sp]
    1330:	stmib	sp, {r1, r3}
    1334:	mov	r2, r8
    1338:	mov	r3, r9
    133c:	bl	3e0 <read_bits>
    1340:	b	1400 <coda_bin_cursor_read_int64+0x16c>
    1344:	sub	r1, fp, #32
    1348:	mov	r0, r5
    134c:	bl	0 <coda_bin_cursor_get_bit_size>
    1350:	mvn	r6, #0
    1354:	cmp	r0, #0
    1358:	bne	1490 <coda_bin_cursor_read_int64+0x1fc>
    135c:	ldr	r2, [fp, #-32]	; 0xffffffe0
    1360:	ldr	r1, [fp, #-28]	; 0xffffffe4
    1364:	subs	r0, r2, #65	; 0x41
    1368:	sbcs	r0, r1, #0
    136c:	bcc	12e8 <coda_bin_cursor_read_int64+0x54>
    1370:	add	r8, sp, #35	; 0x23
    1374:	mov	r0, r2
    1378:	mov	r2, r8
    137c:	bl	0 <coda_str64>
    1380:	ldr	r0, [r5, #4]
    1384:	add	r4, r5, #8
    1388:	add	r7, sp, #14
    138c:	mov	r2, r7
    1390:	add	r0, r4, r0, lsl #4
    1394:	ldrd	r0, [r0, #-8]
    1398:	lsr	r0, r0, #3
    139c:	orr	r0, r0, r1, lsl #29
    13a0:	asr	r1, r1, #3
    13a4:	bl	0 <coda_str64>
    13a8:	ldr	r0, [r5, #4]
    13ac:	movw	r1, #0
    13b0:	mov	r2, r8
    13b4:	mov	r3, r7
    13b8:	movt	r1, #0
    13bc:	add	r0, r4, r0, lsl #4
    13c0:	ldr	r0, [r0, #-8]
    13c4:	and	r0, r0, #7
    13c8:	str	r0, [sp]
    13cc:	movw	r0, #65236	; 0xfed4
    13d0:	movt	r0, #65535	; 0xffff
    13d4:	bl	0 <coda_set_error>
    13d8:	b	1490 <coda_bin_cursor_read_int64+0x1fc>
    13dc:	ldr	r0, [r5]
    13e0:	mov	r2, #8
    13e4:	mov	r1, #0
    13e8:	asr	r3, r9, #3
    13ec:	str	r2, [sp]
    13f0:	stmib	sp, {r1, r4}
    13f4:	lsr	r1, r8, #3
    13f8:	orr	r2, r1, r9, lsl #29
    13fc:	bl	8bc <read_bytes>
    1400:	mvn	r6, #0
    1404:	cmp	r0, #0
    1408:	bne	1490 <coda_bin_cursor_read_int64+0x1fc>
    140c:	cmp	r7, #0
    1410:	bne	1428 <coda_bin_cursor_read_int64+0x194>
    1414:	ldr	r0, [r4]
    1418:	ldr	r1, [r4, #4]
    141c:	rev	r2, r1
    1420:	rev	r3, r0
    1424:	strd	r2, [r4]
    1428:	ldr	r0, [fp, #-32]	; 0xffffffe0
    142c:	ldr	r1, [fp, #-28]	; 0xffffffe4
    1430:	mov	r6, #0
    1434:	rsbs	r2, r0, #63	; 0x3f
    1438:	rscs	r1, r1, #0
    143c:	blt	1490 <coda_bin_cursor_read_int64+0x1fc>
    1440:	rsb	r1, r0, #33	; 0x21
    1444:	mov	ip, #1
    1448:	ldr	r2, [r4]
    144c:	subs	r5, r0, #33	; 0x21
    1450:	sub	r3, r0, #1
    1454:	lsr	r7, ip, r1
    1458:	ldr	r1, [r4, #4]
    145c:	lslpl	r7, ip, r5
    1460:	cmp	r5, #0
    1464:	lsl	r3, ip, r3
    1468:	movwpl	r3, #0
    146c:	and	r3, r2, r3
    1470:	and	r7, r1, r7
    1474:	orrs	r3, r3, r7
    1478:	beq	1490 <coda_bin_cursor_read_int64+0x1fc>
    147c:	mvn	r3, #0
    1480:	orr	r2, r2, r3, lsl r0
    1484:	lsl	r0, r3, r0
    1488:	orr	r3, r1, r0, asr #31
    148c:	strd	r2, [r4]
    1490:	mov	r0, r6
    1494:	sub	sp, fp, #24
    1498:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}

0000149c <coda_bin_cursor_read_uint64>:
    149c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
    14a0:	add	fp, sp, #24
    14a4:	sub	sp, sp, #64	; 0x40
    14a8:	mov	r5, r0
    14ac:	ldr	r0, [r0, #4]
    14b0:	mov	r4, r1
    14b4:	sub	r0, r0, #1
    14b8:	add	r0, r5, r0, lsl #4
    14bc:	ldr	r3, [r0, #8]
    14c0:	ldr	r1, [r3]
    14c4:	cmp	r1, #99	; 0x63
    14c8:	ldrhi	r3, [r3, #4]
    14cc:	ldr	r2, [r3, #24]
    14d0:	ldr	r1, [r3, #28]
    14d4:	str	r1, [fp, #-28]	; 0xffffffe4
    14d8:	str	r2, [fp, #-32]	; 0xffffffe0
    14dc:	ldrd	r8, [r0, #16]
    14e0:	ldr	r7, [r3, #44]	; 0x2c
    14e4:	and	r0, r2, r1
    14e8:	cmn	r0, #1
    14ec:	beq	154c <coda_bin_cursor_read_uint64+0xb0>
    14f0:	tst	r8, #7
    14f4:	eoreq	r0, r2, #64	; 0x40
    14f8:	orrseq	r0, r0, r1
    14fc:	beq	15e4 <coda_bin_cursor_read_uint64+0x148>
    1500:	cmp	r7, #0
    1504:	mov	r3, r4
    1508:	bne	1524 <coda_bin_cursor_read_uint64+0x88>
    150c:	lsr	r0, r2, #3
    1510:	tst	r2, #7
    1514:	orr	r0, r0, r1, lsl #29
    1518:	addne	r0, r0, #1
    151c:	sub	r0, r4, r0
    1520:	add	r3, r0, #8
    1524:	mov	r0, #0
    1528:	str	r0, [r4]
    152c:	str	r0, [r4, #4]
    1530:	ldr	r0, [r5]
    1534:	str	r2, [sp]
    1538:	stmib	sp, {r1, r3}
    153c:	mov	r2, r8
    1540:	mov	r3, r9
    1544:	bl	3e0 <read_bits>
    1548:	b	1608 <coda_bin_cursor_read_uint64+0x16c>
    154c:	sub	r1, fp, #32
    1550:	mov	r0, r5
    1554:	bl	0 <coda_bin_cursor_get_bit_size>
    1558:	mvn	r6, #0
    155c:	cmp	r0, #0
    1560:	bne	161c <coda_bin_cursor_read_uint64+0x180>
    1564:	ldr	r2, [fp, #-32]	; 0xffffffe0
    1568:	ldr	r1, [fp, #-28]	; 0xffffffe4
    156c:	subs	r0, r2, #65	; 0x41
    1570:	sbcs	r0, r1, #0
    1574:	bcc	14f0 <coda_bin_cursor_read_uint64+0x54>
    1578:	add	r8, sp, #35	; 0x23
    157c:	mov	r0, r2
    1580:	mov	r2, r8
    1584:	bl	0 <coda_str64>
    1588:	ldr	r0, [r5, #4]
    158c:	add	r4, r5, #8
    1590:	add	r7, sp, #14
    1594:	mov	r2, r7
    1598:	add	r0, r4, r0, lsl #4
    159c:	ldrd	r0, [r0, #-8]
    15a0:	lsr	r0, r0, #3
    15a4:	orr	r0, r0, r1, lsl #29
    15a8:	asr	r1, r1, #3
    15ac:	bl	0 <coda_str64>
    15b0:	ldr	r0, [r5, #4]
    15b4:	movw	r1, #0
    15b8:	mov	r2, r8
    15bc:	mov	r3, r7
    15c0:	movt	r1, #0
    15c4:	add	r0, r4, r0, lsl #4
    15c8:	ldr	r0, [r0, #-8]
    15cc:	and	r0, r0, #7
    15d0:	str	r0, [sp]
    15d4:	movw	r0, #65236	; 0xfed4
    15d8:	movt	r0, #65535	; 0xffff
    15dc:	bl	0 <coda_set_error>
    15e0:	b	161c <coda_bin_cursor_read_uint64+0x180>
    15e4:	ldr	r0, [r5]
    15e8:	mov	r2, #8
    15ec:	mov	r1, #0
    15f0:	asr	r3, r9, #3
    15f4:	str	r2, [sp]
    15f8:	stmib	sp, {r1, r4}
    15fc:	lsr	r1, r8, #3
    1600:	orr	r2, r1, r9, lsl #29
    1604:	bl	8bc <read_bytes>
    1608:	cmp	r0, #0
    160c:	mvn	r6, #0
    1610:	moveq	r6, #0
    1614:	cmpeq	r7, #0
    1618:	beq	1628 <coda_bin_cursor_read_uint64+0x18c>
    161c:	mov	r0, r6
    1620:	sub	sp, fp, #24
    1624:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
    1628:	ldr	r0, [r4]
    162c:	ldr	r1, [r4, #4]
    1630:	rev	r2, r1
    1634:	rev	r3, r0
    1638:	strd	r2, [r4]
    163c:	b	161c <coda_bin_cursor_read_uint64+0x180>

00001640 <coda_bin_cursor_read_float>:
    1640:	push	{r4, r5, r6, sl, fp, lr}
    1644:	add	fp, sp, #16
    1648:	sub	sp, sp, #16
    164c:	mov	r4, r1
    1650:	mov	r1, r0
    1654:	ldr	r0, [r0, #4]
    1658:	sub	r0, r0, #1
    165c:	add	r2, r1, r0, lsl #4
    1660:	ldr	r0, [r1], r0, lsl #4
    1664:	ldr	r3, [r2, #8]
    1668:	ldr	r2, [r3]
    166c:	cmp	r2, #99	; 0x63
    1670:	ldr	r2, [r1, #16]
    1674:	ldr	r1, [r1, #20]
    1678:	ldrhi	r3, [r3, #4]
    167c:	tst	r2, #7
    1680:	ldr	r6, [r3, #44]	; 0x2c
    1684:	mov	r3, #0
    1688:	beq	16a4 <coda_bin_cursor_read_float+0x64>
    168c:	mov	r5, #32
    1690:	str	r5, [sp]
    1694:	stmib	sp, {r3, r4}
    1698:	mov	r3, r1
    169c:	bl	3e0 <read_bits>
    16a0:	b	16c0 <coda_bin_cursor_read_float+0x80>
    16a4:	lsr	r2, r2, #3
    16a8:	mov	r5, #4
    16ac:	orr	r2, r2, r1, lsl #29
    16b0:	str	r5, [sp]
    16b4:	stmib	sp, {r3, r4}
    16b8:	asr	r3, r1, #3
    16bc:	bl	8bc <read_bytes>
    16c0:	mov	r1, r0
    16c4:	mvn	r0, #0
    16c8:	cmp	r1, #0
    16cc:	moveq	r0, #0
    16d0:	cmpeq	r6, #0
    16d4:	beq	16e0 <coda_bin_cursor_read_float+0xa0>
    16d8:	sub	sp, fp, #16
    16dc:	pop	{r4, r5, r6, sl, fp, pc}
    16e0:	ldr	r1, [r4]
    16e4:	rev	r1, r1
    16e8:	str	r1, [r4]
    16ec:	sub	sp, fp, #16
    16f0:	pop	{r4, r5, r6, sl, fp, pc}

000016f4 <coda_bin_cursor_read_double>:
    16f4:	push	{r4, r5, r6, sl, fp, lr}
    16f8:	add	fp, sp, #16
    16fc:	sub	sp, sp, #16
    1700:	mov	r4, r1
    1704:	mov	r1, r0
    1708:	ldr	r0, [r0, #4]
    170c:	sub	r0, r0, #1
    1710:	add	r2, r1, r0, lsl #4
    1714:	ldr	r0, [r1], r0, lsl #4
    1718:	ldr	r3, [r2, #8]
    171c:	ldr	r2, [r3]
    1720:	cmp	r2, #99	; 0x63
    1724:	ldr	r2, [r1, #16]
    1728:	ldr	r1, [r1, #20]
    172c:	ldrhi	r3, [r3, #4]
    1730:	tst	r2, #7
    1734:	ldr	r6, [r3, #44]	; 0x2c
    1738:	mov	r3, #0
    173c:	beq	1758 <coda_bin_cursor_read_double+0x64>
    1740:	mov	r5, #64	; 0x40
    1744:	str	r5, [sp]
    1748:	stmib	sp, {r3, r4}
    174c:	mov	r3, r1
    1750:	bl	3e0 <read_bits>
    1754:	b	1774 <coda_bin_cursor_read_double+0x80>
    1758:	lsr	r2, r2, #3
    175c:	mov	r5, #8
    1760:	orr	r2, r2, r1, lsl #29
    1764:	str	r5, [sp]
    1768:	stmib	sp, {r3, r4}
    176c:	asr	r3, r1, #3
    1770:	bl	8bc <read_bytes>
    1774:	mov	r1, r0
    1778:	mvn	r0, #0
    177c:	cmp	r1, #0
    1780:	moveq	r0, #0
    1784:	cmpeq	r6, #0
    1788:	beq	1794 <coda_bin_cursor_read_double+0xa0>
    178c:	sub	sp, fp, #16
    1790:	pop	{r4, r5, r6, sl, fp, pc}
    1794:	ldr	r2, [r4, #4]
    1798:	ldr	r1, [r4]
    179c:	rev	r2, r2
    17a0:	rev	r3, r1
    17a4:	strd	r2, [r4]
    17a8:	sub	sp, fp, #16
    17ac:	pop	{r4, r5, r6, sl, fp, pc}

000017b0 <coda_bin_cursor_read_char>:
    17b0:	b	a2c <coda_bin_cursor_read_uint8>

000017b4 <coda_bin_cursor_read_string>:
    17b4:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
    17b8:	add	fp, sp, #24
    17bc:	sub	sp, sp, #64	; 0x40
    17c0:	mov	r5, r0
    17c4:	ldr	r0, [r0, #4]
    17c8:	mov	r9, r1
    17cc:	mov	r6, r2
    17d0:	sub	r0, r0, #1
    17d4:	add	r1, r5, r0, lsl #4
    17d8:	ldr	r0, [r1, #8]
    17dc:	ldr	r8, [r1, #16]
    17e0:	ldr	r7, [r1, #20]
    17e4:	ldr	r2, [r0]
    17e8:	cmp	r2, #99	; 0x63
    17ec:	ldrhi	r0, [r0, #4]
    17f0:	ldr	r1, [r0, #28]
    17f4:	cmn	r1, #1
    17f8:	ble	187c <coda_bin_cursor_read_string+0xc8>
    17fc:	ldr	r0, [r0, #24]
    1800:	lsr	r0, r0, #3
    1804:	lsr	r2, r1, #3
    1808:	orr	r4, r0, r1, lsl #29
    180c:	mov	r0, #0
    1810:	subs	r3, r4, r6
    1814:	sub	r3, r6, #1
    1818:	sbcs	r2, r2, r6, asr #31
    181c:	mov	r2, #0
    1820:	movwlt	r2, #1
    1824:	cmp	r2, #0
    1828:	asr	r2, r3, #31
    182c:	moveq	r4, r3
    1830:	lsrne	r2, r1, #3
    1834:	subs	r1, r4, #1
    1838:	sbcs	r1, r2, #0
    183c:	blt	189c <coda_bin_cursor_read_string+0xe8>
    1840:	ldr	r0, [r5]
    1844:	lsl	r1, r2, #3
    1848:	lsl	r2, r4, #3
    184c:	mov	r3, r7
    1850:	orr	r1, r1, r4, lsr #29
    1854:	str	r2, [sp]
    1858:	mov	r2, r8
    185c:	stmib	sp, {r1, r9}
    1860:	bl	3e0 <read_bits>
    1864:	mov	r1, r0
    1868:	mvn	r0, #0
    186c:	cmp	r1, #0
    1870:	beq	18a8 <coda_bin_cursor_read_string+0xf4>
    1874:	sub	sp, fp, #24
    1878:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
    187c:	sub	r1, fp, #32
    1880:	mov	r0, r5
    1884:	bl	0 <coda_bin_cursor_get_bit_size>
    1888:	cmp	r0, #0
    188c:	beq	18b8 <coda_bin_cursor_read_string+0x104>
    1890:	mvn	r0, #0
    1894:	sub	sp, fp, #24
    1898:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
    189c:	strb	r0, [r9]
    18a0:	sub	sp, fp, #24
    18a4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
    18a8:	mov	r0, #0
    18ac:	strb	r0, [r9, r4]
    18b0:	sub	sp, fp, #24
    18b4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
    18b8:	ldr	r1, [fp, #-28]	; 0xffffffe4
    18bc:	ldr	r0, [fp, #-32]	; 0xffffffe0
    18c0:	cmn	r1, #1
    18c4:	ble	18e8 <coda_bin_cursor_read_string+0x134>
    18c8:	tst	r0, #7
    18cc:	beq	1800 <coda_bin_cursor_read_string+0x4c>
    18d0:	movw	r0, #65236	; 0xfed4
    18d4:	movw	r1, #0
    18d8:	movt	r0, #65535	; 0xffff
    18dc:	movt	r1, #0
    18e0:	bl	0 <coda_set_error>
    18e4:	b	1890 <coda_bin_cursor_read_string+0xdc>
    18e8:	add	r4, sp, #35	; 0x23
    18ec:	mov	r2, r4
    18f0:	bl	0 <coda_str64>
    18f4:	ldr	r0, [r5, #4]
    18f8:	add	r7, r5, #8
    18fc:	add	r6, sp, #14
    1900:	mov	r2, r6
    1904:	add	r0, r7, r0, lsl #4
    1908:	ldrd	r0, [r0, #-8]
    190c:	lsr	r0, r0, #3
    1910:	orr	r0, r0, r1, lsl #29
    1914:	asr	r1, r1, #3
    1918:	bl	0 <coda_str64>
    191c:	ldr	r0, [r5, #4]
    1920:	movw	r1, #0
    1924:	mov	r2, r4
    1928:	mov	r3, r6
    192c:	movt	r1, #0
    1930:	add	r0, r7, r0, lsl #4
    1934:	ldr	r0, [r0, #-8]
    1938:	and	r0, r0, #7
    193c:	str	r0, [sp]
    1940:	movw	r0, #65236	; 0xfed4
    1944:	movt	r0, #65535	; 0xffff
    1948:	bl	0 <coda_set_error>
    194c:	b	1890 <coda_bin_cursor_read_string+0xdc>

00001950 <coda_bin_cursor_read_bits>:
    1950:	push	{r4, r5, fp, lr}
    1954:	add	fp, sp, #8
    1958:	sub	sp, sp, #16
    195c:	ldrd	r4, [r0]
    1960:	ldr	r5, [r0, r5, lsl #4]!
    1964:	ldr	r0, [r0, #4]
    1968:	str	r1, [sp, #8]
    196c:	ldr	r1, [fp, #12]
    1970:	adds	r2, r5, r2
    1974:	str	r1, [sp, #4]
    1978:	ldr	r1, [fp, #8]
    197c:	adc	r3, r0, r3
    1980:	mov	r0, r4
    1984:	str	r1, [sp]
    1988:	bl	3e0 <read_bits>
    198c:	sub	sp, fp, #8
    1990:	pop	{r4, r5, fp, pc}

00001994 <coda_bin_cursor_read_bytes>:
    1994:	push	{r4, r5, fp, lr}
    1998:	add	fp, sp, #8
    199c:	sub	sp, sp, #16
    19a0:	ldr	r5, [r0, #4]
    19a4:	mov	r4, r0
    19a8:	ldr	lr, [r4, r5, lsl #4]!
    19ac:	ldr	r5, [fp, #12]
    19b0:	ldr	ip, [r4, #4]
    19b4:	ldr	r4, [fp, #8]
    19b8:	tst	lr, #7
    19bc:	beq	19f4 <coda_bin_cursor_read_bytes+0x60>
    19c0:	lsl	r5, r5, #3
    19c4:	ldr	r0, [r0]
    19c8:	orr	r5, r5, r4, lsr #29
    19cc:	lsl	r4, r4, #3
    19d0:	stm	sp, {r4, r5}
    19d4:	str	r1, [sp, #8]
    19d8:	lsl	r1, r3, #3
    19dc:	orr	r1, r1, r2, lsr #29
    19e0:	adds	r2, lr, r2, lsl #3
    19e4:	adc	r3, ip, r1
    19e8:	bl	3e0 <read_bits>
    19ec:	sub	sp, fp, #8
    19f0:	pop	{r4, r5, fp, pc}
    19f4:	ldr	r0, [r0]
    19f8:	stm	sp, {r4, r5}
    19fc:	str	r1, [sp, #8]
    1a00:	lsr	r1, lr, #3
    1a04:	asr	r5, ip, #3
    1a08:	orr	r1, r1, ip, lsl #29
    1a0c:	adds	r2, r1, r2
    1a10:	adc	r3, r5, r3
    1a14:	bl	8bc <read_bytes>
    1a18:	sub	sp, fp, #8
    1a1c:	pop	{r4, r5, fp, pc}

00001a20 <coda_bin_cursor_read_int8_array>:
    1a20:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1a24:	add	fp, sp, #28
    1a28:	sub	sp, sp, #564	; 0x234
    1a2c:	mov	r5, r0
    1a30:	ldr	r0, [r0, #4]
    1a34:	mov	r9, r1
    1a38:	mov	r8, r2
    1a3c:	add	r0, r5, r0, lsl #4
    1a40:	ldr	r0, [r0, #-8]
    1a44:	ldr	r1, [r0]
    1a48:	cmp	r1, #99	; 0x63
    1a4c:	ldrhi	r0, [r0, #4]
    1a50:	ldr	r0, [r0, #40]	; 0x28
    1a54:	ldr	r0, [r0]
    1a58:	cmp	r0, #0
    1a5c:	beq	1a8c <coda_bin_cursor_read_int8_array+0x6c>
    1a60:	cmp	r0, #1
    1a64:	bne	1c5c <coda_bin_cursor_read_int8_array+0x23c>
    1a68:	movw	r1, #0
    1a6c:	mov	r0, r5
    1a70:	mov	r2, r9
    1a74:	mov	r3, #1
    1a78:	str	r8, [sp]
    1a7c:	movt	r1, #0
    1a80:	bl	1c7c <read_array>
    1a84:	sub	sp, fp, #28
    1a88:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1a8c:	add	r4, sp, #8
    1a90:	add	r1, sp, #4
    1a94:	mov	r0, r5
    1a98:	mov	r2, r4
    1a9c:	bl	0 <coda_cursor_get_array_dim>
    1aa0:	cmp	r0, #0
    1aa4:	bne	1bd4 <coda_bin_cursor_read_int8_array+0x1b4>
    1aa8:	add	r0, sp, #40	; 0x28
    1aac:	mov	r1, r5
    1ab0:	mov	r2, #520	; 0x208
    1ab4:	bl	0 <memcpy>
    1ab8:	ldr	sl, [sp, #4]
    1abc:	cmp	sl, #1
    1ac0:	blt	1ad8 <coda_bin_cursor_read_int8_array+0xb8>
    1ac4:	cmp	sl, #4
    1ac8:	bcs	1ae0 <coda_bin_cursor_read_int8_array+0xc0>
    1acc:	mov	r6, #1
    1ad0:	mov	lr, #0
    1ad4:	b	1b98 <coda_bin_cursor_read_int8_array+0x178>
    1ad8:	mov	r6, #1
    1adc:	b	1bbc <coda_bin_cursor_read_int8_array+0x19c>
    1ae0:	bic	lr, sl, #3
    1ae4:	mov	r2, #1
    1ae8:	vmov.i32	q8, #1	; 0x00000001
    1aec:	sub	r3, lr, #4
    1af0:	add	r2, r2, r3, lsr #2
    1af4:	cmp	r3, #12
    1af8:	and	ip, r2, #3
    1afc:	bcs	1b10 <coda_bin_cursor_read_int8_array+0xf0>
    1b00:	mov	r3, #0
    1b04:	cmp	ip, #0
    1b08:	bne	1b64 <coda_bin_cursor_read_int8_array+0x144>
    1b0c:	b	1b80 <coda_bin_cursor_read_int8_array+0x160>
    1b10:	sub	r6, r2, ip
    1b14:	mov	r3, #0
    1b18:	mov	r2, #64	; 0x40
    1b1c:	mov	r7, r4
    1b20:	vld1.32	{d18-d19}, [r7], r2
    1b24:	add	r0, r4, #16
    1b28:	add	r1, r4, #32
    1b2c:	subs	r6, r6, #4
    1b30:	add	r3, r3, #16
    1b34:	vld1.32	{d20-d21}, [r0]
    1b38:	add	r0, r4, #48	; 0x30
    1b3c:	mov	r4, r7
    1b40:	vmul.i32	q8, q9, q8
    1b44:	vld1.32	{d18-d19}, [r1]
    1b48:	vmul.i32	q8, q10, q8
    1b4c:	vld1.32	{d20-d21}, [r0]
    1b50:	vmul.i32	q8, q9, q8
    1b54:	vmul.i32	q8, q10, q8
    1b58:	bne	1b20 <coda_bin_cursor_read_int8_array+0x100>
    1b5c:	cmp	ip, #0
    1b60:	beq	1b80 <coda_bin_cursor_read_int8_array+0x160>
    1b64:	add	r0, sp, #8
    1b68:	add	r2, r0, r3, lsl #2
    1b6c:	rsb	r3, ip, #0
    1b70:	vld1.32	{d18-d19}, [r2]!
    1b74:	adds	r3, r3, #1
    1b78:	vmul.i32	q8, q9, q8
    1b7c:	bcc	1b70 <coda_bin_cursor_read_int8_array+0x150>
    1b80:	vext.8	q9, q8, q8, #8
    1b84:	cmp	sl, lr
    1b88:	vmul.i32	q0, q8, q9
    1b8c:	vmul.i32	q8, q0, d0[1]
    1b90:	vmov.32	r6, d16[0]
    1b94:	beq	1bb4 <coda_bin_cursor_read_int8_array+0x194>
    1b98:	add	r0, sp, #8
    1b9c:	add	r2, r0, lr, lsl #2
    1ba0:	sub	r0, sl, lr
    1ba4:	ldr	r1, [r2], #4
    1ba8:	subs	r0, r0, #1
    1bac:	mul	r6, r1, r6
    1bb0:	bne	1ba4 <coda_bin_cursor_read_int8_array+0x184>
    1bb4:	cmp	r6, #1
    1bb8:	blt	1c28 <coda_bin_cursor_read_int8_array+0x208>
    1bbc:	add	r0, sp, #40	; 0x28
    1bc0:	mov	r1, #0
    1bc4:	mov	r4, #0
    1bc8:	bl	0 <coda_cursor_goto_array_element_by_index>
    1bcc:	cmp	r0, #0
    1bd0:	beq	1be0 <coda_bin_cursor_read_int8_array+0x1c0>
    1bd4:	mvn	r0, #0
    1bd8:	sub	sp, fp, #28
    1bdc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1be0:	sub	r7, r6, #1
    1be4:	add	sl, sp, #40	; 0x28
    1be8:	b	1bf8 <coda_bin_cursor_read_int8_array+0x1d8>
    1bec:	add	r4, r4, #1
    1bf0:	cmp	r6, r4
    1bf4:	beq	1c28 <coda_bin_cursor_read_int8_array+0x208>
    1bf8:	add	r1, r9, r4
    1bfc:	mov	r0, sl
    1c00:	bl	0 <coda_ascii_cursor_read_int8>
    1c04:	cmp	r0, #0
    1c08:	bne	1bd4 <coda_bin_cursor_read_int8_array+0x1b4>
    1c0c:	cmp	r4, r7
    1c10:	bge	1bec <coda_bin_cursor_read_int8_array+0x1cc>
    1c14:	mov	r0, sl
    1c18:	bl	0 <coda_cursor_goto_next_array_element>
    1c1c:	cmp	r0, #0
    1c20:	beq	1bec <coda_bin_cursor_read_int8_array+0x1cc>
    1c24:	b	1bd4 <coda_bin_cursor_read_int8_array+0x1b4>
    1c28:	cmp	r8, #0
    1c2c:	beq	1c50 <coda_bin_cursor_read_int8_array+0x230>
    1c30:	mov	r0, r5
    1c34:	mov	r1, r9
    1c38:	mov	r2, #1
    1c3c:	bl	1fa4 <transpose_array>
    1c40:	mov	r1, r0
    1c44:	mvn	r0, #0
    1c48:	cmp	r1, #0
    1c4c:	bne	1bd8 <coda_bin_cursor_read_int8_array+0x1b8>
    1c50:	mov	r0, #0
    1c54:	sub	sp, fp, #28
    1c58:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1c5c:	movw	r0, #0
    1c60:	movw	r1, #0
    1c64:	movw	r3, #0
    1c68:	movw	r2, #906	; 0x38a
    1c6c:	movt	r0, #0
    1c70:	movt	r1, #0
    1c74:	movt	r3, #0
    1c78:	bl	0 <__assert_fail>

00001c7c <read_array>:
    1c7c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1c80:	add	fp, sp, #28
    1c84:	sub	sp, sp, #604	; 0x25c
    1c88:	add	r5, sp, #48	; 0x30
    1c8c:	mov	r8, r2
    1c90:	mov	sl, r1
    1c94:	add	r1, sp, #44	; 0x2c
    1c98:	mov	r6, r3
    1c9c:	mov	r4, r0
    1ca0:	mov	r2, r5
    1ca4:	bl	0 <coda_cursor_get_array_dim>
    1ca8:	cmp	r0, #0
    1cac:	beq	1cbc <read_array+0x40>
    1cb0:	mvn	r0, #0
    1cb4:	sub	sp, fp, #28
    1cb8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1cbc:	mov	r9, r6
    1cc0:	ldr	r6, [fp, #8]
    1cc4:	add	r0, sp, #80	; 0x50
    1cc8:	mov	r1, r4
    1ccc:	mov	r2, #520	; 0x208
    1cd0:	bl	0 <memcpy>
    1cd4:	ldr	r0, [sp, #44]	; 0x2c
    1cd8:	cmp	r6, #1
    1cdc:	bne	1e24 <read_array+0x1a8>
    1ce0:	cmp	r0, #1
    1ce4:	ble	1e24 <read_array+0x1a8>
    1ce8:	and	r6, r0, #1
    1cec:	add	ip, sp, #8
    1cf0:	mov	r1, #1
    1cf4:	add	r2, r5, #4
    1cf8:	sub	r7, r6, r0
    1cfc:	add	r3, ip, #4
    1d00:	str	r1, [sp, #8]
    1d04:	ldr	r5, [r2, #-4]
    1d08:	ldr	r4, [r2]
    1d0c:	adds	r7, r7, #2
    1d10:	add	r2, r2, #8
    1d14:	mul	r5, r5, r1
    1d18:	mul	r1, r4, r5
    1d1c:	str	r5, [r3]
    1d20:	str	r1, [r3, #4]
    1d24:	add	r3, r3, #8
    1d28:	bne	1d04 <read_array+0x88>
    1d2c:	mov	r7, sl
    1d30:	cmp	r6, #0
    1d34:	beq	1d44 <read_array+0xc8>
    1d38:	ldr	r2, [r2, #-4]
    1d3c:	mul	r1, r2, r1
    1d40:	str	r1, [r3]
    1d44:	ldr	r4, [ip, r0, lsl #2]
    1d48:	cmp	r4, #1
    1d4c:	blt	1f98 <read_array+0x31c>
    1d50:	add	r0, ip, r0, lsl #2
    1d54:	mov	r1, #0
    1d58:	mov	r5, r9
    1d5c:	mov	r9, #0
    1d60:	mov	sl, ip
    1d64:	ldr	r6, [r0, #-4]
    1d68:	add	r0, sp, #80	; 0x50
    1d6c:	bl	0 <coda_cursor_goto_array_element_by_index>
    1d70:	cmp	r0, #0
    1d74:	bne	1cb0 <read_array+0x34>
    1d78:	sub	r0, sl, #4
    1d7c:	mov	sl, #0
    1d80:	str	r0, [sp, #4]
    1d84:	mla	r1, sl, r5, r8
    1d88:	add	r0, sp, #80	; 0x50
    1d8c:	blx	r7
    1d90:	cmp	r0, #0
    1d94:	bne	1cb0 <read_array+0x34>
    1d98:	add	r9, r9, #1
    1d9c:	cmp	r9, r4
    1da0:	bge	1db4 <read_array+0x138>
    1da4:	add	r0, sp, #80	; 0x50
    1da8:	bl	0 <coda_cursor_goto_next_array_element>
    1dac:	cmp	r0, #0
    1db0:	bne	1cb0 <read_array+0x34>
    1db4:	add	sl, sl, r6
    1db8:	cmp	sl, r4
    1dbc:	blt	1d84 <read_array+0x108>
    1dc0:	cmp	r9, r4
    1dc4:	add	r2, sp, #8
    1dc8:	beq	1f98 <read_array+0x31c>
    1dcc:	ldr	r1, [sp, #44]	; 0x2c
    1dd0:	ldr	r0, [r2, r1, lsl #2]
    1dd4:	add	r2, r2, r1, lsl #2
    1dd8:	ldr	r2, [r2, #-8]
    1ddc:	add	r2, r2, sl
    1de0:	sub	sl, r2, r0
    1de4:	subs	r0, r1, #3
    1de8:	bmi	1d84 <read_array+0x108>
    1dec:	ldr	r0, [sp, #4]
    1df0:	add	r0, r0, r1, lsl #2
    1df4:	sub	r1, r1, #2
    1df8:	ldr	r2, [r0]
    1dfc:	cmp	sl, r2
    1e00:	blt	1d84 <read_array+0x108>
    1e04:	ldr	r3, [r0, #-8]
    1e08:	sub	r2, sl, r2
    1e0c:	sub	r1, r1, #1
    1e10:	sub	r0, r0, #4
    1e14:	cmp	r1, #0
    1e18:	add	sl, r2, r3
    1e1c:	bgt	1df8 <read_array+0x17c>
    1e20:	b	1d84 <read_array+0x108>
    1e24:	cmp	r0, #1
    1e28:	blt	1e44 <read_array+0x1c8>
    1e2c:	cmp	r0, #4
    1e30:	bcs	1e50 <read_array+0x1d4>
    1e34:	mov	r4, #1
    1e38:	mov	lr, #0
    1e3c:	mov	r5, r9
    1e40:	b	1f0c <read_array+0x290>
    1e44:	mov	r4, #1
    1e48:	mov	r5, r9
    1e4c:	b	1f30 <read_array+0x2b4>
    1e50:	bic	lr, r0, #3
    1e54:	mov	r2, #1
    1e58:	vmov.i32	q8, #1	; 0x00000001
    1e5c:	sub	r7, lr, #4
    1e60:	add	r3, r2, r7, lsr #2
    1e64:	cmp	r7, #12
    1e68:	and	ip, r3, #3
    1e6c:	bcs	1e80 <read_array+0x204>
    1e70:	mov	r3, #0
    1e74:	cmp	ip, #0
    1e78:	bne	1ed4 <read_array+0x258>
    1e7c:	b	1ef0 <read_array+0x274>
    1e80:	sub	r6, r3, ip
    1e84:	mov	r3, #0
    1e88:	mov	r4, #64	; 0x40
    1e8c:	mov	r7, r5
    1e90:	vld1.32	{d18-d19}, [r7], r4
    1e94:	add	r1, r5, #16
    1e98:	add	r2, r5, #32
    1e9c:	subs	r6, r6, #4
    1ea0:	add	r3, r3, #16
    1ea4:	vld1.32	{d20-d21}, [r1]
    1ea8:	add	r1, r5, #48	; 0x30
    1eac:	mov	r5, r7
    1eb0:	vmul.i32	q8, q9, q8
    1eb4:	vld1.32	{d18-d19}, [r2]
    1eb8:	vmul.i32	q8, q10, q8
    1ebc:	vld1.32	{d20-d21}, [r1]
    1ec0:	vmul.i32	q8, q9, q8
    1ec4:	vmul.i32	q8, q10, q8
    1ec8:	bne	1e90 <read_array+0x214>
    1ecc:	cmp	ip, #0
    1ed0:	beq	1ef0 <read_array+0x274>
    1ed4:	add	r1, sp, #48	; 0x30
    1ed8:	rsb	r2, ip, #0
    1edc:	add	r3, r1, r3, lsl #2
    1ee0:	vld1.32	{d18-d19}, [r3]!
    1ee4:	adds	r2, r2, #1
    1ee8:	vmul.i32	q8, q9, q8
    1eec:	bcc	1ee0 <read_array+0x264>
    1ef0:	vext.8	q9, q8, q8, #8
    1ef4:	cmp	r0, lr
    1ef8:	mov	r5, r9
    1efc:	vmul.i32	q0, q8, q9
    1f00:	vmul.i32	q8, q0, d0[1]
    1f04:	vmov.32	r4, d16[0]
    1f08:	beq	1f28 <read_array+0x2ac>
    1f0c:	add	r1, sp, #48	; 0x30
    1f10:	sub	r0, r0, lr
    1f14:	add	r2, r1, lr, lsl #2
    1f18:	ldr	r1, [r2], #4
    1f1c:	subs	r0, r0, #1
    1f20:	mul	r4, r1, r4
    1f24:	bne	1f18 <read_array+0x29c>
    1f28:	cmp	r4, #1
    1f2c:	blt	1f98 <read_array+0x31c>
    1f30:	add	r0, sp, #80	; 0x50
    1f34:	mov	r1, #0
    1f38:	mov	r6, #0
    1f3c:	bl	0 <coda_cursor_goto_array_element_by_index>
    1f40:	cmp	r0, #0
    1f44:	bne	1cb0 <read_array+0x34>
    1f48:	sub	r7, r4, #1
    1f4c:	add	r9, sp, #80	; 0x50
    1f50:	b	1f68 <read_array+0x2ec>
    1f54:	add	r6, r6, #1
    1f58:	add	r8, r8, r5
    1f5c:	mov	r0, #0
    1f60:	cmp	r4, r6
    1f64:	beq	1cb4 <read_array+0x38>
    1f68:	mov	r0, r9
    1f6c:	mov	r1, r8
    1f70:	blx	sl
    1f74:	cmp	r0, #0
    1f78:	bne	1cb0 <read_array+0x34>
    1f7c:	cmp	r6, r7
    1f80:	bge	1f54 <read_array+0x2d8>
    1f84:	mov	r0, r9
    1f88:	bl	0 <coda_cursor_goto_next_array_element>
    1f8c:	cmp	r0, #0
    1f90:	beq	1f54 <read_array+0x2d8>
    1f94:	b	1cb0 <read_array+0x34>
    1f98:	mov	r0, #0
    1f9c:	sub	sp, fp, #28
    1fa0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

00001fa4 <transpose_array>:
    1fa4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1fa8:	add	fp, sp, #28
    1fac:	sub	sp, sp, #180	; 0xb4
    1fb0:	sub	r6, fp, #60	; 0x3c
    1fb4:	mov	r8, r2
    1fb8:	str	r1, [sp, #32]
    1fbc:	sub	r1, fp, #64	; 0x40
    1fc0:	mov	r2, r6
    1fc4:	bl	0 <coda_cursor_get_array_dim>
    1fc8:	mvn	r7, #0
    1fcc:	cmp	r0, #0
    1fd0:	bne	2478 <transpose_array+0x4d4>
    1fd4:	ldr	r5, [fp, #-64]	; 0xffffffc0
    1fd8:	mov	r7, #0
    1fdc:	cmp	r5, #2
    1fe0:	blt	2478 <transpose_array+0x4d4>
    1fe4:	add	r9, sp, #72	; 0x48
    1fe8:	lsl	r2, r5, #2
    1fec:	mov	r1, #0
    1ff0:	mov	r7, #0
    1ff4:	mov	r0, r9
    1ff8:	bl	0 <memset>
    1ffc:	mov	r4, #1
    2000:	cmp	r5, #4
    2004:	bcc	205c <transpose_array+0xb8>
    2008:	add	r0, r6, r5, lsl #2
    200c:	vmov.i32	q8, #1	; 0x00000001
    2010:	bic	r7, r5, #3
    2014:	add	r1, sp, #36	; 0x24
    2018:	mvn	r2, #15
    201c:	mov	r3, r7
    2020:	sub	r0, r0, #16
    2024:	vld1.32	{d18-d19}, [r0], r2
    2028:	vld1.32	{d20-d21}, [r6]!
    202c:	subs	r3, r3, #4
    2030:	vrev64.32	q9, q9
    2034:	vmul.i32	q8, q10, q8
    2038:	vext.8	q9, q9, q9, #8
    203c:	vst1.32	{d18-d19}, [r1]!
    2040:	bne	2024 <transpose_array+0x80>
    2044:	vext.8	q9, q8, q8, #8
    2048:	cmp	r5, r7
    204c:	vmul.i32	q0, q8, q9
    2050:	vmul.i32	q8, q0, d0[1]
    2054:	vmov.32	r4, d16[0]
    2058:	beq	208c <transpose_array+0xe8>
    205c:	sub	r0, r7, r5
    2060:	sub	r1, fp, #60	; 0x3c
    2064:	add	r2, sp, #36	; 0x24
    2068:	add	r0, r0, #1
    206c:	ldr	r3, [r1, -r0, lsl #2]
    2070:	add	r0, r0, #1
    2074:	cmp	r0, #1
    2078:	str	r3, [r2, r7, lsl #2]
    207c:	ldr	r3, [r1, r7, lsl #2]
    2080:	add	r7, r7, #1
    2084:	mul	r4, r3, r4
    2088:	bne	206c <transpose_array+0xc8>
    208c:	mov	r7, #0
    2090:	cmp	r4, #2
    2094:	blt	2478 <transpose_array+0x4d4>
    2098:	cmp	r5, #1
    209c:	mov	r1, #1
    20a0:	sub	r6, fp, #100	; 0x64
    20a4:	add	sl, sp, #36	; 0x24
    20a8:	subge	r0, r5, #1
    20ac:	str	r1, [r6, r5, lsl #2]
    20b0:	str	r1, [sl, r5, lsl #2]
    20b4:	strge	r1, [r6, r0, lsl #2]
    20b8:	cmpge	r0, #1
    20bc:	bge	2204 <transpose_array+0x260>
    20c0:	mov	r0, #0
    20c4:	str	r0, [r9, r5, lsl #2]
    20c8:	str	r0, [sl, r5, lsl #2]
    20cc:	mul	r5, r4, r8
    20d0:	mov	r0, r5
    20d4:	bl	0 <malloc>
    20d8:	cmp	r0, #0
    20dc:	str	r0, [sp, #28]
    20e0:	beq	21d8 <transpose_array+0x234>
    20e4:	sub	r0, r8, #1
    20e8:	str	r5, [sp, #8]
    20ec:	cmp	r0, #7
    20f0:	bhi	24e4 <transpose_array+0x540>
    20f4:	add	r1, pc, #0
    20f8:	ldr	pc, [r1, r0, lsl #2]
    20fc:	.word	0x0000211c
    2100:	.word	0x000022e0
    2104:	.word	0x000024e4
    2108:	.word	0x000023a0
    210c:	.word	0x000024e4
    2110:	.word	0x000024e4
    2114:	.word	0x000024e4
    2118:	.word	0x00002220
    211c:	cmp	r4, #1
    2120:	blt	2458 <transpose_array+0x4b4>
    2124:	add	r0, r6, #4
    2128:	ldr	ip, [sp, #36]	; 0x24
    212c:	ldr	lr, [fp, #-100]	; 0xffffff9c
    2130:	mov	r3, #0
    2134:	mov	r1, #0
    2138:	str	r0, [sp, #20]
    213c:	add	r0, sl, #4
    2140:	str	r0, [sp, #16]
    2144:	orr	r0, r9, #4
    2148:	str	r0, [sp, #12]
    214c:	mov	r0, #0
    2150:	str	ip, [sp, #24]
    2154:	b	2168 <transpose_array+0x1c4>
    2158:	ldr	ip, [sp, #24]
    215c:	add	r0, r0, #1
    2160:	cmp	r0, r4
    2164:	beq	2458 <transpose_array+0x4b4>
    2168:	ldr	r2, [sp, #32]
    216c:	ldr	r7, [sp, #28]
    2170:	ldrb	r2, [r2, r0]
    2174:	strb	r2, [r7, r1]
    2178:	ldr	r2, [sp, #72]	; 0x48
    217c:	add	r1, lr, r1
    2180:	add	r2, r2, #1
    2184:	cmp	r2, ip
    2188:	str	r2, [sp, #72]	; 0x48
    218c:	bne	2158 <transpose_array+0x1b4>
    2190:	ldr	r2, [sp, #20]
    2194:	ldr	r6, [sp, #16]
    2198:	ldr	r8, [sp, #12]
    219c:	mov	r5, lr
    21a0:	ldr	sl, [r2], #4
    21a4:	str	r3, [r8, #-4]
    21a8:	ldr	r9, [r8]
    21ac:	add	r1, sl, r1
    21b0:	mls	r1, r5, ip, r1
    21b4:	ldr	r5, [r6], #4
    21b8:	add	r7, r9, #1
    21bc:	str	r7, [r8]
    21c0:	add	r8, r8, #4
    21c4:	mov	ip, r7
    21c8:	cmp	r7, r5
    21cc:	mov	r5, sl
    21d0:	beq	21a0 <transpose_array+0x1fc>
    21d4:	b	2158 <transpose_array+0x1b4>
    21d8:	movw	r1, #0
    21dc:	movw	r3, #0
    21e0:	mov	r0, #93	; 0x5d
    21e4:	mov	r2, r5
    21e8:	mvn	r7, #0
    21ec:	movt	r1, #0
    21f0:	movt	r3, #0
    21f4:	str	r0, [sp]
    21f8:	mvn	r0, #0
    21fc:	bl	0 <coda_set_error>
    2200:	b	2478 <transpose_array+0x4d4>
    2204:	sub	r3, r5, #1
    2208:	mov	r2, #1
    220c:	cmp	r5, #2
    2210:	and	ip, r3, #1
    2214:	bne	2484 <transpose_array+0x4e0>
    2218:	mov	lr, r6
    221c:	b	24c4 <transpose_array+0x520>
    2220:	cmp	r4, #1
    2224:	blt	2458 <transpose_array+0x4b4>
    2228:	ldr	ip, [sp, #36]	; 0x24
    222c:	ldr	lr, [fp, #-100]	; 0xffffff9c
    2230:	add	r0, r6, #4
    2234:	mov	r1, #0
    2238:	str	r0, [sp, #24]
    223c:	add	r0, sl, #4
    2240:	mov	sl, #0
    2244:	str	r0, [sp, #20]
    2248:	orr	r0, r9, #4
    224c:	mov	r9, #0
    2250:	str	r0, [sp, #16]
    2254:	b	2264 <transpose_array+0x2c0>
    2258:	add	sl, sl, #1
    225c:	cmp	sl, r4
    2260:	beq	2458 <transpose_array+0x4b4>
    2264:	ldr	r2, [sp, #32]
    2268:	ldr	r6, [sp, #28]
    226c:	ldr	r5, [r2, sl, lsl #3]!
    2270:	ldr	r2, [r2, #4]
    2274:	str	r5, [r6, r1, lsl #3]!
    2278:	add	r1, lr, r1
    227c:	str	r2, [r6, #4]
    2280:	ldr	r2, [sp, #72]	; 0x48
    2284:	add	r2, r2, #1
    2288:	cmp	r2, ip
    228c:	str	r2, [sp, #72]	; 0x48
    2290:	bne	2258 <transpose_array+0x2b4>
    2294:	ldr	r2, [sp, #24]
    2298:	ldr	r6, [sp, #20]
    229c:	ldr	r8, [sp, #16]
    22a0:	mov	r5, lr
    22a4:	mov	r7, ip
    22a8:	ldr	r3, [r2], #4
    22ac:	str	r9, [r8, #-4]
    22b0:	ldr	r0, [r8]
    22b4:	add	r1, r3, r1
    22b8:	mls	r1, r5, r7, r1
    22bc:	ldr	r5, [r6], #4
    22c0:	add	r0, r0, #1
    22c4:	str	r0, [r8]
    22c8:	add	r8, r8, #4
    22cc:	mov	r7, r0
    22d0:	cmp	r0, r5
    22d4:	mov	r5, r3
    22d8:	beq	22a8 <transpose_array+0x304>
    22dc:	b	2258 <transpose_array+0x2b4>
    22e0:	cmp	r4, #1
    22e4:	blt	2458 <transpose_array+0x4b4>
    22e8:	ldr	ip, [sp, #36]	; 0x24
    22ec:	ldr	lr, [fp, #-100]	; 0xffffff9c
    22f0:	add	r0, r6, #4
    22f4:	mov	r1, #0
    22f8:	str	r0, [sp, #24]
    22fc:	add	r0, sl, #4
    2300:	mov	sl, #0
    2304:	str	r0, [sp, #20]
    2308:	orr	r0, r9, #4
    230c:	mov	r9, #0
    2310:	str	r0, [sp, #16]
    2314:	b	2324 <transpose_array+0x380>
    2318:	add	sl, sl, #1
    231c:	cmp	sl, r4
    2320:	beq	2458 <transpose_array+0x4b4>
    2324:	ldr	r0, [sp, #28]
    2328:	add	r2, r0, r1, lsl #1
    232c:	ldr	r0, [sp, #32]
    2330:	add	r1, lr, r1
    2334:	add	r5, r0, sl, lsl #1
    2338:	ldrh	r5, [r5]
    233c:	strh	r5, [r2]
    2340:	ldr	r2, [sp, #72]	; 0x48
    2344:	add	r2, r2, #1
    2348:	cmp	r2, ip
    234c:	str	r2, [sp, #72]	; 0x48
    2350:	bne	2318 <transpose_array+0x374>
    2354:	ldr	r2, [sp, #24]
    2358:	ldr	r6, [sp, #20]
    235c:	ldr	r8, [sp, #16]
    2360:	mov	r5, lr
    2364:	mov	r7, ip
    2368:	ldr	r3, [r2], #4
    236c:	str	r9, [r8, #-4]
    2370:	ldr	r0, [r8]
    2374:	add	r1, r3, r1
    2378:	mls	r1, r5, r7, r1
    237c:	ldr	r5, [r6], #4
    2380:	add	r0, r0, #1
    2384:	str	r0, [r8]
    2388:	add	r8, r8, #4
    238c:	mov	r7, r0
    2390:	cmp	r0, r5
    2394:	mov	r5, r3
    2398:	beq	2368 <transpose_array+0x3c4>
    239c:	b	2318 <transpose_array+0x374>
    23a0:	cmp	r4, #1
    23a4:	blt	2458 <transpose_array+0x4b4>
    23a8:	ldr	ip, [sp, #36]	; 0x24
    23ac:	ldr	lr, [fp, #-100]	; 0xffffff9c
    23b0:	add	r0, r6, #4
    23b4:	mov	r1, #0
    23b8:	str	r0, [sp, #24]
    23bc:	add	r0, sl, #4
    23c0:	mov	sl, #0
    23c4:	str	r0, [sp, #20]
    23c8:	orr	r0, r9, #4
    23cc:	mov	r9, #0
    23d0:	str	r0, [sp, #16]
    23d4:	b	23e4 <transpose_array+0x440>
    23d8:	add	sl, sl, #1
    23dc:	cmp	sl, r4
    23e0:	beq	2458 <transpose_array+0x4b4>
    23e4:	ldr	r0, [sp, #32]
    23e8:	ldr	r2, [r0, sl, lsl #2]
    23ec:	ldr	r0, [sp, #28]
    23f0:	str	r2, [r0, r1, lsl #2]
    23f4:	ldr	r2, [sp, #72]	; 0x48
    23f8:	add	r1, lr, r1
    23fc:	add	r2, r2, #1
    2400:	cmp	r2, ip
    2404:	str	r2, [sp, #72]	; 0x48
    2408:	bne	23d8 <transpose_array+0x434>
    240c:	ldr	r2, [sp, #24]
    2410:	ldr	r6, [sp, #20]
    2414:	ldr	r8, [sp, #16]
    2418:	mov	r5, lr
    241c:	mov	r7, ip
    2420:	ldr	r3, [r2], #4
    2424:	str	r9, [r8, #-4]
    2428:	ldr	r0, [r8]
    242c:	add	r1, r3, r1
    2430:	mls	r1, r5, r7, r1
    2434:	ldr	r5, [r6], #4
    2438:	add	r0, r0, #1
    243c:	str	r0, [r8]
    2440:	add	r8, r8, #4
    2444:	mov	r7, r0
    2448:	cmp	r0, r5
    244c:	mov	r5, r3
    2450:	beq	2420 <transpose_array+0x47c>
    2454:	b	23d8 <transpose_array+0x434>
    2458:	ldr	r4, [sp, #28]
    245c:	ldr	r0, [sp, #32]
    2460:	ldr	r2, [sp, #8]
    2464:	mov	r1, r4
    2468:	bl	0 <memcpy>
    246c:	mov	r0, r4
    2470:	bl	0 <free>
    2474:	mov	r7, #0
    2478:	mov	r0, r7
    247c:	sub	sp, fp, #28
    2480:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2484:	add	r2, r6, r5, lsl #2
    2488:	add	r3, sl, r3, lsl #2
    248c:	mov	lr, r6
    2490:	sub	r6, r2, #12
    2494:	mov	r2, #1
    2498:	ldr	r1, [r3]
    249c:	ldr	r7, [r3, #-4]
    24a0:	sub	r0, r0, #2
    24a4:	sub	r3, r3, #8
    24a8:	cmp	ip, r0
    24ac:	mul	r1, r1, r2
    24b0:	mul	r2, r7, r1
    24b4:	str	r2, [r6]
    24b8:	str	r1, [r6, #4]
    24bc:	sub	r6, r6, #8
    24c0:	bne	2498 <transpose_array+0x4f4>
    24c4:	cmp	ip, #0
    24c8:	mov	r6, lr
    24cc:	beq	20c0 <transpose_array+0x11c>
    24d0:	add	r1, r6, r0, lsl #2
    24d4:	ldr	r0, [sl, r0, lsl #2]
    24d8:	mul	r0, r0, r2
    24dc:	str	r0, [r1, #-4]
    24e0:	b	20c0 <transpose_array+0x11c>
    24e4:	movw	r0, #0
    24e8:	movw	r1, #0
    24ec:	movw	r3, #0
    24f0:	mov	r2, #172	; 0xac
    24f4:	movt	r0, #0
    24f8:	movt	r1, #0
    24fc:	movt	r3, #0
    2500:	bl	0 <__assert_fail>

00002504 <coda_bin_cursor_read_uint8_array>:
    2504:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2508:	add	fp, sp, #28
    250c:	sub	sp, sp, #564	; 0x234
    2510:	mov	r5, r0
    2514:	ldr	r0, [r0, #4]
    2518:	mov	r9, r1
    251c:	mov	r8, r2
    2520:	add	r0, r5, r0, lsl #4
    2524:	ldr	r0, [r0, #-8]
    2528:	ldr	r1, [r0]
    252c:	cmp	r1, #99	; 0x63
    2530:	ldrhi	r0, [r0, #4]
    2534:	ldr	r0, [r0, #40]	; 0x28
    2538:	ldr	r0, [r0]
    253c:	cmp	r0, #0
    2540:	beq	2570 <coda_bin_cursor_read_uint8_array+0x6c>
    2544:	cmp	r0, #1
    2548:	bne	2740 <coda_bin_cursor_read_uint8_array+0x23c>
    254c:	movw	r1, #0
    2550:	mov	r0, r5
    2554:	mov	r2, r9
    2558:	mov	r3, #1
    255c:	str	r8, [sp]
    2560:	movt	r1, #0
    2564:	bl	1c7c <read_array>
    2568:	sub	sp, fp, #28
    256c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2570:	add	r4, sp, #8
    2574:	add	r1, sp, #4
    2578:	mov	r0, r5
    257c:	mov	r2, r4
    2580:	bl	0 <coda_cursor_get_array_dim>
    2584:	cmp	r0, #0
    2588:	bne	26b8 <coda_bin_cursor_read_uint8_array+0x1b4>
    258c:	add	r0, sp, #40	; 0x28
    2590:	mov	r1, r5
    2594:	mov	r2, #520	; 0x208
    2598:	bl	0 <memcpy>
    259c:	ldr	sl, [sp, #4]
    25a0:	cmp	sl, #1
    25a4:	blt	25bc <coda_bin_cursor_read_uint8_array+0xb8>
    25a8:	cmp	sl, #4
    25ac:	bcs	25c4 <coda_bin_cursor_read_uint8_array+0xc0>
    25b0:	mov	r6, #1
    25b4:	mov	lr, #0
    25b8:	b	267c <coda_bin_cursor_read_uint8_array+0x178>
    25bc:	mov	r6, #1
    25c0:	b	26a0 <coda_bin_cursor_read_uint8_array+0x19c>
    25c4:	bic	lr, sl, #3
    25c8:	mov	r2, #1
    25cc:	vmov.i32	q8, #1	; 0x00000001
    25d0:	sub	r3, lr, #4
    25d4:	add	r2, r2, r3, lsr #2
    25d8:	cmp	r3, #12
    25dc:	and	ip, r2, #3
    25e0:	bcs	25f4 <coda_bin_cursor_read_uint8_array+0xf0>
    25e4:	mov	r3, #0
    25e8:	cmp	ip, #0
    25ec:	bne	2648 <coda_bin_cursor_read_uint8_array+0x144>
    25f0:	b	2664 <coda_bin_cursor_read_uint8_array+0x160>
    25f4:	sub	r6, r2, ip
    25f8:	mov	r3, #0
    25fc:	mov	r2, #64	; 0x40
    2600:	mov	r7, r4
    2604:	vld1.32	{d18-d19}, [r7], r2
    2608:	add	r0, r4, #16
    260c:	add	r1, r4, #32
    2610:	subs	r6, r6, #4
    2614:	add	r3, r3, #16
    2618:	vld1.32	{d20-d21}, [r0]
    261c:	add	r0, r4, #48	; 0x30
    2620:	mov	r4, r7
    2624:	vmul.i32	q8, q9, q8
    2628:	vld1.32	{d18-d19}, [r1]
    262c:	vmul.i32	q8, q10, q8
    2630:	vld1.32	{d20-d21}, [r0]
    2634:	vmul.i32	q8, q9, q8
    2638:	vmul.i32	q8, q10, q8
    263c:	bne	2604 <coda_bin_cursor_read_uint8_array+0x100>
    2640:	cmp	ip, #0
    2644:	beq	2664 <coda_bin_cursor_read_uint8_array+0x160>
    2648:	add	r0, sp, #8
    264c:	add	r2, r0, r3, lsl #2
    2650:	rsb	r3, ip, #0
    2654:	vld1.32	{d18-d19}, [r2]!
    2658:	adds	r3, r3, #1
    265c:	vmul.i32	q8, q9, q8
    2660:	bcc	2654 <coda_bin_cursor_read_uint8_array+0x150>
    2664:	vext.8	q9, q8, q8, #8
    2668:	cmp	sl, lr
    266c:	vmul.i32	q0, q8, q9
    2670:	vmul.i32	q8, q0, d0[1]
    2674:	vmov.32	r6, d16[0]
    2678:	beq	2698 <coda_bin_cursor_read_uint8_array+0x194>
    267c:	add	r0, sp, #8
    2680:	add	r2, r0, lr, lsl #2
    2684:	sub	r0, sl, lr
    2688:	ldr	r1, [r2], #4
    268c:	subs	r0, r0, #1
    2690:	mul	r6, r1, r6
    2694:	bne	2688 <coda_bin_cursor_read_uint8_array+0x184>
    2698:	cmp	r6, #1
    269c:	blt	270c <coda_bin_cursor_read_uint8_array+0x208>
    26a0:	add	r0, sp, #40	; 0x28
    26a4:	mov	r1, #0
    26a8:	mov	r4, #0
    26ac:	bl	0 <coda_cursor_goto_array_element_by_index>
    26b0:	cmp	r0, #0
    26b4:	beq	26c4 <coda_bin_cursor_read_uint8_array+0x1c0>
    26b8:	mvn	r0, #0
    26bc:	sub	sp, fp, #28
    26c0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    26c4:	sub	r7, r6, #1
    26c8:	add	sl, sp, #40	; 0x28
    26cc:	b	26dc <coda_bin_cursor_read_uint8_array+0x1d8>
    26d0:	add	r4, r4, #1
    26d4:	cmp	r6, r4
    26d8:	beq	270c <coda_bin_cursor_read_uint8_array+0x208>
    26dc:	add	r1, r9, r4
    26e0:	mov	r0, sl
    26e4:	bl	0 <coda_ascii_cursor_read_uint8>
    26e8:	cmp	r0, #0
    26ec:	bne	26b8 <coda_bin_cursor_read_uint8_array+0x1b4>
    26f0:	cmp	r4, r7
    26f4:	bge	26d0 <coda_bin_cursor_read_uint8_array+0x1cc>
    26f8:	mov	r0, sl
    26fc:	bl	0 <coda_cursor_goto_next_array_element>
    2700:	cmp	r0, #0
    2704:	beq	26d0 <coda_bin_cursor_read_uint8_array+0x1cc>
    2708:	b	26b8 <coda_bin_cursor_read_uint8_array+0x1b4>
    270c:	cmp	r8, #0
    2710:	beq	2734 <coda_bin_cursor_read_uint8_array+0x230>
    2714:	mov	r0, r5
    2718:	mov	r1, r9
    271c:	mov	r2, #1
    2720:	bl	1fa4 <transpose_array>
    2724:	mov	r1, r0
    2728:	mvn	r0, #0
    272c:	cmp	r1, #0
    2730:	bne	26bc <coda_bin_cursor_read_uint8_array+0x1b8>
    2734:	mov	r0, #0
    2738:	sub	sp, fp, #28
    273c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2740:	movw	r0, #0
    2744:	movw	r1, #0
    2748:	movw	r3, #0
    274c:	mov	r2, #932	; 0x3a4
    2750:	movt	r0, #0
    2754:	movt	r1, #0
    2758:	movt	r3, #0
    275c:	bl	0 <__assert_fail>

00002760 <coda_bin_cursor_read_int16_array>:
    2760:	push	{r4, r5, r6, r7, fp, lr}
    2764:	add	fp, sp, #16
    2768:	sub	sp, sp, #8
    276c:	mov	r5, r0
    2770:	ldr	r0, [r0, #4]
    2774:	mov	r4, r1
    2778:	mov	r6, r2
    277c:	add	r0, r5, r0, lsl #4
    2780:	ldr	r0, [r0, #-8]
    2784:	ldr	r1, [r0]
    2788:	cmp	r1, #99	; 0x63
    278c:	ldrhi	r0, [r0, #4]
    2790:	ldr	r0, [r0, #40]	; 0x28
    2794:	ldr	r0, [r0]
    2798:	cmp	r0, #0
    279c:	beq	27cc <coda_bin_cursor_read_int16_array+0x6c>
    27a0:	cmp	r0, #1
    27a4:	bne	282c <coda_bin_cursor_read_int16_array+0xcc>
    27a8:	movw	r1, #0
    27ac:	mov	r0, r5
    27b0:	mov	r2, r4
    27b4:	mov	r3, #2
    27b8:	str	r6, [sp]
    27bc:	movt	r1, #0
    27c0:	bl	1c7c <read_array>
    27c4:	sub	sp, fp, #16
    27c8:	pop	{r4, r5, r6, r7, fp, pc}
    27cc:	movw	r1, #0
    27d0:	mov	r0, #0
    27d4:	mov	r2, r4
    27d8:	mov	r3, #2
    27dc:	movt	r1, #0
    27e0:	str	r0, [sp]
    27e4:	mov	r0, r5
    27e8:	bl	1c7c <read_array>
    27ec:	mvn	r7, #0
    27f0:	cmp	r0, #0
    27f4:	bne	2820 <coda_bin_cursor_read_int16_array+0xc0>
    27f8:	cmp	r6, #0
    27fc:	beq	281c <coda_bin_cursor_read_int16_array+0xbc>
    2800:	mov	r0, r5
    2804:	mov	r1, r4
    2808:	mov	r2, #2
    280c:	bl	1fa4 <transpose_array>
    2810:	cmp	r0, #0
    2814:	moveq	r7, #0
    2818:	b	2820 <coda_bin_cursor_read_int16_array+0xc0>
    281c:	mov	r7, #0
    2820:	mov	r0, r7
    2824:	sub	sp, fp, #16
    2828:	pop	{r4, r5, r6, r7, fp, pc}
    282c:	movw	r0, #0
    2830:	movw	r1, #0
    2834:	movw	r3, #0
    2838:	movw	r2, #958	; 0x3be
    283c:	movt	r0, #0
    2840:	movt	r1, #0
    2844:	movt	r3, #0
    2848:	bl	0 <__assert_fail>

0000284c <coda_bin_cursor_read_uint16_array>:
    284c:	push	{r4, r5, r6, r7, fp, lr}
    2850:	add	fp, sp, #16
    2854:	sub	sp, sp, #8
    2858:	mov	r5, r0
    285c:	ldr	r0, [r0, #4]
    2860:	mov	r4, r1
    2864:	mov	r6, r2
    2868:	add	r0, r5, r0, lsl #4
    286c:	ldr	r0, [r0, #-8]
    2870:	ldr	r1, [r0]
    2874:	cmp	r1, #99	; 0x63
    2878:	ldrhi	r0, [r0, #4]
    287c:	ldr	r0, [r0, #40]	; 0x28
    2880:	ldr	r0, [r0]
    2884:	cmp	r0, #0
    2888:	beq	28b8 <coda_bin_cursor_read_uint16_array+0x6c>
    288c:	cmp	r0, #1
    2890:	bne	2918 <coda_bin_cursor_read_uint16_array+0xcc>
    2894:	movw	r1, #0
    2898:	mov	r0, r5
    289c:	mov	r2, r4
    28a0:	mov	r3, #2
    28a4:	str	r6, [sp]
    28a8:	movt	r1, #0
    28ac:	bl	1c7c <read_array>
    28b0:	sub	sp, fp, #16
    28b4:	pop	{r4, r5, r6, r7, fp, pc}
    28b8:	movw	r1, #0
    28bc:	mov	r0, #0
    28c0:	mov	r2, r4
    28c4:	mov	r3, #2
    28c8:	movt	r1, #0
    28cc:	str	r0, [sp]
    28d0:	mov	r0, r5
    28d4:	bl	1c7c <read_array>
    28d8:	mvn	r7, #0
    28dc:	cmp	r0, #0
    28e0:	bne	290c <coda_bin_cursor_read_uint16_array+0xc0>
    28e4:	cmp	r6, #0
    28e8:	beq	2908 <coda_bin_cursor_read_uint16_array+0xbc>
    28ec:	mov	r0, r5
    28f0:	mov	r1, r4
    28f4:	mov	r2, #2
    28f8:	bl	1fa4 <transpose_array>
    28fc:	cmp	r0, #0
    2900:	moveq	r7, #0
    2904:	b	290c <coda_bin_cursor_read_uint16_array+0xc0>
    2908:	mov	r7, #0
    290c:	mov	r0, r7
    2910:	sub	sp, fp, #16
    2914:	pop	{r4, r5, r6, r7, fp, pc}
    2918:	movw	r0, #0
    291c:	movw	r1, #0
    2920:	movw	r3, #0
    2924:	mov	r2, #984	; 0x3d8
    2928:	movt	r0, #0
    292c:	movt	r1, #0
    2930:	movt	r3, #0
    2934:	bl	0 <__assert_fail>

00002938 <coda_bin_cursor_read_int32_array>:
    2938:	push	{r4, r5, r6, r7, fp, lr}
    293c:	add	fp, sp, #16
    2940:	sub	sp, sp, #8
    2944:	mov	r5, r0
    2948:	ldr	r0, [r0, #4]
    294c:	mov	r4, r1
    2950:	mov	r6, r2
    2954:	add	r0, r5, r0, lsl #4
    2958:	ldr	r0, [r0, #-8]
    295c:	ldr	r1, [r0]
    2960:	cmp	r1, #99	; 0x63
    2964:	ldrhi	r0, [r0, #4]
    2968:	ldr	r0, [r0, #40]	; 0x28
    296c:	ldr	r0, [r0]
    2970:	cmp	r0, #0
    2974:	beq	29a4 <coda_bin_cursor_read_int32_array+0x6c>
    2978:	cmp	r0, #1
    297c:	bne	2a04 <coda_bin_cursor_read_int32_array+0xcc>
    2980:	movw	r1, #0
    2984:	mov	r0, r5
    2988:	mov	r2, r4
    298c:	mov	r3, #4
    2990:	str	r6, [sp]
    2994:	movt	r1, #0
    2998:	bl	1c7c <read_array>
    299c:	sub	sp, fp, #16
    29a0:	pop	{r4, r5, r6, r7, fp, pc}
    29a4:	movw	r1, #0
    29a8:	mov	r0, #0
    29ac:	mov	r2, r4
    29b0:	mov	r3, #4
    29b4:	movt	r1, #0
    29b8:	str	r0, [sp]
    29bc:	mov	r0, r5
    29c0:	bl	1c7c <read_array>
    29c4:	mvn	r7, #0
    29c8:	cmp	r0, #0
    29cc:	bne	29f8 <coda_bin_cursor_read_int32_array+0xc0>
    29d0:	cmp	r6, #0
    29d4:	beq	29f4 <coda_bin_cursor_read_int32_array+0xbc>
    29d8:	mov	r0, r5
    29dc:	mov	r1, r4
    29e0:	mov	r2, #4
    29e4:	bl	1fa4 <transpose_array>
    29e8:	cmp	r0, #0
    29ec:	moveq	r7, #0
    29f0:	b	29f8 <coda_bin_cursor_read_int32_array+0xc0>
    29f4:	mov	r7, #0
    29f8:	mov	r0, r7
    29fc:	sub	sp, fp, #16
    2a00:	pop	{r4, r5, r6, r7, fp, pc}
    2a04:	movw	r0, #0
    2a08:	movw	r1, #0
    2a0c:	movw	r3, #0
    2a10:	movw	r2, #1010	; 0x3f2
    2a14:	movt	r0, #0
    2a18:	movt	r1, #0
    2a1c:	movt	r3, #0
    2a20:	bl	0 <__assert_fail>

00002a24 <coda_bin_cursor_read_uint32_array>:
    2a24:	push	{r4, r5, r6, r7, fp, lr}
    2a28:	add	fp, sp, #16
    2a2c:	sub	sp, sp, #8
    2a30:	mov	r5, r0
    2a34:	ldr	r0, [r0, #4]
    2a38:	mov	r4, r1
    2a3c:	mov	r6, r2
    2a40:	add	r0, r5, r0, lsl #4
    2a44:	ldr	r0, [r0, #-8]
    2a48:	ldr	r1, [r0]
    2a4c:	cmp	r1, #99	; 0x63
    2a50:	ldrhi	r0, [r0, #4]
    2a54:	ldr	r0, [r0, #40]	; 0x28
    2a58:	ldr	r0, [r0]
    2a5c:	cmp	r0, #0
    2a60:	beq	2a90 <coda_bin_cursor_read_uint32_array+0x6c>
    2a64:	cmp	r0, #1
    2a68:	bne	2af0 <coda_bin_cursor_read_uint32_array+0xcc>
    2a6c:	movw	r1, #0
    2a70:	mov	r0, r5
    2a74:	mov	r2, r4
    2a78:	mov	r3, #4
    2a7c:	str	r6, [sp]
    2a80:	movt	r1, #0
    2a84:	bl	1c7c <read_array>
    2a88:	sub	sp, fp, #16
    2a8c:	pop	{r4, r5, r6, r7, fp, pc}
    2a90:	movw	r1, #0
    2a94:	mov	r0, #0
    2a98:	mov	r2, r4
    2a9c:	mov	r3, #4
    2aa0:	movt	r1, #0
    2aa4:	str	r0, [sp]
    2aa8:	mov	r0, r5
    2aac:	bl	1c7c <read_array>
    2ab0:	mvn	r7, #0
    2ab4:	cmp	r0, #0
    2ab8:	bne	2ae4 <coda_bin_cursor_read_uint32_array+0xc0>
    2abc:	cmp	r6, #0
    2ac0:	beq	2ae0 <coda_bin_cursor_read_uint32_array+0xbc>
    2ac4:	mov	r0, r5
    2ac8:	mov	r1, r4
    2acc:	mov	r2, #4
    2ad0:	bl	1fa4 <transpose_array>
    2ad4:	cmp	r0, #0
    2ad8:	moveq	r7, #0
    2adc:	b	2ae4 <coda_bin_cursor_read_uint32_array+0xc0>
    2ae0:	mov	r7, #0
    2ae4:	mov	r0, r7
    2ae8:	sub	sp, fp, #16
    2aec:	pop	{r4, r5, r6, r7, fp, pc}
    2af0:	movw	r0, #0
    2af4:	movw	r1, #0
    2af8:	movw	r3, #0
    2afc:	movw	r2, #1036	; 0x40c
    2b00:	movt	r0, #0
    2b04:	movt	r1, #0
    2b08:	movt	r3, #0
    2b0c:	bl	0 <__assert_fail>

00002b10 <coda_bin_cursor_read_int64_array>:
    2b10:	push	{r4, r5, r6, r7, fp, lr}
    2b14:	add	fp, sp, #16
    2b18:	sub	sp, sp, #8
    2b1c:	mov	r5, r0
    2b20:	ldr	r0, [r0, #4]
    2b24:	mov	r4, r1
    2b28:	mov	r6, r2
    2b2c:	add	r0, r5, r0, lsl #4
    2b30:	ldr	r0, [r0, #-8]
    2b34:	ldr	r1, [r0]
    2b38:	cmp	r1, #99	; 0x63
    2b3c:	ldrhi	r0, [r0, #4]
    2b40:	ldr	r0, [r0, #40]	; 0x28
    2b44:	ldr	r0, [r0]
    2b48:	cmp	r0, #0
    2b4c:	beq	2b7c <coda_bin_cursor_read_int64_array+0x6c>
    2b50:	cmp	r0, #1
    2b54:	bne	2bdc <coda_bin_cursor_read_int64_array+0xcc>
    2b58:	movw	r1, #0
    2b5c:	mov	r0, r5
    2b60:	mov	r2, r4
    2b64:	mov	r3, #8
    2b68:	str	r6, [sp]
    2b6c:	movt	r1, #0
    2b70:	bl	1c7c <read_array>
    2b74:	sub	sp, fp, #16
    2b78:	pop	{r4, r5, r6, r7, fp, pc}
    2b7c:	movw	r1, #0
    2b80:	mov	r0, #0
    2b84:	mov	r2, r4
    2b88:	mov	r3, #8
    2b8c:	movt	r1, #0
    2b90:	str	r0, [sp]
    2b94:	mov	r0, r5
    2b98:	bl	1c7c <read_array>
    2b9c:	mvn	r7, #0
    2ba0:	cmp	r0, #0
    2ba4:	bne	2bd0 <coda_bin_cursor_read_int64_array+0xc0>
    2ba8:	cmp	r6, #0
    2bac:	beq	2bcc <coda_bin_cursor_read_int64_array+0xbc>
    2bb0:	mov	r0, r5
    2bb4:	mov	r1, r4
    2bb8:	mov	r2, #8
    2bbc:	bl	1fa4 <transpose_array>
    2bc0:	cmp	r0, #0
    2bc4:	moveq	r7, #0
    2bc8:	b	2bd0 <coda_bin_cursor_read_int64_array+0xc0>
    2bcc:	mov	r7, #0
    2bd0:	mov	r0, r7
    2bd4:	sub	sp, fp, #16
    2bd8:	pop	{r4, r5, r6, r7, fp, pc}
    2bdc:	movw	r0, #0
    2be0:	movw	r1, #0
    2be4:	movw	r3, #0
    2be8:	movw	r2, #1062	; 0x426
    2bec:	movt	r0, #0
    2bf0:	movt	r1, #0
    2bf4:	movt	r3, #0
    2bf8:	bl	0 <__assert_fail>

00002bfc <coda_bin_cursor_read_uint64_array>:
    2bfc:	push	{r4, r5, r6, r7, fp, lr}
    2c00:	add	fp, sp, #16
    2c04:	sub	sp, sp, #8
    2c08:	mov	r5, r0
    2c0c:	ldr	r0, [r0, #4]
    2c10:	mov	r4, r1
    2c14:	mov	r6, r2
    2c18:	add	r0, r5, r0, lsl #4
    2c1c:	ldr	r0, [r0, #-8]
    2c20:	ldr	r1, [r0]
    2c24:	cmp	r1, #99	; 0x63
    2c28:	ldrhi	r0, [r0, #4]
    2c2c:	ldr	r0, [r0, #40]	; 0x28
    2c30:	ldr	r0, [r0]
    2c34:	cmp	r0, #0
    2c38:	beq	2c68 <coda_bin_cursor_read_uint64_array+0x6c>
    2c3c:	cmp	r0, #1
    2c40:	bne	2cc8 <coda_bin_cursor_read_uint64_array+0xcc>
    2c44:	movw	r1, #0
    2c48:	mov	r0, r5
    2c4c:	mov	r2, r4
    2c50:	mov	r3, #8
    2c54:	str	r6, [sp]
    2c58:	movt	r1, #0
    2c5c:	bl	1c7c <read_array>
    2c60:	sub	sp, fp, #16
    2c64:	pop	{r4, r5, r6, r7, fp, pc}
    2c68:	movw	r1, #0
    2c6c:	mov	r0, #0
    2c70:	mov	r2, r4
    2c74:	mov	r3, #8
    2c78:	movt	r1, #0
    2c7c:	str	r0, [sp]
    2c80:	mov	r0, r5
    2c84:	bl	1c7c <read_array>
    2c88:	mvn	r7, #0
    2c8c:	cmp	r0, #0
    2c90:	bne	2cbc <coda_bin_cursor_read_uint64_array+0xc0>
    2c94:	cmp	r6, #0
    2c98:	beq	2cb8 <coda_bin_cursor_read_uint64_array+0xbc>
    2c9c:	mov	r0, r5
    2ca0:	mov	r1, r4
    2ca4:	mov	r2, #8
    2ca8:	bl	1fa4 <transpose_array>
    2cac:	cmp	r0, #0
    2cb0:	moveq	r7, #0
    2cb4:	b	2cbc <coda_bin_cursor_read_uint64_array+0xc0>
    2cb8:	mov	r7, #0
    2cbc:	mov	r0, r7
    2cc0:	sub	sp, fp, #16
    2cc4:	pop	{r4, r5, r6, r7, fp, pc}
    2cc8:	movw	r0, #0
    2ccc:	movw	r1, #0
    2cd0:	movw	r3, #0
    2cd4:	mov	r2, #1088	; 0x440
    2cd8:	movt	r0, #0
    2cdc:	movt	r1, #0
    2ce0:	movt	r3, #0
    2ce4:	bl	0 <__assert_fail>

00002ce8 <coda_bin_cursor_read_float_array>:
    2ce8:	push	{r4, r5, r6, r7, fp, lr}
    2cec:	add	fp, sp, #16
    2cf0:	sub	sp, sp, #8
    2cf4:	mov	r5, r0
    2cf8:	ldr	r0, [r0, #4]
    2cfc:	mov	r4, r1
    2d00:	mov	r6, r2
    2d04:	add	r0, r5, r0, lsl #4
    2d08:	ldr	r0, [r0, #-8]
    2d0c:	ldr	r1, [r0]
    2d10:	cmp	r1, #99	; 0x63
    2d14:	ldrhi	r0, [r0, #4]
    2d18:	ldr	r0, [r0, #40]	; 0x28
    2d1c:	ldr	r0, [r0]
    2d20:	cmp	r0, #0
    2d24:	beq	2d54 <coda_bin_cursor_read_float_array+0x6c>
    2d28:	cmp	r0, #1
    2d2c:	bne	2db4 <coda_bin_cursor_read_float_array+0xcc>
    2d30:	movw	r1, #0
    2d34:	mov	r0, r5
    2d38:	mov	r2, r4
    2d3c:	mov	r3, #4
    2d40:	str	r6, [sp]
    2d44:	movt	r1, #0
    2d48:	bl	1c7c <read_array>
    2d4c:	sub	sp, fp, #16
    2d50:	pop	{r4, r5, r6, r7, fp, pc}
    2d54:	movw	r1, #0
    2d58:	mov	r0, #0
    2d5c:	mov	r2, r4
    2d60:	mov	r3, #4
    2d64:	movt	r1, #0
    2d68:	str	r0, [sp]
    2d6c:	mov	r0, r5
    2d70:	bl	1c7c <read_array>
    2d74:	mvn	r7, #0
    2d78:	cmp	r0, #0
    2d7c:	bne	2da8 <coda_bin_cursor_read_float_array+0xc0>
    2d80:	cmp	r6, #0
    2d84:	beq	2da4 <coda_bin_cursor_read_float_array+0xbc>
    2d88:	mov	r0, r5
    2d8c:	mov	r1, r4
    2d90:	mov	r2, #4
    2d94:	bl	1fa4 <transpose_array>
    2d98:	cmp	r0, #0
    2d9c:	moveq	r7, #0
    2da0:	b	2da8 <coda_bin_cursor_read_float_array+0xc0>
    2da4:	mov	r7, #0
    2da8:	mov	r0, r7
    2dac:	sub	sp, fp, #16
    2db0:	pop	{r4, r5, r6, r7, fp, pc}
    2db4:	movw	r0, #0
    2db8:	movw	r1, #0
    2dbc:	movw	r3, #0
    2dc0:	movw	r2, #1114	; 0x45a
    2dc4:	movt	r0, #0
    2dc8:	movt	r1, #0
    2dcc:	movt	r3, #0
    2dd0:	bl	0 <__assert_fail>

00002dd4 <coda_bin_cursor_read_double_array>:
    2dd4:	push	{r4, r5, r6, r7, fp, lr}
    2dd8:	add	fp, sp, #16
    2ddc:	sub	sp, sp, #8
    2de0:	mov	r5, r0
    2de4:	ldr	r0, [r0, #4]
    2de8:	mov	r4, r1
    2dec:	mov	r6, r2
    2df0:	add	r0, r5, r0, lsl #4
    2df4:	ldr	r0, [r0, #-8]
    2df8:	ldr	r1, [r0]
    2dfc:	cmp	r1, #99	; 0x63
    2e00:	ldrhi	r0, [r0, #4]
    2e04:	ldr	r0, [r0, #40]	; 0x28
    2e08:	ldr	r0, [r0]
    2e0c:	cmp	r0, #0
    2e10:	beq	2e40 <coda_bin_cursor_read_double_array+0x6c>
    2e14:	cmp	r0, #1
    2e18:	bne	2ea0 <coda_bin_cursor_read_double_array+0xcc>
    2e1c:	movw	r1, #0
    2e20:	mov	r0, r5
    2e24:	mov	r2, r4
    2e28:	mov	r3, #8
    2e2c:	str	r6, [sp]
    2e30:	movt	r1, #0
    2e34:	bl	1c7c <read_array>
    2e38:	sub	sp, fp, #16
    2e3c:	pop	{r4, r5, r6, r7, fp, pc}
    2e40:	movw	r1, #0
    2e44:	mov	r0, #0
    2e48:	mov	r2, r4
    2e4c:	mov	r3, #8
    2e50:	movt	r1, #0
    2e54:	str	r0, [sp]
    2e58:	mov	r0, r5
    2e5c:	bl	1c7c <read_array>
    2e60:	mvn	r7, #0
    2e64:	cmp	r0, #0
    2e68:	bne	2e94 <coda_bin_cursor_read_double_array+0xc0>
    2e6c:	cmp	r6, #0
    2e70:	beq	2e90 <coda_bin_cursor_read_double_array+0xbc>
    2e74:	mov	r0, r5
    2e78:	mov	r1, r4
    2e7c:	mov	r2, #8
    2e80:	bl	1fa4 <transpose_array>
    2e84:	cmp	r0, #0
    2e88:	moveq	r7, #0
    2e8c:	b	2e94 <coda_bin_cursor_read_double_array+0xc0>
    2e90:	mov	r7, #0
    2e94:	mov	r0, r7
    2e98:	sub	sp, fp, #16
    2e9c:	pop	{r4, r5, r6, r7, fp, pc}
    2ea0:	movw	r0, #0
    2ea4:	movw	r1, #0
    2ea8:	movw	r3, #0
    2eac:	movw	r2, #1140	; 0x474
    2eb0:	movt	r0, #0
    2eb4:	movt	r1, #0
    2eb8:	movt	r3, #0
    2ebc:	bl	0 <__assert_fail>

00002ec0 <coda_bin_cursor_read_char_array>:
    2ec0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2ec4:	add	fp, sp, #28
    2ec8:	sub	sp, sp, #564	; 0x234
    2ecc:	mov	r5, r0
    2ed0:	ldr	r0, [r0, #4]
    2ed4:	mov	r9, r1
    2ed8:	mov	r8, r2
    2edc:	add	r0, r5, r0, lsl #4
    2ee0:	ldr	r0, [r0, #-8]
    2ee4:	ldr	r1, [r0]
    2ee8:	cmp	r1, #99	; 0x63
    2eec:	ldrhi	r0, [r0, #4]
    2ef0:	ldr	r0, [r0, #40]	; 0x28
    2ef4:	ldr	r0, [r0]
    2ef8:	cmp	r0, #0
    2efc:	beq	2f2c <coda_bin_cursor_read_char_array+0x6c>
    2f00:	cmp	r0, #1
    2f04:	bne	30fc <coda_bin_cursor_read_char_array+0x23c>
    2f08:	movw	r1, #0
    2f0c:	mov	r0, r5
    2f10:	mov	r2, r9
    2f14:	mov	r3, #1
    2f18:	str	r8, [sp]
    2f1c:	movt	r1, #0
    2f20:	bl	1c7c <read_array>
    2f24:	sub	sp, fp, #28
    2f28:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2f2c:	add	r4, sp, #8
    2f30:	add	r1, sp, #4
    2f34:	mov	r0, r5
    2f38:	mov	r2, r4
    2f3c:	bl	0 <coda_cursor_get_array_dim>
    2f40:	cmp	r0, #0
    2f44:	bne	3074 <coda_bin_cursor_read_char_array+0x1b4>
    2f48:	add	r0, sp, #40	; 0x28
    2f4c:	mov	r1, r5
    2f50:	mov	r2, #520	; 0x208
    2f54:	bl	0 <memcpy>
    2f58:	ldr	sl, [sp, #4]
    2f5c:	cmp	sl, #1
    2f60:	blt	2f78 <coda_bin_cursor_read_char_array+0xb8>
    2f64:	cmp	sl, #4
    2f68:	bcs	2f80 <coda_bin_cursor_read_char_array+0xc0>
    2f6c:	mov	r6, #1
    2f70:	mov	lr, #0
    2f74:	b	3038 <coda_bin_cursor_read_char_array+0x178>
    2f78:	mov	r6, #1
    2f7c:	b	305c <coda_bin_cursor_read_char_array+0x19c>
    2f80:	bic	lr, sl, #3
    2f84:	mov	r2, #1
    2f88:	vmov.i32	q8, #1	; 0x00000001
    2f8c:	sub	r3, lr, #4
    2f90:	add	r2, r2, r3, lsr #2
    2f94:	cmp	r3, #12
    2f98:	and	ip, r2, #3
    2f9c:	bcs	2fb0 <coda_bin_cursor_read_char_array+0xf0>
    2fa0:	mov	r3, #0
    2fa4:	cmp	ip, #0
    2fa8:	bne	3004 <coda_bin_cursor_read_char_array+0x144>
    2fac:	b	3020 <coda_bin_cursor_read_char_array+0x160>
    2fb0:	sub	r6, r2, ip
    2fb4:	mov	r3, #0
    2fb8:	mov	r2, #64	; 0x40
    2fbc:	mov	r7, r4
    2fc0:	vld1.32	{d18-d19}, [r7], r2
    2fc4:	add	r0, r4, #16
    2fc8:	add	r1, r4, #32
    2fcc:	subs	r6, r6, #4
    2fd0:	add	r3, r3, #16
    2fd4:	vld1.32	{d20-d21}, [r0]
    2fd8:	add	r0, r4, #48	; 0x30
    2fdc:	mov	r4, r7
    2fe0:	vmul.i32	q8, q9, q8
    2fe4:	vld1.32	{d18-d19}, [r1]
    2fe8:	vmul.i32	q8, q10, q8
    2fec:	vld1.32	{d20-d21}, [r0]
    2ff0:	vmul.i32	q8, q9, q8
    2ff4:	vmul.i32	q8, q10, q8
    2ff8:	bne	2fc0 <coda_bin_cursor_read_char_array+0x100>
    2ffc:	cmp	ip, #0
    3000:	beq	3020 <coda_bin_cursor_read_char_array+0x160>
    3004:	add	r0, sp, #8
    3008:	add	r2, r0, r3, lsl #2
    300c:	rsb	r3, ip, #0
    3010:	vld1.32	{d18-d19}, [r2]!
    3014:	adds	r3, r3, #1
    3018:	vmul.i32	q8, q9, q8
    301c:	bcc	3010 <coda_bin_cursor_read_char_array+0x150>
    3020:	vext.8	q9, q8, q8, #8
    3024:	cmp	sl, lr
    3028:	vmul.i32	q0, q8, q9
    302c:	vmul.i32	q8, q0, d0[1]
    3030:	vmov.32	r6, d16[0]
    3034:	beq	3054 <coda_bin_cursor_read_char_array+0x194>
    3038:	add	r0, sp, #8
    303c:	add	r2, r0, lr, lsl #2
    3040:	sub	r0, sl, lr
    3044:	ldr	r1, [r2], #4
    3048:	subs	r0, r0, #1
    304c:	mul	r6, r1, r6
    3050:	bne	3044 <coda_bin_cursor_read_char_array+0x184>
    3054:	cmp	r6, #1
    3058:	blt	30c8 <coda_bin_cursor_read_char_array+0x208>
    305c:	add	r0, sp, #40	; 0x28
    3060:	mov	r1, #0
    3064:	mov	r4, #0
    3068:	bl	0 <coda_cursor_goto_array_element_by_index>
    306c:	cmp	r0, #0
    3070:	beq	3080 <coda_bin_cursor_read_char_array+0x1c0>
    3074:	mvn	r0, #0
    3078:	sub	sp, fp, #28
    307c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3080:	sub	r7, r6, #1
    3084:	add	sl, sp, #40	; 0x28
    3088:	b	3098 <coda_bin_cursor_read_char_array+0x1d8>
    308c:	add	r4, r4, #1
    3090:	cmp	r6, r4
    3094:	beq	30c8 <coda_bin_cursor_read_char_array+0x208>
    3098:	add	r1, r9, r4
    309c:	mov	r0, sl
    30a0:	bl	0 <coda_ascii_cursor_read_char>
    30a4:	cmp	r0, #0
    30a8:	bne	3074 <coda_bin_cursor_read_char_array+0x1b4>
    30ac:	cmp	r4, r7
    30b0:	bge	308c <coda_bin_cursor_read_char_array+0x1cc>
    30b4:	mov	r0, sl
    30b8:	bl	0 <coda_cursor_goto_next_array_element>
    30bc:	cmp	r0, #0
    30c0:	beq	308c <coda_bin_cursor_read_char_array+0x1cc>
    30c4:	b	3074 <coda_bin_cursor_read_char_array+0x1b4>
    30c8:	cmp	r8, #0
    30cc:	beq	30f0 <coda_bin_cursor_read_char_array+0x230>
    30d0:	mov	r0, r5
    30d4:	mov	r1, r9
    30d8:	mov	r2, #1
    30dc:	bl	1fa4 <transpose_array>
    30e0:	mov	r1, r0
    30e4:	mvn	r0, #0
    30e8:	cmp	r1, #0
    30ec:	bne	3078 <coda_bin_cursor_read_char_array+0x1b8>
    30f0:	mov	r0, #0
    30f4:	sub	sp, fp, #28
    30f8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    30fc:	movw	r0, #0
    3100:	movw	r1, #0
    3104:	movw	r3, #0
    3108:	movw	r2, #1166	; 0x48e
    310c:	movt	r0, #0
    3110:	movt	r1, #0
    3114:	movt	r3, #0
    3118:	bl	0 <__assert_fail>

0000311c <coda_bin_cursor_read_int8_partial_array>:
    311c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
    3120:	add	fp, sp, #24
    3124:	sub	sp, sp, #528	; 0x210
    3128:	mov	r6, r1
    312c:	mov	r1, r0
    3130:	ldr	r0, [r0, #4]
    3134:	mov	r5, r2
    3138:	mov	r4, r3
    313c:	add	r0, r1, r0, lsl #4
    3140:	ldr	r0, [r0, #-8]
    3144:	ldr	r2, [r0]
    3148:	cmp	r2, #99	; 0x63
    314c:	ldrhi	r0, [r0, #4]
    3150:	ldr	r0, [r0, #40]	; 0x28
    3154:	ldr	r0, [r0]
    3158:	cmp	r0, #0
    315c:	beq	31e0 <coda_bin_cursor_read_int8_partial_array+0xc4>
    3160:	cmp	r0, #1
    3164:	bne	3268 <coda_bin_cursor_read_int8_partial_array+0x14c>
    3168:	mov	r0, sp
    316c:	mov	r2, #520	; 0x208
    3170:	bl	0 <memcpy>
    3174:	cmp	r5, #1
    3178:	blt	3258 <coda_bin_cursor_read_int8_partial_array+0x13c>
    317c:	mov	r0, sp
    3180:	mov	r1, r6
    3184:	bl	0 <coda_cursor_goto_array_element_by_index>
    3188:	mvn	r8, #0
    318c:	cmp	r0, #0
    3190:	bne	325c <coda_bin_cursor_read_int8_partial_array+0x140>
    3194:	sub	r6, r5, #1
    3198:	mov	r7, #0
    319c:	mov	r9, sp
    31a0:	b	31b0 <coda_bin_cursor_read_int8_partial_array+0x94>
    31a4:	add	r7, r7, #1
    31a8:	cmp	r5, r7
    31ac:	beq	3258 <coda_bin_cursor_read_int8_partial_array+0x13c>
    31b0:	add	r1, r4, r7
    31b4:	mov	r0, r9
    31b8:	bl	208 <coda_bin_cursor_read_int8>
    31bc:	cmp	r0, #0
    31c0:	bne	325c <coda_bin_cursor_read_int8_partial_array+0x140>
    31c4:	cmp	r7, r6
    31c8:	bge	31a4 <coda_bin_cursor_read_int8_partial_array+0x88>
    31cc:	mov	r0, r9
    31d0:	bl	0 <coda_cursor_goto_next_array_element>
    31d4:	cmp	r0, #0
    31d8:	beq	31a4 <coda_bin_cursor_read_int8_partial_array+0x88>
    31dc:	b	325c <coda_bin_cursor_read_int8_partial_array+0x140>
    31e0:	mov	r0, sp
    31e4:	mov	r2, #520	; 0x208
    31e8:	bl	0 <memcpy>
    31ec:	cmp	r5, #1
    31f0:	blt	3258 <coda_bin_cursor_read_int8_partial_array+0x13c>
    31f4:	mov	r0, sp
    31f8:	mov	r1, r6
    31fc:	bl	0 <coda_cursor_goto_array_element_by_index>
    3200:	mvn	r8, #0
    3204:	cmp	r0, #0
    3208:	bne	325c <coda_bin_cursor_read_int8_partial_array+0x140>
    320c:	sub	r6, r5, #1
    3210:	mov	r7, #0
    3214:	mov	r9, sp
    3218:	b	3228 <coda_bin_cursor_read_int8_partial_array+0x10c>
    321c:	add	r7, r7, #1
    3220:	cmp	r5, r7
    3224:	beq	3258 <coda_bin_cursor_read_int8_partial_array+0x13c>
    3228:	add	r1, r4, r7
    322c:	mov	r0, r9
    3230:	bl	0 <coda_ascii_cursor_read_int8>
    3234:	cmp	r0, #0
    3238:	bne	325c <coda_bin_cursor_read_int8_partial_array+0x140>
    323c:	cmp	r7, r6
    3240:	bge	321c <coda_bin_cursor_read_int8_partial_array+0x100>
    3244:	mov	r0, r9
    3248:	bl	0 <coda_cursor_goto_next_array_element>
    324c:	cmp	r0, #0
    3250:	beq	321c <coda_bin_cursor_read_int8_partial_array+0x100>
    3254:	b	325c <coda_bin_cursor_read_int8_partial_array+0x140>
    3258:	mov	r8, #0
    325c:	mov	r0, r8
    3260:	sub	sp, fp, #24
    3264:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
    3268:	movw	r0, #0
    326c:	movw	r1, #0
    3270:	movw	r3, #0
    3274:	movw	r2, #1192	; 0x4a8
    3278:	movt	r0, #0
    327c:	movt	r1, #0
    3280:	movt	r3, #0
    3284:	bl	0 <__assert_fail>

00003288 <coda_bin_cursor_read_uint8_partial_array>:
    3288:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
    328c:	add	fp, sp, #24
    3290:	sub	sp, sp, #528	; 0x210
    3294:	mov	r6, r1
    3298:	mov	r1, r0
    329c:	ldr	r0, [r0, #4]
    32a0:	mov	r5, r2
    32a4:	mov	r4, r3
    32a8:	add	r0, r1, r0, lsl #4
    32ac:	ldr	r0, [r0, #-8]
    32b0:	ldr	r2, [r0]
    32b4:	cmp	r2, #99	; 0x63
    32b8:	ldrhi	r0, [r0, #4]
    32bc:	ldr	r0, [r0, #40]	; 0x28
    32c0:	ldr	r0, [r0]
    32c4:	cmp	r0, #0
    32c8:	beq	334c <coda_bin_cursor_read_uint8_partial_array+0xc4>
    32cc:	cmp	r0, #1
    32d0:	bne	33d4 <coda_bin_cursor_read_uint8_partial_array+0x14c>
    32d4:	mov	r0, sp
    32d8:	mov	r2, #520	; 0x208
    32dc:	bl	0 <memcpy>
    32e0:	cmp	r5, #1
    32e4:	blt	33c4 <coda_bin_cursor_read_uint8_partial_array+0x13c>
    32e8:	mov	r0, sp
    32ec:	mov	r1, r6
    32f0:	bl	0 <coda_cursor_goto_array_element_by_index>
    32f4:	mvn	r8, #0
    32f8:	cmp	r0, #0
    32fc:	bne	33c8 <coda_bin_cursor_read_uint8_partial_array+0x140>
    3300:	sub	r6, r5, #1
    3304:	mov	r7, #0
    3308:	mov	r9, sp
    330c:	b	331c <coda_bin_cursor_read_uint8_partial_array+0x94>
    3310:	add	r7, r7, #1
    3314:	cmp	r5, r7
    3318:	beq	33c4 <coda_bin_cursor_read_uint8_partial_array+0x13c>
    331c:	add	r1, r4, r7
    3320:	mov	r0, r9
    3324:	bl	a2c <coda_bin_cursor_read_uint8>
    3328:	cmp	r0, #0
    332c:	bne	33c8 <coda_bin_cursor_read_uint8_partial_array+0x140>
    3330:	cmp	r7, r6
    3334:	bge	3310 <coda_bin_cursor_read_uint8_partial_array+0x88>
    3338:	mov	r0, r9
    333c:	bl	0 <coda_cursor_goto_next_array_element>
    3340:	cmp	r0, #0
    3344:	beq	3310 <coda_bin_cursor_read_uint8_partial_array+0x88>
    3348:	b	33c8 <coda_bin_cursor_read_uint8_partial_array+0x140>
    334c:	mov	r0, sp
    3350:	mov	r2, #520	; 0x208
    3354:	bl	0 <memcpy>
    3358:	cmp	r5, #1
    335c:	blt	33c4 <coda_bin_cursor_read_uint8_partial_array+0x13c>
    3360:	mov	r0, sp
    3364:	mov	r1, r6
    3368:	bl	0 <coda_cursor_goto_array_element_by_index>
    336c:	mvn	r8, #0
    3370:	cmp	r0, #0
    3374:	bne	33c8 <coda_bin_cursor_read_uint8_partial_array+0x140>
    3378:	sub	r6, r5, #1
    337c:	mov	r7, #0
    3380:	mov	r9, sp
    3384:	b	3394 <coda_bin_cursor_read_uint8_partial_array+0x10c>
    3388:	add	r7, r7, #1
    338c:	cmp	r5, r7
    3390:	beq	33c4 <coda_bin_cursor_read_uint8_partial_array+0x13c>
    3394:	add	r1, r4, r7
    3398:	mov	r0, r9
    339c:	bl	0 <coda_ascii_cursor_read_uint8>
    33a0:	cmp	r0, #0
    33a4:	bne	33c8 <coda_bin_cursor_read_uint8_partial_array+0x140>
    33a8:	cmp	r7, r6
    33ac:	bge	3388 <coda_bin_cursor_read_uint8_partial_array+0x100>
    33b0:	mov	r0, r9
    33b4:	bl	0 <coda_cursor_goto_next_array_element>
    33b8:	cmp	r0, #0
    33bc:	beq	3388 <coda_bin_cursor_read_uint8_partial_array+0x100>
    33c0:	b	33c8 <coda_bin_cursor_read_uint8_partial_array+0x140>
    33c4:	mov	r8, #0
    33c8:	mov	r0, r8
    33cc:	sub	sp, fp, #24
    33d0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
    33d4:	movw	r0, #0
    33d8:	movw	r1, #0
    33dc:	movw	r3, #0
    33e0:	movw	r2, #1206	; 0x4b6
    33e4:	movt	r0, #0
    33e8:	movt	r1, #0
    33ec:	movt	r3, #0
    33f0:	bl	0 <__assert_fail>

000033f4 <coda_bin_cursor_read_int16_partial_array>:
    33f4:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
    33f8:	add	fp, sp, #24
    33fc:	sub	sp, sp, #528	; 0x210
    3400:	mov	r6, r1
    3404:	mov	r1, r0
    3408:	ldr	r0, [r0, #4]
    340c:	mov	r5, r2
    3410:	mov	r4, r3
    3414:	add	r0, r1, r0, lsl #4
    3418:	ldr	r0, [r0, #-8]
    341c:	ldr	r2, [r0]
    3420:	cmp	r2, #99	; 0x63
    3424:	ldrhi	r0, [r0, #4]
    3428:	ldr	r0, [r0, #40]	; 0x28
    342c:	ldr	r0, [r0]
    3430:	cmp	r0, #0
    3434:	beq	34bc <coda_bin_cursor_read_int16_partial_array+0xc8>
    3438:	cmp	r0, #1
    343c:	bne	3548 <coda_bin_cursor_read_int16_partial_array+0x154>
    3440:	mov	r0, sp
    3444:	mov	r2, #520	; 0x208
    3448:	bl	0 <memcpy>
    344c:	cmp	r5, #1
    3450:	blt	3538 <coda_bin_cursor_read_int16_partial_array+0x144>
    3454:	mov	r0, sp
    3458:	mov	r1, r6
    345c:	bl	0 <coda_cursor_goto_array_element_by_index>
    3460:	mvn	r8, #0
    3464:	cmp	r0, #0
    3468:	bne	353c <coda_bin_cursor_read_int16_partial_array+0x148>
    346c:	sub	r6, r5, #1
    3470:	mov	r7, #0
    3474:	mov	r9, sp
    3478:	b	348c <coda_bin_cursor_read_int16_partial_array+0x98>
    347c:	add	r7, r7, #1
    3480:	add	r4, r4, #2
    3484:	cmp	r5, r7
    3488:	beq	3538 <coda_bin_cursor_read_int16_partial_array+0x144>
    348c:	mov	r0, r9
    3490:	mov	r1, r4
    3494:	bl	bd4 <coda_bin_cursor_read_int16>
    3498:	cmp	r0, #0
    349c:	bne	353c <coda_bin_cursor_read_int16_partial_array+0x148>
    34a0:	cmp	r7, r6
    34a4:	bge	347c <coda_bin_cursor_read_int16_partial_array+0x88>
    34a8:	mov	r0, r9
    34ac:	bl	0 <coda_cursor_goto_next_array_element>
    34b0:	cmp	r0, #0
    34b4:	beq	347c <coda_bin_cursor_read_int16_partial_array+0x88>
    34b8:	b	353c <coda_bin_cursor_read_int16_partial_array+0x148>
    34bc:	mov	r0, sp
    34c0:	mov	r2, #520	; 0x208
    34c4:	bl	0 <memcpy>
    34c8:	cmp	r5, #1
    34cc:	blt	3538 <coda_bin_cursor_read_int16_partial_array+0x144>
    34d0:	mov	r0, sp
    34d4:	mov	r1, r6
    34d8:	bl	0 <coda_cursor_goto_array_element_by_index>
    34dc:	mvn	r8, #0
    34e0:	cmp	r0, #0
    34e4:	bne	353c <coda_bin_cursor_read_int16_partial_array+0x148>
    34e8:	sub	r6, r5, #1
    34ec:	mov	r7, #0
    34f0:	mov	r9, sp
    34f4:	b	3508 <coda_bin_cursor_read_int16_partial_array+0x114>
    34f8:	add	r7, r7, #1
    34fc:	add	r4, r4, #2
    3500:	cmp	r5, r7
    3504:	beq	3538 <coda_bin_cursor_read_int16_partial_array+0x144>
    3508:	mov	r0, r9
    350c:	mov	r1, r4
    3510:	bl	0 <coda_ascii_cursor_read_int16>
    3514:	cmp	r0, #0
    3518:	bne	353c <coda_bin_cursor_read_int16_partial_array+0x148>
    351c:	cmp	r7, r6
    3520:	bge	34f8 <coda_bin_cursor_read_int16_partial_array+0x104>
    3524:	mov	r0, r9
    3528:	bl	0 <coda_cursor_goto_next_array_element>
    352c:	cmp	r0, #0
    3530:	beq	34f8 <coda_bin_cursor_read_int16_partial_array+0x104>
    3534:	b	353c <coda_bin_cursor_read_int16_partial_array+0x148>
    3538:	mov	r8, #0
    353c:	mov	r0, r8
    3540:	sub	sp, fp, #24
    3544:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
    3548:	movw	r0, #0
    354c:	movw	r1, #0
    3550:	movw	r3, #0
    3554:	movw	r2, #1220	; 0x4c4
    3558:	movt	r0, #0
    355c:	movt	r1, #0
    3560:	movt	r3, #0
    3564:	bl	0 <__assert_fail>

00003568 <coda_bin_cursor_read_uint16_partial_array>:
    3568:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
    356c:	add	fp, sp, #24
    3570:	sub	sp, sp, #528	; 0x210
    3574:	mov	r6, r1
    3578:	mov	r1, r0
    357c:	ldr	r0, [r0, #4]
    3580:	mov	r5, r2
    3584:	mov	r4, r3
    3588:	add	r0, r1, r0, lsl #4
    358c:	ldr	r0, [r0, #-8]
    3590:	ldr	r2, [r0]
    3594:	cmp	r2, #99	; 0x63
    3598:	ldrhi	r0, [r0, #4]
    359c:	ldr	r0, [r0, #40]	; 0x28
    35a0:	ldr	r0, [r0]
    35a4:	cmp	r0, #0
    35a8:	beq	3630 <coda_bin_cursor_read_uint16_partial_array+0xc8>
    35ac:	cmp	r0, #1
    35b0:	bne	36bc <coda_bin_cursor_read_uint16_partial_array+0x154>
    35b4:	mov	r0, sp
    35b8:	mov	r2, #520	; 0x208
    35bc:	bl	0 <memcpy>
    35c0:	cmp	r5, #1
    35c4:	blt	36ac <coda_bin_cursor_read_uint16_partial_array+0x144>
    35c8:	mov	r0, sp
    35cc:	mov	r1, r6
    35d0:	bl	0 <coda_cursor_goto_array_element_by_index>
    35d4:	mvn	r8, #0
    35d8:	cmp	r0, #0
    35dc:	bne	36b0 <coda_bin_cursor_read_uint16_partial_array+0x148>
    35e0:	sub	r6, r5, #1
    35e4:	mov	r7, #0
    35e8:	mov	r9, sp
    35ec:	b	3600 <coda_bin_cursor_read_uint16_partial_array+0x98>
    35f0:	add	r7, r7, #1
    35f4:	add	r4, r4, #2
    35f8:	cmp	r5, r7
    35fc:	beq	36ac <coda_bin_cursor_read_uint16_partial_array+0x144>
    3600:	mov	r0, r9
    3604:	mov	r1, r4
    3608:	bl	d9c <coda_bin_cursor_read_uint16>
    360c:	cmp	r0, #0
    3610:	bne	36b0 <coda_bin_cursor_read_uint16_partial_array+0x148>
    3614:	cmp	r7, r6
    3618:	bge	35f0 <coda_bin_cursor_read_uint16_partial_array+0x88>
    361c:	mov	r0, r9
    3620:	bl	0 <coda_cursor_goto_next_array_element>
    3624:	cmp	r0, #0
    3628:	beq	35f0 <coda_bin_cursor_read_uint16_partial_array+0x88>
    362c:	b	36b0 <coda_bin_cursor_read_uint16_partial_array+0x148>
    3630:	mov	r0, sp
    3634:	mov	r2, #520	; 0x208
    3638:	bl	0 <memcpy>
    363c:	cmp	r5, #1
    3640:	blt	36ac <coda_bin_cursor_read_uint16_partial_array+0x144>
    3644:	mov	r0, sp
    3648:	mov	r1, r6
    364c:	bl	0 <coda_cursor_goto_array_element_by_index>
    3650:	mvn	r8, #0
    3654:	cmp	r0, #0
    3658:	bne	36b0 <coda_bin_cursor_read_uint16_partial_array+0x148>
    365c:	sub	r6, r5, #1
    3660:	mov	r7, #0
    3664:	mov	r9, sp
    3668:	b	367c <coda_bin_cursor_read_uint16_partial_array+0x114>
    366c:	add	r7, r7, #1
    3670:	add	r4, r4, #2
    3674:	cmp	r5, r7
    3678:	beq	36ac <coda_bin_cursor_read_uint16_partial_array+0x144>
    367c:	mov	r0, r9
    3680:	mov	r1, r4
    3684:	bl	0 <coda_ascii_cursor_read_uint16>
    3688:	cmp	r0, #0
    368c:	bne	36b0 <coda_bin_cursor_read_uint16_partial_array+0x148>
    3690:	cmp	r7, r6
    3694:	bge	366c <coda_bin_cursor_read_uint16_partial_array+0x104>
    3698:	mov	r0, r9
    369c:	bl	0 <coda_cursor_goto_next_array_element>
    36a0:	cmp	r0, #0
    36a4:	beq	366c <coda_bin_cursor_read_uint16_partial_array+0x104>
    36a8:	b	36b0 <coda_bin_cursor_read_uint16_partial_array+0x148>
    36ac:	mov	r8, #0
    36b0:	mov	r0, r8
    36b4:	sub	sp, fp, #24
    36b8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
    36bc:	movw	r0, #0
    36c0:	movw	r1, #0
    36c4:	movw	r3, #0
    36c8:	movw	r2, #1234	; 0x4d2
    36cc:	movt	r0, #0
    36d0:	movt	r1, #0
    36d4:	movt	r3, #0
    36d8:	bl	0 <__assert_fail>

000036dc <coda_bin_cursor_read_int32_partial_array>:
    36dc:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
    36e0:	add	fp, sp, #24
    36e4:	sub	sp, sp, #528	; 0x210
    36e8:	mov	r6, r1
    36ec:	mov	r1, r0
    36f0:	ldr	r0, [r0, #4]
    36f4:	mov	r5, r2
    36f8:	mov	r4, r3
    36fc:	add	r0, r1, r0, lsl #4
    3700:	ldr	r0, [r0, #-8]
    3704:	ldr	r2, [r0]
    3708:	cmp	r2, #99	; 0x63
    370c:	ldrhi	r0, [r0, #4]
    3710:	ldr	r0, [r0, #40]	; 0x28
    3714:	ldr	r0, [r0]
    3718:	cmp	r0, #0
    371c:	beq	37a4 <coda_bin_cursor_read_int32_partial_array+0xc8>
    3720:	cmp	r0, #1
    3724:	bne	3830 <coda_bin_cursor_read_int32_partial_array+0x154>
    3728:	mov	r0, sp
    372c:	mov	r2, #520	; 0x208
    3730:	bl	0 <memcpy>
    3734:	cmp	r5, #1
    3738:	blt	3820 <coda_bin_cursor_read_int32_partial_array+0x144>
    373c:	mov	r0, sp
    3740:	mov	r1, r6
    3744:	bl	0 <coda_cursor_goto_array_element_by_index>
    3748:	mvn	r8, #0
    374c:	cmp	r0, #0
    3750:	bne	3824 <coda_bin_cursor_read_int32_partial_array+0x148>
    3754:	sub	r6, r5, #1
    3758:	mov	r7, #0
    375c:	mov	r9, sp
    3760:	b	3774 <coda_bin_cursor_read_int32_partial_array+0x98>
    3764:	add	r7, r7, #1
    3768:	add	r4, r4, #4
    376c:	cmp	r5, r7
    3770:	beq	3820 <coda_bin_cursor_read_int32_partial_array+0x144>
    3774:	mov	r0, r9
    3778:	mov	r1, r4
    377c:	bl	f34 <coda_bin_cursor_read_int32>
    3780:	cmp	r0, #0
    3784:	bne	3824 <coda_bin_cursor_read_int32_partial_array+0x148>
    3788:	cmp	r7, r6
    378c:	bge	3764 <coda_bin_cursor_read_int32_partial_array+0x88>
    3790:	mov	r0, r9
    3794:	bl	0 <coda_cursor_goto_next_array_element>
    3798:	cmp	r0, #0
    379c:	beq	3764 <coda_bin_cursor_read_int32_partial_array+0x88>
    37a0:	b	3824 <coda_bin_cursor_read_int32_partial_array+0x148>
    37a4:	mov	r0, sp
    37a8:	mov	r2, #520	; 0x208
    37ac:	bl	0 <memcpy>
    37b0:	cmp	r5, #1
    37b4:	blt	3820 <coda_bin_cursor_read_int32_partial_array+0x144>
    37b8:	mov	r0, sp
    37bc:	mov	r1, r6
    37c0:	bl	0 <coda_cursor_goto_array_element_by_index>
    37c4:	mvn	r8, #0
    37c8:	cmp	r0, #0
    37cc:	bne	3824 <coda_bin_cursor_read_int32_partial_array+0x148>
    37d0:	sub	r6, r5, #1
    37d4:	mov	r7, #0
    37d8:	mov	r9, sp
    37dc:	b	37f0 <coda_bin_cursor_read_int32_partial_array+0x114>
    37e0:	add	r7, r7, #1
    37e4:	add	r4, r4, #4
    37e8:	cmp	r5, r7
    37ec:	beq	3820 <coda_bin_cursor_read_int32_partial_array+0x144>
    37f0:	mov	r0, r9
    37f4:	mov	r1, r4
    37f8:	bl	0 <coda_ascii_cursor_read_int32>
    37fc:	cmp	r0, #0
    3800:	bne	3824 <coda_bin_cursor_read_int32_partial_array+0x148>
    3804:	cmp	r7, r6
    3808:	bge	37e0 <coda_bin_cursor_read_int32_partial_array+0x104>
    380c:	mov	r0, r9
    3810:	bl	0 <coda_cursor_goto_next_array_element>
    3814:	cmp	r0, #0
    3818:	beq	37e0 <coda_bin_cursor_read_int32_partial_array+0x104>
    381c:	b	3824 <coda_bin_cursor_read_int32_partial_array+0x148>
    3820:	mov	r8, #0
    3824:	mov	r0, r8
    3828:	sub	sp, fp, #24
    382c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
    3830:	movw	r0, #0
    3834:	movw	r1, #0
    3838:	movw	r3, #0
    383c:	mov	r2, #1248	; 0x4e0
    3840:	movt	r0, #0
    3844:	movt	r1, #0
    3848:	movt	r3, #0
    384c:	bl	0 <__assert_fail>

00003850 <coda_bin_cursor_read_uint32_partial_array>:
    3850:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
    3854:	add	fp, sp, #24
    3858:	sub	sp, sp, #528	; 0x210
    385c:	mov	r6, r1
    3860:	mov	r1, r0
    3864:	ldr	r0, [r0, #4]
    3868:	mov	r5, r2
    386c:	mov	r4, r3
    3870:	add	r0, r1, r0, lsl #4
    3874:	ldr	r0, [r0, #-8]
    3878:	ldr	r2, [r0]
    387c:	cmp	r2, #99	; 0x63
    3880:	ldrhi	r0, [r0, #4]
    3884:	ldr	r0, [r0, #40]	; 0x28
    3888:	ldr	r0, [r0]
    388c:	cmp	r0, #0
    3890:	beq	3918 <coda_bin_cursor_read_uint32_partial_array+0xc8>
    3894:	cmp	r0, #1
    3898:	bne	39a4 <coda_bin_cursor_read_uint32_partial_array+0x154>
    389c:	mov	r0, sp
    38a0:	mov	r2, #520	; 0x208
    38a4:	bl	0 <memcpy>
    38a8:	cmp	r5, #1
    38ac:	blt	3994 <coda_bin_cursor_read_uint32_partial_array+0x144>
    38b0:	mov	r0, sp
    38b4:	mov	r1, r6
    38b8:	bl	0 <coda_cursor_goto_array_element_by_index>
    38bc:	mvn	r8, #0
    38c0:	cmp	r0, #0
    38c4:	bne	3998 <coda_bin_cursor_read_uint32_partial_array+0x148>
    38c8:	sub	r6, r5, #1
    38cc:	mov	r7, #0
    38d0:	mov	r9, sp
    38d4:	b	38e8 <coda_bin_cursor_read_uint32_partial_array+0x98>
    38d8:	add	r7, r7, #1
    38dc:	add	r4, r4, #4
    38e0:	cmp	r5, r7
    38e4:	beq	3994 <coda_bin_cursor_read_uint32_partial_array+0x144>
    38e8:	mov	r0, r9
    38ec:	mov	r1, r4
    38f0:	bl	10fc <coda_bin_cursor_read_uint32>
    38f4:	cmp	r0, #0
    38f8:	bne	3998 <coda_bin_cursor_read_uint32_partial_array+0x148>
    38fc:	cmp	r7, r6
    3900:	bge	38d8 <coda_bin_cursor_read_uint32_partial_array+0x88>
    3904:	mov	r0, r9
    3908:	bl	0 <coda_cursor_goto_next_array_element>
    390c:	cmp	r0, #0
    3910:	beq	38d8 <coda_bin_cursor_read_uint32_partial_array+0x88>
    3914:	b	3998 <coda_bin_cursor_read_uint32_partial_array+0x148>
    3918:	mov	r0, sp
    391c:	mov	r2, #520	; 0x208
    3920:	bl	0 <memcpy>
    3924:	cmp	r5, #1
    3928:	blt	3994 <coda_bin_cursor_read_uint32_partial_array+0x144>
    392c:	mov	r0, sp
    3930:	mov	r1, r6
    3934:	bl	0 <coda_cursor_goto_array_element_by_index>
    3938:	mvn	r8, #0
    393c:	cmp	r0, #0
    3940:	bne	3998 <coda_bin_cursor_read_uint32_partial_array+0x148>
    3944:	sub	r6, r5, #1
    3948:	mov	r7, #0
    394c:	mov	r9, sp
    3950:	b	3964 <coda_bin_cursor_read_uint32_partial_array+0x114>
    3954:	add	r7, r7, #1
    3958:	add	r4, r4, #4
    395c:	cmp	r5, r7
    3960:	beq	3994 <coda_bin_cursor_read_uint32_partial_array+0x144>
    3964:	mov	r0, r9
    3968:	mov	r1, r4
    396c:	bl	0 <coda_ascii_cursor_read_uint32>
    3970:	cmp	r0, #0
    3974:	bne	3998 <coda_bin_cursor_read_uint32_partial_array+0x148>
    3978:	cmp	r7, r6
    397c:	bge	3954 <coda_bin_cursor_read_uint32_partial_array+0x104>
    3980:	mov	r0, r9
    3984:	bl	0 <coda_cursor_goto_next_array_element>
    3988:	cmp	r0, #0
    398c:	beq	3954 <coda_bin_cursor_read_uint32_partial_array+0x104>
    3990:	b	3998 <coda_bin_cursor_read_uint32_partial_array+0x148>
    3994:	mov	r8, #0
    3998:	mov	r0, r8
    399c:	sub	sp, fp, #24
    39a0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
    39a4:	movw	r0, #0
    39a8:	movw	r1, #0
    39ac:	movw	r3, #0
    39b0:	movw	r2, #1262	; 0x4ee
    39b4:	movt	r0, #0
    39b8:	movt	r1, #0
    39bc:	movt	r3, #0
    39c0:	bl	0 <__assert_fail>

000039c4 <coda_bin_cursor_read_int64_partial_array>:
    39c4:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
    39c8:	add	fp, sp, #24
    39cc:	sub	sp, sp, #528	; 0x210
    39d0:	mov	r6, r1
    39d4:	mov	r1, r0
    39d8:	ldr	r0, [r0, #4]
    39dc:	mov	r5, r2
    39e0:	mov	r4, r3
    39e4:	add	r0, r1, r0, lsl #4
    39e8:	ldr	r0, [r0, #-8]
    39ec:	ldr	r2, [r0]
    39f0:	cmp	r2, #99	; 0x63
    39f4:	ldrhi	r0, [r0, #4]
    39f8:	ldr	r0, [r0, #40]	; 0x28
    39fc:	ldr	r0, [r0]
    3a00:	cmp	r0, #0
    3a04:	beq	3a8c <coda_bin_cursor_read_int64_partial_array+0xc8>
    3a08:	cmp	r0, #1
    3a0c:	bne	3b18 <coda_bin_cursor_read_int64_partial_array+0x154>
    3a10:	mov	r0, sp
    3a14:	mov	r2, #520	; 0x208
    3a18:	bl	0 <memcpy>
    3a1c:	cmp	r5, #1
    3a20:	blt	3b08 <coda_bin_cursor_read_int64_partial_array+0x144>
    3a24:	mov	r0, sp
    3a28:	mov	r1, r6
    3a2c:	bl	0 <coda_cursor_goto_array_element_by_index>
    3a30:	mvn	r8, #0
    3a34:	cmp	r0, #0
    3a38:	bne	3b0c <coda_bin_cursor_read_int64_partial_array+0x148>
    3a3c:	sub	r6, r5, #1
    3a40:	mov	r7, #0
    3a44:	mov	r9, sp
    3a48:	b	3a5c <coda_bin_cursor_read_int64_partial_array+0x98>
    3a4c:	add	r7, r7, #1
    3a50:	add	r4, r4, #8
    3a54:	cmp	r5, r7
    3a58:	beq	3b08 <coda_bin_cursor_read_int64_partial_array+0x144>
    3a5c:	mov	r0, r9
    3a60:	mov	r1, r4
    3a64:	bl	1294 <coda_bin_cursor_read_int64>
    3a68:	cmp	r0, #0
    3a6c:	bne	3b0c <coda_bin_cursor_read_int64_partial_array+0x148>
    3a70:	cmp	r7, r6
    3a74:	bge	3a4c <coda_bin_cursor_read_int64_partial_array+0x88>
    3a78:	mov	r0, r9
    3a7c:	bl	0 <coda_cursor_goto_next_array_element>
    3a80:	cmp	r0, #0
    3a84:	beq	3a4c <coda_bin_cursor_read_int64_partial_array+0x88>
    3a88:	b	3b0c <coda_bin_cursor_read_int64_partial_array+0x148>
    3a8c:	mov	r0, sp
    3a90:	mov	r2, #520	; 0x208
    3a94:	bl	0 <memcpy>
    3a98:	cmp	r5, #1
    3a9c:	blt	3b08 <coda_bin_cursor_read_int64_partial_array+0x144>
    3aa0:	mov	r0, sp
    3aa4:	mov	r1, r6
    3aa8:	bl	0 <coda_cursor_goto_array_element_by_index>
    3aac:	mvn	r8, #0
    3ab0:	cmp	r0, #0
    3ab4:	bne	3b0c <coda_bin_cursor_read_int64_partial_array+0x148>
    3ab8:	sub	r6, r5, #1
    3abc:	mov	r7, #0
    3ac0:	mov	r9, sp
    3ac4:	b	3ad8 <coda_bin_cursor_read_int64_partial_array+0x114>
    3ac8:	add	r7, r7, #1
    3acc:	add	r4, r4, #8
    3ad0:	cmp	r5, r7
    3ad4:	beq	3b08 <coda_bin_cursor_read_int64_partial_array+0x144>
    3ad8:	mov	r0, r9
    3adc:	mov	r1, r4
    3ae0:	bl	0 <coda_ascii_cursor_read_int64>
    3ae4:	cmp	r0, #0
    3ae8:	bne	3b0c <coda_bin_cursor_read_int64_partial_array+0x148>
    3aec:	cmp	r7, r6
    3af0:	bge	3ac8 <coda_bin_cursor_read_int64_partial_array+0x104>
    3af4:	mov	r0, r9
    3af8:	bl	0 <coda_cursor_goto_next_array_element>
    3afc:	cmp	r0, #0
    3b00:	beq	3ac8 <coda_bin_cursor_read_int64_partial_array+0x104>
    3b04:	b	3b0c <coda_bin_cursor_read_int64_partial_array+0x148>
    3b08:	mov	r8, #0
    3b0c:	mov	r0, r8
    3b10:	sub	sp, fp, #24
    3b14:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
    3b18:	movw	r0, #0
    3b1c:	movw	r1, #0
    3b20:	movw	r3, #0
    3b24:	movw	r2, #1276	; 0x4fc
    3b28:	movt	r0, #0
    3b2c:	movt	r1, #0
    3b30:	movt	r3, #0
    3b34:	bl	0 <__assert_fail>

00003b38 <coda_bin_cursor_read_uint64_partial_array>:
    3b38:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
    3b3c:	add	fp, sp, #24
    3b40:	sub	sp, sp, #528	; 0x210
    3b44:	mov	r6, r1
    3b48:	mov	r1, r0
    3b4c:	ldr	r0, [r0, #4]
    3b50:	mov	r5, r2
    3b54:	mov	r4, r3
    3b58:	add	r0, r1, r0, lsl #4
    3b5c:	ldr	r0, [r0, #-8]
    3b60:	ldr	r2, [r0]
    3b64:	cmp	r2, #99	; 0x63
    3b68:	ldrhi	r0, [r0, #4]
    3b6c:	ldr	r0, [r0, #40]	; 0x28
    3b70:	ldr	r0, [r0]
    3b74:	cmp	r0, #0
    3b78:	beq	3c00 <coda_bin_cursor_read_uint64_partial_array+0xc8>
    3b7c:	cmp	r0, #1
    3b80:	bne	3c8c <coda_bin_cursor_read_uint64_partial_array+0x154>
    3b84:	mov	r0, sp
    3b88:	mov	r2, #520	; 0x208
    3b8c:	bl	0 <memcpy>
    3b90:	cmp	r5, #1
    3b94:	blt	3c7c <coda_bin_cursor_read_uint64_partial_array+0x144>
    3b98:	mov	r0, sp
    3b9c:	mov	r1, r6
    3ba0:	bl	0 <coda_cursor_goto_array_element_by_index>
    3ba4:	mvn	r8, #0
    3ba8:	cmp	r0, #0
    3bac:	bne	3c80 <coda_bin_cursor_read_uint64_partial_array+0x148>
    3bb0:	sub	r6, r5, #1
    3bb4:	mov	r7, #0
    3bb8:	mov	r9, sp
    3bbc:	b	3bd0 <coda_bin_cursor_read_uint64_partial_array+0x98>
    3bc0:	add	r7, r7, #1
    3bc4:	add	r4, r4, #8
    3bc8:	cmp	r5, r7
    3bcc:	beq	3c7c <coda_bin_cursor_read_uint64_partial_array+0x144>
    3bd0:	mov	r0, r9
    3bd4:	mov	r1, r4
    3bd8:	bl	149c <coda_bin_cursor_read_uint64>
    3bdc:	cmp	r0, #0
    3be0:	bne	3c80 <coda_bin_cursor_read_uint64_partial_array+0x148>
    3be4:	cmp	r7, r6
    3be8:	bge	3bc0 <coda_bin_cursor_read_uint64_partial_array+0x88>
    3bec:	mov	r0, r9
    3bf0:	bl	0 <coda_cursor_goto_next_array_element>
    3bf4:	cmp	r0, #0
    3bf8:	beq	3bc0 <coda_bin_cursor_read_uint64_partial_array+0x88>
    3bfc:	b	3c80 <coda_bin_cursor_read_uint64_partial_array+0x148>
    3c00:	mov	r0, sp
    3c04:	mov	r2, #520	; 0x208
    3c08:	bl	0 <memcpy>
    3c0c:	cmp	r5, #1
    3c10:	blt	3c7c <coda_bin_cursor_read_uint64_partial_array+0x144>
    3c14:	mov	r0, sp
    3c18:	mov	r1, r6
    3c1c:	bl	0 <coda_cursor_goto_array_element_by_index>
    3c20:	mvn	r8, #0
    3c24:	cmp	r0, #0
    3c28:	bne	3c80 <coda_bin_cursor_read_uint64_partial_array+0x148>
    3c2c:	sub	r6, r5, #1
    3c30:	mov	r7, #0
    3c34:	mov	r9, sp
    3c38:	b	3c4c <coda_bin_cursor_read_uint64_partial_array+0x114>
    3c3c:	add	r7, r7, #1
    3c40:	add	r4, r4, #8
    3c44:	cmp	r5, r7
    3c48:	beq	3c7c <coda_bin_cursor_read_uint64_partial_array+0x144>
    3c4c:	mov	r0, r9
    3c50:	mov	r1, r4
    3c54:	bl	0 <coda_ascii_cursor_read_uint64>
    3c58:	cmp	r0, #0
    3c5c:	bne	3c80 <coda_bin_cursor_read_uint64_partial_array+0x148>
    3c60:	cmp	r7, r6
    3c64:	bge	3c3c <coda_bin_cursor_read_uint64_partial_array+0x104>
    3c68:	mov	r0, r9
    3c6c:	bl	0 <coda_cursor_goto_next_array_element>
    3c70:	cmp	r0, #0
    3c74:	beq	3c3c <coda_bin_cursor_read_uint64_partial_array+0x104>
    3c78:	b	3c80 <coda_bin_cursor_read_uint64_partial_array+0x148>
    3c7c:	mov	r8, #0
    3c80:	mov	r0, r8
    3c84:	sub	sp, fp, #24
    3c88:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
    3c8c:	movw	r0, #0
    3c90:	movw	r1, #0
    3c94:	movw	r3, #0
    3c98:	movw	r2, #1290	; 0x50a
    3c9c:	movt	r0, #0
    3ca0:	movt	r1, #0
    3ca4:	movt	r3, #0
    3ca8:	bl	0 <__assert_fail>

00003cac <coda_bin_cursor_read_float_partial_array>:
    3cac:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
    3cb0:	add	fp, sp, #24
    3cb4:	sub	sp, sp, #528	; 0x210
    3cb8:	mov	r6, r1
    3cbc:	mov	r1, r0
    3cc0:	ldr	r0, [r0, #4]
    3cc4:	mov	r5, r2
    3cc8:	mov	r4, r3
    3ccc:	add	r0, r1, r0, lsl #4
    3cd0:	ldr	r0, [r0, #-8]
    3cd4:	ldr	r2, [r0]
    3cd8:	cmp	r2, #99	; 0x63
    3cdc:	ldrhi	r0, [r0, #4]
    3ce0:	ldr	r0, [r0, #40]	; 0x28
    3ce4:	ldr	r0, [r0]
    3ce8:	cmp	r0, #0
    3cec:	beq	3d74 <coda_bin_cursor_read_float_partial_array+0xc8>
    3cf0:	cmp	r0, #1
    3cf4:	bne	3e00 <coda_bin_cursor_read_float_partial_array+0x154>
    3cf8:	mov	r0, sp
    3cfc:	mov	r2, #520	; 0x208
    3d00:	bl	0 <memcpy>
    3d04:	cmp	r5, #1
    3d08:	blt	3df0 <coda_bin_cursor_read_float_partial_array+0x144>
    3d0c:	mov	r0, sp
    3d10:	mov	r1, r6
    3d14:	bl	0 <coda_cursor_goto_array_element_by_index>
    3d18:	mvn	r8, #0
    3d1c:	cmp	r0, #0
    3d20:	bne	3df4 <coda_bin_cursor_read_float_partial_array+0x148>
    3d24:	sub	r6, r5, #1
    3d28:	mov	r7, #0
    3d2c:	mov	r9, sp
    3d30:	b	3d44 <coda_bin_cursor_read_float_partial_array+0x98>
    3d34:	add	r7, r7, #1
    3d38:	add	r4, r4, #4
    3d3c:	cmp	r5, r7
    3d40:	beq	3df0 <coda_bin_cursor_read_float_partial_array+0x144>
    3d44:	mov	r0, r9
    3d48:	mov	r1, r4
    3d4c:	bl	1640 <coda_bin_cursor_read_float>
    3d50:	cmp	r0, #0
    3d54:	bne	3df4 <coda_bin_cursor_read_float_partial_array+0x148>
    3d58:	cmp	r7, r6
    3d5c:	bge	3d34 <coda_bin_cursor_read_float_partial_array+0x88>
    3d60:	mov	r0, r9
    3d64:	bl	0 <coda_cursor_goto_next_array_element>
    3d68:	cmp	r0, #0
    3d6c:	beq	3d34 <coda_bin_cursor_read_float_partial_array+0x88>
    3d70:	b	3df4 <coda_bin_cursor_read_float_partial_array+0x148>
    3d74:	mov	r0, sp
    3d78:	mov	r2, #520	; 0x208
    3d7c:	bl	0 <memcpy>
    3d80:	cmp	r5, #1
    3d84:	blt	3df0 <coda_bin_cursor_read_float_partial_array+0x144>
    3d88:	mov	r0, sp
    3d8c:	mov	r1, r6
    3d90:	bl	0 <coda_cursor_goto_array_element_by_index>
    3d94:	mvn	r8, #0
    3d98:	cmp	r0, #0
    3d9c:	bne	3df4 <coda_bin_cursor_read_float_partial_array+0x148>
    3da0:	sub	r6, r5, #1
    3da4:	mov	r7, #0
    3da8:	mov	r9, sp
    3dac:	b	3dc0 <coda_bin_cursor_read_float_partial_array+0x114>
    3db0:	add	r7, r7, #1
    3db4:	add	r4, r4, #4
    3db8:	cmp	r5, r7
    3dbc:	beq	3df0 <coda_bin_cursor_read_float_partial_array+0x144>
    3dc0:	mov	r0, r9
    3dc4:	mov	r1, r4
    3dc8:	bl	0 <coda_ascii_cursor_read_float>
    3dcc:	cmp	r0, #0
    3dd0:	bne	3df4 <coda_bin_cursor_read_float_partial_array+0x148>
    3dd4:	cmp	r7, r6
    3dd8:	bge	3db0 <coda_bin_cursor_read_float_partial_array+0x104>
    3ddc:	mov	r0, r9
    3de0:	bl	0 <coda_cursor_goto_next_array_element>
    3de4:	cmp	r0, #0
    3de8:	beq	3db0 <coda_bin_cursor_read_float_partial_array+0x104>
    3dec:	b	3df4 <coda_bin_cursor_read_float_partial_array+0x148>
    3df0:	mov	r8, #0
    3df4:	mov	r0, r8
    3df8:	sub	sp, fp, #24
    3dfc:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
    3e00:	movw	r0, #0
    3e04:	movw	r1, #0
    3e08:	movw	r3, #0
    3e0c:	movw	r2, #1304	; 0x518
    3e10:	movt	r0, #0
    3e14:	movt	r1, #0
    3e18:	movt	r3, #0
    3e1c:	bl	0 <__assert_fail>

00003e20 <coda_bin_cursor_read_double_partial_array>:
    3e20:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
    3e24:	add	fp, sp, #24
    3e28:	sub	sp, sp, #528	; 0x210
    3e2c:	mov	r6, r1
    3e30:	mov	r1, r0
    3e34:	ldr	r0, [r0, #4]
    3e38:	mov	r5, r2
    3e3c:	mov	r4, r3
    3e40:	add	r0, r1, r0, lsl #4
    3e44:	ldr	r0, [r0, #-8]
    3e48:	ldr	r2, [r0]
    3e4c:	cmp	r2, #99	; 0x63
    3e50:	ldrhi	r0, [r0, #4]
    3e54:	ldr	r0, [r0, #40]	; 0x28
    3e58:	ldr	r0, [r0]
    3e5c:	cmp	r0, #0
    3e60:	beq	3ee8 <coda_bin_cursor_read_double_partial_array+0xc8>
    3e64:	cmp	r0, #1
    3e68:	bne	3f74 <coda_bin_cursor_read_double_partial_array+0x154>
    3e6c:	mov	r0, sp
    3e70:	mov	r2, #520	; 0x208
    3e74:	bl	0 <memcpy>
    3e78:	cmp	r5, #1
    3e7c:	blt	3f64 <coda_bin_cursor_read_double_partial_array+0x144>
    3e80:	mov	r0, sp
    3e84:	mov	r1, r6
    3e88:	bl	0 <coda_cursor_goto_array_element_by_index>
    3e8c:	mvn	r8, #0
    3e90:	cmp	r0, #0
    3e94:	bne	3f68 <coda_bin_cursor_read_double_partial_array+0x148>
    3e98:	sub	r6, r5, #1
    3e9c:	mov	r7, #0
    3ea0:	mov	r9, sp
    3ea4:	b	3eb8 <coda_bin_cursor_read_double_partial_array+0x98>
    3ea8:	add	r7, r7, #1
    3eac:	add	r4, r4, #8
    3eb0:	cmp	r5, r7
    3eb4:	beq	3f64 <coda_bin_cursor_read_double_partial_array+0x144>
    3eb8:	mov	r0, r9
    3ebc:	mov	r1, r4
    3ec0:	bl	16f4 <coda_bin_cursor_read_double>
    3ec4:	cmp	r0, #0
    3ec8:	bne	3f68 <coda_bin_cursor_read_double_partial_array+0x148>
    3ecc:	cmp	r7, r6
    3ed0:	bge	3ea8 <coda_bin_cursor_read_double_partial_array+0x88>
    3ed4:	mov	r0, r9
    3ed8:	bl	0 <coda_cursor_goto_next_array_element>
    3edc:	cmp	r0, #0
    3ee0:	beq	3ea8 <coda_bin_cursor_read_double_partial_array+0x88>
    3ee4:	b	3f68 <coda_bin_cursor_read_double_partial_array+0x148>
    3ee8:	mov	r0, sp
    3eec:	mov	r2, #520	; 0x208
    3ef0:	bl	0 <memcpy>
    3ef4:	cmp	r5, #1
    3ef8:	blt	3f64 <coda_bin_cursor_read_double_partial_array+0x144>
    3efc:	mov	r0, sp
    3f00:	mov	r1, r6
    3f04:	bl	0 <coda_cursor_goto_array_element_by_index>
    3f08:	mvn	r8, #0
    3f0c:	cmp	r0, #0
    3f10:	bne	3f68 <coda_bin_cursor_read_double_partial_array+0x148>
    3f14:	sub	r6, r5, #1
    3f18:	mov	r7, #0
    3f1c:	mov	r9, sp
    3f20:	b	3f34 <coda_bin_cursor_read_double_partial_array+0x114>
    3f24:	add	r7, r7, #1
    3f28:	add	r4, r4, #8
    3f2c:	cmp	r5, r7
    3f30:	beq	3f64 <coda_bin_cursor_read_double_partial_array+0x144>
    3f34:	mov	r0, r9
    3f38:	mov	r1, r4
    3f3c:	bl	0 <coda_ascii_cursor_read_double>
    3f40:	cmp	r0, #0
    3f44:	bne	3f68 <coda_bin_cursor_read_double_partial_array+0x148>
    3f48:	cmp	r7, r6
    3f4c:	bge	3f24 <coda_bin_cursor_read_double_partial_array+0x104>
    3f50:	mov	r0, r9
    3f54:	bl	0 <coda_cursor_goto_next_array_element>
    3f58:	cmp	r0, #0
    3f5c:	beq	3f24 <coda_bin_cursor_read_double_partial_array+0x104>
    3f60:	b	3f68 <coda_bin_cursor_read_double_partial_array+0x148>
    3f64:	mov	r8, #0
    3f68:	mov	r0, r8
    3f6c:	sub	sp, fp, #24
    3f70:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
    3f74:	movw	r0, #0
    3f78:	movw	r1, #0
    3f7c:	movw	r3, #0
    3f80:	movw	r2, #1318	; 0x526
    3f84:	movt	r0, #0
    3f88:	movt	r1, #0
    3f8c:	movt	r3, #0
    3f90:	bl	0 <__assert_fail>

00003f94 <coda_bin_cursor_read_char_partial_array>:
    3f94:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
    3f98:	add	fp, sp, #24
    3f9c:	sub	sp, sp, #528	; 0x210
    3fa0:	mov	r6, r1
    3fa4:	mov	r1, r0
    3fa8:	ldr	r0, [r0, #4]
    3fac:	mov	r5, r2
    3fb0:	mov	r4, r3
    3fb4:	add	r0, r1, r0, lsl #4
    3fb8:	ldr	r0, [r0, #-8]
    3fbc:	ldr	r2, [r0]
    3fc0:	cmp	r2, #99	; 0x63
    3fc4:	ldrhi	r0, [r0, #4]
    3fc8:	ldr	r0, [r0, #40]	; 0x28
    3fcc:	ldr	r0, [r0]
    3fd0:	cmp	r0, #0
    3fd4:	beq	4058 <coda_bin_cursor_read_char_partial_array+0xc4>
    3fd8:	cmp	r0, #1
    3fdc:	bne	40e0 <coda_bin_cursor_read_char_partial_array+0x14c>
    3fe0:	mov	r0, sp
    3fe4:	mov	r2, #520	; 0x208
    3fe8:	bl	0 <memcpy>
    3fec:	cmp	r5, #1
    3ff0:	blt	40d0 <coda_bin_cursor_read_char_partial_array+0x13c>
    3ff4:	mov	r0, sp
    3ff8:	mov	r1, r6
    3ffc:	bl	0 <coda_cursor_goto_array_element_by_index>
    4000:	mvn	r8, #0
    4004:	cmp	r0, #0
    4008:	bne	40d4 <coda_bin_cursor_read_char_partial_array+0x140>
    400c:	sub	r6, r5, #1
    4010:	mov	r7, #0
    4014:	mov	r9, sp
    4018:	b	4028 <coda_bin_cursor_read_char_partial_array+0x94>
    401c:	add	r7, r7, #1
    4020:	cmp	r5, r7
    4024:	beq	40d0 <coda_bin_cursor_read_char_partial_array+0x13c>
    4028:	add	r1, r4, r7
    402c:	mov	r0, r9
    4030:	bl	a2c <coda_bin_cursor_read_uint8>
    4034:	cmp	r0, #0
    4038:	bne	40d4 <coda_bin_cursor_read_char_partial_array+0x140>
    403c:	cmp	r7, r6
    4040:	bge	401c <coda_bin_cursor_read_char_partial_array+0x88>
    4044:	mov	r0, r9
    4048:	bl	0 <coda_cursor_goto_next_array_element>
    404c:	cmp	r0, #0
    4050:	beq	401c <coda_bin_cursor_read_char_partial_array+0x88>
    4054:	b	40d4 <coda_bin_cursor_read_char_partial_array+0x140>
    4058:	mov	r0, sp
    405c:	mov	r2, #520	; 0x208
    4060:	bl	0 <memcpy>
    4064:	cmp	r5, #1
    4068:	blt	40d0 <coda_bin_cursor_read_char_partial_array+0x13c>
    406c:	mov	r0, sp
    4070:	mov	r1, r6
    4074:	bl	0 <coda_cursor_goto_array_element_by_index>
    4078:	mvn	r8, #0
    407c:	cmp	r0, #0
    4080:	bne	40d4 <coda_bin_cursor_read_char_partial_array+0x140>
    4084:	sub	r6, r5, #1
    4088:	mov	r7, #0
    408c:	mov	r9, sp
    4090:	b	40a0 <coda_bin_cursor_read_char_partial_array+0x10c>
    4094:	add	r7, r7, #1
    4098:	cmp	r5, r7
    409c:	beq	40d0 <coda_bin_cursor_read_char_partial_array+0x13c>
    40a0:	add	r1, r4, r7
    40a4:	mov	r0, r9
    40a8:	bl	0 <coda_ascii_cursor_read_char>
    40ac:	cmp	r0, #0
    40b0:	bne	40d4 <coda_bin_cursor_read_char_partial_array+0x140>
    40b4:	cmp	r7, r6
    40b8:	bge	4094 <coda_bin_cursor_read_char_partial_array+0x100>
    40bc:	mov	r0, r9
    40c0:	bl	0 <coda_cursor_goto_next_array_element>
    40c4:	cmp	r0, #0
    40c8:	beq	4094 <coda_bin_cursor_read_char_partial_array+0x100>
    40cc:	b	40d4 <coda_bin_cursor_read_char_partial_array+0x140>
    40d0:	mov	r8, #0
    40d4:	mov	r0, r8
    40d8:	sub	sp, fp, #24
    40dc:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
    40e0:	movw	r0, #0
    40e4:	movw	r1, #0
    40e8:	movw	r3, #0
    40ec:	movw	r2, #1332	; 0x534
    40f0:	movt	r0, #0
    40f4:	movt	r1, #0
    40f8:	movt	r3, #0
    40fc:	bl	0 <__assert_fail>
