
../compcert-repos/stcorp-coda-3a25f25/CMakeFiles/coda_static.dir/libcoda/coda-ascbin-cursor.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <coda_ascbin_cursor_set_product>:
       0:	push	{fp, lr}
       4:	mov	fp, sp
       8:	mov	r2, r1
       c:	mov	r3, #1
      10:	strd	r2, [r0]
      14:	ldr	r1, [r1, #20]
      18:	cmp	r1, #0
      1c:	movne	r2, #0
      20:	mvnne	r3, #0
      24:	strne	r1, [r0, #8]
      28:	strne	r3, [r0, #12]
      2c:	strne	r2, [r0, #16]
      30:	strne	r2, [r0, #20]
      34:	movne	r0, #0
      38:	popne	{fp, pc}
      3c:	movw	r0, #0
      40:	movw	r1, #0
      44:	movw	r3, #0
      48:	mov	r2, #234	; 0xea
      4c:	movt	r0, #0
      50:	movt	r1, #0
      54:	movt	r3, #0
      58:	bl	0 <__assert_fail>

0000005c <coda_ascbin_cursor_goto_record_field_by_index>:
      5c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
      60:	add	fp, sp, #24
      64:	sub	sp, sp, #16
      68:	mov	r5, r0
      6c:	mov	r0, #1
      70:	mov	r4, r1
      74:	str	r0, [sp, #12]
      78:	ldr	r0, [r5, #4]
      7c:	sub	r0, r0, #1
      80:	add	r0, r5, r0, lsl #4
      84:	ldr	r6, [r0, #8]
      88:	ldr	r1, [r6]
      8c:	cmp	r1, #99	; 0x63
      90:	ldrhi	r6, [r6, #4]
      94:	cmp	r4, #0
      98:	ldr	r3, [r6, #48]	; 0x30
      9c:	bmi	110 <coda_ascbin_cursor_goto_record_field_by_index+0xb4>
      a0:	cmp	r3, r4
      a4:	ble	110 <coda_ascbin_cursor_goto_record_field_by_index+0xb4>
      a8:	ldr	r8, [r0, #16]
      ac:	ldr	r7, [r0, #20]
      b0:	ldr	r0, [r6, #68]	; 0x44
      b4:	cmp	r0, #0
      b8:	beq	130 <coda_ascbin_cursor_goto_record_field_by_index+0xd4>
      bc:	mov	r1, sp
      c0:	mov	r0, r5
      c4:	bl	0 <coda_cursor_get_available_union_field_index>
      c8:	cmp	r0, #0
      cc:	bne	124 <coda_ascbin_cursor_goto_record_field_by_index+0xc8>
      d0:	ldr	r0, [sp]
      d4:	cmp	r0, r4
      d8:	movne	r0, #0
      dc:	strne	r0, [sp, #12]
      e0:	ldr	r1, [r5, #4]
      e4:	add	r0, r1, #1
      e8:	str	r0, [r5, #4]
      ec:	ldr	r0, [sp, #12]
      f0:	cmp	r0, #0
      f4:	beq	194 <coda_ascbin_cursor_goto_record_field_by_index+0x138>
      f8:	ldr	r2, [r6, #52]	; 0x34
      fc:	add	r0, r5, r1, lsl #4
     100:	ldr	r2, [r2, r4, lsl #2]
     104:	ldr	r2, [r2, #8]
     108:	str	r2, [r0, #8]
     10c:	b	1ac <coda_ascbin_cursor_goto_record_field_by_index+0x150>
     110:	movw	r1, #0
     114:	mvn	r0, #100	; 0x64
     118:	mov	r2, r4
     11c:	movt	r1, #0
     120:	bl	0 <coda_set_error>
     124:	mvn	r0, #0
     128:	sub	sp, fp, #24
     12c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
     130:	mov	r2, sp
     134:	mov	r0, r5
     138:	mov	r1, r4
     13c:	bl	1c8 <get_relative_field_bit_offset_by_index>
     140:	cmp	r0, #0
     144:	bne	124 <coda_ascbin_cursor_goto_record_field_by_index+0xc8>
     148:	ldm	sp, {r0, r1}
     14c:	adds	r8, r0, r8
     150:	ldr	r0, [r6, #52]	; 0x34
     154:	adc	r7, r1, r7
     158:	ldr	r0, [r0, r4, lsl #2]
     15c:	ldr	r0, [r0, #20]
     160:	cmp	r0, #0
     164:	beq	e0 <coda_ascbin_cursor_goto_record_field_by_index+0x84>
     168:	add	r2, sp, #12
     16c:	mov	r1, r5
     170:	bl	0 <coda_expression_eval_bool>
     174:	cmp	r0, #0
     178:	beq	e0 <coda_ascbin_cursor_goto_record_field_by_index+0x84>
     17c:	movw	r0, #0
     180:	movt	r0, #0
     184:	bl	0 <coda_add_error_message>
     188:	mov	r0, r5
     18c:	bl	0 <coda_cursor_add_to_error_message>
     190:	b	124 <coda_ascbin_cursor_goto_record_field_by_index+0xc8>
     194:	ldr	r0, [r6]
     198:	bl	0 <coda_no_data_singleton>
     19c:	ldr	r1, [r5, #4]
     1a0:	sub	r1, r1, #1
     1a4:	add	r2, r5, r1, lsl #4
     1a8:	str	r0, [r2, #8]
     1ac:	add	r0, r5, r1, lsl #4
     1b0:	str	r4, [r0, #12]
     1b4:	str	r8, [r0, #16]
     1b8:	str	r7, [r0, #20]
     1bc:	mov	r0, #0
     1c0:	sub	sp, fp, #24
     1c4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

000001c8 <get_relative_field_bit_offset_by_index>:
     1c8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
     1cc:	add	fp, sp, #28
     1d0:	sub	sp, sp, #548	; 0x224
     1d4:	mov	r4, r0
     1d8:	ldr	r0, [r0, #4]
     1dc:	mov	r8, r1
     1e0:	mov	r9, r2
     1e4:	add	r0, r4, r0, lsl #4
     1e8:	ldr	sl, [r0, #-8]
     1ec:	ldr	r1, [sl, #52]	; 0x34
     1f0:	ldr	r5, [r1, r8, lsl #2]
     1f4:	ldr	r3, [r5, #28]
     1f8:	cmp	r3, #0
     1fc:	bmi	218 <get_relative_field_bit_offset_by_index+0x50>
     200:	ldr	r2, [r5, #24]
     204:	strd	r2, [r9]
     208:	mov	r7, #0
     20c:	mov	r0, r7
     210:	sub	sp, fp, #28
     214:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
     218:	ldr	r0, [r5, #32]
     21c:	cmp	r0, #0
     220:	beq	254 <get_relative_field_bit_offset_by_index+0x8c>
     224:	ldr	r1, [r5, #20]
     228:	cmp	r1, #0
     22c:	beq	3fc <get_relative_field_bit_offset_by_index+0x234>
     230:	mov	r0, r1
     234:	add	r2, sp, #24
     238:	mov	r1, r4
     23c:	bl	0 <coda_expression_eval_bool>
     240:	cmp	r0, #0
     244:	beq	3ec <get_relative_field_bit_offset_by_index+0x224>
     248:	movw	r0, #0
     24c:	movt	r0, #0
     250:	b	418 <get_relative_field_bit_offset_by_index+0x250>
     254:	cmp	r8, #0
     258:	beq	47c <get_relative_field_bit_offset_by_index+0x2b4>
     25c:	mvn	r0, #0
     260:	sub	r1, r1, #4
     264:	mov	r6, r8
     268:	ldr	r2, [r1, r6, lsl #2]
     26c:	ldr	r3, [r2, #24]
     270:	ldr	r5, [r2, #28]
     274:	eor	r7, r5, r0
     278:	eor	r3, r3, r0
     27c:	orrs	r3, r3, r7
     280:	ldreq	r2, [r2, #32]
     284:	cmpeq	r2, #0
     288:	bne	2b0 <get_relative_field_bit_offset_by_index+0xe8>
     28c:	sub	r6, r6, #1
     290:	cmp	r6, #0
     294:	bgt	268 <get_relative_field_bit_offset_by_index+0xa0>
     298:	movw	r0, #0
     29c:	movw	r1, #0
     2a0:	movw	r3, #0
     2a4:	mov	r2, #110	; 0x6e
     2a8:	movt	r0, #0
     2ac:	b	490 <get_relative_field_bit_offset_by_index+0x2c8>
     2b0:	sub	r5, r6, #1
     2b4:	add	r2, sp, #16
     2b8:	mov	r0, r4
     2bc:	mov	r1, r5
     2c0:	bl	1c8 <get_relative_field_bit_offset_by_index>
     2c4:	mvn	r7, #0
     2c8:	cmp	r0, #0
     2cc:	bne	20c <get_relative_field_bit_offset_by_index+0x44>
     2d0:	add	r0, sp, #24
     2d4:	mov	r1, r4
     2d8:	mov	r2, #520	; 0x208
     2dc:	bl	0 <memcpy>
     2e0:	ldr	r0, [sp, #28]
     2e4:	mov	r2, r4
     2e8:	add	r1, r0, #1
     2ec:	str	r1, [sp, #28]
     2f0:	ldr	r1, [r4, #4]
     2f4:	ldr	r3, [r2, r1, lsl #4]!
     2f8:	add	r1, sp, #24
     2fc:	add	ip, r1, r0, lsl #4
     300:	ldr	r0, [sp, #16]
     304:	ldr	r1, [sp, #20]
     308:	ldr	r2, [r2, #4]
     30c:	adds	r3, r0, r3
     310:	adc	r2, r1, r2
     314:	cmp	r6, r8
     318:	str	r3, [ip, #16]
     31c:	str	r2, [ip, #20]
     320:	bgt	454 <get_relative_field_bit_offset_by_index+0x28c>
     324:	add	r6, sp, #24
     328:	b	3ac <get_relative_field_bit_offset_by_index+0x1e4>
     32c:	ldr	r0, [sl, #52]	; 0x34
     330:	ldr	r1, [sp, #28]
     334:	ldr	r0, [r0, r5, lsl #2]
     338:	add	r1, r6, r1, lsl #4
     33c:	ldr	r0, [r0, #8]
     340:	str	r0, [r1, #-8]
     344:	str	r5, [r1, #-4]
     348:	mov	r0, r6
     34c:	add	r1, sp, #8
     350:	bl	0 <coda_cursor_get_bit_size>
     354:	cmp	r0, #0
     358:	bne	20c <get_relative_field_bit_offset_by_index+0x44>
     35c:	add	r3, sp, #8
     360:	ldm	r3, {r0, r1, r2, r3}
     364:	adds	r2, r2, r0
     368:	str	r2, [sp, #16]
     36c:	adc	r2, r3, r1
     370:	str	r2, [sp, #20]
     374:	ldr	r2, [sp, #28]
     378:	ldr	r3, [r6, r2, lsl #4]
     37c:	lsl	r6, r2, #4
     380:	adds	r0, r3, r0
     384:	add	r3, sp, #24
     388:	str	r0, [r6, r3]
     38c:	add	r6, sp, #24
     390:	add	r0, r6, r2, lsl #4
     394:	ldr	r2, [r0, #4]
     398:	adc	r1, r2, r1
     39c:	str	r1, [r0, #4]
     3a0:	add	r5, r5, #1
     3a4:	cmp	r5, r8
     3a8:	bge	44c <get_relative_field_bit_offset_by_index+0x284>
     3ac:	mov	r0, #1
     3b0:	str	r0, [sp, #4]
     3b4:	ldr	r0, [sl, #52]	; 0x34
     3b8:	ldr	r0, [r0, r5, lsl #2]
     3bc:	ldr	r0, [r0, #20]
     3c0:	cmp	r0, #0
     3c4:	beq	32c <get_relative_field_bit_offset_by_index+0x164>
     3c8:	mov	r1, r4
     3cc:	add	r2, sp, #4
     3d0:	bl	0 <coda_expression_eval_bool>
     3d4:	cmp	r0, #0
     3d8:	bne	46c <get_relative_field_bit_offset_by_index+0x2a4>
     3dc:	ldr	r0, [sp, #4]
     3e0:	cmp	r0, #0
     3e4:	bne	32c <get_relative_field_bit_offset_by_index+0x164>
     3e8:	b	3a0 <get_relative_field_bit_offset_by_index+0x1d8>
     3ec:	ldr	r0, [sp, #24]
     3f0:	cmp	r0, #0
     3f4:	beq	42c <get_relative_field_bit_offset_by_index+0x264>
     3f8:	ldr	r0, [r5, #32]
     3fc:	mov	r1, r4
     400:	mov	r2, r9
     404:	bl	0 <coda_expression_eval_integer>
     408:	cmp	r0, #0
     40c:	beq	208 <get_relative_field_bit_offset_by_index+0x40>
     410:	movw	r0, #0
     414:	movt	r0, #0
     418:	bl	0 <coda_add_error_message>
     41c:	mov	r0, r4
     420:	bl	0 <coda_cursor_add_to_error_message>
     424:	mvn	r7, #0
     428:	b	20c <get_relative_field_bit_offset_by_index+0x44>
     42c:	cmp	r8, #0
     430:	beq	45c <get_relative_field_bit_offset_by_index+0x294>
     434:	sub	r1, r8, #1
     438:	mov	r0, r4
     43c:	mov	r2, r9
     440:	bl	1c8 <get_relative_field_bit_offset_by_index>
     444:	mov	r7, r0
     448:	b	20c <get_relative_field_bit_offset_by_index+0x44>
     44c:	ldr	r0, [sp, #16]
     450:	ldr	r1, [sp, #20]
     454:	strd	r0, [r9]
     458:	b	208 <get_relative_field_bit_offset_by_index+0x40>
     45c:	mov	r7, #0
     460:	str	r7, [r9]
     464:	str	r7, [r9, #4]
     468:	b	20c <get_relative_field_bit_offset_by_index+0x44>
     46c:	movw	r0, #0
     470:	movt	r0, #0
     474:	bl	0 <coda_add_error_message>
     478:	b	20c <get_relative_field_bit_offset_by_index+0x44>
     47c:	movw	r0, #0
     480:	movw	r1, #0
     484:	movw	r3, #0
     488:	mov	r2, #99	; 0x63
     48c:	movt	r0, #0
     490:	movt	r1, #0
     494:	movt	r3, #0
     498:	bl	0 <__assert_fail>

0000049c <coda_ascbin_cursor_goto_next_record_field>:
     49c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
     4a0:	add	fp, sp, #24
     4a4:	sub	sp, sp, #536	; 0x218
     4a8:	mov	r4, r0
     4ac:	mov	r0, #1
     4b0:	str	r0, [fp, #-32]	; 0xffffffe0
     4b4:	ldr	r1, [r4, #4]
     4b8:	sub	r0, r1, #2
     4bc:	add	r1, r4, r1, lsl #4
     4c0:	add	r0, r4, r0, lsl #4
     4c4:	ldr	r1, [r1, #-4]
     4c8:	ldr	r7, [r0, #8]
     4cc:	add	r5, r1, #1
     4d0:	ldr	r2, [r7]
     4d4:	cmp	r2, #99	; 0x63
     4d8:	ldrhi	r7, [r7, #4]
     4dc:	cmn	r1, #1
     4e0:	ldr	r3, [r7, #48]	; 0x30
     4e4:	blt	570 <coda_ascbin_cursor_goto_next_record_field+0xd4>
     4e8:	cmp	r5, r3
     4ec:	bge	570 <coda_ascbin_cursor_goto_next_record_field+0xd4>
     4f0:	ldrd	r8, [r0, #16]
     4f4:	ldr	r0, [r7, #68]	; 0x44
     4f8:	cmp	r0, #0
     4fc:	beq	590 <coda_ascbin_cursor_goto_next_record_field+0xf4>
     500:	add	r6, sp, #8
     504:	mov	r1, r4
     508:	mov	r2, #520	; 0x208
     50c:	mov	r0, r6
     510:	bl	0 <memcpy>
     514:	ldr	r0, [sp, #12]
     518:	mov	r1, sp
     51c:	sub	r0, r0, #1
     520:	str	r0, [sp, #12]
     524:	mov	r0, r6
     528:	bl	0 <coda_cursor_get_available_union_field_index>
     52c:	cmp	r0, #0
     530:	bne	584 <coda_ascbin_cursor_goto_next_record_field+0xe8>
     534:	ldr	r0, [sp]
     538:	cmp	r5, r0
     53c:	movne	r0, #0
     540:	strne	r0, [fp, #-32]	; 0xffffffe0
     544:	ldr	r0, [fp, #-32]	; 0xffffffe0
     548:	cmp	r0, #0
     54c:	beq	620 <coda_ascbin_cursor_goto_next_record_field+0x184>
     550:	ldr	r2, [r7, #52]	; 0x34
     554:	ldr	r0, [r4, #4]
     558:	ldr	r2, [r2, r5, lsl #2]
     55c:	sub	r1, r0, #1
     560:	add	r0, r4, r1, lsl #4
     564:	ldr	r2, [r2, #8]
     568:	str	r2, [r0, #8]
     56c:	b	638 <coda_ascbin_cursor_goto_next_record_field+0x19c>
     570:	movw	r1, #0
     574:	mvn	r0, #100	; 0x64
     578:	mov	r2, r5
     57c:	movt	r1, #0
     580:	bl	0 <coda_set_error>
     584:	mvn	r0, #0
     588:	sub	sp, fp, #24
     58c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
     590:	mov	r1, sp
     594:	mov	r0, r4
     598:	mov	r2, #0
     59c:	bl	650 <get_next_relative_field_bit_offset>
     5a0:	cmp	r0, #0
     5a4:	bne	584 <coda_ascbin_cursor_goto_next_record_field+0xe8>
     5a8:	ldm	sp, {r0, r1}
     5ac:	adds	r8, r0, r8
     5b0:	ldr	r0, [r7, #52]	; 0x34
     5b4:	adc	r9, r1, r9
     5b8:	ldr	r0, [r0, r5, lsl #2]
     5bc:	ldr	r0, [r0, #20]
     5c0:	cmp	r0, #0
     5c4:	beq	544 <coda_ascbin_cursor_goto_next_record_field+0xa8>
     5c8:	add	r6, sp, #8
     5cc:	mov	r1, r4
     5d0:	mov	r2, #520	; 0x208
     5d4:	mov	r0, r6
     5d8:	bl	0 <memcpy>
     5dc:	ldr	r0, [sp, #12]
     5e0:	sub	r2, fp, #32
     5e4:	mov	r1, r6
     5e8:	sub	r0, r0, #1
     5ec:	str	r0, [sp, #12]
     5f0:	ldr	r0, [r7, #52]	; 0x34
     5f4:	ldr	r0, [r0, r5, lsl #2]
     5f8:	ldr	r0, [r0, #20]
     5fc:	bl	0 <coda_expression_eval_bool>
     600:	cmp	r0, #0
     604:	beq	544 <coda_ascbin_cursor_goto_next_record_field+0xa8>
     608:	movw	r0, #0
     60c:	movt	r0, #0
     610:	bl	0 <coda_add_error_message>
     614:	mov	r0, r4
     618:	bl	0 <coda_cursor_add_to_error_message>
     61c:	b	584 <coda_ascbin_cursor_goto_next_record_field+0xe8>
     620:	ldr	r0, [r7]
     624:	bl	0 <coda_no_data_singleton>
     628:	ldr	r1, [r4, #4]
     62c:	sub	r1, r1, #1
     630:	add	r2, r4, r1, lsl #4
     634:	str	r0, [r2, #8]
     638:	add	r0, r4, r1, lsl #4
     63c:	add	r0, r0, #12
     640:	stm	r0, {r5, r8, r9}
     644:	mov	r0, #0
     648:	sub	sp, fp, #24
     64c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}

00000650 <get_next_relative_field_bit_offset>:
     650:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
     654:	add	fp, sp, #28
     658:	sub	sp, sp, #532	; 0x214
     65c:	mov	r4, r0
     660:	mov	r6, r2
     664:	mov	r8, r1
     668:	add	r0, r0, #8
     66c:	ldr	r2, [r4, #4]
     670:	sub	r1, r2, #2
     674:	sub	r2, r2, #1
     678:	ldr	r3, [r0, r1, lsl #4]
     67c:	add	r2, r0, r2, lsl #4
     680:	ldr	r7, [r2, #4]
     684:	ldr	r5, [r3, #48]	; 0x30
     688:	add	r7, r7, #1
     68c:	cmp	r7, r5
     690:	bge	7e4 <get_next_relative_field_bit_offset+0x194>
     694:	ldr	r3, [r3, #52]	; 0x34
     698:	mvn	sl, #0
     69c:	ldr	r7, [r3, r7, lsl #2]
     6a0:	ldr	r3, [r7, #28]
     6a4:	cmp	r3, #0
     6a8:	bmi	6d0 <get_next_relative_field_bit_offset+0x80>
     6ac:	ldr	r2, [r7, #24]
     6b0:	mov	r0, #0
     6b4:	cmp	r6, #0
     6b8:	strd	r2, [r8]
     6bc:	beq	760 <get_next_relative_field_bit_offset+0x110>
     6c0:	str	sl, [r6]
     6c4:	str	sl, [r6, #4]
     6c8:	sub	sp, fp, #28
     6cc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
     6d0:	add	r0, r0, r1, lsl #4
     6d4:	ldrd	r2, [r2, #8]
     6d8:	ldrd	r0, [r0, #8]
     6dc:	subs	r5, r2, r0
     6e0:	ldr	r0, [r7, #32]
     6e4:	sbc	r9, r3, r1
     6e8:	cmp	r0, #0
     6ec:	beq	744 <get_next_relative_field_bit_offset+0xf4>
     6f0:	add	r0, sp, #8
     6f4:	mov	r1, r4
     6f8:	mov	r2, #520	; 0x208
     6fc:	bl	0 <memcpy>
     700:	ldr	r0, [sp, #12]
     704:	cmp	r6, #0
     708:	sub	r0, r0, #1
     70c:	str	r0, [sp, #12]
     710:	strne	sl, [r6]
     714:	strne	sl, [r6, #4]
     718:	ldr	r0, [r7, #20]
     71c:	cmp	r0, #0
     720:	beq	774 <get_next_relative_field_bit_offset+0x124>
     724:	add	r1, sp, #8
     728:	add	r2, sp, #4
     72c:	bl	0 <coda_expression_eval_bool>
     730:	cmp	r0, #0
     734:	beq	768 <get_next_relative_field_bit_offset+0x118>
     738:	movw	r0, #0
     73c:	movt	r0, #0
     740:	b	794 <get_next_relative_field_bit_offset+0x144>
     744:	add	r1, sp, #8
     748:	mov	r0, r4
     74c:	bl	0 <coda_cursor_get_bit_size>
     750:	mov	r1, r0
     754:	mvn	r0, #0
     758:	cmp	r1, #0
     75c:	beq	7ac <get_next_relative_field_bit_offset+0x15c>
     760:	sub	sp, fp, #28
     764:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
     768:	ldr	r0, [sp, #4]
     76c:	cmp	r0, #0
     770:	beq	7d4 <get_next_relative_field_bit_offset+0x184>
     774:	ldr	r0, [r7, #32]
     778:	add	r1, sp, #8
     77c:	mov	r2, r8
     780:	bl	0 <coda_expression_eval_integer>
     784:	cmp	r0, #0
     788:	beq	7d8 <get_next_relative_field_bit_offset+0x188>
     78c:	movw	r0, #0
     790:	movt	r0, #0
     794:	bl	0 <coda_add_error_message>
     798:	mov	r0, r4
     79c:	bl	0 <coda_cursor_add_to_error_message>
     7a0:	mvn	r0, #0
     7a4:	sub	sp, fp, #28
     7a8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
     7ac:	ldr	r2, [sp, #8]
     7b0:	ldr	r3, [sp, #12]
     7b4:	adds	r0, r2, r5
     7b8:	adc	r1, r3, r9
     7bc:	cmp	r6, #0
     7c0:	strd	r0, [r8]
     7c4:	mov	r0, #0
     7c8:	strdne	r2, [r6]
     7cc:	sub	sp, fp, #28
     7d0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
     7d4:	stm	r8, {r5, r9}
     7d8:	mov	r0, #0
     7dc:	sub	sp, fp, #28
     7e0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
     7e4:	movw	r0, #0
     7e8:	movw	r1, #0
     7ec:	movw	r3, #0
     7f0:	mov	r2, #161	; 0xa1
     7f4:	movt	r0, #0
     7f8:	movt	r1, #0
     7fc:	movt	r3, #0
     800:	bl	0 <__assert_fail>

00000804 <coda_ascbin_cursor_goto_available_union_field>:
     804:	push	{r4, r5, fp, lr}
     808:	add	fp, sp, #8
     80c:	sub	sp, sp, #8
     810:	mov	r4, r0
     814:	ldr	r0, [r0, #4]
     818:	add	r0, r4, r0, lsl #4
     81c:	ldr	r5, [r0, #-8]
     820:	ldr	r0, [r5]
     824:	cmp	r0, #99	; 0x63
     828:	ldrhi	r5, [r5, #4]
     82c:	ldr	r0, [r5, #68]	; 0x44
     830:	cmp	r0, #0
     834:	beq	85c <coda_ascbin_cursor_goto_available_union_field+0x58>
     838:	add	r1, sp, #4
     83c:	mov	r0, r4
     840:	bl	8b8 <coda_ascbin_cursor_get_available_union_field_index>
     844:	mov	r1, r0
     848:	mvn	r0, #0
     84c:	cmp	r1, #0
     850:	beq	878 <coda_ascbin_cursor_goto_available_union_field+0x74>
     854:	sub	sp, fp, #8
     858:	pop	{r4, r5, fp, pc}
     85c:	movw	r1, #0
     860:	mvn	r0, #104	; 0x68
     864:	movt	r1, #0
     868:	bl	0 <coda_set_error>
     86c:	mvn	r0, #0
     870:	sub	sp, fp, #8
     874:	pop	{r4, r5, fp, pc}
     878:	ldr	r0, [r4, #4]
     87c:	add	r1, r0, #1
     880:	str	r1, [r4, #4]
     884:	ldr	r1, [r5, #52]	; 0x34
     888:	ldr	r2, [sp, #4]
     88c:	ldr	r0, [r4, r0, lsl #4]!
     890:	ldr	r3, [r4, #4]
     894:	ldr	r1, [r1, r2, lsl #2]
     898:	ldr	r1, [r1, #8]
     89c:	str	r1, [r4, #8]
     8a0:	str	r2, [r4, #12]
     8a4:	str	r0, [r4, #16]
     8a8:	mov	r0, #0
     8ac:	str	r3, [r4, #20]
     8b0:	sub	sp, fp, #8
     8b4:	pop	{r4, r5, fp, pc}

000008b8 <coda_ascbin_cursor_get_available_union_field_index>:
     8b8:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
     8bc:	add	fp, sp, #24
     8c0:	sub	sp, sp, #592	; 0x250
     8c4:	mov	r4, r0
     8c8:	ldr	r0, [r0, #4]
     8cc:	mov	r8, r1
     8d0:	add	r0, r4, r0, lsl #4
     8d4:	ldr	r6, [r0, #-8]
     8d8:	ldr	r0, [r6]
     8dc:	cmp	r0, #99	; 0x63
     8e0:	ldrhi	r6, [r6, #4]
     8e4:	ldr	r0, [r6, #68]	; 0x44
     8e8:	cmp	r0, #0
     8ec:	beq	970 <coda_ascbin_cursor_get_available_union_field_index+0xb8>
     8f0:	ldr	r0, [r6, #48]	; 0x30
     8f4:	cmp	r0, #0
     8f8:	ble	a30 <coda_ascbin_cursor_get_available_union_field_index+0x178>
     8fc:	add	r7, sp, #64	; 0x40
     900:	mov	r1, r4
     904:	mov	r2, #520	; 0x208
     908:	mov	r0, r7
     90c:	bl	0 <memcpy>
     910:	ldr	r0, [sp, #68]	; 0x44
     914:	mvn	r5, #0
     918:	add	r1, r0, #1
     91c:	str	r1, [sp, #68]	; 0x44
     920:	add	r1, r7, r0, lsl #4
     924:	ldr	r3, [r6, #52]	; 0x34
     928:	ldr	r0, [r7, r0, lsl #4]
     92c:	ldr	r2, [r1, #4]
     930:	ldr	r3, [r3]
     934:	ldr	r3, [r3, #8]
     938:	str	r3, [r1, #8]
     93c:	str	r5, [r1, #12]
     940:	str	r2, [r1, #20]
     944:	str	r0, [r1, #16]
     948:	add	r2, sp, #56	; 0x38
     94c:	mov	r1, r7
     950:	ldr	r0, [r6, #68]	; 0x44
     954:	bl	0 <coda_expression_eval_integer>
     958:	cmp	r0, #0
     95c:	beq	988 <coda_ascbin_cursor_get_available_union_field_index+0xd0>
     960:	movw	r0, #0
     964:	movt	r0, #0
     968:	bl	0 <coda_add_error_message>
     96c:	b	a1c <coda_ascbin_cursor_get_available_union_field_index+0x164>
     970:	movw	r1, #0
     974:	mvn	r0, #104	; 0x68
     978:	movt	r1, #0
     97c:	bl	0 <coda_set_error>
     980:	mvn	r5, #0
     984:	b	a24 <coda_ascbin_cursor_get_available_union_field_index+0x16c>
     988:	ldr	r1, [sp, #60]	; 0x3c
     98c:	ldr	r0, [sp, #56]	; 0x38
     990:	cmp	r1, #0
     994:	bmi	9b4 <coda_ascbin_cursor_get_available_union_field_index+0xfc>
     998:	ldr	r2, [r6, #48]	; 0x30
     99c:	subs	r3, r0, r2
     9a0:	sbcs	r2, r1, r2, asr #31
     9a4:	bge	9b4 <coda_ascbin_cursor_get_available_union_field_index+0xfc>
     9a8:	mov	r5, #0
     9ac:	str	r0, [r8]
     9b0:	b	a24 <coda_ascbin_cursor_get_available_union_field_index+0x16c>
     9b4:	add	r8, sp, #35	; 0x23
     9b8:	mov	r2, r8
     9bc:	bl	0 <coda_str64>
     9c0:	ldr	r0, [r4, #4]
     9c4:	add	r7, r4, #8
     9c8:	add	r9, sp, #14
     9cc:	mov	r2, r9
     9d0:	add	r0, r7, r0, lsl #4
     9d4:	ldrd	r0, [r0, #-8]
     9d8:	lsr	r0, r0, #3
     9dc:	orr	r0, r0, r1, lsl #29
     9e0:	asr	r1, r1, #3
     9e4:	bl	0 <coda_str64>
     9e8:	ldr	r0, [r4, #4]
     9ec:	ldr	r3, [r6, #48]	; 0x30
     9f0:	movw	r1, #0
     9f4:	mov	r2, r8
     9f8:	movt	r1, #0
     9fc:	add	r0, r7, r0, lsl #4
     a00:	ldr	r0, [r0, #-8]
     a04:	str	r9, [sp]
     a08:	and	r0, r0, #7
     a0c:	str	r0, [sp, #4]
     a10:	movw	r0, #65236	; 0xfed4
     a14:	movt	r0, #65535	; 0xffff
     a18:	bl	0 <coda_set_error>
     a1c:	mov	r0, r4
     a20:	bl	0 <coda_cursor_add_to_error_message>
     a24:	mov	r0, r5
     a28:	sub	sp, fp, #24
     a2c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
     a30:	movw	r0, #0
     a34:	movw	r1, #0
     a38:	movw	r3, #0
     a3c:	movw	r2, #889	; 0x379
     a40:	movt	r0, #0
     a44:	movt	r1, #0
     a48:	movt	r3, #0
     a4c:	bl	0 <__assert_fail>

00000a50 <coda_ascbin_cursor_goto_array_element>:
     a50:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
     a54:	add	fp, sp, #24
     a58:	sub	sp, sp, #8
     a5c:	mov	r4, r0
     a60:	ldr	r0, [r0, #4]
     a64:	mov	r5, r2
     a68:	mov	r2, r1
     a6c:	sub	r6, r0, #1
     a70:	add	r1, r4, r6, lsl #4
     a74:	ldr	r7, [r1, #8]
     a78:	ldr	r1, [r7]
     a7c:	cmp	r1, #99	; 0x63
     a80:	ldrhi	r7, [r7, #4]
     a84:	ldr	r3, [r7, #48]	; 0x30
     a88:	cmp	r3, r2
     a8c:	bne	b0c <coda_ascbin_cursor_goto_array_element+0xbc>
     a90:	cmp	r2, #1
     a94:	blt	b1c <coda_ascbin_cursor_goto_array_element+0xcc>
     a98:	mov	r6, #0
     a9c:	mov	r8, sp
     aa0:	mov	r9, #0
     aa4:	add	r0, r7, r6, lsl #2
     aa8:	ldr	r3, [r0, #52]	; 0x34
     aac:	cmn	r3, #1
     ab0:	bne	ad0 <coda_ascbin_cursor_goto_array_element+0x80>
     ab4:	ldr	r0, [r0, #84]	; 0x54
     ab8:	mov	r1, r4
     abc:	mov	r2, r8
     ac0:	bl	0 <coda_expression_eval_integer>
     ac4:	cmp	r0, #0
     ac8:	bne	c3c <coda_ascbin_cursor_goto_array_element+0x1ec>
     acc:	ldr	r3, [sp]
     ad0:	ldr	r2, [r5, r6, lsl #2]
     ad4:	cmp	r2, #0
     ad8:	bmi	b8c <coda_ascbin_cursor_goto_array_element+0x13c>
     adc:	cmp	r2, r3
     ae0:	bge	b8c <coda_ascbin_cursor_goto_array_element+0x13c>
     ae4:	cmp	r6, #0
     ae8:	ldr	r0, [r7, #48]	; 0x30
     aec:	add	r6, r6, #1
     af0:	movweq	r3, #1
     af4:	mla	r9, r3, r9, r2
     af8:	cmp	r6, r0
     afc:	blt	aa4 <coda_ascbin_cursor_goto_array_element+0x54>
     b00:	ldr	r0, [r4, #4]
     b04:	sub	r6, r0, #1
     b08:	b	b20 <coda_ascbin_cursor_goto_array_element+0xd0>
     b0c:	movw	r1, #0
     b10:	mvn	r0, #105	; 0x69
     b14:	movt	r1, #0
     b18:	b	b98 <coda_ascbin_cursor_goto_array_element+0x148>
     b1c:	mov	r9, #0
     b20:	add	r2, r4, #8
     b24:	add	r1, r0, #1
     b28:	add	r3, r2, r0, lsl #4
     b2c:	add	r2, r2, r6, lsl #4
     b30:	str	r1, [r4, #4]
     b34:	ldr	r6, [r2, #8]
     b38:	ldr	ip, [r2, #12]
     b3c:	str	r6, [r3, #8]!
     b40:	str	ip, [r3, #4]
     b44:	ldr	r2, [r7, #40]	; 0x28
     b48:	ldr	r5, [r2, #28]
     b4c:	cmn	r5, #1
     b50:	ble	ba8 <coda_ascbin_cursor_goto_array_element+0x158>
     b54:	ldr	r0, [r2, #24]
     b58:	umull	r7, lr, r0, r9
     b5c:	adds	r6, r7, r6
     b60:	asr	r7, r9, #31
     b64:	mla	r0, r0, r7, lr
     b68:	mla	r0, r5, r9, r0
     b6c:	adc	r7, r0, ip
     b70:	strd	r6, [r3]
     b74:	add	r0, r4, r1, lsl #4
     b78:	str	r2, [r0, #-8]
     b7c:	str	r9, [r0, #-4]
     b80:	mov	r0, #0
     b84:	sub	sp, fp, #24
     b88:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
     b8c:	movw	r1, #0
     b90:	mvn	r0, #106	; 0x6a
     b94:	movt	r1, #0
     b98:	bl	0 <coda_set_error>
     b9c:	mvn	r0, #0
     ba0:	sub	sp, fp, #24
     ba4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
     ba8:	cmp	r9, #1
     bac:	blt	b74 <coda_ascbin_cursor_goto_array_element+0x124>
     bb0:	add	r0, r4, r0, lsl #4
     bb4:	mov	r3, #0
     bb8:	mov	r1, sp
     bbc:	strd	r2, [r0, #8]
     bc0:	mov	r0, r4
     bc4:	bl	0 <coda_cursor_get_bit_size>
     bc8:	cmp	r0, #0
     bcc:	bne	c2c <coda_ascbin_cursor_goto_array_element+0x1dc>
     bd0:	mov	r6, #1
     bd4:	mov	r8, sp
     bd8:	ldr	r1, [r4, #4]
     bdc:	mov	r0, r4
     be0:	ldm	sp, {r3, r5}
     be4:	ldr	r2, [r0, r1, lsl #4]!
     be8:	adds	r2, r2, r3
     bec:	str	r2, [r0]
     bf0:	ldr	r2, [r0, #4]
     bf4:	adc	r2, r2, r5
     bf8:	cmp	r9, r6
     bfc:	str	r2, [r0, #4]
     c00:	ldr	r2, [r7, #40]	; 0x28
     c04:	beq	b74 <coda_ascbin_cursor_goto_array_element+0x124>
     c08:	add	r0, r4, r1, lsl #4
     c0c:	mov	r1, r8
     c10:	str	r2, [r0, #-8]
     c14:	str	r6, [r0, #-4]
     c18:	mov	r0, r4
     c1c:	bl	0 <coda_cursor_get_bit_size>
     c20:	add	r6, r6, #1
     c24:	cmp	r0, #0
     c28:	beq	bd8 <coda_ascbin_cursor_goto_array_element+0x188>
     c2c:	ldr	r0, [r4, #4]
     c30:	sub	r0, r0, #1
     c34:	str	r0, [r4, #4]
     c38:	b	b9c <coda_ascbin_cursor_goto_array_element+0x14c>
     c3c:	movw	r0, #0
     c40:	mov	r1, r6
     c44:	movt	r0, #0
     c48:	bl	0 <coda_add_error_message>
     c4c:	mov	r0, r4
     c50:	bl	0 <coda_cursor_add_to_error_message>
     c54:	b	b9c <coda_ascbin_cursor_goto_array_element+0x14c>

00000c58 <coda_ascbin_cursor_goto_array_element_by_index>:
     c58:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
     c5c:	add	fp, sp, #28
     c60:	sub	sp, sp, #12
     c64:	mov	sl, r1
     c68:	ldr	r1, [r0, #4]
     c6c:	mov	r4, r0
     c70:	sub	r2, r1, #1
     c74:	add	r0, r0, r2, lsl #4
     c78:	ldr	r6, [r0, #8]
     c7c:	ldr	r0, [r6]
     c80:	cmp	r0, #99	; 0x63
     c84:	ldr	r0, [pc, #356]	; df0 <coda_ascbin_cursor_goto_array_element_by_index+0x198>
     c88:	ldrhi	r6, [r6, #4]
     c8c:	ldr	r3, [pc, r0]
     c90:	bl	0 <__aeabi_read_tp>
     c94:	ldr	r0, [r0, r3]
     c98:	cmp	r0, #0
     c9c:	beq	cd0 <coda_ascbin_cursor_goto_array_element_by_index+0x78>
     ca0:	add	r1, sp, #8
     ca4:	mov	r0, r4
     ca8:	bl	0 <coda_cursor_get_num_elements>
     cac:	cmp	r0, #0
     cb0:	bne	de4 <coda_ascbin_cursor_goto_array_element_by_index+0x18c>
     cb4:	ldr	r3, [sp, #8]
     cb8:	cmp	sl, #0
     cbc:	bmi	dd0 <coda_ascbin_cursor_goto_array_element_by_index+0x178>
     cc0:	cmp	r3, sl
     cc4:	ble	dd0 <coda_ascbin_cursor_goto_array_element_by_index+0x178>
     cc8:	ldr	r1, [r4, #4]
     ccc:	sub	r2, r1, #1
     cd0:	add	r7, r4, #8
     cd4:	add	r0, r1, #1
     cd8:	add	r2, r7, r2, lsl #4
     cdc:	str	r0, [r4, #4]
     ce0:	add	r3, r7, r1, lsl #4
     ce4:	ldr	r8, [r2, #8]
     ce8:	ldr	r5, [r2, #12]
     cec:	str	r8, [r3, #8]!
     cf0:	str	r5, [r3, #4]
     cf4:	ldr	r2, [r6, #40]	; 0x28
     cf8:	ldr	r7, [r2, #28]
     cfc:	cmn	r7, #1
     d00:	ble	d3c <coda_ascbin_cursor_goto_array_element_by_index+0xe4>
     d04:	ldr	r1, [r2, #24]
     d08:	umull	r6, ip, r1, sl
     d0c:	adds	r8, r6, r8
     d10:	asr	r6, sl, #31
     d14:	mla	r1, r1, r6, ip
     d18:	mla	r1, r7, sl, r1
     d1c:	adc	r9, r1, r5
     d20:	strd	r8, [r3]
     d24:	add	r0, r4, r0, lsl #4
     d28:	str	r2, [r0, #-8]
     d2c:	str	sl, [r0, #-4]
     d30:	mov	r0, #0
     d34:	sub	sp, fp, #28
     d38:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
     d3c:	cmp	sl, #1
     d40:	blt	d24 <coda_ascbin_cursor_goto_array_element_by_index+0xcc>
     d44:	add	r0, r4, r1, lsl #4
     d48:	mov	r3, #0
     d4c:	mov	r1, sp
     d50:	strd	r2, [r0, #8]
     d54:	mov	r0, r4
     d58:	bl	0 <coda_cursor_get_bit_size>
     d5c:	cmp	r0, #0
     d60:	bne	dc0 <coda_ascbin_cursor_goto_array_element_by_index+0x168>
     d64:	mov	r9, #1
     d68:	mov	r5, sp
     d6c:	ldr	r0, [r4, #4]
     d70:	mov	r1, r4
     d74:	ldm	sp, {r3, r7}
     d78:	ldr	r2, [r1, r0, lsl #4]!
     d7c:	adds	r2, r2, r3
     d80:	str	r2, [r1]
     d84:	ldr	r2, [r1, #4]
     d88:	adc	r2, r2, r7
     d8c:	cmp	sl, r9
     d90:	str	r2, [r1, #4]
     d94:	ldr	r2, [r6, #40]	; 0x28
     d98:	beq	d24 <coda_ascbin_cursor_goto_array_element_by_index+0xcc>
     d9c:	add	r0, r4, r0, lsl #4
     da0:	mov	r1, r5
     da4:	str	r2, [r0, #-8]
     da8:	str	r9, [r0, #-4]
     dac:	mov	r0, r4
     db0:	bl	0 <coda_cursor_get_bit_size>
     db4:	add	r9, r9, #1
     db8:	cmp	r0, #0
     dbc:	beq	d6c <coda_ascbin_cursor_goto_array_element_by_index+0x114>
     dc0:	ldr	r0, [r4, #4]
     dc4:	sub	r0, r0, #1
     dc8:	str	r0, [r4, #4]
     dcc:	b	de4 <coda_ascbin_cursor_goto_array_element_by_index+0x18c>
     dd0:	movw	r1, #0
     dd4:	mvn	r0, #106	; 0x6a
     dd8:	mov	r2, sl
     ddc:	movt	r1, #0
     de0:	bl	0 <coda_set_error>
     de4:	mvn	r0, #0
     de8:	sub	sp, fp, #28
     dec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
     df0:	.word	0x0000015c

00000df4 <coda_ascbin_cursor_goto_next_array_element>:
     df4:	push	{r4, r5, r6, r7, fp, lr}
     df8:	add	fp, sp, #16
     dfc:	sub	sp, sp, #16
     e00:	ldr	r1, [r0, #4]
     e04:	mov	r4, r0
     e08:	add	r0, r0, r1, lsl #4
     e0c:	ldr	r6, [r0, #-24]	; 0xffffffe8
     e10:	ldr	r0, [r6]
     e14:	cmp	r0, #99	; 0x63
     e18:	ldr	r0, [pc, #216]	; ef8 <coda_ascbin_cursor_goto_next_array_element+0x104>
     e1c:	ldrhi	r6, [r6, #4]
     e20:	ldr	r2, [pc, r0]
     e24:	bl	0 <__aeabi_read_tp>
     e28:	ldr	r2, [r0, r2]
     e2c:	sub	r0, r1, #1
     e30:	add	r1, r4, r0, lsl #4
     e34:	ldr	r7, [r1, #12]
     e38:	cmp	r2, #0
     e3c:	add	r5, r7, #1
     e40:	beq	e7c <coda_ascbin_cursor_goto_next_array_element+0x88>
     e44:	str	r0, [r4, #4]
     e48:	add	r1, sp, #4
     e4c:	mov	r0, r4
     e50:	bl	0 <coda_cursor_get_num_elements>
     e54:	ldr	r1, [r4, #4]
     e58:	cmp	r0, #0
     e5c:	add	r1, r1, #1
     e60:	str	r1, [r4, #4]
     e64:	bne	eec <coda_ascbin_cursor_goto_next_array_element+0xf8>
     e68:	ldr	r3, [sp, #4]
     e6c:	cmn	r7, #1
     e70:	blt	ed8 <coda_ascbin_cursor_goto_next_array_element+0xe4>
     e74:	cmp	r5, r3
     e78:	bge	ed8 <coda_ascbin_cursor_goto_next_array_element+0xe4>
     e7c:	add	r1, sp, #8
     e80:	mov	r0, r4
     e84:	bl	0 <coda_cursor_get_bit_size>
     e88:	mov	r1, r0
     e8c:	mvn	r0, #0
     e90:	cmp	r1, #0
     e94:	beq	ea0 <coda_ascbin_cursor_goto_next_array_element+0xac>
     e98:	sub	sp, fp, #16
     e9c:	pop	{r4, r5, r6, r7, fp, pc}
     ea0:	ldr	r0, [r4, #4]
     ea4:	ldr	r1, [r6, #40]	; 0x28
     ea8:	ldr	r0, [r4, r0, lsl #4]!
     eac:	stmdb	r4, {r1, r5}
     eb0:	ldr	r1, [sp, #8]
     eb4:	ldr	r2, [sp, #12]
     eb8:	adds	r0, r0, r1
     ebc:	str	r0, [r4]
     ec0:	ldr	r0, [r4, #4]
     ec4:	adc	r0, r0, r2
     ec8:	str	r0, [r4, #4]
     ecc:	mov	r0, #0
     ed0:	sub	sp, fp, #16
     ed4:	pop	{r4, r5, r6, r7, fp, pc}
     ed8:	movw	r1, #0
     edc:	mvn	r0, #106	; 0x6a
     ee0:	mov	r2, r5
     ee4:	movt	r1, #0
     ee8:	bl	0 <coda_set_error>
     eec:	mvn	r0, #0
     ef0:	sub	sp, fp, #16
     ef4:	pop	{r4, r5, r6, r7, fp, pc}
     ef8:	.word	0x000000d0

00000efc <coda_ascbin_cursor_goto_attributes>:
     efc:	push	{r4, sl, fp, lr}
     f00:	add	fp, sp, #8
     f04:	ldr	r1, [r0, #4]
     f08:	mov	r4, r0
     f0c:	add	r0, r0, r1, lsl #4
     f10:	add	r1, r1, #1
     f14:	ldr	r0, [r0, #-8]
     f18:	ldr	r2, [r0]
     f1c:	cmp	r2, #99	; 0x63
     f20:	ldrhi	r0, [r0, #4]
     f24:	ldr	r0, [r0]
     f28:	str	r1, [r4, #4]
     f2c:	bl	0 <coda_type_empty_record>
     f30:	ldr	r1, [r4, #4]
     f34:	mvn	r3, #0
     f38:	str	r3, [r4, r1, lsl #4]!
     f3c:	str	r3, [r4, #4]
     f40:	str	r0, [r4, #-8]
     f44:	mov	r0, #0
     f48:	str	r3, [r4, #-4]
     f4c:	pop	{r4, sl, fp, pc}

00000f50 <coda_ascbin_cursor_use_base_type_of_special_type>:
     f50:	ldr	r1, [r0, #4]
     f54:	sub	r1, r1, #1
     f58:	add	r0, r0, r1, lsl #4
     f5c:	ldr	r1, [r0, #8]
     f60:	ldr	r2, [r1]
     f64:	cmp	r2, #99	; 0x63
     f68:	ldrhi	r1, [r1, #4]
     f6c:	ldr	r1, [r1, #44]	; 0x2c
     f70:	str	r1, [r0, #8]
     f74:	mov	r0, #0
     f78:	bx	lr

00000f7c <coda_ascbin_cursor_get_bit_size>:
     f7c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
     f80:	add	fp, sp, #28
     f84:	sub	sp, sp, #548	; 0x224
     f88:	mov	r5, r0
     f8c:	ldr	r0, [r0, #4]
     f90:	mov	r4, r1
     f94:	add	r0, r5, r0, lsl #4
     f98:	ldr	sl, [r0, #-8]
     f9c:	ldr	r0, [sl]
     fa0:	cmp	r0, #99	; 0x63
     fa4:	ldrhi	sl, [sl, #4]
     fa8:	mov	r6, sl
     fac:	ldr	r0, [r6, #24]!
     fb0:	ldr	r1, [r6, #4]
     fb4:	cmp	r1, #0
     fb8:	bmi	fc8 <coda_ascbin_cursor_get_bit_size+0x4c>
     fbc:	strd	r0, [r4]
     fc0:	mov	r6, #0
     fc4:	b	137c <coda_ascbin_cursor_get_bit_size+0x400>
     fc8:	ldr	r0, [sl, #8]
     fcc:	mvn	r8, #0
     fd0:	cmp	r0, #1
     fd4:	beq	1030 <coda_ascbin_cursor_get_bit_size+0xb4>
     fd8:	cmp	r0, #0
     fdc:	bne	13f0 <coda_ascbin_cursor_get_bit_size+0x474>
     fe0:	ldr	r0, [pc, #1064]	; 1410 <coda_ascbin_cursor_get_bit_size+0x494>
     fe4:	ldr	r1, [pc, r0]
     fe8:	bl	0 <__aeabi_read_tp>
     fec:	ldr	r0, [r0, r1]
     ff0:	cmp	r0, #0
     ff4:	beq	1084 <coda_ascbin_cursor_get_bit_size+0x108>
     ff8:	ldr	r0, [sl, #32]
     ffc:	cmp	r0, #0
    1000:	beq	1084 <coda_ascbin_cursor_get_bit_size+0x108>
    1004:	mov	r1, r5
    1008:	mov	r2, r4
    100c:	bl	0 <coda_expression_eval_integer>
    1010:	cmp	r0, #0
    1014:	beq	1278 <coda_ascbin_cursor_get_bit_size+0x2fc>
    1018:	movw	r0, #0
    101c:	movt	r0, #0
    1020:	bl	0 <coda_add_error_message>
    1024:	mov	r0, r5
    1028:	bl	0 <coda_cursor_add_to_error_message>
    102c:	b	1378 <coda_ascbin_cursor_get_bit_size+0x3fc>
    1030:	add	r1, sp, #8
    1034:	mov	r0, r5
    1038:	bl	0 <coda_cursor_get_num_elements>
    103c:	cmp	r0, #0
    1040:	bne	1378 <coda_ascbin_cursor_get_bit_size+0x3fc>
    1044:	ldr	r9, [sp, #8]
    1048:	cmp	r9, #0
    104c:	beq	12b0 <coda_ascbin_cursor_get_bit_size+0x334>
    1050:	ldr	r0, [sl, #40]	; 0x28
    1054:	str	r4, [sp]
    1058:	ldrd	r0, [r0, #24]
    105c:	subs	r2, r8, r0
    1060:	sbcs	r2, r8, r1
    1064:	bge	12c0 <coda_ascbin_cursor_get_bit_size+0x344>
    1068:	umull	r2, r3, r0, r9
    106c:	asr	r7, r9, #31
    1070:	mla	r0, r0, r7, r3
    1074:	mla	r3, r1, r9, r0
    1078:	ldr	r0, [sp]
    107c:	strd	r2, [r0]
    1080:	b	10c8 <coda_ascbin_cursor_get_bit_size+0x14c>
    1084:	ldr	r0, [sl, #68]	; 0x44
    1088:	cmp	r0, #0
    108c:	beq	10d0 <coda_ascbin_cursor_get_bit_size+0x154>
    1090:	add	r6, sp, #24
    1094:	mov	r1, r5
    1098:	mov	r2, #520	; 0x208
    109c:	mov	r0, r6
    10a0:	bl	0 <memcpy>
    10a4:	mov	r0, r6
    10a8:	bl	0 <coda_cursor_goto_available_union_field>
    10ac:	cmp	r0, #0
    10b0:	bne	1378 <coda_ascbin_cursor_get_bit_size+0x3fc>
    10b4:	add	r0, sp, #24
    10b8:	mov	r1, r4
    10bc:	bl	0 <coda_cursor_get_bit_size>
    10c0:	cmp	r0, #0
    10c4:	bne	1378 <coda_ascbin_cursor_get_bit_size+0x3fc>
    10c8:	mov	r6, #0
    10cc:	b	137c <coda_ascbin_cursor_get_bit_size+0x400>
    10d0:	ldr	r0, [sl, #48]	; 0x30
    10d4:	mov	r6, #0
    10d8:	cmp	r0, #1
    10dc:	blt	1388 <coda_ascbin_cursor_get_bit_size+0x40c>
    10e0:	add	r7, sp, #24
    10e4:	mov	r1, r5
    10e8:	mov	r2, #520	; 0x208
    10ec:	mov	r0, r7
    10f0:	bl	0 <memcpy>
    10f4:	mov	r0, r7
    10f8:	bl	0 <coda_cursor_goto_first_record_field>
    10fc:	cmp	r0, #0
    1100:	bne	1378 <coda_ascbin_cursor_get_bit_size+0x3fc>
    1104:	ldr	r0, [sl, #48]	; 0x30
    1108:	cmp	r0, #1
    110c:	blt	13d8 <coda_ascbin_cursor_get_bit_size+0x45c>
    1110:	mov	r1, #0
    1114:	mov	r7, #0
    1118:	mov	r9, #0
    111c:	add	lr, sp, #24
    1120:	str	r1, [sp]
    1124:	b	1134 <coda_ascbin_cursor_get_bit_size+0x1b8>
    1128:	add	r7, r7, #1
    112c:	cmp	r7, r0
    1130:	bge	13e4 <coda_ascbin_cursor_get_bit_size+0x468>
    1134:	sub	r0, r0, #1
    1138:	str	r8, [sp, #12]
    113c:	str	r8, [sp, #8]
    1140:	cmp	r7, r0
    1144:	bge	1178 <coda_ascbin_cursor_get_bit_size+0x1fc>
    1148:	mov	r0, lr
    114c:	add	r1, sp, #16
    1150:	add	r2, sp, #8
    1154:	bl	650 <get_next_relative_field_bit_offset>
    1158:	cmp	r0, #0
    115c:	bne	1378 <coda_ascbin_cursor_get_bit_size+0x3fc>
    1160:	ldr	r0, [sp, #12]
    1164:	add	lr, sp, #24
    1168:	cmn	r0, #1
    116c:	ble	1178 <coda_ascbin_cursor_get_bit_size+0x1fc>
    1170:	ldr	r1, [sp, #8]
    1174:	b	1198 <coda_ascbin_cursor_get_bit_size+0x21c>
    1178:	mov	r0, lr
    117c:	add	r1, sp, #8
    1180:	bl	0 <coda_cursor_get_bit_size>
    1184:	cmp	r0, #0
    1188:	bne	1378 <coda_ascbin_cursor_get_bit_size+0x3fc>
    118c:	ldr	r1, [sp, #8]
    1190:	ldr	r0, [sp, #12]
    1194:	add	lr, sp, #24
    1198:	ldr	r2, [sp]
    119c:	adds	r2, r1, r2
    11a0:	adc	r9, r0, r9
    11a4:	ldr	r0, [sl, #48]	; 0x30
    11a8:	str	r2, [sp]
    11ac:	sub	r1, r0, #1
    11b0:	cmp	r7, r1
    11b4:	bge	1128 <coda_ascbin_cursor_get_bit_size+0x1ac>
    11b8:	mov	r0, #1
    11bc:	add	r7, r7, #1
    11c0:	str	r0, [sp, #4]
    11c4:	ldr	r0, [sl, #52]	; 0x34
    11c8:	ldr	r0, [r0, r7, lsl #2]
    11cc:	ldr	r0, [r0, #20]
    11d0:	cmp	r0, #0
    11d4:	beq	11fc <coda_ascbin_cursor_get_bit_size+0x280>
    11d8:	mov	r1, r5
    11dc:	add	r2, sp, #4
    11e0:	bl	0 <coda_expression_eval_bool>
    11e4:	cmp	r0, #0
    11e8:	bne	1378 <coda_ascbin_cursor_get_bit_size+0x3fc>
    11ec:	ldr	r0, [sp, #4]
    11f0:	add	lr, sp, #24
    11f4:	cmp	r0, #0
    11f8:	beq	121c <coda_ascbin_cursor_get_bit_size+0x2a0>
    11fc:	ldr	r2, [sl, #52]	; 0x34
    1200:	ldr	r0, [sp, #28]
    1204:	ldr	r2, [r2, r7, lsl #2]
    1208:	sub	r1, r0, #1
    120c:	add	r0, lr, r1, lsl #4
    1210:	ldr	r2, [r2, #8]
    1214:	str	r2, [r0, #8]
    1218:	b	1238 <coda_ascbin_cursor_get_bit_size+0x2bc>
    121c:	ldr	r0, [sl]
    1220:	bl	0 <coda_no_data_singleton>
    1224:	ldr	r1, [sp, #28]
    1228:	add	lr, sp, #24
    122c:	sub	r1, r1, #1
    1230:	add	r2, lr, r1, lsl #4
    1234:	str	r0, [r2, #8]
    1238:	add	r0, lr, r1, lsl #4
    123c:	ldr	r1, [r5, #4]
    1240:	mov	r2, r5
    1244:	ldr	r3, [sp, #16]
    1248:	ldr	ip, [r2, r1, lsl #4]!
    124c:	ldr	r1, [sp, #20]
    1250:	ldr	r2, [r2, #4]
    1254:	str	r7, [r0, #12]
    1258:	adds	r3, r3, ip
    125c:	adc	r1, r1, r2
    1260:	str	r3, [r0, #16]
    1264:	str	r1, [r0, #20]
    1268:	ldr	r0, [sl, #48]	; 0x30
    126c:	cmp	r7, r0
    1270:	blt	1134 <coda_ascbin_cursor_get_bit_size+0x1b8>
    1274:	b	13e4 <coda_ascbin_cursor_get_bit_size+0x468>
    1278:	ldrd	r2, [r6]
    127c:	subs	r0, r8, #7
    1280:	sbc	r1, r8, #0
    1284:	eor	r1, r3, r1
    1288:	eor	r0, r2, r0
    128c:	orrs	r0, r0, r1
    1290:	ldrd	r0, [r4]
    1294:	bne	1398 <coda_ascbin_cursor_get_bit_size+0x41c>
    1298:	lsl	r1, r1, #3
    129c:	lsl	r2, r0, #3
    12a0:	orr	r1, r1, r0, lsr #29
    12a4:	str	r2, [r4]
    12a8:	str	r1, [r4, #4]
    12ac:	b	139c <coda_ascbin_cursor_get_bit_size+0x420>
    12b0:	mov	r6, #0
    12b4:	str	r6, [r4]
    12b8:	str	r6, [r4, #4]
    12bc:	b	137c <coda_ascbin_cursor_get_bit_size+0x400>
    12c0:	add	r7, sp, #24
    12c4:	mov	r1, r5
    12c8:	mov	r2, #520	; 0x208
    12cc:	mov	r0, r7
    12d0:	bl	0 <memcpy>
    12d4:	ldr	r1, [sp, #28]
    12d8:	cmp	r9, #1
    12dc:	add	r0, r1, #1
    12e0:	add	r2, r7, r1, lsl #4
    12e4:	str	r0, [sp, #28]
    12e8:	ldr	r6, [r7, r1, lsl #4]
    12ec:	ldr	r3, [r2, #4]
    12f0:	str	r6, [r2, #16]
    12f4:	mov	r6, #0
    12f8:	str	r3, [r2, #20]
    12fc:	blt	13c0 <coda_ascbin_cursor_get_bit_size+0x444>
    1300:	mov	r9, #0
    1304:	mov	r8, #0
    1308:	mov	r5, #0
    130c:	ldr	r2, [sl, #40]	; 0x28
    1310:	add	r0, r7, r0, lsl #4
    1314:	add	r1, sp, #16
    1318:	str	r2, [r0, #-8]
    131c:	str	r9, [r0, #-4]
    1320:	mov	r0, r7
    1324:	bl	0 <coda_cursor_get_bit_size>
    1328:	cmp	r0, #0
    132c:	bne	1378 <coda_ascbin_cursor_get_bit_size+0x3fc>
    1330:	ldr	r0, [sp, #28]
    1334:	ldr	r3, [sp, #16]
    1338:	ldr	r4, [sp, #20]
    133c:	add	r9, r9, #1
    1340:	ldr	r1, [r7, r0, lsl #4]
    1344:	lsl	r2, r0, #4
    1348:	adds	r1, r1, r3
    134c:	str	r1, [r2, r7]
    1350:	add	r1, r7, r0, lsl #4
    1354:	ldr	r2, [r1, #4]
    1358:	adc	r2, r2, r4
    135c:	adds	r8, r3, r8
    1360:	str	r2, [r1, #4]
    1364:	ldr	r1, [sp, #8]
    1368:	adc	r5, r4, r5
    136c:	cmp	r9, r1
    1370:	blt	130c <coda_ascbin_cursor_get_bit_size+0x390>
    1374:	b	13c8 <coda_ascbin_cursor_get_bit_size+0x44c>
    1378:	mvn	r6, #0
    137c:	mov	r0, r6
    1380:	sub	sp, fp, #28
    1384:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1388:	mov	r0, #0
    138c:	mov	r9, #0
    1390:	stm	r4, {r0, r9}
    1394:	b	137c <coda_ascbin_cursor_get_bit_size+0x400>
    1398:	mov	r2, r0
    139c:	mov	r6, #0
    13a0:	cmn	r1, #1
    13a4:	bgt	137c <coda_ascbin_cursor_get_bit_size+0x400>
    13a8:	movw	r0, #65236	; 0xfed4
    13ac:	movw	r1, #0
    13b0:	movt	r0, #65535	; 0xffff
    13b4:	movt	r1, #0
    13b8:	bl	0 <coda_set_error>
    13bc:	b	1024 <coda_ascbin_cursor_get_bit_size+0xa8>
    13c0:	mov	r8, #0
    13c4:	mov	r5, #0
    13c8:	ldr	r0, [sp]
    13cc:	str	r8, [r0]
    13d0:	str	r5, [r0, #4]
    13d4:	b	137c <coda_ascbin_cursor_get_bit_size+0x400>
    13d8:	mov	r0, #0
    13dc:	mov	r9, #0
    13e0:	str	r0, [sp]
    13e4:	ldr	r0, [sp]
    13e8:	stm	r4, {r0, r9}
    13ec:	b	137c <coda_ascbin_cursor_get_bit_size+0x400>
    13f0:	movw	r0, #0
    13f4:	movw	r1, #0
    13f8:	movw	r3, #0
    13fc:	mov	r2, #768	; 0x300
    1400:	movt	r0, #0
    1404:	movt	r1, #0
    1408:	movt	r3, #0
    140c:	bl	0 <__assert_fail>
    1410:	.word	0x00000424

00001414 <coda_ascbin_cursor_get_num_elements>:
    1414:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
    1418:	add	fp, sp, #24
    141c:	sub	sp, sp, #32
    1420:	mov	r4, r0
    1424:	ldr	r0, [r0, #4]
    1428:	mov	r9, r1
    142c:	add	r0, r4, r0, lsl #4
    1430:	ldr	r7, [r0, #-8]
    1434:	ldr	r0, [r7]
    1438:	cmp	r0, #99	; 0x63
    143c:	ldrhi	r7, [r7, #4]
    1440:	ldr	r0, [r7, #8]
    1444:	cmp	r0, #1
    1448:	beq	145c <coda_ascbin_cursor_get_num_elements+0x48>
    144c:	cmp	r0, #0
    1450:	bne	1534 <coda_ascbin_cursor_get_num_elements+0x120>
    1454:	ldr	r0, [r7, #48]	; 0x30
    1458:	b	1468 <coda_ascbin_cursor_get_num_elements+0x54>
    145c:	ldr	r0, [r7, #44]	; 0x2c
    1460:	cmn	r0, #1
    1464:	beq	1478 <coda_ascbin_cursor_get_num_elements+0x64>
    1468:	str	r0, [r9]
    146c:	mov	r0, #0
    1470:	sub	sp, fp, #24
    1474:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
    1478:	ldr	r1, [r7, #48]	; 0x30
    147c:	mov	r5, #1
    1480:	cmp	r1, #1
    1484:	blt	1508 <coda_ascbin_cursor_get_num_elements+0xf4>
    1488:	mov	r6, #0
    148c:	add	r8, sp, #24
    1490:	b	14a8 <coda_ascbin_cursor_get_num_elements+0x94>
    1494:	ldr	r1, [r7, #48]	; 0x30
    1498:	mul	r5, r0, r5
    149c:	add	r6, r6, #1
    14a0:	cmp	r6, r1
    14a4:	bge	1508 <coda_ascbin_cursor_get_num_elements+0xf4>
    14a8:	add	r2, r7, r6, lsl #2
    14ac:	ldr	r0, [r2, #52]	; 0x34
    14b0:	cmn	r0, #1
    14b4:	bne	1498 <coda_ascbin_cursor_get_num_elements+0x84>
    14b8:	ldr	r0, [r2, #84]	; 0x54
    14bc:	mov	r1, r4
    14c0:	mov	r2, r8
    14c4:	bl	0 <coda_expression_eval_integer>
    14c8:	cmp	r0, #0
    14cc:	bne	1510 <coda_ascbin_cursor_get_num_elements+0xfc>
    14d0:	ldr	r1, [sp, #28]
    14d4:	ldr	r0, [sp, #24]
    14d8:	cmn	r1, #1
    14dc:	bgt	1494 <coda_ascbin_cursor_get_num_elements+0x80>
    14e0:	add	r5, sp, #3
    14e4:	mov	r2, r5
    14e8:	bl	0 <coda_str64>
    14ec:	movw	r0, #65236	; 0xfed4
    14f0:	movw	r1, #0
    14f4:	mov	r2, r5
    14f8:	movt	r0, #65535	; 0xffff
    14fc:	movt	r1, #0
    1500:	bl	0 <coda_set_error>
    1504:	b	1520 <coda_ascbin_cursor_get_num_elements+0x10c>
    1508:	str	r5, [r9]
    150c:	b	146c <coda_ascbin_cursor_get_num_elements+0x58>
    1510:	movw	r0, #0
    1514:	mov	r1, r6
    1518:	movt	r0, #0
    151c:	bl	0 <coda_add_error_message>
    1520:	mov	r0, r4
    1524:	bl	0 <coda_cursor_add_to_error_message>
    1528:	mvn	r0, #0
    152c:	sub	sp, fp, #24
    1530:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
    1534:	movw	r0, #0
    1538:	movw	r1, #0
    153c:	movw	r3, #0
    1540:	movw	r2, #835	; 0x343
    1544:	movt	r0, #0
    1548:	movt	r1, #0
    154c:	movt	r3, #0
    1550:	bl	0 <__assert_fail>

00001554 <coda_ascbin_cursor_get_record_field_available_status>:
    1554:	push	{r4, r5, fp, lr}
    1558:	add	fp, sp, #8
    155c:	sub	sp, sp, #8
    1560:	mov	r4, r2
    1564:	mov	r2, r0
    1568:	ldr	r0, [r0, #4]
    156c:	mov	r5, r1
    1570:	add	r0, r2, r0, lsl #4
    1574:	ldr	r0, [r0, #-8]
    1578:	ldr	r1, [r0]
    157c:	cmp	r1, #99	; 0x63
    1580:	ldrhi	r0, [r0, #4]
    1584:	cmp	r5, #0
    1588:	ldr	r3, [r0, #48]	; 0x30
    158c:	bmi	15cc <coda_ascbin_cursor_get_record_field_available_status+0x78>
    1590:	cmp	r3, r5
    1594:	ble	15cc <coda_ascbin_cursor_get_record_field_available_status+0x78>
    1598:	ldr	r1, [r0, #68]	; 0x44
    159c:	cmp	r1, #0
    15a0:	beq	15ec <coda_ascbin_cursor_get_record_field_available_status+0x98>
    15a4:	add	r1, sp, #4
    15a8:	mov	r0, r2
    15ac:	bl	0 <coda_cursor_get_available_union_field_index>
    15b0:	cmp	r0, #0
    15b4:	bne	15e0 <coda_ascbin_cursor_get_record_field_available_status+0x8c>
    15b8:	ldr	r0, [sp, #4]
    15bc:	sub	r0, r0, r5
    15c0:	clz	r0, r0
    15c4:	lsr	r0, r0, #5
    15c8:	b	1628 <coda_ascbin_cursor_get_record_field_available_status+0xd4>
    15cc:	movw	r1, #0
    15d0:	mvn	r0, #100	; 0x64
    15d4:	mov	r2, r5
    15d8:	movt	r1, #0
    15dc:	bl	0 <coda_set_error>
    15e0:	mvn	r0, #0
    15e4:	sub	sp, fp, #8
    15e8:	pop	{r4, r5, fp, pc}
    15ec:	ldr	r0, [r0, #52]	; 0x34
    15f0:	ldr	r0, [r0, r5, lsl #2]
    15f4:	ldr	r0, [r0, #20]
    15f8:	cmp	r0, #0
    15fc:	beq	1624 <coda_ascbin_cursor_get_record_field_available_status+0xd0>
    1600:	mov	r1, r2
    1604:	mov	r2, r4
    1608:	bl	0 <coda_expression_eval_bool>
    160c:	mov	r1, r0
    1610:	mvn	r0, #0
    1614:	cmp	r1, #0
    1618:	moveq	r0, #0
    161c:	sub	sp, fp, #8
    1620:	pop	{r4, r5, fp, pc}
    1624:	mov	r0, #1
    1628:	str	r0, [r4]
    162c:	mov	r0, #0
    1630:	sub	sp, fp, #8
    1634:	pop	{r4, r5, fp, pc}

00001638 <coda_ascbin_cursor_get_array_dim>:
    1638:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
    163c:	add	fp, sp, #24
    1640:	sub	sp, sp, #32
    1644:	mov	r4, r0
    1648:	ldr	r0, [r0, #4]
    164c:	mov	r5, r2
    1650:	add	r0, r4, r0, lsl #4
    1654:	ldr	r7, [r0, #-8]
    1658:	ldr	r0, [r7]
    165c:	cmp	r0, #99	; 0x63
    1660:	ldrhi	r7, [r7, #4]
    1664:	ldr	r0, [r7, #48]	; 0x30
    1668:	str	r0, [r1]
    166c:	ldr	r0, [r7, #48]	; 0x30
    1670:	cmp	r0, #1
    1674:	blt	16d8 <coda_ascbin_cursor_get_array_dim+0xa0>
    1678:	mov	r6, #0
    167c:	add	r8, sp, #24
    1680:	b	1694 <coda_ascbin_cursor_get_array_dim+0x5c>
    1684:	str	r2, [r5, r6, lsl #2]
    1688:	add	r6, r6, #1
    168c:	cmp	r6, r0
    1690:	bge	16d8 <coda_ascbin_cursor_get_array_dim+0xa0>
    1694:	add	r1, r7, r6, lsl #2
    1698:	ldr	r2, [r1, #52]	; 0x34
    169c:	cmn	r2, #1
    16a0:	bne	1684 <coda_ascbin_cursor_get_array_dim+0x4c>
    16a4:	ldr	r0, [r1, #84]	; 0x54
    16a8:	mov	r1, r4
    16ac:	mov	r2, r8
    16b0:	bl	0 <coda_expression_eval_integer>
    16b4:	cmp	r0, #0
    16b8:	bne	16e4 <coda_ascbin_cursor_get_array_dim+0xac>
    16bc:	ldr	r1, [sp, #28]
    16c0:	ldr	r0, [sp, #24]
    16c4:	cmn	r1, #1
    16c8:	ble	16f8 <coda_ascbin_cursor_get_array_dim+0xc0>
    16cc:	str	r0, [r5, r6, lsl #2]
    16d0:	ldr	r0, [r7, #48]	; 0x30
    16d4:	b	1688 <coda_ascbin_cursor_get_array_dim+0x50>
    16d8:	mov	r0, #0
    16dc:	sub	sp, fp, #24
    16e0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
    16e4:	movw	r0, #0
    16e8:	mov	r1, r6
    16ec:	movt	r0, #0
    16f0:	bl	0 <coda_add_error_message>
    16f4:	b	171c <coda_ascbin_cursor_get_array_dim+0xe4>
    16f8:	add	r5, sp, #3
    16fc:	mov	r2, r5
    1700:	bl	0 <coda_str64>
    1704:	movw	r0, #65236	; 0xfed4
    1708:	movw	r1, #0
    170c:	mov	r2, r5
    1710:	movt	r0, #65535	; 0xffff
    1714:	movt	r1, #0
    1718:	bl	0 <coda_set_error>
    171c:	mov	r0, r4
    1720:	bl	0 <coda_cursor_add_to_error_message>
    1724:	mvn	r0, #0
    1728:	sub	sp, fp, #24
    172c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
