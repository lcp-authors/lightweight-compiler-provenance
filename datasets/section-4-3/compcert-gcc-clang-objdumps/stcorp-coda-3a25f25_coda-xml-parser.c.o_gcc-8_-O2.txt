
../compcert-repos/stcorp-coda-3a25f25/CMakeFiles/coda_static.dir/libcoda/coda-xml-parser.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <not_standalone_handler>:
       0:	mov	r0, #0
       4:	bx	lr

00000008 <attribute_record_new>:
       8:	strd	r4, [sp, #-36]!	; 0xffffffdc
       c:	strd	r6, [sp, #8]
      10:	subs	r7, r0, #0
      14:	strd	r8, [sp, #16]
      18:	strd	sl, [sp, #24]
      1c:	str	lr, [sp, #32]
      20:	sub	sp, sp, #20
      24:	ldr	r9, [sp, #56]	; 0x38
      28:	beq	3d0 <attribute_record_new+0x3c8>
      2c:	mov	sl, r1
      30:	mov	r1, #0
      34:	mov	r4, r2
      38:	mov	r5, r3
      3c:	bl	0 <coda_mem_record_new>
      40:	mov	r8, r0
      44:	mov	r0, r4
      48:	bl	0 <coda_element_name_from_xml_name>
      4c:	cmp	r4, r0
      50:	beq	e4 <attribute_record_new+0xdc>
      54:	movw	r1, #0
      58:	movt	r1, #0
      5c:	ldr	r0, [r7, #44]	; 0x2c
      60:	bl	0 <coda_hashtable_get_index_from_name>
      64:	cmp	r9, #0
      68:	mov	r2, r0
      6c:	beq	28c <attribute_record_new+0x284>
      70:	cmp	r0, #0
      74:	blt	340 <attribute_record_new+0x338>
      78:	ldr	r3, [r8, #20]
      7c:	ldr	r6, [r3, r0, lsl #2]
      80:	cmp	r6, #0
      84:	bne	3b0 <attribute_record_new+0x3a8>
      88:	ldr	r3, [r7, #52]	; 0x34
      8c:	mov	r0, r4
      90:	ldr	r3, [r3, r2, lsl #2]
      94:	ldr	fp, [r3, #8]
      98:	bl	0 <coda_element_name_from_xml_name>
      9c:	sub	r3, r0, r4
      a0:	mov	r2, sl
      a4:	str	r4, [sp]
      a8:	sub	r3, r3, #1
      ac:	mov	r1, r6
      b0:	mov	r0, fp
      b4:	bl	0 <coda_mem_data_new>
      b8:	mov	r4, r0
      bc:	mov	r3, r6
      c0:	cmp	r4, #0
      c4:	beq	238 <attribute_record_new+0x230>
      c8:	movw	r1, #0
      cc:	movt	r1, #0
      d0:	mov	r2, r4
      d4:	mov	r0, r8
      d8:	bl	0 <coda_mem_record_add_field>
      dc:	cmp	r0, #0
      e0:	bne	388 <attribute_record_new+0x380>
      e4:	ldr	r4, [r5]
      e8:	cmp	r4, #0
      ec:	bne	144 <attribute_record_new+0x13c>
      f0:	b	17c <attribute_record_new+0x174>
      f4:	ldr	r0, [r7, #52]	; 0x34
      f8:	mov	r2, sl
      fc:	mov	r1, #0
     100:	ldr	r3, [r5, #4]
     104:	ldr	r0, [r0, r6, lsl #2]
     108:	ldr	r0, [r0, #8]
     10c:	bl	0 <coda_mem_string_new>
     110:	mov	r6, r0
     114:	mov	r3, #0
     118:	cmp	r6, #0
     11c:	beq	238 <attribute_record_new+0x230>
     120:	mov	r1, r4
     124:	mov	r2, r6
     128:	mov	r0, r8
     12c:	bl	0 <coda_mem_record_add_field>
     130:	cmp	r0, #0
     134:	bne	334 <attribute_record_new+0x32c>
     138:	ldr	r4, [r5, #8]!
     13c:	cmp	r4, #0
     140:	beq	17c <attribute_record_new+0x174>
     144:	mov	r1, r4
     148:	ldr	r0, [r7, #44]	; 0x2c
     14c:	bl	0 <coda_hashtable_get_index_from_name>
     150:	subs	r6, r0, #0
     154:	blt	1d8 <attribute_record_new+0x1d0>
     158:	cmp	r9, #0
     15c:	beq	f4 <attribute_record_new+0xec>
     160:	ldr	r3, [r8, #20]
     164:	ldr	fp, [r3, r6, lsl #2]
     168:	cmp	fp, #0
     16c:	beq	f4 <attribute_record_new+0xec>
     170:	ldr	r4, [r5, #8]!
     174:	cmp	r4, #0
     178:	bne	144 <attribute_record_new+0x13c>
     17c:	ldr	ip, [r7, #48]	; 0x30
     180:	cmp	ip, #0
     184:	ble	244 <attribute_record_new+0x23c>
     188:	ldr	r3, [r7, #52]	; 0x34
     18c:	mov	r1, #0
     190:	mov	lr, #1
     194:	sub	r3, r3, #4
     198:	b	1a8 <attribute_record_new+0x1a0>
     19c:	add	r1, r1, #1
     1a0:	cmp	ip, r1
     1a4:	beq	244 <attribute_record_new+0x23c>
     1a8:	ldr	r2, [r3, #4]!
     1ac:	ldrb	r0, [r2, #16]
     1b0:	cmp	r0, #0
     1b4:	bne	19c <attribute_record_new+0x194>
     1b8:	ldr	r0, [r8, #20]
     1bc:	ldr	r0, [r0, r1, lsl #2]
     1c0:	cmp	r0, #0
     1c4:	bne	19c <attribute_record_new+0x194>
     1c8:	cmp	r9, #0
     1cc:	beq	394 <attribute_record_new+0x38c>
     1d0:	strb	lr, [r2, #16]
     1d4:	b	19c <attribute_record_new+0x194>
     1d8:	ldr	r6, [r7, #44]	; 0x2c
     1dc:	mov	r0, r4
     1e0:	bl	0 <coda_element_name_from_xml_name>
     1e4:	mov	r1, r0
     1e8:	mov	r0, r6
     1ec:	bl	0 <coda_hashtable_get_index_from_name>
     1f0:	subs	r6, r0, #0
     1f4:	bge	264 <attribute_record_new+0x25c>
     1f8:	cmp	r9, #0
     1fc:	beq	304 <attribute_record_new+0x2fc>
     200:	mov	r0, #2
     204:	bl	0 <coda_type_text_new>
     208:	subs	fp, r0, #0
     20c:	beq	238 <attribute_record_new+0x230>
     210:	mov	r2, sl
     214:	mov	r1, #0
     218:	ldr	r3, [r5, #4]
     21c:	bl	0 <coda_mem_string_new>
     220:	mov	r6, r0
     224:	mov	r0, fp
     228:	bl	0 <coda_type_release>
     22c:	cmp	r6, #0
     230:	mov	r3, r9
     234:	bne	120 <attribute_record_new+0x118>
     238:	mov	r0, r8
     23c:	mov	r8, #0
     240:	bl	0 <coda_dynamic_type_delete>
     244:	mov	r0, r8
     248:	add	sp, sp, #20
     24c:	ldrd	r4, [sp]
     250:	ldrd	r6, [sp, #8]
     254:	ldrd	r8, [sp, #16]
     258:	ldrd	sl, [sp, #24]
     25c:	add	sp, sp, #32
     260:	pop	{pc}		; (ldr pc, [sp], #4)
     264:	mov	r0, r4
     268:	bl	0 <coda_element_name_from_xml_name>
     26c:	cmp	r9, #0
     270:	mov	r4, r0
     274:	beq	f4 <attribute_record_new+0xec>
     278:	ldr	r3, [r8, #20]
     27c:	ldr	fp, [r3, r6, lsl #2]
     280:	cmp	fp, #0
     284:	bne	170 <attribute_record_new+0x168>
     288:	b	f4 <attribute_record_new+0xec>
     28c:	cmp	r0, #0
     290:	blt	e4 <attribute_record_new+0xdc>
     294:	ldr	r3, [r7, #52]	; 0x34
     298:	mov	r0, r4
     29c:	ldr	r3, [r3, r2, lsl #2]
     2a0:	ldr	r6, [r3, #8]
     2a4:	bl	0 <coda_element_name_from_xml_name>
     2a8:	sub	r3, r0, r4
     2ac:	mov	r2, sl
     2b0:	str	r4, [sp]
     2b4:	sub	r3, r3, #1
     2b8:	mov	r1, r9
     2bc:	mov	r0, r6
     2c0:	bl	0 <coda_mem_data_new>
     2c4:	subs	r4, r0, #0
     2c8:	beq	238 <attribute_record_new+0x230>
     2cc:	movw	r1, #0
     2d0:	movt	r1, #0
     2d4:	mov	r3, r9
     2d8:	mov	r2, r4
     2dc:	mov	r0, r8
     2e0:	bl	0 <coda_mem_record_add_field>
     2e4:	cmp	r0, #0
     2e8:	beq	e4 <attribute_record_new+0xdc>
     2ec:	mov	r0, r4
     2f0:	bl	0 <coda_dynamic_type_delete>
     2f4:	mov	r0, r8
     2f8:	mov	r8, r9
     2fc:	bl	0 <coda_dynamic_type_delete>
     300:	b	244 <attribute_record_new+0x23c>
     304:	cmn	r6, #1
     308:	bne	f4 <attribute_record_new+0xec>
     30c:	ldr	r2, [r5]
     310:	movw	r1, #0
     314:	movt	r1, #0
     318:	movw	r0, #65236	; 0xfed4
     31c:	movt	r0, #65535	; 0xffff
     320:	bl	0 <coda_set_error>
     324:	mov	r0, r8
     328:	mov	r8, r9
     32c:	bl	0 <coda_dynamic_type_delete>
     330:	b	244 <attribute_record_new+0x23c>
     334:	mov	r0, r6
     338:	bl	0 <coda_dynamic_type_delete>
     33c:	b	238 <attribute_record_new+0x230>
     340:	mov	r0, #2
     344:	bl	0 <coda_type_text_new>
     348:	subs	r6, r0, #0
     34c:	beq	238 <attribute_record_new+0x230>
     350:	mov	r0, r4
     354:	bl	0 <coda_element_name_from_xml_name>
     358:	sub	r3, r0, r4
     35c:	mov	r2, sl
     360:	str	r4, [sp]
     364:	sub	r3, r3, #1
     368:	mov	r1, #0
     36c:	mov	r0, r6
     370:	bl	0 <coda_mem_data_new>
     374:	mov	r4, r0
     378:	mov	r0, r6
     37c:	bl	0 <coda_type_release>
     380:	mov	r3, r9
     384:	b	c0 <attribute_record_new+0xb8>
     388:	mov	r0, r4
     38c:	bl	0 <coda_dynamic_type_delete>
     390:	b	238 <attribute_record_new+0x230>
     394:	add	r2, sp, #12
     398:	mov	r0, r7
     39c:	bl	0 <coda_type_get_record_field_real_name>
     3a0:	movw	r1, #0
     3a4:	movt	r1, #0
     3a8:	ldr	r2, [sp, #12]
     3ac:	b	318 <attribute_record_new+0x310>
     3b0:	movw	r3, #0
     3b4:	movt	r3, #0
     3b8:	movw	r1, #0
     3bc:	movt	r1, #0
     3c0:	movw	r0, #0
     3c4:	movt	r0, #0
     3c8:	mov	r2, #123	; 0x7b
     3cc:	bl	0 <__assert_fail>
     3d0:	movw	r3, #0
     3d4:	movt	r3, #0
     3d8:	movw	r1, #0
     3dc:	movt	r1, #0
     3e0:	movw	r0, #0
     3e4:	movt	r0, #0
     3e8:	mov	r2, #97	; 0x61
     3ec:	bl	0 <__assert_fail>

000003f0 <start_element_handler>:
     3f0:	ldr	r3, [r0, #12]
     3f4:	strd	r4, [sp, #-36]!	; 0xffffffdc
     3f8:	mov	r4, r0
     3fc:	strd	r6, [sp, #8]
     400:	mov	r7, r2
     404:	strd	r8, [sp, #16]
     408:	strd	sl, [sp, #24]
     40c:	add	r2, r0, r3, lsl #2
     410:	str	lr, [sp, #32]
     414:	sub	sp, sp, #20
     418:	ldr	r5, [r2, #144]	; 0x90
     41c:	cmp	r5, #0
     420:	beq	7f4 <start_element_handler+0x404>
     424:	ldr	r0, [r5, #4]
     428:	ldr	r5, [r0]
     42c:	cmp	r5, #2
     430:	bne	6cc <start_element_handler+0x2dc>
     434:	add	r3, r3, #1
     438:	mov	r8, #0
     43c:	cmp	r3, #31
     440:	str	r3, [r4, #12]
     444:	str	r8, [r4, #536]	; 0x218
     448:	bgt	684 <start_element_handler+0x294>
     44c:	ldr	r3, [r2, #144]	; 0x90
     450:	mov	r6, r1
     454:	str	r8, [r2, #148]	; 0x94
     458:	ldr	r2, [r3, #4]
     45c:	str	r3, [sp, #12]
     460:	ldr	r0, [r2, #44]	; 0x2c
     464:	bl	0 <coda_hashtable_get_index_from_name>
     468:	subs	r3, r0, #0
     46c:	blt	6f8 <start_element_handler+0x308>
     470:	ldr	r0, [sp, #12]
     474:	mov	r1, r3
     478:	lsl	r8, r3, #2
     47c:	ldr	r2, [r4, #12]
     480:	ldr	r0, [r0, #4]
     484:	add	ip, r4, r2, lsl #2
     488:	add	r2, r2, #100	; 0x64
     48c:	add	r2, r4, r2, lsl #2
     490:	ldr	lr, [r0, #52]	; 0x34
     494:	str	r3, [ip, #272]	; 0x110
     498:	ldr	r3, [lr, r3, lsl #2]
     49c:	add	r3, r3, #8
     4a0:	str	r3, [ip, #16]
     4a4:	bl	0 <coda_type_get_record_field_real_name>
     4a8:	subs	r9, r0, #0
     4ac:	bne	69c <start_element_handler+0x2ac>
     4b0:	ldr	r3, [r4, #12]
     4b4:	add	ip, r4, r3, lsl #2
     4b8:	ldr	r2, [ip, #16]
     4bc:	ldr	r5, [r2]
     4c0:	ldr	sl, [r5, #8]
     4c4:	cmp	sl, #1
     4c8:	beq	810 <start_element_handler+0x420>
     4cc:	ldr	r3, [sp, #12]
     4d0:	ldr	sl, [r4, #532]	; 0x214
     4d4:	ldr	r3, [r3, #20]
     4d8:	ldr	r3, [r3, r8]
     4dc:	cmp	r3, #0
     4e0:	beq	588 <start_element_handler+0x198>
     4e4:	cmp	sl, #0
     4e8:	beq	8d0 <start_element_handler+0x4e0>
     4ec:	mov	r0, #2
     4f0:	bl	0 <coda_type_array_new>
     4f4:	subs	sl, r0, #0
     4f8:	beq	69c <start_element_handler+0x2ac>
     4fc:	mov	r1, r5
     500:	bl	0 <coda_type_array_set_base_type>
     504:	subs	fp, r0, #0
     508:	bne	8a8 <start_element_handler+0x4b8>
     50c:	ldr	r3, [r4, #12]
     510:	mov	r0, r5
     514:	add	r3, r3, #4
     518:	ldr	r3, [r4, r3, lsl #2]
     51c:	str	sl, [r3]
     520:	bl	0 <coda_type_release>
     524:	mov	r1, fp
     528:	mov	r0, sl
     52c:	bl	0 <coda_type_array_add_variable_dimension>
     530:	subs	r5, r0, #0
     534:	bne	69c <start_element_handler+0x2ac>
     538:	mov	r1, r5
     53c:	mov	r0, sl
     540:	bl	0 <coda_mem_array_new>
     544:	subs	fp, r0, #0
     548:	beq	69c <start_element_handler+0x2ac>
     54c:	ldr	r3, [sp, #12]
     550:	ldr	r3, [r3, #20]
     554:	ldr	r1, [r3, r8]
     558:	bl	0 <coda_mem_array_add_element>
     55c:	cmp	r0, #0
     560:	bne	69c <start_element_handler+0x2ac>
     564:	ldr	r1, [sp, #12]
     568:	add	r2, sl, #40	; 0x28
     56c:	ldr	r3, [r4, #12]
     570:	ldr	r5, [sl, #40]	; 0x28
     574:	ldr	r1, [r1, #20]
     578:	add	r3, r3, #4
     57c:	ldr	sl, [r4, #532]	; 0x214
     580:	str	fp, [r1, r8]
     584:	str	r2, [r4, r3, lsl #2]
     588:	ldr	r0, [r5, #36]	; 0x24
     58c:	cmp	r0, #0
     590:	beq	850 <start_element_handler+0x460>
     594:	mov	r3, r7
     598:	mov	r2, r6
     59c:	str	sl, [sp]
     5a0:	ldr	r1, [r4, #8]
     5a4:	bl	8 <attribute_record_new>
     5a8:	cmp	r0, #0
     5ac:	str	r0, [r4, #528]	; 0x210
     5b0:	beq	69c <start_element_handler+0x2ac>
     5b4:	ldr	r3, [r5]
     5b8:	cmp	r3, #2
     5bc:	bne	6b0 <start_element_handler+0x2c0>
     5c0:	ldr	r3, [r5, #8]
     5c4:	cmp	r3, #0
     5c8:	bne	6b0 <start_element_handler+0x2c0>
     5cc:	mov	r0, r5
     5d0:	ldr	r6, [r4, #12]
     5d4:	ldr	r1, [r4, #528]	; 0x210
     5d8:	bl	0 <coda_mem_record_new>
     5dc:	ldr	ip, [r4, #12]
     5e0:	add	r6, r6, #36	; 0x24
     5e4:	str	r0, [r4, r6, lsl #2]
     5e8:	add	r3, ip, #36	; 0x24
     5ec:	ldr	r3, [r4, r3, lsl #2]
     5f0:	cmp	r3, #0
     5f4:	beq	69c <start_element_handler+0x2ac>
     5f8:	ldr	r2, [r3, #16]
     5fc:	cmp	r2, #0
     600:	bgt	620 <start_element_handler+0x230>
     604:	b	90c <start_element_handler+0x51c>
     608:	add	r3, ip, #36	; 0x24
     60c:	ldr	r3, [r4, r3, lsl #2]
     610:	add	r9, r9, #1
     614:	ldr	r2, [r3, #16]
     618:	cmp	r2, r9
     61c:	ble	90c <start_element_handler+0x51c>
     620:	ldr	r2, [r5, #52]	; 0x34
     624:	lsl	r7, r9, #2
     628:	ldr	r2, [r2, r9, lsl #2]
     62c:	ldr	r0, [r2, #8]
     630:	ldr	r6, [r0, #8]
     634:	cmp	r6, #1
     638:	bne	608 <start_element_handler+0x218>
     63c:	ldr	r2, [r0]
     640:	cmp	r2, #2
     644:	bne	608 <start_element_handler+0x218>
     648:	mov	r1, #0
     64c:	ldr	r8, [r3, #20]
     650:	bl	0 <coda_mem_array_new>
     654:	ldr	ip, [r4, #12]
     658:	str	r0, [r8, r7]
     65c:	add	r3, ip, #36	; 0x24
     660:	ldr	r3, [r4, r3, lsl #2]
     664:	ldr	r2, [r3, #20]
     668:	ldr	r1, [r2, r7]
     66c:	cmp	r1, #0
     670:	bne	610 <start_element_handler+0x220>
     674:	ldr	r0, [r4]
     678:	bl	0 <coda_XML_StopParser>
     67c:	str	r6, [r4, #4]
     680:	b	6b0 <start_element_handler+0x2c0>
     684:	movw	r1, #0
     688:	movt	r1, #0
     68c:	movw	r0, #65236	; 0xfed4
     690:	movt	r0, #65535	; 0xffff
     694:	mov	r2, #32
     698:	bl	0 <coda_set_error>
     69c:	mov	r1, #0
     6a0:	ldr	r0, [r4]
     6a4:	bl	0 <coda_XML_StopParser>
     6a8:	mov	r3, #1
     6ac:	str	r3, [r4, #4]
     6b0:	add	sp, sp, #20
     6b4:	ldrd	r4, [sp]
     6b8:	ldrd	r6, [sp, #8]
     6bc:	ldrd	r8, [sp, #16]
     6c0:	ldrd	sl, [sp, #24]
     6c4:	add	sp, sp, #32
     6c8:	pop	{pc}		; (ldr pc, [sp], #4)
     6cc:	mov	r0, r5
     6d0:	ldr	r5, [r2, #400]	; 0x190
     6d4:	bl	0 <coda_type_get_format_name>
     6d8:	mov	r3, r0
     6dc:	movw	r1, #0
     6e0:	movt	r1, #0
     6e4:	movw	r0, #65236	; 0xfed4
     6e8:	movt	r0, #65535	; 0xffff
     6ec:	mov	r2, r5
     6f0:	bl	0 <coda_set_error>
     6f4:	b	69c <start_element_handler+0x2ac>
     6f8:	ldr	r3, [sp, #12]
     6fc:	mov	r0, r6
     700:	ldr	r3, [r3, #4]
     704:	ldr	r9, [r3, #44]	; 0x2c
     708:	bl	0 <coda_element_name_from_xml_name>
     70c:	mov	r1, r0
     710:	mov	r0, r9
     714:	bl	0 <coda_hashtable_get_index_from_name>
     718:	subs	r3, r0, #0
     71c:	bge	470 <start_element_handler+0x80>
     720:	ldr	r3, [r4, #532]	; 0x214
     724:	cmp	r3, #0
     728:	bne	75c <start_element_handler+0x36c>
     72c:	ldr	r3, [r4, #12]
     730:	cmp	r3, #1
     734:	beq	8b4 <start_element_handler+0x4c4>
     738:	add	r3, r3, #99	; 0x63
     73c:	mov	r2, r6
     740:	movw	r1, #0
     744:	movt	r1, #0
     748:	ldr	r3, [r4, r3, lsl #2]
     74c:	movw	r0, #65236	; 0xfed4
     750:	movt	r0, #65535	; 0xffff
     754:	bl	0 <coda_set_error>
     758:	b	69c <start_element_handler+0x2ac>
     75c:	mov	r0, r5
     760:	bl	0 <coda_type_record_new>
     764:	subs	r5, r0, #0
     768:	beq	69c <start_element_handler+0x2ac>
     76c:	ldr	r3, [sp, #12]
     770:	mov	r2, r5
     774:	mov	r1, r6
     778:	ldr	r0, [r3, #4]
     77c:	bl	0 <coda_type_record_create_field>
     780:	subs	r9, r0, #0
     784:	mov	r0, r5
     788:	bne	8ac <start_element_handler+0x4bc>
     78c:	bl	0 <coda_type_release>
     790:	ldr	r3, [sp, #12]
     794:	add	r0, sp, #12
     798:	ldr	r1, [r3, #4]
     79c:	bl	0 <coda_mem_type_update>
     7a0:	cmp	r0, #0
     7a4:	bne	69c <start_element_handler+0x2ac>
     7a8:	ldr	r3, [r4, #12]
     7ac:	ldr	r2, [sp, #12]
     7b0:	add	r3, r3, #35	; 0x23
     7b4:	ldr	r3, [r4, r3, lsl #2]
     7b8:	cmp	r3, r2
     7bc:	bne	968 <start_element_handler+0x578>
     7c0:	ldr	r3, [r2, #4]
     7c4:	mov	r1, r6
     7c8:	ldr	r0, [r3, #44]	; 0x2c
     7cc:	bl	0 <coda_hashtable_get_index_from_name>
     7d0:	subs	r3, r0, #0
     7d4:	bge	470 <start_element_handler+0x80>
     7d8:	movw	r1, #0
     7dc:	movt	r1, #0
     7e0:	ldr	r3, [pc, #412]	; 984 <start_element_handler+0x594>
     7e4:	movw	r0, #0
     7e8:	movt	r0, #0
     7ec:	mov	r2, #396	; 0x18c
     7f0:	bl	0 <__assert_fail>
     7f4:	movw	r1, #0
     7f8:	movt	r1, #0
     7fc:	ldr	r2, [r2, #400]	; 0x190
     800:	movw	r0, #65236	; 0xfed4
     804:	movt	r0, #65535	; 0xffff
     808:	bl	0 <coda_set_error>
     80c:	b	69c <start_element_handler+0x2ac>
     810:	ldr	r2, [r5]
     814:	cmp	r2, #2
     818:	beq	824 <start_element_handler+0x434>
     81c:	ldr	sl, [r4, #532]	; 0x214
     820:	b	588 <start_element_handler+0x198>
     824:	ldr	r2, [sp, #12]
     828:	ldr	fp, [r2, #20]
     82c:	ldr	r2, [fp, r8]
     830:	cmp	r2, #0
     834:	beq	92c <start_element_handler+0x53c>
     838:	add	r2, r5, #40	; 0x28
     83c:	add	r3, r3, #4
     840:	ldr	r5, [r5, #40]	; 0x28
     844:	ldr	sl, [r4, #532]	; 0x214
     848:	str	r2, [r4, r3, lsl #2]
     84c:	b	588 <start_element_handler+0x198>
     850:	cmp	sl, #0
     854:	ldr	r2, [r7]
     858:	str	r0, [r4, #528]	; 0x210
     85c:	beq	8ec <start_element_handler+0x4fc>
     860:	cmp	r2, #0
     864:	beq	918 <start_element_handler+0x528>
     868:	mov	r0, #2
     86c:	bl	0 <coda_type_record_new>
     870:	cmp	r0, #0
     874:	mov	r1, r0
     878:	str	r0, [r5, #36]	; 0x24
     87c:	beq	6a0 <start_element_handler+0x2b0>
     880:	mov	r3, r7
     884:	mov	r2, r6
     888:	ldr	r1, [r4, #8]
     88c:	ldr	ip, [r4, #532]	; 0x214
     890:	str	ip, [sp]
     894:	bl	8 <attribute_record_new>
     898:	cmp	r0, #0
     89c:	str	r0, [r4, #528]	; 0x210
     8a0:	bne	5b4 <start_element_handler+0x1c4>
     8a4:	b	69c <start_element_handler+0x2ac>
     8a8:	mov	r0, sl
     8ac:	bl	0 <coda_type_release>
     8b0:	b	69c <start_element_handler+0x2ac>
     8b4:	mov	r2, r6
     8b8:	movw	r1, #0
     8bc:	movt	r1, #0
     8c0:	movw	r0, #65236	; 0xfed4
     8c4:	movt	r0, #65535	; 0xffff
     8c8:	bl	0 <coda_set_error>
     8cc:	b	69c <start_element_handler+0x2ac>
     8d0:	movw	r1, #0
     8d4:	movt	r1, #0
     8d8:	ldr	r3, [ip, #396]	; 0x18c
     8dc:	movw	r0, #65236	; 0xfed4
     8e0:	movt	r0, #65535	; 0xffff
     8e4:	mov	r2, r6
     8e8:	b	6f0 <start_element_handler+0x300>
     8ec:	cmp	r2, #0
     8f0:	beq	5b4 <start_element_handler+0x1c4>
     8f4:	movw	r1, #0
     8f8:	movt	r1, #0
     8fc:	movw	r0, #65236	; 0xfed4
     900:	movt	r0, #65535	; 0xffff
     904:	bl	0 <coda_set_error>
     908:	b	69c <start_element_handler+0x2ac>
     90c:	mov	r3, #0
     910:	str	r3, [r4, #528]	; 0x210
     914:	b	6b0 <start_element_handler+0x2c0>
     918:	mov	r0, r6
     91c:	bl	0 <coda_element_name_from_xml_name>
     920:	cmp	r6, r0
     924:	bne	868 <start_element_handler+0x478>
     928:	b	5b4 <start_element_handler+0x1c4>
     92c:	mov	r1, r9
     930:	mov	r0, r5
     934:	bl	0 <coda_mem_array_new>
     938:	ldr	r3, [sp, #12]
     93c:	ldr	r3, [r3, #20]
     940:	str	r0, [fp, r8]
     944:	ldr	r1, [r3, r8]
     948:	cmp	r1, #0
     94c:	beq	958 <start_element_handler+0x568>
     950:	ldr	r3, [r4, #12]
     954:	b	838 <start_element_handler+0x448>
     958:	ldr	r0, [r4]
     95c:	bl	0 <coda_XML_StopParser>
     960:	str	sl, [r4, #4]
     964:	b	6b0 <start_element_handler+0x2c0>
     968:	movw	r1, #0
     96c:	movt	r1, #0
     970:	ldr	r3, [pc, #12]	; 984 <start_element_handler+0x594>
     974:	movw	r0, #0
     978:	movt	r0, #0
     97c:	movw	r2, #394	; 0x18a
     980:	bl	0 <__assert_fail>
     984:	.word	0x00000018

00000988 <parser_info_cleanup>:
     988:	strd	r4, [sp, #-16]!
     98c:	str	r6, [sp, #8]
     990:	mov	r6, r0
     994:	ldr	r0, [r0]
     998:	str	lr, [sp, #12]
     99c:	cmp	r0, #0
     9a0:	beq	9a8 <parser_info_cleanup+0x20>
     9a4:	bl	0 <coda_XML_ParserFree>
     9a8:	ldr	r2, [r6, #12]
     9ac:	cmp	r2, #0
     9b0:	blt	9dc <parser_info_cleanup+0x54>
     9b4:	add	r5, r6, #140	; 0x8c
     9b8:	mov	r4, #0
     9bc:	ldr	r3, [r5, #4]!
     9c0:	add	r4, r4, #1
     9c4:	subs	r0, r3, #0
     9c8:	beq	9d4 <parser_info_cleanup+0x4c>
     9cc:	bl	0 <coda_dynamic_type_delete>
     9d0:	ldr	r2, [r6, #12]
     9d4:	cmp	r2, r4
     9d8:	bge	9bc <parser_info_cleanup+0x34>
     9dc:	ldr	r0, [r6, #528]	; 0x210
     9e0:	cmp	r0, #0
     9e4:	beq	9ec <parser_info_cleanup+0x64>
     9e8:	bl	0 <coda_dynamic_type_delete>
     9ec:	ldr	r0, [r6, #544]	; 0x220
     9f0:	cmp	r0, #0
     9f4:	beq	a0c <parser_info_cleanup+0x84>
     9f8:	ldrd	r4, [sp]
     9fc:	ldr	r6, [sp, #8]
     a00:	ldr	lr, [sp, #12]
     a04:	add	sp, sp, #16
     a08:	b	0 <free>
     a0c:	ldrd	r4, [sp]
     a10:	ldr	r6, [sp, #8]
     a14:	add	sp, sp, #12
     a18:	pop	{pc}		; (ldr pc, [sp], #4)

00000a1c <is_whitespace>:
     a1c:	cmp	r0, #0
     a20:	beq	aa8 <is_whitespace+0x8c>
     a24:	cmp	r1, #0
     a28:	ble	a98 <is_whitespace+0x7c>
     a2c:	ldrb	r3, [r0]
     a30:	cmp	r3, #32
     a34:	cmpne	r3, #13
     a38:	sub	r3, r3, #9
     a3c:	movne	r2, #1
     a40:	moveq	r2, #0
     a44:	cmp	r3, #1
     a48:	movls	r3, #0
     a4c:	andhi	r3, r2, #1
     a50:	cmp	r3, #0
     a54:	bne	aa0 <is_whitespace+0x84>
     a58:	sub	r1, r1, #1
     a5c:	add	r1, r0, r1
     a60:	b	a90 <is_whitespace+0x74>
     a64:	ldrb	r3, [r0, #1]!
     a68:	cmp	r3, #32
     a6c:	cmpne	r3, #13
     a70:	sub	r3, r3, #9
     a74:	movne	r2, #1
     a78:	moveq	r2, #0
     a7c:	cmp	r3, #1
     a80:	movls	r3, #0
     a84:	andhi	r3, r2, #1
     a88:	cmp	r3, #0
     a8c:	bne	aa0 <is_whitespace+0x84>
     a90:	cmp	r0, r1
     a94:	bne	a64 <is_whitespace+0x48>
     a98:	mov	r0, #1
     a9c:	bx	lr
     aa0:	mov	r0, #0
     aa4:	bx	lr
     aa8:	movw	r1, #0
     aac:	movt	r1, #0
     ab0:	ldr	r3, [pc, #20]	; acc <is_whitespace+0xb0>
     ab4:	movw	r0, #0
     ab8:	movt	r0, #0
     abc:	str	r4, [sp, #-8]!
     ac0:	mov	r2, #53	; 0x35
     ac4:	str	lr, [sp, #4]
     ac8:	bl	0 <__assert_fail>
     acc:	.word	0x00000030

00000ad0 <character_data_handler>:
     ad0:	ldr	r3, [r0, #532]	; 0x214
     ad4:	strd	r4, [sp, #-24]!	; 0xffffffe8
     ad8:	mov	r4, r0
     adc:	mov	r5, r2
     ae0:	strd	r6, [sp, #8]
     ae4:	mov	r7, r1
     ae8:	str	r8, [sp, #16]
     aec:	str	lr, [sp, #20]
     af0:	sub	sp, sp, #8
     af4:	cmp	r3, #0
     af8:	bne	b24 <character_data_handler+0x54>
     afc:	ldr	r6, [r0, #12]
     b00:	add	r6, r0, r6, lsl #2
     b04:	ldr	r3, [r6, #144]	; 0x90
     b08:	cmp	r3, #0
     b0c:	beq	b24 <character_data_handler+0x54>
     b10:	mov	r1, r2
     b14:	mov	r0, r7
     b18:	bl	a1c <is_whitespace>
     b1c:	subs	r8, r0, #0
     b20:	beq	b8c <character_data_handler+0xbc>
     b24:	add	r0, r4, #536	; 0x218
     b28:	ldm	r0, {r0, r3, r6}
     b2c:	add	r1, r0, r5
     b30:	cmp	r1, r3
     b34:	ble	b58 <character_data_handler+0x88>
     b38:	mov	r0, r6
     b3c:	bl	0 <realloc>
     b40:	subs	r6, r0, #0
     b44:	beq	bbc <character_data_handler+0xec>
     b48:	ldr	r0, [r4, #536]	; 0x218
     b4c:	str	r6, [r4, #544]	; 0x220
     b50:	add	r3, r0, r5
     b54:	str	r3, [r4, #540]	; 0x21c
     b58:	mov	r2, r5
     b5c:	mov	r1, r7
     b60:	add	r0, r6, r0
     b64:	bl	0 <memcpy>
     b68:	ldr	r3, [r4, #536]	; 0x218
     b6c:	add	r5, r3, r5
     b70:	str	r5, [r4, #536]	; 0x218
     b74:	add	sp, sp, #8
     b78:	ldrd	r4, [sp]
     b7c:	ldrd	r6, [sp, #8]
     b80:	ldr	r8, [sp, #16]
     b84:	add	sp, sp, #20
     b88:	pop	{pc}		; (ldr pc, [sp], #4)
     b8c:	movw	r1, #0
     b90:	movt	r1, #0
     b94:	ldr	r2, [r6, #400]	; 0x190
     b98:	movw	r0, #65236	; 0xfed4
     b9c:	movt	r0, #65535	; 0xffff
     ba0:	bl	0 <coda_set_error>
     ba4:	mov	r1, r8
     ba8:	ldr	r0, [r4]
     bac:	bl	0 <coda_XML_StopParser>
     bb0:	mov	r3, #1
     bb4:	str	r3, [r4, #4]
     bb8:	b	b74 <character_data_handler+0xa4>
     bbc:	ldr	r2, [r4, #536]	; 0x218
     bc0:	movw	r0, #731	; 0x2db
     bc4:	movw	r3, #0
     bc8:	movt	r3, #0
     bcc:	movw	r1, #0
     bd0:	movt	r1, #0
     bd4:	str	r0, [sp]
     bd8:	mvn	r0, #0
     bdc:	add	r2, r5, r2
     be0:	bl	0 <coda_set_error>
     be4:	mov	r1, r6
     be8:	ldr	r0, [r4]
     bec:	bl	0 <coda_XML_StopParser>
     bf0:	mov	r3, #1
     bf4:	str	r3, [r4, #4]
     bf8:	b	b74 <character_data_handler+0xa4>

00000bfc <end_element_handler>:
     bfc:	ldr	r3, [r0, #4]
     c00:	cmp	r3, #0
     c04:	bxne	lr
     c08:	strd	r4, [sp, #-28]!	; 0xffffffe4
     c0c:	mov	r4, r0
     c10:	strd	r6, [sp, #8]
     c14:	ldr	r6, [r0, #12]
     c18:	strd	r8, [sp, #16]
     c1c:	str	lr, [sp, #24]
     c20:	sub	sp, sp, #12
     c24:	add	r7, r0, r6, lsl #2
     c28:	ldr	r5, [r7, #144]	; 0x90
     c2c:	cmp	r5, #0
     c30:	beq	d84 <end_element_handler+0x188>
     c34:	ldr	r8, [r0, #532]	; 0x214
     c38:	ldr	r1, [r0, #536]	; 0x218
     c3c:	cmp	r1, #0
     c40:	bgt	cdc <end_element_handler+0xe0>
     c44:	cmp	r8, #0
     c48:	addne	r3, r6, #36	; 0x24
     c4c:	beq	df8 <end_element_handler+0x1fc>
     c50:	ldr	r2, [r4, #528]	; 0x210
     c54:	mov	r1, #0
     c58:	str	r1, [r4, r3, lsl #2]
     c5c:	cmp	r2, r1
     c60:	bne	f78 <end_element_handler+0x37c>
     c64:	add	r3, r4, r6, lsl #2
     c68:	sub	r6, r6, #1
     c6c:	ldr	r1, [r3, #140]	; 0x8c
     c70:	ldr	r2, [r3, #272]	; 0x110
     c74:	ldr	r3, [r1, #20]
     c78:	ldr	r0, [r3, r2, lsl #2]
     c7c:	cmp	r0, #0
     c80:	beq	df0 <end_element_handler+0x1f4>
     c84:	ldr	r3, [r0, #4]
     c88:	ldr	r6, [r3, #8]
     c8c:	cmp	r6, #1
     c90:	bne	f5c <end_element_handler+0x360>
     c94:	ldr	r3, [r3]
     c98:	cmp	r3, #2
     c9c:	bne	f5c <end_element_handler+0x360>
     ca0:	mov	r1, r5
     ca4:	bl	0 <coda_mem_array_add_element>
     ca8:	cmp	r0, #0
     cac:	bne	ec0 <end_element_handler+0x2c4>
     cb0:	ldr	r6, [r4, #12]
     cb4:	sub	r6, r6, #1
     cb8:	mov	r3, #0
     cbc:	str	r6, [r4, #12]
     cc0:	str	r3, [r4, #536]	; 0x218
     cc4:	add	sp, sp, #12
     cc8:	ldrd	r4, [sp]
     ccc:	ldrd	r6, [sp, #8]
     cd0:	ldrd	r8, [sp, #16]
     cd4:	add	sp, sp, #24
     cd8:	pop	{pc}		; (ldr pc, [sp], #4)
     cdc:	ldr	r0, [r0, #544]	; 0x220
     ce0:	bl	a1c <is_whitespace>
     ce4:	subs	r9, r0, #0
     ce8:	bne	c44 <end_element_handler+0x48>
     cec:	cmp	r8, #0
     cf0:	beq	fcc <end_element_handler+0x3d0>
     cf4:	ldr	r3, [r5, #4]
     cf8:	ldr	r3, [r3, #48]	; 0x30
     cfc:	cmp	r3, #0
     d00:	bgt	edc <end_element_handler+0x2e0>
     d04:	ldr	r3, [r5, #12]
     d08:	str	r3, [r4, #528]	; 0x210
     d0c:	ldr	r6, [r7, #16]
     d10:	ldr	r3, [r6]
     d14:	ldr	r2, [r3, #8]
     d18:	str	r9, [r5, #12]
     d1c:	cmp	r2, #0
     d20:	bne	f94 <end_element_handler+0x398>
     d24:	ldr	r0, [r3]
     d28:	cmp	r0, #2
     d2c:	bne	f94 <end_element_handler+0x398>
     d30:	bl	0 <coda_type_text_new>
     d34:	subs	r5, r0, #0
     d38:	beq	ea8 <end_element_handler+0x2ac>
     d3c:	ldr	r0, [r6]
     d40:	ldr	r3, [r0, #36]	; 0x24
     d44:	cmp	r3, #0
     d48:	beq	d5c <end_element_handler+0x160>
     d4c:	ldr	r2, [r3, #4]
     d50:	str	r3, [r5, #36]	; 0x24
     d54:	add	r2, r2, #1
     d58:	str	r2, [r3, #4]
     d5c:	bl	0 <coda_type_release>
     d60:	ldr	r3, [r4, #12]
     d64:	add	r3, r3, #36	; 0x24
     d68:	ldr	r0, [r4, r3, lsl #2]
     d6c:	str	r5, [r6]
     d70:	bl	0 <coda_dynamic_type_delete>
     d74:	ldr	r6, [r4, #12]
     d78:	mov	r2, #0
     d7c:	add	r3, r6, #36	; 0x24
     d80:	str	r2, [r4, r3, lsl #2]
     d84:	add	r6, r6, #4
     d88:	ldr	r3, [r4, r6, lsl #2]
     d8c:	ldr	r5, [r3]
     d90:	ldr	r3, [r5, #8]
     d94:	cmp	r3, #6
     d98:	bne	e84 <end_element_handler+0x288>
     d9c:	ldr	r1, [r4, #532]	; 0x214
     da0:	cmp	r1, #0
     da4:	bne	fb0 <end_element_handler+0x3b4>
     da8:	ldr	r2, [r4, #8]
     dac:	ldr	ip, [r4, #544]	; 0x220
     db0:	ldr	r0, [r5, #44]	; 0x2c
     db4:	ldr	r3, [r4, #536]	; 0x218
     db8:	str	ip, [sp]
     dbc:	bl	0 <coda_mem_data_new>
     dc0:	subs	r6, r0, #0
     dc4:	beq	f24 <end_element_handler+0x328>
     dc8:	mov	r0, r5
     dcc:	mov	r2, r6
     dd0:	ldr	r1, [r4, #528]	; 0x210
     dd4:	bl	0 <coda_mem_time_new>
     dd8:	subs	r5, r0, #0
     ddc:	beq	f3c <end_element_handler+0x340>
     de0:	mov	r3, #0
     de4:	ldr	r6, [r4, #12]
     de8:	str	r3, [r4, #528]	; 0x210
     dec:	b	c64 <end_element_handler+0x68>
     df0:	str	r5, [r3, r2, lsl #2]
     df4:	b	cb8 <end_element_handler+0xbc>
     df8:	mov	r0, r5
     dfc:	bl	0 <coda_mem_record_validate>
     e00:	subs	r7, r0, #0
     e04:	bne	f0c <end_element_handler+0x310>
     e08:	ldr	r6, [r4, #12]
     e0c:	add	r3, r6, #36	; 0x24
     e10:	mov	r2, r6
     e14:	ldr	r5, [r4, r3, lsl #2]
     e18:	ldr	r1, [r5, #16]
     e1c:	cmp	r1, #0
     e20:	bgt	e44 <end_element_handler+0x248>
     e24:	b	c50 <end_element_handler+0x54>
     e28:	add	r3, r2, #36	; 0x24
     e2c:	add	r7, r7, #1
     e30:	ldr	r5, [r4, r3, lsl #2]
     e34:	mov	r6, r2
     e38:	ldr	r1, [r5, #16]
     e3c:	cmp	r7, r1
     e40:	bge	c50 <end_element_handler+0x54>
     e44:	ldr	r3, [r5, #20]
     e48:	ldr	r0, [r3, r7, lsl #2]
     e4c:	cmp	r0, #0
     e50:	beq	e28 <end_element_handler+0x22c>
     e54:	ldr	r3, [r0, #4]
     e58:	ldr	r5, [r3, #8]
     e5c:	cmp	r5, #1
     e60:	bne	e28 <end_element_handler+0x22c>
     e64:	ldr	r3, [r3]
     e68:	cmp	r3, #2
     e6c:	bne	e28 <end_element_handler+0x22c>
     e70:	bl	0 <coda_mem_array_validate>
     e74:	cmp	r0, #0
     e78:	bne	f48 <end_element_handler+0x34c>
     e7c:	ldr	r2, [r4, #12]
     e80:	b	e28 <end_element_handler+0x22c>
     e84:	mov	r0, r5
     e88:	ldr	r2, [r4, #8]
     e8c:	ldr	r3, [r4, #544]	; 0x220
     e90:	ldr	r1, [r4, #528]	; 0x210
     e94:	str	r3, [sp]
     e98:	ldr	r3, [r4, #536]	; 0x218
     e9c:	bl	0 <coda_mem_data_new>
     ea0:	subs	r5, r0, #0
     ea4:	bne	de0 <end_element_handler+0x1e4>
     ea8:	mov	r1, r5
     eac:	ldr	r0, [r4]
     eb0:	bl	0 <coda_XML_StopParser>
     eb4:	mov	r3, #1
     eb8:	str	r3, [r4, #4]
     ebc:	b	cc4 <end_element_handler+0xc8>
     ec0:	mov	r0, r5
     ec4:	bl	0 <coda_dynamic_type_delete>
     ec8:	mov	r1, #0
     ecc:	ldr	r0, [r4]
     ed0:	bl	0 <coda_XML_StopParser>
     ed4:	str	r6, [r4, #4]
     ed8:	b	cc4 <end_element_handler+0xc8>
     edc:	movw	r1, #0
     ee0:	movt	r1, #0
     ee4:	ldr	r2, [r7, #400]	; 0x190
     ee8:	movw	r0, #65236	; 0xfed4
     eec:	movt	r0, #65535	; 0xffff
     ef0:	bl	0 <coda_set_error>
     ef4:	mov	r1, r9
     ef8:	ldr	r0, [r4]
     efc:	bl	0 <coda_XML_StopParser>
     f00:	mov	r3, #1
     f04:	str	r3, [r4, #4]
     f08:	b	cc4 <end_element_handler+0xc8>
     f0c:	mov	r1, r8
     f10:	ldr	r0, [r4]
     f14:	bl	0 <coda_XML_StopParser>
     f18:	mov	r3, #1
     f1c:	str	r3, [r4, #4]
     f20:	b	cc4 <end_element_handler+0xc8>
     f24:	mov	r1, r6
     f28:	ldr	r0, [r4]
     f2c:	bl	0 <coda_XML_StopParser>
     f30:	mov	r3, #1
     f34:	str	r3, [r4, #4]
     f38:	b	cc4 <end_element_handler+0xc8>
     f3c:	mov	r0, r6
     f40:	bl	0 <coda_dynamic_type_delete>
     f44:	b	ea8 <end_element_handler+0x2ac>
     f48:	mov	r1, #0
     f4c:	ldr	r0, [r4]
     f50:	bl	0 <coda_XML_StopParser>
     f54:	str	r5, [r4, #4]
     f58:	b	cc4 <end_element_handler+0xc8>
     f5c:	movw	r1, #0
     f60:	movt	r1, #0
     f64:	ldr	r3, [pc, #124]	; fe8 <end_element_handler+0x3ec>
     f68:	movw	r0, #0
     f6c:	movt	r0, #0
     f70:	movw	r2, #693	; 0x2b5
     f74:	bl	0 <__assert_fail>
     f78:	movw	r1, #0
     f7c:	movt	r1, #0
     f80:	ldr	r3, [pc, #96]	; fe8 <end_element_handler+0x3ec>
     f84:	movw	r0, #0
     f88:	movt	r0, #0
     f8c:	movw	r2, #685	; 0x2ad
     f90:	bl	0 <__assert_fail>
     f94:	movw	r1, #0
     f98:	movt	r1, #0
     f9c:	ldr	r3, [pc, #72]	; fec <end_element_handler+0x3f0>
     fa0:	movw	r0, #0
     fa4:	movt	r0, #0
     fa8:	mov	r2, #70	; 0x46
     fac:	bl	0 <__assert_fail>
     fb0:	movw	r1, #0
     fb4:	movt	r1, #0
     fb8:	ldr	r3, [pc, #40]	; fe8 <end_element_handler+0x3ec>
     fbc:	movw	r0, #0
     fc0:	movt	r0, #0
     fc4:	movw	r2, #619	; 0x26b
     fc8:	bl	0 <__assert_fail>
     fcc:	movw	r1, #0
     fd0:	movt	r1, #0
     fd4:	ldr	r3, [pc, #12]	; fe8 <end_element_handler+0x3ec>
     fd8:	movw	r0, #0
     fdc:	movt	r0, #0
     fe0:	movw	r2, #590	; 0x24e
     fe4:	bl	0 <__assert_fail>
     fe8:	.word	0x00000040
     fec:	.word	0x00000054

00000ff0 <coda_xml_parse>:
     ff0:	strd	r4, [sp, #-36]!	; 0xffffffdc
     ff4:	mov	r4, #0
     ff8:	mvn	r5, #0
     ffc:	strd	r6, [sp, #8]
    1000:	mov	r1, #32
    1004:	strd	r8, [sp, #16]
    1008:	mov	r8, r0
    100c:	mov	r0, r4
    1010:	strd	sl, [sp, #24]
    1014:	str	lr, [sp, #32]
    1018:	sub	sp, sp, #8768	; 0x2240
    101c:	sub	sp, sp, #12
    1020:	str	r4, [sp, #36]	; 0x24
    1024:	str	r4, [sp, #40]	; 0x28
    1028:	strd	r4, [sp, #44]	; 0x2c
    102c:	str	r4, [sp, #564]	; 0x234
    1030:	str	r4, [sp, #568]	; 0x238
    1034:	str	r4, [sp, #572]	; 0x23c
    1038:	str	r4, [sp, #576]	; 0x240
    103c:	str	r4, [sp, #580]	; 0x244
    1040:	bl	0 <coda_XML_ParserCreateNS>
    1044:	cmp	r0, r4
    1048:	str	r0, [sp, #36]	; 0x24
    104c:	beq	13a4 <coda_xml_parse+0x3b4>
    1050:	ldr	r3, [r8, #24]
    1054:	str	r8, [sp, #44]	; 0x2c
    1058:	cmp	r3, #0
    105c:	beq	120c <coda_xml_parse+0x21c>
    1060:	ldr	r0, [r3, #28]
    1064:	cmp	r0, #0
    1068:	beq	120c <coda_xml_parse+0x21c>
    106c:	ldr	r1, [r0, #8]
    1070:	str	r4, [sp, #568]	; 0x238
    1074:	cmp	r1, #0
    1078:	bne	13cc <coda_xml_parse+0x3dc>
    107c:	bl	0 <coda_mem_record_new>
    1080:	str	r0, [sp, #180]	; 0xb4
    1084:	cmp	r0, #0
    1088:	addeq	r3, sp, #36	; 0x24
    108c:	streq	r3, [sp]
    1090:	beq	1348 <coda_xml_parse+0x358>
    1094:	add	r2, sp, #36	; 0x24
    1098:	add	r3, r0, #4
    109c:	ldr	r0, [sp, #36]	; 0x24
    10a0:	mov	r1, r2
    10a4:	mov	r5, #0
    10a8:	mvn	r2, #0
    10ac:	str	r1, [sp]
    10b0:	str	r5, [sp, #48]	; 0x30
    10b4:	str	r3, [sp, #52]	; 0x34
    10b8:	str	r2, [sp, #308]	; 0x134
    10bc:	str	r5, [sp, #436]	; 0x1b4
    10c0:	bl	0 <coda_XML_SetUserData>
    10c4:	mov	r1, #2
    10c8:	ldr	r0, [sp, #36]	; 0x24
    10cc:	bl	0 <coda_XML_SetParamEntityParsing>
    10d0:	movw	r2, #0
    10d4:	movt	r2, #0
    10d8:	ldr	r0, [sp, #36]	; 0x24
    10dc:	movw	r1, #0
    10e0:	movt	r1, #0
    10e4:	bl	0 <coda_XML_SetElementHandler>
    10e8:	movw	r1, #0
    10ec:	movt	r1, #0
    10f0:	ldr	r0, [sp, #36]	; 0x24
    10f4:	bl	0 <coda_XML_SetCharacterDataHandler>
    10f8:	movw	r1, #0
    10fc:	movt	r1, #0
    1100:	ldr	r0, [sp, #36]	; 0x24
    1104:	bl	0 <coda_XML_SetNotStandaloneHandler>
    1108:	ldr	ip, [r8, #52]	; 0x34
    110c:	mov	r2, r5
    1110:	ldrd	r0, [ip, #8]
    1114:	asr	r3, r1, #31
    1118:	ubfx	r3, r3, #0, #13
    111c:	adds	r5, r3, r0
    1120:	lsr	r5, r5, #13
    1124:	adc	r3, r2, r1
    1128:	orr	r5, r5, r3, lsl #19
    112c:	lsl	r2, r5, #13
    1130:	asr	r3, r2, #31
    1134:	cmp	r2, r0
    1138:	sbcs	r3, r3, r1
    113c:	addlt	r5, r5, #1
    1140:	cmp	r5, #0
    1144:	ble	12d4 <coda_xml_parse+0x2e4>
    1148:	sub	r7, r5, #1
    114c:	mov	r4, #0
    1150:	lsl	sl, r7, #13
    1154:	mov	r9, r4
    1158:	mrc	15, 0, r6, cr13, cr0, {3}
    115c:	b	11c4 <coda_xml_parse+0x1d4>
    1160:	cmp	r7, r4
    1164:	ldr	r1, [ip, #48]	; 0x30
    1168:	movgt	r2, #8192	; 0x2000
    116c:	ldrle	r2, [ip, #8]
    1170:	add	r1, r1, fp
    1174:	suble	r2, r2, sl
    1178:	ldr	ip, [pc, #616]	; 13e8 <coda_xml_parse+0x3f8>
    117c:	sub	r3, r7, r4
    1180:	clz	r3, r3
    1184:	lsr	r3, r3, #5
    1188:	ldr	r0, [sp, #36]	; 0x24
    118c:	ldr	ip, [pc, ip]
    1190:	str	r9, [r6, ip]
    1194:	bl	0 <coda_XML_Parse>
    1198:	cmp	r0, #0
    119c:	beq	1240 <coda_xml_parse+0x250>
    11a0:	ldr	r3, [pc, #580]	; 13ec <coda_xml_parse+0x3fc>
    11a4:	ldr	r3, [pc, r3]
    11a8:	ldr	r3, [r6, r3]
    11ac:	cmp	r3, #0
    11b0:	bne	1274 <coda_xml_parse+0x284>
    11b4:	add	r4, r4, #1
    11b8:	cmp	r5, r4
    11bc:	beq	12d4 <coda_xml_parse+0x2e4>
    11c0:	ldr	ip, [r8, #52]	; 0x34
    11c4:	lsl	fp, r4, #13
    11c8:	ldr	r2, [ip, #52]	; 0x34
    11cc:	cmp	r2, #0
    11d0:	bne	1160 <coda_xml_parse+0x170>
    11d4:	mov	r1, fp
    11d8:	ldr	r0, [ip, #56]	; 0x38
    11dc:	bl	0 <lseek>
    11e0:	cmp	r0, #0
    11e4:	blt	1358 <coda_xml_parse+0x368>
    11e8:	ldr	r3, [r8, #52]	; 0x34
    11ec:	mov	r2, #8192	; 0x2000
    11f0:	add	r1, sp, #584	; 0x248
    11f4:	ldr	r0, [r3, #56]	; 0x38
    11f8:	bl	0 <read>
    11fc:	subs	r2, r0, #0
    1200:	blt	1328 <coda_xml_parse+0x338>
    1204:	add	r1, sp, #584	; 0x248
    1208:	b	1178 <coda_xml_parse+0x188>
    120c:	mov	r3, #1
    1210:	mov	r0, #2
    1214:	str	r3, [sp, #568]	; 0x238
    1218:	bl	0 <coda_type_record_new>
    121c:	subs	r4, r0, #0
    1220:	beq	13bc <coda_xml_parse+0x3cc>
    1224:	mov	r1, #0
    1228:	bl	0 <coda_mem_record_new>
    122c:	str	r0, [sp, #180]	; 0xb4
    1230:	mov	r0, r4
    1234:	bl	0 <coda_type_release>
    1238:	ldr	r0, [sp, #180]	; 0xb4
    123c:	b	1084 <coda_xml_parse+0x94>
    1240:	ldr	r3, [pc, #424]	; 13f0 <coda_xml_parse+0x400>
    1244:	ldr	r0, [sp, #36]	; 0x24
    1248:	ldr	r3, [pc, r3]
    124c:	ldr	r3, [r6, r3]
    1250:	cmp	r3, #0
    1254:	bne	1278 <coda_xml_parse+0x288>
    1258:	bl	0 <coda_XML_GetErrorCode>
    125c:	bl	0 <coda_XML_ErrorString>
    1260:	mov	r2, r0
    1264:	movw	r1, #0
    1268:	movt	r1, #0
    126c:	mvn	r0, #13
    1270:	bl	0 <coda_set_error>
    1274:	ldr	r0, [sp, #36]	; 0x24
    1278:	add	r3, sp, #12
    127c:	str	r3, [sp, #4]
    1280:	bl	0 <coda_XML_GetCurrentByteIndex>
    1284:	ldr	r2, [sp, #4]
    1288:	bl	0 <coda_str64>
    128c:	ldr	r0, [sp, #36]	; 0x24
    1290:	bl	0 <coda_XML_GetCurrentLineNumber>
    1294:	mov	r1, r0
    1298:	movw	r0, #0
    129c:	movt	r0, #0
    12a0:	ldr	r2, [sp, #4]
    12a4:	bl	0 <coda_add_error_message>
    12a8:	ldr	r0, [sp]
    12ac:	bl	988 <parser_info_cleanup>
    12b0:	mvn	r0, #0
    12b4:	add	sp, sp, #8768	; 0x2240
    12b8:	add	sp, sp, #12
    12bc:	ldrd	r4, [sp]
    12c0:	ldrd	r6, [sp, #8]
    12c4:	ldrd	r8, [sp, #16]
    12c8:	ldrd	sl, [sp, #24]
    12cc:	add	sp, sp, #32
    12d0:	pop	{pc}		; (ldr pc, [sp], #4)
    12d4:	ldr	r0, [sp, #36]	; 0x24
    12d8:	bl	0 <coda_XML_ParserFree>
    12dc:	ldr	r3, [sp, #568]	; 0x238
    12e0:	mov	r2, #0
    12e4:	str	r2, [sp, #36]	; 0x24
    12e8:	cmp	r3, r2
    12ec:	beq	1308 <coda_xml_parse+0x318>
    12f0:	ldr	r3, [sp, #180]	; 0xb4
    12f4:	add	r0, sp, #180	; 0xb4
    12f8:	ldr	r1, [r3, #4]
    12fc:	bl	0 <coda_mem_type_update>
    1300:	cmp	r0, #0
    1304:	bne	1348 <coda_xml_parse+0x358>
    1308:	mvn	r2, #0
    130c:	ldr	r0, [sp]
    1310:	ldr	r3, [sp, #180]	; 0xb4
    1314:	str	r2, [sp, #48]	; 0x30
    1318:	str	r3, [r8, #20]
    131c:	bl	988 <parser_info_cleanup>
    1320:	mov	r0, #0
    1324:	b	12b4 <coda_xml_parse+0x2c4>
    1328:	bl	0 <__errno_location>
    132c:	ldr	r0, [r0]
    1330:	bl	0 <strerror>
    1334:	mov	r2, r0
    1338:	movw	r1, #0
    133c:	movt	r1, #0
    1340:	mvn	r0, #21
    1344:	bl	0 <coda_set_error>
    1348:	ldr	r0, [sp]
    134c:	bl	988 <parser_info_cleanup>
    1350:	mvn	r0, #0
    1354:	b	12b4 <coda_xml_parse+0x2c4>
    1358:	add	r3, sp, #12
    135c:	asr	r1, fp, #31
    1360:	mov	r0, fp
    1364:	mov	r2, r3
    1368:	str	r3, [sp, #4]
    136c:	bl	0 <coda_str64>
    1370:	bl	0 <__errno_location>
    1374:	ldr	r0, [r0]
    1378:	bl	0 <strerror>
    137c:	mov	r3, r0
    1380:	movw	r1, #0
    1384:	movt	r1, #0
    1388:	mvn	r0, #21
    138c:	ldr	r2, [sp, #4]
    1390:	bl	0 <coda_set_error>
    1394:	ldr	r0, [sp]
    1398:	bl	988 <parser_info_cleanup>
    139c:	mvn	r0, #0
    13a0:	b	12b4 <coda_xml_parse+0x2c4>
    13a4:	mvn	r0, #13
    13a8:	movw	r1, #0
    13ac:	movt	r1, #0
    13b0:	bl	0 <coda_set_error>
    13b4:	mov	r0, r5
    13b8:	b	12b4 <coda_xml_parse+0x2c4>
    13bc:	ldr	r0, [sp, #36]	; 0x24
    13c0:	bl	0 <coda_XML_ParserFree>
    13c4:	mvn	r0, #0
    13c8:	b	12b4 <coda_xml_parse+0x2c4>
    13cc:	movw	r1, #0
    13d0:	movt	r1, #0
    13d4:	ldr	r3, [pc, #24]	; 13f4 <coda_xml_parse+0x404>
    13d8:	movw	r0, #0
    13dc:	movt	r0, #0
    13e0:	movw	r2, #774	; 0x306
    13e4:	bl	0 <__assert_fail>
    13e8:	.word	0x00000254
    13ec:	.word	0x00000240
    13f0:	.word	0x000001a0
    13f4:	.word	0x00000064
