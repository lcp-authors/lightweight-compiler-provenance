
../compcert-repos/stcorp-coda-3a25f25/codafind:     file format elf32-littlearm


Disassembly of section .init:

000108ac <.init>:
   108ac:	push	{r3, lr}
   108b0:	bl	10cf4 <_start@@Base+0x3c>
   108b4:	pop	{r3, pc}

Disassembly of section .plt:

000108b8 <coda_match_filefilter@plt-0x14>:
   108b8:	push	{lr}		; (str lr, [sp, #-4]!)
   108bc:	ldr	lr, [pc, #4]	; 108c8 <coda_match_filefilter@plt-0x4>
   108c0:	add	lr, pc, lr
   108c4:	ldr	pc, [lr, #8]!
   108c8:	andeq	r1, r1, r8, lsr r7

000108cc <coda_match_filefilter@plt>:
   108cc:	add	ip, pc, #0, 12
   108d0:	add	ip, ip, #69632	; 0x11000
   108d4:	ldr	pc, [ip, #1848]!	; 0x738

000108d8 <strcmp@plt>:
   108d8:	add	ip, pc, #0, 12
   108dc:	add	ip, ip, #69632	; 0x11000
   108e0:	ldr	pc, [ip, #1840]!	; 0x730

000108e4 <printf@plt>:
   108e4:	add	ip, pc, #0, 12
   108e8:	add	ip, ip, #69632	; 0x11000
   108ec:	ldr	pc, [ip, #1832]!	; 0x728

000108f0 <coda_set_definition_path_conditional@plt>:
   108f0:	add	ip, pc, #0, 12
   108f4:	add	ip, ip, #69632	; 0x11000
   108f8:	ldr	pc, [ip, #1824]!	; 0x720

000108fc <coda_set_definition_path@plt>:
   108fc:	add	ip, pc, #0, 12
   10900:	add	ip, ip, #69632	; 0x11000
   10904:	ldr	pc, [ip, #1816]!	; 0x718

00010908 <fwrite@plt>:
   10908:	add	ip, pc, #0, 12
   1090c:	add	ip, ip, #69632	; 0x11000
   10910:	ldr	pc, [ip, #1808]!	; 0x710

00010914 <coda_done@plt>:
   10914:	add	ip, pc, #0, 12
   10918:	add	ip, ip, #69632	; 0x11000
   1091c:	ldr	pc, [ip, #1800]!	; 0x708

00010920 <puts@plt>:
   10920:	add	ip, pc, #0, 12
   10924:	add	ip, ip, #69632	; 0x11000
   10928:	ldr	pc, [ip, #1792]!	; 0x700

0001092c <__libc_start_main@plt>:
   1092c:	add	ip, pc, #0, 12
   10930:	add	ip, ip, #69632	; 0x11000
   10934:	ldr	pc, [ip, #1784]!	; 0x6f8

00010938 <__gmon_start__@plt>:
   10938:	add	ip, pc, #0, 12
   1093c:	add	ip, ip, #69632	; 0x11000
   10940:	ldr	pc, [ip, #1776]!	; 0x6f0

00010944 <exit@plt>:
   10944:	add	ip, pc, #0, 12
   10948:	add	ip, ip, #69632	; 0x11000
   1094c:	ldr	pc, [ip, #1768]!	; 0x6e8

00010950 <fprintf@plt>:
   10950:	add	ip, pc, #0, 12
   10954:	add	ip, ip, #69632	; 0x11000
   10958:	ldr	pc, [ip, #1760]!	; 0x6e0

0001095c <coda_init@plt>:
   1095c:	add	ip, pc, #0, 12
   10960:	add	ip, ip, #69632	; 0x11000
   10964:	ldr	pc, [ip, #1752]!	; 0x6d8

00010968 <coda_set_option_perform_conversions@plt>:
   10968:	add	ip, pc, #0, 12
   1096c:	add	ip, ip, #69632	; 0x11000
   10970:	ldr	pc, [ip, #1744]!	; 0x6d0

00010974 <putchar@plt>:
   10974:	add	ip, pc, #0, 12
   10978:	add	ip, ip, #69632	; 0x11000
   1097c:	ldr	pc, [ip, #1736]!	; 0x6c8

00010980 <coda_errno_to_string@plt>:
   10980:	add	ip, pc, #0, 12
   10984:	add	ip, ip, #69632	; 0x11000
   10988:	ldr	pc, [ip, #1728]!	; 0x6c0

0001098c <coda_get_libcoda_version@plt>:
   1098c:	add	ip, pc, #0, 12
   10990:	add	ip, ip, #69632	; 0x11000
   10994:	ldr	pc, [ip, #1720]!	; 0x6b8

00010998 <coda_get_errno@plt>:
   10998:	add	ip, pc, #0, 12
   1099c:	add	ip, ip, #69632	; 0x11000
   109a0:	ldr	pc, [ip, #1712]!	; 0x6b0

000109a4 <abort@plt>:
   109a4:	add	ip, pc, #0, 12
   109a8:	add	ip, ip, #69632	; 0x11000
   109ac:	ldr	pc, [ip, #1704]!	; 0x6a8

000109b0 <__assert_fail@plt>:
   109b0:	add	ip, pc, #0, 12
   109b4:	add	ip, ip, #69632	; 0x11000
   109b8:	ldr	pc, [ip, #1696]!	; 0x6a0

Disassembly of section .text:

000109bc <main@@Base>:
   109bc:	ldr	r2, [pc, #680]	; 10c6c <main@@Base+0x2b0>
   109c0:	mov	r3, #0
   109c4:	cmp	r0, #1
   109c8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   109cc:	sub	sp, sp, #20
   109d0:	str	r3, [r2]
   109d4:	beq	10c0c <main@@Base+0x250>
   109d8:	ldr	r4, [r1, #4]
   109dc:	mov	r5, r0
   109e0:	mov	r6, r1
   109e4:	mov	r0, r4
   109e8:	ldr	r1, [pc, #640]	; 10c70 <main@@Base+0x2b4>
   109ec:	bl	108d8 <strcmp@plt>
   109f0:	cmp	r0, #0
   109f4:	beq	10c0c <main@@Base+0x250>
   109f8:	ldr	r1, [pc, #628]	; 10c74 <main@@Base+0x2b8>
   109fc:	mov	r0, r4
   10a00:	bl	108d8 <strcmp@plt>
   10a04:	cmp	r0, #0
   10a08:	beq	10c0c <main@@Base+0x250>
   10a0c:	ldr	r1, [pc, #612]	; 10c78 <main@@Base+0x2bc>
   10a10:	mov	r0, r4
   10a14:	bl	108d8 <strcmp@plt>
   10a18:	cmp	r0, #0
   10a1c:	beq	10c18 <main@@Base+0x25c>
   10a20:	ldr	r1, [pc, #596]	; 10c7c <main@@Base+0x2c0>
   10a24:	mov	r0, r4
   10a28:	bl	108d8 <strcmp@plt>
   10a2c:	cmp	r0, #0
   10a30:	beq	10c18 <main@@Base+0x25c>
   10a34:	cmp	r5, #2
   10a38:	ble	10a50 <main@@Base+0x94>
   10a3c:	mov	r0, r4
   10a40:	ldr	r1, [pc, #568]	; 10c80 <main@@Base+0x2c4>
   10a44:	bl	108d8 <strcmp@plt>
   10a48:	subs	r4, r0, #0
   10a4c:	beq	10bb8 <main@@Base+0x1fc>
   10a50:	ldr	r2, [pc, #556]	; 10c84 <main@@Base+0x2c8>
   10a54:	mov	r1, #0
   10a58:	ldr	r0, [r6]
   10a5c:	bl	108f0 <coda_set_definition_path_conditional@plt>
   10a60:	cmp	r0, #0
   10a64:	bne	10c40 <main@@Base+0x284>
   10a68:	cmp	r5, #1
   10a6c:	movle	r9, #1
   10a70:	strle	r0, [sp, #12]
   10a74:	movle	fp, r9
   10a78:	ble	10b3c <main@@Base+0x180>
   10a7c:	mov	fp, #1
   10a80:	mov	r3, #0
   10a84:	mov	r9, #1
   10a88:	str	r3, [sp, #12]
   10a8c:	ldr	r8, [pc, #500]	; 10c88 <main@@Base+0x2cc>
   10a90:	mov	sl, r3
   10a94:	b	10b08 <main@@Base+0x14c>
   10a98:	ldr	r1, [pc, #492]	; 10c8c <main@@Base+0x2d0>
   10a9c:	mov	r0, r4
   10aa0:	bl	108d8 <strcmp@plt>
   10aa4:	cmp	r0, #0
   10aa8:	beq	10b24 <main@@Base+0x168>
   10aac:	ldr	r1, [pc, #476]	; 10c90 <main@@Base+0x2d4>
   10ab0:	mov	r0, r4
   10ab4:	bl	108d8 <strcmp@plt>
   10ab8:	cmp	r0, #0
   10abc:	beq	10ad4 <main@@Base+0x118>
   10ac0:	ldr	r1, [pc, #460]	; 10c94 <main@@Base+0x2d8>
   10ac4:	mov	r0, r4
   10ac8:	bl	108d8 <strcmp@plt>
   10acc:	cmp	r0, #0
   10ad0:	bne	10b80 <main@@Base+0x1c4>
   10ad4:	add	r3, fp, #1
   10ad8:	cmp	r5, r3
   10adc:	ble	10b80 <main@@Base+0x1c4>
   10ae0:	add	r7, r6, r7
   10ae4:	ldr	r2, [r7, #4]
   10ae8:	ldrb	r1, [r2]
   10aec:	cmp	r1, #45	; 0x2d
   10af0:	movne	fp, r3
   10af4:	strne	r2, [sp, #12]
   10af8:	beq	10b80 <main@@Base+0x1c4>
   10afc:	add	fp, fp, #1
   10b00:	cmp	r5, fp
   10b04:	ble	10b34 <main@@Base+0x178>
   10b08:	ldr	r4, [r6, fp, lsl #2]
   10b0c:	mov	r1, r8
   10b10:	mov	r0, r4
   10b14:	bl	108d8 <strcmp@plt>
   10b18:	lsl	r7, fp, #2
   10b1c:	cmp	r0, #0
   10b20:	bne	10a98 <main@@Base+0xdc>
   10b24:	add	fp, fp, #1
   10b28:	cmp	r5, fp
   10b2c:	mov	r9, sl
   10b30:	bgt	10b08 <main@@Base+0x14c>
   10b34:	cmp	r5, fp
   10b38:	beq	10be8 <main@@Base+0x22c>
   10b3c:	bl	1095c <coda_init@plt>
   10b40:	subs	r4, r0, #0
   10b44:	bne	10c40 <main@@Base+0x284>
   10b48:	mov	r0, r9
   10b4c:	bl	10968 <coda_set_option_perform_conversions@plt>
   10b50:	str	r4, [sp]
   10b54:	add	r2, r6, fp, lsl #2
   10b58:	sub	r1, r5, fp
   10b5c:	ldr	r0, [sp, #12]
   10b60:	ldr	r3, [pc, #304]	; 10c98 <main@@Base+0x2dc>
   10b64:	bl	108cc <coda_match_filefilter@plt>
   10b68:	subs	r4, r0, #0
   10b6c:	bne	10c40 <main@@Base+0x284>
   10b70:	bl	10914 <coda_done@plt>
   10b74:	mov	r0, r4
   10b78:	add	sp, sp, #20
   10b7c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10b80:	ldr	r1, [pc, #276]	; 10c9c <main@@Base+0x2e0>
   10b84:	mov	r0, r4
   10b88:	bl	108d8 <strcmp@plt>
   10b8c:	cmp	r0, #0
   10b90:	beq	10ba8 <main@@Base+0x1ec>
   10b94:	ldr	r1, [pc, #260]	; 10ca0 <main@@Base+0x2e4>
   10b98:	mov	r0, r4
   10b9c:	bl	108d8 <strcmp@plt>
   10ba0:	cmp	r0, #0
   10ba4:	bne	10bdc <main@@Base+0x220>
   10ba8:	ldr	r3, [pc, #188]	; 10c6c <main@@Base+0x2b0>
   10bac:	mov	r2, #1
   10bb0:	str	r2, [r3]
   10bb4:	b	10afc <main@@Base+0x140>
   10bb8:	ldr	r0, [r6, #8]
   10bbc:	bl	108fc <coda_set_definition_path@plt>
   10bc0:	cmp	r5, #3
   10bc4:	streq	r4, [sp, #12]
   10bc8:	moveq	fp, r5
   10bcc:	moveq	r9, #1
   10bd0:	beq	10b34 <main@@Base+0x178>
   10bd4:	mov	fp, #3
   10bd8:	b	10a80 <main@@Base+0xc4>
   10bdc:	ldrb	r2, [r4]
   10be0:	cmp	r2, #45	; 0x2d
   10be4:	bne	10b34 <main@@Base+0x178>
   10be8:	ldr	r3, [pc, #180]	; 10ca4 <main@@Base+0x2e8>
   10bec:	mov	r2, #25
   10bf0:	mov	r1, #1
   10bf4:	ldr	r3, [r3]
   10bf8:	ldr	r0, [pc, #168]	; 10ca8 <main@@Base+0x2ec>
   10bfc:	bl	10908 <fwrite@plt>
   10c00:	bl	10de0 <_start@@Base+0x128>
   10c04:	mov	r0, #1
   10c08:	bl	10944 <exit@plt>
   10c0c:	bl	10de0 <_start@@Base+0x128>
   10c10:	mov	r0, #0
   10c14:	bl	10944 <exit@plt>
   10c18:	bl	1098c <coda_get_libcoda_version@plt>
   10c1c:	mov	r1, r0
   10c20:	ldr	r0, [pc, #132]	; 10cac <main@@Base+0x2f0>
   10c24:	bl	108e4 <printf@plt>
   10c28:	ldr	r0, [pc, #128]	; 10cb0 <main@@Base+0x2f4>
   10c2c:	bl	10920 <puts@plt>
   10c30:	mov	r0, #10
   10c34:	bl	10974 <putchar@plt>
   10c38:	mov	r0, #0
   10c3c:	bl	10944 <exit@plt>
   10c40:	ldr	r3, [pc, #92]	; 10ca4 <main@@Base+0x2e8>
   10c44:	ldr	r4, [r3]
   10c48:	bl	10998 <coda_get_errno@plt>
   10c4c:	ldr	r0, [r0]
   10c50:	bl	10980 <coda_errno_to_string@plt>
   10c54:	ldr	r1, [pc, #88]	; 10cb4 <main@@Base+0x2f8>
   10c58:	mov	r2, r0
   10c5c:	mov	r0, r4
   10c60:	bl	10950 <fprintf@plt>
   10c64:	mov	r0, #1
   10c68:	bl	10944 <exit@plt>
   10c6c:	andeq	r2, r2, r0, ror r0
   10c70:	andeq	r1, r1, r0, lsl #13
   10c74:	andeq	r1, r1, r4, lsl #13
   10c78:	andeq	r1, r1, ip, lsl #13
   10c7c:	muleq	r1, r0, r6
   10c80:	ldrdeq	r1, [r1], -ip
   10c84:	andeq	r1, r1, r0, ror #13
   10c88:	andeq	r1, r1, r8, lsl #14
   10c8c:			; <UNDEFINED> instruction: 0x000111b4
   10c90:	andeq	r1, r1, ip, lsl #14
   10c94:	andeq	r1, r1, r0, lsl r7
   10c98:	andeq	r0, r1, r0, lsr pc
   10c9c:	andeq	r1, r1, ip, lsl r7
   10ca0:	andeq	r1, r1, r0, lsr #14
   10ca4:	andeq	r2, r2, r8, rrx
   10ca8:	andeq	r1, r1, ip, lsr #14
   10cac:	muleq	r1, ip, r6
   10cb0:	andeq	r1, r1, ip, lsr #13
   10cb4:	strdeq	r1, [r1], -ip

00010cb8 <_start@@Base>:
   10cb8:	mov	fp, #0
   10cbc:	mov	lr, #0
   10cc0:	pop	{r1}		; (ldr r1, [sp], #4)
   10cc4:	mov	r2, sp
   10cc8:	push	{r2}		; (str r2, [sp, #-4]!)
   10ccc:	push	{r0}		; (str r0, [sp, #-4]!)
   10cd0:	ldr	ip, [pc, #16]	; 10ce8 <_start@@Base+0x30>
   10cd4:	push	{ip}		; (str ip, [sp, #-4]!)
   10cd8:	ldr	r0, [pc, #12]	; 10cec <_start@@Base+0x34>
   10cdc:	ldr	r3, [pc, #12]	; 10cf0 <_start@@Base+0x38>
   10ce0:	bl	1092c <__libc_start_main@plt>
   10ce4:	bl	109a4 <abort@plt>
   10ce8:	andeq	r1, r1, r0, asr #1
   10cec:			; <UNDEFINED> instruction: 0x000109bc
   10cf0:	andeq	r1, r1, r0, rrx
   10cf4:	ldr	r3, [pc, #20]	; 10d10 <_start@@Base+0x58>
   10cf8:	ldr	r2, [pc, #20]	; 10d14 <_start@@Base+0x5c>
   10cfc:	add	r3, pc, r3
   10d00:	ldr	r2, [r3, r2]
   10d04:	cmp	r2, #0
   10d08:	bxeq	lr
   10d0c:	b	10938 <__gmon_start__@plt>
   10d10:	strdeq	r1, [r1], -ip
   10d14:	andeq	r0, r0, ip, asr r0
   10d18:	ldr	r3, [pc, #28]	; 10d3c <_start@@Base+0x84>
   10d1c:	ldr	r0, [pc, #28]	; 10d40 <_start@@Base+0x88>
   10d20:	sub	r3, r3, r0
   10d24:	cmp	r3, #6
   10d28:	bxls	lr
   10d2c:	ldr	r3, [pc, #16]	; 10d44 <_start@@Base+0x8c>
   10d30:	cmp	r3, #0
   10d34:	bxeq	lr
   10d38:	bx	r3
   10d3c:	andeq	r2, r2, fp, rrx
   10d40:	andeq	r2, r2, r8, rrx
   10d44:	andeq	r0, r0, r0
   10d48:	ldr	r1, [pc, #36]	; 10d74 <_start@@Base+0xbc>
   10d4c:	ldr	r0, [pc, #36]	; 10d78 <_start@@Base+0xc0>
   10d50:	sub	r1, r1, r0
   10d54:	asr	r1, r1, #2
   10d58:	add	r1, r1, r1, lsr #31
   10d5c:	asrs	r1, r1, #1
   10d60:	bxeq	lr
   10d64:	ldr	r3, [pc, #16]	; 10d7c <_start@@Base+0xc4>
   10d68:	cmp	r3, #0
   10d6c:	bxeq	lr
   10d70:	bx	r3
   10d74:	andeq	r2, r2, r8, rrx
   10d78:	andeq	r2, r2, r8, rrx
   10d7c:	andeq	r0, r0, r0
   10d80:	push	{r4, lr}
   10d84:	ldr	r4, [pc, #24]	; 10da4 <_start@@Base+0xec>
   10d88:	ldrb	r3, [r4]
   10d8c:	cmp	r3, #0
   10d90:	popne	{r4, pc}
   10d94:	bl	10d18 <_start@@Base+0x60>
   10d98:	mov	r3, #1
   10d9c:	strb	r3, [r4]
   10da0:	pop	{r4, pc}
   10da4:	andeq	r2, r2, ip, rrx
   10da8:	ldr	r0, [pc, #40]	; 10dd8 <_start@@Base+0x120>
   10dac:	ldr	r3, [r0]
   10db0:	cmp	r3, #0
   10db4:	bne	10dbc <_start@@Base+0x104>
   10db8:	b	10d48 <_start@@Base+0x90>
   10dbc:	ldr	r3, [pc, #24]	; 10ddc <_start@@Base+0x124>
   10dc0:	cmp	r3, #0
   10dc4:	beq	10db8 <_start@@Base+0x100>
   10dc8:	push	{r4, lr}
   10dcc:	blx	r3
   10dd0:	pop	{r4, lr}
   10dd4:	b	10d48 <_start@@Base+0x90>
   10dd8:	strdeq	r1, [r2], -ip
   10ddc:	andeq	r0, r0, r0
   10de0:	push	{r4, lr}
   10de4:	ldr	r0, [pc, #228]	; 10ed0 <_start@@Base+0x218>
   10de8:	bl	10920 <puts@plt>
   10dec:	ldr	r0, [pc, #224]	; 10ed4 <_start@@Base+0x21c>
   10df0:	bl	10920 <puts@plt>
   10df4:	ldr	r0, [pc, #220]	; 10ed8 <_start@@Base+0x220>
   10df8:	bl	10920 <puts@plt>
   10dfc:	ldr	r0, [pc, #216]	; 10edc <_start@@Base+0x224>
   10e00:	bl	10920 <puts@plt>
   10e04:	mov	r0, #10
   10e08:	bl	10974 <putchar@plt>
   10e0c:	ldr	r0, [pc, #204]	; 10ee0 <_start@@Base+0x228>
   10e10:	bl	10920 <puts@plt>
   10e14:	ldr	r0, [pc, #200]	; 10ee4 <_start@@Base+0x22c>
   10e18:	bl	10920 <puts@plt>
   10e1c:	ldr	r0, [pc, #196]	; 10ee8 <_start@@Base+0x230>
   10e20:	bl	10920 <puts@plt>
   10e24:	ldr	r0, [pc, #192]	; 10eec <_start@@Base+0x234>
   10e28:	bl	10920 <puts@plt>
   10e2c:	ldr	r0, [pc, #188]	; 10ef0 <_start@@Base+0x238>
   10e30:	bl	10920 <puts@plt>
   10e34:	ldr	r0, [pc, #184]	; 10ef4 <_start@@Base+0x23c>
   10e38:	bl	10920 <puts@plt>
   10e3c:	ldr	r0, [pc, #180]	; 10ef8 <_start@@Base+0x240>
   10e40:	bl	10920 <puts@plt>
   10e44:	ldr	r0, [pc, #176]	; 10efc <_start@@Base+0x244>
   10e48:	bl	10920 <puts@plt>
   10e4c:	ldr	r0, [pc, #172]	; 10f00 <_start@@Base+0x248>
   10e50:	bl	10920 <puts@plt>
   10e54:	mov	r0, #10
   10e58:	bl	10974 <putchar@plt>
   10e5c:	ldr	r0, [pc, #160]	; 10f04 <_start@@Base+0x24c>
   10e60:	bl	10920 <puts@plt>
   10e64:	ldr	r0, [pc, #156]	; 10f08 <_start@@Base+0x250>
   10e68:	bl	10920 <puts@plt>
   10e6c:	mov	r0, #10
   10e70:	bl	10974 <putchar@plt>
   10e74:	ldr	r0, [pc, #144]	; 10f0c <_start@@Base+0x254>
   10e78:	bl	10920 <puts@plt>
   10e7c:	ldr	r0, [pc, #140]	; 10f10 <_start@@Base+0x258>
   10e80:	bl	10920 <puts@plt>
   10e84:	mov	r0, #10
   10e88:	bl	10974 <putchar@plt>
   10e8c:	ldr	r0, [pc, #128]	; 10f14 <_start@@Base+0x25c>
   10e90:	bl	10920 <puts@plt>
   10e94:	ldr	r0, [pc, #124]	; 10f18 <_start@@Base+0x260>
   10e98:	bl	10920 <puts@plt>
   10e9c:	ldr	r0, [pc, #120]	; 10f1c <_start@@Base+0x264>
   10ea0:	bl	10920 <puts@plt>
   10ea4:	ldr	r0, [pc, #116]	; 10f20 <_start@@Base+0x268>
   10ea8:	bl	10920 <puts@plt>
   10eac:	ldr	r0, [pc, #112]	; 10f24 <_start@@Base+0x26c>
   10eb0:	bl	10920 <puts@plt>
   10eb4:	ldr	r0, [pc, #108]	; 10f28 <_start@@Base+0x270>
   10eb8:	bl	10920 <puts@plt>
   10ebc:	ldr	r0, [pc, #104]	; 10f2c <_start@@Base+0x274>
   10ec0:	bl	10920 <puts@plt>
   10ec4:	mov	r0, #10
   10ec8:	pop	{r4, lr}
   10ecc:	b	10974 <putchar@plt>
   10ed0:	ldrdeq	r1, [r1], -ip
   10ed4:	andeq	r1, r1, r4, ror #1
   10ed8:	andeq	r1, r1, r8, lsr #2
   10edc:	andeq	r1, r1, r8, ror r1
   10ee0:	muleq	r1, r0, r1
   10ee4:	andeq	r1, r1, r4, lsr #3
   10ee8:	andeq	r1, r1, ip, asr #3
   10eec:	andeq	r1, r1, r8, lsl #4
   10ef0:	andeq	r1, r1, r8, lsr r2
   10ef4:	andeq	r1, r1, r0, lsl #5
   10ef8:	ldrdeq	r1, [r1], -r0
   10efc:	strdeq	r1, [r1], -ip
   10f00:	andeq	r1, r1, r8, lsl r3
   10f04:	andeq	r1, r1, r0, asr r3
   10f08:	andeq	r1, r1, r8, ror #6
   10f0c:	andeq	r1, r1, r8, lsl #7
   10f10:	andeq	r1, r1, r4, lsr #7
   10f14:	ldrdeq	r1, [r1], -r8
   10f18:	andeq	r1, r1, r8, lsr #8
   10f1c:	andeq	r1, r1, r4, ror r4
   10f20:	andeq	r1, r1, r0, lsr #9
   10f24:	andeq	r1, r1, ip, ror #9
   10f28:	andeq	r1, r1, r4, lsr r5
   10f2c:	andeq	r1, r1, r4, ror r5

00010f30 <callback@@Base>:
   10f30:	push	{r4, lr}
   10f34:	subs	r4, r1, #0
   10f38:	mov	r1, r0
   10f3c:	beq	10f70 <callback@@Base+0x40>
   10f40:	cmp	r4, #2
   10f44:	beq	10fc4 <callback@@Base+0x94>
   10f48:	cmp	r4, #1
   10f4c:	beq	10fdc <callback@@Base+0xac>
   10f50:	ldr	r3, [pc, #216]	; 11030 <callback@@Base+0x100>
   10f54:	ldr	r3, [r3]
   10f58:	cmp	r3, #0
   10f5c:	bne	10f90 <callback@@Base+0x60>
   10f60:	cmp	r4, #4
   10f64:	beq	10fbc <callback@@Base+0x8c>
   10f68:	mov	r0, #0
   10f6c:	pop	{r4, pc}
   10f70:	ldr	r0, [pc, #188]	; 11034 <callback@@Base+0x104>
   10f74:	mov	r3, r2
   10f78:	mov	r2, r1
   10f7c:	ldr	r0, [r0]
   10f80:	ldr	r1, [pc, #176]	; 11038 <callback@@Base+0x108>
   10f84:	bl	10950 <fprintf@plt>
   10f88:	mov	r0, #0
   10f8c:	pop	{r4, pc}
   10f90:	ldr	r0, [pc, #164]	; 1103c <callback@@Base+0x10c>
   10f94:	bl	108e4 <printf@plt>
   10f98:	cmp	r4, #5
   10f9c:	ldrls	pc, [pc, r4, lsl #2]
   10fa0:	b	10f68 <callback@@Base+0x38>
   10fa4:	andeq	r1, r1, ip, lsl r0
   10fa8:	andeq	r1, r1, ip, lsl r0
   10fac:	andeq	r1, r1, ip, lsl r0
   10fb0:	andeq	r1, r1, r0, lsl r0
   10fb4:	andeq	r1, r1, r4
   10fb8:	strdeq	r0, [r1], -r8
   10fbc:	bl	10920 <puts@plt>
   10fc0:	b	10f68 <callback@@Base+0x38>
   10fc4:	ldr	r3, [pc, #104]	; 11034 <callback@@Base+0x104>
   10fc8:	mov	r2, r0
   10fcc:	ldr	r1, [pc, #108]	; 11040 <callback@@Base+0x110>
   10fd0:	ldr	r0, [r3]
   10fd4:	bl	10950 <fprintf@plt>
   10fd8:	b	10f68 <callback@@Base+0x38>
   10fdc:	ldr	r0, [pc, #80]	; 11034 <callback@@Base+0x104>
   10fe0:	mov	r3, r2
   10fe4:	mov	r2, r1
   10fe8:	ldr	r0, [r0]
   10fec:	ldr	r1, [pc, #80]	; 11044 <callback@@Base+0x114>
   10ff0:	bl	10950 <fprintf@plt>
   10ff4:	b	10f68 <callback@@Base+0x38>
   10ff8:	ldr	r0, [pc, #72]	; 11048 <callback@@Base+0x118>
   10ffc:	bl	10920 <puts@plt>
   11000:	b	10f68 <callback@@Base+0x38>
   11004:	ldr	r0, [pc, #64]	; 1104c <callback@@Base+0x11c>
   11008:	bl	10920 <puts@plt>
   1100c:	b	10f68 <callback@@Base+0x38>
   11010:	ldr	r0, [pc, #56]	; 11050 <callback@@Base+0x120>
   11014:	bl	10920 <puts@plt>
   11018:	b	10f68 <callback@@Base+0x38>
   1101c:	ldr	r3, [pc, #48]	; 11054 <callback@@Base+0x124>
   11020:	mov	r2, #110	; 0x6e
   11024:	ldr	r1, [pc, #44]	; 11058 <callback@@Base+0x128>
   11028:	ldr	r0, [pc, #44]	; 1105c <callback@@Base+0x12c>
   1102c:	bl	109b0 <__assert_fail@plt>
   11030:	andeq	r2, r2, r0, ror r0
   11034:	andeq	r2, r2, r8, rrx
   11038:			; <UNDEFINED> instruction: 0x000115b4
   1103c:	strdeq	r1, [r1], -ip
   11040:			; <UNDEFINED> instruction: 0x000115bc
   11044:	ldrdeq	r1, [r1], -ip
   11048:	andeq	r1, r1, ip, ror #12
   1104c:	andeq	r1, r1, r8, ror r6
   11050:	andeq	r1, r1, r8, asr r6
   11054:	ldrdeq	r1, [r1], -r0
   11058:	andeq	r1, r1, r4, lsl #12
   1105c:	andeq	r1, r1, r4, asr r6

00011060 <__libc_csu_init@@Base>:
   11060:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   11064:	mov	r7, r0
   11068:	ldr	r6, [pc, #72]	; 110b8 <__libc_csu_init@@Base+0x58>
   1106c:	ldr	r5, [pc, #72]	; 110bc <__libc_csu_init@@Base+0x5c>
   11070:	add	r6, pc, r6
   11074:	add	r5, pc, r5
   11078:	sub	r6, r6, r5
   1107c:	mov	r8, r1
   11080:	mov	r9, r2
   11084:	bl	108ac <coda_match_filefilter@plt-0x20>
   11088:	asrs	r6, r6, #2
   1108c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   11090:	mov	r4, #0
   11094:	add	r4, r4, #1
   11098:	ldr	r3, [r5], #4
   1109c:	mov	r2, r9
   110a0:	mov	r1, r8
   110a4:	mov	r0, r7
   110a8:	blx	r3
   110ac:	cmp	r6, r4
   110b0:	bne	11094 <__libc_csu_init@@Base+0x34>
   110b4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   110b8:	andeq	r0, r1, r0, lsl #29
   110bc:	andeq	r0, r1, r8, ror lr

000110c0 <__libc_csu_fini@@Base>:
   110c0:	bx	lr

Disassembly of section .fini:

000110c4 <.fini>:
   110c4:	push	{r3, lr}
   110c8:	pop	{r3, pc}
