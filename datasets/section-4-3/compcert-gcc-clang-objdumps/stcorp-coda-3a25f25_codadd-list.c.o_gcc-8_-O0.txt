
../compcert-repos/stcorp-coda-3a25f25/CMakeFiles/codadd.dir/tools/codadd/codadd-list.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <print_path>:
   0:	str	fp, [sp, #-8]!
   4:	str	lr, [sp, #4]
   8:	add	fp, sp, #4
   c:	sub	sp, sp, #64	; 0x40
  10:	str	r0, [fp, #-64]	; 0xffffffc0
  14:	mov	r0, #47	; 0x2f
  18:	bl	0 <putchar>
  1c:	mov	r3, #0
  20:	str	r3, [fp, #-8]
  24:	b	224 <print_path+0x224>
  28:	ldr	r3, [fp, #-8]
  2c:	add	r2, r3, #1
  30:	movw	r3, #0
  34:	movt	r3, #0
  38:	ldr	r3, [r3, r2, lsl #2]
  3c:	cmn	r3, #1
  40:	bne	50 <print_path+0x50>
  44:	mov	r0, #64	; 0x40
  48:	bl	0 <putchar>
  4c:	b	218 <print_path+0x218>
  50:	movw	r3, #0
  54:	movt	r3, #0
  58:	ldr	r2, [fp, #-8]
  5c:	ldr	r3, [r3, r2, lsl #2]
  60:	str	r3, [fp, #-16]
  64:	ldr	r3, [fp, #-16]
  68:	ldr	r3, [r3, #8]
  6c:	cmp	r3, #0
  70:	beq	80 <print_path+0x80>
  74:	cmp	r3, #1
  78:	beq	e8 <print_path+0xe8>
  7c:	b	1f8 <print_path+0x1f8>
  80:	ldr	r3, [fp, #-8]
  84:	add	r2, r3, #1
  88:	movw	r3, #0
  8c:	movt	r3, #0
  90:	ldr	r3, [r3, r2, lsl #2]
  94:	sub	r2, fp, #20
  98:	mov	r1, r3
  9c:	ldr	r0, [fp, #-16]
  a0:	bl	0 <coda_type_get_record_field_name>
  a4:	ldr	r3, [fp, #-8]
  a8:	cmp	r3, #0
  ac:	ble	d0 <print_path+0xd0>
  b0:	movw	r3, #0
  b4:	movt	r3, #0
  b8:	ldr	r2, [fp, #-8]
  bc:	ldr	r3, [r3, r2, lsl #2]
  c0:	cmn	r3, #1
  c4:	beq	d0 <print_path+0xd0>
  c8:	mov	r0, #47	; 0x2f
  cc:	bl	0 <putchar>
  d0:	ldr	r3, [fp, #-20]	; 0xffffffec
  d4:	mov	r1, r3
  d8:	movw	r0, #0
  dc:	movt	r0, #0
  e0:	bl	0 <printf>
  e4:	b	218 <print_path+0x218>
  e8:	sub	r2, fp, #56	; 0x38
  ec:	sub	r3, fp, #24
  f0:	mov	r1, r3
  f4:	ldr	r0, [fp, #-16]
  f8:	bl	0 <coda_type_get_array_dim>
  fc:	mov	r0, #91	; 0x5b
 100:	bl	0 <putchar>
 104:	mov	r3, #0
 108:	str	r3, [fp, #-12]
 10c:	b	1dc <print_path+0x1dc>
 110:	ldr	r3, [fp, #-12]
 114:	cmp	r3, #0
 118:	ble	124 <print_path+0x124>
 11c:	mov	r0, #44	; 0x2c
 120:	bl	0 <putchar>
 124:	ldr	r3, [fp, #-12]
 128:	lsl	r3, r3, #2
 12c:	sub	r2, fp, #4
 130:	add	r3, r2, r3
 134:	ldr	r3, [r3, #-52]	; 0xffffffcc
 138:	cmp	r3, #0
 13c:	bge	1ac <print_path+0x1ac>
 140:	movw	r3, #0
 144:	movt	r3, #0
 148:	ldr	r3, [r3]
 14c:	cmp	r3, #0
 150:	beq	1a0 <print_path+0x1a0>
 154:	ldr	r2, [fp, #-16]
 158:	ldr	r3, [fp, #-12]
 15c:	add	r3, r3, #20
 160:	lsl	r3, r3, #2
 164:	add	r3, r2, r3
 168:	ldr	r3, [r3, #4]
 16c:	cmp	r3, #0
 170:	beq	1a0 <print_path+0x1a0>
 174:	ldr	r2, [fp, #-16]
 178:	ldr	r3, [fp, #-12]
 17c:	add	r3, r3, #20
 180:	lsl	r3, r3, #2
 184:	add	r3, r2, r3
 188:	ldr	r3, [r3, #4]
 18c:	movw	r1, #0
 190:	movt	r1, #0
 194:	mov	r0, r3
 198:	bl	0 <coda_expression_print>
 19c:	b	1d0 <print_path+0x1d0>
 1a0:	mov	r0, #63	; 0x3f
 1a4:	bl	0 <putchar>
 1a8:	b	1d0 <print_path+0x1d0>
 1ac:	ldr	r3, [fp, #-12]
 1b0:	lsl	r3, r3, #2
 1b4:	sub	r2, fp, #4
 1b8:	add	r3, r2, r3
 1bc:	ldr	r3, [r3, #-52]	; 0xffffffcc
 1c0:	mov	r1, r3
 1c4:	movw	r0, #0
 1c8:	movt	r0, #0
 1cc:	bl	0 <printf>
 1d0:	ldr	r3, [fp, #-12]
 1d4:	add	r3, r3, #1
 1d8:	str	r3, [fp, #-12]
 1dc:	ldr	r3, [fp, #-24]	; 0xffffffe8
 1e0:	ldr	r2, [fp, #-12]
 1e4:	cmp	r2, r3
 1e8:	blt	110 <print_path+0x110>
 1ec:	mov	r0, #93	; 0x5d
 1f0:	bl	0 <putchar>
 1f4:	b	218 <print_path+0x218>
 1f8:	movw	r3, #0
 1fc:	movt	r3, #0
 200:	mov	r2, #125	; 0x7d
 204:	movw	r1, #0
 208:	movt	r1, #0
 20c:	movw	r0, #0
 210:	movt	r0, #0
 214:	bl	0 <__assert_fail>
 218:	ldr	r3, [fp, #-8]
 21c:	add	r3, r3, #1
 220:	str	r3, [fp, #-8]
 224:	ldr	r2, [fp, #-8]
 228:	ldr	r3, [fp, #-64]	; 0xffffffc0
 22c:	cmp	r2, r3
 230:	blt	28 <print_path+0x28>
 234:	nop	{0}
 238:	sub	sp, fp, #4
 23c:	ldr	fp, [sp]
 240:	add	sp, sp, #4
 244:	pop	{pc}		; (ldr pc, [sp], #4)

00000248 <print_type>:
 248:	str	r4, [sp, #-12]!
 24c:	str	fp, [sp, #4]
 250:	str	lr, [sp, #8]
 254:	add	fp, sp, #8
 258:	sub	sp, sp, #68	; 0x44
 25c:	str	r0, [fp, #-72]	; 0xffffffb8
 260:	str	r1, [fp, #-76]	; 0xffffffb4
 264:	mov	r3, #0
 268:	str	r3, [fp, #-16]
 26c:	ldr	r3, [fp, #-76]	; 0xffffffb4
 270:	cmp	r3, #31
 274:	ble	2a8 <print_type+0x60>
 278:	mov	r0, #10
 27c:	bl	0 <putchar>
 280:	movw	r3, #0
 284:	movt	r3, #0
 288:	ldr	r0, [r3]
 28c:	mov	r3, #32
 290:	ldr	r2, [fp, #-76]	; 0xffffffb4
 294:	movw	r1, #0
 298:	movt	r1, #0
 29c:	bl	0 <fprintf>
 2a0:	mov	r0, #1
 2a4:	bl	0 <exit>
 2a8:	movw	r3, #0
 2ac:	movt	r3, #0
 2b0:	ldr	r2, [fp, #-76]	; 0xffffffb4
 2b4:	ldr	r1, [fp, #-72]	; 0xffffffb8
 2b8:	str	r1, [r3, r2, lsl #2]
 2bc:	sub	r3, fp, #24
 2c0:	mov	r1, r3
 2c4:	ldr	r0, [fp, #-72]	; 0xffffffb8
 2c8:	bl	0 <coda_type_get_class>
 2cc:	ldr	r3, [fp, #-24]	; 0xffffffe8
 2d0:	cmp	r3, #0
 2d4:	beq	2e4 <print_type+0x9c>
 2d8:	ldr	r3, [fp, #-24]	; 0xffffffe8
 2dc:	cmp	r3, #1
 2e0:	bne	2f8 <print_type+0xb0>
 2e4:	movw	r3, #0
 2e8:	movt	r3, #0
 2ec:	ldr	r3, [r3]
 2f0:	str	r3, [fp, #-16]
 2f4:	b	320 <print_type+0xd8>
 2f8:	ldr	r3, [fp, #-24]	; 0xffffffe8
 2fc:	cmp	r3, #6
 300:	bne	318 <print_type+0xd0>
 304:	movw	r3, #0
 308:	movt	r3, #0
 30c:	ldr	r3, [r3]
 310:	str	r3, [fp, #-16]
 314:	b	320 <print_type+0xd8>
 318:	mov	r3, #1
 31c:	str	r3, [fp, #-16]
 320:	ldr	r3, [fp, #-16]
 324:	cmp	r3, #0
 328:	beq	514 <print_type+0x2cc>
 32c:	ldr	r0, [fp, #-76]	; 0xffffffb4
 330:	bl	0 <print_path>
 334:	movw	r3, #0
 338:	movt	r3, #0
 33c:	ldr	r3, [r3]
 340:	cmp	r3, #0
 344:	beq	388 <print_type+0x140>
 348:	sub	r3, fp, #28
 34c:	mov	r1, r3
 350:	ldr	r0, [fp, #-72]	; 0xffffffb8
 354:	bl	0 <coda_type_get_read_type>
 358:	movw	r3, #0
 35c:	movt	r3, #0
 360:	ldr	r4, [r3]
 364:	ldr	r3, [fp, #-28]	; 0xffffffe4
 368:	mov	r0, r3
 36c:	bl	0 <coda_type_get_native_type_name>
 370:	mov	r3, r0
 374:	mov	r2, r3
 378:	mov	r1, r4
 37c:	movw	r0, #0
 380:	movt	r0, #0
 384:	bl	0 <printf>
 388:	movw	r3, #0
 38c:	movt	r3, #0
 390:	ldr	r3, [r3]
 394:	cmp	r3, #0
 398:	beq	3dc <print_type+0x194>
 39c:	sub	r3, fp, #32
 3a0:	mov	r1, r3
 3a4:	ldr	r0, [fp, #-72]	; 0xffffffb8
 3a8:	bl	0 <coda_type_get_format>
 3ac:	movw	r3, #0
 3b0:	movt	r3, #0
 3b4:	ldr	r4, [r3]
 3b8:	ldr	r3, [fp, #-32]	; 0xffffffe0
 3bc:	mov	r0, r3
 3c0:	bl	0 <coda_type_get_format_name>
 3c4:	mov	r3, r0
 3c8:	mov	r2, r3
 3cc:	mov	r1, r4
 3d0:	movw	r0, #0
 3d4:	movt	r0, #0
 3d8:	bl	0 <printf>
 3dc:	movw	r3, #0
 3e0:	movt	r3, #0
 3e4:	ldr	r3, [r3]
 3e8:	cmp	r3, #0
 3ec:	beq	474 <print_type+0x22c>
 3f0:	movw	r3, #0
 3f4:	movt	r3, #0
 3f8:	ldr	r3, [r3]
 3fc:	mov	r1, r3
 400:	movw	r0, #0
 404:	movt	r0, #0
 408:	bl	0 <printf>
 40c:	sub	r3, fp, #36	; 0x24
 410:	mov	r1, r3
 414:	ldr	r0, [fp, #-72]	; 0xffffffb8
 418:	bl	0 <coda_type_get_unit>
 41c:	ldr	r3, [fp, #-36]	; 0xffffffdc
 420:	cmp	r3, #0
 424:	beq	474 <print_type+0x22c>
 428:	movw	r3, #0
 42c:	movt	r3, #0
 430:	ldr	r3, [r3]
 434:	cmp	r3, #0
 438:	beq	444 <print_type+0x1fc>
 43c:	mov	r0, #34	; 0x22
 440:	bl	0 <putchar>
 444:	ldr	r3, [fp, #-36]	; 0xffffffdc
 448:	mov	r1, r3
 44c:	movw	r0, #0
 450:	movt	r0, #0
 454:	bl	0 <printf>
 458:	movw	r3, #0
 45c:	movt	r3, #0
 460:	ldr	r3, [r3]
 464:	cmp	r3, #0
 468:	beq	474 <print_type+0x22c>
 46c:	mov	r0, #34	; 0x22
 470:	bl	0 <putchar>
 474:	movw	r3, #0
 478:	movt	r3, #0
 47c:	ldr	r3, [r3]
 480:	cmp	r3, #0
 484:	beq	50c <print_type+0x2c4>
 488:	movw	r3, #0
 48c:	movt	r3, #0
 490:	ldr	r3, [r3]
 494:	mov	r1, r3
 498:	movw	r0, #0
 49c:	movt	r0, #0
 4a0:	bl	0 <printf>
 4a4:	sub	r3, fp, #40	; 0x28
 4a8:	mov	r1, r3
 4ac:	ldr	r0, [fp, #-72]	; 0xffffffb8
 4b0:	bl	0 <coda_type_get_description>
 4b4:	ldr	r3, [fp, #-40]	; 0xffffffd8
 4b8:	cmp	r3, #0
 4bc:	beq	50c <print_type+0x2c4>
 4c0:	movw	r3, #0
 4c4:	movt	r3, #0
 4c8:	ldr	r3, [r3]
 4cc:	cmp	r3, #0
 4d0:	beq	4dc <print_type+0x294>
 4d4:	mov	r0, #34	; 0x22
 4d8:	bl	0 <putchar>
 4dc:	ldr	r3, [fp, #-40]	; 0xffffffd8
 4e0:	mov	r1, r3
 4e4:	movw	r0, #0
 4e8:	movt	r0, #0
 4ec:	bl	0 <printf>
 4f0:	movw	r3, #0
 4f4:	movt	r3, #0
 4f8:	ldr	r3, [r3]
 4fc:	cmp	r3, #0
 500:	beq	50c <print_type+0x2c4>
 504:	mov	r0, #34	; 0x22
 508:	bl	0 <putchar>
 50c:	mov	r0, #10
 510:	bl	0 <putchar>
 514:	movw	r3, #0
 518:	movt	r3, #0
 51c:	ldr	r3, [r3]
 520:	cmp	r3, #0
 524:	beq	584 <print_type+0x33c>
 528:	sub	r3, fp, #44	; 0x2c
 52c:	mov	r1, r3
 530:	ldr	r0, [fp, #-72]	; 0xffffffb8
 534:	bl	0 <coda_type_has_attributes>
 538:	ldr	r3, [fp, #-44]	; 0xffffffd4
 53c:	cmp	r3, #0
 540:	beq	584 <print_type+0x33c>
 544:	sub	r3, fp, #48	; 0x30
 548:	mov	r1, r3
 54c:	ldr	r0, [fp, #-72]	; 0xffffffb8
 550:	bl	0 <coda_type_get_attributes>
 554:	ldr	r3, [fp, #-76]	; 0xffffffb4
 558:	add	r2, r3, #1
 55c:	movw	r3, #0
 560:	movt	r3, #0
 564:	mvn	r1, #0
 568:	str	r1, [r3, r2, lsl #2]
 56c:	ldr	r2, [fp, #-48]	; 0xffffffd0
 570:	ldr	r3, [fp, #-76]	; 0xffffffb4
 574:	add	r3, r3, #1
 578:	mov	r1, r3
 57c:	mov	r0, r2
 580:	bl	248 <print_type>
 584:	ldr	r3, [fp, #-24]	; 0xffffffe8
 588:	cmp	r3, #1
 58c:	beq	658 <print_type+0x410>
 590:	cmp	r3, #0
 594:	beq	5a4 <print_type+0x35c>
 598:	cmp	r3, #6
 59c:	beq	69c <print_type+0x454>
 5a0:	b	6d8 <print_type+0x490>
 5a4:	sub	r3, fp, #52	; 0x34
 5a8:	mov	r1, r3
 5ac:	ldr	r0, [fp, #-72]	; 0xffffffb8
 5b0:	bl	0 <coda_type_get_num_record_fields>
 5b4:	mov	r3, #0
 5b8:	str	r3, [fp, #-20]	; 0xffffffec
 5bc:	b	644 <print_type+0x3fc>
 5c0:	sub	r3, fp, #56	; 0x38
 5c4:	mov	r2, r3
 5c8:	ldr	r1, [fp, #-20]	; 0xffffffec
 5cc:	ldr	r0, [fp, #-72]	; 0xffffffb8
 5d0:	bl	0 <coda_type_get_record_field_type>
 5d4:	movw	r3, #0
 5d8:	movt	r3, #0
 5dc:	ldr	r3, [r3]
 5e0:	cmp	r3, #0
 5e4:	bne	608 <print_type+0x3c0>
 5e8:	sub	r3, fp, #60	; 0x3c
 5ec:	mov	r2, r3
 5f0:	ldr	r1, [fp, #-20]	; 0xffffffec
 5f4:	ldr	r0, [fp, #-72]	; 0xffffffb8
 5f8:	bl	0 <coda_type_get_record_field_hidden_status>
 5fc:	ldr	r3, [fp, #-60]	; 0xffffffc4
 600:	cmp	r3, #0
 604:	bne	638 <print_type+0x3f0>
 608:	ldr	r3, [fp, #-76]	; 0xffffffb4
 60c:	add	r2, r3, #1
 610:	movw	r3, #0
 614:	movt	r3, #0
 618:	ldr	r1, [fp, #-20]	; 0xffffffec
 61c:	str	r1, [r3, r2, lsl #2]
 620:	ldr	r2, [fp, #-56]	; 0xffffffc8
 624:	ldr	r3, [fp, #-76]	; 0xffffffb4
 628:	add	r3, r3, #1
 62c:	mov	r1, r3
 630:	mov	r0, r2
 634:	bl	248 <print_type>
 638:	ldr	r3, [fp, #-20]	; 0xffffffec
 63c:	add	r3, r3, #1
 640:	str	r3, [fp, #-20]	; 0xffffffec
 644:	ldr	r3, [fp, #-52]	; 0xffffffcc
 648:	ldr	r2, [fp, #-20]	; 0xffffffec
 64c:	cmp	r2, r3
 650:	blt	5c0 <print_type+0x378>
 654:	b	6dc <print_type+0x494>
 658:	sub	r3, fp, #64	; 0x40
 65c:	mov	r1, r3
 660:	ldr	r0, [fp, #-72]	; 0xffffffb8
 664:	bl	0 <coda_type_get_array_base_type>
 668:	ldr	r3, [fp, #-76]	; 0xffffffb4
 66c:	add	r2, r3, #1
 670:	movw	r3, #0
 674:	movt	r3, #0
 678:	mov	r1, #0
 67c:	str	r1, [r3, r2, lsl #2]
 680:	ldr	r2, [fp, #-64]	; 0xffffffc0
 684:	ldr	r3, [fp, #-76]	; 0xffffffb4
 688:	add	r3, r3, #1
 68c:	mov	r1, r3
 690:	mov	r0, r2
 694:	bl	248 <print_type>
 698:	b	6dc <print_type+0x494>
 69c:	movw	r3, #0
 6a0:	movt	r3, #0
 6a4:	ldr	r3, [r3]
 6a8:	cmp	r3, #0
 6ac:	bne	6d8 <print_type+0x490>
 6b0:	sub	r3, fp, #68	; 0x44
 6b4:	mov	r1, r3
 6b8:	ldr	r0, [fp, #-72]	; 0xffffffb8
 6bc:	bl	0 <coda_type_get_special_base_type>
 6c0:	ldr	r3, [fp, #-68]	; 0xffffffbc
 6c4:	ldr	r1, [fp, #-76]	; 0xffffffb4
 6c8:	mov	r0, r3
 6cc:	bl	248 <print_type>
 6d0:	nop	{0}
 6d4:	b	6dc <print_type+0x494>
 6d8:	nop	{0}
 6dc:	nop	{0}
 6e0:	sub	sp, fp, #8
 6e4:	ldr	r4, [sp]
 6e8:	ldr	fp, [sp, #4]
 6ec:	add	sp, sp, #8
 6f0:	pop	{pc}		; (ldr pc, [sp], #4)

000006f4 <generate_field_list>:
 6f4:	str	r4, [sp, #-12]!
 6f8:	str	fp, [sp, #4]
 6fc:	str	lr, [sp, #8]
 700:	add	fp, sp, #8
 704:	sub	sp, sp, #36	; 0x24
 708:	str	r0, [fp, #-32]	; 0xffffffe0
 70c:	str	r1, [fp, #-36]	; 0xffffffdc
 710:	str	r2, [fp, #-40]	; 0xffffffd8
 714:	ldr	r0, [fp, #-32]	; 0xffffffe0
 718:	bl	0 <coda_data_dictionary_get_product_class>
 71c:	str	r0, [fp, #-16]
 720:	ldr	r3, [fp, #-16]
 724:	cmp	r3, #0
 728:	bne	770 <generate_field_list+0x7c>
 72c:	movw	r3, #0
 730:	movt	r3, #0
 734:	ldr	r4, [r3]
 738:	ldr	r3, [pc, #300]	; 86c <generate_field_list+0x178>
 73c:	ldr	r3, [pc, r3]
 740:	mrc	15, 0, r2, cr13, cr0, {3}
 744:	ldr	r3, [r2, r3]
 748:	mov	r0, r3
 74c:	bl	0 <coda_errno_to_string>
 750:	mov	r3, r0
 754:	mov	r2, r3
 758:	movw	r1, #0
 75c:	movt	r1, #0
 760:	mov	r0, r4
 764:	bl	0 <fprintf>
 768:	mov	r0, #1
 76c:	bl	0 <exit>
 770:	ldr	r1, [fp, #-36]	; 0xffffffdc
 774:	ldr	r0, [fp, #-16]
 778:	bl	0 <coda_product_class_get_product_type>
 77c:	str	r0, [fp, #-20]	; 0xffffffec
 780:	ldr	r3, [fp, #-20]	; 0xffffffec
 784:	cmp	r3, #0
 788:	bne	7d0 <generate_field_list+0xdc>
 78c:	movw	r3, #0
 790:	movt	r3, #0
 794:	ldr	r4, [r3]
 798:	ldr	r3, [pc, #208]	; 870 <generate_field_list+0x17c>
 79c:	ldr	r3, [pc, r3]
 7a0:	mrc	15, 0, r2, cr13, cr0, {3}
 7a4:	ldr	r3, [r2, r3]
 7a8:	mov	r0, r3
 7ac:	bl	0 <coda_errno_to_string>
 7b0:	mov	r3, r0
 7b4:	mov	r2, r3
 7b8:	movw	r1, #0
 7bc:	movt	r1, #0
 7c0:	mov	r0, r4
 7c4:	bl	0 <fprintf>
 7c8:	mov	r0, #1
 7cc:	bl	0 <exit>
 7d0:	ldr	r1, [fp, #-40]	; 0xffffffd8
 7d4:	ldr	r0, [fp, #-20]	; 0xffffffec
 7d8:	bl	0 <coda_product_type_get_product_definition_by_version>
 7dc:	str	r0, [fp, #-24]	; 0xffffffe8
 7e0:	ldr	r3, [fp, #-24]	; 0xffffffe8
 7e4:	cmp	r3, #0
 7e8:	bne	830 <generate_field_list+0x13c>
 7ec:	movw	r3, #0
 7f0:	movt	r3, #0
 7f4:	ldr	r4, [r3]
 7f8:	ldr	r3, [pc, #116]	; 874 <generate_field_list+0x180>
 7fc:	ldr	r3, [pc, r3]
 800:	mrc	15, 0, r2, cr13, cr0, {3}
 804:	ldr	r3, [r2, r3]
 808:	mov	r0, r3
 80c:	bl	0 <coda_errno_to_string>
 810:	mov	r3, r0
 814:	mov	r2, r3
 818:	movw	r1, #0
 81c:	movt	r1, #0
 820:	mov	r0, r4
 824:	bl	0 <fprintf>
 828:	mov	r0, #1
 82c:	bl	0 <exit>
 830:	ldr	r3, [fp, #-24]	; 0xffffffe8
 834:	ldr	r3, [r3, #28]
 838:	cmp	r3, #0
 83c:	beq	854 <generate_field_list+0x160>
 840:	ldr	r3, [fp, #-24]	; 0xffffffe8
 844:	ldr	r3, [r3, #28]
 848:	mov	r1, #0
 84c:	mov	r0, r3
 850:	bl	248 <print_type>
 854:	nop	{0}
 858:	sub	sp, fp, #8
 85c:	ldr	r4, [sp]
 860:	ldr	fp, [sp, #4]
 864:	add	sp, sp, #8
 868:	pop	{pc}		; (ldr pc, [sp], #4)
 86c:	.word	0x00000128
 870:	.word	0x000000cc
 874:	.word	0x00000070

00000878 <generate_product_list>:
 878:	str	r4, [sp, #-12]!
 87c:	str	fp, [sp, #4]
 880:	str	lr, [sp, #8]
 884:	add	fp, sp, #8
 888:	sub	sp, sp, #44	; 0x2c
 88c:	str	r0, [fp, #-40]	; 0xffffffd8
 890:	str	r1, [fp, #-44]	; 0xffffffd4
 894:	mov	r3, #0
 898:	str	r3, [fp, #-16]
 89c:	b	b08 <generate_product_list+0x290>
 8a0:	ldr	r3, [pc, #664]	; b40 <generate_product_list+0x2c8>
 8a4:	ldr	r3, [pc, r3]
 8a8:	mrc	15, 0, r2, cr13, cr0, {3}
 8ac:	ldr	r3, [r2, r3]
 8b0:	ldr	r2, [r3, #4]
 8b4:	ldr	r3, [fp, #-16]
 8b8:	lsl	r3, r3, #2
 8bc:	add	r3, r2, r3
 8c0:	ldr	r3, [r3]
 8c4:	str	r3, [fp, #-28]	; 0xffffffe4
 8c8:	ldr	r3, [fp, #-40]	; 0xffffffd8
 8cc:	cmp	r3, #0
 8d0:	beq	8f4 <generate_product_list+0x7c>
 8d4:	ldr	r3, [fp, #-28]	; 0xffffffe4
 8d8:	ldr	r3, [r3]
 8dc:	ldr	r1, [fp, #-40]	; 0xffffffd8
 8e0:	mov	r0, r3
 8e4:	bl	0 <strcmp>
 8e8:	mov	r3, r0
 8ec:	cmp	r3, #0
 8f0:	bne	af8 <generate_product_list+0x280>
 8f4:	mov	r3, #0
 8f8:	str	r3, [fp, #-20]	; 0xffffffec
 8fc:	b	ae0 <generate_product_list+0x268>
 900:	ldr	r3, [fp, #-28]	; 0xffffffe4
 904:	ldr	r2, [r3, #32]
 908:	ldr	r3, [fp, #-20]	; 0xffffffec
 90c:	lsl	r3, r3, #2
 910:	add	r3, r2, r3
 914:	ldr	r3, [r3]
 918:	str	r3, [fp, #-32]	; 0xffffffe0
 91c:	ldr	r3, [fp, #-44]	; 0xffffffd4
 920:	cmp	r3, #0
 924:	beq	948 <generate_product_list+0xd0>
 928:	ldr	r3, [fp, #-32]	; 0xffffffe0
 92c:	ldr	r3, [r3]
 930:	ldr	r1, [fp, #-44]	; 0xffffffd4
 934:	mov	r0, r3
 938:	bl	0 <strcmp>
 93c:	mov	r3, r0
 940:	cmp	r3, #0
 944:	bne	ad0 <generate_product_list+0x258>
 948:	ldr	r3, [fp, #-32]	; 0xffffffe0
 94c:	ldr	r3, [r3, #8]
 950:	cmp	r3, #0
 954:	ble	ad4 <generate_product_list+0x25c>
 958:	mov	r3, #0
 95c:	str	r3, [fp, #-24]	; 0xffffffe8
 960:	b	ab8 <generate_product_list+0x240>
 964:	ldr	r3, [fp, #-32]	; 0xffffffe0
 968:	ldr	r2, [r3, #12]
 96c:	ldr	r3, [fp, #-24]	; 0xffffffe8
 970:	lsl	r3, r3, #2
 974:	add	r3, r2, r3
 978:	ldr	r3, [r3]
 97c:	str	r3, [fp, #-36]	; 0xffffffdc
 980:	ldr	r3, [fp, #-28]	; 0xffffffe4
 984:	ldr	r1, [r3]
 988:	movw	r3, #0
 98c:	movt	r3, #0
 990:	ldr	r0, [r3]
 994:	ldr	r3, [fp, #-32]	; 0xffffffe0
 998:	ldr	ip, [r3]
 99c:	movw	r3, #0
 9a0:	movt	r3, #0
 9a4:	ldr	r3, [r3]
 9a8:	ldr	r2, [fp, #-36]	; 0xffffffdc
 9ac:	ldr	r2, [r2, #4]
 9b0:	str	r2, [sp, #4]
 9b4:	str	r3, [sp]
 9b8:	mov	r3, ip
 9bc:	mov	r2, r0
 9c0:	movw	r0, #0
 9c4:	movt	r0, #0
 9c8:	bl	0 <printf>
 9cc:	movw	r3, #0
 9d0:	movt	r3, #0
 9d4:	ldr	r3, [r3]
 9d8:	cmp	r3, #0
 9dc:	beq	a14 <generate_product_list+0x19c>
 9e0:	movw	r3, #0
 9e4:	movt	r3, #0
 9e8:	ldr	r4, [r3]
 9ec:	ldr	r3, [fp, #-36]	; 0xffffffdc
 9f0:	ldr	r3, [r3]
 9f4:	mov	r0, r3
 9f8:	bl	0 <coda_type_get_format_name>
 9fc:	mov	r3, r0
 a00:	mov	r2, r3
 a04:	mov	r1, r4
 a08:	movw	r0, #0
 a0c:	movt	r0, #0
 a10:	bl	0 <printf>
 a14:	movw	r3, #0
 a18:	movt	r3, #0
 a1c:	ldr	r3, [r3]
 a20:	cmp	r3, #0
 a24:	beq	aa4 <generate_product_list+0x22c>
 a28:	movw	r3, #0
 a2c:	movt	r3, #0
 a30:	ldr	r3, [r3]
 a34:	mov	r1, r3
 a38:	movw	r0, #0
 a3c:	movt	r0, #0
 a40:	bl	0 <printf>
 a44:	ldr	r3, [fp, #-36]	; 0xffffffdc
 a48:	ldr	r3, [r3, #12]
 a4c:	cmp	r3, #0
 a50:	beq	aa4 <generate_product_list+0x22c>
 a54:	movw	r3, #0
 a58:	movt	r3, #0
 a5c:	ldr	r3, [r3]
 a60:	cmp	r3, #0
 a64:	beq	a70 <generate_product_list+0x1f8>
 a68:	mov	r0, #34	; 0x22
 a6c:	bl	0 <putchar>
 a70:	ldr	r3, [fp, #-36]	; 0xffffffdc
 a74:	ldr	r3, [r3, #12]
 a78:	mov	r1, r3
 a7c:	movw	r0, #0
 a80:	movt	r0, #0
 a84:	bl	0 <printf>
 a88:	movw	r3, #0
 a8c:	movt	r3, #0
 a90:	ldr	r3, [r3]
 a94:	cmp	r3, #0
 a98:	beq	aa4 <generate_product_list+0x22c>
 a9c:	mov	r0, #34	; 0x22
 aa0:	bl	0 <putchar>
 aa4:	mov	r0, #10
 aa8:	bl	0 <putchar>
 aac:	ldr	r3, [fp, #-24]	; 0xffffffe8
 ab0:	add	r3, r3, #1
 ab4:	str	r3, [fp, #-24]	; 0xffffffe8
 ab8:	ldr	r3, [fp, #-32]	; 0xffffffe0
 abc:	ldr	r3, [r3, #8]
 ac0:	ldr	r2, [fp, #-24]	; 0xffffffe8
 ac4:	cmp	r2, r3
 ac8:	blt	964 <generate_product_list+0xec>
 acc:	b	ad4 <generate_product_list+0x25c>
 ad0:	nop	{0}
 ad4:	ldr	r3, [fp, #-20]	; 0xffffffec
 ad8:	add	r3, r3, #1
 adc:	str	r3, [fp, #-20]	; 0xffffffec
 ae0:	ldr	r3, [fp, #-28]	; 0xffffffe4
 ae4:	ldr	r3, [r3, #28]
 ae8:	ldr	r2, [fp, #-20]	; 0xffffffec
 aec:	cmp	r2, r3
 af0:	blt	900 <generate_product_list+0x88>
 af4:	b	afc <generate_product_list+0x284>
 af8:	nop	{0}
 afc:	ldr	r3, [fp, #-16]
 b00:	add	r3, r3, #1
 b04:	str	r3, [fp, #-16]
 b08:	ldr	r3, [pc, #52]	; b44 <generate_product_list+0x2cc>
 b0c:	ldr	r3, [pc, r3]
 b10:	mrc	15, 0, r2, cr13, cr0, {3}
 b14:	ldr	r3, [r2, r3]
 b18:	ldr	r3, [r3]
 b1c:	ldr	r2, [fp, #-16]
 b20:	cmp	r2, r3
 b24:	blt	8a0 <generate_product_list+0x28>
 b28:	nop	{0}
 b2c:	sub	sp, fp, #8
 b30:	ldr	r4, [sp]
 b34:	ldr	fp, [sp, #4]
 b38:	add	sp, sp, #8
 b3c:	pop	{pc}		; (ldr pc, [sp], #4)
 b40:	.word	0x00000294
 b44:	.word	0x00000030

00000b48 <generate_list>:
 b48:	str	fp, [sp, #-8]!
 b4c:	str	lr, [sp, #4]
 b50:	add	fp, sp, #4
 b54:	sub	sp, sp, #16
 b58:	str	r0, [fp, #-8]
 b5c:	str	r1, [fp, #-12]
 b60:	str	r2, [fp, #-16]
 b64:	ldr	r3, [fp, #-16]
 b68:	cmp	r3, #0
 b6c:	bge	b80 <generate_list+0x38>
 b70:	ldr	r1, [fp, #-12]
 b74:	ldr	r0, [fp, #-8]
 b78:	bl	878 <generate_product_list>
 b7c:	b	b90 <generate_list+0x48>
 b80:	ldr	r2, [fp, #-16]
 b84:	ldr	r1, [fp, #-12]
 b88:	ldr	r0, [fp, #-8]
 b8c:	bl	6f4 <generate_field_list>
 b90:	nop	{0}
 b94:	sub	sp, fp, #4
 b98:	ldr	fp, [sp]
 b9c:	add	sp, sp, #4
 ba0:	pop	{pc}		; (ldr pc, [sp], #4)
