
../compcert-repos/dvidelabs-flatcc-3b39ef7/test/json_test/CMakeFiles/test_json_printer.dir/test_json_printer.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <MyGame_Example2_Monster_print_json_table>:
       0:	bx	lr

00000004 <MyGame_Example_TestJSONPrefix_print_json_table>:
       4:	push	{r4, r5, r6, lr}
       8:	sub	sp, sp, #8
       c:	ldr	r2, [pc, #104]	; 7c <MyGame_Example_TestJSONPrefix_print_json_table+0x78>
      10:	mov	r3, #21
      14:	str	r2, [sp, #4]
      18:	str	r3, [sp]
      1c:	mov	r2, #0
      20:	ldr	r3, [pc, #88]	; 80 <MyGame_Example_TestJSONPrefix_print_json_table+0x7c>
      24:	mov	r4, r0
      28:	mov	r5, r1
      2c:	bl	0 <flatcc_json_printer_table_field>
      30:	ldr	r3, [pc, #76]	; 84 <MyGame_Example_TestJSONPrefix_print_json_table+0x80>
      34:	mov	r6, #22
      38:	mov	r1, r5
      3c:	mov	r0, r4
      40:	str	r3, [sp, #4]
      44:	str	r6, [sp]
      48:	ldr	r3, [pc, #56]	; 88 <MyGame_Example_TestJSONPrefix_print_json_table+0x84>
      4c:	mov	r2, #1
      50:	bl	0 <flatcc_json_printer_table_field>
      54:	ldr	r3, [pc, #48]	; 8c <MyGame_Example_TestJSONPrefix_print_json_table+0x88>
      58:	str	r6, [sp]
      5c:	str	r3, [sp, #4]
      60:	mov	r1, r5
      64:	mov	r0, r4
      68:	ldr	r3, [pc, #32]	; 90 <MyGame_Example_TestJSONPrefix_print_json_table+0x8c>
      6c:	mov	r2, #2
      70:	bl	0 <flatcc_json_printer_table_field>
      74:	add	sp, sp, #8
      78:	pop	{r4, r5, r6, pc}
	...
      88:	.word	0x00000018
      8c:	.word	0x00000000
      90:	.word	0x00000030

00000094 <Fantasy_Attacker_print_json_table>:
      94:	push	{lr}		; (str lr, [sp, #-4]!)
      98:	sub	sp, sp, #12
      9c:	mov	r2, #0
      a0:	mov	r3, #19
      a4:	str	r3, [sp]
      a8:	str	r2, [sp, #4]
      ac:	ldr	r3, [pc, #8]	; bc <Fantasy_Attacker_print_json_table+0x28>
      b0:	bl	0 <flatcc_json_printer_int32_field>
      b4:	add	sp, sp, #12
      b8:	pop	{pc}		; (ldr pc, [sp], #4)
      bc:	.word	0x00000048

000000c0 <MyGame_Example_TestJSONPrefixParsing3_print_json_table>:
      c0:	push	{r4, r5, lr}
      c4:	mov	r4, #0
      c8:	sub	sp, sp, #20
      cc:	mov	r5, #0
      d0:	mov	r3, #15
      d4:	strd	r4, [sp, #8]
      d8:	str	r3, [sp]
      dc:	mov	r2, #0
      e0:	ldr	r3, [pc, #52]	; 11c <MyGame_Example_TestJSONPrefixParsing3_print_json_table+0x5c>
      e4:	mov	r4, r0
      e8:	mov	r5, r1
      ec:	bl	0 <flatcc_json_printer_int64_field>
      f0:	mov	r2, #0
      f4:	mov	r3, #21
      f8:	str	r2, [sp, #4]
      fc:	str	r3, [sp]
     100:	mov	r1, r5
     104:	mov	r0, r4
     108:	ldr	r3, [pc, #16]	; 120 <MyGame_Example_TestJSONPrefixParsing3_print_json_table+0x60>
     10c:	mov	r2, #1
     110:	bl	0 <flatcc_json_printer_uint32_field>
     114:	add	sp, sp, #20
     118:	pop	{r4, r5, pc}
     11c:	.word	0x0000005c
     120:	.word	0x0000006c

00000124 <MyGame_Example_TestJSONPrefixParsing2_print_json_table>:
     124:	push	{r4, r5, lr}
     128:	mov	r4, #0
     12c:	sub	sp, sp, #20
     130:	mov	r5, #0
     134:	mov	r3, #15
     138:	strd	r4, [sp, #8]
     13c:	str	r3, [sp]
     140:	mov	r2, #0
     144:	ldr	r3, [pc, #52]	; 180 <MyGame_Example_TestJSONPrefixParsing2_print_json_table+0x5c>
     148:	mov	r4, r0
     14c:	mov	r5, r1
     150:	bl	0 <flatcc_json_printer_int64_field>
     154:	mov	r2, #0
     158:	mov	r3, #16
     15c:	str	r2, [sp, #4]
     160:	str	r3, [sp]
     164:	mov	r1, r5
     168:	mov	r0, r4
     16c:	ldr	r3, [pc, #16]	; 184 <MyGame_Example_TestJSONPrefixParsing2_print_json_table+0x60>
     170:	mov	r2, #1
     174:	bl	0 <flatcc_json_printer_uint32_field>
     178:	add	sp, sp, #20
     17c:	pop	{r4, r5, pc}
     180:	.word	0x0000005c
     184:	.word	0x00000084

00000188 <MyGame_Example_TestJSONPrefixParsing_print_json_table>:
     188:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
     18c:	mov	r2, #0
     190:	sub	sp, sp, #20
     194:	mov	fp, r2
     198:	mov	r7, #4
     19c:	mov	sl, #9
     1a0:	mov	r4, r0
     1a4:	mov	r5, r1
     1a8:	str	r7, [sp]
     1ac:	ldr	r3, [pc, #224]	; 294 <MyGame_Example_TestJSONPrefixParsing_print_json_table+0x10c>
     1b0:	bl	0 <flatcc_json_printer_string_field>
     1b4:	mov	r8, #0
     1b8:	mov	r9, #0
     1bc:	mov	r1, r5
     1c0:	mov	r0, r4
     1c4:	stm	sp, {sl, fp}
     1c8:	ldr	r3, [pc, #200]	; 298 <MyGame_Example_TestJSONPrefixParsing_print_json_table+0x110>
     1cc:	mov	r2, #1
     1d0:	bl	0 <flatcc_json_printer_uint32_field>
     1d4:	mov	r6, #8
     1d8:	mov	r1, r5
     1dc:	mov	r0, r4
     1e0:	str	r7, [sp]
     1e4:	ldr	r3, [pc, #176]	; 29c <MyGame_Example_TestJSONPrefixParsing_print_json_table+0x114>
     1e8:	mov	r2, #2
     1ec:	bl	0 <flatcc_json_printer_string_field>
     1f0:	mov	r1, r5
     1f4:	mov	r0, r4
     1f8:	strd	r8, [sp, #8]
     1fc:	str	r6, [sp]
     200:	ldr	r3, [pc, #152]	; 2a0 <MyGame_Example_TestJSONPrefixParsing_print_json_table+0x118>
     204:	mov	r2, #3
     208:	bl	0 <flatcc_json_printer_int64_field>
     20c:	mov	r2, r7
     210:	mov	r1, r5
     214:	mov	r0, r4
     218:	str	r7, [sp]
     21c:	ldr	r3, [pc, #128]	; 2a4 <MyGame_Example_TestJSONPrefixParsing_print_json_table+0x11c>
     220:	bl	0 <flatcc_json_printer_string_field>
     224:	mov	r1, r5
     228:	mov	r0, r4
     22c:	strd	r8, [sp, #8]
     230:	str	r6, [sp]
     234:	ldr	r3, [pc, #108]	; 2a8 <MyGame_Example_TestJSONPrefixParsing_print_json_table+0x120>
     238:	mov	r2, #5
     23c:	bl	0 <flatcc_json_printer_int64_field>
     240:	mov	r1, r5
     244:	mov	r0, r4
     248:	stm	sp, {sl, fp}
     24c:	ldr	r3, [pc, #88]	; 2ac <MyGame_Example_TestJSONPrefixParsing_print_json_table+0x124>
     250:	mov	r2, #6
     254:	bl	0 <flatcc_json_printer_uint32_field>
     258:	mov	r1, r5
     25c:	mov	r0, r4
     260:	strd	r8, [sp, #8]
     264:	str	r6, [sp]
     268:	ldr	r3, [pc, #64]	; 2b0 <MyGame_Example_TestJSONPrefixParsing_print_json_table+0x128>
     26c:	mov	r2, #7
     270:	bl	0 <flatcc_json_printer_int64_field>
     274:	stm	sp, {sl, fp}
     278:	mov	r2, r6
     27c:	mov	r1, r5
     280:	mov	r0, r4
     284:	ldr	r3, [pc, #40]	; 2b4 <MyGame_Example_TestJSONPrefixParsing_print_json_table+0x12c>
     288:	bl	0 <flatcc_json_printer_uint32_field>
     28c:	add	sp, sp, #20
     290:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
     294:	.word	0x00000098
     298:	.word	0x000000a0
     29c:	.word	0x000000ac
     2a0:	.word	0x000000b4
     2a4:	.word	0x000000c0
     2a8:	.word	0x000000c8
     2ac:	.word	0x000000d4
     2b0:	.word	0x000000e0
     2b4:	.word	0x000000ec

000002b8 <MyGame_Example_Monster_print_json_table>:
     2b8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
     2bc:	sub	sp, sp, #20
     2c0:	ldr	r3, [pc, #1092]	; 70c <MyGame_Example_Monster_print_json_table+0x454>
     2c4:	mov	r6, #3
     2c8:	str	r3, [sp, #4]
     2cc:	str	r6, [sp]
     2d0:	ldr	r3, [pc, #1080]	; 710 <MyGame_Example_Monster_print_json_table+0x458>
     2d4:	mov	r2, #0
     2d8:	mov	r4, r0
     2dc:	mov	r5, r1
     2e0:	mov	r7, #4
     2e4:	bl	0 <flatcc_json_printer_struct_field>
     2e8:	mov	r3, #150	; 0x96
     2ec:	mov	r1, r5
     2f0:	mov	r0, r4
     2f4:	str	r3, [sp, #4]
     2f8:	str	r7, [sp]
     2fc:	ldr	r3, [pc, #1040]	; 714 <MyGame_Example_Monster_print_json_table+0x45c>
     300:	mov	r2, #1
     304:	bl	0 <flatcc_json_printer_int16_field>
     308:	mov	r2, #2
     30c:	mov	r3, #100	; 0x64
     310:	mov	r1, r5
     314:	stm	sp, {r2, r3}
     318:	mov	r0, r4
     31c:	ldr	r3, [pc, #1012]	; 718 <MyGame_Example_Monster_print_json_table+0x460>
     320:	bl	0 <flatcc_json_printer_int16_field>
     324:	mov	sl, #9
     328:	mov	r2, r6
     32c:	mov	r1, r5
     330:	mov	r0, r4
     334:	str	r7, [sp]
     338:	ldr	r3, [pc, #988]	; 71c <MyGame_Example_Monster_print_json_table+0x464>
     33c:	bl	0 <flatcc_json_printer_string_field>
     340:	mov	r1, r5
     344:	mov	r0, r4
     348:	str	sl, [sp]
     34c:	ldr	r3, [pc, #972]	; 720 <MyGame_Example_Monster_print_json_table+0x468>
     350:	mov	r2, #5
     354:	bl	0 <flatcc_json_printer_uint8_vector_field>
     358:	mov	r8, #5
     35c:	mov	fp, #8
     360:	ldr	r3, [pc, #956]	; 724 <MyGame_Example_Monster_print_json_table+0x46c>
     364:	mov	r1, r5
     368:	mov	r0, r4
     36c:	str	r3, [sp, #8]
     370:	stm	sp, {r8, fp}
     374:	ldr	r3, [pc, #940]	; 728 <MyGame_Example_Monster_print_json_table+0x470>
     378:	mov	r2, #6
     37c:	bl	0 <flatcc_json_printer_int8_enum_field>
     380:	ldr	ip, [pc, #932]	; 72c <MyGame_Example_Monster_print_json_table+0x474>
     384:	ldr	r3, [pc, #932]	; 730 <MyGame_Example_Monster_print_json_table+0x478>
     388:	mov	r2, fp
     38c:	mov	r1, r5
     390:	stmib	sp, {r3, ip}
     394:	mov	r0, r4
     398:	str	r7, [sp]
     39c:	ldr	r3, [pc, #912]	; 734 <MyGame_Example_Monster_print_json_table+0x47c>
     3a0:	bl	0 <flatcc_json_printer_union_field>
     3a4:	ldr	r3, [pc, #908]	; 738 <MyGame_Example_Monster_print_json_table+0x480>
     3a8:	mov	r6, #17
     3ac:	mov	r2, sl
     3b0:	mov	r1, r5
     3b4:	mov	r0, r4
     3b8:	str	r3, [sp, #8]
     3bc:	str	r7, [sp, #4]
     3c0:	str	r8, [sp]
     3c4:	ldr	r3, [pc, #880]	; 73c <MyGame_Example_Monster_print_json_table+0x484>
     3c8:	bl	0 <flatcc_json_printer_struct_vector_field>
     3cc:	mov	r1, r5
     3d0:	mov	r0, r4
     3d4:	str	r6, [sp]
     3d8:	ldr	r3, [pc, #864]	; 740 <MyGame_Example_Monster_print_json_table+0x488>
     3dc:	mov	r2, #10
     3e0:	bl	0 <flatcc_json_printer_string_vector_field>
     3e4:	ldr	r3, [pc, #856]	; 744 <MyGame_Example_Monster_print_json_table+0x48c>
     3e8:	mov	r1, r5
     3ec:	mov	r0, r4
     3f0:	str	r3, [sp, #4]
     3f4:	str	r6, [sp]
     3f8:	ldr	r3, [pc, #840]	; 748 <MyGame_Example_Monster_print_json_table+0x490>
     3fc:	mov	r2, #11
     400:	bl	0 <flatcc_json_printer_table_vector_field>
     404:	ldr	r3, [pc, #824]	; 744 <MyGame_Example_Monster_print_json_table+0x48c>
     408:	mov	r1, r5
     40c:	str	r3, [sp, #4]
     410:	mov	r0, r4
     414:	str	r8, [sp]
     418:	ldr	r3, [pc, #812]	; 74c <MyGame_Example_Monster_print_json_table+0x494>
     41c:	mov	r2, #12
     420:	bl	0 <flatcc_json_printer_table_field>
     424:	ldr	r3, [pc, #792]	; 744 <MyGame_Example_Monster_print_json_table+0x48c>
     428:	mov	r9, #0
     42c:	str	r3, [sp, #8]
     430:	mov	r3, #20
     434:	mov	r1, r5
     438:	mov	r0, r4
     43c:	str	r9, [sp, #4]
     440:	str	r3, [sp]
     444:	mov	r2, #13
     448:	ldr	r3, [pc, #768]	; 750 <MyGame_Example_Monster_print_json_table+0x498>
     44c:	bl	0 <flatcc_json_printer_table_as_nested_root>
     450:	ldr	r3, [pc, #764]	; 754 <MyGame_Example_Monster_print_json_table+0x49c>
     454:	str	sl, [sp]
     458:	mov	r1, r5
     45c:	mov	r0, r4
     460:	str	r3, [sp, #4]
     464:	mov	r2, #14
     468:	ldr	r3, [pc, #744]	; 758 <MyGame_Example_Monster_print_json_table+0x4a0>
     46c:	bl	0 <flatcc_json_printer_table_field>
     470:	mov	r3, #1
     474:	mov	sl, #16
     478:	mov	r1, r5
     47c:	mov	r0, r4
     480:	str	r3, [sp, #4]
     484:	str	fp, [sp]
     488:	ldr	r3, [pc, #716]	; 75c <MyGame_Example_Monster_print_json_table+0x4a4>
     48c:	mov	r2, #15
     490:	bl	0 <flatcc_json_printer_bool_field>
     494:	str	r9, [sp, #4]
     498:	mov	r1, r5
     49c:	mov	r0, r4
     4a0:	mov	r2, sl
     4a4:	str	sl, [sp]
     4a8:	ldr	r3, [pc, #688]	; 760 <MyGame_Example_Monster_print_json_table+0x4a8>
     4ac:	bl	0 <flatcc_json_printer_int32_field>
     4b0:	str	r9, [sp, #4]
     4b4:	mov	r2, r6
     4b8:	mov	r1, r5
     4bc:	mov	r0, r4
     4c0:	str	sl, [sp]
     4c4:	ldr	r3, [pc, #664]	; 764 <MyGame_Example_Monster_print_json_table+0x4ac>
     4c8:	bl	0 <flatcc_json_printer_uint32_field>
     4cc:	mov	r2, #0
     4d0:	mov	r3, #0
     4d4:	mov	r1, r5
     4d8:	strd	r2, [sp, #8]
     4dc:	mov	r0, r4
     4e0:	str	sl, [sp]
     4e4:	ldr	r3, [pc, #636]	; 768 <MyGame_Example_Monster_print_json_table+0x4b0>
     4e8:	mov	r2, #18
     4ec:	bl	0 <flatcc_json_printer_int64_field>
     4f0:	mov	r2, #0
     4f4:	mov	r3, #0
     4f8:	mov	r1, r5
     4fc:	strd	r2, [sp, #8]
     500:	mov	r0, r4
     504:	str	sl, [sp]
     508:	ldr	r3, [pc, #604]	; 76c <MyGame_Example_Monster_print_json_table+0x4b4>
     50c:	mov	r2, #19
     510:	bl	0 <flatcc_json_printer_uint64_field>
     514:	stm	sp, {r6, r9}
     518:	mov	r1, r5
     51c:	mov	r0, r4
     520:	mov	r2, #20
     524:	ldr	r3, [pc, #580]	; 770 <MyGame_Example_Monster_print_json_table+0x4b8>
     528:	bl	0 <flatcc_json_printer_int32_field>
     52c:	stm	sp, {r6, r9}
     530:	mov	r1, r5
     534:	mov	r0, r4
     538:	ldr	r3, [pc, #564]	; 774 <MyGame_Example_Monster_print_json_table+0x4bc>
     53c:	mov	r2, #21
     540:	bl	0 <flatcc_json_printer_uint32_field>
     544:	mov	r2, #0
     548:	mov	r3, #0
     54c:	mov	r1, r5
     550:	strd	r2, [sp, #8]
     554:	mov	r0, r4
     558:	str	r6, [sp]
     55c:	ldr	r3, [pc, #532]	; 778 <MyGame_Example_Monster_print_json_table+0x4c0>
     560:	mov	r2, #22
     564:	bl	0 <flatcc_json_printer_int64_field>
     568:	mov	r2, #0
     56c:	mov	r3, #0
     570:	mov	r1, r5
     574:	strd	r2, [sp, #8]
     578:	mov	r0, r4
     57c:	str	r6, [sp]
     580:	ldr	r3, [pc, #500]	; 77c <MyGame_Example_Monster_print_json_table+0x4c4>
     584:	mov	r2, #23
     588:	bl	0 <flatcc_json_printer_uint64_field>
     58c:	mov	r1, r5
     590:	mov	r0, r4
     594:	str	sl, [sp]
     598:	ldr	r3, [pc, #480]	; 780 <MyGame_Example_Monster_print_json_table+0x4c8>
     59c:	mov	r2, #24
     5a0:	bl	0 <flatcc_json_printer_bool_vector_field>
     5a4:	mov	r9, #6
     5a8:	mov	r1, r5
     5ac:	mov	r0, r4
     5b0:	str	r8, [sp]
     5b4:	vldr	s0, [pc, #324]	; 700 <MyGame_Example_Monster_print_json_table+0x448>
     5b8:	ldr	r3, [pc, #452]	; 784 <MyGame_Example_Monster_print_json_table+0x4cc>
     5bc:	mov	r2, #25
     5c0:	bl	0 <flatcc_json_printer_float_field>
     5c4:	mov	r1, r5
     5c8:	mov	r0, r4
     5cc:	str	r9, [sp]
     5d0:	vldr	s0, [pc, #300]	; 704 <MyGame_Example_Monster_print_json_table+0x44c>
     5d4:	ldr	r3, [pc, #428]	; 788 <MyGame_Example_Monster_print_json_table+0x4d0>
     5d8:	mov	r2, #26
     5dc:	bl	0 <flatcc_json_printer_float_field>
     5e0:	vldr	s0, [pc, #288]	; 708 <MyGame_Example_Monster_print_json_table+0x450>
     5e4:	mov	r1, r5
     5e8:	mov	r0, r4
     5ec:	str	r9, [sp]
     5f0:	ldr	r3, [pc, #404]	; 78c <MyGame_Example_Monster_print_json_table+0x4d4>
     5f4:	mov	r2, #27
     5f8:	bl	0 <flatcc_json_printer_float_field>
     5fc:	mov	r3, #18
     600:	mov	r1, r5
     604:	mov	r0, r4
     608:	str	r3, [sp]
     60c:	mov	r2, #28
     610:	ldr	r3, [pc, #376]	; 790 <MyGame_Example_Monster_print_json_table+0x4d8>
     614:	bl	0 <flatcc_json_printer_string_vector_field>
     618:	ldr	r2, [pc, #372]	; 794 <MyGame_Example_Monster_print_json_table+0x4dc>
     61c:	mov	r3, #23
     620:	mov	r1, r5
     624:	mov	r0, r4
     628:	str	r2, [sp, #8]
     62c:	str	r3, [sp]
     630:	str	fp, [sp, #4]
     634:	ldr	r3, [pc, #348]	; 798 <MyGame_Example_Monster_print_json_table+0x4e0>
     638:	mov	r2, #29
     63c:	bl	0 <flatcc_json_printer_struct_vector_field>
     640:	mov	r1, r5
     644:	mov	r0, r4
     648:	str	r7, [sp]
     64c:	ldr	r3, [pc, #328]	; 79c <MyGame_Example_Monster_print_json_table+0x4e4>
     650:	mov	r2, #30
     654:	bl	0 <flatcc_json_printer_uint8_vector_field>
     658:	ldr	r3, [pc, #216]	; 738 <MyGame_Example_Monster_print_json_table+0x480>
     65c:	mov	r1, r5
     660:	str	r3, [sp, #8]
     664:	mov	r0, r4
     668:	str	r7, [sp, #4]
     66c:	str	r8, [sp]
     670:	ldr	r3, [pc, #296]	; 7a0 <MyGame_Example_Monster_print_json_table+0x4e8>
     674:	mov	r2, #31
     678:	bl	0 <flatcc_json_printer_struct_vector_field>
     67c:	mov	r3, #15
     680:	mov	r1, r5
     684:	mov	r0, r4
     688:	str	r3, [sp]
     68c:	mov	r2, #32
     690:	ldr	r3, [pc, #268]	; 7a4 <MyGame_Example_Monster_print_json_table+0x4ec>
     694:	bl	0 <flatcc_json_printer_int64_vector_field>
     698:	mov	r1, r5
     69c:	mov	r0, r4
     6a0:	str	r6, [sp]
     6a4:	ldr	r3, [pc, #252]	; 7a8 <MyGame_Example_Monster_print_json_table+0x4f0>
     6a8:	mov	r2, #33	; 0x21
     6ac:	bl	0 <flatcc_json_printer_double_vector_field>
     6b0:	ldr	r2, [pc, #244]	; 7ac <MyGame_Example_Monster_print_json_table+0x4f4>
     6b4:	mov	r3, #21
     6b8:	mov	r1, r5
     6bc:	mov	r0, r4
     6c0:	str	r2, [sp, #4]
     6c4:	str	r3, [sp]
     6c8:	mov	r2, #34	; 0x22
     6cc:	ldr	r3, [pc, #220]	; 7b0 <MyGame_Example_Monster_print_json_table+0x4f8>
     6d0:	bl	0 <flatcc_json_printer_table_field>
     6d4:	ldr	r2, [pc, #216]	; 7b4 <MyGame_Example_Monster_print_json_table+0x4fc>
     6d8:	mov	r3, #10
     6dc:	str	r2, [sp, #4]
     6e0:	str	r3, [sp]
     6e4:	mov	r1, r5
     6e8:	mov	r0, r4
     6ec:	ldr	r3, [pc, #196]	; 7b8 <MyGame_Example_Monster_print_json_table+0x500>
     6f0:	mov	r2, #35	; 0x23
     6f4:	bl	0 <flatcc_json_printer_table_field>
     6f8:	add	sp, sp, #20
     6fc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
     700:	.word	0x489965e0
     704:	.word	0x40400000
	...
     710:	.word	0x000000f8
     714:	.word	0x000000fc
     718:	.word	0x00000104
     71c:	.word	0x00000108
     720:	.word	0x00000110
     724:	.word	0x00000000
     728:	.word	0x0000011c
	...
     734:	.word	0x00000124
     738:	.word	0x00000000
     73c:	.word	0x0000012c
     740:	.word	0x00000134
     744:	.word	0x00000000
     748:	.word	0x00000148
     74c:	.word	0x0000015c
     750:	.word	0x00000164
     754:	.word	0x00000000
     758:	.word	0x0000017c
     75c:	.word	0x00000188
     760:	.word	0x00000194
     764:	.word	0x000001a8
     768:	.word	0x000001bc
     76c:	.word	0x000001d0
     770:	.word	0x000001e4
     774:	.word	0x000001f8
     778:	.word	0x0000020c
     77c:	.word	0x00000220
     780:	.word	0x00000234
     784:	.word	0x00000248
     788:	.word	0x00000250
     78c:	.word	0x00000258
     790:	.word	0x00000260
     794:	.word	0x00000000
     798:	.word	0x00000274
     79c:	.word	0x0000028c
     7a0:	.word	0x00000294
     7a4:	.word	0x0000029c
     7a8:	.word	0x000002ac
     7ac:	.word	0x00000000
     7b0:	.word	0x000002c0
     7b4:	.word	0x00000000
     7b8:	.word	0x000002d8

000007bc <MyGame_Example_TestBase64_print_json_table>:
     7bc:	push	{r4, r5, r6, lr}
     7c0:	sub	sp, sp, #8
     7c4:	mov	r4, #0
     7c8:	mov	r3, #4
     7cc:	mov	r2, r4
     7d0:	str	r3, [sp]
     7d4:	str	r4, [sp, #4]
     7d8:	ldr	r3, [pc, #80]	; 830 <MyGame_Example_TestBase64_print_json_table+0x74>
     7dc:	mov	r5, r0
     7e0:	mov	r6, r1
     7e4:	bl	0 <flatcc_json_printer_uint8_vector_base64_field>
     7e8:	mov	r2, #1
     7ec:	mov	r3, #7
     7f0:	mov	r1, r6
     7f4:	mov	r0, r5
     7f8:	str	r2, [sp, #4]
     7fc:	str	r3, [sp]
     800:	ldr	r3, [pc, #44]	; 834 <MyGame_Example_TestBase64_print_json_table+0x78>
     804:	bl	0 <flatcc_json_printer_uint8_vector_base64_field>
     808:	mov	r3, #6
     80c:	str	r3, [sp]
     810:	str	r4, [sp, #4]
     814:	mov	r1, r6
     818:	mov	r0, r5
     81c:	ldr	r3, [pc, #20]	; 838 <MyGame_Example_TestBase64_print_json_table+0x7c>
     820:	mov	r2, #2
     824:	bl	0 <flatcc_json_printer_uint8_vector_base64_field>
     828:	add	sp, sp, #8
     82c:	pop	{r4, r5, r6, pc}
     830:	.word	0x000002e4
     834:	.word	0x000002ec
     838:	.word	0x000002f4

0000083c <MyGame_Example_Ability_print_json_struct>:
     83c:	push	{r4, r5, lr}
     840:	sub	sp, sp, #12
     844:	ldr	ip, [pc, #72]	; 894 <MyGame_Example_Ability_print_json_struct+0x58>
     848:	mov	r4, r1
     84c:	mov	r3, #0
     850:	mov	r1, #2
     854:	mov	r2, r4
     858:	str	ip, [sp]
     85c:	str	r1, [sp, #4]
     860:	mov	r1, r3
     864:	mov	r5, r0
     868:	bl	0 <flatcc_json_printer_uint32_struct_field>
     86c:	ldr	r1, [pc, #36]	; 898 <MyGame_Example_Ability_print_json_struct+0x5c>
     870:	mov	r3, #8
     874:	mov	r2, r4
     878:	stm	sp, {r1, r3}
     87c:	mov	r0, r5
     880:	mov	r3, #4
     884:	mov	r1, #1
     888:	bl	0 <flatcc_json_printer_uint32_struct_field>
     88c:	add	sp, sp, #12
     890:	pop	{r4, r5, pc}
     894:	.word	0x000002fc
     898:	.word	0x00000300

0000089c <MyGame_Example_Stat_print_json_table>:
     89c:	push	{r4, r5, r6, r8, r9, lr}
     8a0:	sub	sp, sp, #16
     8a4:	mov	r6, #2
     8a8:	str	r6, [sp]
     8ac:	ldr	r3, [pc, #92]	; 910 <MyGame_Example_Stat_print_json_table+0x74>
     8b0:	mov	r2, #0
     8b4:	mov	r8, #0
     8b8:	mov	r9, #0
     8bc:	mov	r4, r0
     8c0:	mov	r5, r1
     8c4:	bl	0 <flatcc_json_printer_string_field>
     8c8:	mov	r3, #3
     8cc:	mov	r1, r5
     8d0:	mov	r0, r4
     8d4:	str	r3, [sp]
     8d8:	strd	r8, [sp, #8]
     8dc:	ldr	r3, [pc, #48]	; 914 <MyGame_Example_Stat_print_json_table+0x78>
     8e0:	mov	r2, #1
     8e4:	bl	0 <flatcc_json_printer_int64_field>
     8e8:	mov	ip, #0
     8ec:	mov	r3, #5
     8f0:	mov	r2, r6
     8f4:	stm	sp, {r3, ip}
     8f8:	mov	r1, r5
     8fc:	mov	r0, r4
     900:	ldr	r3, [pc, #16]	; 918 <MyGame_Example_Stat_print_json_table+0x7c>
     904:	bl	0 <flatcc_json_printer_uint16_field>
     908:	add	sp, sp, #16
     90c:	pop	{r4, r5, r6, r8, r9, pc}
     910:	.word	0x000002fc
     914:	.word	0x0000030c
     918:	.word	0x00000310

0000091c <MyGame_Example_Test_print_json_struct>:
     91c:	push	{r4, r5, r6, lr}
     920:	sub	sp, sp, #8
     924:	ldr	ip, [pc, #72]	; 974 <MyGame_Example_Test_print_json_struct+0x58>
     928:	mov	r4, #1
     92c:	mov	r3, #0
     930:	mov	r5, r1
     934:	mov	r2, r1
     938:	str	ip, [sp]
     93c:	mov	r1, r3
     940:	str	r4, [sp, #4]
     944:	mov	r6, r0
     948:	bl	0 <flatcc_json_printer_int16_struct_field>
     94c:	ldr	r3, [pc, #36]	; 978 <MyGame_Example_Test_print_json_struct+0x5c>
     950:	str	r4, [sp, #4]
     954:	str	r3, [sp]
     958:	mov	r2, r5
     95c:	mov	r1, r4
     960:	mov	r0, r6
     964:	mov	r3, #2
     968:	bl	0 <flatcc_json_printer_int8_struct_field>
     96c:	add	sp, sp, #8
     970:	pop	{r4, r5, r6, pc}
     974:	.word	0x00000318
     978:	.word	0x0000031c

0000097c <MyGame_Example_Any_print_json_union>:
     97c:	ldrb	r3, [r1, #8]
     980:	sub	r3, r3, #1
     984:	cmp	r3, #3
     988:	ldrls	pc, [pc, r3, lsl #2]
     98c:	b	9c0 <MyGame_Example_Any_print_json_union+0x44>
     990:	.word	0x000009b8
     994:	.word	0x000009b0
     998:	.word	0x000009a8
     99c:	.word	0x000009a0
     9a0:	ldr	r2, [pc, #28]	; 9c4 <MyGame_Example_Any_print_json_union+0x48>
     9a4:	b	0 <flatcc_json_printer_union_table>
     9a8:	ldr	r2, [pc, #24]	; 9c8 <MyGame_Example_Any_print_json_union+0x4c>
     9ac:	b	0 <flatcc_json_printer_union_table>
     9b0:	ldr	r2, [pc, #20]	; 9cc <MyGame_Example_Any_print_json_union+0x50>
     9b4:	b	0 <flatcc_json_printer_union_table>
     9b8:	ldr	r2, [pc, #16]	; 9d0 <MyGame_Example_Any_print_json_union+0x54>
     9bc:	b	0 <flatcc_json_printer_union_table>
     9c0:	bx	lr
	...

000009d4 <MyGame_Example_Alt_print_json_table>:
     9d4:	push	{r4, r5, lr}
     9d8:	sub	sp, sp, #20
     9dc:	ldr	r2, [pc, #112]	; a54 <MyGame_Example_Alt_print_json_table+0x80>
     9e0:	mov	r3, #6
     9e4:	str	r2, [sp, #4]
     9e8:	str	r3, [sp]
     9ec:	mov	r2, #0
     9f0:	ldr	r3, [pc, #96]	; a58 <MyGame_Example_Alt_print_json_table+0x84>
     9f4:	mov	r4, r0
     9f8:	mov	r5, r1
     9fc:	bl	0 <flatcc_json_printer_table_field>
     a00:	ldr	r2, [pc, #84]	; a5c <MyGame_Example_Alt_print_json_table+0x88>
     a04:	mov	r3, #5
     a08:	mov	r1, r5
     a0c:	mov	r0, r4
     a10:	str	r2, [sp, #4]
     a14:	str	r3, [sp]
     a18:	mov	r2, #1
     a1c:	ldr	r3, [pc, #60]	; a60 <MyGame_Example_Alt_print_json_table+0x8c>
     a20:	bl	0 <flatcc_json_printer_table_field>
     a24:	ldr	ip, [pc, #56]	; a64 <MyGame_Example_Alt_print_json_table+0x90>
     a28:	ldr	r2, [pc, #56]	; a68 <MyGame_Example_Alt_print_json_table+0x94>
     a2c:	mov	r3, #7
     a30:	str	r3, [sp]
     a34:	stmib	sp, {r2, ip}
     a38:	mov	r1, r5
     a3c:	mov	r0, r4
     a40:	ldr	r3, [pc, #36]	; a6c <MyGame_Example_Alt_print_json_table+0x98>
     a44:	mov	r2, #3
     a48:	bl	0 <flatcc_json_printer_union_vector_field>
     a4c:	add	sp, sp, #20
     a50:	pop	{r4, r5, pc}
     a54:	.word	0x00000000
     a58:	.word	0x00000320
     a5c:	.word	0x00000000
     a60:	.word	0x00000328
	...
     a6c:	.word	0x00000330

00000a70 <Fantasy_Movie_print_json_table>:
     a70:	push	{r4, r5, r6, r7, r8, r9, lr}
     a74:	mov	r3, #14
     a78:	ldr	r5, [pc, #160]	; b20 <Fantasy_Movie_print_json_table+0xb0>
     a7c:	ldr	r4, [pc, #160]	; b24 <Fantasy_Movie_print_json_table+0xb4>
     a80:	sub	sp, sp, #20
     a84:	mov	r6, r0
     a88:	mov	r7, r1
     a8c:	stm	sp, {r3, r4, r5}
     a90:	mov	r9, #10
     a94:	ldr	r3, [pc, #140]	; b28 <Fantasy_Movie_print_json_table+0xb8>
     a98:	mov	r2, #1
     a9c:	bl	0 <flatcc_json_printer_union_field>
     aa0:	mov	r8, #9
     aa4:	mov	r1, r7
     aa8:	mov	r0, r6
     aac:	stmib	sp, {r4, r5}
     ab0:	str	r9, [sp]
     ab4:	ldr	r3, [pc, #112]	; b2c <Fantasy_Movie_print_json_table+0xbc>
     ab8:	mov	r2, #3
     abc:	bl	0 <flatcc_json_printer_union_field>
     ac0:	mov	r1, r7
     ac4:	mov	r0, r6
     ac8:	stmib	sp, {r4, r5}
     acc:	str	r8, [sp]
     ad0:	ldr	r3, [pc, #88]	; b30 <Fantasy_Movie_print_json_table+0xc0>
     ad4:	mov	r2, #5
     ad8:	bl	0 <flatcc_json_printer_union_field>
     adc:	mov	r3, #5
     ae0:	mov	r1, r7
     ae4:	mov	r0, r6
     ae8:	str	r3, [sp]
     aec:	stmib	sp, {r4, r5}
     af0:	ldr	r3, [pc, #60]	; b34 <Fantasy_Movie_print_json_table+0xc4>
     af4:	mov	r2, #7
     af8:	bl	0 <flatcc_json_printer_union_field>
     afc:	stmib	sp, {r4, r5}
     b00:	str	r9, [sp]
     b04:	mov	r2, r8
     b08:	mov	r1, r7
     b0c:	mov	r0, r6
     b10:	ldr	r3, [pc, #32]	; b38 <Fantasy_Movie_print_json_table+0xc8>
     b14:	bl	0 <flatcc_json_printer_union_vector_field>
     b18:	add	sp, sp, #20
     b1c:	pop	{r4, r5, r6, r7, r8, r9, pc}
	...
     b28:	.word	0x00000338
     b2c:	.word	0x00000348
     b30:	.word	0x00000354
     b34:	.word	0x00000360
     b38:	.word	0x00000368

00000b3c <Fantasy_Character_print_json_union>:
     b3c:	ldrb	r3, [r1, #8]
     b40:	cmp	r3, #9
     b44:	beq	b7c <Fantasy_Character_print_json_union+0x40>
     b48:	bls	b64 <Fantasy_Character_print_json_union+0x28>
     b4c:	cmp	r3, #11
     b50:	beq	b60 <Fantasy_Character_print_json_union+0x24>
     b54:	bcc	b7c <Fantasy_Character_print_json_union+0x40>
     b58:	cmp	r3, #255	; 0xff
     b5c:	bne	b84 <Fantasy_Character_print_json_union+0x48>
     b60:	b	0 <flatcc_json_printer_union_string>
     b64:	cmp	r3, #2
     b68:	beq	b8c <Fantasy_Character_print_json_union+0x50>
     b6c:	cmp	r3, #8
     b70:	bne	b88 <Fantasy_Character_print_json_union+0x4c>
     b74:	ldr	r2, [pc, #24]	; b94 <Fantasy_Character_print_json_union+0x58>
     b78:	b	0 <flatcc_json_printer_union_struct>
     b7c:	ldr	r2, [pc, #20]	; b98 <Fantasy_Character_print_json_union+0x5c>
     b80:	b	0 <flatcc_json_printer_union_struct>
     b84:	bx	lr
     b88:	bx	lr
     b8c:	ldr	r2, [pc, #8]	; b9c <Fantasy_Character_print_json_union+0x60>
     b90:	b	0 <flatcc_json_printer_union_table>
	...

00000ba0 <Fantasy_BookReader_print_json_struct>:
     ba0:	push	{lr}		; (str lr, [sp, #-4]!)
     ba4:	sub	sp, sp, #12
     ba8:	ldr	lr, [pc, #32]	; bd0 <Fantasy_BookReader_print_json_struct+0x30>
     bac:	mov	ip, #10
     bb0:	mov	r3, #0
     bb4:	mov	r2, r1
     bb8:	str	lr, [sp]
     bbc:	str	ip, [sp, #4]
     bc0:	mov	r1, r3
     bc4:	bl	0 <flatcc_json_printer_int32_struct_field>
     bc8:	add	sp, sp, #12
     bcc:	pop	{pc}		; (ldr pc, [sp], #4)
     bd0:	.word	0x00000374

00000bd4 <Fantasy_Rapunzel_print_json_struct>:
     bd4:	push	{lr}		; (str lr, [sp, #-4]!)
     bd8:	sub	sp, sp, #12
     bdc:	ldr	lr, [pc, #32]	; c04 <Fantasy_Rapunzel_print_json_struct+0x30>
     be0:	mov	ip, #11
     be4:	mov	r3, #0
     be8:	mov	r2, r1
     bec:	str	lr, [sp]
     bf0:	str	ip, [sp, #4]
     bf4:	mov	r1, r3
     bf8:	bl	0 <flatcc_json_printer_uint16_struct_field>
     bfc:	add	sp, sp, #12
     c00:	pop	{pc}		; (ldr pc, [sp], #4)
     c04:	.word	0x00000380

00000c08 <Fantasy_Character_print_json_union_type>:
     c08:	cmp	r1, #9
     c0c:	mov	r3, r0
     c10:	beq	c88 <Fantasy_Character_print_json_union_type+0x80>
     c14:	bls	c38 <Fantasy_Character_print_json_union_type+0x30>
     c18:	cmp	r1, #11
     c1c:	beq	c54 <Fantasy_Character_print_json_union_type+0x4c>
     c20:	bcc	c7c <Fantasy_Character_print_json_union_type+0x74>
     c24:	cmp	r1, #255	; 0xff
     c28:	bne	c60 <Fantasy_Character_print_json_union_type+0x58>
     c2c:	mov	r2, #6
     c30:	ldr	r1, [pc, #92]	; c94 <Fantasy_Character_print_json_union_type+0x8c>
     c34:	b	0 <flatcc_json_printer_enum>
     c38:	cmp	r1, #2
     c3c:	beq	c70 <Fantasy_Character_print_json_union_type+0x68>
     c40:	cmp	r1, #8
     c44:	bne	c60 <Fantasy_Character_print_json_union_type+0x58>
     c48:	mov	r2, r1
     c4c:	ldr	r1, [pc, #68]	; c98 <Fantasy_Character_print_json_union_type+0x90>
     c50:	b	0 <flatcc_json_printer_enum>
     c54:	mov	r2, #5
     c58:	ldr	r1, [pc, #60]	; c9c <Fantasy_Character_print_json_union_type+0x94>
     c5c:	b	0 <flatcc_json_printer_enum>
     c60:	mov	r0, r3
     c64:	mov	r2, #4
     c68:	ldr	r1, [pc, #48]	; ca0 <Fantasy_Character_print_json_union_type+0x98>
     c6c:	b	0 <flatcc_json_printer_enum>
     c70:	mov	r2, #5
     c74:	ldr	r1, [pc, #40]	; ca4 <Fantasy_Character_print_json_union_type+0x9c>
     c78:	b	0 <flatcc_json_printer_enum>
     c7c:	mov	r2, #7
     c80:	ldr	r1, [pc, #32]	; ca8 <Fantasy_Character_print_json_union_type+0xa0>
     c84:	b	0 <flatcc_json_printer_enum>
     c88:	mov	r2, #5
     c8c:	ldr	r1, [pc, #24]	; cac <Fantasy_Character_print_json_union_type+0xa4>
     c90:	b	0 <flatcc_json_printer_enum>
     c94:	.word	0x000003b8
     c98:	.word	0x00000394
     c9c:	.word	0x000003b0
     ca0:	.word	0x000003c0
     ca4:	.word	0x0000038c
     ca8:	.word	0x000003a8
     cac:	.word	0x000003a0

00000cb0 <MyGame_Example_TestSimpleTableWithEnum_print_json_table>:
     cb0:	push	{r4, r5, r6, r7, lr}
     cb4:	mov	r3, #5
     cb8:	ldr	r7, [pc, #124]	; d3c <MyGame_Example_TestSimpleTableWithEnum_print_json_table+0x8c>
     cbc:	sub	sp, sp, #20
     cc0:	mov	r4, #2
     cc4:	mov	r2, #0
     cc8:	stm	sp, {r3, r4, r7}
     ccc:	mov	r5, r0
     cd0:	ldr	r3, [pc, #104]	; d40 <MyGame_Example_TestSimpleTableWithEnum_print_json_table+0x90>
     cd4:	mov	r6, r1
     cd8:	bl	0 <flatcc_json_printer_int8_enum_field>
     cdc:	mov	r3, #6
     ce0:	mov	r1, r6
     ce4:	mov	r0, r5
     ce8:	str	r3, [sp]
     cec:	stmib	sp, {r4, r7}
     cf0:	ldr	r3, [pc, #76]	; d44 <MyGame_Example_TestSimpleTableWithEnum_print_json_table+0x94>
     cf4:	mov	r2, #1
     cf8:	bl	0 <flatcc_json_printer_int8_enum_field>
     cfc:	mov	r2, r4
     d00:	mov	r1, r6
     d04:	mov	r0, r5
     d08:	str	r4, [sp, #4]
     d0c:	str	r4, [sp]
     d10:	ldr	r3, [pc, #48]	; d48 <MyGame_Example_TestSimpleTableWithEnum_print_json_table+0x98>
     d14:	bl	0 <flatcc_json_printer_uint8_field>
     d18:	mov	r2, #3
     d1c:	str	r4, [sp, #4]
     d20:	mov	r1, r6
     d24:	mov	r0, r5
     d28:	str	r2, [sp]
     d2c:	ldr	r3, [pc, #24]	; d4c <MyGame_Example_TestSimpleTableWithEnum_print_json_table+0x9c>
     d30:	bl	0 <flatcc_json_printer_uint8_field>
     d34:	add	sp, sp, #20
     d38:	pop	{r4, r5, r6, r7, pc}
     d3c:	.word	0x00000000
     d40:	.word	0x0000011c
     d44:	.word	0x000003c8
     d48:	.word	0x000003d0
     d4c:	.word	0x000003d4

00000d50 <MyGame_Example_Color_print_json_enum>:
     d50:	push	{r4, r5, r6, r7, r8, lr}
     d54:	uxtb	r4, r1
     d58:	tst	r4, #244	; 0xf4
     d5c:	movne	r5, #1
     d60:	moveq	r5, #0
     d64:	cmp	r4, #0
     d68:	orreq	r5, r5, #1
     d6c:	cmp	r5, #0
     d70:	beq	d7c <MyGame_Example_Color_print_json_enum+0x2c>
     d74:	pop	{r4, r5, r6, r7, r8, lr}
     d78:	b	0 <flatcc_json_printer_int8>
     d7c:	sub	r3, r4, #1
     d80:	tst	r3, r4
     d84:	movne	r7, #1
     d88:	moveq	r7, #0
     d8c:	mov	r1, r7
     d90:	mov	r6, r0
     d94:	bl	0 <flatcc_json_printer_delimit_enum_flags>
     d98:	ands	r1, r4, #1
     d9c:	bne	dc0 <MyGame_Example_Color_print_json_enum+0x70>
     da0:	tst	r4, #2
     da4:	bne	df0 <MyGame_Example_Color_print_json_enum+0xa0>
     da8:	tst	r4, #8
     dac:	bne	ddc <MyGame_Example_Color_print_json_enum+0x8c>
     db0:	mov	r1, r7
     db4:	mov	r0, r6
     db8:	pop	{r4, r5, r6, r7, r8, lr}
     dbc:	b	0 <flatcc_json_printer_delimit_enum_flags>
     dc0:	mov	r1, r5
     dc4:	mov	r3, #3
     dc8:	ldr	r2, [pc, #60]	; e0c <MyGame_Example_Color_print_json_enum+0xbc>
     dcc:	mov	r0, r6
     dd0:	bl	0 <flatcc_json_printer_enum_flag>
     dd4:	mov	r1, #1
     dd8:	b	da0 <MyGame_Example_Color_print_json_enum+0x50>
     ddc:	mov	r3, #4
     de0:	ldr	r2, [pc, #40]	; e10 <MyGame_Example_Color_print_json_enum+0xc0>
     de4:	mov	r0, r6
     de8:	bl	0 <flatcc_json_printer_enum_flag>
     dec:	b	db0 <MyGame_Example_Color_print_json_enum+0x60>
     df0:	add	r5, r1, #1
     df4:	mov	r3, #5
     df8:	ldr	r2, [pc, #20]	; e14 <MyGame_Example_Color_print_json_enum+0xc4>
     dfc:	mov	r0, r6
     e00:	bl	0 <flatcc_json_printer_enum_flag>
     e04:	mov	r1, r5
     e08:	b	da8 <MyGame_Example_Color_print_json_enum+0x58>
     e0c:	.word	0x000003d8
     e10:	.word	0x000003e4
     e14:	.word	0x000003dc

00000e18 <MyGame_Example_Vec3_print_json_struct>:
     e18:	push	{r4, r5, r6, lr}
     e1c:	sub	sp, sp, #16
     e20:	ldr	ip, [pc, #216]	; f00 <MyGame_Example_Vec3_print_json_struct+0xe8>
     e24:	mov	r6, #1
     e28:	mov	r3, #0
     e2c:	mov	r4, r1
     e30:	str	ip, [sp]
     e34:	mov	r2, r1
     e38:	str	r6, [sp, #4]
     e3c:	mov	r1, r3
     e40:	mov	r5, r0
     e44:	bl	0 <flatcc_json_printer_float_struct_field>
     e48:	ldr	r3, [pc, #180]	; f04 <MyGame_Example_Vec3_print_json_struct+0xec>
     e4c:	str	r6, [sp, #4]
     e50:	mov	r2, r4
     e54:	mov	r1, r6
     e58:	mov	r0, r5
     e5c:	str	r3, [sp]
     e60:	mov	r3, #4
     e64:	bl	0 <flatcc_json_printer_float_struct_field>
     e68:	ldr	r3, [pc, #152]	; f08 <MyGame_Example_Vec3_print_json_struct+0xf0>
     e6c:	str	r6, [sp, #4]
     e70:	mov	r2, r4
     e74:	mov	r0, r5
     e78:	str	r3, [sp]
     e7c:	mov	r1, #2
     e80:	mov	r3, #8
     e84:	bl	0 <flatcc_json_printer_float_struct_field>
     e88:	ldr	r3, [pc, #124]	; f0c <MyGame_Example_Vec3_print_json_struct+0xf4>
     e8c:	mov	r6, #5
     e90:	mov	r2, r4
     e94:	mov	r0, r5
     e98:	stm	sp, {r3, r6}
     e9c:	mov	r1, #3
     ea0:	mov	r3, #16
     ea4:	bl	0 <flatcc_json_printer_double_struct_field>
     ea8:	ldr	r1, [pc, #96]	; f10 <MyGame_Example_Vec3_print_json_struct+0xf8>
     eac:	ldr	r3, [pc, #96]	; f14 <MyGame_Example_Vec3_print_json_struct+0xfc>
     eb0:	mov	r2, r4
     eb4:	mov	r0, r5
     eb8:	str	r1, [sp, #8]
     ebc:	str	r3, [sp]
     ec0:	str	r6, [sp, #4]
     ec4:	mov	r3, #24
     ec8:	mov	r1, #4
     ecc:	bl	0 <flatcc_json_printer_int8_enum_struct_field>
     ed0:	ldr	ip, [pc, #64]	; f18 <MyGame_Example_Vec3_print_json_struct+0x100>
     ed4:	ldr	r3, [pc, #64]	; f1c <MyGame_Example_Vec3_print_json_struct+0x104>
     ed8:	str	r6, [sp, #4]
     edc:	str	r3, [sp]
     ee0:	mov	r2, r4
     ee4:	mov	r1, r6
     ee8:	mov	r0, r5
     eec:	str	ip, [sp, #8]
     ef0:	mov	r3, #26
     ef4:	bl	0 <flatcc_json_printer_embedded_struct_field>
     ef8:	add	sp, sp, #16
     efc:	pop	{r4, r5, r6, pc}
     f00:	.word	0x000003ec
     f04:	.word	0x000003f0
     f08:	.word	0x000003f4
     f0c:	.word	0x000003f8
     f10:	.word	0x00000000
     f14:	.word	0x00000400
     f18:	.word	0x00000000
     f1c:	.word	0x00000408

00000f20 <MyGame_Example_Any_print_json_union_type>:
     f20:	sub	r1, r1, #1
     f24:	cmp	r1, #3
     f28:	ldrls	pc, [pc, r1, lsl #2]
     f2c:	b	f70 <MyGame_Example_Any_print_json_union_type+0x50>
     f30:	.word	0x00000f64
     f34:	.word	0x00000f58
     f38:	.word	0x00000f4c
     f3c:	.word	0x00000f40
     f40:	mov	r2, #3
     f44:	ldr	r1, [pc, #48]	; f7c <MyGame_Example_Any_print_json_union_type+0x5c>
     f48:	b	0 <flatcc_json_printer_enum>
     f4c:	mov	r2, #8
     f50:	ldr	r1, [pc, #40]	; f80 <MyGame_Example_Any_print_json_union_type+0x60>
     f54:	b	0 <flatcc_json_printer_enum>
     f58:	mov	r2, #23
     f5c:	ldr	r1, [pc, #32]	; f84 <MyGame_Example_Any_print_json_union_type+0x64>
     f60:	b	0 <flatcc_json_printer_enum>
     f64:	mov	r2, #7
     f68:	ldr	r1, [pc, #24]	; f88 <MyGame_Example_Any_print_json_union_type+0x68>
     f6c:	b	0 <flatcc_json_printer_enum>
     f70:	mov	r2, #4
     f74:	ldr	r1, [pc, #16]	; f8c <MyGame_Example_Any_print_json_union_type+0x6c>
     f78:	b	0 <flatcc_json_printer_enum>
     f7c:	.word	0x0000043c
     f80:	.word	0x00000430
     f84:	.word	0x00000418
     f88:	.word	0x00000410
     f8c:	.word	0x000003c0

00000f90 <readfile.constprop.5>:
     f90:	push	{r4, r5, r6, r7, r8, r9, lr}
     f94:	subs	r9, r1, #0
     f98:	sub	sp, sp, #12
     f9c:	ldr	r1, [pc, #208]	; 1074 <readfile.constprop.5+0xe4>
     fa0:	addeq	r9, sp, #4
     fa4:	bl	0 <fopen>
     fa8:	subs	r6, r0, #0
     fac:	beq	106c <readfile.constprop.5+0xdc>
     fb0:	mov	r2, #2
     fb4:	mov	r1, #0
     fb8:	bl	0 <fseek>
     fbc:	mov	r0, r6
     fc0:	bl	0 <ftell>
     fc4:	cmp	r0, #10240	; 0x2800
     fc8:	mov	r5, r0
     fcc:	str	r0, [r9]
     fd0:	bhi	1060 <readfile.constprop.5+0xd0>
     fd4:	mov	r0, r6
     fd8:	bl	0 <rewind>
     fdc:	cmp	r5, #0
     fe0:	movne	r0, r5
     fe4:	moveq	r0, #1
     fe8:	bl	0 <malloc>
     fec:	subs	r7, r0, #0
     ff0:	beq	1060 <readfile.constprop.5+0xd0>
     ff4:	mov	r4, #0
     ff8:	mov	r8, #1
     ffc:	b	1004 <readfile.constprop.5+0x74>
    1000:	add	r4, r4, r0
    1004:	mov	r3, r6
    1008:	sub	r2, r5, r4
    100c:	mov	r1, r8
    1010:	add	r0, r7, r4
    1014:	bl	0 <fread>
    1018:	cmp	r0, #0
    101c:	bne	1000 <readfile.constprop.5+0x70>
    1020:	cmp	r5, r4
    1024:	mov	r0, r6
    1028:	bne	1040 <readfile.constprop.5+0xb0>
    102c:	bl	0 <fclose>
    1030:	mov	r0, r7
    1034:	str	r5, [r9]
    1038:	add	sp, sp, #12
    103c:	pop	{r4, r5, r6, r7, r8, r9, pc}
    1040:	bl	0 <fclose>
    1044:	mov	r0, r7
    1048:	bl	0 <free>
    104c:	mov	r7, #0
    1050:	mov	r0, r7
    1054:	str	r5, [r9]
    1058:	add	sp, sp, #12
    105c:	pop	{r4, r5, r6, r7, r8, r9, pc}
    1060:	mov	r0, r6
    1064:	bl	0 <fclose>
    1068:	b	104c <readfile.constprop.5+0xbc>
    106c:	mov	r5, r6
    1070:	b	104c <readfile.constprop.5+0xbc>
    1074:	.word	0x00000440

00001078 <MyGame_InParentNamespace_print_json_table>:
    1078:	bx	lr

0000107c <test_print>:
    107c:	push	{r4, r5, r6, r7, r8, r9, lr}
    1080:	sub	sp, sp, #76	; 0x4c
    1084:	ldr	r6, [pc, #576]	; 12cc <test_print+0x250>
    1088:	mov	r5, #0
    108c:	ldr	r1, [pc, #572]	; 12d0 <test_print+0x254>
    1090:	ldr	r0, [r6]
    1094:	str	r5, [sp, #12]
    1098:	str	r5, [sp, #16]
    109c:	str	r5, [sp, #20]
    10a0:	bl	0 <fopen>
    10a4:	subs	r4, r0, #0
    10a8:	beq	12b0 <test_print+0x234>
    10ac:	ldr	r8, [pc, #544]	; 12d4 <test_print+0x258>
    10b0:	add	r0, sp, #24
    10b4:	mov	r1, r4
    10b8:	bl	0 <flatcc_json_printer_init>
    10bc:	ldr	r7, [r8]
    10c0:	mov	r2, #2
    10c4:	mov	r3, #1
    10c8:	cmp	r7, #0
    10cc:	strb	r5, [sp, #51]	; 0x33
    10d0:	strb	r2, [sp, #49]	; 0x31
    10d4:	strb	r3, [sp, #50]	; 0x32
    10d8:	beq	10f0 <test_print+0x74>
    10dc:	ldr	r1, [pc, #500]	; 12d8 <test_print+0x25c>
    10e0:	mov	r0, r7
    10e4:	bl	0 <strcmp>
    10e8:	cmp	r0, #0
    10ec:	bne	1218 <test_print+0x19c>
    10f0:	ldr	r7, [pc, #484]	; 12dc <test_print+0x260>
    10f4:	mov	r3, #288	; 0x120
    10f8:	str	r3, [sp, #12]
    10fc:	add	r1, sp, #16
    1100:	ldr	r0, [r6, #4]
    1104:	bl	f90 <readfile.constprop.5>
    1108:	subs	r5, r0, #0
    110c:	beq	125c <test_print+0x1e0>
    1110:	ldr	r3, [pc, #456]	; 12e0 <test_print+0x264>
    1114:	ldr	r2, [sp, #12]
    1118:	str	r3, [sp]
    111c:	mov	r1, r7
    1120:	ldr	r3, [pc, #444]	; 12e4 <test_print+0x268>
    1124:	add	r0, sp, #24
    1128:	bl	0 <flatcc_json_printer_table_as_root>
    112c:	ldr	r3, [sp, #68]	; 0x44
    1130:	mov	r1, #1
    1134:	add	r0, sp, #24
    1138:	blx	r3
    113c:	ldr	r3, [sp, #60]	; 0x3c
    1140:	cmp	r3, #0
    1144:	bne	1250 <test_print+0x1d4>
    1148:	mov	r0, r4
    114c:	bl	0 <fclose>
    1150:	add	r1, sp, #20
    1154:	ldr	r0, [r6]
    1158:	bl	f90 <readfile.constprop.5>
    115c:	subs	r9, r0, #0
    1160:	beq	1294 <test_print+0x218>
    1164:	ldr	r2, [sp, #20]
    1168:	ldr	r3, [sp, #16]
    116c:	cmp	r2, r3
    1170:	beq	11ec <test_print+0x170>
    1174:	ldr	r3, [pc, #364]	; 12e8 <test_print+0x26c>
    1178:	mov	r2, #54	; 0x36
    117c:	mov	r1, #1
    1180:	ldr	r3, [r3]
    1184:	ldr	r0, [pc, #352]	; 12ec <test_print+0x270>
    1188:	bl	0 <fwrite>
    118c:	mvn	r6, #0
    1190:	add	r0, sp, #24
    1194:	bl	0 <flatcc_json_printer_clear>
    1198:	ldr	r4, [r8]
    119c:	cmp	r4, #0
    11a0:	movne	r4, #0
    11a4:	beq	11b8 <test_print+0x13c>
    11a8:	mov	r0, r7
    11ac:	bl	0 <free>
    11b0:	cmp	r5, #0
    11b4:	beq	11c0 <test_print+0x144>
    11b8:	mov	r0, r5
    11bc:	bl	0 <free>
    11c0:	cmp	r9, #0
    11c4:	beq	11d0 <test_print+0x154>
    11c8:	mov	r0, r9
    11cc:	bl	0 <free>
    11d0:	cmp	r4, #0
    11d4:	beq	11e0 <test_print+0x164>
    11d8:	mov	r0, r4
    11dc:	bl	0 <fclose>
    11e0:	mov	r0, r6
    11e4:	add	sp, sp, #76	; 0x4c
    11e8:	pop	{r4, r5, r6, r7, r8, r9, pc}
    11ec:	mov	r1, r5
    11f0:	bl	0 <memcmp>
    11f4:	subs	r6, r0, #0
    11f8:	bne	1174 <test_print+0xf8>
    11fc:	ldr	r3, [pc, #228]	; 12e8 <test_print+0x26c>
    1200:	mov	r2, #26
    1204:	mov	r1, #1
    1208:	ldr	r3, [r3]
    120c:	ldr	r0, [pc, #220]	; 12f0 <test_print+0x274>
    1210:	bl	0 <fwrite>
    1214:	b	1190 <test_print+0x114>
    1218:	mov	r0, r7
    121c:	add	r1, sp, #12
    1220:	bl	f90 <readfile.constprop.5>
    1224:	subs	r7, r0, #0
    1228:	bne	10fc <test_print+0x80>
    122c:	ldr	r3, [pc, #180]	; 12e8 <test_print+0x26c>
    1230:	ldr	r2, [r8]
    1234:	ldr	r1, [pc, #184]	; 12f4 <test_print+0x278>
    1238:	ldr	r0, [r3]
    123c:	bl	0 <fprintf>
    1240:	add	r0, sp, #24
    1244:	bl	0 <flatcc_json_printer_clear>
    1248:	mvn	r6, #0
    124c:	b	11d0 <test_print+0x154>
    1250:	ldr	r0, [pc, #160]	; 12f8 <test_print+0x27c>
    1254:	bl	0 <puts>
    1258:	b	1148 <test_print+0xcc>
    125c:	ldr	r3, [pc, #132]	; 12e8 <test_print+0x26c>
    1260:	ldr	r2, [r6, #4]
    1264:	ldr	r1, [pc, #144]	; 12fc <test_print+0x280>
    1268:	ldr	r0, [r3]
    126c:	bl	0 <fprintf>
    1270:	add	r0, sp, #24
    1274:	bl	0 <flatcc_json_printer_clear>
    1278:	ldr	r3, [r8]
    127c:	cmp	r3, #0
    1280:	mvneq	r6, #0
    1284:	beq	11d8 <test_print+0x15c>
    1288:	mov	r9, r5
    128c:	mvn	r6, #0
    1290:	b	11a8 <test_print+0x12c>
    1294:	ldr	r3, [pc, #76]	; 12e8 <test_print+0x26c>
    1298:	ldr	r2, [r6]
    129c:	ldr	r1, [pc, #92]	; 1300 <test_print+0x284>
    12a0:	ldr	r0, [r3]
    12a4:	bl	0 <fprintf>
    12a8:	mvn	r6, #0
    12ac:	b	1190 <test_print+0x114>
    12b0:	ldr	r3, [pc, #48]	; 12e8 <test_print+0x26c>
    12b4:	ldr	r2, [r6]
    12b8:	ldr	r1, [pc, #68]	; 1304 <test_print+0x288>
    12bc:	ldr	r0, [r3]
    12c0:	bl	0 <fprintf>
    12c4:	mvn	r6, #0
    12c8:	b	11e0 <test_print+0x164>
    12cc:	.word	0x00000000
    12d0:	.word	0x00000444
    12d4:	.word	0x00000000
    12d8:	.word	0x00000468
	...
    12e4:	.word	0x000004c4
    12e8:	.word	0x00000000
    12ec:	.word	0x00000514
    12f0:	.word	0x0000054c
    12f4:	.word	0x0000046c
    12f8:	.word	0x000004cc
    12fc:	.word	0x00000498
    1300:	.word	0x000004ec
    1304:	.word	0x00000448

Disassembly of section .text.startup:

00000000 <main>:
   0:	push	{r4, r5, r6, lr}
   4:	mov	r2, #24
   8:	ldr	r6, [pc, #108]	; 7c <main+0x7c>
   c:	mov	r4, r0
  10:	mov	r5, r1
  14:	ldr	r3, [r6]
  18:	mov	r1, #1
  1c:	ldr	r0, [pc, #92]	; 80 <main+0x80>
  20:	bl	0 <fwrite>
  24:	cmp	r4, #1
  28:	cmpne	r4, #4
  2c:	bne	60 <main+0x60>
  30:	cmp	r4, #4
  34:	bne	58 <main+0x58>
  38:	ldr	r3, [pc, #68]	; 84 <main+0x84>
  3c:	ldr	r0, [pc, #68]	; 88 <main+0x88>
  40:	ldr	ip, [r5, #4]
  44:	ldr	r1, [r5, #8]
  48:	ldr	r2, [r5, #12]
  4c:	str	ip, [r0]
  50:	str	r1, [r3, #4]
  54:	str	r2, [r3]
  58:	pop	{r4, r5, r6, lr}
  5c:	b	107c <test_print>
  60:	ldr	r3, [r6]
  64:	mov	r2, #191	; 0xbf
  68:	mov	r1, #1
  6c:	ldr	r0, [pc, #24]	; 8c <main+0x8c>
  70:	bl	0 <fwrite>
  74:	mov	r0, #1
  78:	bl	0 <exit>
  7c:	.word	0x00000000
  80:	.word	0x00000568
	...
  8c:	.word	0x00000584
