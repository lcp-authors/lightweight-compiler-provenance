
../compcert-repos/stcorp-coda-3a25f25/CMakeFiles/coda_static.dir/libcoda/coda-mem.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <coda_mem_empty_record>:
   0:	str	fp, [sp, #-8]!
   4:	str	lr, [sp, #4]
   8:	add	fp, sp, #4
   c:	sub	sp, sp, #8
  10:	str	r0, [fp, #-8]
  14:	ldr	r3, [fp, #-8]
  18:	cmp	r3, #10
  1c:	bls	40 <coda_mem_empty_record+0x40>
  20:	movw	r3, #0
  24:	movt	r3, #0
  28:	mov	r2, #49	; 0x31
  2c:	movw	r1, #0
  30:	movt	r1, #0
  34:	movw	r0, #0
  38:	movt	r0, #0
  3c:	bl	0 <__assert_fail>
  40:	mrc	15, 0, r3, cr13, cr0, {3}
  44:	ldr	r1, [pc, #192]	; 10c <coda_mem_empty_record+0x10c>
  48:	ldr	r2, [fp, #-8]
  4c:	lsl	r2, r2, #2
  50:	add	r3, r2, r3
  54:	add	r3, r3, r1
  58:	ldr	r3, [r3]
  5c:	cmp	r3, #0
  60:	bne	dc <coda_mem_empty_record+0xdc>
  64:	ldr	r0, [fp, #-8]
  68:	bl	0 <coda_type_empty_record>
  6c:	mov	r3, r0
  70:	mov	r1, #0
  74:	mov	r0, r3
  78:	bl	0 <coda_mem_record_new>
  7c:	mrc	15, 0, r3, cr13, cr0, {3}
  80:	ldr	r1, [pc, #132]	; 10c <coda_mem_empty_record+0x10c>
  84:	ldr	r2, [fp, #-8]
  88:	lsl	r2, r2, #2
  8c:	add	r3, r2, r3
  90:	add	r3, r3, r1
  94:	str	r0, [r3]
  98:	mrc	15, 0, r3, cr13, cr0, {3}
  9c:	ldr	r1, [pc, #104]	; 10c <coda_mem_empty_record+0x10c>
  a0:	ldr	r2, [fp, #-8]
  a4:	lsl	r2, r2, #2
  a8:	add	r3, r2, r3
  ac:	add	r3, r3, r1
  b0:	ldr	r3, [r3]
  b4:	cmp	r3, #0
  b8:	bne	dc <coda_mem_empty_record+0xdc>
  bc:	movw	r3, #0
  c0:	movt	r3, #0
  c4:	mov	r2, #53	; 0x35
  c8:	movw	r1, #0
  cc:	movt	r1, #0
  d0:	movw	r0, #0
  d4:	movt	r0, #0
  d8:	bl	0 <__assert_fail>
  dc:	mrc	15, 0, r3, cr13, cr0, {3}
  e0:	ldr	r1, [pc, #36]	; 10c <coda_mem_empty_record+0x10c>
  e4:	ldr	r2, [fp, #-8]
  e8:	lsl	r2, r2, #2
  ec:	add	r3, r2, r3
  f0:	add	r3, r3, r1
  f4:	ldr	r3, [r3]
  f8:	mov	r0, r3
  fc:	sub	sp, fp, #4
 100:	ldr	fp, [sp]
 104:	add	sp, sp, #4
 108:	pop	{pc}		; (ldr pc, [sp], #4)
 10c:	.word	0x00000000

00000110 <coda_no_data_singleton>:
 110:	str	fp, [sp, #-8]!
 114:	str	lr, [sp, #4]
 118:	add	fp, sp, #4
 11c:	sub	sp, sp, #8
 120:	str	r0, [fp, #-8]
 124:	ldr	r3, [fp, #-8]
 128:	cmp	r3, #10
 12c:	bls	150 <coda_no_data_singleton+0x40>
 130:	movw	r3, #0
 134:	movt	r3, #0
 138:	mov	r2, #61	; 0x3d
 13c:	movw	r1, #0
 140:	movt	r1, #0
 144:	movw	r0, #0
 148:	movt	r0, #0
 14c:	bl	0 <__assert_fail>
 150:	mrc	15, 0, r3, cr13, cr0, {3}
 154:	ldr	r1, [pc, #176]	; 20c <coda_no_data_singleton+0xfc>
 158:	ldr	r2, [fp, #-8]
 15c:	lsl	r2, r2, #2
 160:	add	r3, r2, r3
 164:	add	r3, r3, r1
 168:	ldr	r3, [r3]
 16c:	cmp	r3, #0
 170:	bne	1dc <coda_no_data_singleton+0xcc>
 174:	ldr	r0, [fp, #-8]
 178:	bl	0 <coda_mem_no_data_new>
 17c:	mrc	15, 0, r3, cr13, cr0, {3}
 180:	ldr	r1, [pc, #132]	; 20c <coda_no_data_singleton+0xfc>
 184:	ldr	r2, [fp, #-8]
 188:	lsl	r2, r2, #2
 18c:	add	r3, r2, r3
 190:	add	r3, r3, r1
 194:	str	r0, [r3]
 198:	mrc	15, 0, r3, cr13, cr0, {3}
 19c:	ldr	r1, [pc, #104]	; 20c <coda_no_data_singleton+0xfc>
 1a0:	ldr	r2, [fp, #-8]
 1a4:	lsl	r2, r2, #2
 1a8:	add	r3, r2, r3
 1ac:	add	r3, r3, r1
 1b0:	ldr	r3, [r3]
 1b4:	cmp	r3, #0
 1b8:	bne	1dc <coda_no_data_singleton+0xcc>
 1bc:	movw	r3, #0
 1c0:	movt	r3, #0
 1c4:	mov	r2, #65	; 0x41
 1c8:	movw	r1, #0
 1cc:	movt	r1, #0
 1d0:	movw	r0, #0
 1d4:	movt	r0, #0
 1d8:	bl	0 <__assert_fail>
 1dc:	mrc	15, 0, r3, cr13, cr0, {3}
 1e0:	ldr	r1, [pc, #36]	; 20c <coda_no_data_singleton+0xfc>
 1e4:	ldr	r2, [fp, #-8]
 1e8:	lsl	r2, r2, #2
 1ec:	add	r3, r2, r3
 1f0:	add	r3, r3, r1
 1f4:	ldr	r3, [r3]
 1f8:	mov	r0, r3
 1fc:	sub	sp, fp, #4
 200:	ldr	fp, [sp]
 204:	add	sp, sp, #4
 208:	pop	{pc}		; (ldr pc, [sp], #4)
 20c:	.word	0x00000000

00000210 <coda_mem_done>:
 210:	str	fp, [sp, #-8]!
 214:	str	lr, [sp, #4]
 218:	add	fp, sp, #4
 21c:	sub	sp, sp, #8
 220:	mov	r3, #0
 224:	str	r3, [fp, #-8]
 228:	b	2a0 <coda_mem_done+0x90>
 22c:	mrc	15, 0, r3, cr13, cr0, {3}
 230:	ldr	r1, [pc, #276]	; 34c <coda_mem_done+0x13c>
 234:	ldr	r2, [fp, #-8]
 238:	lsl	r2, r2, #2
 23c:	add	r3, r2, r3
 240:	add	r3, r3, r1
 244:	ldr	r3, [r3]
 248:	cmp	r3, #0
 24c:	beq	274 <coda_mem_done+0x64>
 250:	mrc	15, 0, r3, cr13, cr0, {3}
 254:	ldr	r1, [pc, #240]	; 34c <coda_mem_done+0x13c>
 258:	ldr	r2, [fp, #-8]
 25c:	lsl	r2, r2, #2
 260:	add	r3, r2, r3
 264:	add	r3, r3, r1
 268:	ldr	r3, [r3]
 26c:	mov	r0, r3
 270:	bl	0 <coda_mem_type_delete>
 274:	mrc	15, 0, r3, cr13, cr0, {3}
 278:	ldr	r1, [pc, #204]	; 34c <coda_mem_done+0x13c>
 27c:	ldr	r2, [fp, #-8]
 280:	lsl	r2, r2, #2
 284:	add	r3, r2, r3
 288:	add	r3, r3, r1
 28c:	mov	r2, #0
 290:	str	r2, [r3]
 294:	ldr	r3, [fp, #-8]
 298:	add	r3, r3, #1
 29c:	str	r3, [fp, #-8]
 2a0:	ldr	r3, [fp, #-8]
 2a4:	cmp	r3, #10
 2a8:	ble	22c <coda_mem_done+0x1c>
 2ac:	mov	r3, #0
 2b0:	str	r3, [fp, #-8]
 2b4:	b	32c <coda_mem_done+0x11c>
 2b8:	mrc	15, 0, r3, cr13, cr0, {3}
 2bc:	ldr	r1, [pc, #140]	; 350 <coda_mem_done+0x140>
 2c0:	ldr	r2, [fp, #-8]
 2c4:	lsl	r2, r2, #2
 2c8:	add	r3, r2, r3
 2cc:	add	r3, r3, r1
 2d0:	ldr	r3, [r3]
 2d4:	cmp	r3, #0
 2d8:	beq	300 <coda_mem_done+0xf0>
 2dc:	mrc	15, 0, r3, cr13, cr0, {3}
 2e0:	ldr	r1, [pc, #104]	; 350 <coda_mem_done+0x140>
 2e4:	ldr	r2, [fp, #-8]
 2e8:	lsl	r2, r2, #2
 2ec:	add	r3, r2, r3
 2f0:	add	r3, r3, r1
 2f4:	ldr	r3, [r3]
 2f8:	mov	r0, r3
 2fc:	bl	0 <coda_mem_type_delete>
 300:	mrc	15, 0, r3, cr13, cr0, {3}
 304:	ldr	r1, [pc, #68]	; 350 <coda_mem_done+0x140>
 308:	ldr	r2, [fp, #-8]
 30c:	lsl	r2, r2, #2
 310:	add	r3, r2, r3
 314:	add	r3, r3, r1
 318:	mov	r2, #0
 31c:	str	r2, [r3]
 320:	ldr	r3, [fp, #-8]
 324:	add	r3, r3, #1
 328:	str	r3, [fp, #-8]
 32c:	ldr	r3, [fp, #-8]
 330:	cmp	r3, #10
 334:	ble	2b8 <coda_mem_done+0xa8>
 338:	nop	{0}
 33c:	sub	sp, fp, #4
 340:	ldr	fp, [sp]
 344:	add	sp, sp, #4
 348:	pop	{pc}		; (ldr pc, [sp], #4)
	...
