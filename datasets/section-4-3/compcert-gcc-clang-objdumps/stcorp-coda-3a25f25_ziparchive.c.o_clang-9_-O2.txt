
../compcert-repos/stcorp-coda-3a25f25/CMakeFiles/coda_static.dir/libcoda/ziparchive.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <coda_za_open>:
   0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   4:	add	fp, sp, #28
   8:	sub	sp, sp, #148	; 0x94
   c:	mov	r6, r0
  10:	mov	r5, r1
  14:	add	r2, sp, #8
  18:	mov	r0, #3
  1c:	mov	r1, r6
  20:	bl	0 <__xstat>
  24:	cmp	r0, #0
  28:	beq	48 <coda_za_open+0x48>
  2c:	bl	0 <__errno_location>
  30:	ldr	r0, [r0]
  34:	cmp	r0, #2
  38:	bne	60 <coda_za_open+0x60>
  3c:	movw	r0, #0
  40:	movt	r0, #0
  44:	b	90 <coda_za_open+0x90>
  48:	ldrb	r0, [sp, #25]
  4c:	tst	r0, #128	; 0x80
  50:	bne	7c <coda_za_open+0x7c>
  54:	movw	r0, #0
  58:	movt	r0, #0
  5c:	b	90 <coda_za_open+0x90>
  60:	bl	0 <strerror>
  64:	mov	r2, r0
  68:	movw	r0, #0
  6c:	mov	r1, r6
  70:	movt	r0, #0
  74:	blx	r5
  78:	b	98 <coda_za_open+0x98>
  7c:	ldr	r0, [sp, #52]	; 0x34
  80:	cmp	r0, #21
  84:	bgt	a8 <coda_za_open+0xa8>
  88:	movw	r0, #0
  8c:	movt	r0, #0
  90:	mov	r1, r6
  94:	blx	r5
  98:	mov	r4, #0
  9c:	mov	r0, r4
  a0:	sub	sp, fp, #28
  a4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
  a8:	mov	r0, #24
  ac:	bl	0 <malloc>
  b0:	cmp	r0, #0
  b4:	beq	35c <coda_za_open+0x35c>
  b8:	mov	r4, r0
  bc:	mov	r0, r6
  c0:	bl	0 <strdup>
  c4:	cmp	r0, #0
  c8:	str	r0, [r4, #8]
  cc:	beq	37c <coda_za_open+0x37c>
  d0:	movw	r1, #0
  d4:	cmp	r5, #0
  d8:	mov	r0, #0
  dc:	movt	r1, #0
  e0:	movne	r1, r5
  e4:	str	r0, [r4, #4]
  e8:	str	r0, [r4, #12]
  ec:	str	r0, [r4, #16]
  f0:	mov	r0, r6
  f4:	str	r1, [r4, #20]
  f8:	mov	r1, #0
  fc:	bl	0 <open>
 100:	cmn	r0, #1
 104:	str	r0, [r4]
 108:	ble	3c0 <coda_za_open+0x3c0>
 10c:	add	r1, sp, #6
 110:	mov	r2, #2
 114:	bl	0 <read>
 118:	cmn	r0, #1
 11c:	ble	3a0 <coda_za_open+0x3a0>
 120:	ldrb	r0, [sp, #6]
 124:	cmp	r0, #80	; 0x50
 128:	beq	138 <coda_za_open+0x138>
 12c:	ldrb	r0, [sp, #7]
 130:	cmp	r0, #75	; 0x4b
 134:	bne	3f8 <coda_za_open+0x3f8>
 138:	mov	r0, #1
 13c:	bl	0 <coda_hashtable_new>
 140:	str	r0, [r4, #16]
 144:	mvn	r1, #21
 148:	mov	r2, #2
 14c:	ldr	r0, [r4]
 150:	bl	0 <lseek>
 154:	cmn	r0, #1
 158:	ble	3a0 <coda_za_open+0x3a0>
 15c:	ldr	r0, [r4]
 160:	sub	r1, fp, #76	; 0x4c
 164:	mov	r2, #22
 168:	bl	0 <read>
 16c:	cmn	r0, #1
 170:	ble	3a0 <coda_za_open+0x3a0>
 174:	ldr	r0, [fp, #-76]	; 0xffffffb4
 178:	movw	r1, #19280	; 0x4b50
 17c:	movt	r1, #1541	; 0x605
 180:	cmp	r0, r1
 184:	bne	40c <coda_za_open+0x40c>
 188:	ldrh	r7, [fp, #-68]	; 0xffffffbc
 18c:	mov	r0, #44	; 0x2c
 190:	ldr	r5, [fp, #-60]	; 0xffffffc4
 194:	mul	r6, r7, r0
 198:	str	r7, [r4, #4]
 19c:	mov	r0, r6
 1a0:	bl	0 <malloc>
 1a4:	cmp	r0, #0
 1a8:	str	r0, [r4, #12]
 1ac:	beq	420 <coda_za_open+0x420>
 1b0:	cmp	r7, #0
 1b4:	beq	210 <coda_za_open+0x210>
 1b8:	and	ip, r7, #1
 1bc:	mov	r2, #0
 1c0:	cmp	r7, #1
 1c4:	beq	1f4 <coda_za_open+0x1f4>
 1c8:	sub	r3, r7, ip
 1cc:	add	r6, r0, #80	; 0x50
 1d0:	mov	r1, #0
 1d4:	mov	r2, #0
 1d8:	add	r2, r2, #2
 1dc:	stm	r6, {r1, r4}
 1e0:	str	r1, [r6, #-44]	; 0xffffffd4
 1e4:	str	r4, [r6, #-40]	; 0xffffffd8
 1e8:	add	r6, r6, #88	; 0x58
 1ec:	cmp	r3, r2
 1f0:	bne	1d8 <coda_za_open+0x1d8>
 1f4:	cmp	ip, #0
 1f8:	beq	210 <coda_za_open+0x210>
 1fc:	mov	r1, #44	; 0x2c
 200:	mla	r0, r2, r1, r0
 204:	mov	r1, #0
 208:	str	r1, [r0, #36]	; 0x24
 20c:	str	r4, [r0, #40]	; 0x28
 210:	ldr	r0, [r4]
 214:	mov	r1, r5
 218:	mov	r2, #0
 21c:	bl	0 <lseek>
 220:	cmp	r0, #0
 224:	bmi	3a0 <coda_za_open+0x3a0>
 228:	cmp	r7, #0
 22c:	beq	9c <coda_za_open+0x9c>
 230:	mov	r0, #44	; 0x2c
 234:	sub	sl, fp, #76	; 0x4c
 238:	mul	r6, r7, r0
 23c:	mov	r7, #0
 240:	ldr	r0, [r4]
 244:	ldr	r9, [r4, #12]
 248:	mov	r1, sl
 24c:	mov	r2, #46	; 0x2e
 250:	bl	0 <read>
 254:	cmn	r0, #1
 258:	ble	3a0 <coda_za_open+0x3a0>
 25c:	ldr	r0, [fp, #-76]	; 0xffffffb4
 260:	movw	r1, #19280	; 0x4b50
 264:	movt	r1, #513	; 0x201
 268:	cmp	r0, r1
 26c:	bne	438 <coda_za_open+0x438>
 270:	ldrh	r0, [fp, #-66]	; 0xffffffbe
 274:	add	r5, r9, r7
 278:	strh	r0, [r5, #4]
 27c:	orr	r0, r0, #8
 280:	cmp	r0, #8
 284:	bne	44c <coda_za_open+0x44c>
 288:	ldrh	r0, [fp, #-64]	; 0xffffffc0
 28c:	strh	r0, [r5, #6]
 290:	ldrh	r0, [fp, #-62]	; 0xffffffc2
 294:	strh	r0, [r5, #8]
 298:	ldr	r0, [fp, #-60]	; 0xffffffc4
 29c:	str	r0, [r5, #16]
 2a0:	ldr	r0, [fp, #-56]	; 0xffffffc8
 2a4:	str	r0, [r5, #20]
 2a8:	ldr	r0, [fp, #-52]	; 0xffffffcc
 2ac:	str	r0, [r5, #24]
 2b0:	ldrh	r0, [fp, #-48]	; 0xffffffd0
 2b4:	strh	r0, [r5, #28]
 2b8:	add	r0, r0, #1
 2bc:	ldrh	r1, [fp, #-46]	; 0xffffffd2
 2c0:	strh	r1, [r5, #30]
 2c4:	ldrh	r1, [fp, #-40]	; 0xffffffd8
 2c8:	ldrh	r8, [fp, #-44]	; 0xffffffd4
 2cc:	and	r1, r1, #1
 2d0:	str	r1, [r5, #32]
 2d4:	ldr	r1, [fp, #-38]	; 0xffffffda
 2d8:	str	r1, [r5, #12]
 2dc:	ldr	r1, [fp, #-34]	; 0xffffffde
 2e0:	str	r1, [r9, r7]
 2e4:	bl	0 <malloc>
 2e8:	cmp	r0, #0
 2ec:	str	r0, [r5, #36]	; 0x24
 2f0:	beq	460 <coda_za_open+0x460>
 2f4:	mov	r1, r0
 2f8:	ldrh	r2, [r5, #28]
 2fc:	ldr	r0, [r4]
 300:	bl	0 <read>
 304:	cmn	r0, #1
 308:	ble	3a0 <coda_za_open+0x3a0>
 30c:	ldrh	r0, [r5, #28]
 310:	ldr	r1, [r5, #36]	; 0x24
 314:	mov	r2, #0
 318:	strb	r2, [r1, r0]
 31c:	ldr	r1, [r5, #36]	; 0x24
 320:	ldr	r0, [r4, #16]
 324:	bl	0 <coda_hashtable_add_name>
 328:	cmp	r0, #0
 32c:	bne	478 <coda_za_open+0x478>
 330:	ldrh	r0, [r5, #30]
 334:	mov	r2, #1
 338:	add	r1, r0, r8
 33c:	ldr	r0, [r4]
 340:	bl	0 <lseek>
 344:	cmn	r0, #1
 348:	ble	3a0 <coda_za_open+0x3a0>
 34c:	add	r7, r7, #44	; 0x2c
 350:	cmp	r6, r7
 354:	bne	240 <coda_za_open+0x240>
 358:	b	9c <coda_za_open+0x9c>
 35c:	mov	r4, #0
 360:	cmp	r5, #0
 364:	beq	9c <coda_za_open+0x9c>
 368:	movw	r0, #0
 36c:	mov	r1, #24
 370:	movt	r0, #0
 374:	blx	r5
 378:	b	9c <coda_za_open+0x9c>
 37c:	mov	r0, r4
 380:	bl	0 <free>
 384:	mov	r4, #0
 388:	cmp	r5, #0
 38c:	beq	9c <coda_za_open+0x9c>
 390:	movw	r0, #0
 394:	movt	r0, #0
 398:	blx	r5
 39c:	b	9c <coda_za_open+0x9c>
 3a0:	ldr	r5, [r4, #20]
 3a4:	bl	0 <__errno_location>
 3a8:	ldr	r0, [r0]
 3ac:	bl	0 <strerror>
 3b0:	blx	r5
 3b4:	mov	r0, r4
 3b8:	bl	500 <coda_za_close>
 3bc:	b	98 <coda_za_open+0x98>
 3c0:	ldr	r5, [r4, #20]
 3c4:	bl	0 <__errno_location>
 3c8:	ldr	r0, [r0]
 3cc:	bl	0 <strerror>
 3d0:	mov	r2, r0
 3d4:	movw	r0, #0
 3d8:	mov	r1, r6
 3dc:	movt	r0, #0
 3e0:	blx	r5
 3e4:	ldr	r0, [r4, #8]
 3e8:	bl	0 <free>
 3ec:	mov	r0, r4
 3f0:	bl	0 <free>
 3f4:	b	98 <coda_za_open+0x98>
 3f8:	movw	r0, #0
 3fc:	mov	r1, r6
 400:	movt	r0, #0
 404:	blx	r5
 408:	b	3b4 <coda_za_open+0x3b4>
 40c:	ldr	r1, [r4, #8]
 410:	ldr	r2, [r4, #20]
 414:	movw	r0, #0
 418:	movt	r0, #0
 41c:	b	430 <coda_za_open+0x430>
 420:	ldr	r2, [r4, #20]
 424:	movw	r0, #0
 428:	mov	r1, r6
 42c:	movt	r0, #0
 430:	blx	r2
 434:	b	3b4 <coda_za_open+0x3b4>
 438:	ldr	r1, [r4, #8]
 43c:	ldr	r2, [r4, #20]
 440:	movw	r0, #0
 444:	movt	r0, #0
 448:	b	430 <coda_za_open+0x430>
 44c:	ldr	r1, [r4, #8]
 450:	ldr	r2, [r4, #20]
 454:	movw	r0, #0
 458:	movt	r0, #0
 45c:	b	430 <coda_za_open+0x430>
 460:	ldrh	r0, [r5, #28]
 464:	ldr	r2, [r4, #20]
 468:	add	r1, r0, #1
 46c:	movw	r0, #0
 470:	movt	r0, #0
 474:	b	430 <coda_za_open+0x430>
 478:	ldr	r2, [r5, #36]	; 0x24
 47c:	ldr	r1, [r4, #8]
 480:	ldr	r3, [r4, #20]
 484:	movw	r0, #0
 488:	movt	r0, #0
 48c:	blx	r3
 490:	b	3b4 <coda_za_open+0x3b4>

00000494 <default_error_handler>:
 494:	sub	sp, sp, #12
 498:	push	{r4, r5, fp, lr}
 49c:	add	fp, sp, #8
 4a0:	sub	sp, sp, #4
 4a4:	movw	r5, #0
 4a8:	mov	r4, r0
 4ac:	add	r0, fp, #8
 4b0:	movt	r5, #0
 4b4:	stm	r0, {r1, r2, r3}
 4b8:	movw	r0, #0
 4bc:	mov	r1, #7
 4c0:	mov	r2, #1
 4c4:	movt	r0, #0
 4c8:	ldr	r3, [r5]
 4cc:	bl	0 <fwrite>
 4d0:	ldr	r0, [r5]
 4d4:	add	r2, fp, #8
 4d8:	mov	r1, r4
 4dc:	str	r2, [sp]
 4e0:	bl	0 <vfprintf>
 4e4:	ldr	r1, [r5]
 4e8:	mov	r0, #10
 4ec:	bl	0 <fputc>
 4f0:	sub	sp, fp, #8
 4f4:	pop	{r4, r5, fp, lr}
 4f8:	add	sp, sp, #12
 4fc:	bx	lr

00000500 <coda_za_close>:
 500:	push	{r4, r5, r6, sl, fp, lr}
 504:	add	fp, sp, #16
 508:	mov	r4, r0
 50c:	ldr	r0, [r0]
 510:	bl	0 <close>
 514:	ldr	r0, [r4, #12]
 518:	cmp	r0, #0
 51c:	beq	56c <coda_za_close+0x6c>
 520:	ldr	r2, [r4, #4]
 524:	cmp	r2, #1
 528:	blt	568 <coda_za_close+0x68>
 52c:	mov	r5, #0
 530:	mov	r6, #36	; 0x24
 534:	b	548 <coda_za_close+0x48>
 538:	add	r5, r5, #1
 53c:	add	r6, r6, #44	; 0x2c
 540:	cmp	r5, r2
 544:	bge	568 <coda_za_close+0x68>
 548:	ldr	r1, [r0, r6]
 54c:	cmp	r1, #0
 550:	beq	538 <coda_za_close+0x38>
 554:	mov	r0, r1
 558:	bl	0 <free>
 55c:	ldr	r2, [r4, #4]
 560:	ldr	r0, [r4, #12]
 564:	b	538 <coda_za_close+0x38>
 568:	bl	0 <free>
 56c:	ldr	r0, [r4, #8]
 570:	cmp	r0, #0
 574:	beq	57c <coda_za_close+0x7c>
 578:	bl	0 <free>
 57c:	ldr	r0, [r4, #16]
 580:	cmp	r0, #0
 584:	beq	58c <coda_za_close+0x8c>
 588:	bl	0 <coda_hashtable_delete>
 58c:	mov	r0, r4
 590:	pop	{r4, r5, r6, sl, fp, lr}
 594:	b	0 <free>

00000598 <coda_za_get_num_entries>:
 598:	ldr	r0, [r0, #4]
 59c:	bx	lr

000005a0 <coda_za_get_filename>:
 5a0:	ldr	r0, [r0, #8]
 5a4:	bx	lr

000005a8 <coda_za_get_entry_by_index>:
 5a8:	mov	r2, r0
 5ac:	mov	r0, #0
 5b0:	cmp	r1, #0
 5b4:	bmi	5d0 <coda_za_get_entry_by_index+0x28>
 5b8:	ldr	r3, [r2, #4]
 5bc:	cmp	r3, r1
 5c0:	bxle	lr
 5c4:	ldr	r0, [r2, #12]
 5c8:	mov	r2, #44	; 0x2c
 5cc:	mla	r0, r1, r2, r0
 5d0:	bx	lr

000005d4 <coda_za_get_entry_by_name>:
 5d4:	push	{r4, sl, fp, lr}
 5d8:	add	fp, sp, #8
 5dc:	mov	r4, r0
 5e0:	ldr	r0, [r0, #16]
 5e4:	bl	0 <coda_hashtable_get_index_from_name>
 5e8:	cmp	r0, #0
 5ec:	bmi	600 <coda_za_get_entry_by_name+0x2c>
 5f0:	ldr	r1, [r4, #12]
 5f4:	mov	r2, #44	; 0x2c
 5f8:	mla	r0, r0, r2, r1
 5fc:	pop	{r4, sl, fp, pc}
 600:	mov	r0, #0
 604:	pop	{r4, sl, fp, pc}

00000608 <coda_za_get_entry_size>:
 608:	ldr	r0, [r0, #24]
 60c:	bx	lr

00000610 <coda_za_get_entry_name>:
 610:	ldr	r0, [r0, #36]	; 0x24
 614:	bx	lr

00000618 <coda_za_read_entry>:
 618:	push	{r4, r5, r6, r7, fp, lr}
 61c:	add	fp, sp, #16
 620:	sub	sp, sp, #88	; 0x58
 624:	mov	r5, r1
 628:	mov	r4, r0
 62c:	ldr	r1, [r0]
 630:	ldr	r0, [r0, #40]	; 0x28
 634:	mov	r2, #0
 638:	ldr	r0, [r0]
 63c:	bl	0 <lseek>
 640:	ldr	r1, [r4, #40]	; 0x28
 644:	cmn	r0, #1
 648:	ble	7a8 <coda_za_read_entry+0x190>
 64c:	ldr	r0, [r1]
 650:	sub	r1, fp, #48	; 0x30
 654:	mov	r2, #30
 658:	bl	0 <read>
 65c:	cmn	r0, #1
 660:	ble	880 <coda_za_read_entry+0x268>
 664:	ldr	r0, [fp, #-48]	; 0xffffffd0
 668:	movw	r1, #19280	; 0x4b50
 66c:	movt	r1, #1027	; 0x403
 670:	cmp	r0, r1
 674:	bne	7b0 <coda_za_read_entry+0x198>
 678:	ldrh	r0, [r4, #4]
 67c:	ldrh	r1, [fp, #-40]	; 0xffffffd8
 680:	cmp	r1, r0
 684:	bne	7c4 <coda_za_read_entry+0x1ac>
 688:	ldrh	r0, [r4, #6]
 68c:	ldrh	r1, [fp, #-38]	; 0xffffffda
 690:	cmp	r1, r0
 694:	bne	7d8 <coda_za_read_entry+0x1c0>
 698:	ldrh	r0, [r4, #8]
 69c:	ldrh	r1, [fp, #-36]	; 0xffffffdc
 6a0:	cmp	r1, r0
 6a4:	bne	7ec <coda_za_read_entry+0x1d4>
 6a8:	ldr	r0, [r4, #16]
 6ac:	ldr	r1, [fp, #-34]	; 0xffffffde
 6b0:	cmp	r1, r0
 6b4:	bne	800 <coda_za_read_entry+0x1e8>
 6b8:	ldr	r0, [r4, #20]
 6bc:	ldr	r1, [fp, #-30]	; 0xffffffe2
 6c0:	cmp	r1, r0
 6c4:	bne	814 <coda_za_read_entry+0x1fc>
 6c8:	ldr	r0, [r4, #24]
 6cc:	ldr	r1, [fp, #-26]	; 0xffffffe6
 6d0:	cmp	r1, r0
 6d4:	bne	828 <coda_za_read_entry+0x210>
 6d8:	ldrh	r1, [r4, #28]
 6dc:	ldrh	r0, [fp, #-22]	; 0xffffffea
 6e0:	cmp	r0, r1
 6e4:	bne	83c <coda_za_read_entry+0x224>
 6e8:	ldrh	r1, [fp, #-20]	; 0xffffffec
 6ec:	mov	r2, #1
 6f0:	add	r1, r1, r0
 6f4:	ldr	r0, [r4, #40]	; 0x28
 6f8:	ldr	r0, [r0]
 6fc:	bl	0 <lseek>
 700:	cmn	r0, #1
 704:	ble	880 <coda_za_read_entry+0x268>
 708:	ldrh	r0, [r4, #4]
 70c:	cmp	r0, #0
 710:	beq	854 <coda_za_read_entry+0x23c>
 714:	ldr	r7, [r4, #20]
 718:	mov	r0, r7
 71c:	bl	0 <malloc>
 720:	mov	r6, r0
 724:	ldr	r0, [r4, #40]	; 0x28
 728:	cmp	r6, #0
 72c:	beq	8a4 <coda_za_read_entry+0x28c>
 730:	ldr	r0, [r0]
 734:	mov	r1, r6
 738:	mov	r2, r7
 73c:	bl	0 <read>
 740:	cmn	r0, #1
 744:	ble	8bc <coda_za_read_entry+0x2a4>
 748:	movw	r2, #0
 74c:	mov	r0, #0
 750:	mvn	r1, #14
 754:	mov	r3, #56	; 0x38
 758:	movt	r2, #0
 75c:	str	r0, [sp, #40]	; 0x28
 760:	str	r0, [sp, #36]	; 0x24
 764:	str	r0, [sp, #32]
 768:	str	r0, [sp, #4]
 76c:	str	r0, [sp]
 770:	str	r0, [sp, #24]
 774:	mov	r0, sp
 778:	bl	0 <coda_inflateInit2_>
 77c:	cmp	r0, #0
 780:	beq	8d8 <coda_za_read_entry+0x2c0>
 784:	ldr	r0, [r4, #40]	; 0x28
 788:	ldr	r1, [sp, #24]
 78c:	ldr	r2, [r0, #20]
 790:	cmp	r1, #0
 794:	beq	940 <coda_za_read_entry+0x328>
 798:	movw	r0, #0
 79c:	movt	r0, #0
 7a0:	blx	r2
 7a4:	b	96c <coda_za_read_entry+0x354>
 7a8:	ldr	r4, [r1, #20]
 7ac:	b	888 <coda_za_read_entry+0x270>
 7b0:	ldr	r0, [r4, #40]	; 0x28
 7b4:	ldr	r1, [r0, #20]
 7b8:	movw	r0, #0
 7bc:	movt	r0, #0
 7c0:	b	84c <coda_za_read_entry+0x234>
 7c4:	ldr	r0, [r4, #40]	; 0x28
 7c8:	ldr	r1, [r0, #20]
 7cc:	movw	r0, #0
 7d0:	movt	r0, #0
 7d4:	b	84c <coda_za_read_entry+0x234>
 7d8:	ldr	r0, [r4, #40]	; 0x28
 7dc:	ldr	r1, [r0, #20]
 7e0:	movw	r0, #0
 7e4:	movt	r0, #0
 7e8:	b	84c <coda_za_read_entry+0x234>
 7ec:	ldr	r0, [r4, #40]	; 0x28
 7f0:	ldr	r1, [r0, #20]
 7f4:	movw	r0, #0
 7f8:	movt	r0, #0
 7fc:	b	84c <coda_za_read_entry+0x234>
 800:	ldr	r0, [r4, #40]	; 0x28
 804:	ldr	r1, [r0, #20]
 808:	movw	r0, #0
 80c:	movt	r0, #0
 810:	b	84c <coda_za_read_entry+0x234>
 814:	ldr	r0, [r4, #40]	; 0x28
 818:	ldr	r1, [r0, #20]
 81c:	movw	r0, #0
 820:	movt	r0, #0
 824:	b	84c <coda_za_read_entry+0x234>
 828:	ldr	r0, [r4, #40]	; 0x28
 82c:	ldr	r1, [r0, #20]
 830:	movw	r0, #0
 834:	movt	r0, #0
 838:	b	84c <coda_za_read_entry+0x234>
 83c:	ldr	r0, [r4, #40]	; 0x28
 840:	ldr	r1, [r0, #20]
 844:	movw	r0, #0
 848:	movt	r0, #0
 84c:	blx	r1
 850:	b	898 <coda_za_read_entry+0x280>
 854:	ldr	r0, [r4, #40]	; 0x28
 858:	ldr	r2, [r4, #24]
 85c:	mov	r1, r5
 860:	ldr	r0, [r0]
 864:	bl	0 <read>
 868:	mov	r1, r0
 86c:	mov	r0, #0
 870:	cmn	r1, #1
 874:	ble	880 <coda_za_read_entry+0x268>
 878:	sub	sp, fp, #16
 87c:	pop	{r4, r5, r6, r7, fp, pc}
 880:	ldr	r0, [r4, #40]	; 0x28
 884:	ldr	r4, [r0, #20]
 888:	bl	0 <__errno_location>
 88c:	ldr	r0, [r0]
 890:	bl	0 <strerror>
 894:	blx	r4
 898:	mvn	r0, #0
 89c:	sub	sp, fp, #16
 8a0:	pop	{r4, r5, r6, r7, fp, pc}
 8a4:	ldr	r2, [r0, #20]
 8a8:	movw	r0, #0
 8ac:	mov	r1, r7
 8b0:	movt	r0, #0
 8b4:	blx	r2
 8b8:	b	898 <coda_za_read_entry+0x280>
 8bc:	ldr	r0, [r4, #40]	; 0x28
 8c0:	ldr	r4, [r0, #20]
 8c4:	bl	0 <__errno_location>
 8c8:	ldr	r0, [r0]
 8cc:	bl	0 <strerror>
 8d0:	blx	r4
 8d4:	b	96c <coda_za_read_entry+0x354>
 8d8:	str	r6, [sp]
 8dc:	ldr	r0, [r4, #20]
 8e0:	ldr	r1, [r4, #24]
 8e4:	str	r5, [sp, #12]
 8e8:	str	r0, [sp, #4]
 8ec:	str	r1, [sp, #16]
 8f0:	mov	r0, sp
 8f4:	mov	r1, #4
 8f8:	bl	0 <coda_inflate>
 8fc:	add	r0, r0, #4
 900:	cmp	r0, #6
 904:	bhi	978 <coda_za_read_entry+0x360>
 908:	add	r1, pc, #0
 90c:	ldr	pc, [r1, r0, lsl #2]
 910:	.word	0x00000950
 914:	.word	0x0000092c
 918:	.word	0x000009cc
 91c:	.word	0x00000978
 920:	.word	0x00000978
 924:	.word	0x00000978
 928:	.word	0x0000092c
 92c:	ldr	r0, [r4, #40]	; 0x28
 930:	ldr	r1, [r0, #20]
 934:	movw	r0, #0
 938:	movt	r0, #0
 93c:	b	960 <coda_za_read_entry+0x348>
 940:	movw	r0, #0
 944:	movt	r0, #0
 948:	blx	r2
 94c:	b	96c <coda_za_read_entry+0x354>
 950:	ldr	r0, [r4, #40]	; 0x28
 954:	ldr	r1, [r0, #20]
 958:	movw	r0, #0
 95c:	movt	r0, #0
 960:	blx	r1
 964:	mov	r0, sp
 968:	bl	0 <coda_inflateEnd>
 96c:	mov	r0, r6
 970:	bl	0 <free>
 974:	b	898 <coda_za_read_entry+0x280>
 978:	mov	r0, r6
 97c:	bl	0 <free>
 980:	mov	r0, sp
 984:	bl	0 <coda_inflateEnd>
 988:	cmp	r0, #0
 98c:	beq	9b0 <coda_za_read_entry+0x398>
 990:	ldr	r0, [r4, #40]	; 0x28
 994:	ldr	r1, [sp, #24]
 998:	ldr	r2, [r0, #20]
 99c:	cmp	r1, #0
 9a0:	beq	9bc <coda_za_read_entry+0x3a4>
 9a4:	movw	r0, #0
 9a8:	movt	r0, #0
 9ac:	b	8b4 <coda_za_read_entry+0x29c>
 9b0:	mov	r0, #0
 9b4:	sub	sp, fp, #16
 9b8:	pop	{r4, r5, r6, r7, fp, pc}
 9bc:	movw	r0, #0
 9c0:	movt	r0, #0
 9c4:	blx	r2
 9c8:	b	898 <coda_za_read_entry+0x280>
 9cc:	movw	r0, #0
 9d0:	movw	r1, #0
 9d4:	movw	r3, #0
 9d8:	movw	r2, #633	; 0x279
 9dc:	movt	r0, #0
 9e0:	movt	r1, #0
 9e4:	movt	r3, #0
 9e8:	bl	0 <__assert_fail>
