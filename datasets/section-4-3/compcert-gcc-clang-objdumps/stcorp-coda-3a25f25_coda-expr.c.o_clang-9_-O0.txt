
../compcert-repos/stcorp-coda-3a25f25/CMakeFiles/coda_static.dir/libcoda/coda-expr.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <coda_expression_new>:
       0:	push	{fp, lr}
       4:	mov	fp, sp
       8:	sub	sp, sp, #48	; 0x30
       c:	ldr	ip, [fp, #12]
      10:	ldr	lr, [fp, #8]
      14:	str	r0, [fp, #-8]
      18:	str	r1, [fp, #-12]
      1c:	str	r2, [fp, #-16]
      20:	str	r3, [fp, #-20]	; 0xffffffec
      24:	ldr	r0, [fp, #-8]
      28:	sub	r0, r0, #18
      2c:	cmp	r0, #4
      30:	str	r0, [sp, #20]
      34:	bhi	ac <coda_expression_new+0xac>
      38:	add	r0, pc, #8
      3c:	ldr	r1, [sp, #20]
      40:	ldr	r0, [r0, r1, lsl #2]
      44:	mov	pc, r0
      48:	.word	0x0000005c
      4c:	.word	0x0000006c
      50:	.word	0x0000007c
      54:	.word	0x0000008c
      58:	.word	0x0000009c
      5c:	ldr	r0, [fp, #-12]
      60:	bl	60c <boolean_constant_new>
      64:	str	r0, [fp, #-4]
      68:	b	600 <coda_expression_new+0x600>
      6c:	ldr	r0, [fp, #-12]
      70:	bl	6f0 <float_constant_new>
      74:	str	r0, [fp, #-4]
      78:	b	600 <coda_expression_new+0x600>
      7c:	ldr	r0, [fp, #-12]
      80:	bl	7e4 <integer_constant_new>
      84:	str	r0, [fp, #-4]
      88:	b	600 <coda_expression_new+0x600>
      8c:	ldr	r0, [fp, #-12]
      90:	bl	8dc <rawstring_constant_new>
      94:	str	r0, [fp, #-4]
      98:	b	600 <coda_expression_new+0x600>
      9c:	ldr	r0, [fp, #-12]
      a0:	bl	98c <string_constant_new>
      a4:	str	r0, [fp, #-4]
      a8:	b	600 <coda_expression_new+0x600>
      ac:	b	b0 <coda_expression_new+0xb0>
      b0:	ldr	r0, [fp, #-8]
      b4:	cmp	r0, #60	; 0x3c
      b8:	bne	128 <coda_expression_new+0x128>
      bc:	ldr	r0, [fp, #-16]
      c0:	ldr	r0, [r0]
      c4:	cmp	r0, #19
      c8:	bne	ec <coda_expression_new+0xec>
      cc:	ldr	r0, [fp, #-16]
      d0:	vldr	d16, [r0, #16]
      d4:	vneg.f64	d16, d16
      d8:	ldr	r0, [fp, #-16]
      dc:	vstr	d16, [r0, #16]
      e0:	ldr	r0, [fp, #-16]
      e4:	str	r0, [fp, #-4]
      e8:	b	600 <coda_expression_new+0x600>
      ec:	ldr	r0, [fp, #-16]
      f0:	ldr	r0, [r0]
      f4:	cmp	r0, #20
      f8:	bne	124 <coda_expression_new+0x124>
      fc:	ldr	r0, [fp, #-16]
     100:	ldr	r1, [r0, #16]
     104:	ldr	r2, [r0, #20]
     108:	rsbs	r1, r1, #0
     10c:	rsc	r2, r2, #0
     110:	str	r1, [r0, #16]
     114:	str	r2, [r0, #20]
     118:	ldr	r0, [fp, #-16]
     11c:	str	r0, [fp, #-4]
     120:	b	600 <coda_expression_new+0x600>
     124:	b	128 <coda_expression_new+0x128>
     128:	movw	r0, #32
     12c:	bl	0 <malloc>
     130:	str	r0, [sp, #24]
     134:	ldr	r0, [sp, #24]
     138:	movw	r1, #0
     13c:	cmp	r0, r1
     140:	bne	1ec <coda_expression_new+0x1ec>
     144:	mvn	r0, #0
     148:	movw	r1, #0
     14c:	movt	r1, #0
     150:	movw	r2, #32
     154:	movw	r3, #0
     158:	movt	r3, #0
     15c:	movw	ip, #387	; 0x183
     160:	str	ip, [sp]
     164:	bl	0 <coda_set_error>
     168:	ldr	r0, [fp, #-12]
     16c:	movw	r1, #0
     170:	cmp	r0, r1
     174:	beq	180 <coda_expression_new+0x180>
     178:	ldr	r0, [fp, #-12]
     17c:	bl	0 <free>
     180:	ldr	r0, [fp, #-16]
     184:	movw	r1, #0
     188:	cmp	r0, r1
     18c:	beq	198 <coda_expression_new+0x198>
     190:	ldr	r0, [fp, #-16]
     194:	bl	a64 <coda_expression_delete>
     198:	ldr	r0, [fp, #-20]	; 0xffffffec
     19c:	movw	r1, #0
     1a0:	cmp	r0, r1
     1a4:	beq	1b0 <coda_expression_new+0x1b0>
     1a8:	ldr	r0, [fp, #-20]	; 0xffffffec
     1ac:	bl	a64 <coda_expression_delete>
     1b0:	ldr	r0, [fp, #8]
     1b4:	movw	r1, #0
     1b8:	cmp	r0, r1
     1bc:	beq	1c8 <coda_expression_new+0x1c8>
     1c0:	ldr	r0, [fp, #8]
     1c4:	bl	a64 <coda_expression_delete>
     1c8:	ldr	r0, [fp, #12]
     1cc:	movw	r1, #0
     1d0:	cmp	r0, r1
     1d4:	beq	1e0 <coda_expression_new+0x1e0>
     1d8:	ldr	r0, [fp, #12]
     1dc:	bl	a64 <coda_expression_delete>
     1e0:	movw	r0, #0
     1e4:	str	r0, [fp, #-4]
     1e8:	b	600 <coda_expression_new+0x600>
     1ec:	ldr	r0, [fp, #-8]
     1f0:	ldr	r1, [sp, #24]
     1f4:	str	r0, [r1]
     1f8:	ldr	r0, [fp, #-12]
     1fc:	ldr	r1, [sp, #24]
     200:	str	r0, [r1, #12]
     204:	ldr	r0, [fp, #-16]
     208:	ldr	r1, [sp, #24]
     20c:	str	r0, [r1, #16]
     210:	ldr	r0, [fp, #-20]	; 0xffffffec
     214:	ldr	r1, [sp, #24]
     218:	str	r0, [r1, #20]
     21c:	ldr	r0, [fp, #8]
     220:	ldr	r1, [sp, #24]
     224:	str	r0, [r1, #24]
     228:	ldr	r0, [fp, #12]
     22c:	ldr	r1, [sp, #24]
     230:	str	r0, [r1, #28]
     234:	ldr	r0, [fp, #-8]
     238:	cmp	r0, #86	; 0x56
     23c:	str	r0, [sp, #16]
     240:	bhi	4cc <coda_expression_new+0x4cc>
     244:	add	r0, pc, #8
     248:	ldr	r1, [sp, #16]
     24c:	ldr	r0, [r0, r1, lsl #2]
     250:	mov	pc, r0
     254:	.word	0x00000410
     258:	.word	0x00000424
     25c:	.word	0x000003d0
     260:	.word	0x00000468
     264:	.word	0x000003b0
     268:	.word	0x000003d0
     26c:	.word	0x000003b0
     270:	.word	0x000003d0
     274:	.word	0x00000468
     278:	.word	0x00000468
     27c:	.word	0x00000400
     280:	.word	0x00000468
     284:	.word	0x000003d0
     288:	.word	0x000003d0
     28c:	.word	0x000003d0
     290:	.word	0x000003d0
     294:	.word	0x000003e0
     298:	.word	0x000003c0
     29c:	.word	0x000004ac
     2a0:	.word	0x000004ac
     2a4:	.word	0x000004ac
     2a8:	.word	0x000004ac
     2ac:	.word	0x000004ac
     2b0:	.word	0x000003d0
     2b4:	.word	0x00000424
     2b8:	.word	0x000003b0
     2bc:	.word	0x000003b0
     2c0:	.word	0x000003d0
     2c4:	.word	0x000003e0
     2c8:	.word	0x000003c0
     2cc:	.word	0x000003c0
     2d0:	.word	0x000003f0
     2d4:	.word	0x00000400
     2d8:	.word	0x00000400
     2dc:	.word	0x00000400
     2e0:	.word	0x00000400
     2e4:	.word	0x00000400
     2e8:	.word	0x00000400
     2ec:	.word	0x00000400
     2f0:	.word	0x000003f0
     2f4:	.word	0x000003b0
     2f8:	.word	0x000003b0
     2fc:	.word	0x00000468
     300:	.word	0x000003d0
     304:	.word	0x000003d0
     308:	.word	0x000003d0
     30c:	.word	0x000003b0
     310:	.word	0x000003b0
     314:	.word	0x000003b0
     318:	.word	0x000003b0
     31c:	.word	0x000003d0
     320:	.word	0x000003b0
     324:	.word	0x000003b0
     328:	.word	0x000003b0
     32c:	.word	0x000003b0
     330:	.word	0x000003e0
     334:	.word	0x00000424
     338:	.word	0x00000424
     33c:	.word	0x00000424
     340:	.word	0x00000424
     344:	.word	0x00000410
     348:	.word	0x000003b0
     34c:	.word	0x000003b0
     350:	.word	0x000003d0
     354:	.word	0x000003d0
     358:	.word	0x000003d0
     35c:	.word	0x000003c0
     360:	.word	0x000003e0
     364:	.word	0x000003e0
     368:	.word	0x000003e0
     36c:	.word	0x000003d0
     370:	.word	0x0000047c
     374:	.word	0x000003c0
     378:	.word	0x000003e0
     37c:	.word	0x000003f0
     380:	.word	0x000003e0
     384:	.word	0x000003e0
     388:	.word	0x000003e0
     38c:	.word	0x00000424
     390:	.word	0x000003c0
     394:	.word	0x000003e0
     398:	.word	0x000003d0
     39c:	.word	0x000003b0
     3a0:	.word	0x000003d0
     3a4:	.word	0x000003f0
     3a8:	.word	0x000003d0
     3ac:	.word	0x00000468
     3b0:	ldr	r0, [sp, #24]
     3b4:	movw	r1, #0
     3b8:	str	r1, [r0, #4]
     3bc:	b	4cc <coda_expression_new+0x4cc>
     3c0:	ldr	r0, [sp, #24]
     3c4:	movw	r1, #2
     3c8:	str	r1, [r0, #4]
     3cc:	b	4cc <coda_expression_new+0x4cc>
     3d0:	ldr	r0, [sp, #24]
     3d4:	movw	r1, #1
     3d8:	str	r1, [r0, #4]
     3dc:	b	4cc <coda_expression_new+0x4cc>
     3e0:	ldr	r0, [sp, #24]
     3e4:	movw	r1, #3
     3e8:	str	r1, [r0, #4]
     3ec:	b	4cc <coda_expression_new+0x4cc>
     3f0:	ldr	r0, [sp, #24]
     3f4:	movw	r1, #5
     3f8:	str	r1, [r0, #4]
     3fc:	b	4cc <coda_expression_new+0x4cc>
     400:	ldr	r0, [sp, #24]
     404:	movw	r1, #4
     408:	str	r1, [r0, #4]
     40c:	b	4cc <coda_expression_new+0x4cc>
     410:	ldr	r0, [fp, #-16]
     414:	ldr	r0, [r0, #4]
     418:	ldr	r1, [sp, #24]
     41c:	str	r0, [r1, #4]
     420:	b	4cc <coda_expression_new+0x4cc>
     424:	ldr	r0, [fp, #-16]
     428:	ldr	r0, [r0, #4]
     42c:	cmp	r0, #2
     430:	beq	444 <coda_expression_new+0x444>
     434:	ldr	r0, [fp, #-20]	; 0xffffffec
     438:	ldr	r0, [r0, #4]
     43c:	cmp	r0, #2
     440:	bne	454 <coda_expression_new+0x454>
     444:	ldr	r0, [sp, #24]
     448:	movw	r1, #2
     44c:	str	r1, [r0, #4]
     450:	b	464 <coda_expression_new+0x464>
     454:	ldr	r0, [fp, #-16]
     458:	ldr	r0, [r0, #4]
     45c:	ldr	r1, [sp, #24]
     460:	str	r0, [r1, #4]
     464:	b	4cc <coda_expression_new+0x4cc>
     468:	ldr	r0, [fp, #-20]	; 0xffffffec
     46c:	ldr	r0, [r0, #4]
     470:	ldr	r1, [sp, #24]
     474:	str	r0, [r1, #4]
     478:	b	4cc <coda_expression_new+0x4cc>
     47c:	ldr	r0, [fp, #8]
     480:	movw	r1, #0
     484:	cmp	r0, r1
     488:	bne	49c <coda_expression_new+0x49c>
     48c:	ldr	r0, [sp, #24]
     490:	movw	r1, #0
     494:	str	r1, [r0, #4]
     498:	b	4a8 <coda_expression_new+0x4a8>
     49c:	ldr	r0, [sp, #24]
     4a0:	movw	r1, #3
     4a4:	str	r1, [r0, #4]
     4a8:	b	4cc <coda_expression_new+0x4cc>
     4ac:	movw	r0, #0
     4b0:	movt	r0, #0
     4b4:	movw	r1, #0
     4b8:	movt	r1, #0
     4bc:	movw	r2, #541	; 0x21d
     4c0:	movw	r3, #0
     4c4:	movt	r3, #0
     4c8:	bl	0 <__assert_fail>
     4cc:	ldr	r0, [sp, #24]
     4d0:	ldr	r0, [r0]
     4d4:	sub	r1, r0, #27
     4d8:	cmp	r1, #2
     4dc:	str	r0, [sp, #12]
     4e0:	bcc	510 <coda_expression_new+0x510>
     4e4:	b	4e8 <coda_expression_new+0x4e8>
     4e8:	ldr	r0, [sp, #12]
     4ec:	sub	r1, r0, #67	; 0x43
     4f0:	cmp	r1, #4
     4f4:	bcc	510 <coda_expression_new+0x510>
     4f8:	b	4fc <coda_expression_new+0x4fc>
     4fc:	ldr	r0, [sp, #12]
     500:	sub	r1, r0, #83	; 0x53
     504:	cmp	r1, #2
     508:	bhi	520 <coda_expression_new+0x520>
     50c:	b	510 <coda_expression_new+0x510>
     510:	ldr	r0, [sp, #24]
     514:	movw	r1, #0
     518:	str	r1, [r0, #8]
     51c:	b	5f8 <coda_expression_new+0x5f8>
     520:	ldr	r0, [sp, #24]
     524:	ldr	r0, [r0, #4]
     528:	cmp	r0, #4
     52c:	movw	r0, #0
     530:	str	r0, [sp, #8]
     534:	beq	5e8 <coda_expression_new+0x5e8>
     538:	ldr	r0, [fp, #-16]
     53c:	movw	r1, #0
     540:	cmp	r0, r1
     544:	beq	560 <coda_expression_new+0x560>
     548:	ldr	r0, [fp, #-16]
     54c:	ldr	r0, [r0, #8]
     550:	cmp	r0, #0
     554:	movw	r0, #0
     558:	str	r0, [sp, #8]
     55c:	beq	5e8 <coda_expression_new+0x5e8>
     560:	ldr	r0, [fp, #-20]	; 0xffffffec
     564:	movw	r1, #0
     568:	cmp	r0, r1
     56c:	beq	588 <coda_expression_new+0x588>
     570:	ldr	r0, [fp, #-20]	; 0xffffffec
     574:	ldr	r0, [r0, #8]
     578:	cmp	r0, #0
     57c:	movw	r0, #0
     580:	str	r0, [sp, #8]
     584:	beq	5e8 <coda_expression_new+0x5e8>
     588:	ldr	r0, [fp, #8]
     58c:	movw	r1, #0
     590:	cmp	r0, r1
     594:	beq	5b0 <coda_expression_new+0x5b0>
     598:	ldr	r0, [fp, #8]
     59c:	ldr	r0, [r0, #8]
     5a0:	cmp	r0, #0
     5a4:	movw	r0, #0
     5a8:	str	r0, [sp, #8]
     5ac:	beq	5e8 <coda_expression_new+0x5e8>
     5b0:	ldr	r0, [fp, #12]
     5b4:	movw	r1, #0
     5b8:	cmp	r0, r1
     5bc:	movw	r0, #1
     5c0:	str	r0, [sp, #4]
     5c4:	beq	5e0 <coda_expression_new+0x5e0>
     5c8:	ldr	r0, [fp, #12]
     5cc:	ldr	r0, [r0, #8]
     5d0:	cmp	r0, #0
     5d4:	movw	r0, #0
     5d8:	movne	r0, #1
     5dc:	str	r0, [sp, #4]
     5e0:	ldr	r0, [sp, #4]
     5e4:	str	r0, [sp, #8]
     5e8:	ldr	r0, [sp, #8]
     5ec:	and	r0, r0, #1
     5f0:	ldr	r1, [sp, #24]
     5f4:	str	r0, [r1, #8]
     5f8:	ldr	r0, [sp, #24]
     5fc:	str	r0, [fp, #-4]
     600:	ldr	r0, [fp, #-4]
     604:	mov	sp, fp
     608:	pop	{fp, pc}

0000060c <boolean_constant_new>:
     60c:	push	{fp, lr}
     610:	mov	fp, sp
     614:	sub	sp, sp, #24
     618:	str	r0, [fp, #-8]
     61c:	movw	r0, #16
     620:	bl	0 <malloc>
     624:	str	r0, [sp, #12]
     628:	ldr	r0, [sp, #12]
     62c:	movw	r1, #0
     630:	cmp	r0, r1
     634:	bne	670 <boolean_constant_new+0x64>
     638:	mvn	r0, #0
     63c:	movw	r1, #0
     640:	movt	r1, #0
     644:	movw	r2, #16
     648:	movw	r3, #0
     64c:	movt	r3, #0
     650:	movw	ip, #232	; 0xe8
     654:	str	ip, [sp]
     658:	bl	0 <coda_set_error>
     65c:	ldr	r0, [fp, #-8]
     660:	bl	0 <free>
     664:	movw	r0, #0
     668:	str	r0, [fp, #-4]
     66c:	b	6e4 <boolean_constant_new+0xd8>
     670:	ldr	r0, [sp, #12]
     674:	movw	r1, #18
     678:	str	r1, [r0]
     67c:	ldr	r0, [sp, #12]
     680:	movw	r1, #0
     684:	str	r1, [r0, #4]
     688:	ldr	r0, [sp, #12]
     68c:	movw	r1, #1
     690:	str	r1, [r0, #8]
     694:	ldr	r0, [fp, #-8]
     698:	ldrb	r0, [r0]
     69c:	cmp	r0, #116	; 0x74
     6a0:	movw	r0, #1
     6a4:	str	r0, [sp, #8]
     6a8:	beq	6c4 <boolean_constant_new+0xb8>
     6ac:	ldr	r0, [fp, #-8]
     6b0:	ldrb	r0, [r0]
     6b4:	cmp	r0, #84	; 0x54
     6b8:	movw	r0, #0
     6bc:	moveq	r0, #1
     6c0:	str	r0, [sp, #8]
     6c4:	ldr	r0, [sp, #8]
     6c8:	and	r0, r0, #1
     6cc:	ldr	r1, [sp, #12]
     6d0:	str	r0, [r1, #12]
     6d4:	ldr	r0, [fp, #-8]
     6d8:	bl	0 <free>
     6dc:	ldr	r0, [sp, #12]
     6e0:	str	r0, [fp, #-4]
     6e4:	ldr	r0, [fp, #-4]
     6e8:	mov	sp, fp
     6ec:	pop	{fp, pc}

000006f0 <float_constant_new>:
     6f0:	push	{fp, lr}
     6f4:	mov	fp, sp
     6f8:	sub	sp, sp, #40	; 0x28
     6fc:	str	r0, [fp, #-8]
     700:	ldr	r0, [fp, #-8]
     704:	ldr	r1, [fp, #-8]
     708:	str	r0, [sp, #12]
     70c:	mov	r0, r1
     710:	bl	0 <strlen>
     714:	ldr	r1, [sp, #12]
     718:	str	r0, [sp, #8]
     71c:	mov	r0, r1
     720:	ldr	r1, [sp, #8]
     724:	add	r2, sp, #16
     728:	movw	r3, #0
     72c:	bl	0 <coda_ascii_parse_double>
     730:	cmp	r0, #0
     734:	bge	74c <float_constant_new+0x5c>
     738:	ldr	r0, [fp, #-8]
     73c:	bl	0 <free>
     740:	movw	r0, #0
     744:	str	r0, [fp, #-4]
     748:	b	7d8 <float_constant_new+0xe8>
     74c:	ldr	r0, [fp, #-8]
     750:	bl	0 <free>
     754:	movw	r0, #24
     758:	bl	0 <malloc>
     75c:	str	r0, [fp, #-12]
     760:	ldr	r0, [fp, #-12]
     764:	movw	r1, #0
     768:	cmp	r0, r1
     76c:	bne	7a0 <float_constant_new+0xb0>
     770:	mvn	r0, #0
     774:	movw	r1, #0
     778:	movt	r1, #0
     77c:	movw	r2, #24
     780:	movw	r3, #0
     784:	movt	r3, #0
     788:	movw	ip, #261	; 0x105
     78c:	str	ip, [sp]
     790:	bl	0 <coda_set_error>
     794:	movw	r0, #0
     798:	str	r0, [fp, #-4]
     79c:	b	7d8 <float_constant_new+0xe8>
     7a0:	ldr	r0, [fp, #-12]
     7a4:	movw	r1, #19
     7a8:	str	r1, [r0]
     7ac:	ldr	r0, [fp, #-12]
     7b0:	movw	r1, #2
     7b4:	str	r1, [r0, #4]
     7b8:	ldr	r0, [fp, #-12]
     7bc:	movw	r1, #1
     7c0:	str	r1, [r0, #8]
     7c4:	vldr	d16, [sp, #16]
     7c8:	ldr	r0, [fp, #-12]
     7cc:	vstr	d16, [r0, #16]
     7d0:	ldr	r0, [fp, #-12]
     7d4:	str	r0, [fp, #-4]
     7d8:	ldr	r0, [fp, #-4]
     7dc:	mov	sp, fp
     7e0:	pop	{fp, pc}

000007e4 <integer_constant_new>:
     7e4:	push	{fp, lr}
     7e8:	mov	fp, sp
     7ec:	sub	sp, sp, #40	; 0x28
     7f0:	str	r0, [fp, #-8]
     7f4:	ldr	r0, [fp, #-8]
     7f8:	ldr	r1, [fp, #-8]
     7fc:	str	r0, [sp, #12]
     800:	mov	r0, r1
     804:	bl	0 <strlen>
     808:	ldr	r1, [sp, #12]
     80c:	str	r0, [sp, #8]
     810:	mov	r0, r1
     814:	ldr	r1, [sp, #8]
     818:	add	r2, sp, #16
     81c:	movw	r3, #0
     820:	bl	0 <coda_ascii_parse_int64>
     824:	cmp	r0, #0
     828:	bge	840 <integer_constant_new+0x5c>
     82c:	ldr	r0, [fp, #-8]
     830:	bl	0 <free>
     834:	movw	r0, #0
     838:	str	r0, [fp, #-4]
     83c:	b	8d0 <integer_constant_new+0xec>
     840:	ldr	r0, [fp, #-8]
     844:	bl	0 <free>
     848:	movw	r0, #24
     84c:	bl	0 <malloc>
     850:	str	r0, [fp, #-12]
     854:	ldr	r0, [fp, #-12]
     858:	movw	r1, #0
     85c:	cmp	r0, r1
     860:	bne	894 <integer_constant_new+0xb0>
     864:	mvn	r0, #0
     868:	movw	r1, #0
     86c:	movt	r1, #0
     870:	movw	r2, #24
     874:	movw	r3, #0
     878:	movt	r3, #0
     87c:	movw	ip, #288	; 0x120
     880:	str	ip, [sp]
     884:	bl	0 <coda_set_error>
     888:	movw	r0, #0
     88c:	str	r0, [fp, #-4]
     890:	b	8d0 <integer_constant_new+0xec>
     894:	ldr	r0, [fp, #-12]
     898:	mov	r1, #20
     89c:	str	r1, [r0]
     8a0:	ldr	r0, [fp, #-12]
     8a4:	mov	r1, #1
     8a8:	str	r1, [r0, #4]
     8ac:	ldr	r0, [fp, #-12]
     8b0:	str	r1, [r0, #8]
     8b4:	ldr	r0, [sp, #16]
     8b8:	ldr	r1, [sp, #20]
     8bc:	ldr	r2, [fp, #-12]
     8c0:	str	r1, [r2, #20]
     8c4:	str	r0, [r2, #16]
     8c8:	ldr	r0, [fp, #-12]
     8cc:	str	r0, [fp, #-4]
     8d0:	ldr	r0, [fp, #-4]
     8d4:	mov	sp, fp
     8d8:	pop	{fp, pc}

000008dc <rawstring_constant_new>:
     8dc:	push	{fp, lr}
     8e0:	mov	fp, sp
     8e4:	sub	sp, sp, #16
     8e8:	str	r0, [sp, #8]
     8ec:	movw	r0, #20
     8f0:	bl	0 <malloc>
     8f4:	str	r0, [sp, #4]
     8f8:	ldr	r0, [sp, #4]
     8fc:	movw	r1, #0
     900:	cmp	r0, r1
     904:	bne	938 <rawstring_constant_new+0x5c>
     908:	mvn	r0, #0
     90c:	movw	r1, #0
     910:	movt	r1, #0
     914:	movw	r2, #20
     918:	movw	r3, #0
     91c:	movt	r3, #0
     920:	movw	ip, #307	; 0x133
     924:	str	ip, [sp]
     928:	bl	0 <coda_set_error>
     92c:	movw	r0, #0
     930:	str	r0, [fp, #-4]
     934:	b	980 <rawstring_constant_new+0xa4>
     938:	ldr	r0, [sp, #4]
     93c:	movw	r1, #21
     940:	str	r1, [r0]
     944:	ldr	r0, [sp, #4]
     948:	movw	r1, #3
     94c:	str	r1, [r0, #4]
     950:	ldr	r0, [sp, #4]
     954:	movw	r1, #1
     958:	str	r1, [r0, #8]
     95c:	ldr	r0, [sp, #8]
     960:	bl	0 <strlen>
     964:	ldr	r1, [sp, #4]
     968:	str	r0, [r1, #12]
     96c:	ldr	r0, [sp, #8]
     970:	ldr	r1, [sp, #4]
     974:	str	r0, [r1, #16]
     978:	ldr	r0, [sp, #4]
     97c:	str	r0, [fp, #-4]
     980:	ldr	r0, [fp, #-4]
     984:	mov	sp, fp
     988:	pop	{fp, pc}

0000098c <string_constant_new>:
     98c:	push	{fp, lr}
     990:	mov	fp, sp
     994:	sub	sp, sp, #24
     998:	str	r0, [fp, #-8]
     99c:	ldr	r0, [fp, #-8]
     9a0:	bl	d710 <decode_escaped_string>
     9a4:	str	r0, [sp, #8]
     9a8:	ldr	r0, [sp, #8]
     9ac:	cmp	r0, #0
     9b0:	bge	9c8 <string_constant_new+0x3c>
     9b4:	ldr	r0, [fp, #-8]
     9b8:	bl	0 <free>
     9bc:	movw	r0, #0
     9c0:	str	r0, [fp, #-4]
     9c4:	b	a58 <string_constant_new+0xcc>
     9c8:	movw	r0, #20
     9cc:	bl	0 <malloc>
     9d0:	str	r0, [sp, #12]
     9d4:	ldr	r0, [sp, #12]
     9d8:	movw	r1, #0
     9dc:	cmp	r0, r1
     9e0:	bne	a14 <string_constant_new+0x88>
     9e4:	mvn	r0, #0
     9e8:	movw	r1, #0
     9ec:	movt	r1, #0
     9f0:	movw	r2, #20
     9f4:	movw	r3, #0
     9f8:	movt	r3, #0
     9fc:	movw	ip, #335	; 0x14f
     a00:	str	ip, [sp]
     a04:	bl	0 <coda_set_error>
     a08:	movw	r0, #0
     a0c:	str	r0, [fp, #-4]
     a10:	b	a58 <string_constant_new+0xcc>
     a14:	ldr	r0, [sp, #12]
     a18:	movw	r1, #22
     a1c:	str	r1, [r0]
     a20:	ldr	r0, [sp, #12]
     a24:	movw	r1, #3
     a28:	str	r1, [r0, #4]
     a2c:	ldr	r0, [sp, #12]
     a30:	movw	r1, #1
     a34:	str	r1, [r0, #8]
     a38:	ldr	r0, [sp, #8]
     a3c:	ldr	r1, [sp, #12]
     a40:	str	r0, [r1, #12]
     a44:	ldr	r0, [fp, #-8]
     a48:	ldr	r1, [sp, #12]
     a4c:	str	r0, [r1, #16]
     a50:	ldr	r0, [sp, #12]
     a54:	str	r0, [fp, #-4]
     a58:	ldr	r0, [fp, #-4]
     a5c:	mov	sp, fp
     a60:	pop	{fp, pc}

00000a64 <coda_expression_delete>:
     a64:	push	{fp, lr}
     a68:	mov	fp, sp
     a6c:	sub	sp, sp, #16
     a70:	str	r0, [fp, #-4]
     a74:	ldr	r0, [fp, #-4]
     a78:	ldr	r0, [r0]
     a7c:	sub	r1, r0, #18
     a80:	cmp	r1, #3
     a84:	str	r0, [sp]
     a88:	bcc	aa4 <coda_expression_delete+0x40>
     a8c:	b	a90 <coda_expression_delete+0x2c>
     a90:	ldr	r0, [sp]
     a94:	sub	r1, r0, #21
     a98:	cmp	r1, #2
     a9c:	bcc	aa8 <coda_expression_delete+0x44>
     aa0:	b	acc <coda_expression_delete+0x68>
     aa4:	b	b58 <coda_expression_delete+0xf4>
     aa8:	ldr	r0, [fp, #-4]
     aac:	ldr	r0, [r0, #16]
     ab0:	movw	r1, #0
     ab4:	cmp	r0, r1
     ab8:	beq	ac8 <coda_expression_delete+0x64>
     abc:	ldr	r0, [fp, #-4]
     ac0:	ldr	r0, [r0, #16]
     ac4:	bl	0 <free>
     ac8:	b	b58 <coda_expression_delete+0xf4>
     acc:	ldr	r0, [fp, #-4]
     ad0:	str	r0, [sp, #8]
     ad4:	ldr	r0, [sp, #8]
     ad8:	ldr	r0, [r0, #12]
     adc:	movw	r1, #0
     ae0:	cmp	r0, r1
     ae4:	beq	af4 <coda_expression_delete+0x90>
     ae8:	ldr	r0, [sp, #8]
     aec:	ldr	r0, [r0, #12]
     af0:	bl	0 <free>
     af4:	movw	r0, #0
     af8:	str	r0, [sp, #4]
     afc:	ldr	r0, [sp, #4]
     b00:	cmp	r0, #4
     b04:	bge	b54 <coda_expression_delete+0xf0>
     b08:	ldr	r0, [sp, #8]
     b0c:	add	r0, r0, #16
     b10:	ldr	r1, [sp, #4]
     b14:	add	r0, r0, r1, lsl #2
     b18:	ldr	r0, [r0]
     b1c:	movw	r1, #0
     b20:	cmp	r0, r1
     b24:	beq	b40 <coda_expression_delete+0xdc>
     b28:	ldr	r0, [sp, #8]
     b2c:	add	r0, r0, #16
     b30:	ldr	r1, [sp, #4]
     b34:	add	r0, r0, r1, lsl #2
     b38:	ldr	r0, [r0]
     b3c:	bl	a64 <coda_expression_delete>
     b40:	b	b44 <coda_expression_delete+0xe0>
     b44:	ldr	r0, [sp, #4]
     b48:	add	r0, r0, #1
     b4c:	str	r0, [sp, #4]
     b50:	b	afc <coda_expression_delete+0x98>
     b54:	b	b58 <coda_expression_delete+0xf4>
     b58:	ldr	r0, [fp, #-4]
     b5c:	bl	0 <free>
     b60:	mov	sp, fp
     b64:	pop	{fp, pc}

00000b68 <coda_expression_eval_void>:
     b68:	push	{r4, r5, fp, lr}
     b6c:	add	fp, sp, #8
     b70:	sub	sp, sp, #584	; 0x248
     b74:	str	r0, [fp, #-16]
     b78:	str	r1, [fp, #-20]	; 0xffffffec
     b7c:	ldr	r0, [fp, #-16]
     b80:	ldr	r0, [r0, #4]
     b84:	cmp	r0, #5
     b88:	beq	ba8 <coda_expression_eval_void+0x40>
     b8c:	mvn	r0, #99	; 0x63
     b90:	movw	r1, #0
     b94:	movt	r1, #0
     b98:	bl	0 <coda_set_error>
     b9c:	mvn	r0, #0
     ba0:	str	r0, [fp, #-12]
     ba4:	b	c00 <coda_expression_eval_void+0x98>
     ba8:	ldr	r0, [fp, #-20]	; 0xffffffec
     bac:	movw	r1, #0
     bb0:	cmp	r0, r1
     bb4:	bne	be4 <coda_expression_eval_void+0x7c>
     bb8:	ldr	r0, [fp, #-16]
     bbc:	ldr	r0, [r0, #8]
     bc0:	cmp	r0, #0
     bc4:	bne	be4 <coda_expression_eval_void+0x7c>
     bc8:	mvn	r0, #99	; 0x63
     bcc:	movw	r1, #0
     bd0:	movt	r1, #0
     bd4:	bl	0 <coda_set_error>
     bd8:	mvn	r0, #0
     bdc:	str	r0, [fp, #-12]
     be0:	b	c00 <coda_expression_eval_void+0x98>
     be4:	ldr	r1, [fp, #-20]	; 0xffffffec
     be8:	mov	r0, sp
     bec:	bl	c0c <init_eval_info>
     bf0:	ldr	r1, [fp, #-16]
     bf4:	mov	r0, sp
     bf8:	bl	c98 <eval_void>
     bfc:	str	r0, [fp, #-12]
     c00:	ldr	r0, [fp, #-12]
     c04:	sub	sp, fp, #8
     c08:	pop	{r4, r5, fp, pc}

00000c0c <init_eval_info>:
     c0c:	push	{fp, lr}
     c10:	mov	fp, sp
     c14:	sub	sp, sp, #8
     c18:	str	r0, [sp, #4]
     c1c:	str	r1, [sp]
     c20:	ldr	r0, [sp]
     c24:	ldr	r1, [sp, #4]
     c28:	str	r0, [r1]
     c2c:	ldr	r0, [sp]
     c30:	movw	r1, #0
     c34:	cmp	r0, r1
     c38:	beq	c50 <init_eval_info+0x44>
     c3c:	ldr	r0, [sp, #4]
     c40:	add	r0, r0, #8
     c44:	ldr	r1, [sp]
     c48:	movw	r2, #520	; 0x208
     c4c:	bl	0 <memcpy>
     c50:	ldr	r0, [sp, #4]
     c54:	mov	r1, #0
     c58:	str	r1, [r0, #532]	; 0x214
     c5c:	str	r1, [r0, #528]	; 0x210
     c60:	ldr	r0, [sp, #4]
     c64:	str	r1, [r0, #540]	; 0x21c
     c68:	str	r1, [r0, #536]	; 0x218
     c6c:	ldr	r0, [sp, #4]
     c70:	str	r1, [r0, #548]	; 0x224
     c74:	str	r1, [r0, #544]	; 0x220
     c78:	ldr	r0, [sp, #4]
     c7c:	str	r1, [r0, #556]	; 0x22c
     c80:	str	r1, [r0, #552]	; 0x228
     c84:	ldr	r0, [sp, #4]
     c88:	movw	r1, #0
     c8c:	str	r1, [r0, #560]	; 0x230
     c90:	mov	sp, fp
     c94:	pop	{fp, pc}

00000c98 <eval_void>:
     c98:	push	{fp, lr}
     c9c:	mov	fp, sp
     ca0:	sub	sp, sp, #80	; 0x50
     ca4:	str	r0, [fp, #-8]
     ca8:	str	r1, [fp, #-12]
     cac:	ldr	r0, [fp, #-12]
     cb0:	str	r0, [fp, #-16]
     cb4:	ldr	r0, [fp, #-16]
     cb8:	ldr	r0, [r0]
     cbc:	cmp	r0, #31
     cc0:	str	r0, [sp, #4]
     cc4:	beq	cfc <eval_void+0x64>
     cc8:	b	ccc <eval_void+0x34>
     ccc:	ldr	r0, [sp, #4]
     cd0:	cmp	r0, #39	; 0x27
     cd4:	beq	f80 <eval_void+0x2e8>
     cd8:	b	cdc <eval_void+0x44>
     cdc:	ldr	r0, [sp, #4]
     ce0:	cmp	r0, #74	; 0x4a
     ce4:	beq	fa8 <eval_void+0x310>
     ce8:	b	cec <eval_void+0x54>
     cec:	ldr	r0, [sp, #4]
     cf0:	cmp	r0, #84	; 0x54
     cf4:	beq	ff4 <eval_void+0x35c>
     cf8:	b	10ec <eval_void+0x454>
     cfc:	mov	r0, #0
     d00:	str	r0, [sp, #36]	; 0x24
     d04:	mov	r0, #1
     d08:	str	r0, [sp, #32]
     d0c:	ldr	r0, [fp, #-16]
     d10:	ldr	r0, [r0, #12]
     d14:	ldrb	r0, [r0]
     d18:	sub	r0, r0, #105	; 0x69
     d1c:	str	r0, [sp, #28]
     d20:	ldr	r0, [fp, #-8]
     d24:	ldr	r1, [sp, #28]
     d28:	add	r0, r0, r1, lsl #3
     d2c:	ldr	r1, [r0, #528]	; 0x210
     d30:	ldr	r0, [r0, #532]	; 0x214
     d34:	str	r0, [fp, #-20]	; 0xffffffec
     d38:	str	r1, [fp, #-24]	; 0xffffffe8
     d3c:	ldr	r0, [fp, #-8]
     d40:	ldr	r1, [fp, #-16]
     d44:	ldr	r1, [r1, #16]
     d48:	sub	r2, fp, #32
     d4c:	bl	6f70 <eval_integer>
     d50:	cmp	r0, #0
     d54:	beq	d64 <eval_void+0xcc>
     d58:	mvn	r0, #0
     d5c:	str	r0, [fp, #-4]
     d60:	b	1114 <eval_void+0x47c>
     d64:	ldr	r0, [fp, #-8]
     d68:	ldr	r1, [fp, #-16]
     d6c:	ldr	r1, [r1, #20]
     d70:	add	r2, sp, #40	; 0x28
     d74:	bl	6f70 <eval_integer>
     d78:	cmp	r0, #0
     d7c:	beq	d8c <eval_void+0xf4>
     d80:	mvn	r0, #0
     d84:	str	r0, [fp, #-4]
     d88:	b	1114 <eval_void+0x47c>
     d8c:	ldr	r0, [fp, #-16]
     d90:	ldr	r0, [r0, #24]
     d94:	movw	r1, #0
     d98:	cmp	r0, r1
     d9c:	beq	e00 <eval_void+0x168>
     da0:	ldr	r0, [fp, #-8]
     da4:	ldr	r1, [fp, #-16]
     da8:	ldr	r1, [r1, #24]
     dac:	add	r2, sp, #32
     db0:	bl	6f70 <eval_integer>
     db4:	cmp	r0, #0
     db8:	beq	dc8 <eval_void+0x130>
     dbc:	mvn	r0, #0
     dc0:	str	r0, [fp, #-4]
     dc4:	b	1114 <eval_void+0x47c>
     dc8:	ldr	r0, [sp, #32]
     dcc:	ldr	r1, [sp, #36]	; 0x24
     dd0:	orr	r0, r0, r1
     dd4:	cmp	r0, #0
     dd8:	bne	dfc <eval_void+0x164>
     ddc:	b	de0 <eval_void+0x148>
     de0:	mvn	r0, #400	; 0x190
     de4:	movw	r1, #0
     de8:	movt	r1, #0
     dec:	bl	0 <coda_set_error>
     df0:	mvn	r0, #0
     df4:	str	r0, [fp, #-4]
     df8:	b	1114 <eval_void+0x47c>
     dfc:	b	e00 <eval_void+0x168>
     e00:	ldr	r0, [sp, #32]
     e04:	ldr	r1, [sp, #36]	; 0x24
     e08:	subs	r0, r0, #1
     e0c:	sbcs	r1, r1, #0
     e10:	blt	ebc <eval_void+0x224>
     e14:	b	e18 <eval_void+0x180>
     e18:	ldr	r0, [fp, #-32]	; 0xffffffe0
     e1c:	ldr	r1, [fp, #-28]	; 0xffffffe4
     e20:	ldr	r2, [fp, #-8]
     e24:	ldr	r3, [sp, #28]
     e28:	add	r2, r2, r3, lsl #3
     e2c:	str	r1, [r2, #532]	; 0x214
     e30:	str	r0, [r2, #528]	; 0x210
     e34:	ldr	r0, [fp, #-8]
     e38:	ldr	r1, [sp, #28]
     e3c:	add	r0, r0, r1, lsl #3
     e40:	ldr	r1, [r0, #528]	; 0x210
     e44:	ldr	r0, [r0, #532]	; 0x214
     e48:	ldr	r2, [sp, #40]	; 0x28
     e4c:	ldr	r3, [sp, #44]	; 0x2c
     e50:	subs	r1, r2, r1
     e54:	sbcs	r0, r3, r0
     e58:	blt	eb8 <eval_void+0x220>
     e5c:	b	e60 <eval_void+0x1c8>
     e60:	ldr	r0, [fp, #-8]
     e64:	ldr	r1, [fp, #-16]
     e68:	ldr	r1, [r1, #28]
     e6c:	bl	c98 <eval_void>
     e70:	cmp	r0, #0
     e74:	beq	e84 <eval_void+0x1ec>
     e78:	mvn	r0, #0
     e7c:	str	r0, [fp, #-4]
     e80:	b	1114 <eval_void+0x47c>
     e84:	b	e88 <eval_void+0x1f0>
     e88:	ldr	r0, [sp, #32]
     e8c:	ldr	r1, [sp, #36]	; 0x24
     e90:	ldr	r2, [fp, #-8]
     e94:	ldr	r3, [sp, #28]
     e98:	add	r2, r2, r3, lsl #3
     e9c:	ldr	r3, [r2, #528]	; 0x210
     ea0:	ldr	ip, [r2, #532]	; 0x214
     ea4:	adds	r0, r3, r0
     ea8:	adc	r1, ip, r1
     eac:	str	r0, [r2, #528]	; 0x210
     eb0:	str	r1, [r2, #532]	; 0x214
     eb4:	b	e34 <eval_void+0x19c>
     eb8:	b	f60 <eval_void+0x2c8>
     ebc:	ldr	r0, [fp, #-32]	; 0xffffffe0
     ec0:	ldr	r1, [fp, #-28]	; 0xffffffe4
     ec4:	ldr	r2, [fp, #-8]
     ec8:	ldr	r3, [sp, #28]
     ecc:	add	r2, r2, r3, lsl #3
     ed0:	str	r1, [r2, #532]	; 0x214
     ed4:	str	r0, [r2, #528]	; 0x210
     ed8:	ldr	r0, [fp, #-8]
     edc:	ldr	r1, [sp, #28]
     ee0:	add	r0, r0, r1, lsl #3
     ee4:	ldr	r1, [r0, #528]	; 0x210
     ee8:	ldr	r0, [r0, #532]	; 0x214
     eec:	ldr	r2, [sp, #40]	; 0x28
     ef0:	ldr	r3, [sp, #44]	; 0x2c
     ef4:	subs	r1, r1, r2
     ef8:	sbcs	r0, r0, r3
     efc:	blt	f5c <eval_void+0x2c4>
     f00:	b	f04 <eval_void+0x26c>
     f04:	ldr	r0, [fp, #-8]
     f08:	ldr	r1, [fp, #-16]
     f0c:	ldr	r1, [r1, #28]
     f10:	bl	c98 <eval_void>
     f14:	cmp	r0, #0
     f18:	beq	f28 <eval_void+0x290>
     f1c:	mvn	r0, #0
     f20:	str	r0, [fp, #-4]
     f24:	b	1114 <eval_void+0x47c>
     f28:	b	f2c <eval_void+0x294>
     f2c:	ldr	r0, [sp, #32]
     f30:	ldr	r1, [sp, #36]	; 0x24
     f34:	ldr	r2, [fp, #-8]
     f38:	ldr	r3, [sp, #28]
     f3c:	add	r2, r2, r3, lsl #3
     f40:	ldr	r3, [r2, #528]	; 0x210
     f44:	ldr	ip, [r2, #532]	; 0x214
     f48:	adds	r0, r3, r0
     f4c:	adc	r1, ip, r1
     f50:	str	r0, [r2, #528]	; 0x210
     f54:	str	r1, [r2, #532]	; 0x214
     f58:	b	ed8 <eval_void+0x240>
     f5c:	b	f60 <eval_void+0x2c8>
     f60:	ldr	r0, [fp, #-24]	; 0xffffffe8
     f64:	ldr	r1, [fp, #-20]	; 0xffffffec
     f68:	ldr	r2, [fp, #-8]
     f6c:	ldr	r3, [sp, #28]
     f70:	add	r2, r2, r3, lsl #3
     f74:	str	r1, [r2, #532]	; 0x214
     f78:	str	r0, [r2, #528]	; 0x210
     f7c:	b	110c <eval_void+0x474>
     f80:	ldr	r0, [fp, #-8]
     f84:	ldr	r1, [fp, #-16]
     f88:	ldr	r1, [r1, #16]
     f8c:	bl	d154 <eval_cursor>
     f90:	cmp	r0, #0
     f94:	beq	fa4 <eval_void+0x30c>
     f98:	mvn	r0, #0
     f9c:	str	r0, [fp, #-4]
     fa0:	b	1114 <eval_void+0x47c>
     fa4:	b	110c <eval_void+0x474>
     fa8:	ldr	r0, [fp, #-8]
     fac:	ldr	r1, [fp, #-16]
     fb0:	ldr	r1, [r1, #16]
     fb4:	bl	c98 <eval_void>
     fb8:	cmp	r0, #0
     fbc:	beq	fcc <eval_void+0x334>
     fc0:	mvn	r0, #0
     fc4:	str	r0, [fp, #-4]
     fc8:	b	1114 <eval_void+0x47c>
     fcc:	ldr	r0, [fp, #-8]
     fd0:	ldr	r1, [fp, #-16]
     fd4:	ldr	r1, [r1, #20]
     fd8:	bl	c98 <eval_void>
     fdc:	cmp	r0, #0
     fe0:	beq	ff0 <eval_void+0x358>
     fe4:	mvn	r0, #0
     fe8:	str	r0, [fp, #-4]
     fec:	b	1114 <eval_void+0x47c>
     ff0:	b	110c <eval_void+0x474>
     ff4:	mov	r0, #0
     ff8:	str	r0, [sp, #20]
     ffc:	str	r0, [sp, #16]
    1000:	ldr	r0, [fp, #-8]
    1004:	ldr	r0, [r0]
    1008:	movw	r1, #0
    100c:	cmp	r0, r1
    1010:	beq	1018 <eval_void+0x380>
    1014:	b	1038 <eval_void+0x3a0>
    1018:	movw	r0, #0
    101c:	movt	r0, #0
    1020:	movw	r1, #0
    1024:	movt	r1, #0
    1028:	movw	r2, #3881	; 0xf29
    102c:	movw	r3, #0
    1030:	movt	r3, #0
    1034:	bl	0 <__assert_fail>
    1038:	ldr	r0, [fp, #-16]
    103c:	ldr	r0, [r0, #16]
    1040:	movw	r1, #0
    1044:	cmp	r0, r1
    1048:	beq	1078 <eval_void+0x3e0>
    104c:	ldr	r0, [fp, #-8]
    1050:	ldr	r1, [fp, #-16]
    1054:	ldr	r1, [r1, #16]
    1058:	add	r2, sp, #16
    105c:	bl	6f70 <eval_integer>
    1060:	cmp	r0, #0
    1064:	beq	1074 <eval_void+0x3dc>
    1068:	mvn	r0, #0
    106c:	str	r0, [fp, #-4]
    1070:	b	1114 <eval_void+0x47c>
    1074:	b	1078 <eval_void+0x3e0>
    1078:	ldr	r0, [fp, #-8]
    107c:	ldr	r1, [fp, #-16]
    1080:	ldr	r1, [r1, #20]
    1084:	add	r2, sp, #8
    1088:	bl	6f70 <eval_integer>
    108c:	cmp	r0, #0
    1090:	beq	10a0 <eval_void+0x408>
    1094:	mvn	r0, #0
    1098:	str	r0, [fp, #-4]
    109c:	b	1114 <eval_void+0x47c>
    10a0:	ldr	r0, [fp, #-8]
    10a4:	ldr	r0, [r0]
    10a8:	ldr	r0, [r0]
    10ac:	ldr	r1, [fp, #-16]
    10b0:	ldr	r1, [r1, #12]
    10b4:	ldr	r2, [sp, #16]
    10b8:	add	r3, sp, #24
    10bc:	bl	0 <coda_product_variable_get_pointer>
    10c0:	cmp	r0, #0
    10c4:	beq	10d4 <eval_void+0x43c>
    10c8:	mvn	r0, #0
    10cc:	str	r0, [fp, #-4]
    10d0:	b	1114 <eval_void+0x47c>
    10d4:	ldr	r0, [sp, #8]
    10d8:	ldr	r1, [sp, #12]
    10dc:	ldr	r2, [sp, #24]
    10e0:	str	r1, [r2, #4]
    10e4:	str	r0, [r2]
    10e8:	b	110c <eval_void+0x474>
    10ec:	movw	r0, #0
    10f0:	movt	r0, #0
    10f4:	movw	r1, #0
    10f8:	movt	r1, #0
    10fc:	movw	r2, #3902	; 0xf3e
    1100:	movw	r3, #0
    1104:	movt	r3, #0
    1108:	bl	0 <__assert_fail>
    110c:	movw	r0, #0
    1110:	str	r0, [fp, #-4]
    1114:	ldr	r0, [fp, #-4]
    1118:	mov	sp, fp
    111c:	pop	{fp, pc}

00001120 <coda_expression_print_html>:
    1120:	push	{fp, lr}
    1124:	mov	fp, sp
    1128:	sub	sp, sp, #16
    112c:	str	r0, [fp, #-4]
    1130:	str	r1, [sp, #8]
    1134:	ldr	r0, [fp, #-4]
    1138:	ldr	r1, [sp, #8]
    113c:	movw	r2, #1
    1140:	str	r2, [sp, #4]
    1144:	ldr	r3, [sp, #4]
    1148:	movw	ip, #15
    114c:	str	ip, [sp]
    1150:	bl	115c <print_expression>
    1154:	mov	sp, fp
    1158:	pop	{fp, pc}

0000115c <print_expression>:
    115c:	push	{r4, r5, fp, lr}
    1160:	add	fp, sp, #8
    1164:	sub	sp, sp, #264	; 0x108
    1168:	sub	sp, sp, #1024	; 0x400
    116c:	ldr	ip, [fp, #8]
    1170:	str	r0, [fp, #-12]
    1174:	str	r1, [fp, #-16]
    1178:	str	r2, [fp, #-20]	; 0xffffffec
    117c:	str	r3, [fp, #-24]	; 0xffffffe8
    1180:	ldr	r0, [fp, #-12]
    1184:	movw	r1, #0
    1188:	cmp	r0, r1
    118c:	beq	1194 <print_expression+0x38>
    1190:	b	11b4 <print_expression+0x58>
    1194:	movw	r0, #0
    1198:	movt	r0, #0
    119c:	movw	r1, #0
    11a0:	movt	r1, #0
    11a4:	movw	r2, #4196	; 0x1064
    11a8:	movw	r3, #0
    11ac:	movt	r3, #0
    11b0:	bl	0 <__assert_fail>
    11b4:	ldr	r0, [fp, #-12]
    11b8:	ldr	r0, [r0]
    11bc:	cmp	r0, #86	; 0x56
    11c0:	str	r0, [fp, #-76]	; 0xffffffb4
    11c4:	bhi	4bc0 <print_expression+0x3a64>
    11c8:	add	r0, pc, #8
    11cc:	ldr	r1, [fp, #-76]	; 0xffffffb4
    11d0:	ldr	r0, [r0, r1, lsl #2]
    11d4:	mov	pc, r0
    11d8:	.word	0x00001334
    11dc:	.word	0x000013c0
    11e0:	.word	0x000017e0
    11e4:	.word	0x00001480
    11e8:	.word	0x00001708
    11ec:	.word	0x00001968
    11f0:	.word	0x00001a40
    11f4:	.word	0x00001b18
    11f8:	.word	0x00001558
    11fc:	.word	0x00001630
    1200:	.word	0x00001bf0
    1204:	.word	0x00004a08
    1208:	.word	0x00001c30
    120c:	.word	0x00001cbc
    1210:	.word	0x00001d48
    1214:	.word	0x00001dd4
    1218:	.word	0x00001e60
    121c:	.word	0x000018dc
    1220:	.word	0x00001fb8
    1224:	.word	0x00002048
    1228:	.word	0x0000207c
    122c:	.word	0x000020c0
    1230:	.word	0x000020c0
    1234:	.word	0x00002174
    1238:	.word	0x0000224c
    123c:	.word	0x0000230c
    1240:	.word	0x000023cc
    1244:	.word	0x00002458
    1248:	.word	0x00002498
    124c:	.word	0x000024d8
    1250:	.word	0x00002564
    1254:	.word	0x000025f0
    1258:	.word	0x000027d0
    125c:	.word	0x00002870
    1260:	.word	0x000028cc
    1264:	.word	0x000028ec
    1268:	.word	0x00002964
    126c:	.word	0x00002984
    1270:	.word	0x000029f0
    1274:	.word	0x00002a10
    1278:	.word	0x00002a9c
    127c:	.word	0x00002b98
    1280:	.word	0x00002c94
    1284:	.word	0x00002d98
    1288:	.word	0x00002e24
    128c:	.word	0x00002e70
    1290:	.word	0x00002efc
    1294:	.word	0x00002f88
    1298:	.word	0x00003014
    129c:	.word	0x000030a0
    12a0:	.word	0x0000312c
    12a4:	.word	0x000031b8
    12a8:	.word	0x000032b4
    12ac:	.word	0x000033b0
    12b0:	.word	0x00003490
    12b4:	.word	0x00003570
    12b8:	.word	0x000035fc
    12bc:	.word	0x000036d4
    12c0:	.word	0x000037ac
    12c4:	.word	0x0000386c
    12c8:	.word	0x0000392c
    12cc:	.word	0x00003980
    12d0:	.word	0x00003a40
    12d4:	.word	0x00003a94
    12d8:	.word	0x00003b20
    12dc:	.word	0x00003bac
    12e0:	.word	0x00003c6c
    12e4:	.word	0x00003d2c
    12e8:	.word	0x00003d6c
    12ec:	.word	0x00003dac
    12f0:	.word	0x00003dec
    12f4:	.word	0x00003e2c
    12f8:	.word	0x00003f6c
    12fc:	.word	0x00003ff8
    1300:	.word	0x00004084
    1304:	.word	0x00004114
    1308:	.word	0x00004208
    130c:	.word	0x000042fc
    1310:	.word	0x00004420
    1314:	.word	0x000044e0
    1318:	.word	0x000045b8
    131c:	.word	0x00004644
    1320:	.word	0x0000471c
    1324:	.word	0x000047b4
    1328:	.word	0x0000484c
    132c:	.word	0x00004964
    1330:	.word	0x00004ae0
    1334:	ldr	r0, [fp, #-16]
    1338:	ldr	r1, [fp, #-24]	; 0xffffffe8
    133c:	cmp	r1, #0
    1340:	movw	r1, #0
    1344:	movne	r1, #1
    1348:	tst	r1, #1
    134c:	movw	r1, #0
    1350:	movt	r1, #0
    1354:	movw	r2, #0
    1358:	movt	r2, #0
    135c:	movne	r1, r2
    1360:	str	r0, [fp, #-80]	; 0xffffffb0
    1364:	mov	r0, r1
    1368:	ldr	r1, [fp, #-80]	; 0xffffffb0
    136c:	blx	r1
    1370:	ldr	r1, [fp, #-12]
    1374:	ldr	r1, [r1, #16]
    1378:	ldr	r2, [fp, #-16]
    137c:	ldr	r3, [fp, #-20]	; 0xffffffec
    1380:	ldr	ip, [fp, #-24]	; 0xffffffe8
    1384:	str	r0, [fp, #-84]	; 0xffffffac
    1388:	mov	r0, r1
    138c:	mov	r1, r2
    1390:	mov	r2, r3
    1394:	mov	r3, ip
    1398:	movw	ip, #15
    139c:	str	ip, [sp]
    13a0:	bl	115c <print_expression>
    13a4:	ldr	r1, [fp, #-16]
    13a8:	movw	r2, #0
    13ac:	movt	r2, #0
    13b0:	str	r0, [fp, #-88]	; 0xffffffa8
    13b4:	mov	r0, r2
    13b8:	blx	r1
    13bc:	b	4bc0 <print_expression+0x3a64>
    13c0:	ldr	r0, [fp, #8]
    13c4:	cmp	r0, #4
    13c8:	bge	13e8 <print_expression+0x28c>
    13cc:	ldr	r0, [fp, #-16]
    13d0:	movw	r1, #0
    13d4:	movt	r1, #0
    13d8:	str	r0, [fp, #-92]	; 0xffffffa4
    13dc:	mov	r0, r1
    13e0:	ldr	r1, [fp, #-92]	; 0xffffffa4
    13e4:	blx	r1
    13e8:	ldr	r0, [fp, #-12]
    13ec:	ldr	r0, [r0, #16]
    13f0:	ldr	r1, [fp, #-16]
    13f4:	ldr	r2, [fp, #-20]	; 0xffffffec
    13f8:	ldr	r3, [fp, #-24]	; 0xffffffe8
    13fc:	movw	ip, #4
    1400:	str	ip, [sp]
    1404:	bl	115c <print_expression>
    1408:	ldr	r1, [fp, #-16]
    140c:	movw	r2, #0
    1410:	movt	r2, #0
    1414:	str	r0, [fp, #-96]	; 0xffffffa0
    1418:	mov	r0, r2
    141c:	blx	r1
    1420:	ldr	r1, [fp, #-12]
    1424:	ldr	r1, [r1, #20]
    1428:	ldr	r2, [fp, #-16]
    142c:	ldr	r3, [fp, #-20]	; 0xffffffec
    1430:	ldr	ip, [fp, #-24]	; 0xffffffe8
    1434:	str	r0, [fp, #-100]	; 0xffffff9c
    1438:	mov	r0, r1
    143c:	mov	r1, r2
    1440:	mov	r2, r3
    1444:	mov	r3, ip
    1448:	movw	ip, #4
    144c:	str	ip, [sp]
    1450:	bl	115c <print_expression>
    1454:	ldr	r1, [fp, #8]
    1458:	cmp	r1, #4
    145c:	bge	147c <print_expression+0x320>
    1460:	ldr	r0, [fp, #-16]
    1464:	movw	r1, #0
    1468:	movt	r1, #0
    146c:	str	r0, [fp, #-104]	; 0xffffff98
    1470:	mov	r0, r1
    1474:	ldr	r1, [fp, #-104]	; 0xffffff98
    1478:	blx	r1
    147c:	b	4bc0 <print_expression+0x3a64>
    1480:	ldr	r0, [fp, #-16]
    1484:	ldr	r1, [fp, #-24]	; 0xffffffe8
    1488:	cmp	r1, #0
    148c:	movw	r1, #0
    1490:	movne	r1, #1
    1494:	tst	r1, #1
    1498:	movw	r1, #0
    149c:	movt	r1, #0
    14a0:	movw	r2, #0
    14a4:	movt	r2, #0
    14a8:	movne	r1, r2
    14ac:	str	r0, [fp, #-108]	; 0xffffff94
    14b0:	mov	r0, r1
    14b4:	ldr	r1, [fp, #-108]	; 0xffffff94
    14b8:	blx	r1
    14bc:	ldr	r1, [fp, #-12]
    14c0:	ldr	r1, [r1, #16]
    14c4:	ldr	r2, [fp, #-16]
    14c8:	ldr	r3, [fp, #-20]	; 0xffffffec
    14cc:	ldr	ip, [fp, #-24]	; 0xffffffe8
    14d0:	str	r0, [fp, #-112]	; 0xffffff90
    14d4:	mov	r0, r1
    14d8:	mov	r1, r2
    14dc:	mov	r2, r3
    14e0:	mov	r3, ip
    14e4:	movw	ip, #15
    14e8:	str	ip, [sp]
    14ec:	bl	115c <print_expression>
    14f0:	ldr	r1, [fp, #-16]
    14f4:	movw	r2, #0
    14f8:	movt	r2, #0
    14fc:	str	r0, [fp, #-116]	; 0xffffff8c
    1500:	mov	r0, r2
    1504:	blx	r1
    1508:	ldr	r1, [fp, #-12]
    150c:	ldr	r1, [r1, #20]
    1510:	ldr	r2, [fp, #-16]
    1514:	ldr	r3, [fp, #-20]	; 0xffffffec
    1518:	ldr	ip, [fp, #-24]	; 0xffffffe8
    151c:	str	r0, [fp, #-120]	; 0xffffff88
    1520:	mov	r0, r1
    1524:	mov	r1, r2
    1528:	mov	r2, r3
    152c:	mov	r3, ip
    1530:	movw	ip, #15
    1534:	str	ip, [sp]
    1538:	bl	115c <print_expression>
    153c:	ldr	r1, [fp, #-16]
    1540:	movw	r2, #0
    1544:	movt	r2, #0
    1548:	str	r0, [fp, #-124]	; 0xffffff84
    154c:	mov	r0, r2
    1550:	blx	r1
    1554:	b	4bc0 <print_expression+0x3a64>
    1558:	ldr	r0, [fp, #-16]
    155c:	ldr	r1, [fp, #-24]	; 0xffffffe8
    1560:	cmp	r1, #0
    1564:	movw	r1, #0
    1568:	movne	r1, #1
    156c:	tst	r1, #1
    1570:	movw	r1, #0
    1574:	movt	r1, #0
    1578:	movw	r2, #0
    157c:	movt	r2, #0
    1580:	movne	r1, r2
    1584:	str	r0, [fp, #-128]	; 0xffffff80
    1588:	mov	r0, r1
    158c:	ldr	r1, [fp, #-128]	; 0xffffff80
    1590:	blx	r1
    1594:	ldr	r1, [fp, #-12]
    1598:	ldr	r1, [r1, #16]
    159c:	ldr	r2, [fp, #-16]
    15a0:	ldr	r3, [fp, #-20]	; 0xffffffec
    15a4:	ldr	ip, [fp, #-24]	; 0xffffffe8
    15a8:	str	r0, [fp, #-132]	; 0xffffff7c
    15ac:	mov	r0, r1
    15b0:	mov	r1, r2
    15b4:	mov	r2, r3
    15b8:	mov	r3, ip
    15bc:	movw	ip, #15
    15c0:	str	ip, [sp]
    15c4:	bl	115c <print_expression>
    15c8:	ldr	r1, [fp, #-16]
    15cc:	movw	r2, #0
    15d0:	movt	r2, #0
    15d4:	str	r0, [fp, #-136]	; 0xffffff78
    15d8:	mov	r0, r2
    15dc:	blx	r1
    15e0:	ldr	r1, [fp, #-12]
    15e4:	ldr	r1, [r1, #20]
    15e8:	ldr	r2, [fp, #-16]
    15ec:	ldr	r3, [fp, #-20]	; 0xffffffec
    15f0:	ldr	ip, [fp, #-24]	; 0xffffffe8
    15f4:	str	r0, [fp, #-140]	; 0xffffff74
    15f8:	mov	r0, r1
    15fc:	mov	r1, r2
    1600:	mov	r2, r3
    1604:	mov	r3, ip
    1608:	movw	ip, #15
    160c:	str	ip, [sp]
    1610:	bl	115c <print_expression>
    1614:	ldr	r1, [fp, #-16]
    1618:	movw	r2, #0
    161c:	movt	r2, #0
    1620:	str	r0, [fp, #-144]	; 0xffffff70
    1624:	mov	r0, r2
    1628:	blx	r1
    162c:	b	4bc0 <print_expression+0x3a64>
    1630:	ldr	r0, [fp, #-16]
    1634:	ldr	r1, [fp, #-24]	; 0xffffffe8
    1638:	cmp	r1, #0
    163c:	movw	r1, #0
    1640:	movne	r1, #1
    1644:	tst	r1, #1
    1648:	movw	r1, #0
    164c:	movt	r1, #0
    1650:	movw	r2, #0
    1654:	movt	r2, #0
    1658:	movne	r1, r2
    165c:	str	r0, [fp, #-148]	; 0xffffff6c
    1660:	mov	r0, r1
    1664:	ldr	r1, [fp, #-148]	; 0xffffff6c
    1668:	blx	r1
    166c:	ldr	r1, [fp, #-12]
    1670:	ldr	r1, [r1, #16]
    1674:	ldr	r2, [fp, #-16]
    1678:	ldr	r3, [fp, #-20]	; 0xffffffec
    167c:	ldr	ip, [fp, #-24]	; 0xffffffe8
    1680:	str	r0, [fp, #-152]	; 0xffffff68
    1684:	mov	r0, r1
    1688:	mov	r1, r2
    168c:	mov	r2, r3
    1690:	mov	r3, ip
    1694:	movw	ip, #15
    1698:	str	ip, [sp]
    169c:	bl	115c <print_expression>
    16a0:	ldr	r1, [fp, #-16]
    16a4:	movw	r2, #0
    16a8:	movt	r2, #0
    16ac:	str	r0, [fp, #-156]	; 0xffffff64
    16b0:	mov	r0, r2
    16b4:	blx	r1
    16b8:	ldr	r1, [fp, #-12]
    16bc:	ldr	r1, [r1, #20]
    16c0:	ldr	r2, [fp, #-16]
    16c4:	ldr	r3, [fp, #-20]	; 0xffffffec
    16c8:	ldr	ip, [fp, #-24]	; 0xffffffe8
    16cc:	str	r0, [fp, #-160]	; 0xffffff60
    16d0:	mov	r0, r1
    16d4:	mov	r1, r2
    16d8:	mov	r2, r3
    16dc:	mov	r3, ip
    16e0:	movw	ip, #15
    16e4:	str	ip, [sp]
    16e8:	bl	115c <print_expression>
    16ec:	ldr	r1, [fp, #-16]
    16f0:	movw	r2, #0
    16f4:	movt	r2, #0
    16f8:	str	r0, [fp, #-164]	; 0xffffff5c
    16fc:	mov	r0, r2
    1700:	blx	r1
    1704:	b	4bc0 <print_expression+0x3a64>
    1708:	ldr	r0, [fp, #-16]
    170c:	ldr	r1, [fp, #-24]	; 0xffffffe8
    1710:	cmp	r1, #0
    1714:	movw	r1, #0
    1718:	movne	r1, #1
    171c:	tst	r1, #1
    1720:	movw	r1, #0
    1724:	movt	r1, #0
    1728:	movw	r2, #0
    172c:	movt	r2, #0
    1730:	movne	r1, r2
    1734:	str	r0, [fp, #-168]	; 0xffffff58
    1738:	mov	r0, r1
    173c:	ldr	r1, [fp, #-168]	; 0xffffff58
    1740:	blx	r1
    1744:	ldr	r1, [fp, #-12]
    1748:	ldr	r1, [r1, #16]
    174c:	ldr	r2, [fp, #-16]
    1750:	ldr	r3, [fp, #-20]	; 0xffffffec
    1754:	ldr	ip, [fp, #-24]	; 0xffffffe8
    1758:	str	r0, [fp, #-172]	; 0xffffff54
    175c:	mov	r0, r1
    1760:	mov	r1, r2
    1764:	mov	r2, r3
    1768:	mov	r3, ip
    176c:	movw	ip, #15
    1770:	str	ip, [sp]
    1774:	bl	115c <print_expression>
    1778:	ldr	r1, [fp, #-16]
    177c:	movw	r2, #0
    1780:	movt	r2, #0
    1784:	str	r0, [fp, #-176]	; 0xffffff50
    1788:	mov	r0, r2
    178c:	blx	r1
    1790:	ldr	r1, [fp, #-12]
    1794:	ldr	r1, [r1, #20]
    1798:	ldr	r2, [fp, #-16]
    179c:	ldr	r3, [fp, #-20]	; 0xffffffec
    17a0:	ldr	ip, [fp, #-24]	; 0xffffffe8
    17a4:	str	r0, [fp, #-180]	; 0xffffff4c
    17a8:	mov	r0, r1
    17ac:	mov	r1, r2
    17b0:	mov	r2, r3
    17b4:	mov	r3, ip
    17b8:	movw	ip, #15
    17bc:	str	ip, [sp]
    17c0:	bl	115c <print_expression>
    17c4:	ldr	r1, [fp, #-16]
    17c8:	movw	r2, #0
    17cc:	movt	r2, #0
    17d0:	str	r0, [fp, #-184]	; 0xffffff48
    17d4:	mov	r0, r2
    17d8:	blx	r1
    17dc:	b	4bc0 <print_expression+0x3a64>
    17e0:	ldr	r0, [fp, #8]
    17e4:	cmp	r0, #7
    17e8:	bge	1808 <print_expression+0x6ac>
    17ec:	ldr	r0, [fp, #-16]
    17f0:	movw	r1, #0
    17f4:	movt	r1, #0
    17f8:	str	r0, [fp, #-188]	; 0xffffff44
    17fc:	mov	r0, r1
    1800:	ldr	r1, [fp, #-188]	; 0xffffff44
    1804:	blx	r1
    1808:	ldr	r0, [fp, #-12]
    180c:	ldr	r0, [r0, #16]
    1810:	ldr	r1, [fp, #-16]
    1814:	ldr	r2, [fp, #-20]	; 0xffffffec
    1818:	ldr	r3, [fp, #-24]	; 0xffffffe8
    181c:	movw	ip, #7
    1820:	str	ip, [sp]
    1824:	bl	115c <print_expression>
    1828:	ldr	r1, [fp, #-16]
    182c:	ldr	r2, [fp, #-24]	; 0xffffffe8
    1830:	cmp	r2, #0
    1834:	movw	r2, #1
    1838:	str	r1, [fp, #-192]	; 0xffffff40
    183c:	str	r2, [fp, #-196]	; 0xffffff3c
    1840:	bne	1858 <print_expression+0x6fc>
    1844:	ldr	r0, [fp, #-20]	; 0xffffffec
    1848:	cmp	r0, #0
    184c:	movw	r0, #0
    1850:	movne	r0, #1
    1854:	str	r0, [fp, #-196]	; 0xffffff3c
    1858:	ldr	r0, [fp, #-196]	; 0xffffff3c
    185c:	tst	r0, #1
    1860:	movw	r0, #0
    1864:	movt	r0, #0
    1868:	movw	r1, #0
    186c:	movt	r1, #0
    1870:	movne	r0, r1
    1874:	ldr	r1, [fp, #-192]	; 0xffffff40
    1878:	blx	r1
    187c:	ldr	r1, [fp, #-12]
    1880:	ldr	r1, [r1, #20]
    1884:	ldr	r2, [fp, #-16]
    1888:	ldr	r3, [fp, #-20]	; 0xffffffec
    188c:	ldr	ip, [fp, #-24]	; 0xffffffe8
    1890:	str	r0, [fp, #-200]	; 0xffffff38
    1894:	mov	r0, r1
    1898:	mov	r1, r2
    189c:	mov	r2, r3
    18a0:	mov	r3, ip
    18a4:	movw	ip, #7
    18a8:	str	ip, [sp]
    18ac:	bl	115c <print_expression>
    18b0:	ldr	r1, [fp, #8]
    18b4:	cmp	r1, #7
    18b8:	bge	18d8 <print_expression+0x77c>
    18bc:	ldr	r0, [fp, #-16]
    18c0:	movw	r1, #0
    18c4:	movt	r1, #0
    18c8:	str	r0, [fp, #-204]	; 0xffffff34
    18cc:	mov	r0, r1
    18d0:	ldr	r1, [fp, #-204]	; 0xffffff34
    18d4:	blx	r1
    18d8:	b	4bc0 <print_expression+0x3a64>
    18dc:	ldr	r0, [fp, #-16]
    18e0:	ldr	r1, [fp, #-24]	; 0xffffffe8
    18e4:	cmp	r1, #0
    18e8:	movw	r1, #0
    18ec:	movne	r1, #1
    18f0:	tst	r1, #1
    18f4:	movw	r1, #0
    18f8:	movt	r1, #0
    18fc:	movw	r2, #0
    1900:	movt	r2, #0
    1904:	movne	r1, r2
    1908:	str	r0, [fp, #-208]	; 0xffffff30
    190c:	mov	r0, r1
    1910:	ldr	r1, [fp, #-208]	; 0xffffff30
    1914:	blx	r1
    1918:	ldr	r1, [fp, #-12]
    191c:	ldr	r1, [r1, #16]
    1920:	ldr	r2, [fp, #-16]
    1924:	ldr	r3, [fp, #-20]	; 0xffffffec
    1928:	ldr	ip, [fp, #-24]	; 0xffffffe8
    192c:	str	r0, [fp, #-212]	; 0xffffff2c
    1930:	mov	r0, r1
    1934:	mov	r1, r2
    1938:	mov	r2, r3
    193c:	mov	r3, ip
    1940:	movw	ip, #15
    1944:	str	ip, [sp]
    1948:	bl	115c <print_expression>
    194c:	ldr	r1, [fp, #-16]
    1950:	movw	r2, #0
    1954:	movt	r2, #0
    1958:	str	r0, [fp, #-216]	; 0xffffff28
    195c:	mov	r0, r2
    1960:	blx	r1
    1964:	b	4bc0 <print_expression+0x3a64>
    1968:	ldr	r0, [fp, #-16]
    196c:	ldr	r1, [fp, #-24]	; 0xffffffe8
    1970:	cmp	r1, #0
    1974:	movw	r1, #0
    1978:	movne	r1, #1
    197c:	tst	r1, #1
    1980:	movw	r1, #0
    1984:	movt	r1, #0
    1988:	movw	r2, #0
    198c:	movt	r2, #0
    1990:	movne	r1, r2
    1994:	str	r0, [fp, #-220]	; 0xffffff24
    1998:	mov	r0, r1
    199c:	ldr	r1, [fp, #-220]	; 0xffffff24
    19a0:	blx	r1
    19a4:	ldr	r1, [fp, #-12]
    19a8:	ldr	r1, [r1, #16]
    19ac:	ldr	r2, [fp, #-16]
    19b0:	ldr	r3, [fp, #-20]	; 0xffffffec
    19b4:	ldr	ip, [fp, #-24]	; 0xffffffe8
    19b8:	str	r0, [fp, #-224]	; 0xffffff20
    19bc:	mov	r0, r1
    19c0:	mov	r1, r2
    19c4:	mov	r2, r3
    19c8:	mov	r3, ip
    19cc:	movw	ip, #15
    19d0:	str	ip, [sp]
    19d4:	bl	115c <print_expression>
    19d8:	ldr	r1, [fp, #-16]
    19dc:	movw	r2, #0
    19e0:	movt	r2, #0
    19e4:	str	r0, [fp, #-228]	; 0xffffff1c
    19e8:	mov	r0, r2
    19ec:	blx	r1
    19f0:	ldr	r1, [fp, #-12]
    19f4:	ldr	r1, [r1, #20]
    19f8:	ldr	r2, [fp, #-16]
    19fc:	ldr	r3, [fp, #-20]	; 0xffffffec
    1a00:	ldr	ip, [fp, #-24]	; 0xffffffe8
    1a04:	str	r0, [fp, #-232]	; 0xffffff18
    1a08:	mov	r0, r1
    1a0c:	mov	r1, r2
    1a10:	mov	r2, r3
    1a14:	mov	r3, ip
    1a18:	movw	ip, #15
    1a1c:	str	ip, [sp]
    1a20:	bl	115c <print_expression>
    1a24:	ldr	r1, [fp, #-16]
    1a28:	movw	r2, #0
    1a2c:	movt	r2, #0
    1a30:	str	r0, [fp, #-236]	; 0xffffff14
    1a34:	mov	r0, r2
    1a38:	blx	r1
    1a3c:	b	4bc0 <print_expression+0x3a64>
    1a40:	ldr	r0, [fp, #-16]
    1a44:	ldr	r1, [fp, #-24]	; 0xffffffe8
    1a48:	cmp	r1, #0
    1a4c:	movw	r1, #0
    1a50:	movne	r1, #1
    1a54:	tst	r1, #1
    1a58:	movw	r1, #0
    1a5c:	movt	r1, #0
    1a60:	movw	r2, #0
    1a64:	movt	r2, #0
    1a68:	movne	r1, r2
    1a6c:	str	r0, [fp, #-240]	; 0xffffff10
    1a70:	mov	r0, r1
    1a74:	ldr	r1, [fp, #-240]	; 0xffffff10
    1a78:	blx	r1
    1a7c:	ldr	r1, [fp, #-12]
    1a80:	ldr	r1, [r1, #16]
    1a84:	ldr	r2, [fp, #-16]
    1a88:	ldr	r3, [fp, #-20]	; 0xffffffec
    1a8c:	ldr	ip, [fp, #-24]	; 0xffffffe8
    1a90:	str	r0, [fp, #-244]	; 0xffffff0c
    1a94:	mov	r0, r1
    1a98:	mov	r1, r2
    1a9c:	mov	r2, r3
    1aa0:	mov	r3, ip
    1aa4:	movw	ip, #15
    1aa8:	str	ip, [sp]
    1aac:	bl	115c <print_expression>
    1ab0:	ldr	r1, [fp, #-16]
    1ab4:	movw	r2, #0
    1ab8:	movt	r2, #0
    1abc:	str	r0, [fp, #-248]	; 0xffffff08
    1ac0:	mov	r0, r2
    1ac4:	blx	r1
    1ac8:	ldr	r1, [fp, #-12]
    1acc:	ldr	r1, [r1, #20]
    1ad0:	ldr	r2, [fp, #-16]
    1ad4:	ldr	r3, [fp, #-20]	; 0xffffffec
    1ad8:	ldr	ip, [fp, #-24]	; 0xffffffe8
    1adc:	str	r0, [fp, #-252]	; 0xffffff04
    1ae0:	mov	r0, r1
    1ae4:	mov	r1, r2
    1ae8:	mov	r2, r3
    1aec:	mov	r3, ip
    1af0:	movw	ip, #15
    1af4:	str	ip, [sp]
    1af8:	bl	115c <print_expression>
    1afc:	ldr	r1, [fp, #-16]
    1b00:	movw	r2, #0
    1b04:	movt	r2, #0
    1b08:	str	r0, [fp, #-256]	; 0xffffff00
    1b0c:	mov	r0, r2
    1b10:	blx	r1
    1b14:	b	4bc0 <print_expression+0x3a64>
    1b18:	ldr	r0, [fp, #-16]
    1b1c:	ldr	r1, [fp, #-24]	; 0xffffffe8
    1b20:	cmp	r1, #0
    1b24:	movw	r1, #0
    1b28:	movne	r1, #1
    1b2c:	tst	r1, #1
    1b30:	movw	r1, #0
    1b34:	movt	r1, #0
    1b38:	movw	r2, #0
    1b3c:	movt	r2, #0
    1b40:	movne	r1, r2
    1b44:	str	r0, [fp, #-260]	; 0xfffffefc
    1b48:	mov	r0, r1
    1b4c:	ldr	r1, [fp, #-260]	; 0xfffffefc
    1b50:	blx	r1
    1b54:	ldr	r1, [fp, #-12]
    1b58:	ldr	r1, [r1, #16]
    1b5c:	ldr	r2, [fp, #-16]
    1b60:	ldr	r3, [fp, #-20]	; 0xffffffec
    1b64:	ldr	ip, [fp, #-24]	; 0xffffffe8
    1b68:	str	r0, [fp, #-264]	; 0xfffffef8
    1b6c:	mov	r0, r1
    1b70:	mov	r1, r2
    1b74:	mov	r2, r3
    1b78:	mov	r3, ip
    1b7c:	movw	ip, #15
    1b80:	str	ip, [sp]
    1b84:	bl	115c <print_expression>
    1b88:	ldr	r1, [fp, #-16]
    1b8c:	movw	r2, #0
    1b90:	movt	r2, #0
    1b94:	str	r0, [fp, #-268]	; 0xfffffef4
    1b98:	mov	r0, r2
    1b9c:	blx	r1
    1ba0:	ldr	r1, [fp, #-12]
    1ba4:	ldr	r1, [r1, #20]
    1ba8:	ldr	r2, [fp, #-16]
    1bac:	ldr	r3, [fp, #-20]	; 0xffffffec
    1bb0:	ldr	ip, [fp, #-24]	; 0xffffffe8
    1bb4:	str	r0, [fp, #-272]	; 0xfffffef0
    1bb8:	mov	r0, r1
    1bbc:	mov	r1, r2
    1bc0:	mov	r2, r3
    1bc4:	mov	r3, ip
    1bc8:	movw	ip, #15
    1bcc:	str	ip, [sp]
    1bd0:	bl	115c <print_expression>
    1bd4:	ldr	r1, [fp, #-16]
    1bd8:	movw	r2, #0
    1bdc:	movt	r2, #0
    1be0:	str	r0, [fp, #-276]	; 0xfffffeec
    1be4:	mov	r0, r2
    1be8:	blx	r1
    1bec:	b	4bc0 <print_expression+0x3a64>
    1bf0:	ldr	r0, [fp, #-16]
    1bf4:	ldr	r1, [fp, #-24]	; 0xffffffe8
    1bf8:	cmp	r1, #0
    1bfc:	movw	r1, #0
    1c00:	movne	r1, #1
    1c04:	tst	r1, #1
    1c08:	movw	r1, #0
    1c0c:	movt	r1, #0
    1c10:	movw	r2, #0
    1c14:	movt	r2, #0
    1c18:	movne	r1, r2
    1c1c:	str	r0, [fp, #-280]	; 0xfffffee8
    1c20:	mov	r0, r1
    1c24:	ldr	r1, [fp, #-280]	; 0xfffffee8
    1c28:	blx	r1
    1c2c:	b	4bc0 <print_expression+0x3a64>
    1c30:	ldr	r0, [fp, #-16]
    1c34:	ldr	r1, [fp, #-24]	; 0xffffffe8
    1c38:	cmp	r1, #0
    1c3c:	movw	r1, #0
    1c40:	movne	r1, #1
    1c44:	tst	r1, #1
    1c48:	movw	r1, #0
    1c4c:	movt	r1, #0
    1c50:	movw	r2, #0
    1c54:	movt	r2, #0
    1c58:	movne	r1, r2
    1c5c:	str	r0, [fp, #-284]	; 0xfffffee4
    1c60:	mov	r0, r1
    1c64:	ldr	r1, [fp, #-284]	; 0xfffffee4
    1c68:	blx	r1
    1c6c:	ldr	r1, [fp, #-12]
    1c70:	ldr	r1, [r1, #16]
    1c74:	ldr	r2, [fp, #-16]
    1c78:	ldr	r3, [fp, #-20]	; 0xffffffec
    1c7c:	ldr	ip, [fp, #-24]	; 0xffffffe8
    1c80:	str	r0, [fp, #-288]	; 0xfffffee0
    1c84:	mov	r0, r1
    1c88:	mov	r1, r2
    1c8c:	mov	r2, r3
    1c90:	mov	r3, ip
    1c94:	movw	ip, #15
    1c98:	str	ip, [sp]
    1c9c:	bl	115c <print_expression>
    1ca0:	ldr	r1, [fp, #-16]
    1ca4:	movw	r2, #0
    1ca8:	movt	r2, #0
    1cac:	str	r0, [fp, #-292]	; 0xfffffedc
    1cb0:	mov	r0, r2
    1cb4:	blx	r1
    1cb8:	b	4bc0 <print_expression+0x3a64>
    1cbc:	ldr	r0, [fp, #-16]
    1cc0:	ldr	r1, [fp, #-24]	; 0xffffffe8
    1cc4:	cmp	r1, #0
    1cc8:	movw	r1, #0
    1ccc:	movne	r1, #1
    1cd0:	tst	r1, #1
    1cd4:	movw	r1, #0
    1cd8:	movt	r1, #0
    1cdc:	movw	r2, #0
    1ce0:	movt	r2, #0
    1ce4:	movne	r1, r2
    1ce8:	str	r0, [fp, #-296]	; 0xfffffed8
    1cec:	mov	r0, r1
    1cf0:	ldr	r1, [fp, #-296]	; 0xfffffed8
    1cf4:	blx	r1
    1cf8:	ldr	r1, [fp, #-12]
    1cfc:	ldr	r1, [r1, #16]
    1d00:	ldr	r2, [fp, #-16]
    1d04:	ldr	r3, [fp, #-20]	; 0xffffffec
    1d08:	ldr	ip, [fp, #-24]	; 0xffffffe8
    1d0c:	str	r0, [fp, #-300]	; 0xfffffed4
    1d10:	mov	r0, r1
    1d14:	mov	r1, r2
    1d18:	mov	r2, r3
    1d1c:	mov	r3, ip
    1d20:	movw	ip, #15
    1d24:	str	ip, [sp]
    1d28:	bl	115c <print_expression>
    1d2c:	ldr	r1, [fp, #-16]
    1d30:	movw	r2, #0
    1d34:	movt	r2, #0
    1d38:	str	r0, [fp, #-304]	; 0xfffffed0
    1d3c:	mov	r0, r2
    1d40:	blx	r1
    1d44:	b	4bc0 <print_expression+0x3a64>
    1d48:	ldr	r0, [fp, #-16]
    1d4c:	ldr	r1, [fp, #-24]	; 0xffffffe8
    1d50:	cmp	r1, #0
    1d54:	movw	r1, #0
    1d58:	movne	r1, #1
    1d5c:	tst	r1, #1
    1d60:	movw	r1, #0
    1d64:	movt	r1, #0
    1d68:	movw	r2, #0
    1d6c:	movt	r2, #0
    1d70:	movne	r1, r2
    1d74:	str	r0, [fp, #-308]	; 0xfffffecc
    1d78:	mov	r0, r1
    1d7c:	ldr	r1, [fp, #-308]	; 0xfffffecc
    1d80:	blx	r1
    1d84:	ldr	r1, [fp, #-12]
    1d88:	ldr	r1, [r1, #16]
    1d8c:	ldr	r2, [fp, #-16]
    1d90:	ldr	r3, [fp, #-20]	; 0xffffffec
    1d94:	ldr	ip, [fp, #-24]	; 0xffffffe8
    1d98:	str	r0, [fp, #-312]	; 0xfffffec8
    1d9c:	mov	r0, r1
    1da0:	mov	r1, r2
    1da4:	mov	r2, r3
    1da8:	mov	r3, ip
    1dac:	movw	ip, #15
    1db0:	str	ip, [sp]
    1db4:	bl	115c <print_expression>
    1db8:	ldr	r1, [fp, #-16]
    1dbc:	movw	r2, #0
    1dc0:	movt	r2, #0
    1dc4:	str	r0, [fp, #-316]	; 0xfffffec4
    1dc8:	mov	r0, r2
    1dcc:	blx	r1
    1dd0:	b	4bc0 <print_expression+0x3a64>
    1dd4:	ldr	r0, [fp, #-16]
    1dd8:	ldr	r1, [fp, #-24]	; 0xffffffe8
    1ddc:	cmp	r1, #0
    1de0:	movw	r1, #0
    1de4:	movne	r1, #1
    1de8:	tst	r1, #1
    1dec:	movw	r1, #0
    1df0:	movt	r1, #0
    1df4:	movw	r2, #0
    1df8:	movt	r2, #0
    1dfc:	movne	r1, r2
    1e00:	str	r0, [fp, #-320]	; 0xfffffec0
    1e04:	mov	r0, r1
    1e08:	ldr	r1, [fp, #-320]	; 0xfffffec0
    1e0c:	blx	r1
    1e10:	ldr	r1, [fp, #-12]
    1e14:	ldr	r1, [r1, #16]
    1e18:	ldr	r2, [fp, #-16]
    1e1c:	ldr	r3, [fp, #-20]	; 0xffffffec
    1e20:	ldr	ip, [fp, #-24]	; 0xffffffe8
    1e24:	str	r0, [fp, #-324]	; 0xfffffebc
    1e28:	mov	r0, r1
    1e2c:	mov	r1, r2
    1e30:	mov	r2, r3
    1e34:	mov	r3, ip
    1e38:	movw	ip, #15
    1e3c:	str	ip, [sp]
    1e40:	bl	115c <print_expression>
    1e44:	ldr	r1, [fp, #-16]
    1e48:	movw	r2, #0
    1e4c:	movt	r2, #0
    1e50:	str	r0, [fp, #-328]	; 0xfffffeb8
    1e54:	mov	r0, r2
    1e58:	blx	r1
    1e5c:	b	4bc0 <print_expression+0x3a64>
    1e60:	ldr	r0, [fp, #-16]
    1e64:	ldr	r1, [fp, #-24]	; 0xffffffe8
    1e68:	cmp	r1, #0
    1e6c:	movw	r1, #0
    1e70:	movne	r1, #1
    1e74:	tst	r1, #1
    1e78:	movw	r1, #0
    1e7c:	movt	r1, #0
    1e80:	movw	r2, #0
    1e84:	movt	r2, #0
    1e88:	movne	r1, r2
    1e8c:	str	r0, [fp, #-332]	; 0xfffffeb4
    1e90:	mov	r0, r1
    1e94:	ldr	r1, [fp, #-332]	; 0xfffffeb4
    1e98:	blx	r1
    1e9c:	ldr	r1, [fp, #-12]
    1ea0:	ldr	r1, [r1, #16]
    1ea4:	ldr	r2, [fp, #-16]
    1ea8:	ldr	r3, [fp, #-20]	; 0xffffffec
    1eac:	ldr	ip, [fp, #-24]	; 0xffffffe8
    1eb0:	str	r0, [fp, #-336]	; 0xfffffeb0
    1eb4:	mov	r0, r1
    1eb8:	mov	r1, r2
    1ebc:	mov	r2, r3
    1ec0:	mov	r3, ip
    1ec4:	movw	ip, #15
    1ec8:	str	ip, [sp]
    1ecc:	bl	115c <print_expression>
    1ed0:	ldr	r1, [fp, #-12]
    1ed4:	ldr	r1, [r1, #20]
    1ed8:	movw	r2, #0
    1edc:	cmp	r1, r2
    1ee0:	beq	1f34 <print_expression+0xdd8>
    1ee4:	ldr	r0, [fp, #-16]
    1ee8:	movw	r1, #0
    1eec:	movt	r1, #0
    1ef0:	str	r0, [fp, #-340]	; 0xfffffeac
    1ef4:	mov	r0, r1
    1ef8:	ldr	r1, [fp, #-340]	; 0xfffffeac
    1efc:	blx	r1
    1f00:	ldr	r1, [fp, #-12]
    1f04:	ldr	r1, [r1, #20]
    1f08:	ldr	r2, [fp, #-16]
    1f0c:	ldr	r3, [fp, #-20]	; 0xffffffec
    1f10:	ldr	ip, [fp, #-24]	; 0xffffffe8
    1f14:	str	r0, [fp, #-344]	; 0xfffffea8
    1f18:	mov	r0, r1
    1f1c:	mov	r1, r2
    1f20:	mov	r2, r3
    1f24:	mov	r3, ip
    1f28:	movw	ip, #15
    1f2c:	str	ip, [sp]
    1f30:	bl	115c <print_expression>
    1f34:	ldr	r0, [fp, #-12]
    1f38:	ldr	r0, [r0, #24]
    1f3c:	movw	r1, #0
    1f40:	cmp	r0, r1
    1f44:	beq	1f98 <print_expression+0xe3c>
    1f48:	ldr	r0, [fp, #-16]
    1f4c:	movw	r1, #0
    1f50:	movt	r1, #0
    1f54:	str	r0, [fp, #-348]	; 0xfffffea4
    1f58:	mov	r0, r1
    1f5c:	ldr	r1, [fp, #-348]	; 0xfffffea4
    1f60:	blx	r1
    1f64:	ldr	r1, [fp, #-12]
    1f68:	ldr	r1, [r1, #24]
    1f6c:	ldr	r2, [fp, #-16]
    1f70:	ldr	r3, [fp, #-20]	; 0xffffffec
    1f74:	ldr	ip, [fp, #-24]	; 0xffffffe8
    1f78:	str	r0, [fp, #-352]	; 0xfffffea0
    1f7c:	mov	r0, r1
    1f80:	mov	r1, r2
    1f84:	mov	r2, r3
    1f88:	mov	r3, ip
    1f8c:	movw	ip, #15
    1f90:	str	ip, [sp]
    1f94:	bl	115c <print_expression>
    1f98:	ldr	r0, [fp, #-16]
    1f9c:	movw	r1, #0
    1fa0:	movt	r1, #0
    1fa4:	str	r0, [fp, #-356]	; 0xfffffe9c
    1fa8:	mov	r0, r1
    1fac:	ldr	r1, [fp, #-356]	; 0xfffffe9c
    1fb0:	blx	r1
    1fb4:	b	4bc0 <print_expression+0x3a64>
    1fb8:	ldr	r0, [fp, #-12]
    1fbc:	ldr	r0, [r0, #12]
    1fc0:	cmp	r0, #0
    1fc4:	beq	2008 <print_expression+0xeac>
    1fc8:	ldr	r0, [fp, #-16]
    1fcc:	ldr	r1, [fp, #-24]	; 0xffffffe8
    1fd0:	cmp	r1, #0
    1fd4:	movw	r1, #0
    1fd8:	movne	r1, #1
    1fdc:	tst	r1, #1
    1fe0:	movw	r1, #0
    1fe4:	movt	r1, #0
    1fe8:	movw	r2, #0
    1fec:	movt	r2, #0
    1ff0:	movne	r1, r2
    1ff4:	str	r0, [fp, #-360]	; 0xfffffe98
    1ff8:	mov	r0, r1
    1ffc:	ldr	r1, [fp, #-360]	; 0xfffffe98
    2000:	blx	r1
    2004:	b	2044 <print_expression+0xee8>
    2008:	ldr	r0, [fp, #-16]
    200c:	ldr	r1, [fp, #-24]	; 0xffffffe8
    2010:	cmp	r1, #0
    2014:	movw	r1, #0
    2018:	movne	r1, #1
    201c:	tst	r1, #1
    2020:	movw	r1, #0
    2024:	movt	r1, #0
    2028:	movw	r2, #0
    202c:	movt	r2, #0
    2030:	movne	r1, r2
    2034:	str	r0, [fp, #-364]	; 0xfffffe94
    2038:	mov	r0, r1
    203c:	ldr	r1, [fp, #-364]	; 0xfffffe94
    2040:	blx	r1
    2044:	b	4bc0 <print_expression+0x3a64>
    2048:	sub	r0, fp, #48	; 0x30
    204c:	ldr	r1, [fp, #-12]
    2050:	vldr	d0, [r1, #16]
    2054:	bl	0 <coda_strfl>
    2058:	sub	r1, fp, #48	; 0x30
    205c:	ldr	r0, [fp, #-16]
    2060:	movw	r2, #0
    2064:	movt	r2, #0
    2068:	str	r0, [fp, #-368]	; 0xfffffe90
    206c:	mov	r0, r2
    2070:	ldr	r2, [fp, #-368]	; 0xfffffe90
    2074:	blx	r2
    2078:	b	4bc0 <print_expression+0x3a64>
    207c:	sub	r2, fp, #69	; 0x45
    2080:	ldr	r0, [fp, #-12]
    2084:	ldr	r1, [r0, #16]
    2088:	ldr	r0, [r0, #20]
    208c:	str	r0, [fp, #-372]	; 0xfffffe8c
    2090:	mov	r0, r1
    2094:	ldr	r1, [fp, #-372]	; 0xfffffe8c
    2098:	bl	0 <coda_str64>
    209c:	sub	r1, fp, #69	; 0x45
    20a0:	ldr	r0, [fp, #-16]
    20a4:	movw	r2, #0
    20a8:	movt	r2, #0
    20ac:	str	r0, [fp, #-376]	; 0xfffffe88
    20b0:	mov	r0, r2
    20b4:	ldr	r2, [fp, #-376]	; 0xfffffe88
    20b8:	blx	r2
    20bc:	b	4bc0 <print_expression+0x3a64>
    20c0:	ldr	r0, [fp, #-16]
    20c4:	ldr	r1, [fp, #-20]	; 0xffffffec
    20c8:	cmp	r1, #0
    20cc:	movw	r1, #0
    20d0:	movne	r1, #1
    20d4:	tst	r1, #1
    20d8:	movw	r1, #0
    20dc:	movt	r1, #0
    20e0:	movw	r2, #0
    20e4:	movt	r2, #0
    20e8:	movne	r1, r2
    20ec:	str	r0, [fp, #-380]	; 0xfffffe84
    20f0:	mov	r0, r1
    20f4:	ldr	r1, [fp, #-380]	; 0xfffffe84
    20f8:	blx	r1
    20fc:	ldr	r1, [fp, #-12]
    2100:	ldr	r1, [r1, #16]
    2104:	ldr	r2, [fp, #-12]
    2108:	ldr	r2, [r2, #12]
    210c:	ldr	r3, [fp, #-16]
    2110:	ldr	ip, [fp, #-20]	; 0xffffffec
    2114:	ldr	lr, [fp, #-24]	; 0xffffffe8
    2118:	str	r0, [fp, #-384]	; 0xfffffe80
    211c:	mov	r0, r1
    2120:	mov	r1, r2
    2124:	mov	r2, r3
    2128:	mov	r3, ip
    212c:	str	lr, [sp]
    2130:	bl	dc4c <print_escaped_string>
    2134:	ldr	r0, [fp, #-16]
    2138:	ldr	r1, [fp, #-20]	; 0xffffffec
    213c:	cmp	r1, #0
    2140:	movw	r1, #0
    2144:	movne	r1, #1
    2148:	tst	r1, #1
    214c:	movw	r1, #0
    2150:	movt	r1, #0
    2154:	movw	r2, #0
    2158:	movt	r2, #0
    215c:	movne	r1, r2
    2160:	str	r0, [fp, #-388]	; 0xfffffe7c
    2164:	mov	r0, r1
    2168:	ldr	r1, [fp, #-388]	; 0xfffffe7c
    216c:	blx	r1
    2170:	b	4bc0 <print_expression+0x3a64>
    2174:	ldr	r0, [fp, #-16]
    2178:	ldr	r1, [fp, #-24]	; 0xffffffe8
    217c:	cmp	r1, #0
    2180:	movw	r1, #0
    2184:	movne	r1, #1
    2188:	tst	r1, #1
    218c:	movw	r1, #0
    2190:	movt	r1, #0
    2194:	movw	r2, #0
    2198:	movt	r2, #0
    219c:	movne	r1, r2
    21a0:	str	r0, [fp, #-392]	; 0xfffffe78
    21a4:	mov	r0, r1
    21a8:	ldr	r1, [fp, #-392]	; 0xfffffe78
    21ac:	blx	r1
    21b0:	ldr	r1, [fp, #-12]
    21b4:	ldr	r1, [r1, #16]
    21b8:	ldr	r2, [fp, #-16]
    21bc:	ldr	r3, [fp, #-20]	; 0xffffffec
    21c0:	ldr	ip, [fp, #-24]	; 0xffffffe8
    21c4:	str	r0, [fp, #-396]	; 0xfffffe74
    21c8:	mov	r0, r1
    21cc:	mov	r1, r2
    21d0:	mov	r2, r3
    21d4:	mov	r3, ip
    21d8:	movw	ip, #15
    21dc:	str	ip, [sp]
    21e0:	bl	115c <print_expression>
    21e4:	ldr	r1, [fp, #-16]
    21e8:	movw	r2, #0
    21ec:	movt	r2, #0
    21f0:	str	r0, [fp, #-400]	; 0xfffffe70
    21f4:	mov	r0, r2
    21f8:	blx	r1
    21fc:	ldr	r1, [fp, #-12]
    2200:	ldr	r1, [r1, #20]
    2204:	ldr	r2, [fp, #-16]
    2208:	ldr	r3, [fp, #-20]	; 0xffffffec
    220c:	ldr	ip, [fp, #-24]	; 0xffffffe8
    2210:	str	r0, [fp, #-404]	; 0xfffffe6c
    2214:	mov	r0, r1
    2218:	mov	r1, r2
    221c:	mov	r2, r3
    2220:	mov	r3, ip
    2224:	movw	ip, #15
    2228:	str	ip, [sp]
    222c:	bl	115c <print_expression>
    2230:	ldr	r1, [fp, #-16]
    2234:	movw	r2, #0
    2238:	movt	r2, #0
    223c:	str	r0, [fp, #-408]	; 0xfffffe68
    2240:	mov	r0, r2
    2244:	blx	r1
    2248:	b	4bc0 <print_expression+0x3a64>
    224c:	ldr	r0, [fp, #8]
    2250:	cmp	r0, #3
    2254:	bge	2274 <print_expression+0x1118>
    2258:	ldr	r0, [fp, #-16]
    225c:	movw	r1, #0
    2260:	movt	r1, #0
    2264:	str	r0, [fp, #-412]	; 0xfffffe64
    2268:	mov	r0, r1
    226c:	ldr	r1, [fp, #-412]	; 0xfffffe64
    2270:	blx	r1
    2274:	ldr	r0, [fp, #-12]
    2278:	ldr	r0, [r0, #16]
    227c:	ldr	r1, [fp, #-16]
    2280:	ldr	r2, [fp, #-20]	; 0xffffffec
    2284:	ldr	r3, [fp, #-24]	; 0xffffffe8
    2288:	movw	ip, #3
    228c:	str	ip, [sp]
    2290:	bl	115c <print_expression>
    2294:	ldr	r1, [fp, #-16]
    2298:	movw	r2, #0
    229c:	movt	r2, #0
    22a0:	str	r0, [fp, #-416]	; 0xfffffe60
    22a4:	mov	r0, r2
    22a8:	blx	r1
    22ac:	ldr	r1, [fp, #-12]
    22b0:	ldr	r1, [r1, #20]
    22b4:	ldr	r2, [fp, #-16]
    22b8:	ldr	r3, [fp, #-20]	; 0xffffffec
    22bc:	ldr	ip, [fp, #-24]	; 0xffffffe8
    22c0:	str	r0, [fp, #-420]	; 0xfffffe5c
    22c4:	mov	r0, r1
    22c8:	mov	r1, r2
    22cc:	mov	r2, r3
    22d0:	mov	r3, ip
    22d4:	movw	ip, #3
    22d8:	str	ip, [sp]
    22dc:	bl	115c <print_expression>
    22e0:	ldr	r1, [fp, #8]
    22e4:	cmp	r1, #3
    22e8:	bge	2308 <print_expression+0x11ac>
    22ec:	ldr	r0, [fp, #-16]
    22f0:	movw	r1, #0
    22f4:	movt	r1, #0
    22f8:	str	r0, [fp, #-424]	; 0xfffffe58
    22fc:	mov	r0, r1
    2300:	ldr	r1, [fp, #-424]	; 0xfffffe58
    2304:	blx	r1
    2308:	b	4bc0 <print_expression+0x3a64>
    230c:	ldr	r0, [fp, #8]
    2310:	cmp	r0, #6
    2314:	bge	2334 <print_expression+0x11d8>
    2318:	ldr	r0, [fp, #-16]
    231c:	movw	r1, #0
    2320:	movt	r1, #0
    2324:	str	r0, [fp, #-428]	; 0xfffffe54
    2328:	mov	r0, r1
    232c:	ldr	r1, [fp, #-428]	; 0xfffffe54
    2330:	blx	r1
    2334:	ldr	r0, [fp, #-12]
    2338:	ldr	r0, [r0, #16]
    233c:	ldr	r1, [fp, #-16]
    2340:	ldr	r2, [fp, #-20]	; 0xffffffec
    2344:	ldr	r3, [fp, #-24]	; 0xffffffe8
    2348:	movw	ip, #6
    234c:	str	ip, [sp]
    2350:	bl	115c <print_expression>
    2354:	ldr	r1, [fp, #-16]
    2358:	movw	r2, #0
    235c:	movt	r2, #0
    2360:	str	r0, [fp, #-432]	; 0xfffffe50
    2364:	mov	r0, r2
    2368:	blx	r1
    236c:	ldr	r1, [fp, #-12]
    2370:	ldr	r1, [r1, #20]
    2374:	ldr	r2, [fp, #-16]
    2378:	ldr	r3, [fp, #-20]	; 0xffffffec
    237c:	ldr	ip, [fp, #-24]	; 0xffffffe8
    2380:	str	r0, [fp, #-436]	; 0xfffffe4c
    2384:	mov	r0, r1
    2388:	mov	r1, r2
    238c:	mov	r2, r3
    2390:	mov	r3, ip
    2394:	movw	ip, #6
    2398:	str	ip, [sp]
    239c:	bl	115c <print_expression>
    23a0:	ldr	r1, [fp, #8]
    23a4:	cmp	r1, #6
    23a8:	bge	23c8 <print_expression+0x126c>
    23ac:	ldr	r0, [fp, #-16]
    23b0:	movw	r1, #0
    23b4:	movt	r1, #0
    23b8:	str	r0, [fp, #-440]	; 0xfffffe48
    23bc:	mov	r0, r1
    23c0:	ldr	r1, [fp, #-440]	; 0xfffffe48
    23c4:	blx	r1
    23c8:	b	4bc0 <print_expression+0x3a64>
    23cc:	ldr	r0, [fp, #-16]
    23d0:	ldr	r1, [fp, #-24]	; 0xffffffe8
    23d4:	cmp	r1, #0
    23d8:	movw	r1, #0
    23dc:	movne	r1, #1
    23e0:	tst	r1, #1
    23e4:	movw	r1, #0
    23e8:	movt	r1, #0
    23ec:	movw	r2, #0
    23f0:	movt	r2, #0
    23f4:	movne	r1, r2
    23f8:	str	r0, [fp, #-444]	; 0xfffffe44
    23fc:	mov	r0, r1
    2400:	ldr	r1, [fp, #-444]	; 0xfffffe44
    2404:	blx	r1
    2408:	ldr	r1, [fp, #-12]
    240c:	ldr	r1, [r1, #16]
    2410:	ldr	r2, [fp, #-16]
    2414:	ldr	r3, [fp, #-20]	; 0xffffffec
    2418:	ldr	ip, [fp, #-24]	; 0xffffffe8
    241c:	str	r0, [fp, #-448]	; 0xfffffe40
    2420:	mov	r0, r1
    2424:	mov	r1, r2
    2428:	mov	r2, r3
    242c:	mov	r3, ip
    2430:	movw	ip, #15
    2434:	str	ip, [sp]
    2438:	bl	115c <print_expression>
    243c:	ldr	r1, [fp, #-16]
    2440:	movw	r2, #0
    2444:	movt	r2, #0
    2448:	str	r0, [fp, #-452]	; 0xfffffe3c
    244c:	mov	r0, r2
    2450:	blx	r1
    2454:	b	4bc0 <print_expression+0x3a64>
    2458:	ldr	r0, [fp, #-16]
    245c:	ldr	r1, [fp, #-24]	; 0xffffffe8
    2460:	cmp	r1, #0
    2464:	movw	r1, #0
    2468:	movne	r1, #1
    246c:	tst	r1, #1
    2470:	movw	r1, #0
    2474:	movt	r1, #0
    2478:	movw	r2, #0
    247c:	movt	r2, #0
    2480:	movne	r1, r2
    2484:	str	r0, [fp, #-456]	; 0xfffffe38
    2488:	mov	r0, r1
    248c:	ldr	r1, [fp, #-456]	; 0xfffffe38
    2490:	blx	r1
    2494:	b	4bc0 <print_expression+0x3a64>
    2498:	ldr	r0, [fp, #-16]
    249c:	ldr	r1, [fp, #-24]	; 0xffffffe8
    24a0:	cmp	r1, #0
    24a4:	movw	r1, #0
    24a8:	movne	r1, #1
    24ac:	tst	r1, #1
    24b0:	movw	r1, #0
    24b4:	movt	r1, #0
    24b8:	movw	r2, #0
    24bc:	movt	r2, #0
    24c0:	movne	r1, r2
    24c4:	str	r0, [fp, #-460]	; 0xfffffe34
    24c8:	mov	r0, r1
    24cc:	ldr	r1, [fp, #-460]	; 0xfffffe34
    24d0:	blx	r1
    24d4:	b	4bc0 <print_expression+0x3a64>
    24d8:	ldr	r0, [fp, #-16]
    24dc:	ldr	r1, [fp, #-24]	; 0xffffffe8
    24e0:	cmp	r1, #0
    24e4:	movw	r1, #0
    24e8:	movne	r1, #1
    24ec:	tst	r1, #1
    24f0:	movw	r1, #0
    24f4:	movt	r1, #0
    24f8:	movw	r2, #0
    24fc:	movt	r2, #0
    2500:	movne	r1, r2
    2504:	str	r0, [fp, #-464]	; 0xfffffe30
    2508:	mov	r0, r1
    250c:	ldr	r1, [fp, #-464]	; 0xfffffe30
    2510:	blx	r1
    2514:	ldr	r1, [fp, #-12]
    2518:	ldr	r1, [r1, #16]
    251c:	ldr	r2, [fp, #-16]
    2520:	ldr	r3, [fp, #-20]	; 0xffffffec
    2524:	ldr	ip, [fp, #-24]	; 0xffffffe8
    2528:	str	r0, [fp, #-468]	; 0xfffffe2c
    252c:	mov	r0, r1
    2530:	mov	r1, r2
    2534:	mov	r2, r3
    2538:	mov	r3, ip
    253c:	movw	ip, #15
    2540:	str	ip, [sp]
    2544:	bl	115c <print_expression>
    2548:	ldr	r1, [fp, #-16]
    254c:	movw	r2, #0
    2550:	movt	r2, #0
    2554:	str	r0, [fp, #-472]	; 0xfffffe28
    2558:	mov	r0, r2
    255c:	blx	r1
    2560:	b	4bc0 <print_expression+0x3a64>
    2564:	ldr	r0, [fp, #-16]
    2568:	ldr	r1, [fp, #-24]	; 0xffffffe8
    256c:	cmp	r1, #0
    2570:	movw	r1, #0
    2574:	movne	r1, #1
    2578:	tst	r1, #1
    257c:	movw	r1, #0
    2580:	movt	r1, #0
    2584:	movw	r2, #0
    2588:	movt	r2, #0
    258c:	movne	r1, r2
    2590:	str	r0, [fp, #-476]	; 0xfffffe24
    2594:	mov	r0, r1
    2598:	ldr	r1, [fp, #-476]	; 0xfffffe24
    259c:	blx	r1
    25a0:	ldr	r1, [fp, #-12]
    25a4:	ldr	r1, [r1, #16]
    25a8:	ldr	r2, [fp, #-16]
    25ac:	ldr	r3, [fp, #-20]	; 0xffffffec
    25b0:	ldr	ip, [fp, #-24]	; 0xffffffe8
    25b4:	str	r0, [fp, #-480]	; 0xfffffe20
    25b8:	mov	r0, r1
    25bc:	mov	r1, r2
    25c0:	mov	r2, r3
    25c4:	mov	r3, ip
    25c8:	movw	ip, #15
    25cc:	str	ip, [sp]
    25d0:	bl	115c <print_expression>
    25d4:	ldr	r1, [fp, #-16]
    25d8:	movw	r2, #0
    25dc:	movt	r2, #0
    25e0:	str	r0, [fp, #-484]	; 0xfffffe1c
    25e4:	mov	r0, r2
    25e8:	blx	r1
    25ec:	b	4bc0 <print_expression+0x3a64>
    25f0:	ldr	r0, [fp, #-16]
    25f4:	ldr	r1, [fp, #-24]	; 0xffffffe8
    25f8:	cmp	r1, #0
    25fc:	movw	r1, #0
    2600:	movne	r1, #1
    2604:	tst	r1, #1
    2608:	movw	r1, #0
    260c:	movt	r1, #0
    2610:	movw	r2, #0
    2614:	movt	r2, #0
    2618:	movne	r1, r2
    261c:	ldr	r2, [fp, #-12]
    2620:	ldr	r2, [r2, #12]
    2624:	str	r0, [fp, #-488]	; 0xfffffe18
    2628:	mov	r0, r1
    262c:	mov	r1, r2
    2630:	ldr	r2, [fp, #-488]	; 0xfffffe18
    2634:	blx	r2
    2638:	ldr	r1, [fp, #-12]
    263c:	ldr	r1, [r1, #16]
    2640:	ldr	r2, [fp, #-16]
    2644:	ldr	r3, [fp, #-20]	; 0xffffffec
    2648:	ldr	ip, [fp, #-24]	; 0xffffffe8
    264c:	str	r0, [fp, #-492]	; 0xfffffe14
    2650:	mov	r0, r1
    2654:	mov	r1, r2
    2658:	mov	r2, r3
    265c:	mov	r3, ip
    2660:	movw	ip, #15
    2664:	str	ip, [sp]
    2668:	bl	115c <print_expression>
    266c:	ldr	r1, [fp, #-16]
    2670:	ldr	r2, [fp, #-24]	; 0xffffffe8
    2674:	cmp	r2, #0
    2678:	movw	r2, #0
    267c:	movne	r2, #1
    2680:	tst	r2, #1
    2684:	movw	r2, #0
    2688:	movt	r2, #0
    268c:	movw	r3, #0
    2690:	movt	r3, #0
    2694:	movne	r2, r3
    2698:	str	r0, [fp, #-496]	; 0xfffffe10
    269c:	mov	r0, r2
    26a0:	blx	r1
    26a4:	ldr	r1, [fp, #-12]
    26a8:	ldr	r1, [r1, #20]
    26ac:	ldr	r2, [fp, #-16]
    26b0:	ldr	r3, [fp, #-20]	; 0xffffffec
    26b4:	ldr	ip, [fp, #-24]	; 0xffffffe8
    26b8:	str	r0, [fp, #-500]	; 0xfffffe0c
    26bc:	mov	r0, r1
    26c0:	mov	r1, r2
    26c4:	mov	r2, r3
    26c8:	mov	r3, ip
    26cc:	movw	ip, #15
    26d0:	str	ip, [sp]
    26d4:	bl	115c <print_expression>
    26d8:	ldr	r1, [fp, #-12]
    26dc:	ldr	r1, [r1, #24]
    26e0:	movw	r2, #0
    26e4:	cmp	r1, r2
    26e8:	beq	275c <print_expression+0x1600>
    26ec:	ldr	r0, [fp, #-16]
    26f0:	ldr	r1, [fp, #-24]	; 0xffffffe8
    26f4:	cmp	r1, #0
    26f8:	movw	r1, #0
    26fc:	movne	r1, #1
    2700:	tst	r1, #1
    2704:	movw	r1, #0
    2708:	movt	r1, #0
    270c:	movw	r2, #0
    2710:	movt	r2, #0
    2714:	movne	r1, r2
    2718:	str	r0, [fp, #-504]	; 0xfffffe08
    271c:	mov	r0, r1
    2720:	ldr	r1, [fp, #-504]	; 0xfffffe08
    2724:	blx	r1
    2728:	ldr	r1, [fp, #-12]
    272c:	ldr	r1, [r1, #24]
    2730:	ldr	r2, [fp, #-16]
    2734:	ldr	r3, [fp, #-20]	; 0xffffffec
    2738:	ldr	ip, [fp, #-24]	; 0xffffffe8
    273c:	str	r0, [fp, #-508]	; 0xfffffe04
    2740:	mov	r0, r1
    2744:	mov	r1, r2
    2748:	mov	r2, r3
    274c:	mov	r3, ip
    2750:	movw	ip, #15
    2754:	str	ip, [sp]
    2758:	bl	115c <print_expression>
    275c:	ldr	r0, [fp, #-16]
    2760:	ldr	r1, [fp, #-24]	; 0xffffffe8
    2764:	cmp	r1, #0
    2768:	movw	r1, #0
    276c:	movne	r1, #1
    2770:	tst	r1, #1
    2774:	movw	r1, #0
    2778:	movt	r1, #0
    277c:	movw	r2, #0
    2780:	movt	r2, #0
    2784:	movne	r1, r2
    2788:	str	r0, [fp, #-512]	; 0xfffffe00
    278c:	mov	r0, r1
    2790:	ldr	r1, [fp, #-512]	; 0xfffffe00
    2794:	blx	r1
    2798:	ldr	r1, [fp, #-12]
    279c:	ldr	r1, [r1, #28]
    27a0:	ldr	r2, [fp, #-16]
    27a4:	ldr	r3, [fp, #-20]	; 0xffffffec
    27a8:	ldr	ip, [fp, #-24]	; 0xffffffe8
    27ac:	str	r0, [fp, #-516]	; 0xfffffdfc
    27b0:	mov	r0, r1
    27b4:	mov	r1, r2
    27b8:	mov	r2, r3
    27bc:	mov	r3, ip
    27c0:	movw	ip, #15
    27c4:	str	ip, [sp]
    27c8:	bl	115c <print_expression>
    27cc:	b	4bc0 <print_expression+0x3a64>
    27d0:	ldr	r0, [fp, #-12]
    27d4:	ldr	r0, [r0, #16]
    27d8:	movw	r1, #0
    27dc:	cmp	r0, r1
    27e0:	beq	2804 <print_expression+0x16a8>
    27e4:	ldr	r0, [fp, #-12]
    27e8:	ldr	r0, [r0, #16]
    27ec:	ldr	r1, [fp, #-16]
    27f0:	ldr	r2, [fp, #-20]	; 0xffffffec
    27f4:	ldr	r3, [fp, #-24]	; 0xffffffe8
    27f8:	movw	ip, #15
    27fc:	str	ip, [sp]
    2800:	bl	115c <print_expression>
    2804:	ldr	r0, [fp, #-16]
    2808:	movw	r1, #0
    280c:	movt	r1, #0
    2810:	str	r0, [fp, #-520]	; 0xfffffdf8
    2814:	mov	r0, r1
    2818:	ldr	r1, [fp, #-520]	; 0xfffffdf8
    281c:	blx	r1
    2820:	ldr	r1, [fp, #-12]
    2824:	ldr	r1, [r1, #20]
    2828:	ldr	r2, [fp, #-16]
    282c:	ldr	r3, [fp, #-20]	; 0xffffffec
    2830:	ldr	ip, [fp, #-24]	; 0xffffffe8
    2834:	str	r0, [fp, #-524]	; 0xfffffdf4
    2838:	mov	r0, r1
    283c:	mov	r1, r2
    2840:	mov	r2, r3
    2844:	mov	r3, ip
    2848:	movw	ip, #15
    284c:	str	ip, [sp]
    2850:	bl	115c <print_expression>
    2854:	ldr	r1, [fp, #-16]
    2858:	movw	r2, #0
    285c:	movt	r2, #0
    2860:	str	r0, [fp, #-528]	; 0xfffffdf0
    2864:	mov	r0, r2
    2868:	blx	r1
    286c:	b	4bc0 <print_expression+0x3a64>
    2870:	ldr	r0, [fp, #-12]
    2874:	ldr	r0, [r0, #16]
    2878:	movw	r1, #0
    287c:	cmp	r0, r1
    2880:	beq	28a4 <print_expression+0x1748>
    2884:	ldr	r0, [fp, #-12]
    2888:	ldr	r0, [r0, #16]
    288c:	ldr	r1, [fp, #-16]
    2890:	ldr	r2, [fp, #-20]	; 0xffffffec
    2894:	ldr	r3, [fp, #-24]	; 0xffffffe8
    2898:	movw	ip, #15
    289c:	str	ip, [sp]
    28a0:	bl	115c <print_expression>
    28a4:	ldr	r0, [fp, #-16]
    28a8:	ldr	r1, [fp, #-12]
    28ac:	ldr	r1, [r1, #12]
    28b0:	movw	r2, #0
    28b4:	movt	r2, #0
    28b8:	str	r0, [fp, #-532]	; 0xfffffdec
    28bc:	mov	r0, r2
    28c0:	ldr	r2, [fp, #-532]	; 0xfffffdec
    28c4:	blx	r2
    28c8:	b	4bc0 <print_expression+0x3a64>
    28cc:	ldr	r0, [fp, #-16]
    28d0:	movw	r1, #0
    28d4:	movt	r1, #0
    28d8:	str	r0, [fp, #-536]	; 0xfffffde8
    28dc:	mov	r0, r1
    28e0:	ldr	r1, [fp, #-536]	; 0xfffffde8
    28e4:	blx	r1
    28e8:	b	4bc0 <print_expression+0x3a64>
    28ec:	ldr	r0, [fp, #-12]
    28f0:	ldr	r0, [r0, #16]
    28f4:	ldr	r1, [fp, #-16]
    28f8:	ldr	r2, [fp, #-20]	; 0xffffffec
    28fc:	ldr	r3, [fp, #-24]	; 0xffffffe8
    2900:	movw	ip, #15
    2904:	str	ip, [sp]
    2908:	bl	115c <print_expression>
    290c:	ldr	r1, [fp, #-12]
    2910:	ldr	r1, [r1, #16]
    2914:	ldr	r1, [r1]
    2918:	cmp	r1, #38	; 0x26
    291c:	beq	293c <print_expression+0x17e0>
    2920:	ldr	r0, [fp, #-16]
    2924:	movw	r1, #0
    2928:	movt	r1, #0
    292c:	str	r0, [fp, #-540]	; 0xfffffde4
    2930:	mov	r0, r1
    2934:	ldr	r1, [fp, #-540]	; 0xfffffde4
    2938:	blx	r1
    293c:	ldr	r0, [fp, #-16]
    2940:	ldr	r1, [fp, #-12]
    2944:	ldr	r1, [r1, #12]
    2948:	movw	r2, #0
    294c:	movt	r2, #0
    2950:	str	r0, [fp, #-544]	; 0xfffffde0
    2954:	mov	r0, r2
    2958:	ldr	r2, [fp, #-544]	; 0xfffffde0
    295c:	blx	r2
    2960:	b	4bc0 <print_expression+0x3a64>
    2964:	ldr	r0, [fp, #-16]
    2968:	movw	r1, #0
    296c:	movt	r1, #0
    2970:	str	r0, [fp, #-548]	; 0xfffffddc
    2974:	mov	r0, r1
    2978:	ldr	r1, [fp, #-548]	; 0xfffffddc
    297c:	blx	r1
    2980:	b	4bc0 <print_expression+0x3a64>
    2984:	ldr	r0, [fp, #-12]
    2988:	ldr	r0, [r0, #16]
    298c:	movw	r1, #0
    2990:	cmp	r0, r1
    2994:	beq	29d0 <print_expression+0x1874>
    2998:	ldr	r0, [fp, #-12]
    299c:	ldr	r0, [r0, #16]
    29a0:	ldr	r1, [fp, #-16]
    29a4:	ldr	r2, [fp, #-20]	; 0xffffffec
    29a8:	ldr	r3, [fp, #-24]	; 0xffffffe8
    29ac:	movw	ip, #15
    29b0:	str	ip, [sp]
    29b4:	bl	115c <print_expression>
    29b8:	ldr	r1, [fp, #-16]
    29bc:	movw	r2, #0
    29c0:	movt	r2, #0
    29c4:	str	r0, [fp, #-552]	; 0xfffffdd8
    29c8:	mov	r0, r2
    29cc:	blx	r1
    29d0:	ldr	r0, [fp, #-16]
    29d4:	movw	r1, #0
    29d8:	movt	r1, #0
    29dc:	str	r0, [fp, #-556]	; 0xfffffdd4
    29e0:	mov	r0, r1
    29e4:	ldr	r1, [fp, #-556]	; 0xfffffdd4
    29e8:	blx	r1
    29ec:	b	4bc0 <print_expression+0x3a64>
    29f0:	ldr	r0, [fp, #-16]
    29f4:	movw	r1, #0
    29f8:	movt	r1, #0
    29fc:	str	r0, [fp, #-560]	; 0xfffffdd0
    2a00:	mov	r0, r1
    2a04:	ldr	r1, [fp, #-560]	; 0xfffffdd0
    2a08:	blx	r1
    2a0c:	b	4bc0 <print_expression+0x3a64>
    2a10:	ldr	r0, [fp, #-16]
    2a14:	ldr	r1, [fp, #-24]	; 0xffffffe8
    2a18:	cmp	r1, #0
    2a1c:	movw	r1, #0
    2a20:	movne	r1, #1
    2a24:	tst	r1, #1
    2a28:	movw	r1, #0
    2a2c:	movt	r1, #0
    2a30:	movw	r2, #0
    2a34:	movt	r2, #0
    2a38:	movne	r1, r2
    2a3c:	str	r0, [fp, #-564]	; 0xfffffdcc
    2a40:	mov	r0, r1
    2a44:	ldr	r1, [fp, #-564]	; 0xfffffdcc
    2a48:	blx	r1
    2a4c:	ldr	r1, [fp, #-12]
    2a50:	ldr	r1, [r1, #16]
    2a54:	ldr	r2, [fp, #-16]
    2a58:	ldr	r3, [fp, #-20]	; 0xffffffec
    2a5c:	ldr	ip, [fp, #-24]	; 0xffffffe8
    2a60:	str	r0, [fp, #-568]	; 0xfffffdc8
    2a64:	mov	r0, r1
    2a68:	mov	r1, r2
    2a6c:	mov	r2, r3
    2a70:	mov	r3, ip
    2a74:	movw	ip, #15
    2a78:	str	ip, [sp]
    2a7c:	bl	115c <print_expression>
    2a80:	ldr	r1, [fp, #-16]
    2a84:	movw	r2, #0
    2a88:	movt	r2, #0
    2a8c:	str	r0, [fp, #-572]	; 0xfffffdc4
    2a90:	mov	r0, r2
    2a94:	blx	r1
    2a98:	b	4bc0 <print_expression+0x3a64>
    2a9c:	ldr	r0, [fp, #8]
    2aa0:	cmp	r0, #5
    2aa4:	bge	2ac4 <print_expression+0x1968>
    2aa8:	ldr	r0, [fp, #-16]
    2aac:	movw	r1, #0
    2ab0:	movt	r1, #0
    2ab4:	str	r0, [fp, #-576]	; 0xfffffdc0
    2ab8:	mov	r0, r1
    2abc:	ldr	r1, [fp, #-576]	; 0xfffffdc0
    2ac0:	blx	r1
    2ac4:	ldr	r0, [fp, #-12]
    2ac8:	ldr	r0, [r0, #16]
    2acc:	ldr	r1, [fp, #-16]
    2ad0:	ldr	r2, [fp, #-20]	; 0xffffffec
    2ad4:	ldr	r3, [fp, #-24]	; 0xffffffe8
    2ad8:	movw	ip, #5
    2adc:	str	ip, [sp]
    2ae0:	bl	115c <print_expression>
    2ae4:	ldr	r1, [fp, #-16]
    2ae8:	ldr	r2, [fp, #-24]	; 0xffffffe8
    2aec:	cmp	r2, #0
    2af0:	movw	r2, #1
    2af4:	str	r1, [fp, #-580]	; 0xfffffdbc
    2af8:	str	r2, [fp, #-584]	; 0xfffffdb8
    2afc:	bne	2b14 <print_expression+0x19b8>
    2b00:	ldr	r0, [fp, #-20]	; 0xffffffec
    2b04:	cmp	r0, #0
    2b08:	movw	r0, #0
    2b0c:	movne	r0, #1
    2b10:	str	r0, [fp, #-584]	; 0xfffffdb8
    2b14:	ldr	r0, [fp, #-584]	; 0xfffffdb8
    2b18:	tst	r0, #1
    2b1c:	movw	r0, #0
    2b20:	movt	r0, #0
    2b24:	movw	r1, #0
    2b28:	movt	r1, #0
    2b2c:	movne	r0, r1
    2b30:	ldr	r1, [fp, #-580]	; 0xfffffdbc
    2b34:	blx	r1
    2b38:	ldr	r1, [fp, #-12]
    2b3c:	ldr	r1, [r1, #20]
    2b40:	ldr	r2, [fp, #-16]
    2b44:	ldr	r3, [fp, #-20]	; 0xffffffec
    2b48:	ldr	ip, [fp, #-24]	; 0xffffffe8
    2b4c:	str	r0, [fp, #-588]	; 0xfffffdb4
    2b50:	mov	r0, r1
    2b54:	mov	r1, r2
    2b58:	mov	r2, r3
    2b5c:	mov	r3, ip
    2b60:	movw	ip, #5
    2b64:	str	ip, [sp]
    2b68:	bl	115c <print_expression>
    2b6c:	ldr	r1, [fp, #8]
    2b70:	cmp	r1, #5
    2b74:	bge	2b94 <print_expression+0x1a38>
    2b78:	ldr	r0, [fp, #-16]
    2b7c:	movw	r1, #0
    2b80:	movt	r1, #0
    2b84:	str	r0, [fp, #-592]	; 0xfffffdb0
    2b88:	mov	r0, r1
    2b8c:	ldr	r1, [fp, #-592]	; 0xfffffdb0
    2b90:	blx	r1
    2b94:	b	4bc0 <print_expression+0x3a64>
    2b98:	ldr	r0, [fp, #8]
    2b9c:	cmp	r0, #5
    2ba0:	bge	2bc0 <print_expression+0x1a64>
    2ba4:	ldr	r0, [fp, #-16]
    2ba8:	movw	r1, #0
    2bac:	movt	r1, #0
    2bb0:	str	r0, [fp, #-596]	; 0xfffffdac
    2bb4:	mov	r0, r1
    2bb8:	ldr	r1, [fp, #-596]	; 0xfffffdac
    2bbc:	blx	r1
    2bc0:	ldr	r0, [fp, #-12]
    2bc4:	ldr	r0, [r0, #16]
    2bc8:	ldr	r1, [fp, #-16]
    2bcc:	ldr	r2, [fp, #-20]	; 0xffffffec
    2bd0:	ldr	r3, [fp, #-24]	; 0xffffffe8
    2bd4:	movw	ip, #5
    2bd8:	str	ip, [sp]
    2bdc:	bl	115c <print_expression>
    2be0:	ldr	r1, [fp, #-16]
    2be4:	ldr	r2, [fp, #-24]	; 0xffffffe8
    2be8:	cmp	r2, #0
    2bec:	movw	r2, #1
    2bf0:	str	r1, [fp, #-600]	; 0xfffffda8
    2bf4:	str	r2, [fp, #-604]	; 0xfffffda4
    2bf8:	bne	2c10 <print_expression+0x1ab4>
    2bfc:	ldr	r0, [fp, #-20]	; 0xffffffec
    2c00:	cmp	r0, #0
    2c04:	movw	r0, #0
    2c08:	movne	r0, #1
    2c0c:	str	r0, [fp, #-604]	; 0xfffffda4
    2c10:	ldr	r0, [fp, #-604]	; 0xfffffda4
    2c14:	tst	r0, #1
    2c18:	movw	r0, #0
    2c1c:	movt	r0, #0
    2c20:	movw	r1, #0
    2c24:	movt	r1, #0
    2c28:	movne	r0, r1
    2c2c:	ldr	r1, [fp, #-600]	; 0xfffffda8
    2c30:	blx	r1
    2c34:	ldr	r1, [fp, #-12]
    2c38:	ldr	r1, [r1, #20]
    2c3c:	ldr	r2, [fp, #-16]
    2c40:	ldr	r3, [fp, #-20]	; 0xffffffec
    2c44:	ldr	ip, [fp, #-24]	; 0xffffffe8
    2c48:	str	r0, [fp, #-608]	; 0xfffffda0
    2c4c:	mov	r0, r1
    2c50:	mov	r1, r2
    2c54:	mov	r2, r3
    2c58:	mov	r3, ip
    2c5c:	movw	ip, #5
    2c60:	str	ip, [sp]
    2c64:	bl	115c <print_expression>
    2c68:	ldr	r1, [fp, #8]
    2c6c:	cmp	r1, #5
    2c70:	bge	2c90 <print_expression+0x1b34>
    2c74:	ldr	r0, [fp, #-16]
    2c78:	movw	r1, #0
    2c7c:	movt	r1, #0
    2c80:	str	r0, [fp, #-612]	; 0xfffffd9c
    2c84:	mov	r0, r1
    2c88:	ldr	r1, [fp, #-612]	; 0xfffffd9c
    2c8c:	blx	r1
    2c90:	b	4bc0 <print_expression+0x3a64>
    2c94:	ldr	r0, [fp, #-16]
    2c98:	movw	r1, #0
    2c9c:	movt	r1, #0
    2ca0:	str	r0, [fp, #-616]	; 0xfffffd98
    2ca4:	mov	r0, r1
    2ca8:	ldr	r1, [fp, #-616]	; 0xfffffd98
    2cac:	blx	r1
    2cb0:	ldr	r1, [fp, #-12]
    2cb4:	ldr	r1, [r1, #16]
    2cb8:	ldr	r2, [fp, #-16]
    2cbc:	ldr	r3, [fp, #-20]	; 0xffffffec
    2cc0:	ldr	ip, [fp, #-24]	; 0xffffffe8
    2cc4:	str	r0, [fp, #-620]	; 0xfffffd94
    2cc8:	mov	r0, r1
    2ccc:	mov	r1, r2
    2cd0:	mov	r2, r3
    2cd4:	mov	r3, ip
    2cd8:	movw	ip, #15
    2cdc:	str	ip, [sp]
    2ce0:	bl	115c <print_expression>
    2ce4:	ldr	r1, [fp, #-16]
    2ce8:	movw	r2, #0
    2cec:	movt	r2, #0
    2cf0:	str	r0, [fp, #-624]	; 0xfffffd90
    2cf4:	mov	r0, r2
    2cf8:	blx	r1
    2cfc:	ldr	r1, [fp, #-12]
    2d00:	ldr	r1, [r1, #20]
    2d04:	ldr	r2, [fp, #-16]
    2d08:	ldr	r3, [fp, #-20]	; 0xffffffec
    2d0c:	ldr	ip, [fp, #-24]	; 0xffffffe8
    2d10:	str	r0, [fp, #-628]	; 0xfffffd8c
    2d14:	mov	r0, r1
    2d18:	mov	r1, r2
    2d1c:	mov	r2, r3
    2d20:	mov	r3, ip
    2d24:	movw	ip, #15
    2d28:	str	ip, [sp]
    2d2c:	bl	115c <print_expression>
    2d30:	ldr	r1, [fp, #-16]
    2d34:	movw	r2, #0
    2d38:	movt	r2, #0
    2d3c:	str	r0, [fp, #-632]	; 0xfffffd88
    2d40:	mov	r0, r2
    2d44:	blx	r1
    2d48:	ldr	r1, [fp, #-12]
    2d4c:	ldr	r1, [r1, #24]
    2d50:	ldr	r2, [fp, #-16]
    2d54:	ldr	r3, [fp, #-20]	; 0xffffffec
    2d58:	ldr	ip, [fp, #-24]	; 0xffffffe8
    2d5c:	str	r0, [fp, #-636]	; 0xfffffd84
    2d60:	mov	r0, r1
    2d64:	mov	r1, r2
    2d68:	mov	r2, r3
    2d6c:	mov	r3, ip
    2d70:	movw	ip, #15
    2d74:	str	ip, [sp]
    2d78:	bl	115c <print_expression>
    2d7c:	ldr	r1, [fp, #-16]
    2d80:	movw	r2, #0
    2d84:	movt	r2, #0
    2d88:	str	r0, [fp, #-640]	; 0xfffffd80
    2d8c:	mov	r0, r2
    2d90:	blx	r1
    2d94:	b	4bc0 <print_expression+0x3a64>
    2d98:	ldr	r0, [fp, #-16]
    2d9c:	ldr	r1, [fp, #-24]	; 0xffffffe8
    2da0:	cmp	r1, #0
    2da4:	movw	r1, #0
    2da8:	movne	r1, #1
    2dac:	tst	r1, #1
    2db0:	movw	r1, #0
    2db4:	movt	r1, #0
    2db8:	movw	r2, #0
    2dbc:	movt	r2, #0
    2dc0:	movne	r1, r2
    2dc4:	str	r0, [fp, #-644]	; 0xfffffd7c
    2dc8:	mov	r0, r1
    2dcc:	ldr	r1, [fp, #-644]	; 0xfffffd7c
    2dd0:	blx	r1
    2dd4:	ldr	r1, [fp, #-12]
    2dd8:	ldr	r1, [r1, #16]
    2ddc:	ldr	r2, [fp, #-16]
    2de0:	ldr	r3, [fp, #-20]	; 0xffffffec
    2de4:	ldr	ip, [fp, #-24]	; 0xffffffe8
    2de8:	str	r0, [sp, #648]	; 0x288
    2dec:	mov	r0, r1
    2df0:	mov	r1, r2
    2df4:	mov	r2, r3
    2df8:	mov	r3, ip
    2dfc:	movw	ip, #15
    2e00:	str	ip, [sp]
    2e04:	bl	115c <print_expression>
    2e08:	ldr	r1, [fp, #-16]
    2e0c:	movw	r2, #0
    2e10:	movt	r2, #0
    2e14:	str	r0, [sp, #644]	; 0x284
    2e18:	mov	r0, r2
    2e1c:	blx	r1
    2e20:	b	4bc0 <print_expression+0x3a64>
    2e24:	ldr	r0, [fp, #-16]
    2e28:	ldr	r1, [fp, #-24]	; 0xffffffe8
    2e2c:	cmp	r1, #0
    2e30:	movw	r1, #0
    2e34:	movne	r1, #1
    2e38:	tst	r1, #1
    2e3c:	movw	r1, #0
    2e40:	movt	r1, #0
    2e44:	movw	r2, #0
    2e48:	movt	r2, #0
    2e4c:	movne	r1, r2
    2e50:	ldr	r2, [fp, #-12]
    2e54:	ldr	r2, [r2, #12]
    2e58:	str	r0, [sp, #640]	; 0x280
    2e5c:	mov	r0, r1
    2e60:	mov	r1, r2
    2e64:	ldr	r2, [sp, #640]	; 0x280
    2e68:	blx	r2
    2e6c:	b	4bc0 <print_expression+0x3a64>
    2e70:	ldr	r0, [fp, #-16]
    2e74:	ldr	r1, [fp, #-24]	; 0xffffffe8
    2e78:	cmp	r1, #0
    2e7c:	movw	r1, #0
    2e80:	movne	r1, #1
    2e84:	tst	r1, #1
    2e88:	movw	r1, #0
    2e8c:	movt	r1, #0
    2e90:	movw	r2, #0
    2e94:	movt	r2, #0
    2e98:	movne	r1, r2
    2e9c:	str	r0, [sp, #636]	; 0x27c
    2ea0:	mov	r0, r1
    2ea4:	ldr	r1, [sp, #636]	; 0x27c
    2ea8:	blx	r1
    2eac:	ldr	r1, [fp, #-12]
    2eb0:	ldr	r1, [r1, #16]
    2eb4:	ldr	r2, [fp, #-16]
    2eb8:	ldr	r3, [fp, #-20]	; 0xffffffec
    2ebc:	ldr	ip, [fp, #-24]	; 0xffffffe8
    2ec0:	str	r0, [sp, #632]	; 0x278
    2ec4:	mov	r0, r1
    2ec8:	mov	r1, r2
    2ecc:	mov	r2, r3
    2ed0:	mov	r3, ip
    2ed4:	movw	ip, #15
    2ed8:	str	ip, [sp]
    2edc:	bl	115c <print_expression>
    2ee0:	ldr	r1, [fp, #-16]
    2ee4:	movw	r2, #0
    2ee8:	movt	r2, #0
    2eec:	str	r0, [sp, #628]	; 0x274
    2ef0:	mov	r0, r2
    2ef4:	blx	r1
    2ef8:	b	4bc0 <print_expression+0x3a64>
    2efc:	ldr	r0, [fp, #-16]
    2f00:	ldr	r1, [fp, #-24]	; 0xffffffe8
    2f04:	cmp	r1, #0
    2f08:	movw	r1, #0
    2f0c:	movne	r1, #1
    2f10:	tst	r1, #1
    2f14:	movw	r1, #0
    2f18:	movt	r1, #0
    2f1c:	movw	r2, #0
    2f20:	movt	r2, #0
    2f24:	movne	r1, r2
    2f28:	str	r0, [sp, #624]	; 0x270
    2f2c:	mov	r0, r1
    2f30:	ldr	r1, [sp, #624]	; 0x270
    2f34:	blx	r1
    2f38:	ldr	r1, [fp, #-12]
    2f3c:	ldr	r1, [r1, #16]
    2f40:	ldr	r2, [fp, #-16]
    2f44:	ldr	r3, [fp, #-20]	; 0xffffffec
    2f48:	ldr	ip, [fp, #-24]	; 0xffffffe8
    2f4c:	str	r0, [sp, #620]	; 0x26c
    2f50:	mov	r0, r1
    2f54:	mov	r1, r2
    2f58:	mov	r2, r3
    2f5c:	mov	r3, ip
    2f60:	movw	ip, #15
    2f64:	str	ip, [sp]
    2f68:	bl	115c <print_expression>
    2f6c:	ldr	r1, [fp, #-16]
    2f70:	movw	r2, #0
    2f74:	movt	r2, #0
    2f78:	str	r0, [sp, #616]	; 0x268
    2f7c:	mov	r0, r2
    2f80:	blx	r1
    2f84:	b	4bc0 <print_expression+0x3a64>
    2f88:	ldr	r0, [fp, #-16]
    2f8c:	ldr	r1, [fp, #-24]	; 0xffffffe8
    2f90:	cmp	r1, #0
    2f94:	movw	r1, #0
    2f98:	movne	r1, #1
    2f9c:	tst	r1, #1
    2fa0:	movw	r1, #0
    2fa4:	movt	r1, #0
    2fa8:	movw	r2, #0
    2fac:	movt	r2, #0
    2fb0:	movne	r1, r2
    2fb4:	str	r0, [sp, #612]	; 0x264
    2fb8:	mov	r0, r1
    2fbc:	ldr	r1, [sp, #612]	; 0x264
    2fc0:	blx	r1
    2fc4:	ldr	r1, [fp, #-12]
    2fc8:	ldr	r1, [r1, #16]
    2fcc:	ldr	r2, [fp, #-16]
    2fd0:	ldr	r3, [fp, #-20]	; 0xffffffec
    2fd4:	ldr	ip, [fp, #-24]	; 0xffffffe8
    2fd8:	str	r0, [sp, #608]	; 0x260
    2fdc:	mov	r0, r1
    2fe0:	mov	r1, r2
    2fe4:	mov	r2, r3
    2fe8:	mov	r3, ip
    2fec:	movw	ip, #15
    2ff0:	str	ip, [sp]
    2ff4:	bl	115c <print_expression>
    2ff8:	ldr	r1, [fp, #-16]
    2ffc:	movw	r2, #0
    3000:	movt	r2, #0
    3004:	str	r0, [sp, #604]	; 0x25c
    3008:	mov	r0, r2
    300c:	blx	r1
    3010:	b	4bc0 <print_expression+0x3a64>
    3014:	ldr	r0, [fp, #-16]
    3018:	ldr	r1, [fp, #-24]	; 0xffffffe8
    301c:	cmp	r1, #0
    3020:	movw	r1, #0
    3024:	movne	r1, #1
    3028:	tst	r1, #1
    302c:	movw	r1, #0
    3030:	movt	r1, #0
    3034:	movw	r2, #0
    3038:	movt	r2, #0
    303c:	movne	r1, r2
    3040:	str	r0, [sp, #600]	; 0x258
    3044:	mov	r0, r1
    3048:	ldr	r1, [sp, #600]	; 0x258
    304c:	blx	r1
    3050:	ldr	r1, [fp, #-12]
    3054:	ldr	r1, [r1, #16]
    3058:	ldr	r2, [fp, #-16]
    305c:	ldr	r3, [fp, #-20]	; 0xffffffec
    3060:	ldr	ip, [fp, #-24]	; 0xffffffe8
    3064:	str	r0, [sp, #596]	; 0x254
    3068:	mov	r0, r1
    306c:	mov	r1, r2
    3070:	mov	r2, r3
    3074:	mov	r3, ip
    3078:	movw	ip, #15
    307c:	str	ip, [sp]
    3080:	bl	115c <print_expression>
    3084:	ldr	r1, [fp, #-16]
    3088:	movw	r2, #0
    308c:	movt	r2, #0
    3090:	str	r0, [sp, #592]	; 0x250
    3094:	mov	r0, r2
    3098:	blx	r1
    309c:	b	4bc0 <print_expression+0x3a64>
    30a0:	ldr	r0, [fp, #-16]
    30a4:	ldr	r1, [fp, #-24]	; 0xffffffe8
    30a8:	cmp	r1, #0
    30ac:	movw	r1, #0
    30b0:	movne	r1, #1
    30b4:	tst	r1, #1
    30b8:	movw	r1, #0
    30bc:	movt	r1, #0
    30c0:	movw	r2, #0
    30c4:	movt	r2, #0
    30c8:	movne	r1, r2
    30cc:	str	r0, [sp, #588]	; 0x24c
    30d0:	mov	r0, r1
    30d4:	ldr	r1, [sp, #588]	; 0x24c
    30d8:	blx	r1
    30dc:	ldr	r1, [fp, #-12]
    30e0:	ldr	r1, [r1, #16]
    30e4:	ldr	r2, [fp, #-16]
    30e8:	ldr	r3, [fp, #-20]	; 0xffffffec
    30ec:	ldr	ip, [fp, #-24]	; 0xffffffe8
    30f0:	str	r0, [sp, #584]	; 0x248
    30f4:	mov	r0, r1
    30f8:	mov	r1, r2
    30fc:	mov	r2, r3
    3100:	mov	r3, ip
    3104:	movw	ip, #15
    3108:	str	ip, [sp]
    310c:	bl	115c <print_expression>
    3110:	ldr	r1, [fp, #-16]
    3114:	movw	r2, #0
    3118:	movt	r2, #0
    311c:	str	r0, [sp, #580]	; 0x244
    3120:	mov	r0, r2
    3124:	blx	r1
    3128:	b	4bc0 <print_expression+0x3a64>
    312c:	ldr	r0, [fp, #-16]
    3130:	ldr	r1, [fp, #-24]	; 0xffffffe8
    3134:	cmp	r1, #0
    3138:	movw	r1, #0
    313c:	movne	r1, #1
    3140:	tst	r1, #1
    3144:	movw	r1, #0
    3148:	movt	r1, #0
    314c:	movw	r2, #0
    3150:	movt	r2, #0
    3154:	movne	r1, r2
    3158:	str	r0, [sp, #576]	; 0x240
    315c:	mov	r0, r1
    3160:	ldr	r1, [sp, #576]	; 0x240
    3164:	blx	r1
    3168:	ldr	r1, [fp, #-12]
    316c:	ldr	r1, [r1, #16]
    3170:	ldr	r2, [fp, #-16]
    3174:	ldr	r3, [fp, #-20]	; 0xffffffec
    3178:	ldr	ip, [fp, #-24]	; 0xffffffe8
    317c:	str	r0, [sp, #572]	; 0x23c
    3180:	mov	r0, r1
    3184:	mov	r1, r2
    3188:	mov	r2, r3
    318c:	mov	r3, ip
    3190:	movw	ip, #15
    3194:	str	ip, [sp]
    3198:	bl	115c <print_expression>
    319c:	ldr	r1, [fp, #-16]
    31a0:	movw	r2, #0
    31a4:	movt	r2, #0
    31a8:	str	r0, [sp, #568]	; 0x238
    31ac:	mov	r0, r2
    31b0:	blx	r1
    31b4:	b	4bc0 <print_expression+0x3a64>
    31b8:	ldr	r0, [fp, #8]
    31bc:	cmp	r0, #5
    31c0:	bge	31e0 <print_expression+0x2084>
    31c4:	ldr	r0, [fp, #-16]
    31c8:	movw	r1, #0
    31cc:	movt	r1, #0
    31d0:	str	r0, [sp, #564]	; 0x234
    31d4:	mov	r0, r1
    31d8:	ldr	r1, [sp, #564]	; 0x234
    31dc:	blx	r1
    31e0:	ldr	r0, [fp, #-12]
    31e4:	ldr	r0, [r0, #16]
    31e8:	ldr	r1, [fp, #-16]
    31ec:	ldr	r2, [fp, #-20]	; 0xffffffec
    31f0:	ldr	r3, [fp, #-24]	; 0xffffffe8
    31f4:	movw	ip, #5
    31f8:	str	ip, [sp]
    31fc:	bl	115c <print_expression>
    3200:	ldr	r1, [fp, #-16]
    3204:	ldr	r2, [fp, #-24]	; 0xffffffe8
    3208:	cmp	r2, #0
    320c:	movw	r2, #1
    3210:	str	r1, [sp, #560]	; 0x230
    3214:	str	r2, [sp, #556]	; 0x22c
    3218:	bne	3230 <print_expression+0x20d4>
    321c:	ldr	r0, [fp, #-20]	; 0xffffffec
    3220:	cmp	r0, #0
    3224:	movw	r0, #0
    3228:	movne	r0, #1
    322c:	str	r0, [sp, #556]	; 0x22c
    3230:	ldr	r0, [sp, #556]	; 0x22c
    3234:	tst	r0, #1
    3238:	movw	r0, #0
    323c:	movt	r0, #0
    3240:	movw	r1, #0
    3244:	movt	r1, #0
    3248:	movne	r0, r1
    324c:	ldr	r1, [sp, #560]	; 0x230
    3250:	blx	r1
    3254:	ldr	r1, [fp, #-12]
    3258:	ldr	r1, [r1, #20]
    325c:	ldr	r2, [fp, #-16]
    3260:	ldr	r3, [fp, #-20]	; 0xffffffec
    3264:	ldr	ip, [fp, #-24]	; 0xffffffe8
    3268:	str	r0, [sp, #552]	; 0x228
    326c:	mov	r0, r1
    3270:	mov	r1, r2
    3274:	mov	r2, r3
    3278:	mov	r3, ip
    327c:	movw	ip, #5
    3280:	str	ip, [sp]
    3284:	bl	115c <print_expression>
    3288:	ldr	r1, [fp, #8]
    328c:	cmp	r1, #5
    3290:	bge	32b0 <print_expression+0x2154>
    3294:	ldr	r0, [fp, #-16]
    3298:	movw	r1, #0
    329c:	movt	r1, #0
    32a0:	str	r0, [sp, #548]	; 0x224
    32a4:	mov	r0, r1
    32a8:	ldr	r1, [sp, #548]	; 0x224
    32ac:	blx	r1
    32b0:	b	4bc0 <print_expression+0x3a64>
    32b4:	ldr	r0, [fp, #8]
    32b8:	cmp	r0, #5
    32bc:	bge	32dc <print_expression+0x2180>
    32c0:	ldr	r0, [fp, #-16]
    32c4:	movw	r1, #0
    32c8:	movt	r1, #0
    32cc:	str	r0, [sp, #544]	; 0x220
    32d0:	mov	r0, r1
    32d4:	ldr	r1, [sp, #544]	; 0x220
    32d8:	blx	r1
    32dc:	ldr	r0, [fp, #-12]
    32e0:	ldr	r0, [r0, #16]
    32e4:	ldr	r1, [fp, #-16]
    32e8:	ldr	r2, [fp, #-20]	; 0xffffffec
    32ec:	ldr	r3, [fp, #-24]	; 0xffffffe8
    32f0:	movw	ip, #5
    32f4:	str	ip, [sp]
    32f8:	bl	115c <print_expression>
    32fc:	ldr	r1, [fp, #-16]
    3300:	ldr	r2, [fp, #-24]	; 0xffffffe8
    3304:	cmp	r2, #0
    3308:	movw	r2, #1
    330c:	str	r1, [sp, #540]	; 0x21c
    3310:	str	r2, [sp, #536]	; 0x218
    3314:	bne	332c <print_expression+0x21d0>
    3318:	ldr	r0, [fp, #-20]	; 0xffffffec
    331c:	cmp	r0, #0
    3320:	movw	r0, #0
    3324:	movne	r0, #1
    3328:	str	r0, [sp, #536]	; 0x218
    332c:	ldr	r0, [sp, #536]	; 0x218
    3330:	tst	r0, #1
    3334:	movw	r0, #0
    3338:	movt	r0, #0
    333c:	movw	r1, #0
    3340:	movt	r1, #0
    3344:	movne	r0, r1
    3348:	ldr	r1, [sp, #540]	; 0x21c
    334c:	blx	r1
    3350:	ldr	r1, [fp, #-12]
    3354:	ldr	r1, [r1, #20]
    3358:	ldr	r2, [fp, #-16]
    335c:	ldr	r3, [fp, #-20]	; 0xffffffec
    3360:	ldr	ip, [fp, #-24]	; 0xffffffe8
    3364:	str	r0, [sp, #532]	; 0x214
    3368:	mov	r0, r1
    336c:	mov	r1, r2
    3370:	mov	r2, r3
    3374:	mov	r3, ip
    3378:	movw	ip, #5
    337c:	str	ip, [sp]
    3380:	bl	115c <print_expression>
    3384:	ldr	r1, [fp, #8]
    3388:	cmp	r1, #5
    338c:	bge	33ac <print_expression+0x2250>
    3390:	ldr	r0, [fp, #-16]
    3394:	movw	r1, #0
    3398:	movt	r1, #0
    339c:	str	r0, [sp, #528]	; 0x210
    33a0:	mov	r0, r1
    33a4:	ldr	r1, [sp, #528]	; 0x210
    33a8:	blx	r1
    33ac:	b	4bc0 <print_expression+0x3a64>
    33b0:	ldr	r0, [fp, #8]
    33b4:	cmp	r0, #9
    33b8:	bge	33d8 <print_expression+0x227c>
    33bc:	ldr	r0, [fp, #-16]
    33c0:	movw	r1, #0
    33c4:	movt	r1, #0
    33c8:	str	r0, [sp, #524]	; 0x20c
    33cc:	mov	r0, r1
    33d0:	ldr	r1, [sp, #524]	; 0x20c
    33d4:	blx	r1
    33d8:	ldr	r0, [fp, #-12]
    33dc:	ldr	r0, [r0, #16]
    33e0:	ldr	r1, [fp, #-16]
    33e4:	ldr	r2, [fp, #-20]	; 0xffffffec
    33e8:	ldr	r3, [fp, #-24]	; 0xffffffe8
    33ec:	movw	ip, #9
    33f0:	str	ip, [sp]
    33f4:	bl	115c <print_expression>
    33f8:	ldr	r1, [fp, #-16]
    33fc:	ldr	r2, [fp, #-24]	; 0xffffffe8
    3400:	cmp	r2, #0
    3404:	movw	r2, #0
    3408:	movne	r2, #1
    340c:	tst	r2, #1
    3410:	movw	r2, #0
    3414:	movt	r2, #0
    3418:	movw	r3, #0
    341c:	movt	r3, #0
    3420:	movne	r2, r3
    3424:	str	r0, [sp, #520]	; 0x208
    3428:	mov	r0, r2
    342c:	blx	r1
    3430:	ldr	r1, [fp, #-12]
    3434:	ldr	r1, [r1, #20]
    3438:	ldr	r2, [fp, #-16]
    343c:	ldr	r3, [fp, #-20]	; 0xffffffec
    3440:	ldr	ip, [fp, #-24]	; 0xffffffe8
    3444:	str	r0, [sp, #516]	; 0x204
    3448:	mov	r0, r1
    344c:	mov	r1, r2
    3450:	mov	r2, r3
    3454:	mov	r3, ip
    3458:	movw	ip, #9
    345c:	str	ip, [sp]
    3460:	bl	115c <print_expression>
    3464:	ldr	r1, [fp, #8]
    3468:	cmp	r1, #9
    346c:	bge	348c <print_expression+0x2330>
    3470:	ldr	r0, [fp, #-16]
    3474:	movw	r1, #0
    3478:	movt	r1, #0
    347c:	str	r0, [sp, #512]	; 0x200
    3480:	mov	r0, r1
    3484:	ldr	r1, [sp, #512]	; 0x200
    3488:	blx	r1
    348c:	b	4bc0 <print_expression+0x3a64>
    3490:	ldr	r0, [fp, #8]
    3494:	cmp	r0, #10
    3498:	bge	34b8 <print_expression+0x235c>
    349c:	ldr	r0, [fp, #-16]
    34a0:	movw	r1, #0
    34a4:	movt	r1, #0
    34a8:	str	r0, [sp, #508]	; 0x1fc
    34ac:	mov	r0, r1
    34b0:	ldr	r1, [sp, #508]	; 0x1fc
    34b4:	blx	r1
    34b8:	ldr	r0, [fp, #-12]
    34bc:	ldr	r0, [r0, #16]
    34c0:	ldr	r1, [fp, #-16]
    34c4:	ldr	r2, [fp, #-20]	; 0xffffffec
    34c8:	ldr	r3, [fp, #-24]	; 0xffffffe8
    34cc:	movw	ip, #10
    34d0:	str	ip, [sp]
    34d4:	bl	115c <print_expression>
    34d8:	ldr	r1, [fp, #-16]
    34dc:	ldr	r2, [fp, #-24]	; 0xffffffe8
    34e0:	cmp	r2, #0
    34e4:	movw	r2, #0
    34e8:	movne	r2, #1
    34ec:	tst	r2, #1
    34f0:	movw	r2, #0
    34f4:	movt	r2, #0
    34f8:	movw	r3, #0
    34fc:	movt	r3, #0
    3500:	movne	r2, r3
    3504:	str	r0, [sp, #504]	; 0x1f8
    3508:	mov	r0, r2
    350c:	blx	r1
    3510:	ldr	r1, [fp, #-12]
    3514:	ldr	r1, [r1, #20]
    3518:	ldr	r2, [fp, #-16]
    351c:	ldr	r3, [fp, #-20]	; 0xffffffec
    3520:	ldr	ip, [fp, #-24]	; 0xffffffe8
    3524:	str	r0, [sp, #500]	; 0x1f4
    3528:	mov	r0, r1
    352c:	mov	r1, r2
    3530:	mov	r2, r3
    3534:	mov	r3, ip
    3538:	movw	ip, #10
    353c:	str	ip, [sp]
    3540:	bl	115c <print_expression>
    3544:	ldr	r1, [fp, #8]
    3548:	cmp	r1, #10
    354c:	bge	356c <print_expression+0x2410>
    3550:	ldr	r0, [fp, #-16]
    3554:	movw	r1, #0
    3558:	movt	r1, #0
    355c:	str	r0, [sp, #496]	; 0x1f0
    3560:	mov	r0, r1
    3564:	ldr	r1, [sp, #496]	; 0x1f0
    3568:	blx	r1
    356c:	b	4bc0 <print_expression+0x3a64>
    3570:	ldr	r0, [fp, #-16]
    3574:	ldr	r1, [fp, #-24]	; 0xffffffe8
    3578:	cmp	r1, #0
    357c:	movw	r1, #0
    3580:	movne	r1, #1
    3584:	tst	r1, #1
    3588:	movw	r1, #0
    358c:	movt	r1, #0
    3590:	movw	r2, #0
    3594:	movt	r2, #0
    3598:	movne	r1, r2
    359c:	str	r0, [sp, #492]	; 0x1ec
    35a0:	mov	r0, r1
    35a4:	ldr	r1, [sp, #492]	; 0x1ec
    35a8:	blx	r1
    35ac:	ldr	r1, [fp, #-12]
    35b0:	ldr	r1, [r1, #16]
    35b4:	ldr	r2, [fp, #-16]
    35b8:	ldr	r3, [fp, #-20]	; 0xffffffec
    35bc:	ldr	ip, [fp, #-24]	; 0xffffffe8
    35c0:	str	r0, [sp, #488]	; 0x1e8
    35c4:	mov	r0, r1
    35c8:	mov	r1, r2
    35cc:	mov	r2, r3
    35d0:	mov	r3, ip
    35d4:	movw	ip, #15
    35d8:	str	ip, [sp]
    35dc:	bl	115c <print_expression>
    35e0:	ldr	r1, [fp, #-16]
    35e4:	movw	r2, #0
    35e8:	movt	r2, #0
    35ec:	str	r0, [sp, #484]	; 0x1e4
    35f0:	mov	r0, r2
    35f4:	blx	r1
    35f8:	b	4bc0 <print_expression+0x3a64>
    35fc:	ldr	r0, [fp, #-16]
    3600:	ldr	r1, [fp, #-24]	; 0xffffffe8
    3604:	cmp	r1, #0
    3608:	movw	r1, #0
    360c:	movne	r1, #1
    3610:	tst	r1, #1
    3614:	movw	r1, #0
    3618:	movt	r1, #0
    361c:	movw	r2, #0
    3620:	movt	r2, #0
    3624:	movne	r1, r2
    3628:	str	r0, [sp, #480]	; 0x1e0
    362c:	mov	r0, r1
    3630:	ldr	r1, [sp, #480]	; 0x1e0
    3634:	blx	r1
    3638:	ldr	r1, [fp, #-12]
    363c:	ldr	r1, [r1, #16]
    3640:	ldr	r2, [fp, #-16]
    3644:	ldr	r3, [fp, #-20]	; 0xffffffec
    3648:	ldr	ip, [fp, #-24]	; 0xffffffe8
    364c:	str	r0, [sp, #476]	; 0x1dc
    3650:	mov	r0, r1
    3654:	mov	r1, r2
    3658:	mov	r2, r3
    365c:	mov	r3, ip
    3660:	movw	ip, #15
    3664:	str	ip, [sp]
    3668:	bl	115c <print_expression>
    366c:	ldr	r1, [fp, #-16]
    3670:	movw	r2, #0
    3674:	movt	r2, #0
    3678:	str	r0, [sp, #472]	; 0x1d8
    367c:	mov	r0, r2
    3680:	blx	r1
    3684:	ldr	r1, [fp, #-12]
    3688:	ldr	r1, [r1, #20]
    368c:	ldr	r2, [fp, #-16]
    3690:	ldr	r3, [fp, #-20]	; 0xffffffec
    3694:	ldr	ip, [fp, #-24]	; 0xffffffe8
    3698:	str	r0, [sp, #468]	; 0x1d4
    369c:	mov	r0, r1
    36a0:	mov	r1, r2
    36a4:	mov	r2, r3
    36a8:	mov	r3, ip
    36ac:	movw	ip, #15
    36b0:	str	ip, [sp]
    36b4:	bl	115c <print_expression>
    36b8:	ldr	r1, [fp, #-16]
    36bc:	movw	r2, #0
    36c0:	movt	r2, #0
    36c4:	str	r0, [sp, #464]	; 0x1d0
    36c8:	mov	r0, r2
    36cc:	blx	r1
    36d0:	b	4bc0 <print_expression+0x3a64>
    36d4:	ldr	r0, [fp, #-16]
    36d8:	ldr	r1, [fp, #-24]	; 0xffffffe8
    36dc:	cmp	r1, #0
    36e0:	movw	r1, #0
    36e4:	movne	r1, #1
    36e8:	tst	r1, #1
    36ec:	movw	r1, #0
    36f0:	movt	r1, #0
    36f4:	movw	r2, #0
    36f8:	movt	r2, #0
    36fc:	movne	r1, r2
    3700:	str	r0, [sp, #460]	; 0x1cc
    3704:	mov	r0, r1
    3708:	ldr	r1, [sp, #460]	; 0x1cc
    370c:	blx	r1
    3710:	ldr	r1, [fp, #-12]
    3714:	ldr	r1, [r1, #16]
    3718:	ldr	r2, [fp, #-16]
    371c:	ldr	r3, [fp, #-20]	; 0xffffffec
    3720:	ldr	ip, [fp, #-24]	; 0xffffffe8
    3724:	str	r0, [sp, #456]	; 0x1c8
    3728:	mov	r0, r1
    372c:	mov	r1, r2
    3730:	mov	r2, r3
    3734:	mov	r3, ip
    3738:	movw	ip, #15
    373c:	str	ip, [sp]
    3740:	bl	115c <print_expression>
    3744:	ldr	r1, [fp, #-16]
    3748:	movw	r2, #0
    374c:	movt	r2, #0
    3750:	str	r0, [sp, #452]	; 0x1c4
    3754:	mov	r0, r2
    3758:	blx	r1
    375c:	ldr	r1, [fp, #-12]
    3760:	ldr	r1, [r1, #20]
    3764:	ldr	r2, [fp, #-16]
    3768:	ldr	r3, [fp, #-20]	; 0xffffffec
    376c:	ldr	ip, [fp, #-24]	; 0xffffffe8
    3770:	str	r0, [sp, #448]	; 0x1c0
    3774:	mov	r0, r1
    3778:	mov	r1, r2
    377c:	mov	r2, r3
    3780:	mov	r3, ip
    3784:	movw	ip, #15
    3788:	str	ip, [sp]
    378c:	bl	115c <print_expression>
    3790:	ldr	r1, [fp, #-16]
    3794:	movw	r2, #0
    3798:	movt	r2, #0
    379c:	str	r0, [sp, #444]	; 0x1bc
    37a0:	mov	r0, r2
    37a4:	blx	r1
    37a8:	b	4bc0 <print_expression+0x3a64>
    37ac:	ldr	r0, [fp, #8]
    37b0:	cmp	r0, #3
    37b4:	bge	37d4 <print_expression+0x2678>
    37b8:	ldr	r0, [fp, #-16]
    37bc:	movw	r1, #0
    37c0:	movt	r1, #0
    37c4:	str	r0, [sp, #440]	; 0x1b8
    37c8:	mov	r0, r1
    37cc:	ldr	r1, [sp, #440]	; 0x1b8
    37d0:	blx	r1
    37d4:	ldr	r0, [fp, #-12]
    37d8:	ldr	r0, [r0, #16]
    37dc:	ldr	r1, [fp, #-16]
    37e0:	ldr	r2, [fp, #-20]	; 0xffffffec
    37e4:	ldr	r3, [fp, #-24]	; 0xffffffe8
    37e8:	movw	ip, #3
    37ec:	str	ip, [sp]
    37f0:	bl	115c <print_expression>
    37f4:	ldr	r1, [fp, #-16]
    37f8:	movw	r2, #0
    37fc:	movt	r2, #0
    3800:	str	r0, [sp, #436]	; 0x1b4
    3804:	mov	r0, r2
    3808:	blx	r1
    380c:	ldr	r1, [fp, #-12]
    3810:	ldr	r1, [r1, #20]
    3814:	ldr	r2, [fp, #-16]
    3818:	ldr	r3, [fp, #-20]	; 0xffffffec
    381c:	ldr	ip, [fp, #-24]	; 0xffffffe8
    3820:	str	r0, [sp, #432]	; 0x1b0
    3824:	mov	r0, r1
    3828:	mov	r1, r2
    382c:	mov	r2, r3
    3830:	mov	r3, ip
    3834:	movw	ip, #3
    3838:	str	ip, [sp]
    383c:	bl	115c <print_expression>
    3840:	ldr	r1, [fp, #8]
    3844:	cmp	r1, #3
    3848:	bge	3868 <print_expression+0x270c>
    384c:	ldr	r0, [fp, #-16]
    3850:	movw	r1, #0
    3854:	movt	r1, #0
    3858:	str	r0, [sp, #428]	; 0x1ac
    385c:	mov	r0, r1
    3860:	ldr	r1, [sp, #428]	; 0x1ac
    3864:	blx	r1
    3868:	b	4bc0 <print_expression+0x3a64>
    386c:	ldr	r0, [fp, #8]
    3870:	cmp	r0, #3
    3874:	bge	3894 <print_expression+0x2738>
    3878:	ldr	r0, [fp, #-16]
    387c:	movw	r1, #0
    3880:	movt	r1, #0
    3884:	str	r0, [sp, #424]	; 0x1a8
    3888:	mov	r0, r1
    388c:	ldr	r1, [sp, #424]	; 0x1a8
    3890:	blx	r1
    3894:	ldr	r0, [fp, #-12]
    3898:	ldr	r0, [r0, #16]
    389c:	ldr	r1, [fp, #-16]
    38a0:	ldr	r2, [fp, #-20]	; 0xffffffec
    38a4:	ldr	r3, [fp, #-24]	; 0xffffffe8
    38a8:	movw	ip, #3
    38ac:	str	ip, [sp]
    38b0:	bl	115c <print_expression>
    38b4:	ldr	r1, [fp, #-16]
    38b8:	movw	r2, #0
    38bc:	movt	r2, #0
    38c0:	str	r0, [sp, #420]	; 0x1a4
    38c4:	mov	r0, r2
    38c8:	blx	r1
    38cc:	ldr	r1, [fp, #-12]
    38d0:	ldr	r1, [r1, #20]
    38d4:	ldr	r2, [fp, #-16]
    38d8:	ldr	r3, [fp, #-20]	; 0xffffffec
    38dc:	ldr	ip, [fp, #-24]	; 0xffffffe8
    38e0:	str	r0, [sp, #416]	; 0x1a0
    38e4:	mov	r0, r1
    38e8:	mov	r1, r2
    38ec:	mov	r2, r3
    38f0:	mov	r3, ip
    38f4:	movw	ip, #3
    38f8:	str	ip, [sp]
    38fc:	bl	115c <print_expression>
    3900:	ldr	r1, [fp, #8]
    3904:	cmp	r1, #3
    3908:	bge	3928 <print_expression+0x27cc>
    390c:	ldr	r0, [fp, #-16]
    3910:	movw	r1, #0
    3914:	movt	r1, #0
    3918:	str	r0, [sp, #412]	; 0x19c
    391c:	mov	r0, r1
    3920:	ldr	r1, [sp, #412]	; 0x19c
    3924:	blx	r1
    3928:	b	4bc0 <print_expression+0x3a64>
    392c:	ldr	r0, [fp, #-16]
    3930:	movw	r1, #0
    3934:	movt	r1, #0
    3938:	str	r0, [sp, #408]	; 0x198
    393c:	mov	r0, r1
    3940:	ldr	r1, [sp, #408]	; 0x198
    3944:	blx	r1
    3948:	ldr	r1, [fp, #-12]
    394c:	ldr	r1, [r1, #16]
    3950:	ldr	r2, [fp, #-16]
    3954:	ldr	r3, [fp, #-20]	; 0xffffffec
    3958:	ldr	ip, [fp, #-24]	; 0xffffffe8
    395c:	str	r0, [sp, #404]	; 0x194
    3960:	mov	r0, r1
    3964:	mov	r1, r2
    3968:	mov	r2, r3
    396c:	mov	r3, ip
    3970:	movw	ip, #1
    3974:	str	ip, [sp]
    3978:	bl	115c <print_expression>
    397c:	b	4bc0 <print_expression+0x3a64>
    3980:	ldr	r0, [fp, #8]
    3984:	cmp	r0, #6
    3988:	bge	39a8 <print_expression+0x284c>
    398c:	ldr	r0, [fp, #-16]
    3990:	movw	r1, #0
    3994:	movt	r1, #0
    3998:	str	r0, [sp, #400]	; 0x190
    399c:	mov	r0, r1
    39a0:	ldr	r1, [sp, #400]	; 0x190
    39a4:	blx	r1
    39a8:	ldr	r0, [fp, #-12]
    39ac:	ldr	r0, [r0, #16]
    39b0:	ldr	r1, [fp, #-16]
    39b4:	ldr	r2, [fp, #-20]	; 0xffffffec
    39b8:	ldr	r3, [fp, #-24]	; 0xffffffe8
    39bc:	movw	ip, #6
    39c0:	str	ip, [sp]
    39c4:	bl	115c <print_expression>
    39c8:	ldr	r1, [fp, #-16]
    39cc:	movw	r2, #0
    39d0:	movt	r2, #0
    39d4:	str	r0, [sp, #396]	; 0x18c
    39d8:	mov	r0, r2
    39dc:	blx	r1
    39e0:	ldr	r1, [fp, #-12]
    39e4:	ldr	r1, [r1, #20]
    39e8:	ldr	r2, [fp, #-16]
    39ec:	ldr	r3, [fp, #-20]	; 0xffffffec
    39f0:	ldr	ip, [fp, #-24]	; 0xffffffe8
    39f4:	str	r0, [sp, #392]	; 0x188
    39f8:	mov	r0, r1
    39fc:	mov	r1, r2
    3a00:	mov	r2, r3
    3a04:	mov	r3, ip
    3a08:	movw	ip, #6
    3a0c:	str	ip, [sp]
    3a10:	bl	115c <print_expression>
    3a14:	ldr	r1, [fp, #8]
    3a18:	cmp	r1, #6
    3a1c:	bge	3a3c <print_expression+0x28e0>
    3a20:	ldr	r0, [fp, #-16]
    3a24:	movw	r1, #0
    3a28:	movt	r1, #0
    3a2c:	str	r0, [sp, #388]	; 0x184
    3a30:	mov	r0, r1
    3a34:	ldr	r1, [sp, #388]	; 0x184
    3a38:	blx	r1
    3a3c:	b	4bc0 <print_expression+0x3a64>
    3a40:	ldr	r0, [fp, #-16]
    3a44:	movw	r1, #0
    3a48:	movt	r1, #0
    3a4c:	str	r0, [sp, #384]	; 0x180
    3a50:	mov	r0, r1
    3a54:	ldr	r1, [sp, #384]	; 0x180
    3a58:	blx	r1
    3a5c:	ldr	r1, [fp, #-12]
    3a60:	ldr	r1, [r1, #16]
    3a64:	ldr	r2, [fp, #-16]
    3a68:	ldr	r3, [fp, #-20]	; 0xffffffec
    3a6c:	ldr	ip, [fp, #-24]	; 0xffffffe8
    3a70:	str	r0, [sp, #380]	; 0x17c
    3a74:	mov	r0, r1
    3a78:	mov	r1, r2
    3a7c:	mov	r2, r3
    3a80:	mov	r3, ip
    3a84:	movw	ip, #1
    3a88:	str	ip, [sp]
    3a8c:	bl	115c <print_expression>
    3a90:	b	4bc0 <print_expression+0x3a64>
    3a94:	ldr	r0, [fp, #-16]
    3a98:	ldr	r1, [fp, #-24]	; 0xffffffe8
    3a9c:	cmp	r1, #0
    3aa0:	movw	r1, #0
    3aa4:	movne	r1, #1
    3aa8:	tst	r1, #1
    3aac:	movw	r1, #0
    3ab0:	movt	r1, #0
    3ab4:	movw	r2, #0
    3ab8:	movt	r2, #0
    3abc:	movne	r1, r2
    3ac0:	str	r0, [sp, #376]	; 0x178
    3ac4:	mov	r0, r1
    3ac8:	ldr	r1, [sp, #376]	; 0x178
    3acc:	blx	r1
    3ad0:	ldr	r1, [fp, #-12]
    3ad4:	ldr	r1, [r1, #16]
    3ad8:	ldr	r2, [fp, #-16]
    3adc:	ldr	r3, [fp, #-20]	; 0xffffffec
    3ae0:	ldr	ip, [fp, #-24]	; 0xffffffe8
    3ae4:	str	r0, [sp, #372]	; 0x174
    3ae8:	mov	r0, r1
    3aec:	mov	r1, r2
    3af0:	mov	r2, r3
    3af4:	mov	r3, ip
    3af8:	movw	ip, #15
    3afc:	str	ip, [sp]
    3b00:	bl	115c <print_expression>
    3b04:	ldr	r1, [fp, #-16]
    3b08:	movw	r2, #0
    3b0c:	movt	r2, #0
    3b10:	str	r0, [sp, #368]	; 0x170
    3b14:	mov	r0, r2
    3b18:	blx	r1
    3b1c:	b	4bc0 <print_expression+0x3a64>
    3b20:	ldr	r0, [fp, #-16]
    3b24:	ldr	r1, [fp, #-24]	; 0xffffffe8
    3b28:	cmp	r1, #0
    3b2c:	movw	r1, #0
    3b30:	movne	r1, #1
    3b34:	tst	r1, #1
    3b38:	movw	r1, #0
    3b3c:	movt	r1, #0
    3b40:	movw	r2, #0
    3b44:	movt	r2, #0
    3b48:	movne	r1, r2
    3b4c:	str	r0, [sp, #364]	; 0x16c
    3b50:	mov	r0, r1
    3b54:	ldr	r1, [sp, #364]	; 0x16c
    3b58:	blx	r1
    3b5c:	ldr	r1, [fp, #-12]
    3b60:	ldr	r1, [r1, #16]
    3b64:	ldr	r2, [fp, #-16]
    3b68:	ldr	r3, [fp, #-20]	; 0xffffffec
    3b6c:	ldr	ip, [fp, #-24]	; 0xffffffe8
    3b70:	str	r0, [sp, #360]	; 0x168
    3b74:	mov	r0, r1
    3b78:	mov	r1, r2
    3b7c:	mov	r2, r3
    3b80:	mov	r3, ip
    3b84:	movw	ip, #15
    3b88:	str	ip, [sp]
    3b8c:	bl	115c <print_expression>
    3b90:	ldr	r1, [fp, #-16]
    3b94:	movw	r2, #0
    3b98:	movt	r2, #0
    3b9c:	str	r0, [sp, #356]	; 0x164
    3ba0:	mov	r0, r2
    3ba4:	blx	r1
    3ba8:	b	4bc0 <print_expression+0x3a64>
    3bac:	ldr	r0, [fp, #8]
    3bb0:	cmp	r0, #7
    3bb4:	bge	3bd4 <print_expression+0x2a78>
    3bb8:	ldr	r0, [fp, #-16]
    3bbc:	movw	r1, #0
    3bc0:	movt	r1, #0
    3bc4:	str	r0, [sp, #352]	; 0x160
    3bc8:	mov	r0, r1
    3bcc:	ldr	r1, [sp, #352]	; 0x160
    3bd0:	blx	r1
    3bd4:	ldr	r0, [fp, #-12]
    3bd8:	ldr	r0, [r0, #16]
    3bdc:	ldr	r1, [fp, #-16]
    3be0:	ldr	r2, [fp, #-20]	; 0xffffffec
    3be4:	ldr	r3, [fp, #-24]	; 0xffffffe8
    3be8:	movw	ip, #7
    3bec:	str	ip, [sp]
    3bf0:	bl	115c <print_expression>
    3bf4:	ldr	r1, [fp, #-16]
    3bf8:	movw	r2, #0
    3bfc:	movt	r2, #0
    3c00:	str	r0, [sp, #348]	; 0x15c
    3c04:	mov	r0, r2
    3c08:	blx	r1
    3c0c:	ldr	r1, [fp, #-12]
    3c10:	ldr	r1, [r1, #20]
    3c14:	ldr	r2, [fp, #-16]
    3c18:	ldr	r3, [fp, #-20]	; 0xffffffec
    3c1c:	ldr	ip, [fp, #-24]	; 0xffffffe8
    3c20:	str	r0, [sp, #344]	; 0x158
    3c24:	mov	r0, r1
    3c28:	mov	r1, r2
    3c2c:	mov	r2, r3
    3c30:	mov	r3, ip
    3c34:	movw	ip, #7
    3c38:	str	ip, [sp]
    3c3c:	bl	115c <print_expression>
    3c40:	ldr	r1, [fp, #8]
    3c44:	cmp	r1, #7
    3c48:	bge	3c68 <print_expression+0x2b0c>
    3c4c:	ldr	r0, [fp, #-16]
    3c50:	movw	r1, #0
    3c54:	movt	r1, #0
    3c58:	str	r0, [sp, #340]	; 0x154
    3c5c:	mov	r0, r1
    3c60:	ldr	r1, [sp, #340]	; 0x154
    3c64:	blx	r1
    3c68:	b	4bc0 <print_expression+0x3a64>
    3c6c:	ldr	r0, [fp, #8]
    3c70:	cmp	r0, #2
    3c74:	bge	3c94 <print_expression+0x2b38>
    3c78:	ldr	r0, [fp, #-16]
    3c7c:	movw	r1, #0
    3c80:	movt	r1, #0
    3c84:	str	r0, [sp, #336]	; 0x150
    3c88:	mov	r0, r1
    3c8c:	ldr	r1, [sp, #336]	; 0x150
    3c90:	blx	r1
    3c94:	ldr	r0, [fp, #-12]
    3c98:	ldr	r0, [r0, #16]
    3c9c:	ldr	r1, [fp, #-16]
    3ca0:	ldr	r2, [fp, #-20]	; 0xffffffec
    3ca4:	ldr	r3, [fp, #-24]	; 0xffffffe8
    3ca8:	movw	ip, #2
    3cac:	str	ip, [sp]
    3cb0:	bl	115c <print_expression>
    3cb4:	ldr	r1, [fp, #-16]
    3cb8:	movw	r2, #0
    3cbc:	movt	r2, #0
    3cc0:	str	r0, [sp, #332]	; 0x14c
    3cc4:	mov	r0, r2
    3cc8:	blx	r1
    3ccc:	ldr	r1, [fp, #-12]
    3cd0:	ldr	r1, [r1, #20]
    3cd4:	ldr	r2, [fp, #-16]
    3cd8:	ldr	r3, [fp, #-20]	; 0xffffffec
    3cdc:	ldr	ip, [fp, #-24]	; 0xffffffe8
    3ce0:	str	r0, [sp, #328]	; 0x148
    3ce4:	mov	r0, r1
    3ce8:	mov	r1, r2
    3cec:	mov	r2, r3
    3cf0:	mov	r3, ip
    3cf4:	movw	ip, #2
    3cf8:	str	ip, [sp]
    3cfc:	bl	115c <print_expression>
    3d00:	ldr	r1, [fp, #8]
    3d04:	cmp	r1, #2
    3d08:	bge	3d28 <print_expression+0x2bcc>
    3d0c:	ldr	r0, [fp, #-16]
    3d10:	movw	r1, #0
    3d14:	movt	r1, #0
    3d18:	str	r0, [sp, #324]	; 0x144
    3d1c:	mov	r0, r1
    3d20:	ldr	r1, [sp, #324]	; 0x144
    3d24:	blx	r1
    3d28:	b	4bc0 <print_expression+0x3a64>
    3d2c:	ldr	r0, [fp, #-16]
    3d30:	ldr	r1, [fp, #-24]	; 0xffffffe8
    3d34:	cmp	r1, #0
    3d38:	movw	r1, #0
    3d3c:	movne	r1, #1
    3d40:	tst	r1, #1
    3d44:	movw	r1, #0
    3d48:	movt	r1, #0
    3d4c:	movw	r2, #0
    3d50:	movt	r2, #0
    3d54:	movne	r1, r2
    3d58:	str	r0, [sp, #320]	; 0x140
    3d5c:	mov	r0, r1
    3d60:	ldr	r1, [sp, #320]	; 0x140
    3d64:	blx	r1
    3d68:	b	4bc0 <print_expression+0x3a64>
    3d6c:	ldr	r0, [fp, #-16]
    3d70:	ldr	r1, [fp, #-24]	; 0xffffffe8
    3d74:	cmp	r1, #0
    3d78:	movw	r1, #0
    3d7c:	movne	r1, #1
    3d80:	tst	r1, #1
    3d84:	movw	r1, #0
    3d88:	movt	r1, #0
    3d8c:	movw	r2, #0
    3d90:	movt	r2, #0
    3d94:	movne	r1, r2
    3d98:	str	r0, [sp, #316]	; 0x13c
    3d9c:	mov	r0, r1
    3da0:	ldr	r1, [sp, #316]	; 0x13c
    3da4:	blx	r1
    3da8:	b	4bc0 <print_expression+0x3a64>
    3dac:	ldr	r0, [fp, #-16]
    3db0:	ldr	r1, [fp, #-24]	; 0xffffffe8
    3db4:	cmp	r1, #0
    3db8:	movw	r1, #0
    3dbc:	movne	r1, #1
    3dc0:	tst	r1, #1
    3dc4:	movw	r1, #0
    3dc8:	movt	r1, #0
    3dcc:	movw	r2, #0
    3dd0:	movt	r2, #0
    3dd4:	movne	r1, r2
    3dd8:	str	r0, [sp, #312]	; 0x138
    3ddc:	mov	r0, r1
    3de0:	ldr	r1, [sp, #312]	; 0x138
    3de4:	blx	r1
    3de8:	b	4bc0 <print_expression+0x3a64>
    3dec:	ldr	r0, [fp, #-16]
    3df0:	ldr	r1, [fp, #-24]	; 0xffffffe8
    3df4:	cmp	r1, #0
    3df8:	movw	r1, #0
    3dfc:	movne	r1, #1
    3e00:	tst	r1, #1
    3e04:	movw	r1, #0
    3e08:	movt	r1, #0
    3e0c:	movw	r2, #0
    3e10:	movt	r2, #0
    3e14:	movne	r1, r2
    3e18:	str	r0, [sp, #308]	; 0x134
    3e1c:	mov	r0, r1
    3e20:	ldr	r1, [sp, #308]	; 0x134
    3e24:	blx	r1
    3e28:	b	4bc0 <print_expression+0x3a64>
    3e2c:	ldr	r0, [fp, #-16]
    3e30:	ldr	r1, [fp, #-24]	; 0xffffffe8
    3e34:	cmp	r1, #0
    3e38:	movw	r1, #0
    3e3c:	movne	r1, #1
    3e40:	tst	r1, #1
    3e44:	movw	r1, #0
    3e48:	movt	r1, #0
    3e4c:	movw	r2, #0
    3e50:	movt	r2, #0
    3e54:	movne	r1, r2
    3e58:	str	r0, [sp, #304]	; 0x130
    3e5c:	mov	r0, r1
    3e60:	ldr	r1, [sp, #304]	; 0x130
    3e64:	blx	r1
    3e68:	ldr	r1, [fp, #-12]
    3e6c:	ldr	r1, [r1, #16]
    3e70:	ldr	r2, [fp, #-16]
    3e74:	ldr	r3, [fp, #-20]	; 0xffffffec
    3e78:	ldr	ip, [fp, #-24]	; 0xffffffe8
    3e7c:	str	r0, [sp, #300]	; 0x12c
    3e80:	mov	r0, r1
    3e84:	mov	r1, r2
    3e88:	mov	r2, r3
    3e8c:	mov	r3, ip
    3e90:	movw	ip, #15
    3e94:	str	ip, [sp]
    3e98:	bl	115c <print_expression>
    3e9c:	ldr	r1, [fp, #-16]
    3ea0:	movw	r2, #0
    3ea4:	movt	r2, #0
    3ea8:	str	r0, [sp, #296]	; 0x128
    3eac:	mov	r0, r2
    3eb0:	blx	r1
    3eb4:	ldr	r1, [fp, #-12]
    3eb8:	ldr	r1, [r1, #20]
    3ebc:	ldr	r2, [fp, #-16]
    3ec0:	ldr	r3, [fp, #-20]	; 0xffffffec
    3ec4:	ldr	ip, [fp, #-24]	; 0xffffffe8
    3ec8:	str	r0, [sp, #292]	; 0x124
    3ecc:	mov	r0, r1
    3ed0:	mov	r1, r2
    3ed4:	mov	r2, r3
    3ed8:	mov	r3, ip
    3edc:	movw	ip, #15
    3ee0:	str	ip, [sp]
    3ee4:	bl	115c <print_expression>
    3ee8:	ldr	r1, [fp, #-12]
    3eec:	ldr	r1, [r1, #24]
    3ef0:	movw	r2, #0
    3ef4:	cmp	r1, r2
    3ef8:	beq	3f4c <print_expression+0x2df0>
    3efc:	ldr	r0, [fp, #-16]
    3f00:	movw	r1, #0
    3f04:	movt	r1, #0
    3f08:	str	r0, [sp, #288]	; 0x120
    3f0c:	mov	r0, r1
    3f10:	ldr	r1, [sp, #288]	; 0x120
    3f14:	blx	r1
    3f18:	ldr	r1, [fp, #-12]
    3f1c:	ldr	r1, [r1, #24]
    3f20:	ldr	r2, [fp, #-16]
    3f24:	ldr	r3, [fp, #-20]	; 0xffffffec
    3f28:	ldr	ip, [fp, #-24]	; 0xffffffe8
    3f2c:	str	r0, [sp, #284]	; 0x11c
    3f30:	mov	r0, r1
    3f34:	mov	r1, r2
    3f38:	mov	r2, r3
    3f3c:	mov	r3, ip
    3f40:	movw	ip, #15
    3f44:	str	ip, [sp]
    3f48:	bl	115c <print_expression>
    3f4c:	ldr	r0, [fp, #-16]
    3f50:	movw	r1, #0
    3f54:	movt	r1, #0
    3f58:	str	r0, [sp, #280]	; 0x118
    3f5c:	mov	r0, r1
    3f60:	ldr	r1, [sp, #280]	; 0x118
    3f64:	blx	r1
    3f68:	b	4bc0 <print_expression+0x3a64>
    3f6c:	ldr	r0, [fp, #-16]
    3f70:	ldr	r1, [fp, #-24]	; 0xffffffe8
    3f74:	cmp	r1, #0
    3f78:	movw	r1, #0
    3f7c:	movne	r1, #1
    3f80:	tst	r1, #1
    3f84:	movw	r1, #0
    3f88:	movt	r1, #0
    3f8c:	movw	r2, #0
    3f90:	movt	r2, #0
    3f94:	movne	r1, r2
    3f98:	str	r0, [sp, #276]	; 0x114
    3f9c:	mov	r0, r1
    3fa0:	ldr	r1, [sp, #276]	; 0x114
    3fa4:	blx	r1
    3fa8:	ldr	r1, [fp, #-12]
    3fac:	ldr	r1, [r1, #16]
    3fb0:	ldr	r2, [fp, #-16]
    3fb4:	ldr	r3, [fp, #-20]	; 0xffffffec
    3fb8:	ldr	ip, [fp, #-24]	; 0xffffffe8
    3fbc:	str	r0, [sp, #272]	; 0x110
    3fc0:	mov	r0, r1
    3fc4:	mov	r1, r2
    3fc8:	mov	r2, r3
    3fcc:	mov	r3, ip
    3fd0:	movw	ip, #15
    3fd4:	str	ip, [sp]
    3fd8:	bl	115c <print_expression>
    3fdc:	ldr	r1, [fp, #-16]
    3fe0:	movw	r2, #0
    3fe4:	movt	r2, #0
    3fe8:	str	r0, [sp, #268]	; 0x10c
    3fec:	mov	r0, r2
    3ff0:	blx	r1
    3ff4:	b	4bc0 <print_expression+0x3a64>
    3ff8:	ldr	r0, [fp, #-16]
    3ffc:	ldr	r1, [fp, #-24]	; 0xffffffe8
    4000:	cmp	r1, #0
    4004:	movw	r1, #0
    4008:	movne	r1, #1
    400c:	tst	r1, #1
    4010:	movw	r1, #0
    4014:	movt	r1, #0
    4018:	movw	r2, #0
    401c:	movt	r2, #0
    4020:	movne	r1, r2
    4024:	str	r0, [sp, #264]	; 0x108
    4028:	mov	r0, r1
    402c:	ldr	r1, [sp, #264]	; 0x108
    4030:	blx	r1
    4034:	ldr	r1, [fp, #-12]
    4038:	ldr	r1, [r1, #16]
    403c:	ldr	r2, [fp, #-16]
    4040:	ldr	r3, [fp, #-20]	; 0xffffffec
    4044:	ldr	ip, [fp, #-24]	; 0xffffffe8
    4048:	str	r0, [sp, #260]	; 0x104
    404c:	mov	r0, r1
    4050:	mov	r1, r2
    4054:	mov	r2, r3
    4058:	mov	r3, ip
    405c:	movw	ip, #15
    4060:	str	ip, [sp]
    4064:	bl	115c <print_expression>
    4068:	ldr	r1, [fp, #-16]
    406c:	movw	r2, #0
    4070:	movt	r2, #0
    4074:	str	r0, [sp, #256]	; 0x100
    4078:	mov	r0, r2
    407c:	blx	r1
    4080:	b	4bc0 <print_expression+0x3a64>
    4084:	ldr	r0, [fp, #-12]
    4088:	ldr	r0, [r0, #16]
    408c:	ldr	r1, [fp, #-16]
    4090:	ldr	r2, [fp, #-20]	; 0xffffffec
    4094:	ldr	r3, [fp, #-24]	; 0xffffffe8
    4098:	movw	ip, #15
    409c:	str	ip, [sp]
    40a0:	bl	115c <print_expression>
    40a4:	ldr	r1, [fp, #-16]
    40a8:	ldr	r2, [fp, #-24]	; 0xffffffe8
    40ac:	cmp	r2, #0
    40b0:	movw	r2, #0
    40b4:	movne	r2, #1
    40b8:	tst	r2, #1
    40bc:	movw	r2, #0
    40c0:	movt	r2, #0
    40c4:	movw	r3, #0
    40c8:	movt	r3, #0
    40cc:	movne	r2, r3
    40d0:	str	r0, [sp, #252]	; 0xfc
    40d4:	mov	r0, r2
    40d8:	blx	r1
    40dc:	ldr	r1, [fp, #-12]
    40e0:	ldr	r1, [r1, #20]
    40e4:	ldr	r2, [fp, #-16]
    40e8:	ldr	r3, [fp, #-20]	; 0xffffffec
    40ec:	ldr	ip, [fp, #-24]	; 0xffffffe8
    40f0:	str	r0, [sp, #248]	; 0xf8
    40f4:	mov	r0, r1
    40f8:	mov	r1, r2
    40fc:	mov	r2, r3
    4100:	mov	r3, ip
    4104:	movw	ip, #15
    4108:	str	ip, [sp]
    410c:	bl	115c <print_expression>
    4110:	b	4bc0 <print_expression+0x3a64>
    4114:	ldr	r0, [fp, #-16]
    4118:	ldr	r1, [fp, #-24]	; 0xffffffe8
    411c:	cmp	r1, #0
    4120:	movw	r1, #0
    4124:	movne	r1, #1
    4128:	tst	r1, #1
    412c:	movw	r1, #0
    4130:	movt	r1, #0
    4134:	movw	r2, #0
    4138:	movt	r2, #0
    413c:	movne	r1, r2
    4140:	str	r0, [sp, #244]	; 0xf4
    4144:	mov	r0, r1
    4148:	ldr	r1, [sp, #244]	; 0xf4
    414c:	blx	r1
    4150:	ldr	r1, [fp, #-12]
    4154:	ldr	r1, [r1, #16]
    4158:	ldr	r2, [fp, #-16]
    415c:	ldr	r3, [fp, #-20]	; 0xffffffec
    4160:	ldr	ip, [fp, #-24]	; 0xffffffe8
    4164:	str	r0, [sp, #240]	; 0xf0
    4168:	mov	r0, r1
    416c:	mov	r1, r2
    4170:	mov	r2, r3
    4174:	mov	r3, ip
    4178:	movw	ip, #15
    417c:	str	ip, [sp]
    4180:	bl	115c <print_expression>
    4184:	ldr	r1, [fp, #-12]
    4188:	ldr	r1, [r1, #20]
    418c:	movw	r2, #0
    4190:	cmp	r1, r2
    4194:	beq	41e8 <print_expression+0x308c>
    4198:	ldr	r0, [fp, #-16]
    419c:	movw	r1, #0
    41a0:	movt	r1, #0
    41a4:	str	r0, [sp, #236]	; 0xec
    41a8:	mov	r0, r1
    41ac:	ldr	r1, [sp, #236]	; 0xec
    41b0:	blx	r1
    41b4:	ldr	r1, [fp, #-12]
    41b8:	ldr	r1, [r1, #20]
    41bc:	ldr	r2, [fp, #-16]
    41c0:	ldr	r3, [fp, #-20]	; 0xffffffec
    41c4:	ldr	ip, [fp, #-24]	; 0xffffffe8
    41c8:	str	r0, [sp, #232]	; 0xe8
    41cc:	mov	r0, r1
    41d0:	mov	r1, r2
    41d4:	mov	r2, r3
    41d8:	mov	r3, ip
    41dc:	movw	ip, #15
    41e0:	str	ip, [sp]
    41e4:	bl	115c <print_expression>
    41e8:	ldr	r0, [fp, #-16]
    41ec:	movw	r1, #0
    41f0:	movt	r1, #0
    41f4:	str	r0, [sp, #228]	; 0xe4
    41f8:	mov	r0, r1
    41fc:	ldr	r1, [sp, #228]	; 0xe4
    4200:	blx	r1
    4204:	b	4bc0 <print_expression+0x3a64>
    4208:	ldr	r0, [fp, #-16]
    420c:	ldr	r1, [fp, #-24]	; 0xffffffe8
    4210:	cmp	r1, #0
    4214:	movw	r1, #0
    4218:	movne	r1, #1
    421c:	tst	r1, #1
    4220:	movw	r1, #0
    4224:	movt	r1, #0
    4228:	movw	r2, #0
    422c:	movt	r2, #0
    4230:	movne	r1, r2
    4234:	str	r0, [sp, #224]	; 0xe0
    4238:	mov	r0, r1
    423c:	ldr	r1, [sp, #224]	; 0xe0
    4240:	blx	r1
    4244:	ldr	r1, [fp, #-12]
    4248:	ldr	r1, [r1, #16]
    424c:	ldr	r2, [fp, #-16]
    4250:	ldr	r3, [fp, #-20]	; 0xffffffec
    4254:	ldr	ip, [fp, #-24]	; 0xffffffe8
    4258:	str	r0, [sp, #220]	; 0xdc
    425c:	mov	r0, r1
    4260:	mov	r1, r2
    4264:	mov	r2, r3
    4268:	mov	r3, ip
    426c:	movw	ip, #15
    4270:	str	ip, [sp]
    4274:	bl	115c <print_expression>
    4278:	ldr	r1, [fp, #-12]
    427c:	ldr	r1, [r1, #20]
    4280:	movw	r2, #0
    4284:	cmp	r1, r2
    4288:	beq	42dc <print_expression+0x3180>
    428c:	ldr	r0, [fp, #-16]
    4290:	movw	r1, #0
    4294:	movt	r1, #0
    4298:	str	r0, [sp, #216]	; 0xd8
    429c:	mov	r0, r1
    42a0:	ldr	r1, [sp, #216]	; 0xd8
    42a4:	blx	r1
    42a8:	ldr	r1, [fp, #-12]
    42ac:	ldr	r1, [r1, #20]
    42b0:	ldr	r2, [fp, #-16]
    42b4:	ldr	r3, [fp, #-20]	; 0xffffffec
    42b8:	ldr	ip, [fp, #-24]	; 0xffffffe8
    42bc:	str	r0, [sp, #212]	; 0xd4
    42c0:	mov	r0, r1
    42c4:	mov	r1, r2
    42c8:	mov	r2, r3
    42cc:	mov	r3, ip
    42d0:	movw	ip, #15
    42d4:	str	ip, [sp]
    42d8:	bl	115c <print_expression>
    42dc:	ldr	r0, [fp, #-16]
    42e0:	movw	r1, #0
    42e4:	movt	r1, #0
    42e8:	str	r0, [sp, #208]	; 0xd0
    42ec:	mov	r0, r1
    42f0:	ldr	r1, [sp, #208]	; 0xd0
    42f4:	blx	r1
    42f8:	b	4bc0 <print_expression+0x3a64>
    42fc:	ldr	r0, [fp, #-16]
    4300:	ldr	r1, [fp, #-24]	; 0xffffffe8
    4304:	cmp	r1, #0
    4308:	movw	r1, #0
    430c:	movne	r1, #1
    4310:	tst	r1, #1
    4314:	movw	r1, #0
    4318:	movt	r1, #0
    431c:	movw	r2, #0
    4320:	movt	r2, #0
    4324:	movne	r1, r2
    4328:	str	r0, [sp, #204]	; 0xcc
    432c:	mov	r0, r1
    4330:	ldr	r1, [sp, #204]	; 0xcc
    4334:	blx	r1
    4338:	ldr	r1, [fp, #-12]
    433c:	ldr	r1, [r1, #16]
    4340:	ldr	r2, [fp, #-16]
    4344:	ldr	r3, [fp, #-20]	; 0xffffffec
    4348:	ldr	ip, [fp, #-24]	; 0xffffffe8
    434c:	str	r0, [sp, #200]	; 0xc8
    4350:	mov	r0, r1
    4354:	mov	r1, r2
    4358:	mov	r2, r3
    435c:	mov	r3, ip
    4360:	movw	ip, #15
    4364:	str	ip, [sp]
    4368:	bl	115c <print_expression>
    436c:	ldr	r1, [fp, #-16]
    4370:	movw	r2, #0
    4374:	movt	r2, #0
    4378:	str	r0, [sp, #196]	; 0xc4
    437c:	mov	r0, r2
    4380:	blx	r1
    4384:	ldr	r1, [fp, #-12]
    4388:	ldr	r1, [r1, #20]
    438c:	ldr	r2, [fp, #-16]
    4390:	ldr	r3, [fp, #-20]	; 0xffffffec
    4394:	ldr	ip, [fp, #-24]	; 0xffffffe8
    4398:	str	r0, [sp, #192]	; 0xc0
    439c:	mov	r0, r1
    43a0:	mov	r1, r2
    43a4:	mov	r2, r3
    43a8:	mov	r3, ip
    43ac:	movw	ip, #15
    43b0:	str	ip, [sp]
    43b4:	bl	115c <print_expression>
    43b8:	ldr	r1, [fp, #-16]
    43bc:	movw	r2, #0
    43c0:	movt	r2, #0
    43c4:	str	r0, [sp, #188]	; 0xbc
    43c8:	mov	r0, r2
    43cc:	blx	r1
    43d0:	ldr	r1, [fp, #-12]
    43d4:	ldr	r1, [r1, #24]
    43d8:	ldr	r2, [fp, #-16]
    43dc:	ldr	r3, [fp, #-20]	; 0xffffffec
    43e0:	ldr	ip, [fp, #-24]	; 0xffffffe8
    43e4:	str	r0, [sp, #184]	; 0xb8
    43e8:	mov	r0, r1
    43ec:	mov	r1, r2
    43f0:	mov	r2, r3
    43f4:	mov	r3, ip
    43f8:	movw	ip, #15
    43fc:	str	ip, [sp]
    4400:	bl	115c <print_expression>
    4404:	ldr	r1, [fp, #-16]
    4408:	movw	r2, #0
    440c:	movt	r2, #0
    4410:	str	r0, [sp, #180]	; 0xb4
    4414:	mov	r0, r2
    4418:	blx	r1
    441c:	b	4bc0 <print_expression+0x3a64>
    4420:	ldr	r0, [fp, #8]
    4424:	cmp	r0, #4
    4428:	bge	4448 <print_expression+0x32ec>
    442c:	ldr	r0, [fp, #-16]
    4430:	movw	r1, #0
    4434:	movt	r1, #0
    4438:	str	r0, [sp, #176]	; 0xb0
    443c:	mov	r0, r1
    4440:	ldr	r1, [sp, #176]	; 0xb0
    4444:	blx	r1
    4448:	ldr	r0, [fp, #-12]
    444c:	ldr	r0, [r0, #16]
    4450:	ldr	r1, [fp, #-16]
    4454:	ldr	r2, [fp, #-20]	; 0xffffffec
    4458:	ldr	r3, [fp, #-24]	; 0xffffffe8
    445c:	movw	ip, #4
    4460:	str	ip, [sp]
    4464:	bl	115c <print_expression>
    4468:	ldr	r1, [fp, #-16]
    446c:	movw	r2, #0
    4470:	movt	r2, #0
    4474:	str	r0, [sp, #172]	; 0xac
    4478:	mov	r0, r2
    447c:	blx	r1
    4480:	ldr	r1, [fp, #-12]
    4484:	ldr	r1, [r1, #20]
    4488:	ldr	r2, [fp, #-16]
    448c:	ldr	r3, [fp, #-20]	; 0xffffffec
    4490:	ldr	ip, [fp, #-24]	; 0xffffffe8
    4494:	str	r0, [sp, #168]	; 0xa8
    4498:	mov	r0, r1
    449c:	mov	r1, r2
    44a0:	mov	r2, r3
    44a4:	mov	r3, ip
    44a8:	movw	ip, #4
    44ac:	str	ip, [sp]
    44b0:	bl	115c <print_expression>
    44b4:	ldr	r1, [fp, #8]
    44b8:	cmp	r1, #4
    44bc:	bge	44dc <print_expression+0x3380>
    44c0:	ldr	r0, [fp, #-16]
    44c4:	movw	r1, #0
    44c8:	movt	r1, #0
    44cc:	str	r0, [sp, #164]	; 0xa4
    44d0:	mov	r0, r1
    44d4:	ldr	r1, [sp, #164]	; 0xa4
    44d8:	blx	r1
    44dc:	b	4bc0 <print_expression+0x3a64>
    44e0:	ldr	r0, [fp, #-16]
    44e4:	ldr	r1, [fp, #-24]	; 0xffffffe8
    44e8:	cmp	r1, #0
    44ec:	movw	r1, #0
    44f0:	movne	r1, #1
    44f4:	tst	r1, #1
    44f8:	movw	r1, #0
    44fc:	movt	r1, #0
    4500:	movw	r2, #0
    4504:	movt	r2, #0
    4508:	movne	r1, r2
    450c:	str	r0, [sp, #160]	; 0xa0
    4510:	mov	r0, r1
    4514:	ldr	r1, [sp, #160]	; 0xa0
    4518:	blx	r1
    451c:	ldr	r1, [fp, #-12]
    4520:	ldr	r1, [r1, #16]
    4524:	ldr	r2, [fp, #-16]
    4528:	ldr	r3, [fp, #-20]	; 0xffffffec
    452c:	ldr	ip, [fp, #-24]	; 0xffffffe8
    4530:	str	r0, [sp, #156]	; 0x9c
    4534:	mov	r0, r1
    4538:	mov	r1, r2
    453c:	mov	r2, r3
    4540:	mov	r3, ip
    4544:	movw	ip, #15
    4548:	str	ip, [sp]
    454c:	bl	115c <print_expression>
    4550:	ldr	r1, [fp, #-16]
    4554:	movw	r2, #0
    4558:	movt	r2, #0
    455c:	str	r0, [sp, #152]	; 0x98
    4560:	mov	r0, r2
    4564:	blx	r1
    4568:	ldr	r1, [fp, #-12]
    456c:	ldr	r1, [r1, #20]
    4570:	ldr	r2, [fp, #-16]
    4574:	ldr	r3, [fp, #-20]	; 0xffffffec
    4578:	ldr	ip, [fp, #-24]	; 0xffffffe8
    457c:	str	r0, [sp, #148]	; 0x94
    4580:	mov	r0, r1
    4584:	mov	r1, r2
    4588:	mov	r2, r3
    458c:	mov	r3, ip
    4590:	movw	ip, #15
    4594:	str	ip, [sp]
    4598:	bl	115c <print_expression>
    459c:	ldr	r1, [fp, #-16]
    45a0:	movw	r2, #0
    45a4:	movt	r2, #0
    45a8:	str	r0, [sp, #144]	; 0x90
    45ac:	mov	r0, r2
    45b0:	blx	r1
    45b4:	b	4bc0 <print_expression+0x3a64>
    45b8:	ldr	r0, [fp, #-16]
    45bc:	ldr	r1, [fp, #-24]	; 0xffffffe8
    45c0:	cmp	r1, #0
    45c4:	movw	r1, #0
    45c8:	movne	r1, #1
    45cc:	tst	r1, #1
    45d0:	movw	r1, #0
    45d4:	movt	r1, #0
    45d8:	movw	r2, #0
    45dc:	movt	r2, #0
    45e0:	movne	r1, r2
    45e4:	str	r0, [sp, #140]	; 0x8c
    45e8:	mov	r0, r1
    45ec:	ldr	r1, [sp, #140]	; 0x8c
    45f0:	blx	r1
    45f4:	ldr	r1, [fp, #-12]
    45f8:	ldr	r1, [r1, #16]
    45fc:	ldr	r2, [fp, #-16]
    4600:	ldr	r3, [fp, #-20]	; 0xffffffec
    4604:	ldr	ip, [fp, #-24]	; 0xffffffe8
    4608:	str	r0, [sp, #136]	; 0x88
    460c:	mov	r0, r1
    4610:	mov	r1, r2
    4614:	mov	r2, r3
    4618:	mov	r3, ip
    461c:	movw	ip, #15
    4620:	str	ip, [sp]
    4624:	bl	115c <print_expression>
    4628:	ldr	r1, [fp, #-16]
    462c:	movw	r2, #0
    4630:	movt	r2, #0
    4634:	str	r0, [sp, #132]	; 0x84
    4638:	mov	r0, r2
    463c:	blx	r1
    4640:	b	4bc0 <print_expression+0x3a64>
    4644:	ldr	r0, [fp, #-16]
    4648:	ldr	r1, [fp, #-24]	; 0xffffffe8
    464c:	cmp	r1, #0
    4650:	movw	r1, #0
    4654:	movne	r1, #1
    4658:	tst	r1, #1
    465c:	movw	r1, #0
    4660:	movt	r1, #0
    4664:	movw	r2, #0
    4668:	movt	r2, #0
    466c:	movne	r1, r2
    4670:	str	r0, [sp, #128]	; 0x80
    4674:	mov	r0, r1
    4678:	ldr	r1, [sp, #128]	; 0x80
    467c:	blx	r1
    4680:	ldr	r1, [fp, #-12]
    4684:	ldr	r1, [r1, #16]
    4688:	ldr	r2, [fp, #-16]
    468c:	ldr	r3, [fp, #-20]	; 0xffffffec
    4690:	ldr	ip, [fp, #-24]	; 0xffffffe8
    4694:	str	r0, [sp, #124]	; 0x7c
    4698:	mov	r0, r1
    469c:	mov	r1, r2
    46a0:	mov	r2, r3
    46a4:	mov	r3, ip
    46a8:	movw	ip, #15
    46ac:	str	ip, [sp]
    46b0:	bl	115c <print_expression>
    46b4:	ldr	r1, [fp, #-16]
    46b8:	movw	r2, #0
    46bc:	movt	r2, #0
    46c0:	str	r0, [sp, #120]	; 0x78
    46c4:	mov	r0, r2
    46c8:	blx	r1
    46cc:	ldr	r1, [fp, #-12]
    46d0:	ldr	r1, [r1, #20]
    46d4:	ldr	r2, [fp, #-16]
    46d8:	ldr	r3, [fp, #-20]	; 0xffffffec
    46dc:	ldr	ip, [fp, #-24]	; 0xffffffe8
    46e0:	str	r0, [sp, #116]	; 0x74
    46e4:	mov	r0, r1
    46e8:	mov	r1, r2
    46ec:	mov	r2, r3
    46f0:	mov	r3, ip
    46f4:	movw	ip, #15
    46f8:	str	ip, [sp]
    46fc:	bl	115c <print_expression>
    4700:	ldr	r1, [fp, #-16]
    4704:	movw	r2, #0
    4708:	movt	r2, #0
    470c:	str	r0, [sp, #112]	; 0x70
    4710:	mov	r0, r2
    4714:	blx	r1
    4718:	b	4bc0 <print_expression+0x3a64>
    471c:	ldr	r0, [fp, #-16]
    4720:	ldr	r1, [fp, #-24]	; 0xffffffe8
    4724:	cmp	r1, #0
    4728:	movw	r1, #0
    472c:	movne	r1, #1
    4730:	tst	r1, #1
    4734:	movw	r1, #0
    4738:	movt	r1, #0
    473c:	movw	r2, #0
    4740:	movt	r2, #0
    4744:	movne	r1, r2
    4748:	ldr	r2, [fp, #-12]
    474c:	ldr	r2, [r2, #12]
    4750:	str	r0, [sp, #108]	; 0x6c
    4754:	mov	r0, r1
    4758:	mov	r1, r2
    475c:	ldr	r2, [sp, #108]	; 0x6c
    4760:	blx	r2
    4764:	ldr	r1, [fp, #-12]
    4768:	ldr	r1, [r1, #16]
    476c:	ldr	r2, [fp, #-16]
    4770:	ldr	r3, [fp, #-20]	; 0xffffffec
    4774:	ldr	ip, [fp, #-24]	; 0xffffffe8
    4778:	str	r0, [sp, #104]	; 0x68
    477c:	mov	r0, r1
    4780:	mov	r1, r2
    4784:	mov	r2, r3
    4788:	mov	r3, ip
    478c:	movw	ip, #15
    4790:	str	ip, [sp]
    4794:	bl	115c <print_expression>
    4798:	ldr	r1, [fp, #-16]
    479c:	movw	r2, #0
    47a0:	movt	r2, #0
    47a4:	str	r0, [sp, #100]	; 0x64
    47a8:	mov	r0, r2
    47ac:	blx	r1
    47b0:	b	4bc0 <print_expression+0x3a64>
    47b4:	ldr	r0, [fp, #-16]
    47b8:	ldr	r1, [fp, #-24]	; 0xffffffe8
    47bc:	cmp	r1, #0
    47c0:	movw	r1, #0
    47c4:	movne	r1, #1
    47c8:	tst	r1, #1
    47cc:	movw	r1, #0
    47d0:	movt	r1, #0
    47d4:	movw	r2, #0
    47d8:	movt	r2, #0
    47dc:	movne	r1, r2
    47e0:	ldr	r2, [fp, #-12]
    47e4:	ldr	r2, [r2, #12]
    47e8:	str	r0, [sp, #96]	; 0x60
    47ec:	mov	r0, r1
    47f0:	mov	r1, r2
    47f4:	ldr	r2, [sp, #96]	; 0x60
    47f8:	blx	r2
    47fc:	ldr	r1, [fp, #-12]
    4800:	ldr	r1, [r1, #16]
    4804:	ldr	r2, [fp, #-16]
    4808:	ldr	r3, [fp, #-20]	; 0xffffffec
    480c:	ldr	ip, [fp, #-24]	; 0xffffffe8
    4810:	str	r0, [sp, #92]	; 0x5c
    4814:	mov	r0, r1
    4818:	mov	r1, r2
    481c:	mov	r2, r3
    4820:	mov	r3, ip
    4824:	movw	ip, #15
    4828:	str	ip, [sp]
    482c:	bl	115c <print_expression>
    4830:	ldr	r1, [fp, #-16]
    4834:	movw	r2, #0
    4838:	movt	r2, #0
    483c:	str	r0, [sp, #88]	; 0x58
    4840:	mov	r0, r2
    4844:	blx	r1
    4848:	b	4bc0 <print_expression+0x3a64>
    484c:	ldr	r0, [fp, #-16]
    4850:	ldr	r1, [fp, #-24]	; 0xffffffe8
    4854:	cmp	r1, #0
    4858:	movw	r1, #0
    485c:	movne	r1, #1
    4860:	tst	r1, #1
    4864:	movw	r1, #0
    4868:	movt	r1, #0
    486c:	movw	r2, #0
    4870:	movt	r2, #0
    4874:	movne	r1, r2
    4878:	ldr	r2, [fp, #-12]
    487c:	ldr	r2, [r2, #12]
    4880:	str	r0, [sp, #84]	; 0x54
    4884:	mov	r0, r1
    4888:	mov	r1, r2
    488c:	ldr	r2, [sp, #84]	; 0x54
    4890:	blx	r2
    4894:	ldr	r1, [fp, #-12]
    4898:	ldr	r1, [r1, #16]
    489c:	movw	r2, #0
    48a0:	cmp	r1, r2
    48a4:	beq	4910 <print_expression+0x37b4>
    48a8:	ldr	r0, [fp, #-16]
    48ac:	movw	r1, #0
    48b0:	movt	r1, #0
    48b4:	str	r0, [sp, #80]	; 0x50
    48b8:	mov	r0, r1
    48bc:	ldr	r1, [sp, #80]	; 0x50
    48c0:	blx	r1
    48c4:	ldr	r1, [fp, #-12]
    48c8:	ldr	r1, [r1, #16]
    48cc:	ldr	r2, [fp, #-16]
    48d0:	ldr	r3, [fp, #-20]	; 0xffffffec
    48d4:	ldr	ip, [fp, #-24]	; 0xffffffe8
    48d8:	str	r0, [sp, #76]	; 0x4c
    48dc:	mov	r0, r1
    48e0:	mov	r1, r2
    48e4:	mov	r2, r3
    48e8:	mov	r3, ip
    48ec:	movw	ip, #15
    48f0:	str	ip, [sp]
    48f4:	bl	115c <print_expression>
    48f8:	ldr	r1, [fp, #-16]
    48fc:	movw	r2, #0
    4900:	movt	r2, #0
    4904:	str	r0, [sp, #72]	; 0x48
    4908:	mov	r0, r2
    490c:	blx	r1
    4910:	ldr	r0, [fp, #-16]
    4914:	movw	r1, #0
    4918:	movt	r1, #0
    491c:	str	r0, [sp, #68]	; 0x44
    4920:	mov	r0, r1
    4924:	ldr	r1, [sp, #68]	; 0x44
    4928:	blx	r1
    492c:	ldr	r1, [fp, #-12]
    4930:	ldr	r1, [r1, #20]
    4934:	ldr	r2, [fp, #-16]
    4938:	ldr	r3, [fp, #-20]	; 0xffffffec
    493c:	ldr	ip, [fp, #-24]	; 0xffffffe8
    4940:	str	r0, [sp, #64]	; 0x40
    4944:	mov	r0, r1
    4948:	mov	r1, r2
    494c:	mov	r2, r3
    4950:	mov	r3, ip
    4954:	movw	ip, #15
    4958:	str	ip, [sp]
    495c:	bl	115c <print_expression>
    4960:	b	4bc0 <print_expression+0x3a64>
    4964:	ldr	r0, [fp, #-16]
    4968:	ldr	r1, [fp, #-12]
    496c:	ldr	r1, [r1, #12]
    4970:	movw	r2, #0
    4974:	movt	r2, #0
    4978:	str	r0, [sp, #60]	; 0x3c
    497c:	mov	r0, r2
    4980:	ldr	r2, [sp, #60]	; 0x3c
    4984:	blx	r2
    4988:	ldr	r1, [fp, #-12]
    498c:	ldr	r1, [r1, #16]
    4990:	movw	r2, #0
    4994:	cmp	r1, r2
    4998:	beq	4a04 <print_expression+0x38a8>
    499c:	ldr	r0, [fp, #-16]
    49a0:	movw	r1, #0
    49a4:	movt	r1, #0
    49a8:	str	r0, [sp, #56]	; 0x38
    49ac:	mov	r0, r1
    49b0:	ldr	r1, [sp, #56]	; 0x38
    49b4:	blx	r1
    49b8:	ldr	r1, [fp, #-12]
    49bc:	ldr	r1, [r1, #16]
    49c0:	ldr	r2, [fp, #-16]
    49c4:	ldr	r3, [fp, #-20]	; 0xffffffec
    49c8:	ldr	ip, [fp, #-24]	; 0xffffffe8
    49cc:	str	r0, [sp, #52]	; 0x34
    49d0:	mov	r0, r1
    49d4:	mov	r1, r2
    49d8:	mov	r2, r3
    49dc:	mov	r3, ip
    49e0:	movw	ip, #15
    49e4:	str	ip, [sp]
    49e8:	bl	115c <print_expression>
    49ec:	ldr	r1, [fp, #-16]
    49f0:	movw	r2, #0
    49f4:	movt	r2, #0
    49f8:	str	r0, [sp, #48]	; 0x30
    49fc:	mov	r0, r2
    4a00:	blx	r1
    4a04:	b	4bc0 <print_expression+0x3a64>
    4a08:	ldr	r0, [fp, #-16]
    4a0c:	ldr	r1, [fp, #-24]	; 0xffffffe8
    4a10:	cmp	r1, #0
    4a14:	movw	r1, #0
    4a18:	movne	r1, #1
    4a1c:	tst	r1, #1
    4a20:	movw	r1, #0
    4a24:	movt	r1, #0
    4a28:	movw	r2, #0
    4a2c:	movt	r2, #0
    4a30:	movne	r1, r2
    4a34:	str	r0, [sp, #44]	; 0x2c
    4a38:	mov	r0, r1
    4a3c:	ldr	r1, [sp, #44]	; 0x2c
    4a40:	blx	r1
    4a44:	ldr	r1, [fp, #-12]
    4a48:	ldr	r1, [r1, #16]
    4a4c:	ldr	r2, [fp, #-16]
    4a50:	ldr	r3, [fp, #-20]	; 0xffffffec
    4a54:	ldr	ip, [fp, #-24]	; 0xffffffe8
    4a58:	str	r0, [sp, #40]	; 0x28
    4a5c:	mov	r0, r1
    4a60:	mov	r1, r2
    4a64:	mov	r2, r3
    4a68:	mov	r3, ip
    4a6c:	movw	ip, #15
    4a70:	str	ip, [sp]
    4a74:	bl	115c <print_expression>
    4a78:	ldr	r1, [fp, #-16]
    4a7c:	movw	r2, #0
    4a80:	movt	r2, #0
    4a84:	str	r0, [sp, #36]	; 0x24
    4a88:	mov	r0, r2
    4a8c:	blx	r1
    4a90:	ldr	r1, [fp, #-12]
    4a94:	ldr	r1, [r1, #20]
    4a98:	ldr	r2, [fp, #-16]
    4a9c:	ldr	r3, [fp, #-20]	; 0xffffffec
    4aa0:	ldr	ip, [fp, #-24]	; 0xffffffe8
    4aa4:	str	r0, [sp, #32]
    4aa8:	mov	r0, r1
    4aac:	mov	r1, r2
    4ab0:	mov	r2, r3
    4ab4:	mov	r3, ip
    4ab8:	movw	ip, #15
    4abc:	str	ip, [sp]
    4ac0:	bl	115c <print_expression>
    4ac4:	ldr	r1, [fp, #-16]
    4ac8:	movw	r2, #0
    4acc:	movt	r2, #0
    4ad0:	str	r0, [sp, #28]
    4ad4:	mov	r0, r2
    4ad8:	blx	r1
    4adc:	b	4bc0 <print_expression+0x3a64>
    4ae0:	ldr	r0, [fp, #-16]
    4ae4:	ldr	r1, [fp, #-24]	; 0xffffffe8
    4ae8:	cmp	r1, #0
    4aec:	movw	r1, #0
    4af0:	movne	r1, #1
    4af4:	tst	r1, #1
    4af8:	movw	r1, #0
    4afc:	movt	r1, #0
    4b00:	movw	r2, #0
    4b04:	movt	r2, #0
    4b08:	movne	r1, r2
    4b0c:	ldr	r2, [fp, #-12]
    4b10:	ldr	r2, [r2, #12]
    4b14:	str	r0, [sp, #24]
    4b18:	mov	r0, r1
    4b1c:	mov	r1, r2
    4b20:	ldr	r2, [sp, #24]
    4b24:	blx	r2
    4b28:	ldr	r1, [fp, #-12]
    4b2c:	ldr	r1, [r1, #16]
    4b30:	ldr	r2, [fp, #-16]
    4b34:	ldr	r3, [fp, #-20]	; 0xffffffec
    4b38:	ldr	ip, [fp, #-24]	; 0xffffffe8
    4b3c:	str	r0, [sp, #20]
    4b40:	mov	r0, r1
    4b44:	mov	r1, r2
    4b48:	mov	r2, r3
    4b4c:	mov	r3, ip
    4b50:	movw	ip, #15
    4b54:	str	ip, [sp]
    4b58:	bl	115c <print_expression>
    4b5c:	ldr	r1, [fp, #-16]
    4b60:	movw	r2, #0
    4b64:	movt	r2, #0
    4b68:	str	r0, [sp, #16]
    4b6c:	mov	r0, r2
    4b70:	blx	r1
    4b74:	ldr	r1, [fp, #-12]
    4b78:	ldr	r1, [r1, #20]
    4b7c:	ldr	r2, [fp, #-16]
    4b80:	ldr	r3, [fp, #-20]	; 0xffffffec
    4b84:	ldr	ip, [fp, #-24]	; 0xffffffe8
    4b88:	str	r0, [sp, #12]
    4b8c:	mov	r0, r1
    4b90:	mov	r1, r2
    4b94:	mov	r2, r3
    4b98:	mov	r3, ip
    4b9c:	movw	ip, #15
    4ba0:	str	ip, [sp]
    4ba4:	bl	115c <print_expression>
    4ba8:	ldr	r1, [fp, #-16]
    4bac:	movw	r2, #0
    4bb0:	movt	r2, #0
    4bb4:	str	r0, [sp, #8]
    4bb8:	mov	r0, r2
    4bbc:	blx	r1
    4bc0:	movw	r0, #0
    4bc4:	sub	sp, fp, #8
    4bc8:	pop	{r4, r5, fp, pc}

00004bcc <coda_expression_print_xml>:
    4bcc:	push	{fp, lr}
    4bd0:	mov	fp, sp
    4bd4:	sub	sp, sp, #16
    4bd8:	str	r0, [fp, #-4]
    4bdc:	str	r1, [sp, #8]
    4be0:	ldr	r0, [fp, #-4]
    4be4:	ldr	r1, [sp, #8]
    4be8:	movw	r2, #1
    4bec:	movw	r3, #0
    4bf0:	movw	ip, #15
    4bf4:	str	ip, [sp]
    4bf8:	bl	115c <print_expression>
    4bfc:	mov	sp, fp
    4c00:	pop	{fp, pc}

00004c04 <coda_expression_print>:
    4c04:	push	{fp, lr}
    4c08:	mov	fp, sp
    4c0c:	sub	sp, sp, #16
    4c10:	str	r0, [fp, #-4]
    4c14:	str	r1, [sp, #8]
    4c18:	ldr	r0, [fp, #-4]
    4c1c:	ldr	r1, [sp, #8]
    4c20:	movw	r2, #0
    4c24:	str	r2, [sp, #4]
    4c28:	ldr	r3, [sp, #4]
    4c2c:	movw	ip, #15
    4c30:	str	ip, [sp]
    4c34:	bl	115c <print_expression>
    4c38:	mov	sp, fp
    4c3c:	pop	{fp, pc}

00004c40 <coda_expression_get_type_name>:
    4c40:	sub	sp, sp, #12
    4c44:	str	r0, [sp, #4]
    4c48:	ldr	r0, [sp, #4]
    4c4c:	cmp	r0, #5
    4c50:	str	r0, [sp]
    4c54:	bhi	4ce0 <coda_expression_get_type_name+0xa0>
    4c58:	add	r0, pc, #8
    4c5c:	ldr	r1, [sp]
    4c60:	ldr	r0, [r0, r1, lsl #2]
    4c64:	mov	pc, r0
    4c68:	.word	0x00004c80
    4c6c:	.word	0x00004c90
    4c70:	.word	0x00004ca0
    4c74:	.word	0x00004cb0
    4c78:	.word	0x00004cc0
    4c7c:	.word	0x00004cd0
    4c80:	movw	r0, #0
    4c84:	movt	r0, #0
    4c88:	str	r0, [sp, #8]
    4c8c:	b	4cec <coda_expression_get_type_name+0xac>
    4c90:	movw	r0, #0
    4c94:	movt	r0, #0
    4c98:	str	r0, [sp, #8]
    4c9c:	b	4cec <coda_expression_get_type_name+0xac>
    4ca0:	movw	r0, #0
    4ca4:	movt	r0, #0
    4ca8:	str	r0, [sp, #8]
    4cac:	b	4cec <coda_expression_get_type_name+0xac>
    4cb0:	movw	r0, #0
    4cb4:	movt	r0, #0
    4cb8:	str	r0, [sp, #8]
    4cbc:	b	4cec <coda_expression_get_type_name+0xac>
    4cc0:	movw	r0, #0
    4cc4:	movt	r0, #0
    4cc8:	str	r0, [sp, #8]
    4ccc:	b	4cec <coda_expression_get_type_name+0xac>
    4cd0:	movw	r0, #0
    4cd4:	movt	r0, #0
    4cd8:	str	r0, [sp, #8]
    4cdc:	b	4cec <coda_expression_get_type_name+0xac>
    4ce0:	movw	r0, #0
    4ce4:	movt	r0, #0
    4ce8:	str	r0, [sp, #8]
    4cec:	ldr	r0, [sp, #8]
    4cf0:	add	sp, sp, #12
    4cf4:	bx	lr

00004cf8 <coda_expression_is_constant>:
    4cf8:	push	{fp, lr}
    4cfc:	mov	fp, sp
    4d00:	sub	sp, sp, #8
    4d04:	str	r0, [sp]
    4d08:	ldr	r0, [sp]
    4d0c:	movw	r1, #0
    4d10:	cmp	r0, r1
    4d14:	bne	4d40 <coda_expression_is_constant+0x48>
    4d18:	mvn	r0, #99	; 0x63
    4d1c:	movw	r1, #0
    4d20:	movt	r1, #0
    4d24:	movw	r2, #0
    4d28:	movt	r2, #0
    4d2c:	movw	r3, #4969	; 0x1369
    4d30:	bl	0 <coda_set_error>
    4d34:	mvn	r0, #0
    4d38:	str	r0, [sp, #4]
    4d3c:	b	4d4c <coda_expression_is_constant+0x54>
    4d40:	ldr	r0, [sp]
    4d44:	ldr	r0, [r0, #8]
    4d48:	str	r0, [sp, #4]
    4d4c:	ldr	r0, [sp, #4]
    4d50:	mov	sp, fp
    4d54:	pop	{fp, pc}

00004d58 <coda_expression_is_equal>:
    4d58:	push	{fp, lr}
    4d5c:	mov	fp, sp
    4d60:	sub	sp, sp, #32
    4d64:	str	r0, [fp, #-8]
    4d68:	str	r1, [fp, #-12]
    4d6c:	ldr	r0, [fp, #-8]
    4d70:	movw	r1, #0
    4d74:	cmp	r0, r1
    4d78:	bne	4d9c <coda_expression_is_equal+0x44>
    4d7c:	ldr	r0, [fp, #-12]
    4d80:	movw	r1, #0
    4d84:	cmp	r0, r1
    4d88:	movw	r0, #0
    4d8c:	moveq	r0, #1
    4d90:	and	r0, r0, #1
    4d94:	str	r0, [fp, #-4]
    4d98:	b	4ffc <coda_expression_is_equal+0x2a4>
    4d9c:	ldr	r0, [fp, #-12]
    4da0:	movw	r1, #0
    4da4:	cmp	r0, r1
    4da8:	bne	4db8 <coda_expression_is_equal+0x60>
    4dac:	movw	r0, #0
    4db0:	str	r0, [fp, #-4]
    4db4:	b	4ffc <coda_expression_is_equal+0x2a4>
    4db8:	ldr	r0, [fp, #-8]
    4dbc:	ldr	r0, [r0]
    4dc0:	ldr	r1, [fp, #-12]
    4dc4:	ldr	r1, [r1]
    4dc8:	cmp	r0, r1
    4dcc:	beq	4ddc <coda_expression_is_equal+0x84>
    4dd0:	movw	r0, #0
    4dd4:	str	r0, [fp, #-4]
    4dd8:	b	4ffc <coda_expression_is_equal+0x2a4>
    4ddc:	ldr	r0, [fp, #-8]
    4de0:	ldr	r0, [r0]
    4de4:	sub	r0, r0, #18
    4de8:	cmp	r0, #4
    4dec:	str	r0, [sp, #4]
    4df0:	bhi	4efc <coda_expression_is_equal+0x1a4>
    4df4:	add	r0, pc, #8
    4df8:	ldr	r1, [sp, #4]
    4dfc:	ldr	r0, [r0, r1, lsl #2]
    4e00:	mov	pc, r0
    4e04:	.word	0x00004e18
    4e08:	.word	0x00004e40
    4e0c:	.word	0x00004e6c
    4e10:	.word	0x00004ea4
    4e14:	.word	0x00004ea4
    4e18:	ldr	r0, [fp, #-8]
    4e1c:	ldr	r0, [r0, #12]
    4e20:	ldr	r1, [fp, #-12]
    4e24:	ldr	r1, [r1, #12]
    4e28:	cmp	r0, r1
    4e2c:	movw	r0, #0
    4e30:	moveq	r0, #1
    4e34:	and	r0, r0, #1
    4e38:	str	r0, [fp, #-4]
    4e3c:	b	4ffc <coda_expression_is_equal+0x2a4>
    4e40:	ldr	r0, [fp, #-8]
    4e44:	vldr	d16, [r0, #16]
    4e48:	ldr	r0, [fp, #-12]
    4e4c:	vldr	d17, [r0, #16]
    4e50:	vcmp.f64	d16, d17
    4e54:	vmrs	APSR_nzcv, fpscr
    4e58:	movw	r0, #0
    4e5c:	moveq	r0, #1
    4e60:	and	r0, r0, #1
    4e64:	str	r0, [fp, #-4]
    4e68:	b	4ffc <coda_expression_is_equal+0x2a4>
    4e6c:	ldr	r0, [fp, #-8]
    4e70:	ldr	r1, [r0, #16]
    4e74:	ldr	r0, [r0, #20]
    4e78:	ldr	r2, [fp, #-12]
    4e7c:	ldr	r3, [r2, #16]
    4e80:	ldr	r2, [r2, #20]
    4e84:	eor	r0, r0, r2
    4e88:	eor	r1, r1, r3
    4e8c:	orr	r0, r1, r0
    4e90:	clz	r0, r0
    4e94:	lsr	r0, r0, #5
    4e98:	and	r0, r0, #1
    4e9c:	str	r0, [fp, #-4]
    4ea0:	b	4ffc <coda_expression_is_equal+0x2a4>
    4ea4:	ldr	r0, [fp, #-8]
    4ea8:	ldr	r0, [r0, #12]
    4eac:	ldr	r1, [fp, #-12]
    4eb0:	ldr	r1, [r1, #12]
    4eb4:	cmp	r0, r1
    4eb8:	beq	4ec8 <coda_expression_is_equal+0x170>
    4ebc:	movw	r0, #0
    4ec0:	str	r0, [fp, #-4]
    4ec4:	b	4ffc <coda_expression_is_equal+0x2a4>
    4ec8:	ldr	r0, [fp, #-8]
    4ecc:	ldr	r0, [r0, #16]
    4ed0:	ldr	r1, [fp, #-12]
    4ed4:	ldr	r1, [r1, #16]
    4ed8:	ldr	r2, [fp, #-8]
    4edc:	ldr	r2, [r2, #12]
    4ee0:	bl	0 <memcmp>
    4ee4:	cmp	r0, #0
    4ee8:	movw	r0, #0
    4eec:	moveq	r0, #1
    4ef0:	and	r0, r0, #1
    4ef4:	str	r0, [fp, #-4]
    4ef8:	b	4ffc <coda_expression_is_equal+0x2a4>
    4efc:	ldr	r0, [fp, #-8]
    4f00:	str	r0, [sp, #16]
    4f04:	ldr	r0, [fp, #-12]
    4f08:	str	r0, [sp, #12]
    4f0c:	ldr	r0, [sp, #16]
    4f10:	ldr	r0, [r0, #12]
    4f14:	movw	r1, #0
    4f18:	cmp	r0, r1
    4f1c:	beq	4f6c <coda_expression_is_equal+0x214>
    4f20:	ldr	r0, [sp, #12]
    4f24:	ldr	r0, [r0, #12]
    4f28:	movw	r1, #0
    4f2c:	cmp	r0, r1
    4f30:	bne	4f40 <coda_expression_is_equal+0x1e8>
    4f34:	movw	r0, #0
    4f38:	str	r0, [fp, #-4]
    4f3c:	b	4ffc <coda_expression_is_equal+0x2a4>
    4f40:	ldr	r0, [sp, #16]
    4f44:	ldr	r0, [r0, #12]
    4f48:	ldr	r1, [sp, #12]
    4f4c:	ldr	r1, [r1, #12]
    4f50:	bl	0 <strcmp>
    4f54:	cmp	r0, #0
    4f58:	beq	4f68 <coda_expression_is_equal+0x210>
    4f5c:	movw	r0, #0
    4f60:	str	r0, [fp, #-4]
    4f64:	b	4ffc <coda_expression_is_equal+0x2a4>
    4f68:	b	4f90 <coda_expression_is_equal+0x238>
    4f6c:	ldr	r0, [sp, #12]
    4f70:	ldr	r0, [r0, #12]
    4f74:	movw	r1, #0
    4f78:	cmp	r0, r1
    4f7c:	beq	4f8c <coda_expression_is_equal+0x234>
    4f80:	movw	r0, #0
    4f84:	str	r0, [fp, #-4]
    4f88:	b	4ffc <coda_expression_is_equal+0x2a4>
    4f8c:	b	4f90 <coda_expression_is_equal+0x238>
    4f90:	movw	r0, #0
    4f94:	str	r0, [sp, #8]
    4f98:	ldr	r0, [sp, #8]
    4f9c:	cmp	r0, #4
    4fa0:	bge	4ff0 <coda_expression_is_equal+0x298>
    4fa4:	ldr	r0, [sp, #16]
    4fa8:	ldr	r1, [sp, #8]
    4fac:	add	r0, r0, r1, lsl #2
    4fb0:	ldr	r0, [r0, #16]
    4fb4:	ldr	r2, [sp, #12]
    4fb8:	add	r2, r2, #16
    4fbc:	add	r1, r2, r1, lsl #2
    4fc0:	ldr	r1, [r1]
    4fc4:	bl	4d58 <coda_expression_is_equal>
    4fc8:	cmp	r0, #0
    4fcc:	bne	4fdc <coda_expression_is_equal+0x284>
    4fd0:	movw	r0, #0
    4fd4:	str	r0, [fp, #-4]
    4fd8:	b	4ffc <coda_expression_is_equal+0x2a4>
    4fdc:	b	4fe0 <coda_expression_is_equal+0x288>
    4fe0:	ldr	r0, [sp, #8]
    4fe4:	add	r0, r0, #1
    4fe8:	str	r0, [sp, #8]
    4fec:	b	4f98 <coda_expression_is_equal+0x240>
    4ff0:	b	4ff4 <coda_expression_is_equal+0x29c>
    4ff4:	movw	r0, #1
    4ff8:	str	r0, [fp, #-4]
    4ffc:	ldr	r0, [fp, #-4]
    5000:	mov	sp, fp
    5004:	pop	{fp, pc}

00005008 <coda_expression_get_type>:
    5008:	push	{fp, lr}
    500c:	mov	fp, sp
    5010:	sub	sp, sp, #16
    5014:	str	r0, [sp, #8]
    5018:	str	r1, [sp, #4]
    501c:	ldr	r0, [sp, #8]
    5020:	movw	r1, #0
    5024:	cmp	r0, r1
    5028:	bne	5054 <coda_expression_get_type+0x4c>
    502c:	mvn	r0, #99	; 0x63
    5030:	movw	r1, #0
    5034:	movt	r1, #0
    5038:	movw	r2, #0
    503c:	movt	r2, #0
    5040:	movw	r3, #5071	; 0x13cf
    5044:	bl	0 <coda_set_error>
    5048:	mvn	r0, #0
    504c:	str	r0, [fp, #-4]
    5050:	b	506c <coda_expression_get_type+0x64>
    5054:	ldr	r0, [sp, #8]
    5058:	ldr	r0, [r0, #4]
    505c:	ldr	r1, [sp, #4]
    5060:	str	r0, [r1]
    5064:	movw	r0, #0
    5068:	str	r0, [fp, #-4]
    506c:	ldr	r0, [fp, #-4]
    5070:	mov	sp, fp
    5074:	pop	{fp, pc}

00005078 <coda_expression_eval_bool>:
    5078:	push	{r4, r5, fp, lr}
    507c:	add	fp, sp, #8
    5080:	sub	sp, sp, #584	; 0x248
    5084:	str	r0, [fp, #-16]
    5088:	str	r1, [fp, #-20]	; 0xffffffec
    508c:	str	r2, [fp, #-24]	; 0xffffffe8
    5090:	ldr	r0, [fp, #-16]
    5094:	ldr	r0, [r0, #4]
    5098:	cmp	r0, #0
    509c:	beq	50bc <coda_expression_eval_bool+0x44>
    50a0:	mvn	r0, #99	; 0x63
    50a4:	movw	r1, #0
    50a8:	movt	r1, #0
    50ac:	bl	0 <coda_set_error>
    50b0:	mvn	r0, #0
    50b4:	str	r0, [fp, #-12]
    50b8:	b	5164 <coda_expression_eval_bool+0xec>
    50bc:	ldr	r0, [fp, #-20]	; 0xffffffec
    50c0:	movw	r1, #0
    50c4:	cmp	r0, r1
    50c8:	bne	50f8 <coda_expression_eval_bool+0x80>
    50cc:	ldr	r0, [fp, #-16]
    50d0:	ldr	r0, [r0, #8]
    50d4:	cmp	r0, #0
    50d8:	bne	50f8 <coda_expression_eval_bool+0x80>
    50dc:	mvn	r0, #99	; 0x63
    50e0:	movw	r1, #0
    50e4:	movt	r1, #0
    50e8:	bl	0 <coda_set_error>
    50ec:	mvn	r0, #0
    50f0:	str	r0, [fp, #-12]
    50f4:	b	5164 <coda_expression_eval_bool+0xec>
    50f8:	ldr	r1, [fp, #-20]	; 0xffffffec
    50fc:	mov	r0, sp
    5100:	bl	c0c <init_eval_info>
    5104:	ldr	r1, [fp, #-16]
    5108:	ldr	r2, [fp, #-24]	; 0xffffffe8
    510c:	mov	r0, sp
    5110:	bl	5170 <eval_boolean>
    5114:	cmp	r0, #0
    5118:	beq	515c <coda_expression_eval_bool+0xe4>
    511c:	ldr	r0, [fp, #-20]	; 0xffffffec
    5120:	movw	r1, #0
    5124:	cmp	r0, r1
    5128:	beq	5150 <coda_expression_eval_bool+0xd8>
    512c:	ldr	r0, [fp, #-20]	; 0xffffffec
    5130:	mov	r1, sp
    5134:	add	r1, r1, #8
    5138:	bl	0 <coda_cursor_compare>
    513c:	cmp	r0, #0
    5140:	beq	5150 <coda_expression_eval_bool+0xd8>
    5144:	mov	r0, sp
    5148:	add	r0, r0, #8
    514c:	bl	0 <coda_cursor_add_to_error_message>
    5150:	mvn	r0, #0
    5154:	str	r0, [fp, #-12]
    5158:	b	5164 <coda_expression_eval_bool+0xec>
    515c:	movw	r0, #0
    5160:	str	r0, [fp, #-12]
    5164:	ldr	r0, [fp, #-12]
    5168:	sub	sp, fp, #8
    516c:	pop	{r4, r5, fp, pc}

00005170 <eval_boolean>:
    5170:	push	{r4, sl, fp, lr}
    5174:	add	fp, sp, #8
    5178:	sub	sp, sp, #792	; 0x318
    517c:	sub	sp, sp, #2048	; 0x800
    5180:	str	r0, [fp, #-16]
    5184:	str	r1, [fp, #-20]	; 0xffffffec
    5188:	str	r2, [fp, #-24]	; 0xffffffe8
    518c:	ldr	r0, [fp, #-20]	; 0xffffffec
    5190:	ldr	r0, [r0]
    5194:	cmp	r0, #18
    5198:	bne	51b8 <eval_boolean+0x48>
    519c:	ldr	r0, [fp, #-20]	; 0xffffffec
    51a0:	ldr	r0, [r0, #12]
    51a4:	ldr	r1, [fp, #-24]	; 0xffffffe8
    51a8:	str	r0, [r1]
    51ac:	movw	r0, #0
    51b0:	str	r0, [fp, #-12]
    51b4:	b	6e64 <eval_boolean+0x1cf4>
    51b8:	ldr	r0, [fp, #-20]	; 0xffffffec
    51bc:	str	r0, [fp, #-28]	; 0xffffffe4
    51c0:	ldr	r0, [fp, #-28]	; 0xffffffe4
    51c4:	ldr	r0, [r0]
    51c8:	sub	r0, r0, #4
    51cc:	cmp	r0, #82	; 0x52
    51d0:	str	r0, [sp, #64]	; 0x40
    51d4:	bhi	6e3c <eval_boolean+0x1ccc>
    51d8:	add	r0, pc, #8
    51dc:	ldr	r1, [sp, #64]	; 0x40
    51e0:	ldr	r0, [r0, r1, lsl #2]
    51e4:	mov	pc, r0
    51e8:	.word	0x000067a8
    51ec:	.word	0x00006e3c
    51f0:	.word	0x00006950
    51f4:	.word	0x00006e3c
    51f8:	.word	0x00006e3c
    51fc:	.word	0x00006e3c
    5200:	.word	0x00006e3c
    5204:	.word	0x00006cd8
    5208:	.word	0x00006e3c
    520c:	.word	0x00006e3c
    5210:	.word	0x00006e3c
    5214:	.word	0x00006e3c
    5218:	.word	0x00006e3c
    521c:	.word	0x00006e3c
    5220:	.word	0x00006e3c
    5224:	.word	0x00006e3c
    5228:	.word	0x00006e3c
    522c:	.word	0x00006e3c
    5230:	.word	0x00006e3c
    5234:	.word	0x00006e3c
    5238:	.word	0x00006e3c
    523c:	.word	0x00005334
    5240:	.word	0x000065f4
    5244:	.word	0x00006e3c
    5248:	.word	0x00006e3c
    524c:	.word	0x00006e3c
    5250:	.word	0x00006e3c
    5254:	.word	0x00006e3c
    5258:	.word	0x00006e3c
    525c:	.word	0x00006e3c
    5260:	.word	0x00006e3c
    5264:	.word	0x00006e3c
    5268:	.word	0x00006e3c
    526c:	.word	0x00006e3c
    5270:	.word	0x00006e3c
    5274:	.word	0x00006e3c
    5278:	.word	0x00005a20
    527c:	.word	0x000057d4
    5280:	.word	0x00006c48
    5284:	.word	0x00006e3c
    5288:	.word	0x00006e3c
    528c:	.word	0x00006e3c
    5290:	.word	0x00006274
    5294:	.word	0x000062ec
    5298:	.word	0x00006238
    529c:	.word	0x000062b0
    52a0:	.word	0x00006e3c
    52a4:	.word	0x00005eb8
    52a8:	.word	0x00005c6c
    52ac:	.word	0x00006158
    52b0:	.word	0x000061c8
    52b4:	.word	0x00006e3c
    52b8:	.word	0x00006e3c
    52bc:	.word	0x00006e3c
    52c0:	.word	0x00006e3c
    52c4:	.word	0x00006e3c
    52c8:	.word	0x00006e3c
    52cc:	.word	0x00005584
    52d0:	.word	0x00006104
    52d4:	.word	0x00006e3c
    52d8:	.word	0x00006e3c
    52dc:	.word	0x00006e3c
    52e0:	.word	0x00006e3c
    52e4:	.word	0x00006e3c
    52e8:	.word	0x00006e3c
    52ec:	.word	0x00006e3c
    52f0:	.word	0x00006e3c
    52f4:	.word	0x00006328
    52f8:	.word	0x00006e3c
    52fc:	.word	0x00006e3c
    5300:	.word	0x00006e3c
    5304:	.word	0x00006e3c
    5308:	.word	0x00006e3c
    530c:	.word	0x00006e3c
    5310:	.word	0x00006e3c
    5314:	.word	0x00006e3c
    5318:	.word	0x00006e3c
    531c:	.word	0x00006e3c
    5320:	.word	0x00006af4
    5324:	.word	0x00006e3c
    5328:	.word	0x00006e3c
    532c:	.word	0x00006e3c
    5330:	.word	0x00006d94
    5334:	ldr	r0, [fp, #-28]	; 0xffffffe4
    5338:	ldr	r0, [r0, #16]
    533c:	ldr	r0, [r0, #4]
    5340:	cmp	r0, #2
    5344:	beq	535c <eval_boolean+0x1ec>
    5348:	ldr	r0, [fp, #-28]	; 0xffffffe4
    534c:	ldr	r0, [r0, #20]
    5350:	ldr	r0, [r0, #4]
    5354:	cmp	r0, #2
    5358:	bne	53d4 <eval_boolean+0x264>
    535c:	ldr	r0, [fp, #-16]
    5360:	ldr	r1, [fp, #-28]	; 0xffffffe4
    5364:	ldr	r1, [r1, #16]
    5368:	sub	r2, fp, #40	; 0x28
    536c:	bl	9568 <eval_float>
    5370:	cmp	r0, #0
    5374:	beq	5384 <eval_boolean+0x214>
    5378:	mvn	r0, #0
    537c:	str	r0, [fp, #-12]
    5380:	b	6e64 <eval_boolean+0x1cf4>
    5384:	ldr	r0, [fp, #-16]
    5388:	ldr	r1, [fp, #-28]	; 0xffffffe4
    538c:	ldr	r1, [r1, #20]
    5390:	sub	r2, fp, #48	; 0x30
    5394:	bl	9568 <eval_float>
    5398:	cmp	r0, #0
    539c:	beq	53ac <eval_boolean+0x23c>
    53a0:	mvn	r0, #0
    53a4:	str	r0, [fp, #-12]
    53a8:	b	6e64 <eval_boolean+0x1cf4>
    53ac:	vldr	d16, [fp, #-40]	; 0xffffffd8
    53b0:	vldr	d17, [fp, #-48]	; 0xffffffd0
    53b4:	vcmp.f64	d16, d17
    53b8:	vmrs	APSR_nzcv, fpscr
    53bc:	movw	r0, #0
    53c0:	moveq	r0, #1
    53c4:	and	r0, r0, #1
    53c8:	ldr	r1, [fp, #-24]	; 0xffffffe8
    53cc:	str	r0, [r1]
    53d0:	b	5580 <eval_boolean+0x410>
    53d4:	ldr	r0, [fp, #-28]	; 0xffffffe4
    53d8:	ldr	r0, [r0, #16]
    53dc:	ldr	r0, [r0, #4]
    53e0:	cmp	r0, #1
    53e4:	bne	546c <eval_boolean+0x2fc>
    53e8:	ldr	r0, [fp, #-16]
    53ec:	ldr	r1, [fp, #-28]	; 0xffffffe4
    53f0:	ldr	r1, [r1, #16]
    53f4:	sub	r2, fp, #56	; 0x38
    53f8:	bl	6f70 <eval_integer>
    53fc:	cmp	r0, #0
    5400:	beq	5410 <eval_boolean+0x2a0>
    5404:	mvn	r0, #0
    5408:	str	r0, [fp, #-12]
    540c:	b	6e64 <eval_boolean+0x1cf4>
    5410:	ldr	r0, [fp, #-16]
    5414:	ldr	r1, [fp, #-28]	; 0xffffffe4
    5418:	ldr	r1, [r1, #20]
    541c:	sub	r2, fp, #64	; 0x40
    5420:	bl	6f70 <eval_integer>
    5424:	cmp	r0, #0
    5428:	beq	5438 <eval_boolean+0x2c8>
    542c:	mvn	r0, #0
    5430:	str	r0, [fp, #-12]
    5434:	b	6e64 <eval_boolean+0x1cf4>
    5438:	ldr	r0, [fp, #-56]	; 0xffffffc8
    543c:	ldr	r1, [fp, #-52]	; 0xffffffcc
    5440:	ldr	r2, [fp, #-64]	; 0xffffffc0
    5444:	ldr	r3, [fp, #-60]	; 0xffffffc4
    5448:	eor	r1, r1, r3
    544c:	eor	r0, r0, r2
    5450:	orr	r0, r0, r1
    5454:	clz	r0, r0
    5458:	lsr	r0, r0, #5
    545c:	and	r0, r0, #1
    5460:	ldr	r1, [fp, #-24]	; 0xffffffe8
    5464:	str	r0, [r1]
    5468:	b	557c <eval_boolean+0x40c>
    546c:	ldr	r0, [fp, #-28]	; 0xffffffe4
    5470:	ldr	r0, [r0, #16]
    5474:	ldr	r0, [r0, #4]
    5478:	cmp	r0, #3
    547c:	bne	5558 <eval_boolean+0x3e8>
    5480:	ldr	r0, [fp, #-16]
    5484:	ldr	r1, [fp, #-28]	; 0xffffffe4
    5488:	ldr	r1, [r1, #16]
    548c:	sub	r2, fp, #68	; 0x44
    5490:	sub	r3, fp, #76	; 0x4c
    5494:	sub	ip, fp, #84	; 0x54
    5498:	str	ip, [sp]
    549c:	bl	aacc <eval_string>
    54a0:	cmp	r0, #0
    54a4:	beq	54b4 <eval_boolean+0x344>
    54a8:	mvn	r0, #0
    54ac:	str	r0, [fp, #-12]
    54b0:	b	6e64 <eval_boolean+0x1cf4>
    54b4:	ldr	r0, [fp, #-16]
    54b8:	ldr	r1, [fp, #-28]	; 0xffffffe4
    54bc:	ldr	r1, [r1, #20]
    54c0:	sub	r2, fp, #72	; 0x48
    54c4:	sub	r3, fp, #80	; 0x50
    54c8:	sub	ip, fp, #88	; 0x58
    54cc:	str	ip, [sp]
    54d0:	bl	aacc <eval_string>
    54d4:	cmp	r0, #0
    54d8:	beq	54f0 <eval_boolean+0x380>
    54dc:	ldr	r0, [fp, #-84]	; 0xffffffac
    54e0:	bl	0 <free>
    54e4:	mvn	r0, #0
    54e8:	str	r0, [fp, #-12]
    54ec:	b	6e64 <eval_boolean+0x1cf4>
    54f0:	ldr	r0, [fp, #-68]	; 0xffffffbc
    54f4:	ldr	r1, [fp, #-76]	; 0xffffffb4
    54f8:	ldr	r2, [fp, #-84]	; 0xffffffac
    54fc:	ldr	r3, [fp, #-72]	; 0xffffffb8
    5500:	ldr	ip, [fp, #-80]	; 0xffffffb0
    5504:	ldr	lr, [fp, #-88]	; 0xffffffa8
    5508:	str	ip, [sp]
    550c:	str	lr, [sp, #4]
    5510:	bl	e1a8 <compare_strings>
    5514:	cmp	r0, #0
    5518:	movw	r0, #0
    551c:	moveq	r0, #1
    5520:	and	r0, r0, #1
    5524:	ldr	r1, [fp, #-24]	; 0xffffffe8
    5528:	str	r0, [r1]
    552c:	ldr	r0, [fp, #-76]	; 0xffffffb4
    5530:	cmp	r0, #0
    5534:	ble	5540 <eval_boolean+0x3d0>
    5538:	ldr	r0, [fp, #-84]	; 0xffffffac
    553c:	bl	0 <free>
    5540:	ldr	r0, [fp, #-80]	; 0xffffffb0
    5544:	cmp	r0, #0
    5548:	ble	5554 <eval_boolean+0x3e4>
    554c:	ldr	r0, [fp, #-88]	; 0xffffffa8
    5550:	bl	0 <free>
    5554:	b	5578 <eval_boolean+0x408>
    5558:	movw	r0, #0
    555c:	movt	r0, #0
    5560:	movw	r1, #0
    5564:	movt	r1, #0
    5568:	movw	r2, #668	; 0x29c
    556c:	movw	r3, #0
    5570:	movt	r3, #0
    5574:	bl	0 <__assert_fail>
    5578:	b	557c <eval_boolean+0x40c>
    557c:	b	5580 <eval_boolean+0x410>
    5580:	b	6e5c <eval_boolean+0x1cec>
    5584:	ldr	r0, [fp, #-28]	; 0xffffffe4
    5588:	ldr	r0, [r0, #16]
    558c:	ldr	r0, [r0, #4]
    5590:	cmp	r0, #2
    5594:	beq	55ac <eval_boolean+0x43c>
    5598:	ldr	r0, [fp, #-28]	; 0xffffffe4
    559c:	ldr	r0, [r0, #20]
    55a0:	ldr	r0, [r0, #4]
    55a4:	cmp	r0, #2
    55a8:	bne	5624 <eval_boolean+0x4b4>
    55ac:	ldr	r0, [fp, #-16]
    55b0:	ldr	r1, [fp, #-28]	; 0xffffffe4
    55b4:	ldr	r1, [r1, #16]
    55b8:	sub	r2, fp, #96	; 0x60
    55bc:	bl	9568 <eval_float>
    55c0:	cmp	r0, #0
    55c4:	beq	55d4 <eval_boolean+0x464>
    55c8:	mvn	r0, #0
    55cc:	str	r0, [fp, #-12]
    55d0:	b	6e64 <eval_boolean+0x1cf4>
    55d4:	ldr	r0, [fp, #-16]
    55d8:	ldr	r1, [fp, #-28]	; 0xffffffe4
    55dc:	ldr	r1, [r1, #20]
    55e0:	sub	r2, fp, #104	; 0x68
    55e4:	bl	9568 <eval_float>
    55e8:	cmp	r0, #0
    55ec:	beq	55fc <eval_boolean+0x48c>
    55f0:	mvn	r0, #0
    55f4:	str	r0, [fp, #-12]
    55f8:	b	6e64 <eval_boolean+0x1cf4>
    55fc:	vldr	d16, [fp, #-96]	; 0xffffffa0
    5600:	vldr	d17, [fp, #-104]	; 0xffffff98
    5604:	vcmp.f64	d16, d17
    5608:	vmrs	APSR_nzcv, fpscr
    560c:	movw	r0, #0
    5610:	movne	r0, #1
    5614:	and	r0, r0, #1
    5618:	ldr	r1, [fp, #-24]	; 0xffffffe8
    561c:	str	r0, [r1]
    5620:	b	57d0 <eval_boolean+0x660>
    5624:	ldr	r0, [fp, #-28]	; 0xffffffe4
    5628:	ldr	r0, [r0, #16]
    562c:	ldr	r0, [r0, #4]
    5630:	cmp	r0, #1
    5634:	bne	56bc <eval_boolean+0x54c>
    5638:	ldr	r0, [fp, #-16]
    563c:	ldr	r1, [fp, #-28]	; 0xffffffe4
    5640:	ldr	r1, [r1, #16]
    5644:	sub	r2, fp, #112	; 0x70
    5648:	bl	6f70 <eval_integer>
    564c:	cmp	r0, #0
    5650:	beq	5660 <eval_boolean+0x4f0>
    5654:	mvn	r0, #0
    5658:	str	r0, [fp, #-12]
    565c:	b	6e64 <eval_boolean+0x1cf4>
    5660:	ldr	r0, [fp, #-16]
    5664:	ldr	r1, [fp, #-28]	; 0xffffffe4
    5668:	ldr	r1, [r1, #20]
    566c:	sub	r2, fp, #120	; 0x78
    5670:	bl	6f70 <eval_integer>
    5674:	cmp	r0, #0
    5678:	beq	5688 <eval_boolean+0x518>
    567c:	mvn	r0, #0
    5680:	str	r0, [fp, #-12]
    5684:	b	6e64 <eval_boolean+0x1cf4>
    5688:	ldr	r0, [fp, #-112]	; 0xffffff90
    568c:	ldr	r1, [fp, #-108]	; 0xffffff94
    5690:	ldr	r2, [fp, #-120]	; 0xffffff88
    5694:	ldr	r3, [fp, #-116]	; 0xffffff8c
    5698:	eor	r1, r1, r3
    569c:	eor	r0, r0, r2
    56a0:	orr	r0, r0, r1
    56a4:	cmp	r0, #0
    56a8:	movwne	r0, #1
    56ac:	and	r0, r0, #1
    56b0:	ldr	r1, [fp, #-24]	; 0xffffffe8
    56b4:	str	r0, [r1]
    56b8:	b	57cc <eval_boolean+0x65c>
    56bc:	ldr	r0, [fp, #-28]	; 0xffffffe4
    56c0:	ldr	r0, [r0, #16]
    56c4:	ldr	r0, [r0, #4]
    56c8:	cmp	r0, #3
    56cc:	bne	57a8 <eval_boolean+0x638>
    56d0:	ldr	r0, [fp, #-16]
    56d4:	ldr	r1, [fp, #-28]	; 0xffffffe4
    56d8:	ldr	r1, [r1, #16]
    56dc:	sub	r2, fp, #124	; 0x7c
    56e0:	sub	r3, fp, #132	; 0x84
    56e4:	sub	ip, fp, #140	; 0x8c
    56e8:	str	ip, [sp]
    56ec:	bl	aacc <eval_string>
    56f0:	cmp	r0, #0
    56f4:	beq	5704 <eval_boolean+0x594>
    56f8:	mvn	r0, #0
    56fc:	str	r0, [fp, #-12]
    5700:	b	6e64 <eval_boolean+0x1cf4>
    5704:	ldr	r0, [fp, #-16]
    5708:	ldr	r1, [fp, #-28]	; 0xffffffe4
    570c:	ldr	r1, [r1, #20]
    5710:	sub	r2, fp, #128	; 0x80
    5714:	sub	r3, fp, #136	; 0x88
    5718:	sub	ip, fp, #144	; 0x90
    571c:	str	ip, [sp]
    5720:	bl	aacc <eval_string>
    5724:	cmp	r0, #0
    5728:	beq	5740 <eval_boolean+0x5d0>
    572c:	ldr	r0, [fp, #-140]	; 0xffffff74
    5730:	bl	0 <free>
    5734:	mvn	r0, #0
    5738:	str	r0, [fp, #-12]
    573c:	b	6e64 <eval_boolean+0x1cf4>
    5740:	ldr	r0, [fp, #-124]	; 0xffffff84
    5744:	ldr	r1, [fp, #-132]	; 0xffffff7c
    5748:	ldr	r2, [fp, #-140]	; 0xffffff74
    574c:	ldr	r3, [fp, #-128]	; 0xffffff80
    5750:	ldr	ip, [fp, #-136]	; 0xffffff78
    5754:	ldr	lr, [fp, #-144]	; 0xffffff70
    5758:	str	ip, [sp]
    575c:	str	lr, [sp, #4]
    5760:	bl	e1a8 <compare_strings>
    5764:	cmp	r0, #0
    5768:	movw	r0, #0
    576c:	movne	r0, #1
    5770:	and	r0, r0, #1
    5774:	ldr	r1, [fp, #-24]	; 0xffffffe8
    5778:	str	r0, [r1]
    577c:	ldr	r0, [fp, #-132]	; 0xffffff7c
    5780:	cmp	r0, #0
    5784:	ble	5790 <eval_boolean+0x620>
    5788:	ldr	r0, [fp, #-140]	; 0xffffff74
    578c:	bl	0 <free>
    5790:	ldr	r0, [fp, #-136]	; 0xffffff78
    5794:	cmp	r0, #0
    5798:	ble	57a4 <eval_boolean+0x634>
    579c:	ldr	r0, [fp, #-144]	; 0xffffff70
    57a0:	bl	0 <free>
    57a4:	b	57c8 <eval_boolean+0x658>
    57a8:	movw	r0, #0
    57ac:	movt	r0, #0
    57b0:	movw	r1, #0
    57b4:	movt	r1, #0
    57b8:	movw	r2, #730	; 0x2da
    57bc:	movw	r3, #0
    57c0:	movt	r3, #0
    57c4:	bl	0 <__assert_fail>
    57c8:	b	57cc <eval_boolean+0x65c>
    57cc:	b	57d0 <eval_boolean+0x660>
    57d0:	b	6e5c <eval_boolean+0x1cec>
    57d4:	ldr	r0, [fp, #-28]	; 0xffffffe4
    57d8:	ldr	r0, [r0, #16]
    57dc:	ldr	r0, [r0, #4]
    57e0:	cmp	r0, #2
    57e4:	beq	57fc <eval_boolean+0x68c>
    57e8:	ldr	r0, [fp, #-28]	; 0xffffffe4
    57ec:	ldr	r0, [r0, #20]
    57f0:	ldr	r0, [r0, #4]
    57f4:	cmp	r0, #2
    57f8:	bne	5874 <eval_boolean+0x704>
    57fc:	ldr	r0, [fp, #-16]
    5800:	ldr	r1, [fp, #-28]	; 0xffffffe4
    5804:	ldr	r1, [r1, #16]
    5808:	sub	r2, fp, #152	; 0x98
    580c:	bl	9568 <eval_float>
    5810:	cmp	r0, #0
    5814:	beq	5824 <eval_boolean+0x6b4>
    5818:	mvn	r0, #0
    581c:	str	r0, [fp, #-12]
    5820:	b	6e64 <eval_boolean+0x1cf4>
    5824:	ldr	r0, [fp, #-16]
    5828:	ldr	r1, [fp, #-28]	; 0xffffffe4
    582c:	ldr	r1, [r1, #20]
    5830:	sub	r2, fp, #160	; 0xa0
    5834:	bl	9568 <eval_float>
    5838:	cmp	r0, #0
    583c:	beq	584c <eval_boolean+0x6dc>
    5840:	mvn	r0, #0
    5844:	str	r0, [fp, #-12]
    5848:	b	6e64 <eval_boolean+0x1cf4>
    584c:	vldr	d16, [fp, #-152]	; 0xffffff68
    5850:	vldr	d17, [fp, #-160]	; 0xffffff60
    5854:	vcmpe.f64	d16, d17
    5858:	vmrs	APSR_nzcv, fpscr
    585c:	movw	r0, #0
    5860:	movgt	r0, #1
    5864:	and	r0, r0, #1
    5868:	ldr	r1, [fp, #-24]	; 0xffffffe8
    586c:	str	r0, [r1]
    5870:	b	5a1c <eval_boolean+0x8ac>
    5874:	ldr	r0, [fp, #-28]	; 0xffffffe4
    5878:	ldr	r0, [r0, #16]
    587c:	ldr	r0, [r0, #4]
    5880:	cmp	r0, #1
    5884:	bne	5908 <eval_boolean+0x798>
    5888:	ldr	r0, [fp, #-16]
    588c:	ldr	r1, [fp, #-28]	; 0xffffffe4
    5890:	ldr	r1, [r1, #16]
    5894:	sub	r2, fp, #168	; 0xa8
    5898:	bl	6f70 <eval_integer>
    589c:	cmp	r0, #0
    58a0:	beq	58b0 <eval_boolean+0x740>
    58a4:	mvn	r0, #0
    58a8:	str	r0, [fp, #-12]
    58ac:	b	6e64 <eval_boolean+0x1cf4>
    58b0:	ldr	r0, [fp, #-16]
    58b4:	ldr	r1, [fp, #-28]	; 0xffffffe4
    58b8:	ldr	r1, [r1, #20]
    58bc:	sub	r2, fp, #176	; 0xb0
    58c0:	bl	6f70 <eval_integer>
    58c4:	cmp	r0, #0
    58c8:	beq	58d8 <eval_boolean+0x768>
    58cc:	mvn	r0, #0
    58d0:	str	r0, [fp, #-12]
    58d4:	b	6e64 <eval_boolean+0x1cf4>
    58d8:	ldr	r0, [fp, #-168]	; 0xffffff58
    58dc:	ldr	r1, [fp, #-164]	; 0xffffff5c
    58e0:	ldr	r2, [fp, #-176]	; 0xffffff50
    58e4:	ldr	r3, [fp, #-172]	; 0xffffff54
    58e8:	subs	r0, r2, r0
    58ec:	sbcs	r1, r3, r1
    58f0:	mov	r2, #0
    58f4:	movwlt	r2, #1
    58f8:	and	r2, r2, #1
    58fc:	ldr	r3, [fp, #-24]	; 0xffffffe8
    5900:	str	r2, [r3]
    5904:	b	5a18 <eval_boolean+0x8a8>
    5908:	ldr	r0, [fp, #-28]	; 0xffffffe4
    590c:	ldr	r0, [r0, #16]
    5910:	ldr	r0, [r0, #4]
    5914:	cmp	r0, #3
    5918:	bne	59f4 <eval_boolean+0x884>
    591c:	ldr	r0, [fp, #-16]
    5920:	ldr	r1, [fp, #-28]	; 0xffffffe4
    5924:	ldr	r1, [r1, #16]
    5928:	sub	r2, fp, #180	; 0xb4
    592c:	sub	r3, fp, #188	; 0xbc
    5930:	sub	ip, fp, #196	; 0xc4
    5934:	str	ip, [sp]
    5938:	bl	aacc <eval_string>
    593c:	cmp	r0, #0
    5940:	beq	5950 <eval_boolean+0x7e0>
    5944:	mvn	r0, #0
    5948:	str	r0, [fp, #-12]
    594c:	b	6e64 <eval_boolean+0x1cf4>
    5950:	ldr	r0, [fp, #-16]
    5954:	ldr	r1, [fp, #-28]	; 0xffffffe4
    5958:	ldr	r1, [r1, #20]
    595c:	sub	r2, fp, #184	; 0xb8
    5960:	sub	r3, fp, #192	; 0xc0
    5964:	sub	ip, fp, #200	; 0xc8
    5968:	str	ip, [sp]
    596c:	bl	aacc <eval_string>
    5970:	cmp	r0, #0
    5974:	beq	598c <eval_boolean+0x81c>
    5978:	ldr	r0, [fp, #-196]	; 0xffffff3c
    597c:	bl	0 <free>
    5980:	mvn	r0, #0
    5984:	str	r0, [fp, #-12]
    5988:	b	6e64 <eval_boolean+0x1cf4>
    598c:	ldr	r0, [fp, #-180]	; 0xffffff4c
    5990:	ldr	r1, [fp, #-188]	; 0xffffff44
    5994:	ldr	r2, [fp, #-196]	; 0xffffff3c
    5998:	ldr	r3, [fp, #-184]	; 0xffffff48
    599c:	ldr	ip, [fp, #-192]	; 0xffffff40
    59a0:	ldr	lr, [fp, #-200]	; 0xffffff38
    59a4:	str	ip, [sp]
    59a8:	str	lr, [sp, #4]
    59ac:	bl	e1a8 <compare_strings>
    59b0:	cmp	r0, #0
    59b4:	movw	r0, #0
    59b8:	movgt	r0, #1
    59bc:	and	r0, r0, #1
    59c0:	ldr	r1, [fp, #-24]	; 0xffffffe8
    59c4:	str	r0, [r1]
    59c8:	ldr	r0, [fp, #-188]	; 0xffffff44
    59cc:	cmp	r0, #0
    59d0:	ble	59dc <eval_boolean+0x86c>
    59d4:	ldr	r0, [fp, #-196]	; 0xffffff3c
    59d8:	bl	0 <free>
    59dc:	ldr	r0, [fp, #-192]	; 0xffffff40
    59e0:	cmp	r0, #0
    59e4:	ble	59f0 <eval_boolean+0x880>
    59e8:	ldr	r0, [fp, #-200]	; 0xffffff38
    59ec:	bl	0 <free>
    59f0:	b	5a14 <eval_boolean+0x8a4>
    59f4:	movw	r0, #0
    59f8:	movt	r0, #0
    59fc:	movw	r1, #0
    5a00:	movt	r1, #0
    5a04:	movw	r2, #792	; 0x318
    5a08:	movw	r3, #0
    5a0c:	movt	r3, #0
    5a10:	bl	0 <__assert_fail>
    5a14:	b	5a18 <eval_boolean+0x8a8>
    5a18:	b	5a1c <eval_boolean+0x8ac>
    5a1c:	b	6e5c <eval_boolean+0x1cec>
    5a20:	ldr	r0, [fp, #-28]	; 0xffffffe4
    5a24:	ldr	r0, [r0, #16]
    5a28:	ldr	r0, [r0, #4]
    5a2c:	cmp	r0, #2
    5a30:	beq	5a48 <eval_boolean+0x8d8>
    5a34:	ldr	r0, [fp, #-28]	; 0xffffffe4
    5a38:	ldr	r0, [r0, #20]
    5a3c:	ldr	r0, [r0, #4]
    5a40:	cmp	r0, #2
    5a44:	bne	5ac0 <eval_boolean+0x950>
    5a48:	ldr	r0, [fp, #-16]
    5a4c:	ldr	r1, [fp, #-28]	; 0xffffffe4
    5a50:	ldr	r1, [r1, #16]
    5a54:	sub	r2, fp, #208	; 0xd0
    5a58:	bl	9568 <eval_float>
    5a5c:	cmp	r0, #0
    5a60:	beq	5a70 <eval_boolean+0x900>
    5a64:	mvn	r0, #0
    5a68:	str	r0, [fp, #-12]
    5a6c:	b	6e64 <eval_boolean+0x1cf4>
    5a70:	ldr	r0, [fp, #-16]
    5a74:	ldr	r1, [fp, #-28]	; 0xffffffe4
    5a78:	ldr	r1, [r1, #20]
    5a7c:	sub	r2, fp, #216	; 0xd8
    5a80:	bl	9568 <eval_float>
    5a84:	cmp	r0, #0
    5a88:	beq	5a98 <eval_boolean+0x928>
    5a8c:	mvn	r0, #0
    5a90:	str	r0, [fp, #-12]
    5a94:	b	6e64 <eval_boolean+0x1cf4>
    5a98:	vldr	d16, [fp, #-208]	; 0xffffff30
    5a9c:	vldr	d17, [fp, #-216]	; 0xffffff28
    5aa0:	vcmpe.f64	d16, d17
    5aa4:	vmrs	APSR_nzcv, fpscr
    5aa8:	movw	r0, #0
    5aac:	movge	r0, #1
    5ab0:	and	r0, r0, #1
    5ab4:	ldr	r1, [fp, #-24]	; 0xffffffe8
    5ab8:	str	r0, [r1]
    5abc:	b	5c68 <eval_boolean+0xaf8>
    5ac0:	ldr	r0, [fp, #-28]	; 0xffffffe4
    5ac4:	ldr	r0, [r0, #16]
    5ac8:	ldr	r0, [r0, #4]
    5acc:	cmp	r0, #1
    5ad0:	bne	5b54 <eval_boolean+0x9e4>
    5ad4:	ldr	r0, [fp, #-16]
    5ad8:	ldr	r1, [fp, #-28]	; 0xffffffe4
    5adc:	ldr	r1, [r1, #16]
    5ae0:	sub	r2, fp, #224	; 0xe0
    5ae4:	bl	6f70 <eval_integer>
    5ae8:	cmp	r0, #0
    5aec:	beq	5afc <eval_boolean+0x98c>
    5af0:	mvn	r0, #0
    5af4:	str	r0, [fp, #-12]
    5af8:	b	6e64 <eval_boolean+0x1cf4>
    5afc:	ldr	r0, [fp, #-16]
    5b00:	ldr	r1, [fp, #-28]	; 0xffffffe4
    5b04:	ldr	r1, [r1, #20]
    5b08:	sub	r2, fp, #232	; 0xe8
    5b0c:	bl	6f70 <eval_integer>
    5b10:	cmp	r0, #0
    5b14:	beq	5b24 <eval_boolean+0x9b4>
    5b18:	mvn	r0, #0
    5b1c:	str	r0, [fp, #-12]
    5b20:	b	6e64 <eval_boolean+0x1cf4>
    5b24:	ldr	r0, [fp, #-224]	; 0xffffff20
    5b28:	ldr	r1, [fp, #-220]	; 0xffffff24
    5b2c:	ldr	r2, [fp, #-232]	; 0xffffff18
    5b30:	ldr	r3, [fp, #-228]	; 0xffffff1c
    5b34:	subs	r0, r0, r2
    5b38:	sbcs	r1, r1, r3
    5b3c:	mov	r2, #0
    5b40:	movwge	r2, #1
    5b44:	and	r2, r2, #1
    5b48:	ldr	r3, [fp, #-24]	; 0xffffffe8
    5b4c:	str	r2, [r3]
    5b50:	b	5c64 <eval_boolean+0xaf4>
    5b54:	ldr	r0, [fp, #-28]	; 0xffffffe4
    5b58:	ldr	r0, [r0, #16]
    5b5c:	ldr	r0, [r0, #4]
    5b60:	cmp	r0, #3
    5b64:	bne	5c40 <eval_boolean+0xad0>
    5b68:	ldr	r0, [fp, #-16]
    5b6c:	ldr	r1, [fp, #-28]	; 0xffffffe4
    5b70:	ldr	r1, [r1, #16]
    5b74:	sub	r2, fp, #236	; 0xec
    5b78:	sub	r3, fp, #244	; 0xf4
    5b7c:	sub	ip, fp, #252	; 0xfc
    5b80:	str	ip, [sp]
    5b84:	bl	aacc <eval_string>
    5b88:	cmp	r0, #0
    5b8c:	beq	5b9c <eval_boolean+0xa2c>
    5b90:	mvn	r0, #0
    5b94:	str	r0, [fp, #-12]
    5b98:	b	6e64 <eval_boolean+0x1cf4>
    5b9c:	ldr	r0, [fp, #-16]
    5ba0:	ldr	r1, [fp, #-28]	; 0xffffffe4
    5ba4:	ldr	r1, [r1, #20]
    5ba8:	sub	r2, fp, #240	; 0xf0
    5bac:	sub	r3, fp, #248	; 0xf8
    5bb0:	sub	ip, fp, #256	; 0x100
    5bb4:	str	ip, [sp]
    5bb8:	bl	aacc <eval_string>
    5bbc:	cmp	r0, #0
    5bc0:	beq	5bd8 <eval_boolean+0xa68>
    5bc4:	ldr	r0, [fp, #-252]	; 0xffffff04
    5bc8:	bl	0 <free>
    5bcc:	mvn	r0, #0
    5bd0:	str	r0, [fp, #-12]
    5bd4:	b	6e64 <eval_boolean+0x1cf4>
    5bd8:	ldr	r0, [fp, #-236]	; 0xffffff14
    5bdc:	ldr	r1, [fp, #-244]	; 0xffffff0c
    5be0:	ldr	r2, [fp, #-252]	; 0xffffff04
    5be4:	ldr	r3, [fp, #-240]	; 0xffffff10
    5be8:	ldr	ip, [fp, #-248]	; 0xffffff08
    5bec:	ldr	lr, [fp, #-256]	; 0xffffff00
    5bf0:	str	ip, [sp]
    5bf4:	str	lr, [sp, #4]
    5bf8:	bl	e1a8 <compare_strings>
    5bfc:	cmp	r0, #0
    5c00:	movw	r0, #0
    5c04:	movge	r0, #1
    5c08:	and	r0, r0, #1
    5c0c:	ldr	r1, [fp, #-24]	; 0xffffffe8
    5c10:	str	r0, [r1]
    5c14:	ldr	r0, [fp, #-244]	; 0xffffff0c
    5c18:	cmp	r0, #0
    5c1c:	ble	5c28 <eval_boolean+0xab8>
    5c20:	ldr	r0, [fp, #-252]	; 0xffffff04
    5c24:	bl	0 <free>
    5c28:	ldr	r0, [fp, #-248]	; 0xffffff08
    5c2c:	cmp	r0, #0
    5c30:	ble	5c3c <eval_boolean+0xacc>
    5c34:	ldr	r0, [fp, #-256]	; 0xffffff00
    5c38:	bl	0 <free>
    5c3c:	b	5c60 <eval_boolean+0xaf0>
    5c40:	movw	r0, #0
    5c44:	movt	r0, #0
    5c48:	movw	r1, #0
    5c4c:	movt	r1, #0
    5c50:	movw	r2, #854	; 0x356
    5c54:	movw	r3, #0
    5c58:	movt	r3, #0
    5c5c:	bl	0 <__assert_fail>
    5c60:	b	5c64 <eval_boolean+0xaf4>
    5c64:	b	5c68 <eval_boolean+0xaf8>
    5c68:	b	6e5c <eval_boolean+0x1cec>
    5c6c:	ldr	r0, [fp, #-28]	; 0xffffffe4
    5c70:	ldr	r0, [r0, #16]
    5c74:	ldr	r0, [r0, #4]
    5c78:	cmp	r0, #2
    5c7c:	beq	5c94 <eval_boolean+0xb24>
    5c80:	ldr	r0, [fp, #-28]	; 0xffffffe4
    5c84:	ldr	r0, [r0, #20]
    5c88:	ldr	r0, [r0, #4]
    5c8c:	cmp	r0, #2
    5c90:	bne	5d0c <eval_boolean+0xb9c>
    5c94:	ldr	r0, [fp, #-16]
    5c98:	ldr	r1, [fp, #-28]	; 0xffffffe4
    5c9c:	ldr	r1, [r1, #16]
    5ca0:	sub	r2, fp, #264	; 0x108
    5ca4:	bl	9568 <eval_float>
    5ca8:	cmp	r0, #0
    5cac:	beq	5cbc <eval_boolean+0xb4c>
    5cb0:	mvn	r0, #0
    5cb4:	str	r0, [fp, #-12]
    5cb8:	b	6e64 <eval_boolean+0x1cf4>
    5cbc:	ldr	r0, [fp, #-16]
    5cc0:	ldr	r1, [fp, #-28]	; 0xffffffe4
    5cc4:	ldr	r1, [r1, #20]
    5cc8:	sub	r2, fp, #272	; 0x110
    5ccc:	bl	9568 <eval_float>
    5cd0:	cmp	r0, #0
    5cd4:	beq	5ce4 <eval_boolean+0xb74>
    5cd8:	mvn	r0, #0
    5cdc:	str	r0, [fp, #-12]
    5ce0:	b	6e64 <eval_boolean+0x1cf4>
    5ce4:	vldr	d16, [fp, #-264]	; 0xfffffef8
    5ce8:	vldr	d17, [fp, #-272]	; 0xfffffef0
    5cec:	vcmpe.f64	d16, d17
    5cf0:	vmrs	APSR_nzcv, fpscr
    5cf4:	movw	r0, #0
    5cf8:	movmi	r0, #1
    5cfc:	and	r0, r0, #1
    5d00:	ldr	r1, [fp, #-24]	; 0xffffffe8
    5d04:	str	r0, [r1]
    5d08:	b	5eb4 <eval_boolean+0xd44>
    5d0c:	ldr	r0, [fp, #-28]	; 0xffffffe4
    5d10:	ldr	r0, [r0, #16]
    5d14:	ldr	r0, [r0, #4]
    5d18:	cmp	r0, #1
    5d1c:	bne	5da0 <eval_boolean+0xc30>
    5d20:	ldr	r0, [fp, #-16]
    5d24:	ldr	r1, [fp, #-28]	; 0xffffffe4
    5d28:	ldr	r1, [r1, #16]
    5d2c:	sub	r2, fp, #280	; 0x118
    5d30:	bl	6f70 <eval_integer>
    5d34:	cmp	r0, #0
    5d38:	beq	5d48 <eval_boolean+0xbd8>
    5d3c:	mvn	r0, #0
    5d40:	str	r0, [fp, #-12]
    5d44:	b	6e64 <eval_boolean+0x1cf4>
    5d48:	ldr	r0, [fp, #-16]
    5d4c:	ldr	r1, [fp, #-28]	; 0xffffffe4
    5d50:	ldr	r1, [r1, #20]
    5d54:	sub	r2, fp, #288	; 0x120
    5d58:	bl	6f70 <eval_integer>
    5d5c:	cmp	r0, #0
    5d60:	beq	5d70 <eval_boolean+0xc00>
    5d64:	mvn	r0, #0
    5d68:	str	r0, [fp, #-12]
    5d6c:	b	6e64 <eval_boolean+0x1cf4>
    5d70:	ldr	r0, [fp, #-280]	; 0xfffffee8
    5d74:	ldr	r1, [fp, #-276]	; 0xfffffeec
    5d78:	ldr	r2, [fp, #-288]	; 0xfffffee0
    5d7c:	ldr	r3, [fp, #-284]	; 0xfffffee4
    5d80:	subs	r0, r0, r2
    5d84:	sbcs	r1, r1, r3
    5d88:	mov	r2, #0
    5d8c:	movwlt	r2, #1
    5d90:	and	r2, r2, #1
    5d94:	ldr	r3, [fp, #-24]	; 0xffffffe8
    5d98:	str	r2, [r3]
    5d9c:	b	5eb0 <eval_boolean+0xd40>
    5da0:	ldr	r0, [fp, #-28]	; 0xffffffe4
    5da4:	ldr	r0, [r0, #16]
    5da8:	ldr	r0, [r0, #4]
    5dac:	cmp	r0, #3
    5db0:	bne	5e8c <eval_boolean+0xd1c>
    5db4:	ldr	r0, [fp, #-16]
    5db8:	ldr	r1, [fp, #-28]	; 0xffffffe4
    5dbc:	ldr	r1, [r1, #16]
    5dc0:	sub	r2, fp, #292	; 0x124
    5dc4:	sub	r3, fp, #300	; 0x12c
    5dc8:	sub	ip, fp, #308	; 0x134
    5dcc:	str	ip, [sp]
    5dd0:	bl	aacc <eval_string>
    5dd4:	cmp	r0, #0
    5dd8:	beq	5de8 <eval_boolean+0xc78>
    5ddc:	mvn	r0, #0
    5de0:	str	r0, [fp, #-12]
    5de4:	b	6e64 <eval_boolean+0x1cf4>
    5de8:	ldr	r0, [fp, #-16]
    5dec:	ldr	r1, [fp, #-28]	; 0xffffffe4
    5df0:	ldr	r1, [r1, #20]
    5df4:	sub	r2, fp, #296	; 0x128
    5df8:	sub	r3, fp, #304	; 0x130
    5dfc:	sub	ip, fp, #312	; 0x138
    5e00:	str	ip, [sp]
    5e04:	bl	aacc <eval_string>
    5e08:	cmp	r0, #0
    5e0c:	beq	5e24 <eval_boolean+0xcb4>
    5e10:	ldr	r0, [fp, #-308]	; 0xfffffecc
    5e14:	bl	0 <free>
    5e18:	mvn	r0, #0
    5e1c:	str	r0, [fp, #-12]
    5e20:	b	6e64 <eval_boolean+0x1cf4>
    5e24:	ldr	r0, [fp, #-292]	; 0xfffffedc
    5e28:	ldr	r1, [fp, #-300]	; 0xfffffed4
    5e2c:	ldr	r2, [fp, #-308]	; 0xfffffecc
    5e30:	ldr	r3, [fp, #-296]	; 0xfffffed8
    5e34:	ldr	ip, [fp, #-304]	; 0xfffffed0
    5e38:	ldr	lr, [fp, #-312]	; 0xfffffec8
    5e3c:	str	ip, [sp]
    5e40:	str	lr, [sp, #4]
    5e44:	bl	e1a8 <compare_strings>
    5e48:	cmp	r0, #0
    5e4c:	movw	r0, #0
    5e50:	movlt	r0, #1
    5e54:	and	r0, r0, #1
    5e58:	ldr	r1, [fp, #-24]	; 0xffffffe8
    5e5c:	str	r0, [r1]
    5e60:	ldr	r0, [fp, #-300]	; 0xfffffed4
    5e64:	cmp	r0, #0
    5e68:	ble	5e74 <eval_boolean+0xd04>
    5e6c:	ldr	r0, [fp, #-308]	; 0xfffffecc
    5e70:	bl	0 <free>
    5e74:	ldr	r0, [fp, #-304]	; 0xfffffed0
    5e78:	cmp	r0, #0
    5e7c:	ble	5e88 <eval_boolean+0xd18>
    5e80:	ldr	r0, [fp, #-312]	; 0xfffffec8
    5e84:	bl	0 <free>
    5e88:	b	5eac <eval_boolean+0xd3c>
    5e8c:	movw	r0, #0
    5e90:	movt	r0, #0
    5e94:	movw	r1, #0
    5e98:	movt	r1, #0
    5e9c:	movw	r2, #916	; 0x394
    5ea0:	movw	r3, #0
    5ea4:	movt	r3, #0
    5ea8:	bl	0 <__assert_fail>
    5eac:	b	5eb0 <eval_boolean+0xd40>
    5eb0:	b	5eb4 <eval_boolean+0xd44>
    5eb4:	b	6e5c <eval_boolean+0x1cec>
    5eb8:	ldr	r0, [fp, #-28]	; 0xffffffe4
    5ebc:	ldr	r0, [r0, #16]
    5ec0:	ldr	r0, [r0, #4]
    5ec4:	cmp	r0, #2
    5ec8:	beq	5ee0 <eval_boolean+0xd70>
    5ecc:	ldr	r0, [fp, #-28]	; 0xffffffe4
    5ed0:	ldr	r0, [r0, #20]
    5ed4:	ldr	r0, [r0, #4]
    5ed8:	cmp	r0, #2
    5edc:	bne	5f58 <eval_boolean+0xde8>
    5ee0:	ldr	r0, [fp, #-16]
    5ee4:	ldr	r1, [fp, #-28]	; 0xffffffe4
    5ee8:	ldr	r1, [r1, #16]
    5eec:	sub	r2, fp, #320	; 0x140
    5ef0:	bl	9568 <eval_float>
    5ef4:	cmp	r0, #0
    5ef8:	beq	5f08 <eval_boolean+0xd98>
    5efc:	mvn	r0, #0
    5f00:	str	r0, [fp, #-12]
    5f04:	b	6e64 <eval_boolean+0x1cf4>
    5f08:	ldr	r0, [fp, #-16]
    5f0c:	ldr	r1, [fp, #-28]	; 0xffffffe4
    5f10:	ldr	r1, [r1, #20]
    5f14:	sub	r2, fp, #328	; 0x148
    5f18:	bl	9568 <eval_float>
    5f1c:	cmp	r0, #0
    5f20:	beq	5f30 <eval_boolean+0xdc0>
    5f24:	mvn	r0, #0
    5f28:	str	r0, [fp, #-12]
    5f2c:	b	6e64 <eval_boolean+0x1cf4>
    5f30:	vldr	d16, [fp, #-320]	; 0xfffffec0
    5f34:	vldr	d17, [fp, #-328]	; 0xfffffeb8
    5f38:	vcmpe.f64	d16, d17
    5f3c:	vmrs	APSR_nzcv, fpscr
    5f40:	movw	r0, #0
    5f44:	movls	r0, #1
    5f48:	and	r0, r0, #1
    5f4c:	ldr	r1, [fp, #-24]	; 0xffffffe8
    5f50:	str	r0, [r1]
    5f54:	b	6100 <eval_boolean+0xf90>
    5f58:	ldr	r0, [fp, #-28]	; 0xffffffe4
    5f5c:	ldr	r0, [r0, #16]
    5f60:	ldr	r0, [r0, #4]
    5f64:	cmp	r0, #1
    5f68:	bne	5fec <eval_boolean+0xe7c>
    5f6c:	ldr	r0, [fp, #-16]
    5f70:	ldr	r1, [fp, #-28]	; 0xffffffe4
    5f74:	ldr	r1, [r1, #16]
    5f78:	sub	r2, fp, #336	; 0x150
    5f7c:	bl	6f70 <eval_integer>
    5f80:	cmp	r0, #0
    5f84:	beq	5f94 <eval_boolean+0xe24>
    5f88:	mvn	r0, #0
    5f8c:	str	r0, [fp, #-12]
    5f90:	b	6e64 <eval_boolean+0x1cf4>
    5f94:	ldr	r0, [fp, #-16]
    5f98:	ldr	r1, [fp, #-28]	; 0xffffffe4
    5f9c:	ldr	r1, [r1, #20]
    5fa0:	sub	r2, fp, #344	; 0x158
    5fa4:	bl	6f70 <eval_integer>
    5fa8:	cmp	r0, #0
    5fac:	beq	5fbc <eval_boolean+0xe4c>
    5fb0:	mvn	r0, #0
    5fb4:	str	r0, [fp, #-12]
    5fb8:	b	6e64 <eval_boolean+0x1cf4>
    5fbc:	ldr	r0, [fp, #-336]	; 0xfffffeb0
    5fc0:	ldr	r1, [fp, #-332]	; 0xfffffeb4
    5fc4:	ldr	r2, [fp, #-344]	; 0xfffffea8
    5fc8:	ldr	r3, [fp, #-340]	; 0xfffffeac
    5fcc:	subs	r0, r2, r0
    5fd0:	sbcs	r1, r3, r1
    5fd4:	mov	r2, #0
    5fd8:	movwge	r2, #1
    5fdc:	and	r2, r2, #1
    5fe0:	ldr	r3, [fp, #-24]	; 0xffffffe8
    5fe4:	str	r2, [r3]
    5fe8:	b	60fc <eval_boolean+0xf8c>
    5fec:	ldr	r0, [fp, #-28]	; 0xffffffe4
    5ff0:	ldr	r0, [r0, #16]
    5ff4:	ldr	r0, [r0, #4]
    5ff8:	cmp	r0, #3
    5ffc:	bne	60d8 <eval_boolean+0xf68>
    6000:	ldr	r0, [fp, #-16]
    6004:	ldr	r1, [fp, #-28]	; 0xffffffe4
    6008:	ldr	r1, [r1, #16]
    600c:	sub	r2, fp, #348	; 0x15c
    6010:	sub	r3, fp, #356	; 0x164
    6014:	sub	ip, fp, #364	; 0x16c
    6018:	str	ip, [sp]
    601c:	bl	aacc <eval_string>
    6020:	cmp	r0, #0
    6024:	beq	6034 <eval_boolean+0xec4>
    6028:	mvn	r0, #0
    602c:	str	r0, [fp, #-12]
    6030:	b	6e64 <eval_boolean+0x1cf4>
    6034:	ldr	r0, [fp, #-16]
    6038:	ldr	r1, [fp, #-28]	; 0xffffffe4
    603c:	ldr	r1, [r1, #20]
    6040:	sub	r2, fp, #352	; 0x160
    6044:	sub	r3, fp, #360	; 0x168
    6048:	sub	ip, fp, #368	; 0x170
    604c:	str	ip, [sp]
    6050:	bl	aacc <eval_string>
    6054:	cmp	r0, #0
    6058:	beq	6070 <eval_boolean+0xf00>
    605c:	ldr	r0, [fp, #-364]	; 0xfffffe94
    6060:	bl	0 <free>
    6064:	mvn	r0, #0
    6068:	str	r0, [fp, #-12]
    606c:	b	6e64 <eval_boolean+0x1cf4>
    6070:	ldr	r0, [fp, #-348]	; 0xfffffea4
    6074:	ldr	r1, [fp, #-356]	; 0xfffffe9c
    6078:	ldr	r2, [fp, #-364]	; 0xfffffe94
    607c:	ldr	r3, [fp, #-352]	; 0xfffffea0
    6080:	ldr	ip, [fp, #-360]	; 0xfffffe98
    6084:	ldr	lr, [fp, #-368]	; 0xfffffe90
    6088:	str	ip, [sp]
    608c:	str	lr, [sp, #4]
    6090:	bl	e1a8 <compare_strings>
    6094:	cmp	r0, #0
    6098:	movw	r0, #0
    609c:	movle	r0, #1
    60a0:	and	r0, r0, #1
    60a4:	ldr	r1, [fp, #-24]	; 0xffffffe8
    60a8:	str	r0, [r1]
    60ac:	ldr	r0, [fp, #-356]	; 0xfffffe9c
    60b0:	cmp	r0, #0
    60b4:	ble	60c0 <eval_boolean+0xf50>
    60b8:	ldr	r0, [fp, #-364]	; 0xfffffe94
    60bc:	bl	0 <free>
    60c0:	ldr	r0, [fp, #-360]	; 0xfffffe98
    60c4:	cmp	r0, #0
    60c8:	ble	60d4 <eval_boolean+0xf64>
    60cc:	ldr	r0, [fp, #-368]	; 0xfffffe90
    60d0:	bl	0 <free>
    60d4:	b	60f8 <eval_boolean+0xf88>
    60d8:	movw	r0, #0
    60dc:	movt	r0, #0
    60e0:	movw	r1, #0
    60e4:	movt	r1, #0
    60e8:	movw	r2, #978	; 0x3d2
    60ec:	movw	r3, #0
    60f0:	movt	r3, #0
    60f4:	bl	0 <__assert_fail>
    60f8:	b	60fc <eval_boolean+0xf8c>
    60fc:	b	6100 <eval_boolean+0xf90>
    6100:	b	6e5c <eval_boolean+0x1cec>
    6104:	ldr	r0, [fp, #-16]
    6108:	ldr	r1, [fp, #-28]	; 0xffffffe4
    610c:	ldr	r1, [r1, #16]
    6110:	ldr	r2, [fp, #-24]	; 0xffffffe8
    6114:	bl	5170 <eval_boolean>
    6118:	cmp	r0, #0
    611c:	beq	612c <eval_boolean+0xfbc>
    6120:	mvn	r0, #0
    6124:	str	r0, [fp, #-12]
    6128:	b	6e64 <eval_boolean+0x1cf4>
    612c:	ldr	r0, [fp, #-24]	; 0xffffffe8
    6130:	ldr	r0, [r0]
    6134:	cmp	r0, #0
    6138:	movw	r0, #0
    613c:	movne	r0, #1
    6140:	mvn	r1, #0
    6144:	eor	r0, r0, r1
    6148:	and	r0, r0, #1
    614c:	ldr	r1, [fp, #-24]	; 0xffffffe8
    6150:	str	r0, [r1]
    6154:	b	6e5c <eval_boolean+0x1cec>
    6158:	ldr	r0, [fp, #-16]
    615c:	ldr	r1, [fp, #-28]	; 0xffffffe4
    6160:	ldr	r1, [r1, #16]
    6164:	ldr	r2, [fp, #-24]	; 0xffffffe8
    6168:	bl	5170 <eval_boolean>
    616c:	cmp	r0, #0
    6170:	beq	6180 <eval_boolean+0x1010>
    6174:	mvn	r0, #0
    6178:	str	r0, [fp, #-12]
    617c:	b	6e64 <eval_boolean+0x1cf4>
    6180:	ldr	r0, [fp, #-24]	; 0xffffffe8
    6184:	ldr	r0, [r0]
    6188:	cmp	r0, #0
    618c:	bne	619c <eval_boolean+0x102c>
    6190:	movw	r0, #0
    6194:	str	r0, [fp, #-12]
    6198:	b	6e64 <eval_boolean+0x1cf4>
    619c:	ldr	r0, [fp, #-16]
    61a0:	ldr	r1, [fp, #-28]	; 0xffffffe4
    61a4:	ldr	r1, [r1, #20]
    61a8:	ldr	r2, [fp, #-24]	; 0xffffffe8
    61ac:	bl	5170 <eval_boolean>
    61b0:	cmp	r0, #0
    61b4:	beq	61c4 <eval_boolean+0x1054>
    61b8:	mvn	r0, #0
    61bc:	str	r0, [fp, #-12]
    61c0:	b	6e64 <eval_boolean+0x1cf4>
    61c4:	b	6e5c <eval_boolean+0x1cec>
    61c8:	ldr	r0, [fp, #-16]
    61cc:	ldr	r1, [fp, #-28]	; 0xffffffe4
    61d0:	ldr	r1, [r1, #16]
    61d4:	ldr	r2, [fp, #-24]	; 0xffffffe8
    61d8:	bl	5170 <eval_boolean>
    61dc:	cmp	r0, #0
    61e0:	beq	61f0 <eval_boolean+0x1080>
    61e4:	mvn	r0, #0
    61e8:	str	r0, [fp, #-12]
    61ec:	b	6e64 <eval_boolean+0x1cf4>
    61f0:	ldr	r0, [fp, #-24]	; 0xffffffe8
    61f4:	ldr	r0, [r0]
    61f8:	cmp	r0, #0
    61fc:	beq	620c <eval_boolean+0x109c>
    6200:	movw	r0, #0
    6204:	str	r0, [fp, #-12]
    6208:	b	6e64 <eval_boolean+0x1cf4>
    620c:	ldr	r0, [fp, #-16]
    6210:	ldr	r1, [fp, #-28]	; 0xffffffe4
    6214:	ldr	r1, [r1, #20]
    6218:	ldr	r2, [fp, #-24]	; 0xffffffe8
    621c:	bl	5170 <eval_boolean>
    6220:	cmp	r0, #0
    6224:	beq	6234 <eval_boolean+0x10c4>
    6228:	mvn	r0, #0
    622c:	str	r0, [fp, #-12]
    6230:	b	6e64 <eval_boolean+0x1cf4>
    6234:	b	6e5c <eval_boolean+0x1cec>
    6238:	ldr	r0, [fp, #-16]
    623c:	ldr	r1, [fp, #-28]	; 0xffffffe4
    6240:	ldr	r1, [r1, #16]
    6244:	sub	r2, fp, #376	; 0x178
    6248:	bl	9568 <eval_float>
    624c:	cmp	r0, #0
    6250:	beq	6260 <eval_boolean+0x10f0>
    6254:	mvn	r0, #0
    6258:	str	r0, [fp, #-12]
    625c:	b	6e64 <eval_boolean+0x1cf4>
    6260:	vldr	d0, [fp, #-376]	; 0xfffffe88
    6264:	bl	0 <coda_isNaN>
    6268:	ldr	r1, [fp, #-24]	; 0xffffffe8
    626c:	str	r0, [r1]
    6270:	b	6e5c <eval_boolean+0x1cec>
    6274:	ldr	r0, [fp, #-16]
    6278:	ldr	r1, [fp, #-28]	; 0xffffffe4
    627c:	ldr	r1, [r1, #16]
    6280:	sub	r2, fp, #384	; 0x180
    6284:	bl	9568 <eval_float>
    6288:	cmp	r0, #0
    628c:	beq	629c <eval_boolean+0x112c>
    6290:	mvn	r0, #0
    6294:	str	r0, [fp, #-12]
    6298:	b	6e64 <eval_boolean+0x1cf4>
    629c:	vldr	d0, [fp, #-384]	; 0xfffffe80
    62a0:	bl	0 <coda_isInf>
    62a4:	ldr	r1, [fp, #-24]	; 0xffffffe8
    62a8:	str	r0, [r1]
    62ac:	b	6e5c <eval_boolean+0x1cec>
    62b0:	ldr	r0, [fp, #-16]
    62b4:	ldr	r1, [fp, #-28]	; 0xffffffe4
    62b8:	ldr	r1, [r1, #16]
    62bc:	sub	r2, fp, #392	; 0x188
    62c0:	bl	9568 <eval_float>
    62c4:	cmp	r0, #0
    62c8:	beq	62d8 <eval_boolean+0x1168>
    62cc:	mvn	r0, #0
    62d0:	str	r0, [fp, #-12]
    62d4:	b	6e64 <eval_boolean+0x1cf4>
    62d8:	vldr	d0, [fp, #-392]	; 0xfffffe78
    62dc:	bl	0 <coda_isPlusInf>
    62e0:	ldr	r1, [fp, #-24]	; 0xffffffe8
    62e4:	str	r0, [r1]
    62e8:	b	6e5c <eval_boolean+0x1cec>
    62ec:	ldr	r0, [fp, #-16]
    62f0:	ldr	r1, [fp, #-28]	; 0xffffffe4
    62f4:	ldr	r1, [r1, #16]
    62f8:	sub	r2, fp, #400	; 0x190
    62fc:	bl	9568 <eval_float>
    6300:	cmp	r0, #0
    6304:	beq	6314 <eval_boolean+0x11a4>
    6308:	mvn	r0, #0
    630c:	str	r0, [fp, #-12]
    6310:	b	6e64 <eval_boolean+0x1cf4>
    6314:	vldr	d0, [fp, #-400]	; 0xfffffe70
    6318:	bl	0 <coda_isMinInf>
    631c:	ldr	r1, [fp, #-24]	; 0xffffffe8
    6320:	str	r0, [r1]
    6324:	b	6e5c <eval_boolean+0x1cec>
    6328:	ldr	r0, [fp, #-16]
    632c:	ldr	r1, [fp, #-28]	; 0xffffffe4
    6330:	ldr	r1, [r1, #16]
    6334:	sub	r2, fp, #616	; 0x268
    6338:	sub	r3, fp, #620	; 0x26c
    633c:	sub	ip, fp, #624	; 0x270
    6340:	str	ip, [sp]
    6344:	bl	aacc <eval_string>
    6348:	cmp	r0, #0
    634c:	beq	635c <eval_boolean+0x11ec>
    6350:	mvn	r0, #0
    6354:	str	r0, [fp, #-12]
    6358:	b	6e64 <eval_boolean+0x1cf4>
    635c:	ldr	r0, [fp, #-16]
    6360:	ldr	r1, [fp, #-28]	; 0xffffffe4
    6364:	ldr	r1, [r1, #20]
    6368:	sub	r2, fp, #604	; 0x25c
    636c:	sub	r3, fp, #608	; 0x260
    6370:	sub	ip, fp, #612	; 0x264
    6374:	str	ip, [sp]
    6378:	bl	aacc <eval_string>
    637c:	cmp	r0, #0
    6380:	beq	63a8 <eval_boolean+0x1238>
    6384:	ldr	r0, [fp, #-624]	; 0xfffffd90
    6388:	movw	r1, #0
    638c:	cmp	r0, r1
    6390:	beq	639c <eval_boolean+0x122c>
    6394:	ldr	r0, [fp, #-624]	; 0xfffffd90
    6398:	bl	0 <free>
    639c:	mvn	r0, #0
    63a0:	str	r0, [fp, #-12]
    63a4:	b	6e64 <eval_boolean+0x1cf4>
    63a8:	ldr	r0, [fp, #-620]	; 0xfffffd94
    63ac:	cmp	r0, #0
    63b0:	ble	63fc <eval_boolean+0x128c>
    63b4:	ldr	r0, [fp, #-624]	; 0xfffffd90
    63b8:	ldr	r1, [fp, #-616]	; 0xfffffd98
    63bc:	ldr	r2, [fp, #-620]	; 0xfffffd94
    63c0:	add	r1, r1, r2
    63c4:	add	r0, r0, r1
    63c8:	movw	r1, #0
    63cc:	strb	r1, [r0]
    63d0:	ldr	r0, [fp, #-624]	; 0xfffffd90
    63d4:	ldr	r1, [fp, #-616]	; 0xfffffd98
    63d8:	add	r0, r0, r1
    63dc:	movw	r1, #36	; 0x24
    63e0:	sub	r2, fp, #596	; 0x254
    63e4:	sub	r3, fp, #600	; 0x258
    63e8:	movw	ip, #0
    63ec:	str	ip, [sp]
    63f0:	bl	0 <coda_pcre_compile>
    63f4:	str	r0, [fp, #-628]	; 0xfffffd8c
    63f8:	b	6420 <eval_boolean+0x12b0>
    63fc:	movw	r0, #0
    6400:	movt	r0, #0
    6404:	movw	r1, #36	; 0x24
    6408:	sub	r2, fp, #596	; 0x254
    640c:	sub	r3, fp, #600	; 0x258
    6410:	movw	ip, #0
    6414:	str	ip, [sp]
    6418:	bl	0 <coda_pcre_compile>
    641c:	str	r0, [fp, #-628]	; 0xfffffd8c
    6420:	ldr	r0, [fp, #-624]	; 0xfffffd90
    6424:	movw	r1, #0
    6428:	cmp	r0, r1
    642c:	beq	6438 <eval_boolean+0x12c8>
    6430:	ldr	r0, [fp, #-624]	; 0xfffffd90
    6434:	bl	0 <free>
    6438:	ldr	r0, [fp, #-628]	; 0xfffffd8c
    643c:	movw	r1, #0
    6440:	cmp	r0, r1
    6444:	bne	6484 <eval_boolean+0x1314>
    6448:	ldr	r2, [fp, #-596]	; 0xfffffdac
    644c:	ldr	r3, [fp, #-600]	; 0xfffffda8
    6450:	mvn	r0, #400	; 0x190
    6454:	movw	r1, #0
    6458:	movt	r1, #0
    645c:	bl	0 <coda_set_error>
    6460:	ldr	r0, [fp, #-612]	; 0xfffffd9c
    6464:	movw	r1, #0
    6468:	cmp	r0, r1
    646c:	beq	6478 <eval_boolean+0x1308>
    6470:	ldr	r0, [fp, #-612]	; 0xfffffd9c
    6474:	bl	0 <free>
    6478:	mvn	r0, #0
    647c:	str	r0, [fp, #-12]
    6480:	b	6e64 <eval_boolean+0x1cf4>
    6484:	ldr	r0, [fp, #-612]	; 0xfffffd9c
    6488:	movw	r1, #0
    648c:	cmp	r0, r1
    6490:	bne	6500 <eval_boolean+0x1390>
    6494:	movw	r0, #0
    6498:	movt	r0, #0
    649c:	bl	0 <strdup>
    64a0:	str	r0, [fp, #-612]	; 0xfffffd9c
    64a4:	ldr	r0, [fp, #-612]	; 0xfffffd9c
    64a8:	movw	r1, #0
    64ac:	cmp	r0, r1
    64b0:	bne	64fc <eval_boolean+0x138c>
    64b4:	mvn	r0, #0
    64b8:	movw	r1, #0
    64bc:	movt	r1, #0
    64c0:	movw	r2, #0
    64c4:	movt	r2, #0
    64c8:	movw	r3, #1120	; 0x460
    64cc:	bl	0 <coda_set_error>
    64d0:	movw	r0, #0
    64d4:	movt	r0, #0
    64d8:	ldr	r0, [r0]
    64dc:	ldr	r1, [fp, #-628]	; 0xfffffd8c
    64e0:	str	r0, [sp, #60]	; 0x3c
    64e4:	mov	r0, r1
    64e8:	ldr	r1, [sp, #60]	; 0x3c
    64ec:	blx	r1
    64f0:	mvn	r0, #0
    64f4:	str	r0, [fp, #-12]
    64f8:	b	6e64 <eval_boolean+0x1cf4>
    64fc:	b	6500 <eval_boolean+0x1390>
    6500:	sub	r0, fp, #592	; 0x250
    6504:	ldr	r1, [fp, #-628]	; 0xfffffd8c
    6508:	ldr	r2, [fp, #-612]	; 0xfffffd9c
    650c:	ldr	r3, [fp, #-604]	; 0xfffffda4
    6510:	add	r2, r2, r3
    6514:	ldr	r3, [fp, #-608]	; 0xfffffda0
    6518:	str	r0, [sp, #56]	; 0x38
    651c:	mov	r0, r1
    6520:	movw	r1, #0
    6524:	str	r1, [sp, #52]	; 0x34
    6528:	ldr	ip, [sp, #52]	; 0x34
    652c:	str	ip, [sp]
    6530:	str	ip, [sp, #4]
    6534:	ldr	lr, [sp, #56]	; 0x38
    6538:	str	lr, [sp, #8]
    653c:	movw	r4, #48	; 0x30
    6540:	str	r4, [sp, #12]
    6544:	bl	0 <coda_pcre_exec>
    6548:	str	r0, [fp, #-632]	; 0xfffffd88
    654c:	ldr	r0, [fp, #-612]	; 0xfffffd9c
    6550:	bl	0 <free>
    6554:	movw	r0, #0
    6558:	movt	r0, #0
    655c:	ldr	r0, [r0]
    6560:	ldr	r1, [fp, #-628]	; 0xfffffd8c
    6564:	str	r0, [sp, #48]	; 0x30
    6568:	mov	r0, r1
    656c:	ldr	r1, [sp, #48]	; 0x30
    6570:	blx	r1
    6574:	ldr	r0, [fp, #-632]	; 0xfffffd88
    6578:	cmp	r0, #0
    657c:	bge	65ac <eval_boolean+0x143c>
    6580:	ldr	r0, [fp, #-632]	; 0xfffffd88
    6584:	cmn	r0, #1
    6588:	beq	65ac <eval_boolean+0x143c>
    658c:	ldr	r2, [fp, #-632]	; 0xfffffd88
    6590:	mvn	r0, #400	; 0x190
    6594:	movw	r1, #0
    6598:	movt	r1, #0
    659c:	bl	0 <coda_set_error>
    65a0:	mvn	r0, #0
    65a4:	str	r0, [fp, #-12]
    65a8:	b	6e64 <eval_boolean+0x1cf4>
    65ac:	ldr	r0, [fp, #-632]	; 0xfffffd88
    65b0:	cmp	r0, #0
    65b4:	bne	65d4 <eval_boolean+0x1464>
    65b8:	mvn	r0, #400	; 0x190
    65bc:	movw	r1, #0
    65c0:	movt	r1, #0
    65c4:	bl	0 <coda_set_error>
    65c8:	mvn	r0, #0
    65cc:	str	r0, [fp, #-12]
    65d0:	b	6e64 <eval_boolean+0x1cf4>
    65d4:	ldr	r0, [fp, #-632]	; 0xfffffd88
    65d8:	cmp	r0, #0
    65dc:	movw	r0, #0
    65e0:	movgt	r0, #1
    65e4:	and	r0, r0, #1
    65e8:	ldr	r1, [fp, #-24]	; 0xffffffe8
    65ec:	str	r0, [r1]
    65f0:	b	6e5c <eval_boolean+0x1cec>
    65f4:	ldr	r0, [fp, #-16]
    65f8:	ldr	r0, [r0]
    65fc:	movw	r1, #0
    6600:	cmp	r0, r1
    6604:	beq	660c <eval_boolean+0x149c>
    6608:	b	662c <eval_boolean+0x14bc>
    660c:	movw	r0, #0
    6610:	movt	r0, #0
    6614:	movw	r1, #0
    6618:	movt	r1, #0
    661c:	movw	r2, #1148	; 0x47c
    6620:	movw	r3, #0
    6624:	movt	r3, #0
    6628:	bl	0 <__assert_fail>
    662c:	ldr	r0, [fp, #-16]
    6630:	add	r0, r0, #8
    6634:	sub	r1, fp, #1152	; 0x480
    6638:	str	r0, [sp, #44]	; 0x2c
    663c:	mov	r0, r1
    6640:	ldr	r1, [sp, #44]	; 0x2c
    6644:	movw	r2, #520	; 0x208
    6648:	bl	0 <memcpy>
    664c:	ldr	r0, [fp, #-16]
    6650:	ldr	r1, [fp, #-28]	; 0xffffffe4
    6654:	ldr	r1, [r1, #16]
    6658:	bl	d154 <eval_cursor>
    665c:	cmp	r0, #0
    6660:	beq	66e4 <eval_boolean+0x1574>
    6664:	ldr	r0, [pc, #2052]	; 6e70 <eval_boolean+0x1d00>
    6668:	ldr	r0, [pc, r0]
    666c:	str	r0, [sp, #40]	; 0x28
    6670:	bl	0 <__aeabi_read_tp>
    6674:	ldr	r1, [sp, #40]	; 0x28
    6678:	ldr	r0, [r0, r1]
    667c:	mvn	r1, #400	; 0x190
    6680:	cmp	r0, r1
    6684:	beq	66d8 <eval_boolean+0x1568>
    6688:	ldr	r0, [pc, #2020]	; 6e74 <eval_boolean+0x1d04>
    668c:	ldr	r0, [pc, r0]
    6690:	str	r0, [sp, #36]	; 0x24
    6694:	bl	0 <__aeabi_read_tp>
    6698:	mov	r1, #0
    669c:	ldr	r2, [sp, #36]	; 0x24
    66a0:	str	r1, [r0, r2]
    66a4:	ldr	r0, [fp, #-24]	; 0xffffffe8
    66a8:	movw	r1, #0
    66ac:	str	r1, [r0]
    66b0:	ldr	r0, [fp, #-16]
    66b4:	add	r0, r0, #8
    66b8:	sub	r2, fp, #1152	; 0x480
    66bc:	str	r1, [sp, #32]
    66c0:	mov	r1, r2
    66c4:	movw	r2, #520	; 0x208
    66c8:	bl	0 <memcpy>
    66cc:	ldr	r0, [sp, #32]
    66d0:	str	r0, [fp, #-12]
    66d4:	b	6e64 <eval_boolean+0x1cf4>
    66d8:	mvn	r0, #0
    66dc:	str	r0, [fp, #-12]
    66e0:	b	6e64 <eval_boolean+0x1cf4>
    66e4:	ldr	r0, [fp, #-16]
    66e8:	add	r0, r0, #8
    66ec:	sub	lr, fp, #1024	; 0x400
    66f0:	sub	r1, lr, #132	; 0x84
    66f4:	bl	0 <coda_cursor_get_type_class>
    66f8:	cmp	r0, #0
    66fc:	beq	670c <eval_boolean+0x159c>
    6700:	mvn	r0, #0
    6704:	str	r0, [fp, #-12]
    6708:	b	6e64 <eval_boolean+0x1cf4>
    670c:	ldr	r0, [fp, #-1156]	; 0xfffffb7c
    6710:	cmp	r0, #6
    6714:	bne	6784 <eval_boolean+0x1614>
    6718:	ldr	r0, [fp, #-16]
    671c:	add	r0, r0, #8
    6720:	sub	lr, fp, #1024	; 0x400
    6724:	sub	r1, lr, #136	; 0x88
    6728:	bl	0 <coda_cursor_get_special_type>
    672c:	cmp	r0, #0
    6730:	beq	6740 <eval_boolean+0x15d0>
    6734:	mvn	r0, #0
    6738:	str	r0, [fp, #-12]
    673c:	b	6e64 <eval_boolean+0x1cf4>
    6740:	ldr	r0, [fp, #-1160]	; 0xfffffb78
    6744:	cmp	r0, #0
    6748:	bne	6780 <eval_boolean+0x1610>
    674c:	ldr	r0, [fp, #-24]	; 0xffffffe8
    6750:	movw	r1, #0
    6754:	str	r1, [r0]
    6758:	ldr	r0, [fp, #-16]
    675c:	add	r0, r0, #8
    6760:	sub	r2, fp, #1152	; 0x480
    6764:	str	r1, [sp, #28]
    6768:	mov	r1, r2
    676c:	movw	r2, #520	; 0x208
    6770:	bl	0 <memcpy>
    6774:	ldr	r0, [sp, #28]
    6778:	str	r0, [fp, #-12]
    677c:	b	6e64 <eval_boolean+0x1cf4>
    6780:	b	6784 <eval_boolean+0x1614>
    6784:	ldr	r0, [fp, #-24]	; 0xffffffe8
    6788:	movw	r1, #1
    678c:	str	r1, [r0]
    6790:	ldr	r0, [fp, #-16]
    6794:	add	r0, r0, #8
    6798:	sub	r1, fp, #1152	; 0x480
    679c:	movw	r2, #520	; 0x208
    67a0:	bl	0 <memcpy>
    67a4:	b	6e5c <eval_boolean+0x1cec>
    67a8:	ldr	r0, [fp, #-16]
    67ac:	ldr	r0, [r0]
    67b0:	movw	r1, #0
    67b4:	cmp	r0, r1
    67b8:	beq	67c0 <eval_boolean+0x1650>
    67bc:	b	67e0 <eval_boolean+0x1670>
    67c0:	movw	r0, #0
    67c4:	movt	r0, #0
    67c8:	movw	r1, #0
    67cc:	movt	r1, #0
    67d0:	movw	r2, #1190	; 0x4a6
    67d4:	movw	r3, #0
    67d8:	movt	r3, #0
    67dc:	bl	0 <__assert_fail>
    67e0:	ldr	r0, [fp, #-16]
    67e4:	add	r0, r0, #8
    67e8:	add	r1, sp, #1168	; 0x490
    67ec:	str	r0, [sp, #24]
    67f0:	mov	r0, r1
    67f4:	ldr	r1, [sp, #24]
    67f8:	movw	r2, #520	; 0x208
    67fc:	bl	0 <memcpy>
    6800:	ldr	r0, [fp, #-16]
    6804:	ldr	r1, [fp, #-28]	; 0xffffffe4
    6808:	ldr	r1, [r1, #16]
    680c:	bl	d154 <eval_cursor>
    6810:	cmp	r0, #0
    6814:	beq	6824 <eval_boolean+0x16b4>
    6818:	mvn	r0, #0
    681c:	str	r0, [fp, #-12]
    6820:	b	6e64 <eval_boolean+0x1cf4>
    6824:	ldr	r0, [fp, #-16]
    6828:	add	r0, r0, #8
    682c:	add	lr, sp, #1024	; 0x400
    6830:	add	r1, lr, #140	; 0x8c
    6834:	bl	0 <coda_cursor_get_num_elements>
    6838:	cmp	r0, #0
    683c:	beq	684c <eval_boolean+0x16dc>
    6840:	mvn	r0, #0
    6844:	str	r0, [fp, #-12]
    6848:	b	6e64 <eval_boolean+0x1cf4>
    684c:	ldr	r0, [sp, #1164]	; 0x48c
    6850:	cmp	r0, #0
    6854:	ble	692c <eval_boolean+0x17bc>
    6858:	ldr	r0, [fp, #-16]
    685c:	add	r0, r0, #8
    6860:	bl	0 <coda_cursor_goto_first_array_element>
    6864:	cmp	r0, #0
    6868:	beq	6878 <eval_boolean+0x1708>
    686c:	mvn	r0, #0
    6870:	str	r0, [fp, #-12]
    6874:	b	6e64 <eval_boolean+0x1cf4>
    6878:	movw	r0, #0
    687c:	str	r0, [sp, #1160]	; 0x488
    6880:	ldr	r0, [sp, #1160]	; 0x488
    6884:	ldr	r1, [sp, #1164]	; 0x48c
    6888:	cmp	r0, r1
    688c:	bge	6928 <eval_boolean+0x17b8>
    6890:	ldr	r0, [fp, #-16]
    6894:	ldr	r1, [fp, #-28]	; 0xffffffe4
    6898:	ldr	r1, [r1, #20]
    689c:	add	lr, sp, #1024	; 0x400
    68a0:	add	r2, lr, #132	; 0x84
    68a4:	bl	5170 <eval_boolean>
    68a8:	cmp	r0, #0
    68ac:	beq	68bc <eval_boolean+0x174c>
    68b0:	mvn	r0, #0
    68b4:	str	r0, [fp, #-12]
    68b8:	b	6e64 <eval_boolean+0x1cf4>
    68bc:	ldr	r0, [sp, #1156]	; 0x484
    68c0:	cmp	r0, #0
    68c4:	bne	68dc <eval_boolean+0x176c>
    68c8:	ldr	r0, [fp, #-24]	; 0xffffffe8
    68cc:	movw	r1, #0
    68d0:	str	r1, [r0]
    68d4:	str	r1, [fp, #-12]
    68d8:	b	6e64 <eval_boolean+0x1cf4>
    68dc:	ldr	r0, [sp, #1160]	; 0x488
    68e0:	ldr	r1, [sp, #1164]	; 0x48c
    68e4:	sub	r1, r1, #1
    68e8:	cmp	r0, r1
    68ec:	bge	6914 <eval_boolean+0x17a4>
    68f0:	ldr	r0, [fp, #-16]
    68f4:	add	r0, r0, #8
    68f8:	bl	0 <coda_cursor_goto_next_array_element>
    68fc:	cmp	r0, #0
    6900:	beq	6910 <eval_boolean+0x17a0>
    6904:	mvn	r0, #0
    6908:	str	r0, [fp, #-12]
    690c:	b	6e64 <eval_boolean+0x1cf4>
    6910:	b	6914 <eval_boolean+0x17a4>
    6914:	b	6918 <eval_boolean+0x17a8>
    6918:	ldr	r0, [sp, #1160]	; 0x488
    691c:	add	r0, r0, #1
    6920:	str	r0, [sp, #1160]	; 0x488
    6924:	b	6880 <eval_boolean+0x1710>
    6928:	b	692c <eval_boolean+0x17bc>
    692c:	ldr	r0, [fp, #-24]	; 0xffffffe8
    6930:	movw	r1, #1
    6934:	str	r1, [r0]
    6938:	ldr	r0, [fp, #-16]
    693c:	add	r0, r0, #8
    6940:	add	r1, sp, #1168	; 0x490
    6944:	movw	r2, #520	; 0x208
    6948:	bl	0 <memcpy>
    694c:	b	6e5c <eval_boolean+0x1cec>
    6950:	ldr	r0, [fp, #-16]
    6954:	ldr	r0, [r0]
    6958:	movw	r1, #0
    695c:	cmp	r0, r1
    6960:	beq	6968 <eval_boolean+0x17f8>
    6964:	b	6988 <eval_boolean+0x1818>
    6968:	movw	r0, #0
    696c:	movt	r0, #0
    6970:	movw	r1, #0
    6974:	movt	r1, #0
    6978:	movw	r2, #1239	; 0x4d7
    697c:	movw	r3, #0
    6980:	movt	r3, #0
    6984:	bl	0 <__assert_fail>
    6988:	ldr	r0, [fp, #-16]
    698c:	add	r0, r0, #8
    6990:	add	r1, sp, #632	; 0x278
    6994:	str	r0, [sp, #20]
    6998:	mov	r0, r1
    699c:	ldr	r1, [sp, #20]
    69a0:	movw	r2, #520	; 0x208
    69a4:	bl	0 <memcpy>
    69a8:	ldr	r0, [fp, #-16]
    69ac:	ldr	r1, [fp, #-28]	; 0xffffffe4
    69b0:	ldr	r1, [r1, #16]
    69b4:	bl	d154 <eval_cursor>
    69b8:	cmp	r0, #0
    69bc:	beq	69cc <eval_boolean+0x185c>
    69c0:	mvn	r0, #0
    69c4:	str	r0, [fp, #-12]
    69c8:	b	6e64 <eval_boolean+0x1cf4>
    69cc:	ldr	r0, [fp, #-16]
    69d0:	add	r0, r0, #8
    69d4:	add	r1, sp, #628	; 0x274
    69d8:	bl	0 <coda_cursor_get_num_elements>
    69dc:	cmp	r0, #0
    69e0:	beq	69f0 <eval_boolean+0x1880>
    69e4:	mvn	r0, #0
    69e8:	str	r0, [fp, #-12]
    69ec:	b	6e64 <eval_boolean+0x1cf4>
    69f0:	ldr	r0, [sp, #628]	; 0x274
    69f4:	cmp	r0, #0
    69f8:	ble	6ad0 <eval_boolean+0x1960>
    69fc:	ldr	r0, [fp, #-16]
    6a00:	add	r0, r0, #8
    6a04:	bl	0 <coda_cursor_goto_first_array_element>
    6a08:	cmp	r0, #0
    6a0c:	beq	6a1c <eval_boolean+0x18ac>
    6a10:	mvn	r0, #0
    6a14:	str	r0, [fp, #-12]
    6a18:	b	6e64 <eval_boolean+0x1cf4>
    6a1c:	movw	r0, #0
    6a20:	str	r0, [sp, #624]	; 0x270
    6a24:	ldr	r0, [sp, #624]	; 0x270
    6a28:	ldr	r1, [sp, #628]	; 0x274
    6a2c:	cmp	r0, r1
    6a30:	bge	6acc <eval_boolean+0x195c>
    6a34:	ldr	r0, [fp, #-16]
    6a38:	ldr	r1, [fp, #-28]	; 0xffffffe4
    6a3c:	ldr	r1, [r1, #20]
    6a40:	add	r2, sp, #620	; 0x26c
    6a44:	bl	5170 <eval_boolean>
    6a48:	cmp	r0, #0
    6a4c:	beq	6a5c <eval_boolean+0x18ec>
    6a50:	mvn	r0, #0
    6a54:	str	r0, [fp, #-12]
    6a58:	b	6e64 <eval_boolean+0x1cf4>
    6a5c:	ldr	r0, [sp, #620]	; 0x26c
    6a60:	cmp	r0, #0
    6a64:	beq	6a80 <eval_boolean+0x1910>
    6a68:	ldr	r0, [fp, #-24]	; 0xffffffe8
    6a6c:	movw	r1, #1
    6a70:	str	r1, [r0]
    6a74:	movw	r0, #0
    6a78:	str	r0, [fp, #-12]
    6a7c:	b	6e64 <eval_boolean+0x1cf4>
    6a80:	ldr	r0, [sp, #624]	; 0x270
    6a84:	ldr	r1, [sp, #628]	; 0x274
    6a88:	sub	r1, r1, #1
    6a8c:	cmp	r0, r1
    6a90:	bge	6ab8 <eval_boolean+0x1948>
    6a94:	ldr	r0, [fp, #-16]
    6a98:	add	r0, r0, #8
    6a9c:	bl	0 <coda_cursor_goto_next_array_element>
    6aa0:	cmp	r0, #0
    6aa4:	beq	6ab4 <eval_boolean+0x1944>
    6aa8:	mvn	r0, #0
    6aac:	str	r0, [fp, #-12]
    6ab0:	b	6e64 <eval_boolean+0x1cf4>
    6ab4:	b	6ab8 <eval_boolean+0x1948>
    6ab8:	b	6abc <eval_boolean+0x194c>
    6abc:	ldr	r0, [sp, #624]	; 0x270
    6ac0:	add	r0, r0, #1
    6ac4:	str	r0, [sp, #624]	; 0x270
    6ac8:	b	6a24 <eval_boolean+0x18b4>
    6acc:	b	6ad0 <eval_boolean+0x1960>
    6ad0:	ldr	r0, [fp, #-24]	; 0xffffffe8
    6ad4:	movw	r1, #0
    6ad8:	str	r1, [r0]
    6adc:	ldr	r0, [fp, #-16]
    6ae0:	add	r0, r0, #8
    6ae4:	add	r1, sp, #632	; 0x278
    6ae8:	movw	r2, #520	; 0x208
    6aec:	bl	0 <memcpy>
    6af0:	b	6e5c <eval_boolean+0x1cec>
    6af4:	ldr	r0, [fp, #-16]
    6af8:	ldr	r0, [r0]
    6afc:	movw	r1, #0
    6b00:	cmp	r0, r1
    6b04:	beq	6b0c <eval_boolean+0x199c>
    6b08:	b	6b2c <eval_boolean+0x19bc>
    6b0c:	movw	r0, #0
    6b10:	movt	r0, #0
    6b14:	movw	r1, #0
    6b18:	movt	r1, #0
    6b1c:	movw	r2, #1288	; 0x508
    6b20:	movw	r3, #0
    6b24:	movt	r3, #0
    6b28:	bl	0 <__assert_fail>
    6b2c:	ldr	r0, [fp, #-16]
    6b30:	ldr	r0, [r0, #560]	; 0x230
    6b34:	movw	r1, #0
    6b38:	cmp	r0, r1
    6b3c:	beq	6b5c <eval_boolean+0x19ec>
    6b40:	mvn	r0, #400	; 0x190
    6b44:	movw	r1, #0
    6b48:	movt	r1, #0
    6b4c:	bl	0 <coda_set_error>
    6b50:	mvn	r0, #0
    6b54:	str	r0, [fp, #-12]
    6b58:	b	6e64 <eval_boolean+0x1cf4>
    6b5c:	ldr	r0, [fp, #-16]
    6b60:	ldr	r0, [r0]
    6b64:	ldr	r0, [r0]
    6b68:	ldr	r1, [fp, #-28]	; 0xffffffe4
    6b6c:	ldr	r1, [r1, #12]
    6b70:	add	r2, sp, #616	; 0x268
    6b74:	bl	0 <coda_product_variable_get_size>
    6b78:	cmp	r0, #0
    6b7c:	beq	6b8c <eval_boolean+0x1a1c>
    6b80:	mvn	r0, #0
    6b84:	str	r0, [fp, #-12]
    6b88:	b	6e64 <eval_boolean+0x1cf4>
    6b8c:	ldr	r0, [fp, #-28]	; 0xffffffe4
    6b90:	ldr	r0, [r0, #12]
    6b94:	ldr	r1, [fp, #-16]
    6b98:	str	r0, [r1, #560]	; 0x230
    6b9c:	movw	r0, #0
    6ba0:	str	r0, [sp, #612]	; 0x264
    6ba4:	ldr	r0, [sp, #612]	; 0x264
    6ba8:	ldr	r1, [sp, #616]	; 0x268
    6bac:	cmp	r0, r1
    6bb0:	bge	6c30 <eval_boolean+0x1ac0>
    6bb4:	ldr	r0, [sp, #612]	; 0x264
    6bb8:	asr	r1, r0, #31
    6bbc:	ldr	r2, [fp, #-16]
    6bc0:	str	r0, [r2, #552]	; 0x228
    6bc4:	str	r1, [r2, #556]	; 0x22c
    6bc8:	ldr	r0, [fp, #-16]
    6bcc:	ldr	r1, [fp, #-28]	; 0xffffffe4
    6bd0:	ldr	r1, [r1, #16]
    6bd4:	add	r2, sp, #608	; 0x260
    6bd8:	bl	5170 <eval_boolean>
    6bdc:	cmp	r0, #0
    6be0:	beq	6bf0 <eval_boolean+0x1a80>
    6be4:	mvn	r0, #0
    6be8:	str	r0, [fp, #-12]
    6bec:	b	6e64 <eval_boolean+0x1cf4>
    6bf0:	ldr	r0, [sp, #608]	; 0x260
    6bf4:	cmp	r0, #0
    6bf8:	beq	6c1c <eval_boolean+0x1aac>
    6bfc:	ldr	r0, [fp, #-24]	; 0xffffffe8
    6c00:	movw	r1, #1
    6c04:	str	r1, [r0]
    6c08:	ldr	r0, [fp, #-16]
    6c0c:	movw	r1, #0
    6c10:	str	r1, [r0, #560]	; 0x230
    6c14:	str	r1, [fp, #-12]
    6c18:	b	6e64 <eval_boolean+0x1cf4>
    6c1c:	b	6c20 <eval_boolean+0x1ab0>
    6c20:	ldr	r0, [sp, #612]	; 0x264
    6c24:	add	r0, r0, #1
    6c28:	str	r0, [sp, #612]	; 0x264
    6c2c:	b	6ba4 <eval_boolean+0x1a34>
    6c30:	ldr	r0, [fp, #-24]	; 0xffffffe8
    6c34:	movw	r1, #0
    6c38:	str	r1, [r0]
    6c3c:	ldr	r0, [fp, #-16]
    6c40:	str	r1, [r0, #560]	; 0x230
    6c44:	b	6e5c <eval_boolean+0x1cec>
    6c48:	ldr	r0, [fp, #-16]
    6c4c:	ldr	r1, [fp, #-28]	; 0xffffffe4
    6c50:	ldr	r1, [r1, #16]
    6c54:	add	r2, sp, #604	; 0x25c
    6c58:	bl	5170 <eval_boolean>
    6c5c:	cmp	r0, #0
    6c60:	beq	6c70 <eval_boolean+0x1b00>
    6c64:	mvn	r0, #0
    6c68:	str	r0, [fp, #-12]
    6c6c:	b	6e64 <eval_boolean+0x1cf4>
    6c70:	ldr	r0, [sp, #604]	; 0x25c
    6c74:	cmp	r0, #0
    6c78:	beq	6ca8 <eval_boolean+0x1b38>
    6c7c:	ldr	r0, [fp, #-16]
    6c80:	ldr	r1, [fp, #-28]	; 0xffffffe4
    6c84:	ldr	r1, [r1, #20]
    6c88:	ldr	r2, [fp, #-24]	; 0xffffffe8
    6c8c:	bl	5170 <eval_boolean>
    6c90:	cmp	r0, #0
    6c94:	beq	6ca4 <eval_boolean+0x1b34>
    6c98:	mvn	r0, #0
    6c9c:	str	r0, [fp, #-12]
    6ca0:	b	6e64 <eval_boolean+0x1cf4>
    6ca4:	b	6cd4 <eval_boolean+0x1b64>
    6ca8:	ldr	r0, [fp, #-16]
    6cac:	ldr	r1, [fp, #-28]	; 0xffffffe4
    6cb0:	ldr	r1, [r1, #24]
    6cb4:	ldr	r2, [fp, #-24]	; 0xffffffe8
    6cb8:	bl	5170 <eval_boolean>
    6cbc:	cmp	r0, #0
    6cc0:	beq	6cd0 <eval_boolean+0x1b60>
    6cc4:	mvn	r0, #0
    6cc8:	str	r0, [fp, #-12]
    6ccc:	b	6e64 <eval_boolean+0x1cf4>
    6cd0:	b	6cd4 <eval_boolean+0x1b64>
    6cd4:	b	6e5c <eval_boolean+0x1cec>
    6cd8:	ldr	r0, [fp, #-16]
    6cdc:	ldr	r0, [r0]
    6ce0:	movw	r1, #0
    6ce4:	cmp	r0, r1
    6ce8:	beq	6cf0 <eval_boolean+0x1b80>
    6cec:	b	6d10 <eval_boolean+0x1ba0>
    6cf0:	movw	r0, #0
    6cf4:	movt	r0, #0
    6cf8:	movw	r1, #0
    6cfc:	movt	r1, #0
    6d00:	movw	r2, #1348	; 0x544
    6d04:	movw	r3, #0
    6d08:	movt	r3, #0
    6d0c:	bl	0 <__assert_fail>
    6d10:	ldr	r0, [fp, #-16]
    6d14:	add	r0, r0, #8
    6d18:	add	r1, sp, #80	; 0x50
    6d1c:	str	r0, [sp, #16]
    6d20:	mov	r0, r1
    6d24:	ldr	r1, [sp, #16]
    6d28:	movw	r2, #520	; 0x208
    6d2c:	bl	0 <memcpy>
    6d30:	ldr	r0, [fp, #-16]
    6d34:	ldr	r1, [fp, #-28]	; 0xffffffe4
    6d38:	ldr	r1, [r1, #16]
    6d3c:	bl	d154 <eval_cursor>
    6d40:	cmp	r0, #0
    6d44:	beq	6d54 <eval_boolean+0x1be4>
    6d48:	mvn	r0, #0
    6d4c:	str	r0, [fp, #-12]
    6d50:	b	6e64 <eval_boolean+0x1cf4>
    6d54:	ldr	r0, [fp, #-16]
    6d58:	ldr	r1, [fp, #-28]	; 0xffffffe4
    6d5c:	ldr	r1, [r1, #20]
    6d60:	ldr	r2, [fp, #-24]	; 0xffffffe8
    6d64:	bl	5170 <eval_boolean>
    6d68:	cmp	r0, #0
    6d6c:	beq	6d7c <eval_boolean+0x1c0c>
    6d70:	mvn	r0, #0
    6d74:	str	r0, [fp, #-12]
    6d78:	b	6e64 <eval_boolean+0x1cf4>
    6d7c:	ldr	r0, [fp, #-16]
    6d80:	add	r0, r0, #8
    6d84:	add	r1, sp, #80	; 0x50
    6d88:	movw	r2, #520	; 0x208
    6d8c:	bl	0 <memcpy>
    6d90:	b	6e5c <eval_boolean+0x1cec>
    6d94:	ldr	r0, [fp, #-28]	; 0xffffffe4
    6d98:	ldr	r0, [r0, #12]
    6d9c:	ldrb	r0, [r0]
    6da0:	sub	r0, r0, #105	; 0x69
    6da4:	str	r0, [sp, #68]	; 0x44
    6da8:	ldr	r0, [fp, #-16]
    6dac:	ldr	r1, [sp, #68]	; 0x44
    6db0:	add	r0, r0, r1, lsl #3
    6db4:	ldr	r1, [r0, #528]	; 0x210
    6db8:	ldr	r0, [r0, #532]	; 0x214
    6dbc:	str	r0, [sp, #76]	; 0x4c
    6dc0:	str	r1, [sp, #72]	; 0x48
    6dc4:	ldr	r0, [fp, #-16]
    6dc8:	ldr	r1, [fp, #-28]	; 0xffffffe4
    6dcc:	ldr	r1, [r1, #16]
    6dd0:	add	r2, r0, #528	; 0x210
    6dd4:	ldr	r3, [sp, #68]	; 0x44
    6dd8:	add	r2, r2, r3, lsl #3
    6ddc:	bl	6f70 <eval_integer>
    6de0:	cmp	r0, #0
    6de4:	beq	6df4 <eval_boolean+0x1c84>
    6de8:	mvn	r0, #0
    6dec:	str	r0, [fp, #-12]
    6df0:	b	6e64 <eval_boolean+0x1cf4>
    6df4:	ldr	r0, [fp, #-16]
    6df8:	ldr	r1, [fp, #-28]	; 0xffffffe4
    6dfc:	ldr	r1, [r1, #20]
    6e00:	ldr	r2, [fp, #-24]	; 0xffffffe8
    6e04:	bl	5170 <eval_boolean>
    6e08:	cmp	r0, #0
    6e0c:	beq	6e1c <eval_boolean+0x1cac>
    6e10:	mvn	r0, #0
    6e14:	str	r0, [fp, #-12]
    6e18:	b	6e64 <eval_boolean+0x1cf4>
    6e1c:	ldr	r0, [sp, #72]	; 0x48
    6e20:	ldr	r1, [sp, #76]	; 0x4c
    6e24:	ldr	r2, [fp, #-16]
    6e28:	ldr	r3, [sp, #68]	; 0x44
    6e2c:	add	r2, r2, r3, lsl #3
    6e30:	str	r1, [r2, #532]	; 0x214
    6e34:	str	r0, [r2, #528]	; 0x210
    6e38:	b	6e5c <eval_boolean+0x1cec>
    6e3c:	movw	r0, #0
    6e40:	movt	r0, #0
    6e44:	movw	r1, #0
    6e48:	movt	r1, #0
    6e4c:	movw	r2, #1379	; 0x563
    6e50:	movw	r3, #0
    6e54:	movt	r3, #0
    6e58:	bl	0 <__assert_fail>
    6e5c:	movw	r0, #0
    6e60:	str	r0, [fp, #-12]
    6e64:	ldr	r0, [fp, #-12]
    6e68:	sub	sp, fp, #8
    6e6c:	pop	{r4, sl, fp, pc}
    6e70:	.word	0x00000800
    6e74:	.word	0x000007e0

00006e78 <coda_expression_eval_integer>:
    6e78:	push	{r4, r5, fp, lr}
    6e7c:	add	fp, sp, #8
    6e80:	sub	sp, sp, #584	; 0x248
    6e84:	str	r0, [fp, #-16]
    6e88:	str	r1, [fp, #-20]	; 0xffffffec
    6e8c:	str	r2, [fp, #-24]	; 0xffffffe8
    6e90:	ldr	r0, [fp, #-16]
    6e94:	ldr	r0, [r0, #4]
    6e98:	cmp	r0, #1
    6e9c:	beq	6ebc <coda_expression_eval_integer+0x44>
    6ea0:	mvn	r0, #99	; 0x63
    6ea4:	movw	r1, #0
    6ea8:	movt	r1, #0
    6eac:	bl	0 <coda_set_error>
    6eb0:	mvn	r0, #0
    6eb4:	str	r0, [fp, #-12]
    6eb8:	b	6f64 <coda_expression_eval_integer+0xec>
    6ebc:	ldr	r0, [fp, #-20]	; 0xffffffec
    6ec0:	movw	r1, #0
    6ec4:	cmp	r0, r1
    6ec8:	bne	6ef8 <coda_expression_eval_integer+0x80>
    6ecc:	ldr	r0, [fp, #-16]
    6ed0:	ldr	r0, [r0, #8]
    6ed4:	cmp	r0, #0
    6ed8:	bne	6ef8 <coda_expression_eval_integer+0x80>
    6edc:	mvn	r0, #99	; 0x63
    6ee0:	movw	r1, #0
    6ee4:	movt	r1, #0
    6ee8:	bl	0 <coda_set_error>
    6eec:	mvn	r0, #0
    6ef0:	str	r0, [fp, #-12]
    6ef4:	b	6f64 <coda_expression_eval_integer+0xec>
    6ef8:	ldr	r1, [fp, #-20]	; 0xffffffec
    6efc:	mov	r0, sp
    6f00:	bl	c0c <init_eval_info>
    6f04:	ldr	r1, [fp, #-16]
    6f08:	ldr	r2, [fp, #-24]	; 0xffffffe8
    6f0c:	mov	r0, sp
    6f10:	bl	6f70 <eval_integer>
    6f14:	cmp	r0, #0
    6f18:	beq	6f5c <coda_expression_eval_integer+0xe4>
    6f1c:	ldr	r0, [fp, #-20]	; 0xffffffec
    6f20:	movw	r1, #0
    6f24:	cmp	r0, r1
    6f28:	beq	6f50 <coda_expression_eval_integer+0xd8>
    6f2c:	ldr	r0, [fp, #-20]	; 0xffffffec
    6f30:	mov	r1, sp
    6f34:	add	r1, r1, #8
    6f38:	bl	0 <coda_cursor_compare>
    6f3c:	cmp	r0, #0
    6f40:	beq	6f50 <coda_expression_eval_integer+0xd8>
    6f44:	mov	r0, sp
    6f48:	add	r0, r0, #8
    6f4c:	bl	0 <coda_cursor_add_to_error_message>
    6f50:	mvn	r0, #0
    6f54:	str	r0, [fp, #-12]
    6f58:	b	6f64 <coda_expression_eval_integer+0xec>
    6f5c:	movw	r0, #0
    6f60:	str	r0, [fp, #-12]
    6f64:	ldr	r0, [fp, #-12]
    6f68:	sub	sp, fp, #8
    6f6c:	pop	{r4, r5, fp, pc}

00006f70 <eval_integer>:
    6f70:	push	{r4, r5, fp, lr}
    6f74:	add	fp, sp, #8
    6f78:	sub	sp, sp, #1264	; 0x4f0
    6f7c:	sub	sp, sp, #8192	; 0x2000
    6f80:	add	lr, sp, #4096	; 0x1000
    6f84:	add	r3, lr, #324	; 0x144
    6f88:	str	r0, [fp, #-16]
    6f8c:	str	r1, [fp, #-20]	; 0xffffffec
    6f90:	str	r2, [fp, #-24]	; 0xffffffe8
    6f94:	ldr	r0, [fp, #-20]	; 0xffffffec
    6f98:	ldr	r0, [r0]
    6f9c:	cmp	r0, #20
    6fa0:	str	r3, [sp, #168]	; 0xa8
    6fa4:	bne	6fcc <eval_integer+0x5c>
    6fa8:	ldr	r0, [fp, #-20]	; 0xffffffec
    6fac:	ldr	r1, [r0, #16]
    6fb0:	ldr	r0, [r0, #20]
    6fb4:	ldr	r2, [fp, #-24]	; 0xffffffe8
    6fb8:	str	r0, [r2, #4]
    6fbc:	str	r1, [r2]
    6fc0:	movw	r0, #0
    6fc4:	str	r0, [fp, #-12]
    6fc8:	b	9454 <eval_integer+0x24e4>
    6fcc:	ldr	r0, [fp, #-20]	; 0xffffffec
    6fd0:	str	r0, [fp, #-28]	; 0xffffffe4
    6fd4:	ldr	r0, [fp, #-28]	; 0xffffffe4
    6fd8:	ldr	r0, [r0]
    6fdc:	cmp	r0, #86	; 0x56
    6fe0:	str	r0, [sp, #164]	; 0xa4
    6fe4:	bhi	942c <eval_integer+0x24bc>
    6fe8:	add	r0, pc, #8
    6fec:	ldr	r1, [sp, #164]	; 0xa4
    6ff0:	ldr	r0, [r0, r1, lsl #2]
    6ff4:	mov	pc, r0
    6ff8:	.word	0x00007414
    6ffc:	.word	0x000074a0
    7000:	.word	0x0000775c
    7004:	.word	0x00007bf8
    7008:	.word	0x0000942c
    700c:	.word	0x00007a3c
    7010:	.word	0x0000942c
    7014:	.word	0x00008148
    7018:	.word	0x00007da4
    701c:	.word	0x00007f7c
    7020:	.word	0x0000942c
    7024:	.word	0x000092c0
    7028:	.word	0x00008c9c
    702c:	.word	0x00008aac
    7030:	.word	0x00008d5c
    7034:	.word	0x00008ba4
    7038:	.word	0x0000942c
    703c:	.word	0x0000942c
    7040:	.word	0x0000942c
    7044:	.word	0x0000942c
    7048:	.word	0x0000942c
    704c:	.word	0x0000942c
    7050:	.word	0x0000942c
    7054:	.word	0x00008744
    7058:	.word	0x0000760c
    705c:	.word	0x0000942c
    7060:	.word	0x0000942c
    7064:	.word	0x00008e14
    7068:	.word	0x0000942c
    706c:	.word	0x0000942c
    7070:	.word	0x0000942c
    7074:	.word	0x0000942c
    7078:	.word	0x0000942c
    707c:	.word	0x0000942c
    7080:	.word	0x0000942c
    7084:	.word	0x0000942c
    7088:	.word	0x0000942c
    708c:	.word	0x0000942c
    7090:	.word	0x0000942c
    7094:	.word	0x0000942c
    7098:	.word	0x0000942c
    709c:	.word	0x0000942c
    70a0:	.word	0x000079ac
    70a4:	.word	0x00008ef4
    70a8:	.word	0x00008fc0
    70ac:	.word	0x00007154
    70b0:	.word	0x0000942c
    70b4:	.word	0x0000942c
    70b8:	.word	0x0000942c
    70bc:	.word	0x0000942c
    70c0:	.word	0x000085d8
    70c4:	.word	0x0000942c
    70c8:	.word	0x0000942c
    70cc:	.word	0x0000942c
    70d0:	.word	0x0000942c
    70d4:	.word	0x0000942c
    70d8:	.word	0x0000784c
    70dc:	.word	0x000078fc
    70e0:	.word	0x000076b4
    70e4:	.word	0x00007590
    70e8:	.word	0x000073cc
    70ec:	.word	0x0000942c
    70f0:	.word	0x0000942c
    70f4:	.word	0x000088dc
    70f8:	.word	0x000089d4
    70fc:	.word	0x000077d4
    7100:	.word	0x0000942c
    7104:	.word	0x0000942c
    7108:	.word	0x0000942c
    710c:	.word	0x0000942c
    7110:	.word	0x00008e78
    7114:	.word	0x0000942c
    7118:	.word	0x0000942c
    711c:	.word	0x0000942c
    7120:	.word	0x0000942c
    7124:	.word	0x0000942c
    7128:	.word	0x0000942c
    712c:	.word	0x0000942c
    7130:	.word	0x00007518
    7134:	.word	0x0000942c
    7138:	.word	0x0000942c
    713c:	.word	0x00008330
    7140:	.word	0x0000942c
    7144:	.word	0x00008fec
    7148:	.word	0x0000942c
    714c:	.word	0x00009150
    7150:	.word	0x00009380
    7154:	ldr	r0, [fp, #-28]	; 0xffffffe4
    7158:	ldr	r0, [r0, #16]
    715c:	ldr	r0, [r0, #4]
    7160:	cmp	r0, #4
    7164:	bne	72d4 <eval_integer+0x364>
    7168:	ldr	r0, [fp, #-16]
    716c:	ldr	r0, [r0]
    7170:	movw	r1, #0
    7174:	cmp	r0, r1
    7178:	beq	7180 <eval_integer+0x210>
    717c:	b	71a0 <eval_integer+0x230>
    7180:	movw	r0, #0
    7184:	movt	r0, #0
    7188:	movw	r1, #0
    718c:	movt	r1, #0
    7190:	movw	r2, #1936	; 0x790
    7194:	movw	r3, #0
    7198:	movt	r3, #0
    719c:	bl	0 <__assert_fail>
    71a0:	ldr	r0, [fp, #-16]
    71a4:	add	r0, r0, #8
    71a8:	sub	r1, fp, #552	; 0x228
    71ac:	str	r0, [sp, #160]	; 0xa0
    71b0:	mov	r0, r1
    71b4:	ldr	r1, [sp, #160]	; 0xa0
    71b8:	movw	r2, #520	; 0x208
    71bc:	bl	0 <memcpy>
    71c0:	ldr	r0, [fp, #-16]
    71c4:	ldr	r1, [fp, #-28]	; 0xffffffe4
    71c8:	ldr	r1, [r1, #16]
    71cc:	bl	d154 <eval_cursor>
    71d0:	cmp	r0, #0
    71d4:	beq	71e4 <eval_integer+0x274>
    71d8:	mvn	r0, #0
    71dc:	str	r0, [fp, #-12]
    71e0:	b	9454 <eval_integer+0x24e4>
    71e4:	bl	0 <coda_get_option_perform_conversions>
    71e8:	str	r0, [fp, #-560]	; 0xfffffdd0
    71ec:	movw	r0, #0
    71f0:	bl	0 <coda_set_option_perform_conversions>
    71f4:	ldr	r1, [fp, #-16]
    71f8:	add	r1, r1, #8
    71fc:	str	r0, [sp, #156]	; 0x9c
    7200:	mov	r0, r1
    7204:	sub	r1, fp, #556	; 0x22c
    7208:	bl	0 <coda_cursor_get_read_type>
    720c:	cmp	r0, #0
    7210:	beq	7228 <eval_integer+0x2b8>
    7214:	ldr	r0, [fp, #-560]	; 0xfffffdd0
    7218:	bl	0 <coda_set_option_perform_conversions>
    721c:	mvn	r1, #0
    7220:	str	r1, [fp, #-12]
    7224:	b	9454 <eval_integer+0x24e4>
    7228:	ldr	r0, [fp, #-556]	; 0xfffffdd4
    722c:	cmp	r0, #7
    7230:	bne	7278 <eval_integer+0x308>
    7234:	ldr	r0, [fp, #-16]
    7238:	add	r0, r0, #8
    723c:	sub	r1, fp, #568	; 0x238
    7240:	bl	0 <coda_cursor_read_uint64>
    7244:	cmp	r0, #0
    7248:	beq	7260 <eval_integer+0x2f0>
    724c:	ldr	r0, [fp, #-560]	; 0xfffffdd0
    7250:	bl	0 <coda_set_option_perform_conversions>
    7254:	mvn	r1, #0
    7258:	str	r1, [fp, #-12]
    725c:	b	9454 <eval_integer+0x24e4>
    7260:	ldr	r0, [fp, #-568]	; 0xfffffdc8
    7264:	ldr	r1, [fp, #-564]	; 0xfffffdcc
    7268:	ldr	r2, [fp, #-24]	; 0xffffffe8
    726c:	str	r1, [r2, #4]
    7270:	str	r0, [r2]
    7274:	b	72a8 <eval_integer+0x338>
    7278:	ldr	r0, [fp, #-16]
    727c:	add	r0, r0, #8
    7280:	ldr	r1, [fp, #-24]	; 0xffffffe8
    7284:	bl	0 <coda_cursor_read_int64>
    7288:	cmp	r0, #0
    728c:	beq	72a4 <eval_integer+0x334>
    7290:	ldr	r0, [fp, #-560]	; 0xfffffdd0
    7294:	bl	0 <coda_set_option_perform_conversions>
    7298:	mvn	r1, #0
    729c:	str	r1, [fp, #-12]
    72a0:	b	9454 <eval_integer+0x24e4>
    72a4:	b	72a8 <eval_integer+0x338>
    72a8:	ldr	r0, [fp, #-560]	; 0xfffffdd0
    72ac:	bl	0 <coda_set_option_perform_conversions>
    72b0:	ldr	r1, [fp, #-16]
    72b4:	add	r1, r1, #8
    72b8:	sub	r2, fp, #552	; 0x228
    72bc:	str	r0, [sp, #152]	; 0x98
    72c0:	mov	r0, r1
    72c4:	mov	r1, r2
    72c8:	movw	r2, #520	; 0x208
    72cc:	bl	0 <memcpy>
    72d0:	b	73c8 <eval_integer+0x458>
    72d4:	ldr	r0, [fp, #-28]	; 0xffffffe4
    72d8:	ldr	r0, [r0, #16]
    72dc:	ldr	r0, [r0, #4]
    72e0:	cmp	r0, #0
    72e4:	bne	7328 <eval_integer+0x3b8>
    72e8:	ldr	r0, [fp, #-16]
    72ec:	ldr	r1, [fp, #-28]	; 0xffffffe4
    72f0:	ldr	r1, [r1, #16]
    72f4:	sub	r2, fp, #572	; 0x23c
    72f8:	bl	5170 <eval_boolean>
    72fc:	cmp	r0, #0
    7300:	beq	7310 <eval_integer+0x3a0>
    7304:	mvn	r0, #0
    7308:	str	r0, [fp, #-12]
    730c:	b	9454 <eval_integer+0x24e4>
    7310:	ldr	r0, [fp, #-572]	; 0xfffffdc4
    7314:	asr	r1, r0, #31
    7318:	ldr	r2, [fp, #-24]	; 0xffffffe8
    731c:	str	r0, [r2]
    7320:	str	r1, [r2, #4]
    7324:	b	73c4 <eval_integer+0x454>
    7328:	ldr	r0, [fp, #-16]
    732c:	ldr	r1, [fp, #-28]	; 0xffffffe4
    7330:	ldr	r1, [r1, #16]
    7334:	sub	r2, fp, #576	; 0x240
    7338:	sub	r3, fp, #580	; 0x244
    733c:	sub	ip, fp, #584	; 0x248
    7340:	str	ip, [sp]
    7344:	bl	aacc <eval_string>
    7348:	cmp	r0, #0
    734c:	beq	735c <eval_integer+0x3ec>
    7350:	mvn	r0, #0
    7354:	str	r0, [fp, #-12]
    7358:	b	9454 <eval_integer+0x24e4>
    735c:	ldr	r0, [fp, #-580]	; 0xfffffdbc
    7360:	cmp	r0, #0
    7364:	bne	7384 <eval_integer+0x414>
    7368:	mvn	r0, #102	; 0x66
    736c:	movw	r1, #0
    7370:	movt	r1, #0
    7374:	bl	0 <coda_set_error>
    7378:	mvn	r0, #0
    737c:	str	r0, [fp, #-12]
    7380:	b	9454 <eval_integer+0x24e4>
    7384:	ldr	r0, [fp, #-584]	; 0xfffffdb8
    7388:	ldr	r1, [fp, #-576]	; 0xfffffdc0
    738c:	add	r0, r0, r1
    7390:	ldr	r1, [fp, #-580]	; 0xfffffdbc
    7394:	ldr	r2, [fp, #-24]	; 0xffffffe8
    7398:	movw	r3, #0
    739c:	bl	0 <coda_ascii_parse_int64>
    73a0:	cmp	r0, #0
    73a4:	bge	73bc <eval_integer+0x44c>
    73a8:	ldr	r0, [fp, #-584]	; 0xfffffdb8
    73ac:	bl	0 <free>
    73b0:	mvn	r0, #0
    73b4:	str	r0, [fp, #-12]
    73b8:	b	9454 <eval_integer+0x24e4>
    73bc:	ldr	r0, [fp, #-584]	; 0xfffffdb8
    73c0:	bl	0 <free>
    73c4:	b	73c8 <eval_integer+0x458>
    73c8:	b	944c <eval_integer+0x24dc>
    73cc:	ldr	r0, [fp, #-16]
    73d0:	ldr	r1, [fp, #-28]	; 0xffffffe4
    73d4:	ldr	r1, [r1, #16]
    73d8:	ldr	r2, [fp, #-24]	; 0xffffffe8
    73dc:	bl	6f70 <eval_integer>
    73e0:	cmp	r0, #0
    73e4:	beq	73f4 <eval_integer+0x484>
    73e8:	mvn	r0, #0
    73ec:	str	r0, [fp, #-12]
    73f0:	b	9454 <eval_integer+0x24e4>
    73f4:	ldr	r0, [fp, #-24]	; 0xffffffe8
    73f8:	ldr	r1, [r0]
    73fc:	ldr	r2, [r0, #4]
    7400:	rsbs	r1, r1, #0
    7404:	rsc	r2, r2, #0
    7408:	str	r1, [r0]
    740c:	str	r2, [r0, #4]
    7410:	b	944c <eval_integer+0x24dc>
    7414:	ldr	r0, [fp, #-16]
    7418:	ldr	r1, [fp, #-28]	; 0xffffffe4
    741c:	ldr	r1, [r1, #16]
    7420:	ldr	r2, [fp, #-24]	; 0xffffffe8
    7424:	bl	6f70 <eval_integer>
    7428:	cmp	r0, #0
    742c:	beq	743c <eval_integer+0x4cc>
    7430:	mvn	r0, #0
    7434:	str	r0, [fp, #-12]
    7438:	b	9454 <eval_integer+0x24e4>
    743c:	ldr	r0, [fp, #-24]	; 0xffffffe8
    7440:	ldr	r0, [r0, #4]
    7444:	cmp	r0, #0
    7448:	bmi	7468 <eval_integer+0x4f8>
    744c:	b	7450 <eval_integer+0x4e0>
    7450:	ldr	r0, [fp, #-24]	; 0xffffffe8
    7454:	ldr	r1, [r0]
    7458:	ldr	r0, [r0, #4]
    745c:	str	r1, [sp, #148]	; 0x94
    7460:	str	r0, [sp, #144]	; 0x90
    7464:	b	7488 <eval_integer+0x518>
    7468:	ldr	r0, [fp, #-24]	; 0xffffffe8
    746c:	ldr	r1, [r0]
    7470:	ldr	r0, [r0, #4]
    7474:	rsbs	r1, r1, #0
    7478:	rsc	r0, r0, #0
    747c:	str	r1, [sp, #148]	; 0x94
    7480:	str	r0, [sp, #144]	; 0x90
    7484:	b	7488 <eval_integer+0x518>
    7488:	ldr	r0, [sp, #144]	; 0x90
    748c:	ldr	r1, [sp, #148]	; 0x94
    7490:	ldr	r2, [fp, #-24]	; 0xffffffe8
    7494:	str	r1, [r2]
    7498:	str	r0, [r2, #4]
    749c:	b	944c <eval_integer+0x24dc>
    74a0:	ldr	r0, [fp, #-16]
    74a4:	ldr	r1, [fp, #-28]	; 0xffffffe4
    74a8:	ldr	r1, [r1, #16]
    74ac:	sub	r2, fp, #592	; 0x250
    74b0:	bl	6f70 <eval_integer>
    74b4:	cmp	r0, #0
    74b8:	beq	74c8 <eval_integer+0x558>
    74bc:	mvn	r0, #0
    74c0:	str	r0, [fp, #-12]
    74c4:	b	9454 <eval_integer+0x24e4>
    74c8:	ldr	r0, [fp, #-16]
    74cc:	ldr	r1, [fp, #-28]	; 0xffffffe4
    74d0:	ldr	r1, [r1, #20]
    74d4:	sub	r2, fp, #600	; 0x258
    74d8:	bl	6f70 <eval_integer>
    74dc:	cmp	r0, #0
    74e0:	beq	74f0 <eval_integer+0x580>
    74e4:	mvn	r0, #0
    74e8:	str	r0, [fp, #-12]
    74ec:	b	9454 <eval_integer+0x24e4>
    74f0:	ldr	r0, [fp, #-592]	; 0xfffffdb0
    74f4:	ldr	r1, [fp, #-588]	; 0xfffffdb4
    74f8:	ldr	r2, [fp, #-600]	; 0xfffffda8
    74fc:	ldr	r3, [fp, #-596]	; 0xfffffdac
    7500:	adds	r0, r0, r2
    7504:	adc	r1, r1, r3
    7508:	ldr	r2, [fp, #-24]	; 0xffffffe8
    750c:	str	r0, [r2]
    7510:	str	r1, [r2, #4]
    7514:	b	944c <eval_integer+0x24dc>
    7518:	ldr	r0, [fp, #-16]
    751c:	ldr	r1, [fp, #-28]	; 0xffffffe4
    7520:	ldr	r1, [r1, #16]
    7524:	sub	r2, fp, #608	; 0x260
    7528:	bl	6f70 <eval_integer>
    752c:	cmp	r0, #0
    7530:	beq	7540 <eval_integer+0x5d0>
    7534:	mvn	r0, #0
    7538:	str	r0, [fp, #-12]
    753c:	b	9454 <eval_integer+0x24e4>
    7540:	ldr	r0, [fp, #-16]
    7544:	ldr	r1, [fp, #-28]	; 0xffffffe4
    7548:	ldr	r1, [r1, #20]
    754c:	sub	r2, fp, #616	; 0x268
    7550:	bl	6f70 <eval_integer>
    7554:	cmp	r0, #0
    7558:	beq	7568 <eval_integer+0x5f8>
    755c:	mvn	r0, #0
    7560:	str	r0, [fp, #-12]
    7564:	b	9454 <eval_integer+0x24e4>
    7568:	ldr	r0, [fp, #-608]	; 0xfffffda0
    756c:	ldr	r1, [fp, #-604]	; 0xfffffda4
    7570:	ldr	r2, [fp, #-616]	; 0xfffffd98
    7574:	ldr	r3, [fp, #-612]	; 0xfffffd9c
    7578:	subs	r0, r0, r2
    757c:	sbc	r1, r1, r3
    7580:	ldr	r2, [fp, #-24]	; 0xffffffe8
    7584:	str	r0, [r2]
    7588:	str	r1, [r2, #4]
    758c:	b	944c <eval_integer+0x24dc>
    7590:	ldr	r0, [fp, #-16]
    7594:	ldr	r1, [fp, #-28]	; 0xffffffe4
    7598:	ldr	r1, [r1, #16]
    759c:	sub	r2, fp, #624	; 0x270
    75a0:	bl	6f70 <eval_integer>
    75a4:	cmp	r0, #0
    75a8:	beq	75b8 <eval_integer+0x648>
    75ac:	mvn	r0, #0
    75b0:	str	r0, [fp, #-12]
    75b4:	b	9454 <eval_integer+0x24e4>
    75b8:	ldr	r0, [fp, #-16]
    75bc:	ldr	r1, [fp, #-28]	; 0xffffffe4
    75c0:	ldr	r1, [r1, #20]
    75c4:	sub	r2, fp, #632	; 0x278
    75c8:	bl	6f70 <eval_integer>
    75cc:	cmp	r0, #0
    75d0:	beq	75e0 <eval_integer+0x670>
    75d4:	mvn	r0, #0
    75d8:	str	r0, [fp, #-12]
    75dc:	b	9454 <eval_integer+0x24e4>
    75e0:	ldr	r0, [fp, #-624]	; 0xfffffd90
    75e4:	ldr	r1, [fp, #-620]	; 0xfffffd94
    75e8:	ldr	r2, [fp, #-632]	; 0xfffffd88
    75ec:	ldr	r3, [fp, #-628]	; 0xfffffd8c
    75f0:	umull	ip, lr, r0, r2
    75f4:	mla	r0, r0, r3, lr
    75f8:	mla	r0, r1, r2, r0
    75fc:	ldr	r1, [fp, #-24]	; 0xffffffe8
    7600:	str	ip, [r1]
    7604:	str	r0, [r1, #4]
    7608:	b	944c <eval_integer+0x24dc>
    760c:	ldr	r0, [fp, #-16]
    7610:	ldr	r1, [fp, #-28]	; 0xffffffe4
    7614:	ldr	r1, [r1, #16]
    7618:	sub	r2, fp, #640	; 0x280
    761c:	bl	6f70 <eval_integer>
    7620:	cmp	r0, #0
    7624:	beq	7634 <eval_integer+0x6c4>
    7628:	mvn	r0, #0
    762c:	str	r0, [fp, #-12]
    7630:	b	9454 <eval_integer+0x24e4>
    7634:	ldr	r0, [fp, #-16]
    7638:	ldr	r1, [fp, #-28]	; 0xffffffe4
    763c:	ldr	r1, [r1, #20]
    7640:	sub	r2, fp, #648	; 0x288
    7644:	bl	6f70 <eval_integer>
    7648:	cmp	r0, #0
    764c:	beq	765c <eval_integer+0x6ec>
    7650:	mvn	r0, #0
    7654:	str	r0, [fp, #-12]
    7658:	b	9454 <eval_integer+0x24e4>
    765c:	ldr	r0, [fp, #-648]	; 0xfffffd78
    7660:	ldr	r1, [fp, #-644]	; 0xfffffd7c
    7664:	orr	r0, r0, r1
    7668:	cmp	r0, #0
    766c:	bne	7690 <eval_integer+0x720>
    7670:	b	7674 <eval_integer+0x704>
    7674:	mvn	r0, #400	; 0x190
    7678:	movw	r1, #0
    767c:	movt	r1, #0
    7680:	bl	0 <coda_set_error>
    7684:	mvn	r0, #0
    7688:	str	r0, [fp, #-12]
    768c:	b	9454 <eval_integer+0x24e4>
    7690:	ldr	r0, [fp, #-640]	; 0xfffffd80
    7694:	ldr	r1, [fp, #-636]	; 0xfffffd84
    7698:	ldr	r2, [fp, #-648]	; 0xfffffd78
    769c:	ldr	r3, [fp, #-644]	; 0xfffffd7c
    76a0:	bl	0 <__aeabi_ldivmod>
    76a4:	ldr	r2, [fp, #-24]	; 0xffffffe8
    76a8:	str	r1, [r2, #4]
    76ac:	str	r0, [r2]
    76b0:	b	944c <eval_integer+0x24dc>
    76b4:	ldr	r0, [fp, #-16]
    76b8:	ldr	r1, [fp, #-28]	; 0xffffffe4
    76bc:	ldr	r1, [r1, #16]
    76c0:	sub	r2, fp, #656	; 0x290
    76c4:	bl	6f70 <eval_integer>
    76c8:	cmp	r0, #0
    76cc:	beq	76dc <eval_integer+0x76c>
    76d0:	mvn	r0, #0
    76d4:	str	r0, [fp, #-12]
    76d8:	b	9454 <eval_integer+0x24e4>
    76dc:	ldr	r0, [fp, #-16]
    76e0:	ldr	r1, [fp, #-28]	; 0xffffffe4
    76e4:	ldr	r1, [r1, #20]
    76e8:	sub	r2, fp, #664	; 0x298
    76ec:	bl	6f70 <eval_integer>
    76f0:	cmp	r0, #0
    76f4:	beq	7704 <eval_integer+0x794>
    76f8:	mvn	r0, #0
    76fc:	str	r0, [fp, #-12]
    7700:	b	9454 <eval_integer+0x24e4>
    7704:	ldr	r0, [fp, #-664]	; 0xfffffd68
    7708:	ldr	r1, [fp, #-660]	; 0xfffffd6c
    770c:	orr	r0, r0, r1
    7710:	cmp	r0, #0
    7714:	bne	7738 <eval_integer+0x7c8>
    7718:	b	771c <eval_integer+0x7ac>
    771c:	mvn	r0, #400	; 0x190
    7720:	movw	r1, #0
    7724:	movt	r1, #0
    7728:	bl	0 <coda_set_error>
    772c:	mvn	r0, #0
    7730:	str	r0, [fp, #-12]
    7734:	b	9454 <eval_integer+0x24e4>
    7738:	ldr	r0, [fp, #-656]	; 0xfffffd70
    773c:	ldr	r1, [fp, #-652]	; 0xfffffd74
    7740:	ldr	r2, [fp, #-664]	; 0xfffffd68
    7744:	ldr	r3, [fp, #-660]	; 0xfffffd6c
    7748:	bl	0 <__aeabi_ldivmod>
    774c:	ldr	ip, [fp, #-24]	; 0xffffffe8
    7750:	str	r3, [ip, #4]
    7754:	str	r2, [ip]
    7758:	b	944c <eval_integer+0x24dc>
    775c:	ldr	r0, [fp, #-16]
    7760:	ldr	r1, [fp, #-28]	; 0xffffffe4
    7764:	ldr	r1, [r1, #16]
    7768:	sub	r2, fp, #672	; 0x2a0
    776c:	bl	6f70 <eval_integer>
    7770:	cmp	r0, #0
    7774:	beq	7784 <eval_integer+0x814>
    7778:	mvn	r0, #0
    777c:	str	r0, [fp, #-12]
    7780:	b	9454 <eval_integer+0x24e4>
    7784:	ldr	r0, [fp, #-16]
    7788:	ldr	r1, [fp, #-28]	; 0xffffffe4
    778c:	ldr	r1, [r1, #20]
    7790:	sub	r2, fp, #680	; 0x2a8
    7794:	bl	6f70 <eval_integer>
    7798:	cmp	r0, #0
    779c:	beq	77ac <eval_integer+0x83c>
    77a0:	mvn	r0, #0
    77a4:	str	r0, [fp, #-12]
    77a8:	b	9454 <eval_integer+0x24e4>
    77ac:	ldr	r0, [fp, #-672]	; 0xfffffd60
    77b0:	ldr	r1, [fp, #-668]	; 0xfffffd64
    77b4:	ldr	r2, [fp, #-680]	; 0xfffffd58
    77b8:	ldr	r3, [fp, #-676]	; 0xfffffd5c
    77bc:	and	r0, r0, r2
    77c0:	and	r1, r1, r3
    77c4:	ldr	r2, [fp, #-24]	; 0xffffffe8
    77c8:	str	r1, [r2, #4]
    77cc:	str	r0, [r2]
    77d0:	b	944c <eval_integer+0x24dc>
    77d4:	ldr	r0, [fp, #-16]
    77d8:	ldr	r1, [fp, #-28]	; 0xffffffe4
    77dc:	ldr	r1, [r1, #16]
    77e0:	sub	r2, fp, #688	; 0x2b0
    77e4:	bl	6f70 <eval_integer>
    77e8:	cmp	r0, #0
    77ec:	beq	77fc <eval_integer+0x88c>
    77f0:	mvn	r0, #0
    77f4:	str	r0, [fp, #-12]
    77f8:	b	9454 <eval_integer+0x24e4>
    77fc:	ldr	r0, [fp, #-16]
    7800:	ldr	r1, [fp, #-28]	; 0xffffffe4
    7804:	ldr	r1, [r1, #20]
    7808:	sub	r2, fp, #696	; 0x2b8
    780c:	bl	6f70 <eval_integer>
    7810:	cmp	r0, #0
    7814:	beq	7824 <eval_integer+0x8b4>
    7818:	mvn	r0, #0
    781c:	str	r0, [fp, #-12]
    7820:	b	9454 <eval_integer+0x24e4>
    7824:	ldr	r0, [fp, #-688]	; 0xfffffd50
    7828:	ldr	r1, [fp, #-684]	; 0xfffffd54
    782c:	ldr	r2, [fp, #-696]	; 0xfffffd48
    7830:	ldr	r3, [fp, #-692]	; 0xfffffd4c
    7834:	orr	r0, r0, r2
    7838:	orr	r1, r1, r3
    783c:	ldr	r2, [fp, #-24]	; 0xffffffe8
    7840:	str	r1, [r2, #4]
    7844:	str	r0, [r2]
    7848:	b	944c <eval_integer+0x24dc>
    784c:	ldr	r0, [fp, #-16]
    7850:	ldr	r1, [fp, #-28]	; 0xffffffe4
    7854:	ldr	r1, [r1, #16]
    7858:	sub	r2, fp, #704	; 0x2c0
    785c:	bl	6f70 <eval_integer>
    7860:	cmp	r0, #0
    7864:	beq	7874 <eval_integer+0x904>
    7868:	mvn	r0, #0
    786c:	str	r0, [fp, #-12]
    7870:	b	9454 <eval_integer+0x24e4>
    7874:	ldr	r0, [fp, #-16]
    7878:	ldr	r1, [fp, #-28]	; 0xffffffe4
    787c:	ldr	r1, [r1, #20]
    7880:	sub	r2, fp, #712	; 0x2c8
    7884:	bl	6f70 <eval_integer>
    7888:	cmp	r0, #0
    788c:	beq	789c <eval_integer+0x92c>
    7890:	mvn	r0, #0
    7894:	str	r0, [fp, #-12]
    7898:	b	9454 <eval_integer+0x24e4>
    789c:	ldr	r0, [fp, #-704]	; 0xfffffd40
    78a0:	ldr	r1, [fp, #-700]	; 0xfffffd44
    78a4:	ldr	r2, [fp, #-712]	; 0xfffffd38
    78a8:	ldr	r3, [fp, #-708]	; 0xfffffd3c
    78ac:	subs	r0, r2, r0
    78b0:	sbcs	r1, r3, r1
    78b4:	bge	78d0 <eval_integer+0x960>
    78b8:	b	78bc <eval_integer+0x94c>
    78bc:	ldr	r0, [fp, #-704]	; 0xfffffd40
    78c0:	ldr	r1, [fp, #-700]	; 0xfffffd44
    78c4:	str	r0, [sp, #140]	; 0x8c
    78c8:	str	r1, [sp, #136]	; 0x88
    78cc:	b	78e4 <eval_integer+0x974>
    78d0:	ldr	r0, [fp, #-712]	; 0xfffffd38
    78d4:	ldr	r1, [fp, #-708]	; 0xfffffd3c
    78d8:	str	r0, [sp, #140]	; 0x8c
    78dc:	str	r1, [sp, #136]	; 0x88
    78e0:	b	78e4 <eval_integer+0x974>
    78e4:	ldr	r0, [sp, #136]	; 0x88
    78e8:	ldr	r1, [sp, #140]	; 0x8c
    78ec:	ldr	r2, [fp, #-24]	; 0xffffffe8
    78f0:	str	r1, [r2]
    78f4:	str	r0, [r2, #4]
    78f8:	b	944c <eval_integer+0x24dc>
    78fc:	ldr	r0, [fp, #-16]
    7900:	ldr	r1, [fp, #-28]	; 0xffffffe4
    7904:	ldr	r1, [r1, #16]
    7908:	sub	r2, fp, #720	; 0x2d0
    790c:	bl	6f70 <eval_integer>
    7910:	cmp	r0, #0
    7914:	beq	7924 <eval_integer+0x9b4>
    7918:	mvn	r0, #0
    791c:	str	r0, [fp, #-12]
    7920:	b	9454 <eval_integer+0x24e4>
    7924:	ldr	r0, [fp, #-16]
    7928:	ldr	r1, [fp, #-28]	; 0xffffffe4
    792c:	ldr	r1, [r1, #20]
    7930:	sub	r2, fp, #728	; 0x2d8
    7934:	bl	6f70 <eval_integer>
    7938:	cmp	r0, #0
    793c:	beq	794c <eval_integer+0x9dc>
    7940:	mvn	r0, #0
    7944:	str	r0, [fp, #-12]
    7948:	b	9454 <eval_integer+0x24e4>
    794c:	ldr	r0, [fp, #-720]	; 0xfffffd30
    7950:	ldr	r1, [fp, #-716]	; 0xfffffd34
    7954:	ldr	r2, [fp, #-728]	; 0xfffffd28
    7958:	ldr	r3, [fp, #-724]	; 0xfffffd2c
    795c:	subs	r0, r0, r2
    7960:	sbcs	r1, r1, r3
    7964:	bge	7980 <eval_integer+0xa10>
    7968:	b	796c <eval_integer+0x9fc>
    796c:	ldr	r0, [fp, #-720]	; 0xfffffd30
    7970:	ldr	r1, [fp, #-716]	; 0xfffffd34
    7974:	str	r0, [sp, #132]	; 0x84
    7978:	str	r1, [sp, #128]	; 0x80
    797c:	b	7994 <eval_integer+0xa24>
    7980:	ldr	r0, [fp, #-728]	; 0xfffffd28
    7984:	ldr	r1, [fp, #-724]	; 0xfffffd2c
    7988:	str	r0, [sp, #132]	; 0x84
    798c:	str	r1, [sp, #128]	; 0x80
    7990:	b	7994 <eval_integer+0xa24>
    7994:	ldr	r0, [sp, #128]	; 0x80
    7998:	ldr	r1, [sp, #132]	; 0x84
    799c:	ldr	r2, [fp, #-24]	; 0xffffffe8
    79a0:	str	r1, [r2]
    79a4:	str	r0, [r2, #4]
    79a8:	b	944c <eval_integer+0x24dc>
    79ac:	ldr	r0, [fp, #-16]
    79b0:	ldr	r1, [fp, #-28]	; 0xffffffe4
    79b4:	ldr	r1, [r1, #16]
    79b8:	sub	r2, fp, #732	; 0x2dc
    79bc:	bl	5170 <eval_boolean>
    79c0:	cmp	r0, #0
    79c4:	beq	79d4 <eval_integer+0xa64>
    79c8:	mvn	r0, #0
    79cc:	str	r0, [fp, #-12]
    79d0:	b	9454 <eval_integer+0x24e4>
    79d4:	ldr	r0, [fp, #-732]	; 0xfffffd24
    79d8:	cmp	r0, #0
    79dc:	beq	7a0c <eval_integer+0xa9c>
    79e0:	ldr	r0, [fp, #-16]
    79e4:	ldr	r1, [fp, #-28]	; 0xffffffe4
    79e8:	ldr	r1, [r1, #20]
    79ec:	ldr	r2, [fp, #-24]	; 0xffffffe8
    79f0:	bl	6f70 <eval_integer>
    79f4:	cmp	r0, #0
    79f8:	beq	7a08 <eval_integer+0xa98>
    79fc:	mvn	r0, #0
    7a00:	str	r0, [fp, #-12]
    7a04:	b	9454 <eval_integer+0x24e4>
    7a08:	b	7a38 <eval_integer+0xac8>
    7a0c:	ldr	r0, [fp, #-16]
    7a10:	ldr	r1, [fp, #-28]	; 0xffffffe4
    7a14:	ldr	r1, [r1, #24]
    7a18:	ldr	r2, [fp, #-24]	; 0xffffffe8
    7a1c:	bl	6f70 <eval_integer>
    7a20:	cmp	r0, #0
    7a24:	beq	7a34 <eval_integer+0xac4>
    7a28:	mvn	r0, #0
    7a2c:	str	r0, [fp, #-12]
    7a30:	b	9454 <eval_integer+0x24e4>
    7a34:	b	7a38 <eval_integer+0xac8>
    7a38:	b	944c <eval_integer+0x24dc>
    7a3c:	ldr	r0, [fp, #-16]
    7a40:	ldr	r0, [r0]
    7a44:	movw	r1, #0
    7a48:	cmp	r0, r1
    7a4c:	beq	7a54 <eval_integer+0xae4>
    7a50:	b	7a74 <eval_integer+0xb04>
    7a54:	movw	r0, #0
    7a58:	movt	r0, #0
    7a5c:	movw	r1, #0
    7a60:	movt	r1, #0
    7a64:	movw	r2, #2194	; 0x892
    7a68:	movw	r3, #0
    7a6c:	movt	r3, #0
    7a70:	bl	0 <__assert_fail>
    7a74:	ldr	r0, [fp, #-16]
    7a78:	add	r0, r0, #8
    7a7c:	sub	lr, fp, #1024	; 0x400
    7a80:	sub	r1, lr, #232	; 0xe8
    7a84:	str	r0, [sp, #124]	; 0x7c
    7a88:	mov	r0, r1
    7a8c:	ldr	r1, [sp, #124]	; 0x7c
    7a90:	movw	r2, #520	; 0x208
    7a94:	bl	0 <memcpy>
    7a98:	ldr	r0, [fp, #-16]
    7a9c:	ldr	r1, [fp, #-28]	; 0xffffffe4
    7aa0:	ldr	r1, [r1, #16]
    7aa4:	bl	d154 <eval_cursor>
    7aa8:	cmp	r0, #0
    7aac:	beq	7abc <eval_integer+0xb4c>
    7ab0:	mvn	r0, #0
    7ab4:	str	r0, [fp, #-12]
    7ab8:	b	9454 <eval_integer+0x24e4>
    7abc:	ldr	r0, [fp, #-16]
    7ac0:	add	r0, r0, #8
    7ac4:	sub	lr, fp, #1024	; 0x400
    7ac8:	sub	r1, lr, #236	; 0xec
    7acc:	bl	0 <coda_cursor_get_num_elements>
    7ad0:	cmp	r0, #0
    7ad4:	beq	7ae4 <eval_integer+0xb74>
    7ad8:	mvn	r0, #0
    7adc:	str	r0, [fp, #-12]
    7ae0:	b	9454 <eval_integer+0x24e4>
    7ae4:	ldr	r0, [fp, #-24]	; 0xffffffe8
    7ae8:	mov	r1, #0
    7aec:	str	r1, [r0, #4]
    7af0:	str	r1, [r0]
    7af4:	ldr	r0, [fp, #-1260]	; 0xfffffb14
    7af8:	cmp	r0, #0
    7afc:	ble	7bdc <eval_integer+0xc6c>
    7b00:	ldr	r0, [fp, #-16]
    7b04:	add	r0, r0, #8
    7b08:	bl	0 <coda_cursor_goto_first_array_element>
    7b0c:	cmp	r0, #0
    7b10:	beq	7b20 <eval_integer+0xbb0>
    7b14:	mvn	r0, #0
    7b18:	str	r0, [fp, #-12]
    7b1c:	b	9454 <eval_integer+0x24e4>
    7b20:	movw	r0, #0
    7b24:	str	r0, [fp, #-1264]	; 0xfffffb10
    7b28:	ldr	r0, [fp, #-1264]	; 0xfffffb10
    7b2c:	ldr	r1, [fp, #-1260]	; 0xfffffb14
    7b30:	cmp	r0, r1
    7b34:	bge	7bd8 <eval_integer+0xc68>
    7b38:	ldr	r0, [fp, #-16]
    7b3c:	ldr	r1, [fp, #-28]	; 0xffffffe4
    7b40:	ldr	r1, [r1, #20]
    7b44:	sub	lr, fp, #1024	; 0x400
    7b48:	sub	r2, lr, #244	; 0xf4
    7b4c:	bl	5170 <eval_boolean>
    7b50:	cmp	r0, #0
    7b54:	beq	7b64 <eval_integer+0xbf4>
    7b58:	mvn	r0, #0
    7b5c:	str	r0, [fp, #-12]
    7b60:	b	9454 <eval_integer+0x24e4>
    7b64:	ldr	r0, [fp, #-1268]	; 0xfffffb0c
    7b68:	cmp	r0, #0
    7b6c:	beq	7b8c <eval_integer+0xc1c>
    7b70:	ldr	r0, [fp, #-24]	; 0xffffffe8
    7b74:	ldr	r1, [r0]
    7b78:	ldr	r2, [r0, #4]
    7b7c:	adds	r1, r1, #1
    7b80:	adc	r2, r2, #0
    7b84:	str	r1, [r0]
    7b88:	str	r2, [r0, #4]
    7b8c:	ldr	r0, [fp, #-1264]	; 0xfffffb10
    7b90:	ldr	r1, [fp, #-1260]	; 0xfffffb14
    7b94:	sub	r1, r1, #1
    7b98:	cmp	r0, r1
    7b9c:	bge	7bc4 <eval_integer+0xc54>
    7ba0:	ldr	r0, [fp, #-16]
    7ba4:	add	r0, r0, #8
    7ba8:	bl	0 <coda_cursor_goto_next_array_element>
    7bac:	cmp	r0, #0
    7bb0:	beq	7bc0 <eval_integer+0xc50>
    7bb4:	mvn	r0, #0
    7bb8:	str	r0, [fp, #-12]
    7bbc:	b	9454 <eval_integer+0x24e4>
    7bc0:	b	7bc4 <eval_integer+0xc54>
    7bc4:	b	7bc8 <eval_integer+0xc58>
    7bc8:	ldr	r0, [fp, #-1264]	; 0xfffffb10
    7bcc:	add	r0, r0, #1
    7bd0:	str	r0, [fp, #-1264]	; 0xfffffb10
    7bd4:	b	7b28 <eval_integer+0xbb8>
    7bd8:	b	7bdc <eval_integer+0xc6c>
    7bdc:	ldr	r0, [fp, #-16]
    7be0:	add	r0, r0, #8
    7be4:	sub	lr, fp, #1024	; 0x400
    7be8:	sub	r1, lr, #232	; 0xe8
    7bec:	movw	r2, #520	; 0x208
    7bf0:	bl	0 <memcpy>
    7bf4:	b	944c <eval_integer+0x24dc>
    7bf8:	ldr	r0, [fp, #-16]
    7bfc:	ldr	r0, [r0]
    7c00:	movw	r1, #0
    7c04:	cmp	r0, r1
    7c08:	beq	7c10 <eval_integer+0xca0>
    7c0c:	b	7c30 <eval_integer+0xcc0>
    7c10:	movw	r0, #0
    7c14:	movt	r0, #0
    7c18:	movw	r1, #0
    7c1c:	movt	r1, #0
    7c20:	movw	r2, #2242	; 0x8c2
    7c24:	movw	r3, #0
    7c28:	movt	r3, #0
    7c2c:	bl	0 <__assert_fail>
    7c30:	ldr	r0, [fp, #-16]
    7c34:	add	r0, r0, #8
    7c38:	sub	r1, fp, #1792	; 0x700
    7c3c:	str	r0, [sp, #120]	; 0x78
    7c40:	mov	r0, r1
    7c44:	ldr	r1, [sp, #120]	; 0x78
    7c48:	movw	r2, #520	; 0x208
    7c4c:	bl	0 <memcpy>
    7c50:	ldr	r0, [fp, #-16]
    7c54:	ldr	r1, [fp, #-28]	; 0xffffffe4
    7c58:	ldr	r1, [r1, #16]
    7c5c:	bl	d154 <eval_cursor>
    7c60:	cmp	r0, #0
    7c64:	beq	7c74 <eval_integer+0xd04>
    7c68:	mvn	r0, #0
    7c6c:	str	r0, [fp, #-12]
    7c70:	b	9454 <eval_integer+0x24e4>
    7c74:	ldr	r0, [fp, #-16]
    7c78:	add	r0, r0, #8
    7c7c:	sub	lr, fp, #1024	; 0x400
    7c80:	sub	r1, lr, #772	; 0x304
    7c84:	bl	0 <coda_cursor_get_num_elements>
    7c88:	cmp	r0, #0
    7c8c:	beq	7c9c <eval_integer+0xd2c>
    7c90:	mvn	r0, #0
    7c94:	str	r0, [fp, #-12]
    7c98:	b	9454 <eval_integer+0x24e4>
    7c9c:	ldr	r0, [fp, #-24]	; 0xffffffe8
    7ca0:	mov	r1, #0
    7ca4:	str	r1, [r0, #4]
    7ca8:	str	r1, [r0]
    7cac:	ldr	r0, [fp, #-1796]	; 0xfffff8fc
    7cb0:	cmp	r0, #0
    7cb4:	ble	7d8c <eval_integer+0xe1c>
    7cb8:	ldr	r0, [fp, #-16]
    7cbc:	add	r0, r0, #8
    7cc0:	bl	0 <coda_cursor_goto_first_array_element>
    7cc4:	cmp	r0, #0
    7cc8:	beq	7cd8 <eval_integer+0xd68>
    7ccc:	mvn	r0, #0
    7cd0:	str	r0, [fp, #-12]
    7cd4:	b	9454 <eval_integer+0x24e4>
    7cd8:	movw	r0, #0
    7cdc:	str	r0, [fp, #-1800]	; 0xfffff8f8
    7ce0:	ldr	r0, [fp, #-1800]	; 0xfffff8f8
    7ce4:	ldr	r1, [fp, #-1796]	; 0xfffff8fc
    7ce8:	cmp	r0, r1
    7cec:	bge	7d88 <eval_integer+0xe18>
    7cf0:	ldr	r0, [fp, #-16]
    7cf4:	ldr	r1, [fp, #-28]	; 0xffffffe4
    7cf8:	ldr	r1, [r1, #20]
    7cfc:	sub	r2, fp, #1808	; 0x710
    7d00:	bl	6f70 <eval_integer>
    7d04:	cmp	r0, #0
    7d08:	beq	7d18 <eval_integer+0xda8>
    7d0c:	mvn	r0, #0
    7d10:	str	r0, [fp, #-12]
    7d14:	b	9454 <eval_integer+0x24e4>
    7d18:	ldr	r0, [fp, #-1808]	; 0xfffff8f0
    7d1c:	ldr	r1, [fp, #-1804]	; 0xfffff8f4
    7d20:	ldr	r2, [fp, #-24]	; 0xffffffe8
    7d24:	ldr	r3, [r2]
    7d28:	ldr	ip, [r2, #4]
    7d2c:	adds	r0, r3, r0
    7d30:	adc	r1, ip, r1
    7d34:	str	r0, [r2]
    7d38:	str	r1, [r2, #4]
    7d3c:	ldr	r0, [fp, #-1800]	; 0xfffff8f8
    7d40:	ldr	r1, [fp, #-1796]	; 0xfffff8fc
    7d44:	sub	r1, r1, #1
    7d48:	cmp	r0, r1
    7d4c:	bge	7d74 <eval_integer+0xe04>
    7d50:	ldr	r0, [fp, #-16]
    7d54:	add	r0, r0, #8
    7d58:	bl	0 <coda_cursor_goto_next_array_element>
    7d5c:	cmp	r0, #0
    7d60:	beq	7d70 <eval_integer+0xe00>
    7d64:	mvn	r0, #0
    7d68:	str	r0, [fp, #-12]
    7d6c:	b	9454 <eval_integer+0x24e4>
    7d70:	b	7d74 <eval_integer+0xe04>
    7d74:	b	7d78 <eval_integer+0xe08>
    7d78:	ldr	r0, [fp, #-1800]	; 0xfffff8f8
    7d7c:	add	r0, r0, #1
    7d80:	str	r0, [fp, #-1800]	; 0xfffff8f8
    7d84:	b	7ce0 <eval_integer+0xd70>
    7d88:	b	7d8c <eval_integer+0xe1c>
    7d8c:	ldr	r0, [fp, #-16]
    7d90:	add	r0, r0, #8
    7d94:	sub	r1, fp, #1792	; 0x700
    7d98:	movw	r2, #520	; 0x208
    7d9c:	bl	0 <memcpy>
    7da0:	b	944c <eval_integer+0x24dc>
    7da4:	ldr	r0, [fp, #-16]
    7da8:	ldr	r0, [r0]
    7dac:	movw	r1, #0
    7db0:	cmp	r0, r1
    7db4:	beq	7dbc <eval_integer+0xe4c>
    7db8:	b	7ddc <eval_integer+0xe6c>
    7dbc:	movw	r0, #0
    7dc0:	movt	r0, #0
    7dc4:	movw	r1, #0
    7dc8:	movt	r1, #0
    7dcc:	movw	r2, #2287	; 0x8ef
    7dd0:	movw	r3, #0
    7dd4:	movt	r3, #0
    7dd8:	bl	0 <__assert_fail>
    7ddc:	ldr	r0, [fp, #-16]
    7de0:	add	r0, r0, #8
    7de4:	sub	lr, fp, #2048	; 0x800
    7de8:	sub	r1, lr, #280	; 0x118
    7dec:	str	r0, [sp, #116]	; 0x74
    7df0:	mov	r0, r1
    7df4:	ldr	r1, [sp, #116]	; 0x74
    7df8:	movw	r2, #520	; 0x208
    7dfc:	bl	0 <memcpy>
    7e00:	ldr	r0, [fp, #-16]
    7e04:	ldr	r1, [fp, #-28]	; 0xffffffe4
    7e08:	ldr	r1, [r1, #16]
    7e0c:	bl	d154 <eval_cursor>
    7e10:	cmp	r0, #0
    7e14:	beq	7e24 <eval_integer+0xeb4>
    7e18:	mvn	r0, #0
    7e1c:	str	r0, [fp, #-12]
    7e20:	b	9454 <eval_integer+0x24e4>
    7e24:	ldr	r0, [fp, #-16]
    7e28:	add	r0, r0, #8
    7e2c:	sub	lr, fp, #2048	; 0x800
    7e30:	sub	r1, lr, #284	; 0x11c
    7e34:	bl	0 <coda_cursor_get_num_elements>
    7e38:	cmp	r0, #0
    7e3c:	beq	7e4c <eval_integer+0xedc>
    7e40:	mvn	r0, #0
    7e44:	str	r0, [fp, #-12]
    7e48:	b	9454 <eval_integer+0x24e4>
    7e4c:	ldr	r0, [fp, #-24]	; 0xffffffe8
    7e50:	mov	r1, #0
    7e54:	str	r1, [r0, #4]
    7e58:	str	r1, [r0]
    7e5c:	ldr	r0, [fp, #-2332]	; 0xfffff6e4
    7e60:	cmp	r0, #0
    7e64:	ble	7f60 <eval_integer+0xff0>
    7e68:	ldr	r0, [fp, #-16]
    7e6c:	add	r0, r0, #8
    7e70:	bl	0 <coda_cursor_goto_first_array_element>
    7e74:	cmp	r0, #0
    7e78:	beq	7e88 <eval_integer+0xf18>
    7e7c:	mvn	r0, #0
    7e80:	str	r0, [fp, #-12]
    7e84:	b	9454 <eval_integer+0x24e4>
    7e88:	movw	r0, #0
    7e8c:	str	r0, [fp, #-2336]	; 0xfffff6e0
    7e90:	ldr	r0, [fp, #-2336]	; 0xfffff6e0
    7e94:	ldr	r1, [fp, #-2332]	; 0xfffff6e4
    7e98:	cmp	r0, r1
    7e9c:	bge	7f5c <eval_integer+0xfec>
    7ea0:	ldr	r0, [fp, #-16]
    7ea4:	ldr	r1, [fp, #-28]	; 0xffffffe4
    7ea8:	ldr	r1, [r1, #20]
    7eac:	sub	lr, fp, #2048	; 0x800
    7eb0:	sub	r2, lr, #296	; 0x128
    7eb4:	bl	6f70 <eval_integer>
    7eb8:	cmp	r0, #0
    7ebc:	beq	7ecc <eval_integer+0xf5c>
    7ec0:	mvn	r0, #0
    7ec4:	str	r0, [fp, #-12]
    7ec8:	b	9454 <eval_integer+0x24e4>
    7ecc:	ldr	r0, [fp, #-2336]	; 0xfffff6e0
    7ed0:	cmp	r0, #0
    7ed4:	beq	7efc <eval_integer+0xf8c>
    7ed8:	ldr	r0, [fp, #-2344]	; 0xfffff6d8
    7edc:	ldr	r1, [fp, #-2340]	; 0xfffff6dc
    7ee0:	ldr	r2, [fp, #-24]	; 0xffffffe8
    7ee4:	ldr	r3, [r2]
    7ee8:	ldr	r2, [r2, #4]
    7eec:	subs	r0, r3, r0
    7ef0:	sbcs	r1, r2, r1
    7ef4:	bge	7f10 <eval_integer+0xfa0>
    7ef8:	b	7efc <eval_integer+0xf8c>
    7efc:	ldr	r0, [fp, #-2344]	; 0xfffff6d8
    7f00:	ldr	r1, [fp, #-2340]	; 0xfffff6dc
    7f04:	ldr	r2, [fp, #-24]	; 0xffffffe8
    7f08:	str	r1, [r2, #4]
    7f0c:	str	r0, [r2]
    7f10:	ldr	r0, [fp, #-2336]	; 0xfffff6e0
    7f14:	ldr	r1, [fp, #-2332]	; 0xfffff6e4
    7f18:	sub	r1, r1, #1
    7f1c:	cmp	r0, r1
    7f20:	bge	7f48 <eval_integer+0xfd8>
    7f24:	ldr	r0, [fp, #-16]
    7f28:	add	r0, r0, #8
    7f2c:	bl	0 <coda_cursor_goto_next_array_element>
    7f30:	cmp	r0, #0
    7f34:	beq	7f44 <eval_integer+0xfd4>
    7f38:	mvn	r0, #0
    7f3c:	str	r0, [fp, #-12]
    7f40:	b	9454 <eval_integer+0x24e4>
    7f44:	b	7f48 <eval_integer+0xfd8>
    7f48:	b	7f4c <eval_integer+0xfdc>
    7f4c:	ldr	r0, [fp, #-2336]	; 0xfffff6e0
    7f50:	add	r0, r0, #1
    7f54:	str	r0, [fp, #-2336]	; 0xfffff6e0
    7f58:	b	7e90 <eval_integer+0xf20>
    7f5c:	b	7f60 <eval_integer+0xff0>
    7f60:	ldr	r0, [fp, #-16]
    7f64:	add	r0, r0, #8
    7f68:	sub	lr, fp, #2048	; 0x800
    7f6c:	sub	r1, lr, #280	; 0x118
    7f70:	movw	r2, #520	; 0x208
    7f74:	bl	0 <memcpy>
    7f78:	b	944c <eval_integer+0x24dc>
    7f7c:	ldr	r0, [fp, #-16]
    7f80:	ldr	r0, [r0]
    7f84:	movw	r1, #0
    7f88:	cmp	r0, r1
    7f8c:	beq	7f94 <eval_integer+0x1024>
    7f90:	b	7fb4 <eval_integer+0x1044>
    7f94:	movw	r0, #0
    7f98:	movt	r0, #0
    7f9c:	movw	r1, #0
    7fa0:	movt	r1, #0
    7fa4:	movw	r2, #2335	; 0x91f
    7fa8:	movw	r3, #0
    7fac:	movt	r3, #0
    7fb0:	bl	0 <__assert_fail>
    7fb4:	ldr	r0, [fp, #-16]
    7fb8:	add	r0, r0, #8
    7fbc:	sub	r1, fp, #2864	; 0xb30
    7fc0:	str	r0, [sp, #112]	; 0x70
    7fc4:	mov	r0, r1
    7fc8:	ldr	r1, [sp, #112]	; 0x70
    7fcc:	movw	r2, #520	; 0x208
    7fd0:	bl	0 <memcpy>
    7fd4:	ldr	r0, [fp, #-16]
    7fd8:	ldr	r1, [fp, #-28]	; 0xffffffe4
    7fdc:	ldr	r1, [r1, #16]
    7fe0:	bl	d154 <eval_cursor>
    7fe4:	cmp	r0, #0
    7fe8:	beq	7ff8 <eval_integer+0x1088>
    7fec:	mvn	r0, #0
    7ff0:	str	r0, [fp, #-12]
    7ff4:	b	9454 <eval_integer+0x24e4>
    7ff8:	ldr	r0, [fp, #-16]
    7ffc:	add	r0, r0, #8
    8000:	sub	lr, fp, #2048	; 0x800
    8004:	sub	r1, lr, #820	; 0x334
    8008:	bl	0 <coda_cursor_get_num_elements>
    800c:	cmp	r0, #0
    8010:	beq	8020 <eval_integer+0x10b0>
    8014:	mvn	r0, #0
    8018:	str	r0, [fp, #-12]
    801c:	b	9454 <eval_integer+0x24e4>
    8020:	ldr	r0, [fp, #-24]	; 0xffffffe8
    8024:	mov	r1, #0
    8028:	str	r1, [r0, #4]
    802c:	str	r1, [r0]
    8030:	ldr	r0, [fp, #-2868]	; 0xfffff4cc
    8034:	cmp	r0, #0
    8038:	ble	8130 <eval_integer+0x11c0>
    803c:	ldr	r0, [fp, #-16]
    8040:	add	r0, r0, #8
    8044:	bl	0 <coda_cursor_goto_first_array_element>
    8048:	cmp	r0, #0
    804c:	beq	805c <eval_integer+0x10ec>
    8050:	mvn	r0, #0
    8054:	str	r0, [fp, #-12]
    8058:	b	9454 <eval_integer+0x24e4>
    805c:	movw	r0, #0
    8060:	str	r0, [fp, #-2872]	; 0xfffff4c8
    8064:	ldr	r0, [fp, #-2872]	; 0xfffff4c8
    8068:	ldr	r1, [fp, #-2868]	; 0xfffff4cc
    806c:	cmp	r0, r1
    8070:	bge	812c <eval_integer+0x11bc>
    8074:	ldr	r0, [fp, #-16]
    8078:	ldr	r1, [fp, #-28]	; 0xffffffe4
    807c:	ldr	r1, [r1, #20]
    8080:	sub	r2, fp, #2880	; 0xb40
    8084:	bl	6f70 <eval_integer>
    8088:	cmp	r0, #0
    808c:	beq	809c <eval_integer+0x112c>
    8090:	mvn	r0, #0
    8094:	str	r0, [fp, #-12]
    8098:	b	9454 <eval_integer+0x24e4>
    809c:	ldr	r0, [fp, #-2872]	; 0xfffff4c8
    80a0:	cmp	r0, #0
    80a4:	beq	80cc <eval_integer+0x115c>
    80a8:	ldr	r0, [fp, #-2880]	; 0xfffff4c0
    80ac:	ldr	r1, [fp, #-2876]	; 0xfffff4c4
    80b0:	ldr	r2, [fp, #-24]	; 0xffffffe8
    80b4:	ldr	r3, [r2]
    80b8:	ldr	r2, [r2, #4]
    80bc:	subs	r0, r0, r3
    80c0:	sbcs	r1, r1, r2
    80c4:	bge	80e0 <eval_integer+0x1170>
    80c8:	b	80cc <eval_integer+0x115c>
    80cc:	ldr	r0, [fp, #-2880]	; 0xfffff4c0
    80d0:	ldr	r1, [fp, #-2876]	; 0xfffff4c4
    80d4:	ldr	r2, [fp, #-24]	; 0xffffffe8
    80d8:	str	r1, [r2, #4]
    80dc:	str	r0, [r2]
    80e0:	ldr	r0, [fp, #-2872]	; 0xfffff4c8
    80e4:	ldr	r1, [fp, #-2868]	; 0xfffff4cc
    80e8:	sub	r1, r1, #1
    80ec:	cmp	r0, r1
    80f0:	bge	8118 <eval_integer+0x11a8>
    80f4:	ldr	r0, [fp, #-16]
    80f8:	add	r0, r0, #8
    80fc:	bl	0 <coda_cursor_goto_next_array_element>
    8100:	cmp	r0, #0
    8104:	beq	8114 <eval_integer+0x11a4>
    8108:	mvn	r0, #0
    810c:	str	r0, [fp, #-12]
    8110:	b	9454 <eval_integer+0x24e4>
    8114:	b	8118 <eval_integer+0x11a8>
    8118:	b	811c <eval_integer+0x11ac>
    811c:	ldr	r0, [fp, #-2872]	; 0xfffff4c8
    8120:	add	r0, r0, #1
    8124:	str	r0, [fp, #-2872]	; 0xfffff4c8
    8128:	b	8064 <eval_integer+0x10f4>
    812c:	b	8130 <eval_integer+0x11c0>
    8130:	ldr	r0, [fp, #-16]
    8134:	add	r0, r0, #8
    8138:	sub	r1, fp, #2864	; 0xb30
    813c:	movw	r2, #520	; 0x208
    8140:	bl	0 <memcpy>
    8144:	b	944c <eval_integer+0x24dc>
    8148:	ldr	r0, [fp, #-16]
    814c:	ldr	r0, [r0]
    8150:	movw	r1, #0
    8154:	cmp	r0, r1
    8158:	beq	8160 <eval_integer+0x11f0>
    815c:	b	8180 <eval_integer+0x1210>
    8160:	movw	r0, #0
    8164:	movt	r0, #0
    8168:	movw	r1, #0
    816c:	movt	r1, #0
    8170:	movw	r2, #2383	; 0x94f
    8174:	movw	r3, #0
    8178:	movt	r3, #0
    817c:	bl	0 <__assert_fail>
    8180:	ldr	r0, [fp, #-16]
    8184:	add	r0, r0, #8
    8188:	sub	lr, fp, #3072	; 0xc00
    818c:	sub	r1, lr, #328	; 0x148
    8190:	str	r0, [sp, #108]	; 0x6c
    8194:	mov	r0, r1
    8198:	ldr	r1, [sp, #108]	; 0x6c
    819c:	movw	r2, #520	; 0x208
    81a0:	bl	0 <memcpy>
    81a4:	ldr	r0, [fp, #-16]
    81a8:	ldr	r1, [fp, #-28]	; 0xffffffe4
    81ac:	ldr	r1, [r1, #16]
    81b0:	bl	d154 <eval_cursor>
    81b4:	cmp	r0, #0
    81b8:	beq	81c8 <eval_integer+0x1258>
    81bc:	mvn	r0, #0
    81c0:	str	r0, [fp, #-12]
    81c4:	b	9454 <eval_integer+0x24e4>
    81c8:	ldr	r0, [fp, #-16]
    81cc:	add	r0, r0, #8
    81d0:	sub	lr, fp, #3072	; 0xc00
    81d4:	sub	r1, lr, #332	; 0x14c
    81d8:	bl	0 <coda_cursor_get_num_elements>
    81dc:	cmp	r0, #0
    81e0:	beq	81f0 <eval_integer+0x1280>
    81e4:	mvn	r0, #0
    81e8:	str	r0, [fp, #-12]
    81ec:	b	9454 <eval_integer+0x24e4>
    81f0:	ldr	r0, [fp, #-24]	; 0xffffffe8
    81f4:	mov	r1, #0
    81f8:	str	r1, [r0, #4]
    81fc:	str	r1, [r0]
    8200:	ldr	r0, [fp, #-3404]	; 0xfffff2b4
    8204:	cmp	r0, #0
    8208:	ble	8304 <eval_integer+0x1394>
    820c:	ldr	r0, [fp, #-16]
    8210:	add	r0, r0, #8
    8214:	bl	0 <coda_cursor_goto_first_array_element>
    8218:	cmp	r0, #0
    821c:	beq	822c <eval_integer+0x12bc>
    8220:	mvn	r0, #0
    8224:	str	r0, [fp, #-12]
    8228:	b	9454 <eval_integer+0x24e4>
    822c:	movw	r0, #0
    8230:	str	r0, [fp, #-3408]	; 0xfffff2b0
    8234:	ldr	r0, [fp, #-3408]	; 0xfffff2b0
    8238:	ldr	r1, [fp, #-3404]	; 0xfffff2b4
    823c:	cmp	r0, r1
    8240:	bge	8300 <eval_integer+0x1390>
    8244:	ldr	r0, [fp, #-16]
    8248:	ldr	r1, [fp, #-28]	; 0xffffffe4
    824c:	ldr	r1, [r1, #20]
    8250:	sub	lr, fp, #3072	; 0xc00
    8254:	sub	r2, lr, #340	; 0x154
    8258:	bl	5170 <eval_boolean>
    825c:	cmp	r0, #0
    8260:	beq	8270 <eval_integer+0x1300>
    8264:	mvn	r0, #0
    8268:	str	r0, [fp, #-12]
    826c:	b	9454 <eval_integer+0x24e4>
    8270:	ldr	r0, [fp, #-3412]	; 0xfffff2ac
    8274:	cmp	r0, #0
    8278:	beq	82b4 <eval_integer+0x1344>
    827c:	ldr	r0, [fp, #-3408]	; 0xfffff2b0
    8280:	asr	r1, r0, #31
    8284:	ldr	r2, [fp, #-24]	; 0xffffffe8
    8288:	str	r0, [r2]
    828c:	str	r1, [r2, #4]
    8290:	ldr	r0, [fp, #-16]
    8294:	add	r0, r0, #8
    8298:	sub	lr, fp, #3072	; 0xc00
    829c:	sub	r1, lr, #328	; 0x148
    82a0:	movw	r2, #520	; 0x208
    82a4:	bl	0 <memcpy>
    82a8:	movw	r0, #0
    82ac:	str	r0, [fp, #-12]
    82b0:	b	9454 <eval_integer+0x24e4>
    82b4:	ldr	r0, [fp, #-3408]	; 0xfffff2b0
    82b8:	ldr	r1, [fp, #-3404]	; 0xfffff2b4
    82bc:	sub	r1, r1, #1
    82c0:	cmp	r0, r1
    82c4:	bge	82ec <eval_integer+0x137c>
    82c8:	ldr	r0, [fp, #-16]
    82cc:	add	r0, r0, #8
    82d0:	bl	0 <coda_cursor_goto_next_array_element>
    82d4:	cmp	r0, #0
    82d8:	beq	82e8 <eval_integer+0x1378>
    82dc:	mvn	r0, #0
    82e0:	str	r0, [fp, #-12]
    82e4:	b	9454 <eval_integer+0x24e4>
    82e8:	b	82ec <eval_integer+0x137c>
    82ec:	b	82f0 <eval_integer+0x1380>
    82f0:	ldr	r0, [fp, #-3408]	; 0xfffff2b0
    82f4:	add	r0, r0, #1
    82f8:	str	r0, [fp, #-3408]	; 0xfffff2b0
    82fc:	b	8234 <eval_integer+0x12c4>
    8300:	b	8304 <eval_integer+0x1394>
    8304:	ldr	r0, [fp, #-24]	; 0xffffffe8
    8308:	mvn	r1, #0
    830c:	str	r1, [r0, #4]
    8310:	str	r1, [r0]
    8314:	ldr	r0, [fp, #-16]
    8318:	add	r0, r0, #8
    831c:	sub	lr, fp, #3072	; 0xc00
    8320:	sub	r1, lr, #328	; 0x148
    8324:	movw	r2, #520	; 0x208
    8328:	bl	0 <memcpy>
    832c:	b	944c <eval_integer+0x24dc>
    8330:	movw	r0, #0
    8334:	str	r0, [fp, #-3944]	; 0xfffff098
    8338:	ldr	r1, [fp, #-16]
    833c:	ldr	r1, [r1]
    8340:	cmp	r1, r0
    8344:	beq	834c <eval_integer+0x13dc>
    8348:	b	836c <eval_integer+0x13fc>
    834c:	movw	r0, #0
    8350:	movt	r0, #0
    8354:	movw	r1, #0
    8358:	movt	r1, #0
    835c:	movw	r2, #2435	; 0x983
    8360:	movw	r3, #0
    8364:	movt	r3, #0
    8368:	bl	0 <__assert_fail>
    836c:	ldr	r0, [fp, #-16]
    8370:	add	r0, r0, #8
    8374:	sub	r1, fp, #3936	; 0xf60
    8378:	str	r0, [sp, #104]	; 0x68
    837c:	mov	r0, r1
    8380:	ldr	r1, [sp, #104]	; 0x68
    8384:	movw	r2, #520	; 0x208
    8388:	bl	0 <memcpy>
    838c:	ldr	r0, [fp, #-16]
    8390:	ldr	r1, [fp, #-28]	; 0xffffffe4
    8394:	ldr	r1, [r1, #16]
    8398:	bl	d154 <eval_cursor>
    839c:	cmp	r0, #0
    83a0:	beq	83b0 <eval_integer+0x1440>
    83a4:	mvn	r0, #0
    83a8:	str	r0, [fp, #-12]
    83ac:	b	9454 <eval_integer+0x24e4>
    83b0:	ldr	r0, [pc, #4036]	; 937c <eval_integer+0x240c>
    83b4:	ldr	r0, [pc, r0]
    83b8:	str	r0, [sp, #100]	; 0x64
    83bc:	bl	0 <__aeabi_read_tp>
    83c0:	ldr	r1, [sp, #100]	; 0x64
    83c4:	ldr	r2, [r0, r1]
    83c8:	str	r2, [fp, #-3940]	; 0xfffff09c
    83cc:	mov	r2, #0
    83d0:	str	r2, [r0, r1]
    83d4:	ldr	r0, [fp, #-16]
    83d8:	add	r0, r0, #8
    83dc:	bl	0 <coda_cursor_goto_first_array_element>
    83e0:	cmp	r0, #0
    83e4:	beq	8418 <eval_integer+0x14a8>
    83e8:	ldr	r0, [fp, #-3940]	; 0xfffff09c
    83ec:	ldr	r1, [pc, #4076]	; 93e0 <eval_integer+0x2470>
    83f0:	ldr	r1, [pc, r1]
    83f4:	str	r0, [sp, #96]	; 0x60
    83f8:	str	r1, [sp, #92]	; 0x5c
    83fc:	bl	0 <__aeabi_read_tp>
    8400:	ldr	r1, [sp, #96]	; 0x60
    8404:	ldr	r2, [sp, #92]	; 0x5c
    8408:	str	r1, [r0, r2]
    840c:	mvn	r0, #0
    8410:	str	r0, [fp, #-12]
    8414:	b	9454 <eval_integer+0x24e4>
    8418:	ldr	r0, [fp, #-24]	; 0xffffffe8
    841c:	mov	r1, #0
    8420:	str	r1, [r0, #4]
    8424:	str	r1, [r0]
    8428:	ldr	r0, [fp, #-3944]	; 0xfffff098
    842c:	cmp	r0, #0
    8430:	movw	r0, #0
    8434:	movne	r0, #1
    8438:	mvn	r1, #0
    843c:	eor	r0, r0, r1
    8440:	tst	r0, #1
    8444:	beq	8598 <eval_integer+0x1628>
    8448:	ldr	r0, [fp, #-28]	; 0xffffffe4
    844c:	ldr	r0, [r0, #24]
    8450:	movw	r1, #0
    8454:	cmp	r0, r1
    8458:	beq	84b0 <eval_integer+0x1540>
    845c:	ldr	r0, [fp, #-16]
    8460:	ldr	r1, [fp, #-28]	; 0xffffffe4
    8464:	ldr	r1, [r1, #20]
    8468:	sub	lr, fp, #3072	; 0xc00
    846c:	sub	r2, lr, #872	; 0x368
    8470:	bl	5170 <eval_boolean>
    8474:	cmp	r0, #0
    8478:	beq	84ac <eval_integer+0x153c>
    847c:	ldr	r0, [fp, #-3940]	; 0xfffff09c
    8480:	ldr	r1, [pc, #4068]	; 946c <eval_integer+0x24fc>
    8484:	ldr	r1, [pc, r1]
    8488:	str	r0, [sp, #88]	; 0x58
    848c:	str	r1, [sp, #84]	; 0x54
    8490:	bl	0 <__aeabi_read_tp>
    8494:	ldr	r1, [sp, #88]	; 0x58
    8498:	ldr	r2, [sp, #84]	; 0x54
    849c:	str	r1, [r0, r2]
    84a0:	mvn	r0, #0
    84a4:	str	r0, [fp, #-12]
    84a8:	b	9454 <eval_integer+0x24e4>
    84ac:	b	84b0 <eval_integer+0x1540>
    84b0:	ldr	r0, [fp, #-3944]	; 0xfffff098
    84b4:	cmp	r0, #0
    84b8:	beq	84d0 <eval_integer+0x1560>
    84bc:	ldr	r0, [fp, #-24]	; 0xffffffe8
    84c0:	mvn	r1, #0
    84c4:	str	r1, [r0, #4]
    84c8:	str	r1, [r0]
    84cc:	b	8594 <eval_integer+0x1624>
    84d0:	ldr	r0, [fp, #-16]
    84d4:	ldr	r1, [fp, #-28]	; 0xffffffe4
    84d8:	ldr	r1, [r1, #20]
    84dc:	sub	lr, fp, #3072	; 0xc00
    84e0:	sub	r2, lr, #872	; 0x368
    84e4:	bl	5170 <eval_boolean>
    84e8:	cmp	r0, #0
    84ec:	beq	8520 <eval_integer+0x15b0>
    84f0:	ldr	r0, [fp, #-3940]	; 0xfffff09c
    84f4:	ldr	r1, [pc, #3948]	; 9468 <eval_integer+0x24f8>
    84f8:	ldr	r1, [pc, r1]
    84fc:	str	r0, [sp, #80]	; 0x50
    8500:	str	r1, [sp, #76]	; 0x4c
    8504:	bl	0 <__aeabi_read_tp>
    8508:	ldr	r1, [sp, #80]	; 0x50
    850c:	ldr	r2, [sp, #76]	; 0x4c
    8510:	str	r1, [r0, r2]
    8514:	mvn	r0, #0
    8518:	str	r0, [fp, #-12]
    851c:	b	9454 <eval_integer+0x24e4>
    8520:	ldr	r0, [fp, #-3944]	; 0xfffff098
    8524:	cmp	r0, #0
    8528:	bne	8590 <eval_integer+0x1620>
    852c:	ldr	r0, [fp, #-24]	; 0xffffffe8
    8530:	ldr	r1, [r0]
    8534:	ldr	r2, [r0, #4]
    8538:	adds	r1, r1, #1
    853c:	adc	r2, r2, #0
    8540:	str	r1, [r0]
    8544:	str	r2, [r0, #4]
    8548:	ldr	r0, [fp, #-16]
    854c:	add	r0, r0, #8
    8550:	bl	0 <coda_cursor_goto_next_array_element>
    8554:	cmp	r0, #0
    8558:	beq	858c <eval_integer+0x161c>
    855c:	ldr	r0, [fp, #-3940]	; 0xfffff09c
    8560:	ldr	r1, [pc, #3836]	; 9464 <eval_integer+0x24f4>
    8564:	ldr	r1, [pc, r1]
    8568:	str	r0, [sp, #72]	; 0x48
    856c:	str	r1, [sp, #68]	; 0x44
    8570:	bl	0 <__aeabi_read_tp>
    8574:	ldr	r1, [sp, #72]	; 0x48
    8578:	ldr	r2, [sp, #68]	; 0x44
    857c:	str	r1, [r0, r2]
    8580:	mvn	r0, #0
    8584:	str	r0, [fp, #-12]
    8588:	b	9454 <eval_integer+0x24e4>
    858c:	b	8590 <eval_integer+0x1620>
    8590:	b	8594 <eval_integer+0x1624>
    8594:	b	8428 <eval_integer+0x14b8>
    8598:	ldr	r0, [fp, #-3940]	; 0xfffff09c
    859c:	ldr	r1, [pc, #3772]	; 9460 <eval_integer+0x24f0>
    85a0:	ldr	r1, [pc, r1]
    85a4:	str	r0, [sp, #64]	; 0x40
    85a8:	str	r1, [sp, #60]	; 0x3c
    85ac:	bl	0 <__aeabi_read_tp>
    85b0:	ldr	r1, [sp, #64]	; 0x40
    85b4:	ldr	r2, [sp, #60]	; 0x3c
    85b8:	str	r1, [r0, r2]
    85bc:	ldr	r0, [fp, #-16]
    85c0:	add	r0, r0, #8
    85c4:	sub	r2, fp, #3936	; 0xf60
    85c8:	mov	r1, r2
    85cc:	movw	r2, #520	; 0x208
    85d0:	bl	0 <memcpy>
    85d4:	b	944c <eval_integer+0x24dc>
    85d8:	ldr	r0, [fp, #-28]	; 0xffffffe4
    85dc:	ldr	r0, [r0, #16]
    85e0:	ldr	r0, [r0, #4]
    85e4:	cmp	r0, #4
    85e8:	bne	86d0 <eval_integer+0x1760>
    85ec:	ldr	r0, [fp, #-16]
    85f0:	ldr	r0, [r0]
    85f4:	movw	r1, #0
    85f8:	cmp	r0, r1
    85fc:	beq	8604 <eval_integer+0x1694>
    8600:	b	8624 <eval_integer+0x16b4>
    8604:	movw	r0, #0
    8608:	movt	r0, #0
    860c:	movw	r1, #0
    8610:	movt	r1, #0
    8614:	movw	r2, #2491	; 0x9bb
    8618:	movw	r3, #0
    861c:	movt	r3, #0
    8620:	bl	0 <__assert_fail>
    8624:	ldr	r0, [fp, #-16]
    8628:	add	r0, r0, #8
    862c:	sub	lr, fp, #4096	; 0x1000
    8630:	sub	r1, lr, #368	; 0x170
    8634:	str	r0, [sp, #56]	; 0x38
    8638:	mov	r0, r1
    863c:	ldr	r1, [sp, #56]	; 0x38
    8640:	movw	r2, #520	; 0x208
    8644:	bl	0 <memcpy>
    8648:	ldr	r0, [fp, #-16]
    864c:	ldr	r1, [fp, #-28]	; 0xffffffe4
    8650:	ldr	r1, [r1, #16]
    8654:	bl	d154 <eval_cursor>
    8658:	cmp	r0, #0
    865c:	beq	866c <eval_integer+0x16fc>
    8660:	mvn	r0, #0
    8664:	str	r0, [fp, #-12]
    8668:	b	9454 <eval_integer+0x24e4>
    866c:	ldr	r0, [fp, #-16]
    8670:	add	r0, r0, #8
    8674:	sub	lr, fp, #4096	; 0x1000
    8678:	sub	r1, lr, #372	; 0x174
    867c:	bl	0 <coda_cursor_get_string_length>
    8680:	cmp	r0, #0
    8684:	beq	8694 <eval_integer+0x1724>
    8688:	mvn	r0, #0
    868c:	str	r0, [fp, #-12]
    8690:	b	9454 <eval_integer+0x24e4>
    8694:	ldr	r0, [sp, #168]	; 0xa8
    8698:	ldr	r1, [r0, #576]	; 0x240
    869c:	asr	r2, r1, #31
    86a0:	ldr	r3, [fp, #-24]	; 0xffffffe8
    86a4:	str	r1, [r3]
    86a8:	str	r2, [r3, #4]
    86ac:	ldr	r1, [fp, #-16]
    86b0:	add	r1, r1, #8
    86b4:	sub	lr, fp, #4096	; 0x1000
    86b8:	sub	r2, lr, #368	; 0x170
    86bc:	mov	r0, r1
    86c0:	mov	r1, r2
    86c4:	movw	r2, #520	; 0x208
    86c8:	bl	0 <memcpy>
    86cc:	b	8740 <eval_integer+0x17d0>
    86d0:	ldr	r0, [fp, #-16]
    86d4:	ldr	r1, [fp, #-28]	; 0xffffffe4
    86d8:	ldr	r1, [r1, #16]
    86dc:	sub	lr, fp, #4096	; 0x1000
    86e0:	sub	r2, lr, #376	; 0x178
    86e4:	sub	lr, fp, #4096	; 0x1000
    86e8:	sub	r3, lr, #380	; 0x17c
    86ec:	sub	ip, fp, #4480	; 0x1180
    86f0:	str	ip, [sp]
    86f4:	bl	aacc <eval_string>
    86f8:	cmp	r0, #0
    86fc:	beq	870c <eval_integer+0x179c>
    8700:	mvn	r0, #0
    8704:	str	r0, [fp, #-12]
    8708:	b	9454 <eval_integer+0x24e4>
    870c:	ldr	r0, [sp, #168]	; 0xa8
    8710:	ldr	r1, [r0, #568]	; 0x238
    8714:	cmp	r1, #0
    8718:	ble	8728 <eval_integer+0x17b8>
    871c:	ldr	r0, [sp, #168]	; 0xa8
    8720:	ldr	r0, [r0, #564]	; 0x234
    8724:	bl	0 <free>
    8728:	ldr	r0, [sp, #168]	; 0xa8
    872c:	ldr	r1, [r0, #568]	; 0x238
    8730:	asr	r2, r1, #31
    8734:	ldr	r3, [fp, #-24]	; 0xffffffe8
    8738:	str	r1, [r3]
    873c:	str	r2, [r3, #4]
    8740:	b	944c <eval_integer+0x24dc>
    8744:	ldr	r0, [fp, #-16]
    8748:	ldr	r0, [r0]
    874c:	movw	r1, #0
    8750:	cmp	r0, r1
    8754:	beq	875c <eval_integer+0x17ec>
    8758:	b	877c <eval_integer+0x180c>
    875c:	movw	r0, #0
    8760:	movt	r0, #0
    8764:	movw	r1, #0
    8768:	movt	r1, #0
    876c:	movw	r2, #2528	; 0x9e0
    8770:	movw	r3, #0
    8774:	movt	r3, #0
    8778:	bl	0 <__assert_fail>
    877c:	ldr	r0, [fp, #-16]
    8780:	add	r0, r0, #8
    8784:	add	lr, sp, #4096	; 0x1000
    8788:	add	r1, lr, #368	; 0x170
    878c:	str	r0, [sp, #52]	; 0x34
    8790:	mov	r0, r1
    8794:	ldr	r1, [sp, #52]	; 0x34
    8798:	movw	r2, #520	; 0x208
    879c:	bl	0 <memcpy>
    87a0:	ldr	r0, [fp, #-16]
    87a4:	ldr	r1, [fp, #-28]	; 0xffffffe4
    87a8:	ldr	r1, [r1, #16]
    87ac:	bl	d154 <eval_cursor>
    87b0:	cmp	r0, #0
    87b4:	beq	87c4 <eval_integer+0x1854>
    87b8:	mvn	r0, #0
    87bc:	str	r0, [fp, #-12]
    87c0:	b	9454 <eval_integer+0x24e4>
    87c4:	ldr	r0, [fp, #-16]
    87c8:	ldr	r1, [fp, #-28]	; 0xffffffe4
    87cc:	ldr	r1, [r1, #20]
    87d0:	add	r2, sp, #4416	; 0x1140
    87d4:	bl	6f70 <eval_integer>
    87d8:	cmp	r0, #0
    87dc:	beq	87ec <eval_integer+0x187c>
    87e0:	mvn	r0, #0
    87e4:	str	r0, [fp, #-12]
    87e8:	b	9454 <eval_integer+0x24e4>
    87ec:	add	lr, sp, #4096	; 0x1000
    87f0:	add	r2, lr, #336	; 0x150
    87f4:	ldr	r0, [fp, #-16]
    87f8:	add	r0, r0, #8
    87fc:	add	lr, sp, #4096	; 0x1000
    8800:	add	r1, lr, #332	; 0x14c
    8804:	bl	0 <coda_cursor_get_array_dim>
    8808:	cmp	r0, #0
    880c:	beq	881c <eval_integer+0x18ac>
    8810:	mvn	r0, #0
    8814:	str	r0, [fp, #-12]
    8818:	b	9454 <eval_integer+0x24e4>
    881c:	ldr	r0, [sp, #168]	; 0xa8
    8820:	ldr	r1, [r0]
    8824:	cmn	r1, #1
    8828:	bgt	8854 <eval_integer+0x18e4>
    882c:	b	8830 <eval_integer+0x18c0>
    8830:	ldr	r0, [sp, #168]	; 0xa8
    8834:	ldr	r2, [r0, #-4]
    8838:	mvn	r0, #400	; 0x190
    883c:	movw	r1, #0
    8840:	movt	r1, #0
    8844:	bl	0 <coda_set_error>
    8848:	mvn	r0, #0
    884c:	str	r0, [fp, #-12]
    8850:	b	9454 <eval_integer+0x24e4>
    8854:	ldr	r0, [sp, #168]	; 0xa8
    8858:	ldr	r1, [r0, #-4]
    885c:	ldr	r2, [r0]
    8860:	ldr	r3, [r0, #8]
    8864:	subs	r1, r1, r3
    8868:	sbcs	r2, r2, r3, asr #31
    886c:	blt	889c <eval_integer+0x192c>
    8870:	b	8874 <eval_integer+0x1904>
    8874:	ldr	r0, [sp, #168]	; 0xa8
    8878:	ldr	r2, [r0, #-4]
    887c:	ldr	r3, [r0, #8]
    8880:	mvn	r0, #400	; 0x190
    8884:	movw	r1, #0
    8888:	movt	r1, #0
    888c:	bl	0 <coda_set_error>
    8890:	mvn	r0, #0
    8894:	str	r0, [fp, #-12]
    8898:	b	9454 <eval_integer+0x24e4>
    889c:	ldr	r0, [fp, #-16]
    88a0:	add	r0, r0, #8
    88a4:	add	lr, sp, #4096	; 0x1000
    88a8:	add	r1, lr, #368	; 0x170
    88ac:	mov	r2, #520	; 0x208
    88b0:	bl	0 <memcpy>
    88b4:	ldr	r1, [sp, #168]	; 0xa8
    88b8:	ldr	r2, [r1, #-4]
    88bc:	add	lr, sp, #4096	; 0x1000
    88c0:	add	r3, lr, #336	; 0x150
    88c4:	ldr	r2, [r3, r2, lsl #2]
    88c8:	asr	r3, r2, #31
    88cc:	ldr	ip, [fp, #-24]	; 0xffffffe8
    88d0:	str	r2, [ip]
    88d4:	str	r3, [ip, #4]
    88d8:	b	944c <eval_integer+0x24dc>
    88dc:	ldr	r0, [fp, #-16]
    88e0:	ldr	r0, [r0]
    88e4:	movw	r1, #0
    88e8:	cmp	r0, r1
    88ec:	beq	88f4 <eval_integer+0x1984>
    88f0:	b	8914 <eval_integer+0x19a4>
    88f4:	movw	r0, #0
    88f8:	movt	r0, #0
    88fc:	movw	r1, #0
    8900:	movt	r1, #0
    8904:	movw	r2, #2563	; 0xa03
    8908:	movw	r3, #0
    890c:	movt	r3, #0
    8910:	bl	0 <__assert_fail>
    8914:	ldr	r0, [fp, #-16]
    8918:	add	r0, r0, #8
    891c:	add	lr, sp, #3072	; 0xc00
    8920:	add	r1, lr, #824	; 0x338
    8924:	str	r0, [sp, #48]	; 0x30
    8928:	mov	r0, r1
    892c:	ldr	r1, [sp, #48]	; 0x30
    8930:	movw	r2, #520	; 0x208
    8934:	bl	0 <memcpy>
    8938:	ldr	r0, [fp, #-16]
    893c:	ldr	r1, [fp, #-28]	; 0xffffffe4
    8940:	ldr	r1, [r1, #16]
    8944:	bl	d154 <eval_cursor>
    8948:	cmp	r0, #0
    894c:	beq	895c <eval_integer+0x19ec>
    8950:	mvn	r0, #0
    8954:	str	r0, [fp, #-12]
    8958:	b	9454 <eval_integer+0x24e4>
    895c:	ldr	r0, [fp, #-16]
    8960:	add	r0, r0, #8
    8964:	add	lr, sp, #3072	; 0xc00
    8968:	add	r1, lr, #820	; 0x334
    896c:	bl	0 <coda_cursor_get_type>
    8970:	cmp	r0, #0
    8974:	beq	8984 <eval_integer+0x1a14>
    8978:	mvn	r0, #0
    897c:	str	r0, [fp, #-12]
    8980:	b	9454 <eval_integer+0x24e4>
    8984:	ldr	r0, [sp, #3892]	; 0xf34
    8988:	add	r1, sp, #3888	; 0xf30
    898c:	bl	0 <coda_type_get_array_num_dims>
    8990:	cmp	r0, #0
    8994:	beq	89a4 <eval_integer+0x1a34>
    8998:	mvn	r0, #0
    899c:	str	r0, [fp, #-12]
    89a0:	b	9454 <eval_integer+0x24e4>
    89a4:	ldr	r0, [fp, #-16]
    89a8:	add	r0, r0, #8
    89ac:	add	lr, sp, #3072	; 0xc00
    89b0:	add	r1, lr, #824	; 0x338
    89b4:	mov	r2, #520	; 0x208
    89b8:	bl	0 <memcpy>
    89bc:	ldr	r1, [sp, #3888]	; 0xf30
    89c0:	asr	r2, r1, #31
    89c4:	ldr	r3, [fp, #-24]	; 0xffffffe8
    89c8:	str	r1, [r3]
    89cc:	str	r2, [r3, #4]
    89d0:	b	944c <eval_integer+0x24dc>
    89d4:	ldr	r0, [fp, #-16]
    89d8:	ldr	r0, [r0]
    89dc:	movw	r1, #0
    89e0:	cmp	r0, r1
    89e4:	beq	89ec <eval_integer+0x1a7c>
    89e8:	b	8a0c <eval_integer+0x1a9c>
    89ec:	movw	r0, #0
    89f0:	movt	r0, #0
    89f4:	movw	r1, #0
    89f8:	movt	r1, #0
    89fc:	movw	r2, #2586	; 0xa1a
    8a00:	movw	r3, #0
    8a04:	movt	r3, #0
    8a08:	bl	0 <__assert_fail>
    8a0c:	ldr	r0, [fp, #-16]
    8a10:	add	r0, r0, #8
    8a14:	add	lr, sp, #3072	; 0xc00
    8a18:	add	r1, lr, #296	; 0x128
    8a1c:	str	r0, [sp, #44]	; 0x2c
    8a20:	mov	r0, r1
    8a24:	ldr	r1, [sp, #44]	; 0x2c
    8a28:	movw	r2, #520	; 0x208
    8a2c:	bl	0 <memcpy>
    8a30:	ldr	r0, [fp, #-16]
    8a34:	ldr	r1, [fp, #-28]	; 0xffffffe4
    8a38:	ldr	r1, [r1, #16]
    8a3c:	bl	d154 <eval_cursor>
    8a40:	cmp	r0, #0
    8a44:	beq	8a54 <eval_integer+0x1ae4>
    8a48:	mvn	r0, #0
    8a4c:	str	r0, [fp, #-12]
    8a50:	b	9454 <eval_integer+0x24e4>
    8a54:	ldr	r0, [fp, #-16]
    8a58:	add	r0, r0, #8
    8a5c:	add	lr, sp, #3072	; 0xc00
    8a60:	add	r1, lr, #292	; 0x124
    8a64:	bl	0 <coda_cursor_get_num_elements>
    8a68:	cmp	r0, #0
    8a6c:	beq	8a7c <eval_integer+0x1b0c>
    8a70:	mvn	r0, #0
    8a74:	str	r0, [fp, #-12]
    8a78:	b	9454 <eval_integer+0x24e4>
    8a7c:	ldr	r0, [fp, #-16]
    8a80:	add	r0, r0, #8
    8a84:	add	lr, sp, #3072	; 0xc00
    8a88:	add	r1, lr, #296	; 0x128
    8a8c:	mov	r2, #520	; 0x208
    8a90:	bl	0 <memcpy>
    8a94:	ldr	r1, [sp, #3364]	; 0xd24
    8a98:	asr	r2, r1, #31
    8a9c:	ldr	r3, [fp, #-24]	; 0xffffffe8
    8aa0:	str	r1, [r3]
    8aa4:	str	r2, [r3, #4]
    8aa8:	b	944c <eval_integer+0x24dc>
    8aac:	ldr	r0, [fp, #-16]
    8ab0:	ldr	r0, [r0]
    8ab4:	movw	r1, #0
    8ab8:	cmp	r0, r1
    8abc:	beq	8ac4 <eval_integer+0x1b54>
    8ac0:	b	8ae4 <eval_integer+0x1b74>
    8ac4:	movw	r0, #0
    8ac8:	movt	r0, #0
    8acc:	movw	r1, #0
    8ad0:	movt	r1, #0
    8ad4:	movw	r2, #2605	; 0xa2d
    8ad8:	movw	r3, #0
    8adc:	movt	r3, #0
    8ae0:	bl	0 <__assert_fail>
    8ae4:	ldr	r0, [fp, #-16]
    8ae8:	add	r0, r0, #8
    8aec:	add	lr, sp, #2048	; 0x800
    8af0:	add	r1, lr, #792	; 0x318
    8af4:	str	r0, [sp, #40]	; 0x28
    8af8:	mov	r0, r1
    8afc:	ldr	r1, [sp, #40]	; 0x28
    8b00:	movw	r2, #520	; 0x208
    8b04:	bl	0 <memcpy>
    8b08:	ldr	r0, [fp, #-16]
    8b0c:	ldr	r1, [fp, #-28]	; 0xffffffe4
    8b10:	ldr	r1, [r1, #16]
    8b14:	bl	d154 <eval_cursor>
    8b18:	cmp	r0, #0
    8b1c:	beq	8b2c <eval_integer+0x1bbc>
    8b20:	mvn	r0, #0
    8b24:	str	r0, [fp, #-12]
    8b28:	b	9454 <eval_integer+0x24e4>
    8b2c:	bl	0 <coda_get_option_use_fast_size_expressions>
    8b30:	str	r0, [sp, #2836]	; 0xb14
    8b34:	movw	r0, #0
    8b38:	bl	0 <coda_set_option_use_fast_size_expressions>
    8b3c:	ldr	r1, [fp, #-16]
    8b40:	add	r1, r1, #8
    8b44:	ldr	r2, [fp, #-24]	; 0xffffffe8
    8b48:	str	r0, [sp, #36]	; 0x24
    8b4c:	mov	r0, r1
    8b50:	mov	r1, r2
    8b54:	bl	0 <coda_cursor_get_bit_size>
    8b58:	cmp	r0, #0
    8b5c:	beq	8b74 <eval_integer+0x1c04>
    8b60:	ldr	r0, [sp, #2836]	; 0xb14
    8b64:	bl	0 <coda_set_option_use_fast_size_expressions>
    8b68:	mvn	r1, #0
    8b6c:	str	r1, [fp, #-12]
    8b70:	b	9454 <eval_integer+0x24e4>
    8b74:	ldr	r0, [sp, #2836]	; 0xb14
    8b78:	bl	0 <coda_set_option_use_fast_size_expressions>
    8b7c:	ldr	r1, [fp, #-16]
    8b80:	add	r1, r1, #8
    8b84:	add	lr, sp, #2048	; 0x800
    8b88:	add	r2, lr, #792	; 0x318
    8b8c:	str	r0, [sp, #32]
    8b90:	mov	r0, r1
    8b94:	mov	r1, r2
    8b98:	movw	r2, #520	; 0x208
    8b9c:	bl	0 <memcpy>
    8ba0:	b	944c <eval_integer+0x24dc>
    8ba4:	ldr	r0, [fp, #-16]
    8ba8:	ldr	r0, [r0]
    8bac:	movw	r1, #0
    8bb0:	cmp	r0, r1
    8bb4:	beq	8bbc <eval_integer+0x1c4c>
    8bb8:	b	8bdc <eval_integer+0x1c6c>
    8bbc:	movw	r0, #0
    8bc0:	movt	r0, #0
    8bc4:	movw	r1, #0
    8bc8:	movt	r1, #0
    8bcc:	movw	r2, #2627	; 0xa43
    8bd0:	movw	r3, #0
    8bd4:	movt	r3, #0
    8bd8:	bl	0 <__assert_fail>
    8bdc:	ldr	r0, [fp, #-16]
    8be0:	add	r0, r0, #8
    8be4:	add	lr, sp, #2048	; 0x800
    8be8:	add	r1, lr, #264	; 0x108
    8bec:	str	r0, [sp, #28]
    8bf0:	mov	r0, r1
    8bf4:	ldr	r1, [sp, #28]
    8bf8:	movw	r2, #520	; 0x208
    8bfc:	bl	0 <memcpy>
    8c00:	ldr	r0, [fp, #-16]
    8c04:	ldr	r1, [fp, #-28]	; 0xffffffe4
    8c08:	ldr	r1, [r1, #16]
    8c0c:	bl	d154 <eval_cursor>
    8c10:	cmp	r0, #0
    8c14:	beq	8c24 <eval_integer+0x1cb4>
    8c18:	mvn	r0, #0
    8c1c:	str	r0, [fp, #-12]
    8c20:	b	9454 <eval_integer+0x24e4>
    8c24:	bl	0 <coda_get_option_use_fast_size_expressions>
    8c28:	str	r0, [sp, #2308]	; 0x904
    8c2c:	movw	r0, #0
    8c30:	bl	0 <coda_set_option_use_fast_size_expressions>
    8c34:	ldr	r1, [fp, #-16]
    8c38:	add	r1, r1, #8
    8c3c:	ldr	r2, [fp, #-24]	; 0xffffffe8
    8c40:	str	r0, [sp, #24]
    8c44:	mov	r0, r1
    8c48:	mov	r1, r2
    8c4c:	bl	0 <coda_cursor_get_byte_size>
    8c50:	cmp	r0, #0
    8c54:	beq	8c6c <eval_integer+0x1cfc>
    8c58:	ldr	r0, [sp, #2308]	; 0x904
    8c5c:	bl	0 <coda_set_option_use_fast_size_expressions>
    8c60:	mvn	r1, #0
    8c64:	str	r1, [fp, #-12]
    8c68:	b	9454 <eval_integer+0x24e4>
    8c6c:	ldr	r0, [sp, #2308]	; 0x904
    8c70:	bl	0 <coda_set_option_use_fast_size_expressions>
    8c74:	ldr	r1, [fp, #-16]
    8c78:	add	r1, r1, #8
    8c7c:	add	lr, sp, #2048	; 0x800
    8c80:	add	r2, lr, #264	; 0x108
    8c84:	str	r0, [sp, #20]
    8c88:	mov	r0, r1
    8c8c:	mov	r1, r2
    8c90:	movw	r2, #520	; 0x208
    8c94:	bl	0 <memcpy>
    8c98:	b	944c <eval_integer+0x24dc>
    8c9c:	ldr	r0, [fp, #-16]
    8ca0:	ldr	r0, [r0]
    8ca4:	movw	r1, #0
    8ca8:	cmp	r0, r1
    8cac:	beq	8cb4 <eval_integer+0x1d44>
    8cb0:	b	8cd4 <eval_integer+0x1d64>
    8cb4:	movw	r0, #0
    8cb8:	movt	r0, #0
    8cbc:	movw	r1, #0
    8cc0:	movt	r1, #0
    8cc4:	movw	r2, #2648	; 0xa58
    8cc8:	movw	r3, #0
    8ccc:	movt	r3, #0
    8cd0:	bl	0 <__assert_fail>
    8cd4:	ldr	r0, [fp, #-16]
    8cd8:	add	r0, r0, #8
    8cdc:	add	lr, sp, #1024	; 0x400
    8ce0:	add	r1, lr, #760	; 0x2f8
    8ce4:	str	r0, [sp, #16]
    8ce8:	mov	r0, r1
    8cec:	ldr	r1, [sp, #16]
    8cf0:	movw	r2, #520	; 0x208
    8cf4:	bl	0 <memcpy>
    8cf8:	ldr	r0, [fp, #-16]
    8cfc:	ldr	r1, [fp, #-28]	; 0xffffffe4
    8d00:	ldr	r1, [r1, #16]
    8d04:	bl	d154 <eval_cursor>
    8d08:	cmp	r0, #0
    8d0c:	beq	8d1c <eval_integer+0x1dac>
    8d10:	mvn	r0, #0
    8d14:	str	r0, [fp, #-12]
    8d18:	b	9454 <eval_integer+0x24e4>
    8d1c:	ldr	r0, [fp, #-16]
    8d20:	add	r0, r0, #8
    8d24:	ldr	r1, [fp, #-24]	; 0xffffffe8
    8d28:	bl	0 <coda_cursor_get_file_bit_offset>
    8d2c:	cmp	r0, #0
    8d30:	beq	8d40 <eval_integer+0x1dd0>
    8d34:	mvn	r0, #0
    8d38:	str	r0, [fp, #-12]
    8d3c:	b	9454 <eval_integer+0x24e4>
    8d40:	ldr	r0, [fp, #-16]
    8d44:	add	r0, r0, #8
    8d48:	add	lr, sp, #1024	; 0x400
    8d4c:	add	r1, lr, #760	; 0x2f8
    8d50:	movw	r2, #520	; 0x208
    8d54:	bl	0 <memcpy>
    8d58:	b	944c <eval_integer+0x24dc>
    8d5c:	ldr	r0, [fp, #-16]
    8d60:	ldr	r0, [r0]
    8d64:	movw	r1, #0
    8d68:	cmp	r0, r1
    8d6c:	beq	8d74 <eval_integer+0x1e04>
    8d70:	b	8d94 <eval_integer+0x1e24>
    8d74:	movw	r0, #0
    8d78:	movt	r0, #0
    8d7c:	movw	r1, #0
    8d80:	movt	r1, #0
    8d84:	movw	r2, #2665	; 0xa69
    8d88:	movw	r3, #0
    8d8c:	movt	r3, #0
    8d90:	bl	0 <__assert_fail>
    8d94:	ldr	r0, [fp, #-16]
    8d98:	add	r0, r0, #8
    8d9c:	add	r1, sp, #1264	; 0x4f0
    8da0:	str	r0, [sp, #12]
    8da4:	mov	r0, r1
    8da8:	ldr	r1, [sp, #12]
    8dac:	movw	r2, #520	; 0x208
    8db0:	bl	0 <memcpy>
    8db4:	ldr	r0, [fp, #-16]
    8db8:	ldr	r1, [fp, #-28]	; 0xffffffe4
    8dbc:	ldr	r1, [r1, #16]
    8dc0:	bl	d154 <eval_cursor>
    8dc4:	cmp	r0, #0
    8dc8:	beq	8dd8 <eval_integer+0x1e68>
    8dcc:	mvn	r0, #0
    8dd0:	str	r0, [fp, #-12]
    8dd4:	b	9454 <eval_integer+0x24e4>
    8dd8:	ldr	r0, [fp, #-16]
    8ddc:	add	r0, r0, #8
    8de0:	ldr	r1, [fp, #-24]	; 0xffffffe8
    8de4:	bl	0 <coda_cursor_get_file_byte_offset>
    8de8:	cmp	r0, #0
    8dec:	beq	8dfc <eval_integer+0x1e8c>
    8df0:	mvn	r0, #0
    8df4:	str	r0, [fp, #-12]
    8df8:	b	9454 <eval_integer+0x24e4>
    8dfc:	ldr	r0, [fp, #-16]
    8e00:	add	r0, r0, #8
    8e04:	add	r1, sp, #1264	; 0x4f0
    8e08:	movw	r2, #520	; 0x208
    8e0c:	bl	0 <memcpy>
    8e10:	b	944c <eval_integer+0x24dc>
    8e14:	ldr	r0, [fp, #-16]
    8e18:	ldr	r0, [r0]
    8e1c:	movw	r1, #0
    8e20:	cmp	r0, r1
    8e24:	beq	8e2c <eval_integer+0x1ebc>
    8e28:	b	8e4c <eval_integer+0x1edc>
    8e2c:	movw	r0, #0
    8e30:	movt	r0, #0
    8e34:	movw	r1, #0
    8e38:	movt	r1, #0
    8e3c:	movw	r2, #2679	; 0xa77
    8e40:	movw	r3, #0
    8e44:	movt	r3, #0
    8e48:	bl	0 <__assert_fail>
    8e4c:	ldr	r0, [fp, #-16]
    8e50:	ldr	r0, [r0]
    8e54:	ldr	r0, [r0]
    8e58:	ldr	r1, [fp, #-24]	; 0xffffffe8
    8e5c:	bl	0 <coda_get_product_file_size>
    8e60:	cmp	r0, #0
    8e64:	beq	8e74 <eval_integer+0x1f04>
    8e68:	mvn	r0, #0
    8e6c:	str	r0, [fp, #-12]
    8e70:	b	9454 <eval_integer+0x24e4>
    8e74:	b	944c <eval_integer+0x24dc>
    8e78:	ldr	r0, [fp, #-16]
    8e7c:	ldr	r0, [r0]
    8e80:	movw	r1, #0
    8e84:	cmp	r0, r1
    8e88:	beq	8e90 <eval_integer+0x1f20>
    8e8c:	b	8eb0 <eval_integer+0x1f40>
    8e90:	movw	r0, #0
    8e94:	movt	r0, #0
    8e98:	movw	r1, #0
    8e9c:	movt	r1, #0
    8ea0:	movw	r2, #2689	; 0xa81
    8ea4:	movw	r3, #0
    8ea8:	movt	r3, #0
    8eac:	bl	0 <__assert_fail>
    8eb0:	ldr	r0, [fp, #-16]
    8eb4:	ldr	r0, [r0]
    8eb8:	ldr	r0, [r0]
    8ebc:	add	lr, sp, #1024	; 0x400
    8ec0:	add	r1, lr, #236	; 0xec
    8ec4:	bl	0 <coda_get_product_version>
    8ec8:	cmp	r0, #0
    8ecc:	beq	8edc <eval_integer+0x1f6c>
    8ed0:	mvn	r0, #0
    8ed4:	str	r0, [fp, #-12]
    8ed8:	b	9454 <eval_integer+0x24e4>
    8edc:	ldr	r0, [sp, #1260]	; 0x4ec
    8ee0:	asr	r1, r0, #31
    8ee4:	ldr	r2, [fp, #-24]	; 0xffffffe8
    8ee8:	str	r0, [r2]
    8eec:	str	r1, [r2, #4]
    8ef0:	b	944c <eval_integer+0x24dc>
    8ef4:	ldr	r0, [fp, #-16]
    8ef8:	ldr	r0, [r0]
    8efc:	movw	r1, #0
    8f00:	cmp	r0, r1
    8f04:	beq	8f0c <eval_integer+0x1f9c>
    8f08:	b	8f2c <eval_integer+0x1fbc>
    8f0c:	movw	r0, #0
    8f10:	movt	r0, #0
    8f14:	movw	r1, #0
    8f18:	movt	r1, #0
    8f1c:	movw	r2, #2702	; 0xa8e
    8f20:	movw	r3, #0
    8f24:	movt	r3, #0
    8f28:	bl	0 <__assert_fail>
    8f2c:	ldr	r0, [fp, #-16]
    8f30:	add	r0, r0, #8
    8f34:	add	r1, sp, #736	; 0x2e0
    8f38:	str	r0, [sp, #8]
    8f3c:	mov	r0, r1
    8f40:	ldr	r1, [sp, #8]
    8f44:	movw	r2, #520	; 0x208
    8f48:	bl	0 <memcpy>
    8f4c:	ldr	r0, [fp, #-16]
    8f50:	ldr	r1, [fp, #-28]	; 0xffffffe4
    8f54:	ldr	r1, [r1, #16]
    8f58:	bl	d154 <eval_cursor>
    8f5c:	cmp	r0, #0
    8f60:	beq	8f70 <eval_integer+0x2000>
    8f64:	mvn	r0, #0
    8f68:	str	r0, [fp, #-12]
    8f6c:	b	9454 <eval_integer+0x24e4>
    8f70:	ldr	r0, [fp, #-16]
    8f74:	add	r0, r0, #8
    8f78:	add	r1, sp, #732	; 0x2dc
    8f7c:	bl	0 <coda_cursor_get_index>
    8f80:	cmp	r0, #0
    8f84:	beq	8f94 <eval_integer+0x2024>
    8f88:	mvn	r0, #0
    8f8c:	str	r0, [fp, #-12]
    8f90:	b	9454 <eval_integer+0x24e4>
    8f94:	ldr	r0, [fp, #-16]
    8f98:	add	r0, r0, #8
    8f9c:	add	r1, sp, #736	; 0x2e0
    8fa0:	mov	r2, #520	; 0x208
    8fa4:	bl	0 <memcpy>
    8fa8:	ldr	r1, [sp, #732]	; 0x2dc
    8fac:	asr	r2, r1, #31
    8fb0:	ldr	r3, [fp, #-24]	; 0xffffffe8
    8fb4:	str	r1, [r3]
    8fb8:	str	r2, [r3, #4]
    8fbc:	b	944c <eval_integer+0x24dc>
    8fc0:	ldr	r0, [fp, #-16]
    8fc4:	ldr	r1, [fp, #-28]	; 0xffffffe4
    8fc8:	ldr	r1, [r1, #12]
    8fcc:	ldrb	r1, [r1]
    8fd0:	add	r0, r0, r1, lsl #3
    8fd4:	ldr	r1, [r0, #-312]	; 0xfffffec8
    8fd8:	ldr	r0, [r0, #-308]	; 0xfffffecc
    8fdc:	ldr	r2, [fp, #-24]	; 0xffffffe8
    8fe0:	str	r0, [r2, #4]
    8fe4:	str	r1, [r2]
    8fe8:	b	944c <eval_integer+0x24dc>
    8fec:	ldr	r0, [fp, #-16]
    8ff0:	ldr	r0, [r0]
    8ff4:	movw	r1, #0
    8ff8:	cmp	r0, r1
    8ffc:	beq	9004 <eval_integer+0x2094>
    9000:	b	9024 <eval_integer+0x20b4>
    9004:	movw	r0, #0
    9008:	movt	r0, #0
    900c:	movw	r1, #0
    9010:	movt	r1, #0
    9014:	movw	r2, #2724	; 0xaa4
    9018:	movw	r3, #0
    901c:	movt	r3, #0
    9020:	bl	0 <__assert_fail>
    9024:	ldr	r0, [fp, #-16]
    9028:	ldr	r0, [r0, #560]	; 0x230
    902c:	movw	r1, #0
    9030:	cmp	r0, r1
    9034:	beq	9054 <eval_integer+0x20e4>
    9038:	mvn	r0, #400	; 0x190
    903c:	movw	r1, #0
    9040:	movt	r1, #0
    9044:	bl	0 <coda_set_error>
    9048:	mvn	r0, #0
    904c:	str	r0, [fp, #-12]
    9050:	b	9454 <eval_integer+0x24e4>
    9054:	ldr	r0, [fp, #-16]
    9058:	ldr	r0, [r0]
    905c:	ldr	r0, [r0]
    9060:	ldr	r1, [fp, #-28]	; 0xffffffe4
    9064:	ldr	r1, [r1, #12]
    9068:	add	r2, sp, #728	; 0x2d8
    906c:	bl	0 <coda_product_variable_get_size>
    9070:	cmp	r0, #0
    9074:	beq	9084 <eval_integer+0x2114>
    9078:	mvn	r0, #0
    907c:	str	r0, [fp, #-12]
    9080:	b	9454 <eval_integer+0x24e4>
    9084:	ldr	r0, [fp, #-28]	; 0xffffffe4
    9088:	ldr	r0, [r0, #12]
    908c:	ldr	r1, [fp, #-16]
    9090:	str	r0, [r1, #560]	; 0x230
    9094:	movw	r0, #0
    9098:	str	r0, [sp, #724]	; 0x2d4
    909c:	ldr	r0, [sp, #724]	; 0x2d4
    90a0:	ldr	r1, [sp, #728]	; 0x2d8
    90a4:	cmp	r0, r1
    90a8:	bge	9130 <eval_integer+0x21c0>
    90ac:	ldr	r0, [sp, #724]	; 0x2d4
    90b0:	asr	r1, r0, #31
    90b4:	ldr	r2, [fp, #-16]
    90b8:	str	r0, [r2, #552]	; 0x228
    90bc:	str	r1, [r2, #556]	; 0x22c
    90c0:	ldr	r0, [fp, #-16]
    90c4:	ldr	r1, [fp, #-28]	; 0xffffffe4
    90c8:	ldr	r1, [r1, #16]
    90cc:	add	r2, sp, #720	; 0x2d0
    90d0:	bl	5170 <eval_boolean>
    90d4:	cmp	r0, #0
    90d8:	beq	90e8 <eval_integer+0x2178>
    90dc:	mvn	r0, #0
    90e0:	str	r0, [fp, #-12]
    90e4:	b	9454 <eval_integer+0x24e4>
    90e8:	ldr	r0, [sp, #720]	; 0x2d0
    90ec:	cmp	r0, #0
    90f0:	beq	911c <eval_integer+0x21ac>
    90f4:	ldr	r0, [sp, #724]	; 0x2d4
    90f8:	asr	r1, r0, #31
    90fc:	ldr	r2, [fp, #-24]	; 0xffffffe8
    9100:	str	r0, [r2]
    9104:	str	r1, [r2, #4]
    9108:	ldr	r0, [fp, #-16]
    910c:	movw	r1, #0
    9110:	str	r1, [r0, #560]	; 0x230
    9114:	str	r1, [fp, #-12]
    9118:	b	9454 <eval_integer+0x24e4>
    911c:	b	9120 <eval_integer+0x21b0>
    9120:	ldr	r0, [sp, #724]	; 0x2d4
    9124:	add	r0, r0, #1
    9128:	str	r0, [sp, #724]	; 0x2d4
    912c:	b	909c <eval_integer+0x212c>
    9130:	ldr	r0, [fp, #-24]	; 0xffffffe8
    9134:	mvn	r1, #0
    9138:	str	r1, [r0, #4]
    913c:	str	r1, [r0]
    9140:	ldr	r0, [fp, #-16]
    9144:	movw	r1, #0
    9148:	str	r1, [r0, #560]	; 0x230
    914c:	b	944c <eval_integer+0x24dc>
    9150:	mov	r0, #0
    9154:	str	r0, [sp, #708]	; 0x2c4
    9158:	str	r0, [sp, #704]	; 0x2c0
    915c:	ldr	r0, [fp, #-16]
    9160:	ldr	r0, [r0]
    9164:	movw	r1, #0
    9168:	cmp	r0, r1
    916c:	beq	9174 <eval_integer+0x2204>
    9170:	b	9194 <eval_integer+0x2224>
    9174:	movw	r0, #0
    9178:	movt	r0, #0
    917c:	movw	r1, #0
    9180:	movt	r1, #0
    9184:	movw	r2, #2761	; 0xac9
    9188:	movw	r3, #0
    918c:	movt	r3, #0
    9190:	bl	0 <__assert_fail>
    9194:	ldr	r0, [fp, #-28]	; 0xffffffe4
    9198:	ldr	r0, [r0, #16]
    919c:	movw	r1, #0
    91a0:	cmp	r0, r1
    91a4:	beq	9228 <eval_integer+0x22b8>
    91a8:	ldr	r0, [fp, #-16]
    91ac:	ldr	r0, [r0, #560]	; 0x230
    91b0:	movw	r1, #0
    91b4:	cmp	r0, r1
    91b8:	beq	91fc <eval_integer+0x228c>
    91bc:	ldr	r0, [fp, #-28]	; 0xffffffe4
    91c0:	ldr	r0, [r0, #12]
    91c4:	ldr	r1, [fp, #-16]
    91c8:	ldr	r1, [r1, #560]	; 0x230
    91cc:	bl	0 <strcmp>
    91d0:	cmp	r0, #0
    91d4:	bne	91fc <eval_integer+0x228c>
    91d8:	ldr	r0, [fp, #-28]	; 0xffffffe4
    91dc:	ldr	r2, [r0, #12]
    91e0:	mvn	r0, #400	; 0x190
    91e4:	movw	r1, #0
    91e8:	movt	r1, #0
    91ec:	bl	0 <coda_set_error>
    91f0:	mvn	r0, #0
    91f4:	str	r0, [fp, #-12]
    91f8:	b	9454 <eval_integer+0x24e4>
    91fc:	ldr	r0, [fp, #-16]
    9200:	ldr	r1, [fp, #-28]	; 0xffffffe4
    9204:	ldr	r1, [r1, #16]
    9208:	add	r2, sp, #704	; 0x2c0
    920c:	bl	6f70 <eval_integer>
    9210:	cmp	r0, #0
    9214:	beq	9224 <eval_integer+0x22b4>
    9218:	mvn	r0, #0
    921c:	str	r0, [fp, #-12]
    9220:	b	9454 <eval_integer+0x24e4>
    9224:	b	9270 <eval_integer+0x2300>
    9228:	ldr	r0, [fp, #-16]
    922c:	ldr	r0, [r0, #560]	; 0x230
    9230:	movw	r1, #0
    9234:	cmp	r0, r1
    9238:	beq	926c <eval_integer+0x22fc>
    923c:	ldr	r0, [fp, #-16]
    9240:	ldr	r0, [r0, #560]	; 0x230
    9244:	ldr	r1, [fp, #-28]	; 0xffffffe4
    9248:	ldr	r1, [r1, #12]
    924c:	bl	0 <strcmp>
    9250:	cmp	r0, #0
    9254:	bne	926c <eval_integer+0x22fc>
    9258:	ldr	r0, [fp, #-16]
    925c:	ldr	r1, [r0, #552]	; 0x228
    9260:	ldr	r0, [r0, #556]	; 0x22c
    9264:	str	r0, [sp, #708]	; 0x2c4
    9268:	str	r1, [sp, #704]	; 0x2c0
    926c:	b	9270 <eval_integer+0x2300>
    9270:	ldr	r0, [fp, #-16]
    9274:	ldr	r0, [r0]
    9278:	ldr	r0, [r0]
    927c:	ldr	r1, [fp, #-28]	; 0xffffffe4
    9280:	ldr	r1, [r1, #12]
    9284:	ldr	r2, [sp, #704]	; 0x2c0
    9288:	add	r3, sp, #716	; 0x2cc
    928c:	bl	0 <coda_product_variable_get_pointer>
    9290:	cmp	r0, #0
    9294:	beq	92a4 <eval_integer+0x2334>
    9298:	mvn	r0, #0
    929c:	str	r0, [fp, #-12]
    92a0:	b	9454 <eval_integer+0x24e4>
    92a4:	ldr	r0, [sp, #716]	; 0x2cc
    92a8:	ldr	r1, [r0]
    92ac:	ldr	r0, [r0, #4]
    92b0:	ldr	r2, [fp, #-24]	; 0xffffffe8
    92b4:	str	r0, [r2, #4]
    92b8:	str	r1, [r2]
    92bc:	b	944c <eval_integer+0x24dc>
    92c0:	ldr	r0, [fp, #-16]
    92c4:	ldr	r0, [r0]
    92c8:	movw	r1, #0
    92cc:	cmp	r0, r1
    92d0:	beq	92d8 <eval_integer+0x2368>
    92d4:	b	92f8 <eval_integer+0x2388>
    92d8:	movw	r0, #0
    92dc:	movt	r0, #0
    92e0:	movw	r1, #0
    92e4:	movt	r1, #0
    92e8:	movw	r2, #2792	; 0xae8
    92ec:	movw	r3, #0
    92f0:	movt	r3, #0
    92f4:	bl	0 <__assert_fail>
    92f8:	ldr	r0, [fp, #-16]
    92fc:	add	r0, r0, #8
    9300:	add	r1, sp, #184	; 0xb8
    9304:	str	r0, [sp, #4]
    9308:	mov	r0, r1
    930c:	ldr	r1, [sp, #4]
    9310:	movw	r2, #520	; 0x208
    9314:	bl	0 <memcpy>
    9318:	ldr	r0, [fp, #-16]
    931c:	ldr	r1, [fp, #-28]	; 0xffffffe4
    9320:	ldr	r1, [r1, #16]
    9324:	bl	d154 <eval_cursor>
    9328:	cmp	r0, #0
    932c:	beq	933c <eval_integer+0x23cc>
    9330:	mvn	r0, #0
    9334:	str	r0, [fp, #-12]
    9338:	b	9454 <eval_integer+0x24e4>
    933c:	ldr	r0, [fp, #-16]
    9340:	ldr	r1, [fp, #-28]	; 0xffffffe4
    9344:	ldr	r1, [r1, #20]
    9348:	ldr	r2, [fp, #-24]	; 0xffffffe8
    934c:	bl	6f70 <eval_integer>
    9350:	cmp	r0, #0
    9354:	beq	9364 <eval_integer+0x23f4>
    9358:	mvn	r0, #0
    935c:	str	r0, [fp, #-12]
    9360:	b	9454 <eval_integer+0x24e4>
    9364:	ldr	r0, [fp, #-16]
    9368:	add	r0, r0, #8
    936c:	add	r1, sp, #184	; 0xb8
    9370:	movw	r2, #520	; 0x208
    9374:	bl	0 <memcpy>
    9378:	b	944c <eval_integer+0x24dc>
    937c:	.word	0x00000fc0
    9380:	ldr	r0, [fp, #-28]	; 0xffffffe4
    9384:	ldr	r0, [r0, #12]
    9388:	ldrb	r0, [r0]
    938c:	sub	r0, r0, #105	; 0x69
    9390:	str	r0, [sp, #172]	; 0xac
    9394:	ldr	r0, [fp, #-16]
    9398:	ldr	r1, [sp, #172]	; 0xac
    939c:	add	r0, r0, r1, lsl #3
    93a0:	ldr	r1, [r0, #528]	; 0x210
    93a4:	ldr	r0, [r0, #532]	; 0x214
    93a8:	str	r0, [sp, #180]	; 0xb4
    93ac:	str	r1, [sp, #176]	; 0xb0
    93b0:	ldr	r0, [fp, #-16]
    93b4:	ldr	r1, [fp, #-28]	; 0xffffffe4
    93b8:	ldr	r1, [r1, #16]
    93bc:	add	r2, r0, #528	; 0x210
    93c0:	ldr	r3, [sp, #172]	; 0xac
    93c4:	add	r2, r2, r3, lsl #3
    93c8:	bl	6f70 <eval_integer>
    93cc:	cmp	r0, #0
    93d0:	beq	93e4 <eval_integer+0x2474>
    93d4:	mvn	r0, #0
    93d8:	str	r0, [fp, #-12]
    93dc:	b	9454 <eval_integer+0x24e4>
    93e0:	.word	0x00000fe8
    93e4:	ldr	r0, [fp, #-16]
    93e8:	ldr	r1, [fp, #-28]	; 0xffffffe4
    93ec:	ldr	r1, [r1, #20]
    93f0:	ldr	r2, [fp, #-24]	; 0xffffffe8
    93f4:	bl	6f70 <eval_integer>
    93f8:	cmp	r0, #0
    93fc:	beq	940c <eval_integer+0x249c>
    9400:	mvn	r0, #0
    9404:	str	r0, [fp, #-12]
    9408:	b	9454 <eval_integer+0x24e4>
    940c:	ldr	r0, [sp, #176]	; 0xb0
    9410:	ldr	r1, [sp, #180]	; 0xb4
    9414:	ldr	r2, [fp, #-16]
    9418:	ldr	r3, [sp, #172]	; 0xac
    941c:	add	r2, r2, r3, lsl #3
    9420:	str	r1, [r2, #532]	; 0x214
    9424:	str	r0, [r2, #528]	; 0x210
    9428:	b	944c <eval_integer+0x24dc>
    942c:	movw	r0, #0
    9430:	movt	r0, #0
    9434:	movw	r1, #0
    9438:	movt	r1, #0
    943c:	movw	r2, #2823	; 0xb07
    9440:	movw	r3, #0
    9444:	movt	r3, #0
    9448:	bl	0 <__assert_fail>
    944c:	movw	r0, #0
    9450:	str	r0, [fp, #-12]
    9454:	ldr	r0, [fp, #-12]
    9458:	sub	sp, fp, #8
    945c:	pop	{r4, r5, fp, pc}
    9460:	.word	0x00000eb8
    9464:	.word	0x00000ef8
    9468:	.word	0x00000f68
    946c:	.word	0x00000fe0

00009470 <coda_expression_eval_float>:
    9470:	push	{r4, r5, fp, lr}
    9474:	add	fp, sp, #8
    9478:	sub	sp, sp, #584	; 0x248
    947c:	str	r0, [fp, #-16]
    9480:	str	r1, [fp, #-20]	; 0xffffffec
    9484:	str	r2, [fp, #-24]	; 0xffffffe8
    9488:	ldr	r0, [fp, #-16]
    948c:	ldr	r0, [r0, #4]
    9490:	cmp	r0, #2
    9494:	beq	94b4 <coda_expression_eval_float+0x44>
    9498:	mvn	r0, #99	; 0x63
    949c:	movw	r1, #0
    94a0:	movt	r1, #0
    94a4:	bl	0 <coda_set_error>
    94a8:	mvn	r0, #0
    94ac:	str	r0, [fp, #-12]
    94b0:	b	955c <coda_expression_eval_float+0xec>
    94b4:	ldr	r0, [fp, #-20]	; 0xffffffec
    94b8:	movw	r1, #0
    94bc:	cmp	r0, r1
    94c0:	bne	94f0 <coda_expression_eval_float+0x80>
    94c4:	ldr	r0, [fp, #-16]
    94c8:	ldr	r0, [r0, #8]
    94cc:	cmp	r0, #0
    94d0:	bne	94f0 <coda_expression_eval_float+0x80>
    94d4:	mvn	r0, #99	; 0x63
    94d8:	movw	r1, #0
    94dc:	movt	r1, #0
    94e0:	bl	0 <coda_set_error>
    94e4:	mvn	r0, #0
    94e8:	str	r0, [fp, #-12]
    94ec:	b	955c <coda_expression_eval_float+0xec>
    94f0:	ldr	r1, [fp, #-20]	; 0xffffffec
    94f4:	mov	r0, sp
    94f8:	bl	c0c <init_eval_info>
    94fc:	ldr	r1, [fp, #-16]
    9500:	ldr	r2, [fp, #-24]	; 0xffffffe8
    9504:	mov	r0, sp
    9508:	bl	9568 <eval_float>
    950c:	cmp	r0, #0
    9510:	beq	9554 <coda_expression_eval_float+0xe4>
    9514:	ldr	r0, [fp, #-20]	; 0xffffffec
    9518:	movw	r1, #0
    951c:	cmp	r0, r1
    9520:	beq	9548 <coda_expression_eval_float+0xd8>
    9524:	ldr	r0, [fp, #-20]	; 0xffffffec
    9528:	mov	r1, sp
    952c:	add	r1, r1, #8
    9530:	bl	0 <coda_cursor_compare>
    9534:	cmp	r0, #0
    9538:	beq	9548 <coda_expression_eval_float+0xd8>
    953c:	mov	r0, sp
    9540:	add	r0, r0, #8
    9544:	bl	0 <coda_cursor_add_to_error_message>
    9548:	mvn	r0, #0
    954c:	str	r0, [fp, #-12]
    9550:	b	955c <coda_expression_eval_float+0xec>
    9554:	movw	r0, #0
    9558:	str	r0, [fp, #-12]
    955c:	ldr	r0, [fp, #-12]
    9560:	sub	sp, fp, #8
    9564:	pop	{r4, r5, fp, pc}

00009568 <eval_float>:
    9568:	push	{r4, r5, fp, lr}
    956c:	add	fp, sp, #8
    9570:	sub	sp, sp, #2960	; 0xb90
    9574:	add	lr, sp, #1024	; 0x400
    9578:	add	r3, lr, #120	; 0x78
    957c:	str	r0, [fp, #-16]
    9580:	str	r1, [fp, #-20]	; 0xffffffec
    9584:	str	r2, [fp, #-24]	; 0xffffffe8
    9588:	ldr	r0, [fp, #-20]	; 0xffffffec
    958c:	ldr	r0, [r0, #4]
    9590:	cmp	r0, #1
    9594:	str	r3, [sp, #72]	; 0x48
    9598:	bne	95e4 <eval_float+0x7c>
    959c:	ldr	r0, [fp, #-16]
    95a0:	ldr	r1, [fp, #-20]	; 0xffffffec
    95a4:	sub	r2, fp, #40	; 0x28
    95a8:	bl	6f70 <eval_integer>
    95ac:	cmp	r0, #0
    95b0:	beq	95c0 <eval_float+0x58>
    95b4:	mvn	r0, #0
    95b8:	str	r0, [fp, #-12]
    95bc:	b	a8b4 <eval_float+0x134c>
    95c0:	ldr	r0, [fp, #-40]	; 0xffffffd8
    95c4:	ldr	r1, [fp, #-36]	; 0xffffffdc
    95c8:	bl	0 <__aeabi_l2d>
    95cc:	vmov	d16, r0, r1
    95d0:	ldr	r0, [fp, #-24]	; 0xffffffe8
    95d4:	vstr	d16, [r0]
    95d8:	movw	r0, #0
    95dc:	str	r0, [fp, #-12]
    95e0:	b	a8b4 <eval_float+0x134c>
    95e4:	ldr	r0, [fp, #-20]	; 0xffffffec
    95e8:	ldr	r0, [r0]
    95ec:	cmp	r0, #19
    95f0:	bne	9610 <eval_float+0xa8>
    95f4:	ldr	r0, [fp, #-20]	; 0xffffffec
    95f8:	vldr	d16, [r0, #16]
    95fc:	ldr	r0, [fp, #-24]	; 0xffffffe8
    9600:	vstr	d16, [r0]
    9604:	movw	r0, #0
    9608:	str	r0, [fp, #-12]
    960c:	b	a8b4 <eval_float+0x134c>
    9610:	ldr	r0, [fp, #-20]	; 0xffffffec
    9614:	str	r0, [fp, #-28]	; 0xffffffe4
    9618:	ldr	r0, [fp, #-28]	; 0xffffffe4
    961c:	ldr	r0, [r0]
    9620:	cmp	r0, #86	; 0x56
    9624:	str	r0, [sp, #68]	; 0x44
    9628:	bhi	a88c <eval_float+0x1324>
    962c:	add	r0, pc, #8
    9630:	ldr	r1, [sp, #68]	; 0x44
    9634:	ldr	r0, [r0, r1, lsl #2]
    9638:	mov	pc, r0
    963c:	.word	0x000099d8
    9640:	.word	0x00009b40
    9644:	.word	0x0000a88c
    9648:	.word	0x0000a200
    964c:	.word	0x0000a88c
    9650:	.word	0x0000a88c
    9654:	.word	0x0000a88c
    9658:	.word	0x0000a88c
    965c:	.word	0x0000a3a8
    9660:	.word	0x0000a570
    9664:	.word	0x0000a88c
    9668:	.word	0x0000a728
    966c:	.word	0x0000a88c
    9670:	.word	0x0000a88c
    9674:	.word	0x0000a88c
    9678:	.word	0x0000a88c
    967c:	.word	0x0000a88c
    9680:	.word	0x00009a44
    9684:	.word	0x0000a88c
    9688:	.word	0x0000a88c
    968c:	.word	0x0000a88c
    9690:	.word	0x0000a88c
    9694:	.word	0x0000a88c
    9698:	.word	0x0000a88c
    969c:	.word	0x00009c78
    96a0:	.word	0x0000a88c
    96a4:	.word	0x0000a88c
    96a8:	.word	0x0000a88c
    96ac:	.word	0x0000a88c
    96b0:	.word	0x00009798
    96b4:	.word	0x00009a84
    96b8:	.word	0x0000a88c
    96bc:	.word	0x0000a88c
    96c0:	.word	0x0000a88c
    96c4:	.word	0x0000a88c
    96c8:	.word	0x0000a88c
    96cc:	.word	0x0000a88c
    96d0:	.word	0x0000a88c
    96d4:	.word	0x0000a88c
    96d8:	.word	0x0000a88c
    96dc:	.word	0x0000a88c
    96e0:	.word	0x0000a88c
    96e4:	.word	0x0000a170
    96e8:	.word	0x0000a88c
    96ec:	.word	0x0000a88c
    96f0:	.word	0x0000a88c
    96f4:	.word	0x0000a88c
    96f8:	.word	0x0000a88c
    96fc:	.word	0x0000a88c
    9700:	.word	0x0000a88c
    9704:	.word	0x0000a88c
    9708:	.word	0x0000a88c
    970c:	.word	0x0000a88c
    9710:	.word	0x0000a88c
    9714:	.word	0x0000a88c
    9718:	.word	0x0000a88c
    971c:	.word	0x00009ec0
    9720:	.word	0x00009f48
    9724:	.word	0x00009d0c
    9728:	.word	0x00009c10
    972c:	.word	0x00009998
    9730:	.word	0x0000a88c
    9734:	.word	0x0000a88c
    9738:	.word	0x0000a88c
    973c:	.word	0x0000a88c
    9740:	.word	0x0000a88c
    9744:	.word	0x00009da0
    9748:	.word	0x0000a88c
    974c:	.word	0x0000a88c
    9750:	.word	0x0000a88c
    9754:	.word	0x0000a88c
    9758:	.word	0x0000a88c
    975c:	.word	0x00009ac4
    9760:	.word	0x0000a88c
    9764:	.word	0x0000a88c
    9768:	.word	0x0000a88c
    976c:	.word	0x0000a88c
    9770:	.word	0x0000a88c
    9774:	.word	0x00009ba8
    9778:	.word	0x00009fd0
    977c:	.word	0x0000a88c
    9780:	.word	0x0000a88c
    9784:	.word	0x0000a88c
    9788:	.word	0x0000a88c
    978c:	.word	0x0000a88c
    9790:	.word	0x0000a88c
    9794:	.word	0x0000a7e4
    9798:	ldr	r0, [fp, #-28]	; 0xffffffe4
    979c:	ldr	r0, [r0, #16]
    97a0:	ldr	r0, [r0, #4]
    97a4:	cmp	r0, #4
    97a8:	bne	989c <eval_float+0x334>
    97ac:	ldr	r0, [fp, #-16]
    97b0:	ldr	r0, [r0]
    97b4:	movw	r1, #0
    97b8:	cmp	r0, r1
    97bc:	beq	97c4 <eval_float+0x25c>
    97c0:	b	97e4 <eval_float+0x27c>
    97c4:	movw	r0, #0
    97c8:	movt	r0, #0
    97cc:	movw	r1, #0
    97d0:	movt	r1, #0
    97d4:	movw	r2, #1418	; 0x58a
    97d8:	movw	r3, #0
    97dc:	movt	r3, #0
    97e0:	bl	0 <__assert_fail>
    97e4:	ldr	r0, [fp, #-16]
    97e8:	add	r0, r0, #8
    97ec:	sub	r1, fp, #560	; 0x230
    97f0:	str	r0, [sp, #64]	; 0x40
    97f4:	mov	r0, r1
    97f8:	ldr	r1, [sp, #64]	; 0x40
    97fc:	movw	r2, #520	; 0x208
    9800:	bl	0 <memcpy>
    9804:	ldr	r0, [fp, #-16]
    9808:	ldr	r1, [fp, #-28]	; 0xffffffe4
    980c:	ldr	r1, [r1, #16]
    9810:	bl	d154 <eval_cursor>
    9814:	cmp	r0, #0
    9818:	beq	9828 <eval_float+0x2c0>
    981c:	mvn	r0, #0
    9820:	str	r0, [fp, #-12]
    9824:	b	a8b4 <eval_float+0x134c>
    9828:	bl	0 <coda_get_option_perform_conversions>
    982c:	str	r0, [fp, #-564]	; 0xfffffdcc
    9830:	movw	r0, #0
    9834:	bl	0 <coda_set_option_perform_conversions>
    9838:	ldr	r1, [fp, #-16]
    983c:	add	r1, r1, #8
    9840:	ldr	r2, [fp, #-24]	; 0xffffffe8
    9844:	str	r0, [sp, #60]	; 0x3c
    9848:	mov	r0, r1
    984c:	mov	r1, r2
    9850:	bl	0 <coda_cursor_read_double>
    9854:	cmp	r0, #0
    9858:	beq	9870 <eval_float+0x308>
    985c:	ldr	r0, [fp, #-564]	; 0xfffffdcc
    9860:	bl	0 <coda_set_option_perform_conversions>
    9864:	mvn	r1, #0
    9868:	str	r1, [fp, #-12]
    986c:	b	a8b4 <eval_float+0x134c>
    9870:	ldr	r0, [fp, #-564]	; 0xfffffdcc
    9874:	bl	0 <coda_set_option_perform_conversions>
    9878:	ldr	r1, [fp, #-16]
    987c:	add	r1, r1, #8
    9880:	sub	r2, fp, #560	; 0x230
    9884:	str	r0, [sp, #56]	; 0x38
    9888:	mov	r0, r1
    988c:	mov	r1, r2
    9890:	movw	r2, #520	; 0x208
    9894:	bl	0 <memcpy>
    9898:	b	9994 <eval_float+0x42c>
    989c:	ldr	r0, [fp, #-28]	; 0xffffffe4
    98a0:	ldr	r0, [r0, #16]
    98a4:	ldr	r0, [r0, #4]
    98a8:	cmp	r0, #3
    98ac:	bne	9950 <eval_float+0x3e8>
    98b0:	ldr	r0, [fp, #-16]
    98b4:	ldr	r1, [fp, #-28]	; 0xffffffe4
    98b8:	ldr	r1, [r1, #16]
    98bc:	sub	r2, fp, #568	; 0x238
    98c0:	sub	r3, fp, #572	; 0x23c
    98c4:	sub	ip, fp, #576	; 0x240
    98c8:	str	ip, [sp]
    98cc:	bl	aacc <eval_string>
    98d0:	cmp	r0, #0
    98d4:	beq	98e4 <eval_float+0x37c>
    98d8:	mvn	r0, #0
    98dc:	str	r0, [fp, #-12]
    98e0:	b	a8b4 <eval_float+0x134c>
    98e4:	ldr	r0, [fp, #-572]	; 0xfffffdc4
    98e8:	cmp	r0, #0
    98ec:	bne	990c <eval_float+0x3a4>
    98f0:	mvn	r0, #102	; 0x66
    98f4:	movw	r1, #0
    98f8:	movt	r1, #0
    98fc:	bl	0 <coda_set_error>
    9900:	mvn	r0, #0
    9904:	str	r0, [fp, #-12]
    9908:	b	a8b4 <eval_float+0x134c>
    990c:	ldr	r0, [fp, #-576]	; 0xfffffdc0
    9910:	ldr	r1, [fp, #-568]	; 0xfffffdc8
    9914:	add	r0, r0, r1
    9918:	ldr	r1, [fp, #-572]	; 0xfffffdc4
    991c:	ldr	r2, [fp, #-24]	; 0xffffffe8
    9920:	movw	r3, #0
    9924:	bl	0 <coda_ascii_parse_double>
    9928:	cmp	r0, #0
    992c:	bge	9944 <eval_float+0x3dc>
    9930:	ldr	r0, [fp, #-576]	; 0xfffffdc0
    9934:	bl	0 <free>
    9938:	mvn	r0, #0
    993c:	str	r0, [fp, #-12]
    9940:	b	a8b4 <eval_float+0x134c>
    9944:	ldr	r0, [fp, #-576]	; 0xfffffdc0
    9948:	bl	0 <free>
    994c:	b	9990 <eval_float+0x428>
    9950:	ldr	r0, [fp, #-16]
    9954:	ldr	r1, [fp, #-28]	; 0xffffffe4
    9958:	ldr	r1, [r1, #16]
    995c:	sub	r2, fp, #584	; 0x248
    9960:	bl	6f70 <eval_integer>
    9964:	cmp	r0, #0
    9968:	beq	9978 <eval_float+0x410>
    996c:	mvn	r0, #0
    9970:	str	r0, [fp, #-12]
    9974:	b	a8b4 <eval_float+0x134c>
    9978:	ldr	r0, [fp, #-584]	; 0xfffffdb8
    997c:	ldr	r1, [fp, #-580]	; 0xfffffdbc
    9980:	bl	0 <__aeabi_l2d>
    9984:	vmov	d16, r0, r1
    9988:	ldr	r0, [fp, #-24]	; 0xffffffe8
    998c:	vstr	d16, [r0]
    9990:	b	9994 <eval_float+0x42c>
    9994:	b	a8ac <eval_float+0x1344>
    9998:	ldr	r0, [fp, #-16]
    999c:	ldr	r1, [fp, #-28]	; 0xffffffe4
    99a0:	ldr	r1, [r1, #16]
    99a4:	ldr	r2, [fp, #-24]	; 0xffffffe8
    99a8:	bl	9568 <eval_float>
    99ac:	cmp	r0, #0
    99b0:	beq	99c0 <eval_float+0x458>
    99b4:	mvn	r0, #0
    99b8:	str	r0, [fp, #-12]
    99bc:	b	a8b4 <eval_float+0x134c>
    99c0:	ldr	r0, [fp, #-24]	; 0xffffffe8
    99c4:	vldr	d16, [r0]
    99c8:	vneg.f64	d16, d16
    99cc:	ldr	r0, [fp, #-24]	; 0xffffffe8
    99d0:	vstr	d16, [r0]
    99d4:	b	a8ac <eval_float+0x1344>
    99d8:	ldr	r0, [fp, #-16]
    99dc:	ldr	r1, [fp, #-28]	; 0xffffffe4
    99e0:	ldr	r1, [r1, #16]
    99e4:	ldr	r2, [fp, #-24]	; 0xffffffe8
    99e8:	bl	9568 <eval_float>
    99ec:	cmp	r0, #0
    99f0:	beq	9a00 <eval_float+0x498>
    99f4:	mvn	r0, #0
    99f8:	str	r0, [fp, #-12]
    99fc:	b	a8b4 <eval_float+0x134c>
    9a00:	ldr	r0, [fp, #-24]	; 0xffffffe8
    9a04:	vldr	d16, [r0]
    9a08:	vcmpe.f64	d16, #0.0
    9a0c:	vmrs	APSR_nzcv, fpscr
    9a10:	blt	9a24 <eval_float+0x4bc>
    9a14:	ldr	r0, [fp, #-24]	; 0xffffffe8
    9a18:	vldr	d16, [r0]
    9a1c:	vstr	d16, [sp, #48]	; 0x30
    9a20:	b	9a34 <eval_float+0x4cc>
    9a24:	ldr	r0, [fp, #-24]	; 0xffffffe8
    9a28:	vldr	d16, [r0]
    9a2c:	vneg.f64	d16, d16
    9a30:	vstr	d16, [sp, #48]	; 0x30
    9a34:	vldr	d16, [sp, #48]	; 0x30
    9a38:	ldr	r0, [fp, #-24]	; 0xffffffe8
    9a3c:	vstr	d16, [r0]
    9a40:	b	a8ac <eval_float+0x1344>
    9a44:	ldr	r0, [fp, #-16]
    9a48:	ldr	r1, [fp, #-28]	; 0xffffffe4
    9a4c:	ldr	r1, [r1, #16]
    9a50:	ldr	r2, [fp, #-24]	; 0xffffffe8
    9a54:	bl	9568 <eval_float>
    9a58:	cmp	r0, #0
    9a5c:	beq	9a6c <eval_float+0x504>
    9a60:	mvn	r0, #0
    9a64:	str	r0, [fp, #-12]
    9a68:	b	a8b4 <eval_float+0x134c>
    9a6c:	ldr	r0, [fp, #-24]	; 0xffffffe8
    9a70:	vldr	d16, [r0]
    9a74:	vrintp.f64	d16, d16
    9a78:	ldr	r0, [fp, #-24]	; 0xffffffe8
    9a7c:	vstr	d16, [r0]
    9a80:	b	a8ac <eval_float+0x1344>
    9a84:	ldr	r0, [fp, #-16]
    9a88:	ldr	r1, [fp, #-28]	; 0xffffffe4
    9a8c:	ldr	r1, [r1, #16]
    9a90:	ldr	r2, [fp, #-24]	; 0xffffffe8
    9a94:	bl	9568 <eval_float>
    9a98:	cmp	r0, #0
    9a9c:	beq	9aac <eval_float+0x544>
    9aa0:	mvn	r0, #0
    9aa4:	str	r0, [fp, #-12]
    9aa8:	b	a8b4 <eval_float+0x134c>
    9aac:	ldr	r0, [fp, #-24]	; 0xffffffe8
    9ab0:	vldr	d16, [r0]
    9ab4:	vrintm.f64	d16, d16
    9ab8:	ldr	r0, [fp, #-24]	; 0xffffffe8
    9abc:	vstr	d16, [r0]
    9ac0:	b	a8ac <eval_float+0x1344>
    9ac4:	ldr	r0, [fp, #-16]
    9ac8:	ldr	r1, [fp, #-28]	; 0xffffffe4
    9acc:	ldr	r1, [r1, #16]
    9ad0:	ldr	r2, [fp, #-24]	; 0xffffffe8
    9ad4:	bl	9568 <eval_float>
    9ad8:	cmp	r0, #0
    9adc:	beq	9aec <eval_float+0x584>
    9ae0:	mvn	r0, #0
    9ae4:	str	r0, [fp, #-12]
    9ae8:	b	a8b4 <eval_float+0x134c>
    9aec:	ldr	r0, [fp, #-24]	; 0xffffffe8
    9af0:	vldr	d16, [r0]
    9af4:	vcmpe.f64	d16, #0.0
    9af8:	vmrs	APSR_nzcv, fpscr
    9afc:	bpl	9b20 <eval_float+0x5b8>
    9b00:	ldr	r0, [fp, #-24]	; 0xffffffe8
    9b04:	vldr	d16, [r0]
    9b08:	vmov.f64	d17, #96	; 0x3f000000  0.5
    9b0c:	vsub.f64	d16, d16, d17
    9b10:	vrintp.f64	d16, d16
    9b14:	ldr	r0, [fp, #-24]	; 0xffffffe8
    9b18:	vstr	d16, [r0]
    9b1c:	b	9b3c <eval_float+0x5d4>
    9b20:	ldr	r0, [fp, #-24]	; 0xffffffe8
    9b24:	vldr	d16, [r0]
    9b28:	vmov.f64	d17, #96	; 0x3f000000  0.5
    9b2c:	vadd.f64	d16, d16, d17
    9b30:	vrintm.f64	d16, d16
    9b34:	ldr	r0, [fp, #-24]	; 0xffffffe8
    9b38:	vstr	d16, [r0]
    9b3c:	b	a8ac <eval_float+0x1344>
    9b40:	ldr	r0, [fp, #-16]
    9b44:	ldr	r1, [fp, #-28]	; 0xffffffe4
    9b48:	ldr	r1, [r1, #16]
    9b4c:	sub	r2, fp, #592	; 0x250
    9b50:	bl	9568 <eval_float>
    9b54:	cmp	r0, #0
    9b58:	beq	9b68 <eval_float+0x600>
    9b5c:	mvn	r0, #0
    9b60:	str	r0, [fp, #-12]
    9b64:	b	a8b4 <eval_float+0x134c>
    9b68:	ldr	r0, [fp, #-16]
    9b6c:	ldr	r1, [fp, #-28]	; 0xffffffe4
    9b70:	ldr	r1, [r1, #20]
    9b74:	sub	r2, fp, #600	; 0x258
    9b78:	bl	9568 <eval_float>
    9b7c:	cmp	r0, #0
    9b80:	beq	9b90 <eval_float+0x628>
    9b84:	mvn	r0, #0
    9b88:	str	r0, [fp, #-12]
    9b8c:	b	a8b4 <eval_float+0x134c>
    9b90:	vldr	d16, [fp, #-592]	; 0xfffffdb0
    9b94:	vldr	d17, [fp, #-600]	; 0xfffffda8
    9b98:	vadd.f64	d16, d16, d17
    9b9c:	ldr	r0, [fp, #-24]	; 0xffffffe8
    9ba0:	vstr	d16, [r0]
    9ba4:	b	a8ac <eval_float+0x1344>
    9ba8:	ldr	r0, [fp, #-16]
    9bac:	ldr	r1, [fp, #-28]	; 0xffffffe4
    9bb0:	ldr	r1, [r1, #16]
    9bb4:	sub	r2, fp, #608	; 0x260
    9bb8:	bl	9568 <eval_float>
    9bbc:	cmp	r0, #0
    9bc0:	beq	9bd0 <eval_float+0x668>
    9bc4:	mvn	r0, #0
    9bc8:	str	r0, [fp, #-12]
    9bcc:	b	a8b4 <eval_float+0x134c>
    9bd0:	ldr	r0, [fp, #-16]
    9bd4:	ldr	r1, [fp, #-28]	; 0xffffffe4
    9bd8:	ldr	r1, [r1, #20]
    9bdc:	sub	r2, fp, #616	; 0x268
    9be0:	bl	9568 <eval_float>
    9be4:	cmp	r0, #0
    9be8:	beq	9bf8 <eval_float+0x690>
    9bec:	mvn	r0, #0
    9bf0:	str	r0, [fp, #-12]
    9bf4:	b	a8b4 <eval_float+0x134c>
    9bf8:	vldr	d16, [fp, #-608]	; 0xfffffda0
    9bfc:	vldr	d17, [fp, #-616]	; 0xfffffd98
    9c00:	vsub.f64	d16, d16, d17
    9c04:	ldr	r0, [fp, #-24]	; 0xffffffe8
    9c08:	vstr	d16, [r0]
    9c0c:	b	a8ac <eval_float+0x1344>
    9c10:	ldr	r0, [fp, #-16]
    9c14:	ldr	r1, [fp, #-28]	; 0xffffffe4
    9c18:	ldr	r1, [r1, #16]
    9c1c:	sub	r2, fp, #624	; 0x270
    9c20:	bl	9568 <eval_float>
    9c24:	cmp	r0, #0
    9c28:	beq	9c38 <eval_float+0x6d0>
    9c2c:	mvn	r0, #0
    9c30:	str	r0, [fp, #-12]
    9c34:	b	a8b4 <eval_float+0x134c>
    9c38:	ldr	r0, [fp, #-16]
    9c3c:	ldr	r1, [fp, #-28]	; 0xffffffe4
    9c40:	ldr	r1, [r1, #20]
    9c44:	sub	r2, fp, #632	; 0x278
    9c48:	bl	9568 <eval_float>
    9c4c:	cmp	r0, #0
    9c50:	beq	9c60 <eval_float+0x6f8>
    9c54:	mvn	r0, #0
    9c58:	str	r0, [fp, #-12]
    9c5c:	b	a8b4 <eval_float+0x134c>
    9c60:	vldr	d16, [fp, #-624]	; 0xfffffd90
    9c64:	vldr	d17, [fp, #-632]	; 0xfffffd88
    9c68:	vmul.f64	d16, d16, d17
    9c6c:	ldr	r0, [fp, #-24]	; 0xffffffe8
    9c70:	vstr	d16, [r0]
    9c74:	b	a8ac <eval_float+0x1344>
    9c78:	ldr	r0, [fp, #-16]
    9c7c:	ldr	r1, [fp, #-28]	; 0xffffffe4
    9c80:	ldr	r1, [r1, #16]
    9c84:	sub	r2, fp, #640	; 0x280
    9c88:	bl	9568 <eval_float>
    9c8c:	cmp	r0, #0
    9c90:	beq	9ca0 <eval_float+0x738>
    9c94:	mvn	r0, #0
    9c98:	str	r0, [fp, #-12]
    9c9c:	b	a8b4 <eval_float+0x134c>
    9ca0:	ldr	r0, [fp, #-16]
    9ca4:	ldr	r1, [fp, #-28]	; 0xffffffe4
    9ca8:	ldr	r1, [r1, #20]
    9cac:	sub	r2, fp, #648	; 0x288
    9cb0:	bl	9568 <eval_float>
    9cb4:	cmp	r0, #0
    9cb8:	beq	9cc8 <eval_float+0x760>
    9cbc:	mvn	r0, #0
    9cc0:	str	r0, [fp, #-12]
    9cc4:	b	a8b4 <eval_float+0x134c>
    9cc8:	vldr	d16, [fp, #-648]	; 0xfffffd78
    9ccc:	vcmp.f64	d16, #0.0
    9cd0:	vmrs	APSR_nzcv, fpscr
    9cd4:	bne	9cf4 <eval_float+0x78c>
    9cd8:	mvn	r0, #400	; 0x190
    9cdc:	movw	r1, #0
    9ce0:	movt	r1, #0
    9ce4:	bl	0 <coda_set_error>
    9ce8:	mvn	r0, #0
    9cec:	str	r0, [fp, #-12]
    9cf0:	b	a8b4 <eval_float+0x134c>
    9cf4:	vldr	d16, [fp, #-640]	; 0xfffffd80
    9cf8:	vldr	d17, [fp, #-648]	; 0xfffffd78
    9cfc:	vdiv.f64	d16, d16, d17
    9d00:	ldr	r0, [fp, #-24]	; 0xffffffe8
    9d04:	vstr	d16, [r0]
    9d08:	b	a8ac <eval_float+0x1344>
    9d0c:	ldr	r0, [fp, #-16]
    9d10:	ldr	r1, [fp, #-28]	; 0xffffffe4
    9d14:	ldr	r1, [r1, #16]
    9d18:	sub	r2, fp, #656	; 0x290
    9d1c:	bl	9568 <eval_float>
    9d20:	cmp	r0, #0
    9d24:	beq	9d34 <eval_float+0x7cc>
    9d28:	mvn	r0, #0
    9d2c:	str	r0, [fp, #-12]
    9d30:	b	a8b4 <eval_float+0x134c>
    9d34:	ldr	r0, [fp, #-16]
    9d38:	ldr	r1, [fp, #-28]	; 0xffffffe4
    9d3c:	ldr	r1, [r1, #20]
    9d40:	sub	r2, fp, #664	; 0x298
    9d44:	bl	9568 <eval_float>
    9d48:	cmp	r0, #0
    9d4c:	beq	9d5c <eval_float+0x7f4>
    9d50:	mvn	r0, #0
    9d54:	str	r0, [fp, #-12]
    9d58:	b	a8b4 <eval_float+0x134c>
    9d5c:	vldr	d16, [fp, #-664]	; 0xfffffd68
    9d60:	vcmp.f64	d16, #0.0
    9d64:	vmrs	APSR_nzcv, fpscr
    9d68:	bne	9d88 <eval_float+0x820>
    9d6c:	mvn	r0, #400	; 0x190
    9d70:	movw	r1, #0
    9d74:	movt	r1, #0
    9d78:	bl	0 <coda_set_error>
    9d7c:	mvn	r0, #0
    9d80:	str	r0, [fp, #-12]
    9d84:	b	a8b4 <eval_float+0x134c>
    9d88:	vldr	d0, [fp, #-656]	; 0xfffffd70
    9d8c:	vldr	d1, [fp, #-664]	; 0xfffffd68
    9d90:	bl	0 <fmod>
    9d94:	ldr	r0, [fp, #-24]	; 0xffffffe8
    9d98:	vstr	d0, [r0]
    9d9c:	b	a8ac <eval_float+0x1344>
    9da0:	ldr	r0, [fp, #-16]
    9da4:	ldr	r1, [fp, #-28]	; 0xffffffe4
    9da8:	ldr	r1, [r1, #16]
    9dac:	sub	r2, fp, #672	; 0x2a0
    9db0:	bl	9568 <eval_float>
    9db4:	cmp	r0, #0
    9db8:	beq	9dc8 <eval_float+0x860>
    9dbc:	mvn	r0, #0
    9dc0:	str	r0, [fp, #-12]
    9dc4:	b	a8b4 <eval_float+0x134c>
    9dc8:	ldr	r0, [fp, #-28]	; 0xffffffe4
    9dcc:	ldr	r0, [r0, #20]
    9dd0:	ldr	r0, [r0, #4]
    9dd4:	cmp	r0, #1
    9dd8:	bne	9e80 <eval_float+0x918>
    9ddc:	ldr	r0, [fp, #-16]
    9de0:	ldr	r1, [fp, #-28]	; 0xffffffe4
    9de4:	ldr	r1, [r1, #20]
    9de8:	sub	r2, fp, #688	; 0x2b0
    9dec:	bl	6f70 <eval_integer>
    9df0:	cmp	r0, #0
    9df4:	beq	9e04 <eval_float+0x89c>
    9df8:	mvn	r0, #0
    9dfc:	str	r0, [fp, #-12]
    9e00:	b	a8b4 <eval_float+0x134c>
    9e04:	ldr	r0, [fp, #-688]	; 0xfffffd50
    9e08:	ldr	r1, [fp, #-684]	; 0xfffffd54
    9e0c:	mvn	r2, #63	; 0x3f
    9e10:	subs	r0, r0, r2
    9e14:	mvn	r2, #0
    9e18:	sbcs	r1, r1, r2
    9e1c:	blt	9e54 <eval_float+0x8ec>
    9e20:	b	9e24 <eval_float+0x8bc>
    9e24:	ldr	r0, [fp, #-688]	; 0xfffffd50
    9e28:	ldr	r1, [fp, #-684]	; 0xfffffd54
    9e2c:	rsbs	r0, r0, #64	; 0x40
    9e30:	rscs	r1, r1, #0
    9e34:	blt	9e54 <eval_float+0x8ec>
    9e38:	b	9e3c <eval_float+0x8d4>
    9e3c:	vldr	d0, [fp, #-672]	; 0xfffffd60
    9e40:	ldr	r0, [fp, #-688]	; 0xfffffd50
    9e44:	bl	e300 <ipow>
    9e48:	ldr	r0, [fp, #-24]	; 0xffffffe8
    9e4c:	vstr	d0, [r0]
    9e50:	b	9e7c <eval_float+0x914>
    9e54:	vldr	d0, [fp, #-672]	; 0xfffffd60
    9e58:	ldr	r0, [fp, #-688]	; 0xfffffd50
    9e5c:	ldr	r1, [fp, #-684]	; 0xfffffd54
    9e60:	vstr	d0, [sp, #40]	; 0x28
    9e64:	bl	0 <__aeabi_l2d>
    9e68:	vmov	d1, r0, r1
    9e6c:	vldr	d0, [sp, #40]	; 0x28
    9e70:	bl	0 <pow>
    9e74:	ldr	r0, [fp, #-24]	; 0xffffffe8
    9e78:	vstr	d0, [r0]
    9e7c:	b	9ebc <eval_float+0x954>
    9e80:	ldr	r0, [fp, #-16]
    9e84:	ldr	r1, [fp, #-28]	; 0xffffffe4
    9e88:	ldr	r1, [r1, #20]
    9e8c:	sub	r2, fp, #680	; 0x2a8
    9e90:	bl	9568 <eval_float>
    9e94:	cmp	r0, #0
    9e98:	beq	9ea8 <eval_float+0x940>
    9e9c:	mvn	r0, #0
    9ea0:	str	r0, [fp, #-12]
    9ea4:	b	a8b4 <eval_float+0x134c>
    9ea8:	vldr	d0, [fp, #-672]	; 0xfffffd60
    9eac:	vldr	d1, [fp, #-680]	; 0xfffffd58
    9eb0:	bl	0 <pow>
    9eb4:	ldr	r0, [fp, #-24]	; 0xffffffe8
    9eb8:	vstr	d0, [r0]
    9ebc:	b	a8ac <eval_float+0x1344>
    9ec0:	ldr	r0, [fp, #-16]
    9ec4:	ldr	r1, [fp, #-28]	; 0xffffffe4
    9ec8:	ldr	r1, [r1, #16]
    9ecc:	sub	r2, fp, #696	; 0x2b8
    9ed0:	bl	9568 <eval_float>
    9ed4:	cmp	r0, #0
    9ed8:	beq	9ee8 <eval_float+0x980>
    9edc:	mvn	r0, #0
    9ee0:	str	r0, [fp, #-12]
    9ee4:	b	a8b4 <eval_float+0x134c>
    9ee8:	ldr	r0, [fp, #-16]
    9eec:	ldr	r1, [fp, #-28]	; 0xffffffe4
    9ef0:	ldr	r1, [r1, #20]
    9ef4:	sub	r2, fp, #704	; 0x2c0
    9ef8:	bl	9568 <eval_float>
    9efc:	cmp	r0, #0
    9f00:	beq	9f10 <eval_float+0x9a8>
    9f04:	mvn	r0, #0
    9f08:	str	r0, [fp, #-12]
    9f0c:	b	a8b4 <eval_float+0x134c>
    9f10:	vldr	d16, [fp, #-696]	; 0xfffffd48
    9f14:	vldr	d17, [fp, #-704]	; 0xfffffd40
    9f18:	vcmpe.f64	d16, d17
    9f1c:	vmrs	APSR_nzcv, fpscr
    9f20:	ble	9f30 <eval_float+0x9c8>
    9f24:	vldr	d16, [fp, #-696]	; 0xfffffd48
    9f28:	vstr	d16, [sp, #32]
    9f2c:	b	9f38 <eval_float+0x9d0>
    9f30:	vldr	d16, [fp, #-704]	; 0xfffffd40
    9f34:	vstr	d16, [sp, #32]
    9f38:	vldr	d16, [sp, #32]
    9f3c:	ldr	r0, [fp, #-24]	; 0xffffffe8
    9f40:	vstr	d16, [r0]
    9f44:	b	a8ac <eval_float+0x1344>
    9f48:	ldr	r0, [fp, #-16]
    9f4c:	ldr	r1, [fp, #-28]	; 0xffffffe4
    9f50:	ldr	r1, [r1, #16]
    9f54:	sub	r2, fp, #712	; 0x2c8
    9f58:	bl	9568 <eval_float>
    9f5c:	cmp	r0, #0
    9f60:	beq	9f70 <eval_float+0xa08>
    9f64:	mvn	r0, #0
    9f68:	str	r0, [fp, #-12]
    9f6c:	b	a8b4 <eval_float+0x134c>
    9f70:	ldr	r0, [fp, #-16]
    9f74:	ldr	r1, [fp, #-28]	; 0xffffffe4
    9f78:	ldr	r1, [r1, #20]
    9f7c:	sub	r2, fp, #720	; 0x2d0
    9f80:	bl	9568 <eval_float>
    9f84:	cmp	r0, #0
    9f88:	beq	9f98 <eval_float+0xa30>
    9f8c:	mvn	r0, #0
    9f90:	str	r0, [fp, #-12]
    9f94:	b	a8b4 <eval_float+0x134c>
    9f98:	vldr	d16, [fp, #-712]	; 0xfffffd38
    9f9c:	vldr	d17, [fp, #-720]	; 0xfffffd30
    9fa0:	vcmpe.f64	d16, d17
    9fa4:	vmrs	APSR_nzcv, fpscr
    9fa8:	bpl	9fb8 <eval_float+0xa50>
    9fac:	vldr	d16, [fp, #-712]	; 0xfffffd38
    9fb0:	vstr	d16, [sp, #24]
    9fb4:	b	9fc0 <eval_float+0xa58>
    9fb8:	vldr	d16, [fp, #-720]	; 0xfffffd30
    9fbc:	vstr	d16, [sp, #24]
    9fc0:	vldr	d16, [sp, #24]
    9fc4:	ldr	r0, [fp, #-24]	; 0xffffffe8
    9fc8:	vstr	d16, [r0]
    9fcc:	b	a8ac <eval_float+0x1344>
    9fd0:	ldr	r0, [fp, #-16]
    9fd4:	ldr	r1, [fp, #-28]	; 0xffffffe4
    9fd8:	ldr	r1, [r1, #16]
    9fdc:	sub	r2, fp, #724	; 0x2d4
    9fe0:	sub	r3, fp, #732	; 0x2dc
    9fe4:	sub	ip, fp, #740	; 0x2e4
    9fe8:	str	ip, [sp]
    9fec:	bl	aacc <eval_string>
    9ff0:	cmp	r0, #0
    9ff4:	beq	a004 <eval_float+0xa9c>
    9ff8:	mvn	r0, #0
    9ffc:	str	r0, [fp, #-12]
    a000:	b	a8b4 <eval_float+0x134c>
    a004:	ldr	r0, [fp, #-732]	; 0xfffffd24
    a008:	cmp	r0, #0
    a00c:	bge	a02c <eval_float+0xac4>
    a010:	mvn	r0, #400	; 0x190
    a014:	movw	r1, #0
    a018:	movt	r1, #0
    a01c:	bl	0 <coda_set_error>
    a020:	mvn	r0, #0
    a024:	str	r0, [fp, #-12]
    a028:	b	a8b4 <eval_float+0x134c>
    a02c:	ldr	r0, [fp, #-732]	; 0xfffffd24
    a030:	cmp	r0, #0
    a034:	bne	a054 <eval_float+0xaec>
    a038:	mvn	r0, #400	; 0x190
    a03c:	movw	r1, #0
    a040:	movt	r1, #0
    a044:	bl	0 <coda_set_error>
    a048:	mvn	r0, #0
    a04c:	str	r0, [fp, #-12]
    a050:	b	a8b4 <eval_float+0x134c>
    a054:	ldr	r0, [fp, #-740]	; 0xfffffd1c
    a058:	ldr	r1, [fp, #-724]	; 0xfffffd2c
    a05c:	ldr	r2, [fp, #-732]	; 0xfffffd24
    a060:	add	r1, r1, r2
    a064:	add	r0, r0, r1
    a068:	movw	r1, #0
    a06c:	strb	r1, [r0]
    a070:	ldr	r0, [fp, #-16]
    a074:	ldr	r1, [fp, #-28]	; 0xffffffe4
    a078:	ldr	r1, [r1, #20]
    a07c:	sub	r2, fp, #728	; 0x2d8
    a080:	sub	r3, fp, #736	; 0x2e0
    a084:	sub	ip, fp, #744	; 0x2e8
    a088:	str	ip, [sp]
    a08c:	bl	aacc <eval_string>
    a090:	cmp	r0, #0
    a094:	beq	a0ac <eval_float+0xb44>
    a098:	ldr	r0, [fp, #-740]	; 0xfffffd1c
    a09c:	bl	0 <free>
    a0a0:	mvn	r0, #0
    a0a4:	str	r0, [fp, #-12]
    a0a8:	b	a8b4 <eval_float+0x134c>
    a0ac:	ldr	r0, [fp, #-736]	; 0xfffffd20
    a0b0:	cmp	r0, #0
    a0b4:	bge	a0d4 <eval_float+0xb6c>
    a0b8:	mvn	r0, #400	; 0x190
    a0bc:	movw	r1, #0
    a0c0:	movt	r1, #0
    a0c4:	bl	0 <coda_set_error>
    a0c8:	mvn	r0, #0
    a0cc:	str	r0, [fp, #-12]
    a0d0:	b	a8b4 <eval_float+0x134c>
    a0d4:	ldr	r0, [fp, #-736]	; 0xfffffd20
    a0d8:	cmp	r0, #0
    a0dc:	bne	a0fc <eval_float+0xb94>
    a0e0:	mvn	r0, #400	; 0x190
    a0e4:	movw	r1, #0
    a0e8:	movt	r1, #0
    a0ec:	bl	0 <coda_set_error>
    a0f0:	mvn	r0, #0
    a0f4:	str	r0, [fp, #-12]
    a0f8:	b	a8b4 <eval_float+0x134c>
    a0fc:	ldr	r0, [fp, #-744]	; 0xfffffd18
    a100:	ldr	r1, [fp, #-728]	; 0xfffffd28
    a104:	ldr	r2, [fp, #-736]	; 0xfffffd20
    a108:	add	r1, r1, r2
    a10c:	add	r0, r0, r1
    a110:	movw	r1, #0
    a114:	strb	r1, [r0]
    a118:	ldr	r0, [fp, #-744]	; 0xfffffd18
    a11c:	ldr	r1, [fp, #-728]	; 0xfffffd28
    a120:	add	r0, r0, r1
    a124:	ldr	r1, [fp, #-740]	; 0xfffffd1c
    a128:	ldr	r2, [fp, #-724]	; 0xfffffd2c
    a12c:	add	r1, r1, r2
    a130:	ldr	r2, [fp, #-24]	; 0xffffffe8
    a134:	bl	0 <coda_time_string_to_double>
    a138:	cmp	r0, #0
    a13c:	beq	a15c <eval_float+0xbf4>
    a140:	ldr	r0, [fp, #-744]	; 0xfffffd18
    a144:	bl	0 <free>
    a148:	ldr	r0, [fp, #-740]	; 0xfffffd1c
    a14c:	bl	0 <free>
    a150:	mvn	r0, #0
    a154:	str	r0, [fp, #-12]
    a158:	b	a8b4 <eval_float+0x134c>
    a15c:	ldr	r0, [fp, #-744]	; 0xfffffd18
    a160:	bl	0 <free>
    a164:	ldr	r0, [fp, #-740]	; 0xfffffd1c
    a168:	bl	0 <free>
    a16c:	b	a8ac <eval_float+0x1344>
    a170:	ldr	r0, [fp, #-16]
    a174:	ldr	r1, [fp, #-28]	; 0xffffffe4
    a178:	ldr	r1, [r1, #16]
    a17c:	sub	r2, fp, #748	; 0x2ec
    a180:	bl	5170 <eval_boolean>
    a184:	cmp	r0, #0
    a188:	beq	a198 <eval_float+0xc30>
    a18c:	mvn	r0, #0
    a190:	str	r0, [fp, #-12]
    a194:	b	a8b4 <eval_float+0x134c>
    a198:	ldr	r0, [fp, #-748]	; 0xfffffd14
    a19c:	cmp	r0, #0
    a1a0:	beq	a1d0 <eval_float+0xc68>
    a1a4:	ldr	r0, [fp, #-16]
    a1a8:	ldr	r1, [fp, #-28]	; 0xffffffe4
    a1ac:	ldr	r1, [r1, #20]
    a1b0:	ldr	r2, [fp, #-24]	; 0xffffffe8
    a1b4:	bl	9568 <eval_float>
    a1b8:	cmp	r0, #0
    a1bc:	beq	a1cc <eval_float+0xc64>
    a1c0:	mvn	r0, #0
    a1c4:	str	r0, [fp, #-12]
    a1c8:	b	a8b4 <eval_float+0x134c>
    a1cc:	b	a1fc <eval_float+0xc94>
    a1d0:	ldr	r0, [fp, #-16]
    a1d4:	ldr	r1, [fp, #-28]	; 0xffffffe4
    a1d8:	ldr	r1, [r1, #24]
    a1dc:	ldr	r2, [fp, #-24]	; 0xffffffe8
    a1e0:	bl	9568 <eval_float>
    a1e4:	cmp	r0, #0
    a1e8:	beq	a1f8 <eval_float+0xc90>
    a1ec:	mvn	r0, #0
    a1f0:	str	r0, [fp, #-12]
    a1f4:	b	a8b4 <eval_float+0x134c>
    a1f8:	b	a1fc <eval_float+0xc94>
    a1fc:	b	a8ac <eval_float+0x1344>
    a200:	ldr	r0, [fp, #-16]
    a204:	ldr	r0, [r0]
    a208:	movw	r1, #0
    a20c:	cmp	r0, r1
    a210:	beq	a218 <eval_float+0xcb0>
    a214:	b	a238 <eval_float+0xcd0>
    a218:	movw	r0, #0
    a21c:	movt	r0, #0
    a220:	movw	r1, #0
    a224:	movt	r1, #0
    a228:	movw	r2, #1738	; 0x6ca
    a22c:	movw	r3, #0
    a230:	movt	r3, #0
    a234:	bl	0 <__assert_fail>
    a238:	ldr	r0, [fp, #-16]
    a23c:	add	r0, r0, #8
    a240:	sub	lr, fp, #1024	; 0x400
    a244:	sub	r1, lr, #248	; 0xf8
    a248:	str	r0, [sp, #20]
    a24c:	mov	r0, r1
    a250:	ldr	r1, [sp, #20]
    a254:	movw	r2, #520	; 0x208
    a258:	bl	0 <memcpy>
    a25c:	ldr	r0, [fp, #-16]
    a260:	ldr	r1, [fp, #-28]	; 0xffffffe4
    a264:	ldr	r1, [r1, #16]
    a268:	bl	d154 <eval_cursor>
    a26c:	cmp	r0, #0
    a270:	beq	a280 <eval_float+0xd18>
    a274:	mvn	r0, #0
    a278:	str	r0, [fp, #-12]
    a27c:	b	a8b4 <eval_float+0x134c>
    a280:	ldr	r0, [fp, #-16]
    a284:	add	r0, r0, #8
    a288:	sub	lr, fp, #1024	; 0x400
    a28c:	sub	r1, lr, #252	; 0xfc
    a290:	bl	0 <coda_cursor_get_num_elements>
    a294:	cmp	r0, #0
    a298:	beq	a2a8 <eval_float+0xd40>
    a29c:	mvn	r0, #0
    a2a0:	str	r0, [fp, #-12]
    a2a4:	b	a8b4 <eval_float+0x134c>
    a2a8:	vldr	d16, [pc, #984]	; a688 <eval_float+0x1120>
    a2ac:	ldr	r0, [fp, #-24]	; 0xffffffe8
    a2b0:	vstr	d16, [r0]
    a2b4:	ldr	r0, [fp, #-1276]	; 0xfffffb04
    a2b8:	cmp	r0, #0
    a2bc:	ble	a38c <eval_float+0xe24>
    a2c0:	ldr	r0, [fp, #-16]
    a2c4:	add	r0, r0, #8
    a2c8:	bl	0 <coda_cursor_goto_first_array_element>
    a2cc:	cmp	r0, #0
    a2d0:	beq	a2e0 <eval_float+0xd78>
    a2d4:	mvn	r0, #0
    a2d8:	str	r0, [fp, #-12]
    a2dc:	b	a8b4 <eval_float+0x134c>
    a2e0:	movw	r0, #0
    a2e4:	str	r0, [fp, #-1280]	; 0xfffffb00
    a2e8:	ldr	r0, [fp, #-1280]	; 0xfffffb00
    a2ec:	ldr	r1, [fp, #-1276]	; 0xfffffb04
    a2f0:	cmp	r0, r1
    a2f4:	bge	a388 <eval_float+0xe20>
    a2f8:	ldr	r0, [fp, #-16]
    a2fc:	ldr	r1, [fp, #-28]	; 0xffffffe4
    a300:	ldr	r1, [r1, #20]
    a304:	sub	lr, fp, #1024	; 0x400
    a308:	sub	r2, lr, #264	; 0x108
    a30c:	bl	9568 <eval_float>
    a310:	cmp	r0, #0
    a314:	beq	a324 <eval_float+0xdbc>
    a318:	mvn	r0, #0
    a31c:	str	r0, [fp, #-12]
    a320:	b	a8b4 <eval_float+0x134c>
    a324:	ldr	r0, [sp, #72]	; 0x48
    a328:	vldr	d16, [r0, #536]	; 0x218
    a32c:	ldr	r1, [fp, #-24]	; 0xffffffe8
    a330:	vldr	d17, [r1]
    a334:	vadd.f64	d16, d17, d16
    a338:	vstr	d16, [r1]
    a33c:	ldr	r1, [fp, #-1280]	; 0xfffffb00
    a340:	ldr	r2, [fp, #-1276]	; 0xfffffb04
    a344:	sub	r2, r2, #1
    a348:	cmp	r1, r2
    a34c:	bge	a374 <eval_float+0xe0c>
    a350:	ldr	r0, [fp, #-16]
    a354:	add	r0, r0, #8
    a358:	bl	0 <coda_cursor_goto_next_array_element>
    a35c:	cmp	r0, #0
    a360:	beq	a370 <eval_float+0xe08>
    a364:	mvn	r0, #0
    a368:	str	r0, [fp, #-12]
    a36c:	b	a8b4 <eval_float+0x134c>
    a370:	b	a374 <eval_float+0xe0c>
    a374:	b	a378 <eval_float+0xe10>
    a378:	ldr	r0, [fp, #-1280]	; 0xfffffb00
    a37c:	add	r0, r0, #1
    a380:	str	r0, [fp, #-1280]	; 0xfffffb00
    a384:	b	a2e8 <eval_float+0xd80>
    a388:	b	a38c <eval_float+0xe24>
    a38c:	ldr	r0, [fp, #-16]
    a390:	add	r0, r0, #8
    a394:	sub	lr, fp, #1024	; 0x400
    a398:	sub	r1, lr, #248	; 0xf8
    a39c:	movw	r2, #520	; 0x208
    a3a0:	bl	0 <memcpy>
    a3a4:	b	a8ac <eval_float+0x1344>
    a3a8:	ldr	r0, [fp, #-16]
    a3ac:	ldr	r0, [r0]
    a3b0:	movw	r1, #0
    a3b4:	cmp	r0, r1
    a3b8:	beq	a3c0 <eval_float+0xe58>
    a3bc:	b	a3e0 <eval_float+0xe78>
    a3c0:	movw	r0, #0
    a3c4:	movt	r0, #0
    a3c8:	movw	r1, #0
    a3cc:	movt	r1, #0
    a3d0:	movw	r2, #1783	; 0x6f7
    a3d4:	movw	r3, #0
    a3d8:	movt	r3, #0
    a3dc:	bl	0 <__assert_fail>
    a3e0:	ldr	r0, [fp, #-16]
    a3e4:	add	r0, r0, #8
    a3e8:	add	lr, sp, #1024	; 0x400
    a3ec:	add	r1, lr, #136	; 0x88
    a3f0:	str	r0, [sp, #16]
    a3f4:	mov	r0, r1
    a3f8:	ldr	r1, [sp, #16]
    a3fc:	movw	r2, #520	; 0x208
    a400:	bl	0 <memcpy>
    a404:	ldr	r0, [fp, #-16]
    a408:	ldr	r1, [fp, #-28]	; 0xffffffe4
    a40c:	ldr	r1, [r1, #16]
    a410:	bl	d154 <eval_cursor>
    a414:	cmp	r0, #0
    a418:	beq	a428 <eval_float+0xec0>
    a41c:	mvn	r0, #0
    a420:	str	r0, [fp, #-12]
    a424:	b	a8b4 <eval_float+0x134c>
    a428:	ldr	r0, [fp, #-16]
    a42c:	add	r0, r0, #8
    a430:	add	lr, sp, #1024	; 0x400
    a434:	add	r1, lr, #132	; 0x84
    a438:	bl	0 <coda_cursor_get_num_elements>
    a43c:	cmp	r0, #0
    a440:	beq	a450 <eval_float+0xee8>
    a444:	mvn	r0, #0
    a448:	str	r0, [fp, #-12]
    a44c:	b	a8b4 <eval_float+0x134c>
    a450:	bl	0 <coda_NaN>
    a454:	ldr	r0, [fp, #-24]	; 0xffffffe8
    a458:	vstr	d0, [r0]
    a45c:	ldr	r0, [sp, #1156]	; 0x484
    a460:	cmp	r0, #0
    a464:	ble	a554 <eval_float+0xfec>
    a468:	ldr	r0, [fp, #-16]
    a46c:	add	r0, r0, #8
    a470:	bl	0 <coda_cursor_goto_first_array_element>
    a474:	cmp	r0, #0
    a478:	beq	a488 <eval_float+0xf20>
    a47c:	mvn	r0, #0
    a480:	str	r0, [fp, #-12]
    a484:	b	a8b4 <eval_float+0x134c>
    a488:	movw	r0, #0
    a48c:	str	r0, [sp, #1152]	; 0x480
    a490:	ldr	r0, [sp, #1152]	; 0x480
    a494:	ldr	r1, [sp, #1156]	; 0x484
    a498:	cmp	r0, r1
    a49c:	bge	a550 <eval_float+0xfe8>
    a4a0:	ldr	r0, [fp, #-16]
    a4a4:	ldr	r1, [fp, #-28]	; 0xffffffe4
    a4a8:	ldr	r1, [r1, #20]
    a4ac:	add	lr, sp, #1024	; 0x400
    a4b0:	add	r2, lr, #120	; 0x78
    a4b4:	bl	9568 <eval_float>
    a4b8:	cmp	r0, #0
    a4bc:	beq	a4cc <eval_float+0xf64>
    a4c0:	mvn	r0, #0
    a4c4:	str	r0, [fp, #-12]
    a4c8:	b	a8b4 <eval_float+0x134c>
    a4cc:	ldr	r0, [sp, #1152]	; 0x480
    a4d0:	cmp	r0, #0
    a4d4:	beq	a4f4 <eval_float+0xf8c>
    a4d8:	ldr	r0, [sp, #72]	; 0x48
    a4dc:	vldr	d16, [r0]
    a4e0:	ldr	r1, [fp, #-24]	; 0xffffffe8
    a4e4:	vldr	d17, [r1]
    a4e8:	vcmpe.f64	d16, d17
    a4ec:	vmrs	APSR_nzcv, fpscr
    a4f0:	ble	a504 <eval_float+0xf9c>
    a4f4:	ldr	r0, [sp, #72]	; 0x48
    a4f8:	vldr	d16, [r0]
    a4fc:	ldr	r1, [fp, #-24]	; 0xffffffe8
    a500:	vstr	d16, [r1]
    a504:	ldr	r0, [sp, #1152]	; 0x480
    a508:	ldr	r1, [sp, #1156]	; 0x484
    a50c:	sub	r1, r1, #1
    a510:	cmp	r0, r1
    a514:	bge	a53c <eval_float+0xfd4>
    a518:	ldr	r0, [fp, #-16]
    a51c:	add	r0, r0, #8
    a520:	bl	0 <coda_cursor_goto_next_array_element>
    a524:	cmp	r0, #0
    a528:	beq	a538 <eval_float+0xfd0>
    a52c:	mvn	r0, #0
    a530:	str	r0, [fp, #-12]
    a534:	b	a8b4 <eval_float+0x134c>
    a538:	b	a53c <eval_float+0xfd4>
    a53c:	b	a540 <eval_float+0xfd8>
    a540:	ldr	r0, [sp, #1152]	; 0x480
    a544:	add	r0, r0, #1
    a548:	str	r0, [sp, #1152]	; 0x480
    a54c:	b	a490 <eval_float+0xf28>
    a550:	b	a554 <eval_float+0xfec>
    a554:	ldr	r0, [fp, #-16]
    a558:	add	r0, r0, #8
    a55c:	add	lr, sp, #1024	; 0x400
    a560:	add	r1, lr, #136	; 0x88
    a564:	movw	r2, #520	; 0x208
    a568:	bl	0 <memcpy>
    a56c:	b	a8ac <eval_float+0x1344>
    a570:	ldr	r0, [fp, #-16]
    a574:	ldr	r0, [r0]
    a578:	movw	r1, #0
    a57c:	cmp	r0, r1
    a580:	beq	a588 <eval_float+0x1020>
    a584:	b	a5a8 <eval_float+0x1040>
    a588:	movw	r0, #0
    a58c:	movt	r0, #0
    a590:	movw	r1, #0
    a594:	movt	r1, #0
    a598:	movw	r2, #1831	; 0x727
    a59c:	movw	r3, #0
    a5a0:	movt	r3, #0
    a5a4:	bl	0 <__assert_fail>
    a5a8:	ldr	r0, [fp, #-16]
    a5ac:	add	r0, r0, #8
    a5b0:	add	r1, sp, #624	; 0x270
    a5b4:	str	r0, [sp, #12]
    a5b8:	mov	r0, r1
    a5bc:	ldr	r1, [sp, #12]
    a5c0:	movw	r2, #520	; 0x208
    a5c4:	bl	0 <memcpy>
    a5c8:	ldr	r0, [fp, #-16]
    a5cc:	ldr	r1, [fp, #-28]	; 0xffffffe4
    a5d0:	ldr	r1, [r1, #16]
    a5d4:	bl	d154 <eval_cursor>
    a5d8:	cmp	r0, #0
    a5dc:	beq	a5ec <eval_float+0x1084>
    a5e0:	mvn	r0, #0
    a5e4:	str	r0, [fp, #-12]
    a5e8:	b	a8b4 <eval_float+0x134c>
    a5ec:	ldr	r0, [fp, #-16]
    a5f0:	add	r0, r0, #8
    a5f4:	add	r1, sp, #620	; 0x26c
    a5f8:	bl	0 <coda_cursor_get_num_elements>
    a5fc:	cmp	r0, #0
    a600:	beq	a610 <eval_float+0x10a8>
    a604:	mvn	r0, #0
    a608:	str	r0, [fp, #-12]
    a60c:	b	a8b4 <eval_float+0x134c>
    a610:	bl	0 <coda_NaN>
    a614:	ldr	r0, [fp, #-24]	; 0xffffffe8
    a618:	vstr	d0, [r0]
    a61c:	ldr	r0, [sp, #620]	; 0x26c
    a620:	cmp	r0, #0
    a624:	ble	a710 <eval_float+0x11a8>
    a628:	ldr	r0, [fp, #-16]
    a62c:	add	r0, r0, #8
    a630:	bl	0 <coda_cursor_goto_first_array_element>
    a634:	cmp	r0, #0
    a638:	beq	a648 <eval_float+0x10e0>
    a63c:	mvn	r0, #0
    a640:	str	r0, [fp, #-12]
    a644:	b	a8b4 <eval_float+0x134c>
    a648:	movw	r0, #0
    a64c:	str	r0, [sp, #616]	; 0x268
    a650:	ldr	r0, [sp, #616]	; 0x268
    a654:	ldr	r1, [sp, #620]	; 0x26c
    a658:	cmp	r0, r1
    a65c:	bge	a70c <eval_float+0x11a4>
    a660:	ldr	r0, [fp, #-16]
    a664:	ldr	r1, [fp, #-28]	; 0xffffffe4
    a668:	ldr	r1, [r1, #20]
    a66c:	add	r2, sp, #608	; 0x260
    a670:	bl	9568 <eval_float>
    a674:	cmp	r0, #0
    a678:	beq	a690 <eval_float+0x1128>
    a67c:	mvn	r0, #0
    a680:	str	r0, [fp, #-12]
    a684:	b	a8b4 <eval_float+0x134c>
	...
    a690:	ldr	r0, [sp, #616]	; 0x268
    a694:	cmp	r0, #0
    a698:	beq	a6b4 <eval_float+0x114c>
    a69c:	vldr	d16, [sp, #608]	; 0x260
    a6a0:	ldr	r0, [fp, #-24]	; 0xffffffe8
    a6a4:	vldr	d17, [r0]
    a6a8:	vcmpe.f64	d16, d17
    a6ac:	vmrs	APSR_nzcv, fpscr
    a6b0:	bpl	a6c0 <eval_float+0x1158>
    a6b4:	vldr	d16, [sp, #608]	; 0x260
    a6b8:	ldr	r0, [fp, #-24]	; 0xffffffe8
    a6bc:	vstr	d16, [r0]
    a6c0:	ldr	r0, [sp, #616]	; 0x268
    a6c4:	ldr	r1, [sp, #620]	; 0x26c
    a6c8:	sub	r1, r1, #1
    a6cc:	cmp	r0, r1
    a6d0:	bge	a6f8 <eval_float+0x1190>
    a6d4:	ldr	r0, [fp, #-16]
    a6d8:	add	r0, r0, #8
    a6dc:	bl	0 <coda_cursor_goto_next_array_element>
    a6e0:	cmp	r0, #0
    a6e4:	beq	a6f4 <eval_float+0x118c>
    a6e8:	mvn	r0, #0
    a6ec:	str	r0, [fp, #-12]
    a6f0:	b	a8b4 <eval_float+0x134c>
    a6f4:	b	a6f8 <eval_float+0x1190>
    a6f8:	b	a6fc <eval_float+0x1194>
    a6fc:	ldr	r0, [sp, #616]	; 0x268
    a700:	add	r0, r0, #1
    a704:	str	r0, [sp, #616]	; 0x268
    a708:	b	a650 <eval_float+0x10e8>
    a70c:	b	a710 <eval_float+0x11a8>
    a710:	ldr	r0, [fp, #-16]
    a714:	add	r0, r0, #8
    a718:	add	r1, sp, #624	; 0x270
    a71c:	movw	r2, #520	; 0x208
    a720:	bl	0 <memcpy>
    a724:	b	a8ac <eval_float+0x1344>
    a728:	ldr	r0, [fp, #-16]
    a72c:	ldr	r0, [r0]
    a730:	movw	r1, #0
    a734:	cmp	r0, r1
    a738:	beq	a740 <eval_float+0x11d8>
    a73c:	b	a760 <eval_float+0x11f8>
    a740:	movw	r0, #0
    a744:	movt	r0, #0
    a748:	movw	r1, #0
    a74c:	movt	r1, #0
    a750:	movw	r2, #1878	; 0x756
    a754:	movw	r3, #0
    a758:	movt	r3, #0
    a75c:	bl	0 <__assert_fail>
    a760:	ldr	r0, [fp, #-16]
    a764:	add	r0, r0, #8
    a768:	add	r1, sp, #88	; 0x58
    a76c:	str	r0, [sp, #8]
    a770:	mov	r0, r1
    a774:	ldr	r1, [sp, #8]
    a778:	movw	r2, #520	; 0x208
    a77c:	bl	0 <memcpy>
    a780:	ldr	r0, [fp, #-16]
    a784:	ldr	r1, [fp, #-28]	; 0xffffffe4
    a788:	ldr	r1, [r1, #16]
    a78c:	bl	d154 <eval_cursor>
    a790:	cmp	r0, #0
    a794:	beq	a7a4 <eval_float+0x123c>
    a798:	mvn	r0, #0
    a79c:	str	r0, [fp, #-12]
    a7a0:	b	a8b4 <eval_float+0x134c>
    a7a4:	ldr	r0, [fp, #-16]
    a7a8:	ldr	r1, [fp, #-28]	; 0xffffffe4
    a7ac:	ldr	r1, [r1, #20]
    a7b0:	ldr	r2, [fp, #-24]	; 0xffffffe8
    a7b4:	bl	9568 <eval_float>
    a7b8:	cmp	r0, #0
    a7bc:	beq	a7cc <eval_float+0x1264>
    a7c0:	mvn	r0, #0
    a7c4:	str	r0, [fp, #-12]
    a7c8:	b	a8b4 <eval_float+0x134c>
    a7cc:	ldr	r0, [fp, #-16]
    a7d0:	add	r0, r0, #8
    a7d4:	add	r1, sp, #88	; 0x58
    a7d8:	movw	r2, #520	; 0x208
    a7dc:	bl	0 <memcpy>
    a7e0:	b	a8ac <eval_float+0x1344>
    a7e4:	ldr	r0, [fp, #-28]	; 0xffffffe4
    a7e8:	ldr	r0, [r0, #12]
    a7ec:	ldrb	r0, [r0]
    a7f0:	sub	r0, r0, #105	; 0x69
    a7f4:	str	r0, [sp, #76]	; 0x4c
    a7f8:	ldr	r0, [fp, #-16]
    a7fc:	ldr	r1, [sp, #76]	; 0x4c
    a800:	add	r0, r0, r1, lsl #3
    a804:	ldr	r1, [r0, #528]	; 0x210
    a808:	ldr	r0, [r0, #532]	; 0x214
    a80c:	str	r0, [sp, #84]	; 0x54
    a810:	str	r1, [sp, #80]	; 0x50
    a814:	ldr	r0, [fp, #-16]
    a818:	ldr	r1, [fp, #-28]	; 0xffffffe4
    a81c:	ldr	r1, [r1, #16]
    a820:	add	r2, r0, #528	; 0x210
    a824:	ldr	r3, [sp, #76]	; 0x4c
    a828:	add	r2, r2, r3, lsl #3
    a82c:	bl	6f70 <eval_integer>
    a830:	cmp	r0, #0
    a834:	beq	a844 <eval_float+0x12dc>
    a838:	mvn	r0, #0
    a83c:	str	r0, [fp, #-12]
    a840:	b	a8b4 <eval_float+0x134c>
    a844:	ldr	r0, [fp, #-16]
    a848:	ldr	r1, [fp, #-28]	; 0xffffffe4
    a84c:	ldr	r1, [r1, #20]
    a850:	ldr	r2, [fp, #-24]	; 0xffffffe8
    a854:	bl	9568 <eval_float>
    a858:	cmp	r0, #0
    a85c:	beq	a86c <eval_float+0x1304>
    a860:	mvn	r0, #0
    a864:	str	r0, [fp, #-12]
    a868:	b	a8b4 <eval_float+0x134c>
    a86c:	ldr	r0, [sp, #80]	; 0x50
    a870:	ldr	r1, [sp, #84]	; 0x54
    a874:	ldr	r2, [fp, #-16]
    a878:	ldr	r3, [sp, #76]	; 0x4c
    a87c:	add	r2, r2, r3, lsl #3
    a880:	str	r1, [r2, #532]	; 0x214
    a884:	str	r0, [r2, #528]	; 0x210
    a888:	b	a8ac <eval_float+0x1344>
    a88c:	movw	r0, #0
    a890:	movt	r0, #0
    a894:	movw	r1, #0
    a898:	movt	r1, #0
    a89c:	movw	r2, #1909	; 0x775
    a8a0:	movw	r3, #0
    a8a4:	movt	r3, #0
    a8a8:	bl	0 <__assert_fail>
    a8ac:	movw	r0, #0
    a8b0:	str	r0, [fp, #-12]
    a8b4:	ldr	r0, [fp, #-12]
    a8b8:	sub	sp, fp, #8
    a8bc:	pop	{r4, r5, fp, pc}

0000a8c0 <coda_expression_eval_string>:
    a8c0:	push	{r4, r5, fp, lr}
    a8c4:	add	fp, sp, #8
    a8c8:	sub	sp, sp, #608	; 0x260
    a8cc:	str	r0, [fp, #-16]
    a8d0:	str	r1, [fp, #-20]	; 0xffffffec
    a8d4:	str	r2, [fp, #-24]	; 0xffffffe8
    a8d8:	str	r3, [fp, #-28]	; 0xffffffe4
    a8dc:	ldr	r0, [fp, #-16]
    a8e0:	ldr	r0, [r0, #4]
    a8e4:	cmp	r0, #3
    a8e8:	beq	a908 <coda_expression_eval_string+0x48>
    a8ec:	mvn	r0, #99	; 0x63
    a8f0:	movw	r1, #0
    a8f4:	movt	r1, #0
    a8f8:	bl	0 <coda_set_error>
    a8fc:	mvn	r0, #0
    a900:	str	r0, [fp, #-12]
    a904:	b	aac0 <coda_expression_eval_string+0x200>
    a908:	ldr	r0, [fp, #-20]	; 0xffffffec
    a90c:	movw	r1, #0
    a910:	cmp	r0, r1
    a914:	bne	a944 <coda_expression_eval_string+0x84>
    a918:	ldr	r0, [fp, #-16]
    a91c:	ldr	r0, [r0, #8]
    a920:	cmp	r0, #0
    a924:	bne	a944 <coda_expression_eval_string+0x84>
    a928:	mvn	r0, #99	; 0x63
    a92c:	movw	r1, #0
    a930:	movt	r1, #0
    a934:	bl	0 <coda_set_error>
    a938:	mvn	r0, #0
    a93c:	str	r0, [fp, #-12]
    a940:	b	aac0 <coda_expression_eval_string+0x200>
    a944:	ldr	r1, [fp, #-20]	; 0xffffffec
    a948:	add	r0, sp, #16
    a94c:	bl	c0c <init_eval_info>
    a950:	ldr	r1, [fp, #-16]
    a954:	ldr	r3, [fp, #-28]	; 0xffffffe4
    a958:	ldr	r0, [fp, #-24]	; 0xffffffe8
    a95c:	add	r2, sp, #16
    a960:	str	r0, [sp, #4]
    a964:	mov	r0, r2
    a968:	add	r2, sp, #12
    a96c:	ldr	ip, [sp, #4]
    a970:	str	ip, [sp]
    a974:	bl	aacc <eval_string>
    a978:	cmp	r0, #0
    a97c:	beq	a9c0 <coda_expression_eval_string+0x100>
    a980:	ldr	r0, [fp, #-20]	; 0xffffffec
    a984:	movw	r1, #0
    a988:	cmp	r0, r1
    a98c:	beq	a9b4 <coda_expression_eval_string+0xf4>
    a990:	ldr	r0, [fp, #-20]	; 0xffffffec
    a994:	add	r1, sp, #16
    a998:	add	r1, r1, #8
    a99c:	bl	0 <coda_cursor_compare>
    a9a0:	cmp	r0, #0
    a9a4:	beq	a9b4 <coda_expression_eval_string+0xf4>
    a9a8:	add	r0, sp, #16
    a9ac:	add	r0, r0, #8
    a9b0:	bl	0 <coda_cursor_add_to_error_message>
    a9b4:	mvn	r0, #0
    a9b8:	str	r0, [fp, #-12]
    a9bc:	b	aac0 <coda_expression_eval_string+0x200>
    a9c0:	ldr	r0, [fp, #-28]	; 0xffffffe4
    a9c4:	ldr	r0, [r0]
    a9c8:	cmp	r0, #0
    a9cc:	ble	aa8c <coda_expression_eval_string+0x1cc>
    a9d0:	ldr	r0, [sp, #12]
    a9d4:	cmp	r0, #0
    a9d8:	beq	aa6c <coda_expression_eval_string+0x1ac>
    a9dc:	ldr	r0, [fp, #-28]	; 0xffffffe4
    a9e0:	ldr	r0, [r0]
    a9e4:	add	r0, r0, #1
    a9e8:	bl	0 <malloc>
    a9ec:	str	r0, [sp, #8]
    a9f0:	ldr	r0, [sp, #8]
    a9f4:	movw	r1, #0
    a9f8:	cmp	r0, r1
    a9fc:	bne	aa34 <coda_expression_eval_string+0x174>
    aa00:	ldr	r0, [fp, #-28]	; 0xffffffe4
    aa04:	ldr	r2, [r0]
    aa08:	mvn	r0, #0
    aa0c:	movw	r1, #0
    aa10:	movt	r1, #0
    aa14:	movw	r3, #0
    aa18:	movt	r3, #0
    aa1c:	movw	ip, #5251	; 0x1483
    aa20:	str	ip, [sp]
    aa24:	bl	0 <coda_set_error>
    aa28:	mvn	r0, #0
    aa2c:	str	r0, [fp, #-12]
    aa30:	b	aac0 <coda_expression_eval_string+0x200>
    aa34:	ldr	r0, [sp, #8]
    aa38:	ldr	r1, [fp, #-24]	; 0xffffffe8
    aa3c:	ldr	r1, [r1]
    aa40:	ldr	r2, [sp, #12]
    aa44:	add	r1, r1, r2
    aa48:	ldr	r2, [fp, #-28]	; 0xffffffe4
    aa4c:	ldr	r2, [r2]
    aa50:	bl	0 <memcpy>
    aa54:	ldr	r0, [fp, #-24]	; 0xffffffe8
    aa58:	ldr	r0, [r0]
    aa5c:	bl	0 <free>
    aa60:	ldr	r0, [sp, #8]
    aa64:	ldr	r1, [fp, #-24]	; 0xffffffe8
    aa68:	str	r0, [r1]
    aa6c:	ldr	r0, [fp, #-24]	; 0xffffffe8
    aa70:	ldr	r0, [r0]
    aa74:	ldr	r1, [fp, #-28]	; 0xffffffe4
    aa78:	ldr	r1, [r1]
    aa7c:	add	r0, r0, r1
    aa80:	movw	r1, #0
    aa84:	strb	r1, [r0]
    aa88:	b	aab8 <coda_expression_eval_string+0x1f8>
    aa8c:	ldr	r0, [fp, #-24]	; 0xffffffe8
    aa90:	ldr	r0, [r0]
    aa94:	movw	r1, #0
    aa98:	cmp	r0, r1
    aa9c:	beq	aaac <coda_expression_eval_string+0x1ec>
    aaa0:	ldr	r0, [fp, #-24]	; 0xffffffe8
    aaa4:	ldr	r0, [r0]
    aaa8:	bl	0 <free>
    aaac:	ldr	r0, [fp, #-24]	; 0xffffffe8
    aab0:	movw	r1, #0
    aab4:	str	r1, [r0]
    aab8:	movw	r0, #0
    aabc:	str	r0, [fp, #-12]
    aac0:	ldr	r0, [fp, #-12]
    aac4:	sub	sp, fp, #8
    aac8:	pop	{r4, r5, fp, pc}

0000aacc <eval_string>:
    aacc:	push	{r4, sl, fp, lr}
    aad0:	add	fp, sp, #8
    aad4:	sub	sp, sp, #3792	; 0xed0
    aad8:	ldr	ip, [fp, #8]
    aadc:	str	r0, [fp, #-16]
    aae0:	str	r1, [fp, #-20]	; 0xffffffec
    aae4:	str	r2, [fp, #-24]	; 0xffffffe8
    aae8:	str	r3, [fp, #-28]	; 0xffffffe4
    aaec:	ldr	r0, [fp, #-20]	; 0xffffffec
    aaf0:	ldr	r0, [r0]
    aaf4:	cmp	r0, #22
    aaf8:	beq	ab0c <eval_string+0x40>
    aafc:	ldr	r0, [fp, #-20]	; 0xffffffec
    ab00:	ldr	r0, [r0]
    ab04:	cmp	r0, #21
    ab08:	bne	abc4 <eval_string+0xf8>
    ab0c:	ldr	r0, [fp, #-24]	; 0xffffffe8
    ab10:	movw	r1, #0
    ab14:	str	r1, [r0]
    ab18:	ldr	r0, [fp, #-20]	; 0xffffffec
    ab1c:	ldr	r0, [r0, #12]
    ab20:	ldr	r1, [fp, #-28]	; 0xffffffe4
    ab24:	str	r0, [r1]
    ab28:	ldr	r0, [fp, #-28]	; 0xffffffe4
    ab2c:	ldr	r0, [r0]
    ab30:	cmp	r0, #0
    ab34:	ble	abac <eval_string+0xe0>
    ab38:	ldr	r0, [fp, #-28]	; 0xffffffe4
    ab3c:	ldr	r0, [r0]
    ab40:	add	r0, r0, #1
    ab44:	bl	0 <malloc>
    ab48:	ldr	r1, [fp, #8]
    ab4c:	str	r0, [r1]
    ab50:	ldr	r0, [fp, #8]
    ab54:	ldr	r0, [r0]
    ab58:	movw	r1, #0
    ab5c:	cmp	r0, r1
    ab60:	bne	ab8c <eval_string+0xc0>
    ab64:	mvn	r0, #0
    ab68:	movw	r1, #0
    ab6c:	movt	r1, #0
    ab70:	movw	r2, #0
    ab74:	movt	r2, #0
    ab78:	movw	r3, #2845	; 0xb1d
    ab7c:	bl	0 <coda_set_error>
    ab80:	mvn	r0, #0
    ab84:	str	r0, [fp, #-12]
    ab88:	b	d054 <eval_string+0x2588>
    ab8c:	ldr	r0, [fp, #8]
    ab90:	ldr	r0, [r0]
    ab94:	ldr	r1, [fp, #-20]	; 0xffffffec
    ab98:	ldr	r1, [r1, #16]
    ab9c:	ldr	r2, [fp, #-28]	; 0xffffffe4
    aba0:	ldr	r2, [r2]
    aba4:	bl	0 <memcpy>
    aba8:	b	abb8 <eval_string+0xec>
    abac:	ldr	r0, [fp, #8]
    abb0:	movw	r1, #0
    abb4:	str	r1, [r0]
    abb8:	movw	r0, #0
    abbc:	str	r0, [fp, #-12]
    abc0:	b	d054 <eval_string+0x2588>
    abc4:	ldr	r0, [fp, #-20]	; 0xffffffec
    abc8:	str	r0, [fp, #-32]	; 0xffffffe0
    abcc:	ldr	r0, [fp, #-32]	; 0xffffffe0
    abd0:	ldr	r0, [r0]
    abd4:	sub	r0, r0, #1
    abd8:	cmp	r0, #85	; 0x55
    abdc:	str	r0, [sp, #96]	; 0x60
    abe0:	bhi	d02c <eval_string+0x2560>
    abe4:	add	r0, pc, #8
    abe8:	ldr	r1, [sp, #96]	; 0x60
    abec:	ldr	r0, [r0, r1, lsl #2]
    abf0:	mov	pc, r0
    abf4:	.word	0x0000b350
    abf8:	.word	0x0000d02c
    abfc:	.word	0x0000bbcc
    ac00:	.word	0x0000d02c
    ac04:	.word	0x0000d02c
    ac08:	.word	0x0000d02c
    ac0c:	.word	0x0000d02c
    ac10:	.word	0x0000c088
    ac14:	.word	0x0000be44
    ac18:	.word	0x0000d02c
    ac1c:	.word	0x0000ceb0
    ac20:	.word	0x0000d02c
    ac24:	.word	0x0000d02c
    ac28:	.word	0x0000d02c
    ac2c:	.word	0x0000d02c
    ac30:	.word	0x0000b000
    ac34:	.word	0x0000d02c
    ac38:	.word	0x0000d02c
    ac3c:	.word	0x0000d02c
    ac40:	.word	0x0000d02c
    ac44:	.word	0x0000d02c
    ac48:	.word	0x0000d02c
    ac4c:	.word	0x0000d02c
    ac50:	.word	0x0000d02c
    ac54:	.word	0x0000d02c
    ac58:	.word	0x0000d02c
    ac5c:	.word	0x0000d02c
    ac60:	.word	0x0000c360
    ac64:	.word	0x0000d02c
    ac68:	.word	0x0000d02c
    ac6c:	.word	0x0000d02c
    ac70:	.word	0x0000d02c
    ac74:	.word	0x0000d02c
    ac78:	.word	0x0000d02c
    ac7c:	.word	0x0000d02c
    ac80:	.word	0x0000d02c
    ac84:	.word	0x0000d02c
    ac88:	.word	0x0000d02c
    ac8c:	.word	0x0000d02c
    ac90:	.word	0x0000d02c
    ac94:	.word	0x0000d02c
    ac98:	.word	0x0000c2b8
    ac9c:	.word	0x0000d02c
    aca0:	.word	0x0000d02c
    aca4:	.word	0x0000d02c
    aca8:	.word	0x0000d02c
    acac:	.word	0x0000d02c
    acb0:	.word	0x0000d02c
    acb4:	.word	0x0000d02c
    acb8:	.word	0x0000d02c
    acbc:	.word	0x0000d02c
    acc0:	.word	0x0000d02c
    acc4:	.word	0x0000d02c
    acc8:	.word	0x0000d02c
    accc:	.word	0x0000b934
    acd0:	.word	0x0000b624
    acd4:	.word	0x0000b4fc
    acd8:	.word	0x0000d02c
    acdc:	.word	0x0000d02c
    ace0:	.word	0x0000d02c
    ace4:	.word	0x0000d02c
    ace8:	.word	0x0000d02c
    acec:	.word	0x0000d02c
    acf0:	.word	0x0000d02c
    acf4:	.word	0x0000d02c
    acf8:	.word	0x0000d02c
    acfc:	.word	0x0000c970
    ad00:	.word	0x0000ca7c
    ad04:	.word	0x0000cb94
    ad08:	.word	0x0000d02c
    ad0c:	.word	0x0000c4ac
    ad10:	.word	0x0000d02c
    ad14:	.word	0x0000b9e8
    ad18:	.word	0x0000d02c
    ad1c:	.word	0x0000ad4c
    ad20:	.word	0x0000cca4
    ad24:	.word	0x0000b750
    ad28:	.word	0x0000d02c
    ad2c:	.word	0x0000d02c
    ad30:	.word	0x0000ba9c
    ad34:	.word	0x0000d02c
    ad38:	.word	0x0000d02c
    ad3c:	.word	0x0000d02c
    ad40:	.word	0x0000d02c
    ad44:	.word	0x0000d02c
    ad48:	.word	0x0000cf78
    ad4c:	ldr	r0, [fp, #-32]	; 0xffffffe0
    ad50:	ldr	r0, [r0, #16]
    ad54:	ldr	r0, [r0, #4]
    ad58:	cmp	r0, #4
    ad5c:	bne	af50 <eval_string+0x484>
    ad60:	ldr	r0, [fp, #-16]
    ad64:	ldr	r0, [r0]
    ad68:	movw	r1, #0
    ad6c:	cmp	r0, r1
    ad70:	beq	ad78 <eval_string+0x2ac>
    ad74:	b	ad98 <eval_string+0x2cc>
    ad78:	movw	r0, #0
    ad7c:	movt	r0, #0
    ad80:	movw	r1, #0
    ad84:	movt	r1, #0
    ad88:	movw	r2, #2865	; 0xb31
    ad8c:	movw	r3, #0
    ad90:	movt	r3, #0
    ad94:	bl	0 <__assert_fail>
    ad98:	ldr	r0, [fp, #-16]
    ad9c:	add	r0, r0, #8
    ada0:	sub	r1, fp, #552	; 0x228
    ada4:	str	r0, [sp, #92]	; 0x5c
    ada8:	mov	r0, r1
    adac:	ldr	r1, [sp, #92]	; 0x5c
    adb0:	movw	r2, #520	; 0x208
    adb4:	bl	0 <memcpy>
    adb8:	ldr	r0, [fp, #-16]
    adbc:	ldr	r1, [fp, #-32]	; 0xffffffe0
    adc0:	ldr	r1, [r1, #16]
    adc4:	bl	d154 <eval_cursor>
    adc8:	cmp	r0, #0
    adcc:	beq	addc <eval_string+0x310>
    add0:	mvn	r0, #0
    add4:	str	r0, [fp, #-12]
    add8:	b	d054 <eval_string+0x2588>
    addc:	ldr	r0, [fp, #-24]	; 0xffffffe8
    ade0:	movw	r1, #0
    ade4:	str	r1, [r0]
    ade8:	ldr	r0, [fp, #-16]
    adec:	add	r0, r0, #8
    adf0:	ldr	r1, [fp, #-28]	; 0xffffffe4
    adf4:	bl	0 <coda_cursor_get_string_length>
    adf8:	cmp	r0, #0
    adfc:	beq	ae0c <eval_string+0x340>
    ae00:	mvn	r0, #0
    ae04:	str	r0, [fp, #-12]
    ae08:	b	d054 <eval_string+0x2588>
    ae0c:	ldr	r0, [fp, #-32]	; 0xffffffe0
    ae10:	ldr	r0, [r0, #20]
    ae14:	movw	r1, #0
    ae18:	cmp	r0, r1
    ae1c:	beq	ae78 <eval_string+0x3ac>
    ae20:	ldr	r0, [fp, #-16]
    ae24:	ldr	r1, [fp, #-32]	; 0xffffffe0
    ae28:	ldr	r1, [r1, #20]
    ae2c:	sub	r2, fp, #560	; 0x230
    ae30:	bl	6f70 <eval_integer>
    ae34:	cmp	r0, #0
    ae38:	beq	ae48 <eval_string+0x37c>
    ae3c:	mvn	r0, #0
    ae40:	str	r0, [fp, #-12]
    ae44:	b	d054 <eval_string+0x2588>
    ae48:	ldr	r0, [fp, #-28]	; 0xffffffe4
    ae4c:	ldr	r0, [r0]
    ae50:	ldr	r1, [fp, #-560]	; 0xfffffdd0
    ae54:	ldr	r2, [fp, #-556]	; 0xfffffdd4
    ae58:	subs	r1, r1, r0
    ae5c:	sbcs	r0, r2, r0, asr #31
    ae60:	bge	ae74 <eval_string+0x3a8>
    ae64:	b	ae68 <eval_string+0x39c>
    ae68:	ldr	r0, [fp, #-560]	; 0xfffffdd0
    ae6c:	ldr	r1, [fp, #-28]	; 0xffffffe4
    ae70:	str	r0, [r1]
    ae74:	b	ae78 <eval_string+0x3ac>
    ae78:	ldr	r0, [fp, #-28]	; 0xffffffe4
    ae7c:	ldr	r0, [r0]
    ae80:	cmp	r0, #0
    ae84:	ble	af2c <eval_string+0x460>
    ae88:	ldr	r0, [fp, #-28]	; 0xffffffe4
    ae8c:	ldr	r0, [r0]
    ae90:	add	r0, r0, #1
    ae94:	bl	0 <malloc>
    ae98:	ldr	r1, [fp, #8]
    ae9c:	str	r0, [r1]
    aea0:	ldr	r0, [fp, #8]
    aea4:	ldr	r0, [r0]
    aea8:	movw	r1, #0
    aeac:	cmp	r0, r1
    aeb0:	bne	aee8 <eval_string+0x41c>
    aeb4:	ldr	r0, [fp, #-28]	; 0xffffffe4
    aeb8:	ldr	r2, [r0]
    aebc:	mvn	r0, #0
    aec0:	movw	r1, #0
    aec4:	movt	r1, #0
    aec8:	movw	r3, #0
    aecc:	movt	r3, #0
    aed0:	movw	ip, #2895	; 0xb4f
    aed4:	str	ip, [sp]
    aed8:	bl	0 <coda_set_error>
    aedc:	mvn	r0, #0
    aee0:	str	r0, [fp, #-12]
    aee4:	b	d054 <eval_string+0x2588>
    aee8:	ldr	r0, [fp, #-16]
    aeec:	add	r0, r0, #8
    aef0:	ldr	r1, [fp, #8]
    aef4:	ldr	r1, [r1]
    aef8:	ldr	r2, [fp, #-28]	; 0xffffffe4
    aefc:	ldr	r2, [r2]
    af00:	add	r2, r2, #1
    af04:	bl	0 <coda_cursor_read_string>
    af08:	cmp	r0, #0
    af0c:	beq	af28 <eval_string+0x45c>
    af10:	ldr	r0, [fp, #8]
    af14:	ldr	r0, [r0]
    af18:	bl	0 <free>
    af1c:	mvn	r0, #0
    af20:	str	r0, [fp, #-12]
    af24:	b	d054 <eval_string+0x2588>
    af28:	b	af38 <eval_string+0x46c>
    af2c:	ldr	r0, [fp, #8]
    af30:	movw	r1, #0
    af34:	str	r1, [r0]
    af38:	ldr	r0, [fp, #-16]
    af3c:	add	r0, r0, #8
    af40:	sub	r1, fp, #552	; 0x228
    af44:	movw	r2, #520	; 0x208
    af48:	bl	0 <memcpy>
    af4c:	b	affc <eval_string+0x530>
    af50:	ldr	r0, [fp, #-16]
    af54:	ldr	r1, [fp, #-32]	; 0xffffffe0
    af58:	ldr	r1, [r1, #16]
    af5c:	sub	r2, fp, #568	; 0x238
    af60:	bl	6f70 <eval_integer>
    af64:	cmp	r0, #0
    af68:	beq	af78 <eval_string+0x4ac>
    af6c:	mvn	r0, #0
    af70:	str	r0, [fp, #-12]
    af74:	b	d054 <eval_string+0x2588>
    af78:	sub	lr, fp, #512	; 0x200
    af7c:	sub	r2, lr, #77	; 0x4d
    af80:	ldr	r0, [fp, #-568]	; 0xfffffdc8
    af84:	ldr	r1, [fp, #-564]	; 0xfffffdcc
    af88:	bl	0 <coda_str64>
    af8c:	sub	lr, fp, #512	; 0x200
    af90:	sub	r0, lr, #77	; 0x4d
    af94:	bl	0 <strdup>
    af98:	ldr	r1, [fp, #8]
    af9c:	str	r0, [r1]
    afa0:	ldr	r0, [fp, #8]
    afa4:	ldr	r0, [r0]
    afa8:	movw	r1, #0
    afac:	cmp	r0, r1
    afb0:	bne	afdc <eval_string+0x510>
    afb4:	mvn	r0, #0
    afb8:	movw	r1, #0
    afbc:	movt	r1, #0
    afc0:	movw	r2, #0
    afc4:	movt	r2, #0
    afc8:	movw	r3, #2924	; 0xb6c
    afcc:	bl	0 <coda_set_error>
    afd0:	mvn	r0, #0
    afd4:	str	r0, [fp, #-12]
    afd8:	b	d054 <eval_string+0x2588>
    afdc:	sub	lr, fp, #512	; 0x200
    afe0:	sub	r0, lr, #77	; 0x4d
    afe4:	ldr	r1, [fp, #-24]	; 0xffffffe8
    afe8:	movw	r2, #0
    afec:	str	r2, [r1]
    aff0:	bl	0 <strlen>
    aff4:	ldr	r1, [fp, #-28]	; 0xffffffe4
    aff8:	str	r0, [r1]
    affc:	b	d04c <eval_string+0x2580>
    b000:	mov	r0, #0
    b004:	str	r0, [fp, #-1116]	; 0xfffffba4
    b008:	str	r0, [fp, #-1120]	; 0xfffffba0
    b00c:	mvn	r0, #0
    b010:	str	r0, [fp, #-1132]	; 0xfffffb94
    b014:	str	r0, [fp, #-1136]	; 0xfffffb90
    b018:	ldr	r0, [fp, #-16]
    b01c:	ldr	r0, [r0]
    b020:	movw	r1, #0
    b024:	cmp	r0, r1
    b028:	beq	b030 <eval_string+0x564>
    b02c:	b	b050 <eval_string+0x584>
    b030:	movw	r0, #0
    b034:	movt	r0, #0
    b038:	movw	r1, #0
    b03c:	movt	r1, #0
    b040:	movw	r2, #2938	; 0xb7a
    b044:	movw	r3, #0
    b048:	movt	r3, #0
    b04c:	bl	0 <__assert_fail>
    b050:	ldr	r0, [fp, #-16]
    b054:	add	r0, r0, #8
    b058:	sub	lr, fp, #1024	; 0x400
    b05c:	sub	r1, lr, #88	; 0x58
    b060:	str	r0, [sp, #88]	; 0x58
    b064:	mov	r0, r1
    b068:	ldr	r1, [sp, #88]	; 0x58
    b06c:	movw	r2, #520	; 0x208
    b070:	bl	0 <memcpy>
    b074:	ldr	r0, [fp, #-16]
    b078:	ldr	r1, [fp, #-32]	; 0xffffffe0
    b07c:	ldr	r1, [r1, #16]
    b080:	bl	d154 <eval_cursor>
    b084:	cmp	r0, #0
    b088:	beq	b098 <eval_string+0x5cc>
    b08c:	mvn	r0, #0
    b090:	str	r0, [fp, #-12]
    b094:	b	d054 <eval_string+0x2588>
    b098:	ldr	r0, [fp, #-32]	; 0xffffffe0
    b09c:	ldr	r0, [r0, #24]
    b0a0:	movw	r1, #0
    b0a4:	cmp	r0, r1
    b0a8:	beq	b138 <eval_string+0x66c>
    b0ac:	ldr	r0, [fp, #-16]
    b0b0:	ldr	r1, [fp, #-32]	; 0xffffffe0
    b0b4:	ldr	r1, [r1, #20]
    b0b8:	sub	r2, fp, #1120	; 0x460
    b0bc:	bl	6f70 <eval_integer>
    b0c0:	cmp	r0, #0
    b0c4:	beq	b0d4 <eval_string+0x608>
    b0c8:	mvn	r0, #0
    b0cc:	str	r0, [fp, #-12]
    b0d0:	b	d054 <eval_string+0x2588>
    b0d4:	ldr	r0, [fp, #-16]
    b0d8:	ldr	r1, [fp, #-32]	; 0xffffffe0
    b0dc:	ldr	r1, [r1, #24]
    b0e0:	sub	lr, fp, #1024	; 0x400
    b0e4:	sub	r2, lr, #104	; 0x68
    b0e8:	bl	6f70 <eval_integer>
    b0ec:	cmp	r0, #0
    b0f0:	beq	b100 <eval_string+0x634>
    b0f4:	mvn	r0, #0
    b0f8:	str	r0, [fp, #-12]
    b0fc:	b	d054 <eval_string+0x2588>
    b100:	ldr	r0, [fp, #-1128]	; 0xfffffb98
    b104:	ldr	r1, [fp, #-1124]	; 0xfffffb9c
    b108:	subs	r0, r0, #1
    b10c:	sbcs	r1, r1, #0
    b110:	blt	b134 <eval_string+0x668>
    b114:	b	b118 <eval_string+0x64c>
    b118:	ldr	r0, [fp, #-1128]	; 0xfffffb98
    b11c:	ldr	r1, [fp, #-1124]	; 0xfffffb9c
    b120:	lsl	r1, r1, #3
    b124:	orr	r1, r1, r0, lsr #29
    b128:	lsl	r0, r0, #3
    b12c:	str	r0, [fp, #-1136]	; 0xfffffb90
    b130:	str	r1, [fp, #-1132]	; 0xfffffb94
    b134:	b	b1dc <eval_string+0x710>
    b138:	ldr	r0, [fp, #-32]	; 0xffffffe0
    b13c:	ldr	r0, [r0, #20]
    b140:	movw	r1, #0
    b144:	cmp	r0, r1
    b148:	beq	b1b0 <eval_string+0x6e4>
    b14c:	ldr	r0, [fp, #-16]
    b150:	ldr	r1, [fp, #-32]	; 0xffffffe0
    b154:	ldr	r1, [r1, #20]
    b158:	sub	lr, fp, #1024	; 0x400
    b15c:	sub	r2, lr, #104	; 0x68
    b160:	bl	6f70 <eval_integer>
    b164:	cmp	r0, #0
    b168:	beq	b178 <eval_string+0x6ac>
    b16c:	mvn	r0, #0
    b170:	str	r0, [fp, #-12]
    b174:	b	d054 <eval_string+0x2588>
    b178:	ldr	r0, [fp, #-1128]	; 0xfffffb98
    b17c:	ldr	r1, [fp, #-1124]	; 0xfffffb9c
    b180:	subs	r0, r0, #1
    b184:	sbcs	r1, r1, #0
    b188:	blt	b1ac <eval_string+0x6e0>
    b18c:	b	b190 <eval_string+0x6c4>
    b190:	ldr	r0, [fp, #-1128]	; 0xfffffb98
    b194:	ldr	r1, [fp, #-1124]	; 0xfffffb9c
    b198:	lsl	r1, r1, #3
    b19c:	orr	r1, r1, r0, lsr #29
    b1a0:	lsl	r0, r0, #3
    b1a4:	str	r0, [fp, #-1136]	; 0xfffffb90
    b1a8:	str	r1, [fp, #-1132]	; 0xfffffb94
    b1ac:	b	b1d8 <eval_string+0x70c>
    b1b0:	ldr	r0, [fp, #-16]
    b1b4:	add	r0, r0, #8
    b1b8:	sub	r1, fp, #1136	; 0x470
    b1bc:	bl	0 <coda_cursor_get_bit_size>
    b1c0:	cmp	r0, #0
    b1c4:	beq	b1d4 <eval_string+0x708>
    b1c8:	mvn	r0, #0
    b1cc:	str	r0, [fp, #-12]
    b1d0:	b	d054 <eval_string+0x2588>
    b1d4:	b	b1d8 <eval_string+0x70c>
    b1d8:	b	b1dc <eval_string+0x710>
    b1dc:	ldr	r0, [fp, #-1132]	; 0xfffffb94
    b1e0:	cmn	r0, #1
    b1e4:	bgt	b208 <eval_string+0x73c>
    b1e8:	b	b1ec <eval_string+0x720>
    b1ec:	mvn	r0, #400	; 0x190
    b1f0:	movw	r1, #0
    b1f4:	movt	r1, #0
    b1f8:	bl	0 <coda_set_error>
    b1fc:	mvn	r0, #0
    b200:	str	r0, [fp, #-12]
    b204:	b	d054 <eval_string+0x2588>
    b208:	ldr	r0, [fp, #-1136]	; 0xfffffb90
    b20c:	ldr	r1, [fp, #-1132]	; 0xfffffb94
    b210:	lsr	r2, r0, #3
    b214:	orr	r2, r2, r1, lsl #29
    b218:	asr	r1, r1, #3
    b21c:	and	r0, r0, #7
    b220:	adds	r3, r2, #1
    b224:	adc	ip, r1, #0
    b228:	cmp	r0, #0
    b22c:	movne	r2, r3
    b230:	cmp	r0, #0
    b234:	movne	r1, ip
    b238:	str	r2, [fp, #-1128]	; 0xfffffb98
    b23c:	str	r1, [fp, #-1124]	; 0xfffffb9c
    b240:	ldr	r0, [fp, #-24]	; 0xffffffe8
    b244:	mov	r1, #0
    b248:	str	r1, [r0]
    b24c:	ldr	r0, [fp, #-1128]	; 0xfffffb98
    b250:	ldr	r1, [fp, #-28]	; 0xffffffe4
    b254:	str	r0, [r1]
    b258:	ldr	r0, [fp, #-1128]	; 0xfffffb98
    b25c:	ldr	r1, [fp, #-1124]	; 0xfffffb9c
    b260:	subs	r0, r0, #1
    b264:	sbcs	r1, r1, #0
    b268:	blt	b328 <eval_string+0x85c>
    b26c:	b	b270 <eval_string+0x7a4>
    b270:	ldr	r0, [fp, #-1128]	; 0xfffffb98
    b274:	add	r0, r0, #1
    b278:	bl	0 <malloc>
    b27c:	ldr	r1, [fp, #8]
    b280:	str	r0, [r1]
    b284:	ldr	r0, [fp, #8]
    b288:	ldr	r0, [r0]
    b28c:	movw	r1, #0
    b290:	cmp	r0, r1
    b294:	bne	b2c8 <eval_string+0x7fc>
    b298:	ldr	r2, [fp, #-1128]	; 0xfffffb98
    b29c:	mvn	r0, #0
    b2a0:	movw	r1, #0
    b2a4:	movt	r1, #0
    b2a8:	movw	r3, #0
    b2ac:	movt	r3, #0
    b2b0:	movw	ip, #2991	; 0xbaf
    b2b4:	str	ip, [sp]
    b2b8:	bl	0 <coda_set_error>
    b2bc:	mvn	r0, #0
    b2c0:	str	r0, [fp, #-12]
    b2c4:	b	d054 <eval_string+0x2588>
    b2c8:	ldr	r0, [fp, #-16]
    b2cc:	add	r0, r0, #8
    b2d0:	ldr	r1, [fp, #8]
    b2d4:	ldr	r1, [r1]
    b2d8:	ldr	r2, [fp, #-1120]	; 0xfffffba0
    b2dc:	ldr	r3, [fp, #-1116]	; 0xfffffba4
    b2e0:	lsl	r3, r3, #3
    b2e4:	orr	r3, r3, r2, lsr #29
    b2e8:	lsl	r2, r2, #3
    b2ec:	ldr	ip, [fp, #-1136]	; 0xfffffb90
    b2f0:	ldr	lr, [fp, #-1132]	; 0xfffffb94
    b2f4:	mov	r4, sp
    b2f8:	str	lr, [r4, #4]
    b2fc:	str	ip, [r4]
    b300:	bl	0 <coda_cursor_read_bits>
    b304:	cmp	r0, #0
    b308:	beq	b324 <eval_string+0x858>
    b30c:	ldr	r0, [fp, #8]
    b310:	ldr	r0, [r0]
    b314:	bl	0 <free>
    b318:	mvn	r0, #0
    b31c:	str	r0, [fp, #-12]
    b320:	b	d054 <eval_string+0x2588>
    b324:	b	b334 <eval_string+0x868>
    b328:	ldr	r0, [fp, #8]
    b32c:	movw	r1, #0
    b330:	str	r1, [r0]
    b334:	ldr	r0, [fp, #-16]
    b338:	add	r0, r0, #8
    b33c:	sub	lr, fp, #1024	; 0x400
    b340:	sub	r1, lr, #88	; 0x58
    b344:	movw	r2, #520	; 0x208
    b348:	bl	0 <memcpy>
    b34c:	b	d04c <eval_string+0x2580>
    b350:	ldr	r0, [fp, #-16]
    b354:	ldr	r1, [fp, #-32]	; 0xffffffe0
    b358:	ldr	r1, [r1, #16]
    b35c:	sub	lr, fp, #1024	; 0x400
    b360:	sub	r2, lr, #116	; 0x74
    b364:	sub	lr, fp, #1024	; 0x400
    b368:	sub	r3, lr, #124	; 0x7c
    b36c:	sub	lr, fp, #1024	; 0x400
    b370:	sub	ip, lr, #132	; 0x84
    b374:	str	ip, [sp]
    b378:	bl	aacc <eval_string>
    b37c:	cmp	r0, #0
    b380:	beq	b390 <eval_string+0x8c4>
    b384:	mvn	r0, #0
    b388:	str	r0, [fp, #-12]
    b38c:	b	d054 <eval_string+0x2588>
    b390:	ldr	r0, [fp, #-16]
    b394:	ldr	r1, [fp, #-32]	; 0xffffffe0
    b398:	ldr	r1, [r1, #20]
    b39c:	sub	lr, fp, #1024	; 0x400
    b3a0:	sub	r2, lr, #120	; 0x78
    b3a4:	sub	r3, fp, #1152	; 0x480
    b3a8:	sub	lr, fp, #1024	; 0x400
    b3ac:	sub	ip, lr, #136	; 0x88
    b3b0:	str	ip, [sp]
    b3b4:	bl	aacc <eval_string>
    b3b8:	cmp	r0, #0
    b3bc:	beq	b3d4 <eval_string+0x908>
    b3c0:	ldr	r0, [fp, #-1156]	; 0xfffffb7c
    b3c4:	bl	0 <free>
    b3c8:	mvn	r0, #0
    b3cc:	str	r0, [fp, #-12]
    b3d0:	b	d054 <eval_string+0x2588>
    b3d4:	ldr	r0, [fp, #-24]	; 0xffffffe8
    b3d8:	movw	r1, #0
    b3dc:	str	r1, [r0]
    b3e0:	ldr	r0, [fp, #-1148]	; 0xfffffb84
    b3e4:	ldr	r1, [fp, #-1152]	; 0xfffffb80
    b3e8:	add	r0, r0, r1
    b3ec:	ldr	r1, [fp, #-28]	; 0xffffffe4
    b3f0:	str	r0, [r1]
    b3f4:	ldr	r0, [fp, #-28]	; 0xffffffe4
    b3f8:	ldr	r0, [r0]
    b3fc:	cmp	r0, #0
    b400:	ble	b4c4 <eval_string+0x9f8>
    b404:	ldr	r0, [fp, #-28]	; 0xffffffe4
    b408:	ldr	r0, [r0]
    b40c:	add	r0, r0, #1
    b410:	bl	0 <malloc>
    b414:	ldr	r1, [fp, #8]
    b418:	str	r0, [r1]
    b41c:	ldr	r0, [fp, #8]
    b420:	ldr	r0, [r0]
    b424:	movw	r1, #0
    b428:	cmp	r0, r1
    b42c:	bne	b468 <eval_string+0x99c>
    b430:	ldr	r0, [fp, #-28]	; 0xffffffe4
    b434:	ldr	r0, [r0]
    b438:	add	r2, r0, #1
    b43c:	mvn	r0, #0
    b440:	movw	r1, #0
    b444:	movt	r1, #0
    b448:	movw	r3, #0
    b44c:	movt	r3, #0
    b450:	movw	ip, #3031	; 0xbd7
    b454:	str	ip, [sp]
    b458:	bl	0 <coda_set_error>
    b45c:	mvn	r0, #0
    b460:	str	r0, [fp, #-12]
    b464:	b	d054 <eval_string+0x2588>
    b468:	ldr	r0, [fp, #-1148]	; 0xfffffb84
    b46c:	cmp	r0, #0
    b470:	ble	b490 <eval_string+0x9c4>
    b474:	ldr	r0, [fp, #8]
    b478:	ldr	r0, [r0]
    b47c:	ldr	r1, [fp, #-1156]	; 0xfffffb7c
    b480:	ldr	r2, [fp, #-1140]	; 0xfffffb8c
    b484:	add	r1, r1, r2
    b488:	ldr	r2, [fp, #-1148]	; 0xfffffb84
    b48c:	bl	0 <memcpy>
    b490:	ldr	r0, [fp, #-1152]	; 0xfffffb80
    b494:	cmp	r0, #0
    b498:	ble	b4c0 <eval_string+0x9f4>
    b49c:	ldr	r0, [fp, #8]
    b4a0:	ldr	r0, [r0]
    b4a4:	ldr	r1, [fp, #-1148]	; 0xfffffb84
    b4a8:	add	r0, r0, r1
    b4ac:	ldr	r1, [fp, #-1160]	; 0xfffffb78
    b4b0:	ldr	r2, [fp, #-1144]	; 0xfffffb88
    b4b4:	add	r1, r1, r2
    b4b8:	ldr	r2, [fp, #-1152]	; 0xfffffb80
    b4bc:	bl	0 <memcpy>
    b4c0:	b	b4d0 <eval_string+0xa04>
    b4c4:	ldr	r0, [fp, #8]
    b4c8:	movw	r1, #0
    b4cc:	str	r1, [r0]
    b4d0:	ldr	r0, [fp, #-1148]	; 0xfffffb84
    b4d4:	cmp	r0, #0
    b4d8:	ble	b4e4 <eval_string+0xa18>
    b4dc:	ldr	r0, [fp, #-1156]	; 0xfffffb7c
    b4e0:	bl	0 <free>
    b4e4:	ldr	r0, [fp, #-1152]	; 0xfffffb80
    b4e8:	cmp	r0, #0
    b4ec:	ble	b4f8 <eval_string+0xa2c>
    b4f0:	ldr	r0, [fp, #-1160]	; 0xfffffb78
    b4f4:	bl	0 <free>
    b4f8:	b	d04c <eval_string+0x2580>
    b4fc:	ldr	r0, [fp, #-16]
    b500:	ldr	r1, [fp, #-32]	; 0xffffffe0
    b504:	ldr	r1, [r1, #16]
    b508:	sub	lr, fp, #1024	; 0x400
    b50c:	sub	r2, lr, #140	; 0x8c
    b510:	sub	lr, fp, #1024	; 0x400
    b514:	sub	r3, lr, #148	; 0x94
    b518:	sub	lr, fp, #1024	; 0x400
    b51c:	sub	ip, lr, #156	; 0x9c
    b520:	str	ip, [sp]
    b524:	bl	aacc <eval_string>
    b528:	cmp	r0, #0
    b52c:	beq	b53c <eval_string+0xa70>
    b530:	mvn	r0, #0
    b534:	str	r0, [fp, #-12]
    b538:	b	d054 <eval_string+0x2588>
    b53c:	ldr	r0, [fp, #-16]
    b540:	ldr	r1, [fp, #-32]	; 0xffffffe0
    b544:	ldr	r1, [r1, #20]
    b548:	sub	r2, fp, #1168	; 0x490
    b54c:	sub	lr, fp, #1024	; 0x400
    b550:	sub	r3, lr, #152	; 0x98
    b554:	sub	ip, fp, #1184	; 0x4a0
    b558:	str	ip, [sp]
    b55c:	bl	aacc <eval_string>
    b560:	cmp	r0, #0
    b564:	beq	b57c <eval_string+0xab0>
    b568:	ldr	r0, [fp, #-1180]	; 0xfffffb64
    b56c:	bl	0 <free>
    b570:	mvn	r0, #0
    b574:	str	r0, [fp, #-12]
    b578:	b	d054 <eval_string+0x2588>
    b57c:	ldr	r0, [fp, #-1164]	; 0xfffffb74
    b580:	ldr	r1, [fp, #-1172]	; 0xfffffb6c
    b584:	ldr	r2, [fp, #-1180]	; 0xfffffb64
    b588:	ldr	r3, [fp, #-1168]	; 0xfffffb70
    b58c:	ldr	ip, [fp, #-1176]	; 0xfffffb68
    b590:	ldr	lr, [fp, #-1184]	; 0xfffffb60
    b594:	str	ip, [sp]
    b598:	str	lr, [sp, #4]
    b59c:	bl	e1a8 <compare_strings>
    b5a0:	cmp	r0, #0
    b5a4:	bgt	b5e4 <eval_string+0xb18>
    b5a8:	ldr	r0, [fp, #-1164]	; 0xfffffb74
    b5ac:	ldr	r1, [fp, #-24]	; 0xffffffe8
    b5b0:	str	r0, [r1]
    b5b4:	ldr	r0, [fp, #-1172]	; 0xfffffb6c
    b5b8:	ldr	r1, [fp, #-28]	; 0xffffffe4
    b5bc:	str	r0, [r1]
    b5c0:	ldr	r0, [fp, #-1180]	; 0xfffffb64
    b5c4:	ldr	r1, [fp, #8]
    b5c8:	str	r0, [r1]
    b5cc:	ldr	r0, [fp, #-1176]	; 0xfffffb68
    b5d0:	cmp	r0, #0
    b5d4:	ble	b5e0 <eval_string+0xb14>
    b5d8:	ldr	r0, [fp, #-1184]	; 0xfffffb60
    b5dc:	bl	0 <free>
    b5e0:	b	b620 <eval_string+0xb54>
    b5e4:	ldr	r0, [fp, #-1168]	; 0xfffffb70
    b5e8:	ldr	r1, [fp, #-24]	; 0xffffffe8
    b5ec:	str	r0, [r1]
    b5f0:	ldr	r0, [fp, #-1176]	; 0xfffffb68
    b5f4:	ldr	r1, [fp, #-28]	; 0xffffffe4
    b5f8:	str	r0, [r1]
    b5fc:	ldr	r0, [fp, #-1184]	; 0xfffffb60
    b600:	ldr	r1, [fp, #8]
    b604:	str	r0, [r1]
    b608:	ldr	r0, [fp, #-1172]	; 0xfffffb6c
    b60c:	cmp	r0, #0
    b610:	ble	b61c <eval_string+0xb50>
    b614:	ldr	r0, [fp, #-1180]	; 0xfffffb64
    b618:	bl	0 <free>
    b61c:	b	b620 <eval_string+0xb54>
    b620:	b	d04c <eval_string+0x2580>
    b624:	ldr	r0, [fp, #-16]
    b628:	ldr	r1, [fp, #-32]	; 0xffffffe0
    b62c:	ldr	r1, [r1, #16]
    b630:	sub	lr, fp, #1024	; 0x400
    b634:	sub	r2, lr, #164	; 0xa4
    b638:	sub	lr, fp, #1024	; 0x400
    b63c:	sub	r3, lr, #172	; 0xac
    b640:	sub	lr, fp, #1024	; 0x400
    b644:	sub	ip, lr, #180	; 0xb4
    b648:	str	ip, [sp]
    b64c:	bl	aacc <eval_string>
    b650:	cmp	r0, #0
    b654:	beq	b664 <eval_string+0xb98>
    b658:	mvn	r0, #0
    b65c:	str	r0, [fp, #-12]
    b660:	b	d054 <eval_string+0x2588>
    b664:	ldr	r0, [fp, #-16]
    b668:	ldr	r1, [fp, #-32]	; 0xffffffe0
    b66c:	ldr	r1, [r1, #20]
    b670:	sub	lr, fp, #1024	; 0x400
    b674:	sub	r2, lr, #168	; 0xa8
    b678:	sub	r3, fp, #1200	; 0x4b0
    b67c:	sub	lr, fp, #1024	; 0x400
    b680:	sub	ip, lr, #184	; 0xb8
    b684:	str	ip, [sp]
    b688:	bl	aacc <eval_string>
    b68c:	cmp	r0, #0
    b690:	beq	b6a8 <eval_string+0xbdc>
    b694:	ldr	r0, [fp, #-1204]	; 0xfffffb4c
    b698:	bl	0 <free>
    b69c:	mvn	r0, #0
    b6a0:	str	r0, [fp, #-12]
    b6a4:	b	d054 <eval_string+0x2588>
    b6a8:	ldr	r0, [fp, #-1188]	; 0xfffffb5c
    b6ac:	ldr	r1, [fp, #-1196]	; 0xfffffb54
    b6b0:	ldr	r2, [fp, #-1204]	; 0xfffffb4c
    b6b4:	ldr	r3, [fp, #-1192]	; 0xfffffb58
    b6b8:	ldr	ip, [fp, #-1200]	; 0xfffffb50
    b6bc:	ldr	lr, [fp, #-1208]	; 0xfffffb48
    b6c0:	str	ip, [sp]
    b6c4:	str	lr, [sp, #4]
    b6c8:	bl	e1a8 <compare_strings>
    b6cc:	cmp	r0, #0
    b6d0:	blt	b710 <eval_string+0xc44>
    b6d4:	ldr	r0, [fp, #-1188]	; 0xfffffb5c
    b6d8:	ldr	r1, [fp, #-24]	; 0xffffffe8
    b6dc:	str	r0, [r1]
    b6e0:	ldr	r0, [fp, #-1196]	; 0xfffffb54
    b6e4:	ldr	r1, [fp, #-28]	; 0xffffffe4
    b6e8:	str	r0, [r1]
    b6ec:	ldr	r0, [fp, #-1204]	; 0xfffffb4c
    b6f0:	ldr	r1, [fp, #8]
    b6f4:	str	r0, [r1]
    b6f8:	ldr	r0, [fp, #-1200]	; 0xfffffb50
    b6fc:	cmp	r0, #0
    b700:	ble	b70c <eval_string+0xc40>
    b704:	ldr	r0, [fp, #-1208]	; 0xfffffb48
    b708:	bl	0 <free>
    b70c:	b	b74c <eval_string+0xc80>
    b710:	ldr	r0, [fp, #-1192]	; 0xfffffb58
    b714:	ldr	r1, [fp, #-24]	; 0xffffffe8
    b718:	str	r0, [r1]
    b71c:	ldr	r0, [fp, #-1200]	; 0xfffffb50
    b720:	ldr	r1, [fp, #-28]	; 0xffffffe4
    b724:	str	r0, [r1]
    b728:	ldr	r0, [fp, #-1208]	; 0xfffffb48
    b72c:	ldr	r1, [fp, #8]
    b730:	str	r0, [r1]
    b734:	ldr	r0, [fp, #-1196]	; 0xfffffb54
    b738:	cmp	r0, #0
    b73c:	ble	b748 <eval_string+0xc7c>
    b740:	ldr	r0, [fp, #-1204]	; 0xfffffb4c
    b744:	bl	0 <free>
    b748:	b	b74c <eval_string+0xc80>
    b74c:	b	d04c <eval_string+0x2580>
    b750:	ldr	r0, [fp, #-16]
    b754:	ldr	r1, [fp, #-32]	; 0xffffffe0
    b758:	ldr	r1, [r1, #16]
    b75c:	sub	r2, fp, #1216	; 0x4c0
    b760:	bl	6f70 <eval_integer>
    b764:	cmp	r0, #0
    b768:	beq	b778 <eval_string+0xcac>
    b76c:	mvn	r0, #0
    b770:	str	r0, [fp, #-12]
    b774:	b	d054 <eval_string+0x2588>
    b778:	ldr	r0, [fp, #-1212]	; 0xfffffb44
    b77c:	cmn	r0, #1
    b780:	bgt	b7a4 <eval_string+0xcd8>
    b784:	b	b788 <eval_string+0xcbc>
    b788:	mvn	r0, #400	; 0x190
    b78c:	movw	r1, #0
    b790:	movt	r1, #0
    b794:	bl	0 <coda_set_error>
    b798:	mvn	r0, #0
    b79c:	str	r0, [fp, #-12]
    b7a0:	b	d054 <eval_string+0x2588>
    b7a4:	ldr	r0, [fp, #-16]
    b7a8:	ldr	r1, [fp, #-32]	; 0xffffffe0
    b7ac:	ldr	r1, [r1, #20]
    b7b0:	sub	lr, fp, #1024	; 0x400
    b7b4:	sub	r2, lr, #200	; 0xc8
    b7b8:	bl	6f70 <eval_integer>
    b7bc:	cmp	r0, #0
    b7c0:	beq	b7d0 <eval_string+0xd04>
    b7c4:	mvn	r0, #0
    b7c8:	str	r0, [fp, #-12]
    b7cc:	b	d054 <eval_string+0x2588>
    b7d0:	ldr	r0, [fp, #-1224]	; 0xfffffb38
    b7d4:	ldr	r1, [fp, #-1220]	; 0xfffffb3c
    b7d8:	orr	r0, r0, r1
    b7dc:	cmp	r0, #0
    b7e0:	bne	b80c <eval_string+0xd40>
    b7e4:	b	b7e8 <eval_string+0xd1c>
    b7e8:	ldr	r0, [fp, #-24]	; 0xffffffe8
    b7ec:	movw	r1, #0
    b7f0:	str	r1, [r0]
    b7f4:	ldr	r0, [fp, #-28]	; 0xffffffe4
    b7f8:	str	r1, [r0]
    b7fc:	ldr	r0, [fp, #8]
    b800:	str	r1, [r0]
    b804:	str	r1, [fp, #-12]
    b808:	b	d054 <eval_string+0x2588>
    b80c:	ldr	r0, [fp, #-1220]	; 0xfffffb3c
    b810:	cmn	r0, #1
    b814:	bgt	b838 <eval_string+0xd6c>
    b818:	b	b81c <eval_string+0xd50>
    b81c:	mvn	r0, #400	; 0x190
    b820:	movw	r1, #0
    b824:	movt	r1, #0
    b828:	bl	0 <coda_set_error>
    b82c:	mvn	r0, #0
    b830:	str	r0, [fp, #-12]
    b834:	b	d054 <eval_string+0x2588>
    b838:	ldr	r0, [fp, #-16]
    b83c:	ldr	r1, [fp, #-32]	; 0xffffffe0
    b840:	ldr	r1, [r1, #24]
    b844:	ldr	r2, [fp, #-24]	; 0xffffffe8
    b848:	ldr	r3, [fp, #-28]	; 0xffffffe4
    b84c:	ldr	ip, [fp, #8]
    b850:	str	ip, [sp]
    b854:	bl	aacc <eval_string>
    b858:	cmp	r0, #0
    b85c:	beq	b86c <eval_string+0xda0>
    b860:	mvn	r0, #0
    b864:	str	r0, [fp, #-12]
    b868:	b	d054 <eval_string+0x2588>
    b86c:	ldr	r0, [fp, #-28]	; 0xffffffe4
    b870:	ldr	r0, [r0]
    b874:	cmp	r0, #0
    b878:	bne	b888 <eval_string+0xdbc>
    b87c:	movw	r0, #0
    b880:	str	r0, [fp, #-12]
    b884:	b	d054 <eval_string+0x2588>
    b888:	ldr	r0, [fp, #-1216]	; 0xfffffb40
    b88c:	ldr	r1, [fp, #-1212]	; 0xfffffb44
    b890:	ldr	r2, [fp, #-28]	; 0xffffffe4
    b894:	ldr	r2, [r2]
    b898:	subs	r0, r0, r2
    b89c:	sbcs	r1, r1, r2, asr #31
    b8a0:	blt	b8dc <eval_string+0xe10>
    b8a4:	b	b8a8 <eval_string+0xddc>
    b8a8:	ldr	r0, [fp, #-24]	; 0xffffffe8
    b8ac:	movw	r1, #0
    b8b0:	str	r1, [r0]
    b8b4:	ldr	r0, [fp, #-28]	; 0xffffffe4
    b8b8:	str	r1, [r0]
    b8bc:	ldr	r0, [fp, #8]
    b8c0:	ldr	r0, [r0]
    b8c4:	bl	0 <free>
    b8c8:	ldr	r0, [fp, #8]
    b8cc:	movw	r1, #0
    b8d0:	str	r1, [r0]
    b8d4:	str	r1, [fp, #-12]
    b8d8:	b	d054 <eval_string+0x2588>
    b8dc:	ldr	r0, [fp, #-1216]	; 0xfffffb40
    b8e0:	ldr	r1, [fp, #-24]	; 0xffffffe8
    b8e4:	ldr	r2, [r1]
    b8e8:	add	r0, r2, r0
    b8ec:	str	r0, [r1]
    b8f0:	ldr	r0, [fp, #-1216]	; 0xfffffb40
    b8f4:	ldr	r1, [fp, #-28]	; 0xffffffe4
    b8f8:	ldr	r2, [r1]
    b8fc:	sub	r0, r2, r0
    b900:	str	r0, [r1]
    b904:	ldr	r0, [fp, #-1224]	; 0xfffffb38
    b908:	ldr	r1, [fp, #-1220]	; 0xfffffb3c
    b90c:	ldr	r2, [fp, #-28]	; 0xffffffe4
    b910:	ldr	r2, [r2]
    b914:	subs	r0, r0, r2
    b918:	sbcs	r1, r1, r2, asr #31
    b91c:	bge	b930 <eval_string+0xe64>
    b920:	b	b924 <eval_string+0xe58>
    b924:	ldr	r0, [fp, #-1224]	; 0xfffffb38
    b928:	ldr	r1, [fp, #-28]	; 0xffffffe4
    b92c:	str	r0, [r1]
    b930:	b	d04c <eval_string+0x2580>
    b934:	ldr	r0, [fp, #-16]
    b938:	ldr	r1, [fp, #-32]	; 0xffffffe0
    b93c:	ldr	r1, [r1, #16]
    b940:	ldr	r2, [fp, #-24]	; 0xffffffe8
    b944:	ldr	r3, [fp, #-28]	; 0xffffffe4
    b948:	ldr	ip, [fp, #8]
    b94c:	str	ip, [sp]
    b950:	bl	aacc <eval_string>
    b954:	cmp	r0, #0
    b958:	beq	b968 <eval_string+0xe9c>
    b95c:	mvn	r0, #0
    b960:	str	r0, [fp, #-12]
    b964:	b	d054 <eval_string+0x2588>
    b968:	b	b96c <eval_string+0xea0>
    b96c:	ldr	r0, [fp, #-28]	; 0xffffffe4
    b970:	ldr	r0, [r0]
    b974:	cmp	r0, #0
    b978:	movw	r0, #0
    b97c:	str	r0, [sp, #84]	; 0x54
    b980:	ble	b9b0 <eval_string+0xee4>
    b984:	ldr	r0, [fp, #8]
    b988:	ldr	r0, [r0]
    b98c:	ldr	r1, [fp, #-24]	; 0xffffffe8
    b990:	ldr	r1, [r1]
    b994:	add	r0, r0, r1
    b998:	ldrb	r0, [r0]
    b99c:	bl	e3a0 <iswhitespace>
    b9a0:	cmp	r0, #0
    b9a4:	movw	r0, #0
    b9a8:	movne	r0, #1
    b9ac:	str	r0, [sp, #84]	; 0x54
    b9b0:	ldr	r0, [sp, #84]	; 0x54
    b9b4:	tst	r0, #1
    b9b8:	beq	b9e4 <eval_string+0xf18>
    b9bc:	ldr	r0, [fp, #-28]	; 0xffffffe4
    b9c0:	ldr	r1, [r0]
    b9c4:	mvn	r2, #0
    b9c8:	add	r1, r1, r2
    b9cc:	str	r1, [r0]
    b9d0:	ldr	r0, [fp, #-24]	; 0xffffffe8
    b9d4:	ldr	r1, [r0]
    b9d8:	add	r1, r1, #1
    b9dc:	str	r1, [r0]
    b9e0:	b	b96c <eval_string+0xea0>
    b9e4:	b	d04c <eval_string+0x2580>
    b9e8:	ldr	r0, [fp, #-16]
    b9ec:	ldr	r1, [fp, #-32]	; 0xffffffe0
    b9f0:	ldr	r1, [r1, #16]
    b9f4:	ldr	r2, [fp, #-24]	; 0xffffffe8
    b9f8:	ldr	r3, [fp, #-28]	; 0xffffffe4
    b9fc:	ldr	ip, [fp, #8]
    ba00:	str	ip, [sp]
    ba04:	bl	aacc <eval_string>
    ba08:	cmp	r0, #0
    ba0c:	beq	ba1c <eval_string+0xf50>
    ba10:	mvn	r0, #0
    ba14:	str	r0, [fp, #-12]
    ba18:	b	d054 <eval_string+0x2588>
    ba1c:	b	ba20 <eval_string+0xf54>
    ba20:	ldr	r0, [fp, #-28]	; 0xffffffe4
    ba24:	ldr	r0, [r0]
    ba28:	cmp	r0, #0
    ba2c:	movw	r0, #0
    ba30:	str	r0, [sp, #80]	; 0x50
    ba34:	ble	ba74 <eval_string+0xfa8>
    ba38:	ldr	r0, [fp, #8]
    ba3c:	ldr	r0, [r0]
    ba40:	ldr	r1, [fp, #-24]	; 0xffffffe8
    ba44:	ldr	r1, [r1]
    ba48:	ldr	r2, [fp, #-28]	; 0xffffffe4
    ba4c:	ldr	r2, [r2]
    ba50:	add	r1, r1, r2
    ba54:	sub	r1, r1, #1
    ba58:	add	r0, r0, r1
    ba5c:	ldrb	r0, [r0]
    ba60:	bl	e3a0 <iswhitespace>
    ba64:	cmp	r0, #0
    ba68:	movw	r0, #0
    ba6c:	movne	r0, #1
    ba70:	str	r0, [sp, #80]	; 0x50
    ba74:	ldr	r0, [sp, #80]	; 0x50
    ba78:	tst	r0, #1
    ba7c:	beq	ba98 <eval_string+0xfcc>
    ba80:	ldr	r0, [fp, #-28]	; 0xffffffe4
    ba84:	ldr	r1, [r0]
    ba88:	mvn	r2, #0
    ba8c:	add	r1, r1, r2
    ba90:	str	r1, [r0]
    ba94:	b	ba20 <eval_string+0xf54>
    ba98:	b	d04c <eval_string+0x2580>
    ba9c:	ldr	r0, [fp, #-16]
    baa0:	ldr	r1, [fp, #-32]	; 0xffffffe0
    baa4:	ldr	r1, [r1, #16]
    baa8:	ldr	r2, [fp, #-24]	; 0xffffffe8
    baac:	ldr	r3, [fp, #-28]	; 0xffffffe4
    bab0:	ldr	ip, [fp, #8]
    bab4:	str	ip, [sp]
    bab8:	bl	aacc <eval_string>
    babc:	cmp	r0, #0
    bac0:	beq	bad0 <eval_string+0x1004>
    bac4:	mvn	r0, #0
    bac8:	str	r0, [fp, #-12]
    bacc:	b	d054 <eval_string+0x2588>
    bad0:	b	bad4 <eval_string+0x1008>
    bad4:	ldr	r0, [fp, #-28]	; 0xffffffe4
    bad8:	ldr	r0, [r0]
    badc:	cmp	r0, #0
    bae0:	movw	r0, #0
    bae4:	str	r0, [sp, #76]	; 0x4c
    bae8:	ble	bb18 <eval_string+0x104c>
    baec:	ldr	r0, [fp, #8]
    baf0:	ldr	r0, [r0]
    baf4:	ldr	r1, [fp, #-24]	; 0xffffffe8
    baf8:	ldr	r1, [r1]
    bafc:	add	r0, r0, r1
    bb00:	ldrb	r0, [r0]
    bb04:	bl	e3a0 <iswhitespace>
    bb08:	cmp	r0, #0
    bb0c:	movw	r0, #0
    bb10:	movne	r0, #1
    bb14:	str	r0, [sp, #76]	; 0x4c
    bb18:	ldr	r0, [sp, #76]	; 0x4c
    bb1c:	tst	r0, #1
    bb20:	beq	bb4c <eval_string+0x1080>
    bb24:	ldr	r0, [fp, #-28]	; 0xffffffe4
    bb28:	ldr	r1, [r0]
    bb2c:	mvn	r2, #0
    bb30:	add	r1, r1, r2
    bb34:	str	r1, [r0]
    bb38:	ldr	r0, [fp, #-24]	; 0xffffffe8
    bb3c:	ldr	r1, [r0]
    bb40:	add	r1, r1, #1
    bb44:	str	r1, [r0]
    bb48:	b	bad4 <eval_string+0x1008>
    bb4c:	b	bb50 <eval_string+0x1084>
    bb50:	ldr	r0, [fp, #-28]	; 0xffffffe4
    bb54:	ldr	r0, [r0]
    bb58:	cmp	r0, #0
    bb5c:	movw	r0, #0
    bb60:	str	r0, [sp, #72]	; 0x48
    bb64:	ble	bba4 <eval_string+0x10d8>
    bb68:	ldr	r0, [fp, #8]
    bb6c:	ldr	r0, [r0]
    bb70:	ldr	r1, [fp, #-24]	; 0xffffffe8
    bb74:	ldr	r1, [r1]
    bb78:	ldr	r2, [fp, #-28]	; 0xffffffe4
    bb7c:	ldr	r2, [r2]
    bb80:	add	r1, r1, r2
    bb84:	sub	r1, r1, #1
    bb88:	add	r0, r0, r1
    bb8c:	ldrb	r0, [r0]
    bb90:	bl	e3a0 <iswhitespace>
    bb94:	cmp	r0, #0
    bb98:	movw	r0, #0
    bb9c:	movne	r0, #1
    bba0:	str	r0, [sp, #72]	; 0x48
    bba4:	ldr	r0, [sp, #72]	; 0x48
    bba8:	tst	r0, #1
    bbac:	beq	bbc8 <eval_string+0x10fc>
    bbb0:	ldr	r0, [fp, #-28]	; 0xffffffe4
    bbb4:	ldr	r1, [r0]
    bbb8:	mvn	r2, #0
    bbbc:	add	r1, r1, r2
    bbc0:	str	r1, [r0]
    bbc4:	b	bb50 <eval_string+0x1084>
    bbc8:	b	d04c <eval_string+0x2580>
    bbcc:	ldr	r0, [fp, #-16]
    bbd0:	ldr	r0, [r0]
    bbd4:	movw	r1, #0
    bbd8:	cmp	r0, r1
    bbdc:	beq	bbe4 <eval_string+0x1118>
    bbe0:	b	bc04 <eval_string+0x1138>
    bbe4:	movw	r0, #0
    bbe8:	movt	r0, #0
    bbec:	movw	r1, #0
    bbf0:	movt	r1, #0
    bbf4:	movw	r2, #3234	; 0xca2
    bbf8:	movw	r3, #0
    bbfc:	movt	r3, #0
    bc00:	bl	0 <__assert_fail>
    bc04:	ldr	r0, [fp, #-16]
    bc08:	add	r0, r0, #8
    bc0c:	sub	r1, fp, #1744	; 0x6d0
    bc10:	str	r0, [sp, #68]	; 0x44
    bc14:	mov	r0, r1
    bc18:	ldr	r1, [sp, #68]	; 0x44
    bc1c:	movw	r2, #520	; 0x208
    bc20:	bl	0 <memcpy>
    bc24:	ldr	r0, [fp, #-16]
    bc28:	ldr	r1, [fp, #-32]	; 0xffffffe0
    bc2c:	ldr	r1, [r1, #16]
    bc30:	bl	d154 <eval_cursor>
    bc34:	cmp	r0, #0
    bc38:	beq	bc48 <eval_string+0x117c>
    bc3c:	mvn	r0, #0
    bc40:	str	r0, [fp, #-12]
    bc44:	b	d054 <eval_string+0x2588>
    bc48:	ldr	r0, [fp, #-16]
    bc4c:	add	r0, r0, #8
    bc50:	sub	lr, fp, #1024	; 0x400
    bc54:	sub	r1, lr, #724	; 0x2d4
    bc58:	bl	0 <coda_cursor_get_num_elements>
    bc5c:	cmp	r0, #0
    bc60:	beq	bc70 <eval_string+0x11a4>
    bc64:	mvn	r0, #0
    bc68:	str	r0, [fp, #-12]
    bc6c:	b	d054 <eval_string+0x2588>
    bc70:	ldr	r0, [fp, #-24]	; 0xffffffe8
    bc74:	movw	r1, #0
    bc78:	str	r1, [r0]
    bc7c:	ldr	r0, [fp, #-28]	; 0xffffffe4
    bc80:	str	r1, [r0]
    bc84:	ldr	r0, [fp, #8]
    bc88:	str	r1, [r0]
    bc8c:	ldr	r0, [fp, #-1748]	; 0xfffff92c
    bc90:	cmp	r0, #0
    bc94:	ble	be2c <eval_string+0x1360>
    bc98:	ldr	r0, [fp, #-16]
    bc9c:	add	r0, r0, #8
    bca0:	bl	0 <coda_cursor_goto_first_array_element>
    bca4:	cmp	r0, #0
    bca8:	beq	bcb8 <eval_string+0x11ec>
    bcac:	mvn	r0, #0
    bcb0:	str	r0, [fp, #-12]
    bcb4:	b	d054 <eval_string+0x2588>
    bcb8:	movw	r0, #0
    bcbc:	str	r0, [fp, #-1752]	; 0xfffff928
    bcc0:	ldr	r0, [fp, #-1752]	; 0xfffff928
    bcc4:	ldr	r1, [fp, #-1748]	; 0xfffff92c
    bcc8:	cmp	r0, r1
    bccc:	bge	be28 <eval_string+0x135c>
    bcd0:	ldr	r0, [fp, #-16]
    bcd4:	ldr	r1, [fp, #-32]	; 0xffffffe0
    bcd8:	ldr	r1, [r1, #20]
    bcdc:	sub	lr, fp, #1024	; 0x400
    bce0:	sub	r2, lr, #732	; 0x2dc
    bce4:	sub	r3, fp, #1760	; 0x6e0
    bce8:	sub	lr, fp, #1024	; 0x400
    bcec:	sub	ip, lr, #740	; 0x2e4
    bcf0:	str	ip, [sp]
    bcf4:	bl	aacc <eval_string>
    bcf8:	cmp	r0, #0
    bcfc:	beq	bd0c <eval_string+0x1240>
    bd00:	mvn	r0, #0
    bd04:	str	r0, [fp, #-12]
    bd08:	b	d054 <eval_string+0x2588>
    bd0c:	ldr	r0, [fp, #-1760]	; 0xfffff920
    bd10:	cmp	r0, #0
    bd14:	ble	bddc <eval_string+0x1310>
    bd18:	ldr	r0, [fp, #8]
    bd1c:	ldr	r0, [r0]
    bd20:	ldr	r1, [fp, #-28]	; 0xffffffe4
    bd24:	ldr	r1, [r1]
    bd28:	ldr	r2, [fp, #-1760]	; 0xfffff920
    bd2c:	add	r1, r1, r2
    bd30:	add	r1, r1, #1
    bd34:	bl	0 <realloc>
    bd38:	str	r0, [fp, #-1768]	; 0xfffff918
    bd3c:	ldr	r0, [fp, #-1768]	; 0xfffff918
    bd40:	movw	r1, #0
    bd44:	cmp	r0, r1
    bd48:	bne	bd90 <eval_string+0x12c4>
    bd4c:	ldr	r0, [fp, #-28]	; 0xffffffe4
    bd50:	ldr	r0, [r0]
    bd54:	ldr	r1, [fp, #-1760]	; 0xfffff920
    bd58:	add	r2, r0, r1
    bd5c:	mvn	r0, #0
    bd60:	movw	r1, #0
    bd64:	movt	r1, #0
    bd68:	movw	r3, #0
    bd6c:	movt	r3, #0
    bd70:	movw	ip, #3275	; 0xccb
    bd74:	str	ip, [sp]
    bd78:	bl	0 <coda_set_error>
    bd7c:	ldr	r0, [fp, #-1764]	; 0xfffff91c
    bd80:	bl	0 <free>
    bd84:	mvn	r0, #0
    bd88:	str	r0, [fp, #-12]
    bd8c:	b	d054 <eval_string+0x2588>
    bd90:	ldr	r0, [fp, #-1768]	; 0xfffff918
    bd94:	ldr	r1, [fp, #-28]	; 0xffffffe4
    bd98:	ldr	r1, [r1]
    bd9c:	add	r0, r0, r1
    bda0:	ldr	r1, [fp, #-1764]	; 0xfffff91c
    bda4:	ldr	r2, [fp, #-1756]	; 0xfffff924
    bda8:	add	r1, r1, r2
    bdac:	ldr	r2, [fp, #-1760]	; 0xfffff920
    bdb0:	bl	0 <memcpy>
    bdb4:	ldr	r0, [fp, #-1764]	; 0xfffff91c
    bdb8:	bl	0 <free>
    bdbc:	ldr	r0, [fp, #-1760]	; 0xfffff920
    bdc0:	ldr	r1, [fp, #-28]	; 0xffffffe4
    bdc4:	ldr	r2, [r1]
    bdc8:	add	r0, r2, r0
    bdcc:	str	r0, [r1]
    bdd0:	ldr	r0, [fp, #-1768]	; 0xfffff918
    bdd4:	ldr	r1, [fp, #8]
    bdd8:	str	r0, [r1]
    bddc:	ldr	r0, [fp, #-1752]	; 0xfffff928
    bde0:	ldr	r1, [fp, #-1748]	; 0xfffff92c
    bde4:	sub	r1, r1, #1
    bde8:	cmp	r0, r1
    bdec:	bge	be14 <eval_string+0x1348>
    bdf0:	ldr	r0, [fp, #-16]
    bdf4:	add	r0, r0, #8
    bdf8:	bl	0 <coda_cursor_goto_next_array_element>
    bdfc:	cmp	r0, #0
    be00:	beq	be10 <eval_string+0x1344>
    be04:	mvn	r0, #0
    be08:	str	r0, [fp, #-12]
    be0c:	b	d054 <eval_string+0x2588>
    be10:	b	be14 <eval_string+0x1348>
    be14:	b	be18 <eval_string+0x134c>
    be18:	ldr	r0, [fp, #-1752]	; 0xfffff928
    be1c:	add	r0, r0, #1
    be20:	str	r0, [fp, #-1752]	; 0xfffff928
    be24:	b	bcc0 <eval_string+0x11f4>
    be28:	b	be2c <eval_string+0x1360>
    be2c:	ldr	r0, [fp, #-16]
    be30:	add	r0, r0, #8
    be34:	sub	r1, fp, #1744	; 0x6d0
    be38:	movw	r2, #520	; 0x208
    be3c:	bl	0 <memcpy>
    be40:	b	d04c <eval_string+0x2580>
    be44:	ldr	r0, [fp, #-16]
    be48:	ldr	r0, [r0]
    be4c:	movw	r1, #0
    be50:	cmp	r0, r1
    be54:	beq	be5c <eval_string+0x1390>
    be58:	b	be7c <eval_string+0x13b0>
    be5c:	movw	r0, #0
    be60:	movt	r0, #0
    be64:	movw	r1, #0
    be68:	movt	r1, #0
    be6c:	movw	r2, #3301	; 0xce5
    be70:	movw	r3, #0
    be74:	movt	r3, #0
    be78:	bl	0 <__assert_fail>
    be7c:	ldr	r0, [fp, #-16]
    be80:	add	r0, r0, #8
    be84:	add	lr, sp, #1024	; 0x400
    be88:	add	r1, lr, #488	; 0x1e8
    be8c:	str	r0, [sp, #64]	; 0x40
    be90:	mov	r0, r1
    be94:	ldr	r1, [sp, #64]	; 0x40
    be98:	movw	r2, #520	; 0x208
    be9c:	bl	0 <memcpy>
    bea0:	ldr	r0, [fp, #-16]
    bea4:	ldr	r1, [fp, #-32]	; 0xffffffe0
    bea8:	ldr	r1, [r1, #16]
    beac:	bl	d154 <eval_cursor>
    beb0:	cmp	r0, #0
    beb4:	beq	bec4 <eval_string+0x13f8>
    beb8:	mvn	r0, #0
    bebc:	str	r0, [fp, #-12]
    bec0:	b	d054 <eval_string+0x2588>
    bec4:	ldr	r0, [fp, #-16]
    bec8:	add	r0, r0, #8
    becc:	add	lr, sp, #1024	; 0x400
    bed0:	add	r1, lr, #484	; 0x1e4
    bed4:	bl	0 <coda_cursor_get_num_elements>
    bed8:	cmp	r0, #0
    bedc:	beq	beec <eval_string+0x1420>
    bee0:	mvn	r0, #0
    bee4:	str	r0, [fp, #-12]
    bee8:	b	d054 <eval_string+0x2588>
    beec:	ldr	r0, [fp, #-24]	; 0xffffffe8
    bef0:	movw	r1, #0
    bef4:	str	r1, [r0]
    bef8:	ldr	r0, [fp, #-28]	; 0xffffffe4
    befc:	str	r1, [r0]
    bf00:	ldr	r0, [fp, #8]
    bf04:	str	r1, [r0]
    bf08:	ldr	r0, [sp, #1508]	; 0x5e4
    bf0c:	cmp	r0, #0
    bf10:	ble	c06c <eval_string+0x15a0>
    bf14:	ldr	r0, [fp, #-16]
    bf18:	add	r0, r0, #8
    bf1c:	bl	0 <coda_cursor_goto_first_array_element>
    bf20:	cmp	r0, #0
    bf24:	beq	bf34 <eval_string+0x1468>
    bf28:	mvn	r0, #0
    bf2c:	str	r0, [fp, #-12]
    bf30:	b	d054 <eval_string+0x2588>
    bf34:	movw	r0, #0
    bf38:	str	r0, [sp, #1504]	; 0x5e0
    bf3c:	ldr	r0, [sp, #1504]	; 0x5e0
    bf40:	ldr	r1, [sp, #1508]	; 0x5e4
    bf44:	cmp	r0, r1
    bf48:	bge	c068 <eval_string+0x159c>
    bf4c:	ldr	r0, [fp, #-16]
    bf50:	ldr	r1, [fp, #-32]	; 0xffffffe0
    bf54:	ldr	r1, [r1, #20]
    bf58:	add	lr, sp, #1024	; 0x400
    bf5c:	add	r2, lr, #476	; 0x1dc
    bf60:	add	lr, sp, #1024	; 0x400
    bf64:	add	r3, lr, #472	; 0x1d8
    bf68:	add	lr, sp, #1024	; 0x400
    bf6c:	add	ip, lr, #468	; 0x1d4
    bf70:	str	ip, [sp]
    bf74:	bl	aacc <eval_string>
    bf78:	cmp	r0, #0
    bf7c:	beq	bf8c <eval_string+0x14c0>
    bf80:	mvn	r0, #0
    bf84:	str	r0, [fp, #-12]
    bf88:	b	d054 <eval_string+0x2588>
    bf8c:	ldr	r0, [sp, #1500]	; 0x5dc
    bf90:	ldr	r1, [sp, #1496]	; 0x5d8
    bf94:	ldr	r2, [sp, #1492]	; 0x5d4
    bf98:	ldr	r3, [fp, #-24]	; 0xffffffe8
    bf9c:	ldr	r3, [r3]
    bfa0:	ldr	ip, [fp, #-28]	; 0xffffffe4
    bfa4:	ldr	ip, [ip]
    bfa8:	ldr	lr, [fp, #8]
    bfac:	ldr	lr, [lr]
    bfb0:	str	ip, [sp]
    bfb4:	str	lr, [sp, #4]
    bfb8:	bl	e1a8 <compare_strings>
    bfbc:	cmp	r0, #0
    bfc0:	bge	c004 <eval_string+0x1538>
    bfc4:	ldr	r0, [fp, #-28]	; 0xffffffe4
    bfc8:	ldr	r0, [r0]
    bfcc:	cmp	r0, #0
    bfd0:	ble	bfdc <eval_string+0x1510>
    bfd4:	ldr	r0, [fp, #8]
    bfd8:	bl	0 <free>
    bfdc:	ldr	r0, [sp, #1500]	; 0x5dc
    bfe0:	ldr	r1, [fp, #-24]	; 0xffffffe8
    bfe4:	str	r0, [r1]
    bfe8:	ldr	r0, [sp, #1496]	; 0x5d8
    bfec:	ldr	r1, [fp, #-28]	; 0xffffffe4
    bff0:	str	r0, [r1]
    bff4:	ldr	r0, [sp, #1492]	; 0x5d4
    bff8:	ldr	r1, [fp, #8]
    bffc:	str	r0, [r1]
    c000:	b	c01c <eval_string+0x1550>
    c004:	ldr	r0, [sp, #1496]	; 0x5d8
    c008:	cmp	r0, #0
    c00c:	ble	c018 <eval_string+0x154c>
    c010:	ldr	r0, [sp, #1492]	; 0x5d4
    c014:	bl	0 <free>
    c018:	b	c01c <eval_string+0x1550>
    c01c:	ldr	r0, [sp, #1504]	; 0x5e0
    c020:	ldr	r1, [sp, #1508]	; 0x5e4
    c024:	sub	r1, r1, #1
    c028:	cmp	r0, r1
    c02c:	bge	c054 <eval_string+0x1588>
    c030:	ldr	r0, [fp, #-16]
    c034:	add	r0, r0, #8
    c038:	bl	0 <coda_cursor_goto_next_array_element>
    c03c:	cmp	r0, #0
    c040:	beq	c050 <eval_string+0x1584>
    c044:	mvn	r0, #0
    c048:	str	r0, [fp, #-12]
    c04c:	b	d054 <eval_string+0x2588>
    c050:	b	c054 <eval_string+0x1588>
    c054:	b	c058 <eval_string+0x158c>
    c058:	ldr	r0, [sp, #1504]	; 0x5e0
    c05c:	add	r0, r0, #1
    c060:	str	r0, [sp, #1504]	; 0x5e0
    c064:	b	bf3c <eval_string+0x1470>
    c068:	b	c06c <eval_string+0x15a0>
    c06c:	ldr	r0, [fp, #-16]
    c070:	add	r0, r0, #8
    c074:	add	lr, sp, #1024	; 0x400
    c078:	add	r1, lr, #488	; 0x1e8
    c07c:	movw	r2, #520	; 0x208
    c080:	bl	0 <memcpy>
    c084:	b	d04c <eval_string+0x2580>
    c088:	ldr	r0, [fp, #-16]
    c08c:	ldr	r0, [r0]
    c090:	movw	r1, #0
    c094:	cmp	r0, r1
    c098:	beq	c0a0 <eval_string+0x15d4>
    c09c:	b	c0c0 <eval_string+0x15f4>
    c0a0:	movw	r0, #0
    c0a4:	movt	r0, #0
    c0a8:	movw	r1, #0
    c0ac:	movt	r1, #0
    c0b0:	movw	r2, #3363	; 0xd23
    c0b4:	movw	r3, #0
    c0b8:	movt	r3, #0
    c0bc:	bl	0 <__assert_fail>
    c0c0:	ldr	r0, [fp, #-16]
    c0c4:	add	r0, r0, #8
    c0c8:	add	r1, sp, #968	; 0x3c8
    c0cc:	str	r0, [sp, #60]	; 0x3c
    c0d0:	mov	r0, r1
    c0d4:	ldr	r1, [sp, #60]	; 0x3c
    c0d8:	movw	r2, #520	; 0x208
    c0dc:	bl	0 <memcpy>
    c0e0:	ldr	r0, [fp, #-16]
    c0e4:	ldr	r1, [fp, #-32]	; 0xffffffe0
    c0e8:	ldr	r1, [r1, #16]
    c0ec:	bl	d154 <eval_cursor>
    c0f0:	cmp	r0, #0
    c0f4:	beq	c104 <eval_string+0x1638>
    c0f8:	mvn	r0, #0
    c0fc:	str	r0, [fp, #-12]
    c100:	b	d054 <eval_string+0x2588>
    c104:	ldr	r0, [fp, #-16]
    c108:	add	r0, r0, #8
    c10c:	add	r1, sp, #964	; 0x3c4
    c110:	bl	0 <coda_cursor_get_num_elements>
    c114:	cmp	r0, #0
    c118:	beq	c128 <eval_string+0x165c>
    c11c:	mvn	r0, #0
    c120:	str	r0, [fp, #-12]
    c124:	b	d054 <eval_string+0x2588>
    c128:	ldr	r0, [fp, #-24]	; 0xffffffe8
    c12c:	movw	r1, #0
    c130:	str	r1, [r0]
    c134:	ldr	r0, [fp, #-28]	; 0xffffffe4
    c138:	str	r1, [r0]
    c13c:	ldr	r0, [fp, #8]
    c140:	str	r1, [r0]
    c144:	ldr	r0, [sp, #964]	; 0x3c4
    c148:	cmp	r0, #0
    c14c:	ble	c2a0 <eval_string+0x17d4>
    c150:	ldr	r0, [fp, #-16]
    c154:	add	r0, r0, #8
    c158:	bl	0 <coda_cursor_goto_first_array_element>
    c15c:	cmp	r0, #0
    c160:	beq	c170 <eval_string+0x16a4>
    c164:	mvn	r0, #0
    c168:	str	r0, [fp, #-12]
    c16c:	b	d054 <eval_string+0x2588>
    c170:	movw	r0, #0
    c174:	str	r0, [sp, #960]	; 0x3c0
    c178:	ldr	r0, [sp, #960]	; 0x3c0
    c17c:	ldr	r1, [sp, #964]	; 0x3c4
    c180:	cmp	r0, r1
    c184:	bge	c29c <eval_string+0x17d0>
    c188:	ldr	r0, [fp, #-16]
    c18c:	ldr	r1, [fp, #-32]	; 0xffffffe0
    c190:	ldr	r1, [r1, #20]
    c194:	add	r2, sp, #956	; 0x3bc
    c198:	add	r3, sp, #952	; 0x3b8
    c19c:	add	ip, sp, #948	; 0x3b4
    c1a0:	str	ip, [sp]
    c1a4:	bl	aacc <eval_string>
    c1a8:	cmp	r0, #0
    c1ac:	beq	c1bc <eval_string+0x16f0>
    c1b0:	mvn	r0, #0
    c1b4:	str	r0, [fp, #-12]
    c1b8:	b	d054 <eval_string+0x2588>
    c1bc:	ldr	r0, [sp, #956]	; 0x3bc
    c1c0:	ldr	r1, [sp, #952]	; 0x3b8
    c1c4:	ldr	r2, [sp, #948]	; 0x3b4
    c1c8:	ldr	r3, [fp, #-24]	; 0xffffffe8
    c1cc:	ldr	r3, [r3]
    c1d0:	ldr	ip, [fp, #-28]	; 0xffffffe4
    c1d4:	ldr	ip, [ip]
    c1d8:	ldr	lr, [fp, #8]
    c1dc:	ldr	lr, [lr]
    c1e0:	str	ip, [sp]
    c1e4:	str	lr, [sp, #4]
    c1e8:	bl	e1a8 <compare_strings>
    c1ec:	cmp	r0, #0
    c1f0:	ble	c238 <eval_string+0x176c>
    c1f4:	ldr	r0, [fp, #-28]	; 0xffffffe4
    c1f8:	ldr	r0, [r0]
    c1fc:	cmp	r0, #0
    c200:	ble	c210 <eval_string+0x1744>
    c204:	ldr	r0, [fp, #8]
    c208:	ldr	r0, [r0]
    c20c:	bl	0 <free>
    c210:	ldr	r0, [sp, #956]	; 0x3bc
    c214:	ldr	r1, [fp, #-24]	; 0xffffffe8
    c218:	str	r0, [r1]
    c21c:	ldr	r0, [sp, #952]	; 0x3b8
    c220:	ldr	r1, [fp, #-28]	; 0xffffffe4
    c224:	str	r0, [r1]
    c228:	ldr	r0, [sp, #948]	; 0x3b4
    c22c:	ldr	r1, [fp, #8]
    c230:	str	r0, [r1]
    c234:	b	c250 <eval_string+0x1784>
    c238:	ldr	r0, [sp, #952]	; 0x3b8
    c23c:	cmp	r0, #0
    c240:	ble	c24c <eval_string+0x1780>
    c244:	ldr	r0, [sp, #948]	; 0x3b4
    c248:	bl	0 <free>
    c24c:	b	c250 <eval_string+0x1784>
    c250:	ldr	r0, [sp, #960]	; 0x3c0
    c254:	ldr	r1, [sp, #964]	; 0x3c4
    c258:	sub	r1, r1, #1
    c25c:	cmp	r0, r1
    c260:	bge	c288 <eval_string+0x17bc>
    c264:	ldr	r0, [fp, #-16]
    c268:	add	r0, r0, #8
    c26c:	bl	0 <coda_cursor_goto_next_array_element>
    c270:	cmp	r0, #0
    c274:	beq	c284 <eval_string+0x17b8>
    c278:	mvn	r0, #0
    c27c:	str	r0, [fp, #-12]
    c280:	b	d054 <eval_string+0x2588>
    c284:	b	c288 <eval_string+0x17bc>
    c288:	b	c28c <eval_string+0x17c0>
    c28c:	ldr	r0, [sp, #960]	; 0x3c0
    c290:	add	r0, r0, #1
    c294:	str	r0, [sp, #960]	; 0x3c0
    c298:	b	c178 <eval_string+0x16ac>
    c29c:	b	c2a0 <eval_string+0x17d4>
    c2a0:	ldr	r0, [fp, #-16]
    c2a4:	add	r0, r0, #8
    c2a8:	add	r1, sp, #968	; 0x3c8
    c2ac:	movw	r2, #520	; 0x208
    c2b0:	bl	0 <memcpy>
    c2b4:	b	d04c <eval_string+0x2580>
    c2b8:	ldr	r0, [fp, #-16]
    c2bc:	ldr	r1, [fp, #-32]	; 0xffffffe0
    c2c0:	ldr	r1, [r1, #16]
    c2c4:	add	r2, sp, #944	; 0x3b0
    c2c8:	bl	5170 <eval_boolean>
    c2cc:	cmp	r0, #0
    c2d0:	beq	c2e0 <eval_string+0x1814>
    c2d4:	mvn	r0, #0
    c2d8:	str	r0, [fp, #-12]
    c2dc:	b	d054 <eval_string+0x2588>
    c2e0:	ldr	r0, [sp, #944]	; 0x3b0
    c2e4:	cmp	r0, #0
    c2e8:	beq	c324 <eval_string+0x1858>
    c2ec:	ldr	r0, [fp, #-16]
    c2f0:	ldr	r1, [fp, #-32]	; 0xffffffe0
    c2f4:	ldr	r1, [r1, #20]
    c2f8:	ldr	r2, [fp, #-24]	; 0xffffffe8
    c2fc:	ldr	r3, [fp, #-28]	; 0xffffffe4
    c300:	ldr	ip, [fp, #8]
    c304:	str	ip, [sp]
    c308:	bl	aacc <eval_string>
    c30c:	cmp	r0, #0
    c310:	beq	c320 <eval_string+0x1854>
    c314:	mvn	r0, #0
    c318:	str	r0, [fp, #-12]
    c31c:	b	d054 <eval_string+0x2588>
    c320:	b	c35c <eval_string+0x1890>
    c324:	ldr	r0, [fp, #-16]
    c328:	ldr	r1, [fp, #-32]	; 0xffffffe0
    c32c:	ldr	r1, [r1, #24]
    c330:	ldr	r2, [fp, #-24]	; 0xffffffe8
    c334:	ldr	r3, [fp, #-28]	; 0xffffffe4
    c338:	ldr	ip, [fp, #8]
    c33c:	str	ip, [sp]
    c340:	bl	aacc <eval_string>
    c344:	cmp	r0, #0
    c348:	beq	c358 <eval_string+0x188c>
    c34c:	mvn	r0, #0
    c350:	str	r0, [fp, #-12]
    c354:	b	d054 <eval_string+0x2588>
    c358:	b	c35c <eval_string+0x1890>
    c35c:	b	d04c <eval_string+0x2580>
    c360:	ldr	r0, [fp, #-16]
    c364:	ldr	r0, [r0]
    c368:	movw	r1, #0
    c36c:	cmp	r0, r1
    c370:	beq	c378 <eval_string+0x18ac>
    c374:	b	c398 <eval_string+0x18cc>
    c378:	movw	r0, #0
    c37c:	movt	r0, #0
    c380:	movw	r1, #0
    c384:	movt	r1, #0
    c388:	movw	r2, #3449	; 0xd79
    c38c:	movw	r3, #0
    c390:	movt	r3, #0
    c394:	bl	0 <__assert_fail>
    c398:	ldr	r0, [fp, #-16]
    c39c:	ldr	r0, [r0]
    c3a0:	ldr	r0, [r0]
    c3a4:	add	r1, sp, #940	; 0x3ac
    c3a8:	bl	0 <coda_get_product_filename>
    c3ac:	cmp	r0, #0
    c3b0:	beq	c3c0 <eval_string+0x18f4>
    c3b4:	mvn	r0, #0
    c3b8:	str	r0, [fp, #-12]
    c3bc:	b	d054 <eval_string+0x2588>
    c3c0:	ldr	r0, [sp, #940]	; 0x3ac
    c3c4:	str	r0, [sp, #936]	; 0x3a8
    c3c8:	ldr	r0, [sp, #940]	; 0x3ac
    c3cc:	ldrb	r0, [r0]
    c3d0:	cmp	r0, #0
    c3d4:	beq	c414 <eval_string+0x1948>
    c3d8:	ldr	r0, [sp, #940]	; 0x3ac
    c3dc:	ldrb	r0, [r0]
    c3e0:	cmp	r0, #47	; 0x2f
    c3e4:	beq	c3f8 <eval_string+0x192c>
    c3e8:	ldr	r0, [sp, #940]	; 0x3ac
    c3ec:	ldrb	r0, [r0]
    c3f0:	cmp	r0, #92	; 0x5c
    c3f4:	bne	c404 <eval_string+0x1938>
    c3f8:	ldr	r0, [sp, #940]	; 0x3ac
    c3fc:	add	r0, r0, #1
    c400:	str	r0, [sp, #936]	; 0x3a8
    c404:	ldr	r0, [sp, #940]	; 0x3ac
    c408:	add	r0, r0, #1
    c40c:	str	r0, [sp, #940]	; 0x3ac
    c410:	b	c3c8 <eval_string+0x18fc>
    c414:	ldr	r0, [fp, #-24]	; 0xffffffe8
    c418:	movw	r1, #0
    c41c:	str	r1, [r0]
    c420:	ldr	r0, [sp, #936]	; 0x3a8
    c424:	bl	0 <strlen>
    c428:	ldr	r1, [fp, #-28]	; 0xffffffe4
    c42c:	str	r0, [r1]
    c430:	ldr	r0, [fp, #-28]	; 0xffffffe4
    c434:	ldr	r0, [r0]
    c438:	add	r0, r0, #1
    c43c:	bl	0 <malloc>
    c440:	ldr	r1, [fp, #8]
    c444:	str	r0, [r1]
    c448:	ldr	r0, [fp, #8]
    c44c:	ldr	r0, [r0]
    c450:	movw	r1, #0
    c454:	cmp	r0, r1
    c458:	bne	c490 <eval_string+0x19c4>
    c45c:	ldr	r0, [fp, #-28]	; 0xffffffe4
    c460:	ldr	r2, [r0]
    c464:	mvn	r0, #0
    c468:	movw	r1, #0
    c46c:	movt	r1, #0
    c470:	movw	r3, #0
    c474:	movt	r3, #0
    c478:	movw	ip, #3469	; 0xd8d
    c47c:	str	ip, [sp]
    c480:	bl	0 <coda_set_error>
    c484:	mvn	r0, #0
    c488:	str	r0, [fp, #-12]
    c48c:	b	d054 <eval_string+0x2588>
    c490:	ldr	r0, [fp, #8]
    c494:	ldr	r0, [r0]
    c498:	ldr	r1, [sp, #936]	; 0x3a8
    c49c:	ldr	r2, [fp, #-28]	; 0xffffffe4
    c4a0:	ldr	r2, [r2]
    c4a4:	bl	0 <memcpy>
    c4a8:	b	d04c <eval_string+0x2580>
    c4ac:	movw	r0, #0
    c4b0:	str	r0, [sp, #712]	; 0x2c8
    c4b4:	str	r0, [sp, #704]	; 0x2c0
    c4b8:	ldr	r0, [fp, #-16]
    c4bc:	ldr	r1, [fp, #-32]	; 0xffffffe0
    c4c0:	ldr	r1, [r1, #16]
    c4c4:	add	r2, sp, #720	; 0x2d0
    c4c8:	add	r3, sp, #716	; 0x2cc
    c4cc:	add	ip, sp, #712	; 0x2c8
    c4d0:	str	ip, [sp]
    c4d4:	bl	aacc <eval_string>
    c4d8:	cmp	r0, #0
    c4dc:	beq	c4ec <eval_string+0x1a20>
    c4e0:	mvn	r0, #0
    c4e4:	str	r0, [fp, #-12]
    c4e8:	b	d054 <eval_string+0x2588>
    c4ec:	ldr	r0, [fp, #-16]
    c4f0:	ldr	r1, [fp, #-32]	; 0xffffffe0
    c4f4:	ldr	r1, [r1, #20]
    c4f8:	add	r2, sp, #732	; 0x2dc
    c4fc:	add	r3, sp, #728	; 0x2d8
    c500:	add	ip, sp, #724	; 0x2d4
    c504:	str	ip, [sp]
    c508:	bl	aacc <eval_string>
    c50c:	cmp	r0, #0
    c510:	beq	c538 <eval_string+0x1a6c>
    c514:	ldr	r0, [sp, #712]	; 0x2c8
    c518:	movw	r1, #0
    c51c:	cmp	r0, r1
    c520:	beq	c52c <eval_string+0x1a60>
    c524:	ldr	r0, [sp, #712]	; 0x2c8
    c528:	bl	0 <free>
    c52c:	mvn	r0, #0
    c530:	str	r0, [fp, #-12]
    c534:	b	d054 <eval_string+0x2588>
    c538:	ldr	r0, [sp, #716]	; 0x2cc
    c53c:	cmp	r0, #0
    c540:	ble	c58c <eval_string+0x1ac0>
    c544:	ldr	r0, [sp, #712]	; 0x2c8
    c548:	ldr	r1, [sp, #720]	; 0x2d0
    c54c:	ldr	r2, [sp, #716]	; 0x2cc
    c550:	add	r1, r1, r2
    c554:	add	r0, r0, r1
    c558:	movw	r1, #0
    c55c:	strb	r1, [r0]
    c560:	ldr	r0, [sp, #712]	; 0x2c8
    c564:	ldr	r1, [sp, #720]	; 0x2d0
    c568:	add	r0, r0, r1
    c56c:	movw	r1, #36	; 0x24
    c570:	add	r2, sp, #740	; 0x2e4
    c574:	add	r3, sp, #736	; 0x2e0
    c578:	movw	ip, #0
    c57c:	str	ip, [sp]
    c580:	bl	0 <coda_pcre_compile>
    c584:	str	r0, [sp, #708]	; 0x2c4
    c588:	b	c5b0 <eval_string+0x1ae4>
    c58c:	movw	r0, #0
    c590:	movt	r0, #0
    c594:	movw	r1, #36	; 0x24
    c598:	add	r2, sp, #740	; 0x2e4
    c59c:	add	r3, sp, #736	; 0x2e0
    c5a0:	movw	ip, #0
    c5a4:	str	ip, [sp]
    c5a8:	bl	0 <coda_pcre_compile>
    c5ac:	str	r0, [sp, #708]	; 0x2c4
    c5b0:	ldr	r0, [sp, #712]	; 0x2c8
    c5b4:	movw	r1, #0
    c5b8:	cmp	r0, r1
    c5bc:	beq	c5c8 <eval_string+0x1afc>
    c5c0:	ldr	r0, [sp, #712]	; 0x2c8
    c5c4:	bl	0 <free>
    c5c8:	ldr	r0, [sp, #708]	; 0x2c4
    c5cc:	movw	r1, #0
    c5d0:	cmp	r0, r1
    c5d4:	bne	c614 <eval_string+0x1b48>
    c5d8:	ldr	r2, [sp, #740]	; 0x2e4
    c5dc:	ldr	r3, [sp, #736]	; 0x2e0
    c5e0:	mvn	r0, #400	; 0x190
    c5e4:	movw	r1, #0
    c5e8:	movt	r1, #0
    c5ec:	bl	0 <coda_set_error>
    c5f0:	ldr	r0, [sp, #724]	; 0x2d4
    c5f4:	movw	r1, #0
    c5f8:	cmp	r0, r1
    c5fc:	beq	c608 <eval_string+0x1b3c>
    c600:	ldr	r0, [sp, #724]	; 0x2d4
    c604:	bl	0 <free>
    c608:	mvn	r0, #0
    c60c:	str	r0, [fp, #-12]
    c610:	b	d054 <eval_string+0x2588>
    c614:	ldr	r0, [fp, #-32]	; 0xffffffe0
    c618:	ldr	r0, [r0, #24]
    c61c:	ldr	r0, [r0, #4]
    c620:	cmp	r0, #1
    c624:	bne	c67c <eval_string+0x1bb0>
    c628:	ldr	r0, [fp, #-16]
    c62c:	ldr	r1, [fp, #-32]	; 0xffffffe0
    c630:	ldr	r1, [r1, #24]
    c634:	add	r2, sp, #688	; 0x2b0
    c638:	bl	6f70 <eval_integer>
    c63c:	cmp	r0, #0
    c640:	beq	c670 <eval_string+0x1ba4>
    c644:	movw	r0, #0
    c648:	movt	r0, #0
    c64c:	ldr	r0, [r0]
    c650:	ldr	r1, [sp, #708]	; 0x2c4
    c654:	str	r0, [sp, #56]	; 0x38
    c658:	mov	r0, r1
    c65c:	ldr	r1, [sp, #56]	; 0x38
    c660:	blx	r1
    c664:	mvn	r0, #0
    c668:	str	r0, [fp, #-12]
    c66c:	b	d054 <eval_string+0x2588>
    c670:	ldr	r0, [sp, #688]	; 0x2b0
    c674:	str	r0, [sp, #704]	; 0x2c0
    c678:	b	c79c <eval_string+0x1cd0>
    c67c:	ldr	r0, [fp, #-16]
    c680:	ldr	r1, [fp, #-32]	; 0xffffffe0
    c684:	ldr	r1, [r1, #24]
    c688:	add	r2, sp, #684	; 0x2ac
    c68c:	add	r3, sp, #680	; 0x2a8
    c690:	add	ip, sp, #676	; 0x2a4
    c694:	str	ip, [sp]
    c698:	bl	aacc <eval_string>
    c69c:	cmp	r0, #0
    c6a0:	beq	c6d0 <eval_string+0x1c04>
    c6a4:	movw	r0, #0
    c6a8:	movt	r0, #0
    c6ac:	ldr	r0, [r0]
    c6b0:	ldr	r1, [sp, #708]	; 0x2c4
    c6b4:	str	r0, [sp, #52]	; 0x34
    c6b8:	mov	r0, r1
    c6bc:	ldr	r1, [sp, #52]	; 0x34
    c6c0:	blx	r1
    c6c4:	mvn	r0, #0
    c6c8:	str	r0, [fp, #-12]
    c6cc:	b	d054 <eval_string+0x2588>
    c6d0:	ldr	r0, [fp, #-28]	; 0xffffffe4
    c6d4:	movw	r1, #0
    c6d8:	cmp	r0, r1
    c6dc:	bne	c734 <eval_string+0x1c68>
    c6e0:	mvn	r0, #400	; 0x190
    c6e4:	movw	r1, #0
    c6e8:	movt	r1, #0
    c6ec:	bl	0 <coda_set_error>
    c6f0:	ldr	r0, [sp, #676]	; 0x2a4
    c6f4:	movw	r1, #0
    c6f8:	cmp	r0, r1
    c6fc:	beq	c708 <eval_string+0x1c3c>
    c700:	ldr	r0, [sp, #676]	; 0x2a4
    c704:	bl	0 <free>
    c708:	movw	r0, #0
    c70c:	movt	r0, #0
    c710:	ldr	r0, [r0]
    c714:	ldr	r1, [sp, #708]	; 0x2c4
    c718:	str	r0, [sp, #48]	; 0x30
    c71c:	mov	r0, r1
    c720:	ldr	r1, [sp, #48]	; 0x30
    c724:	blx	r1
    c728:	mvn	r0, #0
    c72c:	str	r0, [fp, #-12]
    c730:	b	d054 <eval_string+0x2588>
    c734:	ldr	r0, [sp, #708]	; 0x2c4
    c738:	ldr	r1, [sp, #676]	; 0x2a4
    c73c:	bl	0 <coda_pcre_get_stringnumber>
    c740:	str	r0, [sp, #704]	; 0x2c0
    c744:	ldr	r0, [sp, #704]	; 0x2c0
    c748:	cmp	r0, #0
    c74c:	bge	c794 <eval_string+0x1cc8>
    c750:	mvn	r0, #400	; 0x190
    c754:	movw	r1, #0
    c758:	movt	r1, #0
    c75c:	bl	0 <coda_set_error>
    c760:	ldr	r0, [sp, #676]	; 0x2a4
    c764:	bl	0 <free>
    c768:	movw	r0, #0
    c76c:	movt	r0, #0
    c770:	ldr	r0, [r0]
    c774:	ldr	r1, [sp, #708]	; 0x2c4
    c778:	str	r0, [sp, #44]	; 0x2c
    c77c:	mov	r0, r1
    c780:	ldr	r1, [sp, #44]	; 0x2c
    c784:	blx	r1
    c788:	mvn	r0, #0
    c78c:	str	r0, [fp, #-12]
    c790:	b	d054 <eval_string+0x2588>
    c794:	ldr	r0, [sp, #676]	; 0x2a4
    c798:	bl	0 <free>
    c79c:	ldr	r0, [sp, #724]	; 0x2d4
    c7a0:	movw	r1, #0
    c7a4:	cmp	r0, r1
    c7a8:	bne	c818 <eval_string+0x1d4c>
    c7ac:	movw	r0, #0
    c7b0:	movt	r0, #0
    c7b4:	bl	0 <strdup>
    c7b8:	str	r0, [sp, #724]	; 0x2d4
    c7bc:	ldr	r0, [sp, #724]	; 0x2d4
    c7c0:	movw	r1, #0
    c7c4:	cmp	r0, r1
    c7c8:	bne	c814 <eval_string+0x1d48>
    c7cc:	mvn	r0, #0
    c7d0:	movw	r1, #0
    c7d4:	movt	r1, #0
    c7d8:	movw	r2, #0
    c7dc:	movt	r2, #0
    c7e0:	movw	r3, #3583	; 0xdff
    c7e4:	bl	0 <coda_set_error>
    c7e8:	movw	r0, #0
    c7ec:	movt	r0, #0
    c7f0:	ldr	r0, [r0]
    c7f4:	ldr	r1, [sp, #708]	; 0x2c4
    c7f8:	str	r0, [sp, #40]	; 0x28
    c7fc:	mov	r0, r1
    c800:	ldr	r1, [sp, #40]	; 0x28
    c804:	blx	r1
    c808:	mvn	r0, #0
    c80c:	str	r0, [fp, #-12]
    c810:	b	d054 <eval_string+0x2588>
    c814:	b	c818 <eval_string+0x1d4c>
    c818:	add	r0, sp, #744	; 0x2e8
    c81c:	ldr	r1, [sp, #708]	; 0x2c4
    c820:	ldr	r2, [sp, #724]	; 0x2d4
    c824:	ldr	r3, [sp, #732]	; 0x2dc
    c828:	add	r2, r2, r3
    c82c:	ldr	r3, [sp, #728]	; 0x2d8
    c830:	str	r0, [sp, #36]	; 0x24
    c834:	mov	r0, r1
    c838:	movw	r1, #0
    c83c:	str	r1, [sp, #32]
    c840:	ldr	ip, [sp, #32]
    c844:	str	ip, [sp]
    c848:	str	ip, [sp, #4]
    c84c:	ldr	lr, [sp, #36]	; 0x24
    c850:	str	lr, [sp, #8]
    c854:	movw	r4, #48	; 0x30
    c858:	str	r4, [sp, #12]
    c85c:	bl	0 <coda_pcre_exec>
    c860:	str	r0, [sp, #700]	; 0x2bc
    c864:	movw	r0, #0
    c868:	movt	r0, #0
    c86c:	ldr	r0, [r0]
    c870:	ldr	r1, [sp, #708]	; 0x2c4
    c874:	str	r0, [sp, #28]
    c878:	mov	r0, r1
    c87c:	ldr	r1, [sp, #28]
    c880:	blx	r1
    c884:	ldr	r0, [sp, #700]	; 0x2bc
    c888:	cmp	r0, #0
    c88c:	bge	c8c4 <eval_string+0x1df8>
    c890:	ldr	r0, [sp, #700]	; 0x2bc
    c894:	cmn	r0, #1
    c898:	beq	c8c4 <eval_string+0x1df8>
    c89c:	ldr	r2, [sp, #700]	; 0x2bc
    c8a0:	mvn	r0, #400	; 0x190
    c8a4:	movw	r1, #0
    c8a8:	movt	r1, #0
    c8ac:	bl	0 <coda_set_error>
    c8b0:	ldr	r0, [sp, #724]	; 0x2d4
    c8b4:	bl	0 <free>
    c8b8:	mvn	r0, #0
    c8bc:	str	r0, [fp, #-12]
    c8c0:	b	d054 <eval_string+0x2588>
    c8c4:	ldr	r0, [sp, #700]	; 0x2bc
    c8c8:	cmp	r0, #0
    c8cc:	bne	c8f4 <eval_string+0x1e28>
    c8d0:	mvn	r0, #400	; 0x190
    c8d4:	movw	r1, #0
    c8d8:	movt	r1, #0
    c8dc:	bl	0 <coda_set_error>
    c8e0:	ldr	r0, [sp, #724]	; 0x2d4
    c8e4:	bl	0 <free>
    c8e8:	mvn	r0, #0
    c8ec:	str	r0, [fp, #-12]
    c8f0:	b	d054 <eval_string+0x2588>
    c8f4:	ldr	r0, [sp, #704]	; 0x2c0
    c8f8:	ldr	r1, [sp, #700]	; 0x2bc
    c8fc:	cmp	r0, r1
    c900:	blt	c92c <eval_string+0x1e60>
    c904:	ldr	r0, [fp, #-24]	; 0xffffffe8
    c908:	movw	r1, #0
    c90c:	str	r1, [r0]
    c910:	ldr	r0, [fp, #-28]	; 0xffffffe4
    c914:	str	r1, [r0]
    c918:	ldr	r0, [fp, #8]
    c91c:	str	r1, [r0]
    c920:	ldr	r0, [sp, #724]	; 0x2d4
    c924:	bl	0 <free>
    c928:	b	c96c <eval_string+0x1ea0>
    c92c:	ldr	r0, [sp, #704]	; 0x2c0
    c930:	add	r1, sp, #744	; 0x2e8
    c934:	ldr	r0, [r1, r0, lsl #3]
    c938:	ldr	r2, [fp, #-24]	; 0xffffffe8
    c93c:	str	r0, [r2]
    c940:	ldr	r0, [sp, #704]	; 0x2c0
    c944:	lsl	r2, r0, #1
    c948:	add	r0, r1, r0, lsl #3
    c94c:	ldr	r1, [r0, #4]
    c950:	ldr	r0, [r0]
    c954:	sub	r0, r1, r0
    c958:	ldr	r1, [fp, #-28]	; 0xffffffe4
    c95c:	str	r0, [r1]
    c960:	ldr	r0, [sp, #724]	; 0x2d4
    c964:	ldr	r1, [fp, #8]
    c968:	str	r0, [r1]
    c96c:	b	d04c <eval_string+0x2580>
    c970:	ldr	r0, [fp, #-16]
    c974:	ldr	r0, [r0]
    c978:	movw	r1, #0
    c97c:	cmp	r0, r1
    c980:	beq	c988 <eval_string+0x1ebc>
    c984:	b	c9a8 <eval_string+0x1edc>
    c988:	movw	r0, #0
    c98c:	movt	r0, #0
    c990:	movw	r1, #0
    c994:	movt	r1, #0
    c998:	movw	r2, #3624	; 0xe28
    c99c:	movw	r3, #0
    c9a0:	movt	r3, #0
    c9a4:	bl	0 <__assert_fail>
    c9a8:	ldr	r0, [fp, #-16]
    c9ac:	ldr	r0, [r0]
    c9b0:	ldr	r0, [r0]
    c9b4:	add	r1, sp, #672	; 0x2a0
    c9b8:	bl	0 <coda_get_product_class>
    c9bc:	cmp	r0, #0
    c9c0:	beq	c9d0 <eval_string+0x1f04>
    c9c4:	mvn	r0, #0
    c9c8:	str	r0, [fp, #-12]
    c9cc:	b	d054 <eval_string+0x2588>
    c9d0:	ldr	r0, [fp, #-24]	; 0xffffffe8
    c9d4:	movw	r1, #0
    c9d8:	str	r1, [r0]
    c9dc:	ldr	r0, [fp, #-28]	; 0xffffffe4
    c9e0:	str	r1, [r0]
    c9e4:	ldr	r0, [sp, #672]	; 0x2a0
    c9e8:	cmp	r0, r1
    c9ec:	beq	ca78 <eval_string+0x1fac>
    c9f0:	ldr	r0, [sp, #672]	; 0x2a0
    c9f4:	bl	0 <strlen>
    c9f8:	ldr	r1, [fp, #-28]	; 0xffffffe4
    c9fc:	str	r0, [r1]
    ca00:	ldr	r0, [fp, #-28]	; 0xffffffe4
    ca04:	ldr	r0, [r0]
    ca08:	add	r0, r0, #1
    ca0c:	bl	0 <malloc>
    ca10:	ldr	r1, [fp, #8]
    ca14:	str	r0, [r1]
    ca18:	ldr	r0, [fp, #8]
    ca1c:	ldr	r0, [r0]
    ca20:	movw	r1, #0
    ca24:	cmp	r0, r1
    ca28:	bne	ca60 <eval_string+0x1f94>
    ca2c:	ldr	r0, [fp, #-28]	; 0xffffffe4
    ca30:	ldr	r2, [r0]
    ca34:	mvn	r0, #0
    ca38:	movw	r1, #0
    ca3c:	movt	r1, #0
    ca40:	movw	r3, #0
    ca44:	movt	r3, #0
    ca48:	movw	ip, #3638	; 0xe36
    ca4c:	str	ip, [sp]
    ca50:	bl	0 <coda_set_error>
    ca54:	mvn	r0, #0
    ca58:	str	r0, [fp, #-12]
    ca5c:	b	d054 <eval_string+0x2588>
    ca60:	ldr	r0, [fp, #8]
    ca64:	ldr	r0, [r0]
    ca68:	ldr	r1, [sp, #672]	; 0x2a0
    ca6c:	ldr	r2, [fp, #-28]	; 0xffffffe4
    ca70:	ldr	r2, [r2]
    ca74:	bl	0 <memcpy>
    ca78:	b	d04c <eval_string+0x2580>
    ca7c:	ldr	r0, [fp, #-16]
    ca80:	ldr	r0, [r0]
    ca84:	movw	r1, #0
    ca88:	cmp	r0, r1
    ca8c:	beq	ca94 <eval_string+0x1fc8>
    ca90:	b	cab4 <eval_string+0x1fe8>
    ca94:	movw	r0, #0
    ca98:	movt	r0, #0
    ca9c:	movw	r1, #0
    caa0:	movt	r1, #0
    caa4:	movw	r2, #3650	; 0xe42
    caa8:	movw	r3, #0
    caac:	movt	r3, #0
    cab0:	bl	0 <__assert_fail>
    cab4:	ldr	r0, [fp, #-16]
    cab8:	ldr	r0, [r0]
    cabc:	ldr	r0, [r0]
    cac0:	add	r1, sp, #668	; 0x29c
    cac4:	bl	0 <coda_get_product_format>
    cac8:	cmp	r0, #0
    cacc:	beq	cadc <eval_string+0x2010>
    cad0:	mvn	r0, #0
    cad4:	str	r0, [fp, #-12]
    cad8:	b	d054 <eval_string+0x2588>
    cadc:	ldr	r0, [sp, #668]	; 0x29c
    cae0:	bl	0 <coda_type_get_format_name>
    cae4:	str	r0, [sp, #664]	; 0x298
    cae8:	ldr	r0, [fp, #-24]	; 0xffffffe8
    caec:	movw	r1, #0
    caf0:	str	r1, [r0]
    caf4:	ldr	r0, [fp, #-28]	; 0xffffffe4
    caf8:	str	r1, [r0]
    cafc:	ldr	r0, [sp, #664]	; 0x298
    cb00:	cmp	r0, r1
    cb04:	beq	cb90 <eval_string+0x20c4>
    cb08:	ldr	r0, [sp, #664]	; 0x298
    cb0c:	bl	0 <strlen>
    cb10:	ldr	r1, [fp, #-28]	; 0xffffffe4
    cb14:	str	r0, [r1]
    cb18:	ldr	r0, [fp, #-28]	; 0xffffffe4
    cb1c:	ldr	r0, [r0]
    cb20:	add	r0, r0, #1
    cb24:	bl	0 <malloc>
    cb28:	ldr	r1, [fp, #8]
    cb2c:	str	r0, [r1]
    cb30:	ldr	r0, [fp, #8]
    cb34:	ldr	r0, [r0]
    cb38:	movw	r1, #0
    cb3c:	cmp	r0, r1
    cb40:	bne	cb78 <eval_string+0x20ac>
    cb44:	ldr	r0, [fp, #-28]	; 0xffffffe4
    cb48:	ldr	r2, [r0]
    cb4c:	mvn	r0, #0
    cb50:	movw	r1, #0
    cb54:	movt	r1, #0
    cb58:	movw	r3, #0
    cb5c:	movt	r3, #0
    cb60:	movw	ip, #3665	; 0xe51
    cb64:	str	ip, [sp]
    cb68:	bl	0 <coda_set_error>
    cb6c:	mvn	r0, #0
    cb70:	str	r0, [fp, #-12]
    cb74:	b	d054 <eval_string+0x2588>
    cb78:	ldr	r0, [fp, #8]
    cb7c:	ldr	r0, [r0]
    cb80:	ldr	r1, [sp, #664]	; 0x298
    cb84:	ldr	r2, [fp, #-28]	; 0xffffffe4
    cb88:	ldr	r2, [r2]
    cb8c:	bl	0 <memcpy>
    cb90:	b	d04c <eval_string+0x2580>
    cb94:	ldr	r0, [fp, #-16]
    cb98:	ldr	r0, [r0]
    cb9c:	movw	r1, #0
    cba0:	cmp	r0, r1
    cba4:	beq	cbac <eval_string+0x20e0>
    cba8:	b	cbcc <eval_string+0x2100>
    cbac:	movw	r0, #0
    cbb0:	movt	r0, #0
    cbb4:	movw	r1, #0
    cbb8:	movt	r1, #0
    cbbc:	movw	r2, #3676	; 0xe5c
    cbc0:	movw	r3, #0
    cbc4:	movt	r3, #0
    cbc8:	bl	0 <__assert_fail>
    cbcc:	ldr	r0, [fp, #-16]
    cbd0:	ldr	r0, [r0]
    cbd4:	ldr	r0, [r0]
    cbd8:	add	r1, sp, #660	; 0x294
    cbdc:	bl	0 <coda_get_product_type>
    cbe0:	cmp	r0, #0
    cbe4:	beq	cbf4 <eval_string+0x2128>
    cbe8:	mvn	r0, #0
    cbec:	str	r0, [fp, #-12]
    cbf0:	b	d054 <eval_string+0x2588>
    cbf4:	ldr	r0, [fp, #-24]	; 0xffffffe8
    cbf8:	movw	r1, #0
    cbfc:	str	r1, [r0]
    cc00:	ldr	r0, [fp, #-28]	; 0xffffffe4
    cc04:	str	r1, [r0]
    cc08:	ldr	r0, [sp, #660]	; 0x294
    cc0c:	cmp	r0, r1
    cc10:	beq	cca0 <eval_string+0x21d4>
    cc14:	ldr	r0, [sp, #660]	; 0x294
    cc18:	bl	0 <strlen>
    cc1c:	ldr	r1, [fp, #-28]	; 0xffffffe4
    cc20:	str	r0, [r1]
    cc24:	ldr	r0, [fp, #-28]	; 0xffffffe4
    cc28:	ldr	r0, [r0]
    cc2c:	add	r0, r0, #1
    cc30:	bl	0 <malloc>
    cc34:	ldr	r1, [fp, #8]
    cc38:	str	r0, [r1]
    cc3c:	ldr	r0, [fp, #8]
    cc40:	ldr	r0, [r0]
    cc44:	movw	r1, #0
    cc48:	cmp	r0, r1
    cc4c:	bne	cc88 <eval_string+0x21bc>
    cc50:	ldr	r0, [fp, #-28]	; 0xffffffe4
    cc54:	ldr	r0, [r0]
    cc58:	add	r2, r0, #1
    cc5c:	mvn	r0, #0
    cc60:	movw	r1, #0
    cc64:	movt	r1, #0
    cc68:	movw	r3, #0
    cc6c:	movt	r3, #0
    cc70:	movw	ip, #3690	; 0xe6a
    cc74:	str	ip, [sp]
    cc78:	bl	0 <coda_set_error>
    cc7c:	mvn	r0, #0
    cc80:	str	r0, [fp, #-12]
    cc84:	b	d054 <eval_string+0x2588>
    cc88:	ldr	r0, [fp, #8]
    cc8c:	ldr	r0, [r0]
    cc90:	ldr	r1, [sp, #660]	; 0x294
    cc94:	ldr	r2, [fp, #-28]	; 0xffffffe4
    cc98:	ldr	r2, [r2]
    cc9c:	bl	0 <memcpy>
    cca0:	b	d04c <eval_string+0x2580>
    cca4:	ldr	r0, [fp, #-16]
    cca8:	ldr	r1, [fp, #-32]	; 0xffffffe0
    ccac:	ldr	r1, [r1, #16]
    ccb0:	add	r2, sp, #648	; 0x288
    ccb4:	bl	9568 <eval_float>
    ccb8:	cmp	r0, #0
    ccbc:	beq	cccc <eval_string+0x2200>
    ccc0:	mvn	r0, #0
    ccc4:	str	r0, [fp, #-12]
    ccc8:	b	d054 <eval_string+0x2588>
    cccc:	ldr	r0, [fp, #-32]	; 0xffffffe0
    ccd0:	ldr	r0, [r0, #20]
    ccd4:	movw	r1, #0
    ccd8:	cmp	r0, r1
    ccdc:	beq	cd84 <eval_string+0x22b8>
    cce0:	ldr	r0, [fp, #-16]
    cce4:	ldr	r1, [fp, #-32]	; 0xffffffe0
    cce8:	ldr	r1, [r1, #20]
    ccec:	add	r2, sp, #644	; 0x284
    ccf0:	add	r3, sp, #640	; 0x280
    ccf4:	add	ip, sp, #636	; 0x27c
    ccf8:	str	ip, [sp]
    ccfc:	bl	aacc <eval_string>
    cd00:	cmp	r0, #0
    cd04:	beq	cd14 <eval_string+0x2248>
    cd08:	mvn	r0, #0
    cd0c:	str	r0, [fp, #-12]
    cd10:	b	d054 <eval_string+0x2588>
    cd14:	ldr	r0, [sp, #640]	; 0x280
    cd18:	cmp	r0, #0
    cd1c:	bge	cd3c <eval_string+0x2270>
    cd20:	mvn	r0, #400	; 0x190
    cd24:	movw	r1, #0
    cd28:	movt	r1, #0
    cd2c:	bl	0 <coda_set_error>
    cd30:	mvn	r0, #0
    cd34:	str	r0, [fp, #-12]
    cd38:	b	d054 <eval_string+0x2588>
    cd3c:	ldr	r0, [sp, #640]	; 0x280
    cd40:	cmp	r0, #0
    cd44:	bne	cd64 <eval_string+0x2298>
    cd48:	mvn	r0, #400	; 0x190
    cd4c:	movw	r1, #0
    cd50:	movt	r1, #0
    cd54:	bl	0 <coda_set_error>
    cd58:	mvn	r0, #0
    cd5c:	str	r0, [fp, #-12]
    cd60:	b	d054 <eval_string+0x2588>
    cd64:	ldr	r0, [sp, #636]	; 0x27c
    cd68:	ldr	r1, [sp, #644]	; 0x284
    cd6c:	ldr	r2, [sp, #640]	; 0x280
    cd70:	add	r1, r1, r2
    cd74:	add	r0, r0, r1
    cd78:	movw	r1, #0
    cd7c:	strb	r1, [r0]
    cd80:	b	cda4 <eval_string+0x22d8>
    cd84:	movw	r0, #0
    cd88:	movt	r0, #0
    cd8c:	str	r0, [sp, #636]	; 0x27c
    cd90:	ldr	r0, [sp, #636]	; 0x27c
    cd94:	bl	0 <strlen>
    cd98:	str	r0, [sp, #640]	; 0x280
    cd9c:	movw	r0, #0
    cda0:	str	r0, [sp, #644]	; 0x284
    cda4:	ldr	r0, [sp, #640]	; 0x280
    cda8:	add	r0, r0, #1
    cdac:	bl	0 <malloc>
    cdb0:	ldr	r1, [fp, #8]
    cdb4:	str	r0, [r1]
    cdb8:	ldr	r0, [fp, #8]
    cdbc:	ldr	r0, [r0]
    cdc0:	movw	r1, #0
    cdc4:	cmp	r0, r1
    cdc8:	bne	ce20 <eval_string+0x2354>
    cdcc:	ldr	r0, [fp, #-32]	; 0xffffffe0
    cdd0:	ldr	r0, [r0, #20]
    cdd4:	movw	r1, #0
    cdd8:	cmp	r0, r1
    cddc:	beq	cde8 <eval_string+0x231c>
    cde0:	ldr	r0, [sp, #636]	; 0x27c
    cde4:	bl	0 <free>
    cde8:	ldr	r0, [fp, #-28]	; 0xffffffe4
    cdec:	ldr	r0, [r0]
    cdf0:	add	r2, r0, #1
    cdf4:	mvn	r0, #0
    cdf8:	movw	r1, #0
    cdfc:	movt	r1, #0
    ce00:	movw	r3, #0
    ce04:	movt	r3, #0
    ce08:	movw	ip, #3740	; 0xe9c
    ce0c:	str	ip, [sp]
    ce10:	bl	0 <coda_set_error>
    ce14:	mvn	r0, #0
    ce18:	str	r0, [fp, #-12]
    ce1c:	b	d054 <eval_string+0x2588>
    ce20:	vldr	d0, [sp, #648]	; 0x288
    ce24:	ldr	r0, [sp, #636]	; 0x27c
    ce28:	ldr	r1, [sp, #644]	; 0x284
    ce2c:	add	r0, r0, r1
    ce30:	ldr	r1, [fp, #8]
    ce34:	ldr	r1, [r1]
    ce38:	bl	0 <coda_time_double_to_string>
    ce3c:	cmp	r0, #0
    ce40:	beq	ce6c <eval_string+0x23a0>
    ce44:	ldr	r0, [fp, #-32]	; 0xffffffe0
    ce48:	ldr	r0, [r0, #20]
    ce4c:	movw	r1, #0
    ce50:	cmp	r0, r1
    ce54:	beq	ce60 <eval_string+0x2394>
    ce58:	ldr	r0, [sp, #636]	; 0x27c
    ce5c:	bl	0 <free>
    ce60:	mvn	r0, #0
    ce64:	str	r0, [fp, #-12]
    ce68:	b	d054 <eval_string+0x2588>
    ce6c:	ldr	r0, [fp, #-24]	; 0xffffffe8
    ce70:	movw	r1, #0
    ce74:	str	r1, [r0]
    ce78:	ldr	r0, [fp, #8]
    ce7c:	ldr	r0, [r0]
    ce80:	str	r1, [sp, #24]
    ce84:	bl	0 <strlen>
    ce88:	ldr	r1, [fp, #-28]	; 0xffffffe4
    ce8c:	str	r0, [r1]
    ce90:	ldr	r0, [fp, #-32]	; 0xffffffe0
    ce94:	ldr	r0, [r0, #20]
    ce98:	ldr	r1, [sp, #24]
    ce9c:	cmp	r0, r1
    cea0:	beq	ceac <eval_string+0x23e0>
    cea4:	ldr	r0, [sp, #636]	; 0x27c
    cea8:	bl	0 <free>
    ceac:	b	d04c <eval_string+0x2580>
    ceb0:	ldr	r0, [fp, #-16]
    ceb4:	ldr	r0, [r0]
    ceb8:	movw	r1, #0
    cebc:	cmp	r0, r1
    cec0:	beq	cec8 <eval_string+0x23fc>
    cec4:	b	cee8 <eval_string+0x241c>
    cec8:	movw	r0, #0
    cecc:	movt	r0, #0
    ced0:	movw	r1, #0
    ced4:	movt	r1, #0
    ced8:	movw	r2, #3763	; 0xeb3
    cedc:	movw	r3, #0
    cee0:	movt	r3, #0
    cee4:	bl	0 <__assert_fail>
    cee8:	ldr	r0, [fp, #-16]
    ceec:	add	r0, r0, #8
    cef0:	add	r1, sp, #112	; 0x70
    cef4:	str	r0, [sp, #20]
    cef8:	mov	r0, r1
    cefc:	ldr	r1, [sp, #20]
    cf00:	movw	r2, #520	; 0x208
    cf04:	bl	0 <memcpy>
    cf08:	ldr	r0, [fp, #-16]
    cf0c:	ldr	r1, [fp, #-32]	; 0xffffffe0
    cf10:	ldr	r1, [r1, #16]
    cf14:	bl	d154 <eval_cursor>
    cf18:	cmp	r0, #0
    cf1c:	beq	cf2c <eval_string+0x2460>
    cf20:	mvn	r0, #0
    cf24:	str	r0, [fp, #-12]
    cf28:	b	d054 <eval_string+0x2588>
    cf2c:	ldr	r0, [fp, #-16]
    cf30:	ldr	r1, [fp, #-32]	; 0xffffffe0
    cf34:	ldr	r1, [r1, #20]
    cf38:	ldr	r2, [fp, #-24]	; 0xffffffe8
    cf3c:	ldr	r3, [fp, #-28]	; 0xffffffe4
    cf40:	ldr	ip, [fp, #8]
    cf44:	str	ip, [sp]
    cf48:	bl	aacc <eval_string>
    cf4c:	cmp	r0, #0
    cf50:	beq	cf60 <eval_string+0x2494>
    cf54:	mvn	r0, #0
    cf58:	str	r0, [fp, #-12]
    cf5c:	b	d054 <eval_string+0x2588>
    cf60:	ldr	r0, [fp, #-16]
    cf64:	add	r0, r0, #8
    cf68:	add	r1, sp, #112	; 0x70
    cf6c:	movw	r2, #520	; 0x208
    cf70:	bl	0 <memcpy>
    cf74:	b	d04c <eval_string+0x2580>
    cf78:	ldr	r0, [fp, #-32]	; 0xffffffe0
    cf7c:	ldr	r0, [r0, #12]
    cf80:	ldrb	r0, [r0]
    cf84:	sub	r0, r0, #105	; 0x69
    cf88:	str	r0, [sp, #100]	; 0x64
    cf8c:	ldr	r0, [fp, #-16]
    cf90:	ldr	r1, [sp, #100]	; 0x64
    cf94:	add	r0, r0, r1, lsl #3
    cf98:	ldr	r1, [r0, #528]	; 0x210
    cf9c:	ldr	r0, [r0, #532]	; 0x214
    cfa0:	str	r0, [sp, #108]	; 0x6c
    cfa4:	str	r1, [sp, #104]	; 0x68
    cfa8:	ldr	r0, [fp, #-16]
    cfac:	ldr	r1, [fp, #-32]	; 0xffffffe0
    cfb0:	ldr	r1, [r1, #16]
    cfb4:	add	r2, r0, #528	; 0x210
    cfb8:	ldr	r3, [sp, #100]	; 0x64
    cfbc:	add	r2, r2, r3, lsl #3
    cfc0:	bl	6f70 <eval_integer>
    cfc4:	cmp	r0, #0
    cfc8:	beq	cfd8 <eval_string+0x250c>
    cfcc:	mvn	r0, #0
    cfd0:	str	r0, [fp, #-12]
    cfd4:	b	d054 <eval_string+0x2588>
    cfd8:	ldr	r0, [fp, #-16]
    cfdc:	ldr	r1, [fp, #-32]	; 0xffffffe0
    cfe0:	ldr	r1, [r1, #20]
    cfe4:	ldr	r2, [fp, #-24]	; 0xffffffe8
    cfe8:	ldr	r3, [fp, #-28]	; 0xffffffe4
    cfec:	ldr	ip, [fp, #8]
    cff0:	str	ip, [sp]
    cff4:	bl	aacc <eval_string>
    cff8:	cmp	r0, #0
    cffc:	beq	d00c <eval_string+0x2540>
    d000:	mvn	r0, #0
    d004:	str	r0, [fp, #-12]
    d008:	b	d054 <eval_string+0x2588>
    d00c:	ldr	r0, [sp, #104]	; 0x68
    d010:	ldr	r1, [sp, #108]	; 0x6c
    d014:	ldr	r2, [fp, #-16]
    d018:	ldr	r3, [sp, #100]	; 0x64
    d01c:	add	r2, r2, r3, lsl #3
    d020:	str	r1, [r2, #532]	; 0x214
    d024:	str	r0, [r2, #528]	; 0x210
    d028:	b	d04c <eval_string+0x2580>
    d02c:	movw	r0, #0
    d030:	movt	r0, #0
    d034:	movw	r1, #0
    d038:	movt	r1, #0
    d03c:	movw	r2, #3794	; 0xed2
    d040:	movw	r3, #0
    d044:	movt	r3, #0
    d048:	bl	0 <__assert_fail>
    d04c:	movw	r0, #0
    d050:	str	r0, [fp, #-12]
    d054:	ldr	r0, [fp, #-12]
    d058:	sub	sp, fp, #8
    d05c:	pop	{r4, sl, fp, pc}

0000d060 <coda_expression_eval_node>:
    d060:	push	{r4, r5, fp, lr}
    d064:	add	fp, sp, #8
    d068:	sub	sp, sp, #584	; 0x248
    d06c:	str	r0, [fp, #-16]
    d070:	str	r1, [fp, #-20]	; 0xffffffec
    d074:	ldr	r0, [fp, #-16]
    d078:	ldr	r0, [r0, #4]
    d07c:	cmp	r0, #4
    d080:	beq	d0a0 <coda_expression_eval_node+0x40>
    d084:	mvn	r0, #99	; 0x63
    d088:	movw	r1, #0
    d08c:	movt	r1, #0
    d090:	bl	0 <coda_set_error>
    d094:	mvn	r0, #0
    d098:	str	r0, [fp, #-12]
    d09c:	b	d148 <coda_expression_eval_node+0xe8>
    d0a0:	ldr	r0, [fp, #-20]	; 0xffffffec
    d0a4:	movw	r1, #0
    d0a8:	cmp	r0, r1
    d0ac:	bne	d0cc <coda_expression_eval_node+0x6c>
    d0b0:	mvn	r0, #99	; 0x63
    d0b4:	movw	r1, #0
    d0b8:	movt	r1, #0
    d0bc:	bl	0 <coda_set_error>
    d0c0:	mvn	r0, #0
    d0c4:	str	r0, [fp, #-12]
    d0c8:	b	d148 <coda_expression_eval_node+0xe8>
    d0cc:	ldr	r1, [fp, #-20]	; 0xffffffec
    d0d0:	mov	r0, sp
    d0d4:	bl	c0c <init_eval_info>
    d0d8:	ldr	r1, [fp, #-16]
    d0dc:	mov	r0, sp
    d0e0:	bl	d154 <eval_cursor>
    d0e4:	cmp	r0, #0
    d0e8:	beq	d12c <coda_expression_eval_node+0xcc>
    d0ec:	ldr	r0, [fp, #-20]	; 0xffffffec
    d0f0:	movw	r1, #0
    d0f4:	cmp	r0, r1
    d0f8:	beq	d120 <coda_expression_eval_node+0xc0>
    d0fc:	ldr	r0, [fp, #-20]	; 0xffffffec
    d100:	mov	r1, sp
    d104:	add	r1, r1, #8
    d108:	bl	0 <coda_cursor_compare>
    d10c:	cmp	r0, #0
    d110:	beq	d120 <coda_expression_eval_node+0xc0>
    d114:	mov	r0, sp
    d118:	add	r0, r0, #8
    d11c:	bl	0 <coda_cursor_add_to_error_message>
    d120:	mvn	r0, #0
    d124:	str	r0, [fp, #-12]
    d128:	b	d148 <coda_expression_eval_node+0xe8>
    d12c:	ldr	r0, [fp, #-20]	; 0xffffffec
    d130:	mov	r1, sp
    d134:	add	r1, r1, #8
    d138:	movw	r2, #520	; 0x208
    d13c:	bl	0 <memcpy>
    d140:	movw	r0, #0
    d144:	str	r0, [fp, #-12]
    d148:	ldr	r0, [fp, #-12]
    d14c:	sub	sp, fp, #8
    d150:	pop	{r4, r5, fp, pc}

0000d154 <eval_cursor>:
    d154:	push	{fp, lr}
    d158:	mov	fp, sp
    d15c:	sub	sp, sp, #64	; 0x40
    d160:	str	r0, [fp, #-8]
    d164:	str	r1, [fp, #-12]
    d168:	ldr	r0, [fp, #-8]
    d16c:	ldr	r0, [r0]
    d170:	movw	r1, #0
    d174:	cmp	r0, r1
    d178:	beq	d180 <eval_cursor+0x2c>
    d17c:	b	d1a0 <eval_cursor+0x4c>
    d180:	movw	r0, #0
    d184:	movt	r0, #0
    d188:	movw	r1, #0
    d18c:	movt	r1, #0
    d190:	movw	r2, #3913	; 0xf49
    d194:	movw	r3, #0
    d198:	movt	r3, #0
    d19c:	bl	0 <__assert_fail>
    d1a0:	ldr	r0, [fp, #-12]
    d1a4:	str	r0, [fp, #-16]
    d1a8:	ldr	r0, [fp, #-16]
    d1ac:	ldr	r0, [r0]
    d1b0:	sub	r0, r0, #10
    d1b4:	cmp	r0, #28
    d1b8:	str	r0, [sp, #12]
    d1bc:	bhi	d6d8 <eval_cursor+0x584>
    d1c0:	add	r0, pc, #8
    d1c4:	ldr	r1, [sp, #12]
    d1c8:	ldr	r0, [r0, r1, lsl #2]
    d1cc:	mov	pc, r0
    d1d0:	.word	0x0000d654
    d1d4:	.word	0x0000d6d8
    d1d8:	.word	0x0000d6d8
    d1dc:	.word	0x0000d6d8
    d1e0:	.word	0x0000d6d8
    d1e4:	.word	0x0000d6d8
    d1e8:	.word	0x0000d6d8
    d1ec:	.word	0x0000d6d8
    d1f0:	.word	0x0000d6d8
    d1f4:	.word	0x0000d6d8
    d1f8:	.word	0x0000d6d8
    d1fc:	.word	0x0000d6d8
    d200:	.word	0x0000d6d8
    d204:	.word	0x0000d6d8
    d208:	.word	0x0000d6d8
    d20c:	.word	0x0000d6d8
    d210:	.word	0x0000d6d8
    d214:	.word	0x0000d6d8
    d218:	.word	0x0000d6d8
    d21c:	.word	0x0000d6d8
    d220:	.word	0x0000d6d8
    d224:	.word	0x0000d6d8
    d228:	.word	0x0000d3b8
    d22c:	.word	0x0000d5cc
    d230:	.word	0x0000d248
    d234:	.word	0x0000d294
    d238:	.word	0x0000d244
    d23c:	.word	0x0000d56c
    d240:	.word	0x0000d264
    d244:	b	d6f8 <eval_cursor+0x5a4>
    d248:	ldr	r0, [fp, #-8]
    d24c:	add	r0, r0, #8
    d250:	ldr	r1, [fp, #-8]
    d254:	ldr	r1, [r1]
    d258:	movw	r2, #520	; 0x208
    d25c:	bl	0 <memcpy>
    d260:	b	d6f8 <eval_cursor+0x5a4>
    d264:	ldr	r0, [fp, #-8]
    d268:	add	r0, r0, #8
    d26c:	ldr	r1, [fp, #-8]
    d270:	ldr	r1, [r1]
    d274:	ldr	r1, [r1]
    d278:	bl	0 <coda_cursor_set_product>
    d27c:	cmp	r0, #0
    d280:	beq	d290 <eval_cursor+0x13c>
    d284:	mvn	r0, #0
    d288:	str	r0, [fp, #-4]
    d28c:	b	d700 <eval_cursor+0x5ac>
    d290:	b	d6f8 <eval_cursor+0x5a4>
    d294:	ldr	r0, [fp, #-16]
    d298:	ldr	r0, [r0, #16]
    d29c:	movw	r1, #0
    d2a0:	cmp	r0, r1
    d2a4:	beq	d2d0 <eval_cursor+0x17c>
    d2a8:	ldr	r0, [fp, #-8]
    d2ac:	ldr	r1, [fp, #-16]
    d2b0:	ldr	r1, [r1, #16]
    d2b4:	bl	d154 <eval_cursor>
    d2b8:	cmp	r0, #0
    d2bc:	beq	d2cc <eval_cursor+0x178>
    d2c0:	mvn	r0, #0
    d2c4:	str	r0, [fp, #-4]
    d2c8:	b	d700 <eval_cursor+0x5ac>
    d2cc:	b	d2d0 <eval_cursor+0x17c>
    d2d0:	ldr	r0, [fp, #-8]
    d2d4:	add	r0, r0, #8
    d2d8:	sub	r1, fp, #20
    d2dc:	bl	0 <coda_cursor_get_type_class>
    d2e0:	cmp	r0, #0
    d2e4:	beq	d2f4 <eval_cursor+0x1a0>
    d2e8:	mvn	r0, #0
    d2ec:	str	r0, [fp, #-4]
    d2f0:	b	d700 <eval_cursor+0x5ac>
    d2f4:	ldr	r0, [fp, #-20]	; 0xffffffec
    d2f8:	cmp	r0, #6
    d2fc:	bne	d324 <eval_cursor+0x1d0>
    d300:	ldr	r0, [fp, #-8]
    d304:	add	r0, r0, #8
    d308:	bl	0 <coda_cursor_use_base_type_of_special_type>
    d30c:	cmp	r0, #0
    d310:	beq	d320 <eval_cursor+0x1cc>
    d314:	mvn	r0, #0
    d318:	str	r0, [fp, #-4]
    d31c:	b	d700 <eval_cursor+0x5ac>
    d320:	b	d324 <eval_cursor+0x1d0>
    d324:	ldr	r0, [fp, #-16]
    d328:	ldr	r0, [r0, #12]
    d32c:	movw	r1, #0
    d330:	cmp	r0, r1
    d334:	beq	d364 <eval_cursor+0x210>
    d338:	ldr	r0, [fp, #-8]
    d33c:	add	r0, r0, #8
    d340:	ldr	r1, [fp, #-16]
    d344:	ldr	r1, [r1, #12]
    d348:	bl	0 <coda_cursor_goto_record_field_by_name>
    d34c:	cmp	r0, #0
    d350:	beq	d360 <eval_cursor+0x20c>
    d354:	mvn	r0, #0
    d358:	str	r0, [fp, #-4]
    d35c:	b	d700 <eval_cursor+0x5ac>
    d360:	b	d3b4 <eval_cursor+0x260>
    d364:	ldr	r0, [fp, #-8]
    d368:	ldr	r1, [fp, #-16]
    d36c:	ldr	r1, [r1, #20]
    d370:	add	r2, sp, #32
    d374:	bl	6f70 <eval_integer>
    d378:	cmp	r0, #0
    d37c:	beq	d38c <eval_cursor+0x238>
    d380:	mvn	r0, #0
    d384:	str	r0, [fp, #-4]
    d388:	b	d700 <eval_cursor+0x5ac>
    d38c:	ldr	r0, [fp, #-8]
    d390:	add	r0, r0, #8
    d394:	ldr	r1, [sp, #32]
    d398:	bl	0 <coda_cursor_goto_record_field_by_index>
    d39c:	cmp	r0, #0
    d3a0:	beq	d3b0 <eval_cursor+0x25c>
    d3a4:	mvn	r0, #0
    d3a8:	str	r0, [fp, #-4]
    d3ac:	b	d700 <eval_cursor+0x5ac>
    d3b0:	b	d3b4 <eval_cursor+0x260>
    d3b4:	b	d6f8 <eval_cursor+0x5a4>
    d3b8:	ldr	r0, [fp, #-16]
    d3bc:	ldr	r0, [r0, #16]
    d3c0:	movw	r1, #0
    d3c4:	cmp	r0, r1
    d3c8:	beq	d3f4 <eval_cursor+0x2a0>
    d3cc:	ldr	r0, [fp, #-8]
    d3d0:	ldr	r1, [fp, #-16]
    d3d4:	ldr	r1, [r1, #16]
    d3d8:	bl	d154 <eval_cursor>
    d3dc:	cmp	r0, #0
    d3e0:	beq	d3f0 <eval_cursor+0x29c>
    d3e4:	mvn	r0, #0
    d3e8:	str	r0, [fp, #-4]
    d3ec:	b	d700 <eval_cursor+0x5ac>
    d3f0:	b	d424 <eval_cursor+0x2d0>
    d3f4:	ldr	r0, [fp, #-8]
    d3f8:	add	r0, r0, #8
    d3fc:	ldr	r1, [fp, #-8]
    d400:	ldr	r1, [r1]
    d404:	ldr	r1, [r1]
    d408:	bl	0 <coda_cursor_set_product>
    d40c:	cmp	r0, #0
    d410:	beq	d420 <eval_cursor+0x2cc>
    d414:	mvn	r0, #0
    d418:	str	r0, [fp, #-4]
    d41c:	b	d700 <eval_cursor+0x5ac>
    d420:	b	d424 <eval_cursor+0x2d0>
    d424:	ldr	r0, [fp, #-8]
    d428:	ldr	r1, [fp, #-16]
    d42c:	ldr	r1, [r1, #20]
    d430:	add	r2, sp, #24
    d434:	bl	6f70 <eval_integer>
    d438:	cmp	r0, #0
    d43c:	beq	d44c <eval_cursor+0x2f8>
    d440:	mvn	r0, #0
    d444:	str	r0, [fp, #-4]
    d448:	b	d700 <eval_cursor+0x5ac>
    d44c:	ldr	r0, [pc, #696]	; d70c <eval_cursor+0x5b8>
    d450:	ldr	r0, [pc, r0]
    d454:	str	r0, [sp, #8]
    d458:	bl	0 <__aeabi_read_tp>
    d45c:	ldr	r1, [sp, #8]
    d460:	ldr	r0, [r0, r1]
    d464:	cmp	r0, #0
    d468:	bne	d544 <eval_cursor+0x3f0>
    d46c:	ldr	r0, [fp, #-8]
    d470:	add	r0, r0, #8
    d474:	add	r1, sp, #16
    d478:	bl	0 <coda_cursor_get_type_class>
    d47c:	cmp	r0, #0
    d480:	beq	d490 <eval_cursor+0x33c>
    d484:	mvn	r0, #0
    d488:	str	r0, [fp, #-4]
    d48c:	b	d700 <eval_cursor+0x5ac>
    d490:	ldr	r0, [sp, #16]
    d494:	cmp	r0, #1
    d498:	beq	d4cc <eval_cursor+0x378>
    d49c:	ldr	r0, [sp, #16]
    d4a0:	bl	0 <coda_type_get_class_name>
    d4a4:	mvn	r1, #104	; 0x68
    d4a8:	str	r0, [sp, #4]
    d4ac:	mov	r0, r1
    d4b0:	movw	r1, #0
    d4b4:	movt	r1, #0
    d4b8:	ldr	r2, [sp, #4]
    d4bc:	bl	0 <coda_set_error>
    d4c0:	mvn	r0, #0
    d4c4:	str	r0, [fp, #-4]
    d4c8:	b	d700 <eval_cursor+0x5ac>
    d4cc:	ldr	r0, [fp, #-8]
    d4d0:	add	r0, r0, #8
    d4d4:	add	r1, sp, #20
    d4d8:	bl	0 <coda_cursor_get_num_elements>
    d4dc:	cmp	r0, #0
    d4e0:	beq	d4f0 <eval_cursor+0x39c>
    d4e4:	mvn	r0, #0
    d4e8:	str	r0, [fp, #-4]
    d4ec:	b	d700 <eval_cursor+0x5ac>
    d4f0:	ldr	r0, [sp, #28]
    d4f4:	cmp	r0, #0
    d4f8:	bmi	d51c <eval_cursor+0x3c8>
    d4fc:	b	d500 <eval_cursor+0x3ac>
    d500:	ldr	r0, [sp, #24]
    d504:	ldr	r1, [sp, #28]
    d508:	ldr	r2, [sp, #20]
    d50c:	subs	r0, r0, r2
    d510:	sbcs	r1, r1, r2, asr #31
    d514:	blt	d540 <eval_cursor+0x3ec>
    d518:	b	d51c <eval_cursor+0x3c8>
    d51c:	ldr	r2, [sp, #24]
    d520:	ldr	r3, [sp, #20]
    d524:	mvn	r0, #106	; 0x6a
    d528:	movw	r1, #0
    d52c:	movt	r1, #0
    d530:	bl	0 <coda_set_error>
    d534:	mvn	r0, #0
    d538:	str	r0, [fp, #-4]
    d53c:	b	d700 <eval_cursor+0x5ac>
    d540:	b	d544 <eval_cursor+0x3f0>
    d544:	ldr	r0, [fp, #-8]
    d548:	add	r0, r0, #8
    d54c:	ldr	r1, [sp, #24]
    d550:	bl	0 <coda_cursor_goto_array_element_by_index>
    d554:	cmp	r0, #0
    d558:	beq	d568 <eval_cursor+0x414>
    d55c:	mvn	r0, #0
    d560:	str	r0, [fp, #-4]
    d564:	b	d700 <eval_cursor+0x5ac>
    d568:	b	d6f8 <eval_cursor+0x5a4>
    d56c:	ldr	r0, [fp, #-16]
    d570:	ldr	r0, [r0, #16]
    d574:	movw	r1, #0
    d578:	cmp	r0, r1
    d57c:	beq	d5a8 <eval_cursor+0x454>
    d580:	ldr	r0, [fp, #-8]
    d584:	ldr	r1, [fp, #-16]
    d588:	ldr	r1, [r1, #16]
    d58c:	bl	d154 <eval_cursor>
    d590:	cmp	r0, #0
    d594:	beq	d5a4 <eval_cursor+0x450>
    d598:	mvn	r0, #0
    d59c:	str	r0, [fp, #-4]
    d5a0:	b	d700 <eval_cursor+0x5ac>
    d5a4:	b	d5a8 <eval_cursor+0x454>
    d5a8:	ldr	r0, [fp, #-8]
    d5ac:	add	r0, r0, #8
    d5b0:	bl	0 <coda_cursor_goto_parent>
    d5b4:	cmp	r0, #0
    d5b8:	beq	d5c8 <eval_cursor+0x474>
    d5bc:	mvn	r0, #0
    d5c0:	str	r0, [fp, #-4]
    d5c4:	b	d700 <eval_cursor+0x5ac>
    d5c8:	b	d6f8 <eval_cursor+0x5a4>
    d5cc:	ldr	r0, [fp, #-16]
    d5d0:	ldr	r0, [r0, #16]
    d5d4:	movw	r1, #0
    d5d8:	cmp	r0, r1
    d5dc:	beq	d608 <eval_cursor+0x4b4>
    d5e0:	ldr	r0, [fp, #-8]
    d5e4:	ldr	r1, [fp, #-16]
    d5e8:	ldr	r1, [r1, #16]
    d5ec:	bl	d154 <eval_cursor>
    d5f0:	cmp	r0, #0
    d5f4:	beq	d604 <eval_cursor+0x4b0>
    d5f8:	mvn	r0, #0
    d5fc:	str	r0, [fp, #-4]
    d600:	b	d700 <eval_cursor+0x5ac>
    d604:	b	d608 <eval_cursor+0x4b4>
    d608:	ldr	r0, [fp, #-8]
    d60c:	add	r0, r0, #8
    d610:	bl	0 <coda_cursor_goto_attributes>
    d614:	cmp	r0, #0
    d618:	beq	d628 <eval_cursor+0x4d4>
    d61c:	mvn	r0, #0
    d620:	str	r0, [fp, #-4]
    d624:	b	d700 <eval_cursor+0x5ac>
    d628:	ldr	r0, [fp, #-8]
    d62c:	add	r0, r0, #8
    d630:	ldr	r1, [fp, #-16]
    d634:	ldr	r1, [r1, #12]
    d638:	bl	0 <coda_cursor_goto_record_field_by_name>
    d63c:	cmp	r0, #0
    d640:	beq	d650 <eval_cursor+0x4fc>
    d644:	mvn	r0, #0
    d648:	str	r0, [fp, #-4]
    d64c:	b	d700 <eval_cursor+0x5ac>
    d650:	b	d6f8 <eval_cursor+0x5a4>
    d654:	ldr	r0, [fp, #-8]
    d658:	ldr	r0, [r0]
    d65c:	ldr	r0, [r0]
    d660:	ldr	r0, [r0, #16]
    d664:	cmp	r0, #0
    d668:	beq	d6a8 <eval_cursor+0x554>
    d66c:	ldr	r0, [fp, #-8]
    d670:	ldr	r0, [r0]
    d674:	ldr	r0, [r0]
    d678:	ldr	r0, [r0, #16]
    d67c:	bl	0 <coda_type_get_format_name>
    d680:	mvn	r1, #400	; 0x190
    d684:	str	r0, [sp]
    d688:	mov	r0, r1
    d68c:	movw	r1, #0
    d690:	movt	r1, #0
    d694:	ldr	r2, [sp]
    d698:	bl	0 <coda_set_error>
    d69c:	mvn	r0, #0
    d6a0:	str	r0, [fp, #-4]
    d6a4:	b	d700 <eval_cursor+0x5ac>
    d6a8:	ldr	r0, [fp, #-8]
    d6ac:	add	r0, r0, #8
    d6b0:	ldr	r1, [fp, #-8]
    d6b4:	ldr	r1, [r1]
    d6b8:	ldr	r1, [r1]
    d6bc:	bl	0 <coda_ascii_cursor_set_asciilines>
    d6c0:	cmp	r0, #0
    d6c4:	beq	d6d4 <eval_cursor+0x580>
    d6c8:	mvn	r0, #0
    d6cc:	str	r0, [fp, #-4]
    d6d0:	b	d700 <eval_cursor+0x5ac>
    d6d4:	b	d6f8 <eval_cursor+0x5a4>
    d6d8:	movw	r0, #0
    d6dc:	movt	r0, #0
    d6e0:	movw	r1, #0
    d6e4:	movt	r1, #0
    d6e8:	movw	r2, #4079	; 0xfef
    d6ec:	movw	r3, #0
    d6f0:	movt	r3, #0
    d6f4:	bl	0 <__assert_fail>
    d6f8:	movw	r0, #0
    d6fc:	str	r0, [fp, #-4]
    d700:	ldr	r0, [fp, #-4]
    d704:	mov	sp, fp
    d708:	pop	{fp, pc}
    d70c:	.word	0x000002b4

0000d710 <decode_escaped_string>:
    d710:	push	{fp, lr}
    d714:	mov	fp, sp
    d718:	sub	sp, sp, #24
    d71c:	str	r0, [fp, #-8]
    d720:	ldr	r0, [fp, #-8]
    d724:	movw	r1, #0
    d728:	cmp	r0, r1
    d72c:	bne	d73c <decode_escaped_string+0x2c>
    d730:	movw	r0, #0
    d734:	str	r0, [fp, #-4]
    d738:	b	dc40 <decode_escaped_string+0x530>
    d73c:	movw	r0, #0
    d740:	str	r0, [sp, #12]
    d744:	str	r0, [sp, #8]
    d748:	ldr	r0, [fp, #-8]
    d74c:	ldr	r1, [sp, #12]
    d750:	add	r0, r0, r1
    d754:	ldrb	r0, [r0]
    d758:	cmp	r0, #0
    d75c:	beq	dc24 <decode_escaped_string+0x514>
    d760:	ldr	r0, [fp, #-8]
    d764:	ldr	r1, [sp, #12]
    d768:	add	r0, r0, r1
    d76c:	ldrb	r0, [r0]
    d770:	cmp	r0, #92	; 0x5c
    d774:	bne	dbec <decode_escaped_string+0x4dc>
    d778:	ldr	r0, [sp, #12]
    d77c:	add	r0, r0, #1
    d780:	str	r0, [sp, #12]
    d784:	ldr	r0, [fp, #-8]
    d788:	ldr	r1, [sp, #12]
    d78c:	ldrb	r0, [r0, r1]
    d790:	sub	r0, r0, #34	; 0x22
    d794:	cmp	r0, #84	; 0x54
    d798:	str	r0, [sp, #4]
    d79c:	bhi	da64 <decode_escaped_string+0x354>
    d7a0:	add	r0, pc, #8
    d7a4:	ldr	r1, [sp, #4]
    d7a8:	ldr	r0, [r0, r1, lsl #2]
    d7ac:	mov	pc, r0
    d7b0:	.word	0x0000da24
    d7b4:	.word	0x0000da64
    d7b8:	.word	0x0000da64
    d7bc:	.word	0x0000da64
    d7c0:	.word	0x0000da64
    d7c4:	.word	0x0000da44
    d7c8:	.word	0x0000da64
    d7cc:	.word	0x0000da64
    d7d0:	.word	0x0000da64
    d7d4:	.word	0x0000da64
    d7d8:	.word	0x0000da64
    d7dc:	.word	0x0000da64
    d7e0:	.word	0x0000da64
    d7e4:	.word	0x0000da64
    d7e8:	.word	0x0000da64
    d7ec:	.word	0x0000da64
    d7f0:	.word	0x0000da64
    d7f4:	.word	0x0000da64
    d7f8:	.word	0x0000da64
    d7fc:	.word	0x0000da64
    d800:	.word	0x0000da64
    d804:	.word	0x0000da64
    d808:	.word	0x0000da64
    d80c:	.word	0x0000da64
    d810:	.word	0x0000da64
    d814:	.word	0x0000da64
    d818:	.word	0x0000da64
    d81c:	.word	0x0000da64
    d820:	.word	0x0000da64
    d824:	.word	0x0000da64
    d828:	.word	0x0000da64
    d82c:	.word	0x0000da64
    d830:	.word	0x0000da64
    d834:	.word	0x0000da64
    d838:	.word	0x0000da64
    d83c:	.word	0x0000da64
    d840:	.word	0x0000da64
    d844:	.word	0x0000da64
    d848:	.word	0x0000da64
    d84c:	.word	0x0000da64
    d850:	.word	0x0000da64
    d854:	.word	0x0000da64
    d858:	.word	0x0000da64
    d85c:	.word	0x0000da64
    d860:	.word	0x0000da64
    d864:	.word	0x0000da64
    d868:	.word	0x0000da64
    d86c:	.word	0x0000da64
    d870:	.word	0x0000da64
    d874:	.word	0x0000da64
    d878:	.word	0x0000da64
    d87c:	.word	0x0000da64
    d880:	.word	0x0000da64
    d884:	.word	0x0000da64
    d888:	.word	0x0000da64
    d88c:	.word	0x0000da64
    d890:	.word	0x0000da64
    d894:	.word	0x0000da64
    d898:	.word	0x0000da04
    d89c:	.word	0x0000da64
    d8a0:	.word	0x0000da64
    d8a4:	.word	0x0000da64
    d8a8:	.word	0x0000da64
    d8ac:	.word	0x0000d924
    d8b0:	.word	0x0000d944
    d8b4:	.word	0x0000da64
    d8b8:	.word	0x0000da64
    d8bc:	.word	0x0000d904
    d8c0:	.word	0x0000d964
    d8c4:	.word	0x0000da64
    d8c8:	.word	0x0000da64
    d8cc:	.word	0x0000da64
    d8d0:	.word	0x0000da64
    d8d4:	.word	0x0000da64
    d8d8:	.word	0x0000da64
    d8dc:	.word	0x0000da64
    d8e0:	.word	0x0000d984
    d8e4:	.word	0x0000da64
    d8e8:	.word	0x0000da64
    d8ec:	.word	0x0000da64
    d8f0:	.word	0x0000d9a4
    d8f4:	.word	0x0000da64
    d8f8:	.word	0x0000d9c4
    d8fc:	.word	0x0000da64
    d900:	.word	0x0000d9e4
    d904:	ldr	r0, [fp, #-8]
    d908:	ldr	r1, [sp, #8]
    d90c:	add	r2, r1, #1
    d910:	str	r2, [sp, #8]
    d914:	add	r0, r0, r1
    d918:	movw	r1, #27
    d91c:	strb	r1, [r0]
    d920:	b	dbe8 <decode_escaped_string+0x4d8>
    d924:	ldr	r0, [fp, #-8]
    d928:	ldr	r1, [sp, #8]
    d92c:	add	r2, r1, #1
    d930:	str	r2, [sp, #8]
    d934:	add	r0, r0, r1
    d938:	movw	r1, #7
    d93c:	strb	r1, [r0]
    d940:	b	dbe8 <decode_escaped_string+0x4d8>
    d944:	ldr	r0, [fp, #-8]
    d948:	ldr	r1, [sp, #8]
    d94c:	add	r2, r1, #1
    d950:	str	r2, [sp, #8]
    d954:	add	r0, r0, r1
    d958:	movw	r1, #8
    d95c:	strb	r1, [r0]
    d960:	b	dbe8 <decode_escaped_string+0x4d8>
    d964:	ldr	r0, [fp, #-8]
    d968:	ldr	r1, [sp, #8]
    d96c:	add	r2, r1, #1
    d970:	str	r2, [sp, #8]
    d974:	add	r0, r0, r1
    d978:	movw	r1, #12
    d97c:	strb	r1, [r0]
    d980:	b	dbe8 <decode_escaped_string+0x4d8>
    d984:	ldr	r0, [fp, #-8]
    d988:	ldr	r1, [sp, #8]
    d98c:	add	r2, r1, #1
    d990:	str	r2, [sp, #8]
    d994:	add	r0, r0, r1
    d998:	movw	r1, #10
    d99c:	strb	r1, [r0]
    d9a0:	b	dbe8 <decode_escaped_string+0x4d8>
    d9a4:	ldr	r0, [fp, #-8]
    d9a8:	ldr	r1, [sp, #8]
    d9ac:	add	r2, r1, #1
    d9b0:	str	r2, [sp, #8]
    d9b4:	add	r0, r0, r1
    d9b8:	movw	r1, #13
    d9bc:	strb	r1, [r0]
    d9c0:	b	dbe8 <decode_escaped_string+0x4d8>
    d9c4:	ldr	r0, [fp, #-8]
    d9c8:	ldr	r1, [sp, #8]
    d9cc:	add	r2, r1, #1
    d9d0:	str	r2, [sp, #8]
    d9d4:	add	r0, r0, r1
    d9d8:	movw	r1, #9
    d9dc:	strb	r1, [r0]
    d9e0:	b	dbe8 <decode_escaped_string+0x4d8>
    d9e4:	ldr	r0, [fp, #-8]
    d9e8:	ldr	r1, [sp, #8]
    d9ec:	add	r2, r1, #1
    d9f0:	str	r2, [sp, #8]
    d9f4:	add	r0, r0, r1
    d9f8:	movw	r1, #11
    d9fc:	strb	r1, [r0]
    da00:	b	dbe8 <decode_escaped_string+0x4d8>
    da04:	ldr	r0, [fp, #-8]
    da08:	ldr	r1, [sp, #8]
    da0c:	add	r2, r1, #1
    da10:	str	r2, [sp, #8]
    da14:	add	r0, r0, r1
    da18:	movw	r1, #92	; 0x5c
    da1c:	strb	r1, [r0]
    da20:	b	dbe8 <decode_escaped_string+0x4d8>
    da24:	ldr	r0, [fp, #-8]
    da28:	ldr	r1, [sp, #8]
    da2c:	add	r2, r1, #1
    da30:	str	r2, [sp, #8]
    da34:	add	r0, r0, r1
    da38:	movw	r1, #34	; 0x22
    da3c:	strb	r1, [r0]
    da40:	b	dbe8 <decode_escaped_string+0x4d8>
    da44:	ldr	r0, [fp, #-8]
    da48:	ldr	r1, [sp, #8]
    da4c:	add	r2, r1, #1
    da50:	str	r2, [sp, #8]
    da54:	add	r0, r0, r1
    da58:	movw	r1, #39	; 0x27
    da5c:	strb	r1, [r0]
    da60:	b	dbe8 <decode_escaped_string+0x4d8>
    da64:	ldr	r0, [fp, #-8]
    da68:	ldr	r1, [sp, #12]
    da6c:	add	r0, r0, r1
    da70:	ldrb	r0, [r0]
    da74:	cmp	r0, #48	; 0x30
    da78:	blt	da94 <decode_escaped_string+0x384>
    da7c:	ldr	r0, [fp, #-8]
    da80:	ldr	r1, [sp, #12]
    da84:	add	r0, r0, r1
    da88:	ldrb	r0, [r0]
    da8c:	cmp	r0, #57	; 0x39
    da90:	ble	dab0 <decode_escaped_string+0x3a0>
    da94:	mvn	r0, #102	; 0x66
    da98:	movw	r1, #0
    da9c:	movt	r1, #0
    daa0:	bl	0 <coda_set_error>
    daa4:	mvn	r0, #0
    daa8:	str	r0, [fp, #-4]
    daac:	b	dc40 <decode_escaped_string+0x530>
    dab0:	ldr	r0, [fp, #-8]
    dab4:	ldr	r1, [sp, #12]
    dab8:	ldrb	r0, [r0, r1]
    dabc:	sub	r0, r0, #48	; 0x30
    dac0:	lsl	r0, r0, #6
    dac4:	ldr	r1, [fp, #-8]
    dac8:	ldr	r2, [sp, #8]
    dacc:	add	r1, r1, r2
    dad0:	strb	r0, [r1]
    dad4:	ldr	r0, [sp, #12]
    dad8:	add	r0, r0, #1
    dadc:	str	r0, [sp, #12]
    dae0:	ldr	r0, [fp, #-8]
    dae4:	ldr	r1, [sp, #12]
    dae8:	add	r0, r0, r1
    daec:	ldrb	r0, [r0]
    daf0:	cmp	r0, #48	; 0x30
    daf4:	blt	db10 <decode_escaped_string+0x400>
    daf8:	ldr	r0, [fp, #-8]
    dafc:	ldr	r1, [sp, #12]
    db00:	add	r0, r0, r1
    db04:	ldrb	r0, [r0]
    db08:	cmp	r0, #57	; 0x39
    db0c:	ble	db2c <decode_escaped_string+0x41c>
    db10:	mvn	r0, #102	; 0x66
    db14:	movw	r1, #0
    db18:	movt	r1, #0
    db1c:	bl	0 <coda_set_error>
    db20:	mvn	r0, #0
    db24:	str	r0, [fp, #-4]
    db28:	b	dc40 <decode_escaped_string+0x530>
    db2c:	ldr	r0, [fp, #-8]
    db30:	ldr	r1, [sp, #12]
    db34:	ldrb	r0, [r0, r1]
    db38:	sub	r0, r0, #48	; 0x30
    db3c:	lsl	r0, r0, #3
    db40:	ldr	r1, [fp, #-8]
    db44:	ldr	r2, [sp, #8]
    db48:	add	r1, r1, r2
    db4c:	ldrb	r2, [r1]
    db50:	add	r0, r2, r0
    db54:	strb	r0, [r1]
    db58:	ldr	r0, [sp, #12]
    db5c:	add	r0, r0, #1
    db60:	str	r0, [sp, #12]
    db64:	ldr	r0, [fp, #-8]
    db68:	ldr	r1, [sp, #12]
    db6c:	add	r0, r0, r1
    db70:	ldrb	r0, [r0]
    db74:	cmp	r0, #48	; 0x30
    db78:	blt	db94 <decode_escaped_string+0x484>
    db7c:	ldr	r0, [fp, #-8]
    db80:	ldr	r1, [sp, #12]
    db84:	add	r0, r0, r1
    db88:	ldrb	r0, [r0]
    db8c:	cmp	r0, #57	; 0x39
    db90:	ble	dbb0 <decode_escaped_string+0x4a0>
    db94:	mvn	r0, #102	; 0x66
    db98:	movw	r1, #0
    db9c:	movt	r1, #0
    dba0:	bl	0 <coda_set_error>
    dba4:	mvn	r0, #0
    dba8:	str	r0, [fp, #-4]
    dbac:	b	dc40 <decode_escaped_string+0x530>
    dbb0:	ldr	r0, [fp, #-8]
    dbb4:	ldr	r1, [sp, #12]
    dbb8:	add	r0, r0, r1
    dbbc:	ldrb	r0, [r0]
    dbc0:	sub	r0, r0, #48	; 0x30
    dbc4:	ldr	r1, [fp, #-8]
    dbc8:	ldr	r2, [sp, #8]
    dbcc:	add	r1, r1, r2
    dbd0:	ldrb	r2, [r1]
    dbd4:	add	r0, r2, r0
    dbd8:	strb	r0, [r1]
    dbdc:	ldr	r0, [sp, #8]
    dbe0:	add	r0, r0, #1
    dbe4:	str	r0, [sp, #8]
    dbe8:	b	dc14 <decode_escaped_string+0x504>
    dbec:	ldr	r0, [fp, #-8]
    dbf0:	ldr	r1, [sp, #12]
    dbf4:	add	r0, r0, r1
    dbf8:	ldrb	r0, [r0]
    dbfc:	ldr	r1, [fp, #-8]
    dc00:	ldr	r2, [sp, #8]
    dc04:	add	r3, r2, #1
    dc08:	str	r3, [sp, #8]
    dc0c:	add	r1, r1, r2
    dc10:	strb	r0, [r1]
    dc14:	ldr	r0, [sp, #12]
    dc18:	add	r0, r0, #1
    dc1c:	str	r0, [sp, #12]
    dc20:	b	d748 <decode_escaped_string+0x38>
    dc24:	ldr	r0, [fp, #-8]
    dc28:	ldr	r1, [sp, #8]
    dc2c:	add	r0, r0, r1
    dc30:	movw	r1, #0
    dc34:	strb	r1, [r0]
    dc38:	ldr	r0, [sp, #8]
    dc3c:	str	r0, [fp, #-4]
    dc40:	ldr	r0, [fp, #-4]
    dc44:	mov	sp, fp
    dc48:	pop	{fp, pc}

0000dc4c <print_escaped_string>:
    dc4c:	push	{fp, lr}
    dc50:	mov	fp, sp
    dc54:	sub	sp, sp, #104	; 0x68
    dc58:	ldr	ip, [fp, #8]
    dc5c:	str	r0, [fp, #-4]
    dc60:	str	r1, [fp, #-8]
    dc64:	str	r2, [fp, #-12]
    dc68:	str	r3, [fp, #-16]
    dc6c:	movw	r0, #0
    dc70:	str	r0, [fp, #-20]	; 0xffffffec
    dc74:	ldr	r0, [fp, #-8]
    dc78:	cmp	r0, #0
    dc7c:	beq	dc90 <print_escaped_string+0x44>
    dc80:	ldr	r0, [fp, #-4]
    dc84:	movw	r1, #0
    dc88:	cmp	r0, r1
    dc8c:	bne	dc94 <print_escaped_string+0x48>
    dc90:	b	e1a0 <print_escaped_string+0x554>
    dc94:	ldr	r0, [fp, #-8]
    dc98:	cmp	r0, #0
    dc9c:	bge	dcac <print_escaped_string+0x60>
    dca0:	ldr	r0, [fp, #-4]
    dca4:	bl	0 <strlen>
    dca8:	str	r0, [fp, #-8]
    dcac:	b	dcb0 <print_escaped_string+0x64>
    dcb0:	ldr	r0, [fp, #-20]	; 0xffffffec
    dcb4:	ldr	r1, [fp, #-8]
    dcb8:	cmp	r0, r1
    dcbc:	bge	e1a0 <print_escaped_string+0x554>
    dcc0:	ldr	r0, [fp, #-4]
    dcc4:	ldr	r1, [fp, #-20]	; 0xffffffec
    dcc8:	ldrb	r0, [r0, r1]
    dccc:	sub	r0, r0, #7
    dcd0:	cmp	r0, #85	; 0x55
    dcd4:	str	r0, [fp, #-24]	; 0xffffffe8
    dcd8:	bhi	e104 <print_escaped_string+0x4b8>
    dcdc:	add	r0, pc, #8
    dce0:	ldr	r1, [fp, #-24]	; 0xffffffe8
    dce4:	ldr	r0, [r0, r1, lsl #2]
    dce8:	mov	pc, r0
    dcec:	.word	0x0000de64
    dcf0:	.word	0x0000de84
    dcf4:	.word	0x0000df04
    dcf8:	.word	0x0000dec4
    dcfc:	.word	0x0000df24
    dd00:	.word	0x0000dea4
    dd04:	.word	0x0000dee4
    dd08:	.word	0x0000e104
    dd0c:	.word	0x0000e104
    dd10:	.word	0x0000e104
    dd14:	.word	0x0000e104
    dd18:	.word	0x0000e104
    dd1c:	.word	0x0000e104
    dd20:	.word	0x0000e104
    dd24:	.word	0x0000e104
    dd28:	.word	0x0000e104
    dd2c:	.word	0x0000e104
    dd30:	.word	0x0000e104
    dd34:	.word	0x0000e104
    dd38:	.word	0x0000e104
    dd3c:	.word	0x0000de44
    dd40:	.word	0x0000e104
    dd44:	.word	0x0000e104
    dd48:	.word	0x0000e104
    dd4c:	.word	0x0000e104
    dd50:	.word	0x0000e0ac
    dd54:	.word	0x0000e104
    dd58:	.word	0x0000df64
    dd5c:	.word	0x0000e104
    dd60:	.word	0x0000e104
    dd64:	.word	0x0000e104
    dd68:	.word	0x0000e054
    dd6c:	.word	0x0000e104
    dd70:	.word	0x0000e104
    dd74:	.word	0x0000e104
    dd78:	.word	0x0000e104
    dd7c:	.word	0x0000e104
    dd80:	.word	0x0000e104
    dd84:	.word	0x0000e104
    dd88:	.word	0x0000e104
    dd8c:	.word	0x0000e104
    dd90:	.word	0x0000e104
    dd94:	.word	0x0000e104
    dd98:	.word	0x0000e104
    dd9c:	.word	0x0000e104
    dda0:	.word	0x0000e104
    dda4:	.word	0x0000e104
    dda8:	.word	0x0000e104
    ddac:	.word	0x0000e104
    ddb0:	.word	0x0000e104
    ddb4:	.word	0x0000e104
    ddb8:	.word	0x0000e104
    ddbc:	.word	0x0000e104
    ddc0:	.word	0x0000dfa4
    ddc4:	.word	0x0000e104
    ddc8:	.word	0x0000dffc
    ddcc:	.word	0x0000e104
    ddd0:	.word	0x0000e104
    ddd4:	.word	0x0000e104
    ddd8:	.word	0x0000e104
    dddc:	.word	0x0000e104
    dde0:	.word	0x0000e104
    dde4:	.word	0x0000e104
    dde8:	.word	0x0000e104
    ddec:	.word	0x0000e104
    ddf0:	.word	0x0000e104
    ddf4:	.word	0x0000e104
    ddf8:	.word	0x0000e104
    ddfc:	.word	0x0000e104
    de00:	.word	0x0000e104
    de04:	.word	0x0000e104
    de08:	.word	0x0000e104
    de0c:	.word	0x0000e104
    de10:	.word	0x0000e104
    de14:	.word	0x0000e104
    de18:	.word	0x0000e104
    de1c:	.word	0x0000e104
    de20:	.word	0x0000e104
    de24:	.word	0x0000e104
    de28:	.word	0x0000e104
    de2c:	.word	0x0000e104
    de30:	.word	0x0000e104
    de34:	.word	0x0000e104
    de38:	.word	0x0000e104
    de3c:	.word	0x0000e104
    de40:	.word	0x0000df44
    de44:	ldr	r0, [fp, #-12]
    de48:	movw	r1, #0
    de4c:	movt	r1, #0
    de50:	str	r0, [fp, #-28]	; 0xffffffe4
    de54:	mov	r0, r1
    de58:	ldr	r1, [fp, #-28]	; 0xffffffe4
    de5c:	blx	r1
    de60:	b	e190 <print_escaped_string+0x544>
    de64:	ldr	r0, [fp, #-12]
    de68:	movw	r1, #0
    de6c:	movt	r1, #0
    de70:	str	r0, [fp, #-32]	; 0xffffffe0
    de74:	mov	r0, r1
    de78:	ldr	r1, [fp, #-32]	; 0xffffffe0
    de7c:	blx	r1
    de80:	b	e190 <print_escaped_string+0x544>
    de84:	ldr	r0, [fp, #-12]
    de88:	movw	r1, #0
    de8c:	movt	r1, #0
    de90:	str	r0, [fp, #-36]	; 0xffffffdc
    de94:	mov	r0, r1
    de98:	ldr	r1, [fp, #-36]	; 0xffffffdc
    de9c:	blx	r1
    dea0:	b	e190 <print_escaped_string+0x544>
    dea4:	ldr	r0, [fp, #-12]
    dea8:	movw	r1, #0
    deac:	movt	r1, #0
    deb0:	str	r0, [fp, #-40]	; 0xffffffd8
    deb4:	mov	r0, r1
    deb8:	ldr	r1, [fp, #-40]	; 0xffffffd8
    debc:	blx	r1
    dec0:	b	e190 <print_escaped_string+0x544>
    dec4:	ldr	r0, [fp, #-12]
    dec8:	movw	r1, #0
    decc:	movt	r1, #0
    ded0:	str	r0, [fp, #-44]	; 0xffffffd4
    ded4:	mov	r0, r1
    ded8:	ldr	r1, [fp, #-44]	; 0xffffffd4
    dedc:	blx	r1
    dee0:	b	e190 <print_escaped_string+0x544>
    dee4:	ldr	r0, [fp, #-12]
    dee8:	movw	r1, #0
    deec:	movt	r1, #0
    def0:	str	r0, [fp, #-48]	; 0xffffffd0
    def4:	mov	r0, r1
    def8:	ldr	r1, [fp, #-48]	; 0xffffffd0
    defc:	blx	r1
    df00:	b	e190 <print_escaped_string+0x544>
    df04:	ldr	r0, [fp, #-12]
    df08:	movw	r1, #0
    df0c:	movt	r1, #0
    df10:	str	r0, [sp, #52]	; 0x34
    df14:	mov	r0, r1
    df18:	ldr	r1, [sp, #52]	; 0x34
    df1c:	blx	r1
    df20:	b	e190 <print_escaped_string+0x544>
    df24:	ldr	r0, [fp, #-12]
    df28:	movw	r1, #0
    df2c:	movt	r1, #0
    df30:	str	r0, [sp, #48]	; 0x30
    df34:	mov	r0, r1
    df38:	ldr	r1, [sp, #48]	; 0x30
    df3c:	blx	r1
    df40:	b	e190 <print_escaped_string+0x544>
    df44:	ldr	r0, [fp, #-12]
    df48:	movw	r1, #0
    df4c:	movt	r1, #0
    df50:	str	r0, [sp, #44]	; 0x2c
    df54:	mov	r0, r1
    df58:	ldr	r1, [sp, #44]	; 0x2c
    df5c:	blx	r1
    df60:	b	e190 <print_escaped_string+0x544>
    df64:	ldr	r0, [fp, #-12]
    df68:	ldr	r1, [fp, #-16]
    df6c:	cmp	r1, #0
    df70:	movw	r1, #0
    df74:	movne	r1, #1
    df78:	tst	r1, #1
    df7c:	movw	r1, #0
    df80:	movt	r1, #0
    df84:	movw	r2, #0
    df88:	movt	r2, #0
    df8c:	movne	r1, r2
    df90:	str	r0, [sp, #40]	; 0x28
    df94:	mov	r0, r1
    df98:	ldr	r1, [sp, #40]	; 0x28
    df9c:	blx	r1
    dfa0:	b	e190 <print_escaped_string+0x544>
    dfa4:	ldr	r0, [fp, #-12]
    dfa8:	ldr	r1, [fp, #-16]
    dfac:	cmp	r1, #0
    dfb0:	movw	r1, #1
    dfb4:	str	r0, [sp, #36]	; 0x24
    dfb8:	str	r1, [sp, #32]
    dfbc:	bne	dfd4 <print_escaped_string+0x388>
    dfc0:	ldr	r0, [fp, #8]
    dfc4:	cmp	r0, #0
    dfc8:	movw	r0, #0
    dfcc:	movne	r0, #1
    dfd0:	str	r0, [sp, #32]
    dfd4:	ldr	r0, [sp, #32]
    dfd8:	tst	r0, #1
    dfdc:	movw	r0, #0
    dfe0:	movt	r0, #0
    dfe4:	movw	r1, #0
    dfe8:	movt	r1, #0
    dfec:	movne	r0, r1
    dff0:	ldr	r1, [sp, #36]	; 0x24
    dff4:	blx	r1
    dff8:	b	e190 <print_escaped_string+0x544>
    dffc:	ldr	r0, [fp, #-12]
    e000:	ldr	r1, [fp, #-16]
    e004:	cmp	r1, #0
    e008:	movw	r1, #1
    e00c:	str	r0, [sp, #28]
    e010:	str	r1, [sp, #24]
    e014:	bne	e02c <print_escaped_string+0x3e0>
    e018:	ldr	r0, [fp, #8]
    e01c:	cmp	r0, #0
    e020:	movw	r0, #0
    e024:	movne	r0, #1
    e028:	str	r0, [sp, #24]
    e02c:	ldr	r0, [sp, #24]
    e030:	tst	r0, #1
    e034:	movw	r0, #0
    e038:	movt	r0, #0
    e03c:	movw	r1, #0
    e040:	movt	r1, #0
    e044:	movne	r0, r1
    e048:	ldr	r1, [sp, #28]
    e04c:	blx	r1
    e050:	b	e190 <print_escaped_string+0x544>
    e054:	ldr	r0, [fp, #-12]
    e058:	ldr	r1, [fp, #-16]
    e05c:	cmp	r1, #0
    e060:	movw	r1, #1
    e064:	str	r0, [sp, #20]
    e068:	str	r1, [sp, #16]
    e06c:	bne	e084 <print_escaped_string+0x438>
    e070:	ldr	r0, [fp, #8]
    e074:	cmp	r0, #0
    e078:	movw	r0, #0
    e07c:	movne	r0, #1
    e080:	str	r0, [sp, #16]
    e084:	ldr	r0, [sp, #16]
    e088:	tst	r0, #1
    e08c:	movw	r0, #0
    e090:	movt	r0, #0
    e094:	movw	r1, #0
    e098:	movt	r1, #0
    e09c:	movne	r0, r1
    e0a0:	ldr	r1, [sp, #20]
    e0a4:	blx	r1
    e0a8:	b	e190 <print_escaped_string+0x544>
    e0ac:	ldr	r0, [fp, #-12]
    e0b0:	ldr	r1, [fp, #-16]
    e0b4:	cmp	r1, #0
    e0b8:	movw	r1, #1
    e0bc:	str	r0, [sp, #12]
    e0c0:	str	r1, [sp, #8]
    e0c4:	bne	e0dc <print_escaped_string+0x490>
    e0c8:	ldr	r0, [fp, #8]
    e0cc:	cmp	r0, #0
    e0d0:	movw	r0, #0
    e0d4:	movne	r0, #1
    e0d8:	str	r0, [sp, #8]
    e0dc:	ldr	r0, [sp, #8]
    e0e0:	tst	r0, #1
    e0e4:	movw	r0, #0
    e0e8:	movt	r0, #0
    e0ec:	movw	r1, #0
    e0f0:	movt	r1, #0
    e0f4:	movne	r0, r1
    e0f8:	ldr	r1, [sp, #12]
    e0fc:	blx	r1
    e100:	b	e190 <print_escaped_string+0x544>
    e104:	bl	0 <__ctype_b_loc>
    e108:	ldr	r0, [r0]
    e10c:	ldr	r1, [fp, #-4]
    e110:	ldr	r2, [fp, #-20]	; 0xffffffec
    e114:	ldrb	r1, [r1, r2]
    e118:	mov	r2, r1
    e11c:	add	r0, r0, r1, lsl #1
    e120:	ldrh	r0, [r0]
    e124:	and	r0, r0, #16384	; 0x4000
    e128:	cmp	r0, #0
    e12c:	bne	e160 <print_escaped_string+0x514>
    e130:	ldr	r0, [fp, #-12]
    e134:	ldr	r1, [fp, #-4]
    e138:	ldr	r2, [fp, #-20]	; 0xffffffec
    e13c:	add	r1, r1, r2
    e140:	ldrb	r1, [r1]
    e144:	movw	r2, #0
    e148:	movt	r2, #0
    e14c:	str	r0, [sp, #4]
    e150:	mov	r0, r2
    e154:	ldr	r2, [sp, #4]
    e158:	blx	r2
    e15c:	b	e18c <print_escaped_string+0x540>
    e160:	ldr	r0, [fp, #-12]
    e164:	ldr	r1, [fp, #-4]
    e168:	ldr	r2, [fp, #-20]	; 0xffffffec
    e16c:	add	r1, r1, r2
    e170:	ldrb	r1, [r1]
    e174:	movw	r2, #0
    e178:	movt	r2, #0
    e17c:	str	r0, [sp]
    e180:	mov	r0, r2
    e184:	ldr	r2, [sp]
    e188:	blx	r2
    e18c:	b	e190 <print_escaped_string+0x544>
    e190:	ldr	r0, [fp, #-20]	; 0xffffffec
    e194:	add	r0, r0, #1
    e198:	str	r0, [fp, #-20]	; 0xffffffec
    e19c:	b	dcb0 <print_escaped_string+0x64>
    e1a0:	mov	sp, fp
    e1a4:	pop	{fp, pc}

0000e1a8 <compare_strings>:
    e1a8:	push	{fp, lr}
    e1ac:	mov	fp, sp
    e1b0:	sub	sp, sp, #28
    e1b4:	ldr	ip, [fp, #12]
    e1b8:	ldr	lr, [fp, #8]
    e1bc:	str	r0, [fp, #-8]
    e1c0:	str	r1, [fp, #-12]
    e1c4:	str	r2, [sp, #12]
    e1c8:	str	r3, [sp, #8]
    e1cc:	movw	r0, #0
    e1d0:	str	r0, [sp, #4]
    e1d4:	ldr	r0, [sp, #4]
    e1d8:	ldr	r1, [fp, #-12]
    e1dc:	cmp	r0, r1
    e1e0:	movw	r0, #0
    e1e4:	str	r0, [sp]
    e1e8:	bge	e244 <compare_strings+0x9c>
    e1ec:	ldr	r0, [sp, #4]
    e1f0:	ldr	r1, [fp, #8]
    e1f4:	cmp	r0, r1
    e1f8:	movw	r0, #0
    e1fc:	str	r0, [sp]
    e200:	bge	e244 <compare_strings+0x9c>
    e204:	ldr	r0, [sp, #12]
    e208:	ldr	r1, [fp, #-8]
    e20c:	ldr	r2, [sp, #4]
    e210:	add	r1, r1, r2
    e214:	add	r0, r0, r1
    e218:	ldrb	r0, [r0]
    e21c:	ldr	r1, [fp, #12]
    e220:	ldr	r2, [sp, #8]
    e224:	ldr	r3, [sp, #4]
    e228:	add	r2, r2, r3
    e22c:	add	r1, r1, r2
    e230:	ldrb	r1, [r1]
    e234:	cmp	r0, r1
    e238:	movw	r0, #0
    e23c:	moveq	r0, #1
    e240:	str	r0, [sp]
    e244:	ldr	r0, [sp]
    e248:	tst	r0, #1
    e24c:	beq	e260 <compare_strings+0xb8>
    e250:	ldr	r0, [sp, #4]
    e254:	add	r0, r0, #1
    e258:	str	r0, [sp, #4]
    e25c:	b	e1d4 <compare_strings+0x2c>
    e260:	ldr	r0, [sp, #4]
    e264:	ldr	r1, [fp, #-12]
    e268:	cmp	r0, r1
    e26c:	bne	e298 <compare_strings+0xf0>
    e270:	ldr	r0, [sp, #4]
    e274:	ldr	r1, [fp, #8]
    e278:	cmp	r0, r1
    e27c:	bne	e28c <compare_strings+0xe4>
    e280:	movw	r0, #0
    e284:	str	r0, [fp, #-4]
    e288:	b	e2f4 <compare_strings+0x14c>
    e28c:	mvn	r0, #0
    e290:	str	r0, [fp, #-4]
    e294:	b	e2f4 <compare_strings+0x14c>
    e298:	ldr	r0, [sp, #4]
    e29c:	ldr	r1, [fp, #8]
    e2a0:	cmp	r0, r1
    e2a4:	beq	e2e0 <compare_strings+0x138>
    e2a8:	ldr	r0, [sp, #12]
    e2ac:	ldr	r1, [fp, #-8]
    e2b0:	ldr	r2, [sp, #4]
    e2b4:	add	r1, r1, r2
    e2b8:	add	r0, r0, r1
    e2bc:	ldrb	r0, [r0]
    e2c0:	ldr	r1, [fp, #12]
    e2c4:	ldr	r2, [sp, #8]
    e2c8:	ldr	r3, [sp, #4]
    e2cc:	add	r2, r2, r3
    e2d0:	add	r1, r1, r2
    e2d4:	ldrb	r1, [r1]
    e2d8:	cmp	r0, r1
    e2dc:	ble	e2ec <compare_strings+0x144>
    e2e0:	movw	r0, #1
    e2e4:	str	r0, [fp, #-4]
    e2e8:	b	e2f4 <compare_strings+0x14c>
    e2ec:	mvn	r0, #0
    e2f0:	str	r0, [fp, #-4]
    e2f4:	ldr	r0, [fp, #-4]
    e2f8:	mov	sp, fp
    e2fc:	pop	{fp, pc}

0000e300 <ipow>:
    e300:	sub	sp, sp, #24
    e304:	vstr	d0, [sp, #16]
    e308:	str	r0, [sp, #12]
    e30c:	vmov.f64	d16, #112	; 0x3f800000  1.0
    e310:	vstr	d16, [sp]
    e314:	ldr	r0, [sp, #12]
    e318:	cmp	r0, #0
    e31c:	bge	e360 <ipow+0x60>
    e320:	b	e324 <ipow+0x24>
    e324:	ldr	r0, [sp, #12]
    e328:	add	r1, r0, #1
    e32c:	str	r1, [sp, #12]
    e330:	cmp	r0, #0
    e334:	beq	e34c <ipow+0x4c>
    e338:	vldr	d16, [sp, #16]
    e33c:	vldr	d17, [sp]
    e340:	vmul.f64	d16, d17, d16
    e344:	vstr	d16, [sp]
    e348:	b	e324 <ipow+0x24>
    e34c:	vldr	d16, [sp]
    e350:	vmov.f64	d17, #112	; 0x3f800000  1.0
    e354:	vdiv.f64	d16, d17, d16
    e358:	vstr	d16, [sp]
    e35c:	b	e394 <ipow+0x94>
    e360:	b	e364 <ipow+0x64>
    e364:	ldr	r0, [sp, #12]
    e368:	mvn	r1, #0
    e36c:	add	r1, r0, r1
    e370:	str	r1, [sp, #12]
    e374:	cmp	r0, #0
    e378:	beq	e390 <ipow+0x90>
    e37c:	vldr	d16, [sp, #16]
    e380:	vldr	d17, [sp]
    e384:	vmul.f64	d16, d17, d16
    e388:	vstr	d16, [sp]
    e38c:	b	e364 <ipow+0x64>
    e390:	b	e394 <ipow+0x94>
    e394:	vldr	d0, [sp]
    e398:	add	sp, sp, #24
    e39c:	bx	lr

0000e3a0 <iswhitespace>:
    e3a0:	sub	sp, sp, #8
    e3a4:	strb	r0, [sp, #7]
    e3a8:	ldrb	r0, [sp, #7]
    e3ac:	cmp	r0, #32
    e3b0:	movw	r0, #1
    e3b4:	str	r0, [sp]
    e3b8:	beq	e3f8 <iswhitespace+0x58>
    e3bc:	ldrb	r0, [sp, #7]
    e3c0:	cmp	r0, #9
    e3c4:	movw	r0, #1
    e3c8:	str	r0, [sp]
    e3cc:	beq	e3f8 <iswhitespace+0x58>
    e3d0:	ldrb	r0, [sp, #7]
    e3d4:	cmp	r0, #10
    e3d8:	movw	r0, #1
    e3dc:	str	r0, [sp]
    e3e0:	beq	e3f8 <iswhitespace+0x58>
    e3e4:	ldrb	r0, [sp, #7]
    e3e8:	cmp	r0, #13
    e3ec:	movw	r0, #0
    e3f0:	moveq	r0, #1
    e3f4:	str	r0, [sp]
    e3f8:	ldr	r0, [sp]
    e3fc:	and	r0, r0, #1
    e400:	add	sp, sp, #8
    e404:	bx	lr
