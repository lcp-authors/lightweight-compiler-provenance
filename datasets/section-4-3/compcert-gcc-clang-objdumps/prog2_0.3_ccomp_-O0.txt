
../repos/prog2/0.3:     file format elf32-littlearm


Disassembly of section .init:

0001030c <.init>:
   1030c:	push	{r3, lr}
   10310:	bl	10398 <abort@plt+0x3c>
   10314:	pop	{r3, pc}

Disassembly of section .plt:

00010318 <printf@plt-0x14>:
   10318:	push	{lr}		; (str lr, [sp, #-4]!)
   1031c:	ldr	lr, [pc, #4]	; 10328 <printf@plt-0x4>
   10320:	add	lr, pc, lr
   10324:	ldr	pc, [lr, #8]!
   10328:	ldrdeq	r0, [r1], -r8

0001032c <printf@plt>:
   1032c:	add	ip, pc, #0, 12
   10330:	add	ip, ip, #16, 20	; 0x10000
   10334:	ldr	pc, [ip, #3288]!	; 0xcd8

00010338 <__libc_start_main@plt>:
   10338:	add	ip, pc, #0, 12
   1033c:	add	ip, ip, #16, 20	; 0x10000
   10340:	ldr	pc, [ip, #3280]!	; 0xcd0

00010344 <scanf@plt>:
   10344:	add	ip, pc, #0, 12
   10348:	add	ip, ip, #16, 20	; 0x10000
   1034c:	ldr	pc, [ip, #3272]!	; 0xcc8

00010350 <__gmon_start__@plt>:
   10350:	add	ip, pc, #0, 12
   10354:	add	ip, ip, #16, 20	; 0x10000
   10358:	ldr	pc, [ip, #3264]!	; 0xcc0

0001035c <abort@plt>:
   1035c:	add	ip, pc, #0, 12
   10360:	add	ip, ip, #16, 20	; 0x10000
   10364:	ldr	pc, [ip, #3256]!	; 0xcb8

Disassembly of section .text:

00010368 <.text>:
   10368:	bleq	4c4ac <abort@plt+0x3c150>
   1036c:	cdpeq	0, 0, cr15, cr0, cr15, {2}
   10370:	strbtmi	fp, [sl], -r2, lsl #24
   10374:	strlt	fp, [r1], #-1028	; 0xfffffbfc
   10378:			; <UNDEFINED> instruction: 0xc010f8df
   1037c:	stcgt	8, cr15, [r4, #-308]	; 0xfffffecc
   10380:	blmi	122394 <abort@plt+0x112038>
   10384:	svc	0x00d8f7ff
   10388:	svc	0x00e8f7ff
   1038c:	andeq	r0, r1, r5, asr r6
   10390:	andeq	r0, r1, r4, lsl r5
   10394:	andeq	r0, r1, r5, lsl r6
   10398:	ldr	r3, [pc, #20]	; 103b4 <abort@plt+0x58>
   1039c:	ldr	r2, [pc, #20]	; 103b8 <abort@plt+0x5c>
   103a0:	add	r3, pc, r3
   103a4:	ldr	r2, [r3, r2]
   103a8:	cmp	r2, #0
   103ac:	bxeq	lr
   103b0:	b	10350 <__gmon_start__@plt>
   103b4:	andeq	r0, r1, r8, asr ip
   103b8:	andeq	r0, r0, r0, lsr #32
   103bc:	eoreq	pc, ip, r1, asr #4
   103c0:	andeq	pc, r2, r0, asr #5
   103c4:	msreq	CPSR_fs, #268435460	; 0x10000004
   103c8:	movweq	pc, #8896	; 0x22c0	; <UNPREDICTABLE>
   103cc:	andle	r4, r5, r3, lsl #5
   103d0:	movweq	pc, #576	; 0x240	; <UNPREDICTABLE>
   103d4:	movweq	pc, #704	; 0x2c0	; <UNPREDICTABLE>
   103d8:	ldrmi	fp, [r8, -r3, lsl #2]
   103dc:	svclt	0x00004770
   103e0:	eoreq	pc, ip, r1, asr #4
   103e4:	andeq	pc, r2, r0, asr #5
   103e8:	msreq	R12_fiq, r1
   103ec:	smlabteq	r2, r0, r2, pc	; <UNPREDICTABLE>
   103f0:	svceq	0x00d91a0b
   103f4:			; <UNDEFINED> instruction: 0x01a3eb01
   103f8:	andle	r1, r5, r9, asr #32
   103fc:	movweq	pc, #576	; 0x240	; <UNPREDICTABLE>
   10400:	movweq	pc, #704	; 0x2c0	; <UNPREDICTABLE>
   10404:	ldrmi	fp, [r8, -r3, lsl #2]
   10408:	svclt	0x00004770
   1040c:	vqrshl.s8	d27, d0, d1
   10410:	vaddhn.i16	d16, q0, q14
   10414:	stmdavc	r3!, {r1, sl}
   10418:			; <UNDEFINED> instruction: 0xf7ffb91b
   1041c:	movwcs	pc, #8143	; 0x1fcf	; <UNPREDICTABLE>
   10420:	ldclt	0, cr7, [r0, #-140]	; 0xffffff74
   10424:	svclt	0x0000e7dc
   10428:	mov	ip, sp
   1042c:	sub	sp, sp, #8
   10430:	str	ip, [sp]
   10434:	str	lr, [sp, #4]
   10438:	vldr	s0, [pc, #48]	; 10470 <abort@plt+0x114>
   1043c:	mov	r2, #0
   10440:	cmp	r2, #10
   10444:	bge	1045c <abort@plt+0x100>
   10448:	add	r1, r0, r2, lsl #2
   1044c:	vldr	s4, [r1]
   10450:	vadd.f32	s0, s0, s4
   10454:	add	r2, r2, #1
   10458:	b	10440 <abort@plt+0xe4>
   1045c:	vmov.f32	s2, #36	; 0x41200000  10.0
   10460:	vdiv.f32	s0, s0, s2
   10464:	ldr	lr, [sp, #4]
   10468:	add	sp, sp, #8
   1046c:	bx	lr
   10470:	andeq	r0, r0, r0
   10474:	mov	ip, sp
   10478:	sub	sp, sp, #8
   1047c:	str	ip, [sp]
   10480:	str	lr, [sp, #4]
   10484:	vldr	s0, [r0]
   10488:	mov	r2, #1
   1048c:	cmp	r2, #10
   10490:	bge	104b8 <abort@plt+0x15c>
   10494:	add	r1, r0, r2, lsl #2
   10498:	vldr	s2, [r1]
   1049c:	vcmp.f32	s2, s0
   104a0:	vmrs	APSR_nzcv, fpscr
   104a4:	ble	104b0 <abort@plt+0x154>
   104a8:	add	r1, r0, r2, lsl #2
   104ac:	vldr	s0, [r1]
   104b0:	add	r2, r2, #1
   104b4:	b	1048c <abort@plt+0x130>
   104b8:	ldr	lr, [sp, #4]
   104bc:	add	sp, sp, #8
   104c0:	bx	lr
   104c4:	mov	ip, sp
   104c8:	sub	sp, sp, #8
   104cc:	str	ip, [sp]
   104d0:	str	lr, [sp, #4]
   104d4:	vldr	s0, [r0]
   104d8:	mov	r2, #1
   104dc:	cmp	r2, #10
   104e0:	bge	10508 <abort@plt+0x1ac>
   104e4:	add	r1, r0, r2, lsl #2
   104e8:	vldr	s2, [r1]
   104ec:	vcmp.f32	s2, s0
   104f0:	vmrs	APSR_nzcv, fpscr
   104f4:	bpl	10500 <abort@plt+0x1a4>
   104f8:	add	r1, r0, r2, lsl #2
   104fc:	vldr	s0, [r1]
   10500:	add	r2, r2, #1
   10504:	b	104dc <abort@plt+0x180>
   10508:	ldr	lr, [sp, #4]
   1050c:	add	sp, sp, #8
   10510:	bx	lr
   10514:	mov	ip, sp
   10518:	sub	sp, sp, #56	; 0x38
   1051c:	str	ip, [sp]
   10520:	str	lr, [sp, #4]
   10524:	str	r4, [sp, #8]
   10528:	mov	r4, #0
   1052c:	cmp	r4, #10
   10530:	bge	10558 <abort@plt+0x1fc>
   10534:	ldr	r0, [pc, #192]	; 105fc <abort@plt+0x2a0>
   10538:	add	r1, r4, #1
   1053c:	bl	1032c <printf@plt>
   10540:	ldr	r0, [pc, #188]	; 10604 <abort@plt+0x2a8>
   10544:	add	r1, sp, #16
   10548:	add	r1, r1, r4, lsl #2
   1054c:	bl	10344 <scanf@plt>
   10550:	add	r4, r4, #1
   10554:	b	1052c <abort@plt+0x1d0>
   10558:	add	r0, sp, #16
   1055c:	bl	10428 <abort@plt+0xcc>
   10560:	ldr	r0, [pc, #144]	; 105f8 <abort@plt+0x29c>
   10564:	vcvt.f64.f32	d2, s0
   10568:	vmov	r2, r3, d2
   1056c:	bl	1032c <printf@plt>
   10570:	add	r0, sp, #16
   10574:	bl	10474 <abort@plt+0x118>
   10578:	ldr	r0, [pc, #140]	; 1060c <abort@plt+0x2b0>
   1057c:	vcvt.f64.f32	d2, s0
   10580:	vmov	r2, r3, d2
   10584:	bl	1032c <printf@plt>
   10588:	add	r0, sp, #16
   1058c:	bl	104c4 <abort@plt+0x168>
   10590:	ldr	r0, [pc, #120]	; 10610 <abort@plt+0x2b4>
   10594:	vcvt.f64.f32	d2, s0
   10598:	vmov	r2, r3, d2
   1059c:	bl	1032c <printf@plt>
   105a0:	ldr	r0, [pc, #96]	; 10608 <abort@plt+0x2ac>
   105a4:	bl	1032c <printf@plt>
   105a8:	mov	r4, #0
   105ac:	cmp	r4, #10
   105b0:	bge	105d8 <abort@plt+0x27c>
   105b4:	ldr	r0, [pc, #56]	; 105f4 <abort@plt+0x298>
   105b8:	add	r1, sp, #16
   105bc:	add	r2, r1, r4, lsl #2
   105c0:	vldr	s6, [r2]
   105c4:	vcvt.f64.f32	d2, s6
   105c8:	vmov	r2, r3, d2
   105cc:	bl	1032c <printf@plt>
   105d0:	add	r4, r4, #1
   105d4:	b	105ac <abort@plt+0x250>
   105d8:	ldr	r0, [pc, #32]	; 10600 <abort@plt+0x2a4>
   105dc:	bl	1032c <printf@plt>
   105e0:	mov	r0, #0
   105e4:	ldr	r4, [sp, #8]
   105e8:	ldr	lr, [sp, #4]
   105ec:	add	sp, sp, #56	; 0x38
   105f0:	bx	lr
   105f4:	strdeq	r0, [r1], -r4
   105f8:	andeq	r0, r1, r3, lsr r7
   105fc:	andeq	r0, r1, r8, lsl #14
   10600:	andeq	r0, r1, r0, lsr #14
   10604:	andeq	r0, r1, r0, lsr r7
   10608:	andeq	r0, r1, r0, asr #14
   1060c:	strdeq	r0, [r1], -sl
   10610:	andeq	r0, r1, r2, lsr #14
   10614:	mvnsmi	lr, #737280	; 0xb4000
   10618:	cfmadd32mi	mvax0, mvfx4, mvfx12, mvfx7
   1061c:	strmi	r4, [r8], ip, lsl #26
   10620:			; <UNDEFINED> instruction: 0x4691447e
   10624:			; <UNDEFINED> instruction: 0xf7ff447d
   10628:	blne	1dcbff8 <abort@plt+0x1dbbc9c>
   1062c:	strhle	r1, [sl], -r6
   10630:	strcs	r3, [r0], #-3332	; 0xfffff2fc
   10634:	svccc	0x0004f855
   10638:	strbmi	r4, [r1], -sl, asr #12
   1063c:	strcc	r4, [r1], #-1592	; 0xfffff9c8
   10640:	adcmi	r4, r6, #152, 14	; 0x2600000
   10644:	pop	{r1, r2, r4, r5, r6, r7, r8, ip, lr, pc}
   10648:	svclt	0x000083f8
   1064c:	strdeq	r0, [r1], -r0	; <UNPREDICTABLE>
   10650:	andeq	r0, r1, r8, ror #17
   10654:	svclt	0x00004770

Disassembly of section .fini:

00010658 <.fini>:
   10658:	push	{r3, lr}
   1065c:	pop	{r3, pc}
