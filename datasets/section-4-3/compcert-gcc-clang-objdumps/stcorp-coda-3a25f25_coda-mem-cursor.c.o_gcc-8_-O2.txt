
../compcert-repos/stcorp-coda-3a25f25/CMakeFiles/coda_static.dir/libcoda/coda-mem-cursor.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <read_array>:
       0:	strd	r4, [sp, #-36]!	; 0xffffffdc
       4:	mov	r4, r0
       8:	strd	r6, [sp, #8]
       c:	mov	r7, r1
      10:	mov	r6, r2
      14:	strd	r8, [sp, #16]
      18:	mov	r8, r3
      1c:	strd	sl, [sp, #24]
      20:	str	lr, [sp, #32]
      24:	sub	sp, sp, #596	; 0x254
      28:	mov	r1, sp
      2c:	add	r2, sp, #4
      30:	bl	0 <coda_cursor_get_array_dim>
      34:	subs	r9, r0, #0
      38:	bne	118 <read_array+0x118>
      3c:	mov	r1, r4
      40:	mov	r2, #520	; 0x208
      44:	add	r0, sp, #72	; 0x48
      48:	bl	0 <memcpy>
      4c:	ldr	r1, [sp]
      50:	ldr	r2, [sp, #632]	; 0x278
      54:	cmp	r1, #1
      58:	movgt	r3, #0
      5c:	movle	r3, #1
      60:	cmp	r2, #1
      64:	orrne	r3, r3, #1
      68:	cmp	r3, #0
      6c:	beq	120 <read_array+0x120>
      70:	cmp	r1, #0
      74:	ble	bc <read_array+0xbc>
      78:	mov	r3, sp
      7c:	mov	r4, #1
      80:	add	r1, r3, r1, lsl #2
      84:	ldr	r2, [r3, #4]!
      88:	cmp	r1, r3
      8c:	mul	r4, r2, r4
      90:	bne	84 <read_array+0x84>
      94:	cmp	r4, #0
      98:	bgt	c0 <read_array+0xc0>
      9c:	mov	r0, r9
      a0:	add	sp, sp, #596	; 0x254
      a4:	ldrd	r4, [sp]
      a8:	ldrd	r6, [sp, #8]
      ac:	ldrd	r8, [sp, #16]
      b0:	ldrd	sl, [sp, #24]
      b4:	add	sp, sp, #32
      b8:	pop	{pc}		; (ldr pc, [sp], #4)
      bc:	mov	r4, #1
      c0:	mov	r1, #0
      c4:	add	r0, sp, #72	; 0x48
      c8:	bl	0 <coda_cursor_goto_array_element_by_index>
      cc:	subs	r5, r0, #0
      d0:	bne	118 <read_array+0x118>
      d4:	sub	sl, r4, #1
      d8:	b	e8 <read_array+0xe8>
      dc:	cmp	r5, r4
      e0:	add	r6, r6, r8
      e4:	bge	9c <read_array+0x9c>
      e8:	mov	r1, r6
      ec:	add	r0, sp, #72	; 0x48
      f0:	blx	r7
      f4:	cmp	r0, #0
      f8:	add	r0, sp, #72	; 0x48
      fc:	bne	118 <read_array+0x118>
     100:	cmp	sl, r5
     104:	add	r5, r5, #1
     108:	ble	dc <read_array+0xdc>
     10c:	bl	0 <coda_cursor_goto_next_array_element>
     110:	cmp	r0, #0
     114:	beq	dc <read_array+0xdc>
     118:	mvn	r9, #0
     11c:	b	9c <read_array+0x9c>
     120:	mov	lr, #1
     124:	mov	r3, sp
     128:	mov	r0, lr
     12c:	add	ip, sp, #40	; 0x28
     130:	mov	r2, r9
     134:	str	lr, [sp, #36]	; 0x24
     138:	ldr	lr, [r3, #4]!
     13c:	add	r2, r2, #1
     140:	cmp	r1, r2
     144:	mul	r0, lr, r0
     148:	str	r0, [ip], #4
     14c:	bgt	138 <read_array+0x138>
     150:	add	r3, sp, #592	; 0x250
     154:	add	r3, r3, r1, lsl #2
     158:	ldr	r5, [r3, #-556]	; 0xfffffdd4
     15c:	cmp	r5, #0
     160:	ble	9c <read_array+0x9c>
     164:	add	r3, sp, #592	; 0x250
     168:	add	r0, sp, #72	; 0x48
     16c:	add	r3, r3, r1, lsl #2
     170:	mov	r1, #0
     174:	ldr	sl, [r3, #-560]	; 0xfffffdd0
     178:	bl	0 <coda_cursor_goto_array_element_by_index>
     17c:	subs	fp, r0, #0
     180:	bne	118 <read_array+0x118>
     184:	mov	r4, fp
     188:	mla	r1, r8, r4, r6
     18c:	add	r0, sp, #72	; 0x48
     190:	blx	r7
     194:	cmp	r0, #0
     198:	bne	118 <read_array+0x118>
     19c:	add	fp, fp, #1
     1a0:	cmp	r5, fp
     1a4:	bgt	22c <read_array+0x22c>
     1a8:	add	r4, r4, sl
     1ac:	cmp	r5, r4
     1b0:	bgt	188 <read_array+0x188>
     1b4:	cmp	r5, fp
     1b8:	beq	9c <read_array+0x9c>
     1bc:	ldr	r3, [sp]
     1c0:	add	r2, sp, #592	; 0x250
     1c4:	add	r2, r2, r3, lsl #2
     1c8:	subs	r1, r3, #3
     1cc:	ldr	r0, [r2, #-556]	; 0xfffffdd4
     1d0:	ldr	r2, [r2, #-564]	; 0xfffffdcc
     1d4:	sub	r2, r2, r0
     1d8:	add	r4, r4, r2
     1dc:	bmi	188 <read_array+0x188>
     1e0:	add	r2, sp, #592	; 0x250
     1e4:	add	r2, r2, r3, lsl #2
     1e8:	ldr	r0, [r2, #-560]	; 0xfffffdd0
     1ec:	cmp	r0, r4
     1f0:	bgt	188 <read_array+0x188>
     1f4:	sub	r3, r3, #-1073741822	; 0xc0000002
     1f8:	add	r2, sp, #36	; 0x24
     1fc:	add	r3, r2, r3, lsl #2
     200:	b	210 <read_array+0x210>
     204:	ldr	r0, [r3, #4]
     208:	cmp	r0, r4
     20c:	bgt	188 <read_array+0x188>
     210:	ldr	r2, [r3, #-4]!
     214:	sub	r1, r1, #1
     218:	cmn	r1, #1
     21c:	sub	r2, r2, r0
     220:	add	r4, r4, r2
     224:	bne	204 <read_array+0x204>
     228:	b	188 <read_array+0x188>
     22c:	add	r0, sp, #72	; 0x48
     230:	bl	0 <coda_cursor_goto_next_array_element>
     234:	cmp	r0, #0
     238:	bne	118 <read_array+0x118>
     23c:	add	r4, r4, sl
     240:	cmp	r4, r5
     244:	blt	188 <read_array+0x188>
     248:	b	1bc <read_array+0x1bc>

0000024c <read_partial_array>:
     24c:	strd	r4, [sp, #-28]!	; 0xffffffe4
     250:	mov	r4, r2
     254:	mov	r2, #520	; 0x208
     258:	strd	r6, [sp, #8]
     25c:	mov	r6, r3
     260:	mov	r7, r1
     264:	strd	r8, [sp, #16]
     268:	mov	r1, r0
     26c:	str	lr, [sp, #24]
     270:	sub	sp, sp, #524	; 0x20c
     274:	mov	r0, sp
     278:	ldr	r8, [sp, #556]	; 0x22c
     27c:	bl	0 <memcpy>
     280:	cmp	r6, #0
     284:	bgt	2a4 <read_partial_array+0x58>
     288:	mov	r0, #0
     28c:	add	sp, sp, #524	; 0x20c
     290:	ldrd	r4, [sp]
     294:	ldrd	r6, [sp, #8]
     298:	ldrd	r8, [sp, #16]
     29c:	add	sp, sp, #24
     2a0:	pop	{pc}		; (ldr pc, [sp], #4)
     2a4:	mov	r1, r4
     2a8:	mov	r0, sp
     2ac:	bl	0 <coda_cursor_goto_array_element_by_index>
     2b0:	subs	r4, r0, #0
     2b4:	bne	300 <read_partial_array+0xb4>
     2b8:	sub	r9, r6, #1
     2bc:	ldr	r5, [sp, #552]	; 0x228
     2c0:	b	2d0 <read_partial_array+0x84>
     2c4:	cmp	r6, r4
     2c8:	add	r5, r5, r8
     2cc:	beq	288 <read_partial_array+0x3c>
     2d0:	mov	r1, r5
     2d4:	mov	r0, sp
     2d8:	blx	r7
     2dc:	cmp	r0, #0
     2e0:	mov	r0, sp
     2e4:	bne	300 <read_partial_array+0xb4>
     2e8:	cmp	r9, r4
     2ec:	add	r4, r4, #1
     2f0:	ble	2c4 <read_partial_array+0x78>
     2f4:	bl	0 <coda_cursor_goto_next_array_element>
     2f8:	cmp	r0, #0
     2fc:	beq	2c4 <read_partial_array+0x78>
     300:	mvn	r0, #0
     304:	b	28c <read_partial_array+0x40>

00000308 <transpose_array>:
     308:	strd	r4, [sp, #-36]!	; 0xffffffdc
     30c:	strd	r6, [sp, #8]
     310:	mov	r6, r2
     314:	strd	r8, [sp, #16]
     318:	strd	sl, [sp, #24]
     31c:	str	lr, [sp, #32]
     320:	sub	sp, sp, #164	; 0xa4
     324:	add	r5, sp, #20
     328:	mov	r2, r5
     32c:	str	r1, [sp, #8]
     330:	add	r1, sp, #16
     334:	bl	0 <coda_cursor_get_array_dim>
     338:	subs	r4, r0, #0
     33c:	bne	670 <transpose_array+0x368>
     340:	ldr	r9, [sp, #16]
     344:	cmp	r9, #1
     348:	ble	4c8 <transpose_array+0x1c0>
     34c:	sub	r3, r9, #-1073741823	; 0xc0000001
     350:	add	r1, sp, #16
     354:	lsl	r2, r3, #2
     358:	add	ip, sp, #84	; 0x54
     35c:	add	r0, sp, #120	; 0x78
     360:	mov	r7, #1
     364:	mov	r8, r4
     368:	add	r3, r5, r2
     36c:	cmp	r3, r5
     370:	ldr	sl, [r1, #4]!
     374:	str	r8, [ip, #4]!
     378:	ldr	lr, [r3], #-4
     37c:	mul	r7, sl, r7
     380:	str	lr, [r0, #4]!
     384:	bne	36c <transpose_array+0x64>
     388:	cmp	r7, #1
     38c:	ble	4c8 <transpose_array+0x1c0>
     390:	lsl	r9, r9, #2
     394:	add	r3, sp, #160	; 0xa0
     398:	mov	lr, #1
     39c:	add	ip, sp, #52	; 0x34
     3a0:	mov	r1, lr
     3a4:	add	r5, r3, r9
     3a8:	add	r3, sp, #124	; 0x7c
     3ac:	add	r0, r3, r2
     3b0:	add	r3, ip, r2
     3b4:	mov	r2, lr
     3b8:	str	lr, [r5, #-108]	; 0xffffff94
     3bc:	str	lr, [r5, #-36]	; 0xffffffdc
     3c0:	b	3c8 <transpose_array+0xc0>
     3c4:	ldr	r1, [r0], #-4
     3c8:	mul	r2, r1, r2
     3cc:	cmp	r3, ip
     3d0:	str	r2, [r3], #-4
     3d4:	bne	3c4 <transpose_array+0xbc>
     3d8:	mul	r0, r6, r7
     3dc:	add	r3, sp, #160	; 0xa0
     3e0:	add	r9, r3, r9
     3e4:	mov	r3, #0
     3e8:	str	r3, [r9, #-72]	; 0xffffffb8
     3ec:	str	r3, [r9, #-36]	; 0xffffffdc
     3f0:	str	r0, [sp, #12]
     3f4:	bl	0 <malloc>
     3f8:	subs	r5, r0, #0
     3fc:	beq	678 <transpose_array+0x370>
     400:	sub	r6, r6, #1
     404:	cmp	r6, #7
     408:	ldrls	pc, [pc, r6, lsl #2]
     40c:	b	6a4 <transpose_array+0x39c>
     410:	.word	0x000004e8
     414:	.word	0x0000056c
     418:	.word	0x000006a4
     41c:	.word	0x000005f0
     420:	.word	0x000006a4
     424:	.word	0x000006a4
     428:	.word	0x000006a4
     42c:	.word	0x00000430
     430:	ldr	r6, [sp, #8]
     434:	mov	r3, #0
     438:	mov	lr, r3
     43c:	ldr	r8, [sp, #52]	; 0x34
     440:	add	ip, r6, r7, lsl #3
     444:	ldr	r7, [sp, #124]	; 0x7c
     448:	lsl	r9, r3, #3
     44c:	add	r3, r3, r8
     450:	ldr	r2, [sp, #88]	; 0x58
     454:	ldrd	r0, [r6], #8
     458:	add	r2, r2, #1
     45c:	cmp	r2, r7
     460:	strd	r0, [r5, r9]
     464:	str	r2, [sp, #88]	; 0x58
     468:	bne	4a8 <transpose_array+0x1a0>
     46c:	add	r2, sp, #88	; 0x58
     470:	add	sl, sp, #56	; 0x38
     474:	add	r9, sp, #128	; 0x80
     478:	mov	r0, r8
     47c:	mov	r1, r7
     480:	str	lr, [r2]
     484:	mls	r3, r0, r1, r3
     488:	ldr	fp, [r2, #4]!
     48c:	ldr	r1, [r9], #4
     490:	ldr	r0, [sl], #4
     494:	add	fp, fp, #1
     498:	cmp	fp, r1
     49c:	str	fp, [r2]
     4a0:	add	r3, r0, r3
     4a4:	beq	480 <transpose_array+0x178>
     4a8:	cmp	r6, ip
     4ac:	bne	448 <transpose_array+0x140>
     4b0:	mov	r1, r5
     4b4:	ldr	r0, [sp, #8]
     4b8:	ldr	r2, [sp, #12]
     4bc:	bl	0 <memcpy>
     4c0:	mov	r0, r5
     4c4:	bl	0 <free>
     4c8:	mov	r0, r4
     4cc:	add	sp, sp, #164	; 0xa4
     4d0:	ldrd	r4, [sp]
     4d4:	ldrd	r6, [sp, #8]
     4d8:	ldrd	r8, [sp, #16]
     4dc:	ldrd	sl, [sp, #24]
     4e0:	add	sp, sp, #32
     4e4:	pop	{pc}		; (ldr pc, [sp], #4)
     4e8:	ldr	r3, [sp, #8]
     4ec:	mov	r2, #0
     4f0:	mov	r8, r2
     4f4:	ldr	fp, [sp, #52]	; 0x34
     4f8:	ldr	sl, [sp, #124]	; 0x7c
     4fc:	sub	r9, r3, #1
     500:	add	r7, r9, r7
     504:	ldr	r3, [sp, #88]	; 0x58
     508:	ldrb	r1, [r9, #1]!
     50c:	add	r3, r3, #1
     510:	cmp	r3, sl
     514:	strb	r1, [r5, r2]
     518:	add	r2, r2, fp
     51c:	str	r3, [sp, #88]	; 0x58
     520:	bne	560 <transpose_array+0x258>
     524:	add	r1, sp, #88	; 0x58
     528:	add	r6, sp, #56	; 0x38
     52c:	add	lr, sp, #128	; 0x80
     530:	mov	ip, fp
     534:	mov	r0, sl
     538:	str	r8, [r1]
     53c:	mls	r2, ip, r0, r2
     540:	ldr	r3, [r1, #4]!
     544:	ldr	r0, [lr], #4
     548:	ldr	ip, [r6], #4
     54c:	add	r3, r3, #1
     550:	cmp	r3, r0
     554:	str	r3, [r1]
     558:	add	r2, ip, r2
     55c:	beq	538 <transpose_array+0x230>
     560:	cmp	r7, r9
     564:	bne	504 <transpose_array+0x1fc>
     568:	b	4b0 <transpose_array+0x1a8>
     56c:	ldr	r9, [sp, #8]
     570:	mov	r2, #0
     574:	mov	r8, r2
     578:	ldr	fp, [sp, #52]	; 0x34
     57c:	ldr	sl, [sp, #124]	; 0x7c
     580:	add	r7, r9, r7, lsl #1
     584:	ldr	r3, [sp, #88]	; 0x58
     588:	lsl	r1, r2, #1
     58c:	add	r2, r2, fp
     590:	ldrh	r0, [r9], #2
     594:	add	r3, r3, #1
     598:	cmp	r3, sl
     59c:	strh	r0, [r5, r1]
     5a0:	str	r3, [sp, #88]	; 0x58
     5a4:	bne	5e4 <transpose_array+0x2dc>
     5a8:	add	r1, sp, #88	; 0x58
     5ac:	add	r6, sp, #56	; 0x38
     5b0:	add	lr, sp, #128	; 0x80
     5b4:	mov	ip, fp
     5b8:	mov	r0, sl
     5bc:	str	r8, [r1]
     5c0:	mls	r2, ip, r0, r2
     5c4:	ldr	r3, [r1, #4]!
     5c8:	ldr	r0, [lr], #4
     5cc:	ldr	ip, [r6], #4
     5d0:	add	r3, r3, #1
     5d4:	cmp	r3, r0
     5d8:	str	r3, [r1]
     5dc:	add	r2, ip, r2
     5e0:	beq	5bc <transpose_array+0x2b4>
     5e4:	cmp	r9, r7
     5e8:	bne	584 <transpose_array+0x27c>
     5ec:	b	4b0 <transpose_array+0x1a8>
     5f0:	ldr	r9, [sp, #8]
     5f4:	mov	r2, #0
     5f8:	mov	r8, r2
     5fc:	ldr	fp, [sp, #52]	; 0x34
     600:	ldr	sl, [sp, #124]	; 0x7c
     604:	add	r7, r9, r7, lsl #2
     608:	ldr	r3, [sp, #88]	; 0x58
     60c:	ldr	r1, [r9], #4
     610:	add	r3, r3, #1
     614:	cmp	sl, r3
     618:	str	r1, [r5, r2, lsl #2]
     61c:	add	r2, r2, fp
     620:	str	r3, [sp, #88]	; 0x58
     624:	bne	664 <transpose_array+0x35c>
     628:	add	r1, sp, #88	; 0x58
     62c:	add	r6, sp, #56	; 0x38
     630:	add	lr, sp, #128	; 0x80
     634:	mov	ip, fp
     638:	mov	r0, sl
     63c:	str	r8, [r1]
     640:	mls	r2, ip, r0, r2
     644:	ldr	r3, [r1, #4]!
     648:	ldr	r0, [lr], #4
     64c:	ldr	ip, [r6], #4
     650:	add	r3, r3, #1
     654:	cmp	r3, r0
     658:	str	r3, [r1]
     65c:	add	r2, ip, r2
     660:	beq	63c <transpose_array+0x334>
     664:	cmp	r7, r9
     668:	bne	608 <transpose_array+0x300>
     66c:	b	4b0 <transpose_array+0x1a8>
     670:	mvn	r4, #0
     674:	b	4c8 <transpose_array+0x1c0>
     678:	mov	r0, #93	; 0x5d
     67c:	movw	r3, #0
     680:	movt	r3, #0
     684:	movw	r1, #0
     688:	movt	r1, #0
     68c:	str	r0, [sp]
     690:	mvn	r0, #0
     694:	ldr	r2, [sp, #12]
     698:	mov	r4, r0
     69c:	bl	0 <coda_set_error>
     6a0:	b	4c8 <transpose_array+0x1c0>
     6a4:	movw	r3, #0
     6a8:	movt	r3, #0
     6ac:	movw	r1, #0
     6b0:	movt	r1, #0
     6b4:	movw	r0, #0
     6b8:	movt	r0, #0
     6bc:	mov	r2, #172	; 0xac
     6c0:	bl	0 <__assert_fail>

000006c4 <coda_mem_cursor_get_bit_size.part.0>:
     6c4:	str	r4, [sp, #-8]!
     6c8:	mov	r2, #520	; 0x208
     6cc:	mov	r4, r1
     6d0:	str	lr, [sp, #4]
     6d4:	sub	sp, sp, #520	; 0x208
     6d8:	mov	r1, r0
     6dc:	mov	r0, sp
     6e0:	bl	0 <memcpy>
     6e4:	mov	r0, sp
     6e8:	bl	0 <coda_cursor_use_base_type_of_special_type>
     6ec:	cmp	r0, #0
     6f0:	mvnne	r0, #0
     6f4:	beq	708 <coda_mem_cursor_get_bit_size.part.0+0x44>
     6f8:	add	sp, sp, #520	; 0x208
     6fc:	ldr	r4, [sp]
     700:	add	sp, sp, #4
     704:	pop	{pc}		; (ldr pc, [sp], #4)
     708:	mov	r1, r4
     70c:	mov	r0, sp
     710:	bl	0 <coda_cursor_get_bit_size>
     714:	add	sp, sp, #520	; 0x208
     718:	ldr	r4, [sp]
     71c:	add	sp, sp, #4
     720:	pop	{pc}		; (ldr pc, [sp], #4)

00000724 <coda_mem_cursor_update_offset>:
     724:	ldr	r3, [r0, #4]
     728:	add	r2, r0, r3, lsl #4
     72c:	ldr	r2, [r2, #-8]
     730:	ldr	r1, [r2, #8]
     734:	cmp	r1, #2
     738:	bxne	lr
     73c:	push	{lr}		; (str lr, [sp, #-4]!)
     740:	add	lr, r0, r3, lsl #4
     744:	ldr	ip, [r2, #24]
     748:	ldr	r1, [r2, #28]
     74c:	lsl	r2, r1, #3
     750:	orr	r2, r2, ip, lsr #29
     754:	lsl	ip, ip, #3
     758:	str	ip, [r0, r3, lsl #4]
     75c:	str	r2, [lr, #4]
     760:	pop	{pc}		; (ldr pc, [sp], #4)

00000764 <coda_mem_cursor_goto_record_field_by_index>:
     764:	strd	r4, [sp, #-24]!	; 0xffffffe8
     768:	ldr	r4, [r0, #4]
     76c:	add	r3, r0, r4, lsl #4
     770:	ldr	ip, [r3, #-8]
     774:	ldr	r3, [ip, #8]
     778:	str	r6, [sp, #8]
     77c:	strd	r8, [sp, #12]
     780:	str	lr, [sp, #20]
     784:	cmp	r3, #0
     788:	bne	7fc <coda_mem_cursor_goto_record_field_by_index+0x98>
     78c:	cmp	r1, #0
     790:	mov	r6, r1
     794:	ldr	r3, [ip, #16]
     798:	blt	840 <coda_mem_cursor_goto_record_field_by_index+0xdc>
     79c:	cmp	r1, r3
     7a0:	bge	840 <coda_mem_cursor_goto_record_field_by_index+0xdc>
     7a4:	ldr	r2, [ip, #20]
     7a8:	add	r3, r4, #1
     7ac:	mov	r5, r0
     7b0:	ldr	r2, [r2, r1, lsl #2]
     7b4:	str	r3, [r0, #4]
     7b8:	cmp	r2, #0
     7bc:	beq	81c <coda_mem_cursor_goto_record_field_by_index+0xb8>
     7c0:	lsl	r4, r4, #4
     7c4:	add	r1, r0, r4
     7c8:	str	r2, [r1, #8]
     7cc:	lsl	r3, r3, #4
     7d0:	add	r4, r5, r4
     7d4:	mvn	r8, #0
     7d8:	mvn	r9, #0
     7dc:	mov	r0, #0
     7e0:	str	r6, [r4, #12]
     7e4:	strd	r8, [r5, r3]
     7e8:	ldrd	r4, [sp]
     7ec:	ldr	r6, [sp, #8]
     7f0:	ldrd	r8, [sp, #12]
     7f4:	add	sp, sp, #20
     7f8:	pop	{pc}		; (ldr pc, [sp], #4)
     7fc:	cmp	r3, #2
     800:	bne	85c <coda_mem_cursor_goto_record_field_by_index+0xf8>
     804:	ldrd	r4, [sp]
     808:	ldr	r6, [sp, #8]
     80c:	ldrd	r8, [sp, #12]
     810:	ldr	lr, [sp, #20]
     814:	add	sp, sp, #24
     818:	b	0 <coda_ascbin_cursor_goto_record_field_by_index>
     81c:	ldr	r3, [ip, #4]
     820:	add	r4, r0, r4, lsl #4
     824:	ldr	r0, [r3]
     828:	bl	0 <coda_no_data_singleton>
     82c:	ldr	r3, [r5, #4]
     830:	str	r0, [r4, #8]
     834:	sub	r4, r3, #1
     838:	lsl	r4, r4, #4
     83c:	b	7cc <coda_mem_cursor_goto_record_field_by_index+0x68>
     840:	mvn	r0, #100	; 0x64
     844:	mov	r2, r6
     848:	movw	r1, #0
     84c:	movt	r1, #0
     850:	bl	0 <coda_set_error>
     854:	mvn	r0, #0
     858:	b	7e8 <coda_mem_cursor_goto_record_field_by_index+0x84>
     85c:	movw	r1, #0
     860:	movt	r1, #0
     864:	ldr	r3, [pc, #12]	; 878 <coda_mem_cursor_goto_record_field_by_index+0x114>
     868:	movw	r0, #0
     86c:	movt	r0, #0
     870:	mov	r2, #79	; 0x4f
     874:	bl	0 <__assert_fail>
     878:	.word	0x00000010

0000087c <coda_mem_cursor_goto_next_record_field>:
     87c:	ldr	r3, [r0, #4]
     880:	strd	r4, [sp, #-24]!	; 0xffffffe8
     884:	add	r2, r0, r3, lsl #4
     888:	ldr	r1, [r2, #-24]	; 0xffffffe8
     88c:	ldr	r2, [r1, #8]
     890:	strd	r6, [sp, #8]
     894:	str	r8, [sp, #16]
     898:	str	lr, [sp, #20]
     89c:	cmp	r2, #0
     8a0:	bne	910 <coda_mem_cursor_goto_next_record_field+0x94>
     8a4:	sub	r3, r3, #1
     8a8:	mov	r4, r0
     8ac:	ldr	r2, [r1, #16]
     8b0:	lsl	r0, r3, #4
     8b4:	add	r6, r4, r0
     8b8:	ldr	r5, [r6, #12]
     8bc:	adds	r5, r5, #1
     8c0:	bmi	950 <coda_mem_cursor_goto_next_record_field+0xd4>
     8c4:	cmp	r5, r2
     8c8:	bge	950 <coda_mem_cursor_goto_next_record_field+0xd4>
     8cc:	ldr	r2, [r1, #20]
     8d0:	ldr	r2, [r2, r5, lsl #2]
     8d4:	cmp	r2, #0
     8d8:	strne	r2, [r6, #8]
     8dc:	beq	930 <coda_mem_cursor_goto_next_record_field+0xb4>
     8e0:	add	r3, r4, r3, lsl #4
     8e4:	mvn	r6, #0
     8e8:	add	r4, r4, r0
     8ec:	mvn	r7, #0
     8f0:	mov	r0, #0
     8f4:	str	r5, [r4, #12]
     8f8:	strd	r6, [r3, #16]
     8fc:	ldrd	r4, [sp]
     900:	ldrd	r6, [sp, #8]
     904:	ldr	r8, [sp, #16]
     908:	add	sp, sp, #20
     90c:	pop	{pc}		; (ldr pc, [sp], #4)
     910:	cmp	r2, #2
     914:	bne	970 <coda_mem_cursor_goto_next_record_field+0xf4>
     918:	ldrd	r4, [sp]
     91c:	ldrd	r6, [sp, #8]
     920:	ldr	r8, [sp, #16]
     924:	ldr	lr, [sp, #20]
     928:	add	sp, sp, #24
     92c:	b	0 <coda_ascbin_cursor_goto_next_record_field>
     930:	ldr	r3, [r1, #4]
     934:	ldr	r0, [r3]
     938:	bl	0 <coda_no_data_singleton>
     93c:	ldr	r3, [r4, #4]
     940:	str	r0, [r6, #8]
     944:	sub	r3, r3, #1
     948:	lsl	r0, r3, #4
     94c:	b	8e0 <coda_mem_cursor_goto_next_record_field+0x64>
     950:	mov	r3, r2
     954:	mvn	r0, #100	; 0x64
     958:	mov	r2, r5
     95c:	movw	r1, #0
     960:	movt	r1, #0
     964:	bl	0 <coda_set_error>
     968:	mvn	r0, #0
     96c:	b	8fc <coda_mem_cursor_goto_next_record_field+0x80>
     970:	movw	r1, #0
     974:	movt	r1, #0
     978:	ldr	r3, [pc, #12]	; 98c <coda_mem_cursor_goto_next_record_field+0x110>
     97c:	movw	r0, #0
     980:	movt	r0, #0
     984:	mov	r2, #111	; 0x6f
     988:	bl	0 <__assert_fail>
     98c:	.word	0x0000003c

00000990 <coda_mem_cursor_goto_array_element>:
     990:	strd	r4, [sp, #-16]!
     994:	str	r6, [sp, #8]
     998:	str	lr, [sp, #12]
     99c:	ldr	lr, [r0, #4]
     9a0:	add	r3, r0, lr, lsl #4
     9a4:	ldr	r4, [r3, #-8]
     9a8:	ldr	r3, [r4, #8]
     9ac:	cmp	r3, #1
     9b0:	beq	9d0 <coda_mem_cursor_goto_array_element+0x40>
     9b4:	cmp	r3, #2
     9b8:	bne	a80 <coda_mem_cursor_goto_array_element+0xf0>
     9bc:	ldrd	r4, [sp]
     9c0:	ldr	r6, [sp, #8]
     9c4:	ldr	lr, [sp, #12]
     9c8:	add	sp, sp, #16
     9cc:	b	0 <coda_ascbin_cursor_goto_array_element>
     9d0:	cmp	r1, #1
     9d4:	bne	a64 <coda_mem_cursor_goto_array_element+0xd4>
     9d8:	ldr	r3, [pc, #188]	; a9c <coda_mem_cursor_goto_array_element+0x10c>
     9dc:	mrc	15, 0, r1, cr13, cr0, {3}
     9e0:	mov	ip, r0
     9e4:	ldr	r2, [r2]
     9e8:	ldr	r3, [pc, r3]
     9ec:	ldr	r3, [r1, r3]
     9f0:	cmp	r3, #0
     9f4:	beq	a0c <coda_mem_cursor_goto_array_element+0x7c>
     9f8:	cmp	r2, #0
     9fc:	ldr	r3, [r4, #16]
     a00:	blt	a4c <coda_mem_cursor_goto_array_element+0xbc>
     a04:	cmp	r2, r3
     a08:	bge	a4c <coda_mem_cursor_goto_array_element+0xbc>
     a0c:	ldr	r6, [r4, #20]
     a10:	add	r3, lr, #1
     a14:	add	lr, ip, lr, lsl #4
     a18:	lsl	r1, r3, #4
     a1c:	mvn	r5, #0
     a20:	mvn	r4, #0
     a24:	str	r3, [ip, #4]
     a28:	mov	r0, #0
     a2c:	ldr	r3, [r6, r2, lsl #2]
     a30:	str	r3, [lr, #8]
     a34:	str	r2, [lr, #12]
     a38:	strd	r4, [ip, r1]
     a3c:	ldrd	r4, [sp]
     a40:	ldr	r6, [sp, #8]
     a44:	add	sp, sp, #12
     a48:	pop	{pc}		; (ldr pc, [sp], #4)
     a4c:	mvn	r0, #106	; 0x6a
     a50:	movw	r1, #0
     a54:	movt	r1, #0
     a58:	bl	0 <coda_set_error>
     a5c:	mvn	r0, #0
     a60:	b	a3c <coda_mem_cursor_goto_array_element+0xac>
     a64:	mov	r2, r1
     a68:	mvn	r0, #105	; 0x69
     a6c:	movw	r1, #0
     a70:	movt	r1, #0
     a74:	bl	0 <coda_set_error>
     a78:	mvn	r0, #0
     a7c:	b	a3c <coda_mem_cursor_goto_array_element+0xac>
     a80:	movw	r1, #0
     a84:	movt	r1, #0
     a88:	ldr	r3, [pc, #16]	; aa0 <coda_mem_cursor_goto_array_element+0x110>
     a8c:	movw	r0, #0
     a90:	movt	r0, #0
     a94:	mov	r2, #169	; 0xa9
     a98:	bl	0 <__assert_fail>
     a9c:	.word	0x000000ac
     aa0:	.word	0x00000064

00000aa4 <coda_mem_cursor_goto_array_element_by_index>:
     aa4:	strd	r4, [sp, #-16]!
     aa8:	str	r6, [sp, #8]
     aac:	str	lr, [sp, #12]
     ab0:	ldr	lr, [r0, #4]
     ab4:	add	r3, r0, lr, lsl #4
     ab8:	ldr	r4, [r3, #-8]
     abc:	ldr	r3, [r4, #8]
     ac0:	cmp	r3, #1
     ac4:	beq	ae4 <coda_mem_cursor_goto_array_element_by_index+0x40>
     ac8:	cmp	r3, #2
     acc:	bne	b70 <coda_mem_cursor_goto_array_element_by_index+0xcc>
     ad0:	ldrd	r4, [sp]
     ad4:	ldr	r6, [sp, #8]
     ad8:	ldr	lr, [sp, #12]
     adc:	add	sp, sp, #16
     ae0:	b	0 <coda_ascbin_cursor_goto_array_element_by_index>
     ae4:	ldr	r3, [pc, #160]	; b8c <coda_mem_cursor_goto_array_element_by_index+0xe8>
     ae8:	mov	r2, r1
     aec:	mrc	15, 0, r1, cr13, cr0, {3}
     af0:	mov	ip, r0
     af4:	ldr	r3, [pc, r3]
     af8:	ldr	r3, [r1, r3]
     afc:	cmp	r3, #0
     b00:	beq	b18 <coda_mem_cursor_goto_array_element_by_index+0x74>
     b04:	cmp	r2, #0
     b08:	ldr	r3, [r4, #16]
     b0c:	blt	b58 <coda_mem_cursor_goto_array_element_by_index+0xb4>
     b10:	cmp	r2, r3
     b14:	bge	b58 <coda_mem_cursor_goto_array_element_by_index+0xb4>
     b18:	ldr	r6, [r4, #20]
     b1c:	add	r3, lr, #1
     b20:	add	lr, ip, lr, lsl #4
     b24:	lsl	r1, r3, #4
     b28:	mvn	r5, #0
     b2c:	mvn	r4, #0
     b30:	str	r3, [ip, #4]
     b34:	mov	r0, #0
     b38:	ldr	r3, [r6, r2, lsl #2]
     b3c:	str	r3, [lr, #8]
     b40:	str	r2, [lr, #12]
     b44:	strd	r4, [ip, r1]
     b48:	ldrd	r4, [sp]
     b4c:	ldr	r6, [sp, #8]
     b50:	add	sp, sp, #12
     b54:	pop	{pc}		; (ldr pc, [sp], #4)
     b58:	mvn	r0, #106	; 0x6a
     b5c:	movw	r1, #0
     b60:	movt	r1, #0
     b64:	bl	0 <coda_set_error>
     b68:	mvn	r0, #0
     b6c:	b	b48 <coda_mem_cursor_goto_array_element_by_index+0xa4>
     b70:	movw	r1, #0
     b74:	movt	r1, #0
     b78:	ldr	r3, [pc, #16]	; b90 <coda_mem_cursor_goto_array_element_by_index+0xec>
     b7c:	movw	r0, #0
     b80:	movt	r0, #0
     b84:	mov	r2, #197	; 0xc5
     b88:	bl	0 <__assert_fail>
     b8c:	.word	0x00000090
     b90:	.word	0x00000088

00000b94 <coda_mem_cursor_goto_next_array_element>:
     b94:	ldr	r3, [r0, #4]
     b98:	strd	r4, [sp, #-24]!	; 0xffffffe8
     b9c:	add	r2, r0, r3, lsl #4
     ba0:	ldr	r1, [r2, #-24]	; 0xffffffe8
     ba4:	ldr	r2, [r1, #8]
     ba8:	strd	r6, [sp, #8]
     bac:	str	r8, [sp, #16]
     bb0:	str	lr, [sp, #20]
     bb4:	cmp	r2, #1
     bb8:	beq	bdc <coda_mem_cursor_goto_next_array_element+0x48>
     bbc:	cmp	r2, #2
     bc0:	bne	c88 <coda_mem_cursor_goto_next_array_element+0xf4>
     bc4:	ldrd	r4, [sp]
     bc8:	ldrd	r6, [sp, #8]
     bcc:	ldr	r8, [sp, #16]
     bd0:	ldr	lr, [sp, #20]
     bd4:	add	sp, sp, #24
     bd8:	b	0 <coda_ascbin_cursor_goto_next_array_element>
     bdc:	sub	r3, r3, #1
     be0:	mov	r4, r0
     be4:	ldr	r2, [r1, #16]
     be8:	lsl	r0, r3, #4
     bec:	add	r6, r4, r0
     bf0:	ldr	r5, [r6, #12]
     bf4:	adds	r5, r5, #1
     bf8:	bmi	c68 <coda_mem_cursor_goto_next_array_element+0xd4>
     bfc:	cmp	r5, r2
     c00:	bge	c68 <coda_mem_cursor_goto_next_array_element+0xd4>
     c04:	ldr	r2, [r1, #20]
     c08:	ldr	r2, [r2, r5, lsl #2]
     c0c:	cmp	r2, #0
     c10:	strne	r2, [r6, #8]
     c14:	beq	c48 <coda_mem_cursor_goto_next_array_element+0xb4>
     c18:	add	r3, r4, r3, lsl #4
     c1c:	mvn	r6, #0
     c20:	add	r4, r4, r0
     c24:	mvn	r7, #0
     c28:	mov	r0, #0
     c2c:	str	r5, [r4, #12]
     c30:	strd	r6, [r3, #16]
     c34:	ldrd	r4, [sp]
     c38:	ldrd	r6, [sp, #8]
     c3c:	ldr	r8, [sp, #16]
     c40:	add	sp, sp, #20
     c44:	pop	{pc}		; (ldr pc, [sp], #4)
     c48:	ldr	r3, [r1, #4]
     c4c:	ldr	r0, [r3]
     c50:	bl	0 <coda_no_data_singleton>
     c54:	ldr	r3, [r4, #4]
     c58:	str	r0, [r6, #8]
     c5c:	sub	r3, r3, #1
     c60:	lsl	r0, r3, #4
     c64:	b	c18 <coda_mem_cursor_goto_next_array_element+0x84>
     c68:	mov	r3, r2
     c6c:	mvn	r0, #106	; 0x6a
     c70:	mov	r2, r5
     c74:	movw	r1, #0
     c78:	movt	r1, #0
     c7c:	bl	0 <coda_set_error>
     c80:	mvn	r0, #0
     c84:	b	c34 <coda_mem_cursor_goto_next_array_element+0xa0>
     c88:	movw	r1, #0
     c8c:	movt	r1, #0
     c90:	ldr	r3, [pc, #12]	; ca4 <coda_mem_cursor_goto_next_array_element+0x110>
     c94:	movw	r0, #0
     c98:	movt	r0, #0
     c9c:	mov	r2, #229	; 0xe5
     ca0:	bl	0 <__assert_fail>
     ca4:	.word	0x000000b4

00000ca8 <coda_mem_cursor_goto_attributes>:
     ca8:	strd	r4, [sp, #-24]!	; 0xffffffe8
     cac:	mov	r5, r0
     cb0:	ldr	r4, [r0, #4]
     cb4:	add	r2, r0, r4, lsl #4
     cb8:	add	r3, r4, #1
     cbc:	ldr	r1, [r2, #-8]
     cc0:	ldr	r2, [r1, #12]
     cc4:	strd	r6, [sp, #8]
     cc8:	str	r8, [sp, #16]
     ccc:	str	lr, [sp, #20]
     cd0:	str	r3, [r0, #4]
     cd4:	cmp	r2, #0
     cd8:	beq	d1c <coda_mem_cursor_goto_attributes+0x74>
     cdc:	lsl	r4, r4, #4
     ce0:	add	r1, r0, r4
     ce4:	str	r2, [r1, #8]
     ce8:	lsl	r3, r3, #4
     cec:	add	r4, r5, r4
     cf0:	mvn	r6, #0
     cf4:	mvn	r7, #0
     cf8:	mvn	r2, #0
     cfc:	ldr	r8, [sp, #16]
     d00:	mov	r0, #0
     d04:	str	r2, [r4, #12]
     d08:	strd	r6, [r5, r3]
     d0c:	ldrd	r4, [sp]
     d10:	ldrd	r6, [sp, #8]
     d14:	add	sp, sp, #20
     d18:	pop	{pc}		; (ldr pc, [sp], #4)
     d1c:	ldr	r3, [r1, #4]
     d20:	add	r4, r0, r4, lsl #4
     d24:	ldr	r0, [r3]
     d28:	bl	0 <coda_mem_empty_record>
     d2c:	ldr	r3, [r5, #4]
     d30:	str	r0, [r4, #8]
     d34:	sub	r4, r3, #1
     d38:	lsl	r4, r4, #4
     d3c:	b	ce8 <coda_mem_cursor_goto_attributes+0x40>

00000d40 <coda_mem_cursor_use_base_type_of_special_type>:
     d40:	ldr	r3, [r0, #4]
     d44:	sub	r3, r3, #1
     d48:	add	r0, r0, r3, lsl #4
     d4c:	ldr	r3, [r0, #8]
     d50:	ldr	r2, [r3, #8]
     d54:	cmp	r2, #3
     d58:	beq	d78 <coda_mem_cursor_use_base_type_of_special_type+0x38>
     d5c:	cmp	r2, #2
     d60:	bne	d88 <coda_mem_cursor_use_base_type_of_special_type+0x48>
     d64:	ldr	r3, [r3, #4]
     d68:	ldr	r3, [r3, #44]	; 0x2c
     d6c:	str	r3, [r0, #8]
     d70:	mov	r0, #0
     d74:	bx	lr
     d78:	ldr	r3, [r3, #16]
     d7c:	str	r3, [r0, #8]
     d80:	mov	r0, #0
     d84:	bx	lr
     d88:	movw	r1, #0
     d8c:	movt	r1, #0
     d90:	ldr	r3, [pc, #20]	; dac <coda_mem_cursor_use_base_type_of_special_type+0x6c>
     d94:	movw	r0, #0
     d98:	movt	r0, #0
     d9c:	str	r4, [sp, #-8]!
     da0:	movw	r2, #263	; 0x107
     da4:	str	lr, [sp, #4]
     da8:	bl	0 <__assert_fail>
     dac:	.word	0x000000dc

00000db0 <coda_mem_cursor_get_bit_size>:
     db0:	ldr	ip, [r0, #4]
     db4:	strd	r4, [sp, #-16]!
     db8:	add	r3, r0, ip, lsl #4
     dbc:	ldr	r5, [r3, #-8]
     dc0:	ldr	r3, [r5, #8]
     dc4:	str	r6, [sp, #8]
     dc8:	str	lr, [sp, #12]
     dcc:	cmp	r3, #3
     dd0:	beq	e54 <coda_mem_cursor_get_bit_size+0xa4>
     dd4:	cmp	r3, #2
     dd8:	beq	dfc <coda_mem_cursor_get_bit_size+0x4c>
     ddc:	mvn	r4, #0
     de0:	mvn	r5, #0
     de4:	mov	r0, #0
     de8:	strd	r4, [r1]
     dec:	ldrd	r4, [sp]
     df0:	ldr	r6, [sp, #8]
     df4:	add	sp, sp, #12
     df8:	pop	{pc}		; (ldr pc, [sp], #4)
     dfc:	ldr	r3, [r5, #4]
     e00:	mov	r4, r1
     e04:	ldr	r3, [r3]
     e08:	cmp	r3, #0
     e0c:	beq	e68 <coda_mem_cursor_get_bit_size+0xb8>
     e10:	bl	0 <coda_bin_cursor_get_bit_size>
     e14:	cmp	r0, #0
     e18:	bne	e74 <coda_mem_cursor_get_bit_size+0xc4>
     e1c:	ldrd	r2, [r4]
     e20:	cmp	r2, #0
     e24:	sbcs	r3, r3, #0
     e28:	movge	r0, #0
     e2c:	bge	dec <coda_mem_cursor_get_bit_size+0x3c>
     e30:	ldr	r2, [r5, #16]
     e34:	mov	r0, #0
     e38:	ldr	r6, [sp, #8]
     e3c:	lsl	r2, r2, #3
     e40:	asr	r3, r2, #31
     e44:	strd	r2, [r4]
     e48:	ldrd	r4, [sp]
     e4c:	add	sp, sp, #12
     e50:	pop	{pc}		; (ldr pc, [sp], #4)
     e54:	ldrd	r4, [sp]
     e58:	ldr	r6, [sp, #8]
     e5c:	ldr	lr, [sp, #12]
     e60:	add	sp, sp, #16
     e64:	b	6c4 <coda_mem_cursor_get_bit_size.part.0>
     e68:	bl	0 <coda_ascii_cursor_get_bit_size>
     e6c:	cmp	r0, #0
     e70:	beq	e1c <coda_mem_cursor_get_bit_size+0x6c>
     e74:	mvn	r0, #0
     e78:	b	dec <coda_mem_cursor_get_bit_size+0x3c>

00000e7c <coda_mem_cursor_get_string_length>:
     e7c:	str	r4, [sp, #-16]!
     e80:	mov	r4, r1
     e84:	strd	r6, [sp, #4]
     e88:	str	lr, [sp, #12]
     e8c:	sub	sp, sp, #8
     e90:	mov	r1, sp
     e94:	bl	db0 <coda_mem_cursor_get_bit_size>
     e98:	cmp	r0, #0
     e9c:	bne	ed8 <coda_mem_cursor_get_string_length+0x5c>
     ea0:	ldrd	r6, [sp]
     ea4:	cmp	r6, #0
     ea8:	sbcs	r3, r7, #0
     eac:	mvnlt	r3, #0
     eb0:	strlt	r3, [r4]
     eb4:	blt	ec4 <coda_mem_cursor_get_string_length+0x48>
     eb8:	lsr	r2, r6, #3
     ebc:	orr	r2, r2, r7, lsl #29
     ec0:	str	r2, [r4]
     ec4:	add	sp, sp, #8
     ec8:	ldr	r4, [sp]
     ecc:	ldrd	r6, [sp, #4]
     ed0:	add	sp, sp, #12
     ed4:	pop	{pc}		; (ldr pc, [sp], #4)
     ed8:	mvn	r0, #0
     edc:	b	ec4 <coda_mem_cursor_get_string_length+0x48>

00000ee0 <coda_mem_cursor_get_num_elements>:
     ee0:	ldr	r3, [r0, #4]
     ee4:	add	r3, r0, r3, lsl #4
     ee8:	ldr	r2, [r3, #-8]
     eec:	ldr	r3, [r2, #8]
     ef0:	cmp	r3, #3
     ef4:	ldrls	pc, [pc, r3, lsl #2]
     ef8:	b	f14 <coda_mem_cursor_get_num_elements+0x34>
     efc:	.word	0x00000f1c
     f00:	.word	0x00000f1c
     f04:	.word	0x00000f2c
     f08:	.word	0x00000f0c
     f0c:	mov	r3, #1
     f10:	str	r3, [r1]
     f14:	mov	r0, #0
     f18:	bx	lr
     f1c:	ldr	r3, [r2, #16]
     f20:	mov	r0, #0
     f24:	str	r3, [r1]
     f28:	bx	lr
     f2c:	ldr	r3, [r2, #4]
     f30:	ldr	r3, [r3]
     f34:	cmp	r3, #0
     f38:	beq	f40 <coda_mem_cursor_get_num_elements+0x60>
     f3c:	b	0 <coda_bin_cursor_get_num_elements>
     f40:	b	0 <coda_ascii_cursor_get_num_elements>

00000f44 <coda_mem_cursor_get_record_field_available_status>:
     f44:	str	r4, [sp, #-8]!
     f48:	str	lr, [sp, #4]
     f4c:	ldr	lr, [r0, #4]
     f50:	add	ip, r0, lr, lsl #4
     f54:	ldr	lr, [ip, #-8]
     f58:	ldr	ip, [lr, #8]
     f5c:	cmp	ip, #2
     f60:	beq	fac <coda_mem_cursor_get_record_field_available_status+0x68>
     f64:	cmp	ip, #0
     f68:	mov	r4, r2
     f6c:	mov	r2, r1
     f70:	bne	fd4 <coda_mem_cursor_get_record_field_available_status+0x90>
     f74:	cmp	r1, #0
     f78:	ldr	r3, [lr, #16]
     f7c:	blt	fbc <coda_mem_cursor_get_record_field_available_status+0x78>
     f80:	cmp	r1, r3
     f84:	bge	fbc <coda_mem_cursor_get_record_field_available_status+0x78>
     f88:	ldr	r3, [lr, #20]
     f8c:	mov	r0, ip
     f90:	ldr	r3, [r3, r1, lsl #2]
     f94:	adds	r3, r3, #0
     f98:	movne	r3, #1
     f9c:	str	r3, [r4]
     fa0:	ldr	r4, [sp]
     fa4:	add	sp, sp, #4
     fa8:	pop	{pc}		; (ldr pc, [sp], #4)
     fac:	ldr	r4, [sp]
     fb0:	ldr	lr, [sp, #4]
     fb4:	add	sp, sp, #8
     fb8:	b	0 <coda_ascbin_cursor_get_record_field_available_status>
     fbc:	mvn	r0, #100	; 0x64
     fc0:	movw	r1, #0
     fc4:	movt	r1, #0
     fc8:	bl	0 <coda_set_error>
     fcc:	mvn	r0, #0
     fd0:	b	fa0 <coda_mem_cursor_get_record_field_available_status+0x5c>
     fd4:	movw	r1, #0
     fd8:	movt	r1, #0
     fdc:	ldr	r3, [pc, #12]	; ff0 <coda_mem_cursor_get_record_field_available_status+0xac>
     fe0:	movw	r0, #0
     fe4:	movt	r0, #0
     fe8:	mov	r2, #364	; 0x16c
     fec:	bl	0 <__assert_fail>
     ff0:	.word	0x0000010c

00000ff4 <coda_mem_cursor_get_available_union_field_index>:
     ff4:	ldr	r2, [r0, #4]
     ff8:	str	r4, [sp, #-8]!
     ffc:	add	r3, r0, r2, lsl #4
    1000:	ldr	r2, [r3, #-8]
    1004:	ldr	ip, [r2, #8]
    1008:	str	lr, [sp, #4]
    100c:	cmp	ip, #0
    1010:	bne	1074 <coda_mem_cursor_get_available_union_field_index+0x80>
    1014:	ldr	r0, [r2, #16]
    1018:	cmp	r0, #0
    101c:	ble	1050 <coda_mem_cursor_get_available_union_field_index+0x5c>
    1020:	ldr	r2, [r2, #20]
    1024:	mov	lr, r1
    1028:	ldr	r3, [r2]
    102c:	cmp	r3, #0
    1030:	beq	1044 <coda_mem_cursor_get_available_union_field_index+0x50>
    1034:	b	108c <coda_mem_cursor_get_available_union_field_index+0x98>
    1038:	ldr	r1, [r2, #4]!
    103c:	cmp	r1, #0
    1040:	bne	1090 <coda_mem_cursor_get_available_union_field_index+0x9c>
    1044:	add	r3, r3, #1
    1048:	cmp	r0, r3
    104c:	bne	1038 <coda_mem_cursor_get_available_union_field_index+0x44>
    1050:	movw	r1, #0
    1054:	movt	r1, #0
    1058:	movw	r0, #65236	; 0xfed4
    105c:	movt	r0, #65535	; 0xffff
    1060:	bl	0 <coda_set_error>
    1064:	ldr	r4, [sp]
    1068:	add	sp, sp, #4
    106c:	mvn	r0, #0
    1070:	pop	{pc}		; (ldr pc, [sp], #4)
    1074:	cmp	ip, #2
    1078:	bne	10a4 <coda_mem_cursor_get_available_union_field_index+0xb0>
    107c:	ldr	r4, [sp]
    1080:	ldr	lr, [sp, #4]
    1084:	add	sp, sp, #8
    1088:	b	0 <coda_ascbin_cursor_get_available_union_field_index>
    108c:	mov	r3, ip
    1090:	ldr	r4, [sp]
    1094:	add	sp, sp, #4
    1098:	mov	r0, #0
    109c:	str	r3, [lr]
    10a0:	pop	{pc}		; (ldr pc, [sp], #4)
    10a4:	movw	r1, #0
    10a8:	movt	r1, #0
    10ac:	ldr	r3, [pc, #12]	; 10c0 <coda_mem_cursor_get_available_union_field_index+0xcc>
    10b0:	movw	r0, #0
    10b4:	movt	r0, #0
    10b8:	movw	r2, #399	; 0x18f
    10bc:	bl	0 <__assert_fail>
    10c0:	.word	0x00000140

000010c4 <coda_mem_cursor_goto_available_union_field>:
    10c4:	ldr	r3, [r0, #4]
    10c8:	strd	r4, [sp, #-20]!	; 0xffffffec
    10cc:	add	r3, r0, r3, lsl #4
    10d0:	ldr	r5, [r3, #-8]
    10d4:	ldr	r3, [r5, #8]
    10d8:	strd	r6, [sp, #8]
    10dc:	str	lr, [sp, #16]
    10e0:	sub	sp, sp, #12
    10e4:	cmp	r3, #0
    10e8:	beq	110c <coda_mem_cursor_goto_available_union_field+0x48>
    10ec:	cmp	r3, #2
    10f0:	bne	1158 <coda_mem_cursor_goto_available_union_field+0x94>
    10f4:	bl	0 <coda_ascbin_cursor_goto_available_union_field>
    10f8:	add	sp, sp, #12
    10fc:	ldrd	r4, [sp]
    1100:	ldrd	r6, [sp, #8]
    1104:	add	sp, sp, #16
    1108:	pop	{pc}		; (ldr pc, [sp], #4)
    110c:	add	r1, sp, #4
    1110:	mov	r4, r0
    1114:	bl	ff4 <coda_mem_cursor_get_available_union_field_index>
    1118:	cmp	r0, #0
    111c:	mvnne	r0, #0
    1120:	bne	10f8 <coda_mem_cursor_goto_available_union_field+0x34>
    1124:	ldr	r1, [sp, #4]
    1128:	mvn	r6, #0
    112c:	mvn	r7, #0
    1130:	ldr	r2, [r5, #20]
    1134:	ldr	r3, [r4, #4]
    1138:	ldr	ip, [r2, r1, lsl #2]
    113c:	sub	r2, r3, #1
    1140:	lsl	r3, r3, #4
    1144:	add	r2, r4, r2, lsl #4
    1148:	str	ip, [r2, #8]
    114c:	str	r1, [r2, #12]
    1150:	strd	r6, [r4, r3]
    1154:	b	10f8 <coda_mem_cursor_goto_available_union_field+0x34>
    1158:	movw	r1, #0
    115c:	movt	r1, #0
    1160:	ldr	r3, [pc, #12]	; 1174 <coda_mem_cursor_goto_available_union_field+0xb0>
    1164:	movw	r0, #0
    1168:	movt	r0, #0
    116c:	mov	r2, #134	; 0x86
    1170:	bl	0 <__assert_fail>
    1174:	.word	0x00000170

00001178 <coda_mem_cursor_get_array_dim>:
    1178:	strd	r4, [sp, #-16]!
    117c:	str	r6, [sp, #8]
    1180:	str	lr, [sp, #12]
    1184:	ldr	lr, [r0, #4]
    1188:	add	r3, r0, lr, lsl #4
    118c:	ldr	r4, [r3, #-8]
    1190:	ldr	lr, [r4, #8]
    1194:	cmp	lr, #2
    1198:	beq	1208 <coda_mem_cursor_get_array_dim+0x90>
    119c:	cmp	lr, #1
    11a0:	bne	121c <coda_mem_cursor_get_array_dim+0xa4>
    11a4:	ldr	r3, [r4, #4]
    11a8:	mov	ip, r2
    11ac:	ldr	r2, [r3, #44]	; 0x2c
    11b0:	cmp	r2, #0
    11b4:	blt	11f8 <coda_mem_cursor_get_array_dim+0x80>
    11b8:	ldr	r0, [r3, #48]	; 0x30
    11bc:	cmp	r0, #0
    11c0:	str	r0, [r1]
    11c4:	ble	11e4 <coda_mem_cursor_get_array_dim+0x6c>
    11c8:	add	r3, r3, #52	; 0x34
    11cc:	sub	r2, ip, #4
    11d0:	add	r0, r3, r0, lsl #2
    11d4:	ldr	r1, [r3], #4
    11d8:	cmp	r3, r0
    11dc:	str	r1, [r2, #4]!
    11e0:	bne	11d4 <coda_mem_cursor_get_array_dim+0x5c>
    11e4:	ldrd	r4, [sp]
    11e8:	mov	r0, #0
    11ec:	ldr	r6, [sp, #8]
    11f0:	add	sp, sp, #12
    11f4:	pop	{pc}		; (ldr pc, [sp], #4)
    11f8:	ldr	r3, [r4, #16]
    11fc:	str	lr, [r1]
    1200:	str	r3, [ip]
    1204:	b	11e4 <coda_mem_cursor_get_array_dim+0x6c>
    1208:	ldrd	r4, [sp]
    120c:	ldr	r6, [sp, #8]
    1210:	ldr	lr, [sp, #12]
    1214:	add	sp, sp, #16
    1218:	b	0 <coda_ascbin_cursor_get_array_dim>
    121c:	movw	r1, #0
    1220:	movt	r1, #0
    1224:	ldr	r3, [pc, #12]	; 1238 <coda_mem_cursor_get_array_dim+0xc0>
    1228:	movw	r0, #0
    122c:	movt	r0, #0
    1230:	movw	r2, #413	; 0x19d
    1234:	bl	0 <__assert_fail>
    1238:	.word	0x0000019c

0000123c <coda_mem_cursor_read_int8>:
    123c:	ldr	r2, [r0, #4]
    1240:	add	r3, r0, r2, lsl #4
    1244:	ldr	r3, [r3, #-8]
    1248:	ldr	r2, [r3, #8]
    124c:	cmp	r2, #2
    1250:	bne	126c <coda_mem_cursor_read_int8+0x30>
    1254:	ldr	r3, [r3, #4]
    1258:	ldr	r3, [r3]
    125c:	cmp	r3, #0
    1260:	beq	1268 <coda_mem_cursor_read_int8+0x2c>
    1264:	b	0 <coda_bin_cursor_read_int8>
    1268:	b	0 <coda_ascii_cursor_read_int8>
    126c:	movw	r1, #0
    1270:	movt	r1, #0
    1274:	ldr	r3, [pc, #20]	; 1290 <coda_mem_cursor_read_int8+0x54>
    1278:	movw	r0, #0
    127c:	movt	r0, #0
    1280:	str	r4, [sp, #-8]!
    1284:	movw	r2, #439	; 0x1b7
    1288:	str	lr, [sp, #4]
    128c:	bl	0 <__assert_fail>
    1290:	.word	0x000001bc

00001294 <coda_mem_cursor_read_uint8>:
    1294:	ldr	r2, [r0, #4]
    1298:	add	r3, r0, r2, lsl #4
    129c:	ldr	r3, [r3, #-8]
    12a0:	ldr	r2, [r3, #8]
    12a4:	cmp	r2, #2
    12a8:	bne	12c4 <coda_mem_cursor_read_uint8+0x30>
    12ac:	ldr	r3, [r3, #4]
    12b0:	ldr	r3, [r3]
    12b4:	cmp	r3, #0
    12b8:	beq	12c0 <coda_mem_cursor_read_uint8+0x2c>
    12bc:	b	0 <coda_bin_cursor_read_uint8>
    12c0:	b	0 <coda_ascii_cursor_read_uint8>
    12c4:	movw	r1, #0
    12c8:	movt	r1, #0
    12cc:	ldr	r3, [pc, #20]	; 12e8 <coda_mem_cursor_read_uint8+0x54>
    12d0:	movw	r0, #0
    12d4:	movt	r0, #0
    12d8:	str	r4, [sp, #-8]!
    12dc:	movw	r2, #451	; 0x1c3
    12e0:	str	lr, [sp, #4]
    12e4:	bl	0 <__assert_fail>
    12e8:	.word	0x000001d8

000012ec <coda_mem_cursor_read_int16>:
    12ec:	ldr	r2, [r0, #4]
    12f0:	add	r3, r0, r2, lsl #4
    12f4:	ldr	r3, [r3, #-8]
    12f8:	ldr	r2, [r3, #8]
    12fc:	cmp	r2, #2
    1300:	bne	131c <coda_mem_cursor_read_int16+0x30>
    1304:	ldr	r3, [r3, #4]
    1308:	ldr	r3, [r3]
    130c:	cmp	r3, #0
    1310:	beq	1318 <coda_mem_cursor_read_int16+0x2c>
    1314:	b	0 <coda_bin_cursor_read_int16>
    1318:	b	0 <coda_ascii_cursor_read_int16>
    131c:	movw	r1, #0
    1320:	movt	r1, #0
    1324:	ldr	r3, [pc, #20]	; 1340 <coda_mem_cursor_read_int16+0x54>
    1328:	movw	r0, #0
    132c:	movt	r0, #0
    1330:	str	r4, [sp, #-8]!
    1334:	movw	r2, #463	; 0x1cf
    1338:	str	lr, [sp, #4]
    133c:	bl	0 <__assert_fail>
    1340:	.word	0x000001f4

00001344 <coda_mem_cursor_read_uint16>:
    1344:	ldr	r2, [r0, #4]
    1348:	add	r3, r0, r2, lsl #4
    134c:	ldr	r3, [r3, #-8]
    1350:	ldr	r2, [r3, #8]
    1354:	cmp	r2, #2
    1358:	bne	1374 <coda_mem_cursor_read_uint16+0x30>
    135c:	ldr	r3, [r3, #4]
    1360:	ldr	r3, [r3]
    1364:	cmp	r3, #0
    1368:	beq	1370 <coda_mem_cursor_read_uint16+0x2c>
    136c:	b	0 <coda_bin_cursor_read_uint16>
    1370:	b	0 <coda_ascii_cursor_read_uint16>
    1374:	movw	r1, #0
    1378:	movt	r1, #0
    137c:	ldr	r3, [pc, #20]	; 1398 <coda_mem_cursor_read_uint16+0x54>
    1380:	movw	r0, #0
    1384:	movt	r0, #0
    1388:	str	r4, [sp, #-8]!
    138c:	movw	r2, #475	; 0x1db
    1390:	str	lr, [sp, #4]
    1394:	bl	0 <__assert_fail>
    1398:	.word	0x00000210

0000139c <coda_mem_cursor_read_int32>:
    139c:	ldr	r2, [r0, #4]
    13a0:	add	r3, r0, r2, lsl #4
    13a4:	ldr	r3, [r3, #-8]
    13a8:	ldr	r2, [r3, #8]
    13ac:	cmp	r2, #2
    13b0:	bne	13cc <coda_mem_cursor_read_int32+0x30>
    13b4:	ldr	r3, [r3, #4]
    13b8:	ldr	r3, [r3]
    13bc:	cmp	r3, #0
    13c0:	beq	13c8 <coda_mem_cursor_read_int32+0x2c>
    13c4:	b	0 <coda_bin_cursor_read_int32>
    13c8:	b	0 <coda_ascii_cursor_read_int32>
    13cc:	movw	r1, #0
    13d0:	movt	r1, #0
    13d4:	ldr	r3, [pc, #20]	; 13f0 <coda_mem_cursor_read_int32+0x54>
    13d8:	movw	r0, #0
    13dc:	movt	r0, #0
    13e0:	str	r4, [sp, #-8]!
    13e4:	movw	r2, #487	; 0x1e7
    13e8:	str	lr, [sp, #4]
    13ec:	bl	0 <__assert_fail>
    13f0:	.word	0x0000022c

000013f4 <coda_mem_cursor_read_uint32>:
    13f4:	ldr	r2, [r0, #4]
    13f8:	add	r3, r0, r2, lsl #4
    13fc:	ldr	r3, [r3, #-8]
    1400:	ldr	r2, [r3, #8]
    1404:	cmp	r2, #2
    1408:	bne	1424 <coda_mem_cursor_read_uint32+0x30>
    140c:	ldr	r3, [r3, #4]
    1410:	ldr	r3, [r3]
    1414:	cmp	r3, #0
    1418:	beq	1420 <coda_mem_cursor_read_uint32+0x2c>
    141c:	b	0 <coda_bin_cursor_read_uint32>
    1420:	b	0 <coda_ascii_cursor_read_uint32>
    1424:	movw	r1, #0
    1428:	movt	r1, #0
    142c:	ldr	r3, [pc, #20]	; 1448 <coda_mem_cursor_read_uint32+0x54>
    1430:	movw	r0, #0
    1434:	movt	r0, #0
    1438:	str	r4, [sp, #-8]!
    143c:	movw	r2, #499	; 0x1f3
    1440:	str	lr, [sp, #4]
    1444:	bl	0 <__assert_fail>
    1448:	.word	0x00000248

0000144c <coda_mem_cursor_read_int64>:
    144c:	ldr	r2, [r0, #4]
    1450:	add	r3, r0, r2, lsl #4
    1454:	ldr	r3, [r3, #-8]
    1458:	ldr	r2, [r3, #8]
    145c:	cmp	r2, #2
    1460:	bne	147c <coda_mem_cursor_read_int64+0x30>
    1464:	ldr	r3, [r3, #4]
    1468:	ldr	r3, [r3]
    146c:	cmp	r3, #0
    1470:	beq	1478 <coda_mem_cursor_read_int64+0x2c>
    1474:	b	0 <coda_bin_cursor_read_int64>
    1478:	b	0 <coda_ascii_cursor_read_int64>
    147c:	movw	r1, #0
    1480:	movt	r1, #0
    1484:	ldr	r3, [pc, #20]	; 14a0 <coda_mem_cursor_read_int64+0x54>
    1488:	movw	r0, #0
    148c:	movt	r0, #0
    1490:	str	r4, [sp, #-8]!
    1494:	movw	r2, #511	; 0x1ff
    1498:	str	lr, [sp, #4]
    149c:	bl	0 <__assert_fail>
    14a0:	.word	0x00000264

000014a4 <coda_mem_cursor_read_uint64>:
    14a4:	ldr	r2, [r0, #4]
    14a8:	add	r3, r0, r2, lsl #4
    14ac:	ldr	r3, [r3, #-8]
    14b0:	ldr	r2, [r3, #8]
    14b4:	cmp	r2, #2
    14b8:	bne	14d4 <coda_mem_cursor_read_uint64+0x30>
    14bc:	ldr	r3, [r3, #4]
    14c0:	ldr	r3, [r3]
    14c4:	cmp	r3, #0
    14c8:	beq	14d0 <coda_mem_cursor_read_uint64+0x2c>
    14cc:	b	0 <coda_bin_cursor_read_uint64>
    14d0:	b	0 <coda_ascii_cursor_read_uint64>
    14d4:	movw	r1, #0
    14d8:	movt	r1, #0
    14dc:	ldr	r3, [pc, #20]	; 14f8 <coda_mem_cursor_read_uint64+0x54>
    14e0:	movw	r0, #0
    14e4:	movt	r0, #0
    14e8:	str	r4, [sp, #-8]!
    14ec:	movw	r2, #523	; 0x20b
    14f0:	str	lr, [sp, #4]
    14f4:	bl	0 <__assert_fail>
    14f8:	.word	0x00000280

000014fc <coda_mem_cursor_read_float>:
    14fc:	ldr	r2, [r0, #4]
    1500:	add	r3, r0, r2, lsl #4
    1504:	ldr	r3, [r3, #-8]
    1508:	ldr	r2, [r3, #8]
    150c:	cmp	r2, #2
    1510:	bne	152c <coda_mem_cursor_read_float+0x30>
    1514:	ldr	r3, [r3, #4]
    1518:	ldr	r3, [r3]
    151c:	cmp	r3, #0
    1520:	beq	1528 <coda_mem_cursor_read_float+0x2c>
    1524:	b	0 <coda_bin_cursor_read_float>
    1528:	b	0 <coda_ascii_cursor_read_float>
    152c:	movw	r1, #0
    1530:	movt	r1, #0
    1534:	ldr	r3, [pc, #20]	; 1550 <coda_mem_cursor_read_float+0x54>
    1538:	movw	r0, #0
    153c:	movt	r0, #0
    1540:	str	r4, [sp, #-8]!
    1544:	movw	r2, #535	; 0x217
    1548:	str	lr, [sp, #4]
    154c:	bl	0 <__assert_fail>
    1550:	.word	0x0000029c

00001554 <coda_mem_cursor_read_double>:
    1554:	ldr	r2, [r0, #4]
    1558:	add	r3, r0, r2, lsl #4
    155c:	ldr	r3, [r3, #-8]
    1560:	ldr	r2, [r3, #8]
    1564:	cmp	r2, #2
    1568:	bne	1584 <coda_mem_cursor_read_double+0x30>
    156c:	ldr	r3, [r3, #4]
    1570:	ldr	r3, [r3]
    1574:	cmp	r3, #0
    1578:	beq	1580 <coda_mem_cursor_read_double+0x2c>
    157c:	b	0 <coda_bin_cursor_read_double>
    1580:	b	0 <coda_ascii_cursor_read_double>
    1584:	movw	r1, #0
    1588:	movt	r1, #0
    158c:	ldr	r3, [pc, #20]	; 15a8 <coda_mem_cursor_read_double+0x54>
    1590:	movw	r0, #0
    1594:	movt	r0, #0
    1598:	str	r4, [sp, #-8]!
    159c:	movw	r2, #547	; 0x223
    15a0:	str	lr, [sp, #4]
    15a4:	bl	0 <__assert_fail>
    15a8:	.word	0x000002b8

000015ac <coda_mem_cursor_read_char>:
    15ac:	ldr	r2, [r0, #4]
    15b0:	add	r3, r0, r2, lsl #4
    15b4:	ldr	r3, [r3, #-8]
    15b8:	ldr	r2, [r3, #8]
    15bc:	cmp	r2, #2
    15c0:	bne	15dc <coda_mem_cursor_read_char+0x30>
    15c4:	ldr	r3, [r3, #4]
    15c8:	ldr	r3, [r3]
    15cc:	bics	r3, r3, #2
    15d0:	beq	15d8 <coda_mem_cursor_read_char+0x2c>
    15d4:	b	0 <coda_bin_cursor_read_char>
    15d8:	b	0 <coda_ascii_cursor_read_char>
    15dc:	movw	r1, #0
    15e0:	movt	r1, #0
    15e4:	ldr	r3, [pc, #20]	; 1600 <coda_mem_cursor_read_char+0x54>
    15e8:	movw	r0, #0
    15ec:	movt	r0, #0
    15f0:	str	r4, [sp, #-8]!
    15f4:	movw	r2, #559	; 0x22f
    15f8:	str	lr, [sp, #4]
    15fc:	bl	0 <__assert_fail>
    1600:	.word	0x000002d4

00001604 <coda_mem_cursor_read_string>:
    1604:	ldr	r3, [r0, #4]
    1608:	strd	r4, [sp, #-12]!
    160c:	add	r3, r0, r3, lsl #4
    1610:	ldr	r3, [r3, #-8]
    1614:	ldr	r3, [r3, #8]
    1618:	str	lr, [sp, #8]
    161c:	sub	sp, sp, #524	; 0x20c
    1620:	cmp	r3, #3
    1624:	beq	1644 <coda_mem_cursor_read_string+0x40>
    1628:	cmp	r3, #2
    162c:	bne	1684 <coda_mem_cursor_read_string+0x80>
    1630:	bl	0 <coda_ascii_cursor_read_string>
    1634:	add	sp, sp, #524	; 0x20c
    1638:	ldrd	r4, [sp]
    163c:	add	sp, sp, #8
    1640:	pop	{pc}		; (ldr pc, [sp], #4)
    1644:	mov	r4, r1
    1648:	mov	r5, r2
    164c:	mov	r1, r0
    1650:	mov	r2, #520	; 0x208
    1654:	mov	r0, sp
    1658:	bl	0 <memcpy>
    165c:	mov	r0, sp
    1660:	bl	0 <coda_cursor_use_base_type_of_special_type>
    1664:	cmp	r0, #0
    1668:	mvnne	r0, #0
    166c:	bne	1634 <coda_mem_cursor_read_string+0x30>
    1670:	mov	r2, r5
    1674:	mov	r1, r4
    1678:	mov	r0, sp
    167c:	bl	0 <coda_cursor_read_string>
    1680:	b	1634 <coda_mem_cursor_read_string+0x30>
    1684:	movw	r1, #0
    1688:	movt	r1, #0
    168c:	ldr	r3, [pc, #12]	; 16a0 <coda_mem_cursor_read_string+0x9c>
    1690:	movw	r0, #0
    1694:	movt	r0, #0
    1698:	movw	r2, #582	; 0x246
    169c:	bl	0 <__assert_fail>
    16a0:	.word	0x000002f0

000016a4 <coda_mem_cursor_read_bits>:
    16a4:	ldr	ip, [r0, #4]
    16a8:	strd	r4, [sp, #-20]!	; 0xffffffec
    16ac:	strd	r6, [sp, #8]
    16b0:	str	lr, [sp, #16]
    16b4:	sub	sp, sp, #532	; 0x214
    16b8:	add	ip, r0, ip, lsl #4
    16bc:	ldr	r6, [ip, #-8]
    16c0:	ldr	ip, [r6, #8]
    16c4:	cmp	ip, #3
    16c8:	beq	1710 <coda_mem_cursor_read_bits+0x6c>
    16cc:	cmp	ip, #2
    16d0:	bne	1768 <coda_mem_cursor_read_bits+0xc4>
    16d4:	ldr	ip, [r6, #4]
    16d8:	ldr	ip, [ip]
    16dc:	cmp	ip, #0
    16e0:	add	ip, sp, #552	; 0x228
    16e4:	ldrd	r4, [ip]
    16e8:	strd	r4, [sp]
    16ec:	beq	1708 <coda_mem_cursor_read_bits+0x64>
    16f0:	bl	0 <coda_bin_cursor_read_bits>
    16f4:	add	sp, sp, #532	; 0x214
    16f8:	ldrd	r4, [sp]
    16fc:	ldrd	r6, [sp, #8]
    1700:	add	sp, sp, #16
    1704:	pop	{pc}		; (ldr pc, [sp], #4)
    1708:	bl	0 <coda_ascii_cursor_read_bits>
    170c:	b	16f4 <coda_mem_cursor_read_bits+0x50>
    1710:	mov	r7, r1
    1714:	mov	r4, r2
    1718:	mov	r1, r0
    171c:	mov	r2, #520	; 0x208
    1720:	add	r0, sp, #8
    1724:	mov	r5, r3
    1728:	bl	0 <memcpy>
    172c:	add	r0, sp, #8
    1730:	bl	0 <coda_cursor_use_base_type_of_special_type>
    1734:	cmp	r0, #0
    1738:	beq	1744 <coda_mem_cursor_read_bits+0xa0>
    173c:	mvn	r0, #0
    1740:	b	16f4 <coda_mem_cursor_read_bits+0x50>
    1744:	add	r0, sp, #552	; 0x228
    1748:	mov	r2, r4
    174c:	mov	r3, r5
    1750:	ldrd	r4, [r0]
    1754:	mov	r1, r7
    1758:	add	r0, sp, #8
    175c:	strd	r4, [sp]
    1760:	bl	0 <coda_cursor_read_bits>
    1764:	b	16f4 <coda_mem_cursor_read_bits+0x50>
    1768:	movw	r1, #0
    176c:	movt	r1, #0
    1770:	mvn	r0, #104	; 0x68
    1774:	bl	0 <coda_set_error>
    1778:	b	173c <coda_mem_cursor_read_bits+0x98>

0000177c <coda_mem_cursor_read_bytes>:
    177c:	ldr	ip, [r0, #4]
    1780:	strd	r4, [sp, #-20]!	; 0xffffffec
    1784:	strd	r6, [sp, #8]
    1788:	str	lr, [sp, #16]
    178c:	sub	sp, sp, #532	; 0x214
    1790:	add	ip, r0, ip, lsl #4
    1794:	ldr	r6, [ip, #-8]
    1798:	ldr	ip, [r6, #8]
    179c:	cmp	ip, #3
    17a0:	beq	17e8 <coda_mem_cursor_read_bytes+0x6c>
    17a4:	cmp	ip, #2
    17a8:	bne	1840 <coda_mem_cursor_read_bytes+0xc4>
    17ac:	ldr	ip, [r6, #4]
    17b0:	ldr	ip, [ip]
    17b4:	bics	ip, ip, #2
    17b8:	add	ip, sp, #552	; 0x228
    17bc:	ldrd	r4, [ip]
    17c0:	strd	r4, [sp]
    17c4:	beq	17e0 <coda_mem_cursor_read_bytes+0x64>
    17c8:	bl	0 <coda_bin_cursor_read_bytes>
    17cc:	add	sp, sp, #532	; 0x214
    17d0:	ldrd	r4, [sp]
    17d4:	ldrd	r6, [sp, #8]
    17d8:	add	sp, sp, #16
    17dc:	pop	{pc}		; (ldr pc, [sp], #4)
    17e0:	bl	0 <coda_ascii_cursor_read_bytes>
    17e4:	b	17cc <coda_mem_cursor_read_bytes+0x50>
    17e8:	mov	r7, r1
    17ec:	mov	r4, r2
    17f0:	mov	r1, r0
    17f4:	mov	r2, #520	; 0x208
    17f8:	add	r0, sp, #8
    17fc:	mov	r5, r3
    1800:	bl	0 <memcpy>
    1804:	add	r0, sp, #8
    1808:	bl	0 <coda_cursor_use_base_type_of_special_type>
    180c:	cmp	r0, #0
    1810:	beq	181c <coda_mem_cursor_read_bytes+0xa0>
    1814:	mvn	r0, #0
    1818:	b	17cc <coda_mem_cursor_read_bytes+0x50>
    181c:	add	r0, sp, #552	; 0x228
    1820:	mov	r2, r4
    1824:	mov	r3, r5
    1828:	ldrd	r4, [r0]
    182c:	mov	r1, r7
    1830:	add	r0, sp, #8
    1834:	strd	r4, [sp]
    1838:	bl	0 <coda_cursor_read_bytes>
    183c:	b	17cc <coda_mem_cursor_read_bytes+0x50>
    1840:	movw	r1, #0
    1844:	movt	r1, #0
    1848:	mvn	r0, #104	; 0x68
    184c:	bl	0 <coda_set_error>
    1850:	b	1814 <coda_mem_cursor_read_bytes+0x98>

00001854 <coda_mem_cursor_read_int8_array>:
    1854:	ldr	r3, [r0, #4]
    1858:	strd	r4, [sp, #-16]!
    185c:	mov	r5, r1
    1860:	str	r6, [sp, #8]
    1864:	mov	r6, r2
    1868:	str	lr, [sp, #12]
    186c:	sub	sp, sp, #8
    1870:	add	r3, r0, r3, lsl #4
    1874:	ldr	r2, [r3, #-8]
    1878:	ldr	r3, [r2, #8]
    187c:	cmp	r3, #1
    1880:	beq	1908 <coda_mem_cursor_read_int8_array+0xb4>
    1884:	cmp	r3, #2
    1888:	bne	1940 <coda_mem_cursor_read_int8_array+0xec>
    188c:	ldr	r3, [r2, #4]
    1890:	ldr	r3, [r3, #40]	; 0x28
    1894:	ldr	r3, [r3]
    1898:	cmp	r3, #1
    189c:	beq	1920 <coda_mem_cursor_read_int8_array+0xcc>
    18a0:	cmp	r3, #0
    18a4:	bne	195c <coda_mem_cursor_read_int8_array+0x108>
    18a8:	movw	r1, #0
    18ac:	movt	r1, #0
    18b0:	str	r3, [sp]
    18b4:	mov	r2, r5
    18b8:	mov	r3, #1
    18bc:	mov	r4, r0
    18c0:	bl	0 <read_array>
    18c4:	cmp	r0, #0
    18c8:	bne	1938 <coda_mem_cursor_read_int8_array+0xe4>
    18cc:	cmp	r6, #0
    18d0:	bne	18e8 <coda_mem_cursor_read_int8_array+0x94>
    18d4:	add	sp, sp, #8
    18d8:	ldrd	r4, [sp]
    18dc:	ldr	r6, [sp, #8]
    18e0:	add	sp, sp, #12
    18e4:	pop	{pc}		; (ldr pc, [sp], #4)
    18e8:	mov	r1, r5
    18ec:	mov	r0, r4
    18f0:	mov	r2, #1
    18f4:	bl	308 <transpose_array>
    18f8:	adds	r0, r0, #0
    18fc:	movne	r0, #1
    1900:	rsb	r0, r0, #0
    1904:	b	18d4 <coda_mem_cursor_read_int8_array+0x80>
    1908:	mov	r2, r1
    190c:	movw	r1, #0
    1910:	movt	r1, #0
    1914:	str	r6, [sp]
    1918:	bl	0 <read_array>
    191c:	b	18d4 <coda_mem_cursor_read_int8_array+0x80>
    1920:	mov	r2, r1
    1924:	movw	r1, #0
    1928:	movt	r1, #0
    192c:	str	r6, [sp]
    1930:	bl	0 <read_array>
    1934:	b	18d4 <coda_mem_cursor_read_int8_array+0x80>
    1938:	mvn	r0, #0
    193c:	b	18d4 <coda_mem_cursor_read_int8_array+0x80>
    1940:	movw	r1, #0
    1944:	movt	r1, #0
    1948:	ldr	r3, [pc, #40]	; 1978 <coda_mem_cursor_read_int8_array+0x124>
    194c:	movw	r0, #0
    1950:	movt	r0, #0
    1954:	movw	r2, #651	; 0x28b
    1958:	bl	0 <__assert_fail>
    195c:	movw	r1, #0
    1960:	movt	r1, #0
    1964:	ldr	r3, [pc, #12]	; 1978 <coda_mem_cursor_read_int8_array+0x124>
    1968:	movw	r0, #0
    196c:	movt	r0, #0
    1970:	movw	r2, #657	; 0x291
    1974:	bl	0 <__assert_fail>
    1978:	.word	0x0000030c

0000197c <coda_mem_cursor_read_uint8_array>:
    197c:	ldr	r3, [r0, #4]
    1980:	strd	r4, [sp, #-16]!
    1984:	mov	r5, r1
    1988:	str	r6, [sp, #8]
    198c:	mov	r6, r2
    1990:	str	lr, [sp, #12]
    1994:	sub	sp, sp, #8
    1998:	add	r3, r0, r3, lsl #4
    199c:	ldr	r2, [r3, #-8]
    19a0:	ldr	r3, [r2, #8]
    19a4:	cmp	r3, #1
    19a8:	beq	1a30 <coda_mem_cursor_read_uint8_array+0xb4>
    19ac:	cmp	r3, #2
    19b0:	bne	1a68 <coda_mem_cursor_read_uint8_array+0xec>
    19b4:	ldr	r3, [r2, #4]
    19b8:	ldr	r3, [r3, #40]	; 0x28
    19bc:	ldr	r3, [r3]
    19c0:	cmp	r3, #1
    19c4:	beq	1a48 <coda_mem_cursor_read_uint8_array+0xcc>
    19c8:	cmp	r3, #0
    19cc:	bne	1a84 <coda_mem_cursor_read_uint8_array+0x108>
    19d0:	movw	r1, #0
    19d4:	movt	r1, #0
    19d8:	str	r3, [sp]
    19dc:	mov	r2, r5
    19e0:	mov	r3, #1
    19e4:	mov	r4, r0
    19e8:	bl	0 <read_array>
    19ec:	cmp	r0, #0
    19f0:	bne	1a60 <coda_mem_cursor_read_uint8_array+0xe4>
    19f4:	cmp	r6, #0
    19f8:	bne	1a10 <coda_mem_cursor_read_uint8_array+0x94>
    19fc:	add	sp, sp, #8
    1a00:	ldrd	r4, [sp]
    1a04:	ldr	r6, [sp, #8]
    1a08:	add	sp, sp, #12
    1a0c:	pop	{pc}		; (ldr pc, [sp], #4)
    1a10:	mov	r1, r5
    1a14:	mov	r0, r4
    1a18:	mov	r2, #1
    1a1c:	bl	308 <transpose_array>
    1a20:	adds	r0, r0, #0
    1a24:	movne	r0, #1
    1a28:	rsb	r0, r0, #0
    1a2c:	b	19fc <coda_mem_cursor_read_uint8_array+0x80>
    1a30:	mov	r2, r1
    1a34:	movw	r1, #0
    1a38:	movt	r1, #0
    1a3c:	str	r6, [sp]
    1a40:	bl	0 <read_array>
    1a44:	b	19fc <coda_mem_cursor_read_uint8_array+0x80>
    1a48:	mov	r2, r1
    1a4c:	movw	r1, #0
    1a50:	movt	r1, #0
    1a54:	str	r6, [sp]
    1a58:	bl	0 <read_array>
    1a5c:	b	19fc <coda_mem_cursor_read_uint8_array+0x80>
    1a60:	mvn	r0, #0
    1a64:	b	19fc <coda_mem_cursor_read_uint8_array+0x80>
    1a68:	movw	r1, #0
    1a6c:	movt	r1, #0
    1a70:	ldr	r3, [pc, #40]	; 1aa0 <coda_mem_cursor_read_uint8_array+0x124>
    1a74:	movw	r0, #0
    1a78:	movt	r0, #0
    1a7c:	movw	r2, #682	; 0x2aa
    1a80:	bl	0 <__assert_fail>
    1a84:	movw	r1, #0
    1a88:	movt	r1, #0
    1a8c:	ldr	r3, [pc, #12]	; 1aa0 <coda_mem_cursor_read_uint8_array+0x124>
    1a90:	movw	r0, #0
    1a94:	movt	r0, #0
    1a98:	mov	r2, #688	; 0x2b0
    1a9c:	bl	0 <__assert_fail>
    1aa0:	.word	0x0000032c

00001aa4 <coda_mem_cursor_read_int16_array>:
    1aa4:	ldr	r3, [r0, #4]
    1aa8:	strd	r4, [sp, #-20]!	; 0xffffffec
    1aac:	add	r3, r0, r3, lsl #4
    1ab0:	ldr	r3, [r3, #-8]
    1ab4:	ldr	r4, [r3, #8]
    1ab8:	strd	r6, [sp, #8]
    1abc:	mov	r6, r1
    1ac0:	mov	r7, r2
    1ac4:	str	lr, [sp, #16]
    1ac8:	sub	sp, sp, #12
    1acc:	cmp	r4, #1
    1ad0:	beq	1b58 <coda_mem_cursor_read_int16_array+0xb4>
    1ad4:	cmp	r4, #2
    1ad8:	bne	1b98 <coda_mem_cursor_read_int16_array+0xf4>
    1adc:	ldr	r3, [r3, #4]
    1ae0:	ldr	r3, [r3, #40]	; 0x28
    1ae4:	ldr	r3, [r3]
    1ae8:	cmp	r3, #1
    1aec:	beq	1b74 <coda_mem_cursor_read_int16_array+0xd0>
    1af0:	cmp	r3, #0
    1af4:	bne	1bb4 <coda_mem_cursor_read_int16_array+0x110>
    1af8:	movw	r1, #0
    1afc:	movt	r1, #0
    1b00:	str	r3, [sp]
    1b04:	mov	r2, r6
    1b08:	mov	r3, r4
    1b0c:	mov	r5, r0
    1b10:	bl	0 <read_array>
    1b14:	cmp	r0, #0
    1b18:	bne	1b90 <coda_mem_cursor_read_int16_array+0xec>
    1b1c:	cmp	r7, #0
    1b20:	bne	1b38 <coda_mem_cursor_read_int16_array+0x94>
    1b24:	add	sp, sp, #12
    1b28:	ldrd	r4, [sp]
    1b2c:	ldrd	r6, [sp, #8]
    1b30:	add	sp, sp, #16
    1b34:	pop	{pc}		; (ldr pc, [sp], #4)
    1b38:	mov	r2, r4
    1b3c:	mov	r1, r6
    1b40:	mov	r0, r5
    1b44:	bl	308 <transpose_array>
    1b48:	adds	r0, r0, #0
    1b4c:	movne	r0, #1
    1b50:	rsb	r0, r0, #0
    1b54:	b	1b24 <coda_mem_cursor_read_int16_array+0x80>
    1b58:	mov	r2, r1
    1b5c:	mov	r3, #2
    1b60:	str	r7, [sp]
    1b64:	movw	r1, #0
    1b68:	movt	r1, #0
    1b6c:	bl	0 <read_array>
    1b70:	b	1b24 <coda_mem_cursor_read_int16_array+0x80>
    1b74:	mov	r2, r1
    1b78:	mov	r3, r4
    1b7c:	str	r7, [sp]
    1b80:	movw	r1, #0
    1b84:	movt	r1, #0
    1b88:	bl	0 <read_array>
    1b8c:	b	1b24 <coda_mem_cursor_read_int16_array+0x80>
    1b90:	mvn	r0, #0
    1b94:	b	1b24 <coda_mem_cursor_read_int16_array+0x80>
    1b98:	movw	r1, #0
    1b9c:	movt	r1, #0
    1ba0:	ldr	r3, [pc, #40]	; 1bd0 <coda_mem_cursor_read_int16_array+0x12c>
    1ba4:	movw	r0, #0
    1ba8:	movt	r0, #0
    1bac:	movw	r2, #713	; 0x2c9
    1bb0:	bl	0 <__assert_fail>
    1bb4:	movw	r1, #0
    1bb8:	movt	r1, #0
    1bbc:	ldr	r3, [pc, #12]	; 1bd0 <coda_mem_cursor_read_int16_array+0x12c>
    1bc0:	movw	r0, #0
    1bc4:	movt	r0, #0
    1bc8:	movw	r2, #719	; 0x2cf
    1bcc:	bl	0 <__assert_fail>
    1bd0:	.word	0x00000350

00001bd4 <coda_mem_cursor_read_uint16_array>:
    1bd4:	ldr	r3, [r0, #4]
    1bd8:	strd	r4, [sp, #-20]!	; 0xffffffec
    1bdc:	add	r3, r0, r3, lsl #4
    1be0:	ldr	r3, [r3, #-8]
    1be4:	ldr	r4, [r3, #8]
    1be8:	strd	r6, [sp, #8]
    1bec:	mov	r6, r1
    1bf0:	mov	r7, r2
    1bf4:	str	lr, [sp, #16]
    1bf8:	sub	sp, sp, #12
    1bfc:	cmp	r4, #1
    1c00:	beq	1c88 <coda_mem_cursor_read_uint16_array+0xb4>
    1c04:	cmp	r4, #2
    1c08:	bne	1cc8 <coda_mem_cursor_read_uint16_array+0xf4>
    1c0c:	ldr	r3, [r3, #4]
    1c10:	ldr	r3, [r3, #40]	; 0x28
    1c14:	ldr	r3, [r3]
    1c18:	cmp	r3, #1
    1c1c:	beq	1ca4 <coda_mem_cursor_read_uint16_array+0xd0>
    1c20:	cmp	r3, #0
    1c24:	bne	1ce4 <coda_mem_cursor_read_uint16_array+0x110>
    1c28:	movw	r1, #0
    1c2c:	movt	r1, #0
    1c30:	str	r3, [sp]
    1c34:	mov	r2, r6
    1c38:	mov	r3, r4
    1c3c:	mov	r5, r0
    1c40:	bl	0 <read_array>
    1c44:	cmp	r0, #0
    1c48:	bne	1cc0 <coda_mem_cursor_read_uint16_array+0xec>
    1c4c:	cmp	r7, #0
    1c50:	bne	1c68 <coda_mem_cursor_read_uint16_array+0x94>
    1c54:	add	sp, sp, #12
    1c58:	ldrd	r4, [sp]
    1c5c:	ldrd	r6, [sp, #8]
    1c60:	add	sp, sp, #16
    1c64:	pop	{pc}		; (ldr pc, [sp], #4)
    1c68:	mov	r2, r4
    1c6c:	mov	r1, r6
    1c70:	mov	r0, r5
    1c74:	bl	308 <transpose_array>
    1c78:	adds	r0, r0, #0
    1c7c:	movne	r0, #1
    1c80:	rsb	r0, r0, #0
    1c84:	b	1c54 <coda_mem_cursor_read_uint16_array+0x80>
    1c88:	mov	r2, r1
    1c8c:	mov	r3, #2
    1c90:	str	r7, [sp]
    1c94:	movw	r1, #0
    1c98:	movt	r1, #0
    1c9c:	bl	0 <read_array>
    1ca0:	b	1c54 <coda_mem_cursor_read_uint16_array+0x80>
    1ca4:	mov	r2, r1
    1ca8:	mov	r3, r4
    1cac:	str	r7, [sp]
    1cb0:	movw	r1, #0
    1cb4:	movt	r1, #0
    1cb8:	bl	0 <read_array>
    1cbc:	b	1c54 <coda_mem_cursor_read_uint16_array+0x80>
    1cc0:	mvn	r0, #0
    1cc4:	b	1c54 <coda_mem_cursor_read_uint16_array+0x80>
    1cc8:	movw	r1, #0
    1ccc:	movt	r1, #0
    1cd0:	ldr	r3, [pc, #40]	; 1d00 <coda_mem_cursor_read_uint16_array+0x12c>
    1cd4:	movw	r0, #0
    1cd8:	movt	r0, #0
    1cdc:	mov	r2, #744	; 0x2e8
    1ce0:	bl	0 <__assert_fail>
    1ce4:	movw	r1, #0
    1ce8:	movt	r1, #0
    1cec:	ldr	r3, [pc, #12]	; 1d00 <coda_mem_cursor_read_uint16_array+0x12c>
    1cf0:	movw	r0, #0
    1cf4:	movt	r0, #0
    1cf8:	movw	r2, #750	; 0x2ee
    1cfc:	bl	0 <__assert_fail>
    1d00:	.word	0x00000374

00001d04 <coda_mem_cursor_read_int32_array>:
    1d04:	ldr	r3, [r0, #4]
    1d08:	strd	r4, [sp, #-16]!
    1d0c:	mov	r5, r1
    1d10:	add	r3, r0, r3, lsl #4
    1d14:	ldr	r3, [r3, #-8]
    1d18:	str	r6, [sp, #8]
    1d1c:	mov	r6, r2
    1d20:	str	lr, [sp, #12]
    1d24:	sub	sp, sp, #8
    1d28:	ldr	r2, [r3, #8]
    1d2c:	cmp	r2, #1
    1d30:	beq	1db8 <coda_mem_cursor_read_int32_array+0xb4>
    1d34:	cmp	r2, #2
    1d38:	bne	1df8 <coda_mem_cursor_read_int32_array+0xf4>
    1d3c:	ldr	r3, [r3, #4]
    1d40:	ldr	r3, [r3, #40]	; 0x28
    1d44:	ldr	r3, [r3]
    1d48:	cmp	r3, #1
    1d4c:	beq	1dd4 <coda_mem_cursor_read_int32_array+0xd0>
    1d50:	cmp	r3, #0
    1d54:	bne	1e14 <coda_mem_cursor_read_int32_array+0x110>
    1d58:	movw	r1, #0
    1d5c:	movt	r1, #0
    1d60:	str	r3, [sp]
    1d64:	mov	r2, r5
    1d68:	mov	r3, #4
    1d6c:	mov	r4, r0
    1d70:	bl	0 <read_array>
    1d74:	cmp	r0, #0
    1d78:	bne	1df0 <coda_mem_cursor_read_int32_array+0xec>
    1d7c:	cmp	r6, #0
    1d80:	bne	1d98 <coda_mem_cursor_read_int32_array+0x94>
    1d84:	add	sp, sp, #8
    1d88:	ldrd	r4, [sp]
    1d8c:	ldr	r6, [sp, #8]
    1d90:	add	sp, sp, #12
    1d94:	pop	{pc}		; (ldr pc, [sp], #4)
    1d98:	mov	r1, r5
    1d9c:	mov	r0, r4
    1da0:	mov	r2, #4
    1da4:	bl	308 <transpose_array>
    1da8:	adds	r0, r0, #0
    1dac:	movne	r0, #1
    1db0:	rsb	r0, r0, #0
    1db4:	b	1d84 <coda_mem_cursor_read_int32_array+0x80>
    1db8:	mov	r2, r1
    1dbc:	mov	r3, #4
    1dc0:	str	r6, [sp]
    1dc4:	movw	r1, #0
    1dc8:	movt	r1, #0
    1dcc:	bl	0 <read_array>
    1dd0:	b	1d84 <coda_mem_cursor_read_int32_array+0x80>
    1dd4:	mov	r2, r1
    1dd8:	mov	r3, #4
    1ddc:	str	r6, [sp]
    1de0:	movw	r1, #0
    1de4:	movt	r1, #0
    1de8:	bl	0 <read_array>
    1dec:	b	1d84 <coda_mem_cursor_read_int32_array+0x80>
    1df0:	mvn	r0, #0
    1df4:	b	1d84 <coda_mem_cursor_read_int32_array+0x80>
    1df8:	movw	r1, #0
    1dfc:	movt	r1, #0
    1e00:	ldr	r3, [pc, #40]	; 1e30 <coda_mem_cursor_read_int32_array+0x12c>
    1e04:	movw	r0, #0
    1e08:	movt	r0, #0
    1e0c:	movw	r2, #775	; 0x307
    1e10:	bl	0 <__assert_fail>
    1e14:	movw	r1, #0
    1e18:	movt	r1, #0
    1e1c:	ldr	r3, [pc, #12]	; 1e30 <coda_mem_cursor_read_int32_array+0x12c>
    1e20:	movw	r0, #0
    1e24:	movt	r0, #0
    1e28:	movw	r2, #781	; 0x30d
    1e2c:	bl	0 <__assert_fail>
    1e30:	.word	0x00000398

00001e34 <coda_mem_cursor_read_uint32_array>:
    1e34:	ldr	r3, [r0, #4]
    1e38:	strd	r4, [sp, #-16]!
    1e3c:	mov	r5, r1
    1e40:	add	r3, r0, r3, lsl #4
    1e44:	ldr	r3, [r3, #-8]
    1e48:	str	r6, [sp, #8]
    1e4c:	mov	r6, r2
    1e50:	str	lr, [sp, #12]
    1e54:	sub	sp, sp, #8
    1e58:	ldr	r2, [r3, #8]
    1e5c:	cmp	r2, #1
    1e60:	beq	1ee8 <coda_mem_cursor_read_uint32_array+0xb4>
    1e64:	cmp	r2, #2
    1e68:	bne	1f28 <coda_mem_cursor_read_uint32_array+0xf4>
    1e6c:	ldr	r3, [r3, #4]
    1e70:	ldr	r3, [r3, #40]	; 0x28
    1e74:	ldr	r3, [r3]
    1e78:	cmp	r3, #1
    1e7c:	beq	1f04 <coda_mem_cursor_read_uint32_array+0xd0>
    1e80:	cmp	r3, #0
    1e84:	bne	1f44 <coda_mem_cursor_read_uint32_array+0x110>
    1e88:	movw	r1, #0
    1e8c:	movt	r1, #0
    1e90:	str	r3, [sp]
    1e94:	mov	r2, r5
    1e98:	mov	r3, #4
    1e9c:	mov	r4, r0
    1ea0:	bl	0 <read_array>
    1ea4:	cmp	r0, #0
    1ea8:	bne	1f20 <coda_mem_cursor_read_uint32_array+0xec>
    1eac:	cmp	r6, #0
    1eb0:	bne	1ec8 <coda_mem_cursor_read_uint32_array+0x94>
    1eb4:	add	sp, sp, #8
    1eb8:	ldrd	r4, [sp]
    1ebc:	ldr	r6, [sp, #8]
    1ec0:	add	sp, sp, #12
    1ec4:	pop	{pc}		; (ldr pc, [sp], #4)
    1ec8:	mov	r1, r5
    1ecc:	mov	r0, r4
    1ed0:	mov	r2, #4
    1ed4:	bl	308 <transpose_array>
    1ed8:	adds	r0, r0, #0
    1edc:	movne	r0, #1
    1ee0:	rsb	r0, r0, #0
    1ee4:	b	1eb4 <coda_mem_cursor_read_uint32_array+0x80>
    1ee8:	mov	r2, r1
    1eec:	mov	r3, #4
    1ef0:	str	r6, [sp]
    1ef4:	movw	r1, #0
    1ef8:	movt	r1, #0
    1efc:	bl	0 <read_array>
    1f00:	b	1eb4 <coda_mem_cursor_read_uint32_array+0x80>
    1f04:	mov	r2, r1
    1f08:	mov	r3, #4
    1f0c:	str	r6, [sp]
    1f10:	movw	r1, #0
    1f14:	movt	r1, #0
    1f18:	bl	0 <read_array>
    1f1c:	b	1eb4 <coda_mem_cursor_read_uint32_array+0x80>
    1f20:	mvn	r0, #0
    1f24:	b	1eb4 <coda_mem_cursor_read_uint32_array+0x80>
    1f28:	movw	r1, #0
    1f2c:	movt	r1, #0
    1f30:	ldr	r3, [pc, #40]	; 1f60 <coda_mem_cursor_read_uint32_array+0x12c>
    1f34:	movw	r0, #0
    1f38:	movt	r0, #0
    1f3c:	movw	r2, #806	; 0x326
    1f40:	bl	0 <__assert_fail>
    1f44:	movw	r1, #0
    1f48:	movt	r1, #0
    1f4c:	ldr	r3, [pc, #12]	; 1f60 <coda_mem_cursor_read_uint32_array+0x12c>
    1f50:	movw	r0, #0
    1f54:	movt	r0, #0
    1f58:	mov	r2, #812	; 0x32c
    1f5c:	bl	0 <__assert_fail>
    1f60:	.word	0x000003bc

00001f64 <coda_mem_cursor_read_int64_array>:
    1f64:	ldr	r3, [r0, #4]
    1f68:	strd	r4, [sp, #-16]!
    1f6c:	mov	r5, r1
    1f70:	add	r3, r0, r3, lsl #4
    1f74:	ldr	r3, [r3, #-8]
    1f78:	str	r6, [sp, #8]
    1f7c:	mov	r6, r2
    1f80:	str	lr, [sp, #12]
    1f84:	sub	sp, sp, #8
    1f88:	ldr	r2, [r3, #8]
    1f8c:	cmp	r2, #1
    1f90:	beq	2018 <coda_mem_cursor_read_int64_array+0xb4>
    1f94:	cmp	r2, #2
    1f98:	bne	2058 <coda_mem_cursor_read_int64_array+0xf4>
    1f9c:	ldr	r3, [r3, #4]
    1fa0:	ldr	r3, [r3, #40]	; 0x28
    1fa4:	ldr	r3, [r3]
    1fa8:	cmp	r3, #1
    1fac:	beq	2034 <coda_mem_cursor_read_int64_array+0xd0>
    1fb0:	cmp	r3, #0
    1fb4:	bne	2074 <coda_mem_cursor_read_int64_array+0x110>
    1fb8:	movw	r1, #0
    1fbc:	movt	r1, #0
    1fc0:	str	r3, [sp]
    1fc4:	mov	r2, r5
    1fc8:	mov	r3, #8
    1fcc:	mov	r4, r0
    1fd0:	bl	0 <read_array>
    1fd4:	cmp	r0, #0
    1fd8:	bne	2050 <coda_mem_cursor_read_int64_array+0xec>
    1fdc:	cmp	r6, #0
    1fe0:	bne	1ff8 <coda_mem_cursor_read_int64_array+0x94>
    1fe4:	add	sp, sp, #8
    1fe8:	ldrd	r4, [sp]
    1fec:	ldr	r6, [sp, #8]
    1ff0:	add	sp, sp, #12
    1ff4:	pop	{pc}		; (ldr pc, [sp], #4)
    1ff8:	mov	r1, r5
    1ffc:	mov	r0, r4
    2000:	mov	r2, #8
    2004:	bl	308 <transpose_array>
    2008:	adds	r0, r0, #0
    200c:	movne	r0, #1
    2010:	rsb	r0, r0, #0
    2014:	b	1fe4 <coda_mem_cursor_read_int64_array+0x80>
    2018:	mov	r2, r1
    201c:	mov	r3, #8
    2020:	str	r6, [sp]
    2024:	movw	r1, #0
    2028:	movt	r1, #0
    202c:	bl	0 <read_array>
    2030:	b	1fe4 <coda_mem_cursor_read_int64_array+0x80>
    2034:	mov	r2, r1
    2038:	mov	r3, #8
    203c:	str	r6, [sp]
    2040:	movw	r1, #0
    2044:	movt	r1, #0
    2048:	bl	0 <read_array>
    204c:	b	1fe4 <coda_mem_cursor_read_int64_array+0x80>
    2050:	mvn	r0, #0
    2054:	b	1fe4 <coda_mem_cursor_read_int64_array+0x80>
    2058:	movw	r1, #0
    205c:	movt	r1, #0
    2060:	ldr	r3, [pc, #40]	; 2090 <coda_mem_cursor_read_int64_array+0x12c>
    2064:	movw	r0, #0
    2068:	movt	r0, #0
    206c:	movw	r2, #837	; 0x345
    2070:	bl	0 <__assert_fail>
    2074:	movw	r1, #0
    2078:	movt	r1, #0
    207c:	ldr	r3, [pc, #12]	; 2090 <coda_mem_cursor_read_int64_array+0x12c>
    2080:	movw	r0, #0
    2084:	movt	r0, #0
    2088:	movw	r2, #843	; 0x34b
    208c:	bl	0 <__assert_fail>
    2090:	.word	0x000003e0

00002094 <coda_mem_cursor_read_uint64_array>:
    2094:	ldr	r3, [r0, #4]
    2098:	strd	r4, [sp, #-16]!
    209c:	mov	r5, r1
    20a0:	add	r3, r0, r3, lsl #4
    20a4:	ldr	r3, [r3, #-8]
    20a8:	str	r6, [sp, #8]
    20ac:	mov	r6, r2
    20b0:	str	lr, [sp, #12]
    20b4:	sub	sp, sp, #8
    20b8:	ldr	r2, [r3, #8]
    20bc:	cmp	r2, #1
    20c0:	beq	2148 <coda_mem_cursor_read_uint64_array+0xb4>
    20c4:	cmp	r2, #2
    20c8:	bne	2188 <coda_mem_cursor_read_uint64_array+0xf4>
    20cc:	ldr	r3, [r3, #4]
    20d0:	ldr	r3, [r3, #40]	; 0x28
    20d4:	ldr	r3, [r3]
    20d8:	cmp	r3, #1
    20dc:	beq	2164 <coda_mem_cursor_read_uint64_array+0xd0>
    20e0:	cmp	r3, #0
    20e4:	bne	21a4 <coda_mem_cursor_read_uint64_array+0x110>
    20e8:	movw	r1, #0
    20ec:	movt	r1, #0
    20f0:	str	r3, [sp]
    20f4:	mov	r2, r5
    20f8:	mov	r3, #8
    20fc:	mov	r4, r0
    2100:	bl	0 <read_array>
    2104:	cmp	r0, #0
    2108:	bne	2180 <coda_mem_cursor_read_uint64_array+0xec>
    210c:	cmp	r6, #0
    2110:	bne	2128 <coda_mem_cursor_read_uint64_array+0x94>
    2114:	add	sp, sp, #8
    2118:	ldrd	r4, [sp]
    211c:	ldr	r6, [sp, #8]
    2120:	add	sp, sp, #12
    2124:	pop	{pc}		; (ldr pc, [sp], #4)
    2128:	mov	r1, r5
    212c:	mov	r0, r4
    2130:	mov	r2, #8
    2134:	bl	308 <transpose_array>
    2138:	adds	r0, r0, #0
    213c:	movne	r0, #1
    2140:	rsb	r0, r0, #0
    2144:	b	2114 <coda_mem_cursor_read_uint64_array+0x80>
    2148:	mov	r2, r1
    214c:	mov	r3, #8
    2150:	str	r6, [sp]
    2154:	movw	r1, #0
    2158:	movt	r1, #0
    215c:	bl	0 <read_array>
    2160:	b	2114 <coda_mem_cursor_read_uint64_array+0x80>
    2164:	mov	r2, r1
    2168:	mov	r3, #8
    216c:	str	r6, [sp]
    2170:	movw	r1, #0
    2174:	movt	r1, #0
    2178:	bl	0 <read_array>
    217c:	b	2114 <coda_mem_cursor_read_uint64_array+0x80>
    2180:	mvn	r0, #0
    2184:	b	2114 <coda_mem_cursor_read_uint64_array+0x80>
    2188:	movw	r1, #0
    218c:	movt	r1, #0
    2190:	ldr	r3, [pc, #40]	; 21c0 <coda_mem_cursor_read_uint64_array+0x12c>
    2194:	movw	r0, #0
    2198:	movt	r0, #0
    219c:	mov	r2, #868	; 0x364
    21a0:	bl	0 <__assert_fail>
    21a4:	movw	r1, #0
    21a8:	movt	r1, #0
    21ac:	ldr	r3, [pc, #12]	; 21c0 <coda_mem_cursor_read_uint64_array+0x12c>
    21b0:	movw	r0, #0
    21b4:	movt	r0, #0
    21b8:	movw	r2, #874	; 0x36a
    21bc:	bl	0 <__assert_fail>
    21c0:	.word	0x00000404

000021c4 <coda_mem_cursor_read_float_array>:
    21c4:	ldr	r3, [r0, #4]
    21c8:	strd	r4, [sp, #-16]!
    21cc:	mov	r5, r1
    21d0:	add	r3, r0, r3, lsl #4
    21d4:	ldr	r3, [r3, #-8]
    21d8:	str	r6, [sp, #8]
    21dc:	mov	r6, r2
    21e0:	str	lr, [sp, #12]
    21e4:	sub	sp, sp, #8
    21e8:	ldr	r2, [r3, #8]
    21ec:	cmp	r2, #1
    21f0:	beq	2278 <coda_mem_cursor_read_float_array+0xb4>
    21f4:	cmp	r2, #2
    21f8:	bne	22b8 <coda_mem_cursor_read_float_array+0xf4>
    21fc:	ldr	r3, [r3, #4]
    2200:	ldr	r3, [r3, #40]	; 0x28
    2204:	ldr	r3, [r3]
    2208:	cmp	r3, #1
    220c:	beq	2294 <coda_mem_cursor_read_float_array+0xd0>
    2210:	cmp	r3, #0
    2214:	bne	22d4 <coda_mem_cursor_read_float_array+0x110>
    2218:	movw	r1, #0
    221c:	movt	r1, #0
    2220:	str	r3, [sp]
    2224:	mov	r2, r5
    2228:	mov	r3, #4
    222c:	mov	r4, r0
    2230:	bl	0 <read_array>
    2234:	cmp	r0, #0
    2238:	bne	22b0 <coda_mem_cursor_read_float_array+0xec>
    223c:	cmp	r6, #0
    2240:	bne	2258 <coda_mem_cursor_read_float_array+0x94>
    2244:	add	sp, sp, #8
    2248:	ldrd	r4, [sp]
    224c:	ldr	r6, [sp, #8]
    2250:	add	sp, sp, #12
    2254:	pop	{pc}		; (ldr pc, [sp], #4)
    2258:	mov	r1, r5
    225c:	mov	r0, r4
    2260:	mov	r2, #4
    2264:	bl	308 <transpose_array>
    2268:	adds	r0, r0, #0
    226c:	movne	r0, #1
    2270:	rsb	r0, r0, #0
    2274:	b	2244 <coda_mem_cursor_read_float_array+0x80>
    2278:	mov	r2, r1
    227c:	mov	r3, #4
    2280:	str	r6, [sp]
    2284:	movw	r1, #0
    2288:	movt	r1, #0
    228c:	bl	0 <read_array>
    2290:	b	2244 <coda_mem_cursor_read_float_array+0x80>
    2294:	mov	r2, r1
    2298:	mov	r3, #4
    229c:	str	r6, [sp]
    22a0:	movw	r1, #0
    22a4:	movt	r1, #0
    22a8:	bl	0 <read_array>
    22ac:	b	2244 <coda_mem_cursor_read_float_array+0x80>
    22b0:	mvn	r0, #0
    22b4:	b	2244 <coda_mem_cursor_read_float_array+0x80>
    22b8:	movw	r1, #0
    22bc:	movt	r1, #0
    22c0:	ldr	r3, [pc, #40]	; 22f0 <coda_mem_cursor_read_float_array+0x12c>
    22c4:	movw	r0, #0
    22c8:	movt	r0, #0
    22cc:	movw	r2, #899	; 0x383
    22d0:	bl	0 <__assert_fail>
    22d4:	movw	r1, #0
    22d8:	movt	r1, #0
    22dc:	ldr	r3, [pc, #12]	; 22f0 <coda_mem_cursor_read_float_array+0x12c>
    22e0:	movw	r0, #0
    22e4:	movt	r0, #0
    22e8:	movw	r2, #905	; 0x389
    22ec:	bl	0 <__assert_fail>
    22f0:	.word	0x00000428

000022f4 <coda_mem_cursor_read_double_array>:
    22f4:	ldr	r3, [r0, #4]
    22f8:	strd	r4, [sp, #-16]!
    22fc:	mov	r5, r1
    2300:	add	r3, r0, r3, lsl #4
    2304:	ldr	r3, [r3, #-8]
    2308:	str	r6, [sp, #8]
    230c:	mov	r6, r2
    2310:	str	lr, [sp, #12]
    2314:	sub	sp, sp, #8
    2318:	ldr	r2, [r3, #8]
    231c:	cmp	r2, #1
    2320:	beq	23a8 <coda_mem_cursor_read_double_array+0xb4>
    2324:	cmp	r2, #2
    2328:	bne	23e8 <coda_mem_cursor_read_double_array+0xf4>
    232c:	ldr	r3, [r3, #4]
    2330:	ldr	r3, [r3, #40]	; 0x28
    2334:	ldr	r3, [r3]
    2338:	cmp	r3, #1
    233c:	beq	23c4 <coda_mem_cursor_read_double_array+0xd0>
    2340:	cmp	r3, #0
    2344:	bne	2404 <coda_mem_cursor_read_double_array+0x110>
    2348:	movw	r1, #0
    234c:	movt	r1, #0
    2350:	str	r3, [sp]
    2354:	mov	r2, r5
    2358:	mov	r3, #8
    235c:	mov	r4, r0
    2360:	bl	0 <read_array>
    2364:	cmp	r0, #0
    2368:	bne	23e0 <coda_mem_cursor_read_double_array+0xec>
    236c:	cmp	r6, #0
    2370:	bne	2388 <coda_mem_cursor_read_double_array+0x94>
    2374:	add	sp, sp, #8
    2378:	ldrd	r4, [sp]
    237c:	ldr	r6, [sp, #8]
    2380:	add	sp, sp, #12
    2384:	pop	{pc}		; (ldr pc, [sp], #4)
    2388:	mov	r1, r5
    238c:	mov	r0, r4
    2390:	mov	r2, #8
    2394:	bl	308 <transpose_array>
    2398:	adds	r0, r0, #0
    239c:	movne	r0, #1
    23a0:	rsb	r0, r0, #0
    23a4:	b	2374 <coda_mem_cursor_read_double_array+0x80>
    23a8:	mov	r2, r1
    23ac:	mov	r3, #8
    23b0:	str	r6, [sp]
    23b4:	movw	r1, #0
    23b8:	movt	r1, #0
    23bc:	bl	0 <read_array>
    23c0:	b	2374 <coda_mem_cursor_read_double_array+0x80>
    23c4:	mov	r2, r1
    23c8:	mov	r3, #8
    23cc:	str	r6, [sp]
    23d0:	movw	r1, #0
    23d4:	movt	r1, #0
    23d8:	bl	0 <read_array>
    23dc:	b	2374 <coda_mem_cursor_read_double_array+0x80>
    23e0:	mvn	r0, #0
    23e4:	b	2374 <coda_mem_cursor_read_double_array+0x80>
    23e8:	movw	r1, #0
    23ec:	movt	r1, #0
    23f0:	ldr	r3, [pc, #40]	; 2420 <coda_mem_cursor_read_double_array+0x12c>
    23f4:	movw	r0, #0
    23f8:	movt	r0, #0
    23fc:	movw	r2, #930	; 0x3a2
    2400:	bl	0 <__assert_fail>
    2404:	movw	r1, #0
    2408:	movt	r1, #0
    240c:	ldr	r3, [pc, #12]	; 2420 <coda_mem_cursor_read_double_array+0x12c>
    2410:	movw	r0, #0
    2414:	movt	r0, #0
    2418:	mov	r2, #936	; 0x3a8
    241c:	bl	0 <__assert_fail>
    2420:	.word	0x0000044c

00002424 <coda_mem_cursor_read_char_array>:
    2424:	ldr	r3, [r0, #4]
    2428:	strd	r4, [sp, #-16]!
    242c:	mov	r5, r1
    2430:	str	r6, [sp, #8]
    2434:	mov	r6, r2
    2438:	str	lr, [sp, #12]
    243c:	sub	sp, sp, #8
    2440:	add	r3, r0, r3, lsl #4
    2444:	ldr	r2, [r3, #-8]
    2448:	ldr	r3, [r2, #8]
    244c:	cmp	r3, #1
    2450:	beq	24d8 <coda_mem_cursor_read_char_array+0xb4>
    2454:	cmp	r3, #2
    2458:	bne	2510 <coda_mem_cursor_read_char_array+0xec>
    245c:	ldr	r3, [r2, #4]
    2460:	ldr	r3, [r3, #40]	; 0x28
    2464:	ldr	r3, [r3]
    2468:	cmp	r3, #1
    246c:	beq	24f0 <coda_mem_cursor_read_char_array+0xcc>
    2470:	cmp	r3, #0
    2474:	bne	252c <coda_mem_cursor_read_char_array+0x108>
    2478:	movw	r1, #0
    247c:	movt	r1, #0
    2480:	str	r3, [sp]
    2484:	mov	r2, r5
    2488:	mov	r3, #1
    248c:	mov	r4, r0
    2490:	bl	0 <read_array>
    2494:	cmp	r0, #0
    2498:	bne	2508 <coda_mem_cursor_read_char_array+0xe4>
    249c:	cmp	r6, #0
    24a0:	bne	24b8 <coda_mem_cursor_read_char_array+0x94>
    24a4:	add	sp, sp, #8
    24a8:	ldrd	r4, [sp]
    24ac:	ldr	r6, [sp, #8]
    24b0:	add	sp, sp, #12
    24b4:	pop	{pc}		; (ldr pc, [sp], #4)
    24b8:	mov	r1, r5
    24bc:	mov	r0, r4
    24c0:	mov	r2, #1
    24c4:	bl	308 <transpose_array>
    24c8:	adds	r0, r0, #0
    24cc:	movne	r0, #1
    24d0:	rsb	r0, r0, #0
    24d4:	b	24a4 <coda_mem_cursor_read_char_array+0x80>
    24d8:	mov	r2, r1
    24dc:	movw	r1, #0
    24e0:	movt	r1, #0
    24e4:	str	r6, [sp]
    24e8:	bl	0 <read_array>
    24ec:	b	24a4 <coda_mem_cursor_read_char_array+0x80>
    24f0:	mov	r2, r1
    24f4:	movw	r1, #0
    24f8:	movt	r1, #0
    24fc:	str	r6, [sp]
    2500:	bl	0 <read_array>
    2504:	b	24a4 <coda_mem_cursor_read_char_array+0x80>
    2508:	mvn	r0, #0
    250c:	b	24a4 <coda_mem_cursor_read_char_array+0x80>
    2510:	movw	r1, #0
    2514:	movt	r1, #0
    2518:	ldr	r3, [pc, #40]	; 2548 <coda_mem_cursor_read_char_array+0x124>
    251c:	movw	r0, #0
    2520:	movt	r0, #0
    2524:	mov	r2, #960	; 0x3c0
    2528:	bl	0 <__assert_fail>
    252c:	movw	r1, #0
    2530:	movt	r1, #0
    2534:	ldr	r3, [pc, #12]	; 2548 <coda_mem_cursor_read_char_array+0x124>
    2538:	movw	r0, #0
    253c:	movt	r0, #0
    2540:	movw	r2, #966	; 0x3c6
    2544:	bl	0 <__assert_fail>
    2548:	.word	0x00000470

0000254c <coda_mem_cursor_read_int8_partial_array>:
    254c:	str	r4, [sp, #-8]!
    2550:	mov	r4, r3
    2554:	str	lr, [sp, #4]
    2558:	sub	sp, sp, #8
    255c:	ldr	lr, [r0, #4]
    2560:	add	ip, r0, lr, lsl #4
    2564:	ldr	r3, [ip, #-8]
    2568:	ldr	ip, [r3, #8]
    256c:	cmp	ip, #1
    2570:	beq	25c4 <coda_mem_cursor_read_int8_partial_array+0x78>
    2574:	cmp	ip, #2
    2578:	bne	2614 <coda_mem_cursor_read_int8_partial_array+0xc8>
    257c:	ldr	r3, [r3, #4]
    2580:	ldr	r3, [r3, #40]	; 0x28
    2584:	ldr	ip, [r3]
    2588:	cmp	ip, #1
    258c:	beq	25ec <coda_mem_cursor_read_int8_partial_array+0xa0>
    2590:	cmp	ip, #0
    2594:	bne	2630 <coda_mem_cursor_read_int8_partial_array+0xe4>
    2598:	mov	ip, #1
    259c:	mov	r3, r2
    25a0:	mov	r2, r1
    25a4:	movw	r1, #0
    25a8:	movt	r1, #0
    25ac:	stm	sp, {r4, ip}
    25b0:	bl	24c <read_partial_array>
    25b4:	add	sp, sp, #8
    25b8:	ldr	r4, [sp]
    25bc:	add	sp, sp, #4
    25c0:	pop	{pc}		; (ldr pc, [sp], #4)
    25c4:	mov	r3, r2
    25c8:	mov	r2, r1
    25cc:	stm	sp, {r4, ip}
    25d0:	movw	r1, #0
    25d4:	movt	r1, #0
    25d8:	bl	24c <read_partial_array>
    25dc:	add	sp, sp, #8
    25e0:	ldr	r4, [sp]
    25e4:	add	sp, sp, #4
    25e8:	pop	{pc}		; (ldr pc, [sp], #4)
    25ec:	mov	r3, r2
    25f0:	mov	r2, r1
    25f4:	stm	sp, {r4, ip}
    25f8:	movw	r1, #0
    25fc:	movt	r1, #0
    2600:	bl	24c <read_partial_array>
    2604:	add	sp, sp, #8
    2608:	ldr	r4, [sp]
    260c:	add	sp, sp, #4
    2610:	pop	{pc}		; (ldr pc, [sp], #4)
    2614:	movw	r1, #0
    2618:	movt	r1, #0
    261c:	ldr	r3, [pc, #40]	; 264c <coda_mem_cursor_read_int8_partial_array+0x100>
    2620:	movw	r0, #0
    2624:	movt	r0, #0
    2628:	movw	r2, #991	; 0x3df
    262c:	bl	0 <__assert_fail>
    2630:	movw	r1, #0
    2634:	movt	r1, #0
    2638:	ldr	r3, [pc, #12]	; 264c <coda_mem_cursor_read_int8_partial_array+0x100>
    263c:	movw	r0, #0
    2640:	movt	r0, #0
    2644:	movw	r2, #997	; 0x3e5
    2648:	bl	0 <__assert_fail>
    264c:	.word	0x00000490

00002650 <coda_mem_cursor_read_uint8_partial_array>:
    2650:	str	r4, [sp, #-8]!
    2654:	mov	r4, r3
    2658:	str	lr, [sp, #4]
    265c:	sub	sp, sp, #8
    2660:	ldr	lr, [r0, #4]
    2664:	add	ip, r0, lr, lsl #4
    2668:	ldr	r3, [ip, #-8]
    266c:	ldr	ip, [r3, #8]
    2670:	cmp	ip, #1
    2674:	beq	26c8 <coda_mem_cursor_read_uint8_partial_array+0x78>
    2678:	cmp	ip, #2
    267c:	bne	2718 <coda_mem_cursor_read_uint8_partial_array+0xc8>
    2680:	ldr	r3, [r3, #4]
    2684:	ldr	r3, [r3, #40]	; 0x28
    2688:	ldr	ip, [r3]
    268c:	cmp	ip, #1
    2690:	beq	26f0 <coda_mem_cursor_read_uint8_partial_array+0xa0>
    2694:	cmp	ip, #0
    2698:	bne	2734 <coda_mem_cursor_read_uint8_partial_array+0xe4>
    269c:	mov	ip, #1
    26a0:	mov	r3, r2
    26a4:	mov	r2, r1
    26a8:	movw	r1, #0
    26ac:	movt	r1, #0
    26b0:	stm	sp, {r4, ip}
    26b4:	bl	24c <read_partial_array>
    26b8:	add	sp, sp, #8
    26bc:	ldr	r4, [sp]
    26c0:	add	sp, sp, #4
    26c4:	pop	{pc}		; (ldr pc, [sp], #4)
    26c8:	mov	r3, r2
    26cc:	mov	r2, r1
    26d0:	stm	sp, {r4, ip}
    26d4:	movw	r1, #0
    26d8:	movt	r1, #0
    26dc:	bl	24c <read_partial_array>
    26e0:	add	sp, sp, #8
    26e4:	ldr	r4, [sp]
    26e8:	add	sp, sp, #4
    26ec:	pop	{pc}		; (ldr pc, [sp], #4)
    26f0:	mov	r3, r2
    26f4:	mov	r2, r1
    26f8:	stm	sp, {r4, ip}
    26fc:	movw	r1, #0
    2700:	movt	r1, #0
    2704:	bl	24c <read_partial_array>
    2708:	add	sp, sp, #8
    270c:	ldr	r4, [sp]
    2710:	add	sp, sp, #4
    2714:	pop	{pc}		; (ldr pc, [sp], #4)
    2718:	movw	r1, #0
    271c:	movt	r1, #0
    2720:	ldr	r3, [pc, #40]	; 2750 <coda_mem_cursor_read_uint8_partial_array+0x100>
    2724:	movw	r0, #0
    2728:	movt	r0, #0
    272c:	movw	r2, #1011	; 0x3f3
    2730:	bl	0 <__assert_fail>
    2734:	movw	r1, #0
    2738:	movt	r1, #0
    273c:	ldr	r3, [pc, #12]	; 2750 <coda_mem_cursor_read_uint8_partial_array+0x100>
    2740:	movw	r0, #0
    2744:	movt	r0, #0
    2748:	movw	r2, #1017	; 0x3f9
    274c:	bl	0 <__assert_fail>
    2750:	.word	0x000004b8

00002754 <coda_mem_cursor_read_int16_partial_array>:
    2754:	str	r4, [sp, #-8]!
    2758:	mov	r4, r3
    275c:	str	lr, [sp, #4]
    2760:	sub	sp, sp, #8
    2764:	ldr	lr, [r0, #4]
    2768:	add	ip, r0, lr, lsl #4
    276c:	ldr	r3, [ip, #-8]
    2770:	ldr	ip, [r3, #8]
    2774:	cmp	ip, #1
    2778:	beq	27c8 <coda_mem_cursor_read_int16_partial_array+0x74>
    277c:	cmp	ip, #2
    2780:	bne	281c <coda_mem_cursor_read_int16_partial_array+0xc8>
    2784:	ldr	r3, [r3, #4]
    2788:	ldr	r3, [r3, #40]	; 0x28
    278c:	ldr	r3, [r3]
    2790:	cmp	r3, #1
    2794:	beq	27f4 <coda_mem_cursor_read_int16_partial_array+0xa0>
    2798:	cmp	r3, #0
    279c:	bne	2838 <coda_mem_cursor_read_int16_partial_array+0xe4>
    27a0:	mov	r3, r2
    27a4:	mov	r2, r1
    27a8:	stm	sp, {r4, ip}
    27ac:	movw	r1, #0
    27b0:	movt	r1, #0
    27b4:	bl	24c <read_partial_array>
    27b8:	add	sp, sp, #8
    27bc:	ldr	r4, [sp]
    27c0:	add	sp, sp, #4
    27c4:	pop	{pc}		; (ldr pc, [sp], #4)
    27c8:	mov	ip, #2
    27cc:	mov	r3, r2
    27d0:	mov	r2, r1
    27d4:	movw	r1, #0
    27d8:	movt	r1, #0
    27dc:	stm	sp, {r4, ip}
    27e0:	bl	24c <read_partial_array>
    27e4:	add	sp, sp, #8
    27e8:	ldr	r4, [sp]
    27ec:	add	sp, sp, #4
    27f0:	pop	{pc}		; (ldr pc, [sp], #4)
    27f4:	mov	r3, r2
    27f8:	mov	r2, r1
    27fc:	stm	sp, {r4, ip}
    2800:	movw	r1, #0
    2804:	movt	r1, #0
    2808:	bl	24c <read_partial_array>
    280c:	add	sp, sp, #8
    2810:	ldr	r4, [sp]
    2814:	add	sp, sp, #4
    2818:	pop	{pc}		; (ldr pc, [sp], #4)
    281c:	movw	r1, #0
    2820:	movt	r1, #0
    2824:	ldr	r3, [pc, #40]	; 2854 <coda_mem_cursor_read_int16_partial_array+0x100>
    2828:	movw	r0, #0
    282c:	movt	r0, #0
    2830:	movw	r2, #1031	; 0x407
    2834:	bl	0 <__assert_fail>
    2838:	movw	r1, #0
    283c:	movt	r1, #0
    2840:	ldr	r3, [pc, #12]	; 2854 <coda_mem_cursor_read_int16_partial_array+0x100>
    2844:	movw	r0, #0
    2848:	movt	r0, #0
    284c:	movw	r2, #1037	; 0x40d
    2850:	bl	0 <__assert_fail>
    2854:	.word	0x000004e4

00002858 <coda_mem_cursor_read_uint16_partial_array>:
    2858:	str	r4, [sp, #-8]!
    285c:	mov	r4, r3
    2860:	str	lr, [sp, #4]
    2864:	sub	sp, sp, #8
    2868:	ldr	lr, [r0, #4]
    286c:	add	ip, r0, lr, lsl #4
    2870:	ldr	r3, [ip, #-8]
    2874:	ldr	ip, [r3, #8]
    2878:	cmp	ip, #1
    287c:	beq	28cc <coda_mem_cursor_read_uint16_partial_array+0x74>
    2880:	cmp	ip, #2
    2884:	bne	2920 <coda_mem_cursor_read_uint16_partial_array+0xc8>
    2888:	ldr	r3, [r3, #4]
    288c:	ldr	r3, [r3, #40]	; 0x28
    2890:	ldr	r3, [r3]
    2894:	cmp	r3, #1
    2898:	beq	28f8 <coda_mem_cursor_read_uint16_partial_array+0xa0>
    289c:	cmp	r3, #0
    28a0:	bne	293c <coda_mem_cursor_read_uint16_partial_array+0xe4>
    28a4:	mov	r3, r2
    28a8:	mov	r2, r1
    28ac:	stm	sp, {r4, ip}
    28b0:	movw	r1, #0
    28b4:	movt	r1, #0
    28b8:	bl	24c <read_partial_array>
    28bc:	add	sp, sp, #8
    28c0:	ldr	r4, [sp]
    28c4:	add	sp, sp, #4
    28c8:	pop	{pc}		; (ldr pc, [sp], #4)
    28cc:	mov	ip, #2
    28d0:	mov	r3, r2
    28d4:	mov	r2, r1
    28d8:	movw	r1, #0
    28dc:	movt	r1, #0
    28e0:	stm	sp, {r4, ip}
    28e4:	bl	24c <read_partial_array>
    28e8:	add	sp, sp, #8
    28ec:	ldr	r4, [sp]
    28f0:	add	sp, sp, #4
    28f4:	pop	{pc}		; (ldr pc, [sp], #4)
    28f8:	mov	r3, r2
    28fc:	mov	r2, r1
    2900:	stm	sp, {r4, ip}
    2904:	movw	r1, #0
    2908:	movt	r1, #0
    290c:	bl	24c <read_partial_array>
    2910:	add	sp, sp, #8
    2914:	ldr	r4, [sp]
    2918:	add	sp, sp, #4
    291c:	pop	{pc}		; (ldr pc, [sp], #4)
    2920:	movw	r1, #0
    2924:	movt	r1, #0
    2928:	ldr	r3, [pc, #40]	; 2958 <coda_mem_cursor_read_uint16_partial_array+0x100>
    292c:	movw	r0, #0
    2930:	movt	r0, #0
    2934:	movw	r2, #1051	; 0x41b
    2938:	bl	0 <__assert_fail>
    293c:	movw	r1, #0
    2940:	movt	r1, #0
    2944:	ldr	r3, [pc, #12]	; 2958 <coda_mem_cursor_read_uint16_partial_array+0x100>
    2948:	movw	r0, #0
    294c:	movt	r0, #0
    2950:	movw	r2, #1057	; 0x421
    2954:	bl	0 <__assert_fail>
    2958:	.word	0x00000510

0000295c <coda_mem_cursor_read_int32_partial_array>:
    295c:	str	r4, [sp, #-8]!
    2960:	mov	r4, r3
    2964:	str	lr, [sp, #4]
    2968:	sub	sp, sp, #8
    296c:	ldr	lr, [r0, #4]
    2970:	add	ip, r0, lr, lsl #4
    2974:	ldr	r3, [ip, #-8]
    2978:	ldr	ip, [r3, #8]
    297c:	cmp	ip, #1
    2980:	beq	29d4 <coda_mem_cursor_read_int32_partial_array+0x78>
    2984:	cmp	ip, #2
    2988:	bne	2a2c <coda_mem_cursor_read_int32_partial_array+0xd0>
    298c:	ldr	r3, [r3, #4]
    2990:	ldr	r3, [r3, #40]	; 0x28
    2994:	ldr	r3, [r3]
    2998:	cmp	r3, #1
    299c:	beq	2a00 <coda_mem_cursor_read_int32_partial_array+0xa4>
    29a0:	cmp	r3, #0
    29a4:	bne	2a48 <coda_mem_cursor_read_int32_partial_array+0xec>
    29a8:	mov	ip, #4
    29ac:	mov	r3, r2
    29b0:	mov	r2, r1
    29b4:	movw	r1, #0
    29b8:	movt	r1, #0
    29bc:	stm	sp, {r4, ip}
    29c0:	bl	24c <read_partial_array>
    29c4:	add	sp, sp, #8
    29c8:	ldr	r4, [sp]
    29cc:	add	sp, sp, #4
    29d0:	pop	{pc}		; (ldr pc, [sp], #4)
    29d4:	mov	ip, #4
    29d8:	mov	r3, r2
    29dc:	mov	r2, r1
    29e0:	movw	r1, #0
    29e4:	movt	r1, #0
    29e8:	stm	sp, {r4, ip}
    29ec:	bl	24c <read_partial_array>
    29f0:	add	sp, sp, #8
    29f4:	ldr	r4, [sp]
    29f8:	add	sp, sp, #4
    29fc:	pop	{pc}		; (ldr pc, [sp], #4)
    2a00:	mov	ip, #4
    2a04:	mov	r3, r2
    2a08:	mov	r2, r1
    2a0c:	movw	r1, #0
    2a10:	movt	r1, #0
    2a14:	stm	sp, {r4, ip}
    2a18:	bl	24c <read_partial_array>
    2a1c:	add	sp, sp, #8
    2a20:	ldr	r4, [sp]
    2a24:	add	sp, sp, #4
    2a28:	pop	{pc}		; (ldr pc, [sp], #4)
    2a2c:	movw	r1, #0
    2a30:	movt	r1, #0
    2a34:	ldr	r3, [pc, #40]	; 2a64 <coda_mem_cursor_read_int32_partial_array+0x108>
    2a38:	movw	r0, #0
    2a3c:	movt	r0, #0
    2a40:	movw	r2, #1071	; 0x42f
    2a44:	bl	0 <__assert_fail>
    2a48:	movw	r1, #0
    2a4c:	movt	r1, #0
    2a50:	ldr	r3, [pc, #12]	; 2a64 <coda_mem_cursor_read_int32_partial_array+0x108>
    2a54:	movw	r0, #0
    2a58:	movt	r0, #0
    2a5c:	movw	r2, #1077	; 0x435
    2a60:	bl	0 <__assert_fail>
    2a64:	.word	0x0000053c

00002a68 <coda_mem_cursor_read_uint32_partial_array>:
    2a68:	str	r4, [sp, #-8]!
    2a6c:	mov	r4, r3
    2a70:	str	lr, [sp, #4]
    2a74:	sub	sp, sp, #8
    2a78:	ldr	lr, [r0, #4]
    2a7c:	add	ip, r0, lr, lsl #4
    2a80:	ldr	r3, [ip, #-8]
    2a84:	ldr	ip, [r3, #8]
    2a88:	cmp	ip, #1
    2a8c:	beq	2ae0 <coda_mem_cursor_read_uint32_partial_array+0x78>
    2a90:	cmp	ip, #2
    2a94:	bne	2b38 <coda_mem_cursor_read_uint32_partial_array+0xd0>
    2a98:	ldr	r3, [r3, #4]
    2a9c:	ldr	r3, [r3, #40]	; 0x28
    2aa0:	ldr	r3, [r3]
    2aa4:	cmp	r3, #1
    2aa8:	beq	2b0c <coda_mem_cursor_read_uint32_partial_array+0xa4>
    2aac:	cmp	r3, #0
    2ab0:	bne	2b54 <coda_mem_cursor_read_uint32_partial_array+0xec>
    2ab4:	mov	ip, #4
    2ab8:	mov	r3, r2
    2abc:	mov	r2, r1
    2ac0:	movw	r1, #0
    2ac4:	movt	r1, #0
    2ac8:	stm	sp, {r4, ip}
    2acc:	bl	24c <read_partial_array>
    2ad0:	add	sp, sp, #8
    2ad4:	ldr	r4, [sp]
    2ad8:	add	sp, sp, #4
    2adc:	pop	{pc}		; (ldr pc, [sp], #4)
    2ae0:	mov	ip, #4
    2ae4:	mov	r3, r2
    2ae8:	mov	r2, r1
    2aec:	movw	r1, #0
    2af0:	movt	r1, #0
    2af4:	stm	sp, {r4, ip}
    2af8:	bl	24c <read_partial_array>
    2afc:	add	sp, sp, #8
    2b00:	ldr	r4, [sp]
    2b04:	add	sp, sp, #4
    2b08:	pop	{pc}		; (ldr pc, [sp], #4)
    2b0c:	mov	ip, #4
    2b10:	mov	r3, r2
    2b14:	mov	r2, r1
    2b18:	movw	r1, #0
    2b1c:	movt	r1, #0
    2b20:	stm	sp, {r4, ip}
    2b24:	bl	24c <read_partial_array>
    2b28:	add	sp, sp, #8
    2b2c:	ldr	r4, [sp]
    2b30:	add	sp, sp, #4
    2b34:	pop	{pc}		; (ldr pc, [sp], #4)
    2b38:	movw	r1, #0
    2b3c:	movt	r1, #0
    2b40:	ldr	r3, [pc, #40]	; 2b70 <coda_mem_cursor_read_uint32_partial_array+0x108>
    2b44:	movw	r0, #0
    2b48:	movt	r0, #0
    2b4c:	movw	r2, #1091	; 0x443
    2b50:	bl	0 <__assert_fail>
    2b54:	movw	r1, #0
    2b58:	movt	r1, #0
    2b5c:	ldr	r3, [pc, #12]	; 2b70 <coda_mem_cursor_read_uint32_partial_array+0x108>
    2b60:	movw	r0, #0
    2b64:	movt	r0, #0
    2b68:	movw	r2, #1097	; 0x449
    2b6c:	bl	0 <__assert_fail>
    2b70:	.word	0x00000568

00002b74 <coda_mem_cursor_read_int64_partial_array>:
    2b74:	str	r4, [sp, #-8]!
    2b78:	mov	r4, r3
    2b7c:	str	lr, [sp, #4]
    2b80:	sub	sp, sp, #8
    2b84:	ldr	lr, [r0, #4]
    2b88:	add	ip, r0, lr, lsl #4
    2b8c:	ldr	r3, [ip, #-8]
    2b90:	ldr	ip, [r3, #8]
    2b94:	cmp	ip, #1
    2b98:	beq	2bec <coda_mem_cursor_read_int64_partial_array+0x78>
    2b9c:	cmp	ip, #2
    2ba0:	bne	2c44 <coda_mem_cursor_read_int64_partial_array+0xd0>
    2ba4:	ldr	r3, [r3, #4]
    2ba8:	ldr	r3, [r3, #40]	; 0x28
    2bac:	ldr	r3, [r3]
    2bb0:	cmp	r3, #1
    2bb4:	beq	2c18 <coda_mem_cursor_read_int64_partial_array+0xa4>
    2bb8:	cmp	r3, #0
    2bbc:	bne	2c60 <coda_mem_cursor_read_int64_partial_array+0xec>
    2bc0:	mov	ip, #8
    2bc4:	mov	r3, r2
    2bc8:	mov	r2, r1
    2bcc:	movw	r1, #0
    2bd0:	movt	r1, #0
    2bd4:	stm	sp, {r4, ip}
    2bd8:	bl	24c <read_partial_array>
    2bdc:	add	sp, sp, #8
    2be0:	ldr	r4, [sp]
    2be4:	add	sp, sp, #4
    2be8:	pop	{pc}		; (ldr pc, [sp], #4)
    2bec:	mov	ip, #8
    2bf0:	mov	r3, r2
    2bf4:	mov	r2, r1
    2bf8:	movw	r1, #0
    2bfc:	movt	r1, #0
    2c00:	stm	sp, {r4, ip}
    2c04:	bl	24c <read_partial_array>
    2c08:	add	sp, sp, #8
    2c0c:	ldr	r4, [sp]
    2c10:	add	sp, sp, #4
    2c14:	pop	{pc}		; (ldr pc, [sp], #4)
    2c18:	mov	ip, #8
    2c1c:	mov	r3, r2
    2c20:	mov	r2, r1
    2c24:	movw	r1, #0
    2c28:	movt	r1, #0
    2c2c:	stm	sp, {r4, ip}
    2c30:	bl	24c <read_partial_array>
    2c34:	add	sp, sp, #8
    2c38:	ldr	r4, [sp]
    2c3c:	add	sp, sp, #4
    2c40:	pop	{pc}		; (ldr pc, [sp], #4)
    2c44:	movw	r1, #0
    2c48:	movt	r1, #0
    2c4c:	ldr	r3, [pc, #40]	; 2c7c <coda_mem_cursor_read_int64_partial_array+0x108>
    2c50:	movw	r0, #0
    2c54:	movt	r0, #0
    2c58:	movw	r2, #1111	; 0x457
    2c5c:	bl	0 <__assert_fail>
    2c60:	movw	r1, #0
    2c64:	movt	r1, #0
    2c68:	ldr	r3, [pc, #12]	; 2c7c <coda_mem_cursor_read_int64_partial_array+0x108>
    2c6c:	movw	r0, #0
    2c70:	movt	r0, #0
    2c74:	movw	r2, #1117	; 0x45d
    2c78:	bl	0 <__assert_fail>
    2c7c:	.word	0x00000594

00002c80 <coda_mem_cursor_read_uint64_partial_array>:
    2c80:	str	r4, [sp, #-8]!
    2c84:	mov	r4, r3
    2c88:	str	lr, [sp, #4]
    2c8c:	sub	sp, sp, #8
    2c90:	ldr	lr, [r0, #4]
    2c94:	add	ip, r0, lr, lsl #4
    2c98:	ldr	r3, [ip, #-8]
    2c9c:	ldr	ip, [r3, #8]
    2ca0:	cmp	ip, #1
    2ca4:	beq	2cf8 <coda_mem_cursor_read_uint64_partial_array+0x78>
    2ca8:	cmp	ip, #2
    2cac:	bne	2d50 <coda_mem_cursor_read_uint64_partial_array+0xd0>
    2cb0:	ldr	r3, [r3, #4]
    2cb4:	ldr	r3, [r3, #40]	; 0x28
    2cb8:	ldr	r3, [r3]
    2cbc:	cmp	r3, #1
    2cc0:	beq	2d24 <coda_mem_cursor_read_uint64_partial_array+0xa4>
    2cc4:	cmp	r3, #0
    2cc8:	bne	2d6c <coda_mem_cursor_read_uint64_partial_array+0xec>
    2ccc:	mov	ip, #8
    2cd0:	mov	r3, r2
    2cd4:	mov	r2, r1
    2cd8:	movw	r1, #0
    2cdc:	movt	r1, #0
    2ce0:	stm	sp, {r4, ip}
    2ce4:	bl	24c <read_partial_array>
    2ce8:	add	sp, sp, #8
    2cec:	ldr	r4, [sp]
    2cf0:	add	sp, sp, #4
    2cf4:	pop	{pc}		; (ldr pc, [sp], #4)
    2cf8:	mov	ip, #8
    2cfc:	mov	r3, r2
    2d00:	mov	r2, r1
    2d04:	movw	r1, #0
    2d08:	movt	r1, #0
    2d0c:	stm	sp, {r4, ip}
    2d10:	bl	24c <read_partial_array>
    2d14:	add	sp, sp, #8
    2d18:	ldr	r4, [sp]
    2d1c:	add	sp, sp, #4
    2d20:	pop	{pc}		; (ldr pc, [sp], #4)
    2d24:	mov	ip, #8
    2d28:	mov	r3, r2
    2d2c:	mov	r2, r1
    2d30:	movw	r1, #0
    2d34:	movt	r1, #0
    2d38:	stm	sp, {r4, ip}
    2d3c:	bl	24c <read_partial_array>
    2d40:	add	sp, sp, #8
    2d44:	ldr	r4, [sp]
    2d48:	add	sp, sp, #4
    2d4c:	pop	{pc}		; (ldr pc, [sp], #4)
    2d50:	movw	r1, #0
    2d54:	movt	r1, #0
    2d58:	ldr	r3, [pc, #40]	; 2d88 <coda_mem_cursor_read_uint64_partial_array+0x108>
    2d5c:	movw	r0, #0
    2d60:	movt	r0, #0
    2d64:	movw	r2, #1131	; 0x46b
    2d68:	bl	0 <__assert_fail>
    2d6c:	movw	r1, #0
    2d70:	movt	r1, #0
    2d74:	ldr	r3, [pc, #12]	; 2d88 <coda_mem_cursor_read_uint64_partial_array+0x108>
    2d78:	movw	r0, #0
    2d7c:	movt	r0, #0
    2d80:	movw	r2, #1137	; 0x471
    2d84:	bl	0 <__assert_fail>
    2d88:	.word	0x000005c0

00002d8c <coda_mem_cursor_read_float_partial_array>:
    2d8c:	str	r4, [sp, #-8]!
    2d90:	mov	r4, r3
    2d94:	str	lr, [sp, #4]
    2d98:	sub	sp, sp, #8
    2d9c:	ldr	lr, [r0, #4]
    2da0:	add	ip, r0, lr, lsl #4
    2da4:	ldr	r3, [ip, #-8]
    2da8:	ldr	ip, [r3, #8]
    2dac:	cmp	ip, #1
    2db0:	beq	2e04 <coda_mem_cursor_read_float_partial_array+0x78>
    2db4:	cmp	ip, #2
    2db8:	bne	2e5c <coda_mem_cursor_read_float_partial_array+0xd0>
    2dbc:	ldr	r3, [r3, #4]
    2dc0:	ldr	r3, [r3, #40]	; 0x28
    2dc4:	ldr	r3, [r3]
    2dc8:	cmp	r3, #1
    2dcc:	beq	2e30 <coda_mem_cursor_read_float_partial_array+0xa4>
    2dd0:	cmp	r3, #0
    2dd4:	bne	2e78 <coda_mem_cursor_read_float_partial_array+0xec>
    2dd8:	mov	ip, #4
    2ddc:	mov	r3, r2
    2de0:	mov	r2, r1
    2de4:	movw	r1, #0
    2de8:	movt	r1, #0
    2dec:	stm	sp, {r4, ip}
    2df0:	bl	24c <read_partial_array>
    2df4:	add	sp, sp, #8
    2df8:	ldr	r4, [sp]
    2dfc:	add	sp, sp, #4
    2e00:	pop	{pc}		; (ldr pc, [sp], #4)
    2e04:	mov	ip, #4
    2e08:	mov	r3, r2
    2e0c:	mov	r2, r1
    2e10:	movw	r1, #0
    2e14:	movt	r1, #0
    2e18:	stm	sp, {r4, ip}
    2e1c:	bl	24c <read_partial_array>
    2e20:	add	sp, sp, #8
    2e24:	ldr	r4, [sp]
    2e28:	add	sp, sp, #4
    2e2c:	pop	{pc}		; (ldr pc, [sp], #4)
    2e30:	mov	ip, #4
    2e34:	mov	r3, r2
    2e38:	mov	r2, r1
    2e3c:	movw	r1, #0
    2e40:	movt	r1, #0
    2e44:	stm	sp, {r4, ip}
    2e48:	bl	24c <read_partial_array>
    2e4c:	add	sp, sp, #8
    2e50:	ldr	r4, [sp]
    2e54:	add	sp, sp, #4
    2e58:	pop	{pc}		; (ldr pc, [sp], #4)
    2e5c:	movw	r1, #0
    2e60:	movt	r1, #0
    2e64:	ldr	r3, [pc, #40]	; 2e94 <coda_mem_cursor_read_float_partial_array+0x108>
    2e68:	movw	r0, #0
    2e6c:	movt	r0, #0
    2e70:	movw	r2, #1151	; 0x47f
    2e74:	bl	0 <__assert_fail>
    2e78:	movw	r1, #0
    2e7c:	movt	r1, #0
    2e80:	ldr	r3, [pc, #12]	; 2e94 <coda_mem_cursor_read_float_partial_array+0x108>
    2e84:	movw	r0, #0
    2e88:	movt	r0, #0
    2e8c:	movw	r2, #1157	; 0x485
    2e90:	bl	0 <__assert_fail>
    2e94:	.word	0x000005ec

00002e98 <coda_mem_cursor_read_double_partial_array>:
    2e98:	str	r4, [sp, #-8]!
    2e9c:	mov	r4, r3
    2ea0:	str	lr, [sp, #4]
    2ea4:	sub	sp, sp, #8
    2ea8:	ldr	lr, [r0, #4]
    2eac:	add	ip, r0, lr, lsl #4
    2eb0:	ldr	r3, [ip, #-8]
    2eb4:	ldr	ip, [r3, #8]
    2eb8:	cmp	ip, #1
    2ebc:	beq	2f10 <coda_mem_cursor_read_double_partial_array+0x78>
    2ec0:	cmp	ip, #2
    2ec4:	bne	2f68 <coda_mem_cursor_read_double_partial_array+0xd0>
    2ec8:	ldr	r3, [r3, #4]
    2ecc:	ldr	r3, [r3, #40]	; 0x28
    2ed0:	ldr	r3, [r3]
    2ed4:	cmp	r3, #1
    2ed8:	beq	2f3c <coda_mem_cursor_read_double_partial_array+0xa4>
    2edc:	cmp	r3, #0
    2ee0:	bne	2f84 <coda_mem_cursor_read_double_partial_array+0xec>
    2ee4:	mov	ip, #8
    2ee8:	mov	r3, r2
    2eec:	mov	r2, r1
    2ef0:	movw	r1, #0
    2ef4:	movt	r1, #0
    2ef8:	stm	sp, {r4, ip}
    2efc:	bl	24c <read_partial_array>
    2f00:	add	sp, sp, #8
    2f04:	ldr	r4, [sp]
    2f08:	add	sp, sp, #4
    2f0c:	pop	{pc}		; (ldr pc, [sp], #4)
    2f10:	mov	ip, #8
    2f14:	mov	r3, r2
    2f18:	mov	r2, r1
    2f1c:	movw	r1, #0
    2f20:	movt	r1, #0
    2f24:	stm	sp, {r4, ip}
    2f28:	bl	24c <read_partial_array>
    2f2c:	add	sp, sp, #8
    2f30:	ldr	r4, [sp]
    2f34:	add	sp, sp, #4
    2f38:	pop	{pc}		; (ldr pc, [sp], #4)
    2f3c:	mov	ip, #8
    2f40:	mov	r3, r2
    2f44:	mov	r2, r1
    2f48:	movw	r1, #0
    2f4c:	movt	r1, #0
    2f50:	stm	sp, {r4, ip}
    2f54:	bl	24c <read_partial_array>
    2f58:	add	sp, sp, #8
    2f5c:	ldr	r4, [sp]
    2f60:	add	sp, sp, #4
    2f64:	pop	{pc}		; (ldr pc, [sp], #4)
    2f68:	movw	r1, #0
    2f6c:	movt	r1, #0
    2f70:	ldr	r3, [pc, #40]	; 2fa0 <coda_mem_cursor_read_double_partial_array+0x108>
    2f74:	movw	r0, #0
    2f78:	movt	r0, #0
    2f7c:	movw	r2, #1171	; 0x493
    2f80:	bl	0 <__assert_fail>
    2f84:	movw	r1, #0
    2f88:	movt	r1, #0
    2f8c:	ldr	r3, [pc, #12]	; 2fa0 <coda_mem_cursor_read_double_partial_array+0x108>
    2f90:	movw	r0, #0
    2f94:	movt	r0, #0
    2f98:	movw	r2, #1177	; 0x499
    2f9c:	bl	0 <__assert_fail>
    2fa0:	.word	0x00000618

00002fa4 <coda_mem_cursor_read_char_partial_array>:
    2fa4:	str	r4, [sp, #-8]!
    2fa8:	mov	r4, r3
    2fac:	str	lr, [sp, #4]
    2fb0:	sub	sp, sp, #8
    2fb4:	ldr	lr, [r0, #4]
    2fb8:	add	ip, r0, lr, lsl #4
    2fbc:	ldr	r3, [ip, #-8]
    2fc0:	ldr	ip, [r3, #8]
    2fc4:	cmp	ip, #1
    2fc8:	beq	301c <coda_mem_cursor_read_char_partial_array+0x78>
    2fcc:	cmp	ip, #2
    2fd0:	bne	306c <coda_mem_cursor_read_char_partial_array+0xc8>
    2fd4:	ldr	r3, [r3, #4]
    2fd8:	ldr	r3, [r3, #40]	; 0x28
    2fdc:	ldr	ip, [r3]
    2fe0:	cmp	ip, #1
    2fe4:	beq	3044 <coda_mem_cursor_read_char_partial_array+0xa0>
    2fe8:	cmp	ip, #0
    2fec:	bne	3088 <coda_mem_cursor_read_char_partial_array+0xe4>
    2ff0:	mov	ip, #1
    2ff4:	mov	r3, r2
    2ff8:	mov	r2, r1
    2ffc:	movw	r1, #0
    3000:	movt	r1, #0
    3004:	stm	sp, {r4, ip}
    3008:	bl	24c <read_partial_array>
    300c:	add	sp, sp, #8
    3010:	ldr	r4, [sp]
    3014:	add	sp, sp, #4
    3018:	pop	{pc}		; (ldr pc, [sp], #4)
    301c:	mov	r3, r2
    3020:	mov	r2, r1
    3024:	stm	sp, {r4, ip}
    3028:	movw	r1, #0
    302c:	movt	r1, #0
    3030:	bl	24c <read_partial_array>
    3034:	add	sp, sp, #8
    3038:	ldr	r4, [sp]
    303c:	add	sp, sp, #4
    3040:	pop	{pc}		; (ldr pc, [sp], #4)
    3044:	mov	r3, r2
    3048:	mov	r2, r1
    304c:	stm	sp, {r4, ip}
    3050:	movw	r1, #0
    3054:	movt	r1, #0
    3058:	bl	24c <read_partial_array>
    305c:	add	sp, sp, #8
    3060:	ldr	r4, [sp]
    3064:	add	sp, sp, #4
    3068:	pop	{pc}		; (ldr pc, [sp], #4)
    306c:	movw	r1, #0
    3070:	movt	r1, #0
    3074:	ldr	r3, [pc, #40]	; 30a4 <coda_mem_cursor_read_char_partial_array+0x100>
    3078:	movw	r0, #0
    307c:	movt	r0, #0
    3080:	movw	r2, #1191	; 0x4a7
    3084:	bl	0 <__assert_fail>
    3088:	movw	r1, #0
    308c:	movt	r1, #0
    3090:	ldr	r3, [pc, #12]	; 30a4 <coda_mem_cursor_read_char_partial_array+0x100>
    3094:	movw	r0, #0
    3098:	movt	r0, #0
    309c:	movw	r2, #1197	; 0x4ad
    30a0:	bl	0 <__assert_fail>
    30a4:	.word	0x00000644
