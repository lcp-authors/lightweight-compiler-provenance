
../compcert-repos/stcorp-coda-3a25f25/CMakeFiles/codadump.dir/tools/codadump/codadump-yaml.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <print_yaml_data>:
   0:	push	{r4, sl, fp, lr}
   4:	add	fp, sp, #8
   8:	sub	sp, sp, #528	; 0x210
   c:	movw	r1, #0
  10:	movw	r4, #0
  14:	movt	r1, #0
  18:	movt	r4, #0
  1c:	str	r0, [r1]
  20:	ldr	r0, [r4]
  24:	sub	r1, fp, #12
  28:	bl	0 <coda_open>
  2c:	cmp	r0, #0
  30:	beq	70 <print_yaml_data+0x70>
  34:	bl	0 <coda_get_errno>
  38:	ldr	r0, [r0]
  3c:	cmn	r0, #21
  40:	bne	6c <print_yaml_data+0x6c>
  44:	mov	r0, #0
  48:	bl	0 <coda_set_option_use_mmap>
  4c:	ldr	r0, [r4]
  50:	sub	r1, fp, #12
  54:	bl	0 <coda_open>
  58:	mov	r4, r0
  5c:	mov	r0, #1
  60:	bl	0 <coda_set_option_use_mmap>
  64:	cmp	r4, #0
  68:	beq	70 <print_yaml_data+0x70>
  6c:	bl	0 <handle_coda_error>
  70:	ldr	r1, [fp, #-12]
  74:	mov	r0, sp
  78:	bl	0 <coda_cursor_set_product>
  7c:	cmp	r0, #0
  80:	beq	88 <print_yaml_data+0x88>
  84:	bl	0 <handle_coda_error>
  88:	movw	r0, #0
  8c:	movt	r0, #0
  90:	ldr	r1, [r0]
  94:	cmp	r1, #0
  98:	beq	b0 <print_yaml_data+0xb0>
  9c:	mov	r0, sp
  a0:	bl	0 <coda_cursor_goto>
  a4:	cmp	r0, #0
  a8:	beq	b0 <print_yaml_data+0xb0>
  ac:	bl	0 <handle_coda_error>
  b0:	mov	r0, #0
  b4:	bl	0 <coda_set_option_perform_boundary_checks>
  b8:	mov	r0, sp
  bc:	mov	r1, #0
  c0:	bl	d4 <print_data>
  c4:	ldr	r0, [fp, #-12]
  c8:	bl	0 <coda_close>
  cc:	sub	sp, fp, #8
  d0:	pop	{r4, sl, fp, pc}

000000d4 <print_data>:
  d4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
  d8:	add	fp, sp, #28
  dc:	sub	sp, sp, #76	; 0x4c
  e0:	mov	sl, r0
  e4:	mov	r0, #0
  e8:	mov	r5, r1
  ec:	str	r0, [fp, #-36]	; 0xffffffdc
  f0:	movw	r0, #0
  f4:	movt	r0, #0
  f8:	ldr	r0, [r0]
  fc:	cmp	r0, #0
 100:	beq	1f4 <print_data+0x120>
 104:	sub	r1, fp, #36	; 0x24
 108:	mov	r0, sl
 10c:	bl	0 <coda_cursor_has_attributes>
 110:	cmp	r0, #0
 114:	beq	11c <print_data+0x48>
 118:	bl	0 <handle_coda_error>
 11c:	ldr	r0, [fp, #-36]	; 0xffffffdc
 120:	cmp	r0, #0
 124:	beq	1f4 <print_data+0x120>
 128:	cmp	r5, #0
 12c:	beq	188 <print_data+0xb4>
 130:	movw	r0, #0
 134:	movt	r0, #0
 138:	bl	ab8 <ff_printf>
 13c:	movw	r0, #0
 140:	movt	r0, #0
 144:	ldr	r0, [r0]
 148:	cmp	r0, #0
 14c:	blt	a98 <print_data+0x9c4>
 150:	beq	188 <print_data+0xb4>
 154:	movw	r7, #0
 158:	movw	r6, #0
 15c:	add	r4, r0, #1
 160:	movt	r7, #0
 164:	movt	r6, #0
 168:	ldr	r3, [r7]
 16c:	mov	r0, r6
 170:	mov	r1, #2
 174:	mov	r2, #1
 178:	bl	0 <fwrite>
 17c:	sub	r4, r4, #1
 180:	cmp	r4, #1
 184:	bgt	168 <print_data+0x94>
 188:	movw	r0, #0
 18c:	movt	r0, #0
 190:	bl	ab8 <ff_printf>
 194:	mov	r0, sl
 198:	bl	0 <coda_cursor_goto_attributes>
 19c:	cmp	r0, #0
 1a0:	beq	1a8 <print_data+0xd4>
 1a4:	bl	0 <handle_coda_error>
 1a8:	movw	r4, #0
 1ac:	mov	r1, #1
 1b0:	movt	r4, #0
 1b4:	ldr	r0, [r4]
 1b8:	add	r0, r0, #1
 1bc:	str	r0, [r4]
 1c0:	mov	r0, sl
 1c4:	bl	d4 <print_data>
 1c8:	ldr	r0, [r4]
 1cc:	sub	r0, r0, #1
 1d0:	str	r0, [r4]
 1d4:	mov	r0, sl
 1d8:	bl	0 <coda_cursor_goto_parent>
 1dc:	movw	r0, #0
 1e0:	movt	r0, #0
 1e4:	bl	b00 <fi_printf>
 1e8:	ldr	r0, [r4]
 1ec:	add	r0, r0, #1
 1f0:	str	r0, [r4]
 1f4:	sub	r1, fp, #32
 1f8:	mov	r0, sl
 1fc:	bl	0 <coda_cursor_get_type_class>
 200:	cmp	r0, #0
 204:	beq	20c <print_data+0x138>
 208:	bl	0 <handle_coda_error>
 20c:	ldr	r0, [fp, #-32]	; 0xffffffe0
 210:	cmp	r0, #6
 214:	bhi	a40 <print_data+0x96c>
 218:	add	r1, pc, #0
 21c:	ldr	pc, [r1, r0, lsl #2]
 220:	.word	0x000002d0
 224:	.word	0x00000424
 228:	.word	0x0000023c
 22c:	.word	0x0000023c
 230:	.word	0x0000023c
 234:	.word	0x0000023c
 238:	.word	0x00000468
 23c:	sub	r1, fp, #40	; 0x28
 240:	mov	r0, sl
 244:	bl	0 <coda_cursor_get_read_type>
 248:	cmp	r0, #0
 24c:	beq	254 <print_data+0x180>
 250:	bl	0 <handle_coda_error>
 254:	ldr	r0, [fp, #-40]	; 0xffffffd8
 258:	add	r0, r0, #1
 25c:	cmp	r0, #13
 260:	bhi	a40 <print_data+0x96c>
 264:	add	r1, pc, #0
 268:	ldr	pc, [r1, r0, lsl #2]
 26c:	.word	0x000004a4
 270:	.word	0x000002a4
 274:	.word	0x000004b0
 278:	.word	0x000002a4
 27c:	.word	0x000004b0
 280:	.word	0x000002a4
 284:	.word	0x000004b0
 288:	.word	0x00000608
 28c:	.word	0x00000638
 290:	.word	0x000004dc
 294:	.word	0x000004dc
 298:	.word	0x00000520
 29c:	.word	0x0000055c
 2a0:	.word	0x00000678
 2a4:	add	r1, sp, #16
 2a8:	mov	r0, sl
 2ac:	bl	0 <coda_cursor_read_int32>
 2b0:	cmp	r0, #0
 2b4:	beq	2bc <print_data+0x1e8>
 2b8:	bl	0 <handle_coda_error>
 2bc:	ldr	r1, [sp, #16]
 2c0:	movw	r0, #0
 2c4:	movt	r0, #0
 2c8:	bl	ab8 <ff_printf>
 2cc:	b	a40 <print_data+0x96c>
 2d0:	add	r1, sp, #16
 2d4:	mov	r0, sl
 2d8:	bl	0 <coda_cursor_get_num_elements>
 2dc:	cmp	r0, #0
 2e0:	beq	2e8 <print_data+0x214>
 2e4:	bl	0 <handle_coda_error>
 2e8:	ldr	r0, [sp, #16]
 2ec:	cmp	r0, #1
 2f0:	blt	514 <print_data+0x440>
 2f4:	cmp	r5, #0
 2f8:	beq	308 <print_data+0x234>
 2fc:	movw	r0, #0
 300:	movt	r0, #0
 304:	bl	ab8 <ff_printf>
 308:	add	r1, sp, #8
 30c:	mov	r0, sl
 310:	bl	0 <coda_cursor_get_type>
 314:	cmp	r0, #0
 318:	beq	320 <print_data+0x24c>
 31c:	bl	0 <handle_coda_error>
 320:	ldr	r0, [sp, #8]
 324:	sub	r1, fp, #40	; 0x28
 328:	bl	0 <coda_type_get_record_union_status>
 32c:	cmp	r0, #0
 330:	beq	338 <print_data+0x264>
 334:	bl	0 <handle_coda_error>
 338:	ldr	r0, [fp, #-40]	; 0xffffffd8
 33c:	cmp	r0, #0
 340:	beq	740 <print_data+0x66c>
 344:	sub	r1, fp, #44	; 0x2c
 348:	mov	r0, sl
 34c:	bl	0 <coda_cursor_get_available_union_field_index>
 350:	cmp	r0, #0
 354:	beq	35c <print_data+0x288>
 358:	bl	0 <handle_coda_error>
 35c:	ldr	r1, [fp, #-44]	; 0xffffffd4
 360:	ldr	r0, [sp, #8]
 364:	sub	r2, fp, #48	; 0x30
 368:	bl	0 <coda_type_get_record_field_name>
 36c:	cmp	r0, #0
 370:	beq	378 <print_data+0x2a4>
 374:	bl	0 <handle_coda_error>
 378:	ldr	r1, [fp, #-44]	; 0xffffffd4
 37c:	mov	r0, sl
 380:	bl	0 <coda_cursor_goto_record_field_by_index>
 384:	cmp	r0, #0
 388:	beq	390 <print_data+0x2bc>
 38c:	bl	0 <handle_coda_error>
 390:	cmp	r5, #0
 394:	beq	3e4 <print_data+0x310>
 398:	movw	r0, #0
 39c:	movt	r0, #0
 3a0:	ldr	r0, [r0]
 3a4:	cmp	r0, #0
 3a8:	blt	a98 <print_data+0x9c4>
 3ac:	beq	3e4 <print_data+0x310>
 3b0:	movw	r6, #0
 3b4:	movw	r5, #0
 3b8:	add	r4, r0, #1
 3bc:	movt	r6, #0
 3c0:	movt	r5, #0
 3c4:	ldr	r3, [r6]
 3c8:	mov	r0, r5
 3cc:	mov	r1, #2
 3d0:	mov	r2, #1
 3d4:	bl	0 <fwrite>
 3d8:	sub	r4, r4, #1
 3dc:	cmp	r4, #1
 3e0:	bgt	3c4 <print_data+0x2f0>
 3e4:	ldr	r1, [fp, #-48]	; 0xffffffd0
 3e8:	movw	r0, #0
 3ec:	movt	r0, #0
 3f0:	bl	ab8 <ff_printf>
 3f4:	movw	r4, #0
 3f8:	mov	r1, #1
 3fc:	movt	r4, #0
 400:	ldr	r0, [r4]
 404:	add	r0, r0, #1
 408:	str	r0, [r4]
 40c:	mov	r0, sl
 410:	bl	d4 <print_data>
 414:	ldr	r0, [r4]
 418:	sub	r0, r0, #1
 41c:	str	r0, [r4]
 420:	b	a28 <print_data+0x954>
 424:	add	r5, sp, #16
 428:	add	r1, sp, #8
 42c:	mov	r0, sl
 430:	mov	r2, r5
 434:	bl	0 <coda_cursor_get_array_dim>
 438:	cmp	r0, #0
 43c:	beq	444 <print_data+0x370>
 440:	bl	0 <handle_coda_error>
 444:	ldr	r0, [sp, #8]
 448:	cmp	r0, #0
 44c:	blt	a34 <print_data+0x960>
 450:	beq	894 <print_data+0x7c0>
 454:	cmp	r0, #4
 458:	bcs	944 <print_data+0x870>
 45c:	mov	r1, #0
 460:	mov	r6, #1
 464:	b	978 <print_data+0x8a4>
 468:	sub	r1, fp, #40	; 0x28
 46c:	mov	r0, sl
 470:	bl	0 <coda_cursor_get_special_type>
 474:	cmp	r0, #0
 478:	beq	480 <print_data+0x3ac>
 47c:	bl	0 <handle_coda_error>
 480:	ldr	r0, [fp, #-40]	; 0xffffffd8
 484:	cmp	r0, #3
 488:	bhi	a40 <print_data+0x96c>
 48c:	add	r1, pc, #0
 490:	ldr	pc, [r1, r0, lsl #2]
 494:	.word	0x000004a4
 498:	.word	0x00000914
 49c:	.word	0x0000089c
 4a0:	.word	0x000008dc
 4a4:	movw	r0, #0
 4a8:	movt	r0, #0
 4ac:	b	a3c <print_data+0x968>
 4b0:	add	r1, sp, #16
 4b4:	mov	r0, sl
 4b8:	bl	0 <coda_cursor_read_uint32>
 4bc:	cmp	r0, #0
 4c0:	beq	4c8 <print_data+0x3f4>
 4c4:	bl	0 <handle_coda_error>
 4c8:	ldr	r1, [sp, #16]
 4cc:	movw	r0, #0
 4d0:	movt	r0, #0
 4d4:	bl	ab8 <ff_printf>
 4d8:	b	a40 <print_data+0x96c>
 4dc:	add	r1, sp, #16
 4e0:	mov	r0, sl
 4e4:	bl	0 <coda_cursor_read_double>
 4e8:	cmp	r0, #0
 4ec:	beq	4f4 <print_data+0x420>
 4f0:	bl	0 <handle_coda_error>
 4f4:	vldr	d16, [sp, #16]
 4f8:	ldr	r0, [fp, #-40]	; 0xffffffd8
 4fc:	vmov	r2, r3, d16
 500:	cmp	r0, #8
 504:	bne	934 <print_data+0x860>
 508:	movw	r0, #0
 50c:	movt	r0, #0
 510:	b	93c <print_data+0x868>
 514:	movw	r0, #0
 518:	movt	r0, #0
 51c:	b	a3c <print_data+0x968>
 520:	add	r1, sp, #16
 524:	mov	r0, sl
 528:	bl	0 <coda_cursor_read_char>
 52c:	cmp	r0, #0
 530:	beq	538 <print_data+0x464>
 534:	bl	0 <handle_coda_error>
 538:	movw	r0, #0
 53c:	movt	r0, #0
 540:	bl	ab8 <ff_printf>
 544:	add	r0, sp, #16
 548:	mov	r1, #1
 54c:	bl	bb4 <print_escaped>
 550:	movw	r0, #0
 554:	movt	r0, #0
 558:	b	a3c <print_data+0x968>
 55c:	add	r1, sp, #16
 560:	mov	r0, sl
 564:	bl	0 <coda_cursor_get_string_length>
 568:	cmp	r0, #0
 56c:	beq	574 <print_data+0x4a0>
 570:	bl	0 <handle_coda_error>
 574:	ldr	r0, [sp, #16]
 578:	add	r6, r0, #1
 57c:	mov	r0, r6
 580:	bl	0 <malloc>
 584:	mov	r5, r0
 588:	cmp	r0, #0
 58c:	bne	5c0 <print_data+0x4ec>
 590:	movw	r1, #0
 594:	movw	r3, #0
 598:	movw	r0, #361	; 0x169
 59c:	mov	r2, r6
 5a0:	str	r0, [sp]
 5a4:	movt	r1, #0
 5a8:	movt	r3, #0
 5ac:	mvn	r0, #0
 5b0:	bl	0 <coda_set_error>
 5b4:	bl	0 <handle_coda_error>
 5b8:	ldr	r0, [sp, #16]
 5bc:	add	r6, r0, #1
 5c0:	mov	r0, sl
 5c4:	mov	r1, r5
 5c8:	mov	r2, r6
 5cc:	bl	0 <coda_cursor_read_string>
 5d0:	cmp	r0, #0
 5d4:	beq	5dc <print_data+0x508>
 5d8:	bl	0 <handle_coda_error>
 5dc:	movw	r0, #0
 5e0:	movt	r0, #0
 5e4:	bl	ab8 <ff_printf>
 5e8:	ldr	r1, [sp, #16]
 5ec:	mov	r0, r5
 5f0:	bl	bb4 <print_escaped>
 5f4:	ldr	r1, [sp, #16]
 5f8:	movw	r0, #0
 5fc:	movt	r0, #0
 600:	bl	ab8 <ff_printf>
 604:	b	734 <print_data+0x660>
 608:	add	r1, sp, #8
 60c:	mov	r0, sl
 610:	bl	0 <coda_cursor_read_int64>
 614:	cmp	r0, #0
 618:	beq	620 <print_data+0x54c>
 61c:	bl	0 <handle_coda_error>
 620:	ldr	r0, [sp, #8]
 624:	ldr	r1, [sp, #12]
 628:	add	r4, sp, #16
 62c:	mov	r2, r4
 630:	bl	0 <coda_str64>
 634:	b	664 <print_data+0x590>
 638:	add	r1, sp, #8
 63c:	mov	r0, sl
 640:	bl	0 <coda_cursor_read_uint64>
 644:	cmp	r0, #0
 648:	beq	650 <print_data+0x57c>
 64c:	bl	0 <handle_coda_error>
 650:	ldr	r0, [sp, #8]
 654:	ldr	r1, [sp, #12]
 658:	add	r4, sp, #16
 65c:	mov	r2, r4
 660:	bl	0 <coda_str64u>
 664:	movw	r0, #0
 668:	mov	r1, r4
 66c:	movt	r0, #0
 670:	bl	ab8 <ff_printf>
 674:	b	a40 <print_data+0x96c>
 678:	add	r1, sp, #16
 67c:	mov	r0, sl
 680:	bl	0 <coda_cursor_get_bit_size>
 684:	cmp	r0, #0
 688:	beq	690 <print_data+0x5bc>
 68c:	bl	0 <handle_coda_error>
 690:	ldr	r4, [sp, #16]
 694:	ldr	r7, [sp, #20]
 698:	lsr	r0, r4, #3
 69c:	tst	r4, #7
 6a0:	orr	r6, r0, r7, lsl #29
 6a4:	addne	r6, r6, #1
 6a8:	mov	r0, r6
 6ac:	bl	0 <malloc>
 6b0:	mov	r5, r0
 6b4:	cmp	r0, #0
 6b8:	bne	6ec <print_data+0x618>
 6bc:	movw	r1, #0
 6c0:	movw	r3, #0
 6c4:	mov	r0, #392	; 0x188
 6c8:	mov	r2, r6
 6cc:	str	r0, [sp]
 6d0:	movt	r1, #0
 6d4:	movt	r3, #0
 6d8:	mvn	r0, #0
 6dc:	bl	0 <coda_set_error>
 6e0:	bl	0 <handle_coda_error>
 6e4:	ldr	r4, [sp, #16]
 6e8:	ldr	r7, [sp, #20]
 6ec:	mov	r0, sl
 6f0:	mov	r1, r5
 6f4:	mov	r2, #0
 6f8:	mov	r3, #0
 6fc:	stm	sp, {r4, r7}
 700:	bl	0 <coda_cursor_read_bits>
 704:	cmp	r0, #0
 708:	beq	710 <print_data+0x63c>
 70c:	bl	0 <handle_coda_error>
 710:	movw	r0, #0
 714:	movt	r0, #0
 718:	bl	ab8 <ff_printf>
 71c:	mov	r0, r5
 720:	mov	r1, r6
 724:	bl	bb4 <print_escaped>
 728:	movw	r0, #0
 72c:	movt	r0, #0
 730:	bl	ab8 <ff_printf>
 734:	mov	r0, r5
 738:	bl	0 <free>
 73c:	b	a40 <print_data+0x96c>
 740:	mov	r0, sl
 744:	bl	0 <coda_cursor_goto_first_record_field>
 748:	cmp	r0, #0
 74c:	beq	754 <print_data+0x680>
 750:	bl	0 <handle_coda_error>
 754:	ldr	r0, [sp, #16]
 758:	mov	r1, #0
 75c:	str	r1, [fp, #-44]	; 0xffffffd4
 760:	cmp	r0, #1
 764:	blt	a28 <print_data+0x954>
 768:	movw	r8, #0
 76c:	movw	r7, #0
 770:	mov	r9, #1
 774:	add	r6, sp, #52	; 0x34
 778:	movt	r8, #0
 77c:	movt	r7, #0
 780:	ldr	r0, [sp, #8]
 784:	mov	r2, r6
 788:	bl	0 <coda_type_get_record_field_hidden_status>
 78c:	cmp	r0, #0
 790:	beq	798 <print_data+0x6c4>
 794:	bl	0 <handle_coda_error>
 798:	ldr	r0, [sp, #52]	; 0x34
 79c:	cmp	r0, #0
 7a0:	bne	850 <print_data+0x77c>
 7a4:	ldr	r1, [fp, #-44]	; 0xffffffd4
 7a8:	ldr	r0, [sp, #8]
 7ac:	sub	r2, fp, #48	; 0x30
 7b0:	bl	0 <coda_type_get_record_field_name>
 7b4:	cmp	r0, #0
 7b8:	beq	7c0 <print_data+0x6ec>
 7bc:	bl	0 <handle_coda_error>
 7c0:	cmp	r5, #0
 7c4:	bne	7d0 <print_data+0x6fc>
 7c8:	cmp	r9, #0
 7cc:	bne	80c <print_data+0x738>
 7d0:	movw	r0, #0
 7d4:	movt	r0, #0
 7d8:	ldr	r0, [r0]
 7dc:	cmp	r0, #0
 7e0:	blt	a98 <print_data+0x9c4>
 7e4:	beq	80c <print_data+0x738>
 7e8:	add	r4, r0, #1
 7ec:	ldr	r3, [r8]
 7f0:	mov	r0, r7
 7f4:	mov	r1, #2
 7f8:	mov	r2, #1
 7fc:	bl	0 <fwrite>
 800:	sub	r4, r4, #1
 804:	cmp	r4, #1
 808:	bgt	7ec <print_data+0x718>
 80c:	ldr	r1, [fp, #-48]	; 0xffffffd0
 810:	movw	r0, #0
 814:	movt	r0, #0
 818:	bl	ab8 <ff_printf>
 81c:	movw	r0, #0
 820:	mov	r1, #1
 824:	movt	r0, #0
 828:	mov	r4, r0
 82c:	ldr	r0, [r0]
 830:	add	r0, r0, #1
 834:	str	r0, [r4]
 838:	mov	r0, sl
 83c:	bl	d4 <print_data>
 840:	ldr	r0, [r4]
 844:	mov	r9, #0
 848:	sub	r0, r0, #1
 84c:	str	r0, [r4]
 850:	ldr	r0, [sp, #16]
 854:	ldr	r1, [fp, #-44]	; 0xffffffd4
 858:	sub	r0, r0, #1
 85c:	cmp	r1, r0
 860:	bge	878 <print_data+0x7a4>
 864:	mov	r0, sl
 868:	bl	0 <coda_cursor_goto_next_record_field>
 86c:	cmp	r0, #0
 870:	beq	878 <print_data+0x7a4>
 874:	bl	0 <handle_coda_error>
 878:	ldr	r0, [fp, #-44]	; 0xffffffd4
 87c:	add	r1, r0, #1
 880:	ldr	r0, [sp, #16]
 884:	str	r1, [fp, #-44]	; 0xffffffd4
 888:	cmp	r1, r0
 88c:	blt	780 <print_data+0x6ac>
 890:	b	a28 <print_data+0x954>
 894:	mov	r6, #1
 898:	b	99c <print_data+0x8c8>
 89c:	add	r1, sp, #8
 8a0:	mov	r0, sl
 8a4:	bl	0 <coda_cursor_read_double>
 8a8:	cmp	r0, #0
 8ac:	beq	8b4 <print_data+0x7e0>
 8b0:	bl	0 <handle_coda_error>
 8b4:	vldr	d0, [sp, #8]
 8b8:	bl	0 <coda_isNaN>
 8bc:	cmp	r0, #0
 8c0:	bne	8d4 <print_data+0x800>
 8c4:	vldr	d0, [sp, #8]
 8c8:	bl	0 <coda_isInf>
 8cc:	cmp	r0, #0
 8d0:	beq	a64 <print_data+0x990>
 8d4:	vldr	d16, [sp, #8]
 8d8:	b	930 <print_data+0x85c>
 8dc:	add	r1, sp, #16
 8e0:	add	r2, sp, #8
 8e4:	mov	r0, sl
 8e8:	bl	0 <coda_cursor_read_complex_double_split>
 8ec:	cmp	r0, #0
 8f0:	beq	8f8 <print_data+0x824>
 8f4:	bl	0 <handle_coda_error>
 8f8:	vldr	d16, [sp, #16]
 8fc:	vldr	d17, [sp, #8]
 900:	movw	r0, #0
 904:	movt	r0, #0
 908:	vmov	r2, r3, d16
 90c:	vstr	d17, [sp]
 910:	b	93c <print_data+0x868>
 914:	add	r1, sp, #16
 918:	mov	r0, sl
 91c:	bl	0 <coda_cursor_read_double>
 920:	cmp	r0, #0
 924:	beq	92c <print_data+0x858>
 928:	bl	0 <handle_coda_error>
 92c:	vldr	d16, [sp, #16]
 930:	vmov	r2, r3, d16
 934:	movw	r0, #0
 938:	movt	r0, #0
 93c:	bl	ab8 <ff_printf>
 940:	b	a40 <print_data+0x96c>
 944:	bic	r1, r0, #3
 948:	vmov.i32	q8, #1	; 0x00000001
 94c:	mov	r2, r1
 950:	vld1.32	{d18-d19}, [r5]!
 954:	subs	r2, r2, #4
 958:	vmul.i32	q8, q9, q8
 95c:	bne	950 <print_data+0x87c>
 960:	vext.8	q9, q8, q8, #8
 964:	cmp	r0, r1
 968:	vmul.i32	q0, q8, q9
 96c:	vmul.i32	q8, q0, d0[1]
 970:	vmov.32	r6, d16[0]
 974:	beq	994 <print_data+0x8c0>
 978:	add	r2, sp, #16
 97c:	sub	r0, r0, r1
 980:	add	r1, r2, r1, lsl #2
 984:	ldr	r2, [r1], #4
 988:	subs	r0, r0, #1
 98c:	mul	r6, r2, r6
 990:	bne	984 <print_data+0x8b0>
 994:	cmp	r6, #1
 998:	blt	a34 <print_data+0x960>
 99c:	movw	r0, #0
 9a0:	movt	r0, #0
 9a4:	bl	ab8 <ff_printf>
 9a8:	mov	r0, sl
 9ac:	bl	0 <coda_cursor_goto_first_array_element>
 9b0:	cmp	r0, #0
 9b4:	beq	9bc <print_data+0x8e8>
 9b8:	bl	0 <handle_coda_error>
 9bc:	movw	r8, #0
 9c0:	movw	r5, #0
 9c4:	sub	r7, r6, #1
 9c8:	mov	r4, #0
 9cc:	movt	r8, #0
 9d0:	movt	r5, #0
 9d4:	mov	r0, r8
 9d8:	bl	b00 <fi_printf>
 9dc:	ldr	r0, [r5]
 9e0:	mov	r1, #0
 9e4:	add	r0, r0, #1
 9e8:	str	r0, [r5]
 9ec:	mov	r0, sl
 9f0:	bl	d4 <print_data>
 9f4:	ldr	r0, [r5]
 9f8:	cmp	r4, r7
 9fc:	sub	r0, r0, #1
 a00:	str	r0, [r5]
 a04:	bge	a1c <print_data+0x948>
 a08:	mov	r0, sl
 a0c:	bl	0 <coda_cursor_goto_next_array_element>
 a10:	cmp	r0, #0
 a14:	beq	a1c <print_data+0x948>
 a18:	bl	0 <handle_coda_error>
 a1c:	add	r4, r4, #1
 a20:	cmp	r6, r4
 a24:	bne	9d4 <print_data+0x900>
 a28:	mov	r0, sl
 a2c:	bl	0 <coda_cursor_goto_parent>
 a30:	b	a40 <print_data+0x96c>
 a34:	movw	r0, #0
 a38:	movt	r0, #0
 a3c:	bl	ab8 <ff_printf>
 a40:	ldr	r0, [fp, #-36]	; 0xffffffdc
 a44:	cmp	r0, #0
 a48:	movwne	r0, #0
 a4c:	movtne	r0, #0
 a50:	ldrne	r1, [r0]
 a54:	subne	r1, r1, #1
 a58:	strne	r1, [r0]
 a5c:	sub	sp, fp, #28
 a60:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
 a64:	vldr	d0, [sp, #8]
 a68:	movw	r0, #0
 a6c:	add	r1, sp, #16
 a70:	movt	r0, #0
 a74:	bl	0 <coda_time_double_to_string>
 a78:	cmp	r0, #0
 a7c:	beq	a8c <print_data+0x9b8>
 a80:	movw	r0, #0
 a84:	movt	r0, #0
 a88:	b	a3c <print_data+0x968>
 a8c:	movw	r0, #0
 a90:	add	r1, sp, #16
 a94:	b	66c <print_data+0x598>
 a98:	movw	r0, #0
 a9c:	movw	r1, #0
 aa0:	movw	r3, #0
 aa4:	mov	r2, #44	; 0x2c
 aa8:	movt	r0, #0
 aac:	movt	r1, #0
 ab0:	movt	r3, #0
 ab4:	bl	0 <__assert_fail>

00000ab8 <ff_printf>:
 ab8:	sub	sp, sp, #12
 abc:	push	{fp, lr}
 ac0:	mov	fp, sp
 ac4:	sub	sp, sp, #4
 ac8:	mov	ip, r0
 acc:	add	r0, fp, #8
 ad0:	stm	r0, {r1, r2, r3}
 ad4:	movw	r0, #0
 ad8:	add	r2, fp, #8
 adc:	mov	r1, ip
 ae0:	movt	r0, #0
 ae4:	str	r2, [sp]
 ae8:	ldr	r0, [r0]
 aec:	bl	0 <vfprintf>
 af0:	mov	sp, fp
 af4:	pop	{fp, lr}
 af8:	add	sp, sp, #12
 afc:	bx	lr

00000b00 <fi_printf>:
 b00:	sub	sp, sp, #12
 b04:	push	{r4, r5, r6, r7, fp, lr}
 b08:	add	fp, sp, #16
 b0c:	sub	sp, sp, #4
 b10:	mov	r4, r0
 b14:	add	r0, fp, #8
 b18:	stm	r0, {r1, r2, r3}
 b1c:	movw	r0, #0
 b20:	movt	r0, #0
 b24:	ldr	r0, [r0]
 b28:	cmp	r0, #0
 b2c:	blt	b94 <fi_printf+0x94>
 b30:	beq	b68 <fi_printf+0x68>
 b34:	movw	r7, #0
 b38:	movw	r5, #0
 b3c:	add	r6, r0, #1
 b40:	movt	r7, #0
 b44:	movt	r5, #0
 b48:	ldr	r3, [r7]
 b4c:	mov	r0, r5
 b50:	mov	r1, #2
 b54:	mov	r2, #1
 b58:	bl	0 <fwrite>
 b5c:	sub	r6, r6, #1
 b60:	cmp	r6, #1
 b64:	bgt	b48 <fi_printf+0x48>
 b68:	movw	r0, #0
 b6c:	add	r2, fp, #8
 b70:	mov	r1, r4
 b74:	movt	r0, #0
 b78:	str	r2, [sp]
 b7c:	ldr	r0, [r0]
 b80:	bl	0 <vfprintf>
 b84:	sub	sp, fp, #16
 b88:	pop	{r4, r5, r6, r7, fp, lr}
 b8c:	add	sp, sp, #12
 b90:	bx	lr
 b94:	movw	r0, #0
 b98:	movw	r1, #0
 b9c:	movw	r3, #0
 ba0:	mov	r2, #44	; 0x2c
 ba4:	movt	r0, #0
 ba8:	movt	r1, #0
 bac:	movt	r3, #0
 bb0:	bl	0 <__assert_fail>

00000bb4 <print_escaped>:
 bb4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
 bb8:	add	fp, sp, #28
 bbc:	sub	sp, sp, #4
 bc0:	cmp	r1, #1
 bc4:	blt	d14 <print_escaped+0x160>
 bc8:	movw	r6, #0
 bcc:	movw	r8, #0
 bd0:	movw	r9, #0
 bd4:	movw	sl, #0
 bd8:	movw	r7, #0
 bdc:	mov	r4, r1
 be0:	mov	r5, r0
 be4:	movt	r6, #0
 be8:	movt	r8, #0
 bec:	movt	r9, #0
 bf0:	movt	sl, #0
 bf4:	movt	r7, #0
 bf8:	ldrb	r1, [r5]
 bfc:	sub	r0, r1, #8
 c00:	cmp	r0, #26
 c04:	bhi	c8c <print_escaped+0xd8>
 c08:	add	r2, pc, #0
 c0c:	ldr	pc, [r2, r0, lsl #2]
 c10:	.word	0x00000c7c
 c14:	.word	0x00000cc0
 c18:	.word	0x00000ccc
 c1c:	.word	0x00000ca4
 c20:	.word	0x00000cd8
 c24:	.word	0x00000ce4
 c28:	.word	0x00000ca4
 c2c:	.word	0x00000ca4
 c30:	.word	0x00000ca4
 c34:	.word	0x00000ca4
 c38:	.word	0x00000ca4
 c3c:	.word	0x00000ca4
 c40:	.word	0x00000ca4
 c44:	.word	0x00000ca4
 c48:	.word	0x00000ca4
 c4c:	.word	0x00000ca4
 c50:	.word	0x00000ca4
 c54:	.word	0x00000ca4
 c58:	.word	0x00000ca4
 c5c:	.word	0x00000ca4
 c60:	.word	0x00000ca4
 c64:	.word	0x00000ca4
 c68:	.word	0x00000ca4
 c6c:	.word	0x00000ca4
 c70:	.word	0x00000ca4
 c74:	.word	0x00000ca4
 c78:	.word	0x00000cf0
 c7c:	movw	r0, #0
 c80:	movt	r0, #0
 c84:	bl	ab8 <ff_printf>
 c88:	b	d08 <print_escaped+0x154>
 c8c:	cmp	r1, #92	; 0x5c
 c90:	bne	ca4 <print_escaped+0xf0>
 c94:	movw	r0, #0
 c98:	movt	r0, #0
 c9c:	bl	ab8 <ff_printf>
 ca0:	b	d08 <print_escaped+0x154>
 ca4:	sub	r0, r1, #32
 ca8:	uxtb	r0, r0
 cac:	cmp	r0, #94	; 0x5e
 cb0:	bhi	cfc <print_escaped+0x148>
 cb4:	movw	r0, #0
 cb8:	movt	r0, #0
 cbc:	b	d04 <print_escaped+0x150>
 cc0:	mov	r0, r6
 cc4:	bl	ab8 <ff_printf>
 cc8:	b	d08 <print_escaped+0x154>
 ccc:	mov	r0, r8
 cd0:	bl	ab8 <ff_printf>
 cd4:	b	d08 <print_escaped+0x154>
 cd8:	mov	r0, r9
 cdc:	bl	ab8 <ff_printf>
 ce0:	b	d08 <print_escaped+0x154>
 ce4:	mov	r0, sl
 ce8:	bl	ab8 <ff_printf>
 cec:	b	d08 <print_escaped+0x154>
 cf0:	mov	r0, r7
 cf4:	bl	ab8 <ff_printf>
 cf8:	b	d08 <print_escaped+0x154>
 cfc:	movw	r0, #0
 d00:	movt	r0, #0
 d04:	bl	ab8 <ff_printf>
 d08:	subs	r4, r4, #1
 d0c:	add	r5, r5, #1
 d10:	bne	bf8 <print_escaped+0x44>
 d14:	sub	sp, fp, #28
 d18:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
