
../compcert-repos/stcorp-coda-3a25f25/CMakeFiles/coda_static.dir/libcoda/coda-grib-cursor.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <read_bytes>:
   0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   4:	mov	r4, r2
   8:	ldr	r5, [r0, #48]	; 0x30
   c:	strd	r6, [sp, #8]
  10:	mov	r6, r0
  14:	mov	r7, r3
  18:	strd	r8, [sp, #16]
  1c:	strd	sl, [sp, #24]
  20:	str	lr, [sp, #32]
  24:	sub	sp, sp, #84	; 0x54
  28:	cmp	r5, #0
  2c:	ldr	r2, [sp, #120]	; 0x78
  30:	ldr	r1, [sp, #124]	; 0x7c
  34:	beq	d8 <read_bytes+0xd8>
  38:	adds	r8, r4, r2
  3c:	ldrd	sl, [r0, #40]	; 0x28
  40:	adc	r9, r3, r1
  44:	cmp	r9, fp
  48:	cmpeq	r8, sl
  4c:	bls	c4 <read_bytes+0xc4>
  50:	ldr	r3, [r0, #16]
  54:	cmp	r3, #1
  58:	bls	140 <read_bytes+0x140>
  5c:	mov	r0, r2
  60:	add	r2, sp, #8
  64:	bl	0 <coda_str64>
  68:	add	r5, sp, #56	; 0x38
  6c:	mov	r0, r4
  70:	mov	r1, r7
  74:	add	r2, sp, #32
  78:	bl	0 <coda_str64>
  7c:	mov	r2, r5
  80:	ldrd	r0, [r6, #40]	; 0x28
  84:	bl	0 <coda_str64>
  88:	mvn	r0, #300	; 0x12c
  8c:	add	r3, sp, #32
  90:	str	r5, [sp]
  94:	add	r2, sp, #8
  98:	movw	r1, #0
  9c:	movt	r1, #0
  a0:	bl	0 <coda_set_error>
  a4:	mvn	r0, #0
  a8:	add	sp, sp, #84	; 0x54
  ac:	ldrd	r4, [sp]
  b0:	ldrd	r6, [sp, #8]
  b4:	ldrd	r8, [sp, #16]
  b8:	ldrd	sl, [sp, #24]
  bc:	add	sp, sp, #32
  c0:	pop	{pc}		; (ldr pc, [sp], #4)
  c4:	add	r1, r5, r4
  c8:	ldr	r0, [sp, #128]	; 0x80
  cc:	bl	0 <memcpy>
  d0:	mov	r0, #0
  d4:	b	a8 <read_bytes+0xa8>
  d8:	ldr	r3, [r0, #16]
  dc:	cmp	r3, #1
  e0:	bhi	158 <read_bytes+0x158>
  e4:	ldrd	r8, [r0, #8]
  e8:	adds	sl, r4, r2
  ec:	adc	fp, r7, r1
  f0:	cmp	fp, r9
  f4:	cmpeq	sl, r8
  f8:	bhi	140 <read_bytes+0x140>
  fc:	mov	r3, r4
 100:	ldr	r0, [r0, #56]	; 0x38
 104:	ldr	r1, [sp, #128]	; 0x80
 108:	bl	0 <pread>
 10c:	cmp	r0, #0
 110:	movge	r0, r5
 114:	bge	a8 <read_bytes+0xa8>
 118:	bl	0 <__errno_location>
 11c:	ldr	r0, [r0]
 120:	bl	0 <strerror>
 124:	mov	r2, r0
 128:	movw	r1, #0
 12c:	movt	r1, #0
 130:	mvn	r0, #21
 134:	bl	0 <coda_set_error>
 138:	mvn	r0, #0
 13c:	b	a8 <read_bytes+0xa8>
 140:	mvn	r0, #300	; 0x12c
 144:	movw	r1, #0
 148:	movt	r1, #0
 14c:	bl	0 <coda_set_error>
 150:	mvn	r0, #0
 154:	b	a8 <read_bytes+0xa8>
 158:	movw	r3, #0
 15c:	movt	r3, #0
 160:	movw	r1, #0
 164:	movt	r1, #0
 168:	movw	r0, #0
 16c:	movt	r0, #0
 170:	mov	r2, #83	; 0x53
 174:	bl	0 <__assert_fail>

00000178 <coda_grib_cursor_set_product>:
 178:	ldr	r2, [r1, #20]
 17c:	mov	r3, r0
 180:	mvn	ip, #0
 184:	mov	r0, #1
 188:	strd	r4, [sp, #-8]!
 18c:	mvn	r4, #0
 190:	mvn	r5, #0
 194:	str	r1, [r3]
 198:	stmib	r3, {r0, r2, ip}
 19c:	mov	r0, #0
 1a0:	strd	r4, [r3, #16]
 1a4:	ldrd	r4, [sp]
 1a8:	add	sp, sp, #8
 1ac:	bx	lr

000001b0 <coda_grib_cursor_goto_array_element_by_index>:
 1b0:	ldr	ip, [r0, #4]
 1b4:	strd	r4, [sp, #-16]!
 1b8:	ldr	r3, [pc, #168]	; 268 <coda_grib_cursor_goto_array_element_by_index+0xb8>
 1bc:	add	r2, r0, ip, lsl #4
 1c0:	ldr	r2, [r2, #-8]
 1c4:	str	r6, [sp, #8]
 1c8:	str	lr, [sp, #12]
 1cc:	mrc	15, 0, lr, cr13, cr0, {3}
 1d0:	sub	sp, sp, #8
 1d4:	ldr	r3, [pc, r3]
 1d8:	ldr	r3, [lr, r3]
 1dc:	cmp	r3, #0
 1e0:	beq	1f8 <coda_grib_cursor_goto_array_element_by_index+0x48>
 1e4:	cmp	r1, #0
 1e8:	ldr	r3, [r2, #8]
 1ec:	blt	23c <coda_grib_cursor_goto_array_element_by_index+0x8c>
 1f0:	cmp	r1, r3
 1f4:	bge	23c <coda_grib_cursor_goto_array_element_by_index+0x8c>
 1f8:	ldr	r6, [r2, #12]
 1fc:	add	r3, ip, #1
 200:	add	ip, r0, ip, lsl #4
 204:	lsl	lr, r3, #4
 208:	mvn	r4, #0
 20c:	mvn	r5, #0
 210:	mov	r2, #0
 214:	str	r3, [r0, #4]
 218:	str	r6, [ip, #8]
 21c:	str	r1, [ip, #12]
 220:	strd	r4, [r0, lr]
 224:	mov	r0, r2
 228:	add	sp, sp, #8
 22c:	ldrd	r4, [sp]
 230:	ldr	r6, [sp, #8]
 234:	add	sp, sp, #12
 238:	pop	{pc}		; (ldr pc, [sp], #4)
 23c:	mov	ip, #84	; 0x54
 240:	movw	r0, #0
 244:	movt	r0, #0
 248:	mov	r2, r1
 24c:	movw	r1, #0
 250:	movt	r1, #0
 254:	stm	sp, {r0, ip}
 258:	mvn	r0, #106	; 0x6a
 25c:	bl	0 <coda_set_error>
 260:	mvn	r2, #0
 264:	b	224 <coda_grib_cursor_goto_array_element_by_index+0x74>
 268:	.word	0x0000008c

0000026c <coda_grib_cursor_goto_array_element>:
 26c:	cmp	r1, #1
 270:	bne	27c <coda_grib_cursor_goto_array_element+0x10>
 274:	ldr	r1, [r2]
 278:	b	1b0 <coda_grib_cursor_goto_array_element_by_index>
 27c:	mov	r0, #68	; 0x44
 280:	push	{lr}		; (str lr, [sp, #-4]!)
 284:	sub	sp, sp, #12
 288:	mov	r2, r1
 28c:	movw	r3, #0
 290:	movt	r3, #0
 294:	movw	r1, #0
 298:	movt	r1, #0
 29c:	str	r0, [sp]
 2a0:	mvn	r0, #105	; 0x69
 2a4:	bl	0 <coda_set_error>
 2a8:	mvn	r0, #0
 2ac:	add	sp, sp, #12
 2b0:	pop	{pc}		; (ldr pc, [sp], #4)

000002b4 <coda_grib_cursor_goto_next_array_element>:
 2b4:	ldr	r3, [r0, #4]
 2b8:	str	r4, [sp, #-8]!
 2bc:	mov	r4, r0
 2c0:	sub	r3, r3, #1
 2c4:	add	r2, r0, r3, lsl #4
 2c8:	ldr	r1, [r2, #12]
 2cc:	str	lr, [sp, #4]
 2d0:	str	r3, [r0, #4]
 2d4:	add	r1, r1, #1
 2d8:	bl	1b0 <coda_grib_cursor_goto_array_element_by_index>
 2dc:	cmp	r0, #0
 2e0:	bne	2f0 <coda_grib_cursor_goto_next_array_element+0x3c>
 2e4:	ldr	r4, [sp]
 2e8:	add	sp, sp, #4
 2ec:	pop	{pc}		; (ldr pc, [sp], #4)
 2f0:	ldr	r3, [r4, #4]
 2f4:	mvn	r0, #0
 2f8:	add	r3, r3, #1
 2fc:	str	r3, [r4, #4]
 300:	b	2e4 <coda_grib_cursor_goto_next_array_element+0x30>

00000304 <coda_grib_cursor_goto_attributes>:
 304:	strd	r4, [sp, #-24]!	; 0xffffffe8
 308:	mov	r4, r0
 30c:	ldr	r5, [r0, #4]
 310:	add	r2, r0, r5, lsl #4
 314:	add	r3, r5, #1
 318:	add	r5, r0, r5, lsl #4
 31c:	ldr	r2, [r2, #-8]
 320:	ldr	r2, [r2, #4]
 324:	ldr	r0, [r2]
 328:	strd	r6, [sp, #8]
 32c:	mvn	r6, #0
 330:	mvn	r7, #0
 334:	str	r8, [sp, #16]
 338:	str	lr, [sp, #20]
 33c:	str	r3, [r4, #4]
 340:	bl	0 <coda_mem_empty_record>
 344:	ldr	r3, [r4, #4]
 348:	mvn	r1, #0
 34c:	ldr	r8, [sp, #16]
 350:	str	r0, [r5, #8]
 354:	mov	r0, #0
 358:	add	r2, r4, r3, lsl #4
 35c:	lsl	r3, r3, #4
 360:	str	r1, [r2, #-4]
 364:	strd	r6, [r4, r3]
 368:	ldrd	r4, [sp]
 36c:	ldrd	r6, [sp, #8]
 370:	add	sp, sp, #20
 374:	pop	{pc}		; (ldr pc, [sp], #4)

00000378 <coda_grib_cursor_get_num_elements>:
 378:	ldr	r3, [r0, #4]
 37c:	add	r0, r0, r3, lsl #4
 380:	ldr	r3, [r0, #-8]
 384:	mov	r0, #0
 388:	ldr	r2, [r3, #4]
 38c:	ldr	r2, [r2, #8]
 390:	cmp	r2, #1
 394:	ldreq	r3, [r3, #8]
 398:	movne	r3, #1
 39c:	str	r3, [r1]
 3a0:	bx	lr

000003a4 <coda_grib_cursor_get_array_dim>:
 3a4:	mov	r3, #1
 3a8:	str	r3, [r1]
 3ac:	ldr	r1, [r0, #4]
 3b0:	add	r0, r0, r1, lsl #4
 3b4:	ldr	r1, [r0, #-8]
 3b8:	ldr	r0, [r1, #4]
 3bc:	ldr	r0, [r0, #8]
 3c0:	cmp	r0, r3
 3c4:	mov	r0, #0
 3c8:	ldreq	r3, [r1, #8]
 3cc:	str	r3, [r2]
 3d0:	bx	lr

000003d4 <coda_grib_cursor_read_float>:
 3d4:	strd	r4, [sp, #-36]!	; 0xffffffdc
 3d8:	strd	r6, [sp, #8]
 3dc:	mov	r7, r1
 3e0:	ldr	r1, [r0, #4]
 3e4:	strd	r8, [sp, #16]
 3e8:	strd	sl, [sp, #24]
 3ec:	str	lr, [sp, #32]
 3f0:	sub	sp, sp, #76	; 0x4c
 3f4:	cmp	r1, #1
 3f8:	ble	9d8 <coda_grib_cursor_read_float+0x604>
 3fc:	add	ip, r0, r1, lsl #4
 400:	ldr	r5, [ip, #-24]	; 0xffffffe8
 404:	ldr	ip, [r5, #4]
 408:	ldr	ip, [ip, #8]
 40c:	cmp	ip, #1
 410:	bne	9f4 <coda_grib_cursor_read_float+0x620>
 414:	ldr	ip, [r5, #24]
 418:	add	r1, r0, r1, lsl #4
 41c:	ldr	lr, [r1, #-4]
 420:	cmp	ip, #0
 424:	beq	654 <coda_grib_cursor_read_float+0x280>
 428:	ldr	r4, [r5, #28]
 42c:	mov	r8, #0
 430:	mov	r9, #0
 434:	strd	r8, [sp, #64]	; 0x40
 438:	cmp	r4, #0
 43c:	beq	62c <coda_grib_cursor_read_float+0x258>
 440:	ldr	r1, [r5, #56]	; 0x38
 444:	cmp	r1, #0
 448:	beq	7d0 <coda_grib_cursor_read_float+0x3fc>
 44c:	ldrb	r9, [r1, lr, asr #3]
 450:	mvn	r1, lr
 454:	asr	sl, lr, #3
 458:	and	r1, r1, #7
 45c:	asr	r1, r9, r1
 460:	ands	r6, r1, #1
 464:	beq	7d8 <coda_grib_cursor_read_float+0x404>
 468:	asr	r8, lr, #7
 46c:	cmp	r8, #0
 470:	movle	r1, #0
 474:	ble	498 <coda_grib_cursor_read_float+0xc4>
 478:	ldr	ip, [r5, #60]	; 0x3c
 47c:	mov	r1, #0
 480:	add	r8, ip, r8, lsl #4
 484:	ldrb	r6, [ip, #15]
 488:	add	ip, ip, #16
 48c:	cmp	r8, ip
 490:	add	r1, r1, r6
 494:	bne	484 <coda_grib_cursor_read_float+0xb0>
 498:	tst	sl, #15
 49c:	bne	6bc <coda_grib_cursor_read_float+0x2e8>
 4a0:	ands	lr, lr, #7
 4a4:	beq	4c8 <coda_grib_cursor_read_float+0xf4>
 4a8:	rsb	lr, lr, #7
 4ac:	mov	ip, #7
 4b0:	asr	r6, r9, ip
 4b4:	sub	ip, ip, #1
 4b8:	cmp	lr, ip
 4bc:	and	r6, r6, #1
 4c0:	add	r1, r1, r6
 4c4:	bne	4b0 <coda_grib_cursor_read_float+0xdc>
 4c8:	asr	fp, r4, #31
 4cc:	mov	sl, r4
 4d0:	ldr	r0, [r0]
 4d4:	mul	r1, r1, r4
 4d8:	ands	ip, r4, #7
 4dc:	mov	r9, #0
 4e0:	movne	r8, #1
 4e4:	moveq	r8, #0
 4e8:	strd	sl, [sp, #24]
 4ec:	add	r8, r8, r4, asr #3
 4f0:	ldrd	sl, [r5, #16]
 4f4:	rsb	r8, r8, #8
 4f8:	str	ip, [sp, #40]	; 0x28
 4fc:	adds	sl, sl, r1
 500:	adc	fp, fp, r1, asr #31
 504:	and	r1, sl, #7
 508:	adds	r2, r1, r4
 50c:	ldr	r1, [r0, #52]	; 0x34
 510:	strd	sl, [sp, #16]
 514:	asr	fp, r4, #31
 518:	adc	r3, r9, fp
 51c:	cmp	r2, #9
 520:	rsb	r2, r2, #0
 524:	str	r1, [sp, #36]	; 0x24
 528:	add	r1, sp, #64	; 0x40
 52c:	add	r6, r1, r8
 530:	sbcs	r1, r3, #0
 534:	and	r3, r2, #7
 538:	str	r3, [sp, #32]
 53c:	blt	754 <coda_grib_cursor_read_float+0x380>
 540:	ldr	r3, [sp, #32]
 544:	cmp	r3, #0
 548:	beq	6d0 <coda_grib_cursor_read_float+0x2fc>
 54c:	mov	r2, #24
 550:	mov	r3, #0
 554:	ldrd	r0, [sp, #24]
 558:	bl	0 <__aeabi_ldivmod>
 55c:	strd	r2, [sp, #40]	; 0x28
 560:	orrs	r3, r2, r3
 564:	bne	82c <coda_grib_cursor_read_float+0x458>
 568:	ldrd	r2, [sp, #24]
 56c:	cmp	r2, #1
 570:	sbcs	r1, r3, #0
 574:	blt	6ec <coda_grib_cursor_read_float+0x318>
 578:	ldrd	r0, [sp, #16]
 57c:	add	r6, r6, #3
 580:	add	r9, sp, #56	; 0x38
 584:	str	r5, [sp, #24]
 588:	str	r7, [sp, #40]	; 0x28
 58c:	ldr	r7, [sp, #36]	; 0x24
 590:	mov	r4, r0
 594:	mov	r8, r1
 598:	adds	r1, r2, r4
 59c:	adc	fp, r3, r8
 5a0:	mov	r5, fp
 5a4:	str	r1, [sp, #16]
 5a8:	b	5f8 <coda_grib_cursor_read_float+0x224>
 5ac:	ldr	r2, [sp, #16]
 5b0:	adds	r4, r4, #24
 5b4:	add	r6, r6, #3
 5b8:	adc	r8, r8, #0
 5bc:	ldr	r3, [sp, #56]	; 0x38
 5c0:	subs	sl, r2, r4
 5c4:	sbc	fp, r5, r8
 5c8:	cmp	sl, #1
 5cc:	sbcs	r2, fp, #0
 5d0:	ldr	r2, [sp, #32]
 5d4:	rev	r3, r3
 5d8:	lsr	r3, r3, r2
 5dc:	ubfx	r1, r3, #16, #8
 5e0:	ubfx	r2, r3, #8, #8
 5e4:	str	r3, [sp, #60]	; 0x3c
 5e8:	strb	r1, [r6, #-6]
 5ec:	strb	r2, [r6, #-5]
 5f0:	strb	r3, [r6, #-4]
 5f4:	blt	7ec <coda_grib_cursor_read_float+0x418>
 5f8:	lsr	r1, r4, #3
 5fc:	mov	r2, #4
 600:	mov	r3, #0
 604:	mov	r0, r7
 608:	strd	r2, [sp]
 60c:	asr	r3, r8, #3
 610:	orr	r2, r1, r8, lsl #29
 614:	str	r9, [sp, #8]
 618:	bl	0 <read_bytes>
 61c:	cmp	r0, #0
 620:	beq	5ac <coda_grib_cursor_read_float+0x1d8>
 624:	mvn	r4, #0
 628:	b	634 <coda_grib_cursor_read_float+0x260>
 62c:	ldr	r3, [r5, #36]	; 0x24
 630:	str	r3, [r7]
 634:	mov	r0, r4
 638:	add	sp, sp, #76	; 0x4c
 63c:	ldrd	r4, [sp]
 640:	ldrd	r6, [sp, #8]
 644:	ldrd	r8, [sp, #16]
 648:	ldrd	sl, [sp, #24]
 64c:	add	sp, sp, #32
 650:	pop	{pc}		; (ldr pc, [sp], #4)
 654:	ldr	ip, [r5, #16]
 658:	lsl	lr, lr, #2
 65c:	mov	r4, #4
 660:	ldr	r1, [r5, #20]
 664:	mov	r5, #0
 668:	ldr	r0, [r0]
 66c:	lsr	r8, ip, #3
 670:	orr	r8, r8, r1, lsl #29
 674:	asr	r9, r1, #3
 678:	adds	r2, r8, lr
 67c:	ldr	r0, [r0, #52]	; 0x34
 680:	adc	r3, r9, lr, asr #31
 684:	strd	r4, [sp]
 688:	str	r7, [sp, #8]
 68c:	bl	0 <read_bytes>
 690:	subs	r4, r0, #0
 694:	bne	624 <coda_grib_cursor_read_float+0x250>
 698:	ldrb	r3, [r7, #3]
 69c:	ldrb	r1, [r7]
 6a0:	ldrb	r2, [r7, #2]
 6a4:	strb	r3, [r7]
 6a8:	ldrb	r3, [r7, #1]
 6ac:	strb	r2, [r7, #1]
 6b0:	strb	r1, [r7, #3]
 6b4:	strb	r3, [r7, #2]
 6b8:	b	634 <coda_grib_cursor_read_float+0x260>
 6bc:	ldr	ip, [r5, #60]	; 0x3c
 6c0:	add	sl, ip, sl
 6c4:	ldrb	ip, [sl, #-1]
 6c8:	add	r1, r1, ip
 6cc:	b	4a0 <coda_grib_cursor_read_float+0xcc>
 6d0:	ldr	r3, [sp, #40]	; 0x28
 6d4:	cmp	r3, #0
 6d8:	bne	948 <coda_grib_cursor_read_float+0x574>
 6dc:	ldrd	r8, [sp, #24]
 6e0:	cmp	r8, #1
 6e4:	sbcs	r3, r9, #0
 6e8:	bge	7f8 <coda_grib_cursor_read_float+0x424>
 6ec:	ldrb	r2, [sp, #71]	; 0x47
 6f0:	mov	r4, #0
 6f4:	ldrb	r3, [sp, #64]	; 0x40
 6f8:	ldrb	r1, [sp, #70]	; 0x46
 6fc:	strb	r2, [sp, #64]	; 0x40
 700:	ldrb	r2, [sp, #65]	; 0x41
 704:	strb	r3, [sp, #71]	; 0x47
 708:	ldrb	r3, [sp, #69]	; 0x45
 70c:	strb	r1, [sp, #65]	; 0x41
 710:	ldrb	r1, [sp, #66]	; 0x42
 714:	strb	r3, [sp, #66]	; 0x42
 718:	ldrb	r3, [sp, #67]	; 0x43
 71c:	strb	r2, [sp, #70]	; 0x46
 720:	ldrb	r2, [sp, #68]	; 0x44
 724:	strb	r1, [sp, #69]	; 0x45
 728:	strb	r2, [sp, #67]	; 0x43
 72c:	strb	r3, [sp, #68]	; 0x44
 730:	ldrd	r0, [sp, #64]	; 0x40
 734:	bl	0 <__aeabi_l2d>
 738:	vmov	d5, r0, r1
 73c:	vldr	d6, [r5, #40]	; 0x28
 740:	vldr	d7, [r5, #48]	; 0x30
 744:	vmla.f64	d7, d5, d6
 748:	vcvt.f32.f64	s14, d7
 74c:	vstr	s14, [r7]
 750:	b	634 <coda_grib_cursor_read_float+0x260>
 754:	ldrd	sl, [sp, #16]
 758:	str	r6, [sp, #8]
 75c:	ldr	r3, [sp, #20]
 760:	ldr	r0, [sp, #36]	; 0x24
 764:	lsr	r2, sl, #3
 768:	mov	sl, #1
 76c:	orr	r2, r2, fp, lsl #29
 770:	mov	fp, #0
 774:	asr	r3, r3, #3
 778:	strd	sl, [sp]
 77c:	bl	0 <read_bytes>
 780:	cmp	r0, r9
 784:	bne	624 <coda_grib_cursor_read_float+0x250>
 788:	ldr	r2, [sp, #32]
 78c:	cmp	r2, r9
 790:	beq	7a8 <coda_grib_cursor_read_float+0x3d4>
 794:	add	r3, sp, #64	; 0x40
 798:	ldrb	r3, [r3, r8]
 79c:	asr	r3, r3, r2
 7a0:	add	r2, sp, #64	; 0x40
 7a4:	strb	r3, [r2, r8]
 7a8:	ands	r3, r4, #7
 7ac:	cmp	r3, #0
 7b0:	beq	6ec <coda_grib_cursor_read_float+0x318>
 7b4:	add	r3, sp, #64	; 0x40
 7b8:	mvn	r2, #0
 7bc:	ldrb	r3, [r3, r8]
 7c0:	bic	r4, r3, r2, lsl r4
 7c4:	add	r3, sp, #64	; 0x40
 7c8:	strb	r4, [r3, r8]
 7cc:	b	6ec <coda_grib_cursor_read_float+0x318>
 7d0:	mov	r1, lr
 7d4:	b	4c8 <coda_grib_cursor_read_float+0xf4>
 7d8:	bl	0 <coda_NaN>
 7dc:	vcvt.f32.f64	s0, d0
 7e0:	mov	r4, r6
 7e4:	vstr	s0, [r7]
 7e8:	b	634 <coda_grib_cursor_read_float+0x260>
 7ec:	ldr	r5, [sp, #24]
 7f0:	ldr	r7, [sp, #40]	; 0x28
 7f4:	b	6ec <coda_grib_cursor_read_float+0x318>
 7f8:	lsr	r1, r8, #3
 7fc:	ldr	r0, [sp, #36]	; 0x24
 800:	asr	r3, r9, #3
 804:	orr	r1, r1, r9, lsl #29
 808:	ldrd	r8, [sp, #16]
 80c:	stm	sp, {r1, r3, r6}
 810:	lsr	r2, r8, #3
 814:	asr	r3, r9, #3
 818:	orr	r2, r2, r9, lsl #29
 81c:	bl	0 <read_bytes>
 820:	cmp	r0, #0
 824:	beq	6ec <coda_grib_cursor_read_float+0x318>
 828:	b	624 <coda_grib_cursor_read_float+0x250>
 82c:	ldrd	r2, [sp, #16]
 830:	ldr	r0, [sp, #20]
 834:	ldrd	sl, [sp, #40]	; 0x28
 838:	and	r1, r2, #7
 83c:	lsr	r2, r2, #3
 840:	ldr	r3, [sp, #20]
 844:	orr	r2, r2, r0, lsl #29
 848:	ldr	r0, [sp, #36]	; 0x24
 84c:	uxtb	r8, sl
 850:	add	r4, r8, r1
 854:	add	r1, r1, sl
 858:	ands	r4, r4, #7
 85c:	asr	r3, r3, #3
 860:	movne	r4, #1
 864:	ands	r8, r8, #7
 868:	add	r4, r4, r1, lsr #3
 86c:	movne	r8, #1
 870:	add	r8, r8, sl, lsr #3
 874:	stm	sp, {r4, r9}
 878:	add	r9, sp, #56	; 0x38
 87c:	str	r9, [sp, #8]
 880:	bl	0 <read_bytes>
 884:	subs	r3, r0, #0
 888:	bne	624 <coda_grib_cursor_read_float+0x250>
 88c:	ldr	r2, [sp, #32]
 890:	mvn	r1, #0
 894:	cmp	r4, #0
 898:	mvn	r1, r1, lsl sl
 89c:	str	r3, [sp, #60]	; 0x3c
 8a0:	add	r0, r2, #32
 8a4:	sub	r0, r0, r4, lsl #3
 8a8:	beq	8d4 <coda_grib_cursor_read_float+0x500>
 8ac:	add	r3, sp, #63	; 0x3f
 8b0:	add	r4, r9, r4
 8b4:	mov	sl, r2
 8b8:	ldrb	r2, [r9], #1
 8bc:	cmp	r4, r9
 8c0:	strb	r2, [r3], #-1
 8c4:	bne	8b8 <coda_grib_cursor_read_float+0x4e4>
 8c8:	ldr	r4, [sp, #60]	; 0x3c
 8cc:	str	sl, [sp, #32]
 8d0:	and	r4, r1, r4, lsr r0
 8d4:	cmp	r8, #0
 8d8:	str	r4, [sp, #60]	; 0x3c
 8dc:	beq	9d0 <coda_grib_cursor_read_float+0x5fc>
 8e0:	ldr	sl, [sp, #32]
 8e4:	add	r3, sp, #72	; 0x48
 8e8:	add	r3, r3, r8
 8ec:	add	r8, r6, r8
 8f0:	sub	r3, r3, #13
 8f4:	ldrb	r2, [r3], #-1
 8f8:	strb	r2, [r6], #1
 8fc:	cmp	r8, r6
 900:	bne	8f4 <coda_grib_cursor_read_float+0x520>
 904:	str	sl, [sp, #32]
 908:	ldr	r1, [sp, #16]
 90c:	mov	r2, #0
 910:	mov	r6, r8
 914:	ldr	r3, [sp, #40]	; 0x28
 918:	adds	r1, r1, r3
 91c:	str	r1, [sp, #16]
 920:	ldr	r1, [sp, #20]
 924:	adc	r1, r1, r2
 928:	str	r1, [sp, #20]
 92c:	ldr	r1, [sp, #24]
 930:	subs	r3, r1, r3
 934:	str	r3, [sp, #24]
 938:	ldr	r3, [sp, #28]
 93c:	sbc	r3, r3, r2
 940:	str	r3, [sp, #28]
 944:	b	568 <coda_grib_cursor_read_float+0x194>
 948:	ldrd	sl, [sp, #16]
 94c:	mov	r0, #1
 950:	mov	r1, #0
 954:	add	r3, sp, #60	; 0x3c
 958:	strd	r0, [sp]
 95c:	str	r3, [sp, #8]
 960:	ldr	r0, [sp, #36]	; 0x24
 964:	lsr	r2, sl, #3
 968:	asr	r3, fp, #3
 96c:	orr	r2, r2, fp, lsl #29
 970:	bl	0 <read_bytes>
 974:	cmp	r0, #0
 978:	bne	624 <coda_grib_cursor_read_float+0x250>
 97c:	ldr	r0, [sp, #16]
 980:	mov	r1, #0
 984:	add	r6, r6, #1
 988:	ldr	ip, [sp, #20]
 98c:	ldr	lr, [sp, #40]	; 0x28
 990:	ldrb	r2, [sp, #60]	; 0x3c
 994:	adds	r0, r0, lr
 998:	adc	ip, ip, r1
 99c:	str	r0, [sp, #16]
 9a0:	mvn	r0, #0
 9a4:	str	ip, [sp, #20]
 9a8:	bic	fp, r2, r0, lsl lr
 9ac:	ldr	ip, [sp, #24]
 9b0:	subs	r3, ip, lr
 9b4:	str	r3, [sp, #24]
 9b8:	ldr	r3, [sp, #28]
 9bc:	sbc	r3, r3, r1
 9c0:	str	r3, [sp, #28]
 9c4:	add	r3, sp, #64	; 0x40
 9c8:	strb	fp, [r3, r8]
 9cc:	b	6dc <coda_grib_cursor_read_float+0x308>
 9d0:	mov	r8, r6
 9d4:	b	908 <coda_grib_cursor_read_float+0x534>
 9d8:	movw	r1, #0
 9dc:	movt	r1, #0
 9e0:	ldr	r3, [pc, #40]	; a10 <coda_grib_cursor_read_float+0x63c>
 9e4:	movw	r0, #0
 9e8:	movt	r0, #0
 9ec:	mov	r2, #144	; 0x90
 9f0:	bl	0 <__assert_fail>
 9f4:	movw	r1, #0
 9f8:	movt	r1, #0
 9fc:	ldr	r3, [pc, #12]	; a10 <coda_grib_cursor_read_float+0x63c>
 a00:	movw	r0, #0
 a04:	movt	r0, #0
 a08:	mov	r2, #146	; 0x92
 a0c:	bl	0 <__assert_fail>
 a10:	.word	0x0000000c

00000a14 <coda_grib_cursor_read_float_array>:
 a14:	strd	r4, [sp, #-16]!
 a18:	ldr	r4, [r0, #4]
 a1c:	str	r6, [sp, #8]
 a20:	str	lr, [sp, #12]
 a24:	sub	sp, sp, #520	; 0x208
 a28:	add	r3, r0, r4, lsl #4
 a2c:	ldr	r6, [r3, #-8]
 a30:	ldr	r3, [r6, #8]
 a34:	cmp	r3, #0
 a38:	movle	r0, #0
 a3c:	ble	ac4 <coda_grib_cursor_read_float_array+0xb0>
 a40:	mov	r2, #520	; 0x208
 a44:	mov	r5, r1
 a48:	mov	r1, r0
 a4c:	mov	r0, sp
 a50:	bl	0 <memcpy>
 a54:	ldr	lr, [r6, #12]
 a58:	add	r3, r4, #1
 a5c:	add	r1, sp, #8
 a60:	add	r2, sp, #520	; 0x208
 a64:	add	ip, r1, r3, lsl #4
 a68:	mvn	r0, #0
 a6c:	add	r2, r2, r4, lsl #4
 a70:	mvn	r1, #0
 a74:	mov	r4, #0
 a78:	str	r3, [sp, #4]
 a7c:	strd	r0, [ip, #-8]
 a80:	str	lr, [r2, #-512]	; 0xfffffe00
 a84:	b	a98 <coda_grib_cursor_read_float_array+0x84>
 a88:	ldr	r3, [r6, #8]
 a8c:	cmp	r3, r4
 a90:	ble	ac4 <coda_grib_cursor_read_float_array+0xb0>
 a94:	ldr	r3, [sp, #4]
 a98:	add	r2, sp, #520	; 0x208
 a9c:	mov	r1, r5
 aa0:	add	r3, r2, r3, lsl #4
 aa4:	mov	r0, sp
 aa8:	add	r5, r5, #4
 aac:	str	r4, [r3, #-524]	; 0xfffffdf4
 ab0:	add	r4, r4, #1
 ab4:	bl	3d4 <coda_grib_cursor_read_float>
 ab8:	cmp	r0, #0
 abc:	beq	a88 <coda_grib_cursor_read_float_array+0x74>
 ac0:	mvn	r0, #0
 ac4:	add	sp, sp, #520	; 0x208
 ac8:	ldrd	r4, [sp]
 acc:	ldr	r6, [sp, #8]
 ad0:	add	sp, sp, #12
 ad4:	pop	{pc}		; (ldr pc, [sp], #4)

00000ad8 <coda_grib_cursor_read_float_partial_array>:
 ad8:	strd	r4, [sp, #-24]!	; 0xffffffe8
 adc:	strd	r6, [sp, #8]
 ae0:	ldr	r7, [r0, #4]
 ae4:	str	r8, [sp, #16]
 ae8:	str	lr, [sp, #20]
 aec:	sub	sp, sp, #520	; 0x208
 af0:	add	ip, r0, r7, lsl #4
 af4:	ldr	r8, [ip, #-8]
 af8:	ldr	ip, [r8, #8]
 afc:	cmp	ip, #0
 b00:	ble	b98 <coda_grib_cursor_read_float_partial_array+0xc0>
 b04:	mov	r6, r2
 b08:	mov	r4, r1
 b0c:	mov	r2, #520	; 0x208
 b10:	mov	r1, r0
 b14:	mov	r0, sp
 b18:	mov	r5, r3
 b1c:	bl	0 <memcpy>
 b20:	ldr	ip, [r8, #12]
 b24:	add	r0, r7, #1
 b28:	add	r3, sp, #520	; 0x208
 b2c:	add	r1, sp, #8
 b30:	add	r7, r3, r7, lsl #4
 b34:	mvn	r2, #0
 b38:	add	r1, r1, r0, lsl #4
 b3c:	mvn	r3, #0
 b40:	cmp	r6, #0
 b44:	str	r0, [sp, #4]
 b48:	str	ip, [r7, #-512]	; 0xfffffe00
 b4c:	strd	r2, [r1, #-8]
 b50:	ble	b98 <coda_grib_cursor_read_float_partial_array+0xc0>
 b54:	add	r6, r6, r4
 b58:	b	b68 <coda_grib_cursor_read_float_partial_array+0x90>
 b5c:	cmp	r4, r6
 b60:	beq	b98 <coda_grib_cursor_read_float_partial_array+0xc0>
 b64:	ldr	r0, [sp, #4]
 b68:	add	r3, sp, #520	; 0x208
 b6c:	mov	r1, r5
 b70:	add	r2, r3, r0, lsl #4
 b74:	mov	r0, sp
 b78:	add	r5, r5, #4
 b7c:	str	r4, [r2, #-524]	; 0xfffffdf4
 b80:	add	r4, r4, #1
 b84:	bl	3d4 <coda_grib_cursor_read_float>
 b88:	cmp	r0, #0
 b8c:	beq	b5c <coda_grib_cursor_read_float_partial_array+0x84>
 b90:	mvn	r0, #0
 b94:	b	b9c <coda_grib_cursor_read_float_partial_array+0xc4>
 b98:	mov	r0, #0
 b9c:	add	sp, sp, #520	; 0x208
 ba0:	ldrd	r4, [sp]
 ba4:	ldrd	r6, [sp, #8]
 ba8:	ldr	r8, [sp, #16]
 bac:	add	sp, sp, #20
 bb0:	pop	{pc}		; (ldr pc, [sp], #4)
