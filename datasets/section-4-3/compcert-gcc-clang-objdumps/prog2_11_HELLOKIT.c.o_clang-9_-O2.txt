
../compcert-repos/prog2/CMakeFiles/0.11.2.dir/Aula00_Conceitos_base/11_HELLOKIT.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <main>:
   0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   4:	add	fp, sp, #28
   8:	sub	sp, sp, #100	; 0x64
   c:	vmov.i32	q8, #0	; 0x00000000
  10:	add	r4, sp, #64	; 0x40
  14:	mov	r0, #10
  18:	mov	r1, r4
  1c:	vst1.64	{d16-d17}, [r1], r0
  20:	movw	r0, #0
  24:	movt	r0, #0
  28:	vst1.16	{d16-d17}, [r1]
  2c:	sub	r1, fp, #38	; 0x26
  30:	bl	0 <__isoc99_scanf>
  34:	ldrb	r0, [fp, #-38]	; 0xffffffda
  38:	cmp	r0, #46	; 0x2e
  3c:	beq	164 <main+0x164>
  40:	add	r5, sp, #12
  44:	mov	r9, #0
  48:	sub	r7, fp, #38	; 0x26
  4c:	add	r0, r5, #1
  50:	str	r0, [sp, #4]
  54:	add	r0, sp, #38	; 0x26
  58:	add	r0, r0, #1
  5c:	str	r0, [sp]
  60:	b	80 <main+0x80>
  64:	movw	r0, #0
  68:	mov	r1, r7
  6c:	movt	r0, #0
  70:	bl	0 <__isoc99_scanf>
  74:	ldrb	r0, [fp, #-38]	; 0xffffffda
  78:	cmp	r0, #46	; 0x2e
  7c:	beq	164 <main+0x164>
  80:	movw	r0, #0
  84:	add	r1, sp, #8
  88:	movt	r0, #0
  8c:	bl	0 <__isoc99_scanf>
  90:	ldr	r6, [sp, #8]
  94:	strb	r9, [sp, #64]	; 0x40
  98:	cmp	r6, #1
  9c:	blt	b4 <main+0xb4>
  a0:	mov	r0, r4
  a4:	mov	r1, r7
  a8:	bl	0 <strcat>
  ac:	subs	r6, r6, #1
  b0:	bne	a0 <main+0xa0>
  b4:	mov	r0, r4
  b8:	bl	0 <strlen>
  bc:	add	r0, r0, r4
  c0:	ldrb	r0, [r0, #-1]
  c4:	strb	r0, [sp, #38]	; 0x26
  c8:	mov	r0, r4
  cc:	bl	0 <strlen>
  d0:	mov	r8, r0
  d4:	mov	r0, #1
  d8:	cmp	r8, #2
  dc:	bcc	f4 <main+0xf4>
  e0:	ldr	r0, [sp]
  e4:	sub	r2, r8, #1
  e8:	mov	r1, r4
  ec:	bl	0 <memcpy>
  f0:	mov	r0, r8
  f4:	add	r1, sp, #38	; 0x26
  f8:	strb	r9, [r1, r0]
  fc:	b	10c <main+0x10c>
 100:	cmp	r8, #0
 104:	strb	r9, [r4, r0]
 108:	beq	64 <main+0x64>
 10c:	mov	r0, r4
 110:	add	r1, sp, #38	; 0x26
 114:	bl	0 <strcmp>
 118:	mov	r8, r0
 11c:	mov	r0, r4
 120:	bl	0 <puts>
 124:	mov	r0, r5
 128:	mov	r1, r4
 12c:	bl	0 <strcpy>
 130:	ldrb	r6, [sp, #12]
 134:	bl	0 <strlen>
 138:	mov	sl, r0
 13c:	sub	r2, r0, #1
 140:	mov	r0, #1
 144:	cmp	sl, #2
 148:	strb	r6, [r4, r2]
 14c:	bcc	100 <main+0x100>
 150:	ldr	r1, [sp, #4]
 154:	mov	r0, r4
 158:	bl	0 <memcpy>
 15c:	mov	r0, sl
 160:	b	100 <main+0x100>
 164:	mov	r0, #0
 168:	sub	sp, fp, #28
 16c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

00000170 <StringSet>:
 170:	push	{r4, r5, r6, sl, fp, lr}
 174:	add	fp, sp, #16
 178:	mov	r6, r0
 17c:	mov	r0, #0
 180:	cmp	r2, #1
 184:	strb	r0, [r1]
 188:	blt	1a8 <StringSet+0x38>
 18c:	mov	r4, r2
 190:	mov	r5, r1
 194:	mov	r0, r5
 198:	mov	r1, r6
 19c:	bl	0 <strcat>
 1a0:	subs	r4, r4, #1
 1a4:	bne	194 <StringSet+0x24>
 1a8:	pop	{r4, r5, r6, sl, fp, pc}

000001ac <R_ShiftString>:
 1ac:	push	{r4, r5, r6, r7, fp, lr}
 1b0:	add	fp, sp, #16
 1b4:	mov	r4, r1
 1b8:	mov	r5, r0
 1bc:	bl	0 <strlen>
 1c0:	add	r0, r0, r5
 1c4:	ldrb	r0, [r0, #-1]
 1c8:	strb	r0, [r4]
 1cc:	mov	r0, r5
 1d0:	bl	0 <strlen>
 1d4:	mov	r1, #1
 1d8:	cmp	r0, #2
 1dc:	bcc	210 <R_ShiftString+0x64>
 1e0:	add	r6, r4, #1
 1e4:	mov	r7, #0
 1e8:	ldrb	r0, [r5, r7]
 1ec:	strb	r0, [r6, r7]
 1f0:	mov	r0, r5
 1f4:	bl	0 <strlen>
 1f8:	add	r2, r7, #2
 1fc:	add	r1, r7, #1
 200:	cmp	r2, r0
 204:	mov	r7, r1
 208:	bcc	1e8 <R_ShiftString+0x3c>
 20c:	add	r1, r1, #1
 210:	mov	r0, #0
 214:	strb	r0, [r4, r1]
 218:	pop	{r4, r5, r6, r7, fp, pc}

0000021c <L_ShiftString>:
 21c:	push	{r4, r5, r6, sl, fp, lr}
 220:	add	fp, sp, #16
 224:	ldrb	r6, [r0]
 228:	mov	r4, r1
 22c:	mov	r5, r0
 230:	bl	0 <strlen>
 234:	add	r0, r0, r4
 238:	strb	r6, [r0, #-1]
 23c:	mov	r0, r5
 240:	bl	0 <strlen>
 244:	mov	r1, #1
 248:	cmp	r0, #2
 24c:	bcc	280 <L_ShiftString+0x64>
 250:	mov	r6, #0
 254:	add	r0, r5, r6
 258:	ldrb	r0, [r0, #1]
 25c:	strb	r0, [r4, r6]
 260:	mov	r0, r5
 264:	bl	0 <strlen>
 268:	add	r2, r6, #2
 26c:	add	r1, r6, #1
 270:	cmp	r2, r0
 274:	mov	r6, r1
 278:	bcc	254 <L_ShiftString+0x38>
 27c:	add	r1, r1, #1
 280:	mov	r0, #0
 284:	strb	r0, [r4, r1]
 288:	pop	{r4, r5, r6, sl, fp, pc}
