
../compcert-repos/prog2/1.1.1:     file format elf32-littlearm


Disassembly of section .init:

00010618 <.init>:
   10618:	push	{r3, lr}
   1061c:	bl	106ec <_start@@Base+0x3c>
   10620:	pop	{r3, pc}

Disassembly of section .plt:

00010624 <printf@plt-0x14>:
   10624:	push	{lr}		; (str lr, [sp, #-4]!)
   10628:	ldr	lr, [pc, #4]	; 10634 <printf@plt-0x4>
   1062c:	add	lr, pc, lr
   10630:	ldr	pc, [lr, #8]!
   10634:	andeq	r0, r1, ip, asr #19

00010638 <printf@plt>:
   10638:	add	ip, pc, #0, 12
   1063c:	add	ip, ip, #16, 20	; 0x10000
   10640:	ldr	pc, [ip, #2508]!	; 0x9cc

00010644 <fopen@plt>:
   10644:	add	ip, pc, #0, 12
   10648:	add	ip, ip, #16, 20	; 0x10000
   1064c:	ldr	pc, [ip, #2500]!	; 0x9c4

00010650 <tolower@plt>:
   10650:	add	ip, pc, #0, 12
   10654:	add	ip, ip, #16, 20	; 0x10000
   10658:	ldr	pc, [ip, #2492]!	; 0x9bc

0001065c <puts@plt>:
   1065c:	add	ip, pc, #0, 12
   10660:	add	ip, ip, #16, 20	; 0x10000
   10664:	ldr	pc, [ip, #2484]!	; 0x9b4

00010668 <__libc_start_main@plt>:
   10668:	add	ip, pc, #0, 12
   1066c:	add	ip, ip, #16, 20	; 0x10000
   10670:	ldr	pc, [ip, #2476]!	; 0x9ac

00010674 <__gmon_start__@plt>:
   10674:	add	ip, pc, #0, 12
   10678:	add	ip, ip, #16, 20	; 0x10000
   1067c:	ldr	pc, [ip, #2468]!	; 0x9a4

00010680 <memset@plt>:
   10680:	add	ip, pc, #0, 12
   10684:	add	ip, ip, #16, 20	; 0x10000
   10688:	ldr	pc, [ip, #2460]!	; 0x99c

0001068c <fclose@plt>:
   1068c:	add	ip, pc, #0, 12
   10690:	add	ip, ip, #16, 20	; 0x10000
   10694:	ldr	pc, [ip, #2452]!	; 0x994

00010698 <abort@plt>:
   10698:	add	ip, pc, #0, 12
   1069c:	add	ip, ip, #16, 20	; 0x10000
   106a0:	ldr	pc, [ip, #2444]!	; 0x98c

000106a4 <getc@plt>:
   106a4:	add	ip, pc, #0, 12
   106a8:	add	ip, ip, #16, 20	; 0x10000
   106ac:	ldr	pc, [ip, #2436]!	; 0x984

Disassembly of section .text:

000106b0 <_start@@Base>:
   106b0:	mov	fp, #0
   106b4:	mov	lr, #0
   106b8:	pop	{r1}		; (ldr r1, [sp], #4)
   106bc:	mov	r2, sp
   106c0:	push	{r2}		; (str r2, [sp, #-4]!)
   106c4:	push	{r0}		; (str r0, [sp, #-4]!)
   106c8:	ldr	ip, [pc, #16]	; 106e0 <_start@@Base+0x30>
   106cc:	push	{ip}		; (str ip, [sp, #-4]!)
   106d0:	ldr	r0, [pc, #12]	; 106e4 <_start@@Base+0x34>
   106d4:	ldr	r3, [pc, #12]	; 106e8 <_start@@Base+0x38>
   106d8:	bl	10668 <__libc_start_main@plt>
   106dc:	bl	10698 <abort@plt>
   106e0:			; <UNDEFINED> instruction: 0x00010bbc
   106e4:	andeq	r0, r1, r4, lsr #16
   106e8:	andeq	r0, r1, ip, asr fp
   106ec:	ldr	r3, [pc, #20]	; 10708 <_start@@Base+0x58>
   106f0:	ldr	r2, [pc, #20]	; 1070c <_start@@Base+0x5c>
   106f4:	add	r3, pc, r3
   106f8:	ldr	r2, [r3, r2]
   106fc:	cmp	r2, #0
   10700:	bxeq	lr
   10704:	b	10674 <__gmon_start__@plt>
   10708:	andeq	r0, r1, r4, lsl #18
   1070c:	andeq	r0, r0, r4, lsr r0
   10710:	ldr	r0, [pc, #24]	; 10730 <_start@@Base+0x80>
   10714:	ldr	r3, [pc, #24]	; 10734 <_start@@Base+0x84>
   10718:	cmp	r3, r0
   1071c:	bxeq	lr
   10720:	ldr	r3, [pc, #16]	; 10738 <_start@@Base+0x88>
   10724:	cmp	r3, #0
   10728:	bxeq	lr
   1072c:	bx	r3
   10730:	andeq	r1, r2, r0, asr #32
   10734:	andeq	r1, r2, r0, asr #32
   10738:	andeq	r0, r0, r0
   1073c:	ldr	r0, [pc, #36]	; 10768 <_start@@Base+0xb8>
   10740:	ldr	r1, [pc, #36]	; 1076c <_start@@Base+0xbc>
   10744:	sub	r1, r1, r0
   10748:	asr	r1, r1, #2
   1074c:	add	r1, r1, r1, lsr #31
   10750:	asrs	r1, r1, #1
   10754:	bxeq	lr
   10758:	ldr	r3, [pc, #16]	; 10770 <_start@@Base+0xc0>
   1075c:	cmp	r3, #0
   10760:	bxeq	lr
   10764:	bx	r3
   10768:	andeq	r1, r2, r0, asr #32
   1076c:	andeq	r1, r2, r0, asr #32
   10770:	andeq	r0, r0, r0
   10774:	push	{r4, lr}
   10778:	ldr	r4, [pc, #24]	; 10798 <_start@@Base+0xe8>
   1077c:	ldrb	r3, [r4]
   10780:	cmp	r3, #0
   10784:	popne	{r4, pc}
   10788:	bl	10710 <_start@@Base+0x60>
   1078c:	mov	r3, #1
   10790:	strb	r3, [r4]
   10794:	pop	{r4, pc}
   10798:	andeq	r1, r2, r0, asr #32
   1079c:	b	1073c <_start@@Base+0x8c>

000107a0 <in_array@@Base>:
   107a0:	push	{fp}		; (str fp, [sp, #-4]!)
   107a4:	add	fp, sp, #0
   107a8:	sub	sp, sp, #28
   107ac:	str	r0, [fp, #-16]
   107b0:	str	r1, [fp, #-20]	; 0xffffffec
   107b4:	str	r2, [fp, #-24]	; 0xffffffe8
   107b8:	mov	r3, #0
   107bc:	str	r3, [fp, #-8]
   107c0:	mov	r3, #0
   107c4:	str	r3, [fp, #-8]
   107c8:	b	10800 <in_array@@Base+0x60>
   107cc:	ldr	r3, [fp, #-8]
   107d0:	lsl	r3, r3, #2
   107d4:	ldr	r2, [fp, #-20]	; 0xffffffec
   107d8:	add	r3, r2, r3
   107dc:	ldr	r3, [r3]
   107e0:	ldr	r2, [fp, #-16]
   107e4:	cmp	r2, r3
   107e8:	bne	107f4 <in_array@@Base+0x54>
   107ec:	mov	r3, #1
   107f0:	b	10814 <in_array@@Base+0x74>
   107f4:	ldr	r3, [fp, #-8]
   107f8:	add	r3, r3, #1
   107fc:	str	r3, [fp, #-8]
   10800:	ldr	r2, [fp, #-8]
   10804:	ldr	r3, [fp, #-24]	; 0xffffffe8
   10808:	cmp	r2, r3
   1080c:	ble	107cc <in_array@@Base+0x2c>
   10810:	mov	r3, #0
   10814:	mov	r0, r3
   10818:	add	sp, fp, #0
   1081c:	pop	{fp}		; (ldr fp, [sp], #4)
   10820:	bx	lr

00010824 <main@@Base>:
   10824:	str	fp, [sp, #-8]!
   10828:	str	lr, [sp, #4]
   1082c:	add	fp, sp, #4
   10830:	sub	sp, sp, #216	; 0xd8
   10834:	movw	r2, #3108	; 0xc24
   10838:	movt	r2, #1
   1083c:	sub	r3, fp, #52	; 0x34
   10840:	ldrd	r0, [r2]
   10844:	strd	r0, [r3]
   10848:	ldrd	r0, [r2, #8]
   1084c:	strd	r0, [r3, #8]
   10850:	ldrd	r0, [r2, #16]
   10854:	strd	r0, [r3, #16]
   10858:	ldrd	r0, [r2, #24]
   1085c:	strd	r0, [r3, #24]
   10860:	movw	r3, #3140	; 0xc44
   10864:	movt	r3, #1
   10868:	sub	r1, fp, #68	; 0x44
   1086c:	mov	r0, r3
   10870:	ldrd	r2, [r0]
   10874:	strd	r2, [r1]
   10878:	ldrd	r2, [r0, #8]
   1087c:	strd	r2, [r1, #8]
   10880:	movw	r3, #3156	; 0xc54
   10884:	movt	r3, #1
   10888:	sub	r1, fp, #76	; 0x4c
   1088c:	ldrd	r2, [r3]
   10890:	strd	r2, [r1]
   10894:	movw	r2, #3164	; 0xc5c
   10898:	movt	r2, #1
   1089c:	sub	r3, fp, #100	; 0x64
   108a0:	ldrd	r0, [r2]
   108a4:	strd	r0, [r3]
   108a8:	ldrd	r0, [r2, #8]
   108ac:	strd	r0, [r3, #8]
   108b0:	ldrd	r0, [r2, #16]
   108b4:	strd	r0, [r3, #16]
   108b8:	movw	r3, #3188	; 0xc74
   108bc:	movt	r3, #1
   108c0:	sub	r1, fp, #108	; 0x6c
   108c4:	ldrd	r2, [r3]
   108c8:	strd	r2, [r1]
   108cc:	movw	r3, #3196	; 0xc7c
   108d0:	movt	r3, #1
   108d4:	sub	r1, fp, #116	; 0x74
   108d8:	ldrd	r2, [r3]
   108dc:	strd	r2, [r1]
   108e0:	movw	r1, #3020	; 0xbcc
   108e4:	movt	r1, #1
   108e8:	movw	r0, #3024	; 0xbd0
   108ec:	movt	r0, #1
   108f0:	bl	10644 <fopen@plt>
   108f4:	str	r0, [fp, #-16]
   108f8:	mov	r3, #0
   108fc:	str	r3, [fp, #-12]
   10900:	sub	r3, fp, #220	; 0xdc
   10904:	mov	r2, #104	; 0x68
   10908:	mov	r1, #0
   1090c:	mov	r0, r3
   10910:	bl	10680 <memset@plt>
   10914:	ldr	r0, [fp, #-16]
   10918:	bl	106a4 <getc@plt>
   1091c:	str	r0, [fp, #-8]
   10920:	ldr	r3, [fp, #-8]
   10924:	cmn	r3, #1
   10928:	beq	10a9c <main@@Base+0x278>
   1092c:	sub	r3, fp, #52	; 0x34
   10930:	mov	r2, #8
   10934:	mov	r1, r3
   10938:	ldr	r0, [fp, #-8]
   1093c:	bl	107a0 <in_array@@Base>
   10940:	mov	r3, r0
   10944:	cmp	r3, #0
   10948:	beq	10958 <main@@Base+0x134>
   1094c:	mov	r3, #97	; 0x61
   10950:	str	r3, [fp, #-8]
   10954:	b	10a30 <main@@Base+0x20c>
   10958:	sub	r3, fp, #68	; 0x44
   1095c:	mov	r2, #4
   10960:	mov	r1, r3
   10964:	ldr	r0, [fp, #-8]
   10968:	bl	107a0 <in_array@@Base>
   1096c:	mov	r3, r0
   10970:	cmp	r3, #0
   10974:	beq	10984 <main@@Base+0x160>
   10978:	mov	r3, #101	; 0x65
   1097c:	str	r3, [fp, #-8]
   10980:	b	10a30 <main@@Base+0x20c>
   10984:	sub	r3, fp, #76	; 0x4c
   10988:	mov	r2, #2
   1098c:	mov	r1, r3
   10990:	ldr	r0, [fp, #-8]
   10994:	bl	107a0 <in_array@@Base>
   10998:	mov	r3, r0
   1099c:	cmp	r3, #0
   109a0:	beq	109b0 <main@@Base+0x18c>
   109a4:	mov	r3, #105	; 0x69
   109a8:	str	r3, [fp, #-8]
   109ac:	b	10a30 <main@@Base+0x20c>
   109b0:	sub	r3, fp, #100	; 0x64
   109b4:	mov	r2, #6
   109b8:	mov	r1, r3
   109bc:	ldr	r0, [fp, #-8]
   109c0:	bl	107a0 <in_array@@Base>
   109c4:	mov	r3, r0
   109c8:	cmp	r3, #0
   109cc:	beq	109dc <main@@Base+0x1b8>
   109d0:	mov	r3, #111	; 0x6f
   109d4:	str	r3, [fp, #-8]
   109d8:	b	10a30 <main@@Base+0x20c>
   109dc:	sub	r3, fp, #108	; 0x6c
   109e0:	mov	r2, #2
   109e4:	mov	r1, r3
   109e8:	ldr	r0, [fp, #-8]
   109ec:	bl	107a0 <in_array@@Base>
   109f0:	mov	r3, r0
   109f4:	cmp	r3, #0
   109f8:	beq	10a08 <main@@Base+0x1e4>
   109fc:	mov	r3, #117	; 0x75
   10a00:	str	r3, [fp, #-8]
   10a04:	b	10a30 <main@@Base+0x20c>
   10a08:	sub	r3, fp, #116	; 0x74
   10a0c:	mov	r2, #2
   10a10:	mov	r1, r3
   10a14:	ldr	r0, [fp, #-8]
   10a18:	bl	107a0 <in_array@@Base>
   10a1c:	mov	r3, r0
   10a20:	cmp	r3, #0
   10a24:	beq	10a30 <main@@Base+0x20c>
   10a28:	mov	r3, #99	; 0x63
   10a2c:	str	r3, [fp, #-8]
   10a30:	ldr	r0, [fp, #-8]
   10a34:	bl	10650 <tolower@plt>
   10a38:	str	r0, [fp, #-8]
   10a3c:	ldr	r3, [fp, #-8]
   10a40:	sub	r3, r3, #97	; 0x61
   10a44:	str	r3, [fp, #-8]
   10a48:	ldr	r3, [fp, #-8]
   10a4c:	cmp	r3, #25
   10a50:	bgt	10914 <main@@Base+0xf0>
   10a54:	ldr	r3, [fp, #-8]
   10a58:	cmp	r3, #0
   10a5c:	blt	10914 <main@@Base+0xf0>
   10a60:	ldr	r3, [fp, #-8]
   10a64:	lsl	r3, r3, #2
   10a68:	sub	r2, fp, #4
   10a6c:	add	r3, r2, r3
   10a70:	ldr	r3, [r3, #-216]	; 0xffffff28
   10a74:	add	r2, r3, #1
   10a78:	ldr	r3, [fp, #-8]
   10a7c:	lsl	r3, r3, #2
   10a80:	sub	r1, fp, #4
   10a84:	add	r3, r1, r3
   10a88:	str	r2, [r3, #-216]	; 0xffffff28
   10a8c:	ldr	r3, [fp, #-12]
   10a90:	add	r3, r3, #1
   10a94:	str	r3, [fp, #-12]
   10a98:	b	10914 <main@@Base+0xf0>
   10a9c:	nop	{0}
   10aa0:	ldr	r3, [fp, #-12]
   10aa4:	str	r3, [fp, #-20]	; 0xffffffec
   10aa8:	ldr	r0, [fp, #-16]
   10aac:	bl	1068c <fclose@plt>
   10ab0:	movw	r0, #3048	; 0xbe8
   10ab4:	movt	r0, #1
   10ab8:	bl	1065c <puts@plt>
   10abc:	ldr	r1, [fp, #-12]
   10ac0:	movw	r0, #3052	; 0xbec
   10ac4:	movt	r0, #1
   10ac8:	bl	10638 <printf@plt>
   10acc:	mov	r3, #0
   10ad0:	str	r3, [fp, #-12]
   10ad4:	b	10b34 <main@@Base+0x310>
   10ad8:	ldr	r3, [fp, #-12]
   10adc:	add	r1, r3, #97	; 0x61
   10ae0:	ldr	r3, [fp, #-12]
   10ae4:	lsl	r3, r3, #2
   10ae8:	sub	r2, fp, #4
   10aec:	add	r3, r2, r3
   10af0:	ldr	r3, [r3, #-216]	; 0xffffff28
   10af4:	vmov	s15, r3
   10af8:	vcvt.f32.s32	s13, s15
   10afc:	ldr	r3, [fp, #-20]	; 0xffffffec
   10b00:	vmov	s15, r3
   10b04:	vcvt.f32.s32	s14, s15
   10b08:	vdiv.f32	s15, s13, s14
   10b0c:	vldr	s14, [pc, #68]	; 10b58 <main@@Base+0x334>
   10b10:	vmul.f32	s15, s15, s14
   10b14:	vcvt.f64.f32	d7, s15
   10b18:	vmov	r2, r3, d7
   10b1c:	movw	r0, #3084	; 0xc0c
   10b20:	movt	r0, #1
   10b24:	bl	10638 <printf@plt>
   10b28:	ldr	r3, [fp, #-12]
   10b2c:	add	r3, r3, #1
   10b30:	str	r3, [fp, #-12]
   10b34:	ldr	r3, [fp, #-12]
   10b38:	cmp	r3, #25
   10b3c:	ble	10ad8 <main@@Base+0x2b4>
   10b40:	mov	r3, #0
   10b44:	mov	r0, r3
   10b48:	sub	sp, fp, #4
   10b4c:	ldr	fp, [sp]
   10b50:	add	sp, sp, #4
   10b54:	pop	{pc}		; (ldr pc, [sp], #4)
   10b58:	sbcmi	r0, r8, #0

00010b5c <__libc_csu_init@@Base>:
   10b5c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   10b60:	mov	r7, r0
   10b64:	ldr	r6, [pc, #72]	; 10bb4 <__libc_csu_init@@Base+0x58>
   10b68:	ldr	r5, [pc, #72]	; 10bb8 <__libc_csu_init@@Base+0x5c>
   10b6c:	add	r6, pc, r6
   10b70:	add	r5, pc, r5
   10b74:	sub	r6, r6, r5
   10b78:	mov	r8, r1
   10b7c:	mov	r9, r2
   10b80:	bl	10618 <printf@plt-0x20>
   10b84:	asrs	r6, r6, #2
   10b88:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   10b8c:	mov	r4, #0
   10b90:	add	r4, r4, #1
   10b94:	ldr	r3, [r5], #4
   10b98:	mov	r2, r9
   10b9c:	mov	r1, r8
   10ba0:	mov	r0, r7
   10ba4:	blx	r3
   10ba8:	cmp	r6, r4
   10bac:	bne	10b90 <__libc_csu_init@@Base+0x34>
   10bb0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   10bb4:	andeq	r0, r1, r0, lsr #7
   10bb8:	muleq	r1, r8, r3

00010bbc <__libc_csu_fini@@Base>:
   10bbc:	bx	lr

Disassembly of section .fini:

00010bc0 <.fini>:
   10bc0:	push	{r3, lr}
   10bc4:	pop	{r3, pc}
