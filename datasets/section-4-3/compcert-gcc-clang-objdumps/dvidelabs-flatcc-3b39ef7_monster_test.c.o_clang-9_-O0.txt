
../compcert-repos/dvidelabs-flatcc-3b39ef7/test/monster_test/CMakeFiles/monster_test.dir/monster_test.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <verify_empty_monster>:
       0:	push	{fp, lr}
       4:	mov	fp, sp
       8:	sub	sp, sp, #32
       c:	str	r0, [fp, #-8]
      10:	ldr	r0, [fp, #-8]
      14:	movw	r1, #0
      18:	movt	r1, #0
      1c:	bl	1ec <MyGame_Example_Monster_as_root_with_identifier>
      20:	str	r0, [fp, #-12]
      24:	ldr	r0, [fp, #-8]
      28:	movw	r1, #0
      2c:	movt	r1, #0
      30:	bl	1ec <MyGame_Example_Monster_as_root_with_identifier>
      34:	str	r0, [sp, #16]
      38:	ldr	r0, [fp, #-8]
      3c:	movw	r1, #0
      40:	bl	1ec <MyGame_Example_Monster_as_root_with_identifier>
      44:	str	r0, [sp, #12]
      48:	ldr	r0, [fp, #-8]
      4c:	movw	r1, #0
      50:	movt	r1, #0
      54:	bl	1ec <MyGame_Example_Monster_as_root_with_identifier>
      58:	str	r0, [sp, #8]
      5c:	ldr	r0, [fp, #-8]
      60:	bl	25c <MyGame_Example_Monster_as_root>
      64:	str	r0, [sp, #4]
      68:	ldr	r0, [fp, #-12]
      6c:	movw	r1, #0
      70:	cmp	r0, r1
      74:	bne	90 <verify_empty_monster+0x90>
      78:	movw	r0, #0
      7c:	movt	r0, #0
      80:	bl	0 <printf>
      84:	mvn	r1, #0
      88:	str	r1, [fp, #-4]
      8c:	b	1e0 <verify_empty_monster+0x1e0>
      90:	ldr	r0, [sp, #16]
      94:	movw	r1, #0
      98:	cmp	r0, r1
      9c:	beq	b8 <verify_empty_monster+0xb8>
      a0:	movw	r0, #0
      a4:	movt	r0, #0
      a8:	bl	0 <printf>
      ac:	mvn	r1, #0
      b0:	str	r1, [fp, #-4]
      b4:	b	1e0 <verify_empty_monster+0x1e0>
      b8:	ldr	r0, [sp, #12]
      bc:	ldr	r1, [fp, #-12]
      c0:	cmp	r0, r1
      c4:	beq	e0 <verify_empty_monster+0xe0>
      c8:	movw	r0, #0
      cc:	movt	r0, #0
      d0:	bl	0 <printf>
      d4:	mvn	r1, #0
      d8:	str	r1, [fp, #-4]
      dc:	b	1e0 <verify_empty_monster+0x1e0>
      e0:	ldr	r0, [sp, #8]
      e4:	ldr	r1, [fp, #-12]
      e8:	cmp	r0, r1
      ec:	beq	108 <verify_empty_monster+0x108>
      f0:	movw	r0, #0
      f4:	movt	r0, #0
      f8:	bl	0 <printf>
      fc:	mvn	r1, #0
     100:	str	r1, [fp, #-4]
     104:	b	1e0 <verify_empty_monster+0x1e0>
     108:	ldr	r0, [sp, #4]
     10c:	ldr	r1, [fp, #-12]
     110:	cmp	r0, r1
     114:	beq	130 <verify_empty_monster+0x130>
     118:	movw	r0, #0
     11c:	movt	r0, #0
     120:	bl	0 <printf>
     124:	mvn	r1, #0
     128:	str	r1, [fp, #-4]
     12c:	b	1e0 <verify_empty_monster+0x1e0>
     130:	ldr	r0, [fp, #-12]
     134:	bl	2d4 <MyGame_Example_Monster_hp>
     138:	sxth	r0, r0
     13c:	cmp	r0, #100	; 0x64
     140:	beq	15c <verify_empty_monster+0x15c>
     144:	movw	r0, #0
     148:	movt	r0, #0
     14c:	bl	0 <printf>
     150:	mvn	r1, #0
     154:	str	r1, [fp, #-4]
     158:	b	1e0 <verify_empty_monster+0x1e0>
     15c:	ldr	r0, [fp, #-12]
     160:	bl	3bc <MyGame_Example_Monster_hp_is_present>
     164:	cmp	r0, #0
     168:	beq	184 <verify_empty_monster+0x184>
     16c:	movw	r0, #0
     170:	movt	r0, #0
     174:	bl	0 <printf>
     178:	mvn	r1, #0
     17c:	str	r1, [fp, #-4]
     180:	b	1e0 <verify_empty_monster+0x1e0>
     184:	ldr	r0, [fp, #-12]
     188:	bl	47c <MyGame_Example_Monster_pos_is_present>
     18c:	cmp	r0, #0
     190:	beq	1ac <verify_empty_monster+0x1ac>
     194:	movw	r0, #0
     198:	movt	r0, #0
     19c:	bl	0 <printf>
     1a0:	mvn	r1, #0
     1a4:	str	r1, [fp, #-4]
     1a8:	b	1e0 <verify_empty_monster+0x1e0>
     1ac:	ldr	r0, [fp, #-12]
     1b0:	bl	53c <MyGame_Example_Monster_pos>
     1b4:	movw	r1, #0
     1b8:	cmp	r0, r1
     1bc:	beq	1d8 <verify_empty_monster+0x1d8>
     1c0:	movw	r0, #0
     1c4:	movt	r0, #0
     1c8:	bl	0 <printf>
     1cc:	mvn	r1, #0
     1d0:	str	r1, [fp, #-4]
     1d4:	b	1e0 <verify_empty_monster+0x1e0>
     1d8:	movw	r0, #0
     1dc:	str	r0, [fp, #-4]
     1e0:	ldr	r0, [fp, #-4]
     1e4:	mov	sp, fp
     1e8:	pop	{fp, pc}

000001ec <MyGame_Example_Monster_as_root_with_identifier>:
     1ec:	push	{fp, lr}
     1f0:	mov	fp, sp
     1f4:	sub	sp, sp, #16
     1f8:	str	r0, [fp, #-4]
     1fc:	str	r1, [sp, #8]
     200:	ldr	r0, [fp, #-4]
     204:	movw	r1, #0
     208:	cmp	r0, r1
     20c:	beq	224 <MyGame_Example_Monster_as_root_with_identifier+0x38>
     210:	ldr	r0, [fp, #-4]
     214:	ldr	r1, [sp, #8]
     218:	bl	25b8 <flatbuffers_has_identifier>
     21c:	cmp	r0, #0
     220:	bne	230 <MyGame_Example_Monster_as_root_with_identifier+0x44>
     224:	movw	r0, #0
     228:	str	r0, [sp, #4]
     22c:	b	250 <MyGame_Example_Monster_as_root_with_identifier+0x64>
     230:	ldr	r0, [fp, #-4]
     234:	ldr	r1, [fp, #-4]
     238:	str	r0, [sp]
     23c:	mov	r0, r1
     240:	bl	f490 <__flatbuffers_uoffset_read_from_pe>
     244:	ldr	r1, [sp]
     248:	add	r0, r1, r0
     24c:	str	r0, [sp, #4]
     250:	ldr	r0, [sp, #4]
     254:	mov	sp, fp
     258:	pop	{fp, pc}

0000025c <MyGame_Example_Monster_as_root>:
     25c:	push	{fp, lr}
     260:	mov	fp, sp
     264:	sub	sp, sp, #16
     268:	str	r0, [fp, #-4]
     26c:	movw	r0, #0
     270:	movt	r0, #0
     274:	str	r0, [sp, #8]
     278:	ldr	r0, [fp, #-4]
     27c:	movw	r1, #0
     280:	cmp	r0, r1
     284:	beq	29c <MyGame_Example_Monster_as_root+0x40>
     288:	ldr	r0, [fp, #-4]
     28c:	ldr	r1, [sp, #8]
     290:	bl	25b8 <flatbuffers_has_identifier>
     294:	cmp	r0, #0
     298:	bne	2a8 <MyGame_Example_Monster_as_root+0x4c>
     29c:	movw	r0, #0
     2a0:	str	r0, [sp, #4]
     2a4:	b	2c8 <MyGame_Example_Monster_as_root+0x6c>
     2a8:	ldr	r0, [fp, #-4]
     2ac:	ldr	r1, [fp, #-4]
     2b0:	str	r0, [sp]
     2b4:	mov	r0, r1
     2b8:	bl	f490 <__flatbuffers_uoffset_read_from_pe>
     2bc:	ldr	r1, [sp]
     2c0:	add	r0, r1, r0
     2c4:	str	r0, [sp, #4]
     2c8:	ldr	r0, [sp, #4]
     2cc:	mov	sp, fp
     2d0:	pop	{fp, pc}

000002d4 <MyGame_Example_Monster_hp>:
     2d4:	push	{fp, lr}
     2d8:	mov	fp, sp
     2dc:	sub	sp, sp, #24
     2e0:	str	r0, [fp, #-4]
     2e4:	movw	r0, #0
     2e8:	strh	r0, [fp, #-6]
     2ec:	ldr	r0, [fp, #-4]
     2f0:	movw	r1, #0
     2f4:	cmp	r0, r1
     2f8:	beq	304 <MyGame_Example_Monster_hp+0x30>
     2fc:	b	300 <MyGame_Example_Monster_hp+0x2c>
     300:	b	324 <MyGame_Example_Monster_hp+0x50>
     304:	movw	r0, #0
     308:	movt	r0, #0
     30c:	movw	r1, #0
     310:	movt	r1, #0
     314:	movw	r2, #697	; 0x2b9
     318:	movw	r3, #0
     31c:	movt	r3, #0
     320:	bl	0 <__assert_fail>
     324:	mov	r0, #2
     328:	strh	r0, [fp, #-8]
     32c:	ldr	r0, [fp, #-4]
     330:	str	r0, [sp, #8]
     334:	bl	f4c8 <__flatbuffers_soffset_read_from_pe>
     338:	ldr	r1, [sp, #8]
     33c:	sub	r0, r1, r0
     340:	str	r0, [sp, #12]
     344:	ldr	r0, [sp, #12]
     348:	bl	f4ec <__flatbuffers_voffset_read_from_pe>
     34c:	ldrh	r1, [fp, #-8]
     350:	add	r1, r1, #3
     354:	lsl	r1, r1, #1
     358:	cmp	r0, r1
     35c:	bcc	378 <MyGame_Example_Monster_hp+0xa4>
     360:	ldr	r0, [sp, #12]
     364:	ldrh	r1, [fp, #-8]
     368:	add	r0, r0, r1, lsl #1
     36c:	add	r0, r0, #4
     370:	bl	f4ec <__flatbuffers_voffset_read_from_pe>
     374:	strh	r0, [fp, #-6]
     378:	ldrh	r0, [fp, #-6]
     37c:	cmp	r0, #0
     380:	beq	3a0 <MyGame_Example_Monster_hp+0xcc>
     384:	ldr	r0, [fp, #-4]
     388:	ldrh	r1, [fp, #-6]
     38c:	add	r0, r0, r1
     390:	bl	f514 <flatbuffers_int16_read_from_pe>
     394:	sxth	r0, r0
     398:	str	r0, [sp, #4]
     39c:	b	3ac <MyGame_Example_Monster_hp+0xd8>
     3a0:	movw	r0, #100	; 0x64
     3a4:	str	r0, [sp, #4]
     3a8:	b	3ac <MyGame_Example_Monster_hp+0xd8>
     3ac:	ldr	r0, [sp, #4]
     3b0:	sxth	r0, r0
     3b4:	mov	sp, fp
     3b8:	pop	{fp, pc}

000003bc <MyGame_Example_Monster_hp_is_present>:
     3bc:	push	{fp, lr}
     3c0:	mov	fp, sp
     3c4:	sub	sp, sp, #16
     3c8:	str	r0, [fp, #-4]
     3cc:	movw	r0, #0
     3d0:	strh	r0, [fp, #-6]
     3d4:	ldr	r0, [fp, #-4]
     3d8:	movw	r1, #0
     3dc:	cmp	r0, r1
     3e0:	beq	3ec <MyGame_Example_Monster_hp_is_present+0x30>
     3e4:	b	3e8 <MyGame_Example_Monster_hp_is_present+0x2c>
     3e8:	b	40c <MyGame_Example_Monster_hp_is_present+0x50>
     3ec:	movw	r0, #0
     3f0:	movt	r0, #0
     3f4:	movw	r1, #0
     3f8:	movt	r1, #0
     3fc:	movw	r2, #697	; 0x2b9
     400:	movw	r3, #0
     404:	movt	r3, #0
     408:	bl	0 <__assert_fail>
     40c:	mov	r0, #2
     410:	strh	r0, [sp, #8]
     414:	ldr	r0, [fp, #-4]
     418:	str	r0, [sp]
     41c:	bl	f4c8 <__flatbuffers_soffset_read_from_pe>
     420:	ldr	r1, [sp]
     424:	sub	r0, r1, r0
     428:	str	r0, [sp, #4]
     42c:	ldr	r0, [sp, #4]
     430:	bl	f4ec <__flatbuffers_voffset_read_from_pe>
     434:	ldrh	r1, [sp, #8]
     438:	add	r1, r1, #3
     43c:	lsl	r1, r1, #1
     440:	cmp	r0, r1
     444:	bcc	460 <MyGame_Example_Monster_hp_is_present+0xa4>
     448:	ldr	r0, [sp, #4]
     44c:	ldrh	r1, [sp, #8]
     450:	add	r0, r0, r1, lsl #1
     454:	add	r0, r0, #4
     458:	bl	f4ec <__flatbuffers_voffset_read_from_pe>
     45c:	strh	r0, [fp, #-6]
     460:	ldrh	r0, [fp, #-6]
     464:	cmp	r0, #0
     468:	movw	r0, #0
     46c:	movne	r0, #1
     470:	and	r0, r0, #1
     474:	mov	sp, fp
     478:	pop	{fp, pc}

0000047c <MyGame_Example_Monster_pos_is_present>:
     47c:	push	{fp, lr}
     480:	mov	fp, sp
     484:	sub	sp, sp, #16
     488:	str	r0, [fp, #-4]
     48c:	movw	r0, #0
     490:	strh	r0, [fp, #-6]
     494:	ldr	r0, [fp, #-4]
     498:	movw	r1, #0
     49c:	cmp	r0, r1
     4a0:	beq	4ac <MyGame_Example_Monster_pos_is_present+0x30>
     4a4:	b	4a8 <MyGame_Example_Monster_pos_is_present+0x2c>
     4a8:	b	4cc <MyGame_Example_Monster_pos_is_present+0x50>
     4ac:	movw	r0, #0
     4b0:	movt	r0, #0
     4b4:	movw	r1, #0
     4b8:	movt	r1, #0
     4bc:	movw	r2, #696	; 0x2b8
     4c0:	movw	r3, #0
     4c4:	movt	r3, #0
     4c8:	bl	0 <__assert_fail>
     4cc:	mov	r0, #0
     4d0:	strh	r0, [sp, #8]
     4d4:	ldr	r0, [fp, #-4]
     4d8:	str	r0, [sp]
     4dc:	bl	f4c8 <__flatbuffers_soffset_read_from_pe>
     4e0:	ldr	r1, [sp]
     4e4:	sub	r0, r1, r0
     4e8:	str	r0, [sp, #4]
     4ec:	ldr	r0, [sp, #4]
     4f0:	bl	f4ec <__flatbuffers_voffset_read_from_pe>
     4f4:	ldrh	r1, [sp, #8]
     4f8:	add	r1, r1, #3
     4fc:	lsl	r1, r1, #1
     500:	cmp	r0, r1
     504:	bcc	520 <MyGame_Example_Monster_pos_is_present+0xa4>
     508:	ldr	r0, [sp, #4]
     50c:	ldrh	r1, [sp, #8]
     510:	add	r0, r0, r1, lsl #1
     514:	add	r0, r0, #4
     518:	bl	f4ec <__flatbuffers_voffset_read_from_pe>
     51c:	strh	r0, [fp, #-6]
     520:	ldrh	r0, [fp, #-6]
     524:	cmp	r0, #0
     528:	movw	r0, #0
     52c:	movne	r0, #1
     530:	and	r0, r0, #1
     534:	mov	sp, fp
     538:	pop	{fp, pc}

0000053c <MyGame_Example_Monster_pos>:
     53c:	push	{fp, lr}
     540:	mov	fp, sp
     544:	sub	sp, sp, #24
     548:	str	r0, [fp, #-8]
     54c:	movw	r0, #0
     550:	strh	r0, [fp, #-10]
     554:	ldr	r0, [fp, #-8]
     558:	movw	r1, #0
     55c:	cmp	r0, r1
     560:	beq	56c <MyGame_Example_Monster_pos+0x30>
     564:	b	568 <MyGame_Example_Monster_pos+0x2c>
     568:	b	58c <MyGame_Example_Monster_pos+0x50>
     56c:	movw	r0, #0
     570:	movt	r0, #0
     574:	movw	r1, #0
     578:	movt	r1, #0
     57c:	movw	r2, #696	; 0x2b8
     580:	movw	r3, #0
     584:	movt	r3, #0
     588:	bl	0 <__assert_fail>
     58c:	mov	r0, #0
     590:	strh	r0, [sp, #12]
     594:	ldr	r0, [fp, #-8]
     598:	str	r0, [sp, #4]
     59c:	bl	f4c8 <__flatbuffers_soffset_read_from_pe>
     5a0:	ldr	r1, [sp, #4]
     5a4:	sub	r0, r1, r0
     5a8:	str	r0, [sp, #8]
     5ac:	ldr	r0, [sp, #8]
     5b0:	bl	f4ec <__flatbuffers_voffset_read_from_pe>
     5b4:	ldrh	r1, [sp, #12]
     5b8:	add	r1, r1, #3
     5bc:	lsl	r1, r1, #1
     5c0:	cmp	r0, r1
     5c4:	bcc	5e0 <MyGame_Example_Monster_pos+0xa4>
     5c8:	ldr	r0, [sp, #8]
     5cc:	ldrh	r1, [sp, #12]
     5d0:	add	r0, r0, r1, lsl #1
     5d4:	add	r0, r0, #4
     5d8:	bl	f4ec <__flatbuffers_voffset_read_from_pe>
     5dc:	strh	r0, [fp, #-10]
     5e0:	ldrsh	r0, [fp, #-10]
     5e4:	cmp	r0, #0
     5e8:	beq	600 <MyGame_Example_Monster_pos+0xc4>
     5ec:	ldr	r0, [fp, #-8]
     5f0:	ldrh	r1, [fp, #-10]
     5f4:	add	r0, r0, r1
     5f8:	str	r0, [fp, #-4]
     5fc:	b	608 <MyGame_Example_Monster_pos+0xcc>
     600:	movw	r0, #0
     604:	str	r0, [fp, #-4]
     608:	ldr	r0, [fp, #-4]
     60c:	mov	sp, fp
     610:	pop	{fp, pc}

00000614 <test_enums>:
     614:	sub	sp, sp, #4
     618:	str	r0, [sp]
     61c:	movw	r0, #0
     620:	add	sp, sp, #4
     624:	bx	lr

00000628 <test_type_aliases>:
     628:	push	{fp, lr}
     62c:	mov	fp, sp
     630:	sub	sp, sp, #96	; 0x60
     634:	str	r0, [fp, #-4]
     638:	movw	r0, #0
     63c:	str	r0, [fp, #-8]
     640:	str	r0, [fp, #-12]
     644:	ldr	r0, [fp, #-4]
     648:	bl	0 <flatcc_builder_reset>
     64c:	ldr	r1, [fp, #-4]
     650:	str	r0, [fp, #-32]	; 0xffffffe0
     654:	mov	r0, r1
     658:	movw	r1, #0
     65c:	str	r1, [fp, #-36]	; 0xffffffdc
     660:	ldr	r2, [fp, #-36]	; 0xffffffdc
     664:	bl	8b8 <flatbuffers_uint8_vec_create>
     668:	str	r0, [fp, #-24]	; 0xffffffe8
     66c:	ldr	r0, [fp, #-4]
     670:	movw	r1, #0
     674:	str	r1, [fp, #-40]	; 0xffffffd8
     678:	ldr	r2, [fp, #-40]	; 0xffffffd8
     67c:	bl	900 <flatbuffers_double_vec_create>
     680:	ldr	r1, [pc, #552]	; 8b0 <test_type_aliases+0x288>
     684:	str	r0, [fp, #-28]	; 0xffffffe4
     688:	ldr	r0, [fp, #-4]
     68c:	ldr	r2, [fp, #-24]	; 0xffffffe8
     690:	ldr	r3, [fp, #-28]	; 0xffffffe4
     694:	mov	ip, sp
     698:	str	r3, [ip, #36]	; 0x24
     69c:	str	r2, [ip, #32]
     6a0:	mvn	r2, #0
     6a4:	str	r2, [ip, #28]
     6a8:	str	r2, [ip, #24]
     6ac:	mov	r3, #-2147483648	; 0x80000000
     6b0:	str	r3, [ip, #20]
     6b4:	mov	lr, #0
     6b8:	str	lr, [ip, #16]
     6bc:	str	r2, [ip, #8]
     6c0:	str	r3, [ip, #4]
     6c4:	movw	r2, #65535	; 0xffff
     6c8:	str	r2, [ip]
     6cc:	mvn	r2, #127	; 0x7f
     6d0:	mov	r3, #255	; 0xff
     6d4:	movw	ip, #32768	; 0x8000
     6d8:	movt	ip, #65535	; 0xffff
     6dc:	vldr	s0, [pc, #464]	; 8b4 <test_type_aliases+0x28c>
     6e0:	vldr	d1, [pc, #448]	; 8a8 <test_type_aliases+0x280>
     6e4:	str	r1, [fp, #-44]	; 0xffffffd4
     6e8:	mov	r1, r2
     6ec:	mov	r2, r3
     6f0:	mov	r3, ip
     6f4:	bl	958 <MyGame_Example_TypeAliases_create_as_root>
     6f8:	ldr	r1, [fp, #-4]
     6fc:	str	r0, [sp, #48]	; 0x30
     700:	mov	r0, r1
     704:	sub	r1, fp, #16
     708:	bl	0 <flatcc_builder_finalize_aligned_buffer>
     70c:	str	r0, [fp, #-12]
     710:	ldr	r0, [fp, #-12]
     714:	ldr	r1, [fp, #-16]
     718:	bl	aa4 <MyGame_Example_TypeAliases_verify_as_root>
     71c:	str	r0, [fp, #-8]
     720:	cmp	r0, #0
     724:	beq	76c <test_type_aliases+0x144>
     728:	ldr	r1, [fp, #-12]
     72c:	ldr	r2, [fp, #-16]
     730:	movw	r0, #0
     734:	movt	r0, #0
     738:	ldr	r3, [r0]
     73c:	movw	r0, #0
     740:	movt	r0, #0
     744:	bl	adc <hexdump>
     748:	ldr	r0, [fp, #-8]
     74c:	bl	0 <flatcc_verify_error_string>
     750:	movw	r1, #0
     754:	movt	r1, #0
     758:	str	r0, [sp, #44]	; 0x2c
     75c:	mov	r0, r1
     760:	ldr	r1, [sp, #44]	; 0x2c
     764:	bl	0 <printf>
     768:	b	87c <test_type_aliases+0x254>
     76c:	ldr	r0, [fp, #-12]
     770:	bl	cb4 <MyGame_Example_TypeAliases_as_root>
     774:	str	r0, [fp, #-20]	; 0xffffffec
     778:	ldr	r0, [fp, #-20]	; 0xffffffec
     77c:	bl	d2c <MyGame_Example_TypeAliases_i8>
     780:	sxtb	r0, r0
     784:	cmn	r0, #128	; 0x80
     788:	beq	790 <test_type_aliases+0x168>
     78c:	b	890 <test_type_aliases+0x268>
     790:	ldr	r0, [fp, #-20]	; 0xffffffec
     794:	bl	e14 <MyGame_Example_TypeAliases_i16>
     798:	sxth	r0, r0
     79c:	cmn	r0, #32768	; 0x8000
     7a0:	beq	7a8 <test_type_aliases+0x180>
     7a4:	b	890 <test_type_aliases+0x268>
     7a8:	ldr	r0, [fp, #-20]	; 0xffffffec
     7ac:	bl	efc <MyGame_Example_TypeAliases_i32>
     7b0:	cmp	r0, #-2147483648	; 0x80000000
     7b4:	beq	7bc <test_type_aliases+0x194>
     7b8:	b	890 <test_type_aliases+0x268>
     7bc:	ldr	r0, [fp, #-20]	; 0xffffffec
     7c0:	bl	fdc <MyGame_Example_TypeAliases_i64>
     7c4:	eor	r1, r1, #-2147483648	; 0x80000000
     7c8:	orr	r0, r0, r1
     7cc:	cmp	r0, #0
     7d0:	beq	7dc <test_type_aliases+0x1b4>
     7d4:	b	7d8 <test_type_aliases+0x1b0>
     7d8:	b	890 <test_type_aliases+0x268>
     7dc:	ldr	r0, [fp, #-20]	; 0xffffffec
     7e0:	bl	10d8 <MyGame_Example_TypeAliases_u8>
     7e4:	and	r0, r0, #255	; 0xff
     7e8:	cmp	r0, #255	; 0xff
     7ec:	beq	7f4 <test_type_aliases+0x1cc>
     7f0:	b	890 <test_type_aliases+0x268>
     7f4:	ldr	r0, [fp, #-20]	; 0xffffffec
     7f8:	bl	11c0 <MyGame_Example_TypeAliases_u16>
     7fc:	uxth	r0, r0
     800:	movw	r1, #65535	; 0xffff
     804:	cmp	r0, r1
     808:	beq	810 <test_type_aliases+0x1e8>
     80c:	b	890 <test_type_aliases+0x268>
     810:	ldr	r0, [fp, #-20]	; 0xffffffec
     814:	bl	12a8 <MyGame_Example_TypeAliases_u32>
     818:	cmn	r0, #1
     81c:	beq	824 <test_type_aliases+0x1fc>
     820:	b	890 <test_type_aliases+0x268>
     824:	ldr	r0, [fp, #-20]	; 0xffffffec
     828:	bl	1388 <MyGame_Example_TypeAliases_u64>
     82c:	and	r0, r0, r1
     830:	cmn	r0, #1
     834:	beq	840 <test_type_aliases+0x218>
     838:	b	83c <test_type_aliases+0x214>
     83c:	b	890 <test_type_aliases+0x268>
     840:	ldr	r0, [fp, #-20]	; 0xffffffec
     844:	bl	1484 <MyGame_Example_TypeAliases_f32>
     848:	vldr	s2, [pc, #100]	; 8b4 <test_type_aliases+0x28c>
     84c:	vcmp.f32	s0, s2
     850:	vmrs	APSR_nzcv, fpscr
     854:	beq	85c <test_type_aliases+0x234>
     858:	b	890 <test_type_aliases+0x268>
     85c:	ldr	r0, [fp, #-20]	; 0xffffffec
     860:	bl	1568 <MyGame_Example_TypeAliases_f64>
     864:	vldr	d16, [pc, #60]	; 8a8 <test_type_aliases+0x280>
     868:	vcmp.f64	d0, d16
     86c:	vmrs	APSR_nzcv, fpscr
     870:	beq	878 <test_type_aliases+0x250>
     874:	b	890 <test_type_aliases+0x268>
     878:	b	87c <test_type_aliases+0x254>
     87c:	ldr	r0, [fp, #-12]
     880:	bl	0 <flatcc_builder_aligned_free>
     884:	ldr	r0, [fp, #-8]
     888:	mov	sp, fp
     88c:	pop	{fp, pc}
     890:	mvn	r0, #0
     894:	str	r0, [fp, #-8]
     898:	movw	r0, #0
     89c:	movt	r0, #0
     8a0:	bl	0 <printf>
     8a4:	b	87c <test_type_aliases+0x254>
     8a8:	.word	0x66666666
     8ac:	.word	0x40026666
     8b0:	.word	0x80000000
     8b4:	.word	0x40133333

000008b8 <flatbuffers_uint8_vec_create>:
     8b8:	push	{fp, lr}
     8bc:	mov	fp, sp
     8c0:	sub	sp, sp, #24
     8c4:	str	r0, [fp, #-4]
     8c8:	str	r1, [fp, #-8]
     8cc:	str	r2, [sp, #12]
     8d0:	ldr	r0, [fp, #-4]
     8d4:	ldr	r1, [fp, #-8]
     8d8:	ldr	r2, [sp, #12]
     8dc:	movw	r3, #1
     8e0:	movw	ip, #1
     8e4:	uxth	ip, ip
     8e8:	str	ip, [sp]
     8ec:	mvn	ip, #0
     8f0:	str	ip, [sp, #4]
     8f4:	bl	0 <flatcc_builder_create_vector>
     8f8:	mov	sp, fp
     8fc:	pop	{fp, pc}

00000900 <flatbuffers_double_vec_create>:
     900:	push	{fp, lr}
     904:	mov	fp, sp
     908:	sub	sp, sp, #24
     90c:	ldr	r3, [pc, #64]	; 954 <flatbuffers_double_vec_create+0x54>
     910:	str	r0, [fp, #-4]
     914:	str	r1, [fp, #-8]
     918:	str	r2, [sp, #12]
     91c:	ldr	r0, [fp, #-4]
     920:	ldr	r1, [fp, #-8]
     924:	ldr	r2, [sp, #12]
     928:	movw	ip, #8
     92c:	str	r3, [sp, #8]
     930:	mov	r3, ip
     934:	movw	ip, #8
     938:	uxth	ip, ip
     93c:	str	ip, [sp]
     940:	ldr	ip, [sp, #8]
     944:	str	ip, [sp, #4]
     948:	bl	0 <flatcc_builder_create_vector>
     94c:	mov	sp, fp
     950:	pop	{fp, pc}
     954:	.word	0x1fffffff

00000958 <MyGame_Example_TypeAliases_create_as_root>:
     958:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
     95c:	add	fp, sp, #28
     960:	sub	sp, sp, #132	; 0x84
     964:	ldr	ip, [fp, #36]	; 0x24
     968:	ldr	lr, [fp, #32]
     96c:	ldr	r4, [fp, #28]
     970:	ldr	r5, [fp, #24]
     974:	ldr	r6, [fp, #44]	; 0x2c
     978:	ldr	r7, [fp, #40]	; 0x28
     97c:	ldr	r8, [fp, #16]
     980:	ldr	r9, [fp, #12]
     984:	ldr	sl, [fp, #8]
     988:	str	r0, [fp, #-36]	; 0xffffffdc
     98c:	strb	r1, [fp, #-37]	; 0xffffffdb
     990:	strb	r2, [fp, #-38]	; 0xffffffda
     994:	strh	r3, [fp, #-40]	; 0xffffffd8
     998:	strh	sl, [fp, #-42]	; 0xffffffd6
     99c:	str	r4, [fp, #-52]	; 0xffffffcc
     9a0:	str	r5, [fp, #-56]	; 0xffffffc8
     9a4:	str	ip, [fp, #-60]	; 0xffffffc4
     9a8:	str	lr, [fp, #-64]	; 0xffffffc0
     9ac:	vstr	s0, [fp, #-68]	; 0xffffffbc
     9b0:	vstr	d1, [sp, #80]	; 0x50
     9b4:	ldr	r0, [fp, #-36]	; 0xffffffdc
     9b8:	movw	r1, #0
     9bc:	movt	r1, #0
     9c0:	str	r6, [sp, #76]	; 0x4c
     9c4:	str	r7, [sp, #72]	; 0x48
     9c8:	str	r8, [sp, #68]	; 0x44
     9cc:	str	r9, [sp, #64]	; 0x40
     9d0:	bl	17c0 <flatbuffers_buffer_start>
     9d4:	cmp	r0, #0
     9d8:	beq	9e8 <MyGame_Example_TypeAliases_create_as_root+0x90>
     9dc:	movw	r0, #0
     9e0:	str	r0, [fp, #-32]	; 0xffffffe0
     9e4:	b	a98 <MyGame_Example_TypeAliases_create_as_root+0x140>
     9e8:	ldr	r0, [fp, #-36]	; 0xffffffdc
     9ec:	mov	r1, r0
     9f0:	ldrb	r2, [fp, #-37]	; 0xffffffdb
     9f4:	ldrb	r3, [fp, #-38]	; 0xffffffda
     9f8:	ldrh	ip, [fp, #-40]	; 0xffffffd8
     9fc:	ldrh	lr, [fp, #-42]	; 0xffffffd6
     a00:	ldr	r4, [fp, #12]
     a04:	ldr	r5, [fp, #16]
     a08:	ldr	r6, [fp, #-56]	; 0xffffffc8
     a0c:	ldr	r7, [fp, #-52]	; 0xffffffcc
     a10:	ldr	r8, [fp, #-64]	; 0xffffffc0
     a14:	ldr	r9, [fp, #-60]	; 0xffffffc4
     a18:	vldr	s0, [fp, #-68]	; 0xffffffbc
     a1c:	vldr	d1, [sp, #80]	; 0x50
     a20:	ldr	sl, [fp, #40]	; 0x28
     a24:	str	r0, [sp, #60]	; 0x3c
     a28:	ldr	r0, [fp, #44]	; 0x2c
     a2c:	str	r0, [sp, #56]	; 0x38
     a30:	mov	r0, sp
     a34:	str	r0, [sp, #52]	; 0x34
     a38:	ldr	r0, [sp, #56]	; 0x38
     a3c:	str	r1, [sp, #48]	; 0x30
     a40:	ldr	r1, [sp, #52]	; 0x34
     a44:	str	r0, [r1, #36]	; 0x24
     a48:	str	sl, [r1, #32]
     a4c:	str	r9, [r1, #28]
     a50:	str	r8, [r1, #24]
     a54:	str	r7, [r1, #20]
     a58:	str	r6, [r1, #16]
     a5c:	str	r5, [r1, #8]
     a60:	str	r4, [r1, #4]
     a64:	uxth	lr, lr
     a68:	str	lr, [r1]
     a6c:	sxtb	r1, r2
     a70:	uxtb	r2, r3
     a74:	sxth	r3, ip
     a78:	ldr	r0, [sp, #60]	; 0x3c
     a7c:	bl	f578 <MyGame_Example_TypeAliases_create>
     a80:	ldr	r1, [sp, #48]	; 0x30
     a84:	str	r0, [sp, #44]	; 0x2c
     a88:	mov	r0, r1
     a8c:	ldr	r1, [sp, #44]	; 0x2c
     a90:	bl	18c4 <flatbuffers_buffer_end>
     a94:	str	r0, [fp, #-32]	; 0xffffffe0
     a98:	ldr	r0, [fp, #-32]	; 0xffffffe0
     a9c:	sub	sp, fp, #28
     aa0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

00000aa4 <MyGame_Example_TypeAliases_verify_as_root>:
     aa4:	push	{fp, lr}
     aa8:	mov	fp, sp
     aac:	sub	sp, sp, #8
     ab0:	str	r0, [sp, #4]
     ab4:	str	r1, [sp]
     ab8:	ldr	r0, [sp, #4]
     abc:	ldr	r1, [sp]
     ac0:	movw	r2, #0
     ac4:	movt	r2, #0
     ac8:	movw	r3, #0
     acc:	movt	r3, #0
     ad0:	bl	0 <flatcc_verify_table_as_root>
     ad4:	mov	sp, fp
     ad8:	pop	{fp, pc}

00000adc <hexdump>:
     adc:	push	{fp, lr}
     ae0:	mov	fp, sp
     ae4:	sub	sp, sp, #48	; 0x30
     ae8:	str	r0, [fp, #-4]
     aec:	str	r1, [fp, #-8]
     af0:	str	r2, [fp, #-12]
     af4:	str	r3, [fp, #-16]
     af8:	ldr	r0, [fp, #-8]
     afc:	str	r0, [sp, #4]
     b00:	ldr	r0, [fp, #-4]
     b04:	movw	r1, #0
     b08:	cmp	r0, r1
     b0c:	beq	b24 <hexdump+0x48>
     b10:	ldr	r0, [fp, #-16]
     b14:	ldr	r2, [fp, #-4]
     b18:	movw	r1, #0
     b1c:	movt	r1, #0
     b20:	bl	0 <fprintf>
     b24:	movw	r0, #0
     b28:	str	r0, [fp, #-20]	; 0xffffffec
     b2c:	ldr	r0, [fp, #-20]	; 0xffffffec
     b30:	ldr	r1, [fp, #-12]
     b34:	cmp	r0, r1
     b38:	bcs	c64 <hexdump+0x188>
     b3c:	ldr	r0, [fp, #-20]	; 0xffffffec
     b40:	and	r0, r0, #15
     b44:	cmp	r0, #0
     b48:	bne	b84 <hexdump+0xa8>
     b4c:	ldr	r0, [fp, #-20]	; 0xffffffec
     b50:	cmp	r0, #0
     b54:	beq	b6c <hexdump+0x90>
     b58:	add	r2, sp, #11
     b5c:	ldr	r0, [fp, #-16]
     b60:	movw	r1, #0
     b64:	movt	r1, #0
     b68:	bl	0 <fprintf>
     b6c:	ldr	r0, [fp, #-16]
     b70:	ldr	r2, [fp, #-20]	; 0xffffffec
     b74:	movw	r1, #0
     b78:	movt	r1, #0
     b7c:	bl	0 <fprintf>
     b80:	b	ba8 <hexdump+0xcc>
     b84:	ldr	r0, [fp, #-20]	; 0xffffffec
     b88:	and	r0, r0, #7
     b8c:	cmp	r0, #0
     b90:	bne	ba4 <hexdump+0xc8>
     b94:	ldr	r0, [fp, #-16]
     b98:	movw	r1, #0
     b9c:	movt	r1, #0
     ba0:	bl	0 <fprintf>
     ba4:	b	ba8 <hexdump+0xcc>
     ba8:	ldr	r0, [fp, #-16]
     bac:	ldr	r1, [sp, #4]
     bb0:	ldr	r2, [fp, #-20]	; 0xffffffec
     bb4:	add	r1, r1, r2
     bb8:	ldrb	r2, [r1]
     bbc:	movw	r1, #0
     bc0:	movt	r1, #0
     bc4:	bl	0 <fprintf>
     bc8:	ldr	r1, [sp, #4]
     bcc:	ldr	r2, [fp, #-20]	; 0xffffffec
     bd0:	add	r1, r1, r2
     bd4:	ldrb	r1, [r1]
     bd8:	cmp	r1, #32
     bdc:	blt	bf8 <hexdump+0x11c>
     be0:	ldr	r0, [sp, #4]
     be4:	ldr	r1, [fp, #-20]	; 0xffffffec
     be8:	add	r0, r0, r1
     bec:	ldrb	r0, [r0]
     bf0:	cmp	r0, #126	; 0x7e
     bf4:	ble	c14 <hexdump+0x138>
     bf8:	ldr	r0, [fp, #-20]	; 0xffffffec
     bfc:	and	r0, r0, #15
     c00:	add	r1, sp, #11
     c04:	add	r0, r1, r0
     c08:	movw	r1, #46	; 0x2e
     c0c:	strb	r1, [r0]
     c10:	b	c38 <hexdump+0x15c>
     c14:	ldr	r0, [sp, #4]
     c18:	ldr	r1, [fp, #-20]	; 0xffffffec
     c1c:	add	r0, r0, r1
     c20:	ldrb	r0, [r0]
     c24:	ldr	r1, [fp, #-20]	; 0xffffffec
     c28:	and	r1, r1, #15
     c2c:	add	r2, sp, #11
     c30:	add	r1, r2, r1
     c34:	strb	r0, [r1]
     c38:	ldr	r0, [fp, #-20]	; 0xffffffec
     c3c:	and	r0, r0, #15
     c40:	add	r0, r0, #1
     c44:	add	r1, sp, #11
     c48:	add	r0, r1, r0
     c4c:	movw	r1, #0
     c50:	strb	r1, [r0]
     c54:	ldr	r0, [fp, #-20]	; 0xffffffec
     c58:	add	r0, r0, #1
     c5c:	str	r0, [fp, #-20]	; 0xffffffec
     c60:	b	b2c <hexdump+0x50>
     c64:	b	c68 <hexdump+0x18c>
     c68:	ldr	r0, [fp, #-20]	; 0xffffffec
     c6c:	and	r0, r0, #15
     c70:	cmp	r0, #0
     c74:	beq	c98 <hexdump+0x1bc>
     c78:	ldr	r0, [fp, #-16]
     c7c:	movw	r1, #0
     c80:	movt	r1, #0
     c84:	bl	0 <fprintf>
     c88:	ldr	r1, [fp, #-20]	; 0xffffffec
     c8c:	add	r1, r1, #1
     c90:	str	r1, [fp, #-20]	; 0xffffffec
     c94:	b	c68 <hexdump+0x18c>
     c98:	add	r2, sp, #11
     c9c:	ldr	r0, [fp, #-16]
     ca0:	movw	r1, #0
     ca4:	movt	r1, #0
     ca8:	bl	0 <fprintf>
     cac:	mov	sp, fp
     cb0:	pop	{fp, pc}

00000cb4 <MyGame_Example_TypeAliases_as_root>:
     cb4:	push	{fp, lr}
     cb8:	mov	fp, sp
     cbc:	sub	sp, sp, #16
     cc0:	str	r0, [fp, #-4]
     cc4:	movw	r0, #0
     cc8:	movt	r0, #0
     ccc:	str	r0, [sp, #8]
     cd0:	ldr	r0, [fp, #-4]
     cd4:	movw	r1, #0
     cd8:	cmp	r0, r1
     cdc:	beq	cf4 <MyGame_Example_TypeAliases_as_root+0x40>
     ce0:	ldr	r0, [fp, #-4]
     ce4:	ldr	r1, [sp, #8]
     ce8:	bl	25b8 <flatbuffers_has_identifier>
     cec:	cmp	r0, #0
     cf0:	bne	d00 <MyGame_Example_TypeAliases_as_root+0x4c>
     cf4:	movw	r0, #0
     cf8:	str	r0, [sp, #4]
     cfc:	b	d20 <MyGame_Example_TypeAliases_as_root+0x6c>
     d00:	ldr	r0, [fp, #-4]
     d04:	ldr	r1, [fp, #-4]
     d08:	str	r0, [sp]
     d0c:	mov	r0, r1
     d10:	bl	f490 <__flatbuffers_uoffset_read_from_pe>
     d14:	ldr	r1, [sp]
     d18:	add	r0, r1, r0
     d1c:	str	r0, [sp, #4]
     d20:	ldr	r0, [sp, #4]
     d24:	mov	sp, fp
     d28:	pop	{fp, pc}

00000d2c <MyGame_Example_TypeAliases_i8>:
     d2c:	push	{fp, lr}
     d30:	mov	fp, sp
     d34:	sub	sp, sp, #24
     d38:	str	r0, [fp, #-4]
     d3c:	movw	r0, #0
     d40:	strh	r0, [fp, #-6]
     d44:	ldr	r0, [fp, #-4]
     d48:	movw	r1, #0
     d4c:	cmp	r0, r1
     d50:	beq	d5c <MyGame_Example_TypeAliases_i8+0x30>
     d54:	b	d58 <MyGame_Example_TypeAliases_i8+0x2c>
     d58:	b	d7c <MyGame_Example_TypeAliases_i8+0x50>
     d5c:	movw	r0, #0
     d60:	movt	r0, #0
     d64:	movw	r1, #0
     d68:	movt	r1, #0
     d6c:	movw	r2, #749	; 0x2ed
     d70:	movw	r3, #0
     d74:	movt	r3, #0
     d78:	bl	0 <__assert_fail>
     d7c:	mov	r0, #0
     d80:	strh	r0, [fp, #-8]
     d84:	ldr	r0, [fp, #-4]
     d88:	str	r0, [sp, #8]
     d8c:	bl	f4c8 <__flatbuffers_soffset_read_from_pe>
     d90:	ldr	r1, [sp, #8]
     d94:	sub	r0, r1, r0
     d98:	str	r0, [sp, #12]
     d9c:	ldr	r0, [sp, #12]
     da0:	bl	f4ec <__flatbuffers_voffset_read_from_pe>
     da4:	ldrh	r1, [fp, #-8]
     da8:	add	r1, r1, #3
     dac:	lsl	r1, r1, #1
     db0:	cmp	r0, r1
     db4:	bcc	dd0 <MyGame_Example_TypeAliases_i8+0xa4>
     db8:	ldr	r0, [sp, #12]
     dbc:	ldrh	r1, [fp, #-8]
     dc0:	add	r0, r0, r1, lsl #1
     dc4:	add	r0, r0, #4
     dc8:	bl	f4ec <__flatbuffers_voffset_read_from_pe>
     dcc:	strh	r0, [fp, #-6]
     dd0:	ldrh	r0, [fp, #-6]
     dd4:	cmp	r0, #0
     dd8:	beq	df8 <MyGame_Example_TypeAliases_i8+0xcc>
     ddc:	ldr	r0, [fp, #-4]
     de0:	ldrh	r1, [fp, #-6]
     de4:	add	r0, r0, r1
     de8:	bl	1036c <flatbuffers_int8_read_from_pe>
     dec:	sxtb	r0, r0
     df0:	str	r0, [sp, #4]
     df4:	b	e04 <MyGame_Example_TypeAliases_i8+0xd8>
     df8:	movw	r0, #0
     dfc:	str	r0, [sp, #4]
     e00:	b	e04 <MyGame_Example_TypeAliases_i8+0xd8>
     e04:	ldr	r0, [sp, #4]
     e08:	sxtb	r0, r0
     e0c:	mov	sp, fp
     e10:	pop	{fp, pc}

00000e14 <MyGame_Example_TypeAliases_i16>:
     e14:	push	{fp, lr}
     e18:	mov	fp, sp
     e1c:	sub	sp, sp, #24
     e20:	str	r0, [fp, #-4]
     e24:	movw	r0, #0
     e28:	strh	r0, [fp, #-6]
     e2c:	ldr	r0, [fp, #-4]
     e30:	movw	r1, #0
     e34:	cmp	r0, r1
     e38:	beq	e44 <MyGame_Example_TypeAliases_i16+0x30>
     e3c:	b	e40 <MyGame_Example_TypeAliases_i16+0x2c>
     e40:	b	e64 <MyGame_Example_TypeAliases_i16+0x50>
     e44:	movw	r0, #0
     e48:	movt	r0, #0
     e4c:	movw	r1, #0
     e50:	movt	r1, #0
     e54:	movw	r2, #751	; 0x2ef
     e58:	movw	r3, #0
     e5c:	movt	r3, #0
     e60:	bl	0 <__assert_fail>
     e64:	mov	r0, #2
     e68:	strh	r0, [fp, #-8]
     e6c:	ldr	r0, [fp, #-4]
     e70:	str	r0, [sp, #8]
     e74:	bl	f4c8 <__flatbuffers_soffset_read_from_pe>
     e78:	ldr	r1, [sp, #8]
     e7c:	sub	r0, r1, r0
     e80:	str	r0, [sp, #12]
     e84:	ldr	r0, [sp, #12]
     e88:	bl	f4ec <__flatbuffers_voffset_read_from_pe>
     e8c:	ldrh	r1, [fp, #-8]
     e90:	add	r1, r1, #3
     e94:	lsl	r1, r1, #1
     e98:	cmp	r0, r1
     e9c:	bcc	eb8 <MyGame_Example_TypeAliases_i16+0xa4>
     ea0:	ldr	r0, [sp, #12]
     ea4:	ldrh	r1, [fp, #-8]
     ea8:	add	r0, r0, r1, lsl #1
     eac:	add	r0, r0, #4
     eb0:	bl	f4ec <__flatbuffers_voffset_read_from_pe>
     eb4:	strh	r0, [fp, #-6]
     eb8:	ldrh	r0, [fp, #-6]
     ebc:	cmp	r0, #0
     ec0:	beq	ee0 <MyGame_Example_TypeAliases_i16+0xcc>
     ec4:	ldr	r0, [fp, #-4]
     ec8:	ldrh	r1, [fp, #-6]
     ecc:	add	r0, r0, r1
     ed0:	bl	f514 <flatbuffers_int16_read_from_pe>
     ed4:	sxth	r0, r0
     ed8:	str	r0, [sp, #4]
     edc:	b	eec <MyGame_Example_TypeAliases_i16+0xd8>
     ee0:	movw	r0, #0
     ee4:	str	r0, [sp, #4]
     ee8:	b	eec <MyGame_Example_TypeAliases_i16+0xd8>
     eec:	ldr	r0, [sp, #4]
     ef0:	sxth	r0, r0
     ef4:	mov	sp, fp
     ef8:	pop	{fp, pc}

00000efc <MyGame_Example_TypeAliases_i32>:
     efc:	push	{fp, lr}
     f00:	mov	fp, sp
     f04:	sub	sp, sp, #24
     f08:	str	r0, [fp, #-4]
     f0c:	movw	r0, #0
     f10:	strh	r0, [fp, #-6]
     f14:	ldr	r0, [fp, #-4]
     f18:	movw	r1, #0
     f1c:	cmp	r0, r1
     f20:	beq	f2c <MyGame_Example_TypeAliases_i32+0x30>
     f24:	b	f28 <MyGame_Example_TypeAliases_i32+0x2c>
     f28:	b	f4c <MyGame_Example_TypeAliases_i32+0x50>
     f2c:	movw	r0, #0
     f30:	movt	r0, #0
     f34:	movw	r1, #0
     f38:	movt	r1, #0
     f3c:	movw	r2, #753	; 0x2f1
     f40:	movw	r3, #0
     f44:	movt	r3, #0
     f48:	bl	0 <__assert_fail>
     f4c:	mov	r0, #4
     f50:	strh	r0, [fp, #-8]
     f54:	ldr	r0, [fp, #-4]
     f58:	str	r0, [sp, #8]
     f5c:	bl	f4c8 <__flatbuffers_soffset_read_from_pe>
     f60:	ldr	r1, [sp, #8]
     f64:	sub	r0, r1, r0
     f68:	str	r0, [sp, #12]
     f6c:	ldr	r0, [sp, #12]
     f70:	bl	f4ec <__flatbuffers_voffset_read_from_pe>
     f74:	ldrh	r1, [fp, #-8]
     f78:	add	r1, r1, #3
     f7c:	lsl	r1, r1, #1
     f80:	cmp	r0, r1
     f84:	bcc	fa0 <MyGame_Example_TypeAliases_i32+0xa4>
     f88:	ldr	r0, [sp, #12]
     f8c:	ldrh	r1, [fp, #-8]
     f90:	add	r0, r0, r1, lsl #1
     f94:	add	r0, r0, #4
     f98:	bl	f4ec <__flatbuffers_voffset_read_from_pe>
     f9c:	strh	r0, [fp, #-6]
     fa0:	ldrh	r0, [fp, #-6]
     fa4:	cmp	r0, #0
     fa8:	beq	fc4 <MyGame_Example_TypeAliases_i32+0xc8>
     fac:	ldr	r0, [fp, #-4]
     fb0:	ldrh	r1, [fp, #-6]
     fb4:	add	r0, r0, r1
     fb8:	bl	103a8 <flatbuffers_int32_read_from_pe>
     fbc:	str	r0, [sp, #4]
     fc0:	b	fd0 <MyGame_Example_TypeAliases_i32+0xd4>
     fc4:	movw	r0, #0
     fc8:	str	r0, [sp, #4]
     fcc:	b	fd0 <MyGame_Example_TypeAliases_i32+0xd4>
     fd0:	ldr	r0, [sp, #4]
     fd4:	mov	sp, fp
     fd8:	pop	{fp, pc}

00000fdc <MyGame_Example_TypeAliases_i64>:
     fdc:	push	{fp, lr}
     fe0:	mov	fp, sp
     fe4:	sub	sp, sp, #32
     fe8:	str	r0, [fp, #-4]
     fec:	movw	r0, #0
     ff0:	strh	r0, [fp, #-6]
     ff4:	ldr	r0, [fp, #-4]
     ff8:	movw	r1, #0
     ffc:	cmp	r0, r1
    1000:	beq	100c <MyGame_Example_TypeAliases_i64+0x30>
    1004:	b	1008 <MyGame_Example_TypeAliases_i64+0x2c>
    1008:	b	102c <MyGame_Example_TypeAliases_i64+0x50>
    100c:	movw	r0, #0
    1010:	movt	r0, #0
    1014:	movw	r1, #0
    1018:	movt	r1, #0
    101c:	movw	r2, #755	; 0x2f3
    1020:	movw	r3, #0
    1024:	movt	r3, #0
    1028:	bl	0 <__assert_fail>
    102c:	mov	r0, #6
    1030:	strh	r0, [fp, #-8]
    1034:	ldr	r0, [fp, #-4]
    1038:	str	r0, [sp, #16]
    103c:	bl	f4c8 <__flatbuffers_soffset_read_from_pe>
    1040:	ldr	r1, [sp, #16]
    1044:	sub	r0, r1, r0
    1048:	str	r0, [fp, #-12]
    104c:	ldr	r0, [fp, #-12]
    1050:	bl	f4ec <__flatbuffers_voffset_read_from_pe>
    1054:	ldrh	r1, [fp, #-8]
    1058:	add	r1, r1, #3
    105c:	lsl	r1, r1, #1
    1060:	cmp	r0, r1
    1064:	bcc	1080 <MyGame_Example_TypeAliases_i64+0xa4>
    1068:	ldr	r0, [fp, #-12]
    106c:	ldrh	r1, [fp, #-8]
    1070:	add	r0, r0, r1, lsl #1
    1074:	add	r0, r0, #4
    1078:	bl	f4ec <__flatbuffers_voffset_read_from_pe>
    107c:	strh	r0, [fp, #-6]
    1080:	ldrh	r0, [fp, #-6]
    1084:	cmp	r0, #0
    1088:	beq	10a8 <MyGame_Example_TypeAliases_i64+0xcc>
    108c:	ldr	r0, [fp, #-4]
    1090:	ldrh	r1, [fp, #-6]
    1094:	add	r0, r0, r1
    1098:	bl	103e0 <flatbuffers_int64_read_from_pe>
    109c:	str	r0, [sp, #12]
    10a0:	str	r1, [sp, #8]
    10a4:	b	10bc <MyGame_Example_TypeAliases_i64+0xe0>
    10a8:	mov	r0, #0
    10ac:	mov	r1, r0
    10b0:	str	r1, [sp, #12]
    10b4:	str	r0, [sp, #8]
    10b8:	b	10bc <MyGame_Example_TypeAliases_i64+0xe0>
    10bc:	ldr	r0, [sp, #8]
    10c0:	ldr	r1, [sp, #12]
    10c4:	str	r0, [sp, #4]
    10c8:	mov	r0, r1
    10cc:	ldr	r1, [sp, #4]
    10d0:	mov	sp, fp
    10d4:	pop	{fp, pc}

000010d8 <MyGame_Example_TypeAliases_u8>:
    10d8:	push	{fp, lr}
    10dc:	mov	fp, sp
    10e0:	sub	sp, sp, #24
    10e4:	str	r0, [fp, #-4]
    10e8:	movw	r0, #0
    10ec:	strh	r0, [fp, #-6]
    10f0:	ldr	r0, [fp, #-4]
    10f4:	movw	r1, #0
    10f8:	cmp	r0, r1
    10fc:	beq	1108 <MyGame_Example_TypeAliases_u8+0x30>
    1100:	b	1104 <MyGame_Example_TypeAliases_u8+0x2c>
    1104:	b	1128 <MyGame_Example_TypeAliases_u8+0x50>
    1108:	movw	r0, #0
    110c:	movt	r0, #0
    1110:	movw	r1, #0
    1114:	movt	r1, #0
    1118:	movw	r2, #750	; 0x2ee
    111c:	movw	r3, #0
    1120:	movt	r3, #0
    1124:	bl	0 <__assert_fail>
    1128:	mov	r0, #1
    112c:	strh	r0, [fp, #-8]
    1130:	ldr	r0, [fp, #-4]
    1134:	str	r0, [sp, #8]
    1138:	bl	f4c8 <__flatbuffers_soffset_read_from_pe>
    113c:	ldr	r1, [sp, #8]
    1140:	sub	r0, r1, r0
    1144:	str	r0, [sp, #12]
    1148:	ldr	r0, [sp, #12]
    114c:	bl	f4ec <__flatbuffers_voffset_read_from_pe>
    1150:	ldrh	r1, [fp, #-8]
    1154:	add	r1, r1, #3
    1158:	lsl	r1, r1, #1
    115c:	cmp	r0, r1
    1160:	bcc	117c <MyGame_Example_TypeAliases_u8+0xa4>
    1164:	ldr	r0, [sp, #12]
    1168:	ldrh	r1, [fp, #-8]
    116c:	add	r0, r0, r1, lsl #1
    1170:	add	r0, r0, #4
    1174:	bl	f4ec <__flatbuffers_voffset_read_from_pe>
    1178:	strh	r0, [fp, #-6]
    117c:	ldrh	r0, [fp, #-6]
    1180:	cmp	r0, #0
    1184:	beq	11a4 <MyGame_Example_TypeAliases_u8+0xcc>
    1188:	ldr	r0, [fp, #-4]
    118c:	ldrh	r1, [fp, #-6]
    1190:	add	r0, r0, r1
    1194:	bl	10430 <flatbuffers_uint8_read_from_pe>
    1198:	and	r0, r0, #255	; 0xff
    119c:	str	r0, [sp, #4]
    11a0:	b	11b0 <MyGame_Example_TypeAliases_u8+0xd8>
    11a4:	movw	r0, #0
    11a8:	str	r0, [sp, #4]
    11ac:	b	11b0 <MyGame_Example_TypeAliases_u8+0xd8>
    11b0:	ldr	r0, [sp, #4]
    11b4:	and	r0, r0, #255	; 0xff
    11b8:	mov	sp, fp
    11bc:	pop	{fp, pc}

000011c0 <MyGame_Example_TypeAliases_u16>:
    11c0:	push	{fp, lr}
    11c4:	mov	fp, sp
    11c8:	sub	sp, sp, #24
    11cc:	str	r0, [fp, #-4]
    11d0:	movw	r0, #0
    11d4:	strh	r0, [fp, #-6]
    11d8:	ldr	r0, [fp, #-4]
    11dc:	movw	r1, #0
    11e0:	cmp	r0, r1
    11e4:	beq	11f0 <MyGame_Example_TypeAliases_u16+0x30>
    11e8:	b	11ec <MyGame_Example_TypeAliases_u16+0x2c>
    11ec:	b	1210 <MyGame_Example_TypeAliases_u16+0x50>
    11f0:	movw	r0, #0
    11f4:	movt	r0, #0
    11f8:	movw	r1, #0
    11fc:	movt	r1, #0
    1200:	movw	r2, #752	; 0x2f0
    1204:	movw	r3, #0
    1208:	movt	r3, #0
    120c:	bl	0 <__assert_fail>
    1210:	mov	r0, #3
    1214:	strh	r0, [fp, #-8]
    1218:	ldr	r0, [fp, #-4]
    121c:	str	r0, [sp, #8]
    1220:	bl	f4c8 <__flatbuffers_soffset_read_from_pe>
    1224:	ldr	r1, [sp, #8]
    1228:	sub	r0, r1, r0
    122c:	str	r0, [sp, #12]
    1230:	ldr	r0, [sp, #12]
    1234:	bl	f4ec <__flatbuffers_voffset_read_from_pe>
    1238:	ldrh	r1, [fp, #-8]
    123c:	add	r1, r1, #3
    1240:	lsl	r1, r1, #1
    1244:	cmp	r0, r1
    1248:	bcc	1264 <MyGame_Example_TypeAliases_u16+0xa4>
    124c:	ldr	r0, [sp, #12]
    1250:	ldrh	r1, [fp, #-8]
    1254:	add	r0, r0, r1, lsl #1
    1258:	add	r0, r0, #4
    125c:	bl	f4ec <__flatbuffers_voffset_read_from_pe>
    1260:	strh	r0, [fp, #-6]
    1264:	ldrh	r0, [fp, #-6]
    1268:	cmp	r0, #0
    126c:	beq	128c <MyGame_Example_TypeAliases_u16+0xcc>
    1270:	ldr	r0, [fp, #-4]
    1274:	ldrh	r1, [fp, #-6]
    1278:	add	r0, r0, r1
    127c:	bl	1046c <flatbuffers_uint16_read_from_pe>
    1280:	uxth	r0, r0
    1284:	str	r0, [sp, #4]
    1288:	b	1298 <MyGame_Example_TypeAliases_u16+0xd8>
    128c:	movw	r0, #0
    1290:	str	r0, [sp, #4]
    1294:	b	1298 <MyGame_Example_TypeAliases_u16+0xd8>
    1298:	ldr	r0, [sp, #4]
    129c:	uxth	r0, r0
    12a0:	mov	sp, fp
    12a4:	pop	{fp, pc}

000012a8 <MyGame_Example_TypeAliases_u32>:
    12a8:	push	{fp, lr}
    12ac:	mov	fp, sp
    12b0:	sub	sp, sp, #24
    12b4:	str	r0, [fp, #-4]
    12b8:	movw	r0, #0
    12bc:	strh	r0, [fp, #-6]
    12c0:	ldr	r0, [fp, #-4]
    12c4:	movw	r1, #0
    12c8:	cmp	r0, r1
    12cc:	beq	12d8 <MyGame_Example_TypeAliases_u32+0x30>
    12d0:	b	12d4 <MyGame_Example_TypeAliases_u32+0x2c>
    12d4:	b	12f8 <MyGame_Example_TypeAliases_u32+0x50>
    12d8:	movw	r0, #0
    12dc:	movt	r0, #0
    12e0:	movw	r1, #0
    12e4:	movt	r1, #0
    12e8:	movw	r2, #754	; 0x2f2
    12ec:	movw	r3, #0
    12f0:	movt	r3, #0
    12f4:	bl	0 <__assert_fail>
    12f8:	mov	r0, #5
    12fc:	strh	r0, [fp, #-8]
    1300:	ldr	r0, [fp, #-4]
    1304:	str	r0, [sp, #8]
    1308:	bl	f4c8 <__flatbuffers_soffset_read_from_pe>
    130c:	ldr	r1, [sp, #8]
    1310:	sub	r0, r1, r0
    1314:	str	r0, [sp, #12]
    1318:	ldr	r0, [sp, #12]
    131c:	bl	f4ec <__flatbuffers_voffset_read_from_pe>
    1320:	ldrh	r1, [fp, #-8]
    1324:	add	r1, r1, #3
    1328:	lsl	r1, r1, #1
    132c:	cmp	r0, r1
    1330:	bcc	134c <MyGame_Example_TypeAliases_u32+0xa4>
    1334:	ldr	r0, [sp, #12]
    1338:	ldrh	r1, [fp, #-8]
    133c:	add	r0, r0, r1, lsl #1
    1340:	add	r0, r0, #4
    1344:	bl	f4ec <__flatbuffers_voffset_read_from_pe>
    1348:	strh	r0, [fp, #-6]
    134c:	ldrh	r0, [fp, #-6]
    1350:	cmp	r0, #0
    1354:	beq	1370 <MyGame_Example_TypeAliases_u32+0xc8>
    1358:	ldr	r0, [fp, #-4]
    135c:	ldrh	r1, [fp, #-6]
    1360:	add	r0, r0, r1
    1364:	bl	104a8 <flatbuffers_uint32_read_from_pe>
    1368:	str	r0, [sp, #4]
    136c:	b	137c <MyGame_Example_TypeAliases_u32+0xd4>
    1370:	movw	r0, #0
    1374:	str	r0, [sp, #4]
    1378:	b	137c <MyGame_Example_TypeAliases_u32+0xd4>
    137c:	ldr	r0, [sp, #4]
    1380:	mov	sp, fp
    1384:	pop	{fp, pc}

00001388 <MyGame_Example_TypeAliases_u64>:
    1388:	push	{fp, lr}
    138c:	mov	fp, sp
    1390:	sub	sp, sp, #32
    1394:	str	r0, [fp, #-4]
    1398:	movw	r0, #0
    139c:	strh	r0, [fp, #-6]
    13a0:	ldr	r0, [fp, #-4]
    13a4:	movw	r1, #0
    13a8:	cmp	r0, r1
    13ac:	beq	13b8 <MyGame_Example_TypeAliases_u64+0x30>
    13b0:	b	13b4 <MyGame_Example_TypeAliases_u64+0x2c>
    13b4:	b	13d8 <MyGame_Example_TypeAliases_u64+0x50>
    13b8:	movw	r0, #0
    13bc:	movt	r0, #0
    13c0:	movw	r1, #0
    13c4:	movt	r1, #0
    13c8:	movw	r2, #756	; 0x2f4
    13cc:	movw	r3, #0
    13d0:	movt	r3, #0
    13d4:	bl	0 <__assert_fail>
    13d8:	mov	r0, #7
    13dc:	strh	r0, [fp, #-8]
    13e0:	ldr	r0, [fp, #-4]
    13e4:	str	r0, [sp, #16]
    13e8:	bl	f4c8 <__flatbuffers_soffset_read_from_pe>
    13ec:	ldr	r1, [sp, #16]
    13f0:	sub	r0, r1, r0
    13f4:	str	r0, [fp, #-12]
    13f8:	ldr	r0, [fp, #-12]
    13fc:	bl	f4ec <__flatbuffers_voffset_read_from_pe>
    1400:	ldrh	r1, [fp, #-8]
    1404:	add	r1, r1, #3
    1408:	lsl	r1, r1, #1
    140c:	cmp	r0, r1
    1410:	bcc	142c <MyGame_Example_TypeAliases_u64+0xa4>
    1414:	ldr	r0, [fp, #-12]
    1418:	ldrh	r1, [fp, #-8]
    141c:	add	r0, r0, r1, lsl #1
    1420:	add	r0, r0, #4
    1424:	bl	f4ec <__flatbuffers_voffset_read_from_pe>
    1428:	strh	r0, [fp, #-6]
    142c:	ldrh	r0, [fp, #-6]
    1430:	cmp	r0, #0
    1434:	beq	1454 <MyGame_Example_TypeAliases_u64+0xcc>
    1438:	ldr	r0, [fp, #-4]
    143c:	ldrh	r1, [fp, #-6]
    1440:	add	r0, r0, r1
    1444:	bl	104e0 <flatbuffers_uint64_read_from_pe>
    1448:	str	r0, [sp, #12]
    144c:	str	r1, [sp, #8]
    1450:	b	1468 <MyGame_Example_TypeAliases_u64+0xe0>
    1454:	mov	r0, #0
    1458:	mov	r1, r0
    145c:	str	r1, [sp, #12]
    1460:	str	r0, [sp, #8]
    1464:	b	1468 <MyGame_Example_TypeAliases_u64+0xe0>
    1468:	ldr	r0, [sp, #8]
    146c:	ldr	r1, [sp, #12]
    1470:	str	r0, [sp, #4]
    1474:	mov	r0, r1
    1478:	ldr	r1, [sp, #4]
    147c:	mov	sp, fp
    1480:	pop	{fp, pc}

00001484 <MyGame_Example_TypeAliases_f32>:
    1484:	push	{fp, lr}
    1488:	mov	fp, sp
    148c:	sub	sp, sp, #24
    1490:	str	r0, [fp, #-4]
    1494:	movw	r0, #0
    1498:	strh	r0, [fp, #-6]
    149c:	ldr	r0, [fp, #-4]
    14a0:	movw	r1, #0
    14a4:	cmp	r0, r1
    14a8:	beq	14b4 <MyGame_Example_TypeAliases_f32+0x30>
    14ac:	b	14b0 <MyGame_Example_TypeAliases_f32+0x2c>
    14b0:	b	14d4 <MyGame_Example_TypeAliases_f32+0x50>
    14b4:	movw	r0, #0
    14b8:	movt	r0, #0
    14bc:	movw	r1, #0
    14c0:	movt	r1, #0
    14c4:	movw	r2, #757	; 0x2f5
    14c8:	movw	r3, #0
    14cc:	movt	r3, #0
    14d0:	bl	0 <__assert_fail>
    14d4:	mov	r0, #8
    14d8:	strh	r0, [fp, #-8]
    14dc:	ldr	r0, [fp, #-4]
    14e0:	str	r0, [sp, #8]
    14e4:	bl	f4c8 <__flatbuffers_soffset_read_from_pe>
    14e8:	ldr	r1, [sp, #8]
    14ec:	sub	r0, r1, r0
    14f0:	str	r0, [sp, #12]
    14f4:	ldr	r0, [sp, #12]
    14f8:	bl	f4ec <__flatbuffers_voffset_read_from_pe>
    14fc:	ldrh	r1, [fp, #-8]
    1500:	add	r1, r1, #3
    1504:	lsl	r1, r1, #1
    1508:	cmp	r0, r1
    150c:	bcc	1528 <MyGame_Example_TypeAliases_f32+0xa4>
    1510:	ldr	r0, [sp, #12]
    1514:	ldrh	r1, [fp, #-8]
    1518:	add	r0, r0, r1, lsl #1
    151c:	add	r0, r0, #4
    1520:	bl	f4ec <__flatbuffers_voffset_read_from_pe>
    1524:	strh	r0, [fp, #-6]
    1528:	ldrh	r0, [fp, #-6]
    152c:	cmp	r0, #0
    1530:	beq	154c <MyGame_Example_TypeAliases_f32+0xc8>
    1534:	ldr	r0, [fp, #-4]
    1538:	ldrh	r1, [fp, #-6]
    153c:	add	r0, r0, r1
    1540:	bl	10530 <flatbuffers_float_read_from_pe>
    1544:	vstr	s0, [sp, #4]
    1548:	b	1558 <MyGame_Example_TypeAliases_f32+0xd4>
    154c:	vldr	s0, [pc, #16]	; 1564 <MyGame_Example_TypeAliases_f32+0xe0>
    1550:	vstr	s0, [sp, #4]
    1554:	b	1558 <MyGame_Example_TypeAliases_f32+0xd4>
    1558:	vldr	s0, [sp, #4]
    155c:	mov	sp, fp
    1560:	pop	{fp, pc}
    1564:	.word	0x00000000

00001568 <MyGame_Example_TypeAliases_f64>:
    1568:	push	{fp, lr}
    156c:	mov	fp, sp
    1570:	sub	sp, sp, #24
    1574:	str	r0, [fp, #-4]
    1578:	movw	r0, #0
    157c:	strh	r0, [fp, #-6]
    1580:	ldr	r0, [fp, #-4]
    1584:	movw	r1, #0
    1588:	cmp	r0, r1
    158c:	beq	1598 <MyGame_Example_TypeAliases_f64+0x30>
    1590:	b	1594 <MyGame_Example_TypeAliases_f64+0x2c>
    1594:	b	15b8 <MyGame_Example_TypeAliases_f64+0x50>
    1598:	movw	r0, #0
    159c:	movt	r0, #0
    15a0:	movw	r1, #0
    15a4:	movt	r1, #0
    15a8:	movw	r2, #758	; 0x2f6
    15ac:	movw	r3, #0
    15b0:	movt	r3, #0
    15b4:	bl	0 <__assert_fail>
    15b8:	mov	r0, #9
    15bc:	strh	r0, [fp, #-8]
    15c0:	ldr	r0, [fp, #-4]
    15c4:	str	r0, [sp, #8]
    15c8:	bl	f4c8 <__flatbuffers_soffset_read_from_pe>
    15cc:	ldr	r1, [sp, #8]
    15d0:	sub	r0, r1, r0
    15d4:	str	r0, [sp, #12]
    15d8:	ldr	r0, [sp, #12]
    15dc:	bl	f4ec <__flatbuffers_voffset_read_from_pe>
    15e0:	ldrh	r1, [fp, #-8]
    15e4:	add	r1, r1, #3
    15e8:	lsl	r1, r1, #1
    15ec:	cmp	r0, r1
    15f0:	bcc	160c <MyGame_Example_TypeAliases_f64+0xa4>
    15f4:	ldr	r0, [sp, #12]
    15f8:	ldrh	r1, [fp, #-8]
    15fc:	add	r0, r0, r1, lsl #1
    1600:	add	r0, r0, #4
    1604:	bl	f4ec <__flatbuffers_voffset_read_from_pe>
    1608:	strh	r0, [fp, #-6]
    160c:	ldrh	r0, [fp, #-6]
    1610:	cmp	r0, #0
    1614:	beq	1630 <MyGame_Example_TypeAliases_f64+0xc8>
    1618:	ldr	r0, [fp, #-4]
    161c:	ldrh	r1, [fp, #-6]
    1620:	add	r0, r0, r1
    1624:	bl	10578 <flatbuffers_double_read_from_pe>
    1628:	vstr	d0, [sp]
    162c:	b	163c <MyGame_Example_TypeAliases_f64+0xd4>
    1630:	vldr	d16, [pc, #24]	; 1650 <MyGame_Example_TypeAliases_f64+0xe8>
    1634:	vstr	d16, [sp]
    1638:	b	163c <MyGame_Example_TypeAliases_f64+0xd4>
    163c:	vldr	d16, [sp]
    1640:	vmov.f64	d0, d16
    1644:	mov	sp, fp
    1648:	pop	{fp, pc}
    164c:	nop	{0}
	...

00001658 <test_empty_monster>:
    1658:	push	{fp, lr}
    165c:	mov	fp, sp
    1660:	sub	sp, sp, #48	; 0x30
    1664:	str	r0, [fp, #-8]
    1668:	ldr	r0, [fp, #-8]
    166c:	bl	0 <flatcc_builder_reset>
    1670:	ldr	r1, [fp, #-8]
    1674:	str	r0, [sp, #20]
    1678:	mov	r0, r1
    167c:	movw	r1, #0
    1680:	movt	r1, #0
    1684:	bl	17c0 <flatbuffers_buffer_start>
    1688:	ldr	r1, [fp, #-8]
    168c:	str	r0, [sp, #16]
    1690:	mov	r0, r1
    1694:	bl	17f4 <MyGame_Example_Monster_start>
    1698:	ldr	r1, [fp, #-8]
    169c:	str	r0, [sp, #12]
    16a0:	mov	r0, r1
    16a4:	movw	r1, #0
    16a8:	movt	r1, #0
    16ac:	bl	1818 <MyGame_Example_Monster_name_create_str>
    16b0:	ldr	r1, [fp, #-8]
    16b4:	str	r0, [sp, #8]
    16b8:	mov	r0, r1
    16bc:	bl	1864 <MyGame_Example_Monster_end>
    16c0:	str	r0, [fp, #-16]
    16c4:	ldr	r0, [fp, #-8]
    16c8:	ldr	r1, [fp, #-16]
    16cc:	bl	18c4 <flatbuffers_buffer_end>
    16d0:	ldr	r1, [fp, #-8]
    16d4:	str	r0, [sp, #4]
    16d8:	mov	r0, r1
    16dc:	add	r1, sp, #24
    16e0:	bl	0 <flatcc_builder_finalize_aligned_buffer>
    16e4:	str	r0, [fp, #-20]	; 0xffffffec
    16e8:	ldr	r1, [fp, #-20]	; 0xffffffec
    16ec:	ldr	r2, [sp, #24]
    16f0:	movw	r0, #0
    16f4:	movt	r0, #0
    16f8:	ldr	r3, [r0]
    16fc:	movw	r0, #0
    1700:	movt	r0, #0
    1704:	bl	adc <hexdump>
    1708:	ldr	r0, [fp, #-20]	; 0xffffffec
    170c:	bl	0 <verify_empty_monster>
    1710:	str	r0, [fp, #-12]
    1714:	cmp	r0, #0
    1718:	beq	1720 <test_empty_monster+0xc8>
    171c:	b	17a4 <test_empty_monster+0x14c>
    1720:	ldr	r0, [fp, #-20]	; 0xffffffec
    1724:	ldr	r1, [sp, #24]
    1728:	movw	r2, #0
    172c:	movt	r2, #0
    1730:	bl	18ec <MyGame_Example_Monster_verify_as_root_with_identifier>
    1734:	str	r0, [fp, #-12]
    1738:	cmp	r0, #0
    173c:	beq	176c <test_empty_monster+0x114>
    1740:	ldr	r0, [fp, #-12]
    1744:	bl	0 <flatcc_verify_error_string>
    1748:	movw	r1, #0
    174c:	movt	r1, #0
    1750:	str	r0, [sp]
    1754:	mov	r0, r1
    1758:	ldr	r1, [sp]
    175c:	bl	0 <printf>
    1760:	mvn	r1, #0
    1764:	str	r1, [fp, #-4]
    1768:	b	17b4 <test_empty_monster+0x15c>
    176c:	ldr	r0, [fp, #-20]	; 0xffffffec
    1770:	ldr	r1, [sp, #24]
    1774:	sub	r1, r1, #1
    1778:	bl	1924 <MyGame_Example_Monster_verify_as_root>
    177c:	movw	r1, #0
    1780:	cmp	r1, r0
    1784:	bne	17a0 <test_empty_monster+0x148>
    1788:	movw	r0, #0
    178c:	movt	r0, #0
    1790:	bl	0 <printf>
    1794:	mvn	r1, #0
    1798:	str	r1, [fp, #-4]
    179c:	b	17b4 <test_empty_monster+0x15c>
    17a0:	b	17a4 <test_empty_monster+0x14c>
    17a4:	ldr	r0, [fp, #-20]	; 0xffffffec
    17a8:	bl	0 <flatcc_builder_aligned_free>
    17ac:	ldr	r0, [fp, #-12]
    17b0:	str	r0, [fp, #-4]
    17b4:	ldr	r0, [fp, #-4]
    17b8:	mov	sp, fp
    17bc:	pop	{fp, pc}

000017c0 <flatbuffers_buffer_start>:
    17c0:	push	{fp, lr}
    17c4:	mov	fp, sp
    17c8:	sub	sp, sp, #8
    17cc:	str	r0, [sp, #4]
    17d0:	str	r1, [sp]
    17d4:	ldr	r0, [sp, #4]
    17d8:	ldr	r1, [sp]
    17dc:	movw	r2, #0
    17e0:	uxth	r2, r2
    17e4:	movw	r3, #0
    17e8:	bl	0 <flatcc_builder_start_buffer>
    17ec:	mov	sp, fp
    17f0:	pop	{fp, pc}

000017f4 <MyGame_Example_Monster_start>:
    17f4:	push	{fp, lr}
    17f8:	mov	fp, sp
    17fc:	sub	sp, sp, #8
    1800:	str	r0, [sp, #4]
    1804:	ldr	r0, [sp, #4]
    1808:	movw	r1, #36	; 0x24
    180c:	bl	0 <flatcc_builder_start_table>
    1810:	mov	sp, fp
    1814:	pop	{fp, pc}

00001818 <MyGame_Example_Monster_name_create_str>:
    1818:	push	{fp, lr}
    181c:	mov	fp, sp
    1820:	sub	sp, sp, #16
    1824:	str	r0, [fp, #-4]
    1828:	str	r1, [sp, #8]
    182c:	ldr	r0, [fp, #-4]
    1830:	ldr	r1, [fp, #-4]
    1834:	ldr	r2, [sp, #8]
    1838:	str	r0, [sp, #4]
    183c:	mov	r0, r1
    1840:	mov	r1, r2
    1844:	bl	0 <flatcc_builder_create_string_str>
    1848:	ldr	r1, [sp, #4]
    184c:	str	r0, [sp]
    1850:	mov	r0, r1
    1854:	ldr	r1, [sp]
    1858:	bl	5c34 <MyGame_Example_Monster_name_add>
    185c:	mov	sp, fp
    1860:	pop	{fp, pc}

00001864 <MyGame_Example_Monster_end>:
    1864:	push	{fp, lr}
    1868:	mov	fp, sp
    186c:	sub	sp, sp, #8
    1870:	str	r0, [sp, #4]
    1874:	ldr	r0, [sp, #4]
    1878:	movw	r1, #0
    187c:	movt	r1, #0
    1880:	movw	r2, #1
    1884:	bl	0 <flatcc_builder_check_required>
    1888:	cmp	r0, #0
    188c:	beq	1894 <MyGame_Example_Monster_end+0x30>
    1890:	b	18b4 <MyGame_Example_Monster_end+0x50>
    1894:	movw	r0, #0
    1898:	movt	r0, #0
    189c:	movw	r1, #0
    18a0:	movt	r1, #0
    18a4:	movw	r2, #235	; 0xeb
    18a8:	movw	r3, #0
    18ac:	movt	r3, #0
    18b0:	bl	0 <__assert_fail>
    18b4:	ldr	r0, [sp, #4]
    18b8:	bl	0 <flatcc_builder_end_table>
    18bc:	mov	sp, fp
    18c0:	pop	{fp, pc}

000018c4 <flatbuffers_buffer_end>:
    18c4:	push	{fp, lr}
    18c8:	mov	fp, sp
    18cc:	sub	sp, sp, #8
    18d0:	str	r0, [sp, #4]
    18d4:	str	r1, [sp]
    18d8:	ldr	r0, [sp, #4]
    18dc:	ldr	r1, [sp]
    18e0:	bl	0 <flatcc_builder_end_buffer>
    18e4:	mov	sp, fp
    18e8:	pop	{fp, pc}

000018ec <MyGame_Example_Monster_verify_as_root_with_identifier>:
    18ec:	push	{fp, lr}
    18f0:	mov	fp, sp
    18f4:	sub	sp, sp, #16
    18f8:	str	r0, [fp, #-4]
    18fc:	str	r1, [sp, #8]
    1900:	str	r2, [sp, #4]
    1904:	ldr	r0, [fp, #-4]
    1908:	ldr	r1, [sp, #8]
    190c:	ldr	r2, [sp, #4]
    1910:	movw	r3, #0
    1914:	movt	r3, #0
    1918:	bl	0 <flatcc_verify_table_as_root>
    191c:	mov	sp, fp
    1920:	pop	{fp, pc}

00001924 <MyGame_Example_Monster_verify_as_root>:
    1924:	push	{fp, lr}
    1928:	mov	fp, sp
    192c:	sub	sp, sp, #8
    1930:	str	r0, [sp, #4]
    1934:	str	r1, [sp]
    1938:	ldr	r0, [sp, #4]
    193c:	ldr	r1, [sp]
    1940:	movw	r2, #0
    1944:	movt	r2, #0
    1948:	movw	r3, #0
    194c:	movt	r3, #0
    1950:	bl	0 <flatcc_verify_table_as_root>
    1954:	mov	sp, fp
    1958:	pop	{fp, pc}

0000195c <test_typed_empty_monster>:
    195c:	push	{fp, lr}
    1960:	mov	fp, sp
    1964:	sub	sp, sp, #88	; 0x58
    1968:	str	r0, [fp, #-4]
    196c:	mvn	r0, #0
    1970:	str	r0, [fp, #-8]
    1974:	sub	r0, fp, #24
    1978:	movw	r1, #0
    197c:	and	r1, r1, #255	; 0xff
    1980:	movw	r2, #4
    1984:	bl	0 <memset>
    1988:	ldr	r0, [fp, #-4]
    198c:	bl	0 <flatcc_builder_reset>
    1990:	ldr	r1, [fp, #-4]
    1994:	str	r0, [fp, #-28]	; 0xffffffe4
    1998:	mov	r0, r1
    199c:	movw	r1, #0
    19a0:	movt	r1, #0
    19a4:	bl	17c0 <flatbuffers_buffer_start>
    19a8:	ldr	r1, [fp, #-4]
    19ac:	str	r0, [fp, #-32]	; 0xffffffe0
    19b0:	mov	r0, r1
    19b4:	bl	17f4 <MyGame_Example_Monster_start>
    19b8:	ldr	r1, [fp, #-4]
    19bc:	str	r0, [fp, #-36]	; 0xffffffdc
    19c0:	mov	r0, r1
    19c4:	movw	r1, #0
    19c8:	movt	r1, #0
    19cc:	bl	1818 <MyGame_Example_Monster_name_create_str>
    19d0:	ldr	r1, [fp, #-4]
    19d4:	str	r0, [fp, #-40]	; 0xffffffd8
    19d8:	mov	r0, r1
    19dc:	bl	1864 <MyGame_Example_Monster_end>
    19e0:	str	r0, [fp, #-12]
    19e4:	ldr	r0, [fp, #-4]
    19e8:	ldr	r1, [fp, #-12]
    19ec:	bl	18c4 <flatbuffers_buffer_end>
    19f0:	ldr	r1, [fp, #-4]
    19f4:	str	r0, [sp, #44]	; 0x2c
    19f8:	mov	r0, r1
    19fc:	sub	r1, fp, #20
    1a00:	bl	0 <flatcc_builder_finalize_aligned_buffer>
    1a04:	str	r0, [fp, #-16]
    1a08:	ldr	r1, [fp, #-16]
    1a0c:	ldr	r2, [fp, #-20]	; 0xffffffec
    1a10:	movw	r0, #0
    1a14:	movt	r0, #0
    1a18:	ldr	r3, [r0]
    1a1c:	movw	r0, #0
    1a20:	movt	r0, #0
    1a24:	bl	adc <hexdump>
    1a28:	ldr	r0, [fp, #-16]
    1a2c:	bl	1c94 <flatbuffers_get_type_hash>
    1a30:	movw	r1, #0
    1a34:	movt	r1, #0
    1a38:	str	r0, [sp, #40]	; 0x28
    1a3c:	mov	r0, r1
    1a40:	bl	1cb8 <flatbuffers_type_hash_from_name>
    1a44:	ldr	r1, [sp, #40]	; 0x28
    1a48:	cmp	r1, r0
    1a4c:	beq	1a74 <test_typed_empty_monster+0x118>
    1a50:	ldr	r0, [fp, #-16]
    1a54:	bl	1c94 <flatbuffers_get_type_hash>
    1a58:	movw	r1, #0
    1a5c:	movt	r1, #0
    1a60:	str	r0, [sp, #36]	; 0x24
    1a64:	mov	r0, r1
    1a68:	ldr	r1, [sp, #36]	; 0x24
    1a6c:	bl	0 <printf>
    1a70:	b	1c7c <test_typed_empty_monster+0x320>
    1a74:	ldr	r1, [pc, #532]	; 1c90 <test_typed_empty_monster+0x334>
    1a78:	ldr	r0, [fp, #-16]
    1a7c:	bl	1d34 <flatbuffers_has_type_hash>
    1a80:	cmp	r0, #0
    1a84:	bne	1a98 <test_typed_empty_monster+0x13c>
    1a88:	movw	r0, #0
    1a8c:	movt	r0, #0
    1a90:	bl	0 <printf>
    1a94:	b	1c7c <test_typed_empty_monster+0x320>
    1a98:	ldr	r1, [pc, #496]	; 1c90 <test_typed_empty_monster+0x334>
    1a9c:	ldr	r0, [fp, #-16]
    1aa0:	bl	1d34 <flatbuffers_has_type_hash>
    1aa4:	cmp	r0, #0
    1aa8:	bne	1abc <test_typed_empty_monster+0x160>
    1aac:	movw	r0, #0
    1ab0:	movt	r0, #0
    1ab4:	bl	0 <printf>
    1ab8:	b	1c7c <test_typed_empty_monster+0x320>
    1abc:	ldr	r0, [fp, #-16]
    1ac0:	bl	0 <verify_empty_monster>
    1ac4:	cmp	r0, #0
    1ac8:	bne	1adc <test_typed_empty_monster+0x180>
    1acc:	movw	r0, #0
    1ad0:	movt	r0, #0
    1ad4:	bl	0 <printf>
    1ad8:	b	1c7c <test_typed_empty_monster+0x320>
    1adc:	ldr	r0, [fp, #-16]
    1ae0:	ldr	r1, [fp, #-20]	; 0xffffffec
    1ae4:	movw	r2, #0
    1ae8:	movt	r2, #0
    1aec:	bl	18ec <MyGame_Example_Monster_verify_as_root_with_identifier>
    1af0:	str	r0, [fp, #-8]
    1af4:	cmp	r0, #0
    1af8:	beq	1b20 <test_typed_empty_monster+0x1c4>
    1afc:	ldr	r0, [fp, #-8]
    1b00:	bl	0 <flatcc_verify_error_string>
    1b04:	movw	r1, #0
    1b08:	movt	r1, #0
    1b0c:	str	r0, [sp, #32]
    1b10:	mov	r0, r1
    1b14:	ldr	r1, [sp, #32]
    1b18:	bl	0 <printf>
    1b1c:	b	1c7c <test_typed_empty_monster+0x320>
    1b20:	ldr	r0, [fp, #-16]
    1b24:	ldr	r1, [fp, #-20]	; 0xffffffec
    1b28:	bl	1d8c <MyGame_Example_Monster_verify_as_typed_root>
    1b2c:	str	r0, [fp, #-8]
    1b30:	cmp	r0, #0
    1b34:	beq	1b5c <test_typed_empty_monster+0x200>
    1b38:	ldr	r0, [fp, #-8]
    1b3c:	bl	0 <flatcc_verify_error_string>
    1b40:	movw	r1, #0
    1b44:	movt	r1, #0
    1b48:	str	r0, [sp, #28]
    1b4c:	mov	r0, r1
    1b50:	ldr	r1, [sp, #28]
    1b54:	bl	0 <printf>
    1b58:	b	1c7c <test_typed_empty_monster+0x320>
    1b5c:	ldr	r2, [pc, #300]	; 1c90 <test_typed_empty_monster+0x334>
    1b60:	ldr	r0, [fp, #-16]
    1b64:	ldr	r1, [fp, #-20]	; 0xffffffec
    1b68:	bl	1dc4 <MyGame_Example_Monster_verify_as_root_with_type_hash>
    1b6c:	str	r0, [fp, #-8]
    1b70:	cmp	r0, #0
    1b74:	beq	1b9c <test_typed_empty_monster+0x240>
    1b78:	ldr	r0, [fp, #-8]
    1b7c:	bl	0 <flatcc_verify_error_string>
    1b80:	movw	r1, #0
    1b84:	movt	r1, #0
    1b88:	str	r0, [sp, #24]
    1b8c:	mov	r0, r1
    1b90:	ldr	r1, [sp, #24]
    1b94:	bl	0 <printf>
    1b98:	b	1c7c <test_typed_empty_monster+0x320>
    1b9c:	ldr	r0, [fp, #-16]
    1ba0:	ldr	r1, [fp, #-20]	; 0xffffffec
    1ba4:	movw	r2, #0
    1ba8:	movt	r2, #0
    1bac:	str	r0, [sp, #20]
    1bb0:	mov	r0, r2
    1bb4:	str	r1, [sp, #16]
    1bb8:	bl	1cb8 <flatbuffers_type_hash_from_name>
    1bbc:	ldr	r1, [sp, #20]
    1bc0:	str	r0, [sp, #12]
    1bc4:	mov	r0, r1
    1bc8:	ldr	r1, [sp, #16]
    1bcc:	ldr	r2, [sp, #12]
    1bd0:	bl	1dc4 <MyGame_Example_Monster_verify_as_root_with_type_hash>
    1bd4:	str	r0, [fp, #-8]
    1bd8:	cmp	r0, #0
    1bdc:	beq	1c04 <test_typed_empty_monster+0x2a8>
    1be0:	ldr	r0, [fp, #-8]
    1be4:	bl	0 <flatcc_verify_error_string>
    1be8:	movw	r1, #0
    1bec:	movt	r1, #0
    1bf0:	str	r0, [sp, #8]
    1bf4:	mov	r0, r1
    1bf8:	ldr	r1, [sp, #8]
    1bfc:	bl	0 <printf>
    1c00:	b	1c7c <test_typed_empty_monster+0x320>
    1c04:	ldr	r0, [pc, #132]	; 1c90 <test_typed_empty_monster+0x334>
    1c08:	sub	r1, fp, #24
    1c0c:	bl	1dfc <flatbuffers_identifier_from_type_hash>
    1c10:	sub	r2, fp, #24
    1c14:	ldr	r0, [fp, #-16]
    1c18:	ldr	r1, [fp, #-20]	; 0xffffffec
    1c1c:	bl	18ec <MyGame_Example_Monster_verify_as_root_with_identifier>
    1c20:	str	r0, [fp, #-8]
    1c24:	cmp	r0, #0
    1c28:	beq	1c50 <test_typed_empty_monster+0x2f4>
    1c2c:	ldr	r0, [fp, #-8]
    1c30:	bl	0 <flatcc_verify_error_string>
    1c34:	movw	r1, #0
    1c38:	movt	r1, #0
    1c3c:	str	r0, [sp, #4]
    1c40:	mov	r0, r1
    1c44:	ldr	r1, [sp, #4]
    1c48:	bl	0 <printf>
    1c4c:	b	1c7c <test_typed_empty_monster+0x320>
    1c50:	ldr	r0, [fp, #-16]
    1c54:	ldr	r1, [fp, #-20]	; 0xffffffec
    1c58:	bl	1924 <MyGame_Example_Monster_verify_as_root>
    1c5c:	cmp	r0, #0
    1c60:	bne	1c74 <test_typed_empty_monster+0x318>
    1c64:	movw	r0, #0
    1c68:	movt	r0, #0
    1c6c:	bl	0 <printf>
    1c70:	b	1c7c <test_typed_empty_monster+0x320>
    1c74:	movw	r0, #0
    1c78:	str	r0, [fp, #-8]
    1c7c:	ldr	r0, [fp, #-16]
    1c80:	bl	0 <flatcc_builder_aligned_free>
    1c84:	ldr	r0, [fp, #-8]
    1c88:	mov	sp, fp
    1c8c:	pop	{fp, pc}
    1c90:	.word	0x330ef481

00001c94 <flatbuffers_get_type_hash>:
    1c94:	push	{fp, lr}
    1c98:	mov	fp, sp
    1c9c:	sub	sp, sp, #8
    1ca0:	str	r0, [sp, #4]
    1ca4:	ldr	r0, [sp, #4]
    1ca8:	add	r0, r0, #4
    1cac:	bl	11844 <__flatbuffers_thash_read_from_pe>
    1cb0:	mov	sp, fp
    1cb4:	pop	{fp, pc}

00001cb8 <flatbuffers_type_hash_from_name>:
    1cb8:	sub	sp, sp, #8
    1cbc:	ldr	r1, [pc, #104]	; 1d2c <flatbuffers_type_hash_from_name+0x74>
    1cc0:	str	r0, [sp, #4]
    1cc4:	str	r1, [sp]
    1cc8:	ldr	r0, [sp, #4]
    1ccc:	ldrsb	r0, [r0]
    1cd0:	cmp	r0, #0
    1cd4:	beq	1d0c <flatbuffers_type_hash_from_name+0x54>
    1cd8:	ldr	r0, [pc, #80]	; 1d30 <flatbuffers_type_hash_from_name+0x78>
    1cdc:	ldr	r1, [sp, #4]
    1ce0:	ldrb	r1, [r1]
    1ce4:	ldr	r2, [sp]
    1ce8:	eor	r1, r2, r1
    1cec:	str	r1, [sp]
    1cf0:	ldr	r1, [sp]
    1cf4:	mul	r0, r1, r0
    1cf8:	str	r0, [sp]
    1cfc:	ldr	r0, [sp, #4]
    1d00:	add	r0, r0, #1
    1d04:	str	r0, [sp, #4]
    1d08:	b	1cc8 <flatbuffers_type_hash_from_name+0x10>
    1d0c:	ldr	r0, [sp]
    1d10:	cmp	r0, #0
    1d14:	bne	1d20 <flatbuffers_type_hash_from_name+0x68>
    1d18:	ldr	r0, [pc, #12]	; 1d2c <flatbuffers_type_hash_from_name+0x74>
    1d1c:	str	r0, [sp]
    1d20:	ldr	r0, [sp]
    1d24:	add	sp, sp, #8
    1d28:	bx	lr
    1d2c:	.word	0x811c9dc5
    1d30:	.word	0x01000193

00001d34 <flatbuffers_has_type_hash>:
    1d34:	push	{fp, lr}
    1d38:	mov	fp, sp
    1d3c:	sub	sp, sp, #16
    1d40:	str	r0, [fp, #-4]
    1d44:	str	r1, [sp, #8]
    1d48:	ldr	r0, [sp, #8]
    1d4c:	cmp	r0, #0
    1d50:	movw	r0, #1
    1d54:	str	r0, [sp, #4]
    1d58:	beq	1d7c <flatbuffers_has_type_hash+0x48>
    1d5c:	ldr	r0, [fp, #-4]
    1d60:	add	r0, r0, #4
    1d64:	bl	11844 <__flatbuffers_thash_read_from_pe>
    1d68:	ldr	r1, [sp, #8]
    1d6c:	cmp	r0, r1
    1d70:	movw	r0, #0
    1d74:	moveq	r0, #1
    1d78:	str	r0, [sp, #4]
    1d7c:	ldr	r0, [sp, #4]
    1d80:	and	r0, r0, #1
    1d84:	mov	sp, fp
    1d88:	pop	{fp, pc}

00001d8c <MyGame_Example_Monster_verify_as_typed_root>:
    1d8c:	push	{fp, lr}
    1d90:	mov	fp, sp
    1d94:	sub	sp, sp, #8
    1d98:	str	r0, [sp, #4]
    1d9c:	str	r1, [sp]
    1da0:	ldr	r0, [sp, #4]
    1da4:	ldr	r1, [sp]
    1da8:	movw	r2, #0
    1dac:	movt	r2, #0
    1db0:	movw	r3, #0
    1db4:	movt	r3, #0
    1db8:	bl	0 <flatcc_verify_table_as_root>
    1dbc:	mov	sp, fp
    1dc0:	pop	{fp, pc}

00001dc4 <MyGame_Example_Monster_verify_as_root_with_type_hash>:
    1dc4:	push	{fp, lr}
    1dc8:	mov	fp, sp
    1dcc:	sub	sp, sp, #16
    1dd0:	str	r0, [fp, #-4]
    1dd4:	str	r1, [sp, #8]
    1dd8:	str	r2, [sp, #4]
    1ddc:	ldr	r0, [fp, #-4]
    1de0:	ldr	r1, [sp, #8]
    1de4:	ldr	r2, [sp, #4]
    1de8:	movw	r3, #0
    1dec:	movt	r3, #0
    1df0:	bl	0 <flatcc_verify_table_as_typed_root>
    1df4:	mov	sp, fp
    1df8:	pop	{fp, pc}

00001dfc <flatbuffers_identifier_from_type_hash>:
    1dfc:	sub	sp, sp, #8
    1e00:	str	r0, [sp, #4]
    1e04:	str	r1, [sp]
    1e08:	ldr	r0, [sp, #4]
    1e0c:	and	r0, r0, #255	; 0xff
    1e10:	ldr	r1, [sp]
    1e14:	strb	r0, [r1]
    1e18:	ldr	r0, [sp, #4]
    1e1c:	lsr	r0, r0, #8
    1e20:	str	r0, [sp, #4]
    1e24:	ldr	r0, [sp, #4]
    1e28:	and	r0, r0, #255	; 0xff
    1e2c:	ldr	r1, [sp]
    1e30:	strb	r0, [r1, #1]
    1e34:	ldr	r0, [sp, #4]
    1e38:	lsr	r0, r0, #8
    1e3c:	str	r0, [sp, #4]
    1e40:	ldr	r0, [sp, #4]
    1e44:	and	r0, r0, #255	; 0xff
    1e48:	ldr	r1, [sp]
    1e4c:	strb	r0, [r1, #2]
    1e50:	ldr	r0, [sp, #4]
    1e54:	lsr	r0, r0, #8
    1e58:	str	r0, [sp, #4]
    1e5c:	ldr	r0, [sp, #4]
    1e60:	and	r0, r0, #255	; 0xff
    1e64:	ldr	r1, [sp]
    1e68:	strb	r0, [r1, #3]
    1e6c:	add	sp, sp, #8
    1e70:	bx	lr

00001e74 <verify_table_with_emptystruct>:
    1e74:	push	{fp, lr}
    1e78:	mov	fp, sp
    1e7c:	sub	sp, sp, #16
    1e80:	str	r0, [sp, #8]
    1e84:	ldr	r0, [sp, #8]
    1e88:	bl	1f24 <MyGame_Example_with_emptystruct_as_root>
    1e8c:	str	r0, [sp, #4]
    1e90:	ldr	r0, [sp, #4]
    1e94:	movw	r1, #0
    1e98:	cmp	r0, r1
    1e9c:	bne	1eb8 <verify_table_with_emptystruct+0x44>
    1ea0:	movw	r0, #0
    1ea4:	movt	r0, #0
    1ea8:	bl	0 <printf>
    1eac:	mvn	r1, #0
    1eb0:	str	r1, [fp, #-4]
    1eb4:	b	1f18 <verify_table_with_emptystruct+0xa4>
    1eb8:	ldr	r0, [sp, #4]
    1ebc:	bl	1f9c <MyGame_Example_with_emptystruct_empty>
    1ec0:	str	r0, [sp]
    1ec4:	ldr	r0, [sp]
    1ec8:	movw	r1, #0
    1ecc:	cmp	r0, r1
    1ed0:	bne	1eec <verify_table_with_emptystruct+0x78>
    1ed4:	movw	r0, #0
    1ed8:	movt	r0, #0
    1edc:	bl	0 <printf>
    1ee0:	mvn	r1, #0
    1ee4:	str	r1, [fp, #-4]
    1ee8:	b	1f18 <verify_table_with_emptystruct+0xa4>
    1eec:	bl	1187c <MyGame_Example_emptystruct__size>
    1ef0:	cmp	r0, #0
    1ef4:	beq	1f10 <verify_table_with_emptystruct+0x9c>
    1ef8:	movw	r0, #0
    1efc:	movt	r0, #0
    1f00:	bl	0 <printf>
    1f04:	mvn	r1, #0
    1f08:	str	r1, [fp, #-4]
    1f0c:	b	1f18 <verify_table_with_emptystruct+0xa4>
    1f10:	movw	r0, #0
    1f14:	str	r0, [fp, #-4]
    1f18:	ldr	r0, [fp, #-4]
    1f1c:	mov	sp, fp
    1f20:	pop	{fp, pc}

00001f24 <MyGame_Example_with_emptystruct_as_root>:
    1f24:	push	{fp, lr}
    1f28:	mov	fp, sp
    1f2c:	sub	sp, sp, #16
    1f30:	str	r0, [fp, #-4]
    1f34:	movw	r0, #0
    1f38:	movt	r0, #0
    1f3c:	str	r0, [sp, #8]
    1f40:	ldr	r0, [fp, #-4]
    1f44:	movw	r1, #0
    1f48:	cmp	r0, r1
    1f4c:	beq	1f64 <MyGame_Example_with_emptystruct_as_root+0x40>
    1f50:	ldr	r0, [fp, #-4]
    1f54:	ldr	r1, [sp, #8]
    1f58:	bl	25b8 <flatbuffers_has_identifier>
    1f5c:	cmp	r0, #0
    1f60:	bne	1f70 <MyGame_Example_with_emptystruct_as_root+0x4c>
    1f64:	movw	r0, #0
    1f68:	str	r0, [sp, #4]
    1f6c:	b	1f90 <MyGame_Example_with_emptystruct_as_root+0x6c>
    1f70:	ldr	r0, [fp, #-4]
    1f74:	ldr	r1, [fp, #-4]
    1f78:	str	r0, [sp]
    1f7c:	mov	r0, r1
    1f80:	bl	f490 <__flatbuffers_uoffset_read_from_pe>
    1f84:	ldr	r1, [sp]
    1f88:	add	r0, r1, r0
    1f8c:	str	r0, [sp, #4]
    1f90:	ldr	r0, [sp, #4]
    1f94:	mov	sp, fp
    1f98:	pop	{fp, pc}

00001f9c <MyGame_Example_with_emptystruct_empty>:
    1f9c:	push	{fp, lr}
    1fa0:	mov	fp, sp
    1fa4:	sub	sp, sp, #24
    1fa8:	str	r0, [fp, #-8]
    1fac:	movw	r0, #0
    1fb0:	strh	r0, [fp, #-10]
    1fb4:	ldr	r0, [fp, #-8]
    1fb8:	movw	r1, #0
    1fbc:	cmp	r0, r1
    1fc0:	beq	1fcc <MyGame_Example_with_emptystruct_empty+0x30>
    1fc4:	b	1fc8 <MyGame_Example_with_emptystruct_empty+0x2c>
    1fc8:	b	1fec <MyGame_Example_with_emptystruct_empty+0x50>
    1fcc:	movw	r0, #0
    1fd0:	movt	r0, #0
    1fd4:	movw	r1, #0
    1fd8:	movt	r1, #0
    1fdc:	movw	r2, #569	; 0x239
    1fe0:	movw	r3, #0
    1fe4:	movt	r3, #0
    1fe8:	bl	0 <__assert_fail>
    1fec:	mov	r0, #0
    1ff0:	strh	r0, [sp, #12]
    1ff4:	ldr	r0, [fp, #-8]
    1ff8:	str	r0, [sp, #4]
    1ffc:	bl	f4c8 <__flatbuffers_soffset_read_from_pe>
    2000:	ldr	r1, [sp, #4]
    2004:	sub	r0, r1, r0
    2008:	str	r0, [sp, #8]
    200c:	ldr	r0, [sp, #8]
    2010:	bl	f4ec <__flatbuffers_voffset_read_from_pe>
    2014:	ldrh	r1, [sp, #12]
    2018:	add	r1, r1, #3
    201c:	lsl	r1, r1, #1
    2020:	cmp	r0, r1
    2024:	bcc	2040 <MyGame_Example_with_emptystruct_empty+0xa4>
    2028:	ldr	r0, [sp, #8]
    202c:	ldrh	r1, [sp, #12]
    2030:	add	r0, r0, r1, lsl #1
    2034:	add	r0, r0, #4
    2038:	bl	f4ec <__flatbuffers_voffset_read_from_pe>
    203c:	strh	r0, [fp, #-10]
    2040:	ldrsh	r0, [fp, #-10]
    2044:	cmp	r0, #0
    2048:	beq	2060 <MyGame_Example_with_emptystruct_empty+0xc4>
    204c:	ldr	r0, [fp, #-8]
    2050:	ldrh	r1, [fp, #-10]
    2054:	add	r0, r0, r1
    2058:	str	r0, [fp, #-4]
    205c:	b	2068 <MyGame_Example_with_emptystruct_empty+0xcc>
    2060:	movw	r0, #0
    2064:	str	r0, [fp, #-4]
    2068:	ldr	r0, [fp, #-4]
    206c:	mov	sp, fp
    2070:	pop	{fp, pc}

00002074 <test_table_with_emptystruct>:
    2074:	push	{fp, lr}
    2078:	mov	fp, sp
    207c:	sub	sp, sp, #32
    2080:	str	r0, [fp, #-4]
    2084:	movw	r0, #0
    2088:	str	r0, [fp, #-12]
    208c:	ldr	r0, [fp, #-4]
    2090:	bl	0 <flatcc_builder_reset>
    2094:	ldr	r1, [fp, #-4]
    2098:	ldr	r2, [fp, #-12]
    209c:	str	r0, [sp, #8]
    20a0:	mov	r0, r1
    20a4:	mov	r1, r2
    20a8:	bl	2104 <MyGame_Example_with_emptystruct_create_as_root>
    20ac:	ldr	r1, [fp, #-4]
    20b0:	str	r0, [sp, #4]
    20b4:	mov	r0, r1
    20b8:	add	r1, sp, #12
    20bc:	bl	0 <flatcc_builder_finalize_aligned_buffer>
    20c0:	str	r0, [sp, #16]
    20c4:	ldr	r1, [sp, #16]
    20c8:	ldr	r2, [sp, #12]
    20cc:	movw	r0, #0
    20d0:	movt	r0, #0
    20d4:	ldr	r3, [r0]
    20d8:	movw	r0, #0
    20dc:	movt	r0, #0
    20e0:	bl	adc <hexdump>
    20e4:	ldr	r0, [sp, #16]
    20e8:	bl	1e74 <verify_table_with_emptystruct>
    20ec:	str	r0, [fp, #-8]
    20f0:	ldr	r0, [sp, #16]
    20f4:	bl	0 <flatcc_builder_aligned_free>
    20f8:	ldr	r0, [fp, #-8]
    20fc:	mov	sp, fp
    2100:	pop	{fp, pc}

00002104 <MyGame_Example_with_emptystruct_create_as_root>:
    2104:	push	{fp, lr}
    2108:	mov	fp, sp
    210c:	sub	sp, sp, #24
    2110:	str	r0, [fp, #-8]
    2114:	str	r1, [sp, #12]
    2118:	ldr	r0, [fp, #-8]
    211c:	movw	r1, #0
    2120:	movt	r1, #0
    2124:	bl	17c0 <flatbuffers_buffer_start>
    2128:	cmp	r0, #0
    212c:	beq	213c <MyGame_Example_with_emptystruct_create_as_root+0x38>
    2130:	movw	r0, #0
    2134:	str	r0, [fp, #-4]
    2138:	b	2170 <MyGame_Example_with_emptystruct_create_as_root+0x6c>
    213c:	ldr	r0, [fp, #-8]
    2140:	ldr	r1, [fp, #-8]
    2144:	ldr	r2, [sp, #12]
    2148:	str	r0, [sp, #8]
    214c:	mov	r0, r1
    2150:	mov	r1, r2
    2154:	bl	11884 <MyGame_Example_with_emptystruct_create>
    2158:	ldr	r1, [sp, #8]
    215c:	str	r0, [sp, #4]
    2160:	mov	r0, r1
    2164:	ldr	r1, [sp, #4]
    2168:	bl	18c4 <flatbuffers_buffer_end>
    216c:	str	r0, [fp, #-4]
    2170:	ldr	r0, [fp, #-4]
    2174:	mov	sp, fp
    2178:	pop	{fp, pc}

0000217c <test_typed_table_with_emptystruct>:
    217c:	push	{fp, lr}
    2180:	mov	fp, sp
    2184:	sub	sp, sp, #32
    2188:	str	r0, [fp, #-8]
    218c:	movw	r0, #0
    2190:	str	r0, [fp, #-12]
    2194:	str	r0, [sp, #16]
    2198:	ldr	r0, [fp, #-8]
    219c:	bl	0 <flatcc_builder_reset>
    21a0:	ldr	r1, [fp, #-8]
    21a4:	ldr	r2, [sp, #16]
    21a8:	str	r0, [sp, #4]
    21ac:	mov	r0, r1
    21b0:	mov	r1, r2
    21b4:	bl	2498 <MyGame_Example_with_emptystruct_create_as_typed_root>
    21b8:	ldr	r1, [fp, #-8]
    21bc:	str	r0, [sp]
    21c0:	mov	r0, r1
    21c4:	add	r1, sp, #8
    21c8:	bl	0 <flatcc_builder_get_direct_buffer>
    21cc:	str	r0, [sp, #12]
    21d0:	ldr	r1, [sp, #12]
    21d4:	ldr	r2, [sp, #8]
    21d8:	movw	r0, #0
    21dc:	movt	r0, #0
    21e0:	ldr	r3, [r0]
    21e4:	movw	r0, #0
    21e8:	movt	r0, #0
    21ec:	bl	adc <hexdump>
    21f0:	ldr	r0, [sp, #12]
    21f4:	ldr	r1, [sp, #8]
    21f8:	movw	r2, #0
    21fc:	movt	r2, #0
    2200:	bl	2510 <MyGame_Example_with_emptystruct_verify_as_root_with_identifier>
    2204:	movw	r1, #0
    2208:	cmp	r1, r0
    220c:	beq	2228 <test_typed_table_with_emptystruct+0xac>
    2210:	movw	r0, #0
    2214:	movt	r0, #0
    2218:	bl	0 <printf>
    221c:	mvn	r1, #0
    2220:	str	r1, [fp, #-4]
    2224:	b	2488 <test_typed_table_with_emptystruct+0x30c>
    2228:	ldr	r0, [sp, #12]
    222c:	ldr	r1, [sp, #8]
    2230:	bl	2548 <MyGame_Example_with_emptystruct_verify_as_typed_root>
    2234:	movw	r1, #0
    2238:	cmp	r1, r0
    223c:	beq	2258 <test_typed_table_with_emptystruct+0xdc>
    2240:	movw	r0, #0
    2244:	movt	r0, #0
    2248:	bl	0 <printf>
    224c:	mvn	r1, #0
    2250:	str	r1, [fp, #-4]
    2254:	b	2488 <test_typed_table_with_emptystruct+0x30c>
    2258:	ldr	r2, [pc, #564]	; 2494 <test_typed_table_with_emptystruct+0x318>
    225c:	ldr	r0, [sp, #12]
    2260:	ldr	r1, [sp, #8]
    2264:	bl	2580 <MyGame_Example_with_emptystruct_verify_as_root_with_type_hash>
    2268:	movw	r1, #0
    226c:	cmp	r1, r0
    2270:	beq	228c <test_typed_table_with_emptystruct+0x110>
    2274:	movw	r0, #0
    2278:	movt	r0, #0
    227c:	bl	0 <printf>
    2280:	mvn	r1, #0
    2284:	str	r1, [fp, #-4]
    2288:	b	2488 <test_typed_table_with_emptystruct+0x30c>
    228c:	ldr	r0, [sp, #12]
    2290:	movw	r1, #0
    2294:	cmp	r0, r1
    2298:	bne	22b4 <test_typed_table_with_emptystruct+0x138>
    229c:	movw	r0, #0
    22a0:	movt	r0, #0
    22a4:	bl	0 <printf>
    22a8:	mvn	r1, #0
    22ac:	str	r1, [fp, #-4]
    22b0:	b	2488 <test_typed_table_with_emptystruct+0x30c>
    22b4:	ldr	r1, [pc, #472]	; 2494 <test_typed_table_with_emptystruct+0x318>
    22b8:	ldr	r0, [sp, #12]
    22bc:	bl	1d34 <flatbuffers_has_type_hash>
    22c0:	cmp	r0, #0
    22c4:	bne	22e0 <test_typed_table_with_emptystruct+0x164>
    22c8:	movw	r0, #0
    22cc:	movt	r0, #0
    22d0:	bl	0 <printf>
    22d4:	mvn	r1, #0
    22d8:	str	r1, [fp, #-4]
    22dc:	b	2488 <test_typed_table_with_emptystruct+0x30c>
    22e0:	ldr	r0, [sp, #12]
    22e4:	movw	r1, #0
    22e8:	bl	1d34 <flatbuffers_has_type_hash>
    22ec:	cmp	r0, #0
    22f0:	bne	230c <test_typed_table_with_emptystruct+0x190>
    22f4:	movw	r0, #0
    22f8:	movt	r0, #0
    22fc:	bl	0 <printf>
    2300:	mvn	r1, #0
    2304:	str	r1, [fp, #-4]
    2308:	b	2488 <test_typed_table_with_emptystruct+0x30c>
    230c:	ldr	r0, [sp, #12]
    2310:	movw	r1, #1
    2314:	bl	1d34 <flatbuffers_has_type_hash>
    2318:	cmp	r0, #0
    231c:	beq	2338 <test_typed_table_with_emptystruct+0x1bc>
    2320:	movw	r0, #0
    2324:	movt	r0, #0
    2328:	bl	0 <printf>
    232c:	mvn	r1, #0
    2330:	str	r1, [fp, #-4]
    2334:	b	2488 <test_typed_table_with_emptystruct+0x30c>
    2338:	ldr	r0, [sp, #12]
    233c:	movw	r1, #0
    2340:	bl	25b8 <flatbuffers_has_identifier>
    2344:	cmp	r0, #0
    2348:	bne	2364 <test_typed_table_with_emptystruct+0x1e8>
    234c:	movw	r0, #0
    2350:	movt	r0, #0
    2354:	bl	0 <printf>
    2358:	mvn	r1, #0
    235c:	str	r1, [fp, #-4]
    2360:	b	2488 <test_typed_table_with_emptystruct+0x30c>
    2364:	ldr	r0, [sp, #12]
    2368:	movw	r1, #0
    236c:	movt	r1, #0
    2370:	bl	25b8 <flatbuffers_has_identifier>
    2374:	cmp	r0, #0
    2378:	bne	2394 <test_typed_table_with_emptystruct+0x218>
    237c:	movw	r0, #0
    2380:	movt	r0, #0
    2384:	bl	0 <printf>
    2388:	mvn	r1, #0
    238c:	str	r1, [fp, #-4]
    2390:	b	2488 <test_typed_table_with_emptystruct+0x30c>
    2394:	ldr	r0, [sp, #12]
    2398:	bl	1f24 <MyGame_Example_with_emptystruct_as_root>
    239c:	movw	r1, #0
    23a0:	cmp	r0, r1
    23a4:	beq	23c0 <test_typed_table_with_emptystruct+0x244>
    23a8:	movw	r0, #0
    23ac:	movt	r0, #0
    23b0:	bl	0 <printf>
    23b4:	mvn	r1, #0
    23b8:	str	r1, [fp, #-4]
    23bc:	b	2488 <test_typed_table_with_emptystruct+0x30c>
    23c0:	ldr	r0, [sp, #12]
    23c4:	movw	r1, #1
    23c8:	bl	2664 <MyGame_Example_with_emptystruct_as_root_with_type_hash>
    23cc:	movw	r1, #0
    23d0:	cmp	r0, r1
    23d4:	beq	23f0 <test_typed_table_with_emptystruct+0x274>
    23d8:	movw	r0, #0
    23dc:	movt	r0, #0
    23e0:	bl	0 <printf>
    23e4:	mvn	r1, #0
    23e8:	str	r1, [fp, #-4]
    23ec:	b	2488 <test_typed_table_with_emptystruct+0x30c>
    23f0:	ldr	r0, [sp, #12]
    23f4:	movw	r1, #0
    23f8:	movt	r1, #0
    23fc:	bl	26d4 <MyGame_Example_with_emptystruct_as_root_with_identifier>
    2400:	movw	r1, #0
    2404:	cmp	r0, r1
    2408:	bne	2424 <test_typed_table_with_emptystruct+0x2a8>
    240c:	movw	r0, #0
    2410:	movt	r0, #0
    2414:	bl	0 <printf>
    2418:	mvn	r1, #0
    241c:	str	r1, [fp, #-4]
    2420:	b	2488 <test_typed_table_with_emptystruct+0x30c>
    2424:	ldr	r0, [sp, #12]
    2428:	bl	2744 <MyGame_Example_with_emptystruct_as_typed_root>
    242c:	movw	r1, #0
    2430:	cmp	r0, r1
    2434:	bne	2450 <test_typed_table_with_emptystruct+0x2d4>
    2438:	movw	r0, #0
    243c:	movt	r0, #0
    2440:	bl	0 <printf>
    2444:	mvn	r1, #0
    2448:	str	r1, [fp, #-4]
    244c:	b	2488 <test_typed_table_with_emptystruct+0x30c>
    2450:	ldr	r0, [sp, #12]
    2454:	movw	r1, #0
    2458:	bl	2664 <MyGame_Example_with_emptystruct_as_root_with_type_hash>
    245c:	movw	r1, #0
    2460:	cmp	r0, r1
    2464:	bne	2480 <test_typed_table_with_emptystruct+0x304>
    2468:	movw	r0, #0
    246c:	movt	r0, #0
    2470:	bl	0 <printf>
    2474:	mvn	r1, #0
    2478:	str	r1, [fp, #-4]
    247c:	b	2488 <test_typed_table_with_emptystruct+0x30c>
    2480:	ldr	r0, [fp, #-12]
    2484:	str	r0, [fp, #-4]
    2488:	ldr	r0, [fp, #-4]
    248c:	mov	sp, fp
    2490:	pop	{fp, pc}
    2494:	.word	0xb0dd37b6

00002498 <MyGame_Example_with_emptystruct_create_as_typed_root>:
    2498:	push	{fp, lr}
    249c:	mov	fp, sp
    24a0:	sub	sp, sp, #24
    24a4:	str	r0, [fp, #-8]
    24a8:	str	r1, [sp, #12]
    24ac:	ldr	r0, [fp, #-8]
    24b0:	movw	r1, #0
    24b4:	movt	r1, #0
    24b8:	bl	17c0 <flatbuffers_buffer_start>
    24bc:	cmp	r0, #0
    24c0:	beq	24d0 <MyGame_Example_with_emptystruct_create_as_typed_root+0x38>
    24c4:	movw	r0, #0
    24c8:	str	r0, [fp, #-4]
    24cc:	b	2504 <MyGame_Example_with_emptystruct_create_as_typed_root+0x6c>
    24d0:	ldr	r0, [fp, #-8]
    24d4:	ldr	r1, [fp, #-8]
    24d8:	ldr	r2, [sp, #12]
    24dc:	str	r0, [sp, #8]
    24e0:	mov	r0, r1
    24e4:	mov	r1, r2
    24e8:	bl	11884 <MyGame_Example_with_emptystruct_create>
    24ec:	ldr	r1, [sp, #8]
    24f0:	str	r0, [sp, #4]
    24f4:	mov	r0, r1
    24f8:	ldr	r1, [sp, #4]
    24fc:	bl	18c4 <flatbuffers_buffer_end>
    2500:	str	r0, [fp, #-4]
    2504:	ldr	r0, [fp, #-4]
    2508:	mov	sp, fp
    250c:	pop	{fp, pc}

00002510 <MyGame_Example_with_emptystruct_verify_as_root_with_identifier>:
    2510:	push	{fp, lr}
    2514:	mov	fp, sp
    2518:	sub	sp, sp, #16
    251c:	str	r0, [fp, #-4]
    2520:	str	r1, [sp, #8]
    2524:	str	r2, [sp, #4]
    2528:	ldr	r0, [fp, #-4]
    252c:	ldr	r1, [sp, #8]
    2530:	ldr	r2, [sp, #4]
    2534:	movw	r3, #0
    2538:	movt	r3, #0
    253c:	bl	0 <flatcc_verify_table_as_root>
    2540:	mov	sp, fp
    2544:	pop	{fp, pc}

00002548 <MyGame_Example_with_emptystruct_verify_as_typed_root>:
    2548:	push	{fp, lr}
    254c:	mov	fp, sp
    2550:	sub	sp, sp, #8
    2554:	str	r0, [sp, #4]
    2558:	str	r1, [sp]
    255c:	ldr	r0, [sp, #4]
    2560:	ldr	r1, [sp]
    2564:	movw	r2, #0
    2568:	movt	r2, #0
    256c:	movw	r3, #0
    2570:	movt	r3, #0
    2574:	bl	0 <flatcc_verify_table_as_root>
    2578:	mov	sp, fp
    257c:	pop	{fp, pc}

00002580 <MyGame_Example_with_emptystruct_verify_as_root_with_type_hash>:
    2580:	push	{fp, lr}
    2584:	mov	fp, sp
    2588:	sub	sp, sp, #16
    258c:	str	r0, [fp, #-4]
    2590:	str	r1, [sp, #8]
    2594:	str	r2, [sp, #4]
    2598:	ldr	r0, [fp, #-4]
    259c:	ldr	r1, [sp, #8]
    25a0:	ldr	r2, [sp, #4]
    25a4:	movw	r3, #0
    25a8:	movt	r3, #0
    25ac:	bl	0 <flatcc_verify_table_as_typed_root>
    25b0:	mov	sp, fp
    25b4:	pop	{fp, pc}

000025b8 <flatbuffers_has_identifier>:
    25b8:	push	{fp, lr}
    25bc:	mov	fp, sp
    25c0:	sub	sp, sp, #32
    25c4:	str	r0, [fp, #-8]
    25c8:	str	r1, [fp, #-12]
    25cc:	movw	r0, #0
    25d0:	str	r0, [sp, #12]
    25d4:	ldr	r1, [fp, #-12]
    25d8:	cmp	r1, r0
    25dc:	bne	25ec <flatbuffers_has_identifier+0x34>
    25e0:	movw	r0, #1
    25e4:	str	r0, [fp, #-4]
    25e8:	b	2658 <flatbuffers_has_identifier+0xa0>
    25ec:	add	r0, sp, #12
    25f0:	ldr	r1, [fp, #-12]
    25f4:	movw	r2, #4
    25f8:	bl	0 <strncpy>
    25fc:	ldr	r1, [sp, #12]
    2600:	str	r0, [sp, #8]
    2604:	mov	r0, r1
    2608:	bl	11a64 <__flatbuffers_thash_cast_from_le>
    260c:	str	r0, [sp, #12]
    2610:	ldr	r0, [fp, #-8]
    2614:	add	r0, r0, #4
    2618:	bl	11844 <__flatbuffers_thash_read_from_pe>
    261c:	str	r0, [sp, #16]
    2620:	ldr	r0, [sp, #12]
    2624:	cmp	r0, #0
    2628:	movw	r0, #1
    262c:	str	r0, [sp, #4]
    2630:	beq	264c <flatbuffers_has_identifier+0x94>
    2634:	ldr	r0, [sp, #16]
    2638:	ldr	r1, [sp, #12]
    263c:	cmp	r0, r1
    2640:	movw	r0, #0
    2644:	moveq	r0, #1
    2648:	str	r0, [sp, #4]
    264c:	ldr	r0, [sp, #4]
    2650:	and	r0, r0, #1
    2654:	str	r0, [fp, #-4]
    2658:	ldr	r0, [fp, #-4]
    265c:	mov	sp, fp
    2660:	pop	{fp, pc}

00002664 <MyGame_Example_with_emptystruct_as_root_with_type_hash>:
    2664:	push	{fp, lr}
    2668:	mov	fp, sp
    266c:	sub	sp, sp, #16
    2670:	str	r0, [fp, #-4]
    2674:	str	r1, [sp, #8]
    2678:	ldr	r0, [fp, #-4]
    267c:	movw	r1, #0
    2680:	cmp	r0, r1
    2684:	beq	269c <MyGame_Example_with_emptystruct_as_root_with_type_hash+0x38>
    2688:	ldr	r0, [fp, #-4]
    268c:	ldr	r1, [sp, #8]
    2690:	bl	1d34 <flatbuffers_has_type_hash>
    2694:	cmp	r0, #0
    2698:	bne	26a8 <MyGame_Example_with_emptystruct_as_root_with_type_hash+0x44>
    269c:	movw	r0, #0
    26a0:	str	r0, [sp, #4]
    26a4:	b	26c8 <MyGame_Example_with_emptystruct_as_root_with_type_hash+0x64>
    26a8:	ldr	r0, [fp, #-4]
    26ac:	ldr	r1, [fp, #-4]
    26b0:	str	r0, [sp]
    26b4:	mov	r0, r1
    26b8:	bl	f490 <__flatbuffers_uoffset_read_from_pe>
    26bc:	ldr	r1, [sp]
    26c0:	add	r0, r1, r0
    26c4:	str	r0, [sp, #4]
    26c8:	ldr	r0, [sp, #4]
    26cc:	mov	sp, fp
    26d0:	pop	{fp, pc}

000026d4 <MyGame_Example_with_emptystruct_as_root_with_identifier>:
    26d4:	push	{fp, lr}
    26d8:	mov	fp, sp
    26dc:	sub	sp, sp, #16
    26e0:	str	r0, [fp, #-4]
    26e4:	str	r1, [sp, #8]
    26e8:	ldr	r0, [fp, #-4]
    26ec:	movw	r1, #0
    26f0:	cmp	r0, r1
    26f4:	beq	270c <MyGame_Example_with_emptystruct_as_root_with_identifier+0x38>
    26f8:	ldr	r0, [fp, #-4]
    26fc:	ldr	r1, [sp, #8]
    2700:	bl	25b8 <flatbuffers_has_identifier>
    2704:	cmp	r0, #0
    2708:	bne	2718 <MyGame_Example_with_emptystruct_as_root_with_identifier+0x44>
    270c:	movw	r0, #0
    2710:	str	r0, [sp, #4]
    2714:	b	2738 <MyGame_Example_with_emptystruct_as_root_with_identifier+0x64>
    2718:	ldr	r0, [fp, #-4]
    271c:	ldr	r1, [fp, #-4]
    2720:	str	r0, [sp]
    2724:	mov	r0, r1
    2728:	bl	f490 <__flatbuffers_uoffset_read_from_pe>
    272c:	ldr	r1, [sp]
    2730:	add	r0, r1, r0
    2734:	str	r0, [sp, #4]
    2738:	ldr	r0, [sp, #4]
    273c:	mov	sp, fp
    2740:	pop	{fp, pc}

00002744 <MyGame_Example_with_emptystruct_as_typed_root>:
    2744:	push	{fp, lr}
    2748:	mov	fp, sp
    274c:	sub	sp, sp, #16
    2750:	str	r0, [fp, #-4]
    2754:	ldr	r0, [fp, #-4]
    2758:	movw	r1, #0
    275c:	cmp	r0, r1
    2760:	beq	2778 <MyGame_Example_with_emptystruct_as_typed_root+0x34>
    2764:	ldr	r1, [pc, #68]	; 27b0 <MyGame_Example_with_emptystruct_as_typed_root+0x6c>
    2768:	ldr	r0, [fp, #-4]
    276c:	bl	1d34 <flatbuffers_has_type_hash>
    2770:	cmp	r0, #0
    2774:	bne	2784 <MyGame_Example_with_emptystruct_as_typed_root+0x40>
    2778:	movw	r0, #0
    277c:	str	r0, [sp, #8]
    2780:	b	27a4 <MyGame_Example_with_emptystruct_as_typed_root+0x60>
    2784:	ldr	r0, [fp, #-4]
    2788:	ldr	r1, [fp, #-4]
    278c:	str	r0, [sp, #4]
    2790:	mov	r0, r1
    2794:	bl	f490 <__flatbuffers_uoffset_read_from_pe>
    2798:	ldr	r1, [sp, #4]
    279c:	add	r0, r1, r0
    27a0:	str	r0, [sp, #8]
    27a4:	ldr	r0, [sp, #8]
    27a8:	mov	sp, fp
    27ac:	pop	{fp, pc}
    27b0:	.word	0xb0dd37b6

000027b4 <verify_monster>:
    27b4:	push	{fp, lr}
    27b8:	mov	fp, sp
    27bc:	sub	sp, sp, #184	; 0xb8
    27c0:	bfc	sp, #0, #4
    27c4:	movw	r1, #0
    27c8:	movt	r1, #0
    27cc:	str	r0, [sp, #176]	; 0xb0
    27d0:	add	r0, sp, #72	; 0x48
    27d4:	movw	r2, #20
    27d8:	bl	0 <memcpy>
    27dc:	movw	r0, #0
    27e0:	movt	r0, #0
    27e4:	ldr	r1, [r0]
    27e8:	str	r1, [sp, #36]	; 0x24
    27ec:	ldr	r1, [r0, #4]
    27f0:	str	r1, [sp, #40]	; 0x28
    27f4:	ldr	r1, [r0, #8]
    27f8:	str	r1, [sp, #44]	; 0x2c
    27fc:	ldr	r0, [r0, #12]
    2800:	str	r0, [sp, #48]	; 0x30
    2804:	ldr	r0, [sp, #176]	; 0xb0
    2808:	movw	r1, #0
    280c:	bl	25b8 <flatbuffers_has_identifier>
    2810:	cmp	r0, #0
    2814:	bne	2830 <verify_monster+0x7c>
    2818:	movw	r0, #0
    281c:	movt	r0, #0
    2820:	bl	0 <printf>
    2824:	mvn	r1, #0
    2828:	str	r1, [sp, #180]	; 0xb4
    282c:	b	36ec <verify_monster+0xf38>
    2830:	ldr	r0, [sp, #176]	; 0xb0
    2834:	movw	r1, #0
    2838:	movt	r1, #0
    283c:	bl	25b8 <flatbuffers_has_identifier>
    2840:	cmp	r0, #0
    2844:	bne	2860 <verify_monster+0xac>
    2848:	movw	r0, #0
    284c:	movt	r0, #0
    2850:	bl	0 <printf>
    2854:	mvn	r1, #0
    2858:	str	r1, [sp, #180]	; 0xb4
    285c:	b	36ec <verify_monster+0xf38>
    2860:	ldr	r0, [sp, #176]	; 0xb0
    2864:	movw	r1, #0
    2868:	movt	r1, #0
    286c:	bl	25b8 <flatbuffers_has_identifier>
    2870:	cmp	r0, #0
    2874:	bne	2890 <verify_monster+0xdc>
    2878:	movw	r0, #0
    287c:	movt	r0, #0
    2880:	bl	0 <printf>
    2884:	mvn	r1, #0
    2888:	str	r1, [sp, #180]	; 0xb4
    288c:	b	36ec <verify_monster+0xf38>
    2890:	ldr	r0, [sp, #176]	; 0xb0
    2894:	movw	r1, #0
    2898:	movt	r1, #0
    289c:	bl	25b8 <flatbuffers_has_identifier>
    28a0:	cmp	r0, #0
    28a4:	beq	28c0 <verify_monster+0x10c>
    28a8:	movw	r0, #0
    28ac:	movt	r0, #0
    28b0:	bl	0 <printf>
    28b4:	mvn	r1, #0
    28b8:	str	r1, [sp, #180]	; 0xb4
    28bc:	b	36ec <verify_monster+0xf38>
    28c0:	ldr	r0, [sp, #176]	; 0xb0
    28c4:	movw	r1, #0
    28c8:	movt	r1, #0
    28cc:	bl	25b8 <flatbuffers_has_identifier>
    28d0:	cmp	r0, #0
    28d4:	bne	28f0 <verify_monster+0x13c>
    28d8:	movw	r0, #0
    28dc:	movt	r0, #0
    28e0:	bl	0 <printf>
    28e4:	mvn	r1, #0
    28e8:	str	r1, [sp, #180]	; 0xb4
    28ec:	b	36ec <verify_monster+0xf38>
    28f0:	ldr	r0, [sp, #176]	; 0xb0
    28f4:	bl	25c <MyGame_Example_Monster_as_root>
    28f8:	str	r0, [sp, #172]	; 0xac
    28fc:	movw	r1, #0
    2900:	cmp	r0, r1
    2904:	bne	2920 <verify_monster+0x16c>
    2908:	movw	r0, #0
    290c:	movt	r0, #0
    2910:	bl	0 <printf>
    2914:	mvn	r1, #0
    2918:	str	r1, [sp, #180]	; 0xb4
    291c:	b	36ec <verify_monster+0xf38>
    2920:	ldr	r0, [sp, #172]	; 0xac
    2924:	bl	2d4 <MyGame_Example_Monster_hp>
    2928:	sxth	r0, r0
    292c:	cmp	r0, #80	; 0x50
    2930:	beq	294c <verify_monster+0x198>
    2934:	movw	r0, #0
    2938:	movt	r0, #0
    293c:	bl	0 <printf>
    2940:	mvn	r1, #0
    2944:	str	r1, [sp, #180]	; 0xb4
    2948:	b	36ec <verify_monster+0xf38>
    294c:	ldr	r0, [sp, #172]	; 0xac
    2950:	bl	53c <MyGame_Example_Monster_pos>
    2954:	str	r0, [sp, #144]	; 0x90
    2958:	movw	r1, #0
    295c:	cmp	r0, r1
    2960:	bne	297c <verify_monster+0x1c8>
    2964:	movw	r0, #0
    2968:	movt	r0, #0
    296c:	bl	0 <printf>
    2970:	mvn	r1, #0
    2974:	str	r1, [sp, #180]	; 0xb4
    2978:	b	36ec <verify_monster+0xf38>
    297c:	ldr	r0, [sp, #144]	; 0x90
    2980:	and	r0, r0, #15
    2984:	cmp	r0, #0
    2988:	beq	2998 <verify_monster+0x1e4>
    298c:	movw	r0, #0
    2990:	movt	r0, #0
    2994:	bl	0 <printf>
    2998:	ldr	r0, [sp, #144]	; 0x90
    299c:	bl	36f8 <MyGame_Example_Vec3_z>
    29a0:	vldr	s2, [pc, #936]	; 2d50 <verify_monster+0x59c>
    29a4:	vcmp.f32	s0, s2
    29a8:	vmrs	APSR_nzcv, fpscr
    29ac:	beq	29c8 <verify_monster+0x214>
    29b0:	movw	r0, #0
    29b4:	movt	r0, #0
    29b8:	bl	0 <printf>
    29bc:	mvn	r1, #0
    29c0:	str	r1, [sp, #180]	; 0xb4
    29c4:	b	36ec <verify_monster+0xf38>
    29c8:	ldr	r0, [sp, #144]	; 0x90
    29cc:	vldr	s0, [r0]
    29d0:	vmov.f32	s2, #112	; 0x3f800000  1.0
    29d4:	vcmp.f32	s0, s2
    29d8:	vmrs	APSR_nzcv, fpscr
    29dc:	bne	2a10 <verify_monster+0x25c>
    29e0:	ldr	r0, [sp, #144]	; 0x90
    29e4:	vldr	s0, [r0, #4]
    29e8:	vmov.f32	s2, #0	; 0x40000000  2.0
    29ec:	vcmp.f32	s0, s2
    29f0:	vmrs	APSR_nzcv, fpscr
    29f4:	bne	2a10 <verify_monster+0x25c>
    29f8:	vldr	s0, [pc, #848]	; 2d50 <verify_monster+0x59c>
    29fc:	ldr	r0, [sp, #144]	; 0x90
    2a00:	vldr	s2, [r0, #8]
    2a04:	vcmp.f32	s2, s0
    2a08:	vmrs	APSR_nzcv, fpscr
    2a0c:	beq	2a28 <verify_monster+0x274>
    2a10:	movw	r0, #0
    2a14:	movt	r0, #0
    2a18:	bl	0 <printf>
    2a1c:	mvn	r1, #0
    2a20:	str	r1, [sp, #180]	; 0xb4
    2a24:	b	36ec <verify_monster+0xf38>
    2a28:	add	r0, sp, #96	; 0x60
    2a2c:	bl	3748 <MyGame_Example_Vec3_clear>
    2a30:	ldr	r1, [sp, #144]	; 0x90
    2a34:	add	r2, sp, #96	; 0x60
    2a38:	str	r0, [sp, #16]
    2a3c:	mov	r0, r2
    2a40:	bl	378c <MyGame_Example_Vec3_copy_from_pe>
    2a44:	vldr	s0, [sp, #96]	; 0x60
    2a48:	vmov.f32	s2, #112	; 0x3f800000  1.0
    2a4c:	vcmp.f32	s0, s2
    2a50:	vmrs	APSR_nzcv, fpscr
    2a54:	bne	2a80 <verify_monster+0x2cc>
    2a58:	vldr	s0, [sp, #100]	; 0x64
    2a5c:	vmov.f32	s2, #0	; 0x40000000  2.0
    2a60:	vcmp.f32	s0, s2
    2a64:	vmrs	APSR_nzcv, fpscr
    2a68:	bne	2a80 <verify_monster+0x2cc>
    2a6c:	vldr	s0, [pc, #732]	; 2d50 <verify_monster+0x59c>
    2a70:	vldr	s2, [sp, #104]	; 0x68
    2a74:	vcmp.f32	s2, s0
    2a78:	vmrs	APSR_nzcv, fpscr
    2a7c:	beq	2a98 <verify_monster+0x2e4>
    2a80:	movw	r0, #0
    2a84:	movt	r0, #0
    2a88:	bl	0 <printf>
    2a8c:	mvn	r1, #0
    2a90:	str	r1, [sp, #180]	; 0xb4
    2a94:	b	36ec <verify_monster+0xf38>
    2a98:	ldr	r0, [sp, #144]	; 0x90
    2a9c:	vldr	d16, [r0, #16]
    2aa0:	vcmp.f64	d16, #0.0
    2aa4:	vmrs	APSR_nzcv, fpscr
    2aa8:	bne	2adc <verify_monster+0x328>
    2aac:	ldr	r0, [sp, #144]	; 0x90
    2ab0:	vldr	d16, [r0, #16]
    2ab4:	vcmp.f64	d16, #0.0
    2ab8:	vmrs	APSR_nzcv, fpscr
    2abc:	bne	2adc <verify_monster+0x328>
    2ac0:	ldr	r0, [sp, #144]	; 0x90
    2ac4:	add	r0, r0, #26
    2ac8:	ldr	r0, [r0]
    2acc:	cmp	r0, #0
    2ad0:	movwne	r0, #1
    2ad4:	cmp	r0, #0
    2ad8:	beq	2af4 <verify_monster+0x340>
    2adc:	movw	r0, #0
    2ae0:	movt	r0, #0
    2ae4:	bl	0 <printf>
    2ae8:	mvn	r1, #0
    2aec:	str	r1, [sp, #180]	; 0xb4
    2af0:	b	36ec <verify_monster+0xf38>
    2af4:	ldr	r0, [sp, #172]	; 0xac
    2af8:	bl	3850 <MyGame_Example_Monster_name>
    2afc:	str	r0, [sp, #140]	; 0x8c
    2b00:	ldr	r0, [sp, #140]	; 0x8c
    2b04:	movw	r1, #0
    2b08:	cmp	r0, r1
    2b0c:	beq	2b28 <verify_monster+0x374>
    2b10:	ldr	r0, [sp, #140]	; 0x8c
    2b14:	movw	r1, #0
    2b18:	movt	r1, #0
    2b1c:	bl	0 <strcmp>
    2b20:	cmp	r0, #0
    2b24:	beq	2b40 <verify_monster+0x38c>
    2b28:	movw	r0, #0
    2b2c:	movt	r0, #0
    2b30:	bl	0 <printf>
    2b34:	mvn	r1, #0
    2b38:	str	r1, [sp, #180]	; 0xb4
    2b3c:	b	36ec <verify_monster+0xf38>
    2b40:	ldr	r0, [sp, #172]	; 0xac
    2b44:	bl	3850 <MyGame_Example_Monster_name>
    2b48:	str	r0, [sp, #136]	; 0x88
    2b4c:	ldr	r0, [sp, #140]	; 0x8c
    2b50:	bl	3958 <flatbuffers_string_len>
    2b54:	cmp	r0, #9
    2b58:	bne	2b6c <verify_monster+0x3b8>
    2b5c:	ldr	r0, [sp, #136]	; 0x88
    2b60:	bl	3958 <flatbuffers_string_len>
    2b64:	cmp	r0, #9
    2b68:	beq	2b84 <verify_monster+0x3d0>
    2b6c:	movw	r0, #0
    2b70:	movt	r0, #0
    2b74:	bl	0 <printf>
    2b78:	mvn	r1, #0
    2b7c:	str	r1, [sp, #180]	; 0xb4
    2b80:	b	36ec <verify_monster+0xf38>
    2b84:	ldr	r0, [sp, #172]	; 0xac
    2b88:	bl	39a8 <MyGame_Example_Monster_color>
    2b8c:	sxtb	r0, r0
    2b90:	cmp	r0, #2
    2b94:	beq	2bb0 <verify_monster+0x3fc>
    2b98:	movw	r0, #0
    2b9c:	movt	r0, #0
    2ba0:	bl	0 <printf>
    2ba4:	mvn	r1, #0
    2ba8:	str	r1, [sp, #180]	; 0xb4
    2bac:	b	36ec <verify_monster+0xf38>
    2bb0:	movw	r0, #2
    2bb4:	sxtb	r0, r0
    2bb8:	bl	3a90 <MyGame_Example_Color_name>
    2bbc:	movw	r1, #0
    2bc0:	movt	r1, #0
    2bc4:	bl	0 <strcmp>
    2bc8:	cmp	r0, #0
    2bcc:	beq	2be8 <verify_monster+0x434>
    2bd0:	movw	r0, #0
    2bd4:	movt	r0, #0
    2bd8:	bl	0 <printf>
    2bdc:	mvn	r1, #0
    2be0:	str	r1, [sp, #180]	; 0xb4
    2be4:	b	36ec <verify_monster+0xf38>
    2be8:	movw	r0, #2
    2bec:	sxtb	r0, r0
    2bf0:	bl	3b14 <MyGame_Example_Color_is_known_value>
    2bf4:	cmp	r0, #0
    2bf8:	bne	2c14 <verify_monster+0x460>
    2bfc:	movw	r0, #0
    2c00:	movt	r0, #0
    2c04:	bl	0 <printf>
    2c08:	mvn	r1, #0
    2c0c:	str	r1, [sp, #180]	; 0xb4
    2c10:	b	36ec <verify_monster+0xf38>
    2c14:	movw	r0, #1
    2c18:	sxtb	r0, r0
    2c1c:	bl	3b14 <MyGame_Example_Color_is_known_value>
    2c20:	cmp	r0, #0
    2c24:	bne	2c40 <verify_monster+0x48c>
    2c28:	movw	r0, #0
    2c2c:	movt	r0, #0
    2c30:	bl	0 <printf>
    2c34:	mvn	r1, #0
    2c38:	str	r1, [sp, #180]	; 0xb4
    2c3c:	b	36ec <verify_monster+0xf38>
    2c40:	movw	r0, #4
    2c44:	sxtb	r0, r0
    2c48:	bl	3b14 <MyGame_Example_Color_is_known_value>
    2c4c:	cmp	r0, #0
    2c50:	beq	2c6c <verify_monster+0x4b8>
    2c54:	movw	r0, #0
    2c58:	movt	r0, #0
    2c5c:	bl	0 <printf>
    2c60:	mvn	r1, #0
    2c64:	str	r1, [sp, #180]	; 0xb4
    2c68:	b	36ec <verify_monster+0xf38>
    2c6c:	movw	r0, #8
    2c70:	sxtb	r0, r0
    2c74:	bl	3b14 <MyGame_Example_Color_is_known_value>
    2c78:	cmp	r0, #0
    2c7c:	bne	2c98 <verify_monster+0x4e4>
    2c80:	movw	r0, #0
    2c84:	movt	r0, #0
    2c88:	bl	0 <printf>
    2c8c:	mvn	r1, #0
    2c90:	str	r1, [sp, #180]	; 0xb4
    2c94:	b	36ec <verify_monster+0xf38>
    2c98:	movw	r0, #9
    2c9c:	sxtb	r0, r0
    2ca0:	bl	3b14 <MyGame_Example_Color_is_known_value>
    2ca4:	cmp	r0, #0
    2ca8:	beq	2cc4 <verify_monster+0x510>
    2cac:	movw	r0, #0
    2cb0:	movt	r0, #0
    2cb4:	bl	0 <printf>
    2cb8:	mvn	r1, #0
    2cbc:	str	r1, [sp, #180]	; 0xb4
    2cc0:	b	36ec <verify_monster+0xf38>
    2cc4:	movw	r0, #1
    2cc8:	and	r0, r0, #255	; 0xff
    2ccc:	bl	3b88 <MyGame_Example_Any_is_known_type>
    2cd0:	cmp	r0, #0
    2cd4:	bne	2cf0 <verify_monster+0x53c>
    2cd8:	movw	r0, #0
    2cdc:	movt	r0, #0
    2ce0:	bl	0 <printf>
    2ce4:	mvn	r1, #0
    2ce8:	str	r1, [sp, #180]	; 0xb4
    2cec:	b	36ec <verify_monster+0xf38>
    2cf0:	movw	r0, #42	; 0x2a
    2cf4:	and	r0, r0, #255	; 0xff
    2cf8:	bl	3b88 <MyGame_Example_Any_is_known_type>
    2cfc:	cmp	r0, #0
    2d00:	beq	2d1c <verify_monster+0x568>
    2d04:	movw	r0, #0
    2d08:	movt	r0, #0
    2d0c:	bl	0 <printf>
    2d10:	mvn	r1, #0
    2d14:	str	r1, [sp, #180]	; 0xb4
    2d18:	b	36ec <verify_monster+0xf38>
    2d1c:	ldr	r0, [sp, #172]	; 0xac
    2d20:	bl	3c18 <MyGame_Example_Monster_inventory>
    2d24:	str	r0, [sp, #32]
    2d28:	ldr	r0, [sp, #32]
    2d2c:	bl	3d14 <flatbuffers_uint8_vec_len>
    2d30:	cmp	r0, #10
    2d34:	beq	2d54 <verify_monster+0x5a0>
    2d38:	movw	r0, #0
    2d3c:	movt	r0, #0
    2d40:	bl	0 <printf>
    2d44:	mvn	r1, #0
    2d48:	str	r1, [sp, #180]	; 0xb4
    2d4c:	b	36ec <verify_monster+0xf38>
    2d50:	.word	0xc04ccccd
    2d54:	movw	r0, #0
    2d58:	str	r0, [sp, #28]
    2d5c:	ldr	r0, [sp, #28]
    2d60:	ldr	r1, [sp, #32]
    2d64:	str	r0, [sp, #12]
    2d68:	mov	r0, r1
    2d6c:	bl	3d14 <flatbuffers_uint8_vec_len>
    2d70:	ldr	r1, [sp, #12]
    2d74:	cmp	r1, r0
    2d78:	bcs	2dc8 <verify_monster+0x614>
    2d7c:	ldr	r0, [sp, #32]
    2d80:	ldr	r1, [sp, #28]
    2d84:	bl	3d34 <flatbuffers_uint8_vec_at>
    2d88:	and	r0, r0, #255	; 0xff
    2d8c:	ldr	r1, [sp, #28]
    2d90:	cmp	r0, r1
    2d94:	beq	2db4 <verify_monster+0x600>
    2d98:	ldr	r1, [sp, #28]
    2d9c:	movw	r0, #0
    2da0:	movt	r0, #0
    2da4:	bl	0 <printf>
    2da8:	mvn	r1, #0
    2dac:	str	r1, [sp, #180]	; 0xb4
    2db0:	b	36ec <verify_monster+0xf38>
    2db4:	b	2db8 <verify_monster+0x604>
    2db8:	ldr	r0, [sp, #28]
    2dbc:	add	r0, r0, #1
    2dc0:	str	r0, [sp, #28]
    2dc4:	b	2d5c <verify_monster+0x5a8>
    2dc8:	ldr	r0, [sp, #172]	; 0xac
    2dcc:	bl	3da0 <MyGame_Example_Monster_mana>
    2dd0:	sxth	r0, r0
    2dd4:	cmp	r0, #150	; 0x96
    2dd8:	beq	2df4 <verify_monster+0x640>
    2ddc:	movw	r0, #0
    2de0:	movt	r0, #0
    2de4:	bl	0 <printf>
    2de8:	mvn	r1, #0
    2dec:	str	r1, [sp, #180]	; 0xb4
    2df0:	b	36ec <verify_monster+0xf38>
    2df4:	ldr	r0, [sp, #172]	; 0xac
    2df8:	bl	3e88 <MyGame_Example_Monster_mana_is_present>
    2dfc:	cmp	r0, #0
    2e00:	beq	2e1c <verify_monster+0x668>
    2e04:	movw	r0, #0
    2e08:	movt	r0, #0
    2e0c:	bl	0 <printf>
    2e10:	mvn	r1, #0
    2e14:	str	r1, [sp, #180]	; 0xb4
    2e18:	b	36ec <verify_monster+0xf38>
    2e1c:	ldr	r0, [sp, #172]	; 0xac
    2e20:	bl	3bc <MyGame_Example_Monster_hp_is_present>
    2e24:	cmp	r0, #0
    2e28:	bne	2e44 <verify_monster+0x690>
    2e2c:	movw	r0, #0
    2e30:	movt	r0, #0
    2e34:	bl	0 <printf>
    2e38:	mvn	r1, #0
    2e3c:	str	r1, [sp, #180]	; 0xb4
    2e40:	b	36ec <verify_monster+0xf38>
    2e44:	ldr	r0, [sp, #172]	; 0xac
    2e48:	bl	47c <MyGame_Example_Monster_pos_is_present>
    2e4c:	cmp	r0, #0
    2e50:	bne	2e6c <verify_monster+0x6b8>
    2e54:	movw	r0, #0
    2e58:	movt	r0, #0
    2e5c:	bl	0 <printf>
    2e60:	mvn	r1, #0
    2e64:	str	r1, [sp, #180]	; 0xb4
    2e68:	b	36ec <verify_monster+0xf38>
    2e6c:	ldr	r0, [sp, #172]	; 0xac
    2e70:	bl	3f48 <MyGame_Example_Monster_test4>
    2e74:	str	r0, [sp, #92]	; 0x5c
    2e78:	ldr	r0, [sp, #92]	; 0x5c
    2e7c:	bl	4044 <MyGame_Example_Test_vec_len>
    2e80:	cmp	r0, #5
    2e84:	beq	2ea0 <verify_monster+0x6ec>
    2e88:	movw	r0, #0
    2e8c:	movt	r0, #0
    2e90:	bl	0 <printf>
    2e94:	mvn	r1, #0
    2e98:	str	r1, [sp, #180]	; 0xb4
    2e9c:	b	36ec <verify_monster+0xf38>
    2ea0:	movw	r0, #0
    2ea4:	str	r0, [sp, #28]
    2ea8:	ldr	r0, [sp, #28]
    2eac:	cmp	r0, #5
    2eb0:	bcs	2f70 <verify_monster+0x7bc>
    2eb4:	ldr	r0, [sp, #92]	; 0x5c
    2eb8:	ldr	r1, [sp, #28]
    2ebc:	bl	4094 <MyGame_Example_Test_vec_at>
    2ec0:	str	r0, [sp, #68]	; 0x44
    2ec4:	ldr	r0, [sp, #28]
    2ec8:	add	r1, sp, #72	; 0x48
    2ecc:	add	r0, r1, r0, lsl #2
    2ed0:	ldrsh	r0, [r0]
    2ed4:	ldr	r1, [sp, #68]	; 0x44
    2ed8:	str	r0, [sp, #8]
    2edc:	mov	r0, r1
    2ee0:	bl	40f8 <MyGame_Example_Test_a>
    2ee4:	sxth	r0, r0
    2ee8:	ldr	r1, [sp, #8]
    2eec:	cmp	r1, r0
    2ef0:	beq	2f10 <verify_monster+0x75c>
    2ef4:	ldr	r1, [sp, #28]
    2ef8:	movw	r0, #0
    2efc:	movt	r0, #0
    2f00:	bl	0 <printf>
    2f04:	mvn	r1, #0
    2f08:	str	r1, [sp, #180]	; 0xb4
    2f0c:	b	36ec <verify_monster+0xf38>
    2f10:	ldr	r0, [sp, #28]
    2f14:	add	r1, sp, #72	; 0x48
    2f18:	add	r0, r1, r0, lsl #2
    2f1c:	ldrsb	r0, [r0, #2]
    2f20:	ldr	r1, [sp, #68]	; 0x44
    2f24:	str	r0, [sp, #4]
    2f28:	mov	r0, r1
    2f2c:	bl	4148 <MyGame_Example_Test_b>
    2f30:	sxtb	r0, r0
    2f34:	ldr	r1, [sp, #4]
    2f38:	cmp	r1, r0
    2f3c:	beq	2f5c <verify_monster+0x7a8>
    2f40:	ldr	r1, [sp, #28]
    2f44:	movw	r0, #0
    2f48:	movt	r0, #0
    2f4c:	bl	0 <printf>
    2f50:	mvn	r1, #0
    2f54:	str	r1, [sp, #180]	; 0xb4
    2f58:	b	36ec <verify_monster+0xf38>
    2f5c:	b	2f60 <verify_monster+0x7ac>
    2f60:	ldr	r0, [sp, #28]
    2f64:	add	r0, r0, #1
    2f68:	str	r0, [sp, #28]
    2f6c:	b	2ea8 <verify_monster+0x6f4>
    2f70:	ldr	r0, [sp, #172]	; 0xac
    2f74:	bl	419c <MyGame_Example_Monster_testarrayoftables>
    2f78:	str	r0, [sp, #160]	; 0xa0
    2f7c:	ldr	r0, [sp, #160]	; 0xa0
    2f80:	bl	4298 <MyGame_Example_Monster_vec_len>
    2f84:	cmp	r0, #8
    2f88:	beq	2fa4 <verify_monster+0x7f0>
    2f8c:	movw	r0, #0
    2f90:	movt	r0, #0
    2f94:	bl	0 <printf>
    2f98:	mvn	r1, #0
    2f9c:	str	r1, [sp, #180]	; 0xb4
    2fa0:	b	36ec <verify_monster+0xf38>
    2fa4:	ldr	r0, [sp, #160]	; 0xa0
    2fa8:	movw	r1, #5
    2fac:	bl	42e8 <MyGame_Example_Monster_vec_at>
    2fb0:	str	r0, [sp, #168]	; 0xa8
    2fb4:	ldr	r0, [sp, #168]	; 0xa8
    2fb8:	movw	r1, #0
    2fbc:	cmp	r0, r1
    2fc0:	beq	2fc8 <verify_monster+0x814>
    2fc4:	b	2fe8 <verify_monster+0x834>
    2fc8:	movw	r0, #0
    2fcc:	movt	r0, #0
    2fd0:	movw	r1, #0
    2fd4:	movt	r1, #0
    2fd8:	movw	r2, #662	; 0x296
    2fdc:	movw	r3, #0
    2fe0:	movt	r3, #0
    2fe4:	bl	0 <__assert_fail>
    2fe8:	ldr	r0, [sp, #168]	; 0xa8
    2fec:	bl	3850 <MyGame_Example_Monster_name>
    2ff0:	str	r0, [sp, #140]	; 0x8c
    2ff4:	ldr	r0, [sp, #140]	; 0x8c
    2ff8:	movw	r1, #0
    2ffc:	movt	r1, #0
    3000:	bl	0 <strcmp>
    3004:	cmp	r0, #0
    3008:	beq	3024 <verify_monster+0x870>
    300c:	movw	r0, #0
    3010:	movt	r0, #0
    3014:	bl	0 <printf>
    3018:	mvn	r1, #0
    301c:	str	r1, [sp, #180]	; 0xb4
    3020:	b	36ec <verify_monster+0xf38>
    3024:	ldr	r0, [sp, #160]	; 0xa0
    3028:	movw	r1, #1
    302c:	bl	42e8 <MyGame_Example_Monster_vec_at>
    3030:	str	r0, [sp, #164]	; 0xa4
    3034:	ldr	r0, [sp, #164]	; 0xa4
    3038:	ldr	r1, [sp, #168]	; 0xa8
    303c:	cmp	r0, r1
    3040:	beq	305c <verify_monster+0x8a8>
    3044:	movw	r0, #0
    3048:	movt	r0, #0
    304c:	bl	0 <printf>
    3050:	mvn	r1, #0
    3054:	str	r1, [sp, #180]	; 0xb4
    3058:	b	36ec <verify_monster+0xf38>
    305c:	ldr	r0, [sp, #164]	; 0xa4
    3060:	bl	3850 <MyGame_Example_Monster_name>
    3064:	str	r0, [sp, #140]	; 0x8c
    3068:	ldr	r0, [sp, #140]	; 0x8c
    306c:	movw	r1, #0
    3070:	movt	r1, #0
    3074:	bl	0 <strcmp>
    3078:	cmp	r0, #0
    307c:	beq	309c <verify_monster+0x8e8>
    3080:	ldr	r1, [sp, #140]	; 0x8c
    3084:	movw	r0, #0
    3088:	movt	r0, #0
    308c:	bl	0 <printf>
    3090:	mvn	r1, #0
    3094:	str	r1, [sp, #180]	; 0xb4
    3098:	b	36ec <verify_monster+0xf38>
    309c:	ldr	r0, [sp, #160]	; 0xa0
    30a0:	movw	r1, #2
    30a4:	bl	42e8 <MyGame_Example_Monster_vec_at>
    30a8:	str	r0, [sp, #168]	; 0xa8
    30ac:	ldr	r0, [sp, #168]	; 0xa8
    30b0:	bl	3850 <MyGame_Example_Monster_name>
    30b4:	str	r0, [sp, #140]	; 0x8c
    30b8:	ldr	r0, [sp, #140]	; 0x8c
    30bc:	movw	r1, #0
    30c0:	movt	r1, #0
    30c4:	bl	0 <strcmp>
    30c8:	cmp	r0, #0
    30cc:	beq	30ec <verify_monster+0x938>
    30d0:	ldr	r1, [sp, #140]	; 0x8c
    30d4:	movw	r0, #0
    30d8:	movt	r0, #0
    30dc:	bl	0 <printf>
    30e0:	mvn	r1, #0
    30e4:	str	r1, [sp, #180]	; 0xb4
    30e8:	b	36ec <verify_monster+0xf38>
    30ec:	ldr	r0, [sp, #160]	; 0xa0
    30f0:	movw	r1, #0
    30f4:	bl	42e8 <MyGame_Example_Monster_vec_at>
    30f8:	str	r0, [sp, #168]	; 0xa8
    30fc:	ldr	r0, [sp, #168]	; 0xa8
    3100:	bl	3850 <MyGame_Example_Monster_name>
    3104:	str	r0, [sp, #140]	; 0x8c
    3108:	ldr	r0, [sp, #140]	; 0x8c
    310c:	movw	r1, #0
    3110:	movt	r1, #0
    3114:	bl	0 <strcmp>
    3118:	cmp	r0, #0
    311c:	beq	313c <verify_monster+0x988>
    3120:	ldr	r1, [sp, #140]	; 0x8c
    3124:	movw	r0, #0
    3128:	movt	r0, #0
    312c:	bl	0 <printf>
    3130:	mvn	r1, #0
    3134:	str	r1, [sp, #180]	; 0xb4
    3138:	b	36ec <verify_monster+0xf38>
    313c:	ldr	r0, [sp, #160]	; 0xa0
    3140:	movw	r1, #3
    3144:	bl	42e8 <MyGame_Example_Monster_vec_at>
    3148:	str	r0, [sp, #168]	; 0xa8
    314c:	ldr	r0, [sp, #168]	; 0xa8
    3150:	bl	3850 <MyGame_Example_Monster_name>
    3154:	str	r0, [sp, #140]	; 0x8c
    3158:	ldr	r0, [sp, #140]	; 0x8c
    315c:	movw	r1, #0
    3160:	movt	r1, #0
    3164:	bl	0 <strcmp>
    3168:	cmp	r0, #0
    316c:	beq	318c <verify_monster+0x9d8>
    3170:	ldr	r1, [sp, #140]	; 0x8c
    3174:	movw	r0, #0
    3178:	movt	r0, #0
    317c:	bl	0 <printf>
    3180:	mvn	r1, #0
    3184:	str	r1, [sp, #180]	; 0xb4
    3188:	b	36ec <verify_monster+0xf38>
    318c:	ldr	r0, [sp, #160]	; 0xa0
    3190:	movw	r1, #4
    3194:	bl	42e8 <MyGame_Example_Monster_vec_at>
    3198:	str	r0, [sp, #168]	; 0xa8
    319c:	ldr	r0, [sp, #168]	; 0xa8
    31a0:	bl	3850 <MyGame_Example_Monster_name>
    31a4:	str	r0, [sp, #140]	; 0x8c
    31a8:	ldr	r0, [sp, #140]	; 0x8c
    31ac:	movw	r1, #0
    31b0:	movt	r1, #0
    31b4:	bl	0 <strcmp>
    31b8:	cmp	r0, #0
    31bc:	beq	31dc <verify_monster+0xa28>
    31c0:	ldr	r1, [sp, #140]	; 0x8c
    31c4:	movw	r0, #0
    31c8:	movt	r0, #0
    31cc:	bl	0 <printf>
    31d0:	mvn	r1, #0
    31d4:	str	r1, [sp, #180]	; 0xb4
    31d8:	b	36ec <verify_monster+0xf38>
    31dc:	ldr	r0, [sp, #160]	; 0xa0
    31e0:	movw	r1, #6
    31e4:	bl	42e8 <MyGame_Example_Monster_vec_at>
    31e8:	str	r0, [sp, #168]	; 0xa8
    31ec:	ldr	r0, [sp, #168]	; 0xa8
    31f0:	bl	3850 <MyGame_Example_Monster_name>
    31f4:	str	r0, [sp, #140]	; 0x8c
    31f8:	ldr	r0, [sp, #140]	; 0x8c
    31fc:	movw	r1, #0
    3200:	movt	r1, #0
    3204:	bl	0 <strcmp>
    3208:	cmp	r0, #0
    320c:	beq	322c <verify_monster+0xa78>
    3210:	ldr	r1, [sp, #140]	; 0x8c
    3214:	movw	r0, #0
    3218:	movt	r0, #0
    321c:	bl	0 <printf>
    3220:	mvn	r1, #0
    3224:	str	r1, [sp, #180]	; 0xb4
    3228:	b	36ec <verify_monster+0xf38>
    322c:	ldr	r0, [sp, #160]	; 0xa0
    3230:	movw	r1, #7
    3234:	bl	42e8 <MyGame_Example_Monster_vec_at>
    3238:	str	r0, [sp, #168]	; 0xa8
    323c:	ldr	r0, [sp, #168]	; 0xa8
    3240:	bl	3850 <MyGame_Example_Monster_name>
    3244:	str	r0, [sp, #140]	; 0x8c
    3248:	ldr	r0, [sp, #140]	; 0x8c
    324c:	movw	r1, #0
    3250:	movt	r1, #0
    3254:	bl	0 <strcmp>
    3258:	cmp	r0, #0
    325c:	beq	327c <verify_monster+0xac8>
    3260:	ldr	r1, [sp, #140]	; 0x8c
    3264:	movw	r0, #0
    3268:	movt	r0, #0
    326c:	bl	0 <printf>
    3270:	mvn	r1, #0
    3274:	str	r1, [sp, #180]	; 0xb4
    3278:	b	36ec <verify_monster+0xf38>
    327c:	ldr	r0, [sp, #172]	; 0xac
    3280:	bl	436c <MyGame_Example_Monster_testarrayofstring>
    3284:	str	r0, [sp, #64]	; 0x40
    3288:	ldr	r0, [sp, #64]	; 0x40
    328c:	bl	4468 <flatbuffers_string_vec_len>
    3290:	cmp	r0, #3
    3294:	beq	32b0 <verify_monster+0xafc>
    3298:	movw	r0, #0
    329c:	movt	r0, #0
    32a0:	bl	0 <printf>
    32a4:	mvn	r1, #0
    32a8:	str	r1, [sp, #180]	; 0xb4
    32ac:	b	36ec <verify_monster+0xf38>
    32b0:	ldr	r0, [sp, #64]	; 0x40
    32b4:	movw	r1, #0
    32b8:	bl	44b8 <flatbuffers_string_vec_at>
    32bc:	movw	r1, #0
    32c0:	movt	r1, #0
    32c4:	bl	0 <strcmp>
    32c8:	cmp	r0, #0
    32cc:	beq	32e8 <verify_monster+0xb34>
    32d0:	movw	r0, #0
    32d4:	movt	r0, #0
    32d8:	bl	0 <printf>
    32dc:	mvn	r1, #0
    32e0:	str	r1, [sp, #180]	; 0xb4
    32e4:	b	36ec <verify_monster+0xf38>
    32e8:	ldr	r0, [sp, #64]	; 0x40
    32ec:	movw	r1, #1
    32f0:	bl	44b8 <flatbuffers_string_vec_at>
    32f4:	str	r0, [sp, #60]	; 0x3c
    32f8:	ldr	r0, [sp, #60]	; 0x3c
    32fc:	bl	3958 <flatbuffers_string_len>
    3300:	cmp	r0, #2
    3304:	beq	3320 <verify_monster+0xb6c>
    3308:	movw	r0, #0
    330c:	movt	r0, #0
    3310:	bl	0 <printf>
    3314:	mvn	r1, #0
    3318:	str	r1, [sp, #180]	; 0xb4
    331c:	b	36ec <verify_monster+0xf38>
    3320:	ldr	r0, [sp, #60]	; 0x3c
    3324:	ldrh	r0, [r0]
    3328:	subs	r0, r0, #44	; 0x2c
    332c:	movwne	r0, #1
    3330:	cmp	r0, #0
    3334:	beq	3350 <verify_monster+0xb9c>
    3338:	movw	r0, #0
    333c:	movt	r0, #0
    3340:	bl	0 <printf>
    3344:	mvn	r1, #0
    3348:	str	r1, [sp, #180]	; 0xb4
    334c:	b	36ec <verify_monster+0xf38>
    3350:	ldr	r0, [sp, #64]	; 0x40
    3354:	movw	r1, #2
    3358:	bl	44b8 <flatbuffers_string_vec_at>
    335c:	movw	r1, #0
    3360:	movt	r1, #0
    3364:	bl	0 <strcmp>
    3368:	cmp	r0, #0
    336c:	beq	3388 <verify_monster+0xbd4>
    3370:	movw	r0, #0
    3374:	movt	r0, #0
    3378:	bl	0 <printf>
    337c:	mvn	r1, #0
    3380:	str	r1, [sp, #180]	; 0xb4
    3384:	b	36ec <verify_monster+0xf38>
    3388:	ldr	r0, [sp, #172]	; 0xac
    338c:	bl	4540 <MyGame_Example_Monster_testarrayofbools_is_present>
    3390:	cmp	r0, #0
    3394:	bne	33b0 <verify_monster+0xbfc>
    3398:	movw	r0, #0
    339c:	movt	r0, #0
    33a0:	bl	0 <printf>
    33a4:	mvn	r1, #0
    33a8:	str	r1, [sp, #180]	; 0xb4
    33ac:	b	36ec <verify_monster+0xf38>
    33b0:	ldr	r0, [sp, #172]	; 0xac
    33b4:	bl	4600 <MyGame_Example_Monster_testarrayofbools>
    33b8:	str	r0, [sp, #56]	; 0x38
    33bc:	ldr	r0, [sp, #56]	; 0x38
    33c0:	bl	46fc <flatbuffers_bool_vec_len>
    33c4:	cmp	r0, #4
    33c8:	beq	33e4 <verify_monster+0xc30>
    33cc:	movw	r0, #0
    33d0:	movt	r0, #0
    33d4:	bl	0 <printf>
    33d8:	mvn	r1, #0
    33dc:	str	r1, [sp, #180]	; 0xb4
    33e0:	b	36ec <verify_monster+0xf38>
    33e4:	movw	r0, #0
    33e8:	str	r0, [sp, #28]
    33ec:	ldr	r0, [sp, #28]
    33f0:	cmp	r0, #4
    33f4:	bcs	344c <verify_monster+0xc98>
    33f8:	ldr	r0, [sp, #56]	; 0x38
    33fc:	ldr	r1, [sp, #28]
    3400:	bl	471c <flatbuffers_bool_vec_at>
    3404:	ldr	r1, [sp, #28]
    3408:	add	r2, sp, #36	; 0x24
    340c:	add	r1, r2, r1, lsl #2
    3410:	ldr	r1, [r1]
    3414:	cmp	r0, r1
    3418:	beq	3438 <verify_monster+0xc84>
    341c:	ldr	r1, [sp, #28]
    3420:	movw	r0, #0
    3424:	movt	r0, #0
    3428:	bl	0 <printf>
    342c:	mvn	r1, #0
    3430:	str	r1, [sp, #180]	; 0xb4
    3434:	b	36ec <verify_monster+0xf38>
    3438:	b	343c <verify_monster+0xc88>
    343c:	ldr	r0, [sp, #28]
    3440:	add	r0, r0, #1
    3444:	str	r0, [sp, #28]
    3448:	b	33ec <verify_monster+0xc38>
    344c:	ldr	r0, [sp, #172]	; 0xac
    3450:	bl	4788 <MyGame_Example_Monster_test_type>
    3454:	strb	r0, [sp, #159]	; 0x9f
    3458:	ldrb	r0, [sp, #159]	; 0x9f
    345c:	cmp	r0, #1
    3460:	beq	347c <verify_monster+0xcc8>
    3464:	movw	r0, #0
    3468:	movt	r0, #0
    346c:	bl	0 <printf>
    3470:	mvn	r1, #0
    3474:	str	r1, [sp, #180]	; 0xb4
    3478:	b	36ec <verify_monster+0xf38>
    347c:	ldr	r0, [sp, #172]	; 0xac
    3480:	bl	4870 <MyGame_Example_Monster_test>
    3484:	str	r0, [sp, #168]	; 0xa8
    3488:	ldr	r0, [sp, #168]	; 0xa8
    348c:	bl	3850 <MyGame_Example_Monster_name>
    3490:	movw	r1, #0
    3494:	movt	r1, #0
    3498:	bl	0 <strcmp>
    349c:	cmp	r0, #0
    34a0:	beq	34bc <verify_monster+0xd08>
    34a4:	movw	r0, #0
    34a8:	movt	r0, #0
    34ac:	bl	0 <printf>
    34b0:	mvn	r1, #0
    34b4:	str	r1, [sp, #180]	; 0xb4
    34b8:	b	36ec <verify_monster+0xf38>
    34bc:	ldr	r0, [sp, #172]	; 0xac
    34c0:	bl	4968 <MyGame_Example_Monster_enemy>
    34c4:	str	r0, [sp, #168]	; 0xa8
    34c8:	ldr	r0, [sp, #168]	; 0xa8
    34cc:	bl	3850 <MyGame_Example_Monster_name>
    34d0:	movw	r1, #0
    34d4:	movt	r1, #0
    34d8:	bl	0 <strcmp>
    34dc:	cmp	r0, #0
    34e0:	beq	34fc <verify_monster+0xd48>
    34e4:	movw	r0, #0
    34e8:	movt	r0, #0
    34ec:	bl	0 <printf>
    34f0:	mvn	r1, #0
    34f4:	str	r1, [sp, #180]	; 0xb4
    34f8:	b	36ec <verify_monster+0xf38>
    34fc:	ldr	r0, [sp, #168]	; 0xa8
    3500:	bl	4788 <MyGame_Example_Monster_test_type>
    3504:	and	r0, r0, #255	; 0xff
    3508:	cmp	r0, #0
    350c:	beq	3528 <verify_monster+0xd74>
    3510:	movw	r0, #0
    3514:	movt	r0, #0
    3518:	bl	0 <printf>
    351c:	mvn	r1, #0
    3520:	str	r1, [sp, #180]	; 0xb4
    3524:	b	36ec <verify_monster+0xf38>
    3528:	ldr	r1, [sp, #172]	; 0xac
    352c:	add	r0, sp, #20
    3530:	bl	4a60 <MyGame_Example_Monster_test_union>
    3534:	ldr	r0, [sp, #20]
    3538:	str	r0, [sp, #148]	; 0x94
    353c:	ldr	r0, [sp, #24]
    3540:	str	r0, [sp, #152]	; 0x98
    3544:	ldrb	r0, [sp, #148]	; 0x94
    3548:	ldrb	r1, [sp, #159]	; 0x9f
    354c:	cmp	r0, r1
    3550:	beq	356c <verify_monster+0xdb8>
    3554:	movw	r0, #0
    3558:	movt	r0, #0
    355c:	bl	0 <printf>
    3560:	mvn	r1, #0
    3564:	str	r1, [sp, #180]	; 0xb4
    3568:	b	36ec <verify_monster+0xf38>
    356c:	ldr	r0, [sp, #152]	; 0x98
    3570:	ldr	r1, [sp, #172]	; 0xac
    3574:	str	r0, [sp]
    3578:	mov	r0, r1
    357c:	bl	4870 <MyGame_Example_Monster_test>
    3580:	ldr	r1, [sp]
    3584:	cmp	r1, r0
    3588:	beq	35a4 <verify_monster+0xdf0>
    358c:	movw	r0, #0
    3590:	movt	r0, #0
    3594:	bl	0 <printf>
    3598:	mvn	r1, #0
    359c:	str	r1, [sp, #180]	; 0xb4
    35a0:	b	36ec <verify_monster+0xf38>
    35a4:	ldr	r0, [sp, #168]	; 0xa8
    35a8:	bl	419c <MyGame_Example_Monster_testarrayoftables>
    35ac:	str	r0, [sp, #160]	; 0xa0
    35b0:	ldr	r0, [sp, #160]	; 0xa0
    35b4:	bl	4298 <MyGame_Example_Monster_vec_len>
    35b8:	str	r0, [sp, #28]
    35bc:	ldr	r0, [sp, #160]	; 0xa0
    35c0:	ldr	r1, [sp, #28]
    35c4:	sub	r1, r1, #1
    35c8:	bl	42e8 <MyGame_Example_Monster_vec_at>
    35cc:	str	r0, [sp, #168]	; 0xa8
    35d0:	ldr	r0, [sp, #168]	; 0xa8
    35d4:	bl	4788 <MyGame_Example_Monster_test_type>
    35d8:	and	r0, r0, #255	; 0xff
    35dc:	cmp	r0, #1
    35e0:	beq	35fc <verify_monster+0xe48>
    35e4:	movw	r0, #0
    35e8:	movt	r0, #0
    35ec:	bl	0 <printf>
    35f0:	mvn	r1, #0
    35f4:	str	r1, [sp, #180]	; 0xb4
    35f8:	b	36ec <verify_monster+0xf38>
    35fc:	ldr	r0, [sp, #168]	; 0xa8
    3600:	bl	4870 <MyGame_Example_Monster_test>
    3604:	str	r0, [sp, #168]	; 0xa8
    3608:	ldr	r0, [sp, #168]	; 0xa8
    360c:	bl	3850 <MyGame_Example_Monster_name>
    3610:	movw	r1, #0
    3614:	movt	r1, #0
    3618:	bl	0 <strcmp>
    361c:	cmp	r0, #0
    3620:	beq	363c <verify_monster+0xe88>
    3624:	movw	r0, #0
    3628:	movt	r0, #0
    362c:	bl	0 <printf>
    3630:	mvn	r1, #0
    3634:	str	r1, [sp, #180]	; 0xb4
    3638:	b	36ec <verify_monster+0xf38>
    363c:	ldr	r0, [sp, #172]	; 0xac
    3640:	bl	4ac4 <MyGame_Example_Monster_testbool>
    3644:	sxtb	r0, r0
    3648:	cmp	r0, #0
    364c:	beq	3668 <verify_monster+0xeb4>
    3650:	movw	r0, #0
    3654:	movt	r0, #0
    3658:	bl	0 <printf>
    365c:	mvn	r1, #0
    3660:	str	r1, [sp, #180]	; 0xb4
    3664:	b	36ec <verify_monster+0xf38>
    3668:	ldr	r0, [sp, #172]	; 0xac
    366c:	bl	4bac <MyGame_Example_Monster_testempty_is_present>
    3670:	cmp	r0, #0
    3674:	bne	3690 <verify_monster+0xedc>
    3678:	movw	r0, #0
    367c:	movt	r0, #0
    3680:	bl	0 <printf>
    3684:	mvn	r1, #0
    3688:	str	r1, [sp, #180]	; 0xb4
    368c:	b	36ec <verify_monster+0xf38>
    3690:	ldr	r0, [sp, #172]	; 0xac
    3694:	bl	4c6c <MyGame_Example_Monster_testempty>
    3698:	str	r0, [sp, #52]	; 0x34
    369c:	ldr	r0, [sp, #52]	; 0x34
    36a0:	bl	4d64 <MyGame_Example_Stat_id_is_present>
    36a4:	cmp	r0, #0
    36a8:	bne	36cc <verify_monster+0xf18>
    36ac:	ldr	r0, [sp, #52]	; 0x34
    36b0:	bl	4e24 <MyGame_Example_Stat_val_is_present>
    36b4:	cmp	r0, #0
    36b8:	bne	36cc <verify_monster+0xf18>
    36bc:	ldr	r0, [sp, #52]	; 0x34
    36c0:	bl	4ee4 <MyGame_Example_Stat_count_is_present>
    36c4:	cmp	r0, #0
    36c8:	beq	36e4 <verify_monster+0xf30>
    36cc:	movw	r0, #0
    36d0:	movt	r0, #0
    36d4:	bl	0 <printf>
    36d8:	mvn	r1, #0
    36dc:	str	r1, [sp, #180]	; 0xb4
    36e0:	b	36ec <verify_monster+0xf38>
    36e4:	movw	r0, #0
    36e8:	str	r0, [sp, #180]	; 0xb4
    36ec:	ldr	r0, [sp, #180]	; 0xb4
    36f0:	mov	sp, fp
    36f4:	pop	{fp, pc}

000036f8 <MyGame_Example_Vec3_z>:
    36f8:	push	{fp, lr}
    36fc:	mov	fp, sp
    3700:	sub	sp, sp, #8
    3704:	str	r0, [sp, #4]
    3708:	ldr	r0, [sp, #4]
    370c:	movw	r1, #0
    3710:	cmp	r0, r1
    3714:	beq	372c <MyGame_Example_Vec3_z+0x34>
    3718:	ldr	r0, [sp, #4]
    371c:	add	r0, r0, #8
    3720:	bl	10530 <flatbuffers_float_read_from_pe>
    3724:	vstr	s0, [sp]
    3728:	b	3738 <MyGame_Example_Vec3_z+0x40>
    372c:	vldr	s0, [pc, #16]	; 3744 <MyGame_Example_Vec3_z+0x4c>
    3730:	vstr	s0, [sp]
    3734:	b	3738 <MyGame_Example_Vec3_z+0x40>
    3738:	vldr	s0, [sp]
    373c:	mov	sp, fp
    3740:	pop	{fp, pc}
    3744:	.word	0x00000000

00003748 <MyGame_Example_Vec3_clear>:
    3748:	push	{fp, lr}
    374c:	mov	fp, sp
    3750:	sub	sp, sp, #16
    3754:	str	r0, [fp, #-4]
    3758:	ldr	r0, [fp, #-4]
    375c:	str	r0, [sp, #8]
    3760:	bl	11a78 <MyGame_Example_Vec3__size>
    3764:	ldr	r1, [sp, #8]
    3768:	str	r0, [sp, #4]
    376c:	mov	r0, r1
    3770:	movw	r2, #0
    3774:	and	r1, r2, #255	; 0xff
    3778:	ldr	r2, [sp, #4]
    377c:	bl	0 <memset>
    3780:	ldr	r0, [sp, #8]
    3784:	mov	sp, fp
    3788:	pop	{fp, pc}

0000378c <MyGame_Example_Vec3_copy_from_pe>:
    378c:	push	{fp, lr}
    3790:	mov	fp, sp
    3794:	sub	sp, sp, #32
    3798:	str	r0, [fp, #-4]
    379c:	str	r1, [fp, #-8]
    37a0:	ldr	r0, [fp, #-4]
    37a4:	ldr	r1, [fp, #-8]
    37a8:	bl	11a80 <flatbuffers_float_copy_from_pe>
    37ac:	ldr	r1, [fp, #-4]
    37b0:	add	r1, r1, #4
    37b4:	ldr	r2, [fp, #-8]
    37b8:	add	r2, r2, #4
    37bc:	str	r0, [fp, #-12]
    37c0:	mov	r0, r1
    37c4:	mov	r1, r2
    37c8:	bl	11a80 <flatbuffers_float_copy_from_pe>
    37cc:	ldr	r1, [fp, #-4]
    37d0:	add	r1, r1, #8
    37d4:	ldr	r2, [fp, #-8]
    37d8:	add	r2, r2, #8
    37dc:	str	r0, [sp, #16]
    37e0:	mov	r0, r1
    37e4:	mov	r1, r2
    37e8:	bl	11a80 <flatbuffers_float_copy_from_pe>
    37ec:	ldr	r1, [fp, #-4]
    37f0:	add	r1, r1, #16
    37f4:	ldr	r2, [fp, #-8]
    37f8:	add	r2, r2, #16
    37fc:	str	r0, [sp, #12]
    3800:	mov	r0, r1
    3804:	mov	r1, r2
    3808:	bl	11ab4 <flatbuffers_double_copy_from_pe>
    380c:	ldr	r1, [fp, #-8]
    3810:	ldrb	r1, [r1, #24]
    3814:	ldr	r2, [fp, #-4]
    3818:	strb	r1, [r2, #24]
    381c:	ldr	r1, [fp, #-4]
    3820:	add	r1, r1, #26
    3824:	ldr	r2, [fp, #-8]
    3828:	add	r2, r2, #26
    382c:	str	r0, [sp, #8]
    3830:	mov	r0, r1
    3834:	mov	r1, r2
    3838:	bl	11ae8 <MyGame_Example_Test_copy_from_pe>
    383c:	ldr	r1, [fp, #-4]
    3840:	str	r0, [sp, #4]
    3844:	mov	r0, r1
    3848:	mov	sp, fp
    384c:	pop	{fp, pc}

00003850 <MyGame_Example_Monster_name>:
    3850:	push	{fp, lr}
    3854:	mov	fp, sp
    3858:	sub	sp, sp, #24
    385c:	str	r0, [fp, #-4]
    3860:	movw	r0, #0
    3864:	strh	r0, [fp, #-10]
    3868:	ldr	r0, [fp, #-4]
    386c:	movw	r1, #0
    3870:	cmp	r0, r1
    3874:	beq	3880 <MyGame_Example_Monster_name+0x30>
    3878:	b	387c <MyGame_Example_Monster_name+0x2c>
    387c:	b	38a0 <MyGame_Example_Monster_name+0x50>
    3880:	movw	r0, #0
    3884:	movt	r0, #0
    3888:	movw	r1, #0
    388c:	movt	r1, #0
    3890:	movw	r2, #699	; 0x2bb
    3894:	movw	r3, #0
    3898:	movt	r3, #0
    389c:	bl	0 <__assert_fail>
    38a0:	mov	r0, #3
    38a4:	strh	r0, [sp, #12]
    38a8:	ldr	r0, [fp, #-4]
    38ac:	str	r0, [sp, #4]
    38b0:	bl	f4c8 <__flatbuffers_soffset_read_from_pe>
    38b4:	ldr	r1, [sp, #4]
    38b8:	sub	r0, r1, r0
    38bc:	str	r0, [sp, #8]
    38c0:	ldr	r0, [sp, #8]
    38c4:	bl	f4ec <__flatbuffers_voffset_read_from_pe>
    38c8:	ldrh	r1, [sp, #12]
    38cc:	add	r1, r1, #3
    38d0:	lsl	r1, r1, #1
    38d4:	cmp	r0, r1
    38d8:	bcc	38f4 <MyGame_Example_Monster_name+0xa4>
    38dc:	ldr	r0, [sp, #8]
    38e0:	ldrh	r1, [sp, #12]
    38e4:	add	r0, r0, r1, lsl #1
    38e8:	add	r0, r0, #4
    38ec:	bl	f4ec <__flatbuffers_voffset_read_from_pe>
    38f0:	strh	r0, [fp, #-10]
    38f4:	ldrsh	r0, [fp, #-10]
    38f8:	cmp	r0, #0
    38fc:	beq	3938 <MyGame_Example_Monster_name+0xe8>
    3900:	ldr	r0, [fp, #-4]
    3904:	ldrh	r1, [fp, #-10]
    3908:	add	r0, r0, r1
    390c:	str	r0, [fp, #-8]
    3910:	ldr	r0, [fp, #-8]
    3914:	add	r0, r0, #4
    3918:	ldr	r1, [fp, #-8]
    391c:	str	r0, [sp]
    3920:	mov	r0, r1
    3924:	bl	f490 <__flatbuffers_uoffset_read_from_pe>
    3928:	ldr	r1, [sp]
    392c:	add	r0, r1, r0
    3930:	mov	sp, fp
    3934:	pop	{fp, pc}
    3938:	movw	r0, #0
    393c:	movt	r0, #0
    3940:	movw	r1, #0
    3944:	movt	r1, #0
    3948:	movw	r2, #699	; 0x2bb
    394c:	movw	r3, #0
    3950:	movt	r3, #0
    3954:	bl	0 <__assert_fail>

00003958 <flatbuffers_string_len>:
    3958:	push	{fp, lr}
    395c:	mov	fp, sp
    3960:	sub	sp, sp, #8
    3964:	str	r0, [sp, #4]
    3968:	ldr	r0, [sp, #4]
    396c:	movw	r1, #0
    3970:	cmp	r0, r1
    3974:	beq	3990 <flatbuffers_string_len+0x38>
    3978:	ldr	r0, [sp, #4]
    397c:	mvn	r1, #3
    3980:	add	r0, r0, r1
    3984:	bl	f490 <__flatbuffers_uoffset_read_from_pe>
    3988:	str	r0, [sp]
    398c:	b	399c <flatbuffers_string_len+0x44>
    3990:	movw	r0, #0
    3994:	str	r0, [sp]
    3998:	b	399c <flatbuffers_string_len+0x44>
    399c:	ldr	r0, [sp]
    39a0:	mov	sp, fp
    39a4:	pop	{fp, pc}

000039a8 <MyGame_Example_Monster_color>:
    39a8:	push	{fp, lr}
    39ac:	mov	fp, sp
    39b0:	sub	sp, sp, #24
    39b4:	str	r0, [fp, #-4]
    39b8:	movw	r0, #0
    39bc:	strh	r0, [fp, #-6]
    39c0:	ldr	r0, [fp, #-4]
    39c4:	movw	r1, #0
    39c8:	cmp	r0, r1
    39cc:	beq	39d8 <MyGame_Example_Monster_color+0x30>
    39d0:	b	39d4 <MyGame_Example_Monster_color+0x2c>
    39d4:	b	39f8 <MyGame_Example_Monster_color+0x50>
    39d8:	movw	r0, #0
    39dc:	movt	r0, #0
    39e0:	movw	r1, #0
    39e4:	movt	r1, #0
    39e8:	movw	r2, #705	; 0x2c1
    39ec:	movw	r3, #0
    39f0:	movt	r3, #0
    39f4:	bl	0 <__assert_fail>
    39f8:	mov	r0, #6
    39fc:	strh	r0, [fp, #-8]
    3a00:	ldr	r0, [fp, #-4]
    3a04:	str	r0, [sp, #8]
    3a08:	bl	f4c8 <__flatbuffers_soffset_read_from_pe>
    3a0c:	ldr	r1, [sp, #8]
    3a10:	sub	r0, r1, r0
    3a14:	str	r0, [sp, #12]
    3a18:	ldr	r0, [sp, #12]
    3a1c:	bl	f4ec <__flatbuffers_voffset_read_from_pe>
    3a20:	ldrh	r1, [fp, #-8]
    3a24:	add	r1, r1, #3
    3a28:	lsl	r1, r1, #1
    3a2c:	cmp	r0, r1
    3a30:	bcc	3a4c <MyGame_Example_Monster_color+0xa4>
    3a34:	ldr	r0, [sp, #12]
    3a38:	ldrh	r1, [fp, #-8]
    3a3c:	add	r0, r0, r1, lsl #1
    3a40:	add	r0, r0, #4
    3a44:	bl	f4ec <__flatbuffers_voffset_read_from_pe>
    3a48:	strh	r0, [fp, #-6]
    3a4c:	ldrh	r0, [fp, #-6]
    3a50:	cmp	r0, #0
    3a54:	beq	3a74 <MyGame_Example_Monster_color+0xcc>
    3a58:	ldr	r0, [fp, #-4]
    3a5c:	ldrh	r1, [fp, #-6]
    3a60:	add	r0, r0, r1
    3a64:	bl	11b60 <MyGame_Example_Color_read_from_pe>
    3a68:	sxtb	r0, r0
    3a6c:	str	r0, [sp, #4]
    3a70:	b	3a80 <MyGame_Example_Monster_color+0xd8>
    3a74:	movw	r0, #8
    3a78:	str	r0, [sp, #4]
    3a7c:	b	3a80 <MyGame_Example_Monster_color+0xd8>
    3a80:	ldr	r0, [sp, #4]
    3a84:	sxtb	r0, r0
    3a88:	mov	sp, fp
    3a8c:	pop	{fp, pc}

00003a90 <MyGame_Example_Color_name>:
    3a90:	sub	sp, sp, #12
    3a94:	strb	r0, [sp, #7]
    3a98:	ldrsb	r0, [sp, #7]
    3a9c:	cmp	r0, #1
    3aa0:	str	r0, [sp]
    3aa4:	beq	3acc <MyGame_Example_Color_name+0x3c>
    3aa8:	b	3aac <MyGame_Example_Color_name+0x1c>
    3aac:	ldr	r0, [sp]
    3ab0:	cmp	r0, #2
    3ab4:	beq	3adc <MyGame_Example_Color_name+0x4c>
    3ab8:	b	3abc <MyGame_Example_Color_name+0x2c>
    3abc:	ldr	r0, [sp]
    3ac0:	cmp	r0, #8
    3ac4:	beq	3aec <MyGame_Example_Color_name+0x5c>
    3ac8:	b	3afc <MyGame_Example_Color_name+0x6c>
    3acc:	movw	r0, #0
    3ad0:	movt	r0, #0
    3ad4:	str	r0, [sp, #8]
    3ad8:	b	3b08 <MyGame_Example_Color_name+0x78>
    3adc:	movw	r0, #0
    3ae0:	movt	r0, #0
    3ae4:	str	r0, [sp, #8]
    3ae8:	b	3b08 <MyGame_Example_Color_name+0x78>
    3aec:	movw	r0, #0
    3af0:	movt	r0, #0
    3af4:	str	r0, [sp, #8]
    3af8:	b	3b08 <MyGame_Example_Color_name+0x78>
    3afc:	movw	r0, #0
    3b00:	movt	r0, #0
    3b04:	str	r0, [sp, #8]
    3b08:	ldr	r0, [sp, #8]
    3b0c:	add	sp, sp, #12
    3b10:	bx	lr

00003b14 <MyGame_Example_Color_is_known_value>:
    3b14:	sub	sp, sp, #12
    3b18:	strb	r0, [sp, #7]
    3b1c:	ldrsb	r0, [sp, #7]
    3b20:	cmp	r0, #1
    3b24:	str	r0, [sp]
    3b28:	beq	3b50 <MyGame_Example_Color_is_known_value+0x3c>
    3b2c:	b	3b30 <MyGame_Example_Color_is_known_value+0x1c>
    3b30:	ldr	r0, [sp]
    3b34:	cmp	r0, #2
    3b38:	beq	3b5c <MyGame_Example_Color_is_known_value+0x48>
    3b3c:	b	3b40 <MyGame_Example_Color_is_known_value+0x2c>
    3b40:	ldr	r0, [sp]
    3b44:	cmp	r0, #8
    3b48:	beq	3b68 <MyGame_Example_Color_is_known_value+0x54>
    3b4c:	b	3b74 <MyGame_Example_Color_is_known_value+0x60>
    3b50:	movw	r0, #1
    3b54:	str	r0, [sp, #8]
    3b58:	b	3b7c <MyGame_Example_Color_is_known_value+0x68>
    3b5c:	movw	r0, #1
    3b60:	str	r0, [sp, #8]
    3b64:	b	3b7c <MyGame_Example_Color_is_known_value+0x68>
    3b68:	movw	r0, #1
    3b6c:	str	r0, [sp, #8]
    3b70:	b	3b7c <MyGame_Example_Color_is_known_value+0x68>
    3b74:	movw	r0, #0
    3b78:	str	r0, [sp, #8]
    3b7c:	ldr	r0, [sp, #8]
    3b80:	add	sp, sp, #12
    3b84:	bx	lr

00003b88 <MyGame_Example_Any_is_known_type>:
    3b88:	sub	sp, sp, #12
    3b8c:	strb	r0, [sp, #7]
    3b90:	ldrb	r0, [sp, #7]
    3b94:	mov	r1, r0
    3b98:	cmp	r0, #4
    3b9c:	str	r1, [sp]
    3ba0:	bhi	3c04 <MyGame_Example_Any_is_known_type+0x7c>
    3ba4:	add	r0, pc, #8
    3ba8:	ldr	r1, [sp]
    3bac:	ldr	r0, [r0, r1, lsl #2]
    3bb0:	mov	pc, r0
    3bb4:	.word	0x00003bc8
    3bb8:	.word	0x00003bd4
    3bbc:	.word	0x00003be0
    3bc0:	.word	0x00003bec
    3bc4:	.word	0x00003bf8
    3bc8:	movw	r0, #1
    3bcc:	str	r0, [sp, #8]
    3bd0:	b	3c0c <MyGame_Example_Any_is_known_type+0x84>
    3bd4:	movw	r0, #1
    3bd8:	str	r0, [sp, #8]
    3bdc:	b	3c0c <MyGame_Example_Any_is_known_type+0x84>
    3be0:	movw	r0, #1
    3be4:	str	r0, [sp, #8]
    3be8:	b	3c0c <MyGame_Example_Any_is_known_type+0x84>
    3bec:	movw	r0, #1
    3bf0:	str	r0, [sp, #8]
    3bf4:	b	3c0c <MyGame_Example_Any_is_known_type+0x84>
    3bf8:	movw	r0, #1
    3bfc:	str	r0, [sp, #8]
    3c00:	b	3c0c <MyGame_Example_Any_is_known_type+0x84>
    3c04:	movw	r0, #0
    3c08:	str	r0, [sp, #8]
    3c0c:	ldr	r0, [sp, #8]
    3c10:	add	sp, sp, #12
    3c14:	bx	lr

00003c18 <MyGame_Example_Monster_inventory>:
    3c18:	push	{fp, lr}
    3c1c:	mov	fp, sp
    3c20:	sub	sp, sp, #32
    3c24:	str	r0, [fp, #-8]
    3c28:	movw	r0, #0
    3c2c:	strh	r0, [fp, #-14]
    3c30:	ldr	r0, [fp, #-8]
    3c34:	movw	r1, #0
    3c38:	cmp	r0, r1
    3c3c:	beq	3c48 <MyGame_Example_Monster_inventory+0x30>
    3c40:	b	3c44 <MyGame_Example_Monster_inventory+0x2c>
    3c44:	b	3c68 <MyGame_Example_Monster_inventory+0x50>
    3c48:	movw	r0, #0
    3c4c:	movt	r0, #0
    3c50:	movw	r1, #0
    3c54:	movt	r1, #0
    3c58:	movw	r2, #706	; 0x2c2
    3c5c:	movw	r3, #0
    3c60:	movt	r3, #0
    3c64:	bl	0 <__assert_fail>
    3c68:	mov	r0, #5
    3c6c:	strh	r0, [sp, #16]
    3c70:	ldr	r0, [fp, #-8]
    3c74:	str	r0, [sp, #8]
    3c78:	bl	f4c8 <__flatbuffers_soffset_read_from_pe>
    3c7c:	ldr	r1, [sp, #8]
    3c80:	sub	r0, r1, r0
    3c84:	str	r0, [sp, #12]
    3c88:	ldr	r0, [sp, #12]
    3c8c:	bl	f4ec <__flatbuffers_voffset_read_from_pe>
    3c90:	ldrh	r1, [sp, #16]
    3c94:	add	r1, r1, #3
    3c98:	lsl	r1, r1, #1
    3c9c:	cmp	r0, r1
    3ca0:	bcc	3cbc <MyGame_Example_Monster_inventory+0xa4>
    3ca4:	ldr	r0, [sp, #12]
    3ca8:	ldrh	r1, [sp, #16]
    3cac:	add	r0, r0, r1, lsl #1
    3cb0:	add	r0, r0, #4
    3cb4:	bl	f4ec <__flatbuffers_voffset_read_from_pe>
    3cb8:	strh	r0, [fp, #-14]
    3cbc:	ldrsh	r0, [fp, #-14]
    3cc0:	cmp	r0, #0
    3cc4:	beq	3d00 <MyGame_Example_Monster_inventory+0xe8>
    3cc8:	ldr	r0, [fp, #-8]
    3ccc:	ldrh	r1, [fp, #-14]
    3cd0:	add	r0, r0, r1
    3cd4:	str	r0, [fp, #-12]
    3cd8:	ldr	r0, [fp, #-12]
    3cdc:	add	r0, r0, #4
    3ce0:	ldr	r1, [fp, #-12]
    3ce4:	str	r0, [sp, #4]
    3ce8:	mov	r0, r1
    3cec:	bl	f490 <__flatbuffers_uoffset_read_from_pe>
    3cf0:	ldr	r1, [sp, #4]
    3cf4:	add	r0, r1, r0
    3cf8:	str	r0, [fp, #-4]
    3cfc:	b	3d08 <MyGame_Example_Monster_inventory+0xf0>
    3d00:	movw	r0, #0
    3d04:	str	r0, [fp, #-4]
    3d08:	ldr	r0, [fp, #-4]
    3d0c:	mov	sp, fp
    3d10:	pop	{fp, pc}

00003d14 <flatbuffers_uint8_vec_len>:
    3d14:	push	{fp, lr}
    3d18:	mov	fp, sp
    3d1c:	sub	sp, sp, #8
    3d20:	str	r0, [sp, #4]
    3d24:	ldr	r0, [sp, #4]
    3d28:	bl	11b9c <flatbuffers_vec_len>
    3d2c:	mov	sp, fp
    3d30:	pop	{fp, pc}

00003d34 <flatbuffers_uint8_vec_at>:
    3d34:	push	{fp, lr}
    3d38:	mov	fp, sp
    3d3c:	sub	sp, sp, #8
    3d40:	str	r0, [sp, #4]
    3d44:	str	r1, [sp]
    3d48:	ldr	r0, [sp, #4]
    3d4c:	bl	11b9c <flatbuffers_vec_len>
    3d50:	ldr	r1, [sp]
    3d54:	cmp	r0, r1
    3d58:	bls	3d64 <flatbuffers_uint8_vec_at+0x30>
    3d5c:	b	3d60 <flatbuffers_uint8_vec_at+0x2c>
    3d60:	b	3d84 <flatbuffers_uint8_vec_at+0x50>
    3d64:	movw	r0, #0
    3d68:	movt	r0, #0
    3d6c:	movw	r1, #0
    3d70:	movt	r1, #0
    3d74:	movw	r2, #395	; 0x18b
    3d78:	movw	r3, #0
    3d7c:	movt	r3, #0
    3d80:	bl	0 <__assert_fail>
    3d84:	ldr	r0, [sp, #4]
    3d88:	ldr	r1, [sp]
    3d8c:	add	r0, r0, r1
    3d90:	bl	10430 <flatbuffers_uint8_read_from_pe>
    3d94:	and	r0, r0, #255	; 0xff
    3d98:	mov	sp, fp
    3d9c:	pop	{fp, pc}

00003da0 <MyGame_Example_Monster_mana>:
    3da0:	push	{fp, lr}
    3da4:	mov	fp, sp
    3da8:	sub	sp, sp, #24
    3dac:	str	r0, [fp, #-4]
    3db0:	movw	r0, #0
    3db4:	strh	r0, [fp, #-6]
    3db8:	ldr	r0, [fp, #-4]
    3dbc:	movw	r1, #0
    3dc0:	cmp	r0, r1
    3dc4:	beq	3dd0 <MyGame_Example_Monster_mana+0x30>
    3dc8:	b	3dcc <MyGame_Example_Monster_mana+0x2c>
    3dcc:	b	3df0 <MyGame_Example_Monster_mana+0x50>
    3dd0:	movw	r0, #0
    3dd4:	movt	r0, #0
    3dd8:	movw	r1, #0
    3ddc:	movt	r1, #0
    3de0:	movw	r2, #698	; 0x2ba
    3de4:	movw	r3, #0
    3de8:	movt	r3, #0
    3dec:	bl	0 <__assert_fail>
    3df0:	mov	r0, #1
    3df4:	strh	r0, [fp, #-8]
    3df8:	ldr	r0, [fp, #-4]
    3dfc:	str	r0, [sp, #8]
    3e00:	bl	f4c8 <__flatbuffers_soffset_read_from_pe>
    3e04:	ldr	r1, [sp, #8]
    3e08:	sub	r0, r1, r0
    3e0c:	str	r0, [sp, #12]
    3e10:	ldr	r0, [sp, #12]
    3e14:	bl	f4ec <__flatbuffers_voffset_read_from_pe>
    3e18:	ldrh	r1, [fp, #-8]
    3e1c:	add	r1, r1, #3
    3e20:	lsl	r1, r1, #1
    3e24:	cmp	r0, r1
    3e28:	bcc	3e44 <MyGame_Example_Monster_mana+0xa4>
    3e2c:	ldr	r0, [sp, #12]
    3e30:	ldrh	r1, [fp, #-8]
    3e34:	add	r0, r0, r1, lsl #1
    3e38:	add	r0, r0, #4
    3e3c:	bl	f4ec <__flatbuffers_voffset_read_from_pe>
    3e40:	strh	r0, [fp, #-6]
    3e44:	ldrh	r0, [fp, #-6]
    3e48:	cmp	r0, #0
    3e4c:	beq	3e6c <MyGame_Example_Monster_mana+0xcc>
    3e50:	ldr	r0, [fp, #-4]
    3e54:	ldrh	r1, [fp, #-6]
    3e58:	add	r0, r0, r1
    3e5c:	bl	f514 <flatbuffers_int16_read_from_pe>
    3e60:	sxth	r0, r0
    3e64:	str	r0, [sp, #4]
    3e68:	b	3e78 <MyGame_Example_Monster_mana+0xd8>
    3e6c:	movw	r0, #150	; 0x96
    3e70:	str	r0, [sp, #4]
    3e74:	b	3e78 <MyGame_Example_Monster_mana+0xd8>
    3e78:	ldr	r0, [sp, #4]
    3e7c:	sxth	r0, r0
    3e80:	mov	sp, fp
    3e84:	pop	{fp, pc}

00003e88 <MyGame_Example_Monster_mana_is_present>:
    3e88:	push	{fp, lr}
    3e8c:	mov	fp, sp
    3e90:	sub	sp, sp, #16
    3e94:	str	r0, [fp, #-4]
    3e98:	movw	r0, #0
    3e9c:	strh	r0, [fp, #-6]
    3ea0:	ldr	r0, [fp, #-4]
    3ea4:	movw	r1, #0
    3ea8:	cmp	r0, r1
    3eac:	beq	3eb8 <MyGame_Example_Monster_mana_is_present+0x30>
    3eb0:	b	3eb4 <MyGame_Example_Monster_mana_is_present+0x2c>
    3eb4:	b	3ed8 <MyGame_Example_Monster_mana_is_present+0x50>
    3eb8:	movw	r0, #0
    3ebc:	movt	r0, #0
    3ec0:	movw	r1, #0
    3ec4:	movt	r1, #0
    3ec8:	movw	r2, #698	; 0x2ba
    3ecc:	movw	r3, #0
    3ed0:	movt	r3, #0
    3ed4:	bl	0 <__assert_fail>
    3ed8:	mov	r0, #1
    3edc:	strh	r0, [sp, #8]
    3ee0:	ldr	r0, [fp, #-4]
    3ee4:	str	r0, [sp]
    3ee8:	bl	f4c8 <__flatbuffers_soffset_read_from_pe>
    3eec:	ldr	r1, [sp]
    3ef0:	sub	r0, r1, r0
    3ef4:	str	r0, [sp, #4]
    3ef8:	ldr	r0, [sp, #4]
    3efc:	bl	f4ec <__flatbuffers_voffset_read_from_pe>
    3f00:	ldrh	r1, [sp, #8]
    3f04:	add	r1, r1, #3
    3f08:	lsl	r1, r1, #1
    3f0c:	cmp	r0, r1
    3f10:	bcc	3f2c <MyGame_Example_Monster_mana_is_present+0xa4>
    3f14:	ldr	r0, [sp, #4]
    3f18:	ldrh	r1, [sp, #8]
    3f1c:	add	r0, r0, r1, lsl #1
    3f20:	add	r0, r0, #4
    3f24:	bl	f4ec <__flatbuffers_voffset_read_from_pe>
    3f28:	strh	r0, [fp, #-6]
    3f2c:	ldrh	r0, [fp, #-6]
    3f30:	cmp	r0, #0
    3f34:	movw	r0, #0
    3f38:	movne	r0, #1
    3f3c:	and	r0, r0, #1
    3f40:	mov	sp, fp
    3f44:	pop	{fp, pc}

00003f48 <MyGame_Example_Monster_test4>:
    3f48:	push	{fp, lr}
    3f4c:	mov	fp, sp
    3f50:	sub	sp, sp, #32
    3f54:	str	r0, [fp, #-8]
    3f58:	movw	r0, #0
    3f5c:	strh	r0, [fp, #-14]
    3f60:	ldr	r0, [fp, #-8]
    3f64:	movw	r1, #0
    3f68:	cmp	r0, r1
    3f6c:	beq	3f78 <MyGame_Example_Monster_test4+0x30>
    3f70:	b	3f74 <MyGame_Example_Monster_test4+0x2c>
    3f74:	b	3f98 <MyGame_Example_Monster_test4+0x50>
    3f78:	movw	r0, #0
    3f7c:	movt	r0, #0
    3f80:	movw	r1, #0
    3f84:	movt	r1, #0
    3f88:	movw	r2, #718	; 0x2ce
    3f8c:	movw	r3, #0
    3f90:	movt	r3, #0
    3f94:	bl	0 <__assert_fail>
    3f98:	mov	r0, #9
    3f9c:	strh	r0, [sp, #16]
    3fa0:	ldr	r0, [fp, #-8]
    3fa4:	str	r0, [sp, #8]
    3fa8:	bl	f4c8 <__flatbuffers_soffset_read_from_pe>
    3fac:	ldr	r1, [sp, #8]
    3fb0:	sub	r0, r1, r0
    3fb4:	str	r0, [sp, #12]
    3fb8:	ldr	r0, [sp, #12]
    3fbc:	bl	f4ec <__flatbuffers_voffset_read_from_pe>
    3fc0:	ldrh	r1, [sp, #16]
    3fc4:	add	r1, r1, #3
    3fc8:	lsl	r1, r1, #1
    3fcc:	cmp	r0, r1
    3fd0:	bcc	3fec <MyGame_Example_Monster_test4+0xa4>
    3fd4:	ldr	r0, [sp, #12]
    3fd8:	ldrh	r1, [sp, #16]
    3fdc:	add	r0, r0, r1, lsl #1
    3fe0:	add	r0, r0, #4
    3fe4:	bl	f4ec <__flatbuffers_voffset_read_from_pe>
    3fe8:	strh	r0, [fp, #-14]
    3fec:	ldrsh	r0, [fp, #-14]
    3ff0:	cmp	r0, #0
    3ff4:	beq	4030 <MyGame_Example_Monster_test4+0xe8>
    3ff8:	ldr	r0, [fp, #-8]
    3ffc:	ldrh	r1, [fp, #-14]
    4000:	add	r0, r0, r1
    4004:	str	r0, [fp, #-12]
    4008:	ldr	r0, [fp, #-12]
    400c:	add	r0, r0, #4
    4010:	ldr	r1, [fp, #-12]
    4014:	str	r0, [sp, #4]
    4018:	mov	r0, r1
    401c:	bl	f490 <__flatbuffers_uoffset_read_from_pe>
    4020:	ldr	r1, [sp, #4]
    4024:	add	r0, r1, r0
    4028:	str	r0, [fp, #-4]
    402c:	b	4038 <MyGame_Example_Monster_test4+0xf0>
    4030:	movw	r0, #0
    4034:	str	r0, [fp, #-4]
    4038:	ldr	r0, [fp, #-4]
    403c:	mov	sp, fp
    4040:	pop	{fp, pc}

00004044 <MyGame_Example_Test_vec_len>:
    4044:	push	{fp, lr}
    4048:	mov	fp, sp
    404c:	sub	sp, sp, #8
    4050:	str	r0, [sp, #4]
    4054:	ldr	r0, [sp, #4]
    4058:	movw	r1, #0
    405c:	cmp	r0, r1
    4060:	beq	407c <MyGame_Example_Test_vec_len+0x38>
    4064:	ldr	r0, [sp, #4]
    4068:	mvn	r1, #3
    406c:	add	r0, r0, r1
    4070:	bl	f490 <__flatbuffers_uoffset_read_from_pe>
    4074:	str	r0, [sp]
    4078:	b	4088 <MyGame_Example_Test_vec_len+0x44>
    407c:	movw	r0, #0
    4080:	str	r0, [sp]
    4084:	b	4088 <MyGame_Example_Test_vec_len+0x44>
    4088:	ldr	r0, [sp]
    408c:	mov	sp, fp
    4090:	pop	{fp, pc}

00004094 <MyGame_Example_Test_vec_at>:
    4094:	push	{fp, lr}
    4098:	mov	fp, sp
    409c:	sub	sp, sp, #8
    40a0:	str	r0, [sp, #4]
    40a4:	str	r1, [sp]
    40a8:	ldr	r0, [sp, #4]
    40ac:	bl	11b9c <flatbuffers_vec_len>
    40b0:	ldr	r1, [sp]
    40b4:	cmp	r0, r1
    40b8:	bls	40c4 <MyGame_Example_Test_vec_at+0x30>
    40bc:	b	40c0 <MyGame_Example_Test_vec_at+0x2c>
    40c0:	b	40e4 <MyGame_Example_Test_vec_at+0x50>
    40c4:	movw	r0, #0
    40c8:	movt	r0, #0
    40cc:	movw	r1, #0
    40d0:	movt	r1, #0
    40d4:	movw	r2, #380	; 0x17c
    40d8:	movw	r3, #0
    40dc:	movt	r3, #0
    40e0:	bl	0 <__assert_fail>
    40e4:	ldr	r0, [sp, #4]
    40e8:	ldr	r1, [sp]
    40ec:	add	r0, r0, r1, lsl #2
    40f0:	mov	sp, fp
    40f4:	pop	{fp, pc}

000040f8 <MyGame_Example_Test_a>:
    40f8:	push	{fp, lr}
    40fc:	mov	fp, sp
    4100:	sub	sp, sp, #8
    4104:	str	r0, [sp, #4]
    4108:	ldr	r0, [sp, #4]
    410c:	movw	r1, #0
    4110:	cmp	r0, r1
    4114:	beq	412c <MyGame_Example_Test_a+0x34>
    4118:	ldr	r0, [sp, #4]
    411c:	bl	f514 <flatbuffers_int16_read_from_pe>
    4120:	sxth	r0, r0
    4124:	str	r0, [sp]
    4128:	b	4138 <MyGame_Example_Test_a+0x40>
    412c:	movw	r0, #0
    4130:	str	r0, [sp]
    4134:	b	4138 <MyGame_Example_Test_a+0x40>
    4138:	ldr	r0, [sp]
    413c:	sxth	r0, r0
    4140:	mov	sp, fp
    4144:	pop	{fp, pc}

00004148 <MyGame_Example_Test_b>:
    4148:	push	{fp, lr}
    414c:	mov	fp, sp
    4150:	sub	sp, sp, #8
    4154:	str	r0, [sp, #4]
    4158:	ldr	r0, [sp, #4]
    415c:	movw	r1, #0
    4160:	cmp	r0, r1
    4164:	beq	4180 <MyGame_Example_Test_b+0x38>
    4168:	ldr	r0, [sp, #4]
    416c:	add	r0, r0, #2
    4170:	bl	1036c <flatbuffers_int8_read_from_pe>
    4174:	sxtb	r0, r0
    4178:	str	r0, [sp]
    417c:	b	418c <MyGame_Example_Test_b+0x44>
    4180:	movw	r0, #0
    4184:	str	r0, [sp]
    4188:	b	418c <MyGame_Example_Test_b+0x44>
    418c:	ldr	r0, [sp]
    4190:	sxtb	r0, r0
    4194:	mov	sp, fp
    4198:	pop	{fp, pc}

0000419c <MyGame_Example_Monster_testarrayoftables>:
    419c:	push	{fp, lr}
    41a0:	mov	fp, sp
    41a4:	sub	sp, sp, #32
    41a8:	str	r0, [fp, #-8]
    41ac:	movw	r0, #0
    41b0:	strh	r0, [fp, #-14]
    41b4:	ldr	r0, [fp, #-8]
    41b8:	movw	r1, #0
    41bc:	cmp	r0, r1
    41c0:	beq	41cc <MyGame_Example_Monster_testarrayoftables+0x30>
    41c4:	b	41c8 <MyGame_Example_Monster_testarrayoftables+0x2c>
    41c8:	b	41ec <MyGame_Example_Monster_testarrayoftables+0x50>
    41cc:	movw	r0, #0
    41d0:	movt	r0, #0
    41d4:	movw	r1, #0
    41d8:	movt	r1, #0
    41dc:	movw	r2, #711	; 0x2c7
    41e0:	movw	r3, #0
    41e4:	movt	r3, #0
    41e8:	bl	0 <__assert_fail>
    41ec:	mov	r0, #11
    41f0:	strh	r0, [sp, #16]
    41f4:	ldr	r0, [fp, #-8]
    41f8:	str	r0, [sp, #8]
    41fc:	bl	f4c8 <__flatbuffers_soffset_read_from_pe>
    4200:	ldr	r1, [sp, #8]
    4204:	sub	r0, r1, r0
    4208:	str	r0, [sp, #12]
    420c:	ldr	r0, [sp, #12]
    4210:	bl	f4ec <__flatbuffers_voffset_read_from_pe>
    4214:	ldrh	r1, [sp, #16]
    4218:	add	r1, r1, #3
    421c:	lsl	r1, r1, #1
    4220:	cmp	r0, r1
    4224:	bcc	4240 <MyGame_Example_Monster_testarrayoftables+0xa4>
    4228:	ldr	r0, [sp, #12]
    422c:	ldrh	r1, [sp, #16]
    4230:	add	r0, r0, r1, lsl #1
    4234:	add	r0, r0, #4
    4238:	bl	f4ec <__flatbuffers_voffset_read_from_pe>
    423c:	strh	r0, [fp, #-14]
    4240:	ldrsh	r0, [fp, #-14]
    4244:	cmp	r0, #0
    4248:	beq	4284 <MyGame_Example_Monster_testarrayoftables+0xe8>
    424c:	ldr	r0, [fp, #-8]
    4250:	ldrh	r1, [fp, #-14]
    4254:	add	r0, r0, r1
    4258:	str	r0, [fp, #-12]
    425c:	ldr	r0, [fp, #-12]
    4260:	add	r0, r0, #4
    4264:	ldr	r1, [fp, #-12]
    4268:	str	r0, [sp, #4]
    426c:	mov	r0, r1
    4270:	bl	f490 <__flatbuffers_uoffset_read_from_pe>
    4274:	ldr	r1, [sp, #4]
    4278:	add	r0, r1, r0
    427c:	str	r0, [fp, #-4]
    4280:	b	428c <MyGame_Example_Monster_testarrayoftables+0xf0>
    4284:	movw	r0, #0
    4288:	str	r0, [fp, #-4]
    428c:	ldr	r0, [fp, #-4]
    4290:	mov	sp, fp
    4294:	pop	{fp, pc}

00004298 <MyGame_Example_Monster_vec_len>:
    4298:	push	{fp, lr}
    429c:	mov	fp, sp
    42a0:	sub	sp, sp, #8
    42a4:	str	r0, [sp, #4]
    42a8:	ldr	r0, [sp, #4]
    42ac:	movw	r1, #0
    42b0:	cmp	r0, r1
    42b4:	beq	42d0 <MyGame_Example_Monster_vec_len+0x38>
    42b8:	ldr	r0, [sp, #4]
    42bc:	mvn	r1, #3
    42c0:	add	r0, r0, r1
    42c4:	bl	f490 <__flatbuffers_uoffset_read_from_pe>
    42c8:	str	r0, [sp]
    42cc:	b	42dc <MyGame_Example_Monster_vec_len+0x44>
    42d0:	movw	r0, #0
    42d4:	str	r0, [sp]
    42d8:	b	42dc <MyGame_Example_Monster_vec_len+0x44>
    42dc:	ldr	r0, [sp]
    42e0:	mov	sp, fp
    42e4:	pop	{fp, pc}

000042e8 <MyGame_Example_Monster_vec_at>:
    42e8:	push	{fp, lr}
    42ec:	mov	fp, sp
    42f0:	sub	sp, sp, #16
    42f4:	str	r0, [fp, #-4]
    42f8:	str	r1, [sp, #8]
    42fc:	ldr	r0, [fp, #-4]
    4300:	ldr	r1, [sp, #8]
    4304:	add	r0, r0, r1, lsl #2
    4308:	str	r0, [sp, #4]
    430c:	ldr	r0, [fp, #-4]
    4310:	bl	11b9c <flatbuffers_vec_len>
    4314:	ldr	r1, [sp, #8]
    4318:	cmp	r0, r1
    431c:	bls	4328 <MyGame_Example_Monster_vec_at+0x40>
    4320:	b	4324 <MyGame_Example_Monster_vec_at+0x3c>
    4324:	b	4348 <MyGame_Example_Monster_vec_at+0x60>
    4328:	movw	r0, #0
    432c:	movt	r0, #0
    4330:	movw	r1, #0
    4334:	movt	r1, #0
    4338:	movw	r2, #693	; 0x2b5
    433c:	movw	r3, #0
    4340:	movt	r3, #0
    4344:	bl	0 <__assert_fail>
    4348:	ldr	r0, [sp, #4]
    434c:	ldr	r1, [sp, #4]
    4350:	str	r0, [sp]
    4354:	mov	r0, r1
    4358:	bl	f490 <__flatbuffers_uoffset_read_from_pe>
    435c:	ldr	r1, [sp]
    4360:	add	r0, r1, r0
    4364:	mov	sp, fp
    4368:	pop	{fp, pc}

0000436c <MyGame_Example_Monster_testarrayofstring>:
    436c:	push	{fp, lr}
    4370:	mov	fp, sp
    4374:	sub	sp, sp, #32
    4378:	str	r0, [fp, #-8]
    437c:	movw	r0, #0
    4380:	strh	r0, [fp, #-14]
    4384:	ldr	r0, [fp, #-8]
    4388:	movw	r1, #0
    438c:	cmp	r0, r1
    4390:	beq	439c <MyGame_Example_Monster_testarrayofstring+0x30>
    4394:	b	4398 <MyGame_Example_Monster_testarrayofstring+0x2c>
    4398:	b	43bc <MyGame_Example_Monster_testarrayofstring+0x50>
    439c:	movw	r0, #0
    43a0:	movt	r0, #0
    43a4:	movw	r1, #0
    43a8:	movt	r1, #0
    43ac:	movw	r2, #712	; 0x2c8
    43b0:	movw	r3, #0
    43b4:	movt	r3, #0
    43b8:	bl	0 <__assert_fail>
    43bc:	mov	r0, #10
    43c0:	strh	r0, [sp, #16]
    43c4:	ldr	r0, [fp, #-8]
    43c8:	str	r0, [sp, #8]
    43cc:	bl	f4c8 <__flatbuffers_soffset_read_from_pe>
    43d0:	ldr	r1, [sp, #8]
    43d4:	sub	r0, r1, r0
    43d8:	str	r0, [sp, #12]
    43dc:	ldr	r0, [sp, #12]
    43e0:	bl	f4ec <__flatbuffers_voffset_read_from_pe>
    43e4:	ldrh	r1, [sp, #16]
    43e8:	add	r1, r1, #3
    43ec:	lsl	r1, r1, #1
    43f0:	cmp	r0, r1
    43f4:	bcc	4410 <MyGame_Example_Monster_testarrayofstring+0xa4>
    43f8:	ldr	r0, [sp, #12]
    43fc:	ldrh	r1, [sp, #16]
    4400:	add	r0, r0, r1, lsl #1
    4404:	add	r0, r0, #4
    4408:	bl	f4ec <__flatbuffers_voffset_read_from_pe>
    440c:	strh	r0, [fp, #-14]
    4410:	ldrsh	r0, [fp, #-14]
    4414:	cmp	r0, #0
    4418:	beq	4454 <MyGame_Example_Monster_testarrayofstring+0xe8>
    441c:	ldr	r0, [fp, #-8]
    4420:	ldrh	r1, [fp, #-14]
    4424:	add	r0, r0, r1
    4428:	str	r0, [fp, #-12]
    442c:	ldr	r0, [fp, #-12]
    4430:	add	r0, r0, #4
    4434:	ldr	r1, [fp, #-12]
    4438:	str	r0, [sp, #4]
    443c:	mov	r0, r1
    4440:	bl	f490 <__flatbuffers_uoffset_read_from_pe>
    4444:	ldr	r1, [sp, #4]
    4448:	add	r0, r1, r0
    444c:	str	r0, [fp, #-4]
    4450:	b	445c <MyGame_Example_Monster_testarrayofstring+0xf0>
    4454:	movw	r0, #0
    4458:	str	r0, [fp, #-4]
    445c:	ldr	r0, [fp, #-4]
    4460:	mov	sp, fp
    4464:	pop	{fp, pc}

00004468 <flatbuffers_string_vec_len>:
    4468:	push	{fp, lr}
    446c:	mov	fp, sp
    4470:	sub	sp, sp, #8
    4474:	str	r0, [sp, #4]
    4478:	ldr	r0, [sp, #4]
    447c:	movw	r1, #0
    4480:	cmp	r0, r1
    4484:	beq	44a0 <flatbuffers_string_vec_len+0x38>
    4488:	ldr	r0, [sp, #4]
    448c:	mvn	r1, #3
    4490:	add	r0, r0, r1
    4494:	bl	f490 <__flatbuffers_uoffset_read_from_pe>
    4498:	str	r0, [sp]
    449c:	b	44ac <flatbuffers_string_vec_len+0x44>
    44a0:	movw	r0, #0
    44a4:	str	r0, [sp]
    44a8:	b	44ac <flatbuffers_string_vec_len+0x44>
    44ac:	ldr	r0, [sp]
    44b0:	mov	sp, fp
    44b4:	pop	{fp, pc}

000044b8 <flatbuffers_string_vec_at>:
    44b8:	push	{fp, lr}
    44bc:	mov	fp, sp
    44c0:	sub	sp, sp, #16
    44c4:	str	r0, [fp, #-4]
    44c8:	str	r1, [sp, #8]
    44cc:	ldr	r0, [fp, #-4]
    44d0:	ldr	r1, [sp, #8]
    44d4:	add	r0, r0, r1, lsl #2
    44d8:	str	r0, [sp, #4]
    44dc:	ldr	r0, [fp, #-4]
    44e0:	bl	11b9c <flatbuffers_vec_len>
    44e4:	ldr	r1, [sp, #8]
    44e8:	cmp	r0, r1
    44ec:	bls	44f8 <flatbuffers_string_vec_at+0x40>
    44f0:	b	44f4 <flatbuffers_string_vec_at+0x3c>
    44f4:	b	4518 <flatbuffers_string_vec_at+0x60>
    44f8:	movw	r0, #0
    44fc:	movt	r0, #0
    4500:	movw	r1, #0
    4504:	movt	r1, #0
    4508:	movw	r2, #108	; 0x6c
    450c:	movw	r3, #0
    4510:	movt	r3, #0
    4514:	bl	0 <__assert_fail>
    4518:	ldr	r0, [sp, #4]
    451c:	ldr	r1, [sp, #4]
    4520:	str	r0, [sp]
    4524:	mov	r0, r1
    4528:	bl	f490 <__flatbuffers_uoffset_read_from_pe>
    452c:	ldr	r1, [sp]
    4530:	add	r0, r1, r0
    4534:	add	r0, r0, #4
    4538:	mov	sp, fp
    453c:	pop	{fp, pc}

00004540 <MyGame_Example_Monster_testarrayofbools_is_present>:
    4540:	push	{fp, lr}
    4544:	mov	fp, sp
    4548:	sub	sp, sp, #16
    454c:	str	r0, [fp, #-4]
    4550:	movw	r0, #0
    4554:	strh	r0, [fp, #-6]
    4558:	ldr	r0, [fp, #-4]
    455c:	movw	r1, #0
    4560:	cmp	r0, r1
    4564:	beq	4570 <MyGame_Example_Monster_testarrayofbools_is_present+0x30>
    4568:	b	456c <MyGame_Example_Monster_testarrayofbools_is_present+0x2c>
    456c:	b	4590 <MyGame_Example_Monster_testarrayofbools_is_present+0x50>
    4570:	movw	r0, #0
    4574:	movt	r0, #0
    4578:	movw	r1, #0
    457c:	movt	r1, #0
    4580:	movw	r2, #714	; 0x2ca
    4584:	movw	r3, #0
    4588:	movt	r3, #0
    458c:	bl	0 <__assert_fail>
    4590:	mov	r0, #24
    4594:	strh	r0, [sp, #8]
    4598:	ldr	r0, [fp, #-4]
    459c:	str	r0, [sp]
    45a0:	bl	f4c8 <__flatbuffers_soffset_read_from_pe>
    45a4:	ldr	r1, [sp]
    45a8:	sub	r0, r1, r0
    45ac:	str	r0, [sp, #4]
    45b0:	ldr	r0, [sp, #4]
    45b4:	bl	f4ec <__flatbuffers_voffset_read_from_pe>
    45b8:	ldrh	r1, [sp, #8]
    45bc:	add	r1, r1, #3
    45c0:	lsl	r1, r1, #1
    45c4:	cmp	r0, r1
    45c8:	bcc	45e4 <MyGame_Example_Monster_testarrayofbools_is_present+0xa4>
    45cc:	ldr	r0, [sp, #4]
    45d0:	ldrh	r1, [sp, #8]
    45d4:	add	r0, r0, r1, lsl #1
    45d8:	add	r0, r0, #4
    45dc:	bl	f4ec <__flatbuffers_voffset_read_from_pe>
    45e0:	strh	r0, [fp, #-6]
    45e4:	ldrh	r0, [fp, #-6]
    45e8:	cmp	r0, #0
    45ec:	movw	r0, #0
    45f0:	movne	r0, #1
    45f4:	and	r0, r0, #1
    45f8:	mov	sp, fp
    45fc:	pop	{fp, pc}

00004600 <MyGame_Example_Monster_testarrayofbools>:
    4600:	push	{fp, lr}
    4604:	mov	fp, sp
    4608:	sub	sp, sp, #32
    460c:	str	r0, [fp, #-8]
    4610:	movw	r0, #0
    4614:	strh	r0, [fp, #-14]
    4618:	ldr	r0, [fp, #-8]
    461c:	movw	r1, #0
    4620:	cmp	r0, r1
    4624:	beq	4630 <MyGame_Example_Monster_testarrayofbools+0x30>
    4628:	b	462c <MyGame_Example_Monster_testarrayofbools+0x2c>
    462c:	b	4650 <MyGame_Example_Monster_testarrayofbools+0x50>
    4630:	movw	r0, #0
    4634:	movt	r0, #0
    4638:	movw	r1, #0
    463c:	movt	r1, #0
    4640:	movw	r2, #714	; 0x2ca
    4644:	movw	r3, #0
    4648:	movt	r3, #0
    464c:	bl	0 <__assert_fail>
    4650:	mov	r0, #24
    4654:	strh	r0, [sp, #16]
    4658:	ldr	r0, [fp, #-8]
    465c:	str	r0, [sp, #8]
    4660:	bl	f4c8 <__flatbuffers_soffset_read_from_pe>
    4664:	ldr	r1, [sp, #8]
    4668:	sub	r0, r1, r0
    466c:	str	r0, [sp, #12]
    4670:	ldr	r0, [sp, #12]
    4674:	bl	f4ec <__flatbuffers_voffset_read_from_pe>
    4678:	ldrh	r1, [sp, #16]
    467c:	add	r1, r1, #3
    4680:	lsl	r1, r1, #1
    4684:	cmp	r0, r1
    4688:	bcc	46a4 <MyGame_Example_Monster_testarrayofbools+0xa4>
    468c:	ldr	r0, [sp, #12]
    4690:	ldrh	r1, [sp, #16]
    4694:	add	r0, r0, r1, lsl #1
    4698:	add	r0, r0, #4
    469c:	bl	f4ec <__flatbuffers_voffset_read_from_pe>
    46a0:	strh	r0, [fp, #-14]
    46a4:	ldrsh	r0, [fp, #-14]
    46a8:	cmp	r0, #0
    46ac:	beq	46e8 <MyGame_Example_Monster_testarrayofbools+0xe8>
    46b0:	ldr	r0, [fp, #-8]
    46b4:	ldrh	r1, [fp, #-14]
    46b8:	add	r0, r0, r1
    46bc:	str	r0, [fp, #-12]
    46c0:	ldr	r0, [fp, #-12]
    46c4:	add	r0, r0, #4
    46c8:	ldr	r1, [fp, #-12]
    46cc:	str	r0, [sp, #4]
    46d0:	mov	r0, r1
    46d4:	bl	f490 <__flatbuffers_uoffset_read_from_pe>
    46d8:	ldr	r1, [sp, #4]
    46dc:	add	r0, r1, r0
    46e0:	str	r0, [fp, #-4]
    46e4:	b	46f0 <MyGame_Example_Monster_testarrayofbools+0xf0>
    46e8:	movw	r0, #0
    46ec:	str	r0, [fp, #-4]
    46f0:	ldr	r0, [fp, #-4]
    46f4:	mov	sp, fp
    46f8:	pop	{fp, pc}

000046fc <flatbuffers_bool_vec_len>:
    46fc:	push	{fp, lr}
    4700:	mov	fp, sp
    4704:	sub	sp, sp, #8
    4708:	str	r0, [sp, #4]
    470c:	ldr	r0, [sp, #4]
    4710:	bl	11b9c <flatbuffers_vec_len>
    4714:	mov	sp, fp
    4718:	pop	{fp, pc}

0000471c <flatbuffers_bool_vec_at>:
    471c:	push	{fp, lr}
    4720:	mov	fp, sp
    4724:	sub	sp, sp, #8
    4728:	str	r0, [sp, #4]
    472c:	str	r1, [sp]
    4730:	ldr	r0, [sp, #4]
    4734:	bl	11b9c <flatbuffers_vec_len>
    4738:	ldr	r1, [sp]
    473c:	cmp	r0, r1
    4740:	bls	474c <flatbuffers_bool_vec_at+0x30>
    4744:	b	4748 <flatbuffers_bool_vec_at+0x2c>
    4748:	b	476c <flatbuffers_bool_vec_at+0x50>
    474c:	movw	r0, #0
    4750:	movt	r0, #0
    4754:	movw	r1, #0
    4758:	movt	r1, #0
    475c:	movw	r2, #394	; 0x18a
    4760:	movw	r3, #0
    4764:	movt	r3, #0
    4768:	bl	0 <__assert_fail>
    476c:	ldr	r0, [sp, #4]
    4770:	ldr	r1, [sp]
    4774:	add	r0, r0, r1
    4778:	bl	11bec <flatbuffers_bool_read_from_pe>
    477c:	and	r0, r0, #255	; 0xff
    4780:	mov	sp, fp
    4784:	pop	{fp, pc}

00004788 <MyGame_Example_Monster_test_type>:
    4788:	push	{fp, lr}
    478c:	mov	fp, sp
    4790:	sub	sp, sp, #24
    4794:	str	r0, [fp, #-4]
    4798:	movw	r0, #0
    479c:	strh	r0, [fp, #-6]
    47a0:	ldr	r0, [fp, #-4]
    47a4:	movw	r1, #0
    47a8:	cmp	r0, r1
    47ac:	beq	47b8 <MyGame_Example_Monster_test_type+0x30>
    47b0:	b	47b4 <MyGame_Example_Monster_test_type+0x2c>
    47b4:	b	47d8 <MyGame_Example_Monster_test_type+0x50>
    47b8:	movw	r0, #0
    47bc:	movt	r0, #0
    47c0:	movw	r1, #0
    47c4:	movt	r1, #0
    47c8:	movw	r2, #717	; 0x2cd
    47cc:	movw	r3, #0
    47d0:	movt	r3, #0
    47d4:	bl	0 <__assert_fail>
    47d8:	mov	r0, #7
    47dc:	strh	r0, [fp, #-8]
    47e0:	ldr	r0, [fp, #-4]
    47e4:	str	r0, [sp, #8]
    47e8:	bl	f4c8 <__flatbuffers_soffset_read_from_pe>
    47ec:	ldr	r1, [sp, #8]
    47f0:	sub	r0, r1, r0
    47f4:	str	r0, [sp, #12]
    47f8:	ldr	r0, [sp, #12]
    47fc:	bl	f4ec <__flatbuffers_voffset_read_from_pe>
    4800:	ldrh	r1, [fp, #-8]
    4804:	add	r1, r1, #3
    4808:	lsl	r1, r1, #1
    480c:	cmp	r0, r1
    4810:	bcc	482c <MyGame_Example_Monster_test_type+0xa4>
    4814:	ldr	r0, [sp, #12]
    4818:	ldrh	r1, [fp, #-8]
    481c:	add	r0, r0, r1, lsl #1
    4820:	add	r0, r0, #4
    4824:	bl	f4ec <__flatbuffers_voffset_read_from_pe>
    4828:	strh	r0, [fp, #-6]
    482c:	ldrh	r0, [fp, #-6]
    4830:	cmp	r0, #0
    4834:	beq	4854 <MyGame_Example_Monster_test_type+0xcc>
    4838:	ldr	r0, [fp, #-4]
    483c:	ldrh	r1, [fp, #-6]
    4840:	add	r0, r0, r1
    4844:	bl	11c28 <__flatbuffers_utype_read_from_pe>
    4848:	and	r0, r0, #255	; 0xff
    484c:	str	r0, [sp, #4]
    4850:	b	4860 <MyGame_Example_Monster_test_type+0xd8>
    4854:	movw	r0, #0
    4858:	str	r0, [sp, #4]
    485c:	b	4860 <MyGame_Example_Monster_test_type+0xd8>
    4860:	ldr	r0, [sp, #4]
    4864:	and	r0, r0, #255	; 0xff
    4868:	mov	sp, fp
    486c:	pop	{fp, pc}

00004870 <MyGame_Example_Monster_test>:
    4870:	push	{fp, lr}
    4874:	mov	fp, sp
    4878:	sub	sp, sp, #32
    487c:	str	r0, [fp, #-8]
    4880:	movw	r0, #0
    4884:	strh	r0, [fp, #-14]
    4888:	ldr	r0, [fp, #-8]
    488c:	movw	r1, #0
    4890:	cmp	r0, r1
    4894:	beq	48a0 <MyGame_Example_Monster_test+0x30>
    4898:	b	489c <MyGame_Example_Monster_test+0x2c>
    489c:	b	48c0 <MyGame_Example_Monster_test+0x50>
    48a0:	movw	r0, #0
    48a4:	movt	r0, #0
    48a8:	movw	r1, #0
    48ac:	movt	r1, #0
    48b0:	movw	r2, #717	; 0x2cd
    48b4:	movw	r3, #0
    48b8:	movt	r3, #0
    48bc:	bl	0 <__assert_fail>
    48c0:	mov	r0, #8
    48c4:	strh	r0, [sp, #16]
    48c8:	ldr	r0, [fp, #-8]
    48cc:	str	r0, [sp, #8]
    48d0:	bl	f4c8 <__flatbuffers_soffset_read_from_pe>
    48d4:	ldr	r1, [sp, #8]
    48d8:	sub	r0, r1, r0
    48dc:	str	r0, [sp, #12]
    48e0:	ldr	r0, [sp, #12]
    48e4:	bl	f4ec <__flatbuffers_voffset_read_from_pe>
    48e8:	ldrh	r1, [sp, #16]
    48ec:	add	r1, r1, #3
    48f0:	lsl	r1, r1, #1
    48f4:	cmp	r0, r1
    48f8:	bcc	4914 <MyGame_Example_Monster_test+0xa4>
    48fc:	ldr	r0, [sp, #12]
    4900:	ldrh	r1, [sp, #16]
    4904:	add	r0, r0, r1, lsl #1
    4908:	add	r0, r0, #4
    490c:	bl	f4ec <__flatbuffers_voffset_read_from_pe>
    4910:	strh	r0, [fp, #-14]
    4914:	ldrsh	r0, [fp, #-14]
    4918:	cmp	r0, #0
    491c:	beq	4954 <MyGame_Example_Monster_test+0xe4>
    4920:	ldr	r0, [fp, #-8]
    4924:	ldrh	r1, [fp, #-14]
    4928:	add	r0, r0, r1
    492c:	str	r0, [fp, #-12]
    4930:	ldr	r0, [fp, #-12]
    4934:	ldr	r1, [fp, #-12]
    4938:	str	r0, [sp, #4]
    493c:	mov	r0, r1
    4940:	bl	f490 <__flatbuffers_uoffset_read_from_pe>
    4944:	ldr	r1, [sp, #4]
    4948:	add	r0, r1, r0
    494c:	str	r0, [fp, #-4]
    4950:	b	495c <MyGame_Example_Monster_test+0xec>
    4954:	movw	r0, #0
    4958:	str	r0, [fp, #-4]
    495c:	ldr	r0, [fp, #-4]
    4960:	mov	sp, fp
    4964:	pop	{fp, pc}

00004968 <MyGame_Example_Monster_enemy>:
    4968:	push	{fp, lr}
    496c:	mov	fp, sp
    4970:	sub	sp, sp, #32
    4974:	str	r0, [fp, #-8]
    4978:	movw	r0, #0
    497c:	strh	r0, [fp, #-14]
    4980:	ldr	r0, [fp, #-8]
    4984:	movw	r1, #0
    4988:	cmp	r0, r1
    498c:	beq	4998 <MyGame_Example_Monster_enemy+0x30>
    4990:	b	4994 <MyGame_Example_Monster_enemy+0x2c>
    4994:	b	49b8 <MyGame_Example_Monster_enemy+0x50>
    4998:	movw	r0, #0
    499c:	movt	r0, #0
    49a0:	movw	r1, #0
    49a4:	movt	r1, #0
    49a8:	movw	r2, #716	; 0x2cc
    49ac:	movw	r3, #0
    49b0:	movt	r3, #0
    49b4:	bl	0 <__assert_fail>
    49b8:	mov	r0, #12
    49bc:	strh	r0, [sp, #16]
    49c0:	ldr	r0, [fp, #-8]
    49c4:	str	r0, [sp, #8]
    49c8:	bl	f4c8 <__flatbuffers_soffset_read_from_pe>
    49cc:	ldr	r1, [sp, #8]
    49d0:	sub	r0, r1, r0
    49d4:	str	r0, [sp, #12]
    49d8:	ldr	r0, [sp, #12]
    49dc:	bl	f4ec <__flatbuffers_voffset_read_from_pe>
    49e0:	ldrh	r1, [sp, #16]
    49e4:	add	r1, r1, #3
    49e8:	lsl	r1, r1, #1
    49ec:	cmp	r0, r1
    49f0:	bcc	4a0c <MyGame_Example_Monster_enemy+0xa4>
    49f4:	ldr	r0, [sp, #12]
    49f8:	ldrh	r1, [sp, #16]
    49fc:	add	r0, r0, r1, lsl #1
    4a00:	add	r0, r0, #4
    4a04:	bl	f4ec <__flatbuffers_voffset_read_from_pe>
    4a08:	strh	r0, [fp, #-14]
    4a0c:	ldrsh	r0, [fp, #-14]
    4a10:	cmp	r0, #0
    4a14:	beq	4a4c <MyGame_Example_Monster_enemy+0xe4>
    4a18:	ldr	r0, [fp, #-8]
    4a1c:	ldrh	r1, [fp, #-14]
    4a20:	add	r0, r0, r1
    4a24:	str	r0, [fp, #-12]
    4a28:	ldr	r0, [fp, #-12]
    4a2c:	ldr	r1, [fp, #-12]
    4a30:	str	r0, [sp, #4]
    4a34:	mov	r0, r1
    4a38:	bl	f490 <__flatbuffers_uoffset_read_from_pe>
    4a3c:	ldr	r1, [sp, #4]
    4a40:	add	r0, r1, r0
    4a44:	str	r0, [fp, #-4]
    4a48:	b	4a54 <MyGame_Example_Monster_enemy+0xec>
    4a4c:	movw	r0, #0
    4a50:	str	r0, [fp, #-4]
    4a54:	ldr	r0, [fp, #-4]
    4a58:	mov	sp, fp
    4a5c:	pop	{fp, pc}

00004a60 <MyGame_Example_Monster_test_union>:
    4a60:	push	{fp, lr}
    4a64:	mov	fp, sp
    4a68:	sub	sp, sp, #8
    4a6c:	str	r1, [sp, #4]
    4a70:	mov	r1, r0
    4a74:	str	r0, [sp]
    4a78:	mov	r0, r1
    4a7c:	movw	r1, #0
    4a80:	and	r1, r1, #255	; 0xff
    4a84:	movw	r2, #8
    4a88:	bl	0 <memset>
    4a8c:	ldr	r0, [sp, #4]
    4a90:	bl	4788 <MyGame_Example_Monster_test_type>
    4a94:	ldr	r1, [sp]
    4a98:	strb	r0, [r1]
    4a9c:	ldrb	r0, [r1]
    4aa0:	cmp	r0, #0
    4aa4:	bne	4aac <MyGame_Example_Monster_test_union+0x4c>
    4aa8:	b	4abc <MyGame_Example_Monster_test_union+0x5c>
    4aac:	ldr	r0, [sp, #4]
    4ab0:	bl	4870 <MyGame_Example_Monster_test>
    4ab4:	ldr	r1, [sp]
    4ab8:	str	r0, [r1, #4]
    4abc:	mov	sp, fp
    4ac0:	pop	{fp, pc}

00004ac4 <MyGame_Example_Monster_testbool>:
    4ac4:	push	{fp, lr}
    4ac8:	mov	fp, sp
    4acc:	sub	sp, sp, #24
    4ad0:	str	r0, [fp, #-4]
    4ad4:	movw	r0, #0
    4ad8:	strh	r0, [fp, #-6]
    4adc:	ldr	r0, [fp, #-4]
    4ae0:	movw	r1, #0
    4ae4:	cmp	r0, r1
    4ae8:	beq	4af4 <MyGame_Example_Monster_testbool+0x30>
    4aec:	b	4af0 <MyGame_Example_Monster_testbool+0x2c>
    4af0:	b	4b14 <MyGame_Example_Monster_testbool+0x50>
    4af4:	movw	r0, #0
    4af8:	movt	r0, #0
    4afc:	movw	r1, #0
    4b00:	movt	r1, #0
    4b04:	movw	r2, #723	; 0x2d3
    4b08:	movw	r3, #0
    4b0c:	movt	r3, #0
    4b10:	bl	0 <__assert_fail>
    4b14:	mov	r0, #15
    4b18:	strh	r0, [fp, #-8]
    4b1c:	ldr	r0, [fp, #-4]
    4b20:	str	r0, [sp, #8]
    4b24:	bl	f4c8 <__flatbuffers_soffset_read_from_pe>
    4b28:	ldr	r1, [sp, #8]
    4b2c:	sub	r0, r1, r0
    4b30:	str	r0, [sp, #12]
    4b34:	ldr	r0, [sp, #12]
    4b38:	bl	f4ec <__flatbuffers_voffset_read_from_pe>
    4b3c:	ldrh	r1, [fp, #-8]
    4b40:	add	r1, r1, #3
    4b44:	lsl	r1, r1, #1
    4b48:	cmp	r0, r1
    4b4c:	bcc	4b68 <MyGame_Example_Monster_testbool+0xa4>
    4b50:	ldr	r0, [sp, #12]
    4b54:	ldrh	r1, [fp, #-8]
    4b58:	add	r0, r0, r1, lsl #1
    4b5c:	add	r0, r0, #4
    4b60:	bl	f4ec <__flatbuffers_voffset_read_from_pe>
    4b64:	strh	r0, [fp, #-6]
    4b68:	ldrh	r0, [fp, #-6]
    4b6c:	cmp	r0, #0
    4b70:	beq	4b90 <MyGame_Example_Monster_testbool+0xcc>
    4b74:	ldr	r0, [fp, #-4]
    4b78:	ldrh	r1, [fp, #-6]
    4b7c:	add	r0, r0, r1
    4b80:	bl	11bec <flatbuffers_bool_read_from_pe>
    4b84:	and	r0, r0, #255	; 0xff
    4b88:	str	r0, [sp, #4]
    4b8c:	b	4b9c <MyGame_Example_Monster_testbool+0xd8>
    4b90:	movw	r0, #1
    4b94:	str	r0, [sp, #4]
    4b98:	b	4b9c <MyGame_Example_Monster_testbool+0xd8>
    4b9c:	ldr	r0, [sp, #4]
    4ba0:	and	r0, r0, #255	; 0xff
    4ba4:	mov	sp, fp
    4ba8:	pop	{fp, pc}

00004bac <MyGame_Example_Monster_testempty_is_present>:
    4bac:	push	{fp, lr}
    4bb0:	mov	fp, sp
    4bb4:	sub	sp, sp, #16
    4bb8:	str	r0, [fp, #-4]
    4bbc:	movw	r0, #0
    4bc0:	strh	r0, [fp, #-6]
    4bc4:	ldr	r0, [fp, #-4]
    4bc8:	movw	r1, #0
    4bcc:	cmp	r0, r1
    4bd0:	beq	4bdc <MyGame_Example_Monster_testempty_is_present+0x30>
    4bd4:	b	4bd8 <MyGame_Example_Monster_testempty_is_present+0x2c>
    4bd8:	b	4bfc <MyGame_Example_Monster_testempty_is_present+0x50>
    4bdc:	movw	r0, #0
    4be0:	movt	r0, #0
    4be4:	movw	r1, #0
    4be8:	movt	r1, #0
    4bec:	movw	r2, #722	; 0x2d2
    4bf0:	movw	r3, #0
    4bf4:	movt	r3, #0
    4bf8:	bl	0 <__assert_fail>
    4bfc:	mov	r0, #14
    4c00:	strh	r0, [sp, #8]
    4c04:	ldr	r0, [fp, #-4]
    4c08:	str	r0, [sp]
    4c0c:	bl	f4c8 <__flatbuffers_soffset_read_from_pe>
    4c10:	ldr	r1, [sp]
    4c14:	sub	r0, r1, r0
    4c18:	str	r0, [sp, #4]
    4c1c:	ldr	r0, [sp, #4]
    4c20:	bl	f4ec <__flatbuffers_voffset_read_from_pe>
    4c24:	ldrh	r1, [sp, #8]
    4c28:	add	r1, r1, #3
    4c2c:	lsl	r1, r1, #1
    4c30:	cmp	r0, r1
    4c34:	bcc	4c50 <MyGame_Example_Monster_testempty_is_present+0xa4>
    4c38:	ldr	r0, [sp, #4]
    4c3c:	ldrh	r1, [sp, #8]
    4c40:	add	r0, r0, r1, lsl #1
    4c44:	add	r0, r0, #4
    4c48:	bl	f4ec <__flatbuffers_voffset_read_from_pe>
    4c4c:	strh	r0, [fp, #-6]
    4c50:	ldrh	r0, [fp, #-6]
    4c54:	cmp	r0, #0
    4c58:	movw	r0, #0
    4c5c:	movne	r0, #1
    4c60:	and	r0, r0, #1
    4c64:	mov	sp, fp
    4c68:	pop	{fp, pc}

00004c6c <MyGame_Example_Monster_testempty>:
    4c6c:	push	{fp, lr}
    4c70:	mov	fp, sp
    4c74:	sub	sp, sp, #32
    4c78:	str	r0, [fp, #-8]
    4c7c:	movw	r0, #0
    4c80:	strh	r0, [fp, #-14]
    4c84:	ldr	r0, [fp, #-8]
    4c88:	movw	r1, #0
    4c8c:	cmp	r0, r1
    4c90:	beq	4c9c <MyGame_Example_Monster_testempty+0x30>
    4c94:	b	4c98 <MyGame_Example_Monster_testempty+0x2c>
    4c98:	b	4cbc <MyGame_Example_Monster_testempty+0x50>
    4c9c:	movw	r0, #0
    4ca0:	movt	r0, #0
    4ca4:	movw	r1, #0
    4ca8:	movt	r1, #0
    4cac:	movw	r2, #722	; 0x2d2
    4cb0:	movw	r3, #0
    4cb4:	movt	r3, #0
    4cb8:	bl	0 <__assert_fail>
    4cbc:	mov	r0, #14
    4cc0:	strh	r0, [sp, #16]
    4cc4:	ldr	r0, [fp, #-8]
    4cc8:	str	r0, [sp, #8]
    4ccc:	bl	f4c8 <__flatbuffers_soffset_read_from_pe>
    4cd0:	ldr	r1, [sp, #8]
    4cd4:	sub	r0, r1, r0
    4cd8:	str	r0, [sp, #12]
    4cdc:	ldr	r0, [sp, #12]
    4ce0:	bl	f4ec <__flatbuffers_voffset_read_from_pe>
    4ce4:	ldrh	r1, [sp, #16]
    4ce8:	add	r1, r1, #3
    4cec:	lsl	r1, r1, #1
    4cf0:	cmp	r0, r1
    4cf4:	bcc	4d10 <MyGame_Example_Monster_testempty+0xa4>
    4cf8:	ldr	r0, [sp, #12]
    4cfc:	ldrh	r1, [sp, #16]
    4d00:	add	r0, r0, r1, lsl #1
    4d04:	add	r0, r0, #4
    4d08:	bl	f4ec <__flatbuffers_voffset_read_from_pe>
    4d0c:	strh	r0, [fp, #-14]
    4d10:	ldrsh	r0, [fp, #-14]
    4d14:	cmp	r0, #0
    4d18:	beq	4d50 <MyGame_Example_Monster_testempty+0xe4>
    4d1c:	ldr	r0, [fp, #-8]
    4d20:	ldrh	r1, [fp, #-14]
    4d24:	add	r0, r0, r1
    4d28:	str	r0, [fp, #-12]
    4d2c:	ldr	r0, [fp, #-12]
    4d30:	ldr	r1, [fp, #-12]
    4d34:	str	r0, [sp, #4]
    4d38:	mov	r0, r1
    4d3c:	bl	f490 <__flatbuffers_uoffset_read_from_pe>
    4d40:	ldr	r1, [sp, #4]
    4d44:	add	r0, r1, r0
    4d48:	str	r0, [fp, #-4]
    4d4c:	b	4d58 <MyGame_Example_Monster_testempty+0xec>
    4d50:	movw	r0, #0
    4d54:	str	r0, [fp, #-4]
    4d58:	ldr	r0, [fp, #-4]
    4d5c:	mov	sp, fp
    4d60:	pop	{fp, pc}

00004d64 <MyGame_Example_Stat_id_is_present>:
    4d64:	push	{fp, lr}
    4d68:	mov	fp, sp
    4d6c:	sub	sp, sp, #16
    4d70:	str	r0, [fp, #-4]
    4d74:	movw	r0, #0
    4d78:	strh	r0, [fp, #-6]
    4d7c:	ldr	r0, [fp, #-4]
    4d80:	movw	r1, #0
    4d84:	cmp	r0, r1
    4d88:	beq	4d94 <MyGame_Example_Stat_id_is_present+0x30>
    4d8c:	b	4d90 <MyGame_Example_Stat_id_is_present+0x2c>
    4d90:	b	4db4 <MyGame_Example_Stat_id_is_present+0x50>
    4d94:	movw	r0, #0
    4d98:	movt	r0, #0
    4d9c:	movw	r1, #0
    4da0:	movt	r1, #0
    4da4:	movw	r2, #607	; 0x25f
    4da8:	movw	r3, #0
    4dac:	movt	r3, #0
    4db0:	bl	0 <__assert_fail>
    4db4:	mov	r0, #0
    4db8:	strh	r0, [sp, #8]
    4dbc:	ldr	r0, [fp, #-4]
    4dc0:	str	r0, [sp]
    4dc4:	bl	f4c8 <__flatbuffers_soffset_read_from_pe>
    4dc8:	ldr	r1, [sp]
    4dcc:	sub	r0, r1, r0
    4dd0:	str	r0, [sp, #4]
    4dd4:	ldr	r0, [sp, #4]
    4dd8:	bl	f4ec <__flatbuffers_voffset_read_from_pe>
    4ddc:	ldrh	r1, [sp, #8]
    4de0:	add	r1, r1, #3
    4de4:	lsl	r1, r1, #1
    4de8:	cmp	r0, r1
    4dec:	bcc	4e08 <MyGame_Example_Stat_id_is_present+0xa4>
    4df0:	ldr	r0, [sp, #4]
    4df4:	ldrh	r1, [sp, #8]
    4df8:	add	r0, r0, r1, lsl #1
    4dfc:	add	r0, r0, #4
    4e00:	bl	f4ec <__flatbuffers_voffset_read_from_pe>
    4e04:	strh	r0, [fp, #-6]
    4e08:	ldrh	r0, [fp, #-6]
    4e0c:	cmp	r0, #0
    4e10:	movw	r0, #0
    4e14:	movne	r0, #1
    4e18:	and	r0, r0, #1
    4e1c:	mov	sp, fp
    4e20:	pop	{fp, pc}

00004e24 <MyGame_Example_Stat_val_is_present>:
    4e24:	push	{fp, lr}
    4e28:	mov	fp, sp
    4e2c:	sub	sp, sp, #16
    4e30:	str	r0, [fp, #-4]
    4e34:	movw	r0, #0
    4e38:	strh	r0, [fp, #-6]
    4e3c:	ldr	r0, [fp, #-4]
    4e40:	movw	r1, #0
    4e44:	cmp	r0, r1
    4e48:	beq	4e54 <MyGame_Example_Stat_val_is_present+0x30>
    4e4c:	b	4e50 <MyGame_Example_Stat_val_is_present+0x2c>
    4e50:	b	4e74 <MyGame_Example_Stat_val_is_present+0x50>
    4e54:	movw	r0, #0
    4e58:	movt	r0, #0
    4e5c:	movw	r1, #0
    4e60:	movt	r1, #0
    4e64:	movw	r2, #608	; 0x260
    4e68:	movw	r3, #0
    4e6c:	movt	r3, #0
    4e70:	bl	0 <__assert_fail>
    4e74:	mov	r0, #1
    4e78:	strh	r0, [sp, #8]
    4e7c:	ldr	r0, [fp, #-4]
    4e80:	str	r0, [sp]
    4e84:	bl	f4c8 <__flatbuffers_soffset_read_from_pe>
    4e88:	ldr	r1, [sp]
    4e8c:	sub	r0, r1, r0
    4e90:	str	r0, [sp, #4]
    4e94:	ldr	r0, [sp, #4]
    4e98:	bl	f4ec <__flatbuffers_voffset_read_from_pe>
    4e9c:	ldrh	r1, [sp, #8]
    4ea0:	add	r1, r1, #3
    4ea4:	lsl	r1, r1, #1
    4ea8:	cmp	r0, r1
    4eac:	bcc	4ec8 <MyGame_Example_Stat_val_is_present+0xa4>
    4eb0:	ldr	r0, [sp, #4]
    4eb4:	ldrh	r1, [sp, #8]
    4eb8:	add	r0, r0, r1, lsl #1
    4ebc:	add	r0, r0, #4
    4ec0:	bl	f4ec <__flatbuffers_voffset_read_from_pe>
    4ec4:	strh	r0, [fp, #-6]
    4ec8:	ldrh	r0, [fp, #-6]
    4ecc:	cmp	r0, #0
    4ed0:	movw	r0, #0
    4ed4:	movne	r0, #1
    4ed8:	and	r0, r0, #1
    4edc:	mov	sp, fp
    4ee0:	pop	{fp, pc}

00004ee4 <MyGame_Example_Stat_count_is_present>:
    4ee4:	push	{fp, lr}
    4ee8:	mov	fp, sp
    4eec:	sub	sp, sp, #16
    4ef0:	str	r0, [fp, #-4]
    4ef4:	movw	r0, #0
    4ef8:	strh	r0, [fp, #-6]
    4efc:	ldr	r0, [fp, #-4]
    4f00:	movw	r1, #0
    4f04:	cmp	r0, r1
    4f08:	beq	4f14 <MyGame_Example_Stat_count_is_present+0x30>
    4f0c:	b	4f10 <MyGame_Example_Stat_count_is_present+0x2c>
    4f10:	b	4f34 <MyGame_Example_Stat_count_is_present+0x50>
    4f14:	movw	r0, #0
    4f18:	movt	r0, #0
    4f1c:	movw	r1, #0
    4f20:	movt	r1, #0
    4f24:	movw	r2, #609	; 0x261
    4f28:	movw	r3, #0
    4f2c:	movt	r3, #0
    4f30:	bl	0 <__assert_fail>
    4f34:	mov	r0, #2
    4f38:	strh	r0, [sp, #8]
    4f3c:	ldr	r0, [fp, #-4]
    4f40:	str	r0, [sp]
    4f44:	bl	f4c8 <__flatbuffers_soffset_read_from_pe>
    4f48:	ldr	r1, [sp]
    4f4c:	sub	r0, r1, r0
    4f50:	str	r0, [sp, #4]
    4f54:	ldr	r0, [sp, #4]
    4f58:	bl	f4ec <__flatbuffers_voffset_read_from_pe>
    4f5c:	ldrh	r1, [sp, #8]
    4f60:	add	r1, r1, #3
    4f64:	lsl	r1, r1, #1
    4f68:	cmp	r0, r1
    4f6c:	bcc	4f88 <MyGame_Example_Stat_count_is_present+0xa4>
    4f70:	ldr	r0, [sp, #4]
    4f74:	ldrh	r1, [sp, #8]
    4f78:	add	r0, r0, r1, lsl #1
    4f7c:	add	r0, r0, #4
    4f80:	bl	f4ec <__flatbuffers_voffset_read_from_pe>
    4f84:	strh	r0, [fp, #-6]
    4f88:	ldrh	r0, [fp, #-6]
    4f8c:	cmp	r0, #0
    4f90:	movw	r0, #0
    4f94:	movne	r0, #1
    4f98:	and	r0, r0, #1
    4f9c:	mov	sp, fp
    4fa0:	pop	{fp, pc}

00004fa4 <gen_monster>:
    4fa4:	push	{r4, r5, fp, lr}
    4fa8:	add	fp, sp, #8
    4fac:	sub	sp, sp, #328	; 0x148
    4fb0:	str	r0, [fp, #-12]
    4fb4:	str	r1, [fp, #-16]
    4fb8:	movw	r0, #0
    4fbc:	movt	r0, #0
    4fc0:	ldrb	r1, [r0]
    4fc4:	strb	r1, [fp, #-26]	; 0xffffffe6
    4fc8:	ldrb	r1, [r0, #1]
    4fcc:	strb	r1, [fp, #-25]	; 0xffffffe7
    4fd0:	ldrb	r1, [r0, #2]
    4fd4:	strb	r1, [fp, #-24]	; 0xffffffe8
    4fd8:	ldrb	r1, [r0, #3]
    4fdc:	strb	r1, [fp, #-23]	; 0xffffffe9
    4fe0:	ldrb	r1, [r0, #4]
    4fe4:	strb	r1, [fp, #-22]	; 0xffffffea
    4fe8:	ldrb	r1, [r0, #5]
    4fec:	strb	r1, [fp, #-21]	; 0xffffffeb
    4ff0:	ldrb	r1, [r0, #6]
    4ff4:	strb	r1, [fp, #-20]	; 0xffffffec
    4ff8:	ldrb	r1, [r0, #7]
    4ffc:	strb	r1, [fp, #-19]	; 0xffffffed
    5000:	ldrb	r1, [r0, #8]
    5004:	strb	r1, [fp, #-18]	; 0xffffffee
    5008:	ldrb	r0, [r0, #9]
    500c:	strb	r0, [fp, #-17]	; 0xffffffef
    5010:	movw	r0, #0
    5014:	movt	r0, #0
    5018:	ldrb	r1, [r0]
    501c:	strb	r1, [fp, #-80]	; 0xffffffb0
    5020:	ldrb	r1, [r0, #1]
    5024:	strb	r1, [fp, #-79]	; 0xffffffb1
    5028:	ldrb	r1, [r0, #2]
    502c:	strb	r1, [fp, #-78]	; 0xffffffb2
    5030:	ldrb	r0, [r0, #3]
    5034:	strb	r0, [fp, #-77]	; 0xffffffb3
    5038:	ldr	r0, [fp, #-12]
    503c:	bl	0 <flatcc_builder_reset>
    5040:	ldr	r1, [fp, #-16]
    5044:	cmp	r1, #0
    5048:	beq	5058 <gen_monster+0xb4>
    504c:	ldr	r0, [fp, #-12]
    5050:	bl	5774 <MyGame_Example_Monster_start_as_root_with_size>
    5054:	b	5060 <gen_monster+0xbc>
    5058:	ldr	r0, [fp, #-12]
    505c:	bl	57c0 <MyGame_Example_Monster_start_as_root>
    5060:	ldr	r0, [fp, #-12]
    5064:	movw	r1, #80	; 0x50
    5068:	sxth	r1, r1
    506c:	bl	580c <MyGame_Example_Monster_hp_add>
    5070:	ldr	r1, [fp, #-12]
    5074:	str	r0, [fp, #-108]	; 0xffffff94
    5078:	mov	r0, r1
    507c:	bl	5890 <MyGame_Example_Monster_pos_start>
    5080:	vldr	s0, [pc, #928]	; 5428 <gen_monster+0x484>
    5084:	str	r0, [fp, #-32]	; 0xffffffe0
    5088:	ldr	r0, [fp, #-32]	; 0xffffffe0
    508c:	vmov.f32	s2, #112	; 0x3f800000  1.0
    5090:	vstr	s2, [r0]
    5094:	ldr	r0, [fp, #-32]	; 0xffffffe0
    5098:	vmov.f32	s2, #0	; 0x40000000  2.0
    509c:	vstr	s2, [r0, #4]
    50a0:	ldr	r0, [fp, #-32]	; 0xffffffe0
    50a4:	vstr	s0, [r0, #8]
    50a8:	ldr	r0, [fp, #-12]
    50ac:	bl	58c0 <MyGame_Example_Monster_pos_end>
    50b0:	ldr	r1, [fp, #-12]
    50b4:	str	r0, [fp, #-112]	; 0xffffff90
    50b8:	mov	r0, r1
    50bc:	movw	r1, #0
    50c0:	movt	r1, #0
    50c4:	bl	1818 <MyGame_Example_Monster_name_create_str>
    50c8:	ldr	r1, [fp, #-12]
    50cc:	str	r0, [fp, #-116]	; 0xffffff8c
    50d0:	mov	r0, r1
    50d4:	movw	r1, #2
    50d8:	sxtb	r1, r1
    50dc:	bl	58d4 <MyGame_Example_Monster_color_add>
    50e0:	sub	r1, fp, #26
    50e4:	ldr	r2, [fp, #-12]
    50e8:	str	r0, [fp, #-120]	; 0xffffff88
    50ec:	mov	r0, r2
    50f0:	movw	r2, #10
    50f4:	bl	5954 <MyGame_Example_Monster_inventory_create>
    50f8:	ldr	r1, [fp, #-12]
    50fc:	str	r0, [fp, #-124]	; 0xffffff84
    5100:	mov	r0, r1
    5104:	bl	59ac <MyGame_Example_Monster_test4_start>
    5108:	ldr	r1, [fp, #-12]
    510c:	str	r0, [fp, #-128]	; 0xffffff80
    5110:	mov	r0, r1
    5114:	movw	r1, #1
    5118:	bl	59cc <MyGame_Example_Monster_test4_extend>
    511c:	str	r0, [fp, #-36]	; 0xffffffdc
    5120:	ldr	r0, [fp, #-36]	; 0xffffffdc
    5124:	movw	r1, #16
    5128:	strh	r1, [r0]
    512c:	ldr	r0, [fp, #-36]	; 0xffffffdc
    5130:	movw	r1, #32
    5134:	strb	r1, [r0, #2]
    5138:	ldr	r0, [fp, #-12]
    513c:	movw	r1, #2
    5140:	bl	59cc <MyGame_Example_Monster_test4_extend>
    5144:	str	r0, [fp, #-36]	; 0xffffffdc
    5148:	ldr	r0, [fp, #-36]	; 0xffffffdc
    514c:	movw	r1, #48	; 0x30
    5150:	strh	r1, [r0]
    5154:	ldr	r0, [fp, #-36]	; 0xffffffdc
    5158:	movw	r1, #64	; 0x40
    515c:	strb	r1, [r0, #2]
    5160:	ldr	r0, [fp, #-36]	; 0xffffffdc
    5164:	movw	r1, #80	; 0x50
    5168:	strh	r1, [r0, #4]
    516c:	ldr	r0, [fp, #-36]	; 0xffffffdc
    5170:	movw	r1, #96	; 0x60
    5174:	strb	r1, [r0, #6]
    5178:	ldr	r0, [fp, #-12]
    517c:	movw	r1, #112	; 0x70
    5180:	sxth	r1, r1
    5184:	movw	r2, #128	; 0x80
    5188:	sxtb	r2, r2
    518c:	bl	59f4 <MyGame_Example_Monster_test4_push_create>
    5190:	movw	r1, #400	; 0x190
    5194:	strh	r1, [fp, #-40]	; 0xffffffd8
    5198:	movw	r1, #145	; 0x91
    519c:	strb	r1, [fp, #-38]	; 0xffffffda
    51a0:	ldr	r1, [fp, #-12]
    51a4:	str	r0, [fp, #-132]	; 0xffffff7c
    51a8:	mov	r0, r1
    51ac:	sub	r1, fp, #40	; 0x28
    51b0:	bl	5a5c <MyGame_Example_Monster_test4_push>
    51b4:	ldr	r1, [fp, #-12]
    51b8:	str	r0, [fp, #-136]	; 0xffffff78
    51bc:	mov	r0, r1
    51c0:	sub	r1, fp, #40	; 0x28
    51c4:	bl	5a5c <MyGame_Example_Monster_test4_push>
    51c8:	ldr	r1, [fp, #-12]
    51cc:	str	r0, [fp, #-140]	; 0xffffff74
    51d0:	mov	r0, r1
    51d4:	sub	r1, fp, #40	; 0x28
    51d8:	bl	5adc <MyGame_Example_Test_vec_push>
    51dc:	ldr	r1, [fp, #-12]
    51e0:	str	r0, [fp, #-144]	; 0xffffff70
    51e4:	mov	r0, r1
    51e8:	bl	5b5c <MyGame_Example_Monster_test4_reserved_len>
    51ec:	cmp	r0, #7
    51f0:	bne	51f8 <gen_monster+0x254>
    51f4:	b	5218 <gen_monster+0x274>
    51f8:	movw	r0, #0
    51fc:	movt	r0, #0
    5200:	movw	r1, #0
    5204:	movt	r1, #0
    5208:	movw	r2, #881	; 0x371
    520c:	movw	r3, #0
    5210:	movt	r3, #0
    5214:	bl	0 <__assert_fail>
    5218:	ldr	r0, [fp, #-12]
    521c:	movw	r1, #2
    5220:	bl	5b7c <MyGame_Example_Monster_test4_truncate>
    5224:	ldr	r1, [fp, #-12]
    5228:	str	r0, [fp, #-148]	; 0xffffff6c
    522c:	mov	r0, r1
    5230:	bl	5b5c <MyGame_Example_Monster_test4_reserved_len>
    5234:	cmp	r0, #5
    5238:	bne	5240 <gen_monster+0x29c>
    523c:	b	5260 <gen_monster+0x2bc>
    5240:	movw	r0, #0
    5244:	movt	r0, #0
    5248:	movw	r1, #0
    524c:	movt	r1, #0
    5250:	movw	r2, #883	; 0x373
    5254:	movw	r3, #0
    5258:	movt	r3, #0
    525c:	bl	0 <__assert_fail>
    5260:	ldr	r0, [fp, #-12]
    5264:	bl	5ba4 <MyGame_Example_Monster_test4_edit>
    5268:	str	r0, [fp, #-36]	; 0xffffffdc
    526c:	ldr	r0, [fp, #-36]	; 0xffffffdc
    5270:	ldrsh	r1, [r0, #16]
    5274:	add	r1, r1, #1
    5278:	strh	r1, [r0, #16]
    527c:	ldr	r0, [fp, #-12]
    5280:	bl	5bc4 <MyGame_Example_Monster_test4_end>
    5284:	ldr	r1, [fp, #-12]
    5288:	str	r0, [fp, #-152]	; 0xffffff68
    528c:	mov	r0, r1
    5290:	bl	17f4 <MyGame_Example_Monster_start>
    5294:	ldr	r1, [fp, #-12]
    5298:	str	r0, [fp, #-156]	; 0xffffff64
    529c:	mov	r0, r1
    52a0:	movw	r1, #0
    52a4:	movt	r1, #0
    52a8:	movw	r2, #7
    52ac:	bl	5c04 <flatbuffers_string_create>
    52b0:	str	r0, [fp, #-64]	; 0xffffffc0
    52b4:	ldr	r0, [fp, #-12]
    52b8:	ldr	r1, [fp, #-64]	; 0xffffffc0
    52bc:	bl	5c34 <MyGame_Example_Monster_name_add>
    52c0:	ldr	r1, [fp, #-12]
    52c4:	str	r0, [fp, #-160]	; 0xffffff60
    52c8:	mov	r0, r1
    52cc:	bl	1864 <MyGame_Example_Monster_end>
    52d0:	str	r0, [fp, #-44]	; 0xffffffd4
    52d4:	ldr	r0, [fp, #-12]
    52d8:	bl	5ca0 <MyGame_Example_Monster_testarrayoftables_start>
    52dc:	ldr	r1, [fp, #-12]
    52e0:	str	r0, [fp, #-164]	; 0xffffff5c
    52e4:	mov	r0, r1
    52e8:	movw	r1, #2
    52ec:	bl	5cc0 <MyGame_Example_Monster_testarrayoftables_extend>
    52f0:	str	r0, [fp, #-60]	; 0xffffffc4
    52f4:	ldr	r0, [fp, #-44]	; 0xffffffd4
    52f8:	ldr	r1, [fp, #-60]	; 0xffffffc4
    52fc:	str	r0, [r1]
    5300:	ldr	r0, [fp, #-44]	; 0xffffffd4
    5304:	ldr	r1, [fp, #-60]	; 0xffffffc4
    5308:	str	r0, [r1, #4]
    530c:	ldr	r0, [fp, #-12]
    5310:	bl	5ce8 <MyGame_Example_Monster_testarrayoftables_push_start>
    5314:	ldr	r1, [fp, #-12]
    5318:	str	r0, [sp, #168]	; 0xa8
    531c:	mov	r0, r1
    5320:	movw	r1, #0
    5324:	movt	r1, #0
    5328:	movw	r2, #30
    532c:	bl	5d08 <MyGame_Example_Monster_name_create_strn>
    5330:	ldr	r1, [fp, #-12]
    5334:	str	r0, [sp, #164]	; 0xa4
    5338:	mov	r0, r1
    533c:	bl	5d60 <MyGame_Example_Monster_testarrayoftables_push_end>
    5340:	ldr	r0, [r0]
    5344:	str	r0, [fp, #-48]	; 0xffffffd0
    5348:	ldr	r0, [fp, #-12]
    534c:	movw	r1, #3
    5350:	bl	5cc0 <MyGame_Example_Monster_testarrayoftables_extend>
    5354:	str	r0, [fp, #-60]	; 0xffffffc4
    5358:	ldr	r0, [fp, #-44]	; 0xffffffd4
    535c:	ldr	r1, [fp, #-60]	; 0xffffffc4
    5360:	str	r0, [r1]
    5364:	ldr	r0, [fp, #-48]	; 0xffffffd0
    5368:	ldr	r1, [fp, #-60]	; 0xffffffc4
    536c:	str	r0, [r1, #4]
    5370:	ldr	r0, [fp, #-12]
    5374:	movw	r1, #1
    5378:	bl	5da0 <MyGame_Example_Monster_testarrayoftables_truncate>
    537c:	ldr	r1, [fp, #-12]
    5380:	str	r0, [sp, #160]	; 0xa0
    5384:	mov	r0, r1
    5388:	bl	5dc8 <MyGame_Example_Monster_testarrayoftables_reserved_len>
    538c:	cmp	r0, #5
    5390:	bne	5398 <gen_monster+0x3f4>
    5394:	b	53b8 <gen_monster+0x414>
    5398:	movw	r0, #0
    539c:	movt	r0, #0
    53a0:	movw	r1, #0
    53a4:	movt	r1, #0
    53a8:	movw	r2, #923	; 0x39b
    53ac:	movw	r3, #0
    53b0:	movt	r3, #0
    53b4:	bl	0 <__assert_fail>
    53b8:	ldr	r0, [fp, #-12]
    53bc:	bl	5ce8 <MyGame_Example_Monster_testarrayoftables_push_start>
    53c0:	ldr	r1, [fp, #-12]
    53c4:	str	r0, [sp, #156]	; 0x9c
    53c8:	mov	r0, r1
    53cc:	movw	r1, #0
    53d0:	movt	r1, #0
    53d4:	movw	r2, #8
    53d8:	bl	5d08 <MyGame_Example_Monster_name_create_strn>
    53dc:	ldr	r1, [fp, #-12]
    53e0:	str	r0, [sp, #152]	; 0x98
    53e4:	mov	r0, r1
    53e8:	bl	5d60 <MyGame_Example_Monster_testarrayoftables_push_end>
    53ec:	ldr	r0, [r0]
    53f0:	str	r0, [fp, #-56]	; 0xffffffc8
    53f4:	ldr	r0, [fp, #-12]
    53f8:	bl	5dc8 <MyGame_Example_Monster_testarrayoftables_reserved_len>
    53fc:	cmp	r0, #6
    5400:	bne	5408 <gen_monster+0x464>
    5404:	b	542c <gen_monster+0x488>
    5408:	movw	r0, #0
    540c:	movt	r0, #0
    5410:	movw	r1, #0
    5414:	movt	r1, #0
    5418:	movw	r2, #929	; 0x3a1
    541c:	movw	r3, #0
    5420:	movt	r3, #0
    5424:	bl	0 <__assert_fail>
    5428:	.word	0xc04ccccd
    542c:	ldr	r0, [fp, #-12]
    5430:	bl	5de8 <MyGame_Example_Monster_testarrayoftables_edit>
    5434:	str	r0, [fp, #-60]	; 0xffffffc4
    5438:	ldr	r0, [fp, #-60]	; 0xffffffc4
    543c:	ldr	r0, [r0, #20]
    5440:	str	r0, [fp, #-48]	; 0xffffffd0
    5444:	ldr	r0, [fp, #-60]	; 0xffffffc4
    5448:	ldr	r0, [r0, #8]
    544c:	str	r0, [fp, #-52]	; 0xffffffcc
    5450:	ldr	r0, [fp, #-44]	; 0xffffffd4
    5454:	ldr	r1, [fp, #-60]	; 0xffffffc4
    5458:	str	r0, [r1, #20]
    545c:	ldr	r0, [fp, #-48]	; 0xffffffd0
    5460:	ldr	r1, [fp, #-60]	; 0xffffffc4
    5464:	str	r0, [r1]
    5468:	ldr	r0, [fp, #-12]
    546c:	sub	r1, fp, #56	; 0x38
    5470:	mov	r2, #2
    5474:	str	r2, [sp, #148]	; 0x94
    5478:	bl	5e08 <MyGame_Example_Monster_testarrayoftables_append>
    547c:	ldr	r1, [fp, #-12]
    5480:	str	r0, [sp, #144]	; 0x90
    5484:	mov	r0, r1
    5488:	bl	5e38 <MyGame_Example_Monster_testarrayoftables_end>
    548c:	ldr	r1, [fp, #-12]
    5490:	movw	r2, #0
    5494:	movt	r2, #0
    5498:	str	r0, [sp, #140]	; 0x8c
    549c:	mov	r0, r1
    54a0:	mov	r1, r2
    54a4:	bl	5e78 <flatbuffers_string_create_str>
    54a8:	str	r0, [fp, #-76]	; 0xffffffb4
    54ac:	ldr	r0, [fp, #-12]
    54b0:	movw	r1, #0
    54b4:	movt	r1, #0
    54b8:	ldr	r2, [sp, #148]	; 0x94
    54bc:	bl	5c04 <flatbuffers_string_create>
    54c0:	str	r0, [fp, #-72]	; 0xffffffb8
    54c4:	ldr	r0, [fp, #-12]
    54c8:	movw	r1, #0
    54cc:	movt	r1, #0
    54d0:	bl	5e78 <flatbuffers_string_create_str>
    54d4:	str	r0, [fp, #-68]	; 0xffffffbc
    54d8:	ldr	r0, [fp, #-12]
    54dc:	sub	r1, fp, #76	; 0x4c
    54e0:	mov	r2, #3
    54e4:	str	r2, [sp, #136]	; 0x88
    54e8:	bl	5ea0 <MyGame_Example_Monster_testarrayofstring_create>
    54ec:	ldr	r1, [fp, #-12]
    54f0:	str	r0, [sp, #132]	; 0x84
    54f4:	mov	r0, r1
    54f8:	bl	5ef8 <MyGame_Example_Monster_testarrayofbools_start>
    54fc:	ldr	r1, [fp, #-12]
    5500:	sub	r2, fp, #80	; 0x50
    5504:	mov	r3, #1
    5508:	str	r0, [sp, #128]	; 0x80
    550c:	mov	r0, r1
    5510:	mov	r1, r2
    5514:	str	r2, [sp, #124]	; 0x7c
    5518:	mov	r2, r3
    551c:	bl	5f18 <MyGame_Example_Monster_testarrayofbools_append>
    5520:	ldr	r1, [fp, #-12]
    5524:	ldr	r2, [sp, #124]	; 0x7c
    5528:	add	r3, r2, #1
    552c:	str	r0, [sp, #120]	; 0x78
    5530:	mov	r0, r1
    5534:	mov	r1, r3
    5538:	ldr	r2, [sp, #136]	; 0x88
    553c:	bl	5f18 <MyGame_Example_Monster_testarrayofbools_append>
    5540:	ldr	r1, [fp, #-12]
    5544:	str	r0, [sp, #116]	; 0x74
    5548:	mov	r0, r1
    554c:	bl	5f48 <MyGame_Example_Monster_testarrayofbools_end>
    5550:	ldr	r1, [fp, #-12]
    5554:	ldr	r2, [fp, #-44]	; 0xffffffd4
    5558:	sub	r3, fp, #88	; 0x58
    555c:	str	r0, [sp, #112]	; 0x70
    5560:	mov	r0, r3
    5564:	str	r1, [sp, #108]	; 0x6c
    5568:	mov	r1, r2
    556c:	bl	604c <MyGame_Example_Any_as_Monster>
    5570:	ldr	r1, [fp, #-88]	; 0xffffffa8
    5574:	ldr	r2, [fp, #-84]	; 0xffffffac
    5578:	ldr	r0, [sp, #108]	; 0x6c
    557c:	bl	5f88 <MyGame_Example_Monster_test_add>
    5580:	ldr	r1, [fp, #-12]
    5584:	str	r0, [sp, #104]	; 0x68
    5588:	mov	r0, r1
    558c:	bl	606c <MyGame_Example_Monster_enemy_start>
    5590:	ldr	r1, [fp, #-12]
    5594:	movw	r2, #0
    5598:	movt	r2, #0
    559c:	str	r0, [sp, #100]	; 0x64
    55a0:	mov	r0, r1
    55a4:	mov	r1, r2
    55a8:	bl	1818 <MyGame_Example_Monster_name_create_str>
    55ac:	ldr	r1, [fp, #-12]
    55b0:	str	r0, [sp, #96]	; 0x60
    55b4:	mov	r0, r1
    55b8:	bl	5ca0 <MyGame_Example_Monster_testarrayoftables_start>
    55bc:	ldr	r1, [fp, #-12]
    55c0:	str	r0, [sp, #92]	; 0x5c
    55c4:	mov	r0, r1
    55c8:	bl	608c <MyGame_Example_Monster_vec_push_start>
    55cc:	ldr	r1, [fp, #-12]
    55d0:	ldr	r2, [fp, #-44]	; 0xffffffd4
    55d4:	sub	r3, fp, #96	; 0x60
    55d8:	str	r0, [sp, #88]	; 0x58
    55dc:	mov	r0, r3
    55e0:	str	r1, [sp, #84]	; 0x54
    55e4:	mov	r1, r2
    55e8:	bl	604c <MyGame_Example_Any_as_Monster>
    55ec:	ldr	r1, [fp, #-96]	; 0xffffffa0
    55f0:	ldr	r2, [fp, #-92]	; 0xffffffa4
    55f4:	ldr	r0, [sp, #84]	; 0x54
    55f8:	bl	5f88 <MyGame_Example_Monster_test_add>
    55fc:	ldr	r1, [fp, #-12]
    5600:	movw	r2, #0
    5604:	movt	r2, #0
    5608:	str	r0, [sp, #80]	; 0x50
    560c:	mov	r0, r1
    5610:	mov	r1, r2
    5614:	str	r2, [sp, #76]	; 0x4c
    5618:	bl	1818 <MyGame_Example_Monster_name_create_str>
    561c:	ldr	r1, [fp, #-12]
    5620:	str	r0, [sp, #72]	; 0x48
    5624:	mov	r0, r1
    5628:	bl	5d60 <MyGame_Example_Monster_testarrayoftables_push_end>
    562c:	ldr	r1, [fp, #-12]
    5630:	str	r0, [sp, #68]	; 0x44
    5634:	mov	r0, r1
    5638:	bl	5ce8 <MyGame_Example_Monster_testarrayoftables_push_start>
    563c:	ldr	r1, [fp, #-12]
    5640:	ldr	r2, [fp, #-44]	; 0xffffffd4
    5644:	str	r0, [sp, #64]	; 0x40
    5648:	mov	r0, r1
    564c:	mov	r1, r2
    5650:	bl	60ac <MyGame_Example_Monster_test_Monster_add>
    5654:	ldr	r1, [fp, #-12]
    5658:	str	r0, [sp, #60]	; 0x3c
    565c:	mov	r0, r1
    5660:	ldr	r1, [sp, #76]	; 0x4c
    5664:	bl	1818 <MyGame_Example_Monster_name_create_str>
    5668:	ldr	r1, [fp, #-12]
    566c:	str	r0, [sp, #56]	; 0x38
    5670:	mov	r0, r1
    5674:	bl	60f0 <MyGame_Example_Monster_vec_push_end>
    5678:	ldr	r1, [fp, #-12]
    567c:	str	r0, [sp, #52]	; 0x34
    5680:	mov	r0, r1
    5684:	bl	5ce8 <MyGame_Example_Monster_testarrayoftables_push_start>
    5688:	ldr	r1, [fp, #-12]
    568c:	ldr	r2, [fp, #-44]	; 0xffffffd4
    5690:	sub	r3, fp, #104	; 0x68
    5694:	str	r0, [sp, #48]	; 0x30
    5698:	mov	r0, r3
    569c:	str	r1, [sp, #44]	; 0x2c
    56a0:	mov	r1, r2
    56a4:	bl	604c <MyGame_Example_Any_as_Monster>
    56a8:	ldr	r1, [fp, #-104]	; 0xffffff98
    56ac:	ldr	r2, [fp, #-100]	; 0xffffff9c
    56b0:	ldr	r0, [sp, #44]	; 0x2c
    56b4:	bl	6130 <MyGame_Example_Monster_test_add_value>
    56b8:	ldr	r1, [fp, #-12]
    56bc:	str	r0, [sp, #40]	; 0x28
    56c0:	mov	r0, r1
    56c4:	movw	r1, #0
    56c8:	movt	r1, #0
    56cc:	bl	1818 <MyGame_Example_Monster_name_create_str>
    56d0:	ldr	r1, [fp, #-12]
    56d4:	str	r0, [sp, #36]	; 0x24
    56d8:	mov	r0, r1
    56dc:	movw	r1, #1
    56e0:	and	r1, r1, #255	; 0xff
    56e4:	bl	61b4 <MyGame_Example_Monster_test_add_type>
    56e8:	ldr	r1, [fp, #-12]
    56ec:	str	r0, [sp, #32]
    56f0:	mov	r0, r1
    56f4:	bl	5d60 <MyGame_Example_Monster_testarrayoftables_push_end>
    56f8:	ldr	r1, [fp, #-12]
    56fc:	str	r0, [sp, #28]
    5700:	mov	r0, r1
    5704:	bl	5e38 <MyGame_Example_Monster_testarrayoftables_end>
    5708:	ldr	r1, [fp, #-12]
    570c:	str	r0, [sp, #24]
    5710:	mov	r0, r1
    5714:	bl	6240 <MyGame_Example_Monster_enemy_end>
    5718:	ldr	r1, [fp, #-12]
    571c:	str	r0, [sp, #20]
    5720:	mov	r0, r1
    5724:	movw	r1, #0
    5728:	and	r1, r1, #255	; 0xff
    572c:	bl	6280 <MyGame_Example_Monster_testbool_add>
    5730:	ldr	r1, [fp, #-12]
    5734:	str	r0, [sp, #16]
    5738:	mov	r0, r1
    573c:	bl	6300 <MyGame_Example_Monster_testempty_start>
    5740:	ldr	r1, [fp, #-12]
    5744:	str	r0, [sp, #12]
    5748:	mov	r0, r1
    574c:	bl	6320 <MyGame_Example_Monster_testempty_end>
    5750:	ldr	r1, [fp, #-12]
    5754:	str	r0, [sp, #8]
    5758:	mov	r0, r1
    575c:	bl	6360 <MyGame_Example_Monster_end_as_root>
    5760:	movw	r1, #0
    5764:	str	r0, [sp, #4]
    5768:	mov	r0, r1
    576c:	sub	sp, fp, #8
    5770:	pop	{r4, r5, fp, pc}

00005774 <MyGame_Example_Monster_start_as_root_with_size>:
    5774:	push	{fp, lr}
    5778:	mov	fp, sp
    577c:	sub	sp, sp, #8
    5780:	str	r0, [sp, #4]
    5784:	ldr	r0, [sp, #4]
    5788:	movw	r1, #0
    578c:	movt	r1, #0
    5790:	bl	11c64 <flatbuffers_buffer_start_with_size>
    5794:	cmp	r0, #0
    5798:	beq	57a8 <MyGame_Example_Monster_start_as_root_with_size+0x34>
    579c:	mvn	r0, #0
    57a0:	str	r0, [sp]
    57a4:	b	57b4 <MyGame_Example_Monster_start_as_root_with_size+0x40>
    57a8:	ldr	r0, [sp, #4]
    57ac:	bl	17f4 <MyGame_Example_Monster_start>
    57b0:	str	r0, [sp]
    57b4:	ldr	r0, [sp]
    57b8:	mov	sp, fp
    57bc:	pop	{fp, pc}

000057c0 <MyGame_Example_Monster_start_as_root>:
    57c0:	push	{fp, lr}
    57c4:	mov	fp, sp
    57c8:	sub	sp, sp, #8
    57cc:	str	r0, [sp, #4]
    57d0:	ldr	r0, [sp, #4]
    57d4:	movw	r1, #0
    57d8:	movt	r1, #0
    57dc:	bl	17c0 <flatbuffers_buffer_start>
    57e0:	cmp	r0, #0
    57e4:	beq	57f4 <MyGame_Example_Monster_start_as_root+0x34>
    57e8:	mvn	r0, #0
    57ec:	str	r0, [sp]
    57f0:	b	5800 <MyGame_Example_Monster_start_as_root+0x40>
    57f4:	ldr	r0, [sp, #4]
    57f8:	bl	17f4 <MyGame_Example_Monster_start>
    57fc:	str	r0, [sp]
    5800:	ldr	r0, [sp]
    5804:	mov	sp, fp
    5808:	pop	{fp, pc}

0000580c <MyGame_Example_Monster_hp_add>:
    580c:	push	{fp, lr}
    5810:	mov	fp, sp
    5814:	sub	sp, sp, #24
    5818:	str	r0, [fp, #-8]
    581c:	strh	r1, [fp, #-10]
    5820:	ldrsh	r0, [fp, #-10]
    5824:	cmp	r0, #100	; 0x64
    5828:	bne	5838 <MyGame_Example_Monster_hp_add+0x2c>
    582c:	movw	r0, #0
    5830:	str	r0, [fp, #-4]
    5834:	b	5884 <MyGame_Example_Monster_hp_add+0x78>
    5838:	ldr	r0, [fp, #-8]
    583c:	movw	r1, #2
    5840:	str	r1, [sp, #4]
    5844:	ldr	r2, [sp, #4]
    5848:	movw	r3, #2
    584c:	uxth	r3, r3
    5850:	bl	0 <flatcc_builder_table_add>
    5854:	str	r0, [sp, #8]
    5858:	movw	r1, #0
    585c:	cmp	r0, r1
    5860:	bne	5870 <MyGame_Example_Monster_hp_add+0x64>
    5864:	mvn	r0, #0
    5868:	str	r0, [fp, #-4]
    586c:	b	5884 <MyGame_Example_Monster_hp_add+0x78>
    5870:	ldr	r0, [sp, #8]
    5874:	ldrsh	r1, [fp, #-10]
    5878:	bl	ff80 <flatbuffers_int16_assign_to_pe>
    587c:	movw	r1, #0
    5880:	str	r1, [fp, #-4]
    5884:	ldr	r0, [fp, #-4]
    5888:	mov	sp, fp
    588c:	pop	{fp, pc}

00005890 <MyGame_Example_Monster_pos_start>:
    5890:	push	{fp, lr}
    5894:	mov	fp, sp
    5898:	sub	sp, sp, #8
    589c:	str	r0, [sp, #4]
    58a0:	ldr	r0, [sp, #4]
    58a4:	movw	r1, #0
    58a8:	movw	r2, #32
    58ac:	movw	r3, #16
    58b0:	uxth	r3, r3
    58b4:	bl	0 <flatcc_builder_table_add>
    58b8:	mov	sp, fp
    58bc:	pop	{fp, pc}

000058c0 <MyGame_Example_Monster_pos_end>:
    58c0:	sub	sp, sp, #4
    58c4:	str	r0, [sp]
    58c8:	movw	r0, #0
    58cc:	add	sp, sp, #4
    58d0:	bx	lr

000058d4 <MyGame_Example_Monster_color_add>:
    58d4:	push	{fp, lr}
    58d8:	mov	fp, sp
    58dc:	sub	sp, sp, #16
    58e0:	str	r0, [sp, #8]
    58e4:	strb	r1, [sp, #7]
    58e8:	ldrsb	r0, [sp, #7]
    58ec:	cmp	r0, #8
    58f0:	bne	5900 <MyGame_Example_Monster_color_add+0x2c>
    58f4:	movw	r0, #0
    58f8:	str	r0, [fp, #-4]
    58fc:	b	5948 <MyGame_Example_Monster_color_add+0x74>
    5900:	ldr	r0, [sp, #8]
    5904:	movw	r1, #6
    5908:	movw	r2, #1
    590c:	movw	r3, #1
    5910:	uxth	r3, r3
    5914:	bl	0 <flatcc_builder_table_add>
    5918:	str	r0, [sp]
    591c:	movw	r1, #0
    5920:	cmp	r0, r1
    5924:	bne	5934 <MyGame_Example_Monster_color_add+0x60>
    5928:	mvn	r0, #0
    592c:	str	r0, [fp, #-4]
    5930:	b	5948 <MyGame_Example_Monster_color_add+0x74>
    5934:	ldr	r0, [sp]
    5938:	ldrsb	r1, [sp, #7]
    593c:	bl	11c98 <MyGame_Example_Color_assign_to_pe>
    5940:	movw	r1, #0
    5944:	str	r1, [fp, #-4]
    5948:	ldr	r0, [fp, #-4]
    594c:	mov	sp, fp
    5950:	pop	{fp, pc}

00005954 <MyGame_Example_Monster_inventory_create>:
    5954:	push	{fp, lr}
    5958:	mov	fp, sp
    595c:	sub	sp, sp, #24
    5960:	str	r0, [fp, #-4]
    5964:	str	r1, [fp, #-8]
    5968:	str	r2, [sp, #12]
    596c:	ldr	r0, [fp, #-4]
    5970:	ldr	r1, [fp, #-4]
    5974:	ldr	r2, [fp, #-8]
    5978:	ldr	r3, [sp, #12]
    597c:	str	r0, [sp, #8]
    5980:	mov	r0, r1
    5984:	mov	r1, r2
    5988:	mov	r2, r3
    598c:	bl	8b8 <flatbuffers_uint8_vec_create>
    5990:	ldr	r1, [sp, #8]
    5994:	str	r0, [sp, #4]
    5998:	mov	r0, r1
    599c:	ldr	r1, [sp, #4]
    59a0:	bl	11cdc <MyGame_Example_Monster_inventory_add>
    59a4:	mov	sp, fp
    59a8:	pop	{fp, pc}

000059ac <MyGame_Example_Monster_test4_start>:
    59ac:	push	{fp, lr}
    59b0:	mov	fp, sp
    59b4:	sub	sp, sp, #8
    59b8:	str	r0, [sp, #4]
    59bc:	ldr	r0, [sp, #4]
    59c0:	bl	11d48 <MyGame_Example_Test_vec_start>
    59c4:	mov	sp, fp
    59c8:	pop	{fp, pc}

000059cc <MyGame_Example_Monster_test4_extend>:
    59cc:	push	{fp, lr}
    59d0:	mov	fp, sp
    59d4:	sub	sp, sp, #8
    59d8:	str	r0, [sp, #4]
    59dc:	str	r1, [sp]
    59e0:	ldr	r0, [sp, #4]
    59e4:	ldr	r1, [sp]
    59e8:	bl	0 <flatcc_builder_extend_vector>
    59ec:	mov	sp, fp
    59f0:	pop	{fp, pc}

000059f4 <MyGame_Example_Monster_test4_push_create>:
    59f4:	push	{fp, lr}
    59f8:	mov	fp, sp
    59fc:	sub	sp, sp, #16
    5a00:	str	r0, [fp, #-4]
    5a04:	strh	r1, [fp, #-6]
    5a08:	strb	r2, [fp, #-7]
    5a0c:	ldr	r0, [fp, #-4]
    5a10:	movw	r1, #1
    5a14:	bl	0 <flatcc_builder_extend_vector>
    5a18:	str	r0, [sp, #4]
    5a1c:	movw	r1, #0
    5a20:	cmp	r0, r1
    5a24:	beq	5a44 <MyGame_Example_Monster_test4_push_create+0x50>
    5a28:	ldr	r0, [sp, #4]
    5a2c:	ldrh	r1, [fp, #-6]
    5a30:	sxth	r1, r1
    5a34:	ldrsb	r2, [fp, #-7]
    5a38:	bl	11d7c <MyGame_Example_Test_assign>
    5a3c:	str	r0, [sp]
    5a40:	b	5a50 <MyGame_Example_Monster_test4_push_create+0x5c>
    5a44:	movw	r0, #0
    5a48:	str	r0, [sp]
    5a4c:	b	5a50 <MyGame_Example_Monster_test4_push_create+0x5c>
    5a50:	ldr	r0, [sp]
    5a54:	mov	sp, fp
    5a58:	pop	{fp, pc}

00005a5c <MyGame_Example_Monster_test4_push>:
    5a5c:	push	{fp, lr}
    5a60:	mov	fp, sp
    5a64:	sub	sp, sp, #32
    5a68:	str	r0, [fp, #-4]
    5a6c:	str	r1, [fp, #-8]
    5a70:	ldr	r0, [fp, #-4]
    5a74:	movw	r1, #1
    5a78:	bl	0 <flatcc_builder_extend_vector>
    5a7c:	str	r0, [fp, #-12]
    5a80:	movw	r1, #0
    5a84:	cmp	r0, r1
    5a88:	beq	5ac4 <MyGame_Example_Monster_test4_push+0x68>
    5a8c:	ldr	r0, [fp, #-12]
    5a90:	ldr	r1, [fp, #-8]
    5a94:	str	r0, [sp, #16]
    5a98:	str	r1, [sp, #12]
    5a9c:	bl	11db0 <MyGame_Example_Test__size>
    5aa0:	ldr	r1, [sp, #16]
    5aa4:	str	r0, [sp, #8]
    5aa8:	mov	r0, r1
    5aac:	ldr	r1, [sp, #12]
    5ab0:	ldr	r2, [sp, #8]
    5ab4:	bl	0 <memcpy>
    5ab8:	ldr	r0, [fp, #-12]
    5abc:	str	r0, [sp, #4]
    5ac0:	b	5ad0 <MyGame_Example_Monster_test4_push+0x74>
    5ac4:	movw	r0, #0
    5ac8:	str	r0, [sp, #4]
    5acc:	b	5ad0 <MyGame_Example_Monster_test4_push+0x74>
    5ad0:	ldr	r0, [sp, #4]
    5ad4:	mov	sp, fp
    5ad8:	pop	{fp, pc}

00005adc <MyGame_Example_Test_vec_push>:
    5adc:	push	{fp, lr}
    5ae0:	mov	fp, sp
    5ae4:	sub	sp, sp, #32
    5ae8:	str	r0, [fp, #-4]
    5aec:	str	r1, [fp, #-8]
    5af0:	ldr	r0, [fp, #-4]
    5af4:	movw	r1, #1
    5af8:	bl	0 <flatcc_builder_extend_vector>
    5afc:	str	r0, [fp, #-12]
    5b00:	movw	r1, #0
    5b04:	cmp	r0, r1
    5b08:	beq	5b44 <MyGame_Example_Test_vec_push+0x68>
    5b0c:	ldr	r0, [fp, #-12]
    5b10:	ldr	r1, [fp, #-8]
    5b14:	str	r0, [sp, #16]
    5b18:	str	r1, [sp, #12]
    5b1c:	bl	11db0 <MyGame_Example_Test__size>
    5b20:	ldr	r1, [sp, #16]
    5b24:	str	r0, [sp, #8]
    5b28:	mov	r0, r1
    5b2c:	ldr	r1, [sp, #12]
    5b30:	ldr	r2, [sp, #8]
    5b34:	bl	0 <memcpy>
    5b38:	ldr	r0, [fp, #-12]
    5b3c:	str	r0, [sp, #4]
    5b40:	b	5b50 <MyGame_Example_Test_vec_push+0x74>
    5b44:	movw	r0, #0
    5b48:	str	r0, [sp, #4]
    5b4c:	b	5b50 <MyGame_Example_Test_vec_push+0x74>
    5b50:	ldr	r0, [sp, #4]
    5b54:	mov	sp, fp
    5b58:	pop	{fp, pc}

00005b5c <MyGame_Example_Monster_test4_reserved_len>:
    5b5c:	push	{fp, lr}
    5b60:	mov	fp, sp
    5b64:	sub	sp, sp, #8
    5b68:	str	r0, [sp, #4]
    5b6c:	ldr	r0, [sp, #4]
    5b70:	bl	0 <flatcc_builder_vector_count>
    5b74:	mov	sp, fp
    5b78:	pop	{fp, pc}

00005b7c <MyGame_Example_Monster_test4_truncate>:
    5b7c:	push	{fp, lr}
    5b80:	mov	fp, sp
    5b84:	sub	sp, sp, #8
    5b88:	str	r0, [sp, #4]
    5b8c:	str	r1, [sp]
    5b90:	ldr	r0, [sp, #4]
    5b94:	ldr	r1, [sp]
    5b98:	bl	0 <flatcc_builder_truncate_vector>
    5b9c:	mov	sp, fp
    5ba0:	pop	{fp, pc}

00005ba4 <MyGame_Example_Monster_test4_edit>:
    5ba4:	push	{fp, lr}
    5ba8:	mov	fp, sp
    5bac:	sub	sp, sp, #8
    5bb0:	str	r0, [sp, #4]
    5bb4:	ldr	r0, [sp, #4]
    5bb8:	bl	0 <flatcc_builder_vector_edit>
    5bbc:	mov	sp, fp
    5bc0:	pop	{fp, pc}

00005bc4 <MyGame_Example_Monster_test4_end>:
    5bc4:	push	{fp, lr}
    5bc8:	mov	fp, sp
    5bcc:	sub	sp, sp, #16
    5bd0:	str	r0, [fp, #-4]
    5bd4:	ldr	r0, [fp, #-4]
    5bd8:	ldr	r1, [fp, #-4]
    5bdc:	str	r0, [sp, #8]
    5be0:	mov	r0, r1
    5be4:	bl	11e24 <MyGame_Example_Test_vec_end>
    5be8:	ldr	r1, [sp, #8]
    5bec:	str	r0, [sp, #4]
    5bf0:	mov	r0, r1
    5bf4:	ldr	r1, [sp, #4]
    5bf8:	bl	11db8 <MyGame_Example_Monster_test4_add>
    5bfc:	mov	sp, fp
    5c00:	pop	{fp, pc}

00005c04 <flatbuffers_string_create>:
    5c04:	push	{fp, lr}
    5c08:	mov	fp, sp
    5c0c:	sub	sp, sp, #16
    5c10:	str	r0, [fp, #-4]
    5c14:	str	r1, [sp, #8]
    5c18:	str	r2, [sp, #4]
    5c1c:	ldr	r0, [fp, #-4]
    5c20:	ldr	r1, [sp, #8]
    5c24:	ldr	r2, [sp, #4]
    5c28:	bl	0 <flatcc_builder_create_string>
    5c2c:	mov	sp, fp
    5c30:	pop	{fp, pc}

00005c34 <MyGame_Example_Monster_name_add>:
    5c34:	push	{fp, lr}
    5c38:	mov	fp, sp
    5c3c:	sub	sp, sp, #16
    5c40:	str	r0, [fp, #-4]
    5c44:	str	r1, [sp, #8]
    5c48:	ldr	r0, [sp, #8]
    5c4c:	cmp	r0, #0
    5c50:	beq	5c88 <MyGame_Example_Monster_name_add+0x54>
    5c54:	ldr	r0, [fp, #-4]
    5c58:	movw	r1, #3
    5c5c:	bl	0 <flatcc_builder_table_add_offset>
    5c60:	str	r0, [sp, #4]
    5c64:	movw	r1, #0
    5c68:	cmp	r0, r1
    5c6c:	beq	5c88 <MyGame_Example_Monster_name_add+0x54>
    5c70:	ldr	r0, [sp, #8]
    5c74:	ldr	r1, [sp, #4]
    5c78:	str	r0, [r1]
    5c7c:	movw	r0, #0
    5c80:	str	r0, [sp]
    5c84:	b	5c94 <MyGame_Example_Monster_name_add+0x60>
    5c88:	mvn	r0, #0
    5c8c:	str	r0, [sp]
    5c90:	b	5c94 <MyGame_Example_Monster_name_add+0x60>
    5c94:	ldr	r0, [sp]
    5c98:	mov	sp, fp
    5c9c:	pop	{fp, pc}

00005ca0 <MyGame_Example_Monster_testarrayoftables_start>:
    5ca0:	push	{fp, lr}
    5ca4:	mov	fp, sp
    5ca8:	sub	sp, sp, #8
    5cac:	str	r0, [sp, #4]
    5cb0:	ldr	r0, [sp, #4]
    5cb4:	bl	0 <flatcc_builder_start_offset_vector>
    5cb8:	mov	sp, fp
    5cbc:	pop	{fp, pc}

00005cc0 <MyGame_Example_Monster_testarrayoftables_extend>:
    5cc0:	push	{fp, lr}
    5cc4:	mov	fp, sp
    5cc8:	sub	sp, sp, #8
    5ccc:	str	r0, [sp, #4]
    5cd0:	str	r1, [sp]
    5cd4:	ldr	r0, [sp, #4]
    5cd8:	ldr	r1, [sp]
    5cdc:	bl	0 <flatcc_builder_extend_offset_vector>
    5ce0:	mov	sp, fp
    5ce4:	pop	{fp, pc}

00005ce8 <MyGame_Example_Monster_testarrayoftables_push_start>:
    5ce8:	push	{fp, lr}
    5cec:	mov	fp, sp
    5cf0:	sub	sp, sp, #8
    5cf4:	str	r0, [sp, #4]
    5cf8:	ldr	r0, [sp, #4]
    5cfc:	bl	17f4 <MyGame_Example_Monster_start>
    5d00:	mov	sp, fp
    5d04:	pop	{fp, pc}

00005d08 <MyGame_Example_Monster_name_create_strn>:
    5d08:	push	{fp, lr}
    5d0c:	mov	fp, sp
    5d10:	sub	sp, sp, #24
    5d14:	str	r0, [fp, #-4]
    5d18:	str	r1, [fp, #-8]
    5d1c:	str	r2, [sp, #12]
    5d20:	ldr	r0, [fp, #-4]
    5d24:	ldr	r1, [fp, #-4]
    5d28:	ldr	r2, [fp, #-8]
    5d2c:	ldr	r3, [sp, #12]
    5d30:	str	r0, [sp, #8]
    5d34:	mov	r0, r1
    5d38:	mov	r1, r2
    5d3c:	mov	r2, r3
    5d40:	bl	0 <flatcc_builder_create_string_strn>
    5d44:	ldr	r1, [sp, #8]
    5d48:	str	r0, [sp, #4]
    5d4c:	mov	r0, r1
    5d50:	ldr	r1, [sp, #4]
    5d54:	bl	5c34 <MyGame_Example_Monster_name_add>
    5d58:	mov	sp, fp
    5d5c:	pop	{fp, pc}

00005d60 <MyGame_Example_Monster_testarrayoftables_push_end>:
    5d60:	push	{fp, lr}
    5d64:	mov	fp, sp
    5d68:	sub	sp, sp, #16
    5d6c:	str	r0, [fp, #-4]
    5d70:	ldr	r0, [fp, #-4]
    5d74:	ldr	r1, [fp, #-4]
    5d78:	str	r0, [sp, #8]
    5d7c:	mov	r0, r1
    5d80:	bl	1864 <MyGame_Example_Monster_end>
    5d84:	ldr	r1, [sp, #8]
    5d88:	str	r0, [sp, #4]
    5d8c:	mov	r0, r1
    5d90:	ldr	r1, [sp, #4]
    5d94:	bl	11e44 <MyGame_Example_Monster_testarrayoftables_push>
    5d98:	mov	sp, fp
    5d9c:	pop	{fp, pc}

00005da0 <MyGame_Example_Monster_testarrayoftables_truncate>:
    5da0:	push	{fp, lr}
    5da4:	mov	fp, sp
    5da8:	sub	sp, sp, #8
    5dac:	str	r0, [sp, #4]
    5db0:	str	r1, [sp]
    5db4:	ldr	r0, [sp, #4]
    5db8:	ldr	r1, [sp]
    5dbc:	bl	0 <flatcc_builder_truncate_offset_vector>
    5dc0:	mov	sp, fp
    5dc4:	pop	{fp, pc}

00005dc8 <MyGame_Example_Monster_testarrayoftables_reserved_len>:
    5dc8:	push	{fp, lr}
    5dcc:	mov	fp, sp
    5dd0:	sub	sp, sp, #8
    5dd4:	str	r0, [sp, #4]
    5dd8:	ldr	r0, [sp, #4]
    5ddc:	bl	0 <flatcc_builder_offset_vector_count>
    5de0:	mov	sp, fp
    5de4:	pop	{fp, pc}

00005de8 <MyGame_Example_Monster_testarrayoftables_edit>:
    5de8:	push	{fp, lr}
    5dec:	mov	fp, sp
    5df0:	sub	sp, sp, #8
    5df4:	str	r0, [sp, #4]
    5df8:	ldr	r0, [sp, #4]
    5dfc:	bl	0 <flatcc_builder_offset_vector_edit>
    5e00:	mov	sp, fp
    5e04:	pop	{fp, pc}

00005e08 <MyGame_Example_Monster_testarrayoftables_append>:
    5e08:	push	{fp, lr}
    5e0c:	mov	fp, sp
    5e10:	sub	sp, sp, #16
    5e14:	str	r0, [fp, #-4]
    5e18:	str	r1, [sp, #8]
    5e1c:	str	r2, [sp, #4]
    5e20:	ldr	r0, [fp, #-4]
    5e24:	ldr	r1, [sp, #8]
    5e28:	ldr	r2, [sp, #4]
    5e2c:	bl	0 <flatcc_builder_append_offset_vector>
    5e30:	mov	sp, fp
    5e34:	pop	{fp, pc}

00005e38 <MyGame_Example_Monster_testarrayoftables_end>:
    5e38:	push	{fp, lr}
    5e3c:	mov	fp, sp
    5e40:	sub	sp, sp, #16
    5e44:	str	r0, [fp, #-4]
    5e48:	ldr	r0, [fp, #-4]
    5e4c:	ldr	r1, [fp, #-4]
    5e50:	str	r0, [sp, #8]
    5e54:	mov	r0, r1
    5e58:	bl	0 <flatcc_builder_end_offset_vector>
    5e5c:	ldr	r1, [sp, #8]
    5e60:	str	r0, [sp, #4]
    5e64:	mov	r0, r1
    5e68:	ldr	r1, [sp, #4]
    5e6c:	bl	11e90 <MyGame_Example_Monster_testarrayoftables_add>
    5e70:	mov	sp, fp
    5e74:	pop	{fp, pc}

00005e78 <flatbuffers_string_create_str>:
    5e78:	push	{fp, lr}
    5e7c:	mov	fp, sp
    5e80:	sub	sp, sp, #8
    5e84:	str	r0, [sp, #4]
    5e88:	str	r1, [sp]
    5e8c:	ldr	r0, [sp, #4]
    5e90:	ldr	r1, [sp]
    5e94:	bl	0 <flatcc_builder_create_string_str>
    5e98:	mov	sp, fp
    5e9c:	pop	{fp, pc}

00005ea0 <MyGame_Example_Monster_testarrayofstring_create>:
    5ea0:	push	{fp, lr}
    5ea4:	mov	fp, sp
    5ea8:	sub	sp, sp, #24
    5eac:	str	r0, [fp, #-4]
    5eb0:	str	r1, [fp, #-8]
    5eb4:	str	r2, [sp, #12]
    5eb8:	ldr	r0, [fp, #-4]
    5ebc:	ldr	r1, [fp, #-4]
    5ec0:	ldr	r2, [fp, #-8]
    5ec4:	ldr	r3, [sp, #12]
    5ec8:	str	r0, [sp, #8]
    5ecc:	mov	r0, r1
    5ed0:	mov	r1, r2
    5ed4:	mov	r2, r3
    5ed8:	bl	0 <flatcc_builder_create_offset_vector>
    5edc:	ldr	r1, [sp, #8]
    5ee0:	str	r0, [sp, #4]
    5ee4:	mov	r0, r1
    5ee8:	ldr	r1, [sp, #4]
    5eec:	bl	11efc <MyGame_Example_Monster_testarrayofstring_add>
    5ef0:	mov	sp, fp
    5ef4:	pop	{fp, pc}

00005ef8 <MyGame_Example_Monster_testarrayofbools_start>:
    5ef8:	push	{fp, lr}
    5efc:	mov	fp, sp
    5f00:	sub	sp, sp, #8
    5f04:	str	r0, [sp, #4]
    5f08:	ldr	r0, [sp, #4]
    5f0c:	bl	11f68 <flatbuffers_bool_vec_start>
    5f10:	mov	sp, fp
    5f14:	pop	{fp, pc}

00005f18 <MyGame_Example_Monster_testarrayofbools_append>:
    5f18:	push	{fp, lr}
    5f1c:	mov	fp, sp
    5f20:	sub	sp, sp, #16
    5f24:	str	r0, [fp, #-4]
    5f28:	str	r1, [sp, #8]
    5f2c:	str	r2, [sp, #4]
    5f30:	ldr	r0, [fp, #-4]
    5f34:	ldr	r1, [sp, #8]
    5f38:	ldr	r2, [sp, #4]
    5f3c:	bl	0 <flatcc_builder_append_vector>
    5f40:	mov	sp, fp
    5f44:	pop	{fp, pc}

00005f48 <MyGame_Example_Monster_testarrayofbools_end>:
    5f48:	push	{fp, lr}
    5f4c:	mov	fp, sp
    5f50:	sub	sp, sp, #16
    5f54:	str	r0, [fp, #-4]
    5f58:	ldr	r0, [fp, #-4]
    5f5c:	ldr	r1, [fp, #-4]
    5f60:	str	r0, [sp, #8]
    5f64:	mov	r0, r1
    5f68:	bl	12004 <flatbuffers_bool_vec_end>
    5f6c:	ldr	r1, [sp, #8]
    5f70:	str	r0, [sp, #4]
    5f74:	mov	r0, r1
    5f78:	ldr	r1, [sp, #4]
    5f7c:	bl	11f98 <MyGame_Example_Monster_testarrayofbools_add>
    5f80:	mov	sp, fp
    5f84:	pop	{fp, pc}

00005f88 <MyGame_Example_Monster_test_add>:
    5f88:	push	{fp, lr}
    5f8c:	mov	fp, sp
    5f90:	sub	sp, sp, #24
    5f94:	str	r1, [sp, #12]
    5f98:	str	r2, [sp, #16]
    5f9c:	str	r0, [sp, #8]
    5fa0:	ldrb	r0, [sp, #12]
    5fa4:	cmp	r0, #0
    5fa8:	bne	5fb8 <MyGame_Example_Monster_test_add+0x30>
    5fac:	movw	r0, #0
    5fb0:	str	r0, [fp, #-4]
    5fb4:	b	6040 <MyGame_Example_Monster_test_add+0xb8>
    5fb8:	ldr	r0, [sp, #16]
    5fbc:	cmp	r0, #0
    5fc0:	bne	5fd0 <MyGame_Example_Monster_test_add+0x48>
    5fc4:	mvn	r0, #0
    5fc8:	str	r0, [fp, #-4]
    5fcc:	b	6040 <MyGame_Example_Monster_test_add+0xb8>
    5fd0:	ldr	r0, [sp, #8]
    5fd4:	movw	r1, #7
    5fd8:	movw	r2, #1
    5fdc:	movw	r3, #1
    5fe0:	uxth	r3, r3
    5fe4:	bl	0 <flatcc_builder_table_add>
    5fe8:	str	r0, [sp]
    5fec:	movw	r1, #0
    5ff0:	cmp	r0, r1
    5ff4:	beq	6014 <MyGame_Example_Monster_test_add+0x8c>
    5ff8:	ldr	r0, [sp, #8]
    5ffc:	movw	r1, #8
    6000:	bl	0 <flatcc_builder_table_add_offset>
    6004:	str	r0, [sp, #4]
    6008:	movw	r1, #0
    600c:	cmp	r0, r1
    6010:	bne	6020 <MyGame_Example_Monster_test_add+0x98>
    6014:	mvn	r0, #0
    6018:	str	r0, [fp, #-4]
    601c:	b	6040 <MyGame_Example_Monster_test_add+0xb8>
    6020:	ldrb	r0, [sp, #12]
    6024:	ldr	r1, [sp]
    6028:	strb	r0, [r1]
    602c:	ldr	r0, [sp, #16]
    6030:	ldr	r1, [sp, #4]
    6034:	str	r0, [r1]
    6038:	movw	r0, #0
    603c:	str	r0, [fp, #-4]
    6040:	ldr	r0, [fp, #-4]
    6044:	mov	sp, fp
    6048:	pop	{fp, pc}

0000604c <MyGame_Example_Any_as_Monster>:
    604c:	sub	sp, sp, #4
    6050:	str	r1, [sp]
    6054:	movw	r1, #1
    6058:	strb	r1, [r0]
    605c:	ldr	r1, [sp]
    6060:	str	r1, [r0, #4]
    6064:	add	sp, sp, #4
    6068:	bx	lr

0000606c <MyGame_Example_Monster_enemy_start>:
    606c:	push	{fp, lr}
    6070:	mov	fp, sp
    6074:	sub	sp, sp, #8
    6078:	str	r0, [sp, #4]
    607c:	ldr	r0, [sp, #4]
    6080:	bl	17f4 <MyGame_Example_Monster_start>
    6084:	mov	sp, fp
    6088:	pop	{fp, pc}

0000608c <MyGame_Example_Monster_vec_push_start>:
    608c:	push	{fp, lr}
    6090:	mov	fp, sp
    6094:	sub	sp, sp, #8
    6098:	str	r0, [sp, #4]
    609c:	ldr	r0, [sp, #4]
    60a0:	bl	17f4 <MyGame_Example_Monster_start>
    60a4:	mov	sp, fp
    60a8:	pop	{fp, pc}

000060ac <MyGame_Example_Monster_test_Monster_add>:
    60ac:	push	{fp, lr}
    60b0:	mov	fp, sp
    60b4:	sub	sp, sp, #24
    60b8:	str	r0, [fp, #-4]
    60bc:	str	r1, [fp, #-8]
    60c0:	ldr	r0, [fp, #-4]
    60c4:	ldr	r1, [fp, #-8]
    60c8:	add	r2, sp, #8
    60cc:	str	r0, [sp, #4]
    60d0:	mov	r0, r2
    60d4:	bl	604c <MyGame_Example_Any_as_Monster>
    60d8:	ldr	r1, [sp, #8]
    60dc:	ldr	r2, [sp, #12]
    60e0:	ldr	r0, [sp, #4]
    60e4:	bl	5f88 <MyGame_Example_Monster_test_add>
    60e8:	mov	sp, fp
    60ec:	pop	{fp, pc}

000060f0 <MyGame_Example_Monster_vec_push_end>:
    60f0:	push	{fp, lr}
    60f4:	mov	fp, sp
    60f8:	sub	sp, sp, #16
    60fc:	str	r0, [fp, #-4]
    6100:	ldr	r0, [fp, #-4]
    6104:	ldr	r1, [fp, #-4]
    6108:	str	r0, [sp, #8]
    610c:	mov	r0, r1
    6110:	bl	1864 <MyGame_Example_Monster_end>
    6114:	ldr	r1, [sp, #8]
    6118:	str	r0, [sp, #4]
    611c:	mov	r0, r1
    6120:	ldr	r1, [sp, #4]
    6124:	bl	12024 <MyGame_Example_Monster_vec_push>
    6128:	mov	sp, fp
    612c:	pop	{fp, pc}

00006130 <MyGame_Example_Monster_test_add_value>:
    6130:	push	{fp, lr}
    6134:	mov	fp, sp
    6138:	sub	sp, sp, #24
    613c:	str	r1, [sp, #12]
    6140:	str	r2, [sp, #16]
    6144:	str	r0, [sp, #8]
    6148:	ldrb	r0, [sp, #12]
    614c:	cmp	r0, #0
    6150:	bne	6160 <MyGame_Example_Monster_test_add_value+0x30>
    6154:	movw	r0, #0
    6158:	str	r0, [fp, #-4]
    615c:	b	61a8 <MyGame_Example_Monster_test_add_value+0x78>
    6160:	ldr	r0, [sp, #8]
    6164:	movw	r1, #8
    6168:	bl	0 <flatcc_builder_table_add_offset>
    616c:	str	r0, [sp, #4]
    6170:	movw	r1, #0
    6174:	cmp	r0, r1
    6178:	beq	6194 <MyGame_Example_Monster_test_add_value+0x64>
    617c:	ldr	r0, [sp, #16]
    6180:	ldr	r1, [sp, #4]
    6184:	str	r0, [r1]
    6188:	movw	r0, #0
    618c:	str	r0, [sp]
    6190:	b	61a0 <MyGame_Example_Monster_test_add_value+0x70>
    6194:	mvn	r0, #0
    6198:	str	r0, [sp]
    619c:	b	61a0 <MyGame_Example_Monster_test_add_value+0x70>
    61a0:	ldr	r0, [sp]
    61a4:	str	r0, [fp, #-4]
    61a8:	ldr	r0, [fp, #-4]
    61ac:	mov	sp, fp
    61b0:	pop	{fp, pc}

000061b4 <MyGame_Example_Monster_test_add_type>:
    61b4:	push	{fp, lr}
    61b8:	mov	fp, sp
    61bc:	sub	sp, sp, #24
    61c0:	str	r0, [fp, #-8]
    61c4:	strb	r1, [fp, #-9]
    61c8:	ldrb	r0, [fp, #-9]
    61cc:	cmp	r0, #0
    61d0:	bne	61e0 <MyGame_Example_Monster_test_add_type+0x2c>
    61d4:	movw	r0, #0
    61d8:	str	r0, [fp, #-4]
    61dc:	b	6234 <MyGame_Example_Monster_test_add_type+0x80>
    61e0:	ldr	r0, [fp, #-8]
    61e4:	movw	r1, #7
    61e8:	movw	r2, #1
    61ec:	movw	r3, #1
    61f0:	uxth	r3, r3
    61f4:	bl	0 <flatcc_builder_table_add>
    61f8:	str	r0, [sp, #8]
    61fc:	movw	r1, #0
    6200:	cmp	r0, r1
    6204:	beq	6220 <MyGame_Example_Monster_test_add_type+0x6c>
    6208:	ldrb	r0, [fp, #-9]
    620c:	ldr	r1, [sp, #8]
    6210:	strb	r0, [r1]
    6214:	movw	r0, #0
    6218:	str	r0, [sp, #4]
    621c:	b	622c <MyGame_Example_Monster_test_add_type+0x78>
    6220:	mvn	r0, #0
    6224:	str	r0, [sp, #4]
    6228:	b	622c <MyGame_Example_Monster_test_add_type+0x78>
    622c:	ldr	r0, [sp, #4]
    6230:	str	r0, [fp, #-4]
    6234:	ldr	r0, [fp, #-4]
    6238:	mov	sp, fp
    623c:	pop	{fp, pc}

00006240 <MyGame_Example_Monster_enemy_end>:
    6240:	push	{fp, lr}
    6244:	mov	fp, sp
    6248:	sub	sp, sp, #16
    624c:	str	r0, [fp, #-4]
    6250:	ldr	r0, [fp, #-4]
    6254:	ldr	r1, [fp, #-4]
    6258:	str	r0, [sp, #8]
    625c:	mov	r0, r1
    6260:	bl	1864 <MyGame_Example_Monster_end>
    6264:	ldr	r1, [sp, #8]
    6268:	str	r0, [sp, #4]
    626c:	mov	r0, r1
    6270:	ldr	r1, [sp, #4]
    6274:	bl	a6c4 <MyGame_Example_Monster_enemy_add>
    6278:	mov	sp, fp
    627c:	pop	{fp, pc}

00006280 <MyGame_Example_Monster_testbool_add>:
    6280:	push	{fp, lr}
    6284:	mov	fp, sp
    6288:	sub	sp, sp, #16
    628c:	str	r0, [sp, #8]
    6290:	strb	r1, [sp, #7]
    6294:	ldrb	r0, [sp, #7]
    6298:	cmp	r0, #1
    629c:	bne	62ac <MyGame_Example_Monster_testbool_add+0x2c>
    62a0:	movw	r0, #0
    62a4:	str	r0, [fp, #-4]
    62a8:	b	62f4 <MyGame_Example_Monster_testbool_add+0x74>
    62ac:	ldr	r0, [sp, #8]
    62b0:	movw	r1, #15
    62b4:	movw	r2, #1
    62b8:	movw	r3, #1
    62bc:	uxth	r3, r3
    62c0:	bl	0 <flatcc_builder_table_add>
    62c4:	str	r0, [sp]
    62c8:	movw	r1, #0
    62cc:	cmp	r0, r1
    62d0:	bne	62e0 <MyGame_Example_Monster_testbool_add+0x60>
    62d4:	mvn	r0, #0
    62d8:	str	r0, [fp, #-4]
    62dc:	b	62f4 <MyGame_Example_Monster_testbool_add+0x74>
    62e0:	ldr	r0, [sp]
    62e4:	ldrb	r1, [sp, #7]
    62e8:	bl	12070 <flatbuffers_bool_assign_to_pe>
    62ec:	movw	r1, #0
    62f0:	str	r1, [fp, #-4]
    62f4:	ldr	r0, [fp, #-4]
    62f8:	mov	sp, fp
    62fc:	pop	{fp, pc}

00006300 <MyGame_Example_Monster_testempty_start>:
    6300:	push	{fp, lr}
    6304:	mov	fp, sp
    6308:	sub	sp, sp, #8
    630c:	str	r0, [sp, #4]
    6310:	ldr	r0, [sp, #4]
    6314:	bl	120b4 <MyGame_Example_Stat_start>
    6318:	mov	sp, fp
    631c:	pop	{fp, pc}

00006320 <MyGame_Example_Monster_testempty_end>:
    6320:	push	{fp, lr}
    6324:	mov	fp, sp
    6328:	sub	sp, sp, #16
    632c:	str	r0, [fp, #-4]
    6330:	ldr	r0, [fp, #-4]
    6334:	ldr	r1, [fp, #-4]
    6338:	str	r0, [sp, #8]
    633c:	mov	r0, r1
    6340:	bl	12144 <MyGame_Example_Stat_end>
    6344:	ldr	r1, [sp, #8]
    6348:	str	r0, [sp, #4]
    634c:	mov	r0, r1
    6350:	ldr	r1, [sp, #4]
    6354:	bl	120d8 <MyGame_Example_Monster_testempty_add>
    6358:	mov	sp, fp
    635c:	pop	{fp, pc}

00006360 <MyGame_Example_Monster_end_as_root>:
    6360:	push	{fp, lr}
    6364:	mov	fp, sp
    6368:	sub	sp, sp, #16
    636c:	str	r0, [fp, #-4]
    6370:	ldr	r0, [fp, #-4]
    6374:	ldr	r1, [fp, #-4]
    6378:	str	r0, [sp, #8]
    637c:	mov	r0, r1
    6380:	bl	1864 <MyGame_Example_Monster_end>
    6384:	ldr	r1, [sp, #8]
    6388:	str	r0, [sp, #4]
    638c:	mov	r0, r1
    6390:	ldr	r1, [sp, #4]
    6394:	bl	18c4 <flatbuffers_buffer_end>
    6398:	mov	sp, fp
    639c:	pop	{fp, pc}

000063a0 <test_monster>:
    63a0:	push	{fp, lr}
    63a4:	mov	fp, sp
    63a8:	sub	sp, sp, #32
    63ac:	str	r0, [fp, #-8]
    63b0:	ldr	r0, [fp, #-8]
    63b4:	movw	r1, #0
    63b8:	bl	4fa4 <gen_monster>
    63bc:	ldr	r1, [fp, #-8]
    63c0:	str	r0, [sp, #8]
    63c4:	mov	r0, r1
    63c8:	add	r1, sp, #16
    63cc:	bl	0 <flatcc_builder_finalize_aligned_buffer>
    63d0:	str	r0, [fp, #-12]
    63d4:	ldr	r1, [fp, #-12]
    63d8:	ldr	r2, [sp, #16]
    63dc:	movw	r0, #0
    63e0:	movt	r0, #0
    63e4:	ldr	r3, [r0]
    63e8:	movw	r0, #0
    63ec:	movt	r0, #0
    63f0:	bl	adc <hexdump>
    63f4:	ldr	r0, [fp, #-12]
    63f8:	ldr	r1, [sp, #16]
    63fc:	bl	1924 <MyGame_Example_Monster_verify_as_root>
    6400:	str	r0, [sp, #12]
    6404:	cmp	r0, #0
    6408:	beq	6438 <test_monster+0x98>
    640c:	ldr	r0, [sp, #12]
    6410:	bl	0 <flatcc_verify_error_string>
    6414:	movw	r1, #0
    6418:	movt	r1, #0
    641c:	str	r0, [sp, #4]
    6420:	mov	r0, r1
    6424:	ldr	r1, [sp, #4]
    6428:	bl	0 <printf>
    642c:	mvn	r1, #0
    6430:	str	r1, [fp, #-4]
    6434:	b	6454 <test_monster+0xb4>
    6438:	ldr	r0, [fp, #-12]
    643c:	bl	27b4 <verify_monster>
    6440:	str	r0, [sp, #12]
    6444:	ldr	r0, [fp, #-12]
    6448:	bl	0 <flatcc_builder_aligned_free>
    644c:	ldr	r0, [sp, #12]
    6450:	str	r0, [fp, #-4]
    6454:	ldr	r0, [fp, #-4]
    6458:	mov	sp, fp
    645c:	pop	{fp, pc}

00006460 <test_monster_with_size>:
    6460:	push	{fp, lr}
    6464:	mov	fp, sp
    6468:	sub	sp, sp, #48	; 0x30
    646c:	str	r0, [fp, #-8]
    6470:	ldr	r0, [fp, #-8]
    6474:	movw	r1, #1
    6478:	bl	4fa4 <gen_monster>
    647c:	ldr	r1, [fp, #-8]
    6480:	str	r0, [sp, #12]
    6484:	mov	r0, r1
    6488:	sub	r1, fp, #20
    648c:	bl	0 <flatcc_builder_finalize_aligned_buffer>
    6490:	str	r0, [fp, #-16]
    6494:	ldr	r1, [fp, #-16]
    6498:	ldr	r2, [fp, #-20]	; 0xffffffec
    649c:	movw	r0, #0
    64a0:	movt	r0, #0
    64a4:	ldr	r3, [r0]
    64a8:	movw	r0, #0
    64ac:	movt	r0, #0
    64b0:	bl	adc <hexdump>
    64b4:	ldr	r0, [fp, #-16]
    64b8:	and	r0, r0, #15
    64bc:	cmp	r0, #0
    64c0:	beq	64f4 <test_monster_with_size+0x94>
    64c4:	movw	r0, #0
    64c8:	movt	r0, #0
    64cc:	bl	0 <printf>
    64d0:	ldr	r1, [fp, #-16]
    64d4:	movw	r2, #0
    64d8:	movt	r2, #0
    64dc:	str	r0, [sp, #8]
    64e0:	mov	r0, r2
    64e4:	bl	0 <printf>
    64e8:	mvn	r1, #0
    64ec:	str	r1, [fp, #-4]
    64f0:	b	65a0 <test_monster_with_size+0x140>
    64f4:	ldr	r0, [fp, #-16]
    64f8:	add	r1, sp, #24
    64fc:	bl	65ac <flatbuffers_read_size_prefix>
    6500:	str	r0, [fp, #-12]
    6504:	ldr	r0, [fp, #-20]	; 0xffffffec
    6508:	sub	r0, r0, #4
    650c:	str	r0, [sp, #20]
    6510:	ldr	r0, [sp, #24]
    6514:	ldr	r1, [sp, #20]
    6518:	cmp	r0, r1
    651c:	beq	6540 <test_monster_with_size+0xe0>
    6520:	ldr	r1, [sp, #24]
    6524:	ldr	r2, [sp, #20]
    6528:	movw	r0, #0
    652c:	movt	r0, #0
    6530:	bl	0 <printf>
    6534:	mvn	r1, #0
    6538:	str	r1, [fp, #-4]
    653c:	b	65a0 <test_monster_with_size+0x140>
    6540:	ldr	r0, [fp, #-12]
    6544:	ldr	r1, [sp, #24]
    6548:	bl	1924 <MyGame_Example_Monster_verify_as_root>
    654c:	str	r0, [sp, #16]
    6550:	cmp	r0, #0
    6554:	beq	6584 <test_monster_with_size+0x124>
    6558:	ldr	r0, [sp, #16]
    655c:	bl	0 <flatcc_verify_error_string>
    6560:	movw	r1, #0
    6564:	movt	r1, #0
    6568:	str	r0, [sp, #4]
    656c:	mov	r0, r1
    6570:	ldr	r1, [sp, #4]
    6574:	bl	0 <printf>
    6578:	mvn	r1, #0
    657c:	str	r1, [fp, #-4]
    6580:	b	65a0 <test_monster_with_size+0x140>
    6584:	ldr	r0, [fp, #-12]
    6588:	bl	27b4 <verify_monster>
    658c:	str	r0, [sp, #16]
    6590:	ldr	r0, [fp, #-16]
    6594:	bl	0 <flatcc_builder_aligned_free>
    6598:	ldr	r0, [sp, #16]
    659c:	str	r0, [fp, #-4]
    65a0:	ldr	r0, [fp, #-4]
    65a4:	mov	sp, fp
    65a8:	pop	{fp, pc}

000065ac <flatbuffers_read_size_prefix>:
    65ac:	push	{fp, lr}
    65b0:	mov	fp, sp
    65b4:	sub	sp, sp, #8
    65b8:	str	r0, [sp, #4]
    65bc:	str	r1, [sp]
    65c0:	ldr	r0, [sp]
    65c4:	movw	r1, #0
    65c8:	cmp	r0, r1
    65cc:	beq	65e0 <flatbuffers_read_size_prefix+0x34>
    65d0:	ldr	r0, [sp, #4]
    65d4:	bl	f490 <__flatbuffers_uoffset_read_from_pe>
    65d8:	ldr	r1, [sp]
    65dc:	str	r0, [r1]
    65e0:	ldr	r0, [sp, #4]
    65e4:	add	r0, r0, #4
    65e8:	mov	sp, fp
    65ec:	pop	{fp, pc}

000065f0 <test_string>:
    65f0:	push	{fp, lr}
    65f4:	mov	fp, sp
    65f8:	sub	sp, sp, #56	; 0x38
    65fc:	str	r0, [fp, #-8]
    6600:	ldr	r0, [fp, #-8]
    6604:	bl	0 <flatcc_builder_reset>
    6608:	ldr	r1, [fp, #-8]
    660c:	str	r0, [fp, #-24]	; 0xffffffe8
    6610:	mov	r0, r1
    6614:	bl	57c0 <MyGame_Example_Monster_start_as_root>
    6618:	ldr	r1, [fp, #-8]
    661c:	str	r0, [sp, #28]
    6620:	mov	r0, r1
    6624:	bl	6868 <MyGame_Example_Monster_name_start>
    6628:	ldr	r1, [fp, #-8]
    662c:	str	r0, [sp, #24]
    6630:	mov	r0, r1
    6634:	movw	r1, #3
    6638:	bl	6888 <MyGame_Example_Monster_name_extend>
    663c:	str	r0, [fp, #-20]	; 0xffffffec
    6640:	ldr	r0, [fp, #-20]	; 0xffffffec
    6644:	movw	r1, #49	; 0x31
    6648:	strb	r1, [r0]
    664c:	ldr	r0, [fp, #-20]	; 0xffffffec
    6650:	movw	r1, #50	; 0x32
    6654:	strb	r1, [r0, #1]
    6658:	ldr	r0, [fp, #-20]	; 0xffffffec
    665c:	movw	r1, #51	; 0x33
    6660:	strb	r1, [r0, #2]
    6664:	ldr	r0, [fp, #-8]
    6668:	movw	r1, #0
    666c:	movt	r1, #0
    6670:	bl	68b0 <MyGame_Example_Monster_name_append_str>
    6674:	ldr	r1, [fp, #-8]
    6678:	str	r0, [sp, #20]
    667c:	mov	r0, r1
    6680:	bl	68d8 <MyGame_Example_Monster_name_reserved_len>
    6684:	cmp	r0, #4
    6688:	bne	6690 <test_string+0xa0>
    668c:	b	66b0 <test_string+0xc0>
    6690:	movw	r0, #0
    6694:	movt	r0, #0
    6698:	movw	r1, #0
    669c:	movt	r1, #0
    66a0:	movw	r2, #1080	; 0x438
    66a4:	movw	r3, #0
    66a8:	movt	r3, #0
    66ac:	bl	0 <__assert_fail>
    66b0:	ldr	r0, [fp, #-8]
    66b4:	movw	r1, #0
    66b8:	movt	r1, #0
    66bc:	movw	r2, #30
    66c0:	bl	68f8 <MyGame_Example_Monster_name_append_strn>
    66c4:	ldr	r1, [fp, #-8]
    66c8:	str	r0, [sp, #16]
    66cc:	mov	r0, r1
    66d0:	bl	68d8 <MyGame_Example_Monster_name_reserved_len>
    66d4:	cmp	r0, #8
    66d8:	bne	66e0 <test_string+0xf0>
    66dc:	b	6700 <test_string+0x110>
    66e0:	movw	r0, #0
    66e4:	movt	r0, #0
    66e8:	movw	r1, #0
    66ec:	movt	r1, #0
    66f0:	movw	r2, #1082	; 0x43a
    66f4:	movw	r3, #0
    66f8:	movt	r3, #0
    66fc:	bl	0 <__assert_fail>
    6700:	ldr	r0, [fp, #-8]
    6704:	movw	r1, #0
    6708:	movt	r1, #0
    670c:	movw	r2, #2
    6710:	bl	6928 <MyGame_Example_Monster_name_append>
    6714:	ldr	r1, [fp, #-8]
    6718:	str	r0, [sp, #12]
    671c:	mov	r0, r1
    6720:	bl	68d8 <MyGame_Example_Monster_name_reserved_len>
    6724:	cmp	r0, #10
    6728:	bne	6730 <test_string+0x140>
    672c:	b	6750 <test_string+0x160>
    6730:	movw	r0, #0
    6734:	movt	r0, #0
    6738:	movw	r1, #0
    673c:	movt	r1, #0
    6740:	movw	r2, #1084	; 0x43c
    6744:	movw	r3, #0
    6748:	movt	r3, #0
    674c:	bl	0 <__assert_fail>
    6750:	ldr	r0, [fp, #-8]
    6754:	movw	r1, #3
    6758:	bl	6958 <MyGame_Example_Monster_name_truncate>
    675c:	ldr	r1, [fp, #-8]
    6760:	str	r0, [sp, #8]
    6764:	mov	r0, r1
    6768:	bl	68d8 <MyGame_Example_Monster_name_reserved_len>
    676c:	cmp	r0, #7
    6770:	bne	6778 <test_string+0x188>
    6774:	b	6798 <test_string+0x1a8>
    6778:	movw	r0, #0
    677c:	movt	r0, #0
    6780:	movw	r1, #0
    6784:	movt	r1, #0
    6788:	movw	r2, #1086	; 0x43e
    678c:	movw	r3, #0
    6790:	movt	r3, #0
    6794:	bl	0 <__assert_fail>
    6798:	ldr	r0, [fp, #-8]
    679c:	bl	6980 <MyGame_Example_Monster_name_edit>
    67a0:	str	r0, [fp, #-20]	; 0xffffffec
    67a4:	ldr	r0, [fp, #-20]	; 0xffffffec
    67a8:	movw	r1, #46	; 0x2e
    67ac:	strb	r1, [r0, #4]
    67b0:	ldr	r0, [fp, #-8]
    67b4:	bl	69a0 <MyGame_Example_Monster_name_end>
    67b8:	ldr	r1, [fp, #-8]
    67bc:	str	r0, [sp, #4]
    67c0:	mov	r0, r1
    67c4:	bl	6360 <MyGame_Example_Monster_end_as_root>
    67c8:	ldr	r1, [fp, #-8]
    67cc:	str	r0, [sp]
    67d0:	mov	r0, r1
    67d4:	movw	r1, #0
    67d8:	bl	0 <flatcc_builder_get_direct_buffer>
    67dc:	str	r0, [fp, #-16]
    67e0:	ldr	r0, [fp, #-16]
    67e4:	movw	r1, #0
    67e8:	cmp	r0, r1
    67ec:	beq	67f4 <test_string+0x204>
    67f0:	b	6814 <test_string+0x224>
    67f4:	movw	r0, #0
    67f8:	movt	r0, #0
    67fc:	movw	r1, #0
    6800:	movt	r1, #0
    6804:	movw	r2, #1093	; 0x445
    6808:	movw	r3, #0
    680c:	movt	r3, #0
    6810:	bl	0 <__assert_fail>
    6814:	ldr	r0, [fp, #-16]
    6818:	bl	25c <MyGame_Example_Monster_as_root>
    681c:	str	r0, [fp, #-12]
    6820:	ldr	r0, [fp, #-12]
    6824:	bl	3850 <MyGame_Example_Monster_name>
    6828:	movw	r1, #0
    682c:	movt	r1, #0
    6830:	bl	0 <strcmp>
    6834:	cmp	r0, #0
    6838:	beq	6854 <test_string+0x264>
    683c:	movw	r0, #0
    6840:	movt	r0, #0
    6844:	bl	0 <printf>
    6848:	mvn	r1, #0
    684c:	str	r1, [fp, #-4]
    6850:	b	685c <test_string+0x26c>
    6854:	movw	r0, #0
    6858:	str	r0, [fp, #-4]
    685c:	ldr	r0, [fp, #-4]
    6860:	mov	sp, fp
    6864:	pop	{fp, pc}

00006868 <MyGame_Example_Monster_name_start>:
    6868:	push	{fp, lr}
    686c:	mov	fp, sp
    6870:	sub	sp, sp, #8
    6874:	str	r0, [sp, #4]
    6878:	ldr	r0, [sp, #4]
    687c:	bl	0 <flatcc_builder_start_string>
    6880:	mov	sp, fp
    6884:	pop	{fp, pc}

00006888 <MyGame_Example_Monster_name_extend>:
    6888:	push	{fp, lr}
    688c:	mov	fp, sp
    6890:	sub	sp, sp, #8
    6894:	str	r0, [sp, #4]
    6898:	str	r1, [sp]
    689c:	ldr	r0, [sp, #4]
    68a0:	ldr	r1, [sp]
    68a4:	bl	0 <flatcc_builder_extend_string>
    68a8:	mov	sp, fp
    68ac:	pop	{fp, pc}

000068b0 <MyGame_Example_Monster_name_append_str>:
    68b0:	push	{fp, lr}
    68b4:	mov	fp, sp
    68b8:	sub	sp, sp, #8
    68bc:	str	r0, [sp, #4]
    68c0:	str	r1, [sp]
    68c4:	ldr	r0, [sp, #4]
    68c8:	ldr	r1, [sp]
    68cc:	bl	0 <flatcc_builder_append_string_str>
    68d0:	mov	sp, fp
    68d4:	pop	{fp, pc}

000068d8 <MyGame_Example_Monster_name_reserved_len>:
    68d8:	push	{fp, lr}
    68dc:	mov	fp, sp
    68e0:	sub	sp, sp, #8
    68e4:	str	r0, [sp, #4]
    68e8:	ldr	r0, [sp, #4]
    68ec:	bl	0 <flatcc_builder_string_len>
    68f0:	mov	sp, fp
    68f4:	pop	{fp, pc}

000068f8 <MyGame_Example_Monster_name_append_strn>:
    68f8:	push	{fp, lr}
    68fc:	mov	fp, sp
    6900:	sub	sp, sp, #16
    6904:	str	r0, [fp, #-4]
    6908:	str	r1, [sp, #8]
    690c:	str	r2, [sp, #4]
    6910:	ldr	r0, [fp, #-4]
    6914:	ldr	r1, [sp, #8]
    6918:	ldr	r2, [sp, #4]
    691c:	bl	0 <flatcc_builder_append_string_strn>
    6920:	mov	sp, fp
    6924:	pop	{fp, pc}

00006928 <MyGame_Example_Monster_name_append>:
    6928:	push	{fp, lr}
    692c:	mov	fp, sp
    6930:	sub	sp, sp, #16
    6934:	str	r0, [fp, #-4]
    6938:	str	r1, [sp, #8]
    693c:	str	r2, [sp, #4]
    6940:	ldr	r0, [fp, #-4]
    6944:	ldr	r1, [sp, #8]
    6948:	ldr	r2, [sp, #4]
    694c:	bl	0 <flatcc_builder_append_string>
    6950:	mov	sp, fp
    6954:	pop	{fp, pc}

00006958 <MyGame_Example_Monster_name_truncate>:
    6958:	push	{fp, lr}
    695c:	mov	fp, sp
    6960:	sub	sp, sp, #8
    6964:	str	r0, [sp, #4]
    6968:	str	r1, [sp]
    696c:	ldr	r0, [sp, #4]
    6970:	ldr	r1, [sp]
    6974:	bl	0 <flatcc_builder_truncate_string>
    6978:	mov	sp, fp
    697c:	pop	{fp, pc}

00006980 <MyGame_Example_Monster_name_edit>:
    6980:	push	{fp, lr}
    6984:	mov	fp, sp
    6988:	sub	sp, sp, #8
    698c:	str	r0, [sp, #4]
    6990:	ldr	r0, [sp, #4]
    6994:	bl	0 <flatcc_builder_string_edit>
    6998:	mov	sp, fp
    699c:	pop	{fp, pc}

000069a0 <MyGame_Example_Monster_name_end>:
    69a0:	push	{fp, lr}
    69a4:	mov	fp, sp
    69a8:	sub	sp, sp, #16
    69ac:	str	r0, [fp, #-4]
    69b0:	ldr	r0, [fp, #-4]
    69b4:	ldr	r1, [fp, #-4]
    69b8:	str	r0, [sp, #8]
    69bc:	mov	r0, r1
    69c0:	bl	0 <flatcc_builder_end_string>
    69c4:	ldr	r1, [sp, #8]
    69c8:	str	r0, [sp, #4]
    69cc:	mov	r0, r1
    69d0:	ldr	r1, [sp, #4]
    69d4:	bl	5c34 <MyGame_Example_Monster_name_add>
    69d8:	mov	sp, fp
    69dc:	pop	{fp, pc}

000069e0 <test_sort_find>:
    69e0:	push	{fp, lr}
    69e4:	mov	fp, sp
    69e8:	sub	sp, sp, #136	; 0x88
    69ec:	str	r0, [fp, #-4]
    69f0:	mvn	r0, #0
    69f4:	str	r0, [fp, #-32]	; 0xffffffe0
    69f8:	ldr	r0, [fp, #-4]
    69fc:	bl	0 <flatcc_builder_reset>
    6a00:	ldr	r1, [fp, #-4]
    6a04:	str	r0, [fp, #-36]	; 0xffffffdc
    6a08:	mov	r0, r1
    6a0c:	bl	57c0 <MyGame_Example_Monster_start_as_root>
    6a10:	ldr	r1, [fp, #-4]
    6a14:	str	r0, [fp, #-40]	; 0xffffffd8
    6a18:	mov	r0, r1
    6a1c:	movw	r1, #0
    6a20:	movt	r1, #0
    6a24:	bl	1818 <MyGame_Example_Monster_name_create_str>
    6a28:	ldr	r1, [fp, #-4]
    6a2c:	str	r0, [fp, #-44]	; 0xffffffd4
    6a30:	mov	r0, r1
    6a34:	bl	5ca0 <MyGame_Example_Monster_testarrayoftables_start>
    6a38:	ldr	r1, [fp, #-4]
    6a3c:	str	r0, [fp, #-48]	; 0xffffffd0
    6a40:	mov	r0, r1
    6a44:	bl	5ce8 <MyGame_Example_Monster_testarrayoftables_push_start>
    6a48:	ldr	r1, [fp, #-4]
    6a4c:	str	r0, [fp, #-52]	; 0xffffffcc
    6a50:	mov	r0, r1
    6a54:	movw	r1, #0
    6a58:	movt	r1, #0
    6a5c:	bl	1818 <MyGame_Example_Monster_name_create_str>
    6a60:	ldr	r1, [fp, #-4]
    6a64:	str	r0, [fp, #-56]	; 0xffffffc8
    6a68:	mov	r0, r1
    6a6c:	bl	5d60 <MyGame_Example_Monster_testarrayoftables_push_end>
    6a70:	ldr	r1, [fp, #-4]
    6a74:	str	r0, [fp, #-60]	; 0xffffffc4
    6a78:	mov	r0, r1
    6a7c:	bl	5ce8 <MyGame_Example_Monster_testarrayoftables_push_start>
    6a80:	ldr	r1, [fp, #-4]
    6a84:	str	r0, [fp, #-64]	; 0xffffffc0
    6a88:	mov	r0, r1
    6a8c:	movw	r1, #0
    6a90:	movt	r1, #0
    6a94:	bl	1818 <MyGame_Example_Monster_name_create_str>
    6a98:	ldr	r1, [fp, #-4]
    6a9c:	str	r0, [sp, #68]	; 0x44
    6aa0:	mov	r0, r1
    6aa4:	bl	5d60 <MyGame_Example_Monster_testarrayoftables_push_end>
    6aa8:	ldr	r1, [fp, #-4]
    6aac:	str	r0, [sp, #64]	; 0x40
    6ab0:	mov	r0, r1
    6ab4:	bl	5ce8 <MyGame_Example_Monster_testarrayoftables_push_start>
    6ab8:	ldr	r1, [fp, #-4]
    6abc:	str	r0, [sp, #60]	; 0x3c
    6ac0:	mov	r0, r1
    6ac4:	movw	r1, #0
    6ac8:	movt	r1, #0
    6acc:	bl	1818 <MyGame_Example_Monster_name_create_str>
    6ad0:	ldr	r1, [fp, #-4]
    6ad4:	str	r0, [sp, #56]	; 0x38
    6ad8:	mov	r0, r1
    6adc:	bl	5d60 <MyGame_Example_Monster_testarrayoftables_push_end>
    6ae0:	ldr	r1, [fp, #-4]
    6ae4:	str	r0, [sp, #52]	; 0x34
    6ae8:	mov	r0, r1
    6aec:	bl	5ce8 <MyGame_Example_Monster_testarrayoftables_push_start>
    6af0:	ldr	r1, [fp, #-4]
    6af4:	str	r0, [sp, #48]	; 0x30
    6af8:	mov	r0, r1
    6afc:	movw	r1, #0
    6b00:	movt	r1, #0
    6b04:	bl	1818 <MyGame_Example_Monster_name_create_str>
    6b08:	ldr	r1, [fp, #-4]
    6b0c:	str	r0, [sp, #44]	; 0x2c
    6b10:	mov	r0, r1
    6b14:	bl	5d60 <MyGame_Example_Monster_testarrayoftables_push_end>
    6b18:	ldr	r1, [fp, #-4]
    6b1c:	str	r0, [sp, #40]	; 0x28
    6b20:	mov	r0, r1
    6b24:	bl	5ce8 <MyGame_Example_Monster_testarrayoftables_push_start>
    6b28:	ldr	r1, [fp, #-4]
    6b2c:	str	r0, [sp, #36]	; 0x24
    6b30:	mov	r0, r1
    6b34:	movw	r1, #0
    6b38:	movt	r1, #0
    6b3c:	bl	1818 <MyGame_Example_Monster_name_create_str>
    6b40:	ldr	r1, [fp, #-4]
    6b44:	str	r0, [sp, #32]
    6b48:	mov	r0, r1
    6b4c:	bl	5d60 <MyGame_Example_Monster_testarrayoftables_push_end>
    6b50:	ldr	r1, [fp, #-4]
    6b54:	str	r0, [sp, #28]
    6b58:	mov	r0, r1
    6b5c:	bl	5e38 <MyGame_Example_Monster_testarrayoftables_end>
    6b60:	ldr	r1, [fp, #-4]
    6b64:	str	r0, [sp, #24]
    6b68:	mov	r0, r1
    6b6c:	bl	6360 <MyGame_Example_Monster_end_as_root>
    6b70:	ldr	r1, [fp, #-4]
    6b74:	str	r0, [sp, #20]
    6b78:	mov	r0, r1
    6b7c:	sub	r1, fp, #28
    6b80:	bl	0 <flatcc_builder_finalize_aligned_buffer>
    6b84:	str	r0, [fp, #-24]	; 0xffffffe8
    6b88:	ldr	r1, [fp, #-24]	; 0xffffffe8
    6b8c:	ldr	r2, [fp, #-28]	; 0xffffffe4
    6b90:	movw	r0, #0
    6b94:	movt	r0, #0
    6b98:	ldr	r3, [r0]
    6b9c:	movw	r0, #0
    6ba0:	movt	r0, #0
    6ba4:	bl	adc <hexdump>
    6ba8:	ldr	r0, [fp, #-24]	; 0xffffffe8
    6bac:	bl	25c <MyGame_Example_Monster_as_root>
    6bb0:	str	r0, [fp, #-12]
    6bb4:	ldr	r0, [fp, #-12]
    6bb8:	bl	419c <MyGame_Example_Monster_testarrayoftables>
    6bbc:	str	r0, [fp, #-16]
    6bc0:	ldr	r0, [fp, #-16]
    6bc4:	movw	r1, #0
    6bc8:	cmp	r0, r1
    6bcc:	beq	6bd4 <test_sort_find+0x1f4>
    6bd0:	b	6bf4 <test_sort_find+0x214>
    6bd4:	movw	r0, #0
    6bd8:	movt	r0, #0
    6bdc:	movw	r1, #0
    6be0:	movt	r1, #0
    6be4:	movw	r2, #1147	; 0x47b
    6be8:	movw	r3, #0
    6bec:	movt	r3, #0
    6bf0:	bl	0 <__assert_fail>
    6bf4:	ldr	r0, [fp, #-16]
    6bf8:	str	r0, [fp, #-20]	; 0xffffffec
    6bfc:	ldr	r0, [fp, #-20]	; 0xffffffec
    6c00:	bl	6f5c <MyGame_Example_Monster_vec_sort_by_name>
    6c04:	ldr	r1, [fp, #-24]	; 0xffffffe8
    6c08:	ldr	r2, [fp, #-28]	; 0xffffffe4
    6c0c:	movw	r0, #0
    6c10:	movt	r0, #0
    6c14:	ldr	r3, [r0]
    6c18:	movw	r0, #0
    6c1c:	movt	r0, #0
    6c20:	bl	adc <hexdump>
    6c24:	ldr	r0, [fp, #-16]
    6c28:	bl	4298 <MyGame_Example_Monster_vec_len>
    6c2c:	cmp	r0, #5
    6c30:	beq	6c44 <test_sort_find+0x264>
    6c34:	movw	r0, #0
    6c38:	movt	r0, #0
    6c3c:	bl	0 <printf>
    6c40:	b	6f48 <test_sort_find+0x568>
    6c44:	ldr	r0, [fp, #-16]
    6c48:	movw	r1, #0
    6c4c:	bl	42e8 <MyGame_Example_Monster_vec_at>
    6c50:	bl	3850 <MyGame_Example_Monster_name>
    6c54:	movw	r1, #0
    6c58:	movt	r1, #0
    6c5c:	bl	0 <strcmp>
    6c60:	cmp	r0, #0
    6c64:	beq	6c78 <test_sort_find+0x298>
    6c68:	movw	r0, #0
    6c6c:	movt	r0, #0
    6c70:	bl	0 <printf>
    6c74:	b	6f48 <test_sort_find+0x568>
    6c78:	ldr	r0, [fp, #-16]
    6c7c:	movw	r1, #1
    6c80:	bl	42e8 <MyGame_Example_Monster_vec_at>
    6c84:	bl	3850 <MyGame_Example_Monster_name>
    6c88:	movw	r1, #0
    6c8c:	movt	r1, #0
    6c90:	bl	0 <strcmp>
    6c94:	cmp	r0, #0
    6c98:	beq	6cac <test_sort_find+0x2cc>
    6c9c:	movw	r0, #0
    6ca0:	movt	r0, #0
    6ca4:	bl	0 <printf>
    6ca8:	b	6f48 <test_sort_find+0x568>
    6cac:	ldr	r0, [fp, #-16]
    6cb0:	movw	r1, #2
    6cb4:	bl	42e8 <MyGame_Example_Monster_vec_at>
    6cb8:	bl	3850 <MyGame_Example_Monster_name>
    6cbc:	movw	r1, #0
    6cc0:	movt	r1, #0
    6cc4:	bl	0 <strcmp>
    6cc8:	cmp	r0, #0
    6ccc:	beq	6ce0 <test_sort_find+0x300>
    6cd0:	movw	r0, #0
    6cd4:	movt	r0, #0
    6cd8:	bl	0 <printf>
    6cdc:	b	6f48 <test_sort_find+0x568>
    6ce0:	ldr	r0, [fp, #-16]
    6ce4:	movw	r1, #3
    6ce8:	bl	42e8 <MyGame_Example_Monster_vec_at>
    6cec:	bl	3850 <MyGame_Example_Monster_name>
    6cf0:	movw	r1, #0
    6cf4:	movt	r1, #0
    6cf8:	bl	0 <strcmp>
    6cfc:	cmp	r0, #0
    6d00:	beq	6d14 <test_sort_find+0x334>
    6d04:	movw	r0, #0
    6d08:	movt	r0, #0
    6d0c:	bl	0 <printf>
    6d10:	b	6f48 <test_sort_find+0x568>
    6d14:	ldr	r0, [fp, #-16]
    6d18:	movw	r1, #4
    6d1c:	bl	42e8 <MyGame_Example_Monster_vec_at>
    6d20:	bl	3850 <MyGame_Example_Monster_name>
    6d24:	movw	r1, #0
    6d28:	movt	r1, #0
    6d2c:	bl	0 <strcmp>
    6d30:	cmp	r0, #0
    6d34:	beq	6d48 <test_sort_find+0x368>
    6d38:	movw	r0, #0
    6d3c:	movt	r0, #0
    6d40:	bl	0 <printf>
    6d44:	b	6f48 <test_sort_find+0x568>
    6d48:	ldr	r0, [fp, #-16]
    6d4c:	movw	r1, #1
    6d50:	bl	42e8 <MyGame_Example_Monster_vec_at>
    6d54:	ldr	r1, [fp, #-16]
    6d58:	str	r0, [sp, #16]
    6d5c:	mov	r0, r1
    6d60:	movw	r1, #2
    6d64:	bl	42e8 <MyGame_Example_Monster_vec_at>
    6d68:	ldr	r1, [sp, #16]
    6d6c:	cmp	r1, r0
    6d70:	bne	6d84 <test_sort_find+0x3a4>
    6d74:	movw	r0, #0
    6d78:	movt	r0, #0
    6d7c:	bl	0 <printf>
    6d80:	b	6f48 <test_sort_find+0x568>
    6d84:	ldr	r0, [fp, #-16]
    6d88:	movw	r1, #0
    6d8c:	movt	r1, #0
    6d90:	bl	6f7c <MyGame_Example_Monster_vec_find>
    6d94:	movw	r1, #3
    6d98:	cmp	r1, r0
    6d9c:	beq	6db0 <test_sort_find+0x3d0>
    6da0:	movw	r0, #0
    6da4:	movt	r0, #0
    6da8:	bl	0 <printf>
    6dac:	b	6f48 <test_sort_find+0x568>
    6db0:	ldr	r0, [fp, #-16]
    6db4:	movw	r1, #0
    6db8:	movt	r1, #0
    6dbc:	movw	r2, #5
    6dc0:	bl	6fa4 <MyGame_Example_Monster_vec_find_n>
    6dc4:	movw	r1, #3
    6dc8:	cmp	r1, r0
    6dcc:	beq	6de0 <test_sort_find+0x400>
    6dd0:	movw	r0, #0
    6dd4:	movt	r0, #0
    6dd8:	bl	0 <printf>
    6ddc:	b	6f48 <test_sort_find+0x568>
    6de0:	ldr	r0, [fp, #-16]
    6de4:	movw	r1, #0
    6de8:	movt	r1, #0
    6dec:	bl	6fd4 <MyGame_Example_Monster_vec_find_by_name>
    6df0:	movw	r1, #3
    6df4:	cmp	r1, r0
    6df8:	beq	6e0c <test_sort_find+0x42c>
    6dfc:	movw	r0, #0
    6e00:	movt	r0, #0
    6e04:	bl	0 <printf>
    6e08:	b	6f48 <test_sort_find+0x568>
    6e0c:	ldr	r0, [fp, #-16]
    6e10:	movw	r1, #0
    6e14:	movt	r1, #0
    6e18:	movw	r2, #5
    6e1c:	bl	7104 <MyGame_Example_Monster_vec_find_n_by_name>
    6e20:	movw	r1, #3
    6e24:	cmp	r1, r0
    6e28:	beq	6e3c <test_sort_find+0x45c>
    6e2c:	movw	r0, #0
    6e30:	movt	r0, #0
    6e34:	bl	0 <printf>
    6e38:	b	6f48 <test_sort_find+0x568>
    6e3c:	movw	r0, #0
    6e40:	movt	r0, #0
    6e44:	ldr	r0, [r0]
    6e48:	ldr	r1, [fp, #-16]
    6e4c:	str	r0, [sp, #12]
    6e50:	mov	r0, r1
    6e54:	movw	r1, #0
    6e58:	movt	r1, #0
    6e5c:	bl	6fd4 <MyGame_Example_Monster_vec_find_by_name>
    6e60:	ldr	r1, [sp, #12]
    6e64:	cmp	r1, r0
    6e68:	beq	6e7c <test_sort_find+0x49c>
    6e6c:	movw	r0, #0
    6e70:	movt	r0, #0
    6e74:	bl	0 <printf>
    6e78:	b	6f48 <test_sort_find+0x568>
    6e7c:	ldr	r0, [fp, #-16]
    6e80:	movw	r1, #0
    6e84:	movt	r1, #0
    6e88:	bl	6fd4 <MyGame_Example_Monster_vec_find_by_name>
    6e8c:	movw	r1, #0
    6e90:	cmp	r1, r0
    6e94:	beq	6ea8 <test_sort_find+0x4c8>
    6e98:	movw	r0, #0
    6e9c:	movt	r0, #0
    6ea0:	bl	0 <printf>
    6ea4:	b	6f48 <test_sort_find+0x568>
    6ea8:	ldr	r0, [fp, #-16]
    6eac:	movw	r1, #0
    6eb0:	movt	r1, #0
    6eb4:	bl	6fd4 <MyGame_Example_Monster_vec_find_by_name>
    6eb8:	str	r0, [fp, #-8]
    6ebc:	movw	r1, #1
    6ec0:	cmp	r1, r0
    6ec4:	beq	6ef0 <test_sort_find+0x510>
    6ec8:	movw	r0, #0
    6ecc:	movt	r0, #0
    6ed0:	bl	0 <printf>
    6ed4:	ldr	r1, [fp, #-8]
    6ed8:	movw	r2, #0
    6edc:	movt	r2, #0
    6ee0:	str	r0, [sp, #8]
    6ee4:	mov	r0, r2
    6ee8:	bl	0 <printf>
    6eec:	b	6f48 <test_sort_find+0x568>
    6ef0:	ldr	r0, [fp, #-16]
    6ef4:	movw	r1, #0
    6ef8:	movt	r1, #0
    6efc:	bl	6fd4 <MyGame_Example_Monster_vec_find_by_name>
    6f00:	str	r0, [fp, #-8]
    6f04:	movw	r1, #4
    6f08:	cmp	r1, r0
    6f0c:	beq	6f38 <test_sort_find+0x558>
    6f10:	movw	r0, #0
    6f14:	movt	r0, #0
    6f18:	bl	0 <printf>
    6f1c:	ldr	r1, [fp, #-8]
    6f20:	movw	r2, #0
    6f24:	movt	r2, #0
    6f28:	str	r0, [sp, #4]
    6f2c:	mov	r0, r2
    6f30:	bl	0 <printf>
    6f34:	b	6f48 <test_sort_find+0x568>
    6f38:	ldr	r0, [fp, #-20]	; 0xffffffec
    6f3c:	bl	6f5c <MyGame_Example_Monster_vec_sort_by_name>
    6f40:	movw	r0, #0
    6f44:	str	r0, [fp, #-32]	; 0xffffffe0
    6f48:	ldr	r0, [fp, #-24]	; 0xffffffe8
    6f4c:	bl	0 <flatcc_builder_aligned_free>
    6f50:	ldr	r0, [fp, #-32]	; 0xffffffe0
    6f54:	mov	sp, fp
    6f58:	pop	{fp, pc}

00006f5c <MyGame_Example_Monster_vec_sort_by_name>:
    6f5c:	push	{fp, lr}
    6f60:	mov	fp, sp
    6f64:	sub	sp, sp, #8
    6f68:	str	r0, [sp, #4]
    6f6c:	ldr	r0, [sp, #4]
    6f70:	bl	121a4 <__MyGame_Example_Monster_sort_by_name__heap_sort>
    6f74:	mov	sp, fp
    6f78:	pop	{fp, pc}

00006f7c <MyGame_Example_Monster_vec_find>:
    6f7c:	push	{fp, lr}
    6f80:	mov	fp, sp
    6f84:	sub	sp, sp, #8
    6f88:	str	r0, [sp, #4]
    6f8c:	str	r1, [sp]
    6f90:	ldr	r0, [sp, #4]
    6f94:	ldr	r1, [sp]
    6f98:	bl	6fd4 <MyGame_Example_Monster_vec_find_by_name>
    6f9c:	mov	sp, fp
    6fa0:	pop	{fp, pc}

00006fa4 <MyGame_Example_Monster_vec_find_n>:
    6fa4:	push	{fp, lr}
    6fa8:	mov	fp, sp
    6fac:	sub	sp, sp, #16
    6fb0:	str	r0, [fp, #-4]
    6fb4:	str	r1, [sp, #8]
    6fb8:	str	r2, [sp, #4]
    6fbc:	ldr	r0, [fp, #-4]
    6fc0:	ldr	r1, [sp, #8]
    6fc4:	ldr	r2, [sp, #4]
    6fc8:	bl	7104 <MyGame_Example_Monster_vec_find_n_by_name>
    6fcc:	mov	sp, fp
    6fd0:	pop	{fp, pc}

00006fd4 <MyGame_Example_Monster_vec_find_by_name>:
    6fd4:	push	{fp, lr}
    6fd8:	mov	fp, sp
    6fdc:	sub	sp, sp, #32
    6fe0:	str	r0, [fp, #-8]
    6fe4:	str	r1, [fp, #-12]
    6fe8:	movw	r0, #0
    6fec:	str	r0, [sp, #12]
    6ff0:	ldr	r0, [fp, #-8]
    6ff4:	bl	4298 <MyGame_Example_Monster_vec_len>
    6ff8:	str	r0, [sp, #8]
    6ffc:	cmp	r0, #0
    7000:	bne	7018 <MyGame_Example_Monster_vec_find_by_name+0x44>
    7004:	movw	r0, #0
    7008:	movt	r0, #0
    700c:	ldr	r0, [r0]
    7010:	str	r0, [fp, #-4]
    7014:	b	70f8 <MyGame_Example_Monster_vec_find_by_name+0x124>
    7018:	ldr	r0, [sp, #8]
    701c:	mvn	r1, #0
    7020:	add	r0, r0, r1
    7024:	str	r0, [sp, #8]
    7028:	ldr	r0, [sp, #12]
    702c:	ldr	r1, [sp, #8]
    7030:	cmp	r0, r1
    7034:	bcs	709c <MyGame_Example_Monster_vec_find_by_name+0xc8>
    7038:	ldr	r0, [sp, #12]
    703c:	ldr	r1, [sp, #8]
    7040:	ldr	r2, [sp, #12]
    7044:	sub	r1, r1, r2
    7048:	lsr	r1, r1, #1
    704c:	add	r0, r0, r1
    7050:	str	r0, [sp, #4]
    7054:	ldr	r0, [fp, #-8]
    7058:	ldr	r1, [sp, #4]
    705c:	bl	42e8 <MyGame_Example_Monster_vec_at>
    7060:	bl	3850 <MyGame_Example_Monster_name>
    7064:	str	r0, [sp, #16]
    7068:	ldr	r0, [sp, #16]
    706c:	ldr	r1, [fp, #-12]
    7070:	movw	r2, #0
    7074:	bl	1258c <__flatbuffers_string_cmp>
    7078:	cmp	r0, #0
    707c:	bge	7090 <MyGame_Example_Monster_vec_find_by_name+0xbc>
    7080:	ldr	r0, [sp, #4]
    7084:	add	r0, r0, #1
    7088:	str	r0, [sp, #12]
    708c:	b	7098 <MyGame_Example_Monster_vec_find_by_name+0xc4>
    7090:	ldr	r0, [sp, #4]
    7094:	str	r0, [sp, #8]
    7098:	b	7028 <MyGame_Example_Monster_vec_find_by_name+0x54>
    709c:	ldr	r0, [sp, #12]
    70a0:	ldr	r1, [sp, #8]
    70a4:	cmp	r0, r1
    70a8:	bne	70e8 <MyGame_Example_Monster_vec_find_by_name+0x114>
    70ac:	ldr	r0, [fp, #-8]
    70b0:	ldr	r1, [sp, #12]
    70b4:	bl	42e8 <MyGame_Example_Monster_vec_at>
    70b8:	bl	3850 <MyGame_Example_Monster_name>
    70bc:	str	r0, [sp, #16]
    70c0:	ldr	r0, [sp, #16]
    70c4:	ldr	r1, [fp, #-12]
    70c8:	movw	r2, #0
    70cc:	bl	1258c <__flatbuffers_string_cmp>
    70d0:	cmp	r0, #0
    70d4:	bne	70e4 <MyGame_Example_Monster_vec_find_by_name+0x110>
    70d8:	ldr	r0, [sp, #12]
    70dc:	str	r0, [fp, #-4]
    70e0:	b	70f8 <MyGame_Example_Monster_vec_find_by_name+0x124>
    70e4:	b	70e8 <MyGame_Example_Monster_vec_find_by_name+0x114>
    70e8:	movw	r0, #0
    70ec:	movt	r0, #0
    70f0:	ldr	r0, [r0]
    70f4:	str	r0, [fp, #-4]
    70f8:	ldr	r0, [fp, #-4]
    70fc:	mov	sp, fp
    7100:	pop	{fp, pc}

00007104 <MyGame_Example_Monster_vec_find_n_by_name>:
    7104:	push	{fp, lr}
    7108:	mov	fp, sp
    710c:	sub	sp, sp, #32
    7110:	str	r0, [fp, #-8]
    7114:	str	r1, [fp, #-12]
    7118:	str	r2, [sp, #16]
    711c:	movw	r0, #0
    7120:	str	r0, [sp, #8]
    7124:	ldr	r0, [fp, #-8]
    7128:	bl	4298 <MyGame_Example_Monster_vec_len>
    712c:	str	r0, [sp, #4]
    7130:	cmp	r0, #0
    7134:	bne	714c <MyGame_Example_Monster_vec_find_n_by_name+0x48>
    7138:	movw	r0, #0
    713c:	movt	r0, #0
    7140:	ldr	r0, [r0]
    7144:	str	r0, [fp, #-4]
    7148:	b	722c <MyGame_Example_Monster_vec_find_n_by_name+0x128>
    714c:	ldr	r0, [sp, #4]
    7150:	mvn	r1, #0
    7154:	add	r0, r0, r1
    7158:	str	r0, [sp, #4]
    715c:	ldr	r0, [sp, #8]
    7160:	ldr	r1, [sp, #4]
    7164:	cmp	r0, r1
    7168:	bcs	71d0 <MyGame_Example_Monster_vec_find_n_by_name+0xcc>
    716c:	ldr	r0, [sp, #8]
    7170:	ldr	r1, [sp, #4]
    7174:	ldr	r2, [sp, #8]
    7178:	sub	r1, r1, r2
    717c:	lsr	r1, r1, #1
    7180:	add	r0, r0, r1
    7184:	str	r0, [sp]
    7188:	ldr	r0, [fp, #-8]
    718c:	ldr	r1, [sp]
    7190:	bl	42e8 <MyGame_Example_Monster_vec_at>
    7194:	bl	3850 <MyGame_Example_Monster_name>
    7198:	str	r0, [sp, #12]
    719c:	ldr	r0, [sp, #12]
    71a0:	ldr	r1, [fp, #-12]
    71a4:	ldr	r2, [sp, #16]
    71a8:	bl	1249c <__flatbuffers_string_n_cmp>
    71ac:	cmp	r0, #0
    71b0:	bge	71c4 <MyGame_Example_Monster_vec_find_n_by_name+0xc0>
    71b4:	ldr	r0, [sp]
    71b8:	add	r0, r0, #1
    71bc:	str	r0, [sp, #8]
    71c0:	b	71cc <MyGame_Example_Monster_vec_find_n_by_name+0xc8>
    71c4:	ldr	r0, [sp]
    71c8:	str	r0, [sp, #4]
    71cc:	b	715c <MyGame_Example_Monster_vec_find_n_by_name+0x58>
    71d0:	ldr	r0, [sp, #8]
    71d4:	ldr	r1, [sp, #4]
    71d8:	cmp	r0, r1
    71dc:	bne	721c <MyGame_Example_Monster_vec_find_n_by_name+0x118>
    71e0:	ldr	r0, [fp, #-8]
    71e4:	ldr	r1, [sp, #8]
    71e8:	bl	42e8 <MyGame_Example_Monster_vec_at>
    71ec:	bl	3850 <MyGame_Example_Monster_name>
    71f0:	str	r0, [sp, #12]
    71f4:	ldr	r0, [sp, #12]
    71f8:	ldr	r1, [fp, #-12]
    71fc:	ldr	r2, [sp, #16]
    7200:	bl	1249c <__flatbuffers_string_n_cmp>
    7204:	cmp	r0, #0
    7208:	bne	7218 <MyGame_Example_Monster_vec_find_n_by_name+0x114>
    720c:	ldr	r0, [sp, #8]
    7210:	str	r0, [fp, #-4]
    7214:	b	722c <MyGame_Example_Monster_vec_find_n_by_name+0x128>
    7218:	b	721c <MyGame_Example_Monster_vec_find_n_by_name+0x118>
    721c:	movw	r0, #0
    7220:	movt	r0, #0
    7224:	ldr	r0, [r0]
    7228:	str	r0, [fp, #-4]
    722c:	ldr	r0, [fp, #-4]
    7230:	mov	sp, fp
    7234:	pop	{fp, pc}

00007238 <test_scan>:
    7238:	push	{r4, r5, fp, lr}
    723c:	add	fp, sp, #8
    7240:	sub	sp, sp, #304	; 0x130
    7244:	str	r0, [fp, #-12]
    7248:	movw	r0, #0
    724c:	movt	r0, #0
    7250:	ldrb	r1, [r0]
    7254:	strb	r1, [fp, #-47]	; 0xffffffd1
    7258:	ldrb	r1, [r0, #1]
    725c:	strb	r1, [fp, #-46]	; 0xffffffd2
    7260:	ldrb	r1, [r0, #2]
    7264:	strb	r1, [fp, #-45]	; 0xffffffd3
    7268:	ldrb	r1, [r0, #3]
    726c:	strb	r1, [fp, #-44]	; 0xffffffd4
    7270:	ldrb	r1, [r0, #4]
    7274:	strb	r1, [fp, #-43]	; 0xffffffd5
    7278:	ldrb	r1, [r0, #5]
    727c:	strb	r1, [fp, #-42]	; 0xffffffd6
    7280:	ldrb	r0, [r0, #6]
    7284:	strb	r0, [fp, #-41]	; 0xffffffd7
    7288:	mvn	r0, #0
    728c:	str	r0, [fp, #-52]	; 0xffffffcc
    7290:	ldr	r0, [fp, #-12]
    7294:	bl	0 <flatcc_builder_reset>
    7298:	ldr	r1, [fp, #-12]
    729c:	str	r0, [fp, #-56]	; 0xffffffc8
    72a0:	mov	r0, r1
    72a4:	bl	57c0 <MyGame_Example_Monster_start_as_root>
    72a8:	ldr	r1, [fp, #-12]
    72ac:	str	r0, [fp, #-60]	; 0xffffffc4
    72b0:	mov	r0, r1
    72b4:	movw	r1, #0
    72b8:	movt	r1, #0
    72bc:	bl	1818 <MyGame_Example_Monster_name_create_str>
    72c0:	sub	r1, fp, #47	; 0x2f
    72c4:	ldr	r2, [fp, #-12]
    72c8:	str	r0, [fp, #-64]	; 0xffffffc0
    72cc:	mov	r0, r2
    72d0:	movw	r2, #7
    72d4:	bl	5954 <MyGame_Example_Monster_inventory_create>
    72d8:	ldr	r1, [fp, #-12]
    72dc:	str	r0, [fp, #-68]	; 0xffffffbc
    72e0:	mov	r0, r1
    72e4:	bl	81c4 <MyGame_Example_Monster_testarrayofstring_start>
    72e8:	ldr	r1, [fp, #-12]
    72ec:	str	r0, [fp, #-72]	; 0xffffffb8
    72f0:	mov	r0, r1
    72f4:	bl	81e4 <MyGame_Example_Monster_testarrayofstring_end>
    72f8:	ldr	r1, [fp, #-12]
    72fc:	str	r0, [fp, #-76]	; 0xffffffb4
    7300:	mov	r0, r1
    7304:	bl	5ca0 <MyGame_Example_Monster_testarrayoftables_start>
    7308:	ldr	r1, [fp, #-12]
    730c:	str	r0, [fp, #-80]	; 0xffffffb0
    7310:	mov	r0, r1
    7314:	bl	5ce8 <MyGame_Example_Monster_testarrayoftables_push_start>
    7318:	ldr	r1, [fp, #-12]
    731c:	str	r0, [fp, #-84]	; 0xffffffac
    7320:	mov	r0, r1
    7324:	movw	r1, #0
    7328:	movt	r1, #0
    732c:	bl	1818 <MyGame_Example_Monster_name_create_str>
    7330:	ldr	r1, [fp, #-12]
    7334:	str	r0, [fp, #-88]	; 0xffffffa8
    7338:	mov	r0, r1
    733c:	bl	5d60 <MyGame_Example_Monster_testarrayoftables_push_end>
    7340:	ldr	r1, [fp, #-12]
    7344:	str	r0, [fp, #-92]	; 0xffffffa4
    7348:	mov	r0, r1
    734c:	bl	5ce8 <MyGame_Example_Monster_testarrayoftables_push_start>
    7350:	ldr	r1, [fp, #-12]
    7354:	str	r0, [fp, #-96]	; 0xffffffa0
    7358:	mov	r0, r1
    735c:	movw	r1, #0
    7360:	movt	r1, #0
    7364:	bl	1818 <MyGame_Example_Monster_name_create_str>
    7368:	ldr	r1, [fp, #-12]
    736c:	str	r0, [fp, #-100]	; 0xffffff9c
    7370:	mov	r0, r1
    7374:	bl	5d60 <MyGame_Example_Monster_testarrayoftables_push_end>
    7378:	ldr	r1, [fp, #-12]
    737c:	str	r0, [fp, #-104]	; 0xffffff98
    7380:	mov	r0, r1
    7384:	bl	5ce8 <MyGame_Example_Monster_testarrayoftables_push_start>
    7388:	ldr	r1, [fp, #-12]
    738c:	str	r0, [fp, #-108]	; 0xffffff94
    7390:	mov	r0, r1
    7394:	movw	r1, #0
    7398:	movt	r1, #0
    739c:	bl	1818 <MyGame_Example_Monster_name_create_str>
    73a0:	ldr	r1, [fp, #-12]
    73a4:	str	r0, [fp, #-112]	; 0xffffff90
    73a8:	mov	r0, r1
    73ac:	bl	5d60 <MyGame_Example_Monster_testarrayoftables_push_end>
    73b0:	ldr	r1, [fp, #-12]
    73b4:	str	r0, [fp, #-116]	; 0xffffff8c
    73b8:	mov	r0, r1
    73bc:	bl	5ce8 <MyGame_Example_Monster_testarrayoftables_push_start>
    73c0:	ldr	r1, [fp, #-12]
    73c4:	str	r0, [fp, #-120]	; 0xffffff88
    73c8:	mov	r0, r1
    73cc:	movw	r1, #0
    73d0:	movt	r1, #0
    73d4:	bl	1818 <MyGame_Example_Monster_name_create_str>
    73d8:	ldr	r1, [fp, #-12]
    73dc:	str	r0, [fp, #-124]	; 0xffffff84
    73e0:	mov	r0, r1
    73e4:	bl	5d60 <MyGame_Example_Monster_testarrayoftables_push_end>
    73e8:	ldr	r1, [fp, #-12]
    73ec:	str	r0, [fp, #-128]	; 0xffffff80
    73f0:	mov	r0, r1
    73f4:	bl	5ce8 <MyGame_Example_Monster_testarrayoftables_push_start>
    73f8:	ldr	r1, [fp, #-12]
    73fc:	str	r0, [fp, #-132]	; 0xffffff7c
    7400:	mov	r0, r1
    7404:	movw	r1, #0
    7408:	movt	r1, #0
    740c:	bl	1818 <MyGame_Example_Monster_name_create_str>
    7410:	ldr	r1, [fp, #-12]
    7414:	str	r0, [fp, #-136]	; 0xffffff78
    7418:	mov	r0, r1
    741c:	bl	5d60 <MyGame_Example_Monster_testarrayoftables_push_end>
    7420:	ldr	r1, [fp, #-12]
    7424:	str	r0, [fp, #-140]	; 0xffffff74
    7428:	mov	r0, r1
    742c:	bl	5e38 <MyGame_Example_Monster_testarrayoftables_end>
    7430:	ldr	r1, [fp, #-12]
    7434:	str	r0, [fp, #-144]	; 0xffffff70
    7438:	mov	r0, r1
    743c:	bl	6360 <MyGame_Example_Monster_end_as_root>
    7440:	ldr	r1, [fp, #-12]
    7444:	str	r0, [fp, #-148]	; 0xffffff6c
    7448:	mov	r0, r1
    744c:	sub	r1, fp, #40	; 0x28
    7450:	bl	0 <flatcc_builder_finalize_aligned_buffer>
    7454:	str	r0, [fp, #-36]	; 0xffffffdc
    7458:	ldr	r0, [fp, #-36]	; 0xffffffdc
    745c:	bl	25c <MyGame_Example_Monster_as_root>
    7460:	str	r0, [fp, #-20]	; 0xffffffec
    7464:	ldr	r0, [fp, #-20]	; 0xffffffec
    7468:	bl	419c <MyGame_Example_Monster_testarrayoftables>
    746c:	str	r0, [fp, #-24]	; 0xffffffe8
    7470:	ldr	r0, [fp, #-24]	; 0xffffffe8
    7474:	movw	r1, #0
    7478:	cmp	r0, r1
    747c:	beq	7484 <test_scan+0x24c>
    7480:	b	74a4 <test_scan+0x26c>
    7484:	movw	r0, #0
    7488:	movt	r0, #0
    748c:	movw	r1, #0
    7490:	movt	r1, #0
    7494:	movw	r2, #1305	; 0x519
    7498:	movw	r3, #0
    749c:	movt	r3, #0
    74a0:	bl	0 <__assert_fail>
    74a4:	ldr	r0, [fp, #-20]	; 0xffffffec
    74a8:	bl	3c18 <MyGame_Example_Monster_inventory>
    74ac:	str	r0, [fp, #-28]	; 0xffffffe4
    74b0:	ldr	r0, [fp, #-28]	; 0xffffffe4
    74b4:	movw	r1, #0
    74b8:	cmp	r0, r1
    74bc:	beq	74c4 <test_scan+0x28c>
    74c0:	b	74e4 <test_scan+0x2ac>
    74c4:	movw	r0, #0
    74c8:	movt	r0, #0
    74cc:	movw	r1, #0
    74d0:	movt	r1, #0
    74d4:	movw	r2, #1307	; 0x51b
    74d8:	movw	r3, #0
    74dc:	movt	r3, #0
    74e0:	bl	0 <__assert_fail>
    74e4:	ldr	r0, [fp, #-20]	; 0xffffffec
    74e8:	bl	436c <MyGame_Example_Monster_testarrayofstring>
    74ec:	str	r0, [fp, #-32]	; 0xffffffe0
    74f0:	ldr	r0, [fp, #-32]	; 0xffffffe0
    74f4:	movw	r1, #0
    74f8:	cmp	r0, r1
    74fc:	beq	7504 <test_scan+0x2cc>
    7500:	b	7524 <test_scan+0x2ec>
    7504:	movw	r0, #0
    7508:	movt	r0, #0
    750c:	movw	r1, #0
    7510:	movt	r1, #0
    7514:	movw	r2, #1309	; 0x51d
    7518:	movw	r3, #0
    751c:	movt	r3, #0
    7520:	bl	0 <__assert_fail>
    7524:	ldr	r0, [fp, #-24]	; 0xffffffe8
    7528:	movw	r1, #0
    752c:	movt	r1, #0
    7530:	bl	8224 <MyGame_Example_Monster_vec_scan>
    7534:	movw	r1, #1
    7538:	cmp	r1, r0
    753c:	beq	7550 <test_scan+0x318>
    7540:	movw	r0, #0
    7544:	movt	r0, #0
    7548:	bl	0 <printf>
    754c:	b	81b0 <test_scan+0xf78>
    7550:	ldr	r0, [fp, #-24]	; 0xffffffe8
    7554:	movw	r1, #0
    7558:	movt	r1, #0
    755c:	bl	824c <MyGame_Example_Monster_vec_rscan>
    7560:	movw	r1, #1
    7564:	cmp	r1, r0
    7568:	beq	757c <test_scan+0x344>
    756c:	movw	r0, #0
    7570:	movt	r0, #0
    7574:	bl	0 <printf>
    7578:	b	81b0 <test_scan+0xf78>
    757c:	ldr	r0, [fp, #-24]	; 0xffffffe8
    7580:	movw	r1, #0
    7584:	movt	r1, #0
    7588:	movw	r2, #5
    758c:	bl	8274 <MyGame_Example_Monster_vec_scan_n>
    7590:	movw	r1, #1
    7594:	cmp	r1, r0
    7598:	beq	75ac <test_scan+0x374>
    759c:	movw	r0, #0
    75a0:	movt	r0, #0
    75a4:	bl	0 <printf>
    75a8:	b	81b0 <test_scan+0xf78>
    75ac:	ldr	r0, [fp, #-24]	; 0xffffffe8
    75b0:	movw	r1, #0
    75b4:	movt	r1, #0
    75b8:	movw	r2, #5
    75bc:	bl	82a4 <MyGame_Example_Monster_vec_rscan_n>
    75c0:	movw	r1, #1
    75c4:	cmp	r1, r0
    75c8:	beq	75dc <test_scan+0x3a4>
    75cc:	movw	r0, #0
    75d0:	movt	r0, #0
    75d4:	bl	0 <printf>
    75d8:	b	81b0 <test_scan+0xf78>
    75dc:	movw	r0, #0
    75e0:	movt	r0, #0
    75e4:	ldr	r0, [r0]
    75e8:	ldr	r1, [fp, #-24]	; 0xffffffe8
    75ec:	movw	r2, #0
    75f0:	movt	r2, #0
    75f4:	ldr	r2, [r2]
    75f8:	str	r0, [fp, #-152]	; 0xffffff68
    75fc:	mov	r0, r1
    7600:	movw	r1, #2
    7604:	movw	r3, #0
    7608:	movt	r3, #0
    760c:	bl	82d4 <MyGame_Example_Monster_vec_scan_ex>
    7610:	ldr	r1, [fp, #-152]	; 0xffffff68
    7614:	cmp	r1, r0
    7618:	beq	762c <test_scan+0x3f4>
    761c:	movw	r0, #0
    7620:	movt	r0, #0
    7624:	bl	0 <printf>
    7628:	b	81b0 <test_scan+0xf78>
    762c:	movw	r0, #0
    7630:	movt	r0, #0
    7634:	ldr	r0, [r0]
    7638:	ldr	r1, [fp, #-24]	; 0xffffffe8
    763c:	str	r0, [sp, #156]	; 0x9c
    7640:	mov	r0, r1
    7644:	movw	r1, #0
    7648:	movt	r1, #0
    764c:	bl	8224 <MyGame_Example_Monster_vec_scan>
    7650:	ldr	r1, [sp, #156]	; 0x9c
    7654:	cmp	r1, r0
    7658:	beq	766c <test_scan+0x434>
    765c:	movw	r0, #0
    7660:	movt	r0, #0
    7664:	bl	0 <printf>
    7668:	b	81b0 <test_scan+0xf78>
    766c:	ldr	r0, [fp, #-24]	; 0xffffffe8
    7670:	movw	r1, #0
    7674:	movt	r1, #0
    7678:	bl	8224 <MyGame_Example_Monster_vec_scan>
    767c:	movw	r1, #0
    7680:	cmp	r1, r0
    7684:	beq	7698 <test_scan+0x460>
    7688:	movw	r0, #0
    768c:	movt	r0, #0
    7690:	bl	0 <printf>
    7694:	b	81b0 <test_scan+0xf78>
    7698:	ldr	r0, [fp, #-24]	; 0xffffffe8
    769c:	movw	r1, #0
    76a0:	movt	r1, #0
    76a4:	bl	830c <MyGame_Example_Monster_vec_scan_by_name>
    76a8:	movw	r1, #2
    76ac:	cmp	r1, r0
    76b0:	beq	76c4 <test_scan+0x48c>
    76b4:	movw	r0, #0
    76b8:	movt	r0, #0
    76bc:	bl	0 <printf>
    76c0:	b	81b0 <test_scan+0xf78>
    76c4:	ldr	r0, [fp, #-24]	; 0xffffffe8
    76c8:	movw	r1, #0
    76cc:	movt	r1, #0
    76d0:	bl	83b0 <MyGame_Example_Monster_vec_rscan_by_name>
    76d4:	movw	r1, #4
    76d8:	cmp	r1, r0
    76dc:	beq	76f0 <test_scan+0x4b8>
    76e0:	movw	r0, #0
    76e4:	movt	r0, #0
    76e8:	bl	0 <printf>
    76ec:	b	81b0 <test_scan+0xf78>
    76f0:	ldr	r0, [fp, #-24]	; 0xffffffe8
    76f4:	movw	r1, #0
    76f8:	movt	r1, #0
    76fc:	movw	r2, #8
    7700:	bl	8440 <MyGame_Example_Monster_vec_rscan_n_by_name>
    7704:	movw	r1, #4
    7708:	cmp	r1, r0
    770c:	beq	7720 <test_scan+0x4e8>
    7710:	movw	r0, #0
    7714:	movt	r0, #0
    7718:	bl	0 <printf>
    771c:	b	81b0 <test_scan+0xf78>
    7720:	ldr	r0, [fp, #-24]	; 0xffffffe8
    7724:	movw	r1, #1
    7728:	movw	r2, #3
    772c:	movw	r3, #0
    7730:	movt	r3, #0
    7734:	movw	ip, #8
    7738:	str	ip, [sp]
    773c:	bl	84d4 <MyGame_Example_Monster_vec_rscan_ex_n_by_name>
    7740:	movw	r1, #2
    7744:	cmp	r1, r0
    7748:	beq	775c <test_scan+0x524>
    774c:	movw	r0, #0
    7750:	movt	r0, #0
    7754:	bl	0 <printf>
    7758:	b	81b0 <test_scan+0xf78>
    775c:	ldr	r0, [fp, #-24]	; 0xffffffe8
    7760:	movw	r1, #0
    7764:	movt	r1, #0
    7768:	ldr	r2, [r1]
    776c:	movw	r1, #2
    7770:	movw	r3, #0
    7774:	movt	r3, #0
    7778:	bl	85ac <MyGame_Example_Monster_vec_scan_ex_by_name>
    777c:	movw	r1, #2
    7780:	cmp	r1, r0
    7784:	beq	7798 <test_scan+0x560>
    7788:	movw	r0, #0
    778c:	movt	r0, #0
    7790:	bl	0 <printf>
    7794:	b	81b0 <test_scan+0xf78>
    7798:	ldr	r0, [fp, #-24]	; 0xffffffe8
    779c:	movw	r1, #0
    77a0:	movt	r1, #0
    77a4:	ldr	r2, [r1]
    77a8:	movw	r1, #2
    77ac:	movw	r3, #0
    77b0:	movt	r3, #0
    77b4:	movw	ip, #8
    77b8:	str	ip, [sp]
    77bc:	bl	8688 <MyGame_Example_Monster_vec_scan_ex_n_by_name>
    77c0:	movw	r1, #2
    77c4:	cmp	r1, r0
    77c8:	beq	77dc <test_scan+0x5a4>
    77cc:	movw	r0, #0
    77d0:	movt	r0, #0
    77d4:	bl	0 <printf>
    77d8:	b	81b0 <test_scan+0xf78>
    77dc:	ldr	r0, [fp, #-24]	; 0xffffffe8
    77e0:	movw	r1, #0
    77e4:	movt	r1, #0
    77e8:	ldr	r2, [r1]
    77ec:	movw	r1, #3
    77f0:	movw	r3, #0
    77f4:	movt	r3, #0
    77f8:	bl	85ac <MyGame_Example_Monster_vec_scan_ex_by_name>
    77fc:	movw	r1, #4
    7800:	cmp	r1, r0
    7804:	beq	7818 <test_scan+0x5e0>
    7808:	movw	r0, #0
    780c:	movt	r0, #0
    7810:	bl	0 <printf>
    7814:	b	81b0 <test_scan+0xf78>
    7818:	movw	r0, #0
    781c:	movt	r0, #0
    7820:	ldr	r0, [r0]
    7824:	ldr	r1, [fp, #-24]	; 0xffffffe8
    7828:	str	r0, [sp, #152]	; 0x98
    782c:	mov	r0, r1
    7830:	movw	r1, #1
    7834:	movw	r2, #3
    7838:	movw	r3, #0
    783c:	movt	r3, #0
    7840:	bl	82d4 <MyGame_Example_Monster_vec_scan_ex>
    7844:	ldr	r1, [sp, #152]	; 0x98
    7848:	cmp	r1, r0
    784c:	beq	7860 <test_scan+0x628>
    7850:	movw	r0, #0
    7854:	movt	r0, #0
    7858:	bl	0 <printf>
    785c:	b	81b0 <test_scan+0xf78>
    7860:	movw	r0, #0
    7864:	movt	r0, #0
    7868:	ldr	r0, [r0]
    786c:	ldr	r1, [fp, #-24]	; 0xffffffe8
    7870:	str	r0, [sp, #148]	; 0x94
    7874:	mov	r0, r1
    7878:	movw	r1, #1
    787c:	movw	r2, #3
    7880:	movw	r3, #0
    7884:	movt	r3, #0
    7888:	bl	82d4 <MyGame_Example_Monster_vec_scan_ex>
    788c:	ldr	r1, [sp, #148]	; 0x94
    7890:	cmp	r1, r0
    7894:	beq	78a8 <test_scan+0x670>
    7898:	movw	r0, #0
    789c:	movt	r0, #0
    78a0:	bl	0 <printf>
    78a4:	b	81b0 <test_scan+0xf78>
    78a8:	ldr	r0, [fp, #-24]	; 0xffffffe8
    78ac:	movw	r1, #1
    78b0:	movw	r2, #3
    78b4:	movw	r3, #0
    78b8:	movt	r3, #0
    78bc:	bl	82d4 <MyGame_Example_Monster_vec_scan_ex>
    78c0:	movw	r1, #1
    78c4:	cmp	r1, r0
    78c8:	beq	78dc <test_scan+0x6a4>
    78cc:	movw	r0, #0
    78d0:	movt	r0, #0
    78d4:	bl	0 <printf>
    78d8:	b	81b0 <test_scan+0xf78>
    78dc:	ldr	r0, [fp, #-24]	; 0xffffffe8
    78e0:	movw	r1, #1
    78e4:	movw	r2, #3
    78e8:	movw	r3, #0
    78ec:	movt	r3, #0
    78f0:	bl	85ac <MyGame_Example_Monster_vec_scan_ex_by_name>
    78f4:	movw	r1, #2
    78f8:	cmp	r1, r0
    78fc:	beq	7910 <test_scan+0x6d8>
    7900:	movw	r0, #0
    7904:	movt	r0, #0
    7908:	bl	0 <printf>
    790c:	b	81b0 <test_scan+0xf78>
    7910:	movw	r0, #0
    7914:	movt	r0, #0
    7918:	ldr	r0, [r0]
    791c:	ldr	r1, [fp, #-24]	; 0xffffffe8
    7920:	str	r0, [sp, #144]	; 0x90
    7924:	mov	r0, r1
    7928:	movw	r1, #1
    792c:	movw	r2, #3
    7930:	movw	r3, #0
    7934:	movt	r3, #0
    7938:	bl	85ac <MyGame_Example_Monster_vec_scan_ex_by_name>
    793c:	ldr	r1, [sp, #144]	; 0x90
    7940:	cmp	r1, r0
    7944:	beq	7958 <test_scan+0x720>
    7948:	movw	r0, #0
    794c:	movt	r0, #0
    7950:	bl	0 <printf>
    7954:	b	81b0 <test_scan+0xf78>
    7958:	movw	r0, #0
    795c:	movt	r0, #0
    7960:	ldr	r0, [r0]
    7964:	ldr	r1, [fp, #-24]	; 0xffffffe8
    7968:	str	r0, [sp, #140]	; 0x8c
    796c:	mov	r0, r1
    7970:	movw	r1, #1
    7974:	movw	r2, #3
    7978:	movw	r3, #0
    797c:	movt	r3, #0
    7980:	bl	8768 <MyGame_Example_Monster_vec_rscan_ex>
    7984:	ldr	r1, [sp, #140]	; 0x8c
    7988:	cmp	r1, r0
    798c:	beq	79a0 <test_scan+0x768>
    7990:	movw	r0, #0
    7994:	movt	r0, #0
    7998:	bl	0 <printf>
    799c:	b	81b0 <test_scan+0xf78>
    79a0:	movw	r0, #0
    79a4:	movt	r0, #0
    79a8:	ldr	r0, [r0]
    79ac:	ldr	r1, [fp, #-24]	; 0xffffffe8
    79b0:	str	r0, [sp, #136]	; 0x88
    79b4:	mov	r0, r1
    79b8:	movw	r1, #1
    79bc:	movw	r2, #3
    79c0:	movw	r3, #0
    79c4:	movt	r3, #0
    79c8:	bl	8768 <MyGame_Example_Monster_vec_rscan_ex>
    79cc:	ldr	r1, [sp, #136]	; 0x88
    79d0:	cmp	r1, r0
    79d4:	beq	79e8 <test_scan+0x7b0>
    79d8:	movw	r0, #0
    79dc:	movt	r0, #0
    79e0:	bl	0 <printf>
    79e4:	b	81b0 <test_scan+0xf78>
    79e8:	ldr	r0, [fp, #-24]	; 0xffffffe8
    79ec:	movw	r1, #1
    79f0:	movw	r2, #3
    79f4:	movw	r3, #0
    79f8:	movt	r3, #0
    79fc:	bl	8768 <MyGame_Example_Monster_vec_rscan_ex>
    7a00:	movw	r1, #1
    7a04:	cmp	r1, r0
    7a08:	beq	7a1c <test_scan+0x7e4>
    7a0c:	movw	r0, #0
    7a10:	movt	r0, #0
    7a14:	bl	0 <printf>
    7a18:	b	81b0 <test_scan+0xf78>
    7a1c:	ldr	r0, [fp, #-24]	; 0xffffffe8
    7a20:	movw	r1, #1
    7a24:	movw	r2, #3
    7a28:	movw	r3, #0
    7a2c:	movt	r3, #0
    7a30:	bl	87a0 <MyGame_Example_Monster_vec_rscan_ex_by_name>
    7a34:	movw	r1, #2
    7a38:	cmp	r1, r0
    7a3c:	beq	7a50 <test_scan+0x818>
    7a40:	movw	r0, #0
    7a44:	movt	r0, #0
    7a48:	bl	0 <printf>
    7a4c:	b	81b0 <test_scan+0xf78>
    7a50:	movw	r0, #0
    7a54:	movt	r0, #0
    7a58:	ldr	r0, [r0]
    7a5c:	ldr	r1, [fp, #-24]	; 0xffffffe8
    7a60:	str	r0, [sp, #132]	; 0x84
    7a64:	mov	r0, r1
    7a68:	movw	r1, #1
    7a6c:	movw	r2, #3
    7a70:	movw	r3, #0
    7a74:	movt	r3, #0
    7a78:	bl	87a0 <MyGame_Example_Monster_vec_rscan_ex_by_name>
    7a7c:	ldr	r1, [sp, #132]	; 0x84
    7a80:	cmp	r1, r0
    7a84:	beq	7a98 <test_scan+0x860>
    7a88:	movw	r0, #0
    7a8c:	movt	r0, #0
    7a90:	bl	0 <printf>
    7a94:	b	81b0 <test_scan+0xf78>
    7a98:	movw	r0, #0
    7a9c:	movt	r0, #0
    7aa0:	ldr	r0, [r0]
    7aa4:	ldr	r1, [fp, #-24]	; 0xffffffe8
    7aa8:	str	r0, [sp, #128]	; 0x80
    7aac:	mov	r0, r1
    7ab0:	movw	r1, #0
    7ab4:	str	r1, [sp, #124]	; 0x7c
    7ab8:	ldr	r2, [sp, #124]	; 0x7c
    7abc:	movw	r3, #0
    7ac0:	movt	r3, #0
    7ac4:	bl	82d4 <MyGame_Example_Monster_vec_scan_ex>
    7ac8:	ldr	r1, [sp, #128]	; 0x80
    7acc:	cmp	r1, r0
    7ad0:	beq	7ae4 <test_scan+0x8ac>
    7ad4:	movw	r0, #0
    7ad8:	movt	r0, #0
    7adc:	bl	0 <printf>
    7ae0:	b	81b0 <test_scan+0xf78>
    7ae4:	movw	r0, #0
    7ae8:	movt	r0, #0
    7aec:	ldr	r0, [r0]
    7af0:	ldr	r1, [fp, #-24]	; 0xffffffe8
    7af4:	str	r0, [sp, #120]	; 0x78
    7af8:	mov	r0, r1
    7afc:	movw	r1, #0
    7b00:	str	r1, [sp, #116]	; 0x74
    7b04:	ldr	r2, [sp, #116]	; 0x74
    7b08:	movw	r3, #0
    7b0c:	movt	r3, #0
    7b10:	bl	82d4 <MyGame_Example_Monster_vec_scan_ex>
    7b14:	ldr	r1, [sp, #120]	; 0x78
    7b18:	cmp	r1, r0
    7b1c:	beq	7b30 <test_scan+0x8f8>
    7b20:	movw	r0, #0
    7b24:	movt	r0, #0
    7b28:	bl	0 <printf>
    7b2c:	b	81b0 <test_scan+0xf78>
    7b30:	movw	r0, #0
    7b34:	movt	r0, #0
    7b38:	ldr	r0, [r0]
    7b3c:	ldr	r1, [fp, #-24]	; 0xffffffe8
    7b40:	str	r0, [sp, #112]	; 0x70
    7b44:	mov	r0, r1
    7b48:	movw	r1, #1
    7b4c:	str	r1, [sp, #108]	; 0x6c
    7b50:	ldr	r2, [sp, #108]	; 0x6c
    7b54:	movw	r3, #0
    7b58:	movt	r3, #0
    7b5c:	bl	82d4 <MyGame_Example_Monster_vec_scan_ex>
    7b60:	ldr	r1, [sp, #112]	; 0x70
    7b64:	cmp	r1, r0
    7b68:	beq	7b7c <test_scan+0x944>
    7b6c:	movw	r0, #0
    7b70:	movt	r0, #0
    7b74:	bl	0 <printf>
    7b78:	b	81b0 <test_scan+0xf78>
    7b7c:	movw	r0, #0
    7b80:	movt	r0, #0
    7b84:	ldr	r0, [r0]
    7b88:	ldr	r1, [fp, #-24]	; 0xffffffe8
    7b8c:	ldr	r2, [fp, #-24]	; 0xffffffe8
    7b90:	str	r0, [sp, #104]	; 0x68
    7b94:	mov	r0, r2
    7b98:	str	r1, [sp, #100]	; 0x64
    7b9c:	bl	4298 <MyGame_Example_Monster_vec_len>
    7ba0:	movw	r1, #0
    7ba4:	movt	r1, #0
    7ba8:	ldr	r2, [r1]
    7bac:	ldr	r1, [sp, #100]	; 0x64
    7bb0:	str	r0, [sp, #96]	; 0x60
    7bb4:	mov	r0, r1
    7bb8:	ldr	r1, [sp, #96]	; 0x60
    7bbc:	movw	r3, #0
    7bc0:	movt	r3, #0
    7bc4:	bl	82d4 <MyGame_Example_Monster_vec_scan_ex>
    7bc8:	ldr	r1, [sp, #104]	; 0x68
    7bcc:	cmp	r1, r0
    7bd0:	beq	7be4 <test_scan+0x9ac>
    7bd4:	movw	r0, #0
    7bd8:	movt	r0, #0
    7bdc:	bl	0 <printf>
    7be0:	b	81b0 <test_scan+0xf78>
    7be4:	movw	r0, #0
    7be8:	movt	r0, #0
    7bec:	ldr	r0, [r0]
    7bf0:	ldr	r1, [fp, #-24]	; 0xffffffe8
    7bf4:	str	r0, [sp, #92]	; 0x5c
    7bf8:	mov	r0, r1
    7bfc:	movw	r1, #0
    7c00:	str	r1, [sp, #88]	; 0x58
    7c04:	ldr	r2, [sp, #88]	; 0x58
    7c08:	movw	r3, #0
    7c0c:	movt	r3, #0
    7c10:	bl	8768 <MyGame_Example_Monster_vec_rscan_ex>
    7c14:	ldr	r1, [sp, #92]	; 0x5c
    7c18:	cmp	r1, r0
    7c1c:	beq	7c30 <test_scan+0x9f8>
    7c20:	movw	r0, #0
    7c24:	movt	r0, #0
    7c28:	bl	0 <printf>
    7c2c:	b	81b0 <test_scan+0xf78>
    7c30:	movw	r0, #0
    7c34:	movt	r0, #0
    7c38:	ldr	r0, [r0]
    7c3c:	ldr	r1, [fp, #-24]	; 0xffffffe8
    7c40:	str	r0, [sp, #84]	; 0x54
    7c44:	mov	r0, r1
    7c48:	movw	r1, #0
    7c4c:	str	r1, [sp, #80]	; 0x50
    7c50:	ldr	r2, [sp, #80]	; 0x50
    7c54:	movw	r3, #0
    7c58:	movt	r3, #0
    7c5c:	bl	8768 <MyGame_Example_Monster_vec_rscan_ex>
    7c60:	ldr	r1, [sp, #84]	; 0x54
    7c64:	cmp	r1, r0
    7c68:	beq	7c7c <test_scan+0xa44>
    7c6c:	movw	r0, #0
    7c70:	movt	r0, #0
    7c74:	bl	0 <printf>
    7c78:	b	81b0 <test_scan+0xf78>
    7c7c:	movw	r0, #0
    7c80:	movt	r0, #0
    7c84:	ldr	r0, [r0]
    7c88:	ldr	r1, [fp, #-24]	; 0xffffffe8
    7c8c:	str	r0, [sp, #76]	; 0x4c
    7c90:	mov	r0, r1
    7c94:	movw	r1, #1
    7c98:	str	r1, [sp, #72]	; 0x48
    7c9c:	ldr	r2, [sp, #72]	; 0x48
    7ca0:	movw	r3, #0
    7ca4:	movt	r3, #0
    7ca8:	bl	8768 <MyGame_Example_Monster_vec_rscan_ex>
    7cac:	ldr	r1, [sp, #76]	; 0x4c
    7cb0:	cmp	r1, r0
    7cb4:	beq	7cc8 <test_scan+0xa90>
    7cb8:	movw	r0, #0
    7cbc:	movt	r0, #0
    7cc0:	bl	0 <printf>
    7cc4:	b	81b0 <test_scan+0xf78>
    7cc8:	movw	r0, #0
    7ccc:	movt	r0, #0
    7cd0:	ldr	r0, [r0]
    7cd4:	ldr	r1, [fp, #-24]	; 0xffffffe8
    7cd8:	ldr	r2, [fp, #-24]	; 0xffffffe8
    7cdc:	str	r0, [sp, #68]	; 0x44
    7ce0:	mov	r0, r2
    7ce4:	str	r1, [sp, #64]	; 0x40
    7ce8:	bl	4298 <MyGame_Example_Monster_vec_len>
    7cec:	movw	r1, #0
    7cf0:	movt	r1, #0
    7cf4:	ldr	r2, [r1]
    7cf8:	ldr	r1, [sp, #64]	; 0x40
    7cfc:	str	r0, [sp, #60]	; 0x3c
    7d00:	mov	r0, r1
    7d04:	ldr	r1, [sp, #60]	; 0x3c
    7d08:	movw	r3, #0
    7d0c:	movt	r3, #0
    7d10:	bl	8768 <MyGame_Example_Monster_vec_rscan_ex>
    7d14:	ldr	r1, [sp, #68]	; 0x44
    7d18:	cmp	r1, r0
    7d1c:	beq	7d30 <test_scan+0xaf8>
    7d20:	movw	r0, #0
    7d24:	movt	r0, #0
    7d28:	bl	0 <printf>
    7d2c:	b	81b0 <test_scan+0xf78>
    7d30:	ldr	r0, [fp, #-24]	; 0xffffffe8
    7d34:	movw	r1, #0
    7d38:	movt	r1, #0
    7d3c:	bl	8870 <count_monsters>
    7d40:	movw	r1, #1
    7d44:	cmp	r1, r0
    7d48:	beq	7d5c <test_scan+0xb24>
    7d4c:	movw	r0, #0
    7d50:	movt	r0, #0
    7d54:	bl	0 <printf>
    7d58:	b	81b0 <test_scan+0xf78>
    7d5c:	ldr	r0, [fp, #-24]	; 0xffffffe8
    7d60:	movw	r1, #0
    7d64:	movt	r1, #0
    7d68:	bl	8870 <count_monsters>
    7d6c:	movw	r1, #0
    7d70:	cmp	r1, r0
    7d74:	beq	7d88 <test_scan+0xb50>
    7d78:	movw	r0, #0
    7d7c:	movt	r0, #0
    7d80:	bl	0 <printf>
    7d84:	b	81b0 <test_scan+0xf78>
    7d88:	ldr	r0, [fp, #-24]	; 0xffffffe8
    7d8c:	movw	r1, #0
    7d90:	movt	r1, #0
    7d94:	bl	8870 <count_monsters>
    7d98:	movw	r1, #1
    7d9c:	cmp	r1, r0
    7da0:	beq	7db4 <test_scan+0xb7c>
    7da4:	movw	r0, #0
    7da8:	movt	r0, #0
    7dac:	bl	0 <printf>
    7db0:	b	81b0 <test_scan+0xf78>
    7db4:	ldr	r0, [fp, #-24]	; 0xffffffe8
    7db8:	movw	r1, #0
    7dbc:	movt	r1, #0
    7dc0:	bl	8870 <count_monsters>
    7dc4:	movw	r1, #2
    7dc8:	cmp	r1, r0
    7dcc:	beq	7de0 <test_scan+0xba8>
    7dd0:	movw	r0, #0
    7dd4:	movt	r0, #0
    7dd8:	bl	0 <printf>
    7ddc:	b	81b0 <test_scan+0xf78>
    7de0:	ldr	r0, [fp, #-28]	; 0xffffffe4
    7de4:	movw	r1, #6
    7de8:	and	r1, r1, #255	; 0xff
    7dec:	bl	88f4 <flatbuffers_uint8_vec_scan>
    7df0:	str	r0, [fp, #-16]
    7df4:	movw	r1, #0
    7df8:	cmp	r1, r0
    7dfc:	beq	7e10 <test_scan+0xbd8>
    7e00:	movw	r0, #0
    7e04:	movt	r0, #0
    7e08:	bl	0 <printf>
    7e0c:	b	81b0 <test_scan+0xf78>
    7e10:	ldr	r0, [fp, #-28]	; 0xffffffe4
    7e14:	movw	r1, #1
    7e18:	and	r1, r1, #255	; 0xff
    7e1c:	bl	88f4 <flatbuffers_uint8_vec_scan>
    7e20:	str	r0, [fp, #-16]
    7e24:	movw	r1, #2
    7e28:	cmp	r1, r0
    7e2c:	beq	7e40 <test_scan+0xc08>
    7e30:	movw	r0, #0
    7e34:	movt	r0, #0
    7e38:	bl	0 <printf>
    7e3c:	b	81b0 <test_scan+0xf78>
    7e40:	movw	r0, #0
    7e44:	movt	r0, #0
    7e48:	ldr	r0, [r0]
    7e4c:	ldr	r1, [fp, #-28]	; 0xffffffe4
    7e50:	movw	r2, #0
    7e54:	movt	r2, #0
    7e58:	ldr	r2, [r2]
    7e5c:	str	r0, [sp, #56]	; 0x38
    7e60:	mov	r0, r1
    7e64:	movw	r1, #3
    7e68:	movw	r3, #1
    7e6c:	and	r3, r3, #255	; 0xff
    7e70:	bl	89c0 <flatbuffers_uint8_vec_scan_ex>
    7e74:	str	r0, [fp, #-16]
    7e78:	ldr	r1, [sp, #56]	; 0x38
    7e7c:	cmp	r1, r0
    7e80:	beq	7e94 <test_scan+0xc5c>
    7e84:	movw	r0, #0
    7e88:	movt	r0, #0
    7e8c:	bl	0 <printf>
    7e90:	b	81b0 <test_scan+0xf78>
    7e94:	movw	r0, #0
    7e98:	movt	r0, #0
    7e9c:	ldr	r0, [r0]
    7ea0:	ldr	r1, [fp, #-28]	; 0xffffffe4
    7ea4:	str	r0, [sp, #52]	; 0x34
    7ea8:	mov	r0, r1
    7eac:	movw	r1, #5
    7eb0:	and	r1, r1, #255	; 0xff
    7eb4:	bl	88f4 <flatbuffers_uint8_vec_scan>
    7eb8:	str	r0, [fp, #-16]
    7ebc:	ldr	r1, [sp, #52]	; 0x34
    7ec0:	cmp	r1, r0
    7ec4:	beq	7ed8 <test_scan+0xca0>
    7ec8:	movw	r0, #0
    7ecc:	movt	r0, #0
    7ed0:	bl	0 <printf>
    7ed4:	b	81b0 <test_scan+0xf78>
    7ed8:	ldr	r0, [fp, #-28]	; 0xffffffe4
    7edc:	movw	r1, #2
    7ee0:	and	r1, r1, #255	; 0xff
    7ee4:	bl	88f4 <flatbuffers_uint8_vec_scan>
    7ee8:	str	r0, [fp, #-16]
    7eec:	movw	r1, #6
    7ef0:	cmp	r1, r0
    7ef4:	beq	7f08 <test_scan+0xcd0>
    7ef8:	movw	r0, #0
    7efc:	movt	r0, #0
    7f00:	bl	0 <printf>
    7f04:	b	81b0 <test_scan+0xf78>
    7f08:	ldr	r0, [fp, #-28]	; 0xffffffe4
    7f0c:	movw	r1, #3
    7f10:	and	r1, r1, #255	; 0xff
    7f14:	bl	88f4 <flatbuffers_uint8_vec_scan>
    7f18:	str	r0, [fp, #-16]
    7f1c:	movw	r1, #3
    7f20:	cmp	r1, r0
    7f24:	beq	7f38 <test_scan+0xd00>
    7f28:	movw	r0, #0
    7f2c:	movt	r0, #0
    7f30:	bl	0 <printf>
    7f34:	b	81b0 <test_scan+0xf78>
    7f38:	ldr	r0, [fp, #-28]	; 0xffffffe4
    7f3c:	movw	r1, #0
    7f40:	movt	r1, #0
    7f44:	ldr	r2, [r1]
    7f48:	movw	r1, #3
    7f4c:	movw	r3, #3
    7f50:	and	r3, r3, #255	; 0xff
    7f54:	bl	89c0 <flatbuffers_uint8_vec_scan_ex>
    7f58:	str	r0, [fp, #-16]
    7f5c:	movw	r1, #3
    7f60:	cmp	r1, r0
    7f64:	beq	7f78 <test_scan+0xd40>
    7f68:	movw	r0, #0
    7f6c:	movt	r0, #0
    7f70:	bl	0 <printf>
    7f74:	b	81b0 <test_scan+0xf78>
    7f78:	ldr	r0, [fp, #-28]	; 0xffffffe4
    7f7c:	movw	r1, #0
    7f80:	movt	r1, #0
    7f84:	ldr	r2, [r1]
    7f88:	movw	r1, #4
    7f8c:	movw	r3, #3
    7f90:	and	r3, r3, #255	; 0xff
    7f94:	bl	89c0 <flatbuffers_uint8_vec_scan_ex>
    7f98:	str	r0, [fp, #-16]
    7f9c:	movw	r1, #5
    7fa0:	cmp	r1, r0
    7fa4:	beq	7fb8 <test_scan+0xd80>
    7fa8:	movw	r0, #0
    7fac:	movt	r0, #0
    7fb0:	bl	0 <printf>
    7fb4:	b	81b0 <test_scan+0xf78>
    7fb8:	ldr	r0, [fp, #-28]	; 0xffffffe4
    7fbc:	movw	r1, #3
    7fc0:	and	r1, r1, #255	; 0xff
    7fc4:	bl	8ac4 <flatbuffers_uint8_vec_rscan>
    7fc8:	str	r0, [fp, #-16]
    7fcc:	movw	r1, #5
    7fd0:	cmp	r1, r0
    7fd4:	beq	7fe8 <test_scan+0xdb0>
    7fd8:	movw	r0, #0
    7fdc:	movt	r0, #0
    7fe0:	bl	0 <printf>
    7fe4:	b	81b0 <test_scan+0xf78>
    7fe8:	ldr	r0, [fp, #-28]	; 0xffffffe4
    7fec:	movw	r1, #1
    7ff0:	movw	r2, #4
    7ff4:	movw	r3, #3
    7ff8:	and	r3, r3, #255	; 0xff
    7ffc:	bl	8b7c <flatbuffers_uint8_vec_rscan_ex>
    8000:	str	r0, [fp, #-16]
    8004:	movw	r1, #3
    8008:	cmp	r1, r0
    800c:	beq	8020 <test_scan+0xde8>
    8010:	movw	r0, #0
    8014:	movt	r0, #0
    8018:	bl	0 <printf>
    801c:	b	81b0 <test_scan+0xf78>
    8020:	ldr	r0, [fp, #-32]	; 0xffffffe0
    8024:	movw	r1, #0
    8028:	movt	r1, #0
    802c:	bl	8c74 <flatbuffers_string_vec_scan>
    8030:	ldr	r1, [fp, #-32]	; 0xffffffe0
    8034:	movw	r2, #0
    8038:	movt	r2, #0
    803c:	ldr	r2, [r2]
    8040:	str	r0, [sp, #48]	; 0x30
    8044:	mov	r0, r1
    8048:	movw	r1, #0
    804c:	movw	r3, #0
    8050:	movt	r3, #0
    8054:	bl	8d14 <flatbuffers_string_vec_scan_ex>
    8058:	ldr	r1, [fp, #-32]	; 0xffffffe0
    805c:	str	r0, [sp, #44]	; 0x2c
    8060:	mov	r0, r1
    8064:	movw	r1, #0
    8068:	movt	r1, #0
    806c:	movw	r2, #4
    8070:	bl	8dec <flatbuffers_string_vec_scan_n>
    8074:	ldr	r1, [fp, #-32]	; 0xffffffe0
    8078:	movw	r2, #0
    807c:	movt	r2, #0
    8080:	ldr	r2, [r2]
    8084:	str	r0, [sp, #40]	; 0x28
    8088:	mov	r0, r1
    808c:	movw	r1, #0
    8090:	movw	r3, #0
    8094:	movt	r3, #0
    8098:	movw	ip, #4
    809c:	str	ip, [sp]
    80a0:	bl	8e90 <flatbuffers_string_vec_scan_ex_n>
    80a4:	ldr	r1, [fp, #-32]	; 0xffffffe0
    80a8:	str	r0, [sp, #36]	; 0x24
    80ac:	mov	r0, r1
    80b0:	movw	r1, #0
    80b4:	movt	r1, #0
    80b8:	bl	8f6c <flatbuffers_string_vec_rscan>
    80bc:	ldr	r1, [fp, #-32]	; 0xffffffe0
    80c0:	movw	r2, #0
    80c4:	movt	r2, #0
    80c8:	ldr	r2, [r2]
    80cc:	str	r0, [sp, #32]
    80d0:	mov	r0, r1
    80d4:	movw	r1, #0
    80d8:	movw	r3, #0
    80dc:	movt	r3, #0
    80e0:	bl	8ff8 <flatbuffers_string_vec_rscan_ex>
    80e4:	ldr	r1, [fp, #-32]	; 0xffffffe0
    80e8:	str	r0, [sp, #28]
    80ec:	mov	r0, r1
    80f0:	movw	r1, #0
    80f4:	movt	r1, #0
    80f8:	movw	r2, #4
    80fc:	bl	90c4 <flatbuffers_string_vec_rscan_n>
    8100:	ldr	r1, [fp, #-32]	; 0xffffffe0
    8104:	movw	r2, #0
    8108:	movt	r2, #0
    810c:	ldr	r2, [r2]
    8110:	str	r0, [sp, #24]
    8114:	mov	r0, r1
    8118:	movw	r1, #0
    811c:	movw	r3, #0
    8120:	movt	r3, #0
    8124:	movw	ip, #4
    8128:	str	ip, [sp]
    812c:	bl	9154 <flatbuffers_string_vec_rscan_ex_n>
    8130:	ldr	r1, [fp, #-24]	; 0xffffffe8
    8134:	str	r0, [sp, #20]
    8138:	mov	r0, r1
    813c:	movw	r1, #13
    8140:	sxth	r1, r1
    8144:	bl	9228 <MyGame_Example_Monster_vec_scan_by_hp>
    8148:	ldr	r1, [fp, #-24]	; 0xffffffe8
    814c:	movw	r2, #0
    8150:	movt	r2, #0
    8154:	ldr	r2, [r2]
    8158:	str	r0, [sp, #16]
    815c:	mov	r0, r1
    8160:	movw	r1, #1
    8164:	movw	r3, #42	; 0x2a
    8168:	sxth	r3, r3
    816c:	bl	92f8 <MyGame_Example_Monster_vec_scan_ex_by_hp>
    8170:	ldr	r1, [fp, #-24]	; 0xffffffe8
    8174:	str	r0, [sp, #12]
    8178:	mov	r0, r1
    817c:	movw	r1, #1
    8180:	sxth	r1, r1
    8184:	bl	9400 <MyGame_Example_Monster_vec_rscan_by_hp>
    8188:	ldr	r1, [fp, #-24]	; 0xffffffe8
    818c:	str	r0, [sp, #8]
    8190:	mov	r0, r1
    8194:	movw	r1, #0
    8198:	movw	r2, #2
    819c:	movw	r3, #42	; 0x2a
    81a0:	sxth	r3, r3
    81a4:	bl	94bc <MyGame_Example_Monster_vec_rscan_ex_by_hp>
    81a8:	movw	r1, #0
    81ac:	str	r1, [fp, #-52]	; 0xffffffcc
    81b0:	ldr	r0, [fp, #-36]	; 0xffffffdc
    81b4:	bl	0 <flatcc_builder_aligned_free>
    81b8:	ldr	r0, [fp, #-52]	; 0xffffffcc
    81bc:	sub	sp, fp, #8
    81c0:	pop	{r4, r5, fp, pc}

000081c4 <MyGame_Example_Monster_testarrayofstring_start>:
    81c4:	push	{fp, lr}
    81c8:	mov	fp, sp
    81cc:	sub	sp, sp, #8
    81d0:	str	r0, [sp, #4]
    81d4:	ldr	r0, [sp, #4]
    81d8:	bl	0 <flatcc_builder_start_offset_vector>
    81dc:	mov	sp, fp
    81e0:	pop	{fp, pc}

000081e4 <MyGame_Example_Monster_testarrayofstring_end>:
    81e4:	push	{fp, lr}
    81e8:	mov	fp, sp
    81ec:	sub	sp, sp, #16
    81f0:	str	r0, [fp, #-4]
    81f4:	ldr	r0, [fp, #-4]
    81f8:	ldr	r1, [fp, #-4]
    81fc:	str	r0, [sp, #8]
    8200:	mov	r0, r1
    8204:	bl	0 <flatcc_builder_end_offset_vector>
    8208:	ldr	r1, [sp, #8]
    820c:	str	r0, [sp, #4]
    8210:	mov	r0, r1
    8214:	ldr	r1, [sp, #4]
    8218:	bl	11efc <MyGame_Example_Monster_testarrayofstring_add>
    821c:	mov	sp, fp
    8220:	pop	{fp, pc}

00008224 <MyGame_Example_Monster_vec_scan>:
    8224:	push	{fp, lr}
    8228:	mov	fp, sp
    822c:	sub	sp, sp, #8
    8230:	str	r0, [sp, #4]
    8234:	str	r1, [sp]
    8238:	ldr	r0, [sp, #4]
    823c:	ldr	r1, [sp]
    8240:	bl	830c <MyGame_Example_Monster_vec_scan_by_name>
    8244:	mov	sp, fp
    8248:	pop	{fp, pc}

0000824c <MyGame_Example_Monster_vec_rscan>:
    824c:	push	{fp, lr}
    8250:	mov	fp, sp
    8254:	sub	sp, sp, #8
    8258:	str	r0, [sp, #4]
    825c:	str	r1, [sp]
    8260:	ldr	r0, [sp, #4]
    8264:	ldr	r1, [sp]
    8268:	bl	83b0 <MyGame_Example_Monster_vec_rscan_by_name>
    826c:	mov	sp, fp
    8270:	pop	{fp, pc}

00008274 <MyGame_Example_Monster_vec_scan_n>:
    8274:	push	{fp, lr}
    8278:	mov	fp, sp
    827c:	sub	sp, sp, #16
    8280:	str	r0, [fp, #-4]
    8284:	str	r1, [sp, #8]
    8288:	str	r2, [sp, #4]
    828c:	ldr	r0, [fp, #-4]
    8290:	ldr	r1, [sp, #8]
    8294:	ldr	r2, [sp, #4]
    8298:	bl	125b8 <MyGame_Example_Monster_vec_scan_n_by_name>
    829c:	mov	sp, fp
    82a0:	pop	{fp, pc}

000082a4 <MyGame_Example_Monster_vec_rscan_n>:
    82a4:	push	{fp, lr}
    82a8:	mov	fp, sp
    82ac:	sub	sp, sp, #16
    82b0:	str	r0, [fp, #-4]
    82b4:	str	r1, [sp, #8]
    82b8:	str	r2, [sp, #4]
    82bc:	ldr	r0, [fp, #-4]
    82c0:	ldr	r1, [sp, #8]
    82c4:	ldr	r2, [sp, #4]
    82c8:	bl	8440 <MyGame_Example_Monster_vec_rscan_n_by_name>
    82cc:	mov	sp, fp
    82d0:	pop	{fp, pc}

000082d4 <MyGame_Example_Monster_vec_scan_ex>:
    82d4:	push	{fp, lr}
    82d8:	mov	fp, sp
    82dc:	sub	sp, sp, #16
    82e0:	str	r0, [fp, #-4]
    82e4:	str	r1, [sp, #8]
    82e8:	str	r2, [sp, #4]
    82ec:	str	r3, [sp]
    82f0:	ldr	r0, [fp, #-4]
    82f4:	ldr	r1, [sp, #8]
    82f8:	ldr	r2, [sp, #4]
    82fc:	ldr	r3, [sp]
    8300:	bl	85ac <MyGame_Example_Monster_vec_scan_ex_by_name>
    8304:	mov	sp, fp
    8308:	pop	{fp, pc}

0000830c <MyGame_Example_Monster_vec_scan_by_name>:
    830c:	push	{fp, lr}
    8310:	mov	fp, sp
    8314:	sub	sp, sp, #24
    8318:	str	r0, [fp, #-8]
    831c:	str	r1, [sp, #12]
    8320:	movw	r0, #0
    8324:	str	r0, [sp, #4]
    8328:	ldr	r0, [sp, #4]
    832c:	ldr	r1, [fp, #-8]
    8330:	str	r0, [sp]
    8334:	mov	r0, r1
    8338:	bl	4298 <MyGame_Example_Monster_vec_len>
    833c:	ldr	r1, [sp]
    8340:	cmp	r1, r0
    8344:	bcs	8394 <MyGame_Example_Monster_vec_scan_by_name+0x88>
    8348:	ldr	r0, [fp, #-8]
    834c:	ldr	r1, [sp, #4]
    8350:	bl	42e8 <MyGame_Example_Monster_vec_at>
    8354:	bl	3850 <MyGame_Example_Monster_name>
    8358:	str	r0, [sp, #8]
    835c:	ldr	r0, [sp, #8]
    8360:	ldr	r1, [sp, #12]
    8364:	movw	r2, #0
    8368:	bl	1258c <__flatbuffers_string_cmp>
    836c:	cmp	r0, #0
    8370:	bne	8380 <MyGame_Example_Monster_vec_scan_by_name+0x74>
    8374:	ldr	r0, [sp, #4]
    8378:	str	r0, [fp, #-4]
    837c:	b	83a4 <MyGame_Example_Monster_vec_scan_by_name+0x98>
    8380:	b	8384 <MyGame_Example_Monster_vec_scan_by_name+0x78>
    8384:	ldr	r0, [sp, #4]
    8388:	add	r0, r0, #1
    838c:	str	r0, [sp, #4]
    8390:	b	8328 <MyGame_Example_Monster_vec_scan_by_name+0x1c>
    8394:	movw	r0, #0
    8398:	movt	r0, #0
    839c:	ldr	r0, [r0]
    83a0:	str	r0, [fp, #-4]
    83a4:	ldr	r0, [fp, #-4]
    83a8:	mov	sp, fp
    83ac:	pop	{fp, pc}

000083b0 <MyGame_Example_Monster_vec_rscan_by_name>:
    83b0:	push	{fp, lr}
    83b4:	mov	fp, sp
    83b8:	sub	sp, sp, #24
    83bc:	str	r0, [fp, #-8]
    83c0:	str	r1, [sp, #12]
    83c4:	ldr	r0, [fp, #-8]
    83c8:	bl	4298 <MyGame_Example_Monster_vec_len>
    83cc:	str	r0, [sp, #4]
    83d0:	ldr	r0, [sp, #4]
    83d4:	mvn	r1, #0
    83d8:	add	r1, r0, r1
    83dc:	str	r1, [sp, #4]
    83e0:	cmp	r0, #0
    83e4:	bls	8424 <MyGame_Example_Monster_vec_rscan_by_name+0x74>
    83e8:	ldr	r0, [fp, #-8]
    83ec:	ldr	r1, [sp, #4]
    83f0:	bl	42e8 <MyGame_Example_Monster_vec_at>
    83f4:	bl	3850 <MyGame_Example_Monster_name>
    83f8:	str	r0, [sp, #8]
    83fc:	ldr	r0, [sp, #8]
    8400:	ldr	r1, [sp, #12]
    8404:	movw	r2, #0
    8408:	bl	1258c <__flatbuffers_string_cmp>
    840c:	cmp	r0, #0
    8410:	bne	8420 <MyGame_Example_Monster_vec_rscan_by_name+0x70>
    8414:	ldr	r0, [sp, #4]
    8418:	str	r0, [fp, #-4]
    841c:	b	8434 <MyGame_Example_Monster_vec_rscan_by_name+0x84>
    8420:	b	83d0 <MyGame_Example_Monster_vec_rscan_by_name+0x20>
    8424:	movw	r0, #0
    8428:	movt	r0, #0
    842c:	ldr	r0, [r0]
    8430:	str	r0, [fp, #-4]
    8434:	ldr	r0, [fp, #-4]
    8438:	mov	sp, fp
    843c:	pop	{fp, pc}

00008440 <MyGame_Example_Monster_vec_rscan_n_by_name>:
    8440:	push	{fp, lr}
    8444:	mov	fp, sp
    8448:	sub	sp, sp, #24
    844c:	str	r0, [fp, #-8]
    8450:	str	r1, [sp, #12]
    8454:	str	r2, [sp, #8]
    8458:	ldr	r0, [fp, #-8]
    845c:	bl	4298 <MyGame_Example_Monster_vec_len>
    8460:	str	r0, [sp]
    8464:	ldr	r0, [sp]
    8468:	mvn	r1, #0
    846c:	add	r1, r0, r1
    8470:	str	r1, [sp]
    8474:	cmp	r0, #0
    8478:	bls	84b8 <MyGame_Example_Monster_vec_rscan_n_by_name+0x78>
    847c:	ldr	r0, [fp, #-8]
    8480:	ldr	r1, [sp]
    8484:	bl	42e8 <MyGame_Example_Monster_vec_at>
    8488:	bl	3850 <MyGame_Example_Monster_name>
    848c:	str	r0, [sp, #4]
    8490:	ldr	r0, [sp, #4]
    8494:	ldr	r1, [sp, #12]
    8498:	ldr	r2, [sp, #8]
    849c:	bl	1249c <__flatbuffers_string_n_cmp>
    84a0:	cmp	r0, #0
    84a4:	bne	84b4 <MyGame_Example_Monster_vec_rscan_n_by_name+0x74>
    84a8:	ldr	r0, [sp]
    84ac:	str	r0, [fp, #-4]
    84b0:	b	84c8 <MyGame_Example_Monster_vec_rscan_n_by_name+0x88>
    84b4:	b	8464 <MyGame_Example_Monster_vec_rscan_n_by_name+0x24>
    84b8:	movw	r0, #0
    84bc:	movt	r0, #0
    84c0:	ldr	r0, [r0]
    84c4:	str	r0, [fp, #-4]
    84c8:	ldr	r0, [fp, #-4]
    84cc:	mov	sp, fp
    84d0:	pop	{fp, pc}

000084d4 <MyGame_Example_Monster_vec_rscan_ex_n_by_name>:
    84d4:	push	{fp, lr}
    84d8:	mov	fp, sp
    84dc:	sub	sp, sp, #40	; 0x28
    84e0:	ldr	ip, [fp, #8]
    84e4:	str	r0, [fp, #-8]
    84e8:	str	r1, [fp, #-12]
    84ec:	str	r2, [fp, #-16]
    84f0:	str	r3, [sp, #20]
    84f4:	ldr	r0, [fp, #-16]
    84f8:	ldr	r1, [fp, #-8]
    84fc:	str	r0, [sp, #8]
    8500:	mov	r0, r1
    8504:	str	ip, [sp, #4]
    8508:	bl	4298 <MyGame_Example_Monster_vec_len>
    850c:	ldr	r1, [sp, #8]
    8510:	cmp	r1, r0
    8514:	bcs	8524 <MyGame_Example_Monster_vec_rscan_ex_n_by_name+0x50>
    8518:	ldr	r0, [fp, #-16]
    851c:	str	r0, [sp]
    8520:	b	8530 <MyGame_Example_Monster_vec_rscan_ex_n_by_name+0x5c>
    8524:	ldr	r0, [fp, #-8]
    8528:	bl	4298 <MyGame_Example_Monster_vec_len>
    852c:	str	r0, [sp]
    8530:	ldr	r0, [sp]
    8534:	str	r0, [sp, #12]
    8538:	ldr	r0, [sp, #12]
    853c:	mvn	r1, #0
    8540:	add	r1, r0, r1
    8544:	str	r1, [sp, #12]
    8548:	ldr	r1, [fp, #-12]
    854c:	cmp	r0, r1
    8550:	bls	8590 <MyGame_Example_Monster_vec_rscan_ex_n_by_name+0xbc>
    8554:	ldr	r0, [fp, #-8]
    8558:	ldr	r1, [sp, #12]
    855c:	bl	42e8 <MyGame_Example_Monster_vec_at>
    8560:	bl	3850 <MyGame_Example_Monster_name>
    8564:	str	r0, [sp, #16]
    8568:	ldr	r0, [sp, #16]
    856c:	ldr	r1, [sp, #20]
    8570:	ldr	r2, [fp, #8]
    8574:	bl	1249c <__flatbuffers_string_n_cmp>
    8578:	cmp	r0, #0
    857c:	bne	858c <MyGame_Example_Monster_vec_rscan_ex_n_by_name+0xb8>
    8580:	ldr	r0, [sp, #12]
    8584:	str	r0, [fp, #-4]
    8588:	b	85a0 <MyGame_Example_Monster_vec_rscan_ex_n_by_name+0xcc>
    858c:	b	8538 <MyGame_Example_Monster_vec_rscan_ex_n_by_name+0x64>
    8590:	movw	r0, #0
    8594:	movt	r0, #0
    8598:	ldr	r0, [r0]
    859c:	str	r0, [fp, #-4]
    85a0:	ldr	r0, [fp, #-4]
    85a4:	mov	sp, fp
    85a8:	pop	{fp, pc}

000085ac <MyGame_Example_Monster_vec_scan_ex_by_name>:
    85ac:	push	{fp, lr}
    85b0:	mov	fp, sp
    85b4:	sub	sp, sp, #40	; 0x28
    85b8:	str	r0, [fp, #-8]
    85bc:	str	r1, [fp, #-12]
    85c0:	str	r2, [fp, #-16]
    85c4:	str	r3, [sp, #20]
    85c8:	ldr	r0, [fp, #-12]
    85cc:	str	r0, [sp, #12]
    85d0:	ldr	r0, [sp, #12]
    85d4:	ldr	r1, [fp, #-16]
    85d8:	ldr	r2, [fp, #-8]
    85dc:	str	r0, [sp, #8]
    85e0:	mov	r0, r2
    85e4:	str	r1, [sp, #4]
    85e8:	bl	4298 <MyGame_Example_Monster_vec_len>
    85ec:	ldr	r1, [sp, #4]
    85f0:	cmp	r1, r0
    85f4:	bcs	8604 <MyGame_Example_Monster_vec_scan_ex_by_name+0x58>
    85f8:	ldr	r0, [fp, #-16]
    85fc:	str	r0, [sp]
    8600:	b	8610 <MyGame_Example_Monster_vec_scan_ex_by_name+0x64>
    8604:	ldr	r0, [fp, #-8]
    8608:	bl	4298 <MyGame_Example_Monster_vec_len>
    860c:	str	r0, [sp]
    8610:	ldr	r0, [sp]
    8614:	ldr	r1, [sp, #8]
    8618:	cmp	r1, r0
    861c:	bcs	866c <MyGame_Example_Monster_vec_scan_ex_by_name+0xc0>
    8620:	ldr	r0, [fp, #-8]
    8624:	ldr	r1, [sp, #12]
    8628:	bl	42e8 <MyGame_Example_Monster_vec_at>
    862c:	bl	3850 <MyGame_Example_Monster_name>
    8630:	str	r0, [sp, #16]
    8634:	ldr	r0, [sp, #16]
    8638:	ldr	r1, [sp, #20]
    863c:	movw	r2, #0
    8640:	bl	1258c <__flatbuffers_string_cmp>
    8644:	cmp	r0, #0
    8648:	bne	8658 <MyGame_Example_Monster_vec_scan_ex_by_name+0xac>
    864c:	ldr	r0, [sp, #12]
    8650:	str	r0, [fp, #-4]
    8654:	b	867c <MyGame_Example_Monster_vec_scan_ex_by_name+0xd0>
    8658:	b	865c <MyGame_Example_Monster_vec_scan_ex_by_name+0xb0>
    865c:	ldr	r0, [sp, #12]
    8660:	add	r0, r0, #1
    8664:	str	r0, [sp, #12]
    8668:	b	85d0 <MyGame_Example_Monster_vec_scan_ex_by_name+0x24>
    866c:	movw	r0, #0
    8670:	movt	r0, #0
    8674:	ldr	r0, [r0]
    8678:	str	r0, [fp, #-4]
    867c:	ldr	r0, [fp, #-4]
    8680:	mov	sp, fp
    8684:	pop	{fp, pc}

00008688 <MyGame_Example_Monster_vec_scan_ex_n_by_name>:
    8688:	push	{fp, lr}
    868c:	mov	fp, sp
    8690:	sub	sp, sp, #40	; 0x28
    8694:	ldr	ip, [fp, #8]
    8698:	str	r0, [fp, #-8]
    869c:	str	r1, [fp, #-12]
    86a0:	str	r2, [fp, #-16]
    86a4:	str	r3, [sp, #20]
    86a8:	ldr	r0, [fp, #-12]
    86ac:	str	r0, [sp, #12]
    86b0:	ldr	r0, [sp, #12]
    86b4:	ldr	r1, [fp, #-16]
    86b8:	ldr	r2, [fp, #-8]
    86bc:	str	r0, [sp, #8]
    86c0:	mov	r0, r2
    86c4:	str	r1, [sp, #4]
    86c8:	bl	4298 <MyGame_Example_Monster_vec_len>
    86cc:	ldr	r1, [sp, #4]
    86d0:	cmp	r1, r0
    86d4:	bcs	86e4 <MyGame_Example_Monster_vec_scan_ex_n_by_name+0x5c>
    86d8:	ldr	r0, [fp, #-16]
    86dc:	str	r0, [sp]
    86e0:	b	86f0 <MyGame_Example_Monster_vec_scan_ex_n_by_name+0x68>
    86e4:	ldr	r0, [fp, #-8]
    86e8:	bl	4298 <MyGame_Example_Monster_vec_len>
    86ec:	str	r0, [sp]
    86f0:	ldr	r0, [sp]
    86f4:	ldr	r1, [sp, #8]
    86f8:	cmp	r1, r0
    86fc:	bcs	874c <MyGame_Example_Monster_vec_scan_ex_n_by_name+0xc4>
    8700:	ldr	r0, [fp, #-8]
    8704:	ldr	r1, [sp, #12]
    8708:	bl	42e8 <MyGame_Example_Monster_vec_at>
    870c:	bl	3850 <MyGame_Example_Monster_name>
    8710:	str	r0, [sp, #16]
    8714:	ldr	r0, [sp, #16]
    8718:	ldr	r1, [sp, #20]
    871c:	ldr	r2, [fp, #8]
    8720:	bl	1249c <__flatbuffers_string_n_cmp>
    8724:	cmp	r0, #0
    8728:	bne	8738 <MyGame_Example_Monster_vec_scan_ex_n_by_name+0xb0>
    872c:	ldr	r0, [sp, #12]
    8730:	str	r0, [fp, #-4]
    8734:	b	875c <MyGame_Example_Monster_vec_scan_ex_n_by_name+0xd4>
    8738:	b	873c <MyGame_Example_Monster_vec_scan_ex_n_by_name+0xb4>
    873c:	ldr	r0, [sp, #12]
    8740:	add	r0, r0, #1
    8744:	str	r0, [sp, #12]
    8748:	b	86b0 <MyGame_Example_Monster_vec_scan_ex_n_by_name+0x28>
    874c:	movw	r0, #0
    8750:	movt	r0, #0
    8754:	ldr	r0, [r0]
    8758:	str	r0, [fp, #-4]
    875c:	ldr	r0, [fp, #-4]
    8760:	mov	sp, fp
    8764:	pop	{fp, pc}

00008768 <MyGame_Example_Monster_vec_rscan_ex>:
    8768:	push	{fp, lr}
    876c:	mov	fp, sp
    8770:	sub	sp, sp, #16
    8774:	str	r0, [fp, #-4]
    8778:	str	r1, [sp, #8]
    877c:	str	r2, [sp, #4]
    8780:	str	r3, [sp]
    8784:	ldr	r0, [fp, #-4]
    8788:	ldr	r1, [sp, #8]
    878c:	ldr	r2, [sp, #4]
    8790:	ldr	r3, [sp]
    8794:	bl	87a0 <MyGame_Example_Monster_vec_rscan_ex_by_name>
    8798:	mov	sp, fp
    879c:	pop	{fp, pc}

000087a0 <MyGame_Example_Monster_vec_rscan_ex_by_name>:
    87a0:	push	{fp, lr}
    87a4:	mov	fp, sp
    87a8:	sub	sp, sp, #40	; 0x28
    87ac:	str	r0, [fp, #-8]
    87b0:	str	r1, [fp, #-12]
    87b4:	str	r2, [fp, #-16]
    87b8:	str	r3, [sp, #20]
    87bc:	ldr	r0, [fp, #-16]
    87c0:	ldr	r1, [fp, #-8]
    87c4:	str	r0, [sp, #8]
    87c8:	mov	r0, r1
    87cc:	bl	4298 <MyGame_Example_Monster_vec_len>
    87d0:	ldr	r1, [sp, #8]
    87d4:	cmp	r1, r0
    87d8:	bcs	87e8 <MyGame_Example_Monster_vec_rscan_ex_by_name+0x48>
    87dc:	ldr	r0, [fp, #-16]
    87e0:	str	r0, [sp, #4]
    87e4:	b	87f4 <MyGame_Example_Monster_vec_rscan_ex_by_name+0x54>
    87e8:	ldr	r0, [fp, #-8]
    87ec:	bl	4298 <MyGame_Example_Monster_vec_len>
    87f0:	str	r0, [sp, #4]
    87f4:	ldr	r0, [sp, #4]
    87f8:	str	r0, [sp, #12]
    87fc:	ldr	r0, [sp, #12]
    8800:	mvn	r1, #0
    8804:	add	r1, r0, r1
    8808:	str	r1, [sp, #12]
    880c:	ldr	r1, [fp, #-12]
    8810:	cmp	r0, r1
    8814:	bls	8854 <MyGame_Example_Monster_vec_rscan_ex_by_name+0xb4>
    8818:	ldr	r0, [fp, #-8]
    881c:	ldr	r1, [sp, #12]
    8820:	bl	42e8 <MyGame_Example_Monster_vec_at>
    8824:	bl	3850 <MyGame_Example_Monster_name>
    8828:	str	r0, [sp, #16]
    882c:	ldr	r0, [sp, #16]
    8830:	ldr	r1, [sp, #20]
    8834:	movw	r2, #0
    8838:	bl	1258c <__flatbuffers_string_cmp>
    883c:	cmp	r0, #0
    8840:	bne	8850 <MyGame_Example_Monster_vec_rscan_ex_by_name+0xb0>
    8844:	ldr	r0, [sp, #12]
    8848:	str	r0, [fp, #-4]
    884c:	b	8864 <MyGame_Example_Monster_vec_rscan_ex_by_name+0xc4>
    8850:	b	87fc <MyGame_Example_Monster_vec_rscan_ex_by_name+0x5c>
    8854:	movw	r0, #0
    8858:	movt	r0, #0
    885c:	ldr	r0, [r0]
    8860:	str	r0, [fp, #-4]
    8864:	ldr	r0, [fp, #-4]
    8868:	mov	sp, fp
    886c:	pop	{fp, pc}

00008870 <count_monsters>:
    8870:	push	{fp, lr}
    8874:	mov	fp, sp
    8878:	sub	sp, sp, #16
    887c:	str	r0, [fp, #-4]
    8880:	str	r1, [sp, #8]
    8884:	movw	r0, #0
    8888:	str	r0, [sp]
    888c:	ldr	r0, [fp, #-4]
    8890:	ldr	r1, [sp, #8]
    8894:	bl	8224 <MyGame_Example_Monster_vec_scan>
    8898:	str	r0, [sp, #4]
    889c:	ldr	r0, [sp, #4]
    88a0:	movw	r1, #0
    88a4:	movt	r1, #0
    88a8:	ldr	r1, [r1]
    88ac:	cmp	r0, r1
    88b0:	beq	88e8 <count_monsters+0x78>
    88b4:	ldr	r0, [sp]
    88b8:	add	r0, r0, #1
    88bc:	str	r0, [sp]
    88c0:	ldr	r0, [fp, #-4]
    88c4:	ldr	r1, [sp, #4]
    88c8:	add	r1, r1, #1
    88cc:	movw	r2, #0
    88d0:	movt	r2, #0
    88d4:	ldr	r2, [r2]
    88d8:	ldr	r3, [sp, #8]
    88dc:	bl	82d4 <MyGame_Example_Monster_vec_scan_ex>
    88e0:	str	r0, [sp, #4]
    88e4:	b	889c <count_monsters+0x2c>
    88e8:	ldr	r0, [sp]
    88ec:	mov	sp, fp
    88f0:	pop	{fp, pc}

000088f4 <flatbuffers_uint8_vec_scan>:
    88f4:	push	{fp, lr}
    88f8:	mov	fp, sp
    88fc:	sub	sp, sp, #24
    8900:	str	r0, [fp, #-8]
    8904:	strb	r1, [fp, #-9]
    8908:	movw	r0, #0
    890c:	str	r0, [sp, #8]
    8910:	ldr	r0, [sp, #8]
    8914:	ldr	r1, [fp, #-8]
    8918:	str	r0, [sp, #4]
    891c:	mov	r0, r1
    8920:	bl	3d14 <flatbuffers_uint8_vec_len>
    8924:	ldr	r1, [sp, #4]
    8928:	cmp	r1, r0
    892c:	bcs	89a4 <flatbuffers_uint8_vec_scan+0xb0>
    8930:	ldr	r0, [fp, #-8]
    8934:	ldr	r1, [sp, #8]
    8938:	bl	3d34 <flatbuffers_uint8_vec_at>
    893c:	strb	r0, [fp, #-10]
    8940:	ldrb	r0, [fp, #-10]
    8944:	ldrb	r1, [fp, #-9]
    8948:	cmp	r0, r1
    894c:	bge	895c <flatbuffers_uint8_vec_scan+0x68>
    8950:	mvn	r0, #0
    8954:	str	r0, [sp]
    8958:	b	8978 <flatbuffers_uint8_vec_scan+0x84>
    895c:	ldrb	r0, [fp, #-10]
    8960:	ldrb	r1, [fp, #-9]
    8964:	cmp	r0, r1
    8968:	movw	r0, #0
    896c:	movgt	r0, #1
    8970:	and	r0, r0, #1
    8974:	str	r0, [sp]
    8978:	ldr	r0, [sp]
    897c:	cmp	r0, #0
    8980:	bne	8990 <flatbuffers_uint8_vec_scan+0x9c>
    8984:	ldr	r0, [sp, #8]
    8988:	str	r0, [fp, #-4]
    898c:	b	89b4 <flatbuffers_uint8_vec_scan+0xc0>
    8990:	b	8994 <flatbuffers_uint8_vec_scan+0xa0>
    8994:	ldr	r0, [sp, #8]
    8998:	add	r0, r0, #1
    899c:	str	r0, [sp, #8]
    89a0:	b	8910 <flatbuffers_uint8_vec_scan+0x1c>
    89a4:	movw	r0, #0
    89a8:	movt	r0, #0
    89ac:	ldr	r0, [r0]
    89b0:	str	r0, [fp, #-4]
    89b4:	ldr	r0, [fp, #-4]
    89b8:	mov	sp, fp
    89bc:	pop	{fp, pc}

000089c0 <flatbuffers_uint8_vec_scan_ex>:
    89c0:	push	{fp, lr}
    89c4:	mov	fp, sp
    89c8:	sub	sp, sp, #40	; 0x28
    89cc:	str	r0, [fp, #-8]
    89d0:	str	r1, [fp, #-12]
    89d4:	str	r2, [fp, #-16]
    89d8:	strb	r3, [fp, #-17]	; 0xffffffef
    89dc:	ldr	r0, [fp, #-12]
    89e0:	str	r0, [sp, #16]
    89e4:	ldr	r0, [sp, #16]
    89e8:	ldr	r1, [fp, #-16]
    89ec:	ldr	r2, [fp, #-8]
    89f0:	str	r0, [sp, #12]
    89f4:	mov	r0, r2
    89f8:	str	r1, [sp, #8]
    89fc:	bl	3d14 <flatbuffers_uint8_vec_len>
    8a00:	ldr	r1, [sp, #8]
    8a04:	cmp	r1, r0
    8a08:	bcs	8a18 <flatbuffers_uint8_vec_scan_ex+0x58>
    8a0c:	ldr	r0, [fp, #-16]
    8a10:	str	r0, [sp, #4]
    8a14:	b	8a24 <flatbuffers_uint8_vec_scan_ex+0x64>
    8a18:	ldr	r0, [fp, #-8]
    8a1c:	bl	3d14 <flatbuffers_uint8_vec_len>
    8a20:	str	r0, [sp, #4]
    8a24:	ldr	r0, [sp, #4]
    8a28:	ldr	r1, [sp, #12]
    8a2c:	cmp	r1, r0
    8a30:	bcs	8aa8 <flatbuffers_uint8_vec_scan_ex+0xe8>
    8a34:	ldr	r0, [fp, #-8]
    8a38:	ldr	r1, [sp, #16]
    8a3c:	bl	3d34 <flatbuffers_uint8_vec_at>
    8a40:	strb	r0, [fp, #-18]	; 0xffffffee
    8a44:	ldrb	r0, [fp, #-18]	; 0xffffffee
    8a48:	ldrb	r1, [fp, #-17]	; 0xffffffef
    8a4c:	cmp	r0, r1
    8a50:	bge	8a60 <flatbuffers_uint8_vec_scan_ex+0xa0>
    8a54:	mvn	r0, #0
    8a58:	str	r0, [sp]
    8a5c:	b	8a7c <flatbuffers_uint8_vec_scan_ex+0xbc>
    8a60:	ldrb	r0, [fp, #-18]	; 0xffffffee
    8a64:	ldrb	r1, [fp, #-17]	; 0xffffffef
    8a68:	cmp	r0, r1
    8a6c:	movw	r0, #0
    8a70:	movgt	r0, #1
    8a74:	and	r0, r0, #1
    8a78:	str	r0, [sp]
    8a7c:	ldr	r0, [sp]
    8a80:	cmp	r0, #0
    8a84:	bne	8a94 <flatbuffers_uint8_vec_scan_ex+0xd4>
    8a88:	ldr	r0, [sp, #16]
    8a8c:	str	r0, [fp, #-4]
    8a90:	b	8ab8 <flatbuffers_uint8_vec_scan_ex+0xf8>
    8a94:	b	8a98 <flatbuffers_uint8_vec_scan_ex+0xd8>
    8a98:	ldr	r0, [sp, #16]
    8a9c:	add	r0, r0, #1
    8aa0:	str	r0, [sp, #16]
    8aa4:	b	89e4 <flatbuffers_uint8_vec_scan_ex+0x24>
    8aa8:	movw	r0, #0
    8aac:	movt	r0, #0
    8ab0:	ldr	r0, [r0]
    8ab4:	str	r0, [fp, #-4]
    8ab8:	ldr	r0, [fp, #-4]
    8abc:	mov	sp, fp
    8ac0:	pop	{fp, pc}

00008ac4 <flatbuffers_uint8_vec_rscan>:
    8ac4:	push	{fp, lr}
    8ac8:	mov	fp, sp
    8acc:	sub	sp, sp, #24
    8ad0:	str	r0, [fp, #-8]
    8ad4:	strb	r1, [fp, #-9]
    8ad8:	ldr	r0, [fp, #-8]
    8adc:	bl	3d14 <flatbuffers_uint8_vec_len>
    8ae0:	str	r0, [sp, #8]
    8ae4:	ldr	r0, [sp, #8]
    8ae8:	mvn	r1, #0
    8aec:	add	r1, r0, r1
    8af0:	str	r1, [sp, #8]
    8af4:	cmp	r0, #0
    8af8:	bls	8b60 <flatbuffers_uint8_vec_rscan+0x9c>
    8afc:	ldr	r0, [fp, #-8]
    8b00:	ldr	r1, [sp, #8]
    8b04:	bl	3d34 <flatbuffers_uint8_vec_at>
    8b08:	strb	r0, [fp, #-10]
    8b0c:	ldrb	r0, [fp, #-10]
    8b10:	ldrb	r1, [fp, #-9]
    8b14:	cmp	r0, r1
    8b18:	bge	8b28 <flatbuffers_uint8_vec_rscan+0x64>
    8b1c:	mvn	r0, #0
    8b20:	str	r0, [sp, #4]
    8b24:	b	8b44 <flatbuffers_uint8_vec_rscan+0x80>
    8b28:	ldrb	r0, [fp, #-10]
    8b2c:	ldrb	r1, [fp, #-9]
    8b30:	cmp	r0, r1
    8b34:	movw	r0, #0
    8b38:	movgt	r0, #1
    8b3c:	and	r0, r0, #1
    8b40:	str	r0, [sp, #4]
    8b44:	ldr	r0, [sp, #4]
    8b48:	cmp	r0, #0
    8b4c:	bne	8b5c <flatbuffers_uint8_vec_rscan+0x98>
    8b50:	ldr	r0, [sp, #8]
    8b54:	str	r0, [fp, #-4]
    8b58:	b	8b70 <flatbuffers_uint8_vec_rscan+0xac>
    8b5c:	b	8ae4 <flatbuffers_uint8_vec_rscan+0x20>
    8b60:	movw	r0, #0
    8b64:	movt	r0, #0
    8b68:	ldr	r0, [r0]
    8b6c:	str	r0, [fp, #-4]
    8b70:	ldr	r0, [fp, #-4]
    8b74:	mov	sp, fp
    8b78:	pop	{fp, pc}

00008b7c <flatbuffers_uint8_vec_rscan_ex>:
    8b7c:	push	{fp, lr}
    8b80:	mov	fp, sp
    8b84:	sub	sp, sp, #40	; 0x28
    8b88:	str	r0, [fp, #-8]
    8b8c:	str	r1, [fp, #-12]
    8b90:	str	r2, [fp, #-16]
    8b94:	strb	r3, [fp, #-17]	; 0xffffffef
    8b98:	ldr	r0, [fp, #-16]
    8b9c:	ldr	r1, [fp, #-8]
    8ba0:	str	r0, [sp, #12]
    8ba4:	mov	r0, r1
    8ba8:	bl	3d14 <flatbuffers_uint8_vec_len>
    8bac:	ldr	r1, [sp, #12]
    8bb0:	cmp	r1, r0
    8bb4:	bcs	8bc4 <flatbuffers_uint8_vec_rscan_ex+0x48>
    8bb8:	ldr	r0, [fp, #-16]
    8bbc:	str	r0, [sp, #8]
    8bc0:	b	8bd0 <flatbuffers_uint8_vec_rscan_ex+0x54>
    8bc4:	ldr	r0, [fp, #-8]
    8bc8:	bl	3d14 <flatbuffers_uint8_vec_len>
    8bcc:	str	r0, [sp, #8]
    8bd0:	ldr	r0, [sp, #8]
    8bd4:	str	r0, [sp, #16]
    8bd8:	ldr	r0, [sp, #16]
    8bdc:	mvn	r1, #0
    8be0:	add	r1, r0, r1
    8be4:	str	r1, [sp, #16]
    8be8:	ldr	r1, [fp, #-12]
    8bec:	cmp	r0, r1
    8bf0:	bls	8c58 <flatbuffers_uint8_vec_rscan_ex+0xdc>
    8bf4:	ldr	r0, [fp, #-8]
    8bf8:	ldr	r1, [sp, #16]
    8bfc:	bl	3d34 <flatbuffers_uint8_vec_at>
    8c00:	strb	r0, [fp, #-18]	; 0xffffffee
    8c04:	ldrb	r0, [fp, #-18]	; 0xffffffee
    8c08:	ldrb	r1, [fp, #-17]	; 0xffffffef
    8c0c:	cmp	r0, r1
    8c10:	bge	8c20 <flatbuffers_uint8_vec_rscan_ex+0xa4>
    8c14:	mvn	r0, #0
    8c18:	str	r0, [sp, #4]
    8c1c:	b	8c3c <flatbuffers_uint8_vec_rscan_ex+0xc0>
    8c20:	ldrb	r0, [fp, #-18]	; 0xffffffee
    8c24:	ldrb	r1, [fp, #-17]	; 0xffffffef
    8c28:	cmp	r0, r1
    8c2c:	movw	r0, #0
    8c30:	movgt	r0, #1
    8c34:	and	r0, r0, #1
    8c38:	str	r0, [sp, #4]
    8c3c:	ldr	r0, [sp, #4]
    8c40:	cmp	r0, #0
    8c44:	bne	8c54 <flatbuffers_uint8_vec_rscan_ex+0xd8>
    8c48:	ldr	r0, [sp, #16]
    8c4c:	str	r0, [fp, #-4]
    8c50:	b	8c68 <flatbuffers_uint8_vec_rscan_ex+0xec>
    8c54:	b	8bd8 <flatbuffers_uint8_vec_rscan_ex+0x5c>
    8c58:	movw	r0, #0
    8c5c:	movt	r0, #0
    8c60:	ldr	r0, [r0]
    8c64:	str	r0, [fp, #-4]
    8c68:	ldr	r0, [fp, #-4]
    8c6c:	mov	sp, fp
    8c70:	pop	{fp, pc}

00008c74 <flatbuffers_string_vec_scan>:
    8c74:	push	{fp, lr}
    8c78:	mov	fp, sp
    8c7c:	sub	sp, sp, #24
    8c80:	str	r0, [fp, #-8]
    8c84:	str	r1, [sp, #12]
    8c88:	movw	r0, #0
    8c8c:	str	r0, [sp, #4]
    8c90:	ldr	r0, [sp, #4]
    8c94:	ldr	r1, [fp, #-8]
    8c98:	str	r0, [sp]
    8c9c:	mov	r0, r1
    8ca0:	bl	4468 <flatbuffers_string_vec_len>
    8ca4:	ldr	r1, [sp]
    8ca8:	cmp	r1, r0
    8cac:	bcs	8cf8 <flatbuffers_string_vec_scan+0x84>
    8cb0:	ldr	r0, [fp, #-8]
    8cb4:	ldr	r1, [sp, #4]
    8cb8:	bl	44b8 <flatbuffers_string_vec_at>
    8cbc:	str	r0, [sp, #8]
    8cc0:	ldr	r0, [sp, #8]
    8cc4:	ldr	r1, [sp, #12]
    8cc8:	movw	r2, #0
    8ccc:	bl	1258c <__flatbuffers_string_cmp>
    8cd0:	cmp	r0, #0
    8cd4:	bne	8ce4 <flatbuffers_string_vec_scan+0x70>
    8cd8:	ldr	r0, [sp, #4]
    8cdc:	str	r0, [fp, #-4]
    8ce0:	b	8d08 <flatbuffers_string_vec_scan+0x94>
    8ce4:	b	8ce8 <flatbuffers_string_vec_scan+0x74>
    8ce8:	ldr	r0, [sp, #4]
    8cec:	add	r0, r0, #1
    8cf0:	str	r0, [sp, #4]
    8cf4:	b	8c90 <flatbuffers_string_vec_scan+0x1c>
    8cf8:	movw	r0, #0
    8cfc:	movt	r0, #0
    8d00:	ldr	r0, [r0]
    8d04:	str	r0, [fp, #-4]
    8d08:	ldr	r0, [fp, #-4]
    8d0c:	mov	sp, fp
    8d10:	pop	{fp, pc}

00008d14 <flatbuffers_string_vec_scan_ex>:
    8d14:	push	{fp, lr}
    8d18:	mov	fp, sp
    8d1c:	sub	sp, sp, #40	; 0x28
    8d20:	str	r0, [fp, #-8]
    8d24:	str	r1, [fp, #-12]
    8d28:	str	r2, [fp, #-16]
    8d2c:	str	r3, [sp, #20]
    8d30:	ldr	r0, [fp, #-12]
    8d34:	str	r0, [sp, #12]
    8d38:	ldr	r0, [sp, #12]
    8d3c:	ldr	r1, [fp, #-16]
    8d40:	ldr	r2, [fp, #-8]
    8d44:	str	r0, [sp, #8]
    8d48:	mov	r0, r2
    8d4c:	str	r1, [sp, #4]
    8d50:	bl	4468 <flatbuffers_string_vec_len>
    8d54:	ldr	r1, [sp, #4]
    8d58:	cmp	r1, r0
    8d5c:	bcs	8d6c <flatbuffers_string_vec_scan_ex+0x58>
    8d60:	ldr	r0, [fp, #-16]
    8d64:	str	r0, [sp]
    8d68:	b	8d78 <flatbuffers_string_vec_scan_ex+0x64>
    8d6c:	ldr	r0, [fp, #-8]
    8d70:	bl	4468 <flatbuffers_string_vec_len>
    8d74:	str	r0, [sp]
    8d78:	ldr	r0, [sp]
    8d7c:	ldr	r1, [sp, #8]
    8d80:	cmp	r1, r0
    8d84:	bcs	8dd0 <flatbuffers_string_vec_scan_ex+0xbc>
    8d88:	ldr	r0, [fp, #-8]
    8d8c:	ldr	r1, [sp, #12]
    8d90:	bl	44b8 <flatbuffers_string_vec_at>
    8d94:	str	r0, [sp, #16]
    8d98:	ldr	r0, [sp, #16]
    8d9c:	ldr	r1, [sp, #20]
    8da0:	movw	r2, #0
    8da4:	bl	1258c <__flatbuffers_string_cmp>
    8da8:	cmp	r0, #0
    8dac:	bne	8dbc <flatbuffers_string_vec_scan_ex+0xa8>
    8db0:	ldr	r0, [sp, #12]
    8db4:	str	r0, [fp, #-4]
    8db8:	b	8de0 <flatbuffers_string_vec_scan_ex+0xcc>
    8dbc:	b	8dc0 <flatbuffers_string_vec_scan_ex+0xac>
    8dc0:	ldr	r0, [sp, #12]
    8dc4:	add	r0, r0, #1
    8dc8:	str	r0, [sp, #12]
    8dcc:	b	8d38 <flatbuffers_string_vec_scan_ex+0x24>
    8dd0:	movw	r0, #0
    8dd4:	movt	r0, #0
    8dd8:	ldr	r0, [r0]
    8ddc:	str	r0, [fp, #-4]
    8de0:	ldr	r0, [fp, #-4]
    8de4:	mov	sp, fp
    8de8:	pop	{fp, pc}

00008dec <flatbuffers_string_vec_scan_n>:
    8dec:	push	{fp, lr}
    8df0:	mov	fp, sp
    8df4:	sub	sp, sp, #32
    8df8:	str	r0, [fp, #-8]
    8dfc:	str	r1, [fp, #-12]
    8e00:	str	r2, [sp, #16]
    8e04:	movw	r0, #0
    8e08:	str	r0, [sp, #8]
    8e0c:	ldr	r0, [sp, #8]
    8e10:	ldr	r1, [fp, #-8]
    8e14:	str	r0, [sp, #4]
    8e18:	mov	r0, r1
    8e1c:	bl	4468 <flatbuffers_string_vec_len>
    8e20:	ldr	r1, [sp, #4]
    8e24:	cmp	r1, r0
    8e28:	bcs	8e74 <flatbuffers_string_vec_scan_n+0x88>
    8e2c:	ldr	r0, [fp, #-8]
    8e30:	ldr	r1, [sp, #8]
    8e34:	bl	44b8 <flatbuffers_string_vec_at>
    8e38:	str	r0, [sp, #12]
    8e3c:	ldr	r0, [sp, #12]
    8e40:	ldr	r1, [fp, #-12]
    8e44:	ldr	r2, [sp, #16]
    8e48:	bl	1249c <__flatbuffers_string_n_cmp>
    8e4c:	cmp	r0, #0
    8e50:	bne	8e60 <flatbuffers_string_vec_scan_n+0x74>
    8e54:	ldr	r0, [sp, #8]
    8e58:	str	r0, [fp, #-4]
    8e5c:	b	8e84 <flatbuffers_string_vec_scan_n+0x98>
    8e60:	b	8e64 <flatbuffers_string_vec_scan_n+0x78>
    8e64:	ldr	r0, [sp, #8]
    8e68:	add	r0, r0, #1
    8e6c:	str	r0, [sp, #8]
    8e70:	b	8e0c <flatbuffers_string_vec_scan_n+0x20>
    8e74:	movw	r0, #0
    8e78:	movt	r0, #0
    8e7c:	ldr	r0, [r0]
    8e80:	str	r0, [fp, #-4]
    8e84:	ldr	r0, [fp, #-4]
    8e88:	mov	sp, fp
    8e8c:	pop	{fp, pc}

00008e90 <flatbuffers_string_vec_scan_ex_n>:
    8e90:	push	{fp, lr}
    8e94:	mov	fp, sp
    8e98:	sub	sp, sp, #40	; 0x28
    8e9c:	ldr	ip, [fp, #8]
    8ea0:	str	r0, [fp, #-8]
    8ea4:	str	r1, [fp, #-12]
    8ea8:	str	r2, [fp, #-16]
    8eac:	str	r3, [sp, #20]
    8eb0:	ldr	r0, [fp, #-12]
    8eb4:	str	r0, [sp, #12]
    8eb8:	ldr	r0, [sp, #12]
    8ebc:	ldr	r1, [fp, #-16]
    8ec0:	ldr	r2, [fp, #-8]
    8ec4:	str	r0, [sp, #8]
    8ec8:	mov	r0, r2
    8ecc:	str	r1, [sp, #4]
    8ed0:	bl	4468 <flatbuffers_string_vec_len>
    8ed4:	ldr	r1, [sp, #4]
    8ed8:	cmp	r1, r0
    8edc:	bcs	8eec <flatbuffers_string_vec_scan_ex_n+0x5c>
    8ee0:	ldr	r0, [fp, #-16]
    8ee4:	str	r0, [sp]
    8ee8:	b	8ef8 <flatbuffers_string_vec_scan_ex_n+0x68>
    8eec:	ldr	r0, [fp, #-8]
    8ef0:	bl	4468 <flatbuffers_string_vec_len>
    8ef4:	str	r0, [sp]
    8ef8:	ldr	r0, [sp]
    8efc:	ldr	r1, [sp, #8]
    8f00:	cmp	r1, r0
    8f04:	bcs	8f50 <flatbuffers_string_vec_scan_ex_n+0xc0>
    8f08:	ldr	r0, [fp, #-8]
    8f0c:	ldr	r1, [sp, #12]
    8f10:	bl	44b8 <flatbuffers_string_vec_at>
    8f14:	str	r0, [sp, #16]
    8f18:	ldr	r0, [sp, #16]
    8f1c:	ldr	r1, [sp, #20]
    8f20:	ldr	r2, [fp, #8]
    8f24:	bl	1249c <__flatbuffers_string_n_cmp>
    8f28:	cmp	r0, #0
    8f2c:	bne	8f3c <flatbuffers_string_vec_scan_ex_n+0xac>
    8f30:	ldr	r0, [sp, #12]
    8f34:	str	r0, [fp, #-4]
    8f38:	b	8f60 <flatbuffers_string_vec_scan_ex_n+0xd0>
    8f3c:	b	8f40 <flatbuffers_string_vec_scan_ex_n+0xb0>
    8f40:	ldr	r0, [sp, #12]
    8f44:	add	r0, r0, #1
    8f48:	str	r0, [sp, #12]
    8f4c:	b	8eb8 <flatbuffers_string_vec_scan_ex_n+0x28>
    8f50:	movw	r0, #0
    8f54:	movt	r0, #0
    8f58:	ldr	r0, [r0]
    8f5c:	str	r0, [fp, #-4]
    8f60:	ldr	r0, [fp, #-4]
    8f64:	mov	sp, fp
    8f68:	pop	{fp, pc}

00008f6c <flatbuffers_string_vec_rscan>:
    8f6c:	push	{fp, lr}
    8f70:	mov	fp, sp
    8f74:	sub	sp, sp, #24
    8f78:	str	r0, [fp, #-8]
    8f7c:	str	r1, [sp, #12]
    8f80:	ldr	r0, [fp, #-8]
    8f84:	bl	4468 <flatbuffers_string_vec_len>
    8f88:	str	r0, [sp, #4]
    8f8c:	ldr	r0, [sp, #4]
    8f90:	mvn	r1, #0
    8f94:	add	r1, r0, r1
    8f98:	str	r1, [sp, #4]
    8f9c:	cmp	r0, #0
    8fa0:	bls	8fdc <flatbuffers_string_vec_rscan+0x70>
    8fa4:	ldr	r0, [fp, #-8]
    8fa8:	ldr	r1, [sp, #4]
    8fac:	bl	44b8 <flatbuffers_string_vec_at>
    8fb0:	str	r0, [sp, #8]
    8fb4:	ldr	r0, [sp, #8]
    8fb8:	ldr	r1, [sp, #12]
    8fbc:	movw	r2, #0
    8fc0:	bl	1258c <__flatbuffers_string_cmp>
    8fc4:	cmp	r0, #0
    8fc8:	bne	8fd8 <flatbuffers_string_vec_rscan+0x6c>
    8fcc:	ldr	r0, [sp, #4]
    8fd0:	str	r0, [fp, #-4]
    8fd4:	b	8fec <flatbuffers_string_vec_rscan+0x80>
    8fd8:	b	8f8c <flatbuffers_string_vec_rscan+0x20>
    8fdc:	movw	r0, #0
    8fe0:	movt	r0, #0
    8fe4:	ldr	r0, [r0]
    8fe8:	str	r0, [fp, #-4]
    8fec:	ldr	r0, [fp, #-4]
    8ff0:	mov	sp, fp
    8ff4:	pop	{fp, pc}

00008ff8 <flatbuffers_string_vec_rscan_ex>:
    8ff8:	push	{fp, lr}
    8ffc:	mov	fp, sp
    9000:	sub	sp, sp, #40	; 0x28
    9004:	str	r0, [fp, #-8]
    9008:	str	r1, [fp, #-12]
    900c:	str	r2, [fp, #-16]
    9010:	str	r3, [sp, #20]
    9014:	ldr	r0, [fp, #-16]
    9018:	ldr	r1, [fp, #-8]
    901c:	str	r0, [sp, #8]
    9020:	mov	r0, r1
    9024:	bl	4468 <flatbuffers_string_vec_len>
    9028:	ldr	r1, [sp, #8]
    902c:	cmp	r1, r0
    9030:	bcs	9040 <flatbuffers_string_vec_rscan_ex+0x48>
    9034:	ldr	r0, [fp, #-16]
    9038:	str	r0, [sp, #4]
    903c:	b	904c <flatbuffers_string_vec_rscan_ex+0x54>
    9040:	ldr	r0, [fp, #-8]
    9044:	bl	4468 <flatbuffers_string_vec_len>
    9048:	str	r0, [sp, #4]
    904c:	ldr	r0, [sp, #4]
    9050:	str	r0, [sp, #12]
    9054:	ldr	r0, [sp, #12]
    9058:	mvn	r1, #0
    905c:	add	r1, r0, r1
    9060:	str	r1, [sp, #12]
    9064:	ldr	r1, [fp, #-12]
    9068:	cmp	r0, r1
    906c:	bls	90a8 <flatbuffers_string_vec_rscan_ex+0xb0>
    9070:	ldr	r0, [fp, #-8]
    9074:	ldr	r1, [sp, #12]
    9078:	bl	44b8 <flatbuffers_string_vec_at>
    907c:	str	r0, [sp, #16]
    9080:	ldr	r0, [sp, #16]
    9084:	ldr	r1, [sp, #20]
    9088:	movw	r2, #0
    908c:	bl	1258c <__flatbuffers_string_cmp>
    9090:	cmp	r0, #0
    9094:	bne	90a4 <flatbuffers_string_vec_rscan_ex+0xac>
    9098:	ldr	r0, [sp, #12]
    909c:	str	r0, [fp, #-4]
    90a0:	b	90b8 <flatbuffers_string_vec_rscan_ex+0xc0>
    90a4:	b	9054 <flatbuffers_string_vec_rscan_ex+0x5c>
    90a8:	movw	r0, #0
    90ac:	movt	r0, #0
    90b0:	ldr	r0, [r0]
    90b4:	str	r0, [fp, #-4]
    90b8:	ldr	r0, [fp, #-4]
    90bc:	mov	sp, fp
    90c0:	pop	{fp, pc}

000090c4 <flatbuffers_string_vec_rscan_n>:
    90c4:	push	{fp, lr}
    90c8:	mov	fp, sp
    90cc:	sub	sp, sp, #24
    90d0:	str	r0, [fp, #-8]
    90d4:	str	r1, [sp, #12]
    90d8:	str	r2, [sp, #8]
    90dc:	ldr	r0, [fp, #-8]
    90e0:	bl	4468 <flatbuffers_string_vec_len>
    90e4:	str	r0, [sp]
    90e8:	ldr	r0, [sp]
    90ec:	mvn	r1, #0
    90f0:	add	r1, r0, r1
    90f4:	str	r1, [sp]
    90f8:	cmp	r0, #0
    90fc:	bls	9138 <flatbuffers_string_vec_rscan_n+0x74>
    9100:	ldr	r0, [fp, #-8]
    9104:	ldr	r1, [sp]
    9108:	bl	44b8 <flatbuffers_string_vec_at>
    910c:	str	r0, [sp, #4]
    9110:	ldr	r0, [sp, #4]
    9114:	ldr	r1, [sp, #12]
    9118:	ldr	r2, [sp, #8]
    911c:	bl	1249c <__flatbuffers_string_n_cmp>
    9120:	cmp	r0, #0
    9124:	bne	9134 <flatbuffers_string_vec_rscan_n+0x70>
    9128:	ldr	r0, [sp]
    912c:	str	r0, [fp, #-4]
    9130:	b	9148 <flatbuffers_string_vec_rscan_n+0x84>
    9134:	b	90e8 <flatbuffers_string_vec_rscan_n+0x24>
    9138:	movw	r0, #0
    913c:	movt	r0, #0
    9140:	ldr	r0, [r0]
    9144:	str	r0, [fp, #-4]
    9148:	ldr	r0, [fp, #-4]
    914c:	mov	sp, fp
    9150:	pop	{fp, pc}

00009154 <flatbuffers_string_vec_rscan_ex_n>:
    9154:	push	{fp, lr}
    9158:	mov	fp, sp
    915c:	sub	sp, sp, #40	; 0x28
    9160:	ldr	ip, [fp, #8]
    9164:	str	r0, [fp, #-8]
    9168:	str	r1, [fp, #-12]
    916c:	str	r2, [fp, #-16]
    9170:	str	r3, [sp, #20]
    9174:	ldr	r0, [fp, #-16]
    9178:	ldr	r1, [fp, #-8]
    917c:	str	r0, [sp, #8]
    9180:	mov	r0, r1
    9184:	str	ip, [sp, #4]
    9188:	bl	4468 <flatbuffers_string_vec_len>
    918c:	ldr	r1, [sp, #8]
    9190:	cmp	r1, r0
    9194:	bcs	91a4 <flatbuffers_string_vec_rscan_ex_n+0x50>
    9198:	ldr	r0, [fp, #-16]
    919c:	str	r0, [sp]
    91a0:	b	91b0 <flatbuffers_string_vec_rscan_ex_n+0x5c>
    91a4:	ldr	r0, [fp, #-8]
    91a8:	bl	4468 <flatbuffers_string_vec_len>
    91ac:	str	r0, [sp]
    91b0:	ldr	r0, [sp]
    91b4:	str	r0, [sp, #12]
    91b8:	ldr	r0, [sp, #12]
    91bc:	mvn	r1, #0
    91c0:	add	r1, r0, r1
    91c4:	str	r1, [sp, #12]
    91c8:	ldr	r1, [fp, #-12]
    91cc:	cmp	r0, r1
    91d0:	bls	920c <flatbuffers_string_vec_rscan_ex_n+0xb8>
    91d4:	ldr	r0, [fp, #-8]
    91d8:	ldr	r1, [sp, #12]
    91dc:	bl	44b8 <flatbuffers_string_vec_at>
    91e0:	str	r0, [sp, #16]
    91e4:	ldr	r0, [sp, #16]
    91e8:	ldr	r1, [sp, #20]
    91ec:	ldr	r2, [fp, #8]
    91f0:	bl	1249c <__flatbuffers_string_n_cmp>
    91f4:	cmp	r0, #0
    91f8:	bne	9208 <flatbuffers_string_vec_rscan_ex_n+0xb4>
    91fc:	ldr	r0, [sp, #12]
    9200:	str	r0, [fp, #-4]
    9204:	b	921c <flatbuffers_string_vec_rscan_ex_n+0xc8>
    9208:	b	91b8 <flatbuffers_string_vec_rscan_ex_n+0x64>
    920c:	movw	r0, #0
    9210:	movt	r0, #0
    9214:	ldr	r0, [r0]
    9218:	str	r0, [fp, #-4]
    921c:	ldr	r0, [fp, #-4]
    9220:	mov	sp, fp
    9224:	pop	{fp, pc}

00009228 <MyGame_Example_Monster_vec_scan_by_hp>:
    9228:	push	{fp, lr}
    922c:	mov	fp, sp
    9230:	sub	sp, sp, #24
    9234:	str	r0, [fp, #-8]
    9238:	strh	r1, [fp, #-10]
    923c:	movw	r0, #0
    9240:	str	r0, [sp, #8]
    9244:	ldr	r0, [sp, #8]
    9248:	ldr	r1, [fp, #-8]
    924c:	str	r0, [sp, #4]
    9250:	mov	r0, r1
    9254:	bl	4298 <MyGame_Example_Monster_vec_len>
    9258:	ldr	r1, [sp, #4]
    925c:	cmp	r1, r0
    9260:	bcs	92dc <MyGame_Example_Monster_vec_scan_by_hp+0xb4>
    9264:	ldr	r0, [fp, #-8]
    9268:	ldr	r1, [sp, #8]
    926c:	bl	42e8 <MyGame_Example_Monster_vec_at>
    9270:	bl	2d4 <MyGame_Example_Monster_hp>
    9274:	strh	r0, [sp, #12]
    9278:	ldrsh	r0, [sp, #12]
    927c:	ldrsh	r1, [fp, #-10]
    9280:	cmp	r0, r1
    9284:	bge	9294 <MyGame_Example_Monster_vec_scan_by_hp+0x6c>
    9288:	mvn	r0, #0
    928c:	str	r0, [sp]
    9290:	b	92b0 <MyGame_Example_Monster_vec_scan_by_hp+0x88>
    9294:	ldrsh	r0, [sp, #12]
    9298:	ldrsh	r1, [fp, #-10]
    929c:	cmp	r0, r1
    92a0:	movw	r0, #0
    92a4:	movgt	r0, #1
    92a8:	and	r0, r0, #1
    92ac:	str	r0, [sp]
    92b0:	ldr	r0, [sp]
    92b4:	cmp	r0, #0
    92b8:	bne	92c8 <MyGame_Example_Monster_vec_scan_by_hp+0xa0>
    92bc:	ldr	r0, [sp, #8]
    92c0:	str	r0, [fp, #-4]
    92c4:	b	92ec <MyGame_Example_Monster_vec_scan_by_hp+0xc4>
    92c8:	b	92cc <MyGame_Example_Monster_vec_scan_by_hp+0xa4>
    92cc:	ldr	r0, [sp, #8]
    92d0:	add	r0, r0, #1
    92d4:	str	r0, [sp, #8]
    92d8:	b	9244 <MyGame_Example_Monster_vec_scan_by_hp+0x1c>
    92dc:	movw	r0, #0
    92e0:	movt	r0, #0
    92e4:	ldr	r0, [r0]
    92e8:	str	r0, [fp, #-4]
    92ec:	ldr	r0, [fp, #-4]
    92f0:	mov	sp, fp
    92f4:	pop	{fp, pc}

000092f8 <MyGame_Example_Monster_vec_scan_ex_by_hp>:
    92f8:	push	{fp, lr}
    92fc:	mov	fp, sp
    9300:	sub	sp, sp, #40	; 0x28
    9304:	str	r0, [fp, #-8]
    9308:	str	r1, [fp, #-12]
    930c:	str	r2, [fp, #-16]
    9310:	strh	r3, [fp, #-18]	; 0xffffffee
    9314:	ldr	r0, [fp, #-12]
    9318:	str	r0, [sp, #16]
    931c:	ldr	r0, [sp, #16]
    9320:	ldr	r1, [fp, #-16]
    9324:	ldr	r2, [fp, #-8]
    9328:	str	r0, [sp, #12]
    932c:	mov	r0, r2
    9330:	str	r1, [sp, #8]
    9334:	bl	4298 <MyGame_Example_Monster_vec_len>
    9338:	ldr	r1, [sp, #8]
    933c:	cmp	r1, r0
    9340:	bcs	9350 <MyGame_Example_Monster_vec_scan_ex_by_hp+0x58>
    9344:	ldr	r0, [fp, #-16]
    9348:	str	r0, [sp, #4]
    934c:	b	935c <MyGame_Example_Monster_vec_scan_ex_by_hp+0x64>
    9350:	ldr	r0, [fp, #-8]
    9354:	bl	4298 <MyGame_Example_Monster_vec_len>
    9358:	str	r0, [sp, #4]
    935c:	ldr	r0, [sp, #4]
    9360:	ldr	r1, [sp, #12]
    9364:	cmp	r1, r0
    9368:	bcs	93e4 <MyGame_Example_Monster_vec_scan_ex_by_hp+0xec>
    936c:	ldr	r0, [fp, #-8]
    9370:	ldr	r1, [sp, #16]
    9374:	bl	42e8 <MyGame_Example_Monster_vec_at>
    9378:	bl	2d4 <MyGame_Example_Monster_hp>
    937c:	strh	r0, [sp, #20]
    9380:	ldrsh	r0, [sp, #20]
    9384:	ldrsh	r1, [fp, #-18]	; 0xffffffee
    9388:	cmp	r0, r1
    938c:	bge	939c <MyGame_Example_Monster_vec_scan_ex_by_hp+0xa4>
    9390:	mvn	r0, #0
    9394:	str	r0, [sp]
    9398:	b	93b8 <MyGame_Example_Monster_vec_scan_ex_by_hp+0xc0>
    939c:	ldrsh	r0, [sp, #20]
    93a0:	ldrsh	r1, [fp, #-18]	; 0xffffffee
    93a4:	cmp	r0, r1
    93a8:	movw	r0, #0
    93ac:	movgt	r0, #1
    93b0:	and	r0, r0, #1
    93b4:	str	r0, [sp]
    93b8:	ldr	r0, [sp]
    93bc:	cmp	r0, #0
    93c0:	bne	93d0 <MyGame_Example_Monster_vec_scan_ex_by_hp+0xd8>
    93c4:	ldr	r0, [sp, #16]
    93c8:	str	r0, [fp, #-4]
    93cc:	b	93f4 <MyGame_Example_Monster_vec_scan_ex_by_hp+0xfc>
    93d0:	b	93d4 <MyGame_Example_Monster_vec_scan_ex_by_hp+0xdc>
    93d4:	ldr	r0, [sp, #16]
    93d8:	add	r0, r0, #1
    93dc:	str	r0, [sp, #16]
    93e0:	b	931c <MyGame_Example_Monster_vec_scan_ex_by_hp+0x24>
    93e4:	movw	r0, #0
    93e8:	movt	r0, #0
    93ec:	ldr	r0, [r0]
    93f0:	str	r0, [fp, #-4]
    93f4:	ldr	r0, [fp, #-4]
    93f8:	mov	sp, fp
    93fc:	pop	{fp, pc}

00009400 <MyGame_Example_Monster_vec_rscan_by_hp>:
    9400:	push	{fp, lr}
    9404:	mov	fp, sp
    9408:	sub	sp, sp, #24
    940c:	str	r0, [fp, #-8]
    9410:	strh	r1, [fp, #-10]
    9414:	ldr	r0, [fp, #-8]
    9418:	bl	4298 <MyGame_Example_Monster_vec_len>
    941c:	str	r0, [sp, #8]
    9420:	ldr	r0, [sp, #8]
    9424:	mvn	r1, #0
    9428:	add	r1, r0, r1
    942c:	str	r1, [sp, #8]
    9430:	cmp	r0, #0
    9434:	bls	94a0 <MyGame_Example_Monster_vec_rscan_by_hp+0xa0>
    9438:	ldr	r0, [fp, #-8]
    943c:	ldr	r1, [sp, #8]
    9440:	bl	42e8 <MyGame_Example_Monster_vec_at>
    9444:	bl	2d4 <MyGame_Example_Monster_hp>
    9448:	strh	r0, [sp, #12]
    944c:	ldrsh	r0, [sp, #12]
    9450:	ldrsh	r1, [fp, #-10]
    9454:	cmp	r0, r1
    9458:	bge	9468 <MyGame_Example_Monster_vec_rscan_by_hp+0x68>
    945c:	mvn	r0, #0
    9460:	str	r0, [sp, #4]
    9464:	b	9484 <MyGame_Example_Monster_vec_rscan_by_hp+0x84>
    9468:	ldrsh	r0, [sp, #12]
    946c:	ldrsh	r1, [fp, #-10]
    9470:	cmp	r0, r1
    9474:	movw	r0, #0
    9478:	movgt	r0, #1
    947c:	and	r0, r0, #1
    9480:	str	r0, [sp, #4]
    9484:	ldr	r0, [sp, #4]
    9488:	cmp	r0, #0
    948c:	bne	949c <MyGame_Example_Monster_vec_rscan_by_hp+0x9c>
    9490:	ldr	r0, [sp, #8]
    9494:	str	r0, [fp, #-4]
    9498:	b	94b0 <MyGame_Example_Monster_vec_rscan_by_hp+0xb0>
    949c:	b	9420 <MyGame_Example_Monster_vec_rscan_by_hp+0x20>
    94a0:	movw	r0, #0
    94a4:	movt	r0, #0
    94a8:	ldr	r0, [r0]
    94ac:	str	r0, [fp, #-4]
    94b0:	ldr	r0, [fp, #-4]
    94b4:	mov	sp, fp
    94b8:	pop	{fp, pc}

000094bc <MyGame_Example_Monster_vec_rscan_ex_by_hp>:
    94bc:	push	{fp, lr}
    94c0:	mov	fp, sp
    94c4:	sub	sp, sp, #40	; 0x28
    94c8:	str	r0, [fp, #-8]
    94cc:	str	r1, [fp, #-12]
    94d0:	str	r2, [fp, #-16]
    94d4:	strh	r3, [fp, #-18]	; 0xffffffee
    94d8:	ldr	r0, [fp, #-16]
    94dc:	ldr	r1, [fp, #-8]
    94e0:	str	r0, [sp, #12]
    94e4:	mov	r0, r1
    94e8:	bl	4298 <MyGame_Example_Monster_vec_len>
    94ec:	ldr	r1, [sp, #12]
    94f0:	cmp	r1, r0
    94f4:	bcs	9504 <MyGame_Example_Monster_vec_rscan_ex_by_hp+0x48>
    94f8:	ldr	r0, [fp, #-16]
    94fc:	str	r0, [sp, #8]
    9500:	b	9510 <MyGame_Example_Monster_vec_rscan_ex_by_hp+0x54>
    9504:	ldr	r0, [fp, #-8]
    9508:	bl	4298 <MyGame_Example_Monster_vec_len>
    950c:	str	r0, [sp, #8]
    9510:	ldr	r0, [sp, #8]
    9514:	str	r0, [sp, #16]
    9518:	ldr	r0, [sp, #16]
    951c:	mvn	r1, #0
    9520:	add	r1, r0, r1
    9524:	str	r1, [sp, #16]
    9528:	ldr	r1, [fp, #-12]
    952c:	cmp	r0, r1
    9530:	bls	959c <MyGame_Example_Monster_vec_rscan_ex_by_hp+0xe0>
    9534:	ldr	r0, [fp, #-8]
    9538:	ldr	r1, [sp, #16]
    953c:	bl	42e8 <MyGame_Example_Monster_vec_at>
    9540:	bl	2d4 <MyGame_Example_Monster_hp>
    9544:	strh	r0, [sp, #20]
    9548:	ldrsh	r0, [sp, #20]
    954c:	ldrsh	r1, [fp, #-18]	; 0xffffffee
    9550:	cmp	r0, r1
    9554:	bge	9564 <MyGame_Example_Monster_vec_rscan_ex_by_hp+0xa8>
    9558:	mvn	r0, #0
    955c:	str	r0, [sp, #4]
    9560:	b	9580 <MyGame_Example_Monster_vec_rscan_ex_by_hp+0xc4>
    9564:	ldrsh	r0, [sp, #20]
    9568:	ldrsh	r1, [fp, #-18]	; 0xffffffee
    956c:	cmp	r0, r1
    9570:	movw	r0, #0
    9574:	movgt	r0, #1
    9578:	and	r0, r0, #1
    957c:	str	r0, [sp, #4]
    9580:	ldr	r0, [sp, #4]
    9584:	cmp	r0, #0
    9588:	bne	9598 <MyGame_Example_Monster_vec_rscan_ex_by_hp+0xdc>
    958c:	ldr	r0, [sp, #16]
    9590:	str	r0, [fp, #-4]
    9594:	b	95ac <MyGame_Example_Monster_vec_rscan_ex_by_hp+0xf0>
    9598:	b	9518 <MyGame_Example_Monster_vec_rscan_ex_by_hp+0x5c>
    959c:	movw	r0, #0
    95a0:	movt	r0, #0
    95a4:	ldr	r0, [r0]
    95a8:	str	r0, [fp, #-4]
    95ac:	ldr	r0, [fp, #-4]
    95b0:	mov	sp, fp
    95b4:	pop	{fp, pc}

000095b8 <test_basic_sort>:
    95b8:	push	{fp, lr}
    95bc:	mov	fp, sp
    95c0:	sub	sp, sp, #80	; 0x50
    95c4:	str	r0, [fp, #-8]
    95c8:	movw	r0, #0
    95cc:	movt	r0, #0
    95d0:	ldrb	r1, [r0]
    95d4:	strb	r1, [fp, #-35]	; 0xffffffdd
    95d8:	ldrb	r1, [r0, #1]
    95dc:	strb	r1, [fp, #-34]	; 0xffffffde
    95e0:	ldrb	r1, [r0, #2]
    95e4:	strb	r1, [fp, #-33]	; 0xffffffdf
    95e8:	ldrb	r1, [r0, #3]
    95ec:	strb	r1, [fp, #-32]	; 0xffffffe0
    95f0:	ldrb	r1, [r0, #4]
    95f4:	strb	r1, [fp, #-31]	; 0xffffffe1
    95f8:	ldrb	r1, [r0, #5]
    95fc:	strb	r1, [fp, #-30]	; 0xffffffe2
    9600:	ldrb	r0, [r0, #6]
    9604:	strb	r0, [fp, #-29]	; 0xffffffe3
    9608:	movw	r0, #0
    960c:	movt	r0, #0
    9610:	ldrb	r1, [r0]
    9614:	strb	r1, [sp, #38]	; 0x26
    9618:	ldrb	r1, [r0, #1]
    961c:	strb	r1, [sp, #39]	; 0x27
    9620:	ldrb	r1, [r0, #2]
    9624:	strb	r1, [sp, #40]	; 0x28
    9628:	ldrb	r1, [r0, #3]
    962c:	strb	r1, [sp, #41]	; 0x29
    9630:	ldrb	r1, [r0, #4]
    9634:	strb	r1, [sp, #42]	; 0x2a
    9638:	ldrb	r1, [r0, #5]
    963c:	strb	r1, [sp, #43]	; 0x2b
    9640:	ldrb	r0, [r0, #6]
    9644:	strb	r0, [sp, #44]	; 0x2c
    9648:	ldr	r0, [fp, #-8]
    964c:	bl	0 <flatcc_builder_reset>
    9650:	ldr	r1, [fp, #-8]
    9654:	str	r0, [sp, #32]
    9658:	mov	r0, r1
    965c:	bl	57c0 <MyGame_Example_Monster_start_as_root>
    9660:	ldr	r1, [fp, #-8]
    9664:	str	r0, [sp, #28]
    9668:	mov	r0, r1
    966c:	movw	r1, #0
    9670:	movt	r1, #0
    9674:	bl	1818 <MyGame_Example_Monster_name_create_str>
    9678:	sub	r1, fp, #35	; 0x23
    967c:	ldr	r2, [fp, #-8]
    9680:	str	r0, [sp, #24]
    9684:	mov	r0, r2
    9688:	movw	r2, #7
    968c:	bl	5954 <MyGame_Example_Monster_inventory_create>
    9690:	ldr	r1, [fp, #-8]
    9694:	str	r0, [sp, #20]
    9698:	mov	r0, r1
    969c:	bl	6360 <MyGame_Example_Monster_end_as_root>
    96a0:	ldr	r1, [fp, #-8]
    96a4:	str	r0, [sp, #16]
    96a8:	mov	r0, r1
    96ac:	sub	r1, fp, #28
    96b0:	bl	0 <flatcc_builder_get_direct_buffer>
    96b4:	str	r0, [fp, #-24]	; 0xffffffe8
    96b8:	ldr	r0, [fp, #-24]	; 0xffffffe8
    96bc:	bl	25c <MyGame_Example_Monster_as_root>
    96c0:	str	r0, [fp, #-12]
    96c4:	ldr	r0, [fp, #-12]
    96c8:	bl	3c18 <MyGame_Example_Monster_inventory>
    96cc:	str	r0, [fp, #-16]
    96d0:	ldr	r0, [fp, #-16]
    96d4:	str	r0, [fp, #-20]	; 0xffffffec
    96d8:	ldr	r0, [fp, #-20]	; 0xffffffec
    96dc:	bl	9804 <flatbuffers_uint8_vec_sort>
    96e0:	ldr	r0, [fp, #-16]
    96e4:	bl	3d14 <flatbuffers_uint8_vec_len>
    96e8:	cmp	r0, #7
    96ec:	bne	96f4 <test_basic_sort+0x13c>
    96f0:	b	9714 <test_basic_sort+0x15c>
    96f4:	movw	r0, #0
    96f8:	movt	r0, #0
    96fc:	movw	r1, #0
    9700:	movt	r1, #0
    9704:	movw	r2, #1552	; 0x610
    9708:	movw	r3, #0
    970c:	movt	r3, #0
    9710:	bl	0 <__assert_fail>
    9714:	movw	r0, #0
    9718:	strb	r0, [sp, #36]	; 0x24
    971c:	ldrb	r0, [sp, #36]	; 0x24
    9720:	ldr	r1, [fp, #-16]
    9724:	str	r0, [sp, #12]
    9728:	mov	r0, r1
    972c:	bl	3d14 <flatbuffers_uint8_vec_len>
    9730:	ldr	r1, [sp, #12]
    9734:	cmp	r1, r0
    9738:	bcs	97f0 <test_basic_sort+0x238>
    973c:	ldr	r0, [fp, #-16]
    9740:	ldrb	r1, [sp, #36]	; 0x24
    9744:	bl	3d34 <flatbuffers_uint8_vec_at>
    9748:	strb	r0, [sp, #37]	; 0x25
    974c:	ldrb	r0, [sp, #37]	; 0x25
    9750:	ldrb	r1, [sp, #36]	; 0x24
    9754:	add	r2, sp, #38	; 0x26
    9758:	add	r1, r2, r1
    975c:	ldrb	r1, [r1]
    9760:	cmp	r0, r1
    9764:	beq	9780 <test_basic_sort+0x1c8>
    9768:	movw	r0, #0
    976c:	movt	r0, #0
    9770:	bl	0 <printf>
    9774:	mvn	r1, #0
    9778:	str	r1, [fp, #-4]
    977c:	b	97f8 <test_basic_sort+0x240>
    9780:	ldr	r0, [fp, #-16]
    9784:	ldrb	r1, [sp, #37]	; 0x25
    9788:	bl	9824 <flatbuffers_uint8_vec_find>
    978c:	ldrb	r1, [sp, #36]	; 0x24
    9790:	cmp	r1, #3
    9794:	str	r0, [sp, #8]
    9798:	bne	97a8 <test_basic_sort+0x1f0>
    979c:	movw	r0, #2
    97a0:	str	r0, [sp, #4]
    97a4:	b	97b0 <test_basic_sort+0x1f8>
    97a8:	ldrb	r0, [sp, #36]	; 0x24
    97ac:	str	r0, [sp, #4]
    97b0:	ldr	r0, [sp, #4]
    97b4:	ldr	r1, [sp, #8]
    97b8:	cmp	r1, r0
    97bc:	beq	97d8 <test_basic_sort+0x220>
    97c0:	movw	r0, #0
    97c4:	movt	r0, #0
    97c8:	bl	0 <printf>
    97cc:	mvn	r1, #0
    97d0:	str	r1, [fp, #-4]
    97d4:	b	97f8 <test_basic_sort+0x240>
    97d8:	b	97dc <test_basic_sort+0x224>
    97dc:	ldrb	r0, [sp, #36]	; 0x24
    97e0:	movw	r1, #1
    97e4:	add	r0, r0, r1
    97e8:	strb	r0, [sp, #36]	; 0x24
    97ec:	b	971c <test_basic_sort+0x164>
    97f0:	movw	r0, #0
    97f4:	str	r0, [fp, #-4]
    97f8:	ldr	r0, [fp, #-4]
    97fc:	mov	sp, fp
    9800:	pop	{fp, pc}

00009804 <flatbuffers_uint8_vec_sort>:
    9804:	push	{fp, lr}
    9808:	mov	fp, sp
    980c:	sub	sp, sp, #8
    9810:	str	r0, [sp, #4]
    9814:	ldr	r0, [sp, #4]
    9818:	bl	12660 <__flatbuffers_uint8__heap_sort>
    981c:	mov	sp, fp
    9820:	pop	{fp, pc}

00009824 <flatbuffers_uint8_vec_find>:
    9824:	push	{fp, lr}
    9828:	mov	fp, sp
    982c:	sub	sp, sp, #32
    9830:	str	r0, [fp, #-8]
    9834:	strb	r1, [fp, #-9]
    9838:	movw	r0, #0
    983c:	str	r0, [sp, #16]
    9840:	ldr	r0, [fp, #-8]
    9844:	bl	3d14 <flatbuffers_uint8_vec_len>
    9848:	str	r0, [sp, #12]
    984c:	cmp	r0, #0
    9850:	bne	9868 <flatbuffers_uint8_vec_find+0x44>
    9854:	movw	r0, #0
    9858:	movt	r0, #0
    985c:	ldr	r0, [r0]
    9860:	str	r0, [fp, #-4]
    9864:	b	9998 <flatbuffers_uint8_vec_find+0x174>
    9868:	ldr	r0, [sp, #12]
    986c:	mvn	r1, #0
    9870:	add	r0, r0, r1
    9874:	str	r0, [sp, #12]
    9878:	ldr	r0, [sp, #16]
    987c:	ldr	r1, [sp, #12]
    9880:	cmp	r0, r1
    9884:	bcs	9914 <flatbuffers_uint8_vec_find+0xf0>
    9888:	ldr	r0, [sp, #16]
    988c:	ldr	r1, [sp, #12]
    9890:	ldr	r2, [sp, #16]
    9894:	sub	r1, r1, r2
    9898:	lsr	r1, r1, #1
    989c:	add	r0, r0, r1
    98a0:	str	r0, [sp, #8]
    98a4:	ldr	r0, [fp, #-8]
    98a8:	ldr	r1, [sp, #8]
    98ac:	bl	3d34 <flatbuffers_uint8_vec_at>
    98b0:	strb	r0, [fp, #-10]
    98b4:	ldrb	r0, [fp, #-10]
    98b8:	ldrb	r1, [fp, #-9]
    98bc:	cmp	r0, r1
    98c0:	bge	98d0 <flatbuffers_uint8_vec_find+0xac>
    98c4:	mvn	r0, #0
    98c8:	str	r0, [sp, #4]
    98cc:	b	98ec <flatbuffers_uint8_vec_find+0xc8>
    98d0:	ldrb	r0, [fp, #-10]
    98d4:	ldrb	r1, [fp, #-9]
    98d8:	cmp	r0, r1
    98dc:	movw	r0, #0
    98e0:	movgt	r0, #1
    98e4:	and	r0, r0, #1
    98e8:	str	r0, [sp, #4]
    98ec:	ldr	r0, [sp, #4]
    98f0:	cmp	r0, #0
    98f4:	bge	9908 <flatbuffers_uint8_vec_find+0xe4>
    98f8:	ldr	r0, [sp, #8]
    98fc:	add	r0, r0, #1
    9900:	str	r0, [sp, #16]
    9904:	b	9910 <flatbuffers_uint8_vec_find+0xec>
    9908:	ldr	r0, [sp, #8]
    990c:	str	r0, [sp, #12]
    9910:	b	9878 <flatbuffers_uint8_vec_find+0x54>
    9914:	ldr	r0, [sp, #16]
    9918:	ldr	r1, [sp, #12]
    991c:	cmp	r0, r1
    9920:	bne	9988 <flatbuffers_uint8_vec_find+0x164>
    9924:	ldr	r0, [fp, #-8]
    9928:	ldr	r1, [sp, #16]
    992c:	bl	3d34 <flatbuffers_uint8_vec_at>
    9930:	strb	r0, [fp, #-10]
    9934:	ldrb	r0, [fp, #-10]
    9938:	ldrb	r1, [fp, #-9]
    993c:	cmp	r0, r1
    9940:	bge	9950 <flatbuffers_uint8_vec_find+0x12c>
    9944:	mvn	r0, #0
    9948:	str	r0, [sp]
    994c:	b	996c <flatbuffers_uint8_vec_find+0x148>
    9950:	ldrb	r0, [fp, #-10]
    9954:	ldrb	r1, [fp, #-9]
    9958:	cmp	r0, r1
    995c:	movw	r0, #0
    9960:	movgt	r0, #1
    9964:	and	r0, r0, #1
    9968:	str	r0, [sp]
    996c:	ldr	r0, [sp]
    9970:	cmp	r0, #0
    9974:	bne	9984 <flatbuffers_uint8_vec_find+0x160>
    9978:	ldr	r0, [sp, #16]
    997c:	str	r0, [fp, #-4]
    9980:	b	9998 <flatbuffers_uint8_vec_find+0x174>
    9984:	b	9988 <flatbuffers_uint8_vec_find+0x164>
    9988:	movw	r0, #0
    998c:	movt	r0, #0
    9990:	ldr	r0, [r0]
    9994:	str	r0, [fp, #-4]
    9998:	ldr	r0, [fp, #-4]
    999c:	mov	sp, fp
    99a0:	pop	{fp, pc}

000099a4 <test_clone_slice>:
    99a4:	push	{fp, lr}
    99a8:	mov	fp, sp
    99ac:	sub	sp, sp, #192	; 0xc0
    99b0:	str	r0, [fp, #-4]
    99b4:	mvn	r0, #0
    99b8:	str	r0, [fp, #-56]	; 0xffffffc8
    99bc:	movw	r0, #0
    99c0:	movt	r0, #0
    99c4:	ldrb	r1, [r0]
    99c8:	strb	r1, [fp, #-63]	; 0xffffffc1
    99cc:	ldrb	r1, [r0, #1]
    99d0:	strb	r1, [fp, #-62]	; 0xffffffc2
    99d4:	ldrb	r1, [r0, #2]
    99d8:	strb	r1, [fp, #-61]	; 0xffffffc3
    99dc:	ldrb	r1, [r0, #3]
    99e0:	strb	r1, [fp, #-60]	; 0xffffffc4
    99e4:	ldrb	r1, [r0, #4]
    99e8:	strb	r1, [fp, #-59]	; 0xffffffc5
    99ec:	ldrb	r1, [r0, #5]
    99f0:	strb	r1, [fp, #-58]	; 0xffffffc6
    99f4:	ldrb	r0, [r0, #6]
    99f8:	strb	r0, [fp, #-57]	; 0xffffffc7
    99fc:	ldr	r0, [fp, #-4]
    9a00:	bl	0 <flatcc_builder_reset>
    9a04:	ldr	r1, [fp, #-4]
    9a08:	str	r0, [fp, #-76]	; 0xffffffb4
    9a0c:	mov	r0, r1
    9a10:	bl	57c0 <MyGame_Example_Monster_start_as_root>
    9a14:	ldr	r1, [fp, #-4]
    9a18:	str	r0, [fp, #-80]	; 0xffffffb0
    9a1c:	mov	r0, r1
    9a20:	movw	r1, #0
    9a24:	movt	r1, #0
    9a28:	bl	1818 <MyGame_Example_Monster_name_create_str>
    9a2c:	sub	r1, fp, #63	; 0x3f
    9a30:	ldr	r2, [fp, #-4]
    9a34:	str	r0, [fp, #-84]	; 0xffffffac
    9a38:	mov	r0, r2
    9a3c:	movw	r2, #7
    9a40:	bl	a178 <MyGame_Example_Monster_testarrayofbools_create>
    9a44:	ldr	r1, [fp, #-4]
    9a48:	str	r0, [fp, #-88]	; 0xffffffa8
    9a4c:	mov	r0, r1
    9a50:	bl	59ac <MyGame_Example_Monster_test4_start>
    9a54:	ldr	r1, [fp, #-4]
    9a58:	str	r0, [fp, #-92]	; 0xffffffa4
    9a5c:	mov	r0, r1
    9a60:	movw	r1, #2
    9a64:	bl	59cc <MyGame_Example_Monster_test4_extend>
    9a68:	str	r0, [fp, #-32]	; 0xffffffe0
    9a6c:	ldr	r0, [fp, #-32]	; 0xffffffe0
    9a70:	movw	r1, #22
    9a74:	strh	r1, [r0]
    9a78:	ldr	r0, [fp, #-32]	; 0xffffffe0
    9a7c:	movw	r1, #44	; 0x2c
    9a80:	strh	r1, [r0, #4]
    9a84:	ldr	r0, [fp, #-4]
    9a88:	bl	5bc4 <MyGame_Example_Monster_test4_end>
    9a8c:	ldr	r1, [fp, #-4]
    9a90:	str	r0, [sp, #96]	; 0x60
    9a94:	mov	r0, r1
    9a98:	bl	5890 <MyGame_Example_Monster_pos_start>
    9a9c:	vldr	s0, [pc, #1008]	; 9e94 <test_clone_slice+0x4f0>
    9aa0:	vstr	s0, [r0]
    9aa4:	ldr	r0, [fp, #-4]
    9aa8:	bl	6360 <MyGame_Example_Monster_end_as_root>
    9aac:	ldr	r1, [fp, #-4]
    9ab0:	str	r0, [sp, #92]	; 0x5c
    9ab4:	mov	r0, r1
    9ab8:	sub	r1, fp, #52	; 0x34
    9abc:	bl	0 <flatcc_builder_finalize_aligned_buffer>
    9ac0:	str	r0, [fp, #-44]	; 0xffffffd4
    9ac4:	ldr	r1, [fp, #-44]	; 0xffffffd4
    9ac8:	ldr	r2, [fp, #-52]	; 0xffffffcc
    9acc:	movw	r0, #0
    9ad0:	movt	r0, #0
    9ad4:	ldr	r3, [r0]
    9ad8:	movw	r0, #0
    9adc:	movt	r0, #0
    9ae0:	bl	adc <hexdump>
    9ae4:	ldr	r0, [fp, #-44]	; 0xffffffd4
    9ae8:	bl	25c <MyGame_Example_Monster_as_root>
    9aec:	str	r0, [fp, #-8]
    9af0:	ldr	r0, [fp, #-4]
    9af4:	bl	0 <flatcc_builder_reset>
    9af8:	ldr	r1, [fp, #-4]
    9afc:	str	r0, [sp, #88]	; 0x58
    9b00:	mov	r0, r1
    9b04:	bl	57c0 <MyGame_Example_Monster_start_as_root>
    9b08:	ldr	r1, [fp, #-8]
    9b0c:	str	r0, [sp, #84]	; 0x54
    9b10:	mov	r0, r1
    9b14:	bl	3850 <MyGame_Example_Monster_name>
    9b18:	str	r0, [fp, #-24]	; 0xffffffe8
    9b1c:	ldr	r0, [fp, #-24]	; 0xffffffe8
    9b20:	movw	r1, #0
    9b24:	cmp	r0, r1
    9b28:	beq	9b30 <test_clone_slice+0x18c>
    9b2c:	b	9b50 <test_clone_slice+0x1ac>
    9b30:	movw	r0, #0
    9b34:	movt	r0, #0
    9b38:	movw	r1, #0
    9b3c:	movt	r1, #0
    9b40:	movw	r2, #1604	; 0x644
    9b44:	movw	r3, #0
    9b48:	movt	r3, #0
    9b4c:	bl	0 <__assert_fail>
    9b50:	ldr	r0, [fp, #-8]
    9b54:	bl	4600 <MyGame_Example_Monster_testarrayofbools>
    9b58:	str	r0, [fp, #-20]	; 0xffffffec
    9b5c:	ldr	r0, [fp, #-20]	; 0xffffffec
    9b60:	movw	r1, #0
    9b64:	cmp	r0, r1
    9b68:	beq	9b70 <test_clone_slice+0x1cc>
    9b6c:	b	9b90 <test_clone_slice+0x1ec>
    9b70:	movw	r0, #0
    9b74:	movt	r0, #0
    9b78:	movw	r1, #0
    9b7c:	movt	r1, #0
    9b80:	movw	r2, #1606	; 0x646
    9b84:	movw	r3, #0
    9b88:	movt	r3, #0
    9b8c:	bl	0 <__assert_fail>
    9b90:	ldr	r0, [fp, #-8]
    9b94:	bl	3f48 <MyGame_Example_Monster_test4>
    9b98:	str	r0, [fp, #-36]	; 0xffffffdc
    9b9c:	ldr	r0, [fp, #-36]	; 0xffffffdc
    9ba0:	movw	r1, #0
    9ba4:	cmp	r0, r1
    9ba8:	beq	9bb0 <test_clone_slice+0x20c>
    9bac:	b	9bd0 <test_clone_slice+0x22c>
    9bb0:	movw	r0, #0
    9bb4:	movt	r0, #0
    9bb8:	movw	r1, #0
    9bbc:	movt	r1, #0
    9bc0:	movw	r2, #1608	; 0x648
    9bc4:	movw	r3, #0
    9bc8:	movt	r3, #0
    9bcc:	bl	0 <__assert_fail>
    9bd0:	ldr	r0, [fp, #-4]
    9bd4:	ldr	r1, [fp, #-24]	; 0xffffffe8
    9bd8:	bl	a1d0 <MyGame_Example_Monster_name_clone>
    9bdc:	ldr	r1, [fp, #-4]
    9be0:	str	r0, [sp, #80]	; 0x50
    9be4:	mov	r0, r1
    9be8:	bl	81c4 <MyGame_Example_Monster_testarrayofstring_start>
    9bec:	ldr	r1, [fp, #-4]
    9bf0:	ldr	r2, [fp, #-24]	; 0xffffffe8
    9bf4:	str	r0, [sp, #76]	; 0x4c
    9bf8:	mov	r0, r1
    9bfc:	mov	r1, r2
    9c00:	bl	a21c <MyGame_Example_Monster_testarrayofstring_push_clone>
    9c04:	ldr	r1, [fp, #-4]
    9c08:	ldr	r2, [fp, #-24]	; 0xffffffe8
    9c0c:	mov	r3, #4
    9c10:	mov	ip, #20
    9c14:	str	r0, [sp, #72]	; 0x48
    9c18:	mov	r0, r1
    9c1c:	mov	r1, r2
    9c20:	mov	r2, r3
    9c24:	mov	r3, ip
    9c28:	str	ip, [sp, #68]	; 0x44
    9c2c:	bl	a268 <MyGame_Example_Monster_testarrayofstring_push_slice>
    9c30:	ldr	r1, [fp, #-4]
    9c34:	ldr	r2, [fp, #-24]	; 0xffffffe8
    9c38:	mov	r3, #0
    9c3c:	mov	ip, #3
    9c40:	str	r0, [sp, #64]	; 0x40
    9c44:	mov	r0, r1
    9c48:	mov	r1, r2
    9c4c:	mov	r2, r3
    9c50:	mov	r3, ip
    9c54:	bl	a268 <MyGame_Example_Monster_testarrayofstring_push_slice>
    9c58:	ldr	r1, [fp, #-4]
    9c5c:	str	r0, [sp, #60]	; 0x3c
    9c60:	mov	r0, r1
    9c64:	bl	81e4 <MyGame_Example_Monster_testarrayofstring_end>
    9c68:	ldr	r1, [fp, #-4]
    9c6c:	str	r0, [sp, #56]	; 0x38
    9c70:	mov	r0, r1
    9c74:	bl	17f4 <MyGame_Example_Monster_start>
    9c78:	ldr	r1, [fp, #-4]
    9c7c:	ldr	r2, [fp, #-24]	; 0xffffffe8
    9c80:	mov	r3, #2
    9c84:	str	r0, [sp, #52]	; 0x34
    9c88:	mov	r0, r1
    9c8c:	mov	r1, r2
    9c90:	mov	r2, r3
    9c94:	ldr	ip, [sp, #68]	; 0x44
    9c98:	str	r3, [sp, #48]	; 0x30
    9c9c:	mov	r3, ip
    9ca0:	bl	a2cc <MyGame_Example_Monster_name_slice>
    9ca4:	ldr	r1, [fp, #-4]
    9ca8:	ldr	r2, [fp, #-20]	; 0xffffffec
    9cac:	str	r0, [sp, #44]	; 0x2c
    9cb0:	mov	r0, r1
    9cb4:	mov	r1, r2
    9cb8:	bl	a330 <MyGame_Example_Monster_testarrayofbools_clone>
    9cbc:	ldr	r1, [fp, #-4]
    9cc0:	ldr	r2, [fp, #-36]	; 0xffffffdc
    9cc4:	mov	r3, #1
    9cc8:	str	r0, [sp, #40]	; 0x28
    9ccc:	mov	r0, r1
    9cd0:	mov	r1, r2
    9cd4:	mov	r2, r3
    9cd8:	ldr	r3, [sp, #48]	; 0x30
    9cdc:	bl	a37c <MyGame_Example_Monster_test4_slice>
    9ce0:	ldr	r1, [fp, #-4]
    9ce4:	str	r0, [sp, #36]	; 0x24
    9ce8:	mov	r0, r1
    9cec:	bl	1864 <MyGame_Example_Monster_end>
    9cf0:	str	r0, [fp, #-28]	; 0xffffffe4
    9cf4:	ldr	r0, [fp, #-4]
    9cf8:	ldr	r1, [fp, #-28]	; 0xffffffe4
    9cfc:	sub	r2, fp, #72	; 0x48
    9d00:	str	r0, [sp, #32]
    9d04:	mov	r0, r2
    9d08:	bl	604c <MyGame_Example_Any_as_Monster>
    9d0c:	ldr	r1, [fp, #-72]	; 0xffffffb8
    9d10:	ldr	r2, [fp, #-68]	; 0xffffffbc
    9d14:	ldr	r0, [sp, #32]
    9d18:	bl	5f88 <MyGame_Example_Monster_test_add>
    9d1c:	ldr	r1, [fp, #-4]
    9d20:	ldr	r2, [fp, #-20]	; 0xffffffec
    9d24:	str	r0, [sp, #28]
    9d28:	mov	r0, r1
    9d2c:	mov	r1, r2
    9d30:	movw	r2, #3
    9d34:	mvn	r3, #0
    9d38:	bl	a3e0 <MyGame_Example_Monster_testarrayofbools_slice>
    9d3c:	ldr	r1, [fp, #-4]
    9d40:	ldr	r2, [fp, #-8]
    9d44:	str	r0, [sp, #24]
    9d48:	mov	r0, r2
    9d4c:	str	r1, [sp, #20]
    9d50:	bl	53c <MyGame_Example_Monster_pos>
    9d54:	ldr	r1, [sp, #20]
    9d58:	str	r0, [sp, #16]
    9d5c:	mov	r0, r1
    9d60:	ldr	r1, [sp, #16]
    9d64:	bl	a444 <MyGame_Example_Monster_pos_clone>
    9d68:	ldr	r1, [fp, #-4]
    9d6c:	ldr	r2, [fp, #-36]	; 0xffffffdc
    9d70:	str	r0, [sp, #12]
    9d74:	mov	r0, r1
    9d78:	mov	r1, r2
    9d7c:	bl	a4a8 <MyGame_Example_Monster_test4_clone>
    9d80:	ldr	r1, [fp, #-4]
    9d84:	str	r0, [sp, #8]
    9d88:	mov	r0, r1
    9d8c:	bl	6360 <MyGame_Example_Monster_end_as_root>
    9d90:	ldr	r1, [fp, #-4]
    9d94:	str	r0, [sp, #4]
    9d98:	mov	r0, r1
    9d9c:	sub	r1, fp, #52	; 0x34
    9da0:	bl	0 <flatcc_builder_get_direct_buffer>
    9da4:	str	r0, [fp, #-48]	; 0xffffffd0
    9da8:	ldr	r1, [fp, #-48]	; 0xffffffd0
    9dac:	ldr	r2, [fp, #-52]	; 0xffffffcc
    9db0:	movw	r0, #0
    9db4:	movt	r0, #0
    9db8:	ldr	r3, [r0]
    9dbc:	movw	r0, #0
    9dc0:	movt	r0, #0
    9dc4:	bl	adc <hexdump>
    9dc8:	ldr	r0, [fp, #-48]	; 0xffffffd0
    9dcc:	bl	25c <MyGame_Example_Monster_as_root>
    9dd0:	str	r0, [fp, #-12]
    9dd4:	ldr	r0, [fp, #-12]
    9dd8:	bl	3850 <MyGame_Example_Monster_name>
    9ddc:	movw	r1, #0
    9de0:	movt	r1, #0
    9de4:	bl	0 <strcmp>
    9de8:	cmp	r0, #0
    9dec:	beq	9e00 <test_clone_slice+0x45c>
    9df0:	movw	r0, #0
    9df4:	movt	r0, #0
    9df8:	bl	0 <printf>
    9dfc:	b	a160 <test_clone_slice+0x7bc>
    9e00:	ldr	r0, [fp, #-12]
    9e04:	bl	436c <MyGame_Example_Monster_testarrayofstring>
    9e08:	str	r0, [fp, #-16]
    9e0c:	ldr	r0, [fp, #-16]
    9e10:	movw	r1, #0
    9e14:	bl	44b8 <flatbuffers_string_vec_at>
    9e18:	movw	r1, #0
    9e1c:	movt	r1, #0
    9e20:	bl	0 <strcmp>
    9e24:	cmp	r0, #0
    9e28:	beq	9e3c <test_clone_slice+0x498>
    9e2c:	movw	r0, #0
    9e30:	movt	r0, #0
    9e34:	bl	0 <printf>
    9e38:	b	a160 <test_clone_slice+0x7bc>
    9e3c:	ldr	r0, [fp, #-16]
    9e40:	movw	r1, #1
    9e44:	bl	44b8 <flatbuffers_string_vec_at>
    9e48:	bl	3958 <flatbuffers_string_len>
    9e4c:	cmp	r0, #6
    9e50:	beq	9e64 <test_clone_slice+0x4c0>
    9e54:	movw	r0, #0
    9e58:	movt	r0, #0
    9e5c:	bl	0 <printf>
    9e60:	b	a160 <test_clone_slice+0x7bc>
    9e64:	ldr	r0, [fp, #-16]
    9e68:	movw	r1, #1
    9e6c:	bl	44b8 <flatbuffers_string_vec_at>
    9e70:	movw	r1, #0
    9e74:	movt	r1, #0
    9e78:	bl	0 <strcmp>
    9e7c:	cmp	r0, #0
    9e80:	beq	9e98 <test_clone_slice+0x4f4>
    9e84:	movw	r0, #0
    9e88:	movt	r0, #0
    9e8c:	bl	0 <printf>
    9e90:	b	a160 <test_clone_slice+0x7bc>
    9e94:	.word	0xc2293333
    9e98:	ldr	r0, [fp, #-16]
    9e9c:	movw	r1, #2
    9ea0:	bl	44b8 <flatbuffers_string_vec_at>
    9ea4:	bl	3958 <flatbuffers_string_len>
    9ea8:	cmp	r0, #3
    9eac:	beq	9ec0 <test_clone_slice+0x51c>
    9eb0:	movw	r0, #0
    9eb4:	movt	r0, #0
    9eb8:	bl	0 <printf>
    9ebc:	b	a160 <test_clone_slice+0x7bc>
    9ec0:	ldr	r0, [fp, #-16]
    9ec4:	movw	r1, #2
    9ec8:	bl	44b8 <flatbuffers_string_vec_at>
    9ecc:	movw	r1, #0
    9ed0:	movt	r1, #0
    9ed4:	bl	0 <strcmp>
    9ed8:	cmp	r0, #0
    9edc:	beq	9ef0 <test_clone_slice+0x54c>
    9ee0:	movw	r0, #0
    9ee4:	movt	r0, #0
    9ee8:	bl	0 <printf>
    9eec:	b	a160 <test_clone_slice+0x7bc>
    9ef0:	ldr	r0, [fp, #-12]
    9ef4:	bl	4870 <MyGame_Example_Monster_test>
    9ef8:	str	r0, [fp, #-8]
    9efc:	ldr	r0, [fp, #-8]
    9f00:	movw	r1, #0
    9f04:	cmp	r0, r1
    9f08:	beq	9f10 <test_clone_slice+0x56c>
    9f0c:	b	9f30 <test_clone_slice+0x58c>
    9f10:	movw	r0, #0
    9f14:	movt	r0, #0
    9f18:	movw	r1, #0
    9f1c:	movt	r1, #0
    9f20:	movw	r2, #1664	; 0x680
    9f24:	movw	r3, #0
    9f28:	movt	r3, #0
    9f2c:	bl	0 <__assert_fail>
    9f30:	ldr	r0, [fp, #-8]
    9f34:	bl	3850 <MyGame_Example_Monster_name>
    9f38:	movw	r1, #0
    9f3c:	movt	r1, #0
    9f40:	bl	0 <strcmp>
    9f44:	cmp	r0, #0
    9f48:	beq	9f5c <test_clone_slice+0x5b8>
    9f4c:	movw	r0, #0
    9f50:	movt	r0, #0
    9f54:	bl	0 <printf>
    9f58:	b	a160 <test_clone_slice+0x7bc>
    9f5c:	ldr	r0, [fp, #-8]
    9f60:	bl	4600 <MyGame_Example_Monster_testarrayofbools>
    9f64:	str	r0, [fp, #-20]	; 0xffffffec
    9f68:	ldr	r0, [fp, #-20]	; 0xffffffec
    9f6c:	bl	46fc <flatbuffers_bool_vec_len>
    9f70:	cmp	r0, #7
    9f74:	beq	9f88 <test_clone_slice+0x5e4>
    9f78:	movw	r0, #0
    9f7c:	movt	r0, #0
    9f80:	bl	0 <printf>
    9f84:	b	a160 <test_clone_slice+0x7bc>
    9f88:	sub	r1, fp, #63	; 0x3f
    9f8c:	ldr	r0, [fp, #-20]	; 0xffffffec
    9f90:	mov	r2, #7
    9f94:	bl	0 <memcmp>
    9f98:	cmp	r0, #0
    9f9c:	beq	9fb0 <test_clone_slice+0x60c>
    9fa0:	movw	r0, #0
    9fa4:	movt	r0, #0
    9fa8:	bl	0 <printf>
    9fac:	b	a160 <test_clone_slice+0x7bc>
    9fb0:	ldr	r0, [fp, #-12]
    9fb4:	bl	4600 <MyGame_Example_Monster_testarrayofbools>
    9fb8:	str	r0, [fp, #-20]	; 0xffffffec
    9fbc:	ldr	r0, [fp, #-20]	; 0xffffffec
    9fc0:	bl	46fc <flatbuffers_bool_vec_len>
    9fc4:	cmp	r0, #4
    9fc8:	beq	9fdc <test_clone_slice+0x638>
    9fcc:	movw	r0, #0
    9fd0:	movt	r0, #0
    9fd4:	bl	0 <printf>
    9fd8:	b	a160 <test_clone_slice+0x7bc>
    9fdc:	sub	r0, fp, #63	; 0x3f
    9fe0:	ldr	r1, [fp, #-20]	; 0xffffffec
    9fe4:	add	r0, r0, #3
    9fe8:	ldr	r0, [r0]
    9fec:	ldr	r1, [r1]
    9ff0:	subs	r0, r1, r0
    9ff4:	movwne	r0, #1
    9ff8:	cmp	r0, #0
    9ffc:	beq	a010 <test_clone_slice+0x66c>
    a000:	movw	r0, #0
    a004:	movt	r0, #0
    a008:	bl	0 <printf>
    a00c:	b	a160 <test_clone_slice+0x7bc>
    a010:	ldr	r0, [fp, #-12]
    a014:	bl	53c <MyGame_Example_Monster_pos>
    a018:	vldr	s0, [pc, #340]	; a174 <test_clone_slice+0x7d0>
    a01c:	vldr	s2, [r0]
    a020:	vcmp.f32	s2, s0
    a024:	vmrs	APSR_nzcv, fpscr
    a028:	beq	a03c <test_clone_slice+0x698>
    a02c:	movw	r0, #0
    a030:	movt	r0, #0
    a034:	bl	0 <printf>
    a038:	b	a160 <test_clone_slice+0x7bc>
    a03c:	ldr	r0, [fp, #-12]
    a040:	bl	3f48 <MyGame_Example_Monster_test4>
    a044:	str	r0, [fp, #-36]	; 0xffffffdc
    a048:	ldr	r0, [fp, #-36]	; 0xffffffdc
    a04c:	bl	4044 <MyGame_Example_Test_vec_len>
    a050:	cmp	r0, #2
    a054:	beq	a068 <test_clone_slice+0x6c4>
    a058:	movw	r0, #0
    a05c:	movt	r0, #0
    a060:	bl	0 <printf>
    a064:	b	a160 <test_clone_slice+0x7bc>
    a068:	ldr	r0, [fp, #-36]	; 0xffffffdc
    a06c:	movw	r1, #0
    a070:	bl	4094 <MyGame_Example_Test_vec_at>
    a074:	str	r0, [fp, #-40]	; 0xffffffd8
    a078:	ldr	r0, [fp, #-40]	; 0xffffffd8
    a07c:	bl	40f8 <MyGame_Example_Test_a>
    a080:	sxth	r0, r0
    a084:	cmp	r0, #22
    a088:	beq	a09c <test_clone_slice+0x6f8>
    a08c:	movw	r0, #0
    a090:	movt	r0, #0
    a094:	bl	0 <printf>
    a098:	b	a160 <test_clone_slice+0x7bc>
    a09c:	ldr	r0, [fp, #-36]	; 0xffffffdc
    a0a0:	movw	r1, #0
    a0a4:	bl	4094 <MyGame_Example_Test_vec_at>
    a0a8:	ldrsh	r0, [r0]
    a0ac:	cmp	r0, #22
    a0b0:	beq	a0c4 <test_clone_slice+0x720>
    a0b4:	movw	r0, #0
    a0b8:	movt	r0, #0
    a0bc:	bl	0 <printf>
    a0c0:	b	a160 <test_clone_slice+0x7bc>
    a0c4:	ldr	r0, [fp, #-36]	; 0xffffffdc
    a0c8:	movw	r1, #1
    a0cc:	bl	4094 <MyGame_Example_Test_vec_at>
    a0d0:	str	r0, [fp, #-40]	; 0xffffffd8
    a0d4:	ldr	r0, [fp, #-40]	; 0xffffffd8
    a0d8:	bl	40f8 <MyGame_Example_Test_a>
    a0dc:	sxth	r0, r0
    a0e0:	cmp	r0, #44	; 0x2c
    a0e4:	beq	a0f8 <test_clone_slice+0x754>
    a0e8:	movw	r0, #0
    a0ec:	movt	r0, #0
    a0f0:	bl	0 <printf>
    a0f4:	b	a160 <test_clone_slice+0x7bc>
    a0f8:	ldr	r0, [fp, #-8]
    a0fc:	bl	3f48 <MyGame_Example_Monster_test4>
    a100:	str	r0, [fp, #-36]	; 0xffffffdc
    a104:	ldr	r0, [fp, #-36]	; 0xffffffdc
    a108:	bl	4044 <MyGame_Example_Test_vec_len>
    a10c:	cmp	r0, #1
    a110:	beq	a124 <test_clone_slice+0x780>
    a114:	movw	r0, #0
    a118:	movt	r0, #0
    a11c:	bl	0 <printf>
    a120:	b	a160 <test_clone_slice+0x7bc>
    a124:	ldr	r0, [fp, #-36]	; 0xffffffdc
    a128:	movw	r1, #0
    a12c:	bl	4094 <MyGame_Example_Test_vec_at>
    a130:	str	r0, [fp, #-40]	; 0xffffffd8
    a134:	ldr	r0, [fp, #-40]	; 0xffffffd8
    a138:	bl	40f8 <MyGame_Example_Test_a>
    a13c:	sxth	r0, r0
    a140:	cmp	r0, #44	; 0x2c
    a144:	beq	a158 <test_clone_slice+0x7b4>
    a148:	movw	r0, #0
    a14c:	movt	r0, #0
    a150:	bl	0 <printf>
    a154:	b	a160 <test_clone_slice+0x7bc>
    a158:	movw	r0, #0
    a15c:	str	r0, [fp, #-56]	; 0xffffffc8
    a160:	ldr	r0, [fp, #-44]	; 0xffffffd4
    a164:	bl	0 <flatcc_builder_aligned_free>
    a168:	ldr	r0, [fp, #-56]	; 0xffffffc8
    a16c:	mov	sp, fp
    a170:	pop	{fp, pc}
    a174:	.word	0xc2293333

0000a178 <MyGame_Example_Monster_testarrayofbools_create>:
    a178:	push	{fp, lr}
    a17c:	mov	fp, sp
    a180:	sub	sp, sp, #24
    a184:	str	r0, [fp, #-4]
    a188:	str	r1, [fp, #-8]
    a18c:	str	r2, [sp, #12]
    a190:	ldr	r0, [fp, #-4]
    a194:	ldr	r1, [fp, #-4]
    a198:	ldr	r2, [fp, #-8]
    a19c:	ldr	r3, [sp, #12]
    a1a0:	str	r0, [sp, #8]
    a1a4:	mov	r0, r1
    a1a8:	mov	r1, r2
    a1ac:	mov	r2, r3
    a1b0:	bl	128d8 <flatbuffers_bool_vec_create>
    a1b4:	ldr	r1, [sp, #8]
    a1b8:	str	r0, [sp, #4]
    a1bc:	mov	r0, r1
    a1c0:	ldr	r1, [sp, #4]
    a1c4:	bl	11f98 <MyGame_Example_Monster_testarrayofbools_add>
    a1c8:	mov	sp, fp
    a1cc:	pop	{fp, pc}

0000a1d0 <MyGame_Example_Monster_name_clone>:
    a1d0:	push	{fp, lr}
    a1d4:	mov	fp, sp
    a1d8:	sub	sp, sp, #16
    a1dc:	str	r0, [fp, #-4]
    a1e0:	str	r1, [sp, #8]
    a1e4:	ldr	r0, [fp, #-4]
    a1e8:	ldr	r1, [fp, #-4]
    a1ec:	ldr	r2, [sp, #8]
    a1f0:	str	r0, [sp, #4]
    a1f4:	mov	r0, r1
    a1f8:	mov	r1, r2
    a1fc:	bl	12920 <flatbuffers_string_clone>
    a200:	ldr	r1, [sp, #4]
    a204:	str	r0, [sp]
    a208:	mov	r0, r1
    a20c:	ldr	r1, [sp]
    a210:	bl	5c34 <MyGame_Example_Monster_name_add>
    a214:	mov	sp, fp
    a218:	pop	{fp, pc}

0000a21c <MyGame_Example_Monster_testarrayofstring_push_clone>:
    a21c:	push	{fp, lr}
    a220:	mov	fp, sp
    a224:	sub	sp, sp, #16
    a228:	str	r0, [fp, #-4]
    a22c:	str	r1, [sp, #8]
    a230:	ldr	r0, [fp, #-4]
    a234:	ldr	r1, [fp, #-4]
    a238:	ldr	r2, [sp, #8]
    a23c:	str	r0, [sp, #4]
    a240:	mov	r0, r1
    a244:	mov	r1, r2
    a248:	bl	12920 <flatbuffers_string_clone>
    a24c:	ldr	r1, [sp, #4]
    a250:	str	r0, [sp]
    a254:	mov	r0, r1
    a258:	ldr	r1, [sp]
    a25c:	bl	12970 <flatbuffers_string_vec_push>
    a260:	mov	sp, fp
    a264:	pop	{fp, pc}

0000a268 <MyGame_Example_Monster_testarrayofstring_push_slice>:
    a268:	push	{fp, lr}
    a26c:	mov	fp, sp
    a270:	sub	sp, sp, #24
    a274:	str	r0, [fp, #-4]
    a278:	str	r1, [fp, #-8]
    a27c:	str	r2, [sp, #12]
    a280:	str	r3, [sp, #8]
    a284:	ldr	r0, [fp, #-4]
    a288:	ldr	r1, [fp, #-4]
    a28c:	ldr	r2, [fp, #-8]
    a290:	ldr	r3, [sp, #12]
    a294:	ldr	ip, [sp, #8]
    a298:	str	r0, [sp, #4]
    a29c:	mov	r0, r1
    a2a0:	mov	r1, r2
    a2a4:	mov	r2, r3
    a2a8:	mov	r3, ip
    a2ac:	bl	129bc <flatbuffers_string_slice>
    a2b0:	ldr	r1, [sp, #4]
    a2b4:	str	r0, [sp]
    a2b8:	mov	r0, r1
    a2bc:	ldr	r1, [sp]
    a2c0:	bl	12970 <flatbuffers_string_vec_push>
    a2c4:	mov	sp, fp
    a2c8:	pop	{fp, pc}

0000a2cc <MyGame_Example_Monster_name_slice>:
    a2cc:	push	{fp, lr}
    a2d0:	mov	fp, sp
    a2d4:	sub	sp, sp, #24
    a2d8:	str	r0, [fp, #-4]
    a2dc:	str	r1, [fp, #-8]
    a2e0:	str	r2, [sp, #12]
    a2e4:	str	r3, [sp, #8]
    a2e8:	ldr	r0, [fp, #-4]
    a2ec:	ldr	r1, [fp, #-4]
    a2f0:	ldr	r2, [fp, #-8]
    a2f4:	ldr	r3, [sp, #12]
    a2f8:	ldr	ip, [sp, #8]
    a2fc:	str	r0, [sp, #4]
    a300:	mov	r0, r1
    a304:	mov	r1, r2
    a308:	mov	r2, r3
    a30c:	mov	r3, ip
    a310:	bl	129bc <flatbuffers_string_slice>
    a314:	ldr	r1, [sp, #4]
    a318:	str	r0, [sp]
    a31c:	mov	r0, r1
    a320:	ldr	r1, [sp]
    a324:	bl	5c34 <MyGame_Example_Monster_name_add>
    a328:	mov	sp, fp
    a32c:	pop	{fp, pc}

0000a330 <MyGame_Example_Monster_testarrayofbools_clone>:
    a330:	push	{fp, lr}
    a334:	mov	fp, sp
    a338:	sub	sp, sp, #16
    a33c:	str	r0, [fp, #-4]
    a340:	str	r1, [sp, #8]
    a344:	ldr	r0, [fp, #-4]
    a348:	ldr	r1, [fp, #-4]
    a34c:	ldr	r2, [sp, #8]
    a350:	str	r0, [sp, #4]
    a354:	mov	r0, r1
    a358:	mov	r1, r2
    a35c:	bl	12a44 <flatbuffers_bool_vec_clone>
    a360:	ldr	r1, [sp, #4]
    a364:	str	r0, [sp]
    a368:	mov	r0, r1
    a36c:	ldr	r1, [sp]
    a370:	bl	11f98 <MyGame_Example_Monster_testarrayofbools_add>
    a374:	mov	sp, fp
    a378:	pop	{fp, pc}

0000a37c <MyGame_Example_Monster_test4_slice>:
    a37c:	push	{fp, lr}
    a380:	mov	fp, sp
    a384:	sub	sp, sp, #24
    a388:	str	r0, [fp, #-4]
    a38c:	str	r1, [fp, #-8]
    a390:	str	r2, [sp, #12]
    a394:	str	r3, [sp, #8]
    a398:	ldr	r0, [fp, #-4]
    a39c:	ldr	r1, [fp, #-4]
    a3a0:	ldr	r2, [fp, #-8]
    a3a4:	ldr	r3, [sp, #12]
    a3a8:	ldr	ip, [sp, #8]
    a3ac:	str	r0, [sp, #4]
    a3b0:	mov	r0, r1
    a3b4:	mov	r1, r2
    a3b8:	mov	r2, r3
    a3bc:	mov	r3, ip
    a3c0:	bl	12aac <MyGame_Example_Test_vec_slice>
    a3c4:	ldr	r1, [sp, #4]
    a3c8:	str	r0, [sp]
    a3cc:	mov	r0, r1
    a3d0:	ldr	r1, [sp]
    a3d4:	bl	11db8 <MyGame_Example_Monster_test4_add>
    a3d8:	mov	sp, fp
    a3dc:	pop	{fp, pc}

0000a3e0 <MyGame_Example_Monster_testarrayofbools_slice>:
    a3e0:	push	{fp, lr}
    a3e4:	mov	fp, sp
    a3e8:	sub	sp, sp, #24
    a3ec:	str	r0, [fp, #-4]
    a3f0:	str	r1, [fp, #-8]
    a3f4:	str	r2, [sp, #12]
    a3f8:	str	r3, [sp, #8]
    a3fc:	ldr	r0, [fp, #-4]
    a400:	ldr	r1, [fp, #-4]
    a404:	ldr	r2, [fp, #-8]
    a408:	ldr	r3, [sp, #12]
    a40c:	ldr	ip, [sp, #8]
    a410:	str	r0, [sp, #4]
    a414:	mov	r0, r1
    a418:	mov	r1, r2
    a41c:	mov	r2, r3
    a420:	mov	r3, ip
    a424:	bl	12b98 <flatbuffers_bool_vec_slice>
    a428:	ldr	r1, [sp, #4]
    a42c:	str	r0, [sp]
    a430:	mov	r0, r1
    a434:	ldr	r1, [sp]
    a438:	bl	11f98 <MyGame_Example_Monster_testarrayofbools_add>
    a43c:	mov	sp, fp
    a440:	pop	{fp, pc}

0000a444 <MyGame_Example_Monster_pos_clone>:
    a444:	push	{fp, lr}
    a448:	mov	fp, sp
    a44c:	sub	sp, sp, #16
    a450:	str	r0, [fp, #-4]
    a454:	str	r1, [sp, #8]
    a458:	ldr	r0, [fp, #-4]
    a45c:	ldr	r1, [sp, #8]
    a460:	movw	r2, #0
    a464:	str	r1, [sp, #4]
    a468:	mov	r1, r2
    a46c:	ldr	r2, [sp, #4]
    a470:	movw	r3, #32
    a474:	movw	ip, #16
    a478:	uxth	ip, ip
    a47c:	str	ip, [sp]
    a480:	bl	0 <flatcc_builder_table_add_copy>
    a484:	movw	r1, #0
    a488:	cmp	r1, r0
    a48c:	movw	r0, #0
    a490:	moveq	r0, #1
    a494:	tst	r0, #1
    a498:	mvn	r0, #0
    a49c:	moveq	r0, #0
    a4a0:	mov	sp, fp
    a4a4:	pop	{fp, pc}

0000a4a8 <MyGame_Example_Monster_test4_clone>:
    a4a8:	push	{fp, lr}
    a4ac:	mov	fp, sp
    a4b0:	sub	sp, sp, #16
    a4b4:	str	r0, [fp, #-4]
    a4b8:	str	r1, [sp, #8]
    a4bc:	ldr	r0, [fp, #-4]
    a4c0:	ldr	r1, [fp, #-4]
    a4c4:	ldr	r2, [sp, #8]
    a4c8:	str	r0, [sp, #4]
    a4cc:	mov	r0, r1
    a4d0:	mov	r1, r2
    a4d4:	bl	12c74 <MyGame_Example_Test_vec_clone>
    a4d8:	ldr	r1, [sp, #4]
    a4dc:	str	r0, [sp]
    a4e0:	mov	r0, r1
    a4e4:	ldr	r1, [sp]
    a4e8:	bl	11db8 <MyGame_Example_Monster_test4_add>
    a4ec:	mov	sp, fp
    a4f0:	pop	{fp, pc}

0000a4f4 <test_create_add_field>:
    a4f4:	push	{fp, lr}
    a4f8:	mov	fp, sp
    a4fc:	sub	sp, sp, #64	; 0x40
    a500:	str	r0, [fp, #-4]
    a504:	mvn	r0, #0
    a508:	str	r0, [fp, #-16]
    a50c:	ldr	r0, [fp, #-4]
    a510:	bl	0 <flatcc_builder_reset>
    a514:	ldr	r1, [fp, #-4]
    a518:	str	r0, [fp, #-28]	; 0xffffffe4
    a51c:	mov	r0, r1
    a520:	bl	57c0 <MyGame_Example_Monster_start_as_root>
    a524:	ldr	r1, [fp, #-4]
    a528:	str	r0, [sp, #32]
    a52c:	mov	r0, r1
    a530:	movw	r1, #0
    a534:	movt	r1, #0
    a538:	bl	1818 <MyGame_Example_Monster_name_create_str>
    a53c:	ldr	r1, [fp, #-4]
    a540:	ldr	r2, [fp, #-4]
    a544:	str	r0, [sp, #28]
    a548:	mov	r0, r2
    a54c:	movw	r2, #0
    a550:	movt	r2, #0
    a554:	str	r1, [sp, #24]
    a558:	mov	r1, r2
    a55c:	bl	5e78 <flatbuffers_string_create_str>
    a560:	mov	r1, sp
    a564:	mov	r2, #2
    a568:	str	r2, [r1]
    a56c:	mvn	r2, #99	; 0x63
    a570:	mvn	r3, #0
    a574:	ldr	r1, [sp, #24]
    a578:	str	r0, [sp, #20]
    a57c:	mov	r0, r1
    a580:	ldr	r1, [sp, #20]
    a584:	bl	a64c <MyGame_Example_Monster_testempty_create>
    a588:	ldr	r1, [fp, #-4]
    a58c:	str	r0, [sp, #16]
    a590:	mov	r0, r1
    a594:	movw	r1, #0
    a598:	bl	a6c4 <MyGame_Example_Monster_enemy_add>
    a59c:	ldr	r1, [fp, #-4]
    a5a0:	str	r0, [sp, #12]
    a5a4:	mov	r0, r1
    a5a8:	bl	6360 <MyGame_Example_Monster_end_as_root>
    a5ac:	ldr	r1, [fp, #-4]
    a5b0:	str	r0, [sp, #8]
    a5b4:	mov	r0, r1
    a5b8:	sub	r1, fp, #12
    a5bc:	bl	0 <flatcc_builder_finalize_aligned_buffer>
    a5c0:	str	r0, [fp, #-8]
    a5c4:	ldr	r0, [fp, #-8]
    a5c8:	bl	25c <MyGame_Example_Monster_as_root>
    a5cc:	str	r0, [fp, #-20]	; 0xffffffec
    a5d0:	ldr	r0, [fp, #-20]	; 0xffffffec
    a5d4:	bl	a730 <MyGame_Example_Monster_enemy_is_present>
    a5d8:	cmp	r0, #0
    a5dc:	beq	a5f0 <test_create_add_field+0xfc>
    a5e0:	movw	r0, #0
    a5e4:	movt	r0, #0
    a5e8:	bl	0 <printf>
    a5ec:	b	a638 <test_create_add_field+0x144>
    a5f0:	ldr	r0, [fp, #-20]	; 0xffffffec
    a5f4:	bl	4c6c <MyGame_Example_Monster_testempty>
    a5f8:	str	r0, [fp, #-24]	; 0xffffffe8
    a5fc:	ldr	r0, [fp, #-24]	; 0xffffffe8
    a600:	bl	a7f0 <MyGame_Example_Stat_val>
    a604:	mvn	r2, #99	; 0x63
    a608:	eor	r0, r0, r2
    a60c:	mvn	r1, r1
    a610:	orr	r0, r0, r1
    a614:	cmp	r0, #0
    a618:	beq	a630 <test_create_add_field+0x13c>
    a61c:	b	a620 <test_create_add_field+0x12c>
    a620:	movw	r0, #0
    a624:	movt	r0, #0
    a628:	bl	0 <printf>
    a62c:	b	a638 <test_create_add_field+0x144>
    a630:	movw	r0, #0
    a634:	str	r0, [fp, #-16]
    a638:	ldr	r0, [fp, #-8]
    a63c:	bl	0 <flatcc_builder_aligned_free>
    a640:	ldr	r0, [fp, #-16]
    a644:	mov	sp, fp
    a648:	pop	{fp, pc}

0000a64c <MyGame_Example_Monster_testempty_create>:
    a64c:	push	{r4, sl, fp, lr}
    a650:	add	fp, sp, #8
    a654:	sub	sp, sp, #32
    a658:	ldr	ip, [fp, #8]
    a65c:	str	r0, [fp, #-12]
    a660:	str	r1, [fp, #-16]
    a664:	str	r3, [sp, #20]
    a668:	str	r2, [sp, #16]
    a66c:	strh	ip, [sp, #14]
    a670:	ldr	r0, [fp, #-12]
    a674:	mov	r1, r0
    a678:	ldr	r2, [fp, #-16]
    a67c:	ldr	r3, [sp, #16]
    a680:	ldr	ip, [sp, #20]
    a684:	ldrh	lr, [sp, #14]
    a688:	uxth	lr, lr
    a68c:	mov	r4, sp
    a690:	str	lr, [r4]
    a694:	str	r1, [sp, #8]
    a698:	mov	r1, r2
    a69c:	mov	r2, r3
    a6a0:	mov	r3, ip
    a6a4:	bl	12cec <MyGame_Example_Stat_create>
    a6a8:	ldr	r1, [sp, #8]
    a6ac:	str	r0, [sp, #4]
    a6b0:	mov	r0, r1
    a6b4:	ldr	r1, [sp, #4]
    a6b8:	bl	120d8 <MyGame_Example_Monster_testempty_add>
    a6bc:	sub	sp, fp, #8
    a6c0:	pop	{r4, sl, fp, pc}

0000a6c4 <MyGame_Example_Monster_enemy_add>:
    a6c4:	push	{fp, lr}
    a6c8:	mov	fp, sp
    a6cc:	sub	sp, sp, #16
    a6d0:	str	r0, [fp, #-4]
    a6d4:	str	r1, [sp, #8]
    a6d8:	ldr	r0, [sp, #8]
    a6dc:	cmp	r0, #0
    a6e0:	beq	a718 <MyGame_Example_Monster_enemy_add+0x54>
    a6e4:	ldr	r0, [fp, #-4]
    a6e8:	movw	r1, #12
    a6ec:	bl	0 <flatcc_builder_table_add_offset>
    a6f0:	str	r0, [sp, #4]
    a6f4:	movw	r1, #0
    a6f8:	cmp	r0, r1
    a6fc:	beq	a718 <MyGame_Example_Monster_enemy_add+0x54>
    a700:	ldr	r0, [sp, #8]
    a704:	ldr	r1, [sp, #4]
    a708:	str	r0, [r1]
    a70c:	movw	r0, #0
    a710:	str	r0, [sp]
    a714:	b	a724 <MyGame_Example_Monster_enemy_add+0x60>
    a718:	mvn	r0, #0
    a71c:	str	r0, [sp]
    a720:	b	a724 <MyGame_Example_Monster_enemy_add+0x60>
    a724:	ldr	r0, [sp]
    a728:	mov	sp, fp
    a72c:	pop	{fp, pc}

0000a730 <MyGame_Example_Monster_enemy_is_present>:
    a730:	push	{fp, lr}
    a734:	mov	fp, sp
    a738:	sub	sp, sp, #16
    a73c:	str	r0, [fp, #-4]
    a740:	movw	r0, #0
    a744:	strh	r0, [fp, #-6]
    a748:	ldr	r0, [fp, #-4]
    a74c:	movw	r1, #0
    a750:	cmp	r0, r1
    a754:	beq	a760 <MyGame_Example_Monster_enemy_is_present+0x30>
    a758:	b	a75c <MyGame_Example_Monster_enemy_is_present+0x2c>
    a75c:	b	a780 <MyGame_Example_Monster_enemy_is_present+0x50>
    a760:	movw	r0, #0
    a764:	movt	r0, #0
    a768:	movw	r1, #0
    a76c:	movt	r1, #0
    a770:	movw	r2, #716	; 0x2cc
    a774:	movw	r3, #0
    a778:	movt	r3, #0
    a77c:	bl	0 <__assert_fail>
    a780:	mov	r0, #12
    a784:	strh	r0, [sp, #8]
    a788:	ldr	r0, [fp, #-4]
    a78c:	str	r0, [sp]
    a790:	bl	f4c8 <__flatbuffers_soffset_read_from_pe>
    a794:	ldr	r1, [sp]
    a798:	sub	r0, r1, r0
    a79c:	str	r0, [sp, #4]
    a7a0:	ldr	r0, [sp, #4]
    a7a4:	bl	f4ec <__flatbuffers_voffset_read_from_pe>
    a7a8:	ldrh	r1, [sp, #8]
    a7ac:	add	r1, r1, #3
    a7b0:	lsl	r1, r1, #1
    a7b4:	cmp	r0, r1
    a7b8:	bcc	a7d4 <MyGame_Example_Monster_enemy_is_present+0xa4>
    a7bc:	ldr	r0, [sp, #4]
    a7c0:	ldrh	r1, [sp, #8]
    a7c4:	add	r0, r0, r1, lsl #1
    a7c8:	add	r0, r0, #4
    a7cc:	bl	f4ec <__flatbuffers_voffset_read_from_pe>
    a7d0:	strh	r0, [fp, #-6]
    a7d4:	ldrh	r0, [fp, #-6]
    a7d8:	cmp	r0, #0
    a7dc:	movw	r0, #0
    a7e0:	movne	r0, #1
    a7e4:	and	r0, r0, #1
    a7e8:	mov	sp, fp
    a7ec:	pop	{fp, pc}

0000a7f0 <MyGame_Example_Stat_val>:
    a7f0:	push	{fp, lr}
    a7f4:	mov	fp, sp
    a7f8:	sub	sp, sp, #32
    a7fc:	str	r0, [fp, #-4]
    a800:	movw	r0, #0
    a804:	strh	r0, [fp, #-6]
    a808:	ldr	r0, [fp, #-4]
    a80c:	movw	r1, #0
    a810:	cmp	r0, r1
    a814:	beq	a820 <MyGame_Example_Stat_val+0x30>
    a818:	b	a81c <MyGame_Example_Stat_val+0x2c>
    a81c:	b	a840 <MyGame_Example_Stat_val+0x50>
    a820:	movw	r0, #0
    a824:	movt	r0, #0
    a828:	movw	r1, #0
    a82c:	movt	r1, #0
    a830:	movw	r2, #608	; 0x260
    a834:	movw	r3, #0
    a838:	movt	r3, #0
    a83c:	bl	0 <__assert_fail>
    a840:	mov	r0, #1
    a844:	strh	r0, [fp, #-8]
    a848:	ldr	r0, [fp, #-4]
    a84c:	str	r0, [sp, #16]
    a850:	bl	f4c8 <__flatbuffers_soffset_read_from_pe>
    a854:	ldr	r1, [sp, #16]
    a858:	sub	r0, r1, r0
    a85c:	str	r0, [fp, #-12]
    a860:	ldr	r0, [fp, #-12]
    a864:	bl	f4ec <__flatbuffers_voffset_read_from_pe>
    a868:	ldrh	r1, [fp, #-8]
    a86c:	add	r1, r1, #3
    a870:	lsl	r1, r1, #1
    a874:	cmp	r0, r1
    a878:	bcc	a894 <MyGame_Example_Stat_val+0xa4>
    a87c:	ldr	r0, [fp, #-12]
    a880:	ldrh	r1, [fp, #-8]
    a884:	add	r0, r0, r1, lsl #1
    a888:	add	r0, r0, #4
    a88c:	bl	f4ec <__flatbuffers_voffset_read_from_pe>
    a890:	strh	r0, [fp, #-6]
    a894:	ldrh	r0, [fp, #-6]
    a898:	cmp	r0, #0
    a89c:	beq	a8bc <MyGame_Example_Stat_val+0xcc>
    a8a0:	ldr	r0, [fp, #-4]
    a8a4:	ldrh	r1, [fp, #-6]
    a8a8:	add	r0, r0, r1
    a8ac:	bl	103e0 <flatbuffers_int64_read_from_pe>
    a8b0:	str	r0, [sp, #12]
    a8b4:	str	r1, [sp, #8]
    a8b8:	b	a8d0 <MyGame_Example_Stat_val+0xe0>
    a8bc:	mov	r0, #0
    a8c0:	mov	r1, r0
    a8c4:	str	r1, [sp, #12]
    a8c8:	str	r0, [sp, #8]
    a8cc:	b	a8d0 <MyGame_Example_Stat_val+0xe0>
    a8d0:	ldr	r0, [sp, #8]
    a8d4:	ldr	r1, [sp, #12]
    a8d8:	str	r0, [sp, #4]
    a8dc:	mov	r0, r1
    a8e0:	ldr	r1, [sp, #4]
    a8e4:	mov	sp, fp
    a8e8:	pop	{fp, pc}

0000a8ec <test_union_vector>:
    a8ec:	push	{fp, lr}
    a8f0:	mov	fp, sp
    a8f4:	sub	sp, sp, #168	; 0xa8
    a8f8:	str	r0, [fp, #-8]
    a8fc:	mvn	r0, #0
    a900:	str	r0, [fp, #-28]	; 0xffffffe4
    a904:	ldr	r0, [fp, #-8]
    a908:	bl	0 <flatcc_builder_reset>
    a90c:	ldr	r1, [fp, #-8]
    a910:	str	r0, [sp, #48]	; 0x30
    a914:	mov	r0, r1
    a918:	bl	57c0 <MyGame_Example_Monster_start_as_root>
    a91c:	ldr	r1, [fp, #-8]
    a920:	movw	r2, #0
    a924:	movt	r2, #0
    a928:	str	r0, [sp, #44]	; 0x2c
    a92c:	mov	r0, r1
    a930:	mov	r1, r2
    a934:	bl	1818 <MyGame_Example_Monster_name_create_str>
    a938:	ldr	r1, [fp, #-8]
    a93c:	mov	r2, sp
    a940:	mov	r3, #2
    a944:	str	r3, [r2]
    a948:	str	r0, [sp, #40]	; 0x28
    a94c:	mov	r0, r1
    a950:	mov	r1, r3
    a954:	mov	r2, r3
    a958:	bl	ac64 <MyGame_Example_TestSimpleTableWithEnum_create>
    a95c:	str	r0, [fp, #-52]	; 0xffffffcc
    a960:	ldr	r0, [fp, #-8]
    a964:	bl	ad0c <MyGame_Example_Any_vec_start>
    a968:	ldr	r1, [fp, #-8]
    a96c:	ldr	r2, [fp, #-52]	; 0xffffffcc
    a970:	add	r3, sp, #76	; 0x4c
    a974:	str	r0, [sp, #36]	; 0x24
    a978:	mov	r0, r3
    a97c:	str	r1, [sp, #32]
    a980:	mov	r1, r2
    a984:	bl	ad5c <MyGame_Example_Any_as_TestSimpleTableWithEnum>
    a988:	ldr	r1, [sp, #76]	; 0x4c
    a98c:	ldr	r2, [sp, #80]	; 0x50
    a990:	ldr	r0, [sp, #32]
    a994:	bl	ad2c <MyGame_Example_Any_vec_push>
    a998:	ldr	r1, [fp, #-8]
    a99c:	add	r2, sp, #68	; 0x44
    a9a0:	str	r0, [sp, #28]
    a9a4:	mov	r0, r2
    a9a8:	bl	ad7c <MyGame_Example_Any_vec_end>
    a9ac:	vldr	d16, [sp, #68]	; 0x44
    a9b0:	vstr	d16, [fp, #-48]	; 0xffffffd0
    a9b4:	ldr	r0, [fp, #-8]
    a9b8:	bl	ad9c <MyGame_Example_Monster_test_Alt_start>
    a9bc:	ldr	r1, [fp, #-8]
    a9c0:	ldr	r2, [fp, #-48]	; 0xffffffd0
    a9c4:	ldr	r3, [fp, #-44]	; 0xffffffd4
    a9c8:	str	r0, [sp, #24]
    a9cc:	mov	r0, r1
    a9d0:	mov	r1, r2
    a9d4:	mov	r2, r3
    a9d8:	bl	adbc <MyGame_Example_Alt_manyany_add>
    a9dc:	ldr	r1, [fp, #-8]
    a9e0:	str	r0, [sp, #20]
    a9e4:	mov	r0, r1
    a9e8:	bl	ae90 <MyGame_Example_Monster_test_Alt_end>
    a9ec:	ldr	r1, [fp, #-8]
    a9f0:	str	r0, [sp, #16]
    a9f4:	mov	r0, r1
    a9f8:	bl	6360 <MyGame_Example_Monster_end_as_root>
    a9fc:	ldr	r1, [fp, #-8]
    aa00:	str	r0, [sp, #12]
    aa04:	mov	r0, r1
    aa08:	sub	r1, fp, #16
    aa0c:	bl	0 <flatcc_builder_finalize_aligned_buffer>
    aa10:	str	r0, [fp, #-12]
    aa14:	ldr	r0, [fp, #-12]
    aa18:	ldr	r1, [fp, #-16]
    aa1c:	bl	1924 <MyGame_Example_Monster_verify_as_root>
    aa20:	str	r0, [fp, #-28]	; 0xffffffe4
    aa24:	cmp	r0, #0
    aa28:	beq	aa58 <test_union_vector+0x16c>
    aa2c:	ldr	r0, [fp, #-28]	; 0xffffffe4
    aa30:	bl	0 <flatcc_verify_error_string>
    aa34:	movw	r1, #0
    aa38:	movt	r1, #0
    aa3c:	str	r0, [sp, #8]
    aa40:	mov	r0, r1
    aa44:	ldr	r1, [sp, #8]
    aa48:	bl	0 <printf>
    aa4c:	mvn	r1, #0
    aa50:	str	r1, [fp, #-4]
    aa54:	b	ac58 <test_union_vector+0x36c>
    aa58:	ldr	r0, [fp, #-12]
    aa5c:	bl	25c <MyGame_Example_Monster_as_root>
    aa60:	str	r0, [fp, #-32]	; 0xffffffe0
    aa64:	ldr	r0, [fp, #-32]	; 0xffffffe0
    aa68:	bl	4788 <MyGame_Example_Monster_test_type>
    aa6c:	and	r0, r0, #255	; 0xff
    aa70:	cmp	r0, #4
    aa74:	beq	aa88 <test_union_vector+0x19c>
    aa78:	movw	r0, #0
    aa7c:	movt	r0, #0
    aa80:	bl	0 <printf>
    aa84:	b	ac48 <test_union_vector+0x35c>
    aa88:	ldr	r0, [fp, #-32]	; 0xffffffe0
    aa8c:	bl	4870 <MyGame_Example_Monster_test>
    aa90:	str	r0, [sp, #84]	; 0x54
    aa94:	ldr	r0, [sp, #84]	; 0x54
    aa98:	movw	r1, #0
    aa9c:	cmp	r0, r1
    aaa0:	beq	aab4 <test_union_vector+0x1c8>
    aaa4:	ldr	r0, [sp, #84]	; 0x54
    aaa8:	bl	aee4 <MyGame_Example_Alt_manyany_is_present>
    aaac:	cmp	r0, #0
    aab0:	beq	aac4 <test_union_vector+0x1d8>
    aab4:	movw	r0, #0
    aab8:	movt	r0, #0
    aabc:	bl	0 <printf>
    aac0:	b	ac48 <test_union_vector+0x35c>
    aac4:	ldr	r0, [sp, #84]	; 0x54
    aac8:	bl	afa4 <MyGame_Example_Alt_manyany_type>
    aacc:	str	r0, [fp, #-64]	; 0xffffffc0
    aad0:	ldr	r0, [sp, #84]	; 0x54
    aad4:	bl	b0a0 <MyGame_Example_Alt_manyany>
    aad8:	str	r0, [fp, #-60]	; 0xffffffc4
    aadc:	ldr	r0, [fp, #-64]	; 0xffffffc0
    aae0:	bl	b19c <MyGame_Example_Any_vec_len>
    aae4:	str	r0, [fp, #-20]	; 0xffffffec
    aae8:	ldr	r0, [fp, #-20]	; 0xffffffec
    aaec:	cmp	r0, #1
    aaf0:	beq	ab04 <test_union_vector+0x218>
    aaf4:	movw	r0, #0
    aaf8:	movt	r0, #0
    aafc:	bl	0 <printf>
    ab00:	b	ac48 <test_union_vector+0x35c>
    ab04:	ldr	r0, [fp, #-64]	; 0xffffffc0
    ab08:	movw	r1, #0
    ab0c:	bl	b1bc <flatbuffers_union_type_vec_at>
    ab10:	and	r0, r0, #255	; 0xff
    ab14:	cmp	r0, #2
    ab18:	beq	ab2c <test_union_vector+0x240>
    ab1c:	movw	r0, #0
    ab20:	movt	r0, #0
    ab24:	bl	0 <printf>
    ab28:	b	ac48 <test_union_vector+0x35c>
    ab2c:	ldr	r0, [fp, #-60]	; 0xffffffc4
    ab30:	movw	r1, #0
    ab34:	bl	b228 <flatbuffers_generic_vec_at>
    ab38:	str	r0, [fp, #-56]	; 0xffffffc8
    ab3c:	ldr	r0, [fp, #-56]	; 0xffffffc8
    ab40:	movw	r1, #0
    ab44:	cmp	r0, r1
    ab48:	bne	ab5c <test_union_vector+0x270>
    ab4c:	movw	r0, #0
    ab50:	movt	r0, #0
    ab54:	bl	0 <printf>
    ab58:	b	ac48 <test_union_vector+0x35c>
    ab5c:	ldr	r0, [fp, #-56]	; 0xffffffc8
    ab60:	bl	b2ac <MyGame_Example_TestSimpleTableWithEnum_color>
    ab64:	sxtb	r0, r0
    ab68:	str	r0, [fp, #-24]	; 0xffffffe8
    ab6c:	ldr	r0, [fp, #-24]	; 0xffffffe8
    ab70:	cmp	r0, #2
    ab74:	beq	ab8c <test_union_vector+0x2a0>
    ab78:	ldr	r1, [fp, #-24]	; 0xffffffe8
    ab7c:	movw	r0, #0
    ab80:	movt	r0, #0
    ab84:	bl	0 <printf>
    ab88:	b	ac48 <test_union_vector+0x35c>
    ab8c:	ldr	r1, [sp, #84]	; 0x54
    ab90:	add	r0, sp, #60	; 0x3c
    ab94:	bl	b394 <MyGame_Example_Alt_manyany_union>
    ab98:	vldr	d16, [sp, #60]	; 0x3c
    ab9c:	vstr	d16, [fp, #-72]	; 0xffffffb8
    aba0:	ldr	r0, [fp, #-72]	; 0xffffffb8
    aba4:	ldr	r1, [fp, #-68]	; 0xffffffbc
    aba8:	bl	b424 <MyGame_Example_Any_union_vec_len>
    abac:	cmp	r0, #1
    abb0:	beq	abc4 <test_union_vector+0x2d8>
    abb4:	movw	r0, #0
    abb8:	movt	r0, #0
    abbc:	bl	0 <printf>
    abc0:	b	ac48 <test_union_vector+0x35c>
    abc4:	ldr	r1, [fp, #-72]	; 0xffffffb8
    abc8:	ldr	r2, [fp, #-68]	; 0xffffffbc
    abcc:	add	r0, sp, #52	; 0x34
    abd0:	mov	r3, #0
    abd4:	bl	b448 <MyGame_Example_Any_union_vec_at>
    abd8:	ldr	r0, [sp, #52]	; 0x34
    abdc:	str	r0, [fp, #-80]	; 0xffffffb0
    abe0:	ldr	r0, [sp, #56]	; 0x38
    abe4:	str	r0, [fp, #-76]	; 0xffffffb4
    abe8:	ldrb	r0, [fp, #-80]	; 0xffffffb0
    abec:	ldr	r1, [fp, #-64]	; 0xffffffc0
    abf0:	str	r0, [sp, #4]
    abf4:	mov	r0, r1
    abf8:	movw	r1, #0
    abfc:	bl	b1bc <flatbuffers_union_type_vec_at>
    ac00:	and	r0, r0, #255	; 0xff
    ac04:	ldr	r1, [sp, #4]
    ac08:	cmp	r1, r0
    ac0c:	beq	ac20 <test_union_vector+0x334>
    ac10:	movw	r0, #0
    ac14:	movt	r0, #0
    ac18:	bl	0 <printf>
    ac1c:	b	ac48 <test_union_vector+0x35c>
    ac20:	ldr	r0, [fp, #-76]	; 0xffffffb4
    ac24:	ldr	r1, [fp, #-56]	; 0xffffffc8
    ac28:	cmp	r0, r1
    ac2c:	beq	ac40 <test_union_vector+0x354>
    ac30:	movw	r0, #0
    ac34:	movt	r0, #0
    ac38:	bl	0 <printf>
    ac3c:	b	ac48 <test_union_vector+0x35c>
    ac40:	movw	r0, #0
    ac44:	str	r0, [fp, #-28]	; 0xffffffe4
    ac48:	ldr	r0, [fp, #-12]
    ac4c:	bl	0 <flatcc_builder_aligned_free>
    ac50:	ldr	r0, [fp, #-28]	; 0xffffffe4
    ac54:	str	r0, [fp, #-4]
    ac58:	ldr	r0, [fp, #-4]
    ac5c:	mov	sp, fp
    ac60:	pop	{fp, pc}

0000ac64 <MyGame_Example_TestSimpleTableWithEnum_create>:
    ac64:	push	{fp, lr}
    ac68:	mov	fp, sp
    ac6c:	sub	sp, sp, #16
    ac70:	ldr	ip, [fp, #8]
    ac74:	str	r0, [sp, #8]
    ac78:	strb	r1, [sp, #7]
    ac7c:	strb	r2, [sp, #6]
    ac80:	strb	r3, [sp, #5]
    ac84:	strb	ip, [sp, #4]
    ac88:	ldr	r0, [sp, #8]
    ac8c:	bl	12f08 <MyGame_Example_TestSimpleTableWithEnum_start>
    ac90:	cmp	r0, #0
    ac94:	bne	ace8 <MyGame_Example_TestSimpleTableWithEnum_create+0x84>
    ac98:	ldr	r0, [sp, #8]
    ac9c:	ldrsb	r1, [sp, #7]
    aca0:	bl	12f2c <MyGame_Example_TestSimpleTableWithEnum_color_add>
    aca4:	cmp	r0, #0
    aca8:	bne	ace8 <MyGame_Example_TestSimpleTableWithEnum_create+0x84>
    acac:	ldr	r0, [sp, #8]
    acb0:	ldrsb	r1, [sp, #6]
    acb4:	bl	12fac <MyGame_Example_TestSimpleTableWithEnum_color2_add>
    acb8:	cmp	r0, #0
    acbc:	bne	ace8 <MyGame_Example_TestSimpleTableWithEnum_create+0x84>
    acc0:	ldr	r0, [sp, #8]
    acc4:	ldrb	r1, [sp, #5]
    acc8:	bl	13030 <MyGame_Example_TestSimpleTableWithEnum_uc_add>
    accc:	cmp	r0, #0
    acd0:	bne	ace8 <MyGame_Example_TestSimpleTableWithEnum_create+0x84>
    acd4:	ldr	r0, [sp, #8]
    acd8:	ldrb	r1, [sp, #4]
    acdc:	bl	130b0 <MyGame_Example_TestSimpleTableWithEnum_uc2_add>
    ace0:	cmp	r0, #0
    ace4:	beq	acf4 <MyGame_Example_TestSimpleTableWithEnum_create+0x90>
    ace8:	movw	r0, #0
    acec:	str	r0, [fp, #-4]
    acf0:	b	ad00 <MyGame_Example_TestSimpleTableWithEnum_create+0x9c>
    acf4:	ldr	r0, [sp, #8]
    acf8:	bl	13130 <MyGame_Example_TestSimpleTableWithEnum_end>
    acfc:	str	r0, [fp, #-4]
    ad00:	ldr	r0, [fp, #-4]
    ad04:	mov	sp, fp
    ad08:	pop	{fp, pc}

0000ad0c <MyGame_Example_Any_vec_start>:
    ad0c:	push	{fp, lr}
    ad10:	mov	fp, sp
    ad14:	sub	sp, sp, #8
    ad18:	str	r0, [sp, #4]
    ad1c:	ldr	r0, [sp, #4]
    ad20:	bl	0 <flatcc_builder_start_union_vector>
    ad24:	mov	sp, fp
    ad28:	pop	{fp, pc}

0000ad2c <MyGame_Example_Any_vec_push>:
    ad2c:	push	{fp, lr}
    ad30:	mov	fp, sp
    ad34:	sub	sp, sp, #16
    ad38:	str	r1, [sp, #8]
    ad3c:	str	r2, [sp, #12]
    ad40:	str	r0, [sp, #4]
    ad44:	ldr	r0, [sp, #4]
    ad48:	ldr	r1, [sp, #8]
    ad4c:	ldr	r2, [sp, #12]
    ad50:	bl	0 <flatcc_builder_union_vector_push>
    ad54:	mov	sp, fp
    ad58:	pop	{fp, pc}

0000ad5c <MyGame_Example_Any_as_TestSimpleTableWithEnum>:
    ad5c:	sub	sp, sp, #4
    ad60:	str	r1, [sp]
    ad64:	movw	r1, #2
    ad68:	strb	r1, [r0]
    ad6c:	ldr	r1, [sp]
    ad70:	str	r1, [r0, #4]
    ad74:	add	sp, sp, #4
    ad78:	bx	lr

0000ad7c <MyGame_Example_Any_vec_end>:
    ad7c:	push	{fp, lr}
    ad80:	mov	fp, sp
    ad84:	sub	sp, sp, #8
    ad88:	str	r1, [sp, #4]
    ad8c:	ldr	r1, [sp, #4]
    ad90:	bl	0 <flatcc_builder_end_union_vector>
    ad94:	mov	sp, fp
    ad98:	pop	{fp, pc}

0000ad9c <MyGame_Example_Monster_test_Alt_start>:
    ad9c:	push	{fp, lr}
    ada0:	mov	fp, sp
    ada4:	sub	sp, sp, #8
    ada8:	str	r0, [sp, #4]
    adac:	ldr	r0, [sp, #4]
    adb0:	bl	13190 <MyGame_Example_Alt_start>
    adb4:	mov	sp, fp
    adb8:	pop	{fp, pc}

0000adbc <MyGame_Example_Alt_manyany_add>:
    adbc:	push	{fp, lr}
    adc0:	mov	fp, sp
    adc4:	sub	sp, sp, #24
    adc8:	str	r1, [sp, #12]
    adcc:	str	r2, [sp, #16]
    add0:	str	r0, [sp, #8]
    add4:	ldr	r0, [sp, #12]
    add8:	cmp	r0, #0
    addc:	beq	adec <MyGame_Example_Alt_manyany_add+0x30>
    ade0:	ldr	r0, [sp, #16]
    ade4:	cmp	r0, #0
    ade8:	bne	ae14 <MyGame_Example_Alt_manyany_add+0x58>
    adec:	ldr	r0, [sp, #12]
    adf0:	ldr	r1, [sp, #16]
    adf4:	cmp	r0, r1
    adf8:	movw	r0, #0
    adfc:	moveq	r0, #1
    ae00:	tst	r0, #1
    ae04:	movw	r0, #0
    ae08:	mvneq	r0, #0
    ae0c:	str	r0, [fp, #-4]
    ae10:	b	ae84 <MyGame_Example_Alt_manyany_add+0xc8>
    ae14:	ldr	r0, [sp, #8]
    ae18:	movw	r1, #2
    ae1c:	bl	0 <flatcc_builder_table_add_offset>
    ae20:	str	r0, [sp, #4]
    ae24:	movw	r1, #0
    ae28:	cmp	r0, r1
    ae2c:	bne	ae3c <MyGame_Example_Alt_manyany_add+0x80>
    ae30:	mvn	r0, #0
    ae34:	str	r0, [fp, #-4]
    ae38:	b	ae84 <MyGame_Example_Alt_manyany_add+0xc8>
    ae3c:	ldr	r0, [sp, #12]
    ae40:	ldr	r1, [sp, #4]
    ae44:	str	r0, [r1]
    ae48:	ldr	r0, [sp, #8]
    ae4c:	movw	r1, #3
    ae50:	bl	0 <flatcc_builder_table_add_offset>
    ae54:	str	r0, [sp, #4]
    ae58:	movw	r1, #0
    ae5c:	cmp	r0, r1
    ae60:	bne	ae70 <MyGame_Example_Alt_manyany_add+0xb4>
    ae64:	mvn	r0, #0
    ae68:	str	r0, [fp, #-4]
    ae6c:	b	ae84 <MyGame_Example_Alt_manyany_add+0xc8>
    ae70:	ldr	r0, [sp, #16]
    ae74:	ldr	r1, [sp, #4]
    ae78:	str	r0, [r1]
    ae7c:	movw	r0, #0
    ae80:	str	r0, [fp, #-4]
    ae84:	ldr	r0, [fp, #-4]
    ae88:	mov	sp, fp
    ae8c:	pop	{fp, pc}

0000ae90 <MyGame_Example_Monster_test_Alt_end>:
    ae90:	push	{fp, lr}
    ae94:	mov	fp, sp
    ae98:	sub	sp, sp, #16
    ae9c:	str	r0, [fp, #-4]
    aea0:	ldr	r0, [fp, #-4]
    aea4:	bl	131b4 <MyGame_Example_Alt_end>
    aea8:	str	r0, [sp, #8]
    aeac:	ldr	r0, [sp, #8]
    aeb0:	cmp	r0, #0
    aeb4:	beq	aecc <MyGame_Example_Monster_test_Alt_end+0x3c>
    aeb8:	ldr	r0, [fp, #-4]
    aebc:	ldr	r1, [sp, #8]
    aec0:	bl	13214 <MyGame_Example_Monster_test_Alt_add>
    aec4:	str	r0, [sp, #4]
    aec8:	b	aed8 <MyGame_Example_Monster_test_Alt_end+0x48>
    aecc:	mvn	r0, #0
    aed0:	str	r0, [sp, #4]
    aed4:	b	aed8 <MyGame_Example_Monster_test_Alt_end+0x48>
    aed8:	ldr	r0, [sp, #4]
    aedc:	mov	sp, fp
    aee0:	pop	{fp, pc}

0000aee4 <MyGame_Example_Alt_manyany_is_present>:
    aee4:	push	{fp, lr}
    aee8:	mov	fp, sp
    aeec:	sub	sp, sp, #16
    aef0:	str	r0, [fp, #-4]
    aef4:	movw	r0, #0
    aef8:	strh	r0, [fp, #-6]
    aefc:	ldr	r0, [fp, #-4]
    af00:	movw	r1, #0
    af04:	cmp	r0, r1
    af08:	beq	af14 <MyGame_Example_Alt_manyany_is_present+0x30>
    af0c:	b	af10 <MyGame_Example_Alt_manyany_is_present+0x2c>
    af10:	b	af34 <MyGame_Example_Alt_manyany_is_present+0x50>
    af14:	movw	r0, #0
    af18:	movt	r0, #0
    af1c:	movw	r1, #0
    af20:	movt	r1, #0
    af24:	movw	r2, #621	; 0x26d
    af28:	movw	r3, #0
    af2c:	movt	r3, #0
    af30:	bl	0 <__assert_fail>
    af34:	mov	r0, #3
    af38:	strh	r0, [sp, #8]
    af3c:	ldr	r0, [fp, #-4]
    af40:	str	r0, [sp]
    af44:	bl	f4c8 <__flatbuffers_soffset_read_from_pe>
    af48:	ldr	r1, [sp]
    af4c:	sub	r0, r1, r0
    af50:	str	r0, [sp, #4]
    af54:	ldr	r0, [sp, #4]
    af58:	bl	f4ec <__flatbuffers_voffset_read_from_pe>
    af5c:	ldrh	r1, [sp, #8]
    af60:	add	r1, r1, #3
    af64:	lsl	r1, r1, #1
    af68:	cmp	r0, r1
    af6c:	bcc	af88 <MyGame_Example_Alt_manyany_is_present+0xa4>
    af70:	ldr	r0, [sp, #4]
    af74:	ldrh	r1, [sp, #8]
    af78:	add	r0, r0, r1, lsl #1
    af7c:	add	r0, r0, #4
    af80:	bl	f4ec <__flatbuffers_voffset_read_from_pe>
    af84:	strh	r0, [fp, #-6]
    af88:	ldrh	r0, [fp, #-6]
    af8c:	cmp	r0, #0
    af90:	movw	r0, #0
    af94:	movne	r0, #1
    af98:	and	r0, r0, #1
    af9c:	mov	sp, fp
    afa0:	pop	{fp, pc}

0000afa4 <MyGame_Example_Alt_manyany_type>:
    afa4:	push	{fp, lr}
    afa8:	mov	fp, sp
    afac:	sub	sp, sp, #32
    afb0:	str	r0, [fp, #-8]
    afb4:	movw	r0, #0
    afb8:	strh	r0, [fp, #-14]
    afbc:	ldr	r0, [fp, #-8]
    afc0:	movw	r1, #0
    afc4:	cmp	r0, r1
    afc8:	beq	afd4 <MyGame_Example_Alt_manyany_type+0x30>
    afcc:	b	afd0 <MyGame_Example_Alt_manyany_type+0x2c>
    afd0:	b	aff4 <MyGame_Example_Alt_manyany_type+0x50>
    afd4:	movw	r0, #0
    afd8:	movt	r0, #0
    afdc:	movw	r1, #0
    afe0:	movt	r1, #0
    afe4:	movw	r2, #621	; 0x26d
    afe8:	movw	r3, #0
    afec:	movt	r3, #0
    aff0:	bl	0 <__assert_fail>
    aff4:	mov	r0, #2
    aff8:	strh	r0, [sp, #16]
    affc:	ldr	r0, [fp, #-8]
    b000:	str	r0, [sp, #8]
    b004:	bl	f4c8 <__flatbuffers_soffset_read_from_pe>
    b008:	ldr	r1, [sp, #8]
    b00c:	sub	r0, r1, r0
    b010:	str	r0, [sp, #12]
    b014:	ldr	r0, [sp, #12]
    b018:	bl	f4ec <__flatbuffers_voffset_read_from_pe>
    b01c:	ldrh	r1, [sp, #16]
    b020:	add	r1, r1, #3
    b024:	lsl	r1, r1, #1
    b028:	cmp	r0, r1
    b02c:	bcc	b048 <MyGame_Example_Alt_manyany_type+0xa4>
    b030:	ldr	r0, [sp, #12]
    b034:	ldrh	r1, [sp, #16]
    b038:	add	r0, r0, r1, lsl #1
    b03c:	add	r0, r0, #4
    b040:	bl	f4ec <__flatbuffers_voffset_read_from_pe>
    b044:	strh	r0, [fp, #-14]
    b048:	ldrsh	r0, [fp, #-14]
    b04c:	cmp	r0, #0
    b050:	beq	b08c <MyGame_Example_Alt_manyany_type+0xe8>
    b054:	ldr	r0, [fp, #-8]
    b058:	ldrh	r1, [fp, #-14]
    b05c:	add	r0, r0, r1
    b060:	str	r0, [fp, #-12]
    b064:	ldr	r0, [fp, #-12]
    b068:	add	r0, r0, #4
    b06c:	ldr	r1, [fp, #-12]
    b070:	str	r0, [sp, #4]
    b074:	mov	r0, r1
    b078:	bl	f490 <__flatbuffers_uoffset_read_from_pe>
    b07c:	ldr	r1, [sp, #4]
    b080:	add	r0, r1, r0
    b084:	str	r0, [fp, #-4]
    b088:	b	b094 <MyGame_Example_Alt_manyany_type+0xf0>
    b08c:	movw	r0, #0
    b090:	str	r0, [fp, #-4]
    b094:	ldr	r0, [fp, #-4]
    b098:	mov	sp, fp
    b09c:	pop	{fp, pc}

0000b0a0 <MyGame_Example_Alt_manyany>:
    b0a0:	push	{fp, lr}
    b0a4:	mov	fp, sp
    b0a8:	sub	sp, sp, #32
    b0ac:	str	r0, [fp, #-8]
    b0b0:	movw	r0, #0
    b0b4:	strh	r0, [fp, #-14]
    b0b8:	ldr	r0, [fp, #-8]
    b0bc:	movw	r1, #0
    b0c0:	cmp	r0, r1
    b0c4:	beq	b0d0 <MyGame_Example_Alt_manyany+0x30>
    b0c8:	b	b0cc <MyGame_Example_Alt_manyany+0x2c>
    b0cc:	b	b0f0 <MyGame_Example_Alt_manyany+0x50>
    b0d0:	movw	r0, #0
    b0d4:	movt	r0, #0
    b0d8:	movw	r1, #0
    b0dc:	movt	r1, #0
    b0e0:	movw	r2, #621	; 0x26d
    b0e4:	movw	r3, #0
    b0e8:	movt	r3, #0
    b0ec:	bl	0 <__assert_fail>
    b0f0:	mov	r0, #3
    b0f4:	strh	r0, [sp, #16]
    b0f8:	ldr	r0, [fp, #-8]
    b0fc:	str	r0, [sp, #8]
    b100:	bl	f4c8 <__flatbuffers_soffset_read_from_pe>
    b104:	ldr	r1, [sp, #8]
    b108:	sub	r0, r1, r0
    b10c:	str	r0, [sp, #12]
    b110:	ldr	r0, [sp, #12]
    b114:	bl	f4ec <__flatbuffers_voffset_read_from_pe>
    b118:	ldrh	r1, [sp, #16]
    b11c:	add	r1, r1, #3
    b120:	lsl	r1, r1, #1
    b124:	cmp	r0, r1
    b128:	bcc	b144 <MyGame_Example_Alt_manyany+0xa4>
    b12c:	ldr	r0, [sp, #12]
    b130:	ldrh	r1, [sp, #16]
    b134:	add	r0, r0, r1, lsl #1
    b138:	add	r0, r0, #4
    b13c:	bl	f4ec <__flatbuffers_voffset_read_from_pe>
    b140:	strh	r0, [fp, #-14]
    b144:	ldrsh	r0, [fp, #-14]
    b148:	cmp	r0, #0
    b14c:	beq	b188 <MyGame_Example_Alt_manyany+0xe8>
    b150:	ldr	r0, [fp, #-8]
    b154:	ldrh	r1, [fp, #-14]
    b158:	add	r0, r0, r1
    b15c:	str	r0, [fp, #-12]
    b160:	ldr	r0, [fp, #-12]
    b164:	add	r0, r0, #4
    b168:	ldr	r1, [fp, #-12]
    b16c:	str	r0, [sp, #4]
    b170:	mov	r0, r1
    b174:	bl	f490 <__flatbuffers_uoffset_read_from_pe>
    b178:	ldr	r1, [sp, #4]
    b17c:	add	r0, r1, r0
    b180:	str	r0, [fp, #-4]
    b184:	b	b190 <MyGame_Example_Alt_manyany+0xf0>
    b188:	movw	r0, #0
    b18c:	str	r0, [fp, #-4]
    b190:	ldr	r0, [fp, #-4]
    b194:	mov	sp, fp
    b198:	pop	{fp, pc}

0000b19c <MyGame_Example_Any_vec_len>:
    b19c:	push	{fp, lr}
    b1a0:	mov	fp, sp
    b1a4:	sub	sp, sp, #8
    b1a8:	str	r0, [sp, #4]
    b1ac:	ldr	r0, [sp, #4]
    b1b0:	bl	11b9c <flatbuffers_vec_len>
    b1b4:	mov	sp, fp
    b1b8:	pop	{fp, pc}

0000b1bc <flatbuffers_union_type_vec_at>:
    b1bc:	push	{fp, lr}
    b1c0:	mov	fp, sp
    b1c4:	sub	sp, sp, #8
    b1c8:	str	r0, [sp, #4]
    b1cc:	str	r1, [sp]
    b1d0:	ldr	r0, [sp, #4]
    b1d4:	bl	11b9c <flatbuffers_vec_len>
    b1d8:	ldr	r1, [sp]
    b1dc:	cmp	r0, r1
    b1e0:	bls	b1ec <flatbuffers_union_type_vec_at+0x30>
    b1e4:	b	b1e8 <flatbuffers_union_type_vec_at+0x2c>
    b1e8:	b	b20c <flatbuffers_union_type_vec_at+0x50>
    b1ec:	movw	r0, #0
    b1f0:	movt	r0, #0
    b1f4:	movw	r1, #0
    b1f8:	movt	r1, #0
    b1fc:	movw	r2, #405	; 0x195
    b200:	movw	r3, #0
    b204:	movt	r3, #0
    b208:	bl	0 <__assert_fail>
    b20c:	ldr	r0, [sp, #4]
    b210:	ldr	r1, [sp]
    b214:	add	r0, r0, r1
    b218:	bl	13278 <flatbuffers_union_type_read_from_pe>
    b21c:	and	r0, r0, #255	; 0xff
    b220:	mov	sp, fp
    b224:	pop	{fp, pc}

0000b228 <flatbuffers_generic_vec_at>:
    b228:	push	{fp, lr}
    b22c:	mov	fp, sp
    b230:	sub	sp, sp, #16
    b234:	str	r0, [fp, #-4]
    b238:	str	r1, [sp, #8]
    b23c:	ldr	r0, [fp, #-4]
    b240:	ldr	r1, [sp, #8]
    b244:	add	r0, r0, r1, lsl #2
    b248:	str	r0, [sp, #4]
    b24c:	ldr	r0, [fp, #-4]
    b250:	bl	11b9c <flatbuffers_vec_len>
    b254:	ldr	r1, [sp, #8]
    b258:	cmp	r0, r1
    b25c:	bls	b268 <flatbuffers_generic_vec_at+0x40>
    b260:	b	b264 <flatbuffers_generic_vec_at+0x3c>
    b264:	b	b288 <flatbuffers_generic_vec_at+0x60>
    b268:	movw	r0, #0
    b26c:	movt	r0, #0
    b270:	movw	r1, #0
    b274:	movt	r1, #0
    b278:	movw	r2, #117	; 0x75
    b27c:	movw	r3, #0
    b280:	movt	r3, #0
    b284:	bl	0 <__assert_fail>
    b288:	ldr	r0, [sp, #4]
    b28c:	ldr	r1, [sp, #4]
    b290:	str	r0, [sp]
    b294:	mov	r0, r1
    b298:	bl	f490 <__flatbuffers_uoffset_read_from_pe>
    b29c:	ldr	r1, [sp]
    b2a0:	add	r0, r1, r0
    b2a4:	mov	sp, fp
    b2a8:	pop	{fp, pc}

0000b2ac <MyGame_Example_TestSimpleTableWithEnum_color>:
    b2ac:	push	{fp, lr}
    b2b0:	mov	fp, sp
    b2b4:	sub	sp, sp, #24
    b2b8:	str	r0, [fp, #-4]
    b2bc:	movw	r0, #0
    b2c0:	strh	r0, [fp, #-6]
    b2c4:	ldr	r0, [fp, #-4]
    b2c8:	movw	r1, #0
    b2cc:	cmp	r0, r1
    b2d0:	beq	b2dc <MyGame_Example_TestSimpleTableWithEnum_color+0x30>
    b2d4:	b	b2d8 <MyGame_Example_TestSimpleTableWithEnum_color+0x2c>
    b2d8:	b	b2fc <MyGame_Example_TestSimpleTableWithEnum_color+0x50>
    b2dc:	movw	r0, #0
    b2e0:	movt	r0, #0
    b2e4:	movw	r1, #0
    b2e8:	movt	r1, #0
    b2ec:	movw	r2, #579	; 0x243
    b2f0:	movw	r3, #0
    b2f4:	movt	r3, #0
    b2f8:	bl	0 <__assert_fail>
    b2fc:	mov	r0, #0
    b300:	strh	r0, [fp, #-8]
    b304:	ldr	r0, [fp, #-4]
    b308:	str	r0, [sp, #8]
    b30c:	bl	f4c8 <__flatbuffers_soffset_read_from_pe>
    b310:	ldr	r1, [sp, #8]
    b314:	sub	r0, r1, r0
    b318:	str	r0, [sp, #12]
    b31c:	ldr	r0, [sp, #12]
    b320:	bl	f4ec <__flatbuffers_voffset_read_from_pe>
    b324:	ldrh	r1, [fp, #-8]
    b328:	add	r1, r1, #3
    b32c:	lsl	r1, r1, #1
    b330:	cmp	r0, r1
    b334:	bcc	b350 <MyGame_Example_TestSimpleTableWithEnum_color+0xa4>
    b338:	ldr	r0, [sp, #12]
    b33c:	ldrh	r1, [fp, #-8]
    b340:	add	r0, r0, r1, lsl #1
    b344:	add	r0, r0, #4
    b348:	bl	f4ec <__flatbuffers_voffset_read_from_pe>
    b34c:	strh	r0, [fp, #-6]
    b350:	ldrh	r0, [fp, #-6]
    b354:	cmp	r0, #0
    b358:	beq	b378 <MyGame_Example_TestSimpleTableWithEnum_color+0xcc>
    b35c:	ldr	r0, [fp, #-4]
    b360:	ldrh	r1, [fp, #-6]
    b364:	add	r0, r0, r1
    b368:	bl	11b60 <MyGame_Example_Color_read_from_pe>
    b36c:	sxtb	r0, r0
    b370:	str	r0, [sp, #4]
    b374:	b	b384 <MyGame_Example_TestSimpleTableWithEnum_color+0xd8>
    b378:	movw	r0, #2
    b37c:	str	r0, [sp, #4]
    b380:	b	b384 <MyGame_Example_TestSimpleTableWithEnum_color+0xd8>
    b384:	ldr	r0, [sp, #4]
    b388:	sxtb	r0, r0
    b38c:	mov	sp, fp
    b390:	pop	{fp, pc}

0000b394 <MyGame_Example_Alt_manyany_union>:
    b394:	push	{fp, lr}
    b398:	mov	fp, sp
    b39c:	sub	sp, sp, #16
    b3a0:	str	r1, [fp, #-4]
    b3a4:	ldr	r1, [fp, #-4]
    b3a8:	str	r0, [sp, #8]
    b3ac:	mov	r0, r1
    b3b0:	bl	afa4 <MyGame_Example_Alt_manyany_type>
    b3b4:	ldr	r1, [sp, #8]
    b3b8:	str	r0, [r1]
    b3bc:	ldr	r0, [fp, #-4]
    b3c0:	bl	b0a0 <MyGame_Example_Alt_manyany>
    b3c4:	ldr	r1, [sp, #8]
    b3c8:	str	r0, [r1, #4]
    b3cc:	ldr	r0, [r1]
    b3d0:	bl	11b9c <flatbuffers_vec_len>
    b3d4:	ldr	r1, [sp, #8]
    b3d8:	ldr	r2, [r1, #4]
    b3dc:	str	r0, [sp, #4]
    b3e0:	mov	r0, r2
    b3e4:	bl	11b9c <flatbuffers_vec_len>
    b3e8:	ldr	r1, [sp, #4]
    b3ec:	cmp	r1, r0
    b3f0:	bne	b3fc <MyGame_Example_Alt_manyany_union+0x68>
    b3f4:	b	b3f8 <MyGame_Example_Alt_manyany_union+0x64>
    b3f8:	b	b41c <MyGame_Example_Alt_manyany_union+0x88>
    b3fc:	movw	r0, #0
    b400:	movt	r0, #0
    b404:	movw	r1, #0
    b408:	movt	r1, #0
    b40c:	movw	r2, #621	; 0x26d
    b410:	movw	r3, #0
    b414:	movt	r3, #0
    b418:	bl	0 <__assert_fail>
    b41c:	mov	sp, fp
    b420:	pop	{fp, pc}

0000b424 <MyGame_Example_Any_union_vec_len>:
    b424:	push	{fp, lr}
    b428:	mov	fp, sp
    b42c:	sub	sp, sp, #8
    b430:	str	r0, [sp]
    b434:	str	r1, [sp, #4]
    b438:	ldr	r0, [sp]
    b43c:	bl	11b9c <flatbuffers_vec_len>
    b440:	mov	sp, fp
    b444:	pop	{fp, pc}

0000b448 <MyGame_Example_Any_union_vec_at>:
    b448:	push	{fp, lr}
    b44c:	mov	fp, sp
    b450:	sub	sp, sp, #24
    b454:	str	r1, [fp, #-8]
    b458:	str	r2, [fp, #-4]
    b45c:	str	r3, [sp, #12]
    b460:	mov	r1, r0
    b464:	str	r0, [sp, #4]
    b468:	mov	r0, r1
    b46c:	movw	r1, #0
    b470:	and	r1, r1, #255	; 0xff
    b474:	movw	r2, #8
    b478:	bl	0 <memset>
    b47c:	ldr	r0, [fp, #-8]
    b480:	bl	11b9c <flatbuffers_vec_len>
    b484:	str	r0, [sp, #8]
    b488:	ldr	r0, [sp, #8]
    b48c:	ldr	r1, [sp, #12]
    b490:	cmp	r0, r1
    b494:	bls	b4a0 <MyGame_Example_Any_union_vec_at+0x58>
    b498:	b	b49c <MyGame_Example_Any_union_vec_at+0x54>
    b49c:	b	b4c0 <MyGame_Example_Any_union_vec_at+0x78>
    b4a0:	movw	r0, #0
    b4a4:	movt	r0, #0
    b4a8:	movw	r1, #0
    b4ac:	movt	r1, #0
    b4b0:	movw	r2, #520	; 0x208
    b4b4:	movw	r3, #0
    b4b8:	movt	r3, #0
    b4bc:	bl	0 <__assert_fail>
    b4c0:	ldr	r0, [fp, #-8]
    b4c4:	ldr	r1, [sp, #12]
    b4c8:	add	r0, r0, r1
    b4cc:	ldrb	r0, [r0]
    b4d0:	ldr	r1, [sp, #4]
    b4d4:	strb	r0, [r1]
    b4d8:	ldrb	r0, [r1]
    b4dc:	cmp	r0, #0
    b4e0:	bne	b4e8 <MyGame_Example_Any_union_vec_at+0xa0>
    b4e4:	b	b4fc <MyGame_Example_Any_union_vec_at+0xb4>
    b4e8:	ldr	r0, [fp, #-4]
    b4ec:	ldr	r1, [sp, #12]
    b4f0:	bl	b228 <flatbuffers_generic_vec_at>
    b4f4:	ldr	r1, [sp, #4]
    b4f8:	str	r0, [r1, #4]
    b4fc:	mov	sp, fp
    b500:	pop	{fp, pc}

0000b504 <test_mixed_type_union>:
    b504:	push	{r4, r5, fp, lr}
    b508:	add	fp, sp, #8
    b50c:	sub	sp, sp, #312	; 0x138
    b510:	str	r0, [fp, #-16]
    b514:	mvn	r0, #0
    b518:	str	r0, [fp, #-32]	; 0xffffffe0
    b51c:	ldr	r0, [fp, #-16]
    b520:	bl	0 <flatcc_builder_reset>
    b524:	ldr	r1, [fp, #-16]
    b528:	str	r0, [sp, #104]	; 0x68
    b52c:	mov	r0, r1
    b530:	bl	bed4 <Fantasy_Movie_start_as_root>
    b534:	ldr	r1, [fp, #-16]
    b538:	mov	r2, #10
    b53c:	str	r0, [sp, #100]	; 0x64
    b540:	mov	r0, r1
    b544:	mov	r1, r2
    b548:	bl	bf20 <Fantasy_BookReader_create>
    b54c:	str	r0, [fp, #-52]	; 0xffffffcc
    b550:	ldr	r0, [fp, #-16]
    b554:	mov	r1, #22
    b558:	bl	bf88 <Fantasy_Rapunzel_create>
    b55c:	str	r0, [fp, #-44]	; 0xffffffd4
    b560:	ldr	r1, [fp, #-44]	; 0xffffffd4
    b564:	sub	r0, fp, #100	; 0x64
    b568:	bl	bff0 <Fantasy_Character_as_Rapunzel>
    b56c:	vldr	d16, [fp, #-100]	; 0xffffff9c
    b570:	vstr	d16, [fp, #-40]	; 0xffffffd8
    b574:	ldr	r0, [fp, #-16]
    b578:	mov	r1, #19
    b57c:	bl	c010 <Fantasy_Movie_main_character_Rapunzel_create>
    b580:	ldr	r1, [fp, #-16]
    b584:	ldr	r2, [fp, #-44]	; 0xffffffd4
    b588:	str	r0, [sp, #96]	; 0x60
    b58c:	mov	r0, r1
    b590:	mov	r1, r2
    b594:	bl	c088 <Fantasy_Movie_cameo_Rapunzel_add>
    b598:	ldr	r1, [fp, #-16]
    b59c:	mov	r2, #42	; 0x2a
    b5a0:	str	r0, [sp, #92]	; 0x5c
    b5a4:	mov	r0, r1
    b5a8:	mov	r1, r2
    b5ac:	bl	c0cc <Fantasy_Attacker_create>
    b5b0:	str	r0, [fp, #-48]	; 0xffffffd0
    b5b4:	ldr	r0, [fp, #-16]
    b5b8:	ldr	r1, [fp, #-48]	; 0xffffffd0
    b5bc:	bl	c128 <Fantasy_Movie_antagonist_MuLan_add>
    b5c0:	ldr	r1, [fp, #-16]
    b5c4:	movw	r2, #0
    b5c8:	movt	r2, #0
    b5cc:	str	r0, [sp, #88]	; 0x58
    b5d0:	mov	r0, r1
    b5d4:	mov	r1, r2
    b5d8:	bl	c16c <Fantasy_Movie_side_kick_Other_create_str>
    b5dc:	ldr	r1, [fp, #-16]
    b5e0:	str	r0, [sp, #84]	; 0x54
    b5e4:	mov	r0, r1
    b5e8:	bl	c1b8 <Fantasy_Movie_characters_start>
    b5ec:	ldr	r1, [fp, #-16]
    b5f0:	ldr	r2, [fp, #-40]	; 0xffffffd8
    b5f4:	ldr	r3, [fp, #-36]	; 0xffffffdc
    b5f8:	str	r0, [sp, #80]	; 0x50
    b5fc:	mov	r0, r1
    b600:	mov	r1, r2
    b604:	mov	r2, r3
    b608:	bl	c1d8 <Fantasy_Movie_characters_push>
    b60c:	ldr	r1, [fp, #-16]
    b610:	ldr	r2, [fp, #-48]	; 0xffffffd0
    b614:	str	r0, [sp, #76]	; 0x4c
    b618:	mov	r0, r1
    b61c:	mov	r1, r2
    b620:	bl	c208 <Fantasy_Movie_characters_MuLan_push>
    b624:	ldr	r1, [fp, #-16]
    b628:	mov	r2, #1
    b62c:	str	r0, [sp, #72]	; 0x48
    b630:	mov	r0, r1
    b634:	mov	r1, r2
    b638:	bl	c24c <Fantasy_Movie_characters_MuLan_push_create>
    b63c:	ldr	r1, [fp, #-16]
    b640:	movw	r2, #0
    b644:	movt	r2, #0
    b648:	str	r0, [sp, #68]	; 0x44
    b64c:	mov	r0, r1
    b650:	str	r1, [sp, #64]	; 0x40
    b654:	mov	r1, r2
    b658:	bl	5e78 <flatbuffers_string_create_str>
    b65c:	sub	r1, fp, #108	; 0x6c
    b660:	str	r0, [sp, #60]	; 0x3c
    b664:	mov	r0, r1
    b668:	ldr	r1, [sp, #60]	; 0x3c
    b66c:	bl	c2cc <Fantasy_Character_as_Other>
    b670:	ldr	r1, [fp, #-108]	; 0xffffff94
    b674:	ldr	r2, [fp, #-104]	; 0xffffff98
    b678:	ldr	r0, [sp, #64]	; 0x40
    b67c:	bl	c29c <Fantasy_Character_vec_push>
    b680:	ldr	r1, [fp, #-16]
    b684:	ldr	r2, [fp, #-52]	; 0xffffffcc
    b688:	str	r0, [sp, #56]	; 0x38
    b68c:	mov	r0, r1
    b690:	mov	r1, r2
    b694:	bl	c2ec <Fantasy_Movie_characters_Belle_push>
    b698:	ldr	r1, [fp, #-16]
    b69c:	str	r0, [sp, #52]	; 0x34
    b6a0:	mov	r0, r1
    b6a4:	bl	c330 <Fantasy_Movie_characters_Belle_push_start>
    b6a8:	str	r0, [fp, #-56]	; 0xffffffc8
    b6ac:	ldr	r0, [fp, #-56]	; 0xffffffc8
    b6b0:	movw	r1, #3
    b6b4:	str	r1, [r0]
    b6b8:	ldr	r0, [fp, #-16]
    b6bc:	bl	c350 <Fantasy_Movie_characters_Belle_push_end>
    b6c0:	ldr	r1, [fp, #-16]
    b6c4:	ldr	r2, [fp, #-16]
    b6c8:	str	r0, [sp, #48]	; 0x30
    b6cc:	mov	r0, r2
    b6d0:	movw	r2, #1
    b6d4:	str	r1, [sp, #44]	; 0x2c
    b6d8:	mov	r1, r2
    b6dc:	bl	bf20 <Fantasy_BookReader_create>
    b6e0:	ldr	r1, [sp, #44]	; 0x2c
    b6e4:	str	r0, [sp, #40]	; 0x28
    b6e8:	mov	r0, r1
    b6ec:	ldr	r1, [sp, #40]	; 0x28
    b6f0:	bl	c2ec <Fantasy_Movie_characters_Belle_push>
    b6f4:	ldr	r1, [fp, #-16]
    b6f8:	str	r0, [sp, #36]	; 0x24
    b6fc:	mov	r0, r1
    b700:	movw	r1, #2
    b704:	bl	c398 <Fantasy_Movie_characters_Belle_push_create>
    b708:	ldr	r1, [fp, #-16]
    b70c:	ldr	r2, [fp, #-16]
    b710:	str	r0, [sp, #32]
    b714:	mov	r0, r2
    b718:	movw	r2, #0
    b71c:	movt	r2, #0
    b720:	str	r1, [sp, #28]
    b724:	mov	r1, r2
    b728:	bl	5e78 <flatbuffers_string_create_str>
    b72c:	ldr	r1, [sp, #28]
    b730:	str	r0, [sp, #24]
    b734:	mov	r0, r1
    b738:	ldr	r1, [sp, #24]
    b73c:	bl	c3e8 <Fantasy_Movie_characters_Other_push>
    b740:	ldr	r1, [fp, #-16]
    b744:	str	r0, [sp, #20]
    b748:	mov	r0, r1
    b74c:	movw	r1, #0
    b750:	movt	r1, #0
    b754:	bl	c42c <Fantasy_Movie_characters_Other_push_create_str>
    b758:	ldr	r1, [fp, #-16]
    b75c:	str	r0, [sp, #16]
    b760:	mov	r0, r1
    b764:	bl	c47c <Fantasy_Movie_characters_end>
    b768:	ldr	r1, [fp, #-16]
    b76c:	str	r0, [sp, #12]
    b770:	mov	r0, r1
    b774:	bl	c4bc <Fantasy_Movie_end_as_root>
    b778:	ldr	r1, [fp, #-16]
    b77c:	str	r0, [sp, #8]
    b780:	mov	r0, r1
    b784:	sub	r1, fp, #24
    b788:	bl	0 <flatcc_builder_finalize_aligned_buffer>
    b78c:	str	r0, [fp, #-20]	; 0xffffffec
    b790:	ldr	r1, [fp, #-20]	; 0xffffffec
    b794:	ldr	r2, [fp, #-24]	; 0xffffffe8
    b798:	movw	r0, #0
    b79c:	movt	r0, #0
    b7a0:	ldr	r3, [r0]
    b7a4:	movw	r0, #0
    b7a8:	movt	r0, #0
    b7ac:	bl	adc <hexdump>
    b7b0:	ldr	r0, [fp, #-20]	; 0xffffffec
    b7b4:	ldr	r1, [fp, #-24]	; 0xffffffe8
    b7b8:	bl	c4fc <Fantasy_Movie_verify_as_root>
    b7bc:	str	r0, [fp, #-32]	; 0xffffffe0
    b7c0:	cmp	r0, #0
    b7c4:	beq	b7f4 <test_mixed_type_union+0x2f0>
    b7c8:	ldr	r0, [fp, #-32]	; 0xffffffe0
    b7cc:	bl	0 <flatcc_verify_error_string>
    b7d0:	movw	r1, #0
    b7d4:	movt	r1, #0
    b7d8:	str	r0, [sp, #4]
    b7dc:	mov	r0, r1
    b7e0:	ldr	r1, [sp, #4]
    b7e4:	bl	0 <printf>
    b7e8:	mvn	r1, #0
    b7ec:	str	r1, [fp, #-12]
    b7f0:	b	bec8 <test_mixed_type_union+0x9c4>
    b7f4:	mvn	r0, #0
    b7f8:	str	r0, [fp, #-32]	; 0xffffffe0
    b7fc:	ldr	r0, [fp, #-20]	; 0xffffffec
    b800:	bl	c534 <Fantasy_Movie_as_root>
    b804:	str	r0, [fp, #-60]	; 0xffffffc4
    b808:	ldr	r0, [fp, #-60]	; 0xffffffc4
    b80c:	bl	c5ac <Fantasy_Movie_main_character_is_present>
    b810:	cmp	r0, #0
    b814:	bne	b828 <test_mixed_type_union+0x324>
    b818:	movw	r0, #0
    b81c:	movt	r0, #0
    b820:	bl	0 <printf>
    b824:	b	beb8 <test_mixed_type_union+0x9b4>
    b828:	ldr	r0, [fp, #-60]	; 0xffffffc4
    b82c:	bl	c66c <Fantasy_Movie_characters_is_present>
    b830:	cmp	r0, #0
    b834:	bne	b848 <test_mixed_type_union+0x344>
    b838:	movw	r0, #0
    b83c:	movt	r0, #0
    b840:	bl	0 <printf>
    b844:	b	beb8 <test_mixed_type_union+0x9b4>
    b848:	ldr	r1, [fp, #-60]	; 0xffffffc4
    b84c:	sub	r0, fp, #116	; 0x74
    b850:	bl	c72c <Fantasy_Movie_main_character_union>
    b854:	ldr	r0, [fp, #-116]	; 0xffffff8c
    b858:	str	r0, [fp, #-80]	; 0xffffffb0
    b85c:	ldr	r0, [fp, #-112]	; 0xffffff90
    b860:	str	r0, [fp, #-76]	; 0xffffffb4
    b864:	ldrb	r0, [fp, #-80]	; 0xffffffb0
    b868:	cmp	r0, #8
    b86c:	beq	b880 <test_mixed_type_union+0x37c>
    b870:	movw	r0, #0
    b874:	movt	r0, #0
    b878:	bl	0 <printf>
    b87c:	b	beb8 <test_mixed_type_union+0x9b4>
    b880:	ldr	r0, [fp, #-76]	; 0xffffffb4
    b884:	str	r0, [fp, #-84]	; 0xffffffac
    b888:	ldr	r0, [fp, #-84]	; 0xffffffac
    b88c:	movw	r1, #0
    b890:	cmp	r0, r1
    b894:	bne	b8a4 <test_mixed_type_union+0x3a0>
    b898:	movw	r0, #0
    b89c:	movt	r0, #0
    b8a0:	bl	0 <printf>
    b8a4:	ldr	r0, [fp, #-84]	; 0xffffffac
    b8a8:	bl	c790 <Fantasy_Rapunzel_hair_length>
    b8ac:	uxth	r0, r0
    b8b0:	cmp	r0, #19
    b8b4:	ble	b8c8 <test_mixed_type_union+0x3c4>
    b8b8:	movw	r0, #0
    b8bc:	movt	r0, #0
    b8c0:	bl	0 <printf>
    b8c4:	b	beb8 <test_mixed_type_union+0x9b4>
    b8c8:	ldr	r0, [fp, #-84]	; 0xffffffac
    b8cc:	bl	c790 <Fantasy_Rapunzel_hair_length>
    b8d0:	uxth	r0, r0
    b8d4:	cmp	r0, #19
    b8d8:	bge	b8ec <test_mixed_type_union+0x3e8>
    b8dc:	movw	r0, #0
    b8e0:	movt	r0, #0
    b8e4:	bl	0 <printf>
    b8e8:	b	beb8 <test_mixed_type_union+0x9b4>
    b8ec:	ldr	r0, [fp, #-60]	; 0xffffffc4
    b8f0:	bl	c7e0 <Fantasy_Movie_cameo_type>
    b8f4:	and	r0, r0, #255	; 0xff
    b8f8:	cmp	r0, #8
    b8fc:	beq	b910 <test_mixed_type_union+0x40c>
    b900:	movw	r0, #0
    b904:	movt	r0, #0
    b908:	bl	0 <printf>
    b90c:	b	beb8 <test_mixed_type_union+0x9b4>
    b910:	ldr	r0, [fp, #-60]	; 0xffffffc4
    b914:	bl	c8c8 <Fantasy_Movie_cameo>
    b918:	str	r0, [fp, #-84]	; 0xffffffac
    b91c:	ldr	r0, [fp, #-84]	; 0xffffffac
    b920:	movw	r1, #0
    b924:	cmp	r0, r1
    b928:	bne	b93c <test_mixed_type_union+0x438>
    b92c:	movw	r0, #0
    b930:	movt	r0, #0
    b934:	bl	0 <printf>
    b938:	b	beb8 <test_mixed_type_union+0x9b4>
    b93c:	ldr	r0, [fp, #-84]	; 0xffffffac
    b940:	bl	c790 <Fantasy_Rapunzel_hair_length>
    b944:	uxth	r0, r0
    b948:	cmp	r0, #22
    b94c:	beq	b960 <test_mixed_type_union+0x45c>
    b950:	movw	r0, #0
    b954:	movt	r0, #0
    b958:	bl	0 <printf>
    b95c:	b	beb8 <test_mixed_type_union+0x9b4>
    b960:	ldr	r0, [fp, #-60]	; 0xffffffc4
    b964:	bl	c9c0 <Fantasy_Movie_antagonist_type>
    b968:	and	r0, r0, #255	; 0xff
    b96c:	cmp	r0, #2
    b970:	beq	b984 <test_mixed_type_union+0x480>
    b974:	movw	r0, #0
    b978:	movt	r0, #0
    b97c:	bl	0 <printf>
    b980:	b	beb8 <test_mixed_type_union+0x9b4>
    b984:	ldr	r0, [fp, #-60]	; 0xffffffc4
    b988:	bl	caa8 <Fantasy_Movie_antagonist>
    b98c:	str	r0, [fp, #-88]	; 0xffffffa8
    b990:	ldr	r0, [fp, #-88]	; 0xffffffa8
    b994:	movw	r1, #0
    b998:	cmp	r0, r1
    b99c:	beq	b9b0 <test_mixed_type_union+0x4ac>
    b9a0:	ldr	r0, [fp, #-88]	; 0xffffffa8
    b9a4:	bl	cba0 <Fantasy_Attacker_sword_attack_damage>
    b9a8:	cmp	r0, #42	; 0x2a
    b9ac:	beq	b9c0 <test_mixed_type_union+0x4bc>
    b9b0:	movw	r0, #0
    b9b4:	movt	r0, #0
    b9b8:	bl	0 <printf>
    b9bc:	b	beb8 <test_mixed_type_union+0x9b4>
    b9c0:	ldr	r0, [fp, #-60]	; 0xffffffc4
    b9c4:	bl	cc80 <Fantasy_Movie_side_kick_type>
    b9c8:	and	r0, r0, #255	; 0xff
    b9cc:	cmp	r0, #11
    b9d0:	beq	b9e4 <test_mixed_type_union+0x4e0>
    b9d4:	movw	r0, #0
    b9d8:	movt	r0, #0
    b9dc:	bl	0 <printf>
    b9e0:	b	beb8 <test_mixed_type_union+0x9b4>
    b9e4:	ldr	r0, [fp, #-60]	; 0xffffffc4
    b9e8:	bl	cdbc <Fantasy_Movie_side_kick>
    b9ec:	bl	cd68 <flatbuffers_string_cast_from_generic>
    b9f0:	str	r0, [fp, #-92]	; 0xffffffa4
    b9f4:	ldr	r0, [fp, #-92]	; 0xffffffa4
    b9f8:	movw	r1, #0
    b9fc:	cmp	r0, r1
    ba00:	bne	ba14 <test_mixed_type_union+0x510>
    ba04:	movw	r0, #0
    ba08:	movt	r0, #0
    ba0c:	bl	0 <printf>
    ba10:	b	beb8 <test_mixed_type_union+0x9b4>
    ba14:	ldr	r0, [fp, #-92]	; 0xffffffa4
    ba18:	movw	r1, #0
    ba1c:	movt	r1, #0
    ba20:	bl	0 <strcmp>
    ba24:	cmp	r0, #0
    ba28:	beq	ba40 <test_mixed_type_union+0x53c>
    ba2c:	ldr	r1, [fp, #-92]	; 0xffffffa4
    ba30:	movw	r0, #0
    ba34:	movt	r0, #0
    ba38:	bl	0 <printf>
    ba3c:	b	beb8 <test_mixed_type_union+0x9b4>
    ba40:	ldr	r0, [fp, #-60]	; 0xffffffc4
    ba44:	bl	ceb4 <Fantasy_Movie_side_kick_as_string>
    ba48:	str	r0, [fp, #-92]	; 0xffffffa4
    ba4c:	ldr	r0, [fp, #-92]	; 0xffffffa4
    ba50:	movw	r1, #0
    ba54:	cmp	r0, r1
    ba58:	bne	ba6c <test_mixed_type_union+0x568>
    ba5c:	movw	r0, #0
    ba60:	movt	r0, #0
    ba64:	bl	0 <printf>
    ba68:	b	beb8 <test_mixed_type_union+0x9b4>
    ba6c:	ldr	r0, [fp, #-92]	; 0xffffffa4
    ba70:	movw	r1, #0
    ba74:	movt	r1, #0
    ba78:	bl	0 <strcmp>
    ba7c:	cmp	r0, #0
    ba80:	beq	ba98 <test_mixed_type_union+0x594>
    ba84:	ldr	r1, [fp, #-92]	; 0xffffffa4
    ba88:	movw	r0, #0
    ba8c:	movt	r0, #0
    ba90:	bl	0 <printf>
    ba94:	b	beb8 <test_mixed_type_union+0x9b4>
    ba98:	ldr	r1, [fp, #-60]	; 0xffffffc4
    ba9c:	sub	r0, fp, #124	; 0x7c
    baa0:	bl	ced8 <Fantasy_Movie_side_kick_union>
    baa4:	vldr	d16, [fp, #-124]	; 0xffffff84
    baa8:	vstr	d16, [fp, #-80]	; 0xffffffb0
    baac:	ldr	r0, [fp, #-80]	; 0xffffffb0
    bab0:	ldr	r1, [fp, #-76]	; 0xffffffb4
    bab4:	bl	cf3c <flatbuffers_string_cast_from_union>
    bab8:	str	r0, [fp, #-92]	; 0xffffffa4
    babc:	ldr	r0, [fp, #-92]	; 0xffffffa4
    bac0:	movw	r1, #0
    bac4:	movt	r1, #0
    bac8:	bl	0 <strcmp>
    bacc:	cmp	r0, #0
    bad0:	beq	bae8 <test_mixed_type_union+0x5e4>
    bad4:	ldr	r1, [fp, #-92]	; 0xffffffa4
    bad8:	movw	r0, #0
    badc:	movt	r0, #0
    bae0:	bl	0 <printf>
    bae4:	b	beb8 <test_mixed_type_union+0x9b4>
    bae8:	ldr	r1, [fp, #-60]	; 0xffffffc4
    baec:	sub	r0, fp, #132	; 0x84
    baf0:	bl	cf60 <Fantasy_Movie_characters_union>
    baf4:	vldr	d16, [fp, #-132]	; 0xffffff7c
    baf8:	vstr	d16, [fp, #-72]	; 0xffffffb8
    bafc:	ldr	r1, [fp, #-72]	; 0xffffffb8
    bb00:	ldr	r2, [fp, #-68]	; 0xffffffbc
    bb04:	sub	r0, fp, #140	; 0x8c
    bb08:	mov	r3, #0
    bb0c:	bl	cff0 <Fantasy_Character_union_vec_at>
    bb10:	ldr	r0, [fp, #-140]	; 0xffffff74
    bb14:	str	r0, [fp, #-80]	; 0xffffffb0
    bb18:	ldr	r0, [fp, #-136]	; 0xffffff78
    bb1c:	str	r0, [fp, #-76]	; 0xffffffb4
    bb20:	ldrb	r0, [fp, #-80]	; 0xffffffb0
    bb24:	cmp	r0, #8
    bb28:	beq	bb3c <test_mixed_type_union+0x638>
    bb2c:	movw	r0, #0
    bb30:	movt	r0, #0
    bb34:	bl	0 <printf>
    bb38:	b	beb8 <test_mixed_type_union+0x9b4>
    bb3c:	ldr	r1, [fp, #-72]	; 0xffffffb8
    bb40:	ldr	r2, [fp, #-68]	; 0xffffffbc
    bb44:	sub	r0, fp, #148	; 0x94
    bb48:	mov	r3, #1
    bb4c:	bl	cff0 <Fantasy_Character_union_vec_at>
    bb50:	ldr	r0, [fp, #-148]	; 0xffffff6c
    bb54:	str	r0, [fp, #-80]	; 0xffffffb0
    bb58:	ldr	r0, [fp, #-144]	; 0xffffff70
    bb5c:	str	r0, [fp, #-76]	; 0xffffffb4
    bb60:	ldrb	r0, [fp, #-80]	; 0xffffffb0
    bb64:	cmp	r0, #2
    bb68:	beq	bb7c <test_mixed_type_union+0x678>
    bb6c:	movw	r0, #0
    bb70:	movt	r0, #0
    bb74:	bl	0 <printf>
    bb78:	b	beb8 <test_mixed_type_union+0x9b4>
    bb7c:	ldr	r0, [fp, #-76]	; 0xffffffb4
    bb80:	str	r0, [fp, #-88]	; 0xffffffa8
    bb84:	ldr	r0, [fp, #-88]	; 0xffffffa8
    bb88:	bl	cba0 <Fantasy_Attacker_sword_attack_damage>
    bb8c:	cmp	r0, #42	; 0x2a
    bb90:	beq	bba4 <test_mixed_type_union+0x6a0>
    bb94:	movw	r0, #0
    bb98:	movt	r0, #0
    bb9c:	bl	0 <printf>
    bba0:	b	beb8 <test_mixed_type_union+0x9b4>
    bba4:	ldr	r1, [fp, #-72]	; 0xffffffb8
    bba8:	ldr	r2, [fp, #-68]	; 0xffffffbc
    bbac:	sub	r0, fp, #156	; 0x9c
    bbb0:	mov	r3, #2
    bbb4:	bl	cff0 <Fantasy_Character_union_vec_at>
    bbb8:	ldr	r0, [fp, #-156]	; 0xffffff64
    bbbc:	str	r0, [fp, #-80]	; 0xffffffb0
    bbc0:	ldr	r0, [fp, #-152]	; 0xffffff68
    bbc4:	str	r0, [fp, #-76]	; 0xffffffb4
    bbc8:	ldrb	r0, [fp, #-80]	; 0xffffffb0
    bbcc:	cmp	r0, #2
    bbd0:	beq	bbe4 <test_mixed_type_union+0x6e0>
    bbd4:	movw	r0, #0
    bbd8:	movt	r0, #0
    bbdc:	bl	0 <printf>
    bbe0:	b	beb8 <test_mixed_type_union+0x9b4>
    bbe4:	ldr	r0, [fp, #-76]	; 0xffffffb4
    bbe8:	str	r0, [fp, #-88]	; 0xffffffa8
    bbec:	ldr	r0, [fp, #-88]	; 0xffffffa8
    bbf0:	bl	cba0 <Fantasy_Attacker_sword_attack_damage>
    bbf4:	cmp	r0, #1
    bbf8:	beq	bc0c <test_mixed_type_union+0x708>
    bbfc:	movw	r0, #0
    bc00:	movt	r0, #0
    bc04:	bl	0 <printf>
    bc08:	b	beb8 <test_mixed_type_union+0x9b4>
    bc0c:	ldr	r0, [fp, #-60]	; 0xffffffc4
    bc10:	bl	d0ac <Fantasy_Movie_characters_type>
    bc14:	movw	r1, #3
    bc18:	bl	b1bc <flatbuffers_union_type_vec_at>
    bc1c:	and	r0, r0, #255	; 0xff
    bc20:	cmp	r0, #11
    bc24:	beq	bc38 <test_mixed_type_union+0x734>
    bc28:	movw	r0, #0
    bc2c:	movt	r0, #0
    bc30:	bl	0 <printf>
    bc34:	b	beb8 <test_mixed_type_union+0x9b4>
    bc38:	ldr	r0, [fp, #-72]	; 0xffffffb8
    bc3c:	ldr	r1, [fp, #-68]	; 0xffffffbc
    bc40:	mov	r2, #3
    bc44:	bl	d1a8 <Fantasy_Character_union_vec_at_as_string>
    bc48:	str	r0, [fp, #-92]	; 0xffffffa4
    bc4c:	ldr	r0, [fp, #-92]	; 0xffffffa4
    bc50:	movw	r1, #0
    bc54:	cmp	r0, r1
    bc58:	beq	bc74 <test_mixed_type_union+0x770>
    bc5c:	ldr	r0, [fp, #-92]	; 0xffffffa4
    bc60:	movw	r1, #0
    bc64:	movt	r1, #0
    bc68:	bl	0 <strcmp>
    bc6c:	cmp	r0, #0
    bc70:	beq	bc84 <test_mixed_type_union+0x780>
    bc74:	movw	r0, #0
    bc78:	movt	r0, #0
    bc7c:	bl	0 <printf>
    bc80:	b	beb8 <test_mixed_type_union+0x9b4>
    bc84:	ldr	r1, [fp, #-72]	; 0xffffffb8
    bc88:	ldr	r2, [fp, #-68]	; 0xffffffbc
    bc8c:	add	r0, sp, #156	; 0x9c
    bc90:	mov	r3, #3
    bc94:	bl	cff0 <Fantasy_Character_union_vec_at>
    bc98:	ldr	r0, [sp, #156]	; 0x9c
    bc9c:	str	r0, [fp, #-80]	; 0xffffffb0
    bca0:	ldr	r0, [sp, #160]	; 0xa0
    bca4:	str	r0, [fp, #-76]	; 0xffffffb4
    bca8:	ldrb	r0, [fp, #-80]	; 0xffffffb0
    bcac:	cmp	r0, #11
    bcb0:	beq	bcc4 <test_mixed_type_union+0x7c0>
    bcb4:	movw	r0, #0
    bcb8:	movt	r0, #0
    bcbc:	bl	0 <printf>
    bcc0:	b	beb8 <test_mixed_type_union+0x9b4>
    bcc4:	ldr	r0, [fp, #-80]	; 0xffffffb0
    bcc8:	ldr	r1, [fp, #-76]	; 0xffffffb4
    bccc:	bl	cf3c <flatbuffers_string_cast_from_union>
    bcd0:	str	r0, [fp, #-92]	; 0xffffffa4
    bcd4:	ldr	r0, [fp, #-92]	; 0xffffffa4
    bcd8:	movw	r1, #0
    bcdc:	cmp	r0, r1
    bce0:	beq	bcfc <test_mixed_type_union+0x7f8>
    bce4:	ldr	r0, [fp, #-92]	; 0xffffffa4
    bce8:	movw	r1, #0
    bcec:	movt	r1, #0
    bcf0:	bl	0 <strcmp>
    bcf4:	cmp	r0, #0
    bcf8:	beq	bd0c <test_mixed_type_union+0x808>
    bcfc:	movw	r0, #0
    bd00:	movt	r0, #0
    bd04:	bl	0 <printf>
    bd08:	b	beb8 <test_mixed_type_union+0x9b4>
    bd0c:	ldr	r1, [fp, #-72]	; 0xffffffb8
    bd10:	ldr	r2, [fp, #-68]	; 0xffffffbc
    bd14:	add	r0, sp, #148	; 0x94
    bd18:	mov	r3, #4
    bd1c:	bl	cff0 <Fantasy_Character_union_vec_at>
    bd20:	ldr	r0, [sp, #148]	; 0x94
    bd24:	str	r0, [fp, #-80]	; 0xffffffb0
    bd28:	ldr	r0, [sp, #152]	; 0x98
    bd2c:	str	r0, [fp, #-76]	; 0xffffffb4
    bd30:	ldrb	r0, [fp, #-80]	; 0xffffffb0
    bd34:	cmp	r0, #9
    bd38:	beq	bd4c <test_mixed_type_union+0x848>
    bd3c:	movw	r0, #0
    bd40:	movt	r0, #0
    bd44:	bl	0 <printf>
    bd48:	b	beb8 <test_mixed_type_union+0x9b4>
    bd4c:	ldr	r1, [fp, #-72]	; 0xffffffb8
    bd50:	ldr	r2, [fp, #-68]	; 0xffffffbc
    bd54:	add	r0, sp, #140	; 0x8c
    bd58:	mov	r3, #5
    bd5c:	bl	cff0 <Fantasy_Character_union_vec_at>
    bd60:	ldr	r0, [sp, #140]	; 0x8c
    bd64:	str	r0, [fp, #-80]	; 0xffffffb0
    bd68:	ldr	r0, [sp, #144]	; 0x90
    bd6c:	str	r0, [fp, #-76]	; 0xffffffb4
    bd70:	ldrb	r0, [fp, #-80]	; 0xffffffb0
    bd74:	cmp	r0, #9
    bd78:	beq	bd8c <test_mixed_type_union+0x888>
    bd7c:	movw	r0, #0
    bd80:	movt	r0, #0
    bd84:	bl	0 <printf>
    bd88:	b	beb8 <test_mixed_type_union+0x9b4>
    bd8c:	ldr	r1, [fp, #-72]	; 0xffffffb8
    bd90:	ldr	r2, [fp, #-68]	; 0xffffffbc
    bd94:	add	r0, sp, #132	; 0x84
    bd98:	mov	r3, #6
    bd9c:	bl	cff0 <Fantasy_Character_union_vec_at>
    bda0:	ldr	r0, [sp, #132]	; 0x84
    bda4:	str	r0, [fp, #-80]	; 0xffffffb0
    bda8:	ldr	r0, [sp, #136]	; 0x88
    bdac:	str	r0, [fp, #-76]	; 0xffffffb4
    bdb0:	ldrb	r0, [fp, #-80]	; 0xffffffb0
    bdb4:	cmp	r0, #9
    bdb8:	beq	bdcc <test_mixed_type_union+0x8c8>
    bdbc:	movw	r0, #0
    bdc0:	movt	r0, #0
    bdc4:	bl	0 <printf>
    bdc8:	b	beb8 <test_mixed_type_union+0x9b4>
    bdcc:	ldr	r1, [fp, #-72]	; 0xffffffb8
    bdd0:	ldr	r2, [fp, #-68]	; 0xffffffbc
    bdd4:	add	r0, sp, #124	; 0x7c
    bdd8:	mov	r3, #7
    bddc:	bl	cff0 <Fantasy_Character_union_vec_at>
    bde0:	ldr	r0, [sp, #124]	; 0x7c
    bde4:	str	r0, [fp, #-80]	; 0xffffffb0
    bde8:	ldr	r0, [sp, #128]	; 0x80
    bdec:	str	r0, [fp, #-76]	; 0xffffffb4
    bdf0:	ldrb	r0, [fp, #-80]	; 0xffffffb0
    bdf4:	cmp	r0, #9
    bdf8:	beq	be0c <test_mixed_type_union+0x908>
    bdfc:	movw	r0, #0
    be00:	movt	r0, #0
    be04:	bl	0 <printf>
    be08:	b	beb8 <test_mixed_type_union+0x9b4>
    be0c:	ldr	r1, [fp, #-72]	; 0xffffffb8
    be10:	ldr	r2, [fp, #-68]	; 0xffffffbc
    be14:	add	r0, sp, #116	; 0x74
    be18:	mov	r3, #8
    be1c:	bl	cff0 <Fantasy_Character_union_vec_at>
    be20:	ldr	r0, [sp, #116]	; 0x74
    be24:	str	r0, [fp, #-80]	; 0xffffffb0
    be28:	ldr	r0, [sp, #120]	; 0x78
    be2c:	str	r0, [fp, #-76]	; 0xffffffb4
    be30:	ldrb	r0, [fp, #-80]	; 0xffffffb0
    be34:	cmp	r0, #11
    be38:	beq	be4c <test_mixed_type_union+0x948>
    be3c:	movw	r0, #0
    be40:	movt	r0, #0
    be44:	bl	0 <printf>
    be48:	b	beb8 <test_mixed_type_union+0x9b4>
    be4c:	ldr	r1, [fp, #-72]	; 0xffffffb8
    be50:	ldr	r2, [fp, #-68]	; 0xffffffbc
    be54:	add	r0, sp, #108	; 0x6c
    be58:	mov	r3, #9
    be5c:	bl	cff0 <Fantasy_Character_union_vec_at>
    be60:	ldr	r0, [sp, #108]	; 0x6c
    be64:	str	r0, [fp, #-80]	; 0xffffffb0
    be68:	ldr	r0, [sp, #112]	; 0x70
    be6c:	str	r0, [fp, #-76]	; 0xffffffb4
    be70:	ldrb	r0, [fp, #-80]	; 0xffffffb0
    be74:	cmp	r0, #11
    be78:	beq	be8c <test_mixed_type_union+0x988>
    be7c:	movw	r0, #0
    be80:	movt	r0, #0
    be84:	bl	0 <printf>
    be88:	b	beb8 <test_mixed_type_union+0x9b4>
    be8c:	ldr	r0, [fp, #-72]	; 0xffffffb8
    be90:	ldr	r1, [fp, #-68]	; 0xffffffbc
    be94:	bl	d1d4 <Fantasy_Character_union_vec_len>
    be98:	cmp	r0, #10
    be9c:	beq	beb0 <test_mixed_type_union+0x9ac>
    bea0:	movw	r0, #0
    bea4:	movt	r0, #0
    bea8:	bl	0 <printf>
    beac:	b	beb8 <test_mixed_type_union+0x9b4>
    beb0:	movw	r0, #0
    beb4:	str	r0, [fp, #-32]	; 0xffffffe0
    beb8:	ldr	r0, [fp, #-20]	; 0xffffffec
    bebc:	bl	0 <flatcc_builder_aligned_free>
    bec0:	ldr	r0, [fp, #-32]	; 0xffffffe0
    bec4:	str	r0, [fp, #-12]
    bec8:	ldr	r0, [fp, #-12]
    becc:	sub	sp, fp, #8
    bed0:	pop	{r4, r5, fp, pc}

0000bed4 <Fantasy_Movie_start_as_root>:
    bed4:	push	{fp, lr}
    bed8:	mov	fp, sp
    bedc:	sub	sp, sp, #8
    bee0:	str	r0, [sp, #4]
    bee4:	ldr	r0, [sp, #4]
    bee8:	movw	r1, #0
    beec:	movt	r1, #0
    bef0:	bl	17c0 <flatbuffers_buffer_start>
    bef4:	cmp	r0, #0
    bef8:	beq	bf08 <Fantasy_Movie_start_as_root+0x34>
    befc:	mvn	r0, #0
    bf00:	str	r0, [sp]
    bf04:	b	bf14 <Fantasy_Movie_start_as_root+0x40>
    bf08:	ldr	r0, [sp, #4]
    bf0c:	bl	132b4 <Fantasy_Movie_start>
    bf10:	str	r0, [sp]
    bf14:	ldr	r0, [sp]
    bf18:	mov	sp, fp
    bf1c:	pop	{fp, pc}

0000bf20 <Fantasy_BookReader_create>:
    bf20:	push	{fp, lr}
    bf24:	mov	fp, sp
    bf28:	sub	sp, sp, #24
    bf2c:	str	r0, [fp, #-8]
    bf30:	str	r1, [sp, #12]
    bf34:	ldr	r0, [fp, #-8]
    bf38:	bl	132d8 <Fantasy_BookReader_start>
    bf3c:	str	r0, [sp, #8]
    bf40:	ldr	r0, [sp, #8]
    bf44:	movw	r1, #0
    bf48:	cmp	r0, r1
    bf4c:	bne	bf5c <Fantasy_BookReader_create+0x3c>
    bf50:	movw	r0, #0
    bf54:	str	r0, [fp, #-4]
    bf58:	b	bf7c <Fantasy_BookReader_create+0x5c>
    bf5c:	ldr	r0, [sp, #8]
    bf60:	ldr	r1, [sp, #12]
    bf64:	bl	13304 <Fantasy_BookReader_assign_to_pe>
    bf68:	ldr	r1, [fp, #-8]
    bf6c:	str	r0, [sp, #4]
    bf70:	mov	r0, r1
    bf74:	bl	13338 <Fantasy_BookReader_end_pe>
    bf78:	str	r0, [fp, #-4]
    bf7c:	ldr	r0, [fp, #-4]
    bf80:	mov	sp, fp
    bf84:	pop	{fp, pc}

0000bf88 <Fantasy_Rapunzel_create>:
    bf88:	push	{fp, lr}
    bf8c:	mov	fp, sp
    bf90:	sub	sp, sp, #24
    bf94:	str	r0, [fp, #-8]
    bf98:	strh	r1, [fp, #-10]
    bf9c:	ldr	r0, [fp, #-8]
    bfa0:	bl	13358 <Fantasy_Rapunzel_start>
    bfa4:	str	r0, [sp, #8]
    bfa8:	ldr	r0, [sp, #8]
    bfac:	movw	r1, #0
    bfb0:	cmp	r0, r1
    bfb4:	bne	bfc4 <Fantasy_Rapunzel_create+0x3c>
    bfb8:	movw	r0, #0
    bfbc:	str	r0, [fp, #-4]
    bfc0:	b	bfe4 <Fantasy_Rapunzel_create+0x5c>
    bfc4:	ldr	r0, [sp, #8]
    bfc8:	ldrh	r1, [fp, #-10]
    bfcc:	bl	13384 <Fantasy_Rapunzel_assign_to_pe>
    bfd0:	ldr	r1, [fp, #-8]
    bfd4:	str	r0, [sp, #4]
    bfd8:	mov	r0, r1
    bfdc:	bl	133b8 <Fantasy_Rapunzel_end_pe>
    bfe0:	str	r0, [fp, #-4]
    bfe4:	ldr	r0, [fp, #-4]
    bfe8:	mov	sp, fp
    bfec:	pop	{fp, pc}

0000bff0 <Fantasy_Character_as_Rapunzel>:
    bff0:	sub	sp, sp, #4
    bff4:	str	r1, [sp]
    bff8:	movw	r1, #8
    bffc:	strb	r1, [r0]
    c000:	ldr	r1, [sp]
    c004:	str	r1, [r0, #4]
    c008:	add	sp, sp, #4
    c00c:	bx	lr

0000c010 <Fantasy_Movie_main_character_Rapunzel_create>:
    c010:	push	{fp, lr}
    c014:	mov	fp, sp
    c018:	sub	sp, sp, #32
    c01c:	str	r0, [fp, #-4]
    c020:	strh	r1, [fp, #-6]
    c024:	ldr	r0, [fp, #-4]
    c028:	ldrh	r1, [fp, #-6]
    c02c:	bl	bf88 <Fantasy_Rapunzel_create>
    c030:	str	r0, [fp, #-12]
    c034:	ldr	r0, [fp, #-12]
    c038:	cmp	r0, #0
    c03c:	beq	c070 <Fantasy_Movie_main_character_Rapunzel_create+0x60>
    c040:	ldr	r0, [fp, #-4]
    c044:	ldr	r1, [fp, #-12]
    c048:	add	r2, sp, #12
    c04c:	str	r0, [sp, #8]
    c050:	mov	r0, r2
    c054:	bl	bff0 <Fantasy_Character_as_Rapunzel>
    c058:	ldr	r1, [sp, #12]
    c05c:	ldr	r2, [sp, #16]
    c060:	ldr	r0, [sp, #8]
    c064:	bl	133d8 <Fantasy_Movie_main_character_add>
    c068:	str	r0, [sp, #4]
    c06c:	b	c07c <Fantasy_Movie_main_character_Rapunzel_create+0x6c>
    c070:	mvn	r0, #0
    c074:	str	r0, [sp, #4]
    c078:	b	c07c <Fantasy_Movie_main_character_Rapunzel_create+0x6c>
    c07c:	ldr	r0, [sp, #4]
    c080:	mov	sp, fp
    c084:	pop	{fp, pc}

0000c088 <Fantasy_Movie_cameo_Rapunzel_add>:
    c088:	push	{fp, lr}
    c08c:	mov	fp, sp
    c090:	sub	sp, sp, #24
    c094:	str	r0, [fp, #-4]
    c098:	str	r1, [fp, #-8]
    c09c:	ldr	r0, [fp, #-4]
    c0a0:	ldr	r1, [fp, #-8]
    c0a4:	add	r2, sp, #8
    c0a8:	str	r0, [sp, #4]
    c0ac:	mov	r0, r2
    c0b0:	bl	bff0 <Fantasy_Character_as_Rapunzel>
    c0b4:	ldr	r1, [sp, #8]
    c0b8:	ldr	r2, [sp, #12]
    c0bc:	ldr	r0, [sp, #4]
    c0c0:	bl	1349c <Fantasy_Movie_cameo_add>
    c0c4:	mov	sp, fp
    c0c8:	pop	{fp, pc}

0000c0cc <Fantasy_Attacker_create>:
    c0cc:	push	{fp, lr}
    c0d0:	mov	fp, sp
    c0d4:	sub	sp, sp, #16
    c0d8:	str	r0, [sp, #8]
    c0dc:	str	r1, [sp, #4]
    c0e0:	ldr	r0, [sp, #8]
    c0e4:	bl	13560 <Fantasy_Attacker_start>
    c0e8:	cmp	r0, #0
    c0ec:	bne	c104 <Fantasy_Attacker_create+0x38>
    c0f0:	ldr	r0, [sp, #8]
    c0f4:	ldr	r1, [sp, #4]
    c0f8:	bl	13584 <Fantasy_Attacker_sword_attack_damage_add>
    c0fc:	cmp	r0, #0
    c100:	beq	c110 <Fantasy_Attacker_create+0x44>
    c104:	movw	r0, #0
    c108:	str	r0, [fp, #-4]
    c10c:	b	c11c <Fantasy_Attacker_create+0x50>
    c110:	ldr	r0, [sp, #8]
    c114:	bl	13604 <Fantasy_Attacker_end>
    c118:	str	r0, [fp, #-4]
    c11c:	ldr	r0, [fp, #-4]
    c120:	mov	sp, fp
    c124:	pop	{fp, pc}

0000c128 <Fantasy_Movie_antagonist_MuLan_add>:
    c128:	push	{fp, lr}
    c12c:	mov	fp, sp
    c130:	sub	sp, sp, #24
    c134:	str	r0, [fp, #-4]
    c138:	str	r1, [fp, #-8]
    c13c:	ldr	r0, [fp, #-4]
    c140:	ldr	r1, [fp, #-8]
    c144:	add	r2, sp, #8
    c148:	str	r0, [sp, #4]
    c14c:	mov	r0, r2
    c150:	bl	13728 <Fantasy_Character_as_MuLan>
    c154:	ldr	r1, [sp, #8]
    c158:	ldr	r2, [sp, #12]
    c15c:	ldr	r0, [sp, #4]
    c160:	bl	13664 <Fantasy_Movie_antagonist_add>
    c164:	mov	sp, fp
    c168:	pop	{fp, pc}

0000c16c <Fantasy_Movie_side_kick_Other_create_str>:
    c16c:	push	{fp, lr}
    c170:	mov	fp, sp
    c174:	sub	sp, sp, #16
    c178:	str	r0, [fp, #-4]
    c17c:	str	r1, [sp, #8]
    c180:	ldr	r0, [fp, #-4]
    c184:	ldr	r1, [fp, #-4]
    c188:	ldr	r2, [sp, #8]
    c18c:	str	r0, [sp, #4]
    c190:	mov	r0, r1
    c194:	mov	r1, r2
    c198:	bl	0 <flatcc_builder_create_string_str>
    c19c:	ldr	r1, [sp, #4]
    c1a0:	str	r0, [sp]
    c1a4:	mov	r0, r1
    c1a8:	ldr	r1, [sp]
    c1ac:	bl	13748 <Fantasy_Movie_side_kick_Other_add>
    c1b0:	mov	sp, fp
    c1b4:	pop	{fp, pc}

0000c1b8 <Fantasy_Movie_characters_start>:
    c1b8:	push	{fp, lr}
    c1bc:	mov	fp, sp
    c1c0:	sub	sp, sp, #8
    c1c4:	str	r0, [sp, #4]
    c1c8:	ldr	r0, [sp, #4]
    c1cc:	bl	0 <flatcc_builder_start_union_vector>
    c1d0:	mov	sp, fp
    c1d4:	pop	{fp, pc}

0000c1d8 <Fantasy_Movie_characters_push>:
    c1d8:	push	{fp, lr}
    c1dc:	mov	fp, sp
    c1e0:	sub	sp, sp, #16
    c1e4:	str	r1, [sp, #8]
    c1e8:	str	r2, [sp, #12]
    c1ec:	str	r0, [sp, #4]
    c1f0:	ldr	r0, [sp, #4]
    c1f4:	ldr	r1, [sp, #8]
    c1f8:	ldr	r2, [sp, #12]
    c1fc:	bl	0 <flatcc_builder_union_vector_push>
    c200:	mov	sp, fp
    c204:	pop	{fp, pc}

0000c208 <Fantasy_Movie_characters_MuLan_push>:
    c208:	push	{fp, lr}
    c20c:	mov	fp, sp
    c210:	sub	sp, sp, #24
    c214:	str	r0, [fp, #-4]
    c218:	str	r1, [fp, #-8]
    c21c:	ldr	r0, [fp, #-4]
    c220:	ldr	r1, [fp, #-8]
    c224:	add	r2, sp, #8
    c228:	str	r0, [sp, #4]
    c22c:	mov	r0, r2
    c230:	bl	13728 <Fantasy_Character_as_MuLan>
    c234:	ldr	r1, [sp, #8]
    c238:	ldr	r2, [sp, #12]
    c23c:	ldr	r0, [sp, #4]
    c240:	bl	c29c <Fantasy_Character_vec_push>
    c244:	mov	sp, fp
    c248:	pop	{fp, pc}

0000c24c <Fantasy_Movie_characters_MuLan_push_create>:
    c24c:	push	{fp, lr}
    c250:	mov	fp, sp
    c254:	sub	sp, sp, #24
    c258:	str	r0, [fp, #-4]
    c25c:	str	r1, [fp, #-8]
    c260:	ldr	r0, [fp, #-4]
    c264:	ldr	r1, [fp, #-8]
    c268:	str	r0, [sp, #4]
    c26c:	bl	c0cc <Fantasy_Attacker_create>
    c270:	add	r1, sp, #8
    c274:	str	r0, [sp]
    c278:	mov	r0, r1
    c27c:	ldr	r1, [sp]
    c280:	bl	13728 <Fantasy_Character_as_MuLan>
    c284:	ldr	r1, [sp, #8]
    c288:	ldr	r2, [sp, #12]
    c28c:	ldr	r0, [sp, #4]
    c290:	bl	c29c <Fantasy_Character_vec_push>
    c294:	mov	sp, fp
    c298:	pop	{fp, pc}

0000c29c <Fantasy_Character_vec_push>:
    c29c:	push	{fp, lr}
    c2a0:	mov	fp, sp
    c2a4:	sub	sp, sp, #16
    c2a8:	str	r1, [sp, #8]
    c2ac:	str	r2, [sp, #12]
    c2b0:	str	r0, [sp, #4]
    c2b4:	ldr	r0, [sp, #4]
    c2b8:	ldr	r1, [sp, #8]
    c2bc:	ldr	r2, [sp, #12]
    c2c0:	bl	0 <flatcc_builder_union_vector_push>
    c2c4:	mov	sp, fp
    c2c8:	pop	{fp, pc}

0000c2cc <Fantasy_Character_as_Other>:
    c2cc:	sub	sp, sp, #4
    c2d0:	str	r1, [sp]
    c2d4:	movw	r1, #11
    c2d8:	strb	r1, [r0]
    c2dc:	ldr	r1, [sp]
    c2e0:	str	r1, [r0, #4]
    c2e4:	add	sp, sp, #4
    c2e8:	bx	lr

0000c2ec <Fantasy_Movie_characters_Belle_push>:
    c2ec:	push	{fp, lr}
    c2f0:	mov	fp, sp
    c2f4:	sub	sp, sp, #24
    c2f8:	str	r0, [fp, #-4]
    c2fc:	str	r1, [fp, #-8]
    c300:	ldr	r0, [fp, #-4]
    c304:	ldr	r1, [fp, #-8]
    c308:	add	r2, sp, #8
    c30c:	str	r0, [sp, #4]
    c310:	mov	r0, r2
    c314:	bl	13850 <Fantasy_Character_as_Belle>
    c318:	ldr	r1, [sp, #8]
    c31c:	ldr	r2, [sp, #12]
    c320:	ldr	r0, [sp, #4]
    c324:	bl	c29c <Fantasy_Character_vec_push>
    c328:	mov	sp, fp
    c32c:	pop	{fp, pc}

0000c330 <Fantasy_Movie_characters_Belle_push_start>:
    c330:	push	{fp, lr}
    c334:	mov	fp, sp
    c338:	sub	sp, sp, #8
    c33c:	str	r0, [sp, #4]
    c340:	ldr	r0, [sp, #4]
    c344:	bl	132d8 <Fantasy_BookReader_start>
    c348:	mov	sp, fp
    c34c:	pop	{fp, pc}

0000c350 <Fantasy_Movie_characters_Belle_push_end>:
    c350:	push	{fp, lr}
    c354:	mov	fp, sp
    c358:	sub	sp, sp, #24
    c35c:	str	r0, [fp, #-4]
    c360:	ldr	r0, [fp, #-4]
    c364:	str	r0, [sp, #8]
    c368:	bl	13870 <Fantasy_BookReader_end>
    c36c:	add	r1, sp, #12
    c370:	str	r0, [sp, #4]
    c374:	mov	r0, r1
    c378:	ldr	r1, [sp, #4]
    c37c:	bl	13850 <Fantasy_Character_as_Belle>
    c380:	ldr	r1, [sp, #12]
    c384:	ldr	r2, [sp, #16]
    c388:	ldr	r0, [sp, #8]
    c38c:	bl	c29c <Fantasy_Character_vec_push>
    c390:	mov	sp, fp
    c394:	pop	{fp, pc}

0000c398 <Fantasy_Movie_characters_Belle_push_create>:
    c398:	push	{fp, lr}
    c39c:	mov	fp, sp
    c3a0:	sub	sp, sp, #24
    c3a4:	str	r0, [fp, #-4]
    c3a8:	str	r1, [fp, #-8]
    c3ac:	ldr	r0, [fp, #-4]
    c3b0:	ldr	r1, [fp, #-8]
    c3b4:	str	r0, [sp, #4]
    c3b8:	bl	bf20 <Fantasy_BookReader_create>
    c3bc:	add	r1, sp, #8
    c3c0:	str	r0, [sp]
    c3c4:	mov	r0, r1
    c3c8:	ldr	r1, [sp]
    c3cc:	bl	13850 <Fantasy_Character_as_Belle>
    c3d0:	ldr	r1, [sp, #8]
    c3d4:	ldr	r2, [sp, #12]
    c3d8:	ldr	r0, [sp, #4]
    c3dc:	bl	c29c <Fantasy_Character_vec_push>
    c3e0:	mov	sp, fp
    c3e4:	pop	{fp, pc}

0000c3e8 <Fantasy_Movie_characters_Other_push>:
    c3e8:	push	{fp, lr}
    c3ec:	mov	fp, sp
    c3f0:	sub	sp, sp, #24
    c3f4:	str	r0, [fp, #-4]
    c3f8:	str	r1, [fp, #-8]
    c3fc:	ldr	r0, [fp, #-4]
    c400:	ldr	r1, [fp, #-8]
    c404:	add	r2, sp, #8
    c408:	str	r0, [sp, #4]
    c40c:	mov	r0, r2
    c410:	bl	c2cc <Fantasy_Character_as_Other>
    c414:	ldr	r1, [sp, #8]
    c418:	ldr	r2, [sp, #12]
    c41c:	ldr	r0, [sp, #4]
    c420:	bl	c29c <Fantasy_Character_vec_push>
    c424:	mov	sp, fp
    c428:	pop	{fp, pc}

0000c42c <Fantasy_Movie_characters_Other_push_create_str>:
    c42c:	push	{fp, lr}
    c430:	mov	fp, sp
    c434:	sub	sp, sp, #24
    c438:	str	r0, [fp, #-4]
    c43c:	str	r1, [fp, #-8]
    c440:	ldr	r0, [fp, #-4]
    c444:	ldr	r1, [fp, #-8]
    c448:	str	r0, [sp, #4]
    c44c:	bl	5e78 <flatbuffers_string_create_str>
    c450:	add	r1, sp, #8
    c454:	str	r0, [sp]
    c458:	mov	r0, r1
    c45c:	ldr	r1, [sp]
    c460:	bl	c2cc <Fantasy_Character_as_Other>
    c464:	ldr	r1, [sp, #8]
    c468:	ldr	r2, [sp, #12]
    c46c:	ldr	r0, [sp, #4]
    c470:	bl	c29c <Fantasy_Character_vec_push>
    c474:	mov	sp, fp
    c478:	pop	{fp, pc}

0000c47c <Fantasy_Movie_characters_end>:
    c47c:	push	{fp, lr}
    c480:	mov	fp, sp
    c484:	sub	sp, sp, #16
    c488:	str	r0, [fp, #-4]
    c48c:	ldr	r0, [fp, #-4]
    c490:	add	r1, sp, #4
    c494:	str	r0, [sp]
    c498:	mov	r0, r1
    c49c:	ldr	r1, [sp]
    c4a0:	bl	0 <flatcc_builder_end_union_vector>
    c4a4:	ldr	r1, [sp, #4]
    c4a8:	ldr	r2, [sp, #8]
    c4ac:	ldr	r0, [sp]
    c4b0:	bl	13890 <Fantasy_Movie_characters_add>
    c4b4:	mov	sp, fp
    c4b8:	pop	{fp, pc}

0000c4bc <Fantasy_Movie_end_as_root>:
    c4bc:	push	{fp, lr}
    c4c0:	mov	fp, sp
    c4c4:	sub	sp, sp, #16
    c4c8:	str	r0, [fp, #-4]
    c4cc:	ldr	r0, [fp, #-4]
    c4d0:	ldr	r1, [fp, #-4]
    c4d4:	str	r0, [sp, #8]
    c4d8:	mov	r0, r1
    c4dc:	bl	13964 <Fantasy_Movie_end>
    c4e0:	ldr	r1, [sp, #8]
    c4e4:	str	r0, [sp, #4]
    c4e8:	mov	r0, r1
    c4ec:	ldr	r1, [sp, #4]
    c4f0:	bl	18c4 <flatbuffers_buffer_end>
    c4f4:	mov	sp, fp
    c4f8:	pop	{fp, pc}

0000c4fc <Fantasy_Movie_verify_as_root>:
    c4fc:	push	{fp, lr}
    c500:	mov	fp, sp
    c504:	sub	sp, sp, #8
    c508:	str	r0, [sp, #4]
    c50c:	str	r1, [sp]
    c510:	ldr	r0, [sp, #4]
    c514:	ldr	r1, [sp]
    c518:	movw	r2, #0
    c51c:	movt	r2, #0
    c520:	movw	r3, #0
    c524:	movt	r3, #0
    c528:	bl	0 <flatcc_verify_table_as_root>
    c52c:	mov	sp, fp
    c530:	pop	{fp, pc}

0000c534 <Fantasy_Movie_as_root>:
    c534:	push	{fp, lr}
    c538:	mov	fp, sp
    c53c:	sub	sp, sp, #16
    c540:	str	r0, [fp, #-4]
    c544:	movw	r0, #0
    c548:	movt	r0, #0
    c54c:	str	r0, [sp, #8]
    c550:	ldr	r0, [fp, #-4]
    c554:	movw	r1, #0
    c558:	cmp	r0, r1
    c55c:	beq	c574 <Fantasy_Movie_as_root+0x40>
    c560:	ldr	r0, [fp, #-4]
    c564:	ldr	r1, [sp, #8]
    c568:	bl	25b8 <flatbuffers_has_identifier>
    c56c:	cmp	r0, #0
    c570:	bne	c580 <Fantasy_Movie_as_root+0x4c>
    c574:	movw	r0, #0
    c578:	str	r0, [sp, #4]
    c57c:	b	c5a0 <Fantasy_Movie_as_root+0x6c>
    c580:	ldr	r0, [fp, #-4]
    c584:	ldr	r1, [fp, #-4]
    c588:	str	r0, [sp]
    c58c:	mov	r0, r1
    c590:	bl	f490 <__flatbuffers_uoffset_read_from_pe>
    c594:	ldr	r1, [sp]
    c598:	add	r0, r1, r0
    c59c:	str	r0, [sp, #4]
    c5a0:	ldr	r0, [sp, #4]
    c5a4:	mov	sp, fp
    c5a8:	pop	{fp, pc}

0000c5ac <Fantasy_Movie_main_character_is_present>:
    c5ac:	push	{fp, lr}
    c5b0:	mov	fp, sp
    c5b4:	sub	sp, sp, #16
    c5b8:	str	r0, [fp, #-4]
    c5bc:	movw	r0, #0
    c5c0:	strh	r0, [fp, #-6]
    c5c4:	ldr	r0, [fp, #-4]
    c5c8:	movw	r1, #0
    c5cc:	cmp	r0, r1
    c5d0:	beq	c5dc <Fantasy_Movie_main_character_is_present+0x30>
    c5d4:	b	c5d8 <Fantasy_Movie_main_character_is_present+0x2c>
    c5d8:	b	c5fc <Fantasy_Movie_main_character_is_present+0x50>
    c5dc:	movw	r0, #0
    c5e0:	movt	r0, #0
    c5e4:	movw	r1, #0
    c5e8:	movt	r1, #0
    c5ec:	movw	r2, #819	; 0x333
    c5f0:	movw	r3, #0
    c5f4:	movt	r3, #0
    c5f8:	bl	0 <__assert_fail>
    c5fc:	mov	r0, #1
    c600:	strh	r0, [sp, #8]
    c604:	ldr	r0, [fp, #-4]
    c608:	str	r0, [sp]
    c60c:	bl	f4c8 <__flatbuffers_soffset_read_from_pe>
    c610:	ldr	r1, [sp]
    c614:	sub	r0, r1, r0
    c618:	str	r0, [sp, #4]
    c61c:	ldr	r0, [sp, #4]
    c620:	bl	f4ec <__flatbuffers_voffset_read_from_pe>
    c624:	ldrh	r1, [sp, #8]
    c628:	add	r1, r1, #3
    c62c:	lsl	r1, r1, #1
    c630:	cmp	r0, r1
    c634:	bcc	c650 <Fantasy_Movie_main_character_is_present+0xa4>
    c638:	ldr	r0, [sp, #4]
    c63c:	ldrh	r1, [sp, #8]
    c640:	add	r0, r0, r1, lsl #1
    c644:	add	r0, r0, #4
    c648:	bl	f4ec <__flatbuffers_voffset_read_from_pe>
    c64c:	strh	r0, [fp, #-6]
    c650:	ldrh	r0, [fp, #-6]
    c654:	cmp	r0, #0
    c658:	movw	r0, #0
    c65c:	movne	r0, #1
    c660:	and	r0, r0, #1
    c664:	mov	sp, fp
    c668:	pop	{fp, pc}

0000c66c <Fantasy_Movie_characters_is_present>:
    c66c:	push	{fp, lr}
    c670:	mov	fp, sp
    c674:	sub	sp, sp, #16
    c678:	str	r0, [fp, #-4]
    c67c:	movw	r0, #0
    c680:	strh	r0, [fp, #-6]
    c684:	ldr	r0, [fp, #-4]
    c688:	movw	r1, #0
    c68c:	cmp	r0, r1
    c690:	beq	c69c <Fantasy_Movie_characters_is_present+0x30>
    c694:	b	c698 <Fantasy_Movie_characters_is_present+0x2c>
    c698:	b	c6bc <Fantasy_Movie_characters_is_present+0x50>
    c69c:	movw	r0, #0
    c6a0:	movt	r0, #0
    c6a4:	movw	r1, #0
    c6a8:	movt	r1, #0
    c6ac:	movw	r2, #823	; 0x337
    c6b0:	movw	r3, #0
    c6b4:	movt	r3, #0
    c6b8:	bl	0 <__assert_fail>
    c6bc:	mov	r0, #9
    c6c0:	strh	r0, [sp, #8]
    c6c4:	ldr	r0, [fp, #-4]
    c6c8:	str	r0, [sp]
    c6cc:	bl	f4c8 <__flatbuffers_soffset_read_from_pe>
    c6d0:	ldr	r1, [sp]
    c6d4:	sub	r0, r1, r0
    c6d8:	str	r0, [sp, #4]
    c6dc:	ldr	r0, [sp, #4]
    c6e0:	bl	f4ec <__flatbuffers_voffset_read_from_pe>
    c6e4:	ldrh	r1, [sp, #8]
    c6e8:	add	r1, r1, #3
    c6ec:	lsl	r1, r1, #1
    c6f0:	cmp	r0, r1
    c6f4:	bcc	c710 <Fantasy_Movie_characters_is_present+0xa4>
    c6f8:	ldr	r0, [sp, #4]
    c6fc:	ldrh	r1, [sp, #8]
    c700:	add	r0, r0, r1, lsl #1
    c704:	add	r0, r0, #4
    c708:	bl	f4ec <__flatbuffers_voffset_read_from_pe>
    c70c:	strh	r0, [fp, #-6]
    c710:	ldrh	r0, [fp, #-6]
    c714:	cmp	r0, #0
    c718:	movw	r0, #0
    c71c:	movne	r0, #1
    c720:	and	r0, r0, #1
    c724:	mov	sp, fp
    c728:	pop	{fp, pc}

0000c72c <Fantasy_Movie_main_character_union>:
    c72c:	push	{fp, lr}
    c730:	mov	fp, sp
    c734:	sub	sp, sp, #8
    c738:	str	r1, [sp, #4]
    c73c:	mov	r1, r0
    c740:	str	r0, [sp]
    c744:	mov	r0, r1
    c748:	movw	r1, #0
    c74c:	and	r1, r1, #255	; 0xff
    c750:	movw	r2, #8
    c754:	bl	0 <memset>
    c758:	ldr	r0, [sp, #4]
    c75c:	bl	139c4 <Fantasy_Movie_main_character_type>
    c760:	ldr	r1, [sp]
    c764:	strb	r0, [r1]
    c768:	ldrb	r0, [r1]
    c76c:	cmp	r0, #0
    c770:	bne	c778 <Fantasy_Movie_main_character_union+0x4c>
    c774:	b	c788 <Fantasy_Movie_main_character_union+0x5c>
    c778:	ldr	r0, [sp, #4]
    c77c:	bl	13aac <Fantasy_Movie_main_character>
    c780:	ldr	r1, [sp]
    c784:	str	r0, [r1, #4]
    c788:	mov	sp, fp
    c78c:	pop	{fp, pc}

0000c790 <Fantasy_Rapunzel_hair_length>:
    c790:	push	{fp, lr}
    c794:	mov	fp, sp
    c798:	sub	sp, sp, #8
    c79c:	str	r0, [sp, #4]
    c7a0:	ldr	r0, [sp, #4]
    c7a4:	movw	r1, #0
    c7a8:	cmp	r0, r1
    c7ac:	beq	c7c4 <Fantasy_Rapunzel_hair_length+0x34>
    c7b0:	ldr	r0, [sp, #4]
    c7b4:	bl	1046c <flatbuffers_uint16_read_from_pe>
    c7b8:	uxth	r0, r0
    c7bc:	str	r0, [sp]
    c7c0:	b	c7d0 <Fantasy_Rapunzel_hair_length+0x40>
    c7c4:	movw	r0, #0
    c7c8:	str	r0, [sp]
    c7cc:	b	c7d0 <Fantasy_Rapunzel_hair_length+0x40>
    c7d0:	ldr	r0, [sp]
    c7d4:	uxth	r0, r0
    c7d8:	mov	sp, fp
    c7dc:	pop	{fp, pc}

0000c7e0 <Fantasy_Movie_cameo_type>:
    c7e0:	push	{fp, lr}
    c7e4:	mov	fp, sp
    c7e8:	sub	sp, sp, #24
    c7ec:	str	r0, [fp, #-4]
    c7f0:	movw	r0, #0
    c7f4:	strh	r0, [fp, #-6]
    c7f8:	ldr	r0, [fp, #-4]
    c7fc:	movw	r1, #0
    c800:	cmp	r0, r1
    c804:	beq	c810 <Fantasy_Movie_cameo_type+0x30>
    c808:	b	c80c <Fantasy_Movie_cameo_type+0x2c>
    c80c:	b	c830 <Fantasy_Movie_cameo_type+0x50>
    c810:	movw	r0, #0
    c814:	movt	r0, #0
    c818:	movw	r1, #0
    c81c:	movt	r1, #0
    c820:	movw	r2, #822	; 0x336
    c824:	movw	r3, #0
    c828:	movt	r3, #0
    c82c:	bl	0 <__assert_fail>
    c830:	mov	r0, #6
    c834:	strh	r0, [fp, #-8]
    c838:	ldr	r0, [fp, #-4]
    c83c:	str	r0, [sp, #8]
    c840:	bl	f4c8 <__flatbuffers_soffset_read_from_pe>
    c844:	ldr	r1, [sp, #8]
    c848:	sub	r0, r1, r0
    c84c:	str	r0, [sp, #12]
    c850:	ldr	r0, [sp, #12]
    c854:	bl	f4ec <__flatbuffers_voffset_read_from_pe>
    c858:	ldrh	r1, [fp, #-8]
    c85c:	add	r1, r1, #3
    c860:	lsl	r1, r1, #1
    c864:	cmp	r0, r1
    c868:	bcc	c884 <Fantasy_Movie_cameo_type+0xa4>
    c86c:	ldr	r0, [sp, #12]
    c870:	ldrh	r1, [fp, #-8]
    c874:	add	r0, r0, r1, lsl #1
    c878:	add	r0, r0, #4
    c87c:	bl	f4ec <__flatbuffers_voffset_read_from_pe>
    c880:	strh	r0, [fp, #-6]
    c884:	ldrh	r0, [fp, #-6]
    c888:	cmp	r0, #0
    c88c:	beq	c8ac <Fantasy_Movie_cameo_type+0xcc>
    c890:	ldr	r0, [fp, #-4]
    c894:	ldrh	r1, [fp, #-6]
    c898:	add	r0, r0, r1
    c89c:	bl	11c28 <__flatbuffers_utype_read_from_pe>
    c8a0:	and	r0, r0, #255	; 0xff
    c8a4:	str	r0, [sp, #4]
    c8a8:	b	c8b8 <Fantasy_Movie_cameo_type+0xd8>
    c8ac:	movw	r0, #0
    c8b0:	str	r0, [sp, #4]
    c8b4:	b	c8b8 <Fantasy_Movie_cameo_type+0xd8>
    c8b8:	ldr	r0, [sp, #4]
    c8bc:	and	r0, r0, #255	; 0xff
    c8c0:	mov	sp, fp
    c8c4:	pop	{fp, pc}

0000c8c8 <Fantasy_Movie_cameo>:
    c8c8:	push	{fp, lr}
    c8cc:	mov	fp, sp
    c8d0:	sub	sp, sp, #32
    c8d4:	str	r0, [fp, #-8]
    c8d8:	movw	r0, #0
    c8dc:	strh	r0, [fp, #-14]
    c8e0:	ldr	r0, [fp, #-8]
    c8e4:	movw	r1, #0
    c8e8:	cmp	r0, r1
    c8ec:	beq	c8f8 <Fantasy_Movie_cameo+0x30>
    c8f0:	b	c8f4 <Fantasy_Movie_cameo+0x2c>
    c8f4:	b	c918 <Fantasy_Movie_cameo+0x50>
    c8f8:	movw	r0, #0
    c8fc:	movt	r0, #0
    c900:	movw	r1, #0
    c904:	movt	r1, #0
    c908:	movw	r2, #822	; 0x336
    c90c:	movw	r3, #0
    c910:	movt	r3, #0
    c914:	bl	0 <__assert_fail>
    c918:	mov	r0, #7
    c91c:	strh	r0, [sp, #16]
    c920:	ldr	r0, [fp, #-8]
    c924:	str	r0, [sp, #8]
    c928:	bl	f4c8 <__flatbuffers_soffset_read_from_pe>
    c92c:	ldr	r1, [sp, #8]
    c930:	sub	r0, r1, r0
    c934:	str	r0, [sp, #12]
    c938:	ldr	r0, [sp, #12]
    c93c:	bl	f4ec <__flatbuffers_voffset_read_from_pe>
    c940:	ldrh	r1, [sp, #16]
    c944:	add	r1, r1, #3
    c948:	lsl	r1, r1, #1
    c94c:	cmp	r0, r1
    c950:	bcc	c96c <Fantasy_Movie_cameo+0xa4>
    c954:	ldr	r0, [sp, #12]
    c958:	ldrh	r1, [sp, #16]
    c95c:	add	r0, r0, r1, lsl #1
    c960:	add	r0, r0, #4
    c964:	bl	f4ec <__flatbuffers_voffset_read_from_pe>
    c968:	strh	r0, [fp, #-14]
    c96c:	ldrsh	r0, [fp, #-14]
    c970:	cmp	r0, #0
    c974:	beq	c9ac <Fantasy_Movie_cameo+0xe4>
    c978:	ldr	r0, [fp, #-8]
    c97c:	ldrh	r1, [fp, #-14]
    c980:	add	r0, r0, r1
    c984:	str	r0, [fp, #-12]
    c988:	ldr	r0, [fp, #-12]
    c98c:	ldr	r1, [fp, #-12]
    c990:	str	r0, [sp, #4]
    c994:	mov	r0, r1
    c998:	bl	f490 <__flatbuffers_uoffset_read_from_pe>
    c99c:	ldr	r1, [sp, #4]
    c9a0:	add	r0, r1, r0
    c9a4:	str	r0, [fp, #-4]
    c9a8:	b	c9b4 <Fantasy_Movie_cameo+0xec>
    c9ac:	movw	r0, #0
    c9b0:	str	r0, [fp, #-4]
    c9b4:	ldr	r0, [fp, #-4]
    c9b8:	mov	sp, fp
    c9bc:	pop	{fp, pc}

0000c9c0 <Fantasy_Movie_antagonist_type>:
    c9c0:	push	{fp, lr}
    c9c4:	mov	fp, sp
    c9c8:	sub	sp, sp, #24
    c9cc:	str	r0, [fp, #-4]
    c9d0:	movw	r0, #0
    c9d4:	strh	r0, [fp, #-6]
    c9d8:	ldr	r0, [fp, #-4]
    c9dc:	movw	r1, #0
    c9e0:	cmp	r0, r1
    c9e4:	beq	c9f0 <Fantasy_Movie_antagonist_type+0x30>
    c9e8:	b	c9ec <Fantasy_Movie_antagonist_type+0x2c>
    c9ec:	b	ca10 <Fantasy_Movie_antagonist_type+0x50>
    c9f0:	movw	r0, #0
    c9f4:	movt	r0, #0
    c9f8:	movw	r1, #0
    c9fc:	movt	r1, #0
    ca00:	movw	r2, #820	; 0x334
    ca04:	movw	r3, #0
    ca08:	movt	r3, #0
    ca0c:	bl	0 <__assert_fail>
    ca10:	mov	r0, #2
    ca14:	strh	r0, [fp, #-8]
    ca18:	ldr	r0, [fp, #-4]
    ca1c:	str	r0, [sp, #8]
    ca20:	bl	f4c8 <__flatbuffers_soffset_read_from_pe>
    ca24:	ldr	r1, [sp, #8]
    ca28:	sub	r0, r1, r0
    ca2c:	str	r0, [sp, #12]
    ca30:	ldr	r0, [sp, #12]
    ca34:	bl	f4ec <__flatbuffers_voffset_read_from_pe>
    ca38:	ldrh	r1, [fp, #-8]
    ca3c:	add	r1, r1, #3
    ca40:	lsl	r1, r1, #1
    ca44:	cmp	r0, r1
    ca48:	bcc	ca64 <Fantasy_Movie_antagonist_type+0xa4>
    ca4c:	ldr	r0, [sp, #12]
    ca50:	ldrh	r1, [fp, #-8]
    ca54:	add	r0, r0, r1, lsl #1
    ca58:	add	r0, r0, #4
    ca5c:	bl	f4ec <__flatbuffers_voffset_read_from_pe>
    ca60:	strh	r0, [fp, #-6]
    ca64:	ldrh	r0, [fp, #-6]
    ca68:	cmp	r0, #0
    ca6c:	beq	ca8c <Fantasy_Movie_antagonist_type+0xcc>
    ca70:	ldr	r0, [fp, #-4]
    ca74:	ldrh	r1, [fp, #-6]
    ca78:	add	r0, r0, r1
    ca7c:	bl	11c28 <__flatbuffers_utype_read_from_pe>
    ca80:	and	r0, r0, #255	; 0xff
    ca84:	str	r0, [sp, #4]
    ca88:	b	ca98 <Fantasy_Movie_antagonist_type+0xd8>
    ca8c:	movw	r0, #0
    ca90:	str	r0, [sp, #4]
    ca94:	b	ca98 <Fantasy_Movie_antagonist_type+0xd8>
    ca98:	ldr	r0, [sp, #4]
    ca9c:	and	r0, r0, #255	; 0xff
    caa0:	mov	sp, fp
    caa4:	pop	{fp, pc}

0000caa8 <Fantasy_Movie_antagonist>:
    caa8:	push	{fp, lr}
    caac:	mov	fp, sp
    cab0:	sub	sp, sp, #32
    cab4:	str	r0, [fp, #-8]
    cab8:	movw	r0, #0
    cabc:	strh	r0, [fp, #-14]
    cac0:	ldr	r0, [fp, #-8]
    cac4:	movw	r1, #0
    cac8:	cmp	r0, r1
    cacc:	beq	cad8 <Fantasy_Movie_antagonist+0x30>
    cad0:	b	cad4 <Fantasy_Movie_antagonist+0x2c>
    cad4:	b	caf8 <Fantasy_Movie_antagonist+0x50>
    cad8:	movw	r0, #0
    cadc:	movt	r0, #0
    cae0:	movw	r1, #0
    cae4:	movt	r1, #0
    cae8:	movw	r2, #820	; 0x334
    caec:	movw	r3, #0
    caf0:	movt	r3, #0
    caf4:	bl	0 <__assert_fail>
    caf8:	mov	r0, #3
    cafc:	strh	r0, [sp, #16]
    cb00:	ldr	r0, [fp, #-8]
    cb04:	str	r0, [sp, #8]
    cb08:	bl	f4c8 <__flatbuffers_soffset_read_from_pe>
    cb0c:	ldr	r1, [sp, #8]
    cb10:	sub	r0, r1, r0
    cb14:	str	r0, [sp, #12]
    cb18:	ldr	r0, [sp, #12]
    cb1c:	bl	f4ec <__flatbuffers_voffset_read_from_pe>
    cb20:	ldrh	r1, [sp, #16]
    cb24:	add	r1, r1, #3
    cb28:	lsl	r1, r1, #1
    cb2c:	cmp	r0, r1
    cb30:	bcc	cb4c <Fantasy_Movie_antagonist+0xa4>
    cb34:	ldr	r0, [sp, #12]
    cb38:	ldrh	r1, [sp, #16]
    cb3c:	add	r0, r0, r1, lsl #1
    cb40:	add	r0, r0, #4
    cb44:	bl	f4ec <__flatbuffers_voffset_read_from_pe>
    cb48:	strh	r0, [fp, #-14]
    cb4c:	ldrsh	r0, [fp, #-14]
    cb50:	cmp	r0, #0
    cb54:	beq	cb8c <Fantasy_Movie_antagonist+0xe4>
    cb58:	ldr	r0, [fp, #-8]
    cb5c:	ldrh	r1, [fp, #-14]
    cb60:	add	r0, r0, r1
    cb64:	str	r0, [fp, #-12]
    cb68:	ldr	r0, [fp, #-12]
    cb6c:	ldr	r1, [fp, #-12]
    cb70:	str	r0, [sp, #4]
    cb74:	mov	r0, r1
    cb78:	bl	f490 <__flatbuffers_uoffset_read_from_pe>
    cb7c:	ldr	r1, [sp, #4]
    cb80:	add	r0, r1, r0
    cb84:	str	r0, [fp, #-4]
    cb88:	b	cb94 <Fantasy_Movie_antagonist+0xec>
    cb8c:	movw	r0, #0
    cb90:	str	r0, [fp, #-4]
    cb94:	ldr	r0, [fp, #-4]
    cb98:	mov	sp, fp
    cb9c:	pop	{fp, pc}

0000cba0 <Fantasy_Attacker_sword_attack_damage>:
    cba0:	push	{fp, lr}
    cba4:	mov	fp, sp
    cba8:	sub	sp, sp, #24
    cbac:	str	r0, [fp, #-4]
    cbb0:	movw	r0, #0
    cbb4:	strh	r0, [fp, #-6]
    cbb8:	ldr	r0, [fp, #-4]
    cbbc:	movw	r1, #0
    cbc0:	cmp	r0, r1
    cbc4:	beq	cbd0 <Fantasy_Attacker_sword_attack_damage+0x30>
    cbc8:	b	cbcc <Fantasy_Attacker_sword_attack_damage+0x2c>
    cbcc:	b	cbf0 <Fantasy_Attacker_sword_attack_damage+0x50>
    cbd0:	movw	r0, #0
    cbd4:	movt	r0, #0
    cbd8:	movw	r1, #0
    cbdc:	movt	r1, #0
    cbe0:	movw	r2, #770	; 0x302
    cbe4:	movw	r3, #0
    cbe8:	movt	r3, #0
    cbec:	bl	0 <__assert_fail>
    cbf0:	mov	r0, #0
    cbf4:	strh	r0, [fp, #-8]
    cbf8:	ldr	r0, [fp, #-4]
    cbfc:	str	r0, [sp, #8]
    cc00:	bl	f4c8 <__flatbuffers_soffset_read_from_pe>
    cc04:	ldr	r1, [sp, #8]
    cc08:	sub	r0, r1, r0
    cc0c:	str	r0, [sp, #12]
    cc10:	ldr	r0, [sp, #12]
    cc14:	bl	f4ec <__flatbuffers_voffset_read_from_pe>
    cc18:	ldrh	r1, [fp, #-8]
    cc1c:	add	r1, r1, #3
    cc20:	lsl	r1, r1, #1
    cc24:	cmp	r0, r1
    cc28:	bcc	cc44 <Fantasy_Attacker_sword_attack_damage+0xa4>
    cc2c:	ldr	r0, [sp, #12]
    cc30:	ldrh	r1, [fp, #-8]
    cc34:	add	r0, r0, r1, lsl #1
    cc38:	add	r0, r0, #4
    cc3c:	bl	f4ec <__flatbuffers_voffset_read_from_pe>
    cc40:	strh	r0, [fp, #-6]
    cc44:	ldrh	r0, [fp, #-6]
    cc48:	cmp	r0, #0
    cc4c:	beq	cc68 <Fantasy_Attacker_sword_attack_damage+0xc8>
    cc50:	ldr	r0, [fp, #-4]
    cc54:	ldrh	r1, [fp, #-6]
    cc58:	add	r0, r0, r1
    cc5c:	bl	103a8 <flatbuffers_int32_read_from_pe>
    cc60:	str	r0, [sp, #4]
    cc64:	b	cc74 <Fantasy_Attacker_sword_attack_damage+0xd4>
    cc68:	movw	r0, #0
    cc6c:	str	r0, [sp, #4]
    cc70:	b	cc74 <Fantasy_Attacker_sword_attack_damage+0xd4>
    cc74:	ldr	r0, [sp, #4]
    cc78:	mov	sp, fp
    cc7c:	pop	{fp, pc}

0000cc80 <Fantasy_Movie_side_kick_type>:
    cc80:	push	{fp, lr}
    cc84:	mov	fp, sp
    cc88:	sub	sp, sp, #24
    cc8c:	str	r0, [fp, #-4]
    cc90:	movw	r0, #0
    cc94:	strh	r0, [fp, #-6]
    cc98:	ldr	r0, [fp, #-4]
    cc9c:	movw	r1, #0
    cca0:	cmp	r0, r1
    cca4:	beq	ccb0 <Fantasy_Movie_side_kick_type+0x30>
    cca8:	b	ccac <Fantasy_Movie_side_kick_type+0x2c>
    ccac:	b	ccd0 <Fantasy_Movie_side_kick_type+0x50>
    ccb0:	movw	r0, #0
    ccb4:	movt	r0, #0
    ccb8:	movw	r1, #0
    ccbc:	movt	r1, #0
    ccc0:	movw	r2, #821	; 0x335
    ccc4:	movw	r3, #0
    ccc8:	movt	r3, #0
    cccc:	bl	0 <__assert_fail>
    ccd0:	mov	r0, #4
    ccd4:	strh	r0, [fp, #-8]
    ccd8:	ldr	r0, [fp, #-4]
    ccdc:	str	r0, [sp, #8]
    cce0:	bl	f4c8 <__flatbuffers_soffset_read_from_pe>
    cce4:	ldr	r1, [sp, #8]
    cce8:	sub	r0, r1, r0
    ccec:	str	r0, [sp, #12]
    ccf0:	ldr	r0, [sp, #12]
    ccf4:	bl	f4ec <__flatbuffers_voffset_read_from_pe>
    ccf8:	ldrh	r1, [fp, #-8]
    ccfc:	add	r1, r1, #3
    cd00:	lsl	r1, r1, #1
    cd04:	cmp	r0, r1
    cd08:	bcc	cd24 <Fantasy_Movie_side_kick_type+0xa4>
    cd0c:	ldr	r0, [sp, #12]
    cd10:	ldrh	r1, [fp, #-8]
    cd14:	add	r0, r0, r1, lsl #1
    cd18:	add	r0, r0, #4
    cd1c:	bl	f4ec <__flatbuffers_voffset_read_from_pe>
    cd20:	strh	r0, [fp, #-6]
    cd24:	ldrh	r0, [fp, #-6]
    cd28:	cmp	r0, #0
    cd2c:	beq	cd4c <Fantasy_Movie_side_kick_type+0xcc>
    cd30:	ldr	r0, [fp, #-4]
    cd34:	ldrh	r1, [fp, #-6]
    cd38:	add	r0, r0, r1
    cd3c:	bl	11c28 <__flatbuffers_utype_read_from_pe>
    cd40:	and	r0, r0, #255	; 0xff
    cd44:	str	r0, [sp, #4]
    cd48:	b	cd58 <Fantasy_Movie_side_kick_type+0xd8>
    cd4c:	movw	r0, #0
    cd50:	str	r0, [sp, #4]
    cd54:	b	cd58 <Fantasy_Movie_side_kick_type+0xd8>
    cd58:	ldr	r0, [sp, #4]
    cd5c:	and	r0, r0, #255	; 0xff
    cd60:	mov	sp, fp
    cd64:	pop	{fp, pc}

0000cd68 <flatbuffers_string_cast_from_generic>:
    cd68:	push	{fp, lr}
    cd6c:	mov	fp, sp
    cd70:	sub	sp, sp, #16
    cd74:	str	r0, [fp, #-4]
    cd78:	ldr	r0, [fp, #-4]
    cd7c:	movw	r1, #0
    cd80:	cmp	r0, r1
    cd84:	beq	cda4 <flatbuffers_string_cast_from_generic+0x3c>
    cd88:	ldr	r0, [fp, #-4]
    cd8c:	str	r0, [sp, #8]
    cd90:	bl	13ba4 <__flatbuffers_uoffset__size>
    cd94:	ldr	r1, [sp, #8]
    cd98:	add	r0, r1, r0
    cd9c:	str	r0, [sp, #4]
    cda0:	b	cdb0 <flatbuffers_string_cast_from_generic+0x48>
    cda4:	movw	r0, #0
    cda8:	str	r0, [sp, #4]
    cdac:	b	cdb0 <flatbuffers_string_cast_from_generic+0x48>
    cdb0:	ldr	r0, [sp, #4]
    cdb4:	mov	sp, fp
    cdb8:	pop	{fp, pc}

0000cdbc <Fantasy_Movie_side_kick>:
    cdbc:	push	{fp, lr}
    cdc0:	mov	fp, sp
    cdc4:	sub	sp, sp, #32
    cdc8:	str	r0, [fp, #-8]
    cdcc:	movw	r0, #0
    cdd0:	strh	r0, [fp, #-14]
    cdd4:	ldr	r0, [fp, #-8]
    cdd8:	movw	r1, #0
    cddc:	cmp	r0, r1
    cde0:	beq	cdec <Fantasy_Movie_side_kick+0x30>
    cde4:	b	cde8 <Fantasy_Movie_side_kick+0x2c>
    cde8:	b	ce0c <Fantasy_Movie_side_kick+0x50>
    cdec:	movw	r0, #0
    cdf0:	movt	r0, #0
    cdf4:	movw	r1, #0
    cdf8:	movt	r1, #0
    cdfc:	movw	r2, #821	; 0x335
    ce00:	movw	r3, #0
    ce04:	movt	r3, #0
    ce08:	bl	0 <__assert_fail>
    ce0c:	mov	r0, #5
    ce10:	strh	r0, [sp, #16]
    ce14:	ldr	r0, [fp, #-8]
    ce18:	str	r0, [sp, #8]
    ce1c:	bl	f4c8 <__flatbuffers_soffset_read_from_pe>
    ce20:	ldr	r1, [sp, #8]
    ce24:	sub	r0, r1, r0
    ce28:	str	r0, [sp, #12]
    ce2c:	ldr	r0, [sp, #12]
    ce30:	bl	f4ec <__flatbuffers_voffset_read_from_pe>
    ce34:	ldrh	r1, [sp, #16]
    ce38:	add	r1, r1, #3
    ce3c:	lsl	r1, r1, #1
    ce40:	cmp	r0, r1
    ce44:	bcc	ce60 <Fantasy_Movie_side_kick+0xa4>
    ce48:	ldr	r0, [sp, #12]
    ce4c:	ldrh	r1, [sp, #16]
    ce50:	add	r0, r0, r1, lsl #1
    ce54:	add	r0, r0, #4
    ce58:	bl	f4ec <__flatbuffers_voffset_read_from_pe>
    ce5c:	strh	r0, [fp, #-14]
    ce60:	ldrsh	r0, [fp, #-14]
    ce64:	cmp	r0, #0
    ce68:	beq	cea0 <Fantasy_Movie_side_kick+0xe4>
    ce6c:	ldr	r0, [fp, #-8]
    ce70:	ldrh	r1, [fp, #-14]
    ce74:	add	r0, r0, r1
    ce78:	str	r0, [fp, #-12]
    ce7c:	ldr	r0, [fp, #-12]
    ce80:	ldr	r1, [fp, #-12]
    ce84:	str	r0, [sp, #4]
    ce88:	mov	r0, r1
    ce8c:	bl	f490 <__flatbuffers_uoffset_read_from_pe>
    ce90:	ldr	r1, [sp, #4]
    ce94:	add	r0, r1, r0
    ce98:	str	r0, [fp, #-4]
    ce9c:	b	cea8 <Fantasy_Movie_side_kick+0xec>
    cea0:	movw	r0, #0
    cea4:	str	r0, [fp, #-4]
    cea8:	ldr	r0, [fp, #-4]
    ceac:	mov	sp, fp
    ceb0:	pop	{fp, pc}

0000ceb4 <Fantasy_Movie_side_kick_as_string>:
    ceb4:	push	{fp, lr}
    ceb8:	mov	fp, sp
    cebc:	sub	sp, sp, #8
    cec0:	str	r0, [sp, #4]
    cec4:	ldr	r0, [sp, #4]
    cec8:	bl	cdbc <Fantasy_Movie_side_kick>
    cecc:	bl	cd68 <flatbuffers_string_cast_from_generic>
    ced0:	mov	sp, fp
    ced4:	pop	{fp, pc}

0000ced8 <Fantasy_Movie_side_kick_union>:
    ced8:	push	{fp, lr}
    cedc:	mov	fp, sp
    cee0:	sub	sp, sp, #8
    cee4:	str	r1, [sp, #4]
    cee8:	mov	r1, r0
    ceec:	str	r0, [sp]
    cef0:	mov	r0, r1
    cef4:	movw	r1, #0
    cef8:	and	r1, r1, #255	; 0xff
    cefc:	movw	r2, #8
    cf00:	bl	0 <memset>
    cf04:	ldr	r0, [sp, #4]
    cf08:	bl	cc80 <Fantasy_Movie_side_kick_type>
    cf0c:	ldr	r1, [sp]
    cf10:	strb	r0, [r1]
    cf14:	ldrb	r0, [r1]
    cf18:	cmp	r0, #0
    cf1c:	bne	cf24 <Fantasy_Movie_side_kick_union+0x4c>
    cf20:	b	cf34 <Fantasy_Movie_side_kick_union+0x5c>
    cf24:	ldr	r0, [sp, #4]
    cf28:	bl	cdbc <Fantasy_Movie_side_kick>
    cf2c:	ldr	r1, [sp]
    cf30:	str	r0, [r1, #4]
    cf34:	mov	sp, fp
    cf38:	pop	{fp, pc}

0000cf3c <flatbuffers_string_cast_from_union>:
    cf3c:	push	{fp, lr}
    cf40:	mov	fp, sp
    cf44:	sub	sp, sp, #8
    cf48:	str	r0, [sp]
    cf4c:	str	r1, [sp, #4]
    cf50:	ldr	r0, [sp, #4]
    cf54:	bl	cd68 <flatbuffers_string_cast_from_generic>
    cf58:	mov	sp, fp
    cf5c:	pop	{fp, pc}

0000cf60 <Fantasy_Movie_characters_union>:
    cf60:	push	{fp, lr}
    cf64:	mov	fp, sp
    cf68:	sub	sp, sp, #16
    cf6c:	str	r1, [fp, #-4]
    cf70:	ldr	r1, [fp, #-4]
    cf74:	str	r0, [sp, #8]
    cf78:	mov	r0, r1
    cf7c:	bl	d0ac <Fantasy_Movie_characters_type>
    cf80:	ldr	r1, [sp, #8]
    cf84:	str	r0, [r1]
    cf88:	ldr	r0, [fp, #-4]
    cf8c:	bl	13bac <Fantasy_Movie_characters>
    cf90:	ldr	r1, [sp, #8]
    cf94:	str	r0, [r1, #4]
    cf98:	ldr	r0, [r1]
    cf9c:	bl	11b9c <flatbuffers_vec_len>
    cfa0:	ldr	r1, [sp, #8]
    cfa4:	ldr	r2, [r1, #4]
    cfa8:	str	r0, [sp, #4]
    cfac:	mov	r0, r2
    cfb0:	bl	11b9c <flatbuffers_vec_len>
    cfb4:	ldr	r1, [sp, #4]
    cfb8:	cmp	r1, r0
    cfbc:	bne	cfc8 <Fantasy_Movie_characters_union+0x68>
    cfc0:	b	cfc4 <Fantasy_Movie_characters_union+0x64>
    cfc4:	b	cfe8 <Fantasy_Movie_characters_union+0x88>
    cfc8:	movw	r0, #0
    cfcc:	movt	r0, #0
    cfd0:	movw	r1, #0
    cfd4:	movt	r1, #0
    cfd8:	movw	r2, #823	; 0x337
    cfdc:	movw	r3, #0
    cfe0:	movt	r3, #0
    cfe4:	bl	0 <__assert_fail>
    cfe8:	mov	sp, fp
    cfec:	pop	{fp, pc}

0000cff0 <Fantasy_Character_union_vec_at>:
    cff0:	push	{fp, lr}
    cff4:	mov	fp, sp
    cff8:	sub	sp, sp, #24
    cffc:	str	r1, [fp, #-8]
    d000:	str	r2, [fp, #-4]
    d004:	str	r3, [sp, #12]
    d008:	mov	r1, r0
    d00c:	str	r0, [sp, #4]
    d010:	mov	r0, r1
    d014:	movw	r1, #0
    d018:	and	r1, r1, #255	; 0xff
    d01c:	movw	r2, #8
    d020:	bl	0 <memset>
    d024:	ldr	r0, [fp, #-8]
    d028:	bl	11b9c <flatbuffers_vec_len>
    d02c:	str	r0, [sp, #8]
    d030:	ldr	r0, [sp, #8]
    d034:	ldr	r1, [sp, #12]
    d038:	cmp	r0, r1
    d03c:	bls	d048 <Fantasy_Character_union_vec_at+0x58>
    d040:	b	d044 <Fantasy_Character_union_vec_at+0x54>
    d044:	b	d068 <Fantasy_Character_union_vec_at+0x78>
    d048:	movw	r0, #0
    d04c:	movt	r0, #0
    d050:	movw	r1, #0
    d054:	movt	r1, #0
    d058:	movw	r2, #773	; 0x305
    d05c:	movw	r3, #0
    d060:	movt	r3, #0
    d064:	bl	0 <__assert_fail>
    d068:	ldr	r0, [fp, #-8]
    d06c:	ldr	r1, [sp, #12]
    d070:	add	r0, r0, r1
    d074:	ldrb	r0, [r0]
    d078:	ldr	r1, [sp, #4]
    d07c:	strb	r0, [r1]
    d080:	ldrb	r0, [r1]
    d084:	cmp	r0, #0
    d088:	bne	d090 <Fantasy_Character_union_vec_at+0xa0>
    d08c:	b	d0a4 <Fantasy_Character_union_vec_at+0xb4>
    d090:	ldr	r0, [fp, #-4]
    d094:	ldr	r1, [sp, #12]
    d098:	bl	b228 <flatbuffers_generic_vec_at>
    d09c:	ldr	r1, [sp, #4]
    d0a0:	str	r0, [r1, #4]
    d0a4:	mov	sp, fp
    d0a8:	pop	{fp, pc}

0000d0ac <Fantasy_Movie_characters_type>:
    d0ac:	push	{fp, lr}
    d0b0:	mov	fp, sp
    d0b4:	sub	sp, sp, #32
    d0b8:	str	r0, [fp, #-8]
    d0bc:	movw	r0, #0
    d0c0:	strh	r0, [fp, #-14]
    d0c4:	ldr	r0, [fp, #-8]
    d0c8:	movw	r1, #0
    d0cc:	cmp	r0, r1
    d0d0:	beq	d0dc <Fantasy_Movie_characters_type+0x30>
    d0d4:	b	d0d8 <Fantasy_Movie_characters_type+0x2c>
    d0d8:	b	d0fc <Fantasy_Movie_characters_type+0x50>
    d0dc:	movw	r0, #0
    d0e0:	movt	r0, #0
    d0e4:	movw	r1, #0
    d0e8:	movt	r1, #0
    d0ec:	movw	r2, #823	; 0x337
    d0f0:	movw	r3, #0
    d0f4:	movt	r3, #0
    d0f8:	bl	0 <__assert_fail>
    d0fc:	mov	r0, #8
    d100:	strh	r0, [sp, #16]
    d104:	ldr	r0, [fp, #-8]
    d108:	str	r0, [sp, #8]
    d10c:	bl	f4c8 <__flatbuffers_soffset_read_from_pe>
    d110:	ldr	r1, [sp, #8]
    d114:	sub	r0, r1, r0
    d118:	str	r0, [sp, #12]
    d11c:	ldr	r0, [sp, #12]
    d120:	bl	f4ec <__flatbuffers_voffset_read_from_pe>
    d124:	ldrh	r1, [sp, #16]
    d128:	add	r1, r1, #3
    d12c:	lsl	r1, r1, #1
    d130:	cmp	r0, r1
    d134:	bcc	d150 <Fantasy_Movie_characters_type+0xa4>
    d138:	ldr	r0, [sp, #12]
    d13c:	ldrh	r1, [sp, #16]
    d140:	add	r0, r0, r1, lsl #1
    d144:	add	r0, r0, #4
    d148:	bl	f4ec <__flatbuffers_voffset_read_from_pe>
    d14c:	strh	r0, [fp, #-14]
    d150:	ldrsh	r0, [fp, #-14]
    d154:	cmp	r0, #0
    d158:	beq	d194 <Fantasy_Movie_characters_type+0xe8>
    d15c:	ldr	r0, [fp, #-8]
    d160:	ldrh	r1, [fp, #-14]
    d164:	add	r0, r0, r1
    d168:	str	r0, [fp, #-12]
    d16c:	ldr	r0, [fp, #-12]
    d170:	add	r0, r0, #4
    d174:	ldr	r1, [fp, #-12]
    d178:	str	r0, [sp, #4]
    d17c:	mov	r0, r1
    d180:	bl	f490 <__flatbuffers_uoffset_read_from_pe>
    d184:	ldr	r1, [sp, #4]
    d188:	add	r0, r1, r0
    d18c:	str	r0, [fp, #-4]
    d190:	b	d19c <Fantasy_Movie_characters_type+0xf0>
    d194:	movw	r0, #0
    d198:	str	r0, [fp, #-4]
    d19c:	ldr	r0, [fp, #-4]
    d1a0:	mov	sp, fp
    d1a4:	pop	{fp, pc}

0000d1a8 <Fantasy_Character_union_vec_at_as_string>:
    d1a8:	push	{fp, lr}
    d1ac:	mov	fp, sp
    d1b0:	sub	sp, sp, #16
    d1b4:	str	r0, [sp, #8]
    d1b8:	str	r1, [sp, #12]
    d1bc:	str	r2, [sp, #4]
    d1c0:	ldr	r0, [sp, #12]
    d1c4:	ldr	r1, [sp, #4]
    d1c8:	bl	13ca8 <flatbuffers_generic_vec_at_as_string>
    d1cc:	mov	sp, fp
    d1d0:	pop	{fp, pc}

0000d1d4 <Fantasy_Character_union_vec_len>:
    d1d4:	push	{fp, lr}
    d1d8:	mov	fp, sp
    d1dc:	sub	sp, sp, #8
    d1e0:	str	r0, [sp]
    d1e4:	str	r1, [sp, #4]
    d1e8:	ldr	r0, [sp]
    d1ec:	bl	11b9c <flatbuffers_vec_len>
    d1f0:	mov	sp, fp
    d1f4:	pop	{fp, pc}

0000d1f8 <test_add_set_defaults>:
    d1f8:	push	{fp, lr}
    d1fc:	mov	fp, sp
    d200:	sub	sp, sp, #80	; 0x50
    d204:	str	r0, [fp, #-8]
    d208:	ldr	r0, [fp, #-8]
    d20c:	bl	0 <flatcc_builder_reset>
    d210:	ldr	r1, [fp, #-8]
    d214:	str	r0, [fp, #-24]	; 0xffffffe8
    d218:	mov	r0, r1
    d21c:	bl	57c0 <MyGame_Example_Monster_start_as_root>
    d220:	ldr	r1, [fp, #-8]
    d224:	str	r0, [fp, #-28]	; 0xffffffe4
    d228:	mov	r0, r1
    d22c:	movw	r1, #0
    d230:	movt	r1, #0
    d234:	bl	1818 <MyGame_Example_Monster_name_create_str>
    d238:	ldr	r1, [fp, #-8]
    d23c:	str	r0, [fp, #-32]	; 0xffffffe0
    d240:	mov	r0, r1
    d244:	movw	r1, #100	; 0x64
    d248:	sxth	r1, r1
    d24c:	bl	580c <MyGame_Example_Monster_hp_add>
    d250:	ldr	r1, [fp, #-8]
    d254:	str	r0, [fp, #-36]	; 0xffffffdc
    d258:	mov	r0, r1
    d25c:	movw	r1, #100	; 0x64
    d260:	sxth	r1, r1
    d264:	bl	d464 <MyGame_Example_Monster_mana_add>
    d268:	ldr	r1, [fp, #-8]
    d26c:	str	r0, [sp, #40]	; 0x28
    d270:	mov	r0, r1
    d274:	movw	r1, #8
    d278:	sxtb	r1, r1
    d27c:	bl	58d4 <MyGame_Example_Monster_color_add>
    d280:	ldr	r1, [fp, #-8]
    d284:	str	r0, [sp, #36]	; 0x24
    d288:	mov	r0, r1
    d28c:	bl	6360 <MyGame_Example_Monster_end_as_root>
    d290:	ldr	r1, [fp, #-8]
    d294:	str	r0, [sp, #32]
    d298:	mov	r0, r1
    d29c:	sub	r1, fp, #16
    d2a0:	bl	0 <flatcc_builder_get_direct_buffer>
    d2a4:	str	r0, [fp, #-12]
    d2a8:	ldr	r0, [fp, #-12]
    d2ac:	bl	25c <MyGame_Example_Monster_as_root>
    d2b0:	str	r0, [fp, #-20]	; 0xffffffec
    d2b4:	ldr	r0, [fp, #-20]	; 0xffffffec
    d2b8:	bl	3bc <MyGame_Example_Monster_hp_is_present>
    d2bc:	cmp	r0, #0
    d2c0:	beq	d2dc <test_add_set_defaults+0xe4>
    d2c4:	movw	r0, #0
    d2c8:	movt	r0, #0
    d2cc:	bl	0 <printf>
    d2d0:	mvn	r1, #0
    d2d4:	str	r1, [fp, #-4]
    d2d8:	b	d458 <test_add_set_defaults+0x260>
    d2dc:	ldr	r0, [fp, #-20]	; 0xffffffec
    d2e0:	bl	3e88 <MyGame_Example_Monster_mana_is_present>
    d2e4:	cmp	r0, #0
    d2e8:	bne	d304 <test_add_set_defaults+0x10c>
    d2ec:	movw	r0, #0
    d2f0:	movt	r0, #0
    d2f4:	bl	0 <printf>
    d2f8:	mvn	r1, #0
    d2fc:	str	r1, [fp, #-4]
    d300:	b	d458 <test_add_set_defaults+0x260>
    d304:	ldr	r0, [fp, #-20]	; 0xffffffec
    d308:	bl	d4e4 <MyGame_Example_Monster_color_is_present>
    d30c:	cmp	r0, #0
    d310:	beq	d32c <test_add_set_defaults+0x134>
    d314:	movw	r0, #0
    d318:	movt	r0, #0
    d31c:	bl	0 <printf>
    d320:	mvn	r1, #0
    d324:	str	r1, [fp, #-4]
    d328:	b	d458 <test_add_set_defaults+0x260>
    d32c:	ldr	r0, [fp, #-8]
    d330:	bl	0 <flatcc_builder_reset>
    d334:	ldr	r1, [fp, #-8]
    d338:	str	r0, [sp, #28]
    d33c:	mov	r0, r1
    d340:	bl	57c0 <MyGame_Example_Monster_start_as_root>
    d344:	ldr	r1, [fp, #-8]
    d348:	str	r0, [sp, #24]
    d34c:	mov	r0, r1
    d350:	movw	r1, #0
    d354:	movt	r1, #0
    d358:	bl	1818 <MyGame_Example_Monster_name_create_str>
    d35c:	ldr	r1, [fp, #-8]
    d360:	str	r0, [sp, #20]
    d364:	mov	r0, r1
    d368:	movw	r1, #100	; 0x64
    d36c:	sxth	r1, r1
    d370:	bl	d5a4 <MyGame_Example_Monster_hp_force_add>
    d374:	ldr	r1, [fp, #-8]
    d378:	str	r0, [sp, #16]
    d37c:	mov	r0, r1
    d380:	movw	r1, #100	; 0x64
    d384:	sxth	r1, r1
    d388:	bl	d610 <MyGame_Example_Monster_mana_force_add>
    d38c:	ldr	r1, [fp, #-8]
    d390:	str	r0, [sp, #12]
    d394:	mov	r0, r1
    d398:	movw	r1, #8
    d39c:	sxtb	r1, r1
    d3a0:	bl	d678 <MyGame_Example_Monster_color_force_add>
    d3a4:	ldr	r1, [fp, #-8]
    d3a8:	str	r0, [sp, #8]
    d3ac:	mov	r0, r1
    d3b0:	bl	6360 <MyGame_Example_Monster_end_as_root>
    d3b4:	ldr	r1, [fp, #-8]
    d3b8:	str	r0, [sp, #4]
    d3bc:	mov	r0, r1
    d3c0:	sub	r1, fp, #16
    d3c4:	bl	0 <flatcc_builder_get_direct_buffer>
    d3c8:	str	r0, [fp, #-12]
    d3cc:	ldr	r0, [fp, #-12]
    d3d0:	bl	25c <MyGame_Example_Monster_as_root>
    d3d4:	str	r0, [fp, #-20]	; 0xffffffec
    d3d8:	ldr	r0, [fp, #-20]	; 0xffffffec
    d3dc:	bl	3bc <MyGame_Example_Monster_hp_is_present>
    d3e0:	cmp	r0, #0
    d3e4:	bne	d400 <test_add_set_defaults+0x208>
    d3e8:	movw	r0, #0
    d3ec:	movt	r0, #0
    d3f0:	bl	0 <printf>
    d3f4:	mvn	r1, #0
    d3f8:	str	r1, [fp, #-4]
    d3fc:	b	d458 <test_add_set_defaults+0x260>
    d400:	ldr	r0, [fp, #-20]	; 0xffffffec
    d404:	bl	3e88 <MyGame_Example_Monster_mana_is_present>
    d408:	cmp	r0, #0
    d40c:	bne	d428 <test_add_set_defaults+0x230>
    d410:	movw	r0, #0
    d414:	movt	r0, #0
    d418:	bl	0 <printf>
    d41c:	mvn	r1, #0
    d420:	str	r1, [fp, #-4]
    d424:	b	d458 <test_add_set_defaults+0x260>
    d428:	ldr	r0, [fp, #-20]	; 0xffffffec
    d42c:	bl	d4e4 <MyGame_Example_Monster_color_is_present>
    d430:	cmp	r0, #0
    d434:	bne	d450 <test_add_set_defaults+0x258>
    d438:	movw	r0, #0
    d43c:	movt	r0, #0
    d440:	bl	0 <printf>
    d444:	mvn	r1, #0
    d448:	str	r1, [fp, #-4]
    d44c:	b	d458 <test_add_set_defaults+0x260>
    d450:	movw	r0, #0
    d454:	str	r0, [fp, #-4]
    d458:	ldr	r0, [fp, #-4]
    d45c:	mov	sp, fp
    d460:	pop	{fp, pc}

0000d464 <MyGame_Example_Monster_mana_add>:
    d464:	push	{fp, lr}
    d468:	mov	fp, sp
    d46c:	sub	sp, sp, #16
    d470:	str	r0, [sp, #8]
    d474:	strh	r1, [sp, #6]
    d478:	ldrsh	r0, [sp, #6]
    d47c:	cmp	r0, #150	; 0x96
    d480:	bne	d490 <MyGame_Example_Monster_mana_add+0x2c>
    d484:	movw	r0, #0
    d488:	str	r0, [fp, #-4]
    d48c:	b	d4d8 <MyGame_Example_Monster_mana_add+0x74>
    d490:	ldr	r0, [sp, #8]
    d494:	movw	r1, #1
    d498:	movw	r2, #2
    d49c:	movw	r3, #2
    d4a0:	uxth	r3, r3
    d4a4:	bl	0 <flatcc_builder_table_add>
    d4a8:	str	r0, [sp]
    d4ac:	movw	r1, #0
    d4b0:	cmp	r0, r1
    d4b4:	bne	d4c4 <MyGame_Example_Monster_mana_add+0x60>
    d4b8:	mvn	r0, #0
    d4bc:	str	r0, [fp, #-4]
    d4c0:	b	d4d8 <MyGame_Example_Monster_mana_add+0x74>
    d4c4:	ldr	r0, [sp]
    d4c8:	ldrsh	r1, [sp, #6]
    d4cc:	bl	ff80 <flatbuffers_int16_assign_to_pe>
    d4d0:	movw	r1, #0
    d4d4:	str	r1, [fp, #-4]
    d4d8:	ldr	r0, [fp, #-4]
    d4dc:	mov	sp, fp
    d4e0:	pop	{fp, pc}

0000d4e4 <MyGame_Example_Monster_color_is_present>:
    d4e4:	push	{fp, lr}
    d4e8:	mov	fp, sp
    d4ec:	sub	sp, sp, #16
    d4f0:	str	r0, [fp, #-4]
    d4f4:	movw	r0, #0
    d4f8:	strh	r0, [fp, #-6]
    d4fc:	ldr	r0, [fp, #-4]
    d500:	movw	r1, #0
    d504:	cmp	r0, r1
    d508:	beq	d514 <MyGame_Example_Monster_color_is_present+0x30>
    d50c:	b	d510 <MyGame_Example_Monster_color_is_present+0x2c>
    d510:	b	d534 <MyGame_Example_Monster_color_is_present+0x50>
    d514:	movw	r0, #0
    d518:	movt	r0, #0
    d51c:	movw	r1, #0
    d520:	movt	r1, #0
    d524:	movw	r2, #705	; 0x2c1
    d528:	movw	r3, #0
    d52c:	movt	r3, #0
    d530:	bl	0 <__assert_fail>
    d534:	mov	r0, #6
    d538:	strh	r0, [sp, #8]
    d53c:	ldr	r0, [fp, #-4]
    d540:	str	r0, [sp]
    d544:	bl	f4c8 <__flatbuffers_soffset_read_from_pe>
    d548:	ldr	r1, [sp]
    d54c:	sub	r0, r1, r0
    d550:	str	r0, [sp, #4]
    d554:	ldr	r0, [sp, #4]
    d558:	bl	f4ec <__flatbuffers_voffset_read_from_pe>
    d55c:	ldrh	r1, [sp, #8]
    d560:	add	r1, r1, #3
    d564:	lsl	r1, r1, #1
    d568:	cmp	r0, r1
    d56c:	bcc	d588 <MyGame_Example_Monster_color_is_present+0xa4>
    d570:	ldr	r0, [sp, #4]
    d574:	ldrh	r1, [sp, #8]
    d578:	add	r0, r0, r1, lsl #1
    d57c:	add	r0, r0, #4
    d580:	bl	f4ec <__flatbuffers_voffset_read_from_pe>
    d584:	strh	r0, [fp, #-6]
    d588:	ldrh	r0, [fp, #-6]
    d58c:	cmp	r0, #0
    d590:	movw	r0, #0
    d594:	movne	r0, #1
    d598:	and	r0, r0, #1
    d59c:	mov	sp, fp
    d5a0:	pop	{fp, pc}

0000d5a4 <MyGame_Example_Monster_hp_force_add>:
    d5a4:	push	{fp, lr}
    d5a8:	mov	fp, sp
    d5ac:	sub	sp, sp, #24
    d5b0:	str	r0, [fp, #-8]
    d5b4:	strh	r1, [fp, #-10]
    d5b8:	ldr	r0, [fp, #-8]
    d5bc:	movw	r1, #2
    d5c0:	str	r1, [sp, #4]
    d5c4:	ldr	r2, [sp, #4]
    d5c8:	movw	r3, #2
    d5cc:	uxth	r3, r3
    d5d0:	bl	0 <flatcc_builder_table_add>
    d5d4:	str	r0, [sp, #8]
    d5d8:	movw	r1, #0
    d5dc:	cmp	r0, r1
    d5e0:	bne	d5f0 <MyGame_Example_Monster_hp_force_add+0x4c>
    d5e4:	mvn	r0, #0
    d5e8:	str	r0, [fp, #-4]
    d5ec:	b	d604 <MyGame_Example_Monster_hp_force_add+0x60>
    d5f0:	ldr	r0, [sp, #8]
    d5f4:	ldrsh	r1, [fp, #-10]
    d5f8:	bl	ff80 <flatbuffers_int16_assign_to_pe>
    d5fc:	movw	r1, #0
    d600:	str	r1, [fp, #-4]
    d604:	ldr	r0, [fp, #-4]
    d608:	mov	sp, fp
    d60c:	pop	{fp, pc}

0000d610 <MyGame_Example_Monster_mana_force_add>:
    d610:	push	{fp, lr}
    d614:	mov	fp, sp
    d618:	sub	sp, sp, #16
    d61c:	str	r0, [sp, #8]
    d620:	strh	r1, [sp, #6]
    d624:	ldr	r0, [sp, #8]
    d628:	movw	r1, #1
    d62c:	movw	r2, #2
    d630:	movw	r3, #2
    d634:	uxth	r3, r3
    d638:	bl	0 <flatcc_builder_table_add>
    d63c:	str	r0, [sp]
    d640:	movw	r1, #0
    d644:	cmp	r0, r1
    d648:	bne	d658 <MyGame_Example_Monster_mana_force_add+0x48>
    d64c:	mvn	r0, #0
    d650:	str	r0, [fp, #-4]
    d654:	b	d66c <MyGame_Example_Monster_mana_force_add+0x5c>
    d658:	ldr	r0, [sp]
    d65c:	ldrsh	r1, [sp, #6]
    d660:	bl	ff80 <flatbuffers_int16_assign_to_pe>
    d664:	movw	r1, #0
    d668:	str	r1, [fp, #-4]
    d66c:	ldr	r0, [fp, #-4]
    d670:	mov	sp, fp
    d674:	pop	{fp, pc}

0000d678 <MyGame_Example_Monster_color_force_add>:
    d678:	push	{fp, lr}
    d67c:	mov	fp, sp
    d680:	sub	sp, sp, #16
    d684:	str	r0, [sp, #8]
    d688:	strb	r1, [sp, #7]
    d68c:	ldr	r0, [sp, #8]
    d690:	movw	r1, #6
    d694:	movw	r2, #1
    d698:	movw	r3, #1
    d69c:	uxth	r3, r3
    d6a0:	bl	0 <flatcc_builder_table_add>
    d6a4:	str	r0, [sp]
    d6a8:	movw	r1, #0
    d6ac:	cmp	r0, r1
    d6b0:	bne	d6c0 <MyGame_Example_Monster_color_force_add+0x48>
    d6b4:	mvn	r0, #0
    d6b8:	str	r0, [fp, #-4]
    d6bc:	b	d6d4 <MyGame_Example_Monster_color_force_add+0x5c>
    d6c0:	ldr	r0, [sp]
    d6c4:	ldrsb	r1, [sp, #7]
    d6c8:	bl	11c98 <MyGame_Example_Color_assign_to_pe>
    d6cc:	movw	r1, #0
    d6d0:	str	r1, [fp, #-4]
    d6d4:	ldr	r0, [fp, #-4]
    d6d8:	mov	sp, fp
    d6dc:	pop	{fp, pc}

0000d6e0 <test_nested_buffer>:
    d6e0:	push	{fp, lr}
    d6e4:	mov	fp, sp
    d6e8:	sub	sp, sp, #56	; 0x38
    d6ec:	str	r0, [fp, #-8]
    d6f0:	ldr	r0, [fp, #-8]
    d6f4:	bl	0 <flatcc_builder_reset>
    d6f8:	ldr	r1, [fp, #-8]
    d6fc:	str	r0, [sp, #28]
    d700:	mov	r0, r1
    d704:	bl	57c0 <MyGame_Example_Monster_start_as_root>
    d708:	ldr	r1, [fp, #-8]
    d70c:	str	r0, [sp, #24]
    d710:	mov	r0, r1
    d714:	movw	r1, #0
    d718:	movt	r1, #0
    d71c:	bl	1818 <MyGame_Example_Monster_name_create_str>
    d720:	ldr	r1, [fp, #-8]
    d724:	str	r0, [sp, #20]
    d728:	mov	r0, r1
    d72c:	bl	d8b0 <MyGame_Example_Monster_testnestedflatbuffer_start_as_root>
    d730:	ldr	r1, [fp, #-8]
    d734:	str	r0, [sp, #16]
    d738:	mov	r0, r1
    d73c:	movw	r1, #0
    d740:	movt	r1, #0
    d744:	bl	1818 <MyGame_Example_Monster_name_create_str>
    d748:	ldr	r1, [fp, #-8]
    d74c:	str	r0, [sp, #12]
    d750:	mov	r0, r1
    d754:	bl	d8fc <MyGame_Example_Monster_testnestedflatbuffer_end_as_root>
    d758:	ldr	r1, [fp, #-8]
    d75c:	str	r0, [sp, #8]
    d760:	mov	r0, r1
    d764:	movw	r1, #10
    d768:	sxth	r1, r1
    d76c:	bl	580c <MyGame_Example_Monster_hp_add>
    d770:	ldr	r1, [fp, #-8]
    d774:	str	r0, [sp, #4]
    d778:	mov	r0, r1
    d77c:	bl	6360 <MyGame_Example_Monster_end_as_root>
    d780:	ldr	r1, [fp, #-8]
    d784:	str	r0, [sp]
    d788:	mov	r0, r1
    d78c:	sub	r1, fp, #16
    d790:	bl	0 <flatcc_builder_get_direct_buffer>
    d794:	str	r0, [fp, #-12]
    d798:	ldr	r1, [fp, #-12]
    d79c:	ldr	r2, [fp, #-16]
    d7a0:	movw	r0, #0
    d7a4:	movt	r0, #0
    d7a8:	ldr	r3, [r0]
    d7ac:	movw	r0, #0
    d7b0:	movt	r0, #0
    d7b4:	bl	adc <hexdump>
    d7b8:	ldr	r0, [fp, #-12]
    d7bc:	bl	25c <MyGame_Example_Monster_as_root>
    d7c0:	str	r0, [fp, #-20]	; 0xffffffec
    d7c4:	ldr	r0, [fp, #-20]	; 0xffffffec
    d7c8:	bl	3850 <MyGame_Example_Monster_name>
    d7cc:	movw	r1, #0
    d7d0:	movt	r1, #0
    d7d4:	bl	0 <strcmp>
    d7d8:	cmp	r0, #0
    d7dc:	beq	d7f8 <test_nested_buffer+0x118>
    d7e0:	movw	r0, #0
    d7e4:	movt	r0, #0
    d7e8:	bl	0 <printf>
    d7ec:	mvn	r1, #0
    d7f0:	str	r1, [fp, #-4]
    d7f4:	b	d8a4 <test_nested_buffer+0x1c4>
    d7f8:	ldr	r0, [fp, #-20]	; 0xffffffec
    d7fc:	bl	d958 <MyGame_Example_Monster_testnestedflatbuffer_as_root>
    d800:	str	r0, [fp, #-24]	; 0xffffffe8
    d804:	ldr	r0, [fp, #-20]	; 0xffffffec
    d808:	bl	2d4 <MyGame_Example_Monster_hp>
    d80c:	sxth	r0, r0
    d810:	cmp	r0, #10
    d814:	beq	d830 <test_nested_buffer+0x150>
    d818:	movw	r0, #0
    d81c:	movt	r0, #0
    d820:	bl	0 <printf>
    d824:	mvn	r1, #0
    d828:	str	r1, [fp, #-4]
    d82c:	b	d8a4 <test_nested_buffer+0x1c4>
    d830:	ldr	r0, [fp, #-24]	; 0xffffffe8
    d834:	bl	3850 <MyGame_Example_Monster_name>
    d838:	movw	r1, #0
    d83c:	cmp	r0, r1
    d840:	beq	d848 <test_nested_buffer+0x168>
    d844:	b	d868 <test_nested_buffer+0x188>
    d848:	movw	r0, #0
    d84c:	movt	r0, #0
    d850:	movw	r1, #0
    d854:	movt	r1, #0
    d858:	movw	r2, #2188	; 0x88c
    d85c:	movw	r3, #0
    d860:	movt	r3, #0
    d864:	bl	0 <__assert_fail>
    d868:	ldr	r0, [fp, #-24]	; 0xffffffe8
    d86c:	bl	3850 <MyGame_Example_Monster_name>
    d870:	movw	r1, #0
    d874:	movt	r1, #0
    d878:	bl	0 <strcmp>
    d87c:	cmp	r0, #0
    d880:	beq	d89c <test_nested_buffer+0x1bc>
    d884:	movw	r0, #0
    d888:	movt	r0, #0
    d88c:	bl	0 <printf>
    d890:	mvn	r1, #0
    d894:	str	r1, [fp, #-4]
    d898:	b	d8a4 <test_nested_buffer+0x1c4>
    d89c:	movw	r0, #0
    d8a0:	str	r0, [fp, #-4]
    d8a4:	ldr	r0, [fp, #-4]
    d8a8:	mov	sp, fp
    d8ac:	pop	{fp, pc}

0000d8b0 <MyGame_Example_Monster_testnestedflatbuffer_start_as_root>:
    d8b0:	push	{fp, lr}
    d8b4:	mov	fp, sp
    d8b8:	sub	sp, sp, #8
    d8bc:	str	r0, [sp, #4]
    d8c0:	ldr	r0, [sp, #4]
    d8c4:	movw	r1, #0
    d8c8:	movt	r1, #0
    d8cc:	bl	17c0 <flatbuffers_buffer_start>
    d8d0:	cmp	r0, #0
    d8d4:	beq	d8e4 <MyGame_Example_Monster_testnestedflatbuffer_start_as_root+0x34>
    d8d8:	mvn	r0, #0
    d8dc:	str	r0, [sp]
    d8e0:	b	d8f0 <MyGame_Example_Monster_testnestedflatbuffer_start_as_root+0x40>
    d8e4:	ldr	r0, [sp, #4]
    d8e8:	bl	17f4 <MyGame_Example_Monster_start>
    d8ec:	str	r0, [sp]
    d8f0:	ldr	r0, [sp]
    d8f4:	mov	sp, fp
    d8f8:	pop	{fp, pc}

0000d8fc <MyGame_Example_Monster_testnestedflatbuffer_end_as_root>:
    d8fc:	push	{fp, lr}
    d900:	mov	fp, sp
    d904:	sub	sp, sp, #24
    d908:	str	r0, [fp, #-4]
    d90c:	ldr	r0, [fp, #-4]
    d910:	ldr	r1, [fp, #-4]
    d914:	ldr	r2, [fp, #-4]
    d918:	str	r0, [fp, #-8]
    d91c:	mov	r0, r2
    d920:	str	r1, [sp, #12]
    d924:	bl	1864 <MyGame_Example_Monster_end>
    d928:	ldr	r1, [sp, #12]
    d92c:	str	r0, [sp, #8]
    d930:	mov	r0, r1
    d934:	ldr	r1, [sp, #8]
    d938:	bl	18c4 <flatbuffers_buffer_end>
    d93c:	ldr	r1, [fp, #-8]
    d940:	str	r0, [sp, #4]
    d944:	mov	r0, r1
    d948:	ldr	r1, [sp, #4]
    d94c:	bl	13d30 <MyGame_Example_Monster_testnestedflatbuffer_add>
    d950:	mov	sp, fp
    d954:	pop	{fp, pc}

0000d958 <MyGame_Example_Monster_testnestedflatbuffer_as_root>:
    d958:	push	{fp, lr}
    d95c:	mov	fp, sp
    d960:	sub	sp, sp, #24
    d964:	str	r0, [fp, #-4]
    d968:	movw	r0, #0
    d96c:	movt	r0, #0
    d970:	str	r0, [fp, #-8]
    d974:	ldr	r0, [fp, #-4]
    d978:	bl	13d9c <MyGame_Example_Monster_testnestedflatbuffer>
    d97c:	str	r0, [sp, #12]
    d980:	ldr	r0, [sp, #12]
    d984:	movw	r1, #0
    d988:	cmp	r0, r1
    d98c:	beq	d9a4 <MyGame_Example_Monster_testnestedflatbuffer_as_root+0x4c>
    d990:	ldr	r0, [sp, #12]
    d994:	ldr	r1, [fp, #-8]
    d998:	bl	25b8 <flatbuffers_has_identifier>
    d99c:	cmp	r0, #0
    d9a0:	bne	d9b0 <MyGame_Example_Monster_testnestedflatbuffer_as_root+0x58>
    d9a4:	movw	r0, #0
    d9a8:	str	r0, [sp, #8]
    d9ac:	b	d9d0 <MyGame_Example_Monster_testnestedflatbuffer_as_root+0x78>
    d9b0:	ldr	r0, [sp, #12]
    d9b4:	ldr	r1, [sp, #12]
    d9b8:	str	r0, [sp, #4]
    d9bc:	mov	r0, r1
    d9c0:	bl	f490 <__flatbuffers_uoffset_read_from_pe>
    d9c4:	ldr	r1, [sp, #4]
    d9c8:	add	r0, r1, r0
    d9cc:	str	r0, [sp, #8]
    d9d0:	ldr	r0, [sp, #8]
    d9d4:	mov	sp, fp
    d9d8:	pop	{fp, pc}

0000d9dc <test_nested_buffer_first>:
    d9dc:	push	{fp, lr}
    d9e0:	mov	fp, sp
    d9e4:	sub	sp, sp, #56	; 0x38
    d9e8:	str	r0, [fp, #-8]
    d9ec:	ldr	r0, [fp, #-8]
    d9f0:	bl	0 <flatcc_builder_reset>
    d9f4:	ldr	r1, [fp, #-8]
    d9f8:	str	r0, [sp, #28]
    d9fc:	mov	r0, r1
    da00:	bl	57c0 <MyGame_Example_Monster_start_as_root>
    da04:	ldr	r1, [fp, #-8]
    da08:	str	r0, [sp, #24]
    da0c:	mov	r0, r1
    da10:	bl	d8b0 <MyGame_Example_Monster_testnestedflatbuffer_start_as_root>
    da14:	ldr	r1, [fp, #-8]
    da18:	str	r0, [sp, #20]
    da1c:	mov	r0, r1
    da20:	movw	r1, #0
    da24:	movt	r1, #0
    da28:	bl	1818 <MyGame_Example_Monster_name_create_str>
    da2c:	ldr	r1, [fp, #-8]
    da30:	str	r0, [sp, #16]
    da34:	mov	r0, r1
    da38:	bl	d8fc <MyGame_Example_Monster_testnestedflatbuffer_end_as_root>
    da3c:	ldr	r1, [fp, #-8]
    da40:	str	r0, [sp, #12]
    da44:	mov	r0, r1
    da48:	movw	r1, #10
    da4c:	sxth	r1, r1
    da50:	bl	580c <MyGame_Example_Monster_hp_add>
    da54:	ldr	r1, [fp, #-8]
    da58:	str	r0, [sp, #8]
    da5c:	mov	r0, r1
    da60:	movw	r1, #0
    da64:	movt	r1, #0
    da68:	bl	1818 <MyGame_Example_Monster_name_create_str>
    da6c:	ldr	r1, [fp, #-8]
    da70:	str	r0, [sp, #4]
    da74:	mov	r0, r1
    da78:	bl	6360 <MyGame_Example_Monster_end_as_root>
    da7c:	ldr	r1, [fp, #-8]
    da80:	str	r0, [sp]
    da84:	mov	r0, r1
    da88:	sub	r1, fp, #16
    da8c:	bl	0 <flatcc_builder_get_direct_buffer>
    da90:	str	r0, [fp, #-12]
    da94:	ldr	r1, [fp, #-12]
    da98:	ldr	r2, [fp, #-16]
    da9c:	movw	r0, #0
    daa0:	movt	r0, #0
    daa4:	ldr	r3, [r0]
    daa8:	movw	r0, #0
    daac:	movt	r0, #0
    dab0:	bl	adc <hexdump>
    dab4:	ldr	r0, [fp, #-12]
    dab8:	bl	25c <MyGame_Example_Monster_as_root>
    dabc:	str	r0, [fp, #-20]	; 0xffffffec
    dac0:	ldr	r0, [fp, #-20]	; 0xffffffec
    dac4:	bl	3850 <MyGame_Example_Monster_name>
    dac8:	movw	r1, #0
    dacc:	movt	r1, #0
    dad0:	bl	0 <strcmp>
    dad4:	cmp	r0, #0
    dad8:	beq	daf4 <test_nested_buffer_first+0x118>
    dadc:	movw	r0, #0
    dae0:	movt	r0, #0
    dae4:	bl	0 <printf>
    dae8:	mvn	r1, #0
    daec:	str	r1, [fp, #-4]
    daf0:	b	dba0 <test_nested_buffer_first+0x1c4>
    daf4:	ldr	r0, [fp, #-20]	; 0xffffffec
    daf8:	bl	d958 <MyGame_Example_Monster_testnestedflatbuffer_as_root>
    dafc:	str	r0, [fp, #-24]	; 0xffffffe8
    db00:	ldr	r0, [fp, #-20]	; 0xffffffec
    db04:	bl	2d4 <MyGame_Example_Monster_hp>
    db08:	sxth	r0, r0
    db0c:	cmp	r0, #10
    db10:	beq	db2c <test_nested_buffer_first+0x150>
    db14:	movw	r0, #0
    db18:	movt	r0, #0
    db1c:	bl	0 <printf>
    db20:	mvn	r1, #0
    db24:	str	r1, [fp, #-4]
    db28:	b	dba0 <test_nested_buffer_first+0x1c4>
    db2c:	ldr	r0, [fp, #-24]	; 0xffffffe8
    db30:	bl	3850 <MyGame_Example_Monster_name>
    db34:	movw	r1, #0
    db38:	cmp	r0, r1
    db3c:	beq	db44 <test_nested_buffer_first+0x168>
    db40:	b	db64 <test_nested_buffer_first+0x188>
    db44:	movw	r0, #0
    db48:	movt	r0, #0
    db4c:	movw	r1, #0
    db50:	movt	r1, #0
    db54:	movw	r2, #2241	; 0x8c1
    db58:	movw	r3, #0
    db5c:	movt	r3, #0
    db60:	bl	0 <__assert_fail>
    db64:	ldr	r0, [fp, #-24]	; 0xffffffe8
    db68:	bl	3850 <MyGame_Example_Monster_name>
    db6c:	movw	r1, #0
    db70:	movt	r1, #0
    db74:	bl	0 <strcmp>
    db78:	cmp	r0, #0
    db7c:	beq	db98 <test_nested_buffer_first+0x1bc>
    db80:	movw	r0, #0
    db84:	movt	r0, #0
    db88:	bl	0 <printf>
    db8c:	mvn	r1, #0
    db90:	str	r1, [fp, #-4]
    db94:	b	dba0 <test_nested_buffer_first+0x1c4>
    db98:	movw	r0, #0
    db9c:	str	r0, [fp, #-4]
    dba0:	ldr	r0, [fp, #-4]
    dba4:	mov	sp, fp
    dba8:	pop	{fp, pc}

0000dbac <test_nested_buffer_using_nest>:
    dbac:	push	{r4, r5, fp, lr}
    dbb0:	add	fp, sp, #8
    dbb4:	sub	sp, sp, #72	; 0x48
    dbb8:	sub	sp, sp, #1024	; 0x400
    dbbc:	str	r0, [fp, #-16]
    dbc0:	ldr	r0, [fp, #-16]
    dbc4:	bl	0 <flatcc_builder_reset>
    dbc8:	ldr	r1, [fp, #-16]
    dbcc:	str	r0, [sp, #40]	; 0x28
    dbd0:	mov	r0, r1
    dbd4:	bl	57c0 <MyGame_Example_Monster_start_as_root>
    dbd8:	ldr	r1, [fp, #-16]
    dbdc:	str	r0, [sp, #36]	; 0x24
    dbe0:	mov	r0, r1
    dbe4:	movw	r1, #0
    dbe8:	movt	r1, #0
    dbec:	bl	1818 <MyGame_Example_Monster_name_create_str>
    dbf0:	ldr	r1, [fp, #-16]
    dbf4:	str	r0, [sp, #32]
    dbf8:	mov	r0, r1
    dbfc:	movw	r1, #42	; 0x2a
    dc00:	sxth	r1, r1
    dc04:	bl	d464 <MyGame_Example_Monster_mana_add>
    dc08:	ldr	r1, [fp, #-16]
    dc0c:	str	r0, [sp, #28]
    dc10:	mov	r0, r1
    dc14:	bl	6360 <MyGame_Example_Monster_end_as_root>
    dc18:	ldr	r1, [fp, #-16]
    dc1c:	str	r0, [sp, #24]
    dc20:	mov	r0, r1
    dc24:	bl	0 <flatcc_builder_get_buffer_size>
    dc28:	add	r1, sp, #60	; 0x3c
    dc2c:	str	r0, [sp, #52]	; 0x34
    dc30:	ldr	r0, [fp, #-16]
    dc34:	movw	r2, #1024	; 0x400
    dc38:	bl	0 <flatcc_builder_copy_buffer>
    dc3c:	movw	r1, #0
    dc40:	cmp	r0, r1
    dc44:	bne	dc60 <test_nested_buffer_using_nest+0xb4>
    dc48:	movw	r0, #0
    dc4c:	movt	r0, #0
    dc50:	bl	0 <printf>
    dc54:	mvn	r1, #0
    dc58:	str	r1, [fp, #-12]
    dc5c:	b	de2c <test_nested_buffer_using_nest+0x280>
    dc60:	ldr	r0, [fp, #-16]
    dc64:	bl	0 <flatcc_builder_reset>
    dc68:	ldr	r1, [fp, #-16]
    dc6c:	str	r0, [sp, #20]
    dc70:	mov	r0, r1
    dc74:	bl	57c0 <MyGame_Example_Monster_start_as_root>
    dc78:	add	r1, sp, #60	; 0x3c
    dc7c:	ldr	r2, [fp, #-16]
    dc80:	ldr	r3, [sp, #52]	; 0x34
    dc84:	str	r0, [sp, #16]
    dc88:	mov	r0, r2
    dc8c:	mov	r2, r3
    dc90:	movw	r3, #0
    dc94:	uxth	r3, r3
    dc98:	bl	de38 <MyGame_Example_Monster_testnestedflatbuffer_nest>
    dc9c:	ldr	r1, [fp, #-16]
    dca0:	str	r0, [sp, #12]
    dca4:	mov	r0, r1
    dca8:	movw	r1, #10
    dcac:	sxth	r1, r1
    dcb0:	bl	580c <MyGame_Example_Monster_hp_add>
    dcb4:	ldr	r1, [fp, #-16]
    dcb8:	str	r0, [sp, #8]
    dcbc:	mov	r0, r1
    dcc0:	movw	r1, #0
    dcc4:	movt	r1, #0
    dcc8:	bl	1818 <MyGame_Example_Monster_name_create_str>
    dccc:	ldr	r1, [fp, #-16]
    dcd0:	str	r0, [sp, #4]
    dcd4:	mov	r0, r1
    dcd8:	bl	6360 <MyGame_Example_Monster_end_as_root>
    dcdc:	ldr	r1, [fp, #-16]
    dce0:	str	r0, [sp]
    dce4:	mov	r0, r1
    dce8:	add	r1, sp, #56	; 0x38
    dcec:	bl	0 <flatcc_builder_get_direct_buffer>
    dcf0:	str	r0, [fp, #-20]	; 0xffffffec
    dcf4:	ldr	r1, [fp, #-20]	; 0xffffffec
    dcf8:	ldr	r2, [sp, #56]	; 0x38
    dcfc:	movw	r0, #0
    dd00:	movt	r0, #0
    dd04:	ldr	r3, [r0]
    dd08:	movw	r0, #0
    dd0c:	movt	r0, #0
    dd10:	bl	adc <hexdump>
    dd14:	ldr	r0, [fp, #-20]	; 0xffffffec
    dd18:	bl	25c <MyGame_Example_Monster_as_root>
    dd1c:	str	r0, [sp, #48]	; 0x30
    dd20:	ldr	r0, [sp, #48]	; 0x30
    dd24:	bl	3850 <MyGame_Example_Monster_name>
    dd28:	movw	r1, #0
    dd2c:	movt	r1, #0
    dd30:	bl	0 <strcmp>
    dd34:	cmp	r0, #0
    dd38:	beq	dd54 <test_nested_buffer_using_nest+0x1a8>
    dd3c:	movw	r0, #0
    dd40:	movt	r0, #0
    dd44:	bl	0 <printf>
    dd48:	mvn	r1, #0
    dd4c:	str	r1, [fp, #-12]
    dd50:	b	de2c <test_nested_buffer_using_nest+0x280>
    dd54:	ldr	r0, [sp, #48]	; 0x30
    dd58:	bl	d958 <MyGame_Example_Monster_testnestedflatbuffer_as_root>
    dd5c:	str	r0, [sp, #44]	; 0x2c
    dd60:	ldr	r0, [sp, #48]	; 0x30
    dd64:	bl	2d4 <MyGame_Example_Monster_hp>
    dd68:	sxth	r0, r0
    dd6c:	cmp	r0, #10
    dd70:	beq	dd8c <test_nested_buffer_using_nest+0x1e0>
    dd74:	movw	r0, #0
    dd78:	movt	r0, #0
    dd7c:	bl	0 <printf>
    dd80:	mvn	r1, #0
    dd84:	str	r1, [fp, #-12]
    dd88:	b	de2c <test_nested_buffer_using_nest+0x280>
    dd8c:	ldr	r0, [sp, #44]	; 0x2c
    dd90:	bl	3850 <MyGame_Example_Monster_name>
    dd94:	movw	r1, #0
    dd98:	cmp	r0, r1
    dd9c:	beq	dda4 <test_nested_buffer_using_nest+0x1f8>
    dda0:	b	ddc4 <test_nested_buffer_using_nest+0x218>
    dda4:	movw	r0, #0
    dda8:	movt	r0, #0
    ddac:	movw	r1, #0
    ddb0:	movt	r1, #0
    ddb4:	movw	r2, #2298	; 0x8fa
    ddb8:	movw	r3, #0
    ddbc:	movt	r3, #0
    ddc0:	bl	0 <__assert_fail>
    ddc4:	ldr	r0, [sp, #44]	; 0x2c
    ddc8:	bl	3850 <MyGame_Example_Monster_name>
    ddcc:	movw	r1, #0
    ddd0:	movt	r1, #0
    ddd4:	bl	0 <strcmp>
    ddd8:	cmp	r0, #0
    dddc:	beq	ddf8 <test_nested_buffer_using_nest+0x24c>
    dde0:	movw	r0, #0
    dde4:	movt	r0, #0
    dde8:	bl	0 <printf>
    ddec:	mvn	r1, #0
    ddf0:	str	r1, [fp, #-12]
    ddf4:	b	de2c <test_nested_buffer_using_nest+0x280>
    ddf8:	ldr	r0, [sp, #44]	; 0x2c
    ddfc:	bl	3da0 <MyGame_Example_Monster_mana>
    de00:	sxth	r0, r0
    de04:	cmp	r0, #42	; 0x2a
    de08:	beq	de24 <test_nested_buffer_using_nest+0x278>
    de0c:	movw	r0, #0
    de10:	movt	r0, #0
    de14:	bl	0 <printf>
    de18:	mvn	r1, #0
    de1c:	str	r1, [fp, #-12]
    de20:	b	de2c <test_nested_buffer_using_nest+0x280>
    de24:	movw	r0, #0
    de28:	str	r0, [fp, #-12]
    de2c:	ldr	r0, [fp, #-12]
    de30:	sub	sp, fp, #8
    de34:	pop	{r4, r5, fp, pc}

0000de38 <MyGame_Example_Monster_testnestedflatbuffer_nest>:
    de38:	push	{fp, lr}
    de3c:	mov	fp, sp
    de40:	sub	sp, sp, #56	; 0x38
    de44:	str	r0, [fp, #-4]
    de48:	str	r1, [fp, #-8]
    de4c:	str	r2, [fp, #-12]
    de50:	strh	r3, [fp, #-14]
    de54:	ldr	r0, [fp, #-4]
    de58:	ldr	r1, [fp, #-4]
    de5c:	ldr	r2, [fp, #-8]
    de60:	ldr	r3, [fp, #-12]
    de64:	ldrh	ip, [fp, #-14]
    de68:	cmp	ip, #0
    de6c:	str	r0, [fp, #-20]	; 0xffffffec
    de70:	str	r1, [fp, #-24]	; 0xffffffe8
    de74:	str	r2, [sp, #28]
    de78:	str	r3, [sp, #24]
    de7c:	beq	de8c <MyGame_Example_Monster_testnestedflatbuffer_nest+0x54>
    de80:	ldrh	r0, [fp, #-14]
    de84:	str	r0, [sp, #20]
    de88:	b	de98 <MyGame_Example_Monster_testnestedflatbuffer_nest+0x60>
    de8c:	movw	r0, #8
    de90:	str	r0, [sp, #20]
    de94:	b	de98 <MyGame_Example_Monster_testnestedflatbuffer_nest+0x60>
    de98:	ldr	r0, [sp, #20]
    de9c:	ldr	r1, [fp, #-24]	; 0xffffffe8
    dea0:	str	r0, [sp, #16]
    dea4:	mov	r0, r1
    dea8:	ldr	r1, [sp, #28]
    deac:	ldr	r2, [sp, #24]
    deb0:	movw	r3, #1
    deb4:	ldr	ip, [sp, #16]
    deb8:	uxth	lr, ip
    debc:	str	lr, [sp]
    dec0:	mvn	lr, #0
    dec4:	str	lr, [sp, #4]
    dec8:	bl	0 <flatcc_builder_create_vector>
    decc:	ldr	r1, [fp, #-20]	; 0xffffffec
    ded0:	str	r0, [sp, #12]
    ded4:	mov	r0, r1
    ded8:	ldr	r1, [sp, #12]
    dedc:	bl	13d30 <MyGame_Example_Monster_testnestedflatbuffer_add>
    dee0:	mov	sp, fp
    dee4:	pop	{fp, pc}

0000dee8 <verify_include>:
    dee8:	sub	sp, sp, #4
    deec:	str	r0, [sp]
    def0:	movw	r0, #0
    def4:	add	sp, sp, #4
    def8:	bx	lr
    defc:	nop	{0}

0000df00 <test_struct_buffer>:
    df00:	push	{fp, lr}
    df04:	mov	fp, sp
    df08:	sub	sp, sp, #136	; 0x88
    df0c:	str	r0, [fp, #-8]
    df10:	ldr	r0, [fp, #-8]
    df14:	bl	0 <flatcc_builder_reset>
    df18:	vldr	d2, [pc, #648]	; e1a8 <test_struct_buffer+0x2a8>
    df1c:	ldr	r1, [fp, #-8]
    df20:	str	r0, [sp, #12]
    df24:	mov	r0, r1
    df28:	vmov.f32	s0, #112	; 0x3f800000  1.0
    df2c:	vmov.f32	s1, #0	; 0x40000000  2.0
    df30:	vmov.f32	s2, #8	; 0x40400000  3.0
    df34:	movw	r1, #8
    df38:	sxtb	r1, r1
    df3c:	movw	r2, #2730	; 0xaaa
    df40:	sxth	r2, r2
    df44:	movw	r3, #239	; 0xef
    df48:	sxtb	r3, r3
    df4c:	bl	e1b0 <MyGame_Example_Vec3_create_as_root>
    df50:	ldr	r1, [fp, #-8]
    df54:	str	r0, [sp, #8]
    df58:	mov	r0, r1
    df5c:	bl	0 <flatcc_builder_get_buffer_size>
    df60:	str	r0, [sp, #24]
    df64:	ldr	r0, [sp, #24]
    df68:	cmp	r0, #48	; 0x30
    df6c:	bne	df74 <test_struct_buffer+0x74>
    df70:	b	df94 <test_struct_buffer+0x94>
    df74:	movw	r0, #0
    df78:	movt	r0, #0
    df7c:	movw	r1, #0
    df80:	movt	r1, #0
    df84:	movw	r2, #2339	; 0x923
    df88:	movw	r3, #0
    df8c:	movt	r3, #0
    df90:	bl	0 <__assert_fail>
    df94:	ldr	r1, [sp, #24]
    df98:	movw	r0, #0
    df9c:	movt	r0, #0
    dfa0:	bl	0 <printf>
    dfa4:	ldr	r1, [fp, #-8]
    dfa8:	str	r0, [sp, #4]
    dfac:	mov	r0, r1
    dfb0:	bl	0 <flatcc_builder_get_emit_context>
    dfb4:	bl	e254 <flatcc_emitter_get_buffer_size>
    dfb8:	ldr	r1, [sp, #24]
    dfbc:	cmp	r0, r1
    dfc0:	bne	dfc8 <test_struct_buffer+0xc8>
    dfc4:	b	dfe8 <test_struct_buffer+0xe8>
    dfc8:	movw	r0, #0
    dfcc:	movt	r0, #0
    dfd0:	movw	r1, #0
    dfd4:	movt	r1, #0
    dfd8:	movw	r2, #2341	; 0x925
    dfdc:	movw	r3, #0
    dfe0:	movt	r3, #0
    dfe4:	bl	0 <__assert_fail>
    dfe8:	add	r1, sp, #28
    dfec:	ldr	r0, [fp, #-8]
    dff0:	movw	r2, #100	; 0x64
    dff4:	bl	0 <flatcc_builder_copy_buffer>
    dff8:	movw	r1, #0
    dffc:	cmp	r0, r1
    e000:	bne	e01c <test_struct_buffer+0x11c>
    e004:	movw	r0, #0
    e008:	movt	r0, #0
    e00c:	bl	0 <printf>
    e010:	mvn	r1, #0
    e014:	str	r1, [fp, #-4]
    e018:	b	e19c <test_struct_buffer+0x29c>
    e01c:	add	r1, sp, #28
    e020:	ldr	r2, [sp, #24]
    e024:	movw	r0, #0
    e028:	movt	r0, #0
    e02c:	ldr	r3, [r0]
    e030:	movw	r0, #0
    e034:	movt	r0, #0
    e038:	bl	adc <hexdump>
    e03c:	add	r0, sp, #28
    e040:	movw	r1, #0
    e044:	movt	r1, #0
    e048:	bl	25b8 <flatbuffers_has_identifier>
    e04c:	cmp	r0, #0
    e050:	bne	e06c <test_struct_buffer+0x16c>
    e054:	movw	r0, #0
    e058:	movt	r0, #0
    e05c:	bl	0 <printf>
    e060:	mvn	r1, #0
    e064:	str	r1, [fp, #-4]
    e068:	b	e19c <test_struct_buffer+0x29c>
    e06c:	add	r0, sp, #28
    e070:	movw	r1, #0
    e074:	movt	r1, #0
    e078:	bl	25b8 <flatbuffers_has_identifier>
    e07c:	cmp	r0, #0
    e080:	beq	e09c <test_struct_buffer+0x19c>
    e084:	movw	r0, #0
    e088:	movt	r0, #0
    e08c:	bl	0 <printf>
    e090:	mvn	r1, #0
    e094:	str	r1, [fp, #-4]
    e098:	b	e19c <test_struct_buffer+0x29c>
    e09c:	add	r0, sp, #28
    e0a0:	movw	r1, #0
    e0a4:	movt	r1, #0
    e0a8:	bl	25b8 <flatbuffers_has_identifier>
    e0ac:	cmp	r0, #0
    e0b0:	bne	e0cc <test_struct_buffer+0x1cc>
    e0b4:	movw	r0, #0
    e0b8:	movt	r0, #0
    e0bc:	bl	0 <printf>
    e0c0:	mvn	r1, #0
    e0c4:	str	r1, [fp, #-4]
    e0c8:	b	e19c <test_struct_buffer+0x29c>
    e0cc:	add	r0, sp, #28
    e0d0:	bl	e26c <MyGame_Example_Vec3_as_root>
    e0d4:	str	r0, [sp, #16]
    e0d8:	ldr	r0, [sp, #16]
    e0dc:	str	r0, [sp, #20]
    e0e0:	ldr	r0, [sp, #20]
    e0e4:	bl	e2e4 <MyGame_Example_Vec3_from_pe>
    e0e8:	ldr	r1, [sp, #20]
    e0ec:	vldr	s0, [r1]
    e0f0:	vmov.f32	s2, #112	; 0x3f800000  1.0
    e0f4:	vcmp.f32	s0, s2
    e0f8:	vmrs	APSR_nzcv, fpscr
    e0fc:	bne	e17c <test_struct_buffer+0x27c>
    e100:	ldr	r0, [sp, #20]
    e104:	vldr	s0, [r0, #4]
    e108:	vmov.f32	s2, #0	; 0x40000000  2.0
    e10c:	vcmp.f32	s0, s2
    e110:	vmrs	APSR_nzcv, fpscr
    e114:	bne	e17c <test_struct_buffer+0x27c>
    e118:	ldr	r0, [sp, #20]
    e11c:	vldr	s0, [r0, #8]
    e120:	vmov.f32	s2, #8	; 0x40400000  3.0
    e124:	vcmp.f32	s0, s2
    e128:	vmrs	APSR_nzcv, fpscr
    e12c:	bne	e17c <test_struct_buffer+0x27c>
    e130:	vldr	d16, [pc, #112]	; e1a8 <test_struct_buffer+0x2a8>
    e134:	ldr	r0, [sp, #20]
    e138:	vldr	d17, [r0, #16]
    e13c:	vcmp.f64	d17, d16
    e140:	vmrs	APSR_nzcv, fpscr
    e144:	bne	e17c <test_struct_buffer+0x27c>
    e148:	ldr	r0, [sp, #20]
    e14c:	ldrsb	r0, [r0, #24]
    e150:	cmp	r0, #8
    e154:	bne	e17c <test_struct_buffer+0x27c>
    e158:	ldr	r0, [sp, #20]
    e15c:	ldrsh	r0, [r0, #26]
    e160:	movw	r1, #2730	; 0xaaa
    e164:	cmp	r0, r1
    e168:	bne	e17c <test_struct_buffer+0x27c>
    e16c:	ldr	r0, [sp, #20]
    e170:	ldrsb	r0, [r0, #28]
    e174:	cmn	r0, #17
    e178:	beq	e194 <test_struct_buffer+0x294>
    e17c:	movw	r0, #0
    e180:	movt	r0, #0
    e184:	bl	0 <printf>
    e188:	mvn	r1, #0
    e18c:	str	r1, [fp, #-4]
    e190:	b	e19c <test_struct_buffer+0x29c>
    e194:	movw	r0, #0
    e198:	str	r0, [fp, #-4]
    e19c:	ldr	r0, [fp, #-4]
    e1a0:	mov	sp, fp
    e1a4:	pop	{fp, pc}
    e1a8:	.word	0xcccccccd
    e1ac:	.word	0x4010cccc

0000e1b0 <MyGame_Example_Vec3_create_as_root>:
    e1b0:	push	{fp, lr}
    e1b4:	mov	fp, sp
    e1b8:	sub	sp, sp, #48	; 0x30
    e1bc:	str	r0, [fp, #-4]
    e1c0:	vstr	s0, [fp, #-8]
    e1c4:	vstr	s1, [fp, #-12]
    e1c8:	vstr	s2, [fp, #-16]
    e1cc:	vstr	d2, [sp, #24]
    e1d0:	strb	r1, [sp, #23]
    e1d4:	strh	r2, [sp, #20]
    e1d8:	strb	r3, [sp, #19]
    e1dc:	ldr	r0, [fp, #-4]
    e1e0:	ldr	r1, [fp, #-4]
    e1e4:	vldr	s0, [fp, #-8]
    e1e8:	vldr	s1, [fp, #-12]
    e1ec:	vldr	s2, [fp, #-16]
    e1f0:	vldr	d2, [sp, #24]
    e1f4:	ldrb	r2, [sp, #23]
    e1f8:	ldrh	r3, [sp, #20]
    e1fc:	str	r0, [sp, #12]
    e200:	mov	r0, r1
    e204:	sxtb	r1, r2
    e208:	sxth	r2, r3
    e20c:	ldrsb	r3, [sp, #19]
    e210:	bl	13e98 <MyGame_Example_Vec3_create>
    e214:	ldr	r1, [sp, #12]
    e218:	str	r0, [sp, #8]
    e21c:	mov	r0, r1
    e220:	movw	r1, #0
    e224:	movt	r1, #0
    e228:	movw	r2, #0
    e22c:	uxth	r2, r2
    e230:	ldr	r3, [sp, #8]
    e234:	movw	ip, #16
    e238:	uxth	ip, ip
    e23c:	str	ip, [sp]
    e240:	movw	ip, #0
    e244:	str	ip, [sp, #4]
    e248:	bl	0 <flatcc_builder_create_buffer>
    e24c:	mov	sp, fp
    e250:	pop	{fp, pc}

0000e254 <flatcc_emitter_get_buffer_size>:
    e254:	sub	sp, sp, #4
    e258:	str	r0, [sp]
    e25c:	ldr	r0, [sp]
    e260:	ldr	r0, [r0, #24]
    e264:	add	sp, sp, #4
    e268:	bx	lr

0000e26c <MyGame_Example_Vec3_as_root>:
    e26c:	push	{fp, lr}
    e270:	mov	fp, sp
    e274:	sub	sp, sp, #16
    e278:	str	r0, [fp, #-4]
    e27c:	movw	r0, #0
    e280:	movt	r0, #0
    e284:	str	r0, [sp, #8]
    e288:	ldr	r0, [fp, #-4]
    e28c:	movw	r1, #0
    e290:	cmp	r0, r1
    e294:	beq	e2ac <MyGame_Example_Vec3_as_root+0x40>
    e298:	ldr	r0, [fp, #-4]
    e29c:	ldr	r1, [sp, #8]
    e2a0:	bl	25b8 <flatbuffers_has_identifier>
    e2a4:	cmp	r0, #0
    e2a8:	bne	e2b8 <MyGame_Example_Vec3_as_root+0x4c>
    e2ac:	movw	r0, #0
    e2b0:	str	r0, [sp, #4]
    e2b4:	b	e2d8 <MyGame_Example_Vec3_as_root+0x6c>
    e2b8:	ldr	r0, [fp, #-4]
    e2bc:	ldr	r1, [fp, #-4]
    e2c0:	str	r0, [sp]
    e2c4:	mov	r0, r1
    e2c8:	bl	f490 <__flatbuffers_uoffset_read_from_pe>
    e2cc:	ldr	r1, [sp]
    e2d0:	add	r0, r1, r0
    e2d4:	str	r0, [sp, #4]
    e2d8:	ldr	r0, [sp, #4]
    e2dc:	mov	sp, fp
    e2e0:	pop	{fp, pc}

0000e2e4 <MyGame_Example_Vec3_from_pe>:
    e2e4:	sub	sp, sp, #4
    e2e8:	str	r0, [sp]
    e2ec:	ldr	r0, [sp]
    e2f0:	add	sp, sp, #4
    e2f4:	bx	lr

0000e2f8 <test_typed_struct_buffer>:
    e2f8:	push	{fp, lr}
    e2fc:	mov	fp, sp
    e300:	sub	sp, sp, #136	; 0x88
    e304:	str	r0, [fp, #-8]
    e308:	ldr	r0, [fp, #-8]
    e30c:	bl	0 <flatcc_builder_reset>
    e310:	vldr	d2, [pc, #840]	; e660 <test_typed_struct_buffer+0x368>
    e314:	ldr	r1, [fp, #-8]
    e318:	str	r0, [sp, #12]
    e31c:	mov	r0, r1
    e320:	vmov.f32	s0, #112	; 0x3f800000  1.0
    e324:	vmov.f32	s1, #0	; 0x40000000  2.0
    e328:	vmov.f32	s2, #8	; 0x40400000  3.0
    e32c:	movw	r1, #8
    e330:	sxtb	r1, r1
    e334:	movw	r2, #2730	; 0xaaa
    e338:	sxth	r2, r2
    e33c:	movw	r3, #239	; 0xef
    e340:	sxtb	r3, r3
    e344:	bl	e66c <MyGame_Example_Vec3_create_as_typed_root>
    e348:	ldr	r1, [fp, #-8]
    e34c:	str	r0, [sp, #8]
    e350:	mov	r0, r1
    e354:	bl	0 <flatcc_builder_get_buffer_size>
    e358:	str	r0, [sp, #24]
    e35c:	ldr	r0, [sp, #24]
    e360:	cmp	r0, #48	; 0x30
    e364:	bne	e36c <test_typed_struct_buffer+0x74>
    e368:	b	e38c <test_typed_struct_buffer+0x94>
    e36c:	movw	r0, #0
    e370:	movt	r0, #0
    e374:	movw	r1, #0
    e378:	movt	r1, #0
    e37c:	movw	r2, #2388	; 0x954
    e380:	movw	r3, #0
    e384:	movt	r3, #0
    e388:	bl	0 <__assert_fail>
    e38c:	ldr	r1, [sp, #24]
    e390:	movw	r0, #0
    e394:	movt	r0, #0
    e398:	bl	0 <printf>
    e39c:	ldr	r1, [fp, #-8]
    e3a0:	str	r0, [sp, #4]
    e3a4:	mov	r0, r1
    e3a8:	bl	0 <flatcc_builder_get_emit_context>
    e3ac:	bl	e254 <flatcc_emitter_get_buffer_size>
    e3b0:	ldr	r1, [sp, #24]
    e3b4:	cmp	r0, r1
    e3b8:	bne	e3c0 <test_typed_struct_buffer+0xc8>
    e3bc:	b	e3e0 <test_typed_struct_buffer+0xe8>
    e3c0:	movw	r0, #0
    e3c4:	movt	r0, #0
    e3c8:	movw	r1, #0
    e3cc:	movt	r1, #0
    e3d0:	movw	r2, #2390	; 0x956
    e3d4:	movw	r3, #0
    e3d8:	movt	r3, #0
    e3dc:	bl	0 <__assert_fail>
    e3e0:	add	r1, sp, #28
    e3e4:	ldr	r0, [fp, #-8]
    e3e8:	movw	r2, #100	; 0x64
    e3ec:	bl	0 <flatcc_builder_copy_buffer>
    e3f0:	movw	r1, #0
    e3f4:	cmp	r0, r1
    e3f8:	bne	e414 <test_typed_struct_buffer+0x11c>
    e3fc:	movw	r0, #0
    e400:	movt	r0, #0
    e404:	bl	0 <printf>
    e408:	mvn	r1, #0
    e40c:	str	r1, [fp, #-4]
    e410:	b	e650 <test_typed_struct_buffer+0x358>
    e414:	add	r1, sp, #28
    e418:	ldr	r2, [sp, #24]
    e41c:	movw	r0, #0
    e420:	movt	r0, #0
    e424:	ldr	r3, [r0]
    e428:	movw	r0, #0
    e42c:	movt	r0, #0
    e430:	bl	adc <hexdump>
    e434:	add	r0, sp, #28
    e438:	movw	r1, #0
    e43c:	movt	r1, #0
    e440:	bl	25b8 <flatbuffers_has_identifier>
    e444:	cmp	r0, #0
    e448:	bne	e464 <test_typed_struct_buffer+0x16c>
    e44c:	movw	r0, #0
    e450:	movt	r0, #0
    e454:	bl	0 <printf>
    e458:	mvn	r1, #0
    e45c:	str	r1, [fp, #-4]
    e460:	b	e650 <test_typed_struct_buffer+0x358>
    e464:	add	r0, sp, #28
    e468:	movw	r1, #0
    e46c:	movt	r1, #0
    e470:	bl	25b8 <flatbuffers_has_identifier>
    e474:	cmp	r0, #0
    e478:	beq	e494 <test_typed_struct_buffer+0x19c>
    e47c:	movw	r0, #0
    e480:	movt	r0, #0
    e484:	bl	0 <printf>
    e488:	mvn	r1, #0
    e48c:	str	r1, [fp, #-4]
    e490:	b	e650 <test_typed_struct_buffer+0x358>
    e494:	add	r0, sp, #28
    e498:	movw	r1, #0
    e49c:	movt	r1, #0
    e4a0:	bl	25b8 <flatbuffers_has_identifier>
    e4a4:	cmp	r0, #0
    e4a8:	bne	e4c4 <test_typed_struct_buffer+0x1cc>
    e4ac:	movw	r0, #0
    e4b0:	movt	r0, #0
    e4b4:	bl	0 <printf>
    e4b8:	mvn	r1, #0
    e4bc:	str	r1, [fp, #-4]
    e4c0:	b	e650 <test_typed_struct_buffer+0x358>
    e4c4:	ldr	r1, [pc, #412]	; e668 <test_typed_struct_buffer+0x370>
    e4c8:	add	r0, sp, #28
    e4cc:	bl	e710 <MyGame_Example_Vec3_as_root_with_type_hash>
    e4d0:	movw	r1, #0
    e4d4:	cmp	r0, r1
    e4d8:	bne	e4f4 <test_typed_struct_buffer+0x1fc>
    e4dc:	movw	r0, #0
    e4e0:	movt	r0, #0
    e4e4:	bl	0 <printf>
    e4e8:	mvn	r1, #0
    e4ec:	str	r1, [fp, #-4]
    e4f0:	b	e650 <test_typed_struct_buffer+0x358>
    e4f4:	ldr	r2, [pc, #364]	; e668 <test_typed_struct_buffer+0x370>
    e4f8:	add	r0, sp, #28
    e4fc:	ldr	r1, [sp, #24]
    e500:	bl	e780 <MyGame_Example_Vec3_verify_as_root_with_type_hash>
    e504:	movw	r1, #0
    e508:	cmp	r1, r0
    e50c:	beq	e528 <test_typed_struct_buffer+0x230>
    e510:	movw	r0, #0
    e514:	movt	r0, #0
    e518:	bl	0 <printf>
    e51c:	mvn	r1, #0
    e520:	str	r1, [fp, #-4]
    e524:	b	e650 <test_typed_struct_buffer+0x358>
    e528:	add	r0, sp, #28
    e52c:	bl	e7c0 <MyGame_Example_Vec3_as_typed_root>
    e530:	str	r0, [sp, #16]
    e534:	ldr	r0, [sp, #16]
    e538:	movw	r1, #0
    e53c:	cmp	r0, r1
    e540:	bne	e55c <test_typed_struct_buffer+0x264>
    e544:	movw	r0, #0
    e548:	movt	r0, #0
    e54c:	bl	0 <printf>
    e550:	mvn	r1, #0
    e554:	str	r1, [fp, #-4]
    e558:	b	e650 <test_typed_struct_buffer+0x358>
    e55c:	add	r0, sp, #28
    e560:	ldr	r1, [sp, #24]
    e564:	bl	e830 <MyGame_Example_Vec3_verify_as_typed_root>
    e568:	movw	r1, #0
    e56c:	cmp	r1, r0
    e570:	beq	e58c <test_typed_struct_buffer+0x294>
    e574:	movw	r0, #0
    e578:	movt	r0, #0
    e57c:	bl	0 <printf>
    e580:	mvn	r1, #0
    e584:	str	r1, [fp, #-4]
    e588:	b	e650 <test_typed_struct_buffer+0x358>
    e58c:	ldr	r0, [sp, #16]
    e590:	str	r0, [sp, #20]
    e594:	ldr	r0, [sp, #20]
    e598:	bl	e2e4 <MyGame_Example_Vec3_from_pe>
    e59c:	ldr	r1, [sp, #20]
    e5a0:	vldr	s0, [r1]
    e5a4:	vmov.f32	s2, #112	; 0x3f800000  1.0
    e5a8:	vcmp.f32	s0, s2
    e5ac:	vmrs	APSR_nzcv, fpscr
    e5b0:	bne	e630 <test_typed_struct_buffer+0x338>
    e5b4:	ldr	r0, [sp, #20]
    e5b8:	vldr	s0, [r0, #4]
    e5bc:	vmov.f32	s2, #0	; 0x40000000  2.0
    e5c0:	vcmp.f32	s0, s2
    e5c4:	vmrs	APSR_nzcv, fpscr
    e5c8:	bne	e630 <test_typed_struct_buffer+0x338>
    e5cc:	ldr	r0, [sp, #20]
    e5d0:	vldr	s0, [r0, #8]
    e5d4:	vmov.f32	s2, #8	; 0x40400000  3.0
    e5d8:	vcmp.f32	s0, s2
    e5dc:	vmrs	APSR_nzcv, fpscr
    e5e0:	bne	e630 <test_typed_struct_buffer+0x338>
    e5e4:	vldr	d16, [pc, #116]	; e660 <test_typed_struct_buffer+0x368>
    e5e8:	ldr	r0, [sp, #20]
    e5ec:	vldr	d17, [r0, #16]
    e5f0:	vcmp.f64	d17, d16
    e5f4:	vmrs	APSR_nzcv, fpscr
    e5f8:	bne	e630 <test_typed_struct_buffer+0x338>
    e5fc:	ldr	r0, [sp, #20]
    e600:	ldrsb	r0, [r0, #24]
    e604:	cmp	r0, #8
    e608:	bne	e630 <test_typed_struct_buffer+0x338>
    e60c:	ldr	r0, [sp, #20]
    e610:	ldrsh	r0, [r0, #26]
    e614:	movw	r1, #2730	; 0xaaa
    e618:	cmp	r0, r1
    e61c:	bne	e630 <test_typed_struct_buffer+0x338>
    e620:	ldr	r0, [sp, #20]
    e624:	ldrsb	r0, [r0, #28]
    e628:	cmn	r0, #17
    e62c:	beq	e648 <test_typed_struct_buffer+0x350>
    e630:	movw	r0, #0
    e634:	movt	r0, #0
    e638:	bl	0 <printf>
    e63c:	mvn	r1, #0
    e640:	str	r1, [fp, #-4]
    e644:	b	e650 <test_typed_struct_buffer+0x358>
    e648:	movw	r0, #0
    e64c:	str	r0, [fp, #-4]
    e650:	ldr	r0, [fp, #-4]
    e654:	mov	sp, fp
    e658:	pop	{fp, pc}
    e65c:	nop	{0}
    e660:	.word	0xcccccccd
    e664:	.word	0x4010cccc
    e668:	.word	0xa8f53ed2

0000e66c <MyGame_Example_Vec3_create_as_typed_root>:
    e66c:	push	{fp, lr}
    e670:	mov	fp, sp
    e674:	sub	sp, sp, #48	; 0x30
    e678:	str	r0, [fp, #-4]
    e67c:	vstr	s0, [fp, #-8]
    e680:	vstr	s1, [fp, #-12]
    e684:	vstr	s2, [fp, #-16]
    e688:	vstr	d2, [sp, #24]
    e68c:	strb	r1, [sp, #23]
    e690:	strh	r2, [sp, #20]
    e694:	strb	r3, [sp, #19]
    e698:	ldr	r0, [fp, #-4]
    e69c:	ldr	r1, [fp, #-4]
    e6a0:	vldr	s0, [fp, #-8]
    e6a4:	vldr	s1, [fp, #-12]
    e6a8:	vldr	s2, [fp, #-16]
    e6ac:	vldr	d2, [sp, #24]
    e6b0:	ldrb	r2, [sp, #23]
    e6b4:	ldrh	r3, [sp, #20]
    e6b8:	str	r0, [sp, #12]
    e6bc:	mov	r0, r1
    e6c0:	sxtb	r1, r2
    e6c4:	sxth	r2, r3
    e6c8:	ldrsb	r3, [sp, #19]
    e6cc:	bl	13e98 <MyGame_Example_Vec3_create>
    e6d0:	ldr	r1, [sp, #12]
    e6d4:	str	r0, [sp, #8]
    e6d8:	mov	r0, r1
    e6dc:	movw	r1, #0
    e6e0:	movt	r1, #0
    e6e4:	movw	r2, #0
    e6e8:	uxth	r2, r2
    e6ec:	ldr	r3, [sp, #8]
    e6f0:	movw	ip, #16
    e6f4:	uxth	ip, ip
    e6f8:	str	ip, [sp]
    e6fc:	movw	ip, #0
    e700:	str	ip, [sp, #4]
    e704:	bl	0 <flatcc_builder_create_buffer>
    e708:	mov	sp, fp
    e70c:	pop	{fp, pc}

0000e710 <MyGame_Example_Vec3_as_root_with_type_hash>:
    e710:	push	{fp, lr}
    e714:	mov	fp, sp
    e718:	sub	sp, sp, #16
    e71c:	str	r0, [fp, #-4]
    e720:	str	r1, [sp, #8]
    e724:	ldr	r0, [fp, #-4]
    e728:	movw	r1, #0
    e72c:	cmp	r0, r1
    e730:	beq	e748 <MyGame_Example_Vec3_as_root_with_type_hash+0x38>
    e734:	ldr	r0, [fp, #-4]
    e738:	ldr	r1, [sp, #8]
    e73c:	bl	1d34 <flatbuffers_has_type_hash>
    e740:	cmp	r0, #0
    e744:	bne	e754 <MyGame_Example_Vec3_as_root_with_type_hash+0x44>
    e748:	movw	r0, #0
    e74c:	str	r0, [sp, #4]
    e750:	b	e774 <MyGame_Example_Vec3_as_root_with_type_hash+0x64>
    e754:	ldr	r0, [fp, #-4]
    e758:	ldr	r1, [fp, #-4]
    e75c:	str	r0, [sp]
    e760:	mov	r0, r1
    e764:	bl	f490 <__flatbuffers_uoffset_read_from_pe>
    e768:	ldr	r1, [sp]
    e76c:	add	r0, r1, r0
    e770:	str	r0, [sp, #4]
    e774:	ldr	r0, [sp, #4]
    e778:	mov	sp, fp
    e77c:	pop	{fp, pc}

0000e780 <MyGame_Example_Vec3_verify_as_root_with_type_hash>:
    e780:	push	{fp, lr}
    e784:	mov	fp, sp
    e788:	sub	sp, sp, #16
    e78c:	str	r0, [fp, #-4]
    e790:	str	r1, [sp, #8]
    e794:	str	r2, [sp, #4]
    e798:	ldr	r0, [fp, #-4]
    e79c:	ldr	r1, [sp, #8]
    e7a0:	ldr	r2, [sp, #4]
    e7a4:	movw	r3, #32
    e7a8:	movw	ip, #16
    e7ac:	uxth	ip, ip
    e7b0:	str	ip, [sp]
    e7b4:	bl	0 <flatcc_verify_struct_as_typed_root>
    e7b8:	mov	sp, fp
    e7bc:	pop	{fp, pc}

0000e7c0 <MyGame_Example_Vec3_as_typed_root>:
    e7c0:	push	{fp, lr}
    e7c4:	mov	fp, sp
    e7c8:	sub	sp, sp, #16
    e7cc:	str	r0, [fp, #-4]
    e7d0:	ldr	r0, [fp, #-4]
    e7d4:	movw	r1, #0
    e7d8:	cmp	r0, r1
    e7dc:	beq	e7f4 <MyGame_Example_Vec3_as_typed_root+0x34>
    e7e0:	ldr	r1, [pc, #68]	; e82c <MyGame_Example_Vec3_as_typed_root+0x6c>
    e7e4:	ldr	r0, [fp, #-4]
    e7e8:	bl	1d34 <flatbuffers_has_type_hash>
    e7ec:	cmp	r0, #0
    e7f0:	bne	e800 <MyGame_Example_Vec3_as_typed_root+0x40>
    e7f4:	movw	r0, #0
    e7f8:	str	r0, [sp, #8]
    e7fc:	b	e820 <MyGame_Example_Vec3_as_typed_root+0x60>
    e800:	ldr	r0, [fp, #-4]
    e804:	ldr	r1, [fp, #-4]
    e808:	str	r0, [sp, #4]
    e80c:	mov	r0, r1
    e810:	bl	f490 <__flatbuffers_uoffset_read_from_pe>
    e814:	ldr	r1, [sp, #4]
    e818:	add	r0, r1, r0
    e81c:	str	r0, [sp, #8]
    e820:	ldr	r0, [sp, #8]
    e824:	mov	sp, fp
    e828:	pop	{fp, pc}
    e82c:	.word	0xa8f53ed2

0000e830 <MyGame_Example_Vec3_verify_as_typed_root>:
    e830:	push	{fp, lr}
    e834:	mov	fp, sp
    e838:	sub	sp, sp, #16
    e83c:	ldr	r2, [pc, #40]	; e86c <MyGame_Example_Vec3_verify_as_typed_root+0x3c>
    e840:	str	r0, [fp, #-4]
    e844:	str	r1, [sp, #8]
    e848:	ldr	r0, [fp, #-4]
    e84c:	ldr	r1, [sp, #8]
    e850:	movw	r3, #32
    e854:	movw	ip, #16
    e858:	uxth	ip, ip
    e85c:	str	ip, [sp]
    e860:	bl	0 <flatcc_verify_struct_as_typed_root>
    e864:	mov	sp, fp
    e868:	pop	{fp, pc}
    e86c:	.word	0xa8f53ed2

0000e870 <gen_monster_benchmark>:
    e870:	push	{fp, lr}
    e874:	mov	fp, sp
    e878:	sub	sp, sp, #72	; 0x48
    e87c:	str	r0, [fp, #-4]
    e880:	movw	r0, #0
    e884:	movt	r0, #0
    e888:	ldrb	r1, [r0]
    e88c:	strb	r1, [fp, #-14]
    e890:	ldrb	r1, [r0, #1]
    e894:	strb	r1, [fp, #-13]
    e898:	ldrb	r1, [r0, #2]
    e89c:	strb	r1, [fp, #-12]
    e8a0:	ldrb	r1, [r0, #3]
    e8a4:	strb	r1, [fp, #-11]
    e8a8:	ldrb	r1, [r0, #4]
    e8ac:	strb	r1, [fp, #-10]
    e8b0:	ldrb	r1, [r0, #5]
    e8b4:	strb	r1, [fp, #-9]
    e8b8:	ldrb	r1, [r0, #6]
    e8bc:	strb	r1, [fp, #-8]
    e8c0:	ldrb	r1, [r0, #7]
    e8c4:	strb	r1, [fp, #-7]
    e8c8:	ldrb	r1, [r0, #8]
    e8cc:	strb	r1, [fp, #-6]
    e8d0:	ldrb	r0, [r0, #9]
    e8d4:	strb	r0, [fp, #-5]
    e8d8:	ldr	r0, [fp, #-4]
    e8dc:	bl	0 <flatcc_builder_reset>
    e8e0:	ldr	r1, [fp, #-4]
    e8e4:	str	r0, [fp, #-32]	; 0xffffffe0
    e8e8:	mov	r0, r1
    e8ec:	bl	57c0 <MyGame_Example_Monster_start_as_root>
    e8f0:	ldr	r1, [fp, #-4]
    e8f4:	str	r0, [sp, #36]	; 0x24
    e8f8:	mov	r0, r1
    e8fc:	movw	r1, #80	; 0x50
    e900:	sxth	r1, r1
    e904:	bl	580c <MyGame_Example_Monster_hp_add>
    e908:	ldr	r1, [fp, #-4]
    e90c:	str	r0, [sp, #32]
    e910:	mov	r0, r1
    e914:	bl	5890 <MyGame_Example_Monster_pos_start>
    e918:	vldr	s0, [pc, #328]	; ea68 <gen_monster_benchmark+0x1f8>
    e91c:	str	r0, [fp, #-20]	; 0xffffffec
    e920:	ldr	r0, [fp, #-20]	; 0xffffffec
    e924:	vmov.f32	s2, #112	; 0x3f800000  1.0
    e928:	vstr	s2, [r0]
    e92c:	ldr	r0, [fp, #-20]	; 0xffffffec
    e930:	vmov.f32	s2, #0	; 0x40000000  2.0
    e934:	vstr	s2, [r0, #4]
    e938:	ldr	r0, [fp, #-20]	; 0xffffffec
    e93c:	vstr	s0, [r0, #8]
    e940:	ldr	r0, [fp, #-4]
    e944:	bl	58c0 <MyGame_Example_Monster_pos_end>
    e948:	ldr	r1, [fp, #-4]
    e94c:	str	r0, [sp, #28]
    e950:	mov	r0, r1
    e954:	movw	r1, #0
    e958:	movt	r1, #0
    e95c:	bl	1818 <MyGame_Example_Monster_name_create_str>
    e960:	sub	r1, fp, #14
    e964:	ldr	r2, [fp, #-4]
    e968:	str	r0, [sp, #24]
    e96c:	mov	r0, r2
    e970:	movw	r2, #10
    e974:	bl	5954 <MyGame_Example_Monster_inventory_create>
    e978:	ldr	r1, [fp, #-4]
    e97c:	str	r0, [sp, #20]
    e980:	mov	r0, r1
    e984:	bl	59ac <MyGame_Example_Monster_test4_start>
    e988:	ldr	r1, [fp, #-4]
    e98c:	str	r0, [sp, #16]
    e990:	mov	r0, r1
    e994:	movw	r1, #1
    e998:	bl	59cc <MyGame_Example_Monster_test4_extend>
    e99c:	str	r0, [fp, #-24]	; 0xffffffe8
    e9a0:	ldr	r0, [fp, #-24]	; 0xffffffe8
    e9a4:	movw	r1, #16
    e9a8:	strh	r1, [r0]
    e9ac:	ldr	r0, [fp, #-24]	; 0xffffffe8
    e9b0:	movw	r1, #32
    e9b4:	strb	r1, [r0, #2]
    e9b8:	ldr	r0, [fp, #-4]
    e9bc:	movw	r1, #2
    e9c0:	bl	59cc <MyGame_Example_Monster_test4_extend>
    e9c4:	str	r0, [fp, #-24]	; 0xffffffe8
    e9c8:	ldr	r0, [fp, #-24]	; 0xffffffe8
    e9cc:	movw	r1, #48	; 0x30
    e9d0:	strh	r1, [r0]
    e9d4:	ldr	r0, [fp, #-24]	; 0xffffffe8
    e9d8:	movw	r1, #64	; 0x40
    e9dc:	strb	r1, [r0, #2]
    e9e0:	ldr	r0, [fp, #-24]	; 0xffffffe8
    e9e4:	movw	r1, #80	; 0x50
    e9e8:	strh	r1, [r0, #4]
    e9ec:	ldr	r0, [fp, #-24]	; 0xffffffe8
    e9f0:	movw	r1, #96	; 0x60
    e9f4:	strb	r1, [r0, #6]
    e9f8:	ldr	r0, [fp, #-4]
    e9fc:	movw	r1, #112	; 0x70
    ea00:	sxth	r1, r1
    ea04:	movw	r2, #128	; 0x80
    ea08:	sxtb	r2, r2
    ea0c:	bl	59f4 <MyGame_Example_Monster_test4_push_create>
    ea10:	movw	r1, #401	; 0x191
    ea14:	strh	r1, [fp, #-28]	; 0xffffffe4
    ea18:	movw	r1, #145	; 0x91
    ea1c:	strb	r1, [fp, #-26]	; 0xffffffe6
    ea20:	ldr	r1, [fp, #-4]
    ea24:	str	r0, [sp, #12]
    ea28:	mov	r0, r1
    ea2c:	sub	r1, fp, #28
    ea30:	bl	5a5c <MyGame_Example_Monster_test4_push>
    ea34:	ldr	r1, [fp, #-4]
    ea38:	str	r0, [sp, #8]
    ea3c:	mov	r0, r1
    ea40:	bl	5bc4 <MyGame_Example_Monster_test4_end>
    ea44:	ldr	r1, [fp, #-4]
    ea48:	str	r0, [sp, #4]
    ea4c:	mov	r0, r1
    ea50:	bl	6360 <MyGame_Example_Monster_end_as_root>
    ea54:	movw	r1, #0
    ea58:	str	r0, [sp]
    ea5c:	mov	r0, r1
    ea60:	mov	sp, fp
    ea64:	pop	{fp, pc}
    ea68:	.word	0xc04ccccd

0000ea6c <time_monster>:
    ea6c:	push	{fp, lr}
    ea70:	mov	fp, sp
    ea74:	sub	sp, sp, #48	; 0x30
    ea78:	ldr	r1, [pc, #152]	; eb18 <time_monster+0xac>
    ea7c:	str	r0, [fp, #-4]
    ea80:	str	r1, [sp, #20]
    ea84:	movw	r0, #0
    ea88:	movt	r0, #0
    ea8c:	bl	0 <printf>
    ea90:	str	r0, [sp, #8]
    ea94:	bl	eb20 <elapsed_realtime>
    ea98:	vstr	d0, [fp, #-16]
    ea9c:	movw	r0, #0
    eaa0:	str	r0, [sp, #12]
    eaa4:	ldr	r0, [pc, #108]	; eb18 <time_monster+0xac>
    eaa8:	ldr	r1, [sp, #12]
    eaac:	cmp	r1, r0
    eab0:	bge	eacc <time_monster+0x60>
    eab4:	ldr	r0, [fp, #-4]
    eab8:	bl	e870 <gen_monster_benchmark>
    eabc:	ldr	r0, [sp, #12]
    eac0:	add	r0, r0, #1
    eac4:	str	r0, [sp, #12]
    eac8:	b	eaa4 <time_monster+0x38>
    eacc:	ldr	r0, [fp, #-4]
    ead0:	bl	0 <flatcc_builder_get_buffer_size>
    ead4:	str	r0, [sp, #16]
    ead8:	bl	eb20 <elapsed_realtime>
    eadc:	ldr	r2, [pc, #52]	; eb18 <time_monster+0xac>
    eae0:	vstr	d0, [sp, #24]
    eae4:	vldr	d0, [fp, #-16]
    eae8:	vldr	d1, [sp, #24]
    eaec:	ldr	r1, [sp, #16]
    eaf0:	movw	r0, #0
    eaf4:	movt	r0, #0
    eaf8:	movw	r3, #0
    eafc:	movt	r3, #0
    eb00:	bl	ebb0 <show_benchmark>
    eb04:	movw	r1, #0
    eb08:	str	r0, [sp, #4]
    eb0c:	mov	r0, r1
    eb10:	mov	sp, fp
    eb14:	pop	{fp, pc}
    eb18:	.word	0x000f4240
    eb1c:	.word	0xe320f000

0000eb20 <elapsed_realtime>:
    eb20:	push	{fp, lr}
    eb24:	mov	fp, sp
    eb28:	sub	sp, sp, #8
    eb2c:	mov	r0, sp
    eb30:	movw	r1, #0
    eb34:	bl	0 <gettimeofday>
    eb38:	movw	r1, #0
    eb3c:	movt	r1, #0
    eb40:	ldr	r1, [r1]
    eb44:	cmp	r1, #0
    eb48:	bne	eb64 <elapsed_realtime+0x44>
    eb4c:	ldr	r0, [sp]
    eb50:	movw	r1, #0
    eb54:	movt	r1, #0
    eb58:	str	r0, [r1]
    eb5c:	ldr	r0, [sp, #4]
    eb60:	str	r0, [r1, #4]
    eb64:	vldr	d16, [pc, #60]	; eba8 <elapsed_realtime+0x88>
    eb68:	ldr	r0, [sp]
    eb6c:	movw	r1, #0
    eb70:	movt	r1, #0
    eb74:	ldr	r2, [r1]
    eb78:	sub	r0, r0, r2
    eb7c:	vmov	s0, r0
    eb80:	vcvt.f64.s32	d17, s0
    eb84:	ldr	r0, [sp, #4]
    eb88:	ldr	r1, [r1, #4]
    eb8c:	sub	r0, r0, r1
    eb90:	vmov	s0, r0
    eb94:	vcvt.f64.s32	d18, s0
    eb98:	vdiv.f64	d16, d18, d16
    eb9c:	vadd.f64	d0, d17, d16
    eba0:	mov	sp, fp
    eba4:	pop	{fp, pc}
    eba8:	.word	0x00000000
    ebac:	.word	0x412e8480

0000ebb0 <show_benchmark>:
    ebb0:	push	{fp, lr}
    ebb4:	mov	fp, sp
    ebb8:	sub	sp, sp, #80	; 0x50
    ebbc:	str	r0, [fp, #-4]
    ebc0:	vstr	d0, [fp, #-16]
    ebc4:	vstr	d1, [fp, #-24]	; 0xffffffe8
    ebc8:	str	r1, [fp, #-28]	; 0xffffffe4
    ebcc:	str	r2, [fp, #-32]	; 0xffffffe0
    ebd0:	str	r3, [fp, #-36]	; 0xffffffdc
    ebd4:	vldr	d16, [fp, #-24]	; 0xffffffe8
    ebd8:	vldr	d17, [fp, #-16]
    ebdc:	vsub.f64	d16, d16, d17
    ebe0:	vstr	d16, [sp, #32]
    ebe4:	ldr	r1, [fp, #-4]
    ebe8:	movw	r0, #0
    ebec:	movt	r0, #0
    ebf0:	bl	0 <printf>
    ebf4:	vldr	d16, [sp, #32]
    ebf8:	movw	r1, #0
    ebfc:	movt	r1, #0
    ec00:	str	r0, [sp, #20]
    ec04:	mov	r0, r1
    ec08:	vmov	r2, r3, d16
    ec0c:	bl	0 <printf>
    ec10:	ldr	r1, [fp, #-32]	; 0xffffffe0
    ec14:	movw	r2, #0
    ec18:	movt	r2, #0
    ec1c:	str	r0, [sp, #16]
    ec20:	mov	r0, r2
    ec24:	bl	0 <printf>
    ec28:	ldr	r1, [fp, #-28]	; 0xffffffe4
    ec2c:	movw	r2, #0
    ec30:	movt	r2, #0
    ec34:	str	r0, [sp, #12]
    ec38:	mov	r0, r2
    ec3c:	bl	0 <printf>
    ec40:	vldr	d16, [pc, #392]	; edd0 <show_benchmark+0x220>
    ec44:	ldr	r1, [fp, #-32]	; 0xffffffe0
    ec48:	vmov	s4, r1
    ec4c:	vcvt.f64.s32	d17, s4
    ec50:	ldr	r1, [fp, #-28]	; 0xffffffe4
    ec54:	vmov	s4, r1
    ec58:	vcvt.f64.u32	d18, s4
    ec5c:	vmul.f64	d17, d17, d18
    ec60:	vdiv.f64	d16, d17, d16
    ec64:	vldr	d17, [sp, #32]
    ec68:	vdiv.f64	d16, d16, d17
    ec6c:	movw	r1, #0
    ec70:	movt	r1, #0
    ec74:	str	r0, [sp, #8]
    ec78:	mov	r0, r1
    ec7c:	vmov	r2, r3, d16
    ec80:	bl	0 <printf>
    ec84:	ldr	r1, [fp, #-32]	; 0xffffffe0
    ec88:	vmov	s4, r1
    ec8c:	vcvt.f64.s32	d16, s4
    ec90:	vldr	d17, [sp, #32]
    ec94:	vdiv.f64	d16, d16, d17
    ec98:	movw	r1, #0
    ec9c:	movt	r1, #0
    eca0:	str	r0, [sp, #4]
    eca4:	mov	r0, r1
    eca8:	vmov	r2, r3, d16
    ecac:	bl	0 <printf>
    ecb0:	ldr	r1, [fp, #-36]	; 0xffffffdc
    ecb4:	movw	r2, #0
    ecb8:	cmp	r1, r2
    ecbc:	beq	ecec <show_benchmark+0x13c>
    ecc0:	ldr	r0, [fp, #-32]	; 0xffffffe0
    ecc4:	cmp	r0, #1
    ecc8:	beq	ecec <show_benchmark+0x13c>
    eccc:	ldr	r1, [fp, #-36]	; 0xffffffdc
    ecd0:	vldr	d16, [sp, #32]
    ecd4:	vmov.f64	d17, #112	; 0x3f800000  1.0
    ecd8:	vdiv.f64	d16, d17, d16
    ecdc:	movw	r0, #0
    ece0:	movt	r0, #0
    ece4:	vmov	r2, r3, d16
    ece8:	bl	0 <printf>
    ecec:	vldr	d16, [pc, #228]	; edd8 <show_benchmark+0x228>
    ecf0:	vldr	d17, [pc, #232]	; ede0 <show_benchmark+0x230>
    ecf4:	vldr	d18, [sp, #32]
    ecf8:	vmul.f64	d17, d18, d17
    ecfc:	ldr	r0, [fp, #-32]	; 0xffffffe0
    ed00:	vmov	s0, r0
    ed04:	vcvt.f64.s32	d18, s0
    ed08:	vdiv.f64	d17, d17, d18
    ed0c:	vstr	d17, [sp, #24]
    ed10:	vldr	d17, [sp, #24]
    ed14:	vcmpe.f64	d17, d16
    ed18:	vmrs	APSR_nzcv, fpscr
    ed1c:	bpl	ed38 <show_benchmark+0x188>
    ed20:	vldr	d16, [sp, #24]
    ed24:	movw	r0, #0
    ed28:	movt	r0, #0
    ed2c:	vmov	r2, r3, d16
    ed30:	bl	0 <printf>
    ed34:	b	edc4 <show_benchmark+0x214>
    ed38:	vldr	d16, [pc, #144]	; edd0 <show_benchmark+0x220>
    ed3c:	vldr	d17, [sp, #24]
    ed40:	vcmpe.f64	d17, d16
    ed44:	vmrs	APSR_nzcv, fpscr
    ed48:	bpl	ed6c <show_benchmark+0x1bc>
    ed4c:	vldr	d16, [pc, #132]	; edd8 <show_benchmark+0x228>
    ed50:	vldr	d17, [sp, #24]
    ed54:	vdiv.f64	d16, d17, d16
    ed58:	movw	r0, #0
    ed5c:	movt	r0, #0
    ed60:	vmov	r2, r3, d16
    ed64:	bl	0 <printf>
    ed68:	b	edc0 <show_benchmark+0x210>
    ed6c:	vldr	d16, [pc, #108]	; ede0 <show_benchmark+0x230>
    ed70:	vldr	d17, [sp, #24]
    ed74:	vcmpe.f64	d17, d16
    ed78:	vmrs	APSR_nzcv, fpscr
    ed7c:	bpl	eda0 <show_benchmark+0x1f0>
    ed80:	vldr	d16, [pc, #72]	; edd0 <show_benchmark+0x220>
    ed84:	vldr	d17, [sp, #24]
    ed88:	vdiv.f64	d16, d17, d16
    ed8c:	movw	r0, #0
    ed90:	movt	r0, #0
    ed94:	vmov	r2, r3, d16
    ed98:	bl	0 <printf>
    ed9c:	b	edbc <show_benchmark+0x20c>
    eda0:	vldr	d16, [pc, #56]	; ede0 <show_benchmark+0x230>
    eda4:	vldr	d17, [sp, #24]
    eda8:	vdiv.f64	d16, d17, d16
    edac:	movw	r0, #0
    edb0:	movt	r0, #0
    edb4:	vmov	r2, r3, d16
    edb8:	bl	0 <printf>
    edbc:	b	edc0 <show_benchmark+0x210>
    edc0:	b	edc4 <show_benchmark+0x214>
    edc4:	movw	r0, #0
    edc8:	mov	sp, fp
    edcc:	pop	{fp, pc}
    edd0:	.word	0x00000000
    edd4:	.word	0x412e8480
    edd8:	.word	0x00000000
    eddc:	.word	0x408f4000
    ede0:	.word	0x00000000
    ede4:	.word	0x41cdcd65

0000ede8 <gen_struct_buffer_benchmark>:
    ede8:	push	{fp, lr}
    edec:	mov	fp, sp
    edf0:	sub	sp, sp, #32
    edf4:	str	r0, [fp, #-8]
    edf8:	ldr	r0, [fp, #-8]
    edfc:	bl	0 <flatcc_builder_reset>
    ee00:	vldr	d2, [pc, #312]	; ef40 <gen_struct_buffer_benchmark+0x158>
    ee04:	ldr	r1, [fp, #-8]
    ee08:	str	r0, [sp, #8]
    ee0c:	mov	r0, r1
    ee10:	vmov.f32	s0, #112	; 0x3f800000  1.0
    ee14:	vmov.f32	s1, #0	; 0x40000000  2.0
    ee18:	vmov.f32	s2, #8	; 0x40400000  3.0
    ee1c:	movw	r1, #8
    ee20:	sxtb	r1, r1
    ee24:	movw	r2, #2730	; 0xaaa
    ee28:	sxth	r2, r2
    ee2c:	movw	r3, #239	; 0xef
    ee30:	sxtb	r3, r3
    ee34:	bl	e1b0 <MyGame_Example_Vec3_create_as_root>
    ee38:	ldr	r1, [fp, #-8]
    ee3c:	str	r0, [sp, #4]
    ee40:	mov	r0, r1
    ee44:	movw	r1, #0
    ee48:	bl	0 <flatcc_builder_get_direct_buffer>
    ee4c:	str	r0, [fp, #-12]
    ee50:	ldr	r0, [fp, #-12]
    ee54:	movw	r1, #0
    ee58:	cmp	r0, r1
    ee5c:	bne	ee6c <gen_struct_buffer_benchmark+0x84>
    ee60:	mvn	r0, #0
    ee64:	str	r0, [fp, #-4]
    ee68:	b	ef34 <gen_struct_buffer_benchmark+0x14c>
    ee6c:	ldr	r0, [fp, #-12]
    ee70:	movw	r1, #0
    ee74:	bl	ef48 <MyGame_Example_Vec3_as_root_with_identifier>
    ee78:	str	r0, [sp, #12]
    ee7c:	ldr	r0, [sp, #12]
    ee80:	str	r0, [sp, #16]
    ee84:	ldr	r0, [sp, #16]
    ee88:	bl	e2e4 <MyGame_Example_Vec3_from_pe>
    ee8c:	ldr	r1, [sp, #16]
    ee90:	vldr	s0, [r1]
    ee94:	vmov.f32	s2, #112	; 0x3f800000  1.0
    ee98:	vcmp.f32	s0, s2
    ee9c:	vmrs	APSR_nzcv, fpscr
    eea0:	bne	ef20 <gen_struct_buffer_benchmark+0x138>
    eea4:	ldr	r0, [sp, #16]
    eea8:	vldr	s0, [r0, #4]
    eeac:	vmov.f32	s2, #0	; 0x40000000  2.0
    eeb0:	vcmp.f32	s0, s2
    eeb4:	vmrs	APSR_nzcv, fpscr
    eeb8:	bne	ef20 <gen_struct_buffer_benchmark+0x138>
    eebc:	ldr	r0, [sp, #16]
    eec0:	vldr	s0, [r0, #8]
    eec4:	vmov.f32	s2, #8	; 0x40400000  3.0
    eec8:	vcmp.f32	s0, s2
    eecc:	vmrs	APSR_nzcv, fpscr
    eed0:	bne	ef20 <gen_struct_buffer_benchmark+0x138>
    eed4:	vldr	d16, [pc, #100]	; ef40 <gen_struct_buffer_benchmark+0x158>
    eed8:	ldr	r0, [sp, #16]
    eedc:	vldr	d17, [r0, #16]
    eee0:	vcmp.f64	d17, d16
    eee4:	vmrs	APSR_nzcv, fpscr
    eee8:	bne	ef20 <gen_struct_buffer_benchmark+0x138>
    eeec:	ldr	r0, [sp, #16]
    eef0:	ldrsb	r0, [r0, #24]
    eef4:	cmp	r0, #8
    eef8:	bne	ef20 <gen_struct_buffer_benchmark+0x138>
    eefc:	ldr	r0, [sp, #16]
    ef00:	ldrsh	r0, [r0, #26]
    ef04:	movw	r1, #2730	; 0xaaa
    ef08:	cmp	r0, r1
    ef0c:	bne	ef20 <gen_struct_buffer_benchmark+0x138>
    ef10:	ldr	r0, [sp, #16]
    ef14:	ldrsb	r0, [r0, #28]
    ef18:	cmn	r0, #17
    ef1c:	beq	ef2c <gen_struct_buffer_benchmark+0x144>
    ef20:	mvn	r0, #0
    ef24:	str	r0, [fp, #-4]
    ef28:	b	ef34 <gen_struct_buffer_benchmark+0x14c>
    ef2c:	movw	r0, #0
    ef30:	str	r0, [fp, #-4]
    ef34:	ldr	r0, [fp, #-4]
    ef38:	mov	sp, fp
    ef3c:	pop	{fp, pc}
    ef40:	.word	0xcccccccd
    ef44:	.word	0x4010cccc

0000ef48 <MyGame_Example_Vec3_as_root_with_identifier>:
    ef48:	push	{fp, lr}
    ef4c:	mov	fp, sp
    ef50:	sub	sp, sp, #16
    ef54:	str	r0, [fp, #-4]
    ef58:	str	r1, [sp, #8]
    ef5c:	ldr	r0, [fp, #-4]
    ef60:	movw	r1, #0
    ef64:	cmp	r0, r1
    ef68:	beq	ef80 <MyGame_Example_Vec3_as_root_with_identifier+0x38>
    ef6c:	ldr	r0, [fp, #-4]
    ef70:	ldr	r1, [sp, #8]
    ef74:	bl	25b8 <flatbuffers_has_identifier>
    ef78:	cmp	r0, #0
    ef7c:	bne	ef8c <MyGame_Example_Vec3_as_root_with_identifier+0x44>
    ef80:	movw	r0, #0
    ef84:	str	r0, [sp, #4]
    ef88:	b	efac <MyGame_Example_Vec3_as_root_with_identifier+0x64>
    ef8c:	ldr	r0, [fp, #-4]
    ef90:	ldr	r1, [fp, #-4]
    ef94:	str	r0, [sp]
    ef98:	mov	r0, r1
    ef9c:	bl	f490 <__flatbuffers_uoffset_read_from_pe>
    efa0:	ldr	r1, [sp]
    efa4:	add	r0, r1, r0
    efa8:	str	r0, [sp, #4]
    efac:	ldr	r0, [sp, #4]
    efb0:	mov	sp, fp
    efb4:	pop	{fp, pc}

0000efb8 <time_struct_buffer>:
    efb8:	push	{fp, lr}
    efbc:	mov	fp, sp
    efc0:	sub	sp, sp, #48	; 0x30
    efc4:	ldr	r1, [pc, #196]	; f090 <time_struct_buffer+0xd8>
    efc8:	str	r0, [fp, #-4]
    efcc:	str	r1, [sp, #20]
    efd0:	movw	r0, #0
    efd4:	str	r0, [sp, #8]
    efd8:	movw	r0, #0
    efdc:	movt	r0, #0
    efe0:	bl	0 <printf>
    efe4:	str	r0, [sp, #4]
    efe8:	bl	eb20 <elapsed_realtime>
    efec:	vstr	d0, [fp, #-16]
    eff0:	movw	r0, #0
    eff4:	str	r0, [sp, #12]
    eff8:	ldr	r0, [pc, #144]	; f090 <time_struct_buffer+0xd8>
    effc:	ldr	r1, [sp, #12]
    f000:	cmp	r1, r0
    f004:	bge	f02c <time_struct_buffer+0x74>
    f008:	ldr	r0, [fp, #-4]
    f00c:	bl	ede8 <gen_struct_buffer_benchmark>
    f010:	ldr	r1, [sp, #8]
    f014:	orr	r0, r1, r0
    f018:	str	r0, [sp, #8]
    f01c:	ldr	r0, [sp, #12]
    f020:	add	r0, r0, #1
    f024:	str	r0, [sp, #12]
    f028:	b	eff8 <time_struct_buffer+0x40>
    f02c:	bl	eb20 <elapsed_realtime>
    f030:	vstr	d0, [sp, #24]
    f034:	ldr	r0, [fp, #-4]
    f038:	bl	0 <flatcc_builder_get_buffer_size>
    f03c:	str	r0, [sp, #16]
    f040:	ldr	r0, [sp, #8]
    f044:	cmp	r0, #0
    f048:	beq	f058 <time_struct_buffer+0xa0>
    f04c:	movw	r0, #0
    f050:	movt	r0, #0
    f054:	bl	0 <printf>
    f058:	ldr	r2, [pc, #48]	; f090 <time_struct_buffer+0xd8>
    f05c:	vldr	d0, [fp, #-16]
    f060:	vldr	d1, [sp, #24]
    f064:	ldr	r1, [sp, #16]
    f068:	movw	r0, #0
    f06c:	movt	r0, #0
    f070:	movw	r3, #0
    f074:	movt	r3, #0
    f078:	bl	ebb0 <show_benchmark>
    f07c:	ldr	r1, [sp, #8]
    f080:	str	r0, [sp]
    f084:	mov	r0, r1
    f088:	mov	sp, fp
    f08c:	pop	{fp, pc}
    f090:	.word	0x000f4240

0000f094 <main>:
    f094:	push	{r4, r5, fp, lr}
    f098:	add	fp, sp, #8
    f09c:	sub	sp, sp, #256	; 0x100
    f0a0:	movw	r2, #0
    f0a4:	str	r2, [fp, #-12]
    f0a8:	str	r0, [fp, #-16]
    f0ac:	str	r1, [fp, #-20]	; 0xffffffec
    f0b0:	add	r0, sp, #12
    f0b4:	str	r0, [sp, #8]
    f0b8:	ldr	r0, [sp, #8]
    f0bc:	bl	0 <flatcc_builder_init>
    f0c0:	movw	r1, #0
    f0c4:	movt	r1, #0
    f0c8:	str	r0, [sp, #4]
    f0cc:	mov	r0, r1
    f0d0:	bl	0 <printf>
    f0d4:	ldr	r1, [sp, #8]
    f0d8:	str	r0, [sp]
    f0dc:	mov	r0, r1
    f0e0:	bl	2074 <test_table_with_emptystruct>
    f0e4:	cmp	r0, #0
    f0e8:	beq	f104 <main+0x70>
    f0ec:	movw	r0, #0
    f0f0:	movt	r0, #0
    f0f4:	bl	0 <printf>
    f0f8:	mvn	r1, #0
    f0fc:	str	r1, [fp, #-12]
    f100:	b	f484 <main+0x3f0>
    f104:	ldr	r0, [sp, #8]
    f108:	bl	614 <test_enums>
    f10c:	cmp	r0, #0
    f110:	beq	f12c <main+0x98>
    f114:	movw	r0, #0
    f118:	movt	r0, #0
    f11c:	bl	0 <printf>
    f120:	mvn	r1, #0
    f124:	str	r1, [fp, #-12]
    f128:	b	f484 <main+0x3f0>
    f12c:	ldr	r0, [sp, #8]
    f130:	bl	1658 <test_empty_monster>
    f134:	cmp	r0, #0
    f138:	beq	f154 <main+0xc0>
    f13c:	movw	r0, #0
    f140:	movt	r0, #0
    f144:	bl	0 <printf>
    f148:	mvn	r1, #0
    f14c:	str	r1, [fp, #-12]
    f150:	b	f484 <main+0x3f0>
    f154:	ldr	r0, [sp, #8]
    f158:	bl	63a0 <test_monster>
    f15c:	cmp	r0, #0
    f160:	beq	f17c <main+0xe8>
    f164:	movw	r0, #0
    f168:	movt	r0, #0
    f16c:	bl	0 <printf>
    f170:	mvn	r1, #0
    f174:	str	r1, [fp, #-12]
    f178:	b	f484 <main+0x3f0>
    f17c:	ldr	r0, [sp, #8]
    f180:	bl	6460 <test_monster_with_size>
    f184:	cmp	r0, #0
    f188:	beq	f1a4 <main+0x110>
    f18c:	movw	r0, #0
    f190:	movt	r0, #0
    f194:	bl	0 <printf>
    f198:	mvn	r1, #0
    f19c:	str	r1, [fp, #-12]
    f1a0:	b	f484 <main+0x3f0>
    f1a4:	ldr	r0, [sp, #8]
    f1a8:	bl	65f0 <test_string>
    f1ac:	cmp	r0, #0
    f1b0:	beq	f1cc <main+0x138>
    f1b4:	movw	r0, #0
    f1b8:	movt	r0, #0
    f1bc:	bl	0 <printf>
    f1c0:	mvn	r1, #0
    f1c4:	str	r1, [fp, #-12]
    f1c8:	b	f484 <main+0x3f0>
    f1cc:	ldr	r0, [sp, #8]
    f1d0:	bl	df00 <test_struct_buffer>
    f1d4:	cmp	r0, #0
    f1d8:	beq	f1f4 <main+0x160>
    f1dc:	movw	r0, #0
    f1e0:	movt	r0, #0
    f1e4:	bl	0 <printf>
    f1e8:	mvn	r1, #0
    f1ec:	str	r1, [fp, #-12]
    f1f0:	b	f484 <main+0x3f0>
    f1f4:	ldr	r0, [sp, #8]
    f1f8:	bl	195c <test_typed_empty_monster>
    f1fc:	cmp	r0, #0
    f200:	beq	f21c <main+0x188>
    f204:	movw	r0, #0
    f208:	movt	r0, #0
    f20c:	bl	0 <printf>
    f210:	mvn	r1, #0
    f214:	str	r1, [fp, #-12]
    f218:	b	f484 <main+0x3f0>
    f21c:	ldr	r0, [sp, #8]
    f220:	bl	217c <test_typed_table_with_emptystruct>
    f224:	cmp	r0, #0
    f228:	beq	f244 <main+0x1b0>
    f22c:	movw	r0, #0
    f230:	movt	r0, #0
    f234:	bl	0 <printf>
    f238:	mvn	r1, #0
    f23c:	str	r1, [fp, #-12]
    f240:	b	f484 <main+0x3f0>
    f244:	ldr	r0, [sp, #8]
    f248:	bl	e2f8 <test_typed_struct_buffer>
    f24c:	cmp	r0, #0
    f250:	beq	f26c <main+0x1d8>
    f254:	movw	r0, #0
    f258:	movt	r0, #0
    f25c:	bl	0 <printf>
    f260:	mvn	r1, #0
    f264:	str	r1, [fp, #-12]
    f268:	b	f484 <main+0x3f0>
    f26c:	ldr	r0, [sp, #8]
    f270:	bl	99a4 <test_clone_slice>
    f274:	cmp	r0, #0
    f278:	beq	f294 <main+0x200>
    f27c:	movw	r0, #0
    f280:	movt	r0, #0
    f284:	bl	0 <printf>
    f288:	mvn	r1, #0
    f28c:	str	r1, [fp, #-12]
    f290:	b	f484 <main+0x3f0>
    f294:	ldr	r0, [sp, #8]
    f298:	bl	d1f8 <test_add_set_defaults>
    f29c:	cmp	r0, #0
    f2a0:	beq	f2bc <main+0x228>
    f2a4:	movw	r0, #0
    f2a8:	movt	r0, #0
    f2ac:	bl	0 <printf>
    f2b0:	mvn	r1, #0
    f2b4:	str	r1, [fp, #-12]
    f2b8:	b	f484 <main+0x3f0>
    f2bc:	ldr	r0, [sp, #8]
    f2c0:	bl	a4f4 <test_create_add_field>
    f2c4:	cmp	r0, #0
    f2c8:	beq	f2e4 <main+0x250>
    f2cc:	movw	r0, #0
    f2d0:	movt	r0, #0
    f2d4:	bl	0 <printf>
    f2d8:	mvn	r1, #0
    f2dc:	str	r1, [fp, #-12]
    f2e0:	b	f484 <main+0x3f0>
    f2e4:	ldr	r0, [sp, #8]
    f2e8:	bl	a8ec <test_union_vector>
    f2ec:	cmp	r0, #0
    f2f0:	beq	f30c <main+0x278>
    f2f4:	movw	r0, #0
    f2f8:	movt	r0, #0
    f2fc:	bl	0 <printf>
    f300:	mvn	r1, #0
    f304:	str	r1, [fp, #-12]
    f308:	b	f484 <main+0x3f0>
    f30c:	ldr	r0, [sp, #8]
    f310:	bl	95b8 <test_basic_sort>
    f314:	cmp	r0, #0
    f318:	beq	f334 <main+0x2a0>
    f31c:	movw	r0, #0
    f320:	movt	r0, #0
    f324:	bl	0 <printf>
    f328:	mvn	r1, #0
    f32c:	str	r1, [fp, #-12]
    f330:	b	f484 <main+0x3f0>
    f334:	ldr	r0, [sp, #8]
    f338:	bl	69e0 <test_sort_find>
    f33c:	cmp	r0, #0
    f340:	beq	f35c <main+0x2c8>
    f344:	movw	r0, #0
    f348:	movt	r0, #0
    f34c:	bl	0 <printf>
    f350:	mvn	r1, #0
    f354:	str	r1, [fp, #-12]
    f358:	b	f484 <main+0x3f0>
    f35c:	ldr	r0, [sp, #8]
    f360:	bl	7238 <test_scan>
    f364:	cmp	r0, #0
    f368:	beq	f384 <main+0x2f0>
    f36c:	movw	r0, #0
    f370:	movt	r0, #0
    f374:	bl	0 <printf>
    f378:	mvn	r1, #0
    f37c:	str	r1, [fp, #-12]
    f380:	b	f484 <main+0x3f0>
    f384:	ldr	r0, [sp, #8]
    f388:	bl	d6e0 <test_nested_buffer>
    f38c:	cmp	r0, #0
    f390:	beq	f3ac <main+0x318>
    f394:	movw	r0, #0
    f398:	movt	r0, #0
    f39c:	bl	0 <printf>
    f3a0:	mvn	r1, #0
    f3a4:	str	r1, [fp, #-12]
    f3a8:	b	f484 <main+0x3f0>
    f3ac:	ldr	r0, [sp, #8]
    f3b0:	bl	d9dc <test_nested_buffer_first>
    f3b4:	cmp	r0, #0
    f3b8:	beq	f3d4 <main+0x340>
    f3bc:	movw	r0, #0
    f3c0:	movt	r0, #0
    f3c4:	bl	0 <printf>
    f3c8:	mvn	r1, #0
    f3cc:	str	r1, [fp, #-12]
    f3d0:	b	f484 <main+0x3f0>
    f3d4:	ldr	r0, [sp, #8]
    f3d8:	bl	dbac <test_nested_buffer_using_nest>
    f3dc:	cmp	r0, #0
    f3e0:	beq	f3fc <main+0x368>
    f3e4:	movw	r0, #0
    f3e8:	movt	r0, #0
    f3ec:	bl	0 <printf>
    f3f0:	mvn	r1, #0
    f3f4:	str	r1, [fp, #-12]
    f3f8:	b	f484 <main+0x3f0>
    f3fc:	ldr	r0, [sp, #8]
    f400:	bl	dee8 <verify_include>
    f404:	cmp	r0, #0
    f408:	beq	f424 <main+0x390>
    f40c:	movw	r0, #0
    f410:	movt	r0, #0
    f414:	bl	0 <printf>
    f418:	mvn	r1, #0
    f41c:	str	r1, [fp, #-12]
    f420:	b	f484 <main+0x3f0>
    f424:	ldr	r0, [sp, #8]
    f428:	bl	628 <test_type_aliases>
    f42c:	cmp	r0, #0
    f430:	beq	f44c <main+0x3b8>
    f434:	movw	r0, #0
    f438:	movt	r0, #0
    f43c:	bl	0 <printf>
    f440:	mvn	r1, #0
    f444:	str	r1, [fp, #-12]
    f448:	b	f484 <main+0x3f0>
    f44c:	ldr	r0, [sp, #8]
    f450:	bl	b504 <test_mixed_type_union>
    f454:	cmp	r0, #0
    f458:	beq	f474 <main+0x3e0>
    f45c:	movw	r0, #0
    f460:	movt	r0, #0
    f464:	bl	0 <printf>
    f468:	mvn	r1, #0
    f46c:	str	r1, [fp, #-12]
    f470:	b	f484 <main+0x3f0>
    f474:	ldr	r0, [sp, #8]
    f478:	bl	0 <flatcc_builder_clear>
    f47c:	movw	r0, #0
    f480:	str	r0, [fp, #-12]
    f484:	ldr	r0, [fp, #-12]
    f488:	sub	sp, fp, #8
    f48c:	pop	{r4, r5, fp, pc}

0000f490 <__flatbuffers_uoffset_read_from_pe>:
    f490:	push	{fp, lr}
    f494:	mov	fp, sp
    f498:	sub	sp, sp, #8
    f49c:	str	r0, [sp, #4]
    f4a0:	ldr	r0, [sp, #4]
    f4a4:	ldr	r0, [r0]
    f4a8:	bl	f4b4 <__flatbuffers_uoffset_cast_from_pe>
    f4ac:	mov	sp, fp
    f4b0:	pop	{fp, pc}

0000f4b4 <__flatbuffers_uoffset_cast_from_pe>:
    f4b4:	sub	sp, sp, #4
    f4b8:	str	r0, [sp]
    f4bc:	ldr	r0, [sp]
    f4c0:	add	sp, sp, #4
    f4c4:	bx	lr

0000f4c8 <__flatbuffers_soffset_read_from_pe>:
    f4c8:	push	{fp, lr}
    f4cc:	mov	fp, sp
    f4d0:	sub	sp, sp, #8
    f4d4:	str	r0, [sp, #4]
    f4d8:	ldr	r0, [sp, #4]
    f4dc:	ldr	r0, [r0]
    f4e0:	bl	f53c <__flatbuffers_soffset_cast_from_pe>
    f4e4:	mov	sp, fp
    f4e8:	pop	{fp, pc}

0000f4ec <__flatbuffers_voffset_read_from_pe>:
    f4ec:	push	{fp, lr}
    f4f0:	mov	fp, sp
    f4f4:	sub	sp, sp, #8
    f4f8:	str	r0, [sp, #4]
    f4fc:	ldr	r0, [sp, #4]
    f500:	ldrh	r0, [r0]
    f504:	bl	f550 <__flatbuffers_voffset_cast_from_pe>
    f508:	uxth	r0, r0
    f50c:	mov	sp, fp
    f510:	pop	{fp, pc}

0000f514 <flatbuffers_int16_read_from_pe>:
    f514:	push	{fp, lr}
    f518:	mov	fp, sp
    f51c:	sub	sp, sp, #8
    f520:	str	r0, [sp, #4]
    f524:	ldr	r0, [sp, #4]
    f528:	ldrsh	r0, [r0]
    f52c:	bl	f564 <flatbuffers_int16_cast_from_pe>
    f530:	sxth	r0, r0
    f534:	mov	sp, fp
    f538:	pop	{fp, pc}

0000f53c <__flatbuffers_soffset_cast_from_pe>:
    f53c:	sub	sp, sp, #4
    f540:	str	r0, [sp]
    f544:	ldr	r0, [sp]
    f548:	add	sp, sp, #4
    f54c:	bx	lr

0000f550 <__flatbuffers_voffset_cast_from_pe>:
    f550:	sub	sp, sp, #4
    f554:	strh	r0, [sp, #2]
    f558:	ldrh	r0, [sp, #2]
    f55c:	add	sp, sp, #4
    f560:	bx	lr

0000f564 <flatbuffers_int16_cast_from_pe>:
    f564:	sub	sp, sp, #4
    f568:	strh	r0, [sp, #2]
    f56c:	ldrsh	r0, [sp, #2]
    f570:	add	sp, sp, #4
    f574:	bx	lr

0000f578 <MyGame_Example_TypeAliases_create>:
    f578:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f57c:	add	fp, sp, #28
    f580:	sub	sp, sp, #68	; 0x44
    f584:	ldr	ip, [fp, #36]	; 0x24
    f588:	ldr	lr, [fp, #32]
    f58c:	ldr	r4, [fp, #28]
    f590:	ldr	r5, [fp, #24]
    f594:	ldr	r6, [fp, #44]	; 0x2c
    f598:	ldr	r7, [fp, #40]	; 0x28
    f59c:	ldr	r8, [fp, #16]
    f5a0:	ldr	r9, [fp, #12]
    f5a4:	ldr	sl, [fp, #8]
    f5a8:	str	r0, [fp, #-36]	; 0xffffffdc
    f5ac:	strb	r1, [fp, #-37]	; 0xffffffdb
    f5b0:	strb	r2, [fp, #-38]	; 0xffffffda
    f5b4:	strh	r3, [fp, #-40]	; 0xffffffd8
    f5b8:	strh	sl, [fp, #-42]	; 0xffffffd6
    f5bc:	str	r4, [sp, #44]	; 0x2c
    f5c0:	str	r5, [sp, #40]	; 0x28
    f5c4:	str	ip, [sp, #36]	; 0x24
    f5c8:	str	lr, [sp, #32]
    f5cc:	vstr	s0, [sp, #28]
    f5d0:	vstr	d1, [sp, #16]
    f5d4:	ldr	r0, [fp, #-36]	; 0xffffffdc
    f5d8:	str	r6, [sp, #12]
    f5dc:	str	r7, [sp, #8]
    f5e0:	str	r8, [sp, #4]
    f5e4:	str	r9, [sp]
    f5e8:	bl	f710 <MyGame_Example_TypeAliases_start>
    f5ec:	cmp	r0, #0
    f5f0:	bne	f6ec <MyGame_Example_TypeAliases_create+0x174>
    f5f4:	ldr	r0, [fp, #-36]	; 0xffffffdc
    f5f8:	ldr	r2, [sp, #40]	; 0x28
    f5fc:	ldr	r3, [sp, #44]	; 0x2c
    f600:	bl	f734 <MyGame_Example_TypeAliases_i64_add>
    f604:	cmp	r0, #0
    f608:	bne	f6ec <MyGame_Example_TypeAliases_create+0x174>
    f60c:	ldr	r0, [fp, #-36]	; 0xffffffdc
    f610:	ldr	r2, [sp, #32]
    f614:	ldr	r3, [sp, #36]	; 0x24
    f618:	bl	f7c8 <MyGame_Example_TypeAliases_u64_add>
    f61c:	cmp	r0, #0
    f620:	bne	f6ec <MyGame_Example_TypeAliases_create+0x174>
    f624:	ldr	r0, [fp, #-36]	; 0xffffffdc
    f628:	vldr	d0, [sp, #16]
    f62c:	bl	f85c <MyGame_Example_TypeAliases_f64_add>
    f630:	cmp	r0, #0
    f634:	bne	f6ec <MyGame_Example_TypeAliases_create+0x174>
    f638:	ldr	r0, [fp, #-36]	; 0xffffffdc
    f63c:	ldr	r1, [fp, #12]
    f640:	bl	f8e0 <MyGame_Example_TypeAliases_i32_add>
    f644:	cmp	r0, #0
    f648:	bne	f6ec <MyGame_Example_TypeAliases_create+0x174>
    f64c:	ldr	r0, [fp, #-36]	; 0xffffffdc
    f650:	ldr	r1, [fp, #16]
    f654:	bl	f964 <MyGame_Example_TypeAliases_u32_add>
    f658:	cmp	r0, #0
    f65c:	bne	f6ec <MyGame_Example_TypeAliases_create+0x174>
    f660:	ldr	r0, [fp, #-36]	; 0xffffffdc
    f664:	vldr	s0, [sp, #28]
    f668:	bl	f9e4 <MyGame_Example_TypeAliases_f32_add>
    f66c:	cmp	r0, #0
    f670:	bne	f6ec <MyGame_Example_TypeAliases_create+0x174>
    f674:	ldr	r0, [fp, #-36]	; 0xffffffdc
    f678:	ldr	r1, [fp, #40]	; 0x28
    f67c:	bl	fa68 <MyGame_Example_TypeAliases_v8_add>
    f680:	cmp	r0, #0
    f684:	bne	f6ec <MyGame_Example_TypeAliases_create+0x174>
    f688:	ldr	r0, [fp, #-36]	; 0xffffffdc
    f68c:	ldr	r1, [fp, #44]	; 0x2c
    f690:	bl	fad4 <MyGame_Example_TypeAliases_vf64_add>
    f694:	cmp	r0, #0
    f698:	bne	f6ec <MyGame_Example_TypeAliases_create+0x174>
    f69c:	ldr	r0, [fp, #-36]	; 0xffffffdc
    f6a0:	ldrsh	r1, [fp, #-40]	; 0xffffffd8
    f6a4:	bl	fb40 <MyGame_Example_TypeAliases_i16_add>
    f6a8:	cmp	r0, #0
    f6ac:	bne	f6ec <MyGame_Example_TypeAliases_create+0x174>
    f6b0:	ldr	r0, [fp, #-36]	; 0xffffffdc
    f6b4:	ldrh	r1, [fp, #-42]	; 0xffffffd6
    f6b8:	bl	fbc4 <MyGame_Example_TypeAliases_u16_add>
    f6bc:	cmp	r0, #0
    f6c0:	bne	f6ec <MyGame_Example_TypeAliases_create+0x174>
    f6c4:	ldr	r0, [fp, #-36]	; 0xffffffdc
    f6c8:	ldrsb	r1, [fp, #-37]	; 0xffffffdb
    f6cc:	bl	fc44 <MyGame_Example_TypeAliases_i8_add>
    f6d0:	cmp	r0, #0
    f6d4:	bne	f6ec <MyGame_Example_TypeAliases_create+0x174>
    f6d8:	ldr	r0, [fp, #-36]	; 0xffffffdc
    f6dc:	ldrb	r1, [fp, #-38]	; 0xffffffda
    f6e0:	bl	fcc4 <MyGame_Example_TypeAliases_u8_add>
    f6e4:	cmp	r0, #0
    f6e8:	beq	f6f8 <MyGame_Example_TypeAliases_create+0x180>
    f6ec:	movw	r0, #0
    f6f0:	str	r0, [fp, #-32]	; 0xffffffe0
    f6f4:	b	f704 <MyGame_Example_TypeAliases_create+0x18c>
    f6f8:	ldr	r0, [fp, #-36]	; 0xffffffdc
    f6fc:	bl	fd48 <MyGame_Example_TypeAliases_end>
    f700:	str	r0, [fp, #-32]	; 0xffffffe0
    f704:	ldr	r0, [fp, #-32]	; 0xffffffe0
    f708:	sub	sp, fp, #28
    f70c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000f710 <MyGame_Example_TypeAliases_start>:
    f710:	push	{fp, lr}
    f714:	mov	fp, sp
    f718:	sub	sp, sp, #8
    f71c:	str	r0, [sp, #4]
    f720:	ldr	r0, [sp, #4]
    f724:	movw	r1, #12
    f728:	bl	0 <flatcc_builder_start_table>
    f72c:	mov	sp, fp
    f730:	pop	{fp, pc}

0000f734 <MyGame_Example_TypeAliases_i64_add>:
    f734:	push	{fp, lr}
    f738:	mov	fp, sp
    f73c:	sub	sp, sp, #24
    f740:	str	r0, [fp, #-8]
    f744:	str	r3, [sp, #12]
    f748:	str	r2, [sp, #8]
    f74c:	ldr	r0, [sp, #8]
    f750:	ldr	r1, [sp, #12]
    f754:	orr	r0, r0, r1
    f758:	cmp	r0, #0
    f75c:	bne	f770 <MyGame_Example_TypeAliases_i64_add+0x3c>
    f760:	b	f764 <MyGame_Example_TypeAliases_i64_add+0x30>
    f764:	movw	r0, #0
    f768:	str	r0, [fp, #-4]
    f76c:	b	f7bc <MyGame_Example_TypeAliases_i64_add+0x88>
    f770:	ldr	r0, [fp, #-8]
    f774:	movw	r1, #6
    f778:	movw	r2, #8
    f77c:	movw	r3, #8
    f780:	uxth	r3, r3
    f784:	bl	0 <flatcc_builder_table_add>
    f788:	str	r0, [sp, #4]
    f78c:	movw	r1, #0
    f790:	cmp	r0, r1
    f794:	bne	f7a4 <MyGame_Example_TypeAliases_i64_add+0x70>
    f798:	mvn	r0, #0
    f79c:	str	r0, [fp, #-4]
    f7a0:	b	f7bc <MyGame_Example_TypeAliases_i64_add+0x88>
    f7a4:	ldr	r0, [sp, #4]
    f7a8:	ldr	r2, [sp, #8]
    f7ac:	ldr	r3, [sp, #12]
    f7b0:	bl	fda8 <flatbuffers_int64_assign_to_pe>
    f7b4:	movw	r1, #0
    f7b8:	str	r1, [fp, #-4]
    f7bc:	ldr	r0, [fp, #-4]
    f7c0:	mov	sp, fp
    f7c4:	pop	{fp, pc}

0000f7c8 <MyGame_Example_TypeAliases_u64_add>:
    f7c8:	push	{fp, lr}
    f7cc:	mov	fp, sp
    f7d0:	sub	sp, sp, #24
    f7d4:	str	r0, [fp, #-8]
    f7d8:	str	r3, [sp, #12]
    f7dc:	str	r2, [sp, #8]
    f7e0:	ldr	r0, [sp, #8]
    f7e4:	ldr	r1, [sp, #12]
    f7e8:	orr	r0, r0, r1
    f7ec:	cmp	r0, #0
    f7f0:	bne	f804 <MyGame_Example_TypeAliases_u64_add+0x3c>
    f7f4:	b	f7f8 <MyGame_Example_TypeAliases_u64_add+0x30>
    f7f8:	movw	r0, #0
    f7fc:	str	r0, [fp, #-4]
    f800:	b	f850 <MyGame_Example_TypeAliases_u64_add+0x88>
    f804:	ldr	r0, [fp, #-8]
    f808:	movw	r1, #7
    f80c:	movw	r2, #8
    f810:	movw	r3, #8
    f814:	uxth	r3, r3
    f818:	bl	0 <flatcc_builder_table_add>
    f81c:	str	r0, [sp, #4]
    f820:	movw	r1, #0
    f824:	cmp	r0, r1
    f828:	bne	f838 <MyGame_Example_TypeAliases_u64_add+0x70>
    f82c:	mvn	r0, #0
    f830:	str	r0, [fp, #-4]
    f834:	b	f850 <MyGame_Example_TypeAliases_u64_add+0x88>
    f838:	ldr	r0, [sp, #4]
    f83c:	ldr	r2, [sp, #8]
    f840:	ldr	r3, [sp, #12]
    f844:	bl	fe00 <flatbuffers_uint64_assign_to_pe>
    f848:	movw	r1, #0
    f84c:	str	r1, [fp, #-4]
    f850:	ldr	r0, [fp, #-4]
    f854:	mov	sp, fp
    f858:	pop	{fp, pc}

0000f85c <MyGame_Example_TypeAliases_f64_add>:
    f85c:	push	{fp, lr}
    f860:	mov	fp, sp
    f864:	sub	sp, sp, #24
    f868:	str	r0, [fp, #-8]
    f86c:	vstr	d0, [sp, #8]
    f870:	vldr	d16, [sp, #8]
    f874:	vcmp.f64	d16, #0.0
    f878:	vmrs	APSR_nzcv, fpscr
    f87c:	bne	f88c <MyGame_Example_TypeAliases_f64_add+0x30>
    f880:	movw	r0, #0
    f884:	str	r0, [fp, #-4]
    f888:	b	f8d4 <MyGame_Example_TypeAliases_f64_add+0x78>
    f88c:	ldr	r0, [fp, #-8]
    f890:	movw	r1, #9
    f894:	movw	r2, #8
    f898:	movw	r3, #8
    f89c:	uxth	r3, r3
    f8a0:	bl	0 <flatcc_builder_table_add>
    f8a4:	str	r0, [sp, #4]
    f8a8:	movw	r1, #0
    f8ac:	cmp	r0, r1
    f8b0:	bne	f8c0 <MyGame_Example_TypeAliases_f64_add+0x64>
    f8b4:	mvn	r0, #0
    f8b8:	str	r0, [fp, #-4]
    f8bc:	b	f8d4 <MyGame_Example_TypeAliases_f64_add+0x78>
    f8c0:	ldr	r0, [sp, #4]
    f8c4:	vldr	d0, [sp, #8]
    f8c8:	bl	fe58 <flatbuffers_double_assign_to_pe>
    f8cc:	movw	r1, #0
    f8d0:	str	r1, [fp, #-4]
    f8d4:	ldr	r0, [fp, #-4]
    f8d8:	mov	sp, fp
    f8dc:	pop	{fp, pc}

0000f8e0 <MyGame_Example_TypeAliases_i32_add>:
    f8e0:	push	{fp, lr}
    f8e4:	mov	fp, sp
    f8e8:	sub	sp, sp, #24
    f8ec:	str	r0, [fp, #-8]
    f8f0:	str	r1, [sp, #12]
    f8f4:	ldr	r0, [sp, #12]
    f8f8:	cmp	r0, #0
    f8fc:	bne	f90c <MyGame_Example_TypeAliases_i32_add+0x2c>
    f900:	movw	r0, #0
    f904:	str	r0, [fp, #-4]
    f908:	b	f958 <MyGame_Example_TypeAliases_i32_add+0x78>
    f90c:	ldr	r0, [fp, #-8]
    f910:	movw	r1, #4
    f914:	str	r1, [sp, #4]
    f918:	ldr	r2, [sp, #4]
    f91c:	movw	r3, #4
    f920:	uxth	r3, r3
    f924:	bl	0 <flatcc_builder_table_add>
    f928:	str	r0, [sp, #8]
    f92c:	movw	r1, #0
    f930:	cmp	r0, r1
    f934:	bne	f944 <MyGame_Example_TypeAliases_i32_add+0x64>
    f938:	mvn	r0, #0
    f93c:	str	r0, [fp, #-4]
    f940:	b	f958 <MyGame_Example_TypeAliases_i32_add+0x78>
    f944:	ldr	r0, [sp, #8]
    f948:	ldr	r1, [sp, #12]
    f94c:	bl	fea4 <flatbuffers_int32_assign_to_pe>
    f950:	movw	r1, #0
    f954:	str	r1, [fp, #-4]
    f958:	ldr	r0, [fp, #-4]
    f95c:	mov	sp, fp
    f960:	pop	{fp, pc}

0000f964 <MyGame_Example_TypeAliases_u32_add>:
    f964:	push	{fp, lr}
    f968:	mov	fp, sp
    f96c:	sub	sp, sp, #16
    f970:	str	r0, [sp, #8]
    f974:	str	r1, [sp, #4]
    f978:	ldr	r0, [sp, #4]
    f97c:	cmp	r0, #0
    f980:	bne	f990 <MyGame_Example_TypeAliases_u32_add+0x2c>
    f984:	movw	r0, #0
    f988:	str	r0, [fp, #-4]
    f98c:	b	f9d8 <MyGame_Example_TypeAliases_u32_add+0x74>
    f990:	ldr	r0, [sp, #8]
    f994:	movw	r1, #5
    f998:	movw	r2, #4
    f99c:	movw	r3, #4
    f9a0:	uxth	r3, r3
    f9a4:	bl	0 <flatcc_builder_table_add>
    f9a8:	str	r0, [sp]
    f9ac:	movw	r1, #0
    f9b0:	cmp	r0, r1
    f9b4:	bne	f9c4 <MyGame_Example_TypeAliases_u32_add+0x60>
    f9b8:	mvn	r0, #0
    f9bc:	str	r0, [fp, #-4]
    f9c0:	b	f9d8 <MyGame_Example_TypeAliases_u32_add+0x74>
    f9c4:	ldr	r0, [sp]
    f9c8:	ldr	r1, [sp, #4]
    f9cc:	bl	fee8 <flatbuffers_uint32_assign_to_pe>
    f9d0:	movw	r1, #0
    f9d4:	str	r1, [fp, #-4]
    f9d8:	ldr	r0, [fp, #-4]
    f9dc:	mov	sp, fp
    f9e0:	pop	{fp, pc}

0000f9e4 <MyGame_Example_TypeAliases_f32_add>:
    f9e4:	push	{fp, lr}
    f9e8:	mov	fp, sp
    f9ec:	sub	sp, sp, #16
    f9f0:	str	r0, [sp, #8]
    f9f4:	vstr	s0, [sp, #4]
    f9f8:	vldr	s0, [sp, #4]
    f9fc:	vcmp.f32	s0, #0.0
    fa00:	vmrs	APSR_nzcv, fpscr
    fa04:	bne	fa14 <MyGame_Example_TypeAliases_f32_add+0x30>
    fa08:	movw	r0, #0
    fa0c:	str	r0, [fp, #-4]
    fa10:	b	fa5c <MyGame_Example_TypeAliases_f32_add+0x78>
    fa14:	ldr	r0, [sp, #8]
    fa18:	movw	r1, #8
    fa1c:	movw	r2, #4
    fa20:	movw	r3, #4
    fa24:	uxth	r3, r3
    fa28:	bl	0 <flatcc_builder_table_add>
    fa2c:	str	r0, [sp]
    fa30:	movw	r1, #0
    fa34:	cmp	r0, r1
    fa38:	bne	fa48 <MyGame_Example_TypeAliases_f32_add+0x64>
    fa3c:	mvn	r0, #0
    fa40:	str	r0, [fp, #-4]
    fa44:	b	fa5c <MyGame_Example_TypeAliases_f32_add+0x78>
    fa48:	ldr	r0, [sp]
    fa4c:	vldr	s0, [sp, #4]
    fa50:	bl	ff2c <flatbuffers_float_assign_to_pe>
    fa54:	movw	r1, #0
    fa58:	str	r1, [fp, #-4]
    fa5c:	ldr	r0, [fp, #-4]
    fa60:	mov	sp, fp
    fa64:	pop	{fp, pc}

0000fa68 <MyGame_Example_TypeAliases_v8_add>:
    fa68:	push	{fp, lr}
    fa6c:	mov	fp, sp
    fa70:	sub	sp, sp, #16
    fa74:	str	r0, [fp, #-4]
    fa78:	str	r1, [sp, #8]
    fa7c:	ldr	r0, [sp, #8]
    fa80:	cmp	r0, #0
    fa84:	beq	fabc <MyGame_Example_TypeAliases_v8_add+0x54>
    fa88:	ldr	r0, [fp, #-4]
    fa8c:	movw	r1, #10
    fa90:	bl	0 <flatcc_builder_table_add_offset>
    fa94:	str	r0, [sp, #4]
    fa98:	movw	r1, #0
    fa9c:	cmp	r0, r1
    faa0:	beq	fabc <MyGame_Example_TypeAliases_v8_add+0x54>
    faa4:	ldr	r0, [sp, #8]
    faa8:	ldr	r1, [sp, #4]
    faac:	str	r0, [r1]
    fab0:	movw	r0, #0
    fab4:	str	r0, [sp]
    fab8:	b	fac8 <MyGame_Example_TypeAliases_v8_add+0x60>
    fabc:	mvn	r0, #0
    fac0:	str	r0, [sp]
    fac4:	b	fac8 <MyGame_Example_TypeAliases_v8_add+0x60>
    fac8:	ldr	r0, [sp]
    facc:	mov	sp, fp
    fad0:	pop	{fp, pc}

0000fad4 <MyGame_Example_TypeAliases_vf64_add>:
    fad4:	push	{fp, lr}
    fad8:	mov	fp, sp
    fadc:	sub	sp, sp, #16
    fae0:	str	r0, [fp, #-4]
    fae4:	str	r1, [sp, #8]
    fae8:	ldr	r0, [sp, #8]
    faec:	cmp	r0, #0
    faf0:	beq	fb28 <MyGame_Example_TypeAliases_vf64_add+0x54>
    faf4:	ldr	r0, [fp, #-4]
    faf8:	movw	r1, #11
    fafc:	bl	0 <flatcc_builder_table_add_offset>
    fb00:	str	r0, [sp, #4]
    fb04:	movw	r1, #0
    fb08:	cmp	r0, r1
    fb0c:	beq	fb28 <MyGame_Example_TypeAliases_vf64_add+0x54>
    fb10:	ldr	r0, [sp, #8]
    fb14:	ldr	r1, [sp, #4]
    fb18:	str	r0, [r1]
    fb1c:	movw	r0, #0
    fb20:	str	r0, [sp]
    fb24:	b	fb34 <MyGame_Example_TypeAliases_vf64_add+0x60>
    fb28:	mvn	r0, #0
    fb2c:	str	r0, [sp]
    fb30:	b	fb34 <MyGame_Example_TypeAliases_vf64_add+0x60>
    fb34:	ldr	r0, [sp]
    fb38:	mov	sp, fp
    fb3c:	pop	{fp, pc}

0000fb40 <MyGame_Example_TypeAliases_i16_add>:
    fb40:	push	{fp, lr}
    fb44:	mov	fp, sp
    fb48:	sub	sp, sp, #24
    fb4c:	str	r0, [fp, #-8]
    fb50:	strh	r1, [fp, #-10]
    fb54:	ldrsh	r0, [fp, #-10]
    fb58:	cmp	r0, #0
    fb5c:	bne	fb6c <MyGame_Example_TypeAliases_i16_add+0x2c>
    fb60:	movw	r0, #0
    fb64:	str	r0, [fp, #-4]
    fb68:	b	fbb8 <MyGame_Example_TypeAliases_i16_add+0x78>
    fb6c:	ldr	r0, [fp, #-8]
    fb70:	movw	r1, #2
    fb74:	str	r1, [sp, #4]
    fb78:	ldr	r2, [sp, #4]
    fb7c:	movw	r3, #2
    fb80:	uxth	r3, r3
    fb84:	bl	0 <flatcc_builder_table_add>
    fb88:	str	r0, [sp, #8]
    fb8c:	movw	r1, #0
    fb90:	cmp	r0, r1
    fb94:	bne	fba4 <MyGame_Example_TypeAliases_i16_add+0x64>
    fb98:	mvn	r0, #0
    fb9c:	str	r0, [fp, #-4]
    fba0:	b	fbb8 <MyGame_Example_TypeAliases_i16_add+0x78>
    fba4:	ldr	r0, [sp, #8]
    fba8:	ldrsh	r1, [fp, #-10]
    fbac:	bl	ff80 <flatbuffers_int16_assign_to_pe>
    fbb0:	movw	r1, #0
    fbb4:	str	r1, [fp, #-4]
    fbb8:	ldr	r0, [fp, #-4]
    fbbc:	mov	sp, fp
    fbc0:	pop	{fp, pc}

0000fbc4 <MyGame_Example_TypeAliases_u16_add>:
    fbc4:	push	{fp, lr}
    fbc8:	mov	fp, sp
    fbcc:	sub	sp, sp, #16
    fbd0:	str	r0, [sp, #8]
    fbd4:	strh	r1, [sp, #6]
    fbd8:	ldrh	r0, [sp, #6]
    fbdc:	cmp	r0, #0
    fbe0:	bne	fbf0 <MyGame_Example_TypeAliases_u16_add+0x2c>
    fbe4:	movw	r0, #0
    fbe8:	str	r0, [fp, #-4]
    fbec:	b	fc38 <MyGame_Example_TypeAliases_u16_add+0x74>
    fbf0:	ldr	r0, [sp, #8]
    fbf4:	movw	r1, #3
    fbf8:	movw	r2, #2
    fbfc:	movw	r3, #2
    fc00:	uxth	r3, r3
    fc04:	bl	0 <flatcc_builder_table_add>
    fc08:	str	r0, [sp]
    fc0c:	movw	r1, #0
    fc10:	cmp	r0, r1
    fc14:	bne	fc24 <MyGame_Example_TypeAliases_u16_add+0x60>
    fc18:	mvn	r0, #0
    fc1c:	str	r0, [fp, #-4]
    fc20:	b	fc38 <MyGame_Example_TypeAliases_u16_add+0x74>
    fc24:	ldr	r0, [sp]
    fc28:	ldrh	r1, [sp, #6]
    fc2c:	bl	ffc4 <flatbuffers_uint16_assign_to_pe>
    fc30:	movw	r1, #0
    fc34:	str	r1, [fp, #-4]
    fc38:	ldr	r0, [fp, #-4]
    fc3c:	mov	sp, fp
    fc40:	pop	{fp, pc}

0000fc44 <MyGame_Example_TypeAliases_i8_add>:
    fc44:	push	{fp, lr}
    fc48:	mov	fp, sp
    fc4c:	sub	sp, sp, #16
    fc50:	str	r0, [sp, #8]
    fc54:	strb	r1, [sp, #7]
    fc58:	ldrsb	r0, [sp, #7]
    fc5c:	cmp	r0, #0
    fc60:	bne	fc70 <MyGame_Example_TypeAliases_i8_add+0x2c>
    fc64:	movw	r0, #0
    fc68:	str	r0, [fp, #-4]
    fc6c:	b	fcb8 <MyGame_Example_TypeAliases_i8_add+0x74>
    fc70:	ldr	r0, [sp, #8]
    fc74:	movw	r1, #0
    fc78:	movw	r2, #1
    fc7c:	movw	r3, #1
    fc80:	uxth	r3, r3
    fc84:	bl	0 <flatcc_builder_table_add>
    fc88:	str	r0, [sp]
    fc8c:	movw	r1, #0
    fc90:	cmp	r0, r1
    fc94:	bne	fca4 <MyGame_Example_TypeAliases_i8_add+0x60>
    fc98:	mvn	r0, #0
    fc9c:	str	r0, [fp, #-4]
    fca0:	b	fcb8 <MyGame_Example_TypeAliases_i8_add+0x74>
    fca4:	ldr	r0, [sp]
    fca8:	ldrsb	r1, [sp, #7]
    fcac:	bl	10008 <flatbuffers_int8_assign_to_pe>
    fcb0:	movw	r1, #0
    fcb4:	str	r1, [fp, #-4]
    fcb8:	ldr	r0, [fp, #-4]
    fcbc:	mov	sp, fp
    fcc0:	pop	{fp, pc}

0000fcc4 <MyGame_Example_TypeAliases_u8_add>:
    fcc4:	push	{fp, lr}
    fcc8:	mov	fp, sp
    fccc:	sub	sp, sp, #24
    fcd0:	str	r0, [fp, #-8]
    fcd4:	strb	r1, [fp, #-9]
    fcd8:	ldrb	r0, [fp, #-9]
    fcdc:	cmp	r0, #0
    fce0:	bne	fcf0 <MyGame_Example_TypeAliases_u8_add+0x2c>
    fce4:	movw	r0, #0
    fce8:	str	r0, [fp, #-4]
    fcec:	b	fd3c <MyGame_Example_TypeAliases_u8_add+0x78>
    fcf0:	ldr	r0, [fp, #-8]
    fcf4:	movw	r1, #1
    fcf8:	str	r1, [sp, #4]
    fcfc:	ldr	r2, [sp, #4]
    fd00:	movw	r3, #1
    fd04:	uxth	r3, r3
    fd08:	bl	0 <flatcc_builder_table_add>
    fd0c:	str	r0, [sp, #8]
    fd10:	movw	r1, #0
    fd14:	cmp	r0, r1
    fd18:	bne	fd28 <MyGame_Example_TypeAliases_u8_add+0x64>
    fd1c:	mvn	r0, #0
    fd20:	str	r0, [fp, #-4]
    fd24:	b	fd3c <MyGame_Example_TypeAliases_u8_add+0x78>
    fd28:	ldr	r0, [sp, #8]
    fd2c:	ldrb	r1, [fp, #-9]
    fd30:	bl	1004c <flatbuffers_uint8_assign_to_pe>
    fd34:	movw	r1, #0
    fd38:	str	r1, [fp, #-4]
    fd3c:	ldr	r0, [fp, #-4]
    fd40:	mov	sp, fp
    fd44:	pop	{fp, pc}

0000fd48 <MyGame_Example_TypeAliases_end>:
    fd48:	push	{fp, lr}
    fd4c:	mov	fp, sp
    fd50:	sub	sp, sp, #8
    fd54:	str	r0, [sp, #4]
    fd58:	ldr	r0, [sp, #4]
    fd5c:	movw	r1, #0
    fd60:	movt	r1, #0
    fd64:	movw	r2, #0
    fd68:	bl	0 <flatcc_builder_check_required>
    fd6c:	cmp	r0, #0
    fd70:	beq	fd78 <MyGame_Example_TypeAliases_end+0x30>
    fd74:	b	fd98 <MyGame_Example_TypeAliases_end+0x50>
    fd78:	movw	r0, #0
    fd7c:	movt	r0, #0
    fd80:	movw	r1, #0
    fd84:	movt	r1, #0
    fd88:	movw	r2, #237	; 0xed
    fd8c:	movw	r3, #0
    fd90:	movt	r3, #0
    fd94:	bl	0 <__assert_fail>
    fd98:	ldr	r0, [sp, #4]
    fd9c:	bl	0 <flatcc_builder_end_table>
    fda0:	mov	sp, fp
    fda4:	pop	{fp, pc}

0000fda8 <flatbuffers_int64_assign_to_pe>:
    fda8:	push	{fp, lr}
    fdac:	mov	fp, sp
    fdb0:	sub	sp, sp, #16
    fdb4:	str	r0, [fp, #-4]
    fdb8:	str	r3, [sp, #4]
    fdbc:	str	r2, [sp]
    fdc0:	ldr	r0, [sp]
    fdc4:	ldr	r1, [sp, #4]
    fdc8:	bl	fde4 <flatbuffers_int64_cast_to_pe>
    fdcc:	ldr	r2, [fp, #-4]
    fdd0:	str	r1, [r2, #4]
    fdd4:	str	r0, [r2]
    fdd8:	ldr	r0, [fp, #-4]
    fddc:	mov	sp, fp
    fde0:	pop	{fp, pc}

0000fde4 <flatbuffers_int64_cast_to_pe>:
    fde4:	sub	sp, sp, #8
    fde8:	str	r0, [sp]
    fdec:	str	r1, [sp, #4]
    fdf0:	ldr	r0, [sp]
    fdf4:	ldr	r1, [sp, #4]
    fdf8:	add	sp, sp, #8
    fdfc:	bx	lr

0000fe00 <flatbuffers_uint64_assign_to_pe>:
    fe00:	push	{fp, lr}
    fe04:	mov	fp, sp
    fe08:	sub	sp, sp, #16
    fe0c:	str	r0, [fp, #-4]
    fe10:	str	r3, [sp, #4]
    fe14:	str	r2, [sp]
    fe18:	ldr	r0, [sp]
    fe1c:	ldr	r1, [sp, #4]
    fe20:	bl	fe3c <flatbuffers_uint64_cast_to_pe>
    fe24:	ldr	r2, [fp, #-4]
    fe28:	str	r1, [r2, #4]
    fe2c:	str	r0, [r2]
    fe30:	ldr	r0, [fp, #-4]
    fe34:	mov	sp, fp
    fe38:	pop	{fp, pc}

0000fe3c <flatbuffers_uint64_cast_to_pe>:
    fe3c:	sub	sp, sp, #8
    fe40:	str	r0, [sp]
    fe44:	str	r1, [sp, #4]
    fe48:	ldr	r0, [sp]
    fe4c:	ldr	r1, [sp, #4]
    fe50:	add	sp, sp, #8
    fe54:	bx	lr

0000fe58 <flatbuffers_double_assign_to_pe>:
    fe58:	push	{fp, lr}
    fe5c:	mov	fp, sp
    fe60:	sub	sp, sp, #16
    fe64:	str	r0, [fp, #-4]
    fe68:	vstr	d0, [sp]
    fe6c:	vldr	d0, [sp]
    fe70:	bl	fe88 <flatbuffers_double_cast_to_pe>
    fe74:	ldr	r0, [fp, #-4]
    fe78:	vstr	d0, [r0]
    fe7c:	ldr	r0, [fp, #-4]
    fe80:	mov	sp, fp
    fe84:	pop	{fp, pc}

0000fe88 <flatbuffers_double_cast_to_pe>:
    fe88:	sub	sp, sp, #16
    fe8c:	vstr	d0, [sp, #8]
    fe90:	vldr	d16, [sp, #8]
    fe94:	vstr	d16, [sp]
    fe98:	vldr	d0, [sp]
    fe9c:	add	sp, sp, #16
    fea0:	bx	lr

0000fea4 <flatbuffers_int32_assign_to_pe>:
    fea4:	push	{fp, lr}
    fea8:	mov	fp, sp
    feac:	sub	sp, sp, #8
    feb0:	str	r0, [sp, #4]
    feb4:	str	r1, [sp]
    feb8:	ldr	r0, [sp]
    febc:	bl	fed4 <flatbuffers_int32_cast_to_pe>
    fec0:	ldr	r1, [sp, #4]
    fec4:	str	r0, [r1]
    fec8:	ldr	r0, [sp, #4]
    fecc:	mov	sp, fp
    fed0:	pop	{fp, pc}

0000fed4 <flatbuffers_int32_cast_to_pe>:
    fed4:	sub	sp, sp, #4
    fed8:	str	r0, [sp]
    fedc:	ldr	r0, [sp]
    fee0:	add	sp, sp, #4
    fee4:	bx	lr

0000fee8 <flatbuffers_uint32_assign_to_pe>:
    fee8:	push	{fp, lr}
    feec:	mov	fp, sp
    fef0:	sub	sp, sp, #8
    fef4:	str	r0, [sp, #4]
    fef8:	str	r1, [sp]
    fefc:	ldr	r0, [sp]
    ff00:	bl	ff18 <flatbuffers_uint32_cast_to_pe>
    ff04:	ldr	r1, [sp, #4]
    ff08:	str	r0, [r1]
    ff0c:	ldr	r0, [sp, #4]
    ff10:	mov	sp, fp
    ff14:	pop	{fp, pc}

0000ff18 <flatbuffers_uint32_cast_to_pe>:
    ff18:	sub	sp, sp, #4
    ff1c:	str	r0, [sp]
    ff20:	ldr	r0, [sp]
    ff24:	add	sp, sp, #4
    ff28:	bx	lr

0000ff2c <flatbuffers_float_assign_to_pe>:
    ff2c:	push	{fp, lr}
    ff30:	mov	fp, sp
    ff34:	sub	sp, sp, #8
    ff38:	str	r0, [sp, #4]
    ff3c:	vstr	s0, [sp]
    ff40:	vldr	s0, [sp]
    ff44:	bl	ff5c <flatbuffers_float_cast_to_pe>
    ff48:	ldr	r0, [sp, #4]
    ff4c:	vstr	s0, [r0]
    ff50:	ldr	r0, [sp, #4]
    ff54:	mov	sp, fp
    ff58:	pop	{fp, pc}

0000ff5c <flatbuffers_float_cast_to_pe>:
    ff5c:	sub	sp, sp, #8
    ff60:	vstr	s0, [sp, #4]
    ff64:	vldr	s0, [sp, #4]
    ff68:	vstr	s0, [sp]
    ff6c:	ldr	r0, [sp]
    ff70:	str	r0, [sp]
    ff74:	vldr	s0, [sp]
    ff78:	add	sp, sp, #8
    ff7c:	bx	lr

0000ff80 <flatbuffers_int16_assign_to_pe>:
    ff80:	push	{fp, lr}
    ff84:	mov	fp, sp
    ff88:	sub	sp, sp, #8
    ff8c:	str	r0, [sp, #4]
    ff90:	strh	r1, [sp, #2]
    ff94:	ldrsh	r0, [sp, #2]
    ff98:	bl	ffb0 <flatbuffers_int16_cast_to_pe>
    ff9c:	ldr	r1, [sp, #4]
    ffa0:	strh	r0, [r1]
    ffa4:	ldr	r0, [sp, #4]
    ffa8:	mov	sp, fp
    ffac:	pop	{fp, pc}

0000ffb0 <flatbuffers_int16_cast_to_pe>:
    ffb0:	sub	sp, sp, #4
    ffb4:	strh	r0, [sp, #2]
    ffb8:	ldrsh	r0, [sp, #2]
    ffbc:	add	sp, sp, #4
    ffc0:	bx	lr

0000ffc4 <flatbuffers_uint16_assign_to_pe>:
    ffc4:	push	{fp, lr}
    ffc8:	mov	fp, sp
    ffcc:	sub	sp, sp, #8
    ffd0:	str	r0, [sp, #4]
    ffd4:	strh	r1, [sp, #2]
    ffd8:	ldrh	r0, [sp, #2]
    ffdc:	bl	fff4 <flatbuffers_uint16_cast_to_pe>
    ffe0:	ldr	r1, [sp, #4]
    ffe4:	strh	r0, [r1]
    ffe8:	ldr	r0, [sp, #4]
    ffec:	mov	sp, fp
    fff0:	pop	{fp, pc}

0000fff4 <flatbuffers_uint16_cast_to_pe>:
    fff4:	sub	sp, sp, #4
    fff8:	strh	r0, [sp, #2]
    fffc:	ldrh	r0, [sp, #2]
   10000:	add	sp, sp, #4
   10004:	bx	lr

00010008 <flatbuffers_int8_assign_to_pe>:
   10008:	push	{fp, lr}
   1000c:	mov	fp, sp
   10010:	sub	sp, sp, #8
   10014:	str	r0, [sp, #4]
   10018:	strb	r1, [sp, #3]
   1001c:	ldrsb	r0, [sp, #3]
   10020:	bl	10038 <flatbuffers_int8_cast_to_pe>
   10024:	ldr	r1, [sp, #4]
   10028:	strb	r0, [r1]
   1002c:	ldr	r0, [sp, #4]
   10030:	mov	sp, fp
   10034:	pop	{fp, pc}

00010038 <flatbuffers_int8_cast_to_pe>:
   10038:	sub	sp, sp, #4
   1003c:	strb	r0, [sp, #3]
   10040:	ldrsb	r0, [sp, #3]
   10044:	add	sp, sp, #4
   10048:	bx	lr

0001004c <flatbuffers_uint8_assign_to_pe>:
   1004c:	push	{fp, lr}
   10050:	mov	fp, sp
   10054:	sub	sp, sp, #8
   10058:	str	r0, [sp, #4]
   1005c:	strb	r1, [sp, #3]
   10060:	ldrb	r0, [sp, #3]
   10064:	bl	1007c <flatbuffers_uint8_cast_to_pe>
   10068:	ldr	r1, [sp, #4]
   1006c:	strb	r0, [r1]
   10070:	ldr	r0, [sp, #4]
   10074:	mov	sp, fp
   10078:	pop	{fp, pc}

0001007c <flatbuffers_uint8_cast_to_pe>:
   1007c:	sub	sp, sp, #4
   10080:	strb	r0, [sp, #3]
   10084:	ldrb	r0, [sp, #3]
   10088:	add	sp, sp, #4
   1008c:	bx	lr

00010090 <MyGame_Example_TypeAliases_verify_table>:
   10090:	push	{fp, lr}
   10094:	mov	fp, sp
   10098:	sub	sp, sp, #40	; 0x28
   1009c:	str	r0, [fp, #-8]
   100a0:	ldr	r0, [fp, #-8]
   100a4:	movw	r1, #0
   100a8:	uxth	r1, r1
   100ac:	movw	r2, #1
   100b0:	movw	r3, #1
   100b4:	uxth	r3, r3
   100b8:	bl	0 <flatcc_verify_field>
   100bc:	str	r0, [fp, #-12]
   100c0:	cmp	r0, #0
   100c4:	beq	100d4 <MyGame_Example_TypeAliases_verify_table+0x44>
   100c8:	ldr	r0, [fp, #-12]
   100cc:	str	r0, [fp, #-4]
   100d0:	b	1035c <MyGame_Example_TypeAliases_verify_table+0x2cc>
   100d4:	ldr	r0, [fp, #-8]
   100d8:	movw	r1, #1
   100dc:	uxth	r2, r1
   100e0:	str	r1, [fp, #-16]
   100e4:	mov	r1, r2
   100e8:	movw	r2, #1
   100ec:	ldr	r3, [fp, #-16]
   100f0:	uxth	r3, r3
   100f4:	bl	0 <flatcc_verify_field>
   100f8:	str	r0, [fp, #-12]
   100fc:	cmp	r0, #0
   10100:	beq	10110 <MyGame_Example_TypeAliases_verify_table+0x80>
   10104:	ldr	r0, [fp, #-12]
   10108:	str	r0, [fp, #-4]
   1010c:	b	1035c <MyGame_Example_TypeAliases_verify_table+0x2cc>
   10110:	ldr	r0, [fp, #-8]
   10114:	movw	r1, #2
   10118:	uxth	r2, r1
   1011c:	str	r1, [sp, #20]
   10120:	mov	r1, r2
   10124:	movw	r2, #2
   10128:	ldr	r3, [sp, #20]
   1012c:	uxth	r3, r3
   10130:	bl	0 <flatcc_verify_field>
   10134:	str	r0, [fp, #-12]
   10138:	cmp	r0, #0
   1013c:	beq	1014c <MyGame_Example_TypeAliases_verify_table+0xbc>
   10140:	ldr	r0, [fp, #-12]
   10144:	str	r0, [fp, #-4]
   10148:	b	1035c <MyGame_Example_TypeAliases_verify_table+0x2cc>
   1014c:	ldr	r0, [fp, #-8]
   10150:	movw	r1, #3
   10154:	uxth	r1, r1
   10158:	movw	r2, #2
   1015c:	movw	r3, #2
   10160:	uxth	r3, r3
   10164:	bl	0 <flatcc_verify_field>
   10168:	str	r0, [fp, #-12]
   1016c:	cmp	r0, #0
   10170:	beq	10180 <MyGame_Example_TypeAliases_verify_table+0xf0>
   10174:	ldr	r0, [fp, #-12]
   10178:	str	r0, [fp, #-4]
   1017c:	b	1035c <MyGame_Example_TypeAliases_verify_table+0x2cc>
   10180:	ldr	r0, [fp, #-8]
   10184:	movw	r1, #4
   10188:	uxth	r2, r1
   1018c:	str	r1, [sp, #16]
   10190:	mov	r1, r2
   10194:	movw	r2, #4
   10198:	ldr	r3, [sp, #16]
   1019c:	uxth	r3, r3
   101a0:	bl	0 <flatcc_verify_field>
   101a4:	str	r0, [fp, #-12]
   101a8:	cmp	r0, #0
   101ac:	beq	101bc <MyGame_Example_TypeAliases_verify_table+0x12c>
   101b0:	ldr	r0, [fp, #-12]
   101b4:	str	r0, [fp, #-4]
   101b8:	b	1035c <MyGame_Example_TypeAliases_verify_table+0x2cc>
   101bc:	ldr	r0, [fp, #-8]
   101c0:	movw	r1, #5
   101c4:	uxth	r1, r1
   101c8:	movw	r2, #4
   101cc:	movw	r3, #4
   101d0:	uxth	r3, r3
   101d4:	bl	0 <flatcc_verify_field>
   101d8:	str	r0, [fp, #-12]
   101dc:	cmp	r0, #0
   101e0:	beq	101f0 <MyGame_Example_TypeAliases_verify_table+0x160>
   101e4:	ldr	r0, [fp, #-12]
   101e8:	str	r0, [fp, #-4]
   101ec:	b	1035c <MyGame_Example_TypeAliases_verify_table+0x2cc>
   101f0:	ldr	r0, [fp, #-8]
   101f4:	movw	r1, #6
   101f8:	uxth	r1, r1
   101fc:	movw	r2, #8
   10200:	movw	r3, #8
   10204:	uxth	r3, r3
   10208:	bl	0 <flatcc_verify_field>
   1020c:	str	r0, [fp, #-12]
   10210:	cmp	r0, #0
   10214:	beq	10224 <MyGame_Example_TypeAliases_verify_table+0x194>
   10218:	ldr	r0, [fp, #-12]
   1021c:	str	r0, [fp, #-4]
   10220:	b	1035c <MyGame_Example_TypeAliases_verify_table+0x2cc>
   10224:	ldr	r0, [fp, #-8]
   10228:	movw	r1, #7
   1022c:	uxth	r1, r1
   10230:	movw	r2, #8
   10234:	movw	r3, #8
   10238:	uxth	r3, r3
   1023c:	bl	0 <flatcc_verify_field>
   10240:	str	r0, [fp, #-12]
   10244:	cmp	r0, #0
   10248:	beq	10258 <MyGame_Example_TypeAliases_verify_table+0x1c8>
   1024c:	ldr	r0, [fp, #-12]
   10250:	str	r0, [fp, #-4]
   10254:	b	1035c <MyGame_Example_TypeAliases_verify_table+0x2cc>
   10258:	ldr	r0, [fp, #-8]
   1025c:	movw	r1, #8
   10260:	uxth	r1, r1
   10264:	movw	r2, #4
   10268:	movw	r3, #4
   1026c:	uxth	r3, r3
   10270:	bl	0 <flatcc_verify_field>
   10274:	str	r0, [fp, #-12]
   10278:	cmp	r0, #0
   1027c:	beq	1028c <MyGame_Example_TypeAliases_verify_table+0x1fc>
   10280:	ldr	r0, [fp, #-12]
   10284:	str	r0, [fp, #-4]
   10288:	b	1035c <MyGame_Example_TypeAliases_verify_table+0x2cc>
   1028c:	ldr	r0, [fp, #-8]
   10290:	movw	r1, #9
   10294:	uxth	r1, r1
   10298:	movw	r2, #8
   1029c:	movw	r3, #8
   102a0:	uxth	r3, r3
   102a4:	bl	0 <flatcc_verify_field>
   102a8:	str	r0, [fp, #-12]
   102ac:	cmp	r0, #0
   102b0:	beq	102c0 <MyGame_Example_TypeAliases_verify_table+0x230>
   102b4:	ldr	r0, [fp, #-12]
   102b8:	str	r0, [fp, #-4]
   102bc:	b	1035c <MyGame_Example_TypeAliases_verify_table+0x2cc>
   102c0:	ldr	r0, [fp, #-8]
   102c4:	movw	r1, #10
   102c8:	uxth	r1, r1
   102cc:	movw	r2, #0
   102d0:	movw	r3, #1
   102d4:	movw	ip, #1
   102d8:	uxth	ip, ip
   102dc:	str	ip, [sp]
   102e0:	mvn	ip, #0
   102e4:	str	ip, [sp, #4]
   102e8:	bl	0 <flatcc_verify_vector_field>
   102ec:	str	r0, [fp, #-12]
   102f0:	cmp	r0, #0
   102f4:	beq	10304 <MyGame_Example_TypeAliases_verify_table+0x274>
   102f8:	ldr	r0, [fp, #-12]
   102fc:	str	r0, [fp, #-4]
   10300:	b	1035c <MyGame_Example_TypeAliases_verify_table+0x2cc>
   10304:	ldr	r0, [pc, #92]	; 10368 <MyGame_Example_TypeAliases_verify_table+0x2d8>
   10308:	ldr	r1, [fp, #-8]
   1030c:	str	r0, [sp, #12]
   10310:	mov	r0, r1
   10314:	movw	r1, #11
   10318:	uxth	r1, r1
   1031c:	movw	r2, #0
   10320:	movw	r3, #8
   10324:	movw	ip, #8
   10328:	uxth	ip, ip
   1032c:	str	ip, [sp]
   10330:	ldr	ip, [sp, #12]
   10334:	str	ip, [sp, #4]
   10338:	bl	0 <flatcc_verify_vector_field>
   1033c:	str	r0, [fp, #-12]
   10340:	cmp	r0, #0
   10344:	beq	10354 <MyGame_Example_TypeAliases_verify_table+0x2c4>
   10348:	ldr	r0, [fp, #-12]
   1034c:	str	r0, [fp, #-4]
   10350:	b	1035c <MyGame_Example_TypeAliases_verify_table+0x2cc>
   10354:	movw	r0, #0
   10358:	str	r0, [fp, #-4]
   1035c:	ldr	r0, [fp, #-4]
   10360:	mov	sp, fp
   10364:	pop	{fp, pc}
   10368:	.word	0x1fffffff

0001036c <flatbuffers_int8_read_from_pe>:
   1036c:	push	{fp, lr}
   10370:	mov	fp, sp
   10374:	sub	sp, sp, #8
   10378:	str	r0, [sp, #4]
   1037c:	ldr	r0, [sp, #4]
   10380:	ldrsb	r0, [r0]
   10384:	bl	10394 <flatbuffers_int8_cast_from_pe>
   10388:	sxtb	r0, r0
   1038c:	mov	sp, fp
   10390:	pop	{fp, pc}

00010394 <flatbuffers_int8_cast_from_pe>:
   10394:	sub	sp, sp, #4
   10398:	strb	r0, [sp, #3]
   1039c:	ldrsb	r0, [sp, #3]
   103a0:	add	sp, sp, #4
   103a4:	bx	lr

000103a8 <flatbuffers_int32_read_from_pe>:
   103a8:	push	{fp, lr}
   103ac:	mov	fp, sp
   103b0:	sub	sp, sp, #8
   103b4:	str	r0, [sp, #4]
   103b8:	ldr	r0, [sp, #4]
   103bc:	ldr	r0, [r0]
   103c0:	bl	103cc <flatbuffers_int32_cast_from_pe>
   103c4:	mov	sp, fp
   103c8:	pop	{fp, pc}

000103cc <flatbuffers_int32_cast_from_pe>:
   103cc:	sub	sp, sp, #4
   103d0:	str	r0, [sp]
   103d4:	ldr	r0, [sp]
   103d8:	add	sp, sp, #4
   103dc:	bx	lr

000103e0 <flatbuffers_int64_read_from_pe>:
   103e0:	push	{fp, lr}
   103e4:	mov	fp, sp
   103e8:	sub	sp, sp, #8
   103ec:	str	r0, [sp, #4]
   103f0:	ldr	r0, [sp, #4]
   103f4:	ldr	r1, [r0]
   103f8:	ldr	r0, [r0, #4]
   103fc:	str	r0, [sp]
   10400:	mov	r0, r1
   10404:	ldr	r1, [sp]
   10408:	bl	10414 <flatbuffers_int64_cast_from_pe>
   1040c:	mov	sp, fp
   10410:	pop	{fp, pc}

00010414 <flatbuffers_int64_cast_from_pe>:
   10414:	sub	sp, sp, #8
   10418:	str	r0, [sp]
   1041c:	str	r1, [sp, #4]
   10420:	ldr	r0, [sp]
   10424:	ldr	r1, [sp, #4]
   10428:	add	sp, sp, #8
   1042c:	bx	lr

00010430 <flatbuffers_uint8_read_from_pe>:
   10430:	push	{fp, lr}
   10434:	mov	fp, sp
   10438:	sub	sp, sp, #8
   1043c:	str	r0, [sp, #4]
   10440:	ldr	r0, [sp, #4]
   10444:	ldrb	r0, [r0]
   10448:	bl	10458 <flatbuffers_uint8_cast_from_pe>
   1044c:	and	r0, r0, #255	; 0xff
   10450:	mov	sp, fp
   10454:	pop	{fp, pc}

00010458 <flatbuffers_uint8_cast_from_pe>:
   10458:	sub	sp, sp, #4
   1045c:	strb	r0, [sp, #3]
   10460:	ldrb	r0, [sp, #3]
   10464:	add	sp, sp, #4
   10468:	bx	lr

0001046c <flatbuffers_uint16_read_from_pe>:
   1046c:	push	{fp, lr}
   10470:	mov	fp, sp
   10474:	sub	sp, sp, #8
   10478:	str	r0, [sp, #4]
   1047c:	ldr	r0, [sp, #4]
   10480:	ldrh	r0, [r0]
   10484:	bl	10494 <flatbuffers_uint16_cast_from_pe>
   10488:	uxth	r0, r0
   1048c:	mov	sp, fp
   10490:	pop	{fp, pc}

00010494 <flatbuffers_uint16_cast_from_pe>:
   10494:	sub	sp, sp, #4
   10498:	strh	r0, [sp, #2]
   1049c:	ldrh	r0, [sp, #2]
   104a0:	add	sp, sp, #4
   104a4:	bx	lr

000104a8 <flatbuffers_uint32_read_from_pe>:
   104a8:	push	{fp, lr}
   104ac:	mov	fp, sp
   104b0:	sub	sp, sp, #8
   104b4:	str	r0, [sp, #4]
   104b8:	ldr	r0, [sp, #4]
   104bc:	ldr	r0, [r0]
   104c0:	bl	104cc <flatbuffers_uint32_cast_from_pe>
   104c4:	mov	sp, fp
   104c8:	pop	{fp, pc}

000104cc <flatbuffers_uint32_cast_from_pe>:
   104cc:	sub	sp, sp, #4
   104d0:	str	r0, [sp]
   104d4:	ldr	r0, [sp]
   104d8:	add	sp, sp, #4
   104dc:	bx	lr

000104e0 <flatbuffers_uint64_read_from_pe>:
   104e0:	push	{fp, lr}
   104e4:	mov	fp, sp
   104e8:	sub	sp, sp, #8
   104ec:	str	r0, [sp, #4]
   104f0:	ldr	r0, [sp, #4]
   104f4:	ldr	r1, [r0]
   104f8:	ldr	r0, [r0, #4]
   104fc:	str	r0, [sp]
   10500:	mov	r0, r1
   10504:	ldr	r1, [sp]
   10508:	bl	10514 <flatbuffers_uint64_cast_from_pe>
   1050c:	mov	sp, fp
   10510:	pop	{fp, pc}

00010514 <flatbuffers_uint64_cast_from_pe>:
   10514:	sub	sp, sp, #8
   10518:	str	r0, [sp]
   1051c:	str	r1, [sp, #4]
   10520:	ldr	r0, [sp]
   10524:	ldr	r1, [sp, #4]
   10528:	add	sp, sp, #8
   1052c:	bx	lr

00010530 <flatbuffers_float_read_from_pe>:
   10530:	push	{fp, lr}
   10534:	mov	fp, sp
   10538:	sub	sp, sp, #8
   1053c:	str	r0, [sp, #4]
   10540:	ldr	r0, [sp, #4]
   10544:	vldr	s0, [r0]
   10548:	bl	10554 <flatbuffers_float_cast_from_pe>
   1054c:	mov	sp, fp
   10550:	pop	{fp, pc}

00010554 <flatbuffers_float_cast_from_pe>:
   10554:	sub	sp, sp, #8
   10558:	vstr	s0, [sp, #4]
   1055c:	vldr	s0, [sp, #4]
   10560:	vstr	s0, [sp]
   10564:	ldr	r0, [sp]
   10568:	str	r0, [sp]
   1056c:	vldr	s0, [sp]
   10570:	add	sp, sp, #8
   10574:	bx	lr

00010578 <flatbuffers_double_read_from_pe>:
   10578:	push	{fp, lr}
   1057c:	mov	fp, sp
   10580:	sub	sp, sp, #8
   10584:	str	r0, [sp, #4]
   10588:	ldr	r0, [sp, #4]
   1058c:	vldr	d0, [r0]
   10590:	bl	1059c <flatbuffers_double_cast_from_pe>
   10594:	mov	sp, fp
   10598:	pop	{fp, pc}

0001059c <flatbuffers_double_cast_from_pe>:
   1059c:	sub	sp, sp, #16
   105a0:	vstr	d0, [sp, #8]
   105a4:	vldr	d16, [sp, #8]
   105a8:	vstr	d16, [sp]
   105ac:	vldr	d0, [sp]
   105b0:	add	sp, sp, #16
   105b4:	bx	lr

000105b8 <MyGame_Example_Monster_verify_table>:
   105b8:	push	{fp, lr}
   105bc:	mov	fp, sp
   105c0:	sub	sp, sp, #48	; 0x30
   105c4:	str	r0, [fp, #-8]
   105c8:	ldr	r0, [fp, #-8]
   105cc:	movw	r1, #0
   105d0:	uxth	r1, r1
   105d4:	movw	r2, #32
   105d8:	movw	r3, #16
   105dc:	uxth	r3, r3
   105e0:	bl	0 <flatcc_verify_field>
   105e4:	str	r0, [fp, #-12]
   105e8:	cmp	r0, #0
   105ec:	beq	105fc <MyGame_Example_Monster_verify_table+0x44>
   105f0:	ldr	r0, [fp, #-12]
   105f4:	str	r0, [fp, #-4]
   105f8:	b	10d7c <MyGame_Example_Monster_verify_table+0x7c4>
   105fc:	ldr	r0, [fp, #-8]
   10600:	movw	r1, #2
   10604:	uxth	r2, r1
   10608:	str	r1, [fp, #-16]
   1060c:	mov	r1, r2
   10610:	movw	r2, #2
   10614:	ldr	r3, [fp, #-16]
   10618:	uxth	r3, r3
   1061c:	bl	0 <flatcc_verify_field>
   10620:	str	r0, [fp, #-12]
   10624:	cmp	r0, #0
   10628:	beq	10638 <MyGame_Example_Monster_verify_table+0x80>
   1062c:	ldr	r0, [fp, #-12]
   10630:	str	r0, [fp, #-4]
   10634:	b	10d7c <MyGame_Example_Monster_verify_table+0x7c4>
   10638:	ldr	r0, [fp, #-8]
   1063c:	movw	r1, #1
   10640:	uxth	r1, r1
   10644:	movw	r2, #2
   10648:	movw	r3, #2
   1064c:	uxth	r3, r3
   10650:	bl	0 <flatcc_verify_field>
   10654:	str	r0, [fp, #-12]
   10658:	cmp	r0, #0
   1065c:	beq	1066c <MyGame_Example_Monster_verify_table+0xb4>
   10660:	ldr	r0, [fp, #-12]
   10664:	str	r0, [fp, #-4]
   10668:	b	10d7c <MyGame_Example_Monster_verify_table+0x7c4>
   1066c:	ldr	r0, [fp, #-8]
   10670:	movw	r1, #3
   10674:	uxth	r1, r1
   10678:	movw	r2, #1
   1067c:	bl	0 <flatcc_verify_string_field>
   10680:	str	r0, [fp, #-12]
   10684:	cmp	r0, #0
   10688:	beq	10698 <MyGame_Example_Monster_verify_table+0xe0>
   1068c:	ldr	r0, [fp, #-12]
   10690:	str	r0, [fp, #-4]
   10694:	b	10d7c <MyGame_Example_Monster_verify_table+0x7c4>
   10698:	ldr	r0, [fp, #-8]
   1069c:	movw	r1, #6
   106a0:	uxth	r1, r1
   106a4:	movw	r2, #1
   106a8:	movw	r3, #1
   106ac:	uxth	r3, r3
   106b0:	bl	0 <flatcc_verify_field>
   106b4:	str	r0, [fp, #-12]
   106b8:	cmp	r0, #0
   106bc:	beq	106cc <MyGame_Example_Monster_verify_table+0x114>
   106c0:	ldr	r0, [fp, #-12]
   106c4:	str	r0, [fp, #-4]
   106c8:	b	10d7c <MyGame_Example_Monster_verify_table+0x7c4>
   106cc:	ldr	r0, [fp, #-8]
   106d0:	movw	r1, #5
   106d4:	uxth	r1, r1
   106d8:	movw	r2, #0
   106dc:	movw	r3, #1
   106e0:	movw	ip, #1
   106e4:	uxth	ip, ip
   106e8:	str	ip, [sp]
   106ec:	mvn	ip, #0
   106f0:	str	ip, [sp, #4]
   106f4:	bl	0 <flatcc_verify_vector_field>
   106f8:	str	r0, [fp, #-12]
   106fc:	cmp	r0, #0
   10700:	beq	10710 <MyGame_Example_Monster_verify_table+0x158>
   10704:	ldr	r0, [fp, #-12]
   10708:	str	r0, [fp, #-4]
   1070c:	b	10d7c <MyGame_Example_Monster_verify_table+0x7c4>
   10710:	ldr	r0, [fp, #-8]
   10714:	movw	r1, #11
   10718:	uxth	r1, r1
   1071c:	movw	r2, #0
   10720:	movw	r3, #0
   10724:	movt	r3, #0
   10728:	bl	0 <flatcc_verify_table_vector_field>
   1072c:	str	r0, [fp, #-12]
   10730:	cmp	r0, #0
   10734:	beq	10744 <MyGame_Example_Monster_verify_table+0x18c>
   10738:	ldr	r0, [fp, #-12]
   1073c:	str	r0, [fp, #-4]
   10740:	b	10d7c <MyGame_Example_Monster_verify_table+0x7c4>
   10744:	ldr	r0, [fp, #-8]
   10748:	movw	r1, #10
   1074c:	uxth	r1, r1
   10750:	movw	r2, #0
   10754:	bl	0 <flatcc_verify_string_vector_field>
   10758:	str	r0, [fp, #-12]
   1075c:	cmp	r0, #0
   10760:	beq	10770 <MyGame_Example_Monster_verify_table+0x1b8>
   10764:	ldr	r0, [fp, #-12]
   10768:	str	r0, [fp, #-4]
   1076c:	b	10d7c <MyGame_Example_Monster_verify_table+0x7c4>
   10770:	ldr	r0, [fp, #-8]
   10774:	movw	r1, #28
   10778:	uxth	r1, r1
   1077c:	movw	r2, #0
   10780:	bl	0 <flatcc_verify_string_vector_field>
   10784:	str	r0, [fp, #-12]
   10788:	cmp	r0, #0
   1078c:	beq	1079c <MyGame_Example_Monster_verify_table+0x1e4>
   10790:	ldr	r0, [fp, #-12]
   10794:	str	r0, [fp, #-4]
   10798:	b	10d7c <MyGame_Example_Monster_verify_table+0x7c4>
   1079c:	ldr	r0, [fp, #-8]
   107a0:	movw	r1, #24
   107a4:	uxth	r1, r1
   107a8:	movw	r2, #0
   107ac:	movw	r3, #1
   107b0:	movw	ip, #1
   107b4:	uxth	ip, ip
   107b8:	str	ip, [sp]
   107bc:	mvn	ip, #0
   107c0:	str	ip, [sp, #4]
   107c4:	bl	0 <flatcc_verify_vector_field>
   107c8:	str	r0, [fp, #-12]
   107cc:	cmp	r0, #0
   107d0:	beq	107e0 <MyGame_Example_Monster_verify_table+0x228>
   107d4:	ldr	r0, [fp, #-12]
   107d8:	str	r0, [fp, #-4]
   107dc:	b	10d7c <MyGame_Example_Monster_verify_table+0x7c4>
   107e0:	ldr	r0, [pc, #1440]	; 10d88 <MyGame_Example_Monster_verify_table+0x7d0>
   107e4:	ldr	r1, [fp, #-8]
   107e8:	str	r0, [fp, #-20]	; 0xffffffec
   107ec:	mov	r0, r1
   107f0:	movw	r1, #29
   107f4:	uxth	r1, r1
   107f8:	movw	r2, #0
   107fc:	movw	r3, #8
   10800:	movw	ip, #4
   10804:	uxth	ip, ip
   10808:	str	ip, [sp]
   1080c:	ldr	ip, [fp, #-20]	; 0xffffffec
   10810:	str	ip, [sp, #4]
   10814:	bl	0 <flatcc_verify_vector_field>
   10818:	str	r0, [fp, #-12]
   1081c:	cmp	r0, #0
   10820:	beq	10830 <MyGame_Example_Monster_verify_table+0x278>
   10824:	ldr	r0, [fp, #-12]
   10828:	str	r0, [fp, #-4]
   1082c:	b	10d7c <MyGame_Example_Monster_verify_table+0x7c4>
   10830:	ldr	r0, [fp, #-8]
   10834:	movw	r1, #12
   10838:	uxth	r1, r1
   1083c:	movw	r2, #0
   10840:	movw	r3, #0
   10844:	movt	r3, #0
   10848:	bl	0 <flatcc_verify_table_field>
   1084c:	str	r0, [fp, #-12]
   10850:	cmp	r0, #0
   10854:	beq	10864 <MyGame_Example_Monster_verify_table+0x2ac>
   10858:	ldr	r0, [fp, #-12]
   1085c:	str	r0, [fp, #-4]
   10860:	b	10d7c <MyGame_Example_Monster_verify_table+0x7c4>
   10864:	ldr	r0, [fp, #-8]
   10868:	movw	r1, #8
   1086c:	uxth	r1, r1
   10870:	movw	r2, #0
   10874:	movw	r3, #0
   10878:	movt	r3, #0
   1087c:	bl	0 <flatcc_verify_union_field>
   10880:	str	r0, [fp, #-12]
   10884:	cmp	r0, #0
   10888:	beq	10898 <MyGame_Example_Monster_verify_table+0x2e0>
   1088c:	ldr	r0, [fp, #-12]
   10890:	str	r0, [fp, #-4]
   10894:	b	10d7c <MyGame_Example_Monster_verify_table+0x7c4>
   10898:	ldr	r0, [pc, #1260]	; 10d8c <MyGame_Example_Monster_verify_table+0x7d4>
   1089c:	ldr	r1, [fp, #-8]
   108a0:	str	r0, [sp, #24]
   108a4:	mov	r0, r1
   108a8:	movw	r1, #9
   108ac:	uxth	r1, r1
   108b0:	movw	r2, #0
   108b4:	movw	r3, #4
   108b8:	movw	ip, #2
   108bc:	uxth	ip, ip
   108c0:	str	ip, [sp]
   108c4:	ldr	ip, [sp, #24]
   108c8:	str	ip, [sp, #4]
   108cc:	bl	0 <flatcc_verify_vector_field>
   108d0:	str	r0, [fp, #-12]
   108d4:	cmp	r0, #0
   108d8:	beq	108e8 <MyGame_Example_Monster_verify_table+0x330>
   108dc:	ldr	r0, [fp, #-12]
   108e0:	str	r0, [fp, #-4]
   108e4:	b	10d7c <MyGame_Example_Monster_verify_table+0x7c4>
   108e8:	ldr	r0, [pc, #1180]	; 10d8c <MyGame_Example_Monster_verify_table+0x7d4>
   108ec:	ldr	r1, [fp, #-8]
   108f0:	str	r0, [sp, #20]
   108f4:	mov	r0, r1
   108f8:	movw	r1, #31
   108fc:	uxth	r1, r1
   10900:	movw	r2, #0
   10904:	movw	r3, #4
   10908:	movw	ip, #2
   1090c:	uxth	ip, ip
   10910:	str	ip, [sp]
   10914:	ldr	ip, [sp, #20]
   10918:	str	ip, [sp, #4]
   1091c:	bl	0 <flatcc_verify_vector_field>
   10920:	str	r0, [fp, #-12]
   10924:	cmp	r0, #0
   10928:	beq	10938 <MyGame_Example_Monster_verify_table+0x380>
   1092c:	ldr	r0, [fp, #-12]
   10930:	str	r0, [fp, #-4]
   10934:	b	10d7c <MyGame_Example_Monster_verify_table+0x7c4>
   10938:	ldr	r0, [fp, #-8]
   1093c:	movw	r1, #13
   10940:	uxth	r1, r1
   10944:	movw	r2, #0
   10948:	str	r2, [sp, #16]
   1094c:	ldr	r3, [sp, #16]
   10950:	movw	ip, #1
   10954:	uxth	ip, ip
   10958:	str	ip, [sp]
   1095c:	movw	ip, #0
   10960:	movt	ip, #0
   10964:	str	ip, [sp, #4]
   10968:	bl	0 <flatcc_verify_table_as_nested_root>
   1096c:	str	r0, [fp, #-12]
   10970:	cmp	r0, #0
   10974:	beq	10984 <MyGame_Example_Monster_verify_table+0x3cc>
   10978:	ldr	r0, [fp, #-12]
   1097c:	str	r0, [fp, #-4]
   10980:	b	10d7c <MyGame_Example_Monster_verify_table+0x7c4>
   10984:	ldr	r0, [fp, #-8]
   10988:	movw	r1, #14
   1098c:	uxth	r1, r1
   10990:	movw	r2, #0
   10994:	movw	r3, #0
   10998:	movt	r3, #0
   1099c:	bl	0 <flatcc_verify_table_field>
   109a0:	str	r0, [fp, #-12]
   109a4:	cmp	r0, #0
   109a8:	beq	109b8 <MyGame_Example_Monster_verify_table+0x400>
   109ac:	ldr	r0, [fp, #-12]
   109b0:	str	r0, [fp, #-4]
   109b4:	b	10d7c <MyGame_Example_Monster_verify_table+0x7c4>
   109b8:	ldr	r0, [fp, #-8]
   109bc:	movw	r1, #15
   109c0:	uxth	r1, r1
   109c4:	movw	r2, #1
   109c8:	movw	r3, #1
   109cc:	uxth	r3, r3
   109d0:	bl	0 <flatcc_verify_field>
   109d4:	str	r0, [fp, #-12]
   109d8:	cmp	r0, #0
   109dc:	beq	109ec <MyGame_Example_Monster_verify_table+0x434>
   109e0:	ldr	r0, [fp, #-12]
   109e4:	str	r0, [fp, #-4]
   109e8:	b	10d7c <MyGame_Example_Monster_verify_table+0x7c4>
   109ec:	ldr	r0, [fp, #-8]
   109f0:	movw	r1, #16
   109f4:	uxth	r1, r1
   109f8:	movw	r2, #4
   109fc:	movw	r3, #4
   10a00:	uxth	r3, r3
   10a04:	bl	0 <flatcc_verify_field>
   10a08:	str	r0, [fp, #-12]
   10a0c:	cmp	r0, #0
   10a10:	beq	10a20 <MyGame_Example_Monster_verify_table+0x468>
   10a14:	ldr	r0, [fp, #-12]
   10a18:	str	r0, [fp, #-4]
   10a1c:	b	10d7c <MyGame_Example_Monster_verify_table+0x7c4>
   10a20:	ldr	r0, [fp, #-8]
   10a24:	movw	r1, #17
   10a28:	uxth	r1, r1
   10a2c:	movw	r2, #4
   10a30:	movw	r3, #4
   10a34:	uxth	r3, r3
   10a38:	bl	0 <flatcc_verify_field>
   10a3c:	str	r0, [fp, #-12]
   10a40:	cmp	r0, #0
   10a44:	beq	10a54 <MyGame_Example_Monster_verify_table+0x49c>
   10a48:	ldr	r0, [fp, #-12]
   10a4c:	str	r0, [fp, #-4]
   10a50:	b	10d7c <MyGame_Example_Monster_verify_table+0x7c4>
   10a54:	ldr	r0, [fp, #-8]
   10a58:	movw	r1, #18
   10a5c:	uxth	r1, r1
   10a60:	movw	r2, #8
   10a64:	movw	r3, #8
   10a68:	uxth	r3, r3
   10a6c:	bl	0 <flatcc_verify_field>
   10a70:	str	r0, [fp, #-12]
   10a74:	cmp	r0, #0
   10a78:	beq	10a88 <MyGame_Example_Monster_verify_table+0x4d0>
   10a7c:	ldr	r0, [fp, #-12]
   10a80:	str	r0, [fp, #-4]
   10a84:	b	10d7c <MyGame_Example_Monster_verify_table+0x7c4>
   10a88:	ldr	r0, [fp, #-8]
   10a8c:	movw	r1, #19
   10a90:	uxth	r1, r1
   10a94:	movw	r2, #8
   10a98:	movw	r3, #8
   10a9c:	uxth	r3, r3
   10aa0:	bl	0 <flatcc_verify_field>
   10aa4:	str	r0, [fp, #-12]
   10aa8:	cmp	r0, #0
   10aac:	beq	10abc <MyGame_Example_Monster_verify_table+0x504>
   10ab0:	ldr	r0, [fp, #-12]
   10ab4:	str	r0, [fp, #-4]
   10ab8:	b	10d7c <MyGame_Example_Monster_verify_table+0x7c4>
   10abc:	ldr	r0, [fp, #-8]
   10ac0:	movw	r1, #20
   10ac4:	uxth	r1, r1
   10ac8:	movw	r2, #4
   10acc:	movw	r3, #4
   10ad0:	uxth	r3, r3
   10ad4:	bl	0 <flatcc_verify_field>
   10ad8:	str	r0, [fp, #-12]
   10adc:	cmp	r0, #0
   10ae0:	beq	10af0 <MyGame_Example_Monster_verify_table+0x538>
   10ae4:	ldr	r0, [fp, #-12]
   10ae8:	str	r0, [fp, #-4]
   10aec:	b	10d7c <MyGame_Example_Monster_verify_table+0x7c4>
   10af0:	ldr	r0, [fp, #-8]
   10af4:	movw	r1, #21
   10af8:	uxth	r1, r1
   10afc:	movw	r2, #4
   10b00:	movw	r3, #4
   10b04:	uxth	r3, r3
   10b08:	bl	0 <flatcc_verify_field>
   10b0c:	str	r0, [fp, #-12]
   10b10:	cmp	r0, #0
   10b14:	beq	10b24 <MyGame_Example_Monster_verify_table+0x56c>
   10b18:	ldr	r0, [fp, #-12]
   10b1c:	str	r0, [fp, #-4]
   10b20:	b	10d7c <MyGame_Example_Monster_verify_table+0x7c4>
   10b24:	ldr	r0, [fp, #-8]
   10b28:	movw	r1, #22
   10b2c:	uxth	r1, r1
   10b30:	movw	r2, #8
   10b34:	movw	r3, #8
   10b38:	uxth	r3, r3
   10b3c:	bl	0 <flatcc_verify_field>
   10b40:	str	r0, [fp, #-12]
   10b44:	cmp	r0, #0
   10b48:	beq	10b58 <MyGame_Example_Monster_verify_table+0x5a0>
   10b4c:	ldr	r0, [fp, #-12]
   10b50:	str	r0, [fp, #-4]
   10b54:	b	10d7c <MyGame_Example_Monster_verify_table+0x7c4>
   10b58:	ldr	r0, [fp, #-8]
   10b5c:	movw	r1, #23
   10b60:	uxth	r1, r1
   10b64:	movw	r2, #8
   10b68:	movw	r3, #8
   10b6c:	uxth	r3, r3
   10b70:	bl	0 <flatcc_verify_field>
   10b74:	str	r0, [fp, #-12]
   10b78:	cmp	r0, #0
   10b7c:	beq	10b8c <MyGame_Example_Monster_verify_table+0x5d4>
   10b80:	ldr	r0, [fp, #-12]
   10b84:	str	r0, [fp, #-4]
   10b88:	b	10d7c <MyGame_Example_Monster_verify_table+0x7c4>
   10b8c:	ldr	r0, [fp, #-8]
   10b90:	movw	r1, #25
   10b94:	uxth	r1, r1
   10b98:	movw	r2, #4
   10b9c:	movw	r3, #4
   10ba0:	uxth	r3, r3
   10ba4:	bl	0 <flatcc_verify_field>
   10ba8:	str	r0, [fp, #-12]
   10bac:	cmp	r0, #0
   10bb0:	beq	10bc0 <MyGame_Example_Monster_verify_table+0x608>
   10bb4:	ldr	r0, [fp, #-12]
   10bb8:	str	r0, [fp, #-4]
   10bbc:	b	10d7c <MyGame_Example_Monster_verify_table+0x7c4>
   10bc0:	ldr	r0, [fp, #-8]
   10bc4:	movw	r1, #26
   10bc8:	uxth	r1, r1
   10bcc:	movw	r2, #4
   10bd0:	movw	r3, #4
   10bd4:	uxth	r3, r3
   10bd8:	bl	0 <flatcc_verify_field>
   10bdc:	str	r0, [fp, #-12]
   10be0:	cmp	r0, #0
   10be4:	beq	10bf4 <MyGame_Example_Monster_verify_table+0x63c>
   10be8:	ldr	r0, [fp, #-12]
   10bec:	str	r0, [fp, #-4]
   10bf0:	b	10d7c <MyGame_Example_Monster_verify_table+0x7c4>
   10bf4:	ldr	r0, [fp, #-8]
   10bf8:	movw	r1, #27
   10bfc:	uxth	r1, r1
   10c00:	movw	r2, #4
   10c04:	movw	r3, #4
   10c08:	uxth	r3, r3
   10c0c:	bl	0 <flatcc_verify_field>
   10c10:	str	r0, [fp, #-12]
   10c14:	cmp	r0, #0
   10c18:	beq	10c28 <MyGame_Example_Monster_verify_table+0x670>
   10c1c:	ldr	r0, [fp, #-12]
   10c20:	str	r0, [fp, #-4]
   10c24:	b	10d7c <MyGame_Example_Monster_verify_table+0x7c4>
   10c28:	ldr	r0, [fp, #-8]
   10c2c:	movw	r1, #30
   10c30:	uxth	r1, r1
   10c34:	movw	r2, #0
   10c38:	movw	r3, #1
   10c3c:	movw	ip, #1
   10c40:	uxth	ip, ip
   10c44:	str	ip, [sp]
   10c48:	mvn	ip, #0
   10c4c:	str	ip, [sp, #4]
   10c50:	bl	0 <flatcc_verify_vector_field>
   10c54:	str	r0, [fp, #-12]
   10c58:	cmp	r0, #0
   10c5c:	beq	10c6c <MyGame_Example_Monster_verify_table+0x6b4>
   10c60:	ldr	r0, [fp, #-12]
   10c64:	str	r0, [fp, #-4]
   10c68:	b	10d7c <MyGame_Example_Monster_verify_table+0x7c4>
   10c6c:	ldr	r0, [pc, #276]	; 10d88 <MyGame_Example_Monster_verify_table+0x7d0>
   10c70:	ldr	r1, [fp, #-8]
   10c74:	str	r0, [sp, #12]
   10c78:	mov	r0, r1
   10c7c:	movw	r1, #32
   10c80:	uxth	r1, r1
   10c84:	movw	r2, #0
   10c88:	movw	r3, #8
   10c8c:	movw	ip, #8
   10c90:	uxth	ip, ip
   10c94:	str	ip, [sp]
   10c98:	ldr	ip, [sp, #12]
   10c9c:	str	ip, [sp, #4]
   10ca0:	bl	0 <flatcc_verify_vector_field>
   10ca4:	str	r0, [fp, #-12]
   10ca8:	cmp	r0, #0
   10cac:	beq	10cbc <MyGame_Example_Monster_verify_table+0x704>
   10cb0:	ldr	r0, [fp, #-12]
   10cb4:	str	r0, [fp, #-4]
   10cb8:	b	10d7c <MyGame_Example_Monster_verify_table+0x7c4>
   10cbc:	ldr	r0, [pc, #196]	; 10d88 <MyGame_Example_Monster_verify_table+0x7d0>
   10cc0:	ldr	r1, [fp, #-8]
   10cc4:	str	r0, [sp, #8]
   10cc8:	mov	r0, r1
   10ccc:	movw	r1, #33	; 0x21
   10cd0:	uxth	r1, r1
   10cd4:	movw	r2, #0
   10cd8:	movw	r3, #8
   10cdc:	movw	ip, #8
   10ce0:	uxth	ip, ip
   10ce4:	str	ip, [sp]
   10ce8:	ldr	ip, [sp, #8]
   10cec:	str	ip, [sp, #4]
   10cf0:	bl	0 <flatcc_verify_vector_field>
   10cf4:	str	r0, [fp, #-12]
   10cf8:	cmp	r0, #0
   10cfc:	beq	10d0c <MyGame_Example_Monster_verify_table+0x754>
   10d00:	ldr	r0, [fp, #-12]
   10d04:	str	r0, [fp, #-4]
   10d08:	b	10d7c <MyGame_Example_Monster_verify_table+0x7c4>
   10d0c:	ldr	r0, [fp, #-8]
   10d10:	movw	r1, #34	; 0x22
   10d14:	uxth	r1, r1
   10d18:	movw	r2, #0
   10d1c:	movw	r3, #0
   10d20:	movt	r3, #0
   10d24:	bl	0 <flatcc_verify_table_field>
   10d28:	str	r0, [fp, #-12]
   10d2c:	cmp	r0, #0
   10d30:	beq	10d40 <MyGame_Example_Monster_verify_table+0x788>
   10d34:	ldr	r0, [fp, #-12]
   10d38:	str	r0, [fp, #-4]
   10d3c:	b	10d7c <MyGame_Example_Monster_verify_table+0x7c4>
   10d40:	ldr	r0, [fp, #-8]
   10d44:	movw	r1, #35	; 0x23
   10d48:	uxth	r1, r1
   10d4c:	movw	r2, #0
   10d50:	movw	r3, #0
   10d54:	movt	r3, #0
   10d58:	bl	0 <flatcc_verify_table_field>
   10d5c:	str	r0, [fp, #-12]
   10d60:	cmp	r0, #0
   10d64:	beq	10d74 <MyGame_Example_Monster_verify_table+0x7bc>
   10d68:	ldr	r0, [fp, #-12]
   10d6c:	str	r0, [fp, #-4]
   10d70:	b	10d7c <MyGame_Example_Monster_verify_table+0x7c4>
   10d74:	movw	r0, #0
   10d78:	str	r0, [fp, #-4]
   10d7c:	ldr	r0, [fp, #-4]
   10d80:	mov	sp, fp
   10d84:	pop	{fp, pc}
   10d88:	.word	0x1fffffff
   10d8c:	.word	0x3fffffff

00010d90 <MyGame_Example_Any_union_verifier>:
   10d90:	push	{fp, lr}
   10d94:	mov	fp, sp
   10d98:	sub	sp, sp, #16
   10d9c:	str	r0, [sp, #8]
   10da0:	ldr	r0, [sp, #8]
   10da4:	ldrb	r0, [r0, #12]
   10da8:	sub	r0, r0, #1
   10dac:	cmp	r0, #3
   10db0:	str	r0, [sp, #4]
   10db4:	bhi	10e38 <MyGame_Example_Any_union_verifier+0xa8>
   10db8:	add	r0, pc, #8
   10dbc:	ldr	r1, [sp, #4]
   10dc0:	ldr	r0, [r0, r1, lsl #2]
   10dc4:	mov	pc, r0
   10dc8:	.word	0x00010dd8
   10dcc:	.word	0x00010df0
   10dd0:	.word	0x00010e08
   10dd4:	.word	0x00010e20
   10dd8:	ldr	r0, [sp, #8]
   10ddc:	movw	r1, #0
   10de0:	movt	r1, #0
   10de4:	bl	0 <flatcc_verify_union_table>
   10de8:	str	r0, [fp, #-4]
   10dec:	b	10e40 <MyGame_Example_Any_union_verifier+0xb0>
   10df0:	ldr	r0, [sp, #8]
   10df4:	movw	r1, #0
   10df8:	movt	r1, #0
   10dfc:	bl	0 <flatcc_verify_union_table>
   10e00:	str	r0, [fp, #-4]
   10e04:	b	10e40 <MyGame_Example_Any_union_verifier+0xb0>
   10e08:	ldr	r0, [sp, #8]
   10e0c:	movw	r1, #0
   10e10:	movt	r1, #0
   10e14:	bl	0 <flatcc_verify_union_table>
   10e18:	str	r0, [fp, #-4]
   10e1c:	b	10e40 <MyGame_Example_Any_union_verifier+0xb0>
   10e20:	ldr	r0, [sp, #8]
   10e24:	movw	r1, #0
   10e28:	movt	r1, #0
   10e2c:	bl	0 <flatcc_verify_union_table>
   10e30:	str	r0, [fp, #-4]
   10e34:	b	10e40 <MyGame_Example_Any_union_verifier+0xb0>
   10e38:	movw	r0, #0
   10e3c:	str	r0, [fp, #-4]
   10e40:	ldr	r0, [fp, #-4]
   10e44:	mov	sp, fp
   10e48:	pop	{fp, pc}

00010e4c <MyGame_Example_Stat_verify_table>:
   10e4c:	push	{fp, lr}
   10e50:	mov	fp, sp
   10e54:	sub	sp, sp, #16
   10e58:	str	r0, [sp, #8]
   10e5c:	ldr	r0, [sp, #8]
   10e60:	movw	r1, #0
   10e64:	uxth	r1, r1
   10e68:	movw	r2, #0
   10e6c:	bl	0 <flatcc_verify_string_field>
   10e70:	str	r0, [sp, #4]
   10e74:	cmp	r0, #0
   10e78:	beq	10e88 <MyGame_Example_Stat_verify_table+0x3c>
   10e7c:	ldr	r0, [sp, #4]
   10e80:	str	r0, [fp, #-4]
   10e84:	b	10f00 <MyGame_Example_Stat_verify_table+0xb4>
   10e88:	ldr	r0, [sp, #8]
   10e8c:	movw	r1, #1
   10e90:	uxth	r1, r1
   10e94:	movw	r2, #8
   10e98:	movw	r3, #8
   10e9c:	uxth	r3, r3
   10ea0:	bl	0 <flatcc_verify_field>
   10ea4:	str	r0, [sp, #4]
   10ea8:	cmp	r0, #0
   10eac:	beq	10ebc <MyGame_Example_Stat_verify_table+0x70>
   10eb0:	ldr	r0, [sp, #4]
   10eb4:	str	r0, [fp, #-4]
   10eb8:	b	10f00 <MyGame_Example_Stat_verify_table+0xb4>
   10ebc:	ldr	r0, [sp, #8]
   10ec0:	movw	r1, #2
   10ec4:	uxth	r2, r1
   10ec8:	str	r1, [sp]
   10ecc:	mov	r1, r2
   10ed0:	movw	r2, #2
   10ed4:	ldr	r3, [sp]
   10ed8:	uxth	r3, r3
   10edc:	bl	0 <flatcc_verify_field>
   10ee0:	str	r0, [sp, #4]
   10ee4:	cmp	r0, #0
   10ee8:	beq	10ef8 <MyGame_Example_Stat_verify_table+0xac>
   10eec:	ldr	r0, [sp, #4]
   10ef0:	str	r0, [fp, #-4]
   10ef4:	b	10f00 <MyGame_Example_Stat_verify_table+0xb4>
   10ef8:	movw	r0, #0
   10efc:	str	r0, [fp, #-4]
   10f00:	ldr	r0, [fp, #-4]
   10f04:	mov	sp, fp
   10f08:	pop	{fp, pc}

00010f0c <MyGame_InParentNamespace_verify_table>:
   10f0c:	sub	sp, sp, #4
   10f10:	str	r0, [sp]
   10f14:	movw	r0, #0
   10f18:	add	sp, sp, #4
   10f1c:	bx	lr

00010f20 <MyGame_Example_TestBase64_verify_table>:
   10f20:	push	{fp, lr}
   10f24:	mov	fp, sp
   10f28:	sub	sp, sp, #32
   10f2c:	str	r0, [fp, #-8]
   10f30:	ldr	r0, [fp, #-8]
   10f34:	movw	r1, #0
   10f38:	uxth	r1, r1
   10f3c:	movw	r2, #0
   10f40:	movw	r3, #1
   10f44:	movw	ip, #1
   10f48:	uxth	ip, ip
   10f4c:	str	ip, [sp]
   10f50:	mvn	ip, #0
   10f54:	str	ip, [sp, #4]
   10f58:	bl	0 <flatcc_verify_vector_field>
   10f5c:	str	r0, [fp, #-12]
   10f60:	cmp	r0, #0
   10f64:	beq	10f74 <MyGame_Example_TestBase64_verify_table+0x54>
   10f68:	ldr	r0, [fp, #-12]
   10f6c:	str	r0, [fp, #-4]
   10f70:	b	11014 <MyGame_Example_TestBase64_verify_table+0xf4>
   10f74:	ldr	r0, [fp, #-8]
   10f78:	movw	r1, #1
   10f7c:	uxth	r2, r1
   10f80:	str	r1, [sp, #16]
   10f84:	mov	r1, r2
   10f88:	movw	r2, #0
   10f8c:	movw	r3, #1
   10f90:	ldr	ip, [sp, #16]
   10f94:	uxth	lr, ip
   10f98:	str	lr, [sp]
   10f9c:	mvn	lr, #0
   10fa0:	str	lr, [sp, #4]
   10fa4:	bl	0 <flatcc_verify_vector_field>
   10fa8:	str	r0, [fp, #-12]
   10fac:	cmp	r0, #0
   10fb0:	beq	10fc0 <MyGame_Example_TestBase64_verify_table+0xa0>
   10fb4:	ldr	r0, [fp, #-12]
   10fb8:	str	r0, [fp, #-4]
   10fbc:	b	11014 <MyGame_Example_TestBase64_verify_table+0xf4>
   10fc0:	ldr	r0, [fp, #-8]
   10fc4:	movw	r1, #2
   10fc8:	uxth	r1, r1
   10fcc:	movw	r2, #0
   10fd0:	str	r2, [sp, #12]
   10fd4:	ldr	r3, [sp, #12]
   10fd8:	movw	ip, #1
   10fdc:	uxth	ip, ip
   10fe0:	str	ip, [sp]
   10fe4:	movw	ip, #0
   10fe8:	movt	ip, #0
   10fec:	str	ip, [sp, #4]
   10ff0:	bl	0 <flatcc_verify_table_as_nested_root>
   10ff4:	str	r0, [fp, #-12]
   10ff8:	cmp	r0, #0
   10ffc:	beq	1100c <MyGame_Example_TestBase64_verify_table+0xec>
   11000:	ldr	r0, [fp, #-12]
   11004:	str	r0, [fp, #-4]
   11008:	b	11014 <MyGame_Example_TestBase64_verify_table+0xf4>
   1100c:	movw	r0, #0
   11010:	str	r0, [fp, #-4]
   11014:	ldr	r0, [fp, #-4]
   11018:	mov	sp, fp
   1101c:	pop	{fp, pc}

00011020 <MyGame_Example_TestSimpleTableWithEnum_verify_table>:
   11020:	push	{fp, lr}
   11024:	mov	fp, sp
   11028:	sub	sp, sp, #16
   1102c:	str	r0, [sp, #8]
   11030:	ldr	r0, [sp, #8]
   11034:	movw	r1, #0
   11038:	uxth	r1, r1
   1103c:	movw	r2, #1
   11040:	movw	r3, #1
   11044:	uxth	r3, r3
   11048:	bl	0 <flatcc_verify_field>
   1104c:	str	r0, [sp, #4]
   11050:	cmp	r0, #0
   11054:	beq	11064 <MyGame_Example_TestSimpleTableWithEnum_verify_table+0x44>
   11058:	ldr	r0, [sp, #4]
   1105c:	str	r0, [fp, #-4]
   11060:	b	11110 <MyGame_Example_TestSimpleTableWithEnum_verify_table+0xf0>
   11064:	ldr	r0, [sp, #8]
   11068:	movw	r1, #1
   1106c:	uxth	r2, r1
   11070:	str	r1, [sp]
   11074:	mov	r1, r2
   11078:	movw	r2, #1
   1107c:	ldr	r3, [sp]
   11080:	uxth	r3, r3
   11084:	bl	0 <flatcc_verify_field>
   11088:	str	r0, [sp, #4]
   1108c:	cmp	r0, #0
   11090:	beq	110a0 <MyGame_Example_TestSimpleTableWithEnum_verify_table+0x80>
   11094:	ldr	r0, [sp, #4]
   11098:	str	r0, [fp, #-4]
   1109c:	b	11110 <MyGame_Example_TestSimpleTableWithEnum_verify_table+0xf0>
   110a0:	ldr	r0, [sp, #8]
   110a4:	movw	r1, #2
   110a8:	uxth	r1, r1
   110ac:	movw	r2, #1
   110b0:	movw	r3, #1
   110b4:	uxth	r3, r3
   110b8:	bl	0 <flatcc_verify_field>
   110bc:	str	r0, [sp, #4]
   110c0:	cmp	r0, #0
   110c4:	beq	110d4 <MyGame_Example_TestSimpleTableWithEnum_verify_table+0xb4>
   110c8:	ldr	r0, [sp, #4]
   110cc:	str	r0, [fp, #-4]
   110d0:	b	11110 <MyGame_Example_TestSimpleTableWithEnum_verify_table+0xf0>
   110d4:	ldr	r0, [sp, #8]
   110d8:	movw	r1, #3
   110dc:	uxth	r1, r1
   110e0:	movw	r2, #1
   110e4:	movw	r3, #1
   110e8:	uxth	r3, r3
   110ec:	bl	0 <flatcc_verify_field>
   110f0:	str	r0, [sp, #4]
   110f4:	cmp	r0, #0
   110f8:	beq	11108 <MyGame_Example_TestSimpleTableWithEnum_verify_table+0xe8>
   110fc:	ldr	r0, [sp, #4]
   11100:	str	r0, [fp, #-4]
   11104:	b	11110 <MyGame_Example_TestSimpleTableWithEnum_verify_table+0xf0>
   11108:	movw	r0, #0
   1110c:	str	r0, [fp, #-4]
   11110:	ldr	r0, [fp, #-4]
   11114:	mov	sp, fp
   11118:	pop	{fp, pc}

0001111c <MyGame_Example2_Monster_verify_table>:
   1111c:	sub	sp, sp, #4
   11120:	str	r0, [sp]
   11124:	movw	r0, #0
   11128:	add	sp, sp, #4
   1112c:	bx	lr

00011130 <MyGame_Example_Alt_verify_table>:
   11130:	push	{fp, lr}
   11134:	mov	fp, sp
   11138:	sub	sp, sp, #16
   1113c:	str	r0, [sp, #8]
   11140:	ldr	r0, [sp, #8]
   11144:	movw	r1, #0
   11148:	uxth	r1, r1
   1114c:	movw	r2, #0
   11150:	movw	r3, #0
   11154:	movt	r3, #0
   11158:	bl	0 <flatcc_verify_table_field>
   1115c:	str	r0, [sp, #4]
   11160:	cmp	r0, #0
   11164:	beq	11174 <MyGame_Example_Alt_verify_table+0x44>
   11168:	ldr	r0, [sp, #4]
   1116c:	str	r0, [fp, #-4]
   11170:	b	111e4 <MyGame_Example_Alt_verify_table+0xb4>
   11174:	ldr	r0, [sp, #8]
   11178:	movw	r1, #1
   1117c:	uxth	r1, r1
   11180:	movw	r2, #0
   11184:	movw	r3, #0
   11188:	movt	r3, #0
   1118c:	bl	0 <flatcc_verify_table_field>
   11190:	str	r0, [sp, #4]
   11194:	cmp	r0, #0
   11198:	beq	111a8 <MyGame_Example_Alt_verify_table+0x78>
   1119c:	ldr	r0, [sp, #4]
   111a0:	str	r0, [fp, #-4]
   111a4:	b	111e4 <MyGame_Example_Alt_verify_table+0xb4>
   111a8:	ldr	r0, [sp, #8]
   111ac:	movw	r1, #3
   111b0:	uxth	r1, r1
   111b4:	movw	r2, #0
   111b8:	movw	r3, #0
   111bc:	movt	r3, #0
   111c0:	bl	0 <flatcc_verify_union_vector_field>
   111c4:	str	r0, [sp, #4]
   111c8:	cmp	r0, #0
   111cc:	beq	111dc <MyGame_Example_Alt_verify_table+0xac>
   111d0:	ldr	r0, [sp, #4]
   111d4:	str	r0, [fp, #-4]
   111d8:	b	111e4 <MyGame_Example_Alt_verify_table+0xb4>
   111dc:	movw	r0, #0
   111e0:	str	r0, [fp, #-4]
   111e4:	ldr	r0, [fp, #-4]
   111e8:	mov	sp, fp
   111ec:	pop	{fp, pc}

000111f0 <MyGame_Example_TestJSONPrefix_verify_table>:
   111f0:	push	{fp, lr}
   111f4:	mov	fp, sp
   111f8:	sub	sp, sp, #16
   111fc:	str	r0, [sp, #8]
   11200:	ldr	r0, [sp, #8]
   11204:	movw	r1, #0
   11208:	uxth	r1, r1
   1120c:	movw	r2, #0
   11210:	movw	r3, #0
   11214:	movt	r3, #0
   11218:	bl	0 <flatcc_verify_table_field>
   1121c:	str	r0, [sp, #4]
   11220:	cmp	r0, #0
   11224:	beq	11234 <MyGame_Example_TestJSONPrefix_verify_table+0x44>
   11228:	ldr	r0, [sp, #4]
   1122c:	str	r0, [fp, #-4]
   11230:	b	112a4 <MyGame_Example_TestJSONPrefix_verify_table+0xb4>
   11234:	ldr	r0, [sp, #8]
   11238:	movw	r1, #1
   1123c:	uxth	r1, r1
   11240:	movw	r2, #0
   11244:	movw	r3, #0
   11248:	movt	r3, #0
   1124c:	bl	0 <flatcc_verify_table_field>
   11250:	str	r0, [sp, #4]
   11254:	cmp	r0, #0
   11258:	beq	11268 <MyGame_Example_TestJSONPrefix_verify_table+0x78>
   1125c:	ldr	r0, [sp, #4]
   11260:	str	r0, [fp, #-4]
   11264:	b	112a4 <MyGame_Example_TestJSONPrefix_verify_table+0xb4>
   11268:	ldr	r0, [sp, #8]
   1126c:	movw	r1, #2
   11270:	uxth	r1, r1
   11274:	movw	r2, #0
   11278:	movw	r3, #0
   1127c:	movt	r3, #0
   11280:	bl	0 <flatcc_verify_table_field>
   11284:	str	r0, [sp, #4]
   11288:	cmp	r0, #0
   1128c:	beq	1129c <MyGame_Example_TestJSONPrefix_verify_table+0xac>
   11290:	ldr	r0, [sp, #4]
   11294:	str	r0, [fp, #-4]
   11298:	b	112a4 <MyGame_Example_TestJSONPrefix_verify_table+0xb4>
   1129c:	movw	r0, #0
   112a0:	str	r0, [fp, #-4]
   112a4:	ldr	r0, [fp, #-4]
   112a8:	mov	sp, fp
   112ac:	pop	{fp, pc}

000112b0 <Fantasy_Movie_verify_table>:
   112b0:	push	{fp, lr}
   112b4:	mov	fp, sp
   112b8:	sub	sp, sp, #16
   112bc:	str	r0, [sp, #8]
   112c0:	ldr	r0, [sp, #8]
   112c4:	movw	r1, #1
   112c8:	uxth	r1, r1
   112cc:	movw	r2, #0
   112d0:	movw	r3, #0
   112d4:	movt	r3, #0
   112d8:	bl	0 <flatcc_verify_union_field>
   112dc:	str	r0, [sp, #4]
   112e0:	cmp	r0, #0
   112e4:	beq	112f4 <Fantasy_Movie_verify_table+0x44>
   112e8:	ldr	r0, [sp, #4]
   112ec:	str	r0, [fp, #-4]
   112f0:	b	113cc <Fantasy_Movie_verify_table+0x11c>
   112f4:	ldr	r0, [sp, #8]
   112f8:	movw	r1, #3
   112fc:	uxth	r1, r1
   11300:	movw	r2, #0
   11304:	movw	r3, #0
   11308:	movt	r3, #0
   1130c:	bl	0 <flatcc_verify_union_field>
   11310:	str	r0, [sp, #4]
   11314:	cmp	r0, #0
   11318:	beq	11328 <Fantasy_Movie_verify_table+0x78>
   1131c:	ldr	r0, [sp, #4]
   11320:	str	r0, [fp, #-4]
   11324:	b	113cc <Fantasy_Movie_verify_table+0x11c>
   11328:	ldr	r0, [sp, #8]
   1132c:	movw	r1, #5
   11330:	uxth	r1, r1
   11334:	movw	r2, #0
   11338:	movw	r3, #0
   1133c:	movt	r3, #0
   11340:	bl	0 <flatcc_verify_union_field>
   11344:	str	r0, [sp, #4]
   11348:	cmp	r0, #0
   1134c:	beq	1135c <Fantasy_Movie_verify_table+0xac>
   11350:	ldr	r0, [sp, #4]
   11354:	str	r0, [fp, #-4]
   11358:	b	113cc <Fantasy_Movie_verify_table+0x11c>
   1135c:	ldr	r0, [sp, #8]
   11360:	movw	r1, #7
   11364:	uxth	r1, r1
   11368:	movw	r2, #0
   1136c:	movw	r3, #0
   11370:	movt	r3, #0
   11374:	bl	0 <flatcc_verify_union_field>
   11378:	str	r0, [sp, #4]
   1137c:	cmp	r0, #0
   11380:	beq	11390 <Fantasy_Movie_verify_table+0xe0>
   11384:	ldr	r0, [sp, #4]
   11388:	str	r0, [fp, #-4]
   1138c:	b	113cc <Fantasy_Movie_verify_table+0x11c>
   11390:	ldr	r0, [sp, #8]
   11394:	movw	r1, #9
   11398:	uxth	r1, r1
   1139c:	movw	r2, #0
   113a0:	movw	r3, #0
   113a4:	movt	r3, #0
   113a8:	bl	0 <flatcc_verify_union_vector_field>
   113ac:	str	r0, [sp, #4]
   113b0:	cmp	r0, #0
   113b4:	beq	113c4 <Fantasy_Movie_verify_table+0x114>
   113b8:	ldr	r0, [sp, #4]
   113bc:	str	r0, [fp, #-4]
   113c0:	b	113cc <Fantasy_Movie_verify_table+0x11c>
   113c4:	movw	r0, #0
   113c8:	str	r0, [fp, #-4]
   113cc:	ldr	r0, [fp, #-4]
   113d0:	mov	sp, fp
   113d4:	pop	{fp, pc}

000113d8 <MyGame_Example_TestJSONPrefixParsing_verify_table>:
   113d8:	push	{fp, lr}
   113dc:	mov	fp, sp
   113e0:	sub	sp, sp, #16
   113e4:	str	r0, [sp, #8]
   113e8:	ldr	r0, [sp, #8]
   113ec:	movw	r1, #0
   113f0:	uxth	r1, r1
   113f4:	movw	r2, #0
   113f8:	bl	0 <flatcc_verify_string_field>
   113fc:	str	r0, [sp, #4]
   11400:	cmp	r0, #0
   11404:	beq	11414 <MyGame_Example_TestJSONPrefixParsing_verify_table+0x3c>
   11408:	ldr	r0, [sp, #4]
   1140c:	str	r0, [fp, #-4]
   11410:	b	115ac <MyGame_Example_TestJSONPrefixParsing_verify_table+0x1d4>
   11414:	ldr	r0, [sp, #8]
   11418:	movw	r1, #1
   1141c:	uxth	r1, r1
   11420:	movw	r2, #4
   11424:	movw	r3, #4
   11428:	uxth	r3, r3
   1142c:	bl	0 <flatcc_verify_field>
   11430:	str	r0, [sp, #4]
   11434:	cmp	r0, #0
   11438:	beq	11448 <MyGame_Example_TestJSONPrefixParsing_verify_table+0x70>
   1143c:	ldr	r0, [sp, #4]
   11440:	str	r0, [fp, #-4]
   11444:	b	115ac <MyGame_Example_TestJSONPrefixParsing_verify_table+0x1d4>
   11448:	ldr	r0, [sp, #8]
   1144c:	movw	r1, #2
   11450:	uxth	r1, r1
   11454:	movw	r2, #0
   11458:	bl	0 <flatcc_verify_string_field>
   1145c:	str	r0, [sp, #4]
   11460:	cmp	r0, #0
   11464:	beq	11474 <MyGame_Example_TestJSONPrefixParsing_verify_table+0x9c>
   11468:	ldr	r0, [sp, #4]
   1146c:	str	r0, [fp, #-4]
   11470:	b	115ac <MyGame_Example_TestJSONPrefixParsing_verify_table+0x1d4>
   11474:	ldr	r0, [sp, #8]
   11478:	movw	r1, #3
   1147c:	uxth	r1, r1
   11480:	movw	r2, #8
   11484:	movw	r3, #8
   11488:	uxth	r3, r3
   1148c:	bl	0 <flatcc_verify_field>
   11490:	str	r0, [sp, #4]
   11494:	cmp	r0, #0
   11498:	beq	114a8 <MyGame_Example_TestJSONPrefixParsing_verify_table+0xd0>
   1149c:	ldr	r0, [sp, #4]
   114a0:	str	r0, [fp, #-4]
   114a4:	b	115ac <MyGame_Example_TestJSONPrefixParsing_verify_table+0x1d4>
   114a8:	ldr	r0, [sp, #8]
   114ac:	movw	r1, #4
   114b0:	uxth	r1, r1
   114b4:	movw	r2, #0
   114b8:	bl	0 <flatcc_verify_string_field>
   114bc:	str	r0, [sp, #4]
   114c0:	cmp	r0, #0
   114c4:	beq	114d4 <MyGame_Example_TestJSONPrefixParsing_verify_table+0xfc>
   114c8:	ldr	r0, [sp, #4]
   114cc:	str	r0, [fp, #-4]
   114d0:	b	115ac <MyGame_Example_TestJSONPrefixParsing_verify_table+0x1d4>
   114d4:	ldr	r0, [sp, #8]
   114d8:	movw	r1, #5
   114dc:	uxth	r1, r1
   114e0:	movw	r2, #8
   114e4:	movw	r3, #8
   114e8:	uxth	r3, r3
   114ec:	bl	0 <flatcc_verify_field>
   114f0:	str	r0, [sp, #4]
   114f4:	cmp	r0, #0
   114f8:	beq	11508 <MyGame_Example_TestJSONPrefixParsing_verify_table+0x130>
   114fc:	ldr	r0, [sp, #4]
   11500:	str	r0, [fp, #-4]
   11504:	b	115ac <MyGame_Example_TestJSONPrefixParsing_verify_table+0x1d4>
   11508:	ldr	r0, [sp, #8]
   1150c:	movw	r1, #6
   11510:	uxth	r1, r1
   11514:	movw	r2, #4
   11518:	movw	r3, #4
   1151c:	uxth	r3, r3
   11520:	bl	0 <flatcc_verify_field>
   11524:	str	r0, [sp, #4]
   11528:	cmp	r0, #0
   1152c:	beq	1153c <MyGame_Example_TestJSONPrefixParsing_verify_table+0x164>
   11530:	ldr	r0, [sp, #4]
   11534:	str	r0, [fp, #-4]
   11538:	b	115ac <MyGame_Example_TestJSONPrefixParsing_verify_table+0x1d4>
   1153c:	ldr	r0, [sp, #8]
   11540:	movw	r1, #7
   11544:	uxth	r1, r1
   11548:	movw	r2, #8
   1154c:	movw	r3, #8
   11550:	uxth	r3, r3
   11554:	bl	0 <flatcc_verify_field>
   11558:	str	r0, [sp, #4]
   1155c:	cmp	r0, #0
   11560:	beq	11570 <MyGame_Example_TestJSONPrefixParsing_verify_table+0x198>
   11564:	ldr	r0, [sp, #4]
   11568:	str	r0, [fp, #-4]
   1156c:	b	115ac <MyGame_Example_TestJSONPrefixParsing_verify_table+0x1d4>
   11570:	ldr	r0, [sp, #8]
   11574:	movw	r1, #8
   11578:	uxth	r1, r1
   1157c:	movw	r2, #4
   11580:	movw	r3, #4
   11584:	uxth	r3, r3
   11588:	bl	0 <flatcc_verify_field>
   1158c:	str	r0, [sp, #4]
   11590:	cmp	r0, #0
   11594:	beq	115a4 <MyGame_Example_TestJSONPrefixParsing_verify_table+0x1cc>
   11598:	ldr	r0, [sp, #4]
   1159c:	str	r0, [fp, #-4]
   115a0:	b	115ac <MyGame_Example_TestJSONPrefixParsing_verify_table+0x1d4>
   115a4:	movw	r0, #0
   115a8:	str	r0, [fp, #-4]
   115ac:	ldr	r0, [fp, #-4]
   115b0:	mov	sp, fp
   115b4:	pop	{fp, pc}

000115b8 <MyGame_Example_TestJSONPrefixParsing2_verify_table>:
   115b8:	push	{fp, lr}
   115bc:	mov	fp, sp
   115c0:	sub	sp, sp, #16
   115c4:	str	r0, [sp, #8]
   115c8:	ldr	r0, [sp, #8]
   115cc:	movw	r1, #0
   115d0:	uxth	r1, r1
   115d4:	movw	r2, #8
   115d8:	movw	r3, #8
   115dc:	uxth	r3, r3
   115e0:	bl	0 <flatcc_verify_field>
   115e4:	str	r0, [sp, #4]
   115e8:	cmp	r0, #0
   115ec:	beq	115fc <MyGame_Example_TestJSONPrefixParsing2_verify_table+0x44>
   115f0:	ldr	r0, [sp, #4]
   115f4:	str	r0, [fp, #-4]
   115f8:	b	11638 <MyGame_Example_TestJSONPrefixParsing2_verify_table+0x80>
   115fc:	ldr	r0, [sp, #8]
   11600:	movw	r1, #1
   11604:	uxth	r1, r1
   11608:	movw	r2, #4
   1160c:	movw	r3, #4
   11610:	uxth	r3, r3
   11614:	bl	0 <flatcc_verify_field>
   11618:	str	r0, [sp, #4]
   1161c:	cmp	r0, #0
   11620:	beq	11630 <MyGame_Example_TestJSONPrefixParsing2_verify_table+0x78>
   11624:	ldr	r0, [sp, #4]
   11628:	str	r0, [fp, #-4]
   1162c:	b	11638 <MyGame_Example_TestJSONPrefixParsing2_verify_table+0x80>
   11630:	movw	r0, #0
   11634:	str	r0, [fp, #-4]
   11638:	ldr	r0, [fp, #-4]
   1163c:	mov	sp, fp
   11640:	pop	{fp, pc}

00011644 <MyGame_Example_TestJSONPrefixParsing3_verify_table>:
   11644:	push	{fp, lr}
   11648:	mov	fp, sp
   1164c:	sub	sp, sp, #16
   11650:	str	r0, [sp, #8]
   11654:	ldr	r0, [sp, #8]
   11658:	movw	r1, #0
   1165c:	uxth	r1, r1
   11660:	movw	r2, #8
   11664:	movw	r3, #8
   11668:	uxth	r3, r3
   1166c:	bl	0 <flatcc_verify_field>
   11670:	str	r0, [sp, #4]
   11674:	cmp	r0, #0
   11678:	beq	11688 <MyGame_Example_TestJSONPrefixParsing3_verify_table+0x44>
   1167c:	ldr	r0, [sp, #4]
   11680:	str	r0, [fp, #-4]
   11684:	b	116c4 <MyGame_Example_TestJSONPrefixParsing3_verify_table+0x80>
   11688:	ldr	r0, [sp, #8]
   1168c:	movw	r1, #1
   11690:	uxth	r1, r1
   11694:	movw	r2, #4
   11698:	movw	r3, #4
   1169c:	uxth	r3, r3
   116a0:	bl	0 <flatcc_verify_field>
   116a4:	str	r0, [sp, #4]
   116a8:	cmp	r0, #0
   116ac:	beq	116bc <MyGame_Example_TestJSONPrefixParsing3_verify_table+0x78>
   116b0:	ldr	r0, [sp, #4]
   116b4:	str	r0, [fp, #-4]
   116b8:	b	116c4 <MyGame_Example_TestJSONPrefixParsing3_verify_table+0x80>
   116bc:	movw	r0, #0
   116c0:	str	r0, [fp, #-4]
   116c4:	ldr	r0, [fp, #-4]
   116c8:	mov	sp, fp
   116cc:	pop	{fp, pc}

000116d0 <Fantasy_Character_union_verifier>:
   116d0:	push	{fp, lr}
   116d4:	mov	fp, sp
   116d8:	sub	sp, sp, #16
   116dc:	str	r0, [sp, #8]
   116e0:	ldr	r0, [sp, #8]
   116e4:	ldrb	r0, [r0, #12]
   116e8:	mov	r1, r0
   116ec:	cmp	r0, #2
   116f0:	str	r1, [sp, #4]
   116f4:	beq	1174c <Fantasy_Character_union_verifier+0x7c>
   116f8:	b	116fc <Fantasy_Character_union_verifier+0x2c>
   116fc:	ldr	r0, [sp, #4]
   11700:	cmp	r0, #8
   11704:	beq	11764 <Fantasy_Character_union_verifier+0x94>
   11708:	b	1170c <Fantasy_Character_union_verifier+0x3c>
   1170c:	ldr	r0, [sp, #4]
   11710:	cmp	r0, #9
   11714:	beq	11780 <Fantasy_Character_union_verifier+0xb0>
   11718:	b	1171c <Fantasy_Character_union_verifier+0x4c>
   1171c:	ldr	r0, [sp, #4]
   11720:	cmp	r0, #10
   11724:	beq	1179c <Fantasy_Character_union_verifier+0xcc>
   11728:	b	1172c <Fantasy_Character_union_verifier+0x5c>
   1172c:	ldr	r0, [sp, #4]
   11730:	cmp	r0, #11
   11734:	beq	117b8 <Fantasy_Character_union_verifier+0xe8>
   11738:	b	1173c <Fantasy_Character_union_verifier+0x6c>
   1173c:	ldr	r0, [sp, #4]
   11740:	cmp	r0, #255	; 0xff
   11744:	beq	117c8 <Fantasy_Character_union_verifier+0xf8>
   11748:	b	117d8 <Fantasy_Character_union_verifier+0x108>
   1174c:	ldr	r0, [sp, #8]
   11750:	movw	r1, #0
   11754:	movt	r1, #0
   11758:	bl	0 <flatcc_verify_union_table>
   1175c:	str	r0, [fp, #-4]
   11760:	b	117e0 <Fantasy_Character_union_verifier+0x110>
   11764:	ldr	r0, [sp, #8]
   11768:	movw	r1, #2
   1176c:	movw	r2, #2
   11770:	uxth	r2, r2
   11774:	bl	0 <flatcc_verify_union_struct>
   11778:	str	r0, [fp, #-4]
   1177c:	b	117e0 <Fantasy_Character_union_verifier+0x110>
   11780:	ldr	r0, [sp, #8]
   11784:	movw	r1, #4
   11788:	movw	r2, #4
   1178c:	uxth	r2, r2
   11790:	bl	0 <flatcc_verify_union_struct>
   11794:	str	r0, [fp, #-4]
   11798:	b	117e0 <Fantasy_Character_union_verifier+0x110>
   1179c:	ldr	r0, [sp, #8]
   117a0:	movw	r1, #4
   117a4:	movw	r2, #4
   117a8:	uxth	r2, r2
   117ac:	bl	0 <flatcc_verify_union_struct>
   117b0:	str	r0, [fp, #-4]
   117b4:	b	117e0 <Fantasy_Character_union_verifier+0x110>
   117b8:	ldr	r0, [sp, #8]
   117bc:	bl	0 <flatcc_verify_union_string>
   117c0:	str	r0, [fp, #-4]
   117c4:	b	117e0 <Fantasy_Character_union_verifier+0x110>
   117c8:	ldr	r0, [sp, #8]
   117cc:	bl	0 <flatcc_verify_union_string>
   117d0:	str	r0, [fp, #-4]
   117d4:	b	117e0 <Fantasy_Character_union_verifier+0x110>
   117d8:	movw	r0, #0
   117dc:	str	r0, [fp, #-4]
   117e0:	ldr	r0, [fp, #-4]
   117e4:	mov	sp, fp
   117e8:	pop	{fp, pc}

000117ec <Fantasy_Attacker_verify_table>:
   117ec:	push	{fp, lr}
   117f0:	mov	fp, sp
   117f4:	sub	sp, sp, #16
   117f8:	str	r0, [sp, #8]
   117fc:	ldr	r0, [sp, #8]
   11800:	movw	r1, #0
   11804:	uxth	r1, r1
   11808:	movw	r2, #4
   1180c:	movw	r3, #4
   11810:	uxth	r3, r3
   11814:	bl	0 <flatcc_verify_field>
   11818:	str	r0, [sp, #4]
   1181c:	cmp	r0, #0
   11820:	beq	11830 <Fantasy_Attacker_verify_table+0x44>
   11824:	ldr	r0, [sp, #4]
   11828:	str	r0, [fp, #-4]
   1182c:	b	11838 <Fantasy_Attacker_verify_table+0x4c>
   11830:	movw	r0, #0
   11834:	str	r0, [fp, #-4]
   11838:	ldr	r0, [fp, #-4]
   1183c:	mov	sp, fp
   11840:	pop	{fp, pc}

00011844 <__flatbuffers_thash_read_from_pe>:
   11844:	push	{fp, lr}
   11848:	mov	fp, sp
   1184c:	sub	sp, sp, #8
   11850:	str	r0, [sp, #4]
   11854:	ldr	r0, [sp, #4]
   11858:	ldr	r0, [r0]
   1185c:	bl	11868 <__flatbuffers_thash_cast_from_pe>
   11860:	mov	sp, fp
   11864:	pop	{fp, pc}

00011868 <__flatbuffers_thash_cast_from_pe>:
   11868:	sub	sp, sp, #4
   1186c:	str	r0, [sp]
   11870:	ldr	r0, [sp]
   11874:	add	sp, sp, #4
   11878:	bx	lr

0001187c <MyGame_Example_emptystruct__size>:
   1187c:	movw	r0, #0
   11880:	bx	lr

00011884 <MyGame_Example_with_emptystruct_create>:
   11884:	push	{fp, lr}
   11888:	mov	fp, sp
   1188c:	sub	sp, sp, #16
   11890:	str	r0, [sp, #8]
   11894:	str	r1, [sp, #4]
   11898:	ldr	r0, [sp, #8]
   1189c:	bl	118e0 <MyGame_Example_with_emptystruct_start>
   118a0:	cmp	r0, #0
   118a4:	bne	118bc <MyGame_Example_with_emptystruct_create+0x38>
   118a8:	ldr	r0, [sp, #8]
   118ac:	ldr	r1, [sp, #4]
   118b0:	bl	11904 <MyGame_Example_with_emptystruct_empty_add>
   118b4:	cmp	r0, #0
   118b8:	beq	118c8 <MyGame_Example_with_emptystruct_create+0x44>
   118bc:	movw	r0, #0
   118c0:	str	r0, [fp, #-4]
   118c4:	b	118d4 <MyGame_Example_with_emptystruct_create+0x50>
   118c8:	ldr	r0, [sp, #8]
   118cc:	bl	11960 <MyGame_Example_with_emptystruct_end>
   118d0:	str	r0, [fp, #-4]
   118d4:	ldr	r0, [fp, #-4]
   118d8:	mov	sp, fp
   118dc:	pop	{fp, pc}

000118e0 <MyGame_Example_with_emptystruct_start>:
   118e0:	push	{fp, lr}
   118e4:	mov	fp, sp
   118e8:	sub	sp, sp, #8
   118ec:	str	r0, [sp, #4]
   118f0:	ldr	r0, [sp, #4]
   118f4:	movw	r1, #1
   118f8:	bl	0 <flatcc_builder_start_table>
   118fc:	mov	sp, fp
   11900:	pop	{fp, pc}

00011904 <MyGame_Example_with_emptystruct_empty_add>:
   11904:	push	{fp, lr}
   11908:	mov	fp, sp
   1190c:	sub	sp, sp, #16
   11910:	str	r0, [sp, #8]
   11914:	str	r1, [sp, #4]
   11918:	ldr	r0, [sp, #8]
   1191c:	bl	119c0 <MyGame_Example_with_emptystruct_empty_start>
   11920:	str	r0, [sp]
   11924:	ldr	r0, [sp]
   11928:	movw	r1, #0
   1192c:	cmp	r0, r1
   11930:	bne	11940 <MyGame_Example_with_emptystruct_empty_add+0x3c>
   11934:	mvn	r0, #0
   11938:	str	r0, [fp, #-4]
   1193c:	b	11954 <MyGame_Example_with_emptystruct_empty_add+0x50>
   11940:	ldr	r0, [sp]
   11944:	ldr	r1, [sp, #4]
   11948:	bl	119f4 <MyGame_Example_emptystruct_copy_to_pe>
   1194c:	movw	r1, #0
   11950:	str	r1, [fp, #-4]
   11954:	ldr	r0, [fp, #-4]
   11958:	mov	sp, fp
   1195c:	pop	{fp, pc}

00011960 <MyGame_Example_with_emptystruct_end>:
   11960:	push	{fp, lr}
   11964:	mov	fp, sp
   11968:	sub	sp, sp, #8
   1196c:	str	r0, [sp, #4]
   11970:	ldr	r0, [sp, #4]
   11974:	movw	r1, #0
   11978:	movt	r1, #0
   1197c:	movw	r2, #0
   11980:	bl	0 <flatcc_builder_check_required>
   11984:	cmp	r0, #0
   11988:	beq	11990 <MyGame_Example_with_emptystruct_end+0x30>
   1198c:	b	119b0 <MyGame_Example_with_emptystruct_end+0x50>
   11990:	movw	r0, #0
   11994:	movt	r0, #0
   11998:	movw	r1, #0
   1199c:	movt	r1, #0
   119a0:	movw	r2, #215	; 0xd7
   119a4:	movw	r3, #0
   119a8:	movt	r3, #0
   119ac:	bl	0 <__assert_fail>
   119b0:	ldr	r0, [sp, #4]
   119b4:	bl	0 <flatcc_builder_end_table>
   119b8:	mov	sp, fp
   119bc:	pop	{fp, pc}

000119c0 <MyGame_Example_with_emptystruct_empty_start>:
   119c0:	push	{fp, lr}
   119c4:	mov	fp, sp
   119c8:	sub	sp, sp, #8
   119cc:	str	r0, [sp, #4]
   119d0:	ldr	r0, [sp, #4]
   119d4:	movw	r1, #0
   119d8:	str	r1, [sp]
   119dc:	ldr	r2, [sp]
   119e0:	movw	r3, #1
   119e4:	uxth	r3, r3
   119e8:	bl	0 <flatcc_builder_table_add>
   119ec:	mov	sp, fp
   119f0:	pop	{fp, pc}

000119f4 <MyGame_Example_emptystruct_copy_to_pe>:
   119f4:	sub	sp, sp, #8
   119f8:	str	r0, [sp, #4]
   119fc:	str	r1, [sp]
   11a00:	ldr	r0, [sp, #4]
   11a04:	add	sp, sp, #8
   11a08:	bx	lr

00011a0c <MyGame_Example_with_emptystruct_verify_table>:
   11a0c:	push	{fp, lr}
   11a10:	mov	fp, sp
   11a14:	sub	sp, sp, #16
   11a18:	str	r0, [sp, #8]
   11a1c:	ldr	r0, [sp, #8]
   11a20:	movw	r1, #0
   11a24:	uxth	r1, r1
   11a28:	movw	r2, #0
   11a2c:	movw	r3, #1
   11a30:	uxth	r3, r3
   11a34:	bl	0 <flatcc_verify_field>
   11a38:	str	r0, [sp, #4]
   11a3c:	cmp	r0, #0
   11a40:	beq	11a50 <MyGame_Example_with_emptystruct_verify_table+0x44>
   11a44:	ldr	r0, [sp, #4]
   11a48:	str	r0, [fp, #-4]
   11a4c:	b	11a58 <MyGame_Example_with_emptystruct_verify_table+0x4c>
   11a50:	movw	r0, #0
   11a54:	str	r0, [fp, #-4]
   11a58:	ldr	r0, [fp, #-4]
   11a5c:	mov	sp, fp
   11a60:	pop	{fp, pc}

00011a64 <__flatbuffers_thash_cast_from_le>:
   11a64:	sub	sp, sp, #4
   11a68:	str	r0, [sp]
   11a6c:	ldr	r0, [sp]
   11a70:	add	sp, sp, #4
   11a74:	bx	lr

00011a78 <MyGame_Example_Vec3__size>:
   11a78:	movw	r0, #32
   11a7c:	bx	lr

00011a80 <flatbuffers_float_copy_from_pe>:
   11a80:	push	{fp, lr}
   11a84:	mov	fp, sp
   11a88:	sub	sp, sp, #8
   11a8c:	str	r0, [sp, #4]
   11a90:	str	r1, [sp]
   11a94:	ldr	r0, [sp]
   11a98:	vldr	s0, [r0]
   11a9c:	bl	10554 <flatbuffers_float_cast_from_pe>
   11aa0:	ldr	r0, [sp, #4]
   11aa4:	vstr	s0, [r0]
   11aa8:	ldr	r0, [sp, #4]
   11aac:	mov	sp, fp
   11ab0:	pop	{fp, pc}

00011ab4 <flatbuffers_double_copy_from_pe>:
   11ab4:	push	{fp, lr}
   11ab8:	mov	fp, sp
   11abc:	sub	sp, sp, #8
   11ac0:	str	r0, [sp, #4]
   11ac4:	str	r1, [sp]
   11ac8:	ldr	r0, [sp]
   11acc:	vldr	d0, [r0]
   11ad0:	bl	1059c <flatbuffers_double_cast_from_pe>
   11ad4:	ldr	r0, [sp, #4]
   11ad8:	vstr	d0, [r0]
   11adc:	ldr	r0, [sp, #4]
   11ae0:	mov	sp, fp
   11ae4:	pop	{fp, pc}

00011ae8 <MyGame_Example_Test_copy_from_pe>:
   11ae8:	push	{fp, lr}
   11aec:	mov	fp, sp
   11af0:	sub	sp, sp, #16
   11af4:	str	r0, [fp, #-4]
   11af8:	str	r1, [sp, #8]
   11afc:	ldr	r0, [fp, #-4]
   11b00:	ldr	r1, [sp, #8]
   11b04:	bl	11b2c <flatbuffers_int16_copy_from_pe>
   11b08:	ldr	r1, [sp, #8]
   11b0c:	ldrb	r1, [r1, #2]
   11b10:	ldr	r2, [fp, #-4]
   11b14:	strb	r1, [r2, #2]
   11b18:	ldr	r1, [fp, #-4]
   11b1c:	str	r0, [sp, #4]
   11b20:	mov	r0, r1
   11b24:	mov	sp, fp
   11b28:	pop	{fp, pc}

00011b2c <flatbuffers_int16_copy_from_pe>:
   11b2c:	push	{fp, lr}
   11b30:	mov	fp, sp
   11b34:	sub	sp, sp, #8
   11b38:	str	r0, [sp, #4]
   11b3c:	str	r1, [sp]
   11b40:	ldr	r0, [sp]
   11b44:	ldrsh	r0, [r0]
   11b48:	bl	f564 <flatbuffers_int16_cast_from_pe>
   11b4c:	ldr	r1, [sp, #4]
   11b50:	strh	r0, [r1]
   11b54:	ldr	r0, [sp, #4]
   11b58:	mov	sp, fp
   11b5c:	pop	{fp, pc}

00011b60 <MyGame_Example_Color_read_from_pe>:
   11b60:	push	{fp, lr}
   11b64:	mov	fp, sp
   11b68:	sub	sp, sp, #8
   11b6c:	str	r0, [sp, #4]
   11b70:	ldr	r0, [sp, #4]
   11b74:	ldrsb	r0, [r0]
   11b78:	bl	11b88 <MyGame_Example_Color_cast_from_pe>
   11b7c:	sxtb	r0, r0
   11b80:	mov	sp, fp
   11b84:	pop	{fp, pc}

00011b88 <MyGame_Example_Color_cast_from_pe>:
   11b88:	sub	sp, sp, #4
   11b8c:	strb	r0, [sp, #3]
   11b90:	ldrsb	r0, [sp, #3]
   11b94:	add	sp, sp, #4
   11b98:	bx	lr

00011b9c <flatbuffers_vec_len>:
   11b9c:	push	{fp, lr}
   11ba0:	mov	fp, sp
   11ba4:	sub	sp, sp, #8
   11ba8:	str	r0, [sp, #4]
   11bac:	ldr	r0, [sp, #4]
   11bb0:	movw	r1, #0
   11bb4:	cmp	r0, r1
   11bb8:	beq	11bd4 <flatbuffers_vec_len+0x38>
   11bbc:	ldr	r0, [sp, #4]
   11bc0:	mvn	r1, #3
   11bc4:	add	r0, r0, r1
   11bc8:	bl	f490 <__flatbuffers_uoffset_read_from_pe>
   11bcc:	str	r0, [sp]
   11bd0:	b	11be0 <flatbuffers_vec_len+0x44>
   11bd4:	movw	r0, #0
   11bd8:	str	r0, [sp]
   11bdc:	b	11be0 <flatbuffers_vec_len+0x44>
   11be0:	ldr	r0, [sp]
   11be4:	mov	sp, fp
   11be8:	pop	{fp, pc}

00011bec <flatbuffers_bool_read_from_pe>:
   11bec:	push	{fp, lr}
   11bf0:	mov	fp, sp
   11bf4:	sub	sp, sp, #8
   11bf8:	str	r0, [sp, #4]
   11bfc:	ldr	r0, [sp, #4]
   11c00:	ldrb	r0, [r0]
   11c04:	bl	11c14 <flatbuffers_bool_cast_from_pe>
   11c08:	and	r0, r0, #255	; 0xff
   11c0c:	mov	sp, fp
   11c10:	pop	{fp, pc}

00011c14 <flatbuffers_bool_cast_from_pe>:
   11c14:	sub	sp, sp, #4
   11c18:	strb	r0, [sp, #3]
   11c1c:	ldrb	r0, [sp, #3]
   11c20:	add	sp, sp, #4
   11c24:	bx	lr

00011c28 <__flatbuffers_utype_read_from_pe>:
   11c28:	push	{fp, lr}
   11c2c:	mov	fp, sp
   11c30:	sub	sp, sp, #8
   11c34:	str	r0, [sp, #4]
   11c38:	ldr	r0, [sp, #4]
   11c3c:	ldrb	r0, [r0]
   11c40:	bl	11c50 <__flatbuffers_utype_cast_from_pe>
   11c44:	and	r0, r0, #255	; 0xff
   11c48:	mov	sp, fp
   11c4c:	pop	{fp, pc}

00011c50 <__flatbuffers_utype_cast_from_pe>:
   11c50:	sub	sp, sp, #4
   11c54:	strb	r0, [sp, #3]
   11c58:	ldrb	r0, [sp, #3]
   11c5c:	add	sp, sp, #4
   11c60:	bx	lr

00011c64 <flatbuffers_buffer_start_with_size>:
   11c64:	push	{fp, lr}
   11c68:	mov	fp, sp
   11c6c:	sub	sp, sp, #8
   11c70:	str	r0, [sp, #4]
   11c74:	str	r1, [sp]
   11c78:	ldr	r0, [sp, #4]
   11c7c:	ldr	r1, [sp]
   11c80:	movw	r2, #0
   11c84:	uxth	r2, r2
   11c88:	movw	r3, #2
   11c8c:	bl	0 <flatcc_builder_start_buffer>
   11c90:	mov	sp, fp
   11c94:	pop	{fp, pc}

00011c98 <MyGame_Example_Color_assign_to_pe>:
   11c98:	push	{fp, lr}
   11c9c:	mov	fp, sp
   11ca0:	sub	sp, sp, #8
   11ca4:	str	r0, [sp, #4]
   11ca8:	strb	r1, [sp, #3]
   11cac:	ldrsb	r0, [sp, #3]
   11cb0:	bl	11cc8 <MyGame_Example_Color_cast_to_pe>
   11cb4:	ldr	r1, [sp, #4]
   11cb8:	strb	r0, [r1]
   11cbc:	ldr	r0, [sp, #4]
   11cc0:	mov	sp, fp
   11cc4:	pop	{fp, pc}

00011cc8 <MyGame_Example_Color_cast_to_pe>:
   11cc8:	sub	sp, sp, #4
   11ccc:	strb	r0, [sp, #3]
   11cd0:	ldrsb	r0, [sp, #3]
   11cd4:	add	sp, sp, #4
   11cd8:	bx	lr

00011cdc <MyGame_Example_Monster_inventory_add>:
   11cdc:	push	{fp, lr}
   11ce0:	mov	fp, sp
   11ce4:	sub	sp, sp, #16
   11ce8:	str	r0, [fp, #-4]
   11cec:	str	r1, [sp, #8]
   11cf0:	ldr	r0, [sp, #8]
   11cf4:	cmp	r0, #0
   11cf8:	beq	11d30 <MyGame_Example_Monster_inventory_add+0x54>
   11cfc:	ldr	r0, [fp, #-4]
   11d00:	movw	r1, #5
   11d04:	bl	0 <flatcc_builder_table_add_offset>
   11d08:	str	r0, [sp, #4]
   11d0c:	movw	r1, #0
   11d10:	cmp	r0, r1
   11d14:	beq	11d30 <MyGame_Example_Monster_inventory_add+0x54>
   11d18:	ldr	r0, [sp, #8]
   11d1c:	ldr	r1, [sp, #4]
   11d20:	str	r0, [r1]
   11d24:	movw	r0, #0
   11d28:	str	r0, [sp]
   11d2c:	b	11d3c <MyGame_Example_Monster_inventory_add+0x60>
   11d30:	mvn	r0, #0
   11d34:	str	r0, [sp]
   11d38:	b	11d3c <MyGame_Example_Monster_inventory_add+0x60>
   11d3c:	ldr	r0, [sp]
   11d40:	mov	sp, fp
   11d44:	pop	{fp, pc}

00011d48 <MyGame_Example_Test_vec_start>:
   11d48:	push	{fp, lr}
   11d4c:	mov	fp, sp
   11d50:	sub	sp, sp, #8
   11d54:	ldr	r3, [pc, #28]	; 11d78 <MyGame_Example_Test_vec_start+0x30>
   11d58:	str	r0, [sp, #4]
   11d5c:	ldr	r0, [sp, #4]
   11d60:	movw	r1, #4
   11d64:	movw	r2, #2
   11d68:	uxth	r2, r2
   11d6c:	bl	0 <flatcc_builder_start_vector>
   11d70:	mov	sp, fp
   11d74:	pop	{fp, pc}
   11d78:	.word	0x3fffffff

00011d7c <MyGame_Example_Test_assign>:
   11d7c:	sub	sp, sp, #8
   11d80:	str	r0, [sp, #4]
   11d84:	strh	r1, [sp, #2]
   11d88:	strb	r2, [sp, #1]
   11d8c:	ldrh	r0, [sp, #2]
   11d90:	ldr	r1, [sp, #4]
   11d94:	strh	r0, [r1]
   11d98:	ldrb	r0, [sp, #1]
   11d9c:	ldr	r1, [sp, #4]
   11da0:	strb	r0, [r1, #2]
   11da4:	ldr	r0, [sp, #4]
   11da8:	add	sp, sp, #8
   11dac:	bx	lr

00011db0 <MyGame_Example_Test__size>:
   11db0:	movw	r0, #4
   11db4:	bx	lr

00011db8 <MyGame_Example_Monster_test4_add>:
   11db8:	push	{fp, lr}
   11dbc:	mov	fp, sp
   11dc0:	sub	sp, sp, #16
   11dc4:	str	r0, [fp, #-4]
   11dc8:	str	r1, [sp, #8]
   11dcc:	ldr	r0, [sp, #8]
   11dd0:	cmp	r0, #0
   11dd4:	beq	11e0c <MyGame_Example_Monster_test4_add+0x54>
   11dd8:	ldr	r0, [fp, #-4]
   11ddc:	movw	r1, #9
   11de0:	bl	0 <flatcc_builder_table_add_offset>
   11de4:	str	r0, [sp, #4]
   11de8:	movw	r1, #0
   11dec:	cmp	r0, r1
   11df0:	beq	11e0c <MyGame_Example_Monster_test4_add+0x54>
   11df4:	ldr	r0, [sp, #8]
   11df8:	ldr	r1, [sp, #4]
   11dfc:	str	r0, [r1]
   11e00:	movw	r0, #0
   11e04:	str	r0, [sp]
   11e08:	b	11e18 <MyGame_Example_Monster_test4_add+0x60>
   11e0c:	mvn	r0, #0
   11e10:	str	r0, [sp]
   11e14:	b	11e18 <MyGame_Example_Monster_test4_add+0x60>
   11e18:	ldr	r0, [sp]
   11e1c:	mov	sp, fp
   11e20:	pop	{fp, pc}

00011e24 <MyGame_Example_Test_vec_end>:
   11e24:	push	{fp, lr}
   11e28:	mov	fp, sp
   11e2c:	sub	sp, sp, #8
   11e30:	str	r0, [sp, #4]
   11e34:	ldr	r0, [sp, #4]
   11e38:	bl	0 <flatcc_builder_end_vector>
   11e3c:	mov	sp, fp
   11e40:	pop	{fp, pc}

00011e44 <MyGame_Example_Monster_testarrayoftables_push>:
   11e44:	push	{fp, lr}
   11e48:	mov	fp, sp
   11e4c:	sub	sp, sp, #16
   11e50:	str	r0, [fp, #-4]
   11e54:	str	r1, [sp, #8]
   11e58:	ldr	r0, [sp, #8]
   11e5c:	cmp	r0, #0
   11e60:	beq	11e78 <MyGame_Example_Monster_testarrayoftables_push+0x34>
   11e64:	ldr	r0, [fp, #-4]
   11e68:	ldr	r1, [sp, #8]
   11e6c:	bl	0 <flatcc_builder_offset_vector_push>
   11e70:	str	r0, [sp, #4]
   11e74:	b	11e84 <MyGame_Example_Monster_testarrayoftables_push+0x40>
   11e78:	movw	r0, #0
   11e7c:	str	r0, [sp, #4]
   11e80:	b	11e84 <MyGame_Example_Monster_testarrayoftables_push+0x40>
   11e84:	ldr	r0, [sp, #4]
   11e88:	mov	sp, fp
   11e8c:	pop	{fp, pc}

00011e90 <MyGame_Example_Monster_testarrayoftables_add>:
   11e90:	push	{fp, lr}
   11e94:	mov	fp, sp
   11e98:	sub	sp, sp, #16
   11e9c:	str	r0, [fp, #-4]
   11ea0:	str	r1, [sp, #8]
   11ea4:	ldr	r0, [sp, #8]
   11ea8:	cmp	r0, #0
   11eac:	beq	11ee4 <MyGame_Example_Monster_testarrayoftables_add+0x54>
   11eb0:	ldr	r0, [fp, #-4]
   11eb4:	movw	r1, #11
   11eb8:	bl	0 <flatcc_builder_table_add_offset>
   11ebc:	str	r0, [sp, #4]
   11ec0:	movw	r1, #0
   11ec4:	cmp	r0, r1
   11ec8:	beq	11ee4 <MyGame_Example_Monster_testarrayoftables_add+0x54>
   11ecc:	ldr	r0, [sp, #8]
   11ed0:	ldr	r1, [sp, #4]
   11ed4:	str	r0, [r1]
   11ed8:	movw	r0, #0
   11edc:	str	r0, [sp]
   11ee0:	b	11ef0 <MyGame_Example_Monster_testarrayoftables_add+0x60>
   11ee4:	mvn	r0, #0
   11ee8:	str	r0, [sp]
   11eec:	b	11ef0 <MyGame_Example_Monster_testarrayoftables_add+0x60>
   11ef0:	ldr	r0, [sp]
   11ef4:	mov	sp, fp
   11ef8:	pop	{fp, pc}

00011efc <MyGame_Example_Monster_testarrayofstring_add>:
   11efc:	push	{fp, lr}
   11f00:	mov	fp, sp
   11f04:	sub	sp, sp, #16
   11f08:	str	r0, [fp, #-4]
   11f0c:	str	r1, [sp, #8]
   11f10:	ldr	r0, [sp, #8]
   11f14:	cmp	r0, #0
   11f18:	beq	11f50 <MyGame_Example_Monster_testarrayofstring_add+0x54>
   11f1c:	ldr	r0, [fp, #-4]
   11f20:	movw	r1, #10
   11f24:	bl	0 <flatcc_builder_table_add_offset>
   11f28:	str	r0, [sp, #4]
   11f2c:	movw	r1, #0
   11f30:	cmp	r0, r1
   11f34:	beq	11f50 <MyGame_Example_Monster_testarrayofstring_add+0x54>
   11f38:	ldr	r0, [sp, #8]
   11f3c:	ldr	r1, [sp, #4]
   11f40:	str	r0, [r1]
   11f44:	movw	r0, #0
   11f48:	str	r0, [sp]
   11f4c:	b	11f5c <MyGame_Example_Monster_testarrayofstring_add+0x60>
   11f50:	mvn	r0, #0
   11f54:	str	r0, [sp]
   11f58:	b	11f5c <MyGame_Example_Monster_testarrayofstring_add+0x60>
   11f5c:	ldr	r0, [sp]
   11f60:	mov	sp, fp
   11f64:	pop	{fp, pc}

00011f68 <flatbuffers_bool_vec_start>:
   11f68:	push	{fp, lr}
   11f6c:	mov	fp, sp
   11f70:	sub	sp, sp, #8
   11f74:	str	r0, [sp, #4]
   11f78:	ldr	r0, [sp, #4]
   11f7c:	movw	r1, #1
   11f80:	movw	r2, #1
   11f84:	uxth	r2, r2
   11f88:	mvn	r3, #0
   11f8c:	bl	0 <flatcc_builder_start_vector>
   11f90:	mov	sp, fp
   11f94:	pop	{fp, pc}

00011f98 <MyGame_Example_Monster_testarrayofbools_add>:
   11f98:	push	{fp, lr}
   11f9c:	mov	fp, sp
   11fa0:	sub	sp, sp, #16
   11fa4:	str	r0, [fp, #-4]
   11fa8:	str	r1, [sp, #8]
   11fac:	ldr	r0, [sp, #8]
   11fb0:	cmp	r0, #0
   11fb4:	beq	11fec <MyGame_Example_Monster_testarrayofbools_add+0x54>
   11fb8:	ldr	r0, [fp, #-4]
   11fbc:	movw	r1, #24
   11fc0:	bl	0 <flatcc_builder_table_add_offset>
   11fc4:	str	r0, [sp, #4]
   11fc8:	movw	r1, #0
   11fcc:	cmp	r0, r1
   11fd0:	beq	11fec <MyGame_Example_Monster_testarrayofbools_add+0x54>
   11fd4:	ldr	r0, [sp, #8]
   11fd8:	ldr	r1, [sp, #4]
   11fdc:	str	r0, [r1]
   11fe0:	movw	r0, #0
   11fe4:	str	r0, [sp]
   11fe8:	b	11ff8 <MyGame_Example_Monster_testarrayofbools_add+0x60>
   11fec:	mvn	r0, #0
   11ff0:	str	r0, [sp]
   11ff4:	b	11ff8 <MyGame_Example_Monster_testarrayofbools_add+0x60>
   11ff8:	ldr	r0, [sp]
   11ffc:	mov	sp, fp
   12000:	pop	{fp, pc}

00012004 <flatbuffers_bool_vec_end>:
   12004:	push	{fp, lr}
   12008:	mov	fp, sp
   1200c:	sub	sp, sp, #8
   12010:	str	r0, [sp, #4]
   12014:	ldr	r0, [sp, #4]
   12018:	bl	0 <flatcc_builder_end_vector>
   1201c:	mov	sp, fp
   12020:	pop	{fp, pc}

00012024 <MyGame_Example_Monster_vec_push>:
   12024:	push	{fp, lr}
   12028:	mov	fp, sp
   1202c:	sub	sp, sp, #16
   12030:	str	r0, [fp, #-4]
   12034:	str	r1, [sp, #8]
   12038:	ldr	r0, [sp, #8]
   1203c:	cmp	r0, #0
   12040:	beq	12058 <MyGame_Example_Monster_vec_push+0x34>
   12044:	ldr	r0, [fp, #-4]
   12048:	ldr	r1, [sp, #8]
   1204c:	bl	0 <flatcc_builder_offset_vector_push>
   12050:	str	r0, [sp, #4]
   12054:	b	12064 <MyGame_Example_Monster_vec_push+0x40>
   12058:	movw	r0, #0
   1205c:	str	r0, [sp, #4]
   12060:	b	12064 <MyGame_Example_Monster_vec_push+0x40>
   12064:	ldr	r0, [sp, #4]
   12068:	mov	sp, fp
   1206c:	pop	{fp, pc}

00012070 <flatbuffers_bool_assign_to_pe>:
   12070:	push	{fp, lr}
   12074:	mov	fp, sp
   12078:	sub	sp, sp, #8
   1207c:	str	r0, [sp, #4]
   12080:	strb	r1, [sp, #3]
   12084:	ldrb	r0, [sp, #3]
   12088:	bl	120a0 <flatbuffers_bool_cast_to_pe>
   1208c:	ldr	r1, [sp, #4]
   12090:	strb	r0, [r1]
   12094:	ldr	r0, [sp, #4]
   12098:	mov	sp, fp
   1209c:	pop	{fp, pc}

000120a0 <flatbuffers_bool_cast_to_pe>:
   120a0:	sub	sp, sp, #4
   120a4:	strb	r0, [sp, #3]
   120a8:	ldrb	r0, [sp, #3]
   120ac:	add	sp, sp, #4
   120b0:	bx	lr

000120b4 <MyGame_Example_Stat_start>:
   120b4:	push	{fp, lr}
   120b8:	mov	fp, sp
   120bc:	sub	sp, sp, #8
   120c0:	str	r0, [sp, #4]
   120c4:	ldr	r0, [sp, #4]
   120c8:	movw	r1, #3
   120cc:	bl	0 <flatcc_builder_start_table>
   120d0:	mov	sp, fp
   120d4:	pop	{fp, pc}

000120d8 <MyGame_Example_Monster_testempty_add>:
   120d8:	push	{fp, lr}
   120dc:	mov	fp, sp
   120e0:	sub	sp, sp, #16
   120e4:	str	r0, [fp, #-4]
   120e8:	str	r1, [sp, #8]
   120ec:	ldr	r0, [sp, #8]
   120f0:	cmp	r0, #0
   120f4:	beq	1212c <MyGame_Example_Monster_testempty_add+0x54>
   120f8:	ldr	r0, [fp, #-4]
   120fc:	movw	r1, #14
   12100:	bl	0 <flatcc_builder_table_add_offset>
   12104:	str	r0, [sp, #4]
   12108:	movw	r1, #0
   1210c:	cmp	r0, r1
   12110:	beq	1212c <MyGame_Example_Monster_testempty_add+0x54>
   12114:	ldr	r0, [sp, #8]
   12118:	ldr	r1, [sp, #4]
   1211c:	str	r0, [r1]
   12120:	movw	r0, #0
   12124:	str	r0, [sp]
   12128:	b	12138 <MyGame_Example_Monster_testempty_add+0x60>
   1212c:	mvn	r0, #0
   12130:	str	r0, [sp]
   12134:	b	12138 <MyGame_Example_Monster_testempty_add+0x60>
   12138:	ldr	r0, [sp]
   1213c:	mov	sp, fp
   12140:	pop	{fp, pc}

00012144 <MyGame_Example_Stat_end>:
   12144:	push	{fp, lr}
   12148:	mov	fp, sp
   1214c:	sub	sp, sp, #8
   12150:	str	r0, [sp, #4]
   12154:	ldr	r0, [sp, #4]
   12158:	movw	r1, #0
   1215c:	movt	r1, #0
   12160:	movw	r2, #0
   12164:	bl	0 <flatcc_builder_check_required>
   12168:	cmp	r0, #0
   1216c:	beq	12174 <MyGame_Example_Stat_end+0x30>
   12170:	b	12194 <MyGame_Example_Stat_end+0x50>
   12174:	movw	r0, #0
   12178:	movt	r0, #0
   1217c:	movw	r1, #0
   12180:	movt	r1, #0
   12184:	movw	r2, #221	; 0xdd
   12188:	movw	r3, #0
   1218c:	movt	r3, #0
   12190:	bl	0 <__assert_fail>
   12194:	ldr	r0, [sp, #4]
   12198:	bl	0 <flatcc_builder_end_table>
   1219c:	mov	sp, fp
   121a0:	pop	{fp, pc}

000121a4 <__MyGame_Example_Monster_sort_by_name__heap_sort>:
   121a4:	push	{fp, lr}
   121a8:	mov	fp, sp
   121ac:	sub	sp, sp, #32
   121b0:	str	r0, [fp, #-4]
   121b4:	ldr	r0, [fp, #-4]
   121b8:	bl	4298 <MyGame_Example_Monster_vec_len>
   121bc:	str	r0, [sp, #16]
   121c0:	ldr	r0, [sp, #16]
   121c4:	cmp	r0, #0
   121c8:	bne	121d0 <__MyGame_Example_Monster_sort_by_name__heap_sort+0x2c>
   121cc:	b	122ac <__MyGame_Example_Monster_sort_by_name__heap_sort+0x108>
   121d0:	ldr	r0, [sp, #16]
   121d4:	sub	r0, r0, #1
   121d8:	str	r0, [fp, #-12]
   121dc:	ldr	r0, [sp, #16]
   121e0:	lsr	r0, r0, #1
   121e4:	str	r0, [fp, #-8]
   121e8:	ldr	r0, [fp, #-4]
   121ec:	ldr	r1, [fp, #-8]
   121f0:	ldr	r2, [fp, #-12]
   121f4:	bl	122b4 <__MyGame_Example_Monster_sort_by_name__heap_sift_down>
   121f8:	ldr	r0, [fp, #-8]
   121fc:	mvn	r1, #0
   12200:	add	r1, r0, r1
   12204:	str	r1, [fp, #-8]
   12208:	cmp	r0, #0
   1220c:	bne	121e8 <__MyGame_Example_Monster_sort_by_name__heap_sort+0x44>
   12210:	b	12214 <__MyGame_Example_Monster_sort_by_name__heap_sort+0x70>
   12214:	ldr	r0, [fp, #-12]
   12218:	cmp	r0, #0
   1221c:	bls	122ac <__MyGame_Example_Monster_sort_by_name__heap_sort+0x108>
   12220:	ldr	r0, [fp, #-12]
   12224:	rsb	r0, r0, #0
   12228:	lsl	r0, r0, #2
   1222c:	str	r0, [sp, #4]
   12230:	ldr	r0, [fp, #-4]
   12234:	ldr	r1, [fp, #-12]
   12238:	add	r0, r0, r1, lsl #2
   1223c:	bl	f490 <__flatbuffers_uoffset_read_from_pe>
   12240:	ldr	r1, [sp, #4]
   12244:	sub	r0, r0, r1
   12248:	str	r0, [sp, #12]
   1224c:	ldr	r0, [fp, #-4]
   12250:	bl	f490 <__flatbuffers_uoffset_read_from_pe>
   12254:	ldr	r1, [sp, #4]
   12258:	add	r0, r0, r1
   1225c:	str	r0, [sp, #8]
   12260:	ldr	r0, [fp, #-4]
   12264:	ldr	r1, [sp, #12]
   12268:	bl	12470 <__flatbuffers_uoffset_write_to_pe>
   1226c:	ldr	r0, [fp, #-4]
   12270:	ldr	r1, [fp, #-12]
   12274:	add	r0, r0, r1, lsl #2
   12278:	ldr	r1, [sp, #8]
   1227c:	bl	12470 <__flatbuffers_uoffset_write_to_pe>
   12280:	ldr	r0, [fp, #-4]
   12284:	ldr	r1, [fp, #-12]
   12288:	mvn	r2, #0
   1228c:	add	r1, r1, r2
   12290:	str	r1, [fp, #-12]
   12294:	movw	r2, #0
   12298:	str	r1, [sp]
   1229c:	mov	r1, r2
   122a0:	ldr	r2, [sp]
   122a4:	bl	122b4 <__MyGame_Example_Monster_sort_by_name__heap_sift_down>
   122a8:	b	12214 <__MyGame_Example_Monster_sort_by_name__heap_sort+0x70>
   122ac:	mov	sp, fp
   122b0:	pop	{fp, pc}

000122b4 <__MyGame_Example_Monster_sort_by_name__heap_sift_down>:
   122b4:	push	{fp, lr}
   122b8:	mov	fp, sp
   122bc:	sub	sp, sp, #72	; 0x48
   122c0:	str	r0, [fp, #-4]
   122c4:	str	r1, [fp, #-8]
   122c8:	str	r2, [fp, #-12]
   122cc:	ldr	r0, [fp, #-8]
   122d0:	str	r0, [fp, #-20]	; 0xffffffec
   122d4:	ldr	r0, [fp, #-20]	; 0xffffffec
   122d8:	lsl	r0, r0, #1
   122dc:	ldr	r1, [fp, #-12]
   122e0:	cmp	r0, r1
   122e4:	bhi	12468 <__MyGame_Example_Monster_sort_by_name__heap_sift_down+0x1b4>
   122e8:	ldr	r0, [fp, #-20]	; 0xffffffec
   122ec:	lsl	r0, r0, #1
   122f0:	str	r0, [fp, #-16]
   122f4:	ldr	r0, [fp, #-16]
   122f8:	ldr	r1, [fp, #-12]
   122fc:	cmp	r0, r1
   12300:	bcs	1237c <__MyGame_Example_Monster_sort_by_name__heap_sift_down+0xc8>
   12304:	ldr	r0, [fp, #-4]
   12308:	ldr	r1, [fp, #-16]
   1230c:	bl	42e8 <MyGame_Example_Monster_vec_at>
   12310:	bl	3850 <MyGame_Example_Monster_name>
   12314:	str	r0, [fp, #-24]	; 0xffffffe8
   12318:	ldr	r0, [fp, #-4]
   1231c:	ldr	r1, [fp, #-16]
   12320:	add	r1, r1, #1
   12324:	bl	42e8 <MyGame_Example_Monster_vec_at>
   12328:	bl	3850 <MyGame_Example_Monster_name>
   1232c:	str	r0, [fp, #-28]	; 0xffffffe4
   12330:	ldr	r0, [fp, #-24]	; 0xffffffe8
   12334:	ldr	r1, [fp, #-28]	; 0xffffffe4
   12338:	ldr	r2, [fp, #-28]	; 0xffffffe4
   1233c:	str	r0, [sp, #24]
   12340:	mov	r0, r2
   12344:	str	r1, [sp, #20]
   12348:	bl	3958 <flatbuffers_string_len>
   1234c:	ldr	r1, [sp, #24]
   12350:	str	r0, [sp, #16]
   12354:	mov	r0, r1
   12358:	ldr	r1, [sp, #20]
   1235c:	ldr	r2, [sp, #16]
   12360:	bl	1249c <__flatbuffers_string_n_cmp>
   12364:	cmp	r0, #0
   12368:	bge	12378 <__MyGame_Example_Monster_sort_by_name__heap_sift_down+0xc4>
   1236c:	ldr	r0, [fp, #-16]
   12370:	add	r0, r0, #1
   12374:	str	r0, [fp, #-16]
   12378:	b	1237c <__MyGame_Example_Monster_sort_by_name__heap_sift_down+0xc8>
   1237c:	ldr	r0, [fp, #-4]
   12380:	ldr	r1, [fp, #-20]	; 0xffffffec
   12384:	bl	42e8 <MyGame_Example_Monster_vec_at>
   12388:	bl	3850 <MyGame_Example_Monster_name>
   1238c:	str	r0, [fp, #-32]	; 0xffffffe0
   12390:	ldr	r0, [fp, #-4]
   12394:	ldr	r1, [fp, #-16]
   12398:	bl	42e8 <MyGame_Example_Monster_vec_at>
   1239c:	bl	3850 <MyGame_Example_Monster_name>
   123a0:	str	r0, [fp, #-24]	; 0xffffffe8
   123a4:	ldr	r0, [fp, #-32]	; 0xffffffe0
   123a8:	ldr	r1, [fp, #-24]	; 0xffffffe8
   123ac:	ldr	r2, [fp, #-24]	; 0xffffffe8
   123b0:	str	r0, [sp, #12]
   123b4:	mov	r0, r2
   123b8:	str	r1, [sp, #8]
   123bc:	bl	3958 <flatbuffers_string_len>
   123c0:	ldr	r1, [sp, #12]
   123c4:	str	r0, [sp, #4]
   123c8:	mov	r0, r1
   123cc:	ldr	r1, [sp, #8]
   123d0:	ldr	r2, [sp, #4]
   123d4:	bl	1249c <__flatbuffers_string_n_cmp>
   123d8:	cmp	r0, #0
   123dc:	bge	12460 <__MyGame_Example_Monster_sort_by_name__heap_sift_down+0x1ac>
   123e0:	ldr	r0, [fp, #-20]	; 0xffffffec
   123e4:	ldr	r1, [fp, #-16]
   123e8:	sub	r0, r0, r1
   123ec:	lsl	r0, r0, #2
   123f0:	str	r0, [sp, #28]
   123f4:	ldr	r0, [fp, #-4]
   123f8:	ldr	r1, [fp, #-16]
   123fc:	add	r0, r0, r1, lsl #2
   12400:	bl	f490 <__flatbuffers_uoffset_read_from_pe>
   12404:	ldr	r1, [sp, #28]
   12408:	sub	r0, r0, r1
   1240c:	str	r0, [sp, #36]	; 0x24
   12410:	ldr	r0, [fp, #-4]
   12414:	ldr	r1, [fp, #-20]	; 0xffffffec
   12418:	add	r0, r0, r1, lsl #2
   1241c:	bl	f490 <__flatbuffers_uoffset_read_from_pe>
   12420:	ldr	r1, [sp, #28]
   12424:	add	r0, r0, r1
   12428:	str	r0, [sp, #32]
   1242c:	ldr	r0, [fp, #-4]
   12430:	ldr	r1, [fp, #-20]	; 0xffffffec
   12434:	add	r0, r0, r1, lsl #2
   12438:	ldr	r1, [sp, #36]	; 0x24
   1243c:	bl	12470 <__flatbuffers_uoffset_write_to_pe>
   12440:	ldr	r0, [fp, #-4]
   12444:	ldr	r1, [fp, #-16]
   12448:	add	r0, r0, r1, lsl #2
   1244c:	ldr	r1, [sp, #32]
   12450:	bl	12470 <__flatbuffers_uoffset_write_to_pe>
   12454:	ldr	r0, [fp, #-16]
   12458:	str	r0, [fp, #-20]	; 0xffffffec
   1245c:	b	12464 <__MyGame_Example_Monster_sort_by_name__heap_sift_down+0x1b0>
   12460:	b	12468 <__MyGame_Example_Monster_sort_by_name__heap_sift_down+0x1b4>
   12464:	b	122d4 <__MyGame_Example_Monster_sort_by_name__heap_sift_down+0x20>
   12468:	mov	sp, fp
   1246c:	pop	{fp, pc}

00012470 <__flatbuffers_uoffset_write_to_pe>:
   12470:	push	{fp, lr}
   12474:	mov	fp, sp
   12478:	sub	sp, sp, #8
   1247c:	str	r0, [sp, #4]
   12480:	str	r1, [sp]
   12484:	ldr	r0, [sp]
   12488:	bl	12578 <__flatbuffers_uoffset_cast_to_pe>
   1248c:	ldr	r1, [sp, #4]
   12490:	str	r0, [r1]
   12494:	mov	sp, fp
   12498:	pop	{fp, pc}

0001249c <__flatbuffers_string_n_cmp>:
   1249c:	push	{fp, lr}
   124a0:	mov	fp, sp
   124a4:	sub	sp, sp, #48	; 0x30
   124a8:	str	r0, [fp, #-4]
   124ac:	str	r1, [fp, #-8]
   124b0:	str	r2, [fp, #-12]
   124b4:	ldr	r0, [fp, #-4]
   124b8:	bl	3958 <flatbuffers_string_len>
   124bc:	str	r0, [fp, #-16]
   124c0:	ldr	r0, [fp, #-4]
   124c4:	ldr	r1, [fp, #-8]
   124c8:	ldr	r2, [fp, #-16]
   124cc:	ldr	r3, [fp, #-12]
   124d0:	cmp	r2, r3
   124d4:	str	r0, [sp, #24]
   124d8:	str	r1, [sp, #20]
   124dc:	bcs	124ec <__flatbuffers_string_n_cmp+0x50>
   124e0:	ldr	r0, [fp, #-16]
   124e4:	str	r0, [sp, #16]
   124e8:	b	124f4 <__flatbuffers_string_n_cmp+0x58>
   124ec:	ldr	r0, [fp, #-12]
   124f0:	str	r0, [sp, #16]
   124f4:	ldr	r0, [sp, #16]
   124f8:	ldr	r1, [sp, #24]
   124fc:	str	r0, [sp, #12]
   12500:	mov	r0, r1
   12504:	ldr	r1, [sp, #20]
   12508:	ldr	r2, [sp, #12]
   1250c:	bl	0 <strncmp>
   12510:	str	r0, [fp, #-20]	; 0xffffffec
   12514:	ldr	r0, [fp, #-20]	; 0xffffffec
   12518:	cmp	r0, #0
   1251c:	beq	1252c <__flatbuffers_string_n_cmp+0x90>
   12520:	ldr	r0, [fp, #-20]	; 0xffffffec
   12524:	str	r0, [sp, #8]
   12528:	b	1256c <__flatbuffers_string_n_cmp+0xd0>
   1252c:	ldr	r0, [fp, #-16]
   12530:	ldr	r1, [fp, #-12]
   12534:	cmp	r0, r1
   12538:	bcs	12548 <__flatbuffers_string_n_cmp+0xac>
   1253c:	mvn	r0, #0
   12540:	str	r0, [sp, #4]
   12544:	b	12564 <__flatbuffers_string_n_cmp+0xc8>
   12548:	ldr	r0, [fp, #-16]
   1254c:	ldr	r1, [fp, #-12]
   12550:	cmp	r0, r1
   12554:	movw	r0, #0
   12558:	movhi	r0, #1
   1255c:	and	r0, r0, #1
   12560:	str	r0, [sp, #4]
   12564:	ldr	r0, [sp, #4]
   12568:	str	r0, [sp, #8]
   1256c:	ldr	r0, [sp, #8]
   12570:	mov	sp, fp
   12574:	pop	{fp, pc}

00012578 <__flatbuffers_uoffset_cast_to_pe>:
   12578:	sub	sp, sp, #4
   1257c:	str	r0, [sp]
   12580:	ldr	r0, [sp]
   12584:	add	sp, sp, #4
   12588:	bx	lr

0001258c <__flatbuffers_string_cmp>:
   1258c:	push	{fp, lr}
   12590:	mov	fp, sp
   12594:	sub	sp, sp, #16
   12598:	str	r0, [fp, #-4]
   1259c:	str	r1, [sp, #8]
   125a0:	str	r2, [sp, #4]
   125a4:	ldr	r0, [fp, #-4]
   125a8:	ldr	r1, [sp, #8]
   125ac:	bl	0 <strcmp>
   125b0:	mov	sp, fp
   125b4:	pop	{fp, pc}

000125b8 <MyGame_Example_Monster_vec_scan_n_by_name>:
   125b8:	push	{fp, lr}
   125bc:	mov	fp, sp
   125c0:	sub	sp, sp, #32
   125c4:	str	r0, [fp, #-8]
   125c8:	str	r1, [fp, #-12]
   125cc:	str	r2, [sp, #16]
   125d0:	movw	r0, #0
   125d4:	str	r0, [sp, #8]
   125d8:	ldr	r0, [sp, #8]
   125dc:	ldr	r1, [fp, #-8]
   125e0:	str	r0, [sp, #4]
   125e4:	mov	r0, r1
   125e8:	bl	4298 <MyGame_Example_Monster_vec_len>
   125ec:	ldr	r1, [sp, #4]
   125f0:	cmp	r1, r0
   125f4:	bcs	12644 <MyGame_Example_Monster_vec_scan_n_by_name+0x8c>
   125f8:	ldr	r0, [fp, #-8]
   125fc:	ldr	r1, [sp, #8]
   12600:	bl	42e8 <MyGame_Example_Monster_vec_at>
   12604:	bl	3850 <MyGame_Example_Monster_name>
   12608:	str	r0, [sp, #12]
   1260c:	ldr	r0, [sp, #12]
   12610:	ldr	r1, [fp, #-12]
   12614:	ldr	r2, [sp, #16]
   12618:	bl	1249c <__flatbuffers_string_n_cmp>
   1261c:	cmp	r0, #0
   12620:	bne	12630 <MyGame_Example_Monster_vec_scan_n_by_name+0x78>
   12624:	ldr	r0, [sp, #8]
   12628:	str	r0, [fp, #-4]
   1262c:	b	12654 <MyGame_Example_Monster_vec_scan_n_by_name+0x9c>
   12630:	b	12634 <MyGame_Example_Monster_vec_scan_n_by_name+0x7c>
   12634:	ldr	r0, [sp, #8]
   12638:	add	r0, r0, #1
   1263c:	str	r0, [sp, #8]
   12640:	b	125d8 <MyGame_Example_Monster_vec_scan_n_by_name+0x20>
   12644:	movw	r0, #0
   12648:	movt	r0, #0
   1264c:	ldr	r0, [r0]
   12650:	str	r0, [fp, #-4]
   12654:	ldr	r0, [fp, #-4]
   12658:	mov	sp, fp
   1265c:	pop	{fp, pc}

00012660 <__flatbuffers_uint8__heap_sort>:
   12660:	push	{fp, lr}
   12664:	mov	fp, sp
   12668:	sub	sp, sp, #24
   1266c:	str	r0, [fp, #-4]
   12670:	ldr	r0, [fp, #-4]
   12674:	bl	3d14 <flatbuffers_uint8_vec_len>
   12678:	str	r0, [sp, #8]
   1267c:	ldr	r0, [sp, #8]
   12680:	cmp	r0, #0
   12684:	bne	1268c <__flatbuffers_uint8__heap_sort+0x2c>
   12688:	b	12740 <__flatbuffers_uint8__heap_sort+0xe0>
   1268c:	ldr	r0, [sp, #8]
   12690:	sub	r0, r0, #1
   12694:	str	r0, [sp, #12]
   12698:	ldr	r0, [sp, #8]
   1269c:	lsr	r0, r0, #1
   126a0:	str	r0, [fp, #-8]
   126a4:	ldr	r0, [fp, #-4]
   126a8:	ldr	r1, [fp, #-8]
   126ac:	ldr	r2, [sp, #12]
   126b0:	bl	12748 <__flatbuffers_uint8__heap_sift_down>
   126b4:	ldr	r0, [fp, #-8]
   126b8:	mvn	r1, #0
   126bc:	add	r1, r0, r1
   126c0:	str	r1, [fp, #-8]
   126c4:	cmp	r0, #0
   126c8:	bne	126a4 <__flatbuffers_uint8__heap_sort+0x44>
   126cc:	b	126d0 <__flatbuffers_uint8__heap_sort+0x70>
   126d0:	ldr	r0, [sp, #12]
   126d4:	cmp	r0, #0
   126d8:	bls	12740 <__flatbuffers_uint8__heap_sort+0xe0>
   126dc:	ldr	r0, [fp, #-4]
   126e0:	ldr	r1, [sp, #12]
   126e4:	add	r0, r0, r1
   126e8:	ldrb	r0, [r0]
   126ec:	strb	r0, [sp, #7]
   126f0:	ldr	r0, [fp, #-4]
   126f4:	ldrb	r0, [r0]
   126f8:	ldr	r1, [fp, #-4]
   126fc:	ldr	r2, [sp, #12]
   12700:	add	r1, r1, r2
   12704:	strb	r0, [r1]
   12708:	ldrb	r0, [sp, #7]
   1270c:	ldr	r1, [fp, #-4]
   12710:	strb	r0, [r1]
   12714:	ldr	r0, [fp, #-4]
   12718:	ldr	r1, [sp, #12]
   1271c:	mvn	r2, #0
   12720:	add	r1, r1, r2
   12724:	str	r1, [sp, #12]
   12728:	movw	r2, #0
   1272c:	str	r1, [sp]
   12730:	mov	r1, r2
   12734:	ldr	r2, [sp]
   12738:	bl	12748 <__flatbuffers_uint8__heap_sift_down>
   1273c:	b	126d0 <__flatbuffers_uint8__heap_sort+0x70>
   12740:	mov	sp, fp
   12744:	pop	{fp, pc}

00012748 <__flatbuffers_uint8__heap_sift_down>:
   12748:	push	{fp, lr}
   1274c:	mov	fp, sp
   12750:	sub	sp, sp, #32
   12754:	str	r0, [fp, #-4]
   12758:	str	r1, [fp, #-8]
   1275c:	str	r2, [fp, #-12]
   12760:	ldr	r0, [fp, #-8]
   12764:	str	r0, [sp, #12]
   12768:	ldr	r0, [sp, #12]
   1276c:	lsl	r0, r0, #1
   12770:	ldr	r1, [fp, #-12]
   12774:	cmp	r0, r1
   12778:	bhi	128d0 <__flatbuffers_uint8__heap_sift_down+0x188>
   1277c:	ldr	r0, [sp, #12]
   12780:	lsl	r0, r0, #1
   12784:	str	r0, [sp, #16]
   12788:	ldr	r0, [sp, #16]
   1278c:	ldr	r1, [fp, #-12]
   12790:	cmp	r0, r1
   12794:	bcs	12810 <__flatbuffers_uint8__heap_sift_down+0xc8>
   12798:	ldr	r0, [fp, #-4]
   1279c:	ldr	r1, [sp, #16]
   127a0:	bl	3d34 <flatbuffers_uint8_vec_at>
   127a4:	strb	r0, [sp, #11]
   127a8:	ldr	r0, [fp, #-4]
   127ac:	ldr	r1, [sp, #16]
   127b0:	add	r1, r1, #1
   127b4:	bl	3d34 <flatbuffers_uint8_vec_at>
   127b8:	strb	r0, [sp, #10]
   127bc:	ldrb	r0, [sp, #11]
   127c0:	ldrb	r1, [sp, #10]
   127c4:	cmp	r0, r1
   127c8:	bge	127d8 <__flatbuffers_uint8__heap_sift_down+0x90>
   127cc:	mvn	r0, #0
   127d0:	str	r0, [sp, #4]
   127d4:	b	127f4 <__flatbuffers_uint8__heap_sift_down+0xac>
   127d8:	ldrb	r0, [sp, #11]
   127dc:	ldrb	r1, [sp, #10]
   127e0:	cmp	r0, r1
   127e4:	movw	r0, #0
   127e8:	movgt	r0, #1
   127ec:	and	r0, r0, #1
   127f0:	str	r0, [sp, #4]
   127f4:	ldr	r0, [sp, #4]
   127f8:	cmp	r0, #0
   127fc:	bge	1280c <__flatbuffers_uint8__heap_sift_down+0xc4>
   12800:	ldr	r0, [sp, #16]
   12804:	add	r0, r0, #1
   12808:	str	r0, [sp, #16]
   1280c:	b	12810 <__flatbuffers_uint8__heap_sift_down+0xc8>
   12810:	ldr	r0, [fp, #-4]
   12814:	ldr	r1, [sp, #12]
   12818:	bl	3d34 <flatbuffers_uint8_vec_at>
   1281c:	strb	r0, [sp, #9]
   12820:	ldr	r0, [fp, #-4]
   12824:	ldr	r1, [sp, #16]
   12828:	bl	3d34 <flatbuffers_uint8_vec_at>
   1282c:	strb	r0, [sp, #11]
   12830:	ldrb	r0, [sp, #9]
   12834:	ldrb	r1, [sp, #11]
   12838:	cmp	r0, r1
   1283c:	bge	1284c <__flatbuffers_uint8__heap_sift_down+0x104>
   12840:	mvn	r0, #0
   12844:	str	r0, [sp]
   12848:	b	12868 <__flatbuffers_uint8__heap_sift_down+0x120>
   1284c:	ldrb	r0, [sp, #9]
   12850:	ldrb	r1, [sp, #11]
   12854:	cmp	r0, r1
   12858:	movw	r0, #0
   1285c:	movgt	r0, #1
   12860:	and	r0, r0, #1
   12864:	str	r0, [sp]
   12868:	ldr	r0, [sp]
   1286c:	cmp	r0, #0
   12870:	bge	128c8 <__flatbuffers_uint8__heap_sift_down+0x180>
   12874:	ldr	r0, [fp, #-4]
   12878:	ldr	r1, [sp, #16]
   1287c:	add	r0, r0, r1
   12880:	ldrb	r0, [r0]
   12884:	strb	r0, [sp, #8]
   12888:	ldr	r0, [fp, #-4]
   1288c:	ldr	r1, [sp, #12]
   12890:	add	r0, r0, r1
   12894:	ldrb	r0, [r0]
   12898:	ldr	r1, [fp, #-4]
   1289c:	ldr	r2, [sp, #16]
   128a0:	add	r1, r1, r2
   128a4:	strb	r0, [r1]
   128a8:	ldrb	r0, [sp, #8]
   128ac:	ldr	r1, [fp, #-4]
   128b0:	ldr	r2, [sp, #12]
   128b4:	add	r1, r1, r2
   128b8:	strb	r0, [r1]
   128bc:	ldr	r0, [sp, #16]
   128c0:	str	r0, [sp, #12]
   128c4:	b	128cc <__flatbuffers_uint8__heap_sift_down+0x184>
   128c8:	b	128d0 <__flatbuffers_uint8__heap_sift_down+0x188>
   128cc:	b	12768 <__flatbuffers_uint8__heap_sift_down+0x20>
   128d0:	mov	sp, fp
   128d4:	pop	{fp, pc}

000128d8 <flatbuffers_bool_vec_create>:
   128d8:	push	{fp, lr}
   128dc:	mov	fp, sp
   128e0:	sub	sp, sp, #24
   128e4:	str	r0, [fp, #-4]
   128e8:	str	r1, [fp, #-8]
   128ec:	str	r2, [sp, #12]
   128f0:	ldr	r0, [fp, #-4]
   128f4:	ldr	r1, [fp, #-8]
   128f8:	ldr	r2, [sp, #12]
   128fc:	movw	r3, #1
   12900:	movw	ip, #1
   12904:	uxth	ip, ip
   12908:	str	ip, [sp]
   1290c:	mvn	ip, #0
   12910:	str	ip, [sp, #4]
   12914:	bl	0 <flatcc_builder_create_vector>
   12918:	mov	sp, fp
   1291c:	pop	{fp, pc}

00012920 <flatbuffers_string_clone>:
   12920:	push	{fp, lr}
   12924:	mov	fp, sp
   12928:	sub	sp, sp, #24
   1292c:	str	r0, [fp, #-4]
   12930:	str	r1, [fp, #-8]
   12934:	ldr	r0, [fp, #-4]
   12938:	ldr	r1, [fp, #-8]
   1293c:	ldr	r2, [fp, #-8]
   12940:	str	r0, [sp, #12]
   12944:	mov	r0, r2
   12948:	str	r1, [sp, #8]
   1294c:	bl	3958 <flatbuffers_string_len>
   12950:	ldr	r1, [sp, #12]
   12954:	str	r0, [sp, #4]
   12958:	mov	r0, r1
   1295c:	ldr	r1, [sp, #8]
   12960:	ldr	r2, [sp, #4]
   12964:	bl	0 <flatcc_builder_create_string>
   12968:	mov	sp, fp
   1296c:	pop	{fp, pc}

00012970 <flatbuffers_string_vec_push>:
   12970:	push	{fp, lr}
   12974:	mov	fp, sp
   12978:	sub	sp, sp, #16
   1297c:	str	r0, [fp, #-4]
   12980:	str	r1, [sp, #8]
   12984:	ldr	r0, [sp, #8]
   12988:	cmp	r0, #0
   1298c:	beq	129a4 <flatbuffers_string_vec_push+0x34>
   12990:	ldr	r0, [fp, #-4]
   12994:	ldr	r1, [sp, #8]
   12998:	bl	0 <flatcc_builder_offset_vector_push>
   1299c:	str	r0, [sp, #4]
   129a0:	b	129b0 <flatbuffers_string_vec_push+0x40>
   129a4:	movw	r0, #0
   129a8:	str	r0, [sp, #4]
   129ac:	b	129b0 <flatbuffers_string_vec_push+0x40>
   129b0:	ldr	r0, [sp, #4]
   129b4:	mov	sp, fp
   129b8:	pop	{fp, pc}

000129bc <flatbuffers_string_slice>:
   129bc:	push	{fp, lr}
   129c0:	mov	fp, sp
   129c4:	sub	sp, sp, #24
   129c8:	str	r0, [fp, #-4]
   129cc:	str	r1, [fp, #-8]
   129d0:	str	r2, [sp, #12]
   129d4:	str	r3, [sp, #8]
   129d8:	ldr	r0, [fp, #-8]
   129dc:	bl	3958 <flatbuffers_string_len>
   129e0:	str	r0, [sp, #4]
   129e4:	ldr	r0, [sp, #12]
   129e8:	ldr	r1, [sp, #4]
   129ec:	cmp	r0, r1
   129f0:	bcc	129fc <flatbuffers_string_slice+0x40>
   129f4:	ldr	r0, [sp, #4]
   129f8:	str	r0, [sp, #12]
   129fc:	ldr	r0, [sp, #12]
   12a00:	ldr	r1, [sp, #4]
   12a04:	sub	r0, r1, r0
   12a08:	str	r0, [sp, #4]
   12a0c:	ldr	r0, [sp, #8]
   12a10:	ldr	r1, [sp, #4]
   12a14:	cmp	r0, r1
   12a18:	bls	12a24 <flatbuffers_string_slice+0x68>
   12a1c:	ldr	r0, [sp, #4]
   12a20:	str	r0, [sp, #8]
   12a24:	ldr	r0, [fp, #-4]
   12a28:	ldr	r1, [fp, #-8]
   12a2c:	ldr	r2, [sp, #12]
   12a30:	add	r1, r1, r2
   12a34:	ldr	r2, [sp, #8]
   12a38:	bl	0 <flatcc_builder_create_string>
   12a3c:	mov	sp, fp
   12a40:	pop	{fp, pc}

00012a44 <flatbuffers_bool_vec_clone>:
   12a44:	push	{fp, lr}
   12a48:	mov	fp, sp
   12a4c:	sub	sp, sp, #32
   12a50:	str	r0, [fp, #-4]
   12a54:	str	r1, [fp, #-8]
   12a58:	ldr	r0, [fp, #-4]
   12a5c:	ldr	r1, [fp, #-8]
   12a60:	ldr	r2, [fp, #-8]
   12a64:	str	r0, [fp, #-12]
   12a68:	mov	r0, r2
   12a6c:	str	r1, [sp, #16]
   12a70:	bl	46fc <flatbuffers_bool_vec_len>
   12a74:	ldr	r1, [fp, #-12]
   12a78:	str	r0, [sp, #12]
   12a7c:	mov	r0, r1
   12a80:	ldr	r1, [sp, #16]
   12a84:	ldr	r2, [sp, #12]
   12a88:	movw	r3, #1
   12a8c:	movw	ip, #1
   12a90:	uxth	ip, ip
   12a94:	str	ip, [sp]
   12a98:	mvn	ip, #0
   12a9c:	str	ip, [sp, #4]
   12aa0:	bl	0 <flatcc_builder_create_vector>
   12aa4:	mov	sp, fp
   12aa8:	pop	{fp, pc}

00012aac <MyGame_Example_Test_vec_slice>:
   12aac:	push	{fp, lr}
   12ab0:	mov	fp, sp
   12ab4:	sub	sp, sp, #40	; 0x28
   12ab8:	str	r0, [fp, #-4]
   12abc:	str	r1, [fp, #-8]
   12ac0:	str	r2, [fp, #-12]
   12ac4:	str	r3, [fp, #-16]
   12ac8:	ldr	r0, [fp, #-8]
   12acc:	bl	4044 <MyGame_Example_Test_vec_len>
   12ad0:	str	r0, [sp, #20]
   12ad4:	ldr	r0, [fp, #-12]
   12ad8:	ldr	r1, [sp, #20]
   12adc:	cmp	r0, r1
   12ae0:	bcc	12aec <MyGame_Example_Test_vec_slice+0x40>
   12ae4:	ldr	r0, [sp, #20]
   12ae8:	str	r0, [fp, #-12]
   12aec:	ldr	r0, [fp, #-12]
   12af0:	ldr	r1, [sp, #20]
   12af4:	sub	r0, r1, r0
   12af8:	str	r0, [sp, #20]
   12afc:	ldr	r0, [fp, #-16]
   12b00:	ldr	r1, [sp, #20]
   12b04:	cmp	r0, r1
   12b08:	bls	12b14 <MyGame_Example_Test_vec_slice+0x68>
   12b0c:	ldr	r0, [sp, #20]
   12b10:	str	r0, [fp, #-16]
   12b14:	ldr	r0, [fp, #-4]
   12b18:	ldr	r1, [fp, #-8]
   12b1c:	ldr	r2, [fp, #-12]
   12b20:	str	r0, [sp, #16]
   12b24:	mov	r0, r1
   12b28:	mov	r1, r2
   12b2c:	bl	12b78 <MyGame_Example_Test__const_ptr_add>
   12b30:	ldr	r1, [pc, #60]	; 12b74 <MyGame_Example_Test_vec_slice+0xc8>
   12b34:	ldr	r2, [fp, #-16]
   12b38:	ldr	r3, [sp, #16]
   12b3c:	str	r0, [sp, #12]
   12b40:	mov	r0, r3
   12b44:	ldr	ip, [sp, #12]
   12b48:	str	r1, [sp, #8]
   12b4c:	mov	r1, ip
   12b50:	movw	r3, #4
   12b54:	movw	lr, #2
   12b58:	uxth	lr, lr
   12b5c:	str	lr, [sp]
   12b60:	ldr	lr, [sp, #8]
   12b64:	str	lr, [sp, #4]
   12b68:	bl	0 <flatcc_builder_create_vector>
   12b6c:	mov	sp, fp
   12b70:	pop	{fp, pc}
   12b74:	.word	0x3fffffff

00012b78 <MyGame_Example_Test__const_ptr_add>:
   12b78:	sub	sp, sp, #8
   12b7c:	str	r0, [sp, #4]
   12b80:	str	r1, [sp]
   12b84:	ldr	r0, [sp, #4]
   12b88:	ldr	r1, [sp]
   12b8c:	add	r0, r0, r1, lsl #2
   12b90:	add	sp, sp, #8
   12b94:	bx	lr

00012b98 <flatbuffers_bool_vec_slice>:
   12b98:	push	{fp, lr}
   12b9c:	mov	fp, sp
   12ba0:	sub	sp, sp, #40	; 0x28
   12ba4:	str	r0, [fp, #-4]
   12ba8:	str	r1, [fp, #-8]
   12bac:	str	r2, [fp, #-12]
   12bb0:	str	r3, [fp, #-16]
   12bb4:	ldr	r0, [fp, #-8]
   12bb8:	bl	46fc <flatbuffers_bool_vec_len>
   12bbc:	str	r0, [sp, #20]
   12bc0:	ldr	r0, [fp, #-12]
   12bc4:	ldr	r1, [sp, #20]
   12bc8:	cmp	r0, r1
   12bcc:	bcc	12bd8 <flatbuffers_bool_vec_slice+0x40>
   12bd0:	ldr	r0, [sp, #20]
   12bd4:	str	r0, [fp, #-12]
   12bd8:	ldr	r0, [fp, #-12]
   12bdc:	ldr	r1, [sp, #20]
   12be0:	sub	r0, r1, r0
   12be4:	str	r0, [sp, #20]
   12be8:	ldr	r0, [fp, #-16]
   12bec:	ldr	r1, [sp, #20]
   12bf0:	cmp	r0, r1
   12bf4:	bls	12c00 <flatbuffers_bool_vec_slice+0x68>
   12bf8:	ldr	r0, [sp, #20]
   12bfc:	str	r0, [fp, #-16]
   12c00:	ldr	r0, [fp, #-4]
   12c04:	ldr	r1, [fp, #-8]
   12c08:	ldr	r2, [fp, #-12]
   12c0c:	str	r0, [sp, #16]
   12c10:	mov	r0, r1
   12c14:	mov	r1, r2
   12c18:	bl	12c54 <flatbuffers_bool__const_ptr_add>
   12c1c:	ldr	r2, [fp, #-16]
   12c20:	ldr	r1, [sp, #16]
   12c24:	str	r0, [sp, #12]
   12c28:	mov	r0, r1
   12c2c:	ldr	r1, [sp, #12]
   12c30:	movw	r3, #1
   12c34:	movw	ip, #1
   12c38:	uxth	ip, ip
   12c3c:	str	ip, [sp]
   12c40:	mvn	ip, #0
   12c44:	str	ip, [sp, #4]
   12c48:	bl	0 <flatcc_builder_create_vector>
   12c4c:	mov	sp, fp
   12c50:	pop	{fp, pc}

00012c54 <flatbuffers_bool__const_ptr_add>:
   12c54:	sub	sp, sp, #8
   12c58:	str	r0, [sp, #4]
   12c5c:	str	r1, [sp]
   12c60:	ldr	r0, [sp, #4]
   12c64:	ldr	r1, [sp]
   12c68:	add	r0, r0, r1
   12c6c:	add	sp, sp, #8
   12c70:	bx	lr

00012c74 <MyGame_Example_Test_vec_clone>:
   12c74:	push	{fp, lr}
   12c78:	mov	fp, sp
   12c7c:	sub	sp, sp, #32
   12c80:	str	r0, [fp, #-4]
   12c84:	str	r1, [fp, #-8]
   12c88:	ldr	r0, [fp, #-4]
   12c8c:	ldr	r1, [fp, #-8]
   12c90:	ldr	r2, [fp, #-8]
   12c94:	str	r0, [fp, #-12]
   12c98:	mov	r0, r2
   12c9c:	str	r1, [sp, #16]
   12ca0:	bl	4044 <MyGame_Example_Test_vec_len>
   12ca4:	ldr	r1, [pc, #60]	; 12ce8 <MyGame_Example_Test_vec_clone+0x74>
   12ca8:	ldr	r2, [fp, #-12]
   12cac:	str	r0, [sp, #12]
   12cb0:	mov	r0, r2
   12cb4:	ldr	r3, [sp, #16]
   12cb8:	str	r1, [sp, #8]
   12cbc:	mov	r1, r3
   12cc0:	ldr	r2, [sp, #12]
   12cc4:	movw	r3, #4
   12cc8:	movw	ip, #2
   12ccc:	uxth	ip, ip
   12cd0:	str	ip, [sp]
   12cd4:	ldr	ip, [sp, #8]
   12cd8:	str	ip, [sp, #4]
   12cdc:	bl	0 <flatcc_builder_create_vector>
   12ce0:	mov	sp, fp
   12ce4:	pop	{fp, pc}
   12ce8:	.word	0x3fffffff

00012cec <MyGame_Example_Stat_create>:
   12cec:	push	{fp, lr}
   12cf0:	mov	fp, sp
   12cf4:	sub	sp, sp, #32
   12cf8:	ldr	ip, [fp, #8]
   12cfc:	str	r0, [fp, #-8]
   12d00:	str	r1, [fp, #-12]
   12d04:	str	r3, [sp, #12]
   12d08:	str	r2, [sp, #8]
   12d0c:	strh	ip, [sp, #6]
   12d10:	ldr	r0, [fp, #-8]
   12d14:	bl	120b4 <MyGame_Example_Stat_start>
   12d18:	cmp	r0, #0
   12d1c:	bne	12d60 <MyGame_Example_Stat_create+0x74>
   12d20:	ldr	r0, [fp, #-8]
   12d24:	ldr	r2, [sp, #8]
   12d28:	ldr	r3, [sp, #12]
   12d2c:	bl	12d84 <MyGame_Example_Stat_val_add>
   12d30:	cmp	r0, #0
   12d34:	bne	12d60 <MyGame_Example_Stat_create+0x74>
   12d38:	ldr	r0, [fp, #-8]
   12d3c:	ldr	r1, [fp, #-12]
   12d40:	bl	12e18 <MyGame_Example_Stat_id_add>
   12d44:	cmp	r0, #0
   12d48:	bne	12d60 <MyGame_Example_Stat_create+0x74>
   12d4c:	ldr	r0, [fp, #-8]
   12d50:	ldrh	r1, [sp, #6]
   12d54:	bl	12e84 <MyGame_Example_Stat_count_add>
   12d58:	cmp	r0, #0
   12d5c:	beq	12d6c <MyGame_Example_Stat_create+0x80>
   12d60:	movw	r0, #0
   12d64:	str	r0, [fp, #-4]
   12d68:	b	12d78 <MyGame_Example_Stat_create+0x8c>
   12d6c:	ldr	r0, [fp, #-8]
   12d70:	bl	12144 <MyGame_Example_Stat_end>
   12d74:	str	r0, [fp, #-4]
   12d78:	ldr	r0, [fp, #-4]
   12d7c:	mov	sp, fp
   12d80:	pop	{fp, pc}

00012d84 <MyGame_Example_Stat_val_add>:
   12d84:	push	{fp, lr}
   12d88:	mov	fp, sp
   12d8c:	sub	sp, sp, #24
   12d90:	str	r0, [fp, #-8]
   12d94:	str	r3, [sp, #12]
   12d98:	str	r2, [sp, #8]
   12d9c:	ldr	r0, [sp, #8]
   12da0:	ldr	r1, [sp, #12]
   12da4:	orr	r0, r0, r1
   12da8:	cmp	r0, #0
   12dac:	bne	12dc0 <MyGame_Example_Stat_val_add+0x3c>
   12db0:	b	12db4 <MyGame_Example_Stat_val_add+0x30>
   12db4:	movw	r0, #0
   12db8:	str	r0, [fp, #-4]
   12dbc:	b	12e0c <MyGame_Example_Stat_val_add+0x88>
   12dc0:	ldr	r0, [fp, #-8]
   12dc4:	movw	r1, #1
   12dc8:	movw	r2, #8
   12dcc:	movw	r3, #8
   12dd0:	uxth	r3, r3
   12dd4:	bl	0 <flatcc_builder_table_add>
   12dd8:	str	r0, [sp, #4]
   12ddc:	movw	r1, #0
   12de0:	cmp	r0, r1
   12de4:	bne	12df4 <MyGame_Example_Stat_val_add+0x70>
   12de8:	mvn	r0, #0
   12dec:	str	r0, [fp, #-4]
   12df0:	b	12e0c <MyGame_Example_Stat_val_add+0x88>
   12df4:	ldr	r0, [sp, #4]
   12df8:	ldr	r2, [sp, #8]
   12dfc:	ldr	r3, [sp, #12]
   12e00:	bl	fda8 <flatbuffers_int64_assign_to_pe>
   12e04:	movw	r1, #0
   12e08:	str	r1, [fp, #-4]
   12e0c:	ldr	r0, [fp, #-4]
   12e10:	mov	sp, fp
   12e14:	pop	{fp, pc}

00012e18 <MyGame_Example_Stat_id_add>:
   12e18:	push	{fp, lr}
   12e1c:	mov	fp, sp
   12e20:	sub	sp, sp, #16
   12e24:	str	r0, [fp, #-4]
   12e28:	str	r1, [sp, #8]
   12e2c:	ldr	r0, [sp, #8]
   12e30:	cmp	r0, #0
   12e34:	beq	12e6c <MyGame_Example_Stat_id_add+0x54>
   12e38:	ldr	r0, [fp, #-4]
   12e3c:	movw	r1, #0
   12e40:	bl	0 <flatcc_builder_table_add_offset>
   12e44:	str	r0, [sp, #4]
   12e48:	movw	r1, #0
   12e4c:	cmp	r0, r1
   12e50:	beq	12e6c <MyGame_Example_Stat_id_add+0x54>
   12e54:	ldr	r0, [sp, #8]
   12e58:	ldr	r1, [sp, #4]
   12e5c:	str	r0, [r1]
   12e60:	movw	r0, #0
   12e64:	str	r0, [sp]
   12e68:	b	12e78 <MyGame_Example_Stat_id_add+0x60>
   12e6c:	mvn	r0, #0
   12e70:	str	r0, [sp]
   12e74:	b	12e78 <MyGame_Example_Stat_id_add+0x60>
   12e78:	ldr	r0, [sp]
   12e7c:	mov	sp, fp
   12e80:	pop	{fp, pc}

00012e84 <MyGame_Example_Stat_count_add>:
   12e84:	push	{fp, lr}
   12e88:	mov	fp, sp
   12e8c:	sub	sp, sp, #24
   12e90:	str	r0, [fp, #-8]
   12e94:	strh	r1, [fp, #-10]
   12e98:	ldrh	r0, [fp, #-10]
   12e9c:	cmp	r0, #0
   12ea0:	bne	12eb0 <MyGame_Example_Stat_count_add+0x2c>
   12ea4:	movw	r0, #0
   12ea8:	str	r0, [fp, #-4]
   12eac:	b	12efc <MyGame_Example_Stat_count_add+0x78>
   12eb0:	ldr	r0, [fp, #-8]
   12eb4:	movw	r1, #2
   12eb8:	str	r1, [sp, #4]
   12ebc:	ldr	r2, [sp, #4]
   12ec0:	movw	r3, #2
   12ec4:	uxth	r3, r3
   12ec8:	bl	0 <flatcc_builder_table_add>
   12ecc:	str	r0, [sp, #8]
   12ed0:	movw	r1, #0
   12ed4:	cmp	r0, r1
   12ed8:	bne	12ee8 <MyGame_Example_Stat_count_add+0x64>
   12edc:	mvn	r0, #0
   12ee0:	str	r0, [fp, #-4]
   12ee4:	b	12efc <MyGame_Example_Stat_count_add+0x78>
   12ee8:	ldr	r0, [sp, #8]
   12eec:	ldrh	r1, [fp, #-10]
   12ef0:	bl	ffc4 <flatbuffers_uint16_assign_to_pe>
   12ef4:	movw	r1, #0
   12ef8:	str	r1, [fp, #-4]
   12efc:	ldr	r0, [fp, #-4]
   12f00:	mov	sp, fp
   12f04:	pop	{fp, pc}

00012f08 <MyGame_Example_TestSimpleTableWithEnum_start>:
   12f08:	push	{fp, lr}
   12f0c:	mov	fp, sp
   12f10:	sub	sp, sp, #8
   12f14:	str	r0, [sp, #4]
   12f18:	ldr	r0, [sp, #4]
   12f1c:	movw	r1, #4
   12f20:	bl	0 <flatcc_builder_start_table>
   12f24:	mov	sp, fp
   12f28:	pop	{fp, pc}

00012f2c <MyGame_Example_TestSimpleTableWithEnum_color_add>:
   12f2c:	push	{fp, lr}
   12f30:	mov	fp, sp
   12f34:	sub	sp, sp, #16
   12f38:	str	r0, [sp, #8]
   12f3c:	strb	r1, [sp, #7]
   12f40:	ldrsb	r0, [sp, #7]
   12f44:	cmp	r0, #2
   12f48:	bne	12f58 <MyGame_Example_TestSimpleTableWithEnum_color_add+0x2c>
   12f4c:	movw	r0, #0
   12f50:	str	r0, [fp, #-4]
   12f54:	b	12fa0 <MyGame_Example_TestSimpleTableWithEnum_color_add+0x74>
   12f58:	ldr	r0, [sp, #8]
   12f5c:	movw	r1, #0
   12f60:	movw	r2, #1
   12f64:	movw	r3, #1
   12f68:	uxth	r3, r3
   12f6c:	bl	0 <flatcc_builder_table_add>
   12f70:	str	r0, [sp]
   12f74:	movw	r1, #0
   12f78:	cmp	r0, r1
   12f7c:	bne	12f8c <MyGame_Example_TestSimpleTableWithEnum_color_add+0x60>
   12f80:	mvn	r0, #0
   12f84:	str	r0, [fp, #-4]
   12f88:	b	12fa0 <MyGame_Example_TestSimpleTableWithEnum_color_add+0x74>
   12f8c:	ldr	r0, [sp]
   12f90:	ldrsb	r1, [sp, #7]
   12f94:	bl	11c98 <MyGame_Example_Color_assign_to_pe>
   12f98:	movw	r1, #0
   12f9c:	str	r1, [fp, #-4]
   12fa0:	ldr	r0, [fp, #-4]
   12fa4:	mov	sp, fp
   12fa8:	pop	{fp, pc}

00012fac <MyGame_Example_TestSimpleTableWithEnum_color2_add>:
   12fac:	push	{fp, lr}
   12fb0:	mov	fp, sp
   12fb4:	sub	sp, sp, #24
   12fb8:	str	r0, [fp, #-8]
   12fbc:	strb	r1, [fp, #-9]
   12fc0:	ldrsb	r0, [fp, #-9]
   12fc4:	cmp	r0, #2
   12fc8:	bne	12fd8 <MyGame_Example_TestSimpleTableWithEnum_color2_add+0x2c>
   12fcc:	movw	r0, #0
   12fd0:	str	r0, [fp, #-4]
   12fd4:	b	13024 <MyGame_Example_TestSimpleTableWithEnum_color2_add+0x78>
   12fd8:	ldr	r0, [fp, #-8]
   12fdc:	movw	r1, #1
   12fe0:	str	r1, [sp, #4]
   12fe4:	ldr	r2, [sp, #4]
   12fe8:	movw	r3, #1
   12fec:	uxth	r3, r3
   12ff0:	bl	0 <flatcc_builder_table_add>
   12ff4:	str	r0, [sp, #8]
   12ff8:	movw	r1, #0
   12ffc:	cmp	r0, r1
   13000:	bne	13010 <MyGame_Example_TestSimpleTableWithEnum_color2_add+0x64>
   13004:	mvn	r0, #0
   13008:	str	r0, [fp, #-4]
   1300c:	b	13024 <MyGame_Example_TestSimpleTableWithEnum_color2_add+0x78>
   13010:	ldr	r0, [sp, #8]
   13014:	ldrsb	r1, [fp, #-9]
   13018:	bl	11c98 <MyGame_Example_Color_assign_to_pe>
   1301c:	movw	r1, #0
   13020:	str	r1, [fp, #-4]
   13024:	ldr	r0, [fp, #-4]
   13028:	mov	sp, fp
   1302c:	pop	{fp, pc}

00013030 <MyGame_Example_TestSimpleTableWithEnum_uc_add>:
   13030:	push	{fp, lr}
   13034:	mov	fp, sp
   13038:	sub	sp, sp, #16
   1303c:	str	r0, [sp, #8]
   13040:	strb	r1, [sp, #7]
   13044:	ldrb	r0, [sp, #7]
   13048:	cmp	r0, #2
   1304c:	bne	1305c <MyGame_Example_TestSimpleTableWithEnum_uc_add+0x2c>
   13050:	movw	r0, #0
   13054:	str	r0, [fp, #-4]
   13058:	b	130a4 <MyGame_Example_TestSimpleTableWithEnum_uc_add+0x74>
   1305c:	ldr	r0, [sp, #8]
   13060:	movw	r1, #2
   13064:	movw	r2, #1
   13068:	movw	r3, #1
   1306c:	uxth	r3, r3
   13070:	bl	0 <flatcc_builder_table_add>
   13074:	str	r0, [sp]
   13078:	movw	r1, #0
   1307c:	cmp	r0, r1
   13080:	bne	13090 <MyGame_Example_TestSimpleTableWithEnum_uc_add+0x60>
   13084:	mvn	r0, #0
   13088:	str	r0, [fp, #-4]
   1308c:	b	130a4 <MyGame_Example_TestSimpleTableWithEnum_uc_add+0x74>
   13090:	ldr	r0, [sp]
   13094:	ldrb	r1, [sp, #7]
   13098:	bl	1004c <flatbuffers_uint8_assign_to_pe>
   1309c:	movw	r1, #0
   130a0:	str	r1, [fp, #-4]
   130a4:	ldr	r0, [fp, #-4]
   130a8:	mov	sp, fp
   130ac:	pop	{fp, pc}

000130b0 <MyGame_Example_TestSimpleTableWithEnum_uc2_add>:
   130b0:	push	{fp, lr}
   130b4:	mov	fp, sp
   130b8:	sub	sp, sp, #16
   130bc:	str	r0, [sp, #8]
   130c0:	strb	r1, [sp, #7]
   130c4:	ldrb	r0, [sp, #7]
   130c8:	cmp	r0, #2
   130cc:	bne	130dc <MyGame_Example_TestSimpleTableWithEnum_uc2_add+0x2c>
   130d0:	movw	r0, #0
   130d4:	str	r0, [fp, #-4]
   130d8:	b	13124 <MyGame_Example_TestSimpleTableWithEnum_uc2_add+0x74>
   130dc:	ldr	r0, [sp, #8]
   130e0:	movw	r1, #3
   130e4:	movw	r2, #1
   130e8:	movw	r3, #1
   130ec:	uxth	r3, r3
   130f0:	bl	0 <flatcc_builder_table_add>
   130f4:	str	r0, [sp]
   130f8:	movw	r1, #0
   130fc:	cmp	r0, r1
   13100:	bne	13110 <MyGame_Example_TestSimpleTableWithEnum_uc2_add+0x60>
   13104:	mvn	r0, #0
   13108:	str	r0, [fp, #-4]
   1310c:	b	13124 <MyGame_Example_TestSimpleTableWithEnum_uc2_add+0x74>
   13110:	ldr	r0, [sp]
   13114:	ldrb	r1, [sp, #7]
   13118:	bl	1004c <flatbuffers_uint8_assign_to_pe>
   1311c:	movw	r1, #0
   13120:	str	r1, [fp, #-4]
   13124:	ldr	r0, [fp, #-4]
   13128:	mov	sp, fp
   1312c:	pop	{fp, pc}

00013130 <MyGame_Example_TestSimpleTableWithEnum_end>:
   13130:	push	{fp, lr}
   13134:	mov	fp, sp
   13138:	sub	sp, sp, #8
   1313c:	str	r0, [sp, #4]
   13140:	ldr	r0, [sp, #4]
   13144:	movw	r1, #0
   13148:	movt	r1, #0
   1314c:	movw	r2, #0
   13150:	bl	0 <flatcc_builder_check_required>
   13154:	cmp	r0, #0
   13158:	beq	13160 <MyGame_Example_TestSimpleTableWithEnum_end+0x30>
   1315c:	b	13180 <MyGame_Example_TestSimpleTableWithEnum_end+0x50>
   13160:	movw	r0, #0
   13164:	movt	r0, #0
   13168:	movw	r1, #0
   1316c:	movt	r1, #0
   13170:	movw	r2, #217	; 0xd9
   13174:	movw	r3, #0
   13178:	movt	r3, #0
   1317c:	bl	0 <__assert_fail>
   13180:	ldr	r0, [sp, #4]
   13184:	bl	0 <flatcc_builder_end_table>
   13188:	mov	sp, fp
   1318c:	pop	{fp, pc}

00013190 <MyGame_Example_Alt_start>:
   13190:	push	{fp, lr}
   13194:	mov	fp, sp
   13198:	sub	sp, sp, #8
   1319c:	str	r0, [sp, #4]
   131a0:	ldr	r0, [sp, #4]
   131a4:	movw	r1, #4
   131a8:	bl	0 <flatcc_builder_start_table>
   131ac:	mov	sp, fp
   131b0:	pop	{fp, pc}

000131b4 <MyGame_Example_Alt_end>:
   131b4:	push	{fp, lr}
   131b8:	mov	fp, sp
   131bc:	sub	sp, sp, #8
   131c0:	str	r0, [sp, #4]
   131c4:	ldr	r0, [sp, #4]
   131c8:	movw	r1, #0
   131cc:	movt	r1, #0
   131d0:	movw	r2, #0
   131d4:	bl	0 <flatcc_builder_check_required>
   131d8:	cmp	r0, #0
   131dc:	beq	131e4 <MyGame_Example_Alt_end+0x30>
   131e0:	b	13204 <MyGame_Example_Alt_end+0x50>
   131e4:	movw	r0, #0
   131e8:	movt	r0, #0
   131ec:	movw	r1, #0
   131f0:	movt	r1, #0
   131f4:	movw	r2, #223	; 0xdf
   131f8:	movw	r3, #0
   131fc:	movt	r3, #0
   13200:	bl	0 <__assert_fail>
   13204:	ldr	r0, [sp, #4]
   13208:	bl	0 <flatcc_builder_end_table>
   1320c:	mov	sp, fp
   13210:	pop	{fp, pc}

00013214 <MyGame_Example_Monster_test_Alt_add>:
   13214:	push	{fp, lr}
   13218:	mov	fp, sp
   1321c:	sub	sp, sp, #24
   13220:	str	r0, [fp, #-4]
   13224:	str	r1, [fp, #-8]
   13228:	ldr	r0, [fp, #-4]
   1322c:	ldr	r1, [fp, #-8]
   13230:	add	r2, sp, #8
   13234:	str	r0, [sp, #4]
   13238:	mov	r0, r2
   1323c:	bl	13258 <MyGame_Example_Any_as_Alt>
   13240:	ldr	r1, [sp, #8]
   13244:	ldr	r2, [sp, #12]
   13248:	ldr	r0, [sp, #4]
   1324c:	bl	5f88 <MyGame_Example_Monster_test_add>
   13250:	mov	sp, fp
   13254:	pop	{fp, pc}

00013258 <MyGame_Example_Any_as_Alt>:
   13258:	sub	sp, sp, #4
   1325c:	str	r1, [sp]
   13260:	movw	r1, #4
   13264:	strb	r1, [r0]
   13268:	ldr	r1, [sp]
   1326c:	str	r1, [r0, #4]
   13270:	add	sp, sp, #4
   13274:	bx	lr

00013278 <flatbuffers_union_type_read_from_pe>:
   13278:	push	{fp, lr}
   1327c:	mov	fp, sp
   13280:	sub	sp, sp, #8
   13284:	str	r0, [sp, #4]
   13288:	ldr	r0, [sp, #4]
   1328c:	ldrb	r0, [r0]
   13290:	bl	132a0 <flatbuffers_union_type_cast_from_pe>
   13294:	and	r0, r0, #255	; 0xff
   13298:	mov	sp, fp
   1329c:	pop	{fp, pc}

000132a0 <flatbuffers_union_type_cast_from_pe>:
   132a0:	sub	sp, sp, #4
   132a4:	strb	r0, [sp, #3]
   132a8:	ldrb	r0, [sp, #3]
   132ac:	add	sp, sp, #4
   132b0:	bx	lr

000132b4 <Fantasy_Movie_start>:
   132b4:	push	{fp, lr}
   132b8:	mov	fp, sp
   132bc:	sub	sp, sp, #8
   132c0:	str	r0, [sp, #4]
   132c4:	ldr	r0, [sp, #4]
   132c8:	movw	r1, #10
   132cc:	bl	0 <flatcc_builder_start_table>
   132d0:	mov	sp, fp
   132d4:	pop	{fp, pc}

000132d8 <Fantasy_BookReader_start>:
   132d8:	push	{fp, lr}
   132dc:	mov	fp, sp
   132e0:	sub	sp, sp, #8
   132e4:	str	r0, [sp, #4]
   132e8:	ldr	r0, [sp, #4]
   132ec:	movw	r1, #4
   132f0:	movw	r2, #4
   132f4:	uxth	r2, r2
   132f8:	bl	0 <flatcc_builder_start_struct>
   132fc:	mov	sp, fp
   13300:	pop	{fp, pc}

00013304 <Fantasy_BookReader_assign_to_pe>:
   13304:	push	{fp, lr}
   13308:	mov	fp, sp
   1330c:	sub	sp, sp, #16
   13310:	str	r0, [fp, #-4]
   13314:	str	r1, [sp, #8]
   13318:	ldr	r0, [fp, #-4]
   1331c:	ldr	r1, [sp, #8]
   13320:	bl	fea4 <flatbuffers_int32_assign_to_pe>
   13324:	ldr	r1, [fp, #-4]
   13328:	str	r0, [sp, #4]
   1332c:	mov	r0, r1
   13330:	mov	sp, fp
   13334:	pop	{fp, pc}

00013338 <Fantasy_BookReader_end_pe>:
   13338:	push	{fp, lr}
   1333c:	mov	fp, sp
   13340:	sub	sp, sp, #8
   13344:	str	r0, [sp, #4]
   13348:	ldr	r0, [sp, #4]
   1334c:	bl	0 <flatcc_builder_end_struct>
   13350:	mov	sp, fp
   13354:	pop	{fp, pc}

00013358 <Fantasy_Rapunzel_start>:
   13358:	push	{fp, lr}
   1335c:	mov	fp, sp
   13360:	sub	sp, sp, #8
   13364:	str	r0, [sp, #4]
   13368:	ldr	r0, [sp, #4]
   1336c:	movw	r1, #2
   13370:	movw	r2, #2
   13374:	uxth	r2, r2
   13378:	bl	0 <flatcc_builder_start_struct>
   1337c:	mov	sp, fp
   13380:	pop	{fp, pc}

00013384 <Fantasy_Rapunzel_assign_to_pe>:
   13384:	push	{fp, lr}
   13388:	mov	fp, sp
   1338c:	sub	sp, sp, #16
   13390:	str	r0, [fp, #-4]
   13394:	strh	r1, [fp, #-6]
   13398:	ldr	r0, [fp, #-4]
   1339c:	ldrh	r1, [fp, #-6]
   133a0:	bl	ffc4 <flatbuffers_uint16_assign_to_pe>
   133a4:	ldr	r1, [fp, #-4]
   133a8:	str	r0, [sp, #4]
   133ac:	mov	r0, r1
   133b0:	mov	sp, fp
   133b4:	pop	{fp, pc}

000133b8 <Fantasy_Rapunzel_end_pe>:
   133b8:	push	{fp, lr}
   133bc:	mov	fp, sp
   133c0:	sub	sp, sp, #8
   133c4:	str	r0, [sp, #4]
   133c8:	ldr	r0, [sp, #4]
   133cc:	bl	0 <flatcc_builder_end_struct>
   133d0:	mov	sp, fp
   133d4:	pop	{fp, pc}

000133d8 <Fantasy_Movie_main_character_add>:
   133d8:	push	{fp, lr}
   133dc:	mov	fp, sp
   133e0:	sub	sp, sp, #24
   133e4:	str	r1, [sp, #12]
   133e8:	str	r2, [sp, #16]
   133ec:	str	r0, [sp, #8]
   133f0:	ldrb	r0, [sp, #12]
   133f4:	cmp	r0, #0
   133f8:	bne	13408 <Fantasy_Movie_main_character_add+0x30>
   133fc:	movw	r0, #0
   13400:	str	r0, [fp, #-4]
   13404:	b	13490 <Fantasy_Movie_main_character_add+0xb8>
   13408:	ldr	r0, [sp, #16]
   1340c:	cmp	r0, #0
   13410:	bne	13420 <Fantasy_Movie_main_character_add+0x48>
   13414:	mvn	r0, #0
   13418:	str	r0, [fp, #-4]
   1341c:	b	13490 <Fantasy_Movie_main_character_add+0xb8>
   13420:	ldr	r0, [sp, #8]
   13424:	movw	r1, #0
   13428:	movw	r2, #1
   1342c:	movw	r3, #1
   13430:	uxth	r3, r3
   13434:	bl	0 <flatcc_builder_table_add>
   13438:	str	r0, [sp]
   1343c:	movw	r1, #0
   13440:	cmp	r0, r1
   13444:	beq	13464 <Fantasy_Movie_main_character_add+0x8c>
   13448:	ldr	r0, [sp, #8]
   1344c:	movw	r1, #1
   13450:	bl	0 <flatcc_builder_table_add_offset>
   13454:	str	r0, [sp, #4]
   13458:	movw	r1, #0
   1345c:	cmp	r0, r1
   13460:	bne	13470 <Fantasy_Movie_main_character_add+0x98>
   13464:	mvn	r0, #0
   13468:	str	r0, [fp, #-4]
   1346c:	b	13490 <Fantasy_Movie_main_character_add+0xb8>
   13470:	ldrb	r0, [sp, #12]
   13474:	ldr	r1, [sp]
   13478:	strb	r0, [r1]
   1347c:	ldr	r0, [sp, #16]
   13480:	ldr	r1, [sp, #4]
   13484:	str	r0, [r1]
   13488:	movw	r0, #0
   1348c:	str	r0, [fp, #-4]
   13490:	ldr	r0, [fp, #-4]
   13494:	mov	sp, fp
   13498:	pop	{fp, pc}

0001349c <Fantasy_Movie_cameo_add>:
   1349c:	push	{fp, lr}
   134a0:	mov	fp, sp
   134a4:	sub	sp, sp, #24
   134a8:	str	r1, [sp, #12]
   134ac:	str	r2, [sp, #16]
   134b0:	str	r0, [sp, #8]
   134b4:	ldrb	r0, [sp, #12]
   134b8:	cmp	r0, #0
   134bc:	bne	134cc <Fantasy_Movie_cameo_add+0x30>
   134c0:	movw	r0, #0
   134c4:	str	r0, [fp, #-4]
   134c8:	b	13554 <Fantasy_Movie_cameo_add+0xb8>
   134cc:	ldr	r0, [sp, #16]
   134d0:	cmp	r0, #0
   134d4:	bne	134e4 <Fantasy_Movie_cameo_add+0x48>
   134d8:	mvn	r0, #0
   134dc:	str	r0, [fp, #-4]
   134e0:	b	13554 <Fantasy_Movie_cameo_add+0xb8>
   134e4:	ldr	r0, [sp, #8]
   134e8:	movw	r1, #6
   134ec:	movw	r2, #1
   134f0:	movw	r3, #1
   134f4:	uxth	r3, r3
   134f8:	bl	0 <flatcc_builder_table_add>
   134fc:	str	r0, [sp]
   13500:	movw	r1, #0
   13504:	cmp	r0, r1
   13508:	beq	13528 <Fantasy_Movie_cameo_add+0x8c>
   1350c:	ldr	r0, [sp, #8]
   13510:	movw	r1, #7
   13514:	bl	0 <flatcc_builder_table_add_offset>
   13518:	str	r0, [sp, #4]
   1351c:	movw	r1, #0
   13520:	cmp	r0, r1
   13524:	bne	13534 <Fantasy_Movie_cameo_add+0x98>
   13528:	mvn	r0, #0
   1352c:	str	r0, [fp, #-4]
   13530:	b	13554 <Fantasy_Movie_cameo_add+0xb8>
   13534:	ldrb	r0, [sp, #12]
   13538:	ldr	r1, [sp]
   1353c:	strb	r0, [r1]
   13540:	ldr	r0, [sp, #16]
   13544:	ldr	r1, [sp, #4]
   13548:	str	r0, [r1]
   1354c:	movw	r0, #0
   13550:	str	r0, [fp, #-4]
   13554:	ldr	r0, [fp, #-4]
   13558:	mov	sp, fp
   1355c:	pop	{fp, pc}

00013560 <Fantasy_Attacker_start>:
   13560:	push	{fp, lr}
   13564:	mov	fp, sp
   13568:	sub	sp, sp, #8
   1356c:	str	r0, [sp, #4]
   13570:	ldr	r0, [sp, #4]
   13574:	movw	r1, #1
   13578:	bl	0 <flatcc_builder_start_table>
   1357c:	mov	sp, fp
   13580:	pop	{fp, pc}

00013584 <Fantasy_Attacker_sword_attack_damage_add>:
   13584:	push	{fp, lr}
   13588:	mov	fp, sp
   1358c:	sub	sp, sp, #16
   13590:	str	r0, [sp, #8]
   13594:	str	r1, [sp, #4]
   13598:	ldr	r0, [sp, #4]
   1359c:	cmp	r0, #0
   135a0:	bne	135b0 <Fantasy_Attacker_sword_attack_damage_add+0x2c>
   135a4:	movw	r0, #0
   135a8:	str	r0, [fp, #-4]
   135ac:	b	135f8 <Fantasy_Attacker_sword_attack_damage_add+0x74>
   135b0:	ldr	r0, [sp, #8]
   135b4:	movw	r1, #0
   135b8:	movw	r2, #4
   135bc:	movw	r3, #4
   135c0:	uxth	r3, r3
   135c4:	bl	0 <flatcc_builder_table_add>
   135c8:	str	r0, [sp]
   135cc:	movw	r1, #0
   135d0:	cmp	r0, r1
   135d4:	bne	135e4 <Fantasy_Attacker_sword_attack_damage_add+0x60>
   135d8:	mvn	r0, #0
   135dc:	str	r0, [fp, #-4]
   135e0:	b	135f8 <Fantasy_Attacker_sword_attack_damage_add+0x74>
   135e4:	ldr	r0, [sp]
   135e8:	ldr	r1, [sp, #4]
   135ec:	bl	fea4 <flatbuffers_int32_assign_to_pe>
   135f0:	movw	r1, #0
   135f4:	str	r1, [fp, #-4]
   135f8:	ldr	r0, [fp, #-4]
   135fc:	mov	sp, fp
   13600:	pop	{fp, pc}

00013604 <Fantasy_Attacker_end>:
   13604:	push	{fp, lr}
   13608:	mov	fp, sp
   1360c:	sub	sp, sp, #8
   13610:	str	r0, [sp, #4]
   13614:	ldr	r0, [sp, #4]
   13618:	movw	r1, #0
   1361c:	movt	r1, #0
   13620:	movw	r2, #0
   13624:	bl	0 <flatcc_builder_check_required>
   13628:	cmp	r0, #0
   1362c:	beq	13634 <Fantasy_Attacker_end+0x30>
   13630:	b	13654 <Fantasy_Attacker_end+0x50>
   13634:	movw	r0, #0
   13638:	movt	r0, #0
   1363c:	movw	r1, #0
   13640:	movt	r1, #0
   13644:	movw	r2, #239	; 0xef
   13648:	movw	r3, #0
   1364c:	movt	r3, #0
   13650:	bl	0 <__assert_fail>
   13654:	ldr	r0, [sp, #4]
   13658:	bl	0 <flatcc_builder_end_table>
   1365c:	mov	sp, fp
   13660:	pop	{fp, pc}

00013664 <Fantasy_Movie_antagonist_add>:
   13664:	push	{fp, lr}
   13668:	mov	fp, sp
   1366c:	sub	sp, sp, #24
   13670:	str	r1, [sp, #12]
   13674:	str	r2, [sp, #16]
   13678:	str	r0, [sp, #8]
   1367c:	ldrb	r0, [sp, #12]
   13680:	cmp	r0, #0
   13684:	bne	13694 <Fantasy_Movie_antagonist_add+0x30>
   13688:	movw	r0, #0
   1368c:	str	r0, [fp, #-4]
   13690:	b	1371c <Fantasy_Movie_antagonist_add+0xb8>
   13694:	ldr	r0, [sp, #16]
   13698:	cmp	r0, #0
   1369c:	bne	136ac <Fantasy_Movie_antagonist_add+0x48>
   136a0:	mvn	r0, #0
   136a4:	str	r0, [fp, #-4]
   136a8:	b	1371c <Fantasy_Movie_antagonist_add+0xb8>
   136ac:	ldr	r0, [sp, #8]
   136b0:	movw	r1, #2
   136b4:	movw	r2, #1
   136b8:	movw	r3, #1
   136bc:	uxth	r3, r3
   136c0:	bl	0 <flatcc_builder_table_add>
   136c4:	str	r0, [sp]
   136c8:	movw	r1, #0
   136cc:	cmp	r0, r1
   136d0:	beq	136f0 <Fantasy_Movie_antagonist_add+0x8c>
   136d4:	ldr	r0, [sp, #8]
   136d8:	movw	r1, #3
   136dc:	bl	0 <flatcc_builder_table_add_offset>
   136e0:	str	r0, [sp, #4]
   136e4:	movw	r1, #0
   136e8:	cmp	r0, r1
   136ec:	bne	136fc <Fantasy_Movie_antagonist_add+0x98>
   136f0:	mvn	r0, #0
   136f4:	str	r0, [fp, #-4]
   136f8:	b	1371c <Fantasy_Movie_antagonist_add+0xb8>
   136fc:	ldrb	r0, [sp, #12]
   13700:	ldr	r1, [sp]
   13704:	strb	r0, [r1]
   13708:	ldr	r0, [sp, #16]
   1370c:	ldr	r1, [sp, #4]
   13710:	str	r0, [r1]
   13714:	movw	r0, #0
   13718:	str	r0, [fp, #-4]
   1371c:	ldr	r0, [fp, #-4]
   13720:	mov	sp, fp
   13724:	pop	{fp, pc}

00013728 <Fantasy_Character_as_MuLan>:
   13728:	sub	sp, sp, #4
   1372c:	str	r1, [sp]
   13730:	movw	r1, #2
   13734:	strb	r1, [r0]
   13738:	ldr	r1, [sp]
   1373c:	str	r1, [r0, #4]
   13740:	add	sp, sp, #4
   13744:	bx	lr

00013748 <Fantasy_Movie_side_kick_Other_add>:
   13748:	push	{fp, lr}
   1374c:	mov	fp, sp
   13750:	sub	sp, sp, #24
   13754:	str	r0, [fp, #-4]
   13758:	str	r1, [fp, #-8]
   1375c:	ldr	r0, [fp, #-4]
   13760:	ldr	r1, [fp, #-8]
   13764:	add	r2, sp, #8
   13768:	str	r0, [sp, #4]
   1376c:	mov	r0, r2
   13770:	bl	c2cc <Fantasy_Character_as_Other>
   13774:	ldr	r1, [sp, #8]
   13778:	ldr	r2, [sp, #12]
   1377c:	ldr	r0, [sp, #4]
   13780:	bl	1378c <Fantasy_Movie_side_kick_add>
   13784:	mov	sp, fp
   13788:	pop	{fp, pc}

0001378c <Fantasy_Movie_side_kick_add>:
   1378c:	push	{fp, lr}
   13790:	mov	fp, sp
   13794:	sub	sp, sp, #24
   13798:	str	r1, [sp, #12]
   1379c:	str	r2, [sp, #16]
   137a0:	str	r0, [sp, #8]
   137a4:	ldrb	r0, [sp, #12]
   137a8:	cmp	r0, #0
   137ac:	bne	137bc <Fantasy_Movie_side_kick_add+0x30>
   137b0:	movw	r0, #0
   137b4:	str	r0, [fp, #-4]
   137b8:	b	13844 <Fantasy_Movie_side_kick_add+0xb8>
   137bc:	ldr	r0, [sp, #16]
   137c0:	cmp	r0, #0
   137c4:	bne	137d4 <Fantasy_Movie_side_kick_add+0x48>
   137c8:	mvn	r0, #0
   137cc:	str	r0, [fp, #-4]
   137d0:	b	13844 <Fantasy_Movie_side_kick_add+0xb8>
   137d4:	ldr	r0, [sp, #8]
   137d8:	movw	r1, #4
   137dc:	movw	r2, #1
   137e0:	movw	r3, #1
   137e4:	uxth	r3, r3
   137e8:	bl	0 <flatcc_builder_table_add>
   137ec:	str	r0, [sp]
   137f0:	movw	r1, #0
   137f4:	cmp	r0, r1
   137f8:	beq	13818 <Fantasy_Movie_side_kick_add+0x8c>
   137fc:	ldr	r0, [sp, #8]
   13800:	movw	r1, #5
   13804:	bl	0 <flatcc_builder_table_add_offset>
   13808:	str	r0, [sp, #4]
   1380c:	movw	r1, #0
   13810:	cmp	r0, r1
   13814:	bne	13824 <Fantasy_Movie_side_kick_add+0x98>
   13818:	mvn	r0, #0
   1381c:	str	r0, [fp, #-4]
   13820:	b	13844 <Fantasy_Movie_side_kick_add+0xb8>
   13824:	ldrb	r0, [sp, #12]
   13828:	ldr	r1, [sp]
   1382c:	strb	r0, [r1]
   13830:	ldr	r0, [sp, #16]
   13834:	ldr	r1, [sp, #4]
   13838:	str	r0, [r1]
   1383c:	movw	r0, #0
   13840:	str	r0, [fp, #-4]
   13844:	ldr	r0, [fp, #-4]
   13848:	mov	sp, fp
   1384c:	pop	{fp, pc}

00013850 <Fantasy_Character_as_Belle>:
   13850:	sub	sp, sp, #4
   13854:	str	r1, [sp]
   13858:	movw	r1, #9
   1385c:	strb	r1, [r0]
   13860:	ldr	r1, [sp]
   13864:	str	r1, [r0, #4]
   13868:	add	sp, sp, #4
   1386c:	bx	lr

00013870 <Fantasy_BookReader_end>:
   13870:	push	{fp, lr}
   13874:	mov	fp, sp
   13878:	sub	sp, sp, #8
   1387c:	str	r0, [sp, #4]
   13880:	ldr	r0, [sp, #4]
   13884:	bl	0 <flatcc_builder_end_struct>
   13888:	mov	sp, fp
   1388c:	pop	{fp, pc}

00013890 <Fantasy_Movie_characters_add>:
   13890:	push	{fp, lr}
   13894:	mov	fp, sp
   13898:	sub	sp, sp, #24
   1389c:	str	r1, [sp, #12]
   138a0:	str	r2, [sp, #16]
   138a4:	str	r0, [sp, #8]
   138a8:	ldr	r0, [sp, #12]
   138ac:	cmp	r0, #0
   138b0:	beq	138c0 <Fantasy_Movie_characters_add+0x30>
   138b4:	ldr	r0, [sp, #16]
   138b8:	cmp	r0, #0
   138bc:	bne	138e8 <Fantasy_Movie_characters_add+0x58>
   138c0:	ldr	r0, [sp, #12]
   138c4:	ldr	r1, [sp, #16]
   138c8:	cmp	r0, r1
   138cc:	movw	r0, #0
   138d0:	moveq	r0, #1
   138d4:	tst	r0, #1
   138d8:	movw	r0, #0
   138dc:	mvneq	r0, #0
   138e0:	str	r0, [fp, #-4]
   138e4:	b	13958 <Fantasy_Movie_characters_add+0xc8>
   138e8:	ldr	r0, [sp, #8]
   138ec:	movw	r1, #8
   138f0:	bl	0 <flatcc_builder_table_add_offset>
   138f4:	str	r0, [sp, #4]
   138f8:	movw	r1, #0
   138fc:	cmp	r0, r1
   13900:	bne	13910 <Fantasy_Movie_characters_add+0x80>
   13904:	mvn	r0, #0
   13908:	str	r0, [fp, #-4]
   1390c:	b	13958 <Fantasy_Movie_characters_add+0xc8>
   13910:	ldr	r0, [sp, #12]
   13914:	ldr	r1, [sp, #4]
   13918:	str	r0, [r1]
   1391c:	ldr	r0, [sp, #8]
   13920:	movw	r1, #9
   13924:	bl	0 <flatcc_builder_table_add_offset>
   13928:	str	r0, [sp, #4]
   1392c:	movw	r1, #0
   13930:	cmp	r0, r1
   13934:	bne	13944 <Fantasy_Movie_characters_add+0xb4>
   13938:	mvn	r0, #0
   1393c:	str	r0, [fp, #-4]
   13940:	b	13958 <Fantasy_Movie_characters_add+0xc8>
   13944:	ldr	r0, [sp, #16]
   13948:	ldr	r1, [sp, #4]
   1394c:	str	r0, [r1]
   13950:	movw	r0, #0
   13954:	str	r0, [fp, #-4]
   13958:	ldr	r0, [fp, #-4]
   1395c:	mov	sp, fp
   13960:	pop	{fp, pc}

00013964 <Fantasy_Movie_end>:
   13964:	push	{fp, lr}
   13968:	mov	fp, sp
   1396c:	sub	sp, sp, #8
   13970:	str	r0, [sp, #4]
   13974:	ldr	r0, [sp, #4]
   13978:	movw	r1, #0
   1397c:	movt	r1, #0
   13980:	movw	r2, #0
   13984:	bl	0 <flatcc_builder_check_required>
   13988:	cmp	r0, #0
   1398c:	beq	13994 <Fantasy_Movie_end+0x30>
   13990:	b	139b4 <Fantasy_Movie_end+0x50>
   13994:	movw	r0, #0
   13998:	movt	r0, #0
   1399c:	movw	r1, #0
   139a0:	movt	r1, #0
   139a4:	movw	r2, #241	; 0xf1
   139a8:	movw	r3, #0
   139ac:	movt	r3, #0
   139b0:	bl	0 <__assert_fail>
   139b4:	ldr	r0, [sp, #4]
   139b8:	bl	0 <flatcc_builder_end_table>
   139bc:	mov	sp, fp
   139c0:	pop	{fp, pc}

000139c4 <Fantasy_Movie_main_character_type>:
   139c4:	push	{fp, lr}
   139c8:	mov	fp, sp
   139cc:	sub	sp, sp, #24
   139d0:	str	r0, [fp, #-4]
   139d4:	movw	r0, #0
   139d8:	strh	r0, [fp, #-6]
   139dc:	ldr	r0, [fp, #-4]
   139e0:	movw	r1, #0
   139e4:	cmp	r0, r1
   139e8:	beq	139f4 <Fantasy_Movie_main_character_type+0x30>
   139ec:	b	139f0 <Fantasy_Movie_main_character_type+0x2c>
   139f0:	b	13a14 <Fantasy_Movie_main_character_type+0x50>
   139f4:	movw	r0, #0
   139f8:	movt	r0, #0
   139fc:	movw	r1, #0
   13a00:	movt	r1, #0
   13a04:	movw	r2, #819	; 0x333
   13a08:	movw	r3, #0
   13a0c:	movt	r3, #0
   13a10:	bl	0 <__assert_fail>
   13a14:	mov	r0, #0
   13a18:	strh	r0, [fp, #-8]
   13a1c:	ldr	r0, [fp, #-4]
   13a20:	str	r0, [sp, #8]
   13a24:	bl	f4c8 <__flatbuffers_soffset_read_from_pe>
   13a28:	ldr	r1, [sp, #8]
   13a2c:	sub	r0, r1, r0
   13a30:	str	r0, [sp, #12]
   13a34:	ldr	r0, [sp, #12]
   13a38:	bl	f4ec <__flatbuffers_voffset_read_from_pe>
   13a3c:	ldrh	r1, [fp, #-8]
   13a40:	add	r1, r1, #3
   13a44:	lsl	r1, r1, #1
   13a48:	cmp	r0, r1
   13a4c:	bcc	13a68 <Fantasy_Movie_main_character_type+0xa4>
   13a50:	ldr	r0, [sp, #12]
   13a54:	ldrh	r1, [fp, #-8]
   13a58:	add	r0, r0, r1, lsl #1
   13a5c:	add	r0, r0, #4
   13a60:	bl	f4ec <__flatbuffers_voffset_read_from_pe>
   13a64:	strh	r0, [fp, #-6]
   13a68:	ldrh	r0, [fp, #-6]
   13a6c:	cmp	r0, #0
   13a70:	beq	13a90 <Fantasy_Movie_main_character_type+0xcc>
   13a74:	ldr	r0, [fp, #-4]
   13a78:	ldrh	r1, [fp, #-6]
   13a7c:	add	r0, r0, r1
   13a80:	bl	11c28 <__flatbuffers_utype_read_from_pe>
   13a84:	and	r0, r0, #255	; 0xff
   13a88:	str	r0, [sp, #4]
   13a8c:	b	13a9c <Fantasy_Movie_main_character_type+0xd8>
   13a90:	movw	r0, #0
   13a94:	str	r0, [sp, #4]
   13a98:	b	13a9c <Fantasy_Movie_main_character_type+0xd8>
   13a9c:	ldr	r0, [sp, #4]
   13aa0:	and	r0, r0, #255	; 0xff
   13aa4:	mov	sp, fp
   13aa8:	pop	{fp, pc}

00013aac <Fantasy_Movie_main_character>:
   13aac:	push	{fp, lr}
   13ab0:	mov	fp, sp
   13ab4:	sub	sp, sp, #32
   13ab8:	str	r0, [fp, #-8]
   13abc:	movw	r0, #0
   13ac0:	strh	r0, [fp, #-14]
   13ac4:	ldr	r0, [fp, #-8]
   13ac8:	movw	r1, #0
   13acc:	cmp	r0, r1
   13ad0:	beq	13adc <Fantasy_Movie_main_character+0x30>
   13ad4:	b	13ad8 <Fantasy_Movie_main_character+0x2c>
   13ad8:	b	13afc <Fantasy_Movie_main_character+0x50>
   13adc:	movw	r0, #0
   13ae0:	movt	r0, #0
   13ae4:	movw	r1, #0
   13ae8:	movt	r1, #0
   13aec:	movw	r2, #819	; 0x333
   13af0:	movw	r3, #0
   13af4:	movt	r3, #0
   13af8:	bl	0 <__assert_fail>
   13afc:	mov	r0, #1
   13b00:	strh	r0, [sp, #16]
   13b04:	ldr	r0, [fp, #-8]
   13b08:	str	r0, [sp, #8]
   13b0c:	bl	f4c8 <__flatbuffers_soffset_read_from_pe>
   13b10:	ldr	r1, [sp, #8]
   13b14:	sub	r0, r1, r0
   13b18:	str	r0, [sp, #12]
   13b1c:	ldr	r0, [sp, #12]
   13b20:	bl	f4ec <__flatbuffers_voffset_read_from_pe>
   13b24:	ldrh	r1, [sp, #16]
   13b28:	add	r1, r1, #3
   13b2c:	lsl	r1, r1, #1
   13b30:	cmp	r0, r1
   13b34:	bcc	13b50 <Fantasy_Movie_main_character+0xa4>
   13b38:	ldr	r0, [sp, #12]
   13b3c:	ldrh	r1, [sp, #16]
   13b40:	add	r0, r0, r1, lsl #1
   13b44:	add	r0, r0, #4
   13b48:	bl	f4ec <__flatbuffers_voffset_read_from_pe>
   13b4c:	strh	r0, [fp, #-14]
   13b50:	ldrsh	r0, [fp, #-14]
   13b54:	cmp	r0, #0
   13b58:	beq	13b90 <Fantasy_Movie_main_character+0xe4>
   13b5c:	ldr	r0, [fp, #-8]
   13b60:	ldrh	r1, [fp, #-14]
   13b64:	add	r0, r0, r1
   13b68:	str	r0, [fp, #-12]
   13b6c:	ldr	r0, [fp, #-12]
   13b70:	ldr	r1, [fp, #-12]
   13b74:	str	r0, [sp, #4]
   13b78:	mov	r0, r1
   13b7c:	bl	f490 <__flatbuffers_uoffset_read_from_pe>
   13b80:	ldr	r1, [sp, #4]
   13b84:	add	r0, r1, r0
   13b88:	str	r0, [fp, #-4]
   13b8c:	b	13b98 <Fantasy_Movie_main_character+0xec>
   13b90:	movw	r0, #0
   13b94:	str	r0, [fp, #-4]
   13b98:	ldr	r0, [fp, #-4]
   13b9c:	mov	sp, fp
   13ba0:	pop	{fp, pc}

00013ba4 <__flatbuffers_uoffset__size>:
   13ba4:	movw	r0, #4
   13ba8:	bx	lr

00013bac <Fantasy_Movie_characters>:
   13bac:	push	{fp, lr}
   13bb0:	mov	fp, sp
   13bb4:	sub	sp, sp, #32
   13bb8:	str	r0, [fp, #-8]
   13bbc:	movw	r0, #0
   13bc0:	strh	r0, [fp, #-14]
   13bc4:	ldr	r0, [fp, #-8]
   13bc8:	movw	r1, #0
   13bcc:	cmp	r0, r1
   13bd0:	beq	13bdc <Fantasy_Movie_characters+0x30>
   13bd4:	b	13bd8 <Fantasy_Movie_characters+0x2c>
   13bd8:	b	13bfc <Fantasy_Movie_characters+0x50>
   13bdc:	movw	r0, #0
   13be0:	movt	r0, #0
   13be4:	movw	r1, #0
   13be8:	movt	r1, #0
   13bec:	movw	r2, #823	; 0x337
   13bf0:	movw	r3, #0
   13bf4:	movt	r3, #0
   13bf8:	bl	0 <__assert_fail>
   13bfc:	mov	r0, #9
   13c00:	strh	r0, [sp, #16]
   13c04:	ldr	r0, [fp, #-8]
   13c08:	str	r0, [sp, #8]
   13c0c:	bl	f4c8 <__flatbuffers_soffset_read_from_pe>
   13c10:	ldr	r1, [sp, #8]
   13c14:	sub	r0, r1, r0
   13c18:	str	r0, [sp, #12]
   13c1c:	ldr	r0, [sp, #12]
   13c20:	bl	f4ec <__flatbuffers_voffset_read_from_pe>
   13c24:	ldrh	r1, [sp, #16]
   13c28:	add	r1, r1, #3
   13c2c:	lsl	r1, r1, #1
   13c30:	cmp	r0, r1
   13c34:	bcc	13c50 <Fantasy_Movie_characters+0xa4>
   13c38:	ldr	r0, [sp, #12]
   13c3c:	ldrh	r1, [sp, #16]
   13c40:	add	r0, r0, r1, lsl #1
   13c44:	add	r0, r0, #4
   13c48:	bl	f4ec <__flatbuffers_voffset_read_from_pe>
   13c4c:	strh	r0, [fp, #-14]
   13c50:	ldrsh	r0, [fp, #-14]
   13c54:	cmp	r0, #0
   13c58:	beq	13c94 <Fantasy_Movie_characters+0xe8>
   13c5c:	ldr	r0, [fp, #-8]
   13c60:	ldrh	r1, [fp, #-14]
   13c64:	add	r0, r0, r1
   13c68:	str	r0, [fp, #-12]
   13c6c:	ldr	r0, [fp, #-12]
   13c70:	add	r0, r0, #4
   13c74:	ldr	r1, [fp, #-12]
   13c78:	str	r0, [sp, #4]
   13c7c:	mov	r0, r1
   13c80:	bl	f490 <__flatbuffers_uoffset_read_from_pe>
   13c84:	ldr	r1, [sp, #4]
   13c88:	add	r0, r1, r0
   13c8c:	str	r0, [fp, #-4]
   13c90:	b	13c9c <Fantasy_Movie_characters+0xf0>
   13c94:	movw	r0, #0
   13c98:	str	r0, [fp, #-4]
   13c9c:	ldr	r0, [fp, #-4]
   13ca0:	mov	sp, fp
   13ca4:	pop	{fp, pc}

00013ca8 <flatbuffers_generic_vec_at_as_string>:
   13ca8:	push	{fp, lr}
   13cac:	mov	fp, sp
   13cb0:	sub	sp, sp, #16
   13cb4:	str	r0, [fp, #-4]
   13cb8:	str	r1, [sp, #8]
   13cbc:	ldr	r0, [fp, #-4]
   13cc0:	ldr	r1, [sp, #8]
   13cc4:	add	r0, r0, r1, lsl #2
   13cc8:	str	r0, [sp, #4]
   13ccc:	ldr	r0, [fp, #-4]
   13cd0:	bl	11b9c <flatbuffers_vec_len>
   13cd4:	ldr	r1, [sp, #8]
   13cd8:	cmp	r0, r1
   13cdc:	bls	13ce8 <flatbuffers_generic_vec_at_as_string+0x40>
   13ce0:	b	13ce4 <flatbuffers_generic_vec_at_as_string+0x3c>
   13ce4:	b	13d08 <flatbuffers_generic_vec_at_as_string+0x60>
   13ce8:	movw	r0, #0
   13cec:	movt	r0, #0
   13cf0:	movw	r1, #0
   13cf4:	movt	r1, #0
   13cf8:	movw	r2, #119	; 0x77
   13cfc:	movw	r3, #0
   13d00:	movt	r3, #0
   13d04:	bl	0 <__assert_fail>
   13d08:	ldr	r0, [sp, #4]
   13d0c:	ldr	r1, [sp, #4]
   13d10:	str	r0, [sp]
   13d14:	mov	r0, r1
   13d18:	bl	f490 <__flatbuffers_uoffset_read_from_pe>
   13d1c:	ldr	r1, [sp]
   13d20:	add	r0, r1, r0
   13d24:	add	r0, r0, #4
   13d28:	mov	sp, fp
   13d2c:	pop	{fp, pc}

00013d30 <MyGame_Example_Monster_testnestedflatbuffer_add>:
   13d30:	push	{fp, lr}
   13d34:	mov	fp, sp
   13d38:	sub	sp, sp, #16
   13d3c:	str	r0, [fp, #-4]
   13d40:	str	r1, [sp, #8]
   13d44:	ldr	r0, [sp, #8]
   13d48:	cmp	r0, #0
   13d4c:	beq	13d84 <MyGame_Example_Monster_testnestedflatbuffer_add+0x54>
   13d50:	ldr	r0, [fp, #-4]
   13d54:	movw	r1, #13
   13d58:	bl	0 <flatcc_builder_table_add_offset>
   13d5c:	str	r0, [sp, #4]
   13d60:	movw	r1, #0
   13d64:	cmp	r0, r1
   13d68:	beq	13d84 <MyGame_Example_Monster_testnestedflatbuffer_add+0x54>
   13d6c:	ldr	r0, [sp, #8]
   13d70:	ldr	r1, [sp, #4]
   13d74:	str	r0, [r1]
   13d78:	movw	r0, #0
   13d7c:	str	r0, [sp]
   13d80:	b	13d90 <MyGame_Example_Monster_testnestedflatbuffer_add+0x60>
   13d84:	mvn	r0, #0
   13d88:	str	r0, [sp]
   13d8c:	b	13d90 <MyGame_Example_Monster_testnestedflatbuffer_add+0x60>
   13d90:	ldr	r0, [sp]
   13d94:	mov	sp, fp
   13d98:	pop	{fp, pc}

00013d9c <MyGame_Example_Monster_testnestedflatbuffer>:
   13d9c:	push	{fp, lr}
   13da0:	mov	fp, sp
   13da4:	sub	sp, sp, #32
   13da8:	str	r0, [fp, #-8]
   13dac:	movw	r0, #0
   13db0:	strh	r0, [fp, #-14]
   13db4:	ldr	r0, [fp, #-8]
   13db8:	movw	r1, #0
   13dbc:	cmp	r0, r1
   13dc0:	beq	13dcc <MyGame_Example_Monster_testnestedflatbuffer+0x30>
   13dc4:	b	13dc8 <MyGame_Example_Monster_testnestedflatbuffer+0x2c>
   13dc8:	b	13dec <MyGame_Example_Monster_testnestedflatbuffer+0x50>
   13dcc:	movw	r0, #0
   13dd0:	movt	r0, #0
   13dd4:	movw	r1, #0
   13dd8:	movt	r1, #0
   13ddc:	movw	r2, #720	; 0x2d0
   13de0:	movw	r3, #0
   13de4:	movt	r3, #0
   13de8:	bl	0 <__assert_fail>
   13dec:	mov	r0, #13
   13df0:	strh	r0, [sp, #16]
   13df4:	ldr	r0, [fp, #-8]
   13df8:	str	r0, [sp, #8]
   13dfc:	bl	f4c8 <__flatbuffers_soffset_read_from_pe>
   13e00:	ldr	r1, [sp, #8]
   13e04:	sub	r0, r1, r0
   13e08:	str	r0, [sp, #12]
   13e0c:	ldr	r0, [sp, #12]
   13e10:	bl	f4ec <__flatbuffers_voffset_read_from_pe>
   13e14:	ldrh	r1, [sp, #16]
   13e18:	add	r1, r1, #3
   13e1c:	lsl	r1, r1, #1
   13e20:	cmp	r0, r1
   13e24:	bcc	13e40 <MyGame_Example_Monster_testnestedflatbuffer+0xa4>
   13e28:	ldr	r0, [sp, #12]
   13e2c:	ldrh	r1, [sp, #16]
   13e30:	add	r0, r0, r1, lsl #1
   13e34:	add	r0, r0, #4
   13e38:	bl	f4ec <__flatbuffers_voffset_read_from_pe>
   13e3c:	strh	r0, [fp, #-14]
   13e40:	ldrsh	r0, [fp, #-14]
   13e44:	cmp	r0, #0
   13e48:	beq	13e84 <MyGame_Example_Monster_testnestedflatbuffer+0xe8>
   13e4c:	ldr	r0, [fp, #-8]
   13e50:	ldrh	r1, [fp, #-14]
   13e54:	add	r0, r0, r1
   13e58:	str	r0, [fp, #-12]
   13e5c:	ldr	r0, [fp, #-12]
   13e60:	add	r0, r0, #4
   13e64:	ldr	r1, [fp, #-12]
   13e68:	str	r0, [sp, #4]
   13e6c:	mov	r0, r1
   13e70:	bl	f490 <__flatbuffers_uoffset_read_from_pe>
   13e74:	ldr	r1, [sp, #4]
   13e78:	add	r0, r1, r0
   13e7c:	str	r0, [fp, #-4]
   13e80:	b	13e8c <MyGame_Example_Monster_testnestedflatbuffer+0xf0>
   13e84:	movw	r0, #0
   13e88:	str	r0, [fp, #-4]
   13e8c:	ldr	r0, [fp, #-4]
   13e90:	mov	sp, fp
   13e94:	pop	{fp, pc}

00013e98 <MyGame_Example_Vec3_create>:
   13e98:	push	{fp, lr}
   13e9c:	mov	fp, sp
   13ea0:	sub	sp, sp, #48	; 0x30
   13ea4:	str	r0, [fp, #-8]
   13ea8:	vstr	s0, [fp, #-12]
   13eac:	vstr	s1, [fp, #-16]
   13eb0:	vstr	s2, [fp, #-20]	; 0xffffffec
   13eb4:	vstr	d2, [sp, #16]
   13eb8:	strb	r1, [sp, #15]
   13ebc:	strh	r2, [sp, #12]
   13ec0:	strb	r3, [sp, #11]
   13ec4:	ldr	r0, [fp, #-8]
   13ec8:	bl	13f38 <MyGame_Example_Vec3_start>
   13ecc:	str	r0, [sp, #4]
   13ed0:	ldr	r0, [sp, #4]
   13ed4:	movw	r1, #0
   13ed8:	cmp	r0, r1
   13edc:	bne	13eec <MyGame_Example_Vec3_create+0x54>
   13ee0:	movw	r0, #0
   13ee4:	str	r0, [fp, #-4]
   13ee8:	b	13f2c <MyGame_Example_Vec3_create+0x94>
   13eec:	ldr	r0, [sp, #4]
   13ef0:	vldr	s0, [fp, #-12]
   13ef4:	vldr	s1, [fp, #-16]
   13ef8:	vldr	s2, [fp, #-20]	; 0xffffffec
   13efc:	vldr	d2, [sp, #16]
   13f00:	ldrb	r1, [sp, #15]
   13f04:	ldrh	r2, [sp, #12]
   13f08:	sxtb	r1, r1
   13f0c:	sxth	r2, r2
   13f10:	ldrsb	r3, [sp, #11]
   13f14:	bl	13f64 <MyGame_Example_Vec3_assign_to_pe>
   13f18:	ldr	r1, [fp, #-8]
   13f1c:	str	r0, [sp]
   13f20:	mov	r0, r1
   13f24:	bl	14024 <MyGame_Example_Vec3_end_pe>
   13f28:	str	r0, [fp, #-4]
   13f2c:	ldr	r0, [fp, #-4]
   13f30:	mov	sp, fp
   13f34:	pop	{fp, pc}

00013f38 <MyGame_Example_Vec3_start>:
   13f38:	push	{fp, lr}
   13f3c:	mov	fp, sp
   13f40:	sub	sp, sp, #8
   13f44:	str	r0, [sp, #4]
   13f48:	ldr	r0, [sp, #4]
   13f4c:	movw	r1, #32
   13f50:	movw	r2, #16
   13f54:	uxth	r2, r2
   13f58:	bl	0 <flatcc_builder_start_struct>
   13f5c:	mov	sp, fp
   13f60:	pop	{fp, pc}

00013f64 <MyGame_Example_Vec3_assign_to_pe>:
   13f64:	push	{fp, lr}
   13f68:	mov	fp, sp
   13f6c:	sub	sp, sp, #56	; 0x38
   13f70:	str	r0, [fp, #-4]
   13f74:	vstr	s0, [fp, #-8]
   13f78:	vstr	s1, [fp, #-12]
   13f7c:	vstr	s2, [fp, #-16]
   13f80:	vstr	d2, [fp, #-24]	; 0xffffffe8
   13f84:	strb	r1, [fp, #-25]	; 0xffffffe7
   13f88:	strh	r2, [sp, #28]
   13f8c:	strb	r3, [sp, #27]
   13f90:	ldr	r0, [fp, #-4]
   13f94:	vldr	s0, [fp, #-8]
   13f98:	bl	ff2c <flatbuffers_float_assign_to_pe>
   13f9c:	ldr	r1, [fp, #-4]
   13fa0:	add	r1, r1, #4
   13fa4:	vldr	s0, [fp, #-12]
   13fa8:	str	r0, [sp, #20]
   13fac:	mov	r0, r1
   13fb0:	bl	ff2c <flatbuffers_float_assign_to_pe>
   13fb4:	ldr	r1, [fp, #-4]
   13fb8:	add	r1, r1, #8
   13fbc:	vldr	s0, [fp, #-16]
   13fc0:	str	r0, [sp, #16]
   13fc4:	mov	r0, r1
   13fc8:	bl	ff2c <flatbuffers_float_assign_to_pe>
   13fcc:	ldr	r1, [fp, #-4]
   13fd0:	add	r1, r1, #16
   13fd4:	vldr	d0, [fp, #-24]	; 0xffffffe8
   13fd8:	str	r0, [sp, #12]
   13fdc:	mov	r0, r1
   13fe0:	bl	fe58 <flatbuffers_double_assign_to_pe>
   13fe4:	ldrb	r1, [fp, #-25]	; 0xffffffe7
   13fe8:	ldr	r2, [fp, #-4]
   13fec:	strb	r1, [r2, #24]
   13ff0:	ldr	r1, [fp, #-4]
   13ff4:	add	r1, r1, #26
   13ff8:	ldrh	r2, [sp, #28]
   13ffc:	str	r0, [sp, #8]
   14000:	mov	r0, r1
   14004:	sxth	r1, r2
   14008:	ldrsb	r2, [sp, #27]
   1400c:	bl	14044 <MyGame_Example_Test_assign_to_pe>
   14010:	ldr	r1, [fp, #-4]
   14014:	str	r0, [sp, #4]
   14018:	mov	r0, r1
   1401c:	mov	sp, fp
   14020:	pop	{fp, pc}

00014024 <MyGame_Example_Vec3_end_pe>:
   14024:	push	{fp, lr}
   14028:	mov	fp, sp
   1402c:	sub	sp, sp, #8
   14030:	str	r0, [sp, #4]
   14034:	ldr	r0, [sp, #4]
   14038:	bl	0 <flatcc_builder_end_struct>
   1403c:	mov	sp, fp
   14040:	pop	{fp, pc}

00014044 <MyGame_Example_Test_assign_to_pe>:
   14044:	push	{fp, lr}
   14048:	mov	fp, sp
   1404c:	sub	sp, sp, #16
   14050:	str	r0, [fp, #-4]
   14054:	strh	r1, [fp, #-6]
   14058:	strb	r2, [fp, #-7]
   1405c:	ldr	r0, [fp, #-4]
   14060:	ldrsh	r1, [fp, #-6]
   14064:	bl	ff80 <flatbuffers_int16_assign_to_pe>
   14068:	ldrb	r1, [fp, #-7]
   1406c:	ldr	r2, [fp, #-4]
   14070:	strb	r1, [r2, #2]
   14074:	ldr	r1, [fp, #-4]
   14078:	str	r0, [sp, #4]
   1407c:	mov	r0, r1
   14080:	mov	sp, fp
   14084:	pop	{fp, pc}
