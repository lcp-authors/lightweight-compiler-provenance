
../compcert-repos/stcorp-coda-3a25f25/CMakeFiles/coda_static.dir/libcoda/coda-grib-cursor.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <coda_grib_cursor_set_product>:
   0:	mov	r2, #1
   4:	stm	r0, {r1, r2}
   8:	mvn	r2, #0
   c:	ldr	r1, [r1, #20]
  10:	str	r2, [r0, #20]
  14:	str	r2, [r0, #16]
  18:	str	r2, [r0, #12]
  1c:	str	r1, [r0, #8]
  20:	mov	r0, #0
  24:	bx	lr

00000028 <coda_grib_cursor_goto_array_element>:
  28:	push	{fp, lr}
  2c:	mov	fp, sp
  30:	sub	sp, sp, #8
  34:	mov	ip, r1
  38:	cmp	r1, #1
  3c:	bne	a0 <coda_grib_cursor_goto_array_element+0x78>
  40:	mov	r1, r0
  44:	ldr	r0, [pc, #172]	; f8 <coda_grib_cursor_goto_array_element+0xd0>
  48:	ldr	r3, [pc, r0]
  4c:	bl	0 <__aeabi_read_tp>
  50:	ldr	ip, [r1, #4]
  54:	ldr	r3, [r0, r3]
  58:	ldr	r2, [r2]
  5c:	add	r0, r1, ip, lsl #4
  60:	cmp	r3, #0
  64:	ldr	lr, [r0, #-8]
  68:	beq	d0 <coda_grib_cursor_goto_array_element+0xa8>
  6c:	ldr	r3, [lr, #8]
  70:	cmp	r2, #0
  74:	cmpge	r3, r2
  78:	bgt	d0 <coda_grib_cursor_goto_array_element+0xa8>
  7c:	movw	r1, #0
  80:	mov	r0, #84	; 0x54
  84:	movt	r1, #0
  88:	str	r0, [sp, #4]
  8c:	mvn	r0, #106	; 0x6a
  90:	str	r1, [sp]
  94:	movw	r1, #0
  98:	movt	r1, #0
  9c:	b	c0 <coda_grib_cursor_goto_array_element+0x98>
  a0:	movw	r1, #0
  a4:	movw	r3, #0
  a8:	mov	r0, #68	; 0x44
  ac:	mov	r2, ip
  b0:	str	r0, [sp]
  b4:	movt	r1, #0
  b8:	movt	r3, #0
  bc:	mvn	r0, #105	; 0x69
  c0:	bl	0 <coda_set_error>
  c4:	mvn	r0, #0
  c8:	mov	sp, fp
  cc:	pop	{fp, pc}
  d0:	add	r3, ip, #1
  d4:	add	ip, r0, #8
  d8:	str	r3, [r1, #4]
  dc:	mvn	r3, #0
  e0:	ldr	r1, [lr, #12]
  e4:	stm	ip, {r1, r2, r3}
  e8:	str	r3, [r0, #20]
  ec:	mov	r0, #0
  f0:	mov	sp, fp
  f4:	pop	{fp, pc}
  f8:	.word	0x000000a8

000000fc <coda_grib_cursor_goto_array_element_by_index>:
  fc:	push	{r4, r5, fp, lr}
 100:	add	fp, sp, #8
 104:	sub	sp, sp, #8
 108:	mov	r5, r1
 10c:	mov	r1, r0
 110:	ldr	r0, [pc, #140]	; 1a4 <coda_grib_cursor_goto_array_element_by_index+0xa8>
 114:	ldr	r2, [pc, r0]
 118:	bl	0 <__aeabi_read_tp>
 11c:	ldr	r3, [r0, r2]
 120:	ldr	r2, [r1, #4]
 124:	add	r0, r1, r2, lsl #4
 128:	cmp	r3, #0
 12c:	ldr	r4, [r0, #-8]
 130:	beq	178 <coda_grib_cursor_goto_array_element_by_index+0x7c>
 134:	ldr	r3, [r4, #8]
 138:	cmp	r5, #0
 13c:	cmpge	r3, r5
 140:	bgt	178 <coda_grib_cursor_goto_array_element_by_index+0x7c>
 144:	movw	r1, #0
 148:	mov	r0, #84	; 0x54
 14c:	mov	r2, r5
 150:	movt	r1, #0
 154:	str	r0, [sp, #4]
 158:	mvn	r0, #106	; 0x6a
 15c:	str	r1, [sp]
 160:	movw	r1, #0
 164:	movt	r1, #0
 168:	bl	0 <coda_set_error>
 16c:	mvn	r0, #0
 170:	sub	sp, fp, #8
 174:	pop	{r4, r5, fp, pc}
 178:	add	r2, r2, #1
 17c:	str	r2, [r1, #4]
 180:	mvn	r2, #0
 184:	ldr	r1, [r4, #12]
 188:	str	r1, [r0, #8]
 18c:	str	r5, [r0, #12]
 190:	str	r2, [r0, #16]
 194:	str	r2, [r0, #20]
 198:	mov	r0, #0
 19c:	sub	sp, fp, #8
 1a0:	pop	{r4, r5, fp, pc}
 1a4:	.word	0x00000088

000001a8 <coda_grib_cursor_goto_next_array_element>:
 1a8:	push	{r4, r5, r6, sl, fp, lr}
 1ac:	add	fp, sp, #16
 1b0:	sub	sp, sp, #8
 1b4:	ldr	r6, [r0, #4]
 1b8:	mov	r4, r0
 1bc:	sub	r5, r6, #1
 1c0:	str	r5, [r0, #4]
 1c4:	ldr	r0, [pc, #160]	; 26c <coda_grib_cursor_goto_next_array_element+0xc4>
 1c8:	ldr	r1, [pc, r0]
 1cc:	bl	0 <__aeabi_read_tp>
 1d0:	ldr	r3, [r0, r1]
 1d4:	add	r0, r4, #8
 1d8:	add	r1, r0, r6, lsl #4
 1dc:	add	r0, r0, r5, lsl #4
 1e0:	ldr	ip, [r1, #-32]	; 0xffffffe0
 1e4:	ldr	r1, [r0, #4]!
 1e8:	cmp	r3, #0
 1ec:	add	r2, r1, #1
 1f0:	beq	240 <coda_grib_cursor_goto_next_array_element+0x98>
 1f4:	ldr	r3, [ip, #8]
 1f8:	cmn	r1, #1
 1fc:	cmpge	r3, r2
 200:	bgt	240 <coda_grib_cursor_goto_next_array_element+0x98>
 204:	movw	r1, #0
 208:	mov	r0, #84	; 0x54
 20c:	movt	r1, #0
 210:	str	r0, [sp, #4]
 214:	mvn	r0, #106	; 0x6a
 218:	str	r1, [sp]
 21c:	movw	r1, #0
 220:	movt	r1, #0
 224:	bl	0 <coda_set_error>
 228:	ldr	r0, [r4, #4]
 22c:	add	r0, r0, #1
 230:	str	r0, [r4, #4]
 234:	mvn	r0, #0
 238:	sub	sp, fp, #16
 23c:	pop	{r4, r5, r6, sl, fp, pc}
 240:	str	r6, [r4, #4]
 244:	add	r1, r4, r5, lsl #4
 248:	ldr	r3, [ip, #12]
 24c:	str	r3, [r1, #8]
 250:	str	r2, [r0]
 254:	mvn	r0, #0
 258:	str	r0, [r1, #16]
 25c:	str	r0, [r1, #20]
 260:	mov	r0, #0
 264:	sub	sp, fp, #16
 268:	pop	{r4, r5, r6, sl, fp, pc}
 26c:	.word	0x0000009c

00000270 <coda_grib_cursor_goto_attributes>:
 270:	push	{r4, r5, fp, lr}
 274:	add	fp, sp, #8
 278:	ldr	r1, [r0, #4]
 27c:	add	r5, r0, #8
 280:	mov	r4, r0
 284:	add	r0, r5, r1, lsl #4
 288:	add	r1, r1, #1
 28c:	ldr	r0, [r0, #-16]
 290:	ldr	r0, [r0, #4]
 294:	ldr	r0, [r0]
 298:	str	r1, [r4, #4]
 29c:	bl	0 <coda_mem_empty_record>
 2a0:	ldr	r1, [r4, #4]
 2a4:	mvn	r2, #0
 2a8:	add	r1, r5, r1, lsl #4
 2ac:	str	r0, [r1, #-16]
 2b0:	mov	r0, #0
 2b4:	str	r2, [r1, #-12]
 2b8:	str	r2, [r1, #-8]
 2bc:	str	r2, [r1, #-4]
 2c0:	pop	{r4, r5, fp, pc}

000002c4 <coda_grib_cursor_get_num_elements>:
 2c4:	ldr	r2, [r0, #4]
 2c8:	add	r0, r0, r2, lsl #4
 2cc:	ldr	r0, [r0, #-8]
 2d0:	ldr	r2, [r0, #4]
 2d4:	ldr	r3, [r2, #8]
 2d8:	mov	r2, #1
 2dc:	cmp	r3, #1
 2e0:	ldreq	r2, [r0, #8]
 2e4:	mov	r0, #0
 2e8:	str	r2, [r1]
 2ec:	bx	lr

000002f0 <coda_grib_cursor_get_array_dim>:
 2f0:	mov	r3, #1
 2f4:	str	r3, [r1]
 2f8:	ldr	r1, [r0, #4]
 2fc:	add	r0, r0, r1, lsl #4
 300:	ldr	r0, [r0, #-8]
 304:	ldr	r1, [r0, #4]
 308:	ldr	r1, [r1, #8]
 30c:	cmp	r1, #1
 310:	ldreq	r3, [r0, #8]
 314:	mov	r0, #0
 318:	str	r3, [r2]
 31c:	bx	lr

00000320 <coda_grib_cursor_read_float>:
 320:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
 324:	add	fp, sp, #28
 328:	sub	sp, sp, #68	; 0x44
 32c:	mov	r8, r1
 330:	ldr	r1, [r0, #4]
 334:	cmp	r1, #1
 338:	ble	968 <coda_grib_cursor_read_float+0x648>
 33c:	add	r1, r0, r1, lsl #4
 340:	ldr	lr, [r1, #-24]	; 0xffffffe8
 344:	ldr	r2, [lr, #4]
 348:	ldr	r2, [r2, #8]
 34c:	cmp	r2, #1
 350:	bne	988 <coda_grib_cursor_read_float+0x668>
 354:	ldr	r2, [r1, #-4]
 358:	ldr	r1, [lr, #24]
 35c:	cmp	r1, #0
 360:	beq	428 <coda_grib_cursor_read_float+0x108>
 364:	mov	r1, #0
 368:	str	r1, [sp, #52]	; 0x34
 36c:	str	r1, [sp, #48]	; 0x30
 370:	ldr	r4, [lr, #28]
 374:	cmp	r4, #0
 378:	beq	490 <coda_grib_cursor_read_float+0x170>
 37c:	ldr	r1, [lr, #56]	; 0x38
 380:	cmp	r1, #0
 384:	beq	49c <coda_grib_cursor_read_float+0x17c>
 388:	ldrb	r1, [r1, r2, asr #3]
 38c:	and	ip, r2, #7
 390:	mov	r6, #1
 394:	eor	r3, ip, #7
 398:	tst	r1, r6, lsl r3
 39c:	beq	4a8 <coda_grib_cursor_read_float+0x188>
 3a0:	mov	r9, r4
 3a4:	mov	r3, #0
 3a8:	cmp	r2, #128	; 0x80
 3ac:	blt	3d8 <coda_grib_cursor_read_float+0xb8>
 3b0:	ldr	r3, [lr, #60]	; 0x3c
 3b4:	asr	r5, r2, #7
 3b8:	mov	r6, #0
 3bc:	add	r4, r3, #15
 3c0:	mov	r3, #0
 3c4:	ldrb	r7, [r4, r6, lsl #4]
 3c8:	add	r6, r6, #1
 3cc:	cmp	r6, r5
 3d0:	add	r3, r3, r7
 3d4:	blt	3c4 <coda_grib_cursor_read_float+0xa4>
 3d8:	tst	r2, #120	; 0x78
 3dc:	str	r8, [sp, #36]	; 0x24
 3e0:	ldrne	r7, [lr, #60]	; 0x3c
 3e4:	asrne	r2, r2, #3
 3e8:	addne	r2, r7, r2
 3ec:	ldrbne	r2, [r2, #-1]
 3f0:	addne	r3, r3, r2
 3f4:	cmp	ip, #0
 3f8:	beq	4b8 <coda_grib_cursor_read_float+0x198>
 3fc:	rsb	r2, ip, #0
 400:	mov	r7, #0
 404:	mov	r5, #1
 408:	mov	r4, r9
 40c:	add	r6, r7, #7
 410:	sub	r7, r7, #1
 414:	and	r6, r5, r1, lsr r6
 418:	cmp	r2, r7
 41c:	add	r3, r6, r3
 420:	bne	40c <coda_grib_cursor_read_float+0xec>
 424:	b	4bc <coda_grib_cursor_read_float+0x19c>
 428:	ldr	r0, [r0]
 42c:	ldrd	r4, [lr, #16]
 430:	mov	r1, #0
 434:	mov	r3, #4
 438:	ldr	r0, [r0, #52]	; 0x34
 43c:	str	r3, [sp]
 440:	stmib	sp, {r1, r8}
 444:	lsr	r1, r4, #3
 448:	lsl	r3, r2, #2
 44c:	asr	r7, r5, #3
 450:	orr	r1, r1, r5, lsl #29
 454:	adds	r2, r1, r2, lsl #2
 458:	adc	r3, r7, r3, asr #31
 45c:	bl	9a8 <read_bytes>
 460:	mvn	r1, #0
 464:	cmp	r0, #0
 468:	bne	95c <coda_grib_cursor_read_float+0x63c>
 46c:	ldrb	r0, [r8]
 470:	ldrb	r1, [r8, #1]
 474:	ldrb	r2, [r8, #2]
 478:	ldrb	r3, [r8, #3]
 47c:	strb	r0, [r8, #3]
 480:	strb	r3, [r8]
 484:	strb	r2, [r8, #1]
 488:	strb	r1, [r8, #2]
 48c:	b	958 <coda_grib_cursor_read_float+0x638>
 490:	ldr	r0, [lr, #36]	; 0x24
 494:	str	r0, [r8]
 498:	b	95c <coda_grib_cursor_read_float+0x63c>
 49c:	str	r8, [sp, #36]	; 0x24
 4a0:	mov	r3, r2
 4a4:	b	4bc <coda_grib_cursor_read_float+0x19c>
 4a8:	bl	0 <coda_NaN>
 4ac:	vcvt.f32.f64	s0, d0
 4b0:	vstr	s0, [r8]
 4b4:	b	958 <coda_grib_cursor_read_float+0x638>
 4b8:	mov	r4, r9
 4bc:	mul	r1, r4, r3
 4c0:	ldrd	r2, [lr, #16]
 4c4:	ldr	r0, [r0]
 4c8:	asr	r7, r4, #31
 4cc:	str	lr, [sp, #32]
 4d0:	adds	ip, r2, r1
 4d4:	mov	r2, #8
 4d8:	ldr	r0, [r0, #52]	; 0x34
 4dc:	adc	r8, r3, r1, asr #31
 4e0:	ands	sl, r4, #7
 4e4:	mov	r1, #7
 4e8:	sub	r2, r2, r4, asr #3
 4ec:	and	r6, ip, #7
 4f0:	subne	r2, r1, r4, asr #3
 4f4:	add	r1, sp, #48	; 0x30
 4f8:	mov	r5, sl
 4fc:	add	r9, r1, r2
 500:	adds	r1, r6, r4
 504:	rsb	r2, r1, #0
 508:	and	r3, r2, #7
 50c:	adc	r2, r7, #0
 510:	cmp	sl, #0
 514:	mvnne	r5, #0
 518:	rsbs	r1, r1, #8
 51c:	rscs	r1, r2, #0
 520:	blt	578 <coda_grib_cursor_read_float+0x258>
 524:	mov	r2, #0
 528:	mov	r1, #1
 52c:	mov	r5, r3
 530:	asr	r3, r8, #3
 534:	stm	sp, {r1, r2, r9}
 538:	lsr	r1, ip, #3
 53c:	orr	r2, r1, r8, lsl #29
 540:	bl	9a8 <read_bytes>
 544:	mvn	r1, #0
 548:	cmp	r0, #0
 54c:	bne	95c <coda_grib_cursor_read_float+0x63c>
 550:	cmp	r5, #0
 554:	ldrbne	r0, [r9]
 558:	lsrne	r0, r0, r5
 55c:	strbne	r0, [r9]
 560:	tst	r4, #7
 564:	ldrbne	r0, [r9]
 568:	mvnne	r1, #0
 56c:	bicne	r0, r0, r1, lsl r4
 570:	strbne	r0, [r9]
 574:	b	8ec <coda_grib_cursor_read_float+0x5cc>
 578:	cmp	r3, #0
 57c:	str	ip, [sp, #28]
 580:	beq	780 <coda_grib_cursor_read_float+0x460>
 584:	str	r3, [sp, #40]	; 0x28
 588:	str	r0, [sp, #44]	; 0x2c
 58c:	mov	r0, r4
 590:	mov	r1, r7
 594:	mov	r2, #24
 598:	mov	r3, #0
 59c:	str	r5, [sp, #24]
 5a0:	bl	0 <__aeabi_ldivmod>
 5a4:	orrs	r0, r2, r3
 5a8:	beq	7e8 <coda_grib_cursor_read_float+0x4c8>
 5ac:	mov	r1, r2
 5b0:	mov	r2, #0
 5b4:	sub	r5, fp, #32
 5b8:	str	r4, [sp, #20]
 5bc:	asr	r3, r8, #3
 5c0:	add	sl, r6, r1
 5c4:	ands	r7, sl, #7
 5c8:	movwne	r7, #1
 5cc:	ands	r4, r1, #7
 5d0:	add	r0, r7, sl, lsr #3
 5d4:	movwne	r4, #1
 5d8:	str	r0, [sp, #16]
 5dc:	stm	sp, {r0, r2, r5}
 5e0:	str	r1, [sp, #12]
 5e4:	ldr	r6, [sp, #28]
 5e8:	lsr	r0, r6, #3
 5ec:	orr	r2, r0, r8, lsl #29
 5f0:	ldr	r0, [sp, #44]	; 0x2c
 5f4:	bl	9a8 <read_bytes>
 5f8:	cmp	r0, #0
 5fc:	bne	8a0 <coda_grib_cursor_read_float+0x580>
 600:	ldr	lr, [sp, #12]
 604:	ldr	r2, [sp, #16]
 608:	mov	r0, #0
 60c:	str	r0, [fp, #-36]	; 0xffffffdc
 610:	add	ip, r4, lr, lsr #3
 614:	cmp	r2, #0
 618:	beq	694 <coda_grib_cursor_read_float+0x374>
 61c:	lsr	r0, sl, #3
 620:	mov	r2, #0
 624:	add	r1, r0, r7
 628:	cmp	r1, #16
 62c:	bcc	664 <coda_grib_cursor_read_float+0x344>
 630:	sub	r0, fp, #36	; 0x24
 634:	bic	r2, r1, #-1073741809	; 0xc000000f
 638:	mvn	r7, #15
 63c:	sub	r3, r0, #12
 640:	mov	r0, r2
 644:	vld1.8	{d16-d17}, [r5]!
 648:	subs	r0, r0, #16
 64c:	vrev64.8	q8, q8
 650:	vext.8	q8, q8, q8, #8
 654:	vst1.8	{d16-d17}, [r3], r7
 658:	bne	644 <coda_grib_cursor_read_float+0x324>
 65c:	cmp	r1, r2
 660:	beq	68c <coda_grib_cursor_read_float+0x36c>
 664:	sub	r0, fp, #32
 668:	sub	r7, fp, #36	; 0x24
 66c:	sub	r1, r1, r2
 670:	add	r3, r0, r2
 674:	rsb	r0, r2, #3
 678:	add	r0, r7, r0
 67c:	ldrb	r2, [r3], #1
 680:	subs	r1, r1, #1
 684:	strb	r2, [r0], #-1
 688:	bne	67c <coda_grib_cursor_read_float+0x35c>
 68c:	ldr	r0, [fp, #-36]	; 0xffffffdc
 690:	ldr	r2, [sp, #16]
 694:	mov	r1, #32
 698:	mov	sl, lr
 69c:	cmp	ip, #0
 6a0:	sub	r1, r1, r2, lsl #3
 6a4:	ldr	r2, [sp, #40]	; 0x28
 6a8:	orr	r1, r1, r2
 6ac:	lsr	r0, r0, r1
 6b0:	mvn	r1, #0
 6b4:	bic	r0, r0, r1, lsl lr
 6b8:	str	r0, [fp, #-36]	; 0xffffffdc
 6bc:	beq	75c <coda_grib_cursor_read_float+0x43c>
 6c0:	ldr	r0, [sp, #20]
 6c4:	mov	r1, #0
 6c8:	asr	lr, r0, #3
 6cc:	lsr	r0, sl, #3
 6d0:	add	r2, r0, r4
 6d4:	cmp	r2, #16
 6d8:	bcc	728 <coda_grib_cursor_read_float+0x408>
 6dc:	ldr	r0, [sp, #24]
 6e0:	add	r1, sp, #48	; 0x30
 6e4:	sub	r0, r0, lr
 6e8:	add	r0, r1, r0
 6ec:	bic	r1, r2, #-1073741809	; 0xc000000f
 6f0:	add	r7, r0, #8
 6f4:	sub	r0, fp, #36	; 0x24
 6f8:	mov	r3, r1
 6fc:	add	r0, r0, r2
 700:	sub	r5, r0, #16
 704:	mvn	r0, #15
 708:	vld1.8	{d16-d17}, [r5], r0
 70c:	subs	r3, r3, #16
 710:	vrev64.8	q8, q8
 714:	vext.8	q8, q8, q8, #8
 718:	vst1.8	{d16-d17}, [r7]!
 71c:	bne	708 <coda_grib_cursor_read_float+0x3e8>
 720:	cmp	r2, r1
 724:	beq	75c <coda_grib_cursor_read_float+0x43c>
 728:	sub	r0, r2, r1
 72c:	ldr	r2, [sp, #24]
 730:	add	r1, r1, r2
 734:	add	r2, sp, #48	; 0x30
 738:	sub	r1, r1, lr
 73c:	add	r1, r2, r1
 740:	sub	r2, fp, #36	; 0x24
 744:	add	r1, r1, #8
 748:	sub	r2, r2, #1
 74c:	ldrb	r3, [r2, r0]
 750:	subs	r0, r0, #1
 754:	strb	r3, [r1], #1
 758:	bne	74c <coda_grib_cursor_read_float+0x42c>
 75c:	ldr	r4, [sp, #20]
 760:	mov	r0, #0
 764:	add	r9, r9, ip
 768:	subs	r5, r4, sl
 76c:	rsc	r7, r0, r4, asr #31
 770:	ldr	r0, [sp, #44]	; 0x2c
 774:	adds	r6, r6, sl
 778:	adc	r8, r8, #0
 77c:	b	7f4 <coda_grib_cursor_read_float+0x4d4>
 780:	cmp	sl, #0
 784:	beq	8a8 <coda_grib_cursor_read_float+0x588>
 788:	mov	r5, #0
 78c:	mov	r1, #1
 790:	sub	r2, fp, #32
 794:	asr	r3, r8, #3
 798:	mov	r7, r0
 79c:	stm	sp, {r1, r5}
 7a0:	str	r2, [sp, #8]
 7a4:	ldr	r6, [sp, #28]
 7a8:	lsr	r1, r6, #3
 7ac:	orr	r2, r1, r8, lsl #29
 7b0:	bl	9a8 <read_bytes>
 7b4:	cmp	r0, #0
 7b8:	bne	8a0 <coda_grib_cursor_read_float+0x580>
 7bc:	ldrb	r0, [fp, #-32]	; 0xffffffe0
 7c0:	mvn	r1, #0
 7c4:	bic	r0, r0, r1, lsl sl
 7c8:	subs	r1, r4, sl
 7cc:	rsc	r3, r5, r4, asr #31
 7d0:	adds	r6, r6, sl
 7d4:	strb	r0, [r9], #1
 7d8:	mov	r4, r1
 7dc:	mov	r0, r7
 7e0:	adc	r8, r8, #0
 7e4:	b	8b0 <coda_grib_cursor_read_float+0x590>
 7e8:	ldr	r0, [sp, #44]	; 0x2c
 7ec:	ldr	r6, [sp, #28]
 7f0:	mov	r5, r4
 7f4:	subs	r1, r5, #1
 7f8:	sbcs	r1, r7, #0
 7fc:	blt	8ec <coda_grib_cursor_read_float+0x5cc>
 800:	sub	r4, fp, #32
 804:	mov	sl, #4
 808:	mov	r1, #0
 80c:	str	sl, [sp]
 810:	asr	r3, r8, #3
 814:	stmib	sp, {r1, r4}
 818:	lsr	r1, r6, #3
 81c:	orr	r2, r1, r8, lsl #29
 820:	bl	9a8 <read_bytes>
 824:	cmp	r0, #0
 828:	bne	8a0 <coda_grib_cursor_read_float+0x580>
 82c:	ldrb	r0, [fp, #-32]	; 0xffffffe0
 830:	ldrb	r1, [fp, #-31]	; 0xffffffe1
 834:	ldrb	r2, [fp, #-30]	; 0xffffffe2
 838:	ldrb	r3, [fp, #-29]	; 0xffffffe3
 83c:	strb	r0, [fp, #-33]	; 0xffffffdf
 840:	strb	r1, [fp, #-34]	; 0xffffffde
 844:	strb	r2, [fp, #-35]	; 0xffffffdd
 848:	strb	r3, [fp, #-36]	; 0xffffffdc
 84c:	ldr	r1, [sp, #40]	; 0x28
 850:	ldr	r0, [fp, #-36]	; 0xffffffdc
 854:	lsr	r0, r0, r1
 858:	lsr	r1, r0, #8
 85c:	str	r0, [fp, #-36]	; 0xffffffdc
 860:	strb	r1, [r9, #1]
 864:	lsr	r1, r0, #16
 868:	strb	r1, [r9]
 86c:	strb	r0, [r9, #2]
 870:	subs	r0, r5, #24
 874:	add	r9, r9, #3
 878:	sbc	r1, r7, #0
 87c:	adds	r6, r6, #24
 880:	adc	r8, r8, #0
 884:	rsbs	r2, r5, #24
 888:	mov	r5, r0
 88c:	ldr	r0, [sp, #44]	; 0x2c
 890:	rscs	r2, r7, #0
 894:	mov	r7, r1
 898:	blt	808 <coda_grib_cursor_read_float+0x4e8>
 89c:	b	8ec <coda_grib_cursor_read_float+0x5cc>
 8a0:	mvn	r1, #0
 8a4:	b	95c <coda_grib_cursor_read_float+0x63c>
 8a8:	ldr	r6, [sp, #28]
 8ac:	asr	r3, r4, #31
 8b0:	subs	r1, r4, #1
 8b4:	sbcs	r1, r3, #0
 8b8:	blt	8ec <coda_grib_cursor_read_float+0x5cc>
 8bc:	lsr	r2, r4, #3
 8c0:	lsr	r1, r3, #3
 8c4:	orr	r2, r2, r3, lsl #29
 8c8:	asr	r3, r8, #3
 8cc:	str	r2, [sp]
 8d0:	stmib	sp, {r1, r9}
 8d4:	lsr	r1, r6, #3
 8d8:	orr	r2, r1, r8, lsl #29
 8dc:	bl	9a8 <read_bytes>
 8e0:	mvn	r1, #0
 8e4:	cmp	r0, #0
 8e8:	bne	95c <coda_grib_cursor_read_float+0x63c>
 8ec:	ldrb	r7, [sp, #55]	; 0x37
 8f0:	ldrb	r0, [sp, #48]	; 0x30
 8f4:	ldrb	r1, [sp, #49]	; 0x31
 8f8:	ldrb	r2, [sp, #50]	; 0x32
 8fc:	ldrb	r3, [sp, #51]	; 0x33
 900:	strb	r7, [sp, #48]	; 0x30
 904:	ldrb	r7, [sp, #54]	; 0x36
 908:	strb	r7, [sp, #49]	; 0x31
 90c:	ldrb	r7, [sp, #53]	; 0x35
 910:	strb	r7, [sp, #50]	; 0x32
 914:	ldrb	r7, [sp, #52]	; 0x34
 918:	strb	r7, [sp, #51]	; 0x33
 91c:	strb	r0, [sp, #55]	; 0x37
 920:	strb	r1, [sp, #54]	; 0x36
 924:	strb	r2, [sp, #53]	; 0x35
 928:	strb	r3, [sp, #52]	; 0x34
 92c:	ldr	r0, [sp, #48]	; 0x30
 930:	ldr	r1, [sp, #52]	; 0x34
 934:	bl	0 <__aeabi_l2d>
 938:	ldr	r6, [sp, #32]
 93c:	vmov	d18, r0, r1
 940:	ldr	r0, [sp, #36]	; 0x24
 944:	vldr	d16, [r6, #40]	; 0x28
 948:	vldr	d17, [r6, #48]	; 0x30
 94c:	vmla.f64	d17, d16, d18
 950:	vcvt.f32.f64	s0, d17
 954:	vstr	s0, [r0]
 958:	mov	r1, #0
 95c:	mov	r0, r1
 960:	sub	sp, fp, #28
 964:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
 968:	movw	r0, #0
 96c:	movw	r1, #0
 970:	movw	r3, #0
 974:	mov	r2, #144	; 0x90
 978:	movt	r0, #0
 97c:	movt	r1, #0
 980:	movt	r3, #0
 984:	bl	0 <__assert_fail>
 988:	movw	r0, #0
 98c:	movw	r1, #0
 990:	movw	r3, #0
 994:	mov	r2, #146	; 0x92
 998:	movt	r0, #0
 99c:	movt	r1, #0
 9a0:	movt	r3, #0
 9a4:	bl	0 <__assert_fail>

000009a8 <read_bytes>:
 9a8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
 9ac:	add	fp, sp, #28
 9b0:	sub	sp, sp, #68	; 0x44
 9b4:	ldr	r7, [r0, #48]	; 0x30
 9b8:	mov	sl, r2
 9bc:	ldr	r1, [fp, #12]
 9c0:	ldr	r2, [fp, #8]
 9c4:	ldr	ip, [fp, #16]
 9c8:	mov	r9, r3
 9cc:	cmp	r7, #0
 9d0:	beq	a54 <read_bytes+0xac>
 9d4:	mov	r6, r0
 9d8:	adds	lr, r2, sl
 9dc:	ldr	r4, [r6, #40]!	; 0x28
 9e0:	adc	r5, r1, r9
 9e4:	ldr	r3, [r6, #4]
 9e8:	subs	r4, r4, lr
 9ec:	sbcs	r3, r3, r5
 9f0:	bcs	a94 <read_bytes+0xec>
 9f4:	ldr	r0, [r0, #16]
 9f8:	cmp	r0, #1
 9fc:	bls	a78 <read_bytes+0xd0>
 a00:	add	r8, sp, #47	; 0x2f
 a04:	mov	r0, r2
 a08:	mov	r2, r8
 a0c:	bl	0 <coda_str64>
 a10:	add	r7, sp, #26
 a14:	mov	r0, sl
 a18:	mov	r1, r9
 a1c:	mov	r2, r7
 a20:	bl	0 <coda_str64>
 a24:	ldrd	r0, [r6]
 a28:	add	r4, sp, #5
 a2c:	mov	r2, r4
 a30:	bl	0 <coda_str64>
 a34:	movw	r1, #0
 a38:	mvn	r0, #300	; 0x12c
 a3c:	mov	r2, r8
 a40:	mov	r3, r7
 a44:	str	r4, [sp]
 a48:	movt	r1, #0
 a4c:	bl	0 <coda_set_error>
 a50:	b	a88 <read_bytes+0xe0>
 a54:	ldr	r3, [r0, #16]
 a58:	cmp	r3, #2
 a5c:	bcs	af0 <read_bytes+0x148>
 a60:	ldrd	r4, [r0, #8]
 a64:	adds	r3, r2, sl
 a68:	adc	r1, r1, r9
 a6c:	subs	r3, r4, r3
 a70:	sbcs	r1, r5, r1
 a74:	bcs	aac <read_bytes+0x104>
 a78:	movw	r1, #0
 a7c:	mvn	r0, #300	; 0x12c
 a80:	movt	r1, #0
 a84:	bl	0 <coda_set_error>
 a88:	mvn	r0, #0
 a8c:	sub	sp, fp, #28
 a90:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
 a94:	add	r1, r7, sl
 a98:	mov	r0, ip
 a9c:	bl	0 <memcpy>
 aa0:	mov	r0, #0
 aa4:	sub	sp, fp, #28
 aa8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
 aac:	ldr	r0, [r0, #56]	; 0x38
 ab0:	mov	r1, ip
 ab4:	mov	r3, sl
 ab8:	bl	0 <pread>
 abc:	mov	r1, r0
 ac0:	mov	r0, #0
 ac4:	cmn	r1, #1
 ac8:	bgt	a8c <read_bytes+0xe4>
 acc:	bl	0 <__errno_location>
 ad0:	ldr	r0, [r0]
 ad4:	bl	0 <strerror>
 ad8:	movw	r1, #0
 adc:	mov	r2, r0
 ae0:	mvn	r0, #21
 ae4:	movt	r1, #0
 ae8:	bl	0 <coda_set_error>
 aec:	b	a88 <read_bytes+0xe0>
 af0:	movw	r0, #0
 af4:	movw	r1, #0
 af8:	movw	r3, #0
 afc:	mov	r2, #83	; 0x53
 b00:	movt	r0, #0
 b04:	movt	r1, #0
 b08:	movt	r3, #0
 b0c:	bl	0 <__assert_fail>

00000b10 <coda_grib_cursor_read_float_array>:
 b10:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
 b14:	add	fp, sp, #24
 b18:	sub	sp, sp, #520	; 0x208
 b1c:	mov	r4, r1
 b20:	mov	r1, r0
 b24:	ldr	r0, [r0, #4]
 b28:	add	r0, r1, r0, lsl #4
 b2c:	ldr	r6, [r0, #-8]
 b30:	ldr	r0, [r6, #8]
 b34:	cmp	r0, #1
 b38:	blt	ba4 <coda_grib_cursor_read_float_array+0x94>
 b3c:	mov	r8, sp
 b40:	mov	r2, #520	; 0x208
 b44:	mov	r0, r8
 b48:	bl	0 <memcpy>
 b4c:	ldr	r0, [sp, #4]
 b50:	mov	r5, #0
 b54:	add	r1, r0, #1
 b58:	add	r0, r8, r0, lsl #4
 b5c:	str	r1, [sp, #4]
 b60:	ldr	r1, [r6, #12]
 b64:	str	r1, [r0, #8]!
 b68:	mvn	r1, #0
 b6c:	str	r1, [r0, #8]
 b70:	str	r1, [r0, #12]
 b74:	orr	r7, r0, #4
 b78:	mov	r0, r8
 b7c:	mov	r1, r4
 b80:	str	r5, [r7]
 b84:	bl	320 <coda_grib_cursor_read_float>
 b88:	cmp	r0, #0
 b8c:	bne	bb0 <coda_grib_cursor_read_float_array+0xa0>
 b90:	ldr	r0, [r6, #8]
 b94:	add	r5, r5, #1
 b98:	add	r4, r4, #4
 b9c:	cmp	r5, r0
 ba0:	blt	b78 <coda_grib_cursor_read_float_array+0x68>
 ba4:	mov	r0, #0
 ba8:	sub	sp, fp, #24
 bac:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
 bb0:	mvn	r0, #0
 bb4:	sub	sp, fp, #24
 bb8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

00000bbc <coda_grib_cursor_read_float_partial_array>:
 bbc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
 bc0:	add	fp, sp, #28
 bc4:	sub	sp, sp, #524	; 0x20c
 bc8:	mov	sl, r1
 bcc:	mov	r1, r0
 bd0:	ldr	r0, [r0, #4]
 bd4:	mov	r8, #0
 bd8:	add	r0, r1, r0, lsl #4
 bdc:	ldr	r4, [r0, #-8]
 be0:	ldr	r0, [r4, #8]
 be4:	cmp	r0, #1
 be8:	blt	c70 <coda_grib_cursor_read_float_partial_array+0xb4>
 bec:	mov	r9, sp
 bf0:	mov	r6, r2
 bf4:	mov	r2, #520	; 0x208
 bf8:	mov	r5, r3
 bfc:	mov	r0, r9
 c00:	bl	0 <memcpy>
 c04:	ldr	r0, [sp, #4]
 c08:	mvn	r2, #0
 c0c:	cmp	r6, #1
 c10:	add	r1, r0, #1
 c14:	add	r0, r9, r0, lsl #4
 c18:	str	r1, [sp, #4]
 c1c:	ldr	r1, [r4, #12]
 c20:	str	r2, [r0, #16]
 c24:	str	r2, [r0, #20]
 c28:	str	r1, [r0, #8]
 c2c:	blt	c70 <coda_grib_cursor_read_float_partial_array+0xb4>
 c30:	add	r0, r0, #8
 c34:	mov	r7, #0
 c38:	orr	r4, r0, #4
 c3c:	add	r0, sl, r7
 c40:	mov	r1, r5
 c44:	str	r0, [r4]
 c48:	mov	r0, r9
 c4c:	bl	320 <coda_grib_cursor_read_float>
 c50:	cmp	r0, #0
 c54:	bne	c6c <coda_grib_cursor_read_float_partial_array+0xb0>
 c58:	add	r7, r7, #1
 c5c:	add	r5, r5, #4
 c60:	cmp	r7, r6
 c64:	blt	c3c <coda_grib_cursor_read_float_partial_array+0x80>
 c68:	b	c70 <coda_grib_cursor_read_float_partial_array+0xb4>
 c6c:	mvn	r8, #0
 c70:	mov	r0, r8
 c74:	sub	sp, fp, #28
 c78:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
