
../compcert-repos/stcorp-coda-3a25f25/CMakeFiles/coda_static.dir/libcoda/coda-ascii.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <coda_ascii_reopen_with_definition>:
   0:	push	{fp, lr}
   4:	mov	fp, sp
   8:	sub	sp, sp, #24
   c:	str	r0, [fp, #-8]
  10:	str	r1, [sp, #12]
  14:	ldr	r0, [sp, #12]
  18:	movw	r1, #0
  1c:	cmp	r0, r1
  20:	beq	28 <coda_ascii_reopen_with_definition+0x28>
  24:	b	48 <coda_ascii_reopen_with_definition+0x48>
  28:	movw	r0, #0
  2c:	movt	r0, #0
  30:	movw	r1, #0
  34:	movt	r1, #0
  38:	movw	r2, #52	; 0x34
  3c:	movw	r3, #0
  40:	movt	r3, #0
  44:	bl	0 <__assert_fail>
  48:	ldr	r0, [fp, #-8]
  4c:	ldr	r0, [r0]
  50:	ldr	r0, [r0, #16]
  54:	cmp	r0, #1
  58:	bne	60 <coda_ascii_reopen_with_definition+0x60>
  5c:	b	80 <coda_ascii_reopen_with_definition+0x80>
  60:	movw	r0, #0
  64:	movt	r0, #0
  68:	movw	r1, #0
  6c:	movt	r1, #0
  70:	movw	r2, #53	; 0x35
  74:	movw	r3, #0
  78:	movt	r3, #0
  7c:	bl	0 <__assert_fail>
  80:	ldr	r0, [sp, #12]
  84:	ldr	r0, [r0]
  88:	cmp	r0, #0
  8c:	bne	94 <coda_ascii_reopen_with_definition+0x94>
  90:	b	b4 <coda_ascii_reopen_with_definition+0xb4>
  94:	movw	r0, #0
  98:	movt	r0, #0
  9c:	movw	r1, #0
  a0:	movt	r1, #0
  a4:	movw	r2, #54	; 0x36
  a8:	movw	r3, #0
  ac:	movt	r3, #0
  b0:	bl	0 <__assert_fail>
  b4:	movw	r0, #80	; 0x50
  b8:	bl	0 <malloc>
  bc:	str	r0, [sp, #8]
  c0:	ldr	r0, [sp, #8]
  c4:	movw	r1, #0
  c8:	cmp	r0, r1
  cc:	bne	100 <coda_ascii_reopen_with_definition+0x100>
  d0:	mvn	r0, #0
  d4:	movw	r1, #0
  d8:	movt	r1, #0
  dc:	movw	r2, #80	; 0x50
  e0:	movw	r3, #0
  e4:	movt	r3, #0
  e8:	movw	ip, #61	; 0x3d
  ec:	str	ip, [sp]
  f0:	bl	0 <coda_set_error>
  f4:	mvn	r0, #0
  f8:	str	r0, [fp, #-4]
  fc:	b	290 <coda_ascii_reopen_with_definition+0x290>
 100:	ldr	r0, [sp, #8]
 104:	mov	r1, #0
 108:	str	r1, [r0]
 10c:	ldr	r0, [fp, #-8]
 110:	ldr	r0, [r0]
 114:	ldr	r2, [r0, #8]
 118:	ldr	r0, [r0, #12]
 11c:	ldr	r3, [sp, #8]
 120:	str	r0, [r3, #12]
 124:	str	r2, [r3, #8]
 128:	ldr	r0, [sp, #12]
 12c:	ldr	r0, [r0]
 130:	ldr	r2, [sp, #8]
 134:	str	r0, [r2, #16]
 138:	ldr	r0, [sp, #12]
 13c:	ldr	r0, [r0, #28]
 140:	ldr	r2, [sp, #8]
 144:	str	r0, [r2, #20]
 148:	ldr	r0, [sp, #12]
 14c:	ldr	r2, [sp, #8]
 150:	str	r0, [r2, #24]
 154:	ldr	r0, [sp, #8]
 158:	str	r1, [r0, #28]
 15c:	ldr	r0, [sp, #8]
 160:	str	r1, [r0, #32]
 164:	ldr	r0, [fp, #-8]
 168:	ldr	r0, [r0]
 16c:	ldr	r2, [r0, #40]	; 0x28
 170:	ldr	r0, [r0, #44]	; 0x2c
 174:	ldr	r3, [sp, #8]
 178:	str	r0, [r3, #44]	; 0x2c
 17c:	str	r2, [r3, #40]	; 0x28
 180:	ldr	r0, [fp, #-8]
 184:	ldr	r0, [r0]
 188:	str	r1, [r0, #44]	; 0x2c
 18c:	str	r1, [r0, #40]	; 0x28
 190:	ldr	r0, [fp, #-8]
 194:	ldr	r0, [r0]
 198:	ldr	r0, [r0, #48]	; 0x30
 19c:	ldr	r1, [sp, #8]
 1a0:	str	r0, [r1, #48]	; 0x30
 1a4:	ldr	r0, [fp, #-8]
 1a8:	ldr	r0, [r0]
 1ac:	movw	r1, #0
 1b0:	str	r1, [r0, #48]	; 0x30
 1b4:	ldr	r0, [fp, #-8]
 1b8:	ldr	r0, [r0]
 1bc:	ldr	r0, [r0, #52]	; 0x34
 1c0:	ldr	r2, [sp, #8]
 1c4:	str	r0, [r2, #52]	; 0x34
 1c8:	ldr	r0, [fp, #-8]
 1cc:	ldr	r0, [r0]
 1d0:	ldr	r0, [r0, #56]	; 0x38
 1d4:	ldr	r2, [sp, #8]
 1d8:	str	r0, [r2, #56]	; 0x38
 1dc:	ldr	r0, [fp, #-8]
 1e0:	ldr	r0, [r0]
 1e4:	mvn	r2, #0
 1e8:	str	r2, [r0, #56]	; 0x38
 1ec:	ldr	r0, [sp, #8]
 1f0:	str	r1, [r0, #60]	; 0x3c
 1f4:	ldr	r0, [sp, #8]
 1f8:	str	r2, [r0, #64]	; 0x40
 1fc:	ldr	r0, [sp, #8]
 200:	str	r1, [r0, #68]	; 0x44
 204:	ldr	r0, [sp, #8]
 208:	str	r1, [r0, #72]	; 0x48
 20c:	ldr	r0, [sp, #8]
 210:	str	r1, [r0, #76]	; 0x4c
 214:	ldr	r0, [fp, #-8]
 218:	ldr	r0, [r0]
 21c:	ldr	r0, [r0]
 220:	bl	0 <strdup>
 224:	ldr	r1, [sp, #8]
 228:	str	r0, [r1]
 22c:	ldr	r0, [sp, #8]
 230:	ldr	r0, [r0]
 234:	movw	r1, #0
 238:	cmp	r0, r1
 23c:	bne	270 <coda_ascii_reopen_with_definition+0x270>
 240:	mvn	r0, #0
 244:	movw	r1, #0
 248:	movt	r1, #0
 24c:	movw	r2, #0
 250:	movt	r2, #0
 254:	movw	r3, #97	; 0x61
 258:	bl	0 <coda_set_error>
 25c:	ldr	r0, [sp, #8]
 260:	bl	0 <free>
 264:	mvn	r0, #0
 268:	str	r0, [fp, #-4]
 26c:	b	290 <coda_ascii_reopen_with_definition+0x290>
 270:	ldr	r0, [fp, #-8]
 274:	ldr	r0, [r0]
 278:	bl	0 <coda_close>
 27c:	ldr	r1, [sp, #8]
 280:	ldr	r2, [fp, #-8]
 284:	str	r1, [r2]
 288:	movw	r1, #0
 28c:	str	r1, [fp, #-4]
 290:	ldr	r0, [fp, #-4]
 294:	mov	sp, fp
 298:	pop	{fp, pc}

0000029c <coda_ascii_close>:
 29c:	push	{fp, lr}
 2a0:	mov	fp, sp
 2a4:	sub	sp, sp, #16
 2a8:	str	r0, [sp, #8]
 2ac:	ldr	r0, [sp, #8]
 2b0:	str	r0, [sp, #4]
 2b4:	ldr	r0, [sp, #4]
 2b8:	bl	0 <coda_bin_product_close>
 2bc:	cmp	r0, #0
 2c0:	beq	2d0 <coda_ascii_close+0x34>
 2c4:	mvn	r0, #0
 2c8:	str	r0, [fp, #-4]
 2cc:	b	340 <coda_ascii_close+0xa4>
 2d0:	ldr	r0, [sp, #4]
 2d4:	ldr	r0, [r0]
 2d8:	movw	r1, #0
 2dc:	cmp	r0, r1
 2e0:	beq	2f0 <coda_ascii_close+0x54>
 2e4:	ldr	r0, [sp, #4]
 2e8:	ldr	r0, [r0]
 2ec:	bl	0 <free>
 2f0:	ldr	r0, [sp, #4]
 2f4:	ldr	r0, [r0, #68]	; 0x44
 2f8:	movw	r1, #0
 2fc:	cmp	r0, r1
 300:	beq	310 <coda_ascii_close+0x74>
 304:	ldr	r0, [sp, #4]
 308:	ldr	r0, [r0, #68]	; 0x44
 30c:	bl	0 <free>
 310:	ldr	r0, [sp, #4]
 314:	ldr	r0, [r0, #76]	; 0x4c
 318:	movw	r1, #0
 31c:	cmp	r0, r1
 320:	beq	330 <coda_ascii_close+0x94>
 324:	ldr	r0, [sp, #4]
 328:	ldr	r0, [r0, #76]	; 0x4c
 32c:	bl	0 <coda_type_release>
 330:	ldr	r0, [sp, #4]
 334:	bl	0 <free>
 338:	movw	r0, #0
 33c:	str	r0, [fp, #-4]
 340:	ldr	r0, [fp, #-4]
 344:	mov	sp, fp
 348:	pop	{fp, pc}

0000034c <coda_ascii_init_asciilines>:
 34c:	push	{r4, sl, fp, lr}
 350:	add	fp, sp, #8
 354:	sub	sp, sp, #88	; 0x58
 358:	sub	sp, sp, #4096	; 0x1000
 35c:	str	r0, [fp, #-16]
 360:	ldr	r0, [fp, #-16]
 364:	str	r0, [sp, #72]	; 0x48
 368:	mov	r0, #0
 36c:	str	r0, [sp, #68]	; 0x44
 370:	str	r0, [sp, #64]	; 0x40
 374:	str	r0, [sp, #60]	; 0x3c
 378:	str	r0, [sp, #56]	; 0x38
 37c:	movw	r0, #0
 380:	strb	r0, [sp, #55]	; 0x37
 384:	movw	r0, #0
 388:	str	r0, [sp, #48]	; 0x30
 38c:	ldr	r0, [sp, #72]	; 0x48
 390:	ldr	r0, [r0, #64]	; 0x40
 394:	cmn	r0, #1
 398:	bne	3a0 <coda_ascii_init_asciilines+0x54>
 39c:	b	3c0 <coda_ascii_init_asciilines+0x74>
 3a0:	movw	r0, #0
 3a4:	movt	r0, #0
 3a8:	movw	r1, #0
 3ac:	movt	r1, #0
 3b0:	movw	r2, #185	; 0xb9
 3b4:	movw	r3, #0
 3b8:	movt	r3, #0
 3bc:	bl	0 <__assert_fail>
 3c0:	ldr	r0, [sp, #72]	; 0x48
 3c4:	ldr	r0, [r0, #52]	; 0x34
 3c8:	cmp	r0, #0
 3cc:	bne	428 <coda_ascii_init_asciilines+0xdc>
 3d0:	ldr	r0, [sp, #72]	; 0x48
 3d4:	ldr	r0, [r0, #56]	; 0x38
 3d8:	movw	r1, #0
 3dc:	str	r1, [sp, #28]
 3e0:	ldr	r2, [sp, #28]
 3e4:	bl	0 <lseek>
 3e8:	cmp	r0, #0
 3ec:	bge	424 <coda_ascii_init_asciilines+0xd8>
 3f0:	bl	0 <__errno_location>
 3f4:	ldr	r0, [r0]
 3f8:	bl	0 <strerror>
 3fc:	mvn	r1, #21
 400:	str	r0, [sp, #24]
 404:	mov	r0, r1
 408:	movw	r1, #0
 40c:	movt	r1, #0
 410:	ldr	r2, [sp, #24]
 414:	bl	0 <coda_set_error>
 418:	mvn	r0, #0
 41c:	str	r0, [fp, #-12]
 420:	b	920 <coda_ascii_init_asciilines+0x5d4>
 424:	b	428 <coda_ascii_init_asciilines+0xdc>
 428:	b	42c <coda_ascii_init_asciilines+0xe0>
 42c:	mov	r0, #0
 430:	str	r0, [sp, #44]	; 0x2c
 434:	mov	r0, #4096	; 0x1000
 438:	str	r0, [sp, #40]	; 0x28
 43c:	ldr	r0, [sp, #56]	; 0x38
 440:	ldr	r1, [sp, #60]	; 0x3c
 444:	ldr	r2, [sp, #40]	; 0x28
 448:	ldr	r3, [sp, #44]	; 0x2c
 44c:	adds	r0, r0, r2
 450:	adc	r1, r1, r3
 454:	ldr	r2, [sp, #72]	; 0x48
 458:	ldr	r3, [r2, #8]
 45c:	ldr	r2, [r2, #12]
 460:	subs	r0, r3, r0
 464:	sbcs	r1, r2, r1
 468:	bge	494 <coda_ascii_init_asciilines+0x148>
 46c:	b	470 <coda_ascii_init_asciilines+0x124>
 470:	ldr	r0, [sp, #72]	; 0x48
 474:	ldr	r1, [r0, #8]
 478:	ldr	r0, [r0, #12]
 47c:	ldr	r2, [sp, #56]	; 0x38
 480:	ldr	r3, [sp, #60]	; 0x3c
 484:	subs	r1, r1, r2
 488:	sbc	r0, r0, r3
 48c:	str	r1, [sp, #40]	; 0x28
 490:	str	r0, [sp, #44]	; 0x2c
 494:	ldr	r0, [sp, #40]	; 0x28
 498:	ldr	r1, [sp, #44]	; 0x2c
 49c:	orr	r0, r0, r1
 4a0:	cmp	r0, #0
 4a4:	bne	4b0 <coda_ascii_init_asciilines+0x164>
 4a8:	b	4ac <coda_ascii_init_asciilines+0x160>
 4ac:	b	8bc <coda_ascii_init_asciilines+0x570>
 4b0:	add	r0, sp, #79	; 0x4f
 4b4:	ldr	r1, [sp, #72]	; 0x48
 4b8:	ldr	r2, [sp, #56]	; 0x38
 4bc:	ldr	r3, [sp, #60]	; 0x3c
 4c0:	ldr	ip, [sp, #40]	; 0x28
 4c4:	ldr	lr, [sp, #44]	; 0x2c
 4c8:	mov	r4, sp
 4cc:	str	r0, [r4, #8]
 4d0:	str	lr, [r4, #4]
 4d4:	str	ip, [r4]
 4d8:	mov	r0, r1
 4dc:	bl	92c <read_bytes>
 4e0:	cmp	r0, #0
 4e4:	beq	4f4 <coda_ascii_init_asciilines+0x1a8>
 4e8:	mvn	r0, #0
 4ec:	str	r0, [fp, #-12]
 4f0:	b	920 <coda_ascii_init_asciilines+0x5d4>
 4f4:	ldrb	r0, [sp, #55]	; 0x37
 4f8:	cmp	r0, #13
 4fc:	bne	538 <coda_ascii_init_asciilines+0x1ec>
 500:	ldrb	r0, [sp, #79]	; 0x4f
 504:	cmp	r0, #10
 508:	beq	538 <coda_ascii_init_asciilines+0x1ec>
 50c:	ldr	r0, [sp, #72]	; 0x48
 510:	movw	r1, #2
 514:	bl	b80 <verify_eol_type>
 518:	cmp	r0, #0
 51c:	beq	534 <coda_ascii_init_asciilines+0x1e8>
 520:	ldr	r0, [sp, #64]	; 0x40
 524:	bl	0 <free>
 528:	mvn	r0, #0
 52c:	str	r0, [fp, #-12]
 530:	b	920 <coda_ascii_init_asciilines+0x5d4>
 534:	b	538 <coda_ascii_init_asciilines+0x1ec>
 538:	movw	r0, #0
 53c:	str	r0, [sp, #36]	; 0x24
 540:	ldr	r0, [sp, #36]	; 0x24
 544:	ldr	r1, [sp, #40]	; 0x28
 548:	ldr	r2, [sp, #44]	; 0x2c
 54c:	subs	r1, r0, r1
 550:	rscs	r0, r2, r0, asr #31
 554:	bge	884 <coda_ascii_init_asciilines+0x538>
 558:	b	55c <coda_ascii_init_asciilines+0x210>
 55c:	ldr	r0, [sp, #36]	; 0x24
 560:	cmp	r0, #0
 564:	bne	5d8 <coda_ascii_init_asciilines+0x28c>
 568:	ldrb	r0, [sp, #55]	; 0x37
 56c:	cmp	r0, #13
 570:	bne	5d8 <coda_ascii_init_asciilines+0x28c>
 574:	ldrb	r0, [sp, #79]	; 0x4f
 578:	cmp	r0, #10
 57c:	bne	5d8 <coda_ascii_init_asciilines+0x28c>
 580:	ldr	r0, [sp, #64]	; 0x40
 584:	ldr	r1, [sp, #68]	; 0x44
 588:	sub	r1, r1, #1
 58c:	add	r0, r0, r1, lsl #2
 590:	ldr	r1, [r0]
 594:	add	r1, r1, #1
 598:	str	r1, [r0]
 59c:	movw	r0, #3
 5a0:	str	r0, [sp, #48]	; 0x30
 5a4:	ldr	r1, [sp, #72]	; 0x48
 5a8:	str	r0, [sp, #20]
 5ac:	mov	r0, r1
 5b0:	ldr	r1, [sp, #20]
 5b4:	bl	b80 <verify_eol_type>
 5b8:	cmp	r0, #0
 5bc:	beq	5d4 <coda_ascii_init_asciilines+0x288>
 5c0:	ldr	r0, [sp, #64]	; 0x40
 5c4:	bl	0 <free>
 5c8:	mvn	r0, #0
 5cc:	str	r0, [fp, #-12]
 5d0:	b	920 <coda_ascii_init_asciilines+0x5d4>
 5d4:	b	870 <coda_ascii_init_asciilines+0x524>
 5d8:	ldr	r0, [sp, #36]	; 0x24
 5dc:	add	r1, sp, #79	; 0x4f
 5e0:	add	r0, r1, r0
 5e4:	ldrb	r0, [r0]
 5e8:	cmp	r0, #13
 5ec:	beq	648 <coda_ascii_init_asciilines+0x2fc>
 5f0:	ldr	r0, [sp, #36]	; 0x24
 5f4:	add	r1, sp, #79	; 0x4f
 5f8:	add	r0, r1, r0
 5fc:	ldrb	r0, [r0]
 600:	cmp	r0, #10
 604:	beq	648 <coda_ascii_init_asciilines+0x2fc>
 608:	ldr	r0, [sp, #56]	; 0x38
 60c:	ldr	r1, [sp, #60]	; 0x3c
 610:	ldr	r2, [sp, #36]	; 0x24
 614:	adds	r0, r0, r2
 618:	adc	r1, r1, r2, asr #31
 61c:	ldr	r2, [sp, #72]	; 0x48
 620:	ldr	r3, [r2, #8]
 624:	ldr	r2, [r2, #12]
 628:	subs	r3, r3, #1
 62c:	sbc	r2, r2, #0
 630:	eor	r1, r1, r2
 634:	eor	r0, r0, r3
 638:	orr	r0, r0, r1
 63c:	cmp	r0, #0
 640:	bne	86c <coda_ascii_init_asciilines+0x520>
 644:	b	648 <coda_ascii_init_asciilines+0x2fc>
 648:	ldr	r0, [sp, #68]	; 0x44
 64c:	asr	r1, r0, #31
 650:	add	r1, r0, r1, lsr #28
 654:	bic	r1, r1, #15
 658:	sub	r0, r0, r1
 65c:	cmp	r0, #0
 660:	bne	6e4 <coda_ascii_init_asciilines+0x398>
 664:	ldr	r0, [sp, #64]	; 0x40
 668:	ldr	r1, [sp, #68]	; 0x44
 66c:	add	r1, r1, #16
 670:	lsl	r1, r1, #2
 674:	bl	0 <realloc>
 678:	str	r0, [sp, #32]
 67c:	ldr	r0, [sp, #32]
 680:	movw	r1, #0
 684:	cmp	r0, r1
 688:	bne	6dc <coda_ascii_init_asciilines+0x390>
 68c:	ldr	r0, [sp, #68]	; 0x44
 690:	add	r0, r0, #16
 694:	lsl	r2, r0, #2
 698:	mvn	r0, #0
 69c:	movw	r1, #0
 6a0:	movt	r1, #0
 6a4:	movw	r3, #0
 6a8:	movt	r3, #0
 6ac:	movw	ip, #245	; 0xf5
 6b0:	str	ip, [sp]
 6b4:	bl	0 <coda_set_error>
 6b8:	ldr	r0, [sp, #64]	; 0x40
 6bc:	movw	r1, #0
 6c0:	cmp	r0, r1
 6c4:	beq	6d0 <coda_ascii_init_asciilines+0x384>
 6c8:	ldr	r0, [sp, #64]	; 0x40
 6cc:	bl	0 <free>
 6d0:	mvn	r0, #0
 6d4:	str	r0, [fp, #-12]
 6d8:	b	920 <coda_ascii_init_asciilines+0x5d4>
 6dc:	ldr	r0, [sp, #32]
 6e0:	str	r0, [sp, #64]	; 0x40
 6e4:	ldr	r0, [sp, #56]	; 0x38
 6e8:	ldr	r1, [sp, #36]	; 0x24
 6ec:	add	r0, r0, r1
 6f0:	add	r0, r0, #1
 6f4:	ldr	r1, [sp, #64]	; 0x40
 6f8:	ldr	r2, [sp, #68]	; 0x44
 6fc:	add	r1, r1, r2, lsl #2
 700:	str	r0, [r1]
 704:	ldr	r0, [sp, #68]	; 0x44
 708:	add	r0, r0, #1
 70c:	str	r0, [sp, #68]	; 0x44
 710:	movw	r0, #0
 714:	str	r0, [sp, #48]	; 0x30
 718:	ldr	r0, [sp, #36]	; 0x24
 71c:	add	r1, sp, #79	; 0x4f
 720:	add	r0, r1, r0
 724:	ldrb	r0, [r0]
 728:	cmp	r0, #10
 72c:	bne	76c <coda_ascii_init_asciilines+0x420>
 730:	movw	r0, #1
 734:	str	r0, [sp, #48]	; 0x30
 738:	ldr	r1, [sp, #72]	; 0x48
 73c:	str	r0, [sp, #16]
 740:	mov	r0, r1
 744:	ldr	r1, [sp, #16]
 748:	bl	b80 <verify_eol_type>
 74c:	cmp	r0, #0
 750:	beq	768 <coda_ascii_init_asciilines+0x41c>
 754:	ldr	r0, [sp, #64]	; 0x40
 758:	bl	0 <free>
 75c:	mvn	r0, #0
 760:	str	r0, [fp, #-12]
 764:	b	920 <coda_ascii_init_asciilines+0x5d4>
 768:	b	868 <coda_ascii_init_asciilines+0x51c>
 76c:	ldr	r0, [sp, #36]	; 0x24
 770:	add	r1, sp, #79	; 0x4f
 774:	add	r0, r1, r0
 778:	ldrb	r0, [r0]
 77c:	cmp	r0, #13
 780:	bne	864 <coda_ascii_init_asciilines+0x518>
 784:	mov	r0, #2
 788:	str	r0, [sp, #48]	; 0x30
 78c:	ldr	r0, [sp, #36]	; 0x24
 790:	ldr	r1, [sp, #40]	; 0x28
 794:	ldr	r2, [sp, #44]	; 0x2c
 798:	subs	r1, r1, #1
 79c:	sbc	r2, r2, #0
 7a0:	subs	r1, r0, r1
 7a4:	rscs	r0, r2, r0, asr #31
 7a8:	bge	860 <coda_ascii_init_asciilines+0x514>
 7ac:	b	7b0 <coda_ascii_init_asciilines+0x464>
 7b0:	ldr	r0, [sp, #36]	; 0x24
 7b4:	add	r0, r0, #1
 7b8:	add	r1, sp, #79	; 0x4f
 7bc:	add	r0, r1, r0
 7c0:	ldrb	r0, [r0]
 7c4:	cmp	r0, #10
 7c8:	bne	830 <coda_ascii_init_asciilines+0x4e4>
 7cc:	movw	r0, #3
 7d0:	str	r0, [sp, #48]	; 0x30
 7d4:	ldr	r1, [sp, #72]	; 0x48
 7d8:	str	r0, [sp, #12]
 7dc:	mov	r0, r1
 7e0:	ldr	r1, [sp, #12]
 7e4:	bl	b80 <verify_eol_type>
 7e8:	cmp	r0, #0
 7ec:	beq	804 <coda_ascii_init_asciilines+0x4b8>
 7f0:	ldr	r0, [sp, #64]	; 0x40
 7f4:	bl	0 <free>
 7f8:	mvn	r0, #0
 7fc:	str	r0, [fp, #-12]
 800:	b	920 <coda_ascii_init_asciilines+0x5d4>
 804:	ldr	r0, [sp, #64]	; 0x40
 808:	ldr	r1, [sp, #68]	; 0x44
 80c:	sub	r1, r1, #1
 810:	add	r0, r0, r1, lsl #2
 814:	ldr	r1, [r0]
 818:	add	r1, r1, #1
 81c:	str	r1, [r0]
 820:	ldr	r0, [sp, #36]	; 0x24
 824:	add	r0, r0, #1
 828:	str	r0, [sp, #36]	; 0x24
 82c:	b	85c <coda_ascii_init_asciilines+0x510>
 830:	ldr	r0, [sp, #72]	; 0x48
 834:	movw	r1, #2
 838:	bl	b80 <verify_eol_type>
 83c:	cmp	r0, #0
 840:	beq	858 <coda_ascii_init_asciilines+0x50c>
 844:	ldr	r0, [sp, #64]	; 0x40
 848:	bl	0 <free>
 84c:	mvn	r0, #0
 850:	str	r0, [fp, #-12]
 854:	b	920 <coda_ascii_init_asciilines+0x5d4>
 858:	b	85c <coda_ascii_init_asciilines+0x510>
 85c:	b	860 <coda_ascii_init_asciilines+0x514>
 860:	b	864 <coda_ascii_init_asciilines+0x518>
 864:	b	868 <coda_ascii_init_asciilines+0x51c>
 868:	b	86c <coda_ascii_init_asciilines+0x520>
 86c:	b	870 <coda_ascii_init_asciilines+0x524>
 870:	b	874 <coda_ascii_init_asciilines+0x528>
 874:	ldr	r0, [sp, #36]	; 0x24
 878:	add	r0, r0, #1
 87c:	str	r0, [sp, #36]	; 0x24
 880:	b	540 <coda_ascii_init_asciilines+0x1f4>
 884:	ldr	r0, [sp, #40]	; 0x28
 888:	add	r1, sp, #79	; 0x4f
 88c:	add	r0, r0, r1
 890:	ldrb	r0, [r0, #-1]
 894:	strb	r0, [sp, #55]	; 0x37
 898:	ldr	r0, [sp, #40]	; 0x28
 89c:	ldr	r1, [sp, #44]	; 0x2c
 8a0:	ldr	r2, [sp, #56]	; 0x38
 8a4:	ldr	r3, [sp, #60]	; 0x3c
 8a8:	adds	r0, r2, r0
 8ac:	adc	r1, r3, r1
 8b0:	str	r0, [sp, #56]	; 0x38
 8b4:	str	r1, [sp, #60]	; 0x3c
 8b8:	b	42c <coda_ascii_init_asciilines+0xe0>
 8bc:	ldrb	r0, [sp, #55]	; 0x37
 8c0:	cmp	r0, #13
 8c4:	bne	8f4 <coda_ascii_init_asciilines+0x5a8>
 8c8:	ldr	r0, [sp, #72]	; 0x48
 8cc:	movw	r1, #2
 8d0:	bl	b80 <verify_eol_type>
 8d4:	cmp	r0, #0
 8d8:	beq	8f0 <coda_ascii_init_asciilines+0x5a4>
 8dc:	ldr	r0, [sp, #64]	; 0x40
 8e0:	bl	0 <free>
 8e4:	mvn	r0, #0
 8e8:	str	r0, [fp, #-12]
 8ec:	b	920 <coda_ascii_init_asciilines+0x5d4>
 8f0:	b	8f4 <coda_ascii_init_asciilines+0x5a8>
 8f4:	ldr	r0, [sp, #68]	; 0x44
 8f8:	ldr	r1, [sp, #72]	; 0x48
 8fc:	str	r0, [r1, #64]	; 0x40
 900:	ldr	r0, [sp, #64]	; 0x40
 904:	ldr	r1, [sp, #72]	; 0x48
 908:	str	r0, [r1, #68]	; 0x44
 90c:	ldr	r0, [sp, #48]	; 0x30
 910:	ldr	r1, [sp, #72]	; 0x48
 914:	str	r0, [r1, #72]	; 0x48
 918:	movw	r0, #0
 91c:	str	r0, [fp, #-12]
 920:	ldr	r0, [fp, #-12]
 924:	sub	sp, fp, #8
 928:	pop	{r4, sl, fp, pc}

0000092c <read_bytes>:
 92c:	push	{fp, lr}
 930:	mov	fp, sp
 934:	sub	sp, sp, #112	; 0x70
 938:	ldr	r1, [fp, #12]
 93c:	ldr	ip, [fp, #8]
 940:	ldr	lr, [fp, #16]
 944:	str	r0, [fp, #-8]
 948:	str	r3, [fp, #-12]
 94c:	str	r2, [fp, #-16]
 950:	str	r1, [fp, #-20]	; 0xffffffec
 954:	str	ip, [fp, #-24]	; 0xffffffe8
 958:	ldr	r0, [fp, #-8]
 95c:	ldr	r0, [r0, #48]	; 0x30
 960:	movw	r1, #0
 964:	cmp	r0, r1
 968:	beq	a80 <read_bytes+0x154>
 96c:	ldr	r0, [fp, #-16]
 970:	ldr	r1, [fp, #-12]
 974:	ldr	r2, [fp, #-24]	; 0xffffffe8
 978:	ldr	r3, [fp, #-20]	; 0xffffffec
 97c:	adds	r0, r0, r2
 980:	adc	r1, r1, r3
 984:	ldr	r2, [fp, #-8]
 988:	ldr	r3, [r2, #40]	; 0x28
 98c:	ldr	r2, [r2, #44]	; 0x2c
 990:	subs	r0, r3, r0
 994:	sbcs	r1, r2, r1
 998:	bcs	a60 <read_bytes+0x134>
 99c:	b	9a0 <read_bytes+0x74>
 9a0:	ldr	r0, [fp, #-8]
 9a4:	ldr	r0, [r0, #16]
 9a8:	cmp	r0, #0
 9ac:	beq	9c0 <read_bytes+0x94>
 9b0:	ldr	r0, [fp, #-8]
 9b4:	ldr	r0, [r0, #16]
 9b8:	cmp	r0, #1
 9bc:	bne	9dc <read_bytes+0xb0>
 9c0:	mvn	r0, #300	; 0x12c
 9c4:	movw	r1, #0
 9c8:	movt	r1, #0
 9cc:	bl	0 <coda_set_error>
 9d0:	mvn	r0, #0
 9d4:	str	r0, [fp, #-4]
 9d8:	b	b74 <read_bytes+0x248>
 9dc:	add	r2, sp, #25
 9e0:	ldr	r0, [fp, #-24]	; 0xffffffe8
 9e4:	ldr	r1, [fp, #-20]	; 0xffffffec
 9e8:	sub	r3, fp, #45	; 0x2d
 9ec:	str	r2, [sp, #20]
 9f0:	mov	r2, r3
 9f4:	bl	0 <coda_str64>
 9f8:	ldr	r0, [fp, #-16]
 9fc:	ldr	r1, [fp, #-12]
 a00:	add	r2, sp, #46	; 0x2e
 a04:	bl	0 <coda_str64>
 a08:	ldr	r0, [fp, #-8]
 a0c:	ldr	r1, [r0, #40]	; 0x28
 a10:	ldr	r0, [r0, #44]	; 0x2c
 a14:	str	r0, [sp, #16]
 a18:	mov	r0, r1
 a1c:	ldr	r1, [sp, #16]
 a20:	ldr	r2, [sp, #20]
 a24:	bl	0 <coda_str64>
 a28:	add	r0, sp, #25
 a2c:	add	r3, sp, #46	; 0x2e
 a30:	sub	r2, fp, #45	; 0x2d
 a34:	mvn	r1, #300	; 0x12c
 a38:	str	r0, [sp, #12]
 a3c:	mov	r0, r1
 a40:	movw	r1, #0
 a44:	movt	r1, #0
 a48:	ldr	ip, [sp, #12]
 a4c:	str	ip, [sp]
 a50:	bl	0 <coda_set_error>
 a54:	mvn	r0, #0
 a58:	str	r0, [fp, #-4]
 a5c:	b	b74 <read_bytes+0x248>
 a60:	ldr	r0, [fp, #16]
 a64:	ldr	r1, [fp, #-8]
 a68:	ldr	r1, [r1, #48]	; 0x30
 a6c:	ldr	r2, [fp, #-16]
 a70:	add	r1, r1, r2
 a74:	ldr	r2, [fp, #-24]	; 0xffffffe8
 a78:	bl	0 <memcpy>
 a7c:	b	b6c <read_bytes+0x240>
 a80:	ldr	r0, [fp, #-8]
 a84:	ldr	r0, [r0, #16]
 a88:	cmp	r0, #0
 a8c:	beq	aa0 <read_bytes+0x174>
 a90:	ldr	r0, [fp, #-8]
 a94:	ldr	r0, [r0, #16]
 a98:	cmp	r0, #1
 a9c:	bne	aa4 <read_bytes+0x178>
 aa0:	b	ac4 <read_bytes+0x198>
 aa4:	movw	r0, #0
 aa8:	movt	r0, #0
 aac:	movw	r1, #0
 ab0:	movt	r1, #0
 ab4:	movw	r2, #83	; 0x53
 ab8:	movw	r3, #0
 abc:	movt	r3, #0
 ac0:	bl	0 <__assert_fail>
 ac4:	ldr	r0, [fp, #-16]
 ac8:	ldr	r1, [fp, #-12]
 acc:	ldr	r2, [fp, #-24]	; 0xffffffe8
 ad0:	ldr	r3, [fp, #-20]	; 0xffffffec
 ad4:	adds	r0, r0, r2
 ad8:	adc	r1, r1, r3
 adc:	ldr	r2, [fp, #-8]
 ae0:	ldr	r3, [r2, #8]
 ae4:	ldr	r2, [r2, #12]
 ae8:	subs	r0, r3, r0
 aec:	sbcs	r1, r2, r1
 af0:	bcs	b14 <read_bytes+0x1e8>
 af4:	b	af8 <read_bytes+0x1cc>
 af8:	mvn	r0, #300	; 0x12c
 afc:	movw	r1, #0
 b00:	movt	r1, #0
 b04:	bl	0 <coda_set_error>
 b08:	mvn	r0, #0
 b0c:	str	r0, [fp, #-4]
 b10:	b	b74 <read_bytes+0x248>
 b14:	ldr	r0, [fp, #-8]
 b18:	ldr	r0, [r0, #56]	; 0x38
 b1c:	ldr	r1, [fp, #16]
 b20:	ldr	r2, [fp, #-24]	; 0xffffffe8
 b24:	ldr	r3, [fp, #-16]
 b28:	bl	0 <pread>
 b2c:	cmp	r0, #0
 b30:	bge	b68 <read_bytes+0x23c>
 b34:	bl	0 <__errno_location>
 b38:	ldr	r0, [r0]
 b3c:	bl	0 <strerror>
 b40:	mvn	r1, #21
 b44:	str	r0, [sp, #8]
 b48:	mov	r0, r1
 b4c:	movw	r1, #0
 b50:	movt	r1, #0
 b54:	ldr	r2, [sp, #8]
 b58:	bl	0 <coda_set_error>
 b5c:	mvn	r0, #0
 b60:	str	r0, [fp, #-4]
 b64:	b	b74 <read_bytes+0x248>
 b68:	b	b6c <read_bytes+0x240>
 b6c:	movw	r0, #0
 b70:	str	r0, [fp, #-4]
 b74:	ldr	r0, [fp, #-4]
 b78:	mov	sp, fp
 b7c:	pop	{fp, pc}

00000b80 <verify_eol_type>:
 b80:	push	{fp, lr}
 b84:	mov	fp, sp
 b88:	sub	sp, sp, #24
 b8c:	str	r0, [fp, #-8]
 b90:	str	r1, [sp, #12]
 b94:	ldr	r0, [sp, #12]
 b98:	cmp	r0, #0
 b9c:	beq	ba4 <verify_eol_type+0x24>
 ba0:	b	bc4 <verify_eol_type+0x44>
 ba4:	movw	r0, #0
 ba8:	movt	r0, #0
 bac:	movw	r1, #0
 bb0:	movt	r1, #0
 bb4:	movw	r2, #156	; 0x9c
 bb8:	movw	r3, #0
 bbc:	movt	r3, #0
 bc0:	bl	0 <__assert_fail>
 bc4:	ldr	r0, [fp, #-8]
 bc8:	ldr	r0, [r0, #60]	; 0x3c
 bcc:	cmp	r0, #0
 bd0:	bne	bec <verify_eol_type+0x6c>
 bd4:	ldr	r0, [sp, #12]
 bd8:	ldr	r1, [fp, #-8]
 bdc:	str	r0, [r1, #60]	; 0x3c
 be0:	movw	r0, #0
 be4:	str	r0, [fp, #-4]
 be8:	b	c50 <verify_eol_type+0xd0>
 bec:	ldr	r0, [fp, #-8]
 bf0:	ldr	r0, [r0, #60]	; 0x3c
 bf4:	ldr	r1, [sp, #12]
 bf8:	cmp	r0, r1
 bfc:	beq	c48 <verify_eol_type+0xc8>
 c00:	ldr	r0, [sp, #12]
 c04:	bl	c60 <eol_type_to_string>
 c08:	ldr	r1, [fp, #-8]
 c0c:	ldr	r1, [r1, #60]	; 0x3c
 c10:	str	r0, [sp, #8]
 c14:	mov	r0, r1
 c18:	bl	c60 <eol_type_to_string>
 c1c:	ldr	r1, [pc, #56]	; c5c <verify_eol_type+0xdc>
 c20:	str	r0, [sp, #4]
 c24:	mov	r0, r1
 c28:	movw	r1, #0
 c2c:	movt	r1, #0
 c30:	ldr	r2, [sp, #8]
 c34:	ldr	r3, [sp, #4]
 c38:	bl	0 <coda_set_error>
 c3c:	mvn	r0, #0
 c40:	str	r0, [fp, #-4]
 c44:	b	c50 <verify_eol_type+0xd0>
 c48:	movw	r0, #0
 c4c:	str	r0, [fp, #-4]
 c50:	ldr	r0, [fp, #-4]
 c54:	mov	sp, fp
 c58:	pop	{fp, pc}
 c5c:	.word	0xfffffed4

00000c60 <eol_type_to_string>:
 c60:	push	{fp, lr}
 c64:	mov	fp, sp
 c68:	sub	sp, sp, #16
 c6c:	str	r0, [sp, #8]
 c70:	ldr	r0, [sp, #8]
 c74:	cmp	r0, #1
 c78:	str	r0, [sp, #4]
 c7c:	beq	cb4 <eol_type_to_string+0x54>
 c80:	b	c84 <eol_type_to_string+0x24>
 c84:	ldr	r0, [sp, #4]
 c88:	cmp	r0, #2
 c8c:	beq	ca4 <eol_type_to_string+0x44>
 c90:	b	c94 <eol_type_to_string+0x34>
 c94:	ldr	r0, [sp, #4]
 c98:	cmp	r0, #3
 c9c:	beq	cc4 <eol_type_to_string+0x64>
 ca0:	b	cd4 <eol_type_to_string+0x74>
 ca4:	movw	r0, #0
 ca8:	movt	r0, #0
 cac:	str	r0, [fp, #-4]
 cb0:	b	cf8 <eol_type_to_string+0x98>
 cb4:	movw	r0, #0
 cb8:	movt	r0, #0
 cbc:	str	r0, [fp, #-4]
 cc0:	b	cf8 <eol_type_to_string+0x98>
 cc4:	movw	r0, #0
 cc8:	movt	r0, #0
 ccc:	str	r0, [fp, #-4]
 cd0:	b	cf8 <eol_type_to_string+0x98>
 cd4:	b	cd8 <eol_type_to_string+0x78>
 cd8:	movw	r0, #0
 cdc:	movt	r0, #0
 ce0:	movw	r1, #0
 ce4:	movt	r1, #0
 ce8:	movw	r2, #150	; 0x96
 cec:	movw	r3, #0
 cf0:	movt	r3, #0
 cf4:	bl	0 <__assert_fail>
 cf8:	ldr	r0, [fp, #-4]
 cfc:	mov	sp, fp
 d00:	pop	{fp, pc}
