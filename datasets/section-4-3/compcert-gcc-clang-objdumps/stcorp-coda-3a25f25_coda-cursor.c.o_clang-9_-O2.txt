
../compcert-repos/stcorp-coda-3a25f25/CMakeFiles/coda_static.dir/libcoda/coda-cursor.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <coda_dynamic_type_delete>:
       0:	cmp	r0, #0
       4:	beq	3c <coda_dynamic_type_delete+0x3c>
       8:	ldr	r1, [r0]
       c:	sub	r2, r1, #100	; 0x64
      10:	cmp	r2, #5
      14:	bhi	40 <coda_dynamic_type_delete+0x40>
      18:	add	r1, pc, #0
      1c:	ldr	pc, [r1, r2, lsl #2]
      20:	.word	0x00000038
      24:	.word	0x0000003c
      28:	.word	0x0000003c
      2c:	.word	0x0000004c
      30:	.word	0x00000050
      34:	.word	0x00000054
      38:	b	0 <coda_mem_type_delete>
      3c:	bx	lr
      40:	cmp	r1, #2
      44:	bxcs	lr
      48:	b	0 <coda_type_release>
      4c:	b	0 <coda_cdf_type_delete>
      50:	b	0 <coda_netcdf_type_delete>
      54:	b	0 <coda_grib_type_delete>

00000058 <coda_cursor_compare>:
      58:	push	{r4, r5, fp, lr}
      5c:	add	fp, sp, #8
      60:	ldr	ip, [r1, #4]
      64:	ldr	r2, [r0, #4]
      68:	mov	r3, #0
      6c:	mov	r4, #0
      70:	cmp	ip, #0
      74:	movwgt	r4, #1
      78:	cmp	r2, #1
      7c:	blt	dc <coda_cursor_compare+0x84>
      80:	add	lr, r1, #12
      84:	add	r1, r0, #12
      88:	mov	r0, #1
      8c:	tst	r4, #1
      90:	bne	b8 <coda_cursor_compare+0x60>
      94:	b	e0 <coda_cursor_compare+0x88>
      98:	add	r3, r3, #1
      9c:	mov	r4, #0
      a0:	cmp	r3, ip
      a4:	movwlt	r4, #1
      a8:	cmp	r3, r2
      ac:	bge	dc <coda_cursor_compare+0x84>
      b0:	tst	r4, #1
      b4:	beq	e0 <coda_cursor_compare+0x88>
      b8:	cmp	r3, #0
      bc:	beq	98 <coda_cursor_compare+0x40>
      c0:	ldr	r4, [lr, r3, lsl #4]
      c4:	ldr	r5, [r1, r3, lsl #4]
      c8:	cmp	r5, r4
      cc:	bgt	e0 <coda_cursor_compare+0x88>
      d0:	bge	98 <coda_cursor_compare+0x40>
      d4:	mvn	r0, #0
      d8:	pop	{r4, r5, fp, pc}
      dc:	rsb	r0, r4, #0
      e0:	pop	{r4, r5, fp, pc}

000000e4 <coda_cursor_print_path>:
      e4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
      e8:	add	fp, sp, #28
      ec:	sub	sp, sp, #12
      f0:	mov	r5, r0
      f4:	ldr	r0, [r0, #4]
      f8:	mov	r4, r1
      fc:	cmp	r0, #2
     100:	bge	11c <coda_cursor_print_path+0x38>
     104:	movw	r0, #0
     108:	movt	r0, #0
     10c:	blx	r4
     110:	asr	r0, r0, #31
     114:	sub	sp, fp, #28
     118:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
     11c:	mov	sl, #0
     120:	add	r6, sp, #8
     124:	b	150 <coda_cursor_print_path+0x6c>
     128:	movw	r1, #0
     12c:	movw	r0, #0
     130:	cmp	sl, #0
     134:	movt	r1, #0
     138:	movt	r0, #0
     13c:	moveq	r0, r1
     140:	blx	r4
     144:	cmp	r0, #0
     148:	bpl	21c <coda_cursor_print_path+0x138>
     14c:	b	240 <coda_cursor_print_path+0x15c>
     150:	add	r9, r5, sl, lsl #4
     154:	ldr	r7, [r9, #28]
     158:	cmn	r7, #1
     15c:	beq	128 <coda_cursor_print_path+0x44>
     160:	ldr	r8, [r9, #8]
     164:	mov	r1, r6
     168:	ldr	r0, [r8]
     16c:	cmp	r0, #99	; 0x63
     170:	ldrhi	r8, [r8, #4]
     174:	mov	r0, r8
     178:	bl	0 <coda_type_get_class>
     17c:	cmp	r0, #0
     180:	bne	240 <coda_cursor_print_path+0x15c>
     184:	ldr	r0, [sp, #8]
     188:	cmp	r0, #0
     18c:	beq	1c4 <coda_cursor_print_path+0xe0>
     190:	cmp	r0, #1
     194:	bne	24c <coda_cursor_print_path+0x168>
     198:	movw	r1, #0
     19c:	movw	r0, #0
     1a0:	cmp	sl, #0
     1a4:	movt	r1, #0
     1a8:	movt	r0, #0
     1ac:	moveq	r0, r1
     1b0:	mov	r1, r7
     1b4:	blx	r4
     1b8:	cmp	r0, #0
     1bc:	bpl	21c <coda_cursor_print_path+0x138>
     1c0:	b	240 <coda_cursor_print_path+0x15c>
     1c4:	mov	r0, r8
     1c8:	mov	r1, r7
     1cc:	add	r2, sp, #4
     1d0:	bl	0 <coda_type_get_record_field_name>
     1d4:	cmp	r0, #0
     1d8:	bne	240 <coda_cursor_print_path+0x15c>
     1dc:	cmp	sl, #0
     1e0:	beq	1f0 <coda_cursor_print_path+0x10c>
     1e4:	ldr	r0, [r9, #12]
     1e8:	cmn	r0, #1
     1ec:	beq	204 <coda_cursor_print_path+0x120>
     1f0:	movw	r0, #0
     1f4:	movt	r0, #0
     1f8:	blx	r4
     1fc:	cmp	r0, #0
     200:	bmi	240 <coda_cursor_print_path+0x15c>
     204:	ldr	r1, [sp, #4]
     208:	movw	r0, #0
     20c:	movt	r0, #0
     210:	blx	r4
     214:	cmn	r0, #1
     218:	ble	240 <coda_cursor_print_path+0x15c>
     21c:	ldr	r1, [r5, #4]
     220:	add	r2, sl, #2
     224:	add	r0, sl, #1
     228:	mov	sl, r0
     22c:	cmp	r2, r1
     230:	blt	150 <coda_cursor_print_path+0x6c>
     234:	mov	r0, #0
     238:	sub	sp, fp, #28
     23c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
     240:	mvn	r0, #0
     244:	sub	sp, fp, #28
     248:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
     24c:	movw	r0, #0
     250:	movw	r1, #0
     254:	movw	r3, #0
     258:	movw	r2, #305	; 0x131
     25c:	movt	r0, #0
     260:	movt	r1, #0
     264:	movt	r3, #0
     268:	bl	0 <__assert_fail>

0000026c <coda_cursor_set_product>:
     26c:	push	{fp, lr}
     270:	mov	fp, sp
     274:	cmp	r0, #0
     278:	beq	2c8 <coda_cursor_set_product+0x5c>
     27c:	cmp	r1, #0
     280:	beq	2e0 <coda_cursor_set_product+0x74>
     284:	ldr	r2, [r1, #16]
     288:	cmp	r2, #9
     28c:	bhi	350 <coda_cursor_set_product+0xe4>
     290:	add	r3, pc, #0
     294:	ldr	pc, [r3, r2, lsl #2]
     298:	.word	0x000002c0
     29c:	.word	0x000002c0
     2a0:	.word	0x0000030c
     2a4:	.word	0x0000031c
     2a8:	.word	0x00000304
     2ac:	.word	0x00000338
     2b0:	.word	0x00000340
     2b4:	.word	0x00000330
     2b8:	.word	0x00000348
     2bc:	.word	0x00000314
     2c0:	pop	{fp, lr}
     2c4:	b	0 <coda_ascbin_cursor_set_product>
     2c8:	movw	r1, #0
     2cc:	movw	r2, #0
     2d0:	mvn	r0, #99	; 0x63
     2d4:	movw	r3, #325	; 0x145
     2d8:	movt	r1, #0
     2dc:	b	2f4 <coda_cursor_set_product+0x88>
     2e0:	movw	r1, #0
     2e4:	movw	r2, #0
     2e8:	mvn	r0, #99	; 0x63
     2ec:	movw	r3, #331	; 0x14b
     2f0:	movt	r1, #0
     2f4:	movt	r2, #0
     2f8:	bl	0 <coda_set_error>
     2fc:	mvn	r0, #0
     300:	pop	{fp, pc}
     304:	mvn	r0, #12
     308:	b	320 <coda_cursor_set_product+0xb4>
     30c:	pop	{fp, lr}
     310:	b	0 <coda_xml_cursor_set_product>
     314:	pop	{fp, lr}
     318:	b	0 <coda_sp3_cursor_set_product>
     31c:	mvn	r0, #10
     320:	mov	r1, #0
     324:	bl	0 <coda_set_error>
     328:	mvn	r0, #0
     32c:	pop	{fp, pc}
     330:	pop	{fp, lr}
     334:	b	0 <coda_grib_cursor_set_product>
     338:	pop	{fp, lr}
     33c:	b	0 <coda_cdf_cursor_set_product>
     340:	pop	{fp, lr}
     344:	b	0 <coda_netcdf_cursor_set_product>
     348:	pop	{fp, lr}
     34c:	b	0 <coda_rinex_cursor_set_product>
     350:	movw	r0, #0
     354:	movw	r1, #0
     358:	movw	r3, #0
     35c:	mov	r2, #368	; 0x170
     360:	movt	r0, #0
     364:	movt	r1, #0
     368:	movt	r3, #0
     36c:	bl	0 <__assert_fail>

00000370 <coda_cursor_goto>:
     370:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
     374:	add	fp, sp, #28
     378:	sub	sp, sp, #12
     37c:	mov	r9, r0
     380:	ldrb	r0, [r1]
     384:	mov	r4, r1
     388:	mov	r8, #0
     38c:	cmp	r0, #47	; 0x2f
     390:	bne	3d8 <coda_cursor_goto+0x68>
     394:	mov	r0, r9
     398:	bl	7a4 <coda_cursor_goto_root>
     39c:	mvn	r7, #0
     3a0:	cmp	r0, #0
     3a4:	bne	6fc <coda_cursor_goto+0x38c>
     3a8:	ldrb	r0, [r4, #1]
     3ac:	cmp	r0, #63	; 0x3f
     3b0:	bgt	3c8 <coda_cursor_goto+0x58>
     3b4:	cmp	r0, #0
     3b8:	beq	3d4 <coda_cursor_goto+0x64>
     3bc:	cmp	r0, #47	; 0x2f
     3c0:	moveq	r8, #1
     3c4:	b	3d8 <coda_cursor_goto+0x68>
     3c8:	cmp	r0, #91	; 0x5b
     3cc:	cmpne	r0, #64	; 0x40
     3d0:	bne	3d8 <coda_cursor_goto+0x68>
     3d4:	mov	r8, #1
     3d8:	add	sl, sp, #8
     3dc:	ldrb	r0, [r4, r8]
     3e0:	mov	r6, r8
     3e4:	cmp	r0, #63	; 0x3f
     3e8:	ble	44c <coda_cursor_goto+0xdc>
     3ec:	cmp	r0, #91	; 0x5b
     3f0:	beq	45c <coda_cursor_goto+0xec>
     3f4:	cmp	r0, #64	; 0x40
     3f8:	bne	550 <coda_cursor_goto+0x1e0>
     3fc:	mov	r0, r9
     400:	bl	87c <coda_cursor_goto_attributes>
     404:	mvn	r7, #0
     408:	cmp	r0, #0
     40c:	bne	6fc <coda_cursor_goto+0x38c>
     410:	add	r0, r6, #1
     414:	mov	r2, #0
     418:	add	r1, r4, r0
     41c:	ldrb	r3, [r1, -r2]
     420:	cmp	r3, #63	; 0x3f
     424:	bgt	438 <coda_cursor_goto+0xc8>
     428:	cmp	r3, #0
     42c:	cmpne	r3, #47	; 0x2f
     430:	bne	444 <coda_cursor_goto+0xd4>
     434:	b	480 <coda_cursor_goto+0x110>
     438:	cmp	r3, #64	; 0x40
     43c:	cmpne	r3, #91	; 0x5b
     440:	beq	480 <coda_cursor_goto+0x110>
     444:	sub	r2, r2, #1
     448:	b	41c <coda_cursor_goto+0xac>
     44c:	cmp	r0, #47	; 0x2f
     450:	bne	548 <coda_cursor_goto+0x1d8>
     454:	add	r6, r6, #1
     458:	b	558 <coda_cursor_goto+0x1e8>
     45c:	add	r5, r6, #1
     460:	mov	r6, r5
     464:	ldrb	r0, [r4, r6]
     468:	cmp	r0, #0
     46c:	beq	6bc <coda_cursor_goto+0x34c>
     470:	cmp	r0, #93	; 0x5d
     474:	beq	664 <coda_cursor_goto+0x2f4>
     478:	add	r6, r6, #1
     47c:	b	464 <coda_cursor_goto+0xf4>
     480:	sub	r3, r6, r2
     484:	cmn	r2, #1
     488:	add	r8, r3, #1
     48c:	bne	49c <coda_cursor_goto+0x12c>
     490:	ldrb	r3, [r4, r0]
     494:	cmp	r3, #46	; 0x2e
     498:	beq	3dc <coda_cursor_goto+0x6c>
     49c:	cmn	r2, #2
     4a0:	bne	4f8 <coda_cursor_goto+0x188>
     4a4:	ldrb	r3, [r4, r0]
     4a8:	cmp	r3, #46	; 0x2e
     4ac:	bne	4f8 <coda_cursor_goto+0x188>
     4b0:	add	r3, r6, #2
     4b4:	ldrb	r3, [r4, r3]
     4b8:	cmp	r3, #46	; 0x2e
     4bc:	bne	4f8 <coda_cursor_goto+0x188>
     4c0:	cmp	r9, #0
     4c4:	beq	764 <coda_cursor_goto+0x3f4>
     4c8:	ldr	r0, [r9, #4]
     4cc:	cmp	r0, #1
     4d0:	blt	764 <coda_cursor_goto+0x3f4>
     4d4:	sub	r1, r0, #1
     4d8:	add	r2, r9, r1, lsl #4
     4dc:	ldr	r2, [r2, #8]
     4e0:	cmp	r2, #0
     4e4:	beq	764 <coda_cursor_goto+0x3f4>
     4e8:	cmp	r0, #1
     4ec:	ble	794 <coda_cursor_goto+0x424>
     4f0:	str	r1, [r9, #4]
     4f4:	b	3dc <coda_cursor_goto+0x6c>
     4f8:	cmp	r8, r0
     4fc:	ble	3dc <coda_cursor_goto+0x6c>
     500:	cmp	r9, #0
     504:	beq	708 <coda_cursor_goto+0x398>
     508:	ldr	r0, [r9, #4]
     50c:	cmp	r0, #1
     510:	blt	708 <coda_cursor_goto+0x398>
     514:	add	r0, r9, r0, lsl #4
     518:	ldr	r0, [r0, #-8]
     51c:	cmp	r0, #0
     520:	beq	708 <coda_cursor_goto+0x398>
     524:	ldr	r3, [r0]
     528:	rsb	r2, r2, #0
     52c:	cmp	r3, #99	; 0x63
     530:	mov	r3, sl
     534:	ldrhi	r0, [r0, #4]
     538:	bl	0 <coda_type_get_record_field_index_from_name_n>
     53c:	cmp	r0, #0
     540:	beq	64c <coda_cursor_goto+0x2dc>
     544:	b	6fc <coda_cursor_goto+0x38c>
     548:	cmp	r0, #0
     54c:	beq	6d4 <coda_cursor_goto+0x364>
     550:	cmp	r6, #1
     554:	bge	71c <coda_cursor_goto+0x3ac>
     558:	add	r1, r4, r6
     55c:	mov	r2, #0
     560:	ldrb	r0, [r1, -r2]
     564:	cmp	r0, #63	; 0x3f
     568:	bgt	57c <coda_cursor_goto+0x20c>
     56c:	cmp	r0, #0
     570:	cmpne	r0, #47	; 0x2f
     574:	bne	588 <coda_cursor_goto+0x218>
     578:	b	590 <coda_cursor_goto+0x220>
     57c:	cmp	r0, #64	; 0x40
     580:	cmpne	r0, #91	; 0x5b
     584:	beq	590 <coda_cursor_goto+0x220>
     588:	sub	r2, r2, #1
     58c:	b	560 <coda_cursor_goto+0x1f0>
     590:	sub	r8, r6, r2
     594:	cmn	r2, #1
     598:	bne	5a8 <coda_cursor_goto+0x238>
     59c:	ldrb	r0, [r4, r6]
     5a0:	cmp	r0, #46	; 0x2e
     5a4:	beq	3dc <coda_cursor_goto+0x6c>
     5a8:	cmn	r2, #2
     5ac:	bne	604 <coda_cursor_goto+0x294>
     5b0:	ldrb	r0, [r4, r6]
     5b4:	cmp	r0, #46	; 0x2e
     5b8:	bne	604 <coda_cursor_goto+0x294>
     5bc:	add	r0, r6, #1
     5c0:	ldrb	r0, [r4, r0]
     5c4:	cmp	r0, #46	; 0x2e
     5c8:	bne	604 <coda_cursor_goto+0x294>
     5cc:	cmp	r9, #0
     5d0:	beq	728 <coda_cursor_goto+0x3b8>
     5d4:	ldr	r0, [r9, #4]
     5d8:	cmp	r0, #1
     5dc:	blt	728 <coda_cursor_goto+0x3b8>
     5e0:	sub	r1, r0, #1
     5e4:	add	r2, r9, r1, lsl #4
     5e8:	ldr	r2, [r2, #8]
     5ec:	cmp	r2, #0
     5f0:	beq	728 <coda_cursor_goto+0x3b8>
     5f4:	cmp	r0, #1
     5f8:	ble	784 <coda_cursor_goto+0x414>
     5fc:	str	r1, [r9, #4]
     600:	b	3dc <coda_cursor_goto+0x6c>
     604:	cmp	r9, #0
     608:	beq	6dc <coda_cursor_goto+0x36c>
     60c:	ldr	r0, [r9, #4]
     610:	cmp	r0, #1
     614:	blt	6dc <coda_cursor_goto+0x36c>
     618:	add	r0, r9, r0, lsl #4
     61c:	ldr	r0, [r0, #-8]
     620:	cmp	r0, #0
     624:	beq	6dc <coda_cursor_goto+0x36c>
     628:	ldr	r3, [r0]
     62c:	rsb	r2, r2, #0
     630:	cmp	r3, #99	; 0x63
     634:	mov	r3, sl
     638:	ldrhi	r0, [r0, #4]
     63c:	bl	0 <coda_type_get_record_field_index_from_name_n>
     640:	mvn	r7, #0
     644:	cmp	r0, #0
     648:	bne	6fc <coda_cursor_goto+0x38c>
     64c:	ldr	r1, [sp, #8]
     650:	mov	r0, r9
     654:	bl	ac8 <coda_cursor_goto_record_field_by_index>
     658:	cmp	r0, #0
     65c:	beq	3dc <coda_cursor_goto+0x6c>
     660:	b	6fc <coda_cursor_goto+0x38c>
     664:	cmp	r6, r5
     668:	beq	73c <coda_cursor_goto+0x3cc>
     66c:	movw	r1, #0
     670:	add	r7, r4, r5
     674:	mov	r2, sl
     678:	add	r3, sp, #4
     67c:	movt	r1, #0
     680:	mov	r0, r7
     684:	bl	0 <__isoc99_sscanf>
     688:	cmp	r0, #1
     68c:	bne	74c <coda_cursor_goto+0x3dc>
     690:	ldr	r0, [sp, #4]
     694:	sub	r2, r6, r5
     698:	cmp	r2, r0
     69c:	bne	750 <coda_cursor_goto+0x3e0>
     6a0:	ldr	r1, [sp, #8]
     6a4:	mov	r0, r9
     6a8:	bl	c98 <coda_cursor_goto_array_element_by_index>
     6ac:	add	r8, r6, #1
     6b0:	cmp	r0, #0
     6b4:	beq	3dc <coda_cursor_goto+0x6c>
     6b8:	b	6f8 <coda_cursor_goto+0x388>
     6bc:	movw	r1, #0
     6c0:	movt	r1, #0
     6c4:	mvn	r0, #99	; 0x63
     6c8:	mov	r2, r4
     6cc:	bl	0 <coda_set_error>
     6d0:	b	6f8 <coda_cursor_goto+0x388>
     6d4:	mov	r7, #0
     6d8:	b	6fc <coda_cursor_goto+0x38c>
     6dc:	movw	r1, #0
     6e0:	movw	r2, #0
     6e4:	mvn	r0, #99	; 0x63
     6e8:	movw	r3, #2028	; 0x7ec
     6ec:	movt	r1, #0
     6f0:	movt	r2, #0
     6f4:	bl	0 <coda_set_error>
     6f8:	mvn	r7, #0
     6fc:	mov	r0, r7
     700:	sub	sp, fp, #28
     704:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
     708:	movw	r1, #0
     70c:	movw	r2, #0
     710:	mvn	r0, #99	; 0x63
     714:	movw	r3, #2028	; 0x7ec
     718:	b	774 <coda_cursor_goto+0x404>
     71c:	movw	r1, #0
     720:	movt	r1, #0
     724:	b	6c4 <coda_cursor_goto+0x354>
     728:	movw	r1, #0
     72c:	movw	r2, #0
     730:	mvn	r0, #99	; 0x63
     734:	movw	r3, #1333	; 0x535
     738:	b	6ec <coda_cursor_goto+0x37c>
     73c:	movw	r1, #0
     740:	mvn	r0, #99	; 0x63
     744:	movt	r1, #0
     748:	b	78c <coda_cursor_goto+0x41c>
     74c:	sub	r2, r6, r5
     750:	movw	r1, #0
     754:	mvn	r0, #99	; 0x63
     758:	mov	r3, r7
     75c:	movt	r1, #0
     760:	b	6f4 <coda_cursor_goto+0x384>
     764:	movw	r1, #0
     768:	movw	r2, #0
     76c:	mvn	r0, #99	; 0x63
     770:	movw	r3, #1333	; 0x535
     774:	movt	r1, #0
     778:	movt	r2, #0
     77c:	bl	0 <coda_set_error>
     780:	b	6fc <coda_cursor_goto+0x38c>
     784:	mvn	r0, #107	; 0x6b
     788:	mov	r1, #0
     78c:	bl	0 <coda_set_error>
     790:	b	6f8 <coda_cursor_goto+0x388>
     794:	mvn	r0, #107	; 0x6b
     798:	mov	r1, #0
     79c:	bl	0 <coda_set_error>
     7a0:	b	6fc <coda_cursor_goto+0x38c>

000007a4 <coda_cursor_goto_root>:
     7a4:	push	{r4, sl, fp, lr}
     7a8:	add	fp, sp, #8
     7ac:	cmp	r0, #0
     7b0:	beq	84c <coda_cursor_goto_root+0xa8>
     7b4:	mov	r4, r0
     7b8:	ldr	r0, [r0, #4]
     7bc:	cmp	r0, #1
     7c0:	blt	84c <coda_cursor_goto_root+0xa8>
     7c4:	add	r0, r4, r0, lsl #4
     7c8:	ldr	r0, [r0, #-8]
     7cc:	cmp	r0, #0
     7d0:	beq	84c <coda_cursor_goto_root+0xa8>
     7d4:	mov	r0, #1
     7d8:	str	r0, [r4, #4]
     7dc:	ldr	r0, [r4, #8]
     7e0:	ldr	r0, [r0]
     7e4:	cmp	r0, #100	; 0x64
     7e8:	bne	7f4 <coda_cursor_goto_root+0x50>
     7ec:	mov	r0, r4
     7f0:	bl	0 <coda_mem_cursor_update_offset>
     7f4:	ldr	r0, [pc, #124]	; 878 <coda_cursor_goto_root+0xd4>
     7f8:	ldr	r1, [pc, r0]
     7fc:	bl	0 <__aeabi_read_tp>
     800:	ldr	r0, [r0, r1]
     804:	cmp	r0, #0
     808:	beq	870 <coda_cursor_goto_root+0xcc>
     80c:	ldr	r0, [r4, #4]
     810:	add	r0, r4, r0, lsl #4
     814:	ldr	r0, [r0, #-8]
     818:	ldr	r1, [r0]
     81c:	cmp	r1, #99	; 0x63
     820:	ldrhi	r0, [r0, #4]
     824:	ldr	r0, [r0, #8]
     828:	cmp	r0, #6
     82c:	bne	870 <coda_cursor_goto_root+0xcc>
     830:	mov	r0, r4
     834:	bl	e7c <coda_cursor_use_base_type_of_special_type>
     838:	mov	r1, r0
     83c:	mvn	r0, #0
     840:	cmp	r1, #0
     844:	moveq	r0, #0
     848:	pop	{r4, sl, fp, pc}
     84c:	movw	r1, #0
     850:	movw	r2, #0
     854:	mvn	r0, #99	; 0x63
     858:	movw	r3, #1359	; 0x54f
     85c:	movt	r1, #0
     860:	movt	r2, #0
     864:	bl	0 <coda_set_error>
     868:	mvn	r0, #0
     86c:	pop	{r4, sl, fp, pc}
     870:	mov	r0, #0
     874:	pop	{r4, sl, fp, pc}
     878:	.word	0x00000078

0000087c <coda_cursor_goto_attributes>:
     87c:	push	{r4, r5, fp, lr}
     880:	add	fp, sp, #8
     884:	sub	sp, sp, #8
     888:	cmp	r0, #0
     88c:	beq	8dc <coda_cursor_goto_attributes+0x60>
     890:	mov	r4, r0
     894:	ldr	r0, [r0, #4]
     898:	cmp	r0, #1
     89c:	blt	8dc <coda_cursor_goto_attributes+0x60>
     8a0:	add	r1, r4, r0, lsl #4
     8a4:	ldr	r1, [r1, #-8]
     8a8:	cmp	r1, #0
     8ac:	beq	8dc <coda_cursor_goto_attributes+0x60>
     8b0:	cmp	r0, #32
     8b4:	bne	908 <coda_cursor_goto_attributes+0x8c>
     8b8:	movw	r1, #0
     8bc:	movw	r3, #0
     8c0:	movw	r0, #1251	; 0x4e3
     8c4:	mov	r2, #32
     8c8:	str	r0, [sp]
     8cc:	movt	r1, #0
     8d0:	movt	r3, #0
     8d4:	mvn	r0, #99	; 0x63
     8d8:	b	8f4 <coda_cursor_goto_attributes+0x78>
     8dc:	movw	r1, #0
     8e0:	movw	r2, #0
     8e4:	mvn	r0, #99	; 0x63
     8e8:	movw	r3, #1244	; 0x4dc
     8ec:	movt	r1, #0
     8f0:	movt	r2, #0
     8f4:	bl	0 <coda_set_error>
     8f8:	mvn	r5, #0
     8fc:	mov	r0, r5
     900:	sub	sp, fp, #8
     904:	pop	{r4, r5, fp, pc}
     908:	ldr	r0, [r1]
     90c:	sub	r1, r0, #100	; 0x64
     910:	cmp	r1, #5
     914:	bhi	944 <coda_cursor_goto_attributes+0xc8>
     918:	add	r0, pc, #0
     91c:	ldr	pc, [r0, r1, lsl #2]
     920:	.word	0x00000938
     924:	.word	0x00000958
     928:	.word	0x00000960
     92c:	.word	0x00000970
     930:	.word	0x0000097c
     934:	.word	0x00000988
     938:	mov	r0, r4
     93c:	bl	0 <coda_mem_cursor_goto_attributes>
     940:	b	990 <coda_cursor_goto_attributes+0x114>
     944:	cmp	r0, #2
     948:	bcs	99c <coda_cursor_goto_attributes+0x120>
     94c:	mov	r0, r4
     950:	bl	0 <coda_ascbin_cursor_goto_attributes>
     954:	b	990 <coda_cursor_goto_attributes+0x114>
     958:	mvn	r0, #10
     95c:	b	964 <coda_cursor_goto_attributes+0xe8>
     960:	mvn	r0, #12
     964:	mov	r1, #0
     968:	bl	0 <coda_set_error>
     96c:	b	8f8 <coda_cursor_goto_attributes+0x7c>
     970:	mov	r0, r4
     974:	bl	0 <coda_cdf_cursor_goto_attributes>
     978:	b	990 <coda_cursor_goto_attributes+0x114>
     97c:	mov	r0, r4
     980:	bl	0 <coda_netcdf_cursor_goto_attributes>
     984:	b	990 <coda_cursor_goto_attributes+0x114>
     988:	mov	r0, r4
     98c:	bl	0 <coda_grib_cursor_goto_attributes>
     990:	mvn	r5, #0
     994:	cmp	r0, #0
     998:	bne	8fc <coda_cursor_goto_attributes+0x80>
     99c:	ldr	r0, [r4, #4]
     9a0:	mov	r5, #0
     9a4:	add	r0, r4, r0, lsl #4
     9a8:	ldr	r0, [r0, #-8]
     9ac:	ldr	r0, [r0]
     9b0:	cmp	r0, #100	; 0x64
     9b4:	bne	8fc <coda_cursor_goto_attributes+0x80>
     9b8:	mov	r0, r4
     9bc:	bl	0 <coda_mem_cursor_update_offset>
     9c0:	b	8fc <coda_cursor_goto_attributes+0x80>

000009c4 <coda_cursor_goto_parent>:
     9c4:	push	{fp, lr}
     9c8:	mov	fp, sp
     9cc:	cmp	r0, #0
     9d0:	beq	a10 <coda_cursor_goto_parent+0x4c>
     9d4:	ldr	r1, [r0, #4]
     9d8:	cmp	r1, #1
     9dc:	blt	a10 <coda_cursor_goto_parent+0x4c>
     9e0:	sub	r2, r1, #1
     9e4:	add	r3, r0, r2, lsl #4
     9e8:	ldr	r3, [r3, #8]
     9ec:	cmp	r3, #0
     9f0:	beq	a10 <coda_cursor_goto_parent+0x4c>
     9f4:	cmp	r1, #1
     9f8:	bgt	a34 <coda_cursor_goto_parent+0x70>
     9fc:	mvn	r0, #107	; 0x6b
     a00:	mov	r1, #0
     a04:	bl	0 <coda_set_error>
     a08:	mvn	r0, #0
     a0c:	pop	{fp, pc}
     a10:	movw	r1, #0
     a14:	movw	r2, #0
     a18:	mvn	r0, #99	; 0x63
     a1c:	movw	r3, #1333	; 0x535
     a20:	movt	r1, #0
     a24:	movt	r2, #0
     a28:	bl	0 <coda_set_error>
     a2c:	mvn	r0, #0
     a30:	pop	{fp, pc}
     a34:	str	r2, [r0, #4]
     a38:	mov	r0, #0
     a3c:	pop	{fp, pc}

00000a40 <coda_cursor_get_type>:
     a40:	push	{fp, lr}
     a44:	mov	fp, sp
     a48:	cmp	r0, #0
     a4c:	beq	a8c <coda_cursor_get_type+0x4c>
     a50:	ldr	r2, [r0, #4]
     a54:	cmp	r2, #1
     a58:	blt	a8c <coda_cursor_get_type+0x4c>
     a5c:	add	r0, r0, r2, lsl #4
     a60:	ldr	r0, [r0, #-8]
     a64:	cmp	r0, #0
     a68:	beq	a8c <coda_cursor_get_type+0x4c>
     a6c:	cmp	r1, #0
     a70:	beq	ab0 <coda_cursor_get_type+0x70>
     a74:	ldr	r2, [r0]
     a78:	cmp	r2, #99	; 0x63
     a7c:	ldrhi	r0, [r0, #4]
     a80:	str	r0, [r1]
     a84:	mov	r0, #0
     a88:	pop	{fp, pc}
     a8c:	movw	r1, #0
     a90:	movw	r2, #0
     a94:	mvn	r0, #99	; 0x63
     a98:	movw	r3, #2028	; 0x7ec
     a9c:	movt	r1, #0
     aa0:	movt	r2, #0
     aa4:	bl	0 <coda_set_error>
     aa8:	mvn	r0, #0
     aac:	pop	{fp, pc}
     ab0:	movw	r1, #0
     ab4:	movw	r2, #0
     ab8:	mvn	r0, #99	; 0x63
     abc:	movw	r3, #2033	; 0x7f1
     ac0:	movt	r1, #0
     ac4:	b	aa0 <coda_cursor_get_type+0x60>

00000ac8 <coda_cursor_goto_record_field_by_index>:
     ac8:	push	{r4, sl, fp, lr}
     acc:	add	fp, sp, #8
     ad0:	sub	sp, sp, #8
     ad4:	cmp	r0, #0
     ad8:	beq	b30 <coda_cursor_goto_record_field_by_index+0x68>
     adc:	ldr	r2, [r0, #4]
     ae0:	mov	r4, r0
     ae4:	cmp	r2, #1
     ae8:	blt	b30 <coda_cursor_goto_record_field_by_index+0x68>
     aec:	add	r0, r4, r2, lsl #4
     af0:	ldr	r0, [r0, #-8]
     af4:	cmp	r0, #0
     af8:	beq	b30 <coda_cursor_goto_record_field_by_index+0x68>
     afc:	ldr	r3, [r0]
     b00:	cmp	r3, #99	; 0x63
     b04:	ldrhi	r0, [r0, #4]
     b08:	ldr	r0, [r0, #8]
     b0c:	cmp	r0, #0
     b10:	beq	b58 <coda_cursor_goto_record_field_by_index+0x90>
     b14:	bl	0 <coda_type_get_class_name>
     b18:	movw	r1, #0
     b1c:	mov	r2, r0
     b20:	mvn	r0, #104	; 0x68
     b24:	movt	r1, #0
     b28:	bl	0 <coda_set_error>
     b2c:	b	b4c <coda_cursor_goto_record_field_by_index+0x84>
     b30:	movw	r1, #0
     b34:	movw	r2, #0
     b38:	mvn	r0, #99	; 0x63
     b3c:	movw	r3, #569	; 0x239
     b40:	movt	r1, #0
     b44:	movt	r2, #0
     b48:	bl	0 <coda_set_error>
     b4c:	mvn	r0, #0
     b50:	sub	sp, fp, #8
     b54:	pop	{r4, sl, fp, pc}
     b58:	cmp	r2, #32
     b5c:	bne	b84 <coda_cursor_goto_record_field_by_index+0xbc>
     b60:	movw	r1, #0
     b64:	movw	r3, #0
     b68:	mov	r0, #584	; 0x248
     b6c:	mov	r2, #32
     b70:	movt	r1, #0
     b74:	movt	r3, #0
     b78:	str	r0, [sp]
     b7c:	mvn	r0, #99	; 0x63
     b80:	b	b48 <coda_cursor_goto_record_field_by_index+0x80>
     b84:	sub	r0, r3, #100	; 0x64
     b88:	cmp	r0, #5
     b8c:	bhi	bbc <coda_cursor_goto_record_field_by_index+0xf4>
     b90:	add	r2, pc, #0
     b94:	ldr	pc, [r2, r0, lsl #2]
     b98:	.word	0x00000bb0
     b9c:	.word	0x00000c64
     ba0:	.word	0x00000c5c
     ba4:	.word	0x00000c74
     ba8:	.word	0x00000c74
     bac:	.word	0x00000c74
     bb0:	mov	r0, r4
     bb4:	bl	0 <coda_mem_cursor_goto_record_field_by_index>
     bb8:	b	bcc <coda_cursor_goto_record_field_by_index+0x104>
     bbc:	cmp	r3, #2
     bc0:	bcs	bdc <coda_cursor_goto_record_field_by_index+0x114>
     bc4:	mov	r0, r4
     bc8:	bl	0 <coda_ascbin_cursor_goto_record_field_by_index>
     bcc:	mov	r1, r0
     bd0:	mvn	r0, #0
     bd4:	cmp	r1, #0
     bd8:	bne	b50 <coda_cursor_goto_record_field_by_index+0x88>
     bdc:	ldr	r0, [r4, #4]
     be0:	add	r0, r4, r0, lsl #4
     be4:	ldr	r0, [r0, #-8]
     be8:	ldr	r0, [r0]
     bec:	cmp	r0, #100	; 0x64
     bf0:	bne	bfc <coda_cursor_goto_record_field_by_index+0x134>
     bf4:	mov	r0, r4
     bf8:	bl	0 <coda_mem_cursor_update_offset>
     bfc:	ldr	r0, [pc, #144]	; c94 <coda_cursor_goto_record_field_by_index+0x1cc>
     c00:	ldr	r1, [pc, r0]
     c04:	bl	0 <__aeabi_read_tp>
     c08:	ldr	r0, [r0, r1]
     c0c:	cmp	r0, #0
     c10:	beq	c50 <coda_cursor_goto_record_field_by_index+0x188>
     c14:	ldr	r0, [r4, #4]
     c18:	add	r0, r4, r0, lsl #4
     c1c:	ldr	r0, [r0, #-8]
     c20:	ldr	r1, [r0]
     c24:	cmp	r1, #99	; 0x63
     c28:	ldrhi	r0, [r0, #4]
     c2c:	ldr	r0, [r0, #8]
     c30:	cmp	r0, #6
     c34:	bne	c50 <coda_cursor_goto_record_field_by_index+0x188>
     c38:	mov	r0, r4
     c3c:	bl	e7c <coda_cursor_use_base_type_of_special_type>
     c40:	mov	r1, r0
     c44:	mvn	r0, #0
     c48:	cmp	r1, #0
     c4c:	bne	b50 <coda_cursor_goto_record_field_by_index+0x88>
     c50:	mov	r0, #0
     c54:	sub	sp, fp, #8
     c58:	pop	{r4, sl, fp, pc}
     c5c:	mvn	r0, #12
     c60:	b	c68 <coda_cursor_goto_record_field_by_index+0x1a0>
     c64:	mvn	r0, #10
     c68:	mov	r1, #0
     c6c:	bl	0 <coda_set_error>
     c70:	b	b4c <coda_cursor_goto_record_field_by_index+0x84>
     c74:	movw	r0, #0
     c78:	movw	r1, #0
     c7c:	movw	r3, #0
     c80:	mov	r2, #628	; 0x274
     c84:	movt	r0, #0
     c88:	movt	r1, #0
     c8c:	movt	r3, #0
     c90:	bl	0 <__assert_fail>
     c94:	.word	0x0000008c

00000c98 <coda_cursor_goto_array_element_by_index>:
     c98:	push	{r4, sl, fp, lr}
     c9c:	add	fp, sp, #8
     ca0:	sub	sp, sp, #8
     ca4:	cmp	r0, #0
     ca8:	beq	d10 <coda_cursor_goto_array_element_by_index+0x78>
     cac:	ldr	r2, [r0, #4]
     cb0:	mov	r4, r0
     cb4:	cmp	r2, #1
     cb8:	blt	d10 <coda_cursor_goto_array_element_by_index+0x78>
     cbc:	add	r0, r4, r2, lsl #4
     cc0:	ldr	r0, [r0, #-8]
     cc4:	cmp	r0, #0
     cc8:	beq	d10 <coda_cursor_goto_array_element_by_index+0x78>
     ccc:	ldr	r3, [r0]
     cd0:	cmp	r3, #99	; 0x63
     cd4:	ldrhi	r0, [r0, #4]
     cd8:	ldr	r0, [r0, #8]
     cdc:	cmp	r0, #1
     ce0:	bne	d38 <coda_cursor_goto_array_element_by_index+0xa0>
     ce4:	cmp	r2, #32
     ce8:	bne	d54 <coda_cursor_goto_array_element_by_index+0xbc>
     cec:	movw	r1, #0
     cf0:	movw	r3, #0
     cf4:	movw	r0, #1023	; 0x3ff
     cf8:	mov	r2, #32
     cfc:	str	r0, [sp]
     d00:	movt	r1, #0
     d04:	movt	r3, #0
     d08:	mvn	r0, #99	; 0x63
     d0c:	b	d28 <coda_cursor_goto_array_element_by_index+0x90>
     d10:	movw	r1, #0
     d14:	movw	r2, #0
     d18:	mvn	r0, #99	; 0x63
     d1c:	mov	r3, #1008	; 0x3f0
     d20:	movt	r1, #0
     d24:	movt	r2, #0
     d28:	bl	0 <coda_set_error>
     d2c:	mvn	r0, #0
     d30:	sub	sp, fp, #8
     d34:	pop	{r4, sl, fp, pc}
     d38:	bl	0 <coda_type_get_class_name>
     d3c:	movw	r1, #0
     d40:	mov	r2, r0
     d44:	mvn	r0, #104	; 0x68
     d48:	movt	r1, #0
     d4c:	bl	0 <coda_set_error>
     d50:	b	d2c <coda_cursor_goto_array_element_by_index+0x94>
     d54:	sub	r0, r3, #100	; 0x64
     d58:	cmp	r0, #5
     d5c:	bhi	d8c <coda_cursor_goto_array_element_by_index+0xf4>
     d60:	add	r2, pc, #0
     d64:	ldr	pc, [r2, r0, lsl #2]
     d68:	.word	0x00000d80
     d6c:	.word	0x00000da0
     d70:	.word	0x00000da8
     d74:	.word	0x00000db8
     d78:	.word	0x00000dc4
     d7c:	.word	0x00000dd0
     d80:	mov	r0, r4
     d84:	bl	0 <coda_mem_cursor_goto_array_element_by_index>
     d88:	b	dd8 <coda_cursor_goto_array_element_by_index+0x140>
     d8c:	cmp	r3, #2
     d90:	bcs	de8 <coda_cursor_goto_array_element_by_index+0x150>
     d94:	mov	r0, r4
     d98:	bl	0 <coda_ascbin_cursor_goto_array_element_by_index>
     d9c:	b	dd8 <coda_cursor_goto_array_element_by_index+0x140>
     da0:	mvn	r0, #10
     da4:	b	dac <coda_cursor_goto_array_element_by_index+0x114>
     da8:	mvn	r0, #12
     dac:	mov	r1, #0
     db0:	bl	0 <coda_set_error>
     db4:	b	d2c <coda_cursor_goto_array_element_by_index+0x94>
     db8:	mov	r0, r4
     dbc:	bl	0 <coda_cdf_cursor_goto_array_element_by_index>
     dc0:	b	dd8 <coda_cursor_goto_array_element_by_index+0x140>
     dc4:	mov	r0, r4
     dc8:	bl	0 <coda_netcdf_cursor_goto_array_element_by_index>
     dcc:	b	dd8 <coda_cursor_goto_array_element_by_index+0x140>
     dd0:	mov	r0, r4
     dd4:	bl	0 <coda_grib_cursor_goto_array_element_by_index>
     dd8:	mov	r1, r0
     ddc:	mvn	r0, #0
     de0:	cmp	r1, #0
     de4:	bne	e68 <coda_cursor_goto_array_element_by_index+0x1d0>
     de8:	ldr	r0, [r4, #4]
     dec:	add	r0, r4, r0, lsl #4
     df0:	ldr	r0, [r0, #-8]
     df4:	ldr	r0, [r0]
     df8:	cmp	r0, #100	; 0x64
     dfc:	bne	e08 <coda_cursor_goto_array_element_by_index+0x170>
     e00:	mov	r0, r4
     e04:	bl	0 <coda_mem_cursor_update_offset>
     e08:	ldr	r0, [pc, #96]	; e70 <coda_cursor_goto_array_element_by_index+0x1d8>
     e0c:	ldr	r1, [pc, r0]
     e10:	bl	0 <__aeabi_read_tp>
     e14:	ldr	r0, [r0, r1]
     e18:	cmp	r0, #0
     e1c:	beq	e64 <coda_cursor_goto_array_element_by_index+0x1cc>
     e20:	ldr	r0, [r4, #4]
     e24:	add	r0, r4, r0, lsl #4
     e28:	ldr	r0, [r0, #-8]
     e2c:	ldr	r1, [r0]
     e30:	cmp	r1, #99	; 0x63
     e34:	ldrhi	r0, [r0, #4]
     e38:	ldr	r0, [r0, #8]
     e3c:	cmp	r0, #6
     e40:	bne	e64 <coda_cursor_goto_array_element_by_index+0x1cc>
     e44:	mov	r0, r4
     e48:	bl	e7c <coda_cursor_use_base_type_of_special_type>
     e4c:	mov	r1, r0
     e50:	mvn	r0, #0
     e54:	cmp	r1, #0
     e58:	moveq	r0, #0
     e5c:	sub	sp, fp, #8
     e60:	pop	{r4, sl, fp, pc}
     e64:	mov	r0, #0
     e68:	sub	sp, fp, #8
     e6c:	pop	{r4, sl, fp, pc}
     e70:	.word	0x0000005c

00000e74 <coda_cursor_goto_first_record_field>:
     e74:	mov	r1, #0
     e78:	b	ac8 <coda_cursor_goto_record_field_by_index>

00000e7c <coda_cursor_use_base_type_of_special_type>:
     e7c:	push	{r4, sl, fp, lr}
     e80:	add	fp, sp, #8
     e84:	cmp	r0, #0
     e88:	beq	ee4 <coda_cursor_use_base_type_of_special_type+0x68>
     e8c:	mov	r4, r0
     e90:	ldr	r0, [r0, #4]
     e94:	cmp	r0, #1
     e98:	blt	ee4 <coda_cursor_use_base_type_of_special_type+0x68>
     e9c:	add	r0, r4, r0, lsl #4
     ea0:	ldr	r0, [r0, #-8]
     ea4:	cmp	r0, #0
     ea8:	beq	ee4 <coda_cursor_use_base_type_of_special_type+0x68>
     eac:	ldr	r1, [r0]
     eb0:	cmp	r1, #99	; 0x63
     eb4:	ldrhi	r0, [r0, #4]
     eb8:	ldr	r0, [r0, #8]
     ebc:	cmp	r0, #6
     ec0:	bne	f08 <coda_cursor_use_base_type_of_special_type+0x8c>
     ec4:	sub	r0, r1, #100	; 0x64
     ec8:	cmp	r0, #5
     ecc:	bls	f24 <coda_cursor_use_base_type_of_special_type+0xa8>
     ed0:	cmp	r1, #2
     ed4:	bcs	f58 <coda_cursor_use_base_type_of_special_type+0xdc>
     ed8:	mov	r0, r4
     edc:	bl	0 <coda_ascbin_cursor_use_base_type_of_special_type>
     ee0:	b	f48 <coda_cursor_use_base_type_of_special_type+0xcc>
     ee4:	movw	r1, #0
     ee8:	movw	r2, #0
     eec:	mvn	r0, #99	; 0x63
     ef0:	movw	r3, #1403	; 0x57b
     ef4:	movt	r1, #0
     ef8:	movt	r2, #0
     efc:	bl	0 <coda_set_error>
     f00:	mvn	r0, #0
     f04:	pop	{r4, sl, fp, pc}
     f08:	bl	0 <coda_type_get_class_name>
     f0c:	movw	r1, #0
     f10:	mov	r2, r0
     f14:	mvn	r0, #104	; 0x68
     f18:	movt	r1, #0
     f1c:	bl	0 <coda_set_error>
     f20:	b	f00 <coda_cursor_use_base_type_of_special_type+0x84>
     f24:	cmp	r0, #0
     f28:	beq	f40 <coda_cursor_use_base_type_of_special_type+0xc4>
     f2c:	cmp	r0, #3
     f30:	bne	fd4 <coda_cursor_use_base_type_of_special_type+0x158>
     f34:	mov	r0, r4
     f38:	bl	0 <coda_cdf_cursor_use_base_type_of_special_type>
     f3c:	b	f48 <coda_cursor_use_base_type_of_special_type+0xcc>
     f40:	mov	r0, r4
     f44:	bl	0 <coda_mem_cursor_use_base_type_of_special_type>
     f48:	mov	r1, r0
     f4c:	mvn	r0, #0
     f50:	cmp	r1, #0
     f54:	bne	f04 <coda_cursor_use_base_type_of_special_type+0x88>
     f58:	ldr	r0, [r4, #4]
     f5c:	add	r0, r4, r0, lsl #4
     f60:	ldr	r0, [r0, #-8]
     f64:	ldr	r0, [r0]
     f68:	cmp	r0, #100	; 0x64
     f6c:	bne	f78 <coda_cursor_use_base_type_of_special_type+0xfc>
     f70:	mov	r0, r4
     f74:	bl	0 <coda_mem_cursor_update_offset>
     f78:	ldr	r0, [pc, #116]	; ff4 <coda_cursor_use_base_type_of_special_type+0x178>
     f7c:	ldr	r1, [pc, r0]
     f80:	bl	0 <__aeabi_read_tp>
     f84:	ldr	r0, [r0, r1]
     f88:	cmp	r0, #0
     f8c:	beq	fcc <coda_cursor_use_base_type_of_special_type+0x150>
     f90:	ldr	r0, [r4, #4]
     f94:	add	r0, r4, r0, lsl #4
     f98:	ldr	r0, [r0, #-8]
     f9c:	ldr	r1, [r0]
     fa0:	cmp	r1, #99	; 0x63
     fa4:	ldrhi	r0, [r0, #4]
     fa8:	ldr	r0, [r0, #8]
     fac:	cmp	r0, #6
     fb0:	bne	fcc <coda_cursor_use_base_type_of_special_type+0x150>
     fb4:	mov	r0, r4
     fb8:	bl	e7c <coda_cursor_use_base_type_of_special_type>
     fbc:	mov	r1, r0
     fc0:	mvn	r0, #0
     fc4:	cmp	r1, #0
     fc8:	popne	{r4, sl, fp, pc}
     fcc:	mov	r0, #0
     fd0:	pop	{r4, sl, fp, pc}
     fd4:	movw	r0, #0
     fd8:	movw	r1, #0
     fdc:	movw	r3, #0
     fe0:	mov	r2, #1440	; 0x5a0
     fe4:	movt	r0, #0
     fe8:	movt	r1, #0
     fec:	movt	r3, #0
     ff0:	bl	0 <__assert_fail>
     ff4:	.word	0x00000070

00000ff8 <coda_cursor_goto_record_field_by_name>:
     ff8:	push	{r4, sl, fp, lr}
     ffc:	add	fp, sp, #8
    1000:	sub	sp, sp, #8
    1004:	cmp	r0, #0
    1008:	beq	1064 <coda_cursor_goto_record_field_by_name+0x6c>
    100c:	mov	r4, r0
    1010:	ldr	r0, [r0, #4]
    1014:	cmp	r0, #1
    1018:	blt	1064 <coda_cursor_goto_record_field_by_name+0x6c>
    101c:	ldr	r2, [r4]
    1020:	cmp	r2, #0
    1024:	beq	1064 <coda_cursor_goto_record_field_by_name+0x6c>
    1028:	add	r0, r4, r0, lsl #4
    102c:	ldr	r0, [r0, #-8]
    1030:	cmp	r0, #0
    1034:	beq	1064 <coda_cursor_goto_record_field_by_name+0x6c>
    1038:	ldr	r2, [r0]
    103c:	cmp	r2, #99	; 0x63
    1040:	add	r2, sp, #4
    1044:	ldrhi	r0, [r0, #4]
    1048:	bl	0 <coda_type_get_record_field_index_from_name>
    104c:	mov	r1, r0
    1050:	mvn	r0, #0
    1054:	cmp	r1, #0
    1058:	beq	108c <coda_cursor_goto_record_field_by_name+0x94>
    105c:	sub	sp, fp, #8
    1060:	pop	{r4, sl, fp, pc}
    1064:	movw	r1, #0
    1068:	movw	r2, #0
    106c:	mvn	r0, #99	; 0x63
    1070:	movw	r3, #2057	; 0x809
    1074:	movt	r1, #0
    1078:	movt	r2, #0
    107c:	bl	0 <coda_set_error>
    1080:	mvn	r0, #0
    1084:	sub	sp, fp, #8
    1088:	pop	{r4, sl, fp, pc}
    108c:	ldr	r1, [sp, #4]
    1090:	mov	r0, r4
    1094:	bl	ac8 <coda_cursor_goto_record_field_by_index>
    1098:	sub	sp, fp, #8
    109c:	pop	{r4, sl, fp, pc}

000010a0 <coda_cursor_get_record_field_index_from_name>:
    10a0:	push	{fp, lr}
    10a4:	mov	fp, sp
    10a8:	cmp	r0, #0
    10ac:	beq	10ec <coda_cursor_get_record_field_index_from_name+0x4c>
    10b0:	ldr	ip, [r0, #4]
    10b4:	cmp	ip, #1
    10b8:	blt	10ec <coda_cursor_get_record_field_index_from_name+0x4c>
    10bc:	ldr	r3, [r0]
    10c0:	cmp	r3, #0
    10c4:	beq	10ec <coda_cursor_get_record_field_index_from_name+0x4c>
    10c8:	add	r0, r0, ip, lsl #4
    10cc:	ldr	r0, [r0, #-8]
    10d0:	cmp	r0, #0
    10d4:	beq	10ec <coda_cursor_get_record_field_index_from_name+0x4c>
    10d8:	ldr	r3, [r0]
    10dc:	cmp	r3, #99	; 0x63
    10e0:	ldrhi	r0, [r0, #4]
    10e4:	pop	{fp, lr}
    10e8:	b	0 <coda_type_get_record_field_index_from_name>
    10ec:	movw	r1, #0
    10f0:	movw	r2, #0
    10f4:	mvn	r0, #99	; 0x63
    10f8:	movw	r3, #2057	; 0x809
    10fc:	movt	r1, #0
    1100:	movt	r2, #0
    1104:	bl	0 <coda_set_error>
    1108:	mvn	r0, #0
    110c:	pop	{fp, pc}

00001110 <coda_cursor_goto_next_record_field>:
    1110:	push	{r4, sl, fp, lr}
    1114:	add	fp, sp, #8
    1118:	cmp	r0, #0
    111c:	beq	1174 <coda_cursor_goto_next_record_field+0x64>
    1120:	mov	r4, r0
    1124:	ldr	r0, [r0, #4]
    1128:	cmp	r0, #2
    112c:	blt	1174 <coda_cursor_goto_next_record_field+0x64>
    1130:	add	r2, r4, r0, lsl #4
    1134:	ldr	r0, [r2, #-24]	; 0xffffffe8
    1138:	cmp	r0, #0
    113c:	beq	1174 <coda_cursor_goto_next_record_field+0x64>
    1140:	ldr	r1, [r0]
    1144:	cmp	r1, #99	; 0x63
    1148:	ldrhi	r0, [r0, #4]
    114c:	ldr	r0, [r0, #8]
    1150:	cmp	r0, #0
    1154:	beq	1198 <coda_cursor_goto_next_record_field+0x88>
    1158:	bl	0 <coda_type_get_class_name>
    115c:	movw	r1, #0
    1160:	mov	r2, r0
    1164:	mvn	r0, #104	; 0x68
    1168:	movt	r1, #0
    116c:	bl	0 <coda_set_error>
    1170:	b	1190 <coda_cursor_goto_next_record_field+0x80>
    1174:	movw	r1, #0
    1178:	movw	r2, #0
    117c:	mvn	r0, #99	; 0x63
    1180:	movw	r3, #706	; 0x2c2
    1184:	movt	r1, #0
    1188:	movt	r2, #0
    118c:	bl	0 <coda_set_error>
    1190:	mvn	r0, #0
    1194:	pop	{r4, sl, fp, pc}
    1198:	ldr	r0, [r2, #-4]
    119c:	cmn	r0, #1
    11a0:	beq	11dc <coda_cursor_goto_next_record_field+0xcc>
    11a4:	sub	r0, r1, #100	; 0x64
    11a8:	cmp	r0, #5
    11ac:	bhi	11f0 <coda_cursor_goto_next_record_field+0xe0>
    11b0:	add	r1, pc, #0
    11b4:	ldr	pc, [r1, r0, lsl #2]
    11b8:	.word	0x000011d0
    11bc:	.word	0x00001294
    11c0:	.word	0x0000128c
    11c4:	.word	0x000012a4
    11c8:	.word	0x000012a4
    11cc:	.word	0x000012a4
    11d0:	mov	r0, r4
    11d4:	bl	0 <coda_mem_cursor_goto_next_record_field>
    11d8:	b	1200 <coda_cursor_goto_next_record_field+0xf0>
    11dc:	movw	r1, #0
    11e0:	mvn	r0, #104	; 0x68
    11e4:	movt	r1, #0
    11e8:	bl	0 <coda_set_error>
    11ec:	b	1190 <coda_cursor_goto_next_record_field+0x80>
    11f0:	cmp	r1, #2
    11f4:	bcs	1210 <coda_cursor_goto_next_record_field+0x100>
    11f8:	mov	r0, r4
    11fc:	bl	0 <coda_ascbin_cursor_goto_next_record_field>
    1200:	mov	r1, r0
    1204:	mvn	r0, #0
    1208:	cmp	r1, #0
    120c:	bne	1194 <coda_cursor_goto_next_record_field+0x84>
    1210:	ldr	r0, [r4, #4]
    1214:	add	r0, r4, r0, lsl #4
    1218:	ldr	r0, [r0, #-8]
    121c:	ldr	r0, [r0]
    1220:	cmp	r0, #100	; 0x64
    1224:	bne	1230 <coda_cursor_goto_next_record_field+0x120>
    1228:	mov	r0, r4
    122c:	bl	0 <coda_mem_cursor_update_offset>
    1230:	ldr	r0, [pc, #140]	; 12c4 <coda_cursor_goto_next_record_field+0x1b4>
    1234:	ldr	r1, [pc, r0]
    1238:	bl	0 <__aeabi_read_tp>
    123c:	ldr	r0, [r0, r1]
    1240:	cmp	r0, #0
    1244:	beq	1284 <coda_cursor_goto_next_record_field+0x174>
    1248:	ldr	r0, [r4, #4]
    124c:	add	r0, r4, r0, lsl #4
    1250:	ldr	r0, [r0, #-8]
    1254:	ldr	r1, [r0]
    1258:	cmp	r1, #99	; 0x63
    125c:	ldrhi	r0, [r0, #4]
    1260:	ldr	r0, [r0, #8]
    1264:	cmp	r0, #6
    1268:	bne	1284 <coda_cursor_goto_next_record_field+0x174>
    126c:	mov	r0, r4
    1270:	bl	e7c <coda_cursor_use_base_type_of_special_type>
    1274:	mov	r1, r0
    1278:	mvn	r0, #0
    127c:	cmp	r1, #0
    1280:	popne	{r4, sl, fp, pc}
    1284:	mov	r0, #0
    1288:	pop	{r4, sl, fp, pc}
    128c:	mvn	r0, #12
    1290:	b	1298 <coda_cursor_goto_next_record_field+0x188>
    1294:	mvn	r0, #10
    1298:	mov	r1, #0
    129c:	bl	0 <coda_set_error>
    12a0:	b	1190 <coda_cursor_goto_next_record_field+0x80>
    12a4:	movw	r0, #0
    12a8:	movw	r1, #0
    12ac:	movw	r3, #0
    12b0:	movw	r2, #766	; 0x2fe
    12b4:	movt	r0, #0
    12b8:	movt	r1, #0
    12bc:	movt	r3, #0
    12c0:	bl	0 <__assert_fail>
    12c4:	.word	0x00000088

000012c8 <coda_cursor_goto_available_union_field>:
    12c8:	push	{r4, sl, fp, lr}
    12cc:	add	fp, sp, #8
    12d0:	cmp	r0, #0
    12d4:	beq	1330 <coda_cursor_goto_available_union_field+0x68>
    12d8:	mov	r4, r0
    12dc:	ldr	r0, [r0, #4]
    12e0:	cmp	r0, #1
    12e4:	blt	1330 <coda_cursor_goto_available_union_field+0x68>
    12e8:	add	r0, r4, r0, lsl #4
    12ec:	ldr	r0, [r0, #-8]
    12f0:	cmp	r0, #0
    12f4:	beq	1330 <coda_cursor_goto_available_union_field+0x68>
    12f8:	ldr	r1, [r0]
    12fc:	cmp	r1, #99	; 0x63
    1300:	ldrhi	r0, [r0, #4]
    1304:	ldr	r0, [r0, #8]
    1308:	cmp	r0, #0
    130c:	beq	1354 <coda_cursor_goto_available_union_field+0x8c>
    1310:	bl	0 <coda_type_get_class_name>
    1314:	movw	r1, #0
    1318:	mov	r2, r0
    131c:	mvn	r0, #104	; 0x68
    1320:	movt	r1, #0
    1324:	bl	0 <coda_set_error>
    1328:	mvn	r0, #0
    132c:	pop	{r4, sl, fp, pc}
    1330:	movw	r1, #0
    1334:	movw	r2, #0
    1338:	mvn	r0, #99	; 0x63
    133c:	movw	r3, #803	; 0x323
    1340:	movt	r1, #0
    1344:	movt	r2, #0
    1348:	bl	0 <coda_set_error>
    134c:	mvn	r0, #0
    1350:	pop	{r4, sl, fp, pc}
    1354:	cmp	r1, #2
    1358:	bcc	1390 <coda_cursor_goto_available_union_field+0xc8>
    135c:	cmp	r1, #100	; 0x64
    1360:	beq	139c <coda_cursor_goto_available_union_field+0xd4>
    1364:	sub	r0, r1, #101	; 0x65
    1368:	cmp	r0, #5
    136c:	bcs	13b4 <coda_cursor_goto_available_union_field+0xec>
    1370:	movw	r0, #0
    1374:	movw	r1, #0
    1378:	movw	r3, #0
    137c:	movw	r2, #835	; 0x343
    1380:	movt	r0, #0
    1384:	movt	r1, #0
    1388:	movt	r3, #0
    138c:	bl	0 <__assert_fail>
    1390:	mov	r0, r4
    1394:	bl	0 <coda_ascbin_cursor_goto_available_union_field>
    1398:	b	13a4 <coda_cursor_goto_available_union_field+0xdc>
    139c:	mov	r0, r4
    13a0:	bl	0 <coda_mem_cursor_goto_available_union_field>
    13a4:	mov	r1, r0
    13a8:	mvn	r0, #0
    13ac:	cmp	r1, #0
    13b0:	popne	{r4, sl, fp, pc}
    13b4:	ldr	r0, [r4, #4]
    13b8:	add	r0, r4, r0, lsl #4
    13bc:	ldr	r0, [r0, #-8]
    13c0:	ldr	r0, [r0]
    13c4:	cmp	r0, #100	; 0x64
    13c8:	bne	13d4 <coda_cursor_goto_available_union_field+0x10c>
    13cc:	mov	r0, r4
    13d0:	bl	0 <coda_mem_cursor_update_offset>
    13d4:	ldr	r0, [pc, #88]	; 1434 <coda_cursor_goto_available_union_field+0x16c>
    13d8:	ldr	r1, [pc, r0]
    13dc:	bl	0 <__aeabi_read_tp>
    13e0:	ldr	r0, [r0, r1]
    13e4:	cmp	r0, #0
    13e8:	beq	142c <coda_cursor_goto_available_union_field+0x164>
    13ec:	ldr	r0, [r4, #4]
    13f0:	add	r0, r4, r0, lsl #4
    13f4:	ldr	r0, [r0, #-8]
    13f8:	ldr	r1, [r0]
    13fc:	cmp	r1, #99	; 0x63
    1400:	ldrhi	r0, [r0, #4]
    1404:	ldr	r0, [r0, #8]
    1408:	cmp	r0, #6
    140c:	bne	142c <coda_cursor_goto_available_union_field+0x164>
    1410:	mov	r0, r4
    1414:	bl	e7c <coda_cursor_use_base_type_of_special_type>
    1418:	mov	r1, r0
    141c:	mvn	r0, #0
    1420:	cmp	r1, #0
    1424:	moveq	r0, #0
    1428:	pop	{r4, sl, fp, pc}
    142c:	mov	r0, #0
    1430:	pop	{r4, sl, fp, pc}
    1434:	.word	0x00000054

00001438 <coda_cursor_goto_first_array_element>:
    1438:	mov	r1, #0
    143c:	b	c98 <coda_cursor_goto_array_element_by_index>

00001440 <coda_cursor_goto_array_element>:
    1440:	push	{r4, sl, fp, lr}
    1444:	add	fp, sp, #8
    1448:	sub	sp, sp, #8
    144c:	cmp	r0, #0
    1450:	beq	14b8 <coda_cursor_goto_array_element+0x78>
    1454:	ldr	r3, [r0, #4]
    1458:	mov	r4, r0
    145c:	cmp	r3, #1
    1460:	blt	14b8 <coda_cursor_goto_array_element+0x78>
    1464:	add	r0, r4, r3, lsl #4
    1468:	ldr	r0, [r0, #-8]
    146c:	cmp	r0, #0
    1470:	beq	14b8 <coda_cursor_goto_array_element+0x78>
    1474:	ldr	ip, [r0]
    1478:	cmp	ip, #99	; 0x63
    147c:	ldrhi	r0, [r0, #4]
    1480:	ldr	r0, [r0, #8]
    1484:	cmp	r0, #1
    1488:	bne	14e0 <coda_cursor_goto_array_element+0xa0>
    148c:	cmp	r3, #32
    1490:	bne	14fc <coda_cursor_goto_array_element+0xbc>
    1494:	movw	r1, #0
    1498:	movw	r3, #0
    149c:	movw	r0, #905	; 0x389
    14a0:	mov	r2, #32
    14a4:	str	r0, [sp]
    14a8:	movt	r1, #0
    14ac:	movt	r3, #0
    14b0:	mvn	r0, #99	; 0x63
    14b4:	b	14d0 <coda_cursor_goto_array_element+0x90>
    14b8:	movw	r1, #0
    14bc:	movw	r2, #0
    14c0:	mvn	r0, #99	; 0x63
    14c4:	movw	r3, #890	; 0x37a
    14c8:	movt	r1, #0
    14cc:	movt	r2, #0
    14d0:	bl	0 <coda_set_error>
    14d4:	mvn	r0, #0
    14d8:	sub	sp, fp, #8
    14dc:	pop	{r4, sl, fp, pc}
    14e0:	bl	0 <coda_type_get_class_name>
    14e4:	movw	r1, #0
    14e8:	mov	r2, r0
    14ec:	mvn	r0, #104	; 0x68
    14f0:	movt	r1, #0
    14f4:	bl	0 <coda_set_error>
    14f8:	b	14d4 <coda_cursor_goto_array_element+0x94>
    14fc:	sub	r0, ip, #100	; 0x64
    1500:	cmp	r0, #5
    1504:	bhi	1534 <coda_cursor_goto_array_element+0xf4>
    1508:	add	r3, pc, #0
    150c:	ldr	pc, [r3, r0, lsl #2]
    1510:	.word	0x00001528
    1514:	.word	0x00001548
    1518:	.word	0x00001550
    151c:	.word	0x00001560
    1520:	.word	0x0000156c
    1524:	.word	0x00001578
    1528:	mov	r0, r4
    152c:	bl	0 <coda_mem_cursor_goto_array_element>
    1530:	b	1580 <coda_cursor_goto_array_element+0x140>
    1534:	cmp	ip, #2
    1538:	bcs	1590 <coda_cursor_goto_array_element+0x150>
    153c:	mov	r0, r4
    1540:	bl	0 <coda_ascbin_cursor_goto_array_element>
    1544:	b	1580 <coda_cursor_goto_array_element+0x140>
    1548:	mvn	r0, #10
    154c:	b	1554 <coda_cursor_goto_array_element+0x114>
    1550:	mvn	r0, #12
    1554:	mov	r1, #0
    1558:	bl	0 <coda_set_error>
    155c:	b	14d4 <coda_cursor_goto_array_element+0x94>
    1560:	mov	r0, r4
    1564:	bl	0 <coda_cdf_cursor_goto_array_element>
    1568:	b	1580 <coda_cursor_goto_array_element+0x140>
    156c:	mov	r0, r4
    1570:	bl	0 <coda_netcdf_cursor_goto_array_element>
    1574:	b	1580 <coda_cursor_goto_array_element+0x140>
    1578:	mov	r0, r4
    157c:	bl	0 <coda_grib_cursor_goto_array_element>
    1580:	mov	r1, r0
    1584:	mvn	r0, #0
    1588:	cmp	r1, #0
    158c:	bne	1610 <coda_cursor_goto_array_element+0x1d0>
    1590:	ldr	r0, [r4, #4]
    1594:	add	r0, r4, r0, lsl #4
    1598:	ldr	r0, [r0, #-8]
    159c:	ldr	r0, [r0]
    15a0:	cmp	r0, #100	; 0x64
    15a4:	bne	15b0 <coda_cursor_goto_array_element+0x170>
    15a8:	mov	r0, r4
    15ac:	bl	0 <coda_mem_cursor_update_offset>
    15b0:	ldr	r0, [pc, #96]	; 1618 <coda_cursor_goto_array_element+0x1d8>
    15b4:	ldr	r1, [pc, r0]
    15b8:	bl	0 <__aeabi_read_tp>
    15bc:	ldr	r0, [r0, r1]
    15c0:	cmp	r0, #0
    15c4:	beq	160c <coda_cursor_goto_array_element+0x1cc>
    15c8:	ldr	r0, [r4, #4]
    15cc:	add	r0, r4, r0, lsl #4
    15d0:	ldr	r0, [r0, #-8]
    15d4:	ldr	r1, [r0]
    15d8:	cmp	r1, #99	; 0x63
    15dc:	ldrhi	r0, [r0, #4]
    15e0:	ldr	r0, [r0, #8]
    15e4:	cmp	r0, #6
    15e8:	bne	160c <coda_cursor_goto_array_element+0x1cc>
    15ec:	mov	r0, r4
    15f0:	bl	e7c <coda_cursor_use_base_type_of_special_type>
    15f4:	mov	r1, r0
    15f8:	mvn	r0, #0
    15fc:	cmp	r1, #0
    1600:	moveq	r0, #0
    1604:	sub	sp, fp, #8
    1608:	pop	{r4, sl, fp, pc}
    160c:	mov	r0, #0
    1610:	sub	sp, fp, #8
    1614:	pop	{r4, sl, fp, pc}
    1618:	.word	0x0000005c

0000161c <coda_cursor_goto_next_array_element>:
    161c:	push	{r4, sl, fp, lr}
    1620:	add	fp, sp, #8
    1624:	cmp	r0, #0
    1628:	beq	16b4 <coda_cursor_goto_next_array_element+0x98>
    162c:	mov	r4, r0
    1630:	ldr	r0, [r0, #4]
    1634:	cmp	r0, #2
    1638:	blt	16b4 <coda_cursor_goto_next_array_element+0x98>
    163c:	sub	r1, r0, #1
    1640:	add	r2, r4, r1, lsl #4
    1644:	ldr	r1, [r2, #8]
    1648:	cmp	r1, #0
    164c:	beq	16b4 <coda_cursor_goto_next_array_element+0x98>
    1650:	add	r0, r4, r0, lsl #4
    1654:	ldr	r0, [r0, #-24]	; 0xffffffe8
    1658:	ldr	r1, [r0]
    165c:	cmp	r1, #99	; 0x63
    1660:	ldrhi	r0, [r0, #4]
    1664:	ldr	r0, [r0, #8]
    1668:	cmp	r0, #1
    166c:	bne	16d8 <coda_cursor_goto_next_array_element+0xbc>
    1670:	ldr	r0, [r2, #12]
    1674:	cmn	r0, #1
    1678:	beq	16f8 <coda_cursor_goto_next_array_element+0xdc>
    167c:	sub	r0, r1, #100	; 0x64
    1680:	cmp	r0, #5
    1684:	bhi	1708 <coda_cursor_goto_next_array_element+0xec>
    1688:	add	r1, pc, #0
    168c:	ldr	pc, [r1, r0, lsl #2]
    1690:	.word	0x000016a8
    1694:	.word	0x0000171c
    1698:	.word	0x00001724
    169c:	.word	0x00001738
    16a0:	.word	0x00001744
    16a4:	.word	0x00001750
    16a8:	mov	r0, r4
    16ac:	bl	0 <coda_mem_cursor_goto_next_array_element>
    16b0:	b	1758 <coda_cursor_goto_next_array_element+0x13c>
    16b4:	movw	r1, #0
    16b8:	movw	r2, #0
    16bc:	mvn	r0, #99	; 0x63
    16c0:	movw	r3, #1134	; 0x46e
    16c4:	movt	r1, #0
    16c8:	movt	r2, #0
    16cc:	bl	0 <coda_set_error>
    16d0:	mvn	r0, #0
    16d4:	pop	{r4, sl, fp, pc}
    16d8:	bl	0 <coda_type_get_class_name>
    16dc:	movw	r1, #0
    16e0:	mov	r2, r0
    16e4:	mvn	r0, #104	; 0x68
    16e8:	movt	r1, #0
    16ec:	bl	0 <coda_set_error>
    16f0:	mvn	r0, #0
    16f4:	pop	{r4, sl, fp, pc}
    16f8:	movw	r1, #0
    16fc:	mvn	r0, #104	; 0x68
    1700:	movt	r1, #0
    1704:	b	172c <coda_cursor_goto_next_array_element+0x110>
    1708:	cmp	r1, #2
    170c:	bcs	1768 <coda_cursor_goto_next_array_element+0x14c>
    1710:	mov	r0, r4
    1714:	bl	0 <coda_ascbin_cursor_goto_next_array_element>
    1718:	b	1758 <coda_cursor_goto_next_array_element+0x13c>
    171c:	mvn	r0, #10
    1720:	b	1728 <coda_cursor_goto_next_array_element+0x10c>
    1724:	mvn	r0, #12
    1728:	mov	r1, #0
    172c:	bl	0 <coda_set_error>
    1730:	mvn	r0, #0
    1734:	pop	{r4, sl, fp, pc}
    1738:	mov	r0, r4
    173c:	bl	0 <coda_cdf_cursor_goto_next_array_element>
    1740:	b	1758 <coda_cursor_goto_next_array_element+0x13c>
    1744:	mov	r0, r4
    1748:	bl	0 <coda_netcdf_cursor_goto_next_array_element>
    174c:	b	1758 <coda_cursor_goto_next_array_element+0x13c>
    1750:	mov	r0, r4
    1754:	bl	0 <coda_grib_cursor_goto_next_array_element>
    1758:	mov	r1, r0
    175c:	mvn	r0, #0
    1760:	cmp	r1, #0
    1764:	popne	{r4, sl, fp, pc}
    1768:	ldr	r0, [r4, #4]
    176c:	add	r0, r4, r0, lsl #4
    1770:	ldr	r0, [r0, #-8]
    1774:	ldr	r0, [r0]
    1778:	cmp	r0, #100	; 0x64
    177c:	bne	1788 <coda_cursor_goto_next_array_element+0x16c>
    1780:	mov	r0, r4
    1784:	bl	0 <coda_mem_cursor_update_offset>
    1788:	ldr	r0, [pc, #88]	; 17e8 <coda_cursor_goto_next_array_element+0x1cc>
    178c:	ldr	r1, [pc, r0]
    1790:	bl	0 <__aeabi_read_tp>
    1794:	ldr	r0, [r0, r1]
    1798:	cmp	r0, #0
    179c:	beq	17e0 <coda_cursor_goto_next_array_element+0x1c4>
    17a0:	ldr	r0, [r4, #4]
    17a4:	add	r0, r4, r0, lsl #4
    17a8:	ldr	r0, [r0, #-8]
    17ac:	ldr	r1, [r0]
    17b0:	cmp	r1, #99	; 0x63
    17b4:	ldrhi	r0, [r0, #4]
    17b8:	ldr	r0, [r0, #8]
    17bc:	cmp	r0, #6
    17c0:	bne	17e0 <coda_cursor_goto_next_array_element+0x1c4>
    17c4:	mov	r0, r4
    17c8:	bl	e7c <coda_cursor_use_base_type_of_special_type>
    17cc:	mov	r1, r0
    17d0:	mvn	r0, #0
    17d4:	cmp	r1, #0
    17d8:	moveq	r0, #0
    17dc:	pop	{r4, sl, fp, pc}
    17e0:	mov	r0, #0
    17e4:	pop	{r4, sl, fp, pc}
    17e8:	.word	0x00000054

000017ec <coda_cursor_has_ascii_content>:
    17ec:	push	{r4, r5, r6, r7, fp, lr}
    17f0:	add	fp, sp, #16
    17f4:	sub	sp, sp, #520	; 0x208
    17f8:	cmp	r0, #0
    17fc:	beq	1888 <coda_cursor_has_ascii_content+0x9c>
    1800:	mov	r4, r1
    1804:	mov	r1, r0
    1808:	ldr	r0, [r0, #4]
    180c:	cmp	r0, #1
    1810:	blt	1888 <coda_cursor_has_ascii_content+0x9c>
    1814:	add	r0, r1, r0, lsl #4
    1818:	ldr	r0, [r0, #-8]
    181c:	cmp	r0, #0
    1820:	beq	1888 <coda_cursor_has_ascii_content+0x9c>
    1824:	cmp	r4, #0
    1828:	beq	18b0 <coda_cursor_has_ascii_content+0xc4>
    182c:	ldr	r2, [r0]
    1830:	cmp	r2, #0
    1834:	beq	18c8 <coda_cursor_has_ascii_content+0xdc>
    1838:	cmp	r2, #99	; 0x63
    183c:	ldrhi	r0, [r0, #4]
    1840:	ldr	r2, [r0, #8]
    1844:	cmp	r2, #6
    1848:	bne	18d0 <coda_cursor_has_ascii_content+0xe4>
    184c:	mov	r5, sp
    1850:	mov	r2, #520	; 0x208
    1854:	mov	r0, r5
    1858:	bl	0 <memcpy>
    185c:	mov	r0, r5
    1860:	bl	e7c <coda_cursor_use_base_type_of_special_type>
    1864:	mov	r1, r0
    1868:	mvn	r0, #0
    186c:	cmp	r1, #0
    1870:	bne	1880 <coda_cursor_has_ascii_content+0x94>
    1874:	mov	r0, sp
    1878:	mov	r1, r4
    187c:	bl	17ec <coda_cursor_has_ascii_content>
    1880:	sub	sp, fp, #16
    1884:	pop	{r4, r5, r6, r7, fp, pc}
    1888:	movw	r1, #0
    188c:	movw	r2, #0
    1890:	mvn	r0, #99	; 0x63
    1894:	movw	r3, #1477	; 0x5c5
    1898:	movt	r1, #0
    189c:	movt	r2, #0
    18a0:	bl	0 <coda_set_error>
    18a4:	mvn	r0, #0
    18a8:	sub	sp, fp, #16
    18ac:	pop	{r4, r5, r6, r7, fp, pc}
    18b0:	movw	r1, #0
    18b4:	movw	r2, #0
    18b8:	mvn	r0, #99	; 0x63
    18bc:	movw	r3, #1482	; 0x5ca
    18c0:	movt	r1, #0
    18c4:	b	189c <coda_cursor_has_ascii_content+0xb0>
    18c8:	mov	r0, #1
    18cc:	b	18ec <coda_cursor_has_ascii_content+0x100>
    18d0:	ldr	r0, [r0]
    18d4:	sub	r1, r2, #4
    18d8:	clz	r1, r1
    18dc:	lsr	r1, r1, #5
    18e0:	clz	r0, r0
    18e4:	lsr	r0, r0, #5
    18e8:	orr	r0, r1, r0
    18ec:	str	r0, [r4]
    18f0:	mov	r0, #0
    18f4:	sub	sp, fp, #16
    18f8:	pop	{r4, r5, r6, r7, fp, pc}

000018fc <coda_cursor_has_attributes>:
    18fc:	push	{fp, lr}
    1900:	mov	fp, sp
    1904:	cmp	r0, #0
    1908:	beq	1954 <coda_cursor_has_attributes+0x58>
    190c:	ldr	r2, [r0, #4]
    1910:	cmp	r2, #1
    1914:	blt	1954 <coda_cursor_has_attributes+0x58>
    1918:	add	r0, r0, r2, lsl #4
    191c:	ldr	r0, [r0, #-8]
    1920:	cmp	r0, #0
    1924:	beq	1954 <coda_cursor_has_attributes+0x58>
    1928:	cmp	r1, #0
    192c:	beq	1978 <coda_cursor_has_attributes+0x7c>
    1930:	ldr	r2, [r0]
    1934:	cmp	r2, #99	; 0x63
    1938:	ldrhi	r0, [r0, #4]
    193c:	ldr	r0, [r0, #36]	; 0x24
    1940:	cmp	r0, #0
    1944:	movwne	r0, #1
    1948:	str	r0, [r1]
    194c:	mov	r0, #0
    1950:	pop	{fp, pc}
    1954:	movw	r1, #0
    1958:	movw	r2, #0
    195c:	mvn	r0, #99	; 0x63
    1960:	movw	r3, #1528	; 0x5f8
    1964:	movt	r1, #0
    1968:	movt	r2, #0
    196c:	bl	0 <coda_set_error>
    1970:	mvn	r0, #0
    1974:	pop	{fp, pc}
    1978:	movw	r1, #0
    197c:	movw	r2, #0
    1980:	mvn	r0, #99	; 0x63
    1984:	movw	r3, #1533	; 0x5fd
    1988:	movt	r1, #0
    198c:	b	1968 <coda_cursor_has_attributes+0x6c>

00001990 <coda_cursor_get_string_length>:
    1990:	push	{r4, r5, r6, sl, fp, lr}
    1994:	add	fp, sp, #16
    1998:	sub	sp, sp, #8
    199c:	cmp	r0, #0
    19a0:	beq	1a3c <coda_cursor_get_string_length+0xac>
    19a4:	mov	r6, r0
    19a8:	ldr	r0, [r0, #4]
    19ac:	cmp	r0, #1
    19b0:	blt	1a3c <coda_cursor_get_string_length+0xac>
    19b4:	add	r0, r6, r0, lsl #4
    19b8:	ldr	r0, [r0, #-8]
    19bc:	cmp	r0, #0
    19c0:	beq	1a3c <coda_cursor_get_string_length+0xac>
    19c4:	mov	r5, r1
    19c8:	cmp	r1, #0
    19cc:	beq	1a68 <coda_cursor_get_string_length+0xd8>
    19d0:	add	r1, sp, #4
    19d4:	mov	r0, r6
    19d8:	bl	17ec <coda_cursor_has_ascii_content>
    19dc:	mvn	r4, #0
    19e0:	cmp	r0, #0
    19e4:	bne	1a5c <coda_cursor_get_string_length+0xcc>
    19e8:	ldr	r0, [sp, #4]
    19ec:	cmp	r0, #0
    19f0:	beq	1a80 <coda_cursor_get_string_length+0xf0>
    19f4:	ldr	r0, [r6, #4]
    19f8:	add	r0, r6, r0, lsl #4
    19fc:	ldr	r0, [r0, #-8]
    1a00:	ldr	r0, [r0]
    1a04:	sub	r1, r0, #100	; 0x64
    1a08:	cmp	r1, #4
    1a0c:	bhi	1a94 <coda_cursor_get_string_length+0x104>
    1a10:	add	r0, pc, #0
    1a14:	ldr	pc, [r0, r1, lsl #2]
    1a18:	.word	0x00001a2c
    1a1c:	.word	0x00001adc
    1a20:	.word	0x00001ac4
    1a24:	.word	0x00001acc
    1a28:	.word	0x00001ab4
    1a2c:	mov	r0, r6
    1a30:	mov	r1, r5
    1a34:	bl	0 <coda_mem_cursor_get_string_length>
    1a38:	b	1af8 <coda_cursor_get_string_length+0x168>
    1a3c:	movw	r1, #0
    1a40:	movw	r2, #0
    1a44:	mvn	r0, #99	; 0x63
    1a48:	movw	r3, #1559	; 0x617
    1a4c:	movt	r1, #0
    1a50:	movt	r2, #0
    1a54:	bl	0 <coda_set_error>
    1a58:	mvn	r4, #0
    1a5c:	mov	r0, r4
    1a60:	sub	sp, fp, #16
    1a64:	pop	{r4, r5, r6, sl, fp, pc}
    1a68:	movw	r1, #0
    1a6c:	movw	r2, #0
    1a70:	mvn	r0, #99	; 0x63
    1a74:	movw	r3, #1564	; 0x61c
    1a78:	movt	r1, #0
    1a7c:	b	1a50 <coda_cursor_get_string_length+0xc0>
    1a80:	movw	r1, #0
    1a84:	mvn	r0, #104	; 0x68
    1a88:	movt	r1, #0
    1a8c:	bl	0 <coda_set_error>
    1a90:	b	1a5c <coda_cursor_get_string_length+0xcc>
    1a94:	cmp	r0, #1
    1a98:	beq	1aec <coda_cursor_get_string_length+0x15c>
    1a9c:	cmp	r0, #0
    1aa0:	bne	1b00 <coda_cursor_get_string_length+0x170>
    1aa4:	mov	r0, r6
    1aa8:	mov	r1, r5
    1aac:	bl	0 <coda_ascii_cursor_get_string_length>
    1ab0:	b	1af8 <coda_cursor_get_string_length+0x168>
    1ab4:	mov	r0, r6
    1ab8:	mov	r1, r5
    1abc:	bl	0 <coda_netcdf_cursor_get_string_length>
    1ac0:	b	1af8 <coda_cursor_get_string_length+0x168>
    1ac4:	mvn	r0, #12
    1ac8:	b	1ae0 <coda_cursor_get_string_length+0x150>
    1acc:	mov	r0, r6
    1ad0:	mov	r1, r5
    1ad4:	bl	0 <coda_cdf_cursor_get_string_length>
    1ad8:	b	1af8 <coda_cursor_get_string_length+0x168>
    1adc:	mvn	r0, #10
    1ae0:	mov	r1, #0
    1ae4:	bl	0 <coda_set_error>
    1ae8:	b	1a5c <coda_cursor_get_string_length+0xcc>
    1aec:	mov	r0, r6
    1af0:	mov	r1, r5
    1af4:	bl	0 <coda_bin_cursor_get_string_length>
    1af8:	mov	r4, r0
    1afc:	b	1a5c <coda_cursor_get_string_length+0xcc>
    1b00:	movw	r0, #0
    1b04:	movw	r1, #0
    1b08:	movw	r3, #0
    1b0c:	movw	r2, #1608	; 0x648
    1b10:	movt	r0, #0
    1b14:	movt	r1, #0
    1b18:	movt	r3, #0
    1b1c:	bl	0 <__assert_fail>

00001b20 <coda_cursor_get_bit_size>:
    1b20:	push	{fp, lr}
    1b24:	mov	fp, sp
    1b28:	cmp	r0, #0
    1b2c:	beq	1b78 <coda_cursor_get_bit_size+0x58>
    1b30:	ldr	r2, [r0, #4]
    1b34:	cmp	r2, #1
    1b38:	blt	1b78 <coda_cursor_get_bit_size+0x58>
    1b3c:	add	r2, r0, r2, lsl #4
    1b40:	ldr	r2, [r2, #-8]
    1b44:	cmp	r2, #0
    1b48:	beq	1b78 <coda_cursor_get_bit_size+0x58>
    1b4c:	ldr	r3, [r2]
    1b50:	mov	r2, #0
    1b54:	cmp	r3, #100	; 0x64
    1b58:	ble	1ba0 <coda_cursor_get_bit_size+0x80>
    1b5c:	sub	r0, r3, #101	; 0x65
    1b60:	cmp	r0, #5
    1b64:	mvncc	r0, #0
    1b68:	strcc	r0, [r1]
    1b6c:	strcc	r0, [r1, #4]
    1b70:	mov	r0, r2
    1b74:	pop	{fp, pc}
    1b78:	movw	r1, #0
    1b7c:	movw	r2, #0
    1b80:	mvn	r0, #99	; 0x63
    1b84:	movw	r3, #1630	; 0x65e
    1b88:	movt	r1, #0
    1b8c:	movt	r2, #0
    1b90:	bl	0 <coda_set_error>
    1b94:	mvn	r2, #0
    1b98:	mov	r0, r2
    1b9c:	pop	{fp, pc}
    1ba0:	cmp	r3, #0
    1ba4:	beq	1bc0 <coda_cursor_get_bit_size+0xa0>
    1ba8:	cmp	r3, #1
    1bac:	beq	1bc8 <coda_cursor_get_bit_size+0xa8>
    1bb0:	cmp	r3, #100	; 0x64
    1bb4:	bne	1b70 <coda_cursor_get_bit_size+0x50>
    1bb8:	pop	{fp, lr}
    1bbc:	b	0 <coda_mem_cursor_get_bit_size>
    1bc0:	pop	{fp, lr}
    1bc4:	b	0 <coda_ascii_cursor_get_bit_size>
    1bc8:	pop	{fp, lr}
    1bcc:	b	0 <coda_bin_cursor_get_bit_size>

00001bd0 <coda_cursor_get_byte_size>:
    1bd0:	push	{r4, r6, r7, sl, fp, lr}
    1bd4:	add	fp, sp, #16
    1bd8:	sub	sp, sp, #8
    1bdc:	cmp	r0, #0
    1be0:	beq	1c24 <coda_cursor_get_byte_size+0x54>
    1be4:	mov	r4, r1
    1be8:	ldr	r1, [r0, #4]
    1bec:	cmp	r1, #1
    1bf0:	blt	1c24 <coda_cursor_get_byte_size+0x54>
    1bf4:	add	r1, r0, r1, lsl #4
    1bf8:	ldr	r1, [r1, #-8]
    1bfc:	cmp	r1, #0
    1c00:	beq	1c24 <coda_cursor_get_byte_size+0x54>
    1c04:	mov	r1, sp
    1c08:	bl	1b20 <coda_cursor_get_bit_size>
    1c0c:	mov	r1, r0
    1c10:	mvn	r0, #0
    1c14:	cmp	r1, #0
    1c18:	beq	1c4c <coda_cursor_get_byte_size+0x7c>
    1c1c:	sub	sp, fp, #16
    1c20:	pop	{r4, r6, r7, sl, fp, pc}
    1c24:	movw	r1, #0
    1c28:	movw	r2, #0
    1c2c:	mvn	r0, #99	; 0x63
    1c30:	movw	r3, #1670	; 0x686
    1c34:	movt	r1, #0
    1c38:	movt	r2, #0
    1c3c:	bl	0 <coda_set_error>
    1c40:	mvn	r0, #0
    1c44:	sub	sp, fp, #16
    1c48:	pop	{r4, r6, r7, sl, fp, pc}
    1c4c:	ldr	r0, [sp, #4]
    1c50:	cmn	r0, #1
    1c54:	ble	1c84 <coda_cursor_get_byte_size+0xb4>
    1c58:	ldr	r1, [sp]
    1c5c:	lsr	r2, r1, #3
    1c60:	orr	r2, r2, r0, lsl #29
    1c64:	lsr	r0, r0, #3
    1c68:	adds	r6, r2, #1
    1c6c:	adc	r7, r0, #0
    1c70:	ands	r1, r1, #7
    1c74:	moveq	r6, r2
    1c78:	moveq	r7, r0
    1c7c:	strd	r6, [r4]
    1c80:	b	1c90 <coda_cursor_get_byte_size+0xc0>
    1c84:	mvn	r0, #0
    1c88:	str	r0, [r4]
    1c8c:	str	r0, [r4, #4]
    1c90:	mov	r0, #0
    1c94:	sub	sp, fp, #16
    1c98:	pop	{r4, r6, r7, sl, fp, pc}

00001c9c <coda_cursor_get_num_elements>:
    1c9c:	push	{fp, lr}
    1ca0:	mov	fp, sp
    1ca4:	cmp	r0, #0
    1ca8:	beq	1d00 <coda_cursor_get_num_elements+0x64>
    1cac:	ldr	r2, [r0, #4]
    1cb0:	cmp	r2, #1
    1cb4:	blt	1d00 <coda_cursor_get_num_elements+0x64>
    1cb8:	add	r2, r0, r2, lsl #4
    1cbc:	ldr	r2, [r2, #-8]
    1cc0:	cmp	r2, #0
    1cc4:	beq	1d00 <coda_cursor_get_num_elements+0x64>
    1cc8:	ldr	r2, [r2]
    1ccc:	sub	r3, r2, #100	; 0x64
    1cd0:	cmp	r3, #5
    1cd4:	bhi	1d24 <coda_cursor_get_num_elements+0x88>
    1cd8:	add	r2, pc, #0
    1cdc:	ldr	pc, [r2, r3, lsl #2]
    1ce0:	.word	0x00001cf8
    1ce4:	.word	0x00001d5c
    1ce8:	.word	0x00001d44
    1cec:	.word	0x00001d54
    1cf0:	.word	0x00001d3c
    1cf4:	.word	0x00001d70
    1cf8:	pop	{fp, lr}
    1cfc:	b	0 <coda_mem_cursor_get_num_elements>
    1d00:	movw	r1, #0
    1d04:	movw	r2, #0
    1d08:	mvn	r0, #99	; 0x63
    1d0c:	movw	r3, #1704	; 0x6a8
    1d10:	movt	r1, #0
    1d14:	movt	r2, #0
    1d18:	bl	0 <coda_set_error>
    1d1c:	mvn	r0, #0
    1d20:	pop	{fp, pc}
    1d24:	cmp	r2, #1
    1d28:	beq	1d4c <coda_cursor_get_num_elements+0xb0>
    1d2c:	cmp	r2, #0
    1d30:	bne	1d78 <coda_cursor_get_num_elements+0xdc>
    1d34:	pop	{fp, lr}
    1d38:	b	0 <coda_ascii_cursor_get_num_elements>
    1d3c:	pop	{fp, lr}
    1d40:	b	0 <coda_netcdf_cursor_get_num_elements>
    1d44:	mvn	r0, #12
    1d48:	b	1d60 <coda_cursor_get_num_elements+0xc4>
    1d4c:	pop	{fp, lr}
    1d50:	b	0 <coda_bin_cursor_get_num_elements>
    1d54:	pop	{fp, lr}
    1d58:	b	0 <coda_cdf_cursor_get_num_elements>
    1d5c:	mvn	r0, #10
    1d60:	mov	r1, #0
    1d64:	bl	0 <coda_set_error>
    1d68:	mvn	r0, #0
    1d6c:	pop	{fp, pc}
    1d70:	pop	{fp, lr}
    1d74:	b	0 <coda_grib_cursor_get_num_elements>
    1d78:	movw	r0, #0
    1d7c:	movw	r1, #0
    1d80:	movw	r3, #0
    1d84:	movw	r2, #1738	; 0x6ca
    1d88:	movt	r0, #0
    1d8c:	movt	r1, #0
    1d90:	movt	r3, #0
    1d94:	bl	0 <__assert_fail>

00001d98 <coda_cursor_get_product_file>:
    1d98:	push	{fp, lr}
    1d9c:	mov	fp, sp
    1da0:	cmp	r0, #0
    1da4:	beq	1dd4 <coda_cursor_get_product_file+0x3c>
    1da8:	ldr	r2, [r0, #4]
    1dac:	cmp	r2, #1
    1db0:	blt	1dd4 <coda_cursor_get_product_file+0x3c>
    1db4:	add	r2, r0, r2, lsl #4
    1db8:	ldr	r2, [r2, #-8]
    1dbc:	cmp	r2, #0
    1dc0:	beq	1dd4 <coda_cursor_get_product_file+0x3c>
    1dc4:	ldr	r0, [r0]
    1dc8:	str	r0, [r1]
    1dcc:	mov	r0, #0
    1dd0:	pop	{fp, pc}
    1dd4:	movw	r1, #0
    1dd8:	movw	r2, #0
    1ddc:	mvn	r0, #99	; 0x63
    1de0:	movw	r3, #1753	; 0x6d9
    1de4:	movt	r1, #0
    1de8:	movt	r2, #0
    1dec:	bl	0 <coda_set_error>
    1df0:	mvn	r0, #0
    1df4:	pop	{fp, pc}

00001df8 <coda_cursor_get_depth>:
    1df8:	push	{fp, lr}
    1dfc:	mov	fp, sp
    1e00:	cmp	r0, #0
    1e04:	beq	1e50 <coda_cursor_get_depth+0x58>
    1e08:	ldr	r2, [r0, #4]
    1e0c:	cmp	r2, #1
    1e10:	blt	1e50 <coda_cursor_get_depth+0x58>
    1e14:	sub	r2, r2, #1
    1e18:	add	r0, r0, r2, lsl #4
    1e1c:	ldr	r0, [r0, #8]
    1e20:	cmp	r0, #0
    1e24:	beq	1e50 <coda_cursor_get_depth+0x58>
    1e28:	cmp	r1, #0
    1e2c:	movne	r0, #0
    1e30:	strne	r2, [r1]
    1e34:	popne	{fp, pc}
    1e38:	movw	r1, #0
    1e3c:	movw	r2, #0
    1e40:	mvn	r0, #99	; 0x63
    1e44:	movw	r3, #1781	; 0x6f5
    1e48:	movt	r1, #0
    1e4c:	b	1e64 <coda_cursor_get_depth+0x6c>
    1e50:	movw	r1, #0
    1e54:	movw	r2, #0
    1e58:	mvn	r0, #99	; 0x63
    1e5c:	movw	r3, #1775	; 0x6ef
    1e60:	movt	r1, #0
    1e64:	movt	r2, #0
    1e68:	bl	0 <coda_set_error>
    1e6c:	mvn	r0, #0
    1e70:	pop	{fp, pc}

00001e74 <coda_cursor_get_index>:
    1e74:	push	{fp, lr}
    1e78:	mov	fp, sp
    1e7c:	cmp	r0, #0
    1e80:	beq	1ebc <coda_cursor_get_index+0x48>
    1e84:	ldr	r2, [r0, #4]
    1e88:	cmp	r2, #2
    1e8c:	blt	1ebc <coda_cursor_get_index+0x48>
    1e90:	sub	r2, r2, #1
    1e94:	add	r0, r0, r2, lsl #4
    1e98:	ldr	r2, [r0, #8]
    1e9c:	cmp	r2, #0
    1ea0:	beq	1ebc <coda_cursor_get_index+0x48>
    1ea4:	cmp	r1, #0
    1ea8:	beq	1ee0 <coda_cursor_get_index+0x6c>
    1eac:	ldr	r0, [r0, #12]
    1eb0:	str	r0, [r1]
    1eb4:	mov	r0, #0
    1eb8:	pop	{fp, pc}
    1ebc:	movw	r1, #0
    1ec0:	movw	r2, #0
    1ec4:	mvn	r0, #99	; 0x63
    1ec8:	movw	r3, #1805	; 0x70d
    1ecc:	movt	r1, #0
    1ed0:	movt	r2, #0
    1ed4:	bl	0 <coda_set_error>
    1ed8:	mvn	r0, #0
    1edc:	pop	{fp, pc}
    1ee0:	movw	r1, #0
    1ee4:	movw	r2, #0
    1ee8:	mvn	r0, #99	; 0x63
    1eec:	movw	r3, #1811	; 0x713
    1ef0:	movt	r1, #0
    1ef4:	b	1ed0 <coda_cursor_get_index+0x5c>

00001ef8 <coda_cursor_get_file_bit_offset>:
    1ef8:	push	{fp, lr}
    1efc:	mov	fp, sp
    1f00:	cmp	r0, #0
    1f04:	beq	1f54 <coda_cursor_get_file_bit_offset+0x5c>
    1f08:	ldr	r2, [r0, #4]
    1f0c:	cmp	r2, #1
    1f10:	blt	1f54 <coda_cursor_get_file_bit_offset+0x5c>
    1f14:	sub	r2, r2, #1
    1f18:	add	r2, r0, r2, lsl #4
    1f1c:	ldr	r0, [r2, #8]
    1f20:	cmp	r0, #0
    1f24:	beq	1f54 <coda_cursor_get_file_bit_offset+0x5c>
    1f28:	cmp	r1, #0
    1f2c:	beq	1f78 <coda_cursor_get_file_bit_offset+0x80>
    1f30:	ldr	ip, [r0]
    1f34:	mov	r0, #0
    1f38:	sub	r3, ip, #100	; 0x64
    1f3c:	cmp	r3, #6
    1f40:	bcs	1f90 <coda_cursor_get_file_bit_offset+0x98>
    1f44:	mvn	r2, #0
    1f48:	str	r2, [r1]
    1f4c:	str	r2, [r1, #4]
    1f50:	pop	{fp, pc}
    1f54:	movw	r1, #0
    1f58:	movw	r2, #0
    1f5c:	mvn	r0, #99	; 0x63
    1f60:	movw	r3, #1833	; 0x729
    1f64:	movt	r1, #0
    1f68:	movt	r2, #0
    1f6c:	bl	0 <coda_set_error>
    1f70:	mvn	r0, #0
    1f74:	pop	{fp, pc}
    1f78:	movw	r1, #0
    1f7c:	movw	r2, #0
    1f80:	mvn	r0, #99	; 0x63
    1f84:	movw	r3, #1839	; 0x72f
    1f88:	movt	r1, #0
    1f8c:	b	1f68 <coda_cursor_get_file_bit_offset+0x70>
    1f90:	cmp	ip, #1
    1f94:	bhi	1f50 <coda_cursor_get_file_bit_offset+0x58>
    1f98:	ldrd	r2, [r2, #16]
    1f9c:	strd	r2, [r1]
    1fa0:	pop	{fp, pc}

00001fa4 <coda_cursor_get_file_byte_offset>:
    1fa4:	push	{r4, r5, fp, lr}
    1fa8:	add	fp, sp, #8
    1fac:	cmp	r0, #0
    1fb0:	beq	1ffc <coda_cursor_get_file_byte_offset+0x58>
    1fb4:	ldr	r2, [r0, #4]
    1fb8:	cmp	r2, #1
    1fbc:	blt	1ffc <coda_cursor_get_file_byte_offset+0x58>
    1fc0:	sub	r2, r2, #1
    1fc4:	add	r2, r0, r2, lsl #4
    1fc8:	ldr	r0, [r2, #8]
    1fcc:	cmp	r0, #0
    1fd0:	beq	1ffc <coda_cursor_get_file_byte_offset+0x58>
    1fd4:	cmp	r1, #0
    1fd8:	beq	2020 <coda_cursor_get_file_byte_offset+0x7c>
    1fdc:	ldr	r3, [r0]
    1fe0:	sub	r0, r3, #100	; 0x64
    1fe4:	cmp	r0, #6
    1fe8:	bcs	2038 <coda_cursor_get_file_byte_offset+0x94>
    1fec:	mvn	r0, #0
    1ff0:	str	r0, [r1]
    1ff4:	str	r0, [r1, #4]
    1ff8:	pop	{r4, r5, fp, pc}
    1ffc:	movw	r1, #0
    2000:	movw	r2, #0
    2004:	mvn	r0, #99	; 0x63
    2008:	movw	r3, #1875	; 0x753
    200c:	movt	r1, #0
    2010:	movt	r2, #0
    2014:	bl	0 <coda_set_error>
    2018:	mvn	r0, #0
    201c:	pop	{r4, r5, fp, pc}
    2020:	movw	r1, #0
    2024:	movw	r2, #0
    2028:	mvn	r0, #99	; 0x63
    202c:	movw	r3, #1881	; 0x759
    2030:	movt	r1, #0
    2034:	b	2010 <coda_cursor_get_file_byte_offset+0x6c>
    2038:	mov	r0, #0
    203c:	cmp	r3, #1
    2040:	bhi	1ff8 <coda_cursor_get_file_byte_offset+0x54>
    2044:	ldr	r4, [r2, #16]
    2048:	ldr	r3, [r2, #20]
    204c:	and	r2, r4, r3
    2050:	cmn	r2, #1
    2054:	beq	206c <coda_cursor_get_file_byte_offset+0xc8>
    2058:	lsr	r2, r4, #3
    205c:	asr	r5, r3, #3
    2060:	orr	r4, r2, r3, lsl #29
    2064:	strd	r4, [r1]
    2068:	pop	{r4, r5, fp, pc}
    206c:	mvn	r3, #0
    2070:	str	r3, [r1]
    2074:	str	r3, [r1, #4]
    2078:	pop	{r4, r5, fp, pc}

0000207c <coda_cursor_get_format>:
    207c:	push	{fp, lr}
    2080:	mov	fp, sp
    2084:	cmp	r0, #0
    2088:	beq	20cc <coda_cursor_get_format+0x50>
    208c:	ldr	r2, [r0, #4]
    2090:	cmp	r2, #1
    2094:	blt	20cc <coda_cursor_get_format+0x50>
    2098:	add	r0, r0, r2, lsl #4
    209c:	ldr	r0, [r0, #-8]
    20a0:	cmp	r0, #0
    20a4:	beq	20cc <coda_cursor_get_format+0x50>
    20a8:	cmp	r1, #0
    20ac:	beq	20f0 <coda_cursor_get_format+0x74>
    20b0:	ldr	r2, [r0]
    20b4:	cmp	r2, #99	; 0x63
    20b8:	ldrhi	r0, [r0, #4]
    20bc:	ldr	r0, [r0]
    20c0:	str	r0, [r1]
    20c4:	mov	r0, #0
    20c8:	pop	{fp, pc}
    20cc:	movw	r1, #0
    20d0:	movw	r2, #0
    20d4:	mvn	r0, #99	; 0x63
    20d8:	movw	r3, #1925	; 0x785
    20dc:	movt	r1, #0
    20e0:	movt	r2, #0
    20e4:	bl	0 <coda_set_error>
    20e8:	mvn	r0, #0
    20ec:	pop	{fp, pc}
    20f0:	movw	r1, #0
    20f4:	movw	r2, #0
    20f8:	mvn	r0, #99	; 0x63
    20fc:	movw	r3, #1930	; 0x78a
    2100:	movt	r1, #0
    2104:	b	20e0 <coda_cursor_get_format+0x64>

00002108 <coda_cursor_get_type_class>:
    2108:	push	{fp, lr}
    210c:	mov	fp, sp
    2110:	cmp	r0, #0
    2114:	beq	2158 <coda_cursor_get_type_class+0x50>
    2118:	ldr	r2, [r0, #4]
    211c:	cmp	r2, #1
    2120:	blt	2158 <coda_cursor_get_type_class+0x50>
    2124:	add	r0, r0, r2, lsl #4
    2128:	ldr	r0, [r0, #-8]
    212c:	cmp	r0, #0
    2130:	beq	2158 <coda_cursor_get_type_class+0x50>
    2134:	cmp	r1, #0
    2138:	beq	217c <coda_cursor_get_type_class+0x74>
    213c:	ldr	r2, [r0]
    2140:	cmp	r2, #99	; 0x63
    2144:	ldrhi	r0, [r0, #4]
    2148:	ldr	r0, [r0, #8]
    214c:	str	r0, [r1]
    2150:	mov	r0, #0
    2154:	pop	{fp, pc}
    2158:	movw	r1, #0
    215c:	movw	r2, #0
    2160:	mvn	r0, #99	; 0x63
    2164:	movw	r3, #1954	; 0x7a2
    2168:	movt	r1, #0
    216c:	movt	r2, #0
    2170:	bl	0 <coda_set_error>
    2174:	mvn	r0, #0
    2178:	pop	{fp, pc}
    217c:	movw	r1, #0
    2180:	movw	r2, #0
    2184:	mvn	r0, #99	; 0x63
    2188:	movw	r3, #1959	; 0x7a7
    218c:	movt	r1, #0
    2190:	b	216c <coda_cursor_get_type_class+0x64>

00002194 <coda_cursor_get_read_type>:
    2194:	push	{fp, lr}
    2198:	mov	fp, sp
    219c:	cmp	r0, #0
    21a0:	beq	21d4 <coda_cursor_get_read_type+0x40>
    21a4:	ldr	r2, [r0, #4]
    21a8:	cmp	r2, #1
    21ac:	blt	21d4 <coda_cursor_get_read_type+0x40>
    21b0:	add	r0, r0, r2, lsl #4
    21b4:	ldr	r0, [r0, #-8]
    21b8:	cmp	r0, #0
    21bc:	beq	21d4 <coda_cursor_get_read_type+0x40>
    21c0:	ldr	r2, [r0]
    21c4:	cmp	r2, #99	; 0x63
    21c8:	ldrhi	r0, [r0, #4]
    21cc:	pop	{fp, lr}
    21d0:	b	0 <coda_type_get_read_type>
    21d4:	movw	r1, #0
    21d8:	movw	r2, #0
    21dc:	mvn	r0, #99	; 0x63
    21e0:	movw	r3, #1982	; 0x7be
    21e4:	movt	r1, #0
    21e8:	movt	r2, #0
    21ec:	bl	0 <coda_set_error>
    21f0:	mvn	r0, #0
    21f4:	pop	{fp, pc}

000021f8 <coda_cursor_get_special_type>:
    21f8:	push	{fp, lr}
    21fc:	mov	fp, sp
    2200:	cmp	r0, #0
    2204:	beq	2240 <coda_cursor_get_special_type+0x48>
    2208:	ldr	r2, [r0, #4]
    220c:	cmp	r2, #1
    2210:	blt	2240 <coda_cursor_get_special_type+0x48>
    2214:	add	r0, r0, r2, lsl #4
    2218:	ldr	r0, [r0, #-8]
    221c:	cmp	r0, #0
    2220:	beq	2240 <coda_cursor_get_special_type+0x48>
    2224:	cmp	r1, #0
    2228:	beq	2264 <coda_cursor_get_special_type+0x6c>
    222c:	ldr	r2, [r0]
    2230:	cmp	r2, #99	; 0x63
    2234:	ldrhi	r0, [r0, #4]
    2238:	pop	{fp, lr}
    223c:	b	0 <coda_type_get_special_type>
    2240:	movw	r1, #0
    2244:	movw	r2, #0
    2248:	mvn	r0, #99	; 0x63
    224c:	movw	r3, #2003	; 0x7d3
    2250:	movt	r1, #0
    2254:	movt	r2, #0
    2258:	bl	0 <coda_set_error>
    225c:	mvn	r0, #0
    2260:	pop	{fp, pc}
    2264:	movw	r1, #0
    2268:	movw	r2, #0
    226c:	mvn	r0, #99	; 0x63
    2270:	movw	r3, #2008	; 0x7d8
    2274:	movt	r1, #0
    2278:	b	2254 <coda_cursor_get_special_type+0x5c>

0000227c <coda_cursor_get_record_field_available_status>:
    227c:	push	{fp, lr}
    2280:	mov	fp, sp
    2284:	cmp	r0, #0
    2288:	beq	22f4 <coda_cursor_get_record_field_available_status+0x78>
    228c:	ldr	ip, [r0, #4]
    2290:	cmp	ip, #1
    2294:	blt	22f4 <coda_cursor_get_record_field_available_status+0x78>
    2298:	ldr	r3, [r0]
    229c:	cmp	r3, #0
    22a0:	beq	22f4 <coda_cursor_get_record_field_available_status+0x78>
    22a4:	add	r3, r0, ip, lsl #4
    22a8:	ldr	r3, [r3, #-8]
    22ac:	cmp	r3, #0
    22b0:	beq	22f4 <coda_cursor_get_record_field_available_status+0x78>
    22b4:	cmp	r2, #0
    22b8:	beq	231c <coda_cursor_get_record_field_available_status+0xa0>
    22bc:	ldr	ip, [r3]
    22c0:	cmp	ip, #99	; 0x63
    22c4:	ldrhi	r3, [r3, #4]
    22c8:	ldr	r3, [r3, #8]
    22cc:	cmp	r3, #0
    22d0:	beq	2334 <coda_cursor_get_record_field_available_status+0xb8>
    22d4:	mov	r0, r3
    22d8:	bl	0 <coda_type_get_class_name>
    22dc:	movw	r1, #0
    22e0:	mov	r2, r0
    22e4:	mvn	r0, #104	; 0x68
    22e8:	movt	r1, #0
    22ec:	bl	0 <coda_set_error>
    22f0:	b	2310 <coda_cursor_get_record_field_available_status+0x94>
    22f4:	movw	r1, #0
    22f8:	movw	r2, #0
    22fc:	mvn	r0, #99	; 0x63
    2300:	movw	r3, #2085	; 0x825
    2304:	movt	r1, #0
    2308:	movt	r2, #0
    230c:	bl	0 <coda_set_error>
    2310:	mvn	r3, #0
    2314:	mov	r0, r3
    2318:	pop	{fp, pc}
    231c:	movw	r1, #0
    2320:	movw	r2, #0
    2324:	mvn	r0, #99	; 0x63
    2328:	movw	r3, #2090	; 0x82a
    232c:	movt	r1, #0
    2330:	b	2308 <coda_cursor_get_record_field_available_status+0x8c>
    2334:	mov	r3, #0
    2338:	cmp	ip, #100	; 0x64
    233c:	ble	235c <coda_cursor_get_record_field_available_status+0xe0>
    2340:	sub	r0, ip, #101	; 0x65
    2344:	cmp	r0, #4
    2348:	bcs	237c <coda_cursor_get_record_field_available_status+0x100>
    234c:	mov	r0, #1
    2350:	str	r0, [r2]
    2354:	mov	r0, r3
    2358:	pop	{fp, pc}
    235c:	cmp	ip, #2
    2360:	bcs	236c <coda_cursor_get_record_field_available_status+0xf0>
    2364:	pop	{fp, lr}
    2368:	b	0 <coda_ascbin_cursor_get_record_field_available_status>
    236c:	cmp	ip, #100	; 0x64
    2370:	bne	2354 <coda_cursor_get_record_field_available_status+0xd8>
    2374:	pop	{fp, lr}
    2378:	b	0 <coda_mem_cursor_get_record_field_available_status>
    237c:	cmp	ip, #105	; 0x69
    2380:	bne	2354 <coda_cursor_get_record_field_available_status+0xd8>
    2384:	movw	r0, #0
    2388:	movw	r1, #0
    238c:	movw	r3, #0
    2390:	movw	r2, #2117	; 0x845
    2394:	movt	r0, #0
    2398:	movt	r1, #0
    239c:	movt	r3, #0
    23a0:	bl	0 <__assert_fail>

000023a4 <coda_cursor_get_available_union_field_index>:
    23a4:	push	{fp, lr}
    23a8:	mov	fp, sp
    23ac:	cmp	r0, #0
    23b0:	beq	2420 <coda_cursor_get_available_union_field_index+0x7c>
    23b4:	ldr	r2, [r0, #4]
    23b8:	cmp	r2, #1
    23bc:	blt	2420 <coda_cursor_get_available_union_field_index+0x7c>
    23c0:	ldr	r3, [r0]
    23c4:	cmp	r3, #0
    23c8:	beq	2420 <coda_cursor_get_available_union_field_index+0x7c>
    23cc:	add	r2, r0, r2, lsl #4
    23d0:	ldr	r2, [r2, #-8]
    23d4:	cmp	r2, #0
    23d8:	beq	2420 <coda_cursor_get_available_union_field_index+0x7c>
    23dc:	cmp	r1, #0
    23e0:	beq	2444 <coda_cursor_get_available_union_field_index+0xa0>
    23e4:	ldr	r3, [r2]
    23e8:	cmp	r3, #99	; 0x63
    23ec:	ldrhi	r2, [r2, #4]
    23f0:	ldr	r2, [r2, #8]
    23f4:	cmp	r2, #0
    23f8:	beq	245c <coda_cursor_get_available_union_field_index+0xb8>
    23fc:	mov	r0, r2
    2400:	bl	0 <coda_type_get_class_name>
    2404:	movw	r1, #0
    2408:	mov	r2, r0
    240c:	mvn	r0, #104	; 0x68
    2410:	movt	r1, #0
    2414:	bl	0 <coda_set_error>
    2418:	mvn	r0, #0
    241c:	pop	{fp, pc}
    2420:	movw	r1, #0
    2424:	movw	r2, #0
    2428:	mvn	r0, #99	; 0x63
    242c:	movw	r3, #2140	; 0x85c
    2430:	movt	r1, #0
    2434:	movt	r2, #0
    2438:	bl	0 <coda_set_error>
    243c:	mvn	r0, #0
    2440:	pop	{fp, pc}
    2444:	movw	r1, #0
    2448:	movw	r2, #0
    244c:	mvn	r0, #99	; 0x63
    2450:	movw	r3, #2145	; 0x861
    2454:	movt	r1, #0
    2458:	b	2434 <coda_cursor_get_available_union_field_index+0x90>
    245c:	cmp	r3, #2
    2460:	bcs	246c <coda_cursor_get_available_union_field_index+0xc8>
    2464:	pop	{fp, lr}
    2468:	b	0 <coda_ascbin_cursor_get_available_union_field_index>
    246c:	cmp	r3, #100	; 0x64
    2470:	bne	247c <coda_cursor_get_available_union_field_index+0xd8>
    2474:	pop	{fp, lr}
    2478:	b	0 <coda_mem_cursor_get_available_union_field_index>
    247c:	movw	r0, #0
    2480:	movw	r1, #0
    2484:	movw	r3, #0
    2488:	movw	r2, #2172	; 0x87c
    248c:	movt	r0, #0
    2490:	movt	r1, #0
    2494:	movt	r3, #0
    2498:	bl	0 <__assert_fail>

0000249c <coda_cursor_get_array_dim>:
    249c:	push	{fp, lr}
    24a0:	mov	fp, sp
    24a4:	cmp	r0, #0
    24a8:	beq	24ec <coda_cursor_get_array_dim+0x50>
    24ac:	ldr	r3, [r0, #4]
    24b0:	cmp	r3, #1
    24b4:	blt	24ec <coda_cursor_get_array_dim+0x50>
    24b8:	add	r3, r0, r3, lsl #4
    24bc:	ldr	r3, [r3, #-8]
    24c0:	cmp	r3, #0
    24c4:	beq	24ec <coda_cursor_get_array_dim+0x50>
    24c8:	cmp	r1, #0
    24cc:	cmpne	r2, #0
    24d0:	bne	2510 <coda_cursor_get_array_dim+0x74>
    24d4:	movw	r1, #0
    24d8:	movw	r2, #0
    24dc:	mvn	r0, #99	; 0x63
    24e0:	movw	r3, #2202	; 0x89a
    24e4:	movt	r1, #0
    24e8:	b	2500 <coda_cursor_get_array_dim+0x64>
    24ec:	movw	r1, #0
    24f0:	movw	r2, #0
    24f4:	mvn	r0, #99	; 0x63
    24f8:	movw	r3, #2197	; 0x895
    24fc:	movt	r1, #0
    2500:	movt	r2, #0
    2504:	bl	0 <coda_set_error>
    2508:	mvn	r0, #0
    250c:	pop	{fp, pc}
    2510:	ldr	ip, [r3]
    2514:	cmp	ip, #99	; 0x63
    2518:	ldrhi	r3, [r3, #4]
    251c:	ldr	r3, [r3, #8]
    2520:	cmp	r3, #1
    2524:	bne	255c <coda_cursor_get_array_dim+0xc0>
    2528:	sub	lr, ip, #100	; 0x64
    252c:	cmp	lr, #5
    2530:	bhi	2580 <coda_cursor_get_array_dim+0xe4>
    2534:	add	r3, pc, #0
    2538:	ldr	pc, [r3, lr, lsl #2]
    253c:	.word	0x00002554
    2540:	.word	0x000025a8
    2544:	.word	0x00002598
    2548:	.word	0x000025a0
    254c:	.word	0x00002590
    2550:	.word	0x000025bc
    2554:	pop	{fp, lr}
    2558:	b	0 <coda_mem_cursor_get_array_dim>
    255c:	mov	r0, r3
    2560:	bl	0 <coda_type_get_class_name>
    2564:	movw	r1, #0
    2568:	mov	r2, r0
    256c:	mvn	r0, #104	; 0x68
    2570:	movt	r1, #0
    2574:	bl	0 <coda_set_error>
    2578:	mvn	r0, #0
    257c:	pop	{fp, pc}
    2580:	cmp	ip, #2
    2584:	bcs	25c4 <coda_cursor_get_array_dim+0x128>
    2588:	pop	{fp, lr}
    258c:	b	0 <coda_ascbin_cursor_get_array_dim>
    2590:	pop	{fp, lr}
    2594:	b	0 <coda_netcdf_cursor_get_array_dim>
    2598:	mvn	r0, #12
    259c:	b	25ac <coda_cursor_get_array_dim+0x110>
    25a0:	pop	{fp, lr}
    25a4:	b	0 <coda_cdf_cursor_get_array_dim>
    25a8:	mvn	r0, #10
    25ac:	mov	r1, #0
    25b0:	bl	0 <coda_set_error>
    25b4:	mvn	r0, #0
    25b8:	pop	{fp, pc}
    25bc:	pop	{fp, lr}
    25c0:	b	0 <coda_grib_cursor_get_array_dim>
    25c4:	movw	r0, #0
    25c8:	movw	r1, #0
    25cc:	movw	r3, #0
    25d0:	movw	r2, #2243	; 0x8c3
    25d4:	movt	r0, #0
    25d8:	movt	r1, #0
    25dc:	movt	r3, #0
    25e0:	bl	0 <__assert_fail>
