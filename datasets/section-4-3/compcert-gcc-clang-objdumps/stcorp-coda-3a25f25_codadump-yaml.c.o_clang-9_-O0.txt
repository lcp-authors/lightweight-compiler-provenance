
../compcert-repos/stcorp-coda-3a25f25/CMakeFiles/codadump.dir/tools/codadump/codadump-yaml.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <print_yaml_data>:
   0:	push	{r4, r5, fp, lr}
   4:	add	fp, sp, #8
   8:	sub	sp, sp, #544	; 0x220
   c:	str	r0, [fp, #-12]
  10:	ldr	r0, [fp, #-12]
  14:	movw	r1, #0
  18:	movt	r1, #0
  1c:	str	r0, [r1]
  20:	movw	r0, #0
  24:	movt	r0, #0
  28:	ldr	r0, [r0]
  2c:	sub	r1, fp, #16
  30:	bl	0 <coda_open>
  34:	str	r0, [sp, #12]
  38:	ldr	r0, [sp, #12]
  3c:	cmp	r0, #0
  40:	beq	84 <print_yaml_data+0x84>
  44:	bl	0 <coda_get_errno>
  48:	ldr	r0, [r0]
  4c:	cmn	r0, #21
  50:	bne	84 <print_yaml_data+0x84>
  54:	movw	r0, #0
  58:	bl	0 <coda_set_option_use_mmap>
  5c:	movw	r1, #0
  60:	movt	r1, #0
  64:	ldr	r1, [r1]
  68:	str	r0, [sp, #8]
  6c:	mov	r0, r1
  70:	sub	r1, fp, #16
  74:	bl	0 <coda_open>
  78:	str	r0, [sp, #12]
  7c:	movw	r0, #1
  80:	bl	0 <coda_set_option_use_mmap>
  84:	ldr	r0, [sp, #12]
  88:	cmp	r0, #0
  8c:	beq	9c <print_yaml_data+0x9c>
  90:	movw	r0, #0
  94:	movt	r0, #0
  98:	blx	r0
  9c:	ldr	r1, [fp, #-16]
  a0:	add	r0, sp, #16
  a4:	bl	0 <coda_cursor_set_product>
  a8:	cmp	r0, #0
  ac:	beq	bc <print_yaml_data+0xbc>
  b0:	movw	r0, #0
  b4:	movt	r0, #0
  b8:	blx	r0
  bc:	movw	r0, #0
  c0:	movt	r0, #0
  c4:	ldr	r0, [r0]
  c8:	movw	r1, #0
  cc:	cmp	r0, r1
  d0:	beq	108 <print_yaml_data+0x108>
  d4:	movw	r0, #0
  d8:	movt	r0, #0
  dc:	ldr	r1, [r0]
  e0:	add	r0, sp, #16
  e4:	bl	0 <coda_cursor_goto>
  e8:	str	r0, [sp, #12]
  ec:	ldr	r0, [sp, #12]
  f0:	cmp	r0, #0
  f4:	beq	104 <print_yaml_data+0x104>
  f8:	movw	r0, #0
  fc:	movt	r0, #0
 100:	blx	r0
 104:	b	108 <print_yaml_data+0x108>
 108:	movw	r0, #0
 10c:	bl	0 <coda_set_option_perform_boundary_checks>
 110:	add	r1, sp, #16
 114:	str	r0, [sp, #4]
 118:	mov	r0, r1
 11c:	movw	r1, #0
 120:	bl	134 <print_data>
 124:	ldr	r0, [fp, #-16]
 128:	bl	0 <coda_close>
 12c:	sub	sp, fp, #8
 130:	pop	{r4, r5, fp, pc}

00000134 <print_data>:
 134:	push	{r4, r5, fp, lr}
 138:	add	fp, sp, #8
 13c:	sub	sp, sp, #360	; 0x168
 140:	str	r0, [fp, #-12]
 144:	str	r1, [fp, #-16]
 148:	movw	r0, #0
 14c:	str	r0, [fp, #-24]	; 0xffffffe8
 150:	movw	r0, #0
 154:	movt	r0, #0
 158:	ldr	r0, [r0]
 15c:	cmp	r0, #0
 160:	beq	24c <print_data+0x118>
 164:	ldr	r0, [fp, #-12]
 168:	sub	r1, fp, #24
 16c:	bl	0 <coda_cursor_has_attributes>
 170:	cmp	r0, #0
 174:	beq	184 <print_data+0x50>
 178:	movw	r0, #0
 17c:	movt	r0, #0
 180:	blx	r0
 184:	ldr	r0, [fp, #-24]	; 0xffffffe8
 188:	cmp	r0, #0
 18c:	beq	248 <print_data+0x114>
 190:	ldr	r0, [fp, #-16]
 194:	cmp	r0, #0
 198:	beq	1b0 <print_data+0x7c>
 19c:	movw	r0, #0
 1a0:	movt	r0, #0
 1a4:	bl	ce4 <ff_printf>
 1a8:	str	r0, [sp, #68]	; 0x44
 1ac:	bl	d48 <indent>
 1b0:	movw	r0, #0
 1b4:	movt	r0, #0
 1b8:	bl	ce4 <ff_printf>
 1bc:	ldr	r1, [fp, #-12]
 1c0:	str	r0, [sp, #64]	; 0x40
 1c4:	mov	r0, r1
 1c8:	bl	0 <coda_cursor_goto_attributes>
 1cc:	cmp	r0, #0
 1d0:	beq	1e0 <print_data+0xac>
 1d4:	movw	r0, #0
 1d8:	movt	r0, #0
 1dc:	blx	r0
 1e0:	movw	r0, #0
 1e4:	movt	r0, #0
 1e8:	ldr	r1, [r0]
 1ec:	add	r1, r1, #1
 1f0:	str	r1, [r0]
 1f4:	ldr	r0, [fp, #-12]
 1f8:	movw	r1, #1
 1fc:	bl	134 <print_data>
 200:	movw	r0, #0
 204:	movt	r0, #0
 208:	ldr	r1, [r0]
 20c:	mvn	r2, #0
 210:	add	r1, r1, r2
 214:	str	r1, [r0]
 218:	ldr	r0, [fp, #-12]
 21c:	bl	0 <coda_cursor_goto_parent>
 220:	movw	r1, #0
 224:	movt	r1, #0
 228:	str	r0, [sp, #60]	; 0x3c
 22c:	mov	r0, r1
 230:	bl	ddc <fi_printf>
 234:	movw	r1, #0
 238:	movt	r1, #0
 23c:	ldr	r2, [r1]
 240:	add	r2, r2, #1
 244:	str	r2, [r1]
 248:	b	24c <print_data+0x118>
 24c:	ldr	r0, [fp, #-12]
 250:	sub	r1, fp, #20
 254:	bl	0 <coda_cursor_get_type_class>
 258:	cmp	r0, #0
 25c:	beq	26c <print_data+0x138>
 260:	movw	r0, #0
 264:	movt	r0, #0
 268:	blx	r0
 26c:	ldr	r0, [fp, #-20]	; 0xffffffec
 270:	cmp	r0, #6
 274:	str	r0, [sp, #56]	; 0x38
 278:	bhi	cb8 <print_data+0xb84>
 27c:	add	r0, pc, #8
 280:	ldr	r1, [sp, #56]	; 0x38
 284:	ldr	r0, [r0, r1, lsl #2]
 288:	mov	pc, r0
 28c:	.word	0x000002a8
 290:	.word	0x0000057c
 294:	.word	0x0000070c
 298:	.word	0x0000070c
 29c:	.word	0x0000070c
 2a0:	.word	0x0000070c
 2a4:	.word	0x00000b40
 2a8:	ldr	r0, [fp, #-12]
 2ac:	sub	r1, fp, #28
 2b0:	bl	0 <coda_cursor_get_num_elements>
 2b4:	cmp	r0, #0
 2b8:	beq	2c8 <print_data+0x194>
 2bc:	movw	r0, #0
 2c0:	movt	r0, #0
 2c4:	blx	r0
 2c8:	ldr	r0, [fp, #-28]	; 0xffffffe4
 2cc:	cmp	r0, #0
 2d0:	ble	56c <print_data+0x438>
 2d4:	ldr	r0, [fp, #-16]
 2d8:	cmp	r0, #0
 2dc:	beq	2ec <print_data+0x1b8>
 2e0:	movw	r0, #0
 2e4:	movt	r0, #0
 2e8:	bl	ce4 <ff_printf>
 2ec:	ldr	r0, [fp, #-12]
 2f0:	sub	r1, fp, #32
 2f4:	bl	0 <coda_cursor_get_type>
 2f8:	cmp	r0, #0
 2fc:	beq	30c <print_data+0x1d8>
 300:	movw	r0, #0
 304:	movt	r0, #0
 308:	blx	r0
 30c:	ldr	r0, [fp, #-32]	; 0xffffffe0
 310:	sub	r1, fp, #36	; 0x24
 314:	bl	0 <coda_type_get_record_union_status>
 318:	cmp	r0, #0
 31c:	beq	32c <print_data+0x1f8>
 320:	movw	r0, #0
 324:	movt	r0, #0
 328:	blx	r0
 32c:	ldr	r0, [fp, #-36]	; 0xffffffdc
 330:	cmp	r0, #0
 334:	beq	408 <print_data+0x2d4>
 338:	ldr	r0, [fp, #-12]
 33c:	sub	r1, fp, #40	; 0x28
 340:	bl	0 <coda_cursor_get_available_union_field_index>
 344:	cmp	r0, #0
 348:	beq	358 <print_data+0x224>
 34c:	movw	r0, #0
 350:	movt	r0, #0
 354:	blx	r0
 358:	ldr	r0, [fp, #-32]	; 0xffffffe0
 35c:	ldr	r1, [fp, #-40]	; 0xffffffd8
 360:	sub	r2, fp, #44	; 0x2c
 364:	bl	0 <coda_type_get_record_field_name>
 368:	cmp	r0, #0
 36c:	beq	37c <print_data+0x248>
 370:	movw	r0, #0
 374:	movt	r0, #0
 378:	blx	r0
 37c:	ldr	r0, [fp, #-12]
 380:	ldr	r1, [fp, #-40]	; 0xffffffd8
 384:	bl	0 <coda_cursor_goto_record_field_by_index>
 388:	cmp	r0, #0
 38c:	beq	39c <print_data+0x268>
 390:	movw	r0, #0
 394:	movt	r0, #0
 398:	blx	r0
 39c:	ldr	r0, [fp, #-16]
 3a0:	cmp	r0, #0
 3a4:	beq	3ac <print_data+0x278>
 3a8:	bl	d48 <indent>
 3ac:	ldr	r1, [fp, #-44]	; 0xffffffd4
 3b0:	movw	r0, #0
 3b4:	movt	r0, #0
 3b8:	bl	ce4 <ff_printf>
 3bc:	movw	r1, #0
 3c0:	movt	r1, #0
 3c4:	ldr	r2, [r1]
 3c8:	add	r2, r2, #1
 3cc:	str	r2, [r1]
 3d0:	ldr	r1, [fp, #-12]
 3d4:	str	r0, [sp, #52]	; 0x34
 3d8:	mov	r0, r1
 3dc:	movw	r1, #1
 3e0:	bl	134 <print_data>
 3e4:	movw	r0, #0
 3e8:	movt	r0, #0
 3ec:	ldr	r1, [r0]
 3f0:	mvn	r2, #0
 3f4:	add	r1, r1, r2
 3f8:	str	r1, [r0]
 3fc:	ldr	r0, [fp, #-12]
 400:	bl	0 <coda_cursor_goto_parent>
 404:	b	568 <print_data+0x434>
 408:	movw	r0, #1
 40c:	str	r0, [fp, #-48]	; 0xffffffd0
 410:	ldr	r0, [fp, #-12]
 414:	bl	0 <coda_cursor_goto_first_record_field>
 418:	cmp	r0, #0
 41c:	beq	42c <print_data+0x2f8>
 420:	movw	r0, #0
 424:	movt	r0, #0
 428:	blx	r0
 42c:	movw	r0, #0
 430:	str	r0, [fp, #-40]	; 0xffffffd8
 434:	ldr	r0, [fp, #-40]	; 0xffffffd8
 438:	ldr	r1, [fp, #-28]	; 0xffffffe4
 43c:	cmp	r0, r1
 440:	bge	560 <print_data+0x42c>
 444:	ldr	r0, [fp, #-32]	; 0xffffffe0
 448:	ldr	r1, [fp, #-40]	; 0xffffffd8
 44c:	sub	r2, fp, #56	; 0x38
 450:	bl	0 <coda_type_get_record_field_hidden_status>
 454:	cmp	r0, #0
 458:	beq	468 <print_data+0x334>
 45c:	movw	r0, #0
 460:	movt	r0, #0
 464:	blx	r0
 468:	ldr	r0, [fp, #-56]	; 0xffffffc8
 46c:	cmp	r0, #0
 470:	bne	518 <print_data+0x3e4>
 474:	ldr	r0, [fp, #-32]	; 0xffffffe0
 478:	ldr	r1, [fp, #-40]	; 0xffffffd8
 47c:	sub	r2, fp, #52	; 0x34
 480:	bl	0 <coda_type_get_record_field_name>
 484:	cmp	r0, #0
 488:	beq	498 <print_data+0x364>
 48c:	movw	r0, #0
 490:	movt	r0, #0
 494:	blx	r0
 498:	ldr	r0, [fp, #-16]
 49c:	cmp	r0, #0
 4a0:	bne	4b0 <print_data+0x37c>
 4a4:	ldr	r0, [fp, #-48]	; 0xffffffd0
 4a8:	cmp	r0, #0
 4ac:	bne	4b4 <print_data+0x380>
 4b0:	bl	d48 <indent>
 4b4:	ldr	r0, [fp, #-48]	; 0xffffffd0
 4b8:	cmp	r0, #0
 4bc:	beq	4c8 <print_data+0x394>
 4c0:	movw	r0, #0
 4c4:	str	r0, [fp, #-48]	; 0xffffffd0
 4c8:	ldr	r1, [fp, #-52]	; 0xffffffcc
 4cc:	movw	r0, #0
 4d0:	movt	r0, #0
 4d4:	bl	ce4 <ff_printf>
 4d8:	movw	r1, #0
 4dc:	movt	r1, #0
 4e0:	ldr	r2, [r1]
 4e4:	add	r2, r2, #1
 4e8:	str	r2, [r1]
 4ec:	ldr	r1, [fp, #-12]
 4f0:	str	r0, [sp, #48]	; 0x30
 4f4:	mov	r0, r1
 4f8:	movw	r1, #1
 4fc:	bl	134 <print_data>
 500:	movw	r0, #0
 504:	movt	r0, #0
 508:	ldr	r1, [r0]
 50c:	mvn	r2, #0
 510:	add	r1, r1, r2
 514:	str	r1, [r0]
 518:	ldr	r0, [fp, #-40]	; 0xffffffd8
 51c:	ldr	r1, [fp, #-28]	; 0xffffffe4
 520:	sub	r1, r1, #1
 524:	cmp	r0, r1
 528:	bge	54c <print_data+0x418>
 52c:	ldr	r0, [fp, #-12]
 530:	bl	0 <coda_cursor_goto_next_record_field>
 534:	cmp	r0, #0
 538:	beq	548 <print_data+0x414>
 53c:	movw	r0, #0
 540:	movt	r0, #0
 544:	blx	r0
 548:	b	54c <print_data+0x418>
 54c:	b	550 <print_data+0x41c>
 550:	ldr	r0, [fp, #-40]	; 0xffffffd8
 554:	add	r0, r0, #1
 558:	str	r0, [fp, #-40]	; 0xffffffd8
 55c:	b	434 <print_data+0x300>
 560:	ldr	r0, [fp, #-12]
 564:	bl	0 <coda_cursor_goto_parent>
 568:	b	578 <print_data+0x444>
 56c:	movw	r0, #0
 570:	movt	r0, #0
 574:	bl	ce4 <ff_printf>
 578:	b	cb8 <print_data+0xb84>
 57c:	sub	r2, fp, #88	; 0x58
 580:	ldr	r0, [fp, #-12]
 584:	sub	r1, fp, #92	; 0x5c
 588:	bl	0 <coda_cursor_get_array_dim>
 58c:	cmp	r0, #0
 590:	beq	5a0 <print_data+0x46c>
 594:	movw	r0, #0
 598:	movt	r0, #0
 59c:	blx	r0
 5a0:	ldr	r0, [fp, #-92]	; 0xffffffa4
 5a4:	cmp	r0, #0
 5a8:	blt	6fc <print_data+0x5c8>
 5ac:	movw	r0, #1
 5b0:	str	r0, [fp, #-96]	; 0xffffffa0
 5b4:	movw	r0, #0
 5b8:	str	r0, [fp, #-100]	; 0xffffff9c
 5bc:	ldr	r0, [fp, #-100]	; 0xffffff9c
 5c0:	ldr	r1, [fp, #-92]	; 0xffffffa4
 5c4:	cmp	r0, r1
 5c8:	bge	5f8 <print_data+0x4c4>
 5cc:	ldr	r0, [fp, #-100]	; 0xffffff9c
 5d0:	sub	r1, fp, #88	; 0x58
 5d4:	add	r0, r1, r0, lsl #2
 5d8:	ldr	r0, [r0]
 5dc:	ldr	r1, [fp, #-96]	; 0xffffffa0
 5e0:	mul	r0, r1, r0
 5e4:	str	r0, [fp, #-96]	; 0xffffffa0
 5e8:	ldr	r0, [fp, #-100]	; 0xffffff9c
 5ec:	add	r0, r0, #1
 5f0:	str	r0, [fp, #-100]	; 0xffffff9c
 5f4:	b	5bc <print_data+0x488>
 5f8:	ldr	r0, [fp, #-96]	; 0xffffffa0
 5fc:	cmp	r0, #0
 600:	ble	6ec <print_data+0x5b8>
 604:	movw	r0, #0
 608:	movt	r0, #0
 60c:	bl	ce4 <ff_printf>
 610:	ldr	r1, [fp, #-12]
 614:	str	r0, [sp, #44]	; 0x2c
 618:	mov	r0, r1
 61c:	bl	0 <coda_cursor_goto_first_array_element>
 620:	cmp	r0, #0
 624:	beq	634 <print_data+0x500>
 628:	movw	r0, #0
 62c:	movt	r0, #0
 630:	blx	r0
 634:	movw	r0, #0
 638:	str	r0, [fp, #-100]	; 0xffffff9c
 63c:	ldr	r0, [fp, #-100]	; 0xffffff9c
 640:	ldr	r1, [fp, #-96]	; 0xffffffa0
 644:	cmp	r0, r1
 648:	bge	6e0 <print_data+0x5ac>
 64c:	movw	r0, #0
 650:	movt	r0, #0
 654:	bl	ddc <fi_printf>
 658:	movw	r1, #0
 65c:	movt	r1, #0
 660:	ldr	r2, [r1]
 664:	add	r2, r2, #1
 668:	str	r2, [r1]
 66c:	ldr	r1, [fp, #-12]
 670:	str	r0, [sp, #40]	; 0x28
 674:	mov	r0, r1
 678:	movw	r1, #0
 67c:	bl	134 <print_data>
 680:	movw	r0, #0
 684:	movt	r0, #0
 688:	ldr	r1, [r0]
 68c:	mvn	r2, #0
 690:	add	r1, r1, r2
 694:	str	r1, [r0]
 698:	ldr	r0, [fp, #-100]	; 0xffffff9c
 69c:	ldr	r1, [fp, #-96]	; 0xffffffa0
 6a0:	sub	r1, r1, #1
 6a4:	cmp	r0, r1
 6a8:	bge	6cc <print_data+0x598>
 6ac:	ldr	r0, [fp, #-12]
 6b0:	bl	0 <coda_cursor_goto_next_array_element>
 6b4:	cmp	r0, #0
 6b8:	beq	6c8 <print_data+0x594>
 6bc:	movw	r0, #0
 6c0:	movt	r0, #0
 6c4:	blx	r0
 6c8:	b	6cc <print_data+0x598>
 6cc:	b	6d0 <print_data+0x59c>
 6d0:	ldr	r0, [fp, #-100]	; 0xffffff9c
 6d4:	add	r0, r0, #1
 6d8:	str	r0, [fp, #-100]	; 0xffffff9c
 6dc:	b	63c <print_data+0x508>
 6e0:	ldr	r0, [fp, #-12]
 6e4:	bl	0 <coda_cursor_goto_parent>
 6e8:	b	6f8 <print_data+0x5c4>
 6ec:	movw	r0, #0
 6f0:	movt	r0, #0
 6f4:	bl	ce4 <ff_printf>
 6f8:	b	708 <print_data+0x5d4>
 6fc:	movw	r0, #0
 700:	movt	r0, #0
 704:	bl	ce4 <ff_printf>
 708:	b	cb8 <print_data+0xb84>
 70c:	ldr	r0, [fp, #-12]
 710:	sub	r1, fp, #104	; 0x68
 714:	bl	0 <coda_cursor_get_read_type>
 718:	cmp	r0, #0
 71c:	beq	72c <print_data+0x5f8>
 720:	movw	r0, #0
 724:	movt	r0, #0
 728:	blx	r0
 72c:	ldr	r0, [fp, #-104]	; 0xffffff98
 730:	add	r0, r0, #1
 734:	cmp	r0, #13
 738:	str	r0, [sp, #36]	; 0x24
 73c:	bhi	b3c <print_data+0xa08>
 740:	add	r0, pc, #8
 744:	ldr	r1, [sp, #36]	; 0x24
 748:	ldr	r0, [r0, r1, lsl #2]
 74c:	mov	pc, r0
 750:	.word	0x00000b30
 754:	.word	0x000009e4
 758:	.word	0x00000a18
 75c:	.word	0x000009e4
 760:	.word	0x00000a18
 764:	.word	0x000009e4
 768:	.word	0x00000a18
 76c:	.word	0x00000a4c
 770:	.word	0x00000a90
 774:	.word	0x00000ad4
 778:	.word	0x00000ad4
 77c:	.word	0x00000788
 780:	.word	0x000007d8
 784:	.word	0x000008bc
 788:	ldr	r0, [fp, #-12]
 78c:	sub	r1, fp, #105	; 0x69
 790:	bl	0 <coda_cursor_read_char>
 794:	cmp	r0, #0
 798:	beq	7a8 <print_data+0x674>
 79c:	movw	r0, #0
 7a0:	movt	r0, #0
 7a4:	blx	r0
 7a8:	movw	r0, #0
 7ac:	movt	r0, #0
 7b0:	bl	ce4 <ff_printf>
 7b4:	sub	r1, fp, #105	; 0x69
 7b8:	str	r0, [sp, #32]
 7bc:	mov	r0, r1
 7c0:	movw	r1, #1
 7c4:	bl	e44 <print_escaped>
 7c8:	movw	r0, #0
 7cc:	movt	r0, #0
 7d0:	bl	ce4 <ff_printf>
 7d4:	b	b3c <print_data+0xa08>
 7d8:	ldr	r0, [fp, #-12]
 7dc:	sub	r1, fp, #112	; 0x70
 7e0:	bl	0 <coda_cursor_get_string_length>
 7e4:	cmp	r0, #0
 7e8:	beq	7f8 <print_data+0x6c4>
 7ec:	movw	r0, #0
 7f0:	movt	r0, #0
 7f4:	blx	r0
 7f8:	ldr	r0, [fp, #-112]	; 0xffffff90
 7fc:	add	r0, r0, #1
 800:	bl	0 <malloc>
 804:	str	r0, [fp, #-116]	; 0xffffff8c
 808:	ldr	r0, [fp, #-116]	; 0xffffff8c
 80c:	movw	r1, #0
 810:	cmp	r0, r1
 814:	bne	84c <print_data+0x718>
 818:	ldr	r0, [fp, #-112]	; 0xffffff90
 81c:	add	r2, r0, #1
 820:	mvn	r0, #0
 824:	movw	r1, #0
 828:	movt	r1, #0
 82c:	movw	r3, #0
 830:	movt	r3, #0
 834:	movw	ip, #361	; 0x169
 838:	str	ip, [sp]
 83c:	bl	0 <coda_set_error>
 840:	movw	r0, #0
 844:	movt	r0, #0
 848:	blx	r0
 84c:	ldr	r0, [fp, #-12]
 850:	ldr	r1, [fp, #-116]	; 0xffffff8c
 854:	ldr	r2, [fp, #-112]	; 0xffffff90
 858:	add	r2, r2, #1
 85c:	bl	0 <coda_cursor_read_string>
 860:	cmp	r0, #0
 864:	beq	874 <print_data+0x740>
 868:	movw	r0, #0
 86c:	movt	r0, #0
 870:	blx	r0
 874:	movw	r0, #0
 878:	movt	r0, #0
 87c:	bl	ce4 <ff_printf>
 880:	ldr	r1, [fp, #-116]	; 0xffffff8c
 884:	ldr	r2, [fp, #-112]	; 0xffffff90
 888:	str	r0, [sp, #28]
 88c:	mov	r0, r1
 890:	mov	r1, r2
 894:	bl	e44 <print_escaped>
 898:	ldr	r1, [fp, #-112]	; 0xffffff90
 89c:	movw	r0, #0
 8a0:	movt	r0, #0
 8a4:	bl	ce4 <ff_printf>
 8a8:	ldr	r1, [fp, #-116]	; 0xffffff8c
 8ac:	str	r0, [sp, #24]
 8b0:	mov	r0, r1
 8b4:	bl	0 <free>
 8b8:	b	b3c <print_data+0xa08>
 8bc:	ldr	r0, [fp, #-12]
 8c0:	sub	r1, fp, #128	; 0x80
 8c4:	bl	0 <coda_cursor_get_bit_size>
 8c8:	cmp	r0, #0
 8cc:	beq	8dc <print_data+0x7a8>
 8d0:	movw	r0, #0
 8d4:	movt	r0, #0
 8d8:	blx	r0
 8dc:	ldr	r0, [fp, #-128]	; 0xffffff80
 8e0:	ldr	r1, [fp, #-124]	; 0xffffff84
 8e4:	lsr	r2, r0, #3
 8e8:	orr	r2, r2, r1, lsl #29
 8ec:	asr	r1, r1, #3
 8f0:	and	r0, r0, #7
 8f4:	adds	r3, r2, #1
 8f8:	adc	ip, r1, #0
 8fc:	cmp	r0, #0
 900:	movne	r2, r3
 904:	cmp	r0, #0
 908:	movne	r1, ip
 90c:	str	r2, [fp, #-136]	; 0xffffff78
 910:	str	r1, [fp, #-132]	; 0xffffff7c
 914:	ldr	r0, [fp, #-136]	; 0xffffff78
 918:	bl	0 <malloc>
 91c:	str	r0, [fp, #-140]	; 0xffffff74
 920:	ldr	r0, [fp, #-140]	; 0xffffff74
 924:	movw	r1, #0
 928:	cmp	r0, r1
 92c:	bne	960 <print_data+0x82c>
 930:	ldr	r2, [fp, #-136]	; 0xffffff78
 934:	mvn	r0, #0
 938:	movw	r1, #0
 93c:	movt	r1, #0
 940:	movw	r3, #0
 944:	movt	r3, #0
 948:	movw	ip, #392	; 0x188
 94c:	str	ip, [sp]
 950:	bl	0 <coda_set_error>
 954:	movw	r0, #0
 958:	movt	r0, #0
 95c:	blx	r0
 960:	ldr	r0, [fp, #-12]
 964:	ldr	r1, [fp, #-140]	; 0xffffff74
 968:	ldr	r2, [fp, #-128]	; 0xffffff80
 96c:	ldr	r3, [fp, #-124]	; 0xffffff84
 970:	mov	ip, sp
 974:	str	r3, [ip, #4]
 978:	str	r2, [ip]
 97c:	mov	r2, #0
 980:	str	r2, [sp, #20]
 984:	ldr	r3, [sp, #20]
 988:	bl	0 <coda_cursor_read_bits>
 98c:	cmp	r0, #0
 990:	beq	9a0 <print_data+0x86c>
 994:	movw	r0, #0
 998:	movt	r0, #0
 99c:	blx	r0
 9a0:	movw	r0, #0
 9a4:	movt	r0, #0
 9a8:	bl	ce4 <ff_printf>
 9ac:	ldr	r1, [fp, #-140]	; 0xffffff74
 9b0:	ldr	r2, [fp, #-136]	; 0xffffff78
 9b4:	str	r0, [sp, #16]
 9b8:	mov	r0, r1
 9bc:	mov	r1, r2
 9c0:	bl	e44 <print_escaped>
 9c4:	movw	r0, #0
 9c8:	movt	r0, #0
 9cc:	bl	ce4 <ff_printf>
 9d0:	ldr	r1, [fp, #-140]	; 0xffffff74
 9d4:	str	r0, [sp, #12]
 9d8:	mov	r0, r1
 9dc:	bl	0 <free>
 9e0:	b	b3c <print_data+0xa08>
 9e4:	ldr	r0, [fp, #-12]
 9e8:	sub	r1, fp, #144	; 0x90
 9ec:	bl	0 <coda_cursor_read_int32>
 9f0:	cmp	r0, #0
 9f4:	beq	a04 <print_data+0x8d0>
 9f8:	movw	r0, #0
 9fc:	movt	r0, #0
 a00:	blx	r0
 a04:	ldr	r1, [fp, #-144]	; 0xffffff70
 a08:	movw	r0, #0
 a0c:	movt	r0, #0
 a10:	bl	ce4 <ff_printf>
 a14:	b	b3c <print_data+0xa08>
 a18:	ldr	r0, [fp, #-12]
 a1c:	sub	r1, fp, #148	; 0x94
 a20:	bl	0 <coda_cursor_read_uint32>
 a24:	cmp	r0, #0
 a28:	beq	a38 <print_data+0x904>
 a2c:	movw	r0, #0
 a30:	movt	r0, #0
 a34:	blx	r0
 a38:	ldr	r1, [fp, #-148]	; 0xffffff6c
 a3c:	movw	r0, #0
 a40:	movt	r0, #0
 a44:	bl	ce4 <ff_printf>
 a48:	b	b3c <print_data+0xa08>
 a4c:	ldr	r0, [fp, #-12]
 a50:	sub	r1, fp, #160	; 0xa0
 a54:	bl	0 <coda_cursor_read_int64>
 a58:	cmp	r0, #0
 a5c:	beq	a6c <print_data+0x938>
 a60:	movw	r0, #0
 a64:	movt	r0, #0
 a68:	blx	r0
 a6c:	sub	r2, fp, #181	; 0xb5
 a70:	ldr	r0, [fp, #-160]	; 0xffffff60
 a74:	ldr	r1, [fp, #-156]	; 0xffffff64
 a78:	bl	0 <coda_str64>
 a7c:	sub	r1, fp, #181	; 0xb5
 a80:	movw	r0, #0
 a84:	movt	r0, #0
 a88:	bl	ce4 <ff_printf>
 a8c:	b	b3c <print_data+0xa08>
 a90:	ldr	r0, [fp, #-12]
 a94:	add	r1, sp, #176	; 0xb0
 a98:	bl	0 <coda_cursor_read_uint64>
 a9c:	cmp	r0, #0
 aa0:	beq	ab0 <print_data+0x97c>
 aa4:	movw	r0, #0
 aa8:	movt	r0, #0
 aac:	blx	r0
 ab0:	add	r2, sp, #155	; 0x9b
 ab4:	ldr	r0, [sp, #176]	; 0xb0
 ab8:	ldr	r1, [sp, #180]	; 0xb4
 abc:	bl	0 <coda_str64u>
 ac0:	add	r1, sp, #155	; 0x9b
 ac4:	movw	r0, #0
 ac8:	movt	r0, #0
 acc:	bl	ce4 <ff_printf>
 ad0:	b	b3c <print_data+0xa08>
 ad4:	ldr	r0, [fp, #-12]
 ad8:	add	r1, sp, #144	; 0x90
 adc:	bl	0 <coda_cursor_read_double>
 ae0:	cmp	r0, #0
 ae4:	beq	af4 <print_data+0x9c0>
 ae8:	movw	r0, #0
 aec:	movt	r0, #0
 af0:	blx	r0
 af4:	ldr	r0, [fp, #-104]	; 0xffffff98
 af8:	cmp	r0, #8
 afc:	bne	b18 <print_data+0x9e4>
 b00:	vldr	d16, [sp, #144]	; 0x90
 b04:	movw	r0, #0
 b08:	movt	r0, #0
 b0c:	vmov	r2, r3, d16
 b10:	bl	ce4 <ff_printf>
 b14:	b	b2c <print_data+0x9f8>
 b18:	vldr	d16, [sp, #144]	; 0x90
 b1c:	movw	r0, #0
 b20:	movt	r0, #0
 b24:	vmov	r2, r3, d16
 b28:	bl	ce4 <ff_printf>
 b2c:	b	b3c <print_data+0xa08>
 b30:	movw	r0, #0
 b34:	movt	r0, #0
 b38:	bl	ce4 <ff_printf>
 b3c:	b	cb8 <print_data+0xb84>
 b40:	ldr	r0, [fp, #-12]
 b44:	add	r1, sp, #140	; 0x8c
 b48:	bl	0 <coda_cursor_get_special_type>
 b4c:	cmp	r0, #0
 b50:	beq	b60 <print_data+0xa2c>
 b54:	movw	r0, #0
 b58:	movt	r0, #0
 b5c:	blx	r0
 b60:	ldr	r0, [sp, #140]	; 0x8c
 b64:	cmp	r0, #3
 b68:	str	r0, [sp, #8]
 b6c:	bhi	cb4 <print_data+0xb80>
 b70:	add	r0, pc, #8
 b74:	ldr	r1, [sp, #8]
 b78:	ldr	r0, [r0, r1, lsl #2]
 b7c:	mov	pc, r0
 b80:	.word	0x00000b90
 b84:	.word	0x00000ba0
 b88:	.word	0x00000bd8
 b8c:	.word	0x00000c74
 b90:	movw	r0, #0
 b94:	movt	r0, #0
 b98:	bl	ce4 <ff_printf>
 b9c:	b	cb4 <print_data+0xb80>
 ba0:	ldr	r0, [fp, #-12]
 ba4:	add	r1, sp, #128	; 0x80
 ba8:	bl	0 <coda_cursor_read_double>
 bac:	cmp	r0, #0
 bb0:	beq	bc0 <print_data+0xa8c>
 bb4:	movw	r0, #0
 bb8:	movt	r0, #0
 bbc:	blx	r0
 bc0:	vldr	d16, [sp, #128]	; 0x80
 bc4:	movw	r0, #0
 bc8:	movt	r0, #0
 bcc:	vmov	r2, r3, d16
 bd0:	bl	ce4 <ff_printf>
 bd4:	b	cb4 <print_data+0xb80>
 bd8:	ldr	r0, [fp, #-12]
 bdc:	add	r1, sp, #120	; 0x78
 be0:	bl	0 <coda_cursor_read_double>
 be4:	cmp	r0, #0
 be8:	beq	bf8 <print_data+0xac4>
 bec:	movw	r0, #0
 bf0:	movt	r0, #0
 bf4:	blx	r0
 bf8:	vldr	d0, [sp, #120]	; 0x78
 bfc:	bl	0 <coda_isNaN>
 c00:	cmp	r0, #0
 c04:	bne	c18 <print_data+0xae4>
 c08:	vldr	d0, [sp, #120]	; 0x78
 c0c:	bl	0 <coda_isInf>
 c10:	cmp	r0, #0
 c14:	beq	c30 <print_data+0xafc>
 c18:	vldr	d16, [sp, #120]	; 0x78
 c1c:	movw	r0, #0
 c20:	movt	r0, #0
 c24:	vmov	r2, r3, d16
 c28:	bl	ce4 <ff_printf>
 c2c:	b	c70 <print_data+0xb3c>
 c30:	add	r1, sp, #93	; 0x5d
 c34:	vldr	d0, [sp, #120]	; 0x78
 c38:	movw	r0, #0
 c3c:	movt	r0, #0
 c40:	bl	0 <coda_time_double_to_string>
 c44:	cmp	r0, #0
 c48:	beq	c5c <print_data+0xb28>
 c4c:	movw	r0, #0
 c50:	movt	r0, #0
 c54:	bl	ce4 <ff_printf>
 c58:	b	c6c <print_data+0xb38>
 c5c:	add	r1, sp, #93	; 0x5d
 c60:	movw	r0, #0
 c64:	movt	r0, #0
 c68:	bl	ce4 <ff_printf>
 c6c:	b	c70 <print_data+0xb3c>
 c70:	b	cb4 <print_data+0xb80>
 c74:	ldr	r0, [fp, #-12]
 c78:	add	r1, sp, #80	; 0x50
 c7c:	add	r2, sp, #72	; 0x48
 c80:	bl	0 <coda_cursor_read_complex_double_split>
 c84:	cmp	r0, #0
 c88:	beq	c98 <print_data+0xb64>
 c8c:	movw	r0, #0
 c90:	movt	r0, #0
 c94:	blx	r0
 c98:	vldr	d16, [sp, #80]	; 0x50
 c9c:	vldr	d17, [sp, #72]	; 0x48
 ca0:	movw	r0, #0
 ca4:	movt	r0, #0
 ca8:	vmov	r2, r3, d16
 cac:	vstr	d17, [sp]
 cb0:	bl	ce4 <ff_printf>
 cb4:	b	cb8 <print_data+0xb84>
 cb8:	ldr	r0, [fp, #-24]	; 0xffffffe8
 cbc:	cmp	r0, #0
 cc0:	beq	cdc <print_data+0xba8>
 cc4:	movw	r0, #0
 cc8:	movt	r0, #0
 ccc:	ldr	r1, [r0]
 cd0:	mvn	r2, #0
 cd4:	add	r1, r1, r2
 cd8:	str	r1, [r0]
 cdc:	sub	sp, fp, #8
 ce0:	pop	{r4, r5, fp, pc}

00000ce4 <ff_printf>:
 ce4:	sub	sp, sp, #12
 ce8:	push	{fp, lr}
 cec:	mov	fp, sp
 cf0:	sub	sp, sp, #20
 cf4:	str	r3, [fp, #16]
 cf8:	str	r2, [fp, #12]
 cfc:	str	r1, [fp, #8]
 d00:	str	r0, [fp, #-4]
 d04:	add	r0, fp, #8
 d08:	str	r0, [sp, #8]
 d0c:	movw	r0, #0
 d10:	movt	r0, #0
 d14:	ldr	r0, [r0]
 d18:	ldr	r1, [fp, #-4]
 d1c:	ldr	r2, [sp, #8]
 d20:	bl	0 <vfprintf>
 d24:	str	r0, [fp, #-8]
 d28:	add	r0, sp, #8
 d2c:	ldr	r1, [fp, #-8]
 d30:	str	r0, [sp, #4]
 d34:	mov	r0, r1
 d38:	mov	sp, fp
 d3c:	pop	{fp, lr}
 d40:	add	sp, sp, #12
 d44:	bx	lr

00000d48 <indent>:
 d48:	push	{fp, lr}
 d4c:	mov	fp, sp
 d50:	sub	sp, sp, #8
 d54:	movw	r0, #0
 d58:	movt	r0, #0
 d5c:	ldr	r0, [r0]
 d60:	cmp	r0, #0
 d64:	blt	d6c <indent+0x24>
 d68:	b	d8c <indent+0x44>
 d6c:	movw	r0, #0
 d70:	movt	r0, #0
 d74:	movw	r1, #0
 d78:	movt	r1, #0
 d7c:	movw	r2, #44	; 0x2c
 d80:	movw	r3, #0
 d84:	movt	r3, #0
 d88:	bl	0 <__assert_fail>
 d8c:	movw	r0, #0
 d90:	movt	r0, #0
 d94:	ldr	r0, [r0]
 d98:	str	r0, [sp, #4]
 d9c:	ldr	r0, [sp, #4]
 da0:	cmp	r0, #0
 da4:	ble	dd4 <indent+0x8c>
 da8:	movw	r0, #0
 dac:	movt	r0, #0
 db0:	ldr	r0, [r0]
 db4:	movw	r1, #0
 db8:	movt	r1, #0
 dbc:	bl	0 <fprintf>
 dc0:	ldr	r0, [sp, #4]
 dc4:	mvn	r1, #0
 dc8:	add	r0, r0, r1
 dcc:	str	r0, [sp, #4]
 dd0:	b	d9c <indent+0x54>
 dd4:	mov	sp, fp
 dd8:	pop	{fp, pc}

00000ddc <fi_printf>:
 ddc:	sub	sp, sp, #12
 de0:	push	{fp, lr}
 de4:	mov	fp, sp
 de8:	sub	sp, sp, #20
 dec:	str	r3, [fp, #16]
 df0:	str	r2, [fp, #12]
 df4:	str	r1, [fp, #8]
 df8:	str	r0, [fp, #-4]
 dfc:	bl	d48 <indent>
 e00:	add	r0, fp, #8
 e04:	str	r0, [sp, #8]
 e08:	movw	r0, #0
 e0c:	movt	r0, #0
 e10:	ldr	r0, [r0]
 e14:	ldr	r1, [fp, #-4]
 e18:	ldr	r2, [sp, #8]
 e1c:	bl	0 <vfprintf>
 e20:	str	r0, [fp, #-8]
 e24:	add	r0, sp, #8
 e28:	ldr	r1, [fp, #-8]
 e2c:	str	r0, [sp, #4]
 e30:	mov	r0, r1
 e34:	mov	sp, fp
 e38:	pop	{fp, lr}
 e3c:	add	sp, sp, #12
 e40:	bx	lr

00000e44 <print_escaped>:
 e44:	push	{fp, lr}
 e48:	mov	fp, sp
 e4c:	sub	sp, sp, #24
 e50:	str	r0, [fp, #-4]
 e54:	str	r1, [fp, #-8]
 e58:	movw	r0, #0
 e5c:	str	r0, [sp, #12]
 e60:	ldr	r0, [sp, #12]
 e64:	ldr	r1, [fp, #-8]
 e68:	cmp	r0, r1
 e6c:	bge	fbc <print_escaped+0x178>
 e70:	ldr	r0, [fp, #-4]
 e74:	ldr	r1, [sp, #12]
 e78:	ldrb	r0, [r0, r1]
 e7c:	strb	r0, [sp, #11]
 e80:	ldrb	r0, [sp, #11]
 e84:	mov	r1, r0
 e88:	cmp	r0, #8
 e8c:	str	r1, [sp, #4]
 e90:	beq	ef8 <print_escaped+0xb4>
 e94:	b	e98 <print_escaped+0x54>
 e98:	ldr	r0, [sp, #4]
 e9c:	cmp	r0, #9
 ea0:	beq	f38 <print_escaped+0xf4>
 ea4:	b	ea8 <print_escaped+0x64>
 ea8:	ldr	r0, [sp, #4]
 eac:	cmp	r0, #10
 eb0:	beq	f18 <print_escaped+0xd4>
 eb4:	b	eb8 <print_escaped+0x74>
 eb8:	ldr	r0, [sp, #4]
 ebc:	cmp	r0, #12
 ec0:	beq	f08 <print_escaped+0xc4>
 ec4:	b	ec8 <print_escaped+0x84>
 ec8:	ldr	r0, [sp, #4]
 ecc:	cmp	r0, #13
 ed0:	beq	f28 <print_escaped+0xe4>
 ed4:	b	ed8 <print_escaped+0x94>
 ed8:	ldr	r0, [sp, #4]
 edc:	cmp	r0, #34	; 0x22
 ee0:	beq	f48 <print_escaped+0x104>
 ee4:	b	ee8 <print_escaped+0xa4>
 ee8:	ldr	r0, [sp, #4]
 eec:	cmp	r0, #92	; 0x5c
 ef0:	beq	f58 <print_escaped+0x114>
 ef4:	b	f68 <print_escaped+0x124>
 ef8:	movw	r0, #0
 efc:	movt	r0, #0
 f00:	bl	ce4 <ff_printf>
 f04:	b	fa8 <print_escaped+0x164>
 f08:	movw	r0, #0
 f0c:	movt	r0, #0
 f10:	bl	ce4 <ff_printf>
 f14:	b	fa8 <print_escaped+0x164>
 f18:	movw	r0, #0
 f1c:	movt	r0, #0
 f20:	bl	ce4 <ff_printf>
 f24:	b	fa8 <print_escaped+0x164>
 f28:	movw	r0, #0
 f2c:	movt	r0, #0
 f30:	bl	ce4 <ff_printf>
 f34:	b	fa8 <print_escaped+0x164>
 f38:	movw	r0, #0
 f3c:	movt	r0, #0
 f40:	bl	ce4 <ff_printf>
 f44:	b	fa8 <print_escaped+0x164>
 f48:	movw	r0, #0
 f4c:	movt	r0, #0
 f50:	bl	ce4 <ff_printf>
 f54:	b	fa8 <print_escaped+0x164>
 f58:	movw	r0, #0
 f5c:	movt	r0, #0
 f60:	bl	ce4 <ff_printf>
 f64:	b	fa8 <print_escaped+0x164>
 f68:	ldrb	r0, [sp, #11]
 f6c:	cmp	r0, #32
 f70:	blt	f94 <print_escaped+0x150>
 f74:	ldrb	r0, [sp, #11]
 f78:	cmp	r0, #126	; 0x7e
 f7c:	bgt	f94 <print_escaped+0x150>
 f80:	ldrb	r1, [sp, #11]
 f84:	movw	r0, #0
 f88:	movt	r0, #0
 f8c:	bl	ce4 <ff_printf>
 f90:	b	fa4 <print_escaped+0x160>
 f94:	ldrb	r1, [sp, #11]
 f98:	movw	r0, #0
 f9c:	movt	r0, #0
 fa0:	bl	ce4 <ff_printf>
 fa4:	b	fa8 <print_escaped+0x164>
 fa8:	b	fac <print_escaped+0x168>
 fac:	ldr	r0, [sp, #12]
 fb0:	add	r0, r0, #1
 fb4:	str	r0, [sp, #12]
 fb8:	b	e60 <print_escaped+0x1c>
 fbc:	mov	sp, fp
 fc0:	pop	{fp, pc}
