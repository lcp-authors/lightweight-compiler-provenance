
../compcert-repos/stcorp-coda-3a25f25/CMakeFiles/coda_static.dir/libcoda/coda-utils.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <coda_format_from_string>:
   0:	strd	r4, [sp, #-16]!
   4:	mov	r5, r1
   8:	movw	r1, #0
   c:	movt	r1, #0
  10:	mov	r4, r0
  14:	str	r6, [sp, #8]
  18:	str	lr, [sp, #12]
  1c:	bl	0 <strcmp>
  20:	cmp	r0, #0
  24:	streq	r0, [r5]
  28:	beq	14c <coda_format_from_string+0x14c>
  2c:	movw	r1, #0
  30:	movt	r1, #0
  34:	mov	r0, r4
  38:	bl	0 <strcmp>
  3c:	cmp	r0, #0
  40:	moveq	r3, #1
  44:	streq	r3, [r5]
  48:	beq	14c <coda_format_from_string+0x14c>
  4c:	movw	r1, #0
  50:	movt	r1, #0
  54:	mov	r0, r4
  58:	bl	0 <strcmp>
  5c:	cmp	r0, #0
  60:	moveq	r3, #2
  64:	streq	r3, [r5]
  68:	beq	14c <coda_format_from_string+0x14c>
  6c:	movw	r1, #0
  70:	movt	r1, #0
  74:	mov	r0, r4
  78:	bl	0 <strcmp>
  7c:	cmp	r0, #0
  80:	moveq	r3, #3
  84:	streq	r3, [r5]
  88:	beq	14c <coda_format_from_string+0x14c>
  8c:	movw	r1, #0
  90:	movt	r1, #0
  94:	mov	r0, r4
  98:	bl	0 <strcmp>
  9c:	cmp	r0, #0
  a0:	moveq	r3, #4
  a4:	streq	r3, [r5]
  a8:	beq	14c <coda_format_from_string+0x14c>
  ac:	movw	r1, #0
  b0:	movt	r1, #0
  b4:	mov	r0, r4
  b8:	bl	0 <strcmp>
  bc:	cmp	r0, #0
  c0:	moveq	r3, #5
  c4:	streq	r3, [r5]
  c8:	beq	14c <coda_format_from_string+0x14c>
  cc:	movw	r1, #0
  d0:	movt	r1, #0
  d4:	mov	r0, r4
  d8:	bl	0 <strcmp>
  dc:	cmp	r0, #0
  e0:	moveq	r3, #6
  e4:	streq	r3, [r5]
  e8:	beq	14c <coda_format_from_string+0x14c>
  ec:	movw	r1, #0
  f0:	movt	r1, #0
  f4:	mov	r0, r4
  f8:	bl	0 <strcmp>
  fc:	cmp	r0, #0
 100:	moveq	r3, #7
 104:	streq	r3, [r5]
 108:	beq	14c <coda_format_from_string+0x14c>
 10c:	movw	r1, #0
 110:	movt	r1, #0
 114:	mov	r0, r4
 118:	bl	0 <strcmp>
 11c:	cmp	r0, #0
 120:	moveq	r3, #8
 124:	streq	r3, [r5]
 128:	beq	14c <coda_format_from_string+0x14c>
 12c:	movw	r1, #0
 130:	movt	r1, #0
 134:	mov	r0, r4
 138:	bl	0 <strcmp>
 13c:	cmp	r0, #0
 140:	bne	15c <coda_format_from_string+0x15c>
 144:	mov	r3, #9
 148:	str	r3, [r5]
 14c:	ldrd	r4, [sp]
 150:	ldr	r6, [sp, #8]
 154:	add	sp, sp, #12
 158:	pop	{pc}		; (ldr pc, [sp], #4)
 15c:	mov	r2, r4
 160:	movw	r1, #0
 164:	movt	r1, #0
 168:	movw	r0, #65136	; 0xfe70
 16c:	movt	r0, #65535	; 0xffff
 170:	bl	0 <coda_set_error>
 174:	mvn	r0, #0
 178:	b	14c <coda_format_from_string+0x14c>

0000017c <coda_element_name_from_xml_name>:
 17c:	ldrb	r3, [r0]
 180:	mov	r2, r0
 184:	tst	r3, #223	; 0xdf
 188:	beq	198 <coda_element_name_from_xml_name+0x1c>
 18c:	ldrb	r3, [r2, #1]!
 190:	tst	r3, #223	; 0xdf
 194:	bne	18c <coda_element_name_from_xml_name+0x10>
 198:	cmp	r3, #0
 19c:	addne	r0, r2, #1
 1a0:	bx	lr

000001a4 <coda_is_identifier>:
 1a4:	str	r4, [sp, #-8]!
 1a8:	subs	r4, r0, #0
 1ac:	str	lr, [sp, #4]
 1b0:	beq	238 <coda_is_identifier+0x94>
 1b4:	bl	0 <__ctype_b_loc>
 1b8:	ldrb	r3, [r4]
 1bc:	ldr	r1, [r0]
 1c0:	lsl	r3, r3, #1
 1c4:	ldrh	r0, [r1, r3]
 1c8:	ands	r0, r0, #1024	; 0x400
 1cc:	beq	22c <coda_is_identifier+0x88>
 1d0:	ldrb	r3, [r4, #1]
 1d4:	cmp	r3, #0
 1d8:	beq	228 <coda_is_identifier+0x84>
 1dc:	lsl	r2, r3, #1
 1e0:	subs	r3, r3, #95	; 0x5f
 1e4:	movne	r3, #1
 1e8:	ldrh	r2, [r1, r2]
 1ec:	eor	r2, r2, #8
 1f0:	ands	r3, r3, r2, lsr #3
 1f4:	bne	238 <coda_is_identifier+0x94>
 1f8:	add	r0, r4, #1
 1fc:	b	218 <coda_is_identifier+0x74>
 200:	ldrh	r2, [r1, r2]
 204:	subs	r3, r3, #95	; 0x5f
 208:	movne	r3, #1
 20c:	eor	r2, r2, #8
 210:	ands	r3, r3, r2, lsr #3
 214:	bne	238 <coda_is_identifier+0x94>
 218:	ldrb	r3, [r0, #1]!
 21c:	cmp	r3, #0
 220:	lsl	r2, r3, #1
 224:	bne	200 <coda_is_identifier+0x5c>
 228:	mov	r0, #1
 22c:	ldr	r4, [sp]
 230:	add	sp, sp, #4
 234:	pop	{pc}		; (ldr pc, [sp], #4)
 238:	ldr	r4, [sp]
 23c:	add	sp, sp, #4
 240:	mov	r0, #0
 244:	pop	{pc}		; (ldr pc, [sp], #4)

00000248 <coda_identifier_from_name>:
 248:	strd	r4, [sp, #-28]!	; 0xffffffe4
 24c:	subs	r4, r0, #0
 250:	strd	r6, [sp, #8]
 254:	mov	r6, r1
 258:	strd	r8, [sp, #16]
 25c:	str	lr, [sp, #24]
 260:	sub	sp, sp, #12
 264:	beq	33c <coda_identifier_from_name+0xf4>
 268:	ldrb	r5, [r4]
 26c:	cmp	r5, #0
 270:	beq	33c <coda_identifier_from_name+0xf4>
 274:	bl	0 <__ctype_b_loc>
 278:	ldr	r7, [r0]
 27c:	b	28c <coda_identifier_from_name+0x44>
 280:	ldrb	r5, [r4, #1]!
 284:	cmp	r5, #0
 288:	beq	33c <coda_identifier_from_name+0xf4>
 28c:	lsl	r5, r5, #1
 290:	ldrh	r3, [r7, r5]
 294:	tst	r3, #1024	; 0x400
 298:	beq	280 <coda_identifier_from_name+0x38>
 29c:	mov	r0, r4
 2a0:	bl	0 <strlen>
 2a4:	mov	r8, r0
 2a8:	add	r0, r0, #5
 2ac:	bl	0 <malloc>
 2b0:	subs	r5, r0, #0
 2b4:	mov	r9, r8
 2b8:	addeq	r2, r8, #4
 2bc:	beq	3c0 <coda_identifier_from_name+0x178>
 2c0:	ldrb	r3, [r4]
 2c4:	cmp	r8, #1
 2c8:	strb	r3, [r5]
 2cc:	bhi	36c <coda_identifier_from_name+0x124>
 2d0:	mov	r4, #0
 2d4:	add	r9, r5, r8
 2d8:	cmp	r6, r4
 2dc:	movwne	r7, #0
 2e0:	strb	r4, [r5, r8]
 2e4:	movtne	r7, #0
 2e8:	bne	30c <coda_identifier_from_name+0xc4>
 2ec:	b	320 <coda_identifier_from_name+0xd8>
 2f0:	add	r4, r4, #1
 2f4:	cmp	r4, #1000	; 0x3e8
 2f8:	beq	39c <coda_identifier_from_name+0x154>
 2fc:	mov	r2, r4
 300:	mov	r1, r7
 304:	mov	r0, r9
 308:	bl	0 <sprintf>
 30c:	mov	r1, r5
 310:	mov	r0, r6
 314:	bl	0 <coda_hashtable_get_index_from_name>
 318:	cmp	r0, #0
 31c:	bge	2f0 <coda_identifier_from_name+0xa8>
 320:	mov	r0, r5
 324:	add	sp, sp, #12
 328:	ldrd	r4, [sp]
 32c:	ldrd	r6, [sp, #8]
 330:	ldrd	r8, [sp, #16]
 334:	add	sp, sp, #24
 338:	pop	{pc}		; (ldr pc, [sp], #4)
 33c:	mov	r0, #12
 340:	bl	0 <malloc>
 344:	subs	r5, r0, #0
 348:	beq	3bc <coda_identifier_from_name+0x174>
 34c:	mov	r3, #117	; 0x75
 350:	mov	r9, #7
 354:	movw	r4, #0
 358:	movt	r4, #0
 35c:	strb	r3, [r5]
 360:	mov	r8, r9
 364:	bl	0 <__ctype_b_loc>
 368:	ldr	r7, [r0]
 36c:	mov	r3, #1
 370:	mov	r0, #95	; 0x5f
 374:	ldrb	r2, [r4, #1]!
 378:	lsl	r1, r2, #1
 37c:	ldrh	r1, [r7, r1]
 380:	tst	r1, #8
 384:	strbne	r2, [r5, r3]
 388:	strbeq	r0, [r5, r3]
 38c:	add	r3, r3, #1
 390:	cmp	r3, r9
 394:	blt	374 <coda_identifier_from_name+0x12c>
 398:	b	2d0 <coda_identifier_from_name+0x88>
 39c:	movw	r3, #0
 3a0:	movt	r3, #0
 3a4:	movw	r1, #0
 3a8:	movt	r1, #0
 3ac:	movw	r0, #0
 3b0:	movt	r0, #0
 3b4:	mov	r2, #203	; 0xcb
 3b8:	bl	0 <__assert_fail>
 3bc:	mov	r2, #11
 3c0:	mov	r0, #172	; 0xac
 3c4:	movw	r3, #0
 3c8:	movt	r3, #0
 3cc:	movw	r1, #0
 3d0:	movt	r1, #0
 3d4:	str	r0, [sp]
 3d8:	mvn	r0, #0
 3dc:	mov	r5, #0
 3e0:	bl	0 <coda_set_error>
 3e4:	b	320 <coda_identifier_from_name+0xd8>

000003e8 <coda_c_index_to_fortran_index>:
 3e8:	cmp	r0, #8
 3ec:	strd	r4, [sp, #-12]!
 3f0:	str	lr, [sp, #8]
 3f4:	sub	sp, sp, #36	; 0x24
 3f8:	bgt	48c <coda_c_index_to_fortran_index+0xa4>
 3fc:	cmp	r0, #0
 400:	ble	478 <coda_c_index_to_fortran_index+0x90>
 404:	lsl	r5, r0, #2
 408:	add	r3, sp, #32
 40c:	add	r4, r3, r5
 410:	add	r3, r1, r5
 414:	sub	r4, r4, #36	; 0x24
 418:	ldr	ip, [r3, #-4]!
 41c:	sdiv	lr, r2, ip
 420:	cmp	r3, r1
 424:	mls	ip, ip, lr, r2
 428:	mov	r2, lr
 42c:	str	ip, [r4], #-4
 430:	bne	418 <coda_c_index_to_fortran_index+0x30>
 434:	cmp	r0, #0
 438:	ble	478 <coda_c_index_to_fortran_index+0x90>
 43c:	sub	r3, r3, #4
 440:	sub	r1, sp, #4
 444:	add	r4, r5, r3
 448:	mov	r2, #1
 44c:	mov	r0, #0
 450:	ldr	ip, [r3, #4]!
 454:	ldr	lr, [r1, #4]!
 458:	cmp	r4, r3
 45c:	mla	r0, lr, r2, r0
 460:	mul	r2, ip, r2
 464:	bne	450 <coda_c_index_to_fortran_index+0x68>
 468:	add	sp, sp, #36	; 0x24
 46c:	ldrd	r4, [sp]
 470:	add	sp, sp, #8
 474:	pop	{pc}		; (ldr pc, [sp], #4)
 478:	mov	r0, #0
 47c:	add	sp, sp, #36	; 0x24
 480:	ldrd	r4, [sp]
 484:	add	sp, sp, #8
 488:	pop	{pc}		; (ldr pc, [sp], #4)
 48c:	mov	r2, r0
 490:	movw	r1, #0
 494:	movt	r1, #0
 498:	mvn	r0, #99	; 0x63
 49c:	mov	r3, #8
 4a0:	bl	0 <coda_set_error>
 4a4:	mvn	r0, #0
 4a8:	b	468 <coda_c_index_to_fortran_index+0x80>

000004ac <coda_path_find_file>:
 4ac:	strd	r4, [sp, #-36]!	; 0xffffffdc
 4b0:	subs	r4, r0, #0
 4b4:	strd	r6, [sp, #8]
 4b8:	strd	r8, [sp, #16]
 4bc:	strd	sl, [sp, #24]
 4c0:	str	lr, [sp, #32]
 4c4:	sub	sp, sp, #108	; 0x6c
 4c8:	beq	4d8 <coda_path_find_file+0x2c>
 4cc:	ldrb	r3, [r4]
 4d0:	cmp	r3, #0
 4d4:	bne	504 <coda_path_find_file+0x58>
 4d8:	mov	r1, #0
 4dc:	mov	r3, r1
 4e0:	str	r1, [r2]
 4e4:	mov	r0, r3
 4e8:	add	sp, sp, #108	; 0x6c
 4ec:	ldrd	r4, [sp]
 4f0:	ldrd	r6, [sp, #8]
 4f4:	ldrd	r8, [sp, #16]
 4f8:	ldrd	sl, [sp, #24]
 4fc:	add	sp, sp, #32
 500:	pop	{pc}		; (ldr pc, [sp], #4)
 504:	mov	r0, r1
 508:	mov	r7, r1
 50c:	str	r2, [sp, #8]
 510:	bl	0 <strlen>
 514:	mov	r9, r0
 518:	mov	r0, r4
 51c:	bl	0 <strdup>
 520:	subs	r3, r0, #0
 524:	str	r3, [sp, #4]
 528:	beq	678 <coda_path_find_file+0x1cc>
 52c:	ldr	fp, [sp, #4]
 530:	ldrb	r3, [fp]
 534:	cmp	r3, #0
 538:	beq	5f0 <coda_path_find_file+0x144>
 53c:	mov	r6, #0
 540:	movw	r8, #0
 544:	movt	r8, #0
 548:	mov	r5, r6
 54c:	cmp	r3, #58	; 0x3a
 550:	mov	r4, fp
 554:	beq	60c <coda_path_find_file+0x160>
 558:	ldrb	r3, [r4, #1]!
 55c:	cmp	r3, #0
 560:	cmpne	r3, #58	; 0x3a
 564:	bne	558 <coda_path_find_file+0xac>
 568:	cmp	r3, #0
 56c:	bne	60c <coda_path_find_file+0x160>
 570:	mov	r0, fp
 574:	bl	0 <strlen>
 578:	add	sl, r9, r0
 57c:	cmp	sl, r6
 580:	blt	5a0 <coda_path_find_file+0xf4>
 584:	add	r1, sl, #2
 588:	mov	r0, r5
 58c:	bl	0 <realloc>
 590:	cmp	r0, #0
 594:	beq	638 <coda_path_find_file+0x18c>
 598:	add	r6, sl, #1
 59c:	mov	r5, r0
 5a0:	mov	r2, fp
 5a4:	mov	r3, r7
 5a8:	mov	r1, r8
 5ac:	mov	r0, r5
 5b0:	bl	0 <sprintf>
 5b4:	add	r2, sp, #16
 5b8:	mov	r1, r5
 5bc:	mov	r0, #3
 5c0:	bl	0 <__xstat>
 5c4:	cmp	r0, #0
 5c8:	bne	5d8 <coda_path_find_file+0x12c>
 5cc:	ldr	r3, [sp, #32]
 5d0:	tst	r3, #32768	; 0x8000
 5d4:	bne	618 <coda_path_find_file+0x16c>
 5d8:	ldrb	r3, [r4]
 5dc:	mov	fp, r4
 5e0:	cmp	r3, #0
 5e4:	bne	54c <coda_path_find_file+0xa0>
 5e8:	mov	r0, r5
 5ec:	bl	0 <free>
 5f0:	ldr	r0, [sp, #4]
 5f4:	bl	0 <free>
 5f8:	ldr	r1, [sp, #8]
 5fc:	mov	r2, #0
 600:	mov	r3, r2
 604:	str	r2, [r1]
 608:	b	4e4 <coda_path_find_file+0x38>
 60c:	mov	r3, #0
 610:	strb	r3, [r4], #1
 614:	b	570 <coda_path_find_file+0xc4>
 618:	mov	r3, r0
 61c:	ldr	r0, [sp, #4]
 620:	str	r3, [sp, #12]
 624:	ldr	r3, [sp, #8]
 628:	str	r5, [r3]
 62c:	bl	0 <free>
 630:	ldr	r3, [sp, #12]
 634:	b	4e4 <coda_path_find_file+0x38>
 638:	movw	r3, #421	; 0x1a5
 63c:	movw	r2, #0
 640:	movt	r2, #0
 644:	movw	r1, #0
 648:	movt	r1, #0
 64c:	mvn	r0, #0
 650:	bl	0 <coda_set_error>
 654:	cmp	r5, #0
 658:	mvneq	r3, #0
 65c:	beq	4e4 <coda_path_find_file+0x38>
 660:	mvn	r3, #0
 664:	mov	r0, r5
 668:	str	r3, [sp, #4]
 66c:	bl	0 <free>
 670:	ldr	r3, [sp, #4]
 674:	b	4e4 <coda_path_find_file+0x38>
 678:	movw	r3, #391	; 0x187
 67c:	movw	r2, #0
 680:	movt	r2, #0
 684:	movw	r1, #0
 688:	movt	r1, #0
 68c:	mvn	r0, #0
 690:	bl	0 <coda_set_error>
 694:	mvn	r3, #0
 698:	b	4e4 <coda_path_find_file+0x38>

0000069c <coda_path_from_path>:
 69c:	strd	r4, [sp, #-32]!	; 0xffffffe0
 6a0:	strd	r6, [sp, #8]
 6a4:	mov	r6, r2
 6a8:	mov	r7, r3
 6ac:	strd	r8, [sp, #16]
 6b0:	mov	r8, r0
 6b4:	str	sl, [sp, #24]
 6b8:	mov	sl, r1
 6bc:	str	lr, [sp, #28]
 6c0:	bl	0 <strlen>
 6c4:	cmp	r6, #0
 6c8:	mov	r5, r0
 6cc:	mov	r4, r0
 6d0:	moveq	r9, r6
 6d4:	beq	6e4 <coda_path_from_path+0x48>
 6d8:	mov	r0, r6
 6dc:	bl	0 <strlen>
 6e0:	mov	r9, r0
 6e4:	cmp	sl, #0
 6e8:	cmpne	r5, #0
 6ec:	addgt	r2, r8, r5
 6f0:	bgt	804 <coda_path_from_path+0x168>
 6f4:	add	r0, r9, r5
 6f8:	add	r0, r0, #2
 6fc:	bl	0 <malloc>
 700:	cmp	r0, #0
 704:	mov	sl, r0
 708:	str	r0, [r7]
 70c:	beq	960 <coda_path_from_path+0x2c4>
 710:	cmp	r5, #0
 714:	bne	984 <coda_path_from_path+0x2e8>
 718:	cmp	r9, #0
 71c:	mov	r4, sl
 720:	bne	85c <coda_path_from_path+0x1c0>
 724:	mov	r2, #0
 728:	strb	r2, [sl]
 72c:	ldrb	r0, [r4]
 730:	cmp	r0, r2
 734:	beq	7e4 <coda_path_from_path+0x148>
 738:	cmp	r0, #46	; 0x2e
 73c:	bne	778 <coda_path_from_path+0xdc>
 740:	ldrb	r3, [r4, #1]
 744:	cmp	r3, #47	; 0x2f
 748:	bne	778 <coda_path_from_path+0xdc>
 74c:	mov	r3, r4
 750:	rsb	ip, r4, #2
 754:	b	764 <coda_path_from_path+0xc8>
 758:	ldrb	r1, [r3, #1]
 75c:	cmp	r1, #47	; 0x2f
 760:	bne	778 <coda_path_from_path+0xdc>
 764:	ldrb	r0, [r3, #2]
 768:	add	r2, ip, r3
 76c:	add	r3, r3, #2
 770:	cmp	r0, #46	; 0x2e
 774:	beq	758 <coda_path_from_path+0xbc>
 778:	mov	r3, #0
 77c:	b	7bc <coda_path_from_path+0x120>
 780:	cmp	r0, #92	; 0x5c
 784:	cmpne	r0, #47	; 0x2f
 788:	bne	7ac <coda_path_from_path+0x110>
 78c:	add	ip, r4, r2
 790:	ldrb	r1, [ip, #1]
 794:	cmp	r1, #92	; 0x5c
 798:	cmpne	r1, #47	; 0x2f
 79c:	addeq	r2, r2, #1
 7a0:	beq	7b8 <coda_path_from_path+0x11c>
 7a4:	cmp	r1, #46	; 0x2e
 7a8:	beq	874 <coda_path_from_path+0x1d8>
 7ac:	add	r2, r2, #1
 7b0:	strb	r0, [r4, r3]
 7b4:	add	r3, r3, #1
 7b8:	ldrb	r0, [r4, r2]
 7bc:	cmp	r0, #0
 7c0:	bne	780 <coda_path_from_path+0xe4>
 7c4:	cmp	r3, #0
 7c8:	bne	7d8 <coda_path_from_path+0x13c>
 7cc:	mov	r2, #46	; 0x2e
 7d0:	mov	r3, #1
 7d4:	strb	r2, [r4]
 7d8:	mov	r2, #0
 7dc:	mov	r0, r2
 7e0:	strb	r2, [r4, r3]
 7e4:	ldrd	r4, [sp]
 7e8:	ldrd	r6, [sp, #8]
 7ec:	ldrd	r8, [sp, #16]
 7f0:	ldr	sl, [sp, #24]
 7f4:	add	sp, sp, #28
 7f8:	pop	{pc}		; (ldr pc, [sp], #4)
 7fc:	subs	r4, r4, #1
 800:	beq	948 <coda_path_from_path+0x2ac>
 804:	ldrb	r3, [r2, #-1]!
 808:	mov	r5, r4
 80c:	cmp	r3, #92	; 0x5c
 810:	cmpne	r3, #47	; 0x2f
 814:	bne	7fc <coda_path_from_path+0x160>
 818:	add	r0, r9, r4
 81c:	add	r0, r0, #2
 820:	bl	0 <malloc>
 824:	cmp	r0, #0
 828:	mov	r4, r0
 82c:	str	r0, [r7]
 830:	beq	960 <coda_path_from_path+0x2c4>
 834:	mov	r1, r8
 838:	mov	r2, r5
 83c:	mov	r0, r4
 840:	add	sl, r4, r5
 844:	bl	0 <memcpy>
 848:	cmp	r9, #0
 84c:	beq	724 <coda_path_from_path+0x88>
 850:	mov	r3, #47	; 0x2f
 854:	add	sl, sl, #1
 858:	strb	r3, [r4, r5]
 85c:	mov	r1, r6
 860:	mov	r2, r9
 864:	mov	r0, sl
 868:	add	sl, sl, r9
 86c:	bl	0 <memcpy>
 870:	b	724 <coda_path_from_path+0x88>
 874:	ldrb	lr, [ip, #2]
 878:	sub	r1, lr, #47	; 0x2f
 87c:	cmp	lr, #0
 880:	clz	r1, r1
 884:	lsr	r1, r1, #5
 888:	moveq	r1, #1
 88c:	cmp	lr, #92	; 0x5c
 890:	orreq	r1, r1, #1
 894:	cmp	r1, #0
 898:	addne	r2, r2, #2
 89c:	bne	7b8 <coda_path_from_path+0x11c>
 8a0:	cmp	lr, #46	; 0x2e
 8a4:	bne	7ac <coda_path_from_path+0x110>
 8a8:	ldrb	lr, [ip, #3]
 8ac:	sub	ip, lr, #47	; 0x2f
 8b0:	cmp	lr, #0
 8b4:	clz	ip, ip
 8b8:	lsr	ip, ip, #5
 8bc:	moveq	ip, #1
 8c0:	cmp	lr, #92	; 0x5c
 8c4:	orreq	ip, ip, #1
 8c8:	cmp	ip, #0
 8cc:	beq	7ac <coda_path_from_path+0x110>
 8d0:	cmp	r3, #1
 8d4:	ble	98c <coda_path_from_path+0x2f0>
 8d8:	add	r1, r4, r3
 8dc:	ldrb	ip, [r1, #-1]
 8e0:	cmp	ip, #46	; 0x2e
 8e4:	bne	90c <coda_path_from_path+0x270>
 8e8:	ldrb	ip, [r1, #-2]
 8ec:	cmp	ip, #46	; 0x2e
 8f0:	bne	90c <coda_path_from_path+0x270>
 8f4:	cmp	r3, #2
 8f8:	beq	7ac <coda_path_from_path+0x110>
 8fc:	ldrb	r1, [r1, #-3]
 900:	cmp	r1, #92	; 0x5c
 904:	cmpne	r1, #47	; 0x2f
 908:	beq	7ac <coda_path_from_path+0x110>
 90c:	sub	r1, r3, #1
 910:	ldrb	ip, [r4, r1]
 914:	add	lr, r4, r1
 918:	cmp	ip, #47	; 0x2f
 91c:	cmpne	ip, #92	; 0x5c
 920:	beq	93c <coda_path_from_path+0x2a0>
 924:	subs	r1, r1, #1
 928:	bcc	7ac <coda_path_from_path+0x110>
 92c:	ldrb	ip, [lr, #-1]!
 930:	cmp	ip, #92	; 0x5c
 934:	cmpne	ip, #47	; 0x2f
 938:	bne	924 <coda_path_from_path+0x288>
 93c:	add	r2, r2, #3
 940:	mov	r3, r1
 944:	b	7b8 <coda_path_from_path+0x11c>
 948:	add	r0, r9, #2
 94c:	bl	0 <malloc>
 950:	cmp	r0, #0
 954:	mov	sl, r0
 958:	str	r0, [r7]
 95c:	bne	718 <coda_path_from_path+0x7c>
 960:	mvn	r0, #0
 964:	movw	r2, #0
 968:	movt	r2, #0
 96c:	movw	r1, #0
 970:	movt	r1, #0
 974:	movw	r3, #481	; 0x1e1
 978:	bl	0 <coda_set_error>
 97c:	mvn	r0, #0
 980:	b	7e4 <coda_path_from_path+0x148>
 984:	mov	r4, r0
 988:	b	834 <coda_path_from_path+0x198>
 98c:	cmp	r3, #0
 990:	bne	910 <coda_path_from_path+0x274>
 994:	b	7ac <coda_path_from_path+0x110>

00000998 <coda_path_for_program>:
 998:	mov	r3, #0
 99c:	strd	r4, [sp, #-16]!
 9a0:	subs	r4, r0, #0
 9a4:	str	r6, [sp, #8]
 9a8:	str	lr, [sp, #12]
 9ac:	sub	sp, sp, #1024	; 0x400
 9b0:	sub	sp, sp, #8
 9b4:	str	r3, [r1]
 9b8:	beq	ab4 <coda_path_for_program+0x11c>
 9bc:	ldrb	r3, [r4]
 9c0:	mov	r5, r1
 9c4:	cmp	r3, #0
 9c8:	beq	9f8 <coda_path_for_program+0x60>
 9cc:	cmp	r3, #92	; 0x5c
 9d0:	cmpne	r3, #47	; 0x2f
 9d4:	beq	ad4 <coda_path_for_program+0x13c>
 9d8:	mov	r2, r4
 9dc:	b	9ec <coda_path_for_program+0x54>
 9e0:	cmp	r3, #92	; 0x5c
 9e4:	cmpne	r3, #47	; 0x2f
 9e8:	beq	ad4 <coda_path_for_program+0x13c>
 9ec:	ldrb	r3, [r2, #1]!
 9f0:	cmp	r3, #0
 9f4:	bne	9e0 <coda_path_for_program+0x48>
 9f8:	movw	r0, #0
 9fc:	movt	r0, #0
 a00:	bl	0 <getenv>
 a04:	cmp	r0, #0
 a08:	beq	b10 <coda_path_for_program+0x178>
 a0c:	movw	r0, #0
 a10:	movt	r0, #0
 a14:	bl	0 <getenv>
 a18:	mov	r2, r5
 a1c:	mov	r1, r4
 a20:	bl	4ac <coda_path_find_file>
 a24:	cmp	r0, #0
 a28:	bne	b1c <coda_path_for_program+0x184>
 a2c:	ldr	r6, [r5]
 a30:	cmp	r6, #0
 a34:	beq	ab4 <coda_path_for_program+0x11c>
 a38:	ldrb	r4, [r6]
 a3c:	cmp	r4, #47	; 0x2f
 a40:	cmpne	r4, #92	; 0x5c
 a44:	beq	ab4 <coda_path_for_program+0x11c>
 a48:	bl	0 <__ctype_b_loc>
 a4c:	ldr	r3, [r0]
 a50:	lsl	r4, r4, #1
 a54:	ldrh	r3, [r3, r4]
 a58:	tst	r3, #1024	; 0x400
 a5c:	beq	a6c <coda_path_for_program+0xd4>
 a60:	ldrb	r3, [r6, #1]
 a64:	cmp	r3, #58	; 0x3a
 a68:	beq	ab4 <coda_path_for_program+0x11c>
 a6c:	mov	r1, #1024	; 0x400
 a70:	add	r0, sp, #4
 a74:	bl	0 <getcwd>
 a78:	subs	r4, r0, #0
 a7c:	beq	ab8 <coda_path_for_program+0x120>
 a80:	ldr	r6, [r5]
 a84:	mov	r2, #0
 a88:	add	r0, sp, #4
 a8c:	mov	r1, r2
 a90:	mov	r3, r5
 a94:	strb	r2, [sp, #1028]	; 0x404
 a98:	mov	r2, r6
 a9c:	bl	69c <coda_path_from_path>
 aa0:	subs	r4, r0, #0
 aa4:	mov	r0, r6
 aa8:	mvnne	r4, #0
 aac:	bl	0 <free>
 ab0:	b	ab8 <coda_path_for_program+0x120>
 ab4:	mov	r4, #0
 ab8:	mov	r0, r4
 abc:	add	sp, sp, #1024	; 0x400
 ac0:	add	sp, sp, #8
 ac4:	ldrd	r4, [sp]
 ac8:	ldr	r6, [sp, #8]
 acc:	add	sp, sp, #12
 ad0:	pop	{pc}		; (ldr pc, [sp], #4)
 ad4:	mov	r0, r4
 ad8:	bl	0 <strdup>
 adc:	cmp	r0, #0
 ae0:	mov	r6, r0
 ae4:	str	r0, [r5]
 ae8:	bne	a38 <coda_path_for_program+0xa0>
 aec:	movw	r2, #0
 af0:	movt	r2, #0
 af4:	movw	r1, #0
 af8:	movt	r1, #0
 afc:	movw	r3, #537	; 0x219
 b00:	mvn	r0, #0
 b04:	bl	0 <coda_set_error>
 b08:	mvn	r4, #0
 b0c:	b	ab8 <coda_path_for_program+0x120>
 b10:	mov	r4, r0
 b14:	str	r0, [r5]
 b18:	b	ab8 <coda_path_for_program+0x120>
 b1c:	mvn	r4, #0
 b20:	b	ab8 <coda_path_for_program+0x120>

00000b24 <coda_isNaN>:
 b24:	strd	r4, [sp, #-16]!
 b28:	mov	r0, #0
 b2c:	vmov	r4, r5, d0
 b30:	strd	r6, [sp, #8]
 b34:	mov	r7, #0
 b38:	movt	r7, #32752	; 0x7ff0
 b3c:	mov	r6, #0
 b40:	bic	r3, r5, #-2147483648	; 0x80000000
 b44:	lsr	r3, r3, #20
 b48:	lsl	r3, r3, #20
 b4c:	cmp	r3, r7
 b50:	cmpeq	r0, r6
 b54:	bne	b64 <coda_isNaN+0x40>
 b58:	ubfx	r1, r5, #0, #20
 b5c:	orrs	r3, r4, r1
 b60:	movne	r0, #1
 b64:	ldrd	r4, [sp]
 b68:	ldrd	r6, [sp, #8]
 b6c:	add	sp, sp, #16
 b70:	bx	lr

00000b74 <coda_NaN>:
 b74:	vldr	d0, [pc, #4]	; b80 <coda_NaN+0xc>
 b78:	bx	lr
 b7c:	nop	{0}
 b80:	.word	0x00000000
 b84:	.word	0x7ff80000

00000b88 <coda_isInf>:
 b88:	vmov	r0, r1, d0
 b8c:	strd	r4, [sp, #-8]!
 b90:	mov	r5, #0
 b94:	movt	r5, #32752	; 0x7ff0
 b98:	mov	r4, #0
 b9c:	bic	r3, r1, #-2147483648	; 0x80000000
 ba0:	cmp	r3, r5
 ba4:	cmpeq	r0, r4
 ba8:	ldrd	r4, [sp]
 bac:	add	sp, sp, #8
 bb0:	moveq	r0, #1
 bb4:	movne	r0, #0
 bb8:	bx	lr

00000bbc <coda_isPlusInf>:
 bbc:	vmov	r2, r3, d0
 bc0:	mov	r1, #0
 bc4:	movt	r1, #32752	; 0x7ff0
 bc8:	mov	r0, #0
 bcc:	cmp	r3, r1
 bd0:	cmpeq	r2, r0
 bd4:	moveq	r0, #1
 bd8:	movne	r0, #0
 bdc:	bx	lr

00000be0 <coda_isMinInf>:
 be0:	vmov	r2, r3, d0
 be4:	mov	r1, #0
 be8:	movt	r1, #65520	; 0xfff0
 bec:	mov	r0, #0
 bf0:	cmp	r3, r1
 bf4:	cmpeq	r2, r0
 bf8:	moveq	r0, #1
 bfc:	movne	r0, #0
 c00:	bx	lr

00000c04 <coda_PlusInf>:
 c04:	vldr	d0, [pc, #4]	; c10 <coda_PlusInf+0xc>
 c08:	bx	lr
 c0c:	nop	{0}
 c10:	.word	0x00000000
 c14:	.word	0x7ff00000

00000c18 <coda_MinInf>:
 c18:	vldr	d0, [pc]	; c20 <coda_MinInf+0x8>
 c1c:	bx	lr
 c20:	.word	0x00000000
 c24:	.word	0xfff00000

00000c28 <coda_str64u>:
 c28:	strd	r4, [sp, #-24]!	; 0xffffffe8
 c2c:	mov	r4, r0
 c30:	strd	r6, [sp, #8]
 c34:	mov	r7, #0
 c38:	mvn	r6, #0
 c3c:	cmp	r1, r7
 c40:	str	r8, [sp, #16]
 c44:	cmpeq	r0, r6
 c48:	mov	r6, r2
 c4c:	str	lr, [sp, #20]
 c50:	sub	sp, sp, #8
 c54:	bls	d18 <coda_str64u+0xf0>
 c58:	add	r3, pc, #232	; 0xe8
 c5c:	ldrd	r2, [r3]
 c60:	mov	r5, r1
 c64:	bl	0 <__aeabi_uldivmod>
 c68:	mov	r7, r2
 c6c:	mov	r0, r4
 c70:	add	r3, pc, #208	; 0xd0
 c74:	ldrd	r2, [r3]
 c78:	mov	r1, r5
 c7c:	bl	0 <__aeabi_uldivmod>
 c80:	add	r3, pc, #192	; 0xc0
 c84:	ldrd	r2, [r3]
 c88:	bl	0 <__aeabi_uldivmod>
 c8c:	add	r1, pc, #188	; 0xbc
 c90:	ldrd	r0, [r1]
 c94:	mov	r8, r2
 c98:	cmp	r5, r1
 c9c:	cmpeq	r4, r0
 ca0:	bls	cec <coda_str64u+0xc4>
 ca4:	add	r3, pc, #172	; 0xac
 ca8:	ldrd	r2, [r3]
 cac:	mov	r0, r4
 cb0:	mov	r1, r5
 cb4:	bl	0 <__aeabi_uldivmod>
 cb8:	mov	r2, r0
 cbc:	mov	r3, r8
 cc0:	str	r7, [sp]
 cc4:	mov	r0, r6
 cc8:	movw	r1, #0
 ccc:	movt	r1, #0
 cd0:	bl	0 <sprintf>
 cd4:	add	sp, sp, #8
 cd8:	ldrd	r4, [sp]
 cdc:	ldrd	r6, [sp, #8]
 ce0:	ldr	r8, [sp, #16]
 ce4:	add	sp, sp, #20
 ce8:	pop	{pc}		; (ldr pc, [sp], #4)
 cec:	mov	r3, r7
 cf0:	mov	r0, r6
 cf4:	movw	r1, #0
 cf8:	movt	r1, #0
 cfc:	add	sp, sp, #8
 d00:	ldrd	r4, [sp]
 d04:	ldrd	r6, [sp, #8]
 d08:	ldr	r8, [sp, #16]
 d0c:	ldr	lr, [sp, #20]
 d10:	add	sp, sp, #24
 d14:	b	0 <sprintf>
 d18:	mov	r2, r0
 d1c:	movw	r1, #0
 d20:	movt	r1, #0
 d24:	mov	r0, r6
 d28:	add	sp, sp, #8
 d2c:	ldrd	r4, [sp]
 d30:	ldrd	r6, [sp, #8]
 d34:	ldr	r8, [sp, #16]
 d38:	ldr	lr, [sp, #20]
 d3c:	add	sp, sp, #24
 d40:	b	0 <sprintf>
 d44:	nop	{0}
 d48:	.word	0x05f5e100
 d4c:	.word	0x00000000
 d50:	.word	0x6fc0ffff
 d54:	.word	0x002386f2
 d58:	.word	0x6fc10000
 d5c:	.word	0x002386f2

00000d60 <coda_str64>:
 d60:	cmp	r0, #0
 d64:	sbcs	ip, r1, #0
 d68:	blt	d70 <coda_str64+0x10>
 d6c:	b	c28 <coda_str64u>
 d70:	mov	r3, #45	; 0x2d
 d74:	rsbs	r0, r0, #0
 d78:	strd	r4, [sp, #-8]!
 d7c:	rsc	r1, r1, #0
 d80:	ldrd	r4, [sp]
 d84:	add	sp, sp, #8
 d88:	strb	r3, [r2], #1
 d8c:	b	c28 <coda_str64u>

00000d90 <coda_strfl>:
 d90:	vmov	r2, r3, d0
 d94:	strd	r4, [sp, #-24]!	; 0xffffffe8
 d98:	mov	r4, #0
 d9c:	strd	r6, [sp, #8]
 da0:	strd	r8, [sp, #16]
 da4:	mov	r9, #0
 da8:	movt	r9, #32752	; 0x7ff0
 dac:	mov	r8, #0
 db0:	vmov	r6, s0
 db4:	bic	r5, r3, #-2147483648	; 0x80000000
 db8:	mov	r7, r3
 dbc:	lsr	r5, r5, #20
 dc0:	lsl	r5, r5, #20
 dc4:	cmp	r5, r9
 dc8:	cmpeq	r4, r8
 dcc:	bne	de0 <coda_strfl+0x50>
 dd0:	ubfx	r5, r3, #0, #20
 dd4:	mov	r4, r2
 dd8:	orrs	r1, r4, r5
 ddc:	bne	e58 <coda_strfl+0xc8>
 de0:	mov	r5, #0
 de4:	movt	r5, #32752	; 0x7ff0
 de8:	mov	r4, #0
 dec:	cmp	r7, r5
 df0:	cmpeq	r6, r4
 df4:	beq	e6c <coda_strfl+0xdc>
 df8:	mov	r5, #0
 dfc:	movt	r5, #65520	; 0xfff0
 e00:	mov	r4, #0
 e04:	cmp	r7, r5
 e08:	cmpeq	r6, r4
 e0c:	beq	e2c <coda_strfl+0x9c>
 e10:	movw	r1, #0
 e14:	movt	r1, #0
 e18:	ldrd	r4, [sp]
 e1c:	ldrd	r6, [sp, #8]
 e20:	ldrd	r8, [sp, #16]
 e24:	add	sp, sp, #24
 e28:	b	0 <sprintf>
 e2c:	movw	r3, #0
 e30:	movt	r3, #0
 e34:	ldrb	r2, [r3, #4]
 e38:	ldr	r3, [r3]
 e3c:	str	r3, [r0]
 e40:	strb	r2, [r0, #4]
 e44:	ldrd	r4, [sp]
 e48:	ldrd	r6, [sp, #8]
 e4c:	ldrd	r8, [sp, #16]
 e50:	add	sp, sp, #24
 e54:	bx	lr
 e58:	movw	r3, #0
 e5c:	movt	r3, #0
 e60:	ldr	r3, [r3]
 e64:	str	r3, [r0]
 e68:	b	e44 <coda_strfl+0xb4>
 e6c:	movw	r3, #0
 e70:	movt	r3, #0
 e74:	ldrb	r2, [r3, #4]
 e78:	ldr	r3, [r3]
 e7c:	str	r3, [r0]
 e80:	strb	r2, [r0, #4]
 e84:	b	e44 <coda_strfl+0xb4>
