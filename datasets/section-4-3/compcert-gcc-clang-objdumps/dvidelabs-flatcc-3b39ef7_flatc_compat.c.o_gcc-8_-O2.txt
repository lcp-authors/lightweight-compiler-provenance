
../compcert-repos/dvidelabs-flatcc-3b39ef7/test/flatc_compat/CMakeFiles/flatc_compat.dir/flatc_compat.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <MyGame_InParentNamespace_verify_table>:
       0:	mov	r0, #0
       4:	bx	lr

00000008 <Fantasy_Attacker_verify_table>:
       8:	mov	r3, #4
       c:	mov	r1, #0
      10:	mov	r2, r3
      14:	b	0 <flatcc_verify_field>

00000018 <MyGame_Example_Monster_name.part.1>:
      18:	movw	r3, #0
      1c:	movt	r3, #0
      20:	str	r4, [sp, #-8]!
      24:	movw	r1, #0
      28:	movt	r1, #0
      2c:	str	lr, [sp, #4]
      30:	movw	r0, #0
      34:	movt	r0, #0
      38:	movw	r2, #699	; 0x2bb
      3c:	bl	0 <__assert_fail>

00000040 <MyGame_Example_TestJSONPrefixParsing3_verify_table>:
      40:	mov	r3, #8
      44:	mov	r1, #0
      48:	str	r4, [sp, #-8]!
      4c:	mov	r2, r3
      50:	mov	r4, r0
      54:	str	lr, [sp, #4]
      58:	bl	0 <flatcc_verify_field>
      5c:	cmp	r0, #0
      60:	beq	70 <MyGame_Example_TestJSONPrefixParsing3_verify_table+0x30>
      64:	ldr	r4, [sp]
      68:	add	sp, sp, #4
      6c:	pop	{pc}		; (ldr pc, [sp], #4)
      70:	mov	r3, #4
      74:	mov	r0, r4
      78:	ldr	r4, [sp]
      7c:	mov	r2, r3
      80:	mov	r1, #1
      84:	ldr	lr, [sp, #4]
      88:	add	sp, sp, #8
      8c:	b	0 <flatcc_verify_field>

00000090 <MyGame_Example_TestSimpleTableWithEnum_verify_table>:
      90:	mov	r3, #1
      94:	mov	r1, #0
      98:	str	r4, [sp, #-8]!
      9c:	mov	r2, r3
      a0:	mov	r4, r0
      a4:	str	lr, [sp, #4]
      a8:	bl	0 <flatcc_verify_field>
      ac:	cmp	r0, #0
      b0:	beq	c0 <MyGame_Example_TestSimpleTableWithEnum_verify_table+0x30>
      b4:	ldr	r4, [sp]
      b8:	add	sp, sp, #4
      bc:	pop	{pc}		; (ldr pc, [sp], #4)
      c0:	mov	r3, #1
      c4:	mov	r0, r4
      c8:	mov	r2, r3
      cc:	mov	r1, r3
      d0:	bl	0 <flatcc_verify_field>
      d4:	cmp	r0, #0
      d8:	bne	b4 <MyGame_Example_TestSimpleTableWithEnum_verify_table+0x24>
      dc:	mov	r3, #1
      e0:	mov	r1, #2
      e4:	mov	r2, r3
      e8:	mov	r0, r4
      ec:	bl	0 <flatcc_verify_field>
      f0:	cmp	r0, #0
      f4:	bne	b4 <MyGame_Example_TestSimpleTableWithEnum_verify_table+0x24>
      f8:	mov	r3, #1
      fc:	mov	r0, r4
     100:	ldr	r4, [sp]
     104:	mov	r2, r3
     108:	mov	r1, #3
     10c:	ldr	lr, [sp, #4]
     110:	add	sp, sp, #8
     114:	b	0 <flatcc_verify_field>

00000118 <MyGame_Example_Stat_verify_table>:
     118:	mov	r2, #0
     11c:	str	r4, [sp, #-8]!
     120:	mov	r4, r0
     124:	mov	r1, r2
     128:	str	lr, [sp, #4]
     12c:	bl	0 <flatcc_verify_string_field>
     130:	cmp	r0, #0
     134:	beq	144 <MyGame_Example_Stat_verify_table+0x2c>
     138:	ldr	r4, [sp]
     13c:	add	sp, sp, #4
     140:	pop	{pc}		; (ldr pc, [sp], #4)
     144:	mov	r3, #8
     148:	mov	r1, #1
     14c:	mov	r2, r3
     150:	mov	r0, r4
     154:	bl	0 <flatcc_verify_field>
     158:	cmp	r0, #0
     15c:	bne	138 <MyGame_Example_Stat_verify_table+0x20>
     160:	mov	r3, #2
     164:	mov	r0, r4
     168:	ldr	r4, [sp]
     16c:	mov	r2, r3
     170:	mov	r1, r3
     174:	ldr	lr, [sp, #4]
     178:	add	sp, sp, #8
     17c:	b	0 <flatcc_verify_field>

00000180 <MyGame_Example_TestJSONPrefixParsing_verify_table>:
     180:	mov	r2, #0
     184:	str	r4, [sp, #-8]!
     188:	mov	r4, r0
     18c:	mov	r1, r2
     190:	str	lr, [sp, #4]
     194:	bl	0 <flatcc_verify_string_field>
     198:	cmp	r0, #0
     19c:	beq	1ac <MyGame_Example_TestJSONPrefixParsing_verify_table+0x2c>
     1a0:	ldr	r4, [sp]
     1a4:	add	sp, sp, #4
     1a8:	pop	{pc}		; (ldr pc, [sp], #4)
     1ac:	mov	r3, #4
     1b0:	mov	r1, #1
     1b4:	mov	r2, r3
     1b8:	mov	r0, r4
     1bc:	bl	0 <flatcc_verify_field>
     1c0:	cmp	r0, #0
     1c4:	bne	1a0 <MyGame_Example_TestJSONPrefixParsing_verify_table+0x20>
     1c8:	mov	r2, r0
     1cc:	mov	r1, #2
     1d0:	mov	r0, r4
     1d4:	bl	0 <flatcc_verify_string_field>
     1d8:	cmp	r0, #0
     1dc:	bne	1a0 <MyGame_Example_TestJSONPrefixParsing_verify_table+0x20>
     1e0:	mov	r3, #8
     1e4:	mov	r1, #3
     1e8:	mov	r2, r3
     1ec:	mov	r0, r4
     1f0:	bl	0 <flatcc_verify_field>
     1f4:	cmp	r0, #0
     1f8:	bne	1a0 <MyGame_Example_TestJSONPrefixParsing_verify_table+0x20>
     1fc:	mov	r2, r0
     200:	mov	r1, #4
     204:	mov	r0, r4
     208:	bl	0 <flatcc_verify_string_field>
     20c:	cmp	r0, #0
     210:	bne	1a0 <MyGame_Example_TestJSONPrefixParsing_verify_table+0x20>
     214:	mov	r3, #8
     218:	mov	r1, #5
     21c:	mov	r2, r3
     220:	mov	r0, r4
     224:	bl	0 <flatcc_verify_field>
     228:	cmp	r0, #0
     22c:	bne	1a0 <MyGame_Example_TestJSONPrefixParsing_verify_table+0x20>
     230:	mov	r3, #4
     234:	mov	r1, #6
     238:	mov	r2, r3
     23c:	mov	r0, r4
     240:	bl	0 <flatcc_verify_field>
     244:	cmp	r0, #0
     248:	bne	1a0 <MyGame_Example_TestJSONPrefixParsing_verify_table+0x20>
     24c:	mov	r3, #8
     250:	mov	r1, #7
     254:	mov	r2, r3
     258:	mov	r0, r4
     25c:	bl	0 <flatcc_verify_field>
     260:	cmp	r0, #0
     264:	bne	1a0 <MyGame_Example_TestJSONPrefixParsing_verify_table+0x20>
     268:	mov	r3, #4
     26c:	mov	r0, r4
     270:	ldr	r4, [sp]
     274:	mov	r2, r3
     278:	mov	r1, #8
     27c:	ldr	lr, [sp, #4]
     280:	add	sp, sp, #8
     284:	b	0 <flatcc_verify_field>

00000288 <MyGame_Example_TestJSONPrefix_verify_table>:
     288:	mov	r2, #0
     28c:	movw	r3, #0
     290:	movt	r3, #0
     294:	mov	r1, r2
     298:	str	r4, [sp, #-8]!
     29c:	mov	r4, r0
     2a0:	str	lr, [sp, #4]
     2a4:	bl	0 <flatcc_verify_table_field>
     2a8:	cmp	r0, #0
     2ac:	beq	2bc <MyGame_Example_TestJSONPrefix_verify_table+0x34>
     2b0:	ldr	r4, [sp]
     2b4:	add	sp, sp, #4
     2b8:	pop	{pc}		; (ldr pc, [sp], #4)
     2bc:	mov	r2, r0
     2c0:	movw	r3, #0
     2c4:	movt	r3, #0
     2c8:	mov	r1, #1
     2cc:	mov	r0, r4
     2d0:	bl	0 <flatcc_verify_table_field>
     2d4:	cmp	r0, #0
     2d8:	bne	2b0 <MyGame_Example_TestJSONPrefix_verify_table+0x28>
     2dc:	mov	r2, r0
     2e0:	movw	r3, #0
     2e4:	movt	r3, #0
     2e8:	mov	r0, r4
     2ec:	ldr	r4, [sp]
     2f0:	mov	r1, #2
     2f4:	ldr	lr, [sp, #4]
     2f8:	add	sp, sp, #8
     2fc:	b	0 <flatcc_verify_table_field>

00000300 <MyGame_Example_Monster_verify_table>:
     300:	mov	r3, #16
     304:	mov	r2, #32
     308:	strd	r4, [sp, #-24]!	; 0xffffffe8
     30c:	mov	r1, #0
     310:	strd	r6, [sp, #8]
     314:	mov	r4, r0
     318:	str	r8, [sp, #16]
     31c:	str	lr, [sp, #20]
     320:	sub	sp, sp, #8
     324:	bl	0 <flatcc_verify_field>
     328:	cmp	r0, #0
     32c:	beq	348 <MyGame_Example_Monster_verify_table+0x48>
     330:	add	sp, sp, #8
     334:	ldrd	r4, [sp]
     338:	ldrd	r6, [sp, #8]
     33c:	ldr	r8, [sp, #16]
     340:	add	sp, sp, #20
     344:	pop	{pc}		; (ldr pc, [sp], #4)
     348:	mov	r3, #2
     34c:	mov	r0, r4
     350:	mov	r2, r3
     354:	mov	r1, r3
     358:	bl	0 <flatcc_verify_field>
     35c:	cmp	r0, #0
     360:	bne	330 <MyGame_Example_Monster_verify_table+0x30>
     364:	mov	r3, #2
     368:	mov	r1, #1
     36c:	mov	r2, r3
     370:	mov	r0, r4
     374:	bl	0 <flatcc_verify_field>
     378:	cmp	r0, #0
     37c:	bne	330 <MyGame_Example_Monster_verify_table+0x30>
     380:	mov	r2, #1
     384:	mov	r1, #3
     388:	mov	r0, r4
     38c:	bl	0 <flatcc_verify_string_field>
     390:	cmp	r0, #0
     394:	bne	330 <MyGame_Example_Monster_verify_table+0x30>
     398:	mov	r3, #1
     39c:	mov	r1, #6
     3a0:	mov	r2, r3
     3a4:	mov	r0, r4
     3a8:	bl	0 <flatcc_verify_field>
     3ac:	cmp	r0, #0
     3b0:	bne	330 <MyGame_Example_Monster_verify_table+0x30>
     3b4:	mov	r5, #1
     3b8:	mvn	r6, #0
     3bc:	mov	r2, r0
     3c0:	mov	r3, r5
     3c4:	mov	r1, #5
     3c8:	mov	r0, r4
     3cc:	stm	sp, {r5, r6}
     3d0:	bl	0 <flatcc_verify_vector_field>
     3d4:	cmp	r0, #0
     3d8:	bne	330 <MyGame_Example_Monster_verify_table+0x30>
     3dc:	mov	r2, r0
     3e0:	movw	r3, #0
     3e4:	movt	r3, #0
     3e8:	mov	r1, #11
     3ec:	mov	r0, r4
     3f0:	bl	0 <flatcc_verify_table_vector_field>
     3f4:	cmp	r0, #0
     3f8:	bne	330 <MyGame_Example_Monster_verify_table+0x30>
     3fc:	mov	r2, r0
     400:	mov	r1, #10
     404:	mov	r0, r4
     408:	bl	0 <flatcc_verify_string_vector_field>
     40c:	cmp	r0, #0
     410:	bne	330 <MyGame_Example_Monster_verify_table+0x30>
     414:	mov	r2, r0
     418:	mov	r1, #28
     41c:	mov	r0, r4
     420:	bl	0 <flatcc_verify_string_vector_field>
     424:	cmp	r0, #0
     428:	bne	330 <MyGame_Example_Monster_verify_table+0x30>
     42c:	mov	r2, r0
     430:	mov	r3, r5
     434:	stm	sp, {r5, r6}
     438:	mov	r1, #24
     43c:	mov	r0, r4
     440:	bl	0 <flatcc_verify_vector_field>
     444:	cmp	r0, #0
     448:	bne	330 <MyGame_Example_Monster_verify_table+0x30>
     44c:	mvn	ip, #-536870912	; 0xe0000000
     450:	mov	r5, #4
     454:	mov	r3, #8
     458:	mov	r2, #0
     45c:	mov	r1, #29
     460:	mov	r0, r4
     464:	stm	sp, {r5, ip}
     468:	bl	0 <flatcc_verify_vector_field>
     46c:	cmp	r0, #0
     470:	bne	330 <MyGame_Example_Monster_verify_table+0x30>
     474:	movw	r6, #0
     478:	movt	r6, #0
     47c:	mov	r2, r0
     480:	mov	r3, r6
     484:	mov	r1, #12
     488:	mov	r0, r4
     48c:	bl	0 <flatcc_verify_table_field>
     490:	cmp	r0, #0
     494:	bne	330 <MyGame_Example_Monster_verify_table+0x30>
     498:	mov	r2, r0
     49c:	movw	r3, #0
     4a0:	movt	r3, #0
     4a4:	mov	r1, #8
     4a8:	mov	r0, r4
     4ac:	bl	0 <flatcc_verify_union_field>
     4b0:	cmp	r0, #0
     4b4:	bne	330 <MyGame_Example_Monster_verify_table+0x30>
     4b8:	mvn	r7, #-1073741824	; 0xc0000000
     4bc:	mov	r8, #2
     4c0:	mov	r2, r0
     4c4:	mov	r3, r5
     4c8:	mov	r1, #9
     4cc:	mov	r0, r4
     4d0:	str	r8, [sp]
     4d4:	str	r7, [sp, #4]
     4d8:	bl	0 <flatcc_verify_vector_field>
     4dc:	cmp	r0, #0
     4e0:	bne	330 <MyGame_Example_Monster_verify_table+0x30>
     4e4:	mov	r2, r0
     4e8:	mov	r3, r5
     4ec:	str	r8, [sp]
     4f0:	mov	r1, #31
     4f4:	mov	r0, r4
     4f8:	str	r7, [sp, #4]
     4fc:	bl	0 <flatcc_verify_vector_field>
     500:	cmp	r0, #0
     504:	bne	330 <MyGame_Example_Monster_verify_table+0x30>
     508:	mov	r7, #1
     50c:	mov	r3, r0
     510:	mov	r2, r0
     514:	mov	r1, #13
     518:	mov	r0, r4
     51c:	str	r7, [sp]
     520:	str	r6, [sp, #4]
     524:	bl	0 <flatcc_verify_table_as_nested_root>
     528:	cmp	r0, #0
     52c:	bne	330 <MyGame_Example_Monster_verify_table+0x30>
     530:	mov	r2, r0
     534:	movw	r3, #0
     538:	movt	r3, #0
     53c:	mov	r1, #14
     540:	mov	r0, r4
     544:	bl	0 <flatcc_verify_table_field>
     548:	cmp	r0, #0
     54c:	bne	330 <MyGame_Example_Monster_verify_table+0x30>
     550:	mov	r3, r7
     554:	mov	r2, r7
     558:	mov	r1, #15
     55c:	mov	r0, r4
     560:	bl	0 <flatcc_verify_field>
     564:	cmp	r0, #0
     568:	bne	330 <MyGame_Example_Monster_verify_table+0x30>
     56c:	mov	r3, r5
     570:	mov	r2, r5
     574:	mov	r1, #16
     578:	mov	r0, r4
     57c:	bl	0 <flatcc_verify_field>
     580:	cmp	r0, #0
     584:	bne	330 <MyGame_Example_Monster_verify_table+0x30>
     588:	mov	r3, r5
     58c:	mov	r2, r5
     590:	mov	r1, #17
     594:	mov	r0, r4
     598:	bl	0 <flatcc_verify_field>
     59c:	cmp	r0, #0
     5a0:	bne	330 <MyGame_Example_Monster_verify_table+0x30>
     5a4:	mov	r3, #8
     5a8:	mov	r1, #18
     5ac:	mov	r2, r3
     5b0:	mov	r0, r4
     5b4:	bl	0 <flatcc_verify_field>
     5b8:	cmp	r0, #0
     5bc:	bne	330 <MyGame_Example_Monster_verify_table+0x30>
     5c0:	mov	r3, #8
     5c4:	mov	r1, #19
     5c8:	mov	r2, r3
     5cc:	mov	r0, r4
     5d0:	bl	0 <flatcc_verify_field>
     5d4:	cmp	r0, #0
     5d8:	bne	330 <MyGame_Example_Monster_verify_table+0x30>
     5dc:	mov	r3, r5
     5e0:	mov	r1, #20
     5e4:	mov	r2, r5
     5e8:	mov	r0, r4
     5ec:	bl	0 <flatcc_verify_field>
     5f0:	cmp	r0, #0
     5f4:	bne	330 <MyGame_Example_Monster_verify_table+0x30>
     5f8:	mov	r3, r5
     5fc:	mov	r1, #21
     600:	mov	r2, r5
     604:	mov	r0, r4
     608:	bl	0 <flatcc_verify_field>
     60c:	cmp	r0, #0
     610:	bne	330 <MyGame_Example_Monster_verify_table+0x30>
     614:	mov	r3, #8
     618:	mov	r1, #22
     61c:	mov	r2, r3
     620:	mov	r0, r4
     624:	bl	0 <flatcc_verify_field>
     628:	cmp	r0, #0
     62c:	bne	330 <MyGame_Example_Monster_verify_table+0x30>
     630:	mov	r3, #8
     634:	mov	r1, #23
     638:	mov	r2, r3
     63c:	mov	r0, r4
     640:	bl	0 <flatcc_verify_field>
     644:	cmp	r0, #0
     648:	bne	330 <MyGame_Example_Monster_verify_table+0x30>
     64c:	mov	r3, r5
     650:	mov	r1, #25
     654:	mov	r2, r5
     658:	mov	r0, r4
     65c:	bl	0 <flatcc_verify_field>
     660:	cmp	r0, #0
     664:	bne	330 <MyGame_Example_Monster_verify_table+0x30>
     668:	mov	r3, r5
     66c:	mov	r1, #26
     670:	mov	r2, r5
     674:	mov	r0, r4
     678:	bl	0 <flatcc_verify_field>
     67c:	cmp	r0, #0
     680:	bne	330 <MyGame_Example_Monster_verify_table+0x30>
     684:	mov	r3, r5
     688:	mov	r1, #27
     68c:	mov	r2, r5
     690:	mov	r0, r4
     694:	bl	0 <flatcc_verify_field>
     698:	cmp	r0, #0
     69c:	bne	330 <MyGame_Example_Monster_verify_table+0x30>
     6a0:	mvn	ip, #0
     6a4:	mov	r1, r7
     6a8:	mov	r2, r0
     6ac:	mov	r3, r7
     6b0:	mov	r0, r4
     6b4:	stm	sp, {r1, ip}
     6b8:	mov	r1, #30
     6bc:	bl	0 <flatcc_verify_vector_field>
     6c0:	cmp	r0, #0
     6c4:	bne	330 <MyGame_Example_Monster_verify_table+0x30>
     6c8:	mov	r5, #8
     6cc:	mvn	r6, #-536870912	; 0xe0000000
     6d0:	mov	r3, r5
     6d4:	mov	r2, #0
     6d8:	mov	r1, #32
     6dc:	mov	r0, r4
     6e0:	stm	sp, {r5, r6}
     6e4:	bl	0 <flatcc_verify_vector_field>
     6e8:	cmp	r0, #0
     6ec:	bne	330 <MyGame_Example_Monster_verify_table+0x30>
     6f0:	mov	r2, r0
     6f4:	mov	r3, r5
     6f8:	stm	sp, {r5, r6}
     6fc:	mov	r1, #33	; 0x21
     700:	mov	r0, r4
     704:	bl	0 <flatcc_verify_vector_field>
     708:	cmp	r0, #0
     70c:	bne	330 <MyGame_Example_Monster_verify_table+0x30>
     710:	mov	r2, r0
     714:	movw	r3, #0
     718:	movt	r3, #0
     71c:	mov	r1, #34	; 0x22
     720:	mov	r0, r4
     724:	bl	0 <flatcc_verify_table_field>
     728:	cmp	r0, #0
     72c:	bne	330 <MyGame_Example_Monster_verify_table+0x30>
     730:	mov	r2, r0
     734:	movw	r3, #0
     738:	movt	r3, #0
     73c:	mov	r0, r4
     740:	mov	r1, #35	; 0x23
     744:	add	sp, sp, #8
     748:	ldrd	r4, [sp]
     74c:	ldrd	r6, [sp, #8]
     750:	ldr	r8, [sp, #16]
     754:	ldr	lr, [sp, #20]
     758:	add	sp, sp, #24
     75c:	b	0 <flatcc_verify_table_field>

00000760 <MyGame_Example_TestBase64_verify_table>:
     760:	strd	r4, [sp, #-16]!
     764:	mov	r4, #1
     768:	mvn	r5, #0
     76c:	str	r6, [sp, #8]
     770:	mov	r2, #0
     774:	mov	r3, r4
     778:	str	lr, [sp, #12]
     77c:	sub	sp, sp, #8
     780:	mov	r1, r2
     784:	mov	r6, r0
     788:	strd	r4, [sp]
     78c:	bl	0 <flatcc_verify_vector_field>
     790:	subs	r2, r0, #0
     794:	beq	7b0 <MyGame_Example_TestBase64_verify_table+0x50>
     798:	mov	r0, r2
     79c:	add	sp, sp, #8
     7a0:	ldrd	r4, [sp]
     7a4:	ldr	r6, [sp, #8]
     7a8:	add	sp, sp, #12
     7ac:	pop	{pc}		; (ldr pc, [sp], #4)
     7b0:	mov	r3, r4
     7b4:	mov	r1, r4
     7b8:	strd	r4, [sp]
     7bc:	mov	r0, r6
     7c0:	bl	0 <flatcc_verify_vector_field>
     7c4:	subs	r2, r0, #0
     7c8:	bne	798 <MyGame_Example_TestBase64_verify_table+0x38>
     7cc:	movw	ip, #0
     7d0:	movt	ip, #0
     7d4:	mov	r3, r2
     7d8:	mov	r0, r6
     7dc:	mov	r1, #2
     7e0:	stm	sp, {r4, ip}
     7e4:	bl	0 <flatcc_verify_table_as_nested_root>
     7e8:	mov	r2, r0
     7ec:	b	798 <MyGame_Example_TestBase64_verify_table+0x38>

000007f0 <MyGame_Example_Any_union_verifier>:
     7f0:	ldrb	r3, [r0, #12]
     7f4:	sub	r3, r3, #1
     7f8:	cmp	r3, #3
     7fc:	ldrls	pc, [pc, r3, lsl #2]
     800:	b	844 <MyGame_Example_Any_union_verifier+0x54>
     804:	.word	0x00000838
     808:	.word	0x0000082c
     80c:	.word	0x00000820
     810:	.word	0x00000814
     814:	movw	r1, #0
     818:	movt	r1, #0
     81c:	b	0 <flatcc_verify_union_table>
     820:	movw	r1, #0
     824:	movt	r1, #0
     828:	b	0 <flatcc_verify_union_table>
     82c:	movw	r1, #0
     830:	movt	r1, #0
     834:	b	0 <flatcc_verify_union_table>
     838:	movw	r1, #0
     83c:	movt	r1, #0
     840:	b	0 <flatcc_verify_union_table>
     844:	mov	r0, #0
     848:	bx	lr

0000084c <MyGame_Example_Alt_verify_table>:
     84c:	mov	r2, #0
     850:	movw	r3, #0
     854:	movt	r3, #0
     858:	mov	r1, r2
     85c:	str	r4, [sp, #-8]!
     860:	mov	r4, r0
     864:	str	lr, [sp, #4]
     868:	bl	0 <flatcc_verify_table_field>
     86c:	cmp	r0, #0
     870:	beq	880 <MyGame_Example_Alt_verify_table+0x34>
     874:	ldr	r4, [sp]
     878:	add	sp, sp, #4
     87c:	pop	{pc}		; (ldr pc, [sp], #4)
     880:	mov	r2, r0
     884:	movw	r3, #0
     888:	movt	r3, #0
     88c:	mov	r1, #1
     890:	mov	r0, r4
     894:	bl	0 <flatcc_verify_table_field>
     898:	cmp	r0, #0
     89c:	bne	874 <MyGame_Example_Alt_verify_table+0x28>
     8a0:	mov	r2, r0
     8a4:	movw	r3, #0
     8a8:	movt	r3, #0
     8ac:	mov	r0, r4
     8b0:	ldr	r4, [sp]
     8b4:	mov	r1, #3
     8b8:	ldr	lr, [sp, #4]
     8bc:	add	sp, sp, #8
     8c0:	b	0 <flatcc_verify_union_vector_field>

000008c4 <Fantasy_Movie_verify_table>:
     8c4:	movw	r3, #0
     8c8:	movt	r3, #0
     8cc:	str	r4, [sp, #-8]!
     8d0:	mov	r2, #0
     8d4:	mov	r1, #1
     8d8:	str	lr, [sp, #4]
     8dc:	mov	r4, r0
     8e0:	bl	0 <flatcc_verify_union_field>
     8e4:	cmp	r0, #0
     8e8:	beq	8f8 <Fantasy_Movie_verify_table+0x34>
     8ec:	ldr	r4, [sp]
     8f0:	add	sp, sp, #4
     8f4:	pop	{pc}		; (ldr pc, [sp], #4)
     8f8:	mov	r2, r0
     8fc:	movw	r3, #0
     900:	movt	r3, #0
     904:	mov	r1, #3
     908:	mov	r0, r4
     90c:	bl	0 <flatcc_verify_union_field>
     910:	cmp	r0, #0
     914:	bne	8ec <Fantasy_Movie_verify_table+0x28>
     918:	mov	r2, r0
     91c:	movw	r3, #0
     920:	movt	r3, #0
     924:	mov	r1, #5
     928:	mov	r0, r4
     92c:	bl	0 <flatcc_verify_union_field>
     930:	cmp	r0, #0
     934:	bne	8ec <Fantasy_Movie_verify_table+0x28>
     938:	mov	r2, r0
     93c:	movw	r3, #0
     940:	movt	r3, #0
     944:	mov	r1, #7
     948:	mov	r0, r4
     94c:	bl	0 <flatcc_verify_union_field>
     950:	cmp	r0, #0
     954:	bne	8ec <Fantasy_Movie_verify_table+0x28>
     958:	mov	r2, r0
     95c:	movw	r3, #0
     960:	movt	r3, #0
     964:	mov	r0, r4
     968:	ldr	r4, [sp]
     96c:	mov	r1, #9
     970:	ldr	lr, [sp, #4]
     974:	add	sp, sp, #8
     978:	b	0 <flatcc_verify_union_vector_field>

0000097c <Fantasy_Character_union_verifier>:
     97c:	ldrb	r3, [r0, #12]
     980:	mov	r2, r0
     984:	cmp	r3, #10
     988:	bhi	9b0 <Fantasy_Character_union_verifier+0x34>
     98c:	cmp	r3, #9
     990:	bcs	9c8 <Fantasy_Character_union_verifier+0x4c>
     994:	cmp	r3, #2
     998:	beq	9dc <Fantasy_Character_union_verifier+0x60>
     99c:	cmp	r3, #8
     9a0:	bne	9d4 <Fantasy_Character_union_verifier+0x58>
     9a4:	mov	r2, #2
     9a8:	mov	r1, r2
     9ac:	b	0 <flatcc_verify_union_struct>
     9b0:	cmp	r3, #11
     9b4:	beq	9c0 <Fantasy_Character_union_verifier+0x44>
     9b8:	cmp	r3, #255	; 0xff
     9bc:	bne	9d4 <Fantasy_Character_union_verifier+0x58>
     9c0:	mov	r0, r2
     9c4:	b	0 <flatcc_verify_union_string>
     9c8:	mov	r2, #4
     9cc:	mov	r1, r2
     9d0:	b	0 <flatcc_verify_union_struct>
     9d4:	mov	r0, #0
     9d8:	bx	lr
     9dc:	movw	r1, #0
     9e0:	movt	r1, #0
     9e4:	b	0 <flatcc_verify_union_table>

000009e8 <MyGame_Example2_Monster_verify_table>:
     9e8:	mov	r0, #0
     9ec:	bx	lr

000009f0 <MyGame_Example_TestJSONPrefixParsing2_verify_table>:
     9f0:	mov	r3, #8
     9f4:	mov	r1, #0
     9f8:	str	r4, [sp, #-8]!
     9fc:	mov	r2, r3
     a00:	mov	r4, r0
     a04:	str	lr, [sp, #4]
     a08:	bl	0 <flatcc_verify_field>
     a0c:	cmp	r0, #0
     a10:	beq	a20 <MyGame_Example_TestJSONPrefixParsing2_verify_table+0x30>
     a14:	ldr	r4, [sp]
     a18:	add	sp, sp, #4
     a1c:	pop	{pc}		; (ldr pc, [sp], #4)
     a20:	mov	r3, #4
     a24:	mov	r0, r4
     a28:	ldr	r4, [sp]
     a2c:	mov	r2, r3
     a30:	mov	r1, #1
     a34:	ldr	lr, [sp, #4]
     a38:	add	sp, sp, #8
     a3c:	b	0 <flatcc_verify_field>

00000a40 <verify_monster>:
     a40:	cmp	r0, #0
     a44:	strd	r4, [sp, #-32]!	; 0xffffffe0
     a48:	strd	r6, [sp, #8]
     a4c:	strd	r8, [sp, #16]
     a50:	str	sl, [sp, #24]
     a54:	str	lr, [sp, #28]
     a58:	beq	a70 <verify_monster+0x30>
     a5c:	ldr	r2, [r0, #4]
     a60:	movw	r3, #20301	; 0x4f4d
     a64:	movt	r3, #21326	; 0x534e
     a68:	cmp	r2, r3
     a6c:	beq	a98 <verify_monster+0x58>
     a70:	movw	r0, #0
     a74:	movt	r0, #0
     a78:	bl	0 <puts>
     a7c:	mvn	r0, #0
     a80:	ldrd	r4, [sp]
     a84:	ldrd	r6, [sp, #8]
     a88:	ldrd	r8, [sp, #16]
     a8c:	ldr	sl, [sp, #24]
     a90:	add	sp, sp, #28
     a94:	pop	{pc}		; (ldr pc, [sp], #4)
     a98:	ldr	r3, [r0]
     a9c:	adds	r5, r0, r3
     aa0:	beq	a70 <verify_monster+0x30>
     aa4:	ldr	r4, [r0, r3]
     aa8:	sub	r4, r5, r4
     aac:	ldrh	r6, [r4]
     ab0:	cmp	r6, #9
     ab4:	bls	d98 <verify_monster+0x358>
     ab8:	ldrh	r3, [r4, #8]
     abc:	cmp	r3, #0
     ac0:	beq	d98 <verify_monster+0x358>
     ac4:	ldrsh	r3, [r5, r3]
     ac8:	cmp	r3, #80	; 0x50
     acc:	bne	d98 <verify_monster+0x358>
     ad0:	ldrh	r3, [r4, #4]
     ad4:	cmp	r3, #0
     ad8:	beq	1104 <verify_monster+0x6c4>
     adc:	adds	r3, r5, r3
     ae0:	beq	1104 <verify_monster+0x6c4>
     ae4:	sub	r0, r3, r0
     ae8:	tst	r0, #15
     aec:	bne	1078 <verify_monster+0x638>
     af0:	vldr	s15, [pc, #968]	; ec0 <verify_monster+0x480>
     af4:	vldr	s14, [r3]
     af8:	vcmp.f32	s14, s15
     afc:	vmrs	APSR_nzcv, fpscr
     b00:	bne	1050 <verify_monster+0x610>
     b04:	vldr	s15, [pc, #952]	; ec4 <verify_monster+0x484>
     b08:	vldr	s14, [r3, #4]
     b0c:	vcmp.f32	s14, s15
     b10:	vmrs	APSR_nzcv, fpscr
     b14:	bne	1064 <verify_monster+0x624>
     b18:	vldr	s15, [pc, #936]	; ec8 <verify_monster+0x488>
     b1c:	vldr	s14, [r3, #8]
     b20:	vcmp.f32	s14, s15
     b24:	vmrs	APSR_nzcv, fpscr
     b28:	bne	10a0 <verify_monster+0x660>
     b2c:	vldr	d7, [pc, #892]	; eb0 <verify_monster+0x470>
     b30:	vldr	d6, [r3, #16]
     b34:	vcmp.f64	d6, d7
     b38:	vmrs	APSR_nzcv, fpscr
     b3c:	bne	108c <verify_monster+0x64c>
     b40:	ldrsb	r2, [r3, #24]
     b44:	cmp	r2, #2
     b48:	bne	1028 <verify_monster+0x5e8>
     b4c:	ldrsh	r2, [r3, #26]
     b50:	cmp	r2, #5
     b54:	bne	1014 <verify_monster+0x5d4>
     b58:	ldrsb	r3, [r3, #28]
     b5c:	cmp	r3, #6
     b60:	bne	1014 <verify_monster+0x5d4>
     b64:	cmp	r6, #11
     b68:	bls	1168 <verify_monster+0x728>
     b6c:	ldrh	r0, [r4, #10]
     b70:	cmp	r0, #0
     b74:	beq	1168 <verify_monster+0x728>
     b78:	ldr	r3, [r5, r0]
     b7c:	add	r0, r5, r0
     b80:	add	r3, r3, #4
     b84:	adds	r0, r0, r3
     b88:	beq	d84 <verify_monster+0x344>
     b8c:	ldr	r3, [r0, #-4]
     b90:	cmp	r3, #9
     b94:	bne	d84 <verify_monster+0x344>
     b98:	movw	r1, #0
     b9c:	movt	r1, #0
     ba0:	bl	0 <strcmp>
     ba4:	subs	r1, r0, #0
     ba8:	bne	103c <verify_monster+0x5fc>
     bac:	cmp	r6, #15
     bb0:	bls	d70 <verify_monster+0x330>
     bb4:	ldrh	r3, [r4, #14]
     bb8:	cmp	r3, #0
     bbc:	beq	d70 <verify_monster+0x330>
     bc0:	ldr	r2, [r5, r3]
     bc4:	add	r3, r5, r3
     bc8:	add	r2, r2, #4
     bcc:	adds	r3, r3, r2
     bd0:	beq	d70 <verify_monster+0x330>
     bd4:	ldr	r2, [r3, #-4]
     bd8:	cmp	r2, #5
     bdc:	subeq	r3, r3, #1
     be0:	bne	d70 <verify_monster+0x330>
     be4:	ldrb	r2, [r3, #1]!
     be8:	cmp	r2, r1
     bec:	bne	dd4 <verify_monster+0x394>
     bf0:	add	r1, r1, #1
     bf4:	cmp	r1, #5
     bf8:	bne	be4 <verify_monster+0x1a4>
     bfc:	cmp	r6, #25
     c00:	bls	1188 <verify_monster+0x748>
     c04:	ldrh	r3, [r4, #24]
     c08:	cmp	r3, #0
     c0c:	beq	1188 <verify_monster+0x748>
     c10:	ldr	r2, [r5, r3]
     c14:	add	r3, r5, r3
     c18:	add	r2, r2, #4
     c1c:	adds	r7, r3, r2
     c20:	beq	1188 <verify_monster+0x748>
     c24:	ldr	r1, [r7, #-4]
     c28:	cmp	r1, #2
     c2c:	bne	10c8 <verify_monster+0x688>
     c30:	ldr	r0, [r3, r2]
     c34:	movw	r1, #0
     c38:	movt	r1, #0
     c3c:	add	r0, r0, #4
     c40:	add	r0, r7, r0
     c44:	bl	0 <strcmp>
     c48:	cmp	r0, #0
     c4c:	bne	1140 <verify_monster+0x700>
     c50:	ldr	r0, [r7, #4]
     c54:	movw	r1, #0
     c58:	movt	r1, #0
     c5c:	add	r0, r0, #8
     c60:	add	r0, r7, r0
     c64:	bl	0 <strcmp>
     c68:	cmp	r0, #0
     c6c:	bne	10b4 <verify_monster+0x674>
     c70:	ldrh	r3, [r4, #18]
     c74:	cmp	r3, #0
     c78:	beq	dac <verify_monster+0x36c>
     c7c:	ldrb	r3, [r5, r3]
     c80:	cmp	r3, #1
     c84:	bne	dac <verify_monster+0x36c>
     c88:	ldrh	r3, [r4, #20]
     c8c:	cmp	r3, #0
     c90:	beq	1154 <verify_monster+0x714>
     c94:	ldr	r2, [r5, r3]
     c98:	add	r3, r5, r3
     c9c:	adds	r0, r3, r2
     ca0:	beq	1154 <verify_monster+0x714>
     ca4:	ldr	r3, [r3, r2]
     ca8:	sub	r3, r0, r3
     cac:	ldrh	r2, [r3]
     cb0:	cmp	r2, #11
     cb4:	bls	1168 <verify_monster+0x728>
     cb8:	ldrh	r2, [r3, #10]
     cbc:	cmp	r2, #0
     cc0:	beq	1168 <verify_monster+0x728>
     cc4:	ldr	r3, [r0, r2]
     cc8:	add	r0, r0, r2
     ccc:	movw	r1, #0
     cd0:	movt	r1, #0
     cd4:	add	r3, r3, #4
     cd8:	add	r0, r0, r3
     cdc:	bl	0 <strcmp>
     ce0:	cmp	r0, #0
     ce4:	bne	10dc <verify_monster+0x69c>
     ce8:	ldrh	r3, [r4, #22]
     cec:	cmp	r3, #0
     cf0:	beq	dc0 <verify_monster+0x380>
     cf4:	ldr	r1, [r5, r3]
     cf8:	add	r3, r5, r3
     cfc:	add	r1, r1, #4
     d00:	adds	r2, r3, r1
     d04:	beq	dc0 <verify_monster+0x380>
     d08:	ldr	ip, [r2, #-4]
     d0c:	cmp	ip, #2
     d10:	bne	dc0 <verify_monster+0x380>
     d14:	ldrsh	r3, [r3, r1]
     d18:	cmp	r3, #10
     d1c:	bne	112c <verify_monster+0x6ec>
     d20:	ldrsb	r3, [r2, #2]
     d24:	cmp	r3, #20
     d28:	bne	1118 <verify_monster+0x6d8>
     d2c:	cmn	r2, #4
     d30:	beq	1000 <verify_monster+0x5c0>
     d34:	ldrsh	r3, [r2, #4]
     d38:	cmp	r3, #30
     d3c:	bne	1000 <verify_monster+0x5c0>
     d40:	ldrsb	r3, [r2, #6]
     d44:	cmp	r3, #40	; 0x28
     d48:	bne	10f0 <verify_monster+0x6b0>
     d4c:	cmp	r6, #37	; 0x25
     d50:	bhi	de8 <verify_monster+0x3a8>
     d54:	movw	r1, #0
     d58:	movt	r1, #0
     d5c:	ldr	r3, [pc, #360]	; ecc <verify_monster+0x48c>
     d60:	movw	r0, #0
     d64:	movt	r0, #0
     d68:	mov	r2, #148	; 0x94
     d6c:	bl	0 <__assert_fail>
     d70:	movw	r0, #0
     d74:	movt	r0, #0
     d78:	bl	0 <puts>
     d7c:	mvn	r0, #0
     d80:	b	a80 <verify_monster+0x40>
     d84:	movw	r0, #0
     d88:	movt	r0, #0
     d8c:	bl	0 <puts>
     d90:	mvn	r0, #0
     d94:	b	a80 <verify_monster+0x40>
     d98:	movw	r0, #0
     d9c:	movt	r0, #0
     da0:	bl	0 <puts>
     da4:	mvn	r0, #0
     da8:	b	a80 <verify_monster+0x40>
     dac:	movw	r0, #0
     db0:	movt	r0, #0
     db4:	bl	0 <puts>
     db8:	mvn	r0, #0
     dbc:	b	a80 <verify_monster+0x40>
     dc0:	movw	r0, #0
     dc4:	movt	r0, #0
     dc8:	bl	0 <puts>
     dcc:	mvn	r0, #0
     dd0:	b	a80 <verify_monster+0x40>
     dd4:	movw	r0, #0
     dd8:	movt	r0, #0
     ddc:	bl	0 <printf>
     de0:	mvn	r0, #0
     de4:	b	a80 <verify_monster+0x40>
     de8:	ldrh	r3, [r4, #36]	; 0x24
     dec:	cmp	r3, #0
     df0:	beq	d54 <verify_monster+0x314>
     df4:	ldr	r2, [r5, r3]
     df8:	movw	r3, #51521	; 0xc941
     dfc:	movt	r3, #56697	; 0xdd79
     e00:	cmp	r2, r3
     e04:	bne	d54 <verify_monster+0x314>
     e08:	cmp	r6, #39	; 0x27
     e0c:	bhi	e2c <verify_monster+0x3ec>
     e10:	movw	r1, #0
     e14:	movt	r1, #0
     e18:	ldr	r3, [pc, #172]	; ecc <verify_monster+0x48c>
     e1c:	movw	r0, #0
     e20:	movt	r0, #0
     e24:	mov	r2, #149	; 0x95
     e28:	bl	0 <__assert_fail>
     e2c:	ldrh	r3, [r4, #38]	; 0x26
     e30:	cmp	r3, #0
     e34:	beq	e10 <verify_monster+0x3d0>
     e38:	ldr	r3, [r5, r3]
     e3c:	cmp	r3, r2
     e40:	bne	e10 <verify_monster+0x3d0>
     e44:	cmp	r6, #41	; 0x29
     e48:	bhi	e68 <verify_monster+0x428>
     e4c:	movw	r1, #0
     e50:	movt	r1, #0
     e54:	ldr	r3, [pc, #112]	; ecc <verify_monster+0x48c>
     e58:	movw	r0, #0
     e5c:	movt	r0, #0
     e60:	mov	r2, #150	; 0x96
     e64:	bl	0 <__assert_fail>
     e68:	ldrh	r1, [r4, #40]	; 0x28
     e6c:	cmp	r1, #0
     e70:	beq	e4c <verify_monster+0x40c>
     e74:	add	r3, pc, #60	; 0x3c
     e78:	ldrd	r2, [r3]
     e7c:	ldrd	r8, [r5, r1]
     e80:	cmp	r9, r3
     e84:	cmpeq	r8, r2
     e88:	bne	e4c <verify_monster+0x40c>
     e8c:	cmp	r6, #43	; 0x2b
     e90:	bhi	ed0 <verify_monster+0x490>
     e94:	movw	r1, #0
     e98:	movt	r1, #0
     e9c:	ldr	r3, [pc, #40]	; ecc <verify_monster+0x48c>
     ea0:	movw	r0, #0
     ea4:	movt	r0, #0
     ea8:	mov	r2, #151	; 0x97
     eac:	bl	0 <__assert_fail>
     eb0:	.word	0x00000000
     eb4:	.word	0x40080000
     eb8:	.word	0xf27b9181
     ebc:	.word	0x6e0f80cd
     ec0:	.word	0x3f800000
     ec4:	.word	0x40000000
     ec8:	.word	0x40400000
     ecc:	.word	0x0000001c
     ed0:	ldrh	r3, [r4, #42]	; 0x2a
     ed4:	cmp	r3, #0
     ed8:	beq	e94 <verify_monster+0x454>
     edc:	ldrd	r2, [r3, r5]
     ee0:	cmp	r3, r9
     ee4:	cmpeq	r2, r8
     ee8:	bne	e94 <verify_monster+0x454>
     eec:	cmp	r6, #45	; 0x2d
     ef0:	bhi	f10 <verify_monster+0x4d0>
     ef4:	movw	r1, #0
     ef8:	movt	r1, #0
     efc:	ldr	r3, [pc, #-56]	; ecc <verify_monster+0x48c>
     f00:	movw	r0, #0
     f04:	movt	r0, #0
     f08:	mov	r2, #152	; 0x98
     f0c:	bl	0 <__assert_fail>
     f10:	ldrh	r3, [r4, #44]	; 0x2c
     f14:	cmp	r3, #0
     f18:	beq	ef4 <verify_monster+0x4b4>
     f1c:	ldr	r2, [r5, r3]
     f20:	movw	r3, #42097	; 0xa471
     f24:	movt	r3, #36481	; 0x8e81
     f28:	cmp	r2, r3
     f2c:	bne	ef4 <verify_monster+0x4b4>
     f30:	cmp	r6, #47	; 0x2f
     f34:	bhi	f54 <verify_monster+0x514>
     f38:	movw	r1, #0
     f3c:	movt	r1, #0
     f40:	ldr	r3, [pc, #-124]	; ecc <verify_monster+0x48c>
     f44:	movw	r0, #0
     f48:	movt	r0, #0
     f4c:	mov	r2, #153	; 0x99
     f50:	bl	0 <__assert_fail>
     f54:	ldrh	r3, [r4, #46]	; 0x2e
     f58:	cmp	r3, #0
     f5c:	beq	f38 <verify_monster+0x4f8>
     f60:	ldr	r2, [r5, r3]
     f64:	movw	r3, #42097	; 0xa471
     f68:	movt	r3, #36481	; 0x8e81
     f6c:	cmp	r2, r3
     f70:	bne	f38 <verify_monster+0x4f8>
     f74:	cmp	r6, #49	; 0x31
     f78:	bhi	f98 <verify_monster+0x558>
     f7c:	movw	r1, #0
     f80:	movt	r1, #0
     f84:	ldr	r3, [pc, #-192]	; ecc <verify_monster+0x48c>
     f88:	movw	r0, #0
     f8c:	movt	r0, #0
     f90:	mov	r2, #154	; 0x9a
     f94:	bl	0 <__assert_fail>
     f98:	ldrh	r3, [r4, #48]	; 0x30
     f9c:	cmp	r3, #0
     fa0:	beq	f7c <verify_monster+0x53c>
     fa4:	add	r9, pc, #500	; 0x1f4
     fa8:	ldrd	r8, [r9]
     fac:	ldrd	r2, [r3, r5]
     fb0:	cmp	r3, r9
     fb4:	cmpeq	r2, r8
     fb8:	bne	f7c <verify_monster+0x53c>
     fbc:	cmp	r6, #51	; 0x33
     fc0:	bhi	fe0 <verify_monster+0x5a0>
     fc4:	movw	r1, #0
     fc8:	movt	r1, #0
     fcc:	ldr	r3, [pc, #468]	; 11a8 <verify_monster+0x768>
     fd0:	movw	r0, #0
     fd4:	movt	r0, #0
     fd8:	mov	r2, #155	; 0x9b
     fdc:	bl	0 <__assert_fail>
     fe0:	ldrh	r1, [r4, #50]	; 0x32
     fe4:	cmp	r1, #0
     fe8:	beq	fc4 <verify_monster+0x584>
     fec:	ldrd	r4, [r5, r1]
     ff0:	cmp	r5, r3
     ff4:	cmpeq	r4, r2
     ff8:	beq	a80 <verify_monster+0x40>
     ffc:	b	fc4 <verify_monster+0x584>
    1000:	movw	r0, #0
    1004:	movt	r0, #0
    1008:	bl	0 <puts>
    100c:	mvn	r0, #0
    1010:	b	a80 <verify_monster+0x40>
    1014:	movw	r0, #0
    1018:	movt	r0, #0
    101c:	bl	0 <puts>
    1020:	mvn	r0, #0
    1024:	b	a80 <verify_monster+0x40>
    1028:	movw	r0, #0
    102c:	movt	r0, #0
    1030:	bl	0 <puts>
    1034:	mvn	r0, #0
    1038:	b	a80 <verify_monster+0x40>
    103c:	movw	r0, #0
    1040:	movt	r0, #0
    1044:	bl	0 <puts>
    1048:	mvn	r0, #0
    104c:	b	a80 <verify_monster+0x40>
    1050:	movw	r0, #0
    1054:	movt	r0, #0
    1058:	bl	0 <puts>
    105c:	mvn	r0, #0
    1060:	b	a80 <verify_monster+0x40>
    1064:	movw	r0, #0
    1068:	movt	r0, #0
    106c:	bl	0 <puts>
    1070:	mvn	r0, #0
    1074:	b	a80 <verify_monster+0x40>
    1078:	movw	r0, #0
    107c:	movt	r0, #0
    1080:	bl	0 <puts>
    1084:	mvn	r0, #0
    1088:	b	a80 <verify_monster+0x40>
    108c:	movw	r0, #0
    1090:	movt	r0, #0
    1094:	bl	0 <puts>
    1098:	mvn	r0, #0
    109c:	b	a80 <verify_monster+0x40>
    10a0:	movw	r0, #0
    10a4:	movt	r0, #0
    10a8:	bl	0 <puts>
    10ac:	mvn	r0, #0
    10b0:	b	a80 <verify_monster+0x40>
    10b4:	movw	r0, #0
    10b8:	movt	r0, #0
    10bc:	bl	0 <puts>
    10c0:	mvn	r0, #0
    10c4:	b	a80 <verify_monster+0x40>
    10c8:	movw	r0, #0
    10cc:	movt	r0, #0
    10d0:	bl	0 <puts>
    10d4:	mvn	r0, #0
    10d8:	b	a80 <verify_monster+0x40>
    10dc:	movw	r0, #0
    10e0:	movt	r0, #0
    10e4:	bl	0 <puts>
    10e8:	mvn	r0, #0
    10ec:	b	a80 <verify_monster+0x40>
    10f0:	movw	r0, #0
    10f4:	movt	r0, #0
    10f8:	bl	0 <puts>
    10fc:	mvn	r0, #0
    1100:	b	a80 <verify_monster+0x40>
    1104:	movw	r0, #0
    1108:	movt	r0, #0
    110c:	bl	0 <puts>
    1110:	mvn	r0, #0
    1114:	b	a80 <verify_monster+0x40>
    1118:	movw	r0, #0
    111c:	movt	r0, #0
    1120:	bl	0 <puts>
    1124:	mvn	r0, #0
    1128:	b	a80 <verify_monster+0x40>
    112c:	movw	r0, #0
    1130:	movt	r0, #0
    1134:	bl	0 <puts>
    1138:	mvn	r0, #0
    113c:	b	a80 <verify_monster+0x40>
    1140:	movw	r0, #0
    1144:	movt	r0, #0
    1148:	bl	0 <puts>
    114c:	mvn	r0, #0
    1150:	b	a80 <verify_monster+0x40>
    1154:	movw	r0, #0
    1158:	movt	r0, #0
    115c:	bl	0 <puts>
    1160:	mvn	r0, #0
    1164:	b	a80 <verify_monster+0x40>
    1168:	movw	r3, #0
    116c:	movt	r3, #0
    1170:	movw	r1, #0
    1174:	movt	r1, #0
    1178:	movw	r0, #0
    117c:	movt	r0, #0
    1180:	movw	r2, #699	; 0x2bb
    1184:	bl	0 <__assert_fail>
    1188:	movw	r0, #0
    118c:	movt	r0, #0
    1190:	bl	0 <puts>
    1194:	mvn	r0, #0
    1198:	b	a80 <verify_monster+0x40>
    119c:	nop	{0}
    11a0:	.word	0xc767ddf1
    11a4:	.word	0x43f948dc
    11a8:	.word	0x0000001c

Disassembly of section .text.startup:

00000000 <main>:
   0:	sub	r3, r0, #1
   4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   8:	cmp	r3, #1
   c:	strd	r6, [sp, #8]
  10:	strd	r8, [sp, #16]
  14:	strd	sl, [sp, #24]
  18:	str	lr, [sp, #32]
  1c:	sub	sp, sp, #44	; 0x2c
  20:	bhi	3f4 <main+0x3f4>
  24:	cmp	r0, #2
  28:	movw	r3, #0
  2c:	movt	r3, #0
  30:	ldreq	r2, [r1, #4]
  34:	movw	r1, #0
  38:	movt	r1, #0
  3c:	streq	r2, [r3]
  40:	ldr	r0, [r3]
  44:	bl	0 <fopen>
  48:	subs	r7, r0, #0
  4c:	beq	37c <main+0x37c>
  50:	mov	r2, #2
  54:	mov	r1, #0
  58:	bl	0 <fseek>
  5c:	mov	r0, r7
  60:	bl	0 <ftell>
  64:	mov	r4, r0
  68:	mov	r0, r7
  6c:	cmp	r4, #1024	; 0x400
  70:	bhi	318 <main+0x318>
  74:	bl	0 <rewind>
  78:	cmp	r4, #0
  7c:	movne	r0, r4
  80:	moveq	r0, #1
  84:	bl	0 <malloc>
  88:	subs	r6, r0, #0
  8c:	beq	3a8 <main+0x3a8>
  90:	mov	r5, #0
  94:	b	9c <main+0x9c>
  98:	add	r5, r5, r0
  9c:	mov	r3, r7
  a0:	sub	r2, r4, r5
  a4:	mov	r1, #1
  a8:	add	r0, r6, r5
  ac:	bl	0 <fread>
  b0:	cmp	r0, #0
  b4:	bne	98 <main+0x98>
  b8:	cmp	r4, r5
  bc:	mov	r8, r0
  c0:	mov	r0, r7
  c4:	bne	214 <main+0x214>
  c8:	bl	0 <fclose>
  cc:	mov	r3, #0
  d0:	add	r2, r4, #255	; 0xff
  d4:	add	sl, sp, #20
  d8:	bic	r2, r2, #255	; 0xff
  dc:	mov	r0, sl
  e0:	mov	r1, #256	; 0x100
  e4:	str	r3, [sp, #20]
  e8:	bl	0 <posix_memalign>
  ec:	cmp	r0, #0
  f0:	ldreq	r5, [sp, #20]
  f4:	beq	118 <main+0x118>
  f8:	ldr	r5, [sp, #20]
  fc:	cmp	r5, #0
 100:	beq	118 <main+0x118>
 104:	mov	r0, r5
 108:	bl	0 <free>
 10c:	mov	r3, #0
 110:	mov	r5, r3
 114:	str	r3, [sp, #20]
 118:	mov	r2, r4
 11c:	mov	r1, r6
 120:	mov	r0, r5
 124:	movw	r9, #0
 128:	movt	r9, #0
 12c:	bl	0 <memcpy>
 130:	mov	r0, r6
 134:	bl	0 <free>
 138:	ldr	r7, [r9]
 13c:	movw	r2, #0
 140:	movt	r2, #0
 144:	movw	r1, #0
 148:	movt	r1, #0
 14c:	mov	r0, r7
 150:	bl	0 <fprintf>
 154:	cmp	r4, #0
 158:	beq	250 <main+0x250>
 15c:	movw	r3, #0
 160:	movt	r3, #0
 164:	sub	fp, r5, #1
 168:	mov	r6, #0
 16c:	str	r3, [sp, #4]
 170:	movw	r3, #0
 174:	movt	r3, #0
 178:	str	r3, [sp, #8]
 17c:	movw	r3, #0
 180:	movt	r3, #0
 184:	str	r3, [sp, #12]
 188:	b	1f4 <main+0x1f4>
 18c:	cmp	r6, #0
 190:	beq	1a4 <main+0x1a4>
 194:	mov	r2, sl
 198:	mov	r0, r7
 19c:	ldr	r1, [sp, #8]
 1a0:	bl	0 <fprintf>
 1a4:	mov	r2, r6
 1a8:	mov	r0, r7
 1ac:	ldr	r1, [sp, #4]
 1b0:	bl	0 <fprintf>
 1b4:	ldrb	r2, [fp, #1]!
 1b8:	mov	r0, r7
 1bc:	add	r6, r6, #1
 1c0:	ldr	r1, [sp, #12]
 1c4:	bl	0 <fprintf>
 1c8:	add	r3, sp, #40	; 0x28
 1cc:	mov	r2, #0
 1d0:	add	r8, r3, r8
 1d4:	ldrb	r3, [fp]
 1d8:	strb	r2, [r8, #-19]	; 0xffffffed
 1dc:	sub	r2, r3, #32
 1e0:	cmp	r2, #94	; 0x5e
 1e4:	movhi	r3, #46	; 0x2e
 1e8:	cmp	r6, r4
 1ec:	strb	r3, [r8, #-20]	; 0xffffffec
 1f0:	beq	2e0 <main+0x2e0>
 1f4:	ands	r8, r6, #15
 1f8:	beq	18c <main+0x18c>
 1fc:	tst	r6, #7
 200:	bne	1b4 <main+0x1b4>
 204:	mov	r1, r7
 208:	mov	r0, #32
 20c:	bl	0 <fputc>
 210:	b	1b4 <main+0x1b4>
 214:	bl	0 <fclose>
 218:	mov	r0, r6
 21c:	mov	r6, r8
 220:	bl	0 <free>
 224:	b	cc <main+0xcc>
 228:	movw	r9, #0
 22c:	movt	r9, #0
 230:	ldr	r5, [sp, #20]
 234:	movw	r2, #0
 238:	movt	r2, #0
 23c:	ldr	r7, [r9]
 240:	movw	r1, #0
 244:	movt	r1, #0
 248:	mov	r0, r7
 24c:	bl	0 <fprintf>
 250:	mov	r2, sl
 254:	mov	r0, r7
 258:	movw	r1, #0
 25c:	movt	r1, #0
 260:	bl	0 <fprintf>
 264:	movw	r3, #0
 268:	movt	r3, #0
 26c:	movw	r2, #0
 270:	movt	r2, #0
 274:	mov	r1, r4
 278:	mov	r0, r5
 27c:	bl	0 <flatcc_verify_table_as_root>
 280:	cmp	r0, #0
 284:	bne	3b4 <main+0x3b4>
 288:	mov	r1, r4
 28c:	movw	r3, #0
 290:	movt	r3, #0
 294:	movw	r2, #0
 298:	movt	r2, #0
 29c:	mov	r0, r5
 2a0:	bl	0 <flatcc_verify_table_as_root>
 2a4:	cmp	r0, #0
 2a8:	bne	3d4 <main+0x3d4>
 2ac:	mov	r0, r5
 2b0:	bl	a40 <verify_monster>
 2b4:	mov	r4, r0
 2b8:	mov	r0, r5
 2bc:	bl	0 <free>
 2c0:	mov	r0, r4
 2c4:	add	sp, sp, #44	; 0x2c
 2c8:	ldrd	r4, [sp]
 2cc:	ldrd	r6, [sp, #8]
 2d0:	ldrd	r8, [sp, #16]
 2d4:	ldrd	sl, [sp, #24]
 2d8:	add	sp, sp, #32
 2dc:	pop	{pc}		; (ldr pc, [sp], #4)
 2e0:	tst	r4, #15
 2e4:	beq	250 <main+0x250>
 2e8:	movw	r8, #0
 2ec:	movt	r8, #0
 2f0:	mov	r6, r4
 2f4:	add	r6, r6, #1
 2f8:	mov	r3, r7
 2fc:	mov	r2, #3
 300:	mov	r1, #1
 304:	mov	r0, r8
 308:	bl	0 <fwrite>
 30c:	tst	r6, #15
 310:	bne	2f4 <main+0x2f4>
 314:	b	250 <main+0x250>
 318:	bl	0 <fclose>
 31c:	mov	r6, #0
 320:	add	sl, sp, #20
 324:	add	r2, r4, #255	; 0xff
 328:	mov	r1, #256	; 0x100
 32c:	bic	r2, r2, #255	; 0xff
 330:	mov	r0, sl
 334:	str	r6, [sp, #20]
 338:	bl	0 <posix_memalign>
 33c:	subs	r1, r0, #0
 340:	bne	f8 <main+0xf8>
 344:	ldr	r5, [sp, #20]
 348:	mov	r2, r4
 34c:	movw	r9, #0
 350:	movt	r9, #0
 354:	mov	r0, r5
 358:	bl	0 <memcpy>
 35c:	ldr	r7, [r9]
 360:	movw	r2, #0
 364:	movt	r2, #0
 368:	movw	r1, #0
 36c:	movt	r1, #0
 370:	mov	r0, r7
 374:	bl	0 <fprintf>
 378:	b	15c <main+0x15c>
 37c:	add	sl, sp, #20
 380:	mov	r2, r7
 384:	str	r7, [sp, #20]
 388:	mov	r0, sl
 38c:	mov	r1, #256	; 0x100
 390:	bl	0 <posix_memalign>
 394:	subs	r4, r0, #0
 398:	beq	228 <main+0x228>
 39c:	mov	r6, r7
 3a0:	mov	r4, r7
 3a4:	b	f8 <main+0xf8>
 3a8:	mov	r0, r7
 3ac:	bl	0 <fclose>
 3b0:	b	cc <main+0xcc>
 3b4:	movw	r0, #0
 3b8:	movt	r0, #0
 3bc:	ldr	r3, [r9]
 3c0:	mov	r2, #38	; 0x26
 3c4:	mov	r1, #1
 3c8:	mvn	r4, #0
 3cc:	bl	0 <fwrite>
 3d0:	b	2b8 <main+0x2b8>
 3d4:	movw	r0, #0
 3d8:	movt	r0, #0
 3dc:	ldr	r3, [r9]
 3e0:	mov	r2, #62	; 0x3e
 3e4:	mov	r1, #1
 3e8:	mvn	r4, #0
 3ec:	bl	0 <fwrite>
 3f0:	b	2b8 <main+0x2b8>
 3f4:	movw	r3, #0
 3f8:	movt	r3, #0
 3fc:	movw	r0, #0
 400:	movt	r0, #0
 404:	ldr	r3, [r3]
 408:	mov	r2, #63	; 0x3f
 40c:	mov	r1, #1
 410:	bl	0 <fwrite>
 414:	mov	r0, #1
 418:	bl	0 <exit>
