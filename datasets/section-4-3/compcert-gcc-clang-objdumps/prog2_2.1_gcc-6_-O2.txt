
../compcert-repos/prog2/2.1:     file format elf32-littlearm


Disassembly of section .init:

00010664 <.init>:
   10664:	push	{r3, lr}
   10668:	bl	10878 <_start@@Base+0x3c>
   1066c:	pop	{r3, pc}

Disassembly of section .plt:

00010670 <printf@plt-0x14>:
   10670:	push	{lr}		; (str lr, [sp, #-4]!)
   10674:	ldr	lr, [pc, #4]	; 10680 <printf@plt-0x4>
   10678:	add	lr, pc, lr
   1067c:	ldr	pc, [lr, #8]!
   10680:	andeq	r0, r1, r0, lsl #19

00010684 <printf@plt>:
   10684:	add	ip, pc, #0, 12
   10688:	add	ip, ip, #16, 20	; 0x10000
   1068c:	ldr	pc, [ip, #2432]!	; 0x980

00010690 <free@plt>:
   10690:	add	ip, pc, #0, 12
   10694:	add	ip, ip, #16, 20	; 0x10000
   10698:	ldr	pc, [ip, #2424]!	; 0x978

0001069c <realloc@plt>:
   1069c:	add	ip, pc, #0, 12
   106a0:	add	ip, ip, #16, 20	; 0x10000
   106a4:	ldr	pc, [ip, #2416]!	; 0x970

000106a8 <puts@plt>:
   106a8:	add	ip, pc, #0, 12
   106ac:	add	ip, ip, #16, 20	; 0x10000
   106b0:	ldr	pc, [ip, #2408]!	; 0x968

000106b4 <malloc@plt>:
   106b4:	add	ip, pc, #0, 12
   106b8:	add	ip, ip, #16, 20	; 0x10000
   106bc:	ldr	pc, [ip, #2400]!	; 0x960

000106c0 <__libc_start_main@plt>:
   106c0:	add	ip, pc, #0, 12
   106c4:	add	ip, ip, #16, 20	; 0x10000
   106c8:	ldr	pc, [ip, #2392]!	; 0x958

000106cc <__gmon_start__@plt>:
   106cc:	add	ip, pc, #0, 12
   106d0:	add	ip, ip, #16, 20	; 0x10000
   106d4:	ldr	pc, [ip, #2384]!	; 0x950

000106d8 <putchar@plt>:
   106d8:	add	ip, pc, #0, 12
   106dc:	add	ip, ip, #16, 20	; 0x10000
   106e0:	ldr	pc, [ip, #2376]!	; 0x948

000106e4 <__isoc99_scanf@plt>:
   106e4:	add	ip, pc, #0, 12
   106e8:	add	ip, ip, #16, 20	; 0x10000
   106ec:	ldr	pc, [ip, #2368]!	; 0x940

000106f0 <abort@plt>:
   106f0:	add	ip, pc, #0, 12
   106f4:	add	ip, ip, #16, 20	; 0x10000
   106f8:	ldr	pc, [ip, #2360]!	; 0x938

Disassembly of section .text:

000106fc <main@@Base>:
   106fc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10700:	sub	sp, sp, #20
   10704:	ldr	r0, [pc, #280]	; 10824 <main@@Base+0x128>
   10708:	bl	10684 <printf@plt>
   1070c:	add	r1, sp, #12
   10710:	ldr	r0, [pc, #272]	; 10828 <main@@Base+0x12c>
   10714:	bl	106e4 <__isoc99_scanf@plt>
   10718:	ldr	r0, [sp, #12]
   1071c:	mov	fp, #0
   10720:	mov	r5, fp
   10724:	lsl	r0, r0, #2
   10728:	bl	106b4 <malloc@plt>
   1072c:	mov	r6, fp
   10730:	ldr	r7, [pc, #244]	; 1082c <main@@Base+0x130>
   10734:	ldr	r8, [pc, #236]	; 10828 <main@@Base+0x12c>
   10738:	str	r0, [sp, #4]
   1073c:	ldr	r0, [sp, #12]
   10740:	ldr	r4, [sp, #4]
   10744:	lsl	r0, r0, #2
   10748:	bl	106b4 <malloc@plt>
   1074c:	mov	sl, r0
   10750:	ldr	r0, [sp, #12]
   10754:	lsl	r0, r0, #2
   10758:	bl	106b4 <malloc@plt>
   1075c:	mov	r9, r0
   10760:	b	1078c <main@@Base+0x90>
   10764:	bl	10684 <printf@plt>
   10768:	mov	r1, r4
   1076c:	mov	r0, r8
   10770:	bl	106e4 <__isoc99_scanf@plt>
   10774:	ldr	r2, [r4], #4
   10778:	tst	r2, #1
   1077c:	strne	r2, [r9, r5, lsl #2]
   10780:	streq	r2, [sl, r6, lsl #2]
   10784:	addne	r5, r5, #1
   10788:	addeq	r6, r6, #1
   1078c:	ldr	r2, [sp, #12]
   10790:	mov	r0, r7
   10794:	cmp	fp, r2
   10798:	add	fp, fp, #1
   1079c:	mov	r1, fp
   107a0:	blt	10764 <main@@Base+0x68>
   107a4:	lsl	r1, r6, #2
   107a8:	mov	r0, sl
   107ac:	bl	1069c <realloc@plt>
   107b0:	lsl	r1, r5, #2
   107b4:	mov	r7, r0
   107b8:	mov	r0, r9
   107bc:	bl	1069c <realloc@plt>
   107c0:	mov	r4, r0
   107c4:	ldr	r0, [pc, #100]	; 10830 <main@@Base+0x134>
   107c8:	bl	10684 <printf@plt>
   107cc:	ldr	r1, [sp, #12]
   107d0:	ldr	r0, [sp, #4]
   107d4:	bl	10964 <PrintArray@@Base>
   107d8:	ldr	r0, [pc, #84]	; 10834 <main@@Base+0x138>
   107dc:	bl	10684 <printf@plt>
   107e0:	mov	r1, r6
   107e4:	mov	r0, r7
   107e8:	bl	10964 <PrintArray@@Base>
   107ec:	ldr	r0, [pc, #68]	; 10838 <main@@Base+0x13c>
   107f0:	bl	10684 <printf@plt>
   107f4:	mov	r1, r5
   107f8:	mov	r0, r4
   107fc:	bl	10964 <PrintArray@@Base>
   10800:	ldr	r0, [sp, #4]
   10804:	bl	10690 <free@plt>
   10808:	mov	r0, r7
   1080c:	bl	10690 <free@plt>
   10810:	mov	r0, r4
   10814:	bl	10690 <free@plt>
   10818:	mov	r0, #0
   1081c:	add	sp, sp, #20
   10820:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10824:	andeq	r0, r1, r0, lsr sl
   10828:	andeq	r0, r1, r8, asr #20
   1082c:	andeq	r0, r1, ip, asr #20
   10830:	andeq	r0, r1, r8, ror #20
   10834:	andeq	r0, r1, ip, ror sl
   10838:	andeq	r0, r1, ip, lsl #21

0001083c <_start@@Base>:
   1083c:	mov	fp, #0
   10840:	mov	lr, #0
   10844:	pop	{r1}		; (ldr r1, [sp], #4)
   10848:	mov	r2, sp
   1084c:	push	{r2}		; (str r2, [sp, #-4]!)
   10850:	push	{r0}		; (str r0, [sp, #-4]!)
   10854:	ldr	ip, [pc, #16]	; 1086c <_start@@Base+0x30>
   10858:	push	{ip}		; (str ip, [sp, #-4]!)
   1085c:	ldr	r0, [pc, #12]	; 10870 <_start@@Base+0x34>
   10860:	ldr	r3, [pc, #12]	; 10874 <_start@@Base+0x38>
   10864:	bl	106c0 <__libc_start_main@plt>
   10868:	bl	106f0 <abort@plt>
   1086c:	andeq	r0, r1, r8, lsl sl
   10870:	strdeq	r0, [r1], -ip
   10874:			; <UNDEFINED> instruction: 0x000109b8
   10878:	ldr	r3, [pc, #20]	; 10894 <_start@@Base+0x58>
   1087c:	ldr	r2, [pc, #20]	; 10898 <_start@@Base+0x5c>
   10880:	add	r3, pc, r3
   10884:	ldr	r2, [r3, r2]
   10888:	cmp	r2, #0
   1088c:	bxeq	lr
   10890:	b	106cc <__gmon_start__@plt>
   10894:	andeq	r0, r1, r8, ror r7
   10898:	andeq	r0, r0, r4, lsr r0
   1089c:	ldr	r3, [pc, #28]	; 108c0 <_start@@Base+0x84>
   108a0:	ldr	r0, [pc, #28]	; 108c4 <_start@@Base+0x88>
   108a4:	sub	r3, r3, r0
   108a8:	cmp	r3, #6
   108ac:	bxls	lr
   108b0:	ldr	r3, [pc, #16]	; 108c8 <_start@@Base+0x8c>
   108b4:	cmp	r3, #0
   108b8:	bxeq	lr
   108bc:	bx	r3
   108c0:	andeq	r1, r2, r3, asr #32
   108c4:	andeq	r1, r2, r0, asr #32
   108c8:	andeq	r0, r0, r0
   108cc:	ldr	r1, [pc, #36]	; 108f8 <_start@@Base+0xbc>
   108d0:	ldr	r0, [pc, #36]	; 108fc <_start@@Base+0xc0>
   108d4:	sub	r1, r1, r0
   108d8:	asr	r1, r1, #2
   108dc:	add	r1, r1, r1, lsr #31
   108e0:	asrs	r1, r1, #1
   108e4:	bxeq	lr
   108e8:	ldr	r3, [pc, #16]	; 10900 <_start@@Base+0xc4>
   108ec:	cmp	r3, #0
   108f0:	bxeq	lr
   108f4:	bx	r3
   108f8:	andeq	r1, r2, r0, asr #32
   108fc:	andeq	r1, r2, r0, asr #32
   10900:	andeq	r0, r0, r0
   10904:	push	{r4, lr}
   10908:	ldr	r4, [pc, #24]	; 10928 <_start@@Base+0xec>
   1090c:	ldrb	r3, [r4]
   10910:	cmp	r3, #0
   10914:	popne	{r4, pc}
   10918:	bl	1089c <_start@@Base+0x60>
   1091c:	mov	r3, #1
   10920:	strb	r3, [r4]
   10924:	pop	{r4, pc}
   10928:	andeq	r1, r2, r0, asr #32
   1092c:	ldr	r0, [pc, #40]	; 1095c <_start@@Base+0x120>
   10930:	ldr	r3, [r0]
   10934:	cmp	r3, #0
   10938:	bne	10940 <_start@@Base+0x104>
   1093c:	b	108cc <_start@@Base+0x90>
   10940:	ldr	r3, [pc, #24]	; 10960 <_start@@Base+0x124>
   10944:	cmp	r3, #0
   10948:	beq	1093c <_start@@Base+0x100>
   1094c:	push	{r4, lr}
   10950:	blx	r3
   10954:	pop	{r4, lr}
   10958:	b	108cc <_start@@Base+0x90>
   1095c:	andeq	r0, r2, r4, lsl pc
   10960:	andeq	r0, r0, r0

00010964 <PrintArray@@Base>:
   10964:	push	{r4, r5, r6, r7, r8, lr}
   10968:	mov	r6, r1
   1096c:	mov	r5, r0
   10970:	mov	r0, #91	; 0x5b
   10974:	bl	106d8 <putchar@plt>
   10978:	cmp	r6, #0
   1097c:	ble	109a4 <PrintArray@@Base+0x40>
   10980:	ldr	r7, [pc, #40]	; 109b0 <PrintArray@@Base+0x4c>
   10984:	sub	r5, r5, #4
   10988:	mov	r4, #0
   1098c:	add	r4, r4, #1
   10990:	ldr	r1, [r5, #4]!
   10994:	mov	r0, r7
   10998:	bl	10684 <printf@plt>
   1099c:	cmp	r6, r4
   109a0:	bne	1098c <PrintArray@@Base+0x28>
   109a4:	ldr	r0, [pc, #8]	; 109b4 <PrintArray@@Base+0x50>
   109a8:	pop	{r4, r5, r6, r7, r8, lr}
   109ac:	b	106a8 <puts@plt>
   109b0:	andeq	r0, r1, ip, lsr #20
   109b4:	andeq	r0, r1, r8, lsr #20

000109b8 <__libc_csu_init@@Base>:
   109b8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   109bc:	mov	r7, r0
   109c0:	ldr	r6, [pc, #72]	; 10a10 <__libc_csu_init@@Base+0x58>
   109c4:	ldr	r5, [pc, #72]	; 10a14 <__libc_csu_init@@Base+0x5c>
   109c8:	add	r6, pc, r6
   109cc:	add	r5, pc, r5
   109d0:	sub	r6, r6, r5
   109d4:	mov	r8, r1
   109d8:	mov	r9, r2
   109dc:	bl	10664 <printf@plt-0x20>
   109e0:	asrs	r6, r6, #2
   109e4:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   109e8:	mov	r4, #0
   109ec:	add	r4, r4, #1
   109f0:	ldr	r3, [r5], #4
   109f4:	mov	r2, r9
   109f8:	mov	r1, r8
   109fc:	mov	r0, r7
   10a00:	blx	r3
   10a04:	cmp	r6, r4
   10a08:	bne	109ec <__libc_csu_init@@Base+0x34>
   10a0c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   10a10:	andeq	r0, r1, r0, asr #10
   10a14:	andeq	r0, r1, r8, lsr r5

00010a18 <__libc_csu_fini@@Base>:
   10a18:	bx	lr

Disassembly of section .fini:

00010a1c <.fini>:
   10a1c:	push	{r3, lr}
   10a20:	pop	{r3, pc}
