
../repos/stcorp-coda-3a25f25/CMakeFiles/coda.dir/libcoda/coda-mem-cursor.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <read_array>:
       0:	mov	ip, sp
       4:	sub	sp, sp, #640	; 0x280
       8:	str	ip, [sp]
       c:	str	lr, [sp, #4]
      10:	str	r4, [sp, #8]
      14:	str	r5, [sp, #12]
      18:	str	r6, [sp, #16]
      1c:	str	r7, [sp, #20]
      20:	str	r8, [sp, #24]
      24:	str	r9, [sp, #28]
      28:	str	sl, [sp, #32]
      2c:	ldr	r8, [ip]
      30:	mov	r4, r3
      34:	mov	r5, r2
      38:	mov	r6, r1
      3c:	mov	r7, r0
      40:	add	r1, sp, #40	; 0x28
      44:	add	r2, sp, #48	; 0x30
      48:	mov	r0, r7
      4c:	bl	0 <coda_cursor_get_array_dim>
      50:	cmp	r0, #0
      54:	beq	60 <read_array+0x60>
      58:	mvn	r0, #0
      5c:	b	2c0 <read_array+0x2c0>
      60:	mov	r2, r7
      64:	add	r3, sp, #120	; 0x78
      68:	mov	lr, #130	; 0x82
      6c:	ldr	ip, [r2], #4
      70:	subs	lr, lr, #1
      74:	str	ip, [r3], #4
      78:	bne	6c <read_array+0x6c>
      7c:	ldr	r0, [sp, #40]	; 0x28
      80:	cmp	r0, #1
      84:	ble	98 <read_array+0x98>
      88:	cmp	r8, #1
      8c:	movne	r0, #1
      90:	moveq	r0, #0
      94:	b	9c <read_array+0x9c>
      98:	mov	r0, #1
      9c:	cmp	r0, #0
      a0:	bne	21c <read_array+0x21c>
      a4:	mov	ip, #1
      a8:	str	ip, [sp, #80]	; 0x50
      ac:	mov	r2, #0
      b0:	ldr	r1, [sp, #40]	; 0x28
      b4:	cmp	r2, r1
      b8:	bge	e8 <read_array+0xe8>
      bc:	add	r3, sp, #80	; 0x50
      c0:	lsl	r1, r2, #2
      c4:	add	r0, r3, r1
      c8:	add	r1, sp, #80	; 0x50
      cc:	ldr	r3, [r1, r2, lsl #2]
      d0:	add	r1, sp, #48	; 0x30
      d4:	ldr	r1, [r1, r2, lsl #2]
      d8:	mul	ip, r3, r1
      dc:	str	ip, [r0, #4]
      e0:	add	r2, r2, #1
      e4:	b	b0 <read_array+0xb0>
      e8:	add	r0, sp, #80	; 0x50
      ec:	ldr	r3, [sp, #40]	; 0x28
      f0:	lsl	r1, r3, #2
      f4:	add	ip, r0, r1
      f8:	sub	lr, ip, #4096	; 0x1000
      fc:	ldr	r8, [lr, #4092]	; 0xffc
     100:	add	r3, sp, #80	; 0x50
     104:	ldr	r2, [sp, #40]	; 0x28
     108:	ldr	r7, [r3, r2, lsl #2]
     10c:	cmp	r7, #0
     110:	ble	2bc <read_array+0x2bc>
     114:	mov	r9, #0
     118:	mov	sl, #0
     11c:	add	r0, sp, #120	; 0x78
     120:	mov	r1, #0
     124:	bl	0 <coda_cursor_goto_array_element_by_index>
     128:	cmp	r0, #0
     12c:	beq	138 <read_array+0x138>
     130:	mvn	r0, #0
     134:	b	2c0 <read_array+0x2c0>
     138:	add	r0, sp, #120	; 0x78
     13c:	mla	r1, sl, r4, r5
     140:	blx	r6
     144:	cmp	r0, #0
     148:	beq	154 <read_array+0x154>
     14c:	mvn	r0, #0
     150:	b	2c0 <read_array+0x2c0>
     154:	add	r9, r9, #1
     158:	cmp	r9, r7
     15c:	bge	178 <read_array+0x178>
     160:	add	r0, sp, #120	; 0x78
     164:	bl	0 <coda_cursor_goto_next_array_element>
     168:	cmp	r0, #0
     16c:	beq	178 <read_array+0x178>
     170:	mvn	r0, #0
     174:	b	2c0 <read_array+0x2c0>
     178:	add	sl, sl, r8
     17c:	cmp	sl, r7
     180:	blt	138 <read_array+0x138>
     184:	cmp	r9, r7
     188:	beq	2bc <read_array+0x2bc>
     18c:	add	r1, sp, #80	; 0x50
     190:	ldr	r3, [sp, #40]	; 0x28
     194:	lsl	r3, r3, #2
     198:	add	r3, r1, r3
     19c:	sub	lr, r3, #4096	; 0x1000
     1a0:	ldr	r3, [lr, #4088]	; 0xff8
     1a4:	add	r1, sp, #80	; 0x50
     1a8:	ldr	ip, [sp, #40]	; 0x28
     1ac:	ldr	r0, [r1, ip, lsl #2]
     1b0:	sub	r3, r3, r0
     1b4:	add	sl, sl, r3
     1b8:	ldr	r0, [sp, #40]	; 0x28
     1bc:	sub	r3, r0, #3
     1c0:	cmp	r3, #0
     1c4:	blt	1e8 <read_array+0x1e8>
     1c8:	add	r1, sp, #80	; 0x50
     1cc:	lsl	r2, r3, #2
     1d0:	add	ip, r1, r2
     1d4:	ldr	r2, [ip, #8]
     1d8:	cmp	sl, r2
     1dc:	movge	ip, #1
     1e0:	movlt	ip, #0
     1e4:	b	1ec <read_array+0x1ec>
     1e8:	mov	ip, #0
     1ec:	cmp	ip, #0
     1f0:	beq	138 <read_array+0x138>
     1f4:	add	ip, sp, #80	; 0x50
     1f8:	ldr	r2, [ip, r3, lsl #2]
     1fc:	add	r0, sp, #80	; 0x50
     200:	lsl	ip, r3, #2
     204:	add	ip, r0, ip
     208:	ldr	ip, [ip, #8]
     20c:	sub	r0, r2, ip
     210:	add	sl, sl, r0
     214:	sub	r3, r3, #1
     218:	b	1c0 <read_array+0x1c0>
     21c:	mov	r7, #1
     220:	mov	r2, #0
     224:	ldr	r1, [sp, #40]	; 0x28
     228:	cmp	r2, r1
     22c:	bge	244 <read_array+0x244>
     230:	add	r3, sp, #48	; 0x30
     234:	ldr	ip, [r3, r2, lsl #2]
     238:	mul	r7, r7, ip
     23c:	add	r2, r2, #1
     240:	b	224 <read_array+0x224>
     244:	cmp	r7, #0
     248:	ble	2bc <read_array+0x2bc>
     24c:	add	r0, sp, #120	; 0x78
     250:	mov	r1, #0
     254:	bl	0 <coda_cursor_goto_array_element_by_index>
     258:	cmp	r0, #0
     25c:	beq	268 <read_array+0x268>
     260:	mvn	r0, #0
     264:	b	2c0 <read_array+0x2c0>
     268:	mov	r8, #0
     26c:	cmp	r8, r7
     270:	bge	2bc <read_array+0x2bc>
     274:	add	r0, sp, #120	; 0x78
     278:	mla	r1, r8, r4, r5
     27c:	blx	r6
     280:	cmp	r0, #0
     284:	beq	290 <read_array+0x290>
     288:	mvn	r0, #0
     28c:	b	2c0 <read_array+0x2c0>
     290:	sub	r2, r7, #1
     294:	cmp	r8, r2
     298:	bge	2b4 <read_array+0x2b4>
     29c:	add	r0, sp, #120	; 0x78
     2a0:	bl	0 <coda_cursor_goto_next_array_element>
     2a4:	cmp	r0, #0
     2a8:	beq	2b4 <read_array+0x2b4>
     2ac:	mvn	r0, #0
     2b0:	b	2c0 <read_array+0x2c0>
     2b4:	add	r8, r8, #1
     2b8:	b	26c <read_array+0x26c>
     2bc:	mov	r0, #0
     2c0:	ldr	r4, [sp, #8]
     2c4:	ldr	r5, [sp, #12]
     2c8:	ldr	r6, [sp, #16]
     2cc:	ldr	r7, [sp, #20]
     2d0:	ldr	r8, [sp, #24]
     2d4:	ldr	r9, [sp, #28]
     2d8:	ldr	sl, [sp, #32]
     2dc:	ldr	lr, [sp, #4]
     2e0:	add	sp, sp, #640	; 0x280
     2e4:	bx	lr

000002e8 <read_partial_array>:
     2e8:	mov	ip, sp
     2ec:	sub	sp, sp, #552	; 0x228
     2f0:	str	ip, [sp]
     2f4:	str	lr, [sp, #4]
     2f8:	str	r4, [sp, #8]
     2fc:	str	r5, [sp, #12]
     300:	str	r6, [sp, #16]
     304:	str	r7, [sp, #20]
     308:	str	r8, [sp, #24]
     30c:	ldr	r6, [ip, #4]
     310:	ldr	r7, [ip]
     314:	mov	r4, r3
     318:	mov	r5, r1
     31c:	mov	r1, r2
     320:	mov	r2, r0
     324:	add	r3, sp, #32
     328:	mov	lr, #130	; 0x82
     32c:	ldr	ip, [r2], #4
     330:	subs	lr, lr, #1
     334:	str	ip, [r3], #4
     338:	bne	32c <read_partial_array+0x44>
     33c:	cmp	r4, #0
     340:	ble	3b0 <read_partial_array+0xc8>
     344:	add	r0, sp, #32
     348:	bl	0 <coda_cursor_goto_array_element_by_index>
     34c:	cmp	r0, #0
     350:	beq	35c <read_partial_array+0x74>
     354:	mvn	r0, #0
     358:	b	3b4 <read_partial_array+0xcc>
     35c:	mov	r8, #0
     360:	cmp	r8, r4
     364:	bge	3b0 <read_partial_array+0xc8>
     368:	add	r0, sp, #32
     36c:	mla	r1, r8, r6, r7
     370:	blx	r5
     374:	cmp	r0, #0
     378:	beq	384 <read_partial_array+0x9c>
     37c:	mvn	r0, #0
     380:	b	3b4 <read_partial_array+0xcc>
     384:	sub	r1, r4, #1
     388:	cmp	r8, r1
     38c:	bge	3a8 <read_partial_array+0xc0>
     390:	add	r0, sp, #32
     394:	bl	0 <coda_cursor_goto_next_array_element>
     398:	cmp	r0, #0
     39c:	beq	3a8 <read_partial_array+0xc0>
     3a0:	mvn	r0, #0
     3a4:	b	3b4 <read_partial_array+0xcc>
     3a8:	add	r8, r8, #1
     3ac:	b	360 <read_partial_array+0x78>
     3b0:	mov	r0, #0
     3b4:	ldr	r4, [sp, #8]
     3b8:	ldr	r5, [sp, #12]
     3bc:	ldr	r6, [sp, #16]
     3c0:	ldr	r7, [sp, #20]
     3c4:	ldr	r8, [sp, #24]
     3c8:	ldr	lr, [sp, #4]
     3cc:	add	sp, sp, #552	; 0x228
     3d0:	bx	lr

000003d4 <transpose_array>:
     3d4:	mov	ip, sp
     3d8:	sub	sp, sp, #200	; 0xc8
     3dc:	str	ip, [sp, #4]
     3e0:	str	lr, [sp, #8]
     3e4:	str	r4, [sp, #16]
     3e8:	str	r5, [sp, #20]
     3ec:	str	r6, [sp, #24]
     3f0:	str	r7, [sp, #28]
     3f4:	str	r8, [sp, #32]
     3f8:	str	r9, [sp, #36]	; 0x24
     3fc:	mov	r6, r2
     400:	mov	r5, r1
     404:	mov	r8, #0
     408:	add	r1, sp, #40	; 0x28
     40c:	add	r2, sp, #48	; 0x30
     410:	bl	0 <coda_cursor_get_array_dim>
     414:	cmp	r0, #0
     418:	beq	424 <transpose_array+0x50>
     41c:	mvn	r0, #0
     420:	b	86c <transpose_array+0x498>
     424:	ldr	r1, [sp, #40]	; 0x28
     428:	cmp	r1, #1
     42c:	bgt	438 <transpose_array+0x64>
     430:	mov	r0, #0
     434:	b	86c <transpose_array+0x498>
     438:	mov	r7, #1
     43c:	mov	r2, #0
     440:	ldr	ip, [sp, #40]	; 0x28
     444:	cmp	r2, ip
     448:	bge	490 <transpose_array+0xbc>
     44c:	add	r1, sp, #48	; 0x30
     450:	ldr	r0, [r1, r2, lsl #2]
     454:	mul	r7, r7, r0
     458:	add	r3, sp, #160	; 0xa0
     45c:	mov	ip, #0
     460:	str	ip, [r3, r2, lsl #2]
     464:	add	r1, sp, #80	; 0x50
     468:	add	r4, sp, #48	; 0x30
     46c:	ldr	ip, [sp, #40]	; 0x28
     470:	sub	r0, ip, r2
     474:	lsl	r3, r0, #2
     478:	add	r3, r4, r3
     47c:	sub	lr, r3, #4096	; 0x1000
     480:	ldr	r3, [lr, #4092]	; 0xffc
     484:	str	r3, [r1, r2, lsl #2]
     488:	add	r2, r2, #1
     48c:	b	440 <transpose_array+0x6c>
     490:	cmp	r7, #1
     494:	bgt	4a0 <transpose_array+0xcc>
     498:	mov	r0, #0
     49c:	b	86c <transpose_array+0x498>
     4a0:	add	ip, sp, #120	; 0x78
     4a4:	ldr	r2, [sp, #40]	; 0x28
     4a8:	mov	r1, #1
     4ac:	str	r1, [ip, r2, lsl #2]
     4b0:	add	ip, sp, #80	; 0x50
     4b4:	ldr	r3, [sp, #40]	; 0x28
     4b8:	mov	r2, #1
     4bc:	str	r2, [ip, r3, lsl #2]
     4c0:	ldr	r4, [sp, #40]	; 0x28
     4c4:	cmp	r4, #0
     4c8:	ble	4fc <transpose_array+0x128>
     4cc:	add	r0, sp, #120	; 0x78
     4d0:	lsl	r3, r4, #2
     4d4:	add	r1, r0, r3
     4d8:	add	r2, sp, #120	; 0x78
     4dc:	ldr	r2, [r2, r4, lsl #2]
     4e0:	add	ip, sp, #80	; 0x50
     4e4:	ldr	r0, [ip, r4, lsl #2]
     4e8:	mul	ip, r2, r0
     4ec:	sub	lr, r1, #4096	; 0x1000
     4f0:	str	ip, [lr, #4092]	; 0xffc
     4f4:	sub	r4, r4, #1
     4f8:	b	4c4 <transpose_array+0xf0>
     4fc:	add	r0, sp, #80	; 0x50
     500:	ldr	r2, [sp, #40]	; 0x28
     504:	mov	r3, #0
     508:	str	r3, [r0, r2, lsl #2]
     50c:	add	r1, sp, #160	; 0xa0
     510:	ldr	r2, [sp, #40]	; 0x28
     514:	mov	r3, #0
     518:	str	r3, [r1, r2, lsl #2]
     51c:	mul	r0, r7, r6
     520:	bl	0 <malloc>
     524:	mov	r4, r0
     528:	cmp	r4, #0
     52c:	bne	554 <transpose_array+0x180>
     530:	mvn	r0, #0
     534:	ldr	r1, [pc, #864]	; 89c <transpose_array+0x4c8>
     538:	mul	r2, r7, r6
     53c:	ldr	r3, [pc, #852]	; 898 <transpose_array+0x4c4>
     540:	mov	r4, #93	; 0x5d
     544:	str	r4, [sp]
     548:	bl	0 <coda_set_error>
     54c:	mvn	r0, #0
     550:	b	86c <transpose_array+0x498>
     554:	cmp	r6, #4
     558:	bcs	6c8 <transpose_array+0x2f4>
     55c:	cmp	r6, #1
     560:	beq	620 <transpose_array+0x24c>
     564:	cmp	r6, #2
     568:	bne	78c <transpose_array+0x3b8>
     56c:	mov	r9, #0
     570:	cmp	r9, r7
     574:	bge	850 <transpose_array+0x47c>
     578:	mov	r1, #0
     57c:	add	r0, r4, r8, lsl #1
     580:	add	ip, r5, r9, lsl #1
     584:	ldrh	r2, [ip]
     588:	bic	ip, r2, #16711680	; 0xff0000
     58c:	bic	ip, ip, #-16777216	; 0xff000000
     590:	strh	ip, [r0]
     594:	add	r2, sp, #120	; 0x78
     598:	ldr	r2, [r2, r1, lsl #2]
     59c:	add	r8, r8, r2
     5a0:	add	r2, sp, #160	; 0xa0
     5a4:	add	ip, sp, #160	; 0xa0
     5a8:	ldr	r0, [ip, r1, lsl #2]
     5ac:	add	ip, r0, #1
     5b0:	str	ip, [r2, r1, lsl #2]
     5b4:	add	r3, sp, #160	; 0xa0
     5b8:	ldr	r0, [r3, r1, lsl #2]
     5bc:	add	r2, sp, #80	; 0x50
     5c0:	ldr	r3, [r2, r1, lsl #2]
     5c4:	cmp	r0, r3
     5c8:	bne	618 <transpose_array+0x244>
     5cc:	add	r0, sp, #160	; 0xa0
     5d0:	mov	r2, #0
     5d4:	str	r2, [r0, r1, lsl #2]
     5d8:	add	r0, sp, #120	; 0x78
     5dc:	ldr	r0, [r0, r1, lsl #2]
     5e0:	add	r2, sp, #80	; 0x50
     5e4:	ldr	r3, [r2, r1, lsl #2]
     5e8:	mul	r3, r0, r3
     5ec:	sub	r0, r8, r3
     5f0:	add	r1, r1, #1
     5f4:	add	r3, sp, #120	; 0x78
     5f8:	ldr	ip, [r3, r1, lsl #2]
     5fc:	add	r8, r0, ip
     600:	add	r2, sp, #160	; 0xa0
     604:	add	r3, sp, #160	; 0xa0
     608:	ldr	r3, [r3, r1, lsl #2]
     60c:	add	r3, r3, #1
     610:	str	r3, [r2, r1, lsl #2]
     614:	b	5b4 <transpose_array+0x1e0>
     618:	add	r9, r9, #1
     61c:	b	570 <transpose_array+0x19c>
     620:	mov	ip, #0
     624:	cmp	ip, r7
     628:	bge	850 <transpose_array+0x47c>
     62c:	mov	r9, #0
     630:	ldrb	r3, [r5, ip]
     634:	and	r0, r3, #255	; 0xff
     638:	strb	r0, [r4, r8]
     63c:	add	r0, sp, #120	; 0x78
     640:	ldr	r0, [r0, r9, lsl #2]
     644:	add	r8, r8, r0
     648:	add	r1, sp, #160	; 0xa0
     64c:	add	r3, sp, #160	; 0xa0
     650:	ldr	r3, [r3, r9, lsl #2]
     654:	add	r0, r3, #1
     658:	str	r0, [r1, r9, lsl #2]
     65c:	add	r1, sp, #160	; 0xa0
     660:	ldr	r3, [r1, r9, lsl #2]
     664:	add	r2, sp, #80	; 0x50
     668:	ldr	r2, [r2, r9, lsl #2]
     66c:	cmp	r3, r2
     670:	bne	6c0 <transpose_array+0x2ec>
     674:	add	r1, sp, #160	; 0xa0
     678:	mov	r0, #0
     67c:	str	r0, [r1, r9, lsl #2]
     680:	add	r2, sp, #120	; 0x78
     684:	ldr	r0, [r2, r9, lsl #2]
     688:	add	r3, sp, #80	; 0x50
     68c:	ldr	r2, [r3, r9, lsl #2]
     690:	mul	r0, r0, r2
     694:	sub	r1, r8, r0
     698:	add	r9, r9, #1
     69c:	add	r3, sp, #120	; 0x78
     6a0:	ldr	r0, [r3, r9, lsl #2]
     6a4:	add	r8, r1, r0
     6a8:	add	r3, sp, #160	; 0xa0
     6ac:	add	r2, sp, #160	; 0xa0
     6b0:	ldr	r0, [r2, r9, lsl #2]
     6b4:	add	r0, r0, #1
     6b8:	str	r0, [r3, r9, lsl #2]
     6bc:	b	65c <transpose_array+0x288>
     6c0:	add	ip, ip, #1
     6c4:	b	624 <transpose_array+0x250>
     6c8:	cmp	r6, #4
     6cc:	beq	7ac <transpose_array+0x3d8>
     6d0:	cmp	r6, #8
     6d4:	bne	78c <transpose_array+0x3b8>
     6d8:	mov	r1, #0
     6dc:	cmp	r1, r7
     6e0:	bge	850 <transpose_array+0x47c>
     6e4:	mov	r9, #0
     6e8:	add	ip, r4, r8, lsl #3
     6ec:	add	r2, r5, r1, lsl #3
     6f0:	ldr	r3, [r2]
     6f4:	ldr	r2, [r2, #4]
     6f8:	str	r3, [ip]
     6fc:	str	r2, [ip, #4]
     700:	add	r3, sp, #120	; 0x78
     704:	ldr	r0, [r3, r9, lsl #2]
     708:	add	r8, r8, r0
     70c:	add	r2, sp, #160	; 0xa0
     710:	add	ip, sp, #160	; 0xa0
     714:	ldr	r3, [ip, r9, lsl #2]
     718:	add	r3, r3, #1
     71c:	str	r3, [r2, r9, lsl #2]
     720:	add	r0, sp, #160	; 0xa0
     724:	ldr	r2, [r0, r9, lsl #2]
     728:	add	r0, sp, #80	; 0x50
     72c:	ldr	r3, [r0, r9, lsl #2]
     730:	cmp	r2, r3
     734:	bne	784 <transpose_array+0x3b0>
     738:	add	r0, sp, #160	; 0xa0
     73c:	mov	ip, #0
     740:	str	ip, [r0, r9, lsl #2]
     744:	add	ip, sp, #120	; 0x78
     748:	ldr	ip, [ip, r9, lsl #2]
     74c:	add	r2, sp, #80	; 0x50
     750:	ldr	r0, [r2, r9, lsl #2]
     754:	mul	r0, ip, r0
     758:	sub	r2, r8, r0
     75c:	add	r9, r9, #1
     760:	add	r0, sp, #120	; 0x78
     764:	ldr	r3, [r0, r9, lsl #2]
     768:	add	r8, r2, r3
     76c:	add	r0, sp, #160	; 0xa0
     770:	add	r2, sp, #160	; 0xa0
     774:	ldr	r2, [r2, r9, lsl #2]
     778:	add	r2, r2, #1
     77c:	str	r2, [r0, r9, lsl #2]
     780:	b	720 <transpose_array+0x34c>
     784:	add	r1, r1, #1
     788:	b	6dc <transpose_array+0x308>
     78c:	ldr	r0, [pc, #252]	; 890 <transpose_array+0x4bc>
     790:	ldr	r1, [pc, #256]	; 898 <transpose_array+0x4c4>
     794:	mov	r2, #172	; 0xac
     798:	ldr	r3, [pc, #244]	; 894 <transpose_array+0x4c0>
     79c:	bl	0 <__assert_fail>
     7a0:	mov	r0, #1
     7a4:	bl	0 <exit>
     7a8:	b	850 <transpose_array+0x47c>
     7ac:	mov	r9, #0
     7b0:	cmp	r9, r7
     7b4:	bge	850 <transpose_array+0x47c>
     7b8:	mov	ip, #0
     7bc:	ldr	r3, [r5, r9, lsl #2]
     7c0:	str	r3, [r4, r8, lsl #2]
     7c4:	add	r1, sp, #120	; 0x78
     7c8:	ldr	r3, [r1, ip, lsl #2]
     7cc:	add	r8, r8, r3
     7d0:	add	r2, sp, #160	; 0xa0
     7d4:	add	r0, sp, #160	; 0xa0
     7d8:	ldr	r0, [r0, ip, lsl #2]
     7dc:	add	r0, r0, #1
     7e0:	str	r0, [r2, ip, lsl #2]
     7e4:	add	r0, sp, #160	; 0xa0
     7e8:	ldr	r3, [r0, ip, lsl #2]
     7ec:	add	r1, sp, #80	; 0x50
     7f0:	ldr	r2, [r1, ip, lsl #2]
     7f4:	cmp	r3, r2
     7f8:	bne	848 <transpose_array+0x474>
     7fc:	add	r0, sp, #160	; 0xa0
     800:	mov	r1, #0
     804:	str	r1, [r0, ip, lsl #2]
     808:	add	r1, sp, #120	; 0x78
     80c:	ldr	r3, [r1, ip, lsl #2]
     810:	add	r1, sp, #80	; 0x50
     814:	ldr	r2, [r1, ip, lsl #2]
     818:	mul	r0, r3, r2
     81c:	sub	r1, r8, r0
     820:	add	ip, ip, #1
     824:	add	r2, sp, #120	; 0x78
     828:	ldr	r3, [r2, ip, lsl #2]
     82c:	add	r8, r1, r3
     830:	add	r0, sp, #160	; 0xa0
     834:	add	r1, sp, #160	; 0xa0
     838:	ldr	r3, [r1, ip, lsl #2]
     83c:	add	r2, r3, #1
     840:	str	r2, [r0, ip, lsl #2]
     844:	b	7e4 <transpose_array+0x410>
     848:	add	r9, r9, #1
     84c:	b	7b0 <transpose_array+0x3dc>
     850:	mul	r2, r7, r6
     854:	mov	r1, r4
     858:	mov	r0, r5
     85c:	bl	0 <memcpy>
     860:	mov	r0, r4
     864:	bl	0 <free>
     868:	mov	r0, #0
     86c:	ldr	r4, [sp, #16]
     870:	ldr	r5, [sp, #20]
     874:	ldr	r6, [sp, #24]
     878:	ldr	r7, [sp, #28]
     87c:	ldr	r8, [sp, #32]
     880:	ldr	r9, [sp, #36]	; 0x24
     884:	ldr	lr, [sp, #8]
     888:	add	sp, sp, #200	; 0xc8
     88c:	bx	lr
     890:	.word	0x000002cf
     894:	.word	0x00000306
     898:	.word	0x00000221
     89c:	.word	0x000002d1

000008a0 <coda_mem_cursor_update_offset>:
     8a0:	mov	ip, sp
     8a4:	sub	sp, sp, #8
     8a8:	str	ip, [sp]
     8ac:	str	lr, [sp, #4]
     8b0:	ldr	r1, [r0, #4]
     8b4:	lsl	r3, r1, #4
     8b8:	add	ip, r0, r3
     8bc:	sub	lr, ip, #4096	; 0x1000
     8c0:	ldr	r1, [lr, #4088]	; 0xff8
     8c4:	ldr	ip, [r1, #8]
     8c8:	cmp	ip, #2
     8cc:	bne	90c <coda_mem_cursor_update_offset+0x6c>
     8d0:	ldr	r2, [r0, #4]
     8d4:	lsl	r2, r2, #4
     8d8:	add	ip, r0, r2
     8dc:	ldr	r1, [r0, #4]
     8e0:	lsl	r1, r1, #4
     8e4:	add	r1, r0, r1
     8e8:	sub	lr, r1, #4096	; 0x1000
     8ec:	ldr	r0, [lr, #4088]	; 0xff8
     8f0:	ldr	r1, [r0, #24]
     8f4:	ldr	r0, [r0, #28]
     8f8:	lsl	r0, r0, #3
     8fc:	orr	r3, r0, r1, lsr #29
     900:	lsl	r2, r1, #3
     904:	str	r2, [ip]
     908:	str	r3, [ip, #4]
     90c:	ldr	lr, [sp, #4]
     910:	add	sp, sp, #8
     914:	bx	lr

00000918 <coda_mem_cursor_goto_record_field_by_index>:
     918:	mov	ip, sp
     91c:	sub	sp, sp, #16
     920:	str	ip, [sp]
     924:	str	lr, [sp, #4]
     928:	str	r4, [sp, #8]
     92c:	str	r5, [sp, #12]
     930:	mov	r4, r1
     934:	mov	r5, r0
     938:	ldr	r2, [r5, #4]
     93c:	lsl	r1, r2, #4
     940:	add	r0, r5, r1
     944:	sub	lr, r0, #4096	; 0x1000
     948:	ldr	r2, [lr, #4088]	; 0xff8
     94c:	ldr	ip, [r2, #8]
     950:	cmp	ip, #0
     954:	bne	a30 <coda_mem_cursor_goto_record_field_by_index+0x118>
     958:	cmp	r4, #0
     95c:	blt	974 <coda_mem_cursor_goto_record_field_by_index+0x5c>
     960:	ldr	r3, [r2, #16]
     964:	cmp	r4, r3
     968:	movge	ip, #1
     96c:	movlt	ip, #0
     970:	b	978 <coda_mem_cursor_goto_record_field_by_index+0x60>
     974:	mov	ip, #1
     978:	cmp	ip, #0
     97c:	beq	99c <coda_mem_cursor_goto_record_field_by_index+0x84>
     980:	mvn	r0, #100	; 0x64
     984:	ldr	r1, [pc, #228]	; a70 <coda_mem_cursor_goto_record_field_by_index+0x158>
     988:	ldr	r3, [r2, #16]
     98c:	mov	r2, r4
     990:	bl	0 <coda_set_error>
     994:	mvn	r0, #0
     998:	b	a5c <coda_mem_cursor_goto_record_field_by_index+0x144>
     99c:	ldr	r0, [r5, #4]
     9a0:	add	ip, r0, #1
     9a4:	str	ip, [r5, #4]
     9a8:	ldr	r0, [r2, #20]
     9ac:	ldr	r0, [r0, r4, lsl #2]
     9b0:	cmp	r0, #0
     9b4:	bne	9dc <coda_mem_cursor_goto_record_field_by_index+0xc4>
     9b8:	ldr	r2, [r2, #4]
     9bc:	ldr	r0, [r2]
     9c0:	bl	0 <coda_no_data_singleton>
     9c4:	ldr	r1, [r5, #4]
     9c8:	lsl	r3, r1, #4
     9cc:	add	r2, r5, r3
     9d0:	sub	lr, r2, #4096	; 0x1000
     9d4:	str	r0, [lr, #4088]	; 0xff8
     9d8:	b	9f8 <coda_mem_cursor_goto_record_field_by_index+0xe0>
     9dc:	ldr	r3, [r5, #4]
     9e0:	lsl	r3, r3, #4
     9e4:	add	r3, r5, r3
     9e8:	ldr	r2, [r2, #20]
     9ec:	ldr	ip, [r2, r4, lsl #2]
     9f0:	sub	lr, r3, #4096	; 0x1000
     9f4:	str	ip, [lr, #4088]	; 0xff8
     9f8:	ldr	r1, [r5, #4]
     9fc:	lsl	r2, r1, #4
     a00:	add	ip, r5, r2
     a04:	sub	lr, ip, #4096	; 0x1000
     a08:	str	r4, [lr, #4092]	; 0xffc
     a0c:	ldr	r0, [r5, #4]
     a10:	lsl	ip, r0, #4
     a14:	add	r2, r5, ip
     a18:	mvn	r1, #0
     a1c:	mvn	r0, #0
     a20:	str	r0, [r2]
     a24:	str	r1, [r2, #4]
     a28:	mov	r0, #0
     a2c:	b	a5c <coda_mem_cursor_goto_record_field_by_index+0x144>
     a30:	ldr	r3, [r2, #8]
     a34:	cmp	r3, #2
     a38:	beq	a50 <coda_mem_cursor_goto_record_field_by_index+0x138>
     a3c:	ldr	r0, [pc, #48]	; a74 <coda_mem_cursor_goto_record_field_by_index+0x15c>
     a40:	ldr	r1, [pc, #52]	; a7c <coda_mem_cursor_goto_record_field_by_index+0x164>
     a44:	mov	r2, #79	; 0x4f
     a48:	ldr	r3, [pc, #40]	; a78 <coda_mem_cursor_goto_record_field_by_index+0x160>
     a4c:	bl	0 <__assert_fail>
     a50:	mov	r1, r4
     a54:	mov	r0, r5
     a58:	bl	0 <coda_ascbin_cursor_goto_record_field_by_index>
     a5c:	ldr	r4, [sp, #8]
     a60:	ldr	r5, [sp, #12]
     a64:	ldr	lr, [sp, #4]
     a68:	add	sp, sp, #16
     a6c:	bx	lr
     a70:	.word	0x000001d8
     a74:	.word	0x000001be
     a78:	.word	0x00000316
     a7c:	.word	0x00000000

00000a80 <coda_mem_cursor_goto_next_record_field>:
     a80:	mov	ip, sp
     a84:	sub	sp, sp, #24
     a88:	str	ip, [sp]
     a8c:	str	lr, [sp, #4]
     a90:	str	r4, [sp, #8]
     a94:	str	r5, [sp, #12]
     a98:	str	r6, [sp, #16]
     a9c:	mov	r5, r0
     aa0:	ldr	r3, [r5, #4]
     aa4:	lsl	r0, r3, #4
     aa8:	add	r0, r5, r0
     aac:	sub	lr, r0, #4096	; 0x1000
     ab0:	ldr	r6, [lr, #4072]	; 0xfe8
     ab4:	ldr	r0, [r6, #8]
     ab8:	cmp	r0, #0
     abc:	bne	ba4 <coda_mem_cursor_goto_next_record_field+0x124>
     ac0:	ldr	ip, [r5, #4]
     ac4:	lsl	r2, ip, #4
     ac8:	add	r3, r5, r2
     acc:	sub	lr, r3, #4096	; 0x1000
     ad0:	ldr	ip, [lr, #4092]	; 0xffc
     ad4:	add	r4, ip, #1
     ad8:	cmp	r4, #0
     adc:	blt	af4 <coda_mem_cursor_goto_next_record_field+0x74>
     ae0:	ldr	r1, [r6, #16]
     ae4:	cmp	r4, r1
     ae8:	movge	r0, #1
     aec:	movlt	r0, #0
     af0:	b	af8 <coda_mem_cursor_goto_next_record_field+0x78>
     af4:	mov	r0, #1
     af8:	cmp	r0, #0
     afc:	beq	b1c <coda_mem_cursor_goto_next_record_field+0x9c>
     b00:	mvn	r0, #100	; 0x64
     b04:	ldr	r1, [pc, #216]	; be4 <coda_mem_cursor_goto_next_record_field+0x164>
     b08:	ldr	r3, [r6, #16]
     b0c:	mov	r2, r4
     b10:	bl	0 <coda_set_error>
     b14:	mvn	r0, #0
     b18:	b	bcc <coda_mem_cursor_goto_next_record_field+0x14c>
     b1c:	ldr	r1, [r6, #20]
     b20:	ldr	r0, [r1, r4, lsl #2]
     b24:	cmp	r0, #0
     b28:	bne	b50 <coda_mem_cursor_goto_next_record_field+0xd0>
     b2c:	ldr	r3, [r6, #4]
     b30:	ldr	r0, [r3]
     b34:	bl	0 <coda_no_data_singleton>
     b38:	ldr	ip, [r5, #4]
     b3c:	lsl	r1, ip, #4
     b40:	add	r2, r5, r1
     b44:	sub	lr, r2, #4096	; 0x1000
     b48:	str	r0, [lr, #4088]	; 0xff8
     b4c:	b	b6c <coda_mem_cursor_goto_next_record_field+0xec>
     b50:	ldr	r2, [r5, #4]
     b54:	lsl	r2, r2, #4
     b58:	add	r3, r5, r2
     b5c:	ldr	r1, [r6, #20]
     b60:	ldr	ip, [r1, r4, lsl #2]
     b64:	sub	lr, r3, #4096	; 0x1000
     b68:	str	ip, [lr, #4088]	; 0xff8
     b6c:	ldr	ip, [r5, #4]
     b70:	lsl	ip, ip, #4
     b74:	add	r1, r5, ip
     b78:	sub	lr, r1, #4096	; 0x1000
     b7c:	str	r4, [lr, #4092]	; 0xffc
     b80:	ldr	r3, [r5, #4]
     b84:	lsl	r2, r3, #4
     b88:	add	r2, r5, r2
     b8c:	mvn	r1, #0
     b90:	mvn	r0, #0
     b94:	str	r0, [r2]
     b98:	str	r1, [r2, #4]
     b9c:	mov	r0, #0
     ba0:	b	bcc <coda_mem_cursor_goto_next_record_field+0x14c>
     ba4:	ldr	r1, [r6, #8]
     ba8:	cmp	r1, #2
     bac:	beq	bc4 <coda_mem_cursor_goto_next_record_field+0x144>
     bb0:	ldr	r0, [pc, #52]	; bec <coda_mem_cursor_goto_next_record_field+0x16c>
     bb4:	ldr	r1, [pc, #52]	; bf0 <coda_mem_cursor_goto_next_record_field+0x170>
     bb8:	mov	r2, #111	; 0x6f
     bbc:	ldr	r3, [pc, #36]	; be8 <coda_mem_cursor_goto_next_record_field+0x168>
     bc0:	bl	0 <__assert_fail>
     bc4:	mov	r0, r5
     bc8:	bl	0 <coda_ascbin_cursor_goto_next_record_field>
     bcc:	ldr	r4, [sp, #8]
     bd0:	ldr	r5, [sp, #12]
     bd4:	ldr	r6, [sp, #16]
     bd8:	ldr	lr, [sp, #4]
     bdc:	add	sp, sp, #24
     be0:	bx	lr
     be4:	.word	0x000001d8
     be8:	.word	0x00000341
     bec:	.word	0x000001be
     bf0:	.word	0x00000000

00000bf4 <coda_mem_cursor_goto_available_union_field>:
     bf4:	mov	ip, sp
     bf8:	sub	sp, sp, #24
     bfc:	str	ip, [sp]
     c00:	str	lr, [sp, #4]
     c04:	str	r4, [sp, #8]
     c08:	str	r5, [sp, #12]
     c0c:	mov	r4, r0
     c10:	ldr	r2, [r4, #4]
     c14:	lsl	r3, r2, #4
     c18:	add	r3, r4, r3
     c1c:	sub	lr, r3, #4096	; 0x1000
     c20:	ldr	r5, [lr, #4088]	; 0xff8
     c24:	ldr	r1, [r5, #8]
     c28:	cmp	r1, #0
     c2c:	bne	ca8 <coda_mem_cursor_goto_available_union_field+0xb4>
     c30:	add	r1, sp, #16
     c34:	mov	r0, r4
     c38:	bl	163c <coda_mem_cursor_get_available_union_field_index>
     c3c:	cmp	r0, #0
     c40:	beq	c4c <coda_mem_cursor_goto_available_union_field+0x58>
     c44:	mvn	r0, #0
     c48:	b	cd0 <coda_mem_cursor_goto_available_union_field+0xdc>
     c4c:	ldr	ip, [r4, #4]
     c50:	lsl	r3, ip, #4
     c54:	add	r3, r4, r3
     c58:	ldr	r1, [r5, #20]
     c5c:	ldr	r2, [sp, #16]
     c60:	ldr	r0, [r1, r2, lsl #2]
     c64:	sub	lr, r3, #4096	; 0x1000
     c68:	str	r0, [lr, #4088]	; 0xff8
     c6c:	ldr	r2, [r4, #4]
     c70:	lsl	ip, r2, #4
     c74:	add	r0, r4, ip
     c78:	ldr	r1, [sp, #16]
     c7c:	sub	lr, r0, #4096	; 0x1000
     c80:	str	r1, [lr, #4092]	; 0xffc
     c84:	ldr	r2, [r4, #4]
     c88:	lsl	r1, r2, #4
     c8c:	add	r2, r4, r1
     c90:	mvn	r1, #0
     c94:	mvn	r0, #0
     c98:	str	r0, [r2]
     c9c:	str	r1, [r2, #4]
     ca0:	mov	r0, #0
     ca4:	b	cd0 <coda_mem_cursor_goto_available_union_field+0xdc>
     ca8:	ldr	ip, [r5, #8]
     cac:	cmp	ip, #2
     cb0:	beq	cc8 <coda_mem_cursor_goto_available_union_field+0xd4>
     cb4:	ldr	r0, [pc, #40]	; ce4 <coda_mem_cursor_goto_available_union_field+0xf0>
     cb8:	ldr	r1, [pc, #40]	; ce8 <coda_mem_cursor_goto_available_union_field+0xf4>
     cbc:	mov	r2, #134	; 0x86
     cc0:	ldr	r3, [pc, #36]	; cec <coda_mem_cursor_goto_available_union_field+0xf8>
     cc4:	bl	0 <__assert_fail>
     cc8:	mov	r0, r4
     ccc:	bl	0 <coda_ascbin_cursor_goto_available_union_field>
     cd0:	ldr	r4, [sp, #8]
     cd4:	ldr	r5, [sp, #12]
     cd8:	ldr	lr, [sp, #4]
     cdc:	add	sp, sp, #24
     ce0:	bx	lr
     ce4:	.word	0x000001be
     ce8:	.word	0x00000000
     cec:	.word	0x00000368

00000cf0 <coda_mem_cursor_goto_array_element>:
     cf0:	mov	ip, sp
     cf4:	sub	sp, sp, #24
     cf8:	str	ip, [sp]
     cfc:	str	lr, [sp, #4]
     d00:	str	r4, [sp, #8]
     d04:	str	r5, [sp, #12]
     d08:	str	r6, [sp, #16]
     d0c:	mov	r4, r2
     d10:	mov	r5, r1
     d14:	mov	r6, r0
     d18:	ldr	r3, [r6, #4]
     d1c:	lsl	r2, r3, #4
     d20:	add	r2, r6, r2
     d24:	sub	lr, r2, #4096	; 0x1000
     d28:	ldr	ip, [lr, #4088]	; 0xff8
     d2c:	ldr	r0, [ip, #8]
     d30:	cmp	r0, #1
     d34:	bne	e1c <coda_mem_cursor_goto_array_element+0x12c>
     d38:	cmp	r5, #1
     d3c:	beq	d58 <coda_mem_cursor_goto_array_element+0x68>
     d40:	mvn	r0, #105	; 0x69
     d44:	ldr	r1, [pc, #280]	; e64 <coda_mem_cursor_goto_array_element+0x174>
     d48:	mov	r2, r5
     d4c:	bl	0 <coda_set_error>
     d50:	mvn	r0, #0
     d54:	b	e4c <coda_mem_cursor_goto_array_element+0x15c>
     d58:	ldr	r1, [pc, #276]	; e74 <coda_mem_cursor_goto_array_element+0x184>
     d5c:	ldr	r0, [r1]
     d60:	cmp	r0, #0
     d64:	beq	db4 <coda_mem_cursor_goto_array_element+0xc4>
     d68:	ldr	r2, [r4]
     d6c:	cmp	r2, #0
     d70:	blt	d8c <coda_mem_cursor_goto_array_element+0x9c>
     d74:	ldr	r2, [r4]
     d78:	ldr	r3, [ip, #16]
     d7c:	cmp	r2, r3
     d80:	movge	r3, #1
     d84:	movlt	r3, #0
     d88:	b	d90 <coda_mem_cursor_goto_array_element+0xa0>
     d8c:	mov	r3, #1
     d90:	cmp	r3, #0
     d94:	beq	db4 <coda_mem_cursor_goto_array_element+0xc4>
     d98:	mvn	r0, #106	; 0x6a
     d9c:	ldr	r1, [pc, #196]	; e68 <coda_mem_cursor_goto_array_element+0x178>
     da0:	ldr	r2, [r4]
     da4:	ldr	r3, [ip, #16]
     da8:	bl	0 <coda_set_error>
     dac:	mvn	r0, #0
     db0:	b	e4c <coda_mem_cursor_goto_array_element+0x15c>
     db4:	ldr	r1, [r6, #4]
     db8:	add	r0, r1, #1
     dbc:	str	r0, [r6, #4]
     dc0:	ldr	r3, [r6, #4]
     dc4:	lsl	r2, r3, #4
     dc8:	add	r0, r6, r2
     dcc:	ldr	r2, [ip, #20]
     dd0:	ldr	ip, [r4]
     dd4:	ldr	r3, [r2, ip, lsl #2]
     dd8:	sub	lr, r0, #4096	; 0x1000
     ddc:	str	r3, [lr, #4088]	; 0xff8
     de0:	ldr	ip, [r6, #4]
     de4:	lsl	r1, ip, #4
     de8:	add	r3, r6, r1
     dec:	ldr	r0, [r4]
     df0:	sub	lr, r3, #4096	; 0x1000
     df4:	str	r0, [lr, #4092]	; 0xffc
     df8:	ldr	r0, [r6, #4]
     dfc:	lsl	r1, r0, #4
     e00:	add	ip, r6, r1
     e04:	mvn	r1, #0
     e08:	mvn	r0, #0
     e0c:	str	r0, [ip]
     e10:	str	r1, [ip, #4]
     e14:	mov	r0, #0
     e18:	b	e4c <coda_mem_cursor_goto_array_element+0x15c>
     e1c:	ldr	r3, [ip, #8]
     e20:	cmp	r3, #2
     e24:	beq	e3c <coda_mem_cursor_goto_array_element+0x14c>
     e28:	ldr	r0, [pc, #60]	; e6c <coda_mem_cursor_goto_array_element+0x17c>
     e2c:	ldr	r1, [pc, #68]	; e78 <coda_mem_cursor_goto_array_element+0x188>
     e30:	mov	r2, #169	; 0xa9
     e34:	ldr	r3, [pc, #52]	; e70 <coda_mem_cursor_goto_array_element+0x180>
     e38:	bl	0 <__assert_fail>
     e3c:	mov	r2, r4
     e40:	mov	r1, r5
     e44:	mov	r0, r6
     e48:	bl	0 <coda_ascbin_cursor_goto_array_element>
     e4c:	ldr	r4, [sp, #8]
     e50:	ldr	r5, [sp, #12]
     e54:	ldr	r6, [sp, #16]
     e58:	ldr	lr, [sp, #4]
     e5c:	add	sp, sp, #24
     e60:	bx	lr
     e64:	.word	0x000000de
     e68:	.word	0x000000b0
     e6c:	.word	0x000001be
     e70:	.word	0x00000393
	...

00000e7c <coda_mem_cursor_goto_array_element_by_index>:
     e7c:	mov	ip, sp
     e80:	sub	sp, sp, #16
     e84:	str	ip, [sp]
     e88:	str	lr, [sp, #4]
     e8c:	str	r4, [sp, #8]
     e90:	str	r5, [sp, #12]
     e94:	mov	r4, r1
     e98:	mov	r5, r0
     e9c:	ldr	r3, [r5, #4]
     ea0:	lsl	r1, r3, #4
     ea4:	add	r2, r5, r1
     ea8:	sub	lr, r2, #4096	; 0x1000
     eac:	ldr	r2, [lr, #4088]	; 0xff8
     eb0:	ldr	r3, [r2, #8]
     eb4:	cmp	r3, #1
     eb8:	bne	f70 <coda_mem_cursor_goto_array_element_by_index+0xf4>
     ebc:	ldr	ip, [pc, #248]	; fbc <coda_mem_cursor_goto_array_element_by_index+0x140>
     ec0:	ldr	r3, [ip]
     ec4:	cmp	r3, #0
     ec8:	beq	f10 <coda_mem_cursor_goto_array_element_by_index+0x94>
     ecc:	cmp	r4, #0
     ed0:	blt	ee8 <coda_mem_cursor_goto_array_element_by_index+0x6c>
     ed4:	ldr	r0, [r2, #16]
     ed8:	cmp	r4, r0
     edc:	movge	r0, #1
     ee0:	movlt	r0, #0
     ee4:	b	eec <coda_mem_cursor_goto_array_element_by_index+0x70>
     ee8:	mov	r0, #1
     eec:	cmp	r0, #0
     ef0:	beq	f10 <coda_mem_cursor_goto_array_element_by_index+0x94>
     ef4:	mvn	r0, #106	; 0x6a
     ef8:	ldr	r1, [pc, #180]	; fb4 <coda_mem_cursor_goto_array_element_by_index+0x138>
     efc:	ldr	r3, [r2, #16]
     f00:	mov	r2, r4
     f04:	bl	0 <coda_set_error>
     f08:	mvn	r0, #0
     f0c:	b	f9c <coda_mem_cursor_goto_array_element_by_index+0x120>
     f10:	ldr	r3, [r5, #4]
     f14:	add	r0, r3, #1
     f18:	str	r0, [r5, #4]
     f1c:	ldr	ip, [r5, #4]
     f20:	lsl	r3, ip, #4
     f24:	add	r1, r5, r3
     f28:	ldr	r2, [r2, #20]
     f2c:	ldr	r0, [r2, r4, lsl #2]
     f30:	sub	lr, r1, #4096	; 0x1000
     f34:	str	r0, [lr, #4088]	; 0xff8
     f38:	ldr	r2, [r5, #4]
     f3c:	lsl	r2, r2, #4
     f40:	add	ip, r5, r2
     f44:	sub	lr, ip, #4096	; 0x1000
     f48:	str	r4, [lr, #4092]	; 0xffc
     f4c:	ldr	r0, [r5, #4]
     f50:	lsl	r1, r0, #4
     f54:	add	r2, r5, r1
     f58:	mvn	r1, #0
     f5c:	mvn	r0, #0
     f60:	str	r0, [r2]
     f64:	str	r1, [r2, #4]
     f68:	mov	r0, #0
     f6c:	b	f9c <coda_mem_cursor_goto_array_element_by_index+0x120>
     f70:	ldr	ip, [r2, #8]
     f74:	cmp	ip, #2
     f78:	beq	f90 <coda_mem_cursor_goto_array_element_by_index+0x114>
     f7c:	ldr	r0, [pc, #52]	; fb8 <coda_mem_cursor_goto_array_element_by_index+0x13c>
     f80:	ldr	r1, [pc, #56]	; fc0 <coda_mem_cursor_goto_array_element_by_index+0x144>
     f84:	mov	r2, #197	; 0xc5
     f88:	ldr	r3, [pc, #32]	; fb0 <coda_mem_cursor_goto_array_element_by_index+0x134>
     f8c:	bl	0 <__assert_fail>
     f90:	mov	r1, r4
     f94:	mov	r0, r5
     f98:	bl	0 <coda_ascbin_cursor_goto_array_element_by_index>
     f9c:	ldr	r4, [sp, #8]
     fa0:	ldr	r5, [sp, #12]
     fa4:	ldr	lr, [sp, #4]
     fa8:	add	sp, sp, #16
     fac:	bx	lr
     fb0:	.word	0x000003b6
     fb4:	.word	0x000000b0
     fb8:	.word	0x000001be
	...

00000fc4 <coda_mem_cursor_goto_next_array_element>:
     fc4:	mov	ip, sp
     fc8:	sub	sp, sp, #24
     fcc:	str	ip, [sp]
     fd0:	str	lr, [sp, #4]
     fd4:	str	r4, [sp, #8]
     fd8:	str	r5, [sp, #12]
     fdc:	str	r6, [sp, #16]
     fe0:	mov	r5, r0
     fe4:	ldr	r3, [r5, #4]
     fe8:	lsl	r0, r3, #4
     fec:	add	r0, r5, r0
     ff0:	sub	lr, r0, #4096	; 0x1000
     ff4:	ldr	r6, [lr, #4072]	; 0xfe8
     ff8:	ldr	r0, [r6, #8]
     ffc:	cmp	r0, #1
    1000:	bne	10e8 <coda_mem_cursor_goto_next_array_element+0x124>
    1004:	ldr	ip, [r5, #4]
    1008:	lsl	r2, ip, #4
    100c:	add	r3, r5, r2
    1010:	sub	lr, r3, #4096	; 0x1000
    1014:	ldr	ip, [lr, #4092]	; 0xffc
    1018:	add	r4, ip, #1
    101c:	cmp	r4, #0
    1020:	blt	1038 <coda_mem_cursor_goto_next_array_element+0x74>
    1024:	ldr	r1, [r6, #16]
    1028:	cmp	r4, r1
    102c:	movge	r0, #1
    1030:	movlt	r0, #0
    1034:	b	103c <coda_mem_cursor_goto_next_array_element+0x78>
    1038:	mov	r0, #1
    103c:	cmp	r0, #0
    1040:	beq	1060 <coda_mem_cursor_goto_next_array_element+0x9c>
    1044:	mvn	r0, #106	; 0x6a
    1048:	ldr	r1, [pc, #216]	; 1128 <coda_mem_cursor_goto_next_array_element+0x164>
    104c:	ldr	r3, [r6, #16]
    1050:	mov	r2, r4
    1054:	bl	0 <coda_set_error>
    1058:	mvn	r0, #0
    105c:	b	1110 <coda_mem_cursor_goto_next_array_element+0x14c>
    1060:	ldr	r1, [r6, #20]
    1064:	ldr	r0, [r1, r4, lsl #2]
    1068:	cmp	r0, #0
    106c:	bne	1094 <coda_mem_cursor_goto_next_array_element+0xd0>
    1070:	ldr	r3, [r6, #4]
    1074:	ldr	r0, [r3]
    1078:	bl	0 <coda_no_data_singleton>
    107c:	ldr	ip, [r5, #4]
    1080:	lsl	r1, ip, #4
    1084:	add	r2, r5, r1
    1088:	sub	lr, r2, #4096	; 0x1000
    108c:	str	r0, [lr, #4088]	; 0xff8
    1090:	b	10b0 <coda_mem_cursor_goto_next_array_element+0xec>
    1094:	ldr	r2, [r5, #4]
    1098:	lsl	r2, r2, #4
    109c:	add	r3, r5, r2
    10a0:	ldr	r1, [r6, #20]
    10a4:	ldr	ip, [r1, r4, lsl #2]
    10a8:	sub	lr, r3, #4096	; 0x1000
    10ac:	str	ip, [lr, #4088]	; 0xff8
    10b0:	ldr	ip, [r5, #4]
    10b4:	lsl	ip, ip, #4
    10b8:	add	r1, r5, ip
    10bc:	sub	lr, r1, #4096	; 0x1000
    10c0:	str	r4, [lr, #4092]	; 0xffc
    10c4:	ldr	r3, [r5, #4]
    10c8:	lsl	r2, r3, #4
    10cc:	add	r2, r5, r2
    10d0:	mvn	r1, #0
    10d4:	mvn	r0, #0
    10d8:	str	r0, [r2]
    10dc:	str	r1, [r2, #4]
    10e0:	mov	r0, #0
    10e4:	b	1110 <coda_mem_cursor_goto_next_array_element+0x14c>
    10e8:	ldr	r1, [r6, #8]
    10ec:	cmp	r1, #2
    10f0:	beq	1108 <coda_mem_cursor_goto_next_array_element+0x144>
    10f4:	ldr	r0, [pc, #48]	; 112c <coda_mem_cursor_goto_next_array_element+0x168>
    10f8:	ldr	r1, [pc, #52]	; 1134 <coda_mem_cursor_goto_next_array_element+0x170>
    10fc:	mov	r2, #229	; 0xe5
    1100:	ldr	r3, [pc, #40]	; 1130 <coda_mem_cursor_goto_next_array_element+0x16c>
    1104:	bl	0 <__assert_fail>
    1108:	mov	r0, r5
    110c:	bl	0 <coda_ascbin_cursor_goto_next_array_element>
    1110:	ldr	r4, [sp, #8]
    1114:	ldr	r5, [sp, #12]
    1118:	ldr	r6, [sp, #16]
    111c:	ldr	lr, [sp, #4]
    1120:	add	sp, sp, #24
    1124:	bx	lr
    1128:	.word	0x000000b0
    112c:	.word	0x000001be
    1130:	.word	0x000003e2
    1134:	.word	0x00000000

00001138 <coda_mem_cursor_goto_attributes>:
    1138:	mov	ip, sp
    113c:	sub	sp, sp, #16
    1140:	str	ip, [sp]
    1144:	str	lr, [sp, #4]
    1148:	str	r4, [sp, #8]
    114c:	mov	r4, r0
    1150:	ldr	r1, [r4, #4]
    1154:	add	r2, r1, #1
    1158:	str	r2, [r4, #4]
    115c:	ldr	r1, [r4, #4]
    1160:	lsl	r2, r1, #4
    1164:	add	r2, r4, r2
    1168:	sub	lr, r2, #4096	; 0x1000
    116c:	ldr	ip, [lr, #4072]	; 0xfe8
    1170:	ldr	ip, [ip, #12]
    1174:	cmp	ip, #0
    1178:	bne	11b4 <coda_mem_cursor_goto_attributes+0x7c>
    117c:	ldr	r3, [r4, #4]
    1180:	lsl	r0, r3, #4
    1184:	add	r0, r4, r0
    1188:	sub	lr, r0, #4096	; 0x1000
    118c:	ldr	r3, [lr, #4072]	; 0xfe8
    1190:	ldr	r3, [r3, #4]
    1194:	ldr	r0, [r3]
    1198:	bl	0 <coda_mem_empty_record>
    119c:	ldr	r1, [r4, #4]
    11a0:	lsl	r1, r1, #4
    11a4:	add	r3, r4, r1
    11a8:	sub	lr, r3, #4096	; 0x1000
    11ac:	str	r0, [lr, #4088]	; 0xff8
    11b0:	b	11e0 <coda_mem_cursor_goto_attributes+0xa8>
    11b4:	ldr	ip, [r4, #4]
    11b8:	lsl	r2, ip, #4
    11bc:	add	r2, r4, r2
    11c0:	ldr	ip, [r4, #4]
    11c4:	lsl	r3, ip, #4
    11c8:	add	r0, r4, r3
    11cc:	sub	lr, r0, #4096	; 0x1000
    11d0:	ldr	r1, [lr, #4072]	; 0xfe8
    11d4:	ldr	r3, [r1, #12]
    11d8:	sub	lr, r2, #4096	; 0x1000
    11dc:	str	r3, [lr, #4088]	; 0xff8
    11e0:	ldr	r0, [r4, #4]
    11e4:	lsl	r0, r0, #4
    11e8:	add	r1, r4, r0
    11ec:	mvn	ip, #0
    11f0:	sub	lr, r1, #4096	; 0x1000
    11f4:	str	ip, [lr, #4092]	; 0xffc
    11f8:	ldr	r1, [r4, #4]
    11fc:	lsl	ip, r1, #4
    1200:	add	r2, r4, ip
    1204:	mvn	r1, #0
    1208:	mvn	r0, #0
    120c:	str	r0, [r2]
    1210:	str	r1, [r2, #4]
    1214:	mov	r0, #0
    1218:	ldr	r4, [sp, #8]
    121c:	ldr	lr, [sp, #4]
    1220:	add	sp, sp, #16
    1224:	bx	lr

00001228 <coda_mem_cursor_use_base_type_of_special_type>:
    1228:	mov	ip, sp
    122c:	sub	sp, sp, #16
    1230:	str	ip, [sp]
    1234:	str	lr, [sp, #4]
    1238:	str	r4, [sp, #8]
    123c:	str	r5, [sp, #12]
    1240:	mov	r4, r0
    1244:	ldr	ip, [r4, #4]
    1248:	lsl	r2, ip, #4
    124c:	add	r3, r4, r2
    1250:	sub	lr, r3, #4096	; 0x1000
    1254:	ldr	r5, [lr, #4088]	; 0xff8
    1258:	ldr	r1, [r5, #8]
    125c:	cmp	r1, #3
    1260:	bne	1298 <coda_mem_cursor_use_base_type_of_special_type+0x70>
    1264:	ldr	r1, [r4, #4]
    1268:	lsl	r2, r1, #4
    126c:	add	ip, r4, r2
    1270:	ldr	r3, [r4, #4]
    1274:	lsl	r3, r3, #4
    1278:	add	r0, r4, r3
    127c:	sub	lr, r0, #4096	; 0x1000
    1280:	ldr	r0, [lr, #4088]	; 0xff8
    1284:	ldr	r0, [r0, #16]
    1288:	sub	lr, ip, #4096	; 0x1000
    128c:	str	r0, [lr, #4088]	; 0xff8
    1290:	mov	r0, #0
    1294:	b	12d8 <coda_mem_cursor_use_base_type_of_special_type+0xb0>
    1298:	ldr	r1, [r5, #8]
    129c:	cmp	r1, #2
    12a0:	beq	12b8 <coda_mem_cursor_use_base_type_of_special_type+0x90>
    12a4:	ldr	r0, [pc, #64]	; 12ec <coda_mem_cursor_use_base_type_of_special_type+0xc4>
    12a8:	ldr	r1, [pc, #68]	; 12f4 <coda_mem_cursor_use_base_type_of_special_type+0xcc>
    12ac:	movw	r2, #263	; 0x107
    12b0:	ldr	r3, [pc, #56]	; 12f0 <coda_mem_cursor_use_base_type_of_special_type+0xc8>
    12b4:	bl	0 <__assert_fail>
    12b8:	ldr	r3, [r4, #4]
    12bc:	lsl	r0, r3, #4
    12c0:	add	r2, r4, r0
    12c4:	ldr	ip, [r5, #4]
    12c8:	ldr	r3, [ip, #44]	; 0x2c
    12cc:	sub	lr, r2, #4096	; 0x1000
    12d0:	str	r3, [lr, #4088]	; 0xff8
    12d4:	mov	r0, #0
    12d8:	ldr	r4, [sp, #8]
    12dc:	ldr	r5, [sp, #12]
    12e0:	ldr	lr, [sp, #4]
    12e4:	add	sp, sp, #16
    12e8:	bx	lr
    12ec:	.word	0x000001be
    12f0:	.word	0x0000040a
    12f4:	.word	0x00000000

000012f8 <coda_mem_cursor_get_string_length>:
    12f8:	mov	ip, sp
    12fc:	sub	sp, sp, #24
    1300:	str	ip, [sp]
    1304:	str	lr, [sp, #4]
    1308:	str	r4, [sp, #8]
    130c:	mov	r4, r1
    1310:	add	r1, sp, #16
    1314:	bl	1368 <coda_mem_cursor_get_bit_size>
    1318:	cmp	r0, #0
    131c:	beq	1328 <coda_mem_cursor_get_string_length+0x30>
    1320:	mvn	r0, #0
    1324:	b	1358 <coda_mem_cursor_get_string_length+0x60>
    1328:	ldr	r0, [sp, #20]
    132c:	cmp	r0, #0
    1330:	blt	134c <coda_mem_cursor_get_string_length+0x54>
    1334:	ldr	r3, [sp, #16]
    1338:	ldr	r2, [sp, #20]
    133c:	lsr	r3, r3, #3
    1340:	orr	r1, r3, r2, lsl #29
    1344:	str	r1, [r4]
    1348:	b	1354 <coda_mem_cursor_get_string_length+0x5c>
    134c:	mvn	ip, #0
    1350:	str	ip, [r4]
    1354:	mov	r0, #0
    1358:	ldr	r4, [sp, #8]
    135c:	ldr	lr, [sp, #4]
    1360:	add	sp, sp, #24
    1364:	bx	lr

00001368 <coda_mem_cursor_get_bit_size>:
    1368:	mov	ip, sp
    136c:	sub	sp, sp, #536	; 0x218
    1370:	str	ip, [sp]
    1374:	str	lr, [sp, #4]
    1378:	str	r4, [sp, #8]
    137c:	str	r5, [sp, #12]
    1380:	mov	r4, r1
    1384:	ldr	ip, [r0, #4]
    1388:	lsl	r1, ip, #4
    138c:	add	r1, r0, r1
    1390:	sub	lr, r1, #4096	; 0x1000
    1394:	ldr	r5, [lr, #4088]	; 0xff8
    1398:	ldr	r1, [r5, #8]
    139c:	cmp	r1, #3
    13a0:	bne	13e8 <coda_mem_cursor_get_bit_size+0x80>
    13a4:	mov	r2, r0
    13a8:	add	r3, sp, #16
    13ac:	mov	lr, #130	; 0x82
    13b0:	ldr	ip, [r2], #4
    13b4:	subs	lr, lr, #1
    13b8:	str	ip, [r3], #4
    13bc:	bne	13b0 <coda_mem_cursor_get_bit_size+0x48>
    13c0:	add	r0, sp, #16
    13c4:	bl	0 <coda_cursor_use_base_type_of_special_type>
    13c8:	cmp	r0, #0
    13cc:	beq	13d8 <coda_mem_cursor_get_bit_size+0x70>
    13d0:	mvn	r0, #0
    13d4:	b	146c <coda_mem_cursor_get_bit_size+0x104>
    13d8:	add	r0, sp, #16
    13dc:	mov	r1, r4
    13e0:	bl	0 <coda_cursor_get_bit_size>
    13e4:	b	146c <coda_mem_cursor_get_bit_size+0x104>
    13e8:	ldr	r2, [r5, #8]
    13ec:	cmp	r2, #2
    13f0:	bne	1458 <coda_mem_cursor_get_bit_size+0xf0>
    13f4:	ldr	r2, [r5, #4]
    13f8:	ldr	r1, [r2]
    13fc:	cmp	r1, #0
    1400:	beq	141c <coda_mem_cursor_get_bit_size+0xb4>
    1404:	mov	r1, r4
    1408:	bl	0 <coda_bin_cursor_get_bit_size>
    140c:	cmp	r0, #0
    1410:	beq	1434 <coda_mem_cursor_get_bit_size+0xcc>
    1414:	mvn	r0, #0
    1418:	b	146c <coda_mem_cursor_get_bit_size+0x104>
    141c:	mov	r1, r4
    1420:	bl	0 <coda_ascii_cursor_get_bit_size>
    1424:	cmp	r0, #0
    1428:	beq	1434 <coda_mem_cursor_get_bit_size+0xcc>
    142c:	mvn	r0, #0
    1430:	b	146c <coda_mem_cursor_get_bit_size+0x104>
    1434:	ldr	ip, [r4, #4]
    1438:	cmp	ip, #0
    143c:	bge	1468 <coda_mem_cursor_get_bit_size+0x100>
    1440:	ldr	r3, [r5, #16]
    1444:	lsl	r0, r3, #3
    1448:	asr	r1, r0, #31
    144c:	str	r0, [r4]
    1450:	str	r1, [r4, #4]
    1454:	b	1468 <coda_mem_cursor_get_bit_size+0x100>
    1458:	mvn	r3, #0
    145c:	mvn	r2, #0
    1460:	str	r2, [r4]
    1464:	str	r3, [r4, #4]
    1468:	mov	r0, #0
    146c:	ldr	r4, [sp, #8]
    1470:	ldr	r5, [sp, #12]
    1474:	ldr	lr, [sp, #4]
    1478:	add	sp, sp, #536	; 0x218
    147c:	bx	lr

00001480 <coda_mem_cursor_get_num_elements>:
    1480:	mov	ip, sp
    1484:	sub	sp, sp, #8
    1488:	str	ip, [sp]
    148c:	str	lr, [sp, #4]
    1490:	ldr	r3, [r0, #4]
    1494:	lsl	r2, r3, #4
    1498:	add	r2, r0, r2
    149c:	sub	lr, r2, #4096	; 0x1000
    14a0:	ldr	r2, [lr, #4088]	; 0xff8
    14a4:	ldr	r3, [r2, #8]
    14a8:	cmp	r3, #2
    14ac:	bcs	14f8 <coda_mem_cursor_get_num_elements+0x78>
    14b0:	cmp	r3, #0
    14b4:	bne	14d8 <coda_mem_cursor_get_num_elements+0x58>
    14b8:	ldr	r3, [r0, #4]
    14bc:	lsl	ip, r3, #4
    14c0:	add	r2, r0, ip
    14c4:	sub	lr, r2, #4096	; 0x1000
    14c8:	ldr	ip, [lr, #4088]	; 0xff8
    14cc:	ldr	r2, [ip, #16]
    14d0:	str	r2, [r1]
    14d4:	b	1510 <coda_mem_cursor_get_num_elements+0x90>
    14d8:	ldr	r3, [r0, #4]
    14dc:	lsl	ip, r3, #4
    14e0:	add	r2, r0, ip
    14e4:	sub	lr, r2, #4096	; 0x1000
    14e8:	ldr	r0, [lr, #4088]	; 0xff8
    14ec:	ldr	r0, [r0, #16]
    14f0:	str	r0, [r1]
    14f4:	b	1510 <coda_mem_cursor_get_num_elements+0x90>
    14f8:	cmp	r3, #2
    14fc:	beq	1518 <coda_mem_cursor_get_num_elements+0x98>
    1500:	cmp	r3, #3
    1504:	bne	1510 <coda_mem_cursor_get_num_elements+0x90>
    1508:	mov	ip, #1
    150c:	str	ip, [r1]
    1510:	mov	r0, #0
    1514:	b	1534 <coda_mem_cursor_get_num_elements+0xb4>
    1518:	ldr	r2, [r2, #4]
    151c:	ldr	r2, [r2]
    1520:	cmp	r2, #0
    1524:	bne	1530 <coda_mem_cursor_get_num_elements+0xb0>
    1528:	bl	0 <coda_ascii_cursor_get_num_elements>
    152c:	b	1534 <coda_mem_cursor_get_num_elements+0xb4>
    1530:	bl	0 <coda_bin_cursor_get_num_elements>
    1534:	ldr	lr, [sp, #4]
    1538:	add	sp, sp, #8
    153c:	bx	lr

00001540 <coda_mem_cursor_get_record_field_available_status>:
    1540:	mov	ip, sp
    1544:	sub	sp, sp, #24
    1548:	str	ip, [sp]
    154c:	str	lr, [sp, #4]
    1550:	str	r4, [sp, #8]
    1554:	str	r5, [sp, #12]
    1558:	str	r6, [sp, #16]
    155c:	mov	r4, r2
    1560:	mov	r5, r1
    1564:	ldr	ip, [r0, #4]
    1568:	lsl	r3, ip, #4
    156c:	add	r2, r0, r3
    1570:	sub	lr, r2, #4096	; 0x1000
    1574:	ldr	r6, [lr, #4088]	; 0xff8
    1578:	ldr	r1, [r6, #8]
    157c:	cmp	r1, #2
    1580:	bne	1594 <coda_mem_cursor_get_record_field_available_status+0x54>
    1584:	mov	r2, r4
    1588:	mov	r1, r5
    158c:	bl	0 <coda_ascbin_cursor_get_record_field_available_status>
    1590:	b	1614 <coda_mem_cursor_get_record_field_available_status+0xd4>
    1594:	ldr	ip, [r6, #8]
    1598:	cmp	ip, #0
    159c:	beq	15b4 <coda_mem_cursor_get_record_field_available_status+0x74>
    15a0:	ldr	r0, [pc, #136]	; 1630 <coda_mem_cursor_get_record_field_available_status+0xf0>
    15a4:	ldr	r1, [pc, #140]	; 1638 <coda_mem_cursor_get_record_field_available_status+0xf8>
    15a8:	mov	r2, #364	; 0x16c
    15ac:	ldr	r3, [pc, #128]	; 1634 <coda_mem_cursor_get_record_field_available_status+0xf4>
    15b0:	bl	0 <__assert_fail>
    15b4:	cmp	r5, #0
    15b8:	blt	15d0 <coda_mem_cursor_get_record_field_available_status+0x90>
    15bc:	ldr	r0, [r6, #16]
    15c0:	cmp	r5, r0
    15c4:	movge	r0, #1
    15c8:	movlt	r0, #0
    15cc:	b	15d4 <coda_mem_cursor_get_record_field_available_status+0x94>
    15d0:	mov	r0, #1
    15d4:	cmp	r0, #0
    15d8:	beq	15f8 <coda_mem_cursor_get_record_field_available_status+0xb8>
    15dc:	mvn	r0, #100	; 0x64
    15e0:	ldr	r1, [pc, #68]	; 162c <coda_mem_cursor_get_record_field_available_status+0xec>
    15e4:	ldr	r3, [r6, #16]
    15e8:	mov	r2, r5
    15ec:	bl	0 <coda_set_error>
    15f0:	mvn	r0, #0
    15f4:	b	1614 <coda_mem_cursor_get_record_field_available_status+0xd4>
    15f8:	ldr	r1, [r6, #20]
    15fc:	ldr	r2, [r1, r5, lsl #2]
    1600:	cmp	r2, #0
    1604:	movne	r0, #1
    1608:	moveq	r0, #0
    160c:	str	r0, [r4]
    1610:	mov	r0, #0
    1614:	ldr	r4, [sp, #8]
    1618:	ldr	r5, [sp, #12]
    161c:	ldr	r6, [sp, #16]
    1620:	ldr	lr, [sp, #4]
    1624:	add	sp, sp, #24
    1628:	bx	lr
    162c:	.word	0x000001d8
    1630:	.word	0x00000154
    1634:	.word	0x00000438
    1638:	.word	0x00000000

0000163c <coda_mem_cursor_get_available_union_field_index>:
    163c:	mov	ip, sp
    1640:	sub	sp, sp, #16
    1644:	str	ip, [sp]
    1648:	str	lr, [sp, #4]
    164c:	str	r4, [sp, #8]
    1650:	str	r5, [sp, #12]
    1654:	mov	r4, r1
    1658:	mov	r5, r0
    165c:	ldr	r0, [r5, #4]
    1660:	lsl	r0, r0, #4
    1664:	add	r3, r5, r0
    1668:	sub	lr, r3, #4096	; 0x1000
    166c:	ldr	r3, [lr, #4088]	; 0xff8
    1670:	ldr	ip, [r3, #8]
    1674:	cmp	ip, #0
    1678:	bne	16c8 <coda_mem_cursor_get_available_union_field_index+0x8c>
    167c:	mov	r1, #0
    1680:	ldr	r2, [r3, #16]
    1684:	cmp	r1, r2
    1688:	bge	16b0 <coda_mem_cursor_get_available_union_field_index+0x74>
    168c:	ldr	r0, [r3, #20]
    1690:	ldr	ip, [r0, r1, lsl #2]
    1694:	cmp	ip, #0
    1698:	beq	16a8 <coda_mem_cursor_get_available_union_field_index+0x6c>
    169c:	str	r1, [r4]
    16a0:	mov	r0, #0
    16a4:	b	1708 <coda_mem_cursor_get_available_union_field_index+0xcc>
    16a8:	add	r1, r1, #1
    16ac:	b	1680 <coda_mem_cursor_get_available_union_field_index+0x44>
    16b0:	movw	r0, #65236	; 0xfed4
    16b4:	movt	r0, #65535	; 0xffff
    16b8:	ldr	r1, [pc, #92]	; 171c <coda_mem_cursor_get_available_union_field_index+0xe0>
    16bc:	bl	0 <coda_set_error>
    16c0:	mvn	r0, #0
    16c4:	b	1708 <coda_mem_cursor_get_available_union_field_index+0xcc>
    16c8:	ldr	r2, [r5, #4]
    16cc:	lsl	r1, r2, #4
    16d0:	add	r2, r5, r1
    16d4:	sub	lr, r2, #4096	; 0x1000
    16d8:	ldr	ip, [lr, #4088]	; 0xff8
    16dc:	ldr	r2, [ip, #8]
    16e0:	cmp	r2, #2
    16e4:	beq	16fc <coda_mem_cursor_get_available_union_field_index+0xc0>
    16e8:	ldr	r0, [pc, #48]	; 1720 <coda_mem_cursor_get_available_union_field_index+0xe4>
    16ec:	ldr	r1, [pc, #52]	; 1728 <coda_mem_cursor_get_available_union_field_index+0xec>
    16f0:	movw	r2, #399	; 0x18f
    16f4:	ldr	r3, [pc, #40]	; 1724 <coda_mem_cursor_get_available_union_field_index+0xe8>
    16f8:	bl	0 <__assert_fail>
    16fc:	mov	r1, r4
    1700:	mov	r0, r5
    1704:	bl	0 <coda_ascbin_cursor_get_available_union_field_index>
    1708:	ldr	r4, [sp, #8]
    170c:	ldr	r5, [sp, #12]
    1710:	ldr	lr, [sp, #4]
    1714:	add	sp, sp, #16
    1718:	bx	lr
    171c:	.word	0x0000005f
    1720:	.word	0x00000285
    1724:	.word	0x0000046a
    1728:	.word	0x00000000

0000172c <coda_mem_cursor_get_array_dim>:
    172c:	mov	ip, sp
    1730:	sub	sp, sp, #24
    1734:	str	ip, [sp]
    1738:	str	lr, [sp, #4]
    173c:	str	r4, [sp, #8]
    1740:	str	r5, [sp, #12]
    1744:	str	r6, [sp, #16]
    1748:	mov	r4, r2
    174c:	mov	r5, r1
    1750:	mov	r6, r0
    1754:	ldr	r2, [r6, #4]
    1758:	lsl	r3, r2, #4
    175c:	add	ip, r6, r3
    1760:	sub	lr, ip, #4096	; 0x1000
    1764:	ldr	ip, [lr, #4088]	; 0xff8
    1768:	ldr	r1, [ip, #8]
    176c:	cmp	r1, #2
    1770:	bne	1788 <coda_mem_cursor_get_array_dim+0x5c>
    1774:	mov	r2, r4
    1778:	mov	r1, r5
    177c:	mov	r0, r6
    1780:	bl	0 <coda_ascbin_cursor_get_array_dim>
    1784:	b	181c <coda_mem_cursor_get_array_dim+0xf0>
    1788:	ldr	r2, [ip, #8]
    178c:	cmp	r2, #1
    1790:	beq	17a8 <coda_mem_cursor_get_array_dim+0x7c>
    1794:	ldr	r0, [pc, #156]	; 1838 <coda_mem_cursor_get_array_dim+0x10c>
    1798:	ldr	r1, [pc, #156]	; 183c <coda_mem_cursor_get_array_dim+0x110>
    179c:	movw	r2, #413	; 0x19d
    17a0:	ldr	r3, [pc, #140]	; 1834 <coda_mem_cursor_get_array_dim+0x108>
    17a4:	bl	0 <__assert_fail>
    17a8:	ldr	r1, [r6, #4]
    17ac:	lsl	r1, r1, #4
    17b0:	add	r0, r6, r1
    17b4:	sub	lr, r0, #4096	; 0x1000
    17b8:	ldr	r6, [lr, #4088]	; 0xff8
    17bc:	ldr	r2, [r6, #4]
    17c0:	ldr	r1, [r2, #44]	; 0x2c
    17c4:	cmp	r1, #0
    17c8:	blt	1808 <coda_mem_cursor_get_array_dim+0xdc>
    17cc:	ldr	r0, [r6, #4]
    17d0:	ldr	r3, [r0, #48]	; 0x30
    17d4:	str	r3, [r5]
    17d8:	mov	ip, #0
    17dc:	ldr	r1, [r6, #4]
    17e0:	ldr	r3, [r1, #48]	; 0x30
    17e4:	cmp	ip, r3
    17e8:	bge	1818 <coda_mem_cursor_get_array_dim+0xec>
    17ec:	ldr	r0, [r6, #4]
    17f0:	lsl	r2, ip, #2
    17f4:	add	r0, r0, r2
    17f8:	ldr	r3, [r0, #52]	; 0x34
    17fc:	str	r3, [r4, ip, lsl #2]
    1800:	add	ip, ip, #1
    1804:	b	17dc <coda_mem_cursor_get_array_dim+0xb0>
    1808:	mov	r2, #1
    180c:	str	r2, [r5]
    1810:	ldr	r0, [r6, #16]
    1814:	str	r0, [r4]
    1818:	mov	r0, #0
    181c:	ldr	r4, [sp, #8]
    1820:	ldr	r5, [sp, #12]
    1824:	ldr	r6, [sp, #16]
    1828:	ldr	lr, [sp, #4]
    182c:	add	sp, sp, #24
    1830:	bx	lr
    1834:	.word	0x0000049a
    1838:	.word	0x00000206
    183c:	.word	0x00000000

00001840 <coda_mem_cursor_read_int8>:
    1840:	mov	ip, sp
    1844:	sub	sp, sp, #24
    1848:	str	ip, [sp]
    184c:	str	lr, [sp, #4]
    1850:	str	r4, [sp, #8]
    1854:	str	r5, [sp, #12]
    1858:	str	r6, [sp, #16]
    185c:	mov	r4, r1
    1860:	mov	r5, r0
    1864:	ldr	r2, [r5, #4]
    1868:	lsl	ip, r2, #4
    186c:	add	r1, r5, ip
    1870:	sub	lr, r1, #4096	; 0x1000
    1874:	ldr	r6, [lr, #4088]	; 0xff8
    1878:	ldr	r1, [r6, #8]
    187c:	cmp	r1, #2
    1880:	beq	1898 <coda_mem_cursor_read_int8+0x58>
    1884:	ldr	r0, [pc, #80]	; 18dc <coda_mem_cursor_read_int8+0x9c>
    1888:	ldr	r1, [pc, #84]	; 18e4 <coda_mem_cursor_read_int8+0xa4>
    188c:	movw	r2, #439	; 0x1b7
    1890:	ldr	r3, [pc, #72]	; 18e0 <coda_mem_cursor_read_int8+0xa0>
    1894:	bl	0 <__assert_fail>
    1898:	ldr	r0, [r6, #4]
    189c:	ldr	r3, [r0]
    18a0:	cmp	r3, #0
    18a4:	bne	18b8 <coda_mem_cursor_read_int8+0x78>
    18a8:	mov	r1, r4
    18ac:	mov	r0, r5
    18b0:	bl	0 <coda_ascii_cursor_read_int8>
    18b4:	b	18c4 <coda_mem_cursor_read_int8+0x84>
    18b8:	mov	r1, r4
    18bc:	mov	r0, r5
    18c0:	bl	0 <coda_bin_cursor_read_int8>
    18c4:	ldr	r4, [sp, #8]
    18c8:	ldr	r5, [sp, #12]
    18cc:	ldr	r6, [sp, #16]
    18d0:	ldr	lr, [sp, #4]
    18d4:	add	sp, sp, #24
    18d8:	bx	lr
    18dc:	.word	0x000001be
    18e0:	.word	0x000004b8
    18e4:	.word	0x00000000

000018e8 <coda_mem_cursor_read_uint8>:
    18e8:	mov	ip, sp
    18ec:	sub	sp, sp, #24
    18f0:	str	ip, [sp]
    18f4:	str	lr, [sp, #4]
    18f8:	str	r4, [sp, #8]
    18fc:	str	r5, [sp, #12]
    1900:	str	r6, [sp, #16]
    1904:	mov	r4, r1
    1908:	mov	r5, r0
    190c:	ldr	r2, [r5, #4]
    1910:	lsl	ip, r2, #4
    1914:	add	r1, r5, ip
    1918:	sub	lr, r1, #4096	; 0x1000
    191c:	ldr	r6, [lr, #4088]	; 0xff8
    1920:	ldr	r1, [r6, #8]
    1924:	cmp	r1, #2
    1928:	beq	1940 <coda_mem_cursor_read_uint8+0x58>
    192c:	ldr	r0, [pc, #80]	; 1984 <coda_mem_cursor_read_uint8+0x9c>
    1930:	ldr	r1, [pc, #84]	; 198c <coda_mem_cursor_read_uint8+0xa4>
    1934:	movw	r2, #451	; 0x1c3
    1938:	ldr	r3, [pc, #72]	; 1988 <coda_mem_cursor_read_uint8+0xa0>
    193c:	bl	0 <__assert_fail>
    1940:	ldr	r0, [r6, #4]
    1944:	ldr	r3, [r0]
    1948:	cmp	r3, #0
    194c:	bne	1960 <coda_mem_cursor_read_uint8+0x78>
    1950:	mov	r1, r4
    1954:	mov	r0, r5
    1958:	bl	0 <coda_ascii_cursor_read_uint8>
    195c:	b	196c <coda_mem_cursor_read_uint8+0x84>
    1960:	mov	r1, r4
    1964:	mov	r0, r5
    1968:	bl	0 <coda_bin_cursor_read_uint8>
    196c:	ldr	r4, [sp, #8]
    1970:	ldr	r5, [sp, #12]
    1974:	ldr	r6, [sp, #16]
    1978:	ldr	lr, [sp, #4]
    197c:	add	sp, sp, #24
    1980:	bx	lr
    1984:	.word	0x000001be
    1988:	.word	0x000004d2
    198c:	.word	0x00000000

00001990 <coda_mem_cursor_read_int16>:
    1990:	mov	ip, sp
    1994:	sub	sp, sp, #24
    1998:	str	ip, [sp]
    199c:	str	lr, [sp, #4]
    19a0:	str	r4, [sp, #8]
    19a4:	str	r5, [sp, #12]
    19a8:	str	r6, [sp, #16]
    19ac:	mov	r4, r1
    19b0:	mov	r5, r0
    19b4:	ldr	r2, [r5, #4]
    19b8:	lsl	ip, r2, #4
    19bc:	add	r1, r5, ip
    19c0:	sub	lr, r1, #4096	; 0x1000
    19c4:	ldr	r6, [lr, #4088]	; 0xff8
    19c8:	ldr	r1, [r6, #8]
    19cc:	cmp	r1, #2
    19d0:	beq	19e8 <coda_mem_cursor_read_int16+0x58>
    19d4:	ldr	r0, [pc, #80]	; 1a2c <coda_mem_cursor_read_int16+0x9c>
    19d8:	ldr	r1, [pc, #84]	; 1a34 <coda_mem_cursor_read_int16+0xa4>
    19dc:	movw	r2, #463	; 0x1cf
    19e0:	ldr	r3, [pc, #72]	; 1a30 <coda_mem_cursor_read_int16+0xa0>
    19e4:	bl	0 <__assert_fail>
    19e8:	ldr	r0, [r6, #4]
    19ec:	ldr	r3, [r0]
    19f0:	cmp	r3, #0
    19f4:	bne	1a08 <coda_mem_cursor_read_int16+0x78>
    19f8:	mov	r1, r4
    19fc:	mov	r0, r5
    1a00:	bl	0 <coda_ascii_cursor_read_int16>
    1a04:	b	1a14 <coda_mem_cursor_read_int16+0x84>
    1a08:	mov	r1, r4
    1a0c:	mov	r0, r5
    1a10:	bl	0 <coda_bin_cursor_read_int16>
    1a14:	ldr	r4, [sp, #8]
    1a18:	ldr	r5, [sp, #12]
    1a1c:	ldr	r6, [sp, #16]
    1a20:	ldr	lr, [sp, #4]
    1a24:	add	sp, sp, #24
    1a28:	bx	lr
    1a2c:	.word	0x000001be
    1a30:	.word	0x000004ed
    1a34:	.word	0x00000000

00001a38 <coda_mem_cursor_read_uint16>:
    1a38:	mov	ip, sp
    1a3c:	sub	sp, sp, #24
    1a40:	str	ip, [sp]
    1a44:	str	lr, [sp, #4]
    1a48:	str	r4, [sp, #8]
    1a4c:	str	r5, [sp, #12]
    1a50:	str	r6, [sp, #16]
    1a54:	mov	r4, r1
    1a58:	mov	r5, r0
    1a5c:	ldr	r2, [r5, #4]
    1a60:	lsl	ip, r2, #4
    1a64:	add	r1, r5, ip
    1a68:	sub	lr, r1, #4096	; 0x1000
    1a6c:	ldr	r6, [lr, #4088]	; 0xff8
    1a70:	ldr	r1, [r6, #8]
    1a74:	cmp	r1, #2
    1a78:	beq	1a90 <coda_mem_cursor_read_uint16+0x58>
    1a7c:	ldr	r0, [pc, #80]	; 1ad4 <coda_mem_cursor_read_uint16+0x9c>
    1a80:	ldr	r1, [pc, #84]	; 1adc <coda_mem_cursor_read_uint16+0xa4>
    1a84:	movw	r2, #475	; 0x1db
    1a88:	ldr	r3, [pc, #72]	; 1ad8 <coda_mem_cursor_read_uint16+0xa0>
    1a8c:	bl	0 <__assert_fail>
    1a90:	ldr	r0, [r6, #4]
    1a94:	ldr	r3, [r0]
    1a98:	cmp	r3, #0
    1a9c:	bne	1ab0 <coda_mem_cursor_read_uint16+0x78>
    1aa0:	mov	r1, r4
    1aa4:	mov	r0, r5
    1aa8:	bl	0 <coda_ascii_cursor_read_uint16>
    1aac:	b	1abc <coda_mem_cursor_read_uint16+0x84>
    1ab0:	mov	r1, r4
    1ab4:	mov	r0, r5
    1ab8:	bl	0 <coda_bin_cursor_read_uint16>
    1abc:	ldr	r4, [sp, #8]
    1ac0:	ldr	r5, [sp, #12]
    1ac4:	ldr	r6, [sp, #16]
    1ac8:	ldr	lr, [sp, #4]
    1acc:	add	sp, sp, #24
    1ad0:	bx	lr
    1ad4:	.word	0x000001be
    1ad8:	.word	0x00000508
    1adc:	.word	0x00000000

00001ae0 <coda_mem_cursor_read_int32>:
    1ae0:	mov	ip, sp
    1ae4:	sub	sp, sp, #24
    1ae8:	str	ip, [sp]
    1aec:	str	lr, [sp, #4]
    1af0:	str	r4, [sp, #8]
    1af4:	str	r5, [sp, #12]
    1af8:	str	r6, [sp, #16]
    1afc:	mov	r4, r1
    1b00:	mov	r5, r0
    1b04:	ldr	r2, [r5, #4]
    1b08:	lsl	ip, r2, #4
    1b0c:	add	r1, r5, ip
    1b10:	sub	lr, r1, #4096	; 0x1000
    1b14:	ldr	r6, [lr, #4088]	; 0xff8
    1b18:	ldr	r1, [r6, #8]
    1b1c:	cmp	r1, #2
    1b20:	beq	1b38 <coda_mem_cursor_read_int32+0x58>
    1b24:	ldr	r0, [pc, #80]	; 1b7c <coda_mem_cursor_read_int32+0x9c>
    1b28:	ldr	r1, [pc, #84]	; 1b84 <coda_mem_cursor_read_int32+0xa4>
    1b2c:	movw	r2, #487	; 0x1e7
    1b30:	ldr	r3, [pc, #72]	; 1b80 <coda_mem_cursor_read_int32+0xa0>
    1b34:	bl	0 <__assert_fail>
    1b38:	ldr	r0, [r6, #4]
    1b3c:	ldr	r3, [r0]
    1b40:	cmp	r3, #0
    1b44:	bne	1b58 <coda_mem_cursor_read_int32+0x78>
    1b48:	mov	r1, r4
    1b4c:	mov	r0, r5
    1b50:	bl	0 <coda_ascii_cursor_read_int32>
    1b54:	b	1b64 <coda_mem_cursor_read_int32+0x84>
    1b58:	mov	r1, r4
    1b5c:	mov	r0, r5
    1b60:	bl	0 <coda_bin_cursor_read_int32>
    1b64:	ldr	r4, [sp, #8]
    1b68:	ldr	r5, [sp, #12]
    1b6c:	ldr	r6, [sp, #16]
    1b70:	ldr	lr, [sp, #4]
    1b74:	add	sp, sp, #24
    1b78:	bx	lr
    1b7c:	.word	0x000001be
    1b80:	.word	0x00000524
    1b84:	.word	0x00000000

00001b88 <coda_mem_cursor_read_uint32>:
    1b88:	mov	ip, sp
    1b8c:	sub	sp, sp, #24
    1b90:	str	ip, [sp]
    1b94:	str	lr, [sp, #4]
    1b98:	str	r4, [sp, #8]
    1b9c:	str	r5, [sp, #12]
    1ba0:	str	r6, [sp, #16]
    1ba4:	mov	r4, r1
    1ba8:	mov	r5, r0
    1bac:	ldr	r2, [r5, #4]
    1bb0:	lsl	ip, r2, #4
    1bb4:	add	r1, r5, ip
    1bb8:	sub	lr, r1, #4096	; 0x1000
    1bbc:	ldr	r6, [lr, #4088]	; 0xff8
    1bc0:	ldr	r1, [r6, #8]
    1bc4:	cmp	r1, #2
    1bc8:	beq	1be0 <coda_mem_cursor_read_uint32+0x58>
    1bcc:	ldr	r0, [pc, #84]	; 1c28 <coda_mem_cursor_read_uint32+0xa0>
    1bd0:	ldr	r1, [pc, #84]	; 1c2c <coda_mem_cursor_read_uint32+0xa4>
    1bd4:	movw	r2, #499	; 0x1f3
    1bd8:	ldr	r3, [pc, #68]	; 1c24 <coda_mem_cursor_read_uint32+0x9c>
    1bdc:	bl	0 <__assert_fail>
    1be0:	ldr	r0, [r6, #4]
    1be4:	ldr	r3, [r0]
    1be8:	cmp	r3, #0
    1bec:	bne	1c00 <coda_mem_cursor_read_uint32+0x78>
    1bf0:	mov	r1, r4
    1bf4:	mov	r0, r5
    1bf8:	bl	0 <coda_ascii_cursor_read_uint32>
    1bfc:	b	1c0c <coda_mem_cursor_read_uint32+0x84>
    1c00:	mov	r1, r4
    1c04:	mov	r0, r5
    1c08:	bl	0 <coda_bin_cursor_read_uint32>
    1c0c:	ldr	r4, [sp, #8]
    1c10:	ldr	r5, [sp, #12]
    1c14:	ldr	r6, [sp, #16]
    1c18:	ldr	lr, [sp, #4]
    1c1c:	add	sp, sp, #24
    1c20:	bx	lr
    1c24:	.word	0x0000053f
    1c28:	.word	0x000001be
    1c2c:	.word	0x00000000

00001c30 <coda_mem_cursor_read_int64>:
    1c30:	mov	ip, sp
    1c34:	sub	sp, sp, #24
    1c38:	str	ip, [sp]
    1c3c:	str	lr, [sp, #4]
    1c40:	str	r4, [sp, #8]
    1c44:	str	r5, [sp, #12]
    1c48:	str	r6, [sp, #16]
    1c4c:	mov	r4, r1
    1c50:	mov	r5, r0
    1c54:	ldr	r2, [r5, #4]
    1c58:	lsl	ip, r2, #4
    1c5c:	add	r1, r5, ip
    1c60:	sub	lr, r1, #4096	; 0x1000
    1c64:	ldr	r6, [lr, #4088]	; 0xff8
    1c68:	ldr	r1, [r6, #8]
    1c6c:	cmp	r1, #2
    1c70:	beq	1c88 <coda_mem_cursor_read_int64+0x58>
    1c74:	ldr	r0, [pc, #80]	; 1ccc <coda_mem_cursor_read_int64+0x9c>
    1c78:	ldr	r1, [pc, #84]	; 1cd4 <coda_mem_cursor_read_int64+0xa4>
    1c7c:	movw	r2, #511	; 0x1ff
    1c80:	ldr	r3, [pc, #72]	; 1cd0 <coda_mem_cursor_read_int64+0xa0>
    1c84:	bl	0 <__assert_fail>
    1c88:	ldr	r0, [r6, #4]
    1c8c:	ldr	r3, [r0]
    1c90:	cmp	r3, #0
    1c94:	bne	1ca8 <coda_mem_cursor_read_int64+0x78>
    1c98:	mov	r1, r4
    1c9c:	mov	r0, r5
    1ca0:	bl	0 <coda_ascii_cursor_read_int64>
    1ca4:	b	1cb4 <coda_mem_cursor_read_int64+0x84>
    1ca8:	mov	r1, r4
    1cac:	mov	r0, r5
    1cb0:	bl	0 <coda_bin_cursor_read_int64>
    1cb4:	ldr	r4, [sp, #8]
    1cb8:	ldr	r5, [sp, #12]
    1cbc:	ldr	r6, [sp, #16]
    1cc0:	ldr	lr, [sp, #4]
    1cc4:	add	sp, sp, #24
    1cc8:	bx	lr
    1ccc:	.word	0x000001be
    1cd0:	.word	0x0000055b
    1cd4:	.word	0x00000000

00001cd8 <coda_mem_cursor_read_uint64>:
    1cd8:	mov	ip, sp
    1cdc:	sub	sp, sp, #24
    1ce0:	str	ip, [sp]
    1ce4:	str	lr, [sp, #4]
    1ce8:	str	r4, [sp, #8]
    1cec:	str	r5, [sp, #12]
    1cf0:	str	r6, [sp, #16]
    1cf4:	mov	r4, r1
    1cf8:	mov	r5, r0
    1cfc:	ldr	r2, [r5, #4]
    1d00:	lsl	ip, r2, #4
    1d04:	add	r1, r5, ip
    1d08:	sub	lr, r1, #4096	; 0x1000
    1d0c:	ldr	r6, [lr, #4088]	; 0xff8
    1d10:	ldr	r1, [r6, #8]
    1d14:	cmp	r1, #2
    1d18:	beq	1d30 <coda_mem_cursor_read_uint64+0x58>
    1d1c:	ldr	r0, [pc, #80]	; 1d74 <coda_mem_cursor_read_uint64+0x9c>
    1d20:	ldr	r1, [pc, #84]	; 1d7c <coda_mem_cursor_read_uint64+0xa4>
    1d24:	movw	r2, #523	; 0x20b
    1d28:	ldr	r3, [pc, #72]	; 1d78 <coda_mem_cursor_read_uint64+0xa0>
    1d2c:	bl	0 <__assert_fail>
    1d30:	ldr	r0, [r6, #4]
    1d34:	ldr	r3, [r0]
    1d38:	cmp	r3, #0
    1d3c:	bne	1d50 <coda_mem_cursor_read_uint64+0x78>
    1d40:	mov	r1, r4
    1d44:	mov	r0, r5
    1d48:	bl	0 <coda_ascii_cursor_read_uint64>
    1d4c:	b	1d5c <coda_mem_cursor_read_uint64+0x84>
    1d50:	mov	r1, r4
    1d54:	mov	r0, r5
    1d58:	bl	0 <coda_bin_cursor_read_uint64>
    1d5c:	ldr	r4, [sp, #8]
    1d60:	ldr	r5, [sp, #12]
    1d64:	ldr	r6, [sp, #16]
    1d68:	ldr	lr, [sp, #4]
    1d6c:	add	sp, sp, #24
    1d70:	bx	lr
    1d74:	.word	0x000001be
    1d78:	.word	0x00000576
    1d7c:	.word	0x00000000

00001d80 <coda_mem_cursor_read_float>:
    1d80:	mov	ip, sp
    1d84:	sub	sp, sp, #24
    1d88:	str	ip, [sp]
    1d8c:	str	lr, [sp, #4]
    1d90:	str	r4, [sp, #8]
    1d94:	str	r5, [sp, #12]
    1d98:	str	r6, [sp, #16]
    1d9c:	mov	r4, r1
    1da0:	mov	r5, r0
    1da4:	ldr	r2, [r5, #4]
    1da8:	lsl	ip, r2, #4
    1dac:	add	r1, r5, ip
    1db0:	sub	lr, r1, #4096	; 0x1000
    1db4:	ldr	r6, [lr, #4088]	; 0xff8
    1db8:	ldr	r1, [r6, #8]
    1dbc:	cmp	r1, #2
    1dc0:	beq	1dd8 <coda_mem_cursor_read_float+0x58>
    1dc4:	ldr	r0, [pc, #84]	; 1e20 <coda_mem_cursor_read_float+0xa0>
    1dc8:	ldr	r1, [pc, #84]	; 1e24 <coda_mem_cursor_read_float+0xa4>
    1dcc:	movw	r2, #535	; 0x217
    1dd0:	ldr	r3, [pc, #68]	; 1e1c <coda_mem_cursor_read_float+0x9c>
    1dd4:	bl	0 <__assert_fail>
    1dd8:	ldr	r0, [r6, #4]
    1ddc:	ldr	r3, [r0]
    1de0:	cmp	r3, #0
    1de4:	bne	1df8 <coda_mem_cursor_read_float+0x78>
    1de8:	mov	r1, r4
    1dec:	mov	r0, r5
    1df0:	bl	0 <coda_ascii_cursor_read_float>
    1df4:	b	1e04 <coda_mem_cursor_read_float+0x84>
    1df8:	mov	r1, r4
    1dfc:	mov	r0, r5
    1e00:	bl	0 <coda_bin_cursor_read_float>
    1e04:	ldr	r4, [sp, #8]
    1e08:	ldr	r5, [sp, #12]
    1e0c:	ldr	r6, [sp, #16]
    1e10:	ldr	lr, [sp, #4]
    1e14:	add	sp, sp, #24
    1e18:	bx	lr
    1e1c:	.word	0x00000592
    1e20:	.word	0x000001be
    1e24:	.word	0x00000000

00001e28 <coda_mem_cursor_read_double>:
    1e28:	mov	ip, sp
    1e2c:	sub	sp, sp, #24
    1e30:	str	ip, [sp]
    1e34:	str	lr, [sp, #4]
    1e38:	str	r4, [sp, #8]
    1e3c:	str	r5, [sp, #12]
    1e40:	str	r6, [sp, #16]
    1e44:	mov	r4, r1
    1e48:	mov	r5, r0
    1e4c:	ldr	r2, [r5, #4]
    1e50:	lsl	ip, r2, #4
    1e54:	add	r1, r5, ip
    1e58:	sub	lr, r1, #4096	; 0x1000
    1e5c:	ldr	r6, [lr, #4088]	; 0xff8
    1e60:	ldr	r1, [r6, #8]
    1e64:	cmp	r1, #2
    1e68:	beq	1e80 <coda_mem_cursor_read_double+0x58>
    1e6c:	ldr	r0, [pc, #84]	; 1ec8 <coda_mem_cursor_read_double+0xa0>
    1e70:	ldr	r1, [pc, #84]	; 1ecc <coda_mem_cursor_read_double+0xa4>
    1e74:	movw	r2, #547	; 0x223
    1e78:	ldr	r3, [pc, #68]	; 1ec4 <coda_mem_cursor_read_double+0x9c>
    1e7c:	bl	0 <__assert_fail>
    1e80:	ldr	r0, [r6, #4]
    1e84:	ldr	r3, [r0]
    1e88:	cmp	r3, #0
    1e8c:	bne	1ea0 <coda_mem_cursor_read_double+0x78>
    1e90:	mov	r1, r4
    1e94:	mov	r0, r5
    1e98:	bl	0 <coda_ascii_cursor_read_double>
    1e9c:	b	1eac <coda_mem_cursor_read_double+0x84>
    1ea0:	mov	r1, r4
    1ea4:	mov	r0, r5
    1ea8:	bl	0 <coda_bin_cursor_read_double>
    1eac:	ldr	r4, [sp, #8]
    1eb0:	ldr	r5, [sp, #12]
    1eb4:	ldr	r6, [sp, #16]
    1eb8:	ldr	lr, [sp, #4]
    1ebc:	add	sp, sp, #24
    1ec0:	bx	lr
    1ec4:	.word	0x000005ad
    1ec8:	.word	0x000001be
    1ecc:	.word	0x00000000

00001ed0 <coda_mem_cursor_read_char>:
    1ed0:	mov	ip, sp
    1ed4:	sub	sp, sp, #24
    1ed8:	str	ip, [sp]
    1edc:	str	lr, [sp, #4]
    1ee0:	str	r4, [sp, #8]
    1ee4:	str	r5, [sp, #12]
    1ee8:	str	r6, [sp, #16]
    1eec:	mov	r4, r1
    1ef0:	mov	r5, r0
    1ef4:	ldr	r2, [r5, #4]
    1ef8:	lsl	r0, r2, #4
    1efc:	add	r0, r5, r0
    1f00:	sub	lr, r0, #4096	; 0x1000
    1f04:	ldr	r6, [lr, #4088]	; 0xff8
    1f08:	ldr	r2, [r6, #8]
    1f0c:	cmp	r2, #2
    1f10:	beq	1f28 <coda_mem_cursor_read_char+0x58>
    1f14:	ldr	r0, [pc, #116]	; 1f90 <coda_mem_cursor_read_char+0xc0>
    1f18:	ldr	r1, [pc, #120]	; 1f98 <coda_mem_cursor_read_char+0xc8>
    1f1c:	movw	r2, #559	; 0x22f
    1f20:	ldr	r3, [pc, #108]	; 1f94 <coda_mem_cursor_read_char+0xc4>
    1f24:	bl	0 <__assert_fail>
    1f28:	ldr	ip, [r6, #4]
    1f2c:	ldr	ip, [ip]
    1f30:	cmp	ip, #0
    1f34:	beq	1f50 <coda_mem_cursor_read_char+0x80>
    1f38:	ldr	r1, [r6, #4]
    1f3c:	ldr	r0, [r1]
    1f40:	cmp	r0, #2
    1f44:	moveq	r3, #1
    1f48:	movne	r3, #0
    1f4c:	b	1f54 <coda_mem_cursor_read_char+0x84>
    1f50:	mov	r3, #1
    1f54:	cmp	r3, #0
    1f58:	beq	1f6c <coda_mem_cursor_read_char+0x9c>
    1f5c:	mov	r1, r4
    1f60:	mov	r0, r5
    1f64:	bl	0 <coda_ascii_cursor_read_char>
    1f68:	b	1f78 <coda_mem_cursor_read_char+0xa8>
    1f6c:	mov	r1, r4
    1f70:	mov	r0, r5
    1f74:	bl	0 <coda_bin_cursor_read_char>
    1f78:	ldr	r4, [sp, #8]
    1f7c:	ldr	r5, [sp, #12]
    1f80:	ldr	r6, [sp, #16]
    1f84:	ldr	lr, [sp, #4]
    1f88:	add	sp, sp, #24
    1f8c:	bx	lr
    1f90:	.word	0x000001be
    1f94:	.word	0x000005c9
    1f98:	.word	0x00000000

00001f9c <coda_mem_cursor_read_string>:
    1f9c:	mov	ip, sp
    1fa0:	sub	sp, sp, #544	; 0x220
    1fa4:	str	ip, [sp]
    1fa8:	str	lr, [sp, #4]
    1fac:	str	r4, [sp, #8]
    1fb0:	str	r5, [sp, #12]
    1fb4:	str	r6, [sp, #16]
    1fb8:	mov	r4, r2
    1fbc:	mov	r5, r1
    1fc0:	mov	r6, r0
    1fc4:	ldr	r2, [r6, #4]
    1fc8:	lsl	r0, r2, #4
    1fcc:	add	r0, r6, r0
    1fd0:	sub	lr, r0, #4096	; 0x1000
    1fd4:	ldr	r2, [lr, #4088]	; 0xff8
    1fd8:	ldr	r1, [r2, #8]
    1fdc:	cmp	r1, #3
    1fe0:	bne	202c <coda_mem_cursor_read_string+0x90>
    1fe4:	mov	r2, r6
    1fe8:	add	r3, sp, #24
    1fec:	mov	lr, #130	; 0x82
    1ff0:	ldr	ip, [r2], #4
    1ff4:	subs	lr, lr, #1
    1ff8:	str	ip, [r3], #4
    1ffc:	bne	1ff0 <coda_mem_cursor_read_string+0x54>
    2000:	add	r0, sp, #24
    2004:	bl	0 <coda_cursor_use_base_type_of_special_type>
    2008:	cmp	r0, #0
    200c:	beq	2018 <coda_mem_cursor_read_string+0x7c>
    2010:	mvn	r0, #0
    2014:	b	205c <coda_mem_cursor_read_string+0xc0>
    2018:	add	r0, sp, #24
    201c:	mov	r2, r4
    2020:	mov	r1, r5
    2024:	bl	0 <coda_cursor_read_string>
    2028:	b	205c <coda_mem_cursor_read_string+0xc0>
    202c:	ldr	r3, [r2, #8]
    2030:	cmp	r3, #2
    2034:	beq	204c <coda_mem_cursor_read_string+0xb0>
    2038:	ldr	r0, [pc, #52]	; 2074 <coda_mem_cursor_read_string+0xd8>
    203c:	ldr	r1, [pc, #56]	; 207c <coda_mem_cursor_read_string+0xe0>
    2040:	movw	r2, #582	; 0x246
    2044:	ldr	r3, [pc, #44]	; 2078 <coda_mem_cursor_read_string+0xdc>
    2048:	bl	0 <__assert_fail>
    204c:	mov	r2, r4
    2050:	mov	r1, r5
    2054:	mov	r0, r6
    2058:	bl	0 <coda_ascii_cursor_read_string>
    205c:	ldr	r4, [sp, #8]
    2060:	ldr	r5, [sp, #12]
    2064:	ldr	r6, [sp, #16]
    2068:	ldr	lr, [sp, #4]
    206c:	add	sp, sp, #544	; 0x220
    2070:	bx	lr
    2074:	.word	0x000001be
    2078:	.word	0x000005e3
    207c:	.word	0x00000000

00002080 <coda_mem_cursor_read_bits>:
    2080:	mov	ip, sp
    2084:	sub	sp, sp, #560	; 0x230
    2088:	str	ip, [sp, #8]
    208c:	str	lr, [sp, #12]
    2090:	str	r4, [sp, #16]
    2094:	str	r5, [sp, #20]
    2098:	str	r6, [sp, #24]
    209c:	str	r7, [sp, #28]
    20a0:	str	r8, [sp, #32]
    20a4:	ldr	r8, [ip, #4]
    20a8:	ldr	r7, [ip]
    20ac:	mov	r4, r3
    20b0:	mov	r5, r2
    20b4:	mov	r6, r1
    20b8:	ldr	r3, [r0, #4]
    20bc:	lsl	r1, r3, #4
    20c0:	add	r1, r0, r1
    20c4:	sub	lr, r1, #4096	; 0x1000
    20c8:	ldr	r2, [lr, #4088]	; 0xff8
    20cc:	ldr	r1, [r2, #8]
    20d0:	cmp	r1, #3
    20d4:	bne	212c <coda_mem_cursor_read_bits+0xac>
    20d8:	mov	r2, r0
    20dc:	add	r3, sp, #40	; 0x28
    20e0:	mov	lr, #130	; 0x82
    20e4:	ldr	ip, [r2], #4
    20e8:	subs	lr, lr, #1
    20ec:	str	ip, [r3], #4
    20f0:	bne	20e4 <coda_mem_cursor_read_bits+0x64>
    20f4:	add	r0, sp, #40	; 0x28
    20f8:	bl	0 <coda_cursor_use_base_type_of_special_type>
    20fc:	cmp	r0, #0
    2100:	beq	210c <coda_mem_cursor_read_bits+0x8c>
    2104:	mvn	r0, #0
    2108:	b	2190 <coda_mem_cursor_read_bits+0x110>
    210c:	add	r0, sp, #40	; 0x28
    2110:	str	r8, [sp, #4]
    2114:	str	r7, [sp]
    2118:	mov	r3, r4
    211c:	mov	r2, r5
    2120:	mov	r1, r6
    2124:	bl	0 <coda_cursor_read_bits>
    2128:	b	2190 <coda_mem_cursor_read_bits+0x110>
    212c:	ldr	r1, [r2, #8]
    2130:	cmp	r1, #2
    2134:	bne	2180 <coda_mem_cursor_read_bits+0x100>
    2138:	ldr	ip, [r2, #4]
    213c:	ldr	ip, [ip]
    2140:	cmp	ip, #0
    2144:	bne	2164 <coda_mem_cursor_read_bits+0xe4>
    2148:	str	r8, [sp, #4]
    214c:	str	r7, [sp]
    2150:	mov	r3, r4
    2154:	mov	r2, r5
    2158:	mov	r1, r6
    215c:	bl	0 <coda_ascii_cursor_read_bits>
    2160:	b	2190 <coda_mem_cursor_read_bits+0x110>
    2164:	str	r8, [sp, #4]
    2168:	str	r7, [sp]
    216c:	mov	r3, r4
    2170:	mov	r2, r5
    2174:	mov	r1, r6
    2178:	bl	0 <coda_bin_cursor_read_bits>
    217c:	b	2190 <coda_mem_cursor_read_bits+0x110>
    2180:	mvn	r0, #104	; 0x68
    2184:	ldr	r1, [pc, #36]	; 21b0 <coda_mem_cursor_read_bits+0x130>
    2188:	bl	0 <coda_set_error>
    218c:	mvn	r0, #0
    2190:	ldr	r4, [sp, #16]
    2194:	ldr	r5, [sp, #20]
    2198:	ldr	r6, [sp, #24]
    219c:	ldr	r7, [sp, #28]
    21a0:	ldr	r8, [sp, #32]
    21a4:	ldr	lr, [sp, #12]
    21a8:	add	sp, sp, #560	; 0x230
    21ac:	bx	lr
    21b0:	.word	0x00000122

000021b4 <coda_mem_cursor_read_bytes>:
    21b4:	mov	ip, sp
    21b8:	sub	sp, sp, #560	; 0x230
    21bc:	str	ip, [sp, #8]
    21c0:	str	lr, [sp, #12]
    21c4:	str	r4, [sp, #16]
    21c8:	str	r5, [sp, #20]
    21cc:	str	r6, [sp, #24]
    21d0:	str	r7, [sp, #28]
    21d4:	str	r8, [sp, #32]
    21d8:	str	r9, [sp, #36]	; 0x24
    21dc:	ldr	r8, [ip, #4]
    21e0:	ldr	r7, [ip]
    21e4:	mov	r4, r3
    21e8:	mov	r5, r2
    21ec:	mov	r6, r1
    21f0:	ldr	r1, [r0, #4]
    21f4:	lsl	r1, r1, #4
    21f8:	add	r1, r0, r1
    21fc:	sub	lr, r1, #4096	; 0x1000
    2200:	ldr	r9, [lr, #4088]	; 0xff8
    2204:	ldr	r2, [r9, #8]
    2208:	cmp	r2, #3
    220c:	bne	2264 <coda_mem_cursor_read_bytes+0xb0>
    2210:	mov	r2, r0
    2214:	add	r3, sp, #40	; 0x28
    2218:	mov	lr, #130	; 0x82
    221c:	ldr	ip, [r2], #4
    2220:	subs	lr, lr, #1
    2224:	str	ip, [r3], #4
    2228:	bne	221c <coda_mem_cursor_read_bytes+0x68>
    222c:	add	r0, sp, #40	; 0x28
    2230:	bl	0 <coda_cursor_use_base_type_of_special_type>
    2234:	cmp	r0, #0
    2238:	beq	2244 <coda_mem_cursor_read_bytes+0x90>
    223c:	mvn	r0, #0
    2240:	b	22ec <coda_mem_cursor_read_bytes+0x138>
    2244:	add	r0, sp, #40	; 0x28
    2248:	str	r8, [sp, #4]
    224c:	str	r7, [sp]
    2250:	mov	r3, r4
    2254:	mov	r2, r5
    2258:	mov	r1, r6
    225c:	bl	0 <coda_cursor_read_bytes>
    2260:	b	22ec <coda_mem_cursor_read_bytes+0x138>
    2264:	ldr	r3, [r9, #8]
    2268:	cmp	r3, #2
    226c:	bne	22dc <coda_mem_cursor_read_bytes+0x128>
    2270:	ldr	ip, [r9, #4]
    2274:	ldr	r1, [ip]
    2278:	cmp	r1, #0
    227c:	beq	2298 <coda_mem_cursor_read_bytes+0xe4>
    2280:	ldr	ip, [r9, #4]
    2284:	ldr	r1, [ip]
    2288:	cmp	r1, #2
    228c:	moveq	r2, #1
    2290:	movne	r2, #0
    2294:	b	229c <coda_mem_cursor_read_bytes+0xe8>
    2298:	mov	r2, #1
    229c:	cmp	r2, #0
    22a0:	beq	22c0 <coda_mem_cursor_read_bytes+0x10c>
    22a4:	str	r8, [sp, #4]
    22a8:	str	r7, [sp]
    22ac:	mov	r3, r4
    22b0:	mov	r2, r5
    22b4:	mov	r1, r6
    22b8:	bl	0 <coda_ascii_cursor_read_bytes>
    22bc:	b	22ec <coda_mem_cursor_read_bytes+0x138>
    22c0:	str	r8, [sp, #4]
    22c4:	str	r7, [sp]
    22c8:	mov	r3, r4
    22cc:	mov	r2, r5
    22d0:	mov	r1, r6
    22d4:	bl	0 <coda_bin_cursor_read_bytes>
    22d8:	b	22ec <coda_mem_cursor_read_bytes+0x138>
    22dc:	mvn	r0, #104	; 0x68
    22e0:	ldr	r1, [pc, #40]	; 2310 <coda_mem_cursor_read_bytes+0x15c>
    22e4:	bl	0 <coda_set_error>
    22e8:	mvn	r0, #0
    22ec:	ldr	r4, [sp, #16]
    22f0:	ldr	r5, [sp, #20]
    22f4:	ldr	r6, [sp, #24]
    22f8:	ldr	r7, [sp, #28]
    22fc:	ldr	r8, [sp, #32]
    2300:	ldr	r9, [sp, #36]	; 0x24
    2304:	ldr	lr, [sp, #12]
    2308:	add	sp, sp, #560	; 0x230
    230c:	bx	lr
    2310:	.word	0x0000007d

00002314 <coda_mem_cursor_read_int8_array>:
    2314:	mov	ip, sp
    2318:	sub	sp, sp, #32
    231c:	str	ip, [sp, #4]
    2320:	str	lr, [sp, #8]
    2324:	str	r4, [sp, #16]
    2328:	str	r5, [sp, #20]
    232c:	str	r6, [sp, #24]
    2330:	str	r7, [sp, #28]
    2334:	mov	r4, r2
    2338:	mov	r5, r1
    233c:	mov	r6, r0
    2340:	ldr	r3, [r6, #4]
    2344:	lsl	r1, r3, #4
    2348:	add	r0, r6, r1
    234c:	sub	lr, r0, #4096	; 0x1000
    2350:	ldr	r7, [lr, #4088]	; 0xff8
    2354:	ldr	r3, [r7, #8]
    2358:	cmp	r3, #1
    235c:	bne	237c <coda_mem_cursor_read_int8_array+0x68>
    2360:	ldr	r1, [pc, #272]	; 2478 <coda_mem_cursor_read_int8_array+0x164>
    2364:	mov	r3, #1
    2368:	str	r4, [sp]
    236c:	mov	r2, r5
    2370:	mov	r0, r6
    2374:	bl	0 <read_array>
    2378:	b	244c <coda_mem_cursor_read_int8_array+0x138>
    237c:	ldr	r2, [r7, #8]
    2380:	cmp	r2, #2
    2384:	beq	239c <coda_mem_cursor_read_int8_array+0x88>
    2388:	ldr	r0, [pc, #224]	; 2470 <coda_mem_cursor_read_int8_array+0x15c>
    238c:	ldr	r1, [pc, #236]	; 2480 <coda_mem_cursor_read_int8_array+0x16c>
    2390:	movw	r2, #651	; 0x28b
    2394:	ldr	r3, [pc, #204]	; 2468 <coda_mem_cursor_read_int8_array+0x154>
    2398:	bl	0 <__assert_fail>
    239c:	ldr	ip, [r7, #4]
    23a0:	ldr	r3, [ip, #40]	; 0x28
    23a4:	ldr	ip, [r3]
    23a8:	cmp	ip, #1
    23ac:	bne	23cc <coda_mem_cursor_read_int8_array+0xb8>
    23b0:	ldr	r1, [pc, #196]	; 247c <coda_mem_cursor_read_int8_array+0x168>
    23b4:	mov	r3, #1
    23b8:	str	r4, [sp]
    23bc:	mov	r2, r5
    23c0:	mov	r0, r6
    23c4:	bl	0 <read_array>
    23c8:	b	244c <coda_mem_cursor_read_int8_array+0x138>
    23cc:	ldr	r2, [r7, #4]
    23d0:	ldr	r0, [r2, #40]	; 0x28
    23d4:	ldr	r0, [r0]
    23d8:	cmp	r0, #0
    23dc:	beq	23f4 <coda_mem_cursor_read_int8_array+0xe0>
    23e0:	ldr	r0, [pc, #140]	; 2474 <coda_mem_cursor_read_int8_array+0x160>
    23e4:	ldr	r1, [pc, #148]	; 2480 <coda_mem_cursor_read_int8_array+0x16c>
    23e8:	movw	r2, #657	; 0x291
    23ec:	ldr	r3, [pc, #116]	; 2468 <coda_mem_cursor_read_int8_array+0x154>
    23f0:	bl	0 <__assert_fail>
    23f4:	ldr	r1, [pc, #112]	; 246c <coda_mem_cursor_read_int8_array+0x158>
    23f8:	mov	r3, #1
    23fc:	mov	ip, #0
    2400:	str	ip, [sp]
    2404:	mov	r2, r5
    2408:	mov	r0, r6
    240c:	bl	0 <read_array>
    2410:	cmp	r0, #0
    2414:	beq	2420 <coda_mem_cursor_read_int8_array+0x10c>
    2418:	mvn	r0, #0
    241c:	b	244c <coda_mem_cursor_read_int8_array+0x138>
    2420:	cmp	r4, #0
    2424:	beq	2448 <coda_mem_cursor_read_int8_array+0x134>
    2428:	mov	r2, #1
    242c:	mov	r1, r5
    2430:	mov	r0, r6
    2434:	bl	3d4 <transpose_array>
    2438:	cmp	r0, #0
    243c:	beq	2448 <coda_mem_cursor_read_int8_array+0x134>
    2440:	mvn	r0, #0
    2444:	b	244c <coda_mem_cursor_read_int8_array+0x138>
    2448:	mov	r0, #0
    244c:	ldr	r4, [sp, #16]
    2450:	ldr	r5, [sp, #20]
    2454:	ldr	r6, [sp, #24]
    2458:	ldr	r7, [sp, #28]
    245c:	ldr	lr, [sp, #8]
    2460:	add	sp, sp, #32
    2464:	bx	lr
    2468:	.word	0x000005ff
    246c:	.word	0x00000000
    2470:	.word	0x000001be
    2474:	.word	0x00000170
	...

00002484 <coda_mem_cursor_read_uint8_array>:
    2484:	mov	ip, sp
    2488:	sub	sp, sp, #32
    248c:	str	ip, [sp, #4]
    2490:	str	lr, [sp, #8]
    2494:	str	r4, [sp, #16]
    2498:	str	r5, [sp, #20]
    249c:	str	r6, [sp, #24]
    24a0:	str	r7, [sp, #28]
    24a4:	mov	r4, r2
    24a8:	mov	r5, r1
    24ac:	mov	r6, r0
    24b0:	ldr	r3, [r6, #4]
    24b4:	lsl	r1, r3, #4
    24b8:	add	r0, r6, r1
    24bc:	sub	lr, r0, #4096	; 0x1000
    24c0:	ldr	r7, [lr, #4088]	; 0xff8
    24c4:	ldr	r3, [r7, #8]
    24c8:	cmp	r3, #1
    24cc:	bne	24ec <coda_mem_cursor_read_uint8_array+0x68>
    24d0:	ldr	r1, [pc, #272]	; 25e8 <coda_mem_cursor_read_uint8_array+0x164>
    24d4:	mov	r3, #1
    24d8:	str	r4, [sp]
    24dc:	mov	r2, r5
    24e0:	mov	r0, r6
    24e4:	bl	0 <read_array>
    24e8:	b	25bc <coda_mem_cursor_read_uint8_array+0x138>
    24ec:	ldr	r2, [r7, #8]
    24f0:	cmp	r2, #2
    24f4:	beq	250c <coda_mem_cursor_read_uint8_array+0x88>
    24f8:	ldr	r0, [pc, #220]	; 25dc <coda_mem_cursor_read_uint8_array+0x158>
    24fc:	ldr	r1, [pc, #232]	; 25ec <coda_mem_cursor_read_uint8_array+0x168>
    2500:	movw	r2, #682	; 0x2aa
    2504:	ldr	r3, [pc, #204]	; 25d8 <coda_mem_cursor_read_uint8_array+0x154>
    2508:	bl	0 <__assert_fail>
    250c:	ldr	ip, [r7, #4]
    2510:	ldr	r3, [ip, #40]	; 0x28
    2514:	ldr	ip, [r3]
    2518:	cmp	ip, #1
    251c:	bne	253c <coda_mem_cursor_read_uint8_array+0xb8>
    2520:	ldr	r1, [pc, #200]	; 25f0 <coda_mem_cursor_read_uint8_array+0x16c>
    2524:	mov	r3, #1
    2528:	str	r4, [sp]
    252c:	mov	r2, r5
    2530:	mov	r0, r6
    2534:	bl	0 <read_array>
    2538:	b	25bc <coda_mem_cursor_read_uint8_array+0x138>
    253c:	ldr	r2, [r7, #4]
    2540:	ldr	r0, [r2, #40]	; 0x28
    2544:	ldr	r0, [r0]
    2548:	cmp	r0, #0
    254c:	beq	2564 <coda_mem_cursor_read_uint8_array+0xe0>
    2550:	ldr	r0, [pc, #136]	; 25e0 <coda_mem_cursor_read_uint8_array+0x15c>
    2554:	ldr	r1, [pc, #144]	; 25ec <coda_mem_cursor_read_uint8_array+0x168>
    2558:	mov	r2, #688	; 0x2b0
    255c:	ldr	r3, [pc, #116]	; 25d8 <coda_mem_cursor_read_uint8_array+0x154>
    2560:	bl	0 <__assert_fail>
    2564:	ldr	r1, [pc, #120]	; 25e4 <coda_mem_cursor_read_uint8_array+0x160>
    2568:	mov	r3, #1
    256c:	mov	ip, #0
    2570:	str	ip, [sp]
    2574:	mov	r2, r5
    2578:	mov	r0, r6
    257c:	bl	0 <read_array>
    2580:	cmp	r0, #0
    2584:	beq	2590 <coda_mem_cursor_read_uint8_array+0x10c>
    2588:	mvn	r0, #0
    258c:	b	25bc <coda_mem_cursor_read_uint8_array+0x138>
    2590:	cmp	r4, #0
    2594:	beq	25b8 <coda_mem_cursor_read_uint8_array+0x134>
    2598:	mov	r2, #1
    259c:	mov	r1, r5
    25a0:	mov	r0, r6
    25a4:	bl	3d4 <transpose_array>
    25a8:	cmp	r0, #0
    25ac:	beq	25b8 <coda_mem_cursor_read_uint8_array+0x134>
    25b0:	mvn	r0, #0
    25b4:	b	25bc <coda_mem_cursor_read_uint8_array+0x138>
    25b8:	mov	r0, #0
    25bc:	ldr	r4, [sp, #16]
    25c0:	ldr	r5, [sp, #20]
    25c4:	ldr	r6, [sp, #24]
    25c8:	ldr	r7, [sp, #28]
    25cc:	ldr	lr, [sp, #8]
    25d0:	add	sp, sp, #32
    25d4:	bx	lr
    25d8:	.word	0x0000061f
    25dc:	.word	0x000001be
    25e0:	.word	0x00000170
	...

000025f4 <coda_mem_cursor_read_int16_array>:
    25f4:	mov	ip, sp
    25f8:	sub	sp, sp, #32
    25fc:	str	ip, [sp, #4]
    2600:	str	lr, [sp, #8]
    2604:	str	r4, [sp, #16]
    2608:	str	r5, [sp, #20]
    260c:	str	r6, [sp, #24]
    2610:	str	r7, [sp, #28]
    2614:	mov	r4, r2
    2618:	mov	r5, r1
    261c:	mov	r6, r0
    2620:	ldr	r3, [r6, #4]
    2624:	lsl	r1, r3, #4
    2628:	add	r0, r6, r1
    262c:	sub	lr, r0, #4096	; 0x1000
    2630:	ldr	r7, [lr, #4088]	; 0xff8
    2634:	ldr	r3, [r7, #8]
    2638:	cmp	r3, #1
    263c:	bne	265c <coda_mem_cursor_read_int16_array+0x68>
    2640:	ldr	r1, [pc, #272]	; 2758 <coda_mem_cursor_read_int16_array+0x164>
    2644:	mov	r3, #2
    2648:	str	r4, [sp]
    264c:	mov	r2, r5
    2650:	mov	r0, r6
    2654:	bl	0 <read_array>
    2658:	b	272c <coda_mem_cursor_read_int16_array+0x138>
    265c:	ldr	r2, [r7, #8]
    2660:	cmp	r2, #2
    2664:	beq	267c <coda_mem_cursor_read_int16_array+0x88>
    2668:	ldr	r0, [pc, #216]	; 2748 <coda_mem_cursor_read_int16_array+0x154>
    266c:	ldr	r1, [pc, #236]	; 2760 <coda_mem_cursor_read_int16_array+0x16c>
    2670:	movw	r2, #713	; 0x2c9
    2674:	ldr	r3, [pc, #212]	; 2750 <coda_mem_cursor_read_int16_array+0x15c>
    2678:	bl	0 <__assert_fail>
    267c:	ldr	ip, [r7, #4]
    2680:	ldr	r3, [ip, #40]	; 0x28
    2684:	ldr	ip, [r3]
    2688:	cmp	ip, #1
    268c:	bne	26ac <coda_mem_cursor_read_int16_array+0xb8>
    2690:	ldr	r1, [pc, #180]	; 274c <coda_mem_cursor_read_int16_array+0x158>
    2694:	mov	r3, #2
    2698:	str	r4, [sp]
    269c:	mov	r2, r5
    26a0:	mov	r0, r6
    26a4:	bl	0 <read_array>
    26a8:	b	272c <coda_mem_cursor_read_int16_array+0x138>
    26ac:	ldr	r2, [r7, #4]
    26b0:	ldr	r0, [r2, #40]	; 0x28
    26b4:	ldr	r0, [r0]
    26b8:	cmp	r0, #0
    26bc:	beq	26d4 <coda_mem_cursor_read_int16_array+0xe0>
    26c0:	ldr	r0, [pc, #140]	; 2754 <coda_mem_cursor_read_int16_array+0x160>
    26c4:	ldr	r1, [pc, #148]	; 2760 <coda_mem_cursor_read_int16_array+0x16c>
    26c8:	movw	r2, #719	; 0x2cf
    26cc:	ldr	r3, [pc, #124]	; 2750 <coda_mem_cursor_read_int16_array+0x15c>
    26d0:	bl	0 <__assert_fail>
    26d4:	ldr	r1, [pc, #128]	; 275c <coda_mem_cursor_read_int16_array+0x168>
    26d8:	mov	r3, #2
    26dc:	mov	ip, #0
    26e0:	str	ip, [sp]
    26e4:	mov	r2, r5
    26e8:	mov	r0, r6
    26ec:	bl	0 <read_array>
    26f0:	cmp	r0, #0
    26f4:	beq	2700 <coda_mem_cursor_read_int16_array+0x10c>
    26f8:	mvn	r0, #0
    26fc:	b	272c <coda_mem_cursor_read_int16_array+0x138>
    2700:	cmp	r4, #0
    2704:	beq	2728 <coda_mem_cursor_read_int16_array+0x134>
    2708:	mov	r2, #2
    270c:	mov	r1, r5
    2710:	mov	r0, r6
    2714:	bl	3d4 <transpose_array>
    2718:	cmp	r0, #0
    271c:	beq	2728 <coda_mem_cursor_read_int16_array+0x134>
    2720:	mvn	r0, #0
    2724:	b	272c <coda_mem_cursor_read_int16_array+0x138>
    2728:	mov	r0, #0
    272c:	ldr	r4, [sp, #16]
    2730:	ldr	r5, [sp, #20]
    2734:	ldr	r6, [sp, #24]
    2738:	ldr	r7, [sp, #28]
    273c:	ldr	lr, [sp, #8]
    2740:	add	sp, sp, #32
    2744:	bx	lr
    2748:	.word	0x000001be
    274c:	.word	0x00000000
    2750:	.word	0x00000640
    2754:	.word	0x00000170
	...

00002764 <coda_mem_cursor_read_uint16_array>:
    2764:	mov	ip, sp
    2768:	sub	sp, sp, #32
    276c:	str	ip, [sp, #4]
    2770:	str	lr, [sp, #8]
    2774:	str	r4, [sp, #16]
    2778:	str	r5, [sp, #20]
    277c:	str	r6, [sp, #24]
    2780:	str	r7, [sp, #28]
    2784:	mov	r4, r2
    2788:	mov	r5, r1
    278c:	mov	r6, r0
    2790:	ldr	r3, [r6, #4]
    2794:	lsl	r1, r3, #4
    2798:	add	r0, r6, r1
    279c:	sub	lr, r0, #4096	; 0x1000
    27a0:	ldr	r7, [lr, #4088]	; 0xff8
    27a4:	ldr	r3, [r7, #8]
    27a8:	cmp	r3, #1
    27ac:	bne	27cc <coda_mem_cursor_read_uint16_array+0x68>
    27b0:	ldr	r1, [pc, #256]	; 28b8 <coda_mem_cursor_read_uint16_array+0x154>
    27b4:	mov	r3, #2
    27b8:	str	r4, [sp]
    27bc:	mov	r2, r5
    27c0:	mov	r0, r6
    27c4:	bl	0 <read_array>
    27c8:	b	289c <coda_mem_cursor_read_uint16_array+0x138>
    27cc:	ldr	r2, [r7, #8]
    27d0:	cmp	r2, #2
    27d4:	beq	27ec <coda_mem_cursor_read_uint16_array+0x88>
    27d8:	ldr	r0, [pc, #228]	; 28c4 <coda_mem_cursor_read_uint16_array+0x160>
    27dc:	ldr	r1, [pc, #236]	; 28d0 <coda_mem_cursor_read_uint16_array+0x16c>
    27e0:	mov	r2, #744	; 0x2e8
    27e4:	ldr	r3, [pc, #208]	; 28bc <coda_mem_cursor_read_uint16_array+0x158>
    27e8:	bl	0 <__assert_fail>
    27ec:	ldr	ip, [r7, #4]
    27f0:	ldr	r3, [ip, #40]	; 0x28
    27f4:	ldr	ip, [r3]
    27f8:	cmp	ip, #1
    27fc:	bne	281c <coda_mem_cursor_read_uint16_array+0xb8>
    2800:	ldr	r1, [pc, #184]	; 28c0 <coda_mem_cursor_read_uint16_array+0x15c>
    2804:	mov	r3, #2
    2808:	str	r4, [sp]
    280c:	mov	r2, r5
    2810:	mov	r0, r6
    2814:	bl	0 <read_array>
    2818:	b	289c <coda_mem_cursor_read_uint16_array+0x138>
    281c:	ldr	r2, [r7, #4]
    2820:	ldr	r0, [r2, #40]	; 0x28
    2824:	ldr	r0, [r0]
    2828:	cmp	r0, #0
    282c:	beq	2844 <coda_mem_cursor_read_uint16_array+0xe0>
    2830:	ldr	r0, [pc, #144]	; 28c8 <coda_mem_cursor_read_uint16_array+0x164>
    2834:	ldr	r1, [pc, #148]	; 28d0 <coda_mem_cursor_read_uint16_array+0x16c>
    2838:	movw	r2, #750	; 0x2ee
    283c:	ldr	r3, [pc, #120]	; 28bc <coda_mem_cursor_read_uint16_array+0x158>
    2840:	bl	0 <__assert_fail>
    2844:	ldr	r1, [pc, #128]	; 28cc <coda_mem_cursor_read_uint16_array+0x168>
    2848:	mov	r3, #2
    284c:	mov	ip, #0
    2850:	str	ip, [sp]
    2854:	mov	r2, r5
    2858:	mov	r0, r6
    285c:	bl	0 <read_array>
    2860:	cmp	r0, #0
    2864:	beq	2870 <coda_mem_cursor_read_uint16_array+0x10c>
    2868:	mvn	r0, #0
    286c:	b	289c <coda_mem_cursor_read_uint16_array+0x138>
    2870:	cmp	r4, #0
    2874:	beq	2898 <coda_mem_cursor_read_uint16_array+0x134>
    2878:	mov	r2, #2
    287c:	mov	r1, r5
    2880:	mov	r0, r6
    2884:	bl	3d4 <transpose_array>
    2888:	cmp	r0, #0
    288c:	beq	2898 <coda_mem_cursor_read_uint16_array+0x134>
    2890:	mvn	r0, #0
    2894:	b	289c <coda_mem_cursor_read_uint16_array+0x138>
    2898:	mov	r0, #0
    289c:	ldr	r4, [sp, #16]
    28a0:	ldr	r5, [sp, #20]
    28a4:	ldr	r6, [sp, #24]
    28a8:	ldr	r7, [sp, #28]
    28ac:	ldr	lr, [sp, #8]
    28b0:	add	sp, sp, #32
    28b4:	bx	lr
    28b8:	.word	0x00000000
    28bc:	.word	0x00000661
    28c0:	.word	0x00000000
    28c4:	.word	0x000001be
    28c8:	.word	0x00000170
	...

000028d4 <coda_mem_cursor_read_int32_array>:
    28d4:	mov	ip, sp
    28d8:	sub	sp, sp, #32
    28dc:	str	ip, [sp, #4]
    28e0:	str	lr, [sp, #8]
    28e4:	str	r4, [sp, #16]
    28e8:	str	r5, [sp, #20]
    28ec:	str	r6, [sp, #24]
    28f0:	str	r7, [sp, #28]
    28f4:	mov	r4, r2
    28f8:	mov	r5, r1
    28fc:	mov	r6, r0
    2900:	ldr	r3, [r6, #4]
    2904:	lsl	r1, r3, #4
    2908:	add	r0, r6, r1
    290c:	sub	lr, r0, #4096	; 0x1000
    2910:	ldr	r7, [lr, #4088]	; 0xff8
    2914:	ldr	r3, [r7, #8]
    2918:	cmp	r3, #1
    291c:	bne	293c <coda_mem_cursor_read_int32_array+0x68>
    2920:	ldr	r1, [pc, #272]	; 2a38 <coda_mem_cursor_read_int32_array+0x164>
    2924:	mov	r3, #4
    2928:	str	r4, [sp]
    292c:	mov	r2, r5
    2930:	mov	r0, r6
    2934:	bl	0 <read_array>
    2938:	b	2a0c <coda_mem_cursor_read_int32_array+0x138>
    293c:	ldr	r2, [r7, #8]
    2940:	cmp	r2, #2
    2944:	beq	295c <coda_mem_cursor_read_int32_array+0x88>
    2948:	ldr	r0, [pc, #224]	; 2a30 <coda_mem_cursor_read_int32_array+0x15c>
    294c:	ldr	r1, [pc, #236]	; 2a40 <coda_mem_cursor_read_int32_array+0x16c>
    2950:	movw	r2, #775	; 0x307
    2954:	ldr	r3, [pc, #204]	; 2a28 <coda_mem_cursor_read_int32_array+0x154>
    2958:	bl	0 <__assert_fail>
    295c:	ldr	ip, [r7, #4]
    2960:	ldr	r3, [ip, #40]	; 0x28
    2964:	ldr	ip, [r3]
    2968:	cmp	ip, #1
    296c:	bne	298c <coda_mem_cursor_read_int32_array+0xb8>
    2970:	ldr	r1, [pc, #196]	; 2a3c <coda_mem_cursor_read_int32_array+0x168>
    2974:	mov	r3, #4
    2978:	str	r4, [sp]
    297c:	mov	r2, r5
    2980:	mov	r0, r6
    2984:	bl	0 <read_array>
    2988:	b	2a0c <coda_mem_cursor_read_int32_array+0x138>
    298c:	ldr	r2, [r7, #4]
    2990:	ldr	r0, [r2, #40]	; 0x28
    2994:	ldr	r0, [r0]
    2998:	cmp	r0, #0
    299c:	beq	29b4 <coda_mem_cursor_read_int32_array+0xe0>
    29a0:	ldr	r0, [pc, #140]	; 2a34 <coda_mem_cursor_read_int32_array+0x160>
    29a4:	ldr	r1, [pc, #148]	; 2a40 <coda_mem_cursor_read_int32_array+0x16c>
    29a8:	movw	r2, #781	; 0x30d
    29ac:	ldr	r3, [pc, #116]	; 2a28 <coda_mem_cursor_read_int32_array+0x154>
    29b0:	bl	0 <__assert_fail>
    29b4:	ldr	r1, [pc, #112]	; 2a2c <coda_mem_cursor_read_int32_array+0x158>
    29b8:	mov	r3, #4
    29bc:	mov	ip, #0
    29c0:	str	ip, [sp]
    29c4:	mov	r2, r5
    29c8:	mov	r0, r6
    29cc:	bl	0 <read_array>
    29d0:	cmp	r0, #0
    29d4:	beq	29e0 <coda_mem_cursor_read_int32_array+0x10c>
    29d8:	mvn	r0, #0
    29dc:	b	2a0c <coda_mem_cursor_read_int32_array+0x138>
    29e0:	cmp	r4, #0
    29e4:	beq	2a08 <coda_mem_cursor_read_int32_array+0x134>
    29e8:	mov	r2, #4
    29ec:	mov	r1, r5
    29f0:	mov	r0, r6
    29f4:	bl	3d4 <transpose_array>
    29f8:	cmp	r0, #0
    29fc:	beq	2a08 <coda_mem_cursor_read_int32_array+0x134>
    2a00:	mvn	r0, #0
    2a04:	b	2a0c <coda_mem_cursor_read_int32_array+0x138>
    2a08:	mov	r0, #0
    2a0c:	ldr	r4, [sp, #16]
    2a10:	ldr	r5, [sp, #20]
    2a14:	ldr	r6, [sp, #24]
    2a18:	ldr	r7, [sp, #28]
    2a1c:	ldr	lr, [sp, #8]
    2a20:	add	sp, sp, #32
    2a24:	bx	lr
    2a28:	.word	0x00000683
    2a2c:	.word	0x00000000
    2a30:	.word	0x000001be
    2a34:	.word	0x00000170
	...

00002a44 <coda_mem_cursor_read_uint32_array>:
    2a44:	mov	ip, sp
    2a48:	sub	sp, sp, #32
    2a4c:	str	ip, [sp, #4]
    2a50:	str	lr, [sp, #8]
    2a54:	str	r4, [sp, #16]
    2a58:	str	r5, [sp, #20]
    2a5c:	str	r6, [sp, #24]
    2a60:	str	r7, [sp, #28]
    2a64:	mov	r4, r2
    2a68:	mov	r5, r1
    2a6c:	mov	r6, r0
    2a70:	ldr	r3, [r6, #4]
    2a74:	lsl	r1, r3, #4
    2a78:	add	r0, r6, r1
    2a7c:	sub	lr, r0, #4096	; 0x1000
    2a80:	ldr	r7, [lr, #4088]	; 0xff8
    2a84:	ldr	r3, [r7, #8]
    2a88:	cmp	r3, #1
    2a8c:	bne	2aac <coda_mem_cursor_read_uint32_array+0x68>
    2a90:	ldr	r1, [pc, #256]	; 2b98 <coda_mem_cursor_read_uint32_array+0x154>
    2a94:	mov	r3, #4
    2a98:	str	r4, [sp]
    2a9c:	mov	r2, r5
    2aa0:	mov	r0, r6
    2aa4:	bl	0 <read_array>
    2aa8:	b	2b7c <coda_mem_cursor_read_uint32_array+0x138>
    2aac:	ldr	r2, [r7, #8]
    2ab0:	cmp	r2, #2
    2ab4:	beq	2acc <coda_mem_cursor_read_uint32_array+0x88>
    2ab8:	ldr	r0, [pc, #224]	; 2ba0 <coda_mem_cursor_read_uint32_array+0x15c>
    2abc:	ldr	r1, [pc, #236]	; 2bb0 <coda_mem_cursor_read_uint32_array+0x16c>
    2ac0:	movw	r2, #806	; 0x326
    2ac4:	ldr	r3, [pc, #224]	; 2bac <coda_mem_cursor_read_uint32_array+0x168>
    2ac8:	bl	0 <__assert_fail>
    2acc:	ldr	ip, [r7, #4]
    2ad0:	ldr	r3, [ip, #40]	; 0x28
    2ad4:	ldr	ip, [r3]
    2ad8:	cmp	ip, #1
    2adc:	bne	2afc <coda_mem_cursor_read_uint32_array+0xb8>
    2ae0:	ldr	r1, [pc, #180]	; 2b9c <coda_mem_cursor_read_uint32_array+0x158>
    2ae4:	mov	r3, #4
    2ae8:	str	r4, [sp]
    2aec:	mov	r2, r5
    2af0:	mov	r0, r6
    2af4:	bl	0 <read_array>
    2af8:	b	2b7c <coda_mem_cursor_read_uint32_array+0x138>
    2afc:	ldr	r2, [r7, #4]
    2b00:	ldr	r0, [r2, #40]	; 0x28
    2b04:	ldr	r0, [r0]
    2b08:	cmp	r0, #0
    2b0c:	beq	2b24 <coda_mem_cursor_read_uint32_array+0xe0>
    2b10:	ldr	r0, [pc, #140]	; 2ba4 <coda_mem_cursor_read_uint32_array+0x160>
    2b14:	ldr	r1, [pc, #148]	; 2bb0 <coda_mem_cursor_read_uint32_array+0x16c>
    2b18:	mov	r2, #812	; 0x32c
    2b1c:	ldr	r3, [pc, #136]	; 2bac <coda_mem_cursor_read_uint32_array+0x168>
    2b20:	bl	0 <__assert_fail>
    2b24:	ldr	r1, [pc, #124]	; 2ba8 <coda_mem_cursor_read_uint32_array+0x164>
    2b28:	mov	r3, #4
    2b2c:	mov	ip, #0
    2b30:	str	ip, [sp]
    2b34:	mov	r2, r5
    2b38:	mov	r0, r6
    2b3c:	bl	0 <read_array>
    2b40:	cmp	r0, #0
    2b44:	beq	2b50 <coda_mem_cursor_read_uint32_array+0x10c>
    2b48:	mvn	r0, #0
    2b4c:	b	2b7c <coda_mem_cursor_read_uint32_array+0x138>
    2b50:	cmp	r4, #0
    2b54:	beq	2b78 <coda_mem_cursor_read_uint32_array+0x134>
    2b58:	mov	r2, #4
    2b5c:	mov	r1, r5
    2b60:	mov	r0, r6
    2b64:	bl	3d4 <transpose_array>
    2b68:	cmp	r0, #0
    2b6c:	beq	2b78 <coda_mem_cursor_read_uint32_array+0x134>
    2b70:	mvn	r0, #0
    2b74:	b	2b7c <coda_mem_cursor_read_uint32_array+0x138>
    2b78:	mov	r0, #0
    2b7c:	ldr	r4, [sp, #16]
    2b80:	ldr	r5, [sp, #20]
    2b84:	ldr	r6, [sp, #24]
    2b88:	ldr	r7, [sp, #28]
    2b8c:	ldr	lr, [sp, #8]
    2b90:	add	sp, sp, #32
    2b94:	bx	lr
	...
    2ba0:	.word	0x000001be
    2ba4:	.word	0x00000170
    2ba8:	.word	0x00000000
    2bac:	.word	0x000006a4
    2bb0:	.word	0x00000000

00002bb4 <coda_mem_cursor_read_int64_array>:
    2bb4:	mov	ip, sp
    2bb8:	sub	sp, sp, #32
    2bbc:	str	ip, [sp, #4]
    2bc0:	str	lr, [sp, #8]
    2bc4:	str	r4, [sp, #16]
    2bc8:	str	r5, [sp, #20]
    2bcc:	str	r6, [sp, #24]
    2bd0:	str	r7, [sp, #28]
    2bd4:	mov	r4, r2
    2bd8:	mov	r5, r1
    2bdc:	mov	r6, r0
    2be0:	ldr	r3, [r6, #4]
    2be4:	lsl	r1, r3, #4
    2be8:	add	r0, r6, r1
    2bec:	sub	lr, r0, #4096	; 0x1000
    2bf0:	ldr	r7, [lr, #4088]	; 0xff8
    2bf4:	ldr	r3, [r7, #8]
    2bf8:	cmp	r3, #1
    2bfc:	bne	2c1c <coda_mem_cursor_read_int64_array+0x68>
    2c00:	ldr	r1, [pc, #260]	; 2d0c <coda_mem_cursor_read_int64_array+0x158>
    2c04:	mov	r3, #8
    2c08:	str	r4, [sp]
    2c0c:	mov	r2, r5
    2c10:	mov	r0, r6
    2c14:	bl	0 <read_array>
    2c18:	b	2cec <coda_mem_cursor_read_int64_array+0x138>
    2c1c:	ldr	r2, [r7, #8]
    2c20:	cmp	r2, #2
    2c24:	beq	2c3c <coda_mem_cursor_read_int64_array+0x88>
    2c28:	ldr	r0, [pc, #224]	; 2d10 <coda_mem_cursor_read_int64_array+0x15c>
    2c2c:	ldr	r1, [pc, #232]	; 2d1c <coda_mem_cursor_read_int64_array+0x168>
    2c30:	movw	r2, #837	; 0x345
    2c34:	ldr	r3, [pc, #204]	; 2d08 <coda_mem_cursor_read_int64_array+0x154>
    2c38:	bl	0 <__assert_fail>
    2c3c:	ldr	ip, [r7, #4]
    2c40:	ldr	r3, [ip, #40]	; 0x28
    2c44:	ldr	ip, [r3]
    2c48:	cmp	ip, #1
    2c4c:	bne	2c6c <coda_mem_cursor_read_int64_array+0xb8>
    2c50:	ldr	r1, [pc, #192]	; 2d18 <coda_mem_cursor_read_int64_array+0x164>
    2c54:	mov	r3, #8
    2c58:	str	r4, [sp]
    2c5c:	mov	r2, r5
    2c60:	mov	r0, r6
    2c64:	bl	0 <read_array>
    2c68:	b	2cec <coda_mem_cursor_read_int64_array+0x138>
    2c6c:	ldr	r2, [r7, #4]
    2c70:	ldr	r0, [r2, #40]	; 0x28
    2c74:	ldr	r0, [r0]
    2c78:	cmp	r0, #0
    2c7c:	beq	2c94 <coda_mem_cursor_read_int64_array+0xe0>
    2c80:	ldr	r0, [pc, #140]	; 2d14 <coda_mem_cursor_read_int64_array+0x160>
    2c84:	ldr	r1, [pc, #144]	; 2d1c <coda_mem_cursor_read_int64_array+0x168>
    2c88:	movw	r2, #843	; 0x34b
    2c8c:	ldr	r3, [pc, #116]	; 2d08 <coda_mem_cursor_read_int64_array+0x154>
    2c90:	bl	0 <__assert_fail>
    2c94:	ldr	r1, [pc, #132]	; 2d20 <coda_mem_cursor_read_int64_array+0x16c>
    2c98:	mov	r3, #8
    2c9c:	mov	ip, #0
    2ca0:	str	ip, [sp]
    2ca4:	mov	r2, r5
    2ca8:	mov	r0, r6
    2cac:	bl	0 <read_array>
    2cb0:	cmp	r0, #0
    2cb4:	beq	2cc0 <coda_mem_cursor_read_int64_array+0x10c>
    2cb8:	mvn	r0, #0
    2cbc:	b	2cec <coda_mem_cursor_read_int64_array+0x138>
    2cc0:	cmp	r4, #0
    2cc4:	beq	2ce8 <coda_mem_cursor_read_int64_array+0x134>
    2cc8:	mov	r2, #8
    2ccc:	mov	r1, r5
    2cd0:	mov	r0, r6
    2cd4:	bl	3d4 <transpose_array>
    2cd8:	cmp	r0, #0
    2cdc:	beq	2ce8 <coda_mem_cursor_read_int64_array+0x134>
    2ce0:	mvn	r0, #0
    2ce4:	b	2cec <coda_mem_cursor_read_int64_array+0x138>
    2ce8:	mov	r0, #0
    2cec:	ldr	r4, [sp, #16]
    2cf0:	ldr	r5, [sp, #20]
    2cf4:	ldr	r6, [sp, #24]
    2cf8:	ldr	r7, [sp, #28]
    2cfc:	ldr	lr, [sp, #8]
    2d00:	add	sp, sp, #32
    2d04:	bx	lr
    2d08:	.word	0x000006c6
    2d0c:	.word	0x00000000
    2d10:	.word	0x000001be
    2d14:	.word	0x00000170
	...

00002d24 <coda_mem_cursor_read_uint64_array>:
    2d24:	mov	ip, sp
    2d28:	sub	sp, sp, #32
    2d2c:	str	ip, [sp, #4]
    2d30:	str	lr, [sp, #8]
    2d34:	str	r4, [sp, #16]
    2d38:	str	r5, [sp, #20]
    2d3c:	str	r6, [sp, #24]
    2d40:	str	r7, [sp, #28]
    2d44:	mov	r4, r2
    2d48:	mov	r5, r1
    2d4c:	mov	r6, r0
    2d50:	ldr	r3, [r6, #4]
    2d54:	lsl	r1, r3, #4
    2d58:	add	r0, r6, r1
    2d5c:	sub	lr, r0, #4096	; 0x1000
    2d60:	ldr	r7, [lr, #4088]	; 0xff8
    2d64:	ldr	r3, [r7, #8]
    2d68:	cmp	r3, #1
    2d6c:	bne	2d8c <coda_mem_cursor_read_uint64_array+0x68>
    2d70:	ldr	r1, [pc, #268]	; 2e84 <coda_mem_cursor_read_uint64_array+0x160>
    2d74:	mov	r3, #8
    2d78:	str	r4, [sp]
    2d7c:	mov	r2, r5
    2d80:	mov	r0, r6
    2d84:	bl	0 <read_array>
    2d88:	b	2e5c <coda_mem_cursor_read_uint64_array+0x138>
    2d8c:	ldr	r2, [r7, #8]
    2d90:	cmp	r2, #2
    2d94:	beq	2dac <coda_mem_cursor_read_uint64_array+0x88>
    2d98:	ldr	r0, [pc, #220]	; 2e7c <coda_mem_cursor_read_uint64_array+0x158>
    2d9c:	ldr	r1, [pc, #236]	; 2e90 <coda_mem_cursor_read_uint64_array+0x16c>
    2da0:	mov	r2, #868	; 0x364
    2da4:	ldr	r3, [pc, #224]	; 2e8c <coda_mem_cursor_read_uint64_array+0x168>
    2da8:	bl	0 <__assert_fail>
    2dac:	ldr	ip, [r7, #4]
    2db0:	ldr	r3, [ip, #40]	; 0x28
    2db4:	ldr	ip, [r3]
    2db8:	cmp	ip, #1
    2dbc:	bne	2ddc <coda_mem_cursor_read_uint64_array+0xb8>
    2dc0:	ldr	r1, [pc, #192]	; 2e88 <coda_mem_cursor_read_uint64_array+0x164>
    2dc4:	mov	r3, #8
    2dc8:	str	r4, [sp]
    2dcc:	mov	r2, r5
    2dd0:	mov	r0, r6
    2dd4:	bl	0 <read_array>
    2dd8:	b	2e5c <coda_mem_cursor_read_uint64_array+0x138>
    2ddc:	ldr	r2, [r7, #4]
    2de0:	ldr	r0, [r2, #40]	; 0x28
    2de4:	ldr	r0, [r0]
    2de8:	cmp	r0, #0
    2dec:	beq	2e04 <coda_mem_cursor_read_uint64_array+0xe0>
    2df0:	ldr	r0, [pc, #136]	; 2e80 <coda_mem_cursor_read_uint64_array+0x15c>
    2df4:	ldr	r1, [pc, #148]	; 2e90 <coda_mem_cursor_read_uint64_array+0x16c>
    2df8:	movw	r2, #874	; 0x36a
    2dfc:	ldr	r3, [pc, #136]	; 2e8c <coda_mem_cursor_read_uint64_array+0x168>
    2e00:	bl	0 <__assert_fail>
    2e04:	ldr	r1, [pc, #108]	; 2e78 <coda_mem_cursor_read_uint64_array+0x154>
    2e08:	mov	r3, #8
    2e0c:	mov	ip, #0
    2e10:	str	ip, [sp]
    2e14:	mov	r2, r5
    2e18:	mov	r0, r6
    2e1c:	bl	0 <read_array>
    2e20:	cmp	r0, #0
    2e24:	beq	2e30 <coda_mem_cursor_read_uint64_array+0x10c>
    2e28:	mvn	r0, #0
    2e2c:	b	2e5c <coda_mem_cursor_read_uint64_array+0x138>
    2e30:	cmp	r4, #0
    2e34:	beq	2e58 <coda_mem_cursor_read_uint64_array+0x134>
    2e38:	mov	r2, #8
    2e3c:	mov	r1, r5
    2e40:	mov	r0, r6
    2e44:	bl	3d4 <transpose_array>
    2e48:	cmp	r0, #0
    2e4c:	beq	2e58 <coda_mem_cursor_read_uint64_array+0x134>
    2e50:	mvn	r0, #0
    2e54:	b	2e5c <coda_mem_cursor_read_uint64_array+0x138>
    2e58:	mov	r0, #0
    2e5c:	ldr	r4, [sp, #16]
    2e60:	ldr	r5, [sp, #20]
    2e64:	ldr	r6, [sp, #24]
    2e68:	ldr	r7, [sp, #28]
    2e6c:	ldr	lr, [sp, #8]
    2e70:	add	sp, sp, #32
    2e74:	bx	lr
    2e78:	.word	0x00000000
    2e7c:	.word	0x000001be
    2e80:	.word	0x00000170
	...
    2e8c:	.word	0x000006e7
    2e90:	.word	0x00000000

00002e94 <coda_mem_cursor_read_float_array>:
    2e94:	mov	ip, sp
    2e98:	sub	sp, sp, #32
    2e9c:	str	ip, [sp, #4]
    2ea0:	str	lr, [sp, #8]
    2ea4:	str	r4, [sp, #16]
    2ea8:	str	r5, [sp, #20]
    2eac:	str	r6, [sp, #24]
    2eb0:	str	r7, [sp, #28]
    2eb4:	mov	r4, r2
    2eb8:	mov	r5, r1
    2ebc:	mov	r6, r0
    2ec0:	ldr	r3, [r6, #4]
    2ec4:	lsl	r1, r3, #4
    2ec8:	add	r0, r6, r1
    2ecc:	sub	lr, r0, #4096	; 0x1000
    2ed0:	ldr	r7, [lr, #4088]	; 0xff8
    2ed4:	ldr	r3, [r7, #8]
    2ed8:	cmp	r3, #1
    2edc:	bne	2efc <coda_mem_cursor_read_float_array+0x68>
    2ee0:	ldr	r1, [pc, #256]	; 2fe8 <coda_mem_cursor_read_float_array+0x154>
    2ee4:	mov	r3, #4
    2ee8:	str	r4, [sp]
    2eec:	mov	r2, r5
    2ef0:	mov	r0, r6
    2ef4:	bl	0 <read_array>
    2ef8:	b	2fcc <coda_mem_cursor_read_float_array+0x138>
    2efc:	ldr	r2, [r7, #8]
    2f00:	cmp	r2, #2
    2f04:	beq	2f1c <coda_mem_cursor_read_float_array+0x88>
    2f08:	ldr	r0, [pc, #224]	; 2ff0 <coda_mem_cursor_read_float_array+0x15c>
    2f0c:	ldr	r1, [pc, #236]	; 3000 <coda_mem_cursor_read_float_array+0x16c>
    2f10:	movw	r2, #899	; 0x383
    2f14:	ldr	r3, [pc, #224]	; 2ffc <coda_mem_cursor_read_float_array+0x168>
    2f18:	bl	0 <__assert_fail>
    2f1c:	ldr	ip, [r7, #4]
    2f20:	ldr	r3, [ip, #40]	; 0x28
    2f24:	ldr	ip, [r3]
    2f28:	cmp	ip, #1
    2f2c:	bne	2f4c <coda_mem_cursor_read_float_array+0xb8>
    2f30:	ldr	r1, [pc, #192]	; 2ff8 <coda_mem_cursor_read_float_array+0x164>
    2f34:	mov	r3, #4
    2f38:	str	r4, [sp]
    2f3c:	mov	r2, r5
    2f40:	mov	r0, r6
    2f44:	bl	0 <read_array>
    2f48:	b	2fcc <coda_mem_cursor_read_float_array+0x138>
    2f4c:	ldr	r2, [r7, #4]
    2f50:	ldr	r0, [r2, #40]	; 0x28
    2f54:	ldr	r0, [r0]
    2f58:	cmp	r0, #0
    2f5c:	beq	2f74 <coda_mem_cursor_read_float_array+0xe0>
    2f60:	ldr	r0, [pc, #140]	; 2ff4 <coda_mem_cursor_read_float_array+0x160>
    2f64:	ldr	r1, [pc, #148]	; 3000 <coda_mem_cursor_read_float_array+0x16c>
    2f68:	movw	r2, #905	; 0x389
    2f6c:	ldr	r3, [pc, #136]	; 2ffc <coda_mem_cursor_read_float_array+0x168>
    2f70:	bl	0 <__assert_fail>
    2f74:	ldr	r1, [pc, #112]	; 2fec <coda_mem_cursor_read_float_array+0x158>
    2f78:	mov	r3, #4
    2f7c:	mov	ip, #0
    2f80:	str	ip, [sp]
    2f84:	mov	r2, r5
    2f88:	mov	r0, r6
    2f8c:	bl	0 <read_array>
    2f90:	cmp	r0, #0
    2f94:	beq	2fa0 <coda_mem_cursor_read_float_array+0x10c>
    2f98:	mvn	r0, #0
    2f9c:	b	2fcc <coda_mem_cursor_read_float_array+0x138>
    2fa0:	cmp	r4, #0
    2fa4:	beq	2fc8 <coda_mem_cursor_read_float_array+0x134>
    2fa8:	mov	r2, #4
    2fac:	mov	r1, r5
    2fb0:	mov	r0, r6
    2fb4:	bl	3d4 <transpose_array>
    2fb8:	cmp	r0, #0
    2fbc:	beq	2fc8 <coda_mem_cursor_read_float_array+0x134>
    2fc0:	mvn	r0, #0
    2fc4:	b	2fcc <coda_mem_cursor_read_float_array+0x138>
    2fc8:	mov	r0, #0
    2fcc:	ldr	r4, [sp, #16]
    2fd0:	ldr	r5, [sp, #20]
    2fd4:	ldr	r6, [sp, #24]
    2fd8:	ldr	r7, [sp, #28]
    2fdc:	ldr	lr, [sp, #8]
    2fe0:	add	sp, sp, #32
    2fe4:	bx	lr
	...
    2ff0:	.word	0x000001be
    2ff4:	.word	0x00000170
    2ff8:	.word	0x00000000
    2ffc:	.word	0x00000709
    3000:	.word	0x00000000

00003004 <coda_mem_cursor_read_double_array>:
    3004:	mov	ip, sp
    3008:	sub	sp, sp, #32
    300c:	str	ip, [sp, #4]
    3010:	str	lr, [sp, #8]
    3014:	str	r4, [sp, #16]
    3018:	str	r5, [sp, #20]
    301c:	str	r6, [sp, #24]
    3020:	str	r7, [sp, #28]
    3024:	mov	r4, r2
    3028:	mov	r5, r1
    302c:	mov	r6, r0
    3030:	ldr	r3, [r6, #4]
    3034:	lsl	r1, r3, #4
    3038:	add	r0, r6, r1
    303c:	sub	lr, r0, #4096	; 0x1000
    3040:	ldr	r7, [lr, #4088]	; 0xff8
    3044:	ldr	r3, [r7, #8]
    3048:	cmp	r3, #1
    304c:	bne	306c <coda_mem_cursor_read_double_array+0x68>
    3050:	ldr	r1, [pc, #256]	; 3158 <coda_mem_cursor_read_double_array+0x154>
    3054:	mov	r3, #8
    3058:	str	r4, [sp]
    305c:	mov	r2, r5
    3060:	mov	r0, r6
    3064:	bl	0 <read_array>
    3068:	b	313c <coda_mem_cursor_read_double_array+0x138>
    306c:	ldr	r2, [r7, #8]
    3070:	cmp	r2, #2
    3074:	beq	308c <coda_mem_cursor_read_double_array+0x88>
    3078:	ldr	r0, [pc, #224]	; 3160 <coda_mem_cursor_read_double_array+0x15c>
    307c:	ldr	r1, [pc, #236]	; 3170 <coda_mem_cursor_read_double_array+0x16c>
    3080:	movw	r2, #930	; 0x3a2
    3084:	ldr	r3, [pc, #208]	; 315c <coda_mem_cursor_read_double_array+0x158>
    3088:	bl	0 <__assert_fail>
    308c:	ldr	ip, [r7, #4]
    3090:	ldr	r3, [ip, #40]	; 0x28
    3094:	ldr	ip, [r3]
    3098:	cmp	ip, #1
    309c:	bne	30bc <coda_mem_cursor_read_double_array+0xb8>
    30a0:	ldr	r1, [pc, #192]	; 3168 <coda_mem_cursor_read_double_array+0x164>
    30a4:	mov	r3, #8
    30a8:	str	r4, [sp]
    30ac:	mov	r2, r5
    30b0:	mov	r0, r6
    30b4:	bl	0 <read_array>
    30b8:	b	313c <coda_mem_cursor_read_double_array+0x138>
    30bc:	ldr	r2, [r7, #4]
    30c0:	ldr	r0, [r2, #40]	; 0x28
    30c4:	ldr	r0, [r0]
    30c8:	cmp	r0, #0
    30cc:	beq	30e4 <coda_mem_cursor_read_double_array+0xe0>
    30d0:	ldr	r0, [pc, #140]	; 3164 <coda_mem_cursor_read_double_array+0x160>
    30d4:	ldr	r1, [pc, #148]	; 3170 <coda_mem_cursor_read_double_array+0x16c>
    30d8:	mov	r2, #936	; 0x3a8
    30dc:	ldr	r3, [pc, #120]	; 315c <coda_mem_cursor_read_double_array+0x158>
    30e0:	bl	0 <__assert_fail>
    30e4:	ldr	r1, [pc, #128]	; 316c <coda_mem_cursor_read_double_array+0x168>
    30e8:	mov	r3, #8
    30ec:	mov	ip, #0
    30f0:	str	ip, [sp]
    30f4:	mov	r2, r5
    30f8:	mov	r0, r6
    30fc:	bl	0 <read_array>
    3100:	cmp	r0, #0
    3104:	beq	3110 <coda_mem_cursor_read_double_array+0x10c>
    3108:	mvn	r0, #0
    310c:	b	313c <coda_mem_cursor_read_double_array+0x138>
    3110:	cmp	r4, #0
    3114:	beq	3138 <coda_mem_cursor_read_double_array+0x134>
    3118:	mov	r2, #8
    311c:	mov	r1, r5
    3120:	mov	r0, r6
    3124:	bl	3d4 <transpose_array>
    3128:	cmp	r0, #0
    312c:	beq	3138 <coda_mem_cursor_read_double_array+0x134>
    3130:	mvn	r0, #0
    3134:	b	313c <coda_mem_cursor_read_double_array+0x138>
    3138:	mov	r0, #0
    313c:	ldr	r4, [sp, #16]
    3140:	ldr	r5, [sp, #20]
    3144:	ldr	r6, [sp, #24]
    3148:	ldr	r7, [sp, #28]
    314c:	ldr	lr, [sp, #8]
    3150:	add	sp, sp, #32
    3154:	bx	lr
    3158:	.word	0x00000000
    315c:	.word	0x0000072a
    3160:	.word	0x000001be
    3164:	.word	0x00000170
	...

00003174 <coda_mem_cursor_read_char_array>:
    3174:	mov	ip, sp
    3178:	sub	sp, sp, #32
    317c:	str	ip, [sp, #4]
    3180:	str	lr, [sp, #8]
    3184:	str	r4, [sp, #16]
    3188:	str	r5, [sp, #20]
    318c:	str	r6, [sp, #24]
    3190:	str	r7, [sp, #28]
    3194:	mov	r4, r2
    3198:	mov	r5, r1
    319c:	mov	r6, r0
    31a0:	ldr	r3, [r6, #4]
    31a4:	lsl	r1, r3, #4
    31a8:	add	r0, r6, r1
    31ac:	sub	lr, r0, #4096	; 0x1000
    31b0:	ldr	r7, [lr, #4088]	; 0xff8
    31b4:	ldr	r3, [r7, #8]
    31b8:	cmp	r3, #1
    31bc:	bne	31dc <coda_mem_cursor_read_char_array+0x68>
    31c0:	ldr	r1, [pc, #272]	; 32d8 <coda_mem_cursor_read_char_array+0x164>
    31c4:	mov	r3, #1
    31c8:	str	r4, [sp]
    31cc:	mov	r2, r5
    31d0:	mov	r0, r6
    31d4:	bl	0 <read_array>
    31d8:	b	32ac <coda_mem_cursor_read_char_array+0x138>
    31dc:	ldr	r2, [r7, #8]
    31e0:	cmp	r2, #2
    31e4:	beq	31fc <coda_mem_cursor_read_char_array+0x88>
    31e8:	ldr	r0, [pc, #224]	; 32d0 <coda_mem_cursor_read_char_array+0x15c>
    31ec:	ldr	r1, [pc, #236]	; 32e0 <coda_mem_cursor_read_char_array+0x16c>
    31f0:	mov	r2, #960	; 0x3c0
    31f4:	ldr	r3, [pc, #204]	; 32c8 <coda_mem_cursor_read_char_array+0x154>
    31f8:	bl	0 <__assert_fail>
    31fc:	ldr	ip, [r7, #4]
    3200:	ldr	r3, [ip, #40]	; 0x28
    3204:	ldr	ip, [r3]
    3208:	cmp	ip, #1
    320c:	bne	322c <coda_mem_cursor_read_char_array+0xb8>
    3210:	ldr	r1, [pc, #180]	; 32cc <coda_mem_cursor_read_char_array+0x158>
    3214:	mov	r3, #1
    3218:	str	r4, [sp]
    321c:	mov	r2, r5
    3220:	mov	r0, r6
    3224:	bl	0 <read_array>
    3228:	b	32ac <coda_mem_cursor_read_char_array+0x138>
    322c:	ldr	r2, [r7, #4]
    3230:	ldr	r0, [r2, #40]	; 0x28
    3234:	ldr	r0, [r0]
    3238:	cmp	r0, #0
    323c:	beq	3254 <coda_mem_cursor_read_char_array+0xe0>
    3240:	ldr	r0, [pc, #140]	; 32d4 <coda_mem_cursor_read_char_array+0x160>
    3244:	ldr	r1, [pc, #148]	; 32e0 <coda_mem_cursor_read_char_array+0x16c>
    3248:	movw	r2, #966	; 0x3c6
    324c:	ldr	r3, [pc, #116]	; 32c8 <coda_mem_cursor_read_char_array+0x154>
    3250:	bl	0 <__assert_fail>
    3254:	ldr	r1, [pc, #128]	; 32dc <coda_mem_cursor_read_char_array+0x168>
    3258:	mov	r3, #1
    325c:	mov	ip, #0
    3260:	str	ip, [sp]
    3264:	mov	r2, r5
    3268:	mov	r0, r6
    326c:	bl	0 <read_array>
    3270:	cmp	r0, #0
    3274:	beq	3280 <coda_mem_cursor_read_char_array+0x10c>
    3278:	mvn	r0, #0
    327c:	b	32ac <coda_mem_cursor_read_char_array+0x138>
    3280:	cmp	r4, #0
    3284:	beq	32a8 <coda_mem_cursor_read_char_array+0x134>
    3288:	mov	r2, #1
    328c:	mov	r1, r5
    3290:	mov	r0, r6
    3294:	bl	3d4 <transpose_array>
    3298:	cmp	r0, #0
    329c:	beq	32a8 <coda_mem_cursor_read_char_array+0x134>
    32a0:	mvn	r0, #0
    32a4:	b	32ac <coda_mem_cursor_read_char_array+0x138>
    32a8:	mov	r0, #0
    32ac:	ldr	r4, [sp, #16]
    32b0:	ldr	r5, [sp, #20]
    32b4:	ldr	r6, [sp, #24]
    32b8:	ldr	r7, [sp, #28]
    32bc:	ldr	lr, [sp, #8]
    32c0:	add	sp, sp, #32
    32c4:	bx	lr
    32c8:	.word	0x0000074c
    32cc:	.word	0x00000000
    32d0:	.word	0x000001be
    32d4:	.word	0x00000170
	...

000032e4 <coda_mem_cursor_read_int8_partial_array>:
    32e4:	mov	ip, sp
    32e8:	sub	sp, sp, #40	; 0x28
    32ec:	str	ip, [sp, #8]
    32f0:	str	lr, [sp, #12]
    32f4:	str	r4, [sp, #16]
    32f8:	str	r5, [sp, #20]
    32fc:	str	r6, [sp, #24]
    3300:	str	r7, [sp, #28]
    3304:	str	r8, [sp, #32]
    3308:	mov	r7, r3
    330c:	mov	r4, r2
    3310:	mov	r5, r1
    3314:	mov	r6, r0
    3318:	ldr	r2, [r6, #4]
    331c:	lsl	ip, r2, #4
    3320:	add	r2, r6, ip
    3324:	sub	lr, r2, #4096	; 0x1000
    3328:	ldr	r8, [lr, #4088]	; 0xff8
    332c:	ldr	r0, [r8, #8]
    3330:	cmp	r0, #1
    3334:	bne	335c <coda_mem_cursor_read_int8_partial_array+0x78>
    3338:	ldr	r1, [pc, #236]	; 342c <coda_mem_cursor_read_int8_partial_array+0x148>
    333c:	mov	r3, #1
    3340:	str	r3, [sp, #4]
    3344:	str	r7, [sp]
    3348:	mov	r3, r4
    334c:	mov	r2, r5
    3350:	mov	r0, r6
    3354:	bl	2e8 <read_partial_array>
    3358:	b	33fc <coda_mem_cursor_read_int8_partial_array+0x118>
    335c:	ldr	r3, [r8, #8]
    3360:	cmp	r3, #2
    3364:	beq	337c <coda_mem_cursor_read_int8_partial_array+0x98>
    3368:	ldr	r0, [pc, #180]	; 3424 <coda_mem_cursor_read_int8_partial_array+0x140>
    336c:	ldr	r1, [pc, #192]	; 3434 <coda_mem_cursor_read_int8_partial_array+0x150>
    3370:	movw	r2, #991	; 0x3df
    3374:	ldr	r3, [pc, #160]	; 341c <coda_mem_cursor_read_int8_partial_array+0x138>
    3378:	bl	0 <__assert_fail>
    337c:	ldr	ip, [r8, #4]
    3380:	ldr	r3, [ip, #40]	; 0x28
    3384:	ldr	r3, [r3]
    3388:	cmp	r3, #1
    338c:	bne	33b4 <coda_mem_cursor_read_int8_partial_array+0xd0>
    3390:	ldr	r1, [pc, #152]	; 3430 <coda_mem_cursor_read_int8_partial_array+0x14c>
    3394:	mov	r2, #1
    3398:	str	r2, [sp, #4]
    339c:	str	r7, [sp]
    33a0:	mov	r3, r4
    33a4:	mov	r2, r5
    33a8:	mov	r0, r6
    33ac:	bl	2e8 <read_partial_array>
    33b0:	b	33fc <coda_mem_cursor_read_int8_partial_array+0x118>
    33b4:	ldr	r1, [r8, #4]
    33b8:	ldr	r1, [r1, #40]	; 0x28
    33bc:	ldr	r0, [r1]
    33c0:	cmp	r0, #0
    33c4:	beq	33dc <coda_mem_cursor_read_int8_partial_array+0xf8>
    33c8:	ldr	r0, [pc, #88]	; 3428 <coda_mem_cursor_read_int8_partial_array+0x144>
    33cc:	ldr	r1, [pc, #96]	; 3434 <coda_mem_cursor_read_int8_partial_array+0x150>
    33d0:	movw	r2, #997	; 0x3e5
    33d4:	ldr	r3, [pc, #64]	; 341c <coda_mem_cursor_read_int8_partial_array+0x138>
    33d8:	bl	0 <__assert_fail>
    33dc:	ldr	r1, [pc, #60]	; 3420 <coda_mem_cursor_read_int8_partial_array+0x13c>
    33e0:	mov	r2, #1
    33e4:	str	r2, [sp, #4]
    33e8:	str	r7, [sp]
    33ec:	mov	r3, r4
    33f0:	mov	r2, r5
    33f4:	mov	r0, r6
    33f8:	bl	2e8 <read_partial_array>
    33fc:	ldr	r4, [sp, #16]
    3400:	ldr	r5, [sp, #20]
    3404:	ldr	r6, [sp, #24]
    3408:	ldr	r7, [sp, #28]
    340c:	ldr	r8, [sp, #32]
    3410:	ldr	lr, [sp, #12]
    3414:	add	sp, sp, #40	; 0x28
    3418:	bx	lr
    341c:	.word	0x0000076c
    3420:	.word	0x00000000
    3424:	.word	0x000001be
    3428:	.word	0x00000170
	...

00003438 <coda_mem_cursor_read_uint8_partial_array>:
    3438:	mov	ip, sp
    343c:	sub	sp, sp, #40	; 0x28
    3440:	str	ip, [sp, #8]
    3444:	str	lr, [sp, #12]
    3448:	str	r4, [sp, #16]
    344c:	str	r5, [sp, #20]
    3450:	str	r6, [sp, #24]
    3454:	str	r7, [sp, #28]
    3458:	str	r8, [sp, #32]
    345c:	mov	r7, r3
    3460:	mov	r4, r2
    3464:	mov	r5, r1
    3468:	mov	r6, r0
    346c:	ldr	r2, [r6, #4]
    3470:	lsl	ip, r2, #4
    3474:	add	r2, r6, ip
    3478:	sub	lr, r2, #4096	; 0x1000
    347c:	ldr	r8, [lr, #4088]	; 0xff8
    3480:	ldr	r0, [r8, #8]
    3484:	cmp	r0, #1
    3488:	bne	34b0 <coda_mem_cursor_read_uint8_partial_array+0x78>
    348c:	ldr	r1, [pc, #236]	; 3580 <coda_mem_cursor_read_uint8_partial_array+0x148>
    3490:	mov	r3, #1
    3494:	str	r3, [sp, #4]
    3498:	str	r7, [sp]
    349c:	mov	r3, r4
    34a0:	mov	r2, r5
    34a4:	mov	r0, r6
    34a8:	bl	2e8 <read_partial_array>
    34ac:	b	3550 <coda_mem_cursor_read_uint8_partial_array+0x118>
    34b0:	ldr	r3, [r8, #8]
    34b4:	cmp	r3, #2
    34b8:	beq	34d0 <coda_mem_cursor_read_uint8_partial_array+0x98>
    34bc:	ldr	r0, [pc, #172]	; 3570 <coda_mem_cursor_read_uint8_partial_array+0x138>
    34c0:	ldr	r1, [pc, #188]	; 3584 <coda_mem_cursor_read_uint8_partial_array+0x14c>
    34c4:	movw	r2, #1011	; 0x3f3
    34c8:	ldr	r3, [pc, #172]	; 357c <coda_mem_cursor_read_uint8_partial_array+0x144>
    34cc:	bl	0 <__assert_fail>
    34d0:	ldr	ip, [r8, #4]
    34d4:	ldr	r3, [ip, #40]	; 0x28
    34d8:	ldr	r3, [r3]
    34dc:	cmp	r3, #1
    34e0:	bne	3508 <coda_mem_cursor_read_uint8_partial_array+0xd0>
    34e4:	ldr	r1, [pc, #156]	; 3588 <coda_mem_cursor_read_uint8_partial_array+0x150>
    34e8:	mov	r2, #1
    34ec:	str	r2, [sp, #4]
    34f0:	str	r7, [sp]
    34f4:	mov	r3, r4
    34f8:	mov	r2, r5
    34fc:	mov	r0, r6
    3500:	bl	2e8 <read_partial_array>
    3504:	b	3550 <coda_mem_cursor_read_uint8_partial_array+0x118>
    3508:	ldr	r1, [r8, #4]
    350c:	ldr	r1, [r1, #40]	; 0x28
    3510:	ldr	r0, [r1]
    3514:	cmp	r0, #0
    3518:	beq	3530 <coda_mem_cursor_read_uint8_partial_array+0xf8>
    351c:	ldr	r0, [pc, #80]	; 3574 <coda_mem_cursor_read_uint8_partial_array+0x13c>
    3520:	ldr	r1, [pc, #92]	; 3584 <coda_mem_cursor_read_uint8_partial_array+0x14c>
    3524:	movw	r2, #1017	; 0x3f9
    3528:	ldr	r3, [pc, #76]	; 357c <coda_mem_cursor_read_uint8_partial_array+0x144>
    352c:	bl	0 <__assert_fail>
    3530:	ldr	r1, [pc, #64]	; 3578 <coda_mem_cursor_read_uint8_partial_array+0x140>
    3534:	mov	r2, #1
    3538:	str	r2, [sp, #4]
    353c:	str	r7, [sp]
    3540:	mov	r3, r4
    3544:	mov	r2, r5
    3548:	mov	r0, r6
    354c:	bl	2e8 <read_partial_array>
    3550:	ldr	r4, [sp, #16]
    3554:	ldr	r5, [sp, #20]
    3558:	ldr	r6, [sp, #24]
    355c:	ldr	r7, [sp, #28]
    3560:	ldr	r8, [sp, #32]
    3564:	ldr	lr, [sp, #12]
    3568:	add	sp, sp, #40	; 0x28
    356c:	bx	lr
    3570:	.word	0x000001be
    3574:	.word	0x00000170
    3578:	.word	0x00000000
    357c:	.word	0x00000794
	...

0000358c <coda_mem_cursor_read_int16_partial_array>:
    358c:	mov	ip, sp
    3590:	sub	sp, sp, #40	; 0x28
    3594:	str	ip, [sp, #8]
    3598:	str	lr, [sp, #12]
    359c:	str	r4, [sp, #16]
    35a0:	str	r5, [sp, #20]
    35a4:	str	r6, [sp, #24]
    35a8:	str	r7, [sp, #28]
    35ac:	str	r8, [sp, #32]
    35b0:	mov	r7, r3
    35b4:	mov	r4, r2
    35b8:	mov	r5, r1
    35bc:	mov	r6, r0
    35c0:	ldr	r2, [r6, #4]
    35c4:	lsl	ip, r2, #4
    35c8:	add	r2, r6, ip
    35cc:	sub	lr, r2, #4096	; 0x1000
    35d0:	ldr	r8, [lr, #4088]	; 0xff8
    35d4:	ldr	r0, [r8, #8]
    35d8:	cmp	r0, #1
    35dc:	bne	3604 <coda_mem_cursor_read_int16_partial_array+0x78>
    35e0:	ldr	r1, [pc, #236]	; 36d4 <coda_mem_cursor_read_int16_partial_array+0x148>
    35e4:	mov	r3, #2
    35e8:	str	r3, [sp, #4]
    35ec:	str	r7, [sp]
    35f0:	mov	r3, r4
    35f4:	mov	r2, r5
    35f8:	mov	r0, r6
    35fc:	bl	2e8 <read_partial_array>
    3600:	b	36a4 <coda_mem_cursor_read_int16_partial_array+0x118>
    3604:	ldr	r3, [r8, #8]
    3608:	cmp	r3, #2
    360c:	beq	3624 <coda_mem_cursor_read_int16_partial_array+0x98>
    3610:	ldr	r0, [pc, #176]	; 36c8 <coda_mem_cursor_read_int16_partial_array+0x13c>
    3614:	ldr	r1, [pc, #192]	; 36dc <coda_mem_cursor_read_int16_partial_array+0x150>
    3618:	movw	r2, #1031	; 0x407
    361c:	ldr	r3, [pc, #160]	; 36c4 <coda_mem_cursor_read_int16_partial_array+0x138>
    3620:	bl	0 <__assert_fail>
    3624:	ldr	ip, [r8, #4]
    3628:	ldr	r3, [ip, #40]	; 0x28
    362c:	ldr	r3, [r3]
    3630:	cmp	r3, #1
    3634:	bne	365c <coda_mem_cursor_read_int16_partial_array+0xd0>
    3638:	ldr	r1, [pc, #140]	; 36cc <coda_mem_cursor_read_int16_partial_array+0x140>
    363c:	mov	r2, #2
    3640:	str	r2, [sp, #4]
    3644:	str	r7, [sp]
    3648:	mov	r3, r4
    364c:	mov	r2, r5
    3650:	mov	r0, r6
    3654:	bl	2e8 <read_partial_array>
    3658:	b	36a4 <coda_mem_cursor_read_int16_partial_array+0x118>
    365c:	ldr	r1, [r8, #4]
    3660:	ldr	r1, [r1, #40]	; 0x28
    3664:	ldr	r0, [r1]
    3668:	cmp	r0, #0
    366c:	beq	3684 <coda_mem_cursor_read_int16_partial_array+0xf8>
    3670:	ldr	r0, [pc, #88]	; 36d0 <coda_mem_cursor_read_int16_partial_array+0x144>
    3674:	ldr	r1, [pc, #96]	; 36dc <coda_mem_cursor_read_int16_partial_array+0x150>
    3678:	movw	r2, #1037	; 0x40d
    367c:	ldr	r3, [pc, #64]	; 36c4 <coda_mem_cursor_read_int16_partial_array+0x138>
    3680:	bl	0 <__assert_fail>
    3684:	ldr	r1, [pc, #76]	; 36d8 <coda_mem_cursor_read_int16_partial_array+0x14c>
    3688:	mov	r2, #2
    368c:	str	r2, [sp, #4]
    3690:	str	r7, [sp]
    3694:	mov	r3, r4
    3698:	mov	r2, r5
    369c:	mov	r0, r6
    36a0:	bl	2e8 <read_partial_array>
    36a4:	ldr	r4, [sp, #16]
    36a8:	ldr	r5, [sp, #20]
    36ac:	ldr	r6, [sp, #24]
    36b0:	ldr	r7, [sp, #28]
    36b4:	ldr	r8, [sp, #32]
    36b8:	ldr	lr, [sp, #12]
    36bc:	add	sp, sp, #40	; 0x28
    36c0:	bx	lr
    36c4:	.word	0x000007bd
    36c8:	.word	0x000001be
    36cc:	.word	0x00000000
    36d0:	.word	0x00000170
	...

000036e0 <coda_mem_cursor_read_uint16_partial_array>:
    36e0:	mov	ip, sp
    36e4:	sub	sp, sp, #40	; 0x28
    36e8:	str	ip, [sp, #8]
    36ec:	str	lr, [sp, #12]
    36f0:	str	r4, [sp, #16]
    36f4:	str	r5, [sp, #20]
    36f8:	str	r6, [sp, #24]
    36fc:	str	r7, [sp, #28]
    3700:	str	r8, [sp, #32]
    3704:	mov	r7, r3
    3708:	mov	r4, r2
    370c:	mov	r5, r1
    3710:	mov	r6, r0
    3714:	ldr	r2, [r6, #4]
    3718:	lsl	ip, r2, #4
    371c:	add	r2, r6, ip
    3720:	sub	lr, r2, #4096	; 0x1000
    3724:	ldr	r8, [lr, #4088]	; 0xff8
    3728:	ldr	r0, [r8, #8]
    372c:	cmp	r0, #1
    3730:	bne	3758 <coda_mem_cursor_read_uint16_partial_array+0x78>
    3734:	ldr	r1, [pc, #220]	; 3818 <coda_mem_cursor_read_uint16_partial_array+0x138>
    3738:	mov	r3, #2
    373c:	str	r3, [sp, #4]
    3740:	str	r7, [sp]
    3744:	mov	r3, r4
    3748:	mov	r2, r5
    374c:	mov	r0, r6
    3750:	bl	2e8 <read_partial_array>
    3754:	b	37f8 <coda_mem_cursor_read_uint16_partial_array+0x118>
    3758:	ldr	r3, [r8, #8]
    375c:	cmp	r3, #2
    3760:	beq	3778 <coda_mem_cursor_read_uint16_partial_array+0x98>
    3764:	ldr	r0, [pc, #180]	; 3820 <coda_mem_cursor_read_uint16_partial_array+0x140>
    3768:	ldr	r1, [pc, #192]	; 3830 <coda_mem_cursor_read_uint16_partial_array+0x150>
    376c:	movw	r2, #1051	; 0x41b
    3770:	ldr	r3, [pc, #176]	; 3828 <coda_mem_cursor_read_uint16_partial_array+0x148>
    3774:	bl	0 <__assert_fail>
    3778:	ldr	ip, [r8, #4]
    377c:	ldr	r3, [ip, #40]	; 0x28
    3780:	ldr	r3, [r3]
    3784:	cmp	r3, #1
    3788:	bne	37b0 <coda_mem_cursor_read_uint16_partial_array+0xd0>
    378c:	ldr	r1, [pc, #136]	; 381c <coda_mem_cursor_read_uint16_partial_array+0x13c>
    3790:	mov	r2, #2
    3794:	str	r2, [sp, #4]
    3798:	str	r7, [sp]
    379c:	mov	r3, r4
    37a0:	mov	r2, r5
    37a4:	mov	r0, r6
    37a8:	bl	2e8 <read_partial_array>
    37ac:	b	37f8 <coda_mem_cursor_read_uint16_partial_array+0x118>
    37b0:	ldr	r1, [r8, #4]
    37b4:	ldr	r1, [r1, #40]	; 0x28
    37b8:	ldr	r0, [r1]
    37bc:	cmp	r0, #0
    37c0:	beq	37d8 <coda_mem_cursor_read_uint16_partial_array+0xf8>
    37c4:	ldr	r0, [pc, #88]	; 3824 <coda_mem_cursor_read_uint16_partial_array+0x144>
    37c8:	ldr	r1, [pc, #96]	; 3830 <coda_mem_cursor_read_uint16_partial_array+0x150>
    37cc:	movw	r2, #1057	; 0x421
    37d0:	ldr	r3, [pc, #80]	; 3828 <coda_mem_cursor_read_uint16_partial_array+0x148>
    37d4:	bl	0 <__assert_fail>
    37d8:	ldr	r1, [pc, #76]	; 382c <coda_mem_cursor_read_uint16_partial_array+0x14c>
    37dc:	mov	r2, #2
    37e0:	str	r2, [sp, #4]
    37e4:	str	r7, [sp]
    37e8:	mov	r3, r4
    37ec:	mov	r2, r5
    37f0:	mov	r0, r6
    37f4:	bl	2e8 <read_partial_array>
    37f8:	ldr	r4, [sp, #16]
    37fc:	ldr	r5, [sp, #20]
    3800:	ldr	r6, [sp, #24]
    3804:	ldr	r7, [sp, #28]
    3808:	ldr	r8, [sp, #32]
    380c:	ldr	lr, [sp, #12]
    3810:	add	sp, sp, #40	; 0x28
    3814:	bx	lr
	...
    3820:	.word	0x000001be
    3824:	.word	0x00000170
    3828:	.word	0x000007e6
	...

00003834 <coda_mem_cursor_read_int32_partial_array>:
    3834:	mov	ip, sp
    3838:	sub	sp, sp, #40	; 0x28
    383c:	str	ip, [sp, #8]
    3840:	str	lr, [sp, #12]
    3844:	str	r4, [sp, #16]
    3848:	str	r5, [sp, #20]
    384c:	str	r6, [sp, #24]
    3850:	str	r7, [sp, #28]
    3854:	str	r8, [sp, #32]
    3858:	mov	r7, r3
    385c:	mov	r4, r2
    3860:	mov	r5, r1
    3864:	mov	r6, r0
    3868:	ldr	r2, [r6, #4]
    386c:	lsl	ip, r2, #4
    3870:	add	r2, r6, ip
    3874:	sub	lr, r2, #4096	; 0x1000
    3878:	ldr	r8, [lr, #4088]	; 0xff8
    387c:	ldr	r0, [r8, #8]
    3880:	cmp	r0, #1
    3884:	bne	38ac <coda_mem_cursor_read_int32_partial_array+0x78>
    3888:	ldr	r1, [pc, #236]	; 397c <coda_mem_cursor_read_int32_partial_array+0x148>
    388c:	mov	r3, #4
    3890:	str	r3, [sp, #4]
    3894:	str	r7, [sp]
    3898:	mov	r3, r4
    389c:	mov	r2, r5
    38a0:	mov	r0, r6
    38a4:	bl	2e8 <read_partial_array>
    38a8:	b	394c <coda_mem_cursor_read_int32_partial_array+0x118>
    38ac:	ldr	r3, [r8, #8]
    38b0:	cmp	r3, #2
    38b4:	beq	38cc <coda_mem_cursor_read_int32_partial_array+0x98>
    38b8:	ldr	r0, [pc, #180]	; 3974 <coda_mem_cursor_read_int32_partial_array+0x140>
    38bc:	ldr	r1, [pc, #192]	; 3984 <coda_mem_cursor_read_int32_partial_array+0x150>
    38c0:	movw	r2, #1071	; 0x42f
    38c4:	ldr	r3, [pc, #160]	; 396c <coda_mem_cursor_read_int32_partial_array+0x138>
    38c8:	bl	0 <__assert_fail>
    38cc:	ldr	ip, [r8, #4]
    38d0:	ldr	r3, [ip, #40]	; 0x28
    38d4:	ldr	r3, [r3]
    38d8:	cmp	r3, #1
    38dc:	bne	3904 <coda_mem_cursor_read_int32_partial_array+0xd0>
    38e0:	ldr	r1, [pc, #152]	; 3980 <coda_mem_cursor_read_int32_partial_array+0x14c>
    38e4:	mov	r2, #4
    38e8:	str	r2, [sp, #4]
    38ec:	str	r7, [sp]
    38f0:	mov	r3, r4
    38f4:	mov	r2, r5
    38f8:	mov	r0, r6
    38fc:	bl	2e8 <read_partial_array>
    3900:	b	394c <coda_mem_cursor_read_int32_partial_array+0x118>
    3904:	ldr	r1, [r8, #4]
    3908:	ldr	r1, [r1, #40]	; 0x28
    390c:	ldr	r0, [r1]
    3910:	cmp	r0, #0
    3914:	beq	392c <coda_mem_cursor_read_int32_partial_array+0xf8>
    3918:	ldr	r0, [pc, #88]	; 3978 <coda_mem_cursor_read_int32_partial_array+0x144>
    391c:	ldr	r1, [pc, #96]	; 3984 <coda_mem_cursor_read_int32_partial_array+0x150>
    3920:	movw	r2, #1077	; 0x435
    3924:	ldr	r3, [pc, #64]	; 396c <coda_mem_cursor_read_int32_partial_array+0x138>
    3928:	bl	0 <__assert_fail>
    392c:	ldr	r1, [pc, #60]	; 3970 <coda_mem_cursor_read_int32_partial_array+0x13c>
    3930:	mov	r2, #4
    3934:	str	r2, [sp, #4]
    3938:	str	r7, [sp]
    393c:	mov	r3, r4
    3940:	mov	r2, r5
    3944:	mov	r0, r6
    3948:	bl	2e8 <read_partial_array>
    394c:	ldr	r4, [sp, #16]
    3950:	ldr	r5, [sp, #20]
    3954:	ldr	r6, [sp, #24]
    3958:	ldr	r7, [sp, #28]
    395c:	ldr	r8, [sp, #32]
    3960:	ldr	lr, [sp, #12]
    3964:	add	sp, sp, #40	; 0x28
    3968:	bx	lr
    396c:	.word	0x00000810
    3970:	.word	0x00000000
    3974:	.word	0x000001be
    3978:	.word	0x00000170
	...

00003988 <coda_mem_cursor_read_uint32_partial_array>:
    3988:	mov	ip, sp
    398c:	sub	sp, sp, #40	; 0x28
    3990:	str	ip, [sp, #8]
    3994:	str	lr, [sp, #12]
    3998:	str	r4, [sp, #16]
    399c:	str	r5, [sp, #20]
    39a0:	str	r6, [sp, #24]
    39a4:	str	r7, [sp, #28]
    39a8:	str	r8, [sp, #32]
    39ac:	mov	r7, r3
    39b0:	mov	r4, r2
    39b4:	mov	r5, r1
    39b8:	mov	r6, r0
    39bc:	ldr	r2, [r6, #4]
    39c0:	lsl	ip, r2, #4
    39c4:	add	r2, r6, ip
    39c8:	sub	lr, r2, #4096	; 0x1000
    39cc:	ldr	r8, [lr, #4088]	; 0xff8
    39d0:	ldr	r0, [r8, #8]
    39d4:	cmp	r0, #1
    39d8:	bne	3a00 <coda_mem_cursor_read_uint32_partial_array+0x78>
    39dc:	ldr	r1, [pc, #220]	; 3ac0 <coda_mem_cursor_read_uint32_partial_array+0x138>
    39e0:	mov	r3, #4
    39e4:	str	r3, [sp, #4]
    39e8:	str	r7, [sp]
    39ec:	mov	r3, r4
    39f0:	mov	r2, r5
    39f4:	mov	r0, r6
    39f8:	bl	2e8 <read_partial_array>
    39fc:	b	3aa0 <coda_mem_cursor_read_uint32_partial_array+0x118>
    3a00:	ldr	r3, [r8, #8]
    3a04:	cmp	r3, #2
    3a08:	beq	3a20 <coda_mem_cursor_read_uint32_partial_array+0x98>
    3a0c:	ldr	r0, [pc, #180]	; 3ac8 <coda_mem_cursor_read_uint32_partial_array+0x140>
    3a10:	ldr	r1, [pc, #188]	; 3ad4 <coda_mem_cursor_read_uint32_partial_array+0x14c>
    3a14:	movw	r2, #1091	; 0x443
    3a18:	ldr	r3, [pc, #184]	; 3ad8 <coda_mem_cursor_read_uint32_partial_array+0x150>
    3a1c:	bl	0 <__assert_fail>
    3a20:	ldr	ip, [r8, #4]
    3a24:	ldr	r3, [ip, #40]	; 0x28
    3a28:	ldr	r3, [r3]
    3a2c:	cmp	r3, #1
    3a30:	bne	3a58 <coda_mem_cursor_read_uint32_partial_array+0xd0>
    3a34:	ldr	r1, [pc, #136]	; 3ac4 <coda_mem_cursor_read_uint32_partial_array+0x13c>
    3a38:	mov	r2, #4
    3a3c:	str	r2, [sp, #4]
    3a40:	str	r7, [sp]
    3a44:	mov	r3, r4
    3a48:	mov	r2, r5
    3a4c:	mov	r0, r6
    3a50:	bl	2e8 <read_partial_array>
    3a54:	b	3aa0 <coda_mem_cursor_read_uint32_partial_array+0x118>
    3a58:	ldr	r1, [r8, #4]
    3a5c:	ldr	r1, [r1, #40]	; 0x28
    3a60:	ldr	r0, [r1]
    3a64:	cmp	r0, #0
    3a68:	beq	3a80 <coda_mem_cursor_read_uint32_partial_array+0xf8>
    3a6c:	ldr	r0, [pc, #88]	; 3acc <coda_mem_cursor_read_uint32_partial_array+0x144>
    3a70:	ldr	r1, [pc, #92]	; 3ad4 <coda_mem_cursor_read_uint32_partial_array+0x14c>
    3a74:	movw	r2, #1097	; 0x449
    3a78:	ldr	r3, [pc, #88]	; 3ad8 <coda_mem_cursor_read_uint32_partial_array+0x150>
    3a7c:	bl	0 <__assert_fail>
    3a80:	ldr	r1, [pc, #72]	; 3ad0 <coda_mem_cursor_read_uint32_partial_array+0x148>
    3a84:	mov	r2, #4
    3a88:	str	r2, [sp, #4]
    3a8c:	str	r7, [sp]
    3a90:	mov	r3, r4
    3a94:	mov	r2, r5
    3a98:	mov	r0, r6
    3a9c:	bl	2e8 <read_partial_array>
    3aa0:	ldr	r4, [sp, #16]
    3aa4:	ldr	r5, [sp, #20]
    3aa8:	ldr	r6, [sp, #24]
    3aac:	ldr	r7, [sp, #28]
    3ab0:	ldr	r8, [sp, #32]
    3ab4:	ldr	lr, [sp, #12]
    3ab8:	add	sp, sp, #40	; 0x28
    3abc:	bx	lr
	...
    3ac8:	.word	0x000001be
    3acc:	.word	0x00000170
	...
    3ad8:	.word	0x00000839

00003adc <coda_mem_cursor_read_int64_partial_array>:
    3adc:	mov	ip, sp
    3ae0:	sub	sp, sp, #40	; 0x28
    3ae4:	str	ip, [sp, #8]
    3ae8:	str	lr, [sp, #12]
    3aec:	str	r4, [sp, #16]
    3af0:	str	r5, [sp, #20]
    3af4:	str	r6, [sp, #24]
    3af8:	str	r7, [sp, #28]
    3afc:	str	r8, [sp, #32]
    3b00:	mov	r7, r3
    3b04:	mov	r4, r2
    3b08:	mov	r5, r1
    3b0c:	mov	r6, r0
    3b10:	ldr	r2, [r6, #4]
    3b14:	lsl	ip, r2, #4
    3b18:	add	r2, r6, ip
    3b1c:	sub	lr, r2, #4096	; 0x1000
    3b20:	ldr	r8, [lr, #4088]	; 0xff8
    3b24:	ldr	r0, [r8, #8]
    3b28:	cmp	r0, #1
    3b2c:	bne	3b54 <coda_mem_cursor_read_int64_partial_array+0x78>
    3b30:	ldr	r1, [pc, #224]	; 3c18 <coda_mem_cursor_read_int64_partial_array+0x13c>
    3b34:	mov	r3, #8
    3b38:	str	r3, [sp, #4]
    3b3c:	str	r7, [sp]
    3b40:	mov	r3, r4
    3b44:	mov	r2, r5
    3b48:	mov	r0, r6
    3b4c:	bl	2e8 <read_partial_array>
    3b50:	b	3bf4 <coda_mem_cursor_read_int64_partial_array+0x118>
    3b54:	ldr	r3, [r8, #8]
    3b58:	cmp	r3, #2
    3b5c:	beq	3b74 <coda_mem_cursor_read_int64_partial_array+0x98>
    3b60:	ldr	r0, [pc, #180]	; 3c1c <coda_mem_cursor_read_int64_partial_array+0x140>
    3b64:	ldr	r1, [pc, #188]	; 3c28 <coda_mem_cursor_read_int64_partial_array+0x14c>
    3b68:	movw	r2, #1111	; 0x457
    3b6c:	ldr	r3, [pc, #160]	; 3c14 <coda_mem_cursor_read_int64_partial_array+0x138>
    3b70:	bl	0 <__assert_fail>
    3b74:	ldr	ip, [r8, #4]
    3b78:	ldr	r3, [ip, #40]	; 0x28
    3b7c:	ldr	r3, [r3]
    3b80:	cmp	r3, #1
    3b84:	bne	3bac <coda_mem_cursor_read_int64_partial_array+0xd0>
    3b88:	ldr	r1, [pc, #148]	; 3c24 <coda_mem_cursor_read_int64_partial_array+0x148>
    3b8c:	mov	r2, #8
    3b90:	str	r2, [sp, #4]
    3b94:	str	r7, [sp]
    3b98:	mov	r3, r4
    3b9c:	mov	r2, r5
    3ba0:	mov	r0, r6
    3ba4:	bl	2e8 <read_partial_array>
    3ba8:	b	3bf4 <coda_mem_cursor_read_int64_partial_array+0x118>
    3bac:	ldr	r1, [r8, #4]
    3bb0:	ldr	r1, [r1, #40]	; 0x28
    3bb4:	ldr	r0, [r1]
    3bb8:	cmp	r0, #0
    3bbc:	beq	3bd4 <coda_mem_cursor_read_int64_partial_array+0xf8>
    3bc0:	ldr	r0, [pc, #88]	; 3c20 <coda_mem_cursor_read_int64_partial_array+0x144>
    3bc4:	ldr	r1, [pc, #92]	; 3c28 <coda_mem_cursor_read_int64_partial_array+0x14c>
    3bc8:	movw	r2, #1117	; 0x45d
    3bcc:	ldr	r3, [pc, #64]	; 3c14 <coda_mem_cursor_read_int64_partial_array+0x138>
    3bd0:	bl	0 <__assert_fail>
    3bd4:	ldr	r1, [pc, #80]	; 3c2c <coda_mem_cursor_read_int64_partial_array+0x150>
    3bd8:	mov	r2, #8
    3bdc:	str	r2, [sp, #4]
    3be0:	str	r7, [sp]
    3be4:	mov	r3, r4
    3be8:	mov	r2, r5
    3bec:	mov	r0, r6
    3bf0:	bl	2e8 <read_partial_array>
    3bf4:	ldr	r4, [sp, #16]
    3bf8:	ldr	r5, [sp, #20]
    3bfc:	ldr	r6, [sp, #24]
    3c00:	ldr	r7, [sp, #28]
    3c04:	ldr	r8, [sp, #32]
    3c08:	ldr	lr, [sp, #12]
    3c0c:	add	sp, sp, #40	; 0x28
    3c10:	bx	lr
    3c14:	.word	0x00000863
    3c18:	.word	0x00000000
    3c1c:	.word	0x000001be
    3c20:	.word	0x00000170
	...

00003c30 <coda_mem_cursor_read_uint64_partial_array>:
    3c30:	mov	ip, sp
    3c34:	sub	sp, sp, #40	; 0x28
    3c38:	str	ip, [sp, #8]
    3c3c:	str	lr, [sp, #12]
    3c40:	str	r4, [sp, #16]
    3c44:	str	r5, [sp, #20]
    3c48:	str	r6, [sp, #24]
    3c4c:	str	r7, [sp, #28]
    3c50:	str	r8, [sp, #32]
    3c54:	mov	r7, r3
    3c58:	mov	r4, r2
    3c5c:	mov	r5, r1
    3c60:	mov	r6, r0
    3c64:	ldr	r2, [r6, #4]
    3c68:	lsl	ip, r2, #4
    3c6c:	add	r2, r6, ip
    3c70:	sub	lr, r2, #4096	; 0x1000
    3c74:	ldr	r8, [lr, #4088]	; 0xff8
    3c78:	ldr	r0, [r8, #8]
    3c7c:	cmp	r0, #1
    3c80:	bne	3ca8 <coda_mem_cursor_read_uint64_partial_array+0x78>
    3c84:	ldr	r1, [pc, #236]	; 3d78 <coda_mem_cursor_read_uint64_partial_array+0x148>
    3c88:	mov	r3, #8
    3c8c:	str	r3, [sp, #4]
    3c90:	str	r7, [sp]
    3c94:	mov	r3, r4
    3c98:	mov	r2, r5
    3c9c:	mov	r0, r6
    3ca0:	bl	2e8 <read_partial_array>
    3ca4:	b	3d48 <coda_mem_cursor_read_uint64_partial_array+0x118>
    3ca8:	ldr	r3, [r8, #8]
    3cac:	cmp	r3, #2
    3cb0:	beq	3cc8 <coda_mem_cursor_read_uint64_partial_array+0x98>
    3cb4:	ldr	r0, [pc, #176]	; 3d6c <coda_mem_cursor_read_uint64_partial_array+0x13c>
    3cb8:	ldr	r1, [pc, #192]	; 3d80 <coda_mem_cursor_read_uint64_partial_array+0x150>
    3cbc:	movw	r2, #1131	; 0x46b
    3cc0:	ldr	r3, [pc, #172]	; 3d74 <coda_mem_cursor_read_uint64_partial_array+0x144>
    3cc4:	bl	0 <__assert_fail>
    3cc8:	ldr	ip, [r8, #4]
    3ccc:	ldr	r3, [ip, #40]	; 0x28
    3cd0:	ldr	r3, [r3]
    3cd4:	cmp	r3, #1
    3cd8:	bne	3d00 <coda_mem_cursor_read_uint64_partial_array+0xd0>
    3cdc:	ldr	r1, [pc, #152]	; 3d7c <coda_mem_cursor_read_uint64_partial_array+0x14c>
    3ce0:	mov	r2, #8
    3ce4:	str	r2, [sp, #4]
    3ce8:	str	r7, [sp]
    3cec:	mov	r3, r4
    3cf0:	mov	r2, r5
    3cf4:	mov	r0, r6
    3cf8:	bl	2e8 <read_partial_array>
    3cfc:	b	3d48 <coda_mem_cursor_read_uint64_partial_array+0x118>
    3d00:	ldr	r1, [r8, #4]
    3d04:	ldr	r1, [r1, #40]	; 0x28
    3d08:	ldr	r0, [r1]
    3d0c:	cmp	r0, #0
    3d10:	beq	3d28 <coda_mem_cursor_read_uint64_partial_array+0xf8>
    3d14:	ldr	r0, [pc, #84]	; 3d70 <coda_mem_cursor_read_uint64_partial_array+0x140>
    3d18:	ldr	r1, [pc, #96]	; 3d80 <coda_mem_cursor_read_uint64_partial_array+0x150>
    3d1c:	movw	r2, #1137	; 0x471
    3d20:	ldr	r3, [pc, #76]	; 3d74 <coda_mem_cursor_read_uint64_partial_array+0x144>
    3d24:	bl	0 <__assert_fail>
    3d28:	ldr	r1, [pc, #56]	; 3d68 <coda_mem_cursor_read_uint64_partial_array+0x138>
    3d2c:	mov	r2, #8
    3d30:	str	r2, [sp, #4]
    3d34:	str	r7, [sp]
    3d38:	mov	r3, r4
    3d3c:	mov	r2, r5
    3d40:	mov	r0, r6
    3d44:	bl	2e8 <read_partial_array>
    3d48:	ldr	r4, [sp, #16]
    3d4c:	ldr	r5, [sp, #20]
    3d50:	ldr	r6, [sp, #24]
    3d54:	ldr	r7, [sp, #28]
    3d58:	ldr	r8, [sp, #32]
    3d5c:	ldr	lr, [sp, #12]
    3d60:	add	sp, sp, #40	; 0x28
    3d64:	bx	lr
    3d68:	.word	0x00000000
    3d6c:	.word	0x000001be
    3d70:	.word	0x00000170
    3d74:	.word	0x0000088c
	...

00003d84 <coda_mem_cursor_read_float_partial_array>:
    3d84:	mov	ip, sp
    3d88:	sub	sp, sp, #40	; 0x28
    3d8c:	str	ip, [sp, #8]
    3d90:	str	lr, [sp, #12]
    3d94:	str	r4, [sp, #16]
    3d98:	str	r5, [sp, #20]
    3d9c:	str	r6, [sp, #24]
    3da0:	str	r7, [sp, #28]
    3da4:	str	r8, [sp, #32]
    3da8:	mov	r7, r3
    3dac:	mov	r4, r2
    3db0:	mov	r5, r1
    3db4:	mov	r6, r0
    3db8:	ldr	r2, [r6, #4]
    3dbc:	lsl	ip, r2, #4
    3dc0:	add	r2, r6, ip
    3dc4:	sub	lr, r2, #4096	; 0x1000
    3dc8:	ldr	r8, [lr, #4088]	; 0xff8
    3dcc:	ldr	r0, [r8, #8]
    3dd0:	cmp	r0, #1
    3dd4:	bne	3dfc <coda_mem_cursor_read_float_partial_array+0x78>
    3dd8:	ldr	r1, [pc, #220]	; 3ebc <coda_mem_cursor_read_float_partial_array+0x138>
    3ddc:	mov	r3, #4
    3de0:	str	r3, [sp, #4]
    3de4:	str	r7, [sp]
    3de8:	mov	r3, r4
    3dec:	mov	r2, r5
    3df0:	mov	r0, r6
    3df4:	bl	2e8 <read_partial_array>
    3df8:	b	3e9c <coda_mem_cursor_read_float_partial_array+0x118>
    3dfc:	ldr	r3, [r8, #8]
    3e00:	cmp	r3, #2
    3e04:	beq	3e1c <coda_mem_cursor_read_float_partial_array+0x98>
    3e08:	ldr	r0, [pc, #180]	; 3ec4 <coda_mem_cursor_read_float_partial_array+0x140>
    3e0c:	ldr	r1, [pc, #192]	; 3ed4 <coda_mem_cursor_read_float_partial_array+0x150>
    3e10:	movw	r2, #1151	; 0x47f
    3e14:	ldr	r3, [pc, #180]	; 3ed0 <coda_mem_cursor_read_float_partial_array+0x14c>
    3e18:	bl	0 <__assert_fail>
    3e1c:	ldr	ip, [r8, #4]
    3e20:	ldr	r3, [ip, #40]	; 0x28
    3e24:	ldr	r3, [r3]
    3e28:	cmp	r3, #1
    3e2c:	bne	3e54 <coda_mem_cursor_read_float_partial_array+0xd0>
    3e30:	ldr	r1, [pc, #148]	; 3ecc <coda_mem_cursor_read_float_partial_array+0x148>
    3e34:	mov	r2, #4
    3e38:	str	r2, [sp, #4]
    3e3c:	str	r7, [sp]
    3e40:	mov	r3, r4
    3e44:	mov	r2, r5
    3e48:	mov	r0, r6
    3e4c:	bl	2e8 <read_partial_array>
    3e50:	b	3e9c <coda_mem_cursor_read_float_partial_array+0x118>
    3e54:	ldr	r1, [r8, #4]
    3e58:	ldr	r1, [r1, #40]	; 0x28
    3e5c:	ldr	r0, [r1]
    3e60:	cmp	r0, #0
    3e64:	beq	3e7c <coda_mem_cursor_read_float_partial_array+0xf8>
    3e68:	ldr	r0, [pc, #88]	; 3ec8 <coda_mem_cursor_read_float_partial_array+0x144>
    3e6c:	ldr	r1, [pc, #96]	; 3ed4 <coda_mem_cursor_read_float_partial_array+0x150>
    3e70:	movw	r2, #1157	; 0x485
    3e74:	ldr	r3, [pc, #84]	; 3ed0 <coda_mem_cursor_read_float_partial_array+0x14c>
    3e78:	bl	0 <__assert_fail>
    3e7c:	ldr	r1, [pc, #60]	; 3ec0 <coda_mem_cursor_read_float_partial_array+0x13c>
    3e80:	mov	r2, #4
    3e84:	str	r2, [sp, #4]
    3e88:	str	r7, [sp]
    3e8c:	mov	r3, r4
    3e90:	mov	r2, r5
    3e94:	mov	r0, r6
    3e98:	bl	2e8 <read_partial_array>
    3e9c:	ldr	r4, [sp, #16]
    3ea0:	ldr	r5, [sp, #20]
    3ea4:	ldr	r6, [sp, #24]
    3ea8:	ldr	r7, [sp, #28]
    3eac:	ldr	r8, [sp, #32]
    3eb0:	ldr	lr, [sp, #12]
    3eb4:	add	sp, sp, #40	; 0x28
    3eb8:	bx	lr
	...
    3ec4:	.word	0x000001be
    3ec8:	.word	0x00000170
    3ecc:	.word	0x00000000
    3ed0:	.word	0x000008b6
    3ed4:	.word	0x00000000

00003ed8 <coda_mem_cursor_read_double_partial_array>:
    3ed8:	mov	ip, sp
    3edc:	sub	sp, sp, #40	; 0x28
    3ee0:	str	ip, [sp, #8]
    3ee4:	str	lr, [sp, #12]
    3ee8:	str	r4, [sp, #16]
    3eec:	str	r5, [sp, #20]
    3ef0:	str	r6, [sp, #24]
    3ef4:	str	r7, [sp, #28]
    3ef8:	str	r8, [sp, #32]
    3efc:	mov	r7, r3
    3f00:	mov	r4, r2
    3f04:	mov	r5, r1
    3f08:	mov	r6, r0
    3f0c:	ldr	r2, [r6, #4]
    3f10:	lsl	ip, r2, #4
    3f14:	add	r2, r6, ip
    3f18:	sub	lr, r2, #4096	; 0x1000
    3f1c:	ldr	r8, [lr, #4088]	; 0xff8
    3f20:	ldr	r0, [r8, #8]
    3f24:	cmp	r0, #1
    3f28:	bne	3f50 <coda_mem_cursor_read_double_partial_array+0x78>
    3f2c:	ldr	r1, [pc, #220]	; 4010 <coda_mem_cursor_read_double_partial_array+0x138>
    3f30:	mov	r3, #8
    3f34:	str	r3, [sp, #4]
    3f38:	str	r7, [sp]
    3f3c:	mov	r3, r4
    3f40:	mov	r2, r5
    3f44:	mov	r0, r6
    3f48:	bl	2e8 <read_partial_array>
    3f4c:	b	3ff0 <coda_mem_cursor_read_double_partial_array+0x118>
    3f50:	ldr	r3, [r8, #8]
    3f54:	cmp	r3, #2
    3f58:	beq	3f70 <coda_mem_cursor_read_double_partial_array+0x98>
    3f5c:	ldr	r0, [pc, #176]	; 4014 <coda_mem_cursor_read_double_partial_array+0x13c>
    3f60:	ldr	r1, [pc, #192]	; 4028 <coda_mem_cursor_read_double_partial_array+0x150>
    3f64:	movw	r2, #1171	; 0x493
    3f68:	ldr	r3, [pc, #180]	; 4024 <coda_mem_cursor_read_double_partial_array+0x14c>
    3f6c:	bl	0 <__assert_fail>
    3f70:	ldr	ip, [r8, #4]
    3f74:	ldr	r3, [ip, #40]	; 0x28
    3f78:	ldr	r3, [r3]
    3f7c:	cmp	r3, #1
    3f80:	bne	3fa8 <coda_mem_cursor_read_double_partial_array+0xd0>
    3f84:	ldr	r1, [pc, #144]	; 401c <coda_mem_cursor_read_double_partial_array+0x144>
    3f88:	mov	r2, #8
    3f8c:	str	r2, [sp, #4]
    3f90:	str	r7, [sp]
    3f94:	mov	r3, r4
    3f98:	mov	r2, r5
    3f9c:	mov	r0, r6
    3fa0:	bl	2e8 <read_partial_array>
    3fa4:	b	3ff0 <coda_mem_cursor_read_double_partial_array+0x118>
    3fa8:	ldr	r1, [r8, #4]
    3fac:	ldr	r1, [r1, #40]	; 0x28
    3fb0:	ldr	r0, [r1]
    3fb4:	cmp	r0, #0
    3fb8:	beq	3fd0 <coda_mem_cursor_read_double_partial_array+0xf8>
    3fbc:	ldr	r0, [pc, #84]	; 4018 <coda_mem_cursor_read_double_partial_array+0x140>
    3fc0:	ldr	r1, [pc, #96]	; 4028 <coda_mem_cursor_read_double_partial_array+0x150>
    3fc4:	movw	r2, #1177	; 0x499
    3fc8:	ldr	r3, [pc, #84]	; 4024 <coda_mem_cursor_read_double_partial_array+0x14c>
    3fcc:	bl	0 <__assert_fail>
    3fd0:	ldr	r1, [pc, #72]	; 4020 <coda_mem_cursor_read_double_partial_array+0x148>
    3fd4:	mov	r2, #8
    3fd8:	str	r2, [sp, #4]
    3fdc:	str	r7, [sp]
    3fe0:	mov	r3, r4
    3fe4:	mov	r2, r5
    3fe8:	mov	r0, r6
    3fec:	bl	2e8 <read_partial_array>
    3ff0:	ldr	r4, [sp, #16]
    3ff4:	ldr	r5, [sp, #20]
    3ff8:	ldr	r6, [sp, #24]
    3ffc:	ldr	r7, [sp, #28]
    4000:	ldr	r8, [sp, #32]
    4004:	ldr	lr, [sp, #12]
    4008:	add	sp, sp, #40	; 0x28
    400c:	bx	lr
    4010:	.word	0x00000000
    4014:	.word	0x000001be
    4018:	.word	0x00000170
	...
    4024:	.word	0x000008df
    4028:	.word	0x00000000

0000402c <coda_mem_cursor_read_char_partial_array>:
    402c:	mov	ip, sp
    4030:	sub	sp, sp, #40	; 0x28
    4034:	str	ip, [sp, #8]
    4038:	str	lr, [sp, #12]
    403c:	str	r4, [sp, #16]
    4040:	str	r5, [sp, #20]
    4044:	str	r6, [sp, #24]
    4048:	str	r7, [sp, #28]
    404c:	str	r8, [sp, #32]
    4050:	mov	r7, r3
    4054:	mov	r4, r2
    4058:	mov	r5, r1
    405c:	mov	r6, r0
    4060:	ldr	r2, [r6, #4]
    4064:	lsl	ip, r2, #4
    4068:	add	r2, r6, ip
    406c:	sub	lr, r2, #4096	; 0x1000
    4070:	ldr	r8, [lr, #4088]	; 0xff8
    4074:	ldr	r0, [r8, #8]
    4078:	cmp	r0, #1
    407c:	bne	40a4 <coda_mem_cursor_read_char_partial_array+0x78>
    4080:	ldr	r1, [pc, #236]	; 4174 <coda_mem_cursor_read_char_partial_array+0x148>
    4084:	mov	r3, #1
    4088:	str	r3, [sp, #4]
    408c:	str	r7, [sp]
    4090:	mov	r3, r4
    4094:	mov	r2, r5
    4098:	mov	r0, r6
    409c:	bl	2e8 <read_partial_array>
    40a0:	b	4144 <coda_mem_cursor_read_char_partial_array+0x118>
    40a4:	ldr	r3, [r8, #8]
    40a8:	cmp	r3, #2
    40ac:	beq	40c4 <coda_mem_cursor_read_char_partial_array+0x98>
    40b0:	ldr	r0, [pc, #176]	; 4168 <coda_mem_cursor_read_char_partial_array+0x13c>
    40b4:	ldr	r1, [pc, #192]	; 417c <coda_mem_cursor_read_char_partial_array+0x150>
    40b8:	movw	r2, #1191	; 0x4a7
    40bc:	ldr	r3, [pc, #168]	; 416c <coda_mem_cursor_read_char_partial_array+0x140>
    40c0:	bl	0 <__assert_fail>
    40c4:	ldr	ip, [r8, #4]
    40c8:	ldr	r3, [ip, #40]	; 0x28
    40cc:	ldr	r3, [r3]
    40d0:	cmp	r3, #1
    40d4:	bne	40fc <coda_mem_cursor_read_char_partial_array+0xd0>
    40d8:	ldr	r1, [pc, #132]	; 4164 <coda_mem_cursor_read_char_partial_array+0x138>
    40dc:	mov	r2, #1
    40e0:	str	r2, [sp, #4]
    40e4:	str	r7, [sp]
    40e8:	mov	r3, r4
    40ec:	mov	r2, r5
    40f0:	mov	r0, r6
    40f4:	bl	2e8 <read_partial_array>
    40f8:	b	4144 <coda_mem_cursor_read_char_partial_array+0x118>
    40fc:	ldr	r1, [r8, #4]
    4100:	ldr	r1, [r1, #40]	; 0x28
    4104:	ldr	r0, [r1]
    4108:	cmp	r0, #0
    410c:	beq	4124 <coda_mem_cursor_read_char_partial_array+0xf8>
    4110:	ldr	r0, [pc, #88]	; 4170 <coda_mem_cursor_read_char_partial_array+0x144>
    4114:	ldr	r1, [pc, #96]	; 417c <coda_mem_cursor_read_char_partial_array+0x150>
    4118:	movw	r2, #1197	; 0x4ad
    411c:	ldr	r3, [pc, #72]	; 416c <coda_mem_cursor_read_char_partial_array+0x140>
    4120:	bl	0 <__assert_fail>
    4124:	ldr	r1, [pc, #76]	; 4178 <coda_mem_cursor_read_char_partial_array+0x14c>
    4128:	mov	r2, #1
    412c:	str	r2, [sp, #4]
    4130:	str	r7, [sp]
    4134:	mov	r3, r4
    4138:	mov	r2, r5
    413c:	mov	r0, r6
    4140:	bl	2e8 <read_partial_array>
    4144:	ldr	r4, [sp, #16]
    4148:	ldr	r5, [sp, #20]
    414c:	ldr	r6, [sp, #24]
    4150:	ldr	r7, [sp, #28]
    4154:	ldr	r8, [sp, #32]
    4158:	ldr	lr, [sp, #12]
    415c:	add	sp, sp, #40	; 0x28
    4160:	bx	lr
    4164:	.word	0x00000000
    4168:	.word	0x000001be
    416c:	.word	0x00000909
    4170:	.word	0x00000170
	...
