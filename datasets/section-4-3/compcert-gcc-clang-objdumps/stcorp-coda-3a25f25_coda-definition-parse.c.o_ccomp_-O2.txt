
../repos/stcorp-coda-3a25f25/CMakeFiles/coda.dir/libcoda/coda-definition-parse.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <xml_element_name>:
       0:	mov	ip, sp
       4:	sub	sp, sp, #8
       8:	str	ip, [sp]
       c:	str	lr, [sp, #4]
      10:	cmn	r0, #1
      14:	bne	20 <xml_element_name+0x20>
      18:	ldr	r0, [pc, #48]	; 50 <xml_element_name+0x50>
      1c:	b	40 <xml_element_name+0x40>
      20:	ldr	r1, [pc, #36]	; 4c <xml_element_name+0x4c>
      24:	ldr	r1, [r1, r0, lsl #2]
      28:	ldrb	r2, [r1]
      2c:	cmp	r2, #32
      30:	beq	3c <xml_element_name+0x3c>
      34:	add	r1, r1, #1
      38:	b	28 <xml_element_name+0x28>
      3c:	add	r0, r1, #1
      40:	ldr	lr, [sp, #4]
      44:	add	sp, sp, #8
      48:	bx	lr
      4c:	.word	0x00000000
      50:	.word	0x0000150e

00000054 <handle_ziparchive_error>:
      54:	mov	ip, sp
      58:	push	{r0, r1, r2, r3}
      5c:	sub	sp, sp, #24
      60:	str	ip, [sp]
      64:	str	lr, [sp, #4]
      68:	str	r4, [sp, #8]
      6c:	mov	r4, r0
      70:	movw	r0, #65136	; 0xfe70
      74:	movt	r0, #65535	; 0xffff
      78:	ldr	r1, [pc, #40]	; a8 <handle_ziparchive_error+0x54>
      7c:	bl	0 <coda_set_error>
      80:	add	r2, sp, #16
      84:	add	lr, sp, #28
      88:	str	lr, [r2]
      8c:	ldr	r1, [sp, #16]
      90:	mov	r0, r4
      94:	bl	0 <coda_add_error_message_vargs>
      98:	ldr	r4, [sp, #8]
      9c:	ldr	lr, [sp, #4]
      a0:	add	sp, sp, #40	; 0x28
      a4:	bx	lr
      a8:	.word	0x0000030c

000000ac <is_whitespace>:
      ac:	mov	ip, sp
      b0:	sub	sp, sp, #16
      b4:	str	ip, [sp]
      b8:	str	lr, [sp, #4]
      bc:	str	r4, [sp, #8]
      c0:	str	r5, [sp, #12]
      c4:	mov	r5, r1
      c8:	mov	r4, r0
      cc:	cmp	r4, #0
      d0:	bne	e8 <is_whitespace+0x3c>
      d4:	ldr	r0, [pc, #108]	; 148 <is_whitespace+0x9c>
      d8:	ldr	r1, [pc, #96]	; 140 <is_whitespace+0x94>
      dc:	movw	r2, #290	; 0x122
      e0:	ldr	r3, [pc, #92]	; 144 <is_whitespace+0x98>
      e4:	bl	0 <__assert_fail>
      e8:	mov	r3, #0
      ec:	cmp	r3, r5
      f0:	bge	128 <is_whitespace+0x7c>
      f4:	ldrb	r0, [r4, r3]
      f8:	cmp	r0, #32
      fc:	beq	120 <is_whitespace+0x74>
     100:	cmp	r0, #9
     104:	beq	120 <is_whitespace+0x74>
     108:	cmp	r0, #10
     10c:	beq	120 <is_whitespace+0x74>
     110:	cmp	r0, #13
     114:	beq	120 <is_whitespace+0x74>
     118:	mov	r0, #0
     11c:	b	12c <is_whitespace+0x80>
     120:	add	r3, r3, #1
     124:	b	ec <is_whitespace+0x40>
     128:	mov	r0, #1
     12c:	ldr	r4, [sp, #8]
     130:	ldr	r5, [sp, #12]
     134:	ldr	lr, [sp, #4]
     138:	add	sp, sp, #16
     13c:	bx	lr
     140:	.word	0x00001939
     144:	.word	0x00002093
     148:	.word	0x00000a3b

0000014c <escaped_string_length>:
     14c:	mov	ip, sp
     150:	sub	sp, sp, #16
     154:	str	ip, [sp]
     158:	str	lr, [sp, #4]
     15c:	str	r4, [sp, #8]
     160:	cmp	r0, #0
     164:	bne	170 <escaped_string_length+0x24>
     168:	mov	r0, #0
     16c:	b	2a0 <escaped_string_length+0x154>
     170:	mov	r4, #0
     174:	mov	r2, #0
     178:	ldrb	r3, [r0, r4]
     17c:	cmp	r3, #0
     180:	beq	29c <escaped_string_length+0x150>
     184:	cmp	r3, #92	; 0x5c
     188:	bne	290 <escaped_string_length+0x144>
     18c:	add	r4, r4, #1
     190:	ldrb	r3, [r0, r4]
     194:	sub	ip, r3, #92	; 0x5c
     198:	cmp	ip, #27
     19c:	bcs	21c <escaped_string_length+0xd0>
     1a0:	add	pc, pc, ip, lsl #2
     1a4:	nop	{0}
     1a8:	b	214 <escaped_string_length+0xc8>
     1ac:	b	21c <escaped_string_length+0xd0>
     1b0:	b	21c <escaped_string_length+0xd0>
     1b4:	b	21c <escaped_string_length+0xd0>
     1b8:	b	21c <escaped_string_length+0xd0>
     1bc:	b	214 <escaped_string_length+0xc8>
     1c0:	b	214 <escaped_string_length+0xc8>
     1c4:	b	21c <escaped_string_length+0xd0>
     1c8:	b	21c <escaped_string_length+0xd0>
     1cc:	b	214 <escaped_string_length+0xc8>
     1d0:	b	214 <escaped_string_length+0xc8>
     1d4:	b	21c <escaped_string_length+0xd0>
     1d8:	b	21c <escaped_string_length+0xd0>
     1dc:	b	21c <escaped_string_length+0xd0>
     1e0:	b	21c <escaped_string_length+0xd0>
     1e4:	b	21c <escaped_string_length+0xd0>
     1e8:	b	21c <escaped_string_length+0xd0>
     1ec:	b	21c <escaped_string_length+0xd0>
     1f0:	b	214 <escaped_string_length+0xc8>
     1f4:	b	21c <escaped_string_length+0xd0>
     1f8:	b	21c <escaped_string_length+0xd0>
     1fc:	b	21c <escaped_string_length+0xd0>
     200:	b	214 <escaped_string_length+0xc8>
     204:	b	21c <escaped_string_length+0xd0>
     208:	b	214 <escaped_string_length+0xc8>
     20c:	b	21c <escaped_string_length+0xd0>
     210:	b	214 <escaped_string_length+0xc8>
     214:	add	r2, r2, #1
     218:	b	294 <escaped_string_length+0x148>
     21c:	ldrb	r1, [r0, r4]
     220:	cmp	r1, #48	; 0x30
     224:	blt	288 <escaped_string_length+0x13c>
     228:	cmp	r1, #57	; 0x39
     22c:	bgt	288 <escaped_string_length+0x13c>
     230:	add	r1, r0, r4
     234:	ldrb	r3, [r1, #1]
     238:	cmp	r3, #48	; 0x30
     23c:	blt	280 <escaped_string_length+0x134>
     240:	cmp	r3, #57	; 0x39
     244:	bgt	280 <escaped_string_length+0x134>
     248:	add	r4, r4, #1
     24c:	add	r3, r0, r4
     250:	ldrb	ip, [r3, #1]
     254:	cmp	ip, #48	; 0x30
     258:	blt	26c <escaped_string_length+0x120>
     25c:	cmp	ip, #57	; 0x39
     260:	movle	r3, #1
     264:	movgt	r3, #0
     268:	b	270 <escaped_string_length+0x124>
     26c:	mov	r3, #0
     270:	add	r1, r4, #1
     274:	cmp	r3, #0
     278:	movne	r4, r1
     27c:	moveq	r4, r4
     280:	add	r2, r2, #1
     284:	b	294 <escaped_string_length+0x148>
     288:	mvn	r0, #0
     28c:	b	2a0 <escaped_string_length+0x154>
     290:	add	r2, r2, #1
     294:	add	r4, r4, #1
     298:	b	178 <escaped_string_length+0x2c>
     29c:	mov	r0, r2
     2a0:	ldr	r4, [sp, #8]
     2a4:	ldr	lr, [sp, #4]
     2a8:	add	sp, sp, #16
     2ac:	bx	lr

000002b0 <decode_escaped_string>:
     2b0:	mov	ip, sp
     2b4:	sub	sp, sp, #16
     2b8:	str	ip, [sp]
     2bc:	str	lr, [sp, #4]
     2c0:	str	r4, [sp, #8]
     2c4:	mov	r2, r0
     2c8:	cmp	r2, #0
     2cc:	bne	2d8 <decode_escaped_string+0x28>
     2d0:	mov	r0, #0
     2d4:	b	4d8 <decode_escaped_string+0x228>
     2d8:	mov	r4, #0
     2dc:	mov	r0, #0
     2e0:	ldrb	r1, [r2, r4]
     2e4:	cmp	r1, #0
     2e8:	beq	4d0 <decode_escaped_string+0x220>
     2ec:	cmp	r1, #92	; 0x5c
     2f0:	bne	4bc <decode_escaped_string+0x20c>
     2f4:	add	r4, r4, #1
     2f8:	ldrb	r1, [r2, r4]
     2fc:	sub	ip, r1, #92	; 0x5c
     300:	cmp	ip, #27
     304:	bcs	430 <decode_escaped_string+0x180>
     308:	add	pc, pc, ip, lsl #2
     30c:	nop	{0}
     310:	b	41c <decode_escaped_string+0x16c>
     314:	b	430 <decode_escaped_string+0x180>
     318:	b	430 <decode_escaped_string+0x180>
     31c:	b	430 <decode_escaped_string+0x180>
     320:	b	430 <decode_escaped_string+0x180>
     324:	b	390 <decode_escaped_string+0xe0>
     328:	b	3a4 <decode_escaped_string+0xf4>
     32c:	b	430 <decode_escaped_string+0x180>
     330:	b	430 <decode_escaped_string+0x180>
     334:	b	37c <decode_escaped_string+0xcc>
     338:	b	3b8 <decode_escaped_string+0x108>
     33c:	b	430 <decode_escaped_string+0x180>
     340:	b	430 <decode_escaped_string+0x180>
     344:	b	430 <decode_escaped_string+0x180>
     348:	b	430 <decode_escaped_string+0x180>
     34c:	b	430 <decode_escaped_string+0x180>
     350:	b	430 <decode_escaped_string+0x180>
     354:	b	430 <decode_escaped_string+0x180>
     358:	b	3cc <decode_escaped_string+0x11c>
     35c:	b	430 <decode_escaped_string+0x180>
     360:	b	430 <decode_escaped_string+0x180>
     364:	b	430 <decode_escaped_string+0x180>
     368:	b	3e0 <decode_escaped_string+0x130>
     36c:	b	430 <decode_escaped_string+0x180>
     370:	b	3f4 <decode_escaped_string+0x144>
     374:	b	430 <decode_escaped_string+0x180>
     378:	b	408 <decode_escaped_string+0x158>
     37c:	mov	ip, r0
     380:	add	r0, ip, #1
     384:	mov	r3, #27
     388:	strb	r3, [r2, ip]
     38c:	b	4c8 <decode_escaped_string+0x218>
     390:	mov	r3, r0
     394:	add	r0, r3, #1
     398:	mov	r1, #7
     39c:	strb	r1, [r2, r3]
     3a0:	b	4c8 <decode_escaped_string+0x218>
     3a4:	mov	r1, r0
     3a8:	add	r0, r1, #1
     3ac:	mov	ip, #8
     3b0:	strb	ip, [r2, r1]
     3b4:	b	4c8 <decode_escaped_string+0x218>
     3b8:	mov	r3, r0
     3bc:	add	r0, r3, #1
     3c0:	mov	ip, #12
     3c4:	strb	ip, [r2, r3]
     3c8:	b	4c8 <decode_escaped_string+0x218>
     3cc:	mov	r3, r0
     3d0:	add	r0, r3, #1
     3d4:	mov	r1, #10
     3d8:	strb	r1, [r2, r3]
     3dc:	b	4c8 <decode_escaped_string+0x218>
     3e0:	mov	r1, r0
     3e4:	add	r0, r1, #1
     3e8:	mov	r3, #13
     3ec:	strb	r3, [r2, r1]
     3f0:	b	4c8 <decode_escaped_string+0x218>
     3f4:	mov	ip, r0
     3f8:	add	r0, ip, #1
     3fc:	mov	r3, #9
     400:	strb	r3, [r2, ip]
     404:	b	4c8 <decode_escaped_string+0x218>
     408:	mov	ip, r0
     40c:	add	r0, ip, #1
     410:	mov	r1, #11
     414:	strb	r1, [r2, ip]
     418:	b	4c8 <decode_escaped_string+0x218>
     41c:	mov	r1, r0
     420:	add	r0, r1, #1
     424:	mov	r3, #92	; 0x5c
     428:	strb	r3, [r2, r1]
     42c:	b	4c8 <decode_escaped_string+0x218>
     430:	ldrb	r3, [r2, r4]
     434:	cmp	r3, #48	; 0x30
     438:	blt	4b4 <decode_escaped_string+0x204>
     43c:	cmp	r3, #57	; 0x39
     440:	bgt	4b4 <decode_escaped_string+0x204>
     444:	sub	r3, r3, #48	; 0x30
     448:	strb	r3, [r2, r0]
     44c:	add	r1, r2, r4
     450:	ldrb	r1, [r1, #1]
     454:	cmp	r1, #48	; 0x30
     458:	blt	4ac <decode_escaped_string+0x1fc>
     45c:	cmp	r1, #57	; 0x39
     460:	bgt	4ac <decode_escaped_string+0x1fc>
     464:	add	r4, r4, #1
     468:	lsl	r3, r3, #3
     46c:	ldrb	ip, [r2, r4]
     470:	add	ip, r3, ip
     474:	sub	r1, ip, #48	; 0x30
     478:	strb	r1, [r2, r0]
     47c:	add	r3, r2, r4
     480:	ldrb	r3, [r3, #1]
     484:	cmp	r3, #48	; 0x30
     488:	blt	4ac <decode_escaped_string+0x1fc>
     48c:	cmp	r3, #57	; 0x39
     490:	bgt	4ac <decode_escaped_string+0x1fc>
     494:	add	r4, r4, #1
     498:	lsl	ip, r1, #3
     49c:	ldrb	r3, [r2, r4]
     4a0:	add	r1, ip, r3
     4a4:	sub	r1, r1, #48	; 0x30
     4a8:	strb	r1, [r2, r0]
     4ac:	add	r0, r0, #1
     4b0:	b	4c8 <decode_escaped_string+0x218>
     4b4:	mvn	r0, #0
     4b8:	b	4d8 <decode_escaped_string+0x228>
     4bc:	mov	r3, r0
     4c0:	add	r0, r3, #1
     4c4:	strb	r1, [r2, r3]
     4c8:	add	r4, r4, #1
     4cc:	b	2e0 <decode_escaped_string+0x30>
     4d0:	mov	r1, #0
     4d4:	strb	r1, [r2, r0]
     4d8:	ldr	r4, [sp, #8]
     4dc:	ldr	lr, [sp, #4]
     4e0:	add	sp, sp, #16
     4e4:	bx	lr

000004e8 <get_attribute_value>:
     4e8:	mov	ip, sp
     4ec:	sub	sp, sp, #16
     4f0:	str	ip, [sp]
     4f4:	str	lr, [sp, #4]
     4f8:	str	r4, [sp, #8]
     4fc:	str	r5, [sp, #12]
     500:	mov	r4, r1
     504:	mov	r5, r0
     508:	ldr	r0, [r5]
     50c:	cmp	r0, #0
     510:	beq	534 <get_attribute_value+0x4c>
     514:	mov	r1, r4
     518:	bl	0 <strcmp>
     51c:	cmp	r0, #0
     520:	bne	52c <get_attribute_value+0x44>
     524:	ldr	r0, [r5, #4]
     528:	b	538 <get_attribute_value+0x50>
     52c:	add	r5, r5, #8
     530:	b	508 <get_attribute_value+0x20>
     534:	mov	r0, #0
     538:	ldr	r4, [sp, #8]
     53c:	ldr	r5, [sp, #12]
     540:	ldr	lr, [sp, #4]
     544:	add	sp, sp, #16
     548:	bx	lr

0000054c <get_mandatory_attribute_value>:
     54c:	mov	ip, sp
     550:	sub	sp, sp, #24
     554:	str	ip, [sp]
     558:	str	lr, [sp, #4]
     55c:	str	r4, [sp, #8]
     560:	str	r5, [sp, #12]
     564:	str	r6, [sp, #16]
     568:	mov	r5, r2
     56c:	mov	r6, r1
     570:	mov	r1, r6
     574:	bl	4e8 <get_attribute_value>
     578:	mov	r4, r0
     57c:	cmp	r4, #0
     580:	bne	5a4 <get_mandatory_attribute_value+0x58>
     584:	mov	r0, r5
     588:	bl	0 <xml_element_name>
     58c:	mov	r3, r0
     590:	movw	r0, #65136	; 0xfe70
     594:	movt	r0, #65535	; 0xffff
     598:	ldr	r1, [pc, #32]	; 5c0 <get_mandatory_attribute_value+0x74>
     59c:	mov	r2, r6
     5a0:	bl	0 <coda_set_error>
     5a4:	mov	r0, r4
     5a8:	ldr	r4, [sp, #8]
     5ac:	ldr	r5, [sp, #12]
     5b0:	ldr	r6, [sp, #16]
     5b4:	ldr	lr, [sp, #4]
     5b8:	add	sp, sp, #24
     5bc:	bx	lr
     5c0:	.word	0x00000f60

000005c4 <handle_name_attribute_for_type>:
     5c4:	mov	ip, sp
     5c8:	sub	sp, sp, #16
     5cc:	str	ip, [sp]
     5d0:	str	lr, [sp, #4]
     5d4:	str	r4, [sp, #8]
     5d8:	str	r5, [sp, #12]
     5dc:	mov	r5, r0
     5e0:	mov	r0, r1
     5e4:	ldr	r2, [r5]
     5e8:	ldr	r1, [r2, #396]	; 0x18c
     5ec:	ldr	r3, [r1, #396]	; 0x18c
     5f0:	cmp	r3, #0
     5f4:	bne	668 <handle_name_attribute_for_type+0xa4>
     5f8:	ldr	r1, [pc, #168]	; 6a8 <handle_name_attribute_for_type+0xe4>
     5fc:	ldr	r2, [r2]
     600:	bl	54c <get_mandatory_attribute_value>
     604:	mov	r4, r0
     608:	cmp	r4, #0
     60c:	bne	618 <handle_name_attribute_for_type+0x54>
     610:	mvn	r0, #0
     614:	b	694 <handle_name_attribute_for_type+0xd0>
     618:	ldr	r1, [r5, #20]
     61c:	mov	r0, r4
     620:	bl	0 <strcmp>
     624:	cmp	r0, #0
     628:	beq	648 <handle_name_attribute_for_type+0x84>
     62c:	movw	r0, #65136	; 0xfe70
     630:	movt	r0, #65535	; 0xffff
     634:	ldr	r1, [pc, #116]	; 6b0 <handle_name_attribute_for_type+0xec>
     638:	ldr	r2, [r5, #20]
     63c:	bl	0 <coda_set_error>
     640:	mvn	r0, #0
     644:	b	694 <handle_name_attribute_for_type+0xd0>
     648:	ldr	r2, [r5]
     64c:	ldr	r0, [r2, #8]
     650:	mov	r1, r4
     654:	bl	0 <coda_type_set_name>
     658:	cmp	r0, #0
     65c:	beq	690 <handle_name_attribute_for_type+0xcc>
     660:	mvn	r0, #0
     664:	b	694 <handle_name_attribute_for_type+0xd0>
     668:	ldr	r1, [pc, #56]	; 6a8 <handle_name_attribute_for_type+0xe4>
     66c:	bl	4e8 <get_attribute_value>
     670:	cmp	r0, #0
     674:	beq	690 <handle_name_attribute_for_type+0xcc>
     678:	movw	r0, #65136	; 0xfe70
     67c:	movt	r0, #65535	; 0xffff
     680:	ldr	r1, [pc, #36]	; 6ac <handle_name_attribute_for_type+0xe8>
     684:	bl	0 <coda_set_error>
     688:	mvn	r0, #0
     68c:	b	694 <handle_name_attribute_for_type+0xd0>
     690:	mov	r0, #0
     694:	ldr	r4, [sp, #8]
     698:	ldr	r5, [sp, #12]
     69c:	ldr	lr, [sp, #4]
     6a0:	add	sp, sp, #16
     6a4:	bx	lr
     6a8:	.word	0x0000047e
     6ac:	.word	0x00001b72
     6b0:	.word	0x000017e3

000006b4 <handle_format_attribute_for_type>:
     6b4:	mov	ip, sp
     6b8:	sub	sp, sp, #16
     6bc:	str	ip, [sp]
     6c0:	str	lr, [sp, #4]
     6c4:	str	r4, [sp, #8]
     6c8:	mov	r4, r0
     6cc:	mov	r0, r1
     6d0:	ldr	r2, [r4]
     6d4:	ldr	r3, [r2, #396]	; 0x18c
     6d8:	ldr	r1, [r3, #48]	; 0x30
     6dc:	cmp	r1, #0
     6e0:	bne	71c <handle_format_attribute_for_type+0x68>
     6e4:	ldr	r1, [pc, #140]	; 778 <handle_format_attribute_for_type+0xc4>
     6e8:	ldr	r2, [r2]
     6ec:	bl	54c <get_mandatory_attribute_value>
     6f0:	cmp	r0, #0
     6f4:	bne	700 <handle_format_attribute_for_type+0x4c>
     6f8:	mvn	r0, #0
     6fc:	b	768 <handle_format_attribute_for_type+0xb4>
     700:	ldr	r2, [r4]
     704:	add	r1, r2, #44	; 0x2c
     708:	bl	0 <coda_format_from_string>
     70c:	cmp	r0, #0
     710:	beq	758 <handle_format_attribute_for_type+0xa4>
     714:	mvn	r0, #0
     718:	b	768 <handle_format_attribute_for_type+0xb4>
     71c:	ldr	r1, [pc, #84]	; 778 <handle_format_attribute_for_type+0xc4>
     720:	bl	4e8 <get_attribute_value>
     724:	cmp	r0, #0
     728:	beq	748 <handle_format_attribute_for_type+0x94>
     72c:	ldr	r3, [r4]
     730:	add	r1, r3, #44	; 0x2c
     734:	bl	0 <coda_format_from_string>
     738:	cmp	r0, #0
     73c:	beq	758 <handle_format_attribute_for_type+0xa4>
     740:	mvn	r0, #0
     744:	b	768 <handle_format_attribute_for_type+0xb4>
     748:	ldr	r1, [r4]
     74c:	ldr	r0, [r1, #396]	; 0x18c
     750:	ldr	r3, [r0, #44]	; 0x2c
     754:	str	r3, [r1, #44]	; 0x2c
     758:	ldr	r3, [r4]
     75c:	mov	r1, #1
     760:	str	r1, [r3, #48]	; 0x30
     764:	mov	r0, #0
     768:	ldr	r4, [sp, #8]
     76c:	ldr	lr, [sp, #4]
     770:	add	sp, sp, #16
     774:	bx	lr
     778:	.word	0x00001746

0000077c <handle_xml_name>:
     77c:	mov	ip, sp
     780:	sub	sp, sp, #16
     784:	str	ip, [sp]
     788:	str	lr, [sp, #4]
     78c:	str	r4, [sp, #8]
     790:	str	r5, [sp, #12]
     794:	mov	r4, r1
     798:	mov	r5, r0
     79c:	ldr	ip, [r5]
     7a0:	ldr	r3, [ip, #48]	; 0x30
     7a4:	cmp	r3, #0
     7a8:	bne	7c0 <handle_xml_name+0x44>
     7ac:	ldr	r0, [pc, #200]	; 87c <handle_xml_name+0x100>
     7b0:	ldr	r1, [pc, #180]	; 86c <handle_xml_name+0xf0>
     7b4:	mov	r2, #676	; 0x2a4
     7b8:	ldr	r3, [pc, #184]	; 878 <handle_xml_name+0xfc>
     7bc:	bl	0 <__assert_fail>
     7c0:	ldr	r1, [r5]
     7c4:	ldr	r2, [r1, #44]	; 0x2c
     7c8:	cmp	r2, #2
     7cc:	beq	7d8 <handle_xml_name+0x5c>
     7d0:	mov	r0, #0
     7d4:	b	858 <handle_xml_name+0xdc>
     7d8:	ldr	r5, [r1, #396]	; 0x18c
     7dc:	ldr	r0, [r5]
     7e0:	cmp	r0, #14
     7e4:	beq	800 <handle_xml_name+0x84>
     7e8:	cmn	r0, #1
     7ec:	bne	7f8 <handle_xml_name+0x7c>
     7f0:	mov	r0, #0
     7f4:	b	858 <handle_xml_name+0xdc>
     7f8:	ldr	r5, [r5, #396]	; 0x18c
     7fc:	b	7dc <handle_xml_name+0x60>
     800:	ldr	r1, [pc, #108]	; 874 <handle_xml_name+0xf8>
     804:	mov	r0, r4
     808:	bl	4e8 <get_attribute_value>
     80c:	mov	r1, r0
     810:	cmp	r1, #0
     814:	beq	854 <handle_xml_name+0xd8>
     818:	ldr	r0, [r5, #8]
     81c:	ldr	r2, [r0, #4]
     820:	cmp	r2, #0
     824:	beq	840 <handle_xml_name+0xc4>
     828:	movw	r0, #65136	; 0xfe70
     82c:	movt	r0, #65535	; 0xffff
     830:	ldr	r1, [pc, #56]	; 870 <handle_xml_name+0xf4>
     834:	bl	0 <coda_set_error>
     838:	mvn	r0, #0
     83c:	b	858 <handle_xml_name+0xdc>
     840:	bl	0 <coda_type_record_field_set_real_name>
     844:	cmp	r0, #0
     848:	beq	854 <handle_xml_name+0xd8>
     84c:	mvn	r0, #0
     850:	b	858 <handle_xml_name+0xdc>
     854:	mov	r0, #0
     858:	ldr	r4, [sp, #8]
     85c:	ldr	r5, [sp, #12]
     860:	ldr	lr, [sp, #4]
     864:	add	sp, sp, #16
     868:	bx	lr
     86c:	.word	0x00001939
     870:	.word	0x000003a5
     874:	.word	0x000001f6
     878:	.word	0x000020a1
     87c:	.word	0x00001687

00000880 <abort_parser>:
     880:	mov	ip, sp
     884:	sub	sp, sp, #16
     888:	str	ip, [sp]
     88c:	str	lr, [sp, #4]
     890:	str	r4, [sp, #8]
     894:	mov	r4, r0
     898:	ldr	r0, [r4, #4]
     89c:	mov	r1, #0
     8a0:	bl	0 <coda_XML_StopParser>
     8a4:	mov	r1, #1
     8a8:	str	r1, [r4, #36]	; 0x24
     8ac:	ldr	r4, [sp, #8]
     8b0:	ldr	lr, [sp, #4]
     8b4:	add	sp, sp, #16
     8b8:	bx	lr

000008bc <register_sub_element>:
     8bc:	mov	ip, sp
     8c0:	sub	sp, sp, #24
     8c4:	str	ip, [sp]
     8c8:	str	lr, [sp, #4]
     8cc:	str	r4, [sp, #8]
     8d0:	str	r5, [sp, #12]
     8d4:	str	r6, [sp, #16]
     8d8:	str	r7, [sp, #20]
     8dc:	mov	r4, r3
     8e0:	mov	r5, r2
     8e4:	mov	r6, r1
     8e8:	mov	r7, r0
     8ec:	cmp	r5, #0
     8f0:	bne	908 <register_sub_element+0x4c>
     8f4:	ldr	r0, [pc, #60]	; 938 <register_sub_element+0x7c>
     8f8:	ldr	r1, [pc, #52]	; 934 <register_sub_element+0x78>
     8fc:	movw	r2, #735	; 0x2df
     900:	ldr	r3, [pc, #52]	; 93c <register_sub_element+0x80>
     904:	bl	0 <__assert_fail>
     908:	lsl	r3, r6, #2
     90c:	add	r0, r7, r3
     910:	str	r5, [r0, #52]	; 0x34
     914:	str	r4, [r0, #224]	; 0xe0
     918:	ldr	r4, [sp, #8]
     91c:	ldr	r5, [sp, #12]
     920:	ldr	r6, [sp, #16]
     924:	ldr	r7, [sp, #20]
     928:	ldr	lr, [sp, #4]
     92c:	add	sp, sp, #24
     930:	bx	lr
     934:	.word	0x00001939
     938:	.word	0x000019ba
     93c:	.word	0x000020c0

00000940 <register_type_elements>:
     940:	mov	ip, sp
     944:	sub	sp, sp, #16
     948:	str	ip, [sp]
     94c:	str	lr, [sp, #4]
     950:	str	r4, [sp, #8]
     954:	str	r5, [sp, #12]
     958:	mov	r4, r1
     95c:	mov	r5, r0
     960:	mov	r1, #1
     964:	ldr	r2, [pc, #316]	; aa8 <register_type_elements+0x168>
     968:	mov	r3, r4
     96c:	mov	r0, r5
     970:	bl	8bc <register_sub_element>
     974:	mov	r1, #2
     978:	ldr	r2, [pc, #304]	; ab0 <register_type_elements+0x170>
     97c:	mov	r3, r4
     980:	mov	r0, r5
     984:	bl	8bc <register_sub_element>
     988:	mov	r1, #3
     98c:	ldr	r2, [pc, #304]	; ac4 <register_type_elements+0x184>
     990:	mov	r3, r4
     994:	mov	r0, r5
     998:	bl	8bc <register_sub_element>
     99c:	mov	r1, #0
     9a0:	ldr	r2, [pc, #260]	; aac <register_type_elements+0x16c>
     9a4:	mov	r3, r4
     9a8:	mov	r0, r5
     9ac:	bl	8bc <register_sub_element>
     9b0:	mov	r1, #9
     9b4:	ldr	r2, [pc, #276]	; ad0 <register_type_elements+0x190>
     9b8:	mov	r3, r4
     9bc:	mov	r0, r5
     9c0:	bl	8bc <register_sub_element>
     9c4:	mov	r1, #17
     9c8:	ldr	r2, [pc, #232]	; ab8 <register_type_elements+0x178>
     9cc:	mov	r3, r4
     9d0:	mov	r0, r5
     9d4:	bl	8bc <register_sub_element>
     9d8:	mov	r1, #20
     9dc:	ldr	r2, [pc, #208]	; ab4 <register_type_elements+0x174>
     9e0:	mov	r3, r4
     9e4:	mov	r0, r5
     9e8:	bl	8bc <register_sub_element>
     9ec:	mov	r1, #27
     9f0:	ldr	r2, [pc, #208]	; ac8 <register_type_elements+0x188>
     9f4:	mov	r3, r4
     9f8:	mov	r0, r5
     9fc:	bl	8bc <register_sub_element>
     a00:	mov	r1, #34	; 0x22
     a04:	ldr	r2, [pc, #180]	; ac0 <register_type_elements+0x180>
     a08:	mov	r3, r4
     a0c:	mov	r0, r5
     a10:	bl	8bc <register_sub_element>
     a14:	mov	r1, #35	; 0x23
     a18:	ldr	r2, [pc, #128]	; aa0 <register_type_elements+0x160>
     a1c:	mov	r3, r4
     a20:	mov	r0, r5
     a24:	bl	8bc <register_sub_element>
     a28:	mov	r1, #37	; 0x25
     a2c:	ldr	r2, [pc, #152]	; acc <register_type_elements+0x18c>
     a30:	mov	r3, r4
     a34:	mov	r0, r5
     a38:	bl	8bc <register_sub_element>
     a3c:	mov	r1, #38	; 0x26
     a40:	ldr	r2, [pc, #92]	; aa4 <register_type_elements+0x164>
     a44:	mov	r3, r4
     a48:	mov	r0, r5
     a4c:	bl	8bc <register_sub_element>
     a50:	mov	r1, #39	; 0x27
     a54:	ldr	r2, [pc, #120]	; ad4 <register_type_elements+0x194>
     a58:	mov	r3, r4
     a5c:	mov	r0, r5
     a60:	bl	8bc <register_sub_element>
     a64:	mov	r1, #40	; 0x28
     a68:	ldr	r2, [pc, #44]	; a9c <register_type_elements+0x15c>
     a6c:	mov	r3, r4
     a70:	mov	r0, r5
     a74:	bl	8bc <register_sub_element>
     a78:	mov	r1, #42	; 0x2a
     a7c:	ldr	r2, [pc, #56]	; abc <register_type_elements+0x17c>
     a80:	mov	r3, r4
     a84:	mov	r0, r5
     a88:	ldr	r4, [sp, #8]
     a8c:	ldr	r5, [sp, #12]
     a90:	ldr	lr, [sp, #4]
     a94:	add	sp, sp, #16
     a98:	b	8bc <register_sub_element>
	...

00000ad8 <data_dictionary_add_product_class>:
     ad8:	mov	ip, sp
     adc:	sub	sp, sp, #16
     ae0:	str	ip, [sp]
     ae4:	str	lr, [sp, #4]
     ae8:	str	r4, [sp, #8]
     aec:	mov	r4, r0
     af0:	ldr	r2, [r4]
     af4:	ldr	r0, [r2, #8]
     af8:	bl	0 <coda_data_dictionary_add_product_class>
     afc:	cmp	r0, #0
     b00:	beq	b0c <data_dictionary_add_product_class+0x34>
     b04:	mvn	r0, #0
     b08:	b	b1c <data_dictionary_add_product_class+0x44>
     b0c:	ldr	r1, [r4]
     b10:	mov	r0, #0
     b14:	str	r0, [r1, #8]
     b18:	mov	r0, #0
     b1c:	ldr	r4, [sp, #8]
     b20:	ldr	lr, [sp, #4]
     b24:	add	sp, sp, #16
     b28:	bx	lr

00000b2c <dummy_free_handler>:
     b2c:	mov	ip, sp
     b30:	sub	sp, sp, #8
     b34:	str	ip, [sp]
     b38:	str	lr, [sp, #4]
     b3c:	ldr	lr, [sp, #4]
     b40:	add	sp, sp, #8
     b44:	bx	lr

00000b48 <dummy_init>:
     b48:	mov	ip, sp
     b4c:	sub	sp, sp, #8
     b50:	str	ip, [sp]
     b54:	str	lr, [sp, #4]
     b58:	mov	r0, #0
     b5c:	ldr	lr, [sp, #4]
     b60:	add	sp, sp, #8
     b64:	bx	lr

00000b68 <bool_expression_finalise>:
     b68:	mov	ip, sp
     b6c:	sub	sp, sp, #24
     b70:	str	ip, [sp]
     b74:	str	lr, [sp, #4]
     b78:	str	r4, [sp, #8]
     b7c:	mov	r4, r0
     b80:	ldr	r3, [r4]
     b84:	ldr	r0, [r3, #12]
     b88:	cmp	r0, #0
     b8c:	beq	bc4 <bool_expression_finalise+0x5c>
     b90:	bl	0 <strlen>
     b94:	mov	r1, r0
     b98:	ldr	ip, [r4]
     b9c:	ldr	r0, [ip, #12]
     ba0:	bl	ac <is_whitespace>
     ba4:	cmp	r0, #0
     ba8:	beq	bc4 <bool_expression_finalise+0x5c>
     bac:	ldr	r2, [r4]
     bb0:	ldr	r0, [r2, #12]
     bb4:	bl	0 <free>
     bb8:	ldr	r1, [r4]
     bbc:	mov	r2, #0
     bc0:	str	r2, [r1, #12]
     bc4:	ldr	r0, [r4]
     bc8:	ldr	r0, [r0, #12]
     bcc:	cmp	r0, #0
     bd0:	bne	bec <bool_expression_finalise+0x84>
     bd4:	movw	r0, #65136	; 0xfe70
     bd8:	movt	r0, #65535	; 0xffff
     bdc:	ldr	r1, [pc, #156]	; c80 <bool_expression_finalise+0x118>
     be0:	bl	0 <coda_set_error>
     be4:	mvn	r0, #0
     be8:	b	c6c <bool_expression_finalise+0x104>
     bec:	add	r1, sp, #20
     bf0:	bl	0 <coda_expression_from_string>
     bf4:	cmp	r0, #0
     bf8:	beq	c04 <bool_expression_finalise+0x9c>
     bfc:	mvn	r0, #0
     c00:	b	c6c <bool_expression_finalise+0x104>
     c04:	ldr	ip, [r4]
     c08:	ldr	r0, [ip, #12]
     c0c:	bl	0 <free>
     c10:	ldr	r3, [r4]
     c14:	mov	r0, #0
     c18:	str	r0, [r3, #12]
     c1c:	ldr	ip, [r4]
     c20:	ldr	r1, [sp, #20]
     c24:	str	r1, [ip, #8]
     c28:	ldr	r0, [sp, #20]
     c2c:	add	r1, sp, #16
     c30:	bl	0 <coda_expression_get_type>
     c34:	cmp	r0, #0
     c38:	beq	c44 <bool_expression_finalise+0xdc>
     c3c:	mvn	r0, #0
     c40:	b	c6c <bool_expression_finalise+0x104>
     c44:	ldr	r0, [sp, #16]
     c48:	cmp	r0, #0
     c4c:	beq	c68 <bool_expression_finalise+0x100>
     c50:	movw	r0, #65136	; 0xfe70
     c54:	movt	r0, #65535	; 0xffff
     c58:	ldr	r1, [pc, #28]	; c7c <bool_expression_finalise+0x114>
     c5c:	bl	0 <coda_set_error>
     c60:	mvn	r0, #0
     c64:	b	c6c <bool_expression_finalise+0x104>
     c68:	mov	r0, #0
     c6c:	ldr	r4, [sp, #8]
     c70:	ldr	lr, [sp, #4]
     c74:	add	sp, sp, #24
     c78:	bx	lr
     c7c:	.word	0x00000c4f
     c80:	.word	0x0000019d

00000c84 <bool_expression_init>:
     c84:	mov	ip, sp
     c88:	sub	sp, sp, #8
     c8c:	str	ip, [sp]
     c90:	str	lr, [sp, #4]
     c94:	ldr	r2, [r0]
     c98:	mov	r1, #1
     c9c:	str	r1, [r2, #32]
     ca0:	ldr	r1, [r0]
     ca4:	ldr	ip, [pc, #32]	; ccc <bool_expression_init+0x48>
     ca8:	str	ip, [r1, #40]	; 0x28
     cac:	ldr	r1, [r0]
     cb0:	ldr	r3, [pc, #16]	; cc8 <bool_expression_init+0x44>
     cb4:	str	r3, [r1, #36]	; 0x24
     cb8:	mov	r0, #0
     cbc:	ldr	lr, [sp, #4]
     cc0:	add	sp, sp, #8
     cc4:	bx	lr
	...

00000cd0 <integer_expression_finalise>:
     cd0:	mov	ip, sp
     cd4:	sub	sp, sp, #24
     cd8:	str	ip, [sp]
     cdc:	str	lr, [sp, #4]
     ce0:	str	r4, [sp, #8]
     ce4:	mov	r4, r0
     ce8:	ldr	r3, [r4]
     cec:	ldr	r0, [r3, #12]
     cf0:	cmp	r0, #0
     cf4:	beq	d2c <integer_expression_finalise+0x5c>
     cf8:	bl	0 <strlen>
     cfc:	mov	r1, r0
     d00:	ldr	ip, [r4]
     d04:	ldr	r0, [ip, #12]
     d08:	bl	ac <is_whitespace>
     d0c:	cmp	r0, #0
     d10:	beq	d2c <integer_expression_finalise+0x5c>
     d14:	ldr	r2, [r4]
     d18:	ldr	r0, [r2, #12]
     d1c:	bl	0 <free>
     d20:	ldr	r1, [r4]
     d24:	mov	r2, #0
     d28:	str	r2, [r1, #12]
     d2c:	ldr	r0, [r4]
     d30:	ldr	r0, [r0, #12]
     d34:	cmp	r0, #0
     d38:	bne	d54 <integer_expression_finalise+0x84>
     d3c:	movw	r0, #65136	; 0xfe70
     d40:	movt	r0, #65535	; 0xffff
     d44:	ldr	r1, [pc, #152]	; de4 <integer_expression_finalise+0x114>
     d48:	bl	0 <coda_set_error>
     d4c:	mvn	r0, #0
     d50:	b	dd4 <integer_expression_finalise+0x104>
     d54:	add	r1, sp, #20
     d58:	bl	0 <coda_expression_from_string>
     d5c:	cmp	r0, #0
     d60:	beq	d6c <integer_expression_finalise+0x9c>
     d64:	mvn	r0, #0
     d68:	b	dd4 <integer_expression_finalise+0x104>
     d6c:	ldr	ip, [r4]
     d70:	ldr	r0, [ip, #12]
     d74:	bl	0 <free>
     d78:	ldr	r3, [r4]
     d7c:	mov	r0, #0
     d80:	str	r0, [r3, #12]
     d84:	ldr	ip, [r4]
     d88:	ldr	r1, [sp, #20]
     d8c:	str	r1, [ip, #8]
     d90:	ldr	r0, [sp, #20]
     d94:	add	r1, sp, #16
     d98:	bl	0 <coda_expression_get_type>
     d9c:	cmp	r0, #0
     da0:	beq	dac <integer_expression_finalise+0xdc>
     da4:	mvn	r0, #0
     da8:	b	dd4 <integer_expression_finalise+0x104>
     dac:	ldr	r0, [sp, #16]
     db0:	cmp	r0, #1
     db4:	beq	dd0 <integer_expression_finalise+0x100>
     db8:	movw	r0, #65136	; 0xfe70
     dbc:	movt	r0, #65535	; 0xffff
     dc0:	ldr	r1, [pc, #32]	; de8 <integer_expression_finalise+0x118>
     dc4:	bl	0 <coda_set_error>
     dc8:	mvn	r0, #0
     dcc:	b	dd4 <integer_expression_finalise+0x104>
     dd0:	mov	r0, #0
     dd4:	ldr	r4, [sp, #8]
     dd8:	ldr	lr, [sp, #4]
     ddc:	add	sp, sp, #24
     de0:	bx	lr
     de4:	.word	0x000015b4
     de8:	.word	0x00000e95

00000dec <integer_expression_init>:
     dec:	mov	ip, sp
     df0:	sub	sp, sp, #8
     df4:	str	ip, [sp]
     df8:	str	lr, [sp, #4]
     dfc:	ldr	r2, [r0]
     e00:	mov	r1, #1
     e04:	str	r1, [r2, #32]
     e08:	ldr	r1, [r0]
     e0c:	ldr	ip, [pc, #32]	; e34 <integer_expression_init+0x48>
     e10:	str	ip, [r1, #40]	; 0x28
     e14:	ldr	r1, [r0]
     e18:	ldr	r3, [pc, #16]	; e30 <integer_expression_init+0x44>
     e1c:	str	r3, [r1, #36]	; 0x24
     e20:	mov	r0, #0
     e24:	ldr	lr, [sp, #4]
     e28:	add	sp, sp, #8
     e2c:	bx	lr
	...

00000e38 <integer_constant_or_expression_finalise>:
     e38:	mov	ip, sp
     e3c:	sub	sp, sp, #24
     e40:	str	ip, [sp]
     e44:	str	lr, [sp, #4]
     e48:	str	r4, [sp, #8]
     e4c:	mov	r4, r0
     e50:	ldr	ip, [r4]
     e54:	ldr	r0, [ip, #12]
     e58:	cmp	r0, #0
     e5c:	beq	e9c <integer_constant_or_expression_finalise+0x64>
     e60:	bl	0 <strlen>
     e64:	ldr	r1, [r4]
     e68:	ldr	r1, [r1, #12]
     e6c:	mov	r2, r0
     e70:	mov	r0, r1
     e74:	mov	r1, r2
     e78:	bl	ac <is_whitespace>
     e7c:	cmp	r0, #0
     e80:	beq	e9c <integer_constant_or_expression_finalise+0x64>
     e84:	ldr	r3, [r4]
     e88:	ldr	r0, [r3, #12]
     e8c:	bl	0 <free>
     e90:	ldr	r2, [r4]
     e94:	mov	r1, #0
     e98:	str	r1, [r2, #12]
     e9c:	ldr	r3, [r4]
     ea0:	ldr	r0, [r3, #12]
     ea4:	cmp	r0, #0
     ea8:	bne	ec4 <integer_constant_or_expression_finalise+0x8c>
     eac:	movw	r0, #65136	; 0xfe70
     eb0:	movt	r0, #65535	; 0xffff
     eb4:	ldr	r1, [pc, #232]	; fa4 <integer_constant_or_expression_finalise+0x16c>
     eb8:	bl	0 <coda_set_error>
     ebc:	mvn	r0, #0
     ec0:	b	f94 <integer_constant_or_expression_finalise+0x15c>
     ec4:	add	r1, sp, #20
     ec8:	bl	0 <coda_expression_from_string>
     ecc:	cmp	r0, #0
     ed0:	beq	edc <integer_constant_or_expression_finalise+0xa4>
     ed4:	mvn	r0, #0
     ed8:	b	f94 <integer_constant_or_expression_finalise+0x15c>
     edc:	ldr	ip, [r4]
     ee0:	ldr	r0, [ip, #12]
     ee4:	bl	0 <free>
     ee8:	ldr	r0, [r4]
     eec:	mov	ip, #0
     ef0:	str	ip, [r0, #12]
     ef4:	ldr	r2, [r4]
     ef8:	ldr	r0, [sp, #20]
     efc:	str	r0, [r2, #8]
     f00:	ldr	r0, [sp, #20]
     f04:	add	r1, sp, #16
     f08:	bl	0 <coda_expression_get_type>
     f0c:	cmp	r0, #0
     f10:	beq	f24 <integer_constant_or_expression_finalise+0xec>
     f14:	ldr	r0, [sp, #20]
     f18:	bl	0 <coda_expression_delete>
     f1c:	mvn	r0, #0
     f20:	b	f94 <integer_constant_or_expression_finalise+0x15c>
     f24:	ldr	r2, [sp, #16]
     f28:	cmp	r2, #1
     f2c:	beq	f48 <integer_constant_or_expression_finalise+0x110>
     f30:	movw	r0, #65136	; 0xfe70
     f34:	movt	r0, #65535	; 0xffff
     f38:	ldr	r1, [pc, #104]	; fa8 <integer_constant_or_expression_finalise+0x170>
     f3c:	bl	0 <coda_set_error>
     f40:	mvn	r0, #0
     f44:	b	f94 <integer_constant_or_expression_finalise+0x15c>
     f48:	ldr	r0, [sp, #20]
     f4c:	bl	0 <coda_expression_is_constant>
     f50:	cmp	r0, #0
     f54:	beq	f90 <integer_constant_or_expression_finalise+0x158>
     f58:	ldr	r0, [sp, #20]
     f5c:	mov	r1, #0
     f60:	ldr	r2, [r4]
     f64:	add	r2, r2, #16
     f68:	bl	0 <coda_expression_eval_integer>
     f6c:	cmp	r0, #0
     f70:	beq	f7c <integer_constant_or_expression_finalise+0x144>
     f74:	mvn	r0, #0
     f78:	b	f94 <integer_constant_or_expression_finalise+0x15c>
     f7c:	ldr	r2, [r4]
     f80:	mov	ip, #0
     f84:	str	ip, [r2, #8]
     f88:	ldr	r0, [sp, #20]
     f8c:	bl	0 <coda_expression_delete>
     f90:	mov	r0, #0
     f94:	ldr	r4, [sp, #8]
     f98:	ldr	lr, [sp, #4]
     f9c:	add	sp, sp, #24
     fa0:	bx	lr
     fa4:	.word	0x000015b4
     fa8:	.word	0x00000e95

00000fac <integer_constant_or_expression_init>:
     fac:	mov	ip, sp
     fb0:	sub	sp, sp, #8
     fb4:	str	ip, [sp]
     fb8:	str	lr, [sp, #4]
     fbc:	ldr	r2, [r0]
     fc0:	mov	r1, #1
     fc4:	str	r1, [r2, #32]
     fc8:	ldr	r1, [r0]
     fcc:	ldr	ip, [pc, #32]	; ff4 <integer_constant_or_expression_init+0x48>
     fd0:	str	ip, [r1, #40]	; 0x28
     fd4:	ldr	r1, [r0]
     fd8:	ldr	r3, [pc, #16]	; ff0 <integer_constant_or_expression_init+0x44>
     fdc:	str	r3, [r1, #36]	; 0x24
     fe0:	mov	r0, #0
     fe4:	ldr	lr, [sp, #4]
     fe8:	add	sp, sp, #8
     fec:	bx	lr
	...

00000ff8 <optional_integer_constant_or_expression_finalise>:
     ff8:	mov	ip, sp
     ffc:	sub	sp, sp, #24
    1000:	str	ip, [sp]
    1004:	str	lr, [sp, #4]
    1008:	str	r4, [sp, #8]
    100c:	mov	r4, r0
    1010:	ldr	r2, [r4]
    1014:	ldr	r0, [r2, #12]
    1018:	cmp	r0, #0
    101c:	beq	105c <optional_integer_constant_or_expression_finalise+0x64>
    1020:	bl	0 <strlen>
    1024:	ldr	r3, [r4]
    1028:	ldr	r1, [r3, #12]
    102c:	mov	r3, r0
    1030:	mov	r0, r1
    1034:	mov	r1, r3
    1038:	bl	ac <is_whitespace>
    103c:	cmp	r0, #0
    1040:	beq	105c <optional_integer_constant_or_expression_finalise+0x64>
    1044:	ldr	r0, [r4]
    1048:	ldr	r0, [r0, #12]
    104c:	bl	0 <free>
    1050:	ldr	r3, [r4]
    1054:	mov	r1, #0
    1058:	str	r1, [r3, #12]
    105c:	ldr	r1, [r4]
    1060:	ldr	r0, [r1, #12]
    1064:	cmp	r0, #0
    1068:	bne	107c <optional_integer_constant_or_expression_finalise+0x84>
    106c:	mov	ip, #1
    1070:	str	ip, [r1, #4]
    1074:	mov	r0, #0
    1078:	b	114c <optional_integer_constant_or_expression_finalise+0x154>
    107c:	add	r1, sp, #20
    1080:	bl	0 <coda_expression_from_string>
    1084:	cmp	r0, #0
    1088:	beq	1094 <optional_integer_constant_or_expression_finalise+0x9c>
    108c:	mvn	r0, #0
    1090:	b	114c <optional_integer_constant_or_expression_finalise+0x154>
    1094:	ldr	r2, [r4]
    1098:	ldr	r0, [r2, #12]
    109c:	bl	0 <free>
    10a0:	ldr	r2, [r4]
    10a4:	mov	r0, #0
    10a8:	str	r0, [r2, #12]
    10ac:	ldr	r0, [r4]
    10b0:	ldr	ip, [sp, #20]
    10b4:	str	ip, [r0, #8]
    10b8:	ldr	r0, [sp, #20]
    10bc:	add	r1, sp, #16
    10c0:	bl	0 <coda_expression_get_type>
    10c4:	cmp	r0, #0
    10c8:	beq	10dc <optional_integer_constant_or_expression_finalise+0xe4>
    10cc:	ldr	r0, [sp, #20]
    10d0:	bl	0 <coda_expression_delete>
    10d4:	mvn	r0, #0
    10d8:	b	114c <optional_integer_constant_or_expression_finalise+0x154>
    10dc:	ldr	r0, [sp, #16]
    10e0:	cmp	r0, #1
    10e4:	beq	1100 <optional_integer_constant_or_expression_finalise+0x108>
    10e8:	movw	r0, #65136	; 0xfe70
    10ec:	movt	r0, #65535	; 0xffff
    10f0:	ldr	r1, [pc, #100]	; 115c <optional_integer_constant_or_expression_finalise+0x164>
    10f4:	bl	0 <coda_set_error>
    10f8:	mvn	r0, #0
    10fc:	b	114c <optional_integer_constant_or_expression_finalise+0x154>
    1100:	ldr	r0, [sp, #20]
    1104:	bl	0 <coda_expression_is_constant>
    1108:	cmp	r0, #0
    110c:	beq	1148 <optional_integer_constant_or_expression_finalise+0x150>
    1110:	ldr	r0, [sp, #20]
    1114:	mov	r1, #0
    1118:	ldr	r2, [r4]
    111c:	add	r2, r2, #16
    1120:	bl	0 <coda_expression_eval_integer>
    1124:	cmp	r0, #0
    1128:	beq	1134 <optional_integer_constant_or_expression_finalise+0x13c>
    112c:	mvn	r0, #0
    1130:	b	114c <optional_integer_constant_or_expression_finalise+0x154>
    1134:	ldr	r2, [r4]
    1138:	mov	r1, #0
    113c:	str	r1, [r2, #8]
    1140:	ldr	r0, [sp, #20]
    1144:	bl	0 <coda_expression_delete>
    1148:	mov	r0, #0
    114c:	ldr	r4, [sp, #8]
    1150:	ldr	lr, [sp, #4]
    1154:	add	sp, sp, #24
    1158:	bx	lr
    115c:	.word	0x00000e95

00001160 <optional_integer_constant_or_expression_init>:
    1160:	mov	ip, sp
    1164:	sub	sp, sp, #8
    1168:	str	ip, [sp]
    116c:	str	lr, [sp, #4]
    1170:	ldr	r2, [r0]
    1174:	mov	r1, #1
    1178:	str	r1, [r2, #32]
    117c:	ldr	r1, [r0]
    1180:	ldr	ip, [pc, #32]	; 11a8 <optional_integer_constant_or_expression_init+0x48>
    1184:	str	ip, [r1, #40]	; 0x28
    1188:	ldr	r1, [r0]
    118c:	ldr	r3, [pc, #16]	; 11a4 <optional_integer_constant_or_expression_init+0x44>
    1190:	str	r3, [r1, #36]	; 0x24
    1194:	mov	r0, #0
    1198:	ldr	lr, [sp, #4]
    119c:	add	sp, sp, #8
    11a0:	bx	lr
	...

000011ac <product_class_add_named_type>:
    11ac:	mov	ip, sp
    11b0:	sub	sp, sp, #16
    11b4:	str	ip, [sp]
    11b8:	str	lr, [sp, #4]
    11bc:	str	r4, [sp, #8]
    11c0:	mov	r4, r0
    11c4:	ldr	r3, [r4, #24]
    11c8:	cmp	r3, #0
    11cc:	bne	11e4 <product_class_add_named_type+0x38>
    11d0:	ldr	r0, [pc, #72]	; 1220 <product_class_add_named_type+0x74>
    11d4:	ldr	r1, [pc, #60]	; 1218 <product_class_add_named_type+0x6c>
    11d8:	movw	r2, #1002	; 0x3ea
    11dc:	ldr	r3, [pc, #56]	; 121c <product_class_add_named_type+0x70>
    11e0:	bl	0 <__assert_fail>
    11e4:	ldr	r0, [r4, #24]
    11e8:	ldr	r1, [r4]
    11ec:	ldr	r1, [r1, #8]
    11f0:	bl	0 <coda_product_class_add_named_type>
    11f4:	cmp	r0, #0
    11f8:	beq	1204 <product_class_add_named_type+0x58>
    11fc:	mvn	r0, #0
    1200:	b	1208 <product_class_add_named_type+0x5c>
    1204:	mov	r0, #0
    1208:	ldr	r4, [sp, #8]
    120c:	ldr	lr, [sp, #4]
    1210:	add	sp, sp, #16
    1214:	bx	lr
    1218:	.word	0x00001939
    121c:	.word	0x000020d5
    1220:	.word	0x0000199e

00001224 <string_data_finalise>:
    1224:	mov	ip, sp
    1228:	sub	sp, sp, #24
    122c:	str	ip, [sp]
    1230:	str	lr, [sp, #4]
    1234:	str	r4, [sp, #8]
    1238:	str	r5, [sp, #12]
    123c:	str	r6, [sp, #16]
    1240:	ldr	r0, [r0]
    1244:	ldr	r5, [r0, #12]
    1248:	cmp	r5, #0
    124c:	beq	13a4 <string_data_finalise+0x180>
    1250:	mov	r6, #0
    1254:	mov	r4, #0
    1258:	ldrb	r3, [r5, r6]
    125c:	cmp	r3, #0
    1260:	beq	139c <string_data_finalise+0x178>
    1264:	cmp	r3, #38	; 0x26
    1268:	bne	1388 <string_data_finalise+0x164>
    126c:	add	r2, r5, r6
    1270:	add	r0, r2, #1
    1274:	ldr	r1, [pc, #328]	; 13c4 <string_data_finalise+0x1a0>
    1278:	mov	r2, #4
    127c:	bl	0 <strncmp>
    1280:	cmp	r0, #0
    1284:	beq	1370 <string_data_finalise+0x14c>
    1288:	add	ip, r5, r6
    128c:	add	r0, ip, #1
    1290:	ldr	r1, [pc, #312]	; 13d0 <string_data_finalise+0x1ac>
    1294:	mov	r2, #5
    1298:	bl	0 <strncmp>
    129c:	cmp	r0, #0
    12a0:	beq	1358 <string_data_finalise+0x134>
    12a4:	add	r2, r5, r6
    12a8:	add	r0, r2, #1
    12ac:	ldr	r1, [pc, #276]	; 13c8 <string_data_finalise+0x1a4>
    12b0:	mov	r2, #3
    12b4:	bl	0 <strncmp>
    12b8:	cmp	r0, #0
    12bc:	beq	1340 <string_data_finalise+0x11c>
    12c0:	add	r1, r5, r6
    12c4:	add	r0, r1, #1
    12c8:	ldr	r1, [pc, #252]	; 13cc <string_data_finalise+0x1a8>
    12cc:	mov	r2, #3
    12d0:	bl	0 <strncmp>
    12d4:	cmp	r0, #0
    12d8:	beq	1328 <string_data_finalise+0x104>
    12dc:	add	r3, r5, r6
    12e0:	add	r0, r3, #1
    12e4:	ldr	r1, [pc, #212]	; 13c0 <string_data_finalise+0x19c>
    12e8:	mov	r2, #5
    12ec:	bl	0 <strncmp>
    12f0:	cmp	r0, #0
    12f4:	beq	1310 <string_data_finalise+0xec>
    12f8:	mov	r2, r4
    12fc:	add	r4, r2, #1
    1300:	ldrb	r1, [r5, r6]
    1304:	strb	r1, [r5, r2]
    1308:	add	r6, r6, #1
    130c:	b	1258 <string_data_finalise+0x34>
    1310:	mov	r1, r4
    1314:	add	r4, r1, #1
    1318:	mov	ip, #34	; 0x22
    131c:	strb	ip, [r5, r1]
    1320:	add	r6, r6, #6
    1324:	b	1258 <string_data_finalise+0x34>
    1328:	mov	r0, r4
    132c:	add	r4, r0, #1
    1330:	mov	r1, #60	; 0x3c
    1334:	strb	r1, [r5, r0]
    1338:	add	r6, r6, #4
    133c:	b	1258 <string_data_finalise+0x34>
    1340:	mov	r3, r4
    1344:	add	r4, r3, #1
    1348:	mov	ip, #60	; 0x3c
    134c:	strb	ip, [r5, r3]
    1350:	add	r6, r6, #4
    1354:	b	1258 <string_data_finalise+0x34>
    1358:	mov	ip, r4
    135c:	add	r4, ip, #1
    1360:	mov	r0, #39	; 0x27
    1364:	strb	r0, [r5, ip]
    1368:	add	r6, r6, #6
    136c:	b	1258 <string_data_finalise+0x34>
    1370:	mov	r0, r4
    1374:	add	r4, r0, #1
    1378:	mov	r1, #38	; 0x26
    137c:	strb	r1, [r5, r0]
    1380:	add	r6, r6, #5
    1384:	b	1258 <string_data_finalise+0x34>
    1388:	mov	r2, r4
    138c:	add	r4, r2, #1
    1390:	strb	r3, [r5, r2]
    1394:	add	r6, r6, #1
    1398:	b	1258 <string_data_finalise+0x34>
    139c:	mov	r1, #0
    13a0:	strb	r1, [r5, r4]
    13a4:	mov	r0, #0
    13a8:	ldr	r4, [sp, #8]
    13ac:	ldr	r5, [sp, #12]
    13b0:	ldr	r6, [sp, #16]
    13b4:	ldr	lr, [sp, #4]
    13b8:	add	sp, sp, #24
    13bc:	bx	lr
    13c0:	.word	0x00001b6c
    13c4:	.word	0x00000479
    13c8:	.word	0x000013c3
    13cc:	.word	0x00001bf5
    13d0:	.word	0x00001e29

000013d4 <string_data_init>:
    13d4:	mov	ip, sp
    13d8:	sub	sp, sp, #8
    13dc:	str	ip, [sp]
    13e0:	str	lr, [sp, #4]
    13e4:	ldr	r3, [r0]
    13e8:	mov	r2, #1
    13ec:	str	r2, [r3, #32]
    13f0:	ldr	r1, [r0]
    13f4:	ldr	r0, [pc, #16]	; 140c <string_data_init+0x38>
    13f8:	str	r0, [r1, #36]	; 0x24
    13fc:	mov	r0, #0
    1400:	ldr	lr, [sp, #4]
    1404:	add	sp, sp, #8
    1408:	bx	lr
    140c:	.word	0x00000000

00001410 <type_set_format>:
    1410:	mov	ip, sp
    1414:	sub	sp, sp, #32
    1418:	str	ip, [sp]
    141c:	str	lr, [sp, #4]
    1420:	str	r4, [sp, #8]
    1424:	str	r5, [sp, #12]
    1428:	str	r6, [sp, #16]
    142c:	mov	r4, r1
    1430:	mov	r5, r0
    1434:	str	r4, [r5]
    1438:	ldr	ip, [r5, #8]
    143c:	cmp	ip, #0
    1440:	beq	1474 <type_set_format+0x64>
    1444:	cmp	ip, #1
    1448:	beq	1464 <type_set_format+0x54>
    144c:	cmp	ip, #6
    1450:	bne	14ac <type_set_format+0x9c>
    1454:	ldr	r0, [r5, #44]	; 0x2c
    1458:	mov	r1, r4
    145c:	bl	1410 <type_set_format>
    1460:	b	14ac <type_set_format+0x9c>
    1464:	ldr	r0, [r5, #40]	; 0x28
    1468:	mov	r1, r4
    146c:	bl	1410 <type_set_format>
    1470:	b	14ac <type_set_format+0x9c>
    1474:	add	r1, sp, #24
    1478:	mov	r0, r5
    147c:	bl	0 <coda_type_get_num_record_fields>
    1480:	mov	r6, #0
    1484:	ldr	r1, [sp, #24]
    1488:	cmp	r6, r1
    148c:	bge	14ac <type_set_format+0x9c>
    1490:	ldr	r2, [r5, #52]	; 0x34
    1494:	ldr	r1, [r2, r6, lsl #2]
    1498:	ldr	r0, [r1, #8]
    149c:	mov	r1, r4
    14a0:	bl	1410 <type_set_format>
    14a4:	add	r6, r6, #1
    14a8:	b	1484 <type_set_format+0x74>
    14ac:	ldr	r0, [r5, #36]	; 0x24
    14b0:	cmp	r0, #0
    14b4:	beq	14c0 <type_set_format+0xb0>
    14b8:	mov	r1, r4
    14bc:	bl	1410 <type_set_format>
    14c0:	mov	r0, #0
    14c4:	ldr	r4, [sp, #8]
    14c8:	ldr	r5, [sp, #12]
    14cc:	ldr	r6, [sp, #16]
    14d0:	ldr	lr, [sp, #4]
    14d4:	add	sp, sp, #32
    14d8:	bx	lr

000014dc <type_set_description>:
    14dc:	mov	ip, sp
    14e0:	sub	sp, sp, #8
    14e4:	str	ip, [sp]
    14e8:	str	lr, [sp, #4]
    14ec:	ldr	r0, [r0]
    14f0:	ldr	r1, [r0, #12]
    14f4:	cmp	r1, #0
    14f8:	bne	1514 <type_set_description+0x38>
    14fc:	ldr	r0, [r0, #396]	; 0x18c
    1500:	ldr	r0, [r0, #8]
    1504:	ldr	r1, [pc, #28]	; 1528 <type_set_description+0x4c>
    1508:	ldr	lr, [sp, #4]
    150c:	add	sp, sp, #8
    1510:	b	0 <coda_type_set_description>
    1514:	ldr	r3, [r0, #396]	; 0x18c
    1518:	ldr	r0, [r3, #8]
    151c:	ldr	lr, [sp, #4]
    1520:	add	sp, sp, #8
    1524:	b	0 <coda_type_set_description>
    1528:	.word	0x00002067

0000152c <type_set_bit_size>:
    152c:	mov	ip, sp
    1530:	sub	sp, sp, #16
    1534:	str	ip, [sp]
    1538:	str	lr, [sp, #4]
    153c:	str	r4, [sp, #8]
    1540:	mov	r4, r0
    1544:	ldr	r2, [r4]
    1548:	ldr	r1, [r2, #8]
    154c:	cmp	r1, #0
    1550:	bne	1578 <type_set_bit_size+0x4c>
    1554:	ldr	r3, [r2, #396]	; 0x18c
    1558:	ldr	r0, [r3, #8]
    155c:	ldr	r2, [r2, #16]
    1560:	asr	r3, r2, #31
    1564:	bl	0 <coda_type_set_bit_size>
    1568:	cmp	r0, #0
    156c:	beq	15a0 <type_set_bit_size+0x74>
    1570:	mvn	r0, #0
    1574:	b	15a4 <type_set_bit_size+0x78>
    1578:	ldr	r2, [r2, #396]	; 0x18c
    157c:	ldr	r0, [r2, #8]
    1580:	bl	0 <coda_type_set_bit_size_expression>
    1584:	cmp	r0, #0
    1588:	beq	1594 <type_set_bit_size+0x68>
    158c:	mvn	r0, #0
    1590:	b	15a4 <type_set_bit_size+0x78>
    1594:	ldr	r1, [r4]
    1598:	mov	ip, #0
    159c:	str	ip, [r1, #8]
    15a0:	mov	r0, #0
    15a4:	ldr	r4, [sp, #8]
    15a8:	ldr	lr, [sp, #4]
    15ac:	add	sp, sp, #16
    15b0:	bx	lr

000015b4 <type_set_byte_size>:
    15b4:	mov	ip, sp
    15b8:	sub	sp, sp, #16
    15bc:	str	ip, [sp]
    15c0:	str	lr, [sp, #4]
    15c4:	str	r4, [sp, #8]
    15c8:	mov	r4, r0
    15cc:	ldr	r2, [r4]
    15d0:	ldr	r1, [r2, #8]
    15d4:	cmp	r1, #0
    15d8:	bne	1600 <type_set_byte_size+0x4c>
    15dc:	ldr	r3, [r2, #396]	; 0x18c
    15e0:	ldr	r0, [r3, #8]
    15e4:	ldr	r2, [r2, #16]
    15e8:	asr	r3, r2, #31
    15ec:	bl	0 <coda_type_set_byte_size>
    15f0:	cmp	r0, #0
    15f4:	beq	1628 <type_set_byte_size+0x74>
    15f8:	mvn	r0, #0
    15fc:	b	162c <type_set_byte_size+0x78>
    1600:	ldr	r2, [r2, #396]	; 0x18c
    1604:	ldr	r0, [r2, #8]
    1608:	bl	0 <coda_type_set_byte_size_expression>
    160c:	cmp	r0, #0
    1610:	beq	161c <type_set_byte_size+0x68>
    1614:	mvn	r0, #0
    1618:	b	162c <type_set_byte_size+0x78>
    161c:	ldr	r1, [r4]
    1620:	mov	ip, #0
    1624:	str	ip, [r1, #8]
    1628:	mov	r0, #0
    162c:	ldr	r4, [sp, #8]
    1630:	ldr	lr, [sp, #4]
    1634:	add	sp, sp, #16
    1638:	bx	lr

0000163c <void_expression_finalise>:
    163c:	mov	ip, sp
    1640:	sub	sp, sp, #24
    1644:	str	ip, [sp]
    1648:	str	lr, [sp, #4]
    164c:	str	r4, [sp, #8]
    1650:	mov	r4, r0
    1654:	ldr	r3, [r4]
    1658:	ldr	r0, [r3, #12]
    165c:	cmp	r0, #0
    1660:	beq	1698 <void_expression_finalise+0x5c>
    1664:	bl	0 <strlen>
    1668:	mov	r1, r0
    166c:	ldr	ip, [r4]
    1670:	ldr	r0, [ip, #12]
    1674:	bl	ac <is_whitespace>
    1678:	cmp	r0, #0
    167c:	beq	1698 <void_expression_finalise+0x5c>
    1680:	ldr	r2, [r4]
    1684:	ldr	r0, [r2, #12]
    1688:	bl	0 <free>
    168c:	ldr	r1, [r4]
    1690:	mov	r2, #0
    1694:	str	r2, [r1, #12]
    1698:	ldr	r0, [r4]
    169c:	ldr	r0, [r0, #12]
    16a0:	cmp	r0, #0
    16a4:	bne	16c0 <void_expression_finalise+0x84>
    16a8:	movw	r0, #65136	; 0xfe70
    16ac:	movt	r0, #65535	; 0xffff
    16b0:	ldr	r1, [pc, #156]	; 1754 <void_expression_finalise+0x118>
    16b4:	bl	0 <coda_set_error>
    16b8:	mvn	r0, #0
    16bc:	b	1740 <void_expression_finalise+0x104>
    16c0:	add	r1, sp, #20
    16c4:	bl	0 <coda_expression_from_string>
    16c8:	cmp	r0, #0
    16cc:	beq	16d8 <void_expression_finalise+0x9c>
    16d0:	mvn	r0, #0
    16d4:	b	1740 <void_expression_finalise+0x104>
    16d8:	ldr	ip, [r4]
    16dc:	ldr	r0, [ip, #12]
    16e0:	bl	0 <free>
    16e4:	ldr	r3, [r4]
    16e8:	mov	r0, #0
    16ec:	str	r0, [r3, #12]
    16f0:	ldr	ip, [r4]
    16f4:	ldr	r1, [sp, #20]
    16f8:	str	r1, [ip, #8]
    16fc:	ldr	r0, [sp, #20]
    1700:	add	r1, sp, #16
    1704:	bl	0 <coda_expression_get_type>
    1708:	cmp	r0, #0
    170c:	beq	1718 <void_expression_finalise+0xdc>
    1710:	mvn	r0, #0
    1714:	b	1740 <void_expression_finalise+0x104>
    1718:	ldr	r0, [sp, #16]
    171c:	cmp	r0, #5
    1720:	beq	173c <void_expression_finalise+0x100>
    1724:	movw	r0, #65136	; 0xfe70
    1728:	movt	r0, #65535	; 0xffff
    172c:	ldr	r1, [pc, #28]	; 1750 <void_expression_finalise+0x114>
    1730:	bl	0 <coda_set_error>
    1734:	mvn	r0, #0
    1738:	b	1740 <void_expression_finalise+0x104>
    173c:	mov	r0, #0
    1740:	ldr	r4, [sp, #8]
    1744:	ldr	lr, [sp, #4]
    1748:	add	sp, sp, #24
    174c:	bx	lr
    1750:	.word	0x000009c9
    1754:	.word	0x00000d36

00001758 <void_expression_init>:
    1758:	mov	ip, sp
    175c:	sub	sp, sp, #8
    1760:	str	ip, [sp]
    1764:	str	lr, [sp, #4]
    1768:	ldr	r2, [r0]
    176c:	mov	r1, #1
    1770:	str	r1, [r2, #32]
    1774:	ldr	r1, [r0]
    1778:	ldr	ip, [pc, #32]	; 17a0 <void_expression_init+0x48>
    177c:	str	ip, [r1, #40]	; 0x28
    1780:	ldr	r1, [r0]
    1784:	ldr	r3, [pc, #16]	; 179c <void_expression_init+0x44>
    1788:	str	r3, [r1, #36]	; 0x24
    178c:	mov	r0, #0
    1790:	ldr	lr, [sp, #4]
    1794:	add	sp, sp, #8
    1798:	bx	lr
	...

000017a4 <type_add_attribute>:
    17a4:	mov	ip, sp
    17a8:	sub	sp, sp, #16
    17ac:	str	ip, [sp]
    17b0:	str	lr, [sp, #4]
    17b4:	str	r4, [sp, #8]
    17b8:	mov	r4, r0
    17bc:	ldr	r1, [r4]
    17c0:	ldr	r2, [r1, #396]	; 0x18c
    17c4:	ldr	r0, [r2, #8]
    17c8:	ldr	r1, [r1, #8]
    17cc:	bl	0 <coda_type_add_attribute>
    17d0:	cmp	r0, #0
    17d4:	beq	17e0 <type_add_attribute+0x3c>
    17d8:	mvn	r0, #0
    17dc:	b	17f0 <type_add_attribute+0x4c>
    17e0:	ldr	r1, [r4]
    17e4:	mov	r3, #0
    17e8:	str	r3, [r1, #8]
    17ec:	mov	r0, #0
    17f0:	ldr	r4, [sp, #8]
    17f4:	ldr	lr, [sp, #4]
    17f8:	add	sp, sp, #16
    17fc:	bx	lr

00001800 <xml_root_set_field>:
    1800:	mov	ip, sp
    1804:	sub	sp, sp, #16
    1808:	str	ip, [sp]
    180c:	str	lr, [sp, #4]
    1810:	str	r4, [sp, #8]
    1814:	mov	r4, r0
    1818:	ldr	r1, [r4]
    181c:	ldr	r2, [r1, #396]	; 0x18c
    1820:	ldr	r0, [r2, #8]
    1824:	ldr	r1, [r1, #8]
    1828:	bl	0 <coda_type_record_add_field>
    182c:	cmp	r0, #0
    1830:	beq	183c <xml_root_set_field+0x3c>
    1834:	mvn	r0, #0
    1838:	b	184c <xml_root_set_field+0x4c>
    183c:	ldr	r1, [r4]
    1840:	mov	r3, #0
    1844:	str	r3, [r1, #8]
    1848:	mov	r0, #0
    184c:	ldr	r4, [sp, #8]
    1850:	ldr	lr, [sp, #4]
    1854:	add	sp, sp, #16
    1858:	bx	lr

0000185c <xml_root_init>:
    185c:	mov	ip, sp
    1860:	sub	sp, sp, #16
    1864:	str	ip, [sp]
    1868:	str	lr, [sp, #4]
    186c:	str	r4, [sp, #8]
    1870:	str	r5, [sp, #12]
    1874:	mov	r5, r1
    1878:	mov	r4, r0
    187c:	ldr	r3, [r4, #28]
    1880:	cmp	r3, #0
    1884:	bne	189c <xml_root_init+0x40>
    1888:	ldr	r0, [pc, #360]	; 19f8 <xml_root_init+0x19c>
    188c:	ldr	r1, [pc, #312]	; 19cc <xml_root_init+0x170>
    1890:	mov	r2, #1184	; 0x4a0
    1894:	ldr	r3, [pc, #340]	; 19f0 <xml_root_init+0x194>
    1898:	bl	0 <__assert_fail>
    189c:	mov	r1, r5
    18a0:	mov	r0, r4
    18a4:	bl	6b4 <handle_format_attribute_for_type>
    18a8:	cmp	r0, #0
    18ac:	beq	18b8 <xml_root_init+0x5c>
    18b0:	mvn	r0, #0
    18b4:	b	19b4 <xml_root_init+0x158>
    18b8:	ldr	r0, [r4]
    18bc:	ldr	r0, [r0, #44]	; 0x2c
    18c0:	cmp	r0, #2
    18c4:	beq	18f8 <xml_root_init+0x9c>
    18c8:	bl	0 <coda_type_get_format_name>
    18cc:	movw	r2, #65136	; 0xfe70
    18d0:	movt	r2, #65535	; 0xffff
    18d4:	ldr	r1, [pc, #236]	; 19c8 <xml_root_init+0x16c>
    18d8:	ldr	r3, [r4, #28]
    18dc:	ldr	r3, [r3, #8]
    18e0:	mov	ip, r0
    18e4:	mov	r0, r2
    18e8:	mov	r2, ip
    18ec:	bl	0 <coda_set_error>
    18f0:	mvn	r0, #0
    18f4:	b	19b4 <xml_root_init+0x158>
    18f8:	ldr	r1, [pc, #220]	; 19dc <xml_root_init+0x180>
    18fc:	mov	r0, r5
    1900:	bl	4e8 <get_attribute_value>
    1904:	cmp	r0, #0
    1908:	beq	1924 <xml_root_init+0xc8>
    190c:	movw	r0, #65136	; 0xfe70
    1910:	movt	r0, #65535	; 0xffff
    1914:	ldr	r1, [pc, #216]	; 19f4 <xml_root_init+0x198>
    1918:	bl	0 <coda_set_error>
    191c:	mvn	r0, #0
    1920:	b	19b4 <xml_root_init+0x158>
    1924:	ldr	r1, [pc, #188]	; 19e8 <xml_root_init+0x18c>
    1928:	mov	r0, r5
    192c:	bl	4e8 <get_attribute_value>
    1930:	cmp	r0, #0
    1934:	beq	1950 <xml_root_init+0xf4>
    1938:	movw	r0, #65136	; 0xfe70
    193c:	movt	r0, #65535	; 0xffff
    1940:	ldr	r1, [pc, #164]	; 19ec <xml_root_init+0x190>
    1944:	bl	0 <coda_set_error>
    1948:	mvn	r0, #0
    194c:	b	19b4 <xml_root_init+0x158>
    1950:	ldr	r0, [r4]
    1954:	ldr	r1, [pc, #124]	; 19d8 <xml_root_init+0x17c>
    1958:	str	r1, [r0, #40]	; 0x28
    195c:	mov	r0, #2
    1960:	bl	0 <coda_type_record_new>
    1964:	ldr	ip, [r4]
    1968:	str	r0, [ip, #8]
    196c:	mov	r1, r5
    1970:	mov	r0, r4
    1974:	bl	5c4 <handle_name_attribute_for_type>
    1978:	cmp	r0, #0
    197c:	beq	1988 <xml_root_init+0x12c>
    1980:	mvn	r0, #0
    1984:	b	19b4 <xml_root_init+0x158>
    1988:	ldr	r0, [r4]
    198c:	mov	r1, #11
    1990:	ldr	r2, [pc, #60]	; 19d4 <xml_root_init+0x178>
    1994:	ldr	r3, [pc, #68]	; 19e0 <xml_root_init+0x184>
    1998:	bl	8bc <register_sub_element>
    199c:	ldr	r0, [r4]
    19a0:	mov	r1, #14
    19a4:	ldr	r2, [pc, #56]	; 19e4 <xml_root_init+0x188>
    19a8:	ldr	r3, [pc, #32]	; 19d0 <xml_root_init+0x174>
    19ac:	bl	8bc <register_sub_element>
    19b0:	mov	r0, #0
    19b4:	ldr	r4, [sp, #8]
    19b8:	ldr	r5, [sp, #12]
    19bc:	ldr	lr, [sp, #4]
    19c0:	add	sp, sp, #16
    19c4:	bx	lr
    19c8:	.word	0x00001db4
    19cc:	.word	0x00001939
	...
    19dc:	.word	0x0000047e
	...
    19e8:	.word	0x000001f6
    19ec:	.word	0x000001fe
    19f0:	.word	0x000020f2
    19f4:	.word	0x00001176
    19f8:	.word	0x00000595

000019fc <cd_array_set_type>:
    19fc:	mov	ip, sp
    1a00:	sub	sp, sp, #8
    1a04:	str	ip, [sp]
    1a08:	str	lr, [sp, #4]
    1a0c:	ldr	r1, [r0]
    1a10:	ldr	r2, [r1, #396]	; 0x18c
    1a14:	ldr	r0, [r2, #8]
    1a18:	ldr	r1, [r1, #8]
    1a1c:	ldr	lr, [sp, #4]
    1a20:	add	sp, sp, #8
    1a24:	b	0 <coda_type_array_set_base_type>

00001a28 <cd_array_add_dimension>:
    1a28:	mov	ip, sp
    1a2c:	sub	sp, sp, #16
    1a30:	str	ip, [sp]
    1a34:	str	lr, [sp, #4]
    1a38:	str	r4, [sp, #8]
    1a3c:	mov	r4, r0
    1a40:	ldr	r1, [r4]
    1a44:	ldr	ip, [r1, #8]
    1a48:	cmp	ip, #0
    1a4c:	bne	1a7c <cd_array_add_dimension+0x54>
    1a50:	ldr	r3, [r1, #4]
    1a54:	cmp	r3, #0
    1a58:	bne	1a7c <cd_array_add_dimension+0x54>
    1a5c:	ldr	r2, [r1, #396]	; 0x18c
    1a60:	ldr	r0, [r2, #8]
    1a64:	ldr	r1, [r1, #16]
    1a68:	bl	0 <coda_type_array_add_fixed_dimension>
    1a6c:	cmp	r0, #0
    1a70:	beq	1aac <cd_array_add_dimension+0x84>
    1a74:	mvn	r0, #0
    1a78:	b	1ab0 <cd_array_add_dimension+0x88>
    1a7c:	ldr	r1, [r4]
    1a80:	ldr	r2, [r1, #396]	; 0x18c
    1a84:	ldr	r0, [r2, #8]
    1a88:	ldr	r1, [r1, #8]
    1a8c:	bl	0 <coda_type_array_add_variable_dimension>
    1a90:	cmp	r0, #0
    1a94:	beq	1aa0 <cd_array_add_dimension+0x78>
    1a98:	mvn	r0, #0
    1a9c:	b	1ab0 <cd_array_add_dimension+0x88>
    1aa0:	ldr	r0, [r4]
    1aa4:	mov	r3, #0
    1aa8:	str	r3, [r0, #8]
    1aac:	mov	r0, #0
    1ab0:	ldr	r4, [sp, #8]
    1ab4:	ldr	lr, [sp, #4]
    1ab8:	add	sp, sp, #16
    1abc:	bx	lr

00001ac0 <cd_array_finalise>:
    1ac0:	mov	ip, sp
    1ac4:	sub	sp, sp, #8
    1ac8:	str	ip, [sp]
    1acc:	str	lr, [sp, #4]
    1ad0:	ldr	r0, [r0]
    1ad4:	ldr	r0, [r0, #8]
    1ad8:	ldr	lr, [sp, #4]
    1adc:	add	sp, sp, #8
    1ae0:	b	0 <coda_type_array_validate>

00001ae4 <cd_array_init>:
    1ae4:	mov	ip, sp
    1ae8:	sub	sp, sp, #16
    1aec:	str	ip, [sp]
    1af0:	str	lr, [sp, #4]
    1af4:	str	r4, [sp, #8]
    1af8:	str	r5, [sp, #12]
    1afc:	mov	r4, r1
    1b00:	mov	r5, r0
    1b04:	mov	r1, r4
    1b08:	mov	r0, r5
    1b0c:	bl	6b4 <handle_format_attribute_for_type>
    1b10:	cmp	r0, #0
    1b14:	beq	1b20 <cd_array_init+0x3c>
    1b18:	mvn	r0, #0
    1b1c:	b	1bcc <cd_array_init+0xe8>
    1b20:	ldr	r3, [r5]
    1b24:	ldr	r2, [pc, #188]	; 1be8 <cd_array_init+0x104>
    1b28:	str	r2, [r3, #40]	; 0x28
    1b2c:	ldr	ip, [r5]
    1b30:	ldr	r0, [ip, #44]	; 0x2c
    1b34:	bl	0 <coda_type_array_new>
    1b38:	ldr	r1, [r5]
    1b3c:	str	r0, [r1, #8]
    1b40:	ldr	ip, [r5]
    1b44:	ldr	r0, [ip, #8]
    1b48:	cmp	r0, #0
    1b4c:	bne	1b58 <cd_array_init+0x74>
    1b50:	mvn	r0, #0
    1b54:	b	1bcc <cd_array_init+0xe8>
    1b58:	mov	r1, r4
    1b5c:	mov	r0, r5
    1b60:	bl	5c4 <handle_name_attribute_for_type>
    1b64:	cmp	r0, #0
    1b68:	beq	1b74 <cd_array_init+0x90>
    1b6c:	mvn	r0, #0
    1b70:	b	1bcc <cd_array_init+0xe8>
    1b74:	ldr	r0, [r5]
    1b78:	ldr	r1, [pc, #128]	; 1c00 <cd_array_init+0x11c>
    1b7c:	bl	940 <register_type_elements>
    1b80:	ldr	r0, [r5]
    1b84:	mov	r1, #13
    1b88:	ldr	r2, [pc, #92]	; 1bec <cd_array_init+0x108>
    1b8c:	ldr	r3, [pc, #100]	; 1bf8 <cd_array_init+0x114>
    1b90:	bl	8bc <register_sub_element>
    1b94:	ldr	r0, [r5]
    1b98:	mov	r1, #11
    1b9c:	ldr	r2, [pc, #64]	; 1be4 <cd_array_init+0x100>
    1ba0:	ldr	r3, [pc, #72]	; 1bf0 <cd_array_init+0x10c>
    1ba4:	bl	8bc <register_sub_element>
    1ba8:	ldr	r0, [r5]
    1bac:	mov	r1, #4
    1bb0:	ldr	r2, [pc, #68]	; 1bfc <cd_array_init+0x118>
    1bb4:	ldr	r3, [pc, #36]	; 1be0 <cd_array_init+0xfc>
    1bb8:	bl	8bc <register_sub_element>
    1bbc:	ldr	r1, [r5]
    1bc0:	ldr	r0, [pc, #44]	; 1bf4 <cd_array_init+0x110>
    1bc4:	str	r0, [r1, #36]	; 0x24
    1bc8:	mov	r0, #0
    1bcc:	ldr	r4, [sp, #8]
    1bd0:	ldr	r5, [sp, #12]
    1bd4:	ldr	lr, [sp, #4]
    1bd8:	add	sp, sp, #16
    1bdc:	bx	lr
	...

00001c04 <cd_ascii_line_init>:
    1c04:	mov	ip, sp
    1c08:	sub	sp, sp, #16
    1c0c:	str	ip, [sp]
    1c10:	str	lr, [sp, #4]
    1c14:	str	r4, [sp, #8]
    1c18:	str	r5, [sp, #12]
    1c1c:	mov	r4, r1
    1c20:	mov	r5, r0
    1c24:	mov	r1, r4
    1c28:	mov	r0, r5
    1c2c:	bl	6b4 <handle_format_attribute_for_type>
    1c30:	cmp	r0, #0
    1c34:	beq	1c40 <cd_ascii_line_init+0x3c>
    1c38:	mvn	r0, #0
    1c3c:	b	1cc4 <cd_ascii_line_init+0xc0>
    1c40:	ldr	r2, [r5]
    1c44:	ldr	r1, [pc, #144]	; 1cdc <cd_ascii_line_init+0xd8>
    1c48:	str	r1, [r2, #40]	; 0x28
    1c4c:	ldr	r2, [r5]
    1c50:	ldr	r0, [r2, #44]	; 0x2c
    1c54:	bl	0 <coda_type_text_new>
    1c58:	ldr	r1, [r5]
    1c5c:	str	r0, [r1, #8]
    1c60:	ldr	r3, [r5]
    1c64:	ldr	r0, [r3, #8]
    1c68:	cmp	r0, #0
    1c6c:	bne	1c78 <cd_ascii_line_init+0x74>
    1c70:	mvn	r0, #0
    1c74:	b	1cc4 <cd_ascii_line_init+0xc0>
    1c78:	mov	r1, #3
    1c7c:	bl	0 <coda_type_text_set_special_text_type>
    1c80:	cmp	r0, #0
    1c84:	beq	1c90 <cd_ascii_line_init+0x8c>
    1c88:	mvn	r0, #0
    1c8c:	b	1cc4 <cd_ascii_line_init+0xc0>
    1c90:	mov	r1, r4
    1c94:	mov	r0, r5
    1c98:	bl	5c4 <handle_name_attribute_for_type>
    1c9c:	cmp	r0, #0
    1ca0:	beq	1cac <cd_ascii_line_init+0xa8>
    1ca4:	mvn	r0, #0
    1ca8:	b	1cc4 <cd_ascii_line_init+0xc0>
    1cac:	ldr	r0, [r5]
    1cb0:	mov	r1, #11
    1cb4:	ldr	r2, [pc, #28]	; 1cd8 <cd_ascii_line_init+0xd4>
    1cb8:	ldr	r3, [pc, #32]	; 1ce0 <cd_ascii_line_init+0xdc>
    1cbc:	bl	8bc <register_sub_element>
    1cc0:	mov	r0, #0
    1cc4:	ldr	r4, [sp, #8]
    1cc8:	ldr	r5, [sp, #12]
    1ccc:	ldr	lr, [sp, #4]
    1cd0:	add	sp, sp, #16
    1cd4:	bx	lr
	...

00001ce4 <cd_ascii_line_separator_init>:
    1ce4:	mov	ip, sp
    1ce8:	sub	sp, sp, #16
    1cec:	str	ip, [sp]
    1cf0:	str	lr, [sp, #4]
    1cf4:	str	r4, [sp, #8]
    1cf8:	str	r5, [sp, #12]
    1cfc:	mov	r4, r1
    1d00:	mov	r5, r0
    1d04:	mov	r1, r4
    1d08:	mov	r0, r5
    1d0c:	bl	6b4 <handle_format_attribute_for_type>
    1d10:	cmp	r0, #0
    1d14:	beq	1d20 <cd_ascii_line_separator_init+0x3c>
    1d18:	mvn	r0, #0
    1d1c:	b	1da4 <cd_ascii_line_separator_init+0xc0>
    1d20:	ldr	r2, [r5]
    1d24:	ldr	r1, [pc, #144]	; 1dbc <cd_ascii_line_separator_init+0xd8>
    1d28:	str	r1, [r2, #40]	; 0x28
    1d2c:	ldr	r2, [r5]
    1d30:	ldr	r0, [r2, #44]	; 0x2c
    1d34:	bl	0 <coda_type_text_new>
    1d38:	ldr	r1, [r5]
    1d3c:	str	r0, [r1, #8]
    1d40:	ldr	r3, [r5]
    1d44:	ldr	r0, [r3, #8]
    1d48:	cmp	r0, #0
    1d4c:	bne	1d58 <cd_ascii_line_separator_init+0x74>
    1d50:	mvn	r0, #0
    1d54:	b	1da4 <cd_ascii_line_separator_init+0xc0>
    1d58:	mov	r1, #1
    1d5c:	bl	0 <coda_type_text_set_special_text_type>
    1d60:	cmp	r0, #0
    1d64:	beq	1d70 <cd_ascii_line_separator_init+0x8c>
    1d68:	mvn	r0, #0
    1d6c:	b	1da4 <cd_ascii_line_separator_init+0xc0>
    1d70:	mov	r1, r4
    1d74:	mov	r0, r5
    1d78:	bl	5c4 <handle_name_attribute_for_type>
    1d7c:	cmp	r0, #0
    1d80:	beq	1d8c <cd_ascii_line_separator_init+0xa8>
    1d84:	mvn	r0, #0
    1d88:	b	1da4 <cd_ascii_line_separator_init+0xc0>
    1d8c:	ldr	r0, [r5]
    1d90:	mov	r1, #11
    1d94:	ldr	r2, [pc, #28]	; 1db8 <cd_ascii_line_separator_init+0xd4>
    1d98:	ldr	r3, [pc, #32]	; 1dc0 <cd_ascii_line_separator_init+0xdc>
    1d9c:	bl	8bc <register_sub_element>
    1da0:	mov	r0, #0
    1da4:	ldr	r4, [sp, #8]
    1da8:	ldr	r5, [sp, #12]
    1dac:	ldr	lr, [sp, #4]
    1db0:	add	sp, sp, #16
    1db4:	bx	lr
	...

00001dc4 <cd_ascii_white_space_init>:
    1dc4:	mov	ip, sp
    1dc8:	sub	sp, sp, #16
    1dcc:	str	ip, [sp]
    1dd0:	str	lr, [sp, #4]
    1dd4:	str	r4, [sp, #8]
    1dd8:	str	r5, [sp, #12]
    1ddc:	mov	r4, r1
    1de0:	mov	r5, r0
    1de4:	mov	r1, r4
    1de8:	mov	r0, r5
    1dec:	bl	6b4 <handle_format_attribute_for_type>
    1df0:	cmp	r0, #0
    1df4:	beq	1e00 <cd_ascii_white_space_init+0x3c>
    1df8:	mvn	r0, #0
    1dfc:	b	1e84 <cd_ascii_white_space_init+0xc0>
    1e00:	ldr	r2, [r5]
    1e04:	ldr	r1, [pc, #144]	; 1e9c <cd_ascii_white_space_init+0xd8>
    1e08:	str	r1, [r2, #40]	; 0x28
    1e0c:	ldr	r2, [r5]
    1e10:	ldr	r0, [r2, #44]	; 0x2c
    1e14:	bl	0 <coda_type_text_new>
    1e18:	ldr	r1, [r5]
    1e1c:	str	r0, [r1, #8]
    1e20:	ldr	r3, [r5]
    1e24:	ldr	r0, [r3, #8]
    1e28:	cmp	r0, #0
    1e2c:	bne	1e38 <cd_ascii_white_space_init+0x74>
    1e30:	mvn	r0, #0
    1e34:	b	1e84 <cd_ascii_white_space_init+0xc0>
    1e38:	mov	r1, #4
    1e3c:	bl	0 <coda_type_text_set_special_text_type>
    1e40:	cmp	r0, #0
    1e44:	beq	1e50 <cd_ascii_white_space_init+0x8c>
    1e48:	mvn	r0, #0
    1e4c:	b	1e84 <cd_ascii_white_space_init+0xc0>
    1e50:	mov	r1, r4
    1e54:	mov	r0, r5
    1e58:	bl	5c4 <handle_name_attribute_for_type>
    1e5c:	cmp	r0, #0
    1e60:	beq	1e6c <cd_ascii_white_space_init+0xa8>
    1e64:	mvn	r0, #0
    1e68:	b	1e84 <cd_ascii_white_space_init+0xc0>
    1e6c:	ldr	r0, [r5]
    1e70:	mov	r1, #11
    1e74:	ldr	r2, [pc, #28]	; 1e98 <cd_ascii_white_space_init+0xd4>
    1e78:	ldr	r3, [pc, #32]	; 1ea0 <cd_ascii_white_space_init+0xdc>
    1e7c:	bl	8bc <register_sub_element>
    1e80:	mov	r0, #0
    1e84:	ldr	r4, [sp, #8]
    1e88:	ldr	r5, [sp, #12]
    1e8c:	ldr	lr, [sp, #4]
    1e90:	add	sp, sp, #16
    1e94:	bx	lr
	...

00001ea4 <cd_attribute_set_fixed_value>:
    1ea4:	mov	ip, sp
    1ea8:	sub	sp, sp, #24
    1eac:	str	ip, [sp]
    1eb0:	str	lr, [sp, #4]
    1eb4:	str	r4, [sp, #8]
    1eb8:	mov	r4, r0
    1ebc:	mov	r2, #0
    1ec0:	str	r2, [sp, #16]
    1ec4:	ldr	ip, [r4]
    1ec8:	ldr	r0, [ip, #12]
    1ecc:	bl	2b0 <decode_escaped_string>
    1ed0:	cmp	r0, #0
    1ed4:	bge	1ef0 <cd_attribute_set_fixed_value+0x4c>
    1ed8:	movw	r0, #65136	; 0xfe70
    1edc:	movt	r0, #65535	; 0xffff
    1ee0:	ldr	r1, [pc, #272]	; 1ff8 <cd_attribute_set_fixed_value+0x154>
    1ee4:	bl	0 <coda_set_error>
    1ee8:	mvn	r0, #0
    1eec:	b	1fe8 <cd_attribute_set_fixed_value+0x144>
    1ef0:	ldr	r1, [r4]
    1ef4:	ldr	r1, [r1, #396]	; 0x18c
    1ef8:	ldr	r0, [r1, #8]
    1efc:	add	r1, sp, #16
    1f00:	bl	0 <coda_type_record_field_get_type>
    1f04:	cmp	r0, #0
    1f08:	beq	1f14 <cd_attribute_set_fixed_value+0x70>
    1f0c:	mvn	r0, #0
    1f10:	b	1fe8 <cd_attribute_set_fixed_value+0x144>
    1f14:	ldr	r0, [sp, #16]
    1f18:	cmp	r0, #0
    1f1c:	beq	1f38 <cd_attribute_set_fixed_value+0x94>
    1f20:	movw	r0, #65136	; 0xfe70
    1f24:	movt	r0, #65535	; 0xffff
    1f28:	ldr	r1, [pc, #204]	; 1ffc <cd_attribute_set_fixed_value+0x158>
    1f2c:	bl	0 <coda_set_error>
    1f30:	mvn	r0, #0
    1f34:	b	1fe8 <cd_attribute_set_fixed_value+0x144>
    1f38:	ldr	r1, [r4]
    1f3c:	ldr	ip, [r1, #396]	; 0x18c
    1f40:	ldr	r0, [ip, #44]	; 0x2c
    1f44:	bl	0 <coda_type_text_new>
    1f48:	str	r0, [sp, #16]
    1f4c:	cmp	r0, #0
    1f50:	bne	1f5c <cd_attribute_set_fixed_value+0xb8>
    1f54:	mvn	r0, #0
    1f58:	b	1fe8 <cd_attribute_set_fixed_value+0x144>
    1f5c:	ldr	r1, [r4]
    1f60:	ldr	r3, [r1, #396]	; 0x18c
    1f64:	ldr	r1, [r3, #8]
    1f68:	mov	r3, r0
    1f6c:	mov	r0, r1
    1f70:	mov	r1, r3
    1f74:	bl	0 <coda_type_record_field_set_type>
    1f78:	cmp	r0, #0
    1f7c:	beq	1f90 <cd_attribute_set_fixed_value+0xec>
    1f80:	ldr	r0, [sp, #16]
    1f84:	bl	0 <coda_type_release>
    1f88:	mvn	r0, #0
    1f8c:	b	1fe8 <cd_attribute_set_fixed_value+0x144>
    1f90:	ldr	r0, [sp, #16]
    1f94:	bl	0 <coda_type_release>
    1f98:	ldr	r0, [sp, #16]
    1f9c:	ldr	r1, [r4]
    1fa0:	ldr	r1, [r1, #12]
    1fa4:	bl	0 <coda_type_text_set_fixed_value>
    1fa8:	cmp	r0, #0
    1fac:	beq	1fb8 <cd_attribute_set_fixed_value+0x114>
    1fb0:	mvn	r0, #0
    1fb4:	b	1fe8 <cd_attribute_set_fixed_value+0x144>
    1fb8:	ldr	r0, [r4]
    1fbc:	ldr	r0, [r0, #12]
    1fc0:	bl	0 <strlen>
    1fc4:	mov	r2, r0
    1fc8:	ldr	r0, [sp, #16]
    1fcc:	mov	r3, #0
    1fd0:	bl	0 <coda_type_set_byte_size>
    1fd4:	cmp	r0, #0
    1fd8:	beq	1fe4 <cd_attribute_set_fixed_value+0x140>
    1fdc:	mvn	r0, #0
    1fe0:	b	1fe8 <cd_attribute_set_fixed_value+0x144>
    1fe4:	mov	r0, #0
    1fe8:	ldr	r4, [sp, #8]
    1fec:	ldr	lr, [sp, #4]
    1ff0:	add	sp, sp, #24
    1ff4:	bx	lr
    1ff8:	.word	0x00000bc3
    1ffc:	.word	0x00001de8

00002000 <cd_attribute_finalise>:
    2000:	mov	ip, sp
    2004:	sub	sp, sp, #24
    2008:	str	ip, [sp]
    200c:	str	lr, [sp, #4]
    2010:	str	r4, [sp, #8]
    2014:	mov	r4, r0
    2018:	mov	r0, #0
    201c:	str	r0, [sp, #16]
    2020:	ldr	r1, [r4]
    2024:	ldr	r0, [r1, #8]
    2028:	add	r1, sp, #16
    202c:	bl	0 <coda_type_record_field_get_type>
    2030:	cmp	r0, #0
    2034:	beq	2040 <cd_attribute_finalise+0x40>
    2038:	mvn	r0, #0
    203c:	b	20a8 <cd_attribute_finalise+0xa8>
    2040:	ldr	ip, [sp, #16]
    2044:	cmp	ip, #0
    2048:	bne	209c <cd_attribute_finalise+0x9c>
    204c:	ldr	r3, [r4]
    2050:	ldr	r0, [r3, #44]	; 0x2c
    2054:	bl	0 <coda_type_text_new>
    2058:	mov	r1, r0
    205c:	str	r1, [sp, #16]
    2060:	cmp	r1, #0
    2064:	bne	2070 <cd_attribute_finalise+0x70>
    2068:	mvn	r0, #0
    206c:	b	20a8 <cd_attribute_finalise+0xa8>
    2070:	ldr	r2, [r4]
    2074:	ldr	r0, [r2, #8]
    2078:	bl	0 <coda_type_record_field_set_type>
    207c:	cmp	r0, #0
    2080:	beq	2094 <cd_attribute_finalise+0x94>
    2084:	ldr	r0, [sp, #16]
    2088:	bl	0 <coda_type_release>
    208c:	mvn	r0, #0
    2090:	b	20a8 <cd_attribute_finalise+0xa8>
    2094:	ldr	r0, [sp, #16]
    2098:	bl	0 <coda_type_release>
    209c:	ldr	r0, [r4]
    20a0:	ldr	r0, [r0, #8]
    20a4:	bl	0 <coda_type_record_field_validate>
    20a8:	ldr	r4, [sp, #8]
    20ac:	ldr	lr, [sp, #4]
    20b0:	add	sp, sp, #24
    20b4:	bx	lr

000020b8 <cd_attribute_init>:
    20b8:	mov	ip, sp
    20bc:	sub	sp, sp, #24
    20c0:	str	ip, [sp]
    20c4:	str	lr, [sp, #4]
    20c8:	str	r4, [sp, #8]
    20cc:	str	r5, [sp, #12]
    20d0:	str	r6, [sp, #16]
    20d4:	mov	r6, r1
    20d8:	mov	r5, r0
    20dc:	ldr	r1, [pc, #600]	; 233c <cd_attribute_init+0x284>
    20e0:	mov	r0, r6
    20e4:	bl	4e8 <get_attribute_value>
    20e8:	cmp	r0, #0
    20ec:	beq	2108 <cd_attribute_init+0x50>
    20f0:	movw	r0, #65136	; 0xfe70
    20f4:	movt	r0, #65535	; 0xffff
    20f8:	ldr	r1, [pc, #576]	; 2340 <cd_attribute_init+0x288>
    20fc:	bl	0 <coda_set_error>
    2100:	mvn	r0, #0
    2104:	b	22e0 <cd_attribute_init+0x228>
    2108:	ldr	r3, [r5]
    210c:	ldr	r2, [r3, #396]	; 0x18c
    2110:	ldr	ip, [r2, #48]	; 0x30
    2114:	cmp	ip, #0
    2118:	bne	2130 <cd_attribute_init+0x78>
    211c:	ldr	r0, [pc, #528]	; 2334 <cd_attribute_init+0x27c>
    2120:	ldr	r1, [pc, #464]	; 22f8 <cd_attribute_init+0x240>
    2124:	movw	r2, #1439	; 0x59f
    2128:	ldr	r3, [pc, #464]	; 2300 <cd_attribute_init+0x248>
    212c:	bl	0 <__assert_fail>
    2130:	ldr	r0, [r5]
    2134:	ldr	r2, [r0, #396]	; 0x18c
    2138:	ldr	r3, [r2, #44]	; 0x2c
    213c:	str	r3, [r0, #44]	; 0x2c
    2140:	ldr	r0, [r5]
    2144:	mov	r1, #1
    2148:	str	r1, [r0, #48]	; 0x30
    214c:	ldr	r1, [pc, #444]	; 2310 <cd_attribute_init+0x258>
    2150:	mov	r0, r6
    2154:	bl	4e8 <get_attribute_value>
    2158:	cmp	r0, #0
    215c:	beq	2178 <cd_attribute_init+0xc0>
    2160:	movw	r0, #65136	; 0xfe70
    2164:	movt	r0, #65535	; 0xffff
    2168:	ldr	r1, [pc, #396]	; 22fc <cd_attribute_init+0x244>
    216c:	bl	0 <coda_set_error>
    2170:	mvn	r0, #0
    2174:	b	22e0 <cd_attribute_init+0x228>
    2178:	ldr	r1, [pc, #392]	; 2308 <cd_attribute_init+0x250>
    217c:	ldr	r3, [r5]
    2180:	ldr	r2, [r3]
    2184:	mov	r0, r6
    2188:	bl	54c <get_mandatory_attribute_value>
    218c:	mov	r4, r0
    2190:	cmp	r4, #0
    2194:	bne	21a0 <cd_attribute_init+0xe8>
    2198:	mvn	r0, #0
    219c:	b	22e0 <cd_attribute_init+0x228>
    21a0:	ldr	r1, [pc, #400]	; 2338 <cd_attribute_init+0x280>
    21a4:	mov	r0, r6
    21a8:	bl	4e8 <get_attribute_value>
    21ac:	mov	r6, r0
    21b0:	ldr	ip, [r5]
    21b4:	ldr	r1, [pc, #364]	; 2328 <cd_attribute_init+0x270>
    21b8:	str	r1, [ip, #40]	; 0x28
    21bc:	cmp	r6, #0
    21c0:	moveq	ip, #1
    21c4:	movne	ip, #0
    21c8:	mov	r3, #0
    21cc:	ldr	r2, [r5]
    21d0:	ldr	r2, [r2, #44]	; 0x2c
    21d4:	cmp	r2, #2
    21d8:	moveq	r0, ip
    21dc:	movne	r0, r3
    21e0:	cmp	r0, #0
    21e4:	beq	222c <cd_attribute_init+0x174>
    21e8:	mov	r6, r4
    21ec:	mov	r0, r4
    21f0:	bl	0 <coda_element_name_from_xml_name>
    21f4:	mov	r1, #0
    21f8:	bl	0 <coda_identifier_from_name>
    21fc:	mov	r4, r0
    2200:	cmp	r4, #0
    2204:	bne	2210 <cd_attribute_init+0x158>
    2208:	mvn	r0, #0
    220c:	b	22e0 <cd_attribute_init+0x228>
    2210:	mov	r0, r4
    2214:	bl	0 <coda_type_record_field_new>
    2218:	ldr	r1, [r5]
    221c:	str	r0, [r1, #8]
    2220:	mov	r0, r4
    2224:	bl	0 <free>
    2228:	b	223c <cd_attribute_init+0x184>
    222c:	mov	r0, r4
    2230:	bl	0 <coda_type_record_field_new>
    2234:	ldr	r1, [r5]
    2238:	str	r0, [r1, #8]
    223c:	ldr	ip, [r5]
    2240:	ldr	r0, [ip, #8]
    2244:	cmp	r0, #0
    2248:	bne	2254 <cd_attribute_init+0x19c>
    224c:	mvn	r0, #0
    2250:	b	22e0 <cd_attribute_init+0x228>
    2254:	cmp	r6, #0
    2258:	beq	2274 <cd_attribute_init+0x1bc>
    225c:	mov	r1, r6
    2260:	bl	0 <coda_type_record_field_set_real_name>
    2264:	cmp	r0, #0
    2268:	beq	2274 <cd_attribute_init+0x1bc>
    226c:	mvn	r0, #0
    2270:	b	22e0 <cd_attribute_init+0x228>
    2274:	ldr	r0, [r5]
    2278:	ldr	r1, [pc, #148]	; 2314 <cd_attribute_init+0x25c>
    227c:	bl	940 <register_type_elements>
    2280:	ldr	r0, [r5]
    2284:	mov	r1, #18
    2288:	ldr	r2, [pc, #136]	; 2318 <cd_attribute_init+0x260>
    228c:	ldr	r3, [pc, #120]	; 230c <cd_attribute_init+0x254>
    2290:	bl	8bc <register_sub_element>
    2294:	ldr	r0, [r5]
    2298:	mov	r1, #29
    229c:	ldr	r2, [pc, #116]	; 2318 <cd_attribute_init+0x260>
    22a0:	ldr	r3, [pc, #116]	; 231c <cd_attribute_init+0x264>
    22a4:	bl	8bc <register_sub_element>
    22a8:	ldr	r0, [r5]
    22ac:	mov	r1, #5
    22b0:	ldr	r2, [pc, #120]	; 2330 <cd_attribute_init+0x278>
    22b4:	ldr	r3, [pc, #112]	; 232c <cd_attribute_init+0x274>
    22b8:	bl	8bc <register_sub_element>
    22bc:	ldr	r0, [r5]
    22c0:	mov	r1, #16
    22c4:	ldr	r2, [pc, #56]	; 2304 <cd_attribute_init+0x24c>
    22c8:	ldr	r3, [pc, #80]	; 2320 <cd_attribute_init+0x268>
    22cc:	bl	8bc <register_sub_element>
    22d0:	ldr	r0, [r5]
    22d4:	ldr	r1, [pc, #72]	; 2324 <cd_attribute_init+0x26c>
    22d8:	str	r1, [r0, #36]	; 0x24
    22dc:	mov	r0, #0
    22e0:	ldr	r4, [sp, #8]
    22e4:	ldr	r5, [sp, #12]
    22e8:	ldr	r6, [sp, #16]
    22ec:	ldr	lr, [sp, #4]
    22f0:	add	sp, sp, #24
    22f4:	bx	lr
    22f8:	.word	0x00001939
    22fc:	.word	0x00000eaf
    2300:	.word	0x00002100
    2304:	.word	0x00000000
    2308:	.word	0x0000047e
    230c:	.word	0x00000000
    2310:	.word	0x000001f6
	...
    2334:	.word	0x000009ff
    2338:	.word	0x00000a1e
    233c:	.word	0x00001746
    2340:	.word	0x00000dee

00002344 <cd_complex_set_type>:
    2344:	mov	ip, sp
    2348:	sub	sp, sp, #8
    234c:	str	ip, [sp]
    2350:	str	lr, [sp, #4]
    2354:	ldr	r1, [r0]
    2358:	ldr	r2, [r1, #396]	; 0x18c
    235c:	ldr	r0, [r2, #8]
    2360:	ldr	r1, [r1, #8]
    2364:	ldr	lr, [sp, #4]
    2368:	add	sp, sp, #8
    236c:	b	0 <coda_type_complex_set_type>

00002370 <cd_complex_finalise>:
    2370:	mov	ip, sp
    2374:	sub	sp, sp, #8
    2378:	str	ip, [sp]
    237c:	str	lr, [sp, #4]
    2380:	ldr	r0, [r0]
    2384:	ldr	r0, [r0, #8]
    2388:	ldr	lr, [sp, #4]
    238c:	add	sp, sp, #8
    2390:	b	0 <coda_type_complex_validate>

00002394 <cd_complex_init>:
    2394:	mov	ip, sp
    2398:	sub	sp, sp, #16
    239c:	str	ip, [sp]
    23a0:	str	lr, [sp, #4]
    23a4:	str	r4, [sp, #8]
    23a8:	str	r5, [sp, #12]
    23ac:	mov	r5, r1
    23b0:	mov	r4, r0
    23b4:	mov	r1, r5
    23b8:	mov	r0, r4
    23bc:	bl	6b4 <handle_format_attribute_for_type>
    23c0:	cmp	r0, #0
    23c4:	beq	23d0 <cd_complex_init+0x3c>
    23c8:	mvn	r0, #0
    23cc:	b	2470 <cd_complex_init+0xdc>
    23d0:	ldr	r0, [r4]
    23d4:	ldr	r2, [pc, #172]	; 2488 <cd_complex_init+0xf4>
    23d8:	str	r2, [r0, #40]	; 0x28
    23dc:	ldr	r1, [r4]
    23e0:	ldr	r0, [r1, #44]	; 0x2c
    23e4:	bl	0 <coda_type_complex_new>
    23e8:	ldr	ip, [r4]
    23ec:	str	r0, [ip, #8]
    23f0:	ldr	r0, [r4]
    23f4:	ldr	r2, [r0, #8]
    23f8:	cmp	r2, #0
    23fc:	bne	2408 <cd_complex_init+0x74>
    2400:	mvn	r0, #0
    2404:	b	2470 <cd_complex_init+0xdc>
    2408:	mov	r1, r5
    240c:	mov	r0, r4
    2410:	bl	5c4 <handle_name_attribute_for_type>
    2414:	cmp	r0, #0
    2418:	beq	2424 <cd_complex_init+0x90>
    241c:	mvn	r0, #0
    2420:	b	2470 <cd_complex_init+0xdc>
    2424:	ldr	r0, [r4]
    2428:	mov	r1, #11
    242c:	ldr	r2, [pc, #80]	; 2484 <cd_complex_init+0xf0>
    2430:	ldr	r3, [pc, #84]	; 248c <cd_complex_init+0xf8>
    2434:	bl	8bc <register_sub_element>
    2438:	ldr	r0, [r4]
    243c:	mov	r1, #17
    2440:	ldr	r2, [pc, #76]	; 2494 <cd_complex_init+0x100>
    2444:	ldr	r3, [pc, #76]	; 2498 <cd_complex_init+0x104>
    2448:	bl	8bc <register_sub_element>
    244c:	ldr	r0, [r4]
    2450:	mov	r1, #20
    2454:	ldr	r2, [pc, #52]	; 2490 <cd_complex_init+0xfc>
    2458:	ldr	r3, [pc, #56]	; 2498 <cd_complex_init+0x104>
    245c:	bl	8bc <register_sub_element>
    2460:	ldr	r0, [r4]
    2464:	ldr	r1, [pc, #48]	; 249c <cd_complex_init+0x108>
    2468:	str	r1, [r0, #36]	; 0x24
    246c:	mov	r0, #0
    2470:	ldr	r4, [sp, #8]
    2474:	ldr	r5, [sp, #12]
    2478:	ldr	lr, [sp, #4]
    247c:	add	sp, sp, #16
    2480:	bx	lr
	...

000024a0 <cd_conversion_set_unit>:
    24a0:	mov	ip, sp
    24a4:	sub	sp, sp, #8
    24a8:	str	ip, [sp]
    24ac:	str	lr, [sp, #4]
    24b0:	ldr	r0, [r0]
    24b4:	ldr	r1, [r0, #12]
    24b8:	cmp	r1, #0
    24bc:	bne	24d8 <cd_conversion_set_unit+0x38>
    24c0:	ldr	r0, [r0, #396]	; 0x18c
    24c4:	ldr	r0, [r0, #8]
    24c8:	ldr	r1, [pc, #28]	; 24ec <cd_conversion_set_unit+0x4c>
    24cc:	ldr	lr, [sp, #4]
    24d0:	add	sp, sp, #8
    24d4:	b	0 <coda_conversion_set_unit>
    24d8:	ldr	r3, [r0, #396]	; 0x18c
    24dc:	ldr	r0, [r3, #8]
    24e0:	ldr	lr, [sp, #4]
    24e4:	add	sp, sp, #8
    24e8:	b	0 <coda_conversion_set_unit>
    24ec:	.word	0x00002067

000024f0 <cd_conversion_init>:
    24f0:	mov	ip, sp
    24f4:	sub	sp, sp, #56	; 0x38
    24f8:	str	ip, [sp]
    24fc:	str	lr, [sp, #4]
    2500:	str	r4, [sp, #8]
    2504:	str	r5, [sp, #12]
    2508:	str	r6, [sp, #16]
    250c:	str	r7, [sp, #20]
    2510:	mov	r5, r1
    2514:	mov	r6, r0
    2518:	vldr	d1, [pc, #528]	; 2730 <cd_conversion_init+0x240>
    251c:	vstr	d1, [sp, #40]	; 0x28
    2520:	bl	0 <coda_NaN>
    2524:	vstr	d0, [sp, #48]	; 0x30
    2528:	ldr	r1, [pc, #508]	; 272c <cd_conversion_init+0x23c>
    252c:	ldr	r3, [r6]
    2530:	ldr	r2, [r3]
    2534:	mov	r0, r5
    2538:	bl	54c <get_mandatory_attribute_value>
    253c:	mov	r7, r0
    2540:	cmp	r7, #0
    2544:	bne	2550 <cd_conversion_init+0x60>
    2548:	mvn	r0, #0
    254c:	b	26e8 <cd_conversion_init+0x1f8>
    2550:	ldr	r1, [pc, #440]	; 2710 <cd_conversion_init+0x220>
    2554:	ldr	ip, [r6]
    2558:	ldr	r2, [ip]
    255c:	mov	r0, r5
    2560:	bl	54c <get_mandatory_attribute_value>
    2564:	mov	r4, r0
    2568:	cmp	r4, #0
    256c:	bne	2578 <cd_conversion_init+0x88>
    2570:	mvn	r0, #0
    2574:	b	26e8 <cd_conversion_init+0x1f8>
    2578:	mov	r0, r7
    257c:	bl	0 <strlen>
    2580:	add	r2, sp, #24
    2584:	mov	r3, #1
    2588:	mov	r1, r0
    258c:	mov	r0, r7
    2590:	bl	0 <coda_ascii_parse_double>
    2594:	cmp	r0, #0
    2598:	bge	25b8 <cd_conversion_init+0xc8>
    259c:	movw	r0, #65136	; 0xfe70
    25a0:	movt	r0, #65535	; 0xffff
    25a4:	ldr	r1, [pc, #344]	; 2704 <cd_conversion_init+0x214>
    25a8:	mov	r2, r7
    25ac:	bl	0 <coda_set_error>
    25b0:	mvn	r0, #0
    25b4:	b	26e8 <cd_conversion_init+0x1f8>
    25b8:	mov	r0, r4
    25bc:	bl	0 <strlen>
    25c0:	mov	r1, r0
    25c4:	add	r2, sp, #32
    25c8:	mov	r3, #1
    25cc:	mov	r0, r4
    25d0:	bl	0 <coda_ascii_parse_double>
    25d4:	cmp	r0, #0
    25d8:	bge	25f8 <cd_conversion_init+0x108>
    25dc:	movw	r0, #65136	; 0xfe70
    25e0:	movt	r0, #65535	; 0xffff
    25e4:	ldr	r1, [pc, #308]	; 2720 <cd_conversion_init+0x230>
    25e8:	mov	r2, r4
    25ec:	bl	0 <coda_set_error>
    25f0:	mvn	r0, #0
    25f4:	b	26e8 <cd_conversion_init+0x1f8>
    25f8:	ldr	r1, [pc, #296]	; 2728 <cd_conversion_init+0x238>
    25fc:	mov	r0, r5
    2600:	bl	4e8 <get_attribute_value>
    2604:	mov	r4, r0
    2608:	cmp	r4, #0
    260c:	beq	2650 <cd_conversion_init+0x160>
    2610:	mov	r0, r4
    2614:	bl	0 <strlen>
    2618:	add	r2, sp, #40	; 0x28
    261c:	mov	r3, #1
    2620:	mov	r1, r0
    2624:	mov	r0, r4
    2628:	bl	0 <coda_ascii_parse_double>
    262c:	cmp	r0, #0
    2630:	bge	2650 <cd_conversion_init+0x160>
    2634:	movw	r0, #65136	; 0xfe70
    2638:	movt	r0, #65535	; 0xffff
    263c:	ldr	r1, [pc, #196]	; 2708 <cd_conversion_init+0x218>
    2640:	mov	r2, r4
    2644:	bl	0 <coda_set_error>
    2648:	mvn	r0, #0
    264c:	b	26e8 <cd_conversion_init+0x1f8>
    2650:	ldr	r1, [pc, #188]	; 2714 <cd_conversion_init+0x224>
    2654:	mov	r0, r5
    2658:	bl	4e8 <get_attribute_value>
    265c:	mov	r4, r0
    2660:	cmp	r4, #0
    2664:	beq	26a8 <cd_conversion_init+0x1b8>
    2668:	mov	r0, r4
    266c:	bl	0 <strlen>
    2670:	mov	r1, r0
    2674:	add	r2, sp, #48	; 0x30
    2678:	mov	r3, #1
    267c:	mov	r0, r4
    2680:	bl	0 <coda_ascii_parse_double>
    2684:	cmp	r0, #0
    2688:	bge	26a8 <cd_conversion_init+0x1b8>
    268c:	movw	r0, #65136	; 0xfe70
    2690:	movt	r0, #65535	; 0xffff
    2694:	ldr	r1, [pc, #136]	; 2724 <cd_conversion_init+0x234>
    2698:	mov	r2, r4
    269c:	bl	0 <coda_set_error>
    26a0:	mvn	r0, #0
    26a4:	b	26e8 <cd_conversion_init+0x1f8>
    26a8:	ldr	r0, [r6]
    26ac:	ldr	r1, [pc, #104]	; 271c <cd_conversion_init+0x22c>
    26b0:	str	r1, [r0, #40]	; 0x28
    26b4:	vldr	d0, [sp, #24]
    26b8:	vldr	d1, [sp, #32]
    26bc:	vldr	d2, [sp, #40]	; 0x28
    26c0:	vldr	d3, [sp, #48]	; 0x30
    26c4:	bl	0 <coda_conversion_new>
    26c8:	ldr	r1, [r6]
    26cc:	str	r0, [r1, #8]
    26d0:	ldr	r0, [r6]
    26d4:	mov	r1, #41	; 0x29
    26d8:	ldr	r2, [pc, #44]	; 270c <cd_conversion_init+0x21c>
    26dc:	ldr	r3, [pc, #52]	; 2718 <cd_conversion_init+0x228>
    26e0:	bl	8bc <register_sub_element>
    26e4:	mov	r0, #0
    26e8:	ldr	r4, [sp, #8]
    26ec:	ldr	r5, [sp, #12]
    26f0:	ldr	r6, [sp, #16]
    26f4:	ldr	r7, [sp, #20]
    26f8:	ldr	lr, [sp, #4]
    26fc:	add	sp, sp, #56	; 0x38
    2700:	bx	lr
    2704:	.word	0x0000099c
    2708:	.word	0x00001604
    270c:	.word	0x00000000
    2710:	.word	0x00000edd
    2714:	.word	0x00001ec9
	...
    2720:	.word	0x00001d31
    2724:	.word	0x00000039
    2728:	.word	0x00001ec2
    272c:	.word	0x000012b7
	...

00002738 <cd_detection_rule_add_entry>:
    2738:	mov	ip, sp
    273c:	sub	sp, sp, #16
    2740:	str	ip, [sp]
    2744:	str	lr, [sp, #4]
    2748:	str	r4, [sp, #8]
    274c:	mov	r4, r0
    2750:	ldr	r0, [r4]
    2754:	ldr	r1, [r0, #8]
    2758:	cmp	r1, #0
    275c:	beq	2788 <cd_detection_rule_add_entry+0x50>
    2760:	ldr	r3, [r0, #396]	; 0x18c
    2764:	ldr	r0, [r3, #8]
    2768:	bl	0 <coda_detection_rule_add_entry>
    276c:	cmp	r0, #0
    2770:	beq	277c <cd_detection_rule_add_entry+0x44>
    2774:	mvn	r0, #0
    2778:	b	278c <cd_detection_rule_add_entry+0x54>
    277c:	ldr	r1, [r4]
    2780:	mov	ip, #0
    2784:	str	ip, [r1, #8]
    2788:	mov	r0, #0
    278c:	ldr	r4, [sp, #8]
    2790:	ldr	lr, [sp, #4]
    2794:	add	sp, sp, #16
    2798:	bx	lr

0000279c <cd_detection_rule_init>:
    279c:	mov	ip, sp
    27a0:	sub	sp, sp, #16
    27a4:	str	ip, [sp]
    27a8:	str	lr, [sp, #4]
    27ac:	str	r4, [sp, #8]
    27b0:	mov	r4, r0
    27b4:	ldr	r2, [r4]
    27b8:	ldr	ip, [pc, #140]	; 284c <cd_detection_rule_init+0xb0>
    27bc:	str	ip, [r2, #40]	; 0x28
    27c0:	bl	0 <coda_detection_rule_new>
    27c4:	ldr	r1, [r4]
    27c8:	str	r0, [r1, #8]
    27cc:	ldr	r0, [r4]
    27d0:	ldr	r1, [r0, #8]
    27d4:	cmp	r1, #0
    27d8:	bne	27e4 <cd_detection_rule_init+0x48>
    27dc:	mvn	r0, #0
    27e0:	b	2834 <cd_detection_rule_init+0x98>
    27e4:	mov	r1, #23
    27e8:	ldr	r2, [pc, #84]	; 2844 <cd_detection_rule_init+0xa8>
    27ec:	ldr	r3, [pc, #84]	; 2848 <cd_detection_rule_init+0xac>
    27f0:	bl	8bc <register_sub_element>
    27f4:	ldr	r0, [r4]
    27f8:	mov	r1, #24
    27fc:	ldr	r2, [pc, #76]	; 2850 <cd_detection_rule_init+0xb4>
    2800:	ldr	r3, [pc, #64]	; 2848 <cd_detection_rule_init+0xac>
    2804:	bl	8bc <register_sub_element>
    2808:	ldr	r0, [r4]
    280c:	mov	r1, #25
    2810:	ldr	r2, [pc, #64]	; 2858 <cd_detection_rule_init+0xbc>
    2814:	ldr	r3, [pc, #44]	; 2848 <cd_detection_rule_init+0xac>
    2818:	bl	8bc <register_sub_element>
    281c:	ldr	r0, [r4]
    2820:	mov	r1, #26
    2824:	ldr	r2, [pc, #40]	; 2854 <cd_detection_rule_init+0xb8>
    2828:	ldr	r3, [pc, #24]	; 2848 <cd_detection_rule_init+0xac>
    282c:	bl	8bc <register_sub_element>
    2830:	mov	r0, #0
    2834:	ldr	r4, [sp, #8]
    2838:	ldr	lr, [sp, #4]
    283c:	add	sp, sp, #16
    2840:	bx	lr
	...

0000285c <cd_field_set_type>:
    285c:	mov	ip, sp
    2860:	sub	sp, sp, #8
    2864:	str	ip, [sp]
    2868:	str	lr, [sp, #4]
    286c:	ldr	r1, [r0]
    2870:	ldr	r2, [r1, #396]	; 0x18c
    2874:	ldr	r0, [r2, #8]
    2878:	ldr	r1, [r1, #8]
    287c:	ldr	lr, [sp, #4]
    2880:	add	sp, sp, #8
    2884:	b	0 <coda_type_record_field_set_type>

00002888 <cd_field_set_hidden>:
    2888:	mov	ip, sp
    288c:	sub	sp, sp, #8
    2890:	str	ip, [sp]
    2894:	str	lr, [sp, #4]
    2898:	ldr	r0, [r0]
    289c:	ldr	r0, [r0, #396]	; 0x18c
    28a0:	ldr	r0, [r0, #8]
    28a4:	ldr	lr, [sp, #4]
    28a8:	add	sp, sp, #8
    28ac:	b	0 <coda_type_record_field_set_hidden>

000028b0 <cd_field_set_optional>:
    28b0:	mov	ip, sp
    28b4:	sub	sp, sp, #8
    28b8:	str	ip, [sp]
    28bc:	str	lr, [sp, #4]
    28c0:	ldr	r0, [r0]
    28c4:	ldr	r0, [r0, #396]	; 0x18c
    28c8:	ldr	r0, [r0, #8]
    28cc:	ldr	lr, [sp, #4]
    28d0:	add	sp, sp, #8
    28d4:	b	0 <coda_type_record_field_set_optional>

000028d8 <cd_field_set_available>:
    28d8:	mov	ip, sp
    28dc:	sub	sp, sp, #16
    28e0:	str	ip, [sp]
    28e4:	str	lr, [sp, #4]
    28e8:	str	r4, [sp, #8]
    28ec:	mov	r4, r0
    28f0:	ldr	r1, [r4]
    28f4:	ldr	r2, [r1, #396]	; 0x18c
    28f8:	ldr	r0, [r2, #8]
    28fc:	ldr	r1, [r1, #8]
    2900:	bl	0 <coda_type_record_field_set_available_expression>
    2904:	cmp	r0, #0
    2908:	beq	2914 <cd_field_set_available+0x3c>
    290c:	mvn	r0, #0
    2910:	b	2924 <cd_field_set_available+0x4c>
    2914:	ldr	r1, [r4]
    2918:	mov	r3, #0
    291c:	str	r3, [r1, #8]
    2920:	mov	r0, #0
    2924:	ldr	r4, [sp, #8]
    2928:	ldr	lr, [sp, #4]
    292c:	add	sp, sp, #16
    2930:	bx	lr

00002934 <cd_field_set_bit_offset>:
    2934:	mov	ip, sp
    2938:	sub	sp, sp, #16
    293c:	str	ip, [sp]
    2940:	str	lr, [sp, #4]
    2944:	str	r4, [sp, #8]
    2948:	mov	r4, r0
    294c:	ldr	r1, [r4]
    2950:	ldr	r2, [r1, #396]	; 0x18c
    2954:	ldr	r0, [r2, #8]
    2958:	ldr	r1, [r1, #8]
    295c:	bl	0 <coda_type_record_field_set_bit_offset_expression>
    2960:	cmp	r0, #0
    2964:	beq	2970 <cd_field_set_bit_offset+0x3c>
    2968:	mvn	r0, #0
    296c:	b	2980 <cd_field_set_bit_offset+0x4c>
    2970:	ldr	r1, [r4]
    2974:	mov	r3, #0
    2978:	str	r3, [r1, #8]
    297c:	mov	r0, #0
    2980:	ldr	r4, [sp, #8]
    2984:	ldr	lr, [sp, #4]
    2988:	add	sp, sp, #16
    298c:	bx	lr

00002990 <cd_field_finalise>:
    2990:	mov	ip, sp
    2994:	sub	sp, sp, #8
    2998:	str	ip, [sp]
    299c:	str	lr, [sp, #4]
    29a0:	ldr	r0, [r0]
    29a4:	ldr	r0, [r0, #8]
    29a8:	ldr	lr, [sp, #4]
    29ac:	add	sp, sp, #8
    29b0:	b	0 <coda_type_record_field_validate>

000029b4 <cd_field_init>:
    29b4:	mov	ip, sp
    29b8:	sub	sp, sp, #16
    29bc:	str	ip, [sp]
    29c0:	str	lr, [sp, #4]
    29c4:	str	r4, [sp, #8]
    29c8:	str	r5, [sp, #12]
    29cc:	mov	r5, r1
    29d0:	mov	r4, r0
    29d4:	ldr	r1, [pc, #484]	; 2bc0 <cd_field_init+0x20c>
    29d8:	mov	r0, r5
    29dc:	bl	4e8 <get_attribute_value>
    29e0:	cmp	r0, #0
    29e4:	beq	2a00 <cd_field_init+0x4c>
    29e8:	movw	r0, #65136	; 0xfe70
    29ec:	movt	r0, #65535	; 0xffff
    29f0:	ldr	r1, [pc, #448]	; 2bb8 <cd_field_init+0x204>
    29f4:	bl	0 <coda_set_error>
    29f8:	mvn	r0, #0
    29fc:	b	2b64 <cd_field_init+0x1b0>
    2a00:	ldr	r0, [r4]
    2a04:	ldr	ip, [r0, #396]	; 0x18c
    2a08:	ldr	r2, [ip, #48]	; 0x30
    2a0c:	cmp	r2, #0
    2a10:	bne	2a28 <cd_field_init+0x74>
    2a14:	ldr	r0, [pc, #408]	; 2bb4 <cd_field_init+0x200>
    2a18:	ldr	r1, [pc, #344]	; 2b78 <cd_field_init+0x1c4>
    2a1c:	movw	r2, #1685	; 0x695
    2a20:	ldr	r3, [pc, #340]	; 2b7c <cd_field_init+0x1c8>
    2a24:	bl	0 <__assert_fail>
    2a28:	ldr	r0, [r4]
    2a2c:	ldr	ip, [r0, #396]	; 0x18c
    2a30:	ldr	r1, [ip, #44]	; 0x2c
    2a34:	str	r1, [r0, #44]	; 0x2c
    2a38:	ldr	r0, [r4]
    2a3c:	mov	ip, #1
    2a40:	str	ip, [r0, #48]	; 0x30
    2a44:	ldr	r1, [pc, #328]	; 2b94 <cd_field_init+0x1e0>
    2a48:	mov	r0, r5
    2a4c:	bl	4e8 <get_attribute_value>
    2a50:	cmp	r0, #0
    2a54:	beq	2a70 <cd_field_init+0xbc>
    2a58:	movw	r0, #65136	; 0xfe70
    2a5c:	movt	r0, #65535	; 0xffff
    2a60:	ldr	r1, [pc, #316]	; 2ba4 <cd_field_init+0x1f0>
    2a64:	bl	0 <coda_set_error>
    2a68:	mvn	r0, #0
    2a6c:	b	2b64 <cd_field_init+0x1b0>
    2a70:	ldr	r1, [pc, #268]	; 2b84 <cd_field_init+0x1d0>
    2a74:	ldr	r0, [r4]
    2a78:	ldr	r2, [r0]
    2a7c:	mov	r0, r5
    2a80:	bl	54c <get_mandatory_attribute_value>
    2a84:	cmp	r0, #0
    2a88:	bne	2a94 <cd_field_init+0xe0>
    2a8c:	mvn	r0, #0
    2a90:	b	2b64 <cd_field_init+0x1b0>
    2a94:	ldr	r3, [r4]
    2a98:	ldr	r1, [pc, #264]	; 2ba8 <cd_field_init+0x1f4>
    2a9c:	str	r1, [r3, #40]	; 0x28
    2aa0:	bl	0 <coda_type_record_field_new>
    2aa4:	ldr	r2, [r4]
    2aa8:	str	r0, [r2, #8]
    2aac:	ldr	ip, [r4]
    2ab0:	ldr	r0, [ip, #8]
    2ab4:	cmp	r0, #0
    2ab8:	bne	2ac4 <cd_field_init+0x110>
    2abc:	mvn	r0, #0
    2ac0:	b	2b64 <cd_field_init+0x1b0>
    2ac4:	ldr	r1, [pc, #240]	; 2bbc <cd_field_init+0x208>
    2ac8:	mov	r0, r5
    2acc:	bl	4e8 <get_attribute_value>
    2ad0:	mov	r1, r0
    2ad4:	cmp	r1, #0
    2ad8:	beq	2af8 <cd_field_init+0x144>
    2adc:	ldr	r2, [r4]
    2ae0:	ldr	r0, [r2, #8]
    2ae4:	bl	0 <coda_type_record_field_set_real_name>
    2ae8:	cmp	r0, #0
    2aec:	beq	2af8 <cd_field_init+0x144>
    2af0:	mvn	r0, #0
    2af4:	b	2b64 <cd_field_init+0x1b0>
    2af8:	ldr	r0, [r4]
    2afc:	ldr	r1, [pc, #148]	; 2b98 <cd_field_init+0x1e4>
    2b00:	bl	940 <register_type_elements>
    2b04:	ldr	r0, [r4]
    2b08:	mov	r1, #18
    2b0c:	ldr	r2, [pc, #136]	; 2b9c <cd_field_init+0x1e8>
    2b10:	ldr	r3, [pc, #112]	; 2b88 <cd_field_init+0x1d4>
    2b14:	bl	8bc <register_sub_element>
    2b18:	ldr	r0, [r4]
    2b1c:	mov	r1, #29
    2b20:	ldr	r2, [pc, #116]	; 2b9c <cd_field_init+0x1e8>
    2b24:	ldr	r3, [pc, #116]	; 2ba0 <cd_field_init+0x1ec>
    2b28:	bl	8bc <register_sub_element>
    2b2c:	ldr	r0, [r4]
    2b30:	mov	r1, #5
    2b34:	ldr	r2, [pc, #116]	; 2bb0 <cd_field_init+0x1fc>
    2b38:	ldr	r3, [pc, #108]	; 2bac <cd_field_init+0x1f8>
    2b3c:	bl	8bc <register_sub_element>
    2b40:	ldr	r0, [r4]
    2b44:	mov	r1, #6
    2b48:	ldr	r2, [pc, #48]	; 2b80 <cd_field_init+0x1cc>
    2b4c:	ldr	r3, [pc, #60]	; 2b90 <cd_field_init+0x1dc>
    2b50:	bl	8bc <register_sub_element>
    2b54:	ldr	r1, [r4]
    2b58:	ldr	ip, [pc, #44]	; 2b8c <cd_field_init+0x1d8>
    2b5c:	str	ip, [r1, #36]	; 0x24
    2b60:	mov	r0, #0
    2b64:	ldr	r4, [sp, #8]
    2b68:	ldr	r5, [sp, #12]
    2b6c:	ldr	lr, [sp, #4]
    2b70:	add	sp, sp, #16
    2b74:	bx	lr
    2b78:	.word	0x00001939
    2b7c:	.word	0x00002112
    2b80:	.word	0x00000000
    2b84:	.word	0x0000047e
	...
    2b94:	.word	0x000001f6
	...
    2ba4:	.word	0x00001ed1
	...
    2bb4:	.word	0x000009ff
    2bb8:	.word	0x0000009b
    2bbc:	.word	0x00000a1e
    2bc0:	.word	0x00001746

00002bc4 <cd_float_set_unit>:
    2bc4:	mov	ip, sp
    2bc8:	sub	sp, sp, #8
    2bcc:	str	ip, [sp]
    2bd0:	str	lr, [sp, #4]
    2bd4:	ldr	r0, [r0]
    2bd8:	ldr	r1, [r0, #12]
    2bdc:	cmp	r1, #0
    2be0:	bne	2bfc <cd_float_set_unit+0x38>
    2be4:	ldr	r0, [r0, #396]	; 0x18c
    2be8:	ldr	r0, [r0, #8]
    2bec:	ldr	r1, [pc, #28]	; 2c10 <cd_float_set_unit+0x4c>
    2bf0:	ldr	lr, [sp, #4]
    2bf4:	add	sp, sp, #8
    2bf8:	b	0 <coda_type_number_set_unit>
    2bfc:	ldr	r3, [r0, #396]	; 0x18c
    2c00:	ldr	r0, [r3, #8]
    2c04:	ldr	lr, [sp, #4]
    2c08:	add	sp, sp, #8
    2c0c:	b	0 <coda_type_number_set_unit>
    2c10:	.word	0x00002067

00002c14 <cd_float_set_read_type>:
    2c14:	mov	ip, sp
    2c18:	sub	sp, sp, #8
    2c1c:	str	ip, [sp]
    2c20:	str	lr, [sp, #4]
    2c24:	ldr	r1, [r0]
    2c28:	ldr	r2, [r1, #396]	; 0x18c
    2c2c:	ldr	r0, [r2, #8]
    2c30:	ldr	r1, [r1, #16]
    2c34:	ldr	lr, [sp, #4]
    2c38:	add	sp, sp, #8
    2c3c:	b	0 <coda_type_set_read_type>

00002c40 <cd_float_set_conversion>:
    2c40:	mov	ip, sp
    2c44:	sub	sp, sp, #16
    2c48:	str	ip, [sp]
    2c4c:	str	lr, [sp, #4]
    2c50:	str	r4, [sp, #8]
    2c54:	mov	r4, r0
    2c58:	ldr	r1, [r4]
    2c5c:	ldr	r2, [r1, #396]	; 0x18c
    2c60:	ldr	r0, [r2, #8]
    2c64:	ldr	r1, [r1, #8]
    2c68:	bl	0 <coda_type_number_set_conversion>
    2c6c:	cmp	r0, #0
    2c70:	beq	2c7c <cd_float_set_conversion+0x3c>
    2c74:	mvn	r0, #0
    2c78:	b	2c8c <cd_float_set_conversion+0x4c>
    2c7c:	ldr	r1, [r4]
    2c80:	mov	r3, #0
    2c84:	str	r3, [r1, #8]
    2c88:	mov	r0, #0
    2c8c:	ldr	r4, [sp, #8]
    2c90:	ldr	lr, [sp, #4]
    2c94:	add	sp, sp, #16
    2c98:	bx	lr

00002c9c <cd_float_set_little_endian>:
    2c9c:	mov	ip, sp
    2ca0:	sub	sp, sp, #8
    2ca4:	str	ip, [sp]
    2ca8:	str	lr, [sp, #4]
    2cac:	ldr	r0, [r0]
    2cb0:	ldr	r0, [r0, #396]	; 0x18c
    2cb4:	ldr	r0, [r0, #8]
    2cb8:	mov	r1, #1
    2cbc:	ldr	lr, [sp, #4]
    2cc0:	add	sp, sp, #8
    2cc4:	b	0 <coda_type_number_set_endianness>

00002cc8 <cd_float_add_mapping>:
    2cc8:	mov	ip, sp
    2ccc:	sub	sp, sp, #16
    2cd0:	str	ip, [sp]
    2cd4:	str	lr, [sp, #4]
    2cd8:	str	r4, [sp, #8]
    2cdc:	mov	r4, r0
    2ce0:	ldr	r1, [r4]
    2ce4:	ldr	r2, [r1, #396]	; 0x18c
    2ce8:	ldr	r0, [r2, #8]
    2cec:	ldr	r1, [r1, #8]
    2cf0:	bl	0 <coda_type_number_add_ascii_float_mapping>
    2cf4:	cmp	r0, #0
    2cf8:	beq	2d04 <cd_float_add_mapping+0x3c>
    2cfc:	mvn	r0, #0
    2d00:	b	2d14 <cd_float_add_mapping+0x4c>
    2d04:	ldr	r1, [r4]
    2d08:	mov	r3, #0
    2d0c:	str	r3, [r1, #8]
    2d10:	mov	r0, #0
    2d14:	ldr	r4, [sp, #8]
    2d18:	ldr	lr, [sp, #4]
    2d1c:	add	sp, sp, #16
    2d20:	bx	lr

00002d24 <cd_float_finalise>:
    2d24:	mov	ip, sp
    2d28:	sub	sp, sp, #8
    2d2c:	str	ip, [sp]
    2d30:	str	lr, [sp, #4]
    2d34:	ldr	r0, [r0]
    2d38:	ldr	r0, [r0, #8]
    2d3c:	ldr	lr, [sp, #4]
    2d40:	add	sp, sp, #8
    2d44:	b	0 <coda_type_number_validate>

00002d48 <cd_float_init>:
    2d48:	mov	ip, sp
    2d4c:	sub	sp, sp, #16
    2d50:	str	ip, [sp]
    2d54:	str	lr, [sp, #4]
    2d58:	str	r4, [sp, #8]
    2d5c:	str	r5, [sp, #12]
    2d60:	mov	r5, r1
    2d64:	mov	r4, r0
    2d68:	mov	r1, r5
    2d6c:	mov	r0, r4
    2d70:	bl	6b4 <handle_format_attribute_for_type>
    2d74:	cmp	r0, #0
    2d78:	beq	2d84 <cd_float_init+0x3c>
    2d7c:	mvn	r0, #0
    2d80:	b	2ea0 <cd_float_init+0x158>
    2d84:	ldr	r2, [r4]
    2d88:	ldr	r3, [pc, #312]	; 2ec8 <cd_float_init+0x180>
    2d8c:	str	r3, [r2, #40]	; 0x28
    2d90:	ldr	r3, [r4]
    2d94:	ldr	r0, [r3, #44]	; 0x2c
    2d98:	mov	r1, #3
    2d9c:	bl	0 <coda_type_number_new>
    2da0:	ldr	r2, [r4]
    2da4:	str	r0, [r2, #8]
    2da8:	ldr	ip, [r4]
    2dac:	ldr	ip, [ip, #8]
    2db0:	cmp	ip, #0
    2db4:	bne	2dc0 <cd_float_init+0x78>
    2db8:	mvn	r0, #0
    2dbc:	b	2ea0 <cd_float_init+0x158>
    2dc0:	mov	r1, r5
    2dc4:	mov	r0, r4
    2dc8:	bl	5c4 <handle_name_attribute_for_type>
    2dcc:	cmp	r0, #0
    2dd0:	beq	2ddc <cd_float_init+0x94>
    2dd4:	mvn	r0, #0
    2dd8:	b	2ea0 <cd_float_init+0x158>
    2ddc:	ldr	r0, [r4]
    2de0:	mov	r1, #41	; 0x29
    2de4:	ldr	r2, [pc, #216]	; 2ec4 <cd_float_init+0x17c>
    2de8:	ldr	r3, [pc, #232]	; 2ed8 <cd_float_init+0x190>
    2dec:	bl	8bc <register_sub_element>
    2df0:	ldr	r0, [r4]
    2df4:	mov	r1, #28
    2df8:	ldr	r2, [pc, #180]	; 2eb4 <cd_float_init+0x16c>
    2dfc:	ldr	r3, [pc, #188]	; 2ec0 <cd_float_init+0x178>
    2e00:	bl	8bc <register_sub_element>
    2e04:	ldr	r0, [r4]
    2e08:	mov	r1, #10
    2e0c:	ldr	r2, [pc, #224]	; 2ef4 <cd_float_init+0x1ac>
    2e10:	ldr	r3, [pc, #180]	; 2ecc <cd_float_init+0x184>
    2e14:	bl	8bc <register_sub_element>
    2e18:	ldr	r0, [r4]
    2e1c:	mov	r1, #7
    2e20:	ldr	r2, [pc, #208]	; 2ef8 <cd_float_init+0x1b0>
    2e24:	ldr	r3, [pc, #188]	; 2ee8 <cd_float_init+0x1a0>
    2e28:	bl	8bc <register_sub_element>
    2e2c:	ldr	r0, [r4]
    2e30:	mov	r1, #8
    2e34:	ldr	r2, [pc, #188]	; 2ef8 <cd_float_init+0x1b0>
    2e38:	ldr	r3, [pc, #172]	; 2eec <cd_float_init+0x1a4>
    2e3c:	bl	8bc <register_sub_element>
    2e40:	ldr	r0, [r4]
    2e44:	mov	r1, #21
    2e48:	ldr	r2, [pc, #148]	; 2ee4 <cd_float_init+0x19c>
    2e4c:	ldr	r3, [pc, #100]	; 2eb8 <cd_float_init+0x170>
    2e50:	bl	8bc <register_sub_element>
    2e54:	ldr	r0, [r4]
    2e58:	mov	r1, #22
    2e5c:	ldr	r2, [pc, #124]	; 2ee0 <cd_float_init+0x198>
    2e60:	ldr	r3, [pc, #108]	; 2ed4 <cd_float_init+0x18c>
    2e64:	bl	8bc <register_sub_element>
    2e68:	ldr	r0, [r4]
    2e6c:	mov	r1, #11
    2e70:	ldr	r2, [pc, #76]	; 2ec4 <cd_float_init+0x17c>
    2e74:	ldr	r3, [pc, #84]	; 2ed0 <cd_float_init+0x188>
    2e78:	bl	8bc <register_sub_element>
    2e7c:	ldr	r0, [r4]
    2e80:	mov	r1, #4
    2e84:	ldr	r2, [pc, #100]	; 2ef0 <cd_float_init+0x1a8>
    2e88:	ldr	r3, [pc, #44]	; 2ebc <cd_float_init+0x174>
    2e8c:	bl	8bc <register_sub_element>
    2e90:	ldr	ip, [r4]
    2e94:	ldr	r0, [pc, #64]	; 2edc <cd_float_init+0x194>
    2e98:	str	r0, [ip, #36]	; 0x24
    2e9c:	mov	r0, #0
    2ea0:	ldr	r4, [sp, #8]
    2ea4:	ldr	r5, [sp, #12]
    2ea8:	ldr	lr, [sp, #4]
    2eac:	add	sp, sp, #16
    2eb0:	bx	lr
	...

00002efc <cd_integer_set_unit>:
    2efc:	mov	ip, sp
    2f00:	sub	sp, sp, #8
    2f04:	str	ip, [sp]
    2f08:	str	lr, [sp, #4]
    2f0c:	ldr	r0, [r0]
    2f10:	ldr	r1, [r0, #12]
    2f14:	cmp	r1, #0
    2f18:	bne	2f34 <cd_integer_set_unit+0x38>
    2f1c:	ldr	r0, [r0, #396]	; 0x18c
    2f20:	ldr	r0, [r0, #8]
    2f24:	ldr	r1, [pc, #28]	; 2f48 <cd_integer_set_unit+0x4c>
    2f28:	ldr	lr, [sp, #4]
    2f2c:	add	sp, sp, #8
    2f30:	b	0 <coda_type_number_set_unit>
    2f34:	ldr	r3, [r0, #396]	; 0x18c
    2f38:	ldr	r0, [r3, #8]
    2f3c:	ldr	lr, [sp, #4]
    2f40:	add	sp, sp, #8
    2f44:	b	0 <coda_type_number_set_unit>
    2f48:	.word	0x00002067

00002f4c <cd_integer_set_read_type>:
    2f4c:	mov	ip, sp
    2f50:	sub	sp, sp, #8
    2f54:	str	ip, [sp]
    2f58:	str	lr, [sp, #4]
    2f5c:	ldr	r1, [r0]
    2f60:	ldr	r2, [r1, #396]	; 0x18c
    2f64:	ldr	r0, [r2, #8]
    2f68:	ldr	r1, [r1, #16]
    2f6c:	ldr	lr, [sp, #4]
    2f70:	add	sp, sp, #8
    2f74:	b	0 <coda_type_set_read_type>

00002f78 <cd_integer_set_conversion>:
    2f78:	mov	ip, sp
    2f7c:	sub	sp, sp, #16
    2f80:	str	ip, [sp]
    2f84:	str	lr, [sp, #4]
    2f88:	str	r4, [sp, #8]
    2f8c:	mov	r4, r0
    2f90:	ldr	r1, [r4]
    2f94:	ldr	r2, [r1, #396]	; 0x18c
    2f98:	ldr	r0, [r2, #8]
    2f9c:	ldr	r1, [r1, #8]
    2fa0:	bl	0 <coda_type_number_set_conversion>
    2fa4:	cmp	r0, #0
    2fa8:	beq	2fb4 <cd_integer_set_conversion+0x3c>
    2fac:	mvn	r0, #0
    2fb0:	b	2fc4 <cd_integer_set_conversion+0x4c>
    2fb4:	ldr	r1, [r4]
    2fb8:	mov	r3, #0
    2fbc:	str	r3, [r1, #8]
    2fc0:	mov	r0, #0
    2fc4:	ldr	r4, [sp, #8]
    2fc8:	ldr	lr, [sp, #4]
    2fcc:	add	sp, sp, #16
    2fd0:	bx	lr

00002fd4 <cd_integer_set_little_endian>:
    2fd4:	mov	ip, sp
    2fd8:	sub	sp, sp, #8
    2fdc:	str	ip, [sp]
    2fe0:	str	lr, [sp, #4]
    2fe4:	ldr	r0, [r0]
    2fe8:	ldr	r0, [r0, #396]	; 0x18c
    2fec:	ldr	r0, [r0, #8]
    2ff0:	mov	r1, #1
    2ff4:	ldr	lr, [sp, #4]
    2ff8:	add	sp, sp, #8
    2ffc:	b	0 <coda_type_number_set_endianness>

00003000 <cd_integer_add_mapping>:
    3000:	mov	ip, sp
    3004:	sub	sp, sp, #16
    3008:	str	ip, [sp]
    300c:	str	lr, [sp, #4]
    3010:	str	r4, [sp, #8]
    3014:	mov	r4, r0
    3018:	ldr	r1, [r4]
    301c:	ldr	r2, [r1, #396]	; 0x18c
    3020:	ldr	r0, [r2, #8]
    3024:	ldr	r1, [r1, #8]
    3028:	bl	0 <coda_type_number_add_ascii_integer_mapping>
    302c:	cmp	r0, #0
    3030:	beq	303c <cd_integer_add_mapping+0x3c>
    3034:	mvn	r0, #0
    3038:	b	304c <cd_integer_add_mapping+0x4c>
    303c:	ldr	r1, [r4]
    3040:	mov	r3, #0
    3044:	str	r3, [r1, #8]
    3048:	mov	r0, #0
    304c:	ldr	r4, [sp, #8]
    3050:	ldr	lr, [sp, #4]
    3054:	add	sp, sp, #16
    3058:	bx	lr

0000305c <cd_integer_finalise>:
    305c:	mov	ip, sp
    3060:	sub	sp, sp, #8
    3064:	str	ip, [sp]
    3068:	str	lr, [sp, #4]
    306c:	ldr	r0, [r0]
    3070:	ldr	r0, [r0, #8]
    3074:	ldr	lr, [sp, #4]
    3078:	add	sp, sp, #8
    307c:	b	0 <coda_type_number_validate>

00003080 <cd_integer_init>:
    3080:	mov	ip, sp
    3084:	sub	sp, sp, #16
    3088:	str	ip, [sp]
    308c:	str	lr, [sp, #4]
    3090:	str	r4, [sp, #8]
    3094:	str	r5, [sp, #12]
    3098:	mov	r5, r1
    309c:	mov	r4, r0
    30a0:	mov	r1, r5
    30a4:	mov	r0, r4
    30a8:	bl	6b4 <handle_format_attribute_for_type>
    30ac:	cmp	r0, #0
    30b0:	beq	30bc <cd_integer_init+0x3c>
    30b4:	mvn	r0, #0
    30b8:	b	31d8 <cd_integer_init+0x158>
    30bc:	ldr	r2, [r4]
    30c0:	ldr	r3, [pc, #312]	; 3200 <cd_integer_init+0x180>
    30c4:	str	r3, [r2, #40]	; 0x28
    30c8:	ldr	r3, [r4]
    30cc:	ldr	r0, [r3, #44]	; 0x2c
    30d0:	mov	r1, #2
    30d4:	bl	0 <coda_type_number_new>
    30d8:	ldr	r2, [r4]
    30dc:	str	r0, [r2, #8]
    30e0:	ldr	ip, [r4]
    30e4:	ldr	ip, [ip, #8]
    30e8:	cmp	ip, #0
    30ec:	bne	30f8 <cd_integer_init+0x78>
    30f0:	mvn	r0, #0
    30f4:	b	31d8 <cd_integer_init+0x158>
    30f8:	mov	r1, r5
    30fc:	mov	r0, r4
    3100:	bl	5c4 <handle_name_attribute_for_type>
    3104:	cmp	r0, #0
    3108:	beq	3114 <cd_integer_init+0x94>
    310c:	mvn	r0, #0
    3110:	b	31d8 <cd_integer_init+0x158>
    3114:	ldr	r0, [r4]
    3118:	mov	r1, #11
    311c:	ldr	r2, [pc, #216]	; 31fc <cd_integer_init+0x17c>
    3120:	ldr	r3, [pc, #228]	; 320c <cd_integer_init+0x18c>
    3124:	bl	8bc <register_sub_element>
    3128:	ldr	r0, [r4]
    312c:	mov	r1, #41	; 0x29
    3130:	ldr	r2, [pc, #196]	; 31fc <cd_integer_init+0x17c>
    3134:	ldr	r3, [pc, #240]	; 322c <cd_integer_init+0x1ac>
    3138:	bl	8bc <register_sub_element>
    313c:	ldr	r0, [r4]
    3140:	mov	r1, #8
    3144:	ldr	r2, [pc, #228]	; 3230 <cd_integer_init+0x1b0>
    3148:	ldr	r3, [pc, #208]	; 3220 <cd_integer_init+0x1a0>
    314c:	bl	8bc <register_sub_element>
    3150:	ldr	r0, [r4]
    3154:	mov	r1, #7
    3158:	ldr	r2, [pc, #208]	; 3230 <cd_integer_init+0x1b0>
    315c:	ldr	r3, [pc, #184]	; 321c <cd_integer_init+0x19c>
    3160:	bl	8bc <register_sub_element>
    3164:	ldr	r0, [r4]
    3168:	mov	r1, #21
    316c:	ldr	r2, [pc, #160]	; 3214 <cd_integer_init+0x194>
    3170:	ldr	r3, [pc, #160]	; 3218 <cd_integer_init+0x198>
    3174:	bl	8bc <register_sub_element>
    3178:	ldr	r0, [r4]
    317c:	mov	r1, #28
    3180:	ldr	r2, [pc, #100]	; 31ec <cd_integer_init+0x16c>
    3184:	ldr	r3, [pc, #108]	; 31f8 <cd_integer_init+0x178>
    3188:	bl	8bc <register_sub_element>
    318c:	ldr	r0, [r4]
    3190:	mov	r1, #10
    3194:	ldr	r2, [pc, #140]	; 3228 <cd_integer_init+0x1a8>
    3198:	ldr	r3, [pc, #100]	; 3204 <cd_integer_init+0x184>
    319c:	bl	8bc <register_sub_element>
    31a0:	ldr	r0, [r4]
    31a4:	mov	r1, #22
    31a8:	ldr	r2, [pc, #96]	; 3210 <cd_integer_init+0x190>
    31ac:	ldr	r3, [pc, #84]	; 3208 <cd_integer_init+0x188>
    31b0:	bl	8bc <register_sub_element>
    31b4:	ldr	r0, [r4]
    31b8:	mov	r1, #4
    31bc:	ldr	r2, [pc, #96]	; 3224 <cd_integer_init+0x1a4>
    31c0:	ldr	r3, [pc, #40]	; 31f0 <cd_integer_init+0x170>
    31c4:	bl	8bc <register_sub_element>
    31c8:	ldr	ip, [r4]
    31cc:	ldr	r0, [pc, #32]	; 31f4 <cd_integer_init+0x174>
    31d0:	str	r0, [ip, #36]	; 0x24
    31d4:	mov	r0, #0
    31d8:	ldr	r4, [sp, #8]
    31dc:	ldr	r5, [sp, #12]
    31e0:	ldr	lr, [sp, #4]
    31e4:	add	sp, sp, #16
    31e8:	bx	lr
	...

00003234 <cd_named_type_init>:
    3234:	mov	ip, sp
    3238:	sub	sp, sp, #32
    323c:	str	ip, [sp, #4]
    3240:	str	lr, [sp, #8]
    3244:	str	r4, [sp, #16]
    3248:	str	r5, [sp, #20]
    324c:	mov	r4, r0
    3250:	mov	r0, r1
    3254:	ldr	r1, [pc, #292]	; 3380 <cd_named_type_init+0x14c>
    3258:	ldr	r3, [r4]
    325c:	ldr	r2, [r3]
    3260:	bl	54c <get_mandatory_attribute_value>
    3264:	mov	r5, r0
    3268:	cmp	r5, #0
    326c:	bne	3278 <cd_named_type_init+0x44>
    3270:	mvn	r0, #0
    3274:	b	3364 <cd_named_type_init+0x130>
    3278:	ldr	r3, [r4]
    327c:	ldr	ip, [pc, #256]	; 3384 <cd_named_type_init+0x150>
    3280:	str	ip, [r3, #40]	; 0x28
    3284:	ldr	r1, [r4, #24]
    3288:	cmp	r1, #0
    328c:	bne	32a4 <cd_named_type_init+0x70>
    3290:	ldr	r0, [pc, #244]	; 338c <cd_named_type_init+0x158>
    3294:	ldr	r1, [pc, #224]	; 337c <cd_named_type_init+0x148>
    3298:	movw	r2, #1889	; 0x761
    329c:	ldr	r3, [pc, #228]	; 3388 <cd_named_type_init+0x154>
    32a0:	bl	0 <__assert_fail>
    32a4:	ldr	r1, [r4, #24]
    32a8:	cmp	r1, #0
    32ac:	bne	32c4 <cd_named_type_init+0x90>
    32b0:	ldr	r0, [pc, #212]	; 338c <cd_named_type_init+0x158>
    32b4:	ldr	r1, [pc, #192]	; 337c <cd_named_type_init+0x148>
    32b8:	movw	r2, #710	; 0x2c6
    32bc:	ldr	r3, [pc, #180]	; 3378 <cd_named_type_init+0x144>
    32c0:	bl	0 <__assert_fail>
    32c4:	ldr	r0, [r4, #24]
    32c8:	mov	r1, r5
    32cc:	bl	0 <coda_product_class_has_named_type>
    32d0:	cmp	r0, #0
    32d4:	bne	330c <cd_named_type_init+0xd8>
    32d8:	ldr	r0, [r4, #16]
    32dc:	mov	r1, #1
    32e0:	ldr	r3, [r4, #24]
    32e4:	ldr	r2, [r4, #28]
    32e8:	str	r2, [sp]
    32ec:	mov	r2, r5
    32f0:	bl	7cfc <parse_entry>
    32f4:	cmp	r0, #0
    32f8:	beq	330c <cd_named_type_init+0xd8>
    32fc:	mov	r3, #0
    3300:	str	r3, [r4, #44]	; 0x2c
    3304:	mvn	r1, #0
    3308:	b	332c <cd_named_type_init+0xf8>
    330c:	ldr	r0, [r4, #24]
    3310:	mov	r1, r5
    3314:	bl	0 <coda_product_class_get_named_type>
    3318:	str	r0, [sp, #24]
    331c:	ldr	r1, [r0, #4]
    3320:	add	r3, r1, #1
    3324:	str	r3, [r0, #4]
    3328:	mov	r1, #0
    332c:	cmp	r1, #0
    3330:	beq	333c <cd_named_type_init+0x108>
    3334:	mvn	r0, #0
    3338:	b	3364 <cd_named_type_init+0x130>
    333c:	ldr	r1, [r4]
    3340:	ldr	r0, [sp, #24]
    3344:	ldr	r2, [r0]
    3348:	str	r2, [r1, #44]	; 0x2c
    334c:	ldr	r1, [r4]
    3350:	mov	r2, #1
    3354:	str	r2, [r1, #48]	; 0x30
    3358:	ldr	r1, [r4]
    335c:	str	r0, [r1, #8]
    3360:	mov	r0, #0
    3364:	ldr	r4, [sp, #16]
    3368:	ldr	r5, [sp, #20]
    336c:	ldr	lr, [sp, #8]
    3370:	add	sp, sp, #32
    3374:	bx	lr
    3378:	.word	0x000020b1
    337c:	.word	0x00001939
    3380:	.word	0x00000c10
    3384:	.word	0x00000000
    3388:	.word	0x00002120
    338c:	.word	0x0000199e

00003390 <cd_native_type_finalise>:
    3390:	mov	ip, sp
    3394:	sub	sp, sp, #16
    3398:	str	ip, [sp]
    339c:	str	lr, [sp, #4]
    33a0:	str	r4, [sp, #8]
    33a4:	mov	r4, r0
    33a8:	ldr	ip, [r4]
    33ac:	ldr	r0, [ip, #12]
    33b0:	cmp	r0, #0
    33b4:	bne	33d0 <cd_native_type_finalise+0x40>
    33b8:	movw	r0, #65136	; 0xfe70
    33bc:	movt	r0, #65535	; 0xffff
    33c0:	ldr	r1, [pc, #676]	; 366c <cd_native_type_finalise+0x2dc>
    33c4:	bl	0 <coda_set_error>
    33c8:	mvn	r0, #0
    33cc:	b	3650 <cd_native_type_finalise+0x2c0>
    33d0:	ldr	r1, [pc, #700]	; 3694 <cd_native_type_finalise+0x304>
    33d4:	bl	0 <strcmp>
    33d8:	cmp	r0, #0
    33dc:	beq	3638 <cd_native_type_finalise+0x2a8>
    33e0:	ldr	r1, [r4]
    33e4:	ldr	r0, [r1, #12]
    33e8:	ldr	r1, [pc, #652]	; 367c <cd_native_type_finalise+0x2ec>
    33ec:	bl	0 <strcmp>
    33f0:	cmp	r0, #0
    33f4:	beq	3620 <cd_native_type_finalise+0x290>
    33f8:	ldr	r1, [r4]
    33fc:	ldr	r0, [r1, #12]
    3400:	ldr	r1, [pc, #616]	; 3670 <cd_native_type_finalise+0x2e0>
    3404:	bl	0 <strcmp>
    3408:	cmp	r0, #0
    340c:	beq	3608 <cd_native_type_finalise+0x278>
    3410:	ldr	r1, [r4]
    3414:	ldr	r0, [r1, #12]
    3418:	ldr	r1, [pc, #600]	; 3678 <cd_native_type_finalise+0x2e8>
    341c:	bl	0 <strcmp>
    3420:	cmp	r0, #0
    3424:	beq	35f0 <cd_native_type_finalise+0x260>
    3428:	ldr	r2, [r4]
    342c:	ldr	r0, [r2, #12]
    3430:	ldr	r1, [pc, #560]	; 3668 <cd_native_type_finalise+0x2d8>
    3434:	bl	0 <strcmp>
    3438:	cmp	r0, #0
    343c:	beq	35d8 <cd_native_type_finalise+0x248>
    3440:	ldr	ip, [r4]
    3444:	ldr	r0, [ip, #12]
    3448:	ldr	r1, [pc, #560]	; 3680 <cd_native_type_finalise+0x2f0>
    344c:	bl	0 <strcmp>
    3450:	cmp	r0, #0
    3454:	beq	35c0 <cd_native_type_finalise+0x230>
    3458:	ldr	r1, [r4]
    345c:	ldr	r0, [r1, #12]
    3460:	ldr	r1, [pc, #524]	; 3674 <cd_native_type_finalise+0x2e4>
    3464:	bl	0 <strcmp>
    3468:	cmp	r0, #0
    346c:	beq	35a8 <cd_native_type_finalise+0x218>
    3470:	ldr	r1, [r4]
    3474:	ldr	r0, [r1, #12]
    3478:	ldr	r1, [pc, #528]	; 3690 <cd_native_type_finalise+0x300>
    347c:	bl	0 <strcmp>
    3480:	cmp	r0, #0
    3484:	beq	3590 <cd_native_type_finalise+0x200>
    3488:	ldr	r2, [r4]
    348c:	ldr	r0, [r2, #12]
    3490:	ldr	r1, [pc, #460]	; 3664 <cd_native_type_finalise+0x2d4>
    3494:	bl	0 <strcmp>
    3498:	cmp	r0, #0
    349c:	beq	3578 <cd_native_type_finalise+0x1e8>
    34a0:	ldr	ip, [r4]
    34a4:	ldr	r0, [ip, #12]
    34a8:	ldr	r1, [pc, #468]	; 3684 <cd_native_type_finalise+0x2f4>
    34ac:	bl	0 <strcmp>
    34b0:	cmp	r0, #0
    34b4:	beq	3560 <cd_native_type_finalise+0x1d0>
    34b8:	ldr	r0, [r4]
    34bc:	ldr	r0, [r0, #12]
    34c0:	ldr	r1, [pc, #452]	; 368c <cd_native_type_finalise+0x2fc>
    34c4:	bl	0 <strcmp>
    34c8:	cmp	r0, #0
    34cc:	beq	3548 <cd_native_type_finalise+0x1b8>
    34d0:	ldr	r2, [r4]
    34d4:	ldr	r0, [r2, #12]
    34d8:	ldr	r1, [pc, #384]	; 3660 <cd_native_type_finalise+0x2d0>
    34dc:	bl	0 <strcmp>
    34e0:	cmp	r0, #0
    34e4:	beq	3530 <cd_native_type_finalise+0x1a0>
    34e8:	ldr	ip, [r4]
    34ec:	ldr	r0, [ip, #12]
    34f0:	ldr	r1, [pc, #400]	; 3688 <cd_native_type_finalise+0x2f8>
    34f4:	bl	0 <strcmp>
    34f8:	cmp	r0, #0
    34fc:	beq	3518 <cd_native_type_finalise+0x188>
    3500:	movw	r0, #65136	; 0xfe70
    3504:	movt	r0, #65535	; 0xffff
    3508:	ldr	r1, [pc, #348]	; 366c <cd_native_type_finalise+0x2dc>
    350c:	bl	0 <coda_set_error>
    3510:	mvn	r0, #0
    3514:	b	3650 <cd_native_type_finalise+0x2c0>
    3518:	ldr	r2, [r4]
    351c:	mov	r1, #0
    3520:	mov	r0, #12
    3524:	str	r0, [r2, #16]
    3528:	str	r1, [r2, #20]
    352c:	b	364c <cd_native_type_finalise+0x2bc>
    3530:	ldr	ip, [r4]
    3534:	mov	r3, #0
    3538:	mov	r2, #11
    353c:	str	r2, [ip, #16]
    3540:	str	r3, [ip, #20]
    3544:	b	364c <cd_native_type_finalise+0x2bc>
    3548:	ldr	r3, [r4]
    354c:	mov	r1, #0
    3550:	mov	r0, #10
    3554:	str	r0, [r3, #16]
    3558:	str	r1, [r3, #20]
    355c:	b	364c <cd_native_type_finalise+0x2bc>
    3560:	ldr	r3, [r4]
    3564:	mov	r0, #0
    3568:	mov	ip, #9
    356c:	str	ip, [r3, #16]
    3570:	str	r0, [r3, #20]
    3574:	b	364c <cd_native_type_finalise+0x2bc>
    3578:	ldr	r3, [r4]
    357c:	mov	r2, #0
    3580:	mov	r1, #8
    3584:	str	r1, [r3, #16]
    3588:	str	r2, [r3, #20]
    358c:	b	364c <cd_native_type_finalise+0x2bc>
    3590:	ldr	r1, [r4]
    3594:	mov	r0, #0
    3598:	mov	ip, #7
    359c:	str	ip, [r1, #16]
    35a0:	str	r0, [r1, #20]
    35a4:	b	364c <cd_native_type_finalise+0x2bc>
    35a8:	ldr	r1, [r4]
    35ac:	mov	ip, #0
    35b0:	mov	r3, #5
    35b4:	str	r3, [r1, #16]
    35b8:	str	ip, [r1, #20]
    35bc:	b	364c <cd_native_type_finalise+0x2bc>
    35c0:	ldr	r0, [r4]
    35c4:	mov	ip, #0
    35c8:	mov	r3, #3
    35cc:	str	r3, [r0, #16]
    35d0:	str	ip, [r0, #20]
    35d4:	b	364c <cd_native_type_finalise+0x2bc>
    35d8:	ldr	ip, [r4]
    35dc:	mov	r3, #0
    35e0:	mov	r2, #1
    35e4:	str	r2, [ip, #16]
    35e8:	str	r3, [ip, #20]
    35ec:	b	364c <cd_native_type_finalise+0x2bc>
    35f0:	ldr	r2, [r4]
    35f4:	mov	r1, #0
    35f8:	mov	r0, #6
    35fc:	str	r0, [r2, #16]
    3600:	str	r1, [r2, #20]
    3604:	b	364c <cd_native_type_finalise+0x2bc>
    3608:	ldr	ip, [r4]
    360c:	mov	r3, #0
    3610:	mov	r2, #4
    3614:	str	r2, [ip, #16]
    3618:	str	r3, [ip, #20]
    361c:	b	364c <cd_native_type_finalise+0x2bc>
    3620:	ldr	ip, [r4]
    3624:	mov	r2, #0
    3628:	mov	r1, #2
    362c:	str	r1, [ip, #16]
    3630:	str	r2, [ip, #20]
    3634:	b	364c <cd_native_type_finalise+0x2bc>
    3638:	ldr	r1, [r4]
    363c:	mov	r0, #0
    3640:	mov	ip, #0
    3644:	str	ip, [r1, #16]
    3648:	str	r0, [r1, #20]
    364c:	mov	r0, #0
    3650:	ldr	r4, [sp, #8]
    3654:	ldr	lr, [sp, #4]
    3658:	add	sp, sp, #16
    365c:	bx	lr
    3660:	.word	0x00000a34
    3664:	.word	0x00000a2e
    3668:	.word	0x00001e1d
    366c:	.word	0x00000483
    3670:	.word	0x00001651
    3674:	.word	0x000011c1
    3678:	.word	0x00001e17
    367c:	.word	0x00000d30
    3680:	.word	0x00001a9f
    3684:	.word	0x00001b3e
    3688:	.word	0x00000a28
    368c:	.word	0x00001c3d
    3690:	.word	0x00001e2f
    3694:	.word	0x00001a9a

00003698 <cd_native_type_init>:
    3698:	mov	ip, sp
    369c:	sub	sp, sp, #8
    36a0:	str	ip, [sp]
    36a4:	str	lr, [sp, #4]
    36a8:	ldr	r3, [r0]
    36ac:	mov	r2, #1
    36b0:	str	r2, [r3, #32]
    36b4:	ldr	r1, [r0]
    36b8:	ldr	r0, [pc, #16]	; 36d0 <cd_native_type_init+0x38>
    36bc:	str	r0, [r1, #36]	; 0x24
    36c0:	mov	r0, #0
    36c4:	ldr	lr, [sp, #4]
    36c8:	add	sp, sp, #8
    36cc:	bx	lr
    36d0:	.word	0x00000000

000036d4 <cd_mapping_init>:
    36d4:	mov	ip, sp
    36d8:	sub	sp, sp, #40	; 0x28
    36dc:	str	ip, [sp]
    36e0:	str	lr, [sp, #4]
    36e4:	str	r4, [sp, #8]
    36e8:	str	r5, [sp, #12]
    36ec:	str	r6, [sp, #16]
    36f0:	mov	r5, r1
    36f4:	mov	r6, r0
    36f8:	ldr	r1, [pc, #516]	; 3904 <cd_mapping_init+0x230>
    36fc:	ldr	ip, [r6]
    3700:	ldr	r2, [ip]
    3704:	mov	r0, r5
    3708:	bl	54c <get_mandatory_attribute_value>
    370c:	mov	r4, r0
    3710:	cmp	r4, #0
    3714:	bne	3720 <cd_mapping_init+0x4c>
    3718:	mvn	r0, #0
    371c:	b	38e8 <cd_mapping_init+0x214>
    3720:	ldr	r1, [pc, #480]	; 3908 <cd_mapping_init+0x234>
    3724:	ldr	r2, [r6]
    3728:	ldr	r2, [r2]
    372c:	mov	r0, r5
    3730:	bl	54c <get_mandatory_attribute_value>
    3734:	mov	r5, r0
    3738:	cmp	r5, #0
    373c:	bne	3748 <cd_mapping_init+0x74>
    3740:	mvn	r0, #0
    3744:	b	38e8 <cd_mapping_init+0x214>
    3748:	ldr	r1, [r6]
    374c:	ldr	r0, [r1, #396]	; 0x18c
    3750:	ldr	r0, [r0]
    3754:	cmp	r0, #20
    3758:	beq	3868 <cd_mapping_init+0x194>
    375c:	cmp	r0, #17
    3760:	beq	378c <cd_mapping_init+0xb8>
    3764:	cmp	r0, #38	; 0x26
    3768:	beq	378c <cd_mapping_init+0xb8>
    376c:	ldr	r0, [pc, #412]	; 3910 <cd_mapping_init+0x23c>
    3770:	ldr	r1, [pc, #392]	; 3900 <cd_mapping_init+0x22c>
    3774:	movw	r2, #2040	; 0x7f8
    3778:	ldr	r3, [pc, #432]	; 3930 <cd_mapping_init+0x25c>
    377c:	bl	0 <__assert_fail>
    3780:	mov	r0, #1
    3784:	bl	0 <exit>
    3788:	b	38e4 <cd_mapping_init+0x210>
    378c:	ldr	r1, [pc, #404]	; 3928 <cd_mapping_init+0x254>
    3790:	mov	r0, r5
    3794:	bl	0 <strcasecmp>
    3798:	cmp	r0, #0
    379c:	beq	3828 <cd_mapping_init+0x154>
    37a0:	ldr	r1, [pc, #376]	; 3920 <cd_mapping_init+0x24c>
    37a4:	mov	r0, r5
    37a8:	bl	0 <strcasecmp>
    37ac:	cmp	r0, #0
    37b0:	beq	381c <cd_mapping_init+0x148>
    37b4:	ldr	r1, [pc, #368]	; 392c <cd_mapping_init+0x258>
    37b8:	mov	r0, r5
    37bc:	bl	0 <strcasecmp>
    37c0:	cmp	r0, #0
    37c4:	beq	381c <cd_mapping_init+0x148>
    37c8:	ldr	r1, [pc, #332]	; 391c <cd_mapping_init+0x248>
    37cc:	mov	r0, r5
    37d0:	bl	0 <strcasecmp>
    37d4:	cmp	r0, #0
    37d8:	beq	3810 <cd_mapping_init+0x13c>
    37dc:	ldr	r1, [pc, #304]	; 3914 <cd_mapping_init+0x240>
    37e0:	add	r2, sp, #32
    37e4:	mov	r0, r5
    37e8:	bl	0 <sscanf>
    37ec:	cmp	r0, #1
    37f0:	beq	3830 <cd_mapping_init+0x15c>
    37f4:	movw	r0, #65136	; 0xfe70
    37f8:	movt	r0, #65535	; 0xffff
    37fc:	ldr	r1, [pc, #264]	; 390c <cd_mapping_init+0x238>
    3800:	mov	r2, r5
    3804:	bl	0 <coda_set_error>
    3808:	mvn	r0, #0
    380c:	b	38e8 <cd_mapping_init+0x214>
    3810:	bl	0 <coda_MinInf>
    3814:	vstr	d0, [sp, #32]
    3818:	b	3830 <cd_mapping_init+0x15c>
    381c:	bl	0 <coda_PlusInf>
    3820:	vstr	d0, [sp, #32]
    3824:	b	3830 <cd_mapping_init+0x15c>
    3828:	bl	0 <coda_NaN>
    382c:	vstr	d0, [sp, #32]
    3830:	ldr	r3, [r6]
    3834:	ldr	ip, [pc, #220]	; 3918 <cd_mapping_init+0x244>
    3838:	str	ip, [r3, #40]	; 0x28
    383c:	vldr	d0, [sp, #32]
    3840:	mov	r0, r4
    3844:	bl	0 <coda_ascii_float_mapping_new>
    3848:	ldr	r1, [r6]
    384c:	str	r0, [r1, #8]
    3850:	ldr	r0, [r6]
    3854:	ldr	r0, [r0, #8]
    3858:	cmp	r0, #0
    385c:	bne	38e4 <cd_mapping_init+0x210>
    3860:	mvn	r0, #0
    3864:	b	38e8 <cd_mapping_init+0x214>
    3868:	mov	r0, r5
    386c:	bl	0 <strlen>
    3870:	mov	r1, r0
    3874:	add	r2, sp, #24
    3878:	mov	r3, #0
    387c:	mov	r0, r5
    3880:	bl	0 <coda_ascii_parse_int64>
    3884:	cmp	r0, #0
    3888:	bge	38a8 <cd_mapping_init+0x1d4>
    388c:	movw	r0, #65136	; 0xfe70
    3890:	movt	r0, #65535	; 0xffff
    3894:	ldr	r1, [pc, #152]	; 3934 <cd_mapping_init+0x260>
    3898:	mov	r2, r5
    389c:	bl	0 <coda_set_error>
    38a0:	mvn	r0, #0
    38a4:	b	38e8 <cd_mapping_init+0x214>
    38a8:	ldr	ip, [r6]
    38ac:	ldr	r3, [pc, #112]	; 3924 <cd_mapping_init+0x250>
    38b0:	str	r3, [ip, #40]	; 0x28
    38b4:	ldr	r2, [sp, #24]
    38b8:	ldr	r3, [sp, #28]
    38bc:	mov	r0, r4
    38c0:	bl	0 <coda_ascii_integer_mapping_new>
    38c4:	ldr	ip, [r6]
    38c8:	str	r0, [ip, #8]
    38cc:	ldr	r0, [r6]
    38d0:	ldr	r0, [r0, #8]
    38d4:	cmp	r0, #0
    38d8:	bne	38e4 <cd_mapping_init+0x210>
    38dc:	mvn	r0, #0
    38e0:	b	38e8 <cd_mapping_init+0x214>
    38e4:	mov	r0, #0
    38e8:	ldr	r4, [sp, #8]
    38ec:	ldr	r5, [sp, #12]
    38f0:	ldr	r6, [sp, #16]
    38f4:	ldr	lr, [sp, #4]
    38f8:	add	sp, sp, #40	; 0x28
    38fc:	bx	lr
    3900:	.word	0x00001939
    3904:	.word	0x00000a34
    3908:	.word	0x00001e23
    390c:	.word	0x00000135
    3910:	.word	0x00001cc5
    3914:	.word	0x0000174d
    3918:	.word	0x00000000
    391c:	.word	0x00000ee9
    3920:	.word	0x00000232
    3924:	.word	0x00000000
    3928:	.word	0x00000c13
    392c:	.word	0x00001854
    3930:	.word	0x00002133
    3934:	.word	0x000013c7

00003938 <cd_match_data_finalise>:
    3938:	mov	ip, sp
    393c:	sub	sp, sp, #72	; 0x48
    3940:	str	ip, [sp, #8]
    3944:	str	lr, [sp, #12]
    3948:	str	r4, [sp, #16]
    394c:	str	r5, [sp, #20]
    3950:	str	r6, [sp, #24]
    3954:	str	r7, [sp, #28]
    3958:	str	r8, [sp, #32]
    395c:	mov	r6, r0
    3960:	ldr	r0, [r6]
    3964:	ldr	r5, [r0, #8]
    3968:	ldr	r0, [r0, #12]
    396c:	bl	14c <escaped_string_length>
    3970:	mov	r7, r0
    3974:	cmp	r7, #0
    3978:	bge	3994 <cd_match_data_finalise+0x5c>
    397c:	movw	r0, #65136	; 0xfe70
    3980:	movt	r0, #65535	; 0xffff
    3984:	ldr	r1, [pc, #1708]	; 4038 <cd_match_data_finalise+0x700>
    3988:	bl	0 <coda_set_error>
    398c:	mvn	r0, #0
    3990:	b	4010 <cd_match_data_finalise+0x6d8>
    3994:	ldr	r1, [r5, #4]
    3998:	cmp	r1, #0
    399c:	beq	3b70 <cd_match_data_finalise+0x238>
    39a0:	ldr	r1, [r1]
    39a4:	cmp	r1, #20
    39a8:	bne	400c <cd_match_data_finalise+0x6d4>
    39ac:	cmp	r7, #0
    39b0:	bne	39cc <cd_match_data_finalise+0x94>
    39b4:	movw	r0, #65136	; 0xfe70
    39b8:	movt	r0, #65535	; 0xffff
    39bc:	ldr	r1, [pc, #1664]	; 4044 <cd_match_data_finalise+0x70c>
    39c0:	bl	0 <coda_set_error>
    39c4:	mvn	r0, #0
    39c8:	b	4010 <cd_match_data_finalise+0x6d8>
    39cc:	mov	r0, #38	; 0x26
    39d0:	mov	r1, #0
    39d4:	mov	r2, #0
    39d8:	mov	r3, #0
    39dc:	mov	ip, #0
    39e0:	mov	r8, #0
    39e4:	str	r8, [sp, #4]
    39e8:	str	ip, [sp]
    39ec:	bl	0 <coda_expression_new>
    39f0:	mov	r4, r0
    39f4:	cmp	r4, #0
    39f8:	bne	3a04 <cd_match_data_finalise+0xcc>
    39fc:	mvn	r0, #0
    3a00:	b	4010 <cd_match_data_finalise+0x6d8>
    3a04:	asr	r1, r7, #31
    3a08:	mov	r0, r7
    3a0c:	add	r2, sp, #40	; 0x28
    3a10:	bl	0 <coda_str64>
    3a14:	add	r0, sp, #40	; 0x28
    3a18:	bl	0 <strdup>
    3a1c:	mov	r1, r0
    3a20:	cmp	r1, #0
    3a24:	bne	3a4c <cd_match_data_finalise+0x114>
    3a28:	mvn	r0, #0
    3a2c:	ldr	r1, [pc, #1536]	; 4034 <cd_match_data_finalise+0x6fc>
    3a30:	ldr	r2, [pc, #1528]	; 4030 <cd_match_data_finalise+0x6f8>
    3a34:	movw	r3, #2184	; 0x888
    3a38:	bl	0 <coda_set_error>
    3a3c:	mov	r0, r4
    3a40:	bl	0 <coda_expression_delete>
    3a44:	mvn	r0, #0
    3a48:	b	4010 <cd_match_data_finalise+0x6d8>
    3a4c:	mov	r0, #20
    3a50:	mov	r2, #0
    3a54:	mov	r3, #0
    3a58:	mov	r8, #0
    3a5c:	mov	ip, #0
    3a60:	str	ip, [sp, #4]
    3a64:	str	r8, [sp]
    3a68:	bl	0 <coda_expression_new>
    3a6c:	mov	ip, r0
    3a70:	cmp	ip, #0
    3a74:	bne	3a88 <cd_match_data_finalise+0x150>
    3a78:	mov	r0, r4
    3a7c:	bl	0 <coda_expression_delete>
    3a80:	mvn	r0, #0
    3a84:	b	4010 <cd_match_data_finalise+0x6d8>
    3a88:	mov	r0, #16
    3a8c:	mov	r1, #0
    3a90:	ldr	r3, [r5, #4]
    3a94:	mov	r2, #0
    3a98:	str	r2, [sp, #4]
    3a9c:	str	ip, [sp]
    3aa0:	mov	r2, r4
    3aa4:	bl	0 <coda_expression_new>
    3aa8:	mov	r4, r0
    3aac:	mov	r1, #0
    3ab0:	str	r1, [r5, #4]
    3ab4:	cmp	r4, #0
    3ab8:	bne	3ac4 <cd_match_data_finalise+0x18c>
    3abc:	mvn	r0, #0
    3ac0:	b	4010 <cd_match_data_finalise+0x6d8>
    3ac4:	ldr	r0, [r6]
    3ac8:	ldr	r0, [r0, #12]
    3acc:	bl	0 <strdup>
    3ad0:	mov	r1, r0
    3ad4:	cmp	r1, #0
    3ad8:	bne	3b00 <cd_match_data_finalise+0x1c8>
    3adc:	mvn	r0, #0
    3ae0:	ldr	r1, [pc, #1356]	; 4034 <cd_match_data_finalise+0x6fc>
    3ae4:	ldr	r2, [pc, #1348]	; 4030 <cd_match_data_finalise+0x6f8>
    3ae8:	movw	r3, #2204	; 0x89c
    3aec:	bl	0 <coda_set_error>
    3af0:	mov	r0, r4
    3af4:	bl	0 <coda_expression_delete>
    3af8:	mvn	r0, #0
    3afc:	b	4010 <cd_match_data_finalise+0x6d8>
    3b00:	mov	r0, #22
    3b04:	mov	r2, #0
    3b08:	mov	r3, #0
    3b0c:	mov	r7, #0
    3b10:	mov	r6, #0
    3b14:	str	r6, [sp, #4]
    3b18:	str	r7, [sp]
    3b1c:	bl	0 <coda_expression_new>
    3b20:	mov	r3, r0
    3b24:	cmp	r3, #0
    3b28:	bne	3b3c <cd_match_data_finalise+0x204>
    3b2c:	mov	r0, r4
    3b30:	bl	0 <coda_expression_delete>
    3b34:	mvn	r0, #0
    3b38:	b	4010 <cd_match_data_finalise+0x6d8>
    3b3c:	mov	r0, #25
    3b40:	mov	r1, #0
    3b44:	mov	ip, #0
    3b48:	mov	r2, #0
    3b4c:	str	r2, [sp, #4]
    3b50:	str	ip, [sp]
    3b54:	mov	r2, r4
    3b58:	bl	0 <coda_expression_new>
    3b5c:	str	r0, [r5, #4]
    3b60:	cmp	r0, #0
    3b64:	bne	400c <cd_match_data_finalise+0x6d4>
    3b68:	mvn	r0, #0
    3b6c:	b	4010 <cd_match_data_finalise+0x6d8>
    3b70:	ldr	r2, [r5]
    3b74:	cmp	r2, #0
    3b78:	bne	3ec0 <cd_match_data_finalise+0x588>
    3b7c:	cmp	r7, #0
    3b80:	bne	3b9c <cd_match_data_finalise+0x264>
    3b84:	movw	r0, #65136	; 0xfe70
    3b88:	movt	r0, #65535	; 0xffff
    3b8c:	ldr	r1, [pc, #1200]	; 4044 <cd_match_data_finalise+0x70c>
    3b90:	bl	0 <coda_set_error>
    3b94:	mvn	r0, #0
    3b98:	b	4010 <cd_match_data_finalise+0x6d8>
    3b9c:	mov	r0, #38	; 0x26
    3ba0:	mov	r1, #0
    3ba4:	mov	r2, #0
    3ba8:	mov	r3, #0
    3bac:	mov	r4, #0
    3bb0:	mov	ip, #0
    3bb4:	str	ip, [sp, #4]
    3bb8:	str	r4, [sp]
    3bbc:	bl	0 <coda_expression_new>
    3bc0:	mov	r4, r0
    3bc4:	cmp	r4, #0
    3bc8:	bne	3bd4 <cd_match_data_finalise+0x29c>
    3bcc:	mvn	r0, #0
    3bd0:	b	4010 <cd_match_data_finalise+0x6d8>
    3bd4:	ldr	r0, [pc, #1124]	; 4040 <cd_match_data_finalise+0x708>
    3bd8:	bl	0 <strdup>
    3bdc:	mov	r1, #20
    3be0:	mov	r2, #0
    3be4:	mov	r3, #0
    3be8:	mov	r8, #0
    3bec:	mov	ip, #0
    3bf0:	str	ip, [sp, #4]
    3bf4:	str	r8, [sp]
    3bf8:	mov	r7, r0
    3bfc:	mov	r0, r1
    3c00:	mov	r1, r7
    3c04:	bl	0 <coda_expression_new>
    3c08:	mov	r3, r0
    3c0c:	cmp	r3, #0
    3c10:	bne	3c24 <cd_match_data_finalise+0x2ec>
    3c14:	mov	r0, r4
    3c18:	bl	0 <coda_expression_delete>
    3c1c:	mvn	r0, #0
    3c20:	b	4010 <cd_match_data_finalise+0x6d8>
    3c24:	mov	r0, #16
    3c28:	mov	r1, #0
    3c2c:	mov	r7, #0
    3c30:	mov	r2, #0
    3c34:	str	r2, [sp, #4]
    3c38:	str	r7, [sp]
    3c3c:	mov	r2, r4
    3c40:	bl	0 <coda_expression_new>
    3c44:	mov	r7, r0
    3c48:	cmp	r7, #0
    3c4c:	bne	3c58 <cd_match_data_finalise+0x320>
    3c50:	mvn	r0, #0
    3c54:	b	4010 <cd_match_data_finalise+0x6d8>
    3c58:	ldr	r3, [r6]
    3c5c:	ldr	r4, [r3, #12]
    3c60:	mov	r0, r4
    3c64:	bl	0 <strlen>
    3c68:	mov	r6, r0
    3c6c:	mov	r8, #0
    3c70:	mov	ip, #0
    3c74:	cmp	ip, r6
    3c78:	bge	3d14 <cd_match_data_finalise+0x3dc>
    3c7c:	ldrb	r0, [r4, ip]
    3c80:	cmp	r0, #63	; 0x3f
    3c84:	bcs	3cc8 <cd_match_data_finalise+0x390>
    3c88:	cmp	r0, #42	; 0x2a
    3c8c:	bcs	3cac <cd_match_data_finalise+0x374>
    3c90:	cmp	r0, #36	; 0x24
    3c94:	beq	3d04 <cd_match_data_finalise+0x3cc>
    3c98:	cmp	r0, #40	; 0x28
    3c9c:	beq	3d04 <cd_match_data_finalise+0x3cc>
    3ca0:	cmp	r0, #41	; 0x29
    3ca4:	beq	3d04 <cd_match_data_finalise+0x3cc>
    3ca8:	b	3d08 <cd_match_data_finalise+0x3d0>
    3cac:	cmp	r0, #42	; 0x2a
    3cb0:	beq	3d04 <cd_match_data_finalise+0x3cc>
    3cb4:	cmp	r0, #43	; 0x2b
    3cb8:	beq	3d04 <cd_match_data_finalise+0x3cc>
    3cbc:	cmp	r0, #46	; 0x2e
    3cc0:	beq	3d04 <cd_match_data_finalise+0x3cc>
    3cc4:	b	3d08 <cd_match_data_finalise+0x3d0>
    3cc8:	cmp	r0, #94	; 0x5e
    3ccc:	bcs	3cec <cd_match_data_finalise+0x3b4>
    3cd0:	cmp	r0, #63	; 0x3f
    3cd4:	beq	3d04 <cd_match_data_finalise+0x3cc>
    3cd8:	cmp	r0, #91	; 0x5b
    3cdc:	beq	3d04 <cd_match_data_finalise+0x3cc>
    3ce0:	cmp	r0, #92	; 0x5c
    3ce4:	beq	3d04 <cd_match_data_finalise+0x3cc>
    3ce8:	b	3d08 <cd_match_data_finalise+0x3d0>
    3cec:	cmp	r0, #94	; 0x5e
    3cf0:	beq	3d04 <cd_match_data_finalise+0x3cc>
    3cf4:	cmp	r0, #123	; 0x7b
    3cf8:	beq	3d04 <cd_match_data_finalise+0x3cc>
    3cfc:	cmp	r0, #124	; 0x7c
    3d00:	bne	3d08 <cd_match_data_finalise+0x3d0>
    3d04:	add	r8, r8, #1
    3d08:	add	r8, r8, #1
    3d0c:	add	ip, ip, #1
    3d10:	b	3c74 <cd_match_data_finalise+0x33c>
    3d14:	add	r0, r8, #1
    3d18:	bl	0 <malloc>
    3d1c:	cmp	r0, #0
    3d20:	bne	3d48 <cd_match_data_finalise+0x410>
    3d24:	mvn	r0, #0
    3d28:	ldr	r1, [pc, #780]	; 403c <cd_match_data_finalise+0x704>
    3d2c:	add	r2, r8, #1
    3d30:	ldr	r3, [pc, #760]	; 4030 <cd_match_data_finalise+0x6f8>
    3d34:	movw	r4, #339	; 0x153
    3d38:	str	r4, [sp]
    3d3c:	bl	0 <coda_set_error>
    3d40:	mov	r0, #0
    3d44:	b	3e10 <cd_match_data_finalise+0x4d8>
    3d48:	mov	ip, #0
    3d4c:	mov	r8, #0
    3d50:	cmp	r8, r6
    3d54:	bge	3e08 <cd_match_data_finalise+0x4d0>
    3d58:	ldrb	r2, [r4, r8]
    3d5c:	cmp	r2, #63	; 0x3f
    3d60:	bcs	3da4 <cd_match_data_finalise+0x46c>
    3d64:	cmp	r2, #42	; 0x2a
    3d68:	bcs	3d88 <cd_match_data_finalise+0x450>
    3d6c:	cmp	r2, #36	; 0x24
    3d70:	beq	3de0 <cd_match_data_finalise+0x4a8>
    3d74:	cmp	r2, #40	; 0x28
    3d78:	beq	3de0 <cd_match_data_finalise+0x4a8>
    3d7c:	cmp	r2, #41	; 0x29
    3d80:	beq	3de0 <cd_match_data_finalise+0x4a8>
    3d84:	b	3df0 <cd_match_data_finalise+0x4b8>
    3d88:	cmp	r2, #42	; 0x2a
    3d8c:	beq	3de0 <cd_match_data_finalise+0x4a8>
    3d90:	cmp	r2, #43	; 0x2b
    3d94:	beq	3de0 <cd_match_data_finalise+0x4a8>
    3d98:	cmp	r2, #46	; 0x2e
    3d9c:	beq	3de0 <cd_match_data_finalise+0x4a8>
    3da0:	b	3df0 <cd_match_data_finalise+0x4b8>
    3da4:	cmp	r2, #94	; 0x5e
    3da8:	bcs	3dc8 <cd_match_data_finalise+0x490>
    3dac:	cmp	r2, #63	; 0x3f
    3db0:	beq	3de0 <cd_match_data_finalise+0x4a8>
    3db4:	cmp	r2, #91	; 0x5b
    3db8:	beq	3de0 <cd_match_data_finalise+0x4a8>
    3dbc:	cmp	r2, #92	; 0x5c
    3dc0:	beq	3de0 <cd_match_data_finalise+0x4a8>
    3dc4:	b	3df0 <cd_match_data_finalise+0x4b8>
    3dc8:	cmp	r2, #94	; 0x5e
    3dcc:	beq	3de0 <cd_match_data_finalise+0x4a8>
    3dd0:	cmp	r2, #123	; 0x7b
    3dd4:	beq	3de0 <cd_match_data_finalise+0x4a8>
    3dd8:	cmp	r2, #124	; 0x7c
    3ddc:	bne	3df0 <cd_match_data_finalise+0x4b8>
    3de0:	mov	r1, ip
    3de4:	add	ip, r1, #1
    3de8:	mov	r2, #92	; 0x5c
    3dec:	strb	r2, [r0, r1]
    3df0:	mov	r3, ip
    3df4:	add	ip, r3, #1
    3df8:	ldrb	r2, [r4, r8]
    3dfc:	strb	r2, [r0, r3]
    3e00:	add	r8, r8, #1
    3e04:	b	3d50 <cd_match_data_finalise+0x418>
    3e08:	mov	r1, #0
    3e0c:	strb	r1, [r0, ip]
    3e10:	mov	r1, r0
    3e14:	cmp	r1, #0
    3e18:	bne	3e2c <cd_match_data_finalise+0x4f4>
    3e1c:	mov	r0, r7
    3e20:	bl	0 <coda_expression_delete>
    3e24:	mvn	r0, #0
    3e28:	b	4010 <cd_match_data_finalise+0x6d8>
    3e2c:	mov	r0, #21
    3e30:	mov	r2, #0
    3e34:	mov	r3, #0
    3e38:	mov	r4, #0
    3e3c:	mov	ip, #0
    3e40:	str	ip, [sp, #4]
    3e44:	str	r4, [sp]
    3e48:	bl	0 <coda_expression_new>
    3e4c:	mov	r2, r0
    3e50:	cmp	r2, #0
    3e54:	bne	3e68 <cd_match_data_finalise+0x530>
    3e58:	mov	r0, r7
    3e5c:	bl	0 <coda_expression_delete>
    3e60:	mvn	r0, #0
    3e64:	b	4010 <cd_match_data_finalise+0x6d8>
    3e68:	mov	r0, #71	; 0x47
    3e6c:	mov	r1, #0
    3e70:	mov	r3, #0
    3e74:	mov	r4, #0
    3e78:	str	r4, [sp, #4]
    3e7c:	str	r3, [sp]
    3e80:	mov	r3, r7
    3e84:	bl	0 <coda_expression_new>
    3e88:	mov	r4, r0
    3e8c:	cmp	r4, #0
    3e90:	bne	3e9c <cd_match_data_finalise+0x564>
    3e94:	mvn	r0, #0
    3e98:	b	4010 <cd_match_data_finalise+0x6d8>
    3e9c:	mov	r1, r4
    3ea0:	mov	r0, r5
    3ea4:	bl	0 <coda_detection_rule_entry_set_expression>
    3ea8:	cmp	r0, #0
    3eac:	beq	400c <cd_match_data_finalise+0x6d4>
    3eb0:	mov	r0, r4
    3eb4:	bl	0 <coda_expression_delete>
    3eb8:	mvn	r0, #0
    3ebc:	b	4010 <cd_match_data_finalise+0x6d8>
    3ec0:	cmp	r7, #0
    3ec4:	bne	3ed0 <cd_match_data_finalise+0x598>
    3ec8:	mov	r0, #0
    3ecc:	b	4010 <cd_match_data_finalise+0x6d8>
    3ed0:	mov	r0, #36	; 0x24
    3ed4:	mov	r1, #0
    3ed8:	mov	r2, #0
    3edc:	mov	r3, #0
    3ee0:	mov	ip, #0
    3ee4:	mov	r4, #0
    3ee8:	str	r4, [sp, #4]
    3eec:	str	ip, [sp]
    3ef0:	bl	0 <coda_expression_new>
    3ef4:	mov	r2, r0
    3ef8:	cmp	r2, #0
    3efc:	bne	3f08 <cd_match_data_finalise+0x5d0>
    3f00:	mvn	r0, #0
    3f04:	b	4010 <cd_match_data_finalise+0x6d8>
    3f08:	mov	r0, #75	; 0x4b
    3f0c:	mov	r1, #0
    3f10:	mov	r3, #0
    3f14:	mov	ip, #0
    3f18:	mov	r7, #0
    3f1c:	str	r7, [sp, #4]
    3f20:	str	ip, [sp]
    3f24:	bl	0 <coda_expression_new>
    3f28:	mov	r4, r0
    3f2c:	cmp	r4, #0
    3f30:	bne	3f3c <cd_match_data_finalise+0x604>
    3f34:	mvn	r0, #0
    3f38:	b	4010 <cd_match_data_finalise+0x6d8>
    3f3c:	ldr	r1, [r6]
    3f40:	ldr	r0, [r1, #12]
    3f44:	bl	0 <strdup>
    3f48:	mov	r1, r0
    3f4c:	cmp	r1, #0
    3f50:	bne	3f78 <cd_match_data_finalise+0x640>
    3f54:	mvn	r0, #0
    3f58:	ldr	r1, [pc, #212]	; 4034 <cd_match_data_finalise+0x6fc>
    3f5c:	ldr	r2, [pc, #204]	; 4030 <cd_match_data_finalise+0x6f8>
    3f60:	movw	r3, #2090	; 0x82a
    3f64:	bl	0 <coda_set_error>
    3f68:	mov	r0, r4
    3f6c:	bl	0 <coda_expression_delete>
    3f70:	mvn	r0, #0
    3f74:	b	4010 <cd_match_data_finalise+0x6d8>
    3f78:	mov	r0, #22
    3f7c:	mov	r2, #0
    3f80:	mov	r3, #0
    3f84:	mov	r6, #0
    3f88:	mov	r7, #0
    3f8c:	str	r7, [sp, #4]
    3f90:	str	r6, [sp]
    3f94:	bl	0 <coda_expression_new>
    3f98:	mov	r3, r0
    3f9c:	cmp	r3, #0
    3fa0:	bne	3fb4 <cd_match_data_finalise+0x67c>
    3fa4:	mov	r0, r4
    3fa8:	bl	0 <coda_expression_delete>
    3fac:	mvn	r0, #0
    3fb0:	b	4010 <cd_match_data_finalise+0x6d8>
    3fb4:	mov	r0, #25
    3fb8:	mov	r1, #0
    3fbc:	mov	r2, #0
    3fc0:	mov	ip, #0
    3fc4:	str	ip, [sp, #4]
    3fc8:	str	r2, [sp]
    3fcc:	mov	r2, r4
    3fd0:	bl	0 <coda_expression_new>
    3fd4:	mov	r4, r0
    3fd8:	cmp	r4, #0
    3fdc:	bne	3fe8 <cd_match_data_finalise+0x6b0>
    3fe0:	mvn	r0, #0
    3fe4:	b	4010 <cd_match_data_finalise+0x6d8>
    3fe8:	mov	r1, r4
    3fec:	mov	r0, r5
    3ff0:	bl	0 <coda_detection_rule_entry_set_expression>
    3ff4:	cmp	r0, #0
    3ff8:	beq	400c <cd_match_data_finalise+0x6d4>
    3ffc:	mov	r0, r4
    4000:	bl	0 <coda_expression_delete>
    4004:	mvn	r0, #0
    4008:	b	4010 <cd_match_data_finalise+0x6d8>
    400c:	mov	r0, #0
    4010:	ldr	r4, [sp, #16]
    4014:	ldr	r5, [sp, #20]
    4018:	ldr	r6, [sp, #24]
    401c:	ldr	r7, [sp, #28]
    4020:	ldr	r8, [sp, #32]
    4024:	ldr	lr, [sp, #12]
    4028:	add	sp, sp, #72	; 0x48
    402c:	bx	lr
    4030:	.word	0x00001939
    4034:	.word	0x00001c42
    4038:	.word	0x00000bc3
    403c:	.word	0x00000e60
    4040:	.word	0x00002068
    4044:	.word	0x00001462

00004048 <cd_match_data_init>:
    4048:	mov	ip, sp
    404c:	sub	sp, sp, #80	; 0x50
    4050:	str	ip, [sp, #8]
    4054:	str	lr, [sp, #12]
    4058:	str	r4, [sp, #36]	; 0x24
    405c:	str	r5, [sp, #40]	; 0x28
    4060:	str	r6, [sp, #44]	; 0x2c
    4064:	str	r7, [sp, #48]	; 0x30
    4068:	str	r8, [sp, #52]	; 0x34
    406c:	str	r9, [sp, #56]	; 0x38
    4070:	str	sl, [sp, #60]	; 0x3c
    4074:	str	fp, [sp, #64]	; 0x40
    4078:	mov	r4, r1
    407c:	mov	r6, r0
    4080:	ldr	r2, [r6]
    4084:	ldr	r1, [pc, #1680]	; 471c <cd_match_data_init+0x6d4>
    4088:	str	r1, [r2, #40]	; 0x28
    408c:	ldr	r1, [pc, #1696]	; 4734 <cd_match_data_init+0x6ec>
    4090:	mov	r0, r4
    4094:	bl	4e8 <get_attribute_value>
    4098:	mov	r5, r0
    409c:	ldr	r1, [pc, #1676]	; 4730 <cd_match_data_init+0x6e8>
    40a0:	mov	r0, r4
    40a4:	bl	4e8 <get_attribute_value>
    40a8:	mov	r4, r0
    40ac:	cmp	r4, #0
    40b0:	bne	40dc <cd_match_data_init+0x94>
    40b4:	mov	r0, #0
    40b8:	bl	0 <coda_detection_rule_entry_new>
    40bc:	ldr	r1, [r6]
    40c0:	str	r0, [r1, #8]
    40c4:	ldr	r3, [r6]
    40c8:	ldr	ip, [r3, #8]
    40cc:	cmp	ip, #0
    40d0:	bne	40dc <cd_match_data_init+0x94>
    40d4:	mvn	r0, #0
    40d8:	b	46e0 <cd_match_data_init+0x698>
    40dc:	cmp	r5, #0
    40e0:	beq	41a8 <cd_match_data_init+0x160>
    40e4:	cmp	r4, #0
    40e8:	beq	4104 <cd_match_data_init+0xbc>
    40ec:	movw	r0, #65136	; 0xfe70
    40f0:	movt	r0, #65535	; 0xffff
    40f4:	ldr	r1, [pc, #1572]	; 4720 <cd_match_data_init+0x6d8>
    40f8:	bl	0 <coda_set_error>
    40fc:	mvn	r0, #0
    4100:	b	46e0 <cd_match_data_init+0x698>
    4104:	mov	r0, r5
    4108:	bl	0 <strdup>
    410c:	str	r0, [sp, #72]	; 0x48
    4110:	mov	r1, r0
    4114:	cmp	r1, #0
    4118:	bne	4138 <cd_match_data_init+0xf0>
    411c:	mvn	r0, #0
    4120:	ldr	r1, [pc, #1512]	; 4710 <cd_match_data_init+0x6c8>
    4124:	ldr	r2, [pc, #1504]	; 470c <cd_match_data_init+0x6c4>
    4128:	movw	r3, #2459	; 0x99b
    412c:	bl	0 <coda_set_error>
    4130:	mvn	r0, #0
    4134:	b	46e0 <cd_match_data_init+0x698>
    4138:	mov	r0, #20
    413c:	mov	r2, #0
    4140:	mov	r3, #0
    4144:	mov	ip, #0
    4148:	mov	r4, #0
    414c:	str	r4, [sp, #4]
    4150:	str	ip, [sp]
    4154:	bl	0 <coda_expression_new>
    4158:	mov	r4, r0
    415c:	cmp	r4, #0
    4160:	bne	4180 <cd_match_data_init+0x138>
    4164:	movw	r0, #65136	; 0xfe70
    4168:	movt	r0, #65535	; 0xffff
    416c:	ldr	r1, [pc, #1440]	; 4714 <cd_match_data_init+0x6cc>
    4170:	mov	r2, r5
    4174:	bl	0 <coda_set_error>
    4178:	mvn	r0, #0
    417c:	b	46e0 <cd_match_data_init+0x698>
    4180:	ldr	r1, [r6]
    4184:	ldr	r0, [r1, #8]
    4188:	mov	r1, r4
    418c:	bl	0 <coda_detection_rule_entry_set_expression>
    4190:	cmp	r0, #0
    4194:	beq	46c4 <cd_match_data_init+0x67c>
    4198:	mov	r0, r4
    419c:	bl	0 <coda_expression_delete>
    41a0:	mvn	r0, #0
    41a4:	b	46e0 <cd_match_data_init+0x698>
    41a8:	cmp	r4, #0
    41ac:	beq	46c4 <cd_match_data_init+0x67c>
    41b0:	ldr	r3, [r6]
    41b4:	ldr	ip, [r3, #396]	; 0x18c
    41b8:	ldr	r3, [ip, #8]
    41bc:	str	r3, [sp, #20]
    41c0:	mov	r0, #1
    41c4:	str	r0, [sp, #28]
    41c8:	mov	r8, #0
    41cc:	mov	r0, #0
    41d0:	str	r0, [sp, #24]
    41d4:	cmp	r4, #0
    41d8:	bne	41f0 <cd_match_data_init+0x1a8>
    41dc:	ldr	r0, [pc, #1368]	; 473c <cd_match_data_init+0x6f4>
    41e0:	ldr	r1, [pc, #1316]	; 470c <cd_match_data_init+0x6c4>
    41e4:	movw	r2, #2236	; 0x8bc
    41e8:	ldr	r3, [pc, #1320]	; 4718 <cd_match_data_init+0x6d0>
    41ec:	bl	0 <__assert_fail>
    41f0:	mov	r3, #0
    41f4:	str	r3, [sp, #72]	; 0x48
    41f8:	mov	r0, r4
    41fc:	bl	0 <strdup>
    4200:	str	r0, [sp, #16]
    4204:	ldr	ip, [sp, #16]
    4208:	cmp	ip, #0
    420c:	bne	422c <cd_match_data_init+0x1e4>
    4210:	mvn	r0, #0
    4214:	ldr	r1, [pc, #1268]	; 4710 <cd_match_data_init+0x6c8>
    4218:	ldr	r2, [pc, #1260]	; 470c <cd_match_data_init+0x6c4>
    421c:	movw	r3, #2245	; 0x8c5
    4220:	bl	0 <coda_set_error>
    4224:	mvn	r0, #0
    4228:	b	4684 <cd_match_data_init+0x63c>
    422c:	ldr	r9, [sp, #16]
    4230:	mov	r0, r4
    4234:	bl	0 <strlen>
    4238:	add	r0, r0, #6
    423c:	bl	0 <malloc>
    4240:	mov	r4, r0
    4244:	cmp	r4, #0
    4248:	bne	4268 <cd_match_data_init+0x220>
    424c:	mvn	r0, #0
    4250:	ldr	r1, [pc, #1208]	; 4710 <cd_match_data_init+0x6c8>
    4254:	ldr	r2, [pc, #1200]	; 470c <cd_match_data_init+0x6c4>
    4258:	movw	r3, #2257	; 0x8d1
    425c:	bl	0 <coda_set_error>
    4260:	mvn	r0, #0
    4264:	b	4684 <cd_match_data_init+0x63c>
    4268:	mov	r3, #0
    426c:	strb	r3, [r4]
    4270:	mov	r7, r4
    4274:	ldrb	r3, [r9]
    4278:	cmp	r3, #47	; 0x2f
    427c:	bne	428c <cd_match_data_init+0x244>
    4280:	strb	r3, [r7]
    4284:	add	r7, r7, #1
    4288:	add	r9, r9, #1
    428c:	ldrb	r1, [r9]
    4290:	cmp	r1, #64	; 0x40
    4294:	bne	42b0 <cd_match_data_init+0x268>
    4298:	mov	r0, #1
    429c:	str	r0, [sp, #24]
    42a0:	strb	r1, [r7]
    42a4:	add	r7, r7, #1
    42a8:	add	r9, r9, #1
    42ac:	b	42b8 <cd_match_data_init+0x270>
    42b0:	cmp	r8, #0
    42b4:	bne	4674 <cd_match_data_init+0x62c>
    42b8:	ldr	r1, [sp, #24]
    42bc:	str	r1, [sp, #32]
    42c0:	ldr	r3, [sp, #28]
    42c4:	cmp	r3, #0
    42c8:	bne	42f0 <cd_match_data_init+0x2a8>
    42cc:	mov	r0, #64	; 0x40
    42d0:	mov	r2, #47	; 0x2f
    42d4:	ldr	r1, [sp, #32]
    42d8:	cmp	r1, #0
    42dc:	movne	r2, r0
    42e0:	moveq	r2, r2
    42e4:	strb	r2, [r7]
    42e8:	add	r7, r7, #1
    42ec:	b	42f8 <cd_match_data_init+0x2b0>
    42f0:	mov	ip, #0
    42f4:	str	ip, [sp, #28]
    42f8:	mov	sl, #0
    42fc:	ldrb	ip, [r9]
    4300:	cmp	ip, #123	; 0x7b
    4304:	bne	4368 <cd_match_data_init+0x320>
    4308:	add	r1, r9, #1
    430c:	mov	sl, r1
    4310:	ldrb	r3, [r1]
    4314:	cmp	r3, #125	; 0x7d
    4318:	beq	435c <cd_match_data_init+0x314>
    431c:	cmp	r3, #0
    4320:	bne	4354 <cd_match_data_init+0x30c>
    4324:	mvn	r0, #99	; 0x63
    4328:	ldr	r1, [pc, #1016]	; 4728 <cd_match_data_init+0x6e0>
    432c:	ldr	r2, [sp, #20]
    4330:	ldr	r2, [r2, #8]
    4334:	ldr	r2, [r2, #8]
    4338:	bl	0 <coda_set_error>
    433c:	mov	r0, r4
    4340:	bl	0 <free>
    4344:	ldr	r0, [sp, #16]
    4348:	bl	0 <free>
    434c:	mvn	r0, #0
    4350:	b	4684 <cd_match_data_init+0x63c>
    4354:	add	r1, r1, #1
    4358:	b	4310 <cd_match_data_init+0x2c8>
    435c:	mov	r2, #0
    4360:	strb	r2, [r1]
    4364:	add	r9, r1, #1
    4368:	mov	r0, r9
    436c:	ldrb	ip, [r9]
    4370:	cmp	ip, #47	; 0x2f
    4374:	beq	4390 <cd_match_data_init+0x348>
    4378:	cmp	ip, #64	; 0x40
    437c:	beq	4390 <cd_match_data_init+0x348>
    4380:	cmp	ip, #0
    4384:	beq	4390 <cd_match_data_init+0x348>
    4388:	add	r9, r9, #1
    438c:	b	436c <cd_match_data_init+0x324>
    4390:	ldrb	ip, [r9]
    4394:	cmp	ip, #64	; 0x40
    4398:	moveq	r2, #1
    439c:	movne	r2, #0
    43a0:	str	r2, [sp, #24]
    43a4:	cmp	ip, #0
    43a8:	moveq	r8, #1
    43ac:	movne	r8, #0
    43b0:	mov	r1, #0
    43b4:	strb	r1, [r9]
    43b8:	mov	r1, #0
    43bc:	bl	0 <coda_identifier_from_name>
    43c0:	mov	r5, r0
    43c4:	cmp	r5, #0
    43c8:	bne	43e4 <cd_match_data_init+0x39c>
    43cc:	mov	r0, r4
    43d0:	bl	0 <free>
    43d4:	ldr	r0, [sp, #16]
    43d8:	bl	0 <free>
    43dc:	mvn	r0, #0
    43e0:	b	4684 <cd_match_data_init+0x63c>
    43e4:	mov	r1, r5
    43e8:	mov	r0, r7
    43ec:	bl	0 <strcpy>
    43f0:	mov	r0, r5
    43f4:	bl	0 <strlen>
    43f8:	add	r7, r7, r0
    43fc:	mov	r0, r5
    4400:	bl	0 <free>
    4404:	cmp	sl, #0
    4408:	beq	4628 <cd_match_data_init+0x5e0>
    440c:	mov	r0, #36	; 0x24
    4410:	mov	r1, #0
    4414:	mov	r2, #0
    4418:	mov	r3, #0
    441c:	mov	fp, #0
    4420:	mov	r5, #0
    4424:	str	r5, [sp, #4]
    4428:	str	fp, [sp]
    442c:	bl	0 <coda_expression_new>
    4430:	mov	r2, r0
    4434:	cmp	r2, #0
    4438:	bne	4454 <cd_match_data_init+0x40c>
    443c:	mov	r0, r4
    4440:	bl	0 <free>
    4444:	ldr	r0, [sp, #16]
    4448:	bl	0 <free>
    444c:	mvn	r0, #0
    4450:	b	4684 <cd_match_data_init+0x63c>
    4454:	mov	r0, #75	; 0x4b
    4458:	mov	r1, #0
    445c:	mov	r3, #0
    4460:	mov	r5, #0
    4464:	mov	fp, #0
    4468:	str	fp, [sp, #4]
    446c:	str	r5, [sp]
    4470:	bl	0 <coda_expression_new>
    4474:	mov	r5, r0
    4478:	cmp	r5, #0
    447c:	bne	4498 <cd_match_data_init+0x450>
    4480:	mov	r0, r4
    4484:	bl	0 <free>
    4488:	ldr	r0, [sp, #16]
    448c:	bl	0 <free>
    4490:	mvn	r0, #0
    4494:	b	4684 <cd_match_data_init+0x63c>
    4498:	mov	r0, sl
    449c:	bl	0 <strdup>
    44a0:	mov	r1, r0
    44a4:	cmp	r1, #0
    44a8:	bne	44e0 <cd_match_data_init+0x498>
    44ac:	mvn	r0, #0
    44b0:	ldr	r1, [pc, #600]	; 4710 <cd_match_data_init+0x6c8>
    44b4:	ldr	r2, [pc, #592]	; 470c <cd_match_data_init+0x6c4>
    44b8:	movw	r3, #2359	; 0x937
    44bc:	bl	0 <coda_set_error>
    44c0:	mov	r0, r5
    44c4:	bl	0 <coda_expression_delete>
    44c8:	mov	r0, r4
    44cc:	bl	0 <free>
    44d0:	ldr	r0, [sp, #16]
    44d4:	bl	0 <free>
    44d8:	mvn	r0, #0
    44dc:	b	4684 <cd_match_data_init+0x63c>
    44e0:	mov	r0, #22
    44e4:	mov	r2, #0
    44e8:	mov	r3, #0
    44ec:	mov	fp, #0
    44f0:	mov	sl, #0
    44f4:	str	sl, [sp, #4]
    44f8:	str	fp, [sp]
    44fc:	bl	0 <coda_expression_new>
    4500:	mov	r3, r0
    4504:	cmp	r3, #0
    4508:	bne	452c <cd_match_data_init+0x4e4>
    450c:	mov	r0, r5
    4510:	bl	0 <coda_expression_delete>
    4514:	mov	r0, r4
    4518:	bl	0 <free>
    451c:	ldr	r0, [sp, #16]
    4520:	bl	0 <free>
    4524:	mvn	r0, #0
    4528:	b	4684 <cd_match_data_init+0x63c>
    452c:	mov	r0, #25
    4530:	mov	r1, #0
    4534:	mov	sl, #0
    4538:	mov	r2, #0
    453c:	str	r2, [sp, #4]
    4540:	str	sl, [sp]
    4544:	mov	r2, r5
    4548:	bl	0 <coda_expression_new>
    454c:	mov	sl, r0
    4550:	cmp	sl, #0
    4554:	bne	4570 <cd_match_data_init+0x528>
    4558:	mov	r0, r4
    455c:	bl	0 <free>
    4560:	ldr	r0, [sp, #16]
    4564:	bl	0 <free>
    4568:	mvn	r0, #0
    456c:	b	4684 <cd_match_data_init+0x63c>
    4570:	ldr	r1, [pc, #436]	; 472c <cd_match_data_init+0x6e4>
    4574:	mov	r0, r7
    4578:	bl	0 <strcpy>
    457c:	mov	r0, r4
    4580:	bl	0 <coda_detection_rule_entry_new>
    4584:	mov	r5, r0
    4588:	mov	ip, #0
    458c:	strb	ip, [r7]
    4590:	cmp	r5, #0
    4594:	bne	45b8 <cd_match_data_init+0x570>
    4598:	mov	r0, sl
    459c:	bl	0 <coda_expression_delete>
    45a0:	mov	r0, r4
    45a4:	bl	0 <free>
    45a8:	ldr	r0, [sp, #16]
    45ac:	bl	0 <free>
    45b0:	mvn	r0, #0
    45b4:	b	4684 <cd_match_data_init+0x63c>
    45b8:	mov	r1, sl
    45bc:	mov	r0, r5
    45c0:	bl	0 <coda_detection_rule_entry_set_expression>
    45c4:	cmp	r0, #0
    45c8:	beq	45f4 <cd_match_data_init+0x5ac>
    45cc:	mov	r0, r5
    45d0:	bl	0 <coda_detection_rule_entry_delete>
    45d4:	mov	r0, sl
    45d8:	bl	0 <coda_expression_delete>
    45dc:	mov	r0, r4
    45e0:	bl	0 <free>
    45e4:	ldr	r0, [sp, #16]
    45e8:	bl	0 <free>
    45ec:	mvn	r0, #0
    45f0:	b	4684 <cd_match_data_init+0x63c>
    45f4:	mov	r1, r5
    45f8:	ldr	r0, [sp, #20]
    45fc:	bl	0 <coda_detection_rule_add_entry>
    4600:	cmp	r0, #0
    4604:	beq	4628 <cd_match_data_init+0x5e0>
    4608:	mov	r0, r5
    460c:	bl	0 <coda_detection_rule_entry_delete>
    4610:	mov	r0, r4
    4614:	bl	0 <free>
    4618:	ldr	r0, [sp, #16]
    461c:	bl	0 <free>
    4620:	mvn	r0, #0
    4624:	b	4684 <cd_match_data_init+0x63c>
    4628:	cmp	r8, #0
    462c:	bne	42b0 <cd_match_data_init+0x268>
    4630:	ldr	r2, [sp, #32]
    4634:	cmp	r2, #0
    4638:	beq	466c <cd_match_data_init+0x624>
    463c:	mvn	r0, #99	; 0x63
    4640:	ldr	r1, [pc, #240]	; 4738 <cd_match_data_init+0x6f0>
    4644:	ldr	r2, [sp, #20]
    4648:	ldr	ip, [r2, #8]
    464c:	ldr	r2, [ip, #8]
    4650:	bl	0 <coda_set_error>
    4654:	mov	r0, r4
    4658:	bl	0 <free>
    465c:	ldr	r0, [sp, #16]
    4660:	bl	0 <free>
    4664:	mvn	r0, #0
    4668:	b	4684 <cd_match_data_init+0x63c>
    466c:	add	r9, r9, #1
    4670:	b	42b0 <cd_match_data_init+0x268>
    4674:	ldr	r0, [sp, #16]
    4678:	bl	0 <free>
    467c:	str	r4, [sp, #72]	; 0x48
    4680:	mov	r0, #0
    4684:	cmp	r0, #0
    4688:	beq	4694 <cd_match_data_init+0x64c>
    468c:	mvn	r0, #0
    4690:	b	46e0 <cd_match_data_init+0x698>
    4694:	ldr	r0, [sp, #72]	; 0x48
    4698:	bl	0 <coda_detection_rule_entry_new>
    469c:	ldr	r2, [r6]
    46a0:	str	r0, [r2, #8]
    46a4:	ldr	r0, [sp, #72]	; 0x48
    46a8:	bl	0 <free>
    46ac:	ldr	r0, [r6]
    46b0:	ldr	r3, [r0, #8]
    46b4:	cmp	r3, #0
    46b8:	bne	46c4 <cd_match_data_init+0x67c>
    46bc:	mvn	r0, #0
    46c0:	b	46e0 <cd_match_data_init+0x698>
    46c4:	ldr	r1, [r6]
    46c8:	mov	r2, #1
    46cc:	str	r2, [r1, #32]
    46d0:	ldr	r3, [r6]
    46d4:	ldr	r0, [pc, #72]	; 4724 <cd_match_data_init+0x6dc>
    46d8:	str	r0, [r3, #36]	; 0x24
    46dc:	mov	r0, #0
    46e0:	ldr	r4, [sp, #36]	; 0x24
    46e4:	ldr	r5, [sp, #40]	; 0x28
    46e8:	ldr	r6, [sp, #44]	; 0x2c
    46ec:	ldr	r7, [sp, #48]	; 0x30
    46f0:	ldr	r8, [sp, #52]	; 0x34
    46f4:	ldr	r9, [sp, #56]	; 0x38
    46f8:	ldr	sl, [sp, #60]	; 0x3c
    46fc:	ldr	fp, [sp, #64]	; 0x40
    4700:	ldr	lr, [sp, #12]
    4704:	add	sp, sp, #80	; 0x50
    4708:	bx	lr
    470c:	.word	0x00001939
    4710:	.word	0x00001c42
    4714:	.word	0x0000206d
    4718:	.word	0x00002143
    471c:	.word	0x00000000
    4720:	.word	0x00001e50
    4724:	.word	0x00000000
    4728:	.word	0x00000337
    472c:	.word	0x00000160
    4730:	.word	0x00002010
    4734:	.word	0x00001ec2
    4738:	.word	0x0000136e
    473c:	.word	0x00001d60

00004740 <cd_match_expression_finalise>:
    4740:	mov	ip, sp
    4744:	sub	sp, sp, #24
    4748:	str	ip, [sp]
    474c:	str	lr, [sp, #4]
    4750:	str	r4, [sp, #8]
    4754:	mov	r4, r0
    4758:	ldr	r3, [r4]
    475c:	ldr	r0, [r3, #12]
    4760:	cmp	r0, #0
    4764:	beq	47a4 <cd_match_expression_finalise+0x64>
    4768:	bl	0 <strlen>
    476c:	ldr	ip, [r4]
    4770:	ldr	r1, [ip, #12]
    4774:	mov	ip, r0
    4778:	mov	r0, r1
    477c:	mov	r1, ip
    4780:	bl	ac <is_whitespace>
    4784:	cmp	r0, #0
    4788:	beq	47a4 <cd_match_expression_finalise+0x64>
    478c:	ldr	r0, [r4]
    4790:	ldr	r0, [r0, #12]
    4794:	bl	0 <free>
    4798:	ldr	r1, [r4]
    479c:	mov	r0, #0
    47a0:	str	r0, [r1, #12]
    47a4:	ldr	r2, [r4]
    47a8:	ldr	r0, [r2, #12]
    47ac:	cmp	r0, #0
    47b0:	bne	47cc <cd_match_expression_finalise+0x8c>
    47b4:	movw	r0, #65136	; 0xfe70
    47b8:	movt	r0, #65535	; 0xffff
    47bc:	ldr	r1, [pc, #160]	; 4864 <cd_match_expression_finalise+0x124>
    47c0:	bl	0 <coda_set_error>
    47c4:	mvn	r0, #0
    47c8:	b	4850 <cd_match_expression_finalise+0x110>
    47cc:	add	r1, sp, #20
    47d0:	bl	0 <coda_expression_from_string>
    47d4:	cmp	r0, #0
    47d8:	beq	47e4 <cd_match_expression_finalise+0xa4>
    47dc:	mvn	r0, #0
    47e0:	b	4850 <cd_match_expression_finalise+0x110>
    47e4:	ldr	r3, [r4]
    47e8:	ldr	r0, [r3, #12]
    47ec:	bl	0 <free>
    47f0:	ldr	r2, [r4]
    47f4:	mov	r1, #0
    47f8:	str	r1, [r2, #12]
    47fc:	ldr	r0, [r4]
    4800:	ldr	ip, [r0, #8]
    4804:	ldr	r3, [sp, #20]
    4808:	str	r3, [ip, #4]
    480c:	ldr	r0, [sp, #20]
    4810:	add	r1, sp, #16
    4814:	bl	0 <coda_expression_get_type>
    4818:	cmp	r0, #0
    481c:	beq	4828 <cd_match_expression_finalise+0xe8>
    4820:	mvn	r0, #0
    4824:	b	4850 <cd_match_expression_finalise+0x110>
    4828:	ldr	r0, [sp, #16]
    482c:	cmp	r0, #0
    4830:	beq	484c <cd_match_expression_finalise+0x10c>
    4834:	movw	r0, #65136	; 0xfe70
    4838:	movt	r0, #65535	; 0xffff
    483c:	ldr	r1, [pc, #28]	; 4860 <cd_match_expression_finalise+0x120>
    4840:	bl	0 <coda_set_error>
    4844:	mvn	r0, #0
    4848:	b	4850 <cd_match_expression_finalise+0x110>
    484c:	mov	r0, #0
    4850:	ldr	r4, [sp, #8]
    4854:	ldr	lr, [sp, #4]
    4858:	add	sp, sp, #24
    485c:	bx	lr
    4860:	.word	0x00000c4f
    4864:	.word	0x000011c8

00004868 <cd_match_expression_init>:
    4868:	mov	ip, sp
    486c:	sub	sp, sp, #16
    4870:	str	ip, [sp]
    4874:	str	lr, [sp, #4]
    4878:	str	r4, [sp, #8]
    487c:	mov	r4, r0
    4880:	ldr	r2, [pc, #104]	; 48f0 <cd_match_expression_init+0x88>
    4884:	mov	r0, r1
    4888:	mov	r1, r2
    488c:	bl	4e8 <get_attribute_value>
    4890:	ldr	r3, [r4]
    4894:	ldr	r1, [pc, #76]	; 48e8 <cd_match_expression_init+0x80>
    4898:	str	r1, [r3, #40]	; 0x28
    489c:	bl	0 <coda_detection_rule_entry_new>
    48a0:	ldr	r2, [r4]
    48a4:	str	r0, [r2, #8]
    48a8:	ldr	r0, [r4]
    48ac:	ldr	r1, [r0, #8]
    48b0:	cmp	r1, #0
    48b4:	bne	48c0 <cd_match_expression_init+0x58>
    48b8:	mvn	r0, #0
    48bc:	b	48d8 <cd_match_expression_init+0x70>
    48c0:	mov	r3, #1
    48c4:	str	r3, [r0, #32]
    48c8:	ldr	r2, [r4]
    48cc:	ldr	r0, [pc, #24]	; 48ec <cd_match_expression_init+0x84>
    48d0:	str	r0, [r2, #36]	; 0x24
    48d4:	mov	r0, #0
    48d8:	ldr	r4, [sp, #8]
    48dc:	ldr	lr, [sp, #4]
    48e0:	add	sp, sp, #16
    48e4:	bx	lr
	...
    48f0:	.word	0x00002010

000048f4 <cd_match_filename_finalise>:
    48f4:	mov	ip, sp
    48f8:	sub	sp, sp, #72	; 0x48
    48fc:	str	ip, [sp, #8]
    4900:	str	lr, [sp, #12]
    4904:	str	r4, [sp, #16]
    4908:	str	r5, [sp, #20]
    490c:	str	r6, [sp, #24]
    4910:	str	r7, [sp, #28]
    4914:	str	r8, [sp, #32]
    4918:	mov	r7, r0
    491c:	ldr	r2, [r7]
    4920:	ldr	r5, [r2, #8]
    4924:	ldr	r0, [r2, #12]
    4928:	bl	14c <escaped_string_length>
    492c:	mov	r4, r0
    4930:	cmp	r4, #0
    4934:	bge	4950 <cd_match_filename_finalise+0x5c>
    4938:	movw	r0, #65136	; 0xfe70
    493c:	movt	r0, #65535	; 0xffff
    4940:	ldr	r1, [pc, #512]	; 4b48 <cd_match_filename_finalise+0x254>
    4944:	bl	0 <coda_set_error>
    4948:	mvn	r0, #0
    494c:	b	4b1c <cd_match_filename_finalise+0x228>
    4950:	cmp	r4, #0
    4954:	bne	4970 <cd_match_filename_finalise+0x7c>
    4958:	movw	r0, #65136	; 0xfe70
    495c:	movt	r0, #65535	; 0xffff
    4960:	ldr	r1, [pc, #476]	; 4b44 <cd_match_filename_finalise+0x250>
    4964:	bl	0 <coda_set_error>
    4968:	mvn	r0, #0
    496c:	b	4b1c <cd_match_filename_finalise+0x228>
    4970:	mov	r0, #28
    4974:	mov	r1, #0
    4978:	mov	r2, #0
    497c:	mov	r3, #0
    4980:	mov	r8, #0
    4984:	mov	ip, #0
    4988:	str	ip, [sp, #4]
    498c:	str	r8, [sp]
    4990:	bl	0 <coda_expression_new>
    4994:	mov	r6, r0
    4998:	cmp	r6, #0
    499c:	bne	49a8 <cd_match_filename_finalise+0xb4>
    49a0:	mvn	r0, #0
    49a4:	b	4b1c <cd_match_filename_finalise+0x228>
    49a8:	asr	r1, r4, #31
    49ac:	add	r2, sp, #40	; 0x28
    49b0:	mov	r0, r4
    49b4:	bl	0 <coda_str64>
    49b8:	add	r0, sp, #40	; 0x28
    49bc:	bl	0 <strdup>
    49c0:	cmp	r0, #0
    49c4:	bne	49e4 <cd_match_filename_finalise+0xf0>
    49c8:	mvn	r0, #0
    49cc:	ldr	r1, [pc, #364]	; 4b40 <cd_match_filename_finalise+0x24c>
    49d0:	ldr	r2, [pc, #356]	; 4b3c <cd_match_filename_finalise+0x248>
    49d4:	movw	r3, #2588	; 0xa1c
    49d8:	bl	0 <coda_set_error>
    49dc:	mvn	r0, #0
    49e0:	b	4b1c <cd_match_filename_finalise+0x228>
    49e4:	mov	r1, #20
    49e8:	mov	r2, #0
    49ec:	mov	r3, #0
    49f0:	mov	ip, #0
    49f4:	mov	r8, #0
    49f8:	str	r8, [sp, #4]
    49fc:	str	ip, [sp]
    4a00:	mov	r4, r0
    4a04:	mov	r0, r1
    4a08:	mov	r1, r4
    4a0c:	bl	0 <coda_expression_new>
    4a10:	mov	r3, r0
    4a14:	cmp	r3, #0
    4a18:	bne	4a2c <cd_match_filename_finalise+0x138>
    4a1c:	mov	r0, r6
    4a20:	bl	0 <coda_expression_delete>
    4a24:	mvn	r0, #0
    4a28:	b	4b1c <cd_match_filename_finalise+0x228>
    4a2c:	mov	r0, #77	; 0x4d
    4a30:	mov	r1, #0
    4a34:	ldr	r2, [r5, #4]
    4a38:	mov	r4, #0
    4a3c:	str	r4, [sp, #4]
    4a40:	str	r6, [sp]
    4a44:	bl	0 <coda_expression_new>
    4a48:	mov	r4, r0
    4a4c:	mov	r2, #0
    4a50:	str	r2, [r5, #4]
    4a54:	cmp	r4, #0
    4a58:	bne	4a64 <cd_match_filename_finalise+0x170>
    4a5c:	mvn	r0, #0
    4a60:	b	4b1c <cd_match_filename_finalise+0x228>
    4a64:	ldr	r1, [r7]
    4a68:	ldr	r0, [r1, #12]
    4a6c:	bl	0 <strdup>
    4a70:	cmp	r0, #0
    4a74:	bne	4a9c <cd_match_filename_finalise+0x1a8>
    4a78:	mvn	r0, #0
    4a7c:	ldr	r1, [pc, #188]	; 4b40 <cd_match_filename_finalise+0x24c>
    4a80:	ldr	r2, [pc, #180]	; 4b3c <cd_match_filename_finalise+0x248>
    4a84:	movw	r3, #2607	; 0xa2f
    4a88:	bl	0 <coda_set_error>
    4a8c:	mov	r0, r4
    4a90:	bl	0 <coda_expression_delete>
    4a94:	mvn	r0, #0
    4a98:	b	4b1c <cd_match_filename_finalise+0x228>
    4a9c:	mov	r1, #22
    4aa0:	mov	r2, #0
    4aa4:	mov	r3, #0
    4aa8:	mov	r7, #0
    4aac:	mov	ip, #0
    4ab0:	str	ip, [sp, #4]
    4ab4:	str	r7, [sp]
    4ab8:	mov	r6, r0
    4abc:	mov	r0, r1
    4ac0:	mov	r1, r6
    4ac4:	bl	0 <coda_expression_new>
    4ac8:	mov	r3, r0
    4acc:	cmp	r3, #0
    4ad0:	bne	4ae4 <cd_match_filename_finalise+0x1f0>
    4ad4:	mov	r0, r4
    4ad8:	bl	0 <coda_expression_delete>
    4adc:	mvn	r0, #0
    4ae0:	b	4b1c <cd_match_filename_finalise+0x228>
    4ae4:	mov	r0, #25
    4ae8:	mov	r1, #0
    4aec:	mov	r2, #0
    4af0:	mov	ip, #0
    4af4:	str	ip, [sp, #4]
    4af8:	str	r2, [sp]
    4afc:	mov	r2, r4
    4b00:	bl	0 <coda_expression_new>
    4b04:	str	r0, [r5, #4]
    4b08:	cmp	r0, #0
    4b0c:	bne	4b18 <cd_match_filename_finalise+0x224>
    4b10:	mvn	r0, #0
    4b14:	b	4b1c <cd_match_filename_finalise+0x228>
    4b18:	mov	r0, #0
    4b1c:	ldr	r4, [sp, #16]
    4b20:	ldr	r5, [sp, #20]
    4b24:	ldr	r6, [sp, #24]
    4b28:	ldr	r7, [sp, #28]
    4b2c:	ldr	r8, [sp, #32]
    4b30:	ldr	lr, [sp, #12]
    4b34:	add	sp, sp, #72	; 0x48
    4b38:	bx	lr
    4b3c:	.word	0x00001939
    4b40:	.word	0x00001c42
    4b44:	.word	0x00001cc7
    4b48:	.word	0x00000bc3

00004b4c <cd_match_filename_init>:
    4b4c:	mov	ip, sp
    4b50:	sub	sp, sp, #32
    4b54:	str	ip, [sp, #8]
    4b58:	str	lr, [sp, #12]
    4b5c:	str	r4, [sp, #16]
    4b60:	str	r5, [sp, #20]
    4b64:	str	r6, [sp, #24]
    4b68:	str	r7, [sp, #28]
    4b6c:	mov	r6, r0
    4b70:	ldr	r0, [pc, #328]	; 4cc0 <cd_match_filename_init+0x174>
    4b74:	ldr	r2, [r6]
    4b78:	ldr	r2, [r2]
    4b7c:	mov	r3, r0
    4b80:	mov	r0, r1
    4b84:	mov	r1, r3
    4b88:	bl	54c <get_mandatory_attribute_value>
    4b8c:	mov	r4, r0
    4b90:	cmp	r4, #0
    4b94:	bne	4ba0 <cd_match_filename_init+0x54>
    4b98:	mvn	r0, #0
    4b9c:	b	4c90 <cd_match_filename_init+0x144>
    4ba0:	ldr	r3, [r6]
    4ba4:	ldr	r2, [pc, #268]	; 4cb8 <cd_match_filename_init+0x16c>
    4ba8:	str	r2, [r3, #40]	; 0x28
    4bac:	mov	r0, #0
    4bb0:	bl	0 <coda_detection_rule_entry_new>
    4bb4:	ldr	r3, [r6]
    4bb8:	str	r0, [r3, #8]
    4bbc:	ldr	ip, [r6]
    4bc0:	ldr	r2, [ip, #8]
    4bc4:	cmp	r2, #0
    4bc8:	bne	4bd4 <cd_match_filename_init+0x88>
    4bcc:	mvn	r0, #0
    4bd0:	b	4c90 <cd_match_filename_init+0x144>
    4bd4:	mov	r0, r4
    4bd8:	bl	0 <strdup>
    4bdc:	mov	r1, r0
    4be0:	cmp	r1, #0
    4be4:	bne	4c04 <cd_match_filename_init+0xb8>
    4be8:	mvn	r0, #0
    4bec:	ldr	r1, [pc, #188]	; 4cb0 <cd_match_filename_init+0x164>
    4bf0:	ldr	r2, [pc, #180]	; 4cac <cd_match_filename_init+0x160>
    4bf4:	movw	r3, #2649	; 0xa59
    4bf8:	bl	0 <coda_set_error>
    4bfc:	mvn	r0, #0
    4c00:	b	4c90 <cd_match_filename_init+0x144>
    4c04:	mov	r0, #20
    4c08:	mov	r2, #0
    4c0c:	mov	r3, #0
    4c10:	mov	r7, #0
    4c14:	mov	r5, #0
    4c18:	str	r5, [sp, #4]
    4c1c:	str	r7, [sp]
    4c20:	bl	0 <coda_expression_new>
    4c24:	mov	r5, r0
    4c28:	cmp	r5, #0
    4c2c:	bne	4c4c <cd_match_filename_init+0x100>
    4c30:	movw	r0, #65136	; 0xfe70
    4c34:	movt	r0, #65535	; 0xffff
    4c38:	ldr	r1, [pc, #116]	; 4cb4 <cd_match_filename_init+0x168>
    4c3c:	mov	r2, r4
    4c40:	bl	0 <coda_set_error>
    4c44:	mvn	r0, #0
    4c48:	b	4c90 <cd_match_filename_init+0x144>
    4c4c:	ldr	r0, [r6]
    4c50:	ldr	r0, [r0, #8]
    4c54:	mov	r1, r5
    4c58:	bl	0 <coda_detection_rule_entry_set_expression>
    4c5c:	cmp	r0, #0
    4c60:	beq	4c74 <cd_match_filename_init+0x128>
    4c64:	mov	r0, r5
    4c68:	bl	0 <coda_expression_delete>
    4c6c:	mvn	r0, #0
    4c70:	b	4c90 <cd_match_filename_init+0x144>
    4c74:	ldr	r3, [r6]
    4c78:	mov	ip, #1
    4c7c:	str	ip, [r3, #32]
    4c80:	ldr	r2, [r6]
    4c84:	ldr	r1, [pc, #48]	; 4cbc <cd_match_filename_init+0x170>
    4c88:	str	r1, [r2, #36]	; 0x24
    4c8c:	mov	r0, #0
    4c90:	ldr	r4, [sp, #16]
    4c94:	ldr	r5, [sp, #20]
    4c98:	ldr	r6, [sp, #24]
    4c9c:	ldr	r7, [sp, #28]
    4ca0:	ldr	lr, [sp, #12]
    4ca4:	add	sp, sp, #32
    4ca8:	bx	lr
    4cac:	.word	0x00001939
    4cb0:	.word	0x00001c42
    4cb4:	.word	0x0000206d
	...
    4cc0:	.word	0x00001ec2

00004cc4 <cd_match_size_init>:
    4cc4:	mov	ip, sp
    4cc8:	sub	sp, sp, #32
    4ccc:	str	ip, [sp, #8]
    4cd0:	str	lr, [sp, #12]
    4cd4:	str	r4, [sp, #16]
    4cd8:	str	r5, [sp, #20]
    4cdc:	str	r6, [sp, #24]
    4ce0:	str	r7, [sp, #28]
    4ce4:	mov	r4, r1
    4ce8:	mov	r6, r0
    4cec:	ldr	ip, [r6]
    4cf0:	ldr	r1, [pc, #392]	; 4e80 <cd_match_size_init+0x1bc>
    4cf4:	str	r1, [ip, #40]	; 0x28
    4cf8:	mov	r0, #0
    4cfc:	bl	0 <coda_detection_rule_entry_new>
    4d00:	ldr	ip, [r6]
    4d04:	str	r0, [ip, #8]
    4d08:	ldr	r0, [r6]
    4d0c:	ldr	ip, [r0, #8]
    4d10:	cmp	ip, #0
    4d14:	bne	4d20 <cd_match_size_init+0x5c>
    4d18:	mvn	r0, #0
    4d1c:	b	4e5c <cd_match_size_init+0x198>
    4d20:	ldr	r1, [pc, #352]	; 4e88 <cd_match_size_init+0x1c4>
    4d24:	ldr	r2, [r0]
    4d28:	mov	r0, r4
    4d2c:	bl	54c <get_mandatory_attribute_value>
    4d30:	mov	r4, r0
    4d34:	cmp	r4, #0
    4d38:	bne	4d44 <cd_match_size_init+0x80>
    4d3c:	mvn	r0, #0
    4d40:	b	4e5c <cd_match_size_init+0x198>
    4d44:	mov	r0, r4
    4d48:	bl	0 <strdup>
    4d4c:	mov	r1, r0
    4d50:	cmp	r1, #0
    4d54:	bne	4d74 <cd_match_size_init+0xb0>
    4d58:	mvn	r0, #0
    4d5c:	ldr	r1, [pc, #280]	; 4e7c <cd_match_size_init+0x1b8>
    4d60:	ldr	r2, [pc, #272]	; 4e78 <cd_match_size_init+0x1b4>
    4d64:	movw	r3, #2694	; 0xa86
    4d68:	bl	0 <coda_set_error>
    4d6c:	mvn	r0, #0
    4d70:	b	4e5c <cd_match_size_init+0x198>
    4d74:	mov	r0, #20
    4d78:	mov	r2, #0
    4d7c:	mov	r3, #0
    4d80:	mov	r7, #0
    4d84:	mov	ip, #0
    4d88:	str	ip, [sp, #4]
    4d8c:	str	r7, [sp]
    4d90:	bl	0 <coda_expression_new>
    4d94:	mov	r5, r0
    4d98:	cmp	r5, #0
    4d9c:	bne	4dbc <cd_match_size_init+0xf8>
    4da0:	movw	r0, #65136	; 0xfe70
    4da4:	movt	r0, #65535	; 0xffff
    4da8:	ldr	r1, [pc, #212]	; 4e84 <cd_match_size_init+0x1c0>
    4dac:	mov	r2, r4
    4db0:	bl	0 <coda_set_error>
    4db4:	mvn	r0, #0
    4db8:	b	4e5c <cd_match_size_init+0x198>
    4dbc:	mov	r0, #27
    4dc0:	mov	r1, #0
    4dc4:	mov	r2, #0
    4dc8:	mov	r3, #0
    4dcc:	mov	ip, #0
    4dd0:	mov	r4, #0
    4dd4:	str	r4, [sp, #4]
    4dd8:	str	ip, [sp]
    4ddc:	bl	0 <coda_expression_new>
    4de0:	mov	r2, r0
    4de4:	cmp	r2, #0
    4de8:	bne	4dfc <cd_match_size_init+0x138>
    4dec:	mov	r0, r5
    4df0:	bl	0 <coda_expression_delete>
    4df4:	mvn	r0, #0
    4df8:	b	4e5c <cd_match_size_init+0x198>
    4dfc:	mov	r0, #25
    4e00:	mov	r1, #0
    4e04:	mov	r3, #0
    4e08:	mov	ip, #0
    4e0c:	str	ip, [sp, #4]
    4e10:	str	r3, [sp]
    4e14:	mov	r3, r5
    4e18:	bl	0 <coda_expression_new>
    4e1c:	mov	r4, r0
    4e20:	cmp	r4, #0
    4e24:	bne	4e30 <cd_match_size_init+0x16c>
    4e28:	mvn	r0, #0
    4e2c:	b	4e5c <cd_match_size_init+0x198>
    4e30:	ldr	r3, [r6]
    4e34:	ldr	r0, [r3, #8]
    4e38:	mov	r1, r4
    4e3c:	bl	0 <coda_detection_rule_entry_set_expression>
    4e40:	cmp	r0, #0
    4e44:	beq	4e58 <cd_match_size_init+0x194>
    4e48:	mov	r0, r4
    4e4c:	bl	0 <coda_expression_delete>
    4e50:	mvn	r0, #0
    4e54:	b	4e5c <cd_match_size_init+0x198>
    4e58:	mov	r0, #0
    4e5c:	ldr	r4, [sp, #16]
    4e60:	ldr	r5, [sp, #20]
    4e64:	ldr	r6, [sp, #24]
    4e68:	ldr	r7, [sp, #28]
    4e6c:	ldr	lr, [sp, #12]
    4e70:	add	sp, sp, #32
    4e74:	bx	lr
    4e78:	.word	0x00001939
    4e7c:	.word	0x00001c42
    4e80:	.word	0x00000000
    4e84:	.word	0x00000f92
    4e88:	.word	0x00000130

00004e8c <cd_product_class_set_description>:
    4e8c:	mov	ip, sp
    4e90:	sub	sp, sp, #8
    4e94:	str	ip, [sp]
    4e98:	str	lr, [sp, #4]
    4e9c:	ldr	r0, [r0]
    4ea0:	ldr	r1, [r0, #12]
    4ea4:	cmp	r1, #0
    4ea8:	bne	4ec4 <cd_product_class_set_description+0x38>
    4eac:	ldr	r0, [r0, #396]	; 0x18c
    4eb0:	ldr	r0, [r0, #8]
    4eb4:	ldr	r1, [pc, #28]	; 4ed8 <cd_product_class_set_description+0x4c>
    4eb8:	ldr	lr, [sp, #4]
    4ebc:	add	sp, sp, #8
    4ec0:	b	0 <coda_product_class_set_description>
    4ec4:	ldr	r3, [r0, #396]	; 0x18c
    4ec8:	ldr	r0, [r3, #8]
    4ecc:	ldr	lr, [sp, #4]
    4ed0:	add	sp, sp, #8
    4ed4:	b	0 <coda_product_class_set_description>
    4ed8:	.word	0x00002067

00004edc <cd_product_class_add_product_type>:
    4edc:	mov	ip, sp
    4ee0:	sub	sp, sp, #16
    4ee4:	str	ip, [sp]
    4ee8:	str	lr, [sp, #4]
    4eec:	str	r4, [sp, #8]
    4ef0:	mov	r4, r0
    4ef4:	ldr	r1, [r4]
    4ef8:	ldr	r2, [r1, #396]	; 0x18c
    4efc:	ldr	r0, [r2, #8]
    4f00:	ldr	r1, [r1, #8]
    4f04:	bl	0 <coda_product_class_add_product_type>
    4f08:	cmp	r0, #0
    4f0c:	beq	4f18 <cd_product_class_add_product_type+0x3c>
    4f10:	mvn	r0, #0
    4f14:	b	4f28 <cd_product_class_add_product_type+0x4c>
    4f18:	ldr	r1, [r4]
    4f1c:	mov	r3, #0
    4f20:	str	r3, [r1, #8]
    4f24:	mov	r0, #0
    4f28:	ldr	r4, [sp, #8]
    4f2c:	ldr	lr, [sp, #4]
    4f30:	add	sp, sp, #16
    4f34:	bx	lr

00004f38 <cd_product_class_finalise>:
    4f38:	mov	ip, sp
    4f3c:	sub	sp, sp, #8
    4f40:	str	ip, [sp]
    4f44:	str	lr, [sp, #4]
    4f48:	mov	r1, #0
    4f4c:	str	r1, [r0, #24]
    4f50:	mov	r0, #0
    4f54:	ldr	lr, [sp, #4]
    4f58:	add	sp, sp, #8
    4f5c:	bx	lr

00004f60 <cd_product_class_init>:
    4f60:	mov	ip, sp
    4f64:	sub	sp, sp, #56	; 0x38
    4f68:	str	ip, [sp, #4]
    4f6c:	str	lr, [sp, #8]
    4f70:	str	r4, [sp, #16]
    4f74:	str	r5, [sp, #20]
    4f78:	str	r6, [sp, #24]
    4f7c:	str	r7, [sp, #28]
    4f80:	str	r8, [sp, #32]
    4f84:	mov	r5, r0
    4f88:	mov	r0, r1
    4f8c:	mov	r3, #0
    4f90:	str	r3, [sp, #40]	; 0x28
    4f94:	ldr	r1, [pc, #648]	; 5224 <cd_product_class_init+0x2c4>
    4f98:	ldr	r3, [r5]
    4f9c:	ldr	r2, [r3]
    4fa0:	bl	54c <get_mandatory_attribute_value>
    4fa4:	mov	r7, r0
    4fa8:	cmp	r7, #0
    4fac:	bne	4fb8 <cd_product_class_init+0x58>
    4fb0:	mvn	r0, #0
    4fb4:	b	51fc <cd_product_class_init+0x29c>
    4fb8:	ldr	r0, [r5, #16]
    4fbc:	ldr	r1, [pc, #616]	; 522c <cd_product_class_init+0x2cc>
    4fc0:	bl	0 <coda_za_get_entry_by_name>
    4fc4:	mov	r6, r0
    4fc8:	cmp	r6, #0
    4fcc:	bne	4fe0 <cd_product_class_init+0x80>
    4fd0:	mov	r0, #0
    4fd4:	str	r0, [sp, #40]	; 0x28
    4fd8:	mov	r0, #0
    4fdc:	b	50b0 <cd_product_class_init+0x150>
    4fe0:	mov	r0, r6
    4fe4:	bl	0 <coda_za_get_entry_size>
    4fe8:	mov	r4, r0
    4fec:	cmp	r4, #0
    4ff0:	bne	5004 <cd_product_class_init+0xa4>
    4ff4:	mov	r3, #0
    4ff8:	str	r3, [sp, #40]	; 0x28
    4ffc:	mov	r0, #0
    5000:	b	50b0 <cd_product_class_init+0x150>
    5004:	add	r0, r4, #1
    5008:	bl	0 <malloc>
    500c:	mov	r8, r0
    5010:	cmp	r8, #0
    5014:	bne	503c <cd_product_class_init+0xdc>
    5018:	mvn	r0, #0
    501c:	ldr	r1, [pc, #528]	; 5234 <cd_product_class_init+0x2d4>
    5020:	add	r2, r4, #1
    5024:	ldr	r3, [pc, #496]	; 521c <cd_product_class_init+0x2bc>
    5028:	movw	r4, #2774	; 0xad6
    502c:	str	r4, [sp]
    5030:	bl	0 <coda_set_error>
    5034:	mvn	r0, #0
    5038:	b	50b0 <cd_product_class_init+0x150>
    503c:	mov	r1, r8
    5040:	mov	r0, r6
    5044:	bl	0 <coda_za_read_entry>
    5048:	cmp	r0, #0
    504c:	beq	5060 <cd_product_class_init+0x100>
    5050:	mov	r0, r8
    5054:	bl	0 <free>
    5058:	mvn	r0, #0
    505c:	b	50b0 <cd_product_class_init+0x150>
    5060:	mov	r0, #0
    5064:	strb	r0, [r8, r4]
    5068:	add	r2, sp, #48	; 0x30
    506c:	mov	r3, #1
    5070:	mov	r1, r4
    5074:	mov	r0, r8
    5078:	bl	0 <coda_ascii_parse_int64>
    507c:	cmp	r0, #0
    5080:	bge	509c <cd_product_class_init+0x13c>
    5084:	mov	r0, r8
    5088:	bl	0 <free>
    508c:	mov	r0, #0
    5090:	str	r0, [sp, #40]	; 0x28
    5094:	mov	r0, #0
    5098:	b	50b0 <cd_product_class_init+0x150>
    509c:	mov	r0, r8
    50a0:	bl	0 <free>
    50a4:	ldr	r1, [sp, #48]	; 0x30
    50a8:	str	r1, [sp, #40]	; 0x28
    50ac:	mov	r0, #0
    50b0:	cmp	r0, #0
    50b4:	beq	50c0 <cd_product_class_init+0x160>
    50b8:	mvn	r0, #0
    50bc:	b	51fc <cd_product_class_init+0x29c>
    50c0:	mov	r0, r7
    50c4:	bl	0 <coda_data_dictionary_has_product_class>
    50c8:	cmp	r0, #0
    50cc:	beq	5130 <cd_product_class_init+0x1d0>
    50d0:	mov	r0, r7
    50d4:	bl	0 <coda_data_dictionary_get_product_class>
    50d8:	mov	r4, r0
    50dc:	cmp	r4, #0
    50e0:	bne	50ec <cd_product_class_init+0x18c>
    50e4:	mvn	r0, #0
    50e8:	b	51fc <cd_product_class_init+0x29c>
    50ec:	mov	r0, r4
    50f0:	bl	0 <coda_product_class_get_revision>
    50f4:	ldr	r2, [sp, #40]	; 0x28
    50f8:	cmp	r2, r0
    50fc:	bgt	5118 <cd_product_class_init+0x1b8>
    5100:	mov	r3, #1
    5104:	str	r3, [r5, #40]	; 0x28
    5108:	mov	r0, r5
    510c:	bl	880 <abort_parser>
    5110:	mov	r0, #0
    5114:	b	51fc <cd_product_class_init+0x29c>
    5118:	mov	r0, r4
    511c:	bl	0 <coda_data_dictionary_remove_product_class>
    5120:	cmp	r0, #0
    5124:	beq	5130 <cd_product_class_init+0x1d0>
    5128:	mvn	r0, #0
    512c:	b	51fc <cd_product_class_init+0x29c>
    5130:	ldr	r2, [r5]
    5134:	ldr	r3, [pc, #252]	; 5238 <cd_product_class_init+0x2d8>
    5138:	str	r3, [r2, #40]	; 0x28
    513c:	mov	r0, r7
    5140:	bl	0 <coda_product_class_new>
    5144:	str	r0, [r5, #24]
    5148:	cmp	r0, #0
    514c:	bne	5158 <cd_product_class_init+0x1f8>
    5150:	mvn	r0, #0
    5154:	b	51fc <cd_product_class_init+0x29c>
    5158:	ldr	r0, [r5, #16]
    515c:	bl	0 <coda_za_get_filename>
    5160:	mov	r1, r0
    5164:	ldr	r0, [r5, #24]
    5168:	bl	0 <coda_product_class_set_definition_file>
    516c:	cmp	r0, #0
    5170:	beq	518c <cd_product_class_init+0x22c>
    5174:	ldr	r0, [r5, #24]
    5178:	bl	0 <coda_product_class_delete>
    517c:	mov	ip, #0
    5180:	str	ip, [r5, #24]
    5184:	mvn	r0, #0
    5188:	b	51fc <cd_product_class_init+0x29c>
    518c:	ldr	r0, [r5, #24]
    5190:	ldr	r1, [sp, #40]	; 0x28
    5194:	bl	0 <coda_product_class_set_revision>
    5198:	cmp	r0, #0
    519c:	beq	51b8 <cd_product_class_init+0x258>
    51a0:	ldr	r0, [r5, #24]
    51a4:	bl	0 <coda_product_class_delete>
    51a8:	mov	r2, #0
    51ac:	str	r2, [r5, #24]
    51b0:	mvn	r0, #0
    51b4:	b	51fc <cd_product_class_init+0x29c>
    51b8:	ldr	ip, [r5]
    51bc:	ldr	r1, [r5, #24]
    51c0:	str	r1, [ip, #8]
    51c4:	ldr	r0, [r5]
    51c8:	mov	r1, #11
    51cc:	ldr	r2, [pc, #76]	; 5220 <cd_product_class_init+0x2c0>
    51d0:	ldr	r3, [pc, #88]	; 5230 <cd_product_class_init+0x2d0>
    51d4:	bl	8bc <register_sub_element>
    51d8:	ldr	r0, [r5]
    51dc:	mov	r1, #32
    51e0:	ldr	r2, [pc, #88]	; 5240 <cd_product_class_init+0x2e0>
    51e4:	ldr	r3, [pc, #60]	; 5228 <cd_product_class_init+0x2c8>
    51e8:	bl	8bc <register_sub_element>
    51ec:	ldr	r3, [r5]
    51f0:	ldr	r2, [pc, #68]	; 523c <cd_product_class_init+0x2dc>
    51f4:	str	r2, [r3, #36]	; 0x24
    51f8:	mov	r0, #0
    51fc:	ldr	r4, [sp, #16]
    5200:	ldr	r5, [sp, #20]
    5204:	ldr	r6, [sp, #24]
    5208:	ldr	r7, [sp, #28]
    520c:	ldr	r8, [sp, #32]
    5210:	ldr	lr, [sp, #8]
    5214:	add	sp, sp, #56	; 0x38
    5218:	bx	lr
    521c:	.word	0x00001939
    5220:	.word	0x00000000
    5224:	.word	0x0000047e
    5228:	.word	0x00000000
    522c:	.word	0x000013f4
    5230:	.word	0x00000000
    5234:	.word	0x00000e60
	...

00005244 <cd_product_definition_set_description>:
    5244:	mov	ip, sp
    5248:	sub	sp, sp, #8
    524c:	str	ip, [sp]
    5250:	str	lr, [sp, #4]
    5254:	ldr	r0, [r0]
    5258:	ldr	r1, [r0, #12]
    525c:	cmp	r1, #0
    5260:	bne	527c <cd_product_definition_set_description+0x38>
    5264:	ldr	r0, [r0, #396]	; 0x18c
    5268:	ldr	r0, [r0, #8]
    526c:	ldr	r1, [pc, #28]	; 5290 <cd_product_definition_set_description+0x4c>
    5270:	ldr	lr, [sp, #4]
    5274:	add	sp, sp, #8
    5278:	b	0 <coda_product_definition_set_description>
    527c:	ldr	r3, [r0, #396]	; 0x18c
    5280:	ldr	r0, [r3, #8]
    5284:	ldr	lr, [sp, #4]
    5288:	add	sp, sp, #8
    528c:	b	0 <coda_product_definition_set_description>
    5290:	.word	0x00002067

00005294 <cd_product_definition_add_detection_rule>:
    5294:	mov	ip, sp
    5298:	sub	sp, sp, #16
    529c:	str	ip, [sp]
    52a0:	str	lr, [sp, #4]
    52a4:	str	r4, [sp, #8]
    52a8:	mov	r4, r0
    52ac:	ldr	r1, [r4]
    52b0:	ldr	r2, [r1, #396]	; 0x18c
    52b4:	ldr	r0, [r2, #8]
    52b8:	ldr	r1, [r1, #8]
    52bc:	bl	0 <coda_product_definition_add_detection_rule>
    52c0:	cmp	r0, #0
    52c4:	beq	52d0 <cd_product_definition_add_detection_rule+0x3c>
    52c8:	mvn	r0, #0
    52cc:	b	52e0 <cd_product_definition_add_detection_rule+0x4c>
    52d0:	ldr	r1, [r4]
    52d4:	mov	r3, #0
    52d8:	str	r3, [r1, #8]
    52dc:	mov	r0, #0
    52e0:	ldr	r4, [sp, #8]
    52e4:	ldr	lr, [sp, #4]
    52e8:	add	sp, sp, #16
    52ec:	bx	lr

000052f0 <cd_product_definition_set_root_type>:
    52f0:	mov	ip, sp
    52f4:	sub	sp, sp, #8
    52f8:	str	ip, [sp]
    52fc:	str	lr, [sp, #4]
    5300:	ldr	r1, [r0]
    5304:	ldr	r2, [r1, #396]	; 0x18c
    5308:	ldr	r0, [r2, #8]
    530c:	ldr	r1, [r1, #8]
    5310:	bl	0 <coda_product_definition_set_root_type>
    5314:	cmp	r0, #0
    5318:	beq	5324 <cd_product_definition_set_root_type+0x34>
    531c:	mvn	r0, #0
    5320:	b	5328 <cd_product_definition_set_root_type+0x38>
    5324:	mov	r0, #0
    5328:	ldr	lr, [sp, #4]
    532c:	add	sp, sp, #8
    5330:	bx	lr

00005334 <cd_product_definition_add_product_variable>:
    5334:	mov	ip, sp
    5338:	sub	sp, sp, #16
    533c:	str	ip, [sp]
    5340:	str	lr, [sp, #4]
    5344:	str	r4, [sp, #8]
    5348:	mov	r4, r0
    534c:	ldr	r1, [r4]
    5350:	ldr	r2, [r1, #396]	; 0x18c
    5354:	ldr	r0, [r2, #8]
    5358:	ldr	r1, [r1, #8]
    535c:	bl	0 <coda_product_definition_add_product_variable>
    5360:	cmp	r0, #0
    5364:	beq	5370 <cd_product_definition_add_product_variable+0x3c>
    5368:	mvn	r0, #0
    536c:	b	5380 <cd_product_definition_add_product_variable+0x4c>
    5370:	ldr	r1, [r4]
    5374:	mov	r3, #0
    5378:	str	r3, [r1, #8]
    537c:	mov	r0, #0
    5380:	ldr	r4, [sp, #8]
    5384:	ldr	lr, [sp, #4]
    5388:	add	sp, sp, #16
    538c:	bx	lr

00005390 <cd_product_definition_finalise>:
    5390:	mov	ip, sp
    5394:	sub	sp, sp, #8
    5398:	str	ip, [sp]
    539c:	str	lr, [sp, #4]
    53a0:	ldr	r0, [r0]
    53a4:	ldr	r0, [r0, #8]
    53a8:	ldr	lr, [sp, #4]
    53ac:	add	sp, sp, #8
    53b0:	b	0 <coda_product_definition_validate>

000053b4 <cd_product_definition_init>:
    53b4:	mov	ip, sp
    53b8:	sub	sp, sp, #40	; 0x28
    53bc:	str	ip, [sp, #4]
    53c0:	str	lr, [sp, #8]
    53c4:	str	r4, [sp, #16]
    53c8:	str	r5, [sp, #20]
    53cc:	str	r6, [sp, #24]
    53d0:	mov	r4, r1
    53d4:	mov	r5, r0
    53d8:	ldr	r1, [pc, #420]	; 5584 <cd_product_definition_init+0x1d0>
    53dc:	ldr	r2, [r5]
    53e0:	ldr	r2, [r2]
    53e4:	mov	r0, r4
    53e8:	bl	54c <get_mandatory_attribute_value>
    53ec:	mov	r6, r0
    53f0:	cmp	r6, #0
    53f4:	bne	5400 <cd_product_definition_init+0x4c>
    53f8:	mvn	r0, #0
    53fc:	b	5568 <cd_product_definition_init+0x1b4>
    5400:	ldr	r1, [pc, #412]	; 55a4 <cd_product_definition_init+0x1f0>
    5404:	ldr	ip, [r5]
    5408:	ldr	r2, [ip]
    540c:	mov	r0, r4
    5410:	bl	54c <get_mandatory_attribute_value>
    5414:	cmp	r0, #0
    5418:	bne	5424 <cd_product_definition_init+0x70>
    541c:	mvn	r0, #0
    5420:	b	5568 <cd_product_definition_init+0x1b4>
    5424:	ldr	ip, [r5]
    5428:	add	r1, ip, #44	; 0x2c
    542c:	bl	0 <coda_format_from_string>
    5430:	cmp	r0, #0
    5434:	beq	5440 <cd_product_definition_init+0x8c>
    5438:	mvn	r0, #0
    543c:	b	5568 <cd_product_definition_init+0x1b4>
    5440:	ldr	r2, [r5]
    5444:	mov	r3, #1
    5448:	str	r3, [r2, #48]	; 0x30
    544c:	ldr	r1, [pc, #324]	; 5598 <cd_product_definition_init+0x1e4>
    5450:	ldr	r0, [r5]
    5454:	ldr	r2, [r0]
    5458:	mov	r0, r4
    545c:	bl	54c <get_mandatory_attribute_value>
    5460:	mov	r4, r0
    5464:	cmp	r4, #0
    5468:	bne	5474 <cd_product_definition_init+0xc0>
    546c:	mvn	r0, #0
    5470:	b	5568 <cd_product_definition_init+0x1b4>
    5474:	ldr	r1, [pc, #292]	; 55a0 <cd_product_definition_init+0x1ec>
    5478:	add	r2, sp, #32
    547c:	mov	r0, r4
    5480:	bl	0 <sscanf>
    5484:	cmp	r0, #1
    5488:	beq	54a8 <cd_product_definition_init+0xf4>
    548c:	movw	r0, #65136	; 0xfe70
    5490:	movt	r0, #65535	; 0xffff
    5494:	ldr	r1, [pc, #244]	; 5590 <cd_product_definition_init+0x1dc>
    5498:	mov	r2, r4
    549c:	bl	0 <coda_set_error>
    54a0:	mvn	r0, #0
    54a4:	b	5568 <cd_product_definition_init+0x1b4>
    54a8:	ldr	r2, [r5]
    54ac:	ldr	r3, [pc, #216]	; 558c <cd_product_definition_init+0x1d8>
    54b0:	str	r3, [r2, #40]	; 0x28
    54b4:	ldr	r3, [r5]
    54b8:	ldr	r1, [r3, #44]	; 0x2c
    54bc:	ldr	r2, [sp, #32]
    54c0:	mov	r0, r6
    54c4:	bl	0 <coda_product_definition_new>
    54c8:	str	r0, [r5, #28]
    54cc:	cmp	r0, #0
    54d0:	bne	54dc <cd_product_definition_init+0x128>
    54d4:	mvn	r0, #0
    54d8:	b	5568 <cd_product_definition_init+0x1b4>
    54dc:	ldr	ip, [pc, #156]	; 5580 <cd_product_definition_init+0x1cc>
    54e0:	ldr	r1, [ip]
    54e4:	cmp	r1, #0
    54e8:	beq	5530 <cd_product_definition_init+0x17c>
    54ec:	ldr	r2, [r5, #16]
    54f0:	mov	r1, #2
    54f4:	ldr	r3, [r5, #24]
    54f8:	str	r0, [sp]
    54fc:	mov	r0, r2
    5500:	mov	r2, r6
    5504:	bl	7cfc <parse_entry>
    5508:	cmp	r0, #0
    550c:	beq	5530 <cd_product_definition_init+0x17c>
    5510:	ldr	r0, [r5, #28]
    5514:	bl	0 <coda_product_definition_delete>
    5518:	mov	r0, #0
    551c:	str	r0, [r5, #28]
    5520:	mov	r3, #0
    5524:	str	r3, [r5, #44]	; 0x2c
    5528:	mvn	r0, #0
    552c:	b	5568 <cd_product_definition_init+0x1b4>
    5530:	ldr	r1, [r5]
    5534:	ldr	r2, [r5, #28]
    5538:	str	r2, [r1, #8]
    553c:	ldr	r0, [r5]
    5540:	mov	r1, #11
    5544:	ldr	r2, [pc, #60]	; 5588 <cd_product_definition_init+0x1d4>
    5548:	ldr	r3, [pc, #88]	; 55a8 <cd_product_definition_init+0x1f4>
    554c:	bl	8bc <register_sub_element>
    5550:	ldr	r0, [r5]
    5554:	mov	r1, #12
    5558:	ldr	r2, [pc, #52]	; 5594 <cd_product_definition_init+0x1e0>
    555c:	ldr	r3, [pc, #56]	; 559c <cd_product_definition_init+0x1e8>
    5560:	bl	8bc <register_sub_element>
    5564:	mov	r0, #0
    5568:	ldr	r4, [sp, #16]
    556c:	ldr	r5, [sp, #20]
    5570:	ldr	r6, [sp, #24]
    5574:	ldr	lr, [sp, #8]
    5578:	add	sp, sp, #40	; 0x28
    557c:	bx	lr
    5580:	.word	0x00000000
    5584:	.word	0x00000c10
	...
    5590:	.word	0x00001b45
    5594:	.word	0x00000000
    5598:	.word	0x00001bb8
    559c:	.word	0x00000000
    55a0:	.word	0x00000831
    55a4:	.word	0x00001746
    55a8:	.word	0x00000000

000055ac <cd_product_definition_sub_init>:
    55ac:	mov	ip, sp
    55b0:	sub	sp, sp, #24
    55b4:	str	ip, [sp]
    55b8:	str	lr, [sp, #4]
    55bc:	str	r4, [sp, #8]
    55c0:	str	r5, [sp, #12]
    55c4:	str	r6, [sp, #16]
    55c8:	mov	r4, r1
    55cc:	mov	r6, r0
    55d0:	ldr	ip, [r6, #28]
    55d4:	cmp	ip, #0
    55d8:	bne	55f0 <cd_product_definition_sub_init+0x44>
    55dc:	ldr	r0, [pc, #404]	; 5778 <cd_product_definition_sub_init+0x1cc>
    55e0:	ldr	r1, [pc, #364]	; 5754 <cd_product_definition_sub_init+0x1a8>
    55e4:	movw	r2, #2974	; 0xb9e
    55e8:	ldr	r3, [pc, #348]	; 574c <cd_product_definition_sub_init+0x1a0>
    55ec:	bl	0 <__assert_fail>
    55f0:	ldr	r3, [r6]
    55f4:	ldr	ip, [pc, #360]	; 5764 <cd_product_definition_sub_init+0x1b8>
    55f8:	str	ip, [r3, #40]	; 0x28
    55fc:	ldr	r2, [r6]
    5600:	ldr	ip, [r6, #28]
    5604:	str	ip, [r2, #8]
    5608:	ldr	r1, [pc, #336]	; 5760 <cd_product_definition_sub_init+0x1b4>
    560c:	ldr	r2, [r6]
    5610:	ldr	r2, [r2]
    5614:	mov	r0, r4
    5618:	bl	54c <get_mandatory_attribute_value>
    561c:	mov	r5, r0
    5620:	cmp	r5, #0
    5624:	bne	5630 <cd_product_definition_sub_init+0x84>
    5628:	mvn	r0, #0
    562c:	b	5734 <cd_product_definition_sub_init+0x188>
    5630:	ldr	r3, [r6, #28]
    5634:	ldr	r0, [r3, #8]
    5638:	mov	r1, r5
    563c:	bl	0 <strcmp>
    5640:	cmp	r0, #0
    5644:	beq	566c <cd_product_definition_sub_init+0xc0>
    5648:	movw	r0, #65136	; 0xfe70
    564c:	movt	r0, #65535	; 0xffff
    5650:	ldr	r1, [pc, #260]	; 575c <cd_product_definition_sub_init+0x1b0>
    5654:	ldr	r2, [r6, #28]
    5658:	ldr	r3, [r2, #8]
    565c:	mov	r2, r5
    5660:	bl	0 <coda_set_error>
    5664:	mvn	r0, #0
    5668:	b	5734 <cd_product_definition_sub_init+0x188>
    566c:	ldr	r1, [pc, #264]	; 577c <cd_product_definition_sub_init+0x1d0>
    5670:	ldr	r0, [r6]
    5674:	ldr	r2, [r0]
    5678:	mov	r0, r4
    567c:	bl	54c <get_mandatory_attribute_value>
    5680:	cmp	r0, #0
    5684:	bne	5690 <cd_product_definition_sub_init+0xe4>
    5688:	mvn	r0, #0
    568c:	b	5734 <cd_product_definition_sub_init+0x188>
    5690:	ldr	r1, [r6]
    5694:	add	r1, r1, #44	; 0x2c
    5698:	bl	0 <coda_format_from_string>
    569c:	cmp	r0, #0
    56a0:	beq	56ac <cd_product_definition_sub_init+0x100>
    56a4:	mvn	r0, #0
    56a8:	b	5734 <cd_product_definition_sub_init+0x188>
    56ac:	ldr	r0, [r6]
    56b0:	mov	r3, #1
    56b4:	str	r3, [r0, #48]	; 0x30
    56b8:	ldr	r2, [r6, #28]
    56bc:	ldr	r1, [r2]
    56c0:	ldr	r0, [r6]
    56c4:	ldr	r3, [r0, #44]	; 0x2c
    56c8:	cmp	r1, r3
    56cc:	beq	56ec <cd_product_definition_sub_init+0x140>
    56d0:	movw	r0, #65136	; 0xfe70
    56d4:	movt	r0, #65535	; 0xffff
    56d8:	ldr	r1, [pc, #112]	; 5750 <cd_product_definition_sub_init+0x1a4>
    56dc:	ldr	r2, [r2, #8]
    56e0:	bl	0 <coda_set_error>
    56e4:	mvn	r0, #0
    56e8:	b	5734 <cd_product_definition_sub_init+0x188>
    56ec:	cmp	r1, #2
    56f0:	bne	5708 <cd_product_definition_sub_init+0x15c>
    56f4:	mov	r1, #35	; 0x23
    56f8:	ldr	r2, [pc, #112]	; 5770 <cd_product_definition_sub_init+0x1c4>
    56fc:	ldr	r3, [pc, #100]	; 5768 <cd_product_definition_sub_init+0x1bc>
    5700:	bl	8bc <register_sub_element>
    5704:	b	5710 <cd_product_definition_sub_init+0x164>
    5708:	ldr	r1, [pc, #88]	; 5768 <cd_product_definition_sub_init+0x1bc>
    570c:	bl	940 <register_type_elements>
    5710:	ldr	r0, [r6]
    5714:	mov	r1, #33	; 0x21
    5718:	ldr	r2, [pc, #76]	; 576c <cd_product_definition_sub_init+0x1c0>
    571c:	ldr	r3, [pc, #80]	; 5774 <cd_product_definition_sub_init+0x1c8>
    5720:	bl	8bc <register_sub_element>
    5724:	ldr	ip, [r6]
    5728:	ldr	r2, [pc, #40]	; 5758 <cd_product_definition_sub_init+0x1ac>
    572c:	str	r2, [ip, #36]	; 0x24
    5730:	mov	r0, #0
    5734:	ldr	r4, [sp, #8]
    5738:	ldr	r5, [sp, #12]
    573c:	ldr	r6, [sp, #16]
    5740:	ldr	lr, [sp, #4]
    5744:	add	sp, sp, #24
    5748:	bx	lr
    574c:	.word	0x00002165
    5750:	.word	0x00000834
    5754:	.word	0x00001939
    5758:	.word	0x00000000
    575c:	.word	0x00001f29
    5760:	.word	0x00000c10
	...
    5778:	.word	0x00000595
    577c:	.word	0x00001746

00005780 <cd_product_type_set_description>:
    5780:	mov	ip, sp
    5784:	sub	sp, sp, #8
    5788:	str	ip, [sp]
    578c:	str	lr, [sp, #4]
    5790:	ldr	r0, [r0]
    5794:	ldr	r1, [r0, #12]
    5798:	cmp	r1, #0
    579c:	bne	57b8 <cd_product_type_set_description+0x38>
    57a0:	ldr	r0, [r0, #396]	; 0x18c
    57a4:	ldr	r0, [r0, #8]
    57a8:	ldr	r1, [pc, #28]	; 57cc <cd_product_type_set_description+0x4c>
    57ac:	ldr	lr, [sp, #4]
    57b0:	add	sp, sp, #8
    57b4:	b	0 <coda_product_type_set_description>
    57b8:	ldr	r3, [r0, #396]	; 0x18c
    57bc:	ldr	r0, [r3, #8]
    57c0:	ldr	lr, [sp, #4]
    57c4:	add	sp, sp, #8
    57c8:	b	0 <coda_product_type_set_description>
    57cc:	.word	0x00002067

000057d0 <cd_product_type_add_product_definition>:
    57d0:	mov	ip, sp
    57d4:	sub	sp, sp, #16
    57d8:	str	ip, [sp]
    57dc:	str	lr, [sp, #4]
    57e0:	str	r4, [sp, #8]
    57e4:	mov	r4, r0
    57e8:	ldr	r1, [r4]
    57ec:	ldr	r2, [r1, #396]	; 0x18c
    57f0:	ldr	r0, [r2, #8]
    57f4:	ldr	r1, [r1, #8]
    57f8:	bl	0 <coda_product_type_add_product_definition>
    57fc:	cmp	r0, #0
    5800:	beq	580c <cd_product_type_add_product_definition+0x3c>
    5804:	mvn	r0, #0
    5808:	b	581c <cd_product_type_add_product_definition+0x4c>
    580c:	ldr	r1, [r4]
    5810:	mov	r3, #0
    5814:	str	r3, [r1, #8]
    5818:	mov	r0, #0
    581c:	ldr	r4, [sp, #8]
    5820:	ldr	lr, [sp, #4]
    5824:	add	sp, sp, #16
    5828:	bx	lr

0000582c <cd_product_type_init>:
    582c:	mov	ip, sp
    5830:	sub	sp, sp, #16
    5834:	str	ip, [sp]
    5838:	str	lr, [sp, #4]
    583c:	str	r4, [sp, #8]
    5840:	mov	r4, r0
    5844:	ldr	r0, [pc, #144]	; 58dc <cd_product_type_init+0xb0>
    5848:	ldr	r2, [r4]
    584c:	ldr	r2, [r2]
    5850:	mov	r3, r0
    5854:	mov	r0, r1
    5858:	mov	r1, r3
    585c:	bl	54c <get_mandatory_attribute_value>
    5860:	cmp	r0, #0
    5864:	bne	5870 <cd_product_type_init+0x44>
    5868:	mvn	r0, #0
    586c:	b	58c8 <cd_product_type_init+0x9c>
    5870:	ldr	r1, [r4]
    5874:	ldr	ip, [pc, #100]	; 58e0 <cd_product_type_init+0xb4>
    5878:	str	ip, [r1, #40]	; 0x28
    587c:	bl	0 <coda_product_type_new>
    5880:	ldr	r3, [r4]
    5884:	str	r0, [r3, #8]
    5888:	ldr	r0, [r4]
    588c:	ldr	r1, [r0, #8]
    5890:	cmp	r1, #0
    5894:	bne	58a0 <cd_product_type_init+0x74>
    5898:	mvn	r0, #0
    589c:	b	58c8 <cd_product_type_init+0x9c>
    58a0:	mov	r1, #11
    58a4:	ldr	r2, [pc, #44]	; 58d8 <cd_product_type_init+0xac>
    58a8:	ldr	r3, [pc, #56]	; 58e8 <cd_product_type_init+0xbc>
    58ac:	bl	8bc <register_sub_element>
    58b0:	ldr	r0, [r4]
    58b4:	mov	r1, #31
    58b8:	ldr	r2, [pc, #36]	; 58e4 <cd_product_type_init+0xb8>
    58bc:	ldr	r3, [pc, #40]	; 58ec <cd_product_type_init+0xc0>
    58c0:	bl	8bc <register_sub_element>
    58c4:	mov	r0, #0
    58c8:	ldr	r4, [sp, #8]
    58cc:	ldr	lr, [sp, #4]
    58d0:	add	sp, sp, #16
    58d4:	bx	lr
    58d8:	.word	0x00000000
    58dc:	.word	0x0000047e
	...

000058f0 <cd_product_variable_set_size_expression>:
    58f0:	mov	ip, sp
    58f4:	sub	sp, sp, #16
    58f8:	str	ip, [sp]
    58fc:	str	lr, [sp, #4]
    5900:	str	r4, [sp, #8]
    5904:	mov	r4, r0
    5908:	ldr	r1, [r4]
    590c:	ldr	r2, [r1, #396]	; 0x18c
    5910:	ldr	r0, [r2, #8]
    5914:	ldr	r1, [r1, #8]
    5918:	bl	0 <coda_product_variable_set_size_expression>
    591c:	cmp	r0, #0
    5920:	beq	592c <cd_product_variable_set_size_expression+0x3c>
    5924:	mvn	r0, #0
    5928:	b	593c <cd_product_variable_set_size_expression+0x4c>
    592c:	ldr	r1, [r4]
    5930:	mov	r3, #0
    5934:	str	r3, [r1, #8]
    5938:	mov	r0, #0
    593c:	ldr	r4, [sp, #8]
    5940:	ldr	lr, [sp, #4]
    5944:	add	sp, sp, #16
    5948:	bx	lr

0000594c <cd_product_variable_set_init_expression>:
    594c:	mov	ip, sp
    5950:	sub	sp, sp, #16
    5954:	str	ip, [sp]
    5958:	str	lr, [sp, #4]
    595c:	str	r4, [sp, #8]
    5960:	mov	r4, r0
    5964:	ldr	r1, [r4]
    5968:	ldr	r2, [r1, #396]	; 0x18c
    596c:	ldr	r0, [r2, #8]
    5970:	ldr	r1, [r1, #8]
    5974:	bl	0 <coda_product_variable_set_init_expression>
    5978:	cmp	r0, #0
    597c:	beq	5988 <cd_product_variable_set_init_expression+0x3c>
    5980:	mvn	r0, #0
    5984:	b	5998 <cd_product_variable_set_init_expression+0x4c>
    5988:	ldr	r1, [r4]
    598c:	mov	r3, #0
    5990:	str	r3, [r1, #8]
    5994:	mov	r0, #0
    5998:	ldr	r4, [sp, #8]
    599c:	ldr	lr, [sp, #4]
    59a0:	add	sp, sp, #16
    59a4:	bx	lr

000059a8 <cd_product_variable_finalise>:
    59a8:	mov	ip, sp
    59ac:	sub	sp, sp, #8
    59b0:	str	ip, [sp]
    59b4:	str	lr, [sp, #4]
    59b8:	ldr	r0, [r0]
    59bc:	ldr	r0, [r0, #8]
    59c0:	ldr	lr, [sp, #4]
    59c4:	add	sp, sp, #8
    59c8:	b	0 <coda_product_variable_validate>

000059cc <cd_product_variable_init>:
    59cc:	mov	ip, sp
    59d0:	sub	sp, sp, #16
    59d4:	str	ip, [sp]
    59d8:	str	lr, [sp, #4]
    59dc:	str	r4, [sp, #8]
    59e0:	mov	r4, r0
    59e4:	mov	r0, r1
    59e8:	ldr	r1, [pc, #148]	; 5a84 <cd_product_variable_init+0xb8>
    59ec:	ldr	r2, [r4]
    59f0:	ldr	r2, [r2]
    59f4:	bl	54c <get_mandatory_attribute_value>
    59f8:	cmp	r0, #0
    59fc:	bne	5a08 <cd_product_variable_init+0x3c>
    5a00:	mvn	r0, #0
    5a04:	b	5a6c <cd_product_variable_init+0xa0>
    5a08:	ldr	ip, [r4]
    5a0c:	ldr	r3, [pc, #124]	; 5a90 <cd_product_variable_init+0xc4>
    5a10:	str	r3, [ip, #40]	; 0x28
    5a14:	bl	0 <coda_product_variable_new>
    5a18:	ldr	ip, [r4]
    5a1c:	str	r0, [ip, #8]
    5a20:	ldr	r0, [r4]
    5a24:	ldr	r1, [r0, #8]
    5a28:	cmp	r1, #0
    5a2c:	bne	5a38 <cd_product_variable_init+0x6c>
    5a30:	mvn	r0, #0
    5a34:	b	5a6c <cd_product_variable_init+0xa0>
    5a38:	mov	r1, #13
    5a3c:	ldr	r2, [pc, #56]	; 5a7c <cd_product_variable_init+0xb0>
    5a40:	ldr	r3, [pc, #64]	; 5a88 <cd_product_variable_init+0xbc>
    5a44:	bl	8bc <register_sub_element>
    5a48:	ldr	r0, [r4]
    5a4c:	mov	r1, #19
    5a50:	ldr	r2, [pc, #40]	; 5a80 <cd_product_variable_init+0xb4>
    5a54:	ldr	r3, [pc, #56]	; 5a94 <cd_product_variable_init+0xc8>
    5a58:	bl	8bc <register_sub_element>
    5a5c:	ldr	r0, [r4]
    5a60:	ldr	r2, [pc, #36]	; 5a8c <cd_product_variable_init+0xc0>
    5a64:	str	r2, [r0, #36]	; 0x24
    5a68:	mov	r0, #0
    5a6c:	ldr	r4, [sp, #8]
    5a70:	ldr	lr, [sp, #4]
    5a74:	add	sp, sp, #16
    5a78:	bx	lr
	...
    5a84:	.word	0x0000047e
	...

00005a98 <cd_raw_set_fixed_value>:
    5a98:	mov	ip, sp
    5a9c:	sub	sp, sp, #16
    5aa0:	str	ip, [sp]
    5aa4:	str	lr, [sp, #4]
    5aa8:	str	r4, [sp, #8]
    5aac:	mov	r4, r0
    5ab0:	ldr	r3, [r4]
    5ab4:	ldr	r0, [r3, #12]
    5ab8:	bl	2b0 <decode_escaped_string>
    5abc:	mov	r1, r0
    5ac0:	cmp	r1, #0
    5ac4:	bge	5ae0 <cd_raw_set_fixed_value+0x48>
    5ac8:	movw	r0, #65136	; 0xfe70
    5acc:	movt	r0, #65535	; 0xffff
    5ad0:	ldr	r1, [pc, #72]	; 5b20 <cd_raw_set_fixed_value+0x88>
    5ad4:	bl	0 <coda_set_error>
    5ad8:	mvn	r0, #0
    5adc:	b	5b10 <cd_raw_set_fixed_value+0x78>
    5ae0:	cmp	r1, #0
    5ae4:	ble	5b0c <cd_raw_set_fixed_value+0x74>
    5ae8:	ldr	r2, [r4]
    5aec:	ldr	r3, [r2, #396]	; 0x18c
    5af0:	ldr	r0, [r3, #8]
    5af4:	ldr	r2, [r2, #12]
    5af8:	bl	0 <coda_type_raw_set_fixed_value>
    5afc:	cmp	r0, #0
    5b00:	beq	5b0c <cd_raw_set_fixed_value+0x74>
    5b04:	mvn	r0, #0
    5b08:	b	5b10 <cd_raw_set_fixed_value+0x78>
    5b0c:	mov	r0, #0
    5b10:	ldr	r4, [sp, #8]
    5b14:	ldr	lr, [sp, #4]
    5b18:	add	sp, sp, #16
    5b1c:	bx	lr
    5b20:	.word	0x00000bc3

00005b24 <cd_raw_finalise>:
    5b24:	mov	ip, sp
    5b28:	sub	sp, sp, #8
    5b2c:	str	ip, [sp]
    5b30:	str	lr, [sp, #4]
    5b34:	ldr	r0, [r0]
    5b38:	ldr	r0, [r0, #8]
    5b3c:	ldr	lr, [sp, #4]
    5b40:	add	sp, sp, #8
    5b44:	b	0 <coda_type_raw_validate>

00005b48 <cd_raw_init>:
    5b48:	mov	ip, sp
    5b4c:	sub	sp, sp, #16
    5b50:	str	ip, [sp]
    5b54:	str	lr, [sp, #4]
    5b58:	str	r4, [sp, #8]
    5b5c:	str	r5, [sp, #12]
    5b60:	mov	r5, r1
    5b64:	mov	r4, r0
    5b68:	mov	r1, r5
    5b6c:	mov	r0, r4
    5b70:	bl	6b4 <handle_format_attribute_for_type>
    5b74:	cmp	r0, #0
    5b78:	beq	5b84 <cd_raw_init+0x3c>
    5b7c:	mvn	r0, #0
    5b80:	b	5c24 <cd_raw_init+0xdc>
    5b84:	ldr	r0, [r4]
    5b88:	ldr	r2, [pc, #172]	; 5c3c <cd_raw_init+0xf4>
    5b8c:	str	r2, [r0, #40]	; 0x28
    5b90:	ldr	r1, [r4]
    5b94:	ldr	r0, [r1, #44]	; 0x2c
    5b98:	bl	0 <coda_type_raw_new>
    5b9c:	ldr	ip, [r4]
    5ba0:	str	r0, [ip, #8]
    5ba4:	ldr	r0, [r4]
    5ba8:	ldr	r2, [r0, #8]
    5bac:	cmp	r2, #0
    5bb0:	bne	5bbc <cd_raw_init+0x74>
    5bb4:	mvn	r0, #0
    5bb8:	b	5c24 <cd_raw_init+0xdc>
    5bbc:	mov	r1, r5
    5bc0:	mov	r0, r4
    5bc4:	bl	5c4 <handle_name_attribute_for_type>
    5bc8:	cmp	r0, #0
    5bcc:	beq	5bd8 <cd_raw_init+0x90>
    5bd0:	mvn	r0, #0
    5bd4:	b	5c24 <cd_raw_init+0xdc>
    5bd8:	ldr	r0, [r4]
    5bdc:	mov	r1, #11
    5be0:	ldr	r2, [pc, #80]	; 5c38 <cd_raw_init+0xf0>
    5be4:	ldr	r3, [pc, #84]	; 5c40 <cd_raw_init+0xf8>
    5be8:	bl	8bc <register_sub_element>
    5bec:	ldr	r0, [r4]
    5bf0:	mov	r1, #7
    5bf4:	ldr	r2, [pc, #84]	; 5c50 <cd_raw_init+0x108>
    5bf8:	ldr	r3, [pc, #72]	; 5c48 <cd_raw_init+0x100>
    5bfc:	bl	8bc <register_sub_element>
    5c00:	ldr	r0, [r4]
    5c04:	mov	r1, #16
    5c08:	ldr	r2, [pc, #40]	; 5c38 <cd_raw_init+0xf0>
    5c0c:	ldr	r3, [pc, #48]	; 5c44 <cd_raw_init+0xfc>
    5c10:	bl	8bc <register_sub_element>
    5c14:	ldr	r0, [r4]
    5c18:	ldr	r1, [pc, #44]	; 5c4c <cd_raw_init+0x104>
    5c1c:	str	r1, [r0, #36]	; 0x24
    5c20:	mov	r0, #0
    5c24:	ldr	r4, [sp, #8]
    5c28:	ldr	r5, [sp, #12]
    5c2c:	ldr	lr, [sp, #4]
    5c30:	add	sp, sp, #16
    5c34:	bx	lr
	...

00005c54 <cd_record_add_field>:
    5c54:	mov	ip, sp
    5c58:	sub	sp, sp, #16
    5c5c:	str	ip, [sp]
    5c60:	str	lr, [sp, #4]
    5c64:	str	r4, [sp, #8]
    5c68:	mov	r4, r0
    5c6c:	ldr	r1, [r4]
    5c70:	ldr	r2, [r1, #396]	; 0x18c
    5c74:	ldr	r0, [r2, #8]
    5c78:	ldr	r1, [r1, #8]
    5c7c:	bl	0 <coda_type_record_add_field>
    5c80:	cmp	r0, #0
    5c84:	beq	5c90 <cd_record_add_field+0x3c>
    5c88:	mvn	r0, #0
    5c8c:	b	5ca0 <cd_record_add_field+0x4c>
    5c90:	ldr	r1, [r4]
    5c94:	mov	r3, #0
    5c98:	str	r3, [r1, #8]
    5c9c:	mov	r0, #0
    5ca0:	ldr	r4, [sp, #8]
    5ca4:	ldr	lr, [sp, #4]
    5ca8:	add	sp, sp, #16
    5cac:	bx	lr

00005cb0 <cd_record_finalise>:
    5cb0:	mov	ip, sp
    5cb4:	sub	sp, sp, #8
    5cb8:	str	ip, [sp]
    5cbc:	str	lr, [sp, #4]
    5cc0:	ldr	r0, [r0]
    5cc4:	ldr	r0, [r0, #8]
    5cc8:	ldr	lr, [sp, #4]
    5ccc:	add	sp, sp, #8
    5cd0:	b	0 <coda_type_record_validate>

00005cd4 <cd_record_init>:
    5cd4:	mov	ip, sp
    5cd8:	sub	sp, sp, #16
    5cdc:	str	ip, [sp]
    5ce0:	str	lr, [sp, #4]
    5ce4:	str	r4, [sp, #8]
    5ce8:	str	r5, [sp, #12]
    5cec:	mov	r5, r1
    5cf0:	mov	r4, r0
    5cf4:	mov	r1, r5
    5cf8:	mov	r0, r4
    5cfc:	bl	6b4 <handle_format_attribute_for_type>
    5d00:	cmp	r0, #0
    5d04:	beq	5d10 <cd_record_init+0x3c>
    5d08:	mvn	r0, #0
    5d0c:	b	5de0 <cd_record_init+0x10c>
    5d10:	ldr	ip, [r4]
    5d14:	ldr	r3, [pc, #232]	; 5e04 <cd_record_init+0x130>
    5d18:	str	r3, [ip, #40]	; 0x28
    5d1c:	ldr	r1, [r4]
    5d20:	ldr	r0, [r1, #44]	; 0x2c
    5d24:	bl	0 <coda_type_record_new>
    5d28:	ldr	r1, [r4]
    5d2c:	str	r0, [r1, #8]
    5d30:	ldr	r3, [r4]
    5d34:	ldr	r2, [r3, #8]
    5d38:	cmp	r2, #0
    5d3c:	bne	5d48 <cd_record_init+0x74>
    5d40:	mvn	r0, #0
    5d44:	b	5de0 <cd_record_init+0x10c>
    5d48:	mov	r1, r5
    5d4c:	mov	r0, r4
    5d50:	bl	5c4 <handle_name_attribute_for_type>
    5d54:	cmp	r0, #0
    5d58:	beq	5d64 <cd_record_init+0x90>
    5d5c:	mvn	r0, #0
    5d60:	b	5de0 <cd_record_init+0x10c>
    5d64:	ldr	r0, [r4]
    5d68:	mov	r1, #11
    5d6c:	ldr	r2, [pc, #140]	; 5e00 <cd_record_init+0x12c>
    5d70:	ldr	r3, [pc, #144]	; 5e08 <cd_record_init+0x134>
    5d74:	bl	8bc <register_sub_element>
    5d78:	ldr	r0, [r4]
    5d7c:	mov	r1, #7
    5d80:	ldr	r2, [pc, #116]	; 5dfc <cd_record_init+0x128>
    5d84:	ldr	r3, [pc, #132]	; 5e10 <cd_record_init+0x13c>
    5d88:	bl	8bc <register_sub_element>
    5d8c:	ldr	r0, [r4]
    5d90:	mov	r1, #14
    5d94:	ldr	r2, [pc, #112]	; 5e0c <cd_record_init+0x138>
    5d98:	ldr	r3, [pc, #120]	; 5e18 <cd_record_init+0x144>
    5d9c:	bl	8bc <register_sub_element>
    5da0:	ldr	r0, [r4]
    5da4:	mov	r1, #4
    5da8:	ldr	r2, [pc, #100]	; 5e14 <cd_record_init+0x140>
    5dac:	ldr	r3, [pc, #68]	; 5df8 <cd_record_init+0x124>
    5db0:	bl	8bc <register_sub_element>
    5db4:	ldr	r2, [r4]
    5db8:	ldr	r0, [pc, #52]	; 5df4 <cd_record_init+0x120>
    5dbc:	str	r0, [r2, #36]	; 0x24
    5dc0:	mov	r1, r5
    5dc4:	mov	r0, r4
    5dc8:	bl	77c <handle_xml_name>
    5dcc:	cmp	r0, #0
    5dd0:	beq	5ddc <cd_record_init+0x108>
    5dd4:	mvn	r0, #0
    5dd8:	b	5de0 <cd_record_init+0x10c>
    5ddc:	mov	r0, #0
    5de0:	ldr	r4, [sp, #8]
    5de4:	ldr	r5, [sp, #12]
    5de8:	ldr	lr, [sp, #4]
    5dec:	add	sp, sp, #16
    5df0:	bx	lr
	...

00005e1c <cd_scale_factor_set_type>:
    5e1c:	mov	ip, sp
    5e20:	sub	sp, sp, #8
    5e24:	str	ip, [sp]
    5e28:	str	lr, [sp, #4]
    5e2c:	ldr	r1, [r0]
    5e30:	ldr	ip, [r1, #396]	; 0x18c
    5e34:	ldr	r3, [r1, #8]
    5e38:	str	r3, [ip, #8]
    5e3c:	ldr	r2, [r0]
    5e40:	mov	r1, #0
    5e44:	str	r1, [r2, #8]
    5e48:	mov	r0, #0
    5e4c:	ldr	lr, [sp, #4]
    5e50:	add	sp, sp, #8
    5e54:	bx	lr

00005e58 <cd_scale_factor_finalise>:
    5e58:	mov	ip, sp
    5e5c:	sub	sp, sp, #8
    5e60:	str	ip, [sp]
    5e64:	str	lr, [sp, #4]
    5e68:	ldr	r0, [r0]
    5e6c:	ldr	r0, [r0, #8]
    5e70:	cmp	r0, #0
    5e74:	bne	5e90 <cd_scale_factor_finalise+0x38>
    5e78:	movw	r0, #65136	; 0xfe70
    5e7c:	movt	r0, #65535	; 0xffff
    5e80:	ldr	r1, [pc, #24]	; 5ea0 <cd_scale_factor_finalise+0x48>
    5e84:	bl	0 <coda_set_error>
    5e88:	mvn	r0, #0
    5e8c:	b	5e94 <cd_scale_factor_finalise+0x3c>
    5e90:	mov	r0, #0
    5e94:	ldr	lr, [sp, #4]
    5e98:	add	sp, sp, #8
    5e9c:	bx	lr
    5ea0:	.word	0x00001902

00005ea4 <cd_scale_factor_init>:
    5ea4:	mov	ip, sp
    5ea8:	sub	sp, sp, #16
    5eac:	str	ip, [sp]
    5eb0:	str	lr, [sp, #4]
    5eb4:	str	r4, [sp, #8]
    5eb8:	str	r5, [sp, #12]
    5ebc:	mov	r4, r1
    5ec0:	mov	r5, r0
    5ec4:	ldr	r1, [pc, #320]	; 600c <cd_scale_factor_init+0x168>
    5ec8:	mov	r0, r4
    5ecc:	bl	4e8 <get_attribute_value>
    5ed0:	cmp	r0, #0
    5ed4:	beq	5ef0 <cd_scale_factor_init+0x4c>
    5ed8:	movw	r0, #65136	; 0xfe70
    5edc:	movt	r0, #65535	; 0xffff
    5ee0:	ldr	r1, [pc, #288]	; 6008 <cd_scale_factor_init+0x164>
    5ee4:	bl	0 <coda_set_error>
    5ee8:	mvn	r0, #0
    5eec:	b	5fc8 <cd_scale_factor_init+0x124>
    5ef0:	ldr	r2, [r5]
    5ef4:	ldr	r3, [r2, #396]	; 0x18c
    5ef8:	ldr	ip, [r3, #48]	; 0x30
    5efc:	cmp	ip, #0
    5f00:	bne	5f18 <cd_scale_factor_init+0x74>
    5f04:	ldr	r0, [pc, #244]	; 6000 <cd_scale_factor_init+0x15c>
    5f08:	ldr	r1, [pc, #208]	; 5fe0 <cd_scale_factor_init+0x13c>
    5f0c:	movw	r2, #3242	; 0xcaa
    5f10:	ldr	r3, [pc, #236]	; 6004 <cd_scale_factor_init+0x160>
    5f14:	bl	0 <__assert_fail>
    5f18:	ldr	r0, [r5]
    5f1c:	ldr	r1, [r0, #396]	; 0x18c
    5f20:	ldr	r1, [r1, #44]	; 0x2c
    5f24:	str	r1, [r0, #44]	; 0x2c
    5f28:	ldr	r1, [r5]
    5f2c:	mov	ip, #1
    5f30:	str	ip, [r1, #48]	; 0x30
    5f34:	ldr	r1, [pc, #176]	; 5fec <cd_scale_factor_init+0x148>
    5f38:	mov	r0, r4
    5f3c:	bl	4e8 <get_attribute_value>
    5f40:	cmp	r0, #0
    5f44:	beq	5f60 <cd_scale_factor_init+0xbc>
    5f48:	movw	r0, #65136	; 0xfe70
    5f4c:	movt	r0, #65535	; 0xffff
    5f50:	ldr	r1, [pc, #160]	; 5ff8 <cd_scale_factor_init+0x154>
    5f54:	bl	0 <coda_set_error>
    5f58:	mvn	r0, #0
    5f5c:	b	5fc8 <cd_scale_factor_init+0x124>
    5f60:	ldr	r1, [pc, #148]	; 5ffc <cd_scale_factor_init+0x158>
    5f64:	mov	r0, r4
    5f68:	bl	4e8 <get_attribute_value>
    5f6c:	cmp	r0, #0
    5f70:	beq	5f8c <cd_scale_factor_init+0xe8>
    5f74:	movw	r0, #65136	; 0xfe70
    5f78:	movt	r0, #65535	; 0xffff
    5f7c:	ldr	r1, [pc, #112]	; 5ff4 <cd_scale_factor_init+0x150>
    5f80:	bl	0 <coda_set_error>
    5f84:	mvn	r0, #0
    5f88:	b	5fc8 <cd_scale_factor_init+0x124>
    5f8c:	ldr	r1, [r5]
    5f90:	ldr	r0, [pc, #80]	; 5fe8 <cd_scale_factor_init+0x144>
    5f94:	str	r0, [r1, #40]	; 0x28
    5f98:	ldr	r0, [r5]
    5f9c:	ldr	r1, [pc, #108]	; 6010 <cd_scale_factor_init+0x16c>
    5fa0:	bl	940 <register_type_elements>
    5fa4:	ldr	r3, [r5]
    5fa8:	ldr	r2, [pc, #44]	; 5fdc <cd_scale_factor_init+0x138>
    5fac:	str	r2, [r3, #36]	; 0x24
    5fb0:	ldr	r0, [r5]
    5fb4:	mov	r1, #11
    5fb8:	ldr	r2, [pc, #36]	; 5fe4 <cd_scale_factor_init+0x140>
    5fbc:	ldr	r3, [pc, #44]	; 5ff0 <cd_scale_factor_init+0x14c>
    5fc0:	bl	8bc <register_sub_element>
    5fc4:	mov	r0, #0
    5fc8:	ldr	r4, [sp, #8]
    5fcc:	ldr	r5, [sp, #12]
    5fd0:	ldr	lr, [sp, #4]
    5fd4:	add	sp, sp, #16
    5fd8:	bx	lr
    5fdc:	.word	0x00000000
    5fe0:	.word	0x00001939
	...
    5fec:	.word	0x0000047e
    5ff0:	.word	0x00000000
    5ff4:	.word	0x0000103e
    5ff8:	.word	0x000012cc
    5ffc:	.word	0x000001f6
    6000:	.word	0x000009ff
    6004:	.word	0x00002184
    6008:	.word	0x00001288
    600c:	.word	0x00001746
    6010:	.word	0x00000000

00006014 <cd_text_set_fixed_value>:
    6014:	mov	ip, sp
    6018:	sub	sp, sp, #16
    601c:	str	ip, [sp]
    6020:	str	lr, [sp, #4]
    6024:	str	r4, [sp, #8]
    6028:	mov	r4, r0
    602c:	ldr	ip, [r4]
    6030:	ldr	r0, [ip, #12]
    6034:	bl	2b0 <decode_escaped_string>
    6038:	cmp	r0, #0
    603c:	bge	6064 <cd_text_set_fixed_value+0x50>
    6040:	movw	r0, #65136	; 0xfe70
    6044:	movt	r0, #65535	; 0xffff
    6048:	ldr	r1, [pc, #52]	; 6084 <cd_text_set_fixed_value+0x70>
    604c:	bl	0 <coda_set_error>
    6050:	mvn	r0, #0
    6054:	ldr	r4, [sp, #8]
    6058:	ldr	lr, [sp, #4]
    605c:	add	sp, sp, #16
    6060:	bx	lr
    6064:	ldr	r1, [r4]
    6068:	ldr	r2, [r1, #396]	; 0x18c
    606c:	ldr	r0, [r2, #8]
    6070:	ldr	r1, [r1, #12]
    6074:	ldr	r4, [sp, #8]
    6078:	ldr	lr, [sp, #4]
    607c:	add	sp, sp, #16
    6080:	b	0 <coda_type_text_set_fixed_value>
    6084:	.word	0x00000bc3

00006088 <cd_text_set_read_type>:
    6088:	mov	ip, sp
    608c:	sub	sp, sp, #8
    6090:	str	ip, [sp]
    6094:	str	lr, [sp, #4]
    6098:	ldr	r1, [r0]
    609c:	ldr	r2, [r1, #396]	; 0x18c
    60a0:	ldr	r0, [r2, #8]
    60a4:	ldr	r1, [r1, #16]
    60a8:	ldr	lr, [sp, #4]
    60ac:	add	sp, sp, #8
    60b0:	b	0 <coda_type_set_read_type>

000060b4 <cd_text_finalise>:
    60b4:	mov	ip, sp
    60b8:	sub	sp, sp, #8
    60bc:	str	ip, [sp]
    60c0:	str	lr, [sp, #4]
    60c4:	ldr	r0, [r0]
    60c8:	ldr	r0, [r0, #8]
    60cc:	ldr	lr, [sp, #4]
    60d0:	add	sp, sp, #8
    60d4:	b	0 <coda_type_text_validate>

000060d8 <cd_text_init>:
    60d8:	mov	ip, sp
    60dc:	sub	sp, sp, #16
    60e0:	str	ip, [sp]
    60e4:	str	lr, [sp, #4]
    60e8:	str	r4, [sp, #8]
    60ec:	str	r5, [sp, #12]
    60f0:	mov	r4, r1
    60f4:	mov	r5, r0
    60f8:	mov	r1, r4
    60fc:	mov	r0, r5
    6100:	bl	6b4 <handle_format_attribute_for_type>
    6104:	cmp	r0, #0
    6108:	beq	6114 <cd_text_init+0x3c>
    610c:	mvn	r0, #0
    6110:	b	61f8 <cd_text_init+0x120>
    6114:	ldr	r3, [r5]
    6118:	ldr	r1, [pc, #252]	; 621c <cd_text_init+0x144>
    611c:	str	r1, [r3, #40]	; 0x28
    6120:	ldr	r0, [r5]
    6124:	ldr	r0, [r0, #44]	; 0x2c
    6128:	bl	0 <coda_type_text_new>
    612c:	ldr	ip, [r5]
    6130:	str	r0, [ip, #8]
    6134:	ldr	r2, [r5]
    6138:	ldr	r1, [r2, #8]
    613c:	cmp	r1, #0
    6140:	bne	614c <cd_text_init+0x74>
    6144:	mvn	r0, #0
    6148:	b	61f8 <cd_text_init+0x120>
    614c:	mov	r1, r4
    6150:	mov	r0, r5
    6154:	bl	5c4 <handle_name_attribute_for_type>
    6158:	cmp	r0, #0
    615c:	beq	6168 <cd_text_init+0x90>
    6160:	mvn	r0, #0
    6164:	b	61f8 <cd_text_init+0x120>
    6168:	ldr	r0, [r5]
    616c:	mov	r1, #11
    6170:	ldr	r2, [pc, #160]	; 6218 <cd_text_init+0x140>
    6174:	ldr	r3, [pc, #164]	; 6220 <cd_text_init+0x148>
    6178:	bl	8bc <register_sub_element>
    617c:	ldr	r0, [r5]
    6180:	mov	r1, #8
    6184:	ldr	r2, [pc, #168]	; 6234 <cd_text_init+0x15c>
    6188:	ldr	r3, [pc, #156]	; 622c <cd_text_init+0x154>
    618c:	bl	8bc <register_sub_element>
    6190:	ldr	r0, [r5]
    6194:	mov	r1, #16
    6198:	ldr	r2, [pc, #120]	; 6218 <cd_text_init+0x140>
    619c:	ldr	r3, [pc, #108]	; 6210 <cd_text_init+0x138>
    61a0:	bl	8bc <register_sub_element>
    61a4:	ldr	r0, [r5]
    61a8:	mov	r1, #28
    61ac:	ldr	r2, [pc, #88]	; 620c <cd_text_init+0x134>
    61b0:	ldr	r3, [pc, #112]	; 6228 <cd_text_init+0x150>
    61b4:	bl	8bc <register_sub_element>
    61b8:	ldr	r0, [r5]
    61bc:	mov	r1, #4
    61c0:	ldr	r2, [pc, #104]	; 6230 <cd_text_init+0x158>
    61c4:	ldr	r3, [pc, #72]	; 6214 <cd_text_init+0x13c>
    61c8:	bl	8bc <register_sub_element>
    61cc:	ldr	r2, [r5]
    61d0:	ldr	ip, [pc, #76]	; 6224 <cd_text_init+0x14c>
    61d4:	str	ip, [r2, #36]	; 0x24
    61d8:	mov	r1, r4
    61dc:	mov	r0, r5
    61e0:	bl	77c <handle_xml_name>
    61e4:	cmp	r0, #0
    61e8:	beq	61f4 <cd_text_init+0x11c>
    61ec:	mvn	r0, #0
    61f0:	b	61f8 <cd_text_init+0x120>
    61f4:	mov	r0, #0
    61f8:	ldr	r4, [sp, #8]
    61fc:	ldr	r5, [sp, #12]
    6200:	ldr	lr, [sp, #4]
    6204:	add	sp, sp, #16
    6208:	bx	lr
	...

00006238 <cd_time_set_type>:
    6238:	mov	ip, sp
    623c:	sub	sp, sp, #8
    6240:	str	ip, [sp]
    6244:	str	lr, [sp, #4]
    6248:	ldr	r1, [r0]
    624c:	ldr	r2, [r1, #396]	; 0x18c
    6250:	ldr	r0, [r2, #8]
    6254:	ldr	r1, [r1, #8]
    6258:	ldr	lr, [sp, #4]
    625c:	add	sp, sp, #8
    6260:	b	0 <coda_type_time_set_base_type>

00006264 <cd_time_add_mapping>:
    6264:	mov	ip, sp
    6268:	sub	sp, sp, #16
    626c:	str	ip, [sp]
    6270:	str	lr, [sp, #4]
    6274:	str	r4, [sp, #8]
    6278:	mov	r4, r0
    627c:	ldr	r1, [r4]
    6280:	ldr	r2, [r1, #396]	; 0x18c
    6284:	ldr	r0, [r2, #8]
    6288:	ldr	r1, [r1, #8]
    628c:	bl	0 <coda_type_time_add_ascii_float_mapping>
    6290:	cmp	r0, #0
    6294:	beq	62a0 <cd_time_add_mapping+0x3c>
    6298:	mvn	r0, #0
    629c:	b	62b0 <cd_time_add_mapping+0x4c>
    62a0:	ldr	r1, [r4]
    62a4:	mov	r3, #0
    62a8:	str	r3, [r1, #8]
    62ac:	mov	r0, #0
    62b0:	ldr	r4, [sp, #8]
    62b4:	ldr	lr, [sp, #4]
    62b8:	add	sp, sp, #16
    62bc:	bx	lr

000062c0 <cd_time_finalise>:
    62c0:	mov	ip, sp
    62c4:	sub	sp, sp, #8
    62c8:	str	ip, [sp]
    62cc:	str	lr, [sp, #4]
    62d0:	ldr	r0, [r0]
    62d4:	ldr	r0, [r0, #8]
    62d8:	ldr	lr, [sp, #4]
    62dc:	add	sp, sp, #8
    62e0:	b	0 <coda_type_time_validate>

000062e4 <cd_time_init>:
    62e4:	mov	ip, sp
    62e8:	sub	sp, sp, #40	; 0x28
    62ec:	str	ip, [sp]
    62f0:	str	lr, [sp, #4]
    62f4:	str	r4, [sp, #8]
    62f8:	str	r5, [sp, #12]
    62fc:	str	r6, [sp, #16]
    6300:	str	r7, [sp, #20]
    6304:	str	r8, [sp, #24]
    6308:	str	r9, [sp, #28]
    630c:	mov	r4, r1
    6310:	mov	r5, r0
    6314:	mov	r6, #0
    6318:	mov	r1, r4
    631c:	mov	r0, r5
    6320:	bl	6b4 <handle_format_attribute_for_type>
    6324:	cmp	r0, #0
    6328:	beq	6334 <cd_time_init+0x50>
    632c:	mvn	r0, #0
    6330:	b	6da8 <cd_time_init+0xac4>
    6334:	ldr	r1, [pc, #2812]	; 6e38 <cd_time_init+0xb54>
    6338:	ldr	ip, [r5]
    633c:	ldr	r2, [ip]
    6340:	mov	r0, r4
    6344:	bl	54c <get_mandatory_attribute_value>
    6348:	mov	r8, r0
    634c:	cmp	r8, #0
    6350:	bne	635c <cd_time_init+0x78>
    6354:	mvn	r0, #0
    6358:	b	6da8 <cd_time_init+0xac4>
    635c:	ldr	r2, [r5]
    6360:	ldr	r0, [r2, #44]	; 0x2c
    6364:	cmp	r0, #0
    6368:	beq	68dc <cd_time_init+0x5f8>
    636c:	cmp	r0, #1
    6370:	bne	6c20 <cd_time_init+0x93c>
    6374:	ldr	r1, [pc, #2812]	; 6e78 <cd_time_init+0xb94>
    6378:	mov	r0, r8
    637c:	bl	0 <strcmp>
    6380:	cmp	r0, #0
    6384:	beq	675c <cd_time_init+0x478>
    6388:	ldr	r1, [pc, #2744]	; 6e48 <cd_time_init+0xb64>
    638c:	mov	r0, r8
    6390:	bl	0 <strcmp>
    6394:	cmp	r0, #0
    6398:	beq	6650 <cd_time_init+0x36c>
    639c:	ldr	r1, [pc, #2696]	; 6e2c <cd_time_init+0xb48>
    63a0:	mov	r0, r8
    63a4:	bl	0 <strcmp>
    63a8:	cmp	r0, #0
    63ac:	beq	6544 <cd_time_init+0x260>
    63b0:	ldr	r1, [pc, #2780]	; 6e94 <cd_time_init+0xbb0>
    63b4:	mov	r0, r8
    63b8:	bl	0 <strcmp>
    63bc:	cmp	r0, #0
    63c0:	bne	6c20 <cd_time_init+0x93c>
    63c4:	ldr	r8, [pc, #2716]	; 6e68 <cd_time_init+0xb84>
    63c8:	ldr	r0, [r5]
    63cc:	ldr	r0, [r0, #44]	; 0x2c
    63d0:	bl	0 <coda_type_record_new>
    63d4:	mov	r6, r0
    63d8:	ldr	r1, [pc, #2676]	; 6e54 <cd_time_init+0xb70>
    63dc:	mov	r0, r6
    63e0:	bl	0 <coda_type_set_description>
    63e4:	ldr	r2, [r5]
    63e8:	ldr	r0, [r2, #44]	; 0x2c
    63ec:	mov	r1, #2
    63f0:	bl	0 <coda_type_number_new>
    63f4:	mov	r7, r0
    63f8:	ldr	r1, [pc, #2512]	; 6dd0 <cd_time_init+0xaec>
    63fc:	mov	r0, r7
    6400:	bl	0 <coda_type_set_description>
    6404:	mov	r1, #3
    6408:	mov	r0, r7
    640c:	bl	0 <coda_type_set_read_type>
    6410:	mov	r3, #0
    6414:	mov	r2, #16
    6418:	mov	r0, r7
    641c:	bl	0 <coda_type_set_bit_size>
    6420:	ldr	r1, [pc, #2680]	; 6ea0 <cd_time_init+0xbbc>
    6424:	mov	r0, r7
    6428:	bl	0 <coda_type_number_set_unit>
    642c:	ldr	r0, [pc, #2556]	; 6e30 <cd_time_init+0xb4c>
    6430:	bl	0 <coda_type_record_field_new>
    6434:	mov	r9, r0
    6438:	mov	r1, r7
    643c:	mov	r0, r9
    6440:	bl	0 <coda_type_record_field_set_type>
    6444:	mov	r0, r7
    6448:	bl	0 <coda_type_release>
    644c:	mov	r1, r9
    6450:	mov	r0, r6
    6454:	bl	0 <coda_type_record_add_field>
    6458:	ldr	r3, [r5]
    645c:	ldr	r0, [r3, #44]	; 0x2c
    6460:	mov	r1, #2
    6464:	bl	0 <coda_type_number_new>
    6468:	mov	r9, r0
    646c:	ldr	r1, [pc, #2632]	; 6ebc <cd_time_init+0xbd8>
    6470:	mov	r0, r9
    6474:	bl	0 <coda_type_set_description>
    6478:	mov	r1, #5
    647c:	mov	r0, r9
    6480:	bl	0 <coda_type_set_read_type>
    6484:	mov	r3, #0
    6488:	mov	r2, #32
    648c:	mov	r0, r9
    6490:	bl	0 <coda_type_set_bit_size>
    6494:	ldr	r1, [pc, #2376]	; 6de4 <cd_time_init+0xb00>
    6498:	mov	r0, r9
    649c:	bl	0 <coda_type_number_set_unit>
    64a0:	ldr	r0, [pc, #2520]	; 6e80 <cd_time_init+0xb9c>
    64a4:	bl	0 <coda_type_record_field_new>
    64a8:	mov	r7, r0
    64ac:	mov	r1, r9
    64b0:	mov	r0, r7
    64b4:	bl	0 <coda_type_record_field_set_type>
    64b8:	mov	r0, r9
    64bc:	bl	0 <coda_type_release>
    64c0:	mov	r1, r7
    64c4:	mov	r0, r6
    64c8:	bl	0 <coda_type_record_add_field>
    64cc:	ldr	r2, [r5]
    64d0:	ldr	r0, [r2, #44]	; 0x2c
    64d4:	mov	r1, #2
    64d8:	bl	0 <coda_type_number_new>
    64dc:	mov	r9, r0
    64e0:	ldr	r1, [pc, #2440]	; 6e70 <cd_time_init+0xb8c>
    64e4:	mov	r0, r9
    64e8:	bl	0 <coda_type_set_description>
    64ec:	mov	r1, #3
    64f0:	mov	r0, r9
    64f4:	bl	0 <coda_type_set_read_type>
    64f8:	mov	r3, #0
    64fc:	mov	r2, #16
    6500:	mov	r0, r9
    6504:	bl	0 <coda_type_set_bit_size>
    6508:	ldr	r1, [pc, #2492]	; 6ecc <cd_time_init+0xbe8>
    650c:	mov	r0, r9
    6510:	bl	0 <coda_type_number_set_unit>
    6514:	ldr	r0, [pc, #2372]	; 6e60 <cd_time_init+0xb7c>
    6518:	bl	0 <coda_type_record_field_new>
    651c:	mov	r7, r0
    6520:	mov	r1, r9
    6524:	mov	r0, r7
    6528:	bl	0 <coda_type_record_field_set_type>
    652c:	mov	r0, r9
    6530:	bl	0 <coda_type_release>
    6534:	mov	r1, r7
    6538:	mov	r0, r6
    653c:	bl	0 <coda_type_record_add_field>
    6540:	b	6c20 <cd_time_init+0x93c>
    6544:	ldr	r8, [pc, #2404]	; 6eb0 <cd_time_init+0xbcc>
    6548:	ldr	r2, [r5]
    654c:	ldr	r0, [r2, #44]	; 0x2c
    6550:	bl	0 <coda_type_record_new>
    6554:	mov	r6, r0
    6558:	ldr	r1, [pc, #2428]	; 6edc <cd_time_init+0xbf8>
    655c:	mov	r0, r6
    6560:	bl	0 <coda_type_set_description>
    6564:	ldr	ip, [r5]
    6568:	ldr	r0, [ip, #44]	; 0x2c
    656c:	mov	r1, #2
    6570:	bl	0 <coda_type_number_new>
    6574:	mov	r7, r0
    6578:	ldr	r1, [pc, #2128]	; 6dd0 <cd_time_init+0xaec>
    657c:	mov	r0, r7
    6580:	bl	0 <coda_type_set_description>
    6584:	mov	r1, #3
    6588:	mov	r0, r7
    658c:	bl	0 <coda_type_set_read_type>
    6590:	mov	r3, #0
    6594:	mov	r2, #16
    6598:	mov	r0, r7
    659c:	bl	0 <coda_type_set_bit_size>
    65a0:	ldr	r1, [pc, #2296]	; 6ea0 <cd_time_init+0xbbc>
    65a4:	mov	r0, r7
    65a8:	bl	0 <coda_type_number_set_unit>
    65ac:	ldr	r0, [pc, #2172]	; 6e30 <cd_time_init+0xb4c>
    65b0:	bl	0 <coda_type_record_field_new>
    65b4:	mov	r9, r0
    65b8:	mov	r1, r7
    65bc:	mov	r0, r9
    65c0:	bl	0 <coda_type_record_field_set_type>
    65c4:	mov	r0, r7
    65c8:	bl	0 <coda_type_release>
    65cc:	mov	r1, r9
    65d0:	mov	r0, r6
    65d4:	bl	0 <coda_type_record_add_field>
    65d8:	ldr	ip, [r5]
    65dc:	ldr	r0, [ip, #44]	; 0x2c
    65e0:	mov	r1, #2
    65e4:	bl	0 <coda_type_number_new>
    65e8:	mov	r7, r0
    65ec:	ldr	r1, [pc, #2248]	; 6ebc <cd_time_init+0xbd8>
    65f0:	mov	r0, r7
    65f4:	bl	0 <coda_type_set_description>
    65f8:	mov	r1, #5
    65fc:	mov	r0, r7
    6600:	bl	0 <coda_type_set_read_type>
    6604:	mov	r3, #0
    6608:	mov	r2, #32
    660c:	mov	r0, r7
    6610:	bl	0 <coda_type_set_bit_size>
    6614:	ldr	r1, [pc, #1992]	; 6de4 <cd_time_init+0xb00>
    6618:	mov	r0, r7
    661c:	bl	0 <coda_type_number_set_unit>
    6620:	ldr	r0, [pc, #2136]	; 6e80 <cd_time_init+0xb9c>
    6624:	bl	0 <coda_type_record_field_new>
    6628:	mov	r9, r0
    662c:	mov	r1, r7
    6630:	mov	r0, r9
    6634:	bl	0 <coda_type_record_field_set_type>
    6638:	mov	r0, r7
    663c:	bl	0 <coda_type_release>
    6640:	mov	r1, r9
    6644:	mov	r0, r6
    6648:	bl	0 <coda_type_record_add_field>
    664c:	b	6c20 <cd_time_init+0x93c>
    6650:	ldr	r8, [pc, #2036]	; 6e4c <cd_time_init+0xb68>
    6654:	ldr	r2, [r5]
    6658:	ldr	r0, [r2, #44]	; 0x2c
    665c:	bl	0 <coda_type_record_new>
    6660:	mov	r6, r0
    6664:	ldr	r1, [pc, #1972]	; 6e20 <cd_time_init+0xb3c>
    6668:	mov	r0, r6
    666c:	bl	0 <coda_type_set_description>
    6670:	ldr	r1, [r5]
    6674:	ldr	r0, [r1, #44]	; 0x2c
    6678:	mov	r1, #2
    667c:	bl	0 <coda_type_number_new>
    6680:	mov	r9, r0
    6684:	ldr	r1, [pc, #2088]	; 6eb4 <cd_time_init+0xbd0>
    6688:	mov	r0, r9
    668c:	bl	0 <coda_type_set_description>
    6690:	mov	r1, #4
    6694:	mov	r0, r9
    6698:	bl	0 <coda_type_set_read_type>
    669c:	mov	r3, #0
    66a0:	mov	r2, #32
    66a4:	mov	r0, r9
    66a8:	bl	0 <coda_type_set_bit_size>
    66ac:	ldr	r1, [pc, #2040]	; 6eac <cd_time_init+0xbc8>
    66b0:	mov	r0, r9
    66b4:	bl	0 <coda_type_number_set_unit>
    66b8:	ldr	r0, [pc, #1904]	; 6e30 <cd_time_init+0xb4c>
    66bc:	bl	0 <coda_type_record_field_new>
    66c0:	mov	r7, r0
    66c4:	mov	r1, r9
    66c8:	mov	r0, r7
    66cc:	bl	0 <coda_type_record_field_set_type>
    66d0:	mov	r0, r9
    66d4:	bl	0 <coda_type_release>
    66d8:	mov	r1, r7
    66dc:	mov	r0, r6
    66e0:	bl	0 <coda_type_record_add_field>
    66e4:	ldr	r2, [r5]
    66e8:	ldr	r0, [r2, #44]	; 0x2c
    66ec:	mov	r1, #2
    66f0:	bl	0 <coda_type_number_new>
    66f4:	mov	r7, r0
    66f8:	ldr	r1, [pc, #1980]	; 6ebc <cd_time_init+0xbd8>
    66fc:	mov	r0, r7
    6700:	bl	0 <coda_type_set_description>
    6704:	mov	r1, #5
    6708:	mov	r0, r7
    670c:	bl	0 <coda_type_set_read_type>
    6710:	mov	r3, #0
    6714:	mov	r2, #32
    6718:	mov	r0, r7
    671c:	bl	0 <coda_type_set_bit_size>
    6720:	ldr	r1, [pc, #1724]	; 6de4 <cd_time_init+0xb00>
    6724:	mov	r0, r7
    6728:	bl	0 <coda_type_number_set_unit>
    672c:	ldr	r0, [pc, #1868]	; 6e80 <cd_time_init+0xb9c>
    6730:	bl	0 <coda_type_record_field_new>
    6734:	mov	r9, r0
    6738:	mov	r1, r7
    673c:	mov	r0, r9
    6740:	bl	0 <coda_type_record_field_set_type>
    6744:	mov	r0, r7
    6748:	bl	0 <coda_type_release>
    674c:	mov	r1, r9
    6750:	mov	r0, r6
    6754:	bl	0 <coda_type_record_add_field>
    6758:	b	6c20 <cd_time_init+0x93c>
    675c:	ldr	r8, [pc, #1828]	; 6e88 <cd_time_init+0xba4>
    6760:	ldr	r1, [r5]
    6764:	ldr	r0, [r1, #44]	; 0x2c
    6768:	bl	0 <coda_type_record_new>
    676c:	mov	r6, r0
    6770:	ldr	r1, [pc, #1636]	; 6ddc <cd_time_init+0xaf8>
    6774:	mov	r0, r6
    6778:	bl	0 <coda_type_set_description>
    677c:	ldr	r0, [r5]
    6780:	ldr	r0, [r0, #44]	; 0x2c
    6784:	mov	r1, #2
    6788:	bl	0 <coda_type_number_new>
    678c:	mov	r7, r0
    6790:	ldr	r1, [pc, #1836]	; 6ec4 <cd_time_init+0xbe0>
    6794:	mov	r0, r7
    6798:	bl	0 <coda_type_set_description>
    679c:	mov	r1, #4
    67a0:	mov	r0, r7
    67a4:	bl	0 <coda_type_set_read_type>
    67a8:	mov	r3, #0
    67ac:	mov	r2, #32
    67b0:	mov	r0, r7
    67b4:	bl	0 <coda_type_set_bit_size>
    67b8:	ldr	r1, [pc, #1760]	; 6ea0 <cd_time_init+0xbbc>
    67bc:	mov	r0, r7
    67c0:	bl	0 <coda_type_number_set_unit>
    67c4:	ldr	r0, [pc, #1636]	; 6e30 <cd_time_init+0xb4c>
    67c8:	bl	0 <coda_type_record_field_new>
    67cc:	mov	r9, r0
    67d0:	mov	r1, r7
    67d4:	mov	r0, r9
    67d8:	bl	0 <coda_type_record_field_set_type>
    67dc:	mov	r0, r7
    67e0:	bl	0 <coda_type_release>
    67e4:	mov	r1, r9
    67e8:	mov	r0, r6
    67ec:	bl	0 <coda_type_record_add_field>
    67f0:	ldr	r0, [r5]
    67f4:	ldr	r0, [r0, #44]	; 0x2c
    67f8:	mov	r1, #2
    67fc:	bl	0 <coda_type_number_new>
    6800:	mov	r7, r0
    6804:	ldr	r1, [pc, #1500]	; 6de8 <cd_time_init+0xb04>
    6808:	mov	r0, r7
    680c:	bl	0 <coda_type_set_description>
    6810:	mov	r1, #5
    6814:	mov	r0, r7
    6818:	bl	0 <coda_type_set_read_type>
    681c:	mov	r3, #0
    6820:	mov	r2, #32
    6824:	mov	r0, r7
    6828:	bl	0 <coda_type_set_bit_size>
    682c:	ldr	r1, [pc, #1440]	; 6dd4 <cd_time_init+0xaf0>
    6830:	mov	r0, r7
    6834:	bl	0 <coda_type_number_set_unit>
    6838:	ldr	r0, [pc, #1680]	; 6ed0 <cd_time_init+0xbec>
    683c:	bl	0 <coda_type_record_field_new>
    6840:	mov	r9, r0
    6844:	mov	r1, r7
    6848:	mov	r0, r9
    684c:	bl	0 <coda_type_record_field_set_type>
    6850:	mov	r0, r7
    6854:	bl	0 <coda_type_release>
    6858:	mov	r1, r9
    685c:	mov	r0, r6
    6860:	bl	0 <coda_type_record_add_field>
    6864:	ldr	ip, [r5]
    6868:	ldr	r0, [ip, #44]	; 0x2c
    686c:	mov	r1, #2
    6870:	bl	0 <coda_type_number_new>
    6874:	mov	r9, r0
    6878:	ldr	r1, [pc, #1620]	; 6ed4 <cd_time_init+0xbf0>
    687c:	mov	r0, r9
    6880:	bl	0 <coda_type_set_description>
    6884:	mov	r1, #5
    6888:	mov	r0, r9
    688c:	bl	0 <coda_type_set_read_type>
    6890:	mov	r3, #0
    6894:	mov	r2, #32
    6898:	mov	r0, r9
    689c:	bl	0 <coda_type_set_bit_size>
    68a0:	ldr	r1, [pc, #1572]	; 6ecc <cd_time_init+0xbe8>
    68a4:	mov	r0, r9
    68a8:	bl	0 <coda_type_number_set_unit>
    68ac:	ldr	r0, [pc, #1452]	; 6e60 <cd_time_init+0xb7c>
    68b0:	bl	0 <coda_type_record_field_new>
    68b4:	mov	r7, r0
    68b8:	mov	r1, r9
    68bc:	mov	r0, r7
    68c0:	bl	0 <coda_type_record_field_set_type>
    68c4:	mov	r0, r9
    68c8:	bl	0 <coda_type_release>
    68cc:	mov	r1, r7
    68d0:	mov	r0, r6
    68d4:	bl	0 <coda_type_record_add_field>
    68d8:	b	6c20 <cd_time_init+0x93c>
    68dc:	ldr	r1, [pc, #1268]	; 6dd8 <cd_time_init+0xaf4>
    68e0:	mov	r0, r8
    68e4:	bl	0 <strcmp>
    68e8:	cmp	r0, #0
    68ec:	beq	6be4 <cd_time_init+0x900>
    68f0:	ldr	r1, [pc, #1380]	; 6e5c <cd_time_init+0xb78>
    68f4:	mov	r0, r8
    68f8:	bl	0 <strcmp>
    68fc:	cmp	r0, #0
    6900:	beq	6ba4 <cd_time_init+0x8c0>
    6904:	ldr	r1, [pc, #1368]	; 6e64 <cd_time_init+0xb80>
    6908:	mov	r0, r8
    690c:	bl	0 <strcmp>
    6910:	cmp	r0, #0
    6914:	beq	6b64 <cd_time_init+0x880>
    6918:	ldr	r1, [pc, #1440]	; 6ec0 <cd_time_init+0xbdc>
    691c:	mov	r0, r8
    6920:	bl	0 <strcmp>
    6924:	cmp	r0, #0
    6928:	beq	6b24 <cd_time_init+0x840>
    692c:	ldr	r1, [pc, #1208]	; 6dec <cd_time_init+0xb08>
    6930:	mov	r0, r8
    6934:	bl	0 <strcmp>
    6938:	cmp	r0, #0
    693c:	beq	6ae4 <cd_time_init+0x800>
    6940:	ldr	r1, [pc, #1296]	; 6e58 <cd_time_init+0xb74>
    6944:	mov	r0, r8
    6948:	bl	0 <strcmp>
    694c:	cmp	r0, #0
    6950:	beq	6aa4 <cd_time_init+0x7c0>
    6954:	ldr	r1, [pc, #1228]	; 6e28 <cd_time_init+0xb44>
    6958:	mov	r0, r8
    695c:	bl	0 <strcmp>
    6960:	cmp	r0, #0
    6964:	beq	6a64 <cd_time_init+0x780>
    6968:	ldr	r1, [pc, #1156]	; 6df4 <cd_time_init+0xb10>
    696c:	mov	r0, r8
    6970:	bl	0 <strcmp>
    6974:	cmp	r0, #0
    6978:	beq	6a24 <cd_time_init+0x740>
    697c:	ldr	r1, [pc, #1156]	; 6e08 <cd_time_init+0xb24>
    6980:	mov	r0, r8
    6984:	bl	0 <strcmp>
    6988:	cmp	r0, #0
    698c:	beq	69e4 <cd_time_init+0x700>
    6990:	ldr	r1, [pc, #1144]	; 6e10 <cd_time_init+0xb2c>
    6994:	mov	r0, r8
    6998:	bl	0 <strcmp>
    699c:	cmp	r0, #0
    69a0:	bne	6c20 <cd_time_init+0x93c>
    69a4:	ldr	r8, [pc, #1308]	; 6ec8 <cd_time_init+0xbe4>
    69a8:	ldr	r0, [r5]
    69ac:	ldr	r0, [r0, #44]	; 0x2c
    69b0:	bl	0 <coda_type_text_new>
    69b4:	mov	r6, r0
    69b8:	mov	r1, #11
    69bc:	mov	r0, r6
    69c0:	bl	0 <coda_type_set_read_type>
    69c4:	ldr	r1, [pc, #1068]	; 6df8 <cd_time_init+0xb14>
    69c8:	mov	r0, r6
    69cc:	bl	0 <coda_type_set_description>
    69d0:	mov	r3, #0
    69d4:	mov	r2, #24
    69d8:	mov	r0, r6
    69dc:	bl	0 <coda_type_set_byte_size>
    69e0:	b	6c20 <cd_time_init+0x93c>
    69e4:	ldr	r8, [pc, #1056]	; 6e0c <cd_time_init+0xb28>
    69e8:	ldr	r3, [r5]
    69ec:	ldr	r0, [r3, #44]	; 0x2c
    69f0:	bl	0 <coda_type_text_new>
    69f4:	mov	r6, r0
    69f8:	mov	r1, #11
    69fc:	mov	r0, r6
    6a00:	bl	0 <coda_type_set_read_type>
    6a04:	ldr	r1, [pc, #1152]	; 6e8c <cd_time_init+0xba8>
    6a08:	mov	r0, r6
    6a0c:	bl	0 <coda_type_set_description>
    6a10:	mov	r3, #0
    6a14:	mov	r2, #17
    6a18:	mov	r0, r6
    6a1c:	bl	0 <coda_type_set_byte_size>
    6a20:	b	6c20 <cd_time_init+0x93c>
    6a24:	ldr	r8, [pc, #1040]	; 6e3c <cd_time_init+0xb58>
    6a28:	ldr	r2, [r5]
    6a2c:	ldr	r0, [r2, #44]	; 0x2c
    6a30:	bl	0 <coda_type_text_new>
    6a34:	mov	r6, r0
    6a38:	mov	r1, #11
    6a3c:	mov	r0, r6
    6a40:	bl	0 <coda_type_set_read_type>
    6a44:	ldr	r1, [pc, #968]	; 6e14 <cd_time_init+0xb30>
    6a48:	mov	r0, r6
    6a4c:	bl	0 <coda_type_set_description>
    6a50:	mov	r3, #0
    6a54:	mov	r2, #30
    6a58:	mov	r0, r6
    6a5c:	bl	0 <coda_type_set_byte_size>
    6a60:	b	6c20 <cd_time_init+0x93c>
    6a64:	ldr	r8, [pc, #1132]	; 6ed8 <cd_time_init+0xbf4>
    6a68:	ldr	ip, [r5]
    6a6c:	ldr	r0, [ip, #44]	; 0x2c
    6a70:	bl	0 <coda_type_text_new>
    6a74:	mov	r6, r0
    6a78:	mov	r1, #11
    6a7c:	mov	r0, r6
    6a80:	bl	0 <coda_type_set_read_type>
    6a84:	ldr	r1, [pc, #952]	; 6e44 <cd_time_init+0xb60>
    6a88:	mov	r0, r6
    6a8c:	bl	0 <coda_type_set_description>
    6a90:	mov	r3, #0
    6a94:	mov	r2, #26
    6a98:	mov	r0, r6
    6a9c:	bl	0 <coda_type_set_byte_size>
    6aa0:	b	6c20 <cd_time_init+0x93c>
    6aa4:	ldr	r8, [pc, #968]	; 6e74 <cd_time_init+0xb90>
    6aa8:	ldr	ip, [r5]
    6aac:	ldr	r0, [ip, #44]	; 0x2c
    6ab0:	bl	0 <coda_type_text_new>
    6ab4:	mov	r6, r0
    6ab8:	mov	r1, #11
    6abc:	mov	r0, r6
    6ac0:	bl	0 <coda_type_set_read_type>
    6ac4:	ldr	r1, [pc, #900]	; 6e50 <cd_time_init+0xb6c>
    6ac8:	mov	r0, r6
    6acc:	bl	0 <coda_type_set_description>
    6ad0:	mov	r3, #0
    6ad4:	mov	r2, #23
    6ad8:	mov	r0, r6
    6adc:	bl	0 <coda_type_set_byte_size>
    6ae0:	b	6c20 <cd_time_init+0x93c>
    6ae4:	ldr	r8, [pc, #972]	; 6eb8 <cd_time_init+0xbd4>
    6ae8:	ldr	r3, [r5]
    6aec:	ldr	r0, [r3, #44]	; 0x2c
    6af0:	bl	0 <coda_type_text_new>
    6af4:	mov	r6, r0
    6af8:	mov	r1, #11
    6afc:	mov	r0, r6
    6b00:	bl	0 <coda_type_set_read_type>
    6b04:	ldr	r1, [pc, #780]	; 6e18 <cd_time_init+0xb34>
    6b08:	mov	r0, r6
    6b0c:	bl	0 <coda_type_set_description>
    6b10:	mov	r3, #0
    6b14:	mov	r2, #19
    6b18:	mov	r0, r6
    6b1c:	bl	0 <coda_type_set_byte_size>
    6b20:	b	6c20 <cd_time_init+0x93c>
    6b24:	ldr	r8, [pc, #856]	; 6e84 <cd_time_init+0xba0>
    6b28:	ldr	r3, [r5]
    6b2c:	ldr	r0, [r3, #44]	; 0x2c
    6b30:	bl	0 <coda_type_text_new>
    6b34:	mov	r6, r0
    6b38:	mov	r1, #11
    6b3c:	mov	r0, r6
    6b40:	bl	0 <coda_type_set_read_type>
    6b44:	ldr	r1, [pc, #816]	; 6e7c <cd_time_init+0xb98>
    6b48:	mov	r0, r6
    6b4c:	bl	0 <coda_type_set_description>
    6b50:	mov	r3, #0
    6b54:	mov	r2, #18
    6b58:	mov	r0, r6
    6b5c:	bl	0 <coda_type_set_byte_size>
    6b60:	b	6c20 <cd_time_init+0x93c>
    6b64:	ldr	r8, [pc, #688]	; 6e1c <cd_time_init+0xb38>
    6b68:	ldr	r3, [r5]
    6b6c:	ldr	r0, [r3, #44]	; 0x2c
    6b70:	bl	0 <coda_type_text_new>
    6b74:	mov	r6, r0
    6b78:	mov	r1, #11
    6b7c:	mov	r0, r6
    6b80:	bl	0 <coda_type_set_read_type>
    6b84:	ldr	r1, [pc, #780]	; 6e98 <cd_time_init+0xbb4>
    6b88:	mov	r0, r6
    6b8c:	bl	0 <coda_type_set_description>
    6b90:	mov	r3, #0
    6b94:	mov	r2, #15
    6b98:	mov	r0, r6
    6b9c:	bl	0 <coda_type_set_byte_size>
    6ba0:	b	6c20 <cd_time_init+0x93c>
    6ba4:	ldr	r8, [pc, #760]	; 6ea4 <cd_time_init+0xbc0>
    6ba8:	ldr	ip, [r5]
    6bac:	ldr	r0, [ip, #44]	; 0x2c
    6bb0:	bl	0 <coda_type_text_new>
    6bb4:	mov	r6, r0
    6bb8:	mov	r1, #11
    6bbc:	mov	r0, r6
    6bc0:	bl	0 <coda_type_set_read_type>
    6bc4:	ldr	r1, [pc, #708]	; 6e90 <cd_time_init+0xbac>
    6bc8:	mov	r0, r6
    6bcc:	bl	0 <coda_type_set_description>
    6bd0:	mov	r3, #0
    6bd4:	mov	r2, #24
    6bd8:	mov	r0, r6
    6bdc:	bl	0 <coda_type_set_byte_size>
    6be0:	b	6c20 <cd_time_init+0x93c>
    6be4:	ldr	r8, [pc, #516]	; 6df0 <cd_time_init+0xb0c>
    6be8:	ldr	r2, [r5]
    6bec:	ldr	r0, [r2, #44]	; 0x2c
    6bf0:	bl	0 <coda_type_text_new>
    6bf4:	mov	r6, r0
    6bf8:	mov	r1, #11
    6bfc:	mov	r0, r6
    6c00:	bl	0 <coda_type_set_read_type>
    6c04:	ldr	r1, [pc, #536]	; 6e24 <cd_time_init+0xb40>
    6c08:	mov	r0, r6
    6c0c:	bl	0 <coda_type_set_description>
    6c10:	mov	r3, #0
    6c14:	mov	r2, #27
    6c18:	mov	r0, r6
    6c1c:	bl	0 <coda_type_set_byte_size>
    6c20:	add	r1, sp, #36	; 0x24
    6c24:	mov	r0, r8
    6c28:	bl	0 <coda_expression_from_string>
    6c2c:	cmp	r0, #0
    6c30:	beq	6c44 <cd_time_init+0x960>
    6c34:	mov	r0, r6
    6c38:	bl	0 <coda_type_release>
    6c3c:	mvn	r0, #0
    6c40:	b	6da8 <cd_time_init+0xac4>
    6c44:	ldr	r0, [sp, #36]	; 0x24
    6c48:	add	r1, sp, #32
    6c4c:	bl	0 <coda_expression_get_type>
    6c50:	cmp	r0, #0
    6c54:	beq	6c70 <cd_time_init+0x98c>
    6c58:	mov	r0, r6
    6c5c:	bl	0 <coda_type_release>
    6c60:	ldr	r0, [sp, #36]	; 0x24
    6c64:	bl	0 <coda_expression_delete>
    6c68:	mvn	r0, #0
    6c6c:	b	6da8 <cd_time_init+0xac4>
    6c70:	ldr	r3, [sp, #32]
    6c74:	cmp	r3, #2
    6c78:	beq	6ca4 <cd_time_init+0x9c0>
    6c7c:	mov	r0, r6
    6c80:	bl	0 <coda_type_release>
    6c84:	ldr	r0, [sp, #36]	; 0x24
    6c88:	bl	0 <coda_expression_delete>
    6c8c:	movw	r0, #65136	; 0xfe70
    6c90:	movt	r0, #65535	; 0xffff
    6c94:	ldr	r1, [pc, #304]	; 6dcc <cd_time_init+0xae8>
    6c98:	bl	0 <coda_set_error>
    6c9c:	mvn	r0, #0
    6ca0:	b	6da8 <cd_time_init+0xac4>
    6ca4:	ldr	r3, [r5]
    6ca8:	ldr	r1, [pc, #336]	; 6e00 <cd_time_init+0xb1c>
    6cac:	str	r1, [r3, #40]	; 0x28
    6cb0:	ldr	r2, [r5]
    6cb4:	ldr	r0, [r2, #44]	; 0x2c
    6cb8:	ldr	r1, [sp, #36]	; 0x24
    6cbc:	bl	0 <coda_type_time_new>
    6cc0:	ldr	r3, [r5]
    6cc4:	str	r0, [r3, #8]
    6cc8:	ldr	r1, [r5]
    6ccc:	ldr	r0, [r1, #8]
    6cd0:	cmp	r0, #0
    6cd4:	bne	6cf0 <cd_time_init+0xa0c>
    6cd8:	mov	r0, r6
    6cdc:	bl	0 <coda_type_release>
    6ce0:	ldr	r0, [sp, #36]	; 0x24
    6ce4:	bl	0 <coda_expression_delete>
    6ce8:	mvn	r0, #0
    6cec:	b	6da8 <cd_time_init+0xac4>
    6cf0:	cmp	r6, #0
    6cf4:	beq	6d20 <cd_time_init+0xa3c>
    6cf8:	mov	r1, r6
    6cfc:	bl	0 <coda_type_time_set_base_type>
    6d00:	cmp	r0, #0
    6d04:	beq	6d18 <cd_time_init+0xa34>
    6d08:	mov	r0, r6
    6d0c:	bl	0 <coda_type_release>
    6d10:	mvn	r0, #0
    6d14:	b	6da8 <cd_time_init+0xac4>
    6d18:	mov	r0, r6
    6d1c:	bl	0 <coda_type_release>
    6d20:	mov	r1, r4
    6d24:	mov	r0, r5
    6d28:	bl	5c4 <handle_name_attribute_for_type>
    6d2c:	cmp	r0, #0
    6d30:	beq	6d3c <cd_time_init+0xa58>
    6d34:	mvn	r0, #0
    6d38:	b	6da8 <cd_time_init+0xac4>
    6d3c:	ldr	r0, [r5]
    6d40:	ldr	r1, [pc, #236]	; 6e34 <cd_time_init+0xb50>
    6d44:	bl	940 <register_type_elements>
    6d48:	ldr	r0, [r5]
    6d4c:	mov	r1, #11
    6d50:	ldr	r2, [pc, #164]	; 6dfc <cd_time_init+0xb18>
    6d54:	ldr	r3, [pc, #168]	; 6e04 <cd_time_init+0xb20>
    6d58:	bl	8bc <register_sub_element>
    6d5c:	ldr	r0, [r5]
    6d60:	mov	r1, #22
    6d64:	ldr	r2, [pc, #212]	; 6e40 <cd_time_init+0xb5c>
    6d68:	ldr	r3, [pc, #252]	; 6e6c <cd_time_init+0xb88>
    6d6c:	bl	8bc <register_sub_element>
    6d70:	ldr	r0, [r5]
    6d74:	ldr	r1, [r0, #44]	; 0x2c
    6d78:	cmp	r1, #0
    6d7c:	beq	6d98 <cd_time_init+0xab4>
    6d80:	cmp	r1, #1
    6d84:	beq	6d98 <cd_time_init+0xab4>
    6d88:	mov	r1, #4
    6d8c:	ldr	r2, [pc, #276]	; 6ea8 <cd_time_init+0xbc4>
    6d90:	ldr	r3, [pc, #72]	; 6de0 <cd_time_init+0xafc>
    6d94:	bl	8bc <register_sub_element>
    6d98:	ldr	ip, [r5]
    6d9c:	ldr	r2, [pc, #248]	; 6e9c <cd_time_init+0xbb8>
    6da0:	str	r2, [ip, #36]	; 0x24
    6da4:	mov	r0, #0
    6da8:	ldr	r4, [sp, #8]
    6dac:	ldr	r5, [sp, #12]
    6db0:	ldr	r6, [sp, #16]
    6db4:	ldr	r7, [sp, #20]
    6db8:	ldr	r8, [sp, #24]
    6dbc:	ldr	r9, [sp, #28]
    6dc0:	ldr	lr, [sp, #4]
    6dc4:	add	sp, sp, #40	; 0x28
    6dc8:	bx	lr
    6dcc:	.word	0x00001add
    6dd0:	.word	0x00001657
    6dd4:	.word	0x000019d3
    6dd8:	.word	0x00000bf9
    6ddc:	.word	0x00001bf9
    6de0:	.word	0x00000000
    6de4:	.word	0x00000673
    6de8:	.word	0x00000e20
    6dec:	.word	0x00000fb6
    6df0:	.word	0x00000268
    6df4:	.word	0x000004c7
    6df8:	.word	0x000019d5
	...
    6e08:	.word	0x00001e36
    6e0c:	.word	0x00001751
    6e10:	.word	0x0000191f
    6e14:	.word	0x0000087c
    6e18:	.word	0x00000b56
    6e1c:	.word	0x0000111f
    6e20:	.word	0x000005f8
    6e24:	.word	0x00001140
    6e28:	.word	0x000011a7
    6e2c:	.word	0x00000be5
    6e30:	.word	0x00000e1b
    6e34:	.word	0x00000000
    6e38:	.word	0x000012c1
    6e3c:	.word	0x000016ab
    6e40:	.word	0x00000000
    6e44:	.word	0x00000293
    6e48:	.word	0x000002f7
    6e4c:	.word	0x00001859
    6e50:	.word	0x0000078d
    6e54:	.word	0x000003ed
    6e58:	.word	0x0000162e
    6e5c:	.word	0x0000051f
    6e60:	.word	0x0000169e
    6e64:	.word	0x00000a84
    6e68:	.word	0x000006ee
    6e6c:	.word	0x00000000
    6e70:	.word	0x00001551
    6e74:	.word	0x000003fa
    6e78:	.word	0x00000819
    6e7c:	.word	0x00001432
    6e80:	.word	0x00001efb
    6e84:	.word	0x00000244
    6e88:	.word	0x00000ca5
    6e8c:	.word	0x000005ce
    6e90:	.word	0x00000d4c
    6e94:	.word	0x000011e3
    6e98:	.word	0x0000056d
    6e9c:	.word	0x00000000
    6ea0:	.word	0x00000b40
    6ea4:	.word	0x00000974
    6ea8:	.word	0x00000000
    6eac:	.word	0x00000dcc
    6eb0:	.word	0x00001fa3
    6eb4:	.word	0x00000a55
    6eb8:	.word	0x00000e3b
    6ebc:	.word	0x000009df
    6ec0:	.word	0x000005b6
    6ec4:	.word	0x000018bf
    6ec8:	.word	0x0000106e
    6ecc:	.word	0x000011fc
    6ed0:	.word	0x00001517
    6ed4:	.word	0x00001203
    6ed8:	.word	0x00001c11
    6edc:	.word	0x00000236

00006ee0 <cd_type_set_type>:
    6ee0:	mov	ip, sp
    6ee4:	sub	sp, sp, #16
    6ee8:	str	ip, [sp]
    6eec:	str	lr, [sp, #4]
    6ef0:	str	r4, [sp, #8]
    6ef4:	str	r5, [sp, #12]
    6ef8:	mov	r4, r0
    6efc:	ldr	r2, [r4]
    6f00:	ldr	r1, [r2, #396]	; 0x18c
    6f04:	ldr	r5, [r1, #8]
    6f08:	ldr	r1, [r5, #20]
    6f0c:	cmp	r1, #0
    6f10:	beq	6f1c <cd_type_set_type+0x3c>
    6f14:	ldr	r0, [r2, #8]
    6f18:	bl	0 <coda_type_set_description>
    6f1c:	ldr	ip, [r5, #36]	; 0x24
    6f20:	cmp	ip, #0
    6f24:	beq	6f7c <cd_type_set_type+0x9c>
    6f28:	ldr	r3, [r4]
    6f2c:	ldr	ip, [r3, #8]
    6f30:	ldr	r3, [ip, #36]	; 0x24
    6f34:	cmp	r3, #0
    6f38:	beq	6f50 <cd_type_set_type+0x70>
    6f3c:	ldr	r0, [pc, #120]	; 6fbc <cd_type_set_type+0xdc>
    6f40:	ldr	r1, [pc, #112]	; 6fb8 <cd_type_set_type+0xd8>
    6f44:	movw	r2, #3653	; 0xe45
    6f48:	ldr	r3, [pc, #112]	; 6fc0 <cd_type_set_type+0xe0>
    6f4c:	bl	0 <__assert_fail>
    6f50:	ldr	r2, [r4]
    6f54:	ldr	ip, [r2, #8]
    6f58:	ldr	r2, [r5, #36]	; 0x24
    6f5c:	str	r2, [ip, #36]	; 0x24
    6f60:	ldr	r0, [r5, #36]	; 0x24
    6f64:	ldr	r1, [r4]
    6f68:	ldr	r2, [r1, #8]
    6f6c:	ldr	r1, [r2]
    6f70:	bl	1410 <type_set_format>
    6f74:	mov	r0, #0
    6f78:	str	r0, [r5, #36]	; 0x24
    6f7c:	mov	r0, r5
    6f80:	bl	0 <coda_type_release>
    6f84:	ldr	r0, [r4]
    6f88:	ldr	r3, [r0, #396]	; 0x18c
    6f8c:	ldr	ip, [r0, #8]
    6f90:	str	ip, [r3, #8]
    6f94:	ldr	r2, [r4]
    6f98:	mov	r1, #0
    6f9c:	str	r1, [r2, #8]
    6fa0:	mov	r0, #0
    6fa4:	ldr	r4, [sp, #8]
    6fa8:	ldr	r5, [sp, #12]
    6fac:	ldr	lr, [sp, #4]
    6fb0:	add	sp, sp, #16
    6fb4:	bx	lr
    6fb8:	.word	0x00001939
    6fbc:	.word	0x0000067a
    6fc0:	.word	0x00002199

00006fc4 <cd_type_init>:
    6fc4:	mov	ip, sp
    6fc8:	sub	sp, sp, #16
    6fcc:	str	ip, [sp]
    6fd0:	str	lr, [sp, #4]
    6fd4:	str	r4, [sp, #8]
    6fd8:	str	r5, [sp, #12]
    6fdc:	mov	r4, r1
    6fe0:	mov	r5, r0
    6fe4:	ldr	r1, [pc, #232]	; 70d4 <cd_type_init+0x110>
    6fe8:	mov	r0, r4
    6fec:	bl	4e8 <get_attribute_value>
    6ff0:	cmp	r0, #0
    6ff4:	beq	7010 <cd_type_init+0x4c>
    6ff8:	movw	r0, #65136	; 0xfe70
    6ffc:	movt	r0, #65535	; 0xffff
    7000:	ldr	r1, [pc, #216]	; 70e0 <cd_type_init+0x11c>
    7004:	bl	0 <coda_set_error>
    7008:	mvn	r0, #0
    700c:	b	70b4 <cd_type_init+0xf0>
    7010:	mov	r1, r4
    7014:	mov	r0, r5
    7018:	bl	6b4 <handle_format_attribute_for_type>
    701c:	cmp	r0, #0
    7020:	beq	702c <cd_type_init+0x68>
    7024:	mvn	r0, #0
    7028:	b	70b4 <cd_type_init+0xf0>
    702c:	ldr	r2, [r5]
    7030:	ldr	r3, [pc, #152]	; 70d0 <cd_type_init+0x10c>
    7034:	str	r3, [r2, #40]	; 0x28
    7038:	ldr	ip, [r5]
    703c:	ldr	r0, [ip, #44]	; 0x2c
    7040:	bl	0 <coda_type_text_new>
    7044:	ldr	r3, [r5]
    7048:	str	r0, [r3, #8]
    704c:	ldr	r0, [r5]
    7050:	ldr	r1, [r0, #8]
    7054:	cmp	r1, #0
    7058:	bne	7064 <cd_type_init+0xa0>
    705c:	mvn	r0, #0
    7060:	b	70b4 <cd_type_init+0xf0>
    7064:	ldr	r1, [pc, #112]	; 70dc <cd_type_init+0x118>
    7068:	bl	940 <register_type_elements>
    706c:	ldr	r0, [r5]
    7070:	mov	r1, #11
    7074:	ldr	r2, [pc, #80]	; 70cc <cd_type_init+0x108>
    7078:	ldr	r3, [pc, #88]	; 70d8 <cd_type_init+0x114>
    707c:	bl	8bc <register_sub_element>
    7080:	ldr	r0, [r5]
    7084:	mov	r1, #4
    7088:	ldr	r2, [pc, #84]	; 70e4 <cd_type_init+0x120>
    708c:	ldr	r3, [pc, #52]	; 70c8 <cd_type_init+0x104>
    7090:	bl	8bc <register_sub_element>
    7094:	mov	r1, r4
    7098:	mov	r0, r5
    709c:	bl	77c <handle_xml_name>
    70a0:	cmp	r0, #0
    70a4:	beq	70b0 <cd_type_init+0xec>
    70a8:	mvn	r0, #0
    70ac:	b	70b4 <cd_type_init+0xf0>
    70b0:	mov	r0, #0
    70b4:	ldr	r4, [sp, #8]
    70b8:	ldr	r5, [sp, #12]
    70bc:	ldr	lr, [sp, #4]
    70c0:	add	sp, sp, #16
    70c4:	bx	lr
	...
    70d4:	.word	0x0000047e
	...
    70e0:	.word	0x00001899
    70e4:	.word	0x00000000

000070e8 <cd_union_set_field_expression>:
    70e8:	mov	ip, sp
    70ec:	sub	sp, sp, #16
    70f0:	str	ip, [sp]
    70f4:	str	lr, [sp, #4]
    70f8:	str	r4, [sp, #8]
    70fc:	mov	r4, r0
    7100:	ldr	r1, [r4]
    7104:	ldr	r2, [r1, #396]	; 0x18c
    7108:	ldr	r0, [r2, #8]
    710c:	ldr	r1, [r1, #8]
    7110:	bl	0 <coda_type_union_set_field_expression>
    7114:	cmp	r0, #0
    7118:	beq	7124 <cd_union_set_field_expression+0x3c>
    711c:	mvn	r0, #0
    7120:	b	7134 <cd_union_set_field_expression+0x4c>
    7124:	ldr	r1, [r4]
    7128:	mov	r3, #0
    712c:	str	r3, [r1, #8]
    7130:	mov	r0, #0
    7134:	ldr	r4, [sp, #8]
    7138:	ldr	lr, [sp, #4]
    713c:	add	sp, sp, #16
    7140:	bx	lr

00007144 <cd_union_add_field>:
    7144:	mov	ip, sp
    7148:	sub	sp, sp, #16
    714c:	str	ip, [sp]
    7150:	str	lr, [sp, #4]
    7154:	str	r4, [sp, #8]
    7158:	mov	r4, r0
    715c:	ldr	ip, [r4]
    7160:	ldr	r0, [ip, #8]
    7164:	bl	0 <coda_type_record_field_set_optional>
    7168:	ldr	r1, [r4]
    716c:	ldr	r3, [r1, #396]	; 0x18c
    7170:	ldr	r0, [r3, #8]
    7174:	ldr	r1, [r1, #8]
    7178:	bl	0 <coda_type_record_add_field>
    717c:	cmp	r0, #0
    7180:	beq	718c <cd_union_add_field+0x48>
    7184:	mvn	r0, #0
    7188:	b	719c <cd_union_add_field+0x58>
    718c:	ldr	r2, [r4]
    7190:	mov	r0, #0
    7194:	str	r0, [r2, #8]
    7198:	mov	r0, #0
    719c:	ldr	r4, [sp, #8]
    71a0:	ldr	lr, [sp, #4]
    71a4:	add	sp, sp, #16
    71a8:	bx	lr

000071ac <cd_union_finalise>:
    71ac:	mov	ip, sp
    71b0:	sub	sp, sp, #8
    71b4:	str	ip, [sp]
    71b8:	str	lr, [sp, #4]
    71bc:	ldr	r0, [r0]
    71c0:	ldr	r0, [r0, #8]
    71c4:	ldr	lr, [sp, #4]
    71c8:	add	sp, sp, #8
    71cc:	b	0 <coda_type_record_validate>

000071d0 <cd_union_init>:
    71d0:	mov	ip, sp
    71d4:	sub	sp, sp, #16
    71d8:	str	ip, [sp]
    71dc:	str	lr, [sp, #4]
    71e0:	str	r4, [sp, #8]
    71e4:	str	r5, [sp, #12]
    71e8:	mov	r4, r1
    71ec:	mov	r5, r0
    71f0:	mov	r1, r4
    71f4:	mov	r0, r5
    71f8:	bl	6b4 <handle_format_attribute_for_type>
    71fc:	cmp	r0, #0
    7200:	beq	720c <cd_union_init+0x3c>
    7204:	mvn	r0, #0
    7208:	b	72f0 <cd_union_init+0x120>
    720c:	ldr	r3, [r5]
    7210:	ldr	r1, [pc, #252]	; 7314 <cd_union_init+0x144>
    7214:	str	r1, [r3, #40]	; 0x28
    7218:	ldr	r0, [r5]
    721c:	ldr	r0, [r0, #44]	; 0x2c
    7220:	bl	0 <coda_type_union_new>
    7224:	ldr	ip, [r5]
    7228:	str	r0, [ip, #8]
    722c:	ldr	r2, [r5]
    7230:	ldr	r1, [r2, #8]
    7234:	cmp	r1, #0
    7238:	bne	7244 <cd_union_init+0x74>
    723c:	mvn	r0, #0
    7240:	b	72f0 <cd_union_init+0x120>
    7244:	mov	r1, r4
    7248:	mov	r0, r5
    724c:	bl	5c4 <handle_name_attribute_for_type>
    7250:	cmp	r0, #0
    7254:	beq	7260 <cd_union_init+0x90>
    7258:	mvn	r0, #0
    725c:	b	72f0 <cd_union_init+0x120>
    7260:	ldr	r0, [r5]
    7264:	mov	r1, #11
    7268:	ldr	r2, [pc, #160]	; 7310 <cd_union_init+0x140>
    726c:	ldr	r3, [pc, #164]	; 7318 <cd_union_init+0x148>
    7270:	bl	8bc <register_sub_element>
    7274:	ldr	r0, [r5]
    7278:	mov	r1, #7
    727c:	ldr	r2, [pc, #136]	; 730c <cd_union_init+0x13c>
    7280:	ldr	r3, [pc, #160]	; 7328 <cd_union_init+0x158>
    7284:	bl	8bc <register_sub_element>
    7288:	ldr	r0, [r5]
    728c:	mov	r1, #15
    7290:	ldr	r2, [pc, #116]	; 730c <cd_union_init+0x13c>
    7294:	ldr	r3, [pc, #104]	; 7304 <cd_union_init+0x134>
    7298:	bl	8bc <register_sub_element>
    729c:	ldr	r0, [r5]
    72a0:	mov	r1, #14
    72a4:	ldr	r2, [pc, #112]	; 731c <cd_union_init+0x14c>
    72a8:	ldr	r3, [pc, #112]	; 7320 <cd_union_init+0x150>
    72ac:	bl	8bc <register_sub_element>
    72b0:	ldr	r0, [r5]
    72b4:	mov	r1, #4
    72b8:	ldr	r2, [pc, #108]	; 732c <cd_union_init+0x15c>
    72bc:	ldr	r3, [pc, #68]	; 7308 <cd_union_init+0x138>
    72c0:	bl	8bc <register_sub_element>
    72c4:	ldr	r2, [r5]
    72c8:	ldr	ip, [pc, #84]	; 7324 <cd_union_init+0x154>
    72cc:	str	ip, [r2, #36]	; 0x24
    72d0:	mov	r1, r4
    72d4:	mov	r0, r5
    72d8:	bl	77c <handle_xml_name>
    72dc:	cmp	r0, #0
    72e0:	beq	72ec <cd_union_init+0x11c>
    72e4:	mvn	r0, #0
    72e8:	b	72f0 <cd_union_init+0x120>
    72ec:	mov	r0, #0
    72f0:	ldr	r4, [sp, #8]
    72f4:	ldr	r5, [sp, #12]
    72f8:	ldr	lr, [sp, #4]
    72fc:	add	sp, sp, #16
    7300:	bx	lr
	...

00007330 <cd_vsf_integer_set_type>:
    7330:	mov	ip, sp
    7334:	sub	sp, sp, #8
    7338:	str	ip, [sp]
    733c:	str	lr, [sp, #4]
    7340:	ldr	r1, [r0]
    7344:	ldr	r2, [r1, #396]	; 0x18c
    7348:	ldr	r0, [r2, #8]
    734c:	ldr	r1, [r1, #8]
    7350:	ldr	lr, [sp, #4]
    7354:	add	sp, sp, #8
    7358:	b	0 <coda_type_vsf_integer_set_type>

0000735c <cd_vsf_integer_set_scale_factor>:
    735c:	mov	ip, sp
    7360:	sub	sp, sp, #8
    7364:	str	ip, [sp]
    7368:	str	lr, [sp, #4]
    736c:	ldr	r1, [r0]
    7370:	ldr	r2, [r1, #396]	; 0x18c
    7374:	ldr	r0, [r2, #8]
    7378:	ldr	r1, [r1, #8]
    737c:	ldr	lr, [sp, #4]
    7380:	add	sp, sp, #8
    7384:	b	0 <coda_type_vsf_integer_set_scale_factor>

00007388 <cd_vsf_integer_set_unit>:
    7388:	mov	ip, sp
    738c:	sub	sp, sp, #8
    7390:	str	ip, [sp]
    7394:	str	lr, [sp, #4]
    7398:	ldr	r0, [r0]
    739c:	ldr	r1, [r0, #12]
    73a0:	cmp	r1, #0
    73a4:	bne	73c0 <cd_vsf_integer_set_unit+0x38>
    73a8:	ldr	r0, [r0, #396]	; 0x18c
    73ac:	ldr	r0, [r0, #8]
    73b0:	ldr	r1, [pc, #28]	; 73d4 <cd_vsf_integer_set_unit+0x4c>
    73b4:	ldr	lr, [sp, #4]
    73b8:	add	sp, sp, #8
    73bc:	b	0 <coda_type_vsf_integer_set_unit>
    73c0:	ldr	r3, [r0, #396]	; 0x18c
    73c4:	ldr	r0, [r3, #8]
    73c8:	ldr	lr, [sp, #4]
    73cc:	add	sp, sp, #8
    73d0:	b	0 <coda_type_vsf_integer_set_unit>
    73d4:	.word	0x00002067

000073d8 <cd_vsf_integer_finalise>:
    73d8:	mov	ip, sp
    73dc:	sub	sp, sp, #8
    73e0:	str	ip, [sp]
    73e4:	str	lr, [sp, #4]
    73e8:	ldr	r0, [r0]
    73ec:	ldr	r0, [r0, #8]
    73f0:	ldr	lr, [sp, #4]
    73f4:	add	sp, sp, #8
    73f8:	b	0 <coda_type_vsf_integer_validate>

000073fc <cd_vsf_integer_init>:
    73fc:	mov	ip, sp
    7400:	sub	sp, sp, #16
    7404:	str	ip, [sp]
    7408:	str	lr, [sp, #4]
    740c:	str	r4, [sp, #8]
    7410:	str	r5, [sp, #12]
    7414:	mov	r4, r1
    7418:	mov	r5, r0
    741c:	mov	r1, r4
    7420:	mov	r0, r5
    7424:	bl	6b4 <handle_format_attribute_for_type>
    7428:	cmp	r0, #0
    742c:	beq	7438 <cd_vsf_integer_init+0x3c>
    7430:	mvn	r0, #0
    7434:	b	74e4 <cd_vsf_integer_init+0xe8>
    7438:	ldr	r3, [r5]
    743c:	ldr	r2, [pc, #188]	; 7500 <cd_vsf_integer_init+0x104>
    7440:	str	r2, [r3, #40]	; 0x28
    7444:	ldr	r3, [r5]
    7448:	ldr	r0, [r3, #44]	; 0x2c
    744c:	bl	0 <coda_type_vsf_integer_new>
    7450:	ldr	r3, [r5]
    7454:	str	r0, [r3, #8]
    7458:	ldr	r0, [r5]
    745c:	ldr	r3, [r0, #8]
    7460:	cmp	r3, #0
    7464:	bne	7470 <cd_vsf_integer_init+0x74>
    7468:	mvn	r0, #0
    746c:	b	74e4 <cd_vsf_integer_init+0xe8>
    7470:	mov	r1, r4
    7474:	mov	r0, r5
    7478:	bl	5c4 <handle_name_attribute_for_type>
    747c:	cmp	r0, #0
    7480:	beq	748c <cd_vsf_integer_init+0x90>
    7484:	mvn	r0, #0
    7488:	b	74e4 <cd_vsf_integer_init+0xe8>
    748c:	ldr	r0, [r5]
    7490:	mov	r1, #11
    7494:	ldr	r2, [pc, #92]	; 74f8 <cd_vsf_integer_init+0xfc>
    7498:	ldr	r3, [pc, #100]	; 7504 <cd_vsf_integer_init+0x108>
    749c:	bl	8bc <register_sub_element>
    74a0:	ldr	r0, [r5]
    74a4:	ldr	r1, [pc, #104]	; 7514 <cd_vsf_integer_init+0x118>
    74a8:	bl	940 <register_type_elements>
    74ac:	ldr	r0, [r5]
    74b0:	mov	r1, #36	; 0x24
    74b4:	ldr	r2, [pc, #64]	; 74fc <cd_vsf_integer_init+0x100>
    74b8:	ldr	r3, [pc, #80]	; 7510 <cd_vsf_integer_init+0x114>
    74bc:	bl	8bc <register_sub_element>
    74c0:	ldr	r0, [r5]
    74c4:	mov	r1, #41	; 0x29
    74c8:	ldr	r2, [pc, #40]	; 74f8 <cd_vsf_integer_init+0xfc>
    74cc:	ldr	r3, [pc, #52]	; 7508 <cd_vsf_integer_init+0x10c>
    74d0:	bl	8bc <register_sub_element>
    74d4:	ldr	r0, [r5]
    74d8:	ldr	r2, [pc, #44]	; 750c <cd_vsf_integer_init+0x110>
    74dc:	str	r2, [r0, #36]	; 0x24
    74e0:	mov	r0, #0
    74e4:	ldr	r4, [sp, #8]
    74e8:	ldr	r5, [sp, #12]
    74ec:	ldr	lr, [sp, #4]
    74f0:	add	sp, sp, #16
    74f4:	bx	lr
	...

00007518 <whitespace_handler>:
    7518:	mov	ip, sp
    751c:	sub	sp, sp, #16
    7520:	str	ip, [sp]
    7524:	str	lr, [sp, #4]
    7528:	str	r4, [sp, #8]
    752c:	mov	r4, r0
    7530:	mov	r0, r1
    7534:	mov	r1, r2
    7538:	ldr	r2, [r4, #48]	; 0x30
    753c:	cmp	r2, #0
    7540:	bgt	7574 <whitespace_handler+0x5c>
    7544:	bl	ac <is_whitespace>
    7548:	cmp	r0, #0
    754c:	bne	7574 <whitespace_handler+0x5c>
    7550:	movw	r0, #65136	; 0xfe70
    7554:	movt	r0, #65535	; 0xffff
    7558:	ldr	r1, [pc, #36]	; 7584 <whitespace_handler+0x6c>
    755c:	bl	0 <coda_set_error>
    7560:	mov	r0, r4
    7564:	ldr	r4, [sp, #8]
    7568:	ldr	lr, [sp, #4]
    756c:	add	sp, sp, #16
    7570:	b	880 <abort_parser>
    7574:	ldr	r4, [sp, #8]
    7578:	ldr	lr, [sp, #4]
    757c:	add	sp, sp, #16
    7580:	bx	lr
    7584:	.word	0x000004ea

00007588 <string_handler>:
    7588:	mov	ip, sp
    758c:	sub	sp, sp, #40	; 0x28
    7590:	str	ip, [sp, #4]
    7594:	str	lr, [sp, #8]
    7598:	str	r4, [sp, #16]
    759c:	str	r5, [sp, #20]
    75a0:	str	r6, [sp, #24]
    75a4:	str	r7, [sp, #28]
    75a8:	str	r8, [sp, #32]
    75ac:	mov	r6, r2
    75b0:	mov	r7, r1
    75b4:	mov	r4, r0
    75b8:	ldr	r2, [r4, #48]	; 0x30
    75bc:	cmp	r2, #0
    75c0:	bgt	76fc <string_handler+0x174>
    75c4:	ldr	r0, [r4]
    75c8:	ldr	r0, [r0, #12]
    75cc:	cmp	r0, #0
    75d0:	beq	7680 <string_handler+0xf8>
    75d4:	bl	0 <strlen>
    75d8:	mov	r5, r0
    75dc:	add	r2, r5, r6
    75e0:	add	r0, r2, #1
    75e4:	bl	0 <malloc>
    75e8:	mov	r8, r0
    75ec:	cmp	r8, #0
    75f0:	bne	7638 <string_handler+0xb0>
    75f4:	mvn	r0, #0
    75f8:	ldr	r1, [pc, #288]	; 7720 <string_handler+0x198>
    75fc:	add	r2, r5, r6
    7600:	add	r2, r2, #1
    7604:	ldr	r3, [pc, #272]	; 771c <string_handler+0x194>
    7608:	movw	ip, #3857	; 0xf11
    760c:	str	ip, [sp]
    7610:	bl	0 <coda_set_error>
    7614:	mov	r0, r4
    7618:	ldr	r4, [sp, #16]
    761c:	ldr	r5, [sp, #20]
    7620:	ldr	r6, [sp, #24]
    7624:	ldr	r7, [sp, #28]
    7628:	ldr	r8, [sp, #32]
    762c:	ldr	lr, [sp, #8]
    7630:	add	sp, sp, #40	; 0x28
    7634:	b	880 <abort_parser>
    7638:	ldr	r1, [r4]
    763c:	ldr	r1, [r1, #12]
    7640:	mov	r2, r5
    7644:	mov	r0, r8
    7648:	bl	0 <memcpy>
    764c:	add	r0, r8, r5
    7650:	mov	r2, r6
    7654:	mov	r1, r7
    7658:	bl	0 <memcpy>
    765c:	add	r3, r5, r6
    7660:	mov	r1, #0
    7664:	strb	r1, [r8, r3]
    7668:	ldr	r0, [r4]
    766c:	ldr	r0, [r0, #12]
    7670:	bl	0 <free>
    7674:	ldr	r0, [r4]
    7678:	str	r8, [r0, #12]
    767c:	b	76fc <string_handler+0x174>
    7680:	add	r0, r6, #1
    7684:	bl	0 <malloc>
    7688:	ldr	ip, [r4]
    768c:	str	r0, [ip, #12]
    7690:	ldr	r3, [r4]
    7694:	ldr	r0, [r3, #12]
    7698:	cmp	r0, #0
    769c:	bne	76e0 <string_handler+0x158>
    76a0:	mvn	r0, #0
    76a4:	ldr	r1, [pc, #116]	; 7720 <string_handler+0x198>
    76a8:	add	r2, r6, #1
    76ac:	ldr	r3, [pc, #104]	; 771c <string_handler+0x194>
    76b0:	movw	ip, #3841	; 0xf01
    76b4:	str	ip, [sp]
    76b8:	bl	0 <coda_set_error>
    76bc:	mov	r0, r4
    76c0:	ldr	r4, [sp, #16]
    76c4:	ldr	r5, [sp, #20]
    76c8:	ldr	r6, [sp, #24]
    76cc:	ldr	r7, [sp, #28]
    76d0:	ldr	r8, [sp, #32]
    76d4:	ldr	lr, [sp, #8]
    76d8:	add	sp, sp, #40	; 0x28
    76dc:	b	880 <abort_parser>
    76e0:	mov	r2, r6
    76e4:	mov	r1, r7
    76e8:	bl	0 <memcpy>
    76ec:	ldr	ip, [r4]
    76f0:	ldr	ip, [ip, #12]
    76f4:	mov	r3, #0
    76f8:	strb	r3, [ip, r6]
    76fc:	ldr	r4, [sp, #16]
    7700:	ldr	r5, [sp, #20]
    7704:	ldr	r6, [sp, #24]
    7708:	ldr	r7, [sp, #28]
    770c:	ldr	r8, [sp, #32]
    7710:	ldr	lr, [sp, #8]
    7714:	add	sp, sp, #40	; 0x28
    7718:	bx	lr
    771c:	.word	0x00001939
    7720:	.word	0x00000e60

00007724 <push_node>:
    7724:	mov	ip, sp
    7728:	sub	sp, sp, #24
    772c:	str	ip, [sp]
    7730:	str	lr, [sp, #4]
    7734:	str	r4, [sp, #8]
    7738:	str	r5, [sp, #12]
    773c:	str	r6, [sp, #16]
    7740:	str	r7, [sp, #20]
    7744:	mov	r4, r2
    7748:	mov	r5, r1
    774c:	mov	r6, r0
    7750:	mov	r0, #400	; 0x190
    7754:	bl	0 <malloc>
    7758:	mov	r7, r0
    775c:	cmp	r7, #0
    7760:	bne	7778 <push_node+0x54>
    7764:	ldr	r0, [pc, #284]	; 7888 <push_node+0x164>
    7768:	ldr	r1, [pc, #276]	; 7884 <push_node+0x160>
    776c:	movw	r2, #3877	; 0xf25
    7770:	ldr	r3, [pc, #264]	; 7880 <push_node+0x15c>
    7774:	bl	0 <__assert_fail>
    7778:	str	r5, [r7]
    777c:	mov	r1, #0
    7780:	str	r1, [r7, #4]
    7784:	mov	r3, #0
    7788:	str	r3, [r7, #8]
    778c:	mov	r0, #0
    7790:	str	r0, [r7, #12]
    7794:	mvn	r2, #0
    7798:	mvn	r1, #0
    779c:	str	r1, [r7, #16]
    77a0:	str	r2, [r7, #20]
    77a4:	bl	0 <coda_NaN>
    77a8:	vstr	d0, [r7, #24]
    77ac:	mov	ip, #0
    77b0:	str	ip, [r7, #32]
    77b4:	mov	ip, #0
    77b8:	str	ip, [r7, #36]	; 0x24
    77bc:	mov	r0, #0
    77c0:	str	r0, [r7, #40]	; 0x28
    77c4:	mov	r1, #0
    77c8:	str	r1, [r7, #48]	; 0x30
    77cc:	add	r0, r7, #52	; 0x34
    77d0:	mov	r1, #0
    77d4:	mov	r2, #172	; 0xac
    77d8:	bl	0 <memset>
    77dc:	add	r0, r7, #224	; 0xe0
    77e0:	mov	r1, #0
    77e4:	mov	r2, #172	; 0xac
    77e8:	bl	0 <memset>
    77ec:	ldr	r3, [r6]
    77f0:	str	r3, [r7, #396]	; 0x18c
    77f4:	str	r7, [r6]
    77f8:	ldr	r0, [r7, #396]	; 0x18c
    77fc:	cmp	r0, #0
    7800:	beq	7834 <push_node+0x110>
    7804:	lsl	r2, r5, #2
    7808:	add	r2, r0, r2
    780c:	ldr	ip, [r2, #52]	; 0x34
    7810:	cmp	ip, #0
    7814:	beq	7834 <push_node+0x110>
    7818:	mov	r1, r4
    781c:	mov	r0, r6
    7820:	blx	ip
    7824:	cmp	r0, #0
    7828:	beq	7834 <push_node+0x110>
    782c:	mvn	r0, #0
    7830:	b	7860 <push_node+0x13c>
    7834:	ldr	ip, [r7, #32]
    7838:	cmp	ip, #0
    783c:	bne	7850 <push_node+0x12c>
    7840:	ldr	r0, [r6, #4]
    7844:	ldr	r1, [pc, #48]	; 787c <push_node+0x158>
    7848:	bl	0 <coda_XML_SetCharacterDataHandler>
    784c:	b	785c <push_node+0x138>
    7850:	ldr	r0, [r6, #4]
    7854:	ldr	r1, [pc, #48]	; 788c <push_node+0x168>
    7858:	bl	0 <coda_XML_SetCharacterDataHandler>
    785c:	mov	r0, #0
    7860:	ldr	r4, [sp, #8]
    7864:	ldr	r5, [sp, #12]
    7868:	ldr	r6, [sp, #16]
    786c:	ldr	r7, [sp, #20]
    7870:	ldr	lr, [sp, #4]
    7874:	add	sp, sp, #24
    7878:	bx	lr
    787c:	.word	0x00000000
    7880:	.word	0x000021aa
    7884:	.word	0x00001939
    7888:	.word	0x00001f63
    788c:	.word	0x00000000

00007890 <start_element_handler>:
    7890:	mov	ip, sp
    7894:	sub	sp, sp, #32
    7898:	str	ip, [sp, #4]
    789c:	str	lr, [sp, #8]
    78a0:	str	r4, [sp, #16]
    78a4:	str	r5, [sp, #20]
    78a8:	str	r6, [sp, #24]
    78ac:	str	r7, [sp, #28]
    78b0:	mov	r7, r2
    78b4:	mov	r5, r1
    78b8:	mov	r6, r0
    78bc:	ldr	r1, [r6, #48]	; 0x30
    78c0:	cmp	r1, #0
    78c4:	ble	78d4 <start_element_handler+0x44>
    78c8:	add	r2, r1, #1
    78cc:	str	r2, [r6, #48]	; 0x30
    78d0:	b	7970 <start_element_handler+0xe0>
    78d4:	ldr	r0, [r6, #8]
    78d8:	mov	r1, r5
    78dc:	bl	0 <coda_hashtable_get_index_from_name>
    78e0:	mov	r4, r0
    78e4:	cmp	r4, #0
    78e8:	bge	7918 <start_element_handler+0x88>
    78ec:	ldr	r0, [pc, #392]	; 7a7c <start_element_handler+0x1ec>
    78f0:	bl	0 <strlen>
    78f4:	mov	r2, r0
    78f8:	ldr	r1, [pc, #380]	; 7a7c <start_element_handler+0x1ec>
    78fc:	mov	r0, r5
    7900:	bl	0 <strncmp>
    7904:	cmp	r0, #0
    7908:	beq	7918 <start_element_handler+0x88>
    790c:	mov	r0, #1
    7910:	str	r0, [r6, #48]	; 0x30
    7914:	b	7970 <start_element_handler+0xe0>
    7918:	cmp	r4, #0
    791c:	blt	798c <start_element_handler+0xfc>
    7920:	ldr	r2, [r6]
    7924:	lsl	r0, r4, #2
    7928:	add	r0, r2, r0
    792c:	ldr	r3, [r0, #52]	; 0x34
    7930:	cmp	r3, #0
    7934:	beq	798c <start_element_handler+0xfc>
    7938:	mov	r2, r7
    793c:	mov	r1, r4
    7940:	mov	r0, r6
    7944:	bl	7724 <push_node>
    7948:	cmp	r0, #0
    794c:	beq	7970 <start_element_handler+0xe0>
    7950:	mov	r0, r6
    7954:	ldr	r4, [sp, #16]
    7958:	ldr	r5, [sp, #20]
    795c:	ldr	r6, [sp, #24]
    7960:	ldr	r7, [sp, #28]
    7964:	ldr	lr, [sp, #8]
    7968:	add	sp, sp, #32
    796c:	b	880 <abort_parser>
    7970:	ldr	r4, [sp, #16]
    7974:	ldr	r5, [sp, #20]
    7978:	ldr	r6, [sp, #24]
    797c:	ldr	r7, [sp, #28]
    7980:	ldr	lr, [sp, #8]
    7984:	add	sp, sp, #32
    7988:	bx	lr
    798c:	ldr	ip, [r6]
    7990:	ldr	r3, [ip]
    7994:	cmn	r3, #1
    7998:	beq	7a30 <start_element_handler+0x1a0>
    799c:	ldr	r1, [ip, #48]	; 0x30
    79a0:	cmp	r1, #0
    79a4:	beq	79f4 <start_element_handler+0x164>
    79a8:	mov	r0, r5
    79ac:	bl	0 <coda_element_name_from_xml_name>
    79b0:	mov	r4, r0
    79b4:	ldr	r0, [r6]
    79b8:	ldr	r0, [r0]
    79bc:	bl	0 <xml_element_name>
    79c0:	mov	r5, r0
    79c4:	ldr	r2, [r6]
    79c8:	ldr	r0, [r2, #44]	; 0x2c
    79cc:	bl	0 <coda_type_get_format_name>
    79d0:	mov	r2, r0
    79d4:	movw	r0, #65136	; 0xfe70
    79d8:	movt	r0, #65535	; 0xffff
    79dc:	ldr	r1, [pc, #148]	; 7a78 <start_element_handler+0x1e8>
    79e0:	str	r2, [sp]
    79e4:	mov	r3, r5
    79e8:	mov	r2, r4
    79ec:	bl	0 <coda_set_error>
    79f0:	b	7a54 <start_element_handler+0x1c4>
    79f4:	mov	r0, r5
    79f8:	bl	0 <coda_element_name_from_xml_name>
    79fc:	mov	r4, r0
    7a00:	ldr	r3, [r6]
    7a04:	ldr	r0, [r3]
    7a08:	bl	0 <xml_element_name>
    7a0c:	movw	r3, #65136	; 0xfe70
    7a10:	movt	r3, #65535	; 0xffff
    7a14:	ldr	r1, [pc, #88]	; 7a74 <start_element_handler+0x1e4>
    7a18:	mov	ip, r0
    7a1c:	mov	r0, r3
    7a20:	mov	r3, ip
    7a24:	mov	r2, r4
    7a28:	bl	0 <coda_set_error>
    7a2c:	b	7a54 <start_element_handler+0x1c4>
    7a30:	mov	r0, r5
    7a34:	bl	0 <coda_element_name_from_xml_name>
    7a38:	movw	r2, #65136	; 0xfe70
    7a3c:	movt	r2, #65535	; 0xffff
    7a40:	ldr	r1, [pc, #56]	; 7a80 <start_element_handler+0x1f0>
    7a44:	mov	r3, r0
    7a48:	mov	r0, r2
    7a4c:	mov	r2, r3
    7a50:	bl	0 <coda_set_error>
    7a54:	mov	r0, r6
    7a58:	ldr	r4, [sp, #16]
    7a5c:	ldr	r5, [sp, #20]
    7a60:	ldr	r6, [sp, #24]
    7a64:	ldr	r7, [sp, #28]
    7a68:	ldr	lr, [sp, #8]
    7a6c:	add	sp, sp, #32
    7a70:	b	880 <abort_parser>
    7a74:	.word	0x0000100a
    7a78:	.word	0x00000cf8
    7a7c:	.word	0x00000a97
    7a80:	.word	0x00000497

00007a84 <end_element_handler>:
    7a84:	mov	ip, sp
    7a88:	sub	sp, sp, #16
    7a8c:	str	ip, [sp]
    7a90:	str	lr, [sp, #4]
    7a94:	str	r4, [sp, #8]
    7a98:	str	r5, [sp, #12]
    7a9c:	mov	r4, r0
    7aa0:	ldr	r1, [r4, #36]	; 0x24
    7aa4:	cmp	r1, #0
    7aa8:	bne	7bf4 <end_element_handler+0x170>
    7aac:	ldr	r3, [r4, #48]	; 0x30
    7ab0:	cmp	r3, #0
    7ab4:	ble	7ac4 <end_element_handler+0x40>
    7ab8:	sub	r3, r3, #1
    7abc:	str	r3, [r4, #48]	; 0x30
    7ac0:	b	7bf4 <end_element_handler+0x170>
    7ac4:	ldr	r5, [r4]
    7ac8:	cmp	r5, #0
    7acc:	bne	7ae4 <end_element_handler+0x60>
    7ad0:	ldr	r0, [pc, #312]	; 7c10 <end_element_handler+0x18c>
    7ad4:	ldr	r1, [pc, #304]	; 7c0c <end_element_handler+0x188>
    7ad8:	movw	r2, #3917	; 0xf4d
    7adc:	ldr	r3, [pc, #312]	; 7c1c <end_element_handler+0x198>
    7ae0:	bl	0 <__assert_fail>
    7ae4:	ldr	ip, [r5, #36]	; 0x24
    7ae8:	cmp	ip, #0
    7aec:	beq	7b08 <end_element_handler+0x84>
    7af0:	mov	r0, r4
    7af4:	blx	ip
    7af8:	cmp	r0, #0
    7afc:	beq	7b08 <end_element_handler+0x84>
    7b00:	mvn	r1, #0
    7b04:	b	7bd4 <end_element_handler+0x150>
    7b08:	ldr	ip, [r5, #396]	; 0x18c
    7b0c:	cmp	ip, #0
    7b10:	beq	7b44 <end_element_handler+0xc0>
    7b14:	ldr	r2, [r5]
    7b18:	lsl	r2, r2, #2
    7b1c:	add	r1, ip, r2
    7b20:	ldr	ip, [r1, #224]	; 0xe0
    7b24:	cmp	ip, #0
    7b28:	beq	7b44 <end_element_handler+0xc0>
    7b2c:	mov	r0, r4
    7b30:	blx	ip
    7b34:	cmp	r0, #0
    7b38:	beq	7b44 <end_element_handler+0xc0>
    7b3c:	mvn	r1, #0
    7b40:	b	7bd4 <end_element_handler+0x150>
    7b44:	ldr	r0, [r5, #8]
    7b48:	cmp	r0, #0
    7b4c:	beq	7b7c <end_element_handler+0xf8>
    7b50:	ldr	ip, [r5, #40]	; 0x28
    7b54:	cmp	ip, #0
    7b58:	bne	7b70 <end_element_handler+0xec>
    7b5c:	ldr	r0, [pc, #176]	; 7c14 <end_element_handler+0x190>
    7b60:	ldr	r1, [pc, #164]	; 7c0c <end_element_handler+0x188>
    7b64:	movw	r2, #3937	; 0xf61
    7b68:	ldr	r3, [pc, #172]	; 7c1c <end_element_handler+0x198>
    7b6c:	bl	0 <__assert_fail>
    7b70:	ldr	ip, [r5, #40]	; 0x28
    7b74:	ldr	r0, [r5, #8]
    7b78:	blx	ip
    7b7c:	ldr	r0, [r5, #12]
    7b80:	cmp	r0, #0
    7b84:	beq	7b8c <end_element_handler+0x108>
    7b88:	bl	0 <free>
    7b8c:	ldr	ip, [r5, #396]	; 0x18c
    7b90:	str	ip, [r4]
    7b94:	mov	r0, r5
    7b98:	bl	0 <free>
    7b9c:	ldr	r0, [r4]
    7ba0:	cmp	r0, #0
    7ba4:	beq	7bc4 <end_element_handler+0x140>
    7ba8:	ldr	ip, [r0, #32]
    7bac:	cmp	ip, #0
    7bb0:	beq	7bc4 <end_element_handler+0x140>
    7bb4:	ldr	r0, [r4, #4]
    7bb8:	ldr	r1, [pc, #88]	; 7c18 <end_element_handler+0x194>
    7bbc:	bl	0 <coda_XML_SetCharacterDataHandler>
    7bc0:	b	7bd0 <end_element_handler+0x14c>
    7bc4:	ldr	r0, [r4, #4]
    7bc8:	ldr	r1, [pc, #56]	; 7c08 <end_element_handler+0x184>
    7bcc:	bl	0 <coda_XML_SetCharacterDataHandler>
    7bd0:	mov	r1, #0
    7bd4:	cmp	r1, #0
    7bd8:	beq	7bf4 <end_element_handler+0x170>
    7bdc:	mov	r0, r4
    7be0:	ldr	r4, [sp, #8]
    7be4:	ldr	r5, [sp, #12]
    7be8:	ldr	lr, [sp, #4]
    7bec:	add	sp, sp, #16
    7bf0:	b	880 <abort_parser>
    7bf4:	ldr	r4, [sp, #8]
    7bf8:	ldr	r5, [sp, #12]
    7bfc:	ldr	lr, [sp, #4]
    7c00:	add	sp, sp, #16
    7c04:	bx	lr
    7c08:	.word	0x00000000
    7c0c:	.word	0x00001939
    7c10:	.word	0x00001f63
    7c14:	.word	0x00001c75
    7c18:	.word	0x00000000
    7c1c:	.word	0x000021b4

00007c20 <parser_info_delete>:
    7c20:	mov	ip, sp
    7c24:	sub	sp, sp, #16
    7c28:	str	ip, [sp]
    7c2c:	str	lr, [sp, #4]
    7c30:	str	r4, [sp, #8]
    7c34:	str	r5, [sp, #12]
    7c38:	mov	r4, r0
    7c3c:	ldr	r5, [r4]
    7c40:	cmp	r5, #0
    7c44:	beq	7ca4 <parser_info_delete+0x84>
    7c48:	ldr	r1, [r5, #8]
    7c4c:	cmp	r1, #0
    7c50:	beq	7c80 <parser_info_delete+0x60>
    7c54:	ldr	r2, [r5, #40]	; 0x28
    7c58:	cmp	r2, #0
    7c5c:	bne	7c74 <parser_info_delete+0x54>
    7c60:	ldr	r0, [pc, #140]	; 7cf4 <parser_info_delete+0xd4>
    7c64:	ldr	r1, [pc, #132]	; 7cf0 <parser_info_delete+0xd0>
    7c68:	movw	r2, #4055	; 0xfd7
    7c6c:	ldr	r3, [pc, #132]	; 7cf8 <parser_info_delete+0xd8>
    7c70:	bl	0 <__assert_fail>
    7c74:	ldr	ip, [r5, #40]	; 0x28
    7c78:	ldr	r0, [r5, #8]
    7c7c:	blx	ip
    7c80:	ldr	r0, [r5, #12]
    7c84:	cmp	r0, #0
    7c88:	beq	7c90 <parser_info_delete+0x70>
    7c8c:	bl	0 <free>
    7c90:	ldr	r3, [r5, #396]	; 0x18c
    7c94:	str	r3, [r4]
    7c98:	mov	r0, r5
    7c9c:	bl	0 <free>
    7ca0:	b	7c3c <parser_info_delete+0x1c>
    7ca4:	ldr	r0, [r4, #4]
    7ca8:	cmp	r0, #0
    7cac:	beq	7cb4 <parser_info_delete+0x94>
    7cb0:	bl	0 <coda_XML_ParserFree>
    7cb4:	ldr	r0, [r4, #8]
    7cb8:	cmp	r0, #0
    7cbc:	beq	7cc4 <parser_info_delete+0xa4>
    7cc0:	bl	0 <coda_hashtable_delete>
    7cc4:	ldr	r0, [r4, #12]
    7cc8:	cmp	r0, #0
    7ccc:	beq	7cd4 <parser_info_delete+0xb4>
    7cd0:	bl	0 <free>
    7cd4:	mov	r0, #0
    7cd8:	str	r0, [r4, #16]
    7cdc:	ldr	r4, [sp, #8]
    7ce0:	ldr	r5, [sp, #12]
    7ce4:	ldr	lr, [sp, #4]
    7ce8:	add	sp, sp, #16
    7cec:	bx	lr
    7cf0:	.word	0x00001939
    7cf4:	.word	0x00001c75
    7cf8:	.word	0x000021bd

00007cfc <parse_entry>:
    7cfc:	mov	ip, sp
    7d00:	sub	sp, sp, #104	; 0x68
    7d04:	str	ip, [sp, #4]
    7d08:	str	lr, [sp, #8]
    7d0c:	str	r4, [sp, #16]
    7d10:	str	r5, [sp, #20]
    7d14:	str	r6, [sp, #24]
    7d18:	str	r7, [sp, #28]
    7d1c:	str	r8, [sp, #32]
    7d20:	str	r9, [sp, #36]	; 0x24
    7d24:	str	sl, [sp, #40]	; 0x28
    7d28:	ldr	r9, [ip]
    7d2c:	mov	r8, r3
    7d30:	mov	r4, r2
    7d34:	mov	r7, r1
    7d38:	mov	r6, r0
    7d3c:	mov	r5, #0
    7d40:	cmp	r7, #0
    7d44:	beq	7e40 <parse_entry+0x144>
    7d48:	cmp	r7, #1
    7d4c:	beq	7dcc <parse_entry+0xd0>
    7d50:	cmp	r7, #2
    7d54:	bne	7e68 <parse_entry+0x16c>
    7d58:	cmp	r4, #0
    7d5c:	bne	7d74 <parse_entry+0x78>
    7d60:	ldr	r0, [pc, #1380]	; 82cc <parse_entry+0x5d0>
    7d64:	ldr	r1, [pc, #1304]	; 8284 <parse_entry+0x588>
    7d68:	movw	r2, #4111	; 0x100f
    7d6c:	ldr	r3, [pc, #1392]	; 82e4 <parse_entry+0x5e8>
    7d70:	bl	0 <__assert_fail>
    7d74:	mov	r0, r4
    7d78:	bl	0 <strlen>
    7d7c:	add	r0, r0, #14
    7d80:	bl	0 <malloc>
    7d84:	mov	r5, r0
    7d88:	cmp	r5, #0
    7d8c:	bne	7db8 <parse_entry+0xbc>
    7d90:	mov	r0, r4
    7d94:	bl	0 <strlen>
    7d98:	mov	r3, r0
    7d9c:	mvn	r0, #0
    7da0:	ldr	r1, [pc, #1304]	; 82c0 <parse_entry+0x5c4>
    7da4:	add	r2, r3, #14
    7da8:	ldr	r3, [pc, #1236]	; 8284 <parse_entry+0x588>
    7dac:	movw	sl, #4116	; 0x1014
    7db0:	str	sl, [sp]
    7db4:	bl	0 <coda_set_error>
    7db8:	ldr	r1, [pc, #1288]	; 82c8 <parse_entry+0x5cc>
    7dbc:	mov	r2, r4
    7dc0:	mov	r0, r5
    7dc4:	bl	0 <sprintf>
    7dc8:	b	7e68 <parse_entry+0x16c>
    7dcc:	cmp	r4, #0
    7dd0:	bne	7de8 <parse_entry+0xec>
    7dd4:	ldr	r0, [pc, #1264]	; 82cc <parse_entry+0x5d0>
    7dd8:	ldr	r1, [pc, #1188]	; 8284 <parse_entry+0x588>
    7ddc:	movw	r2, #4101	; 0x1005
    7de0:	ldr	r3, [pc, #1276]	; 82e4 <parse_entry+0x5e8>
    7de4:	bl	0 <__assert_fail>
    7de8:	mov	r0, r4
    7dec:	bl	0 <strlen>
    7df0:	add	r0, r0, #11
    7df4:	bl	0 <malloc>
    7df8:	mov	r5, r0
    7dfc:	cmp	r5, #0
    7e00:	bne	7e2c <parse_entry+0x130>
    7e04:	mov	r0, r4
    7e08:	bl	0 <strlen>
    7e0c:	mov	r2, r0
    7e10:	mvn	r0, #0
    7e14:	ldr	r1, [pc, #1188]	; 82c0 <parse_entry+0x5c4>
    7e18:	add	r2, r2, #11
    7e1c:	ldr	r3, [pc, #1120]	; 8284 <parse_entry+0x588>
    7e20:	movw	sl, #4106	; 0x100a
    7e24:	str	sl, [sp]
    7e28:	bl	0 <coda_set_error>
    7e2c:	ldr	r1, [pc, #1116]	; 8290 <parse_entry+0x594>
    7e30:	mov	r2, r4
    7e34:	mov	r0, r5
    7e38:	bl	0 <sprintf>
    7e3c:	b	7e68 <parse_entry+0x16c>
    7e40:	ldr	r0, [pc, #1136]	; 82b8 <parse_entry+0x5bc>
    7e44:	bl	0 <strdup>
    7e48:	mov	r5, r0
    7e4c:	cmp	r5, #0
    7e50:	bne	7e68 <parse_entry+0x16c>
    7e54:	mvn	r0, #0
    7e58:	ldr	r1, [pc, #1064]	; 8288 <parse_entry+0x58c>
    7e5c:	ldr	r2, [pc, #1056]	; 8284 <parse_entry+0x588>
    7e60:	movw	r3, #4097	; 0x1001
    7e64:	bl	0 <coda_set_error>
    7e68:	mov	r1, r5
    7e6c:	mov	r0, r6
    7e70:	bl	0 <coda_za_get_entry_by_name>
    7e74:	mov	sl, r0
    7e78:	cmp	sl, #0
    7e7c:	bne	7f20 <parse_entry+0x224>
    7e80:	cmp	r7, #0
    7e84:	beq	7eec <parse_entry+0x1f0>
    7e88:	cmp	r7, #1
    7e8c:	beq	7ec4 <parse_entry+0x1c8>
    7e90:	cmp	r7, #2
    7e94:	bne	7f10 <parse_entry+0x214>
    7e98:	mov	r0, r6
    7e9c:	bl	0 <coda_za_get_filename>
    7ea0:	movw	r2, #65136	; 0xfe70
    7ea4:	movt	r2, #65535	; 0xffff
    7ea8:	ldr	r1, [pc, #1060]	; 82d4 <parse_entry+0x5d8>
    7eac:	mov	r3, r4
    7eb0:	mov	ip, r0
    7eb4:	mov	r0, r2
    7eb8:	mov	r2, ip
    7ebc:	bl	0 <coda_set_error>
    7ec0:	b	7f10 <parse_entry+0x214>
    7ec4:	mov	r0, r6
    7ec8:	bl	0 <coda_za_get_filename>
    7ecc:	movw	ip, #65136	; 0xfe70
    7ed0:	movt	ip, #65535	; 0xffff
    7ed4:	ldr	r1, [pc, #1012]	; 82d0 <parse_entry+0x5d4>
    7ed8:	mov	r3, r4
    7edc:	mov	r2, r0
    7ee0:	mov	r0, ip
    7ee4:	bl	0 <coda_set_error>
    7ee8:	b	7f10 <parse_entry+0x214>
    7eec:	mov	r0, r6
    7ef0:	bl	0 <coda_za_get_filename>
    7ef4:	movw	r2, #65136	; 0xfe70
    7ef8:	movt	r2, #65535	; 0xffff
    7efc:	ldr	r1, [pc, #904]	; 828c <parse_entry+0x590>
    7f00:	mov	ip, r0
    7f04:	mov	r0, r2
    7f08:	mov	r2, ip
    7f0c:	bl	0 <coda_set_error>
    7f10:	mov	r0, r5
    7f14:	bl	0 <free>
    7f18:	mvn	r0, #0
    7f1c:	b	825c <parse_entry+0x560>
    7f20:	mov	r0, r5
    7f24:	bl	0 <free>
    7f28:	mov	r2, #0
    7f2c:	str	r2, [sp, #48]	; 0x30
    7f30:	mov	ip, #0
    7f34:	str	ip, [sp, #52]	; 0x34
    7f38:	mov	r0, #0
    7f3c:	str	r0, [sp, #56]	; 0x38
    7f40:	mov	r3, #0
    7f44:	str	r3, [sp, #60]	; 0x3c
    7f48:	mov	ip, #0
    7f4c:	str	ip, [sp, #80]	; 0x50
    7f50:	mov	r3, #0
    7f54:	str	r3, [sp, #84]	; 0x54
    7f58:	mov	r2, #0
    7f5c:	str	r2, [sp, #88]	; 0x58
    7f60:	mov	r3, #1
    7f64:	str	r3, [sp, #92]	; 0x5c
    7f68:	mov	ip, #0
    7f6c:	str	ip, [sp, #96]	; 0x60
    7f70:	str	r6, [sp, #64]	; 0x40
    7f74:	str	r4, [sp, #68]	; 0x44
    7f78:	str	r8, [sp, #72]	; 0x48
    7f7c:	str	r9, [sp, #76]	; 0x4c
    7f80:	mov	r0, sl
    7f84:	bl	0 <coda_za_get_entry_size>
    7f88:	mov	r5, r0
    7f8c:	mov	r0, r5
    7f90:	bl	0 <malloc>
    7f94:	str	r0, [sp, #60]	; 0x3c
    7f98:	cmp	r0, #0
    7f9c:	bne	7fcc <parse_entry+0x2d0>
    7fa0:	mvn	r0, #0
    7fa4:	ldr	r1, [pc, #788]	; 82c0 <parse_entry+0x5c4>
    7fa8:	ldr	r3, [pc, #724]	; 8284 <parse_entry+0x588>
    7fac:	movw	r2, #4156	; 0x103c
    7fb0:	str	r2, [sp]
    7fb4:	mov	r2, r5
    7fb8:	bl	0 <coda_set_error>
    7fbc:	add	r0, sp, #48	; 0x30
    7fc0:	bl	7c20 <parser_info_delete>
    7fc4:	mvn	r0, #0
    7fc8:	b	825c <parse_entry+0x560>
    7fcc:	mov	r1, r0
    7fd0:	mov	r0, sl
    7fd4:	bl	0 <coda_za_read_entry>
    7fd8:	cmp	r0, #0
    7fdc:	beq	7ff0 <parse_entry+0x2f4>
    7fe0:	add	r0, sp, #48	; 0x30
    7fe4:	bl	7c20 <parser_info_delete>
    7fe8:	mvn	r0, #0
    7fec:	b	825c <parse_entry+0x560>
    7ff0:	mov	r0, #1
    7ff4:	bl	0 <coda_hashtable_new>
    7ff8:	str	r0, [sp, #56]	; 0x38
    7ffc:	cmp	r0, #0
    8000:	bne	8028 <parse_entry+0x32c>
    8004:	mvn	r0, #0
    8008:	ldr	r1, [pc, #644]	; 8294 <parse_entry+0x598>
    800c:	ldr	r2, [pc, #624]	; 8284 <parse_entry+0x588>
    8010:	movw	r3, #4170	; 0x104a
    8014:	bl	0 <coda_set_error>
    8018:	add	r0, sp, #48	; 0x30
    801c:	bl	7c20 <parser_info_delete>
    8020:	mvn	r0, #0
    8024:	b	825c <parse_entry+0x560>
    8028:	mov	r8, #0
    802c:	ldr	r0, [sp, #56]	; 0x38
    8030:	ldr	r2, [pc, #636]	; 82b4 <parse_entry+0x5b8>
    8034:	ldr	r1, [r2, r8, lsl #2]
    8038:	bl	0 <coda_hashtable_add_name>
    803c:	cmp	r0, #0
    8040:	beq	8058 <parse_entry+0x35c>
    8044:	ldr	r0, [pc, #608]	; 82ac <parse_entry+0x5b0>
    8048:	ldr	r1, [pc, #564]	; 8284 <parse_entry+0x588>
    804c:	movw	r2, #4178	; 0x1052
    8050:	ldr	r3, [pc, #652]	; 82e4 <parse_entry+0x5e8>
    8054:	bl	0 <__assert_fail>
    8058:	add	r8, r8, #1
    805c:	cmp	r8, #43	; 0x2b
    8060:	blt	802c <parse_entry+0x330>
    8064:	mov	r0, #0
    8068:	mov	r1, #32
    806c:	bl	0 <coda_XML_ParserCreateNS>
    8070:	str	r0, [sp, #52]	; 0x34
    8074:	cmp	r0, #0
    8078:	bne	8098 <parse_entry+0x39c>
    807c:	mvn	r0, #13
    8080:	ldr	r1, [pc, #532]	; 829c <parse_entry+0x5a0>
    8084:	bl	0 <coda_set_error>
    8088:	add	r0, sp, #48	; 0x30
    808c:	bl	7c20 <parser_info_delete>
    8090:	mvn	r0, #0
    8094:	b	825c <parse_entry+0x560>
    8098:	add	r1, sp, #48	; 0x30
    809c:	bl	0 <coda_XML_SetUserData>
    80a0:	ldr	r0, [sp, #52]	; 0x34
    80a4:	ldr	r1, [pc, #572]	; 82e8 <parse_entry+0x5ec>
    80a8:	ldr	r2, [pc, #512]	; 82b0 <parse_entry+0x5b4>
    80ac:	bl	0 <coda_XML_SetElementHandler>
    80b0:	add	r0, sp, #48	; 0x30
    80b4:	mvn	r1, #0
    80b8:	mov	r2, #0
    80bc:	bl	7724 <push_node>
    80c0:	ldr	r0, [sp, #48]	; 0x30
    80c4:	mov	ip, #0
    80c8:	str	ip, [r0, #48]	; 0x30
    80cc:	cmp	r7, #0
    80d0:	beq	810c <parse_entry+0x410>
    80d4:	cmp	r7, #1
    80d8:	beq	80fc <parse_entry+0x400>
    80dc:	cmp	r7, #2
    80e0:	bne	8120 <parse_entry+0x424>
    80e4:	ldr	r0, [sp, #48]	; 0x30
    80e8:	mov	r1, #31
    80ec:	ldr	r2, [pc, #428]	; 82a0 <parse_entry+0x5a4>
    80f0:	mov	r3, #0
    80f4:	bl	8bc <register_sub_element>
    80f8:	b	8120 <parse_entry+0x424>
    80fc:	ldr	r0, [sp, #48]	; 0x30
    8100:	ldr	r1, [pc, #436]	; 82bc <parse_entry+0x5c0>
    8104:	bl	940 <register_type_elements>
    8108:	b	8120 <parse_entry+0x424>
    810c:	ldr	r0, [sp, #48]	; 0x30
    8110:	mov	r1, #30
    8114:	ldr	r2, [pc, #452]	; 82e0 <parse_entry+0x5e4>
    8118:	ldr	r3, [pc, #464]	; 82f0 <parse_entry+0x5f4>
    811c:	bl	8bc <register_sub_element>
    8120:	ldr	r1, [pc, #368]	; 8298 <parse_entry+0x59c>
    8124:	mov	r3, #0
    8128:	str	r3, [r1]
    812c:	ldr	r0, [sp, #52]	; 0x34
    8130:	ldr	r1, [sp, #60]	; 0x3c
    8134:	mov	r3, #1
    8138:	mov	r2, r5
    813c:	bl	0 <coda_XML_Parse>
    8140:	cmp	r0, #0
    8144:	beq	8158 <parse_entry+0x45c>
    8148:	ldr	r3, [pc, #328]	; 8298 <parse_entry+0x59c>
    814c:	ldr	r2, [r3]
    8150:	cmp	r2, #0
    8154:	beq	8250 <parse_entry+0x554>
    8158:	ldr	r0, [sp, #88]	; 0x58
    815c:	cmp	r0, #0
    8160:	bne	8250 <parse_entry+0x554>
    8164:	ldr	r1, [pc, #300]	; 8298 <parse_entry+0x59c>
    8168:	ldr	r0, [r1]
    816c:	cmp	r0, #0
    8170:	bne	8198 <parse_entry+0x49c>
    8174:	ldr	r0, [sp, #52]	; 0x34
    8178:	bl	0 <coda_XML_GetErrorCode>
    817c:	bl	0 <coda_XML_ErrorString>
    8180:	movw	r3, #65136	; 0xfe70
    8184:	movt	r3, #65535	; 0xffff
    8188:	ldr	r1, [pc, #348]	; 82ec <parse_entry+0x5f0>
    818c:	mov	r2, r0
    8190:	mov	r0, r3
    8194:	bl	0 <coda_set_error>
    8198:	ldr	r2, [pc, #248]	; 8298 <parse_entry+0x59c>
    819c:	ldr	r2, [r2]
    81a0:	cmn	r2, #400	; 0x190
    81a4:	beq	81b4 <parse_entry+0x4b8>
    81a8:	mvn	lr, #400	; 0x190
    81ac:	cmp	r2, lr
    81b0:	bne	8240 <parse_entry+0x544>
    81b4:	ldr	ip, [sp, #92]	; 0x5c
    81b8:	cmp	ip, #0
    81bc:	beq	8240 <parse_entry+0x544>
    81c0:	mov	r0, r6
    81c4:	bl	0 <coda_za_get_filename>
    81c8:	mov	r1, r0
    81cc:	ldr	r0, [pc, #264]	; 82dc <parse_entry+0x5e0>
    81d0:	bl	0 <coda_add_error_message>
    81d4:	cmp	r7, #0
    81d8:	beq	820c <parse_entry+0x510>
    81dc:	cmp	r7, #1
    81e0:	beq	81fc <parse_entry+0x500>
    81e4:	cmp	r7, #2
    81e8:	bne	8218 <parse_entry+0x51c>
    81ec:	ldr	r0, [pc, #228]	; 82d8 <parse_entry+0x5dc>
    81f0:	mov	r1, r4
    81f4:	bl	0 <coda_add_error_message>
    81f8:	b	8218 <parse_entry+0x51c>
    81fc:	ldr	r0, [pc, #192]	; 82c4 <parse_entry+0x5c8>
    8200:	mov	r1, r4
    8204:	bl	0 <coda_add_error_message>
    8208:	b	8218 <parse_entry+0x51c>
    820c:	ldr	r0, [pc, #144]	; 82a4 <parse_entry+0x5a8>
    8210:	mov	r1, #0
    8214:	bl	0 <coda_add_error_message>
    8218:	ldr	r0, [sp, #52]	; 0x34
    821c:	bl	0 <coda_XML_GetCurrentLineNumber>
    8220:	mov	r4, r0
    8224:	ldr	r0, [sp, #52]	; 0x34
    8228:	bl	0 <coda_XML_GetCurrentByteIndex>
    822c:	ldr	r1, [pc, #116]	; 82a8 <parse_entry+0x5ac>
    8230:	mov	r2, r0
    8234:	mov	r0, r1
    8238:	mov	r1, r4
    823c:	bl	0 <coda_add_error_message>
    8240:	add	r0, sp, #48	; 0x30
    8244:	bl	7c20 <parser_info_delete>
    8248:	mvn	r0, #0
    824c:	b	825c <parse_entry+0x560>
    8250:	add	r0, sp, #48	; 0x30
    8254:	bl	7c20 <parser_info_delete>
    8258:	mov	r0, #0
    825c:	ldr	r4, [sp, #16]
    8260:	ldr	r5, [sp, #20]
    8264:	ldr	r6, [sp, #24]
    8268:	ldr	r7, [sp, #28]
    826c:	ldr	r8, [sp, #32]
    8270:	ldr	r9, [sp, #36]	; 0x24
    8274:	ldr	sl, [sp, #40]	; 0x28
    8278:	ldr	lr, [sp, #8]
    827c:	add	sp, sp, #104	; 0x68
    8280:	bx	lr
    8284:	.word	0x00001939
    8288:	.word	0x00001c42
    828c:	.word	0x000014c5
    8290:	.word	0x00000742
    8294:	.word	0x00001e8d
    8298:	.word	0x00000000
    829c:	.word	0x000014f2
    82a0:	.word	0x00000000
    82a4:	.word	0x00000ac4
    82a8:	.word	0x00000d7c
    82ac:	.word	0x00001cc5
	...
    82b8:	.word	0x00000cee
    82bc:	.word	0x00000000
    82c0:	.word	0x00000e60
    82c4:	.word	0x00000810
    82c8:	.word	0x00000a45
    82cc:	.word	0x00000b82
    82d0:	.word	0x00000eee
    82d4:	.word	0x00001d71
    82d8:	.word	0x00000de2
    82dc:	.word	0x000001ed
    82e0:	.word	0x00000000
    82e4:	.word	0x000021d0
    82e8:	.word	0x00000000
    82ec:	.word	0x000018ee
    82f0:	.word	0x00000000

000082f4 <read_definition_file>:
    82f4:	mov	ip, sp
    82f8:	sub	sp, sp, #24
    82fc:	str	ip, [sp, #4]
    8300:	str	lr, [sp, #8]
    8304:	str	r4, [sp, #16]
    8308:	ldr	r1, [pc, #100]	; 8374 <read_definition_file+0x80>
    830c:	bl	0 <coda_za_open>
    8310:	mov	r4, r0
    8314:	cmp	r4, #0
    8318:	bne	8324 <read_definition_file+0x30>
    831c:	mvn	r0, #0
    8320:	b	8364 <read_definition_file+0x70>
    8324:	mov	r1, #0
    8328:	mov	r2, #0
    832c:	mov	r3, #0
    8330:	mov	r0, #0
    8334:	str	r0, [sp]
    8338:	mov	r0, r4
    833c:	bl	7cfc <parse_entry>
    8340:	cmp	r0, #0
    8344:	beq	8358 <read_definition_file+0x64>
    8348:	mov	r0, r4
    834c:	bl	0 <coda_za_close>
    8350:	mvn	r0, #0
    8354:	b	8364 <read_definition_file+0x70>
    8358:	mov	r0, r4
    835c:	bl	0 <coda_za_close>
    8360:	mov	r0, #0
    8364:	ldr	r4, [sp, #16]
    8368:	ldr	lr, [sp, #8]
    836c:	add	sp, sp, #24
    8370:	bx	lr
    8374:	.word	0x00000000

00008378 <coda_read_product_definition>:
    8378:	mov	ip, sp
    837c:	sub	sp, sp, #32
    8380:	str	ip, [sp, #4]
    8384:	str	lr, [sp, #8]
    8388:	str	r4, [sp, #16]
    838c:	str	r5, [sp, #20]
    8390:	str	r6, [sp, #24]
    8394:	mov	r5, r0
    8398:	ldr	r3, [r5, #24]
    839c:	cmp	r3, #0
    83a0:	beq	83b8 <coda_read_product_definition+0x40>
    83a4:	ldr	r0, [pc, #148]	; 8440 <coda_read_product_definition+0xc8>
    83a8:	ldr	r1, [pc, #132]	; 8434 <coda_read_product_definition+0xbc>
    83ac:	movw	r2, #4269	; 0x10ad
    83b0:	ldr	r3, [pc, #132]	; 843c <coda_read_product_definition+0xc4>
    83b4:	bl	0 <__assert_fail>
    83b8:	ldr	r1, [r5, #44]	; 0x2c
    83bc:	ldr	r6, [r1, #20]
    83c0:	ldr	r0, [r6, #8]
    83c4:	ldr	r1, [pc, #108]	; 8438 <coda_read_product_definition+0xc0>
    83c8:	bl	0 <coda_za_open>
    83cc:	mov	r4, r0
    83d0:	cmp	r4, #0
    83d4:	bne	83e0 <coda_read_product_definition+0x68>
    83d8:	mvn	r0, #0
    83dc:	b	841c <coda_read_product_definition+0xa4>
    83e0:	mov	r1, #2
    83e4:	ldr	r2, [r5, #8]
    83e8:	str	r5, [sp]
    83ec:	mov	r3, r6
    83f0:	mov	r0, r4
    83f4:	bl	7cfc <parse_entry>
    83f8:	cmp	r0, #0
    83fc:	beq	8410 <coda_read_product_definition+0x98>
    8400:	mov	r0, r4
    8404:	bl	0 <coda_za_close>
    8408:	mvn	r0, #0
    840c:	b	841c <coda_read_product_definition+0xa4>
    8410:	mov	r0, r4
    8414:	bl	0 <coda_za_close>
    8418:	mov	r0, #0
    841c:	ldr	r4, [sp, #16]
    8420:	ldr	r5, [sp, #20]
    8424:	ldr	r6, [sp, #24]
    8428:	ldr	lr, [sp, #8]
    842c:	add	sp, sp, #32
    8430:	bx	lr
    8434:	.word	0x00001939
    8438:	.word	0x00000000
    843c:	.word	0x000021dc
    8440:	.word	0x00001f08

00008444 <coda_read_definitions>:
    8444:	mov	ip, sp
    8448:	sub	sp, sp, #136	; 0x88
    844c:	str	ip, [sp, #4]
    8450:	str	lr, [sp, #8]
    8454:	str	r4, [sp, #16]
    8458:	str	r5, [sp, #20]
    845c:	str	r6, [sp, #24]
    8460:	str	r7, [sp, #28]
    8464:	str	r8, [sp, #32]
    8468:	str	r9, [sp, #36]	; 0x24
    846c:	str	sl, [sp, #40]	; 0x28
    8470:	bl	0 <strdup>
    8474:	mov	r6, r0
    8478:	cmp	r6, #0
    847c:	bne	849c <coda_read_definitions+0x58>
    8480:	mvn	r0, #0
    8484:	ldr	r1, [pc, #668]	; 8728 <coda_read_definitions+0x2e4>
    8488:	ldr	r2, [pc, #656]	; 8720 <coda_read_definitions+0x2dc>
    848c:	movw	r3, #4302	; 0x10ce
    8490:	bl	0 <coda_set_error>
    8494:	mvn	r0, #0
    8498:	b	86f8 <coda_read_definitions+0x2b4>
    849c:	mov	r4, r6
    84a0:	ldrb	r0, [r4]
    84a4:	cmp	r0, #0
    84a8:	beq	86ec <coda_read_definitions+0x2a8>
    84ac:	mov	r5, r4
    84b0:	ldrb	r1, [r5]
    84b4:	cmp	r1, #0
    84b8:	beq	84cc <coda_read_definitions+0x88>
    84bc:	cmp	r1, #58	; 0x3a
    84c0:	beq	84cc <coda_read_definitions+0x88>
    84c4:	add	r5, r5, #1
    84c8:	b	84b0 <coda_read_definitions+0x6c>
    84cc:	ldrb	r3, [r5]
    84d0:	cmp	r3, #0
    84d4:	beq	84e4 <coda_read_definitions+0xa0>
    84d8:	mov	r1, #0
    84dc:	strb	r1, [r5]
    84e0:	add	r5, r5, #1
    84e4:	add	r1, sp, #48	; 0x30
    84e8:	mov	r0, r4
    84ec:	bl	0 <stat>
    84f0:	cmp	r0, #0
    84f4:	bne	86e4 <coda_read_definitions+0x2a0>
    84f8:	ldr	r2, [sp, #64]	; 0x40
    84fc:	and	r3, r2, #16384	; 0x4000
    8500:	cmp	r3, #0
    8504:	beq	86b8 <coda_read_definitions+0x274>
    8508:	mov	r0, r4
    850c:	bl	0 <opendir>
    8510:	mov	r8, r0
    8514:	cmp	r8, #0
    8518:	bne	8550 <coda_read_definitions+0x10c>
    851c:	bl	0 <__errno_location>
    8520:	ldr	r0, [r0]
    8524:	bl	0 <strerror>
    8528:	mov	r3, r0
    852c:	movw	r0, #65136	; 0xfe70
    8530:	movt	r0, #65535	; 0xffff
    8534:	ldr	r1, [pc, #508]	; 8738 <coda_read_definitions+0x2f4>
    8538:	mov	r2, r4
    853c:	bl	0 <coda_set_error>
    8540:	mov	r0, r6
    8544:	bl	0 <free>
    8548:	mvn	r0, #0
    854c:	b	86f8 <coda_read_definitions+0x2b4>
    8550:	mov	r0, r8
    8554:	bl	0 <readdir>
    8558:	mov	sl, r0
    855c:	cmp	sl, #0
    8560:	beq	86ac <coda_read_definitions+0x268>
    8564:	add	r0, sl, #11
    8568:	bl	0 <strlen>
    856c:	mov	r9, r0
    8570:	cmp	r9, #8
    8574:	ble	8550 <coda_read_definitions+0x10c>
    8578:	add	ip, sl, r9
    857c:	add	r0, ip, #3
    8580:	ldr	r1, [pc, #424]	; 8730 <coda_read_definitions+0x2ec>
    8584:	bl	0 <strcmp>
    8588:	cmp	r0, #0
    858c:	bne	8550 <coda_read_definitions+0x10c>
    8590:	mov	r0, r4
    8594:	bl	0 <strlen>
    8598:	add	ip, r0, r9
    859c:	add	r0, ip, #2
    85a0:	bl	0 <malloc>
    85a4:	mov	r7, r0
    85a8:	cmp	r7, #0
    85ac:	bne	85f4 <coda_read_definitions+0x1b0>
    85b0:	mov	r0, r4
    85b4:	bl	0 <strlen>
    85b8:	mvn	ip, #0
    85bc:	ldr	r1, [pc, #360]	; 872c <coda_read_definitions+0x2e8>
    85c0:	add	r3, r0, r9
    85c4:	add	r2, r3, #2
    85c8:	ldr	r3, [pc, #336]	; 8720 <coda_read_definitions+0x2dc>
    85cc:	movw	r0, #4427	; 0x114b
    85d0:	str	r0, [sp]
    85d4:	mov	r0, ip
    85d8:	bl	0 <coda_set_error>
    85dc:	mov	r0, r8
    85e0:	bl	0 <closedir>
    85e4:	mov	r0, r6
    85e8:	bl	0 <free>
    85ec:	mvn	r0, #0
    85f0:	b	86f8 <coda_read_definitions+0x2b4>
    85f4:	ldr	r1, [pc, #296]	; 8724 <coda_read_definitions+0x2e0>
    85f8:	add	r3, sl, #11
    85fc:	mov	r2, r4
    8600:	mov	r0, r7
    8604:	bl	0 <sprintf>
    8608:	add	r1, sp, #48	; 0x30
    860c:	mov	r0, r7
    8610:	bl	0 <stat>
    8614:	cmp	r0, #0
    8618:	beq	8660 <coda_read_definitions+0x21c>
    861c:	bl	0 <__errno_location>
    8620:	ldr	r0, [r0]
    8624:	bl	0 <strerror>
    8628:	mov	r3, r0
    862c:	movw	r0, #65136	; 0xfe70
    8630:	movt	r0, #65535	; 0xffff
    8634:	ldr	r1, [pc, #248]	; 8734 <coda_read_definitions+0x2f0>
    8638:	mov	r2, r7
    863c:	bl	0 <coda_set_error>
    8640:	mov	r0, r7
    8644:	bl	0 <free>
    8648:	mov	r0, r8
    864c:	bl	0 <closedir>
    8650:	mov	r0, r6
    8654:	bl	0 <free>
    8658:	mvn	r0, #0
    865c:	b	86f8 <coda_read_definitions+0x2b4>
    8660:	ldr	r1, [sp, #64]	; 0x40
    8664:	and	r0, r1, #32768	; 0x8000
    8668:	cmp	r0, #0
    866c:	beq	86a0 <coda_read_definitions+0x25c>
    8670:	mov	r0, r7
    8674:	bl	82f4 <read_definition_file>
    8678:	cmp	r0, #0
    867c:	beq	86a0 <coda_read_definitions+0x25c>
    8680:	mov	r0, r7
    8684:	bl	0 <free>
    8688:	mov	r0, r8
    868c:	bl	0 <closedir>
    8690:	mov	r0, r6
    8694:	bl	0 <free>
    8698:	mvn	r0, #0
    869c:	b	86f8 <coda_read_definitions+0x2b4>
    86a0:	mov	r0, r7
    86a4:	bl	0 <free>
    86a8:	b	8550 <coda_read_definitions+0x10c>
    86ac:	mov	r0, r8
    86b0:	bl	0 <closedir>
    86b4:	b	86e4 <coda_read_definitions+0x2a0>
    86b8:	and	r2, r2, #32768	; 0x8000
    86bc:	cmp	r2, #0
    86c0:	beq	86e4 <coda_read_definitions+0x2a0>
    86c4:	mov	r0, r4
    86c8:	bl	82f4 <read_definition_file>
    86cc:	cmp	r0, #0
    86d0:	beq	86e4 <coda_read_definitions+0x2a0>
    86d4:	mov	r0, r6
    86d8:	bl	0 <free>
    86dc:	mvn	r0, #0
    86e0:	b	86f8 <coda_read_definitions+0x2b4>
    86e4:	mov	r4, r5
    86e8:	b	84a0 <coda_read_definitions+0x5c>
    86ec:	mov	r0, r6
    86f0:	bl	0 <free>
    86f4:	mov	r0, #0
    86f8:	ldr	r4, [sp, #16]
    86fc:	ldr	r5, [sp, #20]
    8700:	ldr	r6, [sp, #24]
    8704:	ldr	r7, [sp, #28]
    8708:	ldr	r8, [sp, #32]
    870c:	ldr	r9, [sp, #36]	; 0x24
    8710:	ldr	sl, [sp, #40]	; 0x28
    8714:	ldr	lr, [sp, #8]
    8718:	add	sp, sp, #136	; 0x88
    871c:	bx	lr
    8720:	.word	0x00001939
    8724:	.word	0x00000519
    8728:	.word	0x00001c42
    872c:	.word	0x00000e60
    8730:	.word	0x0000074f
    8734:	.word	0x00002015
    8738:	.word	0x00001226
