
../compcert-repos/dvidelabs-flatcc-3b39ef7/src/compiler/CMakeFiles/flatcc.dir/codegen_schema.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <__flatcc_fb_codegen_bfbs_to_buffer>:
       0:	push	{r4, r5, fp, lr}
       4:	add	fp, sp, #8
       8:	sub	sp, sp, #264	; 0x108
       c:	str	r0, [fp, #-12]
      10:	str	r1, [fp, #-16]
      14:	str	r2, [fp, #-20]	; 0xffffffec
      18:	str	r3, [fp, #-24]	; 0xffffffe8
      1c:	add	r0, sp, #16
      20:	str	r0, [sp, #12]
      24:	ldr	r0, [sp, #12]
      28:	bl	0 <flatcc_builder_init>
      2c:	ldr	r1, [sp, #12]
      30:	ldr	r2, [fp, #-12]
      34:	ldr	r3, [fp, #-16]
      38:	str	r0, [sp, #8]
      3c:	mov	r0, r1
      40:	mov	r1, r2
      44:	mov	r2, r3
      48:	bl	ac <export_schema>
      4c:	ldr	r1, [sp, #12]
      50:	ldr	r2, [fp, #-20]	; 0xffffffec
      54:	ldr	r3, [fp, #-24]	; 0xffffffe8
      58:	ldr	r3, [r3]
      5c:	str	r0, [sp, #4]
      60:	mov	r0, r1
      64:	mov	r1, r2
      68:	mov	r2, r3
      6c:	bl	0 <flatcc_builder_copy_buffer>
      70:	movw	r1, #0
      74:	cmp	r0, r1
      78:	bne	80 <__flatcc_fb_codegen_bfbs_to_buffer+0x80>
      7c:	b	88 <__flatcc_fb_codegen_bfbs_to_buffer+0x88>
      80:	ldr	r0, [fp, #-20]	; 0xffffffec
      84:	bl	22c <sort_fields>
      88:	ldr	r0, [sp, #12]
      8c:	bl	0 <flatcc_builder_get_buffer_size>
      90:	ldr	r1, [fp, #-24]	; 0xffffffe8
      94:	str	r0, [r1]
      98:	ldr	r0, [sp, #12]
      9c:	bl	0 <flatcc_builder_clear>
      a0:	ldr	r0, [fp, #-20]	; 0xffffffec
      a4:	sub	sp, fp, #8
      a8:	pop	{r4, r5, fp, pc}

000000ac <export_schema>:
      ac:	push	{fp, lr}
      b0:	mov	fp, sp
      b4:	sub	sp, sp, #72	; 0x48
      b8:	str	r0, [fp, #-8]
      bc:	str	r1, [fp, #-12]
      c0:	str	r2, [fp, #-16]
      c4:	movw	r0, #0
      c8:	str	r0, [sp, #8]
      cc:	ldr	r1, [fp, #-16]
      d0:	ldr	r0, [fp, #-12]
      d4:	ldr	r2, [r0, #184]	; 0xb8
      d8:	ldr	r0, [fp, #-16]
      dc:	ldr	r3, [r0, #60]	; 0x3c
      e0:	add	r0, sp, #12
      e4:	bl	5d0 <build_catalog>
      e8:	cmp	r0, #0
      ec:	beq	fc <export_schema+0x50>
      f0:	mvn	r0, #0
      f4:	str	r0, [fp, #-4]
      f8:	b	220 <export_schema+0x174>
      fc:	ldr	r0, [sp, #16]
     100:	cmp	r0, #0
     104:	ble	138 <export_schema+0x8c>
     108:	ldr	r0, [sp, #16]
     10c:	lsl	r0, r0, #2
     110:	bl	0 <malloc>
     114:	str	r0, [sp, #8]
     118:	movw	r1, #0
     11c:	cmp	r0, r1
     120:	bne	138 <export_schema+0x8c>
     124:	add	r0, sp, #12
     128:	bl	788 <clear_catalog>
     12c:	mvn	r0, #0
     130:	str	r0, [fp, #-4]
     134:	b	220 <export_schema+0x174>
     138:	ldr	r0, [fp, #-12]
     13c:	ldr	r0, [r0, #188]	; 0xbc
     140:	cmp	r0, #0
     144:	beq	154 <export_schema+0xa8>
     148:	ldr	r0, [fp, #-8]
     14c:	bl	814 <reflection_Schema_start_as_root_with_size>
     150:	b	15c <export_schema+0xb0>
     154:	ldr	r0, [fp, #-8]
     158:	bl	860 <reflection_Schema_start_as_root>
     15c:	ldr	r0, [fp, #-16]
     160:	ldrh	r0, [r0, #16]
     164:	cmp	r0, #2
     168:	bne	184 <export_schema+0xd8>
     16c:	ldr	r0, [fp, #-8]
     170:	ldr	r1, [fp, #-16]
     174:	ldr	r1, [r1, #8]
     178:	ldr	r2, [fp, #-16]
     17c:	ldr	r2, [r2, #12]
     180:	bl	8ac <reflection_Schema_file_ident_create>
     184:	ldr	r0, [fp, #-16]
     188:	ldrh	r0, [r0, #32]
     18c:	cmp	r0, #2
     190:	bne	1ac <export_schema+0x100>
     194:	ldr	r0, [fp, #-8]
     198:	ldr	r1, [fp, #-16]
     19c:	ldr	r1, [r1, #24]
     1a0:	ldr	r2, [fp, #-16]
     1a4:	ldr	r2, [r2, #28]
     1a8:	bl	904 <reflection_Schema_file_ext_create>
     1ac:	ldr	r0, [fp, #-8]
     1b0:	ldr	r1, [sp, #28]
     1b4:	ldr	r2, [sp, #16]
     1b8:	ldr	r3, [sp, #8]
     1bc:	bl	95c <export_objects>
     1c0:	ldr	r0, [fp, #-8]
     1c4:	ldr	r1, [sp, #32]
     1c8:	ldr	r2, [sp, #20]
     1cc:	ldr	r3, [sp, #8]
     1d0:	bl	aa4 <export_enums>
     1d4:	ldr	r0, [fp, #-8]
     1d8:	ldr	r1, [fp, #-16]
     1dc:	ldr	r1, [r1, #52]	; 0x34
     1e0:	ldr	r2, [sp, #8]
     1e4:	bl	c64 <export_root_type>
     1e8:	ldr	r0, [fp, #-8]
     1ec:	bl	ccc <reflection_Schema_end_as_root>
     1f0:	add	r1, sp, #12
     1f4:	str	r0, [sp, #4]
     1f8:	mov	r0, r1
     1fc:	bl	788 <clear_catalog>
     200:	ldr	r0, [sp, #8]
     204:	movw	r1, #0
     208:	cmp	r0, r1
     20c:	beq	218 <export_schema+0x16c>
     210:	ldr	r0, [sp, #8]
     214:	bl	0 <free>
     218:	movw	r0, #0
     21c:	str	r0, [fp, #-4]
     220:	ldr	r0, [fp, #-4]
     224:	mov	sp, fp
     228:	pop	{fp, pc}

0000022c <sort_fields>:
     22c:	push	{fp, lr}
     230:	mov	fp, sp
     234:	sub	sp, sp, #32
     238:	str	r0, [fp, #-4]
     23c:	ldr	r0, [fp, #-4]
     240:	bl	3304 <reflection_Schema_as_root>
     244:	str	r0, [fp, #-12]
     248:	ldr	r0, [fp, #-12]
     24c:	bl	337c <reflection_Schema_objects>
     250:	str	r0, [sp, #16]
     254:	movw	r0, #0
     258:	str	r0, [fp, #-8]
     25c:	ldr	r0, [fp, #-8]
     260:	ldr	r1, [sp, #16]
     264:	str	r0, [sp]
     268:	mov	r0, r1
     26c:	bl	3484 <reflection_Object_vec_len>
     270:	ldr	r1, [sp]
     274:	cmp	r1, r0
     278:	bcs	2b8 <sort_fields+0x8c>
     27c:	ldr	r0, [sp, #16]
     280:	ldr	r1, [fp, #-8]
     284:	bl	34d4 <reflection_Object_vec_at>
     288:	str	r0, [sp, #12]
     28c:	ldr	r0, [sp, #12]
     290:	bl	3558 <reflection_Object_fields>
     294:	str	r0, [sp, #8]
     298:	ldr	r0, [sp, #8]
     29c:	str	r0, [sp, #4]
     2a0:	ldr	r0, [sp, #4]
     2a4:	bl	3660 <reflection_Field_vec_sort_by_name>
     2a8:	ldr	r0, [fp, #-8]
     2ac:	add	r0, r0, #1
     2b0:	str	r0, [fp, #-8]
     2b4:	b	25c <sort_fields+0x30>
     2b8:	mov	sp, fp
     2bc:	pop	{fp, pc}

000002c0 <__flatcc_fb_codegen_bfbs_alloc_buffer>:
     2c0:	push	{r4, r5, fp, lr}
     2c4:	add	fp, sp, #8
     2c8:	sub	sp, sp, #256	; 0x100
     2cc:	str	r0, [fp, #-12]
     2d0:	str	r1, [fp, #-16]
     2d4:	str	r2, [fp, #-20]	; 0xffffffec
     2d8:	movw	r0, #0
     2dc:	str	r0, [sp, #4]
     2e0:	add	r0, sp, #12
     2e4:	str	r0, [sp, #8]
     2e8:	ldr	r0, [sp, #8]
     2ec:	bl	0 <flatcc_builder_init>
     2f0:	ldr	r1, [sp, #8]
     2f4:	ldr	r2, [fp, #-12]
     2f8:	ldr	r3, [fp, #-16]
     2fc:	str	r0, [sp]
     300:	mov	r0, r1
     304:	mov	r1, r2
     308:	mov	r2, r3
     30c:	bl	ac <export_schema>
     310:	cmp	r0, #0
     314:	beq	31c <__flatcc_fb_codegen_bfbs_alloc_buffer+0x5c>
     318:	b	344 <__flatcc_fb_codegen_bfbs_alloc_buffer+0x84>
     31c:	ldr	r0, [sp, #8]
     320:	ldr	r1, [fp, #-20]	; 0xffffffec
     324:	bl	0 <flatcc_builder_finalize_buffer>
     328:	str	r0, [sp, #4]
     32c:	movw	r1, #0
     330:	cmp	r0, r1
     334:	bne	33c <__flatcc_fb_codegen_bfbs_alloc_buffer+0x7c>
     338:	b	344 <__flatcc_fb_codegen_bfbs_alloc_buffer+0x84>
     33c:	ldr	r0, [sp, #4]
     340:	bl	22c <sort_fields>
     344:	ldr	r0, [sp, #8]
     348:	bl	0 <flatcc_builder_clear>
     34c:	ldr	r0, [sp, #4]
     350:	sub	sp, fp, #8
     354:	pop	{r4, r5, fp, pc}

00000358 <__flatcc_fb_codegen_bfbs_to_file>:
     358:	push	{fp, lr}
     35c:	mov	fp, sp
     360:	sub	sp, sp, #32
     364:	str	r0, [fp, #-8]
     368:	str	r1, [fp, #-12]
     36c:	mvn	r0, #0
     370:	str	r0, [sp, #4]
     374:	ldr	r0, [fp, #-8]
     378:	ldr	r1, [fp, #-12]
     37c:	bl	458 <open_file>
     380:	str	r0, [sp, #8]
     384:	ldr	r0, [sp, #8]
     388:	movw	r1, #0
     38c:	cmp	r0, r1
     390:	bne	3a0 <__flatcc_fb_codegen_bfbs_to_file+0x48>
     394:	mvn	r0, #0
     398:	str	r0, [fp, #-4]
     39c:	b	44c <__flatcc_fb_codegen_bfbs_to_file+0xf4>
     3a0:	ldr	r0, [fp, #-8]
     3a4:	ldr	r1, [fp, #-12]
     3a8:	add	r2, sp, #12
     3ac:	bl	2c0 <__flatcc_fb_codegen_bfbs_alloc_buffer>
     3b0:	str	r0, [sp, #16]
     3b4:	ldr	r0, [sp, #16]
     3b8:	movw	r1, #0
     3bc:	cmp	r0, r1
     3c0:	bne	3d4 <__flatcc_fb_codegen_bfbs_to_file+0x7c>
     3c4:	movw	r0, #0
     3c8:	movt	r0, #0
     3cc:	bl	0 <printf>
     3d0:	b	424 <__flatcc_fb_codegen_bfbs_to_file+0xcc>
     3d4:	ldr	r0, [sp, #12]
     3d8:	ldr	r1, [sp, #16]
     3dc:	ldr	r2, [sp, #12]
     3e0:	ldr	r3, [sp, #8]
     3e4:	str	r0, [sp]
     3e8:	mov	r0, r1
     3ec:	movw	r1, #1
     3f0:	bl	0 <fwrite>
     3f4:	ldr	r1, [sp]
     3f8:	cmp	r1, r0
     3fc:	beq	41c <__flatcc_fb_codegen_bfbs_to_file+0xc4>
     400:	movw	r0, #0
     404:	movt	r0, #0
     408:	ldr	r0, [r0]
     40c:	movw	r1, #0
     410:	movt	r1, #0
     414:	bl	0 <fprintf>
     418:	b	424 <__flatcc_fb_codegen_bfbs_to_file+0xcc>
     41c:	movw	r0, #0
     420:	str	r0, [sp, #4]
     424:	ldr	r0, [sp, #16]
     428:	movw	r1, #0
     42c:	cmp	r0, r1
     430:	beq	43c <__flatcc_fb_codegen_bfbs_to_file+0xe4>
     434:	ldr	r0, [sp, #16]
     438:	bl	0 <free>
     43c:	ldr	r0, [sp, #8]
     440:	bl	588 <close_file>
     444:	ldr	r0, [sp, #4]
     448:	str	r0, [fp, #-4]
     44c:	ldr	r0, [fp, #-4]
     450:	mov	sp, fp
     454:	pop	{fp, pc}

00000458 <open_file>:
     458:	push	{fp, lr}
     45c:	mov	fp, sp
     460:	sub	sp, sp, #56	; 0x38
     464:	str	r0, [fp, #-8]
     468:	str	r1, [fp, #-12]
     46c:	movw	r0, #0
     470:	str	r0, [fp, #-16]
     474:	ldr	r1, [fp, #-8]
     478:	ldr	r1, [r1, #216]	; 0xd8
     47c:	cmp	r1, r0
     480:	beq	494 <open_file+0x3c>
     484:	ldr	r0, [fp, #-8]
     488:	ldr	r0, [r0, #216]	; 0xd8
     48c:	str	r0, [sp, #12]
     490:	b	4a4 <open_file+0x4c>
     494:	movw	r0, #0
     498:	movt	r0, #0
     49c:	str	r0, [sp, #12]
     4a0:	b	4a4 <open_file+0x4c>
     4a4:	ldr	r0, [sp, #12]
     4a8:	str	r0, [fp, #-24]	; 0xffffffe8
     4ac:	ldr	r0, [fp, #-24]	; 0xffffffe8
     4b0:	bl	0 <strlen>
     4b4:	str	r0, [sp, #24]
     4b8:	ldr	r0, [fp, #-12]
     4bc:	ldr	r0, [r0, #160]	; 0xa0
     4c0:	str	r0, [sp, #20]
     4c4:	ldr	r0, [sp, #20]
     4c8:	bl	0 <strlen>
     4cc:	str	r0, [sp, #28]
     4d0:	movw	r0, #0
     4d4:	movt	r0, #0
     4d8:	str	r0, [sp, #16]
     4dc:	ldr	r0, [fp, #-8]
     4e0:	ldr	r0, [r0, #108]	; 0x6c
     4e4:	cmp	r0, #0
     4e8:	beq	500 <open_file+0xa8>
     4ec:	movw	r0, #0
     4f0:	movt	r0, #0
     4f4:	ldr	r0, [r0]
     4f8:	str	r0, [fp, #-4]
     4fc:	b	57c <open_file+0x124>
     500:	ldr	r0, [fp, #-24]	; 0xffffffe8
     504:	ldr	r1, [sp, #24]
     508:	ldr	r2, [sp, #20]
     50c:	ldr	r3, [sp, #28]
     510:	ldr	ip, [sp, #16]
     514:	str	ip, [sp]
     518:	movw	ip, #1
     51c:	str	ip, [sp, #4]
     520:	bl	0 <__flatcc_fb_create_join_path_n>
     524:	str	r0, [fp, #-20]	; 0xffffffec
     528:	bl	3e88 <checkmem>
     52c:	ldr	r0, [fp, #-20]	; 0xffffffec
     530:	movw	r1, #0
     534:	movt	r1, #0
     538:	bl	0 <fopen>
     53c:	str	r0, [fp, #-16]
     540:	ldr	r0, [fp, #-16]
     544:	movw	r1, #0
     548:	cmp	r0, r1
     54c:	bne	56c <open_file+0x114>
     550:	movw	r0, #0
     554:	movt	r0, #0
     558:	ldr	r0, [r0]
     55c:	ldr	r2, [fp, #-20]	; 0xffffffec
     560:	movw	r1, #0
     564:	movt	r1, #0
     568:	bl	0 <fprintf>
     56c:	ldr	r0, [fp, #-20]	; 0xffffffec
     570:	bl	0 <free>
     574:	ldr	r0, [fp, #-16]
     578:	str	r0, [fp, #-4]
     57c:	ldr	r0, [fp, #-4]
     580:	mov	sp, fp
     584:	pop	{fp, pc}

00000588 <close_file>:
     588:	push	{fp, lr}
     58c:	mov	fp, sp
     590:	sub	sp, sp, #8
     594:	str	r0, [sp, #4]
     598:	ldr	r0, [sp, #4]
     59c:	movw	r1, #0
     5a0:	cmp	r0, r1
     5a4:	beq	5c8 <close_file+0x40>
     5a8:	ldr	r0, [sp, #4]
     5ac:	movw	r1, #0
     5b0:	movt	r1, #0
     5b4:	ldr	r1, [r1]
     5b8:	cmp	r0, r1
     5bc:	beq	5c8 <close_file+0x40>
     5c0:	ldr	r0, [sp, #4]
     5c4:	bl	0 <fclose>
     5c8:	mov	sp, fp
     5cc:	pop	{fp, pc}

000005d0 <build_catalog>:
     5d0:	push	{fp, lr}
     5d4:	mov	fp, sp
     5d8:	sub	sp, sp, #32
     5dc:	str	r0, [fp, #-8]
     5e0:	str	r1, [fp, #-12]
     5e4:	str	r2, [sp, #16]
     5e8:	str	r3, [sp, #12]
     5ec:	ldr	r0, [fp, #-8]
     5f0:	movw	r1, #0
     5f4:	and	r1, r1, #255	; 0xff
     5f8:	movw	r2, #44	; 0x2c
     5fc:	bl	0 <memset>
     600:	ldr	r0, [sp, #16]
     604:	ldr	r1, [fp, #-8]
     608:	str	r0, [r1]
     60c:	ldr	r0, [fp, #-12]
     610:	ldr	r1, [fp, #-8]
     614:	str	r0, [r1, #40]	; 0x28
     618:	ldr	r0, [sp, #12]
     61c:	ldr	r1, [fp, #-8]
     620:	movw	r2, #0
     624:	movt	r2, #0
     628:	str	r1, [sp, #8]
     62c:	mov	r1, r2
     630:	ldr	r2, [sp, #8]
     634:	bl	0 <fb_scope_table_visit>
     638:	ldr	r0, [fp, #-8]
     63c:	ldr	r0, [r0, #4]
     640:	movw	r1, #8
     644:	bl	0 <calloc>
     648:	ldr	r1, [fp, #-8]
     64c:	str	r0, [r1, #16]
     650:	ldr	r0, [fp, #-8]
     654:	ldr	r0, [r0, #8]
     658:	movw	r1, #8
     65c:	bl	0 <calloc>
     660:	ldr	r1, [fp, #-8]
     664:	str	r0, [r1, #20]
     668:	ldr	r0, [fp, #-8]
     66c:	ldr	r0, [r0, #12]
     670:	bl	0 <malloc>
     674:	ldr	r1, [fp, #-8]
     678:	str	r0, [r1, #24]
     67c:	ldr	r0, [fp, #-8]
     680:	ldr	r0, [r0, #16]
     684:	ldr	r1, [fp, #-8]
     688:	str	r0, [r1, #28]
     68c:	ldr	r0, [fp, #-8]
     690:	ldr	r0, [r0, #20]
     694:	ldr	r1, [fp, #-8]
     698:	str	r0, [r1, #32]
     69c:	ldr	r0, [fp, #-8]
     6a0:	ldr	r0, [r0, #24]
     6a4:	ldr	r1, [fp, #-8]
     6a8:	str	r0, [r1, #36]	; 0x24
     6ac:	ldr	r0, [fp, #-8]
     6b0:	ldr	r0, [r0, #16]
     6b4:	movw	r1, #0
     6b8:	cmp	r0, r1
     6bc:	bne	6d0 <build_catalog+0x100>
     6c0:	ldr	r0, [fp, #-8]
     6c4:	ldr	r0, [r0, #4]
     6c8:	cmp	r0, #0
     6cc:	bgt	718 <build_catalog+0x148>
     6d0:	ldr	r0, [fp, #-8]
     6d4:	ldr	r0, [r0, #20]
     6d8:	movw	r1, #0
     6dc:	cmp	r0, r1
     6e0:	bne	6f4 <build_catalog+0x124>
     6e4:	ldr	r0, [fp, #-8]
     6e8:	ldr	r0, [r0, #8]
     6ec:	cmp	r0, #0
     6f0:	bgt	718 <build_catalog+0x148>
     6f4:	ldr	r0, [fp, #-8]
     6f8:	ldr	r0, [r0, #24]
     6fc:	movw	r1, #0
     700:	cmp	r0, r1
     704:	bne	72c <build_catalog+0x15c>
     708:	ldr	r0, [fp, #-8]
     70c:	ldr	r0, [r0, #12]
     710:	cmp	r0, #0
     714:	bls	72c <build_catalog+0x15c>
     718:	ldr	r0, [fp, #-8]
     71c:	bl	788 <clear_catalog>
     720:	mvn	r0, #0
     724:	str	r0, [fp, #-4]
     728:	b	77c <build_catalog+0x1ac>
     72c:	ldr	r0, [sp, #12]
     730:	ldr	r1, [fp, #-8]
     734:	movw	r2, #0
     738:	movt	r2, #0
     73c:	str	r1, [sp, #4]
     740:	mov	r1, r2
     744:	ldr	r2, [sp, #4]
     748:	bl	0 <fb_scope_table_visit>
     74c:	ldr	r0, [fp, #-8]
     750:	ldr	r0, [r0, #16]
     754:	ldr	r1, [fp, #-8]
     758:	ldr	r1, [r1, #4]
     75c:	bl	d74 <sort_entries>
     760:	ldr	r0, [fp, #-8]
     764:	ldr	r0, [r0, #20]
     768:	ldr	r1, [fp, #-8]
     76c:	ldr	r1, [r1, #8]
     770:	bl	d74 <sort_entries>
     774:	movw	r0, #0
     778:	str	r0, [fp, #-4]
     77c:	ldr	r0, [fp, #-4]
     780:	mov	sp, fp
     784:	pop	{fp, pc}

00000788 <clear_catalog>:
     788:	push	{fp, lr}
     78c:	mov	fp, sp
     790:	sub	sp, sp, #8
     794:	str	r0, [sp, #4]
     798:	ldr	r0, [sp, #4]
     79c:	ldr	r0, [r0, #16]
     7a0:	movw	r1, #0
     7a4:	cmp	r0, r1
     7a8:	beq	7b8 <clear_catalog+0x30>
     7ac:	ldr	r0, [sp, #4]
     7b0:	ldr	r0, [r0, #16]
     7b4:	bl	0 <free>
     7b8:	ldr	r0, [sp, #4]
     7bc:	ldr	r0, [r0, #20]
     7c0:	movw	r1, #0
     7c4:	cmp	r0, r1
     7c8:	beq	7d8 <clear_catalog+0x50>
     7cc:	ldr	r0, [sp, #4]
     7d0:	ldr	r0, [r0, #20]
     7d4:	bl	0 <free>
     7d8:	ldr	r0, [sp, #4]
     7dc:	ldr	r0, [r0, #24]
     7e0:	movw	r1, #0
     7e4:	cmp	r0, r1
     7e8:	beq	7f8 <clear_catalog+0x70>
     7ec:	ldr	r0, [sp, #4]
     7f0:	ldr	r0, [r0, #24]
     7f4:	bl	0 <free>
     7f8:	ldr	r0, [sp, #4]
     7fc:	movw	r1, #0
     800:	and	r1, r1, #255	; 0xff
     804:	movw	r2, #44	; 0x2c
     808:	bl	0 <memset>
     80c:	mov	sp, fp
     810:	pop	{fp, pc}

00000814 <reflection_Schema_start_as_root_with_size>:
     814:	push	{fp, lr}
     818:	mov	fp, sp
     81c:	sub	sp, sp, #8
     820:	str	r0, [sp, #4]
     824:	ldr	r0, [sp, #4]
     828:	movw	r1, #0
     82c:	movt	r1, #0
     830:	bl	11e0 <flatbuffers_buffer_start_with_size>
     834:	cmp	r0, #0
     838:	beq	848 <reflection_Schema_start_as_root_with_size+0x34>
     83c:	mvn	r0, #0
     840:	str	r0, [sp]
     844:	b	854 <reflection_Schema_start_as_root_with_size+0x40>
     848:	ldr	r0, [sp, #4]
     84c:	bl	1214 <reflection_Schema_start>
     850:	str	r0, [sp]
     854:	ldr	r0, [sp]
     858:	mov	sp, fp
     85c:	pop	{fp, pc}

00000860 <reflection_Schema_start_as_root>:
     860:	push	{fp, lr}
     864:	mov	fp, sp
     868:	sub	sp, sp, #8
     86c:	str	r0, [sp, #4]
     870:	ldr	r0, [sp, #4]
     874:	movw	r1, #0
     878:	movt	r1, #0
     87c:	bl	1238 <flatbuffers_buffer_start>
     880:	cmp	r0, #0
     884:	beq	894 <reflection_Schema_start_as_root+0x34>
     888:	mvn	r0, #0
     88c:	str	r0, [sp]
     890:	b	8a0 <reflection_Schema_start_as_root+0x40>
     894:	ldr	r0, [sp, #4]
     898:	bl	1214 <reflection_Schema_start>
     89c:	str	r0, [sp]
     8a0:	ldr	r0, [sp]
     8a4:	mov	sp, fp
     8a8:	pop	{fp, pc}

000008ac <reflection_Schema_file_ident_create>:
     8ac:	push	{fp, lr}
     8b0:	mov	fp, sp
     8b4:	sub	sp, sp, #24
     8b8:	str	r0, [fp, #-4]
     8bc:	str	r1, [fp, #-8]
     8c0:	str	r2, [sp, #12]
     8c4:	ldr	r0, [fp, #-4]
     8c8:	ldr	r1, [fp, #-4]
     8cc:	ldr	r2, [fp, #-8]
     8d0:	ldr	r3, [sp, #12]
     8d4:	str	r0, [sp, #8]
     8d8:	mov	r0, r1
     8dc:	mov	r1, r2
     8e0:	mov	r2, r3
     8e4:	bl	0 <flatcc_builder_create_string>
     8e8:	ldr	r1, [sp, #8]
     8ec:	str	r0, [sp, #4]
     8f0:	mov	r0, r1
     8f4:	ldr	r1, [sp, #4]
     8f8:	bl	126c <reflection_Schema_file_ident_add>
     8fc:	mov	sp, fp
     900:	pop	{fp, pc}

00000904 <reflection_Schema_file_ext_create>:
     904:	push	{fp, lr}
     908:	mov	fp, sp
     90c:	sub	sp, sp, #24
     910:	str	r0, [fp, #-4]
     914:	str	r1, [fp, #-8]
     918:	str	r2, [sp, #12]
     91c:	ldr	r0, [fp, #-4]
     920:	ldr	r1, [fp, #-4]
     924:	ldr	r2, [fp, #-8]
     928:	ldr	r3, [sp, #12]
     92c:	str	r0, [sp, #8]
     930:	mov	r0, r1
     934:	mov	r1, r2
     938:	mov	r2, r3
     93c:	bl	0 <flatcc_builder_create_string>
     940:	ldr	r1, [sp, #8]
     944:	str	r0, [sp, #4]
     948:	mov	r0, r1
     94c:	ldr	r1, [sp, #4]
     950:	bl	12d8 <reflection_Schema_file_ext_add>
     954:	mov	sp, fp
     958:	pop	{fp, pc}

0000095c <export_objects>:
     95c:	push	{fp, lr}
     960:	mov	fp, sp
     964:	sub	sp, sp, #48	; 0x30
     968:	str	r0, [fp, #-4]
     96c:	str	r1, [fp, #-8]
     970:	str	r2, [fp, #-12]
     974:	str	r3, [fp, #-16]
     978:	movw	r0, #0
     97c:	str	r0, [fp, #-20]	; 0xffffffec
     980:	ldr	r0, [fp, #-20]	; 0xffffffec
     984:	ldr	r1, [fp, #-12]
     988:	cmp	r0, r1
     98c:	bge	a8c <export_objects+0x130>
     990:	ldr	r0, [fp, #-8]
     994:	ldr	r1, [fp, #-20]	; 0xffffffec
     998:	ldr	r0, [r0, r1, lsl #3]
     99c:	str	r0, [sp, #20]
     9a0:	ldr	r0, [fp, #-4]
     9a4:	bl	1344 <reflection_Object_start>
     9a8:	ldr	r1, [fp, #-4]
     9ac:	ldr	r2, [fp, #-8]
     9b0:	ldr	r3, [fp, #-20]	; 0xffffffec
     9b4:	add	r2, r2, r3, lsl #3
     9b8:	ldr	r2, [r2, #4]
     9bc:	str	r0, [sp, #16]
     9c0:	mov	r0, r1
     9c4:	mov	r1, r2
     9c8:	bl	1368 <reflection_Object_name_create_str>
     9cc:	ldr	r1, [fp, #-4]
     9d0:	str	r0, [sp, #12]
     9d4:	mov	r0, r1
     9d8:	bl	13b4 <reflection_Object_fields_start>
     9dc:	ldr	r1, [fp, #-4]
     9e0:	ldr	r2, [sp, #20]
     9e4:	str	r0, [sp, #8]
     9e8:	mov	r0, r1
     9ec:	mov	r1, r2
     9f0:	bl	13d8 <export_fields>
     9f4:	ldr	r0, [fp, #-4]
     9f8:	bl	17f8 <reflection_Object_fields_end>
     9fc:	ldr	r1, [sp, #20]
     a00:	ldrh	r1, [r1, #8]
     a04:	cmp	r1, #1
     a08:	movw	r1, #0
     a0c:	moveq	r1, #1
     a10:	and	r1, r1, #1
     a14:	str	r1, [sp, #24]
     a18:	ldr	r1, [sp, #24]
     a1c:	cmp	r1, #0
     a20:	beq	a34 <export_objects+0xd8>
     a24:	ldr	r0, [fp, #-4]
     a28:	ldr	r1, [sp, #20]
     a2c:	ldr	r1, [r1, #112]	; 0x70
     a30:	bl	1838 <reflection_Object_bytesize_add>
     a34:	ldr	r0, [fp, #-4]
     a38:	ldrb	r1, [sp, #24]
     a3c:	bl	18bc <reflection_Object_is_struct_add>
     a40:	ldr	r1, [fp, #-4]
     a44:	ldr	r2, [sp, #20]
     a48:	ldrh	r2, [r2, #104]	; 0x68
     a4c:	str	r0, [sp, #4]
     a50:	mov	r0, r1
     a54:	mov	r1, r2
     a58:	bl	193c <reflection_Object_minalign_add>
     a5c:	ldr	r1, [fp, #-4]
     a60:	str	r0, [sp]
     a64:	mov	r0, r1
     a68:	bl	19bc <reflection_Object_end>
     a6c:	ldr	r1, [fp, #-16]
     a70:	ldr	r2, [fp, #-20]	; 0xffffffec
     a74:	add	r1, r1, r2, lsl #2
     a78:	str	r0, [r1]
     a7c:	ldr	r0, [fp, #-20]	; 0xffffffec
     a80:	add	r0, r0, #1
     a84:	str	r0, [fp, #-20]	; 0xffffffec
     a88:	b	980 <export_objects+0x24>
     a8c:	ldr	r0, [fp, #-4]
     a90:	ldr	r1, [fp, #-16]
     a94:	ldr	r2, [fp, #-12]
     a98:	bl	1a1c <reflection_Schema_objects_create>
     a9c:	mov	sp, fp
     aa0:	pop	{fp, pc}

00000aa4 <export_enums>:
     aa4:	push	{r4, r5, fp, lr}
     aa8:	add	fp, sp, #8
     aac:	sub	sp, sp, #88	; 0x58
     ab0:	str	r0, [fp, #-12]
     ab4:	str	r1, [fp, #-16]
     ab8:	str	r2, [fp, #-20]	; 0xffffffec
     abc:	str	r3, [fp, #-24]	; 0xffffffe8
     ac0:	ldr	r0, [fp, #-12]
     ac4:	bl	29f4 <reflection_Schema_enums_start>
     ac8:	movw	r1, #0
     acc:	str	r1, [fp, #-28]	; 0xffffffe4
     ad0:	ldr	r0, [fp, #-28]	; 0xffffffe4
     ad4:	ldr	r1, [fp, #-20]	; 0xffffffec
     ad8:	cmp	r0, r1
     adc:	bge	c54 <export_enums+0x1b0>
     ae0:	ldr	r0, [fp, #-16]
     ae4:	ldr	r1, [fp, #-28]	; 0xffffffe4
     ae8:	ldr	r0, [r0, r1, lsl #3]
     aec:	str	r0, [fp, #-36]	; 0xffffffdc
     af0:	ldr	r0, [fp, #-36]	; 0xffffffdc
     af4:	ldrh	r0, [r0, #8]
     af8:	sub	r0, r0, #4
     afc:	clz	r0, r0
     b00:	lsr	r0, r0, #5
     b04:	str	r0, [fp, #-32]	; 0xffffffe0
     b08:	ldr	r0, [fp, #-12]
     b0c:	bl	2a14 <reflection_Enum_vec_push_start>
     b10:	ldr	r1, [fp, #-12]
     b14:	ldr	r2, [fp, #-16]
     b18:	ldr	r3, [fp, #-28]	; 0xffffffe4
     b1c:	add	r2, r2, r3, lsl #3
     b20:	ldr	r2, [r2, #4]
     b24:	str	r0, [fp, #-44]	; 0xffffffd4
     b28:	mov	r0, r1
     b2c:	mov	r1, r2
     b30:	bl	2a34 <reflection_Enum_name_create_str>
     b34:	ldr	r1, [fp, #-12]
     b38:	str	r0, [sp, #48]	; 0x30
     b3c:	mov	r0, r1
     b40:	bl	2a80 <reflection_Enum_values_start>
     b44:	ldr	r1, [fp, #-36]	; 0xffffffdc
     b48:	ldr	r1, [r1, #20]
     b4c:	str	r1, [fp, #-40]	; 0xffffffd8
     b50:	ldr	r0, [fp, #-40]	; 0xffffffd8
     b54:	movw	r1, #0
     b58:	cmp	r0, r1
     b5c:	beq	bc0 <export_enums+0x11c>
     b60:	ldr	r0, [fp, #-12]
     b64:	ldr	r1, [fp, #-40]	; 0xffffffd8
     b68:	ldr	r2, [fp, #-32]	; 0xffffffe0
     b6c:	cmp	r2, #0
     b70:	str	r0, [sp, #44]	; 0x2c
     b74:	str	r1, [sp, #40]	; 0x28
     b78:	beq	b88 <export_enums+0xe4>
     b7c:	ldr	r0, [fp, #-24]	; 0xffffffe8
     b80:	str	r0, [sp, #36]	; 0x24
     b84:	b	b94 <export_enums+0xf0>
     b88:	movw	r0, #0
     b8c:	str	r0, [sp, #36]	; 0x24
     b90:	b	b94 <export_enums+0xf0>
     b94:	ldr	r0, [sp, #36]	; 0x24
     b98:	ldr	r1, [sp, #44]	; 0x2c
     b9c:	str	r0, [sp, #32]
     ba0:	mov	r0, r1
     ba4:	ldr	r1, [sp, #40]	; 0x28
     ba8:	ldr	r2, [sp, #32]
     bac:	bl	2aa0 <export_enumval>
     bb0:	ldr	r0, [fp, #-40]	; 0xffffffd8
     bb4:	ldr	r0, [r0]
     bb8:	str	r0, [fp, #-40]	; 0xffffffd8
     bbc:	b	b50 <export_enums+0xac>
     bc0:	ldr	r0, [fp, #-12]
     bc4:	bl	2b5c <reflection_Enum_values_end>
     bc8:	ldr	r1, [fp, #-12]
     bcc:	ldrb	r2, [fp, #-32]	; 0xffffffe0
     bd0:	str	r0, [sp, #28]
     bd4:	mov	r0, r1
     bd8:	mov	r1, r2
     bdc:	bl	2b9c <reflection_Enum_is_union_add>
     be0:	ldr	r1, [fp, #-12]
     be4:	mov	r2, r1
     be8:	ldr	r3, [fp, #-36]	; 0xffffffdc
     bec:	ldr	ip, [r3, #40]	; 0x28
     bf0:	ldr	lr, [r3, #44]	; 0x2c
     bf4:	ldr	r4, [r3, #48]	; 0x30
     bf8:	ldr	r3, [r3, #52]	; 0x34
     bfc:	mov	r5, sp
     c00:	str	r4, [r5]
     c04:	str	r3, [r5, #4]
     c08:	str	r0, [sp, #24]
     c0c:	mov	r0, r1
     c10:	str	r2, [sp, #20]
     c14:	mov	r2, ip
     c18:	mov	r3, lr
     c1c:	bl	1e7c <export_type>
     c20:	ldr	r1, [sp, #20]
     c24:	str	r0, [sp, #16]
     c28:	mov	r0, r1
     c2c:	ldr	r1, [sp, #16]
     c30:	bl	2c1c <reflection_Enum_underlying_type_add>
     c34:	ldr	r1, [fp, #-12]
     c38:	str	r0, [sp, #12]
     c3c:	mov	r0, r1
     c40:	bl	2c88 <reflection_Enum_vec_push_end>
     c44:	ldr	r0, [fp, #-28]	; 0xffffffe4
     c48:	add	r0, r0, #1
     c4c:	str	r0, [fp, #-28]	; 0xffffffe4
     c50:	b	ad0 <export_enums+0x2c>
     c54:	ldr	r0, [fp, #-12]
     c58:	bl	2cc8 <reflection_Schema_enums_end>
     c5c:	sub	sp, fp, #8
     c60:	pop	{r4, r5, fp, pc}

00000c64 <export_root_type>:
     c64:	push	{fp, lr}
     c68:	mov	fp, sp
     c6c:	sub	sp, sp, #16
     c70:	str	r0, [fp, #-4]
     c74:	str	r1, [sp, #8]
     c78:	str	r2, [sp, #4]
     c7c:	ldr	r0, [sp, #8]
     c80:	movw	r1, #0
     c84:	cmp	r0, r1
     c88:	beq	cc4 <export_root_type+0x60>
     c8c:	ldr	r0, [sp, #8]
     c90:	ldrh	r0, [r0, #8]
     c94:	cmp	r0, #0
     c98:	bne	cc0 <export_root_type+0x5c>
     c9c:	ldr	r0, [sp, #8]
     ca0:	str	r0, [sp]
     ca4:	ldr	r0, [fp, #-4]
     ca8:	ldr	r1, [sp, #4]
     cac:	ldr	r2, [sp]
     cb0:	ldr	r2, [r2, #124]	; 0x7c
     cb4:	add	r1, r1, r2, lsl #2
     cb8:	ldr	r1, [r1]
     cbc:	bl	3210 <reflection_Schema_root_table_add>
     cc0:	b	cc4 <export_root_type+0x60>
     cc4:	mov	sp, fp
     cc8:	pop	{fp, pc}

00000ccc <reflection_Schema_end_as_root>:
     ccc:	push	{fp, lr}
     cd0:	mov	fp, sp
     cd4:	sub	sp, sp, #16
     cd8:	str	r0, [fp, #-4]
     cdc:	ldr	r0, [fp, #-4]
     ce0:	ldr	r1, [fp, #-4]
     ce4:	str	r0, [sp, #8]
     ce8:	mov	r0, r1
     cec:	bl	32a4 <reflection_Schema_end>
     cf0:	ldr	r1, [sp, #8]
     cf4:	str	r0, [sp, #4]
     cf8:	mov	r0, r1
     cfc:	ldr	r1, [sp, #4]
     d00:	bl	327c <flatbuffers_buffer_end>
     d04:	mov	sp, fp
     d08:	pop	{fp, pc}

00000d0c <count_symbols>:
     d0c:	push	{fp, lr}
     d10:	mov	fp, sp
     d14:	sub	sp, sp, #8
     d18:	str	r0, [sp, #4]
     d1c:	str	r1, [sp]
     d20:	ldr	r0, [sp]
     d24:	add	r0, r0, #4
     d28:	ldr	r2, [sp, #4]
     d2c:	movw	r1, #0
     d30:	movt	r1, #0
     d34:	bl	0 <fb_symbol_table_visit>
     d38:	mov	sp, fp
     d3c:	pop	{fp, pc}

00000d40 <install_symbols>:
     d40:	push	{fp, lr}
     d44:	mov	fp, sp
     d48:	sub	sp, sp, #8
     d4c:	str	r0, [sp, #4]
     d50:	str	r1, [sp]
     d54:	ldr	r0, [sp]
     d58:	add	r0, r0, #4
     d5c:	ldr	r2, [sp, #4]
     d60:	movw	r1, #0
     d64:	movt	r1, #0
     d68:	bl	0 <fb_symbol_table_visit>
     d6c:	mov	sp, fp
     d70:	pop	{fp, pc}

00000d74 <sort_entries>:
     d74:	push	{fp, lr}
     d78:	mov	fp, sp
     d7c:	sub	sp, sp, #16
     d80:	str	r0, [fp, #-4]
     d84:	str	r1, [sp, #8]
     d88:	ldr	r0, [fp, #-4]
     d8c:	ldr	r1, [sp, #8]
     d90:	movw	r2, #8
     d94:	movw	r3, #0
     d98:	movt	r3, #0
     d9c:	bl	0 <qsort>
     da0:	movw	r0, #0
     da4:	str	r0, [sp, #4]
     da8:	ldr	r0, [sp, #4]
     dac:	ldr	r1, [sp, #8]
     db0:	cmp	r0, r1
     db4:	bge	de0 <sort_entries+0x6c>
     db8:	ldr	r0, [sp, #4]
     dbc:	mov	r1, r0
     dc0:	ldr	r2, [fp, #-4]
     dc4:	add	r0, r2, r0, lsl #3
     dc8:	ldr	r0, [r0]
     dcc:	str	r1, [r0, #124]	; 0x7c
     dd0:	ldr	r0, [sp, #4]
     dd4:	add	r0, r0, #1
     dd8:	str	r0, [sp, #4]
     ddc:	b	da8 <sort_entries+0x34>
     de0:	mov	sp, fp
     de4:	pop	{fp, pc}

00000de8 <count_symbol>:
     de8:	push	{fp, lr}
     dec:	mov	fp, sp
     df0:	sub	sp, sp, #32
     df4:	str	r0, [fp, #-4]
     df8:	str	r1, [fp, #-8]
     dfc:	ldr	r0, [fp, #-4]
     e00:	str	r0, [fp, #-12]
     e04:	movw	r0, #0
     e08:	str	r0, [sp, #12]
     e0c:	ldr	r0, [fp, #-12]
     e10:	ldr	r0, [r0, #40]	; 0x28
     e14:	ldr	r1, [fp, #-8]
     e18:	bl	f20 <get_compound_if_visible>
     e1c:	str	r0, [sp, #8]
     e20:	movw	r1, #0
     e24:	cmp	r0, r1
     e28:	bne	e30 <count_symbol+0x48>
     e2c:	b	f18 <count_symbol+0x130>
     e30:	ldr	r0, [fp, #-12]
     e34:	ldr	r0, [r0]
     e38:	cmp	r0, #0
     e3c:	beq	e90 <count_symbol+0xa8>
     e40:	ldr	r0, [sp, #8]
     e44:	ldr	r0, [r0, #12]
     e48:	ldr	r0, [r0]
     e4c:	str	r0, [sp, #16]
     e50:	ldr	r0, [sp, #16]
     e54:	movw	r1, #0
     e58:	cmp	r0, r1
     e5c:	beq	e8c <count_symbol+0xa4>
     e60:	ldr	r0, [sp, #16]
     e64:	ldr	r0, [r0, #4]
     e68:	ldr	r0, [r0, #4]
     e6c:	add	r0, r0, #1
     e70:	ldr	r1, [sp, #12]
     e74:	add	r0, r1, r0
     e78:	str	r0, [sp, #12]
     e7c:	ldr	r0, [sp, #16]
     e80:	ldr	r0, [r0]
     e84:	str	r0, [sp, #16]
     e88:	b	e50 <count_symbol+0x68>
     e8c:	b	e90 <count_symbol+0xa8>
     e90:	ldr	r0, [fp, #-8]
     e94:	ldr	r0, [r0, #4]
     e98:	ldr	r0, [r0, #4]
     e9c:	ldr	r1, [sp, #12]
     ea0:	add	r0, r0, r1
     ea4:	add	r0, r0, #1
     ea8:	str	r0, [sp, #12]
     eac:	ldr	r0, [sp, #12]
     eb0:	ldr	r1, [fp, #-12]
     eb4:	ldr	r2, [r1, #12]
     eb8:	add	r0, r2, r0
     ebc:	str	r0, [r1, #12]
     ec0:	ldr	r0, [fp, #-8]
     ec4:	ldrh	r0, [r0, #8]
     ec8:	cmp	r0, #2
     ecc:	str	r0, [sp, #4]
     ed0:	bcc	eec <count_symbol+0x104>
     ed4:	b	ed8 <count_symbol+0xf0>
     ed8:	ldr	r0, [sp, #4]
     edc:	sub	r1, r0, #3
     ee0:	cmp	r1, #2
     ee4:	bcc	f00 <count_symbol+0x118>
     ee8:	b	f14 <count_symbol+0x12c>
     eec:	ldr	r0, [fp, #-12]
     ef0:	ldr	r1, [r0, #4]
     ef4:	add	r1, r1, #1
     ef8:	str	r1, [r0, #4]
     efc:	b	f18 <count_symbol+0x130>
     f00:	ldr	r0, [fp, #-12]
     f04:	ldr	r1, [r0, #8]
     f08:	add	r1, r1, #1
     f0c:	str	r1, [r0, #8]
     f10:	b	f18 <count_symbol+0x130>
     f14:	b	f18 <count_symbol+0x130>
     f18:	mov	sp, fp
     f1c:	pop	{fp, pc}

00000f20 <get_compound_if_visible>:
     f20:	push	{fp, lr}
     f24:	mov	fp, sp
     f28:	sub	sp, sp, #16
     f2c:	str	r0, [fp, #-4]
     f30:	str	r1, [sp, #8]
     f34:	mov	r0, #0
     f38:	str	r0, [sp, #4]
     f3c:	ldr	r0, [sp, #8]
     f40:	ldrh	r0, [r0, #8]
     f44:	cmp	r0, #4
     f48:	bhi	f80 <get_compound_if_visible+0x60>
     f4c:	b	f50 <get_compound_if_visible+0x30>
     f50:	ldr	r0, [sp, #8]
     f54:	str	r0, [sp, #4]
     f58:	ldr	r0, [fp, #-4]
     f5c:	add	r0, r0, #172	; 0xac
     f60:	ldr	r1, [sp, #4]
     f64:	ldr	r1, [r1, #16]
     f68:	bl	f90 <ptr_set_exists>
     f6c:	cmp	r0, #0
     f70:	bne	f7c <get_compound_if_visible+0x5c>
     f74:	movw	r0, #0
     f78:	str	r0, [sp, #4]
     f7c:	b	f84 <get_compound_if_visible+0x64>
     f80:	b	f84 <get_compound_if_visible+0x64>
     f84:	ldr	r0, [sp, #4]
     f88:	mov	sp, fp
     f8c:	pop	{fp, pc}

00000f90 <ptr_set_exists>:
     f90:	push	{fp, lr}
     f94:	mov	fp, sp
     f98:	sub	sp, sp, #8
     f9c:	str	r0, [sp, #4]
     fa0:	str	r1, [sp]
     fa4:	ldr	r0, [sp, #4]
     fa8:	ldr	r1, [sp]
     fac:	bl	0 <ptr_set_find_item>
     fb0:	movw	r1, #0
     fb4:	cmp	r0, r1
     fb8:	movw	r0, #0
     fbc:	movne	r0, #1
     fc0:	and	r0, r0, #1
     fc4:	mov	sp, fp
     fc8:	pop	{fp, pc}

00000fcc <install_symbol>:
     fcc:	push	{fp, lr}
     fd0:	mov	fp, sp
     fd4:	sub	sp, sp, #40	; 0x28
     fd8:	str	r0, [fp, #-4]
     fdc:	str	r1, [fp, #-8]
     fe0:	ldr	r0, [fp, #-4]
     fe4:	str	r0, [fp, #-12]
     fe8:	movw	r0, #0
     fec:	str	r0, [sp, #20]
     ff0:	ldr	r0, [fp, #-12]
     ff4:	ldr	r0, [r0, #40]	; 0x28
     ff8:	ldr	r1, [fp, #-8]
     ffc:	bl	f20 <get_compound_if_visible>
    1000:	str	r0, [sp, #8]
    1004:	movw	r1, #0
    1008:	cmp	r0, r1
    100c:	bne	1014 <install_symbol+0x48>
    1010:	b	11a8 <install_symbol+0x1dc>
    1014:	ldr	r0, [fp, #-12]
    1018:	ldr	r0, [r0, #36]	; 0x24
    101c:	str	r0, [sp, #16]
    1020:	ldr	r0, [sp, #16]
    1024:	str	r0, [sp, #12]
    1028:	ldr	r0, [fp, #-12]
    102c:	ldr	r0, [r0]
    1030:	cmp	r0, #0
    1034:	beq	10b8 <install_symbol+0xec>
    1038:	ldr	r0, [sp, #8]
    103c:	ldr	r0, [r0, #12]
    1040:	ldr	r0, [r0]
    1044:	str	r0, [fp, #-16]
    1048:	ldr	r0, [fp, #-16]
    104c:	movw	r1, #0
    1050:	cmp	r0, r1
    1054:	beq	10b4 <install_symbol+0xe8>
    1058:	ldr	r0, [fp, #-16]
    105c:	ldr	r0, [r0, #4]
    1060:	ldr	r0, [r0, #4]
    1064:	str	r0, [sp, #20]
    1068:	ldr	r0, [sp, #16]
    106c:	ldr	r1, [fp, #-16]
    1070:	ldr	r1, [r1, #4]
    1074:	ldr	r1, [r1]
    1078:	ldr	r2, [sp, #20]
    107c:	bl	0 <memcpy>
    1080:	ldr	r0, [sp, #20]
    1084:	ldr	r1, [sp, #16]
    1088:	add	r0, r1, r0
    108c:	str	r0, [sp, #16]
    1090:	ldr	r0, [sp, #16]
    1094:	add	r1, r0, #1
    1098:	str	r1, [sp, #16]
    109c:	movw	r1, #46	; 0x2e
    10a0:	strb	r1, [r0]
    10a4:	ldr	r0, [fp, #-16]
    10a8:	ldr	r0, [r0]
    10ac:	str	r0, [fp, #-16]
    10b0:	b	1048 <install_symbol+0x7c>
    10b4:	b	10b8 <install_symbol+0xec>
    10b8:	ldr	r0, [fp, #-8]
    10bc:	ldr	r0, [r0, #4]
    10c0:	ldr	r0, [r0, #4]
    10c4:	str	r0, [sp, #20]
    10c8:	ldr	r0, [sp, #16]
    10cc:	ldr	r1, [fp, #-8]
    10d0:	ldr	r1, [r1, #4]
    10d4:	ldr	r1, [r1]
    10d8:	ldr	r2, [sp, #20]
    10dc:	bl	0 <memcpy>
    10e0:	ldr	r1, [sp, #20]
    10e4:	ldr	r2, [sp, #16]
    10e8:	add	r1, r2, r1
    10ec:	str	r1, [sp, #16]
    10f0:	ldr	r1, [sp, #16]
    10f4:	add	r2, r1, #1
    10f8:	str	r2, [sp, #16]
    10fc:	mov	r2, #0
    1100:	strb	r2, [r1]
    1104:	ldr	r1, [sp, #16]
    1108:	ldr	r2, [fp, #-12]
    110c:	str	r1, [r2, #36]	; 0x24
    1110:	ldr	r1, [fp, #-8]
    1114:	ldrh	r1, [r1, #8]
    1118:	cmp	r1, #2
    111c:	str	r1, [sp, #4]
    1120:	bcc	113c <install_symbol+0x170>
    1124:	b	1128 <install_symbol+0x15c>
    1128:	ldr	r0, [sp, #4]
    112c:	sub	r1, r0, #3
    1130:	cmp	r1, #2
    1134:	bcc	1170 <install_symbol+0x1a4>
    1138:	b	11a4 <install_symbol+0x1d8>
    113c:	ldr	r0, [fp, #-8]
    1140:	ldr	r1, [fp, #-12]
    1144:	ldr	r1, [r1, #28]
    1148:	str	r0, [r1]
    114c:	ldr	r0, [sp, #12]
    1150:	ldr	r1, [fp, #-12]
    1154:	ldr	r1, [r1, #28]
    1158:	str	r0, [r1, #4]
    115c:	ldr	r0, [fp, #-12]
    1160:	ldr	r1, [r0, #28]
    1164:	add	r1, r1, #8
    1168:	str	r1, [r0, #28]
    116c:	b	11a8 <install_symbol+0x1dc>
    1170:	ldr	r0, [fp, #-8]
    1174:	ldr	r1, [fp, #-12]
    1178:	ldr	r1, [r1, #32]
    117c:	str	r0, [r1]
    1180:	ldr	r0, [sp, #12]
    1184:	ldr	r1, [fp, #-12]
    1188:	ldr	r1, [r1, #32]
    118c:	str	r0, [r1, #4]
    1190:	ldr	r0, [fp, #-12]
    1194:	ldr	r1, [r0, #32]
    1198:	add	r1, r1, #8
    119c:	str	r1, [r0, #32]
    11a0:	b	11a8 <install_symbol+0x1dc>
    11a4:	b	11a8 <install_symbol+0x1dc>
    11a8:	mov	sp, fp
    11ac:	pop	{fp, pc}

000011b0 <compare_entries>:
    11b0:	push	{fp, lr}
    11b4:	mov	fp, sp
    11b8:	sub	sp, sp, #8
    11bc:	str	r0, [sp, #4]
    11c0:	str	r1, [sp]
    11c4:	ldr	r0, [sp, #4]
    11c8:	ldr	r0, [r0, #4]
    11cc:	ldr	r1, [sp]
    11d0:	ldr	r1, [r1, #4]
    11d4:	bl	0 <strcmp>
    11d8:	mov	sp, fp
    11dc:	pop	{fp, pc}

000011e0 <flatbuffers_buffer_start_with_size>:
    11e0:	push	{fp, lr}
    11e4:	mov	fp, sp
    11e8:	sub	sp, sp, #8
    11ec:	str	r0, [sp, #4]
    11f0:	str	r1, [sp]
    11f4:	ldr	r0, [sp, #4]
    11f8:	ldr	r1, [sp]
    11fc:	movw	r2, #0
    1200:	uxth	r2, r2
    1204:	movw	r3, #2
    1208:	bl	0 <flatcc_builder_start_buffer>
    120c:	mov	sp, fp
    1210:	pop	{fp, pc}

00001214 <reflection_Schema_start>:
    1214:	push	{fp, lr}
    1218:	mov	fp, sp
    121c:	sub	sp, sp, #8
    1220:	str	r0, [sp, #4]
    1224:	ldr	r0, [sp, #4]
    1228:	movw	r1, #5
    122c:	bl	0 <flatcc_builder_start_table>
    1230:	mov	sp, fp
    1234:	pop	{fp, pc}

00001238 <flatbuffers_buffer_start>:
    1238:	push	{fp, lr}
    123c:	mov	fp, sp
    1240:	sub	sp, sp, #8
    1244:	str	r0, [sp, #4]
    1248:	str	r1, [sp]
    124c:	ldr	r0, [sp, #4]
    1250:	ldr	r1, [sp]
    1254:	movw	r2, #0
    1258:	uxth	r2, r2
    125c:	movw	r3, #0
    1260:	bl	0 <flatcc_builder_start_buffer>
    1264:	mov	sp, fp
    1268:	pop	{fp, pc}

0000126c <reflection_Schema_file_ident_add>:
    126c:	push	{fp, lr}
    1270:	mov	fp, sp
    1274:	sub	sp, sp, #16
    1278:	str	r0, [fp, #-4]
    127c:	str	r1, [sp, #8]
    1280:	ldr	r0, [sp, #8]
    1284:	cmp	r0, #0
    1288:	beq	12c0 <reflection_Schema_file_ident_add+0x54>
    128c:	ldr	r0, [fp, #-4]
    1290:	movw	r1, #2
    1294:	bl	0 <flatcc_builder_table_add_offset>
    1298:	str	r0, [sp, #4]
    129c:	movw	r1, #0
    12a0:	cmp	r0, r1
    12a4:	beq	12c0 <reflection_Schema_file_ident_add+0x54>
    12a8:	ldr	r0, [sp, #8]
    12ac:	ldr	r1, [sp, #4]
    12b0:	str	r0, [r1]
    12b4:	movw	r0, #0
    12b8:	str	r0, [sp]
    12bc:	b	12cc <reflection_Schema_file_ident_add+0x60>
    12c0:	mvn	r0, #0
    12c4:	str	r0, [sp]
    12c8:	b	12cc <reflection_Schema_file_ident_add+0x60>
    12cc:	ldr	r0, [sp]
    12d0:	mov	sp, fp
    12d4:	pop	{fp, pc}

000012d8 <reflection_Schema_file_ext_add>:
    12d8:	push	{fp, lr}
    12dc:	mov	fp, sp
    12e0:	sub	sp, sp, #16
    12e4:	str	r0, [fp, #-4]
    12e8:	str	r1, [sp, #8]
    12ec:	ldr	r0, [sp, #8]
    12f0:	cmp	r0, #0
    12f4:	beq	132c <reflection_Schema_file_ext_add+0x54>
    12f8:	ldr	r0, [fp, #-4]
    12fc:	movw	r1, #3
    1300:	bl	0 <flatcc_builder_table_add_offset>
    1304:	str	r0, [sp, #4]
    1308:	movw	r1, #0
    130c:	cmp	r0, r1
    1310:	beq	132c <reflection_Schema_file_ext_add+0x54>
    1314:	ldr	r0, [sp, #8]
    1318:	ldr	r1, [sp, #4]
    131c:	str	r0, [r1]
    1320:	movw	r0, #0
    1324:	str	r0, [sp]
    1328:	b	1338 <reflection_Schema_file_ext_add+0x60>
    132c:	mvn	r0, #0
    1330:	str	r0, [sp]
    1334:	b	1338 <reflection_Schema_file_ext_add+0x60>
    1338:	ldr	r0, [sp]
    133c:	mov	sp, fp
    1340:	pop	{fp, pc}

00001344 <reflection_Object_start>:
    1344:	push	{fp, lr}
    1348:	mov	fp, sp
    134c:	sub	sp, sp, #8
    1350:	str	r0, [sp, #4]
    1354:	ldr	r0, [sp, #4]
    1358:	movw	r1, #5
    135c:	bl	0 <flatcc_builder_start_table>
    1360:	mov	sp, fp
    1364:	pop	{fp, pc}

00001368 <reflection_Object_name_create_str>:
    1368:	push	{fp, lr}
    136c:	mov	fp, sp
    1370:	sub	sp, sp, #16
    1374:	str	r0, [fp, #-4]
    1378:	str	r1, [sp, #8]
    137c:	ldr	r0, [fp, #-4]
    1380:	ldr	r1, [fp, #-4]
    1384:	ldr	r2, [sp, #8]
    1388:	str	r0, [sp, #4]
    138c:	mov	r0, r1
    1390:	mov	r1, r2
    1394:	bl	0 <flatcc_builder_create_string_str>
    1398:	ldr	r1, [sp, #4]
    139c:	str	r0, [sp]
    13a0:	mov	r0, r1
    13a4:	ldr	r1, [sp]
    13a8:	bl	1a74 <reflection_Object_name_add>
    13ac:	mov	sp, fp
    13b0:	pop	{fp, pc}

000013b4 <reflection_Object_fields_start>:
    13b4:	push	{fp, lr}
    13b8:	mov	fp, sp
    13bc:	sub	sp, sp, #8
    13c0:	str	r0, [sp, #4]
    13c4:	ldr	r0, [sp, #4]
    13c8:	bl	0 <flatcc_builder_start_offset_vector>
    13cc:	mov	sp, fp
    13d0:	pop	{fp, pc}
    13d4:	nop	{0}

000013d8 <export_fields>:
    13d8:	push	{r4, sl, fp, lr}
    13dc:	add	fp, sp, #8
    13e0:	sub	sp, sp, #144	; 0x90
    13e4:	str	r0, [fp, #-12]
    13e8:	str	r1, [fp, #-16]
    13ec:	movw	r0, #0
    13f0:	strb	r0, [fp, #-28]	; 0xffffffe4
    13f4:	ldr	r0, [fp, #-16]
    13f8:	ldr	r0, [r0, #20]
    13fc:	str	r0, [fp, #-20]	; 0xffffffec
    1400:	ldr	r0, [fp, #-20]	; 0xffffffec
    1404:	movw	r1, #0
    1408:	cmp	r0, r1
    140c:	beq	17e4 <export_fields+0x40c>
    1410:	ldr	r0, [fp, #-20]	; 0xffffffec
    1414:	str	r0, [fp, #-24]	; 0xffffffe8
    1418:	ldrsb	r0, [fp, #-28]	; 0xffffffe4
    141c:	cmp	r0, #0
    1420:	movw	r0, #0
    1424:	str	r0, [fp, #-52]	; 0xffffffcc
    1428:	bne	1448 <export_fields+0x70>
    142c:	ldr	r0, [fp, #-24]	; 0xffffffe8
    1430:	ldrh	r0, [r0, #72]	; 0x48
    1434:	and	r0, r0, #128	; 0x80
    1438:	cmp	r0, #0
    143c:	movw	r0, #0
    1440:	movne	r0, #1
    1444:	str	r0, [fp, #-52]	; 0xffffffcc
    1448:	ldr	r0, [fp, #-52]	; 0xffffffcc
    144c:	vldr	d16, [pc, #924]	; 17f0 <export_fields+0x418>
    1450:	and	r0, r0, #1
    1454:	strb	r0, [fp, #-25]	; 0xffffffe7
    1458:	ldr	r0, [fp, #-24]	; 0xffffffe8
    145c:	ldrh	r0, [r0, #72]	; 0x48
    1460:	ubfx	r0, r0, #8, #1
    1464:	strb	r0, [fp, #-27]	; 0xffffffe5
    1468:	mov	r0, #0
    146c:	str	r0, [fp, #-36]	; 0xffffffdc
    1470:	str	r0, [fp, #-40]	; 0xffffffd8
    1474:	vstr	d16, [fp, #-48]	; 0xffffffd0
    1478:	ldr	r0, [fp, #-24]	; 0xffffffe8
    147c:	ldrh	r0, [r0, #72]	; 0x48
    1480:	and	r0, r0, #4
    1484:	cmp	r0, #0
    1488:	movw	r0, #0
    148c:	movne	r0, #1
    1490:	and	r0, r0, #1
    1494:	strb	r0, [fp, #-26]	; 0xffffffe6
    1498:	ldr	r0, [fp, #-24]	; 0xffffffe8
    149c:	ldrh	r0, [r0, #24]
    14a0:	cmp	r0, #14
    14a4:	bne	15c0 <export_fields+0x1e8>
    14a8:	ldr	r0, [fp, #-24]	; 0xffffffe8
    14ac:	ldr	r0, [r0, #16]
    14b0:	ldrh	r0, [r0, #8]
    14b4:	cmp	r0, #4
    14b8:	bne	15c0 <export_fields+0x1e8>
    14bc:	ldr	r0, [fp, #-12]
    14c0:	bl	1ae0 <reflection_Field_vec_push_start>
    14c4:	ldr	r1, [fp, #-12]
    14c8:	str	r0, [fp, #-56]	; 0xffffffc8
    14cc:	mov	r0, r1
    14d0:	bl	1b00 <reflection_Field_name_start>
    14d4:	ldr	r1, [fp, #-12]
    14d8:	ldr	r2, [fp, #-24]	; 0xffffffe8
    14dc:	ldr	r2, [r2, #4]
    14e0:	ldr	r3, [r2]
    14e4:	ldr	r2, [r2, #4]
    14e8:	str	r0, [fp, #-60]	; 0xffffffc4
    14ec:	mov	r0, r1
    14f0:	mov	r1, r3
    14f4:	bl	1b20 <reflection_Field_name_append>
    14f8:	ldr	r1, [fp, #-12]
    14fc:	movw	r2, #0
    1500:	movt	r2, #0
    1504:	mov	r3, #5
    1508:	str	r0, [fp, #-64]	; 0xffffffc0
    150c:	mov	r0, r1
    1510:	mov	r1, r2
    1514:	mov	r2, r3
    1518:	bl	1b20 <reflection_Field_name_append>
    151c:	ldr	r1, [fp, #-12]
    1520:	str	r0, [fp, #-68]	; 0xffffffbc
    1524:	mov	r0, r1
    1528:	bl	1b50 <reflection_Field_name_end>
    152c:	ldr	r1, [fp, #-12]
    1530:	mov	r2, #1
    1534:	mov	r3, #0
    1538:	mvn	ip, #0
    153c:	str	r0, [fp, #-72]	; 0xffffffb8
    1540:	mov	r0, r1
    1544:	mov	r1, r2
    1548:	mov	r2, r3
    154c:	mov	r3, ip
    1550:	bl	1b90 <reflection_Field_type_create>
    1554:	ldr	r1, [fp, #-12]
    1558:	ldr	r2, [fp, #-24]	; 0xffffffe8
    155c:	ldr	r2, [r2, #96]	; 0x60
    1560:	mov	r3, #2
    1564:	add	r2, r3, r2, lsl #1
    1568:	uxth	r2, r2
    156c:	str	r0, [sp, #76]	; 0x4c
    1570:	mov	r0, r1
    1574:	mov	r1, r2
    1578:	bl	1bf4 <reflection_Field_offset_add>
    157c:	ldr	r1, [fp, #-12]
    1580:	ldr	r2, [fp, #-24]	; 0xffffffe8
    1584:	ldr	r2, [r2, #96]	; 0x60
    1588:	sub	r2, r2, #1
    158c:	str	r0, [sp, #72]	; 0x48
    1590:	mov	r0, r1
    1594:	uxth	r1, r2
    1598:	bl	1c74 <reflection_Field_id_add>
    159c:	ldr	r1, [fp, #-12]
    15a0:	str	r0, [sp, #68]	; 0x44
    15a4:	mov	r0, r1
    15a8:	ldrb	r1, [fp, #-26]	; 0xffffffe6
    15ac:	bl	1cf8 <reflection_Field_deprecated_add>
    15b0:	ldr	r1, [fp, #-12]
    15b4:	str	r0, [sp, #64]	; 0x40
    15b8:	mov	r0, r1
    15bc:	bl	1d78 <reflection_Field_vec_push_end>
    15c0:	ldr	r0, [fp, #-12]
    15c4:	bl	1ae0 <reflection_Field_vec_push_start>
    15c8:	ldr	r1, [fp, #-12]
    15cc:	ldr	r2, [fp, #-24]	; 0xffffffe8
    15d0:	ldr	r2, [r2, #4]
    15d4:	ldr	r3, [r2]
    15d8:	ldr	r2, [r2, #4]
    15dc:	str	r0, [sp, #60]	; 0x3c
    15e0:	mov	r0, r1
    15e4:	mov	r1, r3
    15e8:	bl	1db8 <reflection_Field_name_create>
    15ec:	ldr	r1, [fp, #-12]
    15f0:	ldr	r2, [fp, #-24]	; 0xffffffe8
    15f4:	ldr	r3, [r2, #16]
    15f8:	ldr	ip, [r2, #20]
    15fc:	ldr	lr, [r2, #24]
    1600:	ldr	r2, [r2, #28]
    1604:	mov	r4, sp
    1608:	str	r2, [r4, #4]
    160c:	str	lr, [r4]
    1610:	str	r0, [sp, #56]	; 0x38
    1614:	mov	r0, r1
    1618:	mov	r2, r3
    161c:	mov	r3, ip
    1620:	str	r1, [sp, #52]	; 0x34
    1624:	bl	1e7c <export_type>
    1628:	ldr	r1, [sp, #52]	; 0x34
    162c:	str	r0, [sp, #48]	; 0x30
    1630:	mov	r0, r1
    1634:	ldr	r1, [sp, #48]	; 0x30
    1638:	bl	1e10 <reflection_Field_type_add>
    163c:	ldr	r1, [fp, #-16]
    1640:	ldrh	r1, [r1, #8]
    1644:	cmp	r1, #0
    1648:	str	r1, [sp, #44]	; 0x2c
    164c:	beq	1664 <export_fields+0x28c>
    1650:	b	1654 <export_fields+0x27c>
    1654:	ldr	r0, [sp, #44]	; 0x2c
    1658:	cmp	r0, #1
    165c:	beq	178c <export_fields+0x3b4>
    1660:	b	17a4 <export_fields+0x3cc>
    1664:	ldr	r0, [fp, #-24]	; 0xffffffe8
    1668:	ldrh	r0, [r0, #56]	; 0x38
    166c:	sub	r0, r0, #3
    1670:	cmp	r0, #3
    1674:	str	r0, [sp, #40]	; 0x28
    1678:	bhi	16f0 <export_fields+0x318>
    167c:	add	r0, pc, #8
    1680:	ldr	r1, [sp, #40]	; 0x28
    1684:	ldr	r0, [r0, r1, lsl #2]
    1688:	mov	pc, r0
    168c:	.word	0x000016e4
    1690:	.word	0x000016b4
    1694:	.word	0x0000169c
    1698:	.word	0x000016cc
    169c:	ldr	r0, [fp, #-24]	; 0xffffffe8
    16a0:	ldr	r1, [r0, #48]	; 0x30
    16a4:	ldr	r0, [r0, #52]	; 0x34
    16a8:	str	r0, [fp, #-36]	; 0xffffffdc
    16ac:	str	r1, [fp, #-40]	; 0xffffffd8
    16b0:	b	16f0 <export_fields+0x318>
    16b4:	ldr	r0, [fp, #-24]	; 0xffffffe8
    16b8:	ldr	r1, [r0, #48]	; 0x30
    16bc:	ldr	r0, [r0, #52]	; 0x34
    16c0:	str	r0, [fp, #-36]	; 0xffffffdc
    16c4:	str	r1, [fp, #-40]	; 0xffffffd8
    16c8:	b	16f0 <export_fields+0x318>
    16cc:	ldr	r0, [fp, #-24]	; 0xffffffe8
    16d0:	ldrb	r0, [r0, #48]	; 0x30
    16d4:	mov	r1, #0
    16d8:	str	r1, [fp, #-36]	; 0xffffffdc
    16dc:	str	r0, [fp, #-40]	; 0xffffffd8
    16e0:	b	16f0 <export_fields+0x318>
    16e4:	ldr	r0, [fp, #-24]	; 0xffffffe8
    16e8:	vldr	d16, [r0, #48]	; 0x30
    16ec:	vstr	d16, [fp, #-48]	; 0xffffffd0
    16f0:	ldr	r0, [fp, #-12]
    16f4:	ldr	r2, [fp, #-40]	; 0xffffffd8
    16f8:	ldr	r3, [fp, #-36]	; 0xffffffdc
    16fc:	bl	2180 <reflection_Field_default_integer_add>
    1700:	ldr	r1, [fp, #-12]
    1704:	vldr	d0, [fp, #-48]	; 0xffffffd0
    1708:	str	r0, [sp, #36]	; 0x24
    170c:	mov	r0, r1
    1710:	bl	2214 <reflection_Field_default_real_add>
    1714:	ldr	r1, [fp, #-12]
    1718:	ldr	r2, [fp, #-24]	; 0xffffffe8
    171c:	ldrh	r2, [r2, #96]	; 0x60
    1720:	str	r0, [sp, #32]
    1724:	mov	r0, r1
    1728:	mov	r1, r2
    172c:	bl	1c74 <reflection_Field_id_add>
    1730:	ldr	r1, [fp, #-12]
    1734:	ldr	r2, [fp, #-24]	; 0xffffffe8
    1738:	ldr	r2, [r2, #96]	; 0x60
    173c:	add	r2, r2, #2
    1740:	uxth	r2, r2
    1744:	mov	r3, r2
    1748:	lsl	r2, r2, #1
    174c:	str	r0, [sp, #28]
    1750:	mov	r0, r1
    1754:	uxth	r1, r2
    1758:	str	r3, [sp, #24]
    175c:	bl	1bf4 <reflection_Field_offset_add>
    1760:	ldr	r1, [fp, #-12]
    1764:	str	r0, [sp, #20]
    1768:	mov	r0, r1
    176c:	ldrb	r1, [fp, #-25]	; 0xffffffe7
    1770:	bl	2298 <reflection_Field_key_add>
    1774:	ldr	r1, [fp, #-12]
    1778:	str	r0, [sp, #16]
    177c:	mov	r0, r1
    1780:	ldrb	r1, [fp, #-27]	; 0xffffffe5
    1784:	bl	2318 <reflection_Field_required_add>
    1788:	b	17a8 <export_fields+0x3d0>
    178c:	ldr	r0, [fp, #-12]
    1790:	ldr	r1, [fp, #-24]	; 0xffffffe8
    1794:	ldrh	r1, [r1, #80]	; 0x50
    1798:	uxth	r1, r1
    179c:	bl	1bf4 <reflection_Field_offset_add>
    17a0:	b	17a8 <export_fields+0x3d0>
    17a4:	b	17a8 <export_fields+0x3d0>
    17a8:	ldr	r0, [fp, #-12]
    17ac:	ldrb	r1, [fp, #-26]	; 0xffffffe6
    17b0:	bl	1cf8 <reflection_Field_deprecated_add>
    17b4:	ldr	r1, [fp, #-12]
    17b8:	str	r0, [sp, #12]
    17bc:	mov	r0, r1
    17c0:	bl	1d78 <reflection_Field_vec_push_end>
    17c4:	ldrb	r1, [fp, #-25]	; 0xffffffe7
    17c8:	ldrb	r2, [fp, #-28]	; 0xffffffe4
    17cc:	orr	r1, r2, r1
    17d0:	strb	r1, [fp, #-28]	; 0xffffffe4
    17d4:	ldr	r0, [fp, #-20]	; 0xffffffec
    17d8:	ldr	r0, [r0]
    17dc:	str	r0, [fp, #-20]	; 0xffffffec
    17e0:	b	1400 <export_fields+0x28>
    17e4:	sub	sp, fp, #8
    17e8:	pop	{r4, sl, fp, pc}
    17ec:	nop	{0}
	...

000017f8 <reflection_Object_fields_end>:
    17f8:	push	{fp, lr}
    17fc:	mov	fp, sp
    1800:	sub	sp, sp, #16
    1804:	str	r0, [fp, #-4]
    1808:	ldr	r0, [fp, #-4]
    180c:	ldr	r1, [fp, #-4]
    1810:	str	r0, [sp, #8]
    1814:	mov	r0, r1
    1818:	bl	0 <flatcc_builder_end_offset_vector>
    181c:	ldr	r1, [sp, #8]
    1820:	str	r0, [sp, #4]
    1824:	mov	r0, r1
    1828:	ldr	r1, [sp, #4]
    182c:	bl	291c <reflection_Object_fields_add>
    1830:	mov	sp, fp
    1834:	pop	{fp, pc}

00001838 <reflection_Object_bytesize_add>:
    1838:	push	{fp, lr}
    183c:	mov	fp, sp
    1840:	sub	sp, sp, #24
    1844:	str	r0, [fp, #-8]
    1848:	str	r1, [sp, #12]
    184c:	ldr	r0, [sp, #12]
    1850:	cmp	r0, #0
    1854:	bne	1864 <reflection_Object_bytesize_add+0x2c>
    1858:	movw	r0, #0
    185c:	str	r0, [fp, #-4]
    1860:	b	18b0 <reflection_Object_bytesize_add+0x78>
    1864:	ldr	r0, [fp, #-8]
    1868:	movw	r1, #4
    186c:	str	r1, [sp, #4]
    1870:	ldr	r2, [sp, #4]
    1874:	movw	r3, #4
    1878:	uxth	r3, r3
    187c:	bl	0 <flatcc_builder_table_add>
    1880:	str	r0, [sp, #8]
    1884:	movw	r1, #0
    1888:	cmp	r0, r1
    188c:	bne	189c <reflection_Object_bytesize_add+0x64>
    1890:	mvn	r0, #0
    1894:	str	r0, [fp, #-4]
    1898:	b	18b0 <reflection_Object_bytesize_add+0x78>
    189c:	ldr	r0, [sp, #8]
    18a0:	ldr	r1, [sp, #12]
    18a4:	bl	26bc <flatbuffers_int32_assign_to_pe>
    18a8:	movw	r1, #0
    18ac:	str	r1, [fp, #-4]
    18b0:	ldr	r0, [fp, #-4]
    18b4:	mov	sp, fp
    18b8:	pop	{fp, pc}

000018bc <reflection_Object_is_struct_add>:
    18bc:	push	{fp, lr}
    18c0:	mov	fp, sp
    18c4:	sub	sp, sp, #16
    18c8:	str	r0, [sp, #8]
    18cc:	strb	r1, [sp, #7]
    18d0:	ldrb	r0, [sp, #7]
    18d4:	cmp	r0, #0
    18d8:	bne	18e8 <reflection_Object_is_struct_add+0x2c>
    18dc:	movw	r0, #0
    18e0:	str	r0, [fp, #-4]
    18e4:	b	1930 <reflection_Object_is_struct_add+0x74>
    18e8:	ldr	r0, [sp, #8]
    18ec:	movw	r1, #2
    18f0:	movw	r2, #1
    18f4:	movw	r3, #1
    18f8:	uxth	r3, r3
    18fc:	bl	0 <flatcc_builder_table_add>
    1900:	str	r0, [sp]
    1904:	movw	r1, #0
    1908:	cmp	r0, r1
    190c:	bne	191c <reflection_Object_is_struct_add+0x60>
    1910:	mvn	r0, #0
    1914:	str	r0, [fp, #-4]
    1918:	b	1930 <reflection_Object_is_struct_add+0x74>
    191c:	ldr	r0, [sp]
    1920:	ldrb	r1, [sp, #7]
    1924:	bl	2788 <flatbuffers_bool_assign_to_pe>
    1928:	movw	r1, #0
    192c:	str	r1, [fp, #-4]
    1930:	ldr	r0, [fp, #-4]
    1934:	mov	sp, fp
    1938:	pop	{fp, pc}

0000193c <reflection_Object_minalign_add>:
    193c:	push	{fp, lr}
    1940:	mov	fp, sp
    1944:	sub	sp, sp, #16
    1948:	str	r0, [sp, #8]
    194c:	str	r1, [sp, #4]
    1950:	ldr	r0, [sp, #4]
    1954:	cmp	r0, #0
    1958:	bne	1968 <reflection_Object_minalign_add+0x2c>
    195c:	movw	r0, #0
    1960:	str	r0, [fp, #-4]
    1964:	b	19b0 <reflection_Object_minalign_add+0x74>
    1968:	ldr	r0, [sp, #8]
    196c:	movw	r1, #3
    1970:	movw	r2, #4
    1974:	movw	r3, #4
    1978:	uxth	r3, r3
    197c:	bl	0 <flatcc_builder_table_add>
    1980:	str	r0, [sp]
    1984:	movw	r1, #0
    1988:	cmp	r0, r1
    198c:	bne	199c <reflection_Object_minalign_add+0x60>
    1990:	mvn	r0, #0
    1994:	str	r0, [fp, #-4]
    1998:	b	19b0 <reflection_Object_minalign_add+0x74>
    199c:	ldr	r0, [sp]
    19a0:	ldr	r1, [sp, #4]
    19a4:	bl	26bc <flatbuffers_int32_assign_to_pe>
    19a8:	movw	r1, #0
    19ac:	str	r1, [fp, #-4]
    19b0:	ldr	r0, [fp, #-4]
    19b4:	mov	sp, fp
    19b8:	pop	{fp, pc}

000019bc <reflection_Object_end>:
    19bc:	push	{fp, lr}
    19c0:	mov	fp, sp
    19c4:	sub	sp, sp, #8
    19c8:	str	r0, [sp, #4]
    19cc:	ldr	r0, [sp, #4]
    19d0:	movw	r1, #0
    19d4:	movt	r1, #0
    19d8:	movw	r2, #2
    19dc:	bl	0 <flatcc_builder_check_required>
    19e0:	cmp	r0, #0
    19e4:	beq	19ec <reflection_Object_end+0x30>
    19e8:	b	1a0c <reflection_Object_end+0x50>
    19ec:	movw	r0, #0
    19f0:	movt	r0, #0
    19f4:	movw	r1, #0
    19f8:	movt	r1, #0
    19fc:	movw	r2, #31
    1a00:	movw	r3, #0
    1a04:	movt	r3, #0
    1a08:	bl	0 <__assert_fail>
    1a0c:	ldr	r0, [sp, #4]
    1a10:	bl	0 <flatcc_builder_end_table>
    1a14:	mov	sp, fp
    1a18:	pop	{fp, pc}

00001a1c <reflection_Schema_objects_create>:
    1a1c:	push	{fp, lr}
    1a20:	mov	fp, sp
    1a24:	sub	sp, sp, #24
    1a28:	str	r0, [fp, #-4]
    1a2c:	str	r1, [fp, #-8]
    1a30:	str	r2, [sp, #12]
    1a34:	ldr	r0, [fp, #-4]
    1a38:	ldr	r1, [fp, #-4]
    1a3c:	ldr	r2, [fp, #-8]
    1a40:	ldr	r3, [sp, #12]
    1a44:	str	r0, [sp, #8]
    1a48:	mov	r0, r1
    1a4c:	mov	r1, r2
    1a50:	mov	r2, r3
    1a54:	bl	0 <flatcc_builder_create_offset_vector>
    1a58:	ldr	r1, [sp, #8]
    1a5c:	str	r0, [sp, #4]
    1a60:	mov	r0, r1
    1a64:	ldr	r1, [sp, #4]
    1a68:	bl	2988 <reflection_Schema_objects_add>
    1a6c:	mov	sp, fp
    1a70:	pop	{fp, pc}

00001a74 <reflection_Object_name_add>:
    1a74:	push	{fp, lr}
    1a78:	mov	fp, sp
    1a7c:	sub	sp, sp, #16
    1a80:	str	r0, [fp, #-4]
    1a84:	str	r1, [sp, #8]
    1a88:	ldr	r0, [sp, #8]
    1a8c:	cmp	r0, #0
    1a90:	beq	1ac8 <reflection_Object_name_add+0x54>
    1a94:	ldr	r0, [fp, #-4]
    1a98:	movw	r1, #0
    1a9c:	bl	0 <flatcc_builder_table_add_offset>
    1aa0:	str	r0, [sp, #4]
    1aa4:	movw	r1, #0
    1aa8:	cmp	r0, r1
    1aac:	beq	1ac8 <reflection_Object_name_add+0x54>
    1ab0:	ldr	r0, [sp, #8]
    1ab4:	ldr	r1, [sp, #4]
    1ab8:	str	r0, [r1]
    1abc:	movw	r0, #0
    1ac0:	str	r0, [sp]
    1ac4:	b	1ad4 <reflection_Object_name_add+0x60>
    1ac8:	mvn	r0, #0
    1acc:	str	r0, [sp]
    1ad0:	b	1ad4 <reflection_Object_name_add+0x60>
    1ad4:	ldr	r0, [sp]
    1ad8:	mov	sp, fp
    1adc:	pop	{fp, pc}

00001ae0 <reflection_Field_vec_push_start>:
    1ae0:	push	{fp, lr}
    1ae4:	mov	fp, sp
    1ae8:	sub	sp, sp, #8
    1aec:	str	r0, [sp, #4]
    1af0:	ldr	r0, [sp, #4]
    1af4:	bl	2398 <reflection_Field_start>
    1af8:	mov	sp, fp
    1afc:	pop	{fp, pc}

00001b00 <reflection_Field_name_start>:
    1b00:	push	{fp, lr}
    1b04:	mov	fp, sp
    1b08:	sub	sp, sp, #8
    1b0c:	str	r0, [sp, #4]
    1b10:	ldr	r0, [sp, #4]
    1b14:	bl	0 <flatcc_builder_start_string>
    1b18:	mov	sp, fp
    1b1c:	pop	{fp, pc}

00001b20 <reflection_Field_name_append>:
    1b20:	push	{fp, lr}
    1b24:	mov	fp, sp
    1b28:	sub	sp, sp, #16
    1b2c:	str	r0, [fp, #-4]
    1b30:	str	r1, [sp, #8]
    1b34:	str	r2, [sp, #4]
    1b38:	ldr	r0, [fp, #-4]
    1b3c:	ldr	r1, [sp, #8]
    1b40:	ldr	r2, [sp, #4]
    1b44:	bl	0 <flatcc_builder_append_string>
    1b48:	mov	sp, fp
    1b4c:	pop	{fp, pc}

00001b50 <reflection_Field_name_end>:
    1b50:	push	{fp, lr}
    1b54:	mov	fp, sp
    1b58:	sub	sp, sp, #16
    1b5c:	str	r0, [fp, #-4]
    1b60:	ldr	r0, [fp, #-4]
    1b64:	ldr	r1, [fp, #-4]
    1b68:	str	r0, [sp, #8]
    1b6c:	mov	r0, r1
    1b70:	bl	0 <flatcc_builder_end_string>
    1b74:	ldr	r1, [sp, #8]
    1b78:	str	r0, [sp, #4]
    1b7c:	mov	r0, r1
    1b80:	ldr	r1, [sp, #4]
    1b84:	bl	23bc <reflection_Field_name_add>
    1b88:	mov	sp, fp
    1b8c:	pop	{fp, pc}

00001b90 <reflection_Field_type_create>:
    1b90:	push	{fp, lr}
    1b94:	mov	fp, sp
    1b98:	sub	sp, sp, #24
    1b9c:	str	r0, [fp, #-4]
    1ba0:	strb	r1, [fp, #-5]
    1ba4:	strb	r2, [fp, #-6]
    1ba8:	str	r3, [sp, #12]
    1bac:	ldr	r0, [fp, #-4]
    1bb0:	ldr	r1, [fp, #-4]
    1bb4:	ldrb	r2, [fp, #-5]
    1bb8:	ldrb	r3, [fp, #-6]
    1bbc:	ldr	ip, [sp, #12]
    1bc0:	str	r0, [sp, #8]
    1bc4:	mov	r0, r1
    1bc8:	sxtb	r1, r2
    1bcc:	sxtb	r2, r3
    1bd0:	mov	r3, ip
    1bd4:	bl	2428 <reflection_Type_create>
    1bd8:	ldr	r1, [sp, #8]
    1bdc:	str	r0, [sp, #4]
    1be0:	mov	r0, r1
    1be4:	ldr	r1, [sp, #4]
    1be8:	bl	1e10 <reflection_Field_type_add>
    1bec:	mov	sp, fp
    1bf0:	pop	{fp, pc}

00001bf4 <reflection_Field_offset_add>:
    1bf4:	push	{fp, lr}
    1bf8:	mov	fp, sp
    1bfc:	sub	sp, sp, #16
    1c00:	str	r0, [sp, #8]
    1c04:	strh	r1, [sp, #6]
    1c08:	ldrh	r0, [sp, #6]
    1c0c:	cmp	r0, #0
    1c10:	bne	1c20 <reflection_Field_offset_add+0x2c>
    1c14:	movw	r0, #0
    1c18:	str	r0, [fp, #-4]
    1c1c:	b	1c68 <reflection_Field_offset_add+0x74>
    1c20:	ldr	r0, [sp, #8]
    1c24:	movw	r1, #3
    1c28:	movw	r2, #2
    1c2c:	movw	r3, #2
    1c30:	uxth	r3, r3
    1c34:	bl	0 <flatcc_builder_table_add>
    1c38:	str	r0, [sp]
    1c3c:	movw	r1, #0
    1c40:	cmp	r0, r1
    1c44:	bne	1c54 <reflection_Field_offset_add+0x60>
    1c48:	mvn	r0, #0
    1c4c:	str	r0, [fp, #-4]
    1c50:	b	1c68 <reflection_Field_offset_add+0x74>
    1c54:	ldr	r0, [sp]
    1c58:	ldrh	r1, [sp, #6]
    1c5c:	bl	2744 <flatbuffers_uint16_assign_to_pe>
    1c60:	movw	r1, #0
    1c64:	str	r1, [fp, #-4]
    1c68:	ldr	r0, [fp, #-4]
    1c6c:	mov	sp, fp
    1c70:	pop	{fp, pc}

00001c74 <reflection_Field_id_add>:
    1c74:	push	{fp, lr}
    1c78:	mov	fp, sp
    1c7c:	sub	sp, sp, #24
    1c80:	str	r0, [fp, #-8]
    1c84:	strh	r1, [fp, #-10]
    1c88:	ldrh	r0, [fp, #-10]
    1c8c:	cmp	r0, #0
    1c90:	bne	1ca0 <reflection_Field_id_add+0x2c>
    1c94:	movw	r0, #0
    1c98:	str	r0, [fp, #-4]
    1c9c:	b	1cec <reflection_Field_id_add+0x78>
    1ca0:	ldr	r0, [fp, #-8]
    1ca4:	movw	r1, #2
    1ca8:	str	r1, [sp, #4]
    1cac:	ldr	r2, [sp, #4]
    1cb0:	movw	r3, #2
    1cb4:	uxth	r3, r3
    1cb8:	bl	0 <flatcc_builder_table_add>
    1cbc:	str	r0, [sp, #8]
    1cc0:	movw	r1, #0
    1cc4:	cmp	r0, r1
    1cc8:	bne	1cd8 <reflection_Field_id_add+0x64>
    1ccc:	mvn	r0, #0
    1cd0:	str	r0, [fp, #-4]
    1cd4:	b	1cec <reflection_Field_id_add+0x78>
    1cd8:	ldr	r0, [sp, #8]
    1cdc:	ldrh	r1, [fp, #-10]
    1ce0:	bl	2744 <flatbuffers_uint16_assign_to_pe>
    1ce4:	movw	r1, #0
    1ce8:	str	r1, [fp, #-4]
    1cec:	ldr	r0, [fp, #-4]
    1cf0:	mov	sp, fp
    1cf4:	pop	{fp, pc}

00001cf8 <reflection_Field_deprecated_add>:
    1cf8:	push	{fp, lr}
    1cfc:	mov	fp, sp
    1d00:	sub	sp, sp, #16
    1d04:	str	r0, [sp, #8]
    1d08:	strb	r1, [sp, #7]
    1d0c:	ldrb	r0, [sp, #7]
    1d10:	cmp	r0, #0
    1d14:	bne	1d24 <reflection_Field_deprecated_add+0x2c>
    1d18:	movw	r0, #0
    1d1c:	str	r0, [fp, #-4]
    1d20:	b	1d6c <reflection_Field_deprecated_add+0x74>
    1d24:	ldr	r0, [sp, #8]
    1d28:	movw	r1, #6
    1d2c:	movw	r2, #1
    1d30:	movw	r3, #1
    1d34:	uxth	r3, r3
    1d38:	bl	0 <flatcc_builder_table_add>
    1d3c:	str	r0, [sp]
    1d40:	movw	r1, #0
    1d44:	cmp	r0, r1
    1d48:	bne	1d58 <reflection_Field_deprecated_add+0x60>
    1d4c:	mvn	r0, #0
    1d50:	str	r0, [fp, #-4]
    1d54:	b	1d6c <reflection_Field_deprecated_add+0x74>
    1d58:	ldr	r0, [sp]
    1d5c:	ldrb	r1, [sp, #7]
    1d60:	bl	2788 <flatbuffers_bool_assign_to_pe>
    1d64:	movw	r1, #0
    1d68:	str	r1, [fp, #-4]
    1d6c:	ldr	r0, [fp, #-4]
    1d70:	mov	sp, fp
    1d74:	pop	{fp, pc}

00001d78 <reflection_Field_vec_push_end>:
    1d78:	push	{fp, lr}
    1d7c:	mov	fp, sp
    1d80:	sub	sp, sp, #16
    1d84:	str	r0, [fp, #-4]
    1d88:	ldr	r0, [fp, #-4]
    1d8c:	ldr	r1, [fp, #-4]
    1d90:	str	r0, [sp, #8]
    1d94:	mov	r0, r1
    1d98:	bl	2818 <reflection_Field_end>
    1d9c:	ldr	r1, [sp, #8]
    1da0:	str	r0, [sp, #4]
    1da4:	mov	r0, r1
    1da8:	ldr	r1, [sp, #4]
    1dac:	bl	27cc <reflection_Field_vec_push>
    1db0:	mov	sp, fp
    1db4:	pop	{fp, pc}

00001db8 <reflection_Field_name_create>:
    1db8:	push	{fp, lr}
    1dbc:	mov	fp, sp
    1dc0:	sub	sp, sp, #24
    1dc4:	str	r0, [fp, #-4]
    1dc8:	str	r1, [fp, #-8]
    1dcc:	str	r2, [sp, #12]
    1dd0:	ldr	r0, [fp, #-4]
    1dd4:	ldr	r1, [fp, #-4]
    1dd8:	ldr	r2, [fp, #-8]
    1ddc:	ldr	r3, [sp, #12]
    1de0:	str	r0, [sp, #8]
    1de4:	mov	r0, r1
    1de8:	mov	r1, r2
    1dec:	mov	r2, r3
    1df0:	bl	0 <flatcc_builder_create_string>
    1df4:	ldr	r1, [sp, #8]
    1df8:	str	r0, [sp, #4]
    1dfc:	mov	r0, r1
    1e00:	ldr	r1, [sp, #4]
    1e04:	bl	23bc <reflection_Field_name_add>
    1e08:	mov	sp, fp
    1e0c:	pop	{fp, pc}

00001e10 <reflection_Field_type_add>:
    1e10:	push	{fp, lr}
    1e14:	mov	fp, sp
    1e18:	sub	sp, sp, #16
    1e1c:	str	r0, [fp, #-4]
    1e20:	str	r1, [sp, #8]
    1e24:	ldr	r0, [sp, #8]
    1e28:	cmp	r0, #0
    1e2c:	beq	1e64 <reflection_Field_type_add+0x54>
    1e30:	ldr	r0, [fp, #-4]
    1e34:	movw	r1, #1
    1e38:	bl	0 <flatcc_builder_table_add_offset>
    1e3c:	str	r0, [sp, #4]
    1e40:	movw	r1, #0
    1e44:	cmp	r0, r1
    1e48:	beq	1e64 <reflection_Field_type_add+0x54>
    1e4c:	ldr	r0, [sp, #8]
    1e50:	ldr	r1, [sp, #4]
    1e54:	str	r0, [r1]
    1e58:	movw	r0, #0
    1e5c:	str	r0, [sp]
    1e60:	b	1e70 <reflection_Field_type_add+0x60>
    1e64:	mvn	r0, #0
    1e68:	str	r0, [sp]
    1e6c:	b	1e70 <reflection_Field_type_add+0x60>
    1e70:	ldr	r0, [sp]
    1e74:	mov	sp, fp
    1e78:	pop	{fp, pc}

00001e7c <export_type>:
    1e7c:	push	{fp, lr}
    1e80:	mov	fp, sp
    1e84:	sub	sp, sp, #48	; 0x30
    1e88:	ldr	r1, [fp, #12]
    1e8c:	ldr	ip, [fp, #8]
    1e90:	str	r2, [fp, #-16]
    1e94:	str	r3, [fp, #-12]
    1e98:	str	ip, [fp, #-8]
    1e9c:	str	r1, [fp, #-4]
    1ea0:	str	r0, [fp, #-20]	; 0xffffffec
    1ea4:	mov	r0, #0
    1ea8:	str	r0, [sp, #24]
    1eac:	mvn	r1, #0
    1eb0:	str	r1, [sp, #20]
    1eb4:	strb	r0, [sp, #19]
    1eb8:	strb	r0, [sp, #18]
    1ebc:	strb	r0, [sp, #17]
    1ec0:	ldrh	r0, [fp, #-8]
    1ec4:	sub	r0, r0, #2
    1ec8:	cmp	r0, #13
    1ecc:	str	r0, [sp, #12]
    1ed0:	bhi	203c <export_type+0x1c0>
    1ed4:	add	r0, pc, #8
    1ed8:	ldr	r1, [sp, #12]
    1edc:	ldr	r0, [r0, r1, lsl #2]
    1ee0:	mov	pc, r0
    1ee4:	.word	0x00001fb8
    1ee8:	.word	0x0000203c
    1eec:	.word	0x0000203c
    1ef0:	.word	0x0000203c
    1ef4:	.word	0x0000203c
    1ef8:	.word	0x00001f28
    1efc:	.word	0x00001f1c
    1f00:	.word	0x00001f3c
    1f04:	.word	0x0000203c
    1f08:	.word	0x0000203c
    1f0c:	.word	0x0000203c
    1f10:	.word	0x0000203c
    1f14:	.word	0x00001fc4
    1f18:	.word	0x00001f50
    1f1c:	ldr	r0, [fp, #-16]
    1f20:	str	r0, [sp, #24]
    1f24:	b	2040 <export_type+0x1c4>
    1f28:	ldr	r0, [fp, #-16]
    1f2c:	str	r0, [sp, #24]
    1f30:	movw	r0, #14
    1f34:	strb	r0, [sp, #19]
    1f38:	b	2040 <export_type+0x1c4>
    1f3c:	movw	r0, #13
    1f40:	strb	r0, [sp, #18]
    1f44:	movw	r0, #14
    1f48:	strb	r0, [sp, #19]
    1f4c:	b	2040 <export_type+0x1c4>
    1f50:	ldr	r0, [fp, #-16]
    1f54:	ldr	r0, [r0, #124]	; 0x7c
    1f58:	str	r0, [sp, #20]
    1f5c:	ldr	r0, [fp, #-16]
    1f60:	ldrh	r0, [r0, #8]
    1f64:	cmp	r0, #2
    1f68:	str	r0, [sp, #8]
    1f6c:	bcc	1f9c <export_type+0x120>
    1f70:	b	1f74 <export_type+0xf8>
    1f74:	ldr	r0, [sp, #8]
    1f78:	cmp	r0, #3
    1f7c:	bne	1fb0 <export_type+0x134>
    1f80:	b	1f84 <export_type+0x108>
    1f84:	ldr	r0, [fp, #-16]
    1f88:	ldr	r0, [r0, #40]	; 0x28
    1f8c:	str	r0, [sp, #24]
    1f90:	movw	r0, #14
    1f94:	strb	r0, [sp, #19]
    1f98:	b	1fb4 <export_type+0x138>
    1f9c:	movw	r0, #14
    1fa0:	strb	r0, [sp, #19]
    1fa4:	movw	r0, #15
    1fa8:	strb	r0, [sp, #18]
    1fac:	b	1fb4 <export_type+0x138>
    1fb0:	b	1fb4 <export_type+0x138>
    1fb4:	b	2040 <export_type+0x1c4>
    1fb8:	movw	r0, #13
    1fbc:	strb	r0, [sp, #19]
    1fc0:	b	2040 <export_type+0x1c4>
    1fc4:	ldr	r0, [fp, #-16]
    1fc8:	ldr	r0, [r0, #124]	; 0x7c
    1fcc:	str	r0, [sp, #20]
    1fd0:	ldr	r0, [fp, #-16]
    1fd4:	ldrh	r0, [r0, #8]
    1fd8:	cmp	r0, #2
    1fdc:	str	r0, [sp, #4]
    1fe0:	bcc	2018 <export_type+0x19c>
    1fe4:	b	1fe8 <export_type+0x16c>
    1fe8:	ldr	r0, [sp, #4]
    1fec:	cmp	r0, #3
    1ff0:	beq	2008 <export_type+0x18c>
    1ff4:	b	1ff8 <export_type+0x17c>
    1ff8:	ldr	r0, [sp, #4]
    1ffc:	cmp	r0, #4
    2000:	beq	2024 <export_type+0x1a8>
    2004:	b	2030 <export_type+0x1b4>
    2008:	ldr	r0, [fp, #-16]
    200c:	ldr	r0, [r0, #40]	; 0x28
    2010:	str	r0, [sp, #24]
    2014:	b	2038 <export_type+0x1bc>
    2018:	movw	r0, #15
    201c:	strb	r0, [sp, #19]
    2020:	b	2038 <export_type+0x1bc>
    2024:	movw	r0, #16
    2028:	strb	r0, [sp, #19]
    202c:	b	2038 <export_type+0x1bc>
    2030:	mvn	r0, #0
    2034:	str	r0, [sp, #20]
    2038:	b	2040 <export_type+0x1c4>
    203c:	b	2040 <export_type+0x1c4>
    2040:	ldr	r0, [sp, #24]
    2044:	cmp	r0, #11
    2048:	str	r0, [sp]
    204c:	bhi	2118 <export_type+0x29c>
    2050:	add	r0, pc, #8
    2054:	ldr	r1, [sp]
    2058:	ldr	r0, [r0, r1, lsl #2]
    205c:	mov	pc, r0
    2060:	.word	0x00002090
    2064:	.word	0x00002094
    2068:	.word	0x000020a0
    206c:	.word	0x000020ac
    2070:	.word	0x000020b8
    2074:	.word	0x000020c4
    2078:	.word	0x000020d0
    207c:	.word	0x000020dc
    2080:	.word	0x000020e8
    2084:	.word	0x000020f4
    2088:	.word	0x00002100
    208c:	.word	0x0000210c
    2090:	b	211c <export_type+0x2a0>
    2094:	movw	r0, #10
    2098:	strb	r0, [sp, #17]
    209c:	b	211c <export_type+0x2a0>
    20a0:	movw	r0, #8
    20a4:	strb	r0, [sp, #17]
    20a8:	b	211c <export_type+0x2a0>
    20ac:	movw	r0, #6
    20b0:	strb	r0, [sp, #17]
    20b4:	b	211c <export_type+0x2a0>
    20b8:	movw	r0, #4
    20bc:	strb	r0, [sp, #17]
    20c0:	b	211c <export_type+0x2a0>
    20c4:	movw	r0, #2
    20c8:	strb	r0, [sp, #17]
    20cc:	b	211c <export_type+0x2a0>
    20d0:	movw	r0, #9
    20d4:	strb	r0, [sp, #17]
    20d8:	b	211c <export_type+0x2a0>
    20dc:	movw	r0, #7
    20e0:	strb	r0, [sp, #17]
    20e4:	b	211c <export_type+0x2a0>
    20e8:	movw	r0, #5
    20ec:	strb	r0, [sp, #17]
    20f0:	b	211c <export_type+0x2a0>
    20f4:	movw	r0, #3
    20f8:	strb	r0, [sp, #17]
    20fc:	b	211c <export_type+0x2a0>
    2100:	movw	r0, #12
    2104:	strb	r0, [sp, #17]
    2108:	b	211c <export_type+0x2a0>
    210c:	movw	r0, #11
    2110:	strb	r0, [sp, #17]
    2114:	b	211c <export_type+0x2a0>
    2118:	b	211c <export_type+0x2a0>
    211c:	ldrsb	r0, [sp, #19]
    2120:	cmp	r0, #0
    2124:	bne	2134 <export_type+0x2b8>
    2128:	ldrb	r0, [sp, #17]
    212c:	strb	r0, [sp, #19]
    2130:	b	215c <export_type+0x2e0>
    2134:	ldrsb	r0, [sp, #19]
    2138:	cmp	r0, #14
    213c:	bne	2158 <export_type+0x2dc>
    2140:	ldrsb	r0, [sp, #18]
    2144:	cmp	r0, #0
    2148:	bne	2154 <export_type+0x2d8>
    214c:	ldrb	r0, [sp, #17]
    2150:	strb	r0, [sp, #18]
    2154:	b	2158 <export_type+0x2dc>
    2158:	b	215c <export_type+0x2e0>
    215c:	ldr	r0, [fp, #-20]	; 0xffffffec
    2160:	ldrb	r1, [sp, #19]
    2164:	ldrb	r2, [sp, #18]
    2168:	ldr	r3, [sp, #20]
    216c:	sxtb	r1, r1
    2170:	sxtb	r2, r2
    2174:	bl	2428 <reflection_Type_create>
    2178:	mov	sp, fp
    217c:	pop	{fp, pc}

00002180 <reflection_Field_default_integer_add>:
    2180:	push	{fp, lr}
    2184:	mov	fp, sp
    2188:	sub	sp, sp, #24
    218c:	str	r0, [fp, #-8]
    2190:	str	r3, [sp, #12]
    2194:	str	r2, [sp, #8]
    2198:	ldr	r0, [sp, #8]
    219c:	ldr	r1, [sp, #12]
    21a0:	orr	r0, r0, r1
    21a4:	cmp	r0, #0
    21a8:	bne	21bc <reflection_Field_default_integer_add+0x3c>
    21ac:	b	21b0 <reflection_Field_default_integer_add+0x30>
    21b0:	movw	r0, #0
    21b4:	str	r0, [fp, #-4]
    21b8:	b	2208 <reflection_Field_default_integer_add+0x88>
    21bc:	ldr	r0, [fp, #-8]
    21c0:	movw	r1, #4
    21c4:	movw	r2, #8
    21c8:	movw	r3, #8
    21cc:	uxth	r3, r3
    21d0:	bl	0 <flatcc_builder_table_add>
    21d4:	str	r0, [sp, #4]
    21d8:	movw	r1, #0
    21dc:	cmp	r0, r1
    21e0:	bne	21f0 <reflection_Field_default_integer_add+0x70>
    21e4:	mvn	r0, #0
    21e8:	str	r0, [fp, #-4]
    21ec:	b	2208 <reflection_Field_default_integer_add+0x88>
    21f0:	ldr	r0, [sp, #4]
    21f4:	ldr	r2, [sp, #8]
    21f8:	ldr	r3, [sp, #12]
    21fc:	bl	2878 <flatbuffers_int64_assign_to_pe>
    2200:	movw	r1, #0
    2204:	str	r1, [fp, #-4]
    2208:	ldr	r0, [fp, #-4]
    220c:	mov	sp, fp
    2210:	pop	{fp, pc}

00002214 <reflection_Field_default_real_add>:
    2214:	push	{fp, lr}
    2218:	mov	fp, sp
    221c:	sub	sp, sp, #24
    2220:	str	r0, [fp, #-8]
    2224:	vstr	d0, [sp, #8]
    2228:	vldr	d16, [sp, #8]
    222c:	vcmp.f64	d16, #0.0
    2230:	vmrs	APSR_nzcv, fpscr
    2234:	bne	2244 <reflection_Field_default_real_add+0x30>
    2238:	movw	r0, #0
    223c:	str	r0, [fp, #-4]
    2240:	b	228c <reflection_Field_default_real_add+0x78>
    2244:	ldr	r0, [fp, #-8]
    2248:	movw	r1, #5
    224c:	movw	r2, #8
    2250:	movw	r3, #8
    2254:	uxth	r3, r3
    2258:	bl	0 <flatcc_builder_table_add>
    225c:	str	r0, [sp, #4]
    2260:	movw	r1, #0
    2264:	cmp	r0, r1
    2268:	bne	2278 <reflection_Field_default_real_add+0x64>
    226c:	mvn	r0, #0
    2270:	str	r0, [fp, #-4]
    2274:	b	228c <reflection_Field_default_real_add+0x78>
    2278:	ldr	r0, [sp, #4]
    227c:	vldr	d0, [sp, #8]
    2280:	bl	28d0 <flatbuffers_double_assign_to_pe>
    2284:	movw	r1, #0
    2288:	str	r1, [fp, #-4]
    228c:	ldr	r0, [fp, #-4]
    2290:	mov	sp, fp
    2294:	pop	{fp, pc}

00002298 <reflection_Field_key_add>:
    2298:	push	{fp, lr}
    229c:	mov	fp, sp
    22a0:	sub	sp, sp, #16
    22a4:	str	r0, [sp, #8]
    22a8:	strb	r1, [sp, #7]
    22ac:	ldrb	r0, [sp, #7]
    22b0:	cmp	r0, #0
    22b4:	bne	22c4 <reflection_Field_key_add+0x2c>
    22b8:	movw	r0, #0
    22bc:	str	r0, [fp, #-4]
    22c0:	b	230c <reflection_Field_key_add+0x74>
    22c4:	ldr	r0, [sp, #8]
    22c8:	movw	r1, #8
    22cc:	movw	r2, #1
    22d0:	movw	r3, #1
    22d4:	uxth	r3, r3
    22d8:	bl	0 <flatcc_builder_table_add>
    22dc:	str	r0, [sp]
    22e0:	movw	r1, #0
    22e4:	cmp	r0, r1
    22e8:	bne	22f8 <reflection_Field_key_add+0x60>
    22ec:	mvn	r0, #0
    22f0:	str	r0, [fp, #-4]
    22f4:	b	230c <reflection_Field_key_add+0x74>
    22f8:	ldr	r0, [sp]
    22fc:	ldrb	r1, [sp, #7]
    2300:	bl	2788 <flatbuffers_bool_assign_to_pe>
    2304:	movw	r1, #0
    2308:	str	r1, [fp, #-4]
    230c:	ldr	r0, [fp, #-4]
    2310:	mov	sp, fp
    2314:	pop	{fp, pc}

00002318 <reflection_Field_required_add>:
    2318:	push	{fp, lr}
    231c:	mov	fp, sp
    2320:	sub	sp, sp, #16
    2324:	str	r0, [sp, #8]
    2328:	strb	r1, [sp, #7]
    232c:	ldrb	r0, [sp, #7]
    2330:	cmp	r0, #0
    2334:	bne	2344 <reflection_Field_required_add+0x2c>
    2338:	movw	r0, #0
    233c:	str	r0, [fp, #-4]
    2340:	b	238c <reflection_Field_required_add+0x74>
    2344:	ldr	r0, [sp, #8]
    2348:	movw	r1, #7
    234c:	movw	r2, #1
    2350:	movw	r3, #1
    2354:	uxth	r3, r3
    2358:	bl	0 <flatcc_builder_table_add>
    235c:	str	r0, [sp]
    2360:	movw	r1, #0
    2364:	cmp	r0, r1
    2368:	bne	2378 <reflection_Field_required_add+0x60>
    236c:	mvn	r0, #0
    2370:	str	r0, [fp, #-4]
    2374:	b	238c <reflection_Field_required_add+0x74>
    2378:	ldr	r0, [sp]
    237c:	ldrb	r1, [sp, #7]
    2380:	bl	2788 <flatbuffers_bool_assign_to_pe>
    2384:	movw	r1, #0
    2388:	str	r1, [fp, #-4]
    238c:	ldr	r0, [fp, #-4]
    2390:	mov	sp, fp
    2394:	pop	{fp, pc}

00002398 <reflection_Field_start>:
    2398:	push	{fp, lr}
    239c:	mov	fp, sp
    23a0:	sub	sp, sp, #8
    23a4:	str	r0, [sp, #4]
    23a8:	ldr	r0, [sp, #4]
    23ac:	movw	r1, #9
    23b0:	bl	0 <flatcc_builder_start_table>
    23b4:	mov	sp, fp
    23b8:	pop	{fp, pc}

000023bc <reflection_Field_name_add>:
    23bc:	push	{fp, lr}
    23c0:	mov	fp, sp
    23c4:	sub	sp, sp, #16
    23c8:	str	r0, [fp, #-4]
    23cc:	str	r1, [sp, #8]
    23d0:	ldr	r0, [sp, #8]
    23d4:	cmp	r0, #0
    23d8:	beq	2410 <reflection_Field_name_add+0x54>
    23dc:	ldr	r0, [fp, #-4]
    23e0:	movw	r1, #0
    23e4:	bl	0 <flatcc_builder_table_add_offset>
    23e8:	str	r0, [sp, #4]
    23ec:	movw	r1, #0
    23f0:	cmp	r0, r1
    23f4:	beq	2410 <reflection_Field_name_add+0x54>
    23f8:	ldr	r0, [sp, #8]
    23fc:	ldr	r1, [sp, #4]
    2400:	str	r0, [r1]
    2404:	movw	r0, #0
    2408:	str	r0, [sp]
    240c:	b	241c <reflection_Field_name_add+0x60>
    2410:	mvn	r0, #0
    2414:	str	r0, [sp]
    2418:	b	241c <reflection_Field_name_add+0x60>
    241c:	ldr	r0, [sp]
    2420:	mov	sp, fp
    2424:	pop	{fp, pc}

00002428 <reflection_Type_create>:
    2428:	push	{fp, lr}
    242c:	mov	fp, sp
    2430:	sub	sp, sp, #16
    2434:	str	r0, [sp, #8]
    2438:	strb	r1, [sp, #7]
    243c:	strb	r2, [sp, #6]
    2440:	str	r3, [sp]
    2444:	ldr	r0, [sp, #8]
    2448:	bl	24b4 <reflection_Type_start>
    244c:	cmp	r0, #0
    2450:	bne	2490 <reflection_Type_create+0x68>
    2454:	ldr	r0, [sp, #8]
    2458:	ldr	r1, [sp]
    245c:	bl	24d8 <reflection_Type_index_add>
    2460:	cmp	r0, #0
    2464:	bne	2490 <reflection_Type_create+0x68>
    2468:	ldr	r0, [sp, #8]
    246c:	ldrsb	r1, [sp, #7]
    2470:	bl	2558 <reflection_Type_base_type_add>
    2474:	cmp	r0, #0
    2478:	bne	2490 <reflection_Type_create+0x68>
    247c:	ldr	r0, [sp, #8]
    2480:	ldrsb	r1, [sp, #6]
    2484:	bl	25d8 <reflection_Type_element_add>
    2488:	cmp	r0, #0
    248c:	beq	249c <reflection_Type_create+0x74>
    2490:	movw	r0, #0
    2494:	str	r0, [fp, #-4]
    2498:	b	24a8 <reflection_Type_create+0x80>
    249c:	ldr	r0, [sp, #8]
    24a0:	bl	265c <reflection_Type_end>
    24a4:	str	r0, [fp, #-4]
    24a8:	ldr	r0, [fp, #-4]
    24ac:	mov	sp, fp
    24b0:	pop	{fp, pc}

000024b4 <reflection_Type_start>:
    24b4:	push	{fp, lr}
    24b8:	mov	fp, sp
    24bc:	sub	sp, sp, #8
    24c0:	str	r0, [sp, #4]
    24c4:	ldr	r0, [sp, #4]
    24c8:	movw	r1, #3
    24cc:	bl	0 <flatcc_builder_start_table>
    24d0:	mov	sp, fp
    24d4:	pop	{fp, pc}

000024d8 <reflection_Type_index_add>:
    24d8:	push	{fp, lr}
    24dc:	mov	fp, sp
    24e0:	sub	sp, sp, #16
    24e4:	str	r0, [sp, #8]
    24e8:	str	r1, [sp, #4]
    24ec:	ldr	r0, [sp, #4]
    24f0:	cmn	r0, #1
    24f4:	bne	2504 <reflection_Type_index_add+0x2c>
    24f8:	movw	r0, #0
    24fc:	str	r0, [fp, #-4]
    2500:	b	254c <reflection_Type_index_add+0x74>
    2504:	ldr	r0, [sp, #8]
    2508:	movw	r1, #2
    250c:	movw	r2, #4
    2510:	movw	r3, #4
    2514:	uxth	r3, r3
    2518:	bl	0 <flatcc_builder_table_add>
    251c:	str	r0, [sp]
    2520:	movw	r1, #0
    2524:	cmp	r0, r1
    2528:	bne	2538 <reflection_Type_index_add+0x60>
    252c:	mvn	r0, #0
    2530:	str	r0, [fp, #-4]
    2534:	b	254c <reflection_Type_index_add+0x74>
    2538:	ldr	r0, [sp]
    253c:	ldr	r1, [sp, #4]
    2540:	bl	26bc <flatbuffers_int32_assign_to_pe>
    2544:	movw	r1, #0
    2548:	str	r1, [fp, #-4]
    254c:	ldr	r0, [fp, #-4]
    2550:	mov	sp, fp
    2554:	pop	{fp, pc}

00002558 <reflection_Type_base_type_add>:
    2558:	push	{fp, lr}
    255c:	mov	fp, sp
    2560:	sub	sp, sp, #16
    2564:	str	r0, [sp, #8]
    2568:	strb	r1, [sp, #7]
    256c:	ldrsb	r0, [sp, #7]
    2570:	cmp	r0, #0
    2574:	bne	2584 <reflection_Type_base_type_add+0x2c>
    2578:	movw	r0, #0
    257c:	str	r0, [fp, #-4]
    2580:	b	25cc <reflection_Type_base_type_add+0x74>
    2584:	ldr	r0, [sp, #8]
    2588:	movw	r1, #0
    258c:	movw	r2, #1
    2590:	movw	r3, #1
    2594:	uxth	r3, r3
    2598:	bl	0 <flatcc_builder_table_add>
    259c:	str	r0, [sp]
    25a0:	movw	r1, #0
    25a4:	cmp	r0, r1
    25a8:	bne	25b8 <reflection_Type_base_type_add+0x60>
    25ac:	mvn	r0, #0
    25b0:	str	r0, [fp, #-4]
    25b4:	b	25cc <reflection_Type_base_type_add+0x74>
    25b8:	ldr	r0, [sp]
    25bc:	ldrsb	r1, [sp, #7]
    25c0:	bl	2700 <reflection_BaseType_assign_to_pe>
    25c4:	movw	r1, #0
    25c8:	str	r1, [fp, #-4]
    25cc:	ldr	r0, [fp, #-4]
    25d0:	mov	sp, fp
    25d4:	pop	{fp, pc}

000025d8 <reflection_Type_element_add>:
    25d8:	push	{fp, lr}
    25dc:	mov	fp, sp
    25e0:	sub	sp, sp, #24
    25e4:	str	r0, [fp, #-8]
    25e8:	strb	r1, [fp, #-9]
    25ec:	ldrsb	r0, [fp, #-9]
    25f0:	cmp	r0, #0
    25f4:	bne	2604 <reflection_Type_element_add+0x2c>
    25f8:	movw	r0, #0
    25fc:	str	r0, [fp, #-4]
    2600:	b	2650 <reflection_Type_element_add+0x78>
    2604:	ldr	r0, [fp, #-8]
    2608:	movw	r1, #1
    260c:	str	r1, [sp, #4]
    2610:	ldr	r2, [sp, #4]
    2614:	movw	r3, #1
    2618:	uxth	r3, r3
    261c:	bl	0 <flatcc_builder_table_add>
    2620:	str	r0, [sp, #8]
    2624:	movw	r1, #0
    2628:	cmp	r0, r1
    262c:	bne	263c <reflection_Type_element_add+0x64>
    2630:	mvn	r0, #0
    2634:	str	r0, [fp, #-4]
    2638:	b	2650 <reflection_Type_element_add+0x78>
    263c:	ldr	r0, [sp, #8]
    2640:	ldrsb	r1, [fp, #-9]
    2644:	bl	2700 <reflection_BaseType_assign_to_pe>
    2648:	movw	r1, #0
    264c:	str	r1, [fp, #-4]
    2650:	ldr	r0, [fp, #-4]
    2654:	mov	sp, fp
    2658:	pop	{fp, pc}

0000265c <reflection_Type_end>:
    265c:	push	{fp, lr}
    2660:	mov	fp, sp
    2664:	sub	sp, sp, #8
    2668:	str	r0, [sp, #4]
    266c:	ldr	r0, [sp, #4]
    2670:	movw	r1, #0
    2674:	movt	r1, #0
    2678:	movw	r2, #0
    267c:	bl	0 <flatcc_builder_check_required>
    2680:	cmp	r0, #0
    2684:	beq	268c <reflection_Type_end+0x30>
    2688:	b	26ac <reflection_Type_end+0x50>
    268c:	movw	r0, #0
    2690:	movt	r0, #0
    2694:	movw	r1, #0
    2698:	movt	r1, #0
    269c:	movw	r2, #23
    26a0:	movw	r3, #0
    26a4:	movt	r3, #0
    26a8:	bl	0 <__assert_fail>
    26ac:	ldr	r0, [sp, #4]
    26b0:	bl	0 <flatcc_builder_end_table>
    26b4:	mov	sp, fp
    26b8:	pop	{fp, pc}

000026bc <flatbuffers_int32_assign_to_pe>:
    26bc:	push	{fp, lr}
    26c0:	mov	fp, sp
    26c4:	sub	sp, sp, #8
    26c8:	str	r0, [sp, #4]
    26cc:	str	r1, [sp]
    26d0:	ldr	r0, [sp]
    26d4:	bl	26ec <flatbuffers_int32_cast_to_pe>
    26d8:	ldr	r1, [sp, #4]
    26dc:	str	r0, [r1]
    26e0:	ldr	r0, [sp, #4]
    26e4:	mov	sp, fp
    26e8:	pop	{fp, pc}

000026ec <flatbuffers_int32_cast_to_pe>:
    26ec:	sub	sp, sp, #4
    26f0:	str	r0, [sp]
    26f4:	ldr	r0, [sp]
    26f8:	add	sp, sp, #4
    26fc:	bx	lr

00002700 <reflection_BaseType_assign_to_pe>:
    2700:	push	{fp, lr}
    2704:	mov	fp, sp
    2708:	sub	sp, sp, #8
    270c:	str	r0, [sp, #4]
    2710:	strb	r1, [sp, #3]
    2714:	ldrsb	r0, [sp, #3]
    2718:	bl	2730 <reflection_BaseType_cast_to_pe>
    271c:	ldr	r1, [sp, #4]
    2720:	strb	r0, [r1]
    2724:	ldr	r0, [sp, #4]
    2728:	mov	sp, fp
    272c:	pop	{fp, pc}

00002730 <reflection_BaseType_cast_to_pe>:
    2730:	sub	sp, sp, #4
    2734:	strb	r0, [sp, #3]
    2738:	ldrsb	r0, [sp, #3]
    273c:	add	sp, sp, #4
    2740:	bx	lr

00002744 <flatbuffers_uint16_assign_to_pe>:
    2744:	push	{fp, lr}
    2748:	mov	fp, sp
    274c:	sub	sp, sp, #8
    2750:	str	r0, [sp, #4]
    2754:	strh	r1, [sp, #2]
    2758:	ldrh	r0, [sp, #2]
    275c:	bl	2774 <flatbuffers_uint16_cast_to_pe>
    2760:	ldr	r1, [sp, #4]
    2764:	strh	r0, [r1]
    2768:	ldr	r0, [sp, #4]
    276c:	mov	sp, fp
    2770:	pop	{fp, pc}

00002774 <flatbuffers_uint16_cast_to_pe>:
    2774:	sub	sp, sp, #4
    2778:	strh	r0, [sp, #2]
    277c:	ldrh	r0, [sp, #2]
    2780:	add	sp, sp, #4
    2784:	bx	lr

00002788 <flatbuffers_bool_assign_to_pe>:
    2788:	push	{fp, lr}
    278c:	mov	fp, sp
    2790:	sub	sp, sp, #8
    2794:	str	r0, [sp, #4]
    2798:	strb	r1, [sp, #3]
    279c:	ldrb	r0, [sp, #3]
    27a0:	bl	27b8 <flatbuffers_bool_cast_to_pe>
    27a4:	ldr	r1, [sp, #4]
    27a8:	strb	r0, [r1]
    27ac:	ldr	r0, [sp, #4]
    27b0:	mov	sp, fp
    27b4:	pop	{fp, pc}

000027b8 <flatbuffers_bool_cast_to_pe>:
    27b8:	sub	sp, sp, #4
    27bc:	strb	r0, [sp, #3]
    27c0:	ldrb	r0, [sp, #3]
    27c4:	add	sp, sp, #4
    27c8:	bx	lr

000027cc <reflection_Field_vec_push>:
    27cc:	push	{fp, lr}
    27d0:	mov	fp, sp
    27d4:	sub	sp, sp, #16
    27d8:	str	r0, [fp, #-4]
    27dc:	str	r1, [sp, #8]
    27e0:	ldr	r0, [sp, #8]
    27e4:	cmp	r0, #0
    27e8:	beq	2800 <reflection_Field_vec_push+0x34>
    27ec:	ldr	r0, [fp, #-4]
    27f0:	ldr	r1, [sp, #8]
    27f4:	bl	0 <flatcc_builder_offset_vector_push>
    27f8:	str	r0, [sp, #4]
    27fc:	b	280c <reflection_Field_vec_push+0x40>
    2800:	movw	r0, #0
    2804:	str	r0, [sp, #4]
    2808:	b	280c <reflection_Field_vec_push+0x40>
    280c:	ldr	r0, [sp, #4]
    2810:	mov	sp, fp
    2814:	pop	{fp, pc}

00002818 <reflection_Field_end>:
    2818:	push	{fp, lr}
    281c:	mov	fp, sp
    2820:	sub	sp, sp, #8
    2824:	str	r0, [sp, #4]
    2828:	ldr	r0, [sp, #4]
    282c:	movw	r1, #0
    2830:	movt	r1, #0
    2834:	movw	r2, #2
    2838:	bl	0 <flatcc_builder_check_required>
    283c:	cmp	r0, #0
    2840:	beq	2848 <reflection_Field_end+0x30>
    2844:	b	2868 <reflection_Field_end+0x50>
    2848:	movw	r0, #0
    284c:	movt	r0, #0
    2850:	movw	r1, #0
    2854:	movt	r1, #0
    2858:	movw	r2, #29
    285c:	movw	r3, #0
    2860:	movt	r3, #0
    2864:	bl	0 <__assert_fail>
    2868:	ldr	r0, [sp, #4]
    286c:	bl	0 <flatcc_builder_end_table>
    2870:	mov	sp, fp
    2874:	pop	{fp, pc}

00002878 <flatbuffers_int64_assign_to_pe>:
    2878:	push	{fp, lr}
    287c:	mov	fp, sp
    2880:	sub	sp, sp, #16
    2884:	str	r0, [fp, #-4]
    2888:	str	r3, [sp, #4]
    288c:	str	r2, [sp]
    2890:	ldr	r0, [sp]
    2894:	ldr	r1, [sp, #4]
    2898:	bl	28b4 <flatbuffers_int64_cast_to_pe>
    289c:	ldr	r2, [fp, #-4]
    28a0:	str	r1, [r2, #4]
    28a4:	str	r0, [r2]
    28a8:	ldr	r0, [fp, #-4]
    28ac:	mov	sp, fp
    28b0:	pop	{fp, pc}

000028b4 <flatbuffers_int64_cast_to_pe>:
    28b4:	sub	sp, sp, #8
    28b8:	str	r0, [sp]
    28bc:	str	r1, [sp, #4]
    28c0:	ldr	r0, [sp]
    28c4:	ldr	r1, [sp, #4]
    28c8:	add	sp, sp, #8
    28cc:	bx	lr

000028d0 <flatbuffers_double_assign_to_pe>:
    28d0:	push	{fp, lr}
    28d4:	mov	fp, sp
    28d8:	sub	sp, sp, #16
    28dc:	str	r0, [fp, #-4]
    28e0:	vstr	d0, [sp]
    28e4:	vldr	d0, [sp]
    28e8:	bl	2900 <flatbuffers_double_cast_to_pe>
    28ec:	ldr	r0, [fp, #-4]
    28f0:	vstr	d0, [r0]
    28f4:	ldr	r0, [fp, #-4]
    28f8:	mov	sp, fp
    28fc:	pop	{fp, pc}

00002900 <flatbuffers_double_cast_to_pe>:
    2900:	sub	sp, sp, #16
    2904:	vstr	d0, [sp, #8]
    2908:	vldr	d16, [sp, #8]
    290c:	vstr	d16, [sp]
    2910:	vldr	d0, [sp]
    2914:	add	sp, sp, #16
    2918:	bx	lr

0000291c <reflection_Object_fields_add>:
    291c:	push	{fp, lr}
    2920:	mov	fp, sp
    2924:	sub	sp, sp, #16
    2928:	str	r0, [fp, #-4]
    292c:	str	r1, [sp, #8]
    2930:	ldr	r0, [sp, #8]
    2934:	cmp	r0, #0
    2938:	beq	2970 <reflection_Object_fields_add+0x54>
    293c:	ldr	r0, [fp, #-4]
    2940:	movw	r1, #1
    2944:	bl	0 <flatcc_builder_table_add_offset>
    2948:	str	r0, [sp, #4]
    294c:	movw	r1, #0
    2950:	cmp	r0, r1
    2954:	beq	2970 <reflection_Object_fields_add+0x54>
    2958:	ldr	r0, [sp, #8]
    295c:	ldr	r1, [sp, #4]
    2960:	str	r0, [r1]
    2964:	movw	r0, #0
    2968:	str	r0, [sp]
    296c:	b	297c <reflection_Object_fields_add+0x60>
    2970:	mvn	r0, #0
    2974:	str	r0, [sp]
    2978:	b	297c <reflection_Object_fields_add+0x60>
    297c:	ldr	r0, [sp]
    2980:	mov	sp, fp
    2984:	pop	{fp, pc}

00002988 <reflection_Schema_objects_add>:
    2988:	push	{fp, lr}
    298c:	mov	fp, sp
    2990:	sub	sp, sp, #16
    2994:	str	r0, [fp, #-4]
    2998:	str	r1, [sp, #8]
    299c:	ldr	r0, [sp, #8]
    29a0:	cmp	r0, #0
    29a4:	beq	29dc <reflection_Schema_objects_add+0x54>
    29a8:	ldr	r0, [fp, #-4]
    29ac:	movw	r1, #0
    29b0:	bl	0 <flatcc_builder_table_add_offset>
    29b4:	str	r0, [sp, #4]
    29b8:	movw	r1, #0
    29bc:	cmp	r0, r1
    29c0:	beq	29dc <reflection_Schema_objects_add+0x54>
    29c4:	ldr	r0, [sp, #8]
    29c8:	ldr	r1, [sp, #4]
    29cc:	str	r0, [r1]
    29d0:	movw	r0, #0
    29d4:	str	r0, [sp]
    29d8:	b	29e8 <reflection_Schema_objects_add+0x60>
    29dc:	mvn	r0, #0
    29e0:	str	r0, [sp]
    29e4:	b	29e8 <reflection_Schema_objects_add+0x60>
    29e8:	ldr	r0, [sp]
    29ec:	mov	sp, fp
    29f0:	pop	{fp, pc}

000029f4 <reflection_Schema_enums_start>:
    29f4:	push	{fp, lr}
    29f8:	mov	fp, sp
    29fc:	sub	sp, sp, #8
    2a00:	str	r0, [sp, #4]
    2a04:	ldr	r0, [sp, #4]
    2a08:	bl	0 <flatcc_builder_start_offset_vector>
    2a0c:	mov	sp, fp
    2a10:	pop	{fp, pc}

00002a14 <reflection_Enum_vec_push_start>:
    2a14:	push	{fp, lr}
    2a18:	mov	fp, sp
    2a1c:	sub	sp, sp, #8
    2a20:	str	r0, [sp, #4]
    2a24:	ldr	r0, [sp, #4]
    2a28:	bl	2d08 <reflection_Enum_start>
    2a2c:	mov	sp, fp
    2a30:	pop	{fp, pc}

00002a34 <reflection_Enum_name_create_str>:
    2a34:	push	{fp, lr}
    2a38:	mov	fp, sp
    2a3c:	sub	sp, sp, #16
    2a40:	str	r0, [fp, #-4]
    2a44:	str	r1, [sp, #8]
    2a48:	ldr	r0, [fp, #-4]
    2a4c:	ldr	r1, [fp, #-4]
    2a50:	ldr	r2, [sp, #8]
    2a54:	str	r0, [sp, #4]
    2a58:	mov	r0, r1
    2a5c:	mov	r1, r2
    2a60:	bl	0 <flatcc_builder_create_string_str>
    2a64:	ldr	r1, [sp, #4]
    2a68:	str	r0, [sp]
    2a6c:	mov	r0, r1
    2a70:	ldr	r1, [sp]
    2a74:	bl	2d2c <reflection_Enum_name_add>
    2a78:	mov	sp, fp
    2a7c:	pop	{fp, pc}

00002a80 <reflection_Enum_values_start>:
    2a80:	push	{fp, lr}
    2a84:	mov	fp, sp
    2a88:	sub	sp, sp, #8
    2a8c:	str	r0, [sp, #4]
    2a90:	ldr	r0, [sp, #4]
    2a94:	bl	0 <flatcc_builder_start_offset_vector>
    2a98:	mov	sp, fp
    2a9c:	pop	{fp, pc}

00002aa0 <export_enumval>:
    2aa0:	push	{fp, lr}
    2aa4:	mov	fp, sp
    2aa8:	sub	sp, sp, #24
    2aac:	str	r0, [fp, #-4]
    2ab0:	str	r1, [fp, #-8]
    2ab4:	str	r2, [sp, #12]
    2ab8:	ldr	r0, [fp, #-4]
    2abc:	bl	2d98 <reflection_EnumVal_vec_push_start>
    2ac0:	ldr	r1, [fp, #-4]
    2ac4:	ldr	r2, [fp, #-8]
    2ac8:	ldr	r2, [r2, #4]
    2acc:	ldr	r2, [r2]
    2ad0:	ldr	r3, [fp, #-8]
    2ad4:	ldr	r3, [r3, #4]
    2ad8:	ldr	r3, [r3, #4]
    2adc:	str	r0, [sp, #8]
    2ae0:	mov	r0, r1
    2ae4:	mov	r1, r2
    2ae8:	mov	r2, r3
    2aec:	bl	2db8 <reflection_EnumVal_name_create>
    2af0:	ldr	r1, [sp, #12]
    2af4:	movw	r2, #0
    2af8:	cmp	r1, r2
    2afc:	beq	2b30 <export_enumval+0x90>
    2b00:	ldr	r0, [fp, #-8]
    2b04:	ldrh	r0, [r0, #24]
    2b08:	cmp	r0, #14
    2b0c:	bne	2b30 <export_enumval+0x90>
    2b10:	ldr	r0, [fp, #-4]
    2b14:	ldr	r1, [sp, #12]
    2b18:	ldr	r2, [fp, #-8]
    2b1c:	ldr	r2, [r2, #16]
    2b20:	ldr	r2, [r2, #124]	; 0x7c
    2b24:	add	r1, r1, r2, lsl #2
    2b28:	ldr	r1, [r1]
    2b2c:	bl	2e10 <reflection_EnumVal_object_add>
    2b30:	ldr	r0, [fp, #-4]
    2b34:	ldr	r1, [fp, #-8]
    2b38:	ldr	r2, [r1, #48]	; 0x30
    2b3c:	ldr	r3, [r1, #52]	; 0x34
    2b40:	bl	2e7c <reflection_EnumVal_value_add>
    2b44:	ldr	r1, [fp, #-4]
    2b48:	str	r0, [sp, #4]
    2b4c:	mov	r0, r1
    2b50:	bl	2f10 <reflection_EnumVal_vec_push_end>
    2b54:	mov	sp, fp
    2b58:	pop	{fp, pc}

00002b5c <reflection_Enum_values_end>:
    2b5c:	push	{fp, lr}
    2b60:	mov	fp, sp
    2b64:	sub	sp, sp, #16
    2b68:	str	r0, [fp, #-4]
    2b6c:	ldr	r0, [fp, #-4]
    2b70:	ldr	r1, [fp, #-4]
    2b74:	str	r0, [sp, #8]
    2b78:	mov	r0, r1
    2b7c:	bl	0 <flatcc_builder_end_offset_vector>
    2b80:	ldr	r1, [sp, #8]
    2b84:	str	r0, [sp, #4]
    2b88:	mov	r0, r1
    2b8c:	ldr	r1, [sp, #4]
    2b90:	bl	308c <reflection_Enum_values_add>
    2b94:	mov	sp, fp
    2b98:	pop	{fp, pc}

00002b9c <reflection_Enum_is_union_add>:
    2b9c:	push	{fp, lr}
    2ba0:	mov	fp, sp
    2ba4:	sub	sp, sp, #16
    2ba8:	str	r0, [sp, #8]
    2bac:	strb	r1, [sp, #7]
    2bb0:	ldrb	r0, [sp, #7]
    2bb4:	cmp	r0, #0
    2bb8:	bne	2bc8 <reflection_Enum_is_union_add+0x2c>
    2bbc:	movw	r0, #0
    2bc0:	str	r0, [fp, #-4]
    2bc4:	b	2c10 <reflection_Enum_is_union_add+0x74>
    2bc8:	ldr	r0, [sp, #8]
    2bcc:	movw	r1, #2
    2bd0:	movw	r2, #1
    2bd4:	movw	r3, #1
    2bd8:	uxth	r3, r3
    2bdc:	bl	0 <flatcc_builder_table_add>
    2be0:	str	r0, [sp]
    2be4:	movw	r1, #0
    2be8:	cmp	r0, r1
    2bec:	bne	2bfc <reflection_Enum_is_union_add+0x60>
    2bf0:	mvn	r0, #0
    2bf4:	str	r0, [fp, #-4]
    2bf8:	b	2c10 <reflection_Enum_is_union_add+0x74>
    2bfc:	ldr	r0, [sp]
    2c00:	ldrb	r1, [sp, #7]
    2c04:	bl	2788 <flatbuffers_bool_assign_to_pe>
    2c08:	movw	r1, #0
    2c0c:	str	r1, [fp, #-4]
    2c10:	ldr	r0, [fp, #-4]
    2c14:	mov	sp, fp
    2c18:	pop	{fp, pc}

00002c1c <reflection_Enum_underlying_type_add>:
    2c1c:	push	{fp, lr}
    2c20:	mov	fp, sp
    2c24:	sub	sp, sp, #16
    2c28:	str	r0, [fp, #-4]
    2c2c:	str	r1, [sp, #8]
    2c30:	ldr	r0, [sp, #8]
    2c34:	cmp	r0, #0
    2c38:	beq	2c70 <reflection_Enum_underlying_type_add+0x54>
    2c3c:	ldr	r0, [fp, #-4]
    2c40:	movw	r1, #3
    2c44:	bl	0 <flatcc_builder_table_add_offset>
    2c48:	str	r0, [sp, #4]
    2c4c:	movw	r1, #0
    2c50:	cmp	r0, r1
    2c54:	beq	2c70 <reflection_Enum_underlying_type_add+0x54>
    2c58:	ldr	r0, [sp, #8]
    2c5c:	ldr	r1, [sp, #4]
    2c60:	str	r0, [r1]
    2c64:	movw	r0, #0
    2c68:	str	r0, [sp]
    2c6c:	b	2c7c <reflection_Enum_underlying_type_add+0x60>
    2c70:	mvn	r0, #0
    2c74:	str	r0, [sp]
    2c78:	b	2c7c <reflection_Enum_underlying_type_add+0x60>
    2c7c:	ldr	r0, [sp]
    2c80:	mov	sp, fp
    2c84:	pop	{fp, pc}

00002c88 <reflection_Enum_vec_push_end>:
    2c88:	push	{fp, lr}
    2c8c:	mov	fp, sp
    2c90:	sub	sp, sp, #16
    2c94:	str	r0, [fp, #-4]
    2c98:	ldr	r0, [fp, #-4]
    2c9c:	ldr	r1, [fp, #-4]
    2ca0:	str	r0, [sp, #8]
    2ca4:	mov	r0, r1
    2ca8:	bl	3144 <reflection_Enum_end>
    2cac:	ldr	r1, [sp, #8]
    2cb0:	str	r0, [sp, #4]
    2cb4:	mov	r0, r1
    2cb8:	ldr	r1, [sp, #4]
    2cbc:	bl	30f8 <reflection_Enum_vec_push>
    2cc0:	mov	sp, fp
    2cc4:	pop	{fp, pc}

00002cc8 <reflection_Schema_enums_end>:
    2cc8:	push	{fp, lr}
    2ccc:	mov	fp, sp
    2cd0:	sub	sp, sp, #16
    2cd4:	str	r0, [fp, #-4]
    2cd8:	ldr	r0, [fp, #-4]
    2cdc:	ldr	r1, [fp, #-4]
    2ce0:	str	r0, [sp, #8]
    2ce4:	mov	r0, r1
    2ce8:	bl	0 <flatcc_builder_end_offset_vector>
    2cec:	ldr	r1, [sp, #8]
    2cf0:	str	r0, [sp, #4]
    2cf4:	mov	r0, r1
    2cf8:	ldr	r1, [sp, #4]
    2cfc:	bl	31a4 <reflection_Schema_enums_add>
    2d00:	mov	sp, fp
    2d04:	pop	{fp, pc}

00002d08 <reflection_Enum_start>:
    2d08:	push	{fp, lr}
    2d0c:	mov	fp, sp
    2d10:	sub	sp, sp, #8
    2d14:	str	r0, [sp, #4]
    2d18:	ldr	r0, [sp, #4]
    2d1c:	movw	r1, #4
    2d20:	bl	0 <flatcc_builder_start_table>
    2d24:	mov	sp, fp
    2d28:	pop	{fp, pc}

00002d2c <reflection_Enum_name_add>:
    2d2c:	push	{fp, lr}
    2d30:	mov	fp, sp
    2d34:	sub	sp, sp, #16
    2d38:	str	r0, [fp, #-4]
    2d3c:	str	r1, [sp, #8]
    2d40:	ldr	r0, [sp, #8]
    2d44:	cmp	r0, #0
    2d48:	beq	2d80 <reflection_Enum_name_add+0x54>
    2d4c:	ldr	r0, [fp, #-4]
    2d50:	movw	r1, #0
    2d54:	bl	0 <flatcc_builder_table_add_offset>
    2d58:	str	r0, [sp, #4]
    2d5c:	movw	r1, #0
    2d60:	cmp	r0, r1
    2d64:	beq	2d80 <reflection_Enum_name_add+0x54>
    2d68:	ldr	r0, [sp, #8]
    2d6c:	ldr	r1, [sp, #4]
    2d70:	str	r0, [r1]
    2d74:	movw	r0, #0
    2d78:	str	r0, [sp]
    2d7c:	b	2d8c <reflection_Enum_name_add+0x60>
    2d80:	mvn	r0, #0
    2d84:	str	r0, [sp]
    2d88:	b	2d8c <reflection_Enum_name_add+0x60>
    2d8c:	ldr	r0, [sp]
    2d90:	mov	sp, fp
    2d94:	pop	{fp, pc}

00002d98 <reflection_EnumVal_vec_push_start>:
    2d98:	push	{fp, lr}
    2d9c:	mov	fp, sp
    2da0:	sub	sp, sp, #8
    2da4:	str	r0, [sp, #4]
    2da8:	ldr	r0, [sp, #4]
    2dac:	bl	2f50 <reflection_EnumVal_start>
    2db0:	mov	sp, fp
    2db4:	pop	{fp, pc}

00002db8 <reflection_EnumVal_name_create>:
    2db8:	push	{fp, lr}
    2dbc:	mov	fp, sp
    2dc0:	sub	sp, sp, #24
    2dc4:	str	r0, [fp, #-4]
    2dc8:	str	r1, [fp, #-8]
    2dcc:	str	r2, [sp, #12]
    2dd0:	ldr	r0, [fp, #-4]
    2dd4:	ldr	r1, [fp, #-4]
    2dd8:	ldr	r2, [fp, #-8]
    2ddc:	ldr	r3, [sp, #12]
    2de0:	str	r0, [sp, #8]
    2de4:	mov	r0, r1
    2de8:	mov	r1, r2
    2dec:	mov	r2, r3
    2df0:	bl	0 <flatcc_builder_create_string>
    2df4:	ldr	r1, [sp, #8]
    2df8:	str	r0, [sp, #4]
    2dfc:	mov	r0, r1
    2e00:	ldr	r1, [sp, #4]
    2e04:	bl	2f74 <reflection_EnumVal_name_add>
    2e08:	mov	sp, fp
    2e0c:	pop	{fp, pc}

00002e10 <reflection_EnumVal_object_add>:
    2e10:	push	{fp, lr}
    2e14:	mov	fp, sp
    2e18:	sub	sp, sp, #16
    2e1c:	str	r0, [fp, #-4]
    2e20:	str	r1, [sp, #8]
    2e24:	ldr	r0, [sp, #8]
    2e28:	cmp	r0, #0
    2e2c:	beq	2e64 <reflection_EnumVal_object_add+0x54>
    2e30:	ldr	r0, [fp, #-4]
    2e34:	movw	r1, #2
    2e38:	bl	0 <flatcc_builder_table_add_offset>
    2e3c:	str	r0, [sp, #4]
    2e40:	movw	r1, #0
    2e44:	cmp	r0, r1
    2e48:	beq	2e64 <reflection_EnumVal_object_add+0x54>
    2e4c:	ldr	r0, [sp, #8]
    2e50:	ldr	r1, [sp, #4]
    2e54:	str	r0, [r1]
    2e58:	movw	r0, #0
    2e5c:	str	r0, [sp]
    2e60:	b	2e70 <reflection_EnumVal_object_add+0x60>
    2e64:	mvn	r0, #0
    2e68:	str	r0, [sp]
    2e6c:	b	2e70 <reflection_EnumVal_object_add+0x60>
    2e70:	ldr	r0, [sp]
    2e74:	mov	sp, fp
    2e78:	pop	{fp, pc}

00002e7c <reflection_EnumVal_value_add>:
    2e7c:	push	{fp, lr}
    2e80:	mov	fp, sp
    2e84:	sub	sp, sp, #24
    2e88:	str	r0, [fp, #-8]
    2e8c:	str	r3, [sp, #12]
    2e90:	str	r2, [sp, #8]
    2e94:	ldr	r0, [sp, #8]
    2e98:	ldr	r1, [sp, #12]
    2e9c:	orr	r0, r0, r1
    2ea0:	cmp	r0, #0
    2ea4:	bne	2eb8 <reflection_EnumVal_value_add+0x3c>
    2ea8:	b	2eac <reflection_EnumVal_value_add+0x30>
    2eac:	movw	r0, #0
    2eb0:	str	r0, [fp, #-4]
    2eb4:	b	2f04 <reflection_EnumVal_value_add+0x88>
    2eb8:	ldr	r0, [fp, #-8]
    2ebc:	movw	r1, #1
    2ec0:	movw	r2, #8
    2ec4:	movw	r3, #8
    2ec8:	uxth	r3, r3
    2ecc:	bl	0 <flatcc_builder_table_add>
    2ed0:	str	r0, [sp, #4]
    2ed4:	movw	r1, #0
    2ed8:	cmp	r0, r1
    2edc:	bne	2eec <reflection_EnumVal_value_add+0x70>
    2ee0:	mvn	r0, #0
    2ee4:	str	r0, [fp, #-4]
    2ee8:	b	2f04 <reflection_EnumVal_value_add+0x88>
    2eec:	ldr	r0, [sp, #4]
    2ef0:	ldr	r2, [sp, #8]
    2ef4:	ldr	r3, [sp, #12]
    2ef8:	bl	2878 <flatbuffers_int64_assign_to_pe>
    2efc:	movw	r1, #0
    2f00:	str	r1, [fp, #-4]
    2f04:	ldr	r0, [fp, #-4]
    2f08:	mov	sp, fp
    2f0c:	pop	{fp, pc}

00002f10 <reflection_EnumVal_vec_push_end>:
    2f10:	push	{fp, lr}
    2f14:	mov	fp, sp
    2f18:	sub	sp, sp, #16
    2f1c:	str	r0, [fp, #-4]
    2f20:	ldr	r0, [fp, #-4]
    2f24:	ldr	r1, [fp, #-4]
    2f28:	str	r0, [sp, #8]
    2f2c:	mov	r0, r1
    2f30:	bl	302c <reflection_EnumVal_end>
    2f34:	ldr	r1, [sp, #8]
    2f38:	str	r0, [sp, #4]
    2f3c:	mov	r0, r1
    2f40:	ldr	r1, [sp, #4]
    2f44:	bl	2fe0 <reflection_EnumVal_vec_push>
    2f48:	mov	sp, fp
    2f4c:	pop	{fp, pc}

00002f50 <reflection_EnumVal_start>:
    2f50:	push	{fp, lr}
    2f54:	mov	fp, sp
    2f58:	sub	sp, sp, #8
    2f5c:	str	r0, [sp, #4]
    2f60:	ldr	r0, [sp, #4]
    2f64:	movw	r1, #3
    2f68:	bl	0 <flatcc_builder_start_table>
    2f6c:	mov	sp, fp
    2f70:	pop	{fp, pc}

00002f74 <reflection_EnumVal_name_add>:
    2f74:	push	{fp, lr}
    2f78:	mov	fp, sp
    2f7c:	sub	sp, sp, #16
    2f80:	str	r0, [fp, #-4]
    2f84:	str	r1, [sp, #8]
    2f88:	ldr	r0, [sp, #8]
    2f8c:	cmp	r0, #0
    2f90:	beq	2fc8 <reflection_EnumVal_name_add+0x54>
    2f94:	ldr	r0, [fp, #-4]
    2f98:	movw	r1, #0
    2f9c:	bl	0 <flatcc_builder_table_add_offset>
    2fa0:	str	r0, [sp, #4]
    2fa4:	movw	r1, #0
    2fa8:	cmp	r0, r1
    2fac:	beq	2fc8 <reflection_EnumVal_name_add+0x54>
    2fb0:	ldr	r0, [sp, #8]
    2fb4:	ldr	r1, [sp, #4]
    2fb8:	str	r0, [r1]
    2fbc:	movw	r0, #0
    2fc0:	str	r0, [sp]
    2fc4:	b	2fd4 <reflection_EnumVal_name_add+0x60>
    2fc8:	mvn	r0, #0
    2fcc:	str	r0, [sp]
    2fd0:	b	2fd4 <reflection_EnumVal_name_add+0x60>
    2fd4:	ldr	r0, [sp]
    2fd8:	mov	sp, fp
    2fdc:	pop	{fp, pc}

00002fe0 <reflection_EnumVal_vec_push>:
    2fe0:	push	{fp, lr}
    2fe4:	mov	fp, sp
    2fe8:	sub	sp, sp, #16
    2fec:	str	r0, [fp, #-4]
    2ff0:	str	r1, [sp, #8]
    2ff4:	ldr	r0, [sp, #8]
    2ff8:	cmp	r0, #0
    2ffc:	beq	3014 <reflection_EnumVal_vec_push+0x34>
    3000:	ldr	r0, [fp, #-4]
    3004:	ldr	r1, [sp, #8]
    3008:	bl	0 <flatcc_builder_offset_vector_push>
    300c:	str	r0, [sp, #4]
    3010:	b	3020 <reflection_EnumVal_vec_push+0x40>
    3014:	movw	r0, #0
    3018:	str	r0, [sp, #4]
    301c:	b	3020 <reflection_EnumVal_vec_push+0x40>
    3020:	ldr	r0, [sp, #4]
    3024:	mov	sp, fp
    3028:	pop	{fp, pc}

0000302c <reflection_EnumVal_end>:
    302c:	push	{fp, lr}
    3030:	mov	fp, sp
    3034:	sub	sp, sp, #8
    3038:	str	r0, [sp, #4]
    303c:	ldr	r0, [sp, #4]
    3040:	movw	r1, #0
    3044:	movt	r1, #0
    3048:	movw	r2, #1
    304c:	bl	0 <flatcc_builder_check_required>
    3050:	cmp	r0, #0
    3054:	beq	305c <reflection_EnumVal_end+0x30>
    3058:	b	307c <reflection_EnumVal_end+0x50>
    305c:	movw	r0, #0
    3060:	movt	r0, #0
    3064:	movw	r1, #0
    3068:	movt	r1, #0
    306c:	movw	r2, #25
    3070:	movw	r3, #0
    3074:	movt	r3, #0
    3078:	bl	0 <__assert_fail>
    307c:	ldr	r0, [sp, #4]
    3080:	bl	0 <flatcc_builder_end_table>
    3084:	mov	sp, fp
    3088:	pop	{fp, pc}

0000308c <reflection_Enum_values_add>:
    308c:	push	{fp, lr}
    3090:	mov	fp, sp
    3094:	sub	sp, sp, #16
    3098:	str	r0, [fp, #-4]
    309c:	str	r1, [sp, #8]
    30a0:	ldr	r0, [sp, #8]
    30a4:	cmp	r0, #0
    30a8:	beq	30e0 <reflection_Enum_values_add+0x54>
    30ac:	ldr	r0, [fp, #-4]
    30b0:	movw	r1, #1
    30b4:	bl	0 <flatcc_builder_table_add_offset>
    30b8:	str	r0, [sp, #4]
    30bc:	movw	r1, #0
    30c0:	cmp	r0, r1
    30c4:	beq	30e0 <reflection_Enum_values_add+0x54>
    30c8:	ldr	r0, [sp, #8]
    30cc:	ldr	r1, [sp, #4]
    30d0:	str	r0, [r1]
    30d4:	movw	r0, #0
    30d8:	str	r0, [sp]
    30dc:	b	30ec <reflection_Enum_values_add+0x60>
    30e0:	mvn	r0, #0
    30e4:	str	r0, [sp]
    30e8:	b	30ec <reflection_Enum_values_add+0x60>
    30ec:	ldr	r0, [sp]
    30f0:	mov	sp, fp
    30f4:	pop	{fp, pc}

000030f8 <reflection_Enum_vec_push>:
    30f8:	push	{fp, lr}
    30fc:	mov	fp, sp
    3100:	sub	sp, sp, #16
    3104:	str	r0, [fp, #-4]
    3108:	str	r1, [sp, #8]
    310c:	ldr	r0, [sp, #8]
    3110:	cmp	r0, #0
    3114:	beq	312c <reflection_Enum_vec_push+0x34>
    3118:	ldr	r0, [fp, #-4]
    311c:	ldr	r1, [sp, #8]
    3120:	bl	0 <flatcc_builder_offset_vector_push>
    3124:	str	r0, [sp, #4]
    3128:	b	3138 <reflection_Enum_vec_push+0x40>
    312c:	movw	r0, #0
    3130:	str	r0, [sp, #4]
    3134:	b	3138 <reflection_Enum_vec_push+0x40>
    3138:	ldr	r0, [sp, #4]
    313c:	mov	sp, fp
    3140:	pop	{fp, pc}

00003144 <reflection_Enum_end>:
    3144:	push	{fp, lr}
    3148:	mov	fp, sp
    314c:	sub	sp, sp, #8
    3150:	str	r0, [sp, #4]
    3154:	ldr	r0, [sp, #4]
    3158:	movw	r1, #0
    315c:	movt	r1, #0
    3160:	movw	r2, #3
    3164:	bl	0 <flatcc_builder_check_required>
    3168:	cmp	r0, #0
    316c:	beq	3174 <reflection_Enum_end+0x30>
    3170:	b	3194 <reflection_Enum_end+0x50>
    3174:	movw	r0, #0
    3178:	movt	r0, #0
    317c:	movw	r1, #0
    3180:	movt	r1, #0
    3184:	movw	r2, #27
    3188:	movw	r3, #0
    318c:	movt	r3, #0
    3190:	bl	0 <__assert_fail>
    3194:	ldr	r0, [sp, #4]
    3198:	bl	0 <flatcc_builder_end_table>
    319c:	mov	sp, fp
    31a0:	pop	{fp, pc}

000031a4 <reflection_Schema_enums_add>:
    31a4:	push	{fp, lr}
    31a8:	mov	fp, sp
    31ac:	sub	sp, sp, #16
    31b0:	str	r0, [fp, #-4]
    31b4:	str	r1, [sp, #8]
    31b8:	ldr	r0, [sp, #8]
    31bc:	cmp	r0, #0
    31c0:	beq	31f8 <reflection_Schema_enums_add+0x54>
    31c4:	ldr	r0, [fp, #-4]
    31c8:	movw	r1, #1
    31cc:	bl	0 <flatcc_builder_table_add_offset>
    31d0:	str	r0, [sp, #4]
    31d4:	movw	r1, #0
    31d8:	cmp	r0, r1
    31dc:	beq	31f8 <reflection_Schema_enums_add+0x54>
    31e0:	ldr	r0, [sp, #8]
    31e4:	ldr	r1, [sp, #4]
    31e8:	str	r0, [r1]
    31ec:	movw	r0, #0
    31f0:	str	r0, [sp]
    31f4:	b	3204 <reflection_Schema_enums_add+0x60>
    31f8:	mvn	r0, #0
    31fc:	str	r0, [sp]
    3200:	b	3204 <reflection_Schema_enums_add+0x60>
    3204:	ldr	r0, [sp]
    3208:	mov	sp, fp
    320c:	pop	{fp, pc}

00003210 <reflection_Schema_root_table_add>:
    3210:	push	{fp, lr}
    3214:	mov	fp, sp
    3218:	sub	sp, sp, #16
    321c:	str	r0, [fp, #-4]
    3220:	str	r1, [sp, #8]
    3224:	ldr	r0, [sp, #8]
    3228:	cmp	r0, #0
    322c:	beq	3264 <reflection_Schema_root_table_add+0x54>
    3230:	ldr	r0, [fp, #-4]
    3234:	movw	r1, #4
    3238:	bl	0 <flatcc_builder_table_add_offset>
    323c:	str	r0, [sp, #4]
    3240:	movw	r1, #0
    3244:	cmp	r0, r1
    3248:	beq	3264 <reflection_Schema_root_table_add+0x54>
    324c:	ldr	r0, [sp, #8]
    3250:	ldr	r1, [sp, #4]
    3254:	str	r0, [r1]
    3258:	movw	r0, #0
    325c:	str	r0, [sp]
    3260:	b	3270 <reflection_Schema_root_table_add+0x60>
    3264:	mvn	r0, #0
    3268:	str	r0, [sp]
    326c:	b	3270 <reflection_Schema_root_table_add+0x60>
    3270:	ldr	r0, [sp]
    3274:	mov	sp, fp
    3278:	pop	{fp, pc}

0000327c <flatbuffers_buffer_end>:
    327c:	push	{fp, lr}
    3280:	mov	fp, sp
    3284:	sub	sp, sp, #8
    3288:	str	r0, [sp, #4]
    328c:	str	r1, [sp]
    3290:	ldr	r0, [sp, #4]
    3294:	ldr	r1, [sp]
    3298:	bl	0 <flatcc_builder_end_buffer>
    329c:	mov	sp, fp
    32a0:	pop	{fp, pc}

000032a4 <reflection_Schema_end>:
    32a4:	push	{fp, lr}
    32a8:	mov	fp, sp
    32ac:	sub	sp, sp, #8
    32b0:	str	r0, [sp, #4]
    32b4:	ldr	r0, [sp, #4]
    32b8:	movw	r1, #0
    32bc:	movt	r1, #0
    32c0:	movw	r2, #2
    32c4:	bl	0 <flatcc_builder_check_required>
    32c8:	cmp	r0, #0
    32cc:	beq	32d4 <reflection_Schema_end+0x30>
    32d0:	b	32f4 <reflection_Schema_end+0x50>
    32d4:	movw	r0, #0
    32d8:	movt	r0, #0
    32dc:	movw	r1, #0
    32e0:	movt	r1, #0
    32e4:	movw	r2, #33	; 0x21
    32e8:	movw	r3, #0
    32ec:	movt	r3, #0
    32f0:	bl	0 <__assert_fail>
    32f4:	ldr	r0, [sp, #4]
    32f8:	bl	0 <flatcc_builder_end_table>
    32fc:	mov	sp, fp
    3300:	pop	{fp, pc}

00003304 <reflection_Schema_as_root>:
    3304:	push	{fp, lr}
    3308:	mov	fp, sp
    330c:	sub	sp, sp, #16
    3310:	str	r0, [fp, #-4]
    3314:	movw	r0, #0
    3318:	movt	r0, #0
    331c:	str	r0, [sp, #8]
    3320:	ldr	r0, [fp, #-4]
    3324:	movw	r1, #0
    3328:	cmp	r0, r1
    332c:	beq	3344 <reflection_Schema_as_root+0x40>
    3330:	ldr	r0, [fp, #-4]
    3334:	ldr	r1, [sp, #8]
    3338:	bl	3680 <flatbuffers_has_identifier>
    333c:	cmp	r0, #0
    3340:	bne	3350 <reflection_Schema_as_root+0x4c>
    3344:	movw	r0, #0
    3348:	str	r0, [sp, #4]
    334c:	b	3370 <reflection_Schema_as_root+0x6c>
    3350:	ldr	r0, [fp, #-4]
    3354:	ldr	r1, [fp, #-4]
    3358:	str	r0, [sp]
    335c:	mov	r0, r1
    3360:	bl	372c <__flatbuffers_uoffset_read_from_pe>
    3364:	ldr	r1, [sp]
    3368:	add	r0, r1, r0
    336c:	str	r0, [sp, #4]
    3370:	ldr	r0, [sp, #4]
    3374:	mov	sp, fp
    3378:	pop	{fp, pc}

0000337c <reflection_Schema_objects>:
    337c:	push	{fp, lr}
    3380:	mov	fp, sp
    3384:	sub	sp, sp, #24
    3388:	str	r0, [fp, #-4]
    338c:	movw	r0, #0
    3390:	strh	r0, [fp, #-10]
    3394:	ldr	r0, [fp, #-4]
    3398:	movw	r1, #0
    339c:	cmp	r0, r1
    33a0:	beq	33ac <reflection_Schema_objects+0x30>
    33a4:	b	33a8 <reflection_Schema_objects+0x2c>
    33a8:	b	33cc <reflection_Schema_objects+0x50>
    33ac:	movw	r0, #0
    33b0:	movt	r0, #0
    33b4:	movw	r1, #0
    33b8:	movt	r1, #0
    33bc:	movw	r2, #237	; 0xed
    33c0:	movw	r3, #0
    33c4:	movt	r3, #0
    33c8:	bl	0 <__assert_fail>
    33cc:	mov	r0, #0
    33d0:	strh	r0, [sp, #12]
    33d4:	ldr	r0, [fp, #-4]
    33d8:	str	r0, [sp, #4]
    33dc:	bl	37b0 <__flatbuffers_soffset_read_from_pe>
    33e0:	ldr	r1, [sp, #4]
    33e4:	sub	r0, r1, r0
    33e8:	str	r0, [sp, #8]
    33ec:	ldr	r0, [sp, #8]
    33f0:	bl	37d4 <__flatbuffers_voffset_read_from_pe>
    33f4:	ldrh	r1, [sp, #12]
    33f8:	add	r1, r1, #3
    33fc:	lsl	r1, r1, #1
    3400:	cmp	r0, r1
    3404:	bcc	3420 <reflection_Schema_objects+0xa4>
    3408:	ldr	r0, [sp, #8]
    340c:	ldrh	r1, [sp, #12]
    3410:	add	r0, r0, r1, lsl #1
    3414:	add	r0, r0, #4
    3418:	bl	37d4 <__flatbuffers_voffset_read_from_pe>
    341c:	strh	r0, [fp, #-10]
    3420:	ldrsh	r0, [fp, #-10]
    3424:	cmp	r0, #0
    3428:	beq	3464 <reflection_Schema_objects+0xe8>
    342c:	ldr	r0, [fp, #-4]
    3430:	ldrh	r1, [fp, #-10]
    3434:	add	r0, r0, r1
    3438:	str	r0, [fp, #-8]
    343c:	ldr	r0, [fp, #-8]
    3440:	add	r0, r0, #4
    3444:	ldr	r1, [fp, #-8]
    3448:	str	r0, [sp]
    344c:	mov	r0, r1
    3450:	bl	372c <__flatbuffers_uoffset_read_from_pe>
    3454:	ldr	r1, [sp]
    3458:	add	r0, r1, r0
    345c:	mov	sp, fp
    3460:	pop	{fp, pc}
    3464:	movw	r0, #0
    3468:	movt	r0, #0
    346c:	movw	r1, #0
    3470:	movt	r1, #0
    3474:	movw	r2, #237	; 0xed
    3478:	movw	r3, #0
    347c:	movt	r3, #0
    3480:	bl	0 <__assert_fail>

00003484 <reflection_Object_vec_len>:
    3484:	push	{fp, lr}
    3488:	mov	fp, sp
    348c:	sub	sp, sp, #8
    3490:	str	r0, [sp, #4]
    3494:	ldr	r0, [sp, #4]
    3498:	movw	r1, #0
    349c:	cmp	r0, r1
    34a0:	beq	34bc <reflection_Object_vec_len+0x38>
    34a4:	ldr	r0, [sp, #4]
    34a8:	mvn	r1, #3
    34ac:	add	r0, r0, r1
    34b0:	bl	372c <__flatbuffers_uoffset_read_from_pe>
    34b4:	str	r0, [sp]
    34b8:	b	34c8 <reflection_Object_vec_len+0x44>
    34bc:	movw	r0, #0
    34c0:	str	r0, [sp]
    34c4:	b	34c8 <reflection_Object_vec_len+0x44>
    34c8:	ldr	r0, [sp]
    34cc:	mov	sp, fp
    34d0:	pop	{fp, pc}

000034d4 <reflection_Object_vec_at>:
    34d4:	push	{fp, lr}
    34d8:	mov	fp, sp
    34dc:	sub	sp, sp, #16
    34e0:	str	r0, [fp, #-4]
    34e4:	str	r1, [sp, #8]
    34e8:	ldr	r0, [fp, #-4]
    34ec:	ldr	r1, [sp, #8]
    34f0:	add	r0, r0, r1, lsl #2
    34f4:	str	r0, [sp, #4]
    34f8:	ldr	r0, [fp, #-4]
    34fc:	bl	3824 <flatbuffers_vec_len>
    3500:	ldr	r1, [sp, #8]
    3504:	cmp	r0, r1
    3508:	bls	3514 <reflection_Object_vec_at+0x40>
    350c:	b	3510 <reflection_Object_vec_at+0x3c>
    3510:	b	3534 <reflection_Object_vec_at+0x60>
    3514:	movw	r0, #0
    3518:	movt	r0, #0
    351c:	movw	r1, #0
    3520:	movt	r1, #0
    3524:	movw	r2, #215	; 0xd7
    3528:	movw	r3, #0
    352c:	movt	r3, #0
    3530:	bl	0 <__assert_fail>
    3534:	ldr	r0, [sp, #4]
    3538:	ldr	r1, [sp, #4]
    353c:	str	r0, [sp]
    3540:	mov	r0, r1
    3544:	bl	372c <__flatbuffers_uoffset_read_from_pe>
    3548:	ldr	r1, [sp]
    354c:	add	r0, r1, r0
    3550:	mov	sp, fp
    3554:	pop	{fp, pc}

00003558 <reflection_Object_fields>:
    3558:	push	{fp, lr}
    355c:	mov	fp, sp
    3560:	sub	sp, sp, #24
    3564:	str	r0, [fp, #-4]
    3568:	movw	r0, #0
    356c:	strh	r0, [fp, #-10]
    3570:	ldr	r0, [fp, #-4]
    3574:	movw	r1, #0
    3578:	cmp	r0, r1
    357c:	beq	3588 <reflection_Object_fields+0x30>
    3580:	b	3584 <reflection_Object_fields+0x2c>
    3584:	b	35a8 <reflection_Object_fields+0x50>
    3588:	movw	r0, #0
    358c:	movt	r0, #0
    3590:	movw	r1, #0
    3594:	movt	r1, #0
    3598:	movw	r2, #224	; 0xe0
    359c:	movw	r3, #0
    35a0:	movt	r3, #0
    35a4:	bl	0 <__assert_fail>
    35a8:	mov	r0, #1
    35ac:	strh	r0, [sp, #12]
    35b0:	ldr	r0, [fp, #-4]
    35b4:	str	r0, [sp, #4]
    35b8:	bl	37b0 <__flatbuffers_soffset_read_from_pe>
    35bc:	ldr	r1, [sp, #4]
    35c0:	sub	r0, r1, r0
    35c4:	str	r0, [sp, #8]
    35c8:	ldr	r0, [sp, #8]
    35cc:	bl	37d4 <__flatbuffers_voffset_read_from_pe>
    35d0:	ldrh	r1, [sp, #12]
    35d4:	add	r1, r1, #3
    35d8:	lsl	r1, r1, #1
    35dc:	cmp	r0, r1
    35e0:	bcc	35fc <reflection_Object_fields+0xa4>
    35e4:	ldr	r0, [sp, #8]
    35e8:	ldrh	r1, [sp, #12]
    35ec:	add	r0, r0, r1, lsl #1
    35f0:	add	r0, r0, #4
    35f4:	bl	37d4 <__flatbuffers_voffset_read_from_pe>
    35f8:	strh	r0, [fp, #-10]
    35fc:	ldrsh	r0, [fp, #-10]
    3600:	cmp	r0, #0
    3604:	beq	3640 <reflection_Object_fields+0xe8>
    3608:	ldr	r0, [fp, #-4]
    360c:	ldrh	r1, [fp, #-10]
    3610:	add	r0, r0, r1
    3614:	str	r0, [fp, #-8]
    3618:	ldr	r0, [fp, #-8]
    361c:	add	r0, r0, #4
    3620:	ldr	r1, [fp, #-8]
    3624:	str	r0, [sp]
    3628:	mov	r0, r1
    362c:	bl	372c <__flatbuffers_uoffset_read_from_pe>
    3630:	ldr	r1, [sp]
    3634:	add	r0, r1, r0
    3638:	mov	sp, fp
    363c:	pop	{fp, pc}
    3640:	movw	r0, #0
    3644:	movt	r0, #0
    3648:	movw	r1, #0
    364c:	movt	r1, #0
    3650:	movw	r2, #224	; 0xe0
    3654:	movw	r3, #0
    3658:	movt	r3, #0
    365c:	bl	0 <__assert_fail>

00003660 <reflection_Field_vec_sort_by_name>:
    3660:	push	{fp, lr}
    3664:	mov	fp, sp
    3668:	sub	sp, sp, #8
    366c:	str	r0, [sp, #4]
    3670:	ldr	r0, [sp, #4]
    3674:	bl	3874 <__reflection_Field_sort_by_name__heap_sort>
    3678:	mov	sp, fp
    367c:	pop	{fp, pc}

00003680 <flatbuffers_has_identifier>:
    3680:	push	{fp, lr}
    3684:	mov	fp, sp
    3688:	sub	sp, sp, #32
    368c:	str	r0, [fp, #-8]
    3690:	str	r1, [fp, #-12]
    3694:	movw	r0, #0
    3698:	str	r0, [sp, #12]
    369c:	ldr	r1, [fp, #-12]
    36a0:	cmp	r1, r0
    36a4:	bne	36b4 <flatbuffers_has_identifier+0x34>
    36a8:	movw	r0, #1
    36ac:	str	r0, [fp, #-4]
    36b0:	b	3720 <flatbuffers_has_identifier+0xa0>
    36b4:	add	r0, sp, #12
    36b8:	ldr	r1, [fp, #-12]
    36bc:	movw	r2, #4
    36c0:	bl	0 <strncpy>
    36c4:	ldr	r1, [sp, #12]
    36c8:	str	r0, [sp, #8]
    36cc:	mov	r0, r1
    36d0:	bl	3750 <__flatbuffers_thash_cast_from_le>
    36d4:	str	r0, [sp, #12]
    36d8:	ldr	r0, [fp, #-8]
    36dc:	add	r0, r0, #4
    36e0:	bl	3764 <__flatbuffers_thash_read_from_pe>
    36e4:	str	r0, [sp, #16]
    36e8:	ldr	r0, [sp, #12]
    36ec:	cmp	r0, #0
    36f0:	movw	r0, #1
    36f4:	str	r0, [sp, #4]
    36f8:	beq	3714 <flatbuffers_has_identifier+0x94>
    36fc:	ldr	r0, [sp, #16]
    3700:	ldr	r1, [sp, #12]
    3704:	cmp	r0, r1
    3708:	movw	r0, #0
    370c:	moveq	r0, #1
    3710:	str	r0, [sp, #4]
    3714:	ldr	r0, [sp, #4]
    3718:	and	r0, r0, #1
    371c:	str	r0, [fp, #-4]
    3720:	ldr	r0, [fp, #-4]
    3724:	mov	sp, fp
    3728:	pop	{fp, pc}

0000372c <__flatbuffers_uoffset_read_from_pe>:
    372c:	push	{fp, lr}
    3730:	mov	fp, sp
    3734:	sub	sp, sp, #8
    3738:	str	r0, [sp, #4]
    373c:	ldr	r0, [sp, #4]
    3740:	ldr	r0, [r0]
    3744:	bl	379c <__flatbuffers_uoffset_cast_from_pe>
    3748:	mov	sp, fp
    374c:	pop	{fp, pc}

00003750 <__flatbuffers_thash_cast_from_le>:
    3750:	sub	sp, sp, #4
    3754:	str	r0, [sp]
    3758:	ldr	r0, [sp]
    375c:	add	sp, sp, #4
    3760:	bx	lr

00003764 <__flatbuffers_thash_read_from_pe>:
    3764:	push	{fp, lr}
    3768:	mov	fp, sp
    376c:	sub	sp, sp, #8
    3770:	str	r0, [sp, #4]
    3774:	ldr	r0, [sp, #4]
    3778:	ldr	r0, [r0]
    377c:	bl	3788 <__flatbuffers_thash_cast_from_pe>
    3780:	mov	sp, fp
    3784:	pop	{fp, pc}

00003788 <__flatbuffers_thash_cast_from_pe>:
    3788:	sub	sp, sp, #4
    378c:	str	r0, [sp]
    3790:	ldr	r0, [sp]
    3794:	add	sp, sp, #4
    3798:	bx	lr

0000379c <__flatbuffers_uoffset_cast_from_pe>:
    379c:	sub	sp, sp, #4
    37a0:	str	r0, [sp]
    37a4:	ldr	r0, [sp]
    37a8:	add	sp, sp, #4
    37ac:	bx	lr

000037b0 <__flatbuffers_soffset_read_from_pe>:
    37b0:	push	{fp, lr}
    37b4:	mov	fp, sp
    37b8:	sub	sp, sp, #8
    37bc:	str	r0, [sp, #4]
    37c0:	ldr	r0, [sp, #4]
    37c4:	ldr	r0, [r0]
    37c8:	bl	37fc <__flatbuffers_soffset_cast_from_pe>
    37cc:	mov	sp, fp
    37d0:	pop	{fp, pc}

000037d4 <__flatbuffers_voffset_read_from_pe>:
    37d4:	push	{fp, lr}
    37d8:	mov	fp, sp
    37dc:	sub	sp, sp, #8
    37e0:	str	r0, [sp, #4]
    37e4:	ldr	r0, [sp, #4]
    37e8:	ldrh	r0, [r0]
    37ec:	bl	3810 <__flatbuffers_voffset_cast_from_pe>
    37f0:	uxth	r0, r0
    37f4:	mov	sp, fp
    37f8:	pop	{fp, pc}

000037fc <__flatbuffers_soffset_cast_from_pe>:
    37fc:	sub	sp, sp, #4
    3800:	str	r0, [sp]
    3804:	ldr	r0, [sp]
    3808:	add	sp, sp, #4
    380c:	bx	lr

00003810 <__flatbuffers_voffset_cast_from_pe>:
    3810:	sub	sp, sp, #4
    3814:	strh	r0, [sp, #2]
    3818:	ldrh	r0, [sp, #2]
    381c:	add	sp, sp, #4
    3820:	bx	lr

00003824 <flatbuffers_vec_len>:
    3824:	push	{fp, lr}
    3828:	mov	fp, sp
    382c:	sub	sp, sp, #8
    3830:	str	r0, [sp, #4]
    3834:	ldr	r0, [sp, #4]
    3838:	movw	r1, #0
    383c:	cmp	r0, r1
    3840:	beq	385c <flatbuffers_vec_len+0x38>
    3844:	ldr	r0, [sp, #4]
    3848:	mvn	r1, #3
    384c:	add	r0, r0, r1
    3850:	bl	372c <__flatbuffers_uoffset_read_from_pe>
    3854:	str	r0, [sp]
    3858:	b	3868 <flatbuffers_vec_len+0x44>
    385c:	movw	r0, #0
    3860:	str	r0, [sp]
    3864:	b	3868 <flatbuffers_vec_len+0x44>
    3868:	ldr	r0, [sp]
    386c:	mov	sp, fp
    3870:	pop	{fp, pc}

00003874 <__reflection_Field_sort_by_name__heap_sort>:
    3874:	push	{fp, lr}
    3878:	mov	fp, sp
    387c:	sub	sp, sp, #32
    3880:	str	r0, [fp, #-4]
    3884:	ldr	r0, [fp, #-4]
    3888:	bl	3984 <reflection_Field_vec_len>
    388c:	str	r0, [sp, #16]
    3890:	ldr	r0, [sp, #16]
    3894:	cmp	r0, #0
    3898:	bne	38a0 <__reflection_Field_sort_by_name__heap_sort+0x2c>
    389c:	b	397c <__reflection_Field_sort_by_name__heap_sort+0x108>
    38a0:	ldr	r0, [sp, #16]
    38a4:	sub	r0, r0, #1
    38a8:	str	r0, [fp, #-12]
    38ac:	ldr	r0, [sp, #16]
    38b0:	lsr	r0, r0, #1
    38b4:	str	r0, [fp, #-8]
    38b8:	ldr	r0, [fp, #-4]
    38bc:	ldr	r1, [fp, #-8]
    38c0:	ldr	r2, [fp, #-12]
    38c4:	bl	39d4 <__reflection_Field_sort_by_name__heap_sift_down>
    38c8:	ldr	r0, [fp, #-8]
    38cc:	mvn	r1, #0
    38d0:	add	r1, r0, r1
    38d4:	str	r1, [fp, #-8]
    38d8:	cmp	r0, #0
    38dc:	bne	38b8 <__reflection_Field_sort_by_name__heap_sort+0x44>
    38e0:	b	38e4 <__reflection_Field_sort_by_name__heap_sort+0x70>
    38e4:	ldr	r0, [fp, #-12]
    38e8:	cmp	r0, #0
    38ec:	bls	397c <__reflection_Field_sort_by_name__heap_sort+0x108>
    38f0:	ldr	r0, [fp, #-12]
    38f4:	rsb	r0, r0, #0
    38f8:	lsl	r0, r0, #2
    38fc:	str	r0, [sp, #4]
    3900:	ldr	r0, [fp, #-4]
    3904:	ldr	r1, [fp, #-12]
    3908:	add	r0, r0, r1, lsl #2
    390c:	bl	372c <__flatbuffers_uoffset_read_from_pe>
    3910:	ldr	r1, [sp, #4]
    3914:	sub	r0, r0, r1
    3918:	str	r0, [sp, #12]
    391c:	ldr	r0, [fp, #-4]
    3920:	bl	372c <__flatbuffers_uoffset_read_from_pe>
    3924:	ldr	r1, [sp, #4]
    3928:	add	r0, r0, r1
    392c:	str	r0, [sp, #8]
    3930:	ldr	r0, [fp, #-4]
    3934:	ldr	r1, [sp, #12]
    3938:	bl	3b90 <__flatbuffers_uoffset_write_to_pe>
    393c:	ldr	r0, [fp, #-4]
    3940:	ldr	r1, [fp, #-12]
    3944:	add	r0, r0, r1, lsl #2
    3948:	ldr	r1, [sp, #8]
    394c:	bl	3b90 <__flatbuffers_uoffset_write_to_pe>
    3950:	ldr	r0, [fp, #-4]
    3954:	ldr	r1, [fp, #-12]
    3958:	mvn	r2, #0
    395c:	add	r1, r1, r2
    3960:	str	r1, [fp, #-12]
    3964:	movw	r2, #0
    3968:	str	r1, [sp]
    396c:	mov	r1, r2
    3970:	ldr	r2, [sp]
    3974:	bl	39d4 <__reflection_Field_sort_by_name__heap_sift_down>
    3978:	b	38e4 <__reflection_Field_sort_by_name__heap_sort+0x70>
    397c:	mov	sp, fp
    3980:	pop	{fp, pc}

00003984 <reflection_Field_vec_len>:
    3984:	push	{fp, lr}
    3988:	mov	fp, sp
    398c:	sub	sp, sp, #8
    3990:	str	r0, [sp, #4]
    3994:	ldr	r0, [sp, #4]
    3998:	movw	r1, #0
    399c:	cmp	r0, r1
    39a0:	beq	39bc <reflection_Field_vec_len+0x38>
    39a4:	ldr	r0, [sp, #4]
    39a8:	mvn	r1, #3
    39ac:	add	r0, r0, r1
    39b0:	bl	372c <__flatbuffers_uoffset_read_from_pe>
    39b4:	str	r0, [sp]
    39b8:	b	39c8 <reflection_Field_vec_len+0x44>
    39bc:	movw	r0, #0
    39c0:	str	r0, [sp]
    39c4:	b	39c8 <reflection_Field_vec_len+0x44>
    39c8:	ldr	r0, [sp]
    39cc:	mov	sp, fp
    39d0:	pop	{fp, pc}

000039d4 <__reflection_Field_sort_by_name__heap_sift_down>:
    39d4:	push	{fp, lr}
    39d8:	mov	fp, sp
    39dc:	sub	sp, sp, #72	; 0x48
    39e0:	str	r0, [fp, #-4]
    39e4:	str	r1, [fp, #-8]
    39e8:	str	r2, [fp, #-12]
    39ec:	ldr	r0, [fp, #-8]
    39f0:	str	r0, [fp, #-20]	; 0xffffffec
    39f4:	ldr	r0, [fp, #-20]	; 0xffffffec
    39f8:	lsl	r0, r0, #1
    39fc:	ldr	r1, [fp, #-12]
    3a00:	cmp	r0, r1
    3a04:	bhi	3b88 <__reflection_Field_sort_by_name__heap_sift_down+0x1b4>
    3a08:	ldr	r0, [fp, #-20]	; 0xffffffec
    3a0c:	lsl	r0, r0, #1
    3a10:	str	r0, [fp, #-16]
    3a14:	ldr	r0, [fp, #-16]
    3a18:	ldr	r1, [fp, #-12]
    3a1c:	cmp	r0, r1
    3a20:	bcs	3a9c <__reflection_Field_sort_by_name__heap_sift_down+0xc8>
    3a24:	ldr	r0, [fp, #-4]
    3a28:	ldr	r1, [fp, #-16]
    3a2c:	bl	3cc4 <reflection_Field_vec_at>
    3a30:	bl	3bbc <reflection_Field_name>
    3a34:	str	r0, [fp, #-24]	; 0xffffffe8
    3a38:	ldr	r0, [fp, #-4]
    3a3c:	ldr	r1, [fp, #-16]
    3a40:	add	r1, r1, #1
    3a44:	bl	3cc4 <reflection_Field_vec_at>
    3a48:	bl	3bbc <reflection_Field_name>
    3a4c:	str	r0, [fp, #-28]	; 0xffffffe4
    3a50:	ldr	r0, [fp, #-24]	; 0xffffffe8
    3a54:	ldr	r1, [fp, #-28]	; 0xffffffe4
    3a58:	ldr	r2, [fp, #-28]	; 0xffffffe4
    3a5c:	str	r0, [sp, #24]
    3a60:	mov	r0, r2
    3a64:	str	r1, [sp, #20]
    3a68:	bl	3e24 <flatbuffers_string_len>
    3a6c:	ldr	r1, [sp, #24]
    3a70:	str	r0, [sp, #16]
    3a74:	mov	r0, r1
    3a78:	ldr	r1, [sp, #20]
    3a7c:	ldr	r2, [sp, #16]
    3a80:	bl	3d48 <__flatbuffers_string_n_cmp>
    3a84:	cmp	r0, #0
    3a88:	bge	3a98 <__reflection_Field_sort_by_name__heap_sift_down+0xc4>
    3a8c:	ldr	r0, [fp, #-16]
    3a90:	add	r0, r0, #1
    3a94:	str	r0, [fp, #-16]
    3a98:	b	3a9c <__reflection_Field_sort_by_name__heap_sift_down+0xc8>
    3a9c:	ldr	r0, [fp, #-4]
    3aa0:	ldr	r1, [fp, #-20]	; 0xffffffec
    3aa4:	bl	3cc4 <reflection_Field_vec_at>
    3aa8:	bl	3bbc <reflection_Field_name>
    3aac:	str	r0, [fp, #-32]	; 0xffffffe0
    3ab0:	ldr	r0, [fp, #-4]
    3ab4:	ldr	r1, [fp, #-16]
    3ab8:	bl	3cc4 <reflection_Field_vec_at>
    3abc:	bl	3bbc <reflection_Field_name>
    3ac0:	str	r0, [fp, #-24]	; 0xffffffe8
    3ac4:	ldr	r0, [fp, #-32]	; 0xffffffe0
    3ac8:	ldr	r1, [fp, #-24]	; 0xffffffe8
    3acc:	ldr	r2, [fp, #-24]	; 0xffffffe8
    3ad0:	str	r0, [sp, #12]
    3ad4:	mov	r0, r2
    3ad8:	str	r1, [sp, #8]
    3adc:	bl	3e24 <flatbuffers_string_len>
    3ae0:	ldr	r1, [sp, #12]
    3ae4:	str	r0, [sp, #4]
    3ae8:	mov	r0, r1
    3aec:	ldr	r1, [sp, #8]
    3af0:	ldr	r2, [sp, #4]
    3af4:	bl	3d48 <__flatbuffers_string_n_cmp>
    3af8:	cmp	r0, #0
    3afc:	bge	3b80 <__reflection_Field_sort_by_name__heap_sift_down+0x1ac>
    3b00:	ldr	r0, [fp, #-20]	; 0xffffffec
    3b04:	ldr	r1, [fp, #-16]
    3b08:	sub	r0, r0, r1
    3b0c:	lsl	r0, r0, #2
    3b10:	str	r0, [sp, #28]
    3b14:	ldr	r0, [fp, #-4]
    3b18:	ldr	r1, [fp, #-16]
    3b1c:	add	r0, r0, r1, lsl #2
    3b20:	bl	372c <__flatbuffers_uoffset_read_from_pe>
    3b24:	ldr	r1, [sp, #28]
    3b28:	sub	r0, r0, r1
    3b2c:	str	r0, [sp, #36]	; 0x24
    3b30:	ldr	r0, [fp, #-4]
    3b34:	ldr	r1, [fp, #-20]	; 0xffffffec
    3b38:	add	r0, r0, r1, lsl #2
    3b3c:	bl	372c <__flatbuffers_uoffset_read_from_pe>
    3b40:	ldr	r1, [sp, #28]
    3b44:	add	r0, r0, r1
    3b48:	str	r0, [sp, #32]
    3b4c:	ldr	r0, [fp, #-4]
    3b50:	ldr	r1, [fp, #-20]	; 0xffffffec
    3b54:	add	r0, r0, r1, lsl #2
    3b58:	ldr	r1, [sp, #36]	; 0x24
    3b5c:	bl	3b90 <__flatbuffers_uoffset_write_to_pe>
    3b60:	ldr	r0, [fp, #-4]
    3b64:	ldr	r1, [fp, #-16]
    3b68:	add	r0, r0, r1, lsl #2
    3b6c:	ldr	r1, [sp, #32]
    3b70:	bl	3b90 <__flatbuffers_uoffset_write_to_pe>
    3b74:	ldr	r0, [fp, #-16]
    3b78:	str	r0, [fp, #-20]	; 0xffffffec
    3b7c:	b	3b84 <__reflection_Field_sort_by_name__heap_sift_down+0x1b0>
    3b80:	b	3b88 <__reflection_Field_sort_by_name__heap_sift_down+0x1b4>
    3b84:	b	39f4 <__reflection_Field_sort_by_name__heap_sift_down+0x20>
    3b88:	mov	sp, fp
    3b8c:	pop	{fp, pc}

00003b90 <__flatbuffers_uoffset_write_to_pe>:
    3b90:	push	{fp, lr}
    3b94:	mov	fp, sp
    3b98:	sub	sp, sp, #8
    3b9c:	str	r0, [sp, #4]
    3ba0:	str	r1, [sp]
    3ba4:	ldr	r0, [sp]
    3ba8:	bl	3e74 <__flatbuffers_uoffset_cast_to_pe>
    3bac:	ldr	r1, [sp, #4]
    3bb0:	str	r0, [r1]
    3bb4:	mov	sp, fp
    3bb8:	pop	{fp, pc}

00003bbc <reflection_Field_name>:
    3bbc:	push	{fp, lr}
    3bc0:	mov	fp, sp
    3bc4:	sub	sp, sp, #24
    3bc8:	str	r0, [fp, #-4]
    3bcc:	movw	r0, #0
    3bd0:	strh	r0, [fp, #-10]
    3bd4:	ldr	r0, [fp, #-4]
    3bd8:	movw	r1, #0
    3bdc:	cmp	r0, r1
    3be0:	beq	3bec <reflection_Field_name+0x30>
    3be4:	b	3be8 <reflection_Field_name+0x2c>
    3be8:	b	3c0c <reflection_Field_name+0x50>
    3bec:	movw	r0, #0
    3bf0:	movt	r0, #0
    3bf4:	movw	r1, #0
    3bf8:	movt	r1, #0
    3bfc:	movw	r2, #195	; 0xc3
    3c00:	movw	r3, #0
    3c04:	movt	r3, #0
    3c08:	bl	0 <__assert_fail>
    3c0c:	mov	r0, #0
    3c10:	strh	r0, [sp, #12]
    3c14:	ldr	r0, [fp, #-4]
    3c18:	str	r0, [sp, #4]
    3c1c:	bl	37b0 <__flatbuffers_soffset_read_from_pe>
    3c20:	ldr	r1, [sp, #4]
    3c24:	sub	r0, r1, r0
    3c28:	str	r0, [sp, #8]
    3c2c:	ldr	r0, [sp, #8]
    3c30:	bl	37d4 <__flatbuffers_voffset_read_from_pe>
    3c34:	ldrh	r1, [sp, #12]
    3c38:	add	r1, r1, #3
    3c3c:	lsl	r1, r1, #1
    3c40:	cmp	r0, r1
    3c44:	bcc	3c60 <reflection_Field_name+0xa4>
    3c48:	ldr	r0, [sp, #8]
    3c4c:	ldrh	r1, [sp, #12]
    3c50:	add	r0, r0, r1, lsl #1
    3c54:	add	r0, r0, #4
    3c58:	bl	37d4 <__flatbuffers_voffset_read_from_pe>
    3c5c:	strh	r0, [fp, #-10]
    3c60:	ldrsh	r0, [fp, #-10]
    3c64:	cmp	r0, #0
    3c68:	beq	3ca4 <reflection_Field_name+0xe8>
    3c6c:	ldr	r0, [fp, #-4]
    3c70:	ldrh	r1, [fp, #-10]
    3c74:	add	r0, r0, r1
    3c78:	str	r0, [fp, #-8]
    3c7c:	ldr	r0, [fp, #-8]
    3c80:	add	r0, r0, #4
    3c84:	ldr	r1, [fp, #-8]
    3c88:	str	r0, [sp]
    3c8c:	mov	r0, r1
    3c90:	bl	372c <__flatbuffers_uoffset_read_from_pe>
    3c94:	ldr	r1, [sp]
    3c98:	add	r0, r1, r0
    3c9c:	mov	sp, fp
    3ca0:	pop	{fp, pc}
    3ca4:	movw	r0, #0
    3ca8:	movt	r0, #0
    3cac:	movw	r1, #0
    3cb0:	movt	r1, #0
    3cb4:	movw	r2, #195	; 0xc3
    3cb8:	movw	r3, #0
    3cbc:	movt	r3, #0
    3cc0:	bl	0 <__assert_fail>

00003cc4 <reflection_Field_vec_at>:
    3cc4:	push	{fp, lr}
    3cc8:	mov	fp, sp
    3ccc:	sub	sp, sp, #16
    3cd0:	str	r0, [fp, #-4]
    3cd4:	str	r1, [sp, #8]
    3cd8:	ldr	r0, [fp, #-4]
    3cdc:	ldr	r1, [sp, #8]
    3ce0:	add	r0, r0, r1, lsl #2
    3ce4:	str	r0, [sp, #4]
    3ce8:	ldr	r0, [fp, #-4]
    3cec:	bl	3824 <flatbuffers_vec_len>
    3cf0:	ldr	r1, [sp, #8]
    3cf4:	cmp	r0, r1
    3cf8:	bls	3d04 <reflection_Field_vec_at+0x40>
    3cfc:	b	3d00 <reflection_Field_vec_at+0x3c>
    3d00:	b	3d24 <reflection_Field_vec_at+0x60>
    3d04:	movw	r0, #0
    3d08:	movt	r0, #0
    3d0c:	movw	r1, #0
    3d10:	movt	r1, #0
    3d14:	movw	r2, #192	; 0xc0
    3d18:	movw	r3, #0
    3d1c:	movt	r3, #0
    3d20:	bl	0 <__assert_fail>
    3d24:	ldr	r0, [sp, #4]
    3d28:	ldr	r1, [sp, #4]
    3d2c:	str	r0, [sp]
    3d30:	mov	r0, r1
    3d34:	bl	372c <__flatbuffers_uoffset_read_from_pe>
    3d38:	ldr	r1, [sp]
    3d3c:	add	r0, r1, r0
    3d40:	mov	sp, fp
    3d44:	pop	{fp, pc}

00003d48 <__flatbuffers_string_n_cmp>:
    3d48:	push	{fp, lr}
    3d4c:	mov	fp, sp
    3d50:	sub	sp, sp, #48	; 0x30
    3d54:	str	r0, [fp, #-4]
    3d58:	str	r1, [fp, #-8]
    3d5c:	str	r2, [fp, #-12]
    3d60:	ldr	r0, [fp, #-4]
    3d64:	bl	3e24 <flatbuffers_string_len>
    3d68:	str	r0, [fp, #-16]
    3d6c:	ldr	r0, [fp, #-4]
    3d70:	ldr	r1, [fp, #-8]
    3d74:	ldr	r2, [fp, #-16]
    3d78:	ldr	r3, [fp, #-12]
    3d7c:	cmp	r2, r3
    3d80:	str	r0, [sp, #24]
    3d84:	str	r1, [sp, #20]
    3d88:	bcs	3d98 <__flatbuffers_string_n_cmp+0x50>
    3d8c:	ldr	r0, [fp, #-16]
    3d90:	str	r0, [sp, #16]
    3d94:	b	3da0 <__flatbuffers_string_n_cmp+0x58>
    3d98:	ldr	r0, [fp, #-12]
    3d9c:	str	r0, [sp, #16]
    3da0:	ldr	r0, [sp, #16]
    3da4:	ldr	r1, [sp, #24]
    3da8:	str	r0, [sp, #12]
    3dac:	mov	r0, r1
    3db0:	ldr	r1, [sp, #20]
    3db4:	ldr	r2, [sp, #12]
    3db8:	bl	0 <strncmp>
    3dbc:	str	r0, [fp, #-20]	; 0xffffffec
    3dc0:	ldr	r0, [fp, #-20]	; 0xffffffec
    3dc4:	cmp	r0, #0
    3dc8:	beq	3dd8 <__flatbuffers_string_n_cmp+0x90>
    3dcc:	ldr	r0, [fp, #-20]	; 0xffffffec
    3dd0:	str	r0, [sp, #8]
    3dd4:	b	3e18 <__flatbuffers_string_n_cmp+0xd0>
    3dd8:	ldr	r0, [fp, #-16]
    3ddc:	ldr	r1, [fp, #-12]
    3de0:	cmp	r0, r1
    3de4:	bcs	3df4 <__flatbuffers_string_n_cmp+0xac>
    3de8:	mvn	r0, #0
    3dec:	str	r0, [sp, #4]
    3df0:	b	3e10 <__flatbuffers_string_n_cmp+0xc8>
    3df4:	ldr	r0, [fp, #-16]
    3df8:	ldr	r1, [fp, #-12]
    3dfc:	cmp	r0, r1
    3e00:	movw	r0, #0
    3e04:	movhi	r0, #1
    3e08:	and	r0, r0, #1
    3e0c:	str	r0, [sp, #4]
    3e10:	ldr	r0, [sp, #4]
    3e14:	str	r0, [sp, #8]
    3e18:	ldr	r0, [sp, #8]
    3e1c:	mov	sp, fp
    3e20:	pop	{fp, pc}

00003e24 <flatbuffers_string_len>:
    3e24:	push	{fp, lr}
    3e28:	mov	fp, sp
    3e2c:	sub	sp, sp, #8
    3e30:	str	r0, [sp, #4]
    3e34:	ldr	r0, [sp, #4]
    3e38:	movw	r1, #0
    3e3c:	cmp	r0, r1
    3e40:	beq	3e5c <flatbuffers_string_len+0x38>
    3e44:	ldr	r0, [sp, #4]
    3e48:	mvn	r1, #3
    3e4c:	add	r0, r0, r1
    3e50:	bl	372c <__flatbuffers_uoffset_read_from_pe>
    3e54:	str	r0, [sp]
    3e58:	b	3e68 <flatbuffers_string_len+0x44>
    3e5c:	movw	r0, #0
    3e60:	str	r0, [sp]
    3e64:	b	3e68 <flatbuffers_string_len+0x44>
    3e68:	ldr	r0, [sp]
    3e6c:	mov	sp, fp
    3e70:	pop	{fp, pc}

00003e74 <__flatbuffers_uoffset_cast_to_pe>:
    3e74:	sub	sp, sp, #4
    3e78:	str	r0, [sp]
    3e7c:	ldr	r0, [sp]
    3e80:	add	sp, sp, #4
    3e84:	bx	lr

00003e88 <checkmem>:
    3e88:	push	{fp, lr}
    3e8c:	mov	fp, sp
    3e90:	sub	sp, sp, #8
    3e94:	str	r0, [sp, #4]
    3e98:	ldr	r0, [sp, #4]
    3e9c:	movw	r1, #0
    3ea0:	cmp	r0, r1
    3ea4:	bne	3ed0 <checkmem+0x48>
    3ea8:	movw	r0, #0
    3eac:	movt	r0, #0
    3eb0:	ldr	r0, [r0]
    3eb4:	movw	r1, #0
    3eb8:	movt	r1, #0
    3ebc:	bl	0 <fprintf>
    3ec0:	movw	r1, #1
    3ec4:	str	r0, [sp]
    3ec8:	mov	r0, r1
    3ecc:	bl	0 <exit>
    3ed0:	mov	sp, fp
    3ed4:	pop	{fp, pc}
