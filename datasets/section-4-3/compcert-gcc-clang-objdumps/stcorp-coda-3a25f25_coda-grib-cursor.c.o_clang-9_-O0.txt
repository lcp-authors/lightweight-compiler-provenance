
../compcert-repos/stcorp-coda-3a25f25/CMakeFiles/coda_static.dir/libcoda/coda-grib-cursor.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <coda_grib_cursor_set_product>:
       0:	sub	sp, sp, #8
       4:	str	r0, [sp, #4]
       8:	str	r1, [sp]
       c:	ldr	r0, [sp]
      10:	ldr	r1, [sp, #4]
      14:	str	r0, [r1]
      18:	ldr	r0, [sp, #4]
      1c:	mov	r1, #1
      20:	str	r1, [r0, #4]
      24:	ldr	r0, [sp]
      28:	ldr	r0, [r0, #20]
      2c:	ldr	r1, [sp, #4]
      30:	str	r0, [r1, #8]
      34:	ldr	r0, [sp, #4]
      38:	mvn	r1, #0
      3c:	str	r1, [r0, #12]
      40:	ldr	r0, [sp, #4]
      44:	str	r1, [r0, #20]
      48:	str	r1, [r0, #16]
      4c:	movw	r0, #0
      50:	add	sp, sp, #8
      54:	bx	lr

00000058 <coda_grib_cursor_goto_array_element>:
      58:	push	{fp, lr}
      5c:	mov	fp, sp
      60:	sub	sp, sp, #24
      64:	str	r0, [fp, #-8]
      68:	str	r1, [sp, #12]
      6c:	str	r2, [sp, #8]
      70:	ldr	r0, [sp, #12]
      74:	cmp	r0, #1
      78:	beq	ac <coda_grib_cursor_goto_array_element+0x54>
      7c:	ldr	r2, [sp, #12]
      80:	mvn	r0, #105	; 0x69
      84:	movw	r1, #0
      88:	movt	r1, #0
      8c:	movw	r3, #0
      90:	movt	r3, #0
      94:	movw	ip, #68	; 0x44
      98:	str	ip, [sp]
      9c:	bl	0 <coda_set_error>
      a0:	mvn	r0, #0
      a4:	str	r0, [fp, #-4]
      a8:	b	c0 <coda_grib_cursor_goto_array_element+0x68>
      ac:	ldr	r0, [fp, #-8]
      b0:	ldr	r1, [sp, #8]
      b4:	ldr	r1, [r1]
      b8:	bl	cc <coda_grib_cursor_goto_array_element_by_index>
      bc:	str	r0, [fp, #-4]
      c0:	ldr	r0, [fp, #-4]
      c4:	mov	sp, fp
      c8:	pop	{fp, pc}

000000cc <coda_grib_cursor_goto_array_element_by_index>:
      cc:	push	{fp, lr}
      d0:	mov	fp, sp
      d4:	sub	sp, sp, #32
      d8:	str	r0, [fp, #-8]
      dc:	str	r1, [fp, #-12]
      e0:	ldr	r0, [fp, #-8]
      e4:	ldr	r1, [r0, #4]
      e8:	add	r0, r0, r1, lsl #4
      ec:	ldr	r0, [r0, #-8]
      f0:	str	r0, [sp, #16]
      f4:	ldr	r0, [pc, #220]	; 1d8 <coda_grib_cursor_goto_array_element_by_index+0x10c>
      f8:	ldr	r0, [pc, r0]
      fc:	str	r0, [sp, #12]
     100:	bl	0 <__aeabi_read_tp>
     104:	ldr	r1, [sp, #12]
     108:	ldr	r0, [r0, r1]
     10c:	cmp	r0, #0
     110:	beq	174 <coda_grib_cursor_goto_array_element_by_index+0xa8>
     114:	ldr	r0, [fp, #-12]
     118:	cmp	r0, #0
     11c:	blt	134 <coda_grib_cursor_goto_array_element_by_index+0x68>
     120:	ldr	r0, [fp, #-12]
     124:	ldr	r1, [sp, #16]
     128:	ldr	r1, [r1, #8]
     12c:	cmp	r0, r1
     130:	blt	170 <coda_grib_cursor_goto_array_element_by_index+0xa4>
     134:	ldr	r2, [fp, #-12]
     138:	ldr	r0, [sp, #16]
     13c:	ldr	r3, [r0, #8]
     140:	mvn	r0, #106	; 0x6a
     144:	movw	r1, #0
     148:	movt	r1, #0
     14c:	movw	ip, #0
     150:	movt	ip, #0
     154:	str	ip, [sp]
     158:	movw	ip, #84	; 0x54
     15c:	str	ip, [sp, #4]
     160:	bl	0 <coda_set_error>
     164:	mvn	r0, #0
     168:	str	r0, [fp, #-4]
     16c:	b	1cc <coda_grib_cursor_goto_array_element_by_index+0x100>
     170:	b	174 <coda_grib_cursor_goto_array_element_by_index+0xa8>
     174:	ldr	r0, [fp, #-8]
     178:	ldr	r1, [r0, #4]
     17c:	add	r1, r1, #1
     180:	str	r1, [r0, #4]
     184:	ldr	r0, [sp, #16]
     188:	ldr	r0, [r0, #12]
     18c:	ldr	r1, [fp, #-8]
     190:	ldr	r2, [r1, #4]
     194:	add	r1, r1, r2, lsl #4
     198:	str	r0, [r1, #-8]
     19c:	ldr	r0, [fp, #-12]
     1a0:	ldr	r1, [fp, #-8]
     1a4:	ldr	r2, [r1, #4]
     1a8:	add	r1, r1, r2, lsl #4
     1ac:	str	r0, [r1, #-4]
     1b0:	ldr	r0, [fp, #-8]
     1b4:	ldr	r1, [r0, #4]
     1b8:	mvn	r2, #0
     1bc:	str	r2, [r0, r1, lsl #4]!
     1c0:	str	r2, [r0, #4]
     1c4:	movw	r0, #0
     1c8:	str	r0, [fp, #-4]
     1cc:	ldr	r0, [fp, #-4]
     1d0:	mov	sp, fp
     1d4:	pop	{fp, pc}
     1d8:	.word	0x000000d8

000001dc <coda_grib_cursor_goto_next_array_element>:
     1dc:	push	{fp, lr}
     1e0:	mov	fp, sp
     1e4:	sub	sp, sp, #8
     1e8:	str	r0, [sp]
     1ec:	ldr	r0, [sp]
     1f0:	ldr	r1, [r0, #4]
     1f4:	sub	r1, r1, #1
     1f8:	str	r1, [r0, #4]
     1fc:	ldr	r0, [sp]
     200:	add	r1, r0, #8
     204:	ldr	r2, [r0, #4]
     208:	add	r1, r1, r2, lsl #4
     20c:	ldr	r1, [r1, #4]
     210:	add	r1, r1, #1
     214:	bl	cc <coda_grib_cursor_goto_array_element_by_index>
     218:	cmp	r0, #0
     21c:	beq	23c <coda_grib_cursor_goto_next_array_element+0x60>
     220:	ldr	r0, [sp]
     224:	ldr	r1, [r0, #4]
     228:	add	r1, r1, #1
     22c:	str	r1, [r0, #4]
     230:	mvn	r0, #0
     234:	str	r0, [sp, #4]
     238:	b	244 <coda_grib_cursor_goto_next_array_element+0x68>
     23c:	movw	r0, #0
     240:	str	r0, [sp, #4]
     244:	ldr	r0, [sp, #4]
     248:	mov	sp, fp
     24c:	pop	{fp, pc}

00000250 <coda_grib_cursor_goto_attributes>:
     250:	push	{fp, lr}
     254:	mov	fp, sp
     258:	sub	sp, sp, #8
     25c:	str	r0, [sp, #4]
     260:	ldr	r0, [sp, #4]
     264:	ldr	r1, [r0, #4]
     268:	add	r0, r0, r1, lsl #4
     26c:	ldr	r0, [r0, #-8]
     270:	ldr	r0, [r0, #4]
     274:	ldr	r0, [r0]
     278:	str	r0, [sp]
     27c:	ldr	r0, [sp, #4]
     280:	ldr	r1, [r0, #4]
     284:	add	r1, r1, #1
     288:	str	r1, [r0, #4]
     28c:	ldr	r0, [sp]
     290:	bl	0 <coda_mem_empty_record>
     294:	ldr	r1, [sp, #4]
     298:	ldr	r2, [r1, #4]
     29c:	add	r1, r1, r2, lsl #4
     2a0:	str	r0, [r1, #-8]
     2a4:	ldr	r0, [sp, #4]
     2a8:	ldr	r1, [r0, #4]
     2ac:	add	r0, r0, r1, lsl #4
     2b0:	mvn	r1, #0
     2b4:	str	r1, [r0, #-4]
     2b8:	ldr	r0, [sp, #4]
     2bc:	ldr	r2, [r0, #4]
     2c0:	str	r1, [r0, r2, lsl #4]!
     2c4:	str	r1, [r0, #4]
     2c8:	movw	r0, #0
     2cc:	mov	sp, fp
     2d0:	pop	{fp, pc}

000002d4 <coda_grib_cursor_get_num_elements>:
     2d4:	sub	sp, sp, #8
     2d8:	str	r0, [sp, #4]
     2dc:	str	r1, [sp]
     2e0:	ldr	r0, [sp, #4]
     2e4:	add	r1, r0, #8
     2e8:	ldr	r0, [r0, #4]
     2ec:	sub	r0, r0, #1
     2f0:	add	r0, r1, r0, lsl #4
     2f4:	ldr	r0, [r0]
     2f8:	ldr	r0, [r0, #4]
     2fc:	ldr	r0, [r0, #8]
     300:	cmp	r0, #1
     304:	bne	330 <coda_grib_cursor_get_num_elements+0x5c>
     308:	ldr	r0, [sp, #4]
     30c:	add	r1, r0, #8
     310:	ldr	r0, [r0, #4]
     314:	sub	r0, r0, #1
     318:	add	r0, r1, r0, lsl #4
     31c:	ldr	r0, [r0]
     320:	ldr	r0, [r0, #8]
     324:	ldr	r1, [sp]
     328:	str	r0, [r1]
     32c:	b	33c <coda_grib_cursor_get_num_elements+0x68>
     330:	ldr	r0, [sp]
     334:	movw	r1, #1
     338:	str	r1, [r0]
     33c:	movw	r0, #0
     340:	add	sp, sp, #8
     344:	bx	lr

00000348 <coda_grib_cursor_get_array_dim>:
     348:	push	{fp, lr}
     34c:	mov	fp, sp
     350:	sub	sp, sp, #16
     354:	str	r0, [fp, #-4]
     358:	str	r1, [sp, #8]
     35c:	str	r2, [sp, #4]
     360:	ldr	r0, [sp, #8]
     364:	movw	r1, #1
     368:	str	r1, [r0]
     36c:	ldr	r0, [fp, #-4]
     370:	ldr	r1, [sp, #4]
     374:	bl	2d4 <coda_grib_cursor_get_num_elements>
     378:	mov	sp, fp
     37c:	pop	{fp, pc}

00000380 <coda_grib_cursor_read_float>:
     380:	push	{r4, sl, fp, lr}
     384:	add	fp, sp, #8
     388:	sub	sp, sp, #72	; 0x48
     38c:	str	r0, [fp, #-16]
     390:	str	r1, [fp, #-20]	; 0xffffffec
     394:	ldr	r0, [fp, #-16]
     398:	ldr	r0, [r0, #4]
     39c:	cmp	r0, #1
     3a0:	ble	3a8 <coda_grib_cursor_read_float+0x28>
     3a4:	b	3c8 <coda_grib_cursor_read_float+0x48>
     3a8:	movw	r0, #0
     3ac:	movt	r0, #0
     3b0:	movw	r1, #0
     3b4:	movt	r1, #0
     3b8:	movw	r2, #144	; 0x90
     3bc:	movw	r3, #0
     3c0:	movt	r3, #0
     3c4:	bl	0 <__assert_fail>
     3c8:	ldr	r0, [fp, #-16]
     3cc:	add	r1, r0, #8
     3d0:	ldr	r0, [r0, #4]
     3d4:	sub	r0, r0, #2
     3d8:	add	r0, r1, r0, lsl #4
     3dc:	ldr	r0, [r0]
     3e0:	str	r0, [fp, #-24]	; 0xffffffe8
     3e4:	ldr	r0, [fp, #-24]	; 0xffffffe8
     3e8:	ldr	r0, [r0, #4]
     3ec:	ldr	r0, [r0, #8]
     3f0:	cmp	r0, #1
     3f4:	bne	3fc <coda_grib_cursor_read_float+0x7c>
     3f8:	b	41c <coda_grib_cursor_read_float+0x9c>
     3fc:	movw	r0, #0
     400:	movt	r0, #0
     404:	movw	r1, #0
     408:	movt	r1, #0
     40c:	movw	r2, #146	; 0x92
     410:	movw	r3, #0
     414:	movt	r3, #0
     418:	bl	0 <__assert_fail>
     41c:	ldr	r0, [fp, #-16]
     420:	add	r1, r0, #8
     424:	ldr	r0, [r0, #4]
     428:	sub	r0, r0, #1
     42c:	add	r0, r1, r0, lsl #4
     430:	ldr	r0, [r0, #4]
     434:	str	r0, [fp, #-28]	; 0xffffffe4
     438:	ldr	r0, [fp, #-24]	; 0xffffffe8
     43c:	ldr	r0, [r0, #24]
     440:	cmp	r0, #0
     444:	beq	6d8 <coda_grib_cursor_read_float+0x358>
     448:	mov	r0, #0
     44c:	str	r0, [sp, #44]	; 0x2c
     450:	str	r0, [sp, #40]	; 0x28
     454:	ldr	r0, [fp, #-24]	; 0xffffffe8
     458:	ldr	r0, [r0, #28]
     45c:	cmp	r0, #0
     460:	bne	480 <coda_grib_cursor_read_float+0x100>
     464:	ldr	r0, [fp, #-24]	; 0xffffffe8
     468:	vldr	s0, [r0, #36]	; 0x24
     46c:	ldr	r0, [fp, #-20]	; 0xffffffec
     470:	vstr	s0, [r0]
     474:	movw	r0, #0
     478:	str	r0, [fp, #-12]
     47c:	b	750 <coda_grib_cursor_read_float+0x3d0>
     480:	ldr	r0, [fp, #-24]	; 0xffffffe8
     484:	ldr	r0, [r0, #56]	; 0x38
     488:	movw	r1, #0
     48c:	cmp	r0, r1
     490:	beq	604 <coda_grib_cursor_read_float+0x284>
     494:	movw	r0, #0
     498:	str	r0, [sp, #24]
     49c:	ldr	r0, [fp, #-28]	; 0xffffffe4
     4a0:	asr	r0, r0, #3
     4a4:	str	r0, [sp, #28]
     4a8:	ldr	r0, [fp, #-24]	; 0xffffffe8
     4ac:	ldr	r0, [r0, #56]	; 0x38
     4b0:	ldr	r1, [sp, #28]
     4b4:	add	r0, r0, r1
     4b8:	ldrb	r0, [r0]
     4bc:	strb	r0, [sp, #35]	; 0x23
     4c0:	ldrb	r0, [sp, #35]	; 0x23
     4c4:	ldr	r1, [fp, #-28]	; 0xffffffe4
     4c8:	and	r1, r1, #7
     4cc:	movw	r2, #7
     4d0:	sub	r1, r2, r1
     4d4:	asr	r0, r0, r1
     4d8:	and	r0, r0, #1
     4dc:	cmp	r0, #0
     4e0:	bne	500 <coda_grib_cursor_read_float+0x180>
     4e4:	bl	0 <coda_NaN>
     4e8:	vcvt.f32.f64	s2, d0
     4ec:	ldr	r0, [fp, #-20]	; 0xffffffec
     4f0:	vstr	s2, [r0]
     4f4:	movw	r0, #0
     4f8:	str	r0, [fp, #-12]
     4fc:	b	750 <coda_grib_cursor_read_float+0x3d0>
     500:	movw	r0, #0
     504:	str	r0, [sp, #20]
     508:	ldr	r0, [sp, #20]
     50c:	ldr	r1, [sp, #28]
     510:	asr	r1, r1, #4
     514:	cmp	r0, r1
     518:	bge	554 <coda_grib_cursor_read_float+0x1d4>
     51c:	ldr	r0, [fp, #-24]	; 0xffffffe8
     520:	ldr	r0, [r0, #60]	; 0x3c
     524:	ldr	r1, [sp, #20]
     528:	lsl	r1, r1, #4
     52c:	add	r1, r1, #15
     530:	add	r0, r0, r1
     534:	ldrb	r0, [r0]
     538:	ldr	r1, [sp, #24]
     53c:	add	r0, r1, r0
     540:	str	r0, [sp, #24]
     544:	ldr	r0, [sp, #20]
     548:	add	r0, r0, #1
     54c:	str	r0, [sp, #20]
     550:	b	508 <coda_grib_cursor_read_float+0x188>
     554:	ldr	r0, [sp, #28]
     558:	asr	r1, r0, #31
     55c:	add	r1, r0, r1, lsr #28
     560:	bic	r1, r1, #15
     564:	sub	r0, r0, r1
     568:	cmp	r0, #0
     56c:	beq	594 <coda_grib_cursor_read_float+0x214>
     570:	ldr	r0, [fp, #-24]	; 0xffffffe8
     574:	ldr	r0, [r0, #60]	; 0x3c
     578:	ldr	r1, [sp, #28]
     57c:	sub	r1, r1, #1
     580:	add	r0, r0, r1
     584:	ldrb	r0, [r0]
     588:	ldr	r1, [sp, #24]
     58c:	add	r0, r1, r0
     590:	str	r0, [sp, #24]
     594:	ldr	r0, [fp, #-24]	; 0xffffffe8
     598:	ldr	r0, [r0, #56]	; 0x38
     59c:	ldr	r1, [sp, #28]
     5a0:	add	r0, r0, r1
     5a4:	ldrb	r0, [r0]
     5a8:	strb	r0, [sp, #35]	; 0x23
     5ac:	movw	r0, #0
     5b0:	str	r0, [sp, #20]
     5b4:	ldr	r0, [sp, #20]
     5b8:	ldr	r1, [fp, #-28]	; 0xffffffe4
     5bc:	and	r1, r1, #7
     5c0:	cmp	r0, r1
     5c4:	bge	5fc <coda_grib_cursor_read_float+0x27c>
     5c8:	ldrb	r0, [sp, #35]	; 0x23
     5cc:	ldr	r1, [sp, #20]
     5d0:	movw	r2, #7
     5d4:	sub	r1, r2, r1
     5d8:	asr	r0, r0, r1
     5dc:	and	r0, r0, #1
     5e0:	ldr	r1, [sp, #24]
     5e4:	add	r0, r1, r0
     5e8:	str	r0, [sp, #24]
     5ec:	ldr	r0, [sp, #20]
     5f0:	add	r0, r0, #1
     5f4:	str	r0, [sp, #20]
     5f8:	b	5b4 <coda_grib_cursor_read_float+0x234>
     5fc:	ldr	r0, [sp, #24]
     600:	str	r0, [fp, #-28]	; 0xffffffe4
     604:	ldr	r0, [fp, #-24]	; 0xffffffe8
     608:	ldr	r0, [r0, #28]
     60c:	asr	r1, r0, #3
     610:	mov	r2, #1
     614:	add	r2, r2, r0, asr #3
     618:	tst	r0, #7
     61c:	movne	r1, r2
     620:	add	r0, sp, #40	; 0x28
     624:	sub	r0, r0, r1
     628:	add	r0, r0, #8
     62c:	str	r0, [sp, #36]	; 0x24
     630:	ldr	r0, [fp, #-16]
     634:	ldr	r0, [r0]
     638:	ldr	r0, [r0, #52]	; 0x34
     63c:	ldr	r1, [fp, #-24]	; 0xffffffe8
     640:	ldr	r2, [fp, #-28]	; 0xffffffe4
     644:	ldr	r3, [r1, #16]
     648:	ldr	ip, [r1, #20]
     64c:	ldr	r1, [r1, #28]
     650:	asr	lr, r1, #31
     654:	mul	r2, r2, r1
     658:	adds	r3, r3, r2
     65c:	adc	r2, ip, r2, asr #31
     660:	ldr	ip, [sp, #36]	; 0x24
     664:	mov	r4, sp
     668:	str	ip, [r4, #8]
     66c:	str	lr, [r4, #4]
     670:	str	r1, [r4]
     674:	str	r2, [sp, #16]
     678:	mov	r2, r3
     67c:	ldr	r3, [sp, #16]
     680:	bl	75c <read_bits>
     684:	cmp	r0, #0
     688:	beq	698 <coda_grib_cursor_read_float+0x318>
     68c:	mvn	r0, #0
     690:	str	r0, [fp, #-12]
     694:	b	750 <coda_grib_cursor_read_float+0x3d0>
     698:	add	r0, sp, #40	; 0x28
     69c:	bl	d04 <swap8>
     6a0:	ldr	r0, [sp, #40]	; 0x28
     6a4:	ldr	r1, [sp, #44]	; 0x2c
     6a8:	bl	0 <__aeabi_l2d>
     6ac:	vmov	d16, r0, r1
     6b0:	ldr	r0, [fp, #-24]	; 0xffffffe8
     6b4:	vldr	d17, [r0, #40]	; 0x28
     6b8:	vmul.f64	d16, d16, d17
     6bc:	ldr	r0, [fp, #-24]	; 0xffffffe8
     6c0:	vldr	d17, [r0, #48]	; 0x30
     6c4:	vadd.f64	d16, d16, d17
     6c8:	vcvt.f32.f64	s0, d16
     6cc:	ldr	r0, [fp, #-20]	; 0xffffffec
     6d0:	vstr	s0, [r0]
     6d4:	b	748 <coda_grib_cursor_read_float+0x3c8>
     6d8:	ldr	r0, [fp, #-16]
     6dc:	ldr	r0, [r0]
     6e0:	ldr	r0, [r0, #52]	; 0x34
     6e4:	ldr	r1, [fp, #-24]	; 0xffffffe8
     6e8:	ldr	r2, [r1, #16]
     6ec:	ldr	r1, [r1, #20]
     6f0:	lsr	r2, r2, #3
     6f4:	orr	r2, r2, r1, lsl #29
     6f8:	asr	r1, r1, #3
     6fc:	ldr	r3, [fp, #-28]	; 0xffffffe4
     700:	lsl	ip, r3, #2
     704:	adds	r2, r2, r3, lsl #2
     708:	adc	r3, r1, ip, asr #31
     70c:	ldr	r1, [fp, #-20]	; 0xffffffec
     710:	mov	ip, sp
     714:	str	r1, [ip, #8]
     718:	mov	r1, #0
     71c:	str	r1, [ip, #4]
     720:	mov	r1, #4
     724:	str	r1, [ip]
     728:	bl	e6c <read_bytes>
     72c:	cmp	r0, #0
     730:	beq	740 <coda_grib_cursor_read_float+0x3c0>
     734:	mvn	r0, #0
     738:	str	r0, [fp, #-12]
     73c:	b	750 <coda_grib_cursor_read_float+0x3d0>
     740:	ldr	r0, [fp, #-20]	; 0xffffffec
     744:	bl	10c0 <swap4>
     748:	movw	r0, #0
     74c:	str	r0, [fp, #-12]
     750:	ldr	r0, [fp, #-12]
     754:	sub	sp, fp, #8
     758:	pop	{r4, sl, fp, pc}

0000075c <read_bits>:
     75c:	push	{r4, r5, r6, sl, fp, lr}
     760:	add	fp, sp, #16
     764:	sub	sp, sp, #104	; 0x68
     768:	ldr	r1, [fp, #12]
     76c:	ldr	ip, [fp, #8]
     770:	ldr	lr, [fp, #16]
     774:	str	r0, [fp, #-24]	; 0xffffffe8
     778:	str	r3, [fp, #-28]	; 0xffffffe4
     77c:	str	r2, [fp, #-32]	; 0xffffffe0
     780:	str	r1, [fp, #-36]	; 0xffffffdc
     784:	str	ip, [fp, #-40]	; 0xffffffd8
     788:	ldr	r0, [fp, #-32]	; 0xffffffe0
     78c:	and	r0, r0, #7
     790:	ldr	r1, [fp, #-40]	; 0xffffffd8
     794:	ldr	r2, [fp, #-36]	; 0xffffffdc
     798:	adds	r0, r0, r1
     79c:	adc	r1, r2, #0
     7a0:	str	r0, [fp, #-56]	; 0xffffffc8
     7a4:	str	r1, [fp, #-52]	; 0xffffffcc
     7a8:	ldr	r0, [fp, #-56]	; 0xffffffc8
     7ac:	rsb	r0, r0, #0
     7b0:	and	r0, r0, #7
     7b4:	str	r0, [fp, #-44]	; 0xffffffd4
     7b8:	ldr	r0, [fp, #-56]	; 0xffffffc8
     7bc:	ldr	r1, [fp, #-52]	; 0xffffffcc
     7c0:	rsbs	r0, r0, #8
     7c4:	rscs	r1, r1, #0
     7c8:	blt	874 <read_bits+0x118>
     7cc:	b	7d0 <read_bits+0x74>
     7d0:	ldr	r0, [fp, #-24]	; 0xffffffe8
     7d4:	ldr	r1, [fp, #-32]	; 0xffffffe0
     7d8:	ldr	r2, [fp, #-28]	; 0xffffffe4
     7dc:	lsr	r1, r1, #3
     7e0:	orr	r1, r1, r2, lsl #29
     7e4:	asr	r3, r2, #3
     7e8:	ldr	r2, [fp, #16]
     7ec:	mov	ip, sp
     7f0:	str	r2, [ip, #8]
     7f4:	mov	r2, #0
     7f8:	str	r2, [ip, #4]
     7fc:	mov	r2, #1
     800:	str	r2, [ip]
     804:	mov	r2, r1
     808:	bl	e6c <read_bytes>
     80c:	cmp	r0, #0
     810:	beq	820 <read_bits+0xc4>
     814:	mvn	r0, #0
     818:	str	r0, [fp, #-20]	; 0xffffffec
     81c:	b	cf8 <read_bits+0x59c>
     820:	ldr	r0, [fp, #-44]	; 0xffffffd4
     824:	cmp	r0, #0
     828:	beq	840 <read_bits+0xe4>
     82c:	ldr	r0, [fp, #-44]	; 0xffffffd4
     830:	ldr	r1, [fp, #16]
     834:	ldrb	r2, [r1]
     838:	asr	r0, r2, r0
     83c:	strb	r0, [r1]
     840:	ldrb	r0, [fp, #-40]	; 0xffffffd8
     844:	tst	r0, #7
     848:	beq	870 <read_bits+0x114>
     84c:	b	850 <read_bits+0xf4>
     850:	ldr	r0, [fp, #-40]	; 0xffffffd8
     854:	movw	r1, #1
     858:	lsl	r0, r1, r0
     85c:	sub	r0, r0, #1
     860:	ldr	r1, [fp, #16]
     864:	ldrb	r2, [r1]
     868:	and	r0, r2, r0
     86c:	strb	r0, [r1]
     870:	b	cf0 <read_bits+0x594>
     874:	ldr	r0, [fp, #-44]	; 0xffffffd4
     878:	cmp	r0, #0
     87c:	bne	9cc <read_bits+0x270>
     880:	ldrb	r0, [fp, #-40]	; 0xffffffd8
     884:	tst	r0, #7
     888:	beq	950 <read_bits+0x1f4>
     88c:	b	890 <read_bits+0x134>
     890:	ldr	r0, [fp, #-24]	; 0xffffffe8
     894:	ldr	r1, [fp, #-32]	; 0xffffffe0
     898:	ldr	r2, [fp, #-28]	; 0xffffffe4
     89c:	lsr	r1, r1, #3
     8a0:	orr	r1, r1, r2, lsl #29
     8a4:	asr	r3, r2, #3
     8a8:	mov	r2, sp
     8ac:	add	ip, sp, #59	; 0x3b
     8b0:	str	ip, [r2, #8]
     8b4:	mov	ip, #0
     8b8:	str	ip, [r2, #4]
     8bc:	mov	ip, #1
     8c0:	str	ip, [r2]
     8c4:	mov	r2, r1
     8c8:	bl	e6c <read_bytes>
     8cc:	cmp	r0, #0
     8d0:	beq	8e0 <read_bits+0x184>
     8d4:	mvn	r0, #0
     8d8:	str	r0, [fp, #-20]	; 0xffffffec
     8dc:	b	cf8 <read_bits+0x59c>
     8e0:	ldr	r0, [fp, #-40]	; 0xffffffd8
     8e4:	and	r0, r0, #7
     8e8:	str	r0, [sp, #60]	; 0x3c
     8ec:	ldrb	r0, [sp, #59]	; 0x3b
     8f0:	ldr	r1, [sp, #60]	; 0x3c
     8f4:	mov	r2, #1
     8f8:	mvn	r3, #0
     8fc:	add	r1, r3, r2, lsl r1
     900:	and	r0, r0, r1
     904:	ldr	r1, [fp, #16]
     908:	strb	r0, [r1]
     90c:	ldr	r0, [fp, #16]
     910:	add	r0, r0, #1
     914:	str	r0, [fp, #16]
     918:	ldr	r0, [sp, #60]	; 0x3c
     91c:	ldr	r1, [fp, #-32]	; 0xffffffe0
     920:	ldr	r2, [fp, #-28]	; 0xffffffe4
     924:	adds	r0, r1, r0
     928:	adc	r1, r2, #0
     92c:	str	r0, [fp, #-32]	; 0xffffffe0
     930:	str	r1, [fp, #-28]	; 0xffffffe4
     934:	ldr	r0, [sp, #60]	; 0x3c
     938:	ldr	r1, [fp, #-40]	; 0xffffffd8
     93c:	ldr	r2, [fp, #-36]	; 0xffffffdc
     940:	subs	r0, r1, r0
     944:	sbc	r1, r2, #0
     948:	str	r0, [fp, #-40]	; 0xffffffd8
     94c:	str	r1, [fp, #-36]	; 0xffffffdc
     950:	ldr	r0, [fp, #-40]	; 0xffffffd8
     954:	ldr	r1, [fp, #-36]	; 0xffffffdc
     958:	subs	r0, r0, #1
     95c:	sbcs	r1, r1, #0
     960:	blt	9c8 <read_bits+0x26c>
     964:	b	968 <read_bits+0x20c>
     968:	ldr	r0, [fp, #-24]	; 0xffffffe8
     96c:	ldr	r1, [fp, #-32]	; 0xffffffe0
     970:	ldr	r2, [fp, #-28]	; 0xffffffe4
     974:	lsr	r1, r1, #3
     978:	orr	r1, r1, r2, lsl #29
     97c:	asr	r3, r2, #3
     980:	ldr	r2, [fp, #-40]	; 0xffffffd8
     984:	ldr	ip, [fp, #-36]	; 0xffffffdc
     988:	lsr	r2, r2, #3
     98c:	orr	r2, r2, ip, lsl #29
     990:	asr	ip, ip, #3
     994:	ldr	lr, [fp, #16]
     998:	mov	r4, sp
     99c:	str	lr, [r4, #8]
     9a0:	str	ip, [r4, #4]
     9a4:	str	r2, [r4]
     9a8:	mov	r2, r1
     9ac:	bl	e6c <read_bytes>
     9b0:	cmp	r0, #0
     9b4:	beq	9c4 <read_bits+0x268>
     9b8:	mvn	r0, #0
     9bc:	str	r0, [fp, #-20]	; 0xffffffec
     9c0:	b	cf8 <read_bits+0x59c>
     9c4:	b	9c8 <read_bits+0x26c>
     9c8:	b	cec <read_bits+0x590>
     9cc:	ldr	r0, [fp, #-40]	; 0xffffffd8
     9d0:	ldr	r1, [fp, #-36]	; 0xffffffdc
     9d4:	mov	r2, #24
     9d8:	mov	r3, #0
     9dc:	bl	0 <__aeabi_ldivmod>
     9e0:	orr	r2, r2, r3
     9e4:	cmp	r2, #0
     9e8:	beq	be8 <read_bits+0x48c>
     9ec:	b	9f0 <read_bits+0x294>
     9f0:	add	r0, sp, #55	; 0x37
     9f4:	ldr	r1, [fp, #-40]	; 0xffffffd8
     9f8:	ldr	r2, [fp, #-36]	; 0xffffffdc
     9fc:	mov	r3, #24
     a00:	mov	ip, #0
     a04:	str	r0, [sp, #28]
     a08:	mov	r0, r1
     a0c:	mov	r1, r2
     a10:	mov	r2, r3
     a14:	mov	r3, ip
     a18:	str	ip, [sp, #24]
     a1c:	bl	0 <__aeabi_ldivmod>
     a20:	str	r2, [sp, #44]	; 0x2c
     a24:	ldr	r2, [fp, #-32]	; 0xffffffe0
     a28:	and	r2, r2, #7
     a2c:	ldr	r3, [sp, #44]	; 0x2c
     a30:	add	r2, r2, r3
     a34:	lsr	r3, r2, #3
     a38:	mov	ip, #1
     a3c:	add	lr, ip, r2, lsr #3
     a40:	tst	r2, #7
     a44:	movne	r3, lr
     a48:	str	r3, [sp, #40]	; 0x28
     a4c:	ldr	r2, [sp, #44]	; 0x2c
     a50:	lsr	r3, r2, #3
     a54:	add	ip, ip, r2, lsr #3
     a58:	tst	r2, #7
     a5c:	movne	r3, ip
     a60:	str	r3, [sp, #36]	; 0x24
     a64:	ldr	r2, [fp, #-24]	; 0xffffffe8
     a68:	ldr	r3, [fp, #-32]	; 0xffffffe0
     a6c:	ldr	ip, [fp, #-28]	; 0xffffffe4
     a70:	lsr	r3, r3, #3
     a74:	orr	r3, r3, ip, lsl #29
     a78:	asr	ip, ip, #3
     a7c:	ldr	lr, [sp, #40]	; 0x28
     a80:	mov	r4, sp
     a84:	ldr	r5, [sp, #28]
     a88:	str	r5, [r4, #8]
     a8c:	ldr	r6, [sp, #24]
     a90:	str	r6, [r4, #4]
     a94:	str	lr, [r4]
     a98:	str	r0, [sp, #20]
     a9c:	mov	r0, r2
     aa0:	mov	r2, r3
     aa4:	mov	r3, ip
     aa8:	str	r1, [sp, #16]
     aac:	bl	e6c <read_bytes>
     ab0:	cmp	r0, #0
     ab4:	beq	ac4 <read_bits+0x368>
     ab8:	mvn	r0, #0
     abc:	str	r0, [fp, #-20]	; 0xffffffec
     ac0:	b	cf8 <read_bits+0x59c>
     ac4:	movw	r0, #0
     ac8:	str	r0, [sp, #48]	; 0x30
     acc:	str	r0, [sp, #32]
     ad0:	ldr	r0, [sp, #32]
     ad4:	ldr	r1, [sp, #40]	; 0x28
     ad8:	cmp	r0, r1
     adc:	bcs	b18 <read_bits+0x3bc>
     ae0:	ldr	r0, [sp, #32]
     ae4:	add	r1, sp, #55	; 0x37
     ae8:	add	r0, r1, r0
     aec:	ldrb	r0, [r0]
     af0:	add	r1, sp, #48	; 0x30
     af4:	ldr	r2, [sp, #32]
     af8:	movw	r3, #3
     afc:	sub	r2, r3, r2
     b00:	add	r1, r1, r2
     b04:	strb	r0, [r1]
     b08:	ldr	r0, [sp, #32]
     b0c:	add	r0, r0, #1
     b10:	str	r0, [sp, #32]
     b14:	b	ad0 <read_bits+0x374>
     b18:	ldr	r0, [sp, #48]	; 0x30
     b1c:	ldr	r1, [fp, #-44]	; 0xffffffd4
     b20:	ldr	r2, [sp, #40]	; 0x28
     b24:	rsb	r2, r2, #4
     b28:	lsl	r2, r2, #3
     b2c:	add	r1, r1, r2
     b30:	lsr	r0, r0, r1
     b34:	ldr	r1, [sp, #44]	; 0x2c
     b38:	movw	r2, #1
     b3c:	lsl	r1, r2, r1
     b40:	sub	r1, r1, #1
     b44:	and	r0, r0, r1
     b48:	str	r0, [sp, #48]	; 0x30
     b4c:	movw	r0, #0
     b50:	str	r0, [sp, #32]
     b54:	ldr	r0, [sp, #32]
     b58:	ldr	r1, [sp, #36]	; 0x24
     b5c:	cmp	r0, r1
     b60:	bcs	ba0 <read_bits+0x444>
     b64:	add	r0, sp, #48	; 0x30
     b68:	ldr	r1, [sp, #36]	; 0x24
     b6c:	sub	r1, r1, #1
     b70:	ldr	r2, [sp, #32]
     b74:	sub	r1, r1, r2
     b78:	add	r0, r0, r1
     b7c:	ldrb	r0, [r0]
     b80:	ldr	r1, [fp, #16]
     b84:	ldr	r2, [sp, #32]
     b88:	add	r1, r1, r2
     b8c:	strb	r0, [r1]
     b90:	ldr	r0, [sp, #32]
     b94:	add	r0, r0, #1
     b98:	str	r0, [sp, #32]
     b9c:	b	b54 <read_bits+0x3f8>
     ba0:	ldr	r0, [sp, #36]	; 0x24
     ba4:	ldr	r1, [fp, #16]
     ba8:	add	r0, r1, r0
     bac:	str	r0, [fp, #16]
     bb0:	ldr	r0, [sp, #44]	; 0x2c
     bb4:	ldr	r1, [fp, #-32]	; 0xffffffe0
     bb8:	ldr	r2, [fp, #-28]	; 0xffffffe4
     bbc:	adds	r0, r1, r0
     bc0:	adc	r1, r2, #0
     bc4:	str	r0, [fp, #-32]	; 0xffffffe0
     bc8:	str	r1, [fp, #-28]	; 0xffffffe4
     bcc:	ldr	r0, [sp, #44]	; 0x2c
     bd0:	ldr	r1, [fp, #-40]	; 0xffffffd8
     bd4:	ldr	r2, [fp, #-36]	; 0xffffffdc
     bd8:	subs	r0, r1, r0
     bdc:	sbc	r1, r2, #0
     be0:	str	r0, [fp, #-40]	; 0xffffffd8
     be4:	str	r1, [fp, #-36]	; 0xffffffdc
     be8:	b	bec <read_bits+0x490>
     bec:	ldr	r0, [fp, #-40]	; 0xffffffd8
     bf0:	ldr	r1, [fp, #-36]	; 0xffffffdc
     bf4:	subs	r0, r0, #1
     bf8:	sbcs	r1, r1, #0
     bfc:	blt	ce8 <read_bits+0x58c>
     c00:	b	c04 <read_bits+0x4a8>
     c04:	add	r0, sp, #55	; 0x37
     c08:	ldr	r1, [fp, #-24]	; 0xffffffe8
     c0c:	ldr	r2, [fp, #-32]	; 0xffffffe0
     c10:	ldr	r3, [fp, #-28]	; 0xffffffe4
     c14:	lsr	r2, r2, #3
     c18:	orr	r2, r2, r3, lsl #29
     c1c:	asr	r3, r3, #3
     c20:	mov	ip, sp
     c24:	str	r0, [ip, #8]
     c28:	mov	r0, #0
     c2c:	str	r0, [ip, #4]
     c30:	mov	r0, #4
     c34:	str	r0, [ip]
     c38:	mov	r0, r1
     c3c:	bl	e6c <read_bytes>
     c40:	cmp	r0, #0
     c44:	beq	c54 <read_bits+0x4f8>
     c48:	mvn	r0, #0
     c4c:	str	r0, [fp, #-20]	; 0xffffffec
     c50:	b	cf8 <read_bits+0x59c>
     c54:	ldrb	r0, [sp, #58]	; 0x3a
     c58:	strb	r0, [sp, #48]	; 0x30
     c5c:	ldrb	r0, [sp, #57]	; 0x39
     c60:	strb	r0, [sp, #49]	; 0x31
     c64:	ldrb	r0, [sp, #56]	; 0x38
     c68:	strb	r0, [sp, #50]	; 0x32
     c6c:	ldrb	r0, [sp, #55]	; 0x37
     c70:	strb	r0, [sp, #51]	; 0x33
     c74:	ldr	r0, [fp, #-44]	; 0xffffffd4
     c78:	ldr	r1, [sp, #48]	; 0x30
     c7c:	lsr	r0, r1, r0
     c80:	str	r0, [sp, #48]	; 0x30
     c84:	ldrb	r0, [sp, #50]	; 0x32
     c88:	ldr	r1, [fp, #16]
     c8c:	strb	r0, [r1]
     c90:	ldrb	r0, [sp, #49]	; 0x31
     c94:	ldr	r1, [fp, #16]
     c98:	strb	r0, [r1, #1]
     c9c:	ldrb	r0, [sp, #48]	; 0x30
     ca0:	ldr	r1, [fp, #16]
     ca4:	strb	r0, [r1, #2]
     ca8:	ldr	r0, [fp, #16]
     cac:	add	r0, r0, #3
     cb0:	str	r0, [fp, #16]
     cb4:	ldr	r0, [fp, #-32]	; 0xffffffe0
     cb8:	ldr	r1, [fp, #-28]	; 0xffffffe4
     cbc:	adds	r0, r0, #24
     cc0:	adc	r1, r1, #0
     cc4:	str	r0, [fp, #-32]	; 0xffffffe0
     cc8:	str	r1, [fp, #-28]	; 0xffffffe4
     ccc:	ldr	r0, [fp, #-40]	; 0xffffffd8
     cd0:	ldr	r1, [fp, #-36]	; 0xffffffdc
     cd4:	subs	r0, r0, #24
     cd8:	sbc	r1, r1, #0
     cdc:	str	r0, [fp, #-40]	; 0xffffffd8
     ce0:	str	r1, [fp, #-36]	; 0xffffffdc
     ce4:	b	bec <read_bits+0x490>
     ce8:	b	cec <read_bits+0x590>
     cec:	b	cf0 <read_bits+0x594>
     cf0:	movw	r0, #0
     cf4:	str	r0, [fp, #-20]	; 0xffffffec
     cf8:	ldr	r0, [fp, #-20]	; 0xffffffec
     cfc:	sub	sp, fp, #16
     d00:	pop	{r4, r5, r6, sl, fp, pc}

00000d04 <swap8>:
     d04:	sub	sp, sp, #8
     d08:	str	r0, [sp, #4]
     d0c:	ldr	r0, [sp, #4]
     d10:	str	r0, [sp]
     d14:	ldr	r0, [sp]
     d18:	ldrb	r0, [r0]
     d1c:	ldr	r1, [sp]
     d20:	ldrb	r1, [r1, #7]
     d24:	eor	r0, r0, r1
     d28:	ldr	r1, [sp]
     d2c:	strb	r0, [r1]
     d30:	ldr	r0, [sp]
     d34:	ldrb	r0, [r0]
     d38:	ldr	r1, [sp]
     d3c:	ldrb	r1, [r1, #7]
     d40:	eor	r0, r0, r1
     d44:	ldr	r1, [sp]
     d48:	strb	r0, [r1, #7]
     d4c:	ldr	r0, [sp]
     d50:	ldrb	r0, [r0]
     d54:	ldr	r1, [sp]
     d58:	ldrb	r1, [r1, #7]
     d5c:	eor	r0, r0, r1
     d60:	ldr	r1, [sp]
     d64:	strb	r0, [r1]
     d68:	ldr	r0, [sp]
     d6c:	ldrb	r0, [r0, #1]
     d70:	ldr	r1, [sp]
     d74:	ldrb	r1, [r1, #6]
     d78:	eor	r0, r0, r1
     d7c:	ldr	r1, [sp]
     d80:	strb	r0, [r1, #1]
     d84:	ldr	r0, [sp]
     d88:	ldrb	r0, [r0, #1]
     d8c:	ldr	r1, [sp]
     d90:	ldrb	r1, [r1, #6]
     d94:	eor	r0, r0, r1
     d98:	ldr	r1, [sp]
     d9c:	strb	r0, [r1, #6]
     da0:	ldr	r0, [sp]
     da4:	ldrb	r0, [r0, #1]
     da8:	ldr	r1, [sp]
     dac:	ldrb	r1, [r1, #6]
     db0:	eor	r0, r0, r1
     db4:	ldr	r1, [sp]
     db8:	strb	r0, [r1, #1]
     dbc:	ldr	r0, [sp]
     dc0:	ldrb	r0, [r0, #2]
     dc4:	ldr	r1, [sp]
     dc8:	ldrb	r1, [r1, #5]
     dcc:	eor	r0, r0, r1
     dd0:	ldr	r1, [sp]
     dd4:	strb	r0, [r1, #2]
     dd8:	ldr	r0, [sp]
     ddc:	ldrb	r0, [r0, #2]
     de0:	ldr	r1, [sp]
     de4:	ldrb	r1, [r1, #5]
     de8:	eor	r0, r0, r1
     dec:	ldr	r1, [sp]
     df0:	strb	r0, [r1, #5]
     df4:	ldr	r0, [sp]
     df8:	ldrb	r0, [r0, #2]
     dfc:	ldr	r1, [sp]
     e00:	ldrb	r1, [r1, #5]
     e04:	eor	r0, r0, r1
     e08:	ldr	r1, [sp]
     e0c:	strb	r0, [r1, #2]
     e10:	ldr	r0, [sp]
     e14:	ldrb	r0, [r0, #3]
     e18:	ldr	r1, [sp]
     e1c:	ldrb	r1, [r1, #4]
     e20:	eor	r0, r0, r1
     e24:	ldr	r1, [sp]
     e28:	strb	r0, [r1, #3]
     e2c:	ldr	r0, [sp]
     e30:	ldrb	r0, [r0, #3]
     e34:	ldr	r1, [sp]
     e38:	ldrb	r1, [r1, #4]
     e3c:	eor	r0, r0, r1
     e40:	ldr	r1, [sp]
     e44:	strb	r0, [r1, #4]
     e48:	ldr	r0, [sp]
     e4c:	ldrb	r0, [r0, #3]
     e50:	ldr	r1, [sp]
     e54:	ldrb	r1, [r1, #4]
     e58:	eor	r0, r0, r1
     e5c:	ldr	r1, [sp]
     e60:	strb	r0, [r1, #3]
     e64:	add	sp, sp, #8
     e68:	bx	lr

00000e6c <read_bytes>:
     e6c:	push	{fp, lr}
     e70:	mov	fp, sp
     e74:	sub	sp, sp, #112	; 0x70
     e78:	ldr	r1, [fp, #12]
     e7c:	ldr	ip, [fp, #8]
     e80:	ldr	lr, [fp, #16]
     e84:	str	r0, [fp, #-8]
     e88:	str	r3, [fp, #-12]
     e8c:	str	r2, [fp, #-16]
     e90:	str	r1, [fp, #-20]	; 0xffffffec
     e94:	str	ip, [fp, #-24]	; 0xffffffe8
     e98:	ldr	r0, [fp, #-8]
     e9c:	ldr	r0, [r0, #48]	; 0x30
     ea0:	movw	r1, #0
     ea4:	cmp	r0, r1
     ea8:	beq	fc0 <read_bytes+0x154>
     eac:	ldr	r0, [fp, #-16]
     eb0:	ldr	r1, [fp, #-12]
     eb4:	ldr	r2, [fp, #-24]	; 0xffffffe8
     eb8:	ldr	r3, [fp, #-20]	; 0xffffffec
     ebc:	adds	r0, r0, r2
     ec0:	adc	r1, r1, r3
     ec4:	ldr	r2, [fp, #-8]
     ec8:	ldr	r3, [r2, #40]	; 0x28
     ecc:	ldr	r2, [r2, #44]	; 0x2c
     ed0:	subs	r0, r3, r0
     ed4:	sbcs	r1, r2, r1
     ed8:	bcs	fa0 <read_bytes+0x134>
     edc:	b	ee0 <read_bytes+0x74>
     ee0:	ldr	r0, [fp, #-8]
     ee4:	ldr	r0, [r0, #16]
     ee8:	cmp	r0, #0
     eec:	beq	f00 <read_bytes+0x94>
     ef0:	ldr	r0, [fp, #-8]
     ef4:	ldr	r0, [r0, #16]
     ef8:	cmp	r0, #1
     efc:	bne	f1c <read_bytes+0xb0>
     f00:	mvn	r0, #300	; 0x12c
     f04:	movw	r1, #0
     f08:	movt	r1, #0
     f0c:	bl	0 <coda_set_error>
     f10:	mvn	r0, #0
     f14:	str	r0, [fp, #-4]
     f18:	b	10b4 <read_bytes+0x248>
     f1c:	add	r2, sp, #25
     f20:	ldr	r0, [fp, #-24]	; 0xffffffe8
     f24:	ldr	r1, [fp, #-20]	; 0xffffffec
     f28:	sub	r3, fp, #45	; 0x2d
     f2c:	str	r2, [sp, #20]
     f30:	mov	r2, r3
     f34:	bl	0 <coda_str64>
     f38:	ldr	r0, [fp, #-16]
     f3c:	ldr	r1, [fp, #-12]
     f40:	add	r2, sp, #46	; 0x2e
     f44:	bl	0 <coda_str64>
     f48:	ldr	r0, [fp, #-8]
     f4c:	ldr	r1, [r0, #40]	; 0x28
     f50:	ldr	r0, [r0, #44]	; 0x2c
     f54:	str	r0, [sp, #16]
     f58:	mov	r0, r1
     f5c:	ldr	r1, [sp, #16]
     f60:	ldr	r2, [sp, #20]
     f64:	bl	0 <coda_str64>
     f68:	add	r0, sp, #25
     f6c:	add	r3, sp, #46	; 0x2e
     f70:	sub	r2, fp, #45	; 0x2d
     f74:	mvn	r1, #300	; 0x12c
     f78:	str	r0, [sp, #12]
     f7c:	mov	r0, r1
     f80:	movw	r1, #0
     f84:	movt	r1, #0
     f88:	ldr	ip, [sp, #12]
     f8c:	str	ip, [sp]
     f90:	bl	0 <coda_set_error>
     f94:	mvn	r0, #0
     f98:	str	r0, [fp, #-4]
     f9c:	b	10b4 <read_bytes+0x248>
     fa0:	ldr	r0, [fp, #16]
     fa4:	ldr	r1, [fp, #-8]
     fa8:	ldr	r1, [r1, #48]	; 0x30
     fac:	ldr	r2, [fp, #-16]
     fb0:	add	r1, r1, r2
     fb4:	ldr	r2, [fp, #-24]	; 0xffffffe8
     fb8:	bl	0 <memcpy>
     fbc:	b	10ac <read_bytes+0x240>
     fc0:	ldr	r0, [fp, #-8]
     fc4:	ldr	r0, [r0, #16]
     fc8:	cmp	r0, #0
     fcc:	beq	fe0 <read_bytes+0x174>
     fd0:	ldr	r0, [fp, #-8]
     fd4:	ldr	r0, [r0, #16]
     fd8:	cmp	r0, #1
     fdc:	bne	fe4 <read_bytes+0x178>
     fe0:	b	1004 <read_bytes+0x198>
     fe4:	movw	r0, #0
     fe8:	movt	r0, #0
     fec:	movw	r1, #0
     ff0:	movt	r1, #0
     ff4:	movw	r2, #83	; 0x53
     ff8:	movw	r3, #0
     ffc:	movt	r3, #0
    1000:	bl	0 <__assert_fail>
    1004:	ldr	r0, [fp, #-16]
    1008:	ldr	r1, [fp, #-12]
    100c:	ldr	r2, [fp, #-24]	; 0xffffffe8
    1010:	ldr	r3, [fp, #-20]	; 0xffffffec
    1014:	adds	r0, r0, r2
    1018:	adc	r1, r1, r3
    101c:	ldr	r2, [fp, #-8]
    1020:	ldr	r3, [r2, #8]
    1024:	ldr	r2, [r2, #12]
    1028:	subs	r0, r3, r0
    102c:	sbcs	r1, r2, r1
    1030:	bcs	1054 <read_bytes+0x1e8>
    1034:	b	1038 <read_bytes+0x1cc>
    1038:	mvn	r0, #300	; 0x12c
    103c:	movw	r1, #0
    1040:	movt	r1, #0
    1044:	bl	0 <coda_set_error>
    1048:	mvn	r0, #0
    104c:	str	r0, [fp, #-4]
    1050:	b	10b4 <read_bytes+0x248>
    1054:	ldr	r0, [fp, #-8]
    1058:	ldr	r0, [r0, #56]	; 0x38
    105c:	ldr	r1, [fp, #16]
    1060:	ldr	r2, [fp, #-24]	; 0xffffffe8
    1064:	ldr	r3, [fp, #-16]
    1068:	bl	0 <pread>
    106c:	cmp	r0, #0
    1070:	bge	10a8 <read_bytes+0x23c>
    1074:	bl	0 <__errno_location>
    1078:	ldr	r0, [r0]
    107c:	bl	0 <strerror>
    1080:	mvn	r1, #21
    1084:	str	r0, [sp, #8]
    1088:	mov	r0, r1
    108c:	movw	r1, #0
    1090:	movt	r1, #0
    1094:	ldr	r2, [sp, #8]
    1098:	bl	0 <coda_set_error>
    109c:	mvn	r0, #0
    10a0:	str	r0, [fp, #-4]
    10a4:	b	10b4 <read_bytes+0x248>
    10a8:	b	10ac <read_bytes+0x240>
    10ac:	movw	r0, #0
    10b0:	str	r0, [fp, #-4]
    10b4:	ldr	r0, [fp, #-4]
    10b8:	mov	sp, fp
    10bc:	pop	{fp, pc}

000010c0 <swap4>:
    10c0:	sub	sp, sp, #8
    10c4:	str	r0, [sp, #4]
    10c8:	ldr	r0, [sp, #4]
    10cc:	str	r0, [sp]
    10d0:	ldr	r0, [sp]
    10d4:	ldrb	r0, [r0]
    10d8:	ldr	r1, [sp]
    10dc:	ldrb	r1, [r1, #3]
    10e0:	eor	r0, r0, r1
    10e4:	ldr	r1, [sp]
    10e8:	strb	r0, [r1]
    10ec:	ldr	r0, [sp]
    10f0:	ldrb	r0, [r0]
    10f4:	ldr	r1, [sp]
    10f8:	ldrb	r1, [r1, #3]
    10fc:	eor	r0, r0, r1
    1100:	ldr	r1, [sp]
    1104:	strb	r0, [r1, #3]
    1108:	ldr	r0, [sp]
    110c:	ldrb	r0, [r0]
    1110:	ldr	r1, [sp]
    1114:	ldrb	r1, [r1, #3]
    1118:	eor	r0, r0, r1
    111c:	ldr	r1, [sp]
    1120:	strb	r0, [r1]
    1124:	ldr	r0, [sp]
    1128:	ldrb	r0, [r0, #1]
    112c:	ldr	r1, [sp]
    1130:	ldrb	r1, [r1, #2]
    1134:	eor	r0, r0, r1
    1138:	ldr	r1, [sp]
    113c:	strb	r0, [r1, #1]
    1140:	ldr	r0, [sp]
    1144:	ldrb	r0, [r0, #1]
    1148:	ldr	r1, [sp]
    114c:	ldrb	r1, [r1, #2]
    1150:	eor	r0, r0, r1
    1154:	ldr	r1, [sp]
    1158:	strb	r0, [r1, #2]
    115c:	ldr	r0, [sp]
    1160:	ldrb	r0, [r0, #1]
    1164:	ldr	r1, [sp]
    1168:	ldrb	r1, [r1, #2]
    116c:	eor	r0, r0, r1
    1170:	ldr	r1, [sp]
    1174:	strb	r0, [r1, #1]
    1178:	add	sp, sp, #8
    117c:	bx	lr

00001180 <coda_grib_cursor_read_float_array>:
    1180:	push	{r4, r5, fp, lr}
    1184:	add	fp, sp, #8
    1188:	sub	sp, sp, #544	; 0x220
    118c:	str	r0, [fp, #-16]
    1190:	str	r1, [fp, #-20]	; 0xffffffec
    1194:	ldr	r0, [fp, #-16]
    1198:	add	r1, r0, #8
    119c:	ldr	r0, [r0, #4]
    11a0:	sub	r0, r0, #1
    11a4:	add	r0, r1, r0, lsl #4
    11a8:	ldr	r0, [r0]
    11ac:	str	r0, [fp, #-24]	; 0xffffffe8
    11b0:	ldr	r0, [fp, #-24]	; 0xffffffe8
    11b4:	ldr	r0, [r0, #8]
    11b8:	cmp	r0, #0
    11bc:	ble	1280 <coda_grib_cursor_read_float_array+0x100>
    11c0:	ldr	r1, [fp, #-16]
    11c4:	add	r0, sp, #8
    11c8:	mov	r2, #520	; 0x208
    11cc:	str	r0, [sp]
    11d0:	bl	0 <memcpy>
    11d4:	ldr	r1, [sp, #12]
    11d8:	add	r1, r1, #1
    11dc:	str	r1, [sp, #12]
    11e0:	ldr	r1, [fp, #-24]	; 0xffffffe8
    11e4:	ldr	r1, [r1, #12]
    11e8:	ldr	r2, [sp]
    11ec:	add	r3, r2, #8
    11f0:	ldr	ip, [sp, #12]
    11f4:	add	ip, r3, ip, lsl #4
    11f8:	str	r1, [ip, #-16]
    11fc:	ldr	r1, [sp, #12]
    1200:	add	r1, r3, r1, lsl #4
    1204:	mvn	r3, #0
    1208:	str	r3, [r1, #-4]
    120c:	str	r3, [r1, #-8]
    1210:	movw	r1, #0
    1214:	str	r1, [sp, #4]
    1218:	ldr	r0, [sp, #4]
    121c:	ldr	r1, [fp, #-24]	; 0xffffffe8
    1220:	ldr	r1, [r1, #8]
    1224:	cmp	r0, r1
    1228:	bge	127c <coda_grib_cursor_read_float_array+0xfc>
    122c:	ldr	r0, [sp, #4]
    1230:	ldr	r1, [sp, #12]
    1234:	add	r2, sp, #8
    1238:	add	r1, r2, r1, lsl #4
    123c:	str	r0, [r1, #-4]
    1240:	ldr	r0, [fp, #-20]	; 0xffffffec
    1244:	ldr	r1, [sp, #4]
    1248:	add	r1, r0, r1, lsl #2
    124c:	add	r0, sp, #8
    1250:	bl	380 <coda_grib_cursor_read_float>
    1254:	cmp	r0, #0
    1258:	beq	1268 <coda_grib_cursor_read_float_array+0xe8>
    125c:	mvn	r0, #0
    1260:	str	r0, [fp, #-12]
    1264:	b	1288 <coda_grib_cursor_read_float_array+0x108>
    1268:	b	126c <coda_grib_cursor_read_float_array+0xec>
    126c:	ldr	r0, [sp, #4]
    1270:	add	r0, r0, #1
    1274:	str	r0, [sp, #4]
    1278:	b	1218 <coda_grib_cursor_read_float_array+0x98>
    127c:	b	1280 <coda_grib_cursor_read_float_array+0x100>
    1280:	movw	r0, #0
    1284:	str	r0, [fp, #-12]
    1288:	ldr	r0, [fp, #-12]
    128c:	sub	sp, fp, #8
    1290:	pop	{r4, r5, fp, pc}

00001294 <coda_grib_cursor_read_float_partial_array>:
    1294:	push	{r4, r5, fp, lr}
    1298:	add	fp, sp, #8
    129c:	sub	sp, sp, #552	; 0x228
    12a0:	str	r0, [fp, #-16]
    12a4:	str	r1, [fp, #-20]	; 0xffffffec
    12a8:	str	r2, [fp, #-24]	; 0xffffffe8
    12ac:	str	r3, [fp, #-28]	; 0xffffffe4
    12b0:	ldr	r0, [fp, #-16]
    12b4:	add	r1, r0, #8
    12b8:	ldr	r0, [r0, #4]
    12bc:	sub	r0, r0, #1
    12c0:	add	r0, r1, r0, lsl #4
    12c4:	ldr	r0, [r0]
    12c8:	str	r0, [fp, #-32]	; 0xffffffe0
    12cc:	ldr	r0, [fp, #-32]	; 0xffffffe0
    12d0:	ldr	r0, [r0, #8]
    12d4:	cmp	r0, #0
    12d8:	ble	13a0 <coda_grib_cursor_read_float_partial_array+0x10c>
    12dc:	ldr	r1, [fp, #-16]
    12e0:	add	r0, sp, #8
    12e4:	mov	r2, #520	; 0x208
    12e8:	str	r0, [sp]
    12ec:	bl	0 <memcpy>
    12f0:	ldr	r1, [sp, #12]
    12f4:	add	r1, r1, #1
    12f8:	str	r1, [sp, #12]
    12fc:	ldr	r1, [fp, #-32]	; 0xffffffe0
    1300:	ldr	r1, [r1, #12]
    1304:	ldr	r2, [sp]
    1308:	add	r3, r2, #8
    130c:	ldr	ip, [sp, #12]
    1310:	add	ip, r3, ip, lsl #4
    1314:	str	r1, [ip, #-16]
    1318:	ldr	r1, [sp, #12]
    131c:	add	r1, r3, r1, lsl #4
    1320:	mvn	r3, #0
    1324:	str	r3, [r1, #-4]
    1328:	str	r3, [r1, #-8]
    132c:	movw	r1, #0
    1330:	str	r1, [sp, #4]
    1334:	ldr	r0, [sp, #4]
    1338:	ldr	r1, [fp, #-24]	; 0xffffffe8
    133c:	cmp	r0, r1
    1340:	bge	139c <coda_grib_cursor_read_float_partial_array+0x108>
    1344:	ldr	r0, [fp, #-20]	; 0xffffffec
    1348:	ldr	r1, [sp, #4]
    134c:	add	r0, r0, r1
    1350:	ldr	r1, [sp, #12]
    1354:	add	r2, sp, #8
    1358:	add	r1, r2, r1, lsl #4
    135c:	str	r0, [r1, #-4]
    1360:	ldr	r0, [fp, #-28]	; 0xffffffe4
    1364:	ldr	r1, [sp, #4]
    1368:	add	r1, r0, r1, lsl #2
    136c:	add	r0, sp, #8
    1370:	bl	380 <coda_grib_cursor_read_float>
    1374:	cmp	r0, #0
    1378:	beq	1388 <coda_grib_cursor_read_float_partial_array+0xf4>
    137c:	mvn	r0, #0
    1380:	str	r0, [fp, #-12]
    1384:	b	13a8 <coda_grib_cursor_read_float_partial_array+0x114>
    1388:	b	138c <coda_grib_cursor_read_float_partial_array+0xf8>
    138c:	ldr	r0, [sp, #4]
    1390:	add	r0, r0, #1
    1394:	str	r0, [sp, #4]
    1398:	b	1334 <coda_grib_cursor_read_float_partial_array+0xa0>
    139c:	b	13a0 <coda_grib_cursor_read_float_partial_array+0x10c>
    13a0:	movw	r0, #0
    13a4:	str	r0, [fp, #-12]
    13a8:	ldr	r0, [fp, #-12]
    13ac:	sub	sp, fp, #8
    13b0:	pop	{r4, r5, fp, pc}
