
../compcert-repos/stcorp-coda-3a25f25/CMakeFiles/codacheck.dir/tools/codacheck/codacheck.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <print_version>:
   0:	str	fp, [sp, #-8]!
   4:	str	lr, [sp, #4]
   8:	add	fp, sp, #4
   c:	bl	0 <coda_get_libcoda_version>
  10:	mov	r3, r0
  14:	mov	r1, r3
  18:	movw	r0, #0
  1c:	movt	r0, #0
  20:	bl	0 <printf>
  24:	movw	r0, #0
  28:	movt	r0, #0
  2c:	bl	0 <puts>
  30:	mov	r0, #10
  34:	bl	0 <putchar>
  38:	nop	{0}
  3c:	sub	sp, fp, #4
  40:	ldr	fp, [sp]
  44:	add	sp, sp, #4
  48:	pop	{pc}		; (ldr pc, [sp], #4)

0000004c <print_help>:
  4c:	str	fp, [sp, #-8]!
  50:	str	lr, [sp, #4]
  54:	add	fp, sp, #4
  58:	movw	r0, #0
  5c:	movt	r0, #0
  60:	bl	0 <puts>
  64:	movw	r0, #0
  68:	movt	r0, #0
  6c:	bl	0 <puts>
  70:	movw	r0, #0
  74:	movt	r0, #0
  78:	bl	0 <puts>
  7c:	movw	r0, #0
  80:	movt	r0, #0
  84:	bl	0 <puts>
  88:	movw	r0, #0
  8c:	movt	r0, #0
  90:	bl	0 <puts>
  94:	movw	r0, #0
  98:	movt	r0, #0
  9c:	bl	0 <puts>
  a0:	movw	r0, #0
  a4:	movt	r0, #0
  a8:	bl	0 <puts>
  ac:	movw	r0, #0
  b0:	movt	r0, #0
  b4:	bl	0 <puts>
  b8:	movw	r0, #0
  bc:	movt	r0, #0
  c0:	bl	0 <puts>
  c4:	movw	r0, #0
  c8:	movt	r0, #0
  cc:	bl	0 <puts>
  d0:	movw	r0, #0
  d4:	movt	r0, #0
  d8:	bl	0 <puts>
  dc:	movw	r0, #0
  e0:	movt	r0, #0
  e4:	bl	0 <puts>
  e8:	movw	r0, #0
  ec:	movt	r0, #0
  f0:	bl	0 <puts>
  f4:	movw	r0, #0
  f8:	movt	r0, #0
  fc:	bl	0 <puts>
 100:	movw	r0, #0
 104:	movt	r0, #0
 108:	bl	0 <puts>
 10c:	mov	r0, #10
 110:	bl	0 <putchar>
 114:	movw	r0, #0
 118:	movt	r0, #0
 11c:	bl	0 <puts>
 120:	movw	r0, #0
 124:	movt	r0, #0
 128:	bl	0 <puts>
 12c:	mov	r0, #10
 130:	bl	0 <putchar>
 134:	movw	r0, #0
 138:	movt	r0, #0
 13c:	bl	0 <puts>
 140:	movw	r0, #0
 144:	movt	r0, #0
 148:	bl	0 <puts>
 14c:	mov	r0, #10
 150:	bl	0 <putchar>
 154:	movw	r0, #0
 158:	movt	r0, #0
 15c:	bl	0 <puts>
 160:	movw	r0, #0
 164:	movt	r0, #0
 168:	bl	0 <puts>
 16c:	mov	r0, #10
 170:	bl	0 <putchar>
 174:	movw	r0, #0
 178:	movt	r0, #0
 17c:	bl	0 <puts>
 180:	movw	r0, #0
 184:	movt	r0, #0
 188:	bl	0 <puts>
 18c:	movw	r0, #0
 190:	movt	r0, #0
 194:	bl	0 <puts>
 198:	movw	r0, #0
 19c:	movt	r0, #0
 1a0:	bl	0 <puts>
 1a4:	movw	r0, #0
 1a8:	movt	r0, #0
 1ac:	bl	0 <puts>
 1b0:	movw	r0, #0
 1b4:	movt	r0, #0
 1b8:	bl	0 <puts>
 1bc:	movw	r0, #0
 1c0:	movt	r0, #0
 1c4:	bl	0 <puts>
 1c8:	mov	r0, #10
 1cc:	bl	0 <putchar>
 1d0:	nop	{0}
 1d4:	sub	sp, fp, #4
 1d8:	ldr	fp, [sp]
 1dc:	add	sp, sp, #4
 1e0:	pop	{pc}		; (ldr pc, [sp], #4)

000001e4 <print_error>:
 1e4:	str	fp, [sp, #-8]!
 1e8:	str	lr, [sp, #4]
 1ec:	add	fp, sp, #4
 1f0:	sub	sp, sp, #16
 1f4:	str	r0, [fp, #-8]
 1f8:	str	r1, [fp, #-12]
 1fc:	str	r2, [fp, #-16]
 200:	ldr	r1, [fp, #-12]
 204:	movw	r0, #0
 208:	movt	r0, #0
 20c:	bl	0 <printf>
 210:	ldr	r3, [fp, #-8]
 214:	cmp	r3, #0
 218:	beq	238 <print_error+0x54>
 21c:	movw	r0, #0
 220:	movt	r0, #0
 224:	bl	0 <printf>
 228:	movw	r1, #0
 22c:	movt	r1, #0
 230:	ldr	r0, [fp, #-8]
 234:	bl	0 <coda_cursor_print_path>
 238:	mov	r0, #10
 23c:	bl	0 <putchar>
 240:	movw	r3, #0
 244:	movt	r3, #0
 248:	mov	r2, #1
 24c:	str	r2, [r3]
 250:	nop	{0}
 254:	sub	sp, fp, #4
 258:	ldr	fp, [sp]
 25c:	add	sp, sp, #4
 260:	pop	{pc}		; (ldr pc, [sp], #4)

00000264 <check_file>:
 264:	str	fp, [sp, #-8]!
 268:	str	lr, [sp, #4]
 26c:	add	fp, sp, #4
 270:	sub	sp, sp, #56	; 0x38
 274:	str	r0, [fp, #-48]	; 0xffffffd0
 278:	ldr	r0, [fp, #-48]	; 0xffffffd0
 27c:	bl	0 <puts>
 280:	sub	r0, fp, #32
 284:	sub	r2, fp, #16
 288:	sub	r1, fp, #28
 28c:	sub	r3, fp, #40	; 0x28
 290:	str	r3, [sp, #4]
 294:	sub	r3, fp, #36	; 0x24
 298:	str	r3, [sp]
 29c:	mov	r3, r0
 2a0:	ldr	r0, [fp, #-48]	; 0xffffffd0
 2a4:	bl	0 <coda_recognize_file>
 2a8:	mov	r3, r0
 2ac:	cmp	r3, #0
 2b0:	beq	2fc <check_file+0x98>
 2b4:	bl	0 <coda_get_errno>
 2b8:	mov	r3, r0
 2bc:	ldr	r3, [r3]
 2c0:	mov	r0, r3
 2c4:	bl	0 <coda_errno_to_string>
 2c8:	mov	r3, r0
 2cc:	mov	r1, r3
 2d0:	movw	r0, #0
 2d4:	movt	r0, #0
 2d8:	bl	0 <printf>
 2dc:	mov	r1, #0
 2e0:	mov	r0, #0
 2e4:	bl	0 <coda_set_error>
 2e8:	movw	r3, #0
 2ec:	movt	r3, #0
 2f0:	mov	r2, #1
 2f4:	str	r2, [r3]
 2f8:	b	538 <check_file+0x2d4>
 2fc:	movw	r3, #0
 300:	movt	r3, #0
 304:	ldr	r3, [r3]
 308:	cmp	r3, #0
 30c:	beq	348 <check_file+0xe4>
 310:	ldr	r3, [fp, #-32]	; 0xffffffe0
 314:	cmp	r3, #0
 318:	beq	328 <check_file+0xc4>
 31c:	ldr	r3, [fp, #-36]	; 0xffffffdc
 320:	cmp	r3, #0
 324:	bne	348 <check_file+0xe4>
 328:	movw	r0, #0
 32c:	movt	r0, #0
 330:	bl	0 <puts>
 334:	movw	r3, #0
 338:	movt	r3, #0
 33c:	mov	r2, #1
 340:	str	r2, [r3]
 344:	b	538 <check_file+0x2d4>
 348:	movw	r3, #0
 34c:	movt	r3, #0
 350:	ldr	r3, [r3]
 354:	cmp	r3, #0
 358:	beq	3b4 <check_file+0x150>
 35c:	ldr	r3, [fp, #-16]
 360:	mov	r0, r3
 364:	bl	0 <coda_type_get_format_name>
 368:	mov	r3, r0
 36c:	mov	r1, r3
 370:	movw	r0, #0
 374:	movt	r0, #0
 378:	bl	0 <printf>
 37c:	ldr	r3, [fp, #-32]	; 0xffffffe0
 380:	cmp	r3, #0
 384:	beq	3ac <check_file+0x148>
 388:	ldr	r3, [fp, #-36]	; 0xffffffdc
 38c:	cmp	r3, #0
 390:	beq	3ac <check_file+0x148>
 394:	ldr	r1, [fp, #-32]	; 0xffffffe0
 398:	ldr	r2, [fp, #-36]	; 0xffffffdc
 39c:	ldr	r3, [fp, #-40]	; 0xffffffd8
 3a0:	movw	r0, #0
 3a4:	movt	r0, #0
 3a8:	bl	0 <printf>
 3ac:	mov	r0, #10
 3b0:	bl	0 <putchar>
 3b4:	sub	r3, fp, #12
 3b8:	mov	r1, r3
 3bc:	ldr	r0, [fp, #-48]	; 0xffffffd0
 3c0:	bl	0 <coda_open>
 3c4:	str	r0, [fp, #-8]
 3c8:	ldr	r3, [fp, #-8]
 3cc:	cmp	r3, #0
 3d0:	beq	40c <check_file+0x1a8>
 3d4:	bl	0 <coda_get_errno>
 3d8:	mov	r3, r0
 3dc:	ldr	r3, [r3]
 3e0:	cmn	r3, #21
 3e4:	bne	40c <check_file+0x1a8>
 3e8:	mov	r0, #0
 3ec:	bl	0 <coda_set_option_use_mmap>
 3f0:	sub	r3, fp, #12
 3f4:	mov	r1, r3
 3f8:	ldr	r0, [fp, #-48]	; 0xffffffd0
 3fc:	bl	0 <coda_open>
 400:	str	r0, [fp, #-8]
 404:	mov	r0, #1
 408:	bl	0 <coda_set_option_use_mmap>
 40c:	ldr	r3, [fp, #-8]
 410:	cmp	r3, #0
 414:	beq	454 <check_file+0x1f0>
 418:	bl	0 <coda_get_errno>
 41c:	mov	r3, r0
 420:	ldr	r3, [r3]
 424:	mov	r0, r3
 428:	bl	0 <coda_errno_to_string>
 42c:	mov	r3, r0
 430:	mov	r1, r3
 434:	movw	r0, #0
 438:	movt	r0, #0
 43c:	bl	0 <printf>
 440:	movw	r3, #0
 444:	movt	r3, #0
 448:	mov	r2, #1
 44c:	str	r2, [r3]
 450:	b	538 <check_file+0x2d4>
 454:	ldr	r0, [fp, #-12]
 458:	movw	r3, #0
 45c:	movt	r3, #0
 460:	ldr	r3, [r3]
 464:	cmp	r3, #0
 468:	moveq	r3, #1
 46c:	movne	r3, #0
 470:	uxtb	r3, r3
 474:	mov	r1, r3
 478:	mov	r3, #0
 47c:	movw	r2, #0
 480:	movt	r2, #0
 484:	bl	0 <coda_product_check>
 488:	mov	r3, r0
 48c:	cmp	r3, #0
 490:	beq	4dc <check_file+0x278>
 494:	bl	0 <coda_get_errno>
 498:	mov	r3, r0
 49c:	ldr	r3, [r3]
 4a0:	mov	r0, r3
 4a4:	bl	0 <coda_errno_to_string>
 4a8:	mov	r3, r0
 4ac:	mov	r1, r3
 4b0:	movw	r0, #0
 4b4:	movt	r0, #0
 4b8:	bl	0 <printf>
 4bc:	movw	r3, #0
 4c0:	movt	r3, #0
 4c4:	mov	r2, #1
 4c8:	str	r2, [r3]
 4cc:	ldr	r3, [fp, #-12]
 4d0:	mov	r0, r3
 4d4:	bl	0 <coda_close>
 4d8:	b	538 <check_file+0x2d4>
 4dc:	ldr	r3, [fp, #-12]
 4e0:	mov	r0, r3
 4e4:	bl	0 <coda_close>
 4e8:	mov	r3, r0
 4ec:	cmp	r3, #0
 4f0:	beq	530 <check_file+0x2cc>
 4f4:	bl	0 <coda_get_errno>
 4f8:	mov	r3, r0
 4fc:	ldr	r3, [r3]
 500:	mov	r0, r3
 504:	bl	0 <coda_errno_to_string>
 508:	mov	r3, r0
 50c:	mov	r1, r3
 510:	movw	r0, #0
 514:	movt	r0, #0
 518:	bl	0 <printf>
 51c:	movw	r3, #0
 520:	movt	r3, #0
 524:	mov	r2, #1
 528:	str	r2, [r3]
 52c:	b	538 <check_file+0x2d4>
 530:	mov	r0, #10
 534:	bl	0 <putchar>
 538:	sub	sp, fp, #4
 53c:	ldr	fp, [sp]
 540:	add	sp, sp, #4
 544:	pop	{pc}		; (ldr pc, [sp], #4)

00000548 <main>:
 548:	str	r4, [sp, #-12]!
 54c:	str	fp, [sp, #4]
 550:	str	lr, [sp, #8]
 554:	add	fp, sp, #8
 558:	sub	sp, sp, #1024	; 0x400
 55c:	sub	sp, sp, #12
 560:	str	r0, [fp, #-1040]	; 0xfffffbf0
 564:	str	r1, [fp, #-1044]	; 0xfffffbec
 568:	mov	r3, #0
 56c:	str	r3, [fp, #-16]
 570:	movw	r3, #0
 574:	movt	r3, #0
 578:	mov	r2, #0
 57c:	str	r2, [r3]
 580:	movw	r3, #0
 584:	movt	r3, #0
 588:	mov	r2, #0
 58c:	str	r2, [r3]
 590:	mov	r3, #1
 594:	str	r3, [fp, #-20]	; 0xffffffec
 598:	movw	r3, #0
 59c:	movt	r3, #0
 5a0:	mov	r2, #0
 5a4:	str	r2, [r3]
 5a8:	ldr	r3, [fp, #-1040]	; 0xfffffbf0
 5ac:	cmp	r3, #1
 5b0:	beq	604 <main+0xbc>
 5b4:	ldr	r3, [fp, #-1044]	; 0xfffffbec
 5b8:	add	r3, r3, #4
 5bc:	ldr	r3, [r3]
 5c0:	movw	r1, #0
 5c4:	movt	r1, #0
 5c8:	mov	r0, r3
 5cc:	bl	0 <strcmp>
 5d0:	mov	r3, r0
 5d4:	cmp	r3, #0
 5d8:	beq	604 <main+0xbc>
 5dc:	ldr	r3, [fp, #-1044]	; 0xfffffbec
 5e0:	add	r3, r3, #4
 5e4:	ldr	r3, [r3]
 5e8:	movw	r1, #0
 5ec:	movt	r1, #0
 5f0:	mov	r0, r3
 5f4:	bl	0 <strcmp>
 5f8:	mov	r3, r0
 5fc:	cmp	r3, #0
 600:	bne	610 <main+0xc8>
 604:	bl	4c <print_help>
 608:	mov	r0, #0
 60c:	bl	0 <exit>
 610:	ldr	r3, [fp, #-1044]	; 0xfffffbec
 614:	add	r3, r3, #4
 618:	ldr	r3, [r3]
 61c:	movw	r1, #0
 620:	movt	r1, #0
 624:	mov	r0, r3
 628:	bl	0 <strcmp>
 62c:	mov	r3, r0
 630:	cmp	r3, #0
 634:	beq	660 <main+0x118>
 638:	ldr	r3, [fp, #-1044]	; 0xfffffbec
 63c:	add	r3, r3, #4
 640:	ldr	r3, [r3]
 644:	movw	r1, #0
 648:	movt	r1, #0
 64c:	mov	r0, r3
 650:	bl	0 <strcmp>
 654:	mov	r3, r0
 658:	cmp	r3, #0
 65c:	bne	66c <main+0x124>
 660:	bl	0 <print_version>
 664:	mov	r0, #0
 668:	bl	0 <exit>
 66c:	mov	r3, #1
 670:	str	r3, [fp, #-24]	; 0xffffffe8
 674:	ldr	r3, [fp, #-24]	; 0xffffffe8
 678:	add	r3, r3, #1
 67c:	ldr	r2, [fp, #-1040]	; 0xfffffbf0
 680:	cmp	r2, r3
 684:	ble	6e8 <main+0x1a0>
 688:	ldr	r3, [fp, #-24]	; 0xffffffe8
 68c:	lsl	r3, r3, #2
 690:	ldr	r2, [fp, #-1044]	; 0xfffffbec
 694:	add	r3, r2, r3
 698:	ldr	r3, [r3]
 69c:	movw	r1, #0
 6a0:	movt	r1, #0
 6a4:	mov	r0, r3
 6a8:	bl	0 <strcmp>
 6ac:	mov	r3, r0
 6b0:	cmp	r3, #0
 6b4:	bne	6e8 <main+0x1a0>
 6b8:	ldr	r3, [fp, #-24]	; 0xffffffe8
 6bc:	add	r3, r3, #1
 6c0:	lsl	r3, r3, #2
 6c4:	ldr	r2, [fp, #-1044]	; 0xfffffbec
 6c8:	add	r3, r2, r3
 6cc:	ldr	r3, [r3]
 6d0:	mov	r0, r3
 6d4:	bl	0 <coda_set_definition_path>
 6d8:	ldr	r3, [fp, #-24]	; 0xffffffe8
 6dc:	add	r3, r3, #2
 6e0:	str	r3, [fp, #-24]	; 0xffffffe8
 6e4:	b	758 <main+0x210>
 6e8:	movw	r3, #0
 6ec:	movt	r3, #0
 6f0:	str	r3, [fp, #-32]	; 0xffffffe0
 6f4:	ldr	r3, [fp, #-1044]	; 0xfffffbec
 6f8:	ldr	r3, [r3]
 6fc:	ldr	r2, [fp, #-32]	; 0xffffffe0
 700:	mov	r1, #0
 704:	mov	r0, r3
 708:	bl	0 <coda_set_definition_path_conditional>
 70c:	mov	r3, r0
 710:	cmp	r3, #0
 714:	beq	99c <main+0x454>
 718:	movw	r3, #0
 71c:	movt	r3, #0
 720:	ldr	r4, [r3]
 724:	bl	0 <coda_get_errno>
 728:	mov	r3, r0
 72c:	ldr	r3, [r3]
 730:	mov	r0, r3
 734:	bl	0 <coda_errno_to_string>
 738:	mov	r3, r0
 73c:	mov	r2, r3
 740:	movw	r1, #0
 744:	movt	r1, #0
 748:	mov	r0, r4
 74c:	bl	0 <fprintf>
 750:	mov	r0, #1
 754:	bl	0 <exit>
 758:	b	99c <main+0x454>
 75c:	ldr	r3, [fp, #-24]	; 0xffffffe8
 760:	lsl	r3, r3, #2
 764:	ldr	r2, [fp, #-1044]	; 0xfffffbec
 768:	add	r3, r2, r3
 76c:	ldr	r3, [r3]
 770:	movw	r1, #0
 774:	movt	r1, #0
 778:	mov	r0, r3
 77c:	bl	0 <strcmp>
 780:	mov	r3, r0
 784:	cmp	r3, #0
 788:	beq	7bc <main+0x274>
 78c:	ldr	r3, [fp, #-24]	; 0xffffffe8
 790:	lsl	r3, r3, #2
 794:	ldr	r2, [fp, #-1044]	; 0xfffffbec
 798:	add	r3, r2, r3
 79c:	ldr	r3, [r3]
 7a0:	movw	r1, #0
 7a4:	movt	r1, #0
 7a8:	mov	r0, r3
 7ac:	bl	0 <strcmp>
 7b0:	mov	r3, r0
 7b4:	cmp	r3, #0
 7b8:	bne	7d0 <main+0x288>
 7bc:	movw	r3, #0
 7c0:	movt	r3, #0
 7c4:	mov	r2, #1
 7c8:	str	r2, [r3]
 7cc:	b	990 <main+0x448>
 7d0:	ldr	r3, [fp, #-24]	; 0xffffffe8
 7d4:	lsl	r3, r3, #2
 7d8:	ldr	r2, [fp, #-1044]	; 0xfffffbec
 7dc:	add	r3, r2, r3
 7e0:	ldr	r3, [r3]
 7e4:	movw	r1, #0
 7e8:	movt	r1, #0
 7ec:	mov	r0, r3
 7f0:	bl	0 <strcmp>
 7f4:	mov	r3, r0
 7f8:	cmp	r3, #0
 7fc:	beq	830 <main+0x2e8>
 800:	ldr	r3, [fp, #-24]	; 0xffffffe8
 804:	lsl	r3, r3, #2
 808:	ldr	r2, [fp, #-1044]	; 0xfffffbec
 80c:	add	r3, r2, r3
 810:	ldr	r3, [r3]
 814:	movw	r1, #0
 818:	movt	r1, #0
 81c:	mov	r0, r3
 820:	bl	0 <strcmp>
 824:	mov	r3, r0
 828:	cmp	r3, #0
 82c:	bne	844 <main+0x2fc>
 830:	movw	r3, #0
 834:	movt	r3, #0
 838:	mov	r2, #1
 83c:	str	r2, [r3]
 840:	b	990 <main+0x448>
 844:	ldr	r3, [fp, #-24]	; 0xffffffe8
 848:	lsl	r3, r3, #2
 84c:	ldr	r2, [fp, #-1044]	; 0xfffffbec
 850:	add	r3, r2, r3
 854:	ldr	r3, [r3]
 858:	movw	r1, #0
 85c:	movt	r1, #0
 860:	mov	r0, r3
 864:	bl	0 <strcmp>
 868:	mov	r3, r0
 86c:	cmp	r3, #0
 870:	beq	8a4 <main+0x35c>
 874:	ldr	r3, [fp, #-24]	; 0xffffffe8
 878:	lsl	r3, r3, #2
 87c:	ldr	r2, [fp, #-1044]	; 0xfffffbec
 880:	add	r3, r2, r3
 884:	ldr	r3, [r3]
 888:	movw	r1, #0
 88c:	movt	r1, #0
 890:	mov	r0, r3
 894:	bl	0 <strcmp>
 898:	mov	r3, r0
 89c:	cmp	r3, #0
 8a0:	bne	8b8 <main+0x370>
 8a4:	movw	r3, #0
 8a8:	movt	r3, #0
 8ac:	mov	r2, #1
 8b0:	str	r2, [r3]
 8b4:	b	990 <main+0x448>
 8b8:	ldr	r3, [fp, #-24]	; 0xffffffe8
 8bc:	lsl	r3, r3, #2
 8c0:	ldr	r2, [fp, #-1044]	; 0xfffffbec
 8c4:	add	r3, r2, r3
 8c8:	ldr	r3, [r3]
 8cc:	movw	r1, #0
 8d0:	movt	r1, #0
 8d4:	mov	r0, r3
 8d8:	bl	0 <strcmp>
 8dc:	mov	r3, r0
 8e0:	cmp	r3, #0
 8e4:	bne	8f4 <main+0x3ac>
 8e8:	mov	r3, #0
 8ec:	str	r3, [fp, #-20]	; 0xffffffec
 8f0:	b	990 <main+0x448>
 8f4:	ldr	r3, [fp, #-24]	; 0xffffffe8
 8f8:	lsl	r3, r3, #2
 8fc:	ldr	r2, [fp, #-1044]	; 0xfffffbec
 900:	add	r3, r2, r3
 904:	ldr	r3, [r3]
 908:	movw	r1, #0
 90c:	movt	r1, #0
 910:	mov	r0, r3
 914:	bl	0 <strcmp>
 918:	mov	r3, r0
 91c:	cmp	r3, #0
 920:	bne	944 <main+0x3fc>
 924:	ldr	r3, [fp, #-1040]	; 0xfffffbf0
 928:	sub	r3, r3, #1
 92c:	ldr	r2, [fp, #-24]	; 0xffffffe8
 930:	cmp	r2, r3
 934:	bne	944 <main+0x3fc>
 938:	mov	r3, #1
 93c:	str	r3, [fp, #-16]
 940:	b	9b4 <main+0x46c>
 944:	ldr	r3, [fp, #-24]	; 0xffffffe8
 948:	lsl	r3, r3, #2
 94c:	ldr	r2, [fp, #-1044]	; 0xfffffbec
 950:	add	r3, r2, r3
 954:	ldr	r3, [r3]
 958:	ldrb	r3, [r3]
 95c:	cmp	r3, #45	; 0x2d
 960:	bne	9b0 <main+0x468>
 964:	movw	r3, #0
 968:	movt	r3, #0
 96c:	ldr	r3, [r3]
 970:	mov	r2, #25
 974:	mov	r1, #1
 978:	movw	r0, #0
 97c:	movt	r0, #0
 980:	bl	0 <fwrite>
 984:	bl	4c <print_help>
 988:	mov	r0, #1
 98c:	bl	0 <exit>
 990:	ldr	r3, [fp, #-24]	; 0xffffffe8
 994:	add	r3, r3, #1
 998:	str	r3, [fp, #-24]	; 0xffffffe8
 99c:	ldr	r2, [fp, #-24]	; 0xffffffe8
 9a0:	ldr	r3, [fp, #-1040]	; 0xfffffbf0
 9a4:	cmp	r2, r3
 9a8:	blt	75c <main+0x214>
 9ac:	b	9b4 <main+0x46c>
 9b0:	nop	{0}
 9b4:	bl	0 <coda_init>
 9b8:	mov	r3, r0
 9bc:	cmp	r3, #0
 9c0:	beq	a04 <main+0x4bc>
 9c4:	movw	r3, #0
 9c8:	movt	r3, #0
 9cc:	ldr	r4, [r3]
 9d0:	bl	0 <coda_get_errno>
 9d4:	mov	r3, r0
 9d8:	ldr	r3, [r3]
 9dc:	mov	r0, r3
 9e0:	bl	0 <coda_errno_to_string>
 9e4:	mov	r3, r0
 9e8:	mov	r2, r3
 9ec:	movw	r1, #0
 9f0:	movt	r1, #0
 9f4:	mov	r0, r4
 9f8:	bl	0 <fprintf>
 9fc:	mov	r0, #1
 a00:	bl	0 <exit>
 a04:	mov	r0, #0
 a08:	bl	0 <coda_set_option_perform_boundary_checks>
 a0c:	mov	r0, #0
 a10:	bl	0 <coda_set_option_perform_conversions>
 a14:	ldr	r0, [fp, #-20]	; 0xffffffec
 a18:	bl	0 <coda_set_option_use_mmap>
 a1c:	ldr	r3, [fp, #-16]
 a20:	cmp	r3, #0
 a24:	beq	b5c <main+0x614>
 a28:	mov	r3, #0
 a2c:	str	r3, [fp, #-28]	; 0xffffffe4
 a30:	bl	0 <getchar>
 a34:	mov	r3, r0
 a38:	strb	r3, [fp, #-33]	; 0xffffffdf
 a3c:	ldrb	r3, [fp, #-33]	; 0xffffffdf
 a40:	cmp	r3, #13
 a44:	bne	a7c <main+0x534>
 a48:	bl	0 <getchar>
 a4c:	mov	r3, r0
 a50:	strb	r3, [fp, #-34]	; 0xffffffde
 a54:	ldrb	r3, [fp, #-34]	; 0xffffffde
 a58:	cmp	r3, #10
 a5c:	beq	a7c <main+0x534>
 a60:	ldrb	r2, [fp, #-34]	; 0xffffffde
 a64:	movw	r3, #0
 a68:	movt	r3, #0
 a6c:	ldr	r3, [r3]
 a70:	mov	r1, r3
 a74:	mov	r0, r2
 a78:	bl	0 <ungetc>
 a7c:	ldrb	r3, [fp, #-33]	; 0xffffffdf
 a80:	cmp	r3, #10
 a84:	beq	a94 <main+0x54c>
 a88:	ldrb	r3, [fp, #-33]	; 0xffffffdf
 a8c:	cmp	r3, #13
 a90:	bne	ac0 <main+0x578>
 a94:	sub	r2, fp, #1024	; 0x400
 a98:	sub	r2, r2, #12
 a9c:	ldr	r3, [fp, #-28]	; 0xffffffe4
 aa0:	add	r3, r2, r3
 aa4:	mov	r2, #0
 aa8:	strb	r2, [r3]
 aac:	nop	{0}
 ab0:	ldr	r3, [fp, #-28]	; 0xffffffe4
 ab4:	cmp	r3, #0
 ab8:	ble	a28 <main+0x4e0>
 abc:	b	b10 <main+0x5c8>
 ac0:	sub	r2, fp, #1024	; 0x400
 ac4:	sub	r2, r2, #12
 ac8:	ldr	r3, [fp, #-28]	; 0xffffffe4
 acc:	add	r3, r2, r3
 ad0:	ldrb	r2, [fp, #-33]	; 0xffffffdf
 ad4:	strb	r2, [r3]
 ad8:	ldr	r3, [fp, #-28]	; 0xffffffe4
 adc:	add	r3, r3, #1
 ae0:	str	r3, [fp, #-28]	; 0xffffffe4
 ae4:	ldr	r3, [fp, #-28]	; 0xffffffe4
 ae8:	cmp	r3, #1000	; 0x3e8
 aec:	blt	a30 <main+0x4e8>
 af0:	movw	r3, #0
 af4:	movt	r3, #0
 af8:	mov	r2, #316	; 0x13c
 afc:	movw	r1, #0
 b00:	movt	r1, #0
 b04:	movw	r0, #0
 b08:	movt	r0, #0
 b0c:	bl	0 <__assert_fail>
 b10:	sub	r3, fp, #1024	; 0x400
 b14:	sub	r3, r3, #12
 b18:	mov	r0, r3
 b1c:	bl	264 <check_file>
 b20:	mov	r0, #0
 b24:	bl	0 <fflush>
 b28:	b	a28 <main+0x4e0>
 b2c:	ldr	r3, [fp, #-24]	; 0xffffffe8
 b30:	lsl	r3, r3, #2
 b34:	ldr	r2, [fp, #-1044]	; 0xfffffbec
 b38:	add	r3, r2, r3
 b3c:	ldr	r3, [r3]
 b40:	mov	r0, r3
 b44:	bl	264 <check_file>
 b48:	mov	r0, #0
 b4c:	bl	0 <fflush>
 b50:	ldr	r3, [fp, #-24]	; 0xffffffe8
 b54:	add	r3, r3, #1
 b58:	str	r3, [fp, #-24]	; 0xffffffe8
 b5c:	ldr	r2, [fp, #-24]	; 0xffffffe8
 b60:	ldr	r3, [fp, #-1040]	; 0xfffffbf0
 b64:	cmp	r2, r3
 b68:	blt	b2c <main+0x5e4>
 b6c:	bl	0 <coda_done>
 b70:	movw	r3, #0
 b74:	movt	r3, #0
 b78:	ldr	r3, [r3]
 b7c:	cmp	r3, #0
 b80:	beq	b8c <main+0x644>
 b84:	mov	r0, #1
 b88:	bl	0 <exit>
 b8c:	mov	r3, #0
 b90:	mov	r0, r3
 b94:	sub	sp, fp, #8
 b98:	ldr	r4, [sp]
 b9c:	ldr	fp, [sp, #4]
 ba0:	add	sp, sp, #8
 ba4:	pop	{pc}		; (ldr pc, [sp], #4)
