
../repos/prog2/6.Challenge:     file format elf32-littlearm


Disassembly of section .init:

00010358 <.init>:
   10358:	push	{r3, lr}
   1035c:	bl	103fc <abort@plt+0x3c>
   10360:	pop	{r3, pc}

Disassembly of section .plt:

00010364 <printf@plt-0x14>:
   10364:	push	{lr}		; (str lr, [sp, #-4]!)
   10368:	ldr	lr, [pc, #4]	; 10374 <printf@plt-0x4>
   1036c:	add	lr, pc, lr
   10370:	ldr	pc, [lr, #8]!
   10374:	andeq	r0, r1, ip, lsl #25

00010378 <printf@plt>:
   10378:	add	ip, pc, #0, 12
   1037c:	add	ip, ip, #16, 20	; 0x10000
   10380:	ldr	pc, [ip, #3212]!	; 0xc8c

00010384 <malloc@plt>:
   10384:	add	ip, pc, #0, 12
   10388:	add	ip, ip, #16, 20	; 0x10000
   1038c:	ldr	pc, [ip, #3204]!	; 0xc84

00010390 <__libc_start_main@plt>:
   10390:	add	ip, pc, #0, 12
   10394:	add	ip, ip, #16, 20	; 0x10000
   10398:	ldr	pc, [ip, #3196]!	; 0xc7c

0001039c <scanf@plt>:
   1039c:	add	ip, pc, #0, 12
   103a0:	add	ip, ip, #16, 20	; 0x10000
   103a4:	ldr	pc, [ip, #3188]!	; 0xc74

000103a8 <__gmon_start__@plt>:
   103a8:	add	ip, pc, #0, 12
   103ac:	add	ip, ip, #16, 20	; 0x10000
   103b0:	ldr	pc, [ip, #3180]!	; 0xc6c

000103b4 <exit@plt>:
   103b4:	add	ip, pc, #0, 12
   103b8:	add	ip, ip, #16, 20	; 0x10000
   103bc:	ldr	pc, [ip, #3172]!	; 0xc64

000103c0 <abort@plt>:
   103c0:	add	ip, pc, #0, 12
   103c4:	add	ip, ip, #16, 20	; 0x10000
   103c8:	ldr	pc, [ip, #3164]!	; 0xc5c

Disassembly of section .text:

000103cc <.text>:
   103cc:	bleq	4c510 <abort@plt+0x3c150>
   103d0:	cdpeq	0, 0, cr15, cr0, cr15, {2}
   103d4:	strbtmi	fp, [sl], -r2, lsl #24
   103d8:	strlt	fp, [r1], #-1028	; 0xfffffbfc
   103dc:			; <UNDEFINED> instruction: 0xc010f8df
   103e0:	stcgt	8, cr15, [r4, #-308]	; 0xfffffecc
   103e4:	blmi	1223f8 <abort@plt+0x112038>
   103e8:	svc	0x00d2f7ff
   103ec:	svc	0x00e8f7ff
   103f0:			; <UNDEFINED> instruction: 0x000105bd
   103f4:	andeq	r0, r1, ip, lsl #9
   103f8:	andeq	r0, r1, sp, ror r5
   103fc:	ldr	r3, [pc, #20]	; 10418 <abort@plt+0x58>
   10400:	ldr	r2, [pc, #20]	; 1041c <abort@plt+0x5c>
   10404:	add	r3, pc, r3
   10408:	ldr	r2, [r3, r2]
   1040c:	cmp	r2, #0
   10410:	bxeq	lr
   10414:	b	103a8 <__gmon_start__@plt>
   10418:	strdeq	r0, [r1], -r4
   1041c:	andeq	r0, r0, r8, lsr #32
   10420:	eorseq	pc, r4, r1, asr #4
   10424:	andeq	pc, r2, r0, asr #5
   10428:	teqeq	r4, #268435460	; 0x10000004	; <UNPREDICTABLE>
   1042c:	movweq	pc, #8896	; 0x22c0	; <UNPREDICTABLE>
   10430:	andle	r4, r5, r3, lsl #5
   10434:	movweq	pc, #576	; 0x240	; <UNPREDICTABLE>
   10438:	movweq	pc, #704	; 0x2c0	; <UNPREDICTABLE>
   1043c:	ldrmi	fp, [r8, -r3, lsl #2]
   10440:	svclt	0x00004770
   10444:	eorseq	pc, r4, r1, asr #4
   10448:	andeq	pc, r2, r0, asr #5
   1044c:	teqeq	r4, r1, asr #4	; <UNPREDICTABLE>
   10450:	smlabteq	r2, r0, r2, pc	; <UNPREDICTABLE>
   10454:	svceq	0x00d91a0b
   10458:			; <UNDEFINED> instruction: 0x01a3eb01
   1045c:	andle	r1, r5, r9, asr #32
   10460:	movweq	pc, #576	; 0x240	; <UNPREDICTABLE>
   10464:	movweq	pc, #704	; 0x2c0	; <UNPREDICTABLE>
   10468:	ldrmi	fp, [r8, -r3, lsl #2]
   1046c:	svclt	0x00004770
   10470:	vqrshl.s8	d27, d0, d1
   10474:	vmvn.i32	d16, #262144	; 0x00040000
   10478:	stmdavc	r3!, {r1, sl}
   1047c:			; <UNDEFINED> instruction: 0xf7ffb91b
   10480:	movwcs	pc, #8143	; 0x1fcf	; <UNPREDICTABLE>
   10484:	ldclt	0, cr7, [r0, #-140]	; 0xffffff74
   10488:	svclt	0x0000e7dc
   1048c:	mov	ip, sp
   10490:	sub	sp, sp, #32
   10494:	str	ip, [sp]
   10498:	str	lr, [sp, #4]
   1049c:	str	r4, [sp, #8]
   104a0:	str	r5, [sp, #12]
   104a4:	str	r6, [sp, #16]
   104a8:	str	r7, [sp, #20]
   104ac:	ldr	r0, [pc, #184]	; 1056c <abort@plt+0x1ac>
   104b0:	add	r1, sp, #24
   104b4:	bl	1039c <scanf@plt>
   104b8:	ldr	r0, [sp, #24]
   104bc:	cmp	r0, #0
   104c0:	bne	104cc <abort@plt+0x10c>
   104c4:	mov	r0, #0
   104c8:	bl	103b4 <exit@plt>
   104cc:	ldr	r0, [sp, #24]
   104d0:	lsl	r0, r0, #3
   104d4:	bl	10384 <malloc@plt>
   104d8:	mov	r4, r0
   104dc:	mov	r5, #0
   104e0:	ldr	r1, [sp, #24]
   104e4:	sub	r6, r1, #1
   104e8:	mov	r1, #0
   104ec:	ldr	r7, [sp, #24]
   104f0:	cmp	r1, r7
   104f4:	bge	10508 <abort@plt+0x148>
   104f8:	add	r0, r1, #1
   104fc:	str	r0, [r4, r1, lsl #2]
   10500:	mov	r1, r0
   10504:	b	104ec <abort@plt+0x12c>
   10508:	ldr	r0, [pc, #96]	; 10570 <abort@plt+0x1b0>
   1050c:	bl	10378 <printf@plt>
   10510:	cmp	r7, #2
   10514:	ble	10540 <abort@plt+0x180>
   10518:	ldr	r0, [pc, #72]	; 10568 <abort@plt+0x1a8>
   1051c:	ldr	r1, [r4, r5, lsl #2]
   10520:	bl	10378 <printf@plt>
   10524:	add	r2, r5, #1
   10528:	add	r6, r6, #1
   1052c:	ldr	ip, [r4, r2, lsl #2]
   10530:	str	ip, [r4, r6, lsl #2]
   10534:	add	r5, r2, #1
   10538:	sub	r7, r7, #1
   1053c:	b	10510 <abort@plt+0x150>
   10540:	add	r6, r5, #1
   10544:	ldr	r0, [pc, #32]	; 1056c <abort@plt+0x1ac>
   10548:	ldr	r1, [r4, r5, lsl #2]
   1054c:	bl	10378 <printf@plt>
   10550:	ldr	r0, [pc, #28]	; 10574 <abort@plt+0x1b4>
   10554:	bl	10378 <printf@plt>
   10558:	ldr	r0, [pc, #24]	; 10578 <abort@plt+0x1b8>
   1055c:	ldr	r1, [r4, r6, lsl #2]
   10560:	bl	10378 <printf@plt>
   10564:	b	104ac <abort@plt+0xec>
   10568:	andeq	r0, r1, r8, lsl #13
   1056c:	andeq	r0, r1, r5, lsl #13
   10570:	andeq	r0, r1, ip, asr r6
   10574:	andeq	r0, r1, r3, ror r6
   10578:	andeq	r0, r1, lr, ror #12
   1057c:	mvnsmi	lr, #737280	; 0xb4000
   10580:	cfmadd32mi	mvax0, mvfx4, mvfx12, mvfx7
   10584:	strmi	r4, [r8], ip, lsl #26
   10588:			; <UNDEFINED> instruction: 0x4691447e
   1058c:			; <UNDEFINED> instruction: 0xf7ff447d
   10590:	blne	1dcc128 <abort@plt+0x1dbbd68>
   10594:	strhle	r1, [sl], -r6
   10598:	strcs	r3, [r0], #-3332	; 0xfffff2fc
   1059c:	svccc	0x0004f855
   105a0:	strbmi	r4, [r1], -sl, asr #12
   105a4:	strcc	r4, [r1], #-1592	; 0xfffff9c8
   105a8:	adcmi	r4, r6, #152, 14	; 0x2600000
   105ac:	pop	{r1, r2, r4, r5, r6, r7, r8, ip, lr, pc}
   105b0:	svclt	0x000083f8
   105b4:	andeq	r0, r1, r8, lsl #19
   105b8:	andeq	r0, r1, r0, lsl #19
   105bc:	svclt	0x00004770

Disassembly of section .fini:

000105c0 <.fini>:
   105c0:	push	{r3, lr}
   105c4:	pop	{r3, pc}
