
../compcert-repos/dvidelabs-flatcc-3b39ef7/src/compiler/CMakeFiles/flatcc.dir/codegen_c.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <__flatcc_fb_open_output_file>:
   0:	push	{fp, lr}
   4:	mov	fp, sp
   8:	sub	sp, sp, #56	; 0x38
   c:	str	r0, [fp, #-8]
  10:	str	r1, [fp, #-12]
  14:	str	r2, [fp, #-16]
  18:	str	r3, [fp, #-20]	; 0xffffffec
  1c:	ldr	r0, [fp, #-8]
  20:	ldr	r0, [r0, #212]	; 0xd4
  24:	ldr	r0, [r0, #216]	; 0xd8
  28:	movw	r1, #0
  2c:	cmp	r0, r1
  30:	beq	48 <__flatcc_fb_open_output_file+0x48>
  34:	ldr	r0, [fp, #-8]
  38:	ldr	r0, [r0, #212]	; 0xd4
  3c:	ldr	r0, [r0, #216]	; 0xd8
  40:	str	r0, [sp, #16]
  44:	b	58 <__flatcc_fb_open_output_file+0x58>
  48:	movw	r0, #0
  4c:	movt	r0, #0
  50:	str	r0, [sp, #16]
  54:	b	58 <__flatcc_fb_open_output_file+0x58>
  58:	ldr	r0, [sp, #16]
  5c:	str	r0, [sp, #24]
  60:	ldr	r0, [sp, #24]
  64:	bl	0 <strlen>
  68:	str	r0, [sp, #20]
  6c:	ldr	r0, [fp, #-8]
  70:	ldr	r0, [r0, #204]	; 0xcc
  74:	movw	lr, #0
  78:	cmp	r0, lr
  7c:	beq	8c <__flatcc_fb_open_output_file+0x8c>
  80:	movw	r0, #0
  84:	str	r0, [fp, #-4]
  88:	b	120 <__flatcc_fb_open_output_file+0x120>
  8c:	ldr	r0, [sp, #24]
  90:	ldr	r1, [sp, #20]
  94:	ldr	r2, [fp, #-12]
  98:	ldr	r3, [fp, #-16]
  9c:	ldr	ip, [fp, #-20]	; 0xffffffec
  a0:	str	ip, [sp]
  a4:	movw	ip, #1
  a8:	str	ip, [sp, #4]
  ac:	bl	0 <__flatcc_fb_create_join_path_n>
  b0:	str	r0, [fp, #-24]	; 0xffffffe8
  b4:	bl	12c <checkmem>
  b8:	ldr	r0, [fp, #-24]	; 0xffffffe8
  bc:	movw	r1, #0
  c0:	movt	r1, #0
  c4:	bl	0 <fopen>
  c8:	ldr	r1, [fp, #-8]
  cc:	str	r0, [r1, #204]	; 0xcc
  d0:	movw	r0, #0
  d4:	str	r0, [sp, #28]
  d8:	ldr	r1, [fp, #-8]
  dc:	ldr	r1, [r1, #204]	; 0xcc
  e0:	cmp	r1, r0
  e4:	bne	110 <__flatcc_fb_open_output_file+0x110>
  e8:	movw	r0, #0
  ec:	movt	r0, #0
  f0:	ldr	r0, [r0]
  f4:	ldr	r2, [fp, #-24]	; 0xffffffe8
  f8:	movw	r1, #0
  fc:	movt	r1, #0
 100:	bl	0 <fprintf>
 104:	mvn	r1, #0
 108:	str	r1, [sp, #28]
 10c:	str	r0, [sp, #12]
 110:	ldr	r0, [fp, #-24]	; 0xffffffe8
 114:	bl	0 <free>
 118:	ldr	r0, [sp, #28]
 11c:	str	r0, [fp, #-4]
 120:	ldr	r0, [fp, #-4]
 124:	mov	sp, fp
 128:	pop	{fp, pc}

0000012c <checkmem>:
 12c:	push	{fp, lr}
 130:	mov	fp, sp
 134:	sub	sp, sp, #8
 138:	str	r0, [sp, #4]
 13c:	ldr	r0, [sp, #4]
 140:	movw	r1, #0
 144:	cmp	r0, r1
 148:	bne	174 <checkmem+0x48>
 14c:	movw	r0, #0
 150:	movt	r0, #0
 154:	ldr	r0, [r0]
 158:	movw	r1, #0
 15c:	movt	r1, #0
 160:	bl	0 <fprintf>
 164:	movw	r1, #1
 168:	str	r0, [sp]
 16c:	mov	r0, r1
 170:	bl	0 <exit>
 174:	mov	sp, fp
 178:	pop	{fp, pc}

0000017c <__flatcc_fb_close_output_file>:
 17c:	push	{fp, lr}
 180:	mov	fp, sp
 184:	sub	sp, sp, #8
 188:	str	r0, [sp, #4]
 18c:	ldr	r0, [sp, #4]
 190:	ldr	r0, [r0, #212]	; 0xd4
 194:	ldr	r0, [r0, #124]	; 0x7c
 198:	movw	r1, #0
 19c:	cmp	r0, r1
 1a0:	bne	1e8 <__flatcc_fb_close_output_file+0x6c>
 1a4:	ldr	r0, [sp, #4]
 1a8:	ldr	r0, [r0, #212]	; 0xd4
 1ac:	ldr	r0, [r0, #108]	; 0x6c
 1b0:	cmp	r0, #0
 1b4:	bne	1e8 <__flatcc_fb_close_output_file+0x6c>
 1b8:	ldr	r0, [sp, #4]
 1bc:	ldr	r0, [r0, #204]	; 0xcc
 1c0:	movw	r1, #0
 1c4:	cmp	r0, r1
 1c8:	beq	1e8 <__flatcc_fb_close_output_file+0x6c>
 1cc:	ldr	r0, [sp, #4]
 1d0:	ldr	r0, [r0, #204]	; 0xcc
 1d4:	bl	0 <fclose>
 1d8:	ldr	lr, [sp, #4]
 1dc:	movw	r1, #0
 1e0:	str	r1, [lr, #204]	; 0xcc
 1e4:	str	r0, [sp]
 1e8:	mov	sp, fp
 1ec:	pop	{fp, pc}

000001f0 <__flatcc_fb_end_output_c>:
 1f0:	push	{fp, lr}
 1f4:	mov	fp, sp
 1f8:	sub	sp, sp, #8
 1fc:	str	r0, [sp, #4]
 200:	ldr	r0, [sp, #4]
 204:	ldr	r0, [r0, #204]	; 0xcc
 208:	movw	r1, #0
 20c:	movt	r1, #0
 210:	ldr	r1, [r1]
 214:	cmp	r0, r1
 218:	beq	240 <__flatcc_fb_end_output_c+0x50>
 21c:	ldr	r0, [sp, #4]
 220:	ldr	r0, [r0, #204]	; 0xcc
 224:	movw	r1, #0
 228:	cmp	r0, r1
 22c:	beq	240 <__flatcc_fb_end_output_c+0x50>
 230:	ldr	r0, [sp, #4]
 234:	ldr	r0, [r0, #204]	; 0xcc
 238:	bl	0 <fclose>
 23c:	str	r0, [sp]
 240:	ldr	r0, [sp, #4]
 244:	movw	r1, #0
 248:	str	r1, [r0, #204]	; 0xcc
 24c:	mov	sp, fp
 250:	pop	{fp, pc}

00000254 <__flatcc_fb_init_output_c>:
 254:	push	{fp, lr}
 258:	mov	fp, sp
 25c:	sub	sp, sp, #56	; 0x38
 260:	str	r0, [fp, #-8]
 264:	str	r1, [fp, #-12]
 268:	movw	r0, #0
 26c:	str	r0, [fp, #-20]	; 0xffffffec
 270:	ldr	r1, [fp, #-12]
 274:	ldr	r1, [r1, #128]	; 0x80
 278:	cmp	r1, #0
 27c:	movw	r1, #0
 280:	movne	r1, #1
 284:	tst	r1, #1
 288:	movw	r1, #0
 28c:	movt	r1, #0
 290:	movw	r2, #0
 294:	movt	r2, #0
 298:	movne	r1, r2
 29c:	str	r1, [sp, #28]
 2a0:	ldr	r1, [fp, #-12]
 2a4:	ldr	r1, [r1, #216]	; 0xd8
 2a8:	cmp	r1, r0
 2ac:	beq	2c0 <__flatcc_fb_init_output_c+0x6c>
 2b0:	ldr	r0, [fp, #-12]
 2b4:	ldr	r0, [r0, #216]	; 0xd8
 2b8:	str	r0, [sp, #16]
 2bc:	b	2d0 <__flatcc_fb_init_output_c+0x7c>
 2c0:	movw	r0, #0
 2c4:	movt	r0, #0
 2c8:	str	r0, [sp, #16]
 2cc:	b	2d0 <__flatcc_fb_init_output_c+0x7c>
 2d0:	ldr	r0, [sp, #16]
 2d4:	str	r0, [sp, #24]
 2d8:	mvn	r0, #0
 2dc:	str	r0, [sp, #20]
 2e0:	ldr	r0, [fp, #-8]
 2e4:	movw	r1, #0
 2e8:	and	r1, r1, #255	; 0xff
 2ec:	movw	r2, #232	; 0xe8
 2f0:	bl	0 <memset>
 2f4:	ldr	r0, [fp, #-12]
 2f8:	ldr	r1, [fp, #-8]
 2fc:	str	r0, [r1, #212]	; 0xd4
 300:	ldr	r0, [fp, #-12]
 304:	ldr	r0, [r0, #196]	; 0xc4
 308:	str	r0, [fp, #-16]
 30c:	ldr	r0, [fp, #-16]
 310:	movw	r1, #0
 314:	cmp	r0, r1
 318:	beq	368 <__flatcc_fb_init_output_c+0x114>
 31c:	ldr	r0, [fp, #-12]
 320:	ldr	r0, [r0, #196]	; 0xc4
 324:	bl	0 <strlen>
 328:	str	r0, [fp, #-24]	; 0xffffffe8
 32c:	ldr	r0, [fp, #-24]	; 0xffffffe8
 330:	cmp	r0, #100	; 0x64
 334:	bls	364 <__flatcc_fb_init_output_c+0x110>
 338:	movw	r0, #0
 33c:	movt	r0, #0
 340:	ldr	r0, [r0]
 344:	movw	r1, #0
 348:	movt	r1, #0
 34c:	movw	r2, #100	; 0x64
 350:	bl	0 <fprintf>
 354:	mvn	r1, #0
 358:	str	r1, [fp, #-4]
 35c:	str	r0, [sp, #12]
 360:	b	50c <__flatcc_fb_init_output_c+0x2b8>
 364:	b	380 <__flatcc_fb_init_output_c+0x12c>
 368:	movw	r0, #0
 36c:	movt	r0, #0
 370:	str	r0, [fp, #-16]
 374:	ldr	r0, [fp, #-16]
 378:	bl	0 <strlen>
 37c:	str	r0, [fp, #-24]	; 0xffffffe8
 380:	ldr	r0, [fp, #-8]
 384:	ldr	r1, [fp, #-16]
 388:	movw	r2, #100	; 0x64
 38c:	bl	0 <strncpy>
 390:	ldr	r1, [fp, #-8]
 394:	movw	r2, #0
 398:	strb	r2, [r1, #100]	; 0x64
 39c:	ldr	r1, [fp, #-24]	; 0xffffffe8
 3a0:	cmp	r1, #0
 3a4:	str	r0, [sp, #8]
 3a8:	beq	3d8 <__flatcc_fb_init_output_c+0x184>
 3ac:	ldr	r0, [fp, #-8]
 3b0:	ldr	r1, [fp, #-24]	; 0xffffffe8
 3b4:	add	r0, r0, r1
 3b8:	movw	r1, #95	; 0x5f
 3bc:	strb	r1, [r0]
 3c0:	ldr	r0, [fp, #-8]
 3c4:	ldr	r1, [fp, #-24]	; 0xffffffe8
 3c8:	add	r1, r1, #1
 3cc:	add	r0, r0, r1
 3d0:	movw	r1, #0
 3d4:	strb	r1, [r0]
 3d8:	ldr	r0, [fp, #-8]
 3dc:	add	r0, r0, #102	; 0x66
 3e0:	ldr	r1, [fp, #-8]
 3e4:	bl	518 <pstrcpyupper>
 3e8:	ldr	r1, [fp, #-8]
 3ec:	add	r1, r1, #102	; 0x66
 3f0:	ldr	lr, [fp, #-24]	; 0xffffffe8
 3f4:	add	r1, r1, lr
 3f8:	movw	lr, #0
 3fc:	strb	lr, [r1]
 400:	ldr	r1, [fp, #-12]
 404:	ldr	r1, [r1, #176]	; 0xb0
 408:	ldr	lr, [fp, #-8]
 40c:	str	r1, [lr, #224]	; 0xe0
 410:	ldr	r1, [fp, #-12]
 414:	ldr	r1, [r1, #108]	; 0x6c
 418:	cmp	r1, #0
 41c:	str	r0, [sp, #4]
 420:	beq	444 <__flatcc_fb_init_output_c+0x1f0>
 424:	movw	r0, #0
 428:	movt	r0, #0
 42c:	ldr	r0, [r0]
 430:	ldr	r1, [fp, #-8]
 434:	str	r0, [r1, #204]	; 0xcc
 438:	movw	r0, #0
 43c:	str	r0, [fp, #-4]
 440:	b	50c <__flatcc_fb_init_output_c+0x2b8>
 444:	ldr	r0, [fp, #-8]
 448:	ldr	r0, [r0, #212]	; 0xd4
 44c:	ldr	r0, [r0, #124]	; 0x7c
 450:	movw	r1, #0
 454:	cmp	r0, r1
 458:	bne	468 <__flatcc_fb_init_output_c+0x214>
 45c:	movw	r0, #0
 460:	str	r0, [fp, #-4]
 464:	b	50c <__flatcc_fb_init_output_c+0x2b8>
 468:	ldr	r0, [sp, #24]
 46c:	ldr	r1, [fp, #-8]
 470:	ldr	r1, [r1, #212]	; 0xd4
 474:	ldr	r1, [r1, #124]	; 0x7c
 478:	movw	r2, #0
 47c:	movt	r2, #0
 480:	movw	r3, #1
 484:	bl	0 <__flatcc_fb_create_join_path>
 488:	str	r0, [fp, #-20]	; 0xffffffec
 48c:	bl	12c <checkmem>
 490:	ldr	r0, [fp, #-20]	; 0xffffffec
 494:	ldr	r1, [sp, #28]
 498:	bl	0 <fopen>
 49c:	ldr	r1, [fp, #-8]
 4a0:	str	r0, [r1, #204]	; 0xcc
 4a4:	ldr	r0, [fp, #-8]
 4a8:	ldr	r0, [r0, #204]	; 0xcc
 4ac:	movw	r1, #0
 4b0:	cmp	r0, r1
 4b4:	bne	4e4 <__flatcc_fb_init_output_c+0x290>
 4b8:	movw	r0, #0
 4bc:	movt	r0, #0
 4c0:	ldr	r0, [r0]
 4c4:	ldr	r2, [fp, #-20]	; 0xffffffec
 4c8:	movw	r1, #0
 4cc:	movt	r1, #0
 4d0:	bl	0 <fprintf>
 4d4:	mvn	r1, #0
 4d8:	str	r1, [sp, #20]
 4dc:	str	r0, [sp]
 4e0:	b	4ec <__flatcc_fb_init_output_c+0x298>
 4e4:	movw	r0, #0
 4e8:	str	r0, [sp, #20]
 4ec:	ldr	r0, [fp, #-20]	; 0xffffffec
 4f0:	movw	r1, #0
 4f4:	cmp	r0, r1
 4f8:	beq	504 <__flatcc_fb_init_output_c+0x2b0>
 4fc:	ldr	r0, [fp, #-20]	; 0xffffffec
 500:	bl	0 <free>
 504:	ldr	r0, [sp, #20]
 508:	str	r0, [fp, #-4]
 50c:	ldr	r0, [fp, #-4]
 510:	mov	sp, fp
 514:	pop	{fp, pc}

00000518 <pstrcpyupper>:
 518:	push	{fp, lr}
 51c:	mov	fp, sp
 520:	sub	sp, sp, #16
 524:	str	r0, [fp, #-4]
 528:	str	r1, [sp, #8]
 52c:	ldr	r0, [fp, #-4]
 530:	str	r0, [sp, #4]
 534:	ldr	r0, [sp, #8]
 538:	ldrsb	r0, [r0]
 53c:	cmp	r0, #0
 540:	beq	56c <pstrcpyupper+0x54>
 544:	ldr	r0, [sp, #8]
 548:	add	r1, r0, #1
 54c:	str	r1, [sp, #8]
 550:	ldrb	r0, [r0]
 554:	bl	0 <toupper>
 558:	ldr	r1, [sp, #4]
 55c:	add	lr, r1, #1
 560:	str	lr, [sp, #4]
 564:	strb	r0, [r1]
 568:	b	534 <pstrcpyupper+0x1c>
 56c:	ldr	r0, [sp, #4]
 570:	movw	r1, #0
 574:	strb	r1, [r0]
 578:	ldr	r0, [fp, #-4]
 57c:	mov	sp, fp
 580:	pop	{fp, pc}

00000584 <__flatcc_fb_gen_c_includes>:
 584:	push	{fp, lr}
 588:	mov	fp, sp
 58c:	sub	sp, sp, #72	; 0x48
 590:	str	r0, [fp, #-4]
 594:	str	r1, [fp, #-8]
 598:	str	r2, [fp, #-12]
 59c:	ldr	r0, [fp, #-4]
 5a0:	ldr	r0, [r0, #208]	; 0xd0
 5a4:	ldr	r0, [r0]
 5a8:	str	r0, [fp, #-16]
 5ac:	add	r0, sp, #28
 5b0:	movw	r1, #0
 5b4:	and	r1, r1, #255	; 0xff
 5b8:	movw	r2, #16
 5bc:	bl	0 <memset>
 5c0:	ldr	r0, [fp, #-4]
 5c4:	ldr	r0, [r0, #208]	; 0xd0
 5c8:	ldr	r0, [r0, #164]	; 0xa4
 5cc:	bl	0 <__flatcc_fb_copy_path>
 5d0:	add	r1, sp, #28
 5d4:	str	r0, [sp, #24]
 5d8:	mov	r0, r1
 5dc:	ldr	r1, [sp, #24]
 5e0:	movw	r2, #1
 5e4:	bl	0 <str_set_insert_item>
 5e8:	str	r0, [sp, #20]
 5ec:	ldr	r0, [fp, #-16]
 5f0:	movw	r1, #0
 5f4:	cmp	r0, r1
 5f8:	beq	6f8 <__flatcc_fb_gen_c_includes+0x174>
 5fc:	ldr	r0, [fp, #-16]
 600:	ldr	r0, [r0, #8]
 604:	ldr	r1, [fp, #-16]
 608:	ldr	r1, [r1, #12]
 60c:	ldr	r2, [fp, #-4]
 610:	ldr	r2, [r2, #212]	; 0xd4
 614:	ldr	r2, [r2, #96]	; 0x60
 618:	bl	0 <__flatcc_fb_create_basename>
 61c:	str	r0, [fp, #-20]	; 0xffffffec
 620:	bl	12c <checkmem>
 624:	ldr	r0, [fp, #-16]
 628:	ldr	r0, [r0]
 62c:	str	r0, [fp, #-16]
 630:	ldr	r0, [fp, #-20]	; 0xffffffec
 634:	bl	0 <__flatcc_fb_copy_path>
 638:	str	r0, [fp, #-24]	; 0xffffffe8
 63c:	bl	12c <checkmem>
 640:	ldr	r0, [fp, #-24]	; 0xffffffe8
 644:	str	r0, [fp, #-28]	; 0xffffffe4
 648:	ldr	r0, [fp, #-28]	; 0xffffffe4
 64c:	ldrsb	r0, [r0]
 650:	cmp	r0, #0
 654:	beq	67c <__flatcc_fb_gen_c_includes+0xf8>
 658:	ldr	r0, [fp, #-28]	; 0xffffffe4
 65c:	ldrb	r0, [r0]
 660:	bl	0 <toupper>
 664:	ldr	lr, [fp, #-28]	; 0xffffffe4
 668:	strb	r0, [lr]
 66c:	ldr	r0, [fp, #-28]	; 0xffffffe4
 670:	add	r0, r0, #1
 674:	str	r0, [fp, #-28]	; 0xffffffe4
 678:	b	648 <__flatcc_fb_gen_c_includes+0xc4>
 67c:	ldr	r1, [fp, #-24]	; 0xffffffe8
 680:	add	r0, sp, #28
 684:	movw	r2, #1
 688:	bl	0 <str_set_insert_item>
 68c:	movw	r1, #0
 690:	cmp	r0, r1
 694:	beq	6ac <__flatcc_fb_gen_c_includes+0x128>
 698:	ldr	r0, [fp, #-24]	; 0xffffffe8
 69c:	bl	0 <free>
 6a0:	ldr	r0, [fp, #-20]	; 0xffffffec
 6a4:	bl	0 <free>
 6a8:	b	5ec <__flatcc_fb_gen_c_includes+0x68>
 6ac:	ldr	r0, [fp, #-4]
 6b0:	ldr	r0, [r0, #204]	; 0xcc
 6b4:	ldr	r2, [fp, #-24]	; 0xffffffe8
 6b8:	ldr	r3, [fp, #-12]
 6bc:	ldr	r1, [fp, #-20]	; 0xffffffec
 6c0:	ldr	ip, [fp, #-8]
 6c4:	movw	lr, #0
 6c8:	movt	lr, #0
 6cc:	str	r1, [sp, #16]
 6d0:	mov	r1, lr
 6d4:	ldr	lr, [sp, #16]
 6d8:	str	lr, [sp]
 6dc:	str	ip, [sp, #4]
 6e0:	bl	0 <fprintf>
 6e4:	ldr	r1, [fp, #-20]	; 0xffffffec
 6e8:	str	r0, [sp, #12]
 6ec:	mov	r0, r1
 6f0:	bl	0 <free>
 6f4:	b	5ec <__flatcc_fb_gen_c_includes+0x68>
 6f8:	add	r0, sp, #28
 6fc:	movw	r1, #0
 700:	movt	r1, #0
 704:	movw	r2, #0
 708:	bl	0 <str_set_destroy>
 70c:	mov	sp, fp
 710:	pop	{fp, pc}

00000714 <_str_set_destructor>:
 714:	push	{fp, lr}
 718:	mov	fp, sp
 71c:	sub	sp, sp, #8
 720:	str	r0, [sp, #4]
 724:	str	r1, [sp]
 728:	ldr	r0, [sp]
 72c:	bl	0 <free>
 730:	mov	sp, fp
 734:	pop	{fp, pc}

00000738 <__flatcc_fb_copy_scope>:
 738:	push	{fp, lr}
 73c:	mov	fp, sp
 740:	sub	sp, sp, #24
 744:	str	r0, [fp, #-8]
 748:	str	r1, [sp, #12]
 74c:	ldr	r0, [fp, #-8]
 750:	ldr	r0, [r0, #24]
 754:	str	r0, [sp, #4]
 758:	ldr	r0, [fp, #-8]
 75c:	ldr	r0, [r0]
 760:	str	r0, [sp]
 764:	ldr	r0, [sp]
 768:	movw	r1, #0
 76c:	cmp	r0, r1
 770:	beq	7a8 <__flatcc_fb_copy_scope+0x70>
 774:	ldr	r0, [sp]
 778:	ldr	r0, [r0, #4]
 77c:	ldr	r0, [r0, #4]
 780:	str	r0, [sp, #8]
 784:	ldr	r0, [sp, #8]
 788:	add	r0, r0, #1
 78c:	ldr	r1, [sp, #4]
 790:	add	r0, r1, r0
 794:	str	r0, [sp, #4]
 798:	ldr	r0, [sp]
 79c:	ldr	r0, [r0]
 7a0:	str	r0, [sp]
 7a4:	b	764 <__flatcc_fb_copy_scope+0x2c>
 7a8:	ldr	r0, [sp, #4]
 7ac:	cmp	r0, #101	; 0x65
 7b0:	bls	7cc <__flatcc_fb_copy_scope+0x94>
 7b4:	ldr	r0, [sp, #12]
 7b8:	movw	r1, #0
 7bc:	strb	r1, [r0]
 7c0:	mvn	r0, #0
 7c4:	str	r0, [fp, #-4]
 7c8:	b	890 <__flatcc_fb_copy_scope+0x158>
 7cc:	ldr	r0, [fp, #-8]
 7d0:	ldr	r0, [r0, #24]
 7d4:	str	r0, [sp, #4]
 7d8:	ldr	r0, [sp, #12]
 7dc:	ldr	r1, [fp, #-8]
 7e0:	ldr	r1, [r1, #20]
 7e4:	ldr	r2, [sp, #4]
 7e8:	bl	0 <memcpy>
 7ec:	ldr	r0, [fp, #-8]
 7f0:	ldr	r0, [r0]
 7f4:	str	r0, [sp]
 7f8:	ldr	r0, [sp]
 7fc:	movw	r1, #0
 800:	cmp	r0, r1
 804:	beq	874 <__flatcc_fb_copy_scope+0x13c>
 808:	ldr	r0, [sp]
 80c:	ldr	r0, [r0, #4]
 810:	ldr	r0, [r0, #4]
 814:	str	r0, [sp, #8]
 818:	ldr	r0, [sp, #12]
 81c:	ldr	r1, [sp, #4]
 820:	add	r0, r0, r1
 824:	ldr	r1, [sp]
 828:	ldr	r1, [r1, #4]
 82c:	ldr	r1, [r1]
 830:	ldr	r2, [sp, #8]
 834:	bl	0 <memcpy>
 838:	ldr	r0, [sp, #8]
 83c:	add	r0, r0, #1
 840:	ldr	r1, [sp, #4]
 844:	add	r0, r1, r0
 848:	str	r0, [sp, #4]
 84c:	ldr	r0, [sp, #12]
 850:	ldr	r1, [sp, #4]
 854:	sub	r1, r1, #1
 858:	add	r0, r0, r1
 85c:	movw	r1, #95	; 0x5f
 860:	strb	r1, [r0]
 864:	ldr	r0, [sp]
 868:	ldr	r0, [r0]
 86c:	str	r0, [sp]
 870:	b	7f8 <__flatcc_fb_copy_scope+0xc0>
 874:	ldr	r0, [sp, #12]
 878:	ldr	r1, [sp, #4]
 87c:	add	r0, r0, r1
 880:	movw	r1, #0
 884:	strb	r1, [r0]
 888:	ldr	r0, [sp, #4]
 88c:	str	r0, [fp, #-4]
 890:	ldr	r0, [fp, #-4]
 894:	mov	sp, fp
 898:	pop	{fp, pc}

0000089c <__flatcc_fb_scoped_symbol_name>:
 89c:	push	{fp, lr}
 8a0:	mov	fp, sp
 8a4:	sub	sp, sp, #24
 8a8:	str	r0, [fp, #-4]
 8ac:	str	r1, [fp, #-8]
 8b0:	str	r2, [sp, #12]
 8b4:	ldr	r0, [fp, #-8]
 8b8:	ldr	r0, [r0, #4]
 8bc:	str	r0, [sp, #8]
 8c0:	ldr	r0, [sp, #12]
 8c4:	ldr	r0, [r0, #204]	; 0xcc
 8c8:	ldr	r1, [fp, #-4]
 8cc:	cmp	r0, r1
 8d0:	beq	920 <__flatcc_fb_scoped_symbol_name+0x84>
 8d4:	ldr	r0, [fp, #-4]
 8d8:	ldr	r1, [sp, #12]
 8dc:	bl	738 <__flatcc_fb_copy_scope>
 8e0:	ldr	r1, [sp, #12]
 8e4:	str	r0, [r1, #208]	; 0xd0
 8e8:	movw	r1, #0
 8ec:	cmp	r1, r0
 8f0:	ble	91c <__flatcc_fb_scoped_symbol_name+0x80>
 8f4:	ldr	r0, [sp, #12]
 8f8:	movw	r1, #0
 8fc:	str	r1, [r0, #208]	; 0xd0
 900:	movw	r0, #0
 904:	movt	r0, #0
 908:	ldr	r0, [r0]
 90c:	movw	r1, #0
 910:	movt	r1, #0
 914:	bl	0 <fprintf>
 918:	str	r0, [sp, #4]
 91c:	b	920 <__flatcc_fb_scoped_symbol_name+0x84>
 920:	ldr	r0, [sp, #8]
 924:	ldr	r0, [r0, #4]
 928:	ldr	r1, [sp, #12]
 92c:	str	r0, [r1, #212]	; 0xd4
 930:	ldr	r0, [sp, #12]
 934:	ldr	r0, [r0, #208]	; 0xd0
 938:	ldr	r1, [sp, #12]
 93c:	ldr	r1, [r1, #212]	; 0xd4
 940:	add	r0, r0, r1
 944:	ldr	r1, [sp, #12]
 948:	str	r0, [r1, #216]	; 0xd8
 94c:	ldr	r0, [sp, #12]
 950:	ldr	r0, [r0, #216]	; 0xd8
 954:	cmp	r0, #203	; 0xcb
 958:	ble	9c0 <__flatcc_fb_scoped_symbol_name+0x124>
 95c:	movw	r0, #0
 960:	movt	r0, #0
 964:	ldr	r0, [r0]
 968:	ldr	r1, [sp, #12]
 96c:	ldr	r2, [r1, #212]	; 0xd4
 970:	ldr	r1, [sp, #8]
 974:	ldr	r3, [r1]
 978:	movw	r1, #0
 97c:	movt	r1, #0
 980:	bl	0 <fprintf>
 984:	ldr	r1, [sp, #12]
 988:	ldr	r1, [r1, #208]	; 0xd0
 98c:	movw	r2, #204	; 0xcc
 990:	sub	r1, r2, r1
 994:	sub	r1, r1, #1
 998:	ldr	r2, [sp, #12]
 99c:	str	r1, [r2, #212]	; 0xd4
 9a0:	ldr	r1, [sp, #12]
 9a4:	ldr	r1, [r1, #208]	; 0xd0
 9a8:	ldr	r2, [sp, #12]
 9ac:	ldr	r2, [r2, #212]	; 0xd4
 9b0:	add	r1, r1, r2
 9b4:	ldr	r2, [sp, #12]
 9b8:	str	r1, [r2, #216]	; 0xd8
 9bc:	str	r0, [sp]
 9c0:	ldr	r0, [sp, #12]
 9c4:	ldr	r1, [sp, #12]
 9c8:	ldr	r1, [r1, #208]	; 0xd0
 9cc:	add	r0, r0, r1
 9d0:	ldr	r1, [sp, #8]
 9d4:	ldr	r1, [r1]
 9d8:	ldr	r2, [sp, #12]
 9dc:	ldr	r2, [r2, #212]	; 0xd4
 9e0:	bl	0 <memcpy>
 9e4:	ldr	r0, [sp, #12]
 9e8:	ldr	r1, [sp, #12]
 9ec:	ldr	r1, [r1, #216]	; 0xd8
 9f0:	add	r0, r0, r1
 9f4:	movw	r1, #0
 9f8:	strb	r1, [r0]
 9fc:	mov	sp, fp
 a00:	pop	{fp, pc}

00000a04 <__flatcc_fb_codegen_common_c>:
 a04:	push	{fp, lr}
 a08:	mov	fp, sp
 a0c:	sub	sp, sp, #24
 a10:	str	r0, [fp, #-8]
 a14:	ldr	r0, [fp, #-8]
 a18:	bl	0 <strlen>
 a1c:	sub	r0, r0, #1
 a20:	str	r0, [sp, #12]
 a24:	movw	r0, #0
 a28:	str	r0, [sp, #8]
 a2c:	ldr	r0, [fp, #-8]
 a30:	ldr	r0, [r0, #212]	; 0xd4
 a34:	ldr	r0, [r0, #144]	; 0x90
 a38:	cmp	r0, #0
 a3c:	beq	a80 <__flatcc_fb_codegen_common_c+0x7c>
 a40:	ldr	r0, [fp, #-8]
 a44:	ldr	r1, [fp, #-8]
 a48:	ldr	r2, [sp, #12]
 a4c:	movw	r3, #0
 a50:	movt	r3, #0
 a54:	bl	0 <__flatcc_fb_open_output_file>
 a58:	cmp	r0, #0
 a5c:	beq	a6c <__flatcc_fb_codegen_common_c+0x68>
 a60:	mvn	r0, #0
 a64:	str	r0, [fp, #-4]
 a68:	b	aec <__flatcc_fb_codegen_common_c+0xe8>
 a6c:	ldr	r0, [fp, #-8]
 a70:	bl	0 <__flatcc_fb_gen_common_c_header>
 a74:	str	r0, [sp, #8]
 a78:	ldr	r0, [fp, #-8]
 a7c:	bl	17c <__flatcc_fb_close_output_file>
 a80:	ldr	r0, [sp, #8]
 a84:	cmp	r0, #0
 a88:	bne	ae4 <__flatcc_fb_codegen_common_c+0xe0>
 a8c:	ldr	r0, [fp, #-8]
 a90:	ldr	r0, [r0, #212]	; 0xd4
 a94:	ldr	r0, [r0, #148]	; 0x94
 a98:	cmp	r0, #0
 a9c:	beq	ae4 <__flatcc_fb_codegen_common_c+0xe0>
 aa0:	ldr	r0, [fp, #-8]
 aa4:	ldr	r1, [fp, #-8]
 aa8:	ldr	r2, [sp, #12]
 aac:	movw	r3, #0
 ab0:	movt	r3, #0
 ab4:	bl	0 <__flatcc_fb_open_output_file>
 ab8:	cmp	r0, #0
 abc:	beq	acc <__flatcc_fb_codegen_common_c+0xc8>
 ac0:	mvn	r0, #0
 ac4:	str	r0, [fp, #-4]
 ac8:	b	aec <__flatcc_fb_codegen_common_c+0xe8>
 acc:	ldr	r0, [fp, #-8]
 ad0:	bl	0 <__flatcc_fb_gen_common_c_builder_header>
 ad4:	ldr	lr, [fp, #-8]
 ad8:	str	r0, [sp, #4]
 adc:	mov	r0, lr
 ae0:	bl	17c <__flatcc_fb_close_output_file>
 ae4:	ldr	r0, [sp, #8]
 ae8:	str	r0, [fp, #-4]
 aec:	ldr	r0, [fp, #-4]
 af0:	mov	sp, fp
 af4:	pop	{fp, pc}

00000af8 <__flatcc_fb_codegen_c>:
 af8:	push	{fp, lr}
 afc:	mov	fp, sp
 b00:	sub	sp, sp, #24
 b04:	str	r0, [fp, #-4]
 b08:	str	r1, [fp, #-8]
 b0c:	movw	r0, #0
 b10:	str	r0, [sp, #8]
 b14:	ldr	r1, [fp, #-8]
 b18:	ldr	r2, [fp, #-4]
 b1c:	str	r1, [r2, #208]	; 0xd0
 b20:	ldr	r1, [fp, #-8]
 b24:	ldr	r1, [r1, #60]	; 0x3c
 b28:	str	r0, [sp, #4]
 b2c:	mov	r0, r1
 b30:	ldr	r1, [sp, #4]
 b34:	ldr	r2, [sp, #4]
 b38:	bl	0 <fb_scope_table_find>
 b3c:	ldr	r1, [fp, #-4]
 b40:	str	r0, [r1, #216]	; 0xd8
 b44:	ldr	r0, [fp, #-4]
 b48:	ldr	r0, [r0, #208]	; 0xd0
 b4c:	ldr	r0, [r0, #160]	; 0xa0
 b50:	bl	0 <strlen>
 b54:	str	r0, [sp, #12]
 b58:	ldr	r0, [fp, #-4]
 b5c:	ldr	r0, [r0, #212]	; 0xd4
 b60:	ldr	r0, [r0, #152]	; 0x98
 b64:	cmp	r0, #0
 b68:	beq	bc0 <__flatcc_fb_codegen_c+0xc8>
 b6c:	ldr	r0, [fp, #-4]
 b70:	ldr	r1, [fp, #-4]
 b74:	ldr	r1, [r1, #208]	; 0xd0
 b78:	ldr	r1, [r1, #160]	; 0xa0
 b7c:	ldr	r2, [sp, #12]
 b80:	movw	r3, #0
 b84:	movt	r3, #0
 b88:	bl	0 <__flatcc_fb_open_output_file>
 b8c:	cmp	r0, #0
 b90:	beq	ba0 <__flatcc_fb_codegen_c+0xa8>
 b94:	mvn	r0, #0
 b98:	str	r0, [sp, #8]
 b9c:	b	d64 <__flatcc_fb_codegen_c+0x26c>
 ba0:	ldr	r0, [fp, #-4]
 ba4:	bl	0 <__flatcc_fb_gen_c_reader>
 ba8:	str	r0, [sp, #8]
 bac:	cmp	r0, #0
 bb0:	beq	bb8 <__flatcc_fb_codegen_c+0xc0>
 bb4:	b	d64 <__flatcc_fb_codegen_c+0x26c>
 bb8:	ldr	r0, [fp, #-4]
 bbc:	bl	17c <__flatcc_fb_close_output_file>
 bc0:	ldr	r0, [fp, #-4]
 bc4:	ldr	r0, [r0, #212]	; 0xd4
 bc8:	ldr	r0, [r0, #156]	; 0x9c
 bcc:	cmp	r0, #0
 bd0:	beq	c28 <__flatcc_fb_codegen_c+0x130>
 bd4:	ldr	r0, [fp, #-4]
 bd8:	ldr	r1, [fp, #-4]
 bdc:	ldr	r1, [r1, #208]	; 0xd0
 be0:	ldr	r1, [r1, #160]	; 0xa0
 be4:	ldr	r2, [sp, #12]
 be8:	movw	r3, #0
 bec:	movt	r3, #0
 bf0:	bl	0 <__flatcc_fb_open_output_file>
 bf4:	cmp	r0, #0
 bf8:	beq	c08 <__flatcc_fb_codegen_c+0x110>
 bfc:	mvn	r0, #0
 c00:	str	r0, [sp, #8]
 c04:	b	d64 <__flatcc_fb_codegen_c+0x26c>
 c08:	ldr	r0, [fp, #-4]
 c0c:	bl	0 <__flatcc_fb_gen_c_builder>
 c10:	str	r0, [sp, #8]
 c14:	cmp	r0, #0
 c18:	beq	c20 <__flatcc_fb_codegen_c+0x128>
 c1c:	b	d64 <__flatcc_fb_codegen_c+0x26c>
 c20:	ldr	r0, [fp, #-4]
 c24:	bl	17c <__flatcc_fb_close_output_file>
 c28:	ldr	r0, [fp, #-4]
 c2c:	ldr	r0, [r0, #212]	; 0xd4
 c30:	ldr	r0, [r0, #160]	; 0xa0
 c34:	cmp	r0, #0
 c38:	beq	c90 <__flatcc_fb_codegen_c+0x198>
 c3c:	ldr	r0, [fp, #-4]
 c40:	ldr	r1, [fp, #-4]
 c44:	ldr	r1, [r1, #208]	; 0xd0
 c48:	ldr	r1, [r1, #160]	; 0xa0
 c4c:	ldr	r2, [sp, #12]
 c50:	movw	r3, #0
 c54:	movt	r3, #0
 c58:	bl	0 <__flatcc_fb_open_output_file>
 c5c:	cmp	r0, #0
 c60:	beq	c70 <__flatcc_fb_codegen_c+0x178>
 c64:	mvn	r0, #0
 c68:	str	r0, [sp, #8]
 c6c:	b	d64 <__flatcc_fb_codegen_c+0x26c>
 c70:	ldr	r0, [fp, #-4]
 c74:	bl	0 <__flatcc_fb_gen_c_verifier>
 c78:	str	r0, [sp, #8]
 c7c:	cmp	r0, #0
 c80:	beq	c88 <__flatcc_fb_codegen_c+0x190>
 c84:	b	d64 <__flatcc_fb_codegen_c+0x26c>
 c88:	ldr	r0, [fp, #-4]
 c8c:	bl	17c <__flatcc_fb_close_output_file>
 c90:	ldr	r0, [fp, #-4]
 c94:	ldr	r0, [r0, #212]	; 0xd4
 c98:	ldr	r0, [r0, #164]	; 0xa4
 c9c:	cmp	r0, #0
 ca0:	beq	cf8 <__flatcc_fb_codegen_c+0x200>
 ca4:	ldr	r0, [fp, #-4]
 ca8:	ldr	r1, [fp, #-4]
 cac:	ldr	r1, [r1, #208]	; 0xd0
 cb0:	ldr	r1, [r1, #160]	; 0xa0
 cb4:	ldr	r2, [sp, #12]
 cb8:	movw	r3, #0
 cbc:	movt	r3, #0
 cc0:	bl	0 <__flatcc_fb_open_output_file>
 cc4:	cmp	r0, #0
 cc8:	beq	cd8 <__flatcc_fb_codegen_c+0x1e0>
 ccc:	mvn	r0, #0
 cd0:	str	r0, [sp, #8]
 cd4:	b	d64 <__flatcc_fb_codegen_c+0x26c>
 cd8:	ldr	r0, [fp, #-4]
 cdc:	bl	0 <__flatcc_fb_gen_c_json_parser>
 ce0:	str	r0, [sp, #8]
 ce4:	cmp	r0, #0
 ce8:	beq	cf0 <__flatcc_fb_codegen_c+0x1f8>
 cec:	b	d64 <__flatcc_fb_codegen_c+0x26c>
 cf0:	ldr	r0, [fp, #-4]
 cf4:	bl	17c <__flatcc_fb_close_output_file>
 cf8:	ldr	r0, [fp, #-4]
 cfc:	ldr	r0, [r0, #212]	; 0xd4
 d00:	ldr	r0, [r0, #168]	; 0xa8
 d04:	cmp	r0, #0
 d08:	beq	d60 <__flatcc_fb_codegen_c+0x268>
 d0c:	ldr	r0, [fp, #-4]
 d10:	ldr	r1, [fp, #-4]
 d14:	ldr	r1, [r1, #208]	; 0xd0
 d18:	ldr	r1, [r1, #160]	; 0xa0
 d1c:	ldr	r2, [sp, #12]
 d20:	movw	r3, #0
 d24:	movt	r3, #0
 d28:	bl	0 <__flatcc_fb_open_output_file>
 d2c:	cmp	r0, #0
 d30:	beq	d40 <__flatcc_fb_codegen_c+0x248>
 d34:	mvn	r0, #0
 d38:	str	r0, [sp, #8]
 d3c:	b	d64 <__flatcc_fb_codegen_c+0x26c>
 d40:	ldr	r0, [fp, #-4]
 d44:	bl	0 <__flatcc_fb_gen_c_json_printer>
 d48:	str	r0, [sp, #8]
 d4c:	cmp	r0, #0
 d50:	beq	d58 <__flatcc_fb_codegen_c+0x260>
 d54:	b	d64 <__flatcc_fb_codegen_c+0x26c>
 d58:	ldr	r0, [fp, #-4]
 d5c:	bl	17c <__flatcc_fb_close_output_file>
 d60:	b	d64 <__flatcc_fb_codegen_c+0x26c>
 d64:	ldr	r0, [sp, #8]
 d68:	mov	sp, fp
 d6c:	pop	{fp, pc}
