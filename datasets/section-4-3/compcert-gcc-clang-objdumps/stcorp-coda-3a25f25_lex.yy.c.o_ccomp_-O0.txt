
../repos/stcorp-coda-3a25f25/CMakeFiles/coda.dir/lex.yy.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <coda_expression_lex>:
       0:	mov	ip, sp
       4:	sub	sp, sp, #24
       8:	str	ip, [sp]
       c:	str	lr, [sp, #4]
      10:	str	r4, [sp, #8]
      14:	str	r5, [sp, #12]
      18:	str	r6, [sp, #16]
      1c:	str	r7, [sp, #20]
      20:	mov	r4, r1
      24:	str	r0, [r4, #92]	; 0x5c
      28:	ldr	ip, [r4, #40]	; 0x28
      2c:	cmp	ip, #0
      30:	bne	d4 <coda_expression_lex+0xd4>
      34:	mov	r1, #1
      38:	str	r1, [r4, #40]	; 0x28
      3c:	ldr	r1, [r4, #44]	; 0x2c
      40:	cmp	r1, #0
      44:	bne	50 <coda_expression_lex+0x50>
      48:	mov	r2, #1
      4c:	str	r2, [r4, #44]	; 0x2c
      50:	ldr	r1, [r4, #4]
      54:	cmp	r1, #0
      58:	bne	68 <coda_expression_lex+0x68>
      5c:	ldr	r1, [pc, #1956]	; 808 <coda_expression_lex+0x808>
      60:	ldr	ip, [r1]
      64:	str	ip, [r4, #4]
      68:	ldr	r2, [r4, #8]
      6c:	cmp	r2, #0
      70:	bne	80 <coda_expression_lex+0x80>
      74:	ldr	r0, [pc, #1964]	; 828 <coda_expression_lex+0x828>
      78:	ldr	r0, [r0]
      7c:	str	r0, [r4, #8]
      80:	ldr	r2, [r4, #20]
      84:	cmp	r2, #0
      88:	beq	9c <coda_expression_lex+0x9c>
      8c:	ldr	ip, [r4, #20]
      90:	ldr	r3, [r4, #12]
      94:	ldr	r1, [ip, r3, lsl #2]
      98:	b	a0 <coda_expression_lex+0xa0>
      9c:	mov	r1, #0
      a0:	cmp	r1, #0
      a4:	bne	cc <coda_expression_lex+0xcc>
      a8:	mov	r0, r4
      ac:	bl	1598 <coda_expression_ensure_buffer_stack>
      b0:	ldr	r0, [r4, #4]
      b4:	mov	r1, #16384	; 0x4000
      b8:	mov	r2, r4
      bc:	bl	113c <coda_expression__create_buffer>
      c0:	ldr	r1, [r4, #20]
      c4:	ldr	r3, [r4, #12]
      c8:	str	r0, [r1, r3, lsl #2]
      cc:	mov	r0, r4
      d0:	bl	10d0 <coda_expression__load_buffer_state>
      d4:	ldr	r6, [r4, #36]	; 0x24
      d8:	ldrb	r3, [r4, #24]
      dc:	and	r1, r3, #255	; 0xff
      e0:	strb	r1, [r6]
      e4:	mov	r7, r6
      e8:	ldr	r5, [r4, #44]	; 0x2c
      ec:	ldr	r0, [pc, #1828]	; 818 <coda_expression_lex+0x818>
      f0:	ldrb	r2, [r6]
      f4:	and	r3, r2, #255	; 0xff
      f8:	ldrb	r2, [r0, r3]
      fc:	and	ip, r2, #255	; 0xff
     100:	ldr	r1, [pc, #1804]	; 814 <coda_expression_lex+0x814>
     104:	add	r1, r1, r5, lsl #1
     108:	ldrsh	r3, [r1]
     10c:	cmp	r3, #0
     110:	beq	11c <coda_expression_lex+0x11c>
     114:	str	r5, [r4, #64]	; 0x40
     118:	str	r6, [r4, #68]	; 0x44
     11c:	ldr	r3, [pc, #1772]	; 810 <coda_expression_lex+0x810>
     120:	ldr	r0, [pc, #1764]	; 80c <coda_expression_lex+0x80c>
     124:	add	r2, r0, r5, lsl #1
     128:	ldrsh	r1, [r2]
     12c:	add	r2, r1, ip
     130:	add	r0, r3, r2, lsl #1
     134:	ldrsh	r0, [r0]
     138:	cmp	r0, r5
     13c:	beq	168 <coda_expression_lex+0x168>
     140:	ldr	r0, [pc, #1752]	; 820 <coda_expression_lex+0x820>
     144:	add	r0, r0, r5, lsl #1
     148:	ldrsh	r5, [r0]
     14c:	movw	lr, #274	; 0x112
     150:	cmp	r5, lr
     154:	blt	11c <coda_expression_lex+0x11c>
     158:	ldr	r0, [pc, #1724]	; 81c <coda_expression_lex+0x81c>
     15c:	ldrb	r3, [r0, ip]
     160:	and	ip, r3, #255	; 0xff
     164:	b	11c <coda_expression_lex+0x11c>
     168:	ldr	r3, [pc, #1724]	; 82c <coda_expression_lex+0x82c>
     16c:	ldr	r2, [pc, #1688]	; 80c <coda_expression_lex+0x80c>
     170:	add	r0, r2, r5, lsl #1
     174:	ldrsh	r0, [r0]
     178:	add	ip, r0, ip
     17c:	add	r0, r3, ip, lsl #1
     180:	ldrsh	r5, [r0]
     184:	add	r6, r6, #1
     188:	ldr	r1, [pc, #1660]	; 80c <coda_expression_lex+0x80c>
     18c:	add	r3, r1, r5, lsl #1
     190:	ldrsh	ip, [r3]
     194:	movw	lr, #307	; 0x133
     198:	cmp	ip, lr
     19c:	bne	ec <coda_expression_lex+0xec>
     1a0:	ldr	r2, [pc, #1644]	; 814 <coda_expression_lex+0x814>
     1a4:	add	ip, r2, r5, lsl #1
     1a8:	ldrsh	r0, [ip]
     1ac:	cmp	r0, #0
     1b0:	bne	1c8 <coda_expression_lex+0x1c8>
     1b4:	ldr	r6, [r4, #68]	; 0x44
     1b8:	ldr	ip, [r4, #64]	; 0x40
     1bc:	ldr	r3, [pc, #1616]	; 814 <coda_expression_lex+0x814>
     1c0:	add	r1, r3, ip, lsl #1
     1c4:	ldrsh	r0, [r1]
     1c8:	str	r7, [r4, #80]	; 0x50
     1cc:	sub	r2, r6, r7
     1d0:	str	r2, [r4, #32]
     1d4:	ldrb	ip, [r6]
     1d8:	and	r1, ip, #255	; 0xff
     1dc:	strb	r1, [r4, #24]
     1e0:	mov	ip, #0
     1e4:	strb	ip, [r6]
     1e8:	str	r6, [r4, #36]	; 0x24
     1ec:	cmp	r0, #77	; 0x4d
     1f0:	bcs	7f8 <coda_expression_lex+0x7f8>
     1f4:	add	pc, pc, r0, lsl #2
     1f8:	nop	{0}
     1fc:	b	330 <coda_expression_lex+0x330>
     200:	b	348 <coda_expression_lex+0x348>
     204:	b	39c <coda_expression_lex+0x39c>
     208:	b	3a4 <coda_expression_lex+0x3a4>
     20c:	b	3ac <coda_expression_lex+0x3ac>
     210:	b	3b4 <coda_expression_lex+0x3b4>
     214:	b	3bc <coda_expression_lex+0x3bc>
     218:	b	3c4 <coda_expression_lex+0x3c4>
     21c:	b	3cc <coda_expression_lex+0x3cc>
     220:	b	3d4 <coda_expression_lex+0x3d4>
     224:	b	3dc <coda_expression_lex+0x3dc>
     228:	b	3e4 <coda_expression_lex+0x3e4>
     22c:	b	3ec <coda_expression_lex+0x3ec>
     230:	b	3f4 <coda_expression_lex+0x3f4>
     234:	b	3fc <coda_expression_lex+0x3fc>
     238:	b	404 <coda_expression_lex+0x404>
     23c:	b	40c <coda_expression_lex+0x40c>
     240:	b	414 <coda_expression_lex+0x414>
     244:	b	41c <coda_expression_lex+0x41c>
     248:	b	424 <coda_expression_lex+0x424>
     24c:	b	42c <coda_expression_lex+0x42c>
     250:	b	434 <coda_expression_lex+0x434>
     254:	b	43c <coda_expression_lex+0x43c>
     258:	b	444 <coda_expression_lex+0x444>
     25c:	b	44c <coda_expression_lex+0x44c>
     260:	b	454 <coda_expression_lex+0x454>
     264:	b	45c <coda_expression_lex+0x45c>
     268:	b	464 <coda_expression_lex+0x464>
     26c:	b	46c <coda_expression_lex+0x46c>
     270:	b	474 <coda_expression_lex+0x474>
     274:	b	47c <coda_expression_lex+0x47c>
     278:	b	484 <coda_expression_lex+0x484>
     27c:	b	48c <coda_expression_lex+0x48c>
     280:	b	494 <coda_expression_lex+0x494>
     284:	b	49c <coda_expression_lex+0x49c>
     288:	b	4a4 <coda_expression_lex+0x4a4>
     28c:	b	4ac <coda_expression_lex+0x4ac>
     290:	b	4b4 <coda_expression_lex+0x4b4>
     294:	b	4bc <coda_expression_lex+0x4bc>
     298:	b	4c4 <coda_expression_lex+0x4c4>
     29c:	b	4cc <coda_expression_lex+0x4cc>
     2a0:	b	4d4 <coda_expression_lex+0x4d4>
     2a4:	b	4dc <coda_expression_lex+0x4dc>
     2a8:	b	4e4 <coda_expression_lex+0x4e4>
     2ac:	b	4ec <coda_expression_lex+0x4ec>
     2b0:	b	4f4 <coda_expression_lex+0x4f4>
     2b4:	b	4fc <coda_expression_lex+0x4fc>
     2b8:	b	504 <coda_expression_lex+0x504>
     2bc:	b	50c <coda_expression_lex+0x50c>
     2c0:	b	514 <coda_expression_lex+0x514>
     2c4:	b	51c <coda_expression_lex+0x51c>
     2c8:	b	524 <coda_expression_lex+0x524>
     2cc:	b	52c <coda_expression_lex+0x52c>
     2d0:	b	534 <coda_expression_lex+0x534>
     2d4:	b	53c <coda_expression_lex+0x53c>
     2d8:	b	544 <coda_expression_lex+0x544>
     2dc:	b	54c <coda_expression_lex+0x54c>
     2e0:	b	554 <coda_expression_lex+0x554>
     2e4:	b	55c <coda_expression_lex+0x55c>
     2e8:	b	564 <coda_expression_lex+0x564>
     2ec:	b	56c <coda_expression_lex+0x56c>
     2f0:	b	574 <coda_expression_lex+0x574>
     2f4:	b	57c <coda_expression_lex+0x57c>
     2f8:	b	584 <coda_expression_lex+0x584>
     2fc:	b	58c <coda_expression_lex+0x58c>
     300:	b	594 <coda_expression_lex+0x594>
     304:	b	59c <coda_expression_lex+0x59c>
     308:	b	5a4 <coda_expression_lex+0x5a4>
     30c:	b	5ac <coda_expression_lex+0x5ac>
     310:	b	5c4 <coda_expression_lex+0x5c4>
     314:	b	5dc <coda_expression_lex+0x5dc>
     318:	b	5f4 <coda_expression_lex+0x5f4>
     31c:	b	d4 <coda_expression_lex+0xd4>
     320:	b	60c <coda_expression_lex+0x60c>
     324:	b	618 <coda_expression_lex+0x618>
     328:	b	650 <coda_expression_lex+0x650>
     32c:	b	630 <coda_expression_lex+0x630>
     330:	ldrb	ip, [r4, #24]
     334:	and	r1, ip, #255	; 0xff
     338:	strb	r1, [r6]
     33c:	ldr	r6, [r4, #68]	; 0x44
     340:	ldr	r5, [r4, #64]	; 0x40
     344:	b	1a0 <coda_expression_lex+0x1a0>
     348:	ldr	ip, [r4, #32]
     34c:	sub	r0, ip, #1
     350:	bl	0 <malloc>
     354:	ldr	r1, [r4, #92]	; 0x5c
     358:	str	r0, [r1]
     35c:	ldr	r1, [r4, #92]	; 0x5c
     360:	ldr	r0, [r1]
     364:	ldr	r2, [r4, #80]	; 0x50
     368:	add	r1, r2, #1
     36c:	ldr	r2, [r4, #32]
     370:	sub	r2, r2, #2
     374:	bl	0 <memcpy>
     378:	ldr	r1, [r4, #92]	; 0x5c
     37c:	ldr	r0, [r1]
     380:	ldr	r3, [r4, #32]
     384:	add	ip, r0, r3
     388:	mov	r0, #0
     38c:	sub	lr, ip, #4096	; 0x1000
     390:	strb	r0, [lr, #4094]	; 0xffe
     394:	mov	r0, #260	; 0x104
     398:	b	634 <coda_expression_lex+0x634>
     39c:	movw	r0, #266	; 0x10a
     3a0:	b	634 <coda_expression_lex+0x634>
     3a4:	movw	r0, #267	; 0x10b
     3a8:	b	634 <coda_expression_lex+0x634>
     3ac:	mov	r0, #268	; 0x10c
     3b0:	b	634 <coda_expression_lex+0x634>
     3b4:	movw	r0, #269	; 0x10d
     3b8:	b	634 <coda_expression_lex+0x634>
     3bc:	movw	r0, #270	; 0x10e
     3c0:	b	634 <coda_expression_lex+0x634>
     3c4:	movw	r0, #271	; 0x10f
     3c8:	b	634 <coda_expression_lex+0x634>
     3cc:	movw	r0, #263	; 0x107
     3d0:	b	634 <coda_expression_lex+0x634>
     3d4:	mov	r0, #264	; 0x108
     3d8:	b	634 <coda_expression_lex+0x634>
     3dc:	movw	r0, #265	; 0x109
     3e0:	b	634 <coda_expression_lex+0x634>
     3e4:	movw	r0, #273	; 0x111
     3e8:	b	634 <coda_expression_lex+0x634>
     3ec:	movw	r0, #274	; 0x112
     3f0:	b	634 <coda_expression_lex+0x634>
     3f4:	movw	r0, #275	; 0x113
     3f8:	b	634 <coda_expression_lex+0x634>
     3fc:	mov	r0, #276	; 0x114
     400:	b	634 <coda_expression_lex+0x634>
     404:	movw	r0, #277	; 0x115
     408:	b	634 <coda_expression_lex+0x634>
     40c:	movw	r0, #278	; 0x116
     410:	b	634 <coda_expression_lex+0x634>
     414:	movw	r0, #279	; 0x117
     418:	b	634 <coda_expression_lex+0x634>
     41c:	mov	r0, #280	; 0x118
     420:	b	634 <coda_expression_lex+0x634>
     424:	movw	r0, #281	; 0x119
     428:	b	634 <coda_expression_lex+0x634>
     42c:	movw	r0, #282	; 0x11a
     430:	b	634 <coda_expression_lex+0x634>
     434:	movw	r0, #283	; 0x11b
     438:	b	634 <coda_expression_lex+0x634>
     43c:	mov	r0, #284	; 0x11c
     440:	b	634 <coda_expression_lex+0x634>
     444:	movw	r0, #285	; 0x11d
     448:	b	634 <coda_expression_lex+0x634>
     44c:	movw	r0, #286	; 0x11e
     450:	b	634 <coda_expression_lex+0x634>
     454:	movw	r0, #287	; 0x11f
     458:	b	634 <coda_expression_lex+0x634>
     45c:	mov	r0, #288	; 0x120
     460:	b	634 <coda_expression_lex+0x634>
     464:	movw	r0, #289	; 0x121
     468:	b	634 <coda_expression_lex+0x634>
     46c:	movw	r0, #290	; 0x122
     470:	b	634 <coda_expression_lex+0x634>
     474:	movw	r0, #291	; 0x123
     478:	b	634 <coda_expression_lex+0x634>
     47c:	mov	r0, #292	; 0x124
     480:	b	634 <coda_expression_lex+0x634>
     484:	movw	r0, #293	; 0x125
     488:	b	634 <coda_expression_lex+0x634>
     48c:	movw	r0, #294	; 0x126
     490:	b	634 <coda_expression_lex+0x634>
     494:	movw	r0, #295	; 0x127
     498:	b	634 <coda_expression_lex+0x634>
     49c:	mov	r0, #296	; 0x128
     4a0:	b	634 <coda_expression_lex+0x634>
     4a4:	movw	r0, #297	; 0x129
     4a8:	b	634 <coda_expression_lex+0x634>
     4ac:	movw	r0, #298	; 0x12a
     4b0:	b	634 <coda_expression_lex+0x634>
     4b4:	movw	r0, #299	; 0x12b
     4b8:	b	634 <coda_expression_lex+0x634>
     4bc:	mov	r0, #300	; 0x12c
     4c0:	b	634 <coda_expression_lex+0x634>
     4c4:	movw	r0, #301	; 0x12d
     4c8:	b	634 <coda_expression_lex+0x634>
     4cc:	movw	r0, #302	; 0x12e
     4d0:	b	634 <coda_expression_lex+0x634>
     4d4:	movw	r0, #303	; 0x12f
     4d8:	b	634 <coda_expression_lex+0x634>
     4dc:	mov	r0, #304	; 0x130
     4e0:	b	634 <coda_expression_lex+0x634>
     4e4:	movw	r0, #305	; 0x131
     4e8:	b	634 <coda_expression_lex+0x634>
     4ec:	movw	r0, #306	; 0x132
     4f0:	b	634 <coda_expression_lex+0x634>
     4f4:	movw	r0, #307	; 0x133
     4f8:	b	634 <coda_expression_lex+0x634>
     4fc:	mov	r0, #308	; 0x134
     500:	b	634 <coda_expression_lex+0x634>
     504:	movw	r0, #309	; 0x135
     508:	b	634 <coda_expression_lex+0x634>
     50c:	movw	r0, #310	; 0x136
     510:	b	634 <coda_expression_lex+0x634>
     514:	movw	r0, #311	; 0x137
     518:	b	634 <coda_expression_lex+0x634>
     51c:	mov	r0, #312	; 0x138
     520:	b	634 <coda_expression_lex+0x634>
     524:	movw	r0, #313	; 0x139
     528:	b	634 <coda_expression_lex+0x634>
     52c:	movw	r0, #314	; 0x13a
     530:	b	634 <coda_expression_lex+0x634>
     534:	movw	r0, #315	; 0x13b
     538:	b	634 <coda_expression_lex+0x634>
     53c:	mov	r0, #316	; 0x13c
     540:	b	634 <coda_expression_lex+0x634>
     544:	movw	r0, #317	; 0x13d
     548:	b	634 <coda_expression_lex+0x634>
     54c:	movw	r0, #318	; 0x13e
     550:	b	634 <coda_expression_lex+0x634>
     554:	movw	r0, #319	; 0x13f
     558:	b	634 <coda_expression_lex+0x634>
     55c:	mov	r0, #320	; 0x140
     560:	b	634 <coda_expression_lex+0x634>
     564:	movw	r0, #321	; 0x141
     568:	b	634 <coda_expression_lex+0x634>
     56c:	movw	r0, #322	; 0x142
     570:	b	634 <coda_expression_lex+0x634>
     574:	movw	r0, #323	; 0x143
     578:	b	634 <coda_expression_lex+0x634>
     57c:	mov	r0, #324	; 0x144
     580:	b	634 <coda_expression_lex+0x634>
     584:	movw	r0, #325	; 0x145
     588:	b	634 <coda_expression_lex+0x634>
     58c:	movw	r0, #326	; 0x146
     590:	b	634 <coda_expression_lex+0x634>
     594:	movw	r0, #327	; 0x147
     598:	b	634 <coda_expression_lex+0x634>
     59c:	mov	r0, #328	; 0x148
     5a0:	b	634 <coda_expression_lex+0x634>
     5a4:	movw	r0, #329	; 0x149
     5a8:	b	634 <coda_expression_lex+0x634>
     5ac:	ldr	r0, [r4, #80]	; 0x50
     5b0:	bl	0 <strdup>
     5b4:	ldr	r1, [r4, #92]	; 0x5c
     5b8:	str	r0, [r1]
     5bc:	movw	r0, #262	; 0x106
     5c0:	b	634 <coda_expression_lex+0x634>
     5c4:	ldr	r0, [r4, #80]	; 0x50
     5c8:	bl	0 <strdup>
     5cc:	ldr	r1, [r4, #92]	; 0x5c
     5d0:	str	r0, [r1]
     5d4:	movw	r0, #261	; 0x105
     5d8:	b	634 <coda_expression_lex+0x634>
     5dc:	ldr	r0, [r4, #80]	; 0x50
     5e0:	bl	0 <strdup>
     5e4:	ldr	r1, [r4, #92]	; 0x5c
     5e8:	str	r0, [r1]
     5ec:	movw	r0, #258	; 0x102
     5f0:	b	634 <coda_expression_lex+0x634>
     5f4:	ldr	r0, [r4, #80]	; 0x50
     5f8:	bl	0 <strdup>
     5fc:	ldr	r3, [r4, #92]	; 0x5c
     600:	str	r0, [r3]
     604:	movw	r0, #259	; 0x103
     608:	b	634 <coda_expression_lex+0x634>
     60c:	ldr	r0, [r4, #80]	; 0x50
     610:	ldrb	r0, [r0]
     614:	b	634 <coda_expression_lex+0x634>
     618:	ldr	r0, [r4, #80]	; 0x50
     61c:	ldr	r1, [r4, #32]
     620:	mov	r2, #1
     624:	ldr	r3, [r4, #8]
     628:	bl	0 <fwrite>
     62c:	b	d4 <coda_expression_lex+0xd4>
     630:	mov	r0, #0
     634:	ldr	r4, [sp, #8]
     638:	ldr	r5, [sp, #12]
     63c:	ldr	r6, [sp, #16]
     640:	ldr	r7, [sp, #20]
     644:	ldr	lr, [sp, #4]
     648:	add	sp, sp, #24
     64c:	bx	lr
     650:	ldr	ip, [r4, #80]	; 0x50
     654:	sub	r0, r6, ip
     658:	sub	r5, r0, #1
     65c:	ldrb	r1, [r4, #24]
     660:	and	r3, r1, #255	; 0xff
     664:	strb	r3, [r6]
     668:	ldr	ip, [r4, #20]
     66c:	ldr	r0, [r4, #12]
     670:	ldr	r2, [ip, r0, lsl #2]
     674:	ldr	r1, [r2, #44]	; 0x2c
     678:	cmp	r1, #0
     67c:	bne	6bc <coda_expression_lex+0x6bc>
     680:	ldr	ip, [r4, #20]
     684:	ldr	r2, [r4, #12]
     688:	ldr	r1, [ip, r2, lsl #2]
     68c:	ldr	r0, [r1, #16]
     690:	str	r0, [r4, #28]
     694:	ldr	r3, [r4, #20]
     698:	ldr	r0, [r4, #12]
     69c:	ldr	r1, [r3, r0, lsl #2]
     6a0:	ldr	r0, [r4, #4]
     6a4:	str	r0, [r1]
     6a8:	ldr	ip, [r4, #20]
     6ac:	ldr	r3, [r4, #12]
     6b0:	ldr	r3, [ip, r3, lsl #2]
     6b4:	mov	r0, #1
     6b8:	str	r0, [r3, #44]	; 0x2c
     6bc:	ldr	r1, [r4, #36]	; 0x24
     6c0:	ldr	r2, [r4, #20]
     6c4:	ldr	ip, [r4, #12]
     6c8:	ldr	r0, [r2, ip, lsl #2]
     6cc:	ldr	r3, [r0, #4]
     6d0:	ldr	ip, [r4, #28]
     6d4:	add	r3, r3, ip
     6d8:	cmp	r1, r3
     6dc:	bls	7ac <coda_expression_lex+0x7ac>
     6e0:	mov	r0, r4
     6e4:	bl	830 <yy_get_next_buffer>
     6e8:	cmp	r0, #0
     6ec:	beq	788 <coda_expression_lex+0x788>
     6f0:	cmp	r0, #1
     6f4:	beq	734 <coda_expression_lex+0x734>
     6f8:	cmp	r0, #2
     6fc:	bne	d4 <coda_expression_lex+0xd4>
     700:	ldr	r2, [r4, #20]
     704:	ldr	r3, [r4, #12]
     708:	ldr	r0, [r2, r3, lsl #2]
     70c:	ldr	r2, [r0, #4]
     710:	ldr	r3, [r4, #28]
     714:	add	ip, r2, r3
     718:	str	ip, [r4, #36]	; 0x24
     71c:	mov	r0, r4
     720:	bl	d44 <yy_get_previous_state>
     724:	mov	r5, r0
     728:	ldr	r6, [r4, #36]	; 0x24
     72c:	ldr	r7, [r4, #80]	; 0x50
     730:	b	1a0 <coda_expression_lex+0x1a0>
     734:	mov	r2, #0
     738:	str	r2, [r4, #48]	; 0x30
     73c:	mov	r3, #1
     740:	cmp	r3, #0
     744:	bne	764 <coda_expression_lex+0x764>
     748:	ldr	r1, [r4, #48]	; 0x30
     74c:	cmp	r1, #0
     750:	bne	d4 <coda_expression_lex+0xd4>
     754:	ldr	r0, [r4, #4]
     758:	mov	r1, r4
     75c:	bl	f3c <coda_expression_restart>
     760:	b	d4 <coda_expression_lex+0xd4>
     764:	ldr	ip, [r4, #80]	; 0x50
     768:	str	ip, [r4, #36]	; 0x24
     76c:	ldr	r2, [r4, #44]	; 0x2c
     770:	sub	r2, r2, #1
     774:	asr	lr, r2, #31
     778:	add	lr, r2, lr, lsr #31
     77c:	asr	r1, lr, #1
     780:	add	r0, r1, #76	; 0x4c
     784:	b	1ec <coda_expression_lex+0x1ec>
     788:	ldr	ip, [r4, #80]	; 0x50
     78c:	add	r2, ip, r5
     790:	str	r2, [r4, #36]	; 0x24
     794:	mov	r0, r4
     798:	bl	d44 <yy_get_previous_state>
     79c:	mov	r5, r0
     7a0:	ldr	r6, [r4, #36]	; 0x24
     7a4:	ldr	r7, [r4, #80]	; 0x50
     7a8:	b	ec <coda_expression_lex+0xec>
     7ac:	ldr	r2, [r4, #80]	; 0x50
     7b0:	add	r2, r2, r5
     7b4:	str	r2, [r4, #36]	; 0x24
     7b8:	mov	r0, r4
     7bc:	bl	d44 <yy_get_previous_state>
     7c0:	mov	r5, r0
     7c4:	mov	r1, r4
     7c8:	mov	r0, r5
     7cc:	bl	e58 <yy_try_NUL_trans>
     7d0:	ldr	r7, [r4, #80]	; 0x50
     7d4:	cmp	r0, #0
     7d8:	beq	7f0 <coda_expression_lex+0x7f0>
     7dc:	ldr	r1, [r4, #36]	; 0x24
     7e0:	add	r6, r1, #1
     7e4:	str	r6, [r4, #36]	; 0x24
     7e8:	mov	r5, r0
     7ec:	b	ec <coda_expression_lex+0xec>
     7f0:	ldr	r6, [r4, #36]	; 0x24
     7f4:	b	1a0 <coda_expression_lex+0x1a0>
     7f8:	ldr	r0, [pc, #36]	; 824 <coda_expression_lex+0x824>
     7fc:	mov	r1, r4
     800:	bl	18f4 <yy_fatal_error>
     804:	b	d4 <coda_expression_lex+0xd4>
     808:	.word	0x00000000
     80c:	.word	0x0000054a
     810:	.word	0x00000c56
     814:	.word	0x000001fa
     818:	.word	0x0000041e
     81c:	.word	0x0000051e
     820:	.word	0x00000772
     824:	.word	0x00000136
     828:	.word	0x00000000
     82c:	.word	0x0000099a

00000830 <yy_get_next_buffer>:
     830:	mov	ip, sp
     834:	sub	sp, sp, #24
     838:	str	ip, [sp]
     83c:	str	lr, [sp, #4]
     840:	str	r4, [sp, #8]
     844:	str	r5, [sp, #12]
     848:	str	r6, [sp, #16]
     84c:	str	r7, [sp, #20]
     850:	mov	r4, r0
     854:	ldr	ip, [r4, #20]
     858:	ldr	r3, [r4, #12]
     85c:	ldr	ip, [ip, r3, lsl #2]
     860:	ldr	r7, [ip, #4]
     864:	ldr	r5, [r4, #80]	; 0x50
     868:	ldr	r2, [r4, #36]	; 0x24
     86c:	ldr	r1, [r4, #20]
     870:	ldr	r0, [r4, #12]
     874:	ldr	r1, [r1, r0, lsl #2]
     878:	ldr	r1, [r1, #4]
     87c:	ldr	r3, [r4, #28]
     880:	add	r3, r1, r3
     884:	add	r0, r3, #1
     888:	cmp	r2, r0
     88c:	bls	89c <yy_get_next_buffer+0x6c>
     890:	ldr	r0, [pc, #1184]	; d38 <yy_get_next_buffer+0x508>
     894:	mov	r1, r4
     898:	bl	18f4 <yy_fatal_error>
     89c:	ldr	r3, [r4, #20]
     8a0:	ldr	r2, [r4, #12]
     8a4:	ldr	r2, [r3, r2, lsl #2]
     8a8:	ldr	r3, [r2, #40]	; 0x28
     8ac:	cmp	r3, #0
     8b0:	bne	8d8 <yy_get_next_buffer+0xa8>
     8b4:	ldr	ip, [r4, #36]	; 0x24
     8b8:	ldr	r0, [r4, #80]	; 0x50
     8bc:	sub	r0, ip, r0
     8c0:	cmp	r0, #1
     8c4:	beq	8d0 <yy_get_next_buffer+0xa0>
     8c8:	mov	r0, #2
     8cc:	b	d18 <yy_get_next_buffer+0x4e8>
     8d0:	mov	r0, #1
     8d4:	b	d18 <yy_get_next_buffer+0x4e8>
     8d8:	ldr	r3, [r4, #36]	; 0x24
     8dc:	ldr	ip, [r4, #80]	; 0x50
     8e0:	sub	ip, r3, ip
     8e4:	sub	r6, ip, #1
     8e8:	mov	r3, #0
     8ec:	cmp	r3, r6
     8f0:	bge	918 <yy_get_next_buffer+0xe8>
     8f4:	mov	r2, r7
     8f8:	add	r7, r2, #1
     8fc:	mov	r0, r5
     900:	add	r5, r0, #1
     904:	ldrb	r1, [r0]
     908:	and	r1, r1, #255	; 0xff
     90c:	strb	r1, [r2]
     910:	add	r3, r3, #1
     914:	b	8ec <yy_get_next_buffer+0xbc>
     918:	ldr	r2, [r4, #20]
     91c:	ldr	r0, [r4, #12]
     920:	ldr	r2, [r2, r0, lsl #2]
     924:	ldr	r2, [r2, #44]	; 0x2c
     928:	cmp	r2, #2
     92c:	beq	bc4 <yy_get_next_buffer+0x394>
     930:	ldr	r1, [r4, #20]
     934:	ldr	r2, [r4, #12]
     938:	ldr	r1, [r1, r2, lsl #2]
     93c:	ldr	r2, [r1, #12]
     940:	sub	r2, r2, r6
     944:	sub	r5, r2, #1
     948:	cmp	r5, #0
     94c:	bgt	a14 <yy_get_next_buffer+0x1e4>
     950:	ldr	r3, [r4, #20]
     954:	ldr	r2, [r4, #12]
     958:	ldr	r5, [r3, r2, lsl #2]
     95c:	ldr	r0, [r4, #36]	; 0x24
     960:	ldr	r3, [r5, #4]
     964:	sub	r7, r0, r3
     968:	ldr	r2, [r5, #20]
     96c:	cmp	r2, #0
     970:	beq	9cc <yy_get_next_buffer+0x19c>
     974:	ldr	r1, [r5, #12]
     978:	lsl	r1, r1, #1
     97c:	cmp	r1, #0
     980:	bgt	9a4 <yy_get_next_buffer+0x174>
     984:	ldr	r1, [r5, #12]
     988:	ldr	ip, [r5, #12]
     98c:	asr	lr, ip, #31
     990:	add	lr, ip, lr, lsr #29
     994:	asr	r0, lr, #3
     998:	add	r2, r1, r0
     99c:	str	r2, [r5, #12]
     9a0:	b	9b0 <yy_get_next_buffer+0x180>
     9a4:	ldr	r2, [r5, #12]
     9a8:	lsl	r3, r2, #1
     9ac:	str	r3, [r5, #12]
     9b0:	ldr	r0, [r5, #4]
     9b4:	ldr	r1, [r5, #12]
     9b8:	add	r1, r1, #2
     9bc:	mov	r2, r4
     9c0:	bl	1f14 <coda_expression_realloc>
     9c4:	str	r0, [r5, #4]
     9c8:	b	9d4 <yy_get_next_buffer+0x1a4>
     9cc:	mov	r0, #0
     9d0:	str	r0, [r5, #4]
     9d4:	ldr	ip, [r5, #4]
     9d8:	cmp	ip, #0
     9dc:	bne	9ec <yy_get_next_buffer+0x1bc>
     9e0:	ldr	r0, [pc, #856]	; d40 <yy_get_next_buffer+0x510>
     9e4:	mov	r1, r4
     9e8:	bl	18f4 <yy_fatal_error>
     9ec:	ldr	r2, [r5, #4]
     9f0:	add	ip, r2, r7
     9f4:	str	ip, [r4, #36]	; 0x24
     9f8:	ldr	r1, [r4, #20]
     9fc:	ldr	r3, [r4, #12]
     a00:	ldr	ip, [r1, r3, lsl #2]
     a04:	ldr	r3, [ip, #12]
     a08:	sub	r3, r3, r6
     a0c:	sub	r5, r3, #1
     a10:	b	948 <yy_get_next_buffer+0x118>
     a14:	cmp	r5, #8192	; 0x2000
     a18:	ble	a20 <yy_get_next_buffer+0x1f0>
     a1c:	mov	r5, #8192	; 0x2000
     a20:	ldr	r0, [r4, #20]
     a24:	ldr	ip, [r4, #12]
     a28:	ldr	ip, [r0, ip, lsl #2]
     a2c:	ldr	r2, [ip, #24]
     a30:	cmp	r2, #0
     a34:	bne	ad0 <yy_get_next_buffer+0x2a0>
     a38:	bl	0 <__errno_location>
     a3c:	mov	r3, #0
     a40:	str	r3, [r0]
     a44:	ldr	ip, [r4, #20]
     a48:	ldr	r3, [r4, #12]
     a4c:	ldr	r3, [ip, r3, lsl #2]
     a50:	ldr	r2, [r3, #4]
     a54:	add	r0, r2, r6
     a58:	mov	r1, #1
     a5c:	ldr	r3, [r4, #4]
     a60:	mov	r2, r5
     a64:	bl	0 <fread>
     a68:	str	r0, [r4, #28]
     a6c:	cmp	r0, #0
     a70:	bne	a8c <yy_get_next_buffer+0x25c>
     a74:	ldr	r0, [r4, #4]
     a78:	bl	0 <ferror>
     a7c:	cmp	r0, #0
     a80:	movne	r3, #1
     a84:	moveq	r3, #0
     a88:	b	a90 <yy_get_next_buffer+0x260>
     a8c:	mov	r3, #0
     a90:	cmp	r3, #0
     a94:	beq	bac <yy_get_next_buffer+0x37c>
     a98:	bl	0 <__errno_location>
     a9c:	ldr	ip, [r0]
     aa0:	cmp	ip, #4
     aa4:	beq	ab8 <yy_get_next_buffer+0x288>
     aa8:	ldr	r0, [pc, #644]	; d34 <yy_get_next_buffer+0x504>
     aac:	mov	r1, r4
     ab0:	bl	18f4 <yy_fatal_error>
     ab4:	b	bac <yy_get_next_buffer+0x37c>
     ab8:	bl	0 <__errno_location>
     abc:	mov	r3, #0
     ac0:	str	r3, [r0]
     ac4:	ldr	r0, [r4, #4]
     ac8:	bl	0 <clearerr>
     acc:	b	a44 <yy_get_next_buffer+0x214>
     ad0:	mov	r0, #42	; 0x2a
     ad4:	mov	r7, #0
     ad8:	cmp	r7, r5
     adc:	bge	af8 <yy_get_next_buffer+0x2c8>
     ae0:	ldr	r0, [r4, #4]
     ae4:	bl	0 <getc>
     ae8:	cmn	r0, #1
     aec:	movne	ip, #1
     af0:	moveq	ip, #0
     af4:	b	afc <yy_get_next_buffer+0x2cc>
     af8:	mov	ip, #0
     afc:	cmp	ip, #0
     b00:	bne	b0c <yy_get_next_buffer+0x2dc>
     b04:	mov	r1, #0
     b08:	b	b18 <yy_get_next_buffer+0x2e8>
     b0c:	cmp	r0, #10
     b10:	movne	r1, #1
     b14:	moveq	r1, #0
     b18:	cmp	r1, #0
     b1c:	beq	b44 <yy_get_next_buffer+0x314>
     b20:	ldr	r2, [r4, #20]
     b24:	ldr	r1, [r4, #12]
     b28:	ldr	r3, [r2, r1, lsl #2]
     b2c:	ldr	r1, [r3, #4]
     b30:	add	ip, r1, r6
     b34:	and	r2, r0, #255	; 0xff
     b38:	strb	r2, [ip, r7]
     b3c:	add	r7, r7, #1
     b40:	b	ad8 <yy_get_next_buffer+0x2a8>
     b44:	cmp	r0, #10
     b48:	bne	b70 <yy_get_next_buffer+0x340>
     b4c:	mov	r1, r7
     b50:	add	r7, r1, #1
     b54:	ldr	ip, [r4, #20]
     b58:	ldr	r2, [r4, #12]
     b5c:	ldr	r2, [ip, r2, lsl #2]
     b60:	ldr	r3, [r2, #4]
     b64:	add	r2, r3, r6
     b68:	and	r3, r0, #255	; 0xff
     b6c:	strb	r3, [r2, r1]
     b70:	cmn	r0, #1
     b74:	bne	b90 <yy_get_next_buffer+0x360>
     b78:	ldr	r0, [r4, #4]
     b7c:	bl	0 <ferror>
     b80:	cmp	r0, #0
     b84:	movne	ip, #1
     b88:	moveq	ip, #0
     b8c:	b	b94 <yy_get_next_buffer+0x364>
     b90:	mov	ip, #0
     b94:	cmp	ip, #0
     b98:	beq	ba8 <yy_get_next_buffer+0x378>
     b9c:	ldr	r0, [pc, #400]	; d34 <yy_get_next_buffer+0x504>
     ba0:	mov	r1, r4
     ba4:	bl	18f4 <yy_fatal_error>
     ba8:	str	r7, [r4, #28]
     bac:	ldr	r2, [r4, #20]
     bb0:	ldr	r1, [r4, #12]
     bb4:	ldr	r0, [r2, r1, lsl #2]
     bb8:	ldr	r1, [r4, #28]
     bbc:	str	r1, [r0, #16]
     bc0:	b	bdc <yy_get_next_buffer+0x3ac>
     bc4:	mov	r2, #0
     bc8:	str	r2, [r4, #28]
     bcc:	ldr	r1, [r4, #20]
     bd0:	ldr	r3, [r4, #12]
     bd4:	ldr	r3, [r1, r3, lsl #2]
     bd8:	str	r2, [r3, #16]
     bdc:	ldr	r0, [r4, #28]
     be0:	cmp	r0, #0
     be4:	bne	c20 <yy_get_next_buffer+0x3f0>
     be8:	cmp	r6, #0
     bec:	bne	c04 <yy_get_next_buffer+0x3d4>
     bf0:	mov	r5, #1
     bf4:	ldr	r0, [r4, #4]
     bf8:	mov	r1, r4
     bfc:	bl	f3c <coda_expression_restart>
     c00:	b	c24 <yy_get_next_buffer+0x3f4>
     c04:	mov	r5, #2
     c08:	ldr	ip, [r4, #20]
     c0c:	ldr	r2, [r4, #12]
     c10:	ldr	r3, [ip, r2, lsl #2]
     c14:	mov	r1, #2
     c18:	str	r1, [r3, #44]	; 0x2c
     c1c:	b	c24 <yy_get_next_buffer+0x3f4>
     c20:	mov	r5, #0
     c24:	ldr	ip, [r4, #28]
     c28:	add	ip, ip, r6
     c2c:	ldr	r3, [r4, #20]
     c30:	ldr	r1, [r4, #12]
     c34:	ldr	r3, [r3, r1, lsl #2]
     c38:	ldr	r0, [r3, #12]
     c3c:	cmp	ip, r0
     c40:	ble	cb8 <yy_get_next_buffer+0x488>
     c44:	ldr	ip, [r4, #28]
     c48:	add	r3, ip, r6
     c4c:	ldr	r0, [r4, #28]
     c50:	add	r7, r3, r0, asr #1
     c54:	ldr	r2, [r4, #20]
     c58:	ldr	r0, [r4, #12]
     c5c:	ldr	ip, [r2, r0, lsl #2]
     c60:	ldr	r0, [ip, #4]
     c64:	mov	r2, r4
     c68:	mov	r1, r7
     c6c:	bl	1f14 <coda_expression_realloc>
     c70:	ldr	r1, [r4, #20]
     c74:	ldr	r2, [r4, #12]
     c78:	ldr	r1, [r1, r2, lsl #2]
     c7c:	str	r0, [r1, #4]
     c80:	ldr	r1, [r4, #20]
     c84:	ldr	r3, [r4, #12]
     c88:	ldr	r1, [r1, r3, lsl #2]
     c8c:	ldr	r2, [r1, #4]
     c90:	cmp	r2, #0
     c94:	bne	ca4 <yy_get_next_buffer+0x474>
     c98:	ldr	r0, [pc, #156]	; d3c <yy_get_next_buffer+0x50c>
     c9c:	mov	r1, r4
     ca0:	bl	18f4 <yy_fatal_error>
     ca4:	ldr	r3, [r4, #20]
     ca8:	ldr	ip, [r4, #12]
     cac:	ldr	r0, [r3, ip, lsl #2]
     cb0:	sub	ip, r7, #2
     cb4:	str	ip, [r0, #12]
     cb8:	ldr	r0, [r4, #28]
     cbc:	add	r0, r0, r6
     cc0:	str	r0, [r4, #28]
     cc4:	ldr	r0, [r4, #20]
     cc8:	ldr	r1, [r4, #12]
     ccc:	ldr	r0, [r0, r1, lsl #2]
     cd0:	ldr	ip, [r0, #4]
     cd4:	ldr	r2, [r4, #28]
     cd8:	mov	r3, #0
     cdc:	strb	r3, [ip, r2]
     ce0:	ldr	r0, [r4, #20]
     ce4:	ldr	ip, [r4, #12]
     ce8:	ldr	ip, [r0, ip, lsl #2]
     cec:	ldr	ip, [ip, #4]
     cf0:	ldr	r3, [r4, #28]
     cf4:	add	r2, ip, r3
     cf8:	mov	r3, #0
     cfc:	strb	r3, [r2, #1]
     d00:	ldr	r1, [r4, #20]
     d04:	ldr	r0, [r4, #12]
     d08:	ldr	r1, [r1, r0, lsl #2]
     d0c:	ldr	r3, [r1, #4]
     d10:	str	r3, [r4, #80]	; 0x50
     d14:	mov	r0, r5
     d18:	ldr	r4, [sp, #8]
     d1c:	ldr	r5, [sp, #12]
     d20:	ldr	r6, [sp, #16]
     d24:	ldr	r7, [sp, #20]
     d28:	ldr	lr, [sp, #4]
     d2c:	add	sp, sp, #24
     d30:	bx	lr
     d34:	.word	0x00000092
     d38:	.word	0x00000169
     d3c:	.word	0x00000046
     d40:	.word	0x000001ca

00000d44 <yy_get_previous_state>:
     d44:	mov	ip, sp
     d48:	sub	sp, sp, #16
     d4c:	str	ip, [sp]
     d50:	str	lr, [sp, #4]
     d54:	str	r4, [sp, #8]
     d58:	str	r5, [sp, #12]
     d5c:	mov	r1, r0
     d60:	ldr	r0, [r1, #44]	; 0x2c
     d64:	ldr	r4, [r1, #80]	; 0x50
     d68:	ldr	r2, [r1, #36]	; 0x24
     d6c:	cmp	r4, r2
     d70:	bcs	e28 <yy_get_previous_state+0xe4>
     d74:	ldrb	r2, [r4]
     d78:	cmp	r2, #0
     d7c:	beq	d94 <yy_get_previous_state+0x50>
     d80:	ldr	ip, [pc, #192]	; e48 <yy_get_previous_state+0x104>
     d84:	ldrb	r2, [r4]
     d88:	and	r2, r2, #255	; 0xff
     d8c:	ldrb	ip, [ip, r2]
     d90:	b	d98 <yy_get_previous_state+0x54>
     d94:	mov	ip, #1
     d98:	and	r5, ip, #255	; 0xff
     d9c:	ldr	r2, [pc, #160]	; e44 <yy_get_previous_state+0x100>
     da0:	add	r2, r2, r0, lsl #1
     da4:	ldrsh	ip, [r2]
     da8:	cmp	ip, #0
     dac:	beq	db8 <yy_get_previous_state+0x74>
     db0:	str	r0, [r1, #64]	; 0x40
     db4:	str	r4, [r1, #68]	; 0x44
     db8:	ldr	r3, [pc, #128]	; e40 <yy_get_previous_state+0xfc>
     dbc:	ldr	r2, [pc, #120]	; e3c <yy_get_previous_state+0xf8>
     dc0:	add	ip, r2, r0, lsl #1
     dc4:	ldrsh	r2, [ip]
     dc8:	add	r2, r2, r5
     dcc:	add	r3, r3, r2, lsl #1
     dd0:	ldrsh	r2, [r3]
     dd4:	cmp	r2, r0
     dd8:	beq	e04 <yy_get_previous_state+0xc0>
     ddc:	ldr	r3, [pc, #108]	; e50 <yy_get_previous_state+0x10c>
     de0:	add	r2, r3, r0, lsl #1
     de4:	ldrsh	r0, [r2]
     de8:	movw	lr, #274	; 0x112
     dec:	cmp	r0, lr
     df0:	blt	db8 <yy_get_previous_state+0x74>
     df4:	ldr	r2, [pc, #80]	; e4c <yy_get_previous_state+0x108>
     df8:	ldrb	r3, [r2, r5]
     dfc:	and	r5, r3, #255	; 0xff
     e00:	b	db8 <yy_get_previous_state+0x74>
     e04:	ldr	r2, [pc, #72]	; e54 <yy_get_previous_state+0x110>
     e08:	ldr	r3, [pc, #44]	; e3c <yy_get_previous_state+0xf8>
     e0c:	add	ip, r3, r0, lsl #1
     e10:	ldrsh	r3, [ip]
     e14:	add	r3, r3, r5
     e18:	add	r3, r2, r3, lsl #1
     e1c:	ldrsh	r0, [r3]
     e20:	add	r4, r4, #1
     e24:	b	d68 <yy_get_previous_state+0x24>
     e28:	ldr	r4, [sp, #8]
     e2c:	ldr	r5, [sp, #12]
     e30:	ldr	lr, [sp, #4]
     e34:	add	sp, sp, #16
     e38:	bx	lr
     e3c:	.word	0x0000054a
     e40:	.word	0x00000c56
     e44:	.word	0x000001fa
     e48:	.word	0x0000041e
     e4c:	.word	0x0000051e
     e50:	.word	0x00000772
     e54:	.word	0x0000099a

00000e58 <yy_try_NUL_trans>:
     e58:	mov	ip, sp
     e5c:	sub	sp, sp, #16
     e60:	str	ip, [sp]
     e64:	str	lr, [sp, #4]
     e68:	str	r4, [sp, #8]
     e6c:	ldr	r3, [r1, #36]	; 0x24
     e70:	mov	r4, #1
     e74:	ldr	r2, [pc, #176]	; f2c <yy_try_NUL_trans+0xd4>
     e78:	add	r2, r2, r0, lsl #1
     e7c:	ldrsh	r2, [r2]
     e80:	cmp	r2, #0
     e84:	beq	e90 <yy_try_NUL_trans+0x38>
     e88:	str	r0, [r1, #64]	; 0x40
     e8c:	str	r3, [r1, #68]	; 0x44
     e90:	ldr	r2, [pc, #144]	; f28 <yy_try_NUL_trans+0xd0>
     e94:	ldr	ip, [pc, #136]	; f24 <yy_try_NUL_trans+0xcc>
     e98:	add	ip, ip, r0, lsl #1
     e9c:	ldrsh	r1, [ip]
     ea0:	add	r1, r1, r4
     ea4:	add	r3, r2, r1, lsl #1
     ea8:	ldrsh	r3, [r3]
     eac:	cmp	r3, r0
     eb0:	beq	edc <yy_try_NUL_trans+0x84>
     eb4:	ldr	r1, [pc, #120]	; f34 <yy_try_NUL_trans+0xdc>
     eb8:	add	r2, r1, r0, lsl #1
     ebc:	ldrsh	r0, [r2]
     ec0:	movw	lr, #274	; 0x112
     ec4:	cmp	r0, lr
     ec8:	blt	e90 <yy_try_NUL_trans+0x38>
     ecc:	ldr	r1, [pc, #92]	; f30 <yy_try_NUL_trans+0xd8>
     ed0:	ldrb	r3, [r1, r4]
     ed4:	and	r4, r3, #255	; 0xff
     ed8:	b	e90 <yy_try_NUL_trans+0x38>
     edc:	ldr	r3, [pc, #84]	; f38 <yy_try_NUL_trans+0xe0>
     ee0:	ldr	r1, [pc, #60]	; f24 <yy_try_NUL_trans+0xcc>
     ee4:	add	ip, r1, r0, lsl #1
     ee8:	ldrsh	r2, [ip]
     eec:	add	r0, r2, r4
     ef0:	add	r0, r3, r0, lsl #1
     ef4:	ldrsh	r0, [r0]
     ef8:	movw	lr, #273	; 0x111
     efc:	cmp	r0, lr
     f00:	moveq	r1, #1
     f04:	movne	r1, #0
     f08:	cmp	r1, #0
     f0c:	beq	f14 <yy_try_NUL_trans+0xbc>
     f10:	mov	r0, #0
     f14:	ldr	r4, [sp, #8]
     f18:	ldr	lr, [sp, #4]
     f1c:	add	sp, sp, #16
     f20:	bx	lr
     f24:	.word	0x0000054a
     f28:	.word	0x00000c56
     f2c:	.word	0x000001fa
     f30:	.word	0x0000051e
     f34:	.word	0x00000772
     f38:	.word	0x0000099a

00000f3c <coda_expression_restart>:
     f3c:	mov	ip, sp
     f40:	sub	sp, sp, #16
     f44:	str	ip, [sp]
     f48:	str	lr, [sp, #4]
     f4c:	str	r4, [sp, #8]
     f50:	str	r5, [sp, #12]
     f54:	mov	r4, r1
     f58:	mov	r5, r0
     f5c:	ldr	r1, [r4, #20]
     f60:	cmp	r1, #0
     f64:	beq	f78 <coda_expression_restart+0x3c>
     f68:	ldr	r2, [r4, #20]
     f6c:	ldr	ip, [r4, #12]
     f70:	ldr	r0, [r2, ip, lsl #2]
     f74:	b	f7c <coda_expression_restart+0x40>
     f78:	mov	r0, #0
     f7c:	cmp	r0, #0
     f80:	bne	fa8 <coda_expression_restart+0x6c>
     f84:	mov	r0, r4
     f88:	bl	1598 <coda_expression_ensure_buffer_stack>
     f8c:	ldr	r0, [r4, #4]
     f90:	mov	r1, #16384	; 0x4000
     f94:	mov	r2, r4
     f98:	bl	113c <coda_expression__create_buffer>
     f9c:	ldr	r2, [r4, #20]
     fa0:	ldr	r1, [r4, #12]
     fa4:	str	r0, [r2, r1, lsl #2]
     fa8:	ldr	r3, [r4, #20]
     fac:	cmp	r3, #0
     fb0:	beq	fc4 <coda_expression_restart+0x88>
     fb4:	ldr	ip, [r4, #20]
     fb8:	ldr	r1, [r4, #12]
     fbc:	ldr	r0, [ip, r1, lsl #2]
     fc0:	b	fc8 <coda_expression_restart+0x8c>
     fc4:	mov	r0, #0
     fc8:	mov	r2, r4
     fcc:	mov	r1, r5
     fd0:	bl	1290 <coda_expression__init_buffer>
     fd4:	mov	r0, r4
     fd8:	bl	10d0 <coda_expression__load_buffer_state>
     fdc:	ldr	r4, [sp, #8]
     fe0:	ldr	r5, [sp, #12]
     fe4:	ldr	lr, [sp, #4]
     fe8:	add	sp, sp, #16
     fec:	bx	lr

00000ff0 <coda_expression__switch_to_buffer>:
     ff0:	mov	ip, sp
     ff4:	sub	sp, sp, #16
     ff8:	str	ip, [sp]
     ffc:	str	lr, [sp, #4]
    1000:	str	r4, [sp, #8]
    1004:	str	r5, [sp, #12]
    1008:	mov	r4, r1
    100c:	mov	r5, r0
    1010:	mov	r0, r4
    1014:	bl	1598 <coda_expression_ensure_buffer_stack>
    1018:	ldr	r1, [r4, #20]
    101c:	cmp	r1, #0
    1020:	beq	1034 <coda_expression__switch_to_buffer+0x44>
    1024:	ldr	r0, [r4, #20]
    1028:	ldr	r3, [r4, #12]
    102c:	ldr	r3, [r0, r3, lsl #2]
    1030:	b	1038 <coda_expression__switch_to_buffer+0x48>
    1034:	mov	r3, #0
    1038:	cmp	r3, r5
    103c:	beq	10bc <coda_expression__switch_to_buffer+0xcc>
    1040:	ldr	ip, [r4, #20]
    1044:	cmp	ip, #0
    1048:	beq	105c <coda_expression__switch_to_buffer+0x6c>
    104c:	ldr	r2, [r4, #20]
    1050:	ldr	r0, [r4, #12]
    1054:	ldr	ip, [r2, r0, lsl #2]
    1058:	b	1060 <coda_expression__switch_to_buffer+0x70>
    105c:	mov	ip, #0
    1060:	cmp	ip, #0
    1064:	beq	10a0 <coda_expression__switch_to_buffer+0xb0>
    1068:	ldr	r2, [r4, #36]	; 0x24
    106c:	ldrb	r1, [r4, #24]
    1070:	and	r0, r1, #255	; 0xff
    1074:	strb	r0, [r2]
    1078:	ldr	ip, [r4, #20]
    107c:	ldr	r1, [r4, #12]
    1080:	ldr	r2, [ip, r1, lsl #2]
    1084:	ldr	ip, [r4, #36]	; 0x24
    1088:	str	ip, [r2, #8]
    108c:	ldr	r0, [r4, #20]
    1090:	ldr	r1, [r4, #12]
    1094:	ldr	r2, [r0, r1, lsl #2]
    1098:	ldr	r3, [r4, #28]
    109c:	str	r3, [r2, #16]
    10a0:	ldr	r2, [r4, #20]
    10a4:	ldr	r3, [r4, #12]
    10a8:	str	r5, [r2, r3, lsl #2]
    10ac:	mov	r0, r4
    10b0:	bl	10d0 <coda_expression__load_buffer_state>
    10b4:	mov	r2, #1
    10b8:	str	r2, [r4, #48]	; 0x30
    10bc:	ldr	r4, [sp, #8]
    10c0:	ldr	r5, [sp, #12]
    10c4:	ldr	lr, [sp, #4]
    10c8:	add	sp, sp, #16
    10cc:	bx	lr

000010d0 <coda_expression__load_buffer_state>:
    10d0:	mov	ip, sp
    10d4:	sub	sp, sp, #8
    10d8:	str	ip, [sp]
    10dc:	str	lr, [sp, #4]
    10e0:	ldr	r3, [r0, #20]
    10e4:	ldr	r1, [r0, #12]
    10e8:	ldr	ip, [r3, r1, lsl #2]
    10ec:	ldr	r1, [ip, #16]
    10f0:	str	r1, [r0, #28]
    10f4:	ldr	r2, [r0, #20]
    10f8:	ldr	r1, [r0, #12]
    10fc:	ldr	r2, [r2, r1, lsl #2]
    1100:	ldr	r1, [r2, #8]
    1104:	str	r1, [r0, #36]	; 0x24
    1108:	str	r1, [r0, #80]	; 0x50
    110c:	ldr	r1, [r0, #20]
    1110:	ldr	ip, [r0, #12]
    1114:	ldr	r1, [r1, ip, lsl #2]
    1118:	ldr	r3, [r1]
    111c:	str	r3, [r0, #4]
    1120:	ldr	r3, [r0, #36]	; 0x24
    1124:	ldrb	r2, [r3]
    1128:	and	r1, r2, #255	; 0xff
    112c:	strb	r1, [r0, #24]
    1130:	ldr	lr, [sp, #4]
    1134:	add	sp, sp, #8
    1138:	bx	lr

0000113c <coda_expression__create_buffer>:
    113c:	mov	ip, sp
    1140:	sub	sp, sp, #24
    1144:	str	ip, [sp]
    1148:	str	lr, [sp, #4]
    114c:	str	r4, [sp, #8]
    1150:	str	r5, [sp, #12]
    1154:	str	r6, [sp, #16]
    1158:	str	r7, [sp, #20]
    115c:	mov	r5, r2
    1160:	mov	r6, r1
    1164:	mov	r7, r0
    1168:	mov	r0, #48	; 0x30
    116c:	mov	r1, r5
    1170:	bl	1ef4 <coda_expression_alloc>
    1174:	mov	r4, r0
    1178:	cmp	r4, #0
    117c:	bne	118c <coda_expression__create_buffer+0x50>
    1180:	ldr	r0, [pc, #108]	; 11f4 <coda_expression__create_buffer+0xb8>
    1184:	mov	r1, r5
    1188:	bl	18f4 <yy_fatal_error>
    118c:	str	r6, [r4, #12]
    1190:	ldr	r0, [r4, #12]
    1194:	add	r0, r0, #2
    1198:	mov	r1, r5
    119c:	bl	1ef4 <coda_expression_alloc>
    11a0:	str	r0, [r4, #4]
    11a4:	ldr	r1, [r4, #4]
    11a8:	cmp	r1, #0
    11ac:	bne	11bc <coda_expression__create_buffer+0x80>
    11b0:	ldr	r0, [pc, #60]	; 11f4 <coda_expression__create_buffer+0xb8>
    11b4:	mov	r1, r5
    11b8:	bl	18f4 <yy_fatal_error>
    11bc:	mov	r3, #1
    11c0:	str	r3, [r4, #20]
    11c4:	mov	r2, r5
    11c8:	mov	r1, r7
    11cc:	mov	r0, r4
    11d0:	bl	1290 <coda_expression__init_buffer>
    11d4:	mov	r0, r4
    11d8:	ldr	r4, [sp, #8]
    11dc:	ldr	r5, [sp, #12]
    11e0:	ldr	r6, [sp, #16]
    11e4:	ldr	r7, [sp, #20]
    11e8:	ldr	lr, [sp, #4]
    11ec:	add	sp, sp, #24
    11f0:	bx	lr
    11f4:	.word	0x000000af

000011f8 <coda_expression__delete_buffer>:
    11f8:	mov	ip, sp
    11fc:	sub	sp, sp, #16
    1200:	str	ip, [sp]
    1204:	str	lr, [sp, #4]
    1208:	str	r4, [sp, #8]
    120c:	str	r5, [sp, #12]
    1210:	mov	r4, r1
    1214:	mov	r5, r0
    1218:	cmp	r5, #0
    121c:	beq	127c <coda_expression__delete_buffer+0x84>
    1220:	ldr	r2, [r4, #20]
    1224:	cmp	r2, #0
    1228:	beq	123c <coda_expression__delete_buffer+0x44>
    122c:	ldr	r0, [r4, #20]
    1230:	ldr	ip, [r4, #12]
    1234:	ldr	r1, [r0, ip, lsl #2]
    1238:	b	1240 <coda_expression__delete_buffer+0x48>
    123c:	mov	r1, #0
    1240:	cmp	r5, r1
    1244:	bne	1258 <coda_expression__delete_buffer+0x60>
    1248:	ldr	ip, [r4, #20]
    124c:	ldr	r3, [r4, #12]
    1250:	mov	r0, #0
    1254:	str	r0, [ip, r3, lsl #2]
    1258:	ldr	r0, [r5, #20]
    125c:	cmp	r0, #0
    1260:	beq	1270 <coda_expression__delete_buffer+0x78>
    1264:	ldr	r0, [r5, #4]
    1268:	mov	r1, r4
    126c:	bl	1f34 <coda_expression_free>
    1270:	mov	r1, r4
    1274:	mov	r0, r5
    1278:	bl	1f34 <coda_expression_free>
    127c:	ldr	r4, [sp, #8]
    1280:	ldr	r5, [sp, #12]
    1284:	ldr	lr, [sp, #4]
    1288:	add	sp, sp, #16
    128c:	bx	lr

00001290 <coda_expression__init_buffer>:
    1290:	mov	ip, sp
    1294:	sub	sp, sp, #24
    1298:	str	ip, [sp]
    129c:	str	lr, [sp, #4]
    12a0:	str	r4, [sp, #8]
    12a4:	str	r5, [sp, #12]
    12a8:	str	r6, [sp, #16]
    12ac:	str	r7, [sp, #20]
    12b0:	mov	r4, r2
    12b4:	mov	r5, r1
    12b8:	mov	r6, r0
    12bc:	bl	0 <__errno_location>
    12c0:	ldr	r7, [r0]
    12c4:	mov	r1, r4
    12c8:	mov	r0, r6
    12cc:	bl	1340 <coda_expression__flush_buffer>
    12d0:	str	r5, [r6]
    12d4:	mov	r2, #1
    12d8:	str	r2, [r6, #40]	; 0x28
    12dc:	ldr	r3, [r4, #20]
    12e0:	cmp	r3, #0
    12e4:	beq	12f8 <coda_expression__init_buffer+0x68>
    12e8:	ldr	r0, [r4, #20]
    12ec:	ldr	r3, [r4, #12]
    12f0:	ldr	r2, [r0, r3, lsl #2]
    12f4:	b	12fc <coda_expression__init_buffer+0x6c>
    12f8:	mov	r2, #0
    12fc:	cmp	r6, r2
    1300:	beq	1314 <coda_expression__init_buffer+0x84>
    1304:	mov	ip, #1
    1308:	str	ip, [r6, #32]
    130c:	mov	r0, #0
    1310:	str	r0, [r6, #36]	; 0x24
    1314:	mov	ip, #1
    1318:	str	ip, [r6, #24]
    131c:	bl	0 <__errno_location>
    1320:	str	r7, [r0]
    1324:	ldr	r4, [sp, #8]
    1328:	ldr	r5, [sp, #12]
    132c:	ldr	r6, [sp, #16]
    1330:	ldr	r7, [sp, #20]
    1334:	ldr	lr, [sp, #4]
    1338:	add	sp, sp, #24
    133c:	bx	lr

00001340 <coda_expression__flush_buffer>:
    1340:	mov	ip, sp
    1344:	sub	sp, sp, #8
    1348:	str	ip, [sp]
    134c:	str	lr, [sp, #4]
    1350:	cmp	r0, #0
    1354:	beq	13c0 <coda_expression__flush_buffer+0x80>
    1358:	mov	r2, #0
    135c:	str	r2, [r0, #16]
    1360:	ldr	r2, [r0, #4]
    1364:	mov	r3, #0
    1368:	strb	r3, [r2]
    136c:	ldr	r3, [r0, #4]
    1370:	mov	r2, #0
    1374:	strb	r2, [r3, #1]
    1378:	ldr	r2, [r0, #4]
    137c:	str	r2, [r0, #8]
    1380:	mov	r2, #1
    1384:	str	r2, [r0, #28]
    1388:	mov	r2, #0
    138c:	str	r2, [r0, #44]	; 0x2c
    1390:	ldr	ip, [r1, #20]
    1394:	cmp	ip, #0
    1398:	beq	13ac <coda_expression__flush_buffer+0x6c>
    139c:	ldr	ip, [r1, #20]
    13a0:	ldr	r2, [r1, #12]
    13a4:	ldr	r2, [ip, r2, lsl #2]
    13a8:	b	13b0 <coda_expression__flush_buffer+0x70>
    13ac:	mov	r2, #0
    13b0:	cmp	r0, r2
    13b4:	bne	13c0 <coda_expression__flush_buffer+0x80>
    13b8:	mov	r0, r1
    13bc:	bl	10d0 <coda_expression__load_buffer_state>
    13c0:	ldr	lr, [sp, #4]
    13c4:	add	sp, sp, #8
    13c8:	bx	lr

000013cc <coda_expression_push_buffer_state>:
    13cc:	mov	ip, sp
    13d0:	sub	sp, sp, #16
    13d4:	str	ip, [sp]
    13d8:	str	lr, [sp, #4]
    13dc:	str	r4, [sp, #8]
    13e0:	str	r5, [sp, #12]
    13e4:	mov	r4, r1
    13e8:	mov	r5, r0
    13ec:	cmp	r5, #0
    13f0:	beq	14ac <coda_expression_push_buffer_state+0xe0>
    13f4:	mov	r0, r4
    13f8:	bl	1598 <coda_expression_ensure_buffer_stack>
    13fc:	ldr	r1, [r4, #20]
    1400:	cmp	r1, #0
    1404:	beq	1418 <coda_expression_push_buffer_state+0x4c>
    1408:	ldr	r2, [r4, #20]
    140c:	ldr	r1, [r4, #12]
    1410:	ldr	r0, [r2, r1, lsl #2]
    1414:	b	141c <coda_expression_push_buffer_state+0x50>
    1418:	mov	r0, #0
    141c:	cmp	r0, #0
    1420:	beq	145c <coda_expression_push_buffer_state+0x90>
    1424:	ldr	ip, [r4, #36]	; 0x24
    1428:	ldrb	r3, [r4, #24]
    142c:	and	r2, r3, #255	; 0xff
    1430:	strb	r2, [ip]
    1434:	ldr	r1, [r4, #20]
    1438:	ldr	r2, [r4, #12]
    143c:	ldr	r0, [r1, r2, lsl #2]
    1440:	ldr	r2, [r4, #36]	; 0x24
    1444:	str	r2, [r0, #8]
    1448:	ldr	ip, [r4, #20]
    144c:	ldr	r0, [r4, #12]
    1450:	ldr	ip, [ip, r0, lsl #2]
    1454:	ldr	r1, [r4, #28]
    1458:	str	r1, [ip, #16]
    145c:	ldr	r2, [r4, #20]
    1460:	cmp	r2, #0
    1464:	beq	1478 <coda_expression_push_buffer_state+0xac>
    1468:	ldr	r3, [r4, #20]
    146c:	ldr	r0, [r4, #12]
    1470:	ldr	ip, [r3, r0, lsl #2]
    1474:	b	147c <coda_expression_push_buffer_state+0xb0>
    1478:	mov	ip, #0
    147c:	cmp	ip, #0
    1480:	beq	1490 <coda_expression_push_buffer_state+0xc4>
    1484:	ldr	r3, [r4, #12]
    1488:	add	r3, r3, #1
    148c:	str	r3, [r4, #12]
    1490:	ldr	r2, [r4, #20]
    1494:	ldr	ip, [r4, #12]
    1498:	str	r5, [r2, ip, lsl #2]
    149c:	mov	r0, r4
    14a0:	bl	10d0 <coda_expression__load_buffer_state>
    14a4:	mov	r0, #1
    14a8:	str	r0, [r4, #48]	; 0x30
    14ac:	ldr	r4, [sp, #8]
    14b0:	ldr	r5, [sp, #12]
    14b4:	ldr	lr, [sp, #4]
    14b8:	add	sp, sp, #16
    14bc:	bx	lr

000014c0 <coda_expression_pop_buffer_state>:
    14c0:	mov	ip, sp
    14c4:	sub	sp, sp, #16
    14c8:	str	ip, [sp]
    14cc:	str	lr, [sp, #4]
    14d0:	str	r4, [sp, #8]
    14d4:	mov	r4, r0
    14d8:	ldr	r1, [r4, #20]
    14dc:	cmp	r1, #0
    14e0:	beq	14f4 <coda_expression_pop_buffer_state+0x34>
    14e4:	ldr	r3, [r4, #20]
    14e8:	ldr	ip, [r4, #12]
    14ec:	ldr	r3, [r3, ip, lsl #2]
    14f0:	b	14f8 <coda_expression_pop_buffer_state+0x38>
    14f4:	mov	r3, #0
    14f8:	cmp	r3, #0
    14fc:	beq	1588 <coda_expression_pop_buffer_state+0xc8>
    1500:	ldr	r0, [r4, #20]
    1504:	cmp	r0, #0
    1508:	beq	151c <coda_expression_pop_buffer_state+0x5c>
    150c:	ldr	ip, [r4, #20]
    1510:	ldr	r2, [r4, #12]
    1514:	ldr	r0, [ip, r2, lsl #2]
    1518:	b	1520 <coda_expression_pop_buffer_state+0x60>
    151c:	mov	r0, #0
    1520:	mov	r1, r4
    1524:	bl	11f8 <coda_expression__delete_buffer>
    1528:	ldr	ip, [r4, #20]
    152c:	ldr	r1, [r4, #12]
    1530:	mov	r3, #0
    1534:	str	r3, [ip, r1, lsl #2]
    1538:	ldr	r1, [r4, #12]
    153c:	cmp	r1, #0
    1540:	bls	1550 <coda_expression_pop_buffer_state+0x90>
    1544:	ldr	r2, [r4, #12]
    1548:	sub	r3, r2, #1
    154c:	str	r3, [r4, #12]
    1550:	ldr	r0, [r4, #20]
    1554:	cmp	r0, #0
    1558:	beq	156c <coda_expression_pop_buffer_state+0xac>
    155c:	ldr	r2, [r4, #20]
    1560:	ldr	r1, [r4, #12]
    1564:	ldr	r0, [r2, r1, lsl #2]
    1568:	b	1570 <coda_expression_pop_buffer_state+0xb0>
    156c:	mov	r0, #0
    1570:	cmp	r0, #0
    1574:	beq	1588 <coda_expression_pop_buffer_state+0xc8>
    1578:	mov	r0, r4
    157c:	bl	10d0 <coda_expression__load_buffer_state>
    1580:	mov	r2, #1
    1584:	str	r2, [r4, #48]	; 0x30
    1588:	ldr	r4, [sp, #8]
    158c:	ldr	lr, [sp, #4]
    1590:	add	sp, sp, #16
    1594:	bx	lr

00001598 <coda_expression_ensure_buffer_stack>:
    1598:	mov	ip, sp
    159c:	sub	sp, sp, #24
    15a0:	str	ip, [sp]
    15a4:	str	lr, [sp, #4]
    15a8:	str	r4, [sp, #8]
    15ac:	str	r5, [sp, #12]
    15b0:	str	r6, [sp, #16]
    15b4:	mov	r4, r0
    15b8:	ldr	r0, [r4, #20]
    15bc:	cmp	r0, #0
    15c0:	bne	1610 <coda_expression_ensure_buffer_stack+0x78>
    15c4:	mov	r5, #1
    15c8:	lsl	r0, r5, #2
    15cc:	mov	r1, r4
    15d0:	bl	1ef4 <coda_expression_alloc>
    15d4:	str	r0, [r4, #20]
    15d8:	ldr	r0, [r4, #20]
    15dc:	cmp	r0, #0
    15e0:	bne	15f0 <coda_expression_ensure_buffer_stack+0x58>
    15e4:	ldr	r0, [pc, #164]	; 1690 <coda_expression_ensure_buffer_stack+0xf8>
    15e8:	mov	r1, r4
    15ec:	bl	18f4 <yy_fatal_error>
    15f0:	ldr	r0, [r4, #20]
    15f4:	mov	r1, #0
    15f8:	lsl	r2, r5, #2
    15fc:	bl	0 <memset>
    1600:	str	r5, [r4, #16]
    1604:	mov	r2, #0
    1608:	str	r2, [r4, #12]
    160c:	b	1678 <coda_expression_ensure_buffer_stack+0xe0>
    1610:	ldr	r2, [r4, #12]
    1614:	ldr	r3, [r4, #16]
    1618:	sub	r1, r3, #1
    161c:	cmp	r2, r1
    1620:	bcc	1678 <coda_expression_ensure_buffer_stack+0xe0>
    1624:	mov	r6, #8
    1628:	ldr	r1, [r4, #16]
    162c:	add	r5, r1, r6
    1630:	ldr	r0, [r4, #20]
    1634:	lsl	r1, r5, #2
    1638:	mov	r2, r4
    163c:	bl	1f14 <coda_expression_realloc>
    1640:	str	r0, [r4, #20]
    1644:	ldr	r1, [r4, #20]
    1648:	cmp	r1, #0
    164c:	bne	165c <coda_expression_ensure_buffer_stack+0xc4>
    1650:	ldr	r0, [pc, #56]	; 1690 <coda_expression_ensure_buffer_stack+0xf8>
    1654:	mov	r1, r4
    1658:	bl	18f4 <yy_fatal_error>
    165c:	ldr	r1, [r4, #20]
    1660:	ldr	r0, [r4, #16]
    1664:	add	r0, r1, r0, lsl #2
    1668:	mov	r1, #0
    166c:	lsl	r2, r6, #2
    1670:	bl	0 <memset>
    1674:	str	r5, [r4, #16]
    1678:	ldr	r4, [sp, #8]
    167c:	ldr	r5, [sp, #12]
    1680:	ldr	r6, [sp, #16]
    1684:	ldr	lr, [sp, #4]
    1688:	add	sp, sp, #24
    168c:	bx	lr
    1690:	.word	0x000000db

00001694 <coda_expression__scan_buffer>:
    1694:	mov	ip, sp
    1698:	sub	sp, sp, #24
    169c:	str	ip, [sp]
    16a0:	str	lr, [sp, #4]
    16a4:	str	r4, [sp, #8]
    16a8:	str	r5, [sp, #12]
    16ac:	str	r6, [sp, #16]
    16b0:	str	r7, [sp, #20]
    16b4:	mov	r6, r2
    16b8:	mov	r7, r1
    16bc:	mov	r4, r0
    16c0:	cmp	r7, #2
    16c4:	bcc	16e4 <coda_expression__scan_buffer+0x50>
    16c8:	add	ip, r4, r7
    16cc:	sub	lr, ip, #4096	; 0x1000
    16d0:	ldrb	r3, [lr, #4094]	; 0xffe
    16d4:	cmp	r3, #0
    16d8:	movne	r2, #1
    16dc:	moveq	r2, #0
    16e0:	b	16e8 <coda_expression__scan_buffer+0x54>
    16e4:	mov	r2, #1
    16e8:	cmp	r2, #0
    16ec:	bne	170c <coda_expression__scan_buffer+0x78>
    16f0:	add	r0, r4, r7
    16f4:	sub	lr, r0, #4096	; 0x1000
    16f8:	ldrb	r3, [lr, #4095]	; 0xfff
    16fc:	cmp	r3, #0
    1700:	movne	r1, #1
    1704:	moveq	r1, #0
    1708:	b	1710 <coda_expression__scan_buffer+0x7c>
    170c:	mov	r1, #1
    1710:	cmp	r1, #0
    1714:	beq	1720 <coda_expression__scan_buffer+0x8c>
    1718:	mov	r0, #0
    171c:	b	179c <coda_expression__scan_buffer+0x108>
    1720:	mov	r0, #48	; 0x30
    1724:	mov	r1, r6
    1728:	bl	1ef4 <coda_expression_alloc>
    172c:	mov	r5, r0
    1730:	cmp	r5, #0
    1734:	bne	1744 <coda_expression__scan_buffer+0xb0>
    1738:	ldr	r0, [pc, #120]	; 17b8 <coda_expression__scan_buffer+0x124>
    173c:	mov	r1, r6
    1740:	bl	18f4 <yy_fatal_error>
    1744:	sub	r0, r7, #2
    1748:	str	r0, [r5, #12]
    174c:	str	r4, [r5, #4]
    1750:	str	r4, [r5, #8]
    1754:	mov	r1, #0
    1758:	str	r1, [r5, #20]
    175c:	mov	r2, #0
    1760:	str	r2, [r5]
    1764:	ldr	r0, [r5, #12]
    1768:	str	r0, [r5, #16]
    176c:	mov	r3, #0
    1770:	str	r3, [r5, #24]
    1774:	mov	r1, #1
    1778:	str	r1, [r5, #28]
    177c:	mov	r1, #0
    1780:	str	r1, [r5, #40]	; 0x28
    1784:	mov	r0, #0
    1788:	str	r0, [r5, #44]	; 0x2c
    178c:	mov	r1, r6
    1790:	mov	r0, r5
    1794:	bl	ff0 <coda_expression__switch_to_buffer>
    1798:	mov	r0, r5
    179c:	ldr	r4, [sp, #8]
    17a0:	ldr	r5, [sp, #12]
    17a4:	ldr	r6, [sp, #16]
    17a8:	ldr	r7, [sp, #20]
    17ac:	ldr	lr, [sp, #4]
    17b0:	add	sp, sp, #24
    17b4:	bx	lr
    17b8:	.word	0x0000010c

000017bc <coda_expression__scan_string>:
    17bc:	mov	ip, sp
    17c0:	sub	sp, sp, #16
    17c4:	str	ip, [sp]
    17c8:	str	lr, [sp, #4]
    17cc:	str	r4, [sp, #8]
    17d0:	str	r5, [sp, #12]
    17d4:	mov	r5, r1
    17d8:	mov	r4, r0
    17dc:	mov	r0, r4
    17e0:	bl	0 <strlen>
    17e4:	mov	r1, r0
    17e8:	mov	r2, r5
    17ec:	mov	r0, r4
    17f0:	bl	1808 <coda_expression__scan_bytes>
    17f4:	ldr	r4, [sp, #8]
    17f8:	ldr	r5, [sp, #12]
    17fc:	ldr	lr, [sp, #4]
    1800:	add	sp, sp, #16
    1804:	bx	lr

00001808 <coda_expression__scan_bytes>:
    1808:	mov	ip, sp
    180c:	sub	sp, sp, #32
    1810:	str	ip, [sp]
    1814:	str	lr, [sp, #4]
    1818:	str	r4, [sp, #8]
    181c:	str	r5, [sp, #12]
    1820:	str	r6, [sp, #16]
    1824:	str	r7, [sp, #20]
    1828:	str	r8, [sp, #24]
    182c:	mov	r5, r2
    1830:	mov	r7, r1
    1834:	mov	r8, r0
    1838:	add	r6, r7, #2
    183c:	mov	r1, r5
    1840:	mov	r0, r6
    1844:	bl	1ef4 <coda_expression_alloc>
    1848:	mov	r4, r0
    184c:	cmp	r4, #0
    1850:	bne	1860 <coda_expression__scan_bytes+0x58>
    1854:	ldr	r0, [pc, #148]	; 18f0 <coda_expression__scan_bytes+0xe8>
    1858:	mov	r1, r5
    185c:	bl	18f4 <yy_fatal_error>
    1860:	mov	ip, #0
    1864:	cmp	ip, r7
    1868:	bge	1880 <coda_expression__scan_bytes+0x78>
    186c:	ldrb	r3, [r8, ip]
    1870:	and	r2, r3, #255	; 0xff
    1874:	strb	r2, [r4, ip]
    1878:	add	ip, ip, #1
    187c:	b	1864 <coda_expression__scan_bytes+0x5c>
    1880:	mov	r1, #0
    1884:	add	r0, r4, r7
    1888:	and	r3, r1, #255	; 0xff
    188c:	strb	r3, [r0, #1]
    1890:	and	ip, r1, #255	; 0xff
    1894:	strb	ip, [r4, r7]
    1898:	mov	r2, r5
    189c:	mov	r1, r6
    18a0:	mov	r0, r4
    18a4:	bl	1694 <coda_expression__scan_buffer>
    18a8:	mov	r4, r0
    18ac:	cmp	r4, #0
    18b0:	bne	18c0 <coda_expression__scan_bytes+0xb8>
    18b4:	ldr	r0, [pc, #48]	; 18ec <coda_expression__scan_bytes+0xe4>
    18b8:	mov	r1, r5
    18bc:	bl	18f4 <yy_fatal_error>
    18c0:	mov	r1, #1
    18c4:	str	r1, [r4, #20]
    18c8:	mov	r0, r4
    18cc:	ldr	r4, [sp, #8]
    18d0:	ldr	r5, [sp, #12]
    18d4:	ldr	r6, [sp, #16]
    18d8:	ldr	r7, [sp, #20]
    18dc:	ldr	r8, [sp, #24]
    18e0:	ldr	lr, [sp, #4]
    18e4:	add	sp, sp, #32
    18e8:	bx	lr
    18ec:	.word	0x00000074
    18f0:	.word	0x000001a1

000018f4 <yy_fatal_error>:
    18f4:	mov	ip, sp
    18f8:	sub	sp, sp, #8
    18fc:	str	ip, [sp]
    1900:	str	lr, [sp, #4]
    1904:	ldr	r2, [pc, #40]	; 1934 <yy_fatal_error+0x40>
    1908:	ldr	r2, [r2]
    190c:	ldr	r1, [pc, #36]	; 1938 <yy_fatal_error+0x44>
    1910:	mov	r3, r0
    1914:	mov	r0, r2
    1918:	mov	r2, r3
    191c:	bl	0 <fprintf>
    1920:	mov	r0, #2
    1924:	bl	0 <exit>
    1928:	ldr	lr, [sp, #4]
    192c:	add	sp, sp, #8
    1930:	bx	lr
    1934:	.word	0x00000000
    1938:	.word	0x000001f6

0000193c <coda_expression_get_extra>:
    193c:	mov	ip, sp
    1940:	sub	sp, sp, #8
    1944:	str	ip, [sp]
    1948:	str	lr, [sp, #4]
    194c:	ldr	r0, [r0]
    1950:	ldr	lr, [sp, #4]
    1954:	add	sp, sp, #8
    1958:	bx	lr

0000195c <coda_expression_get_lineno>:
    195c:	mov	ip, sp
    1960:	sub	sp, sp, #8
    1964:	str	ip, [sp]
    1968:	str	lr, [sp, #4]
    196c:	ldr	r1, [r0, #20]
    1970:	cmp	r1, #0
    1974:	beq	1988 <coda_expression_get_lineno+0x2c>
    1978:	ldr	r3, [r0, #20]
    197c:	ldr	r1, [r0, #12]
    1980:	ldr	ip, [r3, r1, lsl #2]
    1984:	b	198c <coda_expression_get_lineno+0x30>
    1988:	mov	ip, #0
    198c:	cmp	ip, #0
    1990:	bne	199c <coda_expression_get_lineno+0x40>
    1994:	mov	r0, #0
    1998:	b	19ac <coda_expression_get_lineno+0x50>
    199c:	ldr	r2, [r0, #20]
    19a0:	ldr	r0, [r0, #12]
    19a4:	ldr	r0, [r2, r0, lsl #2]
    19a8:	ldr	r0, [r0, #32]
    19ac:	ldr	lr, [sp, #4]
    19b0:	add	sp, sp, #8
    19b4:	bx	lr

000019b8 <coda_expression_get_column>:
    19b8:	mov	ip, sp
    19bc:	sub	sp, sp, #8
    19c0:	str	ip, [sp]
    19c4:	str	lr, [sp, #4]
    19c8:	ldr	r1, [r0, #20]
    19cc:	cmp	r1, #0
    19d0:	beq	19e4 <coda_expression_get_column+0x2c>
    19d4:	ldr	r3, [r0, #20]
    19d8:	ldr	r1, [r0, #12]
    19dc:	ldr	ip, [r3, r1, lsl #2]
    19e0:	b	19e8 <coda_expression_get_column+0x30>
    19e4:	mov	ip, #0
    19e8:	cmp	ip, #0
    19ec:	bne	19f8 <coda_expression_get_column+0x40>
    19f0:	mov	r0, #0
    19f4:	b	1a08 <coda_expression_get_column+0x50>
    19f8:	ldr	r2, [r0, #20]
    19fc:	ldr	r0, [r0, #12]
    1a00:	ldr	r0, [r2, r0, lsl #2]
    1a04:	ldr	r0, [r0, #36]	; 0x24
    1a08:	ldr	lr, [sp, #4]
    1a0c:	add	sp, sp, #8
    1a10:	bx	lr

00001a14 <coda_expression_get_in>:
    1a14:	mov	ip, sp
    1a18:	sub	sp, sp, #8
    1a1c:	str	ip, [sp]
    1a20:	str	lr, [sp, #4]
    1a24:	ldr	r0, [r0, #4]
    1a28:	ldr	lr, [sp, #4]
    1a2c:	add	sp, sp, #8
    1a30:	bx	lr

00001a34 <coda_expression_get_out>:
    1a34:	mov	ip, sp
    1a38:	sub	sp, sp, #8
    1a3c:	str	ip, [sp]
    1a40:	str	lr, [sp, #4]
    1a44:	ldr	r0, [r0, #8]
    1a48:	ldr	lr, [sp, #4]
    1a4c:	add	sp, sp, #8
    1a50:	bx	lr

00001a54 <coda_expression_get_leng>:
    1a54:	mov	ip, sp
    1a58:	sub	sp, sp, #8
    1a5c:	str	ip, [sp]
    1a60:	str	lr, [sp, #4]
    1a64:	ldr	r0, [r0, #32]
    1a68:	ldr	lr, [sp, #4]
    1a6c:	add	sp, sp, #8
    1a70:	bx	lr

00001a74 <coda_expression_get_text>:
    1a74:	mov	ip, sp
    1a78:	sub	sp, sp, #8
    1a7c:	str	ip, [sp]
    1a80:	str	lr, [sp, #4]
    1a84:	ldr	r0, [r0, #80]	; 0x50
    1a88:	ldr	lr, [sp, #4]
    1a8c:	add	sp, sp, #8
    1a90:	bx	lr

00001a94 <coda_expression_set_extra>:
    1a94:	mov	ip, sp
    1a98:	sub	sp, sp, #8
    1a9c:	str	ip, [sp]
    1aa0:	str	lr, [sp, #4]
    1aa4:	str	r0, [r1]
    1aa8:	ldr	lr, [sp, #4]
    1aac:	add	sp, sp, #8
    1ab0:	bx	lr

00001ab4 <coda_expression_set_lineno>:
    1ab4:	mov	ip, sp
    1ab8:	sub	sp, sp, #16
    1abc:	str	ip, [sp]
    1ac0:	str	lr, [sp, #4]
    1ac4:	str	r4, [sp, #8]
    1ac8:	str	r5, [sp, #12]
    1acc:	mov	r4, r1
    1ad0:	mov	r5, r0
    1ad4:	ldr	r3, [r4, #20]
    1ad8:	cmp	r3, #0
    1adc:	beq	1af0 <coda_expression_set_lineno+0x3c>
    1ae0:	ldr	r0, [r4, #20]
    1ae4:	ldr	r2, [r4, #12]
    1ae8:	ldr	r0, [r0, r2, lsl #2]
    1aec:	b	1af4 <coda_expression_set_lineno+0x40>
    1af0:	mov	r0, #0
    1af4:	cmp	r0, #0
    1af8:	bne	1b08 <coda_expression_set_lineno+0x54>
    1afc:	ldr	r0, [pc, #40]	; 1b2c <coda_expression_set_lineno+0x78>
    1b00:	mov	r1, r4
    1b04:	bl	18f4 <yy_fatal_error>
    1b08:	ldr	r3, [r4, #20]
    1b0c:	ldr	r2, [r4, #12]
    1b10:	ldr	ip, [r3, r2, lsl #2]
    1b14:	str	r5, [ip, #32]
    1b18:	ldr	r4, [sp, #8]
    1b1c:	ldr	r5, [sp, #12]
    1b20:	ldr	lr, [sp, #4]
    1b24:	add	sp, sp, #16
    1b28:	bx	lr
    1b2c:	.word	0x00000023

00001b30 <coda_expression_set_column>:
    1b30:	mov	ip, sp
    1b34:	sub	sp, sp, #16
    1b38:	str	ip, [sp]
    1b3c:	str	lr, [sp, #4]
    1b40:	str	r4, [sp, #8]
    1b44:	str	r5, [sp, #12]
    1b48:	mov	r4, r1
    1b4c:	mov	r5, r0
    1b50:	ldr	r3, [r4, #20]
    1b54:	cmp	r3, #0
    1b58:	beq	1b6c <coda_expression_set_column+0x3c>
    1b5c:	ldr	r0, [r4, #20]
    1b60:	ldr	r2, [r4, #12]
    1b64:	ldr	r0, [r0, r2, lsl #2]
    1b68:	b	1b70 <coda_expression_set_column+0x40>
    1b6c:	mov	r0, #0
    1b70:	cmp	r0, #0
    1b74:	bne	1b84 <coda_expression_set_column+0x54>
    1b78:	ldr	r0, [pc, #40]	; 1ba8 <coda_expression_set_column+0x78>
    1b7c:	mov	r1, r4
    1b80:	bl	18f4 <yy_fatal_error>
    1b84:	ldr	r3, [r4, #20]
    1b88:	ldr	r2, [r4, #12]
    1b8c:	ldr	ip, [r3, r2, lsl #2]
    1b90:	str	r5, [ip, #36]	; 0x24
    1b94:	ldr	r4, [sp, #8]
    1b98:	ldr	r5, [sp, #12]
    1b9c:	ldr	lr, [sp, #4]
    1ba0:	add	sp, sp, #16
    1ba4:	bx	lr
    1ba8:	.word	0x00000000

00001bac <coda_expression_set_in>:
    1bac:	mov	ip, sp
    1bb0:	sub	sp, sp, #8
    1bb4:	str	ip, [sp]
    1bb8:	str	lr, [sp, #4]
    1bbc:	str	r0, [r1, #4]
    1bc0:	ldr	lr, [sp, #4]
    1bc4:	add	sp, sp, #8
    1bc8:	bx	lr

00001bcc <coda_expression_set_out>:
    1bcc:	mov	ip, sp
    1bd0:	sub	sp, sp, #8
    1bd4:	str	ip, [sp]
    1bd8:	str	lr, [sp, #4]
    1bdc:	str	r0, [r1, #8]
    1be0:	ldr	lr, [sp, #4]
    1be4:	add	sp, sp, #8
    1be8:	bx	lr

00001bec <coda_expression_get_debug>:
    1bec:	mov	ip, sp
    1bf0:	sub	sp, sp, #8
    1bf4:	str	ip, [sp]
    1bf8:	str	lr, [sp, #4]
    1bfc:	ldr	r0, [r0, #76]	; 0x4c
    1c00:	ldr	lr, [sp, #4]
    1c04:	add	sp, sp, #8
    1c08:	bx	lr

00001c0c <coda_expression_set_debug>:
    1c0c:	mov	ip, sp
    1c10:	sub	sp, sp, #8
    1c14:	str	ip, [sp]
    1c18:	str	lr, [sp, #4]
    1c1c:	str	r0, [r1, #76]	; 0x4c
    1c20:	ldr	lr, [sp, #4]
    1c24:	add	sp, sp, #8
    1c28:	bx	lr

00001c2c <coda_expression_get_lval>:
    1c2c:	mov	ip, sp
    1c30:	sub	sp, sp, #8
    1c34:	str	ip, [sp]
    1c38:	str	lr, [sp, #4]
    1c3c:	ldr	r0, [r0, #92]	; 0x5c
    1c40:	ldr	lr, [sp, #4]
    1c44:	add	sp, sp, #8
    1c48:	bx	lr

00001c4c <coda_expression_set_lval>:
    1c4c:	mov	ip, sp
    1c50:	sub	sp, sp, #8
    1c54:	str	ip, [sp]
    1c58:	str	lr, [sp, #4]
    1c5c:	str	r0, [r1, #92]	; 0x5c
    1c60:	ldr	lr, [sp, #4]
    1c64:	add	sp, sp, #8
    1c68:	bx	lr

00001c6c <coda_expression_lex_init>:
    1c6c:	mov	ip, sp
    1c70:	sub	sp, sp, #16
    1c74:	str	ip, [sp]
    1c78:	str	lr, [sp, #4]
    1c7c:	str	r4, [sp, #8]
    1c80:	mov	r4, r0
    1c84:	cmp	r4, #0
    1c88:	bne	1ca0 <coda_expression_lex_init+0x34>
    1c8c:	bl	0 <__errno_location>
    1c90:	mov	r1, #22
    1c94:	str	r1, [r0]
    1c98:	mov	r0, #1
    1c9c:	b	1ce8 <coda_expression_lex_init+0x7c>
    1ca0:	mov	r0, #96	; 0x60
    1ca4:	mov	r1, #0
    1ca8:	bl	1ef4 <coda_expression_alloc>
    1cac:	str	r0, [r4]
    1cb0:	ldr	r2, [r4]
    1cb4:	cmp	r2, #0
    1cb8:	bne	1cd0 <coda_expression_lex_init+0x64>
    1cbc:	bl	0 <__errno_location>
    1cc0:	mov	ip, #12
    1cc4:	str	ip, [r0]
    1cc8:	mov	r0, #1
    1ccc:	b	1ce8 <coda_expression_lex_init+0x7c>
    1cd0:	ldr	r0, [r4]
    1cd4:	mov	r1, #0
    1cd8:	mov	r2, #96	; 0x60
    1cdc:	bl	0 <memset>
    1ce0:	ldr	r0, [r4]
    1ce4:	bl	1da8 <yy_init_globals>
    1ce8:	ldr	r4, [sp, #8]
    1cec:	ldr	lr, [sp, #4]
    1cf0:	add	sp, sp, #16
    1cf4:	bx	lr

00001cf8 <coda_expression_lex_init_extra>:
    1cf8:	mov	ip, sp
    1cfc:	sub	sp, sp, #112	; 0x70
    1d00:	str	ip, [sp]
    1d04:	str	lr, [sp, #4]
    1d08:	str	r4, [sp, #8]
    1d0c:	str	r5, [sp, #12]
    1d10:	mov	r4, r1
    1d14:	mov	r5, r0
    1d18:	add	r1, sp, #16
    1d1c:	mov	r0, r5
    1d20:	bl	1a94 <coda_expression_set_extra>
    1d24:	cmp	r4, #0
    1d28:	bne	1d40 <coda_expression_lex_init_extra+0x48>
    1d2c:	bl	0 <__errno_location>
    1d30:	mov	r1, #22
    1d34:	str	r1, [r0]
    1d38:	mov	r0, #1
    1d3c:	b	1d94 <coda_expression_lex_init_extra+0x9c>
    1d40:	mov	r0, #96	; 0x60
    1d44:	add	r1, sp, #16
    1d48:	bl	1ef4 <coda_expression_alloc>
    1d4c:	str	r0, [r4]
    1d50:	ldr	r3, [r4]
    1d54:	cmp	r3, #0
    1d58:	bne	1d70 <coda_expression_lex_init_extra+0x78>
    1d5c:	bl	0 <__errno_location>
    1d60:	mov	r1, #12
    1d64:	str	r1, [r0]
    1d68:	mov	r0, #1
    1d6c:	b	1d94 <coda_expression_lex_init_extra+0x9c>
    1d70:	ldr	r0, [r4]
    1d74:	mov	r1, #0
    1d78:	mov	r2, #96	; 0x60
    1d7c:	bl	0 <memset>
    1d80:	ldr	r1, [r4]
    1d84:	mov	r0, r5
    1d88:	bl	1a94 <coda_expression_set_extra>
    1d8c:	ldr	r0, [r4]
    1d90:	bl	1da8 <yy_init_globals>
    1d94:	ldr	r4, [sp, #8]
    1d98:	ldr	r5, [sp, #12]
    1d9c:	ldr	lr, [sp, #4]
    1da0:	add	sp, sp, #112	; 0x70
    1da4:	bx	lr

00001da8 <yy_init_globals>:
    1da8:	mov	ip, sp
    1dac:	sub	sp, sp, #8
    1db0:	str	ip, [sp]
    1db4:	str	lr, [sp, #4]
    1db8:	mov	r1, #0
    1dbc:	str	r1, [r0, #20]
    1dc0:	mov	r1, #0
    1dc4:	str	r1, [r0, #12]
    1dc8:	mov	r1, #0
    1dcc:	str	r1, [r0, #16]
    1dd0:	mov	r2, #0
    1dd4:	str	r2, [r0, #36]	; 0x24
    1dd8:	mov	r3, #0
    1ddc:	str	r3, [r0, #40]	; 0x28
    1de0:	mov	r3, #0
    1de4:	str	r3, [r0, #44]	; 0x2c
    1de8:	mov	ip, #0
    1dec:	str	ip, [r0, #52]	; 0x34
    1df0:	mov	ip, #0
    1df4:	str	ip, [r0, #56]	; 0x38
    1df8:	mov	r1, #0
    1dfc:	str	r1, [r0, #60]	; 0x3c
    1e00:	mov	r2, #0
    1e04:	str	r2, [r0, #4]
    1e08:	mov	r1, #0
    1e0c:	str	r1, [r0, #8]
    1e10:	mov	r0, #0
    1e14:	ldr	lr, [sp, #4]
    1e18:	add	sp, sp, #8
    1e1c:	bx	lr

00001e20 <coda_expression_lex_destroy>:
    1e20:	mov	ip, sp
    1e24:	sub	sp, sp, #16
    1e28:	str	ip, [sp]
    1e2c:	str	lr, [sp, #4]
    1e30:	str	r4, [sp, #8]
    1e34:	mov	r4, r0
    1e38:	ldr	r1, [r4, #20]
    1e3c:	cmp	r1, #0
    1e40:	beq	1e54 <coda_expression_lex_destroy+0x34>
    1e44:	ldr	r2, [r4, #20]
    1e48:	ldr	r3, [r4, #12]
    1e4c:	ldr	r3, [r2, r3, lsl #2]
    1e50:	b	1e58 <coda_expression_lex_destroy+0x38>
    1e54:	mov	r3, #0
    1e58:	cmp	r3, #0
    1e5c:	beq	1ea4 <coda_expression_lex_destroy+0x84>
    1e60:	ldr	r1, [r4, #20]
    1e64:	cmp	r1, #0
    1e68:	beq	1e7c <coda_expression_lex_destroy+0x5c>
    1e6c:	ldr	r2, [r4, #20]
    1e70:	ldr	r3, [r4, #12]
    1e74:	ldr	r0, [r2, r3, lsl #2]
    1e78:	b	1e80 <coda_expression_lex_destroy+0x60>
    1e7c:	mov	r0, #0
    1e80:	mov	r1, r4
    1e84:	bl	11f8 <coda_expression__delete_buffer>
    1e88:	ldr	r0, [r4, #20]
    1e8c:	ldr	r1, [r4, #12]
    1e90:	mov	ip, #0
    1e94:	str	ip, [r0, r1, lsl #2]
    1e98:	mov	r0, r4
    1e9c:	bl	14c0 <coda_expression_pop_buffer_state>
    1ea0:	b	1e38 <coda_expression_lex_destroy+0x18>
    1ea4:	ldr	r0, [r4, #20]
    1ea8:	mov	r1, r4
    1eac:	bl	1f34 <coda_expression_free>
    1eb0:	mov	r1, #0
    1eb4:	str	r1, [r4, #20]
    1eb8:	ldr	r0, [r4, #60]	; 0x3c
    1ebc:	mov	r1, r4
    1ec0:	bl	1f34 <coda_expression_free>
    1ec4:	mov	ip, #0
    1ec8:	str	ip, [r4, #60]	; 0x3c
    1ecc:	mov	r0, r4
    1ed0:	bl	1da8 <yy_init_globals>
    1ed4:	mov	r1, r4
    1ed8:	mov	r0, r4
    1edc:	bl	1f34 <coda_expression_free>
    1ee0:	mov	r0, #0
    1ee4:	ldr	r4, [sp, #8]
    1ee8:	ldr	lr, [sp, #4]
    1eec:	add	sp, sp, #16
    1ef0:	bx	lr

00001ef4 <coda_expression_alloc>:
    1ef4:	mov	ip, sp
    1ef8:	sub	sp, sp, #8
    1efc:	str	ip, [sp]
    1f00:	str	lr, [sp, #4]
    1f04:	bl	0 <malloc>
    1f08:	ldr	lr, [sp, #4]
    1f0c:	add	sp, sp, #8
    1f10:	bx	lr

00001f14 <coda_expression_realloc>:
    1f14:	mov	ip, sp
    1f18:	sub	sp, sp, #8
    1f1c:	str	ip, [sp]
    1f20:	str	lr, [sp, #4]
    1f24:	bl	0 <realloc>
    1f28:	ldr	lr, [sp, #4]
    1f2c:	add	sp, sp, #8
    1f30:	bx	lr

00001f34 <coda_expression_free>:
    1f34:	mov	ip, sp
    1f38:	sub	sp, sp, #8
    1f3c:	str	ip, [sp]
    1f40:	str	lr, [sp, #4]
    1f44:	bl	0 <free>
    1f48:	ldr	lr, [sp, #4]
    1f4c:	add	sp, sp, #8
    1f50:	bx	lr
