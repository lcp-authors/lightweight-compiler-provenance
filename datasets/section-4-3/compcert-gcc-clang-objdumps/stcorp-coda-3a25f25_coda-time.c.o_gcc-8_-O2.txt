
../compcert-repos/stcorp-coda-3a25f25/CMakeFiles/coda_static.dir/libcoda/coda-time.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <parse_integer>:
       0:	cmp	r2, #0
       4:	movne	r2, r0
       8:	bne	4c <parse_integer+0x4c>
       c:	mov	r2, #0
      10:	add	r1, r0, r1
      14:	str	r2, [r3]
      18:	ldrb	r2, [r0], #1
      1c:	sub	r2, r2, #48	; 0x30
      20:	uxtb	ip, r2
      24:	cmp	ip, #9
      28:	bhi	74 <parse_integer+0x74>
      2c:	ldr	ip, [r3]
      30:	cmp	r1, r0
      34:	add	ip, ip, ip, lsl #2
      38:	add	r2, r2, ip, lsl #1
      3c:	str	r2, [r3]
      40:	bne	18 <parse_integer+0x18>
      44:	mov	r0, #0
      48:	bx	lr
      4c:	mov	r0, r2
      50:	add	r2, r2, #1
      54:	ldrb	ip, [r0]
      58:	cmp	ip, #32
      5c:	bne	c <parse_integer+0xc>
      60:	sub	r1, r1, #1
      64:	mov	r0, r2
      68:	cmp	r1, #1
      6c:	bne	4c <parse_integer+0x4c>
      70:	b	c <parse_integer+0xc>
      74:	mvn	r0, #0
      78:	bx	lr

0000007c <dmy_to_mjd2000_julian>:
      7c:	strd	r4, [sp, #-28]!	; 0xffffffe4
      80:	movw	ip, #0
      84:	movt	ip, #0
      88:	strd	r6, [sp, #8]
      8c:	strd	r8, [sp, #16]
      90:	clz	r8, r2
      94:	lsr	r8, r8, #5
      98:	str	lr, [sp, #24]
      9c:	sub	lr, r1, #1
      a0:	ldrd	r6, [ip]
      a4:	sub	sp, sp, #68	; 0x44
      a8:	cmp	lr, #11
      ac:	orrhi	r8, r8, #1
      b0:	cmp	r8, #0
      b4:	ldrd	r4, [ip, #8]
      b8:	ldrd	r8, [ip, #16]
      bc:	strd	r6, [sp, #12]
      c0:	ldrd	r6, [ip, #24]
      c4:	strd	r4, [sp, #20]
      c8:	ldrd	r4, [ip, #32]
      cc:	strd	r8, [sp, #28]
      d0:	ldrd	r8, [ip, #40]	; 0x28
      d4:	strd	r6, [sp, #36]	; 0x24
      d8:	ldr	ip, [ip, #48]	; 0x30
      dc:	strd	r4, [sp, #44]	; 0x2c
      e0:	strd	r8, [sp, #52]	; 0x34
      e4:	str	ip, [sp, #60]	; 0x3c
      e8:	bne	1ec <dmy_to_mjd2000_julian+0x170>
      ec:	cmp	r0, #0
      f0:	ble	1ec <dmy_to_mjd2000_julian+0x170>
      f4:	add	ip, sp, #64	; 0x40
      f8:	cmp	r1, #2
      fc:	add	lr, ip, lr, lsl #2
     100:	ldr	ip, [lr, #-52]	; 0xffffffcc
     104:	add	lr, sp, #64	; 0x40
     108:	add	lr, lr, r1, lsl #2
     10c:	ldr	lr, [lr, #-52]	; 0xffffffcc
     110:	sub	lr, lr, ip
     114:	beq	190 <dmy_to_mjd2000_julian+0x114>
     118:	cmp	lr, r0
     11c:	blt	1ec <dmy_to_mjd2000_julian+0x170>
     120:	add	r2, r2, r2, lsr #31
     124:	movw	r6, #365	; 0x16d
     128:	cmp	r2, #0
     12c:	add	r4, r2, #3
     130:	movge	r4, r2
     134:	rsbs	r5, r2, #0
     138:	and	lr, r2, #3
     13c:	and	r5, r5, #3
     140:	mla	r2, r6, r2, r0
     144:	mov	r0, lr
     148:	rsbpl	r0, r5, #0
     14c:	lsr	r0, r0, #31
     150:	cmp	r1, #2
     154:	rsb	r0, r0, r4, asr #2
     158:	add	r2, r0, r2
     15c:	add	ip, r2, ip
     160:	ble	1e0 <dmy_to_mjd2000_julian+0x164>
     164:	movw	r2, #17122	; 0x42e2
     168:	movt	r2, #26
     16c:	add	r2, ip, r2
     170:	mov	r0, #0
     174:	str	r2, [r3]
     178:	add	sp, sp, #68	; 0x44
     17c:	ldrd	r4, [sp]
     180:	ldrd	r6, [sp, #8]
     184:	ldrd	r8, [sp, #16]
     188:	add	sp, sp, #24
     18c:	pop	{pc}		; (ldr pc, [sp], #4)
     190:	add	r4, r2, r2, lsr #31
     194:	ands	r5, r4, #3
     198:	moveq	r6, #1
     19c:	movne	r6, #0
     1a0:	add	lr, r6, lr
     1a4:	cmp	lr, r0
     1a8:	blt	1ec <dmy_to_mjd2000_julian+0x170>
     1ac:	cmp	r4, #0
     1b0:	add	r1, r4, #3
     1b4:	movge	r1, r4
     1b8:	rsbs	r6, r4, #0
     1bc:	movw	r2, #365	; 0x16d
     1c0:	and	r6, r6, #3
     1c4:	mov	lr, r5
     1c8:	rsbpl	r5, r6, #0
     1cc:	mla	r0, r2, r4, r0
     1d0:	lsr	r4, r5, #31
     1d4:	rsb	r4, r4, r1, asr #2
     1d8:	add	r0, r4, r0
     1dc:	add	ip, r0, ip
     1e0:	cmp	lr, #0
     1e4:	subeq	ip, ip, #1
     1e8:	b	164 <dmy_to_mjd2000_julian+0xe8>
     1ec:	mov	ip, r2
     1f0:	mov	r3, r1
     1f4:	mov	r2, r0
     1f8:	movw	r1, #0
     1fc:	movt	r1, #0
     200:	mvn	r0, #103	; 0x67
     204:	str	ip, [sp]
     208:	bl	0 <coda_set_error>
     20c:	mvn	r0, #0
     210:	b	178 <dmy_to_mjd2000_julian+0xfc>

00000214 <dmy_to_mjd2000>:
     214:	strd	r4, [sp, #-36]!	; 0xffffffdc
     218:	mov	r4, r1
     21c:	mov	r5, r2
     220:	strd	r6, [sp, #8]
     224:	mov	r6, r3
     228:	strd	r8, [sp, #16]
     22c:	strd	sl, [sp, #24]
     230:	str	lr, [sp, #32]
     234:	sub	sp, sp, #100	; 0x64
     238:	add	r3, sp, #40	; 0x28
     23c:	str	r0, [sp, #12]
     240:	bl	7c <dmy_to_mjd2000_julian>
     244:	cmp	r0, #0
     248:	bne	4b8 <dmy_to_mjd2000+0x2a4>
     24c:	add	r3, sp, #36	; 0x24
     250:	movw	r2, #1752	; 0x6d8
     254:	mov	r1, #9
     258:	mov	r0, #2
     25c:	bl	7c <dmy_to_mjd2000_julian>
     260:	cmp	r0, #0
     264:	bne	4b8 <dmy_to_mjd2000+0x2a4>
     268:	ldr	r3, [sp, #36]	; 0x24
     26c:	ldr	r2, [sp, #40]	; 0x28
     270:	cmp	r2, r3
     274:	bgt	2a4 <dmy_to_mjd2000+0x90>
     278:	movw	r3, #38823	; 0x97a7
     27c:	movt	r3, #65498	; 0xffda
     280:	add	r3, r2, r3
     284:	str	r3, [r6]
     288:	add	sp, sp, #100	; 0x64
     28c:	ldrd	r4, [sp]
     290:	ldrd	r6, [sp, #8]
     294:	ldrd	r8, [sp, #16]
     298:	ldrd	sl, [sp, #24]
     29c:	add	sp, sp, #32
     2a0:	pop	{pc}		; (ldr pc, [sp], #4)
     2a4:	movw	r2, #0
     2a8:	movt	r2, #0
     2ac:	ldrd	sl, [r2]
     2b0:	clz	ip, r5
     2b4:	sub	r1, r4, #1
     2b8:	lsr	ip, ip, #5
     2bc:	ldrd	r8, [r2, #8]
     2c0:	cmp	r1, #11
     2c4:	orrhi	ip, ip, #1
     2c8:	cmp	ip, #0
     2cc:	strd	r8, [sp, #16]
     2d0:	strd	sl, [sp, #44]	; 0x2c
     2d4:	ldrd	sl, [sp, #16]
     2d8:	ldrd	r8, [r2, #16]
     2dc:	strd	sl, [sp, #52]	; 0x34
     2e0:	ldrd	sl, [r2, #32]
     2e4:	strd	r8, [sp, #24]
     2e8:	strd	sl, [sp, #16]
     2ec:	ldrd	sl, [sp, #24]
     2f0:	ldrd	r8, [r2, #24]
     2f4:	strd	sl, [sp, #60]	; 0x3c
     2f8:	ldrd	sl, [r2, #40]	; 0x28
     2fc:	ldr	r2, [r2, #48]	; 0x30
     300:	strd	sl, [sp, #24]
     304:	ldrd	sl, [sp, #16]
     308:	strd	r8, [sp, #68]	; 0x44
     30c:	strd	sl, [sp, #76]	; 0x4c
     310:	ldrd	sl, [sp, #24]
     314:	str	r2, [sp, #92]	; 0x5c
     318:	strd	sl, [sp, #84]	; 0x54
     31c:	bne	49c <dmy_to_mjd2000+0x288>
     320:	ldr	r2, [sp, #12]
     324:	cmp	r2, #0
     328:	ble	49c <dmy_to_mjd2000+0x288>
     32c:	add	r2, sp, #96	; 0x60
     330:	cmp	r4, #2
     334:	add	r1, r2, r1, lsl #2
     338:	ldr	r2, [r1, #-52]	; 0xffffffcc
     33c:	add	r1, sp, #96	; 0x60
     340:	add	r1, r1, r4, lsl #2
     344:	ldr	r1, [r1, #-52]	; 0xffffffcc
     348:	sub	r1, r1, r2
     34c:	bne	39c <dmy_to_mjd2000+0x188>
     350:	add	r7, r5, r5, lsr #31
     354:	movw	ip, #34079	; 0x851f
     358:	movt	ip, #20971	; 0x51eb
     35c:	mov	fp, #100	; 0x64
     360:	asr	r9, r7, #31
     364:	tst	r7, #3
     368:	smull	lr, ip, ip, r7
     36c:	moveq	lr, #1
     370:	movne	lr, #0
     374:	rsb	r8, r9, ip, asr #5
     378:	rsb	ip, r9, ip, asr #7
     37c:	mov	r9, #400	; 0x190
     380:	mls	r8, fp, r8, r7
     384:	mls	r7, r9, ip, r7
     388:	cmp	r8, #0
     38c:	eoreq	lr, lr, #1
     390:	cmp	r7, #0
     394:	eoreq	lr, lr, #1
     398:	add	r1, r1, lr
     39c:	ldr	ip, [sp, #12]
     3a0:	cmp	ip, r1
     3a4:	bgt	49c <dmy_to_mjd2000+0x288>
     3a8:	ldr	r1, [sp, #12]
     3ac:	add	lr, r5, r5, lsr #31
     3b0:	movw	ip, #34079	; 0x851f
     3b4:	movt	ip, #20971	; 0x51eb
     3b8:	movw	fp, #365	; 0x16d
     3bc:	cmp	lr, #0
     3c0:	asr	r9, lr, #31
     3c4:	and	sl, lr, #3
     3c8:	smull	r7, ip, ip, lr
     3cc:	mov	r7, sl
     3d0:	add	r2, r1, r2
     3d4:	add	r1, lr, #3
     3d8:	movge	r1, lr
     3dc:	asr	r8, ip, #5
     3e0:	mla	r2, fp, lr, r2
     3e4:	mov	fp, #100	; 0x64
     3e8:	str	r1, [sp, #16]
     3ec:	rsbs	r1, lr, #0
     3f0:	asr	ip, ip, #7
     3f4:	and	r1, r1, #3
     3f8:	rsbpl	r7, r1, #0
     3fc:	cmp	r4, #2
     400:	lsr	r1, r7, #31
     404:	sub	r7, r8, r9
     408:	mov	r8, r7
     40c:	mls	r7, fp, r7, lr
     410:	sub	fp, ip, r9
     414:	ldr	r9, [sp, #16]
     418:	mov	ip, fp
     41c:	sub	r8, r8, r7, lsr #31
     420:	rsb	r1, r1, r9, asr #2
     424:	mov	r9, #400	; 0x190
     428:	mls	fp, r9, fp, lr
     42c:	add	r2, r1, r2
     430:	sub	r8, r2, r8
     434:	sub	ip, ip, fp, lsr #31
     438:	add	ip, r8, ip
     43c:	bgt	468 <dmy_to_mjd2000+0x254>
     440:	clz	r7, r7
     444:	lsr	r7, r7, #5
     448:	cmp	sl, #0
     44c:	rsbne	r7, r7, #0
     450:	rsbeq	r7, r7, #1
     454:	cmp	fp, #0
     458:	movne	fp, r7
     45c:	addeq	fp, r7, #1
     460:	cmp	fp, #0
     464:	subne	ip, ip, #1
     468:	movw	r2, #10273	; 0x2821
     46c:	movt	r2, #65527	; 0xfff7
     470:	movw	r1, #58686	; 0xe53e
     474:	movt	r1, #65500	; 0xffdc
     478:	add	r1, r3, r1
     47c:	add	r2, ip, r2
     480:	cmp	r1, r2
     484:	movwle	r3, #55947	; 0xda8b
     488:	str	r2, [sp, #40]	; 0x28
     48c:	movtle	r3, #65524	; 0xfff4
     490:	addle	r3, ip, r3
     494:	strle	r3, [r6]
     498:	ble	288 <dmy_to_mjd2000+0x74>
     49c:	movw	r1, #0
     4a0:	movt	r1, #0
     4a4:	str	r5, [sp]
     4a8:	mov	r3, r4
     4ac:	mvn	r0, #103	; 0x67
     4b0:	ldr	r2, [sp, #12]
     4b4:	bl	0 <coda_set_error>
     4b8:	mvn	r0, #0
     4bc:	b	288 <dmy_to_mjd2000+0x74>

000004c0 <register_leap_second>:
     4c0:	strd	r4, [sp, #-24]!	; 0xffffffe8
     4c4:	mrc	15, 0, r5, cr13, cr0, {3}
     4c8:	strd	r6, [sp, #8]
     4cc:	ldr	r6, [pc, #248]	; 5cc <register_leap_second+0x10c>
     4d0:	str	r8, [sp, #16]
     4d4:	str	lr, [sp, #20]
     4d8:	vpush	{d8}
     4dc:	vmov.f64	d8, d0
     4e0:	sub	sp, sp, #8
     4e4:	ldr	r4, [r6, r5]
     4e8:	add	r7, r6, r5
     4ec:	ldr	r0, [r7, #4]
     4f0:	tst	r4, #15
     4f4:	beq	57c <register_leap_second+0xbc>
     4f8:	cmp	r4, #0
     4fc:	ble	54c <register_leap_second+0x8c>
     500:	add	r3, r0, r4, lsl #3
     504:	vldr	d7, [r3, #-8]
     508:	vcmpe.f64	d7, d8
     50c:	vmrs	APSR_nzcv, fpscr
     510:	blt	54c <register_leap_second+0x8c>
     514:	mov	r2, r0
     518:	mov	r3, #0
     51c:	vldmia	r2!, {d7}
     520:	add	r3, r3, #1
     524:	vcmpe.f64	d7, d8
     528:	vmrs	APSR_nzcv, fpscr
     52c:	blt	544 <register_leap_second+0x84>
     530:	vcmp.f64	d7, d8
     534:	vmrs	APSR_nzcv, fpscr
     538:	beq	5c4 <register_leap_second+0x104>
     53c:	vstr	d8, [r2, #-8]
     540:	vmov.f64	d8, d7
     544:	cmp	r4, r3
     548:	bne	51c <register_leap_second+0x5c>
     54c:	add	r3, r0, r4, lsl #3
     550:	add	r4, r4, #1
     554:	mov	r0, #0
     558:	str	r4, [r6, r5]
     55c:	vstr	d8, [r3]
     560:	add	sp, sp, #8
     564:	vpop	{d8}
     568:	ldrd	r4, [sp]
     56c:	ldrd	r6, [sp, #8]
     570:	ldr	r8, [sp, #16]
     574:	add	sp, sp, #20
     578:	pop	{pc}		; (ldr pc, [sp], #4)
     57c:	add	r8, r4, #16
     580:	lsl	r8, r8, #3
     584:	mov	r1, r8
     588:	bl	0 <realloc>
     58c:	cmp	r0, #0
     590:	strne	r0, [r7, #4]
     594:	bne	4f8 <register_leap_second+0x38>
     598:	movw	r0, #609	; 0x261
     59c:	mov	r2, r8
     5a0:	movw	r3, #0
     5a4:	movt	r3, #0
     5a8:	movw	r1, #0
     5ac:	movt	r1, #0
     5b0:	str	r0, [sp]
     5b4:	mvn	r0, #0
     5b8:	bl	0 <coda_set_error>
     5bc:	mvn	r0, #0
     5c0:	b	560 <register_leap_second+0xa0>
     5c4:	mov	r0, #0
     5c8:	b	560 <register_leap_second+0xa0>
     5cc:	.word	0x00000000

000005d0 <hms_to_daytime>:
     5d0:	cmp	r0, #23
     5d4:	push	{lr}		; (str lr, [sp, #-4]!)
     5d8:	sub	sp, sp, #12
     5dc:	bhi	658 <hms_to_daytime+0x88>
     5e0:	cmp	r1, #59	; 0x3b
     5e4:	bhi	658 <hms_to_daytime+0x88>
     5e8:	movw	ip, #16959	; 0x423f
     5ec:	movt	ip, #15
     5f0:	cmp	r3, ip
     5f4:	cmpls	r2, #60	; 0x3c
     5f8:	movhi	ip, #1
     5fc:	movls	ip, #0
     600:	bhi	658 <hms_to_daytime+0x88>
     604:	vmov	s13, r0
     608:	mov	r0, ip
     60c:	vmov	s15, r1
     610:	vldr	d3, [pc, #112]	; 688 <hms_to_daytime+0xb8>
     614:	vldr	d2, [pc, #116]	; 690 <hms_to_daytime+0xc0>
     618:	vldr	d1, [pc, #120]	; 698 <hms_to_daytime+0xc8>
     61c:	vcvt.f64.s32	d4, s13
     620:	vmov	s13, r3
     624:	vcvt.f64.s32	d7, s15
     628:	ldr	r3, [sp, #16]
     62c:	vmul.f64	d7, d7, d3
     630:	vcvt.f64.s32	d5, s13
     634:	vmov	s13, r2
     638:	vmla.f64	d7, d4, d2
     63c:	vdiv.f64	d3, d5, d1
     640:	vcvt.f64.s32	d6, s13
     644:	vadd.f64	d7, d7, d6
     648:	vadd.f64	d7, d7, d3
     64c:	vstr	d7, [r3]
     650:	add	sp, sp, #12
     654:	pop	{pc}		; (ldr pc, [sp], #4)
     658:	mov	lr, r3
     65c:	mov	ip, r2
     660:	mov	r3, r1
     664:	mov	r2, r0
     668:	movw	r1, #0
     66c:	movt	r1, #0
     670:	stm	sp, {ip, lr}
     674:	mvn	r0, #103	; 0x67
     678:	bl	0 <coda_set_error>
     67c:	mvn	r0, #0
     680:	b	650 <hms_to_daytime+0x80>
     684:	nop	{0}
     688:	.word	0x00000000
     68c:	.word	0x404e0000
     690:	.word	0x00000000
     694:	.word	0x40ac2000
     698:	.word	0x00000000
     69c:	.word	0x412e8480

000006a0 <getday_leapyear>:
     6a0:	movw	r3, #0
     6a4:	movt	r3, #0
     6a8:	strd	r4, [sp, #-28]!	; 0xffffffe4
     6ac:	strd	r6, [sp, #8]
     6b0:	cmp	r0, #0
     6b4:	strd	r8, [sp, #16]
     6b8:	ldrd	r6, [r3, #52]	; 0x34
     6bc:	str	lr, [sp, #24]
     6c0:	sub	sp, sp, #60	; 0x3c
     6c4:	ldrd	r4, [r3, #60]	; 0x3c
     6c8:	ldrd	r8, [r3, #68]	; 0x44
     6cc:	strd	r6, [sp, #4]
     6d0:	ldrd	r6, [r3, #76]	; 0x4c
     6d4:	strd	r4, [sp, #12]
     6d8:	ldrd	r4, [r3, #84]	; 0x54
     6dc:	strd	r8, [sp, #20]
     6e0:	ldrd	r8, [r3, #92]	; 0x5c
     6e4:	strd	r6, [sp, #28]
     6e8:	ldr	ip, [r3, #100]	; 0x64
     6ec:	strd	r4, [sp, #36]	; 0x24
     6f0:	strd	r8, [sp, #44]	; 0x2c
     6f4:	str	ip, [sp, #52]	; 0x34
     6f8:	blt	784 <getday_leapyear+0xe4>
     6fc:	movw	ip, #365	; 0x16d
     700:	cmp	r0, ip
     704:	addle	r3, sp, #4
     708:	movle	ip, #1
     70c:	bgt	768 <getday_leapyear+0xc8>
     710:	ldr	lr, [r3, #4]!
     714:	cmp	lr, r0
     718:	bgt	760 <getday_leapyear+0xc0>
     71c:	add	ip, ip, #1
     720:	cmp	ip, #13
     724:	bne	710 <getday_leapyear+0x70>
     728:	mov	r3, #12
     72c:	add	lr, sp, #56	; 0x38
     730:	add	r0, r0, #1
     734:	str	ip, [r2]
     738:	add	r3, lr, r3, lsl #2
     73c:	ldr	r3, [r3, #-52]	; 0xffffffcc
     740:	sub	r0, r0, r3
     744:	str	r0, [r1]
     748:	add	sp, sp, #60	; 0x3c
     74c:	ldrd	r4, [sp]
     750:	ldrd	r6, [sp, #8]
     754:	ldrd	r8, [sp, #16]
     758:	add	sp, sp, #24
     75c:	pop	{pc}		; (ldr pc, [sp], #4)
     760:	sub	r3, ip, #1
     764:	b	72c <getday_leapyear+0x8c>
     768:	movw	r1, #0
     76c:	movt	r1, #0
     770:	movw	r0, #0
     774:	movt	r0, #0
     778:	add	r3, r3, #104	; 0x68
     77c:	movw	r2, #359	; 0x167
     780:	bl	0 <__assert_fail>
     784:	movw	r1, #0
     788:	movt	r1, #0
     78c:	movw	r0, #0
     790:	movt	r0, #0
     794:	add	r3, r3, #104	; 0x68
     798:	movw	r2, #358	; 0x166
     79c:	bl	0 <__assert_fail>

000007a0 <getday_nonleapyear>:
     7a0:	movw	r3, #0
     7a4:	movt	r3, #0
     7a8:	strd	r4, [sp, #-28]!	; 0xffffffe4
     7ac:	strd	r6, [sp, #8]
     7b0:	cmp	r0, #364	; 0x16c
     7b4:	strd	r8, [sp, #16]
     7b8:	ldrd	r6, [r3]
     7bc:	str	lr, [sp, #24]
     7c0:	sub	sp, sp, #60	; 0x3c
     7c4:	ldrd	r4, [r3, #8]
     7c8:	ldrd	r8, [r3, #16]
     7cc:	strd	r6, [sp, #4]
     7d0:	ldrd	r6, [r3, #24]
     7d4:	strd	r4, [sp, #12]
     7d8:	ldrd	r4, [r3, #32]
     7dc:	strd	r8, [sp, #20]
     7e0:	ldrd	r8, [r3, #40]	; 0x28
     7e4:	strd	r6, [sp, #28]
     7e8:	ldr	ip, [r3, #48]	; 0x30
     7ec:	addle	r3, sp, #4
     7f0:	strd	r4, [sp, #36]	; 0x24
     7f4:	strd	r8, [sp, #44]	; 0x2c
     7f8:	str	ip, [sp, #52]	; 0x34
     7fc:	movle	ip, #1
     800:	bgt	85c <getday_nonleapyear+0xbc>
     804:	ldr	lr, [r3, #4]!
     808:	cmp	lr, r0
     80c:	bgt	854 <getday_nonleapyear+0xb4>
     810:	add	ip, ip, #1
     814:	cmp	ip, #13
     818:	bne	804 <getday_nonleapyear+0x64>
     81c:	mov	r3, #12
     820:	add	lr, sp, #56	; 0x38
     824:	add	r0, r0, #1
     828:	str	ip, [r2]
     82c:	add	r3, lr, r3, lsl #2
     830:	ldr	r3, [r3, #-52]	; 0xffffffcc
     834:	sub	r0, r0, r3
     838:	str	r0, [r1]
     83c:	add	sp, sp, #60	; 0x3c
     840:	ldrd	r4, [sp]
     844:	ldrd	r6, [sp, #8]
     848:	ldrd	r8, [sp, #16]
     84c:	add	sp, sp, #24
     850:	pop	{pc}		; (ldr pc, [sp], #4)
     854:	sub	r3, ip, #1
     858:	b	820 <getday_nonleapyear+0x80>
     85c:	movw	r1, #0
     860:	movt	r1, #0
     864:	movw	r0, #0
     868:	movt	r0, #0
     86c:	add	r3, r3, #120	; 0x78
     870:	movw	r2, #378	; 0x17a
     874:	bl	0 <__assert_fail>

00000878 <mjd2000_to_dmy>:
     878:	strd	r4, [sp, #-24]!	; 0xffffffe8
     87c:	mov	r5, r1
     880:	mov	r4, r3
     884:	strd	r6, [sp, #8]
     888:	mov	r1, #9
     88c:	mov	r6, r2
     890:	str	r8, [sp, #16]
     894:	movw	r2, #1752	; 0x6d8
     898:	mov	r8, r0
     89c:	str	lr, [sp, #20]
     8a0:	sub	sp, sp, #8
     8a4:	mov	r0, #2
     8a8:	add	r3, sp, #4
     8ac:	bl	214 <dmy_to_mjd2000>
     8b0:	subs	r7, r0, #0
     8b4:	bne	bbc <mjd2000_to_dmy+0x344>
     8b8:	ldr	r3, [sp, #4]
     8bc:	cmp	r3, r8
     8c0:	blt	990 <mjd2000_to_dmy+0x118>
     8c4:	sub	r8, r8, #13
     8c8:	movw	r3, #45171	; 0xb073
     8cc:	movt	r3, #5741	; 0x166d
     8d0:	asr	r1, r8, #31
     8d4:	movw	r0, #1461	; 0x5b5
     8d8:	movw	ip, #365	; 0x16d
     8dc:	smull	r2, r3, r3, r8
     8e0:	asr	r3, r3, #7
     8e4:	sub	r2, r3, r1
     8e8:	mov	r3, r2
     8ec:	mls	r2, r0, r2, r8
     8f0:	sub	r3, r3, r2, lsr #31
     8f4:	cmp	r2, #0
     8f8:	movge	r0, #0
     8fc:	lsl	r3, r3, #2
     900:	add	r0, r0, r2
     904:	cmp	r0, ip
     908:	add	r2, r3, #2000	; 0x7d0
     90c:	str	r2, [r4]
     910:	ble	a2c <mjd2000_to_dmy+0x1b4>
     914:	sub	r0, r0, #364	; 0x16c
     918:	movw	r1, #63921	; 0xf9b1
     91c:	movt	r1, #45964	; 0xb38c
     920:	sub	r0, r0, #2
     924:	asr	r8, r0, #31
     928:	add	r3, r3, #2000	; 0x7d0
     92c:	mov	r2, r6
     930:	smull	r1, lr, r1, r0
     934:	mov	r1, r5
     938:	add	r3, r3, #1
     93c:	add	lr, lr, r0
     940:	asr	lr, lr, #8
     944:	sub	r5, lr, r8
     948:	add	r3, r3, r5
     94c:	mls	r5, ip, r5, r0
     950:	str	r3, [r4]
     954:	cmp	r5, #0
     958:	movge	ip, #0
     95c:	add	r0, ip, r5
     960:	bl	7a0 <getday_nonleapyear>
     964:	ldr	r3, [r4]
     968:	cmp	r3, #0
     96c:	suble	r3, r3, #1
     970:	strle	r3, [r4]
     974:	mov	r0, r7
     978:	add	sp, sp, #8
     97c:	ldrd	r4, [sp]
     980:	ldrd	r6, [sp, #8]
     984:	ldr	r8, [sp, #16]
     988:	add	sp, sp, #20
     98c:	pop	{pc}		; (ldr pc, [sp], #4)
     990:	movw	r2, #1725	; 0x6bd
     994:	movt	r2, #14699	; 0x396b
     998:	asr	lr, r8, #31
     99c:	movw	r3, #15025	; 0x3ab1
     9a0:	movt	r3, #2
     9a4:	smull	r1, r2, r2, r8
     9a8:	mov	ip, #400	; 0x190
     9ac:	movw	r1, #36524	; 0x8eac
     9b0:	asr	r2, r2, #15
     9b4:	sub	r0, r2, lr
     9b8:	mov	r2, r0
     9bc:	mls	r0, r3, r0, r8
     9c0:	sub	r2, r2, r0, lsr #31
     9c4:	cmp	r0, #0
     9c8:	movge	r3, #0
     9cc:	add	r3, r3, r0
     9d0:	mul	r2, ip, r2
     9d4:	cmp	r3, r1
     9d8:	add	ip, r2, #2000	; 0x7d0
     9dc:	str	ip, [r4]
     9e0:	bgt	a3c <mjd2000_to_dmy+0x1c4>
     9e4:	movw	r2, #45171	; 0xb073
     9e8:	movt	r2, #5741	; 0x166d
     9ec:	asr	r8, r3, #31
     9f0:	movw	r1, #1461	; 0x5b5
     9f4:	movw	lr, #365	; 0x16d
     9f8:	smull	r0, r2, r2, r3
     9fc:	asr	r2, r2, #7
     a00:	sub	r0, r2, r8
     a04:	mov	r2, r0
     a08:	mls	r0, r1, r0, r3
     a0c:	sub	r2, r2, r0, lsr #31
     a10:	cmp	r0, #0
     a14:	movge	r1, #0
     a18:	add	r2, ip, r2, lsl #2
     a1c:	add	r0, r1, r0
     a20:	cmp	r0, lr
     a24:	str	r2, [r4]
     a28:	bgt	b24 <mjd2000_to_dmy+0x2ac>
     a2c:	mov	r2, r6
     a30:	mov	r1, r5
     a34:	bl	6a0 <getday_leapyear>
     a38:	b	964 <mjd2000_to_dmy+0xec>
     a3c:	sub	r8, r3, #36352	; 0x8e00
     a40:	movw	r3, #8319	; 0x207f
     a44:	movt	r3, #14699	; 0x396b
     a48:	sub	r8, r8, #173	; 0xad
     a4c:	lsr	r0, r8, #2
     a50:	add	r2, r2, #2096	; 0x830
     a54:	mov	ip, #100	; 0x64
     a58:	add	r2, r2, #4
     a5c:	movw	lr, #1459	; 0x5b3
     a60:	umull	r3, r0, r3, r0
     a64:	lsr	r3, r0, #11
     a68:	mov	r0, r3
     a6c:	mls	r3, r1, r3, r8
     a70:	mla	ip, ip, r0, r2
     a74:	cmp	r3, #0
     a78:	movge	r1, #0
     a7c:	str	ip, [r4]
     a80:	add	r3, r1, r3
     a84:	cmp	r3, lr
     a88:	ble	b74 <mjd2000_to_dmy+0x2fc>
     a8c:	sub	r3, r3, #1456	; 0x5b0
     a90:	movw	r1, #45171	; 0xb073
     a94:	movt	r1, #5741	; 0x166d
     a98:	sub	r3, r3, #4
     a9c:	add	r2, ip, #4
     aa0:	movw	r8, #1461	; 0x5b5
     aa4:	umull	r1, ip, r1, r3
     aa8:	movw	lr, #365	; 0x16d
     aac:	lsr	r0, ip, #7
     ab0:	mov	ip, r0
     ab4:	mls	r0, r8, r0, r3
     ab8:	add	ip, r2, ip, lsl #2
     abc:	cmp	r0, #0
     ac0:	movge	r8, #0
     ac4:	str	ip, [r4]
     ac8:	add	r0, r8, r0
     acc:	cmp	r0, lr
     ad0:	ble	a2c <mjd2000_to_dmy+0x1b4>
     ad4:	sub	r3, r0, #364	; 0x16c
     ad8:	movw	r1, #63921	; 0xf9b1
     adc:	movt	r1, #45964	; 0xb38c
     ae0:	sub	r3, r3, #2
     ae4:	asr	r8, r3, #31
     ae8:	add	ip, ip, #1
     aec:	mov	r2, r6
     af0:	smull	r1, r0, r1, r3
     af4:	mov	r1, r5
     af8:	add	r5, r0, r3
     afc:	asr	r5, r5, #8
     b00:	sub	r0, r5, r8
     b04:	add	ip, ip, r0
     b08:	mls	r0, lr, r0, r3
     b0c:	str	ip, [r4]
     b10:	cmp	r0, #0
     b14:	movge	lr, #0
     b18:	add	r0, lr, r0
     b1c:	bl	7a0 <getday_nonleapyear>
     b20:	b	964 <mjd2000_to_dmy+0xec>
     b24:	sub	r0, r0, #364	; 0x16c
     b28:	movw	r3, #63921	; 0xf9b1
     b2c:	movt	r3, #45964	; 0xb38c
     b30:	sub	r0, r0, #2
     b34:	asr	r8, r0, #31
     b38:	add	ip, r2, #1
     b3c:	mov	r2, r6
     b40:	smull	r1, r3, r3, r0
     b44:	mov	r1, r5
     b48:	add	r3, r3, r0
     b4c:	asr	r3, r3, #8
     b50:	sub	r5, r3, r8
     b54:	add	r3, ip, r5
     b58:	mls	r5, lr, r5, r0
     b5c:	str	r3, [r4]
     b60:	cmp	r5, #0
     b64:	movge	lr, #0
     b68:	add	r0, lr, r5
     b6c:	bl	7a0 <getday_nonleapyear>
     b70:	b	964 <mjd2000_to_dmy+0xec>
     b74:	movw	r0, #63921	; 0xf9b1
     b78:	movt	r0, #45964	; 0xb38c
     b7c:	asr	r8, r3, #31
     b80:	mov	r1, r5
     b84:	mov	r2, r6
     b88:	smull	r0, lr, r0, r3
     b8c:	movw	r0, #365	; 0x16d
     b90:	add	lr, lr, r3
     b94:	asr	lr, lr, #8
     b98:	sub	r5, lr, r8
     b9c:	add	ip, r5, ip
     ba0:	mls	r5, r0, r5, r3
     ba4:	str	ip, [r4]
     ba8:	cmp	r5, #0
     bac:	movge	r0, #0
     bb0:	add	r0, r0, r5
     bb4:	bl	7a0 <getday_nonleapyear>
     bb8:	b	964 <mjd2000_to_dmy+0xec>
     bbc:	mvn	r7, #0
     bc0:	b	974 <mjd2000_to_dmy+0xfc>

00000bc4 <coda_month_to_integer>:
     bc4:	mov	r3, r0
     bc8:	push	{lr}		; (str lr, [sp, #-4]!)
     bcc:	mov	r2, #0
     bd0:	ldrb	lr, [r0]
     bd4:	sub	sp, sp, #12
     bd8:	movw	r1, #0
     bdc:	movt	r1, #0
     be0:	add	r0, sp, #4
     be4:	ldrb	ip, [r3, #1]
     be8:	ldrb	r3, [r3, #2]
     bec:	strb	lr, [sp, #4]
     bf0:	strb	r2, [sp, #7]
     bf4:	mov	r2, #3
     bf8:	strb	ip, [sp, #5]
     bfc:	strb	r3, [sp, #6]
     c00:	bl	0 <strncasecmp>
     c04:	cmp	r0, #0
     c08:	moveq	r0, #1
     c0c:	beq	d70 <coda_month_to_integer+0x1ac>
     c10:	movw	r1, #0
     c14:	movt	r1, #0
     c18:	mov	r2, #3
     c1c:	add	r0, sp, #4
     c20:	bl	0 <strncasecmp>
     c24:	cmp	r0, #0
     c28:	moveq	r0, #2
     c2c:	beq	d70 <coda_month_to_integer+0x1ac>
     c30:	movw	r1, #0
     c34:	movt	r1, #0
     c38:	mov	r2, #3
     c3c:	add	r0, sp, #4
     c40:	bl	0 <strncasecmp>
     c44:	cmp	r0, #0
     c48:	moveq	r0, #3
     c4c:	beq	d70 <coda_month_to_integer+0x1ac>
     c50:	movw	r1, #0
     c54:	movt	r1, #0
     c58:	mov	r2, #3
     c5c:	add	r0, sp, #4
     c60:	bl	0 <strncasecmp>
     c64:	cmp	r0, #0
     c68:	moveq	r0, #4
     c6c:	beq	d70 <coda_month_to_integer+0x1ac>
     c70:	movw	r1, #0
     c74:	movt	r1, #0
     c78:	mov	r2, #3
     c7c:	add	r0, sp, #4
     c80:	bl	0 <strncasecmp>
     c84:	cmp	r0, #0
     c88:	moveq	r0, #5
     c8c:	beq	d70 <coda_month_to_integer+0x1ac>
     c90:	movw	r1, #0
     c94:	movt	r1, #0
     c98:	mov	r2, #3
     c9c:	add	r0, sp, #4
     ca0:	bl	0 <strncasecmp>
     ca4:	cmp	r0, #0
     ca8:	moveq	r0, #6
     cac:	beq	d70 <coda_month_to_integer+0x1ac>
     cb0:	movw	r1, #0
     cb4:	movt	r1, #0
     cb8:	mov	r2, #3
     cbc:	add	r0, sp, #4
     cc0:	bl	0 <strncasecmp>
     cc4:	cmp	r0, #0
     cc8:	moveq	r0, #7
     ccc:	beq	d70 <coda_month_to_integer+0x1ac>
     cd0:	movw	r1, #0
     cd4:	movt	r1, #0
     cd8:	mov	r2, #3
     cdc:	add	r0, sp, #4
     ce0:	bl	0 <strncasecmp>
     ce4:	cmp	r0, #0
     ce8:	moveq	r0, #8
     cec:	beq	d70 <coda_month_to_integer+0x1ac>
     cf0:	movw	r1, #0
     cf4:	movt	r1, #0
     cf8:	mov	r2, #3
     cfc:	add	r0, sp, #4
     d00:	bl	0 <strncasecmp>
     d04:	cmp	r0, #0
     d08:	moveq	r0, #9
     d0c:	beq	d70 <coda_month_to_integer+0x1ac>
     d10:	movw	r1, #0
     d14:	movt	r1, #0
     d18:	mov	r2, #3
     d1c:	add	r0, sp, #4
     d20:	bl	0 <strncasecmp>
     d24:	cmp	r0, #0
     d28:	moveq	r0, #10
     d2c:	beq	d70 <coda_month_to_integer+0x1ac>
     d30:	movw	r1, #0
     d34:	movt	r1, #0
     d38:	mov	r2, #3
     d3c:	add	r0, sp, #4
     d40:	bl	0 <strncasecmp>
     d44:	cmp	r0, #0
     d48:	moveq	r0, #11
     d4c:	beq	d70 <coda_month_to_integer+0x1ac>
     d50:	movw	r1, #0
     d54:	movt	r1, #0
     d58:	mov	r2, #3
     d5c:	add	r0, sp, #4
     d60:	bl	0 <strncasecmp>
     d64:	cmp	r0, #0
     d68:	moveq	r0, #12
     d6c:	bne	d78 <coda_month_to_integer+0x1b4>
     d70:	add	sp, sp, #12
     d74:	pop	{pc}		; (ldr pc, [sp], #4)
     d78:	mvn	r0, #99	; 0x63
     d7c:	add	r2, sp, #4
     d80:	movw	r1, #0
     d84:	movt	r1, #0
     d88:	bl	0 <coda_set_error>
     d8c:	mvn	r0, #0
     d90:	b	d70 <coda_month_to_integer+0x1ac>

00000d94 <coda_dayofyear_to_month_day>:
     d94:	strd	r4, [sp, #-16]!
     d98:	cmp	r3, #0
     d9c:	cmpne	r2, #0
     da0:	str	r6, [sp, #8]
     da4:	str	lr, [sp, #12]
     da8:	sub	sp, sp, #16
     dac:	str	r0, [sp, #4]
     db0:	beq	e50 <coda_dayofyear_to_month_day+0xbc>
     db4:	mov	r5, r3
     db8:	movw	r3, #366	; 0x16e
     dbc:	cmp	r1, r3
     dc0:	mov	r4, r1
     dc4:	bhi	e34 <coda_dayofyear_to_month_day+0xa0>
     dc8:	mov	r1, #1
     dcc:	mov	r6, r2
     dd0:	add	r3, sp, #12
     dd4:	mov	r2, r0
     dd8:	mov	r0, r1
     ddc:	bl	214 <dmy_to_mjd2000>
     de0:	cmp	r0, #0
     de4:	bne	e2c <coda_dayofyear_to_month_day+0x98>
     de8:	ldr	r0, [sp, #12]
     dec:	sub	r4, r4, #1
     df0:	mov	r2, r6
     df4:	mov	r1, r5
     df8:	add	r3, sp, #4
     dfc:	add	r4, r4, r0
     e00:	mov	r0, r4
     e04:	str	r4, [sp, #12]
     e08:	bl	878 <mjd2000_to_dmy>
     e0c:	adds	r0, r0, #0
     e10:	movne	r0, #1
     e14:	rsb	r0, r0, #0
     e18:	add	sp, sp, #16
     e1c:	ldrd	r4, [sp]
     e20:	ldr	r6, [sp, #8]
     e24:	add	sp, sp, #12
     e28:	pop	{pc}		; (ldr pc, [sp], #4)
     e2c:	mvn	r0, #0
     e30:	b	e18 <coda_dayofyear_to_month_day+0x84>
     e34:	mov	r2, r1
     e38:	mvn	r0, #103	; 0x67
     e3c:	movw	r1, #0
     e40:	movt	r1, #0
     e44:	bl	0 <coda_set_error>
     e48:	mvn	r0, #0
     e4c:	b	e18 <coda_dayofyear_to_month_day+0x84>
     e50:	mvn	r0, #99	; 0x63
     e54:	movw	r2, #0
     e58:	movt	r2, #0
     e5c:	movw	r1, #0
     e60:	movt	r1, #0
     e64:	movw	r3, #549	; 0x225
     e68:	bl	0 <coda_set_error>
     e6c:	mvn	r0, #0
     e70:	b	e18 <coda_dayofyear_to_month_day+0x84>

00000e74 <string_to_parts>:
     e74:	strd	r4, [sp, #-36]!	; 0xffffffdc
     e78:	mov	ip, #2000	; 0x7d0
     e7c:	strd	r6, [sp, #8]
     e80:	mov	r7, r1
     e84:	mov	r6, r0
     e88:	strd	r8, [sp, #16]
     e8c:	strd	sl, [sp, #24]
     e90:	mov	sl, r3
     e94:	mov	r3, #0
     e98:	str	lr, [sp, #32]
     e9c:	sub	sp, sp, #20
     ea0:	mov	lr, r2
     ea4:	ldr	r1, [sp, #56]	; 0x38
     ea8:	mov	r8, r3
     eac:	mov	r5, r3
     eb0:	str	ip, [r2]
     eb4:	mov	r4, r3
     eb8:	str	r2, [sp, #4]
     ebc:	mov	r2, #1
     ec0:	ldr	r9, [sp, #72]	; 0x48
     ec4:	str	r2, [sl]
     ec8:	str	r2, [r1]
     ecc:	ldr	r2, [sp, #60]	; 0x3c
     ed0:	str	r3, [r2]
     ed4:	ldr	r2, [sp, #64]	; 0x40
     ed8:	str	r3, [r2]
     edc:	ldr	r2, [sp, #68]	; 0x44
     ee0:	str	r3, [r2]
     ee4:	str	r3, [r9]
     ee8:	ldrb	r3, [r0]
     eec:	cmp	r3, #0
     ef0:	beq	1450 <string_to_parts+0x5dc>
     ef4:	cmp	r8, #0
     ef8:	subne	r5, r5, #1
     efc:	rsbne	r0, r7, #1
     f00:	addne	r2, r7, r5
     f04:	beq	f98 <string_to_parts+0x124>
     f08:	cmp	r3, #39	; 0x27
     f0c:	add	r5, r0, r2
     f10:	beq	1168 <string_to_parts+0x2f4>
     f14:	ldrb	r3, [r6, r4]
     f18:	add	r4, r4, #1
     f1c:	ldrb	r1, [r2, #1]!
     f20:	cmp	r1, r3
     f24:	bne	1430 <string_to_parts+0x5bc>
     f28:	ldrb	r3, [r6, r4]
     f2c:	cmp	r3, #0
     f30:	bne	f08 <string_to_parts+0x94>
     f34:	mvn	r0, #102	; 0x66
     f38:	mov	r2, r6
     f3c:	movw	r1, #0
     f40:	movt	r1, #0
     f44:	bl	0 <coda_set_error>
     f48:	mvn	r0, #0
     f4c:	add	sp, sp, #20
     f50:	ldrd	r4, [sp]
     f54:	ldrd	r6, [sp, #8]
     f58:	ldrd	r8, [sp, #16]
     f5c:	ldrd	sl, [sp, #24]
     f60:	add	sp, sp, #32
     f64:	pop	{pc}		; (ldr pc, [sp], #4)
     f68:	add	r4, r4, #1
     f6c:	ldrb	r3, [r6, r4]
     f70:	cmp	r3, #39	; 0x27
     f74:	bne	13e0 <string_to_parts+0x56c>
     f78:	ldrb	r2, [r7, r5]
     f7c:	cmp	r2, r3
     f80:	bne	1430 <string_to_parts+0x5bc>
     f84:	add	r4, r4, #1
     f88:	add	r5, r5, #1
     f8c:	ldrb	r3, [r6, r4]
     f90:	cmp	r3, #0
     f94:	beq	107c <string_to_parts+0x208>
     f98:	cmp	r3, #124	; 0x7c
     f9c:	beq	107c <string_to_parts+0x208>
     fa0:	cmp	r3, #39	; 0x27
     fa4:	beq	f68 <string_to_parts+0xf4>
     fa8:	ldrb	r3, [r6, r4]
     fac:	add	fp, r6, r4
     fb0:	cmp	r3, #121	; 0x79
     fb4:	beq	1180 <string_to_parts+0x30c>
     fb8:	cmp	r3, #77	; 0x4d
     fbc:	bne	fe8 <string_to_parts+0x174>
     fc0:	ldrb	r3, [fp, #1]
     fc4:	cmp	r3, #77	; 0x4d
     fc8:	beq	12ac <string_to_parts+0x438>
     fcc:	mvn	r0, #102	; 0x66
     fd0:	mov	r2, r6
     fd4:	movw	r1, #0
     fd8:	movt	r1, #0
     fdc:	bl	0 <coda_set_error>
     fe0:	mvn	r0, #0
     fe4:	b	f4c <string_to_parts+0xd8>
     fe8:	cmp	r3, #100	; 0x64
     fec:	beq	1254 <string_to_parts+0x3e0>
     ff0:	cmp	r3, #68	; 0x44
     ff4:	bne	10a8 <string_to_parts+0x234>
     ff8:	ldrb	r3, [fp, #1]
     ffc:	cmp	r3, #68	; 0x44
    1000:	bne	fcc <string_to_parts+0x158>
    1004:	ldrb	r3, [fp, #2]
    1008:	cmp	r3, #68	; 0x44
    100c:	bne	fcc <string_to_parts+0x158>
    1010:	add	fp, r4, #3
    1014:	add	r3, sp, #12
    1018:	ldrb	r2, [r6, fp]
    101c:	mov	r1, #3
    1020:	add	r0, r7, r5
    1024:	sub	r2, r2, #42	; 0x2a
    1028:	clz	r2, r2
    102c:	lsr	r2, r2, #5
    1030:	bl	0 <parse_integer>
    1034:	cmp	r0, #0
    1038:	bne	1488 <string_to_parts+0x614>
    103c:	ldr	r0, [sp, #4]
    1040:	mov	r2, sl
    1044:	ldr	r1, [sp, #12]
    1048:	ldr	r3, [sp, #56]	; 0x38
    104c:	ldr	r0, [r0]
    1050:	bl	d94 <coda_dayofyear_to_month_day>
    1054:	cmp	r0, #0
    1058:	bne	14a4 <string_to_parts+0x630>
    105c:	ldrb	r3, [r6, fp]
    1060:	add	r5, r5, #3
    1064:	cmp	r3, #42	; 0x2a
    1068:	addeq	r4, r4, #4
    106c:	movne	r4, fp
    1070:	ldrbeq	r3, [r6, r4]
    1074:	cmp	r3, #0
    1078:	bne	f98 <string_to_parts+0x124>
    107c:	ldrb	r0, [r7, r5]
    1080:	cmp	r0, #0
    1084:	beq	f4c <string_to_parts+0xd8>
    1088:	movw	r1, #0
    108c:	movt	r1, #0
    1090:	mov	r3, r6
    1094:	mov	r2, r7
    1098:	mvn	r0, #103	; 0x67
    109c:	bl	0 <coda_set_error>
    10a0:	mvn	r0, #0
    10a4:	b	f4c <string_to_parts+0xd8>
    10a8:	cmp	r3, #72	; 0x48
    10ac:	bne	1108 <string_to_parts+0x294>
    10b0:	ldrb	r3, [fp, #1]
    10b4:	cmp	r3, #72	; 0x48
    10b8:	bne	fcc <string_to_parts+0x158>
    10bc:	add	fp, r4, #2
    10c0:	mov	r1, #2
    10c4:	ldr	r3, [sp, #60]	; 0x3c
    10c8:	add	r0, r7, r5
    10cc:	ldrb	r2, [r6, fp]
    10d0:	sub	r2, r2, #42	; 0x2a
    10d4:	clz	r2, r2
    10d8:	lsr	r2, r2, #5
    10dc:	bl	0 <parse_integer>
    10e0:	cmp	r0, #0
    10e4:	beq	12e0 <string_to_parts+0x46c>
    10e8:	mvn	r0, #103	; 0x67
    10ec:	mov	r3, r6
    10f0:	mov	r2, r7
    10f4:	movw	r1, #0
    10f8:	movt	r1, #0
    10fc:	bl	0 <coda_set_error>
    1100:	mvn	r0, #0
    1104:	b	f4c <string_to_parts+0xd8>
    1108:	cmp	r3, #109	; 0x6d
    110c:	bne	11f4 <string_to_parts+0x380>
    1110:	ldrb	r3, [fp, #1]
    1114:	cmp	r3, #109	; 0x6d
    1118:	bne	fcc <string_to_parts+0x158>
    111c:	add	fp, r4, #2
    1120:	mov	r1, #2
    1124:	ldr	r3, [sp, #64]	; 0x40
    1128:	add	r0, r7, r5
    112c:	ldrb	r2, [r6, fp]
    1130:	sub	r2, r2, #42	; 0x2a
    1134:	clz	r2, r2
    1138:	lsr	r2, r2, #5
    113c:	bl	0 <parse_integer>
    1140:	cmp	r0, #0
    1144:	beq	12e0 <string_to_parts+0x46c>
    1148:	mvn	r0, #103	; 0x67
    114c:	mov	r3, r6
    1150:	mov	r2, r7
    1154:	movw	r1, #0
    1158:	movt	r1, #0
    115c:	bl	0 <coda_set_error>
    1160:	mvn	r0, #0
    1164:	b	f4c <string_to_parts+0xd8>
    1168:	add	r4, r4, #1
    116c:	ldrb	r3, [r6, r4]
    1170:	cmp	r3, #39	; 0x27
    1174:	beq	f18 <string_to_parts+0xa4>
    1178:	mov	r8, #0
    117c:	b	eec <string_to_parts+0x78>
    1180:	ldrb	r3, [fp, #1]
    1184:	cmp	r3, #121	; 0x79
    1188:	bne	fcc <string_to_parts+0x158>
    118c:	ldrb	r3, [fp, #2]
    1190:	cmp	r3, #121	; 0x79
    1194:	bne	fcc <string_to_parts+0x158>
    1198:	ldrb	r3, [fp, #3]
    119c:	cmp	r3, #121	; 0x79
    11a0:	bne	fcc <string_to_parts+0x158>
    11a4:	ldrb	r2, [fp, #4]
    11a8:	mov	r1, #4
    11ac:	add	r0, r7, r5
    11b0:	ldr	r3, [sp, #4]
    11b4:	sub	r2, r2, #42	; 0x2a
    11b8:	clz	r2, r2
    11bc:	lsr	r2, r2, #5
    11c0:	bl	0 <parse_integer>
    11c4:	cmp	r0, #0
    11c8:	bne	14c0 <string_to_parts+0x64c>
    11cc:	ldrb	r3, [fp]
    11d0:	add	r5, r5, #4
    11d4:	cmp	r3, #42	; 0x2a
    11d8:	moveq	r3, #5
    11dc:	movne	r3, #4
    11e0:	add	r4, r4, r3
    11e4:	ldrb	r3, [r6, r4]
    11e8:	cmp	r3, #0
    11ec:	bne	f98 <string_to_parts+0x124>
    11f0:	b	107c <string_to_parts+0x208>
    11f4:	cmp	r3, #115	; 0x73
    11f8:	bne	1308 <string_to_parts+0x494>
    11fc:	ldrb	r3, [fp, #1]
    1200:	cmp	r3, #115	; 0x73
    1204:	bne	fcc <string_to_parts+0x158>
    1208:	add	fp, r4, #2
    120c:	mov	r1, #2
    1210:	ldr	r3, [sp, #68]	; 0x44
    1214:	add	r0, r7, r5
    1218:	ldrb	r2, [r6, fp]
    121c:	sub	r2, r2, #42	; 0x2a
    1220:	clz	r2, r2
    1224:	lsr	r2, r2, #5
    1228:	bl	0 <parse_integer>
    122c:	cmp	r0, #0
    1230:	beq	12e0 <string_to_parts+0x46c>
    1234:	mvn	r0, #103	; 0x67
    1238:	mov	r3, r6
    123c:	mov	r2, r7
    1240:	movw	r1, #0
    1244:	movt	r1, #0
    1248:	bl	0 <coda_set_error>
    124c:	mvn	r0, #0
    1250:	b	f4c <string_to_parts+0xd8>
    1254:	ldrb	r3, [fp, #1]
    1258:	cmp	r3, #100	; 0x64
    125c:	bne	fcc <string_to_parts+0x158>
    1260:	add	fp, r4, #2
    1264:	mov	r1, #2
    1268:	ldr	r3, [sp, #56]	; 0x38
    126c:	add	r0, r7, r5
    1270:	ldrb	r2, [r6, fp]
    1274:	sub	r2, r2, #42	; 0x2a
    1278:	clz	r2, r2
    127c:	lsr	r2, r2, #5
    1280:	bl	0 <parse_integer>
    1284:	cmp	r0, #0
    1288:	beq	12e0 <string_to_parts+0x46c>
    128c:	mvn	r0, #103	; 0x67
    1290:	mov	r3, r6
    1294:	mov	r2, r7
    1298:	movw	r1, #0
    129c:	movt	r1, #0
    12a0:	bl	0 <coda_set_error>
    12a4:	mvn	r0, #0
    12a8:	b	f4c <string_to_parts+0xd8>
    12ac:	add	fp, r4, #2
    12b0:	add	r0, r7, r5
    12b4:	ldrb	r2, [r6, fp]
    12b8:	cmp	r2, #77	; 0x4d
    12bc:	beq	1408 <string_to_parts+0x594>
    12c0:	sub	r2, r2, #42	; 0x2a
    12c4:	mov	r3, sl
    12c8:	clz	r2, r2
    12cc:	mov	r1, #2
    12d0:	lsr	r2, r2, #5
    12d4:	bl	0 <parse_integer>
    12d8:	cmp	r0, #0
    12dc:	bne	1468 <string_to_parts+0x5f4>
    12e0:	ldrb	r3, [r6, fp]
    12e4:	add	r5, r5, #2
    12e8:	cmp	r3, #42	; 0x2a
    12ec:	moveq	r3, #3
    12f0:	movne	r3, #2
    12f4:	add	r4, r4, r3
    12f8:	ldrb	r3, [r6, r4]
    12fc:	cmp	r3, #0
    1300:	bne	f98 <string_to_parts+0x124>
    1304:	b	107c <string_to_parts+0x208>
    1308:	cmp	r3, #83	; 0x53
    130c:	bne	13c8 <string_to_parts+0x554>
    1310:	add	r0, r4, #1
    1314:	mov	r2, #0
    1318:	add	r3, r6, r0
    131c:	mov	ip, r3
    1320:	ldrb	r1, [r3], #1
    1324:	add	r4, r0, r2
    1328:	add	r2, r2, #1
    132c:	cmp	r1, #83	; 0x53
    1330:	beq	131c <string_to_parts+0x4a8>
    1334:	str	r8, [r9]
    1338:	cmp	r2, #6
    133c:	add	r0, r7, r5
    1340:	ldrb	r1, [r7, r5]
    1344:	movlt	lr, r2
    1348:	movge	lr, #6
    134c:	sub	r1, r1, #48	; 0x30
    1350:	uxtb	r3, r1
    1354:	cmp	r3, #9
    1358:	bhi	13e8 <string_to_parts+0x574>
    135c:	add	lr, r0, lr
    1360:	mov	r3, #0
    1364:	add	r0, r0, #1
    1368:	b	1380 <string_to_parts+0x50c>
    136c:	ldrb	r1, [r0], #1
    1370:	sub	r1, r1, #48	; 0x30
    1374:	uxtb	fp, r1
    1378:	cmp	fp, #9
    137c:	bhi	13e8 <string_to_parts+0x574>
    1380:	add	r3, r3, r3, lsl #2
    1384:	cmp	lr, r0
    1388:	add	r3, r1, r3, lsl #1
    138c:	str	r3, [r9]
    1390:	bne	136c <string_to_parts+0x4f8>
    1394:	cmp	r2, #5
    1398:	add	r5, r5, r2
    139c:	bgt	13b8 <string_to_parts+0x544>
    13a0:	add	r3, r3, r3, lsl #2
    13a4:	add	r2, r2, #1
    13a8:	cmp	r2, #6
    13ac:	lsl	r3, r3, #1
    13b0:	bne	13a0 <string_to_parts+0x52c>
    13b4:	str	r3, [r9]
    13b8:	ldrb	r3, [ip]
    13bc:	cmp	r3, #0
    13c0:	bne	f98 <string_to_parts+0x124>
    13c4:	b	107c <string_to_parts+0x208>
    13c8:	bic	r2, r3, #32
    13cc:	sub	r2, r2, #65	; 0x41
    13d0:	cmp	r3, #42	; 0x2a
    13d4:	cmpne	r2, #25
    13d8:	bhi	f78 <string_to_parts+0x104>
    13dc:	b	fcc <string_to_parts+0x158>
    13e0:	mov	r8, #1
    13e4:	b	eec <string_to_parts+0x78>
    13e8:	mvn	r0, #103	; 0x67
    13ec:	mov	r3, r6
    13f0:	mov	r2, r7
    13f4:	movw	r1, #0
    13f8:	movt	r1, #0
    13fc:	bl	0 <coda_set_error>
    1400:	mvn	r0, #0
    1404:	b	f4c <string_to_parts+0xd8>
    1408:	bl	bc4 <coda_month_to_integer>
    140c:	cmn	r0, #1
    1410:	str	r0, [sl]
    1414:	beq	1468 <string_to_parts+0x5f4>
    1418:	add	r4, r4, #3
    141c:	add	r5, r5, #3
    1420:	ldrb	r3, [r6, r4]
    1424:	cmp	r3, #0
    1428:	bne	f98 <string_to_parts+0x124>
    142c:	b	107c <string_to_parts+0x208>
    1430:	mvn	r0, #103	; 0x67
    1434:	mov	r3, r6
    1438:	mov	r2, r7
    143c:	movw	r1, #0
    1440:	movt	r1, #0
    1444:	bl	0 <coda_set_error>
    1448:	mvn	r0, #0
    144c:	b	f4c <string_to_parts+0xd8>
    1450:	cmp	r8, #0
    1454:	bne	f34 <string_to_parts+0xc0>
    1458:	ldrb	r0, [r7, r5]
    145c:	cmp	r0, #0
    1460:	beq	f4c <string_to_parts+0xd8>
    1464:	b	1088 <string_to_parts+0x214>
    1468:	mvn	r0, #103	; 0x67
    146c:	mov	r3, r6
    1470:	mov	r2, r7
    1474:	movw	r1, #0
    1478:	movt	r1, #0
    147c:	bl	0 <coda_set_error>
    1480:	mvn	r0, #0
    1484:	b	f4c <string_to_parts+0xd8>
    1488:	mov	r3, r6
    148c:	mov	r2, r7
    1490:	movw	r1, #0
    1494:	movt	r1, #0
    1498:	mvn	r0, #103	; 0x67
    149c:	bl	0 <coda_set_error>
    14a0:	b	10a0 <string_to_parts+0x22c>
    14a4:	mov	r3, r6
    14a8:	mov	r2, r7
    14ac:	movw	r1, #0
    14b0:	movt	r1, #0
    14b4:	mvn	r0, #103	; 0x67
    14b8:	bl	0 <coda_set_error>
    14bc:	b	10a0 <string_to_parts+0x22c>
    14c0:	mvn	r0, #103	; 0x67
    14c4:	mov	r3, r6
    14c8:	mov	r2, r7
    14cc:	movw	r1, #0
    14d0:	movt	r1, #0
    14d4:	bl	0 <coda_set_error>
    14d8:	mvn	r0, #0
    14dc:	b	f4c <string_to_parts+0xd8>

000014e0 <coda_leap_second_table_done>:
    14e0:	strd	r4, [sp, #-16]!
    14e4:	mrc	15, 0, r4, cr13, cr0, {3}
    14e8:	ldr	r5, [pc, #56]	; 1528 <coda_leap_second_table_done+0x48>
    14ec:	str	r6, [sp, #8]
    14f0:	str	lr, [sp, #12]
    14f4:	add	r6, r5, r4
    14f8:	ldr	r0, [r6, #4]
    14fc:	cmp	r0, #0
    1500:	beq	1510 <coda_leap_second_table_done+0x30>
    1504:	bl	0 <free>
    1508:	mov	r3, #0
    150c:	str	r3, [r6, #4]
    1510:	mov	r3, #0
    1514:	ldr	r6, [sp, #8]
    1518:	str	r3, [r5, r4]
    151c:	ldrd	r4, [sp]
    1520:	add	sp, sp, #12
    1524:	pop	{pc}		; (ldr pc, [sp], #4)
    1528:	.word	0x00000000

0000152c <coda_leap_second_table_init>:
    152c:	strd	r4, [sp, #-20]!	; 0xffffffec
    1530:	mrc	15, 0, r4, cr13, cr0, {3}
    1534:	strd	r6, [sp, #8]
    1538:	ldr	r6, [pc, #912]	; 18d0 <coda_leap_second_table_init+0x3a4>
    153c:	str	lr, [sp, #16]
    1540:	vpush	{d8-d10}
    1544:	sub	sp, sp, #188	; 0xbc
    1548:	add	r5, r6, r4
    154c:	ldr	r0, [r5, #4]
    1550:	cmp	r0, #0
    1554:	beq	1564 <coda_leap_second_table_init+0x38>
    1558:	bl	0 <free>
    155c:	mov	r3, #0
    1560:	str	r3, [r5, #4]
    1564:	mov	r5, #0
    1568:	movw	r0, #0
    156c:	movt	r0, #0
    1570:	str	r5, [r6, r4]
    1574:	bl	0 <getenv>
    1578:	subs	r4, r0, #0
    157c:	beq	16d8 <coda_leap_second_table_init+0x1ac>
    1580:	movw	r0, #0
    1584:	movt	r0, #0
    1588:	bl	0 <getenv>
    158c:	movw	r1, #0
    1590:	movt	r1, #0
    1594:	mov	r7, r0
    1598:	bl	0 <fopen>
    159c:	subs	r6, r0, #0
    15a0:	beq	17c4 <coda_leap_second_table_init+0x298>
    15a4:	vldr	d10, [pc, #564]	; 17e0 <coda_leap_second_table_init+0x2b4>
    15a8:	vldr	d9, [pc, #568]	; 17e8 <coda_leap_second_table_init+0x2bc>
    15ac:	vldr	d8, [pc, #572]	; 17f0 <coda_leap_second_table_init+0x2c4>
    15b0:	mov	r4, #0
    15b4:	add	r3, sp, #36	; 0x24
    15b8:	movw	r1, #0
    15bc:	movt	r1, #0
    15c0:	add	r2, sp, #84	; 0x54
    15c4:	mov	r0, r6
    15c8:	str	r4, [sp, #36]	; 0x24
    15cc:	bl	0 <__isoc99_fscanf>
    15d0:	ldr	r3, [sp, #36]	; 0x24
    15d4:	movw	r1, #0
    15d8:	movt	r1, #0
    15dc:	mov	r0, r6
    15e0:	cmp	r3, r4
    15e4:	ble	17b8 <coda_leap_second_table_init+0x28c>
    15e8:	cmp	r3, #80	; 0x50
    15ec:	bne	16a4 <coda_leap_second_table_init+0x178>
    15f0:	strb	r4, [sp, #164]	; 0xa4
    15f4:	bl	0 <__isoc99_fscanf>
    15f8:	add	r3, sp, #36	; 0x24
    15fc:	add	r1, sp, #64	; 0x40
    1600:	add	r0, sp, #56	; 0x38
    1604:	add	ip, sp, #72	; 0x48
    1608:	add	r2, sp, #44	; 0x2c
    160c:	str	r3, [sp, #28]
    1610:	add	r3, sp, #48	; 0x30
    1614:	str	r2, [sp, #8]
    1618:	add	r2, sp, #40	; 0x28
    161c:	str	r3, [sp, #12]
    1620:	add	r3, sp, #33	; 0x21
    1624:	strd	r0, [sp, #16]
    1628:	add	r1, sp, #34	; 0x22
    162c:	add	r0, sp, #84	; 0x54
    1630:	str	r3, [sp]
    1634:	add	r3, sp, #32
    1638:	str	r1, [sp, #4]
    163c:	movw	r1, #0
    1640:	movt	r1, #0
    1644:	str	ip, [sp, #24]
    1648:	bl	0 <__isoc99_sscanf>
    164c:	cmp	r0, #9
    1650:	beq	1660 <coda_leap_second_table_init+0x134>
    1654:	ldr	r3, [sp, #36]	; 0x24
    1658:	cmp	r3, #80	; 0x50
    165c:	bne	16a0 <coda_leap_second_table_init+0x174>
    1660:	vldr	d7, [sp, #48]	; 0x30
    1664:	vcmpe.f64	d7, d10
    1668:	vmrs	APSR_nzcv, fpscr
    166c:	ble	15b0 <coda_leap_second_table_init+0x84>
    1670:	add	r3, r5, #10
    1674:	vsub.f64	d7, d7, d9
    1678:	add	r5, r5, #1
    167c:	vmov	s13, r3
    1680:	vcvt.f64.s32	d0, s13
    1684:	vmla.f64	d0, d7, d8
    1688:	bl	4c0 <register_leap_second>
    168c:	cmp	r0, #0
    1690:	beq	15b0 <coda_leap_second_table_init+0x84>
    1694:	mov	r0, r6
    1698:	bl	0 <fclose>
    169c:	b	16bc <coda_leap_second_table_init+0x190>
    16a0:	mov	r0, r6
    16a4:	bl	0 <fclose>
    16a8:	movw	r1, #0
    16ac:	movt	r1, #0
    16b0:	mov	r2, r7
    16b4:	mvn	r0, #21
    16b8:	bl	0 <coda_set_error>
    16bc:	mvn	r0, #0
    16c0:	add	sp, sp, #188	; 0xbc
    16c4:	vpop	{d8-d10}
    16c8:	ldrd	r4, [sp]
    16cc:	ldrd	r6, [sp, #8]
    16d0:	add	sp, sp, #16
    16d4:	pop	{pc}		; (ldr pc, [sp], #4)
    16d8:	vldr	d0, [pc, #280]	; 17f8 <coda_leap_second_table_init+0x2cc>
    16dc:	bl	4c0 <register_leap_second>
    16e0:	vldr	d0, [pc, #280]	; 1800 <coda_leap_second_table_init+0x2d4>
    16e4:	bl	4c0 <register_leap_second>
    16e8:	vldr	d0, [pc, #280]	; 1808 <coda_leap_second_table_init+0x2dc>
    16ec:	bl	4c0 <register_leap_second>
    16f0:	vldr	d0, [pc, #280]	; 1810 <coda_leap_second_table_init+0x2e4>
    16f4:	bl	4c0 <register_leap_second>
    16f8:	vldr	d0, [pc, #280]	; 1818 <coda_leap_second_table_init+0x2ec>
    16fc:	bl	4c0 <register_leap_second>
    1700:	vldr	d0, [pc, #280]	; 1820 <coda_leap_second_table_init+0x2f4>
    1704:	bl	4c0 <register_leap_second>
    1708:	vldr	d0, [pc, #280]	; 1828 <coda_leap_second_table_init+0x2fc>
    170c:	bl	4c0 <register_leap_second>
    1710:	vldr	d0, [pc, #280]	; 1830 <coda_leap_second_table_init+0x304>
    1714:	bl	4c0 <register_leap_second>
    1718:	vldr	d0, [pc, #280]	; 1838 <coda_leap_second_table_init+0x30c>
    171c:	bl	4c0 <register_leap_second>
    1720:	vldr	d0, [pc, #280]	; 1840 <coda_leap_second_table_init+0x314>
    1724:	bl	4c0 <register_leap_second>
    1728:	vldr	d0, [pc, #280]	; 1848 <coda_leap_second_table_init+0x31c>
    172c:	bl	4c0 <register_leap_second>
    1730:	vldr	d0, [pc, #280]	; 1850 <coda_leap_second_table_init+0x324>
    1734:	bl	4c0 <register_leap_second>
    1738:	vldr	d0, [pc, #280]	; 1858 <coda_leap_second_table_init+0x32c>
    173c:	bl	4c0 <register_leap_second>
    1740:	vldr	d0, [pc, #280]	; 1860 <coda_leap_second_table_init+0x334>
    1744:	bl	4c0 <register_leap_second>
    1748:	vldr	d0, [pc, #280]	; 1868 <coda_leap_second_table_init+0x33c>
    174c:	bl	4c0 <register_leap_second>
    1750:	vldr	d0, [pc, #280]	; 1870 <coda_leap_second_table_init+0x344>
    1754:	bl	4c0 <register_leap_second>
    1758:	vldr	d0, [pc, #280]	; 1878 <coda_leap_second_table_init+0x34c>
    175c:	bl	4c0 <register_leap_second>
    1760:	vldr	d0, [pc, #280]	; 1880 <coda_leap_second_table_init+0x354>
    1764:	bl	4c0 <register_leap_second>
    1768:	vldr	d0, [pc, #280]	; 1888 <coda_leap_second_table_init+0x35c>
    176c:	bl	4c0 <register_leap_second>
    1770:	vldr	d0, [pc, #280]	; 1890 <coda_leap_second_table_init+0x364>
    1774:	bl	4c0 <register_leap_second>
    1778:	vldr	d0, [pc, #280]	; 1898 <coda_leap_second_table_init+0x36c>
    177c:	bl	4c0 <register_leap_second>
    1780:	vldr	d0, [pc, #280]	; 18a0 <coda_leap_second_table_init+0x374>
    1784:	bl	4c0 <register_leap_second>
    1788:	vldr	d0, [pc, #280]	; 18a8 <coda_leap_second_table_init+0x37c>
    178c:	bl	4c0 <register_leap_second>
    1790:	vldr	d0, [pc, #280]	; 18b0 <coda_leap_second_table_init+0x384>
    1794:	bl	4c0 <register_leap_second>
    1798:	vldr	d0, [pc, #280]	; 18b8 <coda_leap_second_table_init+0x38c>
    179c:	bl	4c0 <register_leap_second>
    17a0:	vldr	d0, [pc, #280]	; 18c0 <coda_leap_second_table_init+0x394>
    17a4:	bl	4c0 <register_leap_second>
    17a8:	vldr	d0, [pc, #280]	; 18c8 <coda_leap_second_table_init+0x39c>
    17ac:	bl	4c0 <register_leap_second>
    17b0:	mov	r0, r4
    17b4:	b	16c0 <coda_leap_second_table_init+0x194>
    17b8:	bl	0 <fclose>
    17bc:	mov	r0, r4
    17c0:	b	16c0 <coda_leap_second_table_init+0x194>
    17c4:	mvn	r0, #20
    17c8:	mov	r2, r7
    17cc:	movw	r1, #0
    17d0:	movt	r1, #0
    17d4:	bl	0 <coda_set_error>
    17d8:	mvn	r0, #0
    17dc:	b	16c0 <coda_leap_second_table_init+0x194>
    17e0:	.word	0xc0000000
    17e4:	.word	0x4142a032
    17e8:	.word	0x40000000
    17ec:	.word	0x4142b42c
    17f0:	.word	0x00000000
    17f4:	.word	0x40f51800
    17f8:	.word	0xbb000000
    17fc:	.word	0xc1c9dd75
    1800:	.word	0xba800000
    1804:	.word	0xc1c9642b
    1808:	.word	0xfa000000
    180c:	.word	0xc1c87391
    1810:	.word	0x39800000
    1814:	.word	0xc1c782f8
    1818:	.word	0x79000000
    181c:	.word	0xc1c6925e
    1820:	.word	0xf8800000
    1824:	.word	0xc1c5a11b
    1828:	.word	0x38000000
    182c:	.word	0xc1c4b082
    1830:	.word	0x77800000
    1834:	.word	0xc1c3bfe8
    1838:	.word	0xb7000000
    183c:	.word	0xc1c2cf4e
    1840:	.word	0x76800000
    1844:	.word	0xc1c166bc
    1848:	.word	0xb6000000
    184c:	.word	0xc1c07622
    1850:	.word	0xeb000000
    1854:	.word	0xc1bf0b11
    1858:	.word	0x6a000000
    185c:	.word	0xc1bb4759
    1860:	.word	0x69000000
    1864:	.word	0xc1b6925e
    1868:	.word	0xe8000000
    186c:	.word	0xc1b2cea5
    1870:	.word	0x67000000
    1874:	.word	0xc1b0ed72
    1878:	.word	0xcc000000
    187c:	.word	0xc1ac389b
    1880:	.word	0xca000000
    1884:	.word	0xc1a87634
    1888:	.word	0xc8000000
    188c:	.word	0xc1a4b3cd
    1890:	.word	0x8c000000
    1894:	.word	0xc19e187d
    1898:	.word	0x88000000
    189c:	.word	0xc192d3eb
    18a0:	.word	0x10000000
    18a4:	.word	0xc17e1336
    18a8:	.word	0x40000000
    18ac:	.word	0x41a693b0
    18b0:	.word	0x21000000
    18b4:	.word	0x41b0eec4
    18b8:	.word	0xa2000000
    18bc:	.word	0x41b7824f
    18c0:	.word	0x23000000
    18c4:	.word	0x41bd25ea
    18c8:	.word	0x24000000
    18cc:	.word	0x41bffb03
    18d0:	.word	0x00000000

000018d4 <coda_time_double_to_parts>:
    18d4:	cmp	r1, #0
    18d8:	cmpne	r0, #0
    18dc:	strd	r4, [sp, #-36]!	; 0xffffffdc
    18e0:	strd	r6, [sp, #8]
    18e4:	strd	r8, [sp, #16]
    18e8:	strd	sl, [sp, #24]
    18ec:	str	lr, [sp, #32]
    18f0:	vpush	{d8-d11}
    18f4:	sub	sp, sp, #20
    18f8:	beq	1a68 <coda_time_double_to_parts+0x194>
    18fc:	cmp	r3, #0
    1900:	cmpne	r2, #0
    1904:	mov	r6, r2
    1908:	mov	r5, r3
    190c:	beq	1a68 <coda_time_double_to_parts+0x194>
    1910:	ldrd	r2, [sp, #88]	; 0x58
    1914:	cmp	r2, #0
    1918:	ldr	r2, [sp, #96]	; 0x60
    191c:	clz	r3, r3
    1920:	lsr	r3, r3, #5
    1924:	moveq	r3, #1
    1928:	cmp	r2, #0
    192c:	moveq	r3, #1
    1930:	cmp	r3, #0
    1934:	bne	1a68 <coda_time_double_to_parts+0x194>
    1938:	mov	fp, r0
    193c:	mov	sl, r1
    1940:	vmov.f64	d8, d0
    1944:	bl	0 <coda_isNaN>
    1948:	cmp	r0, #0
    194c:	bne	1a8c <coda_time_double_to_parts+0x1b8>
    1950:	vmov.f64	d0, d8
    1954:	bl	0 <coda_isInf>
    1958:	cmp	r0, #0
    195c:	bne	1aa4 <coda_time_double_to_parts+0x1d0>
    1960:	vldr	d0, [pc, #376]	; 1ae0 <coda_time_double_to_parts+0x20c>
    1964:	vldr	d11, [pc, #380]	; 1ae8 <coda_time_double_to_parts+0x214>
    1968:	vadd.f64	d8, d8, d0
    196c:	vmov.f64	d0, d8
    1970:	bl	0 <floor>
    1974:	vmov.f64	d10, d0
    1978:	vdiv.f64	d0, d10, d11
    197c:	bl	0 <floor>
    1980:	vcvt.s32.f64	s18, d0
    1984:	add	r3, sp, #12
    1988:	add	r2, sp, #8
    198c:	add	r1, sp, #4
    1990:	vmov	r0, s18
    1994:	bl	878 <mjd2000_to_dmy>
    1998:	subs	r7, r0, #0
    199c:	bne	1abc <coda_time_double_to_parts+0x1e8>
    19a0:	vcvt.f64.s32	d9, s18
    19a4:	vmov.f64	d7, d10
    19a8:	movw	r1, #20863	; 0x517f
    19ac:	movt	r1, #1
    19b0:	vmls.f64	d7, d9, d11
    19b4:	vcvt.s32.f64	s15, d7
    19b8:	vmov	r2, s15
    19bc:	cmp	r2, r1
    19c0:	bhi	1ac4 <coda_time_double_to_parts+0x1f0>
    19c4:	movw	r4, #46021	; 0xb3c5
    19c8:	movt	r4, #37282	; 0x91a2
    19cc:	vsub.f64	d8, d8, d10
    19d0:	vldr	d0, [pc, #280]	; 1af0 <coda_time_double_to_parts+0x21c>
    19d4:	asr	r9, r2, #31
    19d8:	mov	ip, #3600	; 0xe10
    19dc:	smull	r3, r4, r4, r2
    19e0:	add	r4, r4, r2
    19e4:	asr	r4, r4, #11
    19e8:	vmul.f64	d0, d8, d0
    19ec:	sub	r8, r4, r9
    19f0:	sub	r4, r4, r9
    19f4:	mls	r8, ip, r8, r2
    19f8:	bl	0 <floor>
    19fc:	movw	r3, #34953	; 0x8889
    1a00:	movt	r3, #34952	; 0x8888
    1a04:	ldmib	sp, {r0, ip, lr}
    1a08:	vcvt.s32.f64	s0, d0
    1a0c:	umull	r2, r3, r3, r8
    1a10:	ldr	r2, [sp, #88]	; 0x58
    1a14:	lsr	r3, r3, #5
    1a18:	str	lr, [fp]
    1a1c:	str	ip, [sl]
    1a20:	rsb	lr, r3, r3, lsl #4
    1a24:	str	r0, [r6]
    1a28:	str	r4, [r5]
    1a2c:	str	r3, [r2]
    1a30:	sub	r1, r8, lr, lsl #2
    1a34:	ldr	r3, [sp, #92]	; 0x5c
    1a38:	str	r1, [r3]
    1a3c:	ldr	r3, [sp, #96]	; 0x60
    1a40:	vstr	s0, [r3]
    1a44:	mov	r0, r7
    1a48:	add	sp, sp, #20
    1a4c:	vpop	{d8-d11}
    1a50:	ldrd	r4, [sp]
    1a54:	ldrd	r6, [sp, #8]
    1a58:	ldrd	r8, [sp, #16]
    1a5c:	ldrd	sl, [sp, #24]
    1a60:	add	sp, sp, #32
    1a64:	pop	{pc}		; (ldr pc, [sp], #4)
    1a68:	movw	r2, #0
    1a6c:	movt	r2, #0
    1a70:	movw	r1, #0
    1a74:	movt	r1, #0
    1a78:	movw	r3, #787	; 0x313
    1a7c:	mvn	r0, #99	; 0x63
    1a80:	bl	0 <coda_set_error>
    1a84:	mvn	r7, #0
    1a88:	b	1a44 <coda_time_double_to_parts+0x170>
    1a8c:	movw	r1, #0
    1a90:	movt	r1, #0
    1a94:	mvn	r0, #103	; 0x67
    1a98:	mvn	r7, #0
    1a9c:	bl	0 <coda_set_error>
    1aa0:	b	1a44 <coda_time_double_to_parts+0x170>
    1aa4:	movw	r1, #0
    1aa8:	movt	r1, #0
    1aac:	mvn	r0, #103	; 0x67
    1ab0:	mvn	r7, #0
    1ab4:	bl	0 <coda_set_error>
    1ab8:	b	1a44 <coda_time_double_to_parts+0x170>
    1abc:	mvn	r7, #0
    1ac0:	b	1a44 <coda_time_double_to_parts+0x170>
    1ac4:	movw	r1, #0
    1ac8:	movt	r1, #0
    1acc:	mvn	r0, #103	; 0x67
    1ad0:	mvn	r7, #0
    1ad4:	bl	0 <coda_set_error>
    1ad8:	b	1a44 <coda_time_double_to_parts+0x170>
    1adc:	nop	{0}
    1ae0:	.word	0xa0b5ed8d
    1ae4:	.word	0x3ea0c6f7
    1ae8:	.word	0x00000000
    1aec:	.word	0x40f51800
    1af0:	.word	0x00000000
    1af4:	.word	0x412e8480

00001af8 <coda_time_double_to_parts_utc>:
    1af8:	cmp	r1, #0
    1afc:	cmpne	r0, #0
    1b00:	strd	r4, [sp, #-36]!	; 0xffffffdc
    1b04:	strd	r6, [sp, #8]
    1b08:	strd	r8, [sp, #16]
    1b0c:	strd	sl, [sp, #24]
    1b10:	str	lr, [sp, #32]
    1b14:	vpush	{d8-d11}
    1b18:	sub	sp, sp, #28
    1b1c:	beq	1d18 <coda_time_double_to_parts_utc+0x220>
    1b20:	cmp	r3, #0
    1b24:	cmpne	r2, #0
    1b28:	mov	r5, r2
    1b2c:	mov	r4, r3
    1b30:	beq	1d18 <coda_time_double_to_parts_utc+0x220>
    1b34:	ldrd	r2, [sp, #96]	; 0x60
    1b38:	cmp	r2, #0
    1b3c:	ldr	r2, [sp, #104]	; 0x68
    1b40:	clz	r3, r3
    1b44:	lsr	r3, r3, #5
    1b48:	moveq	r3, #1
    1b4c:	cmp	r2, #0
    1b50:	moveq	r3, #1
    1b54:	cmp	r3, #0
    1b58:	bne	1d18 <coda_time_double_to_parts_utc+0x220>
    1b5c:	mov	fp, r0
    1b60:	mov	sl, r1
    1b64:	vmov.f64	d8, d0
    1b68:	bl	0 <coda_isNaN>
    1b6c:	cmp	r0, #0
    1b70:	bne	1d3c <coda_time_double_to_parts_utc+0x244>
    1b74:	vmov.f64	d0, d8
    1b78:	bl	0 <coda_isInf>
    1b7c:	subs	r9, r0, #0
    1b80:	bne	1d74 <coda_time_double_to_parts_utc+0x27c>
    1b84:	vldr	d9, [pc, #540]	; 1da8 <coda_time_double_to_parts_utc+0x2b0>
    1b88:	vadd.f64	d9, d8, d9
    1b8c:	vmov.f64	d0, d9
    1b90:	bl	0 <floor>
    1b94:	ldr	r3, [pc, #556]	; 1dc8 <coda_time_double_to_parts_utc+0x2d0>
    1b98:	mrc	15, 0, r2, cr13, cr0, {3}
    1b9c:	add	r1, r2, r3
    1ba0:	ldr	r1, [r1, #4]
    1ba4:	cmp	r1, #0
    1ba8:	beq	1d8c <coda_time_double_to_parts_utc+0x294>
    1bac:	ldr	r2, [r2, r3]
    1bb0:	cmp	r2, #0
    1bb4:	movgt	r3, r1
    1bb8:	ble	1d8c <coda_time_double_to_parts_utc+0x294>
    1bbc:	vldmia	r3!, {d6}
    1bc0:	vcmpe.f64	d6, d0
    1bc4:	vmrs	APSR_nzcv, fpscr
    1bc8:	bpl	1be0 <coda_time_double_to_parts_utc+0xe8>
    1bcc:	add	r9, r9, #1
    1bd0:	cmp	r2, r9
    1bd4:	bne	1bbc <coda_time_double_to_parts_utc+0xc4>
    1bd8:	add	r1, r1, r9, lsl #3
    1bdc:	vldr	d6, [r1]
    1be0:	vsub.f64	d6, d0, d6
    1be4:	add	r0, r9, #10
    1be8:	vldr	d7, [pc, #448]	; 1db0 <coda_time_double_to_parts_utc+0x2b8>
    1bec:	vldr	d11, [pc, #452]	; 1db8 <coda_time_double_to_parts_utc+0x2c0>
    1bf0:	vabs.f64	d6, d6
    1bf4:	vcmpe.f64	d6, d7
    1bf8:	vmrs	APSR_nzcv, fpscr
    1bfc:	movmi	r9, #1
    1c00:	movpl	r9, #0
    1c04:	add	r0, r0, r9
    1c08:	vmov	s15, r0
    1c0c:	vcvt.f64.s32	d7, s15
    1c10:	vsub.f64	d8, d0, d7
    1c14:	vsub.f64	d9, d9, d7
    1c18:	vdiv.f64	d0, d8, d11
    1c1c:	bl	0 <floor>
    1c20:	vcvt.s32.f64	s20, d0
    1c24:	add	r3, sp, #20
    1c28:	add	r2, sp, #16
    1c2c:	add	r1, sp, #12
    1c30:	vmov	r0, s20
    1c34:	bl	878 <mjd2000_to_dmy>
    1c38:	subs	r6, r0, #0
    1c3c:	bne	1d54 <coda_time_double_to_parts_utc+0x25c>
    1c40:	vcvt.f64.s32	d10, s20
    1c44:	vmov.f64	d7, d8
    1c48:	movw	r3, #20863	; 0x517f
    1c4c:	movt	r3, #1
    1c50:	vmls.f64	d7, d10, d11
    1c54:	vcvt.s32.f64	s15, d7
    1c58:	vmov	r2, s15
    1c5c:	cmp	r2, r3
    1c60:	bhi	1d5c <coda_time_double_to_parts_utc+0x264>
    1c64:	movw	r3, #46021	; 0xb3c5
    1c68:	movt	r3, #37282	; 0x91a2
    1c6c:	vsub.f64	d9, d9, d8
    1c70:	vldr	d0, [pc, #328]	; 1dc0 <coda_time_double_to_parts_utc+0x2c8>
    1c74:	asr	r8, r2, #31
    1c78:	mov	lr, #3600	; 0xe10
    1c7c:	smull	r1, r3, r3, r2
    1c80:	add	r3, r3, r2
    1c84:	asr	r3, r3, #11
    1c88:	vmul.f64	d0, d9, d0
    1c8c:	sub	r7, r3, r8
    1c90:	str	r3, [sp, #4]
    1c94:	mls	r7, lr, r7, r2
    1c98:	bl	0 <floor>
    1c9c:	movw	ip, #34953	; 0x8889
    1ca0:	movt	ip, #34952	; 0x8888
    1ca4:	ldr	r3, [sp, #4]
    1ca8:	vcvt.s32.f64	s0, d0
    1cac:	umull	r2, r0, ip, r7
    1cb0:	add	r2, sp, #12
    1cb4:	ldm	r2, {r2, ip, lr}
    1cb8:	sub	r3, r3, r8
    1cbc:	lsr	r0, r0, #5
    1cc0:	str	lr, [fp]
    1cc4:	rsb	lr, r0, r0, lsl #4
    1cc8:	str	ip, [sl]
    1ccc:	str	r2, [r5]
    1cd0:	sub	r1, r7, lr, lsl #2
    1cd4:	str	r3, [r4]
    1cd8:	ldr	r3, [sp, #96]	; 0x60
    1cdc:	add	r9, r1, r9
    1ce0:	str	r0, [r3]
    1ce4:	ldr	r3, [sp, #100]	; 0x64
    1ce8:	str	r9, [r3]
    1cec:	ldr	r3, [sp, #104]	; 0x68
    1cf0:	vstr	s0, [r3]
    1cf4:	mov	r0, r6
    1cf8:	add	sp, sp, #28
    1cfc:	vpop	{d8-d11}
    1d00:	ldrd	r4, [sp]
    1d04:	ldrd	r6, [sp, #8]
    1d08:	ldrd	r8, [sp, #16]
    1d0c:	ldrd	sl, [sp, #24]
    1d10:	add	sp, sp, #32
    1d14:	pop	{pc}		; (ldr pc, [sp], #4)
    1d18:	movw	r2, #0
    1d1c:	movt	r2, #0
    1d20:	movw	r1, #0
    1d24:	movt	r1, #0
    1d28:	movw	r3, #874	; 0x36a
    1d2c:	mvn	r0, #99	; 0x63
    1d30:	bl	0 <coda_set_error>
    1d34:	mvn	r6, #0
    1d38:	b	1cf4 <coda_time_double_to_parts_utc+0x1fc>
    1d3c:	movw	r1, #0
    1d40:	movt	r1, #0
    1d44:	mvn	r0, #103	; 0x67
    1d48:	mvn	r6, #0
    1d4c:	bl	0 <coda_set_error>
    1d50:	b	1cf4 <coda_time_double_to_parts_utc+0x1fc>
    1d54:	mvn	r6, #0
    1d58:	b	1cf4 <coda_time_double_to_parts_utc+0x1fc>
    1d5c:	movw	r1, #0
    1d60:	movt	r1, #0
    1d64:	mvn	r0, #103	; 0x67
    1d68:	mvn	r6, #0
    1d6c:	bl	0 <coda_set_error>
    1d70:	b	1cf4 <coda_time_double_to_parts_utc+0x1fc>
    1d74:	movw	r1, #0
    1d78:	movt	r1, #0
    1d7c:	mvn	r0, #103	; 0x67
    1d80:	mvn	r6, #0
    1d84:	bl	0 <coda_set_error>
    1d88:	b	1cf4 <coda_time_double_to_parts_utc+0x1fc>
    1d8c:	movw	r1, #0
    1d90:	movt	r1, #0
    1d94:	ldr	r3, [pc, #48]	; 1dcc <coda_time_double_to_parts_utc+0x2d4>
    1d98:	movw	r0, #0
    1d9c:	movt	r0, #0
    1da0:	movw	r2, #894	; 0x37e
    1da4:	bl	0 <__assert_fail>
    1da8:	.word	0xa0b5ed8d
    1dac:	.word	0x3ea0c6f7
    1db0:	.word	0x9999999a
    1db4:	.word	0x3fb99999
    1db8:	.word	0x00000000
    1dbc:	.word	0x40f51800
    1dc0:	.word	0x00000000
    1dc4:	.word	0x412e8480
    1dc8:	.word	0x00000000
    1dcc:	.word	0x0000008c

00001dd0 <coda_time_parts_to_double>:
    1dd0:	strd	r4, [sp, #-12]!
    1dd4:	str	lr, [sp, #8]
    1dd8:	sub	sp, sp, #28
    1ddc:	ldr	r4, [sp, #52]	; 0x34
    1de0:	cmp	r4, #0
    1de4:	beq	1e58 <coda_time_parts_to_double+0x88>
    1de8:	mov	ip, r2
    1dec:	mov	r5, r3
    1df0:	mov	r2, r0
    1df4:	add	r3, sp, #12
    1df8:	mov	r0, ip
    1dfc:	bl	214 <dmy_to_mjd2000>
    1e00:	cmp	r0, #0
    1e04:	bne	1e50 <coda_time_parts_to_double+0x80>
    1e08:	add	r1, sp, #16
    1e0c:	mov	r0, r5
    1e10:	ldrd	r2, [sp, #44]	; 0x2c
    1e14:	str	r1, [sp]
    1e18:	ldr	r1, [sp, #40]	; 0x28
    1e1c:	bl	5d0 <hms_to_daytime>
    1e20:	cmp	r0, #0
    1e24:	bne	1e50 <coda_time_parts_to_double+0x80>
    1e28:	vldr	s13, [sp, #12]
    1e2c:	vldr	d5, [pc, #76]	; 1e80 <coda_time_parts_to_double+0xb0>
    1e30:	vldr	d7, [sp, #16]
    1e34:	vcvt.f64.s32	d6, s13
    1e38:	vmla.f64	d7, d6, d5
    1e3c:	vstr	d7, [r4]
    1e40:	add	sp, sp, #28
    1e44:	ldrd	r4, [sp]
    1e48:	add	sp, sp, #8
    1e4c:	pop	{pc}		; (ldr pc, [sp], #4)
    1e50:	mvn	r0, #0
    1e54:	b	1e40 <coda_time_parts_to_double+0x70>
    1e58:	mvn	r0, #99	; 0x63
    1e5c:	movw	r2, #0
    1e60:	movt	r2, #0
    1e64:	movw	r1, #0
    1e68:	movt	r1, #0
    1e6c:	movw	r3, #954	; 0x3ba
    1e70:	bl	0 <coda_set_error>
    1e74:	mvn	r0, #0
    1e78:	b	1e40 <coda_time_parts_to_double+0x70>
    1e7c:	nop	{0}
    1e80:	.word	0x00000000
    1e84:	.word	0x40f51800

00001e88 <coda_time_parts_to_double_utc>:
    1e88:	strd	r4, [sp, #-12]!
    1e8c:	str	lr, [sp, #8]
    1e90:	sub	sp, sp, #28
    1e94:	ldr	r4, [sp, #52]	; 0x34
    1e98:	cmp	r4, #0
    1e9c:	beq	1f64 <coda_time_parts_to_double_utc+0xdc>
    1ea0:	mov	ip, r2
    1ea4:	mov	r5, r3
    1ea8:	mov	r2, r0
    1eac:	add	r3, sp, #12
    1eb0:	mov	r0, ip
    1eb4:	bl	214 <dmy_to_mjd2000>
    1eb8:	cmp	r0, #0
    1ebc:	bne	1f5c <coda_time_parts_to_double_utc+0xd4>
    1ec0:	add	r1, sp, #16
    1ec4:	mov	r0, r5
    1ec8:	ldrd	r2, [sp, #44]	; 0x2c
    1ecc:	str	r1, [sp]
    1ed0:	ldr	r1, [sp, #40]	; 0x28
    1ed4:	bl	5d0 <hms_to_daytime>
    1ed8:	cmp	r0, #0
    1edc:	bne	1f5c <coda_time_parts_to_double_utc+0xd4>
    1ee0:	ldr	r3, [pc, #216]	; 1fc0 <coda_time_parts_to_double_utc+0x138>
    1ee4:	mrc	15, 0, r1, cr13, cr0, {3}
    1ee8:	vldr	s13, [sp, #12]
    1eec:	vldr	d5, [pc, #180]	; 1fa8 <coda_time_parts_to_double_utc+0x120>
    1ef0:	add	r2, r1, r3
    1ef4:	vldr	d7, [pc, #180]	; 1fb0 <coda_time_parts_to_double_utc+0x128>
    1ef8:	vcvt.f64.s32	d6, s13
    1efc:	ldr	r2, [r2, #4]
    1f00:	cmp	r2, #0
    1f04:	vmla.f64	d7, d6, d5
    1f08:	beq	1f88 <coda_time_parts_to_double_utc+0x100>
    1f0c:	ldr	r1, [r1, r3]
    1f10:	cmp	r1, #0
    1f14:	ble	1f88 <coda_time_parts_to_double_utc+0x100>
    1f18:	vldr	d5, [pc, #152]	; 1fb8 <coda_time_parts_to_double_utc+0x130>
    1f1c:	mov	r3, r0
    1f20:	vldmia	r2!, {d6}
    1f24:	vcmpe.f64	d6, d7
    1f28:	vmrs	APSR_nzcv, fpscr
    1f2c:	bhi	1f40 <coda_time_parts_to_double_utc+0xb8>
    1f30:	add	r3, r3, #1
    1f34:	vadd.f64	d7, d7, d5
    1f38:	cmp	r1, r3
    1f3c:	bne	1f20 <coda_time_parts_to_double_utc+0x98>
    1f40:	vldr	d6, [sp, #16]
    1f44:	vadd.f64	d7, d6, d7
    1f48:	vstr	d7, [r4]
    1f4c:	add	sp, sp, #28
    1f50:	ldrd	r4, [sp]
    1f54:	add	sp, sp, #8
    1f58:	pop	{pc}		; (ldr pc, [sp], #4)
    1f5c:	mvn	r0, #0
    1f60:	b	1f4c <coda_time_parts_to_double_utc+0xc4>
    1f64:	mvn	r0, #99	; 0x63
    1f68:	movw	r2, #0
    1f6c:	movt	r2, #0
    1f70:	movw	r1, #0
    1f74:	movt	r1, #0
    1f78:	mov	r3, #1008	; 0x3f0
    1f7c:	bl	0 <coda_set_error>
    1f80:	mvn	r0, #0
    1f84:	b	1f4c <coda_time_parts_to_double_utc+0xc4>
    1f88:	movw	r1, #0
    1f8c:	movt	r1, #0
    1f90:	ldr	r3, [pc, #44]	; 1fc4 <coda_time_parts_to_double_utc+0x13c>
    1f94:	movw	r0, #0
    1f98:	movt	r0, #0
    1f9c:	mov	r2, #1024	; 0x400
    1fa0:	bl	0 <__assert_fail>
    1fa4:	nop	{0}
    1fa8:	.word	0x00000000
    1fac:	.word	0x40f51800
    1fb0:	.word	0x00000000
    1fb4:	.word	0x40240000
    1fb8:	.word	0x00000000
    1fbc:	.word	0x3ff00000
    1fc0:	.word	0x00000000
    1fc4:	.word	0x000000ac

00001fc8 <coda_time_parts_to_string>:
    1fc8:	strd	r4, [sp, #-36]!	; 0xffffffdc
    1fcc:	strd	r6, [sp, #8]
    1fd0:	strd	r8, [sp, #16]
    1fd4:	strd	sl, [sp, #24]
    1fd8:	str	lr, [sp, #32]
    1fdc:	sub	sp, sp, #84	; 0x54
    1fe0:	movw	lr, #0
    1fe4:	movt	lr, #0
    1fe8:	ldr	r5, [sp, #132]	; 0x84
    1fec:	stm	sp, {r1, r2, r3}
    1ff0:	str	r0, [sp, #20]
    1ff4:	ldrd	r0, [lr, #204]	; 0xcc
    1ff8:	cmp	r5, #0
    1ffc:	ldrd	r6, [lr, #212]	; 0xd4
    2000:	ldrd	r2, [lr, #220]	; 0xdc
    2004:	strd	r0, [sp, #32]
    2008:	ldrd	r0, [lr, #244]	; 0xf4
    200c:	strd	r6, [sp, #40]	; 0x28
    2010:	ldrd	r6, [lr, #228]	; 0xe4
    2014:	strd	r2, [sp, #48]	; 0x30
    2018:	ldrd	r2, [lr, #236]	; 0xec
    201c:	ldr	r8, [sp, #136]	; 0x88
    2020:	strd	r6, [sp, #56]	; 0x38
    2024:	strd	r0, [sp, #72]	; 0x48
    2028:	strd	r2, [sp, #64]	; 0x40
    202c:	beq	24f4 <coda_time_parts_to_string+0x52c>
    2030:	cmp	r8, #0
    2034:	beq	2530 <coda_time_parts_to_string+0x568>
    2038:	movw	r3, #16959	; 0x423f
    203c:	movt	r3, #15
    2040:	mov	r6, #0
    2044:	movw	fp, #52429	; 0xcccd
    2048:	movt	fp, #52428	; 0xcccc
    204c:	str	r3, [sp, #12]
    2050:	movw	r2, #0
    2054:	movt	r2, #0
    2058:	ldrb	r3, [r5]
    205c:	mov	r4, r6
    2060:	mov	sl, r6
    2064:	str	r2, [sp, #16]
    2068:	cmp	r3, #0
    206c:	beq	217c <coda_time_parts_to_string+0x1b4>
    2070:	cmp	sl, #0
    2074:	beq	2114 <coda_time_parts_to_string+0x14c>
    2078:	cmp	r3, #39	; 0x27
    207c:	beq	21cc <coda_time_parts_to_string+0x204>
    2080:	ldrb	r3, [r5, r4]
    2084:	add	r4, r4, #1
    2088:	strb	r3, [r8, r6]
    208c:	add	r6, r6, #1
    2090:	ldrb	r3, [r5, r4]
    2094:	cmp	r3, #0
    2098:	bne	2078 <coda_time_parts_to_string+0xb0>
    209c:	mvn	r0, #102	; 0x66
    20a0:	mov	r2, r5
    20a4:	movw	r1, #0
    20a8:	movt	r1, #0
    20ac:	bl	0 <coda_set_error>
    20b0:	mvn	r0, #0
    20b4:	b	2160 <coda_time_parts_to_string+0x198>
    20b8:	cmp	r3, #100	; 0x64
    20bc:	beq	2274 <coda_time_parts_to_string+0x2ac>
    20c0:	cmp	r3, #68	; 0x44
    20c4:	beq	22a8 <coda_time_parts_to_string+0x2e0>
    20c8:	cmp	r3, #72	; 0x48
    20cc:	bne	218c <coda_time_parts_to_string+0x1c4>
    20d0:	add	r3, r5, r4
    20d4:	ldrb	r3, [r3, #1]
    20d8:	cmp	r3, #72	; 0x48
    20dc:	bne	2148 <coda_time_parts_to_string+0x180>
    20e0:	ldr	r3, [sp, #8]
    20e4:	cmp	r3, #23
    20e8:	bhi	24ac <coda_time_parts_to_string+0x4e4>
    20ec:	ldr	r2, [sp, #8]
    20f0:	movw	r1, #0
    20f4:	movt	r1, #0
    20f8:	add	r4, r4, #2
    20fc:	add	r0, r8, r6
    2100:	bl	0 <sprintf>
    2104:	ldrb	r3, [r5, r4]
    2108:	add	r6, r6, #2
    210c:	cmp	r3, #0
    2110:	beq	2184 <coda_time_parts_to_string+0x1bc>
    2114:	cmp	r3, #124	; 0x7c
    2118:	beq	2184 <coda_time_parts_to_string+0x1bc>
    211c:	cmp	r3, #39	; 0x27
    2120:	beq	21e4 <coda_time_parts_to_string+0x21c>
    2124:	ldrb	r3, [r5, r4]
    2128:	cmp	r3, #121	; 0x79
    212c:	beq	2210 <coda_time_parts_to_string+0x248>
    2130:	cmp	r3, #77	; 0x4d
    2134:	bne	20b8 <coda_time_parts_to_string+0xf0>
    2138:	add	r3, r5, r4
    213c:	ldrb	r2, [r3, #1]
    2140:	cmp	r2, #77	; 0x4d
    2144:	beq	2364 <coda_time_parts_to_string+0x39c>
    2148:	mvn	r0, #102	; 0x66
    214c:	mov	r2, r5
    2150:	movw	r1, #0
    2154:	movt	r1, #0
    2158:	bl	0 <coda_set_error>
    215c:	mvn	r0, #0
    2160:	add	sp, sp, #84	; 0x54
    2164:	ldrd	r4, [sp]
    2168:	ldrd	r6, [sp, #8]
    216c:	ldrd	r8, [sp, #16]
    2170:	ldrd	sl, [sp, #24]
    2174:	add	sp, sp, #32
    2178:	pop	{pc}		; (ldr pc, [sp], #4)
    217c:	cmp	sl, #0
    2180:	bne	209c <coda_time_parts_to_string+0xd4>
    2184:	mov	r0, #0
    2188:	b	2160 <coda_time_parts_to_string+0x198>
    218c:	cmp	r3, #109	; 0x6d
    2190:	beq	2334 <coda_time_parts_to_string+0x36c>
    2194:	cmp	r3, #115	; 0x73
    2198:	bne	2398 <coda_time_parts_to_string+0x3d0>
    219c:	add	r3, r5, r4
    21a0:	ldrb	r3, [r3, #1]
    21a4:	cmp	r3, #115	; 0x73
    21a8:	bne	2148 <coda_time_parts_to_string+0x180>
    21ac:	ldr	r3, [sp, #124]	; 0x7c
    21b0:	cmp	r3, #60	; 0x3c
    21b4:	bhi	247c <coda_time_parts_to_string+0x4b4>
    21b8:	movw	r1, #0
    21bc:	movt	r1, #0
    21c0:	ldr	r2, [sp, #124]	; 0x7c
    21c4:	add	r4, r4, #2
    21c8:	b	20fc <coda_time_parts_to_string+0x134>
    21cc:	add	r4, r4, #1
    21d0:	ldrb	r3, [r5, r4]
    21d4:	cmp	r3, #39	; 0x27
    21d8:	beq	2084 <coda_time_parts_to_string+0xbc>
    21dc:	eor	sl, sl, #1
    21e0:	b	2068 <coda_time_parts_to_string+0xa0>
    21e4:	add	r4, r4, #1
    21e8:	ldrb	r3, [r5, r4]
    21ec:	cmp	r3, #39	; 0x27
    21f0:	bne	21dc <coda_time_parts_to_string+0x214>
    21f4:	add	r4, r4, #1
    21f8:	strb	r3, [r8, r6]
    21fc:	add	r6, r6, #1
    2200:	ldrb	r3, [r5, r4]
    2204:	cmp	r3, #0
    2208:	bne	2114 <coda_time_parts_to_string+0x14c>
    220c:	b	2184 <coda_time_parts_to_string+0x1bc>
    2210:	add	r3, r5, r4
    2214:	ldrb	r2, [r3, #1]
    2218:	cmp	r2, #121	; 0x79
    221c:	bne	2148 <coda_time_parts_to_string+0x180>
    2220:	ldrb	r2, [r3, #2]
    2224:	cmp	r2, #121	; 0x79
    2228:	bne	2148 <coda_time_parts_to_string+0x180>
    222c:	ldrb	r3, [r3, #3]
    2230:	cmp	r3, #121	; 0x79
    2234:	bne	2148 <coda_time_parts_to_string+0x180>
    2238:	ldr	r2, [sp, #20]
    223c:	movw	r3, #9999	; 0x270f
    2240:	cmp	r2, r3
    2244:	bhi	2518 <coda_time_parts_to_string+0x550>
    2248:	add	r0, r8, r6
    224c:	add	r4, r4, #4
    2250:	ldr	r2, [sp, #20]
    2254:	movw	r1, #0
    2258:	movt	r1, #0
    225c:	bl	0 <sprintf>
    2260:	ldrb	r3, [r5, r4]
    2264:	add	r6, r6, #4
    2268:	cmp	r3, #0
    226c:	bne	2114 <coda_time_parts_to_string+0x14c>
    2270:	b	2184 <coda_time_parts_to_string+0x1bc>
    2274:	add	r3, r5, r4
    2278:	ldrb	r3, [r3, #1]
    227c:	cmp	r3, #100	; 0x64
    2280:	bne	2148 <coda_time_parts_to_string+0x180>
    2284:	ldr	r3, [sp, #4]
    2288:	sub	r3, r3, #1
    228c:	cmp	r3, #30
    2290:	bhi	2494 <coda_time_parts_to_string+0x4cc>
    2294:	movw	r1, #0
    2298:	movt	r1, #0
    229c:	ldr	r2, [sp, #4]
    22a0:	add	r4, r4, #2
    22a4:	b	20fc <coda_time_parts_to_string+0x134>
    22a8:	add	r3, r5, r4
    22ac:	ldrb	r2, [r3, #1]
    22b0:	cmp	r2, #68	; 0x44
    22b4:	bne	2148 <coda_time_parts_to_string+0x180>
    22b8:	ldrb	r3, [r3, #2]
    22bc:	cmp	r3, #68	; 0x44
    22c0:	bne	2148 <coda_time_parts_to_string+0x180>
    22c4:	add	r3, sp, #24
    22c8:	ldr	r1, [sp]
    22cc:	ldr	r7, [sp, #20]
    22d0:	ldr	r0, [sp, #4]
    22d4:	mov	r2, r7
    22d8:	bl	214 <dmy_to_mjd2000>
    22dc:	cmp	r0, #0
    22e0:	bne	248c <coda_time_parts_to_string+0x4c4>
    22e4:	mov	r1, #1
    22e8:	add	r3, sp, #28
    22ec:	mov	r0, r1
    22f0:	mov	r2, r7
    22f4:	bl	214 <dmy_to_mjd2000>
    22f8:	cmp	r0, #0
    22fc:	bne	248c <coda_time_parts_to_string+0x4c4>
    2300:	ldrd	r2, [sp, #24]
    2304:	add	r0, r8, r6
    2308:	add	r4, r4, #3
    230c:	movw	r1, #0
    2310:	movt	r1, #0
    2314:	add	r6, r6, #3
    2318:	sub	r2, r2, r3
    231c:	add	r2, r2, #1
    2320:	bl	0 <sprintf>
    2324:	ldrb	r3, [r5, r4]
    2328:	cmp	r3, #0
    232c:	bne	2114 <coda_time_parts_to_string+0x14c>
    2330:	b	2184 <coda_time_parts_to_string+0x1bc>
    2334:	add	r3, r5, r4
    2338:	ldrb	r3, [r3, #1]
    233c:	cmp	r3, #109	; 0x6d
    2340:	bne	2148 <coda_time_parts_to_string+0x180>
    2344:	ldr	r3, [sp, #120]	; 0x78
    2348:	cmp	r3, #59	; 0x3b
    234c:	bhi	24dc <coda_time_parts_to_string+0x514>
    2350:	movw	r1, #0
    2354:	movt	r1, #0
    2358:	ldr	r2, [sp, #120]	; 0x78
    235c:	add	r4, r4, #2
    2360:	b	20fc <coda_time_parts_to_string+0x134>
    2364:	ldr	r2, [sp]
    2368:	sub	r2, r2, #1
    236c:	cmp	r2, #11
    2370:	bhi	2464 <coda_time_parts_to_string+0x49c>
    2374:	ldrb	r3, [r3, #2]
    2378:	add	r0, r8, r6
    237c:	cmp	r3, #77	; 0x4d
    2380:	beq	2430 <coda_time_parts_to_string+0x468>
    2384:	movw	r1, #0
    2388:	movt	r1, #0
    238c:	ldr	r2, [sp]
    2390:	add	r4, r4, #2
    2394:	b	2100 <coda_time_parts_to_string+0x138>
    2398:	cmp	r3, #83	; 0x53
    239c:	bne	241c <coda_time_parts_to_string+0x454>
    23a0:	ldr	r2, [sp, #12]
    23a4:	ldr	r3, [sp, #128]	; 0x80
    23a8:	cmp	r3, r2
    23ac:	bhi	24c4 <coda_time_parts_to_string+0x4fc>
    23b0:	add	r1, r4, #1
    23b4:	mov	r7, #0
    23b8:	add	r3, r5, r1
    23bc:	mov	r9, r3
    23c0:	ldrb	r2, [r3], #1
    23c4:	add	r4, r1, r7
    23c8:	add	r7, r7, #1
    23cc:	cmp	r2, #83	; 0x53
    23d0:	beq	23bc <coda_time_parts_to_string+0x3f4>
    23d4:	cmp	r7, #5
    23d8:	bgt	245c <coda_time_parts_to_string+0x494>
    23dc:	ldr	r3, [sp, #128]	; 0x80
    23e0:	mov	r2, r7
    23e4:	umull	r1, r3, fp, r3
    23e8:	add	r2, r2, #1
    23ec:	cmp	r2, #6
    23f0:	lsr	r3, r3, #3
    23f4:	bne	23e4 <coda_time_parts_to_string+0x41c>
    23f8:	add	r0, r8, r6
    23fc:	mov	r2, r7
    2400:	ldr	r1, [sp, #16]
    2404:	bl	0 <sprintf>
    2408:	ldrb	r3, [r9]
    240c:	add	r6, r6, r7
    2410:	cmp	r3, #0
    2414:	bne	2114 <coda_time_parts_to_string+0x14c>
    2418:	b	2184 <coda_time_parts_to_string+0x1bc>
    241c:	bic	r2, r3, #32
    2420:	sub	r2, r2, #65	; 0x41
    2424:	cmp	r2, #25
    2428:	bhi	21f4 <coda_time_parts_to_string+0x22c>
    242c:	b	2148 <coda_time_parts_to_string+0x180>
    2430:	ldr	r2, [sp]
    2434:	add	r3, sp, #80	; 0x50
    2438:	add	r4, r4, #3
    243c:	add	r6, r6, #3
    2440:	add	r3, r3, r2, lsl #2
    2444:	ldr	r1, [r3, #-48]	; 0xffffffd0
    2448:	bl	0 <strcpy>
    244c:	ldrb	r3, [r5, r4]
    2450:	cmp	r3, #0
    2454:	bne	2114 <coda_time_parts_to_string+0x14c>
    2458:	b	2184 <coda_time_parts_to_string+0x1bc>
    245c:	ldr	r3, [sp, #128]	; 0x80
    2460:	b	23f8 <coda_time_parts_to_string+0x430>
    2464:	mvn	r0, #103	; 0x67
    2468:	movw	r1, #0
    246c:	movt	r1, #0
    2470:	bl	0 <coda_set_error>
    2474:	mvn	r0, #0
    2478:	b	2160 <coda_time_parts_to_string+0x198>
    247c:	movw	r1, #0
    2480:	movt	r1, #0
    2484:	mvn	r0, #103	; 0x67
    2488:	bl	0 <coda_set_error>
    248c:	mvn	r0, #0
    2490:	b	2160 <coda_time_parts_to_string+0x198>
    2494:	mvn	r0, #103	; 0x67
    2498:	movw	r1, #0
    249c:	movt	r1, #0
    24a0:	bl	0 <coda_set_error>
    24a4:	mvn	r0, #0
    24a8:	b	2160 <coda_time_parts_to_string+0x198>
    24ac:	mvn	r0, #103	; 0x67
    24b0:	movw	r1, #0
    24b4:	movt	r1, #0
    24b8:	bl	0 <coda_set_error>
    24bc:	mvn	r0, #0
    24c0:	b	2160 <coda_time_parts_to_string+0x198>
    24c4:	mvn	r0, #103	; 0x67
    24c8:	movw	r1, #0
    24cc:	movt	r1, #0
    24d0:	bl	0 <coda_set_error>
    24d4:	mvn	r0, #0
    24d8:	b	2160 <coda_time_parts_to_string+0x198>
    24dc:	mvn	r0, #103	; 0x67
    24e0:	movw	r1, #0
    24e4:	movt	r1, #0
    24e8:	bl	0 <coda_set_error>
    24ec:	mvn	r0, #0
    24f0:	b	2160 <coda_time_parts_to_string+0x198>
    24f4:	mvn	r0, #99	; 0x63
    24f8:	movw	r2, #0
    24fc:	movt	r2, #0
    2500:	movw	r1, #0
    2504:	movt	r1, #0
    2508:	movw	r3, #1069	; 0x42d
    250c:	bl	0 <coda_set_error>
    2510:	mvn	r0, #0
    2514:	b	2160 <coda_time_parts_to_string+0x198>
    2518:	mvn	r0, #103	; 0x67
    251c:	movw	r1, #0
    2520:	movt	r1, #0
    2524:	bl	0 <coda_set_error>
    2528:	mvn	r0, #0
    252c:	b	2160 <coda_time_parts_to_string+0x198>
    2530:	mvn	r0, #99	; 0x63
    2534:	movw	r2, #0
    2538:	movt	r2, #0
    253c:	movw	r1, #0
    2540:	movt	r1, #0
    2544:	movw	r3, #1074	; 0x432
    2548:	bl	0 <coda_set_error>
    254c:	mvn	r0, #0
    2550:	b	2160 <coda_time_parts_to_string+0x198>

00002554 <coda_time_string_to_parts>:
    2554:	strd	r4, [sp, #-36]!	; 0xffffffdc
    2558:	strd	r6, [sp, #8]
    255c:	subs	r7, r0, #0
    2560:	strd	r8, [sp, #16]
    2564:	strd	sl, [sp, #24]
    2568:	mov	fp, r3
    256c:	str	lr, [sp, #32]
    2570:	sub	sp, sp, #44	; 0x2c
    2574:	ldr	r9, [sp, #80]	; 0x50
    2578:	ldr	r3, [sp, #84]	; 0x54
    257c:	str	r3, [sp, #24]
    2580:	ldr	r3, [sp, #88]	; 0x58
    2584:	str	r3, [sp, #28]
    2588:	ldr	r3, [sp, #92]	; 0x5c
    258c:	str	r3, [sp, #32]
    2590:	ldr	r3, [sp, #96]	; 0x60
    2594:	str	r3, [sp, #36]	; 0x24
    2598:	beq	27b0 <coda_time_string_to_parts+0x25c>
    259c:	cmp	r1, #0
    25a0:	mov	r8, r1
    25a4:	beq	27d4 <coda_time_string_to_parts+0x280>
    25a8:	cmp	fp, #0
    25ac:	cmpne	r2, #0
    25b0:	mov	sl, r2
    25b4:	beq	2748 <coda_time_string_to_parts+0x1f4>
    25b8:	ldr	r3, [sp, #24]
    25bc:	cmp	r3, #0
    25c0:	cmpne	r9, #0
    25c4:	beq	2748 <coda_time_string_to_parts+0x1f4>
    25c8:	ldrd	r2, [sp, #28]
    25cc:	clz	r3, r3
    25d0:	cmp	r2, #0
    25d4:	lsr	r3, r3, #5
    25d8:	moveq	r1, #1
    25dc:	movne	r1, r3
    25e0:	ldr	r3, [sp, #36]	; 0x24
    25e4:	cmp	r3, #0
    25e8:	moveq	r1, #1
    25ec:	cmp	r1, #0
    25f0:	bne	2748 <coda_time_string_to_parts+0x1f4>
    25f4:	ldrb	r3, [r7]
    25f8:	cmp	r3, #0
    25fc:	beq	2644 <coda_time_string_to_parts+0xf0>
    2600:	cmp	r3, #124	; 0x7c
    2604:	moveq	r4, r1
    2608:	beq	2698 <coda_time_string_to_parts+0x144>
    260c:	mov	r2, r7
    2610:	rsb	ip, r7, #1
    2614:	b	262c <coda_time_string_to_parts+0xd8>
    2618:	cmp	r3, #124	; 0x7c
    261c:	moveq	r0, r1
    2620:	orrne	r0, r1, #1
    2624:	tst	r0, #1
    2628:	beq	2698 <coda_time_string_to_parts+0x144>
    262c:	cmp	r3, #39	; 0x27
    2630:	add	r4, ip, r2
    2634:	ldrb	r3, [r2, #1]!
    2638:	eoreq	r1, r1, #1
    263c:	cmp	r3, #0
    2640:	bne	2618 <coda_time_string_to_parts+0xc4>
    2644:	ldr	ip, [sp, #24]
    2648:	mov	r3, fp
    264c:	mov	r2, sl
    2650:	mov	r1, r8
    2654:	mov	r0, r7
    2658:	str	r9, [sp, #80]	; 0x50
    265c:	str	ip, [sp, #84]	; 0x54
    2660:	ldr	ip, [sp, #28]
    2664:	str	ip, [sp, #88]	; 0x58
    2668:	ldr	ip, [sp, #32]
    266c:	str	ip, [sp, #92]	; 0x5c
    2670:	ldr	ip, [sp, #36]	; 0x24
    2674:	str	ip, [sp, #96]	; 0x60
    2678:	add	sp, sp, #44	; 0x2c
    267c:	ldrd	r4, [sp]
    2680:	ldrd	r6, [sp, #8]
    2684:	ldrd	r8, [sp, #16]
    2688:	ldrd	sl, [sp, #24]
    268c:	ldr	lr, [sp, #32]
    2690:	add	sp, sp, #36	; 0x24
    2694:	b	e74 <string_to_parts>
    2698:	mov	r5, #0
    269c:	mov	r0, r7
    26a0:	rsb	r6, r7, #1
    26a4:	ldr	ip, [sp, #24]
    26a8:	mov	r3, fp
    26ac:	mov	r2, sl
    26b0:	mov	r1, r8
    26b4:	stm	sp, {r9, ip}
    26b8:	ldr	ip, [sp, #28]
    26bc:	str	ip, [sp, #8]
    26c0:	ldr	ip, [sp, #32]
    26c4:	str	ip, [sp, #12]
    26c8:	ldr	ip, [sp, #36]	; 0x24
    26cc:	str	ip, [sp, #16]
    26d0:	bl	e74 <string_to_parts>
    26d4:	cmp	r0, #0
    26d8:	beq	2768 <coda_time_string_to_parts+0x214>
    26dc:	ldrb	r3, [r7, r4]
    26e0:	cmp	r3, #0
    26e4:	beq	2790 <coda_time_string_to_parts+0x23c>
    26e8:	add	r4, r4, #1
    26ec:	ldrb	r3, [r7, r4]
    26f0:	cmp	r3, #0
    26f4:	beq	2788 <coda_time_string_to_parts+0x234>
    26f8:	and	r2, r5, #1
    26fc:	cmp	r3, #124	; 0x7c
    2700:	orrne	r2, r2, #1
    2704:	cmp	r2, #0
    2708:	beq	2784 <coda_time_string_to_parts+0x230>
    270c:	add	r0, r7, r4
    2710:	mov	r1, r0
    2714:	cmp	r3, #39	; 0x27
    2718:	add	r4, r6, r1
    271c:	ldrb	r3, [r1, #1]!
    2720:	eoreq	r5, r5, #1
    2724:	and	r2, r5, #1
    2728:	cmp	r3, #0
    272c:	beq	26a4 <coda_time_string_to_parts+0x150>
    2730:	cmp	r3, #124	; 0x7c
    2734:	orrne	r2, r2, #1
    2738:	cmp	r2, #0
    273c:	bne	2714 <coda_time_string_to_parts+0x1c0>
    2740:	mov	r5, r2
    2744:	b	26a4 <coda_time_string_to_parts+0x150>
    2748:	mvn	r0, #99	; 0x63
    274c:	movw	r2, #0
    2750:	movt	r2, #0
    2754:	movw	r1, #0
    2758:	movt	r1, #0
    275c:	movw	r3, #1479	; 0x5c7
    2760:	bl	0 <coda_set_error>
    2764:	mvn	r0, #0
    2768:	add	sp, sp, #44	; 0x2c
    276c:	ldrd	r4, [sp]
    2770:	ldrd	r6, [sp, #8]
    2774:	ldrd	r8, [sp, #16]
    2778:	ldrd	sl, [sp, #24]
    277c:	add	sp, sp, #32
    2780:	pop	{pc}		; (ldr pc, [sp], #4)
    2784:	mov	r5, r2
    2788:	add	r0, r7, r4
    278c:	b	26a4 <coda_time_string_to_parts+0x150>
    2790:	mvn	r0, #103	; 0x67
    2794:	mov	r3, r7
    2798:	mov	r2, r8
    279c:	movw	r1, #0
    27a0:	movt	r1, #0
    27a4:	bl	0 <coda_set_error>
    27a8:	mvn	r0, #0
    27ac:	b	2768 <coda_time_string_to_parts+0x214>
    27b0:	mvn	r0, #99	; 0x63
    27b4:	movw	r2, #0
    27b8:	movt	r2, #0
    27bc:	movw	r1, #0
    27c0:	movt	r1, #0
    27c4:	movw	r3, #1468	; 0x5bc
    27c8:	bl	0 <coda_set_error>
    27cc:	mvn	r0, #0
    27d0:	b	2768 <coda_time_string_to_parts+0x214>
    27d4:	mvn	r0, #99	; 0x63
    27d8:	movw	r2, #0
    27dc:	movt	r2, #0
    27e0:	movw	r1, #0
    27e4:	movt	r1, #0
    27e8:	movw	r3, #1473	; 0x5c1
    27ec:	bl	0 <coda_set_error>
    27f0:	mvn	r0, #0
    27f4:	b	2768 <coda_time_string_to_parts+0x214>

000027f8 <coda_time_double_to_string>:
    27f8:	strd	r4, [sp, #-12]!
    27fc:	mov	r5, r0
    2800:	mov	r4, r1
    2804:	str	lr, [sp, #8]
    2808:	sub	sp, sp, #60	; 0x3c
    280c:	add	ip, sp, #52	; 0x34
    2810:	add	r2, sp, #48	; 0x30
    2814:	add	lr, sp, #44	; 0x2c
    2818:	add	r3, sp, #40	; 0x28
    281c:	add	r1, sp, #32
    2820:	add	r0, sp, #28
    2824:	str	lr, [sp]
    2828:	stmib	sp, {r2, ip}
    282c:	add	r2, sp, #36	; 0x24
    2830:	bl	18d4 <coda_time_double_to_parts>
    2834:	cmp	r0, #0
    2838:	bne	286c <coda_time_double_to_string+0x74>
    283c:	add	r1, sp, #44	; 0x2c
    2840:	ldr	r0, [sp, #28]
    2844:	ldm	r1, {r1, r2, r3}
    2848:	stm	sp, {r1, r2, r3, r5}
    284c:	add	r1, sp, #32
    2850:	str	r4, [sp, #16]
    2854:	ldm	r1, {r1, r2, r3}
    2858:	bl	1fc8 <coda_time_parts_to_string>
    285c:	add	sp, sp, #60	; 0x3c
    2860:	ldrd	r4, [sp]
    2864:	add	sp, sp, #8
    2868:	pop	{pc}		; (ldr pc, [sp], #4)
    286c:	mvn	r0, #0
    2870:	b	285c <coda_time_double_to_string+0x64>

00002874 <coda_time_double_to_string_utc>:
    2874:	strd	r4, [sp, #-12]!
    2878:	mov	r5, r0
    287c:	mov	r4, r1
    2880:	str	lr, [sp, #8]
    2884:	sub	sp, sp, #60	; 0x3c
    2888:	add	ip, sp, #52	; 0x34
    288c:	add	r2, sp, #48	; 0x30
    2890:	add	lr, sp, #44	; 0x2c
    2894:	add	r3, sp, #40	; 0x28
    2898:	add	r1, sp, #32
    289c:	add	r0, sp, #28
    28a0:	str	lr, [sp]
    28a4:	stmib	sp, {r2, ip}
    28a8:	add	r2, sp, #36	; 0x24
    28ac:	bl	1af8 <coda_time_double_to_parts_utc>
    28b0:	cmp	r0, #0
    28b4:	bne	28e8 <coda_time_double_to_string_utc+0x74>
    28b8:	add	r1, sp, #44	; 0x2c
    28bc:	ldr	r0, [sp, #28]
    28c0:	ldm	r1, {r1, r2, r3}
    28c4:	stm	sp, {r1, r2, r3, r5}
    28c8:	add	r1, sp, #32
    28cc:	str	r4, [sp, #16]
    28d0:	ldm	r1, {r1, r2, r3}
    28d4:	bl	1fc8 <coda_time_parts_to_string>
    28d8:	add	sp, sp, #60	; 0x3c
    28dc:	ldrd	r4, [sp]
    28e0:	add	sp, sp, #8
    28e4:	pop	{pc}		; (ldr pc, [sp], #4)
    28e8:	mvn	r0, #0
    28ec:	b	28d8 <coda_time_double_to_string_utc+0x64>

000028f0 <coda_time_string_to_double>:
    28f0:	strd	r4, [sp, #-12]!
    28f4:	mov	r5, r2
    28f8:	str	lr, [sp, #8]
    28fc:	sub	sp, sp, #60	; 0x3c
    2900:	add	r3, sp, #48	; 0x30
    2904:	add	ip, sp, #52	; 0x34
    2908:	add	lr, sp, #44	; 0x2c
    290c:	add	r4, sp, #40	; 0x28
    2910:	add	r2, sp, #28
    2914:	str	r3, [sp, #12]
    2918:	add	r3, sp, #36	; 0x24
    291c:	str	r3, [sp]
    2920:	add	r3, sp, #32
    2924:	stmib	sp, {r4, lr}
    2928:	str	ip, [sp, #16]
    292c:	bl	2554 <coda_time_string_to_parts>
    2930:	cmp	r0, #0
    2934:	bne	2964 <coda_time_string_to_double+0x74>
    2938:	add	r1, sp, #44	; 0x2c
    293c:	ldr	r0, [sp, #28]
    2940:	ldm	r1, {r1, r2, r3}
    2944:	stm	sp, {r1, r2, r3, r5}
    2948:	add	r1, sp, #32
    294c:	ldm	r1, {r1, r2, r3}
    2950:	bl	1dd0 <coda_time_parts_to_double>
    2954:	add	sp, sp, #60	; 0x3c
    2958:	ldrd	r4, [sp]
    295c:	add	sp, sp, #8
    2960:	pop	{pc}		; (ldr pc, [sp], #4)
    2964:	mvn	r0, #0
    2968:	b	2954 <coda_time_string_to_double+0x64>

0000296c <coda_time_string_to_double_utc>:
    296c:	strd	r4, [sp, #-12]!
    2970:	mov	r5, r2
    2974:	str	lr, [sp, #8]
    2978:	sub	sp, sp, #60	; 0x3c
    297c:	add	r3, sp, #48	; 0x30
    2980:	add	ip, sp, #52	; 0x34
    2984:	add	lr, sp, #44	; 0x2c
    2988:	add	r4, sp, #40	; 0x28
    298c:	add	r2, sp, #28
    2990:	str	r3, [sp, #12]
    2994:	add	r3, sp, #36	; 0x24
    2998:	str	r3, [sp]
    299c:	add	r3, sp, #32
    29a0:	stmib	sp, {r4, lr}
    29a4:	str	ip, [sp, #16]
    29a8:	bl	2554 <coda_time_string_to_parts>
    29ac:	cmp	r0, #0
    29b0:	bne	29e0 <coda_time_string_to_double_utc+0x74>
    29b4:	add	r1, sp, #44	; 0x2c
    29b8:	ldr	r0, [sp, #28]
    29bc:	ldm	r1, {r1, r2, r3}
    29c0:	stm	sp, {r1, r2, r3, r5}
    29c4:	add	r1, sp, #32
    29c8:	ldm	r1, {r1, r2, r3}
    29cc:	bl	1e88 <coda_time_parts_to_double_utc>
    29d0:	add	sp, sp, #60	; 0x3c
    29d4:	ldrd	r4, [sp]
    29d8:	add	sp, sp, #8
    29dc:	pop	{pc}		; (ldr pc, [sp], #4)
    29e0:	mvn	r0, #0
    29e4:	b	29d0 <coda_time_string_to_double_utc+0x64>

000029e8 <coda_datetime_to_double>:
    29e8:	b	1dd0 <coda_time_parts_to_double>

000029ec <coda_double_to_datetime>:
    29ec:	b	18d4 <coda_time_double_to_parts>

000029f0 <coda_time_to_string>:
    29f0:	mov	r1, r0
    29f4:	movw	r0, #0
    29f8:	movt	r0, #0
    29fc:	b	27f8 <coda_time_double_to_string>

00002a00 <coda_string_to_time>:
    2a00:	mov	r2, r1
    2a04:	mov	r1, r0
    2a08:	movw	r0, #0
    2a0c:	movt	r0, #0
    2a10:	b	28f0 <coda_time_string_to_double>

00002a14 <coda_utcdatetime_to_double>:
    2a14:	b	1e88 <coda_time_parts_to_double_utc>

00002a18 <coda_double_to_utcdatetime>:
    2a18:	b	1af8 <coda_time_double_to_parts_utc>

00002a1c <coda_time_to_utcstring>:
    2a1c:	mov	r1, r0
    2a20:	movw	r0, #0
    2a24:	movt	r0, #0
    2a28:	b	2874 <coda_time_double_to_string_utc>

00002a2c <coda_utcstring_to_time>:
    2a2c:	mov	r2, r1
    2a30:	mov	r1, r0
    2a34:	movw	r0, #0
    2a38:	movt	r0, #0
    2a3c:	b	296c <coda_time_string_to_double_utc>
