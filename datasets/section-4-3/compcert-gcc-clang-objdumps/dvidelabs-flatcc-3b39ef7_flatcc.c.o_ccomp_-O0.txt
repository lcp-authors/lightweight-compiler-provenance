
../repos/dvidelabs-flatcc-3b39ef7/src/compiler/CMakeFiles/flatcc.dir/flatcc.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <checkmem>:
   0:	mov	ip, sp
   4:	sub	sp, sp, #8
   8:	str	ip, [sp]
   c:	str	lr, [sp, #4]
  10:	cmp	r0, #0
  14:	bne	30 <checkmem+0x30>
  18:	ldr	r0, [pc, #32]	; 40 <checkmem+0x40>
  1c:	ldr	r0, [r0]
  20:	ldr	r1, [pc, #20]	; 3c <checkmem+0x3c>
  24:	bl	0 <fprintf>
  28:	mov	r0, #1
  2c:	bl	0 <exit>
  30:	ldr	lr, [sp, #4]
  34:	add	sp, sp, #8
  38:	bx	lr
  3c:	.word	0x0000001e
  40:	.word	0x00000000

00000044 <flatcc_init_options>:
  44:	mov	ip, sp
  48:	sub	sp, sp, #16
  4c:	str	ip, [sp]
  50:	str	lr, [sp, #4]
  54:	str	r4, [sp, #8]
  58:	mov	r4, r0
  5c:	mov	r1, #0
  60:	mov	r2, #224	; 0xe0
  64:	mov	r0, r4
  68:	bl	0 <memset>
  6c:	mov	r0, #65536	; 0x10000
  70:	str	r0, [r4]
  74:	mov	ip, #100	; 0x64
  78:	str	ip, [r4, #4]
  7c:	mov	r2, #100	; 0x64
  80:	str	r2, [r4, #8]
  84:	mov	r3, #1
  88:	str	r3, [r4, #16]
  8c:	mov	r1, #1
  90:	str	r1, [r4, #20]
  94:	mov	r3, #1
  98:	str	r3, [r4, #24]
  9c:	mov	r0, #1
  a0:	str	r0, [r4, #28]
  a4:	mov	r2, #1
  a8:	str	r2, [r4, #32]
  ac:	mov	r1, #1
  b0:	str	r1, [r4, #36]	; 0x24
  b4:	mov	ip, #1
  b8:	str	ip, [r4, #40]	; 0x28
  bc:	mov	ip, #1
  c0:	str	ip, [r4, #44]	; 0x2c
  c4:	mov	r2, #1
  c8:	str	r2, [r4, #48]	; 0x30
  cc:	mov	ip, #1
  d0:	str	ip, [r4, #52]	; 0x34
  d4:	mov	ip, #0
  d8:	str	ip, [r4, #56]	; 0x38
  dc:	mov	r2, #0
  e0:	str	r2, [r4, #60]	; 0x3c
  e4:	mov	r2, #4
  e8:	str	r2, [r4, #64]	; 0x40
  ec:	mov	ip, #2
  f0:	str	ip, [r4, #68]	; 0x44
  f4:	mov	r0, #1
  f8:	str	r0, [r4, #72]	; 0x48
  fc:	mov	ip, #1
 100:	str	ip, [r4, #76]	; 0x4c
 104:	mov	r2, #0
 108:	str	r2, [r4, #80]	; 0x50
 10c:	mov	r1, #1
 110:	str	r1, [r4, #84]	; 0x54
 114:	mov	r1, #0
 118:	movw	r0, #65534	; 0xfffe
 11c:	str	r0, [r4, #88]	; 0x58
 120:	str	r1, [r4, #92]	; 0x5c
 124:	ldr	r1, [pc, #128]	; 1ac <flatcc_init_options+0x168>
 128:	str	r1, [r4, #96]	; 0x60
 12c:	ldr	r3, [pc, #128]	; 1b4 <flatcc_init_options+0x170>
 130:	str	r3, [r4, #100]	; 0x64
 134:	ldr	r0, [pc, #116]	; 1b0 <flatcc_init_options+0x16c>
 138:	str	r0, [r4, #104]	; 0x68
 13c:	mov	r0, #0
 140:	str	r0, [r4, #132]	; 0x84
 144:	mov	r3, #1
 148:	str	r3, [r4, #136]	; 0x88
 14c:	mov	r1, #1
 150:	str	r1, [r4, #140]	; 0x8c
 154:	mov	r3, #0
 158:	str	r3, [r4, #144]	; 0x90
 15c:	mov	r3, #0
 160:	str	r3, [r4, #148]	; 0x94
 164:	mov	r0, #0
 168:	str	r0, [r4, #152]	; 0x98
 16c:	mov	r2, #0
 170:	str	r2, [r4, #156]	; 0x9c
 174:	mov	r0, #0
 178:	str	r0, [r4, #164]	; 0xa4
 17c:	mov	r3, #4
 180:	str	r3, [r4, #176]	; 0xb0
 184:	mov	r3, #0
 188:	str	r3, [r4, #180]	; 0xb4
 18c:	mov	r2, #1
 190:	str	r2, [r4, #184]	; 0xb8
 194:	mov	r1, #0
 198:	str	r1, [r4, #188]	; 0xbc
 19c:	ldr	r4, [sp, #8]
 1a0:	ldr	lr, [sp, #4]
 1a4:	add	sp, sp, #16
 1a8:	bx	lr
 1ac:	.word	0x00000176
 1b0:	.word	0x00000123
 1b4:	.word	0x00000041

000001b8 <flatcc_create_context>:
 1b8:	mov	ip, sp
 1bc:	sub	sp, sp, #40	; 0x28
 1c0:	str	ip, [sp, #8]
 1c4:	str	lr, [sp, #12]
 1c8:	str	r4, [sp, #16]
 1cc:	str	r5, [sp, #20]
 1d0:	str	r6, [sp, #24]
 1d4:	str	r7, [sp, #28]
 1d8:	str	r8, [sp, #32]
 1dc:	mov	r8, r3
 1e0:	mov	r5, r2
 1e4:	mov	r6, r1
 1e8:	mov	r7, r0
 1ec:	mov	r0, #560	; 0x230
 1f0:	bl	0 <malloc>
 1f4:	mov	r4, r0
 1f8:	cmp	r4, #0
 1fc:	bne	208 <flatcc_create_context+0x50>
 200:	mov	r0, #0
 204:	b	244 <flatcc_create_context+0x8c>
 208:	mov	r2, #0
 20c:	str	r2, [sp, #4]
 210:	str	r8, [sp]
 214:	mov	r3, r5
 218:	mov	r2, r6
 21c:	mov	r1, r7
 220:	mov	r0, r4
 224:	bl	0 <__flatcc_fb_init_parser>
 228:	cmp	r0, #0
 22c:	beq	240 <flatcc_create_context+0x88>
 230:	mov	r0, r4
 234:	bl	0 <free>
 238:	mov	r0, #0
 23c:	b	244 <flatcc_create_context+0x8c>
 240:	mov	r0, r4
 244:	ldr	r4, [sp, #16]
 248:	ldr	r5, [sp, #20]
 24c:	ldr	r6, [sp, #24]
 250:	ldr	r7, [sp, #28]
 254:	ldr	r8, [sp, #32]
 258:	ldr	lr, [sp, #12]
 25c:	add	sp, sp, #40	; 0x28
 260:	bx	lr

00000264 <__flatcc_create_child_context>:
 264:	mov	ip, sp
 268:	sub	sp, sp, #32
 26c:	str	ip, [sp, #8]
 270:	str	lr, [sp, #12]
 274:	str	r4, [sp, #16]
 278:	str	r5, [sp, #20]
 27c:	str	r6, [sp, #24]
 280:	str	r7, [sp, #28]
 284:	mov	r4, r2
 288:	mov	r5, r1
 28c:	mov	r6, r0
 290:	mov	r0, #560	; 0x230
 294:	bl	0 <malloc>
 298:	mov	r7, r0
 29c:	cmp	r0, #0
 2a0:	bne	2ac <__flatcc_create_child_context+0x48>
 2a4:	mov	r0, #0
 2a8:	b	2ec <__flatcc_create_child_context+0x88>
 2ac:	ldr	r3, [r4, #8]
 2b0:	ldr	r0, [r4, #12]
 2b4:	ldr	r1, [r4, #412]	; 0x19c
 2b8:	str	r1, [sp, #4]
 2bc:	str	r0, [sp]
 2c0:	mov	r2, r5
 2c4:	mov	r1, r6
 2c8:	mov	r0, r7
 2cc:	bl	0 <__flatcc_fb_init_parser>
 2d0:	cmp	r0, #0
 2d4:	beq	2e8 <__flatcc_create_child_context+0x84>
 2d8:	mov	r0, r7
 2dc:	bl	0 <free>
 2e0:	mov	r0, #0
 2e4:	b	2ec <__flatcc_create_child_context+0x88>
 2e8:	mov	r0, r7
 2ec:	ldr	r4, [sp, #16]
 2f0:	ldr	r5, [sp, #20]
 2f4:	ldr	r6, [sp, #24]
 2f8:	ldr	r7, [sp, #28]
 2fc:	ldr	lr, [sp, #12]
 300:	add	sp, sp, #32
 304:	bx	lr

00000308 <flatcc_parse_buffer>:
 308:	mov	ip, sp
 30c:	sub	sp, sp, #24
 310:	str	ip, [sp]
 314:	str	lr, [sp, #4]
 318:	str	r4, [sp, #8]
 31c:	str	r5, [sp, #12]
 320:	str	r6, [sp, #16]
 324:	mov	r5, r2
 328:	mov	r6, r1
 32c:	mov	r4, r0
 330:	mov	r1, #1
 334:	str	r1, [r4, #140]	; 0x8c
 338:	ldr	r0, [r4, #128]	; 0x80
 33c:	cmp	r5, r0
 340:	bls	358 <flatcc_parse_buffer+0x50>
 344:	ldr	r1, [r4, #128]	; 0x80
 348:	cmp	r1, #0
 34c:	movhi	r0, #1
 350:	movls	r0, #0
 354:	b	35c <flatcc_parse_buffer+0x54>
 358:	mov	r0, #0
 35c:	cmp	r0, #0
 360:	beq	378 <flatcc_parse_buffer+0x70>
 364:	ldr	r1, [pc, #128]	; 3ec <flatcc_parse_buffer+0xe4>
 368:	mov	r0, r4
 36c:	bl	0 <__flatcc_fb_print_error>
 370:	mvn	r0, #0
 374:	b	3d4 <flatcc_parse_buffer+0xcc>
 378:	add	r0, r4, #524	; 0x20c
 37c:	add	r1, r4, #352	; 0x160
 380:	mov	r2, #1
 384:	bl	0 <ptr_set_insert_item>
 388:	mov	r3, #0
 38c:	mov	r2, r5
 390:	mov	r1, r6
 394:	mov	r0, r4
 398:	bl	0 <__flatcc_fb_parse>
 39c:	cmp	r0, #0
 3a0:	bne	3bc <flatcc_parse_buffer+0xb4>
 3a4:	mov	r0, r4
 3a8:	bl	0 <__flatcc_fb_build_schema>
 3ac:	cmp	r0, #0
 3b0:	movne	r0, #1
 3b4:	moveq	r0, #0
 3b8:	b	3c0 <flatcc_parse_buffer+0xb8>
 3bc:	mov	r0, #1
 3c0:	cmp	r0, #0
 3c4:	bne	3d0 <flatcc_parse_buffer+0xc8>
 3c8:	mov	r0, #0
 3cc:	b	3d4 <flatcc_parse_buffer+0xcc>
 3d0:	mvn	r0, #0
 3d4:	ldr	r4, [sp, #8]
 3d8:	ldr	r5, [sp, #12]
 3dc:	ldr	r6, [sp, #16]
 3e0:	ldr	lr, [sp, #4]
 3e4:	add	sp, sp, #24
 3e8:	bx	lr
 3ec:	.word	0x000000c6

000003f0 <visit_dep>:
 3f0:	mov	ip, sp
 3f4:	sub	sp, sp, #8
 3f8:	str	ip, [sp]
 3fc:	str	lr, [sp, #4]
 400:	add	r0, r0, #172	; 0xac
 404:	mov	r2, #1
 408:	bl	0 <ptr_set_insert_item>
 40c:	ldr	lr, [sp, #4]
 410:	add	sp, sp, #8
 414:	bx	lr

00000418 <add_visible_schema>:
 418:	mov	ip, sp
 41c:	sub	sp, sp, #8
 420:	str	ip, [sp]
 424:	str	lr, [sp, #4]
 428:	add	r2, r1, #172	; 0xac
 42c:	ldr	r1, [pc, #24]	; 44c <add_visible_schema+0x34>
 430:	mov	r3, r0
 434:	mov	r0, r2
 438:	mov	r2, r3
 43c:	bl	0 <ptr_set_visit>
 440:	ldr	lr, [sp, #4]
 444:	add	sp, sp, #8
 448:	bx	lr
 44c:	.word	0x00000000

00000450 <__parse_include_file>:
 450:	mov	ip, sp
 454:	sub	sp, sp, #24
 458:	str	ip, [sp]
 45c:	str	lr, [sp, #4]
 460:	str	r4, [sp, #8]
 464:	str	r5, [sp, #12]
 468:	str	r6, [sp, #16]
 46c:	str	r7, [sp, #20]
 470:	mov	r4, r1
 474:	mov	r6, r0
 478:	add	r0, r6, #128	; 0x80
 47c:	ldr	r7, [r6, #412]	; 0x19c
 480:	ldr	r2, [r7, #52]	; 0x34
 484:	ldr	r1, [r0, #4]
 488:	cmp	r2, r1
 48c:	blt	4a4 <__parse_include_file+0x54>
 490:	ldr	r1, [r0, #4]
 494:	cmp	r1, #0
 498:	movgt	r1, #1
 49c:	movle	r1, #0
 4a0:	b	4a8 <__parse_include_file+0x58>
 4a4:	mov	r1, #0
 4a8:	cmp	r1, #0
 4ac:	beq	4c4 <__parse_include_file+0x74>
 4b0:	ldr	r1, [pc, #276]	; 5cc <__parse_include_file+0x17c>
 4b4:	mov	r0, r6
 4b8:	bl	0 <__flatcc_fb_print_error>
 4bc:	mvn	r0, #0
 4c0:	b	5b0 <__parse_include_file+0x160>
 4c4:	ldr	r3, [r7, #48]	; 0x30
 4c8:	ldr	r2, [r0, #8]
 4cc:	cmp	r3, r2
 4d0:	blt	4e8 <__parse_include_file+0x98>
 4d4:	ldr	r2, [r0, #8]
 4d8:	cmp	r2, #0
 4dc:	movgt	r2, #1
 4e0:	movle	r2, #0
 4e4:	b	4ec <__parse_include_file+0x9c>
 4e8:	mov	r2, #0
 4ec:	cmp	r2, #0
 4f0:	beq	508 <__parse_include_file+0xb8>
 4f4:	ldr	r1, [pc, #212]	; 5d0 <__parse_include_file+0x180>
 4f8:	mov	r0, r6
 4fc:	bl	0 <__flatcc_fb_print_error>
 500:	mvn	r0, #0
 504:	b	5b0 <__parse_include_file+0x160>
 508:	mov	r2, r6
 50c:	mov	r1, r4
 510:	bl	264 <__flatcc_create_child_context>
 514:	mov	r5, r0
 518:	cmp	r5, #0
 51c:	bne	528 <__parse_include_file+0xd8>
 520:	mvn	r0, #0
 524:	b	5b0 <__parse_include_file+0x160>
 528:	add	r0, r7, #32
 52c:	add	r1, r5, #352	; 0x160
 530:	bl	0 <fb_schema_table_find_item>
 534:	mov	r1, r0
 538:	cmp	r1, #0
 53c:	beq	558 <__parse_include_file+0x108>
 540:	add	r0, r6, #352	; 0x160
 544:	bl	418 <add_visible_schema>
 548:	mov	r0, r5
 54c:	bl	e84 <flatcc_destroy_context>
 550:	mov	r0, #0
 554:	b	5b0 <__parse_include_file+0x160>
 558:	ldr	ip, [r6]
 55c:	str	ip, [r5]
 560:	str	r5, [r6]
 564:	ldr	r1, [r6, #548]	; 0x224
 568:	str	r1, [r5, #552]	; 0x228
 56c:	ldr	r0, [r7, #52]	; 0x34
 570:	add	ip, r0, #1
 574:	str	ip, [r7, #52]	; 0x34
 578:	ldr	r1, [r7, #48]	; 0x30
 57c:	add	r1, r1, #1
 580:	str	r1, [r7, #48]	; 0x30
 584:	mov	r1, r4
 588:	mov	r0, r5
 58c:	bl	838 <flatcc_parse_file>
 590:	cmp	r0, #0
 594:	beq	5a0 <__parse_include_file+0x150>
 598:	mvn	r0, #0
 59c:	b	5b0 <__parse_include_file+0x160>
 5a0:	add	r0, r6, #352	; 0x160
 5a4:	add	r1, r5, #352	; 0x160
 5a8:	bl	418 <add_visible_schema>
 5ac:	mov	r0, #0
 5b0:	ldr	r4, [sp, #8]
 5b4:	ldr	r5, [sp, #12]
 5b8:	ldr	r6, [sp, #16]
 5bc:	ldr	r7, [sp, #20]
 5c0:	ldr	lr, [sp, #4]
 5c4:	add	sp, sp, #24
 5c8:	bx	lr
 5cc:	.word	0x00000156
 5d0:	.word	0x00000000

000005d4 <__flatcc_gen_depends_file>:
 5d4:	mov	ip, sp
 5d8:	sub	sp, sp, #40	; 0x28
 5dc:	str	ip, [sp]
 5e0:	str	lr, [sp, #4]
 5e4:	str	r4, [sp, #8]
 5e8:	str	r5, [sp, #12]
 5ec:	str	r6, [sp, #16]
 5f0:	str	r7, [sp, #20]
 5f4:	str	r8, [sp, #24]
 5f8:	str	r9, [sp, #28]
 5fc:	str	sl, [sp, #32]
 600:	mov	r9, r0
 604:	mov	r8, #0
 608:	mvn	r7, #0
 60c:	ldr	r0, [r9, #552]	; 0x228
 610:	cmp	r0, #0
 614:	beq	62c <__flatcc_gen_depends_file+0x58>
 618:	ldr	r0, [pc, #532]	; 834 <__flatcc_gen_depends_file+0x260>
 61c:	ldr	r1, [pc, #488]	; 80c <__flatcc_gen_depends_file+0x238>
 620:	mov	r2, #220	; 0xdc
 624:	ldr	r3, [pc, #496]	; 81c <__flatcc_gen_depends_file+0x248>
 628:	bl	0 <__assert_fail>
 62c:	ldr	r3, [r9, #344]	; 0x158
 630:	cmp	r3, #0
 634:	bne	640 <__flatcc_gen_depends_file+0x6c>
 638:	ldr	r5, [pc, #492]	; 82c <__flatcc_gen_depends_file+0x258>
 63c:	b	644 <__flatcc_gen_depends_file+0x70>
 640:	ldr	r5, [r9, #344]	; 0x158
 644:	ldr	r3, [r9, #512]	; 0x200
 648:	ldr	r4, [r9, #248]	; 0xf8
 64c:	ldr	r0, [r9, #244]	; 0xf4
 650:	cmp	r0, #0
 654:	beq	668 <__flatcc_gen_depends_file+0x94>
 658:	ldr	r1, [r9, #244]	; 0xf4
 65c:	ldr	r0, [pc, #456]	; 82c <__flatcc_gen_depends_file+0x258>
 660:	ldr	r2, [pc, #452]	; 82c <__flatcc_gen_depends_file+0x258>
 664:	b	674 <__flatcc_gen_depends_file+0xa0>
 668:	mov	r1, r3
 66c:	mov	r0, r5
 670:	ldr	r2, [pc, #408]	; 810 <__flatcc_gen_depends_file+0x23c>
 674:	cmp	r4, #0
 678:	bne	69c <__flatcc_gen_depends_file+0xc8>
 67c:	ldr	ip, [r9, #308]	; 0x134
 680:	cmp	ip, #0
 684:	bne	690 <__flatcc_gen_depends_file+0xbc>
 688:	ldr	sl, [pc, #388]	; 814 <__flatcc_gen_depends_file+0x240>
 68c:	b	694 <__flatcc_gen_depends_file+0xc0>
 690:	ldr	sl, [pc, #400]	; 828 <__flatcc_gen_depends_file+0x254>
 694:	mov	r4, r3
 698:	b	6a4 <__flatcc_gen_depends_file+0xd0>
 69c:	ldr	sl, [pc, #392]	; 82c <__flatcc_gen_depends_file+0x258>
 6a0:	ldr	r5, [pc, #388]	; 82c <__flatcc_gen_depends_file+0x258>
 6a4:	mov	r3, #1
 6a8:	bl	0 <__flatcc_fb_create_join_path>
 6ac:	mov	r6, r0
 6b0:	mov	r0, r6
 6b4:	bl	0 <checkmem>
 6b8:	mov	r3, #1
 6bc:	mov	r2, sl
 6c0:	mov	r1, r4
 6c4:	mov	r0, r5
 6c8:	bl	0 <__flatcc_fb_create_join_path>
 6cc:	mov	r5, r0
 6d0:	bl	0 <checkmem>
 6d4:	mov	r0, r5
 6d8:	bl	0 <__flatcc_fb_create_make_path>
 6dc:	mov	r4, r0
 6e0:	bl	0 <checkmem>
 6e4:	cmp	r5, #0
 6e8:	beq	6f8 <__flatcc_gen_depends_file+0x124>
 6ec:	mov	r0, r5
 6f0:	bl	0 <free>
 6f4:	mov	r5, #0
 6f8:	ldr	r1, [pc, #264]	; 808 <__flatcc_gen_depends_file+0x234>
 6fc:	mov	r0, r6
 700:	bl	0 <fopen>
 704:	mov	sl, r0
 708:	cmp	sl, #0
 70c:	bne	724 <__flatcc_gen_depends_file+0x150>
 710:	ldr	r1, [pc, #256]	; 818 <__flatcc_gen_depends_file+0x244>
 714:	mov	r2, r6
 718:	mov	r0, r9
 71c:	bl	0 <__flatcc_fb_print_error>
 720:	b	78c <__flatcc_gen_depends_file+0x1b8>
 724:	ldr	r1, [pc, #244]	; 820 <__flatcc_gen_depends_file+0x24c>
 728:	mov	r2, r4
 72c:	mov	r0, sl
 730:	bl	0 <fprintf>
 734:	ldr	r7, [r9]
 738:	cmp	r7, #0
 73c:	beq	77c <__flatcc_gen_depends_file+0x1a8>
 740:	ldr	r0, [r7, #548]	; 0x224
 744:	bl	0 <__flatcc_fb_create_make_path>
 748:	mov	r8, r0
 74c:	bl	0 <checkmem>
 750:	ldr	r1, [pc, #204]	; 824 <__flatcc_gen_depends_file+0x250>
 754:	mov	r2, r8
 758:	mov	r0, sl
 75c:	bl	0 <fprintf>
 760:	ldr	r7, [r7]
 764:	cmp	r8, #0
 768:	beq	738 <__flatcc_gen_depends_file+0x164>
 76c:	mov	r0, r8
 770:	bl	0 <free>
 774:	mov	r8, #0
 778:	b	738 <__flatcc_gen_depends_file+0x164>
 77c:	ldr	r1, [pc, #172]	; 830 <__flatcc_gen_depends_file+0x25c>
 780:	mov	r0, sl
 784:	bl	0 <fprintf>
 788:	mov	r7, #0
 78c:	cmp	r6, #0
 790:	beq	79c <__flatcc_gen_depends_file+0x1c8>
 794:	mov	r0, r6
 798:	bl	0 <free>
 79c:	cmp	r5, #0
 7a0:	beq	7ac <__flatcc_gen_depends_file+0x1d8>
 7a4:	mov	r0, r5
 7a8:	bl	0 <free>
 7ac:	cmp	r4, #0
 7b0:	beq	7bc <__flatcc_gen_depends_file+0x1e8>
 7b4:	mov	r0, r4
 7b8:	bl	0 <free>
 7bc:	cmp	r8, #0
 7c0:	beq	7cc <__flatcc_gen_depends_file+0x1f8>
 7c4:	mov	r0, r8
 7c8:	bl	0 <free>
 7cc:	cmp	sl, #0
 7d0:	beq	7dc <__flatcc_gen_depends_file+0x208>
 7d4:	mov	r0, sl
 7d8:	bl	0 <fclose>
 7dc:	mov	r0, r7
 7e0:	ldr	r4, [sp, #8]
 7e4:	ldr	r5, [sp, #12]
 7e8:	ldr	r6, [sp, #16]
 7ec:	ldr	r7, [sp, #20]
 7f0:	ldr	r8, [sp, #24]
 7f4:	ldr	r9, [sp, #28]
 7f8:	ldr	sl, [sp, #32]
 7fc:	ldr	lr, [sp, #4]
 800:	add	sp, sp, #40	; 0x28
 804:	bx	lr
 808:	.word	0x000000bc
 80c:	.word	0x00000047
 810:	.word	0x000000bf
 814:	.word	0x00000119
 818:	.word	0x000000ea
 81c:	.word	0x00000180
 820:	.word	0x0000017b
 824:	.word	0x00000152
 828:	.word	0x00000041
 82c:	.word	0x0000017f
 830:	.word	0x00000128
 834:	.word	0x000000a7

00000838 <flatcc_parse_file>:
 838:	mov	ip, sp
 83c:	sub	sp, sp, #64	; 0x40
 840:	str	ip, [sp, #8]
 844:	str	lr, [sp, #12]
 848:	str	r4, [sp, #20]
 84c:	str	r5, [sp, #24]
 850:	str	r6, [sp, #28]
 854:	str	r7, [sp, #32]
 858:	str	r8, [sp, #36]	; 0x24
 85c:	str	r9, [sp, #40]	; 0x28
 860:	str	sl, [sp, #44]	; 0x2c
 864:	str	fp, [sp, #48]	; 0x30
 868:	mov	fp, r1
 86c:	mov	r6, r0
 870:	mov	r0, fp
 874:	bl	0 <strlen>
 878:	str	r0, [sp, #16]
 87c:	ldr	r1, [r6, #412]	; 0x19c
 880:	add	r0, r1, #32
 884:	add	r1, r6, #352	; 0x160
 888:	mov	r2, #1
 88c:	bl	0 <fb_schema_table_insert_item>
 890:	cmp	r0, #0
 894:	beq	8a0 <flatcc_parse_file+0x68>
 898:	mov	r0, #0
 89c:	b	c20 <flatcc_parse_file+0x3e8>
 8a0:	mov	r4, #0
 8a4:	mov	r7, #0
 8a8:	mov	sl, #0
 8ac:	mvn	r5, #0
 8b0:	ldr	r2, [r6, #552]	; 0x228
 8b4:	cmp	r2, #0
 8b8:	moveq	r9, #1
 8bc:	movne	r9, #0
 8c0:	cmp	r9, #0
 8c4:	beq	948 <flatcc_parse_file+0x110>
 8c8:	ldr	r1, [r6, #128]	; 0x80
 8cc:	add	r2, sp, #56	; 0x38
 8d0:	mov	r0, fp
 8d4:	bl	0 <__flatcc_fb_read_file>
 8d8:	mov	r4, r0
 8dc:	cmp	r0, #0
 8e0:	bne	934 <flatcc_parse_file+0xfc>
 8e4:	ldr	r2, [sp, #56]	; 0x38
 8e8:	ldr	r3, [r6, #412]	; 0x19c
 8ec:	ldr	r0, [r3, #56]	; 0x38
 8f0:	add	r1, r2, r0
 8f4:	ldr	r2, [r6, #128]	; 0x80
 8f8:	cmp	r1, r2
 8fc:	bls	914 <flatcc_parse_file+0xdc>
 900:	ldr	r1, [r6, #128]	; 0x80
 904:	cmp	r1, #0
 908:	movhi	ip, #1
 90c:	movls	ip, #0
 910:	b	918 <flatcc_parse_file+0xe0>
 914:	mov	ip, #0
 918:	cmp	ip, #0
 91c:	beq	948 <flatcc_parse_file+0x110>
 920:	ldr	r1, [pc, #804]	; c4c <flatcc_parse_file+0x414>
 924:	mov	r0, r6
 928:	bl	0 <__flatcc_fb_print_error>
 92c:	mvn	r5, #0
 930:	b	bfc <flatcc_parse_file+0x3c4>
 934:	mov	r0, fp
 938:	bl	0 <__flatcc_fb_copy_path>
 93c:	mov	r7, r0
 940:	mov	r0, r7
 944:	bl	0 <checkmem>
 948:	mov	r8, #0
 94c:	cmp	r4, #0
 950:	bne	968 <flatcc_parse_file+0x130>
 954:	ldr	r3, [r6, #336]	; 0x150
 958:	cmp	r8, r3
 95c:	movlt	r3, #1
 960:	movge	r3, #0
 964:	b	96c <flatcc_parse_file+0x134>
 968:	mov	r3, #0
 96c:	cmp	r3, #0
 970:	beq	a24 <flatcc_parse_file+0x1ec>
 974:	ldr	ip, [r6, #328]	; 0x148
 978:	ldr	r4, [ip, r8, lsl #2]
 97c:	mov	r0, r4
 980:	bl	0 <strlen>
 984:	ldr	r1, [pc, #712]	; c54 <flatcc_parse_file+0x41c>
 988:	mov	r2, #1
 98c:	str	r2, [sp, #4]
 990:	str	r1, [sp]
 994:	ldr	r3, [sp, #16]
 998:	mov	r2, fp
 99c:	mov	r1, r0
 9a0:	mov	r0, r4
 9a4:	bl	0 <__flatcc_fb_create_join_path_n>
 9a8:	mov	r7, r0
 9ac:	bl	0 <checkmem>
 9b0:	ldr	r1, [r6, #128]	; 0x80
 9b4:	add	r2, sp, #56	; 0x38
 9b8:	mov	r0, r7
 9bc:	bl	0 <__flatcc_fb_read_file>
 9c0:	mov	r4, r0
 9c4:	cmp	r0, #0
 9c8:	bne	a1c <flatcc_parse_file+0x1e4>
 9cc:	mov	r0, r7
 9d0:	bl	0 <free>
 9d4:	mov	r7, #0
 9d8:	ldr	r3, [sp, #56]	; 0x38
 9dc:	ldr	r1, [r6, #128]	; 0x80
 9e0:	cmp	r3, r1
 9e4:	bls	9fc <flatcc_parse_file+0x1c4>
 9e8:	ldr	r0, [r6, #128]	; 0x80
 9ec:	cmp	r0, #0
 9f0:	movhi	r1, #1
 9f4:	movls	r1, #0
 9f8:	b	a00 <flatcc_parse_file+0x1c8>
 9fc:	mov	r1, #0
 a00:	cmp	r1, #0
 a04:	beq	a1c <flatcc_parse_file+0x1e4>
 a08:	ldr	r1, [pc, #572]	; c4c <flatcc_parse_file+0x414>
 a0c:	mov	r0, r6
 a10:	bl	0 <__flatcc_fb_print_error>
 a14:	mvn	r5, #0
 a18:	b	bfc <flatcc_parse_file+0x3c4>
 a1c:	add	r8, r8, #1
 a20:	b	94c <flatcc_parse_file+0x114>
 a24:	cmp	r4, #0
 a28:	beq	a34 <flatcc_parse_file+0x1fc>
 a2c:	mov	r3, #0
 a30:	b	a40 <flatcc_parse_file+0x208>
 a34:	cmp	r9, #0
 a38:	moveq	r3, #1
 a3c:	movne	r3, #0
 a40:	cmp	r3, #0
 a44:	beq	af8 <flatcc_parse_file+0x2c0>
 a48:	ldr	r4, [r6, #552]	; 0x228
 a4c:	mov	r0, r4
 a50:	bl	0 <strlen>
 a54:	mov	r1, r0
 a58:	mov	r0, r4
 a5c:	bl	0 <__flatcc_fb_find_basename>
 a60:	mov	r1, r0
 a64:	ldr	r2, [pc, #488]	; c54 <flatcc_parse_file+0x41c>
 a68:	mov	r0, #1
 a6c:	str	r0, [sp, #4]
 a70:	str	r2, [sp]
 a74:	ldr	r3, [sp, #16]
 a78:	mov	r2, fp
 a7c:	mov	r0, r4
 a80:	bl	0 <__flatcc_fb_create_join_path_n>
 a84:	mov	r7, r0
 a88:	bl	0 <checkmem>
 a8c:	ldr	r1, [r6, #128]	; 0x80
 a90:	add	r2, sp, #56	; 0x38
 a94:	mov	r0, r7
 a98:	bl	0 <__flatcc_fb_read_file>
 a9c:	mov	r4, r0
 aa0:	cmp	r4, #0
 aa4:	bne	af8 <flatcc_parse_file+0x2c0>
 aa8:	mov	r0, r7
 aac:	bl	0 <free>
 ab0:	mov	r7, #0
 ab4:	ldr	r3, [sp, #56]	; 0x38
 ab8:	ldr	r1, [r6, #128]	; 0x80
 abc:	cmp	r3, r1
 ac0:	bls	ad8 <flatcc_parse_file+0x2a0>
 ac4:	ldr	r0, [r6, #128]	; 0x80
 ac8:	cmp	r0, #0
 acc:	movhi	r3, #1
 ad0:	movls	r3, #0
 ad4:	b	adc <flatcc_parse_file+0x2a4>
 ad8:	mov	r3, #0
 adc:	cmp	r3, #0
 ae0:	beq	af8 <flatcc_parse_file+0x2c0>
 ae4:	ldr	r1, [pc, #352]	; c4c <flatcc_parse_file+0x414>
 ae8:	mov	r0, r6
 aec:	bl	0 <__flatcc_fb_print_error>
 af0:	mvn	r5, #0
 af4:	b	bfc <flatcc_parse_file+0x3c4>
 af8:	cmp	r4, #0
 afc:	bne	b14 <flatcc_parse_file+0x2dc>
 b00:	ldr	r1, [pc, #328]	; c50 <flatcc_parse_file+0x418>
 b04:	mov	r2, fp
 b08:	mov	r0, r6
 b0c:	bl	0 <__flatcc_fb_print_error>
 b10:	b	bfc <flatcc_parse_file+0x3c4>
 b14:	ldr	r0, [r6, #412]	; 0x19c
 b18:	ldr	r1, [r6, #412]	; 0x19c
 b1c:	ldr	ip, [r1, #56]	; 0x38
 b20:	ldr	r2, [sp, #56]	; 0x38
 b24:	add	r2, ip, r2
 b28:	str	r2, [r0, #56]	; 0x38
 b2c:	str	r7, [r6, #548]	; 0x224
 b30:	mov	r7, #0
 b34:	ldr	r2, [sp, #56]	; 0x38
 b38:	mov	r3, #1
 b3c:	mov	r1, r4
 b40:	mov	r0, r6
 b44:	bl	0 <__flatcc_fb_parse>
 b48:	mov	r5, r0
 b4c:	cmp	r5, #0
 b50:	bne	bf8 <flatcc_parse_file+0x3c0>
 b54:	ldr	r4, [r6, #352]	; 0x160
 b58:	cmp	r4, #0
 b5c:	beq	ba0 <flatcc_parse_file+0x368>
 b60:	ldr	r0, [r4, #8]
 b64:	ldr	r1, [r4, #12]
 b68:	bl	0 <__flatcc_fb_copy_path_n>
 b6c:	mov	sl, r0
 b70:	mov	r0, sl
 b74:	bl	0 <checkmem>
 b78:	mov	r1, sl
 b7c:	mov	r0, r6
 b80:	bl	450 <__parse_include_file>
 b84:	cmp	r0, #0
 b88:	bne	bfc <flatcc_parse_file+0x3c4>
 b8c:	mov	r0, sl
 b90:	bl	0 <free>
 b94:	mov	sl, #0
 b98:	ldr	r4, [r4]
 b9c:	b	b58 <flatcc_parse_file+0x320>
 ba0:	add	r0, r6, #524	; 0x20c
 ba4:	add	r1, r6, #352	; 0x160
 ba8:	mov	r2, #1
 bac:	bl	0 <ptr_set_insert_item>
 bb0:	mov	r0, r6
 bb4:	bl	0 <__flatcc_fb_build_schema>
 bb8:	cmp	r0, #0
 bbc:	bne	bfc <flatcc_parse_file+0x3c4>
 bc0:	ldr	ip, [r6, #240]	; 0xf0
 bc4:	cmp	ip, #0
 bc8:	bne	bd4 <flatcc_parse_file+0x39c>
 bcc:	mov	r0, #0
 bd0:	b	be0 <flatcc_parse_file+0x3a8>
 bd4:	cmp	r9, #0
 bd8:	movne	r0, #1
 bdc:	moveq	r0, #0
 be0:	cmp	r0, #0
 be4:	beq	bf8 <flatcc_parse_file+0x3c0>
 be8:	mov	r0, r6
 bec:	bl	5d4 <__flatcc_gen_depends_file>
 bf0:	cmp	r0, #0
 bf4:	bne	bfc <flatcc_parse_file+0x3c4>
 bf8:	mov	r5, #0
 bfc:	cmp	r7, #0
 c00:	beq	c0c <flatcc_parse_file+0x3d4>
 c04:	mov	r0, r7
 c08:	bl	0 <free>
 c0c:	cmp	sl, #0
 c10:	beq	c1c <flatcc_parse_file+0x3e4>
 c14:	mov	r0, sl
 c18:	bl	0 <free>
 c1c:	mov	r0, r5
 c20:	ldr	r4, [sp, #20]
 c24:	ldr	r5, [sp, #24]
 c28:	ldr	r6, [sp, #28]
 c2c:	ldr	r7, [sp, #32]
 c30:	ldr	r8, [sp, #36]	; 0x24
 c34:	ldr	r9, [sp, #40]	; 0x28
 c38:	ldr	sl, [sp, #44]	; 0x2c
 c3c:	ldr	fp, [sp, #48]	; 0x30
 c40:	ldr	lr, [sp, #12]
 c44:	add	sp, sp, #64	; 0x40
 c48:	bx	lr
 c4c:	.word	0x000000c6
 c50:	.word	0x0000012a
 c54:	.word	0x0000017f

00000c58 <flatcc_generate_binary_schema_to_buffer>:
 c58:	mov	ip, sp
 c5c:	sub	sp, sp, #16
 c60:	str	ip, [sp]
 c64:	str	lr, [sp, #4]
 c68:	str	r2, [sp, #8]
 c6c:	mov	r2, r0
 c70:	add	r0, r2, #128	; 0x80
 c74:	add	r2, r2, #352	; 0x160
 c78:	add	r3, sp, #8
 c7c:	mov	ip, r1
 c80:	mov	r1, r2
 c84:	mov	r2, ip
 c88:	bl	0 <__flatcc_fb_codegen_bfbs_to_buffer>
 c8c:	cmp	r0, #0
 c90:	beq	c9c <flatcc_generate_binary_schema_to_buffer+0x44>
 c94:	ldr	r0, [sp, #8]
 c98:	b	ca0 <flatcc_generate_binary_schema_to_buffer+0x48>
 c9c:	mvn	r0, #0
 ca0:	ldr	lr, [sp, #4]
 ca4:	add	sp, sp, #16
 ca8:	bx	lr

00000cac <flatcc_generate_binary_schema>:
 cac:	mov	ip, sp
 cb0:	sub	sp, sp, #8
 cb4:	str	ip, [sp]
 cb8:	str	lr, [sp, #4]
 cbc:	mov	r2, r0
 cc0:	add	r0, r2, #128	; 0x80
 cc4:	add	r2, r2, #352	; 0x160
 cc8:	mov	r3, r1
 ccc:	mov	r1, r2
 cd0:	mov	r2, r3
 cd4:	bl	0 <__flatcc_fb_codegen_bfbs_alloc_buffer>
 cd8:	ldr	lr, [sp, #4]
 cdc:	add	sp, sp, #8
 ce0:	bx	lr

00000ce4 <flatcc_generate_files>:
 ce4:	mov	ip, sp
 ce8:	sub	sp, sp, #256	; 0x100
 cec:	str	ip, [sp]
 cf0:	str	lr, [sp, #4]
 cf4:	str	r4, [sp, #8]
 cf8:	str	r5, [sp, #12]
 cfc:	str	r6, [sp, #16]
 d00:	str	r7, [sp, #20]
 d04:	mov	r1, r0
 d08:	mov	r4, #0
 d0c:	add	r5, sp, #24
 d10:	cmp	r1, #0
 d14:	beq	d2c <flatcc_generate_files+0x48>
 d18:	ldr	r2, [r1, #108]	; 0x6c
 d1c:	cmp	r2, #0
 d20:	movne	r3, #1
 d24:	moveq	r3, #0
 d28:	b	d30 <flatcc_generate_files+0x4c>
 d2c:	mov	r3, #1
 d30:	cmp	r3, #0
 d34:	beq	d40 <flatcc_generate_files+0x5c>
 d38:	mvn	r0, #0
 d3c:	b	e68 <flatcc_generate_files+0x184>
 d40:	mov	r7, #0
 d44:	cmp	r1, #0
 d48:	beq	d5c <flatcc_generate_files+0x78>
 d4c:	str	r7, [r1, #4]
 d50:	mov	r7, r1
 d54:	ldr	r1, [r1]
 d58:	b	d44 <flatcc_generate_files+0x60>
 d5c:	mov	r6, r0
 d60:	ldr	r1, [r6, #308]	; 0x134
 d64:	cmp	r1, #0
 d68:	beq	d88 <flatcc_generate_files+0xa4>
 d6c:	add	r0, r6, #128	; 0x80
 d70:	add	r1, r6, #352	; 0x160
 d74:	bl	0 <__flatcc_fb_codegen_bfbs_to_file>
 d78:	cmp	r0, #0
 d7c:	beq	d88 <flatcc_generate_files+0xa4>
 d80:	mvn	r0, #0
 d84:	b	e68 <flatcc_generate_files+0x184>
 d88:	add	r1, r6, #128	; 0x80
 d8c:	mov	r0, r5
 d90:	bl	0 <__flatcc_fb_init_output_c>
 d94:	cmp	r0, #0
 d98:	beq	da4 <flatcc_generate_files+0xc0>
 d9c:	mvn	r0, #0
 da0:	b	e68 <flatcc_generate_files+0x184>
 da4:	ldr	r0, [r6, #256]	; 0x100
 da8:	cmp	r0, #0
 dac:	bne	dcc <flatcc_generate_files+0xe8>
 db0:	mov	r0, r5
 db4:	bl	0 <__flatcc_fb_codegen_common_c>
 db8:	mov	r4, r0
 dbc:	cmp	r4, #0
 dc0:	movne	r0, #1
 dc4:	moveq	r0, #0
 dc8:	b	dd0 <flatcc_generate_files+0xec>
 dcc:	mov	r0, #0
 dd0:	cmp	r0, #0
 dd4:	bne	e5c <flatcc_generate_files+0x178>
 dd8:	ldr	r1, [r6, #120]	; 0x78
 ddc:	cmp	r1, #0
 de0:	beq	e5c <flatcc_generate_files+0x178>
 de4:	ldr	r2, [r6, #300]	; 0x12c
 de8:	cmp	r2, #0
 dec:	bne	e04 <flatcc_generate_files+0x120>
 df0:	add	r1, r6, #352	; 0x160
 df4:	mov	r0, r5
 df8:	bl	0 <__flatcc_fb_codegen_c>
 dfc:	mov	r4, r0
 e00:	b	e5c <flatcc_generate_files+0x178>
 e04:	cmp	r4, #0
 e08:	beq	e14 <flatcc_generate_files+0x130>
 e0c:	mov	r3, #0
 e10:	b	e20 <flatcc_generate_files+0x13c>
 e14:	cmp	r7, #0
 e18:	movne	r3, #1
 e1c:	moveq	r3, #0
 e20:	cmp	r3, #0
 e24:	beq	e5c <flatcc_generate_files+0x178>
 e28:	ldr	r3, [r7, #108]	; 0x6c
 e2c:	cmp	r3, #0
 e30:	bne	e50 <flatcc_generate_files+0x16c>
 e34:	add	r1, r7, #352	; 0x160
 e38:	mov	r0, r5
 e3c:	bl	0 <__flatcc_fb_codegen_c>
 e40:	cmp	r0, #0
 e44:	movne	r4, #1
 e48:	moveq	r4, #0
 e4c:	b	e54 <flatcc_generate_files+0x170>
 e50:	mov	r4, #1
 e54:	ldr	r7, [r7, #4]
 e58:	b	e04 <flatcc_generate_files+0x120>
 e5c:	mov	r0, r5
 e60:	bl	0 <__flatcc_fb_end_output_c>
 e64:	mov	r0, r4
 e68:	ldr	r4, [sp, #8]
 e6c:	ldr	r5, [sp, #12]
 e70:	ldr	r6, [sp, #16]
 e74:	ldr	r7, [sp, #20]
 e78:	ldr	lr, [sp, #4]
 e7c:	add	sp, sp, #256	; 0x100
 e80:	bx	lr

00000e84 <flatcc_destroy_context>:
 e84:	mov	ip, sp
 e88:	sub	sp, sp, #16
 e8c:	str	ip, [sp]
 e90:	str	lr, [sp, #4]
 e94:	str	r4, [sp, #8]
 e98:	str	r5, [sp, #12]
 e9c:	mov	r4, r0
 ea0:	cmp	r4, #0
 ea4:	beq	ec4 <flatcc_destroy_context+0x40>
 ea8:	ldr	r5, [r4]
 eac:	mov	r0, r4
 eb0:	bl	0 <__flatcc_fb_clear_parser>
 eb4:	mov	r0, r4
 eb8:	bl	0 <free>
 ebc:	mov	r4, r5
 ec0:	b	ea0 <flatcc_destroy_context+0x1c>
 ec4:	ldr	r4, [sp, #8]
 ec8:	ldr	r5, [sp, #12]
 ecc:	ldr	lr, [sp, #4]
 ed0:	add	sp, sp, #16
 ed4:	bx	lr
