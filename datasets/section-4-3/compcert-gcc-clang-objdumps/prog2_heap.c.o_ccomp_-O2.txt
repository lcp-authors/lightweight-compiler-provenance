
../repos/prog2/CMakeFiles/MT2E1-2.dir/Extras/Miniteste2-Exemplo1/prob2/heap.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <heap_nova>:
   0:	mov	ip, sp
   4:	sub	sp, sp, #16
   8:	str	ip, [sp]
   c:	str	lr, [sp, #4]
  10:	str	r4, [sp, #8]
  14:	str	r5, [sp, #12]
  18:	mov	r5, r0
  1c:	mov	r0, #12
  20:	bl	0 <malloc>
  24:	mov	r4, r0
  28:	cmp	r4, #0
  2c:	bne	38 <heap_nova+0x38>
  30:	mov	r0, #0
  34:	b	70 <heap_nova+0x70>
  38:	mov	r0, #0
  3c:	str	r0, [r4]
  40:	str	r5, [r4, #4]
  44:	mov	r1, #4
  48:	mov	r0, r5
  4c:	bl	0 <calloc>
  50:	str	r0, [r4, #8]
  54:	cmp	r0, #0
  58:	bne	6c <heap_nova+0x6c>
  5c:	mov	r0, r4
  60:	bl	0 <free>
  64:	mov	r0, #0
  68:	b	70 <heap_nova+0x70>
  6c:	mov	r0, r4
  70:	ldr	r4, [sp, #8]
  74:	ldr	r5, [sp, #12]
  78:	ldr	lr, [sp, #4]
  7c:	add	sp, sp, #16
  80:	bx	lr

00000084 <heap_apaga>:
  84:	mov	ip, sp
  88:	sub	sp, sp, #16
  8c:	str	ip, [sp]
  90:	str	lr, [sp, #4]
  94:	str	r4, [sp, #8]
  98:	str	r5, [sp, #12]
  9c:	mov	r4, r0
  a0:	cmp	r4, #0
  a4:	beq	108 <heap_apaga+0x84>
  a8:	mov	r5, #0
  ac:	ldr	r0, [r4]
  b0:	cmp	r5, r0
  b4:	bge	e8 <heap_apaga+0x64>
  b8:	ldr	ip, [r4, #8]
  bc:	ldr	r1, [ip, r5, lsl #2]
  c0:	ldr	r0, [r1, #4]
  c4:	bl	0 <free>
  c8:	ldr	r3, [r4, #8]
  cc:	ldr	r0, [r3, r5, lsl #2]
  d0:	bl	0 <free>
  d4:	ldr	r0, [r4, #8]
  d8:	mov	r2, #0
  dc:	str	r2, [r0, r5, lsl #2]
  e0:	add	r5, r5, #1
  e4:	b	ac <heap_apaga+0x28>
  e8:	ldr	r0, [r4, #8]
  ec:	bl	0 <free>
  f0:	mov	r0, r4
  f4:	ldr	r4, [sp, #8]
  f8:	ldr	r5, [sp, #12]
  fc:	ldr	lr, [sp, #4]
 100:	add	sp, sp, #16
 104:	b	0 <free>
 108:	ldr	r4, [sp, #8]
 10c:	ldr	r5, [sp, #12]
 110:	ldr	lr, [sp, #4]
 114:	add	sp, sp, #16
 118:	bx	lr

0000011c <elemento_cria>:
 11c:	mov	ip, sp
 120:	sub	sp, sp, #24
 124:	str	ip, [sp]
 128:	str	lr, [sp, #4]
 12c:	str	r4, [sp, #8]
 130:	str	r5, [sp, #12]
 134:	str	r6, [sp, #16]
 138:	mov	r4, r1
 13c:	mov	r5, r0
 140:	mov	r0, #8
 144:	bl	0 <malloc>
 148:	mov	r6, r0
 14c:	cmp	r6, #0
 150:	bne	15c <elemento_cria+0x40>
 154:	mov	r0, #0
 158:	b	19c <elemento_cria+0x80>
 15c:	mov	r0, r4
 160:	bl	0 <strlen>
 164:	add	r0, r0, #1
 168:	mov	r1, #1
 16c:	bl	0 <calloc>
 170:	str	r0, [r6, #4]
 174:	cmp	r0, #0
 178:	bne	18c <elemento_cria+0x70>
 17c:	mov	r0, r6
 180:	bl	0 <free>
 184:	mov	r0, #0
 188:	b	19c <elemento_cria+0x80>
 18c:	mov	r1, r4
 190:	bl	0 <strcpy>
 194:	str	r5, [r6]
 198:	mov	r0, r6
 19c:	ldr	r4, [sp, #8]
 1a0:	ldr	r5, [sp, #12]
 1a4:	ldr	r6, [sp, #16]
 1a8:	ldr	lr, [sp, #4]
 1ac:	add	sp, sp, #24
 1b0:	bx	lr

000001b4 <heap_insere>:
 1b4:	mov	ip, sp
 1b8:	sub	sp, sp, #16
 1bc:	str	ip, [sp]
 1c0:	str	lr, [sp, #4]
 1c4:	str	r4, [sp, #8]
 1c8:	str	r5, [sp, #12]
 1cc:	mov	r5, r0
 1d0:	ldr	r0, [r5]
 1d4:	ldr	ip, [r5, #4]
 1d8:	cmp	r0, ip
 1dc:	blt	1e8 <heap_insere+0x34>
 1e0:	mov	r0, #0
 1e4:	b	27c <heap_insere+0xc8>
 1e8:	mov	r0, r2
 1ec:	bl	11c <elemento_cria>
 1f0:	cmp	r0, #0
 1f4:	bne	200 <heap_insere+0x4c>
 1f8:	mov	r0, #0
 1fc:	b	27c <heap_insere+0xc8>
 200:	ldr	r4, [r5]
 204:	ldr	ip, [r5, #8]
 208:	str	r0, [ip, r4, lsl #2]
 20c:	ldr	r2, [r5]
 210:	add	r3, r2, #1
 214:	str	r3, [r5]
 218:	cmp	r4, #0
 21c:	beq	278 <heap_insere+0xc4>
 220:	ldr	r1, [r5, #8]
 224:	ldr	r0, [r1, r4, lsl #2]
 228:	sub	r2, r4, #1
 22c:	asr	lr, r2, #31
 230:	add	lr, r2, lr, lsr #31
 234:	asr	r3, lr, #1
 238:	ldr	r1, [r1, r3, lsl #2]
 23c:	bl	4b0 <menor_que>
 240:	cmp	r0, #0
 244:	beq	278 <heap_insere+0xc4>
 248:	ldr	r2, [r5, #8]
 24c:	sub	r1, r4, #1
 250:	asr	lr, r1, #31
 254:	add	lr, r1, lr, lsr #31
 258:	asr	r1, lr, #1
 25c:	ldr	ip, [r2, r1, lsl #2]
 260:	ldr	r0, [r2, r4, lsl #2]
 264:	str	r0, [r2, r1, lsl #2]
 268:	ldr	r2, [r5, #8]
 26c:	str	ip, [r2, r4, lsl #2]
 270:	mov	r4, r1
 274:	b	218 <heap_insere+0x64>
 278:	mov	r0, #1
 27c:	ldr	r4, [sp, #8]
 280:	ldr	r5, [sp, #12]
 284:	ldr	lr, [sp, #4]
 288:	add	sp, sp, #16
 28c:	bx	lr

00000290 <heap_remove>:
 290:	mov	ip, sp
 294:	sub	sp, sp, #24
 298:	str	ip, [sp]
 29c:	str	lr, [sp, #4]
 2a0:	str	r4, [sp, #8]
 2a4:	str	r5, [sp, #12]
 2a8:	str	r6, [sp, #16]
 2ac:	str	r7, [sp, #20]
 2b0:	mov	r5, r0
 2b4:	cmp	r5, #0
 2b8:	beq	3a4 <heap_remove+0x114>
 2bc:	ldr	r3, [r5]
 2c0:	cmp	r3, #0
 2c4:	ble	3a4 <heap_remove+0x114>
 2c8:	ldr	r2, [r5, #8]
 2cc:	ldr	r0, [r2]
 2d0:	ldr	r4, [r0, #4]
 2d4:	bl	0 <free>
 2d8:	ldr	r2, [r5]
 2dc:	sub	r1, r2, #1
 2e0:	str	r1, [r5]
 2e4:	ldr	r0, [r5, #8]
 2e8:	ldr	r2, [r0, r1, lsl #2]
 2ec:	str	r2, [r0]
 2f0:	ldr	r3, [r5, #8]
 2f4:	ldr	r1, [r5]
 2f8:	mov	r0, #0
 2fc:	str	r0, [r3, r1, lsl #2]
 300:	mov	r7, #0
 304:	lsl	r3, r7, #1
 308:	add	r6, r3, #1
 30c:	ldr	ip, [r5]
 310:	cmp	r6, ip
 314:	bge	39c <heap_remove+0x10c>
 318:	add	r0, r3, #2
 31c:	cmp	r0, ip
 320:	bge	34c <heap_remove+0xbc>
 324:	ldr	ip, [r5, #8]
 328:	lsl	r2, r7, #3
 32c:	add	r1, ip, r2
 330:	ldr	r0, [r1, #8]
 334:	ldr	r1, [r1, #4]
 338:	bl	4b0 <menor_que>
 33c:	cmp	r0, #0
 340:	movne	ip, #1
 344:	moveq	ip, #0
 348:	b	350 <heap_remove+0xc0>
 34c:	mov	ip, #0
 350:	lsl	r0, r7, #1
 354:	add	r1, r0, #2
 358:	cmp	ip, #0
 35c:	movne	r6, r1
 360:	moveq	r6, r6
 364:	ldr	r2, [r5, #8]
 368:	ldr	r0, [r2, r6, lsl #2]
 36c:	ldr	r1, [r2, r7, lsl #2]
 370:	bl	4b0 <menor_que>
 374:	cmp	r0, #0
 378:	beq	39c <heap_remove+0x10c>
 37c:	ldr	r1, [r5, #8]
 380:	ldr	ip, [r1, r6, lsl #2]
 384:	ldr	r3, [r1, r7, lsl #2]
 388:	str	r3, [r1, r6, lsl #2]
 38c:	ldr	r3, [r5, #8]
 390:	str	ip, [r3, r7, lsl #2]
 394:	mov	r7, r6
 398:	b	304 <heap_remove+0x74>
 39c:	mov	r0, r4
 3a0:	b	3a8 <heap_remove+0x118>
 3a4:	mov	r0, #0
 3a8:	ldr	r4, [sp, #8]
 3ac:	ldr	r5, [sp, #12]
 3b0:	ldr	r6, [sp, #16]
 3b4:	ldr	r7, [sp, #20]
 3b8:	ldr	lr, [sp, #4]
 3bc:	add	sp, sp, #24
 3c0:	bx	lr

000003c4 <mostraHeap>:
 3c4:	mov	ip, sp
 3c8:	sub	sp, sp, #24
 3cc:	str	ip, [sp]
 3d0:	str	lr, [sp, #4]
 3d4:	str	r4, [sp, #8]
 3d8:	str	r5, [sp, #12]
 3dc:	str	r6, [sp, #16]
 3e0:	str	r7, [sp, #20]
 3e4:	mov	r4, r1
 3e8:	mov	r5, r0
 3ec:	mov	r6, #0
 3f0:	ldr	r0, [r5]
 3f4:	cmp	r4, r0
 3f8:	bge	478 <mostraHeap+0xb4>
 3fc:	mov	r1, r4
 400:	cmp	r1, #0
 404:	ble	420 <mostraHeap+0x5c>
 408:	sub	r2, r1, #1
 40c:	asr	lr, r2, #31
 410:	add	lr, r2, lr, lsr #31
 414:	asr	r1, lr, #1
 418:	add	r6, r6, #1
 41c:	b	400 <mostraHeap+0x3c>
 420:	lsl	r0, r4, #1
 424:	add	r1, r0, #1
 428:	mov	r0, r5
 42c:	bl	3c4 <mostraHeap>
 430:	mov	r7, #0
 434:	add	r2, r6, r6, lsl #1
 438:	cmp	r7, r2
 43c:	bge	450 <mostraHeap+0x8c>
 440:	ldr	r0, [pc, #100]	; 4ac <mostraHeap+0xe8>
 444:	bl	0 <printf>
 448:	add	r7, r7, #1
 44c:	b	434 <mostraHeap+0x70>
 450:	ldr	r0, [pc, #80]	; 4a8 <mostraHeap+0xe4>
 454:	ldr	r3, [r5, #8]
 458:	ldr	r2, [r3, r4, lsl #2]
 45c:	ldr	r1, [r2, #4]
 460:	ldr	r2, [r2]
 464:	bl	0 <printf>
 468:	lsl	ip, r4, #1
 46c:	add	r1, ip, #2
 470:	mov	r0, r5
 474:	bl	3c4 <mostraHeap>
 478:	cmp	r6, #0
 47c:	bne	488 <mostraHeap+0xc4>
 480:	ldr	r0, [pc, #28]	; 4a4 <mostraHeap+0xe0>
 484:	bl	0 <printf>
 488:	ldr	r4, [sp, #8]
 48c:	ldr	r5, [sp, #12]
 490:	ldr	r6, [sp, #16]
 494:	ldr	r7, [sp, #20]
 498:	ldr	lr, [sp, #4]
 49c:	add	sp, sp, #24
 4a0:	bx	lr
 4a4:	.word	0x00000009
 4a8:	.word	0x00000000
 4ac:	.word	0x0000000b

000004b0 <menor_que>:
 4b0:	mov	ip, sp
 4b4:	sub	sp, sp, #8
 4b8:	str	ip, [sp]
 4bc:	str	lr, [sp, #4]
 4c0:	mov	r2, #1
 4c4:	cmp	r1, #0
 4c8:	moveq	r3, #1
 4cc:	movne	r3, #0
 4d0:	cmp	r0, #0
 4d4:	moveq	ip, r2
 4d8:	movne	ip, r3
 4dc:	cmp	ip, #0
 4e0:	beq	4ec <menor_que+0x3c>
 4e4:	mov	r0, #0
 4e8:	b	500 <menor_que+0x50>
 4ec:	ldr	r0, [r0]
 4f0:	ldr	r1, [r1]
 4f4:	cmp	r0, r1
 4f8:	movlt	r0, #1
 4fc:	movge	r0, #0
 500:	ldr	lr, [sp, #4]
 504:	add	sp, sp, #8
 508:	bx	lr
