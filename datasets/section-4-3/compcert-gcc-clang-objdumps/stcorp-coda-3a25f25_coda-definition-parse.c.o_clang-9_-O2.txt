
../compcert-repos/stcorp-coda-3a25f25/CMakeFiles/coda_static.dir/libcoda/coda-definition-parse.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <coda_read_product_definition>:
       0:	push	{r4, r5, r6, sl, fp, lr}
       4:	add	fp, sp, #16
       8:	sub	sp, sp, #8
       c:	mov	r4, r0
      10:	ldr	r0, [r0, #24]
      14:	cmp	r0, #0
      18:	bne	7c <coda_read_product_definition+0x7c>
      1c:	ldr	r0, [r4, #44]	; 0x2c
      20:	movw	r1, #0
      24:	movt	r1, #0
      28:	ldr	r5, [r0, #20]
      2c:	ldr	r0, [r5, #8]
      30:	bl	0 <coda_za_open>
      34:	cmp	r0, #0
      38:	beq	6c <coda_read_product_definition+0x6c>
      3c:	ldr	r2, [r4, #8]
      40:	mov	r1, #2
      44:	mov	r3, r5
      48:	mov	r6, r0
      4c:	str	r4, [sp]
      50:	bl	ec <parse_entry>
      54:	mov	r4, r0
      58:	mov	r0, r6
      5c:	bl	0 <coda_za_close>
      60:	cmp	r4, #0
      64:	mvnne	r4, #0
      68:	b	70 <coda_read_product_definition+0x70>
      6c:	mvn	r4, #0
      70:	mov	r0, r4
      74:	sub	sp, fp, #16
      78:	pop	{r4, r5, r6, sl, fp, pc}
      7c:	movw	r0, #0
      80:	movw	r1, #0
      84:	movw	r3, #0
      88:	movw	r2, #4269	; 0x10ad
      8c:	movt	r0, #0
      90:	movt	r1, #0
      94:	movt	r3, #0
      98:	bl	0 <__assert_fail>

0000009c <handle_ziparchive_error>:
      9c:	sub	sp, sp, #12
      a0:	push	{r4, sl, fp, lr}
      a4:	add	fp, sp, #8
      a8:	sub	sp, sp, #4
      ac:	mov	r4, r0
      b0:	add	r0, fp, #8
      b4:	stm	r0, {r1, r2, r3}
      b8:	movw	r0, #65136	; 0xfe70
      bc:	movw	r1, #0
      c0:	movt	r0, #65535	; 0xffff
      c4:	movt	r1, #0
      c8:	bl	0 <coda_set_error>
      cc:	add	r1, fp, #8
      d0:	mov	r0, r4
      d4:	str	r1, [sp]
      d8:	bl	0 <coda_add_error_message_vargs>
      dc:	sub	sp, fp, #8
      e0:	pop	{r4, sl, fp, lr}
      e4:	add	sp, sp, #12
      e8:	bx	lr

000000ec <parse_entry>:
      ec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
      f0:	add	fp, sp, #28
      f4:	sub	sp, sp, #60	; 0x3c
      f8:	mov	sl, r3
      fc:	mov	r9, r2
     100:	mov	r5, r1
     104:	mov	r8, r0
     108:	cmp	r1, #2
     10c:	beq	1b8 <parse_entry+0xcc>
     110:	cmp	r5, #1
     114:	beq	160 <parse_entry+0x74>
     118:	mov	r6, #0
     11c:	cmp	r5, #0
     120:	bne	218 <parse_entry+0x12c>
     124:	movw	r0, #0
     128:	movt	r0, #0
     12c:	bl	0 <strdup>
     130:	mov	r6, r0
     134:	cmp	r0, #0
     138:	bne	218 <parse_entry+0x12c>
     13c:	movw	r1, #0
     140:	movw	r2, #0
     144:	mvn	r0, #0
     148:	movw	r3, #4097	; 0x1001
     14c:	movt	r1, #0
     150:	movt	r2, #0
     154:	bl	0 <coda_set_error>
     158:	mov	r6, #0
     15c:	b	218 <parse_entry+0x12c>
     160:	cmp	r9, #0
     164:	beq	6f0 <parse_entry+0x604>
     168:	mov	r0, r9
     16c:	bl	0 <strlen>
     170:	add	r4, r0, #11
     174:	mov	r0, r4
     178:	bl	0 <malloc>
     17c:	mov	r6, r0
     180:	cmp	r0, #0
     184:	bne	1ac <parse_entry+0xc0>
     188:	movw	r1, #0
     18c:	movw	r3, #0
     190:	movw	r0, #4106	; 0x100a
     194:	mov	r2, r4
     198:	movt	r1, #0
     19c:	movt	r3, #0
     1a0:	str	r0, [sp]
     1a4:	mvn	r0, #0
     1a8:	bl	0 <coda_set_error>
     1ac:	movw	r1, #0
     1b0:	movt	r1, #0
     1b4:	b	20c <parse_entry+0x120>
     1b8:	cmp	r9, #0
     1bc:	beq	704 <parse_entry+0x618>
     1c0:	mov	r0, r9
     1c4:	bl	0 <strlen>
     1c8:	add	r4, r0, #14
     1cc:	mov	r0, r4
     1d0:	bl	0 <malloc>
     1d4:	mov	r6, r0
     1d8:	cmp	r0, #0
     1dc:	bne	204 <parse_entry+0x118>
     1e0:	movw	r1, #0
     1e4:	movw	r3, #0
     1e8:	movw	r0, #4116	; 0x1014
     1ec:	mov	r2, r4
     1f0:	movt	r1, #0
     1f4:	movt	r3, #0
     1f8:	str	r0, [sp]
     1fc:	mvn	r0, #0
     200:	bl	0 <coda_set_error>
     204:	movw	r1, #0
     208:	movt	r1, #0
     20c:	mov	r0, r6
     210:	mov	r2, r9
     214:	bl	0 <sprintf>
     218:	mov	r0, r8
     21c:	mov	r1, r6
     220:	bl	0 <coda_za_get_entry_by_name>
     224:	cmp	r0, #0
     228:	beq	2ac <parse_entry+0x1c0>
     22c:	ldr	r7, [fp, #8]
     230:	mov	r4, r0
     234:	mov	r0, r6
     238:	bl	0 <free>
     23c:	mov	r0, #0
     240:	str	r0, [sp, #12]
     244:	str	r0, [sp, #8]
     248:	str	r0, [sp, #44]	; 0x2c
     24c:	str	r0, [sp, #40]	; 0x28
     250:	str	r0, [sp, #16]
     254:	str	r0, [sp, #48]	; 0x30
     258:	str	r0, [sp, #56]	; 0x38
     25c:	mov	r0, #1
     260:	str	r0, [sp, #52]	; 0x34
     264:	add	r0, sp, #24
     268:	str	r7, [sp, #36]	; 0x24
     26c:	stm	r0, {r8, r9, sl}
     270:	mov	r0, r4
     274:	bl	0 <coda_za_get_entry_size>
     278:	mov	sl, r0
     27c:	bl	0 <malloc>
     280:	cmp	r0, #0
     284:	str	r0, [sp, #20]
     288:	beq	2e8 <parse_entry+0x1fc>
     28c:	mov	r1, r0
     290:	mov	r0, r4
     294:	bl	0 <coda_za_read_entry>
     298:	cmp	r0, #0
     29c:	beq	31c <parse_entry+0x230>
     2a0:	add	r0, sp, #8
     2a4:	bl	a58 <parser_info_delete>
     2a8:	b	438 <parse_entry+0x34c>
     2ac:	cmp	r5, #2
     2b0:	beq	40c <parse_entry+0x320>
     2b4:	cmp	r5, #1
     2b8:	beq	3ec <parse_entry+0x300>
     2bc:	cmp	r5, #0
     2c0:	bne	430 <parse_entry+0x344>
     2c4:	mov	r0, r8
     2c8:	bl	0 <coda_za_get_filename>
     2cc:	movw	r1, #0
     2d0:	mov	r2, r0
     2d4:	movw	r0, #65136	; 0xfe70
     2d8:	movt	r0, #65535	; 0xffff
     2dc:	movt	r1, #0
     2e0:	bl	0 <coda_set_error>
     2e4:	b	430 <parse_entry+0x344>
     2e8:	movw	r1, #0
     2ec:	movw	r3, #0
     2f0:	movw	r0, #4156	; 0x103c
     2f4:	mvn	r4, #0
     2f8:	mov	r2, sl
     2fc:	str	r0, [sp]
     300:	movt	r1, #0
     304:	movt	r3, #0
     308:	mvn	r0, #0
     30c:	bl	0 <coda_set_error>
     310:	add	r0, sp, #8
     314:	bl	a58 <parser_info_delete>
     318:	b	43c <parse_entry+0x350>
     31c:	mov	r0, #1
     320:	bl	0 <coda_hashtable_new>
     324:	cmp	r0, #0
     328:	str	r0, [sp, #16]
     32c:	beq	448 <parse_entry+0x35c>
     330:	movw	r7, #0
     334:	mov	r4, r0
     338:	mov	r6, #0
     33c:	movt	r7, #0
     340:	ldr	r1, [r7, -r6, lsl #2]
     344:	mov	r0, r4
     348:	bl	0 <coda_hashtable_add_name>
     34c:	cmp	r0, #0
     350:	bne	6d0 <parse_entry+0x5e4>
     354:	sub	r6, r6, #1
     358:	cmn	r6, #43	; 0x2b
     35c:	bne	340 <parse_entry+0x254>
     360:	mov	r0, #0
     364:	mov	r1, #32
     368:	mov	r6, #0
     36c:	bl	0 <coda_XML_ParserCreateNS>
     370:	cmp	r0, #0
     374:	str	r0, [sp, #12]
     378:	beq	468 <parse_entry+0x37c>
     37c:	add	r4, sp, #8
     380:	mov	r1, r4
     384:	bl	0 <coda_XML_SetUserData>
     388:	ldr	r0, [sp, #12]
     38c:	movw	r1, #0
     390:	movw	r2, #0
     394:	movt	r1, #0
     398:	movt	r2, #0
     39c:	bl	0 <coda_XML_SetElementHandler>
     3a0:	mov	r0, r4
     3a4:	mvn	r1, #0
     3a8:	mov	r2, #0
     3ac:	bl	ddc <push_node>
     3b0:	ldr	r0, [sp, #8]
     3b4:	cmp	r5, #2
     3b8:	str	r6, [r0, #48]	; 0x30
     3bc:	beq	580 <parse_entry+0x494>
     3c0:	cmp	r5, #1
     3c4:	beq	47c <parse_entry+0x390>
     3c8:	cmp	r5, #0
     3cc:	bne	594 <parse_entry+0x4a8>
     3d0:	movw	r1, #0
     3d4:	movt	r1, #0
     3d8:	str	r1, [r0, #344]	; 0x158
     3dc:	movw	r1, #0
     3e0:	movt	r1, #0
     3e4:	str	r1, [r0, #172]	; 0xac
     3e8:	b	594 <parse_entry+0x4a8>
     3ec:	mov	r0, r8
     3f0:	bl	0 <coda_za_get_filename>
     3f4:	movw	r1, #0
     3f8:	mov	r2, r0
     3fc:	movw	r0, #65136	; 0xfe70
     400:	movt	r0, #65535	; 0xffff
     404:	movt	r1, #0
     408:	b	428 <parse_entry+0x33c>
     40c:	mov	r0, r8
     410:	bl	0 <coda_za_get_filename>
     414:	movw	r1, #0
     418:	mov	r2, r0
     41c:	movw	r0, #65136	; 0xfe70
     420:	movt	r0, #65535	; 0xffff
     424:	movt	r1, #0
     428:	mov	r3, r9
     42c:	bl	0 <coda_set_error>
     430:	mov	r0, r6
     434:	bl	0 <free>
     438:	mvn	r4, #0
     43c:	mov	r0, r4
     440:	sub	sp, fp, #28
     444:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
     448:	movw	r1, #0
     44c:	movw	r2, #0
     450:	mvn	r4, #0
     454:	mvn	r0, #0
     458:	movw	r3, #4170	; 0x104a
     45c:	movt	r1, #0
     460:	movt	r2, #0
     464:	b	30c <parse_entry+0x220>
     468:	movw	r1, #0
     46c:	mvn	r0, #13
     470:	movt	r1, #0
     474:	bl	0 <coda_set_error>
     478:	b	2a0 <parse_entry+0x1b4>
     47c:	movw	r6, #0
     480:	movw	r3, #0
     484:	movw	r1, #0
     488:	movw	r7, #0
     48c:	add	r4, r0, #52	; 0x34
     490:	movw	ip, #0
     494:	movt	r6, #0
     498:	movt	r1, #0
     49c:	movt	r3, #0
     4a0:	movt	r7, #0
     4a4:	mov	r2, r4
     4a8:	movt	ip, #0
     4ac:	vmov.32	d19[0], r6
     4b0:	movw	r6, #0
     4b4:	vmov.32	d18[0], r7
     4b8:	vdup.32	q8, r1
     4bc:	add	r7, r4, #172	; 0xac
     4c0:	movt	r6, #0
     4c4:	vmov.32	d19[1], r6
     4c8:	vmov.32	d18[1], r3
     4cc:	mov	r3, #320	; 0x140
     4d0:	movw	r6, #0
     4d4:	movt	r6, #0
     4d8:	vst1.32	{d16-d17}, [r7]
     4dc:	movw	r7, #0
     4e0:	movt	r7, #0
     4e4:	vst1.32	{d18-d19}, [r2], r3
     4e8:	movw	r3, #0
     4ec:	str	r1, [r0, #260]	; 0x104
     4f0:	movt	r3, #0
     4f4:	str	r3, [r0, #88]	; 0x58
     4f8:	movw	r3, #0
     4fc:	str	r1, [r0, #292]	; 0x124
     500:	movt	r3, #0
     504:	str	r3, [r0, #120]	; 0x78
     508:	movw	r3, #0
     50c:	str	r1, [r0, #304]	; 0x130
     510:	movt	r3, #0
     514:	str	r3, [r0, #132]	; 0x84
     518:	movw	r3, #0
     51c:	str	r1, [r0, #332]	; 0x14c
     520:	movt	r3, #0
     524:	str	r3, [r0, #160]	; 0xa0
     528:	movw	r3, #0
     52c:	str	r1, [r0, #360]	; 0x168
     530:	str	r1, [r0, #364]	; 0x16c
     534:	movt	r3, #0
     538:	str	r3, [r0, #188]	; 0xbc
     53c:	str	r7, [r0, #192]	; 0xc0
     540:	movw	r7, #0
     544:	movw	r3, #0
     548:	vst1.32	{d16-d17}, [r2]
     54c:	add	r2, r4, #148	; 0x94
     550:	movt	r3, #0
     554:	movt	r7, #0
     558:	vmov.32	d19[0], r3
     55c:	vmov.32	d18[0], r6
     560:	vmov.32	d19[1], r7
     564:	vmov.32	d18[1], ip
     568:	vst1.32	{d18-d19}, [r2]
     56c:	str	r1, [r0, #392]	; 0x188
     570:	movw	r1, #0
     574:	movt	r1, #0
     578:	str	r1, [r0, #220]	; 0xdc
     57c:	b	594 <parse_entry+0x4a8>
     580:	mov	r1, #0
     584:	str	r1, [r0, #348]	; 0x15c
     588:	movw	r1, #0
     58c:	movt	r1, #0
     590:	str	r1, [r0, #176]	; 0xb0
     594:	ldr	r0, [pc, #384]	; 71c <parse_entry+0x630>
     598:	mov	r1, #0
     59c:	ldr	r6, [pc, r0]
     5a0:	bl	0 <__aeabi_read_tp>
     5a4:	str	r1, [r0, r6]
     5a8:	mov	r4, r0
     5ac:	ldr	r0, [sp, #12]
     5b0:	ldr	r1, [sp, #20]
     5b4:	mov	r2, sl
     5b8:	mov	r3, #1
     5bc:	bl	0 <coda_XML_Parse>
     5c0:	ldr	r1, [r4, r6]
     5c4:	cmp	r0, #0
     5c8:	beq	5d4 <parse_entry+0x4e8>
     5cc:	cmp	r1, #0
     5d0:	beq	5e0 <parse_entry+0x4f4>
     5d4:	ldr	r0, [sp, #48]	; 0x30
     5d8:	cmp	r0, #0
     5dc:	beq	5f0 <parse_entry+0x504>
     5e0:	add	r0, sp, #8
     5e4:	bl	a58 <parser_info_delete>
     5e8:	mov	r4, #0
     5ec:	b	43c <parse_entry+0x350>
     5f0:	cmp	r1, #0
     5f4:	bne	62c <parse_entry+0x540>
     5f8:	ldr	r0, [sp, #12]
     5fc:	bl	0 <coda_XML_GetErrorCode>
     600:	bl	0 <coda_XML_ErrorString>
     604:	movw	r1, #0
     608:	mov	r2, r0
     60c:	movw	r0, #65136	; 0xfe70
     610:	movt	r0, #65535	; 0xffff
     614:	movt	r1, #0
     618:	bl	0 <coda_set_error>
     61c:	ldr	r0, [pc, #252]	; 720 <parse_entry+0x634>
     620:	ldr	r1, [pc, r0]
     624:	bl	0 <__aeabi_read_tp>
     628:	ldr	r1, [r0, r1]
     62c:	movw	r0, #401	; 0x191
     630:	add	r0, r1, r0
     634:	cmp	r0, #1
     638:	bhi	2a0 <parse_entry+0x1b4>
     63c:	ldr	r0, [sp, #52]	; 0x34
     640:	cmp	r0, #0
     644:	beq	2a0 <parse_entry+0x1b4>
     648:	mov	r0, r8
     64c:	bl	0 <coda_za_get_filename>
     650:	mov	r1, r0
     654:	movw	r0, #0
     658:	movt	r0, #0
     65c:	bl	0 <coda_add_error_message>
     660:	cmp	r5, #2
     664:	beq	688 <parse_entry+0x59c>
     668:	cmp	r5, #1
     66c:	beq	694 <parse_entry+0x5a8>
     670:	cmp	r5, #0
     674:	bne	6a4 <parse_entry+0x5b8>
     678:	movw	r0, #0
     67c:	mov	r1, #0
     680:	movt	r0, #0
     684:	b	6a0 <parse_entry+0x5b4>
     688:	movw	r0, #0
     68c:	movt	r0, #0
     690:	b	69c <parse_entry+0x5b0>
     694:	movw	r0, #0
     698:	movt	r0, #0
     69c:	mov	r1, r9
     6a0:	bl	0 <coda_add_error_message>
     6a4:	ldr	r0, [sp, #12]
     6a8:	bl	0 <coda_XML_GetCurrentLineNumber>
     6ac:	mov	r4, r0
     6b0:	ldr	r0, [sp, #12]
     6b4:	bl	0 <coda_XML_GetCurrentByteIndex>
     6b8:	mov	r2, r0
     6bc:	movw	r0, #0
     6c0:	mov	r1, r4
     6c4:	movt	r0, #0
     6c8:	bl	0 <coda_add_error_message>
     6cc:	b	2a0 <parse_entry+0x1b4>
     6d0:	movw	r0, #0
     6d4:	movw	r1, #0
     6d8:	movw	r3, #0
     6dc:	movw	r2, #4178	; 0x1052
     6e0:	movt	r0, #0
     6e4:	movt	r1, #0
     6e8:	movt	r3, #0
     6ec:	bl	0 <__assert_fail>
     6f0:	movw	r0, #0
     6f4:	movw	r1, #0
     6f8:	movw	r3, #0
     6fc:	movw	r2, #4101	; 0x1005
     700:	b	714 <parse_entry+0x628>
     704:	movw	r0, #0
     708:	movw	r1, #0
     70c:	movw	r3, #0
     710:	movw	r2, #4111	; 0x100f
     714:	movt	r0, #0
     718:	b	6e4 <parse_entry+0x5f8>
     71c:	.word	0x00000178
     720:	.word	0x000000f8

00000724 <coda_read_definitions>:
     724:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
     728:	add	fp, sp, #28
     72c:	sub	sp, sp, #108	; 0x6c
     730:	bl	0 <strdup>
     734:	cmp	r0, #0
     738:	beq	988 <coda_read_definitions+0x264>
     73c:	str	r0, [sp, #8]
     740:	ldrb	r0, [r0]
     744:	cmp	r0, #0
     748:	beq	978 <coda_read_definitions+0x254>
     74c:	ldr	r6, [sp, #8]
     750:	add	r7, sp, #16
     754:	mov	r8, #0
     758:	b	778 <coda_read_definitions+0x54>
     75c:	mov	r0, r8
     760:	bl	0 <closedir>
     764:	add	r7, sp, #16
     768:	mov	r8, #0
     76c:	ldrb	r0, [r6]
     770:	cmp	r0, #0
     774:	beq	978 <coda_read_definitions+0x254>
     778:	uxtb	r0, r0
     77c:	mov	sl, r6
     780:	add	r6, r6, #1
     784:	subs	r1, r0, #58	; 0x3a
     788:	clz	r0, r0
     78c:	movwne	r1, #1
     790:	lsr	r0, r0, #5
     794:	cmp	r0, r1
     798:	beq	7c0 <coda_read_definitions+0x9c>
     79c:	ldrb	r0, [r6], #1
     7a0:	subs	r1, r0, #58	; 0x3a
     7a4:	clz	r0, r0
     7a8:	movwne	r1, #1
     7ac:	lsr	r0, r0, #5
     7b0:	teq	r0, r1
     7b4:	bne	79c <coda_read_definitions+0x78>
     7b8:	sub	r1, r6, #1
     7bc:	b	7c4 <coda_read_definitions+0xa0>
     7c0:	mov	r1, sl
     7c4:	cmp	r0, #0
     7c8:	mov	r0, #3
     7cc:	mov	r2, r7
     7d0:	strbeq	r8, [r1]
     7d4:	movne	r6, r1
     7d8:	mov	r1, sl
     7dc:	bl	0 <__xstat>
     7e0:	cmp	r0, #0
     7e4:	bne	76c <coda_read_definitions+0x48>
     7e8:	ldr	r0, [sp, #32]
     7ec:	tst	r0, #16384	; 0x4000
     7f0:	bne	844 <coda_read_definitions+0x120>
     7f4:	tst	r0, #32768	; 0x8000
     7f8:	beq	76c <coda_read_definitions+0x48>
     7fc:	movw	r1, #0
     800:	mov	r0, sl
     804:	movt	r1, #0
     808:	bl	0 <coda_za_open>
     80c:	cmp	r0, #0
     810:	beq	a14 <coda_read_definitions+0x2f0>
     814:	mov	r1, #0
     818:	mov	r2, #0
     81c:	mov	r3, #0
     820:	mov	r4, r0
     824:	str	r8, [sp]
     828:	bl	ec <parse_entry>
     82c:	mov	r5, r0
     830:	mov	r0, r4
     834:	bl	0 <coda_za_close>
     838:	cmp	r5, #0
     83c:	beq	76c <coda_read_definitions+0x48>
     840:	b	a14 <coda_read_definitions+0x2f0>
     844:	mov	r0, sl
     848:	bl	0 <opendir>
     84c:	cmp	r0, #0
     850:	beq	a2c <coda_read_definitions+0x308>
     854:	mov	r8, r0
     858:	bl	0 <readdir>
     85c:	movw	r4, #0
     860:	mov	r7, r0
     864:	cmp	r0, #0
     868:	str	r8, [sp, #12]
     86c:	movt	r4, #0
     870:	bne	8a0 <coda_read_definitions+0x17c>
     874:	b	75c <coda_read_definitions+0x38>
     878:	mov	r0, r8
     87c:	bl	0 <free>
     880:	ldr	r8, [sp, #12]
     884:	movw	r4, #0
     888:	movt	r4, #0
     88c:	mov	r0, r8
     890:	bl	0 <readdir>
     894:	mov	r7, r0
     898:	cmp	r0, #0
     89c:	beq	75c <coda_read_definitions+0x38>
     8a0:	add	r9, r7, #11
     8a4:	mov	r0, r9
     8a8:	bl	0 <strlen>
     8ac:	cmp	r0, #9
     8b0:	blt	88c <coda_read_definitions+0x168>
     8b4:	mov	r5, r0
     8b8:	add	r0, r0, r7
     8bc:	mov	r1, r4
     8c0:	add	r0, r0, #3
     8c4:	bl	0 <strcmp>
     8c8:	cmp	r0, #0
     8cc:	bne	88c <coda_read_definitions+0x168>
     8d0:	mov	r0, sl
     8d4:	bl	0 <strlen>
     8d8:	add	r5, r5, #2
     8dc:	add	r0, r5, r0
     8e0:	bl	0 <malloc>
     8e4:	cmp	r0, #0
     8e8:	beq	9ac <coda_read_definitions+0x288>
     8ec:	movw	r1, #0
     8f0:	mov	r2, sl
     8f4:	mov	r3, r9
     8f8:	mov	r8, r0
     8fc:	movt	r1, #0
     900:	bl	0 <sprintf>
     904:	mov	r0, #3
     908:	mov	r1, r8
     90c:	add	r2, sp, #16
     910:	bl	0 <__xstat>
     914:	cmp	r0, #0
     918:	bne	9dc <coda_read_definitions+0x2b8>
     91c:	ldrb	r0, [sp, #33]	; 0x21
     920:	tst	r0, #128	; 0x80
     924:	beq	878 <coda_read_definitions+0x154>
     928:	movw	r1, #0
     92c:	mov	r0, r8
     930:	movt	r1, #0
     934:	bl	0 <coda_za_open>
     938:	cmp	r0, #0
     93c:	beq	a04 <coda_read_definitions+0x2e0>
     940:	mov	r5, r0
     944:	mov	r0, #0
     948:	mov	r1, #0
     94c:	mov	r2, #0
     950:	mov	r3, #0
     954:	str	r0, [sp]
     958:	mov	r0, r5
     95c:	bl	ec <parse_entry>
     960:	mov	r7, r0
     964:	mov	r0, r5
     968:	bl	0 <coda_za_close>
     96c:	cmp	r7, #0
     970:	beq	878 <coda_read_definitions+0x154>
     974:	b	a04 <coda_read_definitions+0x2e0>
     978:	ldr	r0, [sp, #8]
     97c:	bl	0 <free>
     980:	mov	r4, #0
     984:	b	a20 <coda_read_definitions+0x2fc>
     988:	movw	r1, #0
     98c:	movw	r2, #0
     990:	mvn	r0, #0
     994:	movw	r3, #4302	; 0x10ce
     998:	mvn	r4, #0
     99c:	movt	r1, #0
     9a0:	movt	r2, #0
     9a4:	bl	0 <coda_set_error>
     9a8:	b	a20 <coda_read_definitions+0x2fc>
     9ac:	mov	r0, sl
     9b0:	bl	0 <strlen>
     9b4:	movw	r1, #4427	; 0x114b
     9b8:	movw	r3, #0
     9bc:	add	r2, r5, r0
     9c0:	mvn	r0, #0
     9c4:	str	r1, [sp]
     9c8:	movw	r1, #0
     9cc:	movt	r3, #0
     9d0:	movt	r1, #0
     9d4:	bl	0 <coda_set_error>
     9d8:	b	a0c <coda_read_definitions+0x2e8>
     9dc:	bl	0 <__errno_location>
     9e0:	ldr	r0, [r0]
     9e4:	bl	0 <strerror>
     9e8:	movw	r1, #0
     9ec:	mov	r3, r0
     9f0:	movw	r0, #65136	; 0xfe70
     9f4:	mov	r2, r8
     9f8:	movt	r0, #65535	; 0xffff
     9fc:	movt	r1, #0
     a00:	bl	0 <coda_set_error>
     a04:	mov	r0, r8
     a08:	bl	0 <free>
     a0c:	ldr	r0, [sp, #12]
     a10:	bl	0 <closedir>
     a14:	ldr	r0, [sp, #8]
     a18:	bl	0 <free>
     a1c:	mvn	r4, #0
     a20:	mov	r0, r4
     a24:	sub	sp, fp, #28
     a28:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
     a2c:	bl	0 <__errno_location>
     a30:	ldr	r0, [r0]
     a34:	bl	0 <strerror>
     a38:	movw	r1, #0
     a3c:	mov	r3, r0
     a40:	movw	r0, #65136	; 0xfe70
     a44:	mov	r2, sl
     a48:	movt	r0, #65535	; 0xffff
     a4c:	movt	r1, #0
     a50:	bl	0 <coda_set_error>
     a54:	b	a14 <coda_read_definitions+0x2f0>

00000a58 <parser_info_delete>:
     a58:	push	{r4, r5, fp, lr}
     a5c:	add	fp, sp, #8
     a60:	ldr	r5, [r0]
     a64:	mov	r4, r0
     a68:	cmp	r5, #0
     a6c:	bne	a90 <parser_info_delete+0x38>
     a70:	b	ac0 <parser_info_delete+0x68>
     a74:	ldr	r0, [r5, #396]	; 0x18c
     a78:	str	r0, [r4]
     a7c:	mov	r0, r5
     a80:	bl	0 <free>
     a84:	ldr	r5, [r4]
     a88:	cmp	r5, #0
     a8c:	beq	ac0 <parser_info_delete+0x68>
     a90:	ldr	r0, [r5, #8]
     a94:	cmp	r0, #0
     a98:	beq	aac <parser_info_delete+0x54>
     a9c:	ldr	r1, [r5, #40]	; 0x28
     aa0:	cmp	r1, #0
     aa4:	beq	afc <parser_info_delete+0xa4>
     aa8:	blx	r1
     aac:	ldr	r0, [r5, #12]
     ab0:	cmp	r0, #0
     ab4:	beq	a74 <parser_info_delete+0x1c>
     ab8:	bl	0 <free>
     abc:	b	a74 <parser_info_delete+0x1c>
     ac0:	ldr	r0, [r4, #4]
     ac4:	cmp	r0, #0
     ac8:	beq	ad0 <parser_info_delete+0x78>
     acc:	bl	0 <coda_XML_ParserFree>
     ad0:	ldr	r0, [r4, #8]
     ad4:	cmp	r0, #0
     ad8:	beq	ae0 <parser_info_delete+0x88>
     adc:	bl	0 <coda_hashtable_delete>
     ae0:	ldr	r0, [r4, #12]
     ae4:	cmp	r0, #0
     ae8:	beq	af0 <parser_info_delete+0x98>
     aec:	bl	0 <free>
     af0:	mov	r0, #0
     af4:	str	r0, [r4, #16]
     af8:	pop	{r4, r5, fp, pc}
     afc:	movw	r0, #0
     b00:	movw	r1, #0
     b04:	movw	r3, #0
     b08:	movw	r2, #4055	; 0xfd7
     b0c:	movt	r0, #0
     b10:	movt	r1, #0
     b14:	movt	r3, #0
     b18:	bl	0 <__assert_fail>

00000b1c <start_element_handler>:
     b1c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
     b20:	add	fp, sp, #24
     b24:	sub	sp, sp, #8
     b28:	mov	r4, r0
     b2c:	ldr	r0, [r0, #48]	; 0x30
     b30:	cmp	r0, #1
     b34:	blt	b48 <start_element_handler+0x2c>
     b38:	add	r0, r0, #1
     b3c:	str	r0, [r4, #48]	; 0x30
     b40:	sub	sp, fp, #24
     b44:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
     b48:	ldr	r0, [r4, #8]
     b4c:	mov	r6, r2
     b50:	mov	r5, r1
     b54:	bl	0 <coda_hashtable_get_index_from_name>
     b58:	cmn	r0, #1
     b5c:	ble	b94 <start_element_handler+0x78>
     b60:	mov	r1, r0
     b64:	ldr	r0, [r4]
     b68:	add	r2, r0, r1, lsl #2
     b6c:	ldr	r2, [r2, #52]	; 0x34
     b70:	cmp	r2, #0
     b74:	beq	bbc <start_element_handler+0xa0>
     b78:	mov	r0, r4
     b7c:	mov	r2, r6
     b80:	bl	ddc <push_node>
     b84:	cmp	r0, #0
     b88:	bne	c70 <start_element_handler+0x154>
     b8c:	sub	sp, fp, #24
     b90:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
     b94:	movw	r1, #0
     b98:	mov	r0, r5
     b9c:	mov	r2, #44	; 0x2c
     ba0:	movt	r1, #0
     ba4:	bl	0 <strncmp>
     ba8:	cmp	r0, #0
     bac:	beq	bb8 <start_element_handler+0x9c>
     bb0:	mov	r0, #1
     bb4:	b	b3c <start_element_handler+0x20>
     bb8:	ldr	r0, [r4]
     bbc:	ldr	r1, [r0]
     bc0:	cmn	r1, #1
     bc4:	beq	c04 <start_element_handler+0xe8>
     bc8:	ldr	r7, [r0, #48]	; 0x30
     bcc:	mov	r0, r5
     bd0:	bl	0 <coda_element_name_from_xml_name>
     bd4:	mov	r5, r0
     bd8:	ldr	r0, [r4]
     bdc:	ldr	r1, [r0]
     be0:	cmn	r1, #1
     be4:	beq	c28 <start_element_handler+0x10c>
     be8:	movw	r2, #0
     bec:	movt	r2, #0
     bf0:	ldr	r6, [r2, r1, lsl #2]
     bf4:	ldrb	r1, [r6], #1
     bf8:	cmp	r1, #32
     bfc:	bne	bf4 <start_element_handler+0xd8>
     c00:	b	c30 <start_element_handler+0x114>
     c04:	mov	r0, r5
     c08:	bl	0 <coda_element_name_from_xml_name>
     c0c:	movw	r1, #0
     c10:	mov	r2, r0
     c14:	movw	r0, #65136	; 0xfe70
     c18:	movt	r0, #65535	; 0xffff
     c1c:	movt	r1, #0
     c20:	bl	0 <coda_set_error>
     c24:	b	c70 <start_element_handler+0x154>
     c28:	movw	r6, #0
     c2c:	movt	r6, #0
     c30:	movw	r8, #65136	; 0xfe70
     c34:	cmp	r7, #0
     c38:	movt	r8, #65535	; 0xffff
     c3c:	beq	c58 <start_element_handler+0x13c>
     c40:	ldr	r0, [r0, #44]	; 0x2c
     c44:	bl	0 <coda_type_get_format_name>
     c48:	movw	r1, #0
     c4c:	str	r0, [sp]
     c50:	movt	r1, #0
     c54:	b	c60 <start_element_handler+0x144>
     c58:	movw	r1, #0
     c5c:	movt	r1, #0
     c60:	mov	r0, r8
     c64:	mov	r2, r5
     c68:	mov	r3, r6
     c6c:	bl	0 <coda_set_error>
     c70:	ldr	r0, [r4, #4]
     c74:	mov	r1, #0
     c78:	bl	0 <coda_XML_StopParser>
     c7c:	mov	r0, #1
     c80:	str	r0, [r4, #36]	; 0x24
     c84:	sub	sp, fp, #24
     c88:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

00000c8c <end_element_handler>:
     c8c:	push	{r4, r5, fp, lr}
     c90:	add	fp, sp, #8
     c94:	mov	r4, r0
     c98:	ldr	r0, [r0, #36]	; 0x24
     c9c:	cmp	r0, #0
     ca0:	popne	{r4, r5, fp, pc}
     ca4:	ldr	r0, [r4, #48]	; 0x30
     ca8:	cmp	r0, #1
     cac:	subge	r0, r0, #1
     cb0:	strge	r0, [r4, #48]	; 0x30
     cb4:	popge	{r4, r5, fp, pc}
     cb8:	ldr	r5, [r4]
     cbc:	cmp	r5, #0
     cc0:	beq	da4 <end_element_handler+0x118>
     cc4:	ldr	r1, [r5, #36]	; 0x24
     cc8:	cmp	r1, #0
     ccc:	beq	ce0 <end_element_handler+0x54>
     cd0:	mov	r0, r4
     cd4:	blx	r1
     cd8:	cmp	r0, #0
     cdc:	bne	d10 <end_element_handler+0x84>
     ce0:	ldr	r0, [r5, #396]	; 0x18c
     ce4:	cmp	r0, #0
     ce8:	beq	d28 <end_element_handler+0x9c>
     cec:	ldr	r1, [r5]
     cf0:	add	r0, r0, r1, lsl #2
     cf4:	ldr	r1, [r0, #224]	; 0xe0
     cf8:	cmp	r1, #0
     cfc:	beq	d28 <end_element_handler+0x9c>
     d00:	mov	r0, r4
     d04:	blx	r1
     d08:	cmp	r0, #0
     d0c:	beq	d28 <end_element_handler+0x9c>
     d10:	ldr	r0, [r4, #4]
     d14:	mov	r1, #0
     d18:	bl	0 <coda_XML_StopParser>
     d1c:	mov	r0, #1
     d20:	str	r0, [r4, #36]	; 0x24
     d24:	pop	{r4, r5, fp, pc}
     d28:	ldr	r0, [r5, #8]
     d2c:	cmp	r0, #0
     d30:	beq	d44 <end_element_handler+0xb8>
     d34:	ldr	r1, [r5, #40]	; 0x28
     d38:	cmp	r1, #0
     d3c:	beq	dbc <end_element_handler+0x130>
     d40:	blx	r1
     d44:	ldr	r0, [r5, #12]
     d48:	cmp	r0, #0
     d4c:	beq	d54 <end_element_handler+0xc8>
     d50:	bl	0 <free>
     d54:	ldr	r0, [r5, #396]	; 0x18c
     d58:	str	r0, [r4]
     d5c:	mov	r0, r5
     d60:	bl	0 <free>
     d64:	ldr	r0, [r4]
     d68:	cmp	r0, #0
     d6c:	beq	d90 <end_element_handler+0x104>
     d70:	ldr	r0, [r0, #32]
     d74:	cmp	r0, #0
     d78:	beq	d90 <end_element_handler+0x104>
     d7c:	ldr	r0, [r4, #4]
     d80:	movw	r1, #0
     d84:	movt	r1, #0
     d88:	pop	{r4, r5, fp, lr}
     d8c:	b	0 <coda_XML_SetCharacterDataHandler>
     d90:	ldr	r0, [r4, #4]
     d94:	movw	r1, #0
     d98:	movt	r1, #0
     d9c:	pop	{r4, r5, fp, lr}
     da0:	b	0 <coda_XML_SetCharacterDataHandler>
     da4:	movw	r0, #0
     da8:	movw	r1, #0
     dac:	movw	r3, #0
     db0:	movw	r2, #3917	; 0xf4d
     db4:	movt	r0, #0
     db8:	b	dd0 <end_element_handler+0x144>
     dbc:	movw	r0, #0
     dc0:	movw	r1, #0
     dc4:	movw	r3, #0
     dc8:	movw	r2, #3937	; 0xf61
     dcc:	movt	r0, #0
     dd0:	movt	r1, #0
     dd4:	movt	r3, #0
     dd8:	bl	0 <__assert_fail>

00000ddc <push_node>:
     ddc:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
     de0:	add	fp, sp, #24
     de4:	mov	r4, r0
     de8:	mov	r0, #400	; 0x190
     dec:	mov	r8, r2
     df0:	mov	r7, r1
     df4:	bl	0 <malloc>
     df8:	cmp	r0, #0
     dfc:	beq	ec0 <push_node+0xe4>
     e00:	mov	r5, r0
     e04:	mvn	r0, #0
     e08:	mov	r6, #0
     e0c:	str	r7, [r5]
     e10:	str	r6, [r5, #4]
     e14:	str	r6, [r5, #8]
     e18:	str	r6, [r5, #12]
     e1c:	str	r0, [r5, #16]
     e20:	str	r0, [r5, #20]
     e24:	bl	0 <coda_NaN>
     e28:	add	r0, r5, #48	; 0x30
     e2c:	mov	r1, #0
     e30:	mov	r2, #348	; 0x15c
     e34:	str	r6, [r5, #32]
     e38:	str	r6, [r5, #36]	; 0x24
     e3c:	str	r6, [r5, #40]	; 0x28
     e40:	vstr	d0, [r5, #24]
     e44:	bl	0 <memset>
     e48:	ldr	r0, [r4]
     e4c:	cmp	r0, #0
     e50:	str	r0, [r5, #396]	; 0x18c
     e54:	str	r5, [r4]
     e58:	beq	e8c <push_node+0xb0>
     e5c:	add	r0, r0, r7, lsl #2
     e60:	ldr	r2, [r0, #52]	; 0x34
     e64:	cmp	r2, #0
     e68:	beq	e8c <push_node+0xb0>
     e6c:	mov	r0, r4
     e70:	mov	r1, r8
     e74:	blx	r2
     e78:	mov	r1, r0
     e7c:	mvn	r0, #0
     e80:	cmp	r1, #0
     e84:	beq	ea4 <push_node+0xc8>
     e88:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
     e8c:	ldr	r0, [r4, #4]
     e90:	movw	r1, #0
     e94:	movt	r1, #0
     e98:	bl	0 <coda_XML_SetCharacterDataHandler>
     e9c:	mov	r0, #0
     ea0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
     ea4:	ldr	r1, [r5, #32]
     ea8:	ldr	r0, [r4, #4]
     eac:	cmp	r1, #0
     eb0:	beq	e90 <push_node+0xb4>
     eb4:	movw	r1, #0
     eb8:	movt	r1, #0
     ebc:	b	e98 <push_node+0xbc>
     ec0:	movw	r0, #0
     ec4:	movw	r1, #0
     ec8:	movw	r3, #0
     ecc:	movw	r2, #3877	; 0xf25
     ed0:	movt	r0, #0
     ed4:	movt	r1, #0
     ed8:	movt	r3, #0
     edc:	bl	0 <__assert_fail>

00000ee0 <cd_product_class_init>:
     ee0:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
     ee4:	add	fp, sp, #24
     ee8:	sub	sp, sp, #16
     eec:	mov	r4, r0
     ef0:	ldr	r0, [r1]
     ef4:	ldr	r2, [r4]
     ef8:	cmp	r0, #0
     efc:	ldr	r6, [r2]
     f00:	beq	fac <cd_product_class_init+0xcc>
     f04:	movw	r5, #0
     f08:	add	r7, r1, #4
     f0c:	movt	r5, #0
     f10:	mov	r1, r5
     f14:	bl	0 <strcmp>
     f18:	cmp	r0, #0
     f1c:	beq	f38 <cd_product_class_init+0x58>
     f20:	ldr	r0, [r7, #4]
     f24:	add	r1, r7, #8
     f28:	mov	r7, r1
     f2c:	cmp	r0, #0
     f30:	bne	f10 <cd_product_class_init+0x30>
     f34:	b	fac <cd_product_class_init+0xcc>
     f38:	ldr	r5, [r7]
     f3c:	cmp	r5, #0
     f40:	beq	fac <cd_product_class_init+0xcc>
     f44:	ldr	r0, [r4, #16]
     f48:	movw	r1, #0
     f4c:	movt	r1, #0
     f50:	bl	0 <coda_za_get_entry_by_name>
     f54:	mov	r8, #0
     f58:	cmp	r0, #0
     f5c:	beq	1060 <cd_product_class_init+0x180>
     f60:	mov	r6, r0
     f64:	bl	0 <coda_za_get_entry_size>
     f68:	cmp	r0, #0
     f6c:	beq	1060 <cd_product_class_init+0x180>
     f70:	add	r8, r0, #1
     f74:	mov	r7, r0
     f78:	mov	r0, r8
     f7c:	bl	0 <malloc>
     f80:	cmp	r0, #0
     f84:	beq	1004 <cd_product_class_init+0x124>
     f88:	mov	r9, r0
     f8c:	mov	r0, r6
     f90:	mov	r1, r9
     f94:	bl	0 <coda_za_read_entry>
     f98:	cmp	r0, #0
     f9c:	beq	1030 <cd_product_class_init+0x150>
     fa0:	mov	r0, r9
     fa4:	bl	0 <free>
     fa8:	b	ff4 <cd_product_class_init+0x114>
     fac:	cmn	r6, #1
     fb0:	beq	fd0 <cd_product_class_init+0xf0>
     fb4:	movw	r0, #0
     fb8:	movt	r0, #0
     fbc:	ldr	r3, [r0, r6, lsl #2]
     fc0:	ldrb	r0, [r3], #1
     fc4:	cmp	r0, #32
     fc8:	bne	fc0 <cd_product_class_init+0xe0>
     fcc:	b	fd8 <cd_product_class_init+0xf8>
     fd0:	movw	r3, #0
     fd4:	movt	r3, #0
     fd8:	movw	r0, #65136	; 0xfe70
     fdc:	movw	r1, #0
     fe0:	movw	r2, #0
     fe4:	movt	r0, #65535	; 0xffff
     fe8:	movt	r1, #0
     fec:	movt	r2, #0
     ff0:	bl	0 <coda_set_error>
     ff4:	mvn	r7, #0
     ff8:	mov	r0, r7
     ffc:	sub	sp, fp, #24
    1000:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
    1004:	movw	r1, #0
    1008:	movw	r3, #0
    100c:	movw	r0, #2774	; 0xad6
    1010:	mov	r2, r8
    1014:	mvn	r7, #0
    1018:	movt	r1, #0
    101c:	movt	r3, #0
    1020:	str	r0, [sp]
    1024:	mvn	r0, #0
    1028:	bl	0 <coda_set_error>
    102c:	b	ff8 <cd_product_class_init+0x118>
    1030:	mov	r8, #0
    1034:	add	r2, sp, #8
    1038:	mov	r0, r9
    103c:	mov	r1, r7
    1040:	mov	r3, #1
    1044:	strb	r8, [r9, r7]
    1048:	bl	0 <coda_ascii_parse_int64>
    104c:	mov	r6, r0
    1050:	mov	r0, r9
    1054:	bl	0 <free>
    1058:	cmp	r6, #0
    105c:	ldrpl	r8, [sp, #8]
    1060:	mov	r0, r5
    1064:	bl	0 <coda_data_dictionary_has_product_class>
    1068:	cmp	r0, #0
    106c:	beq	10a4 <cd_product_class_init+0x1c4>
    1070:	mov	r0, r5
    1074:	bl	0 <coda_data_dictionary_get_product_class>
    1078:	mvn	r7, #0
    107c:	cmp	r0, #0
    1080:	beq	ff8 <cd_product_class_init+0x118>
    1084:	mov	r6, r0
    1088:	bl	0 <coda_product_class_get_revision>
    108c:	cmp	r8, r0
    1090:	ble	111c <cd_product_class_init+0x23c>
    1094:	mov	r0, r6
    1098:	bl	0 <coda_data_dictionary_remove_product_class>
    109c:	cmp	r0, #0
    10a0:	bne	ff8 <cd_product_class_init+0x118>
    10a4:	ldr	r0, [r4]
    10a8:	movw	r1, #0
    10ac:	movt	r1, #0
    10b0:	str	r1, [r0, #40]	; 0x28
    10b4:	mov	r0, r5
    10b8:	bl	0 <coda_product_class_new>
    10bc:	mvn	r7, #0
    10c0:	cmp	r0, #0
    10c4:	str	r0, [r4, #24]
    10c8:	beq	ff8 <cd_product_class_init+0x118>
    10cc:	mov	r5, r0
    10d0:	ldr	r0, [r4, #16]
    10d4:	bl	0 <coda_za_get_filename>
    10d8:	mov	r1, r0
    10dc:	mov	r0, r5
    10e0:	bl	0 <coda_product_class_set_definition_file>
    10e4:	mov	r1, r0
    10e8:	ldr	r0, [r4, #24]
    10ec:	cmp	r1, #0
    10f0:	bne	110c <cd_product_class_init+0x22c>
    10f4:	mov	r1, r8
    10f8:	bl	0 <coda_product_class_set_revision>
    10fc:	mov	r1, r0
    1100:	ldr	r0, [r4, #24]
    1104:	cmp	r1, #0
    1108:	beq	113c <cd_product_class_init+0x25c>
    110c:	bl	0 <coda_product_class_delete>
    1110:	mov	r0, #0
    1114:	str	r0, [r4, #24]
    1118:	b	ff8 <cd_product_class_init+0x118>
    111c:	mov	r5, #1
    1120:	mov	r1, #0
    1124:	mov	r7, #0
    1128:	str	r5, [r4, #40]	; 0x28
    112c:	ldr	r0, [r4, #4]
    1130:	bl	0 <coda_XML_StopParser>
    1134:	str	r5, [r4, #36]	; 0x24
    1138:	b	ff8 <cd_product_class_init+0x118>
    113c:	ldr	r1, [r4]
    1140:	movw	r2, #0
    1144:	mov	r7, #0
    1148:	movt	r2, #0
    114c:	str	r2, [r1, #268]	; 0x10c
    1150:	movw	r2, #0
    1154:	movt	r2, #0
    1158:	str	r2, [r1, #96]	; 0x60
    115c:	str	r0, [r1, #8]
    1160:	movw	r1, #0
    1164:	ldr	r0, [r4]
    1168:	movt	r1, #0
    116c:	str	r1, [r0, #352]	; 0x160
    1170:	movw	r1, #0
    1174:	movt	r1, #0
    1178:	str	r1, [r0, #180]	; 0xb4
    117c:	movw	r1, #0
    1180:	ldr	r0, [r4]
    1184:	movt	r1, #0
    1188:	str	r1, [r0, #36]	; 0x24
    118c:	b	ff8 <cd_product_class_init+0x118>

00001190 <data_dictionary_add_product_class>:
    1190:	push	{r4, sl, fp, lr}
    1194:	add	fp, sp, #8
    1198:	mov	r4, r0
    119c:	ldr	r0, [r0]
    11a0:	ldr	r0, [r0, #8]
    11a4:	bl	0 <coda_data_dictionary_add_product_class>
    11a8:	mov	r1, r0
    11ac:	mvn	r0, #0
    11b0:	cmp	r1, #0
    11b4:	popne	{r4, sl, fp, pc}
    11b8:	ldr	r1, [r4]
    11bc:	mov	r0, #0
    11c0:	str	r0, [r1, #8]
    11c4:	pop	{r4, sl, fp, pc}

000011c8 <product_class_add_named_type>:
    11c8:	push	{fp, lr}
    11cc:	mov	fp, sp
    11d0:	mov	r1, r0
    11d4:	ldr	r0, [r0, #24]
    11d8:	cmp	r0, #0
    11dc:	beq	11f8 <product_class_add_named_type+0x30>
    11e0:	ldr	r1, [r1]
    11e4:	ldr	r1, [r1, #8]
    11e8:	bl	0 <coda_product_class_add_named_type>
    11ec:	cmp	r0, #0
    11f0:	mvnne	r0, #0
    11f4:	pop	{fp, pc}
    11f8:	movw	r0, #0
    11fc:	movw	r1, #0
    1200:	movw	r3, #0
    1204:	movw	r2, #1002	; 0x3ea
    1208:	movt	r0, #0
    120c:	movt	r1, #0
    1210:	movt	r3, #0
    1214:	bl	0 <__assert_fail>

00001218 <cd_product_definition_sub_init>:
    1218:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    121c:	add	fp, sp, #28
    1220:	sub	sp, sp, #4
    1224:	ldr	r6, [r0, #28]
    1228:	cmp	r6, #0
    122c:	beq	1554 <cd_product_definition_sub_init+0x33c>
    1230:	ldr	r4, [r0]
    1234:	str	r0, [sp]
    1238:	movw	r0, #0
    123c:	mov	r8, r1
    1240:	movt	r0, #0
    1244:	str	r6, [r4, #8]
    1248:	str	r0, [r4, #40]	; 0x28
    124c:	ldr	r5, [r1]
    1250:	ldr	sl, [r4]
    1254:	cmp	r5, #0
    1258:	beq	12d4 <cd_product_definition_sub_init+0xbc>
    125c:	movw	r7, #0
    1260:	add	r9, r8, #4
    1264:	mov	r0, r5
    1268:	movt	r7, #0
    126c:	mov	r1, r7
    1270:	bl	0 <strcmp>
    1274:	cmp	r0, #0
    1278:	beq	1294 <cd_product_definition_sub_init+0x7c>
    127c:	ldr	r0, [r9, #4]
    1280:	add	r1, r9, #8
    1284:	mov	r9, r1
    1288:	cmp	r0, #0
    128c:	bne	126c <cd_product_definition_sub_init+0x54>
    1290:	b	12d4 <cd_product_definition_sub_init+0xbc>
    1294:	ldr	r7, [r9]
    1298:	cmp	r7, #0
    129c:	beq	12d4 <cd_product_definition_sub_init+0xbc>
    12a0:	ldr	r6, [r6, #8]
    12a4:	mov	r1, r7
    12a8:	mov	r0, r6
    12ac:	bl	0 <strcmp>
    12b0:	cmp	r0, #0
    12b4:	beq	132c <cd_product_definition_sub_init+0x114>
    12b8:	movw	r0, #65136	; 0xfe70
    12bc:	movw	r1, #0
    12c0:	mov	r2, r7
    12c4:	mov	r3, r6
    12c8:	movt	r0, #65535	; 0xffff
    12cc:	movt	r1, #0
    12d0:	b	1318 <cd_product_definition_sub_init+0x100>
    12d4:	cmn	sl, #1
    12d8:	beq	12f8 <cd_product_definition_sub_init+0xe0>
    12dc:	movw	r0, #0
    12e0:	movt	r0, #0
    12e4:	ldr	r3, [r0, sl, lsl #2]
    12e8:	ldrb	r0, [r3], #1
    12ec:	cmp	r0, #32
    12f0:	bne	12e8 <cd_product_definition_sub_init+0xd0>
    12f4:	b	1300 <cd_product_definition_sub_init+0xe8>
    12f8:	movw	r3, #0
    12fc:	movt	r3, #0
    1300:	movw	r0, #65136	; 0xfe70
    1304:	movw	r1, #0
    1308:	movw	r2, #0
    130c:	movt	r0, #65535	; 0xffff
    1310:	movt	r1, #0
    1314:	movt	r2, #0
    1318:	bl	0 <coda_set_error>
    131c:	mvn	r5, #0
    1320:	mov	r0, r5
    1324:	sub	sp, fp, #28
    1328:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    132c:	movw	r6, #0
    1330:	add	r7, r8, #4
    1334:	movt	r6, #0
    1338:	mov	r0, r5
    133c:	mov	r1, r6
    1340:	bl	0 <strcmp>
    1344:	cmp	r0, #0
    1348:	beq	1364 <cd_product_definition_sub_init+0x14c>
    134c:	ldr	r5, [r7, #4]
    1350:	add	r0, r7, #8
    1354:	mov	r7, r0
    1358:	cmp	r5, #0
    135c:	bne	1338 <cd_product_definition_sub_init+0x120>
    1360:	b	13c4 <cd_product_definition_sub_init+0x1ac>
    1364:	ldr	r0, [r7]
    1368:	cmp	r0, #0
    136c:	beq	13c4 <cd_product_definition_sub_init+0x1ac>
    1370:	add	r1, r4, #44	; 0x2c
    1374:	bl	0 <coda_format_from_string>
    1378:	mvn	r5, #0
    137c:	cmp	r0, #0
    1380:	bne	1320 <cd_product_definition_sub_init+0x108>
    1384:	ldr	r7, [sp]
    1388:	mov	r1, #1
    138c:	ldr	r0, [r7]
    1390:	str	r1, [r0, #48]	; 0x30
    1394:	ldr	r1, [r7, #28]
    1398:	ldr	r3, [r0, #44]	; 0x2c
    139c:	ldr	r2, [r1]
    13a0:	cmp	r2, r3
    13a4:	bne	140c <cd_product_definition_sub_init+0x1f4>
    13a8:	movw	r1, #0
    13ac:	cmp	r2, #2
    13b0:	movt	r1, #0
    13b4:	bne	1428 <cd_product_definition_sub_init+0x210>
    13b8:	movw	r2, #0
    13bc:	movt	r2, #0
    13c0:	b	1518 <cd_product_definition_sub_init+0x300>
    13c4:	cmn	sl, #1
    13c8:	beq	13e8 <cd_product_definition_sub_init+0x1d0>
    13cc:	movw	r0, #0
    13d0:	movt	r0, #0
    13d4:	ldr	r3, [r0, sl, lsl #2]
    13d8:	ldrb	r0, [r3], #1
    13dc:	cmp	r0, #32
    13e0:	bne	13d8 <cd_product_definition_sub_init+0x1c0>
    13e4:	b	13f0 <cd_product_definition_sub_init+0x1d8>
    13e8:	movw	r3, #0
    13ec:	movt	r3, #0
    13f0:	movw	r0, #65136	; 0xfe70
    13f4:	movw	r1, #0
    13f8:	movw	r2, #0
    13fc:	movt	r0, #65535	; 0xffff
    1400:	movt	r1, #0
    1404:	movt	r2, #0
    1408:	b	1318 <cd_product_definition_sub_init+0x100>
    140c:	ldr	r2, [r1, #8]
    1410:	movw	r0, #65136	; 0xfe70
    1414:	movw	r1, #0
    1418:	movt	r0, #65535	; 0xffff
    141c:	movt	r1, #0
    1420:	bl	0 <coda_set_error>
    1424:	b	1320 <cd_product_definition_sub_init+0x108>
    1428:	movw	r6, #0
    142c:	movw	r3, #0
    1430:	movw	r2, #0
    1434:	vdup.32	q8, r1
    1438:	add	r5, r0, #52	; 0x34
    143c:	movw	ip, #0
    1440:	movw	r4, #0
    1444:	movt	r6, #0
    1448:	movt	r3, #0
    144c:	movt	r2, #0
    1450:	movt	ip, #0
    1454:	movt	r4, #0
    1458:	vmov.32	d19[0], r6
    145c:	movw	r6, #0
    1460:	vmov.32	d18[0], r2
    1464:	add	r2, r5, #172	; 0xac
    1468:	movt	r6, #0
    146c:	vmov.32	d19[1], r6
    1470:	vmov.32	d18[1], r3
    1474:	mov	r3, #320	; 0x140
    1478:	movw	r6, #0
    147c:	movt	r6, #0
    1480:	vst1.32	{d16-d17}, [r2]
    1484:	mov	r2, r5
    1488:	vst1.32	{d18-d19}, [r2], r3
    148c:	movw	r3, #0
    1490:	str	r1, [r0, #260]	; 0x104
    1494:	vmov.32	d19[0], r4
    1498:	vmov.32	d18[0], r6
    149c:	movt	r3, #0
    14a0:	str	r3, [r0, #88]	; 0x58
    14a4:	movw	r3, #0
    14a8:	str	r1, [r0, #292]	; 0x124
    14ac:	movt	r3, #0
    14b0:	str	r3, [r0, #120]	; 0x78
    14b4:	movw	r3, #0
    14b8:	str	r1, [r0, #304]	; 0x130
    14bc:	movt	r3, #0
    14c0:	str	r3, [r0, #132]	; 0x84
    14c4:	movw	r3, #0
    14c8:	str	r1, [r0, #332]	; 0x14c
    14cc:	movt	r3, #0
    14d0:	str	r3, [r0, #160]	; 0xa0
    14d4:	movw	r3, #0
    14d8:	str	r1, [r0, #360]	; 0x168
    14dc:	movt	r3, #0
    14e0:	str	r3, [r0, #188]	; 0xbc
    14e4:	movw	r3, #0
    14e8:	vst1.32	{d16-d17}, [r2]
    14ec:	add	r2, r5, #148	; 0x94
    14f0:	movt	r3, #0
    14f4:	vmov.32	d19[1], r3
    14f8:	vmov.32	d18[1], ip
    14fc:	vst1.32	{d18-d19}, [r2]
    1500:	movw	r2, #0
    1504:	str	r1, [r0, #392]	; 0x188
    1508:	movt	r2, #0
    150c:	str	r2, [r0, #220]	; 0xdc
    1510:	movw	r2, #0
    1514:	movt	r2, #0
    1518:	str	r1, [r0, #364]	; 0x16c
    151c:	str	r2, [r0, #192]	; 0xc0
    1520:	movw	r1, #0
    1524:	mov	r5, #0
    1528:	ldr	r0, [r7]
    152c:	movt	r1, #0
    1530:	str	r1, [r0, #356]	; 0x164
    1534:	movw	r1, #0
    1538:	movt	r1, #0
    153c:	str	r1, [r0, #184]	; 0xb8
    1540:	movw	r1, #0
    1544:	ldr	r0, [r7]
    1548:	movt	r1, #0
    154c:	str	r1, [r0, #36]	; 0x24
    1550:	b	1320 <cd_product_definition_sub_init+0x108>
    1554:	movw	r0, #0
    1558:	movw	r1, #0
    155c:	movw	r3, #0
    1560:	movw	r2, #2974	; 0xb9e
    1564:	movt	r0, #0
    1568:	movt	r1, #0
    156c:	movt	r3, #0
    1570:	bl	0 <__assert_fail>

00001574 <string_handler>:
    1574:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1578:	add	fp, sp, #28
    157c:	sub	sp, sp, #12
    1580:	mov	r4, r0
    1584:	ldr	r0, [r0, #48]	; 0x30
    1588:	cmp	r0, #0
    158c:	ble	1598 <string_handler+0x24>
    1590:	sub	sp, fp, #28
    1594:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1598:	ldr	sl, [r4]
    159c:	mov	r5, r2
    15a0:	mov	r8, r1
    15a4:	ldr	r0, [sl, #12]
    15a8:	cmp	r0, #0
    15ac:	beq	1618 <string_handler+0xa4>
    15b0:	bl	0 <strlen>
    15b4:	add	r1, r0, r5
    15b8:	mov	r6, r0
    15bc:	add	r9, r1, #1
    15c0:	str	r1, [sp, #8]
    15c4:	mov	r0, r9
    15c8:	bl	0 <malloc>
    15cc:	cmp	r0, #0
    15d0:	beq	1650 <string_handler+0xdc>
    15d4:	ldr	r1, [sl, #12]
    15d8:	mov	r2, r6
    15dc:	mov	r7, r0
    15e0:	bl	0 <memcpy>
    15e4:	add	r0, r7, r6
    15e8:	mov	r1, r8
    15ec:	mov	r2, r5
    15f0:	bl	0 <memcpy>
    15f4:	ldr	r1, [sp, #8]
    15f8:	mov	r0, #0
    15fc:	strb	r0, [r7, r1]
    1600:	ldr	r0, [sl, #12]
    1604:	bl	0 <free>
    1608:	ldr	r0, [r4]
    160c:	str	r7, [r0, #12]
    1610:	sub	sp, fp, #28
    1614:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1618:	add	r6, r5, #1
    161c:	mov	r0, r6
    1620:	bl	0 <malloc>
    1624:	cmp	r0, #0
    1628:	str	r0, [sl, #12]
    162c:	beq	1670 <string_handler+0xfc>
    1630:	mov	r1, r8
    1634:	mov	r2, r5
    1638:	bl	0 <memcpy>
    163c:	ldr	r0, [sl, #12]
    1640:	mov	r1, #0
    1644:	strb	r1, [r0, r5]
    1648:	sub	sp, fp, #28
    164c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1650:	movw	r1, #0
    1654:	movw	r3, #0
    1658:	movw	r0, #3857	; 0xf11
    165c:	mov	r2, r9
    1660:	str	r0, [sp]
    1664:	movt	r1, #0
    1668:	movt	r3, #0
    166c:	b	168c <string_handler+0x118>
    1670:	movw	r1, #0
    1674:	movw	r3, #0
    1678:	movw	r0, #3841	; 0xf01
    167c:	mov	r2, r6
    1680:	movt	r1, #0
    1684:	movt	r3, #0
    1688:	str	r0, [sp]
    168c:	mvn	r0, #0
    1690:	bl	0 <coda_set_error>
    1694:	ldr	r0, [r4, #4]
    1698:	mov	r1, #0
    169c:	bl	0 <coda_XML_StopParser>
    16a0:	mov	r0, #1
    16a4:	str	r0, [r4, #36]	; 0x24
    16a8:	sub	sp, fp, #28
    16ac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

000016b0 <whitespace_handler>:
    16b0:	push	{r4, r5, fp, lr}
    16b4:	add	fp, sp, #8
    16b8:	mov	r5, r0
    16bc:	ldr	r0, [r0, #48]	; 0x30
    16c0:	cmp	r0, #0
    16c4:	bgt	1708 <whitespace_handler+0x58>
    16c8:	cmp	r1, #0
    16cc:	beq	1738 <whitespace_handler+0x88>
    16d0:	cmp	r2, #1
    16d4:	poplt	{r4, r5, fp, pc}
    16d8:	movw	r3, #19
    16dc:	mov	r0, #1
    16e0:	movt	r3, #128	; 0x80
    16e4:	ldrb	r4, [r1]
    16e8:	sub	r4, r4, #9
    16ec:	cmp	r4, #23
    16f0:	bhi	170c <whitespace_handler+0x5c>
    16f4:	tst	r3, r0, lsl r4
    16f8:	beq	170c <whitespace_handler+0x5c>
    16fc:	add	r1, r1, #1
    1700:	subs	r2, r2, #1
    1704:	bne	16e4 <whitespace_handler+0x34>
    1708:	pop	{r4, r5, fp, pc}
    170c:	movw	r0, #65136	; 0xfe70
    1710:	movw	r1, #0
    1714:	movt	r0, #65535	; 0xffff
    1718:	movt	r1, #0
    171c:	bl	0 <coda_set_error>
    1720:	ldr	r0, [r5, #4]
    1724:	mov	r1, #0
    1728:	bl	0 <coda_XML_StopParser>
    172c:	mov	r0, #1
    1730:	str	r0, [r5, #36]	; 0x24
    1734:	pop	{r4, r5, fp, pc}
    1738:	movw	r0, #0
    173c:	movw	r1, #0
    1740:	movw	r3, #0
    1744:	movw	r2, #290	; 0x122
    1748:	movt	r0, #0
    174c:	movt	r1, #0
    1750:	movt	r3, #0
    1754:	bl	0 <__assert_fail>

00001758 <string_data_init>:
    1758:	ldr	r0, [r0]
    175c:	movw	r1, #0
    1760:	mov	r2, #1
    1764:	movt	r1, #0
    1768:	str	r2, [r0, #32]
    176c:	str	r1, [r0, #36]	; 0x24
    1770:	mov	r0, #0
    1774:	bx	lr

00001778 <cd_product_class_set_description>:
    1778:	ldr	r0, [r0]
    177c:	ldr	r1, [r0, #12]
    1780:	ldr	r0, [r0, #396]	; 0x18c
    1784:	cmp	r1, #0
    1788:	ldr	r0, [r0, #8]
    178c:	movweq	r1, #0
    1790:	movteq	r1, #0
    1794:	b	0 <coda_product_class_set_description>

00001798 <cd_product_type_init>:
    1798:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
    179c:	add	fp, sp, #24
    17a0:	mov	r8, r0
    17a4:	ldr	r0, [r1]
    17a8:	ldr	r7, [r8]
    17ac:	cmp	r0, #0
    17b0:	ldr	r6, [r7]
    17b4:	beq	1854 <cd_product_type_init+0xbc>
    17b8:	movw	r5, #0
    17bc:	add	r4, r1, #4
    17c0:	movt	r5, #0
    17c4:	mov	r1, r5
    17c8:	bl	0 <strcmp>
    17cc:	cmp	r0, #0
    17d0:	beq	17ec <cd_product_type_init+0x54>
    17d4:	ldr	r0, [r4, #4]
    17d8:	add	r1, r4, #8
    17dc:	mov	r4, r1
    17e0:	cmp	r0, #0
    17e4:	bne	17c4 <cd_product_type_init+0x2c>
    17e8:	b	1854 <cd_product_type_init+0xbc>
    17ec:	ldr	r0, [r4]
    17f0:	cmp	r0, #0
    17f4:	beq	1854 <cd_product_type_init+0xbc>
    17f8:	movw	r1, #0
    17fc:	movt	r1, #0
    1800:	str	r1, [r7, #40]	; 0x28
    1804:	bl	0 <coda_product_type_new>
    1808:	ldr	r1, [r8]
    180c:	cmp	r0, #0
    1810:	str	r0, [r1, #8]
    1814:	beq	189c <cd_product_type_init+0x104>
    1818:	movw	r0, #0
    181c:	movt	r0, #0
    1820:	str	r0, [r1, #268]	; 0x10c
    1824:	movw	r0, #0
    1828:	movt	r0, #0
    182c:	str	r0, [r1, #96]	; 0x60
    1830:	movw	r1, #0
    1834:	ldr	r0, [r8]
    1838:	movt	r1, #0
    183c:	str	r1, [r0, #348]	; 0x15c
    1840:	movw	r1, #0
    1844:	movt	r1, #0
    1848:	str	r1, [r0, #176]	; 0xb0
    184c:	mov	r0, #0
    1850:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
    1854:	cmn	r6, #1
    1858:	beq	1878 <cd_product_type_init+0xe0>
    185c:	movw	r0, #0
    1860:	movt	r0, #0
    1864:	ldr	r3, [r0, r6, lsl #2]
    1868:	ldrb	r0, [r3], #1
    186c:	cmp	r0, #32
    1870:	bne	1868 <cd_product_type_init+0xd0>
    1874:	b	1880 <cd_product_type_init+0xe8>
    1878:	movw	r3, #0
    187c:	movt	r3, #0
    1880:	movw	r0, #65136	; 0xfe70
    1884:	movw	r1, #0
    1888:	movw	r2, #0
    188c:	movt	r0, #65535	; 0xffff
    1890:	movt	r1, #0
    1894:	movt	r2, #0
    1898:	bl	0 <coda_set_error>
    189c:	mvn	r0, #0
    18a0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

000018a4 <cd_product_class_add_product_type>:
    18a4:	push	{r4, sl, fp, lr}
    18a8:	add	fp, sp, #8
    18ac:	mov	r4, r0
    18b0:	ldr	r0, [r0]
    18b4:	ldr	r1, [r0, #8]
    18b8:	ldr	r0, [r0, #396]	; 0x18c
    18bc:	ldr	r0, [r0, #8]
    18c0:	bl	0 <coda_product_class_add_product_type>
    18c4:	mov	r1, r0
    18c8:	mvn	r0, #0
    18cc:	cmp	r1, #0
    18d0:	popne	{r4, sl, fp, pc}
    18d4:	ldr	r1, [r4]
    18d8:	mov	r0, #0
    18dc:	str	r0, [r1, #8]
    18e0:	pop	{r4, sl, fp, pc}

000018e4 <cd_product_class_finalise>:
    18e4:	mov	r1, #0
    18e8:	str	r1, [r0, #24]
    18ec:	mov	r0, #0
    18f0:	bx	lr

000018f4 <string_data_finalise>:
    18f4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    18f8:	add	fp, sp, #28
    18fc:	sub	sp, sp, #4
    1900:	ldr	r0, [r0]
    1904:	ldr	sl, [r0, #12]
    1908:	cmp	sl, #0
    190c:	beq	1a38 <string_data_finalise+0x144>
    1910:	movw	r4, #0
    1914:	movw	r5, #0
    1918:	mov	r9, #0
    191c:	mov	r6, sl
    1920:	movt	r4, #0
    1924:	movt	r5, #0
    1928:	b	193c <string_data_finalise+0x48>
    192c:	mov	r0, #38	; 0x26
    1930:	add	r9, r9, #5
    1934:	strb	r0, [r6]
    1938:	add	r6, r6, #1
    193c:	ldrb	r0, [sl, r9]
    1940:	cmp	r0, #38	; 0x26
    1944:	beq	1960 <string_data_finalise+0x6c>
    1948:	cmp	r0, #0
    194c:	beq	1a30 <string_data_finalise+0x13c>
    1950:	strb	r0, [r6]
    1954:	add	r9, r9, #1
    1958:	add	r6, r6, #1
    195c:	b	193c <string_data_finalise+0x48>
    1960:	add	r8, r9, #1
    1964:	mov	r1, r4
    1968:	mov	r2, #4
    196c:	add	r7, sl, r8
    1970:	mov	r0, r7
    1974:	bl	0 <strncmp>
    1978:	cmp	r0, #0
    197c:	beq	192c <string_data_finalise+0x38>
    1980:	mov	r0, r7
    1984:	mov	r1, r5
    1988:	mov	r2, #5
    198c:	bl	0 <strncmp>
    1990:	cmp	r0, #0
    1994:	beq	1a14 <string_data_finalise+0x120>
    1998:	movw	r1, #0
    199c:	mov	r0, r7
    19a0:	mov	r2, #3
    19a4:	movt	r1, #0
    19a8:	bl	0 <strncmp>
    19ac:	cmp	r0, #0
    19b0:	beq	1a00 <string_data_finalise+0x10c>
    19b4:	movw	r1, #0
    19b8:	mov	r0, r7
    19bc:	mov	r2, #3
    19c0:	movt	r1, #0
    19c4:	bl	0 <strncmp>
    19c8:	cmp	r0, #0
    19cc:	beq	1a00 <string_data_finalise+0x10c>
    19d0:	movw	r1, #0
    19d4:	mov	r0, r7
    19d8:	mov	r2, #5
    19dc:	movt	r1, #0
    19e0:	bl	0 <strncmp>
    19e4:	cmp	r0, #0
    19e8:	beq	1a1c <string_data_finalise+0x128>
    19ec:	mov	r0, #38	; 0x26
    19f0:	mov	r9, r8
    19f4:	strb	r0, [r6]
    19f8:	add	r6, r6, #1
    19fc:	b	193c <string_data_finalise+0x48>
    1a00:	mov	r0, #60	; 0x3c
    1a04:	add	r9, r9, #4
    1a08:	strb	r0, [r6]
    1a0c:	add	r6, r6, #1
    1a10:	b	193c <string_data_finalise+0x48>
    1a14:	mov	r0, #39	; 0x27
    1a18:	b	1a20 <string_data_finalise+0x12c>
    1a1c:	mov	r0, #34	; 0x22
    1a20:	strb	r0, [r6]
    1a24:	add	r9, r9, #6
    1a28:	add	r6, r6, #1
    1a2c:	b	193c <string_data_finalise+0x48>
    1a30:	mov	r0, #0
    1a34:	strb	r0, [r6]
    1a38:	mov	r0, #0
    1a3c:	sub	sp, fp, #28
    1a40:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

00001a44 <cd_product_type_set_description>:
    1a44:	ldr	r0, [r0]
    1a48:	ldr	r1, [r0, #12]
    1a4c:	ldr	r0, [r0, #396]	; 0x18c
    1a50:	cmp	r1, #0
    1a54:	ldr	r0, [r0, #8]
    1a58:	movweq	r1, #0
    1a5c:	movteq	r1, #0
    1a60:	b	0 <coda_product_type_set_description>

00001a64 <cd_product_definition_init>:
    1a64:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1a68:	add	fp, sp, #28
    1a6c:	sub	sp, sp, #12
    1a70:	ldr	r4, [r0]
    1a74:	ldr	r5, [r1]
    1a78:	ldr	sl, [r4]
    1a7c:	cmp	r5, #0
    1a80:	beq	1b0c <cd_product_definition_init+0xa8>
    1a84:	movw	r6, #0
    1a88:	mov	r8, r0
    1a8c:	mov	r9, r1
    1a90:	add	r7, r1, #4
    1a94:	mov	r0, r5
    1a98:	movt	r6, #0
    1a9c:	mov	r1, r6
    1aa0:	bl	0 <strcmp>
    1aa4:	cmp	r0, #0
    1aa8:	beq	1ac4 <cd_product_definition_init+0x60>
    1aac:	ldr	r0, [r7, #4]
    1ab0:	add	r1, r7, #8
    1ab4:	mov	r7, r1
    1ab8:	cmp	r0, #0
    1abc:	bne	1a9c <cd_product_definition_init+0x38>
    1ac0:	b	1b0c <cd_product_definition_init+0xa8>
    1ac4:	ldr	r7, [r7]
    1ac8:	cmp	r7, #0
    1acc:	beq	1b0c <cd_product_definition_init+0xa8>
    1ad0:	movw	r6, #0
    1ad4:	str	r8, [sp, #4]
    1ad8:	add	r8, r9, #4
    1adc:	movt	r6, #0
    1ae0:	mov	r0, r5
    1ae4:	mov	r1, r6
    1ae8:	bl	0 <strcmp>
    1aec:	cmp	r0, #0
    1af0:	beq	1b64 <cd_product_definition_init+0x100>
    1af4:	ldr	r5, [r8, #4]
    1af8:	add	r0, r8, #8
    1afc:	mov	r8, r0
    1b00:	cmp	r5, #0
    1b04:	bne	1ae0 <cd_product_definition_init+0x7c>
    1b08:	b	1bdc <cd_product_definition_init+0x178>
    1b0c:	cmn	sl, #1
    1b10:	beq	1b30 <cd_product_definition_init+0xcc>
    1b14:	movw	r0, #0
    1b18:	movt	r0, #0
    1b1c:	ldr	r3, [r0, sl, lsl #2]
    1b20:	ldrb	r0, [r3], #1
    1b24:	cmp	r0, #32
    1b28:	bne	1b20 <cd_product_definition_init+0xbc>
    1b2c:	b	1b38 <cd_product_definition_init+0xd4>
    1b30:	movw	r3, #0
    1b34:	movt	r3, #0
    1b38:	movw	r0, #65136	; 0xfe70
    1b3c:	movw	r1, #0
    1b40:	movw	r2, #0
    1b44:	movt	r0, #65535	; 0xffff
    1b48:	movt	r1, #0
    1b4c:	movt	r2, #0
    1b50:	bl	0 <coda_set_error>
    1b54:	mvn	r5, #0
    1b58:	mov	r0, r5
    1b5c:	sub	sp, fp, #28
    1b60:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1b64:	ldr	r0, [r8]
    1b68:	cmp	r0, #0
    1b6c:	beq	1bdc <cd_product_definition_init+0x178>
    1b70:	add	r1, r4, #44	; 0x2c
    1b74:	bl	0 <coda_format_from_string>
    1b78:	mvn	r5, #0
    1b7c:	cmp	r0, #0
    1b80:	bne	1b58 <cd_product_definition_init+0xf4>
    1b84:	ldr	r8, [sp, #4]
    1b88:	mov	r1, #1
    1b8c:	ldr	r0, [r8]
    1b90:	str	r1, [r0, #48]	; 0x30
    1b94:	ldr	r4, [r0]
    1b98:	ldr	r0, [r9]
    1b9c:	cmp	r0, #0
    1ba0:	beq	1cd0 <cd_product_definition_init+0x26c>
    1ba4:	movw	r6, #0
    1ba8:	mov	sl, r7
    1bac:	add	r7, r9, #4
    1bb0:	movt	r6, #0
    1bb4:	mov	r1, r6
    1bb8:	bl	0 <strcmp>
    1bbc:	cmp	r0, #0
    1bc0:	beq	1c24 <cd_product_definition_init+0x1c0>
    1bc4:	ldr	r0, [r7, #4]
    1bc8:	add	r1, r7, #8
    1bcc:	mov	r7, r1
    1bd0:	cmp	r0, #0
    1bd4:	bne	1bb4 <cd_product_definition_init+0x150>
    1bd8:	b	1cd0 <cd_product_definition_init+0x26c>
    1bdc:	cmn	sl, #1
    1be0:	beq	1c00 <cd_product_definition_init+0x19c>
    1be4:	movw	r0, #0
    1be8:	movt	r0, #0
    1bec:	ldr	r3, [r0, sl, lsl #2]
    1bf0:	ldrb	r0, [r3], #1
    1bf4:	cmp	r0, #32
    1bf8:	bne	1bf0 <cd_product_definition_init+0x18c>
    1bfc:	b	1c08 <cd_product_definition_init+0x1a4>
    1c00:	movw	r3, #0
    1c04:	movt	r3, #0
    1c08:	movw	r0, #65136	; 0xfe70
    1c0c:	movw	r1, #0
    1c10:	movw	r2, #0
    1c14:	movt	r0, #65535	; 0xffff
    1c18:	movt	r1, #0
    1c1c:	movt	r2, #0
    1c20:	b	1b50 <cd_product_definition_init+0xec>
    1c24:	ldr	r6, [r7]
    1c28:	cmp	r6, #0
    1c2c:	beq	1cd0 <cd_product_definition_init+0x26c>
    1c30:	movw	r1, #0
    1c34:	add	r2, sp, #8
    1c38:	mov	r0, r6
    1c3c:	movt	r1, #0
    1c40:	bl	0 <__isoc99_sscanf>
    1c44:	cmp	r0, #1
    1c48:	bne	1d1c <cd_product_definition_init+0x2b8>
    1c4c:	ldr	r0, [r8]
    1c50:	movw	r1, #0
    1c54:	mov	r4, sl
    1c58:	movt	r1, #0
    1c5c:	str	r1, [r0, #40]	; 0x28
    1c60:	ldr	r1, [r0, #44]	; 0x2c
    1c64:	ldr	r2, [sp, #8]
    1c68:	mov	r0, sl
    1c6c:	bl	0 <coda_product_definition_new>
    1c70:	cmp	r0, #0
    1c74:	str	r0, [r8, #28]
    1c78:	beq	1b58 <cd_product_definition_init+0xf4>
    1c7c:	mov	r1, r0
    1c80:	ldr	r0, [pc, #248]	; 1d80 <cd_product_definition_init+0x31c>
    1c84:	ldr	r2, [pc, r0]
    1c88:	bl	0 <__aeabi_read_tp>
    1c8c:	ldr	r0, [r0, r2]
    1c90:	cmp	r0, #0
    1c94:	beq	1d3c <cd_product_definition_init+0x2d8>
    1c98:	ldr	r0, [r8, #16]
    1c9c:	ldr	r3, [r8, #24]
    1ca0:	str	r1, [sp]
    1ca4:	mov	r1, #2
    1ca8:	mov	r2, r4
    1cac:	bl	ec <parse_entry>
    1cb0:	cmp	r0, #0
    1cb4:	beq	1d38 <cd_product_definition_init+0x2d4>
    1cb8:	ldr	r0, [r8, #28]
    1cbc:	bl	0 <coda_product_definition_delete>
    1cc0:	mov	r0, #0
    1cc4:	str	r0, [r8, #44]	; 0x2c
    1cc8:	str	r0, [r8, #28]
    1ccc:	b	1b58 <cd_product_definition_init+0xf4>
    1cd0:	cmn	r4, #1
    1cd4:	beq	1cf4 <cd_product_definition_init+0x290>
    1cd8:	movw	r0, #0
    1cdc:	movt	r0, #0
    1ce0:	ldr	r3, [r0, r4, lsl #2]
    1ce4:	ldrb	r0, [r3], #1
    1ce8:	cmp	r0, #32
    1cec:	bne	1ce4 <cd_product_definition_init+0x280>
    1cf0:	b	1cfc <cd_product_definition_init+0x298>
    1cf4:	movw	r3, #0
    1cf8:	movt	r3, #0
    1cfc:	movw	r0, #65136	; 0xfe70
    1d00:	movw	r1, #0
    1d04:	movw	r2, #0
    1d08:	movt	r0, #65535	; 0xffff
    1d0c:	movt	r1, #0
    1d10:	movt	r2, #0
    1d14:	bl	0 <coda_set_error>
    1d18:	b	1b58 <cd_product_definition_init+0xf4>
    1d1c:	movw	r0, #65136	; 0xfe70
    1d20:	movw	r1, #0
    1d24:	mov	r2, r6
    1d28:	movt	r0, #65535	; 0xffff
    1d2c:	movt	r1, #0
    1d30:	bl	0 <coda_set_error>
    1d34:	b	1b58 <cd_product_definition_init+0xf4>
    1d38:	ldr	r1, [r8, #28]
    1d3c:	ldr	r0, [r8]
    1d40:	movw	r2, #0
    1d44:	mov	r5, #0
    1d48:	movt	r2, #0
    1d4c:	str	r2, [r0, #268]	; 0x10c
    1d50:	movw	r2, #0
    1d54:	movt	r2, #0
    1d58:	str	r2, [r0, #96]	; 0x60
    1d5c:	str	r1, [r0, #8]
    1d60:	movw	r1, #0
    1d64:	ldr	r0, [r8]
    1d68:	movt	r1, #0
    1d6c:	str	r1, [r0, #272]	; 0x110
    1d70:	movw	r1, #0
    1d74:	movt	r1, #0
    1d78:	str	r1, [r0, #100]	; 0x64
    1d7c:	b	1b58 <cd_product_definition_init+0xf4>
    1d80:	.word	0x000000f4

00001d84 <cd_product_type_add_product_definition>:
    1d84:	push	{r4, sl, fp, lr}
    1d88:	add	fp, sp, #8
    1d8c:	mov	r4, r0
    1d90:	ldr	r0, [r0]
    1d94:	ldr	r1, [r0, #8]
    1d98:	ldr	r0, [r0, #396]	; 0x18c
    1d9c:	ldr	r0, [r0, #8]
    1da0:	bl	0 <coda_product_type_add_product_definition>
    1da4:	mov	r1, r0
    1da8:	mvn	r0, #0
    1dac:	cmp	r1, #0
    1db0:	popne	{r4, sl, fp, pc}
    1db4:	ldr	r1, [r4]
    1db8:	mov	r0, #0
    1dbc:	str	r0, [r1, #8]
    1dc0:	pop	{r4, sl, fp, pc}

00001dc4 <cd_product_definition_set_description>:
    1dc4:	ldr	r0, [r0]
    1dc8:	ldr	r1, [r0, #12]
    1dcc:	ldr	r0, [r0, #396]	; 0x18c
    1dd0:	cmp	r1, #0
    1dd4:	ldr	r0, [r0, #8]
    1dd8:	movweq	r1, #0
    1ddc:	movteq	r1, #0
    1de0:	b	0 <coda_product_definition_set_description>

00001de4 <cd_detection_rule_init>:
    1de4:	push	{r4, sl, fp, lr}
    1de8:	add	fp, sp, #8
    1dec:	mov	r4, r0
    1df0:	ldr	r0, [r0]
    1df4:	movw	r1, #0
    1df8:	movt	r1, #0
    1dfc:	str	r1, [r0, #40]	; 0x28
    1e00:	bl	0 <coda_detection_rule_new>
    1e04:	ldr	r1, [r4]
    1e08:	cmp	r0, #0
    1e0c:	str	r0, [r1, #8]
    1e10:	beq	1e70 <cd_detection_rule_init+0x8c>
    1e14:	movw	r0, #0
    1e18:	movw	r2, #0
    1e1c:	movt	r0, #0
    1e20:	movt	r2, #0
    1e24:	str	r0, [r1, #316]	; 0x13c
    1e28:	str	r2, [r1, #144]	; 0x90
    1e2c:	movw	r2, #0
    1e30:	ldr	r1, [r4]
    1e34:	movt	r2, #0
    1e38:	str	r0, [r1, #320]	; 0x140
    1e3c:	str	r2, [r1, #148]	; 0x94
    1e40:	movw	r2, #0
    1e44:	ldr	r1, [r4]
    1e48:	movt	r2, #0
    1e4c:	str	r0, [r1, #324]	; 0x144
    1e50:	str	r2, [r1, #152]	; 0x98
    1e54:	ldr	r1, [r4]
    1e58:	str	r0, [r1, #328]	; 0x148
    1e5c:	movw	r0, #0
    1e60:	movt	r0, #0
    1e64:	str	r0, [r1, #156]	; 0x9c
    1e68:	mov	r0, #0
    1e6c:	pop	{r4, sl, fp, pc}
    1e70:	mvn	r0, #0
    1e74:	pop	{r4, sl, fp, pc}

00001e78 <cd_product_definition_add_detection_rule>:
    1e78:	push	{r4, sl, fp, lr}
    1e7c:	add	fp, sp, #8
    1e80:	mov	r4, r0
    1e84:	ldr	r0, [r0]
    1e88:	ldr	r1, [r0, #8]
    1e8c:	ldr	r0, [r0, #396]	; 0x18c
    1e90:	ldr	r0, [r0, #8]
    1e94:	bl	0 <coda_product_definition_add_detection_rule>
    1e98:	mov	r1, r0
    1e9c:	mvn	r0, #0
    1ea0:	cmp	r1, #0
    1ea4:	popne	{r4, sl, fp, pc}
    1ea8:	ldr	r1, [r4]
    1eac:	mov	r0, #0
    1eb0:	str	r0, [r1, #8]
    1eb4:	pop	{r4, sl, fp, pc}

00001eb8 <cd_match_data_init>:
    1eb8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1ebc:	add	fp, sp, #28
    1ec0:	sub	sp, sp, #28
    1ec4:	ldr	r8, [r0]
    1ec8:	mov	r9, r0
    1ecc:	movw	r0, #0
    1ed0:	mov	r5, #0
    1ed4:	movt	r0, #0
    1ed8:	str	r0, [r8, #40]	; 0x28
    1edc:	ldr	r6, [r1]
    1ee0:	cmp	r6, #0
    1ee4:	beq	1f70 <cd_match_data_init+0xb8>
    1ee8:	movw	r5, #0
    1eec:	mov	r7, r1
    1ef0:	add	r4, r1, #4
    1ef4:	mov	r0, r6
    1ef8:	movt	r5, #0
    1efc:	mov	r1, r5
    1f00:	bl	0 <strcmp>
    1f04:	cmp	r0, #0
    1f08:	beq	1f28 <cd_match_data_init+0x70>
    1f0c:	ldr	r0, [r4, #4]
    1f10:	add	r1, r4, #8
    1f14:	mov	r4, r1
    1f18:	cmp	r0, #0
    1f1c:	bne	1efc <cd_match_data_init+0x44>
    1f20:	mov	r5, #0
    1f24:	b	1f2c <cd_match_data_init+0x74>
    1f28:	ldr	r5, [r4]
    1f2c:	add	r4, r7, #4
    1f30:	movw	r7, #0
    1f34:	movt	r7, #0
    1f38:	mov	r0, r6
    1f3c:	mov	r1, r7
    1f40:	bl	0 <strcmp>
    1f44:	cmp	r0, #0
    1f48:	beq	1f64 <cd_match_data_init+0xac>
    1f4c:	ldr	r6, [r4, #4]
    1f50:	add	r0, r4, #8
    1f54:	mov	r4, r0
    1f58:	cmp	r6, #0
    1f5c:	bne	1f38 <cd_match_data_init+0x80>
    1f60:	b	1f70 <cd_match_data_init+0xb8>
    1f64:	ldr	r6, [r4]
    1f68:	cmp	r6, #0
    1f6c:	bne	1f8c <cd_match_data_init+0xd4>
    1f70:	mov	r0, #0
    1f74:	bl	0 <coda_detection_rule_entry_new>
    1f78:	ldr	r8, [r9]
    1f7c:	cmp	r0, #0
    1f80:	mov	r6, #0
    1f84:	str	r0, [r8, #8]
    1f88:	beq	1fb0 <cd_match_data_init+0xf8>
    1f8c:	cmp	r5, #0
    1f90:	beq	1fc0 <cd_match_data_init+0x108>
    1f94:	cmp	r6, #0
    1f98:	beq	225c <cd_match_data_init+0x3a4>
    1f9c:	movw	r0, #65136	; 0xfe70
    1fa0:	movw	r1, #0
    1fa4:	movt	r0, #65535	; 0xffff
    1fa8:	movt	r1, #0
    1fac:	bl	0 <coda_set_error>
    1fb0:	mvn	r4, #0
    1fb4:	mov	r0, r4
    1fb8:	sub	sp, fp, #28
    1fbc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1fc0:	cmp	r6, #0
    1fc4:	beq	2358 <cd_match_data_init+0x4a0>
    1fc8:	ldr	r0, [r8, #396]	; 0x18c
    1fcc:	ldr	r5, [r0, #8]
    1fd0:	mov	r0, r6
    1fd4:	bl	0 <strdup>
    1fd8:	cmp	r0, #0
    1fdc:	beq	22bc <cd_match_data_init+0x404>
    1fe0:	mov	r4, r0
    1fe4:	mov	r0, r6
    1fe8:	str	r5, [sp, #20]
    1fec:	bl	0 <strlen>
    1ff0:	add	r0, r0, #6
    1ff4:	bl	0 <malloc>
    1ff8:	cmp	r0, #0
    1ffc:	beq	2314 <cd_match_data_init+0x45c>
    2000:	mov	r2, #0
    2004:	mov	r8, r0
    2008:	mov	sl, r4
    200c:	strb	r2, [r0]
    2010:	ldrb	r0, [r4]
    2014:	mov	r6, r8
    2018:	cmp	r0, #47	; 0x2f
    201c:	bne	2034 <cd_match_data_init+0x17c>
    2020:	mov	r0, #47	; 0x2f
    2024:	mov	r6, r8
    2028:	mov	sl, r4
    202c:	strb	r0, [r6], #1
    2030:	ldrb	r0, [sl, #1]!
    2034:	cmp	r0, #64	; 0x40
    2038:	str	r4, [sp, #16]
    203c:	mov	r4, #0
    2040:	str	r9, [sp, #12]
    2044:	moveq	r0, #64	; 0x40
    2048:	addeq	sl, sl, #1
    204c:	moveq	r2, #1
    2050:	strbeq	r0, [r6], #1
    2054:	mov	r0, #0
    2058:	tst	r0, #1
    205c:	beq	2070 <cd_match_data_init+0x1b8>
    2060:	cmp	r2, #0
    2064:	mov	r0, #64	; 0x40
    2068:	movweq	r0, #47	; 0x2f
    206c:	strb	r0, [r6], #1
    2070:	ldrb	r0, [sl]
    2074:	mov	r7, #0
    2078:	cmp	r0, #123	; 0x7b
    207c:	bne	20a4 <cd_match_data_init+0x1ec>
    2080:	add	r7, sl, #1
    2084:	mov	r0, r7
    2088:	ldrb	r1, [r0]
    208c:	cmp	r1, #125	; 0x7d
    2090:	beq	20ac <cd_match_data_init+0x1f4>
    2094:	cmp	r1, #0
    2098:	beq	22e4 <cd_match_data_init+0x42c>
    209c:	add	r0, r0, #1
    20a0:	b	2088 <cd_match_data_init+0x1d0>
    20a4:	mov	r0, sl
    20a8:	b	20b0 <cd_match_data_init+0x1f8>
    20ac:	strb	r4, [r0], #1
    20b0:	add	sl, r0, #1
    20b4:	b	20bc <cd_match_data_init+0x204>
    20b8:	add	sl, sl, #1
    20bc:	ldrb	r9, [sl, #-1]
    20c0:	cmp	r9, #0
    20c4:	beq	20d4 <cd_match_data_init+0x21c>
    20c8:	cmp	r9, #47	; 0x2f
    20cc:	cmpne	r9, #64	; 0x40
    20d0:	bne	20b8 <cd_match_data_init+0x200>
    20d4:	mov	r1, #0
    20d8:	str	r2, [sp, #24]
    20dc:	strb	r4, [sl, #-1]
    20e0:	bl	0 <coda_identifier_from_name>
    20e4:	cmp	r0, #0
    20e8:	beq	2300 <cd_match_data_init+0x448>
    20ec:	mov	r5, r0
    20f0:	mov	r0, r6
    20f4:	mov	r1, r5
    20f8:	bl	0 <strcpy>
    20fc:	mov	r0, r5
    2100:	bl	0 <strlen>
    2104:	mov	r4, r8
    2108:	mov	r8, r0
    210c:	mov	r0, r5
    2110:	bl	0 <free>
    2114:	add	r6, r6, r8
    2118:	mov	r8, r4
    211c:	mov	r4, #0
    2120:	cmp	r7, #0
    2124:	beq	2224 <cd_match_data_init+0x36c>
    2128:	mov	r0, #36	; 0x24
    212c:	mov	r1, #0
    2130:	mov	r2, #0
    2134:	mov	r3, #0
    2138:	str	r4, [sp]
    213c:	str	r4, [sp, #4]
    2140:	bl	0 <coda_expression_new>
    2144:	cmp	r0, #0
    2148:	beq	2300 <cd_match_data_init+0x448>
    214c:	mov	r2, r0
    2150:	mov	r0, #75	; 0x4b
    2154:	mov	r1, #0
    2158:	mov	r3, #0
    215c:	str	r4, [sp]
    2160:	str	r4, [sp, #4]
    2164:	bl	0 <coda_expression_new>
    2168:	cmp	r0, #0
    216c:	beq	2300 <cd_match_data_init+0x448>
    2170:	mov	r5, r0
    2174:	mov	r0, r7
    2178:	bl	0 <strdup>
    217c:	cmp	r0, #0
    2180:	beq	23a8 <cd_match_data_init+0x4f0>
    2184:	mov	r1, r0
    2188:	mov	r0, #22
    218c:	mov	r2, #0
    2190:	mov	r3, #0
    2194:	str	r4, [sp]
    2198:	str	r4, [sp, #4]
    219c:	bl	0 <coda_expression_new>
    21a0:	cmp	r0, #0
    21a4:	beq	23ec <cd_match_data_init+0x534>
    21a8:	mov	r3, r0
    21ac:	mov	r0, #25
    21b0:	mov	r1, #0
    21b4:	mov	r2, r5
    21b8:	str	r4, [sp]
    21bc:	str	r4, [sp, #4]
    21c0:	bl	0 <coda_expression_new>
    21c4:	cmp	r0, #0
    21c8:	beq	2300 <cd_match_data_init+0x448>
    21cc:	mov	r5, r0
    21d0:	movw	r0, #28268	; 0x6e6c
    21d4:	movt	r0, #115	; 0x73
    21d8:	str	r0, [r6, #3]
    21dc:	movw	r0, #30784	; 0x7840
    21e0:	movt	r0, #27757	; 0x6c6d
    21e4:	str	r0, [r6]
    21e8:	mov	r0, r8
    21ec:	bl	0 <coda_detection_rule_entry_new>
    21f0:	cmp	r0, #0
    21f4:	strb	r4, [r6]
    21f8:	beq	23ec <cd_match_data_init+0x534>
    21fc:	mov	r1, r5
    2200:	mov	r7, r0
    2204:	bl	0 <coda_detection_rule_entry_set_expression>
    2208:	cmp	r0, #0
    220c:	bne	23e4 <cd_match_data_init+0x52c>
    2210:	ldr	r0, [sp, #20]
    2214:	mov	r1, r7
    2218:	bl	0 <coda_detection_rule_add_entry>
    221c:	cmp	r0, #0
    2220:	bne	23f8 <cd_match_data_init+0x540>
    2224:	cmp	r9, #0
    2228:	beq	2370 <cd_match_data_init+0x4b8>
    222c:	ldr	r2, [sp, #24]
    2230:	sub	r0, r9, #64	; 0x40
    2234:	clz	r0, r0
    2238:	lsr	r1, r0, #5
    223c:	mov	r0, #1
    2240:	cmp	r2, #0
    2244:	mov	r2, r1
    2248:	beq	2058 <cd_match_data_init+0x1a0>
    224c:	ldr	r0, [sp, #20]
    2250:	movw	r1, #0
    2254:	movt	r1, #0
    2258:	b	22f0 <cd_match_data_init+0x438>
    225c:	mov	r0, r5
    2260:	bl	0 <strdup>
    2264:	cmp	r0, #0
    2268:	beq	22d0 <cd_match_data_init+0x418>
    226c:	mov	r1, r0
    2270:	mov	r0, #0
    2274:	mov	r2, #0
    2278:	mov	r3, #0
    227c:	str	r0, [sp]
    2280:	str	r0, [sp, #4]
    2284:	mov	r0, #20
    2288:	bl	0 <coda_expression_new>
    228c:	cmp	r0, #0
    2290:	beq	2338 <cd_match_data_init+0x480>
    2294:	mov	r6, r0
    2298:	ldr	r0, [r9]
    229c:	mov	r1, r6
    22a0:	ldr	r0, [r0, #8]
    22a4:	bl	0 <coda_detection_rule_entry_set_expression>
    22a8:	cmp	r0, #0
    22ac:	beq	2354 <cd_match_data_init+0x49c>
    22b0:	mov	r0, r6
    22b4:	bl	0 <coda_expression_delete>
    22b8:	b	1fb0 <cd_match_data_init+0xf8>
    22bc:	movw	r1, #0
    22c0:	movw	r2, #0
    22c4:	mvn	r0, #0
    22c8:	movw	r3, #2245	; 0x8c5
    22cc:	b	2324 <cd_match_data_init+0x46c>
    22d0:	movw	r1, #0
    22d4:	movw	r2, #0
    22d8:	mvn	r0, #0
    22dc:	movw	r3, #2459	; 0x99b
    22e0:	b	2324 <cd_match_data_init+0x46c>
    22e4:	ldr	r0, [sp, #20]
    22e8:	movw	r1, #0
    22ec:	movt	r1, #0
    22f0:	ldr	r0, [r0, #8]
    22f4:	ldr	r2, [r0, #8]
    22f8:	mvn	r0, #99	; 0x63
    22fc:	bl	0 <coda_set_error>
    2300:	mov	r0, r8
    2304:	bl	0 <free>
    2308:	ldr	r0, [sp, #16]
    230c:	bl	0 <free>
    2310:	b	1fb0 <cd_match_data_init+0xf8>
    2314:	movw	r1, #0
    2318:	movw	r2, #0
    231c:	mvn	r0, #0
    2320:	movw	r3, #2257	; 0x8d1
    2324:	mvn	r4, #0
    2328:	movt	r1, #0
    232c:	movt	r2, #0
    2330:	bl	0 <coda_set_error>
    2334:	b	1fb4 <cd_match_data_init+0xfc>
    2338:	movw	r0, #65136	; 0xfe70
    233c:	movw	r1, #0
    2340:	mov	r2, r5
    2344:	movt	r0, #65535	; 0xffff
    2348:	movt	r1, #0
    234c:	bl	0 <coda_set_error>
    2350:	b	1fb0 <cd_match_data_init+0xf8>
    2354:	ldr	r8, [r9]
    2358:	movw	r1, #0
    235c:	mov	r0, #1
    2360:	mov	r4, #0
    2364:	movt	r1, #0
    2368:	strd	r0, [r8, #32]
    236c:	b	1fb4 <cd_match_data_init+0xfc>
    2370:	ldr	r0, [sp, #16]
    2374:	bl	0 <free>
    2378:	mov	r0, r8
    237c:	bl	0 <coda_detection_rule_entry_new>
    2380:	ldr	r4, [sp, #12]
    2384:	ldr	r1, [r4]
    2388:	str	r0, [r1, #8]
    238c:	mov	r0, r8
    2390:	bl	0 <free>
    2394:	ldr	r8, [r4]
    2398:	ldr	r0, [r8, #8]
    239c:	cmp	r0, #0
    23a0:	bne	2358 <cd_match_data_init+0x4a0>
    23a4:	b	1fb0 <cd_match_data_init+0xf8>
    23a8:	movw	r1, #0
    23ac:	movw	r2, #0
    23b0:	mvn	r0, #0
    23b4:	movw	r3, #2359	; 0x937
    23b8:	mvn	r4, #0
    23bc:	movt	r1, #0
    23c0:	movt	r2, #0
    23c4:	bl	0 <coda_set_error>
    23c8:	mov	r0, r5
    23cc:	bl	0 <coda_expression_delete>
    23d0:	mov	r0, r8
    23d4:	bl	0 <free>
    23d8:	ldr	r0, [sp, #16]
    23dc:	bl	0 <free>
    23e0:	b	1fb4 <cd_match_data_init+0xfc>
    23e4:	mov	r0, r7
    23e8:	bl	0 <coda_detection_rule_entry_delete>
    23ec:	mov	r0, r5
    23f0:	bl	0 <coda_expression_delete>
    23f4:	b	2300 <cd_match_data_init+0x448>
    23f8:	mov	r0, r7
    23fc:	bl	0 <coda_detection_rule_entry_delete>
    2400:	b	2300 <cd_match_data_init+0x448>

00002404 <cd_detection_rule_add_entry>:
    2404:	push	{r4, sl, fp, lr}
    2408:	add	fp, sp, #8
    240c:	mov	r4, r0
    2410:	ldr	r0, [r0]
    2414:	ldr	r1, [r0, #8]
    2418:	cmp	r1, #0
    241c:	beq	244c <cd_detection_rule_add_entry+0x48>
    2420:	ldr	r0, [r0, #396]	; 0x18c
    2424:	ldr	r0, [r0, #8]
    2428:	bl	0 <coda_detection_rule_add_entry>
    242c:	mov	r1, r0
    2430:	mvn	r0, #0
    2434:	cmp	r1, #0
    2438:	popne	{r4, sl, fp, pc}
    243c:	ldr	r1, [r4]
    2440:	mov	r0, #0
    2444:	str	r0, [r1, #8]
    2448:	pop	{r4, sl, fp, pc}
    244c:	mov	r0, #0
    2450:	pop	{r4, sl, fp, pc}

00002454 <cd_match_expression_init>:
    2454:	push	{r4, r5, r6, r7, fp, lr}
    2458:	add	fp, sp, #16
    245c:	mov	r4, r0
    2460:	ldr	r0, [r1]
    2464:	mov	r5, #0
    2468:	cmp	r0, #0
    246c:	beq	24a8 <cd_match_expression_init+0x54>
    2470:	movw	r6, #0
    2474:	add	r7, r1, #4
    2478:	movt	r6, #0
    247c:	mov	r1, r6
    2480:	bl	0 <strcmp>
    2484:	cmp	r0, #0
    2488:	beq	24a4 <cd_match_expression_init+0x50>
    248c:	ldr	r0, [r7, #4]
    2490:	add	r1, r7, #8
    2494:	mov	r7, r1
    2498:	cmp	r0, #0
    249c:	bne	247c <cd_match_expression_init+0x28>
    24a0:	b	24a8 <cd_match_expression_init+0x54>
    24a4:	ldr	r5, [r7]
    24a8:	ldr	r0, [r4]
    24ac:	movw	r1, #0
    24b0:	movt	r1, #0
    24b4:	str	r1, [r0, #40]	; 0x28
    24b8:	mov	r0, r5
    24bc:	bl	0 <coda_detection_rule_entry_new>
    24c0:	ldr	r1, [r4]
    24c4:	cmp	r0, #0
    24c8:	str	r0, [r1, #8]
    24cc:	beq	24e8 <cd_match_expression_init+0x94>
    24d0:	movw	r3, #0
    24d4:	mov	r0, #0
    24d8:	mov	r2, #1
    24dc:	movt	r3, #0
    24e0:	strd	r2, [r1, #32]
    24e4:	pop	{r4, r5, r6, r7, fp, pc}
    24e8:	mvn	r0, #0
    24ec:	pop	{r4, r5, r6, r7, fp, pc}

000024f0 <cd_match_filename_init>:
    24f0:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
    24f4:	add	fp, sp, #24
    24f8:	sub	sp, sp, #8
    24fc:	mov	r9, r0
    2500:	ldr	r0, [r1]
    2504:	ldr	r6, [r9]
    2508:	cmp	r0, #0
    250c:	ldr	r7, [r6]
    2510:	beq	25dc <cd_match_filename_init+0xec>
    2514:	movw	r5, #0
    2518:	add	r4, r1, #4
    251c:	movt	r5, #0
    2520:	mov	r1, r5
    2524:	bl	0 <strcmp>
    2528:	cmp	r0, #0
    252c:	beq	2548 <cd_match_filename_init+0x58>
    2530:	ldr	r0, [r4, #4]
    2534:	add	r1, r4, #8
    2538:	mov	r4, r1
    253c:	cmp	r0, #0
    2540:	bne	2520 <cd_match_filename_init+0x30>
    2544:	b	25dc <cd_match_filename_init+0xec>
    2548:	ldr	r8, [r4]
    254c:	cmp	r8, #0
    2550:	beq	25dc <cd_match_filename_init+0xec>
    2554:	movw	r0, #0
    2558:	movt	r0, #0
    255c:	str	r0, [r6, #40]	; 0x28
    2560:	mov	r0, #0
    2564:	bl	0 <coda_detection_rule_entry_new>
    2568:	ldr	r1, [r9]
    256c:	mvn	r5, #0
    2570:	cmp	r0, #0
    2574:	str	r0, [r1, #8]
    2578:	beq	2628 <cd_match_filename_init+0x138>
    257c:	mov	r0, r8
    2580:	bl	0 <strdup>
    2584:	cmp	r0, #0
    2588:	beq	2634 <cd_match_filename_init+0x144>
    258c:	mov	r1, r0
    2590:	mov	r0, #0
    2594:	mov	r2, #0
    2598:	mov	r3, #0
    259c:	str	r0, [sp]
    25a0:	str	r0, [sp, #4]
    25a4:	mov	r0, #20
    25a8:	bl	0 <coda_expression_new>
    25ac:	cmp	r0, #0
    25b0:	beq	2658 <cd_match_filename_init+0x168>
    25b4:	mov	r7, r0
    25b8:	ldr	r0, [r9]
    25bc:	mov	r1, r7
    25c0:	ldr	r0, [r0, #8]
    25c4:	bl	0 <coda_detection_rule_entry_set_expression>
    25c8:	cmp	r0, #0
    25cc:	beq	2674 <cd_match_filename_init+0x184>
    25d0:	mov	r0, r7
    25d4:	bl	0 <coda_expression_delete>
    25d8:	b	2628 <cd_match_filename_init+0x138>
    25dc:	cmn	r7, #1
    25e0:	beq	2600 <cd_match_filename_init+0x110>
    25e4:	movw	r0, #0
    25e8:	movt	r0, #0
    25ec:	ldr	r3, [r0, r7, lsl #2]
    25f0:	ldrb	r0, [r3], #1
    25f4:	cmp	r0, #32
    25f8:	bne	25f0 <cd_match_filename_init+0x100>
    25fc:	b	2608 <cd_match_filename_init+0x118>
    2600:	movw	r3, #0
    2604:	movt	r3, #0
    2608:	movw	r0, #65136	; 0xfe70
    260c:	movw	r1, #0
    2610:	movw	r2, #0
    2614:	movt	r0, #65535	; 0xffff
    2618:	movt	r1, #0
    261c:	movt	r2, #0
    2620:	bl	0 <coda_set_error>
    2624:	mvn	r5, #0
    2628:	mov	r0, r5
    262c:	sub	sp, fp, #24
    2630:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
    2634:	movw	r1, #0
    2638:	movw	r2, #0
    263c:	mvn	r0, #0
    2640:	movw	r3, #2649	; 0xa59
    2644:	mvn	r5, #0
    2648:	movt	r1, #0
    264c:	movt	r2, #0
    2650:	bl	0 <coda_set_error>
    2654:	b	2628 <cd_match_filename_init+0x138>
    2658:	movw	r0, #65136	; 0xfe70
    265c:	movw	r1, #0
    2660:	mov	r2, r8
    2664:	movt	r0, #65535	; 0xffff
    2668:	movt	r1, #0
    266c:	bl	0 <coda_set_error>
    2670:	b	2628 <cd_match_filename_init+0x138>
    2674:	ldr	r0, [r9]
    2678:	movw	r1, #0
    267c:	mov	r2, #1
    2680:	mov	r5, #0
    2684:	movt	r1, #0
    2688:	str	r2, [r0, #32]
    268c:	str	r1, [r0, #36]	; 0x24
    2690:	b	2628 <cd_match_filename_init+0x138>

00002694 <cd_match_size_init>:
    2694:	push	{r4, r5, r6, r7, fp, lr}
    2698:	add	fp, sp, #16
    269c:	sub	sp, sp, #8
    26a0:	mov	r4, r0
    26a4:	ldr	r0, [r0]
    26a8:	mov	r5, r1
    26ac:	movw	r1, #0
    26b0:	movt	r1, #0
    26b4:	str	r1, [r0, #40]	; 0x28
    26b8:	mov	r0, #0
    26bc:	bl	0 <coda_detection_rule_entry_new>
    26c0:	ldr	r1, [r4]
    26c4:	cmp	r0, #0
    26c8:	str	r0, [r1, #8]
    26cc:	beq	2818 <cd_match_size_init+0x184>
    26d0:	ldr	r0, [r5]
    26d4:	ldr	r6, [r1]
    26d8:	cmp	r0, #0
    26dc:	beq	27d0 <cd_match_size_init+0x13c>
    26e0:	add	r7, r5, #4
    26e4:	movw	r5, #0
    26e8:	movt	r5, #0
    26ec:	mov	r1, r5
    26f0:	bl	0 <strcmp>
    26f4:	cmp	r0, #0
    26f8:	beq	2714 <cd_match_size_init+0x80>
    26fc:	ldr	r0, [r7, #4]
    2700:	add	r1, r7, #8
    2704:	mov	r7, r1
    2708:	cmp	r0, #0
    270c:	bne	26ec <cd_match_size_init+0x58>
    2710:	b	27d0 <cd_match_size_init+0x13c>
    2714:	ldr	r5, [r7]
    2718:	cmp	r5, #0
    271c:	beq	27d0 <cd_match_size_init+0x13c>
    2720:	mov	r0, r5
    2724:	bl	0 <strdup>
    2728:	cmp	r0, #0
    272c:	beq	2828 <cd_match_size_init+0x194>
    2730:	mov	r7, #0
    2734:	mov	r1, r0
    2738:	mov	r0, #20
    273c:	mov	r2, #0
    2740:	mov	r3, #0
    2744:	str	r7, [sp]
    2748:	str	r7, [sp, #4]
    274c:	bl	0 <coda_expression_new>
    2750:	cmp	r0, #0
    2754:	beq	284c <cd_match_size_init+0x1b8>
    2758:	mov	r6, r0
    275c:	mov	r0, #27
    2760:	mov	r1, #0
    2764:	mov	r2, #0
    2768:	mov	r3, #0
    276c:	str	r7, [sp]
    2770:	str	r7, [sp, #4]
    2774:	bl	0 <coda_expression_new>
    2778:	cmp	r0, #0
    277c:	beq	27c4 <cd_match_size_init+0x130>
    2780:	mov	r5, #0
    2784:	mov	r2, r0
    2788:	mov	r0, #25
    278c:	mov	r1, #0
    2790:	mov	r3, r6
    2794:	str	r5, [sp]
    2798:	str	r5, [sp, #4]
    279c:	bl	0 <coda_expression_new>
    27a0:	cmp	r0, #0
    27a4:	beq	2818 <cd_match_size_init+0x184>
    27a8:	mov	r6, r0
    27ac:	ldr	r0, [r4]
    27b0:	mov	r1, r6
    27b4:	ldr	r0, [r0, #8]
    27b8:	bl	0 <coda_detection_rule_entry_set_expression>
    27bc:	cmp	r0, #0
    27c0:	beq	281c <cd_match_size_init+0x188>
    27c4:	mov	r0, r6
    27c8:	bl	0 <coda_expression_delete>
    27cc:	b	2818 <cd_match_size_init+0x184>
    27d0:	cmn	r6, #1
    27d4:	beq	27f4 <cd_match_size_init+0x160>
    27d8:	movw	r0, #0
    27dc:	movt	r0, #0
    27e0:	ldr	r3, [r0, r6, lsl #2]
    27e4:	ldrb	r0, [r3], #1
    27e8:	cmp	r0, #32
    27ec:	bne	27e4 <cd_match_size_init+0x150>
    27f0:	b	27fc <cd_match_size_init+0x168>
    27f4:	movw	r3, #0
    27f8:	movt	r3, #0
    27fc:	movw	r0, #65136	; 0xfe70
    2800:	movw	r1, #0
    2804:	movw	r2, #0
    2808:	movt	r0, #65535	; 0xffff
    280c:	movt	r1, #0
    2810:	movt	r2, #0
    2814:	bl	0 <coda_set_error>
    2818:	mvn	r5, #0
    281c:	mov	r0, r5
    2820:	sub	sp, fp, #16
    2824:	pop	{r4, r5, r6, r7, fp, pc}
    2828:	movw	r1, #0
    282c:	movw	r2, #0
    2830:	mvn	r0, #0
    2834:	movw	r3, #2694	; 0xa86
    2838:	mvn	r5, #0
    283c:	movt	r1, #0
    2840:	movt	r2, #0
    2844:	bl	0 <coda_set_error>
    2848:	b	281c <cd_match_size_init+0x188>
    284c:	movw	r0, #65136	; 0xfe70
    2850:	movw	r1, #0
    2854:	mov	r2, r5
    2858:	movt	r0, #65535	; 0xffff
    285c:	movt	r1, #0
    2860:	bl	0 <coda_set_error>
    2864:	b	2818 <cd_match_size_init+0x184>

00002868 <cd_match_data_finalise>:
    2868:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    286c:	add	fp, sp, #28
    2870:	sub	sp, sp, #36	; 0x24
    2874:	mov	sl, r0
    2878:	ldr	r0, [r0]
    287c:	ldr	r1, [r0, #12]
    2880:	ldr	r9, [r0, #8]
    2884:	cmp	r1, #0
    2888:	beq	2928 <cd_match_data_finalise+0xc0>
    288c:	movw	r2, #1633	; 0x661
    2890:	mov	r7, #0
    2894:	mov	r0, #1
    2898:	mov	r4, #0
    289c:	movt	r2, #1348	; 0x544
    28a0:	b	28b8 <cd_match_data_finalise+0x50>
    28a4:	cmp	r3, #0
    28a8:	mov	r3, r7
    28ac:	beq	292c <cd_match_data_finalise+0xc4>
    28b0:	add	r7, r3, #1
    28b4:	add	r4, r4, #1
    28b8:	ldrb	r3, [r1, r7]
    28bc:	cmp	r3, #92	; 0x5c
    28c0:	bne	28a4 <cd_match_data_finalise+0x3c>
    28c4:	add	r3, r7, #1
    28c8:	ldrb	r6, [r1, r3]
    28cc:	sub	r5, r6, #92	; 0x5c
    28d0:	cmp	r5, #26
    28d4:	bhi	28e0 <cd_match_data_finalise+0x78>
    28d8:	tst	r2, r0, lsl r5
    28dc:	bne	28b0 <cd_match_data_finalise+0x48>
    28e0:	sub	r6, r6, #48	; 0x30
    28e4:	uxtb	r6, r6
    28e8:	cmp	r6, #9
    28ec:	bhi	2c28 <cd_match_data_finalise+0x3c0>
    28f0:	add	r6, r7, #2
    28f4:	ldrb	r5, [r1, r6]
    28f8:	sub	r5, r5, #48	; 0x30
    28fc:	uxtb	r5, r5
    2900:	cmp	r5, #9
    2904:	bhi	28b0 <cd_match_data_finalise+0x48>
    2908:	add	r3, r7, #3
    290c:	ldrb	r7, [r1, r3]
    2910:	sub	r7, r7, #48	; 0x30
    2914:	uxtb	r7, r7
    2918:	cmp	r7, #10
    291c:	movcc	r6, r3
    2920:	mov	r3, r6
    2924:	b	28b0 <cd_match_data_finalise+0x48>
    2928:	mov	r4, #0
    292c:	ldr	r0, [r9, #4]
    2930:	cmp	r0, #0
    2934:	beq	2a58 <cd_match_data_finalise+0x1f0>
    2938:	ldr	r0, [r0]
    293c:	cmp	r0, #20
    2940:	bne	3368 <cd_match_data_finalise+0xb00>
    2944:	cmp	r4, #0
    2948:	beq	2be8 <cd_match_data_finalise+0x380>
    294c:	mov	r0, #0
    2950:	mov	r1, #0
    2954:	mov	r2, #0
    2958:	mov	r3, #0
    295c:	str	r0, [sp]
    2960:	str	r0, [sp, #4]
    2964:	mov	r0, #38	; 0x26
    2968:	bl	0 <coda_expression_new>
    296c:	cmp	r0, #0
    2970:	beq	2c20 <cd_match_data_finalise+0x3b8>
    2974:	add	r7, sp, #11
    2978:	mov	r6, r0
    297c:	mov	r0, r4
    2980:	mov	r1, #0
    2984:	mov	r8, #0
    2988:	mov	r2, r7
    298c:	bl	0 <coda_str64>
    2990:	mov	r0, r7
    2994:	bl	0 <strdup>
    2998:	cmp	r0, #0
    299c:	beq	2c04 <cd_match_data_finalise+0x39c>
    29a0:	mov	r1, r0
    29a4:	mov	r0, #20
    29a8:	mov	r2, #0
    29ac:	mov	r3, #0
    29b0:	str	r8, [sp]
    29b4:	str	r8, [sp, #4]
    29b8:	bl	0 <coda_expression_new>
    29bc:	cmp	r0, #0
    29c0:	beq	2c18 <cd_match_data_finalise+0x3b0>
    29c4:	ldr	r3, [r9, #4]
    29c8:	mov	r4, #0
    29cc:	stm	sp, {r0, r4}
    29d0:	mov	r0, #16
    29d4:	mov	r1, #0
    29d8:	mov	r2, r6
    29dc:	bl	0 <coda_expression_new>
    29e0:	cmp	r0, #0
    29e4:	str	r4, [r9, #4]
    29e8:	beq	2c20 <cd_match_data_finalise+0x3b8>
    29ec:	mov	r6, r0
    29f0:	ldr	r0, [sl]
    29f4:	ldr	r0, [r0, #12]
    29f8:	bl	0 <strdup>
    29fc:	cmp	r0, #0
    2a00:	beq	2c50 <cd_match_data_finalise+0x3e8>
    2a04:	mov	r4, #0
    2a08:	mov	r1, r0
    2a0c:	mov	r0, #22
    2a10:	mov	r2, #0
    2a14:	mov	r3, #0
    2a18:	str	r4, [sp]
    2a1c:	str	r4, [sp, #4]
    2a20:	bl	0 <coda_expression_new>
    2a24:	cmp	r0, #0
    2a28:	beq	2c18 <cd_match_data_finalise+0x3b0>
    2a2c:	mov	r3, r0
    2a30:	mov	r0, #25
    2a34:	mov	r1, #0
    2a38:	mov	r2, r6
    2a3c:	str	r4, [sp]
    2a40:	str	r4, [sp, #4]
    2a44:	bl	0 <coda_expression_new>
    2a48:	cmp	r0, #0
    2a4c:	str	r0, [r9, #4]
    2a50:	bne	3368 <cd_match_data_finalise+0xb00>
    2a54:	b	2c20 <cd_match_data_finalise+0x3b8>
    2a58:	ldr	r0, [r9]
    2a5c:	cmp	r0, #0
    2a60:	beq	2b18 <cd_match_data_finalise+0x2b0>
    2a64:	cmp	r4, #0
    2a68:	beq	3368 <cd_match_data_finalise+0xb00>
    2a6c:	mov	r6, #0
    2a70:	mov	r0, #36	; 0x24
    2a74:	mov	r1, #0
    2a78:	mov	r2, #0
    2a7c:	mov	r3, #0
    2a80:	str	r6, [sp]
    2a84:	str	r6, [sp, #4]
    2a88:	bl	0 <coda_expression_new>
    2a8c:	mvn	r4, #0
    2a90:	cmp	r0, #0
    2a94:	beq	336c <cd_match_data_finalise+0xb04>
    2a98:	mov	r2, r0
    2a9c:	mov	r0, #75	; 0x4b
    2aa0:	mov	r1, #0
    2aa4:	mov	r3, #0
    2aa8:	str	r6, [sp]
    2aac:	str	r6, [sp, #4]
    2ab0:	bl	0 <coda_expression_new>
    2ab4:	cmp	r0, #0
    2ab8:	beq	336c <cd_match_data_finalise+0xb04>
    2abc:	mov	r6, r0
    2ac0:	ldr	r0, [sl]
    2ac4:	ldr	r0, [r0, #12]
    2ac8:	bl	0 <strdup>
    2acc:	cmp	r0, #0
    2ad0:	beq	2c3c <cd_match_data_finalise+0x3d4>
    2ad4:	mov	r5, #0
    2ad8:	mov	r1, r0
    2adc:	mov	r0, #22
    2ae0:	mov	r2, #0
    2ae4:	mov	r3, #0
    2ae8:	str	r5, [sp]
    2aec:	str	r5, [sp, #4]
    2af0:	bl	0 <coda_expression_new>
    2af4:	cmp	r0, #0
    2af8:	beq	2c70 <cd_match_data_finalise+0x408>
    2afc:	mov	r3, r0
    2b00:	mov	r0, #25
    2b04:	mov	r1, #0
    2b08:	mov	r2, r6
    2b0c:	str	r5, [sp]
    2b10:	str	r5, [sp, #4]
    2b14:	b	333c <cd_match_data_finalise+0xad4>
    2b18:	cmp	r4, #0
    2b1c:	beq	2be8 <cd_match_data_finalise+0x380>
    2b20:	mov	r7, #0
    2b24:	mov	r0, #38	; 0x26
    2b28:	mov	r1, #0
    2b2c:	mov	r2, #0
    2b30:	mov	r3, #0
    2b34:	str	r7, [sp]
    2b38:	str	r7, [sp, #4]
    2b3c:	bl	0 <coda_expression_new>
    2b40:	mvn	r4, #0
    2b44:	cmp	r0, #0
    2b48:	beq	336c <cd_match_data_finalise+0xb04>
    2b4c:	mov	r6, r0
    2b50:	movw	r0, #0
    2b54:	movt	r0, #0
    2b58:	bl	0 <strdup>
    2b5c:	mov	r1, r0
    2b60:	mov	r0, #20
    2b64:	mov	r2, #0
    2b68:	mov	r3, #0
    2b6c:	str	r7, [sp]
    2b70:	str	r7, [sp, #4]
    2b74:	bl	0 <coda_expression_new>
    2b78:	cmp	r0, #0
    2b7c:	beq	2c70 <cd_match_data_finalise+0x408>
    2b80:	mov	r3, r0
    2b84:	mov	r0, #0
    2b88:	mov	r1, #0
    2b8c:	mov	r2, r6
    2b90:	str	r0, [sp]
    2b94:	str	r0, [sp, #4]
    2b98:	mov	r0, #16
    2b9c:	bl	0 <coda_expression_new>
    2ba0:	cmp	r0, #0
    2ba4:	beq	336c <cd_match_data_finalise+0xb04>
    2ba8:	mov	r8, r0
    2bac:	ldr	r0, [sl]
    2bb0:	ldr	r5, [r0, #12]
    2bb4:	mov	r0, r5
    2bb8:	bl	0 <strlen>
    2bbc:	mov	r7, r0
    2bc0:	cmp	r0, #1
    2bc4:	blt	2c7c <cd_match_data_finalise+0x414>
    2bc8:	and	ip, r7, #1
    2bcc:	cmp	r7, #1
    2bd0:	bne	2c84 <cd_match_data_finalise+0x41c>
    2bd4:	mov	r1, #0
    2bd8:	mov	r2, #0
    2bdc:	cmp	ip, #0
    2be0:	bne	2fb0 <cd_match_data_finalise+0x748>
    2be4:	b	3134 <cd_match_data_finalise+0x8cc>
    2be8:	movw	r0, #65136	; 0xfe70
    2bec:	movw	r1, #0
    2bf0:	movt	r0, #65535	; 0xffff
    2bf4:	movt	r1, #0
    2bf8:	bl	0 <coda_set_error>
    2bfc:	mvn	r4, #0
    2c00:	b	336c <cd_match_data_finalise+0xb04>
    2c04:	movw	r1, #0
    2c08:	movw	r2, #0
    2c0c:	mvn	r0, #0
    2c10:	movw	r3, #2184	; 0x888
    2c14:	b	2c60 <cd_match_data_finalise+0x3f8>
    2c18:	mov	r0, r6
    2c1c:	bl	0 <coda_expression_delete>
    2c20:	mvn	r4, #0
    2c24:	b	336c <cd_match_data_finalise+0xb04>
    2c28:	movw	r0, #65136	; 0xfe70
    2c2c:	movw	r1, #0
    2c30:	movt	r0, #65535	; 0xffff
    2c34:	movt	r1, #0
    2c38:	b	2bf8 <cd_match_data_finalise+0x390>
    2c3c:	movw	r1, #0
    2c40:	movw	r2, #0
    2c44:	mvn	r0, #0
    2c48:	movw	r3, #2090	; 0x82a
    2c4c:	b	2c60 <cd_match_data_finalise+0x3f8>
    2c50:	movw	r1, #0
    2c54:	movw	r2, #0
    2c58:	mvn	r0, #0
    2c5c:	movw	r3, #2204	; 0x89c
    2c60:	mvn	r4, #0
    2c64:	movt	r1, #0
    2c68:	movt	r2, #0
    2c6c:	bl	0 <coda_set_error>
    2c70:	mov	r0, r6
    2c74:	bl	0 <coda_expression_delete>
    2c78:	b	336c <cd_match_data_finalise+0xb04>
    2c7c:	mov	r6, #1
    2c80:	b	3138 <cd_match_data_finalise+0x8d0>
    2c84:	sub	lr, r7, ip
    2c88:	mov	r1, #0
    2c8c:	mov	r2, #0
    2c90:	ldrb	r0, [r5, r1]
    2c94:	sub	r0, r0, #36	; 0x24
    2c98:	cmp	r0, #88	; 0x58
    2c9c:	bhi	2e10 <cd_match_data_finalise+0x5a8>
    2ca0:	add	r6, pc, #0
    2ca4:	ldr	pc, [r6, r0, lsl #2]
    2ca8:	.word	0x00002e0c
    2cac:	.word	0x00002e10
    2cb0:	.word	0x00002e10
    2cb4:	.word	0x00002e10
    2cb8:	.word	0x00002e0c
    2cbc:	.word	0x00002e0c
    2cc0:	.word	0x00002e0c
    2cc4:	.word	0x00002e0c
    2cc8:	.word	0x00002e10
    2ccc:	.word	0x00002e10
    2cd0:	.word	0x00002e0c
    2cd4:	.word	0x00002e10
    2cd8:	.word	0x00002e10
    2cdc:	.word	0x00002e10
    2ce0:	.word	0x00002e10
    2ce4:	.word	0x00002e10
    2ce8:	.word	0x00002e10
    2cec:	.word	0x00002e10
    2cf0:	.word	0x00002e10
    2cf4:	.word	0x00002e10
    2cf8:	.word	0x00002e10
    2cfc:	.word	0x00002e10
    2d00:	.word	0x00002e10
    2d04:	.word	0x00002e10
    2d08:	.word	0x00002e10
    2d0c:	.word	0x00002e10
    2d10:	.word	0x00002e10
    2d14:	.word	0x00002e0c
    2d18:	.word	0x00002e10
    2d1c:	.word	0x00002e10
    2d20:	.word	0x00002e10
    2d24:	.word	0x00002e10
    2d28:	.word	0x00002e10
    2d2c:	.word	0x00002e10
    2d30:	.word	0x00002e10
    2d34:	.word	0x00002e10
    2d38:	.word	0x00002e10
    2d3c:	.word	0x00002e10
    2d40:	.word	0x00002e10
    2d44:	.word	0x00002e10
    2d48:	.word	0x00002e10
    2d4c:	.word	0x00002e10
    2d50:	.word	0x00002e10
    2d54:	.word	0x00002e10
    2d58:	.word	0x00002e10
    2d5c:	.word	0x00002e10
    2d60:	.word	0x00002e10
    2d64:	.word	0x00002e10
    2d68:	.word	0x00002e10
    2d6c:	.word	0x00002e10
    2d70:	.word	0x00002e10
    2d74:	.word	0x00002e10
    2d78:	.word	0x00002e10
    2d7c:	.word	0x00002e10
    2d80:	.word	0x00002e10
    2d84:	.word	0x00002e0c
    2d88:	.word	0x00002e0c
    2d8c:	.word	0x00002e10
    2d90:	.word	0x00002e0c
    2d94:	.word	0x00002e10
    2d98:	.word	0x00002e10
    2d9c:	.word	0x00002e10
    2da0:	.word	0x00002e10
    2da4:	.word	0x00002e10
    2da8:	.word	0x00002e10
    2dac:	.word	0x00002e10
    2db0:	.word	0x00002e10
    2db4:	.word	0x00002e10
    2db8:	.word	0x00002e10
    2dbc:	.word	0x00002e10
    2dc0:	.word	0x00002e10
    2dc4:	.word	0x00002e10
    2dc8:	.word	0x00002e10
    2dcc:	.word	0x00002e10
    2dd0:	.word	0x00002e10
    2dd4:	.word	0x00002e10
    2dd8:	.word	0x00002e10
    2ddc:	.word	0x00002e10
    2de0:	.word	0x00002e10
    2de4:	.word	0x00002e10
    2de8:	.word	0x00002e10
    2dec:	.word	0x00002e10
    2df0:	.word	0x00002e10
    2df4:	.word	0x00002e10
    2df8:	.word	0x00002e10
    2dfc:	.word	0x00002e10
    2e00:	.word	0x00002e10
    2e04:	.word	0x00002e0c
    2e08:	.word	0x00002e0c
    2e0c:	add	r2, r2, #1
    2e10:	add	r0, r5, r1
    2e14:	add	r6, r2, #1
    2e18:	ldrb	r0, [r0, #1]
    2e1c:	sub	r0, r0, #36	; 0x24
    2e20:	cmp	r0, #88	; 0x58
    2e24:	bhi	2f98 <cd_match_data_finalise+0x730>
    2e28:	add	r3, pc, #0
    2e2c:	ldr	pc, [r3, r0, lsl #2]
    2e30:	.word	0x00002f94
    2e34:	.word	0x00002f98
    2e38:	.word	0x00002f98
    2e3c:	.word	0x00002f98
    2e40:	.word	0x00002f94
    2e44:	.word	0x00002f94
    2e48:	.word	0x00002f94
    2e4c:	.word	0x00002f94
    2e50:	.word	0x00002f98
    2e54:	.word	0x00002f98
    2e58:	.word	0x00002f94
    2e5c:	.word	0x00002f98
    2e60:	.word	0x00002f98
    2e64:	.word	0x00002f98
    2e68:	.word	0x00002f98
    2e6c:	.word	0x00002f98
    2e70:	.word	0x00002f98
    2e74:	.word	0x00002f98
    2e78:	.word	0x00002f98
    2e7c:	.word	0x00002f98
    2e80:	.word	0x00002f98
    2e84:	.word	0x00002f98
    2e88:	.word	0x00002f98
    2e8c:	.word	0x00002f98
    2e90:	.word	0x00002f98
    2e94:	.word	0x00002f98
    2e98:	.word	0x00002f98
    2e9c:	.word	0x00002f94
    2ea0:	.word	0x00002f98
    2ea4:	.word	0x00002f98
    2ea8:	.word	0x00002f98
    2eac:	.word	0x00002f98
    2eb0:	.word	0x00002f98
    2eb4:	.word	0x00002f98
    2eb8:	.word	0x00002f98
    2ebc:	.word	0x00002f98
    2ec0:	.word	0x00002f98
    2ec4:	.word	0x00002f98
    2ec8:	.word	0x00002f98
    2ecc:	.word	0x00002f98
    2ed0:	.word	0x00002f98
    2ed4:	.word	0x00002f98
    2ed8:	.word	0x00002f98
    2edc:	.word	0x00002f98
    2ee0:	.word	0x00002f98
    2ee4:	.word	0x00002f98
    2ee8:	.word	0x00002f98
    2eec:	.word	0x00002f98
    2ef0:	.word	0x00002f98
    2ef4:	.word	0x00002f98
    2ef8:	.word	0x00002f98
    2efc:	.word	0x00002f98
    2f00:	.word	0x00002f98
    2f04:	.word	0x00002f98
    2f08:	.word	0x00002f98
    2f0c:	.word	0x00002f94
    2f10:	.word	0x00002f94
    2f14:	.word	0x00002f98
    2f18:	.word	0x00002f94
    2f1c:	.word	0x00002f98
    2f20:	.word	0x00002f98
    2f24:	.word	0x00002f98
    2f28:	.word	0x00002f98
    2f2c:	.word	0x00002f98
    2f30:	.word	0x00002f98
    2f34:	.word	0x00002f98
    2f38:	.word	0x00002f98
    2f3c:	.word	0x00002f98
    2f40:	.word	0x00002f98
    2f44:	.word	0x00002f98
    2f48:	.word	0x00002f98
    2f4c:	.word	0x00002f98
    2f50:	.word	0x00002f98
    2f54:	.word	0x00002f98
    2f58:	.word	0x00002f98
    2f5c:	.word	0x00002f98
    2f60:	.word	0x00002f98
    2f64:	.word	0x00002f98
    2f68:	.word	0x00002f98
    2f6c:	.word	0x00002f98
    2f70:	.word	0x00002f98
    2f74:	.word	0x00002f98
    2f78:	.word	0x00002f98
    2f7c:	.word	0x00002f98
    2f80:	.word	0x00002f98
    2f84:	.word	0x00002f98
    2f88:	.word	0x00002f98
    2f8c:	.word	0x00002f94
    2f90:	.word	0x00002f94
    2f94:	add	r6, r2, #2
    2f98:	add	r1, r1, #2
    2f9c:	add	r2, r6, #1
    2fa0:	cmp	lr, r1
    2fa4:	bne	2c90 <cd_match_data_finalise+0x428>
    2fa8:	cmp	ip, #0
    2fac:	beq	3134 <cd_match_data_finalise+0x8cc>
    2fb0:	ldrb	r0, [r5, r1]
    2fb4:	sub	r0, r0, #36	; 0x24
    2fb8:	cmp	r0, #88	; 0x58
    2fbc:	bhi	33a8 <cd_match_data_finalise+0xb40>
    2fc0:	add	r1, pc, #4
    2fc4:	mov	r6, r2
    2fc8:	ldr	pc, [r1, r0, lsl #2]
    2fcc:	.word	0x00003130
    2fd0:	.word	0x00003134
    2fd4:	.word	0x00003134
    2fd8:	.word	0x00003134
    2fdc:	.word	0x00003130
    2fe0:	.word	0x00003130
    2fe4:	.word	0x00003130
    2fe8:	.word	0x00003130
    2fec:	.word	0x00003134
    2ff0:	.word	0x00003134
    2ff4:	.word	0x00003130
    2ff8:	.word	0x00003134
    2ffc:	.word	0x00003134
    3000:	.word	0x00003134
    3004:	.word	0x00003134
    3008:	.word	0x00003134
    300c:	.word	0x00003134
    3010:	.word	0x00003134
    3014:	.word	0x00003134
    3018:	.word	0x00003134
    301c:	.word	0x00003134
    3020:	.word	0x00003134
    3024:	.word	0x00003134
    3028:	.word	0x00003134
    302c:	.word	0x00003134
    3030:	.word	0x00003134
    3034:	.word	0x00003134
    3038:	.word	0x00003130
    303c:	.word	0x00003134
    3040:	.word	0x00003134
    3044:	.word	0x00003134
    3048:	.word	0x00003134
    304c:	.word	0x00003134
    3050:	.word	0x00003134
    3054:	.word	0x00003134
    3058:	.word	0x00003134
    305c:	.word	0x00003134
    3060:	.word	0x00003134
    3064:	.word	0x00003134
    3068:	.word	0x00003134
    306c:	.word	0x00003134
    3070:	.word	0x00003134
    3074:	.word	0x00003134
    3078:	.word	0x00003134
    307c:	.word	0x00003134
    3080:	.word	0x00003134
    3084:	.word	0x00003134
    3088:	.word	0x00003134
    308c:	.word	0x00003134
    3090:	.word	0x00003134
    3094:	.word	0x00003134
    3098:	.word	0x00003134
    309c:	.word	0x00003134
    30a0:	.word	0x00003134
    30a4:	.word	0x00003134
    30a8:	.word	0x00003130
    30ac:	.word	0x00003130
    30b0:	.word	0x00003134
    30b4:	.word	0x00003130
    30b8:	.word	0x00003134
    30bc:	.word	0x00003134
    30c0:	.word	0x00003134
    30c4:	.word	0x00003134
    30c8:	.word	0x00003134
    30cc:	.word	0x00003134
    30d0:	.word	0x00003134
    30d4:	.word	0x00003134
    30d8:	.word	0x00003134
    30dc:	.word	0x00003134
    30e0:	.word	0x00003134
    30e4:	.word	0x00003134
    30e8:	.word	0x00003134
    30ec:	.word	0x00003134
    30f0:	.word	0x00003134
    30f4:	.word	0x00003134
    30f8:	.word	0x00003134
    30fc:	.word	0x00003134
    3100:	.word	0x00003134
    3104:	.word	0x00003134
    3108:	.word	0x00003134
    310c:	.word	0x00003134
    3110:	.word	0x00003134
    3114:	.word	0x00003134
    3118:	.word	0x00003134
    311c:	.word	0x00003134
    3120:	.word	0x00003134
    3124:	.word	0x00003134
    3128:	.word	0x00003130
    312c:	.word	0x00003130
    3130:	add	r6, r2, #1
    3134:	add	r6, r6, #2
    3138:	mov	r0, r6
    313c:	bl	0 <malloc>
    3140:	cmp	r0, #0
    3144:	beq	3378 <cd_match_data_finalise+0xb10>
    3148:	mov	r1, r0
    314c:	mov	ip, #0
    3150:	cmp	r7, #1
    3154:	mov	r2, #0
    3158:	blt	32fc <cd_match_data_finalise+0xa94>
    315c:	mov	r2, #0
    3160:	mov	lr, #92	; 0x5c
    3164:	ldrb	r6, [r5]
    3168:	sub	r0, r6, #36	; 0x24
    316c:	cmp	r0, #88	; 0x58
    3170:	bhi	32e8 <cd_match_data_finalise+0xa80>
    3174:	add	r3, pc, #0
    3178:	ldr	pc, [r3, r0, lsl #2]
    317c:	.word	0x000032e0
    3180:	.word	0x000032e8
    3184:	.word	0x000032e8
    3188:	.word	0x000032e8
    318c:	.word	0x000032e0
    3190:	.word	0x000032e0
    3194:	.word	0x000032e0
    3198:	.word	0x000032e0
    319c:	.word	0x000032e8
    31a0:	.word	0x000032e8
    31a4:	.word	0x000032e0
    31a8:	.word	0x000032e8
    31ac:	.word	0x000032e8
    31b0:	.word	0x000032e8
    31b4:	.word	0x000032e8
    31b8:	.word	0x000032e8
    31bc:	.word	0x000032e8
    31c0:	.word	0x000032e8
    31c4:	.word	0x000032e8
    31c8:	.word	0x000032e8
    31cc:	.word	0x000032e8
    31d0:	.word	0x000032e8
    31d4:	.word	0x000032e8
    31d8:	.word	0x000032e8
    31dc:	.word	0x000032e8
    31e0:	.word	0x000032e8
    31e4:	.word	0x000032e8
    31e8:	.word	0x000032e0
    31ec:	.word	0x000032e8
    31f0:	.word	0x000032e8
    31f4:	.word	0x000032e8
    31f8:	.word	0x000032e8
    31fc:	.word	0x000032e8
    3200:	.word	0x000032e8
    3204:	.word	0x000032e8
    3208:	.word	0x000032e8
    320c:	.word	0x000032e8
    3210:	.word	0x000032e8
    3214:	.word	0x000032e8
    3218:	.word	0x000032e8
    321c:	.word	0x000032e8
    3220:	.word	0x000032e8
    3224:	.word	0x000032e8
    3228:	.word	0x000032e8
    322c:	.word	0x000032e8
    3230:	.word	0x000032e8
    3234:	.word	0x000032e8
    3238:	.word	0x000032e8
    323c:	.word	0x000032e8
    3240:	.word	0x000032e8
    3244:	.word	0x000032e8
    3248:	.word	0x000032e8
    324c:	.word	0x000032e8
    3250:	.word	0x000032e8
    3254:	.word	0x000032e8
    3258:	.word	0x000032e0
    325c:	.word	0x000032e0
    3260:	.word	0x000032e8
    3264:	.word	0x000032e0
    3268:	.word	0x000032e8
    326c:	.word	0x000032e8
    3270:	.word	0x000032e8
    3274:	.word	0x000032e8
    3278:	.word	0x000032e8
    327c:	.word	0x000032e8
    3280:	.word	0x000032e8
    3284:	.word	0x000032e8
    3288:	.word	0x000032e8
    328c:	.word	0x000032e8
    3290:	.word	0x000032e8
    3294:	.word	0x000032e8
    3298:	.word	0x000032e8
    329c:	.word	0x000032e8
    32a0:	.word	0x000032e8
    32a4:	.word	0x000032e8
    32a8:	.word	0x000032e8
    32ac:	.word	0x000032e8
    32b0:	.word	0x000032e8
    32b4:	.word	0x000032e8
    32b8:	.word	0x000032e8
    32bc:	.word	0x000032e8
    32c0:	.word	0x000032e8
    32c4:	.word	0x000032e8
    32c8:	.word	0x000032e8
    32cc:	.word	0x000032e8
    32d0:	.word	0x000032e8
    32d4:	.word	0x000032e8
    32d8:	.word	0x000032e0
    32dc:	.word	0x000032e0
    32e0:	strb	lr, [r1, r2]
    32e4:	add	r2, r2, #1
    32e8:	strb	r6, [r1, r2]
    32ec:	add	r5, r5, #1
    32f0:	subs	r7, r7, #1
    32f4:	add	r2, r2, #1
    32f8:	bne	3164 <cd_match_data_finalise+0x8fc>
    32fc:	strb	ip, [r1, r2]
    3300:	mov	r0, #21
    3304:	mov	r2, #0
    3308:	mov	r3, #0
    330c:	str	ip, [sp]
    3310:	str	ip, [sp, #4]
    3314:	bl	0 <coda_expression_new>
    3318:	cmp	r0, #0
    331c:	beq	33a0 <cd_match_data_finalise+0xb38>
    3320:	mov	r2, r0
    3324:	mov	r0, #0
    3328:	mov	r1, #0
    332c:	mov	r3, r8
    3330:	str	r0, [sp]
    3334:	str	r0, [sp, #4]
    3338:	mov	r0, #71	; 0x47
    333c:	bl	0 <coda_expression_new>
    3340:	cmp	r0, #0
    3344:	beq	336c <cd_match_data_finalise+0xb04>
    3348:	mov	r5, r0
    334c:	mov	r0, r9
    3350:	mov	r1, r5
    3354:	bl	0 <coda_detection_rule_entry_set_expression>
    3358:	cmp	r0, #0
    335c:	beq	3368 <cd_match_data_finalise+0xb00>
    3360:	mov	r0, r5
    3364:	b	2c74 <cd_match_data_finalise+0x40c>
    3368:	mov	r4, #0
    336c:	mov	r0, r4
    3370:	sub	sp, fp, #28
    3374:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3378:	movw	r1, #0
    337c:	movw	r3, #0
    3380:	movw	r0, #339	; 0x153
    3384:	mov	r2, r6
    3388:	mvn	r4, #0
    338c:	movt	r1, #0
    3390:	movt	r3, #0
    3394:	str	r0, [sp]
    3398:	mvn	r0, #0
    339c:	bl	0 <coda_set_error>
    33a0:	mov	r0, r8
    33a4:	b	2c74 <cd_match_data_finalise+0x40c>
    33a8:	mov	r6, r2
    33ac:	b	3134 <cd_match_data_finalise+0x8cc>

000033b0 <cd_match_expression_finalise>:
    33b0:	push	{r4, r5, r6, sl, fp, lr}
    33b4:	add	fp, sp, #16
    33b8:	sub	sp, sp, #8
    33bc:	mov	r6, r0
    33c0:	ldr	r0, [r0]
    33c4:	ldr	r5, [r0, #12]
    33c8:	cmp	r5, #0
    33cc:	beq	3428 <cd_match_expression_finalise+0x78>
    33d0:	mov	r0, r5
    33d4:	bl	0 <strlen>
    33d8:	cmp	r0, #1
    33dc:	blt	3414 <cd_match_expression_finalise+0x64>
    33e0:	movw	r3, #19
    33e4:	mov	r1, #0
    33e8:	mov	r2, #1
    33ec:	movt	r3, #128	; 0x80
    33f0:	ldrb	r4, [r5, r1]
    33f4:	sub	r4, r4, #9
    33f8:	cmp	r4, #23
    33fc:	bhi	344c <cd_match_expression_finalise+0x9c>
    3400:	tst	r3, r2, lsl r4
    3404:	beq	344c <cd_match_expression_finalise+0x9c>
    3408:	add	r1, r1, #1
    340c:	cmp	r0, r1
    3410:	bne	33f0 <cd_match_expression_finalise+0x40>
    3414:	mov	r0, r5
    3418:	bl	0 <free>
    341c:	ldr	r0, [r6]
    3420:	mov	r1, #0
    3424:	str	r1, [r0, #12]
    3428:	movw	r0, #65136	; 0xfe70
    342c:	movw	r1, #0
    3430:	movt	r0, #65535	; 0xffff
    3434:	movt	r1, #0
    3438:	bl	0 <coda_set_error>
    343c:	mvn	r4, #0
    3440:	mov	r0, r4
    3444:	sub	sp, fp, #16
    3448:	pop	{r4, r5, r6, sl, fp, pc}
    344c:	mov	r1, sp
    3450:	mov	r0, r5
    3454:	bl	0 <coda_expression_from_string>
    3458:	cmp	r0, #0
    345c:	bne	343c <cd_match_expression_finalise+0x8c>
    3460:	ldr	r0, [r6]
    3464:	ldr	r0, [r0, #12]
    3468:	bl	0 <free>
    346c:	ldr	r0, [r6]
    3470:	mov	r4, #0
    3474:	str	r4, [r0, #12]
    3478:	ldr	r1, [r0, #8]
    347c:	ldr	r0, [sp]
    3480:	str	r0, [r1, #4]
    3484:	add	r1, sp, #4
    3488:	bl	0 <coda_expression_get_type>
    348c:	cmp	r0, #0
    3490:	bne	343c <cd_match_expression_finalise+0x8c>
    3494:	ldr	r0, [sp, #4]
    3498:	cmp	r0, #0
    349c:	beq	3440 <cd_match_expression_finalise+0x90>
    34a0:	movw	r0, #65136	; 0xfe70
    34a4:	movw	r1, #0
    34a8:	movt	r0, #65535	; 0xffff
    34ac:	movt	r1, #0
    34b0:	b	3438 <cd_match_expression_finalise+0x88>

000034b4 <cd_match_filename_finalise>:
    34b4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    34b8:	add	fp, sp, #28
    34bc:	sub	sp, sp, #36	; 0x24
    34c0:	ldr	r1, [r0]
    34c4:	mov	r9, r0
    34c8:	ldr	r0, [r1, #12]
    34cc:	cmp	r0, #0
    34d0:	beq	369c <cd_match_filename_finalise+0x1e8>
    34d4:	ldr	r8, [r1, #8]
    34d8:	movw	r2, #1633	; 0x661
    34dc:	mov	r7, #0
    34e0:	mov	r1, #1
    34e4:	mov	r6, #0
    34e8:	movt	r2, #1348	; 0x544
    34ec:	b	3504 <cd_match_filename_finalise+0x50>
    34f0:	cmp	r3, #0
    34f4:	mov	r3, r7
    34f8:	beq	3574 <cd_match_filename_finalise+0xc0>
    34fc:	add	r7, r3, #1
    3500:	add	r6, r6, #1
    3504:	ldrb	r3, [r0, r7]
    3508:	cmp	r3, #92	; 0x5c
    350c:	bne	34f0 <cd_match_filename_finalise+0x3c>
    3510:	add	r3, r7, #1
    3514:	ldrb	r5, [r0, r3]
    3518:	sub	r4, r5, #92	; 0x5c
    351c:	cmp	r4, #26
    3520:	bhi	352c <cd_match_filename_finalise+0x78>
    3524:	tst	r2, r1, lsl r4
    3528:	bne	34fc <cd_match_filename_finalise+0x48>
    352c:	sub	r5, r5, #48	; 0x30
    3530:	uxtb	r5, r5
    3534:	cmp	r5, #9
    3538:	bhi	36e4 <cd_match_filename_finalise+0x230>
    353c:	add	r5, r7, #2
    3540:	ldrb	r4, [r0, r5]
    3544:	sub	r4, r4, #48	; 0x30
    3548:	uxtb	r4, r4
    354c:	cmp	r4, #9
    3550:	bhi	34fc <cd_match_filename_finalise+0x48>
    3554:	add	r3, r7, #3
    3558:	ldrb	r7, [r0, r3]
    355c:	sub	r7, r7, #48	; 0x30
    3560:	uxtb	r7, r7
    3564:	cmp	r7, #10
    3568:	movcc	r5, r3
    356c:	mov	r3, r5
    3570:	b	34fc <cd_match_filename_finalise+0x48>
    3574:	cmp	r6, #0
    3578:	beq	369c <cd_match_filename_finalise+0x1e8>
    357c:	mov	r0, #0
    3580:	mov	r1, #0
    3584:	mov	r2, #0
    3588:	mov	r3, #0
    358c:	str	r0, [sp]
    3590:	str	r0, [sp, #4]
    3594:	mov	r0, #28
    3598:	bl	0 <coda_expression_new>
    359c:	mvn	r5, #0
    35a0:	cmp	r0, #0
    35a4:	beq	36b4 <cd_match_filename_finalise+0x200>
    35a8:	mov	r4, r8
    35ac:	add	r8, sp, #11
    35b0:	mov	r7, r0
    35b4:	mov	r0, r6
    35b8:	mov	r1, #0
    35bc:	mov	sl, #0
    35c0:	mov	r2, r8
    35c4:	bl	0 <coda_str64>
    35c8:	mov	r0, r8
    35cc:	bl	0 <strdup>
    35d0:	cmp	r0, #0
    35d4:	beq	36c0 <cd_match_filename_finalise+0x20c>
    35d8:	mov	r1, r0
    35dc:	mov	r0, #20
    35e0:	mov	r2, #0
    35e4:	mov	r3, #0
    35e8:	str	sl, [sp]
    35ec:	str	sl, [sp, #4]
    35f0:	bl	0 <coda_expression_new>
    35f4:	cmp	r0, #0
    35f8:	beq	3718 <cd_match_filename_finalise+0x264>
    35fc:	ldr	r2, [r4, #4]
    3600:	mov	r3, r0
    3604:	mov	r6, r4
    3608:	mov	r4, #0
    360c:	mov	r0, #77	; 0x4d
    3610:	mov	r1, #0
    3614:	str	r7, [sp]
    3618:	str	r4, [sp, #4]
    361c:	bl	0 <coda_expression_new>
    3620:	cmp	r0, #0
    3624:	str	r4, [r6, #4]
    3628:	beq	36b4 <cd_match_filename_finalise+0x200>
    362c:	mov	r7, r0
    3630:	ldr	r0, [r9]
    3634:	ldr	r0, [r0, #12]
    3638:	bl	0 <strdup>
    363c:	cmp	r0, #0
    3640:	beq	36f8 <cd_match_filename_finalise+0x244>
    3644:	mov	r4, #0
    3648:	mov	r1, r0
    364c:	mov	r0, #22
    3650:	mov	r2, #0
    3654:	mov	r3, #0
    3658:	str	r4, [sp]
    365c:	str	r4, [sp, #4]
    3660:	bl	0 <coda_expression_new>
    3664:	cmp	r0, #0
    3668:	beq	3718 <cd_match_filename_finalise+0x264>
    366c:	mov	r3, r0
    3670:	mov	r0, #25
    3674:	mov	r1, #0
    3678:	mov	r2, r7
    367c:	str	r4, [sp]
    3680:	str	r4, [sp, #4]
    3684:	bl	0 <coda_expression_new>
    3688:	cmp	r0, #0
    368c:	str	r0, [r6, #4]
    3690:	mvneq	r4, #0
    3694:	mov	r5, r4
    3698:	b	36b4 <cd_match_filename_finalise+0x200>
    369c:	movw	r0, #65136	; 0xfe70
    36a0:	movw	r1, #0
    36a4:	movt	r0, #65535	; 0xffff
    36a8:	movt	r1, #0
    36ac:	bl	0 <coda_set_error>
    36b0:	mvn	r5, #0
    36b4:	mov	r0, r5
    36b8:	sub	sp, fp, #28
    36bc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    36c0:	movw	r1, #0
    36c4:	movw	r2, #0
    36c8:	mvn	r0, #0
    36cc:	movw	r3, #2588	; 0xa1c
    36d0:	mvn	r5, #0
    36d4:	movt	r1, #0
    36d8:	movt	r2, #0
    36dc:	bl	0 <coda_set_error>
    36e0:	b	36b4 <cd_match_filename_finalise+0x200>
    36e4:	movw	r0, #65136	; 0xfe70
    36e8:	movw	r1, #0
    36ec:	movt	r0, #65535	; 0xffff
    36f0:	movt	r1, #0
    36f4:	b	36ac <cd_match_filename_finalise+0x1f8>
    36f8:	movw	r1, #0
    36fc:	movw	r2, #0
    3700:	mvn	r0, #0
    3704:	movw	r3, #2607	; 0xa2f
    3708:	mvn	r5, #0
    370c:	movt	r1, #0
    3710:	movt	r2, #0
    3714:	bl	0 <coda_set_error>
    3718:	mov	r0, r7
    371c:	bl	0 <coda_expression_delete>
    3720:	b	36b4 <cd_match_filename_finalise+0x200>

00003724 <cd_ascii_line_init>:
    3724:	push	{r4, r5, r6, sl, fp, lr}
    3728:	add	fp, sp, #16
    372c:	mov	r6, r1
    3730:	mov	r5, r0
    3734:	bl	5424 <handle_format_attribute_for_type>
    3738:	mvn	r4, #0
    373c:	cmp	r0, #0
    3740:	beq	374c <cd_ascii_line_init+0x28>
    3744:	mov	r0, r4
    3748:	pop	{r4, r5, r6, sl, fp, pc}
    374c:	ldr	r0, [r5]
    3750:	movw	r1, #0
    3754:	movt	r1, #0
    3758:	str	r1, [r0, #40]	; 0x28
    375c:	ldr	r0, [r0, #44]	; 0x2c
    3760:	bl	0 <coda_type_text_new>
    3764:	ldr	r1, [r5]
    3768:	cmp	r0, #0
    376c:	str	r0, [r1, #8]
    3770:	beq	3744 <cd_ascii_line_init+0x20>
    3774:	mov	r1, #3
    3778:	bl	0 <coda_type_text_set_special_text_type>
    377c:	cmp	r0, #0
    3780:	bne	3744 <cd_ascii_line_init+0x20>
    3784:	mov	r0, r5
    3788:	mov	r1, r6
    378c:	bl	5568 <handle_name_attribute_for_type>
    3790:	cmp	r0, #0
    3794:	bne	3744 <cd_ascii_line_init+0x20>
    3798:	ldr	r0, [r5]
    379c:	movw	r1, #0
    37a0:	mov	r4, #0
    37a4:	movt	r1, #0
    37a8:	str	r1, [r0, #268]	; 0x10c
    37ac:	movw	r1, #0
    37b0:	movt	r1, #0
    37b4:	str	r1, [r0, #96]	; 0x60
    37b8:	mov	r0, r4
    37bc:	pop	{r4, r5, r6, sl, fp, pc}

000037c0 <cd_ascii_line_separator_init>:
    37c0:	push	{r4, r5, r6, sl, fp, lr}
    37c4:	add	fp, sp, #16
    37c8:	mov	r6, r1
    37cc:	mov	r5, r0
    37d0:	bl	5424 <handle_format_attribute_for_type>
    37d4:	mvn	r4, #0
    37d8:	cmp	r0, #0
    37dc:	beq	37e8 <cd_ascii_line_separator_init+0x28>
    37e0:	mov	r0, r4
    37e4:	pop	{r4, r5, r6, sl, fp, pc}
    37e8:	ldr	r0, [r5]
    37ec:	movw	r1, #0
    37f0:	movt	r1, #0
    37f4:	str	r1, [r0, #40]	; 0x28
    37f8:	ldr	r0, [r0, #44]	; 0x2c
    37fc:	bl	0 <coda_type_text_new>
    3800:	ldr	r1, [r5]
    3804:	cmp	r0, #0
    3808:	str	r0, [r1, #8]
    380c:	beq	37e0 <cd_ascii_line_separator_init+0x20>
    3810:	mov	r1, #1
    3814:	bl	0 <coda_type_text_set_special_text_type>
    3818:	cmp	r0, #0
    381c:	bne	37e0 <cd_ascii_line_separator_init+0x20>
    3820:	mov	r0, r5
    3824:	mov	r1, r6
    3828:	bl	5568 <handle_name_attribute_for_type>
    382c:	cmp	r0, #0
    3830:	bne	37e0 <cd_ascii_line_separator_init+0x20>
    3834:	ldr	r0, [r5]
    3838:	movw	r1, #0
    383c:	mov	r4, #0
    3840:	movt	r1, #0
    3844:	str	r1, [r0, #268]	; 0x10c
    3848:	movw	r1, #0
    384c:	movt	r1, #0
    3850:	str	r1, [r0, #96]	; 0x60
    3854:	mov	r0, r4
    3858:	pop	{r4, r5, r6, sl, fp, pc}

0000385c <cd_ascii_white_space_init>:
    385c:	push	{r4, r5, r6, sl, fp, lr}
    3860:	add	fp, sp, #16
    3864:	mov	r6, r1
    3868:	mov	r5, r0
    386c:	bl	5424 <handle_format_attribute_for_type>
    3870:	mvn	r4, #0
    3874:	cmp	r0, #0
    3878:	beq	3884 <cd_ascii_white_space_init+0x28>
    387c:	mov	r0, r4
    3880:	pop	{r4, r5, r6, sl, fp, pc}
    3884:	ldr	r0, [r5]
    3888:	movw	r1, #0
    388c:	movt	r1, #0
    3890:	str	r1, [r0, #40]	; 0x28
    3894:	ldr	r0, [r0, #44]	; 0x2c
    3898:	bl	0 <coda_type_text_new>
    389c:	ldr	r1, [r5]
    38a0:	cmp	r0, #0
    38a4:	str	r0, [r1, #8]
    38a8:	beq	387c <cd_ascii_white_space_init+0x20>
    38ac:	mov	r1, #4
    38b0:	bl	0 <coda_type_text_set_special_text_type>
    38b4:	cmp	r0, #0
    38b8:	bne	387c <cd_ascii_white_space_init+0x20>
    38bc:	mov	r0, r5
    38c0:	mov	r1, r6
    38c4:	bl	5568 <handle_name_attribute_for_type>
    38c8:	cmp	r0, #0
    38cc:	bne	387c <cd_ascii_white_space_init+0x20>
    38d0:	ldr	r0, [r5]
    38d4:	movw	r1, #0
    38d8:	mov	r4, #0
    38dc:	movt	r1, #0
    38e0:	str	r1, [r0, #268]	; 0x10c
    38e4:	movw	r1, #0
    38e8:	movt	r1, #0
    38ec:	str	r1, [r0, #96]	; 0x60
    38f0:	mov	r0, r4
    38f4:	pop	{r4, r5, r6, sl, fp, pc}

000038f8 <cd_array_init>:
    38f8:	push	{r4, r5, r6, sl, fp, lr}
    38fc:	add	fp, sp, #16
    3900:	mov	r6, r1
    3904:	mov	r4, r0
    3908:	bl	5424 <handle_format_attribute_for_type>
    390c:	mvn	r5, #0
    3910:	cmp	r0, #0
    3914:	beq	3920 <cd_array_init+0x28>
    3918:	mov	r0, r5
    391c:	pop	{r4, r5, r6, sl, fp, pc}
    3920:	ldr	r0, [r4]
    3924:	movw	r1, #0
    3928:	movt	r1, #0
    392c:	str	r1, [r0, #40]	; 0x28
    3930:	ldr	r0, [r0, #44]	; 0x2c
    3934:	bl	0 <coda_type_array_new>
    3938:	ldr	r1, [r4]
    393c:	cmp	r0, #0
    3940:	str	r0, [r1, #8]
    3944:	beq	3918 <cd_array_init+0x20>
    3948:	mov	r0, r4
    394c:	mov	r1, r6
    3950:	bl	5568 <handle_name_attribute_for_type>
    3954:	cmp	r0, #0
    3958:	bne	3918 <cd_array_init+0x20>
    395c:	movw	r2, #0
    3960:	ldr	r0, [r4]
    3964:	movw	r1, #0
    3968:	movw	r3, #0
    396c:	movw	r6, #0
    3970:	movw	r5, #0
    3974:	movw	ip, #0
    3978:	movt	r2, #0
    397c:	movt	r1, #0
    3980:	movt	r3, #0
    3984:	movt	r6, #0
    3988:	movt	r5, #0
    398c:	movt	ip, #0
    3990:	vmov.32	d19[0], r2
    3994:	movw	r2, #0
    3998:	vdup.32	q10, r1
    399c:	movt	r2, #0
    39a0:	str	r1, [r0, #260]	; 0x104
    39a4:	vmov.32	d18[0], r2
    39a8:	movw	r2, #0
    39ac:	vmov.32	d19[1], r5
    39b0:	vmov.32	d18[1], r6
    39b4:	mov	r5, #0
    39b8:	movt	r2, #0
    39bc:	vmov.32	d17[0], r2
    39c0:	movw	r2, #0
    39c4:	movt	r2, #0
    39c8:	vmov.32	d16[0], r2
    39cc:	movw	r2, #0
    39d0:	vmov.32	d17[1], r3
    39d4:	movw	r3, #0
    39d8:	vmov.32	d16[1], ip
    39dc:	movt	r2, #0
    39e0:	movt	r3, #0
    39e4:	str	r2, [r0, #88]	; 0x58
    39e8:	movw	r2, #0
    39ec:	str	r1, [r0, #292]	; 0x124
    39f0:	movt	r2, #0
    39f4:	str	r2, [r0, #120]	; 0x78
    39f8:	movw	r2, #0
    39fc:	str	r1, [r0, #304]	; 0x130
    3a00:	movt	r2, #0
    3a04:	str	r2, [r0, #132]	; 0x84
    3a08:	movw	r2, #0
    3a0c:	str	r1, [r0, #332]	; 0x14c
    3a10:	movt	r2, #0
    3a14:	str	r2, [r0, #160]	; 0xa0
    3a18:	movw	r2, #0
    3a1c:	str	r1, [r0, #360]	; 0x168
    3a20:	str	r1, [r0, #364]	; 0x16c
    3a24:	movt	r2, #0
    3a28:	str	r2, [r0, #188]	; 0xbc
    3a2c:	str	r3, [r0, #192]	; 0xc0
    3a30:	str	r1, [r0, #392]	; 0x188
    3a34:	movw	r1, #0
    3a38:	movt	r1, #0
    3a3c:	str	r1, [r0, #220]	; 0xdc
    3a40:	add	r1, r0, #224	; 0xe0
    3a44:	vst1.32	{d20-d21}, [r1]
    3a48:	add	r1, r0, #52	; 0x34
    3a4c:	vst1.32	{d18-d19}, [r1]
    3a50:	add	r1, r0, #372	; 0x174
    3a54:	add	r0, r0, #200	; 0xc8
    3a58:	vst1.32	{d20-d21}, [r1]
    3a5c:	vst1.32	{d16-d17}, [r0]
    3a60:	movw	r1, #0
    3a64:	ldr	r0, [r4]
    3a68:	movt	r1, #0
    3a6c:	str	r1, [r0, #276]	; 0x114
    3a70:	movw	r1, #0
    3a74:	movt	r1, #0
    3a78:	str	r1, [r0, #104]	; 0x68
    3a7c:	movw	r1, #0
    3a80:	ldr	r0, [r4]
    3a84:	movt	r1, #0
    3a88:	str	r1, [r0, #268]	; 0x10c
    3a8c:	movw	r1, #0
    3a90:	movt	r1, #0
    3a94:	str	r1, [r0, #96]	; 0x60
    3a98:	movw	r1, #0
    3a9c:	ldr	r0, [r4]
    3aa0:	movt	r1, #0
    3aa4:	str	r1, [r0, #240]	; 0xf0
    3aa8:	movw	r1, #0
    3aac:	movt	r1, #0
    3ab0:	str	r1, [r0, #68]	; 0x44
    3ab4:	movw	r1, #0
    3ab8:	ldr	r0, [r4]
    3abc:	movt	r1, #0
    3ac0:	str	r1, [r0, #36]	; 0x24
    3ac4:	mov	r0, r5
    3ac8:	pop	{r4, r5, r6, sl, fp, pc}

00003acc <cd_complex_init>:
    3acc:	push	{r4, r5, r6, sl, fp, lr}
    3ad0:	add	fp, sp, #16
    3ad4:	mov	r6, r1
    3ad8:	mov	r4, r0
    3adc:	bl	5424 <handle_format_attribute_for_type>
    3ae0:	mvn	r5, #0
    3ae4:	cmp	r0, #0
    3ae8:	beq	3af4 <cd_complex_init+0x28>
    3aec:	mov	r0, r5
    3af0:	pop	{r4, r5, r6, sl, fp, pc}
    3af4:	ldr	r0, [r4]
    3af8:	movw	r1, #0
    3afc:	movt	r1, #0
    3b00:	str	r1, [r0, #40]	; 0x28
    3b04:	ldr	r0, [r0, #44]	; 0x2c
    3b08:	bl	0 <coda_type_complex_new>
    3b0c:	ldr	r1, [r4]
    3b10:	cmp	r0, #0
    3b14:	str	r0, [r1, #8]
    3b18:	beq	3aec <cd_complex_init+0x20>
    3b1c:	mov	r0, r4
    3b20:	mov	r1, r6
    3b24:	bl	5568 <handle_name_attribute_for_type>
    3b28:	cmp	r0, #0
    3b2c:	bne	3aec <cd_complex_init+0x20>
    3b30:	ldr	r0, [r4]
    3b34:	movw	r1, #0
    3b38:	movw	r2, #0
    3b3c:	mov	r5, #0
    3b40:	movt	r1, #0
    3b44:	movt	r2, #0
    3b48:	str	r1, [r0, #268]	; 0x10c
    3b4c:	movw	r1, #0
    3b50:	movt	r1, #0
    3b54:	str	r1, [r0, #96]	; 0x60
    3b58:	movw	r1, #0
    3b5c:	ldr	r0, [r4]
    3b60:	movt	r1, #0
    3b64:	str	r1, [r0, #292]	; 0x124
    3b68:	str	r2, [r0, #120]	; 0x78
    3b6c:	ldr	r0, [r4]
    3b70:	str	r1, [r0, #304]	; 0x130
    3b74:	movw	r1, #0
    3b78:	movt	r1, #0
    3b7c:	str	r1, [r0, #132]	; 0x84
    3b80:	movw	r1, #0
    3b84:	ldr	r0, [r4]
    3b88:	movt	r1, #0
    3b8c:	str	r1, [r0, #36]	; 0x24
    3b90:	mov	r0, r5
    3b94:	pop	{r4, r5, r6, sl, fp, pc}

00003b98 <cd_float_init>:
    3b98:	push	{r4, r5, r6, sl, fp, lr}
    3b9c:	add	fp, sp, #16
    3ba0:	mov	r6, r1
    3ba4:	mov	r4, r0
    3ba8:	bl	5424 <handle_format_attribute_for_type>
    3bac:	mvn	r5, #0
    3bb0:	cmp	r0, #0
    3bb4:	beq	3bc0 <cd_float_init+0x28>
    3bb8:	mov	r0, r5
    3bbc:	pop	{r4, r5, r6, sl, fp, pc}
    3bc0:	ldr	r0, [r4]
    3bc4:	movw	r1, #0
    3bc8:	movt	r1, #0
    3bcc:	str	r1, [r0, #40]	; 0x28
    3bd0:	mov	r1, #3
    3bd4:	ldr	r0, [r0, #44]	; 0x2c
    3bd8:	bl	0 <coda_type_number_new>
    3bdc:	ldr	r1, [r4]
    3be0:	cmp	r0, #0
    3be4:	str	r0, [r1, #8]
    3be8:	beq	3bb8 <cd_float_init+0x20>
    3bec:	mov	r0, r4
    3bf0:	mov	r1, r6
    3bf4:	bl	5568 <handle_name_attribute_for_type>
    3bf8:	cmp	r0, #0
    3bfc:	bne	3bb8 <cd_float_init+0x20>
    3c00:	ldr	r1, [r4]
    3c04:	movw	r0, #0
    3c08:	movw	r2, #0
    3c0c:	movw	r3, #0
    3c10:	mov	r5, #0
    3c14:	movt	r0, #0
    3c18:	movt	r2, #0
    3c1c:	movt	r3, #0
    3c20:	str	r0, [r1, #388]	; 0x184
    3c24:	movw	r0, #0
    3c28:	movt	r0, #0
    3c2c:	str	r0, [r1, #216]	; 0xd8
    3c30:	ldr	r1, [r4]
    3c34:	str	r2, [r1, #336]	; 0x150
    3c38:	movw	r2, #0
    3c3c:	movt	r2, #0
    3c40:	str	r2, [r1, #164]	; 0xa4
    3c44:	movw	r2, #0
    3c48:	ldr	r1, [r4]
    3c4c:	movt	r2, #0
    3c50:	str	r2, [r1, #264]	; 0x108
    3c54:	movw	r2, #0
    3c58:	movt	r2, #0
    3c5c:	str	r2, [r1, #92]	; 0x5c
    3c60:	movw	r2, #0
    3c64:	ldr	r1, [r4]
    3c68:	movt	r2, #0
    3c6c:	str	r2, [r1, #252]	; 0xfc
    3c70:	movw	r2, #0
    3c74:	movt	r2, #0
    3c78:	str	r2, [r1, #80]	; 0x50
    3c7c:	ldr	r1, [r4]
    3c80:	str	r3, [r1, #256]	; 0x100
    3c84:	str	r2, [r1, #84]	; 0x54
    3c88:	movw	r2, #0
    3c8c:	ldr	r1, [r4]
    3c90:	movt	r2, #0
    3c94:	str	r2, [r1, #308]	; 0x134
    3c98:	movw	r2, #0
    3c9c:	movt	r2, #0
    3ca0:	str	r2, [r1, #136]	; 0x88
    3ca4:	movw	r2, #0
    3ca8:	ldr	r1, [r4]
    3cac:	movt	r2, #0
    3cb0:	str	r2, [r1, #312]	; 0x138
    3cb4:	movw	r2, #0
    3cb8:	movt	r2, #0
    3cbc:	str	r2, [r1, #140]	; 0x8c
    3cc0:	movw	r2, #0
    3cc4:	ldr	r1, [r4]
    3cc8:	movt	r2, #0
    3ccc:	str	r2, [r1, #268]	; 0x10c
    3cd0:	str	r0, [r1, #96]	; 0x60
    3cd4:	movw	r1, #0
    3cd8:	ldr	r0, [r4]
    3cdc:	movt	r1, #0
    3ce0:	str	r1, [r0, #240]	; 0xf0
    3ce4:	movw	r1, #0
    3ce8:	movt	r1, #0
    3cec:	str	r1, [r0, #68]	; 0x44
    3cf0:	movw	r1, #0
    3cf4:	ldr	r0, [r4]
    3cf8:	movt	r1, #0
    3cfc:	str	r1, [r0, #36]	; 0x24
    3d00:	mov	r0, r5
    3d04:	pop	{r4, r5, r6, sl, fp, pc}

00003d08 <cd_integer_init>:
    3d08:	push	{r4, r5, r6, sl, fp, lr}
    3d0c:	add	fp, sp, #16
    3d10:	mov	r6, r1
    3d14:	mov	r4, r0
    3d18:	bl	5424 <handle_format_attribute_for_type>
    3d1c:	mvn	r5, #0
    3d20:	cmp	r0, #0
    3d24:	beq	3d30 <cd_integer_init+0x28>
    3d28:	mov	r0, r5
    3d2c:	pop	{r4, r5, r6, sl, fp, pc}
    3d30:	ldr	r0, [r4]
    3d34:	movw	r1, #0
    3d38:	movt	r1, #0
    3d3c:	str	r1, [r0, #40]	; 0x28
    3d40:	mov	r1, #2
    3d44:	ldr	r0, [r0, #44]	; 0x2c
    3d48:	bl	0 <coda_type_number_new>
    3d4c:	ldr	r1, [r4]
    3d50:	cmp	r0, #0
    3d54:	str	r0, [r1, #8]
    3d58:	beq	3d28 <cd_integer_init+0x20>
    3d5c:	mov	r0, r4
    3d60:	mov	r1, r6
    3d64:	bl	5568 <handle_name_attribute_for_type>
    3d68:	cmp	r0, #0
    3d6c:	bne	3d28 <cd_integer_init+0x20>
    3d70:	ldr	r0, [r4]
    3d74:	movw	r1, #0
    3d78:	movw	r2, #0
    3d7c:	mov	r5, #0
    3d80:	movt	r1, #0
    3d84:	movt	r2, #0
    3d88:	str	r1, [r0, #268]	; 0x10c
    3d8c:	movw	r1, #0
    3d90:	movt	r1, #0
    3d94:	str	r1, [r0, #96]	; 0x60
    3d98:	ldr	r0, [r4]
    3d9c:	str	r2, [r0, #388]	; 0x184
    3da0:	str	r1, [r0, #216]	; 0xd8
    3da4:	movw	r1, #0
    3da8:	movw	r2, #0
    3dac:	ldr	r0, [r4]
    3db0:	movt	r1, #0
    3db4:	movt	r2, #0
    3db8:	str	r1, [r0, #256]	; 0x100
    3dbc:	movw	r1, #0
    3dc0:	movt	r1, #0
    3dc4:	str	r1, [r0, #84]	; 0x54
    3dc8:	ldr	r0, [r4]
    3dcc:	str	r2, [r0, #252]	; 0xfc
    3dd0:	str	r1, [r0, #80]	; 0x50
    3dd4:	movw	r1, #0
    3dd8:	ldr	r0, [r4]
    3ddc:	movt	r1, #0
    3de0:	str	r1, [r0, #308]	; 0x134
    3de4:	movw	r1, #0
    3de8:	movt	r1, #0
    3dec:	str	r1, [r0, #136]	; 0x88
    3df0:	movw	r1, #0
    3df4:	ldr	r0, [r4]
    3df8:	movt	r1, #0
    3dfc:	str	r1, [r0, #336]	; 0x150
    3e00:	movw	r1, #0
    3e04:	movt	r1, #0
    3e08:	str	r1, [r0, #164]	; 0xa4
    3e0c:	movw	r1, #0
    3e10:	ldr	r0, [r4]
    3e14:	movt	r1, #0
    3e18:	str	r1, [r0, #264]	; 0x108
    3e1c:	movw	r1, #0
    3e20:	movt	r1, #0
    3e24:	str	r1, [r0, #92]	; 0x5c
    3e28:	movw	r1, #0
    3e2c:	ldr	r0, [r4]
    3e30:	movt	r1, #0
    3e34:	str	r1, [r0, #312]	; 0x138
    3e38:	movw	r1, #0
    3e3c:	movt	r1, #0
    3e40:	str	r1, [r0, #140]	; 0x8c
    3e44:	movw	r1, #0
    3e48:	ldr	r0, [r4]
    3e4c:	movt	r1, #0
    3e50:	str	r1, [r0, #240]	; 0xf0
    3e54:	movw	r1, #0
    3e58:	movt	r1, #0
    3e5c:	str	r1, [r0, #68]	; 0x44
    3e60:	movw	r1, #0
    3e64:	ldr	r0, [r4]
    3e68:	movt	r1, #0
    3e6c:	str	r1, [r0, #36]	; 0x24
    3e70:	mov	r0, r5
    3e74:	pop	{r4, r5, r6, sl, fp, pc}

00003e78 <cd_named_type_init>:
    3e78:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
    3e7c:	add	fp, sp, #24
    3e80:	sub	sp, sp, #8
    3e84:	mov	r8, r0
    3e88:	ldr	r0, [r1]
    3e8c:	ldr	r7, [r8]
    3e90:	cmp	r0, #0
    3e94:	ldr	r6, [r7]
    3e98:	beq	3f3c <cd_named_type_init+0xc4>
    3e9c:	movw	r5, #0
    3ea0:	add	r4, r1, #4
    3ea4:	movt	r5, #0
    3ea8:	mov	r1, r5
    3eac:	bl	0 <strcmp>
    3eb0:	cmp	r0, #0
    3eb4:	beq	3ed0 <cd_named_type_init+0x58>
    3eb8:	ldr	r0, [r4, #4]
    3ebc:	add	r1, r4, #8
    3ec0:	mov	r4, r1
    3ec4:	cmp	r0, #0
    3ec8:	bne	3ea8 <cd_named_type_init+0x30>
    3ecc:	b	3f3c <cd_named_type_init+0xc4>
    3ed0:	ldr	r5, [r4]
    3ed4:	cmp	r5, #0
    3ed8:	beq	3f3c <cd_named_type_init+0xc4>
    3edc:	movw	r0, #0
    3ee0:	movt	r0, #0
    3ee4:	str	r0, [r7, #40]	; 0x28
    3ee8:	ldr	r0, [r8, #24]
    3eec:	cmp	r0, #0
    3ef0:	beq	3fc0 <cd_named_type_init+0x148>
    3ef4:	mov	r1, r5
    3ef8:	bl	0 <coda_product_class_has_named_type>
    3efc:	cmp	r0, #0
    3f00:	beq	3f90 <cd_named_type_init+0x118>
    3f04:	ldr	r0, [r8, #24]
    3f08:	mov	r1, r5
    3f0c:	bl	0 <coda_product_class_get_named_type>
    3f10:	ldrd	r2, [r0]
    3f14:	add	r1, r3, #1
    3f18:	mov	r3, #1
    3f1c:	str	r1, [r0, #4]
    3f20:	ldr	r1, [r8]
    3f24:	str	r0, [r1, #8]
    3f28:	str	r2, [r1, #44]	; 0x2c
    3f2c:	str	r3, [r1, #48]	; 0x30
    3f30:	mov	r0, #0
    3f34:	sub	sp, fp, #24
    3f38:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
    3f3c:	cmn	r6, #1
    3f40:	beq	3f60 <cd_named_type_init+0xe8>
    3f44:	movw	r0, #0
    3f48:	movt	r0, #0
    3f4c:	ldr	r3, [r0, r6, lsl #2]
    3f50:	ldrb	r0, [r3], #1
    3f54:	cmp	r0, #32
    3f58:	bne	3f50 <cd_named_type_init+0xd8>
    3f5c:	b	3f68 <cd_named_type_init+0xf0>
    3f60:	movw	r3, #0
    3f64:	movt	r3, #0
    3f68:	movw	r0, #65136	; 0xfe70
    3f6c:	movw	r1, #0
    3f70:	movw	r2, #0
    3f74:	movt	r0, #65535	; 0xffff
    3f78:	movt	r1, #0
    3f7c:	movt	r2, #0
    3f80:	bl	0 <coda_set_error>
    3f84:	mvn	r0, #0
    3f88:	sub	sp, fp, #24
    3f8c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
    3f90:	ldr	r1, [r8, #28]
    3f94:	ldr	r0, [r8, #16]
    3f98:	ldr	r3, [r8, #24]
    3f9c:	mov	r2, r5
    3fa0:	str	r1, [sp]
    3fa4:	mov	r1, #1
    3fa8:	bl	ec <parse_entry>
    3fac:	cmp	r0, #0
    3fb0:	beq	3f04 <cd_named_type_init+0x8c>
    3fb4:	mov	r0, #0
    3fb8:	str	r0, [r8, #44]	; 0x2c
    3fbc:	b	3f84 <cd_named_type_init+0x10c>
    3fc0:	movw	r0, #0
    3fc4:	movw	r1, #0
    3fc8:	movw	r3, #0
    3fcc:	movw	r2, #1889	; 0x761
    3fd0:	movt	r0, #0
    3fd4:	movt	r1, #0
    3fd8:	movt	r3, #0
    3fdc:	bl	0 <__assert_fail>

00003fe0 <cd_raw_init>:
    3fe0:	push	{r4, r5, r6, sl, fp, lr}
    3fe4:	add	fp, sp, #16
    3fe8:	mov	r6, r1
    3fec:	mov	r4, r0
    3ff0:	bl	5424 <handle_format_attribute_for_type>
    3ff4:	mvn	r5, #0
    3ff8:	cmp	r0, #0
    3ffc:	beq	4008 <cd_raw_init+0x28>
    4000:	mov	r0, r5
    4004:	pop	{r4, r5, r6, sl, fp, pc}
    4008:	ldr	r0, [r4]
    400c:	movw	r1, #0
    4010:	movt	r1, #0
    4014:	str	r1, [r0, #40]	; 0x28
    4018:	ldr	r0, [r0, #44]	; 0x2c
    401c:	bl	0 <coda_type_raw_new>
    4020:	ldr	r1, [r4]
    4024:	cmp	r0, #0
    4028:	str	r0, [r1, #8]
    402c:	beq	4000 <cd_raw_init+0x20>
    4030:	mov	r0, r4
    4034:	mov	r1, r6
    4038:	bl	5568 <handle_name_attribute_for_type>
    403c:	cmp	r0, #0
    4040:	bne	4000 <cd_raw_init+0x20>
    4044:	ldr	r0, [r4]
    4048:	movw	r1, #0
    404c:	movw	r2, #0
    4050:	mov	r5, #0
    4054:	movt	r1, #0
    4058:	movt	r2, #0
    405c:	str	r1, [r0, #268]	; 0x10c
    4060:	movw	r1, #0
    4064:	movt	r1, #0
    4068:	str	r1, [r0, #96]	; 0x60
    406c:	ldr	r0, [r4]
    4070:	str	r2, [r0, #252]	; 0xfc
    4074:	movw	r2, #0
    4078:	movt	r2, #0
    407c:	str	r2, [r0, #80]	; 0x50
    4080:	movw	r2, #0
    4084:	ldr	r0, [r4]
    4088:	movt	r2, #0
    408c:	str	r2, [r0, #288]	; 0x120
    4090:	str	r1, [r0, #116]	; 0x74
    4094:	movw	r1, #0
    4098:	ldr	r0, [r4]
    409c:	movt	r1, #0
    40a0:	str	r1, [r0, #36]	; 0x24
    40a4:	mov	r0, r5
    40a8:	pop	{r4, r5, r6, sl, fp, pc}

000040ac <cd_record_init>:
    40ac:	push	{r4, r5, r6, sl, fp, lr}
    40b0:	add	fp, sp, #16
    40b4:	mov	r4, r1
    40b8:	mov	r5, r0
    40bc:	bl	5424 <handle_format_attribute_for_type>
    40c0:	mvn	r6, #0
    40c4:	cmp	r0, #0
    40c8:	beq	40d4 <cd_record_init+0x28>
    40cc:	mov	r0, r6
    40d0:	pop	{r4, r5, r6, sl, fp, pc}
    40d4:	ldr	r0, [r5]
    40d8:	movw	r1, #0
    40dc:	movt	r1, #0
    40e0:	str	r1, [r0, #40]	; 0x28
    40e4:	ldr	r0, [r0, #44]	; 0x2c
    40e8:	bl	0 <coda_type_record_new>
    40ec:	ldr	r1, [r5]
    40f0:	cmp	r0, #0
    40f4:	str	r0, [r1, #8]
    40f8:	beq	40cc <cd_record_init+0x20>
    40fc:	mov	r0, r5
    4100:	mov	r1, r4
    4104:	bl	5568 <handle_name_attribute_for_type>
    4108:	cmp	r0, #0
    410c:	bne	40cc <cd_record_init+0x20>
    4110:	ldr	r0, [r5]
    4114:	movw	r1, #0
    4118:	movt	r1, #0
    411c:	str	r1, [r0, #268]	; 0x10c
    4120:	movw	r1, #0
    4124:	movt	r1, #0
    4128:	str	r1, [r0, #96]	; 0x60
    412c:	movw	r1, #0
    4130:	ldr	r0, [r5]
    4134:	movt	r1, #0
    4138:	str	r1, [r0, #252]	; 0xfc
    413c:	movw	r1, #0
    4140:	movt	r1, #0
    4144:	str	r1, [r0, #80]	; 0x50
    4148:	movw	r1, #0
    414c:	ldr	r0, [r5]
    4150:	movt	r1, #0
    4154:	str	r1, [r0, #280]	; 0x118
    4158:	movw	r1, #0
    415c:	movt	r1, #0
    4160:	str	r1, [r0, #108]	; 0x6c
    4164:	movw	r1, #0
    4168:	ldr	r0, [r5]
    416c:	movt	r1, #0
    4170:	str	r1, [r0, #240]	; 0xf0
    4174:	movw	r1, #0
    4178:	movt	r1, #0
    417c:	str	r1, [r0, #68]	; 0x44
    4180:	movw	r1, #0
    4184:	ldr	r0, [r5]
    4188:	movt	r1, #0
    418c:	str	r1, [r0, #36]	; 0x24
    4190:	mov	r0, r5
    4194:	mov	r1, r4
    4198:	bl	73f4 <handle_xml_name>
    419c:	cmp	r0, #0
    41a0:	mov	r6, r0
    41a4:	mvnne	r6, #0
    41a8:	mov	r0, r6
    41ac:	pop	{r4, r5, r6, sl, fp, pc}

000041b0 <cd_text_init>:
    41b0:	push	{r4, r5, r6, sl, fp, lr}
    41b4:	add	fp, sp, #16
    41b8:	mov	r4, r1
    41bc:	mov	r5, r0
    41c0:	bl	5424 <handle_format_attribute_for_type>
    41c4:	mvn	r6, #0
    41c8:	cmp	r0, #0
    41cc:	beq	41d8 <cd_text_init+0x28>
    41d0:	mov	r0, r6
    41d4:	pop	{r4, r5, r6, sl, fp, pc}
    41d8:	ldr	r0, [r5]
    41dc:	movw	r1, #0
    41e0:	movt	r1, #0
    41e4:	str	r1, [r0, #40]	; 0x28
    41e8:	ldr	r0, [r0, #44]	; 0x2c
    41ec:	bl	0 <coda_type_text_new>
    41f0:	ldr	r1, [r5]
    41f4:	cmp	r0, #0
    41f8:	str	r0, [r1, #8]
    41fc:	beq	41d0 <cd_text_init+0x20>
    4200:	mov	r0, r5
    4204:	mov	r1, r4
    4208:	bl	5568 <handle_name_attribute_for_type>
    420c:	cmp	r0, #0
    4210:	bne	41d0 <cd_text_init+0x20>
    4214:	ldr	r0, [r5]
    4218:	movw	r1, #0
    421c:	movw	r2, #0
    4220:	movt	r1, #0
    4224:	movt	r2, #0
    4228:	str	r1, [r0, #268]	; 0x10c
    422c:	movw	r1, #0
    4230:	movt	r1, #0
    4234:	str	r1, [r0, #96]	; 0x60
    4238:	ldr	r0, [r5]
    423c:	str	r2, [r0, #256]	; 0x100
    4240:	movw	r2, #0
    4244:	movt	r2, #0
    4248:	str	r2, [r0, #84]	; 0x54
    424c:	movw	r2, #0
    4250:	ldr	r0, [r5]
    4254:	movt	r2, #0
    4258:	str	r2, [r0, #288]	; 0x120
    425c:	str	r1, [r0, #116]	; 0x74
    4260:	movw	r1, #0
    4264:	ldr	r0, [r5]
    4268:	movt	r1, #0
    426c:	str	r1, [r0, #336]	; 0x150
    4270:	movw	r1, #0
    4274:	movt	r1, #0
    4278:	str	r1, [r0, #164]	; 0xa4
    427c:	movw	r1, #0
    4280:	ldr	r0, [r5]
    4284:	movt	r1, #0
    4288:	str	r1, [r0, #240]	; 0xf0
    428c:	movw	r1, #0
    4290:	movt	r1, #0
    4294:	str	r1, [r0, #68]	; 0x44
    4298:	movw	r1, #0
    429c:	ldr	r0, [r5]
    42a0:	movt	r1, #0
    42a4:	str	r1, [r0, #36]	; 0x24
    42a8:	mov	r0, r5
    42ac:	mov	r1, r4
    42b0:	bl	73f4 <handle_xml_name>
    42b4:	cmp	r0, #0
    42b8:	mov	r6, r0
    42bc:	mvnne	r6, #0
    42c0:	mov	r0, r6
    42c4:	pop	{r4, r5, r6, sl, fp, pc}

000042c8 <cd_time_init>:
    42c8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    42cc:	add	fp, sp, #28
    42d0:	sub	sp, sp, #12
    42d4:	mov	sl, r1
    42d8:	mov	r8, r0
    42dc:	bl	5424 <handle_format_attribute_for_type>
    42e0:	mvn	r9, #0
    42e4:	cmp	r0, #0
    42e8:	bne	44d0 <cd_time_init+0x208>
    42ec:	ldr	r5, [r8]
    42f0:	ldr	r0, [sl]
    42f4:	ldr	r4, [r5]
    42f8:	cmp	r0, #0
    42fc:	beq	4488 <cd_time_init+0x1c0>
    4300:	movw	r7, #0
    4304:	add	r6, sl, #4
    4308:	movt	r7, #0
    430c:	mov	r1, r7
    4310:	bl	0 <strcmp>
    4314:	cmp	r0, #0
    4318:	beq	4334 <cd_time_init+0x6c>
    431c:	ldr	r0, [r6, #4]
    4320:	add	r1, r6, #8
    4324:	mov	r6, r1
    4328:	cmp	r0, #0
    432c:	bne	430c <cd_time_init+0x44>
    4330:	b	4488 <cd_time_init+0x1c0>
    4334:	ldr	r7, [r6]
    4338:	cmp	r7, #0
    433c:	beq	4488 <cd_time_init+0x1c0>
    4340:	ldr	r0, [r5, #44]	; 0x2c
    4344:	mov	r4, #0
    4348:	cmp	r0, #1
    434c:	beq	44dc <cd_time_init+0x214>
    4350:	cmp	r0, #0
    4354:	bne	4ccc <cd_time_init+0xa04>
    4358:	movw	r1, #0
    435c:	mov	r0, r7
    4360:	movt	r1, #0
    4364:	bl	0 <strcmp>
    4368:	cmp	r0, #0
    436c:	beq	46d0 <cd_time_init+0x408>
    4370:	movw	r1, #0
    4374:	mov	r0, r7
    4378:	movt	r1, #0
    437c:	bl	0 <strcmp>
    4380:	cmp	r0, #0
    4384:	beq	48a0 <cd_time_init+0x5d8>
    4388:	movw	r1, #0
    438c:	mov	r0, r7
    4390:	movt	r1, #0
    4394:	bl	0 <strcmp>
    4398:	cmp	r0, #0
    439c:	beq	49f8 <cd_time_init+0x730>
    43a0:	movw	r1, #0
    43a4:	mov	r0, r7
    43a8:	movt	r1, #0
    43ac:	bl	0 <strcmp>
    43b0:	cmp	r0, #0
    43b4:	beq	4b50 <cd_time_init+0x888>
    43b8:	movw	r1, #0
    43bc:	mov	r0, r7
    43c0:	movt	r1, #0
    43c4:	bl	0 <strcmp>
    43c8:	cmp	r0, #0
    43cc:	beq	4b90 <cd_time_init+0x8c8>
    43d0:	movw	r1, #0
    43d4:	mov	r0, r7
    43d8:	movt	r1, #0
    43dc:	bl	0 <strcmp>
    43e0:	cmp	r0, #0
    43e4:	beq	4bd0 <cd_time_init+0x908>
    43e8:	movw	r1, #0
    43ec:	mov	r0, r7
    43f0:	movt	r1, #0
    43f4:	bl	0 <strcmp>
    43f8:	cmp	r0, #0
    43fc:	beq	4c10 <cd_time_init+0x948>
    4400:	movw	r1, #0
    4404:	mov	r0, r7
    4408:	movt	r1, #0
    440c:	bl	0 <strcmp>
    4410:	cmp	r0, #0
    4414:	beq	4c50 <cd_time_init+0x988>
    4418:	movw	r1, #0
    441c:	mov	r0, r7
    4420:	movt	r1, #0
    4424:	bl	0 <strcmp>
    4428:	cmp	r0, #0
    442c:	beq	4c90 <cd_time_init+0x9c8>
    4430:	movw	r1, #0
    4434:	mov	r0, r7
    4438:	movt	r1, #0
    443c:	bl	0 <strcmp>
    4440:	cmp	r0, #0
    4444:	bne	4ccc <cd_time_init+0xa04>
    4448:	mov	r0, #0
    444c:	bl	0 <coda_type_text_new>
    4450:	mov	r1, #11
    4454:	mov	r4, r0
    4458:	bl	0 <coda_type_set_read_type>
    445c:	movw	r1, #0
    4460:	mov	r0, r4
    4464:	movt	r1, #0
    4468:	bl	0 <coda_type_set_description>
    446c:	mov	r0, r4
    4470:	mov	r2, #24
    4474:	mov	r3, #0
    4478:	bl	0 <coda_type_set_byte_size>
    447c:	movw	r7, #0
    4480:	movt	r7, #0
    4484:	b	4ccc <cd_time_init+0xa04>
    4488:	cmn	r4, #1
    448c:	beq	44ac <cd_time_init+0x1e4>
    4490:	movw	r0, #0
    4494:	movt	r0, #0
    4498:	ldr	r3, [r0, r4, lsl #2]
    449c:	ldrb	r0, [r3], #1
    44a0:	cmp	r0, #32
    44a4:	bne	449c <cd_time_init+0x1d4>
    44a8:	b	44b4 <cd_time_init+0x1ec>
    44ac:	movw	r3, #0
    44b0:	movt	r3, #0
    44b4:	movw	r0, #65136	; 0xfe70
    44b8:	movw	r1, #0
    44bc:	movw	r2, #0
    44c0:	movt	r0, #65535	; 0xffff
    44c4:	movt	r1, #0
    44c8:	movt	r2, #0
    44cc:	bl	0 <coda_set_error>
    44d0:	mov	r0, r9
    44d4:	sub	sp, fp, #28
    44d8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    44dc:	movw	r1, #0
    44e0:	mov	r0, r7
    44e4:	movt	r1, #0
    44e8:	bl	0 <strcmp>
    44ec:	cmp	r0, #0
    44f0:	beq	4710 <cd_time_init+0x448>
    44f4:	movw	r1, #0
    44f8:	mov	r0, r7
    44fc:	movt	r1, #0
    4500:	bl	0 <strcmp>
    4504:	cmp	r0, #0
    4508:	beq	48e0 <cd_time_init+0x618>
    450c:	movw	r1, #0
    4510:	mov	r0, r7
    4514:	movt	r1, #0
    4518:	bl	0 <strcmp>
    451c:	cmp	r0, #0
    4520:	beq	4a38 <cd_time_init+0x770>
    4524:	movw	r1, #0
    4528:	mov	r0, r7
    452c:	movt	r1, #0
    4530:	bl	0 <strcmp>
    4534:	cmp	r0, #0
    4538:	mvn	r9, #0
    453c:	bne	4ccc <cd_time_init+0xa04>
    4540:	mov	r0, #1
    4544:	bl	0 <coda_type_record_new>
    4548:	movw	r1, #0
    454c:	mov	r4, r0
    4550:	movt	r1, #0
    4554:	bl	0 <coda_type_set_description>
    4558:	ldr	r0, [r8]
    455c:	mov	r1, #2
    4560:	ldr	r0, [r0, #44]	; 0x2c
    4564:	bl	0 <coda_type_number_new>
    4568:	movw	r1, #0
    456c:	mov	r7, r0
    4570:	movt	r1, #0
    4574:	bl	0 <coda_type_set_description>
    4578:	mov	r0, r7
    457c:	mov	r1, #3
    4580:	bl	0 <coda_type_set_read_type>
    4584:	mov	r0, r7
    4588:	mov	r2, #16
    458c:	mov	r3, #0
    4590:	bl	0 <coda_type_set_bit_size>
    4594:	movw	r1, #0
    4598:	mov	r0, r7
    459c:	movt	r1, #0
    45a0:	bl	0 <coda_type_number_set_unit>
    45a4:	movw	r0, #0
    45a8:	movt	r0, #0
    45ac:	bl	0 <coda_type_record_field_new>
    45b0:	mov	r1, r7
    45b4:	mov	r9, r0
    45b8:	bl	0 <coda_type_record_field_set_type>
    45bc:	mov	r0, r7
    45c0:	bl	0 <coda_type_release>
    45c4:	mov	r0, r4
    45c8:	mov	r1, r9
    45cc:	bl	0 <coda_type_record_add_field>
    45d0:	ldr	r0, [r8]
    45d4:	mov	r1, #2
    45d8:	ldr	r0, [r0, #44]	; 0x2c
    45dc:	bl	0 <coda_type_number_new>
    45e0:	movw	r1, #0
    45e4:	mov	r7, r0
    45e8:	movt	r1, #0
    45ec:	bl	0 <coda_type_set_description>
    45f0:	mov	r0, r7
    45f4:	mov	r1, #5
    45f8:	bl	0 <coda_type_set_read_type>
    45fc:	mov	r0, r7
    4600:	mov	r2, #32
    4604:	mov	r3, #0
    4608:	bl	0 <coda_type_set_bit_size>
    460c:	movw	r1, #0
    4610:	mov	r0, r7
    4614:	movt	r1, #0
    4618:	bl	0 <coda_type_number_set_unit>
    461c:	movw	r0, #0
    4620:	movt	r0, #0
    4624:	bl	0 <coda_type_record_field_new>
    4628:	mov	r1, r7
    462c:	mov	r9, r0
    4630:	bl	0 <coda_type_record_field_set_type>
    4634:	mov	r0, r7
    4638:	bl	0 <coda_type_release>
    463c:	mov	r0, r4
    4640:	mov	r1, r9
    4644:	bl	0 <coda_type_record_add_field>
    4648:	ldr	r0, [r8]
    464c:	mov	r1, #2
    4650:	ldr	r0, [r0, #44]	; 0x2c
    4654:	bl	0 <coda_type_number_new>
    4658:	movw	r1, #0
    465c:	mov	r7, r0
    4660:	movt	r1, #0
    4664:	bl	0 <coda_type_set_description>
    4668:	mov	r0, r7
    466c:	mov	r1, #3
    4670:	bl	0 <coda_type_set_read_type>
    4674:	mov	r0, r7
    4678:	mov	r2, #16
    467c:	mov	r3, #0
    4680:	bl	0 <coda_type_set_bit_size>
    4684:	movw	r1, #0
    4688:	mov	r0, r7
    468c:	movt	r1, #0
    4690:	bl	0 <coda_type_number_set_unit>
    4694:	movw	r0, #0
    4698:	movt	r0, #0
    469c:	bl	0 <coda_type_record_field_new>
    46a0:	mov	r1, r7
    46a4:	mov	r9, r0
    46a8:	bl	0 <coda_type_record_field_set_type>
    46ac:	mov	r0, r7
    46b0:	bl	0 <coda_type_release>
    46b4:	mov	r1, r9
    46b8:	mov	r0, r4
    46bc:	mvn	r9, #0
    46c0:	bl	0 <coda_type_record_add_field>
    46c4:	movw	r7, #0
    46c8:	movt	r7, #0
    46cc:	b	4ccc <cd_time_init+0xa04>
    46d0:	mov	r0, #0
    46d4:	bl	0 <coda_type_text_new>
    46d8:	mov	r1, #11
    46dc:	mov	r4, r0
    46e0:	bl	0 <coda_type_set_read_type>
    46e4:	movw	r1, #0
    46e8:	mov	r0, r4
    46ec:	movt	r1, #0
    46f0:	bl	0 <coda_type_set_description>
    46f4:	mov	r0, r4
    46f8:	mov	r2, #27
    46fc:	mov	r3, #0
    4700:	bl	0 <coda_type_set_byte_size>
    4704:	movw	r7, #0
    4708:	movt	r7, #0
    470c:	b	4ccc <cd_time_init+0xa04>
    4710:	mov	r0, #1
    4714:	bl	0 <coda_type_record_new>
    4718:	movw	r1, #0
    471c:	mov	r4, r0
    4720:	movt	r1, #0
    4724:	bl	0 <coda_type_set_description>
    4728:	ldr	r0, [r8]
    472c:	mov	r1, #2
    4730:	ldr	r0, [r0, #44]	; 0x2c
    4734:	bl	0 <coda_type_number_new>
    4738:	movw	r1, #0
    473c:	mov	r7, r0
    4740:	movt	r1, #0
    4744:	bl	0 <coda_type_set_description>
    4748:	mov	r0, r7
    474c:	mov	r1, #4
    4750:	bl	0 <coda_type_set_read_type>
    4754:	mov	r0, r7
    4758:	mov	r2, #32
    475c:	mov	r3, #0
    4760:	bl	0 <coda_type_set_bit_size>
    4764:	movw	r1, #0
    4768:	mov	r0, r7
    476c:	movt	r1, #0
    4770:	bl	0 <coda_type_number_set_unit>
    4774:	movw	r0, #0
    4778:	movt	r0, #0
    477c:	bl	0 <coda_type_record_field_new>
    4780:	mov	r1, r7
    4784:	mov	r9, r0
    4788:	bl	0 <coda_type_record_field_set_type>
    478c:	mov	r0, r7
    4790:	bl	0 <coda_type_release>
    4794:	mov	r0, r4
    4798:	mov	r1, r9
    479c:	bl	0 <coda_type_record_add_field>
    47a0:	ldr	r0, [r8]
    47a4:	mov	r1, #2
    47a8:	ldr	r0, [r0, #44]	; 0x2c
    47ac:	bl	0 <coda_type_number_new>
    47b0:	movw	r1, #0
    47b4:	mov	r7, r0
    47b8:	movt	r1, #0
    47bc:	bl	0 <coda_type_set_description>
    47c0:	mov	r0, r7
    47c4:	mov	r1, #5
    47c8:	bl	0 <coda_type_set_read_type>
    47cc:	mov	r0, r7
    47d0:	mov	r2, #32
    47d4:	mov	r3, #0
    47d8:	bl	0 <coda_type_set_bit_size>
    47dc:	movw	r1, #0
    47e0:	mov	r0, r7
    47e4:	movt	r1, #0
    47e8:	bl	0 <coda_type_number_set_unit>
    47ec:	movw	r0, #0
    47f0:	movt	r0, #0
    47f4:	bl	0 <coda_type_record_field_new>
    47f8:	mov	r1, r7
    47fc:	mov	r9, r0
    4800:	bl	0 <coda_type_record_field_set_type>
    4804:	mov	r0, r7
    4808:	bl	0 <coda_type_release>
    480c:	mov	r0, r4
    4810:	mov	r1, r9
    4814:	bl	0 <coda_type_record_add_field>
    4818:	ldr	r0, [r8]
    481c:	mov	r1, #2
    4820:	ldr	r0, [r0, #44]	; 0x2c
    4824:	bl	0 <coda_type_number_new>
    4828:	movw	r1, #0
    482c:	mov	r7, r0
    4830:	movt	r1, #0
    4834:	bl	0 <coda_type_set_description>
    4838:	mov	r0, r7
    483c:	mov	r1, #5
    4840:	bl	0 <coda_type_set_read_type>
    4844:	mov	r0, r7
    4848:	mov	r2, #32
    484c:	mov	r3, #0
    4850:	bl	0 <coda_type_set_bit_size>
    4854:	movw	r1, #0
    4858:	mov	r0, r7
    485c:	movt	r1, #0
    4860:	bl	0 <coda_type_number_set_unit>
    4864:	movw	r0, #0
    4868:	movt	r0, #0
    486c:	bl	0 <coda_type_record_field_new>
    4870:	mov	r1, r7
    4874:	mov	r9, r0
    4878:	bl	0 <coda_type_record_field_set_type>
    487c:	mov	r0, r7
    4880:	bl	0 <coda_type_release>
    4884:	mov	r0, r4
    4888:	mov	r1, r9
    488c:	bl	0 <coda_type_record_add_field>
    4890:	movw	r7, #0
    4894:	mvn	r9, #0
    4898:	movt	r7, #0
    489c:	b	4ccc <cd_time_init+0xa04>
    48a0:	mov	r0, #0
    48a4:	bl	0 <coda_type_text_new>
    48a8:	mov	r1, #11
    48ac:	mov	r4, r0
    48b0:	bl	0 <coda_type_set_read_type>
    48b4:	movw	r1, #0
    48b8:	mov	r0, r4
    48bc:	movt	r1, #0
    48c0:	bl	0 <coda_type_set_description>
    48c4:	mov	r0, r4
    48c8:	mov	r2, #24
    48cc:	mov	r3, #0
    48d0:	bl	0 <coda_type_set_byte_size>
    48d4:	movw	r7, #0
    48d8:	movt	r7, #0
    48dc:	b	4ccc <cd_time_init+0xa04>
    48e0:	mov	r0, #1
    48e4:	bl	0 <coda_type_record_new>
    48e8:	movw	r1, #0
    48ec:	mov	r4, r0
    48f0:	movt	r1, #0
    48f4:	bl	0 <coda_type_set_description>
    48f8:	ldr	r0, [r8]
    48fc:	mov	r1, #2
    4900:	ldr	r0, [r0, #44]	; 0x2c
    4904:	bl	0 <coda_type_number_new>
    4908:	movw	r1, #0
    490c:	mov	r7, r0
    4910:	movt	r1, #0
    4914:	bl	0 <coda_type_set_description>
    4918:	mov	r0, r7
    491c:	mov	r1, #4
    4920:	bl	0 <coda_type_set_read_type>
    4924:	mov	r0, r7
    4928:	mov	r2, #32
    492c:	mov	r3, #0
    4930:	bl	0 <coda_type_set_bit_size>
    4934:	movw	r1, #0
    4938:	mov	r0, r7
    493c:	movt	r1, #0
    4940:	bl	0 <coda_type_number_set_unit>
    4944:	movw	r0, #0
    4948:	movt	r0, #0
    494c:	bl	0 <coda_type_record_field_new>
    4950:	mov	r1, r7
    4954:	mov	r9, r0
    4958:	bl	0 <coda_type_record_field_set_type>
    495c:	mov	r0, r7
    4960:	bl	0 <coda_type_release>
    4964:	mov	r0, r4
    4968:	mov	r1, r9
    496c:	bl	0 <coda_type_record_add_field>
    4970:	ldr	r0, [r8]
    4974:	mov	r1, #2
    4978:	ldr	r0, [r0, #44]	; 0x2c
    497c:	bl	0 <coda_type_number_new>
    4980:	movw	r1, #0
    4984:	mov	r7, r0
    4988:	movt	r1, #0
    498c:	bl	0 <coda_type_set_description>
    4990:	mov	r0, r7
    4994:	mov	r1, #5
    4998:	bl	0 <coda_type_set_read_type>
    499c:	mov	r0, r7
    49a0:	mov	r2, #32
    49a4:	mov	r3, #0
    49a8:	bl	0 <coda_type_set_bit_size>
    49ac:	movw	r1, #0
    49b0:	mov	r0, r7
    49b4:	movt	r1, #0
    49b8:	bl	0 <coda_type_number_set_unit>
    49bc:	movw	r0, #0
    49c0:	movt	r0, #0
    49c4:	bl	0 <coda_type_record_field_new>
    49c8:	mov	r1, r7
    49cc:	mov	r9, r0
    49d0:	bl	0 <coda_type_record_field_set_type>
    49d4:	mov	r0, r7
    49d8:	bl	0 <coda_type_release>
    49dc:	mov	r0, r4
    49e0:	mov	r1, r9
    49e4:	bl	0 <coda_type_record_add_field>
    49e8:	movw	r7, #0
    49ec:	mvn	r9, #0
    49f0:	movt	r7, #0
    49f4:	b	4ccc <cd_time_init+0xa04>
    49f8:	mov	r0, #0
    49fc:	bl	0 <coda_type_text_new>
    4a00:	mov	r1, #11
    4a04:	mov	r4, r0
    4a08:	bl	0 <coda_type_set_read_type>
    4a0c:	movw	r1, #0
    4a10:	mov	r0, r4
    4a14:	movt	r1, #0
    4a18:	bl	0 <coda_type_set_description>
    4a1c:	mov	r0, r4
    4a20:	mov	r2, #15
    4a24:	mov	r3, #0
    4a28:	bl	0 <coda_type_set_byte_size>
    4a2c:	movw	r7, #0
    4a30:	movt	r7, #0
    4a34:	b	4ccc <cd_time_init+0xa04>
    4a38:	mov	r0, #1
    4a3c:	bl	0 <coda_type_record_new>
    4a40:	movw	r1, #0
    4a44:	mov	r4, r0
    4a48:	movt	r1, #0
    4a4c:	bl	0 <coda_type_set_description>
    4a50:	ldr	r0, [r8]
    4a54:	mov	r1, #2
    4a58:	ldr	r0, [r0, #44]	; 0x2c
    4a5c:	bl	0 <coda_type_number_new>
    4a60:	movw	r1, #0
    4a64:	mov	r7, r0
    4a68:	movt	r1, #0
    4a6c:	bl	0 <coda_type_set_description>
    4a70:	mov	r0, r7
    4a74:	mov	r1, #3
    4a78:	bl	0 <coda_type_set_read_type>
    4a7c:	mov	r0, r7
    4a80:	mov	r2, #16
    4a84:	mov	r3, #0
    4a88:	bl	0 <coda_type_set_bit_size>
    4a8c:	movw	r1, #0
    4a90:	mov	r0, r7
    4a94:	movt	r1, #0
    4a98:	bl	0 <coda_type_number_set_unit>
    4a9c:	movw	r0, #0
    4aa0:	movt	r0, #0
    4aa4:	bl	0 <coda_type_record_field_new>
    4aa8:	mov	r1, r7
    4aac:	mov	r9, r0
    4ab0:	bl	0 <coda_type_record_field_set_type>
    4ab4:	mov	r0, r7
    4ab8:	bl	0 <coda_type_release>
    4abc:	mov	r0, r4
    4ac0:	mov	r1, r9
    4ac4:	bl	0 <coda_type_record_add_field>
    4ac8:	ldr	r0, [r8]
    4acc:	mov	r1, #2
    4ad0:	ldr	r0, [r0, #44]	; 0x2c
    4ad4:	bl	0 <coda_type_number_new>
    4ad8:	movw	r1, #0
    4adc:	mov	r7, r0
    4ae0:	movt	r1, #0
    4ae4:	bl	0 <coda_type_set_description>
    4ae8:	mov	r0, r7
    4aec:	mov	r1, #5
    4af0:	bl	0 <coda_type_set_read_type>
    4af4:	mov	r0, r7
    4af8:	mov	r2, #32
    4afc:	mov	r3, #0
    4b00:	bl	0 <coda_type_set_bit_size>
    4b04:	movw	r1, #0
    4b08:	mov	r0, r7
    4b0c:	movt	r1, #0
    4b10:	bl	0 <coda_type_number_set_unit>
    4b14:	movw	r0, #0
    4b18:	movt	r0, #0
    4b1c:	bl	0 <coda_type_record_field_new>
    4b20:	mov	r1, r7
    4b24:	mov	r9, r0
    4b28:	bl	0 <coda_type_record_field_set_type>
    4b2c:	mov	r0, r7
    4b30:	bl	0 <coda_type_release>
    4b34:	mov	r0, r4
    4b38:	mov	r1, r9
    4b3c:	bl	0 <coda_type_record_add_field>
    4b40:	movw	r7, #0
    4b44:	mvn	r9, #0
    4b48:	movt	r7, #0
    4b4c:	b	4ccc <cd_time_init+0xa04>
    4b50:	mov	r0, #0
    4b54:	bl	0 <coda_type_text_new>
    4b58:	mov	r1, #11
    4b5c:	mov	r4, r0
    4b60:	bl	0 <coda_type_set_read_type>
    4b64:	movw	r1, #0
    4b68:	mov	r0, r4
    4b6c:	movt	r1, #0
    4b70:	bl	0 <coda_type_set_description>
    4b74:	mov	r0, r4
    4b78:	mov	r2, #18
    4b7c:	mov	r3, #0
    4b80:	bl	0 <coda_type_set_byte_size>
    4b84:	movw	r7, #0
    4b88:	movt	r7, #0
    4b8c:	b	4ccc <cd_time_init+0xa04>
    4b90:	mov	r0, #0
    4b94:	bl	0 <coda_type_text_new>
    4b98:	mov	r1, #11
    4b9c:	mov	r4, r0
    4ba0:	bl	0 <coda_type_set_read_type>
    4ba4:	movw	r1, #0
    4ba8:	mov	r0, r4
    4bac:	movt	r1, #0
    4bb0:	bl	0 <coda_type_set_description>
    4bb4:	mov	r0, r4
    4bb8:	mov	r2, #19
    4bbc:	mov	r3, #0
    4bc0:	bl	0 <coda_type_set_byte_size>
    4bc4:	movw	r7, #0
    4bc8:	movt	r7, #0
    4bcc:	b	4ccc <cd_time_init+0xa04>
    4bd0:	mov	r0, #0
    4bd4:	bl	0 <coda_type_text_new>
    4bd8:	mov	r1, #11
    4bdc:	mov	r4, r0
    4be0:	bl	0 <coda_type_set_read_type>
    4be4:	movw	r1, #0
    4be8:	mov	r0, r4
    4bec:	movt	r1, #0
    4bf0:	bl	0 <coda_type_set_description>
    4bf4:	mov	r0, r4
    4bf8:	mov	r2, #23
    4bfc:	mov	r3, #0
    4c00:	bl	0 <coda_type_set_byte_size>
    4c04:	movw	r7, #0
    4c08:	movt	r7, #0
    4c0c:	b	4ccc <cd_time_init+0xa04>
    4c10:	mov	r0, #0
    4c14:	bl	0 <coda_type_text_new>
    4c18:	mov	r1, #11
    4c1c:	mov	r4, r0
    4c20:	bl	0 <coda_type_set_read_type>
    4c24:	movw	r1, #0
    4c28:	mov	r0, r4
    4c2c:	movt	r1, #0
    4c30:	bl	0 <coda_type_set_description>
    4c34:	mov	r0, r4
    4c38:	mov	r2, #26
    4c3c:	mov	r3, #0
    4c40:	bl	0 <coda_type_set_byte_size>
    4c44:	movw	r7, #0
    4c48:	movt	r7, #0
    4c4c:	b	4ccc <cd_time_init+0xa04>
    4c50:	mov	r0, #0
    4c54:	bl	0 <coda_type_text_new>
    4c58:	mov	r1, #11
    4c5c:	mov	r4, r0
    4c60:	bl	0 <coda_type_set_read_type>
    4c64:	movw	r1, #0
    4c68:	mov	r0, r4
    4c6c:	movt	r1, #0
    4c70:	bl	0 <coda_type_set_description>
    4c74:	mov	r0, r4
    4c78:	mov	r2, #30
    4c7c:	mov	r3, #0
    4c80:	bl	0 <coda_type_set_byte_size>
    4c84:	movw	r7, #0
    4c88:	movt	r7, #0
    4c8c:	b	4ccc <cd_time_init+0xa04>
    4c90:	mov	r0, #0
    4c94:	bl	0 <coda_type_text_new>
    4c98:	mov	r1, #11
    4c9c:	mov	r4, r0
    4ca0:	bl	0 <coda_type_set_read_type>
    4ca4:	movw	r1, #0
    4ca8:	mov	r0, r4
    4cac:	movt	r1, #0
    4cb0:	bl	0 <coda_type_set_description>
    4cb4:	mov	r0, r4
    4cb8:	mov	r2, #17
    4cbc:	mov	r3, #0
    4cc0:	bl	0 <coda_type_set_byte_size>
    4cc4:	movw	r7, #0
    4cc8:	movt	r7, #0
    4ccc:	add	r1, sp, #4
    4cd0:	mov	r0, r7
    4cd4:	bl	0 <coda_expression_from_string>
    4cd8:	cmp	r0, #0
    4cdc:	beq	4cec <cd_time_init+0xa24>
    4ce0:	mov	r0, r4
    4ce4:	bl	0 <coda_type_release>
    4ce8:	b	44d0 <cd_time_init+0x208>
    4cec:	ldr	r0, [sp, #4]
    4cf0:	add	r1, sp, #8
    4cf4:	bl	0 <coda_expression_get_type>
    4cf8:	cmp	r0, #0
    4cfc:	beq	4d14 <cd_time_init+0xa4c>
    4d00:	mov	r0, r4
    4d04:	bl	0 <coda_type_release>
    4d08:	ldr	r0, [sp, #4]
    4d0c:	bl	0 <coda_expression_delete>
    4d10:	b	44d0 <cd_time_init+0x208>
    4d14:	ldr	r0, [sp, #8]
    4d18:	cmp	r0, #2
    4d1c:	bne	4efc <cd_time_init+0xc34>
    4d20:	ldr	r0, [r8]
    4d24:	movw	r1, #0
    4d28:	movt	r1, #0
    4d2c:	str	r1, [r0, #40]	; 0x28
    4d30:	ldr	r0, [r0, #44]	; 0x2c
    4d34:	ldr	r1, [sp, #4]
    4d38:	bl	0 <coda_type_time_new>
    4d3c:	ldr	r1, [r8]
    4d40:	cmp	r0, #0
    4d44:	str	r0, [r1, #8]
    4d48:	beq	4d00 <cd_time_init+0xa38>
    4d4c:	cmp	r4, #0
    4d50:	beq	4d70 <cd_time_init+0xaa8>
    4d54:	mov	r1, r4
    4d58:	bl	0 <coda_type_time_set_base_type>
    4d5c:	mov	r7, r0
    4d60:	mov	r0, r4
    4d64:	bl	0 <coda_type_release>
    4d68:	cmp	r7, #0
    4d6c:	bne	44d0 <cd_time_init+0x208>
    4d70:	mov	r0, r8
    4d74:	mov	r1, sl
    4d78:	bl	5568 <handle_name_attribute_for_type>
    4d7c:	cmp	r0, #0
    4d80:	bne	44d0 <cd_time_init+0x208>
    4d84:	movw	r5, #0
    4d88:	movw	r2, #0
    4d8c:	movw	r3, #0
    4d90:	ldr	r0, [r8]
    4d94:	movw	r1, #0
    4d98:	movw	r7, #0
    4d9c:	movw	r6, #0
    4da0:	movt	r5, #0
    4da4:	movt	r2, #0
    4da8:	movt	r3, #0
    4dac:	movt	r1, #0
    4db0:	movt	r7, #0
    4db4:	movt	r6, #0
    4db8:	vmov.32	d19[0], r5
    4dbc:	movw	r5, #0
    4dc0:	vdup.32	q10, r1
    4dc4:	movt	r5, #0
    4dc8:	str	r1, [r0, #260]	; 0x104
    4dcc:	vmov.32	d18[0], r5
    4dd0:	movw	r5, #0
    4dd4:	vmov.32	d19[1], r6
    4dd8:	vmov.32	d18[1], r7
    4ddc:	movt	r5, #0
    4de0:	vmov.32	d17[0], r5
    4de4:	movw	r5, #0
    4de8:	movt	r5, #0
    4dec:	vmov.32	d16[0], r5
    4df0:	vmov.32	d17[1], r3
    4df4:	vmov.32	d16[1], r2
    4df8:	movw	r2, #0
    4dfc:	movw	r3, #0
    4e00:	movt	r2, #0
    4e04:	movt	r3, #0
    4e08:	str	r2, [r0, #88]	; 0x58
    4e0c:	movw	r2, #0
    4e10:	str	r1, [r0, #292]	; 0x124
    4e14:	movt	r2, #0
    4e18:	str	r2, [r0, #120]	; 0x78
    4e1c:	movw	r2, #0
    4e20:	str	r1, [r0, #304]	; 0x130
    4e24:	movt	r2, #0
    4e28:	str	r2, [r0, #132]	; 0x84
    4e2c:	movw	r2, #0
    4e30:	str	r1, [r0, #332]	; 0x14c
    4e34:	movt	r2, #0
    4e38:	str	r2, [r0, #160]	; 0xa0
    4e3c:	movw	r2, #0
    4e40:	str	r1, [r0, #360]	; 0x168
    4e44:	str	r1, [r0, #364]	; 0x16c
    4e48:	movt	r2, #0
    4e4c:	str	r2, [r0, #188]	; 0xbc
    4e50:	str	r3, [r0, #192]	; 0xc0
    4e54:	str	r1, [r0, #392]	; 0x188
    4e58:	movw	r1, #0
    4e5c:	movt	r1, #0
    4e60:	str	r1, [r0, #220]	; 0xdc
    4e64:	add	r1, r0, #224	; 0xe0
    4e68:	vst1.32	{d20-d21}, [r1]
    4e6c:	add	r1, r0, #52	; 0x34
    4e70:	vst1.32	{d18-d19}, [r1]
    4e74:	add	r1, r0, #372	; 0x174
    4e78:	add	r0, r0, #200	; 0xc8
    4e7c:	vst1.32	{d20-d21}, [r1]
    4e80:	vst1.32	{d16-d17}, [r0]
    4e84:	movw	r1, #0
    4e88:	ldr	r0, [r8]
    4e8c:	movt	r1, #0
    4e90:	str	r1, [r0, #268]	; 0x10c
    4e94:	movw	r1, #0
    4e98:	movt	r1, #0
    4e9c:	str	r1, [r0, #96]	; 0x60
    4ea0:	movw	r1, #0
    4ea4:	ldr	r0, [r8]
    4ea8:	movt	r1, #0
    4eac:	str	r1, [r0, #312]	; 0x138
    4eb0:	movw	r1, #0
    4eb4:	movt	r1, #0
    4eb8:	str	r1, [r0, #140]	; 0x8c
    4ebc:	ldr	r0, [r8]
    4ec0:	ldr	r1, [r0, #44]	; 0x2c
    4ec4:	cmp	r1, #2
    4ec8:	bcc	4ee8 <cd_time_init+0xc20>
    4ecc:	movw	r1, #0
    4ed0:	movt	r1, #0
    4ed4:	str	r1, [r0, #240]	; 0xf0
    4ed8:	movw	r1, #0
    4edc:	movt	r1, #0
    4ee0:	str	r1, [r0, #68]	; 0x44
    4ee4:	ldr	r0, [r8]
    4ee8:	movw	r1, #0
    4eec:	mov	r9, #0
    4ef0:	movt	r1, #0
    4ef4:	str	r1, [r0, #36]	; 0x24
    4ef8:	b	44d0 <cd_time_init+0x208>
    4efc:	mov	r0, r4
    4f00:	bl	0 <coda_type_release>
    4f04:	ldr	r0, [sp, #4]
    4f08:	bl	0 <coda_expression_delete>
    4f0c:	movw	r0, #65136	; 0xfe70
    4f10:	movw	r1, #0
    4f14:	movt	r0, #65535	; 0xffff
    4f18:	movt	r1, #0
    4f1c:	bl	0 <coda_set_error>
    4f20:	b	44d0 <cd_time_init+0x208>

00004f24 <cd_type_init>:
    4f24:	push	{r4, r5, r6, r7, fp, lr}
    4f28:	add	fp, sp, #16
    4f2c:	mov	r5, r0
    4f30:	ldr	r0, [r1]
    4f34:	mov	r4, r1
    4f38:	cmp	r0, #0
    4f3c:	beq	4fa0 <cd_type_init+0x7c>
    4f40:	movw	r6, #0
    4f44:	add	r7, r4, #4
    4f48:	movt	r6, #0
    4f4c:	mov	r1, r6
    4f50:	bl	0 <strcmp>
    4f54:	cmp	r0, #0
    4f58:	beq	4f74 <cd_type_init+0x50>
    4f5c:	ldr	r0, [r7, #4]
    4f60:	add	r1, r7, #8
    4f64:	mov	r7, r1
    4f68:	cmp	r0, #0
    4f6c:	bne	4f4c <cd_type_init+0x28>
    4f70:	b	4fa0 <cd_type_init+0x7c>
    4f74:	ldr	r0, [r7]
    4f78:	cmp	r0, #0
    4f7c:	beq	4fa0 <cd_type_init+0x7c>
    4f80:	movw	r0, #65136	; 0xfe70
    4f84:	movw	r1, #0
    4f88:	movt	r0, #65535	; 0xffff
    4f8c:	movt	r1, #0
    4f90:	bl	0 <coda_set_error>
    4f94:	mvn	r6, #0
    4f98:	mov	r0, r6
    4f9c:	pop	{r4, r5, r6, r7, fp, pc}
    4fa0:	mov	r0, r5
    4fa4:	mov	r1, r4
    4fa8:	bl	5424 <handle_format_attribute_for_type>
    4fac:	mvn	r6, #0
    4fb0:	cmp	r0, #0
    4fb4:	beq	4fc0 <cd_type_init+0x9c>
    4fb8:	mov	r0, r6
    4fbc:	pop	{r4, r5, r6, r7, fp, pc}
    4fc0:	ldr	r0, [r5]
    4fc4:	movw	r1, #0
    4fc8:	movt	r1, #0
    4fcc:	str	r1, [r0, #40]	; 0x28
    4fd0:	ldr	r0, [r0, #44]	; 0x2c
    4fd4:	bl	0 <coda_type_text_new>
    4fd8:	ldr	r1, [r5]
    4fdc:	cmp	r0, #0
    4fe0:	str	r0, [r1, #8]
    4fe4:	beq	4fb8 <cd_type_init+0x94>
    4fe8:	movw	r6, #0
    4fec:	movw	r0, #0
    4ff0:	movw	r2, #0
    4ff4:	movw	r7, #0
    4ff8:	add	r3, r1, #52	; 0x34
    4ffc:	movw	ip, #0
    5000:	movw	lr, #0
    5004:	movt	r6, #0
    5008:	movt	r0, #0
    500c:	movt	r2, #0
    5010:	movt	r7, #0
    5014:	movt	ip, #0
    5018:	movt	lr, #0
    501c:	vmov.32	d19[0], r6
    5020:	movw	r6, #0
    5024:	vdup.32	q8, r0
    5028:	vmov.32	d18[0], r7
    502c:	add	r7, r3, #172	; 0xac
    5030:	movt	r6, #0
    5034:	vmov.32	d19[1], r6
    5038:	vmov.32	d18[1], r2
    503c:	mov	r2, r3
    5040:	movw	r6, #0
    5044:	movt	r6, #0
    5048:	vst1.32	{d16-d17}, [r7]
    504c:	mov	r7, #320	; 0x140
    5050:	vst1.32	{d18-d19}, [r2], r7
    5054:	movw	r7, #0
    5058:	str	r0, [r1, #260]	; 0x104
    505c:	movt	r7, #0
    5060:	str	r7, [r1, #88]	; 0x58
    5064:	movw	r7, #0
    5068:	str	r0, [r1, #292]	; 0x124
    506c:	movt	r7, #0
    5070:	str	r7, [r1, #120]	; 0x78
    5074:	movw	r7, #0
    5078:	str	r0, [r1, #304]	; 0x130
    507c:	movt	r7, #0
    5080:	str	r7, [r1, #132]	; 0x84
    5084:	movw	r7, #0
    5088:	str	r0, [r1, #332]	; 0x14c
    508c:	movt	r7, #0
    5090:	str	r7, [r1, #160]	; 0xa0
    5094:	movw	r7, #0
    5098:	str	r0, [r1, #360]	; 0x168
    509c:	str	r0, [r1, #364]	; 0x16c
    50a0:	movt	r7, #0
    50a4:	str	r7, [r1, #188]	; 0xbc
    50a8:	str	r6, [r1, #192]	; 0xc0
    50ac:	movw	r7, #0
    50b0:	movw	r6, #0
    50b4:	vst1.32	{d16-d17}, [r2]
    50b8:	add	r2, r3, #148	; 0x94
    50bc:	movt	r6, #0
    50c0:	movt	r7, #0
    50c4:	vmov.32	d19[0], r6
    50c8:	vmov.32	d18[0], r7
    50cc:	vmov.32	d19[1], lr
    50d0:	vmov.32	d18[1], ip
    50d4:	vst1.32	{d18-d19}, [r2]
    50d8:	str	r0, [r1, #392]	; 0x188
    50dc:	movw	r0, #0
    50e0:	movt	r0, #0
    50e4:	str	r0, [r1, #220]	; 0xdc
    50e8:	movw	r1, #0
    50ec:	ldr	r0, [r5]
    50f0:	movt	r1, #0
    50f4:	str	r1, [r0, #268]	; 0x10c
    50f8:	movw	r1, #0
    50fc:	movt	r1, #0
    5100:	str	r1, [r0, #96]	; 0x60
    5104:	movw	r1, #0
    5108:	ldr	r0, [r5]
    510c:	movt	r1, #0
    5110:	str	r1, [r0, #240]	; 0xf0
    5114:	movw	r1, #0
    5118:	movt	r1, #0
    511c:	str	r1, [r0, #68]	; 0x44
    5120:	mov	r0, r5
    5124:	mov	r1, r4
    5128:	bl	73f4 <handle_xml_name>
    512c:	cmp	r0, #0
    5130:	mov	r6, r0
    5134:	mvnne	r6, #0
    5138:	mov	r0, r6
    513c:	pop	{r4, r5, r6, r7, fp, pc}

00005140 <cd_union_init>:
    5140:	push	{r4, r5, r6, sl, fp, lr}
    5144:	add	fp, sp, #16
    5148:	mov	r4, r1
    514c:	mov	r5, r0
    5150:	bl	5424 <handle_format_attribute_for_type>
    5154:	mvn	r6, #0
    5158:	cmp	r0, #0
    515c:	beq	5168 <cd_union_init+0x28>
    5160:	mov	r0, r6
    5164:	pop	{r4, r5, r6, sl, fp, pc}
    5168:	ldr	r0, [r5]
    516c:	movw	r1, #0
    5170:	movt	r1, #0
    5174:	str	r1, [r0, #40]	; 0x28
    5178:	ldr	r0, [r0, #44]	; 0x2c
    517c:	bl	0 <coda_type_union_new>
    5180:	ldr	r1, [r5]
    5184:	cmp	r0, #0
    5188:	str	r0, [r1, #8]
    518c:	beq	5160 <cd_union_init+0x20>
    5190:	mov	r0, r5
    5194:	mov	r1, r4
    5198:	bl	5568 <handle_name_attribute_for_type>
    519c:	cmp	r0, #0
    51a0:	bne	5160 <cd_union_init+0x20>
    51a4:	ldr	r0, [r5]
    51a8:	movw	r1, #0
    51ac:	movw	r2, #0
    51b0:	movt	r1, #0
    51b4:	movt	r2, #0
    51b8:	str	r1, [r0, #268]	; 0x10c
    51bc:	movw	r1, #0
    51c0:	movt	r1, #0
    51c4:	str	r1, [r0, #96]	; 0x60
    51c8:	movw	r1, #0
    51cc:	ldr	r0, [r5]
    51d0:	movt	r1, #0
    51d4:	str	r1, [r0, #252]	; 0xfc
    51d8:	movw	r1, #0
    51dc:	movt	r1, #0
    51e0:	str	r1, [r0, #80]	; 0x50
    51e4:	ldr	r0, [r5]
    51e8:	str	r2, [r0, #284]	; 0x11c
    51ec:	str	r1, [r0, #112]	; 0x70
    51f0:	movw	r1, #0
    51f4:	ldr	r0, [r5]
    51f8:	movt	r1, #0
    51fc:	str	r1, [r0, #280]	; 0x118
    5200:	movw	r1, #0
    5204:	movt	r1, #0
    5208:	str	r1, [r0, #108]	; 0x6c
    520c:	movw	r1, #0
    5210:	ldr	r0, [r5]
    5214:	movt	r1, #0
    5218:	str	r1, [r0, #240]	; 0xf0
    521c:	movw	r1, #0
    5220:	movt	r1, #0
    5224:	str	r1, [r0, #68]	; 0x44
    5228:	movw	r1, #0
    522c:	ldr	r0, [r5]
    5230:	movt	r1, #0
    5234:	str	r1, [r0, #36]	; 0x24
    5238:	mov	r0, r5
    523c:	mov	r1, r4
    5240:	bl	73f4 <handle_xml_name>
    5244:	cmp	r0, #0
    5248:	mov	r6, r0
    524c:	mvnne	r6, #0
    5250:	mov	r0, r6
    5254:	pop	{r4, r5, r6, sl, fp, pc}

00005258 <cd_vsf_integer_init>:
    5258:	push	{r4, r5, r6, sl, fp, lr}
    525c:	add	fp, sp, #16
    5260:	mov	r6, r1
    5264:	mov	r4, r0
    5268:	bl	5424 <handle_format_attribute_for_type>
    526c:	mvn	r5, #0
    5270:	cmp	r0, #0
    5274:	beq	5280 <cd_vsf_integer_init+0x28>
    5278:	mov	r0, r5
    527c:	pop	{r4, r5, r6, sl, fp, pc}
    5280:	ldr	r0, [r4]
    5284:	movw	r1, #0
    5288:	movt	r1, #0
    528c:	str	r1, [r0, #40]	; 0x28
    5290:	ldr	r0, [r0, #44]	; 0x2c
    5294:	bl	0 <coda_type_vsf_integer_new>
    5298:	ldr	r1, [r4]
    529c:	cmp	r0, #0
    52a0:	str	r0, [r1, #8]
    52a4:	beq	5278 <cd_vsf_integer_init+0x20>
    52a8:	mov	r0, r4
    52ac:	mov	r1, r6
    52b0:	bl	5568 <handle_name_attribute_for_type>
    52b4:	cmp	r0, #0
    52b8:	bne	5278 <cd_vsf_integer_init+0x20>
    52bc:	ldr	r1, [r4]
    52c0:	movw	r0, #0
    52c4:	movw	ip, #0
    52c8:	movw	r2, #0
    52cc:	movw	r3, #0
    52d0:	movw	r6, #0
    52d4:	movw	r5, #0
    52d8:	movt	r0, #0
    52dc:	movt	ip, #0
    52e0:	movt	r2, #0
    52e4:	movt	r3, #0
    52e8:	movt	r6, #0
    52ec:	movt	r5, #0
    52f0:	str	r0, [r1, #268]	; 0x10c
    52f4:	movw	r0, #0
    52f8:	str	ip, [r1, #96]	; 0x60
    52fc:	movt	r0, #0
    5300:	ldr	r1, [r4]
    5304:	vmov.32	d19[0], r0
    5308:	movw	r0, #0
    530c:	movt	r0, #0
    5310:	vmov.32	d18[0], r0
    5314:	movw	r0, #0
    5318:	vmov.32	d19[1], r5
    531c:	vmov.32	d18[1], r6
    5320:	mov	r5, #0
    5324:	movt	r0, #0
    5328:	vmov.32	d17[0], r0
    532c:	movw	r0, #0
    5330:	movt	r0, #0
    5334:	vmov.32	d16[0], r0
    5338:	vmov.32	d17[1], r3
    533c:	movw	r0, #0
    5340:	vmov.32	d16[1], r2
    5344:	movw	r2, #0
    5348:	movw	r3, #0
    534c:	movt	r0, #0
    5350:	movt	r2, #0
    5354:	movt	r3, #0
    5358:	str	r0, [r1, #260]	; 0x104
    535c:	str	r2, [r1, #88]	; 0x58
    5360:	movw	r2, #0
    5364:	str	r0, [r1, #292]	; 0x124
    5368:	vdup.32	q10, r0
    536c:	movt	r2, #0
    5370:	str	r2, [r1, #120]	; 0x78
    5374:	movw	r2, #0
    5378:	str	r0, [r1, #304]	; 0x130
    537c:	movt	r2, #0
    5380:	str	r2, [r1, #132]	; 0x84
    5384:	movw	r2, #0
    5388:	str	r0, [r1, #332]	; 0x14c
    538c:	movt	r2, #0
    5390:	str	r2, [r1, #160]	; 0xa0
    5394:	movw	r2, #0
    5398:	str	r0, [r1, #360]	; 0x168
    539c:	str	r0, [r1, #364]	; 0x16c
    53a0:	movt	r2, #0
    53a4:	str	r2, [r1, #188]	; 0xbc
    53a8:	str	r3, [r1, #192]	; 0xc0
    53ac:	str	r0, [r1, #392]	; 0x188
    53b0:	movw	r0, #0
    53b4:	movt	r0, #0
    53b8:	str	r0, [r1, #220]	; 0xdc
    53bc:	add	r0, r1, #224	; 0xe0
    53c0:	vst1.32	{d20-d21}, [r0]
    53c4:	add	r0, r1, #52	; 0x34
    53c8:	vst1.32	{d18-d19}, [r0]
    53cc:	add	r0, r1, #372	; 0x174
    53d0:	vst1.32	{d20-d21}, [r0]
    53d4:	add	r0, r1, #200	; 0xc8
    53d8:	movw	r1, #0
    53dc:	vst1.32	{d16-d17}, [r0]
    53e0:	movt	r1, #0
    53e4:	ldr	r0, [r4]
    53e8:	str	r1, [r0, #368]	; 0x170
    53ec:	movw	r1, #0
    53f0:	movt	r1, #0
    53f4:	str	r1, [r0, #196]	; 0xc4
    53f8:	movw	r1, #0
    53fc:	ldr	r0, [r4]
    5400:	movt	r1, #0
    5404:	str	r1, [r0, #388]	; 0x184
    5408:	str	ip, [r0, #216]	; 0xd8
    540c:	movw	r1, #0
    5410:	ldr	r0, [r4]
    5414:	movt	r1, #0
    5418:	str	r1, [r0, #36]	; 0x24
    541c:	mov	r0, r5
    5420:	pop	{r4, r5, r6, sl, fp, pc}

00005424 <handle_format_attribute_for_type>:
    5424:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
    5428:	add	fp, sp, #24
    542c:	ldr	r6, [r0]
    5430:	mov	r9, r0
    5434:	ldr	r7, [r6, #396]	; 0x18c
    5438:	ldr	r0, [r7, #48]	; 0x30
    543c:	cmp	r0, #0
    5440:	beq	5484 <handle_format_attribute_for_type+0x60>
    5444:	ldr	r0, [r1]
    5448:	cmp	r0, #0
    544c:	beq	54d4 <handle_format_attribute_for_type+0xb0>
    5450:	movw	r5, #0
    5454:	add	r4, r1, #4
    5458:	movt	r5, #0
    545c:	mov	r1, r5
    5460:	bl	0 <strcmp>
    5464:	cmp	r0, #0
    5468:	beq	54c8 <handle_format_attribute_for_type+0xa4>
    546c:	ldr	r0, [r4, #4]
    5470:	add	r1, r4, #8
    5474:	mov	r4, r1
    5478:	cmp	r0, #0
    547c:	bne	545c <handle_format_attribute_for_type+0x38>
    5480:	b	54d4 <handle_format_attribute_for_type+0xb0>
    5484:	ldr	r0, [r1]
    5488:	ldr	r8, [r6]
    548c:	cmp	r0, #0
    5490:	beq	5518 <handle_format_attribute_for_type+0xf4>
    5494:	movw	r5, #0
    5498:	add	r7, r1, #4
    549c:	movt	r5, #0
    54a0:	mov	r1, r5
    54a4:	bl	0 <strcmp>
    54a8:	cmp	r0, #0
    54ac:	beq	54e0 <handle_format_attribute_for_type+0xbc>
    54b0:	ldr	r0, [r7, #4]
    54b4:	add	r1, r7, #8
    54b8:	mov	r7, r1
    54bc:	cmp	r0, #0
    54c0:	bne	54a0 <handle_format_attribute_for_type+0x7c>
    54c4:	b	5518 <handle_format_attribute_for_type+0xf4>
    54c8:	ldr	r0, [r4]
    54cc:	cmp	r0, #0
    54d0:	bne	54ec <handle_format_attribute_for_type+0xc8>
    54d4:	ldr	r0, [r7, #44]	; 0x2c
    54d8:	str	r0, [r6, #44]	; 0x2c
    54dc:	b	5504 <handle_format_attribute_for_type+0xe0>
    54e0:	ldr	r0, [r7]
    54e4:	cmp	r0, #0
    54e8:	beq	5518 <handle_format_attribute_for_type+0xf4>
    54ec:	add	r1, r6, #44	; 0x2c
    54f0:	bl	0 <coda_format_from_string>
    54f4:	mov	r1, r0
    54f8:	mvn	r0, #0
    54fc:	cmp	r1, #0
    5500:	popne	{r4, r5, r6, r7, r8, r9, fp, pc}
    5504:	ldr	r0, [r9]
    5508:	mov	r1, #1
    550c:	str	r1, [r0, #48]	; 0x30
    5510:	mov	r0, #0
    5514:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
    5518:	cmn	r8, #1
    551c:	beq	553c <handle_format_attribute_for_type+0x118>
    5520:	movw	r0, #0
    5524:	movt	r0, #0
    5528:	ldr	r3, [r0, r8, lsl #2]
    552c:	ldrb	r0, [r3], #1
    5530:	cmp	r0, #32
    5534:	bne	552c <handle_format_attribute_for_type+0x108>
    5538:	b	5544 <handle_format_attribute_for_type+0x120>
    553c:	movw	r3, #0
    5540:	movt	r3, #0
    5544:	movw	r0, #65136	; 0xfe70
    5548:	movw	r1, #0
    554c:	movw	r2, #0
    5550:	movt	r0, #65535	; 0xffff
    5554:	movt	r1, #0
    5558:	movt	r2, #0
    555c:	bl	0 <coda_set_error>
    5560:	mvn	r0, #0
    5564:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}

00005568 <handle_name_attribute_for_type>:
    5568:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
    556c:	add	fp, sp, #24
    5570:	ldr	r6, [r0]
    5574:	mov	r4, r0
    5578:	ldr	r0, [r6, #396]	; 0x18c
    557c:	ldr	r0, [r0, #396]	; 0x18c
    5580:	cmp	r0, #0
    5584:	beq	55c8 <handle_name_attribute_for_type+0x60>
    5588:	ldr	r0, [r1]
    558c:	cmp	r0, #0
    5590:	beq	5634 <handle_name_attribute_for_type+0xcc>
    5594:	movw	r4, #0
    5598:	add	r5, r1, #4
    559c:	movt	r4, #0
    55a0:	mov	r1, r4
    55a4:	bl	0 <strcmp>
    55a8:	cmp	r0, #0
    55ac:	beq	560c <handle_name_attribute_for_type+0xa4>
    55b0:	ldr	r0, [r5, #4]
    55b4:	add	r1, r5, #8
    55b8:	mov	r5, r1
    55bc:	cmp	r0, #0
    55c0:	bne	55a0 <handle_name_attribute_for_type+0x38>
    55c4:	b	5634 <handle_name_attribute_for_type+0xcc>
    55c8:	ldr	r0, [r1]
    55cc:	ldr	r8, [r6]
    55d0:	cmp	r0, #0
    55d4:	beq	5680 <handle_name_attribute_for_type+0x118>
    55d8:	movw	r5, #0
    55dc:	add	r7, r1, #4
    55e0:	movt	r5, #0
    55e4:	mov	r1, r5
    55e8:	bl	0 <strcmp>
    55ec:	cmp	r0, #0
    55f0:	beq	563c <handle_name_attribute_for_type+0xd4>
    55f4:	ldr	r0, [r7, #4]
    55f8:	add	r1, r7, #8
    55fc:	mov	r7, r1
    5600:	cmp	r0, #0
    5604:	bne	55e4 <handle_name_attribute_for_type+0x7c>
    5608:	b	5680 <handle_name_attribute_for_type+0x118>
    560c:	ldr	r0, [r5]
    5610:	cmp	r0, #0
    5614:	beq	5634 <handle_name_attribute_for_type+0xcc>
    5618:	movw	r0, #65136	; 0xfe70
    561c:	movw	r1, #0
    5620:	movt	r0, #65535	; 0xffff
    5624:	movt	r1, #0
    5628:	bl	0 <coda_set_error>
    562c:	mvn	r0, #0
    5630:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
    5634:	mov	r0, #0
    5638:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
    563c:	ldr	r5, [r7]
    5640:	cmp	r5, #0
    5644:	beq	5680 <handle_name_attribute_for_type+0x118>
    5648:	ldr	r4, [r4, #20]
    564c:	mov	r0, r5
    5650:	mov	r1, r4
    5654:	bl	0 <strcmp>
    5658:	cmp	r0, #0
    565c:	beq	56d0 <handle_name_attribute_for_type+0x168>
    5660:	movw	r0, #65136	; 0xfe70
    5664:	movw	r1, #0
    5668:	mov	r2, r4
    566c:	movt	r0, #65535	; 0xffff
    5670:	movt	r1, #0
    5674:	bl	0 <coda_set_error>
    5678:	mvn	r0, #0
    567c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
    5680:	cmn	r8, #1
    5684:	beq	56a4 <handle_name_attribute_for_type+0x13c>
    5688:	movw	r0, #0
    568c:	movt	r0, #0
    5690:	ldr	r3, [r0, r8, lsl #2]
    5694:	ldrb	r0, [r3], #1
    5698:	cmp	r0, #32
    569c:	bne	5694 <handle_name_attribute_for_type+0x12c>
    56a0:	b	56ac <handle_name_attribute_for_type+0x144>
    56a4:	movw	r3, #0
    56a8:	movt	r3, #0
    56ac:	movw	r0, #65136	; 0xfe70
    56b0:	movw	r1, #0
    56b4:	movw	r2, #0
    56b8:	movt	r0, #65535	; 0xffff
    56bc:	movt	r1, #0
    56c0:	movt	r2, #0
    56c4:	bl	0 <coda_set_error>
    56c8:	mvn	r0, #0
    56cc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
    56d0:	ldr	r0, [r6, #8]
    56d4:	mov	r1, r5
    56d8:	bl	0 <coda_type_set_name>
    56dc:	mov	r1, r0
    56e0:	mvn	r0, #0
    56e4:	cmp	r1, #0
    56e8:	moveq	r0, #0
    56ec:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

000056f0 <type_set_description>:
    56f0:	ldr	r0, [r0]
    56f4:	ldr	r1, [r0, #12]
    56f8:	ldr	r0, [r0, #396]	; 0x18c
    56fc:	cmp	r1, #0
    5700:	ldr	r0, [r0, #8]
    5704:	movweq	r1, #0
    5708:	movteq	r1, #0
    570c:	b	0 <coda_type_set_description>

00005710 <cd_array_set_type>:
    5710:	ldr	r0, [r0]
    5714:	ldr	r1, [r0, #8]
    5718:	ldr	r0, [r0, #396]	; 0x18c
    571c:	ldr	r0, [r0, #8]
    5720:	b	0 <coda_type_array_set_base_type>

00005724 <optional_integer_constant_or_expression_init>:
    5724:	ldr	r0, [r0]
    5728:	movw	r1, #0
    572c:	movw	r3, #0
    5730:	mov	r2, #1
    5734:	movt	r1, #0
    5738:	movt	r3, #0
    573c:	str	r2, [r0, #32]
    5740:	str	r3, [r0, #36]	; 0x24
    5744:	str	r1, [r0, #40]	; 0x28
    5748:	mov	r0, #0
    574c:	bx	lr

00005750 <cd_array_add_dimension>:
    5750:	push	{r4, sl, fp, lr}
    5754:	add	fp, sp, #8
    5758:	mov	r4, r0
    575c:	ldr	r0, [r0]
    5760:	ldr	r1, [r0, #8]
    5764:	cmp	r1, #0
    5768:	bne	5778 <cd_array_add_dimension+0x28>
    576c:	ldr	r2, [r0, #4]
    5770:	cmp	r2, #0
    5774:	beq	57a8 <cd_array_add_dimension+0x58>
    5778:	ldr	r0, [r0, #396]	; 0x18c
    577c:	ldr	r0, [r0, #8]
    5780:	bl	0 <coda_type_array_add_variable_dimension>
    5784:	mov	r1, r0
    5788:	mvn	r0, #0
    578c:	cmp	r1, #0
    5790:	popne	{r4, sl, fp, pc}
    5794:	ldr	r0, [r4]
    5798:	mov	r1, #0
    579c:	str	r1, [r0, #8]
    57a0:	mov	r0, #0
    57a4:	pop	{r4, sl, fp, pc}
    57a8:	ldr	r1, [r0, #16]
    57ac:	ldr	r0, [r0, #396]	; 0x18c
    57b0:	ldr	r0, [r0, #8]
    57b4:	bl	0 <coda_type_array_add_fixed_dimension>
    57b8:	mov	r1, r0
    57bc:	mvn	r0, #0
    57c0:	cmp	r1, #0
    57c4:	moveq	r0, #0
    57c8:	pop	{r4, sl, fp, pc}

000057cc <cd_attribute_init>:
    57cc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    57d0:	add	fp, sp, #28
    57d4:	sub	sp, sp, #4
    57d8:	ldr	r5, [r1]
    57dc:	mov	r8, r1
    57e0:	mov	sl, r0
    57e4:	cmp	r5, #0
    57e8:	beq	5844 <cd_attribute_init+0x78>
    57ec:	movw	r7, #0
    57f0:	add	r4, r8, #4
    57f4:	mov	r0, r5
    57f8:	movt	r7, #0
    57fc:	mov	r1, r7
    5800:	bl	0 <strcmp>
    5804:	cmp	r0, #0
    5808:	beq	5824 <cd_attribute_init+0x58>
    580c:	ldr	r0, [r4, #4]
    5810:	add	r1, r4, #8
    5814:	mov	r4, r1
    5818:	cmp	r0, #0
    581c:	bne	57fc <cd_attribute_init+0x30>
    5820:	b	5844 <cd_attribute_init+0x78>
    5824:	ldr	r0, [r4]
    5828:	cmp	r0, #0
    582c:	beq	5844 <cd_attribute_init+0x78>
    5830:	movw	r0, #65136	; 0xfe70
    5834:	movw	r1, #0
    5838:	movt	r0, #65535	; 0xffff
    583c:	movt	r1, #0
    5840:	b	58cc <cd_attribute_init+0x100>
    5844:	ldr	r4, [sl]
    5848:	ldr	r0, [r4, #396]	; 0x18c
    584c:	ldr	r1, [r0, #48]	; 0x30
    5850:	cmp	r1, #0
    5854:	beq	5bd0 <cd_attribute_init+0x404>
    5858:	ldr	r9, [r0, #44]	; 0x2c
    585c:	cmp	r5, #0
    5860:	mov	r0, #1
    5864:	str	r9, [r4, #44]	; 0x2c
    5868:	str	r0, [r4, #48]	; 0x30
    586c:	beq	58a8 <cd_attribute_init+0xdc>
    5870:	movw	r7, #0
    5874:	add	r6, r8, #4
    5878:	mov	r0, r5
    587c:	movt	r7, #0
    5880:	mov	r1, r7
    5884:	bl	0 <strcmp>
    5888:	cmp	r0, #0
    588c:	beq	58b0 <cd_attribute_init+0xe4>
    5890:	ldr	r0, [r6, #4]
    5894:	add	r1, r6, #8
    5898:	mov	r6, r1
    589c:	cmp	r0, #0
    58a0:	bne	5880 <cd_attribute_init+0xb4>
    58a4:	b	58d4 <cd_attribute_init+0x108>
    58a8:	ldr	sl, [r4]
    58ac:	b	5964 <cd_attribute_init+0x198>
    58b0:	ldr	r0, [r6]
    58b4:	cmp	r0, #0
    58b8:	beq	58d4 <cd_attribute_init+0x108>
    58bc:	movw	r0, #65136	; 0xfe70
    58c0:	movw	r1, #0
    58c4:	movt	r0, #65535	; 0xffff
    58c8:	movt	r1, #0
    58cc:	bl	0 <coda_set_error>
    58d0:	b	59ac <cd_attribute_init+0x1e0>
    58d4:	str	sl, [sp]
    58d8:	ldr	sl, [r4]
    58dc:	movw	r7, #0
    58e0:	add	r6, r8, #4
    58e4:	mov	r0, r5
    58e8:	movt	r7, #0
    58ec:	mov	r1, r7
    58f0:	bl	0 <strcmp>
    58f4:	cmp	r0, #0
    58f8:	beq	5914 <cd_attribute_init+0x148>
    58fc:	ldr	r0, [r6, #4]
    5900:	add	r1, r6, #8
    5904:	mov	r6, r1
    5908:	cmp	r0, #0
    590c:	bne	58ec <cd_attribute_init+0x120>
    5910:	b	5964 <cd_attribute_init+0x198>
    5914:	ldr	r0, [r6]
    5918:	cmp	r0, #0
    591c:	beq	5964 <cd_attribute_init+0x198>
    5920:	add	r7, r8, #4
    5924:	ldr	r8, [sp]
    5928:	movw	r6, #0
    592c:	mov	sl, r0
    5930:	movt	r6, #0
    5934:	mov	r0, r5
    5938:	mov	r1, r6
    593c:	bl	0 <strcmp>
    5940:	cmp	r0, #0
    5944:	beq	59bc <cd_attribute_init+0x1f0>
    5948:	ldr	r5, [r7, #4]
    594c:	add	r0, r7, #8
    5950:	mov	r7, r0
    5954:	cmp	r5, #0
    5958:	bne	5934 <cd_attribute_init+0x168>
    595c:	mov	r5, #0
    5960:	b	59c0 <cd_attribute_init+0x1f4>
    5964:	cmn	sl, #1
    5968:	beq	5988 <cd_attribute_init+0x1bc>
    596c:	movw	r0, #0
    5970:	movt	r0, #0
    5974:	ldr	r3, [r0, sl, lsl #2]
    5978:	ldrb	r0, [r3], #1
    597c:	cmp	r0, #32
    5980:	bne	5978 <cd_attribute_init+0x1ac>
    5984:	b	5990 <cd_attribute_init+0x1c4>
    5988:	movw	r3, #0
    598c:	movt	r3, #0
    5990:	movw	r0, #65136	; 0xfe70
    5994:	movw	r1, #0
    5998:	movw	r2, #0
    599c:	movt	r0, #65535	; 0xffff
    59a0:	movt	r1, #0
    59a4:	movt	r2, #0
    59a8:	bl	0 <coda_set_error>
    59ac:	mvn	r6, #0
    59b0:	mov	r0, r6
    59b4:	sub	sp, fp, #28
    59b8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    59bc:	ldr	r5, [r7]
    59c0:	movw	r0, #0
    59c4:	cmp	r5, #0
    59c8:	movt	r0, #0
    59cc:	cmpeq	r9, #2
    59d0:	str	r0, [r4, #40]	; 0x28
    59d4:	mov	r4, sl
    59d8:	beq	59f0 <cd_attribute_init+0x224>
    59dc:	mov	r0, r4
    59e0:	bl	0 <coda_type_record_field_new>
    59e4:	ldr	r1, [r8]
    59e8:	str	r0, [r1, #8]
    59ec:	b	5a2c <cd_attribute_init+0x260>
    59f0:	mov	r0, r4
    59f4:	bl	0 <coda_element_name_from_xml_name>
    59f8:	mov	r1, #0
    59fc:	bl	0 <coda_identifier_from_name>
    5a00:	cmp	r0, #0
    5a04:	beq	59ac <cd_attribute_init+0x1e0>
    5a08:	mov	r5, r0
    5a0c:	bl	0 <coda_type_record_field_new>
    5a10:	ldr	r1, [r8]
    5a14:	str	r0, [r1, #8]
    5a18:	mov	r0, r5
    5a1c:	bl	0 <free>
    5a20:	ldr	r1, [r8]
    5a24:	mov	r5, r4
    5a28:	ldr	r0, [r1, #8]
    5a2c:	mvn	r6, #0
    5a30:	cmp	r0, #0
    5a34:	beq	59b0 <cd_attribute_init+0x1e4>
    5a38:	cmp	r5, #0
    5a3c:	beq	5a54 <cd_attribute_init+0x288>
    5a40:	mov	r1, r5
    5a44:	bl	0 <coda_type_record_field_set_real_name>
    5a48:	cmp	r0, #0
    5a4c:	bne	59b0 <cd_attribute_init+0x1e4>
    5a50:	ldr	r1, [r8]
    5a54:	movw	r4, #0
    5a58:	movw	r2, #0
    5a5c:	movw	r3, #0
    5a60:	movw	r5, #0
    5a64:	movw	r0, #0
    5a68:	movw	r7, #0
    5a6c:	movw	r6, #0
    5a70:	movt	r4, #0
    5a74:	movt	r2, #0
    5a78:	movt	r3, #0
    5a7c:	movt	r5, #0
    5a80:	movt	r0, #0
    5a84:	movt	r7, #0
    5a88:	movt	r6, #0
    5a8c:	vmov.32	d17[0], r4
    5a90:	movw	r4, #0
    5a94:	str	r0, [r1, #260]	; 0x104
    5a98:	vdup.32	q10, r0
    5a9c:	movt	r4, #0
    5aa0:	vmov.32	d16[0], r4
    5aa4:	movw	r4, #0
    5aa8:	vmov.32	d17[1], r6
    5aac:	vmov.32	d16[1], r7
    5ab0:	mov	r6, #0
    5ab4:	movt	r4, #0
    5ab8:	vmov.32	d19[0], r4
    5abc:	vmov.32	d18[0], r5
    5ac0:	vmov.32	d19[1], r3
    5ac4:	vmov.32	d18[1], r2
    5ac8:	movw	r2, #0
    5acc:	movw	r3, #0
    5ad0:	movt	r2, #0
    5ad4:	movt	r3, #0
    5ad8:	str	r2, [r1, #88]	; 0x58
    5adc:	movw	r2, #0
    5ae0:	str	r0, [r1, #292]	; 0x124
    5ae4:	movt	r2, #0
    5ae8:	str	r2, [r1, #120]	; 0x78
    5aec:	movw	r2, #0
    5af0:	str	r0, [r1, #304]	; 0x130
    5af4:	movt	r2, #0
    5af8:	str	r2, [r1, #132]	; 0x84
    5afc:	movw	r2, #0
    5b00:	str	r0, [r1, #332]	; 0x14c
    5b04:	movt	r2, #0
    5b08:	str	r2, [r1, #160]	; 0xa0
    5b0c:	movw	r2, #0
    5b10:	str	r0, [r1, #360]	; 0x168
    5b14:	str	r0, [r1, #364]	; 0x16c
    5b18:	movt	r2, #0
    5b1c:	str	r2, [r1, #188]	; 0xbc
    5b20:	str	r3, [r1, #192]	; 0xc0
    5b24:	str	r0, [r1, #392]	; 0x188
    5b28:	movw	r0, #0
    5b2c:	movw	r2, #0
    5b30:	movt	r0, #0
    5b34:	movt	r2, #0
    5b38:	str	r0, [r1, #220]	; 0xdc
    5b3c:	add	r0, r1, #224	; 0xe0
    5b40:	vst1.32	{d20-d21}, [r0]
    5b44:	add	r0, r1, #372	; 0x174
    5b48:	vst1.32	{d20-d21}, [r0]
    5b4c:	add	r0, r1, #52	; 0x34
    5b50:	vst1.32	{d16-d17}, [r0]
    5b54:	add	r0, r1, #200	; 0xc8
    5b58:	movw	r1, #0
    5b5c:	vst1.32	{d18-d19}, [r0]
    5b60:	movt	r1, #0
    5b64:	ldr	r0, [r8]
    5b68:	str	r1, [r0, #296]	; 0x128
    5b6c:	movw	r1, #0
    5b70:	movt	r1, #0
    5b74:	str	r1, [r0, #124]	; 0x7c
    5b78:	ldr	r0, [r8]
    5b7c:	str	r2, [r0, #340]	; 0x154
    5b80:	str	r1, [r0, #168]	; 0xa8
    5b84:	movw	r1, #0
    5b88:	ldr	r0, [r8]
    5b8c:	movt	r1, #0
    5b90:	str	r1, [r0, #244]	; 0xf4
    5b94:	movw	r1, #0
    5b98:	movt	r1, #0
    5b9c:	str	r1, [r0, #72]	; 0x48
    5ba0:	movw	r1, #0
    5ba4:	ldr	r0, [r8]
    5ba8:	movt	r1, #0
    5bac:	str	r1, [r0, #288]	; 0x120
    5bb0:	movw	r1, #0
    5bb4:	movt	r1, #0
    5bb8:	str	r1, [r0, #116]	; 0x74
    5bbc:	movw	r1, #0
    5bc0:	ldr	r0, [r8]
    5bc4:	movt	r1, #0
    5bc8:	str	r1, [r0, #36]	; 0x24
    5bcc:	b	59b0 <cd_attribute_init+0x1e4>
    5bd0:	movw	r0, #0
    5bd4:	movw	r1, #0
    5bd8:	movw	r3, #0
    5bdc:	movw	r2, #1439	; 0x59f
    5be0:	movt	r0, #0
    5be4:	movt	r1, #0
    5be8:	movt	r3, #0
    5bec:	bl	0 <__assert_fail>

00005bf0 <type_add_attribute>:
    5bf0:	push	{r4, sl, fp, lr}
    5bf4:	add	fp, sp, #8
    5bf8:	mov	r4, r0
    5bfc:	ldr	r0, [r0]
    5c00:	ldr	r1, [r0, #8]
    5c04:	ldr	r0, [r0, #396]	; 0x18c
    5c08:	ldr	r0, [r0, #8]
    5c0c:	bl	0 <coda_type_add_attribute>
    5c10:	mov	r1, r0
    5c14:	mvn	r0, #0
    5c18:	cmp	r1, #0
    5c1c:	popne	{r4, sl, fp, pc}
    5c20:	ldr	r1, [r4]
    5c24:	mov	r0, #0
    5c28:	str	r0, [r1, #8]
    5c2c:	pop	{r4, sl, fp, pc}

00005c30 <cd_array_finalise>:
    5c30:	ldr	r0, [r0]
    5c34:	ldr	r0, [r0, #8]
    5c38:	b	0 <coda_type_array_validate>

00005c3c <optional_integer_constant_or_expression_finalise>:
    5c3c:	push	{r4, r5, r6, sl, fp, lr}
    5c40:	add	fp, sp, #16
    5c44:	sub	sp, sp, #8
    5c48:	mov	r4, r0
    5c4c:	ldr	r0, [r0]
    5c50:	ldr	r5, [r0, #12]
    5c54:	cmp	r5, #0
    5c58:	beq	5cb4 <optional_integer_constant_or_expression_finalise+0x78>
    5c5c:	mov	r0, r5
    5c60:	bl	0 <strlen>
    5c64:	cmp	r0, #1
    5c68:	blt	5ca0 <optional_integer_constant_or_expression_finalise+0x64>
    5c6c:	movw	r3, #19
    5c70:	mov	r1, #0
    5c74:	mov	r2, #1
    5c78:	movt	r3, #128	; 0x80
    5c7c:	ldrb	r6, [r5, r1]
    5c80:	sub	r6, r6, #9
    5c84:	cmp	r6, #23
    5c88:	bhi	5ccc <optional_integer_constant_or_expression_finalise+0x90>
    5c8c:	tst	r3, r2, lsl r6
    5c90:	beq	5ccc <optional_integer_constant_or_expression_finalise+0x90>
    5c94:	add	r1, r1, #1
    5c98:	cmp	r0, r1
    5c9c:	bne	5c7c <optional_integer_constant_or_expression_finalise+0x40>
    5ca0:	mov	r0, r5
    5ca4:	bl	0 <free>
    5ca8:	ldr	r0, [r4]
    5cac:	mov	r1, #0
    5cb0:	str	r1, [r0, #12]
    5cb4:	mov	r1, #1
    5cb8:	str	r1, [r0, #4]
    5cbc:	mov	r5, #0
    5cc0:	mov	r0, r5
    5cc4:	sub	sp, fp, #16
    5cc8:	pop	{r4, r5, r6, sl, fp, pc}
    5ccc:	mov	r1, sp
    5cd0:	mov	r0, r5
    5cd4:	bl	0 <coda_expression_from_string>
    5cd8:	mvn	r5, #0
    5cdc:	cmp	r0, #0
    5ce0:	bne	5cc0 <optional_integer_constant_or_expression_finalise+0x84>
    5ce4:	ldr	r0, [r4]
    5ce8:	ldr	r0, [r0, #12]
    5cec:	bl	0 <free>
    5cf0:	ldr	r0, [r4]
    5cf4:	ldr	r2, [sp]
    5cf8:	mov	r1, #0
    5cfc:	str	r2, [r0, #8]
    5d00:	str	r1, [r0, #12]
    5d04:	add	r1, sp, #4
    5d08:	mov	r0, r2
    5d0c:	bl	0 <coda_expression_get_type>
    5d10:	cmp	r0, #0
    5d14:	beq	5d24 <optional_integer_constant_or_expression_finalise+0xe8>
    5d18:	ldr	r0, [sp]
    5d1c:	bl	0 <coda_expression_delete>
    5d20:	b	5cc0 <optional_integer_constant_or_expression_finalise+0x84>
    5d24:	ldr	r0, [sp, #4]
    5d28:	cmp	r0, #1
    5d2c:	bne	5d74 <optional_integer_constant_or_expression_finalise+0x138>
    5d30:	ldr	r0, [sp]
    5d34:	bl	0 <coda_expression_is_constant>
    5d38:	cmp	r0, #0
    5d3c:	beq	5cbc <optional_integer_constant_or_expression_finalise+0x80>
    5d40:	ldr	r1, [r4]
    5d44:	ldr	r0, [sp]
    5d48:	mov	r6, #0
    5d4c:	add	r2, r1, #16
    5d50:	mov	r1, #0
    5d54:	bl	0 <coda_expression_eval_integer>
    5d58:	cmp	r0, #0
    5d5c:	bne	5cc0 <optional_integer_constant_or_expression_finalise+0x84>
    5d60:	ldr	r0, [r4]
    5d64:	str	r6, [r0, #8]
    5d68:	ldr	r0, [sp]
    5d6c:	bl	0 <coda_expression_delete>
    5d70:	b	5cbc <optional_integer_constant_or_expression_finalise+0x80>
    5d74:	movw	r0, #65136	; 0xfe70
    5d78:	movw	r1, #0
    5d7c:	movt	r0, #65535	; 0xffff
    5d80:	movt	r1, #0
    5d84:	bl	0 <coda_set_error>
    5d88:	b	5cc0 <optional_integer_constant_or_expression_finalise+0x84>

00005d8c <cd_field_set_type>:
    5d8c:	ldr	r0, [r0]
    5d90:	ldr	r1, [r0, #8]
    5d94:	ldr	r0, [r0, #396]	; 0x18c
    5d98:	ldr	r0, [r0, #8]
    5d9c:	b	0 <coda_type_record_field_set_type>

00005da0 <dummy_init>:
    5da0:	mov	r0, #0
    5da4:	bx	lr

00005da8 <cd_field_set_hidden>:
    5da8:	ldr	r0, [r0]
    5dac:	ldr	r0, [r0, #396]	; 0x18c
    5db0:	ldr	r0, [r0, #8]
    5db4:	b	0 <coda_type_record_field_set_hidden>

00005db8 <cd_field_set_optional>:
    5db8:	ldr	r0, [r0]
    5dbc:	ldr	r0, [r0, #396]	; 0x18c
    5dc0:	ldr	r0, [r0, #8]
    5dc4:	b	0 <coda_type_record_field_set_optional>

00005dc8 <bool_expression_init>:
    5dc8:	ldr	r0, [r0]
    5dcc:	movw	r1, #0
    5dd0:	movw	r3, #0
    5dd4:	mov	r2, #1
    5dd8:	movt	r1, #0
    5ddc:	movt	r3, #0
    5de0:	str	r2, [r0, #32]
    5de4:	str	r3, [r0, #36]	; 0x24
    5de8:	str	r1, [r0, #40]	; 0x28
    5dec:	mov	r0, #0
    5df0:	bx	lr

00005df4 <cd_field_set_available>:
    5df4:	push	{r4, sl, fp, lr}
    5df8:	add	fp, sp, #8
    5dfc:	mov	r4, r0
    5e00:	ldr	r0, [r0]
    5e04:	ldr	r1, [r0, #8]
    5e08:	ldr	r0, [r0, #396]	; 0x18c
    5e0c:	ldr	r0, [r0, #8]
    5e10:	bl	0 <coda_type_record_field_set_available_expression>
    5e14:	mov	r1, r0
    5e18:	mvn	r0, #0
    5e1c:	cmp	r1, #0
    5e20:	popne	{r4, sl, fp, pc}
    5e24:	ldr	r1, [r4]
    5e28:	mov	r0, #0
    5e2c:	str	r0, [r1, #8]
    5e30:	pop	{r4, sl, fp, pc}

00005e34 <cd_attribute_set_fixed_value>:
    5e34:	push	{r4, r5, r6, sl, fp, lr}
    5e38:	add	fp, sp, #16
    5e3c:	sub	sp, sp, #8
    5e40:	mov	r5, r0
    5e44:	mov	r0, #0
    5e48:	str	r0, [sp, #4]
    5e4c:	ldr	r0, [r5]
    5e50:	ldr	r0, [r0, #12]
    5e54:	bl	60f0 <decode_escaped_string>
    5e58:	cmn	r0, #1
    5e5c:	ble	5ea4 <cd_attribute_set_fixed_value+0x70>
    5e60:	ldr	r0, [r5]
    5e64:	add	r1, sp, #4
    5e68:	ldr	r0, [r0, #396]	; 0x18c
    5e6c:	ldr	r0, [r0, #8]
    5e70:	bl	0 <coda_type_record_field_get_type>
    5e74:	mvn	r4, #0
    5e78:	cmp	r0, #0
    5e7c:	bne	5ebc <cd_attribute_set_fixed_value+0x88>
    5e80:	ldr	r0, [sp, #4]
    5e84:	cmp	r0, #0
    5e88:	beq	5ec8 <cd_attribute_set_fixed_value+0x94>
    5e8c:	movw	r0, #65136	; 0xfe70
    5e90:	movw	r1, #0
    5e94:	movt	r0, #65535	; 0xffff
    5e98:	movt	r1, #0
    5e9c:	bl	0 <coda_set_error>
    5ea0:	b	5ebc <cd_attribute_set_fixed_value+0x88>
    5ea4:	movw	r0, #65136	; 0xfe70
    5ea8:	movw	r1, #0
    5eac:	movt	r0, #65535	; 0xffff
    5eb0:	movt	r1, #0
    5eb4:	bl	0 <coda_set_error>
    5eb8:	mvn	r4, #0
    5ebc:	mov	r0, r4
    5ec0:	sub	sp, fp, #16
    5ec4:	pop	{r4, r5, r6, sl, fp, pc}
    5ec8:	ldr	r0, [r5]
    5ecc:	ldr	r0, [r0, #396]	; 0x18c
    5ed0:	ldr	r0, [r0, #44]	; 0x2c
    5ed4:	bl	0 <coda_type_text_new>
    5ed8:	cmp	r0, #0
    5edc:	str	r0, [sp, #4]
    5ee0:	beq	5ebc <cd_attribute_set_fixed_value+0x88>
    5ee4:	mov	r1, r0
    5ee8:	ldr	r0, [r5]
    5eec:	ldr	r0, [r0, #396]	; 0x18c
    5ef0:	ldr	r0, [r0, #8]
    5ef4:	bl	0 <coda_type_record_field_set_type>
    5ef8:	mov	r6, r0
    5efc:	ldr	r0, [sp, #4]
    5f00:	bl	0 <coda_type_release>
    5f04:	cmp	r6, #0
    5f08:	bne	5ebc <cd_attribute_set_fixed_value+0x88>
    5f0c:	ldr	r0, [r5]
    5f10:	ldr	r1, [r0, #12]
    5f14:	ldr	r0, [sp, #4]
    5f18:	bl	0 <coda_type_text_set_fixed_value>
    5f1c:	cmp	r0, #0
    5f20:	bne	5ebc <cd_attribute_set_fixed_value+0x88>
    5f24:	ldr	r0, [r5]
    5f28:	ldr	r4, [sp, #4]
    5f2c:	ldr	r0, [r0, #12]
    5f30:	bl	0 <strlen>
    5f34:	mov	r2, r0
    5f38:	mov	r0, r4
    5f3c:	mov	r3, #0
    5f40:	bl	0 <coda_type_set_byte_size>
    5f44:	cmp	r0, #0
    5f48:	mov	r4, r0
    5f4c:	mvnne	r4, #0
    5f50:	b	5ebc <cd_attribute_set_fixed_value+0x88>

00005f54 <cd_attribute_finalise>:
    5f54:	push	{r4, r5, r6, sl, fp, lr}
    5f58:	add	fp, sp, #16
    5f5c:	sub	sp, sp, #8
    5f60:	mov	r4, r0
    5f64:	mov	r0, #0
    5f68:	add	r1, sp, #4
    5f6c:	str	r0, [sp, #4]
    5f70:	ldr	r0, [r4]
    5f74:	ldr	r0, [r0, #8]
    5f78:	bl	0 <coda_type_record_field_get_type>
    5f7c:	mvn	r5, #0
    5f80:	cmp	r0, #0
    5f84:	bne	5fa4 <cd_attribute_finalise+0x50>
    5f88:	ldr	r0, [sp, #4]
    5f8c:	cmp	r0, #0
    5f90:	beq	5fb0 <cd_attribute_finalise+0x5c>
    5f94:	ldr	r0, [r4]
    5f98:	ldr	r0, [r0, #8]
    5f9c:	bl	0 <coda_type_record_field_validate>
    5fa0:	mov	r5, r0
    5fa4:	mov	r0, r5
    5fa8:	sub	sp, fp, #16
    5fac:	pop	{r4, r5, r6, sl, fp, pc}
    5fb0:	ldr	r0, [r4]
    5fb4:	ldr	r0, [r0, #44]	; 0x2c
    5fb8:	bl	0 <coda_type_text_new>
    5fbc:	cmp	r0, #0
    5fc0:	str	r0, [sp, #4]
    5fc4:	beq	5fa4 <cd_attribute_finalise+0x50>
    5fc8:	mov	r1, r0
    5fcc:	ldr	r0, [r4]
    5fd0:	ldr	r0, [r0, #8]
    5fd4:	bl	0 <coda_type_record_field_set_type>
    5fd8:	mov	r6, r0
    5fdc:	ldr	r0, [sp, #4]
    5fe0:	bl	0 <coda_type_release>
    5fe4:	cmp	r6, #0
    5fe8:	bne	5fa4 <cd_attribute_finalise+0x50>
    5fec:	b	5f94 <cd_attribute_finalise+0x40>

00005ff0 <bool_expression_finalise>:
    5ff0:	push	{r4, r5, r6, sl, fp, lr}
    5ff4:	add	fp, sp, #16
    5ff8:	sub	sp, sp, #8
    5ffc:	mov	r6, r0
    6000:	ldr	r0, [r0]
    6004:	ldr	r5, [r0, #12]
    6008:	cmp	r5, #0
    600c:	beq	6068 <bool_expression_finalise+0x78>
    6010:	mov	r0, r5
    6014:	bl	0 <strlen>
    6018:	cmp	r0, #1
    601c:	blt	6054 <bool_expression_finalise+0x64>
    6020:	movw	r3, #19
    6024:	mov	r1, #0
    6028:	mov	r2, #1
    602c:	movt	r3, #128	; 0x80
    6030:	ldrb	r4, [r5, r1]
    6034:	sub	r4, r4, #9
    6038:	cmp	r4, #23
    603c:	bhi	608c <bool_expression_finalise+0x9c>
    6040:	tst	r3, r2, lsl r4
    6044:	beq	608c <bool_expression_finalise+0x9c>
    6048:	add	r1, r1, #1
    604c:	cmp	r0, r1
    6050:	bne	6030 <bool_expression_finalise+0x40>
    6054:	mov	r0, r5
    6058:	bl	0 <free>
    605c:	ldr	r0, [r6]
    6060:	mov	r1, #0
    6064:	str	r1, [r0, #12]
    6068:	movw	r0, #65136	; 0xfe70
    606c:	movw	r1, #0
    6070:	movt	r0, #65535	; 0xffff
    6074:	movt	r1, #0
    6078:	bl	0 <coda_set_error>
    607c:	mvn	r5, #0
    6080:	mov	r0, r5
    6084:	sub	sp, fp, #16
    6088:	pop	{r4, r5, r6, sl, fp, pc}
    608c:	mov	r1, sp
    6090:	mov	r0, r5
    6094:	bl	0 <coda_expression_from_string>
    6098:	cmp	r0, #0
    609c:	bne	607c <bool_expression_finalise+0x8c>
    60a0:	ldr	r0, [r6]
    60a4:	ldr	r0, [r0, #12]
    60a8:	bl	0 <free>
    60ac:	ldr	r0, [r6]
    60b0:	ldr	r4, [sp]
    60b4:	mov	r5, #0
    60b8:	add	r1, sp, #4
    60bc:	strd	r4, [r0, #8]
    60c0:	mov	r0, r4
    60c4:	bl	0 <coda_expression_get_type>
    60c8:	cmp	r0, #0
    60cc:	bne	607c <bool_expression_finalise+0x8c>
    60d0:	ldr	r0, [sp, #4]
    60d4:	cmp	r0, #0
    60d8:	beq	6080 <bool_expression_finalise+0x90>
    60dc:	movw	r0, #65136	; 0xfe70
    60e0:	movw	r1, #0
    60e4:	movt	r0, #65535	; 0xffff
    60e8:	movt	r1, #0
    60ec:	b	6078 <bool_expression_finalise+0x88>

000060f0 <decode_escaped_string>:
    60f0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    60f4:	add	fp, sp, #28
    60f8:	cmp	r0, #0
    60fc:	beq	6280 <decode_escaped_string+0x190>
    6100:	mov	r3, #0
    6104:	mov	r8, #10
    6108:	mov	r9, #13
    610c:	mov	sl, #9
    6110:	mov	r2, #11
    6114:	mov	r1, #0
    6118:	b	612c <decode_escaped_string+0x3c>
    611c:	mov	r3, #92	; 0x5c
    6120:	strb	r3, [r0, r1]
    6124:	add	r3, r4, #1
    6128:	add	r1, r1, #1
    612c:	ldrb	r5, [r0, r3]
    6130:	cmp	r5, #92	; 0x5c
    6134:	beq	614c <decode_escaped_string+0x5c>
    6138:	cmp	r5, #0
    613c:	beq	6270 <decode_escaped_string+0x180>
    6140:	strb	r5, [r0, r1]
    6144:	mov	r4, r3
    6148:	b	6124 <decode_escaped_string+0x34>
    614c:	add	r4, r3, #1
    6150:	ldrb	r5, [r0, r4]
    6154:	sub	r6, r5, #92	; 0x5c
    6158:	cmp	r6, #26
    615c:	bhi	61dc <decode_escaped_string+0xec>
    6160:	add	r7, pc, #0
    6164:	ldr	pc, [r7, r6, lsl #2]
    6168:	.word	0x0000611c
    616c:	.word	0x000061dc
    6170:	.word	0x000061dc
    6174:	.word	0x000061dc
    6178:	.word	0x000061dc
    617c:	.word	0x000061d4
    6180:	.word	0x00006238
    6184:	.word	0x000061dc
    6188:	.word	0x000061dc
    618c:	.word	0x00006240
    6190:	.word	0x00006248
    6194:	.word	0x000061dc
    6198:	.word	0x000061dc
    619c:	.word	0x000061dc
    61a0:	.word	0x000061dc
    61a4:	.word	0x000061dc
    61a8:	.word	0x000061dc
    61ac:	.word	0x000061dc
    61b0:	.word	0x00006250
    61b4:	.word	0x000061dc
    61b8:	.word	0x000061dc
    61bc:	.word	0x000061dc
    61c0:	.word	0x00006258
    61c4:	.word	0x000061dc
    61c8:	.word	0x00006260
    61cc:	.word	0x000061dc
    61d0:	.word	0x00006268
    61d4:	mov	r3, #7
    61d8:	b	6120 <decode_escaped_string+0x30>
    61dc:	sub	lr, r5, #48	; 0x30
    61e0:	uxtb	r7, lr
    61e4:	cmp	r7, #9
    61e8:	bhi	628c <decode_escaped_string+0x19c>
    61ec:	strb	lr, [r0, r1]
    61f0:	add	ip, r3, #2
    61f4:	ldrb	r5, [r0, ip]
    61f8:	sub	r5, r5, #48	; 0x30
    61fc:	uxtb	r6, r5
    6200:	cmp	r6, #9
    6204:	bhi	6124 <decode_escaped_string+0x34>
    6208:	add	r5, r5, lr, lsl #3
    620c:	add	r3, r3, #3
    6210:	mov	r4, ip
    6214:	strb	r5, [r0, r1]
    6218:	ldrb	r7, [r0, r3]
    621c:	sub	r6, r7, #48	; 0x30
    6220:	uxtb	r7, r6
    6224:	cmp	r7, #9
    6228:	bhi	6124 <decode_escaped_string+0x34>
    622c:	add	r7, r6, r5, lsl #3
    6230:	strb	r7, [r0, r1]
    6234:	b	6144 <decode_escaped_string+0x54>
    6238:	mov	r3, #8
    623c:	b	6120 <decode_escaped_string+0x30>
    6240:	mov	r3, #27
    6244:	b	6120 <decode_escaped_string+0x30>
    6248:	mov	r3, #12
    624c:	b	6120 <decode_escaped_string+0x30>
    6250:	strb	r8, [r0, r1]
    6254:	b	6124 <decode_escaped_string+0x34>
    6258:	strb	r9, [r0, r1]
    625c:	b	6124 <decode_escaped_string+0x34>
    6260:	strb	sl, [r0, r1]
    6264:	b	6124 <decode_escaped_string+0x34>
    6268:	strb	r2, [r0, r1]
    626c:	b	6124 <decode_escaped_string+0x34>
    6270:	mov	r2, #0
    6274:	strb	r2, [r0, r1]
    6278:	mov	r0, r1
    627c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6280:	mov	r1, #0
    6284:	mov	r0, r1
    6288:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    628c:	mvn	r1, #0
    6290:	mov	r0, r1
    6294:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

00006298 <cd_complex_set_type>:
    6298:	ldr	r0, [r0]
    629c:	ldr	r1, [r0, #8]
    62a0:	ldr	r0, [r0, #396]	; 0x18c
    62a4:	ldr	r0, [r0, #8]
    62a8:	b	0 <coda_type_complex_set_type>

000062ac <cd_complex_finalise>:
    62ac:	ldr	r0, [r0]
    62b0:	ldr	r0, [r0, #8]
    62b4:	b	0 <coda_type_complex_validate>

000062b8 <cd_float_set_unit>:
    62b8:	ldr	r0, [r0]
    62bc:	ldr	r1, [r0, #12]
    62c0:	ldr	r0, [r0, #396]	; 0x18c
    62c4:	cmp	r1, #0
    62c8:	ldr	r0, [r0, #8]
    62cc:	movweq	r1, #0
    62d0:	movteq	r1, #0
    62d4:	b	0 <coda_type_number_set_unit>

000062d8 <cd_native_type_init>:
    62d8:	ldr	r0, [r0]
    62dc:	movw	r1, #0
    62e0:	mov	r2, #1
    62e4:	movt	r1, #0
    62e8:	str	r2, [r0, #32]
    62ec:	str	r1, [r0, #36]	; 0x24
    62f0:	mov	r0, #0
    62f4:	bx	lr

000062f8 <cd_float_set_read_type>:
    62f8:	ldr	r0, [r0]
    62fc:	ldr	r1, [r0, #16]
    6300:	ldr	r0, [r0, #396]	; 0x18c
    6304:	ldr	r0, [r0, #8]
    6308:	b	0 <coda_type_set_read_type>

0000630c <cd_conversion_init>:
    630c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6310:	add	fp, sp, #28
    6314:	sub	sp, sp, #36	; 0x24
    6318:	mov	r8, r0
    631c:	mov	r0, #0
    6320:	mov	sl, r1
    6324:	str	r0, [sp, #12]
    6328:	str	r0, [sp, #8]
    632c:	bl	0 <coda_NaN>
    6330:	vstr	d0, [sp]
    6334:	ldr	r0, [r8]
    6338:	ldr	r7, [sl]
    633c:	ldr	r6, [r0]
    6340:	cmp	r7, #0
    6344:	beq	63c4 <cd_conversion_init+0xb8>
    6348:	movw	r4, #0
    634c:	add	r5, sl, #4
    6350:	mov	r0, r7
    6354:	movt	r4, #0
    6358:	mov	r1, r4
    635c:	bl	0 <strcmp>
    6360:	cmp	r0, #0
    6364:	beq	6380 <cd_conversion_init+0x74>
    6368:	ldr	r0, [r5, #4]
    636c:	add	r1, r5, #8
    6370:	mov	r5, r1
    6374:	cmp	r0, #0
    6378:	bne	6358 <cd_conversion_init+0x4c>
    637c:	b	63c4 <cd_conversion_init+0xb8>
    6380:	ldr	r9, [r5]
    6384:	cmp	r9, #0
    6388:	beq	63c4 <cd_conversion_init+0xb8>
    638c:	movw	r4, #0
    6390:	add	r5, sl, #4
    6394:	movt	r4, #0
    6398:	mov	r0, r7
    639c:	mov	r1, r4
    63a0:	bl	0 <strcmp>
    63a4:	cmp	r0, #0
    63a8:	beq	6418 <cd_conversion_init+0x10c>
    63ac:	ldr	r7, [r5, #4]
    63b0:	add	r0, r5, #8
    63b4:	mov	r5, r0
    63b8:	cmp	r7, #0
    63bc:	bne	6398 <cd_conversion_init+0x8c>
    63c0:	b	64b0 <cd_conversion_init+0x1a4>
    63c4:	cmn	r6, #1
    63c8:	beq	63e8 <cd_conversion_init+0xdc>
    63cc:	movw	r0, #0
    63d0:	movt	r0, #0
    63d4:	ldr	r3, [r0, r6, lsl #2]
    63d8:	ldrb	r0, [r3], #1
    63dc:	cmp	r0, #32
    63e0:	bne	63d8 <cd_conversion_init+0xcc>
    63e4:	b	63f0 <cd_conversion_init+0xe4>
    63e8:	movw	r3, #0
    63ec:	movt	r3, #0
    63f0:	movw	r0, #65136	; 0xfe70
    63f4:	movw	r1, #0
    63f8:	movw	r2, #0
    63fc:	movt	r0, #65535	; 0xffff
    6400:	movt	r1, #0
    6404:	movt	r2, #0
    6408:	bl	0 <coda_set_error>
    640c:	mvn	r0, #0
    6410:	sub	sp, fp, #28
    6414:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6418:	ldr	r7, [r5]
    641c:	cmp	r7, #0
    6420:	beq	64b0 <cd_conversion_init+0x1a4>
    6424:	mov	r0, r9
    6428:	bl	0 <strlen>
    642c:	mov	r1, r0
    6430:	add	r2, sp, #24
    6434:	mov	r0, r9
    6438:	mov	r3, #1
    643c:	bl	0 <coda_ascii_parse_double>
    6440:	cmn	r0, #1
    6444:	ble	64f8 <cd_conversion_init+0x1ec>
    6448:	mov	r0, r7
    644c:	bl	0 <strlen>
    6450:	mov	r1, r0
    6454:	add	r2, sp, #16
    6458:	mov	r0, r7
    645c:	mov	r3, #1
    6460:	bl	0 <coda_ascii_parse_double>
    6464:	cmn	r0, #1
    6468:	ble	6510 <cd_conversion_init+0x204>
    646c:	ldr	r6, [sl]
    6470:	cmp	r6, #0
    6474:	beq	65d0 <cd_conversion_init+0x2c4>
    6478:	movw	r4, #0
    647c:	add	r5, sl, #4
    6480:	mov	r0, r6
    6484:	movt	r4, #0
    6488:	mov	r1, r4
    648c:	bl	0 <strcmp>
    6490:	cmp	r0, #0
    6494:	beq	652c <cd_conversion_init+0x220>
    6498:	ldr	r0, [r5, #4]
    649c:	add	r1, r5, #8
    64a0:	mov	r5, r1
    64a4:	cmp	r0, #0
    64a8:	bne	6488 <cd_conversion_init+0x17c>
    64ac:	b	6560 <cd_conversion_init+0x254>
    64b0:	cmn	r6, #1
    64b4:	beq	64d4 <cd_conversion_init+0x1c8>
    64b8:	movw	r0, #0
    64bc:	movt	r0, #0
    64c0:	ldr	r3, [r0, r6, lsl #2]
    64c4:	ldrb	r0, [r3], #1
    64c8:	cmp	r0, #32
    64cc:	bne	64c4 <cd_conversion_init+0x1b8>
    64d0:	b	64dc <cd_conversion_init+0x1d0>
    64d4:	movw	r3, #0
    64d8:	movt	r3, #0
    64dc:	movw	r0, #65136	; 0xfe70
    64e0:	movw	r1, #0
    64e4:	movw	r2, #0
    64e8:	movt	r0, #65535	; 0xffff
    64ec:	movt	r1, #0
    64f0:	movt	r2, #0
    64f4:	b	6408 <cd_conversion_init+0xfc>
    64f8:	movw	r0, #65136	; 0xfe70
    64fc:	movw	r1, #0
    6500:	mov	r2, r9
    6504:	movt	r0, #65535	; 0xffff
    6508:	movt	r1, #0
    650c:	b	6524 <cd_conversion_init+0x218>
    6510:	movw	r0, #65136	; 0xfe70
    6514:	movw	r1, #0
    6518:	movt	r0, #65535	; 0xffff
    651c:	movt	r1, #0
    6520:	mov	r2, r7
    6524:	bl	0 <coda_set_error>
    6528:	b	640c <cd_conversion_init+0x100>
    652c:	ldr	r7, [r5]
    6530:	cmp	r7, #0
    6534:	beq	6560 <cd_conversion_init+0x254>
    6538:	mov	r0, r7
    653c:	bl	0 <strlen>
    6540:	mov	r1, r0
    6544:	add	r2, sp, #8
    6548:	mov	r0, r7
    654c:	mov	r3, #1
    6550:	bl	0 <coda_ascii_parse_double>
    6554:	cmp	r0, #0
    6558:	bmi	6620 <cd_conversion_init+0x314>
    655c:	ldr	r6, [sl]
    6560:	cmp	r6, #0
    6564:	beq	65d0 <cd_conversion_init+0x2c4>
    6568:	movw	r4, #0
    656c:	add	r5, sl, #4
    6570:	movt	r4, #0
    6574:	mov	r0, r6
    6578:	mov	r1, r4
    657c:	bl	0 <strcmp>
    6580:	cmp	r0, #0
    6584:	beq	65a0 <cd_conversion_init+0x294>
    6588:	ldr	r6, [r5, #4]
    658c:	add	r0, r5, #8
    6590:	mov	r5, r0
    6594:	cmp	r6, #0
    6598:	bne	6574 <cd_conversion_init+0x268>
    659c:	b	65d0 <cd_conversion_init+0x2c4>
    65a0:	ldr	r5, [r5]
    65a4:	cmp	r5, #0
    65a8:	beq	65d0 <cd_conversion_init+0x2c4>
    65ac:	mov	r0, r5
    65b0:	bl	0 <strlen>
    65b4:	mov	r1, r0
    65b8:	mov	r2, sp
    65bc:	mov	r0, r5
    65c0:	mov	r3, #1
    65c4:	bl	0 <coda_ascii_parse_double>
    65c8:	cmn	r0, #1
    65cc:	ble	6634 <cd_conversion_init+0x328>
    65d0:	ldr	r0, [r8]
    65d4:	movw	r1, #0
    65d8:	movt	r1, #0
    65dc:	str	r1, [r0, #40]	; 0x28
    65e0:	vldr	d3, [sp]
    65e4:	vldr	d2, [sp, #8]
    65e8:	vldr	d1, [sp, #16]
    65ec:	vldr	d0, [sp, #24]
    65f0:	bl	0 <coda_conversion_new>
    65f4:	ldr	r1, [r8]
    65f8:	str	r0, [r1, #8]
    65fc:	movw	r0, #0
    6600:	movt	r0, #0
    6604:	str	r0, [r1, #216]	; 0xd8
    6608:	movw	r0, #0
    660c:	movt	r0, #0
    6610:	str	r0, [r1, #388]	; 0x184
    6614:	mov	r0, #0
    6618:	sub	sp, fp, #28
    661c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6620:	movw	r0, #65136	; 0xfe70
    6624:	movw	r1, #0
    6628:	movt	r0, #65535	; 0xffff
    662c:	movt	r1, #0
    6630:	b	6520 <cd_conversion_init+0x214>
    6634:	movw	r0, #65136	; 0xfe70
    6638:	movw	r1, #0
    663c:	mov	r2, r5
    6640:	movt	r0, #65535	; 0xffff
    6644:	movt	r1, #0
    6648:	b	6524 <cd_conversion_init+0x218>

0000664c <cd_float_set_conversion>:
    664c:	push	{r4, sl, fp, lr}
    6650:	add	fp, sp, #8
    6654:	mov	r4, r0
    6658:	ldr	r0, [r0]
    665c:	ldr	r1, [r0, #8]
    6660:	ldr	r0, [r0, #396]	; 0x18c
    6664:	ldr	r0, [r0, #8]
    6668:	bl	0 <coda_type_number_set_conversion>
    666c:	mov	r1, r0
    6670:	mvn	r0, #0
    6674:	cmp	r1, #0
    6678:	popne	{r4, sl, fp, pc}
    667c:	ldr	r1, [r4]
    6680:	mov	r0, #0
    6684:	str	r0, [r1, #8]
    6688:	pop	{r4, sl, fp, pc}

0000668c <integer_constant_or_expression_init>:
    668c:	ldr	r0, [r0]
    6690:	movw	r1, #0
    6694:	movw	r3, #0
    6698:	mov	r2, #1
    669c:	movt	r1, #0
    66a0:	movt	r3, #0
    66a4:	str	r2, [r0, #32]
    66a8:	str	r3, [r0, #36]	; 0x24
    66ac:	str	r1, [r0, #40]	; 0x28
    66b0:	mov	r0, #0
    66b4:	bx	lr

000066b8 <type_set_bit_size>:
    66b8:	push	{r4, sl, fp, lr}
    66bc:	add	fp, sp, #8
    66c0:	ldr	r2, [r0]
    66c4:	mov	r4, r0
    66c8:	ldr	r0, [r2, #396]	; 0x18c
    66cc:	ldr	r1, [r2, #8]
    66d0:	ldr	r0, [r0, #8]
    66d4:	cmp	r1, #0
    66d8:	beq	6704 <type_set_bit_size+0x4c>
    66dc:	bl	0 <coda_type_set_bit_size_expression>
    66e0:	mov	r1, r0
    66e4:	mvn	r0, #0
    66e8:	cmp	r1, #0
    66ec:	popne	{r4, sl, fp, pc}
    66f0:	ldr	r0, [r4]
    66f4:	mov	r1, #0
    66f8:	str	r1, [r0, #8]
    66fc:	mov	r0, #0
    6700:	pop	{r4, sl, fp, pc}
    6704:	ldr	r2, [r2, #16]
    6708:	asr	r3, r2, #31
    670c:	bl	0 <coda_type_set_bit_size>
    6710:	mov	r1, r0
    6714:	mvn	r0, #0
    6718:	cmp	r1, #0
    671c:	moveq	r0, #0
    6720:	pop	{r4, sl, fp, pc}

00006724 <type_set_byte_size>:
    6724:	push	{r4, sl, fp, lr}
    6728:	add	fp, sp, #8
    672c:	ldr	r2, [r0]
    6730:	mov	r4, r0
    6734:	ldr	r0, [r2, #396]	; 0x18c
    6738:	ldr	r1, [r2, #8]
    673c:	ldr	r0, [r0, #8]
    6740:	cmp	r1, #0
    6744:	beq	6770 <type_set_byte_size+0x4c>
    6748:	bl	0 <coda_type_set_byte_size_expression>
    674c:	mov	r1, r0
    6750:	mvn	r0, #0
    6754:	cmp	r1, #0
    6758:	popne	{r4, sl, fp, pc}
    675c:	ldr	r0, [r4]
    6760:	mov	r1, #0
    6764:	str	r1, [r0, #8]
    6768:	mov	r0, #0
    676c:	pop	{r4, sl, fp, pc}
    6770:	ldr	r2, [r2, #16]
    6774:	asr	r3, r2, #31
    6778:	bl	0 <coda_type_set_byte_size>
    677c:	mov	r1, r0
    6780:	mvn	r0, #0
    6784:	cmp	r1, #0
    6788:	moveq	r0, #0
    678c:	pop	{r4, sl, fp, pc}

00006790 <cd_float_set_little_endian>:
    6790:	ldr	r0, [r0]
    6794:	mov	r1, #1
    6798:	ldr	r0, [r0, #396]	; 0x18c
    679c:	ldr	r0, [r0, #8]
    67a0:	b	0 <coda_type_number_set_endianness>

000067a4 <cd_mapping_init>:
    67a4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    67a8:	add	fp, sp, #28
    67ac:	sub	sp, sp, #12
    67b0:	ldr	r9, [r0]
    67b4:	ldr	r6, [r1]
    67b8:	ldr	sl, [r9]
    67bc:	cmp	r6, #0
    67c0:	beq	6848 <cd_mapping_init+0xa4>
    67c4:	movw	r5, #0
    67c8:	mov	r8, r0
    67cc:	mov	r7, r1
    67d0:	add	r4, r1, #4
    67d4:	mov	r0, r6
    67d8:	movt	r5, #0
    67dc:	mov	r1, r5
    67e0:	bl	0 <strcmp>
    67e4:	cmp	r0, #0
    67e8:	beq	6804 <cd_mapping_init+0x60>
    67ec:	ldr	r0, [r4, #4]
    67f0:	add	r1, r4, #8
    67f4:	mov	r4, r1
    67f8:	cmp	r0, #0
    67fc:	bne	67dc <cd_mapping_init+0x38>
    6800:	b	6848 <cd_mapping_init+0xa4>
    6804:	ldr	r4, [r4]
    6808:	cmp	r4, #0
    680c:	beq	6848 <cd_mapping_init+0xa4>
    6810:	add	r5, r7, #4
    6814:	movw	r7, #0
    6818:	movt	r7, #0
    681c:	mov	r0, r6
    6820:	mov	r1, r7
    6824:	bl	0 <strcmp>
    6828:	cmp	r0, #0
    682c:	beq	689c <cd_mapping_init+0xf8>
    6830:	ldr	r6, [r5, #4]
    6834:	add	r0, r5, #8
    6838:	mov	r5, r0
    683c:	cmp	r6, #0
    6840:	bne	681c <cd_mapping_init+0x78>
    6844:	b	6940 <cd_mapping_init+0x19c>
    6848:	cmn	sl, #1
    684c:	beq	686c <cd_mapping_init+0xc8>
    6850:	movw	r0, #0
    6854:	movt	r0, #0
    6858:	ldr	r3, [r0, sl, lsl #2]
    685c:	ldrb	r0, [r3], #1
    6860:	cmp	r0, #32
    6864:	bne	685c <cd_mapping_init+0xb8>
    6868:	b	6874 <cd_mapping_init+0xd0>
    686c:	movw	r3, #0
    6870:	movt	r3, #0
    6874:	movw	r0, #65136	; 0xfe70
    6878:	movw	r1, #0
    687c:	movw	r2, #0
    6880:	movt	r0, #65535	; 0xffff
    6884:	movt	r1, #0
    6888:	movt	r2, #0
    688c:	bl	0 <coda_set_error>
    6890:	mvn	r0, #0
    6894:	sub	sp, fp, #28
    6898:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    689c:	ldr	r6, [r5]
    68a0:	cmp	r6, #0
    68a4:	beq	6940 <cd_mapping_init+0x19c>
    68a8:	ldr	r0, [r9, #396]	; 0x18c
    68ac:	ldr	r0, [r0]
    68b0:	cmp	r0, #17
    68b4:	cmpne	r0, #38	; 0x26
    68b8:	bne	69cc <cd_mapping_init+0x228>
    68bc:	movw	r1, #0
    68c0:	mov	r0, r6
    68c4:	movt	r1, #0
    68c8:	bl	0 <strcasecmp>
    68cc:	cmp	r0, #0
    68d0:	beq	6990 <cd_mapping_init+0x1ec>
    68d4:	movw	r1, #0
    68d8:	mov	r0, r6
    68dc:	movt	r1, #0
    68e0:	bl	0 <strcasecmp>
    68e4:	cmp	r0, #0
    68e8:	beq	6988 <cd_mapping_init+0x1e4>
    68ec:	movw	r1, #0
    68f0:	mov	r0, r6
    68f4:	movt	r1, #0
    68f8:	bl	0 <strcasecmp>
    68fc:	cmp	r0, #0
    6900:	beq	6988 <cd_mapping_init+0x1e4>
    6904:	movw	r1, #0
    6908:	mov	r0, r6
    690c:	movt	r1, #0
    6910:	bl	0 <strcasecmp>
    6914:	cmp	r0, #0
    6918:	beq	6a2c <cd_mapping_init+0x288>
    691c:	movw	r1, #0
    6920:	mov	r2, sp
    6924:	mov	r0, r6
    6928:	movt	r1, #0
    692c:	bl	0 <__isoc99_sscanf>
    6930:	cmp	r0, #1
    6934:	bne	6a34 <cd_mapping_init+0x290>
    6938:	vldr	d0, [sp]
    693c:	b	6998 <cd_mapping_init+0x1f4>
    6940:	cmn	sl, #1
    6944:	beq	6964 <cd_mapping_init+0x1c0>
    6948:	movw	r0, #0
    694c:	movt	r0, #0
    6950:	ldr	r3, [r0, sl, lsl #2]
    6954:	ldrb	r0, [r3], #1
    6958:	cmp	r0, #32
    695c:	bne	6954 <cd_mapping_init+0x1b0>
    6960:	b	696c <cd_mapping_init+0x1c8>
    6964:	movw	r3, #0
    6968:	movt	r3, #0
    696c:	movw	r0, #65136	; 0xfe70
    6970:	movw	r1, #0
    6974:	movw	r2, #0
    6978:	movt	r0, #65535	; 0xffff
    697c:	movt	r1, #0
    6980:	movt	r2, #0
    6984:	b	688c <cd_mapping_init+0xe8>
    6988:	bl	0 <coda_PlusInf>
    698c:	b	6994 <cd_mapping_init+0x1f0>
    6990:	bl	0 <coda_NaN>
    6994:	vstr	d0, [sp]
    6998:	ldr	r0, [r8]
    699c:	movw	r1, #0
    69a0:	movt	r1, #0
    69a4:	str	r1, [r0, #40]	; 0x28
    69a8:	mov	r0, r4
    69ac:	bl	0 <coda_ascii_float_mapping_new>
    69b0:	ldr	r1, [r8]
    69b4:	cmp	r0, #0
    69b8:	str	r0, [r1, #8]
    69bc:	beq	6890 <cd_mapping_init+0xec>
    69c0:	mov	r0, #0
    69c4:	sub	sp, fp, #28
    69c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    69cc:	cmp	r0, #20
    69d0:	bne	6a50 <cd_mapping_init+0x2ac>
    69d4:	mov	r0, r6
    69d8:	bl	0 <strlen>
    69dc:	mov	r1, r0
    69e0:	mov	r2, sp
    69e4:	mov	r0, r6
    69e8:	mov	r3, #0
    69ec:	bl	0 <coda_ascii_parse_int64>
    69f0:	cmn	r0, #1
    69f4:	ble	6a18 <cd_mapping_init+0x274>
    69f8:	ldr	r0, [r8]
    69fc:	movw	r1, #0
    6a00:	movt	r1, #0
    6a04:	str	r1, [r0, #40]	; 0x28
    6a08:	mov	r0, r4
    6a0c:	ldm	sp, {r2, r3}
    6a10:	bl	0 <coda_ascii_integer_mapping_new>
    6a14:	b	69b0 <cd_mapping_init+0x20c>
    6a18:	movw	r0, #65136	; 0xfe70
    6a1c:	movw	r1, #0
    6a20:	movt	r0, #65535	; 0xffff
    6a24:	movt	r1, #0
    6a28:	b	6a44 <cd_mapping_init+0x2a0>
    6a2c:	bl	0 <coda_MinInf>
    6a30:	b	6994 <cd_mapping_init+0x1f0>
    6a34:	movw	r0, #65136	; 0xfe70
    6a38:	movw	r1, #0
    6a3c:	movt	r0, #65535	; 0xffff
    6a40:	movt	r1, #0
    6a44:	mov	r2, r6
    6a48:	bl	0 <coda_set_error>
    6a4c:	b	6890 <cd_mapping_init+0xec>
    6a50:	movw	r0, #0
    6a54:	movw	r1, #0
    6a58:	movw	r3, #0
    6a5c:	movw	r2, #2040	; 0x7f8
    6a60:	movt	r0, #0
    6a64:	movt	r1, #0
    6a68:	movt	r3, #0
    6a6c:	bl	0 <__assert_fail>

00006a70 <cd_float_add_mapping>:
    6a70:	push	{r4, sl, fp, lr}
    6a74:	add	fp, sp, #8
    6a78:	mov	r4, r0
    6a7c:	ldr	r0, [r0]
    6a80:	ldr	r1, [r0, #8]
    6a84:	ldr	r0, [r0, #396]	; 0x18c
    6a88:	ldr	r0, [r0, #8]
    6a8c:	bl	0 <coda_type_number_add_ascii_float_mapping>
    6a90:	mov	r1, r0
    6a94:	mvn	r0, #0
    6a98:	cmp	r1, #0
    6a9c:	popne	{r4, sl, fp, pc}
    6aa0:	ldr	r1, [r4]
    6aa4:	mov	r0, #0
    6aa8:	str	r0, [r1, #8]
    6aac:	pop	{r4, sl, fp, pc}

00006ab0 <cd_float_finalise>:
    6ab0:	ldr	r0, [r0]
    6ab4:	ldr	r0, [r0, #8]
    6ab8:	b	0 <coda_type_number_validate>

00006abc <cd_native_type_finalise>:
    6abc:	push	{r4, r5, fp, lr}
    6ac0:	add	fp, sp, #8
    6ac4:	ldr	r5, [r0]
    6ac8:	ldr	r4, [r5, #12]
    6acc:	cmp	r4, #0
    6ad0:	beq	6c0c <cd_native_type_finalise+0x150>
    6ad4:	movw	r1, #0
    6ad8:	mov	r0, r4
    6adc:	movt	r1, #0
    6ae0:	bl	0 <strcmp>
    6ae4:	cmp	r0, #0
    6ae8:	beq	6c2c <cd_native_type_finalise+0x170>
    6aec:	movw	r1, #0
    6af0:	mov	r0, r4
    6af4:	movt	r1, #0
    6af8:	bl	0 <strcmp>
    6afc:	cmp	r0, #0
    6b00:	beq	6c40 <cd_native_type_finalise+0x184>
    6b04:	movw	r1, #0
    6b08:	mov	r0, r4
    6b0c:	movt	r1, #0
    6b10:	bl	0 <strcmp>
    6b14:	cmp	r0, #0
    6b18:	beq	6c4c <cd_native_type_finalise+0x190>
    6b1c:	movw	r1, #0
    6b20:	mov	r0, r4
    6b24:	movt	r1, #0
    6b28:	bl	0 <strcmp>
    6b2c:	cmp	r0, #0
    6b30:	beq	6c58 <cd_native_type_finalise+0x19c>
    6b34:	movw	r1, #0
    6b38:	mov	r0, r4
    6b3c:	movt	r1, #0
    6b40:	bl	0 <strcmp>
    6b44:	cmp	r0, #0
    6b48:	beq	6c64 <cd_native_type_finalise+0x1a8>
    6b4c:	movw	r1, #0
    6b50:	mov	r0, r4
    6b54:	movt	r1, #0
    6b58:	bl	0 <strcmp>
    6b5c:	cmp	r0, #0
    6b60:	beq	6c70 <cd_native_type_finalise+0x1b4>
    6b64:	movw	r1, #0
    6b68:	mov	r0, r4
    6b6c:	movt	r1, #0
    6b70:	bl	0 <strcmp>
    6b74:	cmp	r0, #0
    6b78:	beq	6c7c <cd_native_type_finalise+0x1c0>
    6b7c:	movw	r1, #0
    6b80:	mov	r0, r4
    6b84:	movt	r1, #0
    6b88:	bl	0 <strcmp>
    6b8c:	cmp	r0, #0
    6b90:	beq	6c88 <cd_native_type_finalise+0x1cc>
    6b94:	movw	r1, #0
    6b98:	mov	r0, r4
    6b9c:	movt	r1, #0
    6ba0:	bl	0 <strcmp>
    6ba4:	cmp	r0, #0
    6ba8:	beq	6c94 <cd_native_type_finalise+0x1d8>
    6bac:	movw	r1, #0
    6bb0:	mov	r0, r4
    6bb4:	movt	r1, #0
    6bb8:	bl	0 <strcmp>
    6bbc:	cmp	r0, #0
    6bc0:	beq	6ca0 <cd_native_type_finalise+0x1e4>
    6bc4:	movw	r1, #0
    6bc8:	mov	r0, r4
    6bcc:	movt	r1, #0
    6bd0:	bl	0 <strcmp>
    6bd4:	cmp	r0, #0
    6bd8:	beq	6cac <cd_native_type_finalise+0x1f0>
    6bdc:	movw	r1, #0
    6be0:	mov	r0, r4
    6be4:	movt	r1, #0
    6be8:	bl	0 <strcmp>
    6bec:	cmp	r0, #0
    6bf0:	beq	6cb8 <cd_native_type_finalise+0x1fc>
    6bf4:	movw	r1, #0
    6bf8:	mov	r0, r4
    6bfc:	movt	r1, #0
    6c00:	bl	0 <strcmp>
    6c04:	cmp	r0, #0
    6c08:	beq	6cc4 <cd_native_type_finalise+0x208>
    6c0c:	movw	r0, #65136	; 0xfe70
    6c10:	movw	r1, #0
    6c14:	movt	r0, #65535	; 0xffff
    6c18:	movt	r1, #0
    6c1c:	bl	0 <coda_set_error>
    6c20:	mvn	r1, #0
    6c24:	mov	r0, r1
    6c28:	pop	{r4, r5, fp, pc}
    6c2c:	mov	r1, #0
    6c30:	mov	r0, r1
    6c34:	str	r1, [r5, #16]
    6c38:	str	r1, [r5, #20]
    6c3c:	pop	{r4, r5, fp, pc}
    6c40:	mov	r1, #0
    6c44:	mov	r0, #2
    6c48:	b	6ccc <cd_native_type_finalise+0x210>
    6c4c:	mov	r1, #0
    6c50:	mov	r0, #4
    6c54:	b	6ccc <cd_native_type_finalise+0x210>
    6c58:	mov	r1, #0
    6c5c:	mov	r0, #6
    6c60:	b	6ccc <cd_native_type_finalise+0x210>
    6c64:	mov	r1, #0
    6c68:	mov	r0, #1
    6c6c:	b	6ccc <cd_native_type_finalise+0x210>
    6c70:	mov	r1, #0
    6c74:	mov	r0, #3
    6c78:	b	6ccc <cd_native_type_finalise+0x210>
    6c7c:	mov	r1, #0
    6c80:	mov	r0, #5
    6c84:	b	6ccc <cd_native_type_finalise+0x210>
    6c88:	mov	r1, #0
    6c8c:	mov	r0, #7
    6c90:	b	6ccc <cd_native_type_finalise+0x210>
    6c94:	mov	r1, #0
    6c98:	mov	r0, #8
    6c9c:	b	6ccc <cd_native_type_finalise+0x210>
    6ca0:	mov	r1, #0
    6ca4:	mov	r0, #9
    6ca8:	b	6ccc <cd_native_type_finalise+0x210>
    6cac:	mov	r1, #0
    6cb0:	mov	r0, #10
    6cb4:	b	6ccc <cd_native_type_finalise+0x210>
    6cb8:	mov	r1, #0
    6cbc:	mov	r0, #11
    6cc0:	b	6ccc <cd_native_type_finalise+0x210>
    6cc4:	mov	r1, #0
    6cc8:	mov	r0, #12
    6ccc:	strd	r0, [r5, #16]
    6cd0:	mov	r0, r1
    6cd4:	pop	{r4, r5, fp, pc}

00006cd8 <cd_conversion_set_unit>:
    6cd8:	ldr	r0, [r0]
    6cdc:	ldr	r1, [r0, #12]
    6ce0:	ldr	r0, [r0, #396]	; 0x18c
    6ce4:	cmp	r1, #0
    6ce8:	ldr	r0, [r0, #8]
    6cec:	movweq	r1, #0
    6cf0:	movteq	r1, #0
    6cf4:	b	0 <coda_conversion_set_unit>

00006cf8 <integer_constant_or_expression_finalise>:
    6cf8:	push	{r4, r5, r6, sl, fp, lr}
    6cfc:	add	fp, sp, #16
    6d00:	sub	sp, sp, #8
    6d04:	mov	r4, r0
    6d08:	ldr	r0, [r0]
    6d0c:	ldr	r5, [r0, #12]
    6d10:	cmp	r5, #0
    6d14:	beq	6d70 <integer_constant_or_expression_finalise+0x78>
    6d18:	mov	r0, r5
    6d1c:	bl	0 <strlen>
    6d20:	cmp	r0, #1
    6d24:	blt	6d5c <integer_constant_or_expression_finalise+0x64>
    6d28:	movw	r3, #19
    6d2c:	mov	r1, #0
    6d30:	mov	r2, #1
    6d34:	movt	r3, #128	; 0x80
    6d38:	ldrb	r6, [r5, r1]
    6d3c:	sub	r6, r6, #9
    6d40:	cmp	r6, #23
    6d44:	bhi	6d94 <integer_constant_or_expression_finalise+0x9c>
    6d48:	tst	r3, r2, lsl r6
    6d4c:	beq	6d94 <integer_constant_or_expression_finalise+0x9c>
    6d50:	add	r1, r1, #1
    6d54:	cmp	r0, r1
    6d58:	bne	6d38 <integer_constant_or_expression_finalise+0x40>
    6d5c:	mov	r0, r5
    6d60:	bl	0 <free>
    6d64:	ldr	r0, [r4]
    6d68:	mov	r1, #0
    6d6c:	str	r1, [r0, #12]
    6d70:	movw	r0, #65136	; 0xfe70
    6d74:	movw	r1, #0
    6d78:	movt	r0, #65535	; 0xffff
    6d7c:	movt	r1, #0
    6d80:	bl	0 <coda_set_error>
    6d84:	mvn	r5, #0
    6d88:	mov	r0, r5
    6d8c:	sub	sp, fp, #16
    6d90:	pop	{r4, r5, r6, sl, fp, pc}
    6d94:	mov	r1, sp
    6d98:	mov	r0, r5
    6d9c:	bl	0 <coda_expression_from_string>
    6da0:	mvn	r5, #0
    6da4:	cmp	r0, #0
    6da8:	bne	6d88 <integer_constant_or_expression_finalise+0x90>
    6dac:	ldr	r0, [r4]
    6db0:	ldr	r0, [r0, #12]
    6db4:	bl	0 <free>
    6db8:	ldr	r0, [r4]
    6dbc:	ldr	r2, [sp]
    6dc0:	mov	r1, #0
    6dc4:	str	r2, [r0, #8]
    6dc8:	str	r1, [r0, #12]
    6dcc:	add	r1, sp, #4
    6dd0:	mov	r0, r2
    6dd4:	bl	0 <coda_expression_get_type>
    6dd8:	cmp	r0, #0
    6ddc:	beq	6dec <integer_constant_or_expression_finalise+0xf4>
    6de0:	ldr	r0, [sp]
    6de4:	bl	0 <coda_expression_delete>
    6de8:	b	6d88 <integer_constant_or_expression_finalise+0x90>
    6dec:	ldr	r0, [sp, #4]
    6df0:	cmp	r0, #1
    6df4:	bne	6e40 <integer_constant_or_expression_finalise+0x148>
    6df8:	ldr	r0, [sp]
    6dfc:	bl	0 <coda_expression_is_constant>
    6e00:	cmp	r0, #0
    6e04:	beq	6e38 <integer_constant_or_expression_finalise+0x140>
    6e08:	ldr	r1, [r4]
    6e0c:	ldr	r0, [sp]
    6e10:	mov	r6, #0
    6e14:	add	r2, r1, #16
    6e18:	mov	r1, #0
    6e1c:	bl	0 <coda_expression_eval_integer>
    6e20:	cmp	r0, #0
    6e24:	bne	6d88 <integer_constant_or_expression_finalise+0x90>
    6e28:	ldr	r0, [r4]
    6e2c:	str	r6, [r0, #8]
    6e30:	ldr	r0, [sp]
    6e34:	bl	0 <coda_expression_delete>
    6e38:	mov	r5, #0
    6e3c:	b	6d88 <integer_constant_or_expression_finalise+0x90>
    6e40:	movw	r0, #65136	; 0xfe70
    6e44:	movw	r1, #0
    6e48:	movt	r0, #65535	; 0xffff
    6e4c:	movt	r1, #0
    6e50:	bl	0 <coda_set_error>
    6e54:	b	6d88 <integer_constant_or_expression_finalise+0x90>

00006e58 <cd_integer_set_unit>:
    6e58:	ldr	r0, [r0]
    6e5c:	ldr	r1, [r0, #12]
    6e60:	ldr	r0, [r0, #396]	; 0x18c
    6e64:	cmp	r1, #0
    6e68:	ldr	r0, [r0, #8]
    6e6c:	movweq	r1, #0
    6e70:	movteq	r1, #0
    6e74:	b	0 <coda_type_number_set_unit>

00006e78 <cd_integer_set_little_endian>:
    6e78:	ldr	r0, [r0]
    6e7c:	mov	r1, #1
    6e80:	ldr	r0, [r0, #396]	; 0x18c
    6e84:	ldr	r0, [r0, #8]
    6e88:	b	0 <coda_type_number_set_endianness>

00006e8c <cd_integer_set_read_type>:
    6e8c:	ldr	r0, [r0]
    6e90:	ldr	r1, [r0, #16]
    6e94:	ldr	r0, [r0, #396]	; 0x18c
    6e98:	ldr	r0, [r0, #8]
    6e9c:	b	0 <coda_type_set_read_type>

00006ea0 <cd_integer_set_conversion>:
    6ea0:	push	{r4, sl, fp, lr}
    6ea4:	add	fp, sp, #8
    6ea8:	mov	r4, r0
    6eac:	ldr	r0, [r0]
    6eb0:	ldr	r1, [r0, #8]
    6eb4:	ldr	r0, [r0, #396]	; 0x18c
    6eb8:	ldr	r0, [r0, #8]
    6ebc:	bl	0 <coda_type_number_set_conversion>
    6ec0:	mov	r1, r0
    6ec4:	mvn	r0, #0
    6ec8:	cmp	r1, #0
    6ecc:	popne	{r4, sl, fp, pc}
    6ed0:	ldr	r1, [r4]
    6ed4:	mov	r0, #0
    6ed8:	str	r0, [r1, #8]
    6edc:	pop	{r4, sl, fp, pc}

00006ee0 <cd_integer_add_mapping>:
    6ee0:	push	{r4, sl, fp, lr}
    6ee4:	add	fp, sp, #8
    6ee8:	mov	r4, r0
    6eec:	ldr	r0, [r0]
    6ef0:	ldr	r1, [r0, #8]
    6ef4:	ldr	r0, [r0, #396]	; 0x18c
    6ef8:	ldr	r0, [r0, #8]
    6efc:	bl	0 <coda_type_number_add_ascii_integer_mapping>
    6f00:	mov	r1, r0
    6f04:	mvn	r0, #0
    6f08:	cmp	r1, #0
    6f0c:	popne	{r4, sl, fp, pc}
    6f10:	ldr	r1, [r4]
    6f14:	mov	r0, #0
    6f18:	str	r0, [r1, #8]
    6f1c:	pop	{r4, sl, fp, pc}

00006f20 <cd_integer_finalise>:
    6f20:	ldr	r0, [r0]
    6f24:	ldr	r0, [r0, #8]
    6f28:	b	0 <coda_type_number_validate>

00006f2c <cd_raw_set_fixed_value>:
    6f2c:	push	{r4, sl, fp, lr}
    6f30:	add	fp, sp, #8
    6f34:	mov	r4, r0
    6f38:	ldr	r0, [r0]
    6f3c:	ldr	r0, [r0, #12]
    6f40:	bl	60f0 <decode_escaped_string>
    6f44:	cmn	r0, #1
    6f48:	ble	6f80 <cd_raw_set_fixed_value+0x54>
    6f4c:	mov	r1, r0
    6f50:	cmp	r0, #0
    6f54:	beq	6f9c <cd_raw_set_fixed_value+0x70>
    6f58:	ldr	r0, [r4]
    6f5c:	ldr	r2, [r0, #12]
    6f60:	ldr	r0, [r0, #396]	; 0x18c
    6f64:	ldr	r0, [r0, #8]
    6f68:	bl	0 <coda_type_raw_set_fixed_value>
    6f6c:	mov	r1, r0
    6f70:	mvn	r0, #0
    6f74:	cmp	r1, #0
    6f78:	moveq	r0, #0
    6f7c:	pop	{r4, sl, fp, pc}
    6f80:	movw	r0, #65136	; 0xfe70
    6f84:	movw	r1, #0
    6f88:	movt	r0, #65535	; 0xffff
    6f8c:	movt	r1, #0
    6f90:	bl	0 <coda_set_error>
    6f94:	mvn	r0, #0
    6f98:	pop	{r4, sl, fp, pc}
    6f9c:	mov	r0, #0
    6fa0:	pop	{r4, sl, fp, pc}

00006fa4 <cd_raw_finalise>:
    6fa4:	ldr	r0, [r0]
    6fa8:	ldr	r0, [r0, #8]
    6fac:	b	0 <coda_type_raw_validate>

00006fb0 <integer_expression_init>:
    6fb0:	ldr	r0, [r0]
    6fb4:	movw	r1, #0
    6fb8:	movw	r3, #0
    6fbc:	mov	r2, #1
    6fc0:	movt	r1, #0
    6fc4:	movt	r3, #0
    6fc8:	str	r2, [r0, #32]
    6fcc:	str	r3, [r0, #36]	; 0x24
    6fd0:	str	r1, [r0, #40]	; 0x28
    6fd4:	mov	r0, #0
    6fd8:	bx	lr

00006fdc <cd_field_init>:
    6fdc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6fe0:	add	fp, sp, #28
    6fe4:	sub	sp, sp, #4
    6fe8:	ldr	r6, [r1]
    6fec:	mov	sl, r1
    6ff0:	mov	r9, r0
    6ff4:	cmp	r6, #0
    6ff8:	beq	7054 <cd_field_init+0x78>
    6ffc:	movw	r7, #0
    7000:	add	r4, sl, #4
    7004:	mov	r0, r6
    7008:	movt	r7, #0
    700c:	mov	r1, r7
    7010:	bl	0 <strcmp>
    7014:	cmp	r0, #0
    7018:	beq	7034 <cd_field_init+0x58>
    701c:	ldr	r0, [r4, #4]
    7020:	add	r1, r4, #8
    7024:	mov	r4, r1
    7028:	cmp	r0, #0
    702c:	bne	700c <cd_field_init+0x30>
    7030:	b	7054 <cd_field_init+0x78>
    7034:	ldr	r0, [r4]
    7038:	cmp	r0, #0
    703c:	beq	7054 <cd_field_init+0x78>
    7040:	movw	r0, #65136	; 0xfe70
    7044:	movw	r1, #0
    7048:	movt	r0, #65535	; 0xffff
    704c:	movt	r1, #0
    7050:	b	70dc <cd_field_init+0x100>
    7054:	ldr	r4, [r9]
    7058:	ldr	r0, [r4, #396]	; 0x18c
    705c:	ldr	r1, [r0, #48]	; 0x30
    7060:	cmp	r1, #0
    7064:	beq	7388 <cd_field_init+0x3ac>
    7068:	ldr	r0, [r0, #44]	; 0x2c
    706c:	cmp	r6, #0
    7070:	mov	r1, #1
    7074:	str	r0, [r4, #44]	; 0x2c
    7078:	str	r1, [r4, #48]	; 0x30
    707c:	beq	70b8 <cd_field_init+0xdc>
    7080:	movw	r7, #0
    7084:	add	r5, sl, #4
    7088:	mov	r0, r6
    708c:	movt	r7, #0
    7090:	mov	r1, r7
    7094:	bl	0 <strcmp>
    7098:	cmp	r0, #0
    709c:	beq	70c0 <cd_field_init+0xe4>
    70a0:	ldr	r0, [r5, #4]
    70a4:	add	r1, r5, #8
    70a8:	mov	r5, r1
    70ac:	cmp	r0, #0
    70b0:	bne	7090 <cd_field_init+0xb4>
    70b4:	b	70e4 <cd_field_init+0x108>
    70b8:	ldr	r8, [r4]
    70bc:	b	7194 <cd_field_init+0x1b8>
    70c0:	ldr	r0, [r5]
    70c4:	cmp	r0, #0
    70c8:	beq	70e4 <cd_field_init+0x108>
    70cc:	movw	r0, #65136	; 0xfe70
    70d0:	movw	r1, #0
    70d4:	movt	r0, #65535	; 0xffff
    70d8:	movt	r1, #0
    70dc:	bl	0 <coda_set_error>
    70e0:	b	71dc <cd_field_init+0x200>
    70e4:	ldr	r8, [r4]
    70e8:	movw	r7, #0
    70ec:	add	r5, sl, #4
    70f0:	movt	r7, #0
    70f4:	mov	r0, r6
    70f8:	mov	r1, r7
    70fc:	bl	0 <strcmp>
    7100:	cmp	r0, #0
    7104:	beq	7120 <cd_field_init+0x144>
    7108:	ldr	r6, [r5, #4]
    710c:	add	r0, r5, #8
    7110:	mov	r5, r0
    7114:	cmp	r6, #0
    7118:	bne	70f4 <cd_field_init+0x118>
    711c:	b	7194 <cd_field_init+0x1b8>
    7120:	ldr	r0, [r5]
    7124:	cmp	r0, #0
    7128:	beq	7194 <cd_field_init+0x1b8>
    712c:	movw	r1, #0
    7130:	movt	r1, #0
    7134:	str	r1, [r4, #40]	; 0x28
    7138:	bl	0 <coda_type_record_field_new>
    713c:	ldr	r7, [r9]
    7140:	mvn	r6, #0
    7144:	cmp	r0, #0
    7148:	str	r0, [r7, #8]
    714c:	beq	71e0 <cd_field_init+0x204>
    7150:	mov	r8, r0
    7154:	ldr	r0, [sl]
    7158:	cmp	r0, #0
    715c:	beq	720c <cd_field_init+0x230>
    7160:	movw	r5, #0
    7164:	add	r4, sl, #4
    7168:	movt	r5, #0
    716c:	mov	r1, r5
    7170:	bl	0 <strcmp>
    7174:	cmp	r0, #0
    7178:	beq	71ec <cd_field_init+0x210>
    717c:	ldr	r0, [r4, #4]
    7180:	add	r1, r4, #8
    7184:	mov	r4, r1
    7188:	cmp	r0, #0
    718c:	bne	716c <cd_field_init+0x190>
    7190:	b	720c <cd_field_init+0x230>
    7194:	cmn	r8, #1
    7198:	beq	71b8 <cd_field_init+0x1dc>
    719c:	movw	r0, #0
    71a0:	movt	r0, #0
    71a4:	ldr	r3, [r0, r8, lsl #2]
    71a8:	ldrb	r0, [r3], #1
    71ac:	cmp	r0, #32
    71b0:	bne	71a8 <cd_field_init+0x1cc>
    71b4:	b	71c0 <cd_field_init+0x1e4>
    71b8:	movw	r3, #0
    71bc:	movt	r3, #0
    71c0:	movw	r0, #65136	; 0xfe70
    71c4:	movw	r1, #0
    71c8:	movw	r2, #0
    71cc:	movt	r0, #65535	; 0xffff
    71d0:	movt	r1, #0
    71d4:	movt	r2, #0
    71d8:	bl	0 <coda_set_error>
    71dc:	mvn	r6, #0
    71e0:	mov	r0, r6
    71e4:	sub	sp, fp, #28
    71e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    71ec:	ldr	r1, [r4]
    71f0:	cmp	r1, #0
    71f4:	beq	720c <cd_field_init+0x230>
    71f8:	mov	r0, r8
    71fc:	bl	0 <coda_type_record_field_set_real_name>
    7200:	cmp	r0, #0
    7204:	bne	71e0 <cd_field_init+0x204>
    7208:	ldr	r7, [r9]
    720c:	movw	r4, #0
    7210:	movw	r1, #0
    7214:	movw	r2, #0
    7218:	movw	r5, #0
    721c:	movw	r0, #0
    7220:	movw	r3, #0
    7224:	movw	r6, #0
    7228:	movt	r4, #0
    722c:	movt	r1, #0
    7230:	movt	r2, #0
    7234:	movt	r5, #0
    7238:	movt	r0, #0
    723c:	movt	r3, #0
    7240:	movt	r6, #0
    7244:	vmov.32	d17[0], r4
    7248:	movw	r4, #0
    724c:	str	r0, [r7, #260]	; 0x104
    7250:	vdup.32	q10, r0
    7254:	movt	r4, #0
    7258:	vmov.32	d16[0], r4
    725c:	movw	r4, #0
    7260:	vmov.32	d17[1], r6
    7264:	vmov.32	d16[1], r3
    7268:	mov	r6, #0
    726c:	movt	r4, #0
    7270:	vmov.32	d19[0], r4
    7274:	vmov.32	d18[0], r5
    7278:	vmov.32	d19[1], r2
    727c:	vmov.32	d18[1], r1
    7280:	movw	r1, #0
    7284:	movw	r2, #0
    7288:	movt	r1, #0
    728c:	movt	r2, #0
    7290:	str	r1, [r7, #88]	; 0x58
    7294:	movw	r1, #0
    7298:	str	r0, [r7, #292]	; 0x124
    729c:	movt	r1, #0
    72a0:	str	r1, [r7, #120]	; 0x78
    72a4:	movw	r1, #0
    72a8:	str	r0, [r7, #304]	; 0x130
    72ac:	movt	r1, #0
    72b0:	str	r1, [r7, #132]	; 0x84
    72b4:	movw	r1, #0
    72b8:	str	r0, [r7, #332]	; 0x14c
    72bc:	movt	r1, #0
    72c0:	str	r1, [r7, #160]	; 0xa0
    72c4:	movw	r1, #0
    72c8:	str	r0, [r7, #360]	; 0x168
    72cc:	str	r0, [r7, #364]	; 0x16c
    72d0:	movt	r1, #0
    72d4:	str	r1, [r7, #188]	; 0xbc
    72d8:	str	r2, [r7, #192]	; 0xc0
    72dc:	str	r0, [r7, #392]	; 0x188
    72e0:	movw	r0, #0
    72e4:	movw	r1, #0
    72e8:	movw	r2, #0
    72ec:	movt	r0, #0
    72f0:	movt	r1, #0
    72f4:	movt	r2, #0
    72f8:	str	r0, [r7, #220]	; 0xdc
    72fc:	add	r0, r7, #224	; 0xe0
    7300:	vst1.32	{d20-d21}, [r0]
    7304:	add	r0, r7, #372	; 0x174
    7308:	vst1.32	{d20-d21}, [r0]
    730c:	add	r0, r7, #52	; 0x34
    7310:	vst1.32	{d16-d17}, [r0]
    7314:	add	r0, r7, #200	; 0xc8
    7318:	vst1.32	{d18-d19}, [r0]
    731c:	ldr	r0, [r9]
    7320:	str	r1, [r0, #296]	; 0x128
    7324:	movw	r1, #0
    7328:	movt	r1, #0
    732c:	str	r1, [r0, #124]	; 0x7c
    7330:	ldr	r0, [r9]
    7334:	str	r2, [r0, #340]	; 0x154
    7338:	str	r1, [r0, #168]	; 0xa8
    733c:	movw	r1, #0
    7340:	ldr	r0, [r9]
    7344:	movt	r1, #0
    7348:	str	r1, [r0, #244]	; 0xf4
    734c:	movw	r1, #0
    7350:	movt	r1, #0
    7354:	str	r1, [r0, #72]	; 0x48
    7358:	movw	r1, #0
    735c:	ldr	r0, [r9]
    7360:	movt	r1, #0
    7364:	str	r1, [r0, #248]	; 0xf8
    7368:	movw	r1, #0
    736c:	movt	r1, #0
    7370:	str	r1, [r0, #76]	; 0x4c
    7374:	movw	r1, #0
    7378:	ldr	r0, [r9]
    737c:	movt	r1, #0
    7380:	str	r1, [r0, #36]	; 0x24
    7384:	b	71e0 <cd_field_init+0x204>
    7388:	movw	r0, #0
    738c:	movw	r1, #0
    7390:	movw	r3, #0
    7394:	movw	r2, #1685	; 0x695
    7398:	movt	r0, #0
    739c:	movt	r1, #0
    73a0:	movt	r3, #0
    73a4:	bl	0 <__assert_fail>

000073a8 <cd_record_add_field>:
    73a8:	push	{r4, sl, fp, lr}
    73ac:	add	fp, sp, #8
    73b0:	mov	r4, r0
    73b4:	ldr	r0, [r0]
    73b8:	ldr	r1, [r0, #8]
    73bc:	ldr	r0, [r0, #396]	; 0x18c
    73c0:	ldr	r0, [r0, #8]
    73c4:	bl	0 <coda_type_record_add_field>
    73c8:	mov	r1, r0
    73cc:	mvn	r0, #0
    73d0:	cmp	r1, #0
    73d4:	popne	{r4, sl, fp, pc}
    73d8:	ldr	r1, [r4]
    73dc:	mov	r0, #0
    73e0:	str	r0, [r1, #8]
    73e4:	pop	{r4, sl, fp, pc}

000073e8 <cd_record_finalise>:
    73e8:	ldr	r0, [r0]
    73ec:	ldr	r0, [r0, #8]
    73f0:	b	0 <coda_type_record_validate>

000073f4 <handle_xml_name>:
    73f4:	push	{r4, r5, r6, sl, fp, lr}
    73f8:	add	fp, sp, #16
    73fc:	ldr	r5, [r0]
    7400:	ldr	r0, [r5, #48]	; 0x30
    7404:	cmp	r0, #0
    7408:	beq	74cc <handle_xml_name+0xd8>
    740c:	ldr	r2, [r5, #44]	; 0x2c
    7410:	mov	r0, #0
    7414:	cmp	r2, #2
    7418:	bne	74b0 <handle_xml_name+0xbc>
    741c:	ldr	r5, [r5, #396]	; 0x18c
    7420:	ldr	r2, [r5]
    7424:	cmn	r2, #1
    7428:	beq	74b0 <handle_xml_name+0xbc>
    742c:	cmp	r2, #14
    7430:	bne	741c <handle_xml_name+0x28>
    7434:	ldr	r0, [r1]
    7438:	cmp	r0, #0
    743c:	beq	74ac <handle_xml_name+0xb8>
    7440:	movw	r4, #0
    7444:	add	r6, r1, #4
    7448:	movt	r4, #0
    744c:	mov	r1, r4
    7450:	bl	0 <strcmp>
    7454:	cmp	r0, #0
    7458:	beq	7474 <handle_xml_name+0x80>
    745c:	ldr	r0, [r6, #4]
    7460:	add	r1, r6, #8
    7464:	mov	r6, r1
    7468:	cmp	r0, #0
    746c:	bne	744c <handle_xml_name+0x58>
    7470:	b	74ac <handle_xml_name+0xb8>
    7474:	ldr	r1, [r6]
    7478:	cmp	r1, #0
    747c:	beq	74ac <handle_xml_name+0xb8>
    7480:	ldr	r0, [r5, #8]
    7484:	ldr	r2, [r0, #4]
    7488:	cmp	r2, #0
    748c:	beq	74b4 <handle_xml_name+0xc0>
    7490:	movw	r0, #65136	; 0xfe70
    7494:	movw	r1, #0
    7498:	movt	r0, #65535	; 0xffff
    749c:	movt	r1, #0
    74a0:	bl	0 <coda_set_error>
    74a4:	mvn	r0, #0
    74a8:	pop	{r4, r5, r6, sl, fp, pc}
    74ac:	mov	r0, #0
    74b0:	pop	{r4, r5, r6, sl, fp, pc}
    74b4:	bl	0 <coda_type_record_field_set_real_name>
    74b8:	mov	r1, r0
    74bc:	mvn	r0, #0
    74c0:	cmp	r1, #0
    74c4:	moveq	r0, #0
    74c8:	pop	{r4, r5, r6, sl, fp, pc}
    74cc:	movw	r0, #0
    74d0:	movw	r1, #0
    74d4:	movw	r3, #0
    74d8:	mov	r2, #676	; 0x2a4
    74dc:	movt	r0, #0
    74e0:	movt	r1, #0
    74e4:	movt	r3, #0
    74e8:	bl	0 <__assert_fail>

000074ec <integer_expression_finalise>:
    74ec:	push	{r4, r5, r6, sl, fp, lr}
    74f0:	add	fp, sp, #16
    74f4:	sub	sp, sp, #8
    74f8:	mov	r6, r0
    74fc:	ldr	r0, [r0]
    7500:	ldr	r5, [r0, #12]
    7504:	cmp	r5, #0
    7508:	beq	7564 <integer_expression_finalise+0x78>
    750c:	mov	r0, r5
    7510:	bl	0 <strlen>
    7514:	cmp	r0, #1
    7518:	blt	7550 <integer_expression_finalise+0x64>
    751c:	movw	r3, #19
    7520:	mov	r1, #0
    7524:	mov	r2, #1
    7528:	movt	r3, #128	; 0x80
    752c:	ldrb	r4, [r5, r1]
    7530:	sub	r4, r4, #9
    7534:	cmp	r4, #23
    7538:	bhi	7588 <integer_expression_finalise+0x9c>
    753c:	tst	r3, r2, lsl r4
    7540:	beq	7588 <integer_expression_finalise+0x9c>
    7544:	add	r1, r1, #1
    7548:	cmp	r0, r1
    754c:	bne	752c <integer_expression_finalise+0x40>
    7550:	mov	r0, r5
    7554:	bl	0 <free>
    7558:	ldr	r0, [r6]
    755c:	mov	r1, #0
    7560:	str	r1, [r0, #12]
    7564:	movw	r0, #65136	; 0xfe70
    7568:	movw	r1, #0
    756c:	movt	r0, #65535	; 0xffff
    7570:	movt	r1, #0
    7574:	bl	0 <coda_set_error>
    7578:	mvn	r5, #0
    757c:	mov	r0, r5
    7580:	sub	sp, fp, #16
    7584:	pop	{r4, r5, r6, sl, fp, pc}
    7588:	mov	r1, sp
    758c:	mov	r0, r5
    7590:	bl	0 <coda_expression_from_string>
    7594:	cmp	r0, #0
    7598:	bne	7578 <integer_expression_finalise+0x8c>
    759c:	ldr	r0, [r6]
    75a0:	ldr	r0, [r0, #12]
    75a4:	bl	0 <free>
    75a8:	ldr	r0, [r6]
    75ac:	ldr	r4, [sp]
    75b0:	mov	r5, #0
    75b4:	add	r1, sp, #4
    75b8:	strd	r4, [r0, #8]
    75bc:	mov	r0, r4
    75c0:	bl	0 <coda_expression_get_type>
    75c4:	cmp	r0, #0
    75c8:	bne	7578 <integer_expression_finalise+0x8c>
    75cc:	ldr	r0, [sp, #4]
    75d0:	cmp	r0, #1
    75d4:	beq	757c <integer_expression_finalise+0x90>
    75d8:	movw	r0, #65136	; 0xfe70
    75dc:	movw	r1, #0
    75e0:	movt	r0, #65535	; 0xffff
    75e4:	movt	r1, #0
    75e8:	b	7574 <integer_expression_finalise+0x88>

000075ec <cd_field_set_bit_offset>:
    75ec:	push	{r4, sl, fp, lr}
    75f0:	add	fp, sp, #8
    75f4:	mov	r4, r0
    75f8:	ldr	r0, [r0]
    75fc:	ldr	r1, [r0, #8]
    7600:	ldr	r0, [r0, #396]	; 0x18c
    7604:	ldr	r0, [r0, #8]
    7608:	bl	0 <coda_type_record_field_set_bit_offset_expression>
    760c:	mov	r1, r0
    7610:	mvn	r0, #0
    7614:	cmp	r1, #0
    7618:	popne	{r4, sl, fp, pc}
    761c:	ldr	r1, [r4]
    7620:	mov	r0, #0
    7624:	str	r0, [r1, #8]
    7628:	pop	{r4, sl, fp, pc}

0000762c <cd_field_finalise>:
    762c:	ldr	r0, [r0]
    7630:	ldr	r0, [r0, #8]
    7634:	b	0 <coda_type_record_field_validate>

00007638 <cd_text_set_fixed_value>:
    7638:	push	{r4, sl, fp, lr}
    763c:	add	fp, sp, #8
    7640:	mov	r4, r0
    7644:	ldr	r0, [r0]
    7648:	ldr	r0, [r0, #12]
    764c:	bl	60f0 <decode_escaped_string>
    7650:	cmn	r0, #1
    7654:	ble	7670 <cd_text_set_fixed_value+0x38>
    7658:	ldr	r0, [r4]
    765c:	ldr	r1, [r0, #12]
    7660:	ldr	r0, [r0, #396]	; 0x18c
    7664:	ldr	r0, [r0, #8]
    7668:	pop	{r4, sl, fp, lr}
    766c:	b	0 <coda_type_text_set_fixed_value>
    7670:	movw	r0, #65136	; 0xfe70
    7674:	movw	r1, #0
    7678:	movt	r0, #65535	; 0xffff
    767c:	movt	r1, #0
    7680:	bl	0 <coda_set_error>
    7684:	mvn	r0, #0
    7688:	pop	{r4, sl, fp, pc}

0000768c <cd_text_set_read_type>:
    768c:	ldr	r0, [r0]
    7690:	ldr	r1, [r0, #16]
    7694:	ldr	r0, [r0, #396]	; 0x18c
    7698:	ldr	r0, [r0, #8]
    769c:	b	0 <coda_type_set_read_type>

000076a0 <cd_text_finalise>:
    76a0:	ldr	r0, [r0]
    76a4:	ldr	r0, [r0, #8]
    76a8:	b	0 <coda_type_text_validate>

000076ac <cd_time_set_type>:
    76ac:	ldr	r0, [r0]
    76b0:	ldr	r1, [r0, #8]
    76b4:	ldr	r0, [r0, #396]	; 0x18c
    76b8:	ldr	r0, [r0, #8]
    76bc:	b	0 <coda_type_time_set_base_type>

000076c0 <cd_time_add_mapping>:
    76c0:	push	{r4, sl, fp, lr}
    76c4:	add	fp, sp, #8
    76c8:	mov	r4, r0
    76cc:	ldr	r0, [r0]
    76d0:	ldr	r1, [r0, #8]
    76d4:	ldr	r0, [r0, #396]	; 0x18c
    76d8:	ldr	r0, [r0, #8]
    76dc:	bl	0 <coda_type_time_add_ascii_float_mapping>
    76e0:	mov	r1, r0
    76e4:	mvn	r0, #0
    76e8:	cmp	r1, #0
    76ec:	popne	{r4, sl, fp, pc}
    76f0:	ldr	r1, [r4]
    76f4:	mov	r0, #0
    76f8:	str	r0, [r1, #8]
    76fc:	pop	{r4, sl, fp, pc}

00007700 <cd_time_finalise>:
    7700:	ldr	r0, [r0]
    7704:	ldr	r0, [r0, #8]
    7708:	b	0 <coda_type_time_validate>

0000770c <cd_type_set_type>:
    770c:	push	{r4, r5, fp, lr}
    7710:	add	fp, sp, #8
    7714:	mov	r4, r0
    7718:	ldr	r0, [r0]
    771c:	ldr	r1, [r0, #396]	; 0x18c
    7720:	ldr	r5, [r1, #8]
    7724:	ldr	r1, [r5, #20]
    7728:	cmp	r1, #0
    772c:	beq	7738 <cd_type_set_type+0x2c>
    7730:	ldr	r0, [r0, #8]
    7734:	bl	0 <coda_type_set_description>
    7738:	ldr	r0, [r5, #36]	; 0x24
    773c:	cmp	r0, #0
    7740:	beq	7770 <cd_type_set_type+0x64>
    7744:	ldr	r1, [r4]
    7748:	ldr	r1, [r1, #8]
    774c:	ldr	r2, [r1, #36]	; 0x24
    7750:	cmp	r2, #0
    7754:	bne	7798 <cd_type_set_type+0x8c>
    7758:	str	r0, [r1, #36]	; 0x24
    775c:	ldr	r1, [r1]
    7760:	ldr	r0, [r5, #36]	; 0x24
    7764:	bl	77b8 <type_set_format>
    7768:	mov	r0, #0
    776c:	str	r0, [r5, #36]	; 0x24
    7770:	mov	r0, r5
    7774:	bl	0 <coda_type_release>
    7778:	ldr	r0, [r4]
    777c:	ldr	r1, [r0, #8]
    7780:	ldr	r2, [r0, #396]	; 0x18c
    7784:	str	r1, [r2, #8]
    7788:	mov	r1, #0
    778c:	str	r1, [r0, #8]
    7790:	mov	r0, #0
    7794:	pop	{r4, r5, fp, pc}
    7798:	movw	r0, #0
    779c:	movw	r1, #0
    77a0:	movw	r3, #0
    77a4:	movw	r2, #3653	; 0xe45
    77a8:	movt	r0, #0
    77ac:	movt	r1, #0
    77b0:	movt	r3, #0
    77b4:	bl	0 <__assert_fail>

000077b8 <type_set_format>:
    77b8:	push	{r4, r5, r6, sl, fp, lr}
    77bc:	add	fp, sp, #16
    77c0:	sub	sp, sp, #8
    77c4:	str	r1, [r0]
    77c8:	mov	r5, r0
    77cc:	mov	r4, r1
    77d0:	ldr	r0, [r0, #8]
    77d4:	cmp	r0, #6
    77d8:	beq	7830 <type_set_format+0x78>
    77dc:	cmp	r0, #1
    77e0:	beq	7838 <type_set_format+0x80>
    77e4:	cmp	r0, #0
    77e8:	bne	7844 <type_set_format+0x8c>
    77ec:	add	r1, sp, #4
    77f0:	mov	r0, r5
    77f4:	bl	0 <coda_type_get_num_record_fields>
    77f8:	ldr	r0, [sp, #4]
    77fc:	cmp	r0, #1
    7800:	blt	7844 <type_set_format+0x8c>
    7804:	mov	r6, #0
    7808:	ldr	r0, [r5, #52]	; 0x34
    780c:	mov	r1, r4
    7810:	ldr	r0, [r0, r6, lsl #2]
    7814:	ldr	r0, [r0, #8]
    7818:	bl	77b8 <type_set_format>
    781c:	ldr	r0, [sp, #4]
    7820:	add	r6, r6, #1
    7824:	cmp	r6, r0
    7828:	blt	7808 <type_set_format+0x50>
    782c:	b	7844 <type_set_format+0x8c>
    7830:	ldr	r0, [r5, #44]	; 0x2c
    7834:	b	783c <type_set_format+0x84>
    7838:	ldr	r0, [r5, #40]	; 0x28
    783c:	mov	r1, r4
    7840:	bl	77b8 <type_set_format>
    7844:	ldr	r0, [r5, #36]	; 0x24
    7848:	cmp	r0, #0
    784c:	movne	r1, r4
    7850:	blne	77b8 <type_set_format>
    7854:	sub	sp, fp, #16
    7858:	pop	{r4, r5, r6, sl, fp, pc}

0000785c <cd_union_set_field_expression>:
    785c:	push	{r4, sl, fp, lr}
    7860:	add	fp, sp, #8
    7864:	mov	r4, r0
    7868:	ldr	r0, [r0]
    786c:	ldr	r1, [r0, #8]
    7870:	ldr	r0, [r0, #396]	; 0x18c
    7874:	ldr	r0, [r0, #8]
    7878:	bl	0 <coda_type_union_set_field_expression>
    787c:	mov	r1, r0
    7880:	mvn	r0, #0
    7884:	cmp	r1, #0
    7888:	popne	{r4, sl, fp, pc}
    788c:	ldr	r1, [r4]
    7890:	mov	r0, #0
    7894:	str	r0, [r1, #8]
    7898:	pop	{r4, sl, fp, pc}

0000789c <cd_union_add_field>:
    789c:	push	{r4, sl, fp, lr}
    78a0:	add	fp, sp, #8
    78a4:	mov	r4, r0
    78a8:	ldr	r0, [r0]
    78ac:	ldr	r0, [r0, #8]
    78b0:	bl	0 <coda_type_record_field_set_optional>
    78b4:	ldr	r0, [r4]
    78b8:	ldr	r1, [r0, #8]
    78bc:	ldr	r0, [r0, #396]	; 0x18c
    78c0:	ldr	r0, [r0, #8]
    78c4:	bl	0 <coda_type_record_add_field>
    78c8:	mov	r1, r0
    78cc:	mvn	r0, #0
    78d0:	cmp	r1, #0
    78d4:	popne	{r4, sl, fp, pc}
    78d8:	ldr	r1, [r4]
    78dc:	mov	r0, #0
    78e0:	str	r0, [r1, #8]
    78e4:	pop	{r4, sl, fp, pc}

000078e8 <cd_union_finalise>:
    78e8:	ldr	r0, [r0]
    78ec:	ldr	r0, [r0, #8]
    78f0:	b	0 <coda_type_record_validate>

000078f4 <cd_vsf_integer_set_type>:
    78f4:	ldr	r0, [r0]
    78f8:	ldr	r1, [r0, #8]
    78fc:	ldr	r0, [r0, #396]	; 0x18c
    7900:	ldr	r0, [r0, #8]
    7904:	b	0 <coda_type_vsf_integer_set_type>

00007908 <cd_scale_factor_init>:
    7908:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
    790c:	add	fp, sp, #24
    7910:	ldr	r5, [r1]
    7914:	mov	r9, r1
    7918:	mov	r8, r0
    791c:	cmp	r5, #0
    7920:	beq	797c <cd_scale_factor_init+0x74>
    7924:	movw	r7, #0
    7928:	add	r4, r9, #4
    792c:	mov	r0, r5
    7930:	movt	r7, #0
    7934:	mov	r1, r7
    7938:	bl	0 <strcmp>
    793c:	cmp	r0, #0
    7940:	beq	795c <cd_scale_factor_init+0x54>
    7944:	ldr	r0, [r4, #4]
    7948:	add	r1, r4, #8
    794c:	mov	r4, r1
    7950:	cmp	r0, #0
    7954:	bne	7934 <cd_scale_factor_init+0x2c>
    7958:	b	797c <cd_scale_factor_init+0x74>
    795c:	ldr	r0, [r4]
    7960:	cmp	r0, #0
    7964:	beq	797c <cd_scale_factor_init+0x74>
    7968:	movw	r0, #65136	; 0xfe70
    796c:	movw	r1, #0
    7970:	movt	r0, #65535	; 0xffff
    7974:	movt	r1, #0
    7978:	b	7a54 <cd_scale_factor_init+0x14c>
    797c:	ldr	r4, [r8]
    7980:	ldr	r0, [r4, #396]	; 0x18c
    7984:	ldr	r1, [r0, #48]	; 0x30
    7988:	cmp	r1, #0
    798c:	beq	7b9c <cd_scale_factor_init+0x294>
    7990:	ldr	r0, [r0, #44]	; 0x2c
    7994:	cmp	r5, #0
    7998:	mov	r1, #1
    799c:	str	r0, [r4, #44]	; 0x2c
    79a0:	str	r1, [r4, #48]	; 0x30
    79a4:	beq	7a60 <cd_scale_factor_init+0x158>
    79a8:	movw	r7, #0
    79ac:	add	r6, r9, #4
    79b0:	mov	r0, r5
    79b4:	movt	r7, #0
    79b8:	mov	r1, r7
    79bc:	bl	0 <strcmp>
    79c0:	cmp	r0, #0
    79c4:	beq	79e0 <cd_scale_factor_init+0xd8>
    79c8:	ldr	r0, [r6, #4]
    79cc:	add	r1, r6, #8
    79d0:	mov	r6, r1
    79d4:	cmp	r0, #0
    79d8:	bne	79b8 <cd_scale_factor_init+0xb0>
    79dc:	b	7a00 <cd_scale_factor_init+0xf8>
    79e0:	ldr	r0, [r6]
    79e4:	cmp	r0, #0
    79e8:	beq	7a00 <cd_scale_factor_init+0xf8>
    79ec:	movw	r0, #65136	; 0xfe70
    79f0:	movw	r1, #0
    79f4:	movt	r0, #65535	; 0xffff
    79f8:	movt	r1, #0
    79fc:	b	7a54 <cd_scale_factor_init+0x14c>
    7a00:	movw	r6, #0
    7a04:	add	r7, r9, #4
    7a08:	movt	r6, #0
    7a0c:	mov	r0, r5
    7a10:	mov	r1, r6
    7a14:	bl	0 <strcmp>
    7a18:	cmp	r0, #0
    7a1c:	beq	7a38 <cd_scale_factor_init+0x130>
    7a20:	ldr	r5, [r7, #4]
    7a24:	add	r0, r7, #8
    7a28:	mov	r7, r0
    7a2c:	cmp	r5, #0
    7a30:	bne	7a0c <cd_scale_factor_init+0x104>
    7a34:	b	7a60 <cd_scale_factor_init+0x158>
    7a38:	ldr	r0, [r7]
    7a3c:	cmp	r0, #0
    7a40:	beq	7a60 <cd_scale_factor_init+0x158>
    7a44:	movw	r0, #65136	; 0xfe70
    7a48:	movw	r1, #0
    7a4c:	movt	r0, #65535	; 0xffff
    7a50:	movt	r1, #0
    7a54:	bl	0 <coda_set_error>
    7a58:	mvn	r0, #0
    7a5c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
    7a60:	movw	r1, #0
    7a64:	movw	r3, #0
    7a68:	movw	r7, #0
    7a6c:	movw	r6, #0
    7a70:	movw	r5, #0
    7a74:	add	r0, r4, #52	; 0x34
    7a78:	movt	r1, #0
    7a7c:	movt	r5, #0
    7a80:	movt	r3, #0
    7a84:	movt	r7, #0
    7a88:	movt	r6, #0
    7a8c:	add	r2, r0, #172	; 0xac
    7a90:	str	r1, [r4, #40]	; 0x28
    7a94:	movw	r1, #0
    7a98:	vmov.32	d19[0], r5
    7a9c:	vmov.32	d18[0], r6
    7aa0:	vmov.32	d19[1], r7
    7aa4:	vmov.32	d18[1], r3
    7aa8:	mov	r3, r0
    7aac:	movw	r7, #0
    7ab0:	movw	r6, #0
    7ab4:	movw	r5, #0
    7ab8:	add	r0, r0, #148	; 0x94
    7abc:	movt	r1, #0
    7ac0:	movt	r7, #0
    7ac4:	movt	r6, #0
    7ac8:	movt	r5, #0
    7acc:	vdup.32	q8, r1
    7ad0:	vst1.32	{d16-d17}, [r2]
    7ad4:	mov	r2, #320	; 0x140
    7ad8:	vst1.32	{d18-d19}, [r3], r2
    7adc:	movw	r2, #0
    7ae0:	str	r1, [r4, #260]	; 0x104
    7ae4:	vmov.32	d19[0], r5
    7ae8:	vmov.32	d18[0], r6
    7aec:	movt	r2, #0
    7af0:	str	r2, [r4, #88]	; 0x58
    7af4:	movw	r2, #0
    7af8:	str	r1, [r4, #292]	; 0x124
    7afc:	movt	r2, #0
    7b00:	str	r2, [r4, #120]	; 0x78
    7b04:	movw	r2, #0
    7b08:	str	r1, [r4, #304]	; 0x130
    7b0c:	movt	r2, #0
    7b10:	str	r2, [r4, #132]	; 0x84
    7b14:	movw	r2, #0
    7b18:	str	r1, [r4, #332]	; 0x14c
    7b1c:	movt	r2, #0
    7b20:	str	r2, [r4, #160]	; 0xa0
    7b24:	movw	r2, #0
    7b28:	str	r1, [r4, #360]	; 0x168
    7b2c:	str	r1, [r4, #364]	; 0x16c
    7b30:	movt	r2, #0
    7b34:	str	r2, [r4, #188]	; 0xbc
    7b38:	str	r7, [r4, #192]	; 0xc0
    7b3c:	movw	r2, #0
    7b40:	movw	r7, #0
    7b44:	vst1.32	{d16-d17}, [r3]
    7b48:	movt	r7, #0
    7b4c:	movt	r2, #0
    7b50:	vmov.32	d19[1], r7
    7b54:	vmov.32	d18[1], r2
    7b58:	vst1.32	{d18-d19}, [r0]
    7b5c:	movw	r0, #0
    7b60:	str	r1, [r4, #392]	; 0x188
    7b64:	movw	r1, #0
    7b68:	movt	r0, #0
    7b6c:	movt	r1, #0
    7b70:	str	r0, [r4, #220]	; 0xdc
    7b74:	ldr	r0, [r8]
    7b78:	str	r1, [r0, #268]	; 0x10c
    7b7c:	movw	r1, #0
    7b80:	movt	r1, #0
    7b84:	str	r1, [r0, #96]	; 0x60
    7b88:	movw	r1, #0
    7b8c:	movt	r1, #0
    7b90:	str	r1, [r0, #36]	; 0x24
    7b94:	mov	r0, #0
    7b98:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
    7b9c:	movw	r0, #0
    7ba0:	movw	r1, #0
    7ba4:	movw	r3, #0
    7ba8:	movw	r2, #3242	; 0xcaa
    7bac:	movt	r0, #0
    7bb0:	movt	r1, #0
    7bb4:	movt	r3, #0
    7bb8:	bl	0 <__assert_fail>

00007bbc <cd_vsf_integer_set_scale_factor>:
    7bbc:	ldr	r0, [r0]
    7bc0:	ldr	r1, [r0, #8]
    7bc4:	ldr	r0, [r0, #396]	; 0x18c
    7bc8:	ldr	r0, [r0, #8]
    7bcc:	b	0 <coda_type_vsf_integer_set_scale_factor>

00007bd0 <cd_vsf_integer_set_unit>:
    7bd0:	ldr	r0, [r0]
    7bd4:	ldr	r1, [r0, #12]
    7bd8:	ldr	r0, [r0, #396]	; 0x18c
    7bdc:	cmp	r1, #0
    7be0:	ldr	r0, [r0, #8]
    7be4:	movweq	r1, #0
    7be8:	movteq	r1, #0
    7bec:	b	0 <coda_type_vsf_integer_set_unit>

00007bf0 <cd_vsf_integer_finalise>:
    7bf0:	ldr	r0, [r0]
    7bf4:	ldr	r0, [r0, #8]
    7bf8:	b	0 <coda_type_vsf_integer_validate>

00007bfc <cd_scale_factor_set_type>:
    7bfc:	ldr	r0, [r0]
    7c00:	ldr	r1, [r0, #8]
    7c04:	ldr	r2, [r0, #396]	; 0x18c
    7c08:	str	r1, [r2, #8]
    7c0c:	mov	r1, #0
    7c10:	str	r1, [r0, #8]
    7c14:	mov	r0, #0
    7c18:	bx	lr

00007c1c <cd_scale_factor_finalise>:
    7c1c:	push	{fp, lr}
    7c20:	mov	fp, sp
    7c24:	ldr	r0, [r0]
    7c28:	ldr	r1, [r0, #8]
    7c2c:	mov	r0, #0
    7c30:	cmp	r1, #0
    7c34:	popne	{fp, pc}
    7c38:	movw	r0, #65136	; 0xfe70
    7c3c:	movw	r1, #0
    7c40:	movt	r0, #65535	; 0xffff
    7c44:	movt	r1, #0
    7c48:	bl	0 <coda_set_error>
    7c4c:	mvn	r0, #0
    7c50:	pop	{fp, pc}

00007c54 <dummy_free_handler>:
    7c54:	bx	lr

00007c58 <xml_root_init>:
    7c58:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7c5c:	add	fp, sp, #28
    7c60:	sub	sp, sp, #4
    7c64:	mov	r5, r0
    7c68:	ldr	r0, [r0, #28]
    7c6c:	cmp	r0, #0
    7c70:	beq	7e04 <xml_root_init+0x1ac>
    7c74:	mov	r0, r5
    7c78:	mov	r9, r1
    7c7c:	bl	5424 <handle_format_attribute_for_type>
    7c80:	mvn	r8, #0
    7c84:	cmp	r0, #0
    7c88:	bne	7df8 <xml_root_init+0x1a0>
    7c8c:	ldr	r6, [r5]
    7c90:	ldr	r0, [r6, #44]	; 0x2c
    7c94:	cmp	r0, #2
    7c98:	bne	7ce4 <xml_root_init+0x8c>
    7c9c:	ldr	r7, [r9]
    7ca0:	cmp	r7, #0
    7ca4:	beq	7d8c <xml_root_init+0x134>
    7ca8:	movw	r4, #0
    7cac:	str	r6, [sp]
    7cb0:	add	r6, r9, #4
    7cb4:	mov	r0, r7
    7cb8:	movt	r4, #0
    7cbc:	mov	r1, r4
    7cc0:	bl	0 <strcmp>
    7cc4:	cmp	r0, #0
    7cc8:	beq	7d0c <xml_root_init+0xb4>
    7ccc:	ldr	r0, [r6, #4]
    7cd0:	add	r1, r6, #8
    7cd4:	mov	r6, r1
    7cd8:	cmp	r0, #0
    7cdc:	bne	7cbc <xml_root_init+0x64>
    7ce0:	b	7d2c <xml_root_init+0xd4>
    7ce4:	bl	0 <coda_type_get_format_name>
    7ce8:	mov	r2, r0
    7cec:	ldr	r0, [r5, #28]
    7cf0:	movw	r1, #0
    7cf4:	movt	r1, #0
    7cf8:	ldr	r3, [r0, #8]
    7cfc:	movw	r0, #65136	; 0xfe70
    7d00:	movt	r0, #65535	; 0xffff
    7d04:	bl	0 <coda_set_error>
    7d08:	b	7df8 <xml_root_init+0x1a0>
    7d0c:	ldr	r0, [r6]
    7d10:	cmp	r0, #0
    7d14:	beq	7d2c <xml_root_init+0xd4>
    7d18:	movw	r0, #65136	; 0xfe70
    7d1c:	movw	r1, #0
    7d20:	movt	r0, #65535	; 0xffff
    7d24:	movt	r1, #0
    7d28:	b	7d84 <xml_root_init+0x12c>
    7d2c:	ldr	r6, [sp]
    7d30:	movw	sl, #0
    7d34:	add	r4, r9, #4
    7d38:	movt	sl, #0
    7d3c:	mov	r0, r7
    7d40:	mov	r1, sl
    7d44:	bl	0 <strcmp>
    7d48:	cmp	r0, #0
    7d4c:	beq	7d68 <xml_root_init+0x110>
    7d50:	ldr	r7, [r4, #4]
    7d54:	add	r0, r4, #8
    7d58:	mov	r4, r0
    7d5c:	cmp	r7, #0
    7d60:	bne	7d3c <xml_root_init+0xe4>
    7d64:	b	7d8c <xml_root_init+0x134>
    7d68:	ldr	r0, [r4]
    7d6c:	cmp	r0, #0
    7d70:	beq	7d8c <xml_root_init+0x134>
    7d74:	movw	r0, #65136	; 0xfe70
    7d78:	movw	r1, #0
    7d7c:	movt	r0, #65535	; 0xffff
    7d80:	movt	r1, #0
    7d84:	bl	0 <coda_set_error>
    7d88:	b	7df8 <xml_root_init+0x1a0>
    7d8c:	movw	r0, #0
    7d90:	movt	r0, #0
    7d94:	str	r0, [r6, #40]	; 0x28
    7d98:	mov	r0, #2
    7d9c:	bl	0 <coda_type_record_new>
    7da0:	ldr	r1, [r5]
    7da4:	str	r0, [r1, #8]
    7da8:	mov	r0, r5
    7dac:	mov	r1, r9
    7db0:	bl	5568 <handle_name_attribute_for_type>
    7db4:	cmp	r0, #0
    7db8:	bne	7df8 <xml_root_init+0x1a0>
    7dbc:	ldr	r0, [r5]
    7dc0:	movw	r1, #0
    7dc4:	mov	r8, #0
    7dc8:	movt	r1, #0
    7dcc:	str	r1, [r0, #268]	; 0x10c
    7dd0:	movw	r1, #0
    7dd4:	movt	r1, #0
    7dd8:	str	r1, [r0, #96]	; 0x60
    7ddc:	movw	r1, #0
    7de0:	ldr	r0, [r5]
    7de4:	movt	r1, #0
    7de8:	str	r1, [r0, #280]	; 0x118
    7dec:	movw	r1, #0
    7df0:	movt	r1, #0
    7df4:	str	r1, [r0, #108]	; 0x6c
    7df8:	mov	r0, r8
    7dfc:	sub	sp, fp, #28
    7e00:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7e04:	movw	r0, #0
    7e08:	movw	r1, #0
    7e0c:	movw	r3, #0
    7e10:	mov	r2, #1184	; 0x4a0
    7e14:	movt	r0, #0
    7e18:	movt	r1, #0
    7e1c:	movt	r3, #0
    7e20:	bl	0 <__assert_fail>

00007e24 <cd_product_definition_set_root_type>:
    7e24:	push	{fp, lr}
    7e28:	mov	fp, sp
    7e2c:	ldr	r0, [r0]
    7e30:	ldr	r1, [r0, #8]
    7e34:	ldr	r0, [r0, #396]	; 0x18c
    7e38:	ldr	r0, [r0, #8]
    7e3c:	bl	0 <coda_product_definition_set_root_type>
    7e40:	cmp	r0, #0
    7e44:	mvnne	r0, #0
    7e48:	pop	{fp, pc}

00007e4c <cd_product_variable_init>:
    7e4c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
    7e50:	add	fp, sp, #24
    7e54:	mov	r8, r0
    7e58:	ldr	r0, [r1]
    7e5c:	ldr	r7, [r8]
    7e60:	cmp	r0, #0
    7e64:	ldr	r6, [r7]
    7e68:	beq	7f18 <cd_product_variable_init+0xcc>
    7e6c:	movw	r5, #0
    7e70:	add	r4, r1, #4
    7e74:	movt	r5, #0
    7e78:	mov	r1, r5
    7e7c:	bl	0 <strcmp>
    7e80:	cmp	r0, #0
    7e84:	beq	7ea0 <cd_product_variable_init+0x54>
    7e88:	ldr	r0, [r4, #4]
    7e8c:	add	r1, r4, #8
    7e90:	mov	r4, r1
    7e94:	cmp	r0, #0
    7e98:	bne	7e78 <cd_product_variable_init+0x2c>
    7e9c:	b	7f18 <cd_product_variable_init+0xcc>
    7ea0:	ldr	r0, [r4]
    7ea4:	cmp	r0, #0
    7ea8:	beq	7f18 <cd_product_variable_init+0xcc>
    7eac:	movw	r1, #0
    7eb0:	movt	r1, #0
    7eb4:	str	r1, [r7, #40]	; 0x28
    7eb8:	bl	0 <coda_product_variable_new>
    7ebc:	ldr	r1, [r8]
    7ec0:	cmp	r0, #0
    7ec4:	str	r0, [r1, #8]
    7ec8:	beq	7f60 <cd_product_variable_init+0x114>
    7ecc:	movw	r0, #0
    7ed0:	movt	r0, #0
    7ed4:	str	r0, [r1, #276]	; 0x114
    7ed8:	movw	r0, #0
    7edc:	movt	r0, #0
    7ee0:	str	r0, [r1, #104]	; 0x68
    7ee4:	movw	r1, #0
    7ee8:	ldr	r0, [r8]
    7eec:	movt	r1, #0
    7ef0:	str	r1, [r0, #300]	; 0x12c
    7ef4:	movw	r1, #0
    7ef8:	movt	r1, #0
    7efc:	str	r1, [r0, #128]	; 0x80
    7f00:	movw	r1, #0
    7f04:	ldr	r0, [r8]
    7f08:	movt	r1, #0
    7f0c:	str	r1, [r0, #36]	; 0x24
    7f10:	mov	r0, #0
    7f14:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
    7f18:	cmn	r6, #1
    7f1c:	beq	7f3c <cd_product_variable_init+0xf0>
    7f20:	movw	r0, #0
    7f24:	movt	r0, #0
    7f28:	ldr	r3, [r0, r6, lsl #2]
    7f2c:	ldrb	r0, [r3], #1
    7f30:	cmp	r0, #32
    7f34:	bne	7f2c <cd_product_variable_init+0xe0>
    7f38:	b	7f44 <cd_product_variable_init+0xf8>
    7f3c:	movw	r3, #0
    7f40:	movt	r3, #0
    7f44:	movw	r0, #65136	; 0xfe70
    7f48:	movw	r1, #0
    7f4c:	movw	r2, #0
    7f50:	movt	r0, #65535	; 0xffff
    7f54:	movt	r1, #0
    7f58:	movt	r2, #0
    7f5c:	bl	0 <coda_set_error>
    7f60:	mvn	r0, #0
    7f64:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

00007f68 <cd_product_definition_add_product_variable>:
    7f68:	push	{r4, sl, fp, lr}
    7f6c:	add	fp, sp, #8
    7f70:	mov	r4, r0
    7f74:	ldr	r0, [r0]
    7f78:	ldr	r1, [r0, #8]
    7f7c:	ldr	r0, [r0, #396]	; 0x18c
    7f80:	ldr	r0, [r0, #8]
    7f84:	bl	0 <coda_product_definition_add_product_variable>
    7f88:	mov	r1, r0
    7f8c:	mvn	r0, #0
    7f90:	cmp	r1, #0
    7f94:	popne	{r4, sl, fp, pc}
    7f98:	ldr	r1, [r4]
    7f9c:	mov	r0, #0
    7fa0:	str	r0, [r1, #8]
    7fa4:	pop	{r4, sl, fp, pc}

00007fa8 <cd_product_definition_finalise>:
    7fa8:	ldr	r0, [r0]
    7fac:	ldr	r0, [r0, #8]
    7fb0:	b	0 <coda_product_definition_validate>

00007fb4 <xml_root_set_field>:
    7fb4:	push	{r4, sl, fp, lr}
    7fb8:	add	fp, sp, #8
    7fbc:	mov	r4, r0
    7fc0:	ldr	r0, [r0]
    7fc4:	ldr	r1, [r0, #8]
    7fc8:	ldr	r0, [r0, #396]	; 0x18c
    7fcc:	ldr	r0, [r0, #8]
    7fd0:	bl	0 <coda_type_record_add_field>
    7fd4:	mov	r1, r0
    7fd8:	mvn	r0, #0
    7fdc:	cmp	r1, #0
    7fe0:	popne	{r4, sl, fp, pc}
    7fe4:	ldr	r1, [r4]
    7fe8:	mov	r0, #0
    7fec:	str	r0, [r1, #8]
    7ff0:	pop	{r4, sl, fp, pc}

00007ff4 <cd_product_variable_set_size_expression>:
    7ff4:	push	{r4, sl, fp, lr}
    7ff8:	add	fp, sp, #8
    7ffc:	mov	r4, r0
    8000:	ldr	r0, [r0]
    8004:	ldr	r1, [r0, #8]
    8008:	ldr	r0, [r0, #396]	; 0x18c
    800c:	ldr	r0, [r0, #8]
    8010:	bl	0 <coda_product_variable_set_size_expression>
    8014:	mov	r1, r0
    8018:	mvn	r0, #0
    801c:	cmp	r1, #0
    8020:	popne	{r4, sl, fp, pc}
    8024:	ldr	r1, [r4]
    8028:	mov	r0, #0
    802c:	str	r0, [r1, #8]
    8030:	pop	{r4, sl, fp, pc}

00008034 <void_expression_init>:
    8034:	ldr	r0, [r0]
    8038:	movw	r1, #0
    803c:	movw	r3, #0
    8040:	mov	r2, #1
    8044:	movt	r1, #0
    8048:	movt	r3, #0
    804c:	str	r2, [r0, #32]
    8050:	str	r3, [r0, #36]	; 0x24
    8054:	str	r1, [r0, #40]	; 0x28
    8058:	mov	r0, #0
    805c:	bx	lr

00008060 <cd_product_variable_set_init_expression>:
    8060:	push	{r4, sl, fp, lr}
    8064:	add	fp, sp, #8
    8068:	mov	r4, r0
    806c:	ldr	r0, [r0]
    8070:	ldr	r1, [r0, #8]
    8074:	ldr	r0, [r0, #396]	; 0x18c
    8078:	ldr	r0, [r0, #8]
    807c:	bl	0 <coda_product_variable_set_init_expression>
    8080:	mov	r1, r0
    8084:	mvn	r0, #0
    8088:	cmp	r1, #0
    808c:	popne	{r4, sl, fp, pc}
    8090:	ldr	r1, [r4]
    8094:	mov	r0, #0
    8098:	str	r0, [r1, #8]
    809c:	pop	{r4, sl, fp, pc}

000080a0 <cd_product_variable_finalise>:
    80a0:	ldr	r0, [r0]
    80a4:	ldr	r0, [r0, #8]
    80a8:	b	0 <coda_product_variable_validate>

000080ac <void_expression_finalise>:
    80ac:	push	{r4, r5, r6, sl, fp, lr}
    80b0:	add	fp, sp, #16
    80b4:	sub	sp, sp, #8
    80b8:	mov	r6, r0
    80bc:	ldr	r0, [r0]
    80c0:	ldr	r5, [r0, #12]
    80c4:	cmp	r5, #0
    80c8:	beq	8124 <void_expression_finalise+0x78>
    80cc:	mov	r0, r5
    80d0:	bl	0 <strlen>
    80d4:	cmp	r0, #1
    80d8:	blt	8110 <void_expression_finalise+0x64>
    80dc:	movw	r3, #19
    80e0:	mov	r1, #0
    80e4:	mov	r2, #1
    80e8:	movt	r3, #128	; 0x80
    80ec:	ldrb	r4, [r5, r1]
    80f0:	sub	r4, r4, #9
    80f4:	cmp	r4, #23
    80f8:	bhi	8148 <void_expression_finalise+0x9c>
    80fc:	tst	r3, r2, lsl r4
    8100:	beq	8148 <void_expression_finalise+0x9c>
    8104:	add	r1, r1, #1
    8108:	cmp	r0, r1
    810c:	bne	80ec <void_expression_finalise+0x40>
    8110:	mov	r0, r5
    8114:	bl	0 <free>
    8118:	ldr	r0, [r6]
    811c:	mov	r1, #0
    8120:	str	r1, [r0, #12]
    8124:	movw	r0, #65136	; 0xfe70
    8128:	movw	r1, #0
    812c:	movt	r0, #65535	; 0xffff
    8130:	movt	r1, #0
    8134:	bl	0 <coda_set_error>
    8138:	mvn	r5, #0
    813c:	mov	r0, r5
    8140:	sub	sp, fp, #16
    8144:	pop	{r4, r5, r6, sl, fp, pc}
    8148:	mov	r1, sp
    814c:	mov	r0, r5
    8150:	bl	0 <coda_expression_from_string>
    8154:	cmp	r0, #0
    8158:	bne	8138 <void_expression_finalise+0x8c>
    815c:	ldr	r0, [r6]
    8160:	ldr	r0, [r0, #12]
    8164:	bl	0 <free>
    8168:	ldr	r0, [r6]
    816c:	ldr	r4, [sp]
    8170:	mov	r5, #0
    8174:	add	r1, sp, #4
    8178:	strd	r4, [r0, #8]
    817c:	mov	r0, r4
    8180:	bl	0 <coda_expression_get_type>
    8184:	cmp	r0, #0
    8188:	bne	8138 <void_expression_finalise+0x8c>
    818c:	ldr	r0, [sp, #4]
    8190:	cmp	r0, #5
    8194:	beq	813c <void_expression_finalise+0x90>
    8198:	movw	r0, #65136	; 0xfe70
    819c:	movw	r1, #0
    81a0:	movt	r0, #65535	; 0xffff
    81a4:	movt	r1, #0
    81a8:	b	8134 <void_expression_finalise+0x88>
