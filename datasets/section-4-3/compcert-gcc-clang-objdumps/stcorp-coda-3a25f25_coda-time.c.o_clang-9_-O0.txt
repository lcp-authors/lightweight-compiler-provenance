
../compcert-repos/stcorp-coda-3a25f25/CMakeFiles/coda_static.dir/libcoda/coda-time.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <coda_month_to_integer>:
       0:	push	{fp, lr}
       4:	mov	fp, sp
       8:	sub	sp, sp, #16
       c:	add	r1, sp, #4
      10:	str	r0, [sp, #8]
      14:	ldr	r0, [sp, #8]
      18:	ldrb	r0, [r0]
      1c:	strb	r0, [sp, #4]
      20:	ldr	r0, [sp, #8]
      24:	ldrb	r0, [r0, #1]
      28:	strb	r0, [sp, #5]
      2c:	ldr	r0, [sp, #8]
      30:	ldrb	r0, [r0, #2]
      34:	strb	r0, [sp, #6]
      38:	movw	r0, #0
      3c:	strb	r0, [sp, #7]
      40:	mov	r0, r1
      44:	movw	r1, #0
      48:	movt	r1, #0
      4c:	movw	r2, #3
      50:	bl	0 <strncasecmp>
      54:	cmp	r0, #0
      58:	bne	68 <coda_month_to_integer+0x68>
      5c:	movw	r0, #1
      60:	str	r0, [fp, #-4]
      64:	b	23c <coda_month_to_integer+0x23c>
      68:	add	r0, sp, #4
      6c:	movw	r1, #0
      70:	movt	r1, #0
      74:	movw	r2, #3
      78:	bl	0 <strncasecmp>
      7c:	cmp	r0, #0
      80:	bne	90 <coda_month_to_integer+0x90>
      84:	movw	r0, #2
      88:	str	r0, [fp, #-4]
      8c:	b	23c <coda_month_to_integer+0x23c>
      90:	add	r0, sp, #4
      94:	movw	r1, #0
      98:	movt	r1, #0
      9c:	movw	r2, #3
      a0:	bl	0 <strncasecmp>
      a4:	cmp	r0, #0
      a8:	bne	b8 <coda_month_to_integer+0xb8>
      ac:	movw	r0, #3
      b0:	str	r0, [fp, #-4]
      b4:	b	23c <coda_month_to_integer+0x23c>
      b8:	add	r0, sp, #4
      bc:	movw	r1, #0
      c0:	movt	r1, #0
      c4:	movw	r2, #3
      c8:	bl	0 <strncasecmp>
      cc:	cmp	r0, #0
      d0:	bne	e0 <coda_month_to_integer+0xe0>
      d4:	movw	r0, #4
      d8:	str	r0, [fp, #-4]
      dc:	b	23c <coda_month_to_integer+0x23c>
      e0:	add	r0, sp, #4
      e4:	movw	r1, #0
      e8:	movt	r1, #0
      ec:	movw	r2, #3
      f0:	bl	0 <strncasecmp>
      f4:	cmp	r0, #0
      f8:	bne	108 <coda_month_to_integer+0x108>
      fc:	movw	r0, #5
     100:	str	r0, [fp, #-4]
     104:	b	23c <coda_month_to_integer+0x23c>
     108:	add	r0, sp, #4
     10c:	movw	r1, #0
     110:	movt	r1, #0
     114:	movw	r2, #3
     118:	bl	0 <strncasecmp>
     11c:	cmp	r0, #0
     120:	bne	130 <coda_month_to_integer+0x130>
     124:	movw	r0, #6
     128:	str	r0, [fp, #-4]
     12c:	b	23c <coda_month_to_integer+0x23c>
     130:	add	r0, sp, #4
     134:	movw	r1, #0
     138:	movt	r1, #0
     13c:	movw	r2, #3
     140:	bl	0 <strncasecmp>
     144:	cmp	r0, #0
     148:	bne	158 <coda_month_to_integer+0x158>
     14c:	movw	r0, #7
     150:	str	r0, [fp, #-4]
     154:	b	23c <coda_month_to_integer+0x23c>
     158:	add	r0, sp, #4
     15c:	movw	r1, #0
     160:	movt	r1, #0
     164:	movw	r2, #3
     168:	bl	0 <strncasecmp>
     16c:	cmp	r0, #0
     170:	bne	180 <coda_month_to_integer+0x180>
     174:	movw	r0, #8
     178:	str	r0, [fp, #-4]
     17c:	b	23c <coda_month_to_integer+0x23c>
     180:	add	r0, sp, #4
     184:	movw	r1, #0
     188:	movt	r1, #0
     18c:	movw	r2, #3
     190:	bl	0 <strncasecmp>
     194:	cmp	r0, #0
     198:	bne	1a8 <coda_month_to_integer+0x1a8>
     19c:	movw	r0, #9
     1a0:	str	r0, [fp, #-4]
     1a4:	b	23c <coda_month_to_integer+0x23c>
     1a8:	add	r0, sp, #4
     1ac:	movw	r1, #0
     1b0:	movt	r1, #0
     1b4:	movw	r2, #3
     1b8:	bl	0 <strncasecmp>
     1bc:	cmp	r0, #0
     1c0:	bne	1d0 <coda_month_to_integer+0x1d0>
     1c4:	movw	r0, #10
     1c8:	str	r0, [fp, #-4]
     1cc:	b	23c <coda_month_to_integer+0x23c>
     1d0:	add	r0, sp, #4
     1d4:	movw	r1, #0
     1d8:	movt	r1, #0
     1dc:	movw	r2, #3
     1e0:	bl	0 <strncasecmp>
     1e4:	cmp	r0, #0
     1e8:	bne	1f8 <coda_month_to_integer+0x1f8>
     1ec:	movw	r0, #11
     1f0:	str	r0, [fp, #-4]
     1f4:	b	23c <coda_month_to_integer+0x23c>
     1f8:	add	r0, sp, #4
     1fc:	movw	r1, #0
     200:	movt	r1, #0
     204:	movw	r2, #3
     208:	bl	0 <strncasecmp>
     20c:	cmp	r0, #0
     210:	bne	220 <coda_month_to_integer+0x220>
     214:	movw	r0, #12
     218:	str	r0, [fp, #-4]
     21c:	b	23c <coda_month_to_integer+0x23c>
     220:	add	r2, sp, #4
     224:	mvn	r0, #99	; 0x63
     228:	movw	r1, #0
     22c:	movt	r1, #0
     230:	bl	0 <coda_set_error>
     234:	mvn	r0, #0
     238:	str	r0, [fp, #-4]
     23c:	ldr	r0, [fp, #-4]
     240:	mov	sp, fp
     244:	pop	{fp, pc}

00000248 <coda_dayofyear_to_month_day>:
     248:	push	{fp, lr}
     24c:	mov	fp, sp
     250:	sub	sp, sp, #32
     254:	str	r0, [fp, #-8]
     258:	str	r1, [fp, #-12]
     25c:	str	r2, [sp, #16]
     260:	str	r3, [sp, #12]
     264:	ldr	r0, [sp, #16]
     268:	movw	r1, #0
     26c:	cmp	r0, r1
     270:	beq	284 <coda_dayofyear_to_month_day+0x3c>
     274:	ldr	r0, [sp, #12]
     278:	movw	r1, #0
     27c:	cmp	r0, r1
     280:	bne	2ac <coda_dayofyear_to_month_day+0x64>
     284:	mvn	r0, #99	; 0x63
     288:	movw	r1, #0
     28c:	movt	r1, #0
     290:	movw	r2, #0
     294:	movt	r2, #0
     298:	movw	r3, #549	; 0x225
     29c:	bl	0 <coda_set_error>
     2a0:	mvn	r0, #0
     2a4:	str	r0, [fp, #-4]
     2a8:	b	358 <coda_dayofyear_to_month_day+0x110>
     2ac:	ldr	r0, [fp, #-12]
     2b0:	cmp	r0, #0
     2b4:	blt	2c8 <coda_dayofyear_to_month_day+0x80>
     2b8:	ldr	r0, [fp, #-12]
     2bc:	movw	r1, #366	; 0x16e
     2c0:	cmp	r0, r1
     2c4:	ble	2e8 <coda_dayofyear_to_month_day+0xa0>
     2c8:	ldr	r2, [fp, #-12]
     2cc:	mvn	r0, #103	; 0x67
     2d0:	movw	r1, #0
     2d4:	movt	r1, #0
     2d8:	bl	0 <coda_set_error>
     2dc:	mvn	r0, #0
     2e0:	str	r0, [fp, #-4]
     2e4:	b	358 <coda_dayofyear_to_month_day+0x110>
     2e8:	ldr	r2, [fp, #-8]
     2ec:	movw	r0, #1
     2f0:	str	r0, [sp, #4]
     2f4:	ldr	r1, [sp, #4]
     2f8:	add	r3, sp, #8
     2fc:	bl	364 <dmy_to_mjd2000>
     300:	cmp	r0, #0
     304:	beq	314 <coda_dayofyear_to_month_day+0xcc>
     308:	mvn	r0, #0
     30c:	str	r0, [fp, #-4]
     310:	b	358 <coda_dayofyear_to_month_day+0x110>
     314:	ldr	r0, [fp, #-12]
     318:	sub	r0, r0, #1
     31c:	ldr	r1, [sp, #8]
     320:	add	r0, r1, r0
     324:	str	r0, [sp, #8]
     328:	ldr	r0, [sp, #8]
     32c:	ldr	r1, [sp, #12]
     330:	ldr	r2, [sp, #16]
     334:	sub	r3, fp, #8
     338:	bl	4b4 <mjd2000_to_dmy>
     33c:	cmp	r0, #0
     340:	beq	350 <coda_dayofyear_to_month_day+0x108>
     344:	mvn	r0, #0
     348:	str	r0, [fp, #-4]
     34c:	b	358 <coda_dayofyear_to_month_day+0x110>
     350:	movw	r0, #0
     354:	str	r0, [fp, #-4]
     358:	ldr	r0, [fp, #-4]
     35c:	mov	sp, fp
     360:	pop	{fp, pc}

00000364 <dmy_to_mjd2000>:
     364:	push	{fp, lr}
     368:	mov	fp, sp
     36c:	sub	sp, sp, #48	; 0x30
     370:	str	r0, [fp, #-8]
     374:	str	r1, [fp, #-12]
     378:	str	r2, [fp, #-16]
     37c:	str	r3, [fp, #-20]	; 0xffffffec
     380:	movw	r0, #2
     384:	str	r0, [sp, #24]
     388:	movw	r0, #9
     38c:	str	r0, [sp, #20]
     390:	movw	r0, #1752	; 0x6d8
     394:	str	r0, [sp, #16]
     398:	ldr	r0, [fp, #-8]
     39c:	ldr	r1, [fp, #-12]
     3a0:	ldr	r2, [fp, #-16]
     3a4:	add	r3, sp, #8
     3a8:	bl	37b0 <dmy_to_mjd2000_julian>
     3ac:	cmp	r0, #0
     3b0:	bne	3d0 <dmy_to_mjd2000+0x6c>
     3b4:	movw	r0, #2
     3b8:	movw	r1, #9
     3bc:	movw	r2, #1752	; 0x6d8
     3c0:	add	r3, sp, #12
     3c4:	bl	37b0 <dmy_to_mjd2000_julian>
     3c8:	cmp	r0, #0
     3cc:	beq	3dc <dmy_to_mjd2000+0x78>
     3d0:	mvn	r0, #0
     3d4:	str	r0, [fp, #-4]
     3d8:	b	4a0 <dmy_to_mjd2000+0x13c>
     3dc:	ldr	r0, [sp, #8]
     3e0:	ldr	r1, [sp, #12]
     3e4:	cmp	r0, r1
     3e8:	bgt	404 <dmy_to_mjd2000+0xa0>
     3ec:	ldr	r0, [pc, #184]	; 4ac <dmy_to_mjd2000+0x148>
     3f0:	ldr	r1, [sp, #8]
     3f4:	sub	r0, r1, r0
     3f8:	ldr	r1, [fp, #-20]	; 0xffffffec
     3fc:	str	r0, [r1]
     400:	b	498 <dmy_to_mjd2000+0x134>
     404:	ldr	r0, [fp, #-8]
     408:	ldr	r1, [fp, #-12]
     40c:	ldr	r2, [fp, #-16]
     410:	add	r3, sp, #8
     414:	bl	39a4 <dmy_to_mjd2000_gregorian>
     418:	cmp	r0, #0
     41c:	beq	42c <dmy_to_mjd2000+0xc8>
     420:	mvn	r0, #0
     424:	str	r0, [fp, #-4]
     428:	b	4a0 <dmy_to_mjd2000+0x13c>
     42c:	ldr	r0, [pc, #120]	; 4ac <dmy_to_mjd2000+0x148>
     430:	ldr	r1, [pc, #120]	; 4b0 <dmy_to_mjd2000+0x14c>
     434:	ldr	r2, [sp, #8]
     438:	sub	r1, r2, r1
     43c:	ldr	r2, [sp, #12]
     440:	sub	r0, r2, r0
     444:	cmp	r1, r0
     448:	bgt	484 <dmy_to_mjd2000+0x120>
     44c:	ldr	r2, [fp, #-8]
     450:	ldr	r3, [fp, #-12]
     454:	ldr	r0, [fp, #-16]
     458:	mvn	r1, #103	; 0x67
     45c:	str	r0, [sp, #4]
     460:	mov	r0, r1
     464:	movw	r1, #0
     468:	movt	r1, #0
     46c:	ldr	ip, [sp, #4]
     470:	str	ip, [sp]
     474:	bl	0 <coda_set_error>
     478:	mvn	r0, #0
     47c:	str	r0, [fp, #-4]
     480:	b	4a0 <dmy_to_mjd2000+0x13c>
     484:	ldr	r0, [pc, #36]	; 4b0 <dmy_to_mjd2000+0x14c>
     488:	ldr	r1, [sp, #8]
     48c:	sub	r0, r1, r0
     490:	ldr	r1, [fp, #-20]	; 0xffffffec
     494:	str	r0, [r1]
     498:	movw	r0, #0
     49c:	str	r0, [fp, #-4]
     4a0:	ldr	r0, [fp, #-4]
     4a4:	mov	sp, fp
     4a8:	pop	{fp, pc}
     4ac:	.word	0x00256859
     4b0:	.word	0x00024d96

000004b4 <mjd2000_to_dmy>:
     4b4:	push	{fp, lr}
     4b8:	mov	fp, sp
     4bc:	sub	sp, sp, #40	; 0x28
     4c0:	str	r0, [fp, #-8]
     4c4:	str	r1, [fp, #-12]
     4c8:	str	r2, [fp, #-16]
     4cc:	str	r3, [sp, #20]
     4d0:	movw	r0, #2
     4d4:	str	r0, [sp, #16]
     4d8:	movw	r1, #9
     4dc:	str	r1, [sp, #12]
     4e0:	movw	r2, #1752	; 0x6d8
     4e4:	str	r2, [sp, #8]
     4e8:	add	r3, sp, #4
     4ec:	bl	364 <dmy_to_mjd2000>
     4f0:	cmp	r0, #0
     4f4:	beq	504 <mjd2000_to_dmy+0x50>
     4f8:	mvn	r0, #0
     4fc:	str	r0, [fp, #-4]
     500:	b	548 <mjd2000_to_dmy+0x94>
     504:	ldr	r0, [fp, #-8]
     508:	ldr	r1, [sp, #4]
     50c:	cmp	r0, r1
     510:	bgt	52c <mjd2000_to_dmy+0x78>
     514:	ldr	r0, [fp, #-8]
     518:	ldr	r1, [fp, #-12]
     51c:	ldr	r2, [fp, #-16]
     520:	ldr	r3, [sp, #20]
     524:	bl	3d50 <mjd2000_to_dmy_julian>
     528:	b	540 <mjd2000_to_dmy+0x8c>
     52c:	ldr	r0, [fp, #-8]
     530:	ldr	r1, [fp, #-12]
     534:	ldr	r2, [fp, #-16]
     538:	ldr	r3, [sp, #20]
     53c:	bl	3e6c <mjd2000_to_dmy_gregorian>
     540:	movw	r0, #0
     544:	str	r0, [fp, #-4]
     548:	ldr	r0, [fp, #-4]
     54c:	mov	sp, fp
     550:	pop	{fp, pc}

00000554 <coda_leap_second_table_done>:
     554:	push	{fp, lr}
     558:	mov	fp, sp
     55c:	sub	sp, sp, #16
     560:	ldr	r0, [pc, #104]	; 5d0 <coda_leap_second_table_done+0x7c>
     564:	str	r0, [fp, #-4]
     568:	bl	0 <__aeabi_read_tp>
     56c:	ldr	r1, [fp, #-4]
     570:	ldr	r0, [r0, r1]
     574:	movw	r1, #0
     578:	cmp	r0, r1
     57c:	beq	5b0 <coda_leap_second_table_done+0x5c>
     580:	ldr	r0, [pc, #72]	; 5d0 <coda_leap_second_table_done+0x7c>
     584:	str	r0, [sp, #8]
     588:	bl	0 <__aeabi_read_tp>
     58c:	ldr	r1, [sp, #8]
     590:	ldr	r2, [r0, r1]
     594:	str	r0, [sp, #4]
     598:	mov	r0, r2
     59c:	bl	0 <free>
     5a0:	mov	r0, #0
     5a4:	ldr	r1, [sp, #4]
     5a8:	ldr	r2, [sp, #8]
     5ac:	str	r0, [r1, r2]
     5b0:	ldr	r0, [pc, #28]	; 5d4 <coda_leap_second_table_done+0x80>
     5b4:	str	r0, [sp]
     5b8:	bl	0 <__aeabi_read_tp>
     5bc:	mov	r1, #0
     5c0:	ldr	r2, [sp]
     5c4:	str	r1, [r0, r2]
     5c8:	mov	sp, fp
     5cc:	pop	{fp, pc}
	...

000005d8 <coda_leap_second_table_init>:
     5d8:	push	{fp, lr}
     5dc:	mov	fp, sp
     5e0:	sub	sp, sp, #112	; 0x70
     5e4:	bl	554 <coda_leap_second_table_done>
     5e8:	movw	r0, #0
     5ec:	movt	r0, #0
     5f0:	bl	0 <getenv>
     5f4:	movw	r1, #0
     5f8:	cmp	r0, r1
     5fc:	beq	628 <coda_leap_second_table_init+0x50>
     600:	movw	r0, #0
     604:	movt	r0, #0
     608:	bl	0 <getenv>
     60c:	bl	858 <read_leap_second_table>
     610:	cmp	r0, #0
     614:	beq	624 <coda_leap_second_table_init+0x4c>
     618:	mvn	r0, #0
     61c:	str	r0, [fp, #-4]
     620:	b	770 <coda_leap_second_table_init+0x198>
     624:	b	768 <coda_leap_second_table_init+0x190>
     628:	vldr	d0, [pc, #544]	; 850 <coda_leap_second_table_init+0x278>
     62c:	bl	ab8 <register_leap_second>
     630:	vldr	d0, [pc, #528]	; 848 <coda_leap_second_table_init+0x270>
     634:	str	r0, [fp, #-8]
     638:	bl	ab8 <register_leap_second>
     63c:	vldr	d0, [pc, #508]	; 840 <coda_leap_second_table_init+0x268>
     640:	str	r0, [fp, #-12]
     644:	bl	ab8 <register_leap_second>
     648:	vldr	d0, [pc, #488]	; 838 <coda_leap_second_table_init+0x260>
     64c:	str	r0, [fp, #-16]
     650:	bl	ab8 <register_leap_second>
     654:	vldr	d0, [pc, #468]	; 830 <coda_leap_second_table_init+0x258>
     658:	str	r0, [fp, #-20]	; 0xffffffec
     65c:	bl	ab8 <register_leap_second>
     660:	vldr	d0, [pc, #448]	; 828 <coda_leap_second_table_init+0x250>
     664:	str	r0, [fp, #-24]	; 0xffffffe8
     668:	bl	ab8 <register_leap_second>
     66c:	vldr	d0, [pc, #428]	; 820 <coda_leap_second_table_init+0x248>
     670:	str	r0, [fp, #-28]	; 0xffffffe4
     674:	bl	ab8 <register_leap_second>
     678:	vldr	d0, [pc, #408]	; 818 <coda_leap_second_table_init+0x240>
     67c:	str	r0, [fp, #-32]	; 0xffffffe0
     680:	bl	ab8 <register_leap_second>
     684:	vldr	d0, [pc, #388]	; 810 <coda_leap_second_table_init+0x238>
     688:	str	r0, [fp, #-36]	; 0xffffffdc
     68c:	bl	ab8 <register_leap_second>
     690:	vldr	d0, [pc, #368]	; 808 <coda_leap_second_table_init+0x230>
     694:	str	r0, [fp, #-40]	; 0xffffffd8
     698:	bl	ab8 <register_leap_second>
     69c:	vldr	d0, [pc, #348]	; 800 <coda_leap_second_table_init+0x228>
     6a0:	str	r0, [fp, #-44]	; 0xffffffd4
     6a4:	bl	ab8 <register_leap_second>
     6a8:	vldr	d0, [pc, #328]	; 7f8 <coda_leap_second_table_init+0x220>
     6ac:	str	r0, [fp, #-48]	; 0xffffffd0
     6b0:	bl	ab8 <register_leap_second>
     6b4:	vldr	d0, [pc, #308]	; 7f0 <coda_leap_second_table_init+0x218>
     6b8:	str	r0, [fp, #-52]	; 0xffffffcc
     6bc:	bl	ab8 <register_leap_second>
     6c0:	vldr	d0, [pc, #288]	; 7e8 <coda_leap_second_table_init+0x210>
     6c4:	str	r0, [sp, #56]	; 0x38
     6c8:	bl	ab8 <register_leap_second>
     6cc:	vldr	d0, [pc, #268]	; 7e0 <coda_leap_second_table_init+0x208>
     6d0:	str	r0, [sp, #52]	; 0x34
     6d4:	bl	ab8 <register_leap_second>
     6d8:	vldr	d0, [pc, #248]	; 7d8 <coda_leap_second_table_init+0x200>
     6dc:	str	r0, [sp, #48]	; 0x30
     6e0:	bl	ab8 <register_leap_second>
     6e4:	vldr	d0, [pc, #228]	; 7d0 <coda_leap_second_table_init+0x1f8>
     6e8:	str	r0, [sp, #44]	; 0x2c
     6ec:	bl	ab8 <register_leap_second>
     6f0:	vldr	d0, [pc, #208]	; 7c8 <coda_leap_second_table_init+0x1f0>
     6f4:	str	r0, [sp, #40]	; 0x28
     6f8:	bl	ab8 <register_leap_second>
     6fc:	vldr	d0, [pc, #188]	; 7c0 <coda_leap_second_table_init+0x1e8>
     700:	str	r0, [sp, #36]	; 0x24
     704:	bl	ab8 <register_leap_second>
     708:	vldr	d0, [pc, #168]	; 7b8 <coda_leap_second_table_init+0x1e0>
     70c:	str	r0, [sp, #32]
     710:	bl	ab8 <register_leap_second>
     714:	vldr	d0, [pc, #148]	; 7b0 <coda_leap_second_table_init+0x1d8>
     718:	str	r0, [sp, #28]
     71c:	bl	ab8 <register_leap_second>
     720:	vldr	d0, [pc, #128]	; 7a8 <coda_leap_second_table_init+0x1d0>
     724:	str	r0, [sp, #24]
     728:	bl	ab8 <register_leap_second>
     72c:	vldr	d0, [pc, #108]	; 7a0 <coda_leap_second_table_init+0x1c8>
     730:	str	r0, [sp, #20]
     734:	bl	ab8 <register_leap_second>
     738:	vldr	d0, [pc, #88]	; 798 <coda_leap_second_table_init+0x1c0>
     73c:	str	r0, [sp, #16]
     740:	bl	ab8 <register_leap_second>
     744:	vldr	d0, [pc, #68]	; 790 <coda_leap_second_table_init+0x1b8>
     748:	str	r0, [sp, #12]
     74c:	bl	ab8 <register_leap_second>
     750:	vldr	d0, [pc, #48]	; 788 <coda_leap_second_table_init+0x1b0>
     754:	str	r0, [sp, #8]
     758:	bl	ab8 <register_leap_second>
     75c:	vldr	d0, [pc, #28]	; 780 <coda_leap_second_table_init+0x1a8>
     760:	str	r0, [sp, #4]
     764:	bl	ab8 <register_leap_second>
     768:	movw	r0, #0
     76c:	str	r0, [fp, #-4]
     770:	ldr	r0, [fp, #-4]
     774:	mov	sp, fp
     778:	pop	{fp, pc}
     77c:	nop	{0}
     780:	.word	0x24000000
     784:	.word	0x41bffb03
     788:	.word	0x23000000
     78c:	.word	0x41bd25ea
     790:	.word	0xa2000000
     794:	.word	0x41b7824f
     798:	.word	0x21000000
     79c:	.word	0x41b0eec4
     7a0:	.word	0x40000000
     7a4:	.word	0x41a693b0
     7a8:	.word	0x10000000
     7ac:	.word	0xc17e1336
     7b0:	.word	0x88000000
     7b4:	.word	0xc192d3eb
     7b8:	.word	0x8c000000
     7bc:	.word	0xc19e187d
     7c0:	.word	0xc8000000
     7c4:	.word	0xc1a4b3cd
     7c8:	.word	0xca000000
     7cc:	.word	0xc1a87634
     7d0:	.word	0xcc000000
     7d4:	.word	0xc1ac389b
     7d8:	.word	0x67000000
     7dc:	.word	0xc1b0ed72
     7e0:	.word	0xe8000000
     7e4:	.word	0xc1b2cea5
     7e8:	.word	0x69000000
     7ec:	.word	0xc1b6925e
     7f0:	.word	0x6a000000
     7f4:	.word	0xc1bb4759
     7f8:	.word	0xeb000000
     7fc:	.word	0xc1bf0b11
     800:	.word	0xb6000000
     804:	.word	0xc1c07622
     808:	.word	0x76800000
     80c:	.word	0xc1c166bc
     810:	.word	0xb7000000
     814:	.word	0xc1c2cf4e
     818:	.word	0x77800000
     81c:	.word	0xc1c3bfe8
     820:	.word	0x38000000
     824:	.word	0xc1c4b082
     828:	.word	0xf8800000
     82c:	.word	0xc1c5a11b
     830:	.word	0x79000000
     834:	.word	0xc1c6925e
     838:	.word	0x39800000
     83c:	.word	0xc1c782f8
     840:	.word	0xfa000000
     844:	.word	0xc1c87391
     848:	.word	0xba800000
     84c:	.word	0xc1c9642b
     850:	.word	0xbb000000
     854:	.word	0xc1c9dd75

00000858 <read_leap_second_table>:
     858:	push	{r4, r5, fp, lr}
     85c:	add	fp, sp, #8
     860:	sub	sp, sp, #224	; 0xe0
     864:	str	r0, [fp, #-16]
     868:	movw	r0, #0
     86c:	str	r0, [sp, #112]	; 0x70
     870:	ldr	r0, [fp, #-16]
     874:	movw	r1, #0
     878:	movt	r1, #0
     87c:	bl	0 <fopen>
     880:	str	r0, [sp, #108]	; 0x6c
     884:	ldr	r0, [sp, #108]	; 0x6c
     888:	movw	r1, #0
     88c:	cmp	r0, r1
     890:	bne	8b4 <read_leap_second_table+0x5c>
     894:	ldr	r2, [fp, #-16]
     898:	mvn	r0, #20
     89c:	movw	r1, #0
     8a0:	movt	r1, #0
     8a4:	bl	0 <coda_set_error>
     8a8:	mvn	r0, #0
     8ac:	str	r0, [fp, #-12]
     8b0:	b	a94 <read_leap_second_table+0x23c>
     8b4:	b	8b8 <read_leap_second_table+0x60>
     8b8:	add	r2, sp, #116	; 0x74
     8bc:	movw	r0, #0
     8c0:	str	r0, [sp, #104]	; 0x68
     8c4:	ldr	r0, [sp, #108]	; 0x6c
     8c8:	movw	r1, #0
     8cc:	movt	r1, #0
     8d0:	add	r3, sp, #104	; 0x68
     8d4:	bl	0 <__isoc99_fscanf>
     8d8:	str	r0, [sp, #100]	; 0x64
     8dc:	ldr	r0, [sp, #104]	; 0x68
     8e0:	cmp	r0, #0
     8e4:	bgt	8ec <read_leap_second_table+0x94>
     8e8:	b	a84 <read_leap_second_table+0x22c>
     8ec:	ldr	r0, [sp, #104]	; 0x68
     8f0:	cmp	r0, #80	; 0x50
     8f4:	beq	928 <read_leap_second_table+0xd0>
     8f8:	ldr	r0, [sp, #108]	; 0x6c
     8fc:	bl	0 <fclose>
     900:	ldr	r2, [fp, #-16]
     904:	mvn	r1, #21
     908:	str	r0, [sp, #52]	; 0x34
     90c:	mov	r0, r1
     910:	movw	r1, #0
     914:	movt	r1, #0
     918:	bl	0 <coda_set_error>
     91c:	mvn	r0, #0
     920:	str	r0, [fp, #-12]
     924:	b	a94 <read_leap_second_table+0x23c>
     928:	ldr	r0, [sp, #104]	; 0x68
     92c:	add	r1, sp, #116	; 0x74
     930:	add	r0, r1, r0
     934:	movw	r1, #0
     938:	strb	r1, [r0]
     93c:	ldr	r0, [sp, #108]	; 0x6c
     940:	movw	r1, #0
     944:	movt	r1, #0
     948:	bl	0 <__isoc99_fscanf>
     94c:	add	r1, sp, #93	; 0x5d
     950:	add	r2, sp, #116	; 0x74
     954:	str	r0, [sp, #100]	; 0x64
     958:	add	r0, r1, #1
     95c:	add	r3, r1, #2
     960:	str	r0, [sp, #48]	; 0x30
     964:	mov	r0, r2
     968:	movw	r2, #0
     96c:	movt	r2, #0
     970:	str	r1, [sp, #44]	; 0x2c
     974:	mov	r1, r2
     978:	add	r2, sp, #96	; 0x60
     97c:	ldr	ip, [sp, #44]	; 0x2c
     980:	str	r3, [sp, #40]	; 0x28
     984:	mov	r3, ip
     988:	ldr	lr, [sp, #48]	; 0x30
     98c:	str	lr, [sp]
     990:	ldr	r4, [sp, #40]	; 0x28
     994:	str	r4, [sp, #4]
     998:	add	r5, sp, #88	; 0x58
     99c:	str	r5, [sp, #8]
     9a0:	add	r5, sp, #80	; 0x50
     9a4:	str	r5, [sp, #12]
     9a8:	add	r5, sp, #72	; 0x48
     9ac:	str	r5, [sp, #16]
     9b0:	add	r5, sp, #64	; 0x40
     9b4:	str	r5, [sp, #20]
     9b8:	add	r5, sp, #56	; 0x38
     9bc:	str	r5, [sp, #24]
     9c0:	add	r5, sp, #104	; 0x68
     9c4:	str	r5, [sp, #28]
     9c8:	bl	0 <__isoc99_sscanf>
     9cc:	str	r0, [sp, #100]	; 0x64
     9d0:	ldr	r0, [sp, #100]	; 0x64
     9d4:	cmp	r0, #9
     9d8:	beq	a18 <read_leap_second_table+0x1c0>
     9dc:	ldr	r0, [sp, #104]	; 0x68
     9e0:	cmp	r0, #80	; 0x50
     9e4:	beq	a18 <read_leap_second_table+0x1c0>
     9e8:	ldr	r0, [sp, #108]	; 0x6c
     9ec:	bl	0 <fclose>
     9f0:	ldr	r2, [fp, #-16]
     9f4:	mvn	r1, #21
     9f8:	str	r0, [sp, #36]	; 0x24
     9fc:	mov	r0, r1
     a00:	movw	r1, #0
     a04:	movt	r1, #0
     a08:	bl	0 <coda_set_error>
     a0c:	mvn	r0, #0
     a10:	str	r0, [fp, #-12]
     a14:	b	a94 <read_leap_second_table+0x23c>
     a18:	vldr	d16, [pc, #128]	; aa0 <read_leap_second_table+0x248>
     a1c:	vldr	d17, [sp, #80]	; 0x50
     a20:	vcmpe.f64	d17, d16
     a24:	vmrs	APSR_nzcv, fpscr
     a28:	ble	a80 <read_leap_second_table+0x228>
     a2c:	vldr	d16, [pc, #116]	; aa8 <read_leap_second_table+0x250>
     a30:	vldr	d17, [pc, #120]	; ab0 <read_leap_second_table+0x258>
     a34:	vldr	d18, [sp, #80]	; 0x50
     a38:	vsub.f64	d17, d18, d17
     a3c:	vmul.f64	d16, d17, d16
     a40:	ldr	r0, [sp, #112]	; 0x70
     a44:	add	r0, r0, #10
     a48:	vmov	s0, r0
     a4c:	vcvt.f64.s32	d17, s0
     a50:	vadd.f64	d0, d16, d17
     a54:	bl	ab8 <register_leap_second>
     a58:	cmp	r0, #0
     a5c:	beq	a74 <read_leap_second_table+0x21c>
     a60:	ldr	r0, [sp, #108]	; 0x6c
     a64:	bl	0 <fclose>
     a68:	mvn	r1, #0
     a6c:	str	r1, [fp, #-12]
     a70:	b	a94 <read_leap_second_table+0x23c>
     a74:	ldr	r0, [sp, #112]	; 0x70
     a78:	add	r0, r0, #1
     a7c:	str	r0, [sp, #112]	; 0x70
     a80:	b	8b8 <read_leap_second_table+0x60>
     a84:	ldr	r0, [sp, #108]	; 0x6c
     a88:	bl	0 <fclose>
     a8c:	movw	r1, #0
     a90:	str	r1, [fp, #-12]
     a94:	ldr	r0, [fp, #-12]
     a98:	sub	sp, fp, #8
     a9c:	pop	{r4, r5, fp, pc}
     aa0:	.word	0xc0000000
     aa4:	.word	0x4142a032
     aa8:	.word	0x00000000
     aac:	.word	0x40f51800
     ab0:	.word	0x40000000
     ab4:	.word	0x4142b42c

00000ab8 <register_leap_second>:
     ab8:	push	{fp, lr}
     abc:	mov	fp, sp
     ac0:	sub	sp, sp, #136	; 0x88
     ac4:	vstr	d0, [fp, #-16]
     ac8:	ldr	r0, [pc, #644]	; d54 <register_leap_second+0x29c>
     acc:	str	r0, [fp, #-36]	; 0xffffffdc
     ad0:	bl	0 <__aeabi_read_tp>
     ad4:	ldr	r1, [fp, #-36]	; 0xffffffdc
     ad8:	ldr	r0, [r0, r1]
     adc:	asr	r1, r0, #31
     ae0:	add	r1, r0, r1, lsr #28
     ae4:	bic	r1, r1, #15
     ae8:	sub	r0, r0, r1
     aec:	cmp	r0, #0
     af0:	bne	ba4 <register_leap_second+0xec>
     af4:	ldr	r0, [pc, #604]	; d58 <register_leap_second+0x2a0>
     af8:	str	r0, [fp, #-40]	; 0xffffffd8
     afc:	bl	0 <__aeabi_read_tp>
     b00:	ldr	r1, [fp, #-40]	; 0xffffffd8
     b04:	ldr	r1, [r0, r1]
     b08:	ldr	r2, [pc, #580]	; d54 <register_leap_second+0x29c>
     b0c:	ldr	r0, [r0, r2]
     b10:	add	r0, r0, #16
     b14:	lsl	r0, r0, #3
     b18:	str	r0, [fp, #-44]	; 0xffffffd4
     b1c:	mov	r0, r1
     b20:	ldr	r1, [fp, #-44]	; 0xffffffd4
     b24:	bl	0 <realloc>
     b28:	str	r0, [fp, #-24]	; 0xffffffe8
     b2c:	ldr	r0, [fp, #-24]	; 0xffffffe8
     b30:	movw	r1, #0
     b34:	cmp	r0, r1
     b38:	bne	b84 <register_leap_second+0xcc>
     b3c:	ldr	r0, [pc, #528]	; d54 <register_leap_second+0x29c>
     b40:	str	r0, [fp, #-48]	; 0xffffffd0
     b44:	bl	0 <__aeabi_read_tp>
     b48:	ldr	r1, [fp, #-48]	; 0xffffffd0
     b4c:	ldr	r0, [r0, r1]
     b50:	add	r0, r0, #16
     b54:	lsl	r2, r0, #3
     b58:	mvn	r0, #0
     b5c:	movw	r1, #0
     b60:	movt	r1, #0
     b64:	movw	r3, #0
     b68:	movt	r3, #0
     b6c:	movw	ip, #609	; 0x261
     b70:	str	ip, [sp]
     b74:	bl	0 <coda_set_error>
     b78:	mvn	r0, #0
     b7c:	str	r0, [fp, #-4]
     b80:	b	d48 <register_leap_second+0x290>
     b84:	ldr	r0, [fp, #-24]	; 0xffffffe8
     b88:	ldr	r1, [pc, #456]	; d58 <register_leap_second+0x2a0>
     b8c:	str	r0, [fp, #-52]	; 0xffffffcc
     b90:	str	r1, [fp, #-56]	; 0xffffffc8
     b94:	bl	0 <__aeabi_read_tp>
     b98:	ldr	r1, [fp, #-52]	; 0xffffffcc
     b9c:	ldr	r2, [fp, #-56]	; 0xffffffc8
     ba0:	str	r1, [r0, r2]
     ba4:	ldr	r0, [pc, #424]	; d54 <register_leap_second+0x29c>
     ba8:	str	r0, [fp, #-60]	; 0xffffffc4
     bac:	bl	0 <__aeabi_read_tp>
     bb0:	ldr	r1, [fp, #-60]	; 0xffffffc4
     bb4:	ldr	r0, [r0, r1]
     bb8:	cmp	r0, #0
     bbc:	ble	d04 <register_leap_second+0x24c>
     bc0:	vldr	d16, [fp, #-16]
     bc4:	ldr	r0, [pc, #396]	; d58 <register_leap_second+0x2a0>
     bc8:	vstr	d16, [sp, #64]	; 0x40
     bcc:	str	r0, [sp, #60]	; 0x3c
     bd0:	bl	0 <__aeabi_read_tp>
     bd4:	ldr	r1, [sp, #60]	; 0x3c
     bd8:	ldr	r1, [r0, r1]
     bdc:	ldr	r2, [pc, #368]	; d54 <register_leap_second+0x29c>
     be0:	ldr	r0, [r0, r2]
     be4:	sub	r0, r0, #1
     be8:	add	r0, r1, r0, lsl #3
     bec:	vldr	d16, [r0]
     bf0:	vldr	d17, [sp, #64]	; 0x40
     bf4:	vcmpe.f64	d17, d16
     bf8:	vmrs	APSR_nzcv, fpscr
     bfc:	bhi	d04 <register_leap_second+0x24c>
     c00:	movw	r0, #0
     c04:	str	r0, [fp, #-20]	; 0xffffffec
     c08:	ldr	r0, [fp, #-20]	; 0xffffffec
     c0c:	ldr	r1, [pc, #320]	; d54 <register_leap_second+0x29c>
     c10:	str	r0, [sp, #56]	; 0x38
     c14:	str	r1, [sp, #52]	; 0x34
     c18:	bl	0 <__aeabi_read_tp>
     c1c:	ldr	r1, [sp, #52]	; 0x34
     c20:	ldr	r0, [r0, r1]
     c24:	ldr	r1, [sp, #56]	; 0x38
     c28:	cmp	r1, r0
     c2c:	bge	d00 <register_leap_second+0x248>
     c30:	vldr	d16, [fp, #-16]
     c34:	ldr	r0, [pc, #284]	; d58 <register_leap_second+0x2a0>
     c38:	vstr	d16, [sp, #40]	; 0x28
     c3c:	str	r0, [sp, #36]	; 0x24
     c40:	bl	0 <__aeabi_read_tp>
     c44:	ldr	r1, [sp, #36]	; 0x24
     c48:	ldr	r0, [r0, r1]
     c4c:	ldr	r1, [fp, #-20]	; 0xffffffec
     c50:	add	r0, r0, r1, lsl #3
     c54:	vldr	d16, [r0]
     c58:	vldr	d17, [sp, #40]	; 0x28
     c5c:	vcmpe.f64	d17, d16
     c60:	vmrs	APSR_nzcv, fpscr
     c64:	bhi	cec <register_leap_second+0x234>
     c68:	vldr	d16, [fp, #-16]
     c6c:	ldr	r0, [pc, #228]	; d58 <register_leap_second+0x2a0>
     c70:	vstr	d16, [sp, #24]
     c74:	str	r0, [sp, #20]
     c78:	bl	0 <__aeabi_read_tp>
     c7c:	ldr	r1, [sp, #20]
     c80:	ldr	r0, [r0, r1]
     c84:	ldr	r1, [fp, #-20]	; 0xffffffec
     c88:	add	r0, r0, r1, lsl #3
     c8c:	vldr	d16, [r0]
     c90:	vldr	d17, [sp, #24]
     c94:	vcmp.f64	d17, d16
     c98:	vmrs	APSR_nzcv, fpscr
     c9c:	bne	cac <register_leap_second+0x1f4>
     ca0:	movw	r0, #0
     ca4:	str	r0, [fp, #-4]
     ca8:	b	d48 <register_leap_second+0x290>
     cac:	ldr	r0, [pc, #164]	; d58 <register_leap_second+0x2a0>
     cb0:	str	r0, [sp, #16]
     cb4:	bl	0 <__aeabi_read_tp>
     cb8:	ldr	r1, [sp, #16]
     cbc:	ldr	r2, [r0, r1]
     cc0:	ldr	r3, [fp, #-20]	; 0xffffffec
     cc4:	add	r2, r2, r3, lsl #3
     cc8:	vldr	d16, [r2]
     ccc:	vstr	d16, [fp, #-32]	; 0xffffffe0
     cd0:	vldr	d16, [fp, #-16]
     cd4:	ldr	r0, [r0, r1]
     cd8:	ldr	r2, [fp, #-20]	; 0xffffffec
     cdc:	add	r0, r0, r2, lsl #3
     ce0:	vstr	d16, [r0]
     ce4:	vldr	d16, [fp, #-32]	; 0xffffffe0
     ce8:	vstr	d16, [fp, #-16]
     cec:	b	cf0 <register_leap_second+0x238>
     cf0:	ldr	r0, [fp, #-20]	; 0xffffffec
     cf4:	add	r0, r0, #1
     cf8:	str	r0, [fp, #-20]	; 0xffffffec
     cfc:	b	c08 <register_leap_second+0x150>
     d00:	b	d04 <register_leap_second+0x24c>
     d04:	vldr	d16, [fp, #-16]
     d08:	ldr	r0, [pc, #72]	; d58 <register_leap_second+0x2a0>
     d0c:	vstr	d16, [sp, #8]
     d10:	str	r0, [sp, #4]
     d14:	bl	0 <__aeabi_read_tp>
     d18:	ldr	r1, [sp, #4]
     d1c:	ldr	r1, [r0, r1]
     d20:	ldr	r2, [pc, #44]	; d54 <register_leap_second+0x29c>
     d24:	ldr	r3, [r0, r2]
     d28:	add	r1, r1, r3, lsl #3
     d2c:	vldr	d16, [sp, #8]
     d30:	vstr	d16, [r1]
     d34:	ldr	r1, [r0, r2]
     d38:	add	r1, r1, #1
     d3c:	str	r1, [r0, r2]
     d40:	movw	r0, #0
     d44:	str	r0, [fp, #-4]
     d48:	ldr	r0, [fp, #-4]
     d4c:	mov	sp, fp
     d50:	pop	{fp, pc}
	...
     d5c:	.word	0xe320f000

00000d60 <coda_time_double_to_parts>:
     d60:	push	{r4, sl, fp, lr}
     d64:	add	fp, sp, #8
     d68:	sub	sp, sp, #80	; 0x50
     d6c:	ldr	ip, [fp, #16]
     d70:	ldr	lr, [fp, #12]
     d74:	ldr	r4, [fp, #8]
     d78:	vstr	d0, [fp, #-24]	; 0xffffffe8
     d7c:	str	r0, [fp, #-28]	; 0xffffffe4
     d80:	str	r1, [fp, #-32]	; 0xffffffe0
     d84:	str	r2, [fp, #-36]	; 0xffffffdc
     d88:	str	r3, [fp, #-40]	; 0xffffffd8
     d8c:	ldr	r0, [fp, #-28]	; 0xffffffe4
     d90:	movw	r1, #0
     d94:	cmp	r0, r1
     d98:	beq	dfc <coda_time_double_to_parts+0x9c>
     d9c:	ldr	r0, [fp, #-32]	; 0xffffffe0
     da0:	movw	r1, #0
     da4:	cmp	r0, r1
     da8:	beq	dfc <coda_time_double_to_parts+0x9c>
     dac:	ldr	r0, [fp, #-36]	; 0xffffffdc
     db0:	movw	r1, #0
     db4:	cmp	r0, r1
     db8:	beq	dfc <coda_time_double_to_parts+0x9c>
     dbc:	ldr	r0, [fp, #-40]	; 0xffffffd8
     dc0:	movw	r1, #0
     dc4:	cmp	r0, r1
     dc8:	beq	dfc <coda_time_double_to_parts+0x9c>
     dcc:	ldr	r0, [fp, #8]
     dd0:	movw	r1, #0
     dd4:	cmp	r0, r1
     dd8:	beq	dfc <coda_time_double_to_parts+0x9c>
     ddc:	ldr	r0, [fp, #12]
     de0:	movw	r1, #0
     de4:	cmp	r0, r1
     de8:	beq	dfc <coda_time_double_to_parts+0x9c>
     dec:	ldr	r0, [fp, #16]
     df0:	movw	r1, #0
     df4:	cmp	r0, r1
     df8:	bne	e24 <coda_time_double_to_parts+0xc4>
     dfc:	mvn	r0, #99	; 0x63
     e00:	movw	r1, #0
     e04:	movt	r1, #0
     e08:	movw	r2, #0
     e0c:	movt	r2, #0
     e10:	movw	r3, #787	; 0x313
     e14:	bl	0 <coda_set_error>
     e18:	mvn	r0, #0
     e1c:	str	r0, [fp, #-12]
     e20:	b	fac <coda_time_double_to_parts+0x24c>
     e24:	vldr	d0, [fp, #-24]	; 0xffffffe8
     e28:	bl	0 <coda_isNaN>
     e2c:	cmp	r0, #0
     e30:	beq	e50 <coda_time_double_to_parts+0xf0>
     e34:	mvn	r0, #103	; 0x67
     e38:	movw	r1, #0
     e3c:	movt	r1, #0
     e40:	bl	0 <coda_set_error>
     e44:	mvn	r0, #0
     e48:	str	r0, [fp, #-12]
     e4c:	b	fac <coda_time_double_to_parts+0x24c>
     e50:	vldr	d0, [fp, #-24]	; 0xffffffe8
     e54:	bl	0 <coda_isInf>
     e58:	cmp	r0, #0
     e5c:	beq	e7c <coda_time_double_to_parts+0x11c>
     e60:	mvn	r0, #103	; 0x67
     e64:	movw	r1, #0
     e68:	movt	r1, #0
     e6c:	bl	0 <coda_set_error>
     e70:	mvn	r0, #0
     e74:	str	r0, [fp, #-12]
     e78:	b	fac <coda_time_double_to_parts+0x24c>
     e7c:	vldr	d16, [pc, #308]	; fb8 <coda_time_double_to_parts+0x258>
     e80:	vldr	d17, [pc, #312]	; fc0 <coda_time_double_to_parts+0x260>
     e84:	vldr	d18, [fp, #-24]	; 0xffffffe8
     e88:	vadd.f64	d17, d18, d17
     e8c:	vstr	d17, [fp, #-24]	; 0xffffffe8
     e90:	vldr	d17, [fp, #-24]	; 0xffffffe8
     e94:	vrintm.f64	d17, d17
     e98:	vstr	d17, [sp, #40]	; 0x28
     e9c:	vldr	d17, [sp, #40]	; 0x28
     ea0:	vdiv.f64	d16, d17, d16
     ea4:	vrintm.f64	d16, d16
     ea8:	vcvt.s32.f64	s0, d16
     eac:	vmov	r0, s0
     eb0:	str	r0, [sp, #8]
     eb4:	ldr	r0, [sp, #8]
     eb8:	add	r1, sp, #36	; 0x24
     ebc:	add	r2, sp, #32
     ec0:	add	r3, sp, #28
     ec4:	bl	4b4 <mjd2000_to_dmy>
     ec8:	cmp	r0, #0
     ecc:	beq	edc <coda_time_double_to_parts+0x17c>
     ed0:	mvn	r0, #0
     ed4:	str	r0, [fp, #-12]
     ed8:	b	fac <coda_time_double_to_parts+0x24c>
     edc:	vldr	d16, [pc, #212]	; fb8 <coda_time_double_to_parts+0x258>
     ee0:	vldr	d17, [sp, #40]	; 0x28
     ee4:	ldr	r0, [sp, #8]
     ee8:	vmov	s0, r0
     eec:	vcvt.f64.s32	d18, s0
     ef0:	vmul.f64	d16, d18, d16
     ef4:	vsub.f64	d16, d17, d16
     ef8:	vcvt.s32.f64	s0, d16
     efc:	vmov	r0, s0
     f00:	str	r0, [sp, #4]
     f04:	ldr	r0, [sp, #4]
     f08:	add	r1, sp, #24
     f0c:	add	r2, sp, #20
     f10:	add	r3, sp, #16
     f14:	bl	fd0 <seconds_to_hms>
     f18:	cmp	r0, #0
     f1c:	beq	f2c <coda_time_double_to_parts+0x1cc>
     f20:	mvn	r0, #0
     f24:	str	r0, [fp, #-12]
     f28:	b	fac <coda_time_double_to_parts+0x24c>
     f2c:	vldr	d16, [pc, #148]	; fc8 <coda_time_double_to_parts+0x268>
     f30:	vldr	d17, [fp, #-24]	; 0xffffffe8
     f34:	vldr	d18, [sp, #40]	; 0x28
     f38:	vsub.f64	d17, d17, d18
     f3c:	vmul.f64	d16, d17, d16
     f40:	vrintm.f64	d16, d16
     f44:	vcvt.s32.f64	s0, d16
     f48:	vmov	r0, s0
     f4c:	str	r0, [sp, #12]
     f50:	ldr	r0, [sp, #28]
     f54:	ldr	r1, [fp, #-28]	; 0xffffffe4
     f58:	str	r0, [r1]
     f5c:	ldr	r0, [sp, #32]
     f60:	ldr	r1, [fp, #-32]	; 0xffffffe0
     f64:	str	r0, [r1]
     f68:	ldr	r0, [sp, #36]	; 0x24
     f6c:	ldr	r1, [fp, #-36]	; 0xffffffdc
     f70:	str	r0, [r1]
     f74:	ldr	r0, [sp, #24]
     f78:	ldr	r1, [fp, #-40]	; 0xffffffd8
     f7c:	str	r0, [r1]
     f80:	ldr	r0, [sp, #20]
     f84:	ldr	r1, [fp, #8]
     f88:	str	r0, [r1]
     f8c:	ldr	r0, [sp, #16]
     f90:	ldr	r1, [fp, #12]
     f94:	str	r0, [r1]
     f98:	ldr	r0, [sp, #12]
     f9c:	ldr	r1, [fp, #16]
     fa0:	str	r0, [r1]
     fa4:	movw	r0, #0
     fa8:	str	r0, [fp, #-12]
     fac:	ldr	r0, [fp, #-12]
     fb0:	sub	sp, fp, #8
     fb4:	pop	{r4, sl, fp, pc}
     fb8:	.word	0x00000000
     fbc:	.word	0x40f51800
     fc0:	.word	0xa0b5ed8d
     fc4:	.word	0x3ea0c6f7
     fc8:	.word	0x00000000
     fcc:	.word	0x412e8480

00000fd0 <seconds_to_hms>:
     fd0:	push	{fp, lr}
     fd4:	mov	fp, sp
     fd8:	sub	sp, sp, #24
     fdc:	str	r0, [fp, #-8]
     fe0:	str	r1, [sp, #12]
     fe4:	str	r2, [sp, #8]
     fe8:	str	r3, [sp, #4]
     fec:	ldr	r0, [fp, #-8]
     ff0:	str	r0, [sp]
     ff4:	ldr	r0, [sp]
     ff8:	cmp	r0, #0
     ffc:	blt	1010 <seconds_to_hms+0x40>
    1000:	ldr	r0, [pc, #192]	; 10c8 <seconds_to_hms+0xf8>
    1004:	ldr	r1, [sp]
    1008:	cmp	r1, r0
    100c:	ble	1030 <seconds_to_hms+0x60>
    1010:	ldr	r2, [sp]
    1014:	mvn	r0, #103	; 0x67
    1018:	movw	r1, #0
    101c:	movt	r1, #0
    1020:	bl	0 <coda_set_error>
    1024:	mvn	r0, #0
    1028:	str	r0, [fp, #-4]
    102c:	b	10bc <seconds_to_hms+0xec>
    1030:	ldr	r0, [sp]
    1034:	movw	r1, #46021	; 0xb3c5
    1038:	movt	r1, #37282	; 0x91a2
    103c:	smmla	r0, r0, r1, r0
    1040:	asr	r2, r0, #11
    1044:	add	r0, r2, r0, lsr #31
    1048:	ldr	r2, [sp, #12]
    104c:	str	r0, [r2]
    1050:	ldr	r0, [sp]
    1054:	smmla	r1, r0, r1, r0
    1058:	asr	r2, r1, #11
    105c:	add	r1, r2, r1, lsr #31
    1060:	mov	r2, #3600	; 0xe10
    1064:	mls	r0, r1, r2, r0
    1068:	str	r0, [sp]
    106c:	ldr	r0, [sp]
    1070:	movw	r1, #34953	; 0x8889
    1074:	movt	r1, #34952	; 0x8888
    1078:	smmla	r0, r0, r1, r0
    107c:	asr	r2, r0, #5
    1080:	add	r0, r2, r0, lsr #31
    1084:	ldr	r2, [sp, #8]
    1088:	str	r0, [r2]
    108c:	ldr	r0, [sp]
    1090:	smmla	r1, r0, r1, r0
    1094:	asr	r2, r1, #5
    1098:	add	r1, r2, r1, lsr #31
    109c:	rsb	r1, r1, r1, lsl #4
    10a0:	sub	r0, r0, r1, lsl #2
    10a4:	str	r0, [sp]
    10a8:	ldr	r0, [sp]
    10ac:	ldr	r1, [sp, #4]
    10b0:	str	r0, [r1]
    10b4:	movw	r0, #0
    10b8:	str	r0, [fp, #-4]
    10bc:	ldr	r0, [fp, #-4]
    10c0:	mov	sp, fp
    10c4:	pop	{fp, pc}
    10c8:	.word	0x0001517f
    10cc:	.word	0xe320f000

000010d0 <coda_time_double_to_parts_utc>:
    10d0:	push	{r4, sl, fp, lr}
    10d4:	add	fp, sp, #8
    10d8:	sub	sp, sp, #152	; 0x98
    10dc:	ldr	ip, [fp, #16]
    10e0:	ldr	lr, [fp, #12]
    10e4:	ldr	r4, [fp, #8]
    10e8:	vstr	d0, [fp, #-24]	; 0xffffffe8
    10ec:	str	r0, [fp, #-28]	; 0xffffffe4
    10f0:	str	r1, [fp, #-32]	; 0xffffffe0
    10f4:	str	r2, [fp, #-36]	; 0xffffffdc
    10f8:	str	r3, [fp, #-40]	; 0xffffffd8
    10fc:	ldr	r0, [fp, #-28]	; 0xffffffe4
    1100:	movw	r1, #0
    1104:	cmp	r0, r1
    1108:	beq	116c <coda_time_double_to_parts_utc+0x9c>
    110c:	ldr	r0, [fp, #-32]	; 0xffffffe0
    1110:	movw	r1, #0
    1114:	cmp	r0, r1
    1118:	beq	116c <coda_time_double_to_parts_utc+0x9c>
    111c:	ldr	r0, [fp, #-36]	; 0xffffffdc
    1120:	movw	r1, #0
    1124:	cmp	r0, r1
    1128:	beq	116c <coda_time_double_to_parts_utc+0x9c>
    112c:	ldr	r0, [fp, #-40]	; 0xffffffd8
    1130:	movw	r1, #0
    1134:	cmp	r0, r1
    1138:	beq	116c <coda_time_double_to_parts_utc+0x9c>
    113c:	ldr	r0, [fp, #8]
    1140:	movw	r1, #0
    1144:	cmp	r0, r1
    1148:	beq	116c <coda_time_double_to_parts_utc+0x9c>
    114c:	ldr	r0, [fp, #12]
    1150:	movw	r1, #0
    1154:	cmp	r0, r1
    1158:	beq	116c <coda_time_double_to_parts_utc+0x9c>
    115c:	ldr	r0, [fp, #16]
    1160:	movw	r1, #0
    1164:	cmp	r0, r1
    1168:	bne	1194 <coda_time_double_to_parts_utc+0xc4>
    116c:	mvn	r0, #99	; 0x63
    1170:	movw	r1, #0
    1174:	movt	r1, #0
    1178:	movw	r2, #0
    117c:	movt	r2, #0
    1180:	movw	r3, #874	; 0x36a
    1184:	bl	0 <coda_set_error>
    1188:	mvn	r0, #0
    118c:	str	r0, [fp, #-12]
    1190:	b	14c0 <coda_time_double_to_parts_utc+0x3f0>
    1194:	vldr	d0, [fp, #-24]	; 0xffffffe8
    1198:	bl	0 <coda_isNaN>
    119c:	cmp	r0, #0
    11a0:	beq	11c0 <coda_time_double_to_parts_utc+0xf0>
    11a4:	mvn	r0, #103	; 0x67
    11a8:	movw	r1, #0
    11ac:	movt	r1, #0
    11b0:	bl	0 <coda_set_error>
    11b4:	mvn	r0, #0
    11b8:	str	r0, [fp, #-12]
    11bc:	b	14c0 <coda_time_double_to_parts_utc+0x3f0>
    11c0:	vldr	d0, [fp, #-24]	; 0xffffffe8
    11c4:	bl	0 <coda_isInf>
    11c8:	cmp	r0, #0
    11cc:	beq	11ec <coda_time_double_to_parts_utc+0x11c>
    11d0:	mvn	r0, #103	; 0x67
    11d4:	movw	r1, #0
    11d8:	movt	r1, #0
    11dc:	bl	0 <coda_set_error>
    11e0:	mvn	r0, #0
    11e4:	str	r0, [fp, #-12]
    11e8:	b	14c0 <coda_time_double_to_parts_utc+0x3f0>
    11ec:	vldr	d16, [fp, #-24]	; 0xffffffe8
    11f0:	vldr	d17, [pc, #728]	; 14d0 <coda_time_double_to_parts_utc+0x400>
    11f4:	vadd.f64	d16, d16, d17
    11f8:	vstr	d16, [fp, #-24]	; 0xffffffe8
    11fc:	vldr	d16, [fp, #-24]	; 0xffffffe8
    1200:	vrintm.f64	d16, d16
    1204:	vstr	d16, [fp, #-48]	; 0xffffffd0
    1208:	ldr	r0, [pc, #736]	; 14f0 <coda_time_double_to_parts_utc+0x420>
    120c:	str	r0, [sp, #64]	; 0x40
    1210:	bl	0 <__aeabi_read_tp>
    1214:	ldr	r1, [sp, #64]	; 0x40
    1218:	ldr	r0, [r0, r1]
    121c:	movw	r1, #0
    1220:	cmp	r0, r1
    1224:	beq	1248 <coda_time_double_to_parts_utc+0x178>
    1228:	ldr	r0, [pc, #708]	; 14f4 <coda_time_double_to_parts_utc+0x424>
    122c:	str	r0, [sp, #60]	; 0x3c
    1230:	bl	0 <__aeabi_read_tp>
    1234:	ldr	r1, [sp, #60]	; 0x3c
    1238:	ldr	r0, [r0, r1]
    123c:	cmp	r0, #0
    1240:	ble	1248 <coda_time_double_to_parts_utc+0x178>
    1244:	b	1268 <coda_time_double_to_parts_utc+0x198>
    1248:	movw	r0, #0
    124c:	movt	r0, #0
    1250:	movw	r1, #0
    1254:	movt	r1, #0
    1258:	movw	r2, #894	; 0x37e
    125c:	movw	r3, #0
    1260:	movt	r3, #0
    1264:	bl	0 <__assert_fail>
    1268:	movw	r0, #0
    126c:	str	r0, [sp, #72]	; 0x48
    1270:	ldr	r0, [sp, #72]	; 0x48
    1274:	ldr	r1, [pc, #632]	; 14f4 <coda_time_double_to_parts_utc+0x424>
    1278:	str	r0, [sp, #56]	; 0x38
    127c:	str	r1, [sp, #52]	; 0x34
    1280:	bl	0 <__aeabi_read_tp>
    1284:	ldr	r1, [sp, #52]	; 0x34
    1288:	ldr	r0, [r0, r1]
    128c:	ldr	r1, [sp, #56]	; 0x38
    1290:	cmp	r1, r0
    1294:	movw	r0, #0
    1298:	str	r0, [sp, #48]	; 0x30
    129c:	bge	12e0 <coda_time_double_to_parts_utc+0x210>
    12a0:	vldr	d16, [fp, #-48]	; 0xffffffd0
    12a4:	ldr	r0, [pc, #580]	; 14f0 <coda_time_double_to_parts_utc+0x420>
    12a8:	vstr	d16, [sp, #40]	; 0x28
    12ac:	str	r0, [sp, #36]	; 0x24
    12b0:	bl	0 <__aeabi_read_tp>
    12b4:	ldr	r1, [sp, #36]	; 0x24
    12b8:	ldr	r0, [r0, r1]
    12bc:	ldr	r1, [sp, #72]	; 0x48
    12c0:	add	r0, r0, r1, lsl #3
    12c4:	vldr	d16, [r0]
    12c8:	vldr	d17, [sp, #40]	; 0x28
    12cc:	vcmpe.f64	d17, d16
    12d0:	vmrs	APSR_nzcv, fpscr
    12d4:	movw	r0, #0
    12d8:	movgt	r0, #1
    12dc:	str	r0, [sp, #48]	; 0x30
    12e0:	ldr	r0, [sp, #48]	; 0x30
    12e4:	tst	r0, #1
    12e8:	beq	12fc <coda_time_double_to_parts_utc+0x22c>
    12ec:	ldr	r0, [sp, #72]	; 0x48
    12f0:	add	r0, r0, #1
    12f4:	str	r0, [sp, #72]	; 0x48
    12f8:	b	1270 <coda_time_double_to_parts_utc+0x1a0>
    12fc:	vldr	d16, [pc, #468]	; 14d8 <coda_time_double_to_parts_utc+0x408>
    1300:	vldr	d17, [pc, #472]	; 14e0 <coda_time_double_to_parts_utc+0x410>
    1304:	vldr	d18, [fp, #-48]	; 0xffffffd0
    1308:	ldr	r0, [pc, #480]	; 14f0 <coda_time_double_to_parts_utc+0x420>
    130c:	vstr	d16, [sp, #24]
    1310:	vstr	d17, [sp, #16]
    1314:	vstr	d18, [sp, #8]
    1318:	str	r0, [sp, #4]
    131c:	bl	0 <__aeabi_read_tp>
    1320:	ldr	r1, [sp, #4]
    1324:	ldr	r0, [r0, r1]
    1328:	ldr	r1, [sp, #72]	; 0x48
    132c:	add	r0, r0, r1, lsl #3
    1330:	vldr	d16, [r0]
    1334:	vldr	d17, [sp, #8]
    1338:	vsub.f64	d16, d17, d16
    133c:	vabs.f64	d16, d16
    1340:	vldr	d17, [sp, #16]
    1344:	vcmpe.f64	d16, d17
    1348:	vmrs	APSR_nzcv, fpscr
    134c:	movw	r0, #0
    1350:	movmi	r0, #1
    1354:	and	r0, r0, #1
    1358:	str	r0, [sp, #68]	; 0x44
    135c:	ldr	r0, [sp, #72]	; 0x48
    1360:	add	r0, r0, #10
    1364:	ldr	r1, [sp, #68]	; 0x44
    1368:	add	r0, r0, r1
    136c:	vmov	s0, r0
    1370:	vcvt.f64.s32	d16, s0
    1374:	vldr	d18, [fp, #-48]	; 0xffffffd0
    1378:	vsub.f64	d16, d18, d16
    137c:	vstr	d16, [fp, #-48]	; 0xffffffd0
    1380:	ldr	r0, [sp, #72]	; 0x48
    1384:	add	r0, r0, #10
    1388:	ldr	r1, [sp, #68]	; 0x44
    138c:	add	r0, r0, r1
    1390:	vmov	s0, r0
    1394:	vcvt.f64.s32	d16, s0
    1398:	vldr	d18, [fp, #-24]	; 0xffffffe8
    139c:	vsub.f64	d16, d18, d16
    13a0:	vstr	d16, [fp, #-24]	; 0xffffffe8
    13a4:	vldr	d16, [fp, #-48]	; 0xffffffd0
    13a8:	vldr	d18, [sp, #24]
    13ac:	vdiv.f64	d16, d16, d18
    13b0:	vrintm.f64	d16, d16
    13b4:	vcvt.s32.f64	s0, d16
    13b8:	vmov	r0, s0
    13bc:	str	r0, [sp, #80]	; 0x50
    13c0:	ldr	r0, [sp, #80]	; 0x50
    13c4:	sub	r1, fp, #52	; 0x34
    13c8:	sub	r2, fp, #56	; 0x38
    13cc:	sub	r3, fp, #60	; 0x3c
    13d0:	bl	4b4 <mjd2000_to_dmy>
    13d4:	cmp	r0, #0
    13d8:	beq	13e8 <coda_time_double_to_parts_utc+0x318>
    13dc:	mvn	r0, #0
    13e0:	str	r0, [fp, #-12]
    13e4:	b	14c0 <coda_time_double_to_parts_utc+0x3f0>
    13e8:	vldr	d16, [pc, #232]	; 14d8 <coda_time_double_to_parts_utc+0x408>
    13ec:	vldr	d17, [fp, #-48]	; 0xffffffd0
    13f0:	ldr	r0, [sp, #80]	; 0x50
    13f4:	vmov	s0, r0
    13f8:	vcvt.f64.s32	d18, s0
    13fc:	vmul.f64	d16, d18, d16
    1400:	vsub.f64	d16, d17, d16
    1404:	vcvt.s32.f64	s0, d16
    1408:	vmov	r0, s0
    140c:	str	r0, [sp, #76]	; 0x4c
    1410:	ldr	r0, [sp, #76]	; 0x4c
    1414:	sub	r1, fp, #64	; 0x40
    1418:	sub	r2, fp, #68	; 0x44
    141c:	sub	r3, fp, #72	; 0x48
    1420:	bl	fd0 <seconds_to_hms>
    1424:	cmp	r0, #0
    1428:	beq	1438 <coda_time_double_to_parts_utc+0x368>
    142c:	mvn	r0, #0
    1430:	str	r0, [fp, #-12]
    1434:	b	14c0 <coda_time_double_to_parts_utc+0x3f0>
    1438:	vldr	d16, [pc, #168]	; 14e8 <coda_time_double_to_parts_utc+0x418>
    143c:	vldr	d17, [fp, #-24]	; 0xffffffe8
    1440:	vldr	d18, [fp, #-48]	; 0xffffffd0
    1444:	vsub.f64	d17, d17, d18
    1448:	vmul.f64	d16, d17, d16
    144c:	vrintm.f64	d16, d16
    1450:	vcvt.s32.f64	s0, d16
    1454:	vmov	r0, s0
    1458:	str	r0, [fp, #-76]	; 0xffffffb4
    145c:	ldr	r0, [fp, #-60]	; 0xffffffc4
    1460:	ldr	r1, [fp, #-28]	; 0xffffffe4
    1464:	str	r0, [r1]
    1468:	ldr	r0, [fp, #-56]	; 0xffffffc8
    146c:	ldr	r1, [fp, #-32]	; 0xffffffe0
    1470:	str	r0, [r1]
    1474:	ldr	r0, [fp, #-52]	; 0xffffffcc
    1478:	ldr	r1, [fp, #-36]	; 0xffffffdc
    147c:	str	r0, [r1]
    1480:	ldr	r0, [fp, #-64]	; 0xffffffc0
    1484:	ldr	r1, [fp, #-40]	; 0xffffffd8
    1488:	str	r0, [r1]
    148c:	ldr	r0, [fp, #-68]	; 0xffffffbc
    1490:	ldr	r1, [fp, #8]
    1494:	str	r0, [r1]
    1498:	ldr	r0, [fp, #-72]	; 0xffffffb8
    149c:	ldr	r1, [sp, #68]	; 0x44
    14a0:	add	r0, r0, r1
    14a4:	ldr	r1, [fp, #12]
    14a8:	str	r0, [r1]
    14ac:	ldr	r0, [fp, #-76]	; 0xffffffb4
    14b0:	ldr	r1, [fp, #16]
    14b4:	str	r0, [r1]
    14b8:	movw	r0, #0
    14bc:	str	r0, [fp, #-12]
    14c0:	ldr	r0, [fp, #-12]
    14c4:	sub	sp, fp, #8
    14c8:	pop	{r4, sl, fp, pc}
    14cc:	nop	{0}
    14d0:	.word	0xa0b5ed8d
    14d4:	.word	0x3ea0c6f7
    14d8:	.word	0x00000000
    14dc:	.word	0x40f51800
    14e0:	.word	0x9999999a
    14e4:	.word	0x3fb99999
    14e8:	.word	0x00000000
    14ec:	.word	0x412e8480
	...

000014f8 <coda_time_parts_to_double>:
    14f8:	push	{r4, r5, fp, lr}
    14fc:	add	fp, sp, #8
    1500:	sub	sp, sp, #40	; 0x28
    1504:	ldr	ip, [fp, #20]
    1508:	ldr	lr, [fp, #16]
    150c:	ldr	r4, [fp, #12]
    1510:	ldr	r5, [fp, #8]
    1514:	str	r0, [fp, #-16]
    1518:	str	r1, [fp, #-20]	; 0xffffffec
    151c:	str	r2, [sp, #24]
    1520:	str	r3, [sp, #20]
    1524:	ldr	r0, [fp, #20]
    1528:	movw	r1, #0
    152c:	cmp	r0, r1
    1530:	bne	155c <coda_time_parts_to_double+0x64>
    1534:	mvn	r0, #99	; 0x63
    1538:	movw	r1, #0
    153c:	movt	r1, #0
    1540:	movw	r2, #0
    1544:	movt	r2, #0
    1548:	movw	r3, #954	; 0x3ba
    154c:	bl	0 <coda_set_error>
    1550:	mvn	r0, #0
    1554:	str	r0, [fp, #-12]
    1558:	b	15e0 <coda_time_parts_to_double+0xe8>
    155c:	ldr	r0, [sp, #24]
    1560:	ldr	r1, [fp, #-20]	; 0xffffffec
    1564:	ldr	r2, [fp, #-16]
    1568:	add	r3, sp, #4
    156c:	bl	364 <dmy_to_mjd2000>
    1570:	cmp	r0, #0
    1574:	beq	1584 <coda_time_parts_to_double+0x8c>
    1578:	mvn	r0, #0
    157c:	str	r0, [fp, #-12]
    1580:	b	15e0 <coda_time_parts_to_double+0xe8>
    1584:	ldr	r0, [sp, #20]
    1588:	ldr	r1, [fp, #8]
    158c:	ldr	r2, [fp, #12]
    1590:	ldr	r3, [fp, #16]
    1594:	add	ip, sp, #8
    1598:	str	ip, [sp]
    159c:	bl	15f8 <hms_to_daytime>
    15a0:	cmp	r0, #0
    15a4:	beq	15b4 <coda_time_parts_to_double+0xbc>
    15a8:	mvn	r0, #0
    15ac:	str	r0, [fp, #-12]
    15b0:	b	15e0 <coda_time_parts_to_double+0xe8>
    15b4:	vldr	d16, [pc, #52]	; 15f0 <coda_time_parts_to_double+0xf8>
    15b8:	ldr	r0, [sp, #4]
    15bc:	vmov	s0, r0
    15c0:	vcvt.f64.s32	d17, s0
    15c4:	vmul.f64	d16, d16, d17
    15c8:	vldr	d17, [sp, #8]
    15cc:	vadd.f64	d16, d16, d17
    15d0:	ldr	r0, [fp, #20]
    15d4:	vstr	d16, [r0]
    15d8:	movw	r0, #0
    15dc:	str	r0, [fp, #-12]
    15e0:	ldr	r0, [fp, #-12]
    15e4:	sub	sp, fp, #8
    15e8:	pop	{r4, r5, fp, pc}
    15ec:	nop	{0}
    15f0:	.word	0x00000000
    15f4:	.word	0x40f51800

000015f8 <hms_to_daytime>:
    15f8:	push	{fp, lr}
    15fc:	mov	fp, sp
    1600:	sub	sp, sp, #40	; 0x28
    1604:	ldr	ip, [fp, #8]
    1608:	str	r0, [fp, #-8]
    160c:	str	r1, [fp, #-12]
    1610:	str	r2, [fp, #-16]
    1614:	str	r3, [sp, #20]
    1618:	ldr	r0, [fp, #-8]
    161c:	cmp	r0, #0
    1620:	blt	167c <hms_to_daytime+0x84>
    1624:	ldr	r0, [fp, #-8]
    1628:	cmp	r0, #23
    162c:	bgt	167c <hms_to_daytime+0x84>
    1630:	ldr	r0, [fp, #-12]
    1634:	cmp	r0, #0
    1638:	blt	167c <hms_to_daytime+0x84>
    163c:	ldr	r0, [fp, #-12]
    1640:	cmp	r0, #59	; 0x3b
    1644:	bgt	167c <hms_to_daytime+0x84>
    1648:	ldr	r0, [fp, #-16]
    164c:	cmp	r0, #0
    1650:	blt	167c <hms_to_daytime+0x84>
    1654:	ldr	r0, [fp, #-16]
    1658:	cmp	r0, #60	; 0x3c
    165c:	bgt	167c <hms_to_daytime+0x84>
    1660:	ldr	r0, [sp, #20]
    1664:	cmp	r0, #0
    1668:	blt	167c <hms_to_daytime+0x84>
    166c:	ldr	r0, [pc, #228]	; 1758 <hms_to_daytime+0x160>
    1670:	ldr	r1, [sp, #20]
    1674:	cmp	r1, r0
    1678:	ble	16c8 <hms_to_daytime+0xd0>
    167c:	ldr	r2, [fp, #-8]
    1680:	ldr	r3, [fp, #-12]
    1684:	ldr	r0, [fp, #-16]
    1688:	ldr	r1, [sp, #20]
    168c:	mvn	ip, #103	; 0x67
    1690:	str	r0, [sp, #16]
    1694:	mov	r0, ip
    1698:	movw	ip, #0
    169c:	movt	ip, #0
    16a0:	str	r1, [sp, #12]
    16a4:	mov	r1, ip
    16a8:	ldr	ip, [sp, #16]
    16ac:	str	ip, [sp]
    16b0:	ldr	lr, [sp, #12]
    16b4:	str	lr, [sp, #4]
    16b8:	bl	0 <coda_set_error>
    16bc:	mvn	r0, #0
    16c0:	str	r0, [fp, #-4]
    16c4:	b	1734 <hms_to_daytime+0x13c>
    16c8:	vldr	d16, [pc, #112]	; 1740 <hms_to_daytime+0x148>
    16cc:	vldr	d17, [pc, #116]	; 1748 <hms_to_daytime+0x150>
    16d0:	vldr	d18, [pc, #120]	; 1750 <hms_to_daytime+0x158>
    16d4:	ldr	r0, [fp, #-8]
    16d8:	vmov	s0, r0
    16dc:	vcvt.f64.s32	d19, s0
    16e0:	vmul.f64	d18, d18, d19
    16e4:	ldr	r0, [fp, #-12]
    16e8:	vmov	s0, r0
    16ec:	vcvt.f64.s32	d19, s0
    16f0:	vmul.f64	d17, d17, d19
    16f4:	vadd.f64	d17, d18, d17
    16f8:	ldr	r0, [fp, #-16]
    16fc:	vmov	s0, r0
    1700:	vcvt.f64.s32	d18, s0
    1704:	vmov.f64	d19, #112	; 0x3f800000  1.0
    1708:	vmul.f64	d18, d19, d18
    170c:	vadd.f64	d17, d17, d18
    1710:	ldr	r0, [sp, #20]
    1714:	vmov	s0, r0
    1718:	vcvt.f64.s32	d18, s0
    171c:	vdiv.f64	d16, d18, d16
    1720:	vadd.f64	d16, d17, d16
    1724:	ldr	r0, [fp, #8]
    1728:	vstr	d16, [r0]
    172c:	movw	r0, #0
    1730:	str	r0, [fp, #-4]
    1734:	ldr	r0, [fp, #-4]
    1738:	mov	sp, fp
    173c:	pop	{fp, pc}
    1740:	.word	0x00000000
    1744:	.word	0x412e8480
    1748:	.word	0x00000000
    174c:	.word	0x404e0000
    1750:	.word	0x00000000
    1754:	.word	0x40ac2000
    1758:	.word	0x000f423f
    175c:	.word	0xe320f000

00001760 <coda_time_parts_to_double_utc>:
    1760:	push	{r4, r5, fp, lr}
    1764:	add	fp, sp, #8
    1768:	sub	sp, sp, #88	; 0x58
    176c:	ldr	ip, [fp, #20]
    1770:	ldr	lr, [fp, #16]
    1774:	ldr	r4, [fp, #12]
    1778:	ldr	r5, [fp, #8]
    177c:	str	r0, [fp, #-16]
    1780:	str	r1, [fp, #-20]	; 0xffffffec
    1784:	str	r2, [fp, #-24]	; 0xffffffe8
    1788:	str	r3, [fp, #-28]	; 0xffffffe4
    178c:	ldr	r0, [fp, #20]
    1790:	movw	r1, #0
    1794:	cmp	r0, r1
    1798:	bne	17c4 <coda_time_parts_to_double_utc+0x64>
    179c:	mvn	r0, #99	; 0x63
    17a0:	movw	r1, #0
    17a4:	movt	r1, #0
    17a8:	movw	r2, #0
    17ac:	movt	r2, #0
    17b0:	movw	r3, #1008	; 0x3f0
    17b4:	bl	0 <coda_set_error>
    17b8:	mvn	r0, #0
    17bc:	str	r0, [fp, #-12]
    17c0:	b	1954 <coda_time_parts_to_double_utc+0x1f4>
    17c4:	ldr	r0, [fp, #-24]	; 0xffffffe8
    17c8:	ldr	r1, [fp, #-20]	; 0xffffffec
    17cc:	ldr	r2, [fp, #-16]
    17d0:	add	r3, sp, #44	; 0x2c
    17d4:	bl	364 <dmy_to_mjd2000>
    17d8:	cmp	r0, #0
    17dc:	beq	17ec <coda_time_parts_to_double_utc+0x8c>
    17e0:	mvn	r0, #0
    17e4:	str	r0, [fp, #-12]
    17e8:	b	1954 <coda_time_parts_to_double_utc+0x1f4>
    17ec:	ldr	r0, [fp, #-28]	; 0xffffffe4
    17f0:	ldr	r1, [fp, #8]
    17f4:	ldr	r2, [fp, #12]
    17f8:	ldr	r3, [fp, #16]
    17fc:	sub	ip, fp, #40	; 0x28
    1800:	str	ip, [sp]
    1804:	bl	15f8 <hms_to_daytime>
    1808:	cmp	r0, #0
    180c:	beq	181c <coda_time_parts_to_double_utc+0xbc>
    1810:	mvn	r0, #0
    1814:	str	r0, [fp, #-12]
    1818:	b	1954 <coda_time_parts_to_double_utc+0x1f4>
    181c:	vldr	s0, [sp, #44]	; 0x2c
    1820:	vcvt.f64.s32	d16, s0
    1824:	vldr	d17, [pc, #308]	; 1960 <coda_time_parts_to_double_utc+0x200>
    1828:	vmov.f64	d18, #36	; 0x41200000  10.0
    182c:	vmla.f64	d18, d16, d17
    1830:	vstr	d18, [sp, #48]	; 0x30
    1834:	ldr	r0, [pc, #300]	; 1968 <coda_time_parts_to_double_utc+0x208>
    1838:	str	r0, [sp, #36]	; 0x24
    183c:	bl	0 <__aeabi_read_tp>
    1840:	ldr	r1, [sp, #36]	; 0x24
    1844:	ldr	r0, [r0, r1]
    1848:	movw	r1, #0
    184c:	cmp	r0, r1
    1850:	beq	1874 <coda_time_parts_to_double_utc+0x114>
    1854:	ldr	r0, [pc, #272]	; 196c <coda_time_parts_to_double_utc+0x20c>
    1858:	str	r0, [sp, #32]
    185c:	bl	0 <__aeabi_read_tp>
    1860:	ldr	r1, [sp, #32]
    1864:	ldr	r0, [r0, r1]
    1868:	cmp	r0, #0
    186c:	ble	1874 <coda_time_parts_to_double_utc+0x114>
    1870:	b	1894 <coda_time_parts_to_double_utc+0x134>
    1874:	movw	r0, #0
    1878:	movt	r0, #0
    187c:	movw	r1, #0
    1880:	movt	r1, #0
    1884:	movw	r2, #1024	; 0x400
    1888:	movw	r3, #0
    188c:	movt	r3, #0
    1890:	bl	0 <__assert_fail>
    1894:	movw	r0, #0
    1898:	str	r0, [sp, #40]	; 0x28
    189c:	ldr	r0, [sp, #40]	; 0x28
    18a0:	ldr	r1, [pc, #196]	; 196c <coda_time_parts_to_double_utc+0x20c>
    18a4:	str	r0, [sp, #28]
    18a8:	str	r1, [sp, #24]
    18ac:	bl	0 <__aeabi_read_tp>
    18b0:	ldr	r1, [sp, #24]
    18b4:	ldr	r0, [r0, r1]
    18b8:	ldr	r1, [sp, #28]
    18bc:	cmp	r1, r0
    18c0:	movw	r0, #0
    18c4:	str	r0, [sp, #20]
    18c8:	bge	190c <coda_time_parts_to_double_utc+0x1ac>
    18cc:	vldr	d16, [sp, #48]	; 0x30
    18d0:	ldr	r0, [pc, #144]	; 1968 <coda_time_parts_to_double_utc+0x208>
    18d4:	vstr	d16, [sp, #8]
    18d8:	str	r0, [sp, #4]
    18dc:	bl	0 <__aeabi_read_tp>
    18e0:	ldr	r1, [sp, #4]
    18e4:	ldr	r0, [r0, r1]
    18e8:	ldr	r1, [sp, #40]	; 0x28
    18ec:	add	r0, r0, r1, lsl #3
    18f0:	vldr	d16, [r0]
    18f4:	vldr	d17, [sp, #8]
    18f8:	vcmpe.f64	d17, d16
    18fc:	vmrs	APSR_nzcv, fpscr
    1900:	movw	r0, #0
    1904:	movge	r0, #1
    1908:	str	r0, [sp, #20]
    190c:	ldr	r0, [sp, #20]
    1910:	tst	r0, #1
    1914:	beq	1938 <coda_time_parts_to_double_utc+0x1d8>
    1918:	vldr	d16, [sp, #48]	; 0x30
    191c:	vmov.f64	d17, #112	; 0x3f800000  1.0
    1920:	vadd.f64	d16, d16, d17
    1924:	vstr	d16, [sp, #48]	; 0x30
    1928:	ldr	r0, [sp, #40]	; 0x28
    192c:	add	r0, r0, #1
    1930:	str	r0, [sp, #40]	; 0x28
    1934:	b	189c <coda_time_parts_to_double_utc+0x13c>
    1938:	vldr	d16, [sp, #48]	; 0x30
    193c:	vldr	d17, [fp, #-40]	; 0xffffffd8
    1940:	vadd.f64	d16, d16, d17
    1944:	ldr	r0, [fp, #20]
    1948:	vstr	d16, [r0]
    194c:	movw	r0, #0
    1950:	str	r0, [fp, #-12]
    1954:	ldr	r0, [fp, #-12]
    1958:	sub	sp, fp, #8
    195c:	pop	{r4, r5, fp, pc}
    1960:	.word	0x00000000
    1964:	.word	0x40f51800
	...

00001970 <coda_time_parts_to_string>:
    1970:	push	{r4, r5, r6, r7, fp, lr}
    1974:	add	fp, sp, #16
    1978:	sub	sp, sp, #136	; 0x88
    197c:	ldr	ip, [fp, #24]
    1980:	ldr	lr, [fp, #20]
    1984:	ldr	r4, [fp, #16]
    1988:	ldr	r5, [fp, #12]
    198c:	ldr	r6, [fp, #8]
    1990:	movw	r7, #0
    1994:	movt	r7, #0
    1998:	str	r0, [fp, #-24]	; 0xffffffe8
    199c:	str	r1, [fp, #-28]	; 0xffffffe4
    19a0:	str	r2, [fp, #-32]	; 0xffffffe0
    19a4:	str	r3, [fp, #-36]	; 0xffffffdc
    19a8:	add	r0, sp, #68	; 0x44
    19ac:	mov	r1, r7
    19b0:	movw	r2, #48	; 0x30
    19b4:	str	ip, [sp, #32]
    19b8:	str	lr, [sp, #28]
    19bc:	str	r4, [sp, #24]
    19c0:	str	r5, [sp, #20]
    19c4:	str	r6, [sp, #16]
    19c8:	bl	0 <memcpy>
    19cc:	movw	r0, #0
    19d0:	str	r0, [sp, #64]	; 0x40
    19d4:	str	r0, [sp, #60]	; 0x3c
    19d8:	str	r0, [sp, #56]	; 0x38
    19dc:	ldr	r1, [fp, #20]
    19e0:	cmp	r1, r0
    19e4:	bne	1a10 <coda_time_parts_to_string+0xa0>
    19e8:	mvn	r0, #99	; 0x63
    19ec:	movw	r1, #0
    19f0:	movt	r1, #0
    19f4:	movw	r2, #0
    19f8:	movt	r2, #0
    19fc:	movw	r3, #1069	; 0x42d
    1a00:	bl	0 <coda_set_error>
    1a04:	mvn	r0, #0
    1a08:	str	r0, [fp, #-20]	; 0xffffffec
    1a0c:	b	22b8 <coda_time_parts_to_string+0x948>
    1a10:	ldr	r0, [fp, #24]
    1a14:	movw	r1, #0
    1a18:	cmp	r0, r1
    1a1c:	bne	1a48 <coda_time_parts_to_string+0xd8>
    1a20:	mvn	r0, #99	; 0x63
    1a24:	movw	r1, #0
    1a28:	movt	r1, #0
    1a2c:	movw	r2, #0
    1a30:	movt	r2, #0
    1a34:	movw	r3, #1074	; 0x432
    1a38:	bl	0 <coda_set_error>
    1a3c:	mvn	r0, #0
    1a40:	str	r0, [fp, #-20]	; 0xffffffec
    1a44:	b	22b8 <coda_time_parts_to_string+0x948>
    1a48:	b	1a4c <coda_time_parts_to_string+0xdc>
    1a4c:	ldr	r0, [fp, #20]
    1a50:	ldr	r1, [sp, #60]	; 0x3c
    1a54:	add	r0, r0, r1
    1a58:	ldrb	r0, [r0]
    1a5c:	cmp	r0, #0
    1a60:	movw	r0, #0
    1a64:	str	r0, [sp, #12]
    1a68:	beq	1aa8 <coda_time_parts_to_string+0x138>
    1a6c:	ldr	r0, [sp, #64]	; 0x40
    1a70:	cmp	r0, #0
    1a74:	movw	r0, #1
    1a78:	str	r0, [sp, #8]
    1a7c:	bne	1aa0 <coda_time_parts_to_string+0x130>
    1a80:	ldr	r0, [fp, #20]
    1a84:	ldr	r1, [sp, #60]	; 0x3c
    1a88:	add	r0, r0, r1
    1a8c:	ldrb	r0, [r0]
    1a90:	cmp	r0, #124	; 0x7c
    1a94:	movw	r0, #0
    1a98:	movne	r0, #1
    1a9c:	str	r0, [sp, #8]
    1aa0:	ldr	r0, [sp, #8]
    1aa4:	str	r0, [sp, #12]
    1aa8:	ldr	r0, [sp, #12]
    1aac:	tst	r0, #1
    1ab0:	beq	2284 <coda_time_parts_to_string+0x914>
    1ab4:	ldr	r0, [fp, #20]
    1ab8:	ldr	r1, [sp, #60]	; 0x3c
    1abc:	add	r0, r0, r1
    1ac0:	ldrb	r0, [r0]
    1ac4:	cmp	r0, #39	; 0x27
    1ac8:	bne	1b18 <coda_time_parts_to_string+0x1a8>
    1acc:	ldr	r0, [sp, #60]	; 0x3c
    1ad0:	add	r0, r0, #1
    1ad4:	str	r0, [sp, #60]	; 0x3c
    1ad8:	ldr	r0, [fp, #20]
    1adc:	ldr	r1, [sp, #60]	; 0x3c
    1ae0:	add	r0, r0, r1
    1ae4:	ldrb	r0, [r0]
    1ae8:	cmp	r0, #39	; 0x27
    1aec:	beq	1b14 <coda_time_parts_to_string+0x1a4>
    1af0:	ldr	r0, [sp, #64]	; 0x40
    1af4:	cmp	r0, #0
    1af8:	movw	r0, #0
    1afc:	movne	r0, #1
    1b00:	mvn	r1, #0
    1b04:	eor	r0, r0, r1
    1b08:	and	r0, r0, #1
    1b0c:	str	r0, [sp, #64]	; 0x40
    1b10:	b	1a4c <coda_time_parts_to_string+0xdc>
    1b14:	b	1b18 <coda_time_parts_to_string+0x1a8>
    1b18:	ldr	r0, [sp, #64]	; 0x40
    1b1c:	cmp	r0, #0
    1b20:	beq	1b60 <coda_time_parts_to_string+0x1f0>
    1b24:	ldr	r0, [fp, #20]
    1b28:	ldr	r1, [sp, #60]	; 0x3c
    1b2c:	add	r0, r0, r1
    1b30:	ldrb	r0, [r0]
    1b34:	ldr	r1, [fp, #24]
    1b38:	ldr	r2, [sp, #56]	; 0x38
    1b3c:	add	r1, r1, r2
    1b40:	strb	r0, [r1]
    1b44:	ldr	r0, [sp, #60]	; 0x3c
    1b48:	add	r0, r0, #1
    1b4c:	str	r0, [sp, #60]	; 0x3c
    1b50:	ldr	r0, [sp, #56]	; 0x38
    1b54:	add	r0, r0, #1
    1b58:	str	r0, [sp, #56]	; 0x38
    1b5c:	b	2280 <coda_time_parts_to_string+0x910>
    1b60:	ldr	r0, [fp, #20]
    1b64:	ldr	r1, [sp, #60]	; 0x3c
    1b68:	add	r0, r0, r1
    1b6c:	ldrb	r0, [r0]
    1b70:	cmp	r0, #121	; 0x79
    1b74:	bne	1c3c <coda_time_parts_to_string+0x2cc>
    1b78:	ldr	r0, [fp, #20]
    1b7c:	ldr	r1, [sp, #60]	; 0x3c
    1b80:	add	r1, r1, #1
    1b84:	add	r0, r0, r1
    1b88:	ldrb	r0, [r0]
    1b8c:	cmp	r0, #121	; 0x79
    1b90:	bne	1c3c <coda_time_parts_to_string+0x2cc>
    1b94:	ldr	r0, [fp, #20]
    1b98:	ldr	r1, [sp, #60]	; 0x3c
    1b9c:	add	r1, r1, #2
    1ba0:	add	r0, r0, r1
    1ba4:	ldrb	r0, [r0]
    1ba8:	cmp	r0, #121	; 0x79
    1bac:	bne	1c3c <coda_time_parts_to_string+0x2cc>
    1bb0:	ldr	r0, [fp, #20]
    1bb4:	ldr	r1, [sp, #60]	; 0x3c
    1bb8:	add	r1, r1, #3
    1bbc:	add	r0, r0, r1
    1bc0:	ldrb	r0, [r0]
    1bc4:	cmp	r0, #121	; 0x79
    1bc8:	bne	1c3c <coda_time_parts_to_string+0x2cc>
    1bcc:	ldr	r0, [fp, #-24]	; 0xffffffe8
    1bd0:	cmp	r0, #0
    1bd4:	blt	1be8 <coda_time_parts_to_string+0x278>
    1bd8:	ldr	r0, [fp, #-24]	; 0xffffffe8
    1bdc:	movw	r1, #9999	; 0x270f
    1be0:	cmp	r0, r1
    1be4:	ble	1c04 <coda_time_parts_to_string+0x294>
    1be8:	mvn	r0, #103	; 0x67
    1bec:	movw	r1, #0
    1bf0:	movt	r1, #0
    1bf4:	bl	0 <coda_set_error>
    1bf8:	mvn	r0, #0
    1bfc:	str	r0, [fp, #-20]	; 0xffffffec
    1c00:	b	22b8 <coda_time_parts_to_string+0x948>
    1c04:	ldr	r0, [fp, #24]
    1c08:	ldr	r1, [sp, #56]	; 0x38
    1c0c:	add	r0, r0, r1
    1c10:	ldr	r2, [fp, #-24]	; 0xffffffe8
    1c14:	movw	r1, #0
    1c18:	movt	r1, #0
    1c1c:	bl	0 <sprintf>
    1c20:	ldr	r1, [sp, #60]	; 0x3c
    1c24:	add	r1, r1, #4
    1c28:	str	r1, [sp, #60]	; 0x3c
    1c2c:	ldr	r1, [sp, #56]	; 0x38
    1c30:	add	r1, r1, #4
    1c34:	str	r1, [sp, #56]	; 0x38
    1c38:	b	227c <coda_time_parts_to_string+0x90c>
    1c3c:	ldr	r0, [fp, #20]
    1c40:	ldr	r1, [sp, #60]	; 0x3c
    1c44:	add	r0, r0, r1
    1c48:	ldrb	r0, [r0]
    1c4c:	cmp	r0, #77	; 0x4d
    1c50:	bne	1d3c <coda_time_parts_to_string+0x3cc>
    1c54:	ldr	r0, [fp, #20]
    1c58:	ldr	r1, [sp, #60]	; 0x3c
    1c5c:	add	r1, r1, #1
    1c60:	add	r0, r0, r1
    1c64:	ldrb	r0, [r0]
    1c68:	cmp	r0, #77	; 0x4d
    1c6c:	bne	1d3c <coda_time_parts_to_string+0x3cc>
    1c70:	ldr	r0, [fp, #-28]	; 0xffffffe4
    1c74:	cmp	r0, #1
    1c78:	blt	1c88 <coda_time_parts_to_string+0x318>
    1c7c:	ldr	r0, [fp, #-28]	; 0xffffffe4
    1c80:	cmp	r0, #12
    1c84:	ble	1ca4 <coda_time_parts_to_string+0x334>
    1c88:	mvn	r0, #103	; 0x67
    1c8c:	movw	r1, #0
    1c90:	movt	r1, #0
    1c94:	bl	0 <coda_set_error>
    1c98:	mvn	r0, #0
    1c9c:	str	r0, [fp, #-20]	; 0xffffffec
    1ca0:	b	22b8 <coda_time_parts_to_string+0x948>
    1ca4:	ldr	r0, [fp, #20]
    1ca8:	ldr	r1, [sp, #60]	; 0x3c
    1cac:	add	r1, r1, #2
    1cb0:	add	r0, r0, r1
    1cb4:	ldrb	r0, [r0]
    1cb8:	cmp	r0, #77	; 0x4d
    1cbc:	bne	1d04 <coda_time_parts_to_string+0x394>
    1cc0:	ldr	r0, [fp, #24]
    1cc4:	ldr	r1, [sp, #56]	; 0x38
    1cc8:	add	r0, r0, r1
    1ccc:	ldr	r1, [fp, #-28]	; 0xffffffe4
    1cd0:	add	r2, sp, #68	; 0x44
    1cd4:	add	r1, r2, r1, lsl #2
    1cd8:	ldr	r2, [r1]
    1cdc:	movw	r1, #0
    1ce0:	movt	r1, #0
    1ce4:	bl	0 <sprintf>
    1ce8:	ldr	r1, [sp, #60]	; 0x3c
    1cec:	add	r1, r1, #3
    1cf0:	str	r1, [sp, #60]	; 0x3c
    1cf4:	ldr	r1, [sp, #56]	; 0x38
    1cf8:	add	r1, r1, #3
    1cfc:	str	r1, [sp, #56]	; 0x38
    1d00:	b	1d38 <coda_time_parts_to_string+0x3c8>
    1d04:	ldr	r0, [fp, #24]
    1d08:	ldr	r1, [sp, #56]	; 0x38
    1d0c:	add	r0, r0, r1
    1d10:	ldr	r2, [fp, #-28]	; 0xffffffe4
    1d14:	movw	r1, #0
    1d18:	movt	r1, #0
    1d1c:	bl	0 <sprintf>
    1d20:	ldr	r1, [sp, #60]	; 0x3c
    1d24:	add	r1, r1, #2
    1d28:	str	r1, [sp, #60]	; 0x3c
    1d2c:	ldr	r1, [sp, #56]	; 0x38
    1d30:	add	r1, r1, #2
    1d34:	str	r1, [sp, #56]	; 0x38
    1d38:	b	2278 <coda_time_parts_to_string+0x908>
    1d3c:	ldr	r0, [fp, #20]
    1d40:	ldr	r1, [sp, #60]	; 0x3c
    1d44:	add	r0, r0, r1
    1d48:	ldrb	r0, [r0]
    1d4c:	cmp	r0, #100	; 0x64
    1d50:	bne	1ddc <coda_time_parts_to_string+0x46c>
    1d54:	ldr	r0, [fp, #20]
    1d58:	ldr	r1, [sp, #60]	; 0x3c
    1d5c:	add	r1, r1, #1
    1d60:	add	r0, r0, r1
    1d64:	ldrb	r0, [r0]
    1d68:	cmp	r0, #100	; 0x64
    1d6c:	bne	1ddc <coda_time_parts_to_string+0x46c>
    1d70:	ldr	r0, [fp, #-32]	; 0xffffffe0
    1d74:	cmp	r0, #1
    1d78:	blt	1d88 <coda_time_parts_to_string+0x418>
    1d7c:	ldr	r0, [fp, #-32]	; 0xffffffe0
    1d80:	cmp	r0, #31
    1d84:	ble	1da4 <coda_time_parts_to_string+0x434>
    1d88:	mvn	r0, #103	; 0x67
    1d8c:	movw	r1, #0
    1d90:	movt	r1, #0
    1d94:	bl	0 <coda_set_error>
    1d98:	mvn	r0, #0
    1d9c:	str	r0, [fp, #-20]	; 0xffffffec
    1da0:	b	22b8 <coda_time_parts_to_string+0x948>
    1da4:	ldr	r0, [fp, #24]
    1da8:	ldr	r1, [sp, #56]	; 0x38
    1dac:	add	r0, r0, r1
    1db0:	ldr	r2, [fp, #-32]	; 0xffffffe0
    1db4:	movw	r1, #0
    1db8:	movt	r1, #0
    1dbc:	bl	0 <sprintf>
    1dc0:	ldr	r1, [sp, #60]	; 0x3c
    1dc4:	add	r1, r1, #2
    1dc8:	str	r1, [sp, #60]	; 0x3c
    1dcc:	ldr	r1, [sp, #56]	; 0x38
    1dd0:	add	r1, r1, #2
    1dd4:	str	r1, [sp, #56]	; 0x38
    1dd8:	b	2274 <coda_time_parts_to_string+0x904>
    1ddc:	ldr	r0, [fp, #20]
    1de0:	ldr	r1, [sp, #60]	; 0x3c
    1de4:	add	r0, r0, r1
    1de8:	ldrb	r0, [r0]
    1dec:	cmp	r0, #68	; 0x44
    1df0:	bne	1ec4 <coda_time_parts_to_string+0x554>
    1df4:	ldr	r0, [fp, #20]
    1df8:	ldr	r1, [sp, #60]	; 0x3c
    1dfc:	add	r1, r1, #1
    1e00:	add	r0, r0, r1
    1e04:	ldrb	r0, [r0]
    1e08:	cmp	r0, #68	; 0x44
    1e0c:	bne	1ec4 <coda_time_parts_to_string+0x554>
    1e10:	ldr	r0, [fp, #20]
    1e14:	ldr	r1, [sp, #60]	; 0x3c
    1e18:	add	r1, r1, #2
    1e1c:	add	r0, r0, r1
    1e20:	ldrb	r0, [r0]
    1e24:	cmp	r0, #68	; 0x44
    1e28:	bne	1ec4 <coda_time_parts_to_string+0x554>
    1e2c:	ldr	r0, [fp, #-32]	; 0xffffffe0
    1e30:	ldr	r1, [fp, #-28]	; 0xffffffe4
    1e34:	ldr	r2, [fp, #-24]	; 0xffffffe8
    1e38:	add	r3, sp, #52	; 0x34
    1e3c:	bl	364 <dmy_to_mjd2000>
    1e40:	cmp	r0, #0
    1e44:	beq	1e54 <coda_time_parts_to_string+0x4e4>
    1e48:	mvn	r0, #0
    1e4c:	str	r0, [fp, #-20]	; 0xffffffec
    1e50:	b	22b8 <coda_time_parts_to_string+0x948>
    1e54:	ldr	r2, [fp, #-24]	; 0xffffffe8
    1e58:	movw	r0, #1
    1e5c:	str	r0, [sp, #4]
    1e60:	ldr	r1, [sp, #4]
    1e64:	add	r3, sp, #48	; 0x30
    1e68:	bl	364 <dmy_to_mjd2000>
    1e6c:	cmp	r0, #0
    1e70:	beq	1e80 <coda_time_parts_to_string+0x510>
    1e74:	mvn	r0, #0
    1e78:	str	r0, [fp, #-20]	; 0xffffffec
    1e7c:	b	22b8 <coda_time_parts_to_string+0x948>
    1e80:	ldr	r0, [fp, #24]
    1e84:	ldr	r1, [sp, #56]	; 0x38
    1e88:	add	r0, r0, r1
    1e8c:	ldr	r1, [sp, #52]	; 0x34
    1e90:	ldr	r2, [sp, #48]	; 0x30
    1e94:	sub	r1, r1, r2
    1e98:	add	r2, r1, #1
    1e9c:	movw	r1, #0
    1ea0:	movt	r1, #0
    1ea4:	bl	0 <sprintf>
    1ea8:	ldr	r1, [sp, #60]	; 0x3c
    1eac:	add	r1, r1, #3
    1eb0:	str	r1, [sp, #60]	; 0x3c
    1eb4:	ldr	r1, [sp, #56]	; 0x38
    1eb8:	add	r1, r1, #3
    1ebc:	str	r1, [sp, #56]	; 0x38
    1ec0:	b	2270 <coda_time_parts_to_string+0x900>
    1ec4:	ldr	r0, [fp, #20]
    1ec8:	ldr	r1, [sp, #60]	; 0x3c
    1ecc:	add	r0, r0, r1
    1ed0:	ldrb	r0, [r0]
    1ed4:	cmp	r0, #72	; 0x48
    1ed8:	bne	1f64 <coda_time_parts_to_string+0x5f4>
    1edc:	ldr	r0, [fp, #20]
    1ee0:	ldr	r1, [sp, #60]	; 0x3c
    1ee4:	add	r1, r1, #1
    1ee8:	add	r0, r0, r1
    1eec:	ldrb	r0, [r0]
    1ef0:	cmp	r0, #72	; 0x48
    1ef4:	bne	1f64 <coda_time_parts_to_string+0x5f4>
    1ef8:	ldr	r0, [fp, #-36]	; 0xffffffdc
    1efc:	cmp	r0, #0
    1f00:	blt	1f10 <coda_time_parts_to_string+0x5a0>
    1f04:	ldr	r0, [fp, #-36]	; 0xffffffdc
    1f08:	cmp	r0, #23
    1f0c:	ble	1f2c <coda_time_parts_to_string+0x5bc>
    1f10:	mvn	r0, #103	; 0x67
    1f14:	movw	r1, #0
    1f18:	movt	r1, #0
    1f1c:	bl	0 <coda_set_error>
    1f20:	mvn	r0, #0
    1f24:	str	r0, [fp, #-20]	; 0xffffffec
    1f28:	b	22b8 <coda_time_parts_to_string+0x948>
    1f2c:	ldr	r0, [fp, #24]
    1f30:	ldr	r1, [sp, #56]	; 0x38
    1f34:	add	r0, r0, r1
    1f38:	ldr	r2, [fp, #-36]	; 0xffffffdc
    1f3c:	movw	r1, #0
    1f40:	movt	r1, #0
    1f44:	bl	0 <sprintf>
    1f48:	ldr	r1, [sp, #60]	; 0x3c
    1f4c:	add	r1, r1, #2
    1f50:	str	r1, [sp, #60]	; 0x3c
    1f54:	ldr	r1, [sp, #56]	; 0x38
    1f58:	add	r1, r1, #2
    1f5c:	str	r1, [sp, #56]	; 0x38
    1f60:	b	226c <coda_time_parts_to_string+0x8fc>
    1f64:	ldr	r0, [fp, #20]
    1f68:	ldr	r1, [sp, #60]	; 0x3c
    1f6c:	add	r0, r0, r1
    1f70:	ldrb	r0, [r0]
    1f74:	cmp	r0, #109	; 0x6d
    1f78:	bne	2004 <coda_time_parts_to_string+0x694>
    1f7c:	ldr	r0, [fp, #20]
    1f80:	ldr	r1, [sp, #60]	; 0x3c
    1f84:	add	r1, r1, #1
    1f88:	add	r0, r0, r1
    1f8c:	ldrb	r0, [r0]
    1f90:	cmp	r0, #109	; 0x6d
    1f94:	bne	2004 <coda_time_parts_to_string+0x694>
    1f98:	ldr	r0, [fp, #8]
    1f9c:	cmp	r0, #0
    1fa0:	blt	1fb0 <coda_time_parts_to_string+0x640>
    1fa4:	ldr	r0, [fp, #8]
    1fa8:	cmp	r0, #59	; 0x3b
    1fac:	ble	1fcc <coda_time_parts_to_string+0x65c>
    1fb0:	mvn	r0, #103	; 0x67
    1fb4:	movw	r1, #0
    1fb8:	movt	r1, #0
    1fbc:	bl	0 <coda_set_error>
    1fc0:	mvn	r0, #0
    1fc4:	str	r0, [fp, #-20]	; 0xffffffec
    1fc8:	b	22b8 <coda_time_parts_to_string+0x948>
    1fcc:	ldr	r0, [fp, #24]
    1fd0:	ldr	r1, [sp, #56]	; 0x38
    1fd4:	add	r0, r0, r1
    1fd8:	ldr	r2, [fp, #8]
    1fdc:	movw	r1, #0
    1fe0:	movt	r1, #0
    1fe4:	bl	0 <sprintf>
    1fe8:	ldr	r1, [sp, #60]	; 0x3c
    1fec:	add	r1, r1, #2
    1ff0:	str	r1, [sp, #60]	; 0x3c
    1ff4:	ldr	r1, [sp, #56]	; 0x38
    1ff8:	add	r1, r1, #2
    1ffc:	str	r1, [sp, #56]	; 0x38
    2000:	b	2268 <coda_time_parts_to_string+0x8f8>
    2004:	ldr	r0, [fp, #20]
    2008:	ldr	r1, [sp, #60]	; 0x3c
    200c:	add	r0, r0, r1
    2010:	ldrb	r0, [r0]
    2014:	cmp	r0, #115	; 0x73
    2018:	bne	20a4 <coda_time_parts_to_string+0x734>
    201c:	ldr	r0, [fp, #20]
    2020:	ldr	r1, [sp, #60]	; 0x3c
    2024:	add	r1, r1, #1
    2028:	add	r0, r0, r1
    202c:	ldrb	r0, [r0]
    2030:	cmp	r0, #115	; 0x73
    2034:	bne	20a4 <coda_time_parts_to_string+0x734>
    2038:	ldr	r0, [fp, #12]
    203c:	cmp	r0, #0
    2040:	blt	2050 <coda_time_parts_to_string+0x6e0>
    2044:	ldr	r0, [fp, #12]
    2048:	cmp	r0, #60	; 0x3c
    204c:	ble	206c <coda_time_parts_to_string+0x6fc>
    2050:	mvn	r0, #103	; 0x67
    2054:	movw	r1, #0
    2058:	movt	r1, #0
    205c:	bl	0 <coda_set_error>
    2060:	mvn	r0, #0
    2064:	str	r0, [fp, #-20]	; 0xffffffec
    2068:	b	22b8 <coda_time_parts_to_string+0x948>
    206c:	ldr	r0, [fp, #24]
    2070:	ldr	r1, [sp, #56]	; 0x38
    2074:	add	r0, r0, r1
    2078:	ldr	r2, [fp, #12]
    207c:	movw	r1, #0
    2080:	movt	r1, #0
    2084:	bl	0 <sprintf>
    2088:	ldr	r1, [sp, #60]	; 0x3c
    208c:	add	r1, r1, #2
    2090:	str	r1, [sp, #60]	; 0x3c
    2094:	ldr	r1, [sp, #56]	; 0x38
    2098:	add	r1, r1, #2
    209c:	str	r1, [sp, #56]	; 0x38
    20a0:	b	2264 <coda_time_parts_to_string+0x8f4>
    20a4:	ldr	r0, [fp, #20]
    20a8:	ldr	r1, [sp, #60]	; 0x3c
    20ac:	add	r0, r0, r1
    20b0:	ldrb	r0, [r0]
    20b4:	cmp	r0, #83	; 0x53
    20b8:	bne	21a4 <coda_time_parts_to_string+0x834>
    20bc:	ldr	r0, [fp, #16]
    20c0:	str	r0, [sp, #44]	; 0x2c
    20c4:	movw	r0, #0
    20c8:	str	r0, [sp, #40]	; 0x28
    20cc:	ldr	r0, [fp, #16]
    20d0:	cmp	r0, #0
    20d4:	blt	20e8 <coda_time_parts_to_string+0x778>
    20d8:	ldr	r0, [pc, #484]	; 22c4 <coda_time_parts_to_string+0x954>
    20dc:	ldr	r1, [fp, #16]
    20e0:	cmp	r1, r0
    20e4:	ble	2104 <coda_time_parts_to_string+0x794>
    20e8:	mvn	r0, #103	; 0x67
    20ec:	movw	r1, #0
    20f0:	movt	r1, #0
    20f4:	bl	0 <coda_set_error>
    20f8:	mvn	r0, #0
    20fc:	str	r0, [fp, #-20]	; 0xffffffec
    2100:	b	22b8 <coda_time_parts_to_string+0x948>
    2104:	b	2108 <coda_time_parts_to_string+0x798>
    2108:	ldr	r0, [fp, #20]
    210c:	ldr	r1, [sp, #60]	; 0x3c
    2110:	add	r0, r0, r1
    2114:	ldrb	r0, [r0]
    2118:	cmp	r0, #83	; 0x53
    211c:	bne	213c <coda_time_parts_to_string+0x7cc>
    2120:	ldr	r0, [sp, #60]	; 0x3c
    2124:	add	r0, r0, #1
    2128:	str	r0, [sp, #60]	; 0x3c
    212c:	ldr	r0, [sp, #40]	; 0x28
    2130:	add	r0, r0, #1
    2134:	str	r0, [sp, #40]	; 0x28
    2138:	b	2108 <coda_time_parts_to_string+0x798>
    213c:	ldr	r0, [sp, #40]	; 0x28
    2140:	str	r0, [sp, #36]	; 0x24
    2144:	ldr	r0, [sp, #36]	; 0x24
    2148:	cmp	r0, #6
    214c:	bge	2170 <coda_time_parts_to_string+0x800>
    2150:	ldr	r0, [sp, #44]	; 0x2c
    2154:	movw	r1, #10
    2158:	sdiv	r0, r0, r1
    215c:	str	r0, [sp, #44]	; 0x2c
    2160:	ldr	r0, [sp, #36]	; 0x24
    2164:	add	r0, r0, #1
    2168:	str	r0, [sp, #36]	; 0x24
    216c:	b	2144 <coda_time_parts_to_string+0x7d4>
    2170:	ldr	r0, [fp, #24]
    2174:	ldr	r1, [sp, #56]	; 0x38
    2178:	add	r0, r0, r1
    217c:	ldr	r2, [sp, #40]	; 0x28
    2180:	ldr	r3, [sp, #44]	; 0x2c
    2184:	movw	r1, #0
    2188:	movt	r1, #0
    218c:	bl	0 <sprintf>
    2190:	ldr	r1, [sp, #40]	; 0x28
    2194:	ldr	r2, [sp, #56]	; 0x38
    2198:	add	r1, r2, r1
    219c:	str	r1, [sp, #56]	; 0x38
    21a0:	b	2260 <coda_time_parts_to_string+0x8f0>
    21a4:	ldr	r0, [fp, #20]
    21a8:	ldr	r1, [sp, #60]	; 0x3c
    21ac:	add	r0, r0, r1
    21b0:	ldrb	r0, [r0]
    21b4:	cmp	r0, #65	; 0x41
    21b8:	blt	21d4 <coda_time_parts_to_string+0x864>
    21bc:	ldr	r0, [fp, #20]
    21c0:	ldr	r1, [sp, #60]	; 0x3c
    21c4:	add	r0, r0, r1
    21c8:	ldrb	r0, [r0]
    21cc:	cmp	r0, #90	; 0x5a
    21d0:	ble	2204 <coda_time_parts_to_string+0x894>
    21d4:	ldr	r0, [fp, #20]
    21d8:	ldr	r1, [sp, #60]	; 0x3c
    21dc:	add	r0, r0, r1
    21e0:	ldrb	r0, [r0]
    21e4:	cmp	r0, #97	; 0x61
    21e8:	blt	2224 <coda_time_parts_to_string+0x8b4>
    21ec:	ldr	r0, [fp, #20]
    21f0:	ldr	r1, [sp, #60]	; 0x3c
    21f4:	add	r0, r0, r1
    21f8:	ldrb	r0, [r0]
    21fc:	cmp	r0, #122	; 0x7a
    2200:	bgt	2224 <coda_time_parts_to_string+0x8b4>
    2204:	ldr	r2, [fp, #20]
    2208:	mvn	r0, #102	; 0x66
    220c:	movw	r1, #0
    2210:	movt	r1, #0
    2214:	bl	0 <coda_set_error>
    2218:	mvn	r0, #0
    221c:	str	r0, [fp, #-20]	; 0xffffffec
    2220:	b	22b8 <coda_time_parts_to_string+0x948>
    2224:	ldr	r0, [fp, #20]
    2228:	ldr	r1, [sp, #60]	; 0x3c
    222c:	add	r0, r0, r1
    2230:	ldrb	r0, [r0]
    2234:	ldr	r1, [fp, #24]
    2238:	ldr	r2, [sp, #56]	; 0x38
    223c:	add	r1, r1, r2
    2240:	strb	r0, [r1]
    2244:	ldr	r0, [sp, #60]	; 0x3c
    2248:	add	r0, r0, #1
    224c:	str	r0, [sp, #60]	; 0x3c
    2250:	ldr	r0, [sp, #56]	; 0x38
    2254:	add	r0, r0, #1
    2258:	str	r0, [sp, #56]	; 0x38
    225c:	b	2260 <coda_time_parts_to_string+0x8f0>
    2260:	b	2264 <coda_time_parts_to_string+0x8f4>
    2264:	b	2268 <coda_time_parts_to_string+0x8f8>
    2268:	b	226c <coda_time_parts_to_string+0x8fc>
    226c:	b	2270 <coda_time_parts_to_string+0x900>
    2270:	b	2274 <coda_time_parts_to_string+0x904>
    2274:	b	2278 <coda_time_parts_to_string+0x908>
    2278:	b	227c <coda_time_parts_to_string+0x90c>
    227c:	b	2280 <coda_time_parts_to_string+0x910>
    2280:	b	1a4c <coda_time_parts_to_string+0xdc>
    2284:	ldr	r0, [sp, #64]	; 0x40
    2288:	cmp	r0, #0
    228c:	beq	22b0 <coda_time_parts_to_string+0x940>
    2290:	ldr	r2, [fp, #20]
    2294:	mvn	r0, #102	; 0x66
    2298:	movw	r1, #0
    229c:	movt	r1, #0
    22a0:	bl	0 <coda_set_error>
    22a4:	mvn	r0, #0
    22a8:	str	r0, [fp, #-20]	; 0xffffffec
    22ac:	b	22b8 <coda_time_parts_to_string+0x948>
    22b0:	movw	r0, #0
    22b4:	str	r0, [fp, #-20]	; 0xffffffec
    22b8:	ldr	r0, [fp, #-20]	; 0xffffffec
    22bc:	sub	sp, fp, #16
    22c0:	pop	{r4, r5, r6, r7, fp, pc}
    22c4:	.word	0x000f423f

000022c8 <coda_time_string_to_parts>:
    22c8:	push	{r4, r5, r6, sl, fp, lr}
    22cc:	add	fp, sp, #16
    22d0:	sub	sp, sp, #72	; 0x48
    22d4:	ldr	ip, [fp, #24]
    22d8:	ldr	lr, [fp, #20]
    22dc:	ldr	r4, [fp, #16]
    22e0:	ldr	r5, [fp, #12]
    22e4:	ldr	r6, [fp, #8]
    22e8:	str	r0, [fp, #-24]	; 0xffffffe8
    22ec:	str	r1, [fp, #-28]	; 0xffffffe4
    22f0:	str	r2, [fp, #-32]	; 0xffffffe0
    22f4:	str	r3, [fp, #-36]	; 0xffffffdc
    22f8:	movw	r0, #0
    22fc:	str	r0, [fp, #-40]	; 0xffffffd8
    2300:	str	r0, [sp, #44]	; 0x2c
    2304:	ldr	r1, [fp, #-24]	; 0xffffffe8
    2308:	cmp	r1, r0
    230c:	bne	2338 <coda_time_string_to_parts+0x70>
    2310:	mvn	r0, #99	; 0x63
    2314:	movw	r1, #0
    2318:	movt	r1, #0
    231c:	movw	r2, #0
    2320:	movt	r2, #0
    2324:	movw	r3, #1468	; 0x5bc
    2328:	bl	0 <coda_set_error>
    232c:	mvn	r0, #0
    2330:	str	r0, [fp, #-20]	; 0xffffffec
    2334:	b	2678 <coda_time_string_to_parts+0x3b0>
    2338:	ldr	r0, [fp, #-28]	; 0xffffffe4
    233c:	movw	r1, #0
    2340:	cmp	r0, r1
    2344:	bne	2370 <coda_time_string_to_parts+0xa8>
    2348:	mvn	r0, #99	; 0x63
    234c:	movw	r1, #0
    2350:	movt	r1, #0
    2354:	movw	r2, #0
    2358:	movt	r2, #0
    235c:	movw	r3, #1473	; 0x5c1
    2360:	bl	0 <coda_set_error>
    2364:	mvn	r0, #0
    2368:	str	r0, [fp, #-20]	; 0xffffffec
    236c:	b	2678 <coda_time_string_to_parts+0x3b0>
    2370:	ldr	r0, [fp, #-32]	; 0xffffffe0
    2374:	movw	r1, #0
    2378:	cmp	r0, r1
    237c:	beq	23e0 <coda_time_string_to_parts+0x118>
    2380:	ldr	r0, [fp, #-36]	; 0xffffffdc
    2384:	movw	r1, #0
    2388:	cmp	r0, r1
    238c:	beq	23e0 <coda_time_string_to_parts+0x118>
    2390:	ldr	r0, [fp, #8]
    2394:	movw	r1, #0
    2398:	cmp	r0, r1
    239c:	beq	23e0 <coda_time_string_to_parts+0x118>
    23a0:	ldr	r0, [fp, #12]
    23a4:	movw	r1, #0
    23a8:	cmp	r0, r1
    23ac:	beq	23e0 <coda_time_string_to_parts+0x118>
    23b0:	ldr	r0, [fp, #16]
    23b4:	movw	r1, #0
    23b8:	cmp	r0, r1
    23bc:	beq	23e0 <coda_time_string_to_parts+0x118>
    23c0:	ldr	r0, [fp, #20]
    23c4:	movw	r1, #0
    23c8:	cmp	r0, r1
    23cc:	beq	23e0 <coda_time_string_to_parts+0x118>
    23d0:	ldr	r0, [fp, #24]
    23d4:	movw	r1, #0
    23d8:	cmp	r0, r1
    23dc:	bne	2408 <coda_time_string_to_parts+0x140>
    23e0:	mvn	r0, #99	; 0x63
    23e4:	movw	r1, #0
    23e8:	movt	r1, #0
    23ec:	movw	r2, #0
    23f0:	movt	r2, #0
    23f4:	movw	r3, #1479	; 0x5c7
    23f8:	bl	0 <coda_set_error>
    23fc:	mvn	r0, #0
    2400:	str	r0, [fp, #-20]	; 0xffffffec
    2404:	b	2678 <coda_time_string_to_parts+0x3b0>
    2408:	b	240c <coda_time_string_to_parts+0x144>
    240c:	ldr	r0, [fp, #-24]	; 0xffffffe8
    2410:	ldr	r1, [sp, #44]	; 0x2c
    2414:	add	r0, r0, r1
    2418:	ldrb	r0, [r0]
    241c:	cmp	r0, #0
    2420:	movw	r0, #0
    2424:	str	r0, [sp, #36]	; 0x24
    2428:	beq	2468 <coda_time_string_to_parts+0x1a0>
    242c:	ldr	r0, [fp, #-40]	; 0xffffffd8
    2430:	cmp	r0, #0
    2434:	movw	r0, #1
    2438:	str	r0, [sp, #32]
    243c:	bne	2460 <coda_time_string_to_parts+0x198>
    2440:	ldr	r0, [fp, #-24]	; 0xffffffe8
    2444:	ldr	r1, [sp, #44]	; 0x2c
    2448:	add	r0, r0, r1
    244c:	ldrb	r0, [r0]
    2450:	cmp	r0, #124	; 0x7c
    2454:	movw	r0, #0
    2458:	movne	r0, #1
    245c:	str	r0, [sp, #32]
    2460:	ldr	r0, [sp, #32]
    2464:	str	r0, [sp, #36]	; 0x24
    2468:	ldr	r0, [sp, #36]	; 0x24
    246c:	tst	r0, #1
    2470:	beq	24bc <coda_time_string_to_parts+0x1f4>
    2474:	ldr	r0, [fp, #-24]	; 0xffffffe8
    2478:	ldr	r1, [sp, #44]	; 0x2c
    247c:	add	r0, r0, r1
    2480:	ldrb	r0, [r0]
    2484:	cmp	r0, #39	; 0x27
    2488:	bne	24ac <coda_time_string_to_parts+0x1e4>
    248c:	ldr	r0, [fp, #-40]	; 0xffffffd8
    2490:	cmp	r0, #0
    2494:	movw	r0, #0
    2498:	movne	r0, #1
    249c:	mvn	r1, #0
    24a0:	eor	r0, r0, r1
    24a4:	and	r0, r0, #1
    24a8:	str	r0, [fp, #-40]	; 0xffffffd8
    24ac:	ldr	r0, [sp, #44]	; 0x2c
    24b0:	add	r0, r0, #1
    24b4:	str	r0, [sp, #44]	; 0x2c
    24b8:	b	240c <coda_time_string_to_parts+0x144>
    24bc:	ldr	r0, [fp, #-24]	; 0xffffffe8
    24c0:	ldr	r1, [sp, #44]	; 0x2c
    24c4:	add	r0, r0, r1
    24c8:	ldrb	r0, [r0]
    24cc:	cmp	r0, #124	; 0x7c
    24d0:	bne	2638 <coda_time_string_to_parts+0x370>
    24d4:	movw	r0, #0
    24d8:	str	r0, [sp, #40]	; 0x28
    24dc:	ldr	r0, [fp, #-24]	; 0xffffffe8
    24e0:	ldr	r1, [sp, #40]	; 0x28
    24e4:	add	r0, r0, r1
    24e8:	ldr	r1, [fp, #-28]	; 0xffffffe4
    24ec:	ldr	r2, [fp, #-32]	; 0xffffffe0
    24f0:	ldr	r3, [fp, #-36]	; 0xffffffdc
    24f4:	ldr	ip, [fp, #8]
    24f8:	ldr	lr, [fp, #12]
    24fc:	ldr	r4, [fp, #16]
    2500:	ldr	r5, [fp, #20]
    2504:	ldr	r6, [fp, #24]
    2508:	str	ip, [sp]
    250c:	str	lr, [sp, #4]
    2510:	str	r4, [sp, #8]
    2514:	str	r5, [sp, #12]
    2518:	str	r6, [sp, #16]
    251c:	bl	2684 <string_to_parts>
    2520:	cmp	r0, #0
    2524:	bne	2534 <coda_time_string_to_parts+0x26c>
    2528:	movw	r0, #0
    252c:	str	r0, [fp, #-20]	; 0xffffffec
    2530:	b	2678 <coda_time_string_to_parts+0x3b0>
    2534:	ldr	r0, [fp, #-24]	; 0xffffffe8
    2538:	ldr	r1, [sp, #44]	; 0x2c
    253c:	add	r0, r0, r1
    2540:	ldrb	r0, [r0]
    2544:	cmp	r0, #0
    2548:	bne	2570 <coda_time_string_to_parts+0x2a8>
    254c:	ldr	r2, [fp, #-28]	; 0xffffffe4
    2550:	ldr	r3, [fp, #-24]	; 0xffffffe8
    2554:	mvn	r0, #103	; 0x67
    2558:	movw	r1, #0
    255c:	movt	r1, #0
    2560:	bl	0 <coda_set_error>
    2564:	mvn	r0, #0
    2568:	str	r0, [fp, #-20]	; 0xffffffec
    256c:	b	2678 <coda_time_string_to_parts+0x3b0>
    2570:	ldr	r0, [sp, #44]	; 0x2c
    2574:	add	r0, r0, #1
    2578:	str	r0, [sp, #44]	; 0x2c
    257c:	ldr	r0, [sp, #44]	; 0x2c
    2580:	str	r0, [sp, #40]	; 0x28
    2584:	ldr	r0, [fp, #-24]	; 0xffffffe8
    2588:	ldr	r1, [sp, #44]	; 0x2c
    258c:	add	r0, r0, r1
    2590:	ldrb	r0, [r0]
    2594:	cmp	r0, #0
    2598:	movw	r0, #0
    259c:	str	r0, [sp, #28]
    25a0:	beq	25e0 <coda_time_string_to_parts+0x318>
    25a4:	ldr	r0, [fp, #-40]	; 0xffffffd8
    25a8:	cmp	r0, #0
    25ac:	movw	r0, #1
    25b0:	str	r0, [sp, #24]
    25b4:	bne	25d8 <coda_time_string_to_parts+0x310>
    25b8:	ldr	r0, [fp, #-24]	; 0xffffffe8
    25bc:	ldr	r1, [sp, #44]	; 0x2c
    25c0:	add	r0, r0, r1
    25c4:	ldrb	r0, [r0]
    25c8:	cmp	r0, #124	; 0x7c
    25cc:	movw	r0, #0
    25d0:	movne	r0, #1
    25d4:	str	r0, [sp, #24]
    25d8:	ldr	r0, [sp, #24]
    25dc:	str	r0, [sp, #28]
    25e0:	ldr	r0, [sp, #28]
    25e4:	tst	r0, #1
    25e8:	beq	2634 <coda_time_string_to_parts+0x36c>
    25ec:	ldr	r0, [fp, #-24]	; 0xffffffe8
    25f0:	ldr	r1, [sp, #44]	; 0x2c
    25f4:	add	r0, r0, r1
    25f8:	ldrb	r0, [r0]
    25fc:	cmp	r0, #39	; 0x27
    2600:	bne	2624 <coda_time_string_to_parts+0x35c>
    2604:	ldr	r0, [fp, #-40]	; 0xffffffd8
    2608:	cmp	r0, #0
    260c:	movw	r0, #0
    2610:	movne	r0, #1
    2614:	mvn	r1, #0
    2618:	eor	r0, r0, r1
    261c:	and	r0, r0, #1
    2620:	str	r0, [fp, #-40]	; 0xffffffd8
    2624:	ldr	r0, [sp, #44]	; 0x2c
    2628:	add	r0, r0, #1
    262c:	str	r0, [sp, #44]	; 0x2c
    2630:	b	2584 <coda_time_string_to_parts+0x2bc>
    2634:	b	24dc <coda_time_string_to_parts+0x214>
    2638:	ldr	r0, [fp, #-24]	; 0xffffffe8
    263c:	ldr	r1, [fp, #-28]	; 0xffffffe4
    2640:	ldr	r2, [fp, #-32]	; 0xffffffe0
    2644:	ldr	r3, [fp, #-36]	; 0xffffffdc
    2648:	ldr	ip, [fp, #8]
    264c:	ldr	lr, [fp, #12]
    2650:	ldr	r4, [fp, #16]
    2654:	ldr	r5, [fp, #20]
    2658:	ldr	r6, [fp, #24]
    265c:	str	ip, [sp]
    2660:	str	lr, [sp, #4]
    2664:	str	r4, [sp, #8]
    2668:	str	r5, [sp, #12]
    266c:	str	r6, [sp, #16]
    2670:	bl	2684 <string_to_parts>
    2674:	str	r0, [fp, #-20]	; 0xffffffec
    2678:	ldr	r0, [fp, #-20]	; 0xffffffec
    267c:	sub	sp, fp, #16
    2680:	pop	{r4, r5, r6, sl, fp, pc}

00002684 <string_to_parts>:
    2684:	push	{r4, r5, r6, sl, fp, lr}
    2688:	add	fp, sp, #16
    268c:	sub	sp, sp, #64	; 0x40
    2690:	ldr	ip, [fp, #24]
    2694:	ldr	lr, [fp, #20]
    2698:	ldr	r4, [fp, #16]
    269c:	ldr	r5, [fp, #12]
    26a0:	ldr	r6, [fp, #8]
    26a4:	str	r0, [fp, #-24]	; 0xffffffe8
    26a8:	str	r1, [fp, #-28]	; 0xffffffe4
    26ac:	str	r2, [fp, #-32]	; 0xffffffe0
    26b0:	str	r3, [fp, #-36]	; 0xffffffdc
    26b4:	movw	r0, #0
    26b8:	str	r0, [sp, #36]	; 0x24
    26bc:	str	r0, [sp, #32]
    26c0:	str	r0, [sp, #28]
    26c4:	ldr	r1, [fp, #-32]	; 0xffffffe0
    26c8:	movw	r2, #2000	; 0x7d0
    26cc:	str	r2, [r1]
    26d0:	ldr	r1, [fp, #-36]	; 0xffffffdc
    26d4:	movw	r2, #1
    26d8:	str	r2, [r1]
    26dc:	ldr	r1, [fp, #8]
    26e0:	str	r2, [r1]
    26e4:	ldr	r1, [fp, #12]
    26e8:	str	r0, [r1]
    26ec:	ldr	r1, [fp, #16]
    26f0:	str	r0, [r1]
    26f4:	ldr	r1, [fp, #20]
    26f8:	str	r0, [r1]
    26fc:	ldr	r1, [fp, #24]
    2700:	str	r0, [r1]
    2704:	ldr	r0, [fp, #-24]	; 0xffffffe8
    2708:	ldr	r1, [sp, #36]	; 0x24
    270c:	add	r0, r0, r1
    2710:	ldrb	r0, [r0]
    2714:	cmp	r0, #0
    2718:	movw	r0, #0
    271c:	str	r0, [sp, #16]
    2720:	beq	2760 <string_to_parts+0xdc>
    2724:	ldr	r0, [sp, #28]
    2728:	cmp	r0, #0
    272c:	movw	r0, #1
    2730:	str	r0, [sp, #12]
    2734:	bne	2758 <string_to_parts+0xd4>
    2738:	ldr	r0, [fp, #-24]	; 0xffffffe8
    273c:	ldr	r1, [sp, #36]	; 0x24
    2740:	add	r0, r0, r1
    2744:	ldrb	r0, [r0]
    2748:	cmp	r0, #124	; 0x7c
    274c:	movw	r0, #0
    2750:	movne	r0, #1
    2754:	str	r0, [sp, #12]
    2758:	ldr	r0, [sp, #12]
    275c:	str	r0, [sp, #16]
    2760:	ldr	r0, [sp, #16]
    2764:	tst	r0, #1
    2768:	beq	31ec <string_to_parts+0xb68>
    276c:	ldr	r0, [fp, #-24]	; 0xffffffe8
    2770:	ldr	r1, [sp, #36]	; 0x24
    2774:	add	r0, r0, r1
    2778:	ldrb	r0, [r0]
    277c:	cmp	r0, #39	; 0x27
    2780:	bne	27d0 <string_to_parts+0x14c>
    2784:	ldr	r0, [sp, #36]	; 0x24
    2788:	add	r0, r0, #1
    278c:	str	r0, [sp, #36]	; 0x24
    2790:	ldr	r0, [fp, #-24]	; 0xffffffe8
    2794:	ldr	r1, [sp, #36]	; 0x24
    2798:	add	r0, r0, r1
    279c:	ldrb	r0, [r0]
    27a0:	cmp	r0, #39	; 0x27
    27a4:	beq	27cc <string_to_parts+0x148>
    27a8:	ldr	r0, [sp, #28]
    27ac:	cmp	r0, #0
    27b0:	movw	r0, #0
    27b4:	movne	r0, #1
    27b8:	mvn	r1, #0
    27bc:	eor	r0, r0, r1
    27c0:	and	r0, r0, #1
    27c4:	str	r0, [sp, #28]
    27c8:	b	2704 <string_to_parts+0x80>
    27cc:	b	27d0 <string_to_parts+0x14c>
    27d0:	ldr	r0, [sp, #28]
    27d4:	cmp	r0, #0
    27d8:	beq	2844 <string_to_parts+0x1c0>
    27dc:	ldr	r0, [fp, #-24]	; 0xffffffe8
    27e0:	ldr	r1, [sp, #36]	; 0x24
    27e4:	add	r0, r0, r1
    27e8:	ldrb	r0, [r0]
    27ec:	ldr	r1, [fp, #-28]	; 0xffffffe4
    27f0:	ldr	r2, [sp, #32]
    27f4:	add	r1, r1, r2
    27f8:	ldrb	r1, [r1]
    27fc:	cmp	r0, r1
    2800:	beq	2828 <string_to_parts+0x1a4>
    2804:	ldr	r2, [fp, #-28]	; 0xffffffe4
    2808:	ldr	r3, [fp, #-24]	; 0xffffffe8
    280c:	mvn	r0, #103	; 0x67
    2810:	movw	r1, #0
    2814:	movt	r1, #0
    2818:	bl	0 <coda_set_error>
    281c:	mvn	r0, #0
    2820:	str	r0, [fp, #-20]	; 0xffffffec
    2824:	b	325c <string_to_parts+0xbd8>
    2828:	ldr	r0, [sp, #36]	; 0x24
    282c:	add	r0, r0, #1
    2830:	str	r0, [sp, #36]	; 0x24
    2834:	ldr	r0, [sp, #32]
    2838:	add	r0, r0, #1
    283c:	str	r0, [sp, #32]
    2840:	b	31e8 <string_to_parts+0xb64>
    2844:	ldr	r0, [fp, #-24]	; 0xffffffe8
    2848:	ldr	r1, [sp, #36]	; 0x24
    284c:	add	r0, r0, r1
    2850:	ldrb	r0, [r0]
    2854:	cmp	r0, #121	; 0x79
    2858:	bne	2960 <string_to_parts+0x2dc>
    285c:	ldr	r0, [fp, #-24]	; 0xffffffe8
    2860:	ldr	r1, [sp, #36]	; 0x24
    2864:	add	r1, r1, #1
    2868:	add	r0, r0, r1
    286c:	ldrb	r0, [r0]
    2870:	cmp	r0, #121	; 0x79
    2874:	bne	2960 <string_to_parts+0x2dc>
    2878:	ldr	r0, [fp, #-24]	; 0xffffffe8
    287c:	ldr	r1, [sp, #36]	; 0x24
    2880:	add	r1, r1, #2
    2884:	add	r0, r0, r1
    2888:	ldrb	r0, [r0]
    288c:	cmp	r0, #121	; 0x79
    2890:	bne	2960 <string_to_parts+0x2dc>
    2894:	ldr	r0, [fp, #-24]	; 0xffffffe8
    2898:	ldr	r1, [sp, #36]	; 0x24
    289c:	add	r1, r1, #3
    28a0:	add	r0, r0, r1
    28a4:	ldrb	r0, [r0]
    28a8:	cmp	r0, #121	; 0x79
    28ac:	bne	2960 <string_to_parts+0x2dc>
    28b0:	ldr	r0, [fp, #-24]	; 0xffffffe8
    28b4:	ldr	r1, [sp, #36]	; 0x24
    28b8:	add	r1, r1, #4
    28bc:	add	r0, r0, r1
    28c0:	ldrb	r0, [r0]
    28c4:	cmp	r0, #42	; 0x2a
    28c8:	movw	r0, #0
    28cc:	moveq	r0, #1
    28d0:	and	r0, r0, #1
    28d4:	str	r0, [sp, #40]	; 0x28
    28d8:	ldr	r0, [fp, #-28]	; 0xffffffe4
    28dc:	ldr	r1, [sp, #32]
    28e0:	add	r0, r0, r1
    28e4:	ldr	r2, [sp, #40]	; 0x28
    28e8:	ldr	r3, [fp, #-32]	; 0xffffffe0
    28ec:	movw	r1, #4
    28f0:	bl	43cc <parse_integer>
    28f4:	cmp	r0, #0
    28f8:	beq	2920 <string_to_parts+0x29c>
    28fc:	ldr	r2, [fp, #-28]	; 0xffffffe4
    2900:	ldr	r3, [fp, #-24]	; 0xffffffe8
    2904:	mvn	r0, #103	; 0x67
    2908:	movw	r1, #0
    290c:	movt	r1, #0
    2910:	bl	0 <coda_set_error>
    2914:	mvn	r0, #0
    2918:	str	r0, [fp, #-20]	; 0xffffffec
    291c:	b	325c <string_to_parts+0xbd8>
    2920:	ldr	r0, [fp, #-24]	; 0xffffffe8
    2924:	ldr	r1, [sp, #36]	; 0x24
    2928:	add	r0, r0, r1
    292c:	ldrb	r0, [r0]
    2930:	cmp	r0, #42	; 0x2a
    2934:	movw	r0, #0
    2938:	moveq	r0, #1
    293c:	and	r0, r0, #1
    2940:	add	r0, r0, #4
    2944:	ldr	r1, [sp, #36]	; 0x24
    2948:	add	r0, r1, r0
    294c:	str	r0, [sp, #36]	; 0x24
    2950:	ldr	r0, [sp, #32]
    2954:	add	r0, r0, #4
    2958:	str	r0, [sp, #32]
    295c:	b	31e4 <string_to_parts+0xb60>
    2960:	ldr	r0, [fp, #-24]	; 0xffffffe8
    2964:	ldr	r1, [sp, #36]	; 0x24
    2968:	add	r0, r0, r1
    296c:	ldrb	r0, [r0]
    2970:	cmp	r0, #77	; 0x4d
    2974:	bne	2acc <string_to_parts+0x448>
    2978:	ldr	r0, [fp, #-24]	; 0xffffffe8
    297c:	ldr	r1, [sp, #36]	; 0x24
    2980:	add	r1, r1, #1
    2984:	add	r0, r0, r1
    2988:	ldrb	r0, [r0]
    298c:	cmp	r0, #77	; 0x4d
    2990:	bne	2acc <string_to_parts+0x448>
    2994:	ldr	r0, [fp, #-24]	; 0xffffffe8
    2998:	ldr	r1, [sp, #36]	; 0x24
    299c:	add	r1, r1, #2
    29a0:	add	r0, r0, r1
    29a4:	ldrb	r0, [r0]
    29a8:	cmp	r0, #77	; 0x4d
    29ac:	bne	2a18 <string_to_parts+0x394>
    29b0:	ldr	r0, [fp, #-28]	; 0xffffffe4
    29b4:	ldr	r1, [sp, #32]
    29b8:	add	r0, r0, r1
    29bc:	bl	0 <coda_month_to_integer>
    29c0:	ldr	r1, [fp, #-36]	; 0xffffffdc
    29c4:	str	r0, [r1]
    29c8:	ldr	r0, [fp, #-36]	; 0xffffffdc
    29cc:	ldr	r0, [r0]
    29d0:	cmn	r0, #1
    29d4:	bne	29fc <string_to_parts+0x378>
    29d8:	ldr	r2, [fp, #-28]	; 0xffffffe4
    29dc:	ldr	r3, [fp, #-24]	; 0xffffffe8
    29e0:	mvn	r0, #103	; 0x67
    29e4:	movw	r1, #0
    29e8:	movt	r1, #0
    29ec:	bl	0 <coda_set_error>
    29f0:	mvn	r0, #0
    29f4:	str	r0, [fp, #-20]	; 0xffffffec
    29f8:	b	325c <string_to_parts+0xbd8>
    29fc:	ldr	r0, [sp, #36]	; 0x24
    2a00:	add	r0, r0, #3
    2a04:	str	r0, [sp, #36]	; 0x24
    2a08:	ldr	r0, [sp, #32]
    2a0c:	add	r0, r0, #3
    2a10:	str	r0, [sp, #32]
    2a14:	b	2ac8 <string_to_parts+0x444>
    2a18:	ldr	r0, [fp, #-24]	; 0xffffffe8
    2a1c:	ldr	r1, [sp, #36]	; 0x24
    2a20:	add	r1, r1, #2
    2a24:	add	r0, r0, r1
    2a28:	ldrb	r0, [r0]
    2a2c:	cmp	r0, #42	; 0x2a
    2a30:	movw	r0, #0
    2a34:	moveq	r0, #1
    2a38:	and	r0, r0, #1
    2a3c:	str	r0, [sp, #40]	; 0x28
    2a40:	ldr	r0, [fp, #-28]	; 0xffffffe4
    2a44:	ldr	r1, [sp, #32]
    2a48:	add	r0, r0, r1
    2a4c:	ldr	r2, [sp, #40]	; 0x28
    2a50:	ldr	r3, [fp, #-36]	; 0xffffffdc
    2a54:	movw	r1, #2
    2a58:	bl	43cc <parse_integer>
    2a5c:	cmp	r0, #0
    2a60:	beq	2a88 <string_to_parts+0x404>
    2a64:	ldr	r2, [fp, #-28]	; 0xffffffe4
    2a68:	ldr	r3, [fp, #-24]	; 0xffffffe8
    2a6c:	mvn	r0, #103	; 0x67
    2a70:	movw	r1, #0
    2a74:	movt	r1, #0
    2a78:	bl	0 <coda_set_error>
    2a7c:	mvn	r0, #0
    2a80:	str	r0, [fp, #-20]	; 0xffffffec
    2a84:	b	325c <string_to_parts+0xbd8>
    2a88:	ldr	r0, [fp, #-24]	; 0xffffffe8
    2a8c:	ldr	r1, [sp, #36]	; 0x24
    2a90:	add	r1, r1, #2
    2a94:	add	r0, r0, r1
    2a98:	ldrb	r0, [r0]
    2a9c:	cmp	r0, #42	; 0x2a
    2aa0:	movw	r0, #0
    2aa4:	moveq	r0, #1
    2aa8:	and	r0, r0, #1
    2aac:	add	r0, r0, #2
    2ab0:	ldr	r1, [sp, #36]	; 0x24
    2ab4:	add	r0, r1, r0
    2ab8:	str	r0, [sp, #36]	; 0x24
    2abc:	ldr	r0, [sp, #32]
    2ac0:	add	r0, r0, #2
    2ac4:	str	r0, [sp, #32]
    2ac8:	b	31e0 <string_to_parts+0xb5c>
    2acc:	ldr	r0, [fp, #-24]	; 0xffffffe8
    2ad0:	ldr	r1, [sp, #36]	; 0x24
    2ad4:	add	r0, r0, r1
    2ad8:	ldrb	r0, [r0]
    2adc:	cmp	r0, #100	; 0x64
    2ae0:	bne	2bb4 <string_to_parts+0x530>
    2ae4:	ldr	r0, [fp, #-24]	; 0xffffffe8
    2ae8:	ldr	r1, [sp, #36]	; 0x24
    2aec:	add	r1, r1, #1
    2af0:	add	r0, r0, r1
    2af4:	ldrb	r0, [r0]
    2af8:	cmp	r0, #100	; 0x64
    2afc:	bne	2bb4 <string_to_parts+0x530>
    2b00:	ldr	r0, [fp, #-24]	; 0xffffffe8
    2b04:	ldr	r1, [sp, #36]	; 0x24
    2b08:	add	r1, r1, #2
    2b0c:	add	r0, r0, r1
    2b10:	ldrb	r0, [r0]
    2b14:	cmp	r0, #42	; 0x2a
    2b18:	movw	r0, #0
    2b1c:	moveq	r0, #1
    2b20:	and	r0, r0, #1
    2b24:	str	r0, [sp, #40]	; 0x28
    2b28:	ldr	r0, [fp, #-28]	; 0xffffffe4
    2b2c:	ldr	r1, [sp, #32]
    2b30:	add	r0, r0, r1
    2b34:	ldr	r2, [sp, #40]	; 0x28
    2b38:	ldr	r3, [fp, #8]
    2b3c:	movw	r1, #2
    2b40:	bl	43cc <parse_integer>
    2b44:	cmp	r0, #0
    2b48:	beq	2b70 <string_to_parts+0x4ec>
    2b4c:	ldr	r2, [fp, #-28]	; 0xffffffe4
    2b50:	ldr	r3, [fp, #-24]	; 0xffffffe8
    2b54:	mvn	r0, #103	; 0x67
    2b58:	movw	r1, #0
    2b5c:	movt	r1, #0
    2b60:	bl	0 <coda_set_error>
    2b64:	mvn	r0, #0
    2b68:	str	r0, [fp, #-20]	; 0xffffffec
    2b6c:	b	325c <string_to_parts+0xbd8>
    2b70:	ldr	r0, [fp, #-24]	; 0xffffffe8
    2b74:	ldr	r1, [sp, #36]	; 0x24
    2b78:	add	r1, r1, #2
    2b7c:	add	r0, r0, r1
    2b80:	ldrb	r0, [r0]
    2b84:	cmp	r0, #42	; 0x2a
    2b88:	movw	r0, #0
    2b8c:	moveq	r0, #1
    2b90:	and	r0, r0, #1
    2b94:	add	r0, r0, #2
    2b98:	ldr	r1, [sp, #36]	; 0x24
    2b9c:	add	r0, r1, r0
    2ba0:	str	r0, [sp, #36]	; 0x24
    2ba4:	ldr	r0, [sp, #32]
    2ba8:	add	r0, r0, #2
    2bac:	str	r0, [sp, #32]
    2bb0:	b	31dc <string_to_parts+0xb58>
    2bb4:	ldr	r0, [fp, #-24]	; 0xffffffe8
    2bb8:	ldr	r1, [sp, #36]	; 0x24
    2bbc:	add	r0, r0, r1
    2bc0:	ldrb	r0, [r0]
    2bc4:	cmp	r0, #68	; 0x44
    2bc8:	bne	2cfc <string_to_parts+0x678>
    2bcc:	ldr	r0, [fp, #-24]	; 0xffffffe8
    2bd0:	ldr	r1, [sp, #36]	; 0x24
    2bd4:	add	r1, r1, #1
    2bd8:	add	r0, r0, r1
    2bdc:	ldrb	r0, [r0]
    2be0:	cmp	r0, #68	; 0x44
    2be4:	bne	2cfc <string_to_parts+0x678>
    2be8:	ldr	r0, [fp, #-24]	; 0xffffffe8
    2bec:	ldr	r1, [sp, #36]	; 0x24
    2bf0:	add	r1, r1, #2
    2bf4:	add	r0, r0, r1
    2bf8:	ldrb	r0, [r0]
    2bfc:	cmp	r0, #68	; 0x44
    2c00:	bne	2cfc <string_to_parts+0x678>
    2c04:	ldr	r0, [fp, #-24]	; 0xffffffe8
    2c08:	ldr	r1, [sp, #36]	; 0x24
    2c0c:	add	r1, r1, #3
    2c10:	add	r0, r0, r1
    2c14:	ldrb	r0, [r0]
    2c18:	cmp	r0, #42	; 0x2a
    2c1c:	movw	r0, #0
    2c20:	moveq	r0, #1
    2c24:	and	r0, r0, #1
    2c28:	str	r0, [sp, #40]	; 0x28
    2c2c:	ldr	r0, [fp, #-28]	; 0xffffffe4
    2c30:	ldr	r1, [sp, #32]
    2c34:	add	r0, r0, r1
    2c38:	ldr	r2, [sp, #40]	; 0x28
    2c3c:	movw	r1, #3
    2c40:	add	r3, sp, #20
    2c44:	bl	43cc <parse_integer>
    2c48:	cmp	r0, #0
    2c4c:	beq	2c74 <string_to_parts+0x5f0>
    2c50:	ldr	r2, [fp, #-28]	; 0xffffffe4
    2c54:	ldr	r3, [fp, #-24]	; 0xffffffe8
    2c58:	mvn	r0, #103	; 0x67
    2c5c:	movw	r1, #0
    2c60:	movt	r1, #0
    2c64:	bl	0 <coda_set_error>
    2c68:	mvn	r0, #0
    2c6c:	str	r0, [fp, #-20]	; 0xffffffec
    2c70:	b	325c <string_to_parts+0xbd8>
    2c74:	ldr	r0, [fp, #-32]	; 0xffffffe0
    2c78:	ldr	r0, [r0]
    2c7c:	ldr	r1, [sp, #20]
    2c80:	ldr	r2, [fp, #-36]	; 0xffffffdc
    2c84:	ldr	r3, [fp, #8]
    2c88:	bl	248 <coda_dayofyear_to_month_day>
    2c8c:	cmp	r0, #0
    2c90:	beq	2cb8 <string_to_parts+0x634>
    2c94:	ldr	r2, [fp, #-28]	; 0xffffffe4
    2c98:	ldr	r3, [fp, #-24]	; 0xffffffe8
    2c9c:	mvn	r0, #103	; 0x67
    2ca0:	movw	r1, #0
    2ca4:	movt	r1, #0
    2ca8:	bl	0 <coda_set_error>
    2cac:	mvn	r0, #0
    2cb0:	str	r0, [fp, #-20]	; 0xffffffec
    2cb4:	b	325c <string_to_parts+0xbd8>
    2cb8:	ldr	r0, [fp, #-24]	; 0xffffffe8
    2cbc:	ldr	r1, [sp, #36]	; 0x24
    2cc0:	add	r1, r1, #3
    2cc4:	add	r0, r0, r1
    2cc8:	ldrb	r0, [r0]
    2ccc:	cmp	r0, #42	; 0x2a
    2cd0:	movw	r0, #0
    2cd4:	moveq	r0, #1
    2cd8:	and	r0, r0, #1
    2cdc:	add	r0, r0, #3
    2ce0:	ldr	r1, [sp, #36]	; 0x24
    2ce4:	add	r0, r1, r0
    2ce8:	str	r0, [sp, #36]	; 0x24
    2cec:	ldr	r0, [sp, #32]
    2cf0:	add	r0, r0, #3
    2cf4:	str	r0, [sp, #32]
    2cf8:	b	31d8 <string_to_parts+0xb54>
    2cfc:	ldr	r0, [fp, #-24]	; 0xffffffe8
    2d00:	ldr	r1, [sp, #36]	; 0x24
    2d04:	add	r0, r0, r1
    2d08:	ldrb	r0, [r0]
    2d0c:	cmp	r0, #72	; 0x48
    2d10:	bne	2de4 <string_to_parts+0x760>
    2d14:	ldr	r0, [fp, #-24]	; 0xffffffe8
    2d18:	ldr	r1, [sp, #36]	; 0x24
    2d1c:	add	r1, r1, #1
    2d20:	add	r0, r0, r1
    2d24:	ldrb	r0, [r0]
    2d28:	cmp	r0, #72	; 0x48
    2d2c:	bne	2de4 <string_to_parts+0x760>
    2d30:	ldr	r0, [fp, #-24]	; 0xffffffe8
    2d34:	ldr	r1, [sp, #36]	; 0x24
    2d38:	add	r1, r1, #2
    2d3c:	add	r0, r0, r1
    2d40:	ldrb	r0, [r0]
    2d44:	cmp	r0, #42	; 0x2a
    2d48:	movw	r0, #0
    2d4c:	moveq	r0, #1
    2d50:	and	r0, r0, #1
    2d54:	str	r0, [sp, #40]	; 0x28
    2d58:	ldr	r0, [fp, #-28]	; 0xffffffe4
    2d5c:	ldr	r1, [sp, #32]
    2d60:	add	r0, r0, r1
    2d64:	ldr	r2, [sp, #40]	; 0x28
    2d68:	ldr	r3, [fp, #12]
    2d6c:	movw	r1, #2
    2d70:	bl	43cc <parse_integer>
    2d74:	cmp	r0, #0
    2d78:	beq	2da0 <string_to_parts+0x71c>
    2d7c:	ldr	r2, [fp, #-28]	; 0xffffffe4
    2d80:	ldr	r3, [fp, #-24]	; 0xffffffe8
    2d84:	mvn	r0, #103	; 0x67
    2d88:	movw	r1, #0
    2d8c:	movt	r1, #0
    2d90:	bl	0 <coda_set_error>
    2d94:	mvn	r0, #0
    2d98:	str	r0, [fp, #-20]	; 0xffffffec
    2d9c:	b	325c <string_to_parts+0xbd8>
    2da0:	ldr	r0, [fp, #-24]	; 0xffffffe8
    2da4:	ldr	r1, [sp, #36]	; 0x24
    2da8:	add	r1, r1, #2
    2dac:	add	r0, r0, r1
    2db0:	ldrb	r0, [r0]
    2db4:	cmp	r0, #42	; 0x2a
    2db8:	movw	r0, #0
    2dbc:	moveq	r0, #1
    2dc0:	and	r0, r0, #1
    2dc4:	add	r0, r0, #2
    2dc8:	ldr	r1, [sp, #36]	; 0x24
    2dcc:	add	r0, r1, r0
    2dd0:	str	r0, [sp, #36]	; 0x24
    2dd4:	ldr	r0, [sp, #32]
    2dd8:	add	r0, r0, #2
    2ddc:	str	r0, [sp, #32]
    2de0:	b	31d4 <string_to_parts+0xb50>
    2de4:	ldr	r0, [fp, #-24]	; 0xffffffe8
    2de8:	ldr	r1, [sp, #36]	; 0x24
    2dec:	add	r0, r0, r1
    2df0:	ldrb	r0, [r0]
    2df4:	cmp	r0, #109	; 0x6d
    2df8:	bne	2ecc <string_to_parts+0x848>
    2dfc:	ldr	r0, [fp, #-24]	; 0xffffffe8
    2e00:	ldr	r1, [sp, #36]	; 0x24
    2e04:	add	r1, r1, #1
    2e08:	add	r0, r0, r1
    2e0c:	ldrb	r0, [r0]
    2e10:	cmp	r0, #109	; 0x6d
    2e14:	bne	2ecc <string_to_parts+0x848>
    2e18:	ldr	r0, [fp, #-24]	; 0xffffffe8
    2e1c:	ldr	r1, [sp, #36]	; 0x24
    2e20:	add	r1, r1, #2
    2e24:	add	r0, r0, r1
    2e28:	ldrb	r0, [r0]
    2e2c:	cmp	r0, #42	; 0x2a
    2e30:	movw	r0, #0
    2e34:	moveq	r0, #1
    2e38:	and	r0, r0, #1
    2e3c:	str	r0, [sp, #40]	; 0x28
    2e40:	ldr	r0, [fp, #-28]	; 0xffffffe4
    2e44:	ldr	r1, [sp, #32]
    2e48:	add	r0, r0, r1
    2e4c:	ldr	r2, [sp, #40]	; 0x28
    2e50:	ldr	r3, [fp, #16]
    2e54:	movw	r1, #2
    2e58:	bl	43cc <parse_integer>
    2e5c:	cmp	r0, #0
    2e60:	beq	2e88 <string_to_parts+0x804>
    2e64:	ldr	r2, [fp, #-28]	; 0xffffffe4
    2e68:	ldr	r3, [fp, #-24]	; 0xffffffe8
    2e6c:	mvn	r0, #103	; 0x67
    2e70:	movw	r1, #0
    2e74:	movt	r1, #0
    2e78:	bl	0 <coda_set_error>
    2e7c:	mvn	r0, #0
    2e80:	str	r0, [fp, #-20]	; 0xffffffec
    2e84:	b	325c <string_to_parts+0xbd8>
    2e88:	ldr	r0, [fp, #-24]	; 0xffffffe8
    2e8c:	ldr	r1, [sp, #36]	; 0x24
    2e90:	add	r1, r1, #2
    2e94:	add	r0, r0, r1
    2e98:	ldrb	r0, [r0]
    2e9c:	cmp	r0, #42	; 0x2a
    2ea0:	movw	r0, #0
    2ea4:	moveq	r0, #1
    2ea8:	and	r0, r0, #1
    2eac:	add	r0, r0, #2
    2eb0:	ldr	r1, [sp, #36]	; 0x24
    2eb4:	add	r0, r1, r0
    2eb8:	str	r0, [sp, #36]	; 0x24
    2ebc:	ldr	r0, [sp, #32]
    2ec0:	add	r0, r0, #2
    2ec4:	str	r0, [sp, #32]
    2ec8:	b	31d0 <string_to_parts+0xb4c>
    2ecc:	ldr	r0, [fp, #-24]	; 0xffffffe8
    2ed0:	ldr	r1, [sp, #36]	; 0x24
    2ed4:	add	r0, r0, r1
    2ed8:	ldrb	r0, [r0]
    2edc:	cmp	r0, #115	; 0x73
    2ee0:	bne	2fb4 <string_to_parts+0x930>
    2ee4:	ldr	r0, [fp, #-24]	; 0xffffffe8
    2ee8:	ldr	r1, [sp, #36]	; 0x24
    2eec:	add	r1, r1, #1
    2ef0:	add	r0, r0, r1
    2ef4:	ldrb	r0, [r0]
    2ef8:	cmp	r0, #115	; 0x73
    2efc:	bne	2fb4 <string_to_parts+0x930>
    2f00:	ldr	r0, [fp, #-24]	; 0xffffffe8
    2f04:	ldr	r1, [sp, #36]	; 0x24
    2f08:	add	r1, r1, #2
    2f0c:	add	r0, r0, r1
    2f10:	ldrb	r0, [r0]
    2f14:	cmp	r0, #42	; 0x2a
    2f18:	movw	r0, #0
    2f1c:	moveq	r0, #1
    2f20:	and	r0, r0, #1
    2f24:	str	r0, [sp, #40]	; 0x28
    2f28:	ldr	r0, [fp, #-28]	; 0xffffffe4
    2f2c:	ldr	r1, [sp, #32]
    2f30:	add	r0, r0, r1
    2f34:	ldr	r2, [sp, #40]	; 0x28
    2f38:	ldr	r3, [fp, #20]
    2f3c:	movw	r1, #2
    2f40:	bl	43cc <parse_integer>
    2f44:	cmp	r0, #0
    2f48:	beq	2f70 <string_to_parts+0x8ec>
    2f4c:	ldr	r2, [fp, #-28]	; 0xffffffe4
    2f50:	ldr	r3, [fp, #-24]	; 0xffffffe8
    2f54:	mvn	r0, #103	; 0x67
    2f58:	movw	r1, #0
    2f5c:	movt	r1, #0
    2f60:	bl	0 <coda_set_error>
    2f64:	mvn	r0, #0
    2f68:	str	r0, [fp, #-20]	; 0xffffffec
    2f6c:	b	325c <string_to_parts+0xbd8>
    2f70:	ldr	r0, [fp, #-24]	; 0xffffffe8
    2f74:	ldr	r1, [sp, #36]	; 0x24
    2f78:	add	r1, r1, #2
    2f7c:	add	r0, r0, r1
    2f80:	ldrb	r0, [r0]
    2f84:	cmp	r0, #42	; 0x2a
    2f88:	movw	r0, #0
    2f8c:	moveq	r0, #1
    2f90:	and	r0, r0, #1
    2f94:	add	r0, r0, #2
    2f98:	ldr	r1, [sp, #36]	; 0x24
    2f9c:	add	r0, r1, r0
    2fa0:	str	r0, [sp, #36]	; 0x24
    2fa4:	ldr	r0, [sp, #32]
    2fa8:	add	r0, r0, #2
    2fac:	str	r0, [sp, #32]
    2fb0:	b	31cc <string_to_parts+0xb48>
    2fb4:	ldr	r0, [fp, #-24]	; 0xffffffe8
    2fb8:	ldr	r1, [sp, #36]	; 0x24
    2fbc:	add	r0, r0, r1
    2fc0:	ldrb	r0, [r0]
    2fc4:	cmp	r0, #83	; 0x53
    2fc8:	bne	30c8 <string_to_parts+0xa44>
    2fcc:	movw	r0, #0
    2fd0:	str	r0, [sp, #24]
    2fd4:	ldr	r0, [fp, #-24]	; 0xffffffe8
    2fd8:	ldr	r1, [sp, #36]	; 0x24
    2fdc:	add	r0, r0, r1
    2fe0:	ldrb	r0, [r0]
    2fe4:	cmp	r0, #83	; 0x53
    2fe8:	bne	3008 <string_to_parts+0x984>
    2fec:	ldr	r0, [sp, #36]	; 0x24
    2ff0:	add	r0, r0, #1
    2ff4:	str	r0, [sp, #36]	; 0x24
    2ff8:	ldr	r0, [sp, #24]
    2ffc:	add	r0, r0, #1
    3000:	str	r0, [sp, #24]
    3004:	b	2fd4 <string_to_parts+0x950>
    3008:	ldr	r0, [fp, #-28]	; 0xffffffe4
    300c:	ldr	r1, [sp, #32]
    3010:	add	r0, r0, r1
    3014:	ldr	r1, [sp, #24]
    3018:	cmp	r1, #6
    301c:	str	r0, [sp, #8]
    3020:	ble	3030 <string_to_parts+0x9ac>
    3024:	movw	r0, #6
    3028:	str	r0, [sp, #4]
    302c:	b	3038 <string_to_parts+0x9b4>
    3030:	ldr	r0, [sp, #24]
    3034:	str	r0, [sp, #4]
    3038:	ldr	r0, [sp, #4]
    303c:	ldr	r3, [fp, #24]
    3040:	ldr	r1, [sp, #8]
    3044:	str	r0, [sp]
    3048:	mov	r0, r1
    304c:	ldr	r1, [sp]
    3050:	movw	r2, #0
    3054:	bl	43cc <parse_integer>
    3058:	cmp	r0, #0
    305c:	beq	3084 <string_to_parts+0xa00>
    3060:	ldr	r2, [fp, #-28]	; 0xffffffe4
    3064:	ldr	r3, [fp, #-24]	; 0xffffffe8
    3068:	mvn	r0, #103	; 0x67
    306c:	movw	r1, #0
    3070:	movt	r1, #0
    3074:	bl	0 <coda_set_error>
    3078:	mvn	r0, #0
    307c:	str	r0, [fp, #-20]	; 0xffffffec
    3080:	b	325c <string_to_parts+0xbd8>
    3084:	ldr	r0, [sp, #24]
    3088:	ldr	r1, [sp, #32]
    308c:	add	r0, r1, r0
    3090:	str	r0, [sp, #32]
    3094:	ldr	r0, [sp, #24]
    3098:	cmp	r0, #6
    309c:	bge	30c4 <string_to_parts+0xa40>
    30a0:	ldr	r0, [fp, #24]
    30a4:	ldr	r1, [r0]
    30a8:	movw	r2, #10
    30ac:	mul	r1, r1, r2
    30b0:	str	r1, [r0]
    30b4:	ldr	r0, [sp, #24]
    30b8:	add	r0, r0, #1
    30bc:	str	r0, [sp, #24]
    30c0:	b	3094 <string_to_parts+0xa10>
    30c4:	b	31c8 <string_to_parts+0xb44>
    30c8:	ldr	r0, [fp, #-24]	; 0xffffffe8
    30cc:	ldr	r1, [sp, #36]	; 0x24
    30d0:	add	r0, r0, r1
    30d4:	ldrb	r0, [r0]
    30d8:	cmp	r0, #65	; 0x41
    30dc:	blt	30f8 <string_to_parts+0xa74>
    30e0:	ldr	r0, [fp, #-24]	; 0xffffffe8
    30e4:	ldr	r1, [sp, #36]	; 0x24
    30e8:	add	r0, r0, r1
    30ec:	ldrb	r0, [r0]
    30f0:	cmp	r0, #90	; 0x5a
    30f4:	ble	3140 <string_to_parts+0xabc>
    30f8:	ldr	r0, [fp, #-24]	; 0xffffffe8
    30fc:	ldr	r1, [sp, #36]	; 0x24
    3100:	add	r0, r0, r1
    3104:	ldrb	r0, [r0]
    3108:	cmp	r0, #97	; 0x61
    310c:	blt	3128 <string_to_parts+0xaa4>
    3110:	ldr	r0, [fp, #-24]	; 0xffffffe8
    3114:	ldr	r1, [sp, #36]	; 0x24
    3118:	add	r0, r0, r1
    311c:	ldrb	r0, [r0]
    3120:	cmp	r0, #122	; 0x7a
    3124:	ble	3140 <string_to_parts+0xabc>
    3128:	ldr	r0, [fp, #-24]	; 0xffffffe8
    312c:	ldr	r1, [sp, #36]	; 0x24
    3130:	add	r0, r0, r1
    3134:	ldrb	r0, [r0]
    3138:	cmp	r0, #42	; 0x2a
    313c:	bne	3160 <string_to_parts+0xadc>
    3140:	ldr	r2, [fp, #-24]	; 0xffffffe8
    3144:	mvn	r0, #102	; 0x66
    3148:	movw	r1, #0
    314c:	movt	r1, #0
    3150:	bl	0 <coda_set_error>
    3154:	mvn	r0, #0
    3158:	str	r0, [fp, #-20]	; 0xffffffec
    315c:	b	325c <string_to_parts+0xbd8>
    3160:	ldr	r0, [fp, #-24]	; 0xffffffe8
    3164:	ldr	r1, [sp, #36]	; 0x24
    3168:	add	r0, r0, r1
    316c:	ldrb	r0, [r0]
    3170:	ldr	r1, [fp, #-28]	; 0xffffffe4
    3174:	ldr	r2, [sp, #32]
    3178:	add	r1, r1, r2
    317c:	ldrb	r1, [r1]
    3180:	cmp	r0, r1
    3184:	beq	31ac <string_to_parts+0xb28>
    3188:	ldr	r2, [fp, #-28]	; 0xffffffe4
    318c:	ldr	r3, [fp, #-24]	; 0xffffffe8
    3190:	mvn	r0, #103	; 0x67
    3194:	movw	r1, #0
    3198:	movt	r1, #0
    319c:	bl	0 <coda_set_error>
    31a0:	mvn	r0, #0
    31a4:	str	r0, [fp, #-20]	; 0xffffffec
    31a8:	b	325c <string_to_parts+0xbd8>
    31ac:	ldr	r0, [sp, #36]	; 0x24
    31b0:	add	r0, r0, #1
    31b4:	str	r0, [sp, #36]	; 0x24
    31b8:	ldr	r0, [sp, #32]
    31bc:	add	r0, r0, #1
    31c0:	str	r0, [sp, #32]
    31c4:	b	31c8 <string_to_parts+0xb44>
    31c8:	b	31cc <string_to_parts+0xb48>
    31cc:	b	31d0 <string_to_parts+0xb4c>
    31d0:	b	31d4 <string_to_parts+0xb50>
    31d4:	b	31d8 <string_to_parts+0xb54>
    31d8:	b	31dc <string_to_parts+0xb58>
    31dc:	b	31e0 <string_to_parts+0xb5c>
    31e0:	b	31e4 <string_to_parts+0xb60>
    31e4:	b	31e8 <string_to_parts+0xb64>
    31e8:	b	2704 <string_to_parts+0x80>
    31ec:	ldr	r0, [sp, #28]
    31f0:	cmp	r0, #0
    31f4:	beq	3218 <string_to_parts+0xb94>
    31f8:	ldr	r2, [fp, #-24]	; 0xffffffe8
    31fc:	mvn	r0, #102	; 0x66
    3200:	movw	r1, #0
    3204:	movt	r1, #0
    3208:	bl	0 <coda_set_error>
    320c:	mvn	r0, #0
    3210:	str	r0, [fp, #-20]	; 0xffffffec
    3214:	b	325c <string_to_parts+0xbd8>
    3218:	ldr	r0, [fp, #-28]	; 0xffffffe4
    321c:	ldr	r1, [sp, #32]
    3220:	add	r0, r0, r1
    3224:	ldrb	r0, [r0]
    3228:	cmp	r0, #0
    322c:	beq	3254 <string_to_parts+0xbd0>
    3230:	ldr	r2, [fp, #-28]	; 0xffffffe4
    3234:	ldr	r3, [fp, #-24]	; 0xffffffe8
    3238:	mvn	r0, #103	; 0x67
    323c:	movw	r1, #0
    3240:	movt	r1, #0
    3244:	bl	0 <coda_set_error>
    3248:	mvn	r0, #0
    324c:	str	r0, [fp, #-20]	; 0xffffffec
    3250:	b	325c <string_to_parts+0xbd8>
    3254:	movw	r0, #0
    3258:	str	r0, [fp, #-20]	; 0xffffffec
    325c:	ldr	r0, [fp, #-20]	; 0xffffffec
    3260:	sub	sp, fp, #16
    3264:	pop	{r4, r5, r6, sl, fp, pc}

00003268 <coda_time_double_to_string>:
    3268:	push	{r4, r5, r6, sl, fp, lr}
    326c:	add	fp, sp, #16
    3270:	sub	sp, sp, #72	; 0x48
    3274:	vstr	d0, [fp, #-32]	; 0xffffffe0
    3278:	str	r0, [fp, #-36]	; 0xffffffdc
    327c:	str	r1, [fp, #-40]	; 0xffffffd8
    3280:	vldr	d0, [fp, #-32]	; 0xffffffe0
    3284:	add	r0, sp, #44	; 0x2c
    3288:	add	r1, sp, #40	; 0x28
    328c:	add	r2, sp, #36	; 0x24
    3290:	add	r3, sp, #32
    3294:	add	ip, sp, #28
    3298:	str	ip, [sp]
    329c:	add	ip, sp, #24
    32a0:	str	ip, [sp, #4]
    32a4:	add	ip, sp, #20
    32a8:	str	ip, [sp, #8]
    32ac:	bl	d60 <coda_time_double_to_parts>
    32b0:	cmp	r0, #0
    32b4:	beq	32c4 <coda_time_double_to_string+0x5c>
    32b8:	mvn	r0, #0
    32bc:	str	r0, [fp, #-20]	; 0xffffffec
    32c0:	b	3304 <coda_time_double_to_string+0x9c>
    32c4:	ldr	r0, [sp, #44]	; 0x2c
    32c8:	ldr	r1, [sp, #40]	; 0x28
    32cc:	ldr	r2, [sp, #36]	; 0x24
    32d0:	ldr	r3, [sp, #32]
    32d4:	ldr	ip, [sp, #28]
    32d8:	ldr	lr, [sp, #24]
    32dc:	ldr	r4, [sp, #20]
    32e0:	ldr	r5, [fp, #-36]	; 0xffffffdc
    32e4:	ldr	r6, [fp, #-40]	; 0xffffffd8
    32e8:	str	ip, [sp]
    32ec:	str	lr, [sp, #4]
    32f0:	str	r4, [sp, #8]
    32f4:	str	r5, [sp, #12]
    32f8:	str	r6, [sp, #16]
    32fc:	bl	1970 <coda_time_parts_to_string>
    3300:	str	r0, [fp, #-20]	; 0xffffffec
    3304:	ldr	r0, [fp, #-20]	; 0xffffffec
    3308:	sub	sp, fp, #16
    330c:	pop	{r4, r5, r6, sl, fp, pc}

00003310 <coda_time_double_to_string_utc>:
    3310:	push	{r4, r5, r6, sl, fp, lr}
    3314:	add	fp, sp, #16
    3318:	sub	sp, sp, #72	; 0x48
    331c:	vstr	d0, [fp, #-32]	; 0xffffffe0
    3320:	str	r0, [fp, #-36]	; 0xffffffdc
    3324:	str	r1, [fp, #-40]	; 0xffffffd8
    3328:	vldr	d0, [fp, #-32]	; 0xffffffe0
    332c:	add	r0, sp, #44	; 0x2c
    3330:	add	r1, sp, #40	; 0x28
    3334:	add	r2, sp, #36	; 0x24
    3338:	add	r3, sp, #32
    333c:	add	ip, sp, #28
    3340:	str	ip, [sp]
    3344:	add	ip, sp, #24
    3348:	str	ip, [sp, #4]
    334c:	add	ip, sp, #20
    3350:	str	ip, [sp, #8]
    3354:	bl	10d0 <coda_time_double_to_parts_utc>
    3358:	cmp	r0, #0
    335c:	beq	336c <coda_time_double_to_string_utc+0x5c>
    3360:	mvn	r0, #0
    3364:	str	r0, [fp, #-20]	; 0xffffffec
    3368:	b	33ac <coda_time_double_to_string_utc+0x9c>
    336c:	ldr	r0, [sp, #44]	; 0x2c
    3370:	ldr	r1, [sp, #40]	; 0x28
    3374:	ldr	r2, [sp, #36]	; 0x24
    3378:	ldr	r3, [sp, #32]
    337c:	ldr	ip, [sp, #28]
    3380:	ldr	lr, [sp, #24]
    3384:	ldr	r4, [sp, #20]
    3388:	ldr	r5, [fp, #-36]	; 0xffffffdc
    338c:	ldr	r6, [fp, #-40]	; 0xffffffd8
    3390:	str	ip, [sp]
    3394:	str	lr, [sp, #4]
    3398:	str	r4, [sp, #8]
    339c:	str	r5, [sp, #12]
    33a0:	str	r6, [sp, #16]
    33a4:	bl	1970 <coda_time_parts_to_string>
    33a8:	str	r0, [fp, #-20]	; 0xffffffec
    33ac:	ldr	r0, [fp, #-20]	; 0xffffffec
    33b0:	sub	sp, fp, #16
    33b4:	pop	{r4, r5, r6, sl, fp, pc}

000033b8 <coda_time_string_to_double>:
    33b8:	push	{r4, r5, fp, lr}
    33bc:	add	fp, sp, #8
    33c0:	sub	sp, sp, #64	; 0x40
    33c4:	str	r0, [fp, #-16]
    33c8:	str	r1, [fp, #-20]	; 0xffffffec
    33cc:	str	r2, [fp, #-24]	; 0xffffffe8
    33d0:	ldr	r0, [fp, #-16]
    33d4:	ldr	r1, [fp, #-20]	; 0xffffffec
    33d8:	sub	r2, fp, #28
    33dc:	sub	r3, fp, #32
    33e0:	add	ip, sp, #36	; 0x24
    33e4:	str	ip, [sp]
    33e8:	add	ip, sp, #32
    33ec:	str	ip, [sp, #4]
    33f0:	add	ip, sp, #28
    33f4:	str	ip, [sp, #8]
    33f8:	add	ip, sp, #24
    33fc:	str	ip, [sp, #12]
    3400:	add	ip, sp, #20
    3404:	str	ip, [sp, #16]
    3408:	bl	22c8 <coda_time_string_to_parts>
    340c:	cmp	r0, #0
    3410:	beq	3420 <coda_time_string_to_double+0x68>
    3414:	mvn	r0, #0
    3418:	str	r0, [fp, #-12]
    341c:	b	3458 <coda_time_string_to_double+0xa0>
    3420:	ldr	r0, [fp, #-28]	; 0xffffffe4
    3424:	ldr	r1, [fp, #-32]	; 0xffffffe0
    3428:	ldr	r2, [sp, #36]	; 0x24
    342c:	ldr	r3, [sp, #32]
    3430:	ldr	ip, [sp, #28]
    3434:	ldr	lr, [sp, #24]
    3438:	ldr	r4, [sp, #20]
    343c:	ldr	r5, [fp, #-24]	; 0xffffffe8
    3440:	str	ip, [sp]
    3444:	str	lr, [sp, #4]
    3448:	str	r4, [sp, #8]
    344c:	str	r5, [sp, #12]
    3450:	bl	14f8 <coda_time_parts_to_double>
    3454:	str	r0, [fp, #-12]
    3458:	ldr	r0, [fp, #-12]
    345c:	sub	sp, fp, #8
    3460:	pop	{r4, r5, fp, pc}

00003464 <coda_time_string_to_double_utc>:
    3464:	push	{r4, r5, fp, lr}
    3468:	add	fp, sp, #8
    346c:	sub	sp, sp, #64	; 0x40
    3470:	str	r0, [fp, #-16]
    3474:	str	r1, [fp, #-20]	; 0xffffffec
    3478:	str	r2, [fp, #-24]	; 0xffffffe8
    347c:	ldr	r0, [fp, #-16]
    3480:	ldr	r1, [fp, #-20]	; 0xffffffec
    3484:	sub	r2, fp, #28
    3488:	sub	r3, fp, #32
    348c:	add	ip, sp, #36	; 0x24
    3490:	str	ip, [sp]
    3494:	add	ip, sp, #32
    3498:	str	ip, [sp, #4]
    349c:	add	ip, sp, #28
    34a0:	str	ip, [sp, #8]
    34a4:	add	ip, sp, #24
    34a8:	str	ip, [sp, #12]
    34ac:	add	ip, sp, #20
    34b0:	str	ip, [sp, #16]
    34b4:	bl	22c8 <coda_time_string_to_parts>
    34b8:	cmp	r0, #0
    34bc:	beq	34cc <coda_time_string_to_double_utc+0x68>
    34c0:	mvn	r0, #0
    34c4:	str	r0, [fp, #-12]
    34c8:	b	3504 <coda_time_string_to_double_utc+0xa0>
    34cc:	ldr	r0, [fp, #-28]	; 0xffffffe4
    34d0:	ldr	r1, [fp, #-32]	; 0xffffffe0
    34d4:	ldr	r2, [sp, #36]	; 0x24
    34d8:	ldr	r3, [sp, #32]
    34dc:	ldr	ip, [sp, #28]
    34e0:	ldr	lr, [sp, #24]
    34e4:	ldr	r4, [sp, #20]
    34e8:	ldr	r5, [fp, #-24]	; 0xffffffe8
    34ec:	str	ip, [sp]
    34f0:	str	lr, [sp, #4]
    34f4:	str	r4, [sp, #8]
    34f8:	str	r5, [sp, #12]
    34fc:	bl	1760 <coda_time_parts_to_double_utc>
    3500:	str	r0, [fp, #-12]
    3504:	ldr	r0, [fp, #-12]
    3508:	sub	sp, fp, #8
    350c:	pop	{r4, r5, fp, pc}

00003510 <coda_datetime_to_double>:
    3510:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
    3514:	add	fp, sp, #24
    3518:	sub	sp, sp, #48	; 0x30
    351c:	ldr	ip, [fp, #20]
    3520:	ldr	lr, [fp, #16]
    3524:	ldr	r4, [fp, #12]
    3528:	ldr	r5, [fp, #8]
    352c:	str	r0, [fp, #-28]	; 0xffffffe4
    3530:	str	r1, [fp, #-32]	; 0xffffffe0
    3534:	str	r2, [sp, #36]	; 0x24
    3538:	str	r3, [sp, #32]
    353c:	ldr	r0, [fp, #-28]	; 0xffffffe4
    3540:	ldr	r1, [fp, #-32]	; 0xffffffe0
    3544:	ldr	r2, [sp, #36]	; 0x24
    3548:	ldr	r3, [sp, #32]
    354c:	ldr	r6, [fp, #8]
    3550:	ldr	r7, [fp, #12]
    3554:	ldr	r8, [fp, #16]
    3558:	ldr	r9, [fp, #20]
    355c:	str	r6, [sp]
    3560:	str	r7, [sp, #4]
    3564:	str	r8, [sp, #8]
    3568:	str	r9, [sp, #12]
    356c:	str	ip, [sp, #28]
    3570:	str	lr, [sp, #24]
    3574:	str	r4, [sp, #20]
    3578:	str	r5, [sp, #16]
    357c:	bl	14f8 <coda_time_parts_to_double>
    3580:	sub	sp, fp, #24
    3584:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}

00003588 <coda_double_to_datetime>:
    3588:	push	{r4, r5, r6, r7, fp, lr}
    358c:	add	fp, sp, #16
    3590:	sub	sp, sp, #48	; 0x30
    3594:	ldr	ip, [fp, #16]
    3598:	ldr	lr, [fp, #12]
    359c:	ldr	r4, [fp, #8]
    35a0:	vstr	d0, [fp, #-24]	; 0xffffffe8
    35a4:	str	r0, [fp, #-28]	; 0xffffffe4
    35a8:	str	r1, [sp, #32]
    35ac:	str	r2, [sp, #28]
    35b0:	str	r3, [sp, #24]
    35b4:	vldr	d0, [fp, #-24]	; 0xffffffe8
    35b8:	ldr	r0, [fp, #-28]	; 0xffffffe4
    35bc:	ldr	r1, [sp, #32]
    35c0:	ldr	r2, [sp, #28]
    35c4:	ldr	r3, [sp, #24]
    35c8:	ldr	r5, [fp, #8]
    35cc:	ldr	r6, [fp, #12]
    35d0:	ldr	r7, [fp, #16]
    35d4:	str	r5, [sp]
    35d8:	str	r6, [sp, #4]
    35dc:	str	r7, [sp, #8]
    35e0:	str	ip, [sp, #20]
    35e4:	str	lr, [sp, #16]
    35e8:	str	r4, [sp, #12]
    35ec:	bl	d60 <coda_time_double_to_parts>
    35f0:	sub	sp, fp, #16
    35f4:	pop	{r4, r5, r6, r7, fp, pc}

000035f8 <coda_time_to_string>:
    35f8:	push	{fp, lr}
    35fc:	mov	fp, sp
    3600:	sub	sp, sp, #16
    3604:	vstr	d0, [sp, #8]
    3608:	str	r0, [sp, #4]
    360c:	vldr	d0, [sp, #8]
    3610:	ldr	r1, [sp, #4]
    3614:	movw	r0, #0
    3618:	movt	r0, #0
    361c:	bl	3268 <coda_time_double_to_string>
    3620:	mov	sp, fp
    3624:	pop	{fp, pc}

00003628 <coda_string_to_time>:
    3628:	push	{fp, lr}
    362c:	mov	fp, sp
    3630:	sub	sp, sp, #16
    3634:	str	r0, [fp, #-4]
    3638:	str	r1, [sp, #8]
    363c:	movw	r0, #0
    3640:	movt	r0, #0
    3644:	str	r0, [sp, #4]
    3648:	ldr	r0, [sp, #4]
    364c:	ldr	r1, [fp, #-4]
    3650:	ldr	r2, [sp, #8]
    3654:	bl	33b8 <coda_time_string_to_double>
    3658:	mov	sp, fp
    365c:	pop	{fp, pc}

00003660 <coda_utcdatetime_to_double>:
    3660:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
    3664:	add	fp, sp, #24
    3668:	sub	sp, sp, #48	; 0x30
    366c:	ldr	ip, [fp, #20]
    3670:	ldr	lr, [fp, #16]
    3674:	ldr	r4, [fp, #12]
    3678:	ldr	r5, [fp, #8]
    367c:	str	r0, [fp, #-28]	; 0xffffffe4
    3680:	str	r1, [fp, #-32]	; 0xffffffe0
    3684:	str	r2, [sp, #36]	; 0x24
    3688:	str	r3, [sp, #32]
    368c:	ldr	r0, [fp, #-28]	; 0xffffffe4
    3690:	ldr	r1, [fp, #-32]	; 0xffffffe0
    3694:	ldr	r2, [sp, #36]	; 0x24
    3698:	ldr	r3, [sp, #32]
    369c:	ldr	r6, [fp, #8]
    36a0:	ldr	r7, [fp, #12]
    36a4:	ldr	r8, [fp, #16]
    36a8:	ldr	r9, [fp, #20]
    36ac:	str	r6, [sp]
    36b0:	str	r7, [sp, #4]
    36b4:	str	r8, [sp, #8]
    36b8:	str	r9, [sp, #12]
    36bc:	str	ip, [sp, #28]
    36c0:	str	lr, [sp, #24]
    36c4:	str	r4, [sp, #20]
    36c8:	str	r5, [sp, #16]
    36cc:	bl	1760 <coda_time_parts_to_double_utc>
    36d0:	sub	sp, fp, #24
    36d4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}

000036d8 <coda_double_to_utcdatetime>:
    36d8:	push	{r4, r5, r6, r7, fp, lr}
    36dc:	add	fp, sp, #16
    36e0:	sub	sp, sp, #48	; 0x30
    36e4:	ldr	ip, [fp, #16]
    36e8:	ldr	lr, [fp, #12]
    36ec:	ldr	r4, [fp, #8]
    36f0:	vstr	d0, [fp, #-24]	; 0xffffffe8
    36f4:	str	r0, [fp, #-28]	; 0xffffffe4
    36f8:	str	r1, [sp, #32]
    36fc:	str	r2, [sp, #28]
    3700:	str	r3, [sp, #24]
    3704:	vldr	d0, [fp, #-24]	; 0xffffffe8
    3708:	ldr	r0, [fp, #-28]	; 0xffffffe4
    370c:	ldr	r1, [sp, #32]
    3710:	ldr	r2, [sp, #28]
    3714:	ldr	r3, [sp, #24]
    3718:	ldr	r5, [fp, #8]
    371c:	ldr	r6, [fp, #12]
    3720:	ldr	r7, [fp, #16]
    3724:	str	r5, [sp]
    3728:	str	r6, [sp, #4]
    372c:	str	r7, [sp, #8]
    3730:	str	ip, [sp, #20]
    3734:	str	lr, [sp, #16]
    3738:	str	r4, [sp, #12]
    373c:	bl	10d0 <coda_time_double_to_parts_utc>
    3740:	sub	sp, fp, #16
    3744:	pop	{r4, r5, r6, r7, fp, pc}

00003748 <coda_time_to_utcstring>:
    3748:	push	{fp, lr}
    374c:	mov	fp, sp
    3750:	sub	sp, sp, #16
    3754:	vstr	d0, [sp, #8]
    3758:	str	r0, [sp, #4]
    375c:	vldr	d0, [sp, #8]
    3760:	ldr	r1, [sp, #4]
    3764:	movw	r0, #0
    3768:	movt	r0, #0
    376c:	bl	3310 <coda_time_double_to_string_utc>
    3770:	mov	sp, fp
    3774:	pop	{fp, pc}

00003778 <coda_utcstring_to_time>:
    3778:	push	{fp, lr}
    377c:	mov	fp, sp
    3780:	sub	sp, sp, #16
    3784:	str	r0, [fp, #-4]
    3788:	str	r1, [sp, #8]
    378c:	movw	r0, #0
    3790:	movt	r0, #0
    3794:	str	r0, [sp, #4]
    3798:	ldr	r0, [sp, #4]
    379c:	ldr	r1, [fp, #-4]
    37a0:	ldr	r2, [sp, #8]
    37a4:	bl	3464 <coda_time_string_to_double_utc>
    37a8:	mov	sp, fp
    37ac:	pop	{fp, pc}

000037b0 <dmy_to_mjd2000_julian>:
    37b0:	push	{fp, lr}
    37b4:	mov	fp, sp
    37b8:	sub	sp, sp, #112	; 0x70
    37bc:	movw	ip, #0
    37c0:	movt	ip, #0
    37c4:	str	r0, [fp, #-8]
    37c8:	str	r1, [fp, #-12]
    37cc:	str	r2, [fp, #-16]
    37d0:	str	r3, [fp, #-20]	; 0xffffffec
    37d4:	add	r0, sp, #40	; 0x28
    37d8:	mov	r1, ip
    37dc:	movw	r2, #52	; 0x34
    37e0:	bl	0 <memcpy>
    37e4:	ldr	r0, [fp, #-16]
    37e8:	cmp	r0, #0
    37ec:	beq	3898 <dmy_to_mjd2000_julian+0xe8>
    37f0:	ldr	r0, [fp, #-12]
    37f4:	cmp	r0, #1
    37f8:	blt	3898 <dmy_to_mjd2000_julian+0xe8>
    37fc:	ldr	r0, [fp, #-12]
    3800:	cmp	r0, #12
    3804:	bgt	3898 <dmy_to_mjd2000_julian+0xe8>
    3808:	ldr	r0, [fp, #-8]
    380c:	cmp	r0, #1
    3810:	blt	3898 <dmy_to_mjd2000_julian+0xe8>
    3814:	ldr	r0, [fp, #-8]
    3818:	ldr	r1, [fp, #-12]
    381c:	add	r2, sp, #40	; 0x28
    3820:	ldr	r3, [r2, r1, lsl #2]
    3824:	sub	r1, r1, #1
    3828:	add	r1, r2, r1, lsl #2
    382c:	ldr	r1, [r1]
    3830:	sub	r1, r3, r1
    3834:	ldr	r2, [fp, #-12]
    3838:	cmp	r2, #2
    383c:	movw	r2, #0
    3840:	str	r0, [sp, #36]	; 0x24
    3844:	str	r1, [sp, #32]
    3848:	str	r2, [sp, #28]
    384c:	bne	387c <dmy_to_mjd2000_julian+0xcc>
    3850:	ldr	r0, [fp, #-16]
    3854:	bl	3cec <y>
    3858:	mov	r1, r0
    385c:	asr	r2, r0, #31
    3860:	add	r2, r0, r2, lsr #30
    3864:	bic	r2, r2, #3
    3868:	sub	r0, r0, r2
    386c:	cmp	r0, #0
    3870:	movw	r0, #0
    3874:	moveq	r0, #1
    3878:	str	r0, [sp, #28]
    387c:	ldr	r0, [sp, #28]
    3880:	and	r0, r0, #1
    3884:	ldr	r1, [sp, #32]
    3888:	add	r0, r1, r0
    388c:	ldr	r2, [sp, #36]	; 0x24
    3890:	cmp	r2, r0
    3894:	ble	38d0 <dmy_to_mjd2000_julian+0x120>
    3898:	ldr	r2, [fp, #-8]
    389c:	ldr	r3, [fp, #-12]
    38a0:	ldr	r0, [fp, #-16]
    38a4:	mvn	r1, #103	; 0x67
    38a8:	str	r0, [sp, #24]
    38ac:	mov	r0, r1
    38b0:	movw	r1, #0
    38b4:	movt	r1, #0
    38b8:	ldr	ip, [sp, #24]
    38bc:	str	ip, [sp]
    38c0:	bl	0 <coda_set_error>
    38c4:	mvn	r0, #0
    38c8:	str	r0, [fp, #-4]
    38cc:	b	3994 <dmy_to_mjd2000_julian+0x1e4>
    38d0:	ldr	r0, [fp, #-8]
    38d4:	ldr	r1, [fp, #-16]
    38d8:	str	r0, [sp, #20]
    38dc:	mov	r0, r1
    38e0:	bl	3cec <y>
    38e4:	movw	r1, #365	; 0x16d
    38e8:	ldr	r2, [sp, #20]
    38ec:	mla	r0, r0, r1, r2
    38f0:	ldr	r1, [fp, #-16]
    38f4:	str	r0, [sp, #16]
    38f8:	mov	r0, r1
    38fc:	bl	3cec <y>
    3900:	mov	r1, #4
    3904:	bl	3d18 <int_div>
    3908:	ldr	r1, [sp, #16]
    390c:	add	r0, r1, r0
    3910:	ldr	r1, [fp, #-12]
    3914:	sub	r1, r1, #1
    3918:	add	r2, sp, #40	; 0x28
    391c:	add	r1, r2, r1, lsl #2
    3920:	ldr	r1, [r1]
    3924:	add	r0, r0, r1
    3928:	ldr	r1, [fp, #-12]
    392c:	cmp	r1, #2
    3930:	movw	r1, #0
    3934:	str	r0, [sp, #12]
    3938:	str	r1, [sp, #8]
    393c:	bgt	396c <dmy_to_mjd2000_julian+0x1bc>
    3940:	ldr	r0, [fp, #-16]
    3944:	bl	3cec <y>
    3948:	mov	r1, r0
    394c:	asr	r2, r0, #31
    3950:	add	r2, r0, r2, lsr #30
    3954:	bic	r2, r2, #3
    3958:	sub	r0, r0, r2
    395c:	cmp	r0, #0
    3960:	movw	r0, #0
    3964:	moveq	r0, #1
    3968:	str	r0, [sp, #8]
    396c:	ldr	r0, [sp, #8]
    3970:	ldr	r1, [pc, #40]	; 39a0 <dmy_to_mjd2000_julian+0x1f0>
    3974:	and	r0, r0, #1
    3978:	ldr	r2, [sp, #12]
    397c:	sub	r0, r2, r0
    3980:	add	r0, r0, r1
    3984:	ldr	r1, [fp, #-20]	; 0xffffffec
    3988:	str	r0, [r1]
    398c:	movw	r0, #0
    3990:	str	r0, [fp, #-4]
    3994:	ldr	r0, [fp, #-4]
    3998:	mov	sp, fp
    399c:	pop	{fp, pc}
    39a0:	.word	0x001a42e2

000039a4 <dmy_to_mjd2000_gregorian>:
    39a4:	push	{fp, lr}
    39a8:	mov	fp, sp
    39ac:	sub	sp, sp, #144	; 0x90
    39b0:	movw	ip, #0
    39b4:	movt	ip, #0
    39b8:	str	r0, [fp, #-8]
    39bc:	str	r1, [fp, #-12]
    39c0:	str	r2, [fp, #-16]
    39c4:	str	r3, [fp, #-20]	; 0xffffffec
    39c8:	add	r0, sp, #72	; 0x48
    39cc:	mov	r1, ip
    39d0:	movw	r2, #52	; 0x34
    39d4:	bl	0 <memcpy>
    39d8:	ldr	r0, [fp, #-16]
    39dc:	cmp	r0, #0
    39e0:	beq	3b14 <dmy_to_mjd2000_gregorian+0x170>
    39e4:	ldr	r0, [fp, #-12]
    39e8:	cmp	r0, #1
    39ec:	blt	3b14 <dmy_to_mjd2000_gregorian+0x170>
    39f0:	ldr	r0, [fp, #-12]
    39f4:	cmp	r0, #12
    39f8:	bgt	3b14 <dmy_to_mjd2000_gregorian+0x170>
    39fc:	ldr	r0, [fp, #-8]
    3a00:	cmp	r0, #1
    3a04:	blt	3b14 <dmy_to_mjd2000_gregorian+0x170>
    3a08:	ldr	r0, [fp, #-8]
    3a0c:	ldr	r1, [fp, #-12]
    3a10:	add	r2, sp, #72	; 0x48
    3a14:	ldr	r3, [r2, r1, lsl #2]
    3a18:	sub	r1, r1, #1
    3a1c:	add	r1, r2, r1, lsl #2
    3a20:	ldr	r1, [r1]
    3a24:	sub	r1, r3, r1
    3a28:	ldr	r2, [fp, #-12]
    3a2c:	cmp	r2, #2
    3a30:	movw	r2, #0
    3a34:	str	r0, [sp, #68]	; 0x44
    3a38:	str	r1, [sp, #64]	; 0x40
    3a3c:	str	r2, [sp, #60]	; 0x3c
    3a40:	bne	3af8 <dmy_to_mjd2000_gregorian+0x154>
    3a44:	ldr	r0, [fp, #-16]
    3a48:	bl	3cec <y>
    3a4c:	asr	r1, r0, #31
    3a50:	add	r1, r0, r1, lsr #30
    3a54:	bic	r1, r1, #3
    3a58:	sub	r0, r0, r1
    3a5c:	clz	r0, r0
    3a60:	lsr	r0, r0, #5
    3a64:	ldr	r1, [fp, #-16]
    3a68:	str	r0, [sp, #56]	; 0x38
    3a6c:	mov	r0, r1
    3a70:	bl	3cec <y>
    3a74:	movw	r1, #34079	; 0x851f
    3a78:	movt	r1, #20971	; 0x51eb
    3a7c:	smmul	r2, r0, r1
    3a80:	asr	r3, r2, #5
    3a84:	add	r2, r3, r2, lsr #31
    3a88:	mov	r3, #100	; 0x64
    3a8c:	mls	r0, r2, r3, r0
    3a90:	clz	r0, r0
    3a94:	lsr	r0, r0, #5
    3a98:	ldr	r2, [sp, #56]	; 0x38
    3a9c:	eor	r0, r2, r0
    3aa0:	ldr	r2, [fp, #-16]
    3aa4:	str	r0, [sp, #52]	; 0x34
    3aa8:	mov	r0, r2
    3aac:	str	r1, [sp, #48]	; 0x30
    3ab0:	bl	3cec <y>
    3ab4:	mov	r1, r0
    3ab8:	ldr	r2, [sp, #48]	; 0x30
    3abc:	smmul	r3, r0, r2
    3ac0:	asr	ip, r3, #7
    3ac4:	add	r3, ip, r3, lsr #31
    3ac8:	mov	ip, #400	; 0x190
    3acc:	mls	r0, r3, ip, r0
    3ad0:	cmp	r0, #0
    3ad4:	movw	r0, #0
    3ad8:	moveq	r0, #1
    3adc:	and	r0, r0, #1
    3ae0:	ldr	r3, [sp, #52]	; 0x34
    3ae4:	eor	r0, r3, r0
    3ae8:	cmp	r0, #0
    3aec:	movw	r0, #0
    3af0:	movne	r0, #1
    3af4:	str	r0, [sp, #60]	; 0x3c
    3af8:	ldr	r0, [sp, #60]	; 0x3c
    3afc:	and	r0, r0, #1
    3b00:	ldr	r1, [sp, #64]	; 0x40
    3b04:	add	r0, r1, r0
    3b08:	ldr	r2, [sp, #68]	; 0x44
    3b0c:	cmp	r2, r0
    3b10:	ble	3b4c <dmy_to_mjd2000_gregorian+0x1a8>
    3b14:	ldr	r2, [fp, #-8]
    3b18:	ldr	r3, [fp, #-12]
    3b1c:	ldr	r0, [fp, #-16]
    3b20:	mvn	r1, #103	; 0x67
    3b24:	str	r0, [sp, #44]	; 0x2c
    3b28:	mov	r0, r1
    3b2c:	movw	r1, #0
    3b30:	movt	r1, #0
    3b34:	ldr	ip, [sp, #44]	; 0x2c
    3b38:	str	ip, [sp]
    3b3c:	bl	0 <coda_set_error>
    3b40:	mvn	r0, #0
    3b44:	str	r0, [fp, #-4]
    3b48:	b	3cdc <dmy_to_mjd2000_gregorian+0x338>
    3b4c:	ldr	r0, [fp, #-8]
    3b50:	ldr	r1, [fp, #-12]
    3b54:	sub	r1, r1, #1
    3b58:	add	r2, sp, #72	; 0x48
    3b5c:	add	r1, r2, r1, lsl #2
    3b60:	ldr	r1, [r1]
    3b64:	add	r0, r0, r1
    3b68:	ldr	r1, [fp, #-16]
    3b6c:	str	r0, [sp, #40]	; 0x28
    3b70:	mov	r0, r1
    3b74:	bl	3cec <y>
    3b78:	movw	r1, #365	; 0x16d
    3b7c:	mul	r0, r0, r1
    3b80:	ldr	r1, [sp, #40]	; 0x28
    3b84:	add	r0, r1, r0
    3b88:	ldr	r1, [fp, #-16]
    3b8c:	str	r0, [sp, #36]	; 0x24
    3b90:	mov	r0, r1
    3b94:	bl	3cec <y>
    3b98:	movw	r1, #4
    3b9c:	bl	3d18 <int_div>
    3ba0:	ldr	r1, [sp, #36]	; 0x24
    3ba4:	add	r0, r1, r0
    3ba8:	ldr	r1, [fp, #-16]
    3bac:	str	r0, [sp, #32]
    3bb0:	mov	r0, r1
    3bb4:	bl	3cec <y>
    3bb8:	movw	r1, #100	; 0x64
    3bbc:	bl	3d18 <int_div>
    3bc0:	ldr	r1, [sp, #32]
    3bc4:	sub	r0, r1, r0
    3bc8:	ldr	r1, [fp, #-16]
    3bcc:	str	r0, [sp, #28]
    3bd0:	mov	r0, r1
    3bd4:	bl	3cec <y>
    3bd8:	movw	r1, #400	; 0x190
    3bdc:	bl	3d18 <int_div>
    3be0:	ldr	r1, [sp, #28]
    3be4:	add	r0, r1, r0
    3be8:	ldr	r1, [fp, #-12]
    3bec:	cmp	r1, #2
    3bf0:	movw	r1, #0
    3bf4:	str	r0, [sp, #24]
    3bf8:	str	r1, [sp, #20]
    3bfc:	bgt	3cb0 <dmy_to_mjd2000_gregorian+0x30c>
    3c00:	ldr	r0, [fp, #-16]
    3c04:	bl	3cec <y>
    3c08:	asr	r1, r0, #31
    3c0c:	add	r1, r0, r1, lsr #30
    3c10:	bic	r1, r1, #3
    3c14:	sub	r0, r0, r1
    3c18:	clz	r0, r0
    3c1c:	lsr	r0, r0, #5
    3c20:	ldr	r1, [fp, #-16]
    3c24:	str	r0, [sp, #16]
    3c28:	mov	r0, r1
    3c2c:	bl	3cec <y>
    3c30:	movw	r1, #34079	; 0x851f
    3c34:	movt	r1, #20971	; 0x51eb
    3c38:	smmul	r2, r0, r1
    3c3c:	asr	r3, r2, #5
    3c40:	add	r2, r3, r2, lsr #31
    3c44:	mov	r3, #100	; 0x64
    3c48:	mls	r0, r2, r3, r0
    3c4c:	ldr	r2, [sp, #16]
    3c50:	sub	r3, r2, #1
    3c54:	cmp	r0, #0
    3c58:	moveq	r2, r3
    3c5c:	ldr	r0, [fp, #-16]
    3c60:	str	r1, [sp, #12]
    3c64:	str	r2, [sp, #8]
    3c68:	bl	3cec <y>
    3c6c:	mov	r1, r0
    3c70:	ldr	r2, [sp, #12]
    3c74:	smmul	r3, r0, r2
    3c78:	asr	ip, r3, #7
    3c7c:	add	r3, ip, r3, lsr #31
    3c80:	mov	ip, #400	; 0x190
    3c84:	mls	r0, r3, ip, r0
    3c88:	cmp	r0, #0
    3c8c:	movw	r0, #0
    3c90:	moveq	r0, #1
    3c94:	and	r0, r0, #1
    3c98:	ldr	r3, [sp, #8]
    3c9c:	add	r0, r3, r0
    3ca0:	cmp	r0, #0
    3ca4:	movw	r0, #0
    3ca8:	movne	r0, #1
    3cac:	str	r0, [sp, #20]
    3cb0:	ldr	r0, [sp, #20]
    3cb4:	ldr	r1, [pc, #44]	; 3ce8 <dmy_to_mjd2000_gregorian+0x344>
    3cb8:	and	r0, r0, #1
    3cbc:	movw	r2, #0
    3cc0:	sub	r0, r2, r0
    3cc4:	ldr	r3, [sp, #24]
    3cc8:	add	r0, r3, r0
    3ccc:	sub	r0, r0, r1
    3cd0:	ldr	r1, [fp, #-20]	; 0xffffffec
    3cd4:	str	r0, [r1]
    3cd8:	str	r2, [fp, #-4]
    3cdc:	ldr	r0, [fp, #-4]
    3ce0:	mov	sp, fp
    3ce4:	pop	{fp, pc}
    3ce8:	.word	0x0008d7df

00003cec <y>:
    3cec:	sub	sp, sp, #4
    3cf0:	str	r0, [sp]
    3cf4:	ldr	r0, [sp]
    3cf8:	ldr	r1, [sp]
    3cfc:	cmp	r1, #0
    3d00:	movw	r1, #0
    3d04:	movlt	r1, #1
    3d08:	and	r1, r1, #1
    3d0c:	add	r0, r0, r1
    3d10:	add	sp, sp, #4
    3d14:	bx	lr

00003d18 <int_div>:
    3d18:	sub	sp, sp, #8
    3d1c:	str	r0, [sp, #4]
    3d20:	str	r1, [sp]
    3d24:	ldr	r0, [sp, #4]
    3d28:	ldr	r1, [sp]
    3d2c:	sdiv	r2, r0, r1
    3d30:	mls	r0, r2, r1, r0
    3d34:	cmp	r0, #0
    3d38:	movw	r0, #0
    3d3c:	movlt	r0, #1
    3d40:	and	r0, r0, #1
    3d44:	sub	r0, r2, r0
    3d48:	add	sp, sp, #8
    3d4c:	bx	lr

00003d50 <mjd2000_to_dmy_julian>:
    3d50:	push	{fp, lr}
    3d54:	mov	fp, sp
    3d58:	sub	sp, sp, #24
    3d5c:	str	r0, [fp, #-4]
    3d60:	str	r1, [fp, #-8]
    3d64:	str	r2, [sp, #12]
    3d68:	str	r3, [sp, #8]
    3d6c:	ldr	r0, [sp, #8]
    3d70:	mov	r1, #2000	; 0x7d0
    3d74:	str	r1, [r0]
    3d78:	ldr	r0, [fp, #-4]
    3d7c:	sub	r0, r0, #13
    3d80:	str	r0, [sp, #4]
    3d84:	ldr	r0, [sp, #4]
    3d88:	movw	r1, #1461	; 0x5b5
    3d8c:	bl	3d18 <int_div>
    3d90:	mov	r1, r0
    3d94:	lsl	r0, r0, #2
    3d98:	ldr	r2, [sp, #8]
    3d9c:	ldr	r3, [r2]
    3da0:	add	r0, r3, r0
    3da4:	str	r0, [r2]
    3da8:	ldr	r0, [sp, #4]
    3dac:	movw	r2, #1461	; 0x5b5
    3db0:	str	r1, [sp]
    3db4:	mov	r1, r2
    3db8:	bl	415c <int_mod>
    3dbc:	str	r0, [sp, #4]
    3dc0:	ldr	r0, [sp, #4]
    3dc4:	movw	r1, #366	; 0x16e
    3dc8:	cmp	r0, r1
    3dcc:	bge	3de4 <mjd2000_to_dmy_julian+0x94>
    3dd0:	ldr	r0, [sp, #4]
    3dd4:	ldr	r1, [fp, #-8]
    3dd8:	ldr	r2, [sp, #12]
    3ddc:	bl	419c <getday_leapyear>
    3de0:	b	3e40 <mjd2000_to_dmy_julian+0xf0>
    3de4:	ldr	r0, [sp, #8]
    3de8:	ldr	r1, [r0]
    3dec:	add	r1, r1, #1
    3df0:	str	r1, [r0]
    3df4:	ldr	r0, [sp, #4]
    3df8:	movw	r1, #366	; 0x16e
    3dfc:	sub	r0, r0, r1
    3e00:	str	r0, [sp, #4]
    3e04:	ldr	r0, [sp, #4]
    3e08:	movw	r1, #365	; 0x16d
    3e0c:	bl	3d18 <int_div>
    3e10:	ldr	r1, [sp, #8]
    3e14:	ldr	r2, [r1]
    3e18:	add	r0, r2, r0
    3e1c:	str	r0, [r1]
    3e20:	ldr	r0, [sp, #4]
    3e24:	movw	r1, #365	; 0x16d
    3e28:	bl	415c <int_mod>
    3e2c:	str	r0, [sp, #4]
    3e30:	ldr	r0, [sp, #4]
    3e34:	ldr	r1, [fp, #-8]
    3e38:	ldr	r2, [sp, #12]
    3e3c:	bl	42b4 <getday_nonleapyear>
    3e40:	ldr	r0, [sp, #8]
    3e44:	ldr	r0, [r0]
    3e48:	cmp	r0, #0
    3e4c:	bgt	3e64 <mjd2000_to_dmy_julian+0x114>
    3e50:	ldr	r0, [sp, #8]
    3e54:	ldr	r1, [r0]
    3e58:	mvn	r2, #0
    3e5c:	add	r1, r1, r2
    3e60:	str	r1, [r0]
    3e64:	mov	sp, fp
    3e68:	pop	{fp, pc}

00003e6c <mjd2000_to_dmy_gregorian>:
    3e6c:	push	{fp, lr}
    3e70:	mov	fp, sp
    3e74:	sub	sp, sp, #32
    3e78:	ldr	ip, [pc, #728]	; 4158 <mjd2000_to_dmy_gregorian+0x2ec>
    3e7c:	str	r0, [fp, #-4]
    3e80:	str	r1, [fp, #-8]
    3e84:	str	r2, [fp, #-12]
    3e88:	str	r3, [sp, #16]
    3e8c:	ldr	r0, [sp, #16]
    3e90:	movw	r1, #2000	; 0x7d0
    3e94:	str	r1, [r0]
    3e98:	ldr	r0, [fp, #-4]
    3e9c:	str	r0, [sp, #12]
    3ea0:	ldr	r0, [sp, #12]
    3ea4:	mov	r1, ip
    3ea8:	bl	3d18 <int_div>
    3eac:	ldr	r1, [pc, #676]	; 4158 <mjd2000_to_dmy_gregorian+0x2ec>
    3eb0:	movw	r2, #400	; 0x190
    3eb4:	mul	r0, r0, r2
    3eb8:	ldr	r2, [sp, #16]
    3ebc:	ldr	r3, [r2]
    3ec0:	add	r0, r3, r0
    3ec4:	str	r0, [r2]
    3ec8:	ldr	r0, [sp, #12]
    3ecc:	bl	415c <int_mod>
    3ed0:	str	r0, [sp, #12]
    3ed4:	ldr	r0, [sp, #12]
    3ed8:	movw	r1, #36525	; 0x8ead
    3edc:	cmp	r0, r1
    3ee0:	bge	3fa4 <mjd2000_to_dmy_gregorian+0x138>
    3ee4:	ldr	r0, [sp, #12]
    3ee8:	movw	r1, #1461	; 0x5b5
    3eec:	bl	3d18 <int_div>
    3ef0:	mov	r1, r0
    3ef4:	lsl	r0, r0, #2
    3ef8:	ldr	r2, [sp, #16]
    3efc:	ldr	r3, [r2]
    3f00:	add	r0, r3, r0
    3f04:	str	r0, [r2]
    3f08:	ldr	r0, [sp, #12]
    3f0c:	movw	r2, #1461	; 0x5b5
    3f10:	str	r1, [sp, #8]
    3f14:	mov	r1, r2
    3f18:	bl	415c <int_mod>
    3f1c:	str	r0, [sp, #12]
    3f20:	ldr	r0, [sp, #12]
    3f24:	movw	r1, #366	; 0x16e
    3f28:	cmp	r0, r1
    3f2c:	bge	3f44 <mjd2000_to_dmy_gregorian+0xd8>
    3f30:	ldr	r0, [sp, #12]
    3f34:	ldr	r1, [fp, #-8]
    3f38:	ldr	r2, [fp, #-12]
    3f3c:	bl	419c <getday_leapyear>
    3f40:	b	3fa0 <mjd2000_to_dmy_gregorian+0x134>
    3f44:	ldr	r0, [sp, #16]
    3f48:	ldr	r1, [r0]
    3f4c:	add	r1, r1, #1
    3f50:	str	r1, [r0]
    3f54:	ldr	r0, [sp, #12]
    3f58:	movw	r1, #366	; 0x16e
    3f5c:	sub	r0, r0, r1
    3f60:	str	r0, [sp, #12]
    3f64:	ldr	r0, [sp, #12]
    3f68:	movw	r1, #365	; 0x16d
    3f6c:	bl	3d18 <int_div>
    3f70:	ldr	r1, [sp, #16]
    3f74:	ldr	r2, [r1]
    3f78:	add	r0, r2, r0
    3f7c:	str	r0, [r1]
    3f80:	ldr	r0, [sp, #12]
    3f84:	movw	r1, #365	; 0x16d
    3f88:	bl	415c <int_mod>
    3f8c:	str	r0, [sp, #12]
    3f90:	ldr	r0, [sp, #12]
    3f94:	ldr	r1, [fp, #-8]
    3f98:	ldr	r2, [fp, #-12]
    3f9c:	bl	42b4 <getday_nonleapyear>
    3fa0:	b	412c <mjd2000_to_dmy_gregorian+0x2c0>
    3fa4:	ldr	r0, [sp, #12]
    3fa8:	movw	r1, #36525	; 0x8ead
    3fac:	sub	r0, r0, r1
    3fb0:	str	r0, [sp, #12]
    3fb4:	ldr	r0, [sp, #16]
    3fb8:	ldr	r1, [r0]
    3fbc:	add	r1, r1, #100	; 0x64
    3fc0:	str	r1, [r0]
    3fc4:	ldr	r0, [sp, #12]
    3fc8:	movw	r1, #36524	; 0x8eac
    3fcc:	bl	3d18 <int_div>
    3fd0:	movw	r1, #100	; 0x64
    3fd4:	mul	r0, r0, r1
    3fd8:	ldr	r1, [sp, #16]
    3fdc:	ldr	r2, [r1]
    3fe0:	add	r0, r2, r0
    3fe4:	str	r0, [r1]
    3fe8:	ldr	r0, [sp, #12]
    3fec:	movw	r1, #36524	; 0x8eac
    3ff0:	bl	415c <int_mod>
    3ff4:	str	r0, [sp, #12]
    3ff8:	ldr	r0, [sp, #12]
    3ffc:	movw	r1, #1460	; 0x5b4
    4000:	cmp	r0, r1
    4004:	bge	4048 <mjd2000_to_dmy_gregorian+0x1dc>
    4008:	ldr	r0, [sp, #12]
    400c:	movw	r1, #365	; 0x16d
    4010:	bl	3d18 <int_div>
    4014:	ldr	r1, [sp, #16]
    4018:	ldr	r2, [r1]
    401c:	add	r0, r2, r0
    4020:	str	r0, [r1]
    4024:	ldr	r0, [sp, #12]
    4028:	movw	r1, #365	; 0x16d
    402c:	bl	415c <int_mod>
    4030:	str	r0, [sp, #12]
    4034:	ldr	r0, [sp, #12]
    4038:	ldr	r1, [fp, #-8]
    403c:	ldr	r2, [fp, #-12]
    4040:	bl	42b4 <getday_nonleapyear>
    4044:	b	4128 <mjd2000_to_dmy_gregorian+0x2bc>
    4048:	ldr	r0, [sp, #12]
    404c:	movw	r1, #1460	; 0x5b4
    4050:	sub	r0, r0, r1
    4054:	str	r0, [sp, #12]
    4058:	ldr	r0, [sp, #16]
    405c:	ldr	r1, [r0]
    4060:	add	r1, r1, #4
    4064:	str	r1, [r0]
    4068:	ldr	r0, [sp, #12]
    406c:	movw	r1, #1461	; 0x5b5
    4070:	bl	3d18 <int_div>
    4074:	mov	r1, r0
    4078:	lsl	r0, r0, #2
    407c:	ldr	r2, [sp, #16]
    4080:	ldr	r3, [r2]
    4084:	add	r0, r3, r0
    4088:	str	r0, [r2]
    408c:	ldr	r0, [sp, #12]
    4090:	movw	r2, #1461	; 0x5b5
    4094:	str	r1, [sp, #4]
    4098:	mov	r1, r2
    409c:	bl	415c <int_mod>
    40a0:	str	r0, [sp, #12]
    40a4:	ldr	r0, [sp, #12]
    40a8:	movw	r1, #366	; 0x16e
    40ac:	cmp	r0, r1
    40b0:	bge	40c8 <mjd2000_to_dmy_gregorian+0x25c>
    40b4:	ldr	r0, [sp, #12]
    40b8:	ldr	r1, [fp, #-8]
    40bc:	ldr	r2, [fp, #-12]
    40c0:	bl	419c <getday_leapyear>
    40c4:	b	4124 <mjd2000_to_dmy_gregorian+0x2b8>
    40c8:	ldr	r0, [sp, #16]
    40cc:	ldr	r1, [r0]
    40d0:	add	r1, r1, #1
    40d4:	str	r1, [r0]
    40d8:	ldr	r0, [sp, #12]
    40dc:	movw	r1, #366	; 0x16e
    40e0:	sub	r0, r0, r1
    40e4:	str	r0, [sp, #12]
    40e8:	ldr	r0, [sp, #12]
    40ec:	movw	r1, #365	; 0x16d
    40f0:	bl	3d18 <int_div>
    40f4:	ldr	r1, [sp, #16]
    40f8:	ldr	r2, [r1]
    40fc:	add	r0, r2, r0
    4100:	str	r0, [r1]
    4104:	ldr	r0, [sp, #12]
    4108:	movw	r1, #365	; 0x16d
    410c:	bl	415c <int_mod>
    4110:	str	r0, [sp, #12]
    4114:	ldr	r0, [sp, #12]
    4118:	ldr	r1, [fp, #-8]
    411c:	ldr	r2, [fp, #-12]
    4120:	bl	42b4 <getday_nonleapyear>
    4124:	b	4128 <mjd2000_to_dmy_gregorian+0x2bc>
    4128:	b	412c <mjd2000_to_dmy_gregorian+0x2c0>
    412c:	ldr	r0, [sp, #16]
    4130:	ldr	r0, [r0]
    4134:	cmp	r0, #0
    4138:	bgt	4150 <mjd2000_to_dmy_gregorian+0x2e4>
    413c:	ldr	r0, [sp, #16]
    4140:	ldr	r1, [r0]
    4144:	mvn	r2, #0
    4148:	add	r1, r1, r2
    414c:	str	r1, [r0]
    4150:	mov	sp, fp
    4154:	pop	{fp, pc}
    4158:	.word	0x00023ab1

0000415c <int_mod>:
    415c:	sub	sp, sp, #8
    4160:	str	r0, [sp, #4]
    4164:	str	r1, [sp]
    4168:	ldr	r0, [sp, #4]
    416c:	ldr	r1, [sp]
    4170:	sdiv	r2, r0, r1
    4174:	mls	r0, r2, r1, r0
    4178:	mov	r2, r0
    417c:	cmp	r2, #0
    4180:	movw	r2, #0
    4184:	movlt	r2, #1
    4188:	and	r2, r2, #1
    418c:	mul	r1, r1, r2
    4190:	add	r0, r0, r1
    4194:	add	sp, sp, #8
    4198:	bx	lr

0000419c <getday_leapyear>:
    419c:	push	{fp, lr}
    41a0:	mov	fp, sp
    41a4:	sub	sp, sp, #72	; 0x48
    41a8:	movw	r3, #0
    41ac:	movt	r3, #0
    41b0:	str	r0, [fp, #-4]
    41b4:	str	r1, [fp, #-8]
    41b8:	str	r2, [fp, #-12]
    41bc:	add	r0, sp, #8
    41c0:	mov	r1, r3
    41c4:	movw	r2, #52	; 0x34
    41c8:	bl	0 <memcpy>
    41cc:	ldr	r0, [fp, #-4]
    41d0:	cmp	r0, #0
    41d4:	blt	41dc <getday_leapyear+0x40>
    41d8:	b	41fc <getday_leapyear+0x60>
    41dc:	movw	r0, #0
    41e0:	movt	r0, #0
    41e4:	movw	r1, #0
    41e8:	movt	r1, #0
    41ec:	movw	r2, #358	; 0x166
    41f0:	movw	r3, #0
    41f4:	movt	r3, #0
    41f8:	bl	0 <__assert_fail>
    41fc:	ldr	r0, [fp, #-4]
    4200:	movw	r1, #366	; 0x16e
    4204:	cmp	r0, r1
    4208:	bge	4210 <getday_leapyear+0x74>
    420c:	b	4230 <getday_leapyear+0x94>
    4210:	movw	r0, #0
    4214:	movt	r0, #0
    4218:	movw	r1, #0
    421c:	movt	r1, #0
    4220:	movw	r2, #359	; 0x167
    4224:	movw	r3, #0
    4228:	movt	r3, #0
    422c:	bl	0 <__assert_fail>
    4230:	movw	r0, #1
    4234:	str	r0, [sp, #4]
    4238:	ldr	r0, [sp, #4]
    423c:	cmp	r0, #12
    4240:	bgt	4278 <getday_leapyear+0xdc>
    4244:	ldr	r0, [fp, #-4]
    4248:	ldr	r1, [sp, #4]
    424c:	add	r2, sp, #8
    4250:	add	r1, r2, r1, lsl #2
    4254:	ldr	r1, [r1]
    4258:	cmp	r0, r1
    425c:	bge	4264 <getday_leapyear+0xc8>
    4260:	b	4278 <getday_leapyear+0xdc>
    4264:	b	4268 <getday_leapyear+0xcc>
    4268:	ldr	r0, [sp, #4]
    426c:	add	r0, r0, #1
    4270:	str	r0, [sp, #4]
    4274:	b	4238 <getday_leapyear+0x9c>
    4278:	ldr	r0, [sp, #4]
    427c:	ldr	r1, [fp, #-12]
    4280:	str	r0, [r1]
    4284:	ldr	r0, [fp, #-4]
    4288:	add	r0, r0, #1
    428c:	ldr	r1, [sp, #4]
    4290:	sub	r1, r1, #1
    4294:	add	r2, sp, #8
    4298:	add	r1, r2, r1, lsl #2
    429c:	ldr	r1, [r1]
    42a0:	sub	r0, r0, r1
    42a4:	ldr	r1, [fp, #-8]
    42a8:	str	r0, [r1]
    42ac:	mov	sp, fp
    42b0:	pop	{fp, pc}

000042b4 <getday_nonleapyear>:
    42b4:	push	{fp, lr}
    42b8:	mov	fp, sp
    42bc:	sub	sp, sp, #72	; 0x48
    42c0:	movw	r3, #0
    42c4:	movt	r3, #0
    42c8:	str	r0, [fp, #-4]
    42cc:	str	r1, [fp, #-8]
    42d0:	str	r2, [fp, #-12]
    42d4:	add	r0, sp, #8
    42d8:	mov	r1, r3
    42dc:	movw	r2, #52	; 0x34
    42e0:	bl	0 <memcpy>
    42e4:	ldr	r0, [fp, #-4]
    42e8:	cmp	r0, #0
    42ec:	blt	42f4 <getday_nonleapyear+0x40>
    42f0:	b	4314 <getday_nonleapyear+0x60>
    42f4:	movw	r0, #0
    42f8:	movt	r0, #0
    42fc:	movw	r1, #0
    4300:	movt	r1, #0
    4304:	movw	r2, #377	; 0x179
    4308:	movw	r3, #0
    430c:	movt	r3, #0
    4310:	bl	0 <__assert_fail>
    4314:	ldr	r0, [fp, #-4]
    4318:	movw	r1, #365	; 0x16d
    431c:	cmp	r0, r1
    4320:	bge	4328 <getday_nonleapyear+0x74>
    4324:	b	4348 <getday_nonleapyear+0x94>
    4328:	movw	r0, #0
    432c:	movt	r0, #0
    4330:	movw	r1, #0
    4334:	movt	r1, #0
    4338:	movw	r2, #378	; 0x17a
    433c:	movw	r3, #0
    4340:	movt	r3, #0
    4344:	bl	0 <__assert_fail>
    4348:	movw	r0, #1
    434c:	str	r0, [sp, #4]
    4350:	ldr	r0, [sp, #4]
    4354:	cmp	r0, #12
    4358:	bgt	4390 <getday_nonleapyear+0xdc>
    435c:	ldr	r0, [fp, #-4]
    4360:	ldr	r1, [sp, #4]
    4364:	add	r2, sp, #8
    4368:	add	r1, r2, r1, lsl #2
    436c:	ldr	r1, [r1]
    4370:	cmp	r0, r1
    4374:	bge	437c <getday_nonleapyear+0xc8>
    4378:	b	4390 <getday_nonleapyear+0xdc>
    437c:	b	4380 <getday_nonleapyear+0xcc>
    4380:	ldr	r0, [sp, #4]
    4384:	add	r0, r0, #1
    4388:	str	r0, [sp, #4]
    438c:	b	4350 <getday_nonleapyear+0x9c>
    4390:	ldr	r0, [sp, #4]
    4394:	ldr	r1, [fp, #-12]
    4398:	str	r0, [r1]
    439c:	ldr	r0, [fp, #-4]
    43a0:	add	r0, r0, #1
    43a4:	ldr	r1, [sp, #4]
    43a8:	sub	r1, r1, #1
    43ac:	add	r2, sp, #8
    43b0:	add	r1, r2, r1, lsl #2
    43b4:	ldr	r1, [r1]
    43b8:	sub	r0, r0, r1
    43bc:	ldr	r1, [fp, #-8]
    43c0:	str	r0, [r1]
    43c4:	mov	sp, fp
    43c8:	pop	{fp, pc}

000043cc <parse_integer>:
    43cc:	sub	sp, sp, #24
    43d0:	str	r0, [sp, #16]
    43d4:	str	r1, [sp, #12]
    43d8:	str	r2, [sp, #8]
    43dc:	str	r3, [sp, #4]
    43e0:	ldr	r0, [sp, #8]
    43e4:	cmp	r0, #0
    43e8:	beq	444c <parse_integer+0x80>
    43ec:	b	43f0 <parse_integer+0x24>
    43f0:	ldr	r0, [sp, #12]
    43f4:	cmp	r0, #1
    43f8:	movw	r0, #0
    43fc:	str	r0, [sp]
    4400:	ble	441c <parse_integer+0x50>
    4404:	ldr	r0, [sp, #16]
    4408:	ldrb	r0, [r0]
    440c:	cmp	r0, #32
    4410:	movw	r0, #0
    4414:	moveq	r0, #1
    4418:	str	r0, [sp]
    441c:	ldr	r0, [sp]
    4420:	tst	r0, #1
    4424:	beq	4448 <parse_integer+0x7c>
    4428:	ldr	r0, [sp, #16]
    442c:	add	r0, r0, #1
    4430:	str	r0, [sp, #16]
    4434:	ldr	r0, [sp, #12]
    4438:	mvn	r1, #0
    443c:	add	r0, r0, r1
    4440:	str	r0, [sp, #12]
    4444:	b	43f0 <parse_integer+0x24>
    4448:	b	444c <parse_integer+0x80>
    444c:	ldr	r0, [sp, #4]
    4450:	movw	r1, #0
    4454:	str	r1, [r0]
    4458:	ldr	r0, [sp, #12]
    445c:	cmp	r0, #0
    4460:	ble	44d8 <parse_integer+0x10c>
    4464:	ldr	r0, [sp, #16]
    4468:	ldrb	r0, [r0]
    446c:	cmp	r0, #48	; 0x30
    4470:	blt	4484 <parse_integer+0xb8>
    4474:	ldr	r0, [sp, #16]
    4478:	ldrb	r0, [r0]
    447c:	cmp	r0, #57	; 0x39
    4480:	ble	4490 <parse_integer+0xc4>
    4484:	mvn	r0, #0
    4488:	str	r0, [sp, #20]
    448c:	b	44e0 <parse_integer+0x114>
    4490:	ldr	r0, [sp, #4]
    4494:	ldr	r0, [r0]
    4498:	movw	r1, #10
    449c:	mul	r0, r0, r1
    44a0:	ldr	r1, [sp, #16]
    44a4:	ldrb	r1, [r1]
    44a8:	sub	r1, r1, #48	; 0x30
    44ac:	add	r0, r0, r1
    44b0:	ldr	r1, [sp, #4]
    44b4:	str	r0, [r1]
    44b8:	ldr	r0, [sp, #16]
    44bc:	add	r0, r0, #1
    44c0:	str	r0, [sp, #16]
    44c4:	ldr	r0, [sp, #12]
    44c8:	mvn	r1, #0
    44cc:	add	r0, r0, r1
    44d0:	str	r0, [sp, #12]
    44d4:	b	4458 <parse_integer+0x8c>
    44d8:	movw	r0, #0
    44dc:	str	r0, [sp, #20]
    44e0:	ldr	r0, [sp, #20]
    44e4:	add	sp, sp, #24
    44e8:	bx	lr
