
../compcert-repos/dvidelabs-flatcc-3b39ef7/samples/reflection/CMakeFiles/bfbs2json.dir/bfbs2json.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <print_type>:
       0:	push	{fp, lr}
       4:	mov	fp, sp
       8:	sub	sp, sp, #24
       c:	str	r0, [fp, #-4]
      10:	movw	r0, #1
      14:	str	r0, [fp, #-8]
      18:	movw	r0, #0
      1c:	movt	r0, #0
      20:	bl	0 <printf>
      24:	ldr	r1, [fp, #-4]
      28:	str	r0, [sp, #12]
      2c:	mov	r0, r1
      30:	bl	140 <reflection_Type_base_type_is_present>
      34:	cmp	r0, #0
      38:	beq	84 <print_type+0x84>
      3c:	ldr	r0, [fp, #-8]
      40:	cmp	r0, #0
      44:	bne	54 <print_type+0x54>
      48:	movw	r0, #0
      4c:	movt	r0, #0
      50:	bl	0 <printf>
      54:	ldr	r0, [fp, #-4]
      58:	bl	394 <reflection_Type_base_type>
      5c:	sxtb	r0, r0
      60:	bl	200 <reflection_BaseType_name>
      64:	movw	r1, #0
      68:	movt	r1, #0
      6c:	str	r0, [sp, #8]
      70:	mov	r0, r1
      74:	ldr	r1, [sp, #8]
      78:	bl	0 <printf>
      7c:	movw	r1, #0
      80:	str	r1, [fp, #-8]
      84:	ldr	r0, [fp, #-4]
      88:	bl	47c <reflection_Type_element_is_present>
      8c:	cmp	r0, #0
      90:	beq	dc <print_type+0xdc>
      94:	ldr	r0, [fp, #-8]
      98:	cmp	r0, #0
      9c:	bne	ac <print_type+0xac>
      a0:	movw	r0, #0
      a4:	movt	r0, #0
      a8:	bl	0 <printf>
      ac:	ldr	r0, [fp, #-4]
      b0:	bl	394 <reflection_Type_base_type>
      b4:	sxtb	r0, r0
      b8:	bl	200 <reflection_BaseType_name>
      bc:	movw	r1, #0
      c0:	movt	r1, #0
      c4:	str	r0, [sp, #4]
      c8:	mov	r0, r1
      cc:	ldr	r1, [sp, #4]
      d0:	bl	0 <printf>
      d4:	movw	r1, #0
      d8:	str	r1, [fp, #-8]
      dc:	ldr	r0, [fp, #-4]
      e0:	bl	53c <reflection_Type_index_is_present>
      e4:	cmp	r0, #0
      e8:	beq	12c <print_type+0x12c>
      ec:	ldr	r0, [fp, #-8]
      f0:	cmp	r0, #0
      f4:	bne	104 <print_type+0x104>
      f8:	movw	r0, #0
      fc:	movt	r0, #0
     100:	bl	0 <printf>
     104:	ldr	r0, [fp, #-4]
     108:	bl	5fc <reflection_Type_index>
     10c:	movw	r1, #0
     110:	movt	r1, #0
     114:	str	r0, [sp]
     118:	mov	r0, r1
     11c:	ldr	r1, [sp]
     120:	bl	0 <printf>
     124:	movw	r1, #0
     128:	str	r1, [fp, #-8]
     12c:	movw	r0, #0
     130:	movt	r0, #0
     134:	bl	0 <printf>
     138:	mov	sp, fp
     13c:	pop	{fp, pc}

00000140 <reflection_Type_base_type_is_present>:
     140:	push	{fp, lr}
     144:	mov	fp, sp
     148:	sub	sp, sp, #16
     14c:	str	r0, [fp, #-4]
     150:	movw	r0, #0
     154:	strh	r0, [fp, #-6]
     158:	ldr	r0, [fp, #-4]
     15c:	movw	r1, #0
     160:	cmp	r0, r1
     164:	beq	170 <reflection_Type_base_type_is_present+0x30>
     168:	b	16c <reflection_Type_base_type_is_present+0x2c>
     16c:	b	190 <reflection_Type_base_type_is_present+0x50>
     170:	movw	r0, #0
     174:	movt	r0, #0
     178:	movw	r1, #0
     17c:	movt	r1, #0
     180:	movw	r2, #147	; 0x93
     184:	movw	r3, #0
     188:	movt	r3, #0
     18c:	bl	0 <__assert_fail>
     190:	mov	r0, #0
     194:	strh	r0, [sp, #8]
     198:	ldr	r0, [fp, #-4]
     19c:	str	r0, [sp]
     1a0:	bl	36cc <__flatbuffers_soffset_read_from_pe>
     1a4:	ldr	r1, [sp]
     1a8:	sub	r0, r1, r0
     1ac:	str	r0, [sp, #4]
     1b0:	ldr	r0, [sp, #4]
     1b4:	bl	36f0 <__flatbuffers_voffset_read_from_pe>
     1b8:	ldrh	r1, [sp, #8]
     1bc:	add	r1, r1, #3
     1c0:	lsl	r1, r1, #1
     1c4:	cmp	r0, r1
     1c8:	bcc	1e4 <reflection_Type_base_type_is_present+0xa4>
     1cc:	ldr	r0, [sp, #4]
     1d0:	ldrh	r1, [sp, #8]
     1d4:	add	r0, r0, r1, lsl #1
     1d8:	add	r0, r0, #4
     1dc:	bl	36f0 <__flatbuffers_voffset_read_from_pe>
     1e0:	strh	r0, [fp, #-6]
     1e4:	ldrh	r0, [fp, #-6]
     1e8:	cmp	r0, #0
     1ec:	movw	r0, #0
     1f0:	movne	r0, #1
     1f4:	and	r0, r0, #1
     1f8:	mov	sp, fp
     1fc:	pop	{fp, pc}

00000200 <reflection_BaseType_name>:
     200:	sub	sp, sp, #12
     204:	strb	r0, [sp, #7]
     208:	ldrsb	r0, [sp, #7]
     20c:	cmp	r0, #16
     210:	str	r0, [sp]
     214:	bhi	37c <reflection_BaseType_name+0x17c>
     218:	add	r0, pc, #8
     21c:	ldr	r1, [sp]
     220:	ldr	r0, [r0, r1, lsl #2]
     224:	mov	pc, r0
     228:	.word	0x0000026c
     22c:	.word	0x0000027c
     230:	.word	0x0000028c
     234:	.word	0x0000029c
     238:	.word	0x000002ac
     23c:	.word	0x000002bc
     240:	.word	0x000002cc
     244:	.word	0x000002dc
     248:	.word	0x000002ec
     24c:	.word	0x000002fc
     250:	.word	0x0000030c
     254:	.word	0x0000031c
     258:	.word	0x0000032c
     25c:	.word	0x0000033c
     260:	.word	0x0000034c
     264:	.word	0x0000035c
     268:	.word	0x0000036c
     26c:	movw	r0, #0
     270:	movt	r0, #0
     274:	str	r0, [sp, #8]
     278:	b	388 <reflection_BaseType_name+0x188>
     27c:	movw	r0, #0
     280:	movt	r0, #0
     284:	str	r0, [sp, #8]
     288:	b	388 <reflection_BaseType_name+0x188>
     28c:	movw	r0, #0
     290:	movt	r0, #0
     294:	str	r0, [sp, #8]
     298:	b	388 <reflection_BaseType_name+0x188>
     29c:	movw	r0, #0
     2a0:	movt	r0, #0
     2a4:	str	r0, [sp, #8]
     2a8:	b	388 <reflection_BaseType_name+0x188>
     2ac:	movw	r0, #0
     2b0:	movt	r0, #0
     2b4:	str	r0, [sp, #8]
     2b8:	b	388 <reflection_BaseType_name+0x188>
     2bc:	movw	r0, #0
     2c0:	movt	r0, #0
     2c4:	str	r0, [sp, #8]
     2c8:	b	388 <reflection_BaseType_name+0x188>
     2cc:	movw	r0, #0
     2d0:	movt	r0, #0
     2d4:	str	r0, [sp, #8]
     2d8:	b	388 <reflection_BaseType_name+0x188>
     2dc:	movw	r0, #0
     2e0:	movt	r0, #0
     2e4:	str	r0, [sp, #8]
     2e8:	b	388 <reflection_BaseType_name+0x188>
     2ec:	movw	r0, #0
     2f0:	movt	r0, #0
     2f4:	str	r0, [sp, #8]
     2f8:	b	388 <reflection_BaseType_name+0x188>
     2fc:	movw	r0, #0
     300:	movt	r0, #0
     304:	str	r0, [sp, #8]
     308:	b	388 <reflection_BaseType_name+0x188>
     30c:	movw	r0, #0
     310:	movt	r0, #0
     314:	str	r0, [sp, #8]
     318:	b	388 <reflection_BaseType_name+0x188>
     31c:	movw	r0, #0
     320:	movt	r0, #0
     324:	str	r0, [sp, #8]
     328:	b	388 <reflection_BaseType_name+0x188>
     32c:	movw	r0, #0
     330:	movt	r0, #0
     334:	str	r0, [sp, #8]
     338:	b	388 <reflection_BaseType_name+0x188>
     33c:	movw	r0, #0
     340:	movt	r0, #0
     344:	str	r0, [sp, #8]
     348:	b	388 <reflection_BaseType_name+0x188>
     34c:	movw	r0, #0
     350:	movt	r0, #0
     354:	str	r0, [sp, #8]
     358:	b	388 <reflection_BaseType_name+0x188>
     35c:	movw	r0, #0
     360:	movt	r0, #0
     364:	str	r0, [sp, #8]
     368:	b	388 <reflection_BaseType_name+0x188>
     36c:	movw	r0, #0
     370:	movt	r0, #0
     374:	str	r0, [sp, #8]
     378:	b	388 <reflection_BaseType_name+0x188>
     37c:	movw	r0, #0
     380:	movt	r0, #0
     384:	str	r0, [sp, #8]
     388:	ldr	r0, [sp, #8]
     38c:	add	sp, sp, #12
     390:	bx	lr

00000394 <reflection_Type_base_type>:
     394:	push	{fp, lr}
     398:	mov	fp, sp
     39c:	sub	sp, sp, #24
     3a0:	str	r0, [fp, #-4]
     3a4:	movw	r0, #0
     3a8:	strh	r0, [fp, #-6]
     3ac:	ldr	r0, [fp, #-4]
     3b0:	movw	r1, #0
     3b4:	cmp	r0, r1
     3b8:	beq	3c4 <reflection_Type_base_type+0x30>
     3bc:	b	3c0 <reflection_Type_base_type+0x2c>
     3c0:	b	3e4 <reflection_Type_base_type+0x50>
     3c4:	movw	r0, #0
     3c8:	movt	r0, #0
     3cc:	movw	r1, #0
     3d0:	movt	r1, #0
     3d4:	movw	r2, #147	; 0x93
     3d8:	movw	r3, #0
     3dc:	movt	r3, #0
     3e0:	bl	0 <__assert_fail>
     3e4:	mov	r0, #0
     3e8:	strh	r0, [fp, #-8]
     3ec:	ldr	r0, [fp, #-4]
     3f0:	str	r0, [sp, #8]
     3f4:	bl	36cc <__flatbuffers_soffset_read_from_pe>
     3f8:	ldr	r1, [sp, #8]
     3fc:	sub	r0, r1, r0
     400:	str	r0, [sp, #12]
     404:	ldr	r0, [sp, #12]
     408:	bl	36f0 <__flatbuffers_voffset_read_from_pe>
     40c:	ldrh	r1, [fp, #-8]
     410:	add	r1, r1, #3
     414:	lsl	r1, r1, #1
     418:	cmp	r0, r1
     41c:	bcc	438 <reflection_Type_base_type+0xa4>
     420:	ldr	r0, [sp, #12]
     424:	ldrh	r1, [fp, #-8]
     428:	add	r0, r0, r1, lsl #1
     42c:	add	r0, r0, #4
     430:	bl	36f0 <__flatbuffers_voffset_read_from_pe>
     434:	strh	r0, [fp, #-6]
     438:	ldrh	r0, [fp, #-6]
     43c:	cmp	r0, #0
     440:	beq	460 <reflection_Type_base_type+0xcc>
     444:	ldr	r0, [fp, #-4]
     448:	ldrh	r1, [fp, #-6]
     44c:	add	r0, r0, r1
     450:	bl	3740 <reflection_BaseType_read_from_pe>
     454:	sxtb	r0, r0
     458:	str	r0, [sp, #4]
     45c:	b	46c <reflection_Type_base_type+0xd8>
     460:	movw	r0, #0
     464:	str	r0, [sp, #4]
     468:	b	46c <reflection_Type_base_type+0xd8>
     46c:	ldr	r0, [sp, #4]
     470:	sxtb	r0, r0
     474:	mov	sp, fp
     478:	pop	{fp, pc}

0000047c <reflection_Type_element_is_present>:
     47c:	push	{fp, lr}
     480:	mov	fp, sp
     484:	sub	sp, sp, #16
     488:	str	r0, [fp, #-4]
     48c:	movw	r0, #0
     490:	strh	r0, [fp, #-6]
     494:	ldr	r0, [fp, #-4]
     498:	movw	r1, #0
     49c:	cmp	r0, r1
     4a0:	beq	4ac <reflection_Type_element_is_present+0x30>
     4a4:	b	4a8 <reflection_Type_element_is_present+0x2c>
     4a8:	b	4cc <reflection_Type_element_is_present+0x50>
     4ac:	movw	r0, #0
     4b0:	movt	r0, #0
     4b4:	movw	r1, #0
     4b8:	movt	r1, #0
     4bc:	movw	r2, #148	; 0x94
     4c0:	movw	r3, #0
     4c4:	movt	r3, #0
     4c8:	bl	0 <__assert_fail>
     4cc:	mov	r0, #1
     4d0:	strh	r0, [sp, #8]
     4d4:	ldr	r0, [fp, #-4]
     4d8:	str	r0, [sp]
     4dc:	bl	36cc <__flatbuffers_soffset_read_from_pe>
     4e0:	ldr	r1, [sp]
     4e4:	sub	r0, r1, r0
     4e8:	str	r0, [sp, #4]
     4ec:	ldr	r0, [sp, #4]
     4f0:	bl	36f0 <__flatbuffers_voffset_read_from_pe>
     4f4:	ldrh	r1, [sp, #8]
     4f8:	add	r1, r1, #3
     4fc:	lsl	r1, r1, #1
     500:	cmp	r0, r1
     504:	bcc	520 <reflection_Type_element_is_present+0xa4>
     508:	ldr	r0, [sp, #4]
     50c:	ldrh	r1, [sp, #8]
     510:	add	r0, r0, r1, lsl #1
     514:	add	r0, r0, #4
     518:	bl	36f0 <__flatbuffers_voffset_read_from_pe>
     51c:	strh	r0, [fp, #-6]
     520:	ldrh	r0, [fp, #-6]
     524:	cmp	r0, #0
     528:	movw	r0, #0
     52c:	movne	r0, #1
     530:	and	r0, r0, #1
     534:	mov	sp, fp
     538:	pop	{fp, pc}

0000053c <reflection_Type_index_is_present>:
     53c:	push	{fp, lr}
     540:	mov	fp, sp
     544:	sub	sp, sp, #16
     548:	str	r0, [fp, #-4]
     54c:	movw	r0, #0
     550:	strh	r0, [fp, #-6]
     554:	ldr	r0, [fp, #-4]
     558:	movw	r1, #0
     55c:	cmp	r0, r1
     560:	beq	56c <reflection_Type_index_is_present+0x30>
     564:	b	568 <reflection_Type_index_is_present+0x2c>
     568:	b	58c <reflection_Type_index_is_present+0x50>
     56c:	movw	r0, #0
     570:	movt	r0, #0
     574:	movw	r1, #0
     578:	movt	r1, #0
     57c:	movw	r2, #149	; 0x95
     580:	movw	r3, #0
     584:	movt	r3, #0
     588:	bl	0 <__assert_fail>
     58c:	mov	r0, #2
     590:	strh	r0, [sp, #8]
     594:	ldr	r0, [fp, #-4]
     598:	str	r0, [sp]
     59c:	bl	36cc <__flatbuffers_soffset_read_from_pe>
     5a0:	ldr	r1, [sp]
     5a4:	sub	r0, r1, r0
     5a8:	str	r0, [sp, #4]
     5ac:	ldr	r0, [sp, #4]
     5b0:	bl	36f0 <__flatbuffers_voffset_read_from_pe>
     5b4:	ldrh	r1, [sp, #8]
     5b8:	add	r1, r1, #3
     5bc:	lsl	r1, r1, #1
     5c0:	cmp	r0, r1
     5c4:	bcc	5e0 <reflection_Type_index_is_present+0xa4>
     5c8:	ldr	r0, [sp, #4]
     5cc:	ldrh	r1, [sp, #8]
     5d0:	add	r0, r0, r1, lsl #1
     5d4:	add	r0, r0, #4
     5d8:	bl	36f0 <__flatbuffers_voffset_read_from_pe>
     5dc:	strh	r0, [fp, #-6]
     5e0:	ldrh	r0, [fp, #-6]
     5e4:	cmp	r0, #0
     5e8:	movw	r0, #0
     5ec:	movne	r0, #1
     5f0:	and	r0, r0, #1
     5f4:	mov	sp, fp
     5f8:	pop	{fp, pc}

000005fc <reflection_Type_index>:
     5fc:	push	{fp, lr}
     600:	mov	fp, sp
     604:	sub	sp, sp, #24
     608:	str	r0, [fp, #-4]
     60c:	movw	r0, #0
     610:	strh	r0, [fp, #-6]
     614:	ldr	r0, [fp, #-4]
     618:	movw	r1, #0
     61c:	cmp	r0, r1
     620:	beq	62c <reflection_Type_index+0x30>
     624:	b	628 <reflection_Type_index+0x2c>
     628:	b	64c <reflection_Type_index+0x50>
     62c:	movw	r0, #0
     630:	movt	r0, #0
     634:	movw	r1, #0
     638:	movt	r1, #0
     63c:	movw	r2, #149	; 0x95
     640:	movw	r3, #0
     644:	movt	r3, #0
     648:	bl	0 <__assert_fail>
     64c:	mov	r0, #2
     650:	strh	r0, [fp, #-8]
     654:	ldr	r0, [fp, #-4]
     658:	str	r0, [sp, #8]
     65c:	bl	36cc <__flatbuffers_soffset_read_from_pe>
     660:	ldr	r1, [sp, #8]
     664:	sub	r0, r1, r0
     668:	str	r0, [sp, #12]
     66c:	ldr	r0, [sp, #12]
     670:	bl	36f0 <__flatbuffers_voffset_read_from_pe>
     674:	ldrh	r1, [fp, #-8]
     678:	add	r1, r1, #3
     67c:	lsl	r1, r1, #1
     680:	cmp	r0, r1
     684:	bcc	6a0 <reflection_Type_index+0xa4>
     688:	ldr	r0, [sp, #12]
     68c:	ldrh	r1, [fp, #-8]
     690:	add	r0, r0, r1, lsl #1
     694:	add	r0, r0, #4
     698:	bl	36f0 <__flatbuffers_voffset_read_from_pe>
     69c:	strh	r0, [fp, #-6]
     6a0:	ldrh	r0, [fp, #-6]
     6a4:	cmp	r0, #0
     6a8:	beq	6c4 <reflection_Type_index+0xc8>
     6ac:	ldr	r0, [fp, #-4]
     6b0:	ldrh	r1, [fp, #-6]
     6b4:	add	r0, r0, r1
     6b8:	bl	377c <flatbuffers_int32_read_from_pe>
     6bc:	str	r0, [sp, #4]
     6c0:	b	6d0 <reflection_Type_index+0xd4>
     6c4:	mvn	r0, #0
     6c8:	str	r0, [sp, #4]
     6cc:	b	6d0 <reflection_Type_index+0xd4>
     6d0:	ldr	r0, [sp, #4]
     6d4:	mov	sp, fp
     6d8:	pop	{fp, pc}

000006dc <print_object>:
     6dc:	push	{fp, lr}
     6e0:	mov	fp, sp
     6e4:	sub	sp, sp, #64	; 0x40
     6e8:	str	r0, [fp, #-4]
     6ec:	ldr	r0, [fp, #-4]
     6f0:	bl	9e0 <reflection_Object_fields>
     6f4:	str	r0, [fp, #-8]
     6f8:	ldr	r0, [fp, #-4]
     6fc:	bl	ae8 <reflection_Object_name>
     700:	movw	r1, #0
     704:	movt	r1, #0
     708:	str	r0, [fp, #-20]	; 0xffffffec
     70c:	mov	r0, r1
     710:	ldr	r1, [fp, #-20]	; 0xffffffec
     714:	bl	0 <printf>
     718:	movw	r1, #0
     71c:	movt	r1, #0
     720:	str	r0, [fp, #-24]	; 0xffffffe8
     724:	mov	r0, r1
     728:	bl	0 <printf>
     72c:	movw	r1, #0
     730:	str	r1, [fp, #-16]
     734:	ldr	r0, [fp, #-16]
     738:	ldr	r1, [fp, #-8]
     73c:	str	r0, [fp, #-28]	; 0xffffffe4
     740:	mov	r0, r1
     744:	bl	bf0 <reflection_Field_vec_len>
     748:	ldr	r1, [fp, #-28]	; 0xffffffe4
     74c:	cmp	r1, r0
     750:	bcs	900 <print_object+0x224>
     754:	ldr	r0, [fp, #-16]
     758:	cmp	r0, #0
     75c:	bls	76c <print_object+0x90>
     760:	movw	r0, #0
     764:	movt	r0, #0
     768:	bl	0 <printf>
     76c:	ldr	r0, [fp, #-8]
     770:	ldr	r1, [fp, #-16]
     774:	bl	c40 <reflection_Field_vec_at>
     778:	str	r0, [fp, #-12]
     77c:	ldr	r0, [fp, #-12]
     780:	bl	cc4 <reflection_Field_name>
     784:	movw	r1, #0
     788:	movt	r1, #0
     78c:	str	r0, [sp, #32]
     790:	mov	r0, r1
     794:	ldr	r1, [sp, #32]
     798:	bl	0 <printf>
     79c:	ldr	r1, [fp, #-12]
     7a0:	str	r0, [sp, #28]
     7a4:	mov	r0, r1
     7a8:	bl	dcc <reflection_Field_type>
     7ac:	bl	0 <print_type>
     7b0:	ldr	r0, [fp, #-12]
     7b4:	bl	ed0 <reflection_Field_id_is_present>
     7b8:	cmp	r0, #0
     7bc:	beq	7d8 <print_object+0xfc>
     7c0:	ldr	r0, [fp, #-12]
     7c4:	bl	f90 <reflection_Field_id>
     7c8:	uxth	r1, r0
     7cc:	movw	r0, #0
     7d0:	movt	r0, #0
     7d4:	bl	0 <printf>
     7d8:	ldr	r0, [fp, #-12]
     7dc:	bl	1078 <reflection_Field_default_integer_is_present>
     7e0:	cmp	r0, #0
     7e4:	beq	80c <print_object+0x130>
     7e8:	ldr	r0, [fp, #-12]
     7ec:	bl	1138 <reflection_Field_default_integer>
     7f0:	movw	r2, #0
     7f4:	movt	r2, #0
     7f8:	str	r0, [sp, #24]
     7fc:	mov	r0, r2
     800:	ldr	r2, [sp, #24]
     804:	mov	r3, r1
     808:	bl	0 <printf>
     80c:	ldr	r0, [fp, #-12]
     810:	bl	1234 <reflection_Field_default_real_is_present>
     814:	cmp	r0, #0
     818:	beq	834 <print_object+0x158>
     81c:	ldr	r0, [fp, #-12]
     820:	bl	12f8 <reflection_Field_default_real>
     824:	movw	r0, #0
     828:	movt	r0, #0
     82c:	vmov	r2, r3, d0
     830:	bl	0 <printf>
     834:	ldr	r0, [fp, #-12]
     838:	bl	13e8 <reflection_Field_required_is_present>
     83c:	cmp	r0, #0
     840:	beq	88c <print_object+0x1b0>
     844:	ldr	r0, [fp, #-12]
     848:	bl	14a8 <reflection_Field_required>
     84c:	and	r0, r0, #255	; 0xff
     850:	cmp	r0, #0
     854:	movw	r0, #0
     858:	movne	r0, #1
     85c:	tst	r0, #1
     860:	movw	r0, #0
     864:	movt	r0, #0
     868:	movw	r1, #0
     86c:	movt	r1, #0
     870:	movne	r0, r1
     874:	movw	r1, #0
     878:	movt	r1, #0
     87c:	str	r0, [sp, #20]
     880:	mov	r0, r1
     884:	ldr	r1, [sp, #20]
     888:	bl	0 <printf>
     88c:	ldr	r0, [fp, #-12]
     890:	bl	1590 <reflection_Field_key_is_present>
     894:	cmp	r0, #0
     898:	beq	8e4 <print_object+0x208>
     89c:	ldr	r0, [fp, #-12]
     8a0:	bl	1650 <reflection_Field_key>
     8a4:	and	r0, r0, #255	; 0xff
     8a8:	cmp	r0, #0
     8ac:	movw	r0, #0
     8b0:	movne	r0, #1
     8b4:	tst	r0, #1
     8b8:	movw	r0, #0
     8bc:	movt	r0, #0
     8c0:	movw	r1, #0
     8c4:	movt	r1, #0
     8c8:	movne	r0, r1
     8cc:	movw	r1, #0
     8d0:	movt	r1, #0
     8d4:	str	r0, [sp, #16]
     8d8:	mov	r0, r1
     8dc:	ldr	r1, [sp, #16]
     8e0:	bl	0 <printf>
     8e4:	movw	r0, #0
     8e8:	movt	r0, #0
     8ec:	bl	0 <printf>
     8f0:	ldr	r0, [fp, #-16]
     8f4:	add	r0, r0, #1
     8f8:	str	r0, [fp, #-16]
     8fc:	b	734 <print_object+0x58>
     900:	movw	r0, #0
     904:	movt	r0, #0
     908:	bl	0 <printf>
     90c:	ldr	r1, [fp, #-4]
     910:	str	r0, [sp, #12]
     914:	mov	r0, r1
     918:	bl	1738 <reflection_Object_is_struct_is_present>
     91c:	cmp	r0, #0
     920:	beq	96c <print_object+0x290>
     924:	ldr	r0, [fp, #-4]
     928:	bl	17f8 <reflection_Object_is_struct>
     92c:	and	r0, r0, #255	; 0xff
     930:	cmp	r0, #0
     934:	movw	r0, #0
     938:	movne	r0, #1
     93c:	tst	r0, #1
     940:	movw	r0, #0
     944:	movt	r0, #0
     948:	movw	r1, #0
     94c:	movt	r1, #0
     950:	movne	r0, r1
     954:	movw	r1, #0
     958:	movt	r1, #0
     95c:	str	r0, [sp, #8]
     960:	mov	r0, r1
     964:	ldr	r1, [sp, #8]
     968:	bl	0 <printf>
     96c:	ldr	r0, [fp, #-4]
     970:	bl	18e0 <reflection_Object_minalign_is_present>
     974:	cmp	r0, #0
     978:	beq	99c <print_object+0x2c0>
     97c:	ldr	r0, [fp, #-4]
     980:	bl	19a0 <reflection_Object_minalign>
     984:	movw	r1, #0
     988:	movt	r1, #0
     98c:	str	r0, [sp, #4]
     990:	mov	r0, r1
     994:	ldr	r1, [sp, #4]
     998:	bl	0 <printf>
     99c:	ldr	r0, [fp, #-4]
     9a0:	bl	1a80 <reflection_Object_bytesize_is_present>
     9a4:	cmp	r0, #0
     9a8:	beq	9cc <print_object+0x2f0>
     9ac:	ldr	r0, [fp, #-4]
     9b0:	bl	1b40 <reflection_Object_bytesize>
     9b4:	movw	r1, #0
     9b8:	movt	r1, #0
     9bc:	str	r0, [sp]
     9c0:	mov	r0, r1
     9c4:	ldr	r1, [sp]
     9c8:	bl	0 <printf>
     9cc:	movw	r0, #0
     9d0:	movt	r0, #0
     9d4:	bl	0 <printf>
     9d8:	mov	sp, fp
     9dc:	pop	{fp, pc}

000009e0 <reflection_Object_fields>:
     9e0:	push	{fp, lr}
     9e4:	mov	fp, sp
     9e8:	sub	sp, sp, #24
     9ec:	str	r0, [fp, #-4]
     9f0:	movw	r0, #0
     9f4:	strh	r0, [fp, #-10]
     9f8:	ldr	r0, [fp, #-4]
     9fc:	movw	r1, #0
     a00:	cmp	r0, r1
     a04:	beq	a10 <reflection_Object_fields+0x30>
     a08:	b	a0c <reflection_Object_fields+0x2c>
     a0c:	b	a30 <reflection_Object_fields+0x50>
     a10:	movw	r0, #0
     a14:	movt	r0, #0
     a18:	movw	r1, #0
     a1c:	movt	r1, #0
     a20:	movw	r2, #224	; 0xe0
     a24:	movw	r3, #0
     a28:	movt	r3, #0
     a2c:	bl	0 <__assert_fail>
     a30:	mov	r0, #1
     a34:	strh	r0, [sp, #12]
     a38:	ldr	r0, [fp, #-4]
     a3c:	str	r0, [sp, #4]
     a40:	bl	36cc <__flatbuffers_soffset_read_from_pe>
     a44:	ldr	r1, [sp, #4]
     a48:	sub	r0, r1, r0
     a4c:	str	r0, [sp, #8]
     a50:	ldr	r0, [sp, #8]
     a54:	bl	36f0 <__flatbuffers_voffset_read_from_pe>
     a58:	ldrh	r1, [sp, #12]
     a5c:	add	r1, r1, #3
     a60:	lsl	r1, r1, #1
     a64:	cmp	r0, r1
     a68:	bcc	a84 <reflection_Object_fields+0xa4>
     a6c:	ldr	r0, [sp, #8]
     a70:	ldrh	r1, [sp, #12]
     a74:	add	r0, r0, r1, lsl #1
     a78:	add	r0, r0, #4
     a7c:	bl	36f0 <__flatbuffers_voffset_read_from_pe>
     a80:	strh	r0, [fp, #-10]
     a84:	ldrsh	r0, [fp, #-10]
     a88:	cmp	r0, #0
     a8c:	beq	ac8 <reflection_Object_fields+0xe8>
     a90:	ldr	r0, [fp, #-4]
     a94:	ldrh	r1, [fp, #-10]
     a98:	add	r0, r0, r1
     a9c:	str	r0, [fp, #-8]
     aa0:	ldr	r0, [fp, #-8]
     aa4:	add	r0, r0, #4
     aa8:	ldr	r1, [fp, #-8]
     aac:	str	r0, [sp]
     ab0:	mov	r0, r1
     ab4:	bl	37b4 <__flatbuffers_uoffset_read_from_pe>
     ab8:	ldr	r1, [sp]
     abc:	add	r0, r1, r0
     ac0:	mov	sp, fp
     ac4:	pop	{fp, pc}
     ac8:	movw	r0, #0
     acc:	movt	r0, #0
     ad0:	movw	r1, #0
     ad4:	movt	r1, #0
     ad8:	movw	r2, #224	; 0xe0
     adc:	movw	r3, #0
     ae0:	movt	r3, #0
     ae4:	bl	0 <__assert_fail>

00000ae8 <reflection_Object_name>:
     ae8:	push	{fp, lr}
     aec:	mov	fp, sp
     af0:	sub	sp, sp, #24
     af4:	str	r0, [fp, #-4]
     af8:	movw	r0, #0
     afc:	strh	r0, [fp, #-10]
     b00:	ldr	r0, [fp, #-4]
     b04:	movw	r1, #0
     b08:	cmp	r0, r1
     b0c:	beq	b18 <reflection_Object_name+0x30>
     b10:	b	b14 <reflection_Object_name+0x2c>
     b14:	b	b38 <reflection_Object_name+0x50>
     b18:	movw	r0, #0
     b1c:	movt	r0, #0
     b20:	movw	r1, #0
     b24:	movt	r1, #0
     b28:	movw	r2, #218	; 0xda
     b2c:	movw	r3, #0
     b30:	movt	r3, #0
     b34:	bl	0 <__assert_fail>
     b38:	mov	r0, #0
     b3c:	strh	r0, [sp, #12]
     b40:	ldr	r0, [fp, #-4]
     b44:	str	r0, [sp, #4]
     b48:	bl	36cc <__flatbuffers_soffset_read_from_pe>
     b4c:	ldr	r1, [sp, #4]
     b50:	sub	r0, r1, r0
     b54:	str	r0, [sp, #8]
     b58:	ldr	r0, [sp, #8]
     b5c:	bl	36f0 <__flatbuffers_voffset_read_from_pe>
     b60:	ldrh	r1, [sp, #12]
     b64:	add	r1, r1, #3
     b68:	lsl	r1, r1, #1
     b6c:	cmp	r0, r1
     b70:	bcc	b8c <reflection_Object_name+0xa4>
     b74:	ldr	r0, [sp, #8]
     b78:	ldrh	r1, [sp, #12]
     b7c:	add	r0, r0, r1, lsl #1
     b80:	add	r0, r0, #4
     b84:	bl	36f0 <__flatbuffers_voffset_read_from_pe>
     b88:	strh	r0, [fp, #-10]
     b8c:	ldrsh	r0, [fp, #-10]
     b90:	cmp	r0, #0
     b94:	beq	bd0 <reflection_Object_name+0xe8>
     b98:	ldr	r0, [fp, #-4]
     b9c:	ldrh	r1, [fp, #-10]
     ba0:	add	r0, r0, r1
     ba4:	str	r0, [fp, #-8]
     ba8:	ldr	r0, [fp, #-8]
     bac:	add	r0, r0, #4
     bb0:	ldr	r1, [fp, #-8]
     bb4:	str	r0, [sp]
     bb8:	mov	r0, r1
     bbc:	bl	37b4 <__flatbuffers_uoffset_read_from_pe>
     bc0:	ldr	r1, [sp]
     bc4:	add	r0, r1, r0
     bc8:	mov	sp, fp
     bcc:	pop	{fp, pc}
     bd0:	movw	r0, #0
     bd4:	movt	r0, #0
     bd8:	movw	r1, #0
     bdc:	movt	r1, #0
     be0:	movw	r2, #218	; 0xda
     be4:	movw	r3, #0
     be8:	movt	r3, #0
     bec:	bl	0 <__assert_fail>

00000bf0 <reflection_Field_vec_len>:
     bf0:	push	{fp, lr}
     bf4:	mov	fp, sp
     bf8:	sub	sp, sp, #8
     bfc:	str	r0, [sp, #4]
     c00:	ldr	r0, [sp, #4]
     c04:	movw	r1, #0
     c08:	cmp	r0, r1
     c0c:	beq	c28 <reflection_Field_vec_len+0x38>
     c10:	ldr	r0, [sp, #4]
     c14:	mvn	r1, #3
     c18:	add	r0, r0, r1
     c1c:	bl	37b4 <__flatbuffers_uoffset_read_from_pe>
     c20:	str	r0, [sp]
     c24:	b	c34 <reflection_Field_vec_len+0x44>
     c28:	movw	r0, #0
     c2c:	str	r0, [sp]
     c30:	b	c34 <reflection_Field_vec_len+0x44>
     c34:	ldr	r0, [sp]
     c38:	mov	sp, fp
     c3c:	pop	{fp, pc}

00000c40 <reflection_Field_vec_at>:
     c40:	push	{fp, lr}
     c44:	mov	fp, sp
     c48:	sub	sp, sp, #16
     c4c:	str	r0, [fp, #-4]
     c50:	str	r1, [sp, #8]
     c54:	ldr	r0, [fp, #-4]
     c58:	ldr	r1, [sp, #8]
     c5c:	add	r0, r0, r1, lsl #2
     c60:	str	r0, [sp, #4]
     c64:	ldr	r0, [fp, #-4]
     c68:	bl	37ec <flatbuffers_vec_len>
     c6c:	ldr	r1, [sp, #8]
     c70:	cmp	r0, r1
     c74:	bls	c80 <reflection_Field_vec_at+0x40>
     c78:	b	c7c <reflection_Field_vec_at+0x3c>
     c7c:	b	ca0 <reflection_Field_vec_at+0x60>
     c80:	movw	r0, #0
     c84:	movt	r0, #0
     c88:	movw	r1, #0
     c8c:	movt	r1, #0
     c90:	movw	r2, #192	; 0xc0
     c94:	movw	r3, #0
     c98:	movt	r3, #0
     c9c:	bl	0 <__assert_fail>
     ca0:	ldr	r0, [sp, #4]
     ca4:	ldr	r1, [sp, #4]
     ca8:	str	r0, [sp]
     cac:	mov	r0, r1
     cb0:	bl	37b4 <__flatbuffers_uoffset_read_from_pe>
     cb4:	ldr	r1, [sp]
     cb8:	add	r0, r1, r0
     cbc:	mov	sp, fp
     cc0:	pop	{fp, pc}

00000cc4 <reflection_Field_name>:
     cc4:	push	{fp, lr}
     cc8:	mov	fp, sp
     ccc:	sub	sp, sp, #24
     cd0:	str	r0, [fp, #-4]
     cd4:	movw	r0, #0
     cd8:	strh	r0, [fp, #-10]
     cdc:	ldr	r0, [fp, #-4]
     ce0:	movw	r1, #0
     ce4:	cmp	r0, r1
     ce8:	beq	cf4 <reflection_Field_name+0x30>
     cec:	b	cf0 <reflection_Field_name+0x2c>
     cf0:	b	d14 <reflection_Field_name+0x50>
     cf4:	movw	r0, #0
     cf8:	movt	r0, #0
     cfc:	movw	r1, #0
     d00:	movt	r1, #0
     d04:	movw	r2, #195	; 0xc3
     d08:	movw	r3, #0
     d0c:	movt	r3, #0
     d10:	bl	0 <__assert_fail>
     d14:	mov	r0, #0
     d18:	strh	r0, [sp, #12]
     d1c:	ldr	r0, [fp, #-4]
     d20:	str	r0, [sp, #4]
     d24:	bl	36cc <__flatbuffers_soffset_read_from_pe>
     d28:	ldr	r1, [sp, #4]
     d2c:	sub	r0, r1, r0
     d30:	str	r0, [sp, #8]
     d34:	ldr	r0, [sp, #8]
     d38:	bl	36f0 <__flatbuffers_voffset_read_from_pe>
     d3c:	ldrh	r1, [sp, #12]
     d40:	add	r1, r1, #3
     d44:	lsl	r1, r1, #1
     d48:	cmp	r0, r1
     d4c:	bcc	d68 <reflection_Field_name+0xa4>
     d50:	ldr	r0, [sp, #8]
     d54:	ldrh	r1, [sp, #12]
     d58:	add	r0, r0, r1, lsl #1
     d5c:	add	r0, r0, #4
     d60:	bl	36f0 <__flatbuffers_voffset_read_from_pe>
     d64:	strh	r0, [fp, #-10]
     d68:	ldrsh	r0, [fp, #-10]
     d6c:	cmp	r0, #0
     d70:	beq	dac <reflection_Field_name+0xe8>
     d74:	ldr	r0, [fp, #-4]
     d78:	ldrh	r1, [fp, #-10]
     d7c:	add	r0, r0, r1
     d80:	str	r0, [fp, #-8]
     d84:	ldr	r0, [fp, #-8]
     d88:	add	r0, r0, #4
     d8c:	ldr	r1, [fp, #-8]
     d90:	str	r0, [sp]
     d94:	mov	r0, r1
     d98:	bl	37b4 <__flatbuffers_uoffset_read_from_pe>
     d9c:	ldr	r1, [sp]
     da0:	add	r0, r1, r0
     da4:	mov	sp, fp
     da8:	pop	{fp, pc}
     dac:	movw	r0, #0
     db0:	movt	r0, #0
     db4:	movw	r1, #0
     db8:	movt	r1, #0
     dbc:	movw	r2, #195	; 0xc3
     dc0:	movw	r3, #0
     dc4:	movt	r3, #0
     dc8:	bl	0 <__assert_fail>

00000dcc <reflection_Field_type>:
     dcc:	push	{fp, lr}
     dd0:	mov	fp, sp
     dd4:	sub	sp, sp, #24
     dd8:	str	r0, [fp, #-4]
     ddc:	movw	r0, #0
     de0:	strh	r0, [fp, #-10]
     de4:	ldr	r0, [fp, #-4]
     de8:	movw	r1, #0
     dec:	cmp	r0, r1
     df0:	beq	dfc <reflection_Field_type+0x30>
     df4:	b	df8 <reflection_Field_type+0x2c>
     df8:	b	e1c <reflection_Field_type+0x50>
     dfc:	movw	r0, #0
     e00:	movt	r0, #0
     e04:	movw	r1, #0
     e08:	movt	r1, #0
     e0c:	movw	r2, #201	; 0xc9
     e10:	movw	r3, #0
     e14:	movt	r3, #0
     e18:	bl	0 <__assert_fail>
     e1c:	mov	r0, #1
     e20:	strh	r0, [sp, #12]
     e24:	ldr	r0, [fp, #-4]
     e28:	str	r0, [sp, #4]
     e2c:	bl	36cc <__flatbuffers_soffset_read_from_pe>
     e30:	ldr	r1, [sp, #4]
     e34:	sub	r0, r1, r0
     e38:	str	r0, [sp, #8]
     e3c:	ldr	r0, [sp, #8]
     e40:	bl	36f0 <__flatbuffers_voffset_read_from_pe>
     e44:	ldrh	r1, [sp, #12]
     e48:	add	r1, r1, #3
     e4c:	lsl	r1, r1, #1
     e50:	cmp	r0, r1
     e54:	bcc	e70 <reflection_Field_type+0xa4>
     e58:	ldr	r0, [sp, #8]
     e5c:	ldrh	r1, [sp, #12]
     e60:	add	r0, r0, r1, lsl #1
     e64:	add	r0, r0, #4
     e68:	bl	36f0 <__flatbuffers_voffset_read_from_pe>
     e6c:	strh	r0, [fp, #-10]
     e70:	ldrsh	r0, [fp, #-10]
     e74:	cmp	r0, #0
     e78:	beq	eb0 <reflection_Field_type+0xe4>
     e7c:	ldr	r0, [fp, #-4]
     e80:	ldrh	r1, [fp, #-10]
     e84:	add	r0, r0, r1
     e88:	str	r0, [fp, #-8]
     e8c:	ldr	r0, [fp, #-8]
     e90:	ldr	r1, [fp, #-8]
     e94:	str	r0, [sp]
     e98:	mov	r0, r1
     e9c:	bl	37b4 <__flatbuffers_uoffset_read_from_pe>
     ea0:	ldr	r1, [sp]
     ea4:	add	r0, r1, r0
     ea8:	mov	sp, fp
     eac:	pop	{fp, pc}
     eb0:	movw	r0, #0
     eb4:	movt	r0, #0
     eb8:	movw	r1, #0
     ebc:	movt	r1, #0
     ec0:	movw	r2, #201	; 0xc9
     ec4:	movw	r3, #0
     ec8:	movt	r3, #0
     ecc:	bl	0 <__assert_fail>

00000ed0 <reflection_Field_id_is_present>:
     ed0:	push	{fp, lr}
     ed4:	mov	fp, sp
     ed8:	sub	sp, sp, #16
     edc:	str	r0, [fp, #-4]
     ee0:	movw	r0, #0
     ee4:	strh	r0, [fp, #-6]
     ee8:	ldr	r0, [fp, #-4]
     eec:	movw	r1, #0
     ef0:	cmp	r0, r1
     ef4:	beq	f00 <reflection_Field_id_is_present+0x30>
     ef8:	b	efc <reflection_Field_id_is_present+0x2c>
     efc:	b	f20 <reflection_Field_id_is_present+0x50>
     f00:	movw	r0, #0
     f04:	movt	r0, #0
     f08:	movw	r1, #0
     f0c:	movt	r1, #0
     f10:	movw	r2, #202	; 0xca
     f14:	movw	r3, #0
     f18:	movt	r3, #0
     f1c:	bl	0 <__assert_fail>
     f20:	mov	r0, #2
     f24:	strh	r0, [sp, #8]
     f28:	ldr	r0, [fp, #-4]
     f2c:	str	r0, [sp]
     f30:	bl	36cc <__flatbuffers_soffset_read_from_pe>
     f34:	ldr	r1, [sp]
     f38:	sub	r0, r1, r0
     f3c:	str	r0, [sp, #4]
     f40:	ldr	r0, [sp, #4]
     f44:	bl	36f0 <__flatbuffers_voffset_read_from_pe>
     f48:	ldrh	r1, [sp, #8]
     f4c:	add	r1, r1, #3
     f50:	lsl	r1, r1, #1
     f54:	cmp	r0, r1
     f58:	bcc	f74 <reflection_Field_id_is_present+0xa4>
     f5c:	ldr	r0, [sp, #4]
     f60:	ldrh	r1, [sp, #8]
     f64:	add	r0, r0, r1, lsl #1
     f68:	add	r0, r0, #4
     f6c:	bl	36f0 <__flatbuffers_voffset_read_from_pe>
     f70:	strh	r0, [fp, #-6]
     f74:	ldrh	r0, [fp, #-6]
     f78:	cmp	r0, #0
     f7c:	movw	r0, #0
     f80:	movne	r0, #1
     f84:	and	r0, r0, #1
     f88:	mov	sp, fp
     f8c:	pop	{fp, pc}

00000f90 <reflection_Field_id>:
     f90:	push	{fp, lr}
     f94:	mov	fp, sp
     f98:	sub	sp, sp, #24
     f9c:	str	r0, [fp, #-4]
     fa0:	movw	r0, #0
     fa4:	strh	r0, [fp, #-6]
     fa8:	ldr	r0, [fp, #-4]
     fac:	movw	r1, #0
     fb0:	cmp	r0, r1
     fb4:	beq	fc0 <reflection_Field_id+0x30>
     fb8:	b	fbc <reflection_Field_id+0x2c>
     fbc:	b	fe0 <reflection_Field_id+0x50>
     fc0:	movw	r0, #0
     fc4:	movt	r0, #0
     fc8:	movw	r1, #0
     fcc:	movt	r1, #0
     fd0:	movw	r2, #202	; 0xca
     fd4:	movw	r3, #0
     fd8:	movt	r3, #0
     fdc:	bl	0 <__assert_fail>
     fe0:	mov	r0, #2
     fe4:	strh	r0, [fp, #-8]
     fe8:	ldr	r0, [fp, #-4]
     fec:	str	r0, [sp, #8]
     ff0:	bl	36cc <__flatbuffers_soffset_read_from_pe>
     ff4:	ldr	r1, [sp, #8]
     ff8:	sub	r0, r1, r0
     ffc:	str	r0, [sp, #12]
    1000:	ldr	r0, [sp, #12]
    1004:	bl	36f0 <__flatbuffers_voffset_read_from_pe>
    1008:	ldrh	r1, [fp, #-8]
    100c:	add	r1, r1, #3
    1010:	lsl	r1, r1, #1
    1014:	cmp	r0, r1
    1018:	bcc	1034 <reflection_Field_id+0xa4>
    101c:	ldr	r0, [sp, #12]
    1020:	ldrh	r1, [fp, #-8]
    1024:	add	r0, r0, r1, lsl #1
    1028:	add	r0, r0, #4
    102c:	bl	36f0 <__flatbuffers_voffset_read_from_pe>
    1030:	strh	r0, [fp, #-6]
    1034:	ldrh	r0, [fp, #-6]
    1038:	cmp	r0, #0
    103c:	beq	105c <reflection_Field_id+0xcc>
    1040:	ldr	r0, [fp, #-4]
    1044:	ldrh	r1, [fp, #-6]
    1048:	add	r0, r0, r1
    104c:	bl	383c <flatbuffers_uint16_read_from_pe>
    1050:	uxth	r0, r0
    1054:	str	r0, [sp, #4]
    1058:	b	1068 <reflection_Field_id+0xd8>
    105c:	movw	r0, #0
    1060:	str	r0, [sp, #4]
    1064:	b	1068 <reflection_Field_id+0xd8>
    1068:	ldr	r0, [sp, #4]
    106c:	uxth	r0, r0
    1070:	mov	sp, fp
    1074:	pop	{fp, pc}

00001078 <reflection_Field_default_integer_is_present>:
    1078:	push	{fp, lr}
    107c:	mov	fp, sp
    1080:	sub	sp, sp, #16
    1084:	str	r0, [fp, #-4]
    1088:	movw	r0, #0
    108c:	strh	r0, [fp, #-6]
    1090:	ldr	r0, [fp, #-4]
    1094:	movw	r1, #0
    1098:	cmp	r0, r1
    109c:	beq	10a8 <reflection_Field_default_integer_is_present+0x30>
    10a0:	b	10a4 <reflection_Field_default_integer_is_present+0x2c>
    10a4:	b	10c8 <reflection_Field_default_integer_is_present+0x50>
    10a8:	movw	r0, #0
    10ac:	movt	r0, #0
    10b0:	movw	r1, #0
    10b4:	movt	r1, #0
    10b8:	movw	r2, #204	; 0xcc
    10bc:	movw	r3, #0
    10c0:	movt	r3, #0
    10c4:	bl	0 <__assert_fail>
    10c8:	mov	r0, #4
    10cc:	strh	r0, [sp, #8]
    10d0:	ldr	r0, [fp, #-4]
    10d4:	str	r0, [sp]
    10d8:	bl	36cc <__flatbuffers_soffset_read_from_pe>
    10dc:	ldr	r1, [sp]
    10e0:	sub	r0, r1, r0
    10e4:	str	r0, [sp, #4]
    10e8:	ldr	r0, [sp, #4]
    10ec:	bl	36f0 <__flatbuffers_voffset_read_from_pe>
    10f0:	ldrh	r1, [sp, #8]
    10f4:	add	r1, r1, #3
    10f8:	lsl	r1, r1, #1
    10fc:	cmp	r0, r1
    1100:	bcc	111c <reflection_Field_default_integer_is_present+0xa4>
    1104:	ldr	r0, [sp, #4]
    1108:	ldrh	r1, [sp, #8]
    110c:	add	r0, r0, r1, lsl #1
    1110:	add	r0, r0, #4
    1114:	bl	36f0 <__flatbuffers_voffset_read_from_pe>
    1118:	strh	r0, [fp, #-6]
    111c:	ldrh	r0, [fp, #-6]
    1120:	cmp	r0, #0
    1124:	movw	r0, #0
    1128:	movne	r0, #1
    112c:	and	r0, r0, #1
    1130:	mov	sp, fp
    1134:	pop	{fp, pc}

00001138 <reflection_Field_default_integer>:
    1138:	push	{fp, lr}
    113c:	mov	fp, sp
    1140:	sub	sp, sp, #32
    1144:	str	r0, [fp, #-4]
    1148:	movw	r0, #0
    114c:	strh	r0, [fp, #-6]
    1150:	ldr	r0, [fp, #-4]
    1154:	movw	r1, #0
    1158:	cmp	r0, r1
    115c:	beq	1168 <reflection_Field_default_integer+0x30>
    1160:	b	1164 <reflection_Field_default_integer+0x2c>
    1164:	b	1188 <reflection_Field_default_integer+0x50>
    1168:	movw	r0, #0
    116c:	movt	r0, #0
    1170:	movw	r1, #0
    1174:	movt	r1, #0
    1178:	movw	r2, #204	; 0xcc
    117c:	movw	r3, #0
    1180:	movt	r3, #0
    1184:	bl	0 <__assert_fail>
    1188:	mov	r0, #4
    118c:	strh	r0, [fp, #-8]
    1190:	ldr	r0, [fp, #-4]
    1194:	str	r0, [sp, #16]
    1198:	bl	36cc <__flatbuffers_soffset_read_from_pe>
    119c:	ldr	r1, [sp, #16]
    11a0:	sub	r0, r1, r0
    11a4:	str	r0, [fp, #-12]
    11a8:	ldr	r0, [fp, #-12]
    11ac:	bl	36f0 <__flatbuffers_voffset_read_from_pe>
    11b0:	ldrh	r1, [fp, #-8]
    11b4:	add	r1, r1, #3
    11b8:	lsl	r1, r1, #1
    11bc:	cmp	r0, r1
    11c0:	bcc	11dc <reflection_Field_default_integer+0xa4>
    11c4:	ldr	r0, [fp, #-12]
    11c8:	ldrh	r1, [fp, #-8]
    11cc:	add	r0, r0, r1, lsl #1
    11d0:	add	r0, r0, #4
    11d4:	bl	36f0 <__flatbuffers_voffset_read_from_pe>
    11d8:	strh	r0, [fp, #-6]
    11dc:	ldrh	r0, [fp, #-6]
    11e0:	cmp	r0, #0
    11e4:	beq	1204 <reflection_Field_default_integer+0xcc>
    11e8:	ldr	r0, [fp, #-4]
    11ec:	ldrh	r1, [fp, #-6]
    11f0:	add	r0, r0, r1
    11f4:	bl	3878 <flatbuffers_int64_read_from_pe>
    11f8:	str	r0, [sp, #12]
    11fc:	str	r1, [sp, #8]
    1200:	b	1218 <reflection_Field_default_integer+0xe0>
    1204:	mov	r0, #0
    1208:	mov	r1, r0
    120c:	str	r1, [sp, #12]
    1210:	str	r0, [sp, #8]
    1214:	b	1218 <reflection_Field_default_integer+0xe0>
    1218:	ldr	r0, [sp, #8]
    121c:	ldr	r1, [sp, #12]
    1220:	str	r0, [sp, #4]
    1224:	mov	r0, r1
    1228:	ldr	r1, [sp, #4]
    122c:	mov	sp, fp
    1230:	pop	{fp, pc}

00001234 <reflection_Field_default_real_is_present>:
    1234:	push	{fp, lr}
    1238:	mov	fp, sp
    123c:	sub	sp, sp, #16
    1240:	str	r0, [fp, #-4]
    1244:	movw	r0, #0
    1248:	strh	r0, [fp, #-6]
    124c:	ldr	r0, [fp, #-4]
    1250:	movw	r1, #0
    1254:	cmp	r0, r1
    1258:	beq	1264 <reflection_Field_default_real_is_present+0x30>
    125c:	b	1260 <reflection_Field_default_real_is_present+0x2c>
    1260:	b	1284 <reflection_Field_default_real_is_present+0x50>
    1264:	movw	r0, #0
    1268:	movt	r0, #0
    126c:	movw	r1, #0
    1270:	movt	r1, #0
    1274:	movw	r2, #205	; 0xcd
    1278:	movw	r3, #0
    127c:	movt	r3, #0
    1280:	bl	0 <__assert_fail>
    1284:	mov	r0, #5
    1288:	strh	r0, [sp, #8]
    128c:	ldr	r0, [fp, #-4]
    1290:	str	r0, [sp]
    1294:	bl	36cc <__flatbuffers_soffset_read_from_pe>
    1298:	ldr	r1, [sp]
    129c:	sub	r0, r1, r0
    12a0:	str	r0, [sp, #4]
    12a4:	ldr	r0, [sp, #4]
    12a8:	bl	36f0 <__flatbuffers_voffset_read_from_pe>
    12ac:	ldrh	r1, [sp, #8]
    12b0:	add	r1, r1, #3
    12b4:	lsl	r1, r1, #1
    12b8:	cmp	r0, r1
    12bc:	bcc	12d8 <reflection_Field_default_real_is_present+0xa4>
    12c0:	ldr	r0, [sp, #4]
    12c4:	ldrh	r1, [sp, #8]
    12c8:	add	r0, r0, r1, lsl #1
    12cc:	add	r0, r0, #4
    12d0:	bl	36f0 <__flatbuffers_voffset_read_from_pe>
    12d4:	strh	r0, [fp, #-6]
    12d8:	ldrh	r0, [fp, #-6]
    12dc:	cmp	r0, #0
    12e0:	movw	r0, #0
    12e4:	movne	r0, #1
    12e8:	and	r0, r0, #1
    12ec:	mov	sp, fp
    12f0:	pop	{fp, pc}
    12f4:	nop	{0}

000012f8 <reflection_Field_default_real>:
    12f8:	push	{fp, lr}
    12fc:	mov	fp, sp
    1300:	sub	sp, sp, #24
    1304:	str	r0, [fp, #-4]
    1308:	movw	r0, #0
    130c:	strh	r0, [fp, #-6]
    1310:	ldr	r0, [fp, #-4]
    1314:	movw	r1, #0
    1318:	cmp	r0, r1
    131c:	beq	1328 <reflection_Field_default_real+0x30>
    1320:	b	1324 <reflection_Field_default_real+0x2c>
    1324:	b	1348 <reflection_Field_default_real+0x50>
    1328:	movw	r0, #0
    132c:	movt	r0, #0
    1330:	movw	r1, #0
    1334:	movt	r1, #0
    1338:	movw	r2, #205	; 0xcd
    133c:	movw	r3, #0
    1340:	movt	r3, #0
    1344:	bl	0 <__assert_fail>
    1348:	mov	r0, #5
    134c:	strh	r0, [fp, #-8]
    1350:	ldr	r0, [fp, #-4]
    1354:	str	r0, [sp, #8]
    1358:	bl	36cc <__flatbuffers_soffset_read_from_pe>
    135c:	ldr	r1, [sp, #8]
    1360:	sub	r0, r1, r0
    1364:	str	r0, [sp, #12]
    1368:	ldr	r0, [sp, #12]
    136c:	bl	36f0 <__flatbuffers_voffset_read_from_pe>
    1370:	ldrh	r1, [fp, #-8]
    1374:	add	r1, r1, #3
    1378:	lsl	r1, r1, #1
    137c:	cmp	r0, r1
    1380:	bcc	139c <reflection_Field_default_real+0xa4>
    1384:	ldr	r0, [sp, #12]
    1388:	ldrh	r1, [fp, #-8]
    138c:	add	r0, r0, r1, lsl #1
    1390:	add	r0, r0, #4
    1394:	bl	36f0 <__flatbuffers_voffset_read_from_pe>
    1398:	strh	r0, [fp, #-6]
    139c:	ldrh	r0, [fp, #-6]
    13a0:	cmp	r0, #0
    13a4:	beq	13c0 <reflection_Field_default_real+0xc8>
    13a8:	ldr	r0, [fp, #-4]
    13ac:	ldrh	r1, [fp, #-6]
    13b0:	add	r0, r0, r1
    13b4:	bl	38c8 <flatbuffers_double_read_from_pe>
    13b8:	vstr	d0, [sp]
    13bc:	b	13cc <reflection_Field_default_real+0xd4>
    13c0:	vldr	d16, [pc, #24]	; 13e0 <reflection_Field_default_real+0xe8>
    13c4:	vstr	d16, [sp]
    13c8:	b	13cc <reflection_Field_default_real+0xd4>
    13cc:	vldr	d16, [sp]
    13d0:	vmov.f64	d0, d16
    13d4:	mov	sp, fp
    13d8:	pop	{fp, pc}
    13dc:	nop	{0}
	...

000013e8 <reflection_Field_required_is_present>:
    13e8:	push	{fp, lr}
    13ec:	mov	fp, sp
    13f0:	sub	sp, sp, #16
    13f4:	str	r0, [fp, #-4]
    13f8:	movw	r0, #0
    13fc:	strh	r0, [fp, #-6]
    1400:	ldr	r0, [fp, #-4]
    1404:	movw	r1, #0
    1408:	cmp	r0, r1
    140c:	beq	1418 <reflection_Field_required_is_present+0x30>
    1410:	b	1414 <reflection_Field_required_is_present+0x2c>
    1414:	b	1438 <reflection_Field_required_is_present+0x50>
    1418:	movw	r0, #0
    141c:	movt	r0, #0
    1420:	movw	r1, #0
    1424:	movt	r1, #0
    1428:	movw	r2, #207	; 0xcf
    142c:	movw	r3, #0
    1430:	movt	r3, #0
    1434:	bl	0 <__assert_fail>
    1438:	mov	r0, #7
    143c:	strh	r0, [sp, #8]
    1440:	ldr	r0, [fp, #-4]
    1444:	str	r0, [sp]
    1448:	bl	36cc <__flatbuffers_soffset_read_from_pe>
    144c:	ldr	r1, [sp]
    1450:	sub	r0, r1, r0
    1454:	str	r0, [sp, #4]
    1458:	ldr	r0, [sp, #4]
    145c:	bl	36f0 <__flatbuffers_voffset_read_from_pe>
    1460:	ldrh	r1, [sp, #8]
    1464:	add	r1, r1, #3
    1468:	lsl	r1, r1, #1
    146c:	cmp	r0, r1
    1470:	bcc	148c <reflection_Field_required_is_present+0xa4>
    1474:	ldr	r0, [sp, #4]
    1478:	ldrh	r1, [sp, #8]
    147c:	add	r0, r0, r1, lsl #1
    1480:	add	r0, r0, #4
    1484:	bl	36f0 <__flatbuffers_voffset_read_from_pe>
    1488:	strh	r0, [fp, #-6]
    148c:	ldrh	r0, [fp, #-6]
    1490:	cmp	r0, #0
    1494:	movw	r0, #0
    1498:	movne	r0, #1
    149c:	and	r0, r0, #1
    14a0:	mov	sp, fp
    14a4:	pop	{fp, pc}

000014a8 <reflection_Field_required>:
    14a8:	push	{fp, lr}
    14ac:	mov	fp, sp
    14b0:	sub	sp, sp, #24
    14b4:	str	r0, [fp, #-4]
    14b8:	movw	r0, #0
    14bc:	strh	r0, [fp, #-6]
    14c0:	ldr	r0, [fp, #-4]
    14c4:	movw	r1, #0
    14c8:	cmp	r0, r1
    14cc:	beq	14d8 <reflection_Field_required+0x30>
    14d0:	b	14d4 <reflection_Field_required+0x2c>
    14d4:	b	14f8 <reflection_Field_required+0x50>
    14d8:	movw	r0, #0
    14dc:	movt	r0, #0
    14e0:	movw	r1, #0
    14e4:	movt	r1, #0
    14e8:	movw	r2, #207	; 0xcf
    14ec:	movw	r3, #0
    14f0:	movt	r3, #0
    14f4:	bl	0 <__assert_fail>
    14f8:	mov	r0, #7
    14fc:	strh	r0, [fp, #-8]
    1500:	ldr	r0, [fp, #-4]
    1504:	str	r0, [sp, #8]
    1508:	bl	36cc <__flatbuffers_soffset_read_from_pe>
    150c:	ldr	r1, [sp, #8]
    1510:	sub	r0, r1, r0
    1514:	str	r0, [sp, #12]
    1518:	ldr	r0, [sp, #12]
    151c:	bl	36f0 <__flatbuffers_voffset_read_from_pe>
    1520:	ldrh	r1, [fp, #-8]
    1524:	add	r1, r1, #3
    1528:	lsl	r1, r1, #1
    152c:	cmp	r0, r1
    1530:	bcc	154c <reflection_Field_required+0xa4>
    1534:	ldr	r0, [sp, #12]
    1538:	ldrh	r1, [fp, #-8]
    153c:	add	r0, r0, r1, lsl #1
    1540:	add	r0, r0, #4
    1544:	bl	36f0 <__flatbuffers_voffset_read_from_pe>
    1548:	strh	r0, [fp, #-6]
    154c:	ldrh	r0, [fp, #-6]
    1550:	cmp	r0, #0
    1554:	beq	1574 <reflection_Field_required+0xcc>
    1558:	ldr	r0, [fp, #-4]
    155c:	ldrh	r1, [fp, #-6]
    1560:	add	r0, r0, r1
    1564:	bl	3908 <flatbuffers_bool_read_from_pe>
    1568:	and	r0, r0, #255	; 0xff
    156c:	str	r0, [sp, #4]
    1570:	b	1580 <reflection_Field_required+0xd8>
    1574:	movw	r0, #0
    1578:	str	r0, [sp, #4]
    157c:	b	1580 <reflection_Field_required+0xd8>
    1580:	ldr	r0, [sp, #4]
    1584:	and	r0, r0, #255	; 0xff
    1588:	mov	sp, fp
    158c:	pop	{fp, pc}

00001590 <reflection_Field_key_is_present>:
    1590:	push	{fp, lr}
    1594:	mov	fp, sp
    1598:	sub	sp, sp, #16
    159c:	str	r0, [fp, #-4]
    15a0:	movw	r0, #0
    15a4:	strh	r0, [fp, #-6]
    15a8:	ldr	r0, [fp, #-4]
    15ac:	movw	r1, #0
    15b0:	cmp	r0, r1
    15b4:	beq	15c0 <reflection_Field_key_is_present+0x30>
    15b8:	b	15bc <reflection_Field_key_is_present+0x2c>
    15bc:	b	15e0 <reflection_Field_key_is_present+0x50>
    15c0:	movw	r0, #0
    15c4:	movt	r0, #0
    15c8:	movw	r1, #0
    15cc:	movt	r1, #0
    15d0:	movw	r2, #208	; 0xd0
    15d4:	movw	r3, #0
    15d8:	movt	r3, #0
    15dc:	bl	0 <__assert_fail>
    15e0:	mov	r0, #8
    15e4:	strh	r0, [sp, #8]
    15e8:	ldr	r0, [fp, #-4]
    15ec:	str	r0, [sp]
    15f0:	bl	36cc <__flatbuffers_soffset_read_from_pe>
    15f4:	ldr	r1, [sp]
    15f8:	sub	r0, r1, r0
    15fc:	str	r0, [sp, #4]
    1600:	ldr	r0, [sp, #4]
    1604:	bl	36f0 <__flatbuffers_voffset_read_from_pe>
    1608:	ldrh	r1, [sp, #8]
    160c:	add	r1, r1, #3
    1610:	lsl	r1, r1, #1
    1614:	cmp	r0, r1
    1618:	bcc	1634 <reflection_Field_key_is_present+0xa4>
    161c:	ldr	r0, [sp, #4]
    1620:	ldrh	r1, [sp, #8]
    1624:	add	r0, r0, r1, lsl #1
    1628:	add	r0, r0, #4
    162c:	bl	36f0 <__flatbuffers_voffset_read_from_pe>
    1630:	strh	r0, [fp, #-6]
    1634:	ldrh	r0, [fp, #-6]
    1638:	cmp	r0, #0
    163c:	movw	r0, #0
    1640:	movne	r0, #1
    1644:	and	r0, r0, #1
    1648:	mov	sp, fp
    164c:	pop	{fp, pc}

00001650 <reflection_Field_key>:
    1650:	push	{fp, lr}
    1654:	mov	fp, sp
    1658:	sub	sp, sp, #24
    165c:	str	r0, [fp, #-4]
    1660:	movw	r0, #0
    1664:	strh	r0, [fp, #-6]
    1668:	ldr	r0, [fp, #-4]
    166c:	movw	r1, #0
    1670:	cmp	r0, r1
    1674:	beq	1680 <reflection_Field_key+0x30>
    1678:	b	167c <reflection_Field_key+0x2c>
    167c:	b	16a0 <reflection_Field_key+0x50>
    1680:	movw	r0, #0
    1684:	movt	r0, #0
    1688:	movw	r1, #0
    168c:	movt	r1, #0
    1690:	movw	r2, #208	; 0xd0
    1694:	movw	r3, #0
    1698:	movt	r3, #0
    169c:	bl	0 <__assert_fail>
    16a0:	mov	r0, #8
    16a4:	strh	r0, [fp, #-8]
    16a8:	ldr	r0, [fp, #-4]
    16ac:	str	r0, [sp, #8]
    16b0:	bl	36cc <__flatbuffers_soffset_read_from_pe>
    16b4:	ldr	r1, [sp, #8]
    16b8:	sub	r0, r1, r0
    16bc:	str	r0, [sp, #12]
    16c0:	ldr	r0, [sp, #12]
    16c4:	bl	36f0 <__flatbuffers_voffset_read_from_pe>
    16c8:	ldrh	r1, [fp, #-8]
    16cc:	add	r1, r1, #3
    16d0:	lsl	r1, r1, #1
    16d4:	cmp	r0, r1
    16d8:	bcc	16f4 <reflection_Field_key+0xa4>
    16dc:	ldr	r0, [sp, #12]
    16e0:	ldrh	r1, [fp, #-8]
    16e4:	add	r0, r0, r1, lsl #1
    16e8:	add	r0, r0, #4
    16ec:	bl	36f0 <__flatbuffers_voffset_read_from_pe>
    16f0:	strh	r0, [fp, #-6]
    16f4:	ldrh	r0, [fp, #-6]
    16f8:	cmp	r0, #0
    16fc:	beq	171c <reflection_Field_key+0xcc>
    1700:	ldr	r0, [fp, #-4]
    1704:	ldrh	r1, [fp, #-6]
    1708:	add	r0, r0, r1
    170c:	bl	3908 <flatbuffers_bool_read_from_pe>
    1710:	and	r0, r0, #255	; 0xff
    1714:	str	r0, [sp, #4]
    1718:	b	1728 <reflection_Field_key+0xd8>
    171c:	movw	r0, #0
    1720:	str	r0, [sp, #4]
    1724:	b	1728 <reflection_Field_key+0xd8>
    1728:	ldr	r0, [sp, #4]
    172c:	and	r0, r0, #255	; 0xff
    1730:	mov	sp, fp
    1734:	pop	{fp, pc}

00001738 <reflection_Object_is_struct_is_present>:
    1738:	push	{fp, lr}
    173c:	mov	fp, sp
    1740:	sub	sp, sp, #16
    1744:	str	r0, [fp, #-4]
    1748:	movw	r0, #0
    174c:	strh	r0, [fp, #-6]
    1750:	ldr	r0, [fp, #-4]
    1754:	movw	r1, #0
    1758:	cmp	r0, r1
    175c:	beq	1768 <reflection_Object_is_struct_is_present+0x30>
    1760:	b	1764 <reflection_Object_is_struct_is_present+0x2c>
    1764:	b	1788 <reflection_Object_is_struct_is_present+0x50>
    1768:	movw	r0, #0
    176c:	movt	r0, #0
    1770:	movw	r1, #0
    1774:	movt	r1, #0
    1778:	movw	r2, #225	; 0xe1
    177c:	movw	r3, #0
    1780:	movt	r3, #0
    1784:	bl	0 <__assert_fail>
    1788:	mov	r0, #2
    178c:	strh	r0, [sp, #8]
    1790:	ldr	r0, [fp, #-4]
    1794:	str	r0, [sp]
    1798:	bl	36cc <__flatbuffers_soffset_read_from_pe>
    179c:	ldr	r1, [sp]
    17a0:	sub	r0, r1, r0
    17a4:	str	r0, [sp, #4]
    17a8:	ldr	r0, [sp, #4]
    17ac:	bl	36f0 <__flatbuffers_voffset_read_from_pe>
    17b0:	ldrh	r1, [sp, #8]
    17b4:	add	r1, r1, #3
    17b8:	lsl	r1, r1, #1
    17bc:	cmp	r0, r1
    17c0:	bcc	17dc <reflection_Object_is_struct_is_present+0xa4>
    17c4:	ldr	r0, [sp, #4]
    17c8:	ldrh	r1, [sp, #8]
    17cc:	add	r0, r0, r1, lsl #1
    17d0:	add	r0, r0, #4
    17d4:	bl	36f0 <__flatbuffers_voffset_read_from_pe>
    17d8:	strh	r0, [fp, #-6]
    17dc:	ldrh	r0, [fp, #-6]
    17e0:	cmp	r0, #0
    17e4:	movw	r0, #0
    17e8:	movne	r0, #1
    17ec:	and	r0, r0, #1
    17f0:	mov	sp, fp
    17f4:	pop	{fp, pc}

000017f8 <reflection_Object_is_struct>:
    17f8:	push	{fp, lr}
    17fc:	mov	fp, sp
    1800:	sub	sp, sp, #24
    1804:	str	r0, [fp, #-4]
    1808:	movw	r0, #0
    180c:	strh	r0, [fp, #-6]
    1810:	ldr	r0, [fp, #-4]
    1814:	movw	r1, #0
    1818:	cmp	r0, r1
    181c:	beq	1828 <reflection_Object_is_struct+0x30>
    1820:	b	1824 <reflection_Object_is_struct+0x2c>
    1824:	b	1848 <reflection_Object_is_struct+0x50>
    1828:	movw	r0, #0
    182c:	movt	r0, #0
    1830:	movw	r1, #0
    1834:	movt	r1, #0
    1838:	movw	r2, #225	; 0xe1
    183c:	movw	r3, #0
    1840:	movt	r3, #0
    1844:	bl	0 <__assert_fail>
    1848:	mov	r0, #2
    184c:	strh	r0, [fp, #-8]
    1850:	ldr	r0, [fp, #-4]
    1854:	str	r0, [sp, #8]
    1858:	bl	36cc <__flatbuffers_soffset_read_from_pe>
    185c:	ldr	r1, [sp, #8]
    1860:	sub	r0, r1, r0
    1864:	str	r0, [sp, #12]
    1868:	ldr	r0, [sp, #12]
    186c:	bl	36f0 <__flatbuffers_voffset_read_from_pe>
    1870:	ldrh	r1, [fp, #-8]
    1874:	add	r1, r1, #3
    1878:	lsl	r1, r1, #1
    187c:	cmp	r0, r1
    1880:	bcc	189c <reflection_Object_is_struct+0xa4>
    1884:	ldr	r0, [sp, #12]
    1888:	ldrh	r1, [fp, #-8]
    188c:	add	r0, r0, r1, lsl #1
    1890:	add	r0, r0, #4
    1894:	bl	36f0 <__flatbuffers_voffset_read_from_pe>
    1898:	strh	r0, [fp, #-6]
    189c:	ldrh	r0, [fp, #-6]
    18a0:	cmp	r0, #0
    18a4:	beq	18c4 <reflection_Object_is_struct+0xcc>
    18a8:	ldr	r0, [fp, #-4]
    18ac:	ldrh	r1, [fp, #-6]
    18b0:	add	r0, r0, r1
    18b4:	bl	3908 <flatbuffers_bool_read_from_pe>
    18b8:	and	r0, r0, #255	; 0xff
    18bc:	str	r0, [sp, #4]
    18c0:	b	18d0 <reflection_Object_is_struct+0xd8>
    18c4:	movw	r0, #0
    18c8:	str	r0, [sp, #4]
    18cc:	b	18d0 <reflection_Object_is_struct+0xd8>
    18d0:	ldr	r0, [sp, #4]
    18d4:	and	r0, r0, #255	; 0xff
    18d8:	mov	sp, fp
    18dc:	pop	{fp, pc}

000018e0 <reflection_Object_minalign_is_present>:
    18e0:	push	{fp, lr}
    18e4:	mov	fp, sp
    18e8:	sub	sp, sp, #16
    18ec:	str	r0, [fp, #-4]
    18f0:	movw	r0, #0
    18f4:	strh	r0, [fp, #-6]
    18f8:	ldr	r0, [fp, #-4]
    18fc:	movw	r1, #0
    1900:	cmp	r0, r1
    1904:	beq	1910 <reflection_Object_minalign_is_present+0x30>
    1908:	b	190c <reflection_Object_minalign_is_present+0x2c>
    190c:	b	1930 <reflection_Object_minalign_is_present+0x50>
    1910:	movw	r0, #0
    1914:	movt	r0, #0
    1918:	movw	r1, #0
    191c:	movt	r1, #0
    1920:	movw	r2, #226	; 0xe2
    1924:	movw	r3, #0
    1928:	movt	r3, #0
    192c:	bl	0 <__assert_fail>
    1930:	mov	r0, #3
    1934:	strh	r0, [sp, #8]
    1938:	ldr	r0, [fp, #-4]
    193c:	str	r0, [sp]
    1940:	bl	36cc <__flatbuffers_soffset_read_from_pe>
    1944:	ldr	r1, [sp]
    1948:	sub	r0, r1, r0
    194c:	str	r0, [sp, #4]
    1950:	ldr	r0, [sp, #4]
    1954:	bl	36f0 <__flatbuffers_voffset_read_from_pe>
    1958:	ldrh	r1, [sp, #8]
    195c:	add	r1, r1, #3
    1960:	lsl	r1, r1, #1
    1964:	cmp	r0, r1
    1968:	bcc	1984 <reflection_Object_minalign_is_present+0xa4>
    196c:	ldr	r0, [sp, #4]
    1970:	ldrh	r1, [sp, #8]
    1974:	add	r0, r0, r1, lsl #1
    1978:	add	r0, r0, #4
    197c:	bl	36f0 <__flatbuffers_voffset_read_from_pe>
    1980:	strh	r0, [fp, #-6]
    1984:	ldrh	r0, [fp, #-6]
    1988:	cmp	r0, #0
    198c:	movw	r0, #0
    1990:	movne	r0, #1
    1994:	and	r0, r0, #1
    1998:	mov	sp, fp
    199c:	pop	{fp, pc}

000019a0 <reflection_Object_minalign>:
    19a0:	push	{fp, lr}
    19a4:	mov	fp, sp
    19a8:	sub	sp, sp, #24
    19ac:	str	r0, [fp, #-4]
    19b0:	movw	r0, #0
    19b4:	strh	r0, [fp, #-6]
    19b8:	ldr	r0, [fp, #-4]
    19bc:	movw	r1, #0
    19c0:	cmp	r0, r1
    19c4:	beq	19d0 <reflection_Object_minalign+0x30>
    19c8:	b	19cc <reflection_Object_minalign+0x2c>
    19cc:	b	19f0 <reflection_Object_minalign+0x50>
    19d0:	movw	r0, #0
    19d4:	movt	r0, #0
    19d8:	movw	r1, #0
    19dc:	movt	r1, #0
    19e0:	movw	r2, #226	; 0xe2
    19e4:	movw	r3, #0
    19e8:	movt	r3, #0
    19ec:	bl	0 <__assert_fail>
    19f0:	mov	r0, #3
    19f4:	strh	r0, [fp, #-8]
    19f8:	ldr	r0, [fp, #-4]
    19fc:	str	r0, [sp, #8]
    1a00:	bl	36cc <__flatbuffers_soffset_read_from_pe>
    1a04:	ldr	r1, [sp, #8]
    1a08:	sub	r0, r1, r0
    1a0c:	str	r0, [sp, #12]
    1a10:	ldr	r0, [sp, #12]
    1a14:	bl	36f0 <__flatbuffers_voffset_read_from_pe>
    1a18:	ldrh	r1, [fp, #-8]
    1a1c:	add	r1, r1, #3
    1a20:	lsl	r1, r1, #1
    1a24:	cmp	r0, r1
    1a28:	bcc	1a44 <reflection_Object_minalign+0xa4>
    1a2c:	ldr	r0, [sp, #12]
    1a30:	ldrh	r1, [fp, #-8]
    1a34:	add	r0, r0, r1, lsl #1
    1a38:	add	r0, r0, #4
    1a3c:	bl	36f0 <__flatbuffers_voffset_read_from_pe>
    1a40:	strh	r0, [fp, #-6]
    1a44:	ldrh	r0, [fp, #-6]
    1a48:	cmp	r0, #0
    1a4c:	beq	1a68 <reflection_Object_minalign+0xc8>
    1a50:	ldr	r0, [fp, #-4]
    1a54:	ldrh	r1, [fp, #-6]
    1a58:	add	r0, r0, r1
    1a5c:	bl	377c <flatbuffers_int32_read_from_pe>
    1a60:	str	r0, [sp, #4]
    1a64:	b	1a74 <reflection_Object_minalign+0xd4>
    1a68:	movw	r0, #0
    1a6c:	str	r0, [sp, #4]
    1a70:	b	1a74 <reflection_Object_minalign+0xd4>
    1a74:	ldr	r0, [sp, #4]
    1a78:	mov	sp, fp
    1a7c:	pop	{fp, pc}

00001a80 <reflection_Object_bytesize_is_present>:
    1a80:	push	{fp, lr}
    1a84:	mov	fp, sp
    1a88:	sub	sp, sp, #16
    1a8c:	str	r0, [fp, #-4]
    1a90:	movw	r0, #0
    1a94:	strh	r0, [fp, #-6]
    1a98:	ldr	r0, [fp, #-4]
    1a9c:	movw	r1, #0
    1aa0:	cmp	r0, r1
    1aa4:	beq	1ab0 <reflection_Object_bytesize_is_present+0x30>
    1aa8:	b	1aac <reflection_Object_bytesize_is_present+0x2c>
    1aac:	b	1ad0 <reflection_Object_bytesize_is_present+0x50>
    1ab0:	movw	r0, #0
    1ab4:	movt	r0, #0
    1ab8:	movw	r1, #0
    1abc:	movt	r1, #0
    1ac0:	movw	r2, #227	; 0xe3
    1ac4:	movw	r3, #0
    1ac8:	movt	r3, #0
    1acc:	bl	0 <__assert_fail>
    1ad0:	mov	r0, #4
    1ad4:	strh	r0, [sp, #8]
    1ad8:	ldr	r0, [fp, #-4]
    1adc:	str	r0, [sp]
    1ae0:	bl	36cc <__flatbuffers_soffset_read_from_pe>
    1ae4:	ldr	r1, [sp]
    1ae8:	sub	r0, r1, r0
    1aec:	str	r0, [sp, #4]
    1af0:	ldr	r0, [sp, #4]
    1af4:	bl	36f0 <__flatbuffers_voffset_read_from_pe>
    1af8:	ldrh	r1, [sp, #8]
    1afc:	add	r1, r1, #3
    1b00:	lsl	r1, r1, #1
    1b04:	cmp	r0, r1
    1b08:	bcc	1b24 <reflection_Object_bytesize_is_present+0xa4>
    1b0c:	ldr	r0, [sp, #4]
    1b10:	ldrh	r1, [sp, #8]
    1b14:	add	r0, r0, r1, lsl #1
    1b18:	add	r0, r0, #4
    1b1c:	bl	36f0 <__flatbuffers_voffset_read_from_pe>
    1b20:	strh	r0, [fp, #-6]
    1b24:	ldrh	r0, [fp, #-6]
    1b28:	cmp	r0, #0
    1b2c:	movw	r0, #0
    1b30:	movne	r0, #1
    1b34:	and	r0, r0, #1
    1b38:	mov	sp, fp
    1b3c:	pop	{fp, pc}

00001b40 <reflection_Object_bytesize>:
    1b40:	push	{fp, lr}
    1b44:	mov	fp, sp
    1b48:	sub	sp, sp, #24
    1b4c:	str	r0, [fp, #-4]
    1b50:	movw	r0, #0
    1b54:	strh	r0, [fp, #-6]
    1b58:	ldr	r0, [fp, #-4]
    1b5c:	movw	r1, #0
    1b60:	cmp	r0, r1
    1b64:	beq	1b70 <reflection_Object_bytesize+0x30>
    1b68:	b	1b6c <reflection_Object_bytesize+0x2c>
    1b6c:	b	1b90 <reflection_Object_bytesize+0x50>
    1b70:	movw	r0, #0
    1b74:	movt	r0, #0
    1b78:	movw	r1, #0
    1b7c:	movt	r1, #0
    1b80:	movw	r2, #227	; 0xe3
    1b84:	movw	r3, #0
    1b88:	movt	r3, #0
    1b8c:	bl	0 <__assert_fail>
    1b90:	mov	r0, #4
    1b94:	strh	r0, [fp, #-8]
    1b98:	ldr	r0, [fp, #-4]
    1b9c:	str	r0, [sp, #8]
    1ba0:	bl	36cc <__flatbuffers_soffset_read_from_pe>
    1ba4:	ldr	r1, [sp, #8]
    1ba8:	sub	r0, r1, r0
    1bac:	str	r0, [sp, #12]
    1bb0:	ldr	r0, [sp, #12]
    1bb4:	bl	36f0 <__flatbuffers_voffset_read_from_pe>
    1bb8:	ldrh	r1, [fp, #-8]
    1bbc:	add	r1, r1, #3
    1bc0:	lsl	r1, r1, #1
    1bc4:	cmp	r0, r1
    1bc8:	bcc	1be4 <reflection_Object_bytesize+0xa4>
    1bcc:	ldr	r0, [sp, #12]
    1bd0:	ldrh	r1, [fp, #-8]
    1bd4:	add	r0, r0, r1, lsl #1
    1bd8:	add	r0, r0, #4
    1bdc:	bl	36f0 <__flatbuffers_voffset_read_from_pe>
    1be0:	strh	r0, [fp, #-6]
    1be4:	ldrh	r0, [fp, #-6]
    1be8:	cmp	r0, #0
    1bec:	beq	1c08 <reflection_Object_bytesize+0xc8>
    1bf0:	ldr	r0, [fp, #-4]
    1bf4:	ldrh	r1, [fp, #-6]
    1bf8:	add	r0, r0, r1
    1bfc:	bl	377c <flatbuffers_int32_read_from_pe>
    1c00:	str	r0, [sp, #4]
    1c04:	b	1c14 <reflection_Object_bytesize+0xd4>
    1c08:	movw	r0, #0
    1c0c:	str	r0, [sp, #4]
    1c10:	b	1c14 <reflection_Object_bytesize+0xd4>
    1c14:	ldr	r0, [sp, #4]
    1c18:	mov	sp, fp
    1c1c:	pop	{fp, pc}

00001c20 <print_enum>:
    1c20:	push	{fp, lr}
    1c24:	mov	fp, sp
    1c28:	sub	sp, sp, #56	; 0x38
    1c2c:	str	r0, [fp, #-4]
    1c30:	ldr	r0, [fp, #-4]
    1c34:	bl	1e08 <reflection_Enum_name>
    1c38:	movw	r1, #0
    1c3c:	movt	r1, #0
    1c40:	str	r0, [fp, #-20]	; 0xffffffec
    1c44:	mov	r0, r1
    1c48:	ldr	r1, [fp, #-20]	; 0xffffffec
    1c4c:	bl	0 <printf>
    1c50:	ldr	r1, [fp, #-4]
    1c54:	str	r0, [fp, #-24]	; 0xffffffe8
    1c58:	mov	r0, r1
    1c5c:	bl	1f10 <reflection_Enum_values>
    1c60:	str	r0, [fp, #-8]
    1c64:	movw	r0, #0
    1c68:	movt	r0, #0
    1c6c:	bl	0 <printf>
    1c70:	movw	r1, #0
    1c74:	str	r1, [fp, #-16]
    1c78:	ldr	r0, [fp, #-16]
    1c7c:	ldr	r1, [fp, #-8]
    1c80:	str	r0, [sp, #28]
    1c84:	mov	r0, r1
    1c88:	bl	2018 <reflection_Enum_vec_len>
    1c8c:	ldr	r1, [sp, #28]
    1c90:	cmp	r1, r0
    1c94:	bcs	1d68 <print_enum+0x148>
    1c98:	ldr	r0, [fp, #-8]
    1c9c:	ldr	r1, [fp, #-16]
    1ca0:	bl	2068 <reflection_EnumVal_vec_at>
    1ca4:	str	r0, [fp, #-12]
    1ca8:	ldr	r0, [fp, #-16]
    1cac:	cmp	r0, #0
    1cb0:	bls	1cc0 <print_enum+0xa0>
    1cb4:	movw	r0, #0
    1cb8:	movt	r0, #0
    1cbc:	bl	0 <printf>
    1cc0:	ldr	r0, [fp, #-12]
    1cc4:	bl	20ec <reflection_EnumVal_name>
    1cc8:	movw	r1, #0
    1ccc:	movt	r1, #0
    1cd0:	str	r0, [sp, #24]
    1cd4:	mov	r0, r1
    1cd8:	ldr	r1, [sp, #24]
    1cdc:	bl	0 <printf>
    1ce0:	ldr	r1, [fp, #-12]
    1ce4:	str	r0, [sp, #20]
    1ce8:	mov	r0, r1
    1cec:	bl	21f4 <reflection_EnumVal_value_is_present>
    1cf0:	cmp	r0, #0
    1cf4:	beq	1d1c <print_enum+0xfc>
    1cf8:	ldr	r0, [fp, #-12]
    1cfc:	bl	22b4 <reflection_EnumVal_value>
    1d00:	movw	r2, #0
    1d04:	movt	r2, #0
    1d08:	str	r0, [sp, #16]
    1d0c:	mov	r0, r2
    1d10:	ldr	r2, [sp, #16]
    1d14:	mov	r3, r1
    1d18:	bl	0 <printf>
    1d1c:	ldr	r0, [fp, #-12]
    1d20:	bl	23b0 <reflection_EnumVal_object_is_present>
    1d24:	cmp	r0, #0
    1d28:	beq	1d4c <print_enum+0x12c>
    1d2c:	movw	r0, #0
    1d30:	movt	r0, #0
    1d34:	bl	0 <printf>
    1d38:	ldr	r1, [fp, #-12]
    1d3c:	str	r0, [sp, #12]
    1d40:	mov	r0, r1
    1d44:	bl	2470 <reflection_EnumVal_object>
    1d48:	bl	6dc <print_object>
    1d4c:	movw	r0, #0
    1d50:	movt	r0, #0
    1d54:	bl	0 <printf>
    1d58:	ldr	r0, [fp, #-16]
    1d5c:	add	r0, r0, #1
    1d60:	str	r0, [fp, #-16]
    1d64:	b	1c78 <print_enum+0x58>
    1d68:	movw	r0, #0
    1d6c:	movt	r0, #0
    1d70:	bl	0 <printf>
    1d74:	ldr	r1, [fp, #-4]
    1d78:	str	r0, [sp, #8]
    1d7c:	mov	r0, r1
    1d80:	bl	2568 <reflection_Enum_is_union_is_present>
    1d84:	cmp	r0, #0
    1d88:	beq	1dd4 <print_enum+0x1b4>
    1d8c:	ldr	r0, [fp, #-4]
    1d90:	bl	2628 <reflection_Enum_is_union>
    1d94:	and	r0, r0, #255	; 0xff
    1d98:	cmp	r0, #0
    1d9c:	movw	r0, #0
    1da0:	movne	r0, #1
    1da4:	tst	r0, #1
    1da8:	movw	r0, #0
    1dac:	movt	r0, #0
    1db0:	movw	r1, #0
    1db4:	movt	r1, #0
    1db8:	movne	r0, r1
    1dbc:	movw	r1, #0
    1dc0:	movt	r1, #0
    1dc4:	str	r0, [sp, #4]
    1dc8:	mov	r0, r1
    1dcc:	ldr	r1, [sp, #4]
    1dd0:	bl	0 <printf>
    1dd4:	movw	r0, #0
    1dd8:	movt	r0, #0
    1ddc:	bl	0 <printf>
    1de0:	ldr	r1, [fp, #-4]
    1de4:	str	r0, [sp]
    1de8:	mov	r0, r1
    1dec:	bl	2710 <reflection_Enum_underlying_type>
    1df0:	bl	0 <print_type>
    1df4:	movw	r0, #0
    1df8:	movt	r0, #0
    1dfc:	bl	0 <printf>
    1e00:	mov	sp, fp
    1e04:	pop	{fp, pc}

00001e08 <reflection_Enum_name>:
    1e08:	push	{fp, lr}
    1e0c:	mov	fp, sp
    1e10:	sub	sp, sp, #24
    1e14:	str	r0, [fp, #-4]
    1e18:	movw	r0, #0
    1e1c:	strh	r0, [fp, #-10]
    1e20:	ldr	r0, [fp, #-4]
    1e24:	movw	r1, #0
    1e28:	cmp	r0, r1
    1e2c:	beq	1e38 <reflection_Enum_name+0x30>
    1e30:	b	1e34 <reflection_Enum_name+0x2c>
    1e34:	b	1e58 <reflection_Enum_name+0x50>
    1e38:	movw	r0, #0
    1e3c:	movt	r0, #0
    1e40:	movw	r1, #0
    1e44:	movt	r1, #0
    1e48:	movw	r2, #177	; 0xb1
    1e4c:	movw	r3, #0
    1e50:	movt	r3, #0
    1e54:	bl	0 <__assert_fail>
    1e58:	mov	r0, #0
    1e5c:	strh	r0, [sp, #12]
    1e60:	ldr	r0, [fp, #-4]
    1e64:	str	r0, [sp, #4]
    1e68:	bl	36cc <__flatbuffers_soffset_read_from_pe>
    1e6c:	ldr	r1, [sp, #4]
    1e70:	sub	r0, r1, r0
    1e74:	str	r0, [sp, #8]
    1e78:	ldr	r0, [sp, #8]
    1e7c:	bl	36f0 <__flatbuffers_voffset_read_from_pe>
    1e80:	ldrh	r1, [sp, #12]
    1e84:	add	r1, r1, #3
    1e88:	lsl	r1, r1, #1
    1e8c:	cmp	r0, r1
    1e90:	bcc	1eac <reflection_Enum_name+0xa4>
    1e94:	ldr	r0, [sp, #8]
    1e98:	ldrh	r1, [sp, #12]
    1e9c:	add	r0, r0, r1, lsl #1
    1ea0:	add	r0, r0, #4
    1ea4:	bl	36f0 <__flatbuffers_voffset_read_from_pe>
    1ea8:	strh	r0, [fp, #-10]
    1eac:	ldrsh	r0, [fp, #-10]
    1eb0:	cmp	r0, #0
    1eb4:	beq	1ef0 <reflection_Enum_name+0xe8>
    1eb8:	ldr	r0, [fp, #-4]
    1ebc:	ldrh	r1, [fp, #-10]
    1ec0:	add	r0, r0, r1
    1ec4:	str	r0, [fp, #-8]
    1ec8:	ldr	r0, [fp, #-8]
    1ecc:	add	r0, r0, #4
    1ed0:	ldr	r1, [fp, #-8]
    1ed4:	str	r0, [sp]
    1ed8:	mov	r0, r1
    1edc:	bl	37b4 <__flatbuffers_uoffset_read_from_pe>
    1ee0:	ldr	r1, [sp]
    1ee4:	add	r0, r1, r0
    1ee8:	mov	sp, fp
    1eec:	pop	{fp, pc}
    1ef0:	movw	r0, #0
    1ef4:	movt	r0, #0
    1ef8:	movw	r1, #0
    1efc:	movt	r1, #0
    1f00:	movw	r2, #177	; 0xb1
    1f04:	movw	r3, #0
    1f08:	movt	r3, #0
    1f0c:	bl	0 <__assert_fail>

00001f10 <reflection_Enum_values>:
    1f10:	push	{fp, lr}
    1f14:	mov	fp, sp
    1f18:	sub	sp, sp, #24
    1f1c:	str	r0, [fp, #-4]
    1f20:	movw	r0, #0
    1f24:	strh	r0, [fp, #-10]
    1f28:	ldr	r0, [fp, #-4]
    1f2c:	movw	r1, #0
    1f30:	cmp	r0, r1
    1f34:	beq	1f40 <reflection_Enum_values+0x30>
    1f38:	b	1f3c <reflection_Enum_values+0x2c>
    1f3c:	b	1f60 <reflection_Enum_values+0x50>
    1f40:	movw	r0, #0
    1f44:	movt	r0, #0
    1f48:	movw	r1, #0
    1f4c:	movt	r1, #0
    1f50:	movw	r2, #183	; 0xb7
    1f54:	movw	r3, #0
    1f58:	movt	r3, #0
    1f5c:	bl	0 <__assert_fail>
    1f60:	mov	r0, #1
    1f64:	strh	r0, [sp, #12]
    1f68:	ldr	r0, [fp, #-4]
    1f6c:	str	r0, [sp, #4]
    1f70:	bl	36cc <__flatbuffers_soffset_read_from_pe>
    1f74:	ldr	r1, [sp, #4]
    1f78:	sub	r0, r1, r0
    1f7c:	str	r0, [sp, #8]
    1f80:	ldr	r0, [sp, #8]
    1f84:	bl	36f0 <__flatbuffers_voffset_read_from_pe>
    1f88:	ldrh	r1, [sp, #12]
    1f8c:	add	r1, r1, #3
    1f90:	lsl	r1, r1, #1
    1f94:	cmp	r0, r1
    1f98:	bcc	1fb4 <reflection_Enum_values+0xa4>
    1f9c:	ldr	r0, [sp, #8]
    1fa0:	ldrh	r1, [sp, #12]
    1fa4:	add	r0, r0, r1, lsl #1
    1fa8:	add	r0, r0, #4
    1fac:	bl	36f0 <__flatbuffers_voffset_read_from_pe>
    1fb0:	strh	r0, [fp, #-10]
    1fb4:	ldrsh	r0, [fp, #-10]
    1fb8:	cmp	r0, #0
    1fbc:	beq	1ff8 <reflection_Enum_values+0xe8>
    1fc0:	ldr	r0, [fp, #-4]
    1fc4:	ldrh	r1, [fp, #-10]
    1fc8:	add	r0, r0, r1
    1fcc:	str	r0, [fp, #-8]
    1fd0:	ldr	r0, [fp, #-8]
    1fd4:	add	r0, r0, #4
    1fd8:	ldr	r1, [fp, #-8]
    1fdc:	str	r0, [sp]
    1fe0:	mov	r0, r1
    1fe4:	bl	37b4 <__flatbuffers_uoffset_read_from_pe>
    1fe8:	ldr	r1, [sp]
    1fec:	add	r0, r1, r0
    1ff0:	mov	sp, fp
    1ff4:	pop	{fp, pc}
    1ff8:	movw	r0, #0
    1ffc:	movt	r0, #0
    2000:	movw	r1, #0
    2004:	movt	r1, #0
    2008:	movw	r2, #183	; 0xb7
    200c:	movw	r3, #0
    2010:	movt	r3, #0
    2014:	bl	0 <__assert_fail>

00002018 <reflection_Enum_vec_len>:
    2018:	push	{fp, lr}
    201c:	mov	fp, sp
    2020:	sub	sp, sp, #8
    2024:	str	r0, [sp, #4]
    2028:	ldr	r0, [sp, #4]
    202c:	movw	r1, #0
    2030:	cmp	r0, r1
    2034:	beq	2050 <reflection_Enum_vec_len+0x38>
    2038:	ldr	r0, [sp, #4]
    203c:	mvn	r1, #3
    2040:	add	r0, r0, r1
    2044:	bl	37b4 <__flatbuffers_uoffset_read_from_pe>
    2048:	str	r0, [sp]
    204c:	b	205c <reflection_Enum_vec_len+0x44>
    2050:	movw	r0, #0
    2054:	str	r0, [sp]
    2058:	b	205c <reflection_Enum_vec_len+0x44>
    205c:	ldr	r0, [sp]
    2060:	mov	sp, fp
    2064:	pop	{fp, pc}

00002068 <reflection_EnumVal_vec_at>:
    2068:	push	{fp, lr}
    206c:	mov	fp, sp
    2070:	sub	sp, sp, #16
    2074:	str	r0, [fp, #-4]
    2078:	str	r1, [sp, #8]
    207c:	ldr	r0, [fp, #-4]
    2080:	ldr	r1, [sp, #8]
    2084:	add	r0, r0, r1, lsl #2
    2088:	str	r0, [sp, #4]
    208c:	ldr	r0, [fp, #-4]
    2090:	bl	37ec <flatbuffers_vec_len>
    2094:	ldr	r1, [sp, #8]
    2098:	cmp	r0, r1
    209c:	bls	20a8 <reflection_EnumVal_vec_at+0x40>
    20a0:	b	20a4 <reflection_EnumVal_vec_at+0x3c>
    20a4:	b	20c8 <reflection_EnumVal_vec_at+0x60>
    20a8:	movw	r0, #0
    20ac:	movt	r0, #0
    20b0:	movw	r1, #0
    20b4:	movt	r1, #0
    20b8:	movw	r2, #156	; 0x9c
    20bc:	movw	r3, #0
    20c0:	movt	r3, #0
    20c4:	bl	0 <__assert_fail>
    20c8:	ldr	r0, [sp, #4]
    20cc:	ldr	r1, [sp, #4]
    20d0:	str	r0, [sp]
    20d4:	mov	r0, r1
    20d8:	bl	37b4 <__flatbuffers_uoffset_read_from_pe>
    20dc:	ldr	r1, [sp]
    20e0:	add	r0, r1, r0
    20e4:	mov	sp, fp
    20e8:	pop	{fp, pc}

000020ec <reflection_EnumVal_name>:
    20ec:	push	{fp, lr}
    20f0:	mov	fp, sp
    20f4:	sub	sp, sp, #24
    20f8:	str	r0, [fp, #-4]
    20fc:	movw	r0, #0
    2100:	strh	r0, [fp, #-10]
    2104:	ldr	r0, [fp, #-4]
    2108:	movw	r1, #0
    210c:	cmp	r0, r1
    2110:	beq	211c <reflection_EnumVal_name+0x30>
    2114:	b	2118 <reflection_EnumVal_name+0x2c>
    2118:	b	213c <reflection_EnumVal_name+0x50>
    211c:	movw	r0, #0
    2120:	movt	r0, #0
    2124:	movw	r1, #0
    2128:	movt	r1, #0
    212c:	movw	r2, #159	; 0x9f
    2130:	movw	r3, #0
    2134:	movt	r3, #0
    2138:	bl	0 <__assert_fail>
    213c:	mov	r0, #0
    2140:	strh	r0, [sp, #12]
    2144:	ldr	r0, [fp, #-4]
    2148:	str	r0, [sp, #4]
    214c:	bl	36cc <__flatbuffers_soffset_read_from_pe>
    2150:	ldr	r1, [sp, #4]
    2154:	sub	r0, r1, r0
    2158:	str	r0, [sp, #8]
    215c:	ldr	r0, [sp, #8]
    2160:	bl	36f0 <__flatbuffers_voffset_read_from_pe>
    2164:	ldrh	r1, [sp, #12]
    2168:	add	r1, r1, #3
    216c:	lsl	r1, r1, #1
    2170:	cmp	r0, r1
    2174:	bcc	2190 <reflection_EnumVal_name+0xa4>
    2178:	ldr	r0, [sp, #8]
    217c:	ldrh	r1, [sp, #12]
    2180:	add	r0, r0, r1, lsl #1
    2184:	add	r0, r0, #4
    2188:	bl	36f0 <__flatbuffers_voffset_read_from_pe>
    218c:	strh	r0, [fp, #-10]
    2190:	ldrsh	r0, [fp, #-10]
    2194:	cmp	r0, #0
    2198:	beq	21d4 <reflection_EnumVal_name+0xe8>
    219c:	ldr	r0, [fp, #-4]
    21a0:	ldrh	r1, [fp, #-10]
    21a4:	add	r0, r0, r1
    21a8:	str	r0, [fp, #-8]
    21ac:	ldr	r0, [fp, #-8]
    21b0:	add	r0, r0, #4
    21b4:	ldr	r1, [fp, #-8]
    21b8:	str	r0, [sp]
    21bc:	mov	r0, r1
    21c0:	bl	37b4 <__flatbuffers_uoffset_read_from_pe>
    21c4:	ldr	r1, [sp]
    21c8:	add	r0, r1, r0
    21cc:	mov	sp, fp
    21d0:	pop	{fp, pc}
    21d4:	movw	r0, #0
    21d8:	movt	r0, #0
    21dc:	movw	r1, #0
    21e0:	movt	r1, #0
    21e4:	movw	r2, #159	; 0x9f
    21e8:	movw	r3, #0
    21ec:	movt	r3, #0
    21f0:	bl	0 <__assert_fail>

000021f4 <reflection_EnumVal_value_is_present>:
    21f4:	push	{fp, lr}
    21f8:	mov	fp, sp
    21fc:	sub	sp, sp, #16
    2200:	str	r0, [fp, #-4]
    2204:	movw	r0, #0
    2208:	strh	r0, [fp, #-6]
    220c:	ldr	r0, [fp, #-4]
    2210:	movw	r1, #0
    2214:	cmp	r0, r1
    2218:	beq	2224 <reflection_EnumVal_value_is_present+0x30>
    221c:	b	2220 <reflection_EnumVal_value_is_present+0x2c>
    2220:	b	2244 <reflection_EnumVal_value_is_present+0x50>
    2224:	movw	r0, #0
    2228:	movt	r0, #0
    222c:	movw	r1, #0
    2230:	movt	r1, #0
    2234:	movw	r2, #160	; 0xa0
    2238:	movw	r3, #0
    223c:	movt	r3, #0
    2240:	bl	0 <__assert_fail>
    2244:	mov	r0, #1
    2248:	strh	r0, [sp, #8]
    224c:	ldr	r0, [fp, #-4]
    2250:	str	r0, [sp]
    2254:	bl	36cc <__flatbuffers_soffset_read_from_pe>
    2258:	ldr	r1, [sp]
    225c:	sub	r0, r1, r0
    2260:	str	r0, [sp, #4]
    2264:	ldr	r0, [sp, #4]
    2268:	bl	36f0 <__flatbuffers_voffset_read_from_pe>
    226c:	ldrh	r1, [sp, #8]
    2270:	add	r1, r1, #3
    2274:	lsl	r1, r1, #1
    2278:	cmp	r0, r1
    227c:	bcc	2298 <reflection_EnumVal_value_is_present+0xa4>
    2280:	ldr	r0, [sp, #4]
    2284:	ldrh	r1, [sp, #8]
    2288:	add	r0, r0, r1, lsl #1
    228c:	add	r0, r0, #4
    2290:	bl	36f0 <__flatbuffers_voffset_read_from_pe>
    2294:	strh	r0, [fp, #-6]
    2298:	ldrh	r0, [fp, #-6]
    229c:	cmp	r0, #0
    22a0:	movw	r0, #0
    22a4:	movne	r0, #1
    22a8:	and	r0, r0, #1
    22ac:	mov	sp, fp
    22b0:	pop	{fp, pc}

000022b4 <reflection_EnumVal_value>:
    22b4:	push	{fp, lr}
    22b8:	mov	fp, sp
    22bc:	sub	sp, sp, #32
    22c0:	str	r0, [fp, #-4]
    22c4:	movw	r0, #0
    22c8:	strh	r0, [fp, #-6]
    22cc:	ldr	r0, [fp, #-4]
    22d0:	movw	r1, #0
    22d4:	cmp	r0, r1
    22d8:	beq	22e4 <reflection_EnumVal_value+0x30>
    22dc:	b	22e0 <reflection_EnumVal_value+0x2c>
    22e0:	b	2304 <reflection_EnumVal_value+0x50>
    22e4:	movw	r0, #0
    22e8:	movt	r0, #0
    22ec:	movw	r1, #0
    22f0:	movt	r1, #0
    22f4:	movw	r2, #160	; 0xa0
    22f8:	movw	r3, #0
    22fc:	movt	r3, #0
    2300:	bl	0 <__assert_fail>
    2304:	mov	r0, #1
    2308:	strh	r0, [fp, #-8]
    230c:	ldr	r0, [fp, #-4]
    2310:	str	r0, [sp, #16]
    2314:	bl	36cc <__flatbuffers_soffset_read_from_pe>
    2318:	ldr	r1, [sp, #16]
    231c:	sub	r0, r1, r0
    2320:	str	r0, [fp, #-12]
    2324:	ldr	r0, [fp, #-12]
    2328:	bl	36f0 <__flatbuffers_voffset_read_from_pe>
    232c:	ldrh	r1, [fp, #-8]
    2330:	add	r1, r1, #3
    2334:	lsl	r1, r1, #1
    2338:	cmp	r0, r1
    233c:	bcc	2358 <reflection_EnumVal_value+0xa4>
    2340:	ldr	r0, [fp, #-12]
    2344:	ldrh	r1, [fp, #-8]
    2348:	add	r0, r0, r1, lsl #1
    234c:	add	r0, r0, #4
    2350:	bl	36f0 <__flatbuffers_voffset_read_from_pe>
    2354:	strh	r0, [fp, #-6]
    2358:	ldrh	r0, [fp, #-6]
    235c:	cmp	r0, #0
    2360:	beq	2380 <reflection_EnumVal_value+0xcc>
    2364:	ldr	r0, [fp, #-4]
    2368:	ldrh	r1, [fp, #-6]
    236c:	add	r0, r0, r1
    2370:	bl	3878 <flatbuffers_int64_read_from_pe>
    2374:	str	r0, [sp, #12]
    2378:	str	r1, [sp, #8]
    237c:	b	2394 <reflection_EnumVal_value+0xe0>
    2380:	mov	r0, #0
    2384:	mov	r1, r0
    2388:	str	r1, [sp, #12]
    238c:	str	r0, [sp, #8]
    2390:	b	2394 <reflection_EnumVal_value+0xe0>
    2394:	ldr	r0, [sp, #8]
    2398:	ldr	r1, [sp, #12]
    239c:	str	r0, [sp, #4]
    23a0:	mov	r0, r1
    23a4:	ldr	r1, [sp, #4]
    23a8:	mov	sp, fp
    23ac:	pop	{fp, pc}

000023b0 <reflection_EnumVal_object_is_present>:
    23b0:	push	{fp, lr}
    23b4:	mov	fp, sp
    23b8:	sub	sp, sp, #16
    23bc:	str	r0, [fp, #-4]
    23c0:	movw	r0, #0
    23c4:	strh	r0, [fp, #-6]
    23c8:	ldr	r0, [fp, #-4]
    23cc:	movw	r1, #0
    23d0:	cmp	r0, r1
    23d4:	beq	23e0 <reflection_EnumVal_object_is_present+0x30>
    23d8:	b	23dc <reflection_EnumVal_object_is_present+0x2c>
    23dc:	b	2400 <reflection_EnumVal_object_is_present+0x50>
    23e0:	movw	r0, #0
    23e4:	movt	r0, #0
    23e8:	movw	r1, #0
    23ec:	movt	r1, #0
    23f0:	movw	r2, #167	; 0xa7
    23f4:	movw	r3, #0
    23f8:	movt	r3, #0
    23fc:	bl	0 <__assert_fail>
    2400:	mov	r0, #2
    2404:	strh	r0, [sp, #8]
    2408:	ldr	r0, [fp, #-4]
    240c:	str	r0, [sp]
    2410:	bl	36cc <__flatbuffers_soffset_read_from_pe>
    2414:	ldr	r1, [sp]
    2418:	sub	r0, r1, r0
    241c:	str	r0, [sp, #4]
    2420:	ldr	r0, [sp, #4]
    2424:	bl	36f0 <__flatbuffers_voffset_read_from_pe>
    2428:	ldrh	r1, [sp, #8]
    242c:	add	r1, r1, #3
    2430:	lsl	r1, r1, #1
    2434:	cmp	r0, r1
    2438:	bcc	2454 <reflection_EnumVal_object_is_present+0xa4>
    243c:	ldr	r0, [sp, #4]
    2440:	ldrh	r1, [sp, #8]
    2444:	add	r0, r0, r1, lsl #1
    2448:	add	r0, r0, #4
    244c:	bl	36f0 <__flatbuffers_voffset_read_from_pe>
    2450:	strh	r0, [fp, #-6]
    2454:	ldrh	r0, [fp, #-6]
    2458:	cmp	r0, #0
    245c:	movw	r0, #0
    2460:	movne	r0, #1
    2464:	and	r0, r0, #1
    2468:	mov	sp, fp
    246c:	pop	{fp, pc}

00002470 <reflection_EnumVal_object>:
    2470:	push	{fp, lr}
    2474:	mov	fp, sp
    2478:	sub	sp, sp, #32
    247c:	str	r0, [fp, #-8]
    2480:	movw	r0, #0
    2484:	strh	r0, [fp, #-14]
    2488:	ldr	r0, [fp, #-8]
    248c:	movw	r1, #0
    2490:	cmp	r0, r1
    2494:	beq	24a0 <reflection_EnumVal_object+0x30>
    2498:	b	249c <reflection_EnumVal_object+0x2c>
    249c:	b	24c0 <reflection_EnumVal_object+0x50>
    24a0:	movw	r0, #0
    24a4:	movt	r0, #0
    24a8:	movw	r1, #0
    24ac:	movt	r1, #0
    24b0:	movw	r2, #167	; 0xa7
    24b4:	movw	r3, #0
    24b8:	movt	r3, #0
    24bc:	bl	0 <__assert_fail>
    24c0:	mov	r0, #2
    24c4:	strh	r0, [sp, #16]
    24c8:	ldr	r0, [fp, #-8]
    24cc:	str	r0, [sp, #8]
    24d0:	bl	36cc <__flatbuffers_soffset_read_from_pe>
    24d4:	ldr	r1, [sp, #8]
    24d8:	sub	r0, r1, r0
    24dc:	str	r0, [sp, #12]
    24e0:	ldr	r0, [sp, #12]
    24e4:	bl	36f0 <__flatbuffers_voffset_read_from_pe>
    24e8:	ldrh	r1, [sp, #16]
    24ec:	add	r1, r1, #3
    24f0:	lsl	r1, r1, #1
    24f4:	cmp	r0, r1
    24f8:	bcc	2514 <reflection_EnumVal_object+0xa4>
    24fc:	ldr	r0, [sp, #12]
    2500:	ldrh	r1, [sp, #16]
    2504:	add	r0, r0, r1, lsl #1
    2508:	add	r0, r0, #4
    250c:	bl	36f0 <__flatbuffers_voffset_read_from_pe>
    2510:	strh	r0, [fp, #-14]
    2514:	ldrsh	r0, [fp, #-14]
    2518:	cmp	r0, #0
    251c:	beq	2554 <reflection_EnumVal_object+0xe4>
    2520:	ldr	r0, [fp, #-8]
    2524:	ldrh	r1, [fp, #-14]
    2528:	add	r0, r0, r1
    252c:	str	r0, [fp, #-12]
    2530:	ldr	r0, [fp, #-12]
    2534:	ldr	r1, [fp, #-12]
    2538:	str	r0, [sp, #4]
    253c:	mov	r0, r1
    2540:	bl	37b4 <__flatbuffers_uoffset_read_from_pe>
    2544:	ldr	r1, [sp, #4]
    2548:	add	r0, r1, r0
    254c:	str	r0, [fp, #-4]
    2550:	b	255c <reflection_EnumVal_object+0xec>
    2554:	movw	r0, #0
    2558:	str	r0, [fp, #-4]
    255c:	ldr	r0, [fp, #-4]
    2560:	mov	sp, fp
    2564:	pop	{fp, pc}

00002568 <reflection_Enum_is_union_is_present>:
    2568:	push	{fp, lr}
    256c:	mov	fp, sp
    2570:	sub	sp, sp, #16
    2574:	str	r0, [fp, #-4]
    2578:	movw	r0, #0
    257c:	strh	r0, [fp, #-6]
    2580:	ldr	r0, [fp, #-4]
    2584:	movw	r1, #0
    2588:	cmp	r0, r1
    258c:	beq	2598 <reflection_Enum_is_union_is_present+0x30>
    2590:	b	2594 <reflection_Enum_is_union_is_present+0x2c>
    2594:	b	25b8 <reflection_Enum_is_union_is_present+0x50>
    2598:	movw	r0, #0
    259c:	movt	r0, #0
    25a0:	movw	r1, #0
    25a4:	movt	r1, #0
    25a8:	movw	r2, #184	; 0xb8
    25ac:	movw	r3, #0
    25b0:	movt	r3, #0
    25b4:	bl	0 <__assert_fail>
    25b8:	mov	r0, #2
    25bc:	strh	r0, [sp, #8]
    25c0:	ldr	r0, [fp, #-4]
    25c4:	str	r0, [sp]
    25c8:	bl	36cc <__flatbuffers_soffset_read_from_pe>
    25cc:	ldr	r1, [sp]
    25d0:	sub	r0, r1, r0
    25d4:	str	r0, [sp, #4]
    25d8:	ldr	r0, [sp, #4]
    25dc:	bl	36f0 <__flatbuffers_voffset_read_from_pe>
    25e0:	ldrh	r1, [sp, #8]
    25e4:	add	r1, r1, #3
    25e8:	lsl	r1, r1, #1
    25ec:	cmp	r0, r1
    25f0:	bcc	260c <reflection_Enum_is_union_is_present+0xa4>
    25f4:	ldr	r0, [sp, #4]
    25f8:	ldrh	r1, [sp, #8]
    25fc:	add	r0, r0, r1, lsl #1
    2600:	add	r0, r0, #4
    2604:	bl	36f0 <__flatbuffers_voffset_read_from_pe>
    2608:	strh	r0, [fp, #-6]
    260c:	ldrh	r0, [fp, #-6]
    2610:	cmp	r0, #0
    2614:	movw	r0, #0
    2618:	movne	r0, #1
    261c:	and	r0, r0, #1
    2620:	mov	sp, fp
    2624:	pop	{fp, pc}

00002628 <reflection_Enum_is_union>:
    2628:	push	{fp, lr}
    262c:	mov	fp, sp
    2630:	sub	sp, sp, #24
    2634:	str	r0, [fp, #-4]
    2638:	movw	r0, #0
    263c:	strh	r0, [fp, #-6]
    2640:	ldr	r0, [fp, #-4]
    2644:	movw	r1, #0
    2648:	cmp	r0, r1
    264c:	beq	2658 <reflection_Enum_is_union+0x30>
    2650:	b	2654 <reflection_Enum_is_union+0x2c>
    2654:	b	2678 <reflection_Enum_is_union+0x50>
    2658:	movw	r0, #0
    265c:	movt	r0, #0
    2660:	movw	r1, #0
    2664:	movt	r1, #0
    2668:	movw	r2, #184	; 0xb8
    266c:	movw	r3, #0
    2670:	movt	r3, #0
    2674:	bl	0 <__assert_fail>
    2678:	mov	r0, #2
    267c:	strh	r0, [fp, #-8]
    2680:	ldr	r0, [fp, #-4]
    2684:	str	r0, [sp, #8]
    2688:	bl	36cc <__flatbuffers_soffset_read_from_pe>
    268c:	ldr	r1, [sp, #8]
    2690:	sub	r0, r1, r0
    2694:	str	r0, [sp, #12]
    2698:	ldr	r0, [sp, #12]
    269c:	bl	36f0 <__flatbuffers_voffset_read_from_pe>
    26a0:	ldrh	r1, [fp, #-8]
    26a4:	add	r1, r1, #3
    26a8:	lsl	r1, r1, #1
    26ac:	cmp	r0, r1
    26b0:	bcc	26cc <reflection_Enum_is_union+0xa4>
    26b4:	ldr	r0, [sp, #12]
    26b8:	ldrh	r1, [fp, #-8]
    26bc:	add	r0, r0, r1, lsl #1
    26c0:	add	r0, r0, #4
    26c4:	bl	36f0 <__flatbuffers_voffset_read_from_pe>
    26c8:	strh	r0, [fp, #-6]
    26cc:	ldrh	r0, [fp, #-6]
    26d0:	cmp	r0, #0
    26d4:	beq	26f4 <reflection_Enum_is_union+0xcc>
    26d8:	ldr	r0, [fp, #-4]
    26dc:	ldrh	r1, [fp, #-6]
    26e0:	add	r0, r0, r1
    26e4:	bl	3908 <flatbuffers_bool_read_from_pe>
    26e8:	and	r0, r0, #255	; 0xff
    26ec:	str	r0, [sp, #4]
    26f0:	b	2700 <reflection_Enum_is_union+0xd8>
    26f4:	movw	r0, #0
    26f8:	str	r0, [sp, #4]
    26fc:	b	2700 <reflection_Enum_is_union+0xd8>
    2700:	ldr	r0, [sp, #4]
    2704:	and	r0, r0, #255	; 0xff
    2708:	mov	sp, fp
    270c:	pop	{fp, pc}

00002710 <reflection_Enum_underlying_type>:
    2710:	push	{fp, lr}
    2714:	mov	fp, sp
    2718:	sub	sp, sp, #24
    271c:	str	r0, [fp, #-4]
    2720:	movw	r0, #0
    2724:	strh	r0, [fp, #-10]
    2728:	ldr	r0, [fp, #-4]
    272c:	movw	r1, #0
    2730:	cmp	r0, r1
    2734:	beq	2740 <reflection_Enum_underlying_type+0x30>
    2738:	b	273c <reflection_Enum_underlying_type+0x2c>
    273c:	b	2760 <reflection_Enum_underlying_type+0x50>
    2740:	movw	r0, #0
    2744:	movt	r0, #0
    2748:	movw	r1, #0
    274c:	movt	r1, #0
    2750:	movw	r2, #185	; 0xb9
    2754:	movw	r3, #0
    2758:	movt	r3, #0
    275c:	bl	0 <__assert_fail>
    2760:	mov	r0, #3
    2764:	strh	r0, [sp, #12]
    2768:	ldr	r0, [fp, #-4]
    276c:	str	r0, [sp, #4]
    2770:	bl	36cc <__flatbuffers_soffset_read_from_pe>
    2774:	ldr	r1, [sp, #4]
    2778:	sub	r0, r1, r0
    277c:	str	r0, [sp, #8]
    2780:	ldr	r0, [sp, #8]
    2784:	bl	36f0 <__flatbuffers_voffset_read_from_pe>
    2788:	ldrh	r1, [sp, #12]
    278c:	add	r1, r1, #3
    2790:	lsl	r1, r1, #1
    2794:	cmp	r0, r1
    2798:	bcc	27b4 <reflection_Enum_underlying_type+0xa4>
    279c:	ldr	r0, [sp, #8]
    27a0:	ldrh	r1, [sp, #12]
    27a4:	add	r0, r0, r1, lsl #1
    27a8:	add	r0, r0, #4
    27ac:	bl	36f0 <__flatbuffers_voffset_read_from_pe>
    27b0:	strh	r0, [fp, #-10]
    27b4:	ldrsh	r0, [fp, #-10]
    27b8:	cmp	r0, #0
    27bc:	beq	27f4 <reflection_Enum_underlying_type+0xe4>
    27c0:	ldr	r0, [fp, #-4]
    27c4:	ldrh	r1, [fp, #-10]
    27c8:	add	r0, r0, r1
    27cc:	str	r0, [fp, #-8]
    27d0:	ldr	r0, [fp, #-8]
    27d4:	ldr	r1, [fp, #-8]
    27d8:	str	r0, [sp]
    27dc:	mov	r0, r1
    27e0:	bl	37b4 <__flatbuffers_uoffset_read_from_pe>
    27e4:	ldr	r1, [sp]
    27e8:	add	r0, r1, r0
    27ec:	mov	sp, fp
    27f0:	pop	{fp, pc}
    27f4:	movw	r0, #0
    27f8:	movt	r0, #0
    27fc:	movw	r1, #0
    2800:	movt	r1, #0
    2804:	movw	r2, #185	; 0xb9
    2808:	movw	r3, #0
    280c:	movt	r3, #0
    2810:	bl	0 <__assert_fail>

00002814 <print_schema>:
    2814:	push	{fp, lr}
    2818:	mov	fp, sp
    281c:	sub	sp, sp, #48	; 0x30
    2820:	str	r0, [fp, #-4]
    2824:	ldr	r0, [fp, #-4]
    2828:	bl	29f4 <reflection_Schema_objects>
    282c:	str	r0, [fp, #-8]
    2830:	movw	r0, #0
    2834:	movt	r0, #0
    2838:	bl	0 <printf>
    283c:	movw	r1, #0
    2840:	movt	r1, #0
    2844:	str	r0, [fp, #-20]	; 0xffffffec
    2848:	mov	r0, r1
    284c:	bl	0 <printf>
    2850:	movw	r1, #0
    2854:	str	r1, [fp, #-16]
    2858:	ldr	r0, [fp, #-16]
    285c:	ldr	r1, [fp, #-8]
    2860:	str	r0, [sp, #24]
    2864:	mov	r0, r1
    2868:	bl	2afc <reflection_Object_vec_len>
    286c:	ldr	r1, [sp, #24]
    2870:	cmp	r1, r0
    2874:	bcs	28b0 <print_schema+0x9c>
    2878:	ldr	r0, [fp, #-16]
    287c:	cmp	r0, #0
    2880:	bls	2890 <print_schema+0x7c>
    2884:	movw	r0, #0
    2888:	movt	r0, #0
    288c:	bl	0 <printf>
    2890:	ldr	r0, [fp, #-8]
    2894:	ldr	r1, [fp, #-16]
    2898:	bl	2b4c <reflection_Object_vec_at>
    289c:	bl	6dc <print_object>
    28a0:	ldr	r0, [fp, #-16]
    28a4:	add	r0, r0, #1
    28a8:	str	r0, [fp, #-16]
    28ac:	b	2858 <print_schema+0x44>
    28b0:	movw	r0, #0
    28b4:	movt	r0, #0
    28b8:	bl	0 <printf>
    28bc:	ldr	r1, [fp, #-4]
    28c0:	str	r0, [sp, #20]
    28c4:	mov	r0, r1
    28c8:	bl	2bd0 <reflection_Schema_enums>
    28cc:	str	r0, [fp, #-12]
    28d0:	movw	r0, #0
    28d4:	movt	r0, #0
    28d8:	bl	0 <printf>
    28dc:	movw	r1, #0
    28e0:	str	r1, [fp, #-16]
    28e4:	ldr	r0, [fp, #-16]
    28e8:	ldr	r1, [fp, #-12]
    28ec:	str	r0, [sp, #16]
    28f0:	mov	r0, r1
    28f4:	bl	2018 <reflection_Enum_vec_len>
    28f8:	ldr	r1, [sp, #16]
    28fc:	cmp	r1, r0
    2900:	bcs	293c <print_schema+0x128>
    2904:	ldr	r0, [fp, #-16]
    2908:	cmp	r0, #0
    290c:	bls	291c <print_schema+0x108>
    2910:	movw	r0, #0
    2914:	movt	r0, #0
    2918:	bl	0 <printf>
    291c:	ldr	r0, [fp, #-12]
    2920:	ldr	r1, [fp, #-16]
    2924:	bl	2cd8 <reflection_Enum_vec_at>
    2928:	bl	1c20 <print_enum>
    292c:	ldr	r0, [fp, #-16]
    2930:	add	r0, r0, #1
    2934:	str	r0, [fp, #-16]
    2938:	b	28e4 <print_schema+0xd0>
    293c:	movw	r0, #0
    2940:	movt	r0, #0
    2944:	bl	0 <printf>
    2948:	ldr	r1, [fp, #-4]
    294c:	str	r0, [sp, #12]
    2950:	mov	r0, r1
    2954:	bl	2d5c <reflection_Schema_file_ident_is_present>
    2958:	cmp	r0, #0
    295c:	beq	2980 <print_schema+0x16c>
    2960:	ldr	r0, [fp, #-4]
    2964:	bl	2e1c <reflection_Schema_file_ident>
    2968:	movw	r1, #0
    296c:	movt	r1, #0
    2970:	str	r0, [sp, #8]
    2974:	mov	r0, r1
    2978:	ldr	r1, [sp, #8]
    297c:	bl	0 <printf>
    2980:	ldr	r0, [fp, #-4]
    2984:	bl	2f18 <reflection_Schema_file_ext_is_present>
    2988:	cmp	r0, #0
    298c:	beq	29b0 <print_schema+0x19c>
    2990:	ldr	r0, [fp, #-4]
    2994:	bl	2fd8 <reflection_Schema_file_ext>
    2998:	movw	r1, #0
    299c:	movt	r1, #0
    29a0:	str	r0, [sp, #4]
    29a4:	mov	r0, r1
    29a8:	ldr	r1, [sp, #4]
    29ac:	bl	0 <printf>
    29b0:	ldr	r0, [fp, #-4]
    29b4:	bl	30d4 <reflection_Schema_root_table_is_present>
    29b8:	cmp	r0, #0
    29bc:	beq	29e0 <print_schema+0x1cc>
    29c0:	movw	r0, #0
    29c4:	movt	r0, #0
    29c8:	bl	0 <printf>
    29cc:	ldr	r1, [fp, #-4]
    29d0:	str	r0, [sp]
    29d4:	mov	r0, r1
    29d8:	bl	3194 <reflection_Schema_root_table>
    29dc:	bl	6dc <print_object>
    29e0:	movw	r0, #0
    29e4:	movt	r0, #0
    29e8:	bl	0 <printf>
    29ec:	mov	sp, fp
    29f0:	pop	{fp, pc}

000029f4 <reflection_Schema_objects>:
    29f4:	push	{fp, lr}
    29f8:	mov	fp, sp
    29fc:	sub	sp, sp, #24
    2a00:	str	r0, [fp, #-4]
    2a04:	movw	r0, #0
    2a08:	strh	r0, [fp, #-10]
    2a0c:	ldr	r0, [fp, #-4]
    2a10:	movw	r1, #0
    2a14:	cmp	r0, r1
    2a18:	beq	2a24 <reflection_Schema_objects+0x30>
    2a1c:	b	2a20 <reflection_Schema_objects+0x2c>
    2a20:	b	2a44 <reflection_Schema_objects+0x50>
    2a24:	movw	r0, #0
    2a28:	movt	r0, #0
    2a2c:	movw	r1, #0
    2a30:	movt	r1, #0
    2a34:	movw	r2, #237	; 0xed
    2a38:	movw	r3, #0
    2a3c:	movt	r3, #0
    2a40:	bl	0 <__assert_fail>
    2a44:	mov	r0, #0
    2a48:	strh	r0, [sp, #12]
    2a4c:	ldr	r0, [fp, #-4]
    2a50:	str	r0, [sp, #4]
    2a54:	bl	36cc <__flatbuffers_soffset_read_from_pe>
    2a58:	ldr	r1, [sp, #4]
    2a5c:	sub	r0, r1, r0
    2a60:	str	r0, [sp, #8]
    2a64:	ldr	r0, [sp, #8]
    2a68:	bl	36f0 <__flatbuffers_voffset_read_from_pe>
    2a6c:	ldrh	r1, [sp, #12]
    2a70:	add	r1, r1, #3
    2a74:	lsl	r1, r1, #1
    2a78:	cmp	r0, r1
    2a7c:	bcc	2a98 <reflection_Schema_objects+0xa4>
    2a80:	ldr	r0, [sp, #8]
    2a84:	ldrh	r1, [sp, #12]
    2a88:	add	r0, r0, r1, lsl #1
    2a8c:	add	r0, r0, #4
    2a90:	bl	36f0 <__flatbuffers_voffset_read_from_pe>
    2a94:	strh	r0, [fp, #-10]
    2a98:	ldrsh	r0, [fp, #-10]
    2a9c:	cmp	r0, #0
    2aa0:	beq	2adc <reflection_Schema_objects+0xe8>
    2aa4:	ldr	r0, [fp, #-4]
    2aa8:	ldrh	r1, [fp, #-10]
    2aac:	add	r0, r0, r1
    2ab0:	str	r0, [fp, #-8]
    2ab4:	ldr	r0, [fp, #-8]
    2ab8:	add	r0, r0, #4
    2abc:	ldr	r1, [fp, #-8]
    2ac0:	str	r0, [sp]
    2ac4:	mov	r0, r1
    2ac8:	bl	37b4 <__flatbuffers_uoffset_read_from_pe>
    2acc:	ldr	r1, [sp]
    2ad0:	add	r0, r1, r0
    2ad4:	mov	sp, fp
    2ad8:	pop	{fp, pc}
    2adc:	movw	r0, #0
    2ae0:	movt	r0, #0
    2ae4:	movw	r1, #0
    2ae8:	movt	r1, #0
    2aec:	movw	r2, #237	; 0xed
    2af0:	movw	r3, #0
    2af4:	movt	r3, #0
    2af8:	bl	0 <__assert_fail>

00002afc <reflection_Object_vec_len>:
    2afc:	push	{fp, lr}
    2b00:	mov	fp, sp
    2b04:	sub	sp, sp, #8
    2b08:	str	r0, [sp, #4]
    2b0c:	ldr	r0, [sp, #4]
    2b10:	movw	r1, #0
    2b14:	cmp	r0, r1
    2b18:	beq	2b34 <reflection_Object_vec_len+0x38>
    2b1c:	ldr	r0, [sp, #4]
    2b20:	mvn	r1, #3
    2b24:	add	r0, r0, r1
    2b28:	bl	37b4 <__flatbuffers_uoffset_read_from_pe>
    2b2c:	str	r0, [sp]
    2b30:	b	2b40 <reflection_Object_vec_len+0x44>
    2b34:	movw	r0, #0
    2b38:	str	r0, [sp]
    2b3c:	b	2b40 <reflection_Object_vec_len+0x44>
    2b40:	ldr	r0, [sp]
    2b44:	mov	sp, fp
    2b48:	pop	{fp, pc}

00002b4c <reflection_Object_vec_at>:
    2b4c:	push	{fp, lr}
    2b50:	mov	fp, sp
    2b54:	sub	sp, sp, #16
    2b58:	str	r0, [fp, #-4]
    2b5c:	str	r1, [sp, #8]
    2b60:	ldr	r0, [fp, #-4]
    2b64:	ldr	r1, [sp, #8]
    2b68:	add	r0, r0, r1, lsl #2
    2b6c:	str	r0, [sp, #4]
    2b70:	ldr	r0, [fp, #-4]
    2b74:	bl	37ec <flatbuffers_vec_len>
    2b78:	ldr	r1, [sp, #8]
    2b7c:	cmp	r0, r1
    2b80:	bls	2b8c <reflection_Object_vec_at+0x40>
    2b84:	b	2b88 <reflection_Object_vec_at+0x3c>
    2b88:	b	2bac <reflection_Object_vec_at+0x60>
    2b8c:	movw	r0, #0
    2b90:	movt	r0, #0
    2b94:	movw	r1, #0
    2b98:	movt	r1, #0
    2b9c:	movw	r2, #215	; 0xd7
    2ba0:	movw	r3, #0
    2ba4:	movt	r3, #0
    2ba8:	bl	0 <__assert_fail>
    2bac:	ldr	r0, [sp, #4]
    2bb0:	ldr	r1, [sp, #4]
    2bb4:	str	r0, [sp]
    2bb8:	mov	r0, r1
    2bbc:	bl	37b4 <__flatbuffers_uoffset_read_from_pe>
    2bc0:	ldr	r1, [sp]
    2bc4:	add	r0, r1, r0
    2bc8:	mov	sp, fp
    2bcc:	pop	{fp, pc}

00002bd0 <reflection_Schema_enums>:
    2bd0:	push	{fp, lr}
    2bd4:	mov	fp, sp
    2bd8:	sub	sp, sp, #24
    2bdc:	str	r0, [fp, #-4]
    2be0:	movw	r0, #0
    2be4:	strh	r0, [fp, #-10]
    2be8:	ldr	r0, [fp, #-4]
    2bec:	movw	r1, #0
    2bf0:	cmp	r0, r1
    2bf4:	beq	2c00 <reflection_Schema_enums+0x30>
    2bf8:	b	2bfc <reflection_Schema_enums+0x2c>
    2bfc:	b	2c20 <reflection_Schema_enums+0x50>
    2c00:	movw	r0, #0
    2c04:	movt	r0, #0
    2c08:	movw	r1, #0
    2c0c:	movt	r1, #0
    2c10:	movw	r2, #238	; 0xee
    2c14:	movw	r3, #0
    2c18:	movt	r3, #0
    2c1c:	bl	0 <__assert_fail>
    2c20:	mov	r0, #1
    2c24:	strh	r0, [sp, #12]
    2c28:	ldr	r0, [fp, #-4]
    2c2c:	str	r0, [sp, #4]
    2c30:	bl	36cc <__flatbuffers_soffset_read_from_pe>
    2c34:	ldr	r1, [sp, #4]
    2c38:	sub	r0, r1, r0
    2c3c:	str	r0, [sp, #8]
    2c40:	ldr	r0, [sp, #8]
    2c44:	bl	36f0 <__flatbuffers_voffset_read_from_pe>
    2c48:	ldrh	r1, [sp, #12]
    2c4c:	add	r1, r1, #3
    2c50:	lsl	r1, r1, #1
    2c54:	cmp	r0, r1
    2c58:	bcc	2c74 <reflection_Schema_enums+0xa4>
    2c5c:	ldr	r0, [sp, #8]
    2c60:	ldrh	r1, [sp, #12]
    2c64:	add	r0, r0, r1, lsl #1
    2c68:	add	r0, r0, #4
    2c6c:	bl	36f0 <__flatbuffers_voffset_read_from_pe>
    2c70:	strh	r0, [fp, #-10]
    2c74:	ldrsh	r0, [fp, #-10]
    2c78:	cmp	r0, #0
    2c7c:	beq	2cb8 <reflection_Schema_enums+0xe8>
    2c80:	ldr	r0, [fp, #-4]
    2c84:	ldrh	r1, [fp, #-10]
    2c88:	add	r0, r0, r1
    2c8c:	str	r0, [fp, #-8]
    2c90:	ldr	r0, [fp, #-8]
    2c94:	add	r0, r0, #4
    2c98:	ldr	r1, [fp, #-8]
    2c9c:	str	r0, [sp]
    2ca0:	mov	r0, r1
    2ca4:	bl	37b4 <__flatbuffers_uoffset_read_from_pe>
    2ca8:	ldr	r1, [sp]
    2cac:	add	r0, r1, r0
    2cb0:	mov	sp, fp
    2cb4:	pop	{fp, pc}
    2cb8:	movw	r0, #0
    2cbc:	movt	r0, #0
    2cc0:	movw	r1, #0
    2cc4:	movt	r1, #0
    2cc8:	movw	r2, #238	; 0xee
    2ccc:	movw	r3, #0
    2cd0:	movt	r3, #0
    2cd4:	bl	0 <__assert_fail>

00002cd8 <reflection_Enum_vec_at>:
    2cd8:	push	{fp, lr}
    2cdc:	mov	fp, sp
    2ce0:	sub	sp, sp, #16
    2ce4:	str	r0, [fp, #-4]
    2ce8:	str	r1, [sp, #8]
    2cec:	ldr	r0, [fp, #-4]
    2cf0:	ldr	r1, [sp, #8]
    2cf4:	add	r0, r0, r1, lsl #2
    2cf8:	str	r0, [sp, #4]
    2cfc:	ldr	r0, [fp, #-4]
    2d00:	bl	37ec <flatbuffers_vec_len>
    2d04:	ldr	r1, [sp, #8]
    2d08:	cmp	r0, r1
    2d0c:	bls	2d18 <reflection_Enum_vec_at+0x40>
    2d10:	b	2d14 <reflection_Enum_vec_at+0x3c>
    2d14:	b	2d38 <reflection_Enum_vec_at+0x60>
    2d18:	movw	r0, #0
    2d1c:	movt	r0, #0
    2d20:	movw	r1, #0
    2d24:	movt	r1, #0
    2d28:	movw	r2, #174	; 0xae
    2d2c:	movw	r3, #0
    2d30:	movt	r3, #0
    2d34:	bl	0 <__assert_fail>
    2d38:	ldr	r0, [sp, #4]
    2d3c:	ldr	r1, [sp, #4]
    2d40:	str	r0, [sp]
    2d44:	mov	r0, r1
    2d48:	bl	37b4 <__flatbuffers_uoffset_read_from_pe>
    2d4c:	ldr	r1, [sp]
    2d50:	add	r0, r1, r0
    2d54:	mov	sp, fp
    2d58:	pop	{fp, pc}

00002d5c <reflection_Schema_file_ident_is_present>:
    2d5c:	push	{fp, lr}
    2d60:	mov	fp, sp
    2d64:	sub	sp, sp, #16
    2d68:	str	r0, [fp, #-4]
    2d6c:	movw	r0, #0
    2d70:	strh	r0, [fp, #-6]
    2d74:	ldr	r0, [fp, #-4]
    2d78:	movw	r1, #0
    2d7c:	cmp	r0, r1
    2d80:	beq	2d8c <reflection_Schema_file_ident_is_present+0x30>
    2d84:	b	2d88 <reflection_Schema_file_ident_is_present+0x2c>
    2d88:	b	2dac <reflection_Schema_file_ident_is_present+0x50>
    2d8c:	movw	r0, #0
    2d90:	movt	r0, #0
    2d94:	movw	r1, #0
    2d98:	movt	r1, #0
    2d9c:	movw	r2, #239	; 0xef
    2da0:	movw	r3, #0
    2da4:	movt	r3, #0
    2da8:	bl	0 <__assert_fail>
    2dac:	mov	r0, #2
    2db0:	strh	r0, [sp, #8]
    2db4:	ldr	r0, [fp, #-4]
    2db8:	str	r0, [sp]
    2dbc:	bl	36cc <__flatbuffers_soffset_read_from_pe>
    2dc0:	ldr	r1, [sp]
    2dc4:	sub	r0, r1, r0
    2dc8:	str	r0, [sp, #4]
    2dcc:	ldr	r0, [sp, #4]
    2dd0:	bl	36f0 <__flatbuffers_voffset_read_from_pe>
    2dd4:	ldrh	r1, [sp, #8]
    2dd8:	add	r1, r1, #3
    2ddc:	lsl	r1, r1, #1
    2de0:	cmp	r0, r1
    2de4:	bcc	2e00 <reflection_Schema_file_ident_is_present+0xa4>
    2de8:	ldr	r0, [sp, #4]
    2dec:	ldrh	r1, [sp, #8]
    2df0:	add	r0, r0, r1, lsl #1
    2df4:	add	r0, r0, #4
    2df8:	bl	36f0 <__flatbuffers_voffset_read_from_pe>
    2dfc:	strh	r0, [fp, #-6]
    2e00:	ldrh	r0, [fp, #-6]
    2e04:	cmp	r0, #0
    2e08:	movw	r0, #0
    2e0c:	movne	r0, #1
    2e10:	and	r0, r0, #1
    2e14:	mov	sp, fp
    2e18:	pop	{fp, pc}

00002e1c <reflection_Schema_file_ident>:
    2e1c:	push	{fp, lr}
    2e20:	mov	fp, sp
    2e24:	sub	sp, sp, #32
    2e28:	str	r0, [fp, #-8]
    2e2c:	movw	r0, #0
    2e30:	strh	r0, [fp, #-14]
    2e34:	ldr	r0, [fp, #-8]
    2e38:	movw	r1, #0
    2e3c:	cmp	r0, r1
    2e40:	beq	2e4c <reflection_Schema_file_ident+0x30>
    2e44:	b	2e48 <reflection_Schema_file_ident+0x2c>
    2e48:	b	2e6c <reflection_Schema_file_ident+0x50>
    2e4c:	movw	r0, #0
    2e50:	movt	r0, #0
    2e54:	movw	r1, #0
    2e58:	movt	r1, #0
    2e5c:	movw	r2, #239	; 0xef
    2e60:	movw	r3, #0
    2e64:	movt	r3, #0
    2e68:	bl	0 <__assert_fail>
    2e6c:	mov	r0, #2
    2e70:	strh	r0, [sp, #16]
    2e74:	ldr	r0, [fp, #-8]
    2e78:	str	r0, [sp, #8]
    2e7c:	bl	36cc <__flatbuffers_soffset_read_from_pe>
    2e80:	ldr	r1, [sp, #8]
    2e84:	sub	r0, r1, r0
    2e88:	str	r0, [sp, #12]
    2e8c:	ldr	r0, [sp, #12]
    2e90:	bl	36f0 <__flatbuffers_voffset_read_from_pe>
    2e94:	ldrh	r1, [sp, #16]
    2e98:	add	r1, r1, #3
    2e9c:	lsl	r1, r1, #1
    2ea0:	cmp	r0, r1
    2ea4:	bcc	2ec0 <reflection_Schema_file_ident+0xa4>
    2ea8:	ldr	r0, [sp, #12]
    2eac:	ldrh	r1, [sp, #16]
    2eb0:	add	r0, r0, r1, lsl #1
    2eb4:	add	r0, r0, #4
    2eb8:	bl	36f0 <__flatbuffers_voffset_read_from_pe>
    2ebc:	strh	r0, [fp, #-14]
    2ec0:	ldrsh	r0, [fp, #-14]
    2ec4:	cmp	r0, #0
    2ec8:	beq	2f04 <reflection_Schema_file_ident+0xe8>
    2ecc:	ldr	r0, [fp, #-8]
    2ed0:	ldrh	r1, [fp, #-14]
    2ed4:	add	r0, r0, r1
    2ed8:	str	r0, [fp, #-12]
    2edc:	ldr	r0, [fp, #-12]
    2ee0:	add	r0, r0, #4
    2ee4:	ldr	r1, [fp, #-12]
    2ee8:	str	r0, [sp, #4]
    2eec:	mov	r0, r1
    2ef0:	bl	37b4 <__flatbuffers_uoffset_read_from_pe>
    2ef4:	ldr	r1, [sp, #4]
    2ef8:	add	r0, r1, r0
    2efc:	str	r0, [fp, #-4]
    2f00:	b	2f0c <reflection_Schema_file_ident+0xf0>
    2f04:	movw	r0, #0
    2f08:	str	r0, [fp, #-4]
    2f0c:	ldr	r0, [fp, #-4]
    2f10:	mov	sp, fp
    2f14:	pop	{fp, pc}

00002f18 <reflection_Schema_file_ext_is_present>:
    2f18:	push	{fp, lr}
    2f1c:	mov	fp, sp
    2f20:	sub	sp, sp, #16
    2f24:	str	r0, [fp, #-4]
    2f28:	movw	r0, #0
    2f2c:	strh	r0, [fp, #-6]
    2f30:	ldr	r0, [fp, #-4]
    2f34:	movw	r1, #0
    2f38:	cmp	r0, r1
    2f3c:	beq	2f48 <reflection_Schema_file_ext_is_present+0x30>
    2f40:	b	2f44 <reflection_Schema_file_ext_is_present+0x2c>
    2f44:	b	2f68 <reflection_Schema_file_ext_is_present+0x50>
    2f48:	movw	r0, #0
    2f4c:	movt	r0, #0
    2f50:	movw	r1, #0
    2f54:	movt	r1, #0
    2f58:	movw	r2, #240	; 0xf0
    2f5c:	movw	r3, #0
    2f60:	movt	r3, #0
    2f64:	bl	0 <__assert_fail>
    2f68:	mov	r0, #3
    2f6c:	strh	r0, [sp, #8]
    2f70:	ldr	r0, [fp, #-4]
    2f74:	str	r0, [sp]
    2f78:	bl	36cc <__flatbuffers_soffset_read_from_pe>
    2f7c:	ldr	r1, [sp]
    2f80:	sub	r0, r1, r0
    2f84:	str	r0, [sp, #4]
    2f88:	ldr	r0, [sp, #4]
    2f8c:	bl	36f0 <__flatbuffers_voffset_read_from_pe>
    2f90:	ldrh	r1, [sp, #8]
    2f94:	add	r1, r1, #3
    2f98:	lsl	r1, r1, #1
    2f9c:	cmp	r0, r1
    2fa0:	bcc	2fbc <reflection_Schema_file_ext_is_present+0xa4>
    2fa4:	ldr	r0, [sp, #4]
    2fa8:	ldrh	r1, [sp, #8]
    2fac:	add	r0, r0, r1, lsl #1
    2fb0:	add	r0, r0, #4
    2fb4:	bl	36f0 <__flatbuffers_voffset_read_from_pe>
    2fb8:	strh	r0, [fp, #-6]
    2fbc:	ldrh	r0, [fp, #-6]
    2fc0:	cmp	r0, #0
    2fc4:	movw	r0, #0
    2fc8:	movne	r0, #1
    2fcc:	and	r0, r0, #1
    2fd0:	mov	sp, fp
    2fd4:	pop	{fp, pc}

00002fd8 <reflection_Schema_file_ext>:
    2fd8:	push	{fp, lr}
    2fdc:	mov	fp, sp
    2fe0:	sub	sp, sp, #32
    2fe4:	str	r0, [fp, #-8]
    2fe8:	movw	r0, #0
    2fec:	strh	r0, [fp, #-14]
    2ff0:	ldr	r0, [fp, #-8]
    2ff4:	movw	r1, #0
    2ff8:	cmp	r0, r1
    2ffc:	beq	3008 <reflection_Schema_file_ext+0x30>
    3000:	b	3004 <reflection_Schema_file_ext+0x2c>
    3004:	b	3028 <reflection_Schema_file_ext+0x50>
    3008:	movw	r0, #0
    300c:	movt	r0, #0
    3010:	movw	r1, #0
    3014:	movt	r1, #0
    3018:	movw	r2, #240	; 0xf0
    301c:	movw	r3, #0
    3020:	movt	r3, #0
    3024:	bl	0 <__assert_fail>
    3028:	mov	r0, #3
    302c:	strh	r0, [sp, #16]
    3030:	ldr	r0, [fp, #-8]
    3034:	str	r0, [sp, #8]
    3038:	bl	36cc <__flatbuffers_soffset_read_from_pe>
    303c:	ldr	r1, [sp, #8]
    3040:	sub	r0, r1, r0
    3044:	str	r0, [sp, #12]
    3048:	ldr	r0, [sp, #12]
    304c:	bl	36f0 <__flatbuffers_voffset_read_from_pe>
    3050:	ldrh	r1, [sp, #16]
    3054:	add	r1, r1, #3
    3058:	lsl	r1, r1, #1
    305c:	cmp	r0, r1
    3060:	bcc	307c <reflection_Schema_file_ext+0xa4>
    3064:	ldr	r0, [sp, #12]
    3068:	ldrh	r1, [sp, #16]
    306c:	add	r0, r0, r1, lsl #1
    3070:	add	r0, r0, #4
    3074:	bl	36f0 <__flatbuffers_voffset_read_from_pe>
    3078:	strh	r0, [fp, #-14]
    307c:	ldrsh	r0, [fp, #-14]
    3080:	cmp	r0, #0
    3084:	beq	30c0 <reflection_Schema_file_ext+0xe8>
    3088:	ldr	r0, [fp, #-8]
    308c:	ldrh	r1, [fp, #-14]
    3090:	add	r0, r0, r1
    3094:	str	r0, [fp, #-12]
    3098:	ldr	r0, [fp, #-12]
    309c:	add	r0, r0, #4
    30a0:	ldr	r1, [fp, #-12]
    30a4:	str	r0, [sp, #4]
    30a8:	mov	r0, r1
    30ac:	bl	37b4 <__flatbuffers_uoffset_read_from_pe>
    30b0:	ldr	r1, [sp, #4]
    30b4:	add	r0, r1, r0
    30b8:	str	r0, [fp, #-4]
    30bc:	b	30c8 <reflection_Schema_file_ext+0xf0>
    30c0:	movw	r0, #0
    30c4:	str	r0, [fp, #-4]
    30c8:	ldr	r0, [fp, #-4]
    30cc:	mov	sp, fp
    30d0:	pop	{fp, pc}

000030d4 <reflection_Schema_root_table_is_present>:
    30d4:	push	{fp, lr}
    30d8:	mov	fp, sp
    30dc:	sub	sp, sp, #16
    30e0:	str	r0, [fp, #-4]
    30e4:	movw	r0, #0
    30e8:	strh	r0, [fp, #-6]
    30ec:	ldr	r0, [fp, #-4]
    30f0:	movw	r1, #0
    30f4:	cmp	r0, r1
    30f8:	beq	3104 <reflection_Schema_root_table_is_present+0x30>
    30fc:	b	3100 <reflection_Schema_root_table_is_present+0x2c>
    3100:	b	3124 <reflection_Schema_root_table_is_present+0x50>
    3104:	movw	r0, #0
    3108:	movt	r0, #0
    310c:	movw	r1, #0
    3110:	movt	r1, #0
    3114:	movw	r2, #241	; 0xf1
    3118:	movw	r3, #0
    311c:	movt	r3, #0
    3120:	bl	0 <__assert_fail>
    3124:	mov	r0, #4
    3128:	strh	r0, [sp, #8]
    312c:	ldr	r0, [fp, #-4]
    3130:	str	r0, [sp]
    3134:	bl	36cc <__flatbuffers_soffset_read_from_pe>
    3138:	ldr	r1, [sp]
    313c:	sub	r0, r1, r0
    3140:	str	r0, [sp, #4]
    3144:	ldr	r0, [sp, #4]
    3148:	bl	36f0 <__flatbuffers_voffset_read_from_pe>
    314c:	ldrh	r1, [sp, #8]
    3150:	add	r1, r1, #3
    3154:	lsl	r1, r1, #1
    3158:	cmp	r0, r1
    315c:	bcc	3178 <reflection_Schema_root_table_is_present+0xa4>
    3160:	ldr	r0, [sp, #4]
    3164:	ldrh	r1, [sp, #8]
    3168:	add	r0, r0, r1, lsl #1
    316c:	add	r0, r0, #4
    3170:	bl	36f0 <__flatbuffers_voffset_read_from_pe>
    3174:	strh	r0, [fp, #-6]
    3178:	ldrh	r0, [fp, #-6]
    317c:	cmp	r0, #0
    3180:	movw	r0, #0
    3184:	movne	r0, #1
    3188:	and	r0, r0, #1
    318c:	mov	sp, fp
    3190:	pop	{fp, pc}

00003194 <reflection_Schema_root_table>:
    3194:	push	{fp, lr}
    3198:	mov	fp, sp
    319c:	sub	sp, sp, #32
    31a0:	str	r0, [fp, #-8]
    31a4:	movw	r0, #0
    31a8:	strh	r0, [fp, #-14]
    31ac:	ldr	r0, [fp, #-8]
    31b0:	movw	r1, #0
    31b4:	cmp	r0, r1
    31b8:	beq	31c4 <reflection_Schema_root_table+0x30>
    31bc:	b	31c0 <reflection_Schema_root_table+0x2c>
    31c0:	b	31e4 <reflection_Schema_root_table+0x50>
    31c4:	movw	r0, #0
    31c8:	movt	r0, #0
    31cc:	movw	r1, #0
    31d0:	movt	r1, #0
    31d4:	movw	r2, #241	; 0xf1
    31d8:	movw	r3, #0
    31dc:	movt	r3, #0
    31e0:	bl	0 <__assert_fail>
    31e4:	mov	r0, #4
    31e8:	strh	r0, [sp, #16]
    31ec:	ldr	r0, [fp, #-8]
    31f0:	str	r0, [sp, #8]
    31f4:	bl	36cc <__flatbuffers_soffset_read_from_pe>
    31f8:	ldr	r1, [sp, #8]
    31fc:	sub	r0, r1, r0
    3200:	str	r0, [sp, #12]
    3204:	ldr	r0, [sp, #12]
    3208:	bl	36f0 <__flatbuffers_voffset_read_from_pe>
    320c:	ldrh	r1, [sp, #16]
    3210:	add	r1, r1, #3
    3214:	lsl	r1, r1, #1
    3218:	cmp	r0, r1
    321c:	bcc	3238 <reflection_Schema_root_table+0xa4>
    3220:	ldr	r0, [sp, #12]
    3224:	ldrh	r1, [sp, #16]
    3228:	add	r0, r0, r1, lsl #1
    322c:	add	r0, r0, #4
    3230:	bl	36f0 <__flatbuffers_voffset_read_from_pe>
    3234:	strh	r0, [fp, #-14]
    3238:	ldrsh	r0, [fp, #-14]
    323c:	cmp	r0, #0
    3240:	beq	3278 <reflection_Schema_root_table+0xe4>
    3244:	ldr	r0, [fp, #-8]
    3248:	ldrh	r1, [fp, #-14]
    324c:	add	r0, r0, r1
    3250:	str	r0, [fp, #-12]
    3254:	ldr	r0, [fp, #-12]
    3258:	ldr	r1, [fp, #-12]
    325c:	str	r0, [sp, #4]
    3260:	mov	r0, r1
    3264:	bl	37b4 <__flatbuffers_uoffset_read_from_pe>
    3268:	ldr	r1, [sp, #4]
    326c:	add	r0, r1, r0
    3270:	str	r0, [fp, #-4]
    3274:	b	3280 <reflection_Schema_root_table+0xec>
    3278:	movw	r0, #0
    327c:	str	r0, [fp, #-4]
    3280:	ldr	r0, [fp, #-4]
    3284:	mov	sp, fp
    3288:	pop	{fp, pc}

0000328c <load_and_dump_schema>:
    328c:	push	{fp, lr}
    3290:	mov	fp, sp
    3294:	sub	sp, sp, #24
    3298:	str	r0, [fp, #-4]
    329c:	mvn	r0, #0
    32a0:	str	r0, [sp, #8]
    32a4:	ldr	r0, [fp, #-4]
    32a8:	movw	r1, #10000	; 0x2710
    32ac:	add	r2, sp, #12
    32b0:	bl	33cc <readfile>
    32b4:	str	r0, [fp, #-8]
    32b8:	ldr	r0, [fp, #-8]
    32bc:	movw	r1, #0
    32c0:	cmp	r0, r1
    32c4:	bne	32e8 <load_and_dump_schema+0x5c>
    32c8:	movw	r0, #0
    32cc:	movt	r0, #0
    32d0:	ldr	r0, [r0]
    32d4:	ldr	r2, [fp, #-4]
    32d8:	movw	r1, #0
    32dc:	movt	r1, #0
    32e0:	bl	0 <fprintf>
    32e4:	b	33a8 <load_and_dump_schema+0x11c>
    32e8:	ldr	r0, [sp, #12]
    32ec:	cmp	r0, #12
    32f0:	bcs	3314 <load_and_dump_schema+0x88>
    32f4:	movw	r0, #0
    32f8:	movt	r0, #0
    32fc:	ldr	r0, [r0]
    3300:	ldr	r2, [fp, #-4]
    3304:	movw	r1, #0
    3308:	movt	r1, #0
    330c:	bl	0 <fprintf>
    3310:	b	33a8 <load_and_dump_schema+0x11c>
    3314:	ldr	r0, [fp, #-8]
    3318:	bl	35b0 <reflection_Schema_as_root>
    331c:	str	r0, [sp, #4]
    3320:	ldr	r0, [sp, #4]
    3324:	movw	r1, #0
    3328:	cmp	r0, r1
    332c:	bne	336c <load_and_dump_schema+0xe0>
    3330:	ldr	r0, [fp, #-8]
    3334:	add	r0, r0, #4
    3338:	bl	35b0 <reflection_Schema_as_root>
    333c:	str	r0, [sp, #4]
    3340:	ldr	r0, [sp, #4]
    3344:	movw	r1, #0
    3348:	cmp	r0, r1
    334c:	beq	3368 <load_and_dump_schema+0xdc>
    3350:	movw	r0, #0
    3354:	movt	r0, #0
    3358:	ldr	r0, [r0]
    335c:	movw	r1, #0
    3360:	movt	r1, #0
    3364:	bl	0 <fprintf>
    3368:	b	336c <load_and_dump_schema+0xe0>
    336c:	ldr	r0, [sp, #4]
    3370:	movw	r1, #0
    3374:	cmp	r0, r1
    3378:	bne	3398 <load_and_dump_schema+0x10c>
    337c:	movw	r0, #0
    3380:	movt	r0, #0
    3384:	ldr	r0, [r0]
    3388:	movw	r1, #0
    338c:	movt	r1, #0
    3390:	bl	0 <fprintf>
    3394:	b	33a8 <load_and_dump_schema+0x11c>
    3398:	ldr	r0, [sp, #4]
    339c:	bl	2814 <print_schema>
    33a0:	movw	r0, #0
    33a4:	str	r0, [sp, #8]
    33a8:	ldr	r0, [fp, #-8]
    33ac:	movw	r1, #0
    33b0:	cmp	r0, r1
    33b4:	beq	33c0 <load_and_dump_schema+0x134>
    33b8:	ldr	r0, [fp, #-8]
    33bc:	bl	0 <free>
    33c0:	ldr	r0, [sp, #8]
    33c4:	mov	sp, fp
    33c8:	pop	{fp, pc}

000033cc <readfile>:
    33cc:	push	{fp, lr}
    33d0:	mov	fp, sp
    33d4:	sub	sp, sp, #56	; 0x38
    33d8:	str	r0, [fp, #-8]
    33dc:	str	r1, [fp, #-12]
    33e0:	str	r2, [fp, #-16]
    33e4:	ldr	r0, [fp, #-16]
    33e8:	movw	r1, #0
    33ec:	cmp	r0, r1
    33f0:	beq	3400 <readfile+0x34>
    33f4:	ldr	r0, [fp, #-16]
    33f8:	str	r0, [sp, #12]
    33fc:	b	340c <readfile+0x40>
    3400:	add	r0, sp, #20
    3404:	str	r0, [sp, #12]
    3408:	b	340c <readfile+0x40>
    340c:	ldr	r0, [sp, #12]
    3410:	str	r0, [fp, #-16]
    3414:	ldr	r0, [fp, #-8]
    3418:	movw	r1, #0
    341c:	movt	r1, #0
    3420:	bl	0 <fopen>
    3424:	str	r0, [fp, #-20]	; 0xffffffec
    3428:	movw	r0, #0
    342c:	str	r0, [fp, #-24]	; 0xffffffe8
    3430:	str	r0, [sp, #16]
    3434:	ldr	r1, [fp, #-20]	; 0xffffffec
    3438:	cmp	r1, r0
    343c:	bne	3444 <readfile+0x78>
    3440:	b	3560 <readfile+0x194>
    3444:	ldr	r0, [fp, #-20]	; 0xffffffec
    3448:	movw	r1, #0
    344c:	movw	r2, #2
    3450:	bl	0 <fseek>
    3454:	ldr	r1, [fp, #-20]	; 0xffffffec
    3458:	str	r0, [sp, #8]
    345c:	mov	r0, r1
    3460:	bl	0 <ftell>
    3464:	str	r0, [fp, #-24]	; 0xffffffe8
    3468:	ldr	r0, [fp, #-24]	; 0xffffffe8
    346c:	ldr	r1, [fp, #-16]
    3470:	str	r0, [r1]
    3474:	ldr	r0, [fp, #-12]
    3478:	cmp	r0, #0
    347c:	bls	3494 <readfile+0xc8>
    3480:	ldr	r0, [fp, #-24]	; 0xffffffe8
    3484:	ldr	r1, [fp, #-12]
    3488:	cmp	r0, r1
    348c:	bls	3494 <readfile+0xc8>
    3490:	b	3560 <readfile+0x194>
    3494:	ldr	r0, [fp, #-20]	; 0xffffffec
    3498:	bl	0 <rewind>
    349c:	ldr	r0, [fp, #-24]	; 0xffffffe8
    34a0:	cmp	r0, #0
    34a4:	beq	34b4 <readfile+0xe8>
    34a8:	ldr	r0, [fp, #-24]	; 0xffffffe8
    34ac:	str	r0, [sp, #4]
    34b0:	b	34c0 <readfile+0xf4>
    34b4:	movw	r0, #1
    34b8:	str	r0, [sp, #4]
    34bc:	b	34c0 <readfile+0xf4>
    34c0:	ldr	r0, [sp, #4]
    34c4:	bl	0 <malloc>
    34c8:	str	r0, [sp, #16]
    34cc:	ldr	r0, [sp, #16]
    34d0:	movw	r1, #0
    34d4:	cmp	r0, r1
    34d8:	bne	34e0 <readfile+0x114>
    34dc:	b	3560 <readfile+0x194>
    34e0:	movw	r0, #0
    34e4:	str	r0, [sp, #28]
    34e8:	ldr	r0, [sp, #16]
    34ec:	ldr	r1, [sp, #28]
    34f0:	add	r0, r0, r1
    34f4:	ldr	r1, [fp, #-24]	; 0xffffffe8
    34f8:	ldr	r2, [sp, #28]
    34fc:	sub	r2, r1, r2
    3500:	ldr	r3, [fp, #-20]	; 0xffffffec
    3504:	movw	r1, #1
    3508:	bl	0 <fread>
    350c:	str	r0, [sp, #24]
    3510:	cmp	r0, #0
    3514:	beq	352c <readfile+0x160>
    3518:	ldr	r0, [sp, #24]
    351c:	ldr	r1, [sp, #28]
    3520:	add	r0, r1, r0
    3524:	str	r0, [sp, #28]
    3528:	b	34e8 <readfile+0x11c>
    352c:	ldr	r0, [sp, #28]
    3530:	ldr	r1, [fp, #-24]	; 0xffffffe8
    3534:	cmp	r0, r1
    3538:	beq	3540 <readfile+0x174>
    353c:	b	3560 <readfile+0x194>
    3540:	ldr	r0, [fp, #-20]	; 0xffffffec
    3544:	bl	0 <fclose>
    3548:	ldr	r1, [fp, #-24]	; 0xffffffe8
    354c:	ldr	r2, [fp, #-16]
    3550:	str	r1, [r2]
    3554:	ldr	r1, [sp, #16]
    3558:	str	r1, [fp, #-4]
    355c:	b	35a4 <readfile+0x1d8>
    3560:	ldr	r0, [fp, #-20]	; 0xffffffec
    3564:	movw	r1, #0
    3568:	cmp	r0, r1
    356c:	beq	3578 <readfile+0x1ac>
    3570:	ldr	r0, [fp, #-20]	; 0xffffffec
    3574:	bl	0 <fclose>
    3578:	ldr	r0, [sp, #16]
    357c:	movw	r1, #0
    3580:	cmp	r0, r1
    3584:	beq	3590 <readfile+0x1c4>
    3588:	ldr	r0, [sp, #16]
    358c:	bl	0 <free>
    3590:	ldr	r0, [fp, #-24]	; 0xffffffe8
    3594:	ldr	r1, [fp, #-16]
    3598:	str	r0, [r1]
    359c:	movw	r0, #0
    35a0:	str	r0, [fp, #-4]
    35a4:	ldr	r0, [fp, #-4]
    35a8:	mov	sp, fp
    35ac:	pop	{fp, pc}

000035b0 <reflection_Schema_as_root>:
    35b0:	push	{fp, lr}
    35b4:	mov	fp, sp
    35b8:	sub	sp, sp, #16
    35bc:	str	r0, [fp, #-4]
    35c0:	movw	r0, #0
    35c4:	movt	r0, #0
    35c8:	str	r0, [sp, #8]
    35cc:	ldr	r0, [fp, #-4]
    35d0:	movw	r1, #0
    35d4:	cmp	r0, r1
    35d8:	beq	35f0 <reflection_Schema_as_root+0x40>
    35dc:	ldr	r0, [fp, #-4]
    35e0:	ldr	r1, [sp, #8]
    35e4:	bl	3944 <flatbuffers_has_identifier>
    35e8:	cmp	r0, #0
    35ec:	bne	35fc <reflection_Schema_as_root+0x4c>
    35f0:	movw	r0, #0
    35f4:	str	r0, [sp, #4]
    35f8:	b	361c <reflection_Schema_as_root+0x6c>
    35fc:	ldr	r0, [fp, #-4]
    3600:	ldr	r1, [fp, #-4]
    3604:	str	r0, [sp]
    3608:	mov	r0, r1
    360c:	bl	37b4 <__flatbuffers_uoffset_read_from_pe>
    3610:	ldr	r1, [sp]
    3614:	add	r0, r1, r0
    3618:	str	r0, [sp, #4]
    361c:	ldr	r0, [sp, #4]
    3620:	mov	sp, fp
    3624:	pop	{fp, pc}

00003628 <main>:
    3628:	push	{fp, lr}
    362c:	mov	fp, sp
    3630:	sub	sp, sp, #24
    3634:	movw	r2, #0
    3638:	str	r2, [fp, #-4]
    363c:	str	r0, [fp, #-8]
    3640:	str	r1, [sp, #12]
    3644:	ldr	r0, [fp, #-8]
    3648:	cmp	r0, #2
    364c:	beq	36b8 <main+0x90>
    3650:	movw	r0, #0
    3654:	movt	r0, #0
    3658:	ldr	r0, [r0]
    365c:	movw	r1, #0
    3660:	movt	r1, #0
    3664:	bl	0 <fprintf>
    3668:	movw	r1, #0
    366c:	movt	r1, #0
    3670:	ldr	r1, [r1]
    3674:	str	r0, [sp, #8]
    3678:	mov	r0, r1
    367c:	movw	r1, #0
    3680:	movt	r1, #0
    3684:	bl	0 <fprintf>
    3688:	movw	r1, #0
    368c:	movt	r1, #0
    3690:	ldr	r1, [r1]
    3694:	str	r0, [sp, #4]
    3698:	mov	r0, r1
    369c:	movw	r1, #0
    36a0:	movt	r1, #0
    36a4:	bl	0 <fprintf>
    36a8:	mvn	r1, #0
    36ac:	str	r0, [sp]
    36b0:	mov	r0, r1
    36b4:	bl	0 <exit>
    36b8:	ldr	r0, [sp, #12]
    36bc:	ldr	r0, [r0, #4]
    36c0:	bl	328c <load_and_dump_schema>
    36c4:	mov	sp, fp
    36c8:	pop	{fp, pc}

000036cc <__flatbuffers_soffset_read_from_pe>:
    36cc:	push	{fp, lr}
    36d0:	mov	fp, sp
    36d4:	sub	sp, sp, #8
    36d8:	str	r0, [sp, #4]
    36dc:	ldr	r0, [sp, #4]
    36e0:	ldr	r0, [r0]
    36e4:	bl	3718 <__flatbuffers_soffset_cast_from_pe>
    36e8:	mov	sp, fp
    36ec:	pop	{fp, pc}

000036f0 <__flatbuffers_voffset_read_from_pe>:
    36f0:	push	{fp, lr}
    36f4:	mov	fp, sp
    36f8:	sub	sp, sp, #8
    36fc:	str	r0, [sp, #4]
    3700:	ldr	r0, [sp, #4]
    3704:	ldrh	r0, [r0]
    3708:	bl	372c <__flatbuffers_voffset_cast_from_pe>
    370c:	uxth	r0, r0
    3710:	mov	sp, fp
    3714:	pop	{fp, pc}

00003718 <__flatbuffers_soffset_cast_from_pe>:
    3718:	sub	sp, sp, #4
    371c:	str	r0, [sp]
    3720:	ldr	r0, [sp]
    3724:	add	sp, sp, #4
    3728:	bx	lr

0000372c <__flatbuffers_voffset_cast_from_pe>:
    372c:	sub	sp, sp, #4
    3730:	strh	r0, [sp, #2]
    3734:	ldrh	r0, [sp, #2]
    3738:	add	sp, sp, #4
    373c:	bx	lr

00003740 <reflection_BaseType_read_from_pe>:
    3740:	push	{fp, lr}
    3744:	mov	fp, sp
    3748:	sub	sp, sp, #8
    374c:	str	r0, [sp, #4]
    3750:	ldr	r0, [sp, #4]
    3754:	ldrsb	r0, [r0]
    3758:	bl	3768 <reflection_BaseType_cast_from_pe>
    375c:	sxtb	r0, r0
    3760:	mov	sp, fp
    3764:	pop	{fp, pc}

00003768 <reflection_BaseType_cast_from_pe>:
    3768:	sub	sp, sp, #4
    376c:	strb	r0, [sp, #3]
    3770:	ldrsb	r0, [sp, #3]
    3774:	add	sp, sp, #4
    3778:	bx	lr

0000377c <flatbuffers_int32_read_from_pe>:
    377c:	push	{fp, lr}
    3780:	mov	fp, sp
    3784:	sub	sp, sp, #8
    3788:	str	r0, [sp, #4]
    378c:	ldr	r0, [sp, #4]
    3790:	ldr	r0, [r0]
    3794:	bl	37a0 <flatbuffers_int32_cast_from_pe>
    3798:	mov	sp, fp
    379c:	pop	{fp, pc}

000037a0 <flatbuffers_int32_cast_from_pe>:
    37a0:	sub	sp, sp, #4
    37a4:	str	r0, [sp]
    37a8:	ldr	r0, [sp]
    37ac:	add	sp, sp, #4
    37b0:	bx	lr

000037b4 <__flatbuffers_uoffset_read_from_pe>:
    37b4:	push	{fp, lr}
    37b8:	mov	fp, sp
    37bc:	sub	sp, sp, #8
    37c0:	str	r0, [sp, #4]
    37c4:	ldr	r0, [sp, #4]
    37c8:	ldr	r0, [r0]
    37cc:	bl	37d8 <__flatbuffers_uoffset_cast_from_pe>
    37d0:	mov	sp, fp
    37d4:	pop	{fp, pc}

000037d8 <__flatbuffers_uoffset_cast_from_pe>:
    37d8:	sub	sp, sp, #4
    37dc:	str	r0, [sp]
    37e0:	ldr	r0, [sp]
    37e4:	add	sp, sp, #4
    37e8:	bx	lr

000037ec <flatbuffers_vec_len>:
    37ec:	push	{fp, lr}
    37f0:	mov	fp, sp
    37f4:	sub	sp, sp, #8
    37f8:	str	r0, [sp, #4]
    37fc:	ldr	r0, [sp, #4]
    3800:	movw	r1, #0
    3804:	cmp	r0, r1
    3808:	beq	3824 <flatbuffers_vec_len+0x38>
    380c:	ldr	r0, [sp, #4]
    3810:	mvn	r1, #3
    3814:	add	r0, r0, r1
    3818:	bl	37b4 <__flatbuffers_uoffset_read_from_pe>
    381c:	str	r0, [sp]
    3820:	b	3830 <flatbuffers_vec_len+0x44>
    3824:	movw	r0, #0
    3828:	str	r0, [sp]
    382c:	b	3830 <flatbuffers_vec_len+0x44>
    3830:	ldr	r0, [sp]
    3834:	mov	sp, fp
    3838:	pop	{fp, pc}

0000383c <flatbuffers_uint16_read_from_pe>:
    383c:	push	{fp, lr}
    3840:	mov	fp, sp
    3844:	sub	sp, sp, #8
    3848:	str	r0, [sp, #4]
    384c:	ldr	r0, [sp, #4]
    3850:	ldrh	r0, [r0]
    3854:	bl	3864 <flatbuffers_uint16_cast_from_pe>
    3858:	uxth	r0, r0
    385c:	mov	sp, fp
    3860:	pop	{fp, pc}

00003864 <flatbuffers_uint16_cast_from_pe>:
    3864:	sub	sp, sp, #4
    3868:	strh	r0, [sp, #2]
    386c:	ldrh	r0, [sp, #2]
    3870:	add	sp, sp, #4
    3874:	bx	lr

00003878 <flatbuffers_int64_read_from_pe>:
    3878:	push	{fp, lr}
    387c:	mov	fp, sp
    3880:	sub	sp, sp, #8
    3884:	str	r0, [sp, #4]
    3888:	ldr	r0, [sp, #4]
    388c:	ldr	r1, [r0]
    3890:	ldr	r0, [r0, #4]
    3894:	str	r0, [sp]
    3898:	mov	r0, r1
    389c:	ldr	r1, [sp]
    38a0:	bl	38ac <flatbuffers_int64_cast_from_pe>
    38a4:	mov	sp, fp
    38a8:	pop	{fp, pc}

000038ac <flatbuffers_int64_cast_from_pe>:
    38ac:	sub	sp, sp, #8
    38b0:	str	r0, [sp]
    38b4:	str	r1, [sp, #4]
    38b8:	ldr	r0, [sp]
    38bc:	ldr	r1, [sp, #4]
    38c0:	add	sp, sp, #8
    38c4:	bx	lr

000038c8 <flatbuffers_double_read_from_pe>:
    38c8:	push	{fp, lr}
    38cc:	mov	fp, sp
    38d0:	sub	sp, sp, #8
    38d4:	str	r0, [sp, #4]
    38d8:	ldr	r0, [sp, #4]
    38dc:	vldr	d0, [r0]
    38e0:	bl	38ec <flatbuffers_double_cast_from_pe>
    38e4:	mov	sp, fp
    38e8:	pop	{fp, pc}

000038ec <flatbuffers_double_cast_from_pe>:
    38ec:	sub	sp, sp, #16
    38f0:	vstr	d0, [sp, #8]
    38f4:	vldr	d16, [sp, #8]
    38f8:	vstr	d16, [sp]
    38fc:	vldr	d0, [sp]
    3900:	add	sp, sp, #16
    3904:	bx	lr

00003908 <flatbuffers_bool_read_from_pe>:
    3908:	push	{fp, lr}
    390c:	mov	fp, sp
    3910:	sub	sp, sp, #8
    3914:	str	r0, [sp, #4]
    3918:	ldr	r0, [sp, #4]
    391c:	ldrb	r0, [r0]
    3920:	bl	3930 <flatbuffers_bool_cast_from_pe>
    3924:	and	r0, r0, #255	; 0xff
    3928:	mov	sp, fp
    392c:	pop	{fp, pc}

00003930 <flatbuffers_bool_cast_from_pe>:
    3930:	sub	sp, sp, #4
    3934:	strb	r0, [sp, #3]
    3938:	ldrb	r0, [sp, #3]
    393c:	add	sp, sp, #4
    3940:	bx	lr

00003944 <flatbuffers_has_identifier>:
    3944:	push	{fp, lr}
    3948:	mov	fp, sp
    394c:	sub	sp, sp, #32
    3950:	str	r0, [fp, #-8]
    3954:	str	r1, [fp, #-12]
    3958:	movw	r0, #0
    395c:	str	r0, [sp, #12]
    3960:	ldr	r1, [fp, #-12]
    3964:	cmp	r1, r0
    3968:	bne	3978 <flatbuffers_has_identifier+0x34>
    396c:	movw	r0, #1
    3970:	str	r0, [fp, #-4]
    3974:	b	39e4 <flatbuffers_has_identifier+0xa0>
    3978:	add	r0, sp, #12
    397c:	ldr	r1, [fp, #-12]
    3980:	movw	r2, #4
    3984:	bl	0 <strncpy>
    3988:	ldr	r1, [sp, #12]
    398c:	str	r0, [sp, #8]
    3990:	mov	r0, r1
    3994:	bl	39f0 <__flatbuffers_thash_cast_from_le>
    3998:	str	r0, [sp, #12]
    399c:	ldr	r0, [fp, #-8]
    39a0:	add	r0, r0, #4
    39a4:	bl	3a04 <__flatbuffers_thash_read_from_pe>
    39a8:	str	r0, [sp, #16]
    39ac:	ldr	r0, [sp, #12]
    39b0:	cmp	r0, #0
    39b4:	movw	r0, #1
    39b8:	str	r0, [sp, #4]
    39bc:	beq	39d8 <flatbuffers_has_identifier+0x94>
    39c0:	ldr	r0, [sp, #16]
    39c4:	ldr	r1, [sp, #12]
    39c8:	cmp	r0, r1
    39cc:	movw	r0, #0
    39d0:	moveq	r0, #1
    39d4:	str	r0, [sp, #4]
    39d8:	ldr	r0, [sp, #4]
    39dc:	and	r0, r0, #1
    39e0:	str	r0, [fp, #-4]
    39e4:	ldr	r0, [fp, #-4]
    39e8:	mov	sp, fp
    39ec:	pop	{fp, pc}

000039f0 <__flatbuffers_thash_cast_from_le>:
    39f0:	sub	sp, sp, #4
    39f4:	str	r0, [sp]
    39f8:	ldr	r0, [sp]
    39fc:	add	sp, sp, #4
    3a00:	bx	lr

00003a04 <__flatbuffers_thash_read_from_pe>:
    3a04:	push	{fp, lr}
    3a08:	mov	fp, sp
    3a0c:	sub	sp, sp, #8
    3a10:	str	r0, [sp, #4]
    3a14:	ldr	r0, [sp, #4]
    3a18:	ldr	r0, [r0]
    3a1c:	bl	3a28 <__flatbuffers_thash_cast_from_pe>
    3a20:	mov	sp, fp
    3a24:	pop	{fp, pc}

00003a28 <__flatbuffers_thash_cast_from_pe>:
    3a28:	sub	sp, sp, #4
    3a2c:	str	r0, [sp]
    3a30:	ldr	r0, [sp]
    3a34:	add	sp, sp, #4
    3a38:	bx	lr
