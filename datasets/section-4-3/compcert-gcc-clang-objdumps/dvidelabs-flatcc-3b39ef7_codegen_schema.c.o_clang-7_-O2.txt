
../compcert-repos/dvidelabs-flatcc-3b39ef7/src/compiler/CMakeFiles/flatcc.dir/codegen_schema.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <__flatcc_fb_codegen_bfbs_to_buffer>:
       0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
       4:	add	fp, sp, #24
       8:	sub	sp, sp, #232	; 0xe8
       c:	mov	r5, sp
      10:	mov	r7, r0
      14:	mov	r8, r3
      18:	mov	r4, r2
      1c:	mov	r6, r1
      20:	mov	r0, r5
      24:	bl	0 <flatcc_builder_init>
      28:	mov	r0, r5
      2c:	mov	r1, r7
      30:	mov	r2, r6
      34:	bl	78 <export_schema>
      38:	ldr	r2, [r8]
      3c:	mov	r0, r5
      40:	mov	r1, r4
      44:	bl	0 <flatcc_builder_copy_buffer>
      48:	cmp	r0, #0
      4c:	movne	r0, r4
      50:	blne	de8 <sort_fields>
      54:	mov	r5, sp
      58:	mov	r0, r5
      5c:	bl	0 <flatcc_builder_get_buffer_size>
      60:	str	r0, [r8]
      64:	mov	r0, r5
      68:	bl	0 <flatcc_builder_clear>
      6c:	mov	r0, r4
      70:	sub	sp, fp, #24
      74:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

00000078 <export_schema>:
      78:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
      7c:	add	fp, sp, #28
      80:	sub	sp, sp, #4
      84:	vpush	{d8}
      88:	sub	sp, sp, #96	; 0x60
      8c:	add	r6, sp, #48	; 0x30
      90:	str	r1, [sp, #40]	; 0x28
      94:	ldr	r3, [r1, #184]	; 0xb8
      98:	vmov.i32	q8, #0	; 0x00000000
      9c:	mov	r5, r0
      a0:	ldr	r0, [r2, #60]	; 0x3c
      a4:	str	r2, [sp, #8]
      a8:	add	r1, r6, #20
      ac:	vst1.32	{d16-d17}, [r1]
      b0:	orr	r1, r6, #4
      b4:	vst1.32	{d16-d17}, [r1]
      b8:	mov	r1, #0
      bc:	str	r1, [sp, #84]	; 0x54
      c0:	movw	r1, #0
      c4:	str	r2, [sp, #88]	; 0x58
      c8:	mov	r2, r6
      cc:	str	r3, [sp, #48]	; 0x30
      d0:	str	r0, [sp, #44]	; 0x2c
      d4:	movt	r1, #0
      d8:	bl	0 <fb_scope_table_visit>
      dc:	ldr	r9, [sp, #52]	; 0x34
      e0:	mov	r1, #8
      e4:	mov	r0, r9
      e8:	bl	0 <calloc>
      ec:	str	r0, [sp, #64]	; 0x40
      f0:	mov	r7, r0
      f4:	mov	r1, #8
      f8:	ldr	sl, [sp, #56]	; 0x38
      fc:	mov	r0, sl
     100:	bl	0 <calloc>
     104:	str	r0, [sp, #68]	; 0x44
     108:	mov	r4, r0
     10c:	ldr	r8, [sp, #60]	; 0x3c
     110:	mov	r0, r8
     114:	bl	0 <malloc>
     118:	cmp	r9, #1
     11c:	str	r0, [sp, #72]	; 0x48
     120:	str	r7, [sp, #76]	; 0x4c
     124:	str	r4, [sp, #80]	; 0x50
     128:	str	r0, [sp, #84]	; 0x54
     12c:	blt	138 <export_schema+0xc0>
     130:	cmp	r7, #0
     134:	beq	16c <export_schema+0xf4>
     138:	cmp	sl, #1
     13c:	blt	148 <export_schema+0xd0>
     140:	cmp	r4, #0
     144:	beq	158 <export_schema+0xe0>
     148:	cmp	r8, #0
     14c:	beq	1bc <export_schema+0x144>
     150:	cmp	r0, #0
     154:	bne	1bc <export_schema+0x144>
     158:	cmp	r7, #0
     15c:	beq	16c <export_schema+0xf4>
     160:	mov	r0, r7
     164:	bl	0 <free>
     168:	ldr	r4, [sp, #68]	; 0x44
     16c:	cmp	r4, #0
     170:	beq	17c <export_schema+0x104>
     174:	mov	r0, r4
     178:	bl	0 <free>
     17c:	ldr	r0, [sp, #72]	; 0x48
     180:	cmp	r0, #0
     184:	beq	18c <export_schema+0x114>
     188:	bl	0 <free>
     18c:	vmov.i32	q8, #0	; 0x00000000
     190:	mov	r0, #28
     194:	add	r1, r6, #16
     198:	vst1.64	{d16-d17}, [r6], r0
     19c:	vst1.32	{d16-d17}, [r6]
     1a0:	vst1.64	{d16-d17}, [r1]
     1a4:	mvn	r4, #0
     1a8:	mov	r0, r4
     1ac:	sub	sp, fp, #40	; 0x28
     1b0:	vpop	{d8}
     1b4:	add	sp, sp, #4
     1b8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
     1bc:	ldr	r0, [sp, #44]	; 0x2c
     1c0:	movw	r1, #0
     1c4:	add	r2, sp, #48	; 0x30
     1c8:	movt	r1, #0
     1cc:	bl	0 <fb_scope_table_visit>
     1d0:	ldr	r4, [sp, #52]	; 0x34
     1d4:	ldr	r6, [sp, #64]	; 0x40
     1d8:	movw	r3, #0
     1dc:	mov	r2, #8
     1e0:	movt	r3, #0
     1e4:	mov	r0, r6
     1e8:	mov	r1, r4
     1ec:	bl	0 <qsort>
     1f0:	cmp	r4, #1
     1f4:	blt	210 <export_schema+0x198>
     1f8:	mov	r0, #0
     1fc:	ldr	r1, [r6, r0, lsl #3]
     200:	str	r0, [r1, #124]	; 0x7c
     204:	add	r0, r0, #1
     208:	cmp	r4, r0
     20c:	bne	1fc <export_schema+0x184>
     210:	ldr	r4, [sp, #56]	; 0x38
     214:	ldr	r6, [sp, #68]	; 0x44
     218:	movw	r3, #0
     21c:	mov	r2, #8
     220:	movt	r3, #0
     224:	mov	r0, r6
     228:	mov	r1, r4
     22c:	bl	0 <qsort>
     230:	cmp	r4, #1
     234:	blt	250 <export_schema+0x1d8>
     238:	mov	r0, #0
     23c:	ldr	r1, [r6, r0, lsl #3]
     240:	str	r0, [r1, #124]	; 0x7c
     244:	add	r0, r0, #1
     248:	cmp	r4, r0
     24c:	bne	23c <export_schema+0x1c4>
     250:	ldr	r0, [sp, #52]	; 0x34
     254:	cmp	r0, #1
     258:	blt	2bc <export_schema+0x244>
     25c:	lsl	r0, r0, #2
     260:	bl	0 <malloc>
     264:	cmp	r0, #0
     268:	bne	2c0 <export_schema+0x248>
     26c:	ldr	r0, [sp, #64]	; 0x40
     270:	cmp	r0, #0
     274:	beq	27c <export_schema+0x204>
     278:	bl	0 <free>
     27c:	ldr	r0, [sp, #68]	; 0x44
     280:	cmp	r0, #0
     284:	beq	28c <export_schema+0x214>
     288:	bl	0 <free>
     28c:	ldr	r0, [sp, #72]	; 0x48
     290:	cmp	r0, #0
     294:	beq	29c <export_schema+0x224>
     298:	bl	0 <free>
     29c:	add	r1, sp, #48	; 0x30
     2a0:	vmov.i32	q8, #0	; 0x00000000
     2a4:	mov	r0, #28
     2a8:	mov	r2, r1
     2ac:	add	r1, r1, #16
     2b0:	vst1.64	{d16-d17}, [r2], r0
     2b4:	vst1.32	{d16-d17}, [r2]
     2b8:	b	1a0 <export_schema+0x128>
     2bc:	mov	r0, #0
     2c0:	str	r0, [sp, #20]
     2c4:	ldr	r0, [sp, #40]	; 0x28
     2c8:	movw	r1, #0
     2cc:	mov	r2, #0
     2d0:	movt	r1, #0
     2d4:	ldr	r0, [r0, #188]	; 0xbc
     2d8:	cmp	r0, #0
     2dc:	mov	r0, r5
     2e0:	moveq	r3, #0
     2e4:	movne	r3, #2
     2e8:	bl	0 <flatcc_builder_start_buffer>
     2ec:	cmp	r0, #0
     2f0:	bne	300 <export_schema+0x288>
     2f4:	mov	r0, r5
     2f8:	mov	r1, #5
     2fc:	bl	0 <flatcc_builder_start_table>
     300:	ldr	r1, [sp, #8]
     304:	ldrh	r0, [r1, #16]
     308:	cmp	r0, #2
     30c:	bne	350 <export_schema+0x2d8>
     310:	ldr	r0, [sp, #8]
     314:	ldrd	r2, [r0, #8]
     318:	mov	r0, r5
     31c:	mov	r1, r2
     320:	mov	r2, r3
     324:	bl	0 <flatcc_builder_create_string>
     328:	ldr	r1, [sp, #8]
     32c:	cmp	r0, #0
     330:	beq	350 <export_schema+0x2d8>
     334:	mov	r4, r0
     338:	mov	r0, r5
     33c:	mov	r1, #2
     340:	bl	0 <flatcc_builder_table_add_offset>
     344:	ldr	r1, [sp, #8]
     348:	cmp	r0, #0
     34c:	strne	r4, [r0]
     350:	ldrh	r0, [r1, #32]
     354:	cmp	r0, #2
     358:	bne	394 <export_schema+0x31c>
     35c:	ldr	r0, [sp, #8]
     360:	ldrd	r2, [r0, #24]
     364:	mov	r0, r5
     368:	mov	r1, r2
     36c:	mov	r2, r3
     370:	bl	0 <flatcc_builder_create_string>
     374:	cmp	r0, #0
     378:	beq	394 <export_schema+0x31c>
     37c:	mov	r4, r0
     380:	mov	r0, r5
     384:	mov	r1, #3
     388:	bl	0 <flatcc_builder_table_add_offset>
     38c:	cmp	r0, #0
     390:	strne	r4, [r0]
     394:	ldr	r0, [sp, #52]	; 0x34
     398:	str	r5, [sp, #44]	; 0x2c
     39c:	cmp	r0, #1
     3a0:	str	r0, [sp, #16]
     3a4:	blt	98c <export_schema+0x914>
     3a8:	ldr	r0, [sp, #64]	; 0x40
     3ac:	mov	r1, #0
     3b0:	str	r0, [sp, #12]
     3b4:	ldr	r4, [sp, #12]
     3b8:	str	r1, [sp, #24]
     3bc:	mov	r0, r5
     3c0:	ldr	r6, [r4, r1, lsl #3]!
     3c4:	mov	r1, #5
     3c8:	bl	0 <flatcc_builder_start_table>
     3cc:	ldr	r1, [r4, #4]
     3d0:	mov	r0, r5
     3d4:	bl	0 <flatcc_builder_create_string_str>
     3d8:	cmp	r0, #0
     3dc:	beq	3f8 <export_schema+0x380>
     3e0:	mov	r7, r0
     3e4:	mov	r0, r5
     3e8:	mov	r1, #0
     3ec:	bl	0 <flatcc_builder_table_add_offset>
     3f0:	cmp	r0, #0
     3f4:	strne	r7, [r0]
     3f8:	mov	r0, r5
     3fc:	bl	0 <flatcc_builder_start_offset_vector>
     400:	ldr	sl, [r6, #20]
     404:	str	r6, [sp, #28]
     408:	cmp	sl, #0
     40c:	beq	8a0 <export_schema+0x828>
     410:	mov	r7, #0
     414:	mov	r4, sl
     418:	ldrh	r0, [r4, #24]!
     41c:	ldrh	r6, [r4, #48]	; 0x30
     420:	sub	r8, r4, #8
     424:	cmp	r0, #14
     428:	ubfx	r9, r6, #2, #1
     42c:	ubfx	r1, r6, #8, #1
     430:	str	r1, [sp, #32]
     434:	str	r9, [sp, #40]	; 0x28
     438:	bne	5a0 <export_schema+0x528>
     43c:	ldr	r0, [r8]
     440:	ldrh	r0, [r0, #8]
     444:	cmp	r0, #4
     448:	bne	5a0 <export_schema+0x528>
     44c:	mov	r0, r5
     450:	mov	r1, #9
     454:	str	r8, [sp, #36]	; 0x24
     458:	mov	r8, r7
     45c:	bl	0 <flatcc_builder_start_table>
     460:	mov	r0, r5
     464:	bl	0 <flatcc_builder_start_string>
     468:	ldr	r0, [sl, #4]
     46c:	ldm	r0, {r1, r2}
     470:	mov	r0, r5
     474:	bl	0 <flatcc_builder_append_string>
     478:	movw	r1, #0
     47c:	mov	r0, r5
     480:	mov	r2, #5
     484:	movt	r1, #0
     488:	bl	0 <flatcc_builder_append_string>
     48c:	mov	r0, r5
     490:	bl	0 <flatcc_builder_end_string>
     494:	cmp	r0, #0
     498:	beq	4b4 <export_schema+0x43c>
     49c:	mov	r7, r0
     4a0:	mov	r0, r5
     4a4:	mov	r1, #0
     4a8:	bl	0 <flatcc_builder_table_add_offset>
     4ac:	cmp	r0, #0
     4b0:	strne	r7, [r0]
     4b4:	mov	r0, r5
     4b8:	mov	r1, #3
     4bc:	bl	0 <flatcc_builder_start_table>
     4c0:	cmp	r0, #0
     4c4:	beq	6bc <export_schema+0x644>
     4c8:	mov	r5, sl
     4cc:	mov	r1, #2
     4d0:	ldrh	r0, [r5, #96]!	; 0x60
     4d4:	add	r7, r1, r0, lsl #1
     4d8:	movw	r0, #65534	; 0xfffe
     4dc:	tst	r7, r0
     4e0:	beq	500 <export_schema+0x488>
     4e4:	ldr	r0, [sp, #44]	; 0x2c
     4e8:	mov	r1, #3
     4ec:	mov	r2, #2
     4f0:	mov	r3, #2
     4f4:	bl	0 <flatcc_builder_table_add>
     4f8:	cmp	r0, #0
     4fc:	strhne	r7, [r0]
     500:	ldrh	r0, [r5]
     504:	mov	r7, r8
     508:	sub	r5, r0, #1
     50c:	movw	r0, #65535	; 0xffff
     510:	tst	r5, r0
     514:	beq	534 <export_schema+0x4bc>
     518:	ldr	r0, [sp, #44]	; 0x2c
     51c:	mov	r1, #2
     520:	mov	r2, #2
     524:	mov	r3, #2
     528:	bl	0 <flatcc_builder_table_add>
     52c:	cmp	r0, #0
     530:	strhne	r5, [r0]
     534:	cmp	r9, #0
     538:	ldr	r9, [sp, #44]	; 0x2c
     53c:	ldr	r8, [sp, #36]	; 0x24
     540:	beq	564 <export_schema+0x4ec>
     544:	mov	r0, r9
     548:	mov	r1, #6
     54c:	mov	r2, #1
     550:	mov	r3, #1
     554:	bl	0 <flatcc_builder_table_add>
     558:	cmp	r0, #0
     55c:	ldrne	r1, [sp, #40]	; 0x28
     560:	strbne	r1, [r0]
     564:	movw	r1, #0
     568:	mov	r0, r9
     56c:	mov	r2, #2
     570:	movt	r1, #0
     574:	bl	0 <flatcc_builder_check_required>
     578:	cmp	r0, #0
     57c:	beq	d28 <export_schema+0xcb0>
     580:	mov	r0, r9
     584:	mov	r5, r9
     588:	bl	0 <flatcc_builder_end_table>
     58c:	cmp	r0, #0
     590:	beq	5a0 <export_schema+0x528>
     594:	mov	r1, r0
     598:	mov	r0, r5
     59c:	bl	0 <flatcc_builder_offset_vector_push>
     5a0:	uxtb	r0, r7
     5a4:	mov	r1, #9
     5a8:	str	r7, [sp, #36]	; 0x24
     5ac:	clz	r9, r0
     5b0:	mov	r0, r5
     5b4:	bl	0 <flatcc_builder_start_table>
     5b8:	ldr	r0, [sl, #4]
     5bc:	ldm	r0, {r1, r2}
     5c0:	mov	r0, r5
     5c4:	bl	0 <flatcc_builder_create_string>
     5c8:	cmp	r0, #0
     5cc:	beq	5e8 <export_schema+0x570>
     5d0:	mov	r7, r0
     5d4:	mov	r0, r5
     5d8:	mov	r1, #0
     5dc:	bl	0 <flatcc_builder_table_add_offset>
     5e0:	cmp	r0, #0
     5e4:	strne	r7, [r0]
     5e8:	ldrd	r2, [r8]
     5ec:	ldr	r1, [r4, #4]
     5f0:	ldr	r4, [r4]
     5f4:	mov	r0, r5
     5f8:	lsr	r5, r9, #5
     5fc:	and	r6, r6, #128	; 0x80
     600:	str	r4, [sp]
     604:	str	r1, [sp, #4]
     608:	bl	1420 <export_type>
     60c:	cmp	r0, #0
     610:	beq	62c <export_schema+0x5b4>
     614:	mov	r7, r0
     618:	ldr	r0, [sp, #44]	; 0x2c
     61c:	mov	r1, #1
     620:	bl	0 <flatcc_builder_table_add_offset>
     624:	cmp	r0, #0
     628:	strne	r7, [r0]
     62c:	ldr	r0, [sp, #28]
     630:	and	r4, r5, r6, lsr #7
     634:	ldrh	r0, [r0, #8]
     638:	cmp	r0, #1
     63c:	beq	68c <export_schema+0x614>
     640:	ldr	r7, [sp, #36]	; 0x24
     644:	cmp	r0, #0
     648:	bne	82c <export_schema+0x7b4>
     64c:	ldrh	r0, [sl, #56]	; 0x38
     650:	sub	r1, r0, #3
     654:	ldr	r0, [sp, #44]	; 0x2c
     658:	cmp	r1, #3
     65c:	bhi	77c <export_schema+0x704>
     660:	add	r2, pc, #4
     664:	add	r3, sl, #48	; 0x30
     668:	ldr	pc, [r2, r1, lsl #2]
     66c:	.word	0x00000728
     670:	.word	0x0000067c
     674:	.word	0x0000067c
     678:	.word	0x00000754
     67c:	ldrd	r8, [r3]
     680:	orrs	r1, r8, r9
     684:	bne	764 <export_schema+0x6ec>
     688:	b	77c <export_schema+0x704>
     68c:	ldrh	r5, [sl, #80]	; 0x50
     690:	ldr	r7, [sp, #36]	; 0x24
     694:	cmp	r5, #0
     698:	beq	82c <export_schema+0x7b4>
     69c:	ldr	r0, [sp, #44]	; 0x2c
     6a0:	mov	r1, #3
     6a4:	mov	r2, #2
     6a8:	mov	r3, #2
     6ac:	bl	0 <flatcc_builder_table_add>
     6b0:	cmp	r0, #0
     6b4:	strhne	r5, [r0]
     6b8:	b	82c <export_schema+0x7b4>
     6bc:	mov	r0, r5
     6c0:	mov	r1, #0
     6c4:	mov	r2, #1
     6c8:	mov	r3, #1
     6cc:	bl	0 <flatcc_builder_table_add>
     6d0:	cmp	r0, #0
     6d4:	beq	4c8 <export_schema+0x450>
     6d8:	mov	r1, #1
     6dc:	mov	r2, #0
     6e0:	strb	r1, [r0]
     6e4:	movw	r1, #0
     6e8:	mov	r0, r5
     6ec:	movt	r1, #0
     6f0:	bl	0 <flatcc_builder_check_required>
     6f4:	cmp	r0, #0
     6f8:	beq	d68 <export_schema+0xcf0>
     6fc:	mov	r0, r5
     700:	bl	0 <flatcc_builder_end_table>
     704:	cmp	r0, #0
     708:	beq	4c8 <export_schema+0x450>
     70c:	mov	r7, r0
     710:	mov	r0, r5
     714:	mov	r1, #1
     718:	bl	0 <flatcc_builder_table_add_offset>
     71c:	cmp	r0, #0
     720:	strne	r7, [r0]
     724:	b	4c8 <export_schema+0x450>
     728:	vldr	d8, [r3]
     72c:	vcmp.f64	d8, #0.0
     730:	vmrs	APSR_nzcv, fpscr
     734:	beq	77c <export_schema+0x704>
     738:	mov	r1, #5
     73c:	mov	r2, #8
     740:	mov	r3, #8
     744:	bl	0 <flatcc_builder_table_add>
     748:	cmp	r0, #0
     74c:	vstrne	d8, [r0]
     750:	b	77c <export_schema+0x704>
     754:	ldrb	r8, [r3]
     758:	mov	r9, #0
     75c:	orrs	r1, r8, r9
     760:	beq	77c <export_schema+0x704>
     764:	mov	r1, #4
     768:	mov	r2, #8
     76c:	mov	r3, #8
     770:	bl	0 <flatcc_builder_table_add>
     774:	cmp	r0, #0
     778:	strdne	r8, [r0]
     77c:	mov	r5, sl
     780:	ldrh	r6, [r5, #96]!	; 0x60
     784:	cmp	r6, #0
     788:	beq	7a8 <export_schema+0x730>
     78c:	ldr	r0, [sp, #44]	; 0x2c
     790:	mov	r1, #2
     794:	mov	r2, #2
     798:	mov	r3, #2
     79c:	bl	0 <flatcc_builder_table_add>
     7a0:	cmp	r0, #0
     7a4:	strhne	r6, [r0]
     7a8:	ldrh	r0, [r5]
     7ac:	mov	r1, #4
     7b0:	add	r5, r1, r0, lsl #1
     7b4:	movw	r0, #65534	; 0xfffe
     7b8:	tst	r5, r0
     7bc:	beq	7dc <export_schema+0x764>
     7c0:	ldr	r0, [sp, #44]	; 0x2c
     7c4:	mov	r1, #3
     7c8:	mov	r2, #2
     7cc:	mov	r3, #2
     7d0:	bl	0 <flatcc_builder_table_add>
     7d4:	cmp	r0, #0
     7d8:	strhne	r5, [r0]
     7dc:	cmp	r4, #0
     7e0:	beq	800 <export_schema+0x788>
     7e4:	ldr	r0, [sp, #44]	; 0x2c
     7e8:	mov	r1, #8
     7ec:	mov	r2, #1
     7f0:	mov	r3, #1
     7f4:	bl	0 <flatcc_builder_table_add>
     7f8:	cmp	r0, #0
     7fc:	strbne	r4, [r0]
     800:	ldr	r0, [sp, #32]
     804:	cmp	r0, #0
     808:	beq	82c <export_schema+0x7b4>
     80c:	ldr	r0, [sp, #44]	; 0x2c
     810:	mov	r1, #7
     814:	mov	r2, #1
     818:	mov	r3, #1
     81c:	bl	0 <flatcc_builder_table_add>
     820:	cmp	r0, #0
     824:	ldrne	r1, [sp, #32]
     828:	strbne	r1, [r0]
     82c:	ldr	r6, [sp, #40]	; 0x28
     830:	ldr	r5, [sp, #44]	; 0x2c
     834:	cmp	r6, #0
     838:	beq	858 <export_schema+0x7e0>
     83c:	mov	r0, r5
     840:	mov	r1, #6
     844:	mov	r2, #1
     848:	mov	r3, #1
     84c:	bl	0 <flatcc_builder_table_add>
     850:	cmp	r0, #0
     854:	strbne	r6, [r0]
     858:	movw	r1, #0
     85c:	mov	r0, r5
     860:	mov	r2, #2
     864:	movt	r1, #0
     868:	bl	0 <flatcc_builder_check_required>
     86c:	cmp	r0, #0
     870:	beq	d28 <export_schema+0xcb0>
     874:	mov	r0, r5
     878:	bl	0 <flatcc_builder_end_table>
     87c:	cmp	r0, #0
     880:	beq	890 <export_schema+0x818>
     884:	mov	r1, r0
     888:	mov	r0, r5
     88c:	bl	0 <flatcc_builder_offset_vector_push>
     890:	ldr	sl, [sl]
     894:	orr	r7, r7, r4
     898:	cmp	sl, #0
     89c:	bne	414 <export_schema+0x39c>
     8a0:	mov	r0, r5
     8a4:	bl	0 <flatcc_builder_end_offset_vector>
     8a8:	cmp	r0, #0
     8ac:	beq	8c8 <export_schema+0x850>
     8b0:	mov	r7, r0
     8b4:	mov	r0, r5
     8b8:	mov	r1, #1
     8bc:	bl	0 <flatcc_builder_table_add_offset>
     8c0:	cmp	r0, #0
     8c4:	strne	r7, [r0]
     8c8:	ldr	r6, [sp, #28]
     8cc:	ldrh	r0, [r6, #8]
     8d0:	cmp	r0, #1
     8d4:	bne	920 <export_schema+0x8a8>
     8d8:	ldr	r4, [r6, #112]	; 0x70
     8dc:	cmp	r4, #0
     8e0:	beq	900 <export_schema+0x888>
     8e4:	mov	r0, r5
     8e8:	mov	r1, #4
     8ec:	mov	r2, #4
     8f0:	mov	r3, #4
     8f4:	bl	0 <flatcc_builder_table_add>
     8f8:	cmp	r0, #0
     8fc:	strne	r4, [r0]
     900:	mov	r0, r5
     904:	mov	r1, #2
     908:	mov	r2, #1
     90c:	mov	r3, #1
     910:	bl	0 <flatcc_builder_table_add>
     914:	cmp	r0, #0
     918:	movne	r1, #1
     91c:	strbne	r1, [r0]
     920:	ldrh	r4, [r6, #104]	; 0x68
     924:	cmp	r4, #0
     928:	beq	948 <export_schema+0x8d0>
     92c:	mov	r0, r5
     930:	mov	r1, #3
     934:	mov	r2, #4
     938:	mov	r3, #4
     93c:	bl	0 <flatcc_builder_table_add>
     940:	cmp	r0, #0
     944:	strne	r4, [r0]
     948:	movw	r1, #0
     94c:	mov	r0, r5
     950:	mov	r2, #2
     954:	movt	r1, #0
     958:	bl	0 <flatcc_builder_check_required>
     95c:	cmp	r0, #0
     960:	beq	d88 <export_schema+0xd10>
     964:	mov	r0, r5
     968:	bl	0 <flatcc_builder_end_table>
     96c:	ldr	r1, [sp, #20]
     970:	ldr	r2, [sp, #24]
     974:	str	r0, [r1, r2, lsl #2]
     978:	ldr	r0, [sp, #16]
     97c:	mov	r1, r2
     980:	add	r1, r2, #1
     984:	cmp	r1, r0
     988:	blt	3b4 <export_schema+0x33c>
     98c:	ldr	r1, [sp, #20]
     990:	ldr	r2, [sp, #16]
     994:	mov	r0, r5
     998:	bl	0 <flatcc_builder_create_offset_vector>
     99c:	cmp	r0, #0
     9a0:	beq	9bc <export_schema+0x944>
     9a4:	mov	r4, r0
     9a8:	mov	r0, r5
     9ac:	mov	r1, #0
     9b0:	bl	0 <flatcc_builder_table_add_offset>
     9b4:	cmp	r0, #0
     9b8:	strne	r4, [r0]
     9bc:	ldr	r0, [sp, #68]	; 0x44
     9c0:	ldr	r4, [sp, #56]	; 0x38
     9c4:	str	r0, [sp, #32]
     9c8:	mov	r0, r5
     9cc:	bl	0 <flatcc_builder_start_offset_vector>
     9d0:	cmp	r4, #1
     9d4:	str	r4, [sp, #36]	; 0x24
     9d8:	blt	c24 <export_schema+0xbac>
     9dc:	movw	r6, #0
     9e0:	mov	r4, #0
     9e4:	movt	r6, #0
     9e8:	ldr	r5, [sp, #32]
     9ec:	mov	r1, #4
     9f0:	ldr	r8, [r5, r4, lsl #3]!
     9f4:	ldrh	r0, [r8, #8]
     9f8:	str	r0, [sp, #40]	; 0x28
     9fc:	ldr	r0, [sp, #44]	; 0x2c
     a00:	bl	0 <flatcc_builder_start_table>
     a04:	ldr	r1, [r5, #4]
     a08:	ldr	r5, [sp, #44]	; 0x2c
     a0c:	mov	r0, r5
     a10:	bl	0 <flatcc_builder_create_string_str>
     a14:	cmp	r0, #0
     a18:	beq	a34 <export_schema+0x9bc>
     a1c:	mov	r7, r0
     a20:	mov	r0, r5
     a24:	mov	r1, #0
     a28:	bl	0 <flatcc_builder_table_add_offset>
     a2c:	cmp	r0, #0
     a30:	strne	r7, [r0]
     a34:	mov	r0, r5
     a38:	bl	0 <flatcc_builder_start_offset_vector>
     a3c:	ldr	sl, [r8, #20]
     a40:	cmp	sl, #0
     a44:	beq	b44 <export_schema+0xacc>
     a48:	ldr	r0, [sp, #40]	; 0x28
     a4c:	mov	r9, #0
     a50:	cmp	r0, #4
     a54:	ldr	r0, [sp, #20]
     a58:	moveq	r9, r0
     a5c:	mov	r0, r5
     a60:	mov	r1, #3
     a64:	bl	0 <flatcc_builder_start_table>
     a68:	ldr	r0, [sl, #4]
     a6c:	ldm	r0, {r1, r2}
     a70:	mov	r0, r5
     a74:	bl	0 <flatcc_builder_create_string>
     a78:	cmp	r0, #0
     a7c:	beq	a98 <export_schema+0xa20>
     a80:	mov	r7, r0
     a84:	mov	r0, r5
     a88:	mov	r1, #0
     a8c:	bl	0 <flatcc_builder_table_add_offset>
     a90:	cmp	r0, #0
     a94:	strne	r7, [r0]
     a98:	cmp	r9, #0
     a9c:	beq	ad4 <export_schema+0xa5c>
     aa0:	ldrh	r0, [sl, #24]
     aa4:	cmp	r0, #14
     aa8:	bne	ad4 <export_schema+0xa5c>
     aac:	ldr	r0, [sl, #16]
     ab0:	ldr	r0, [r0, #124]	; 0x7c
     ab4:	ldr	r5, [r9, r0, lsl #2]
     ab8:	cmp	r5, #0
     abc:	beq	ad4 <export_schema+0xa5c>
     ac0:	ldr	r0, [sp, #44]	; 0x2c
     ac4:	mov	r1, #2
     ac8:	bl	0 <flatcc_builder_table_add_offset>
     acc:	cmp	r0, #0
     ad0:	strne	r5, [r0]
     ad4:	ldr	r5, [sl, #48]	; 0x30
     ad8:	ldr	r7, [sl, #52]	; 0x34
     adc:	orrs	r0, r5, r7
     ae0:	beq	b00 <export_schema+0xa88>
     ae4:	ldr	r0, [sp, #44]	; 0x2c
     ae8:	mov	r1, #1
     aec:	mov	r2, #8
     af0:	mov	r3, #8
     af4:	bl	0 <flatcc_builder_table_add>
     af8:	cmp	r0, #0
     afc:	stmne	r0, {r5, r7}
     b00:	ldr	r5, [sp, #44]	; 0x2c
     b04:	mov	r1, r6
     b08:	mov	r2, #1
     b0c:	mov	r0, r5
     b10:	bl	0 <flatcc_builder_check_required>
     b14:	cmp	r0, #0
     b18:	beq	d48 <export_schema+0xcd0>
     b1c:	mov	r0, r5
     b20:	bl	0 <flatcc_builder_end_table>
     b24:	cmp	r0, #0
     b28:	beq	b38 <export_schema+0xac0>
     b2c:	mov	r1, r0
     b30:	mov	r0, r5
     b34:	bl	0 <flatcc_builder_offset_vector_push>
     b38:	ldr	sl, [sl]
     b3c:	cmp	sl, #0
     b40:	bne	a5c <export_schema+0x9e4>
     b44:	mov	r0, r5
     b48:	bl	0 <flatcc_builder_end_offset_vector>
     b4c:	cmp	r0, #0
     b50:	beq	b6c <export_schema+0xaf4>
     b54:	mov	r7, r0
     b58:	mov	r0, r5
     b5c:	mov	r1, #1
     b60:	bl	0 <flatcc_builder_table_add_offset>
     b64:	cmp	r0, #0
     b68:	strne	r7, [r0]
     b6c:	ldr	r0, [sp, #40]	; 0x28
     b70:	subs	r5, r0, #4
     b74:	bne	b9c <export_schema+0xb24>
     b78:	ldr	r0, [sp, #44]	; 0x2c
     b7c:	mov	r1, #2
     b80:	mov	r2, #1
     b84:	mov	r3, #1
     b88:	bl	0 <flatcc_builder_table_add>
     b8c:	cmp	r0, #0
     b90:	clzne	r1, r5
     b94:	lsrne	r1, r1, #5
     b98:	strbne	r1, [r0]
     b9c:	ldr	r0, [r8, #48]	; 0x30
     ba0:	ldr	r1, [r8, #52]	; 0x34
     ba4:	ldr	r2, [r8, #40]	; 0x28
     ba8:	ldr	r3, [r8, #44]	; 0x2c
     bac:	stm	sp, {r0, r1}
     bb0:	ldr	r5, [sp, #44]	; 0x2c
     bb4:	mov	r0, r5
     bb8:	bl	1420 <export_type>
     bbc:	cmp	r0, #0
     bc0:	beq	bdc <export_schema+0xb64>
     bc4:	mov	r7, r0
     bc8:	mov	r0, r5
     bcc:	mov	r1, #3
     bd0:	bl	0 <flatcc_builder_table_add_offset>
     bd4:	cmp	r0, #0
     bd8:	strne	r7, [r0]
     bdc:	movw	r1, #0
     be0:	mov	r0, r5
     be4:	mov	r2, #3
     be8:	movt	r1, #0
     bec:	bl	0 <flatcc_builder_check_required>
     bf0:	cmp	r0, #0
     bf4:	beq	da8 <export_schema+0xd30>
     bf8:	mov	r0, r5
     bfc:	bl	0 <flatcc_builder_end_table>
     c00:	cmp	r0, #0
     c04:	beq	c14 <export_schema+0xb9c>
     c08:	mov	r1, r0
     c0c:	mov	r0, r5
     c10:	bl	0 <flatcc_builder_offset_vector_push>
     c14:	ldr	r0, [sp, #36]	; 0x24
     c18:	add	r4, r4, #1
     c1c:	cmp	r4, r0
     c20:	blt	9e8 <export_schema+0x970>
     c24:	mov	r0, r5
     c28:	bl	0 <flatcc_builder_end_offset_vector>
     c2c:	cmp	r0, #0
     c30:	beq	c4c <export_schema+0xbd4>
     c34:	mov	r4, r0
     c38:	mov	r0, r5
     c3c:	mov	r1, #1
     c40:	bl	0 <flatcc_builder_table_add_offset>
     c44:	cmp	r0, #0
     c48:	strne	r4, [r0]
     c4c:	ldr	r0, [sp, #8]
     c50:	ldr	r0, [r0, #52]	; 0x34
     c54:	cmp	r0, #0
     c58:	beq	c90 <export_schema+0xc18>
     c5c:	ldrh	r1, [r0, #8]
     c60:	cmp	r1, #0
     c64:	bne	c90 <export_schema+0xc18>
     c68:	ldr	r0, [r0, #124]	; 0x7c
     c6c:	ldr	r1, [sp, #20]
     c70:	ldr	r4, [r1, r0, lsl #2]
     c74:	cmp	r4, #0
     c78:	beq	c90 <export_schema+0xc18>
     c7c:	mov	r0, r5
     c80:	mov	r1, #4
     c84:	bl	0 <flatcc_builder_table_add_offset>
     c88:	cmp	r0, #0
     c8c:	strne	r4, [r0]
     c90:	movw	r1, #0
     c94:	mov	r0, r5
     c98:	mov	r2, #2
     c9c:	movt	r1, #0
     ca0:	bl	0 <flatcc_builder_check_required>
     ca4:	cmp	r0, #0
     ca8:	beq	dc8 <export_schema+0xd50>
     cac:	mov	r0, r5
     cb0:	bl	0 <flatcc_builder_end_table>
     cb4:	mov	r1, r0
     cb8:	mov	r0, r5
     cbc:	bl	0 <flatcc_builder_end_buffer>
     cc0:	ldr	r0, [sp, #64]	; 0x40
     cc4:	cmp	r0, #0
     cc8:	beq	cd0 <export_schema+0xc58>
     ccc:	bl	0 <free>
     cd0:	ldr	r0, [sp, #68]	; 0x44
     cd4:	cmp	r0, #0
     cd8:	beq	ce0 <export_schema+0xc68>
     cdc:	bl	0 <free>
     ce0:	ldr	r0, [sp, #72]	; 0x48
     ce4:	cmp	r0, #0
     ce8:	beq	cf0 <export_schema+0xc78>
     cec:	bl	0 <free>
     cf0:	add	r1, sp, #48	; 0x30
     cf4:	vmov.i32	q8, #0	; 0x00000000
     cf8:	mov	r0, #28
     cfc:	mov	r4, #0
     d00:	mov	r2, r1
     d04:	add	r1, r1, #16
     d08:	vst1.64	{d16-d17}, [r2], r0
     d0c:	ldr	r0, [sp, #20]
     d10:	vst1.32	{d16-d17}, [r2]
     d14:	vst1.64	{d16-d17}, [r1]
     d18:	cmp	r0, #0
     d1c:	beq	1a8 <export_schema+0x130>
     d20:	bl	0 <free>
     d24:	b	1a8 <export_schema+0x130>
     d28:	movw	r0, #0
     d2c:	movw	r1, #0
     d30:	movw	r3, #0
     d34:	mov	r2, #29
     d38:	movt	r0, #0
     d3c:	movt	r1, #0
     d40:	movt	r3, #0
     d44:	bl	0 <__assert_fail>
     d48:	movw	r0, #0
     d4c:	movw	r1, #0
     d50:	movw	r3, #0
     d54:	mov	r2, #25
     d58:	movt	r0, #0
     d5c:	movt	r1, #0
     d60:	movt	r3, #0
     d64:	bl	0 <__assert_fail>
     d68:	movw	r0, #0
     d6c:	movw	r1, #0
     d70:	movw	r3, #0
     d74:	mov	r2, #23
     d78:	movt	r0, #0
     d7c:	movt	r1, #0
     d80:	movt	r3, #0
     d84:	bl	0 <__assert_fail>
     d88:	movw	r0, #0
     d8c:	movw	r1, #0
     d90:	movw	r3, #0
     d94:	mov	r2, #31
     d98:	movt	r0, #0
     d9c:	movt	r1, #0
     da0:	movt	r3, #0
     da4:	bl	0 <__assert_fail>
     da8:	movw	r0, #0
     dac:	movw	r1, #0
     db0:	movw	r3, #0
     db4:	mov	r2, #27
     db8:	movt	r0, #0
     dbc:	movt	r1, #0
     dc0:	movt	r3, #0
     dc4:	bl	0 <__assert_fail>
     dc8:	movw	r0, #0
     dcc:	movw	r1, #0
     dd0:	movw	r3, #0
     dd4:	mov	r2, #33	; 0x21
     dd8:	movt	r0, #0
     ddc:	movt	r1, #0
     de0:	movt	r3, #0
     de4:	bl	0 <__assert_fail>

00000de8 <sort_fields>:
     de8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
     dec:	add	fp, sp, #28
     df0:	sub	sp, sp, #12
     df4:	cmp	r0, #0
     df8:	beq	f88 <sort_fields+0x1a0>
     dfc:	ldr	r1, [r0, #4]
     e00:	movw	r2, #17986	; 0x4642
     e04:	movt	r2, #21314	; 0x5342
     e08:	cmp	r1, r2
     e0c:	bne	f88 <sort_fields+0x1a0>
     e10:	ldr	r1, [r0]
     e14:	ldr	r2, [r0, r1]!
     e18:	mov	r1, r0
     e1c:	ldrh	r2, [r1, -r2]!	; <UNPREDICTABLE>
     e20:	cmp	r2, #5
     e24:	bls	f94 <sort_fields+0x1ac>
     e28:	ldrh	r1, [r1, #4]
     e2c:	cmp	r1, #0
     e30:	beq	f94 <sort_fields+0x1ac>
     e34:	ldr	r1, [r0, r1]!
     e38:	ldr	r1, [r0, r1]!
     e3c:	cmp	r1, #0
     e40:	beq	f54 <sort_fields+0x16c>
     e44:	add	r1, r0, #4
     e48:	mov	r2, #0
     e4c:	str	r1, [sp, #8]
     e50:	str	r1, [sp]
     e54:	mov	r0, r1
     e58:	ldr	r7, [r0, r2, lsl #2]!
     e5c:	adds	r0, r0, r7
     e60:	beq	f68 <sort_fields+0x180>
     e64:	str	r2, [sp, #4]
     e68:	ldr	r2, [r0]
     e6c:	mov	r1, r0
     e70:	ldrh	r2, [r1, -r2]!	; <UNPREDICTABLE>
     e74:	cmp	r2, #8
     e78:	bcc	f5c <sort_fields+0x174>
     e7c:	ldrh	r9, [r1, #6]
     e80:	cmp	r9, #0
     e84:	beq	f5c <sort_fields+0x174>
     e88:	ldr	r8, [r0, r9]!
     e8c:	ldr	sl, [r0, r8]!
     e90:	cmp	sl, #0
     e94:	beq	f30 <sort_fields+0x148>
     e98:	add	r4, r0, #4
     e9c:	lsr	r6, sl, #1
     ea0:	sub	r5, sl, #1
     ea4:	mov	r0, r4
     ea8:	mov	r1, r6
     eac:	mov	r2, r5
     eb0:	bl	16f0 <__reflection_Field_sort_by_name__heap_sift_down>
     eb4:	sub	r6, r6, #1
     eb8:	cmn	r6, #1
     ebc:	bne	ea4 <sort_fields+0xbc>
     ec0:	cmp	r5, #0
     ec4:	beq	f30 <sort_fields+0x148>
     ec8:	mvn	r0, #3
     ecc:	mov	r1, r8
     ed0:	sub	r5, sl, #2
     ed4:	add	r6, r0, sl, lsl #2
     ed8:	mov	r0, #4
     edc:	sub	r8, r0, sl, lsl #2
     ee0:	add	r0, r1, r7
     ee4:	ldr	r1, [sp, #8]
     ee8:	add	r0, r0, sl, lsl #2
     eec:	add	r0, r0, r9
     ef0:	add	r7, r1, r0
     ef4:	ldr	r0, [r7]
     ef8:	ldr	r1, [r4]
     efc:	mov	r2, r5
     f00:	add	r0, r6, r0
     f04:	str	r0, [r4]
     f08:	add	r0, r8, r1
     f0c:	mov	r1, #0
     f10:	str	r0, [r7], #-4
     f14:	mov	r0, r4
     f18:	bl	16f0 <__reflection_Field_sort_by_name__heap_sift_down>
     f1c:	sub	r5, r5, #1
     f20:	sub	r6, r6, #4
     f24:	add	r8, r8, #4
     f28:	cmn	r5, #1
     f2c:	bne	ef4 <sort_fields+0x10c>
     f30:	ldr	r0, [sp, #8]
     f34:	ldr	r1, [sp]
     f38:	ldr	r2, [sp, #4]
     f3c:	add	r0, r0, #4
     f40:	add	r2, r2, #1
     f44:	str	r0, [sp, #8]
     f48:	ldr	r0, [r1, #-4]
     f4c:	cmp	r2, r0
     f50:	bcc	e54 <sort_fields+0x6c>
     f54:	sub	sp, fp, #28
     f58:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
     f5c:	movw	r0, #0
     f60:	movt	r0, #0
     f64:	b	f70 <sort_fields+0x188>
     f68:	movw	r0, #0
     f6c:	movt	r0, #0
     f70:	movw	r1, #0
     f74:	movw	r3, #0
     f78:	mov	r2, #224	; 0xe0
     f7c:	movt	r1, #0
     f80:	movt	r3, #0
     f84:	bl	0 <__assert_fail>
     f88:	movw	r0, #0
     f8c:	movt	r0, #0
     f90:	b	f9c <sort_fields+0x1b4>
     f94:	movw	r0, #0
     f98:	movt	r0, #0
     f9c:	movw	r1, #0
     fa0:	movw	r3, #0
     fa4:	mov	r2, #237	; 0xed
     fa8:	movt	r1, #0
     fac:	movt	r3, #0
     fb0:	bl	0 <__assert_fail>

00000fb4 <__flatcc_fb_codegen_bfbs_alloc_buffer>:
     fb4:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
     fb8:	add	fp, sp, #24
     fbc:	sub	sp, sp, #232	; 0xe8
     fc0:	mov	r7, sp
     fc4:	mov	r6, r0
     fc8:	mov	r5, r2
     fcc:	mov	r4, r1
     fd0:	mov	r0, r7
     fd4:	bl	0 <flatcc_builder_init>
     fd8:	mov	r0, r7
     fdc:	mov	r1, r6
     fe0:	mov	r2, r4
     fe4:	bl	78 <export_schema>
     fe8:	mov	r4, #0
     fec:	cmp	r0, #0
     ff0:	bne	1014 <__flatcc_fb_codegen_bfbs_alloc_buffer+0x60>
     ff4:	mov	r0, sp
     ff8:	mov	r1, r5
     ffc:	bl	0 <flatcc_builder_finalize_buffer>
    1000:	cmp	r0, #0
    1004:	beq	1014 <__flatcc_fb_codegen_bfbs_alloc_buffer+0x60>
    1008:	mov	r5, r0
    100c:	bl	de8 <sort_fields>
    1010:	mov	r4, r5
    1014:	mov	r0, sp
    1018:	bl	0 <flatcc_builder_clear>
    101c:	mov	r0, r4
    1020:	sub	sp, fp, #24
    1024:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}

00001028 <__flatcc_fb_codegen_bfbs_to_file>:
    1028:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
    102c:	add	fp, sp, #24
    1030:	sub	sp, sp, #248	; 0xf8
    1034:	mov	r6, r0
    1038:	mov	r8, r1
    103c:	ldr	r0, [r0, #108]	; 0x6c
    1040:	movw	r4, #0
    1044:	ldr	r1, [r6, #216]	; 0xd8
    1048:	movt	r4, #0
    104c:	cmp	r1, #0
    1050:	movne	r4, r1
    1054:	cmp	r0, #0
    1058:	beq	10f8 <__flatcc_fb_codegen_bfbs_to_file+0xd0>
    105c:	movw	r0, #0
    1060:	movt	r0, #0
    1064:	ldr	r4, [r0]
    1068:	cmp	r4, #0
    106c:	beq	116c <__flatcc_fb_codegen_bfbs_to_file+0x144>
    1070:	add	r5, sp, #16
    1074:	mov	r0, r5
    1078:	bl	0 <flatcc_builder_init>
    107c:	mov	r0, r5
    1080:	mov	r1, r6
    1084:	mov	r2, r8
    1088:	bl	78 <export_schema>
    108c:	mov	r5, #0
    1090:	cmp	r0, #0
    1094:	bne	10b8 <__flatcc_fb_codegen_bfbs_to_file+0x90>
    1098:	add	r0, sp, #16
    109c:	add	r1, sp, #12
    10a0:	bl	0 <flatcc_builder_finalize_buffer>
    10a4:	cmp	r0, #0
    10a8:	beq	10b8 <__flatcc_fb_codegen_bfbs_to_file+0x90>
    10ac:	mov	r6, r0
    10b0:	bl	de8 <sort_fields>
    10b4:	mov	r5, r6
    10b8:	add	r0, sp, #16
    10bc:	bl	0 <flatcc_builder_clear>
    10c0:	cmp	r5, #0
    10c4:	beq	1174 <__flatcc_fb_codegen_bfbs_to_file+0x14c>
    10c8:	ldr	r7, [sp, #12]
    10cc:	mov	r0, r5
    10d0:	mov	r1, #1
    10d4:	mov	r3, r4
    10d8:	mov	r2, r7
    10dc:	bl	0 <fwrite>
    10e0:	mov	r6, #0
    10e4:	cmp	r7, r0
    10e8:	bne	11ac <__flatcc_fb_codegen_bfbs_to_file+0x184>
    10ec:	mov	r0, r5
    10f0:	bl	0 <free>
    10f4:	b	1184 <__flatcc_fb_codegen_bfbs_to_file+0x15c>
    10f8:	ldr	r7, [r8, #160]	; 0xa0
    10fc:	mov	r0, r7
    1100:	bl	0 <strlen>
    1104:	mov	r5, r0
    1108:	mov	r0, r4
    110c:	bl	0 <strlen>
    1110:	movw	r2, #0
    1114:	mov	r1, r0
    1118:	mov	r0, #1
    111c:	mov	r3, r5
    1120:	movt	r2, #0
    1124:	str	r0, [sp, #4]
    1128:	mov	r0, r4
    112c:	str	r2, [sp]
    1130:	mov	r2, r7
    1134:	bl	0 <__flatcc_fb_create_join_path_n>
    1138:	cmp	r0, #0
    113c:	beq	11f4 <__flatcc_fb_codegen_bfbs_to_file+0x1cc>
    1140:	movw	r1, #0
    1144:	mov	r7, r0
    1148:	movt	r1, #0
    114c:	bl	0 <fopen>
    1150:	mov	r4, r0
    1154:	cmp	r0, #0
    1158:	beq	11d4 <__flatcc_fb_codegen_bfbs_to_file+0x1ac>
    115c:	mov	r0, r7
    1160:	bl	0 <free>
    1164:	cmp	r4, #0
    1168:	bne	1070 <__flatcc_fb_codegen_bfbs_to_file+0x48>
    116c:	mvn	r6, #0
    1170:	b	11a0 <__flatcc_fb_codegen_bfbs_to_file+0x178>
    1174:	movw	r0, #0
    1178:	movt	r0, #0
    117c:	bl	0 <puts>
    1180:	mvn	r6, #0
    1184:	movw	r0, #0
    1188:	movt	r0, #0
    118c:	ldr	r0, [r0]
    1190:	cmp	r0, r4
    1194:	beq	11a0 <__flatcc_fb_codegen_bfbs_to_file+0x178>
    1198:	mov	r0, r4
    119c:	bl	0 <fclose>
    11a0:	mov	r0, r6
    11a4:	sub	sp, fp, #24
    11a8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
    11ac:	movw	r0, #0
    11b0:	mov	r1, #38	; 0x26
    11b4:	mov	r2, #1
    11b8:	movt	r0, #0
    11bc:	ldr	r3, [r0]
    11c0:	movw	r0, #0
    11c4:	movt	r0, #0
    11c8:	bl	0 <fwrite>
    11cc:	mvn	r6, #0
    11d0:	b	10ec <__flatcc_fb_codegen_bfbs_to_file+0xc4>
    11d4:	movw	r0, #0
    11d8:	movw	r1, #0
    11dc:	mov	r2, r7
    11e0:	movt	r0, #0
    11e4:	movt	r1, #0
    11e8:	ldr	r0, [r0]
    11ec:	bl	0 <fprintf>
    11f0:	b	115c <__flatcc_fb_codegen_bfbs_to_file+0x134>
    11f4:	movw	r0, #0
    11f8:	mov	r1, #34	; 0x22
    11fc:	mov	r2, #1
    1200:	movt	r0, #0
    1204:	ldr	r3, [r0]
    1208:	movw	r0, #0
    120c:	movt	r0, #0
    1210:	bl	0 <fwrite>
    1214:	mov	r0, #1
    1218:	bl	0 <exit>

0000121c <count_symbols>:
    121c:	mov	r2, r0
    1220:	add	r0, r1, #4
    1224:	movw	r1, #0
    1228:	movt	r1, #0
    122c:	b	0 <fb_symbol_table_visit>

00001230 <install_symbols>:
    1230:	mov	r2, r0
    1234:	add	r0, r1, #4
    1238:	movw	r1, #0
    123c:	movt	r1, #0
    1240:	b	0 <fb_symbol_table_visit>

00001244 <count_symbol>:
    1244:	push	{r4, r5, fp, lr}
    1248:	add	fp, sp, #8
    124c:	mov	r4, r0
    1250:	ldrh	r0, [r1, #8]
    1254:	cmp	r0, #4
    1258:	bhi	12fc <count_symbol+0xb8>
    125c:	ldr	r0, [r4, #40]	; 0x28
    1260:	mov	r5, r1
    1264:	ldr	r1, [r1, #16]
    1268:	add	r0, r0, #172	; 0xac
    126c:	bl	0 <ptr_set_find_item>
    1270:	cmp	r0, #0
    1274:	popeq	{r4, r5, fp, pc}
    1278:	ldr	r1, [r4]
    127c:	mov	r0, #1
    1280:	cmp	r1, #0
    1284:	beq	12c0 <count_symbol+0x7c>
    1288:	ldr	r1, [r5, #12]
    128c:	ldr	r1, [r1]
    1290:	cmp	r1, #0
    1294:	beq	12c0 <count_symbol+0x7c>
    1298:	mov	r0, #0
    129c:	ldr	r2, [r1]
    12a0:	ldr	r1, [r1, #4]
    12a4:	ldr	r1, [r1, #4]
    12a8:	cmp	r2, #0
    12ac:	add	r0, r0, r1
    12b0:	mov	r1, r2
    12b4:	add	r0, r0, #1
    12b8:	bne	129c <count_symbol+0x58>
    12bc:	add	r0, r0, #1
    12c0:	ldr	r1, [r5, #4]
    12c4:	ldr	r1, [r1, #4]
    12c8:	add	r0, r0, r1
    12cc:	ldr	r1, [r4, #12]
    12d0:	add	r0, r0, r1
    12d4:	str	r0, [r4, #12]
    12d8:	ldrh	r0, [r5, #8]
    12dc:	sub	r1, r0, #3
    12e0:	cmp	r1, #2
    12e4:	bcc	1300 <count_symbol+0xbc>
    12e8:	cmp	r0, #1
    12ec:	ldrls	r0, [r4, #4]
    12f0:	addls	r0, r0, #1
    12f4:	strls	r0, [r4, #4]
    12f8:	popls	{r4, r5, fp, pc}
    12fc:	pop	{r4, r5, fp, pc}
    1300:	ldr	r0, [r4, #8]
    1304:	add	r0, r0, #1
    1308:	str	r0, [r4, #8]
    130c:	pop	{r4, r5, fp, pc}

00001310 <install_symbol>:
    1310:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1314:	add	fp, sp, #28
    1318:	sub	sp, sp, #4
    131c:	mov	r9, r0
    1320:	ldrh	r0, [r1, #8]
    1324:	cmp	r0, #4
    1328:	bhi	140c <install_symbol+0xfc>
    132c:	ldr	r0, [r9, #40]	; 0x28
    1330:	mov	sl, r1
    1334:	ldr	r1, [r1, #16]
    1338:	add	r0, r0, #172	; 0xac
    133c:	bl	0 <ptr_set_find_item>
    1340:	cmp	r0, #0
    1344:	beq	140c <install_symbol+0xfc>
    1348:	ldr	r0, [r9]
    134c:	ldr	r8, [r9, #36]	; 0x24
    1350:	cmp	r0, #0
    1354:	mov	r6, r8
    1358:	beq	13a0 <install_symbol+0x90>
    135c:	ldr	r0, [sl, #12]
    1360:	mov	r6, r8
    1364:	ldr	r4, [r0]
    1368:	cmp	r4, #0
    136c:	beq	13a0 <install_symbol+0x90>
    1370:	mov	r5, #46	; 0x2e
    1374:	mov	r6, r8
    1378:	ldr	r0, [r4, #4]
    137c:	ldm	r0, {r1, r7}
    1380:	mov	r0, r6
    1384:	mov	r2, r7
    1388:	bl	0 <memcpy>
    138c:	strb	r5, [r6, r7]!
    1390:	ldr	r4, [r4]
    1394:	add	r6, r6, #1
    1398:	cmp	r4, #0
    139c:	bne	1378 <install_symbol+0x68>
    13a0:	ldr	r0, [sl, #4]
    13a4:	ldm	r0, {r1, r7}
    13a8:	mov	r0, r6
    13ac:	mov	r2, r7
    13b0:	bl	0 <memcpy>
    13b4:	mov	r0, #0
    13b8:	strb	r0, [r6, r7]!
    13bc:	add	r0, r6, #1
    13c0:	str	r0, [r9, #36]	; 0x24
    13c4:	ldrh	r0, [sl, #8]
    13c8:	sub	r1, r0, #3
    13cc:	cmp	r1, #2
    13d0:	bcc	13f8 <install_symbol+0xe8>
    13d4:	cmp	r0, #1
    13d8:	bhi	140c <install_symbol+0xfc>
    13dc:	ldr	r0, [r9, #28]
    13e0:	str	sl, [r0]
    13e4:	str	r8, [r0, #4]
    13e8:	add	r0, r0, #8
    13ec:	str	r0, [r9, #28]
    13f0:	sub	sp, fp, #28
    13f4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    13f8:	ldr	r0, [r9, #32]
    13fc:	str	sl, [r0]
    1400:	str	r8, [r0, #4]
    1404:	add	r0, r0, #8
    1408:	str	r0, [r9, #32]
    140c:	sub	sp, fp, #28
    1410:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

00001414 <compare_entries>:
    1414:	ldr	r1, [r1, #4]
    1418:	ldr	r0, [r0, #4]
    141c:	b	0 <strcmp>

00001420 <export_type>:
    1420:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
    1424:	add	fp, sp, #24
    1428:	mov	r4, r0
    142c:	ldrh	r0, [fp, #8]
    1430:	mov	r8, #0
    1434:	mvn	r9, #0
    1438:	sub	r5, r0, #2
    143c:	cmp	r5, #13
    1440:	bhi	1544 <export_type+0x124>
    1444:	add	r6, pc, #16
    1448:	mov	r1, #13
    144c:	mov	r0, #0
    1450:	mov	r3, #13
    1454:	mov	r7, #0
    1458:	ldr	pc, [r6, r5, lsl #2]
    145c:	.word	0x00001610
    1460:	.word	0x00001614
    1464:	.word	0x00001614
    1468:	.word	0x00001614
    146c:	.word	0x00001614
    1470:	.word	0x00001494
    1474:	.word	0x00001498
    1478:	.word	0x000015fc
    147c:	.word	0x00001614
    1480:	.word	0x00001614
    1484:	.word	0x00001614
    1488:	.word	0x00001614
    148c:	.word	0x00001510
    1490:	.word	0x000014ec
    1494:	mov	r0, #14
    1498:	sub	r2, r2, #1
    149c:	mov	r1, #0
    14a0:	cmp	r2, #10
    14a4:	bhi	15e8 <export_type+0x1c8>
    14a8:	add	r1, pc, #0
    14ac:	ldr	pc, [r1, r2, lsl #2]
    14b0:	.word	0x000014dc
    14b4:	.word	0x000015a4
    14b8:	.word	0x00001574
    14bc:	.word	0x00001584
    14c0:	.word	0x0000154c
    14c4:	.word	0x000015b4
    14c8:	.word	0x000015c4
    14cc:	.word	0x00001594
    14d0:	.word	0x000015d4
    14d4:	.word	0x0000155c
    14d8:	.word	0x000015e4
    14dc:	mov	r1, #10
    14e0:	cmp	r0, #0
    14e4:	bne	15f0 <export_type+0x1d0>
    14e8:	b	1568 <export_type+0x148>
    14ec:	ldrh	r0, [r2, #8]
    14f0:	ldr	r9, [r2, #124]	; 0x7c
    14f4:	mov	r1, #15
    14f8:	cmp	r0, #2
    14fc:	bcc	15fc <export_type+0x1dc>
    1500:	cmp	r0, #3
    1504:	bne	1544 <export_type+0x124>
    1508:	ldr	r2, [r2, #40]	; 0x28
    150c:	b	1494 <export_type+0x74>
    1510:	ldrh	r1, [r2, #8]
    1514:	ldr	r0, [r2, #124]	; 0x7c
    1518:	mov	r3, #15
    151c:	cmp	r1, #2
    1520:	bcc	160c <export_type+0x1ec>
    1524:	cmp	r1, #4
    1528:	beq	1608 <export_type+0x1e8>
    152c:	cmp	r1, #3
    1530:	bne	1544 <export_type+0x124>
    1534:	ldr	r2, [r2, #40]	; 0x28
    1538:	mov	r9, r0
    153c:	mov	r0, #0
    1540:	b	1498 <export_type+0x78>
    1544:	mov	r7, #0
    1548:	b	1614 <export_type+0x1f4>
    154c:	mov	r1, #2
    1550:	cmp	r0, #0
    1554:	bne	15f0 <export_type+0x1d0>
    1558:	b	1568 <export_type+0x148>
    155c:	mov	r1, #12
    1560:	cmp	r0, #0
    1564:	bne	15f0 <export_type+0x1d0>
    1568:	mov	r7, r1
    156c:	mov	r8, #0
    1570:	b	1614 <export_type+0x1f4>
    1574:	mov	r1, #6
    1578:	cmp	r0, #0
    157c:	bne	15f0 <export_type+0x1d0>
    1580:	b	1568 <export_type+0x148>
    1584:	mov	r1, #4
    1588:	cmp	r0, #0
    158c:	bne	15f0 <export_type+0x1d0>
    1590:	b	1568 <export_type+0x148>
    1594:	mov	r1, #5
    1598:	cmp	r0, #0
    159c:	bne	15f0 <export_type+0x1d0>
    15a0:	b	1568 <export_type+0x148>
    15a4:	mov	r1, #8
    15a8:	cmp	r0, #0
    15ac:	bne	15f0 <export_type+0x1d0>
    15b0:	b	1568 <export_type+0x148>
    15b4:	mov	r1, #9
    15b8:	cmp	r0, #0
    15bc:	bne	15f0 <export_type+0x1d0>
    15c0:	b	1568 <export_type+0x148>
    15c4:	mov	r1, #7
    15c8:	cmp	r0, #0
    15cc:	bne	15f0 <export_type+0x1d0>
    15d0:	b	1568 <export_type+0x148>
    15d4:	mov	r1, #3
    15d8:	cmp	r0, #0
    15dc:	bne	15f0 <export_type+0x1d0>
    15e0:	b	1568 <export_type+0x148>
    15e4:	mov	r1, #11
    15e8:	cmp	r0, #0
    15ec:	beq	1568 <export_type+0x148>
    15f0:	cmp	r0, #14
    15f4:	mov	r3, r0
    15f8:	bne	1610 <export_type+0x1f0>
    15fc:	mov	r7, #14
    1600:	mov	r8, r1
    1604:	b	1614 <export_type+0x1f4>
    1608:	mov	r3, #16
    160c:	mov	r9, r0
    1610:	mov	r7, r3
    1614:	mov	r0, r4
    1618:	mov	r1, #3
    161c:	bl	0 <flatcc_builder_start_table>
    1620:	cmp	r0, #0
    1624:	beq	1630 <export_type+0x210>
    1628:	mov	r0, #0
    162c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
    1630:	cmn	r9, #1
    1634:	beq	1658 <export_type+0x238>
    1638:	mov	r0, r4
    163c:	mov	r1, #2
    1640:	mov	r2, #4
    1644:	mov	r3, #4
    1648:	bl	0 <flatcc_builder_table_add>
    164c:	cmp	r0, #0
    1650:	beq	1628 <export_type+0x208>
    1654:	str	r9, [r0]
    1658:	cmp	r7, #0
    165c:	beq	1680 <export_type+0x260>
    1660:	mov	r0, r4
    1664:	mov	r1, #0
    1668:	mov	r2, #1
    166c:	mov	r3, #1
    1670:	bl	0 <flatcc_builder_table_add>
    1674:	cmp	r0, #0
    1678:	beq	1628 <export_type+0x208>
    167c:	strb	r7, [r0]
    1680:	cmp	r8, #0
    1684:	beq	16a8 <export_type+0x288>
    1688:	mov	r0, r4
    168c:	mov	r1, #1
    1690:	mov	r2, #1
    1694:	mov	r3, #1
    1698:	bl	0 <flatcc_builder_table_add>
    169c:	cmp	r0, #0
    16a0:	beq	1628 <export_type+0x208>
    16a4:	strb	r8, [r0]
    16a8:	movw	r1, #0
    16ac:	mov	r0, r4
    16b0:	mov	r2, #0
    16b4:	movt	r1, #0
    16b8:	bl	0 <flatcc_builder_check_required>
    16bc:	cmp	r0, #0
    16c0:	beq	16d0 <export_type+0x2b0>
    16c4:	mov	r0, r4
    16c8:	pop	{r4, r5, r6, r7, r8, r9, fp, lr}
    16cc:	b	0 <flatcc_builder_end_table>
    16d0:	movw	r0, #0
    16d4:	movw	r1, #0
    16d8:	movw	r3, #0
    16dc:	mov	r2, #23
    16e0:	movt	r0, #0
    16e4:	movt	r1, #0
    16e8:	movt	r3, #0
    16ec:	bl	0 <__assert_fail>

000016f0 <__reflection_Field_sort_by_name__heap_sift_down>:
    16f0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    16f4:	add	fp, sp, #28
    16f8:	sub	sp, sp, #12
    16fc:	cmp	r2, r1, lsl #1
    1700:	bcs	170c <__reflection_Field_sort_by_name__heap_sift_down+0x1c>
    1704:	sub	sp, fp, #28
    1708:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    170c:	mov	r9, r2
    1710:	mov	sl, r0
    1714:	lsl	r4, r1, #1
    1718:	str	r0, [sp]
    171c:	cmp	r4, r9
    1720:	bcs	17fc <__reflection_Field_sort_by_name__heap_sift_down+0x10c>
    1724:	cmp	sl, #0
    1728:	ldrne	r8, [sl, #-4]
    172c:	cmpne	r8, r4
    1730:	bls	1918 <__reflection_Field_sort_by_name__heap_sift_down+0x228>
    1734:	mov	r0, sl
    1738:	ldr	r2, [r0, r4, lsl #2]!
    173c:	adds	r0, r0, r2
    1740:	beq	1944 <__reflection_Field_sort_by_name__heap_sift_down+0x254>
    1744:	ldr	r2, [r0]
    1748:	mov	r3, r0
    174c:	ldrh	r2, [r3, -r2]!	; <UNPREDICTABLE>
    1750:	cmp	r2, #6
    1754:	bcc	1938 <__reflection_Field_sort_by_name__heap_sift_down+0x248>
    1758:	ldrh	ip, [r3, #4]
    175c:	cmp	ip, #0
    1760:	beq	1938 <__reflection_Field_sort_by_name__heap_sift_down+0x248>
    1764:	orr	r7, r4, #1
    1768:	cmp	r8, r7
    176c:	bls	1918 <__reflection_Field_sort_by_name__heap_sift_down+0x228>
    1770:	mov	r2, sl
    1774:	ldr	r3, [r2, r7, lsl #2]!
    1778:	adds	r3, r2, r3
    177c:	beq	1944 <__reflection_Field_sort_by_name__heap_sift_down+0x254>
    1780:	ldr	r6, [r3]
    1784:	mov	r2, r3
    1788:	str	r1, [sp, #8]
    178c:	ldrh	r6, [r2, -r6]!	; <UNPREDICTABLE>
    1790:	cmp	r6, #6
    1794:	bcc	1938 <__reflection_Field_sort_by_name__heap_sift_down+0x248>
    1798:	ldrh	r2, [r2, #4]
    179c:	cmp	r2, #0
    17a0:	beq	1938 <__reflection_Field_sort_by_name__heap_sift_down+0x248>
    17a4:	ldr	r1, [r0, ip]!
    17a8:	mov	r5, r9
    17ac:	add	r0, r0, r1
    17b0:	ldr	r1, [r3, r2]!
    17b4:	add	r0, r0, #4
    17b8:	ldr	r6, [r0, #-4]
    17bc:	ldr	r9, [r3, r1]!
    17c0:	cmp	r6, r9
    17c4:	mov	r2, r9
    17c8:	add	r1, r3, #4
    17cc:	movcc	r2, r6
    17d0:	bl	0 <strncmp>
    17d4:	cmp	r0, #0
    17d8:	mov	r0, r7
    17dc:	ldr	r1, [sp, #8]
    17e0:	movne	r0, r4
    17e4:	movlt	r0, r7
    17e8:	movne	r4, r0
    17ec:	cmp	r6, r9
    17f0:	mov	r9, r5
    17f4:	movcc	r4, r0
    17f8:	b	1808 <__reflection_Field_sort_by_name__heap_sift_down+0x118>
    17fc:	cmp	sl, #0
    1800:	beq	1918 <__reflection_Field_sort_by_name__heap_sift_down+0x228>
    1804:	ldr	r8, [sl, #-4]
    1808:	mov	r6, r4
    180c:	cmp	r8, r1
    1810:	bls	1918 <__reflection_Field_sort_by_name__heap_sift_down+0x228>
    1814:	mov	r4, sl
    1818:	ldr	r5, [r4, r1, lsl #2]!
    181c:	adds	r0, r4, r5
    1820:	beq	1944 <__reflection_Field_sort_by_name__heap_sift_down+0x254>
    1824:	ldr	r2, [r0]
    1828:	mov	r3, r0
    182c:	ldrh	r2, [r3, -r2]!	; <UNPREDICTABLE>
    1830:	cmp	r2, #6
    1834:	bcc	1938 <__reflection_Field_sort_by_name__heap_sift_down+0x248>
    1838:	ldrh	ip, [r3, #4]
    183c:	cmp	ip, #0
    1840:	beq	1938 <__reflection_Field_sort_by_name__heap_sift_down+0x248>
    1844:	cmp	r8, r6
    1848:	bls	1918 <__reflection_Field_sort_by_name__heap_sift_down+0x228>
    184c:	mov	r7, sl
    1850:	ldr	r8, [r7, r6, lsl #2]!
    1854:	adds	r3, r7, r8
    1858:	beq	1944 <__reflection_Field_sort_by_name__heap_sift_down+0x254>
    185c:	stmib	sp, {r5, r6}
    1860:	mov	r2, r3
    1864:	ldr	r5, [r3]
    1868:	ldrh	r5, [r2, -r5]!	; <UNPREDICTABLE>
    186c:	cmp	r5, #6
    1870:	bcc	1938 <__reflection_Field_sort_by_name__heap_sift_down+0x248>
    1874:	ldrh	r2, [r2, #4]
    1878:	cmp	r2, #0
    187c:	beq	1938 <__reflection_Field_sort_by_name__heap_sift_down+0x248>
    1880:	mov	r6, r1
    1884:	ldr	r1, [r0, ip]!
    1888:	add	r0, r0, r1
    188c:	ldr	r1, [r3, r2]!
    1890:	add	r0, r0, #4
    1894:	ldr	sl, [r0, #-4]
    1898:	ldr	r5, [r3, r1]!
    189c:	cmp	sl, r5
    18a0:	mov	r2, r5
    18a4:	add	r1, r3, #4
    18a8:	movcc	r2, sl
    18ac:	bl	0 <strncmp>
    18b0:	cmp	r0, #1
    18b4:	mov	r1, #0
    18b8:	mov	r2, #0
    18bc:	movwlt	r1, #1
    18c0:	cmp	r0, #0
    18c4:	movwne	r0, #1
    18c8:	cmp	sl, r5
    18cc:	ldr	sl, [sp]
    18d0:	movwcc	r2, #1
    18d4:	orr	r0, r2, r0
    18d8:	cmp	r0, #1
    18dc:	bne	1704 <__reflection_Field_sort_by_name__heap_sift_down+0x14>
    18e0:	cmp	r1, #0
    18e4:	beq	1704 <__reflection_Field_sort_by_name__heap_sift_down+0x14>
    18e8:	ldr	r2, [sp, #8]
    18ec:	sub	r0, r6, r2
    18f0:	cmp	r9, r2, lsl #1
    18f4:	sub	r1, r8, r0, lsl #2
    18f8:	str	r1, [r4]
    18fc:	ldr	r1, [sp, #4]
    1900:	lsl	r4, r2, #1
    1904:	add	r0, r1, r0, lsl #2
    1908:	mov	r1, r2
    190c:	str	r0, [r7]
    1910:	bcs	171c <__reflection_Field_sort_by_name__heap_sift_down+0x2c>
    1914:	b	1704 <__reflection_Field_sort_by_name__heap_sift_down+0x14>
    1918:	movw	r0, #0
    191c:	movw	r1, #0
    1920:	movw	r3, #0
    1924:	mov	r2, #192	; 0xc0
    1928:	movt	r0, #0
    192c:	movt	r1, #0
    1930:	movt	r3, #0
    1934:	bl	0 <__assert_fail>
    1938:	movw	r0, #0
    193c:	movt	r0, #0
    1940:	b	194c <__reflection_Field_sort_by_name__heap_sift_down+0x25c>
    1944:	movw	r0, #0
    1948:	movt	r0, #0
    194c:	movw	r1, #0
    1950:	movw	r3, #0
    1954:	mov	r2, #195	; 0xc3
    1958:	movt	r1, #0
    195c:	movt	r3, #0
    1960:	bl	0 <__assert_fail>
