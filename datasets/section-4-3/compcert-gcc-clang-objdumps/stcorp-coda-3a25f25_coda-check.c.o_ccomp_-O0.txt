
../repos/stcorp-coda-3a25f25/CMakeFiles/coda.dir/libcoda/coda-check.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <read_bytes>:
       0:	mov	ip, sp
       4:	sub	sp, sp, #112	; 0x70
       8:	str	ip, [sp, #4]
       c:	str	lr, [sp, #8]
      10:	str	r4, [sp, #16]
      14:	str	r5, [sp, #20]
      18:	str	r6, [sp, #24]
      1c:	str	r7, [sp, #28]
      20:	str	r8, [sp, #32]
      24:	str	r9, [sp, #36]	; 0x24
      28:	ldr	r7, [ip, #8]
      2c:	ldr	r9, [ip, #4]
      30:	ldr	r6, [ip]
      34:	mov	r8, r3
      38:	mov	r5, r2
      3c:	mov	r4, r0
      40:	ldr	r1, [r4, #48]	; 0x30
      44:	cmp	r1, #0
      48:	bne	110 <read_bytes+0x110>
      4c:	ldr	r0, [r4, #16]
      50:	cmp	r0, #0
      54:	beq	6c <read_bytes+0x6c>
      58:	ldr	r2, [r4, #16]
      5c:	cmp	r2, #1
      60:	moveq	r0, #1
      64:	movne	r0, #0
      68:	b	70 <read_bytes+0x70>
      6c:	mov	r0, #1
      70:	cmp	r0, #0
      74:	bne	8c <read_bytes+0x8c>
      78:	ldr	r0, [pc, #412]	; 21c <read_bytes+0x21c>
      7c:	ldr	r1, [pc, #392]	; 20c <read_bytes+0x20c>
      80:	mov	r2, #83	; 0x53
      84:	ldr	r3, [pc, #392]	; 214 <read_bytes+0x214>
      88:	bl	0 <__assert_fail>
      8c:	adds	r0, r5, r6
      90:	adc	r3, r8, r9
      94:	ldr	r1, [r4, #8]
      98:	ldr	ip, [r4, #12]
      9c:	cmp	r3, ip
      a0:	bne	b0 <read_bytes+0xb0>
      a4:	cmp	r0, r1
      a8:	bhi	b8 <read_bytes+0xb8>
      ac:	b	cc <read_bytes+0xcc>
      b0:	cmp	r3, ip
      b4:	bls	cc <read_bytes+0xcc>
      b8:	mvn	r0, #300	; 0x12c
      bc:	ldr	r1, [pc, #340]	; 218 <read_bytes+0x218>
      c0:	bl	0 <coda_set_error>
      c4:	mvn	r0, #0
      c8:	b	1e8 <read_bytes+0x1e8>
      cc:	ldr	r0, [r4, #56]	; 0x38
      d0:	mov	r2, r6
      d4:	mov	r3, r5
      d8:	mov	r1, r7
      dc:	bl	0 <pread>
      e0:	cmp	r0, #0
      e4:	bge	1e4 <read_bytes+0x1e4>
      e8:	bl	0 <__errno_location>
      ec:	ldr	r0, [r0]
      f0:	bl	0 <strerror>
      f4:	mvn	r3, #21
      f8:	ldr	r1, [pc, #272]	; 210 <read_bytes+0x210>
      fc:	mov	r2, r0
     100:	mov	r0, r3
     104:	bl	0 <coda_set_error>
     108:	mvn	r0, #0
     10c:	b	1e8 <read_bytes+0x1e8>
     110:	adds	ip, r5, r6
     114:	adc	r1, r8, r9
     118:	ldr	r2, [r4, #40]	; 0x28
     11c:	ldr	r3, [r4, #44]	; 0x2c
     120:	cmp	r1, r3
     124:	bne	134 <read_bytes+0x134>
     128:	cmp	ip, r2
     12c:	bhi	13c <read_bytes+0x13c>
     130:	b	1d0 <read_bytes+0x1d0>
     134:	cmp	r1, r3
     138:	bls	1d0 <read_bytes+0x1d0>
     13c:	ldr	r1, [r4, #16]
     140:	cmp	r1, #0
     144:	beq	15c <read_bytes+0x15c>
     148:	ldr	r2, [r4, #16]
     14c:	cmp	r2, #1
     150:	moveq	ip, #1
     154:	movne	ip, #0
     158:	b	160 <read_bytes+0x160>
     15c:	mov	ip, #1
     160:	cmp	ip, #0
     164:	bne	1bc <read_bytes+0x1bc>
     168:	add	r2, sp, #64	; 0x40
     16c:	mov	r1, r9
     170:	mov	r0, r6
     174:	bl	0 <coda_str64>
     178:	add	r2, sp, #88	; 0x58
     17c:	mov	r1, r8
     180:	mov	r0, r5
     184:	bl	0 <coda_str64>
     188:	ldr	r0, [r4, #40]	; 0x28
     18c:	ldr	r1, [r4, #44]	; 0x2c
     190:	add	r2, sp, #40	; 0x28
     194:	bl	0 <coda_str64>
     198:	mvn	r0, #300	; 0x12c
     19c:	ldr	r1, [pc, #124]	; 220 <read_bytes+0x220>
     1a0:	add	r2, sp, #64	; 0x40
     1a4:	add	r3, sp, #88	; 0x58
     1a8:	add	r4, sp, #40	; 0x28
     1ac:	str	r4, [sp]
     1b0:	bl	0 <coda_set_error>
     1b4:	mvn	r0, #0
     1b8:	b	1e8 <read_bytes+0x1e8>
     1bc:	mvn	r0, #300	; 0x12c
     1c0:	ldr	r1, [pc, #80]	; 218 <read_bytes+0x218>
     1c4:	bl	0 <coda_set_error>
     1c8:	mvn	r0, #0
     1cc:	b	1e8 <read_bytes+0x1e8>
     1d0:	ldr	r2, [r4, #48]	; 0x30
     1d4:	add	r1, r2, r5
     1d8:	mov	r2, r6
     1dc:	mov	r0, r7
     1e0:	bl	0 <memcpy>
     1e4:	mov	r0, #0
     1e8:	ldr	r4, [sp, #16]
     1ec:	ldr	r5, [sp, #20]
     1f0:	ldr	r6, [sp, #24]
     1f4:	ldr	r7, [sp, #28]
     1f8:	ldr	r8, [sp, #32]
     1fc:	ldr	r9, [sp, #36]	; 0x24
     200:	ldr	lr, [sp, #8]
     204:	add	sp, sp, #112	; 0x70
     208:	bx	lr
     20c:	.word	0x0000033f
     210:	.word	0x00000321
     214:	.word	0x0000076c
     218:	.word	0x000006df
     21c:	.word	0x00000709
     220:	.word	0x0000043e

00000224 <check_definition>:
     224:	mov	ip, sp
     228:	sub	sp, sp, #144	; 0x90
     22c:	str	ip, [sp, #4]
     230:	str	lr, [sp, #8]
     234:	str	r4, [sp, #16]
     238:	str	r5, [sp, #20]
     23c:	str	r6, [sp, #24]
     240:	str	r7, [sp, #28]
     244:	str	r8, [sp, #32]
     248:	str	r9, [sp, #36]	; 0x24
     24c:	str	sl, [sp, #40]	; 0x28
     250:	mov	r5, r3
     254:	mov	r7, r2
     258:	mov	r4, r1
     25c:	mov	r6, r0
     260:	ldr	r1, [r4]
     264:	cmp	r1, #0
     268:	bne	274 <check_definition+0x50>
     26c:	mov	r0, #0
     270:	b	9f8 <check_definition+0x7d4>
     274:	add	r1, sp, #52	; 0x34
     278:	mov	r0, r6
     27c:	bl	0 <coda_cursor_get_type_class>
     280:	cmp	r0, #0
     284:	beq	290 <check_definition+0x6c>
     288:	mvn	r0, #0
     28c:	b	9f8 <check_definition+0x7d4>
     290:	ldr	r0, [r4]
     294:	add	r1, sp, #48	; 0x30
     298:	bl	0 <coda_type_get_class>
     29c:	cmp	r0, #0
     2a0:	beq	2ac <check_definition+0x88>
     2a4:	mvn	r0, #0
     2a8:	b	9f8 <check_definition+0x7d4>
     2ac:	ldr	ip, [sp, #52]	; 0x34
     2b0:	ldr	r2, [sp, #48]	; 0x30
     2b4:	cmp	ip, r2
     2b8:	beq	320 <check_definition+0xfc>
     2bc:	ldr	r0, [sp, #52]	; 0x34
     2c0:	bl	0 <coda_type_get_class_name>
     2c4:	mov	r8, r0
     2c8:	ldr	r0, [sp, #48]	; 0x30
     2cc:	bl	0 <coda_type_get_class_name>
     2d0:	mov	r3, r0
     2d4:	movw	r0, #65236	; 0xfed4
     2d8:	movt	r0, #65535	; 0xffff
     2dc:	ldr	r1, [pc, #1896]	; a4c <check_definition+0x828>
     2e0:	mov	r2, r8
     2e4:	bl	0 <coda_set_error>
     2e8:	ldr	r0, [pc, #1840]	; a20 <check_definition+0x7fc>
     2ec:	ldr	r0, [r0]
     2f0:	bl	0 <coda_errno_to_string>
     2f4:	mov	r1, r0
     2f8:	mov	r2, r5
     2fc:	mov	r0, r6
     300:	blx	r7
     304:	ldr	r0, [pc, #1812]	; a20 <check_definition+0x7fc>
     308:	mov	r2, #0
     30c:	str	r2, [r0]
     310:	mov	r0, #0
     314:	str	r0, [r4]
     318:	mov	r0, #0
     31c:	b	9f8 <check_definition+0x7d4>
     320:	ldr	r2, [sp, #52]	; 0x34
     324:	cmp	r2, #7
     328:	bcs	9f4 <check_definition+0x7d0>
     32c:	add	pc, pc, r2, lsl #2
     330:	nop	{0}
     334:	b	54c <check_definition+0x328>
     338:	b	350 <check_definition+0x12c>
     33c:	b	8b8 <check_definition+0x694>
     340:	b	8b8 <check_definition+0x694>
     344:	b	9f4 <check_definition+0x7d0>
     348:	b	9f4 <check_definition+0x7d0>
     34c:	b	94c <check_definition+0x728>
     350:	ldr	r8, [r4]
     354:	add	r1, sp, #56	; 0x38
     358:	add	r2, sp, #112	; 0x70
     35c:	mov	r0, r6
     360:	bl	0 <coda_cursor_get_array_dim>
     364:	cmp	r0, #0
     368:	beq	374 <check_definition+0x150>
     36c:	mvn	r0, #0
     370:	b	9f8 <check_definition+0x7d4>
     374:	ldr	r1, [sp, #56]	; 0x38
     378:	ldr	r2, [r8, #48]	; 0x30
     37c:	cmp	r1, r2
     380:	beq	3cc <check_definition+0x1a8>
     384:	movw	r0, #65236	; 0xfed4
     388:	movt	r0, #65535	; 0xffff
     38c:	ldr	r1, [pc, #1688]	; a2c <check_definition+0x808>
     390:	ldr	r2, [sp, #56]	; 0x38
     394:	ldr	r3, [r8, #48]	; 0x30
     398:	bl	0 <coda_set_error>
     39c:	ldr	r3, [pc, #1660]	; a20 <check_definition+0x7fc>
     3a0:	ldr	r0, [r3]
     3a4:	bl	0 <coda_errno_to_string>
     3a8:	mov	r1, r0
     3ac:	mov	r2, r5
     3b0:	mov	r0, r6
     3b4:	blx	r7
     3b8:	ldr	r2, [pc, #1632]	; a20 <check_definition+0x7fc>
     3bc:	mov	ip, #0
     3c0:	str	ip, [r2]
     3c4:	mov	r0, #0
     3c8:	b	9f8 <check_definition+0x7d4>
     3cc:	mov	r4, #0
     3d0:	ldr	r2, [sp, #56]	; 0x38
     3d4:	cmp	r4, r2
     3d8:	bge	9f4 <check_definition+0x7d0>
     3dc:	lsl	r2, r4, #2
     3e0:	add	r0, r8, r2
     3e4:	ldr	r0, [r0, #52]	; 0x34
     3e8:	cmp	r0, #0
     3ec:	bge	4d4 <check_definition+0x2b0>
     3f0:	lsl	r0, r4, #2
     3f4:	add	r3, r8, r0
     3f8:	ldr	ip, [r3, #84]	; 0x54
     3fc:	cmp	ip, #0
     400:	beq	544 <check_definition+0x320>
     404:	lsl	r2, r4, #2
     408:	add	r2, r8, r2
     40c:	ldr	r0, [r2, #84]	; 0x54
     410:	add	r2, sp, #104	; 0x68
     414:	mov	r1, r6
     418:	bl	0 <coda_expression_eval_integer>
     41c:	cmp	r0, #0
     420:	bne	49c <check_definition+0x278>
     424:	add	ip, sp, #112	; 0x70
     428:	ldr	ip, [ip, r4, lsl #2]
     42c:	asr	r1, ip, #31
     430:	ldr	r3, [sp, #104]	; 0x68
     434:	ldr	r0, [sp, #108]	; 0x6c
     438:	eor	r2, r1, r0
     43c:	eor	r0, ip, r3
     440:	orr	r2, r2, r0
     444:	cmp	r2, #0
     448:	beq	544 <check_definition+0x320>
     44c:	movw	r0, #65236	; 0xfed4
     450:	movt	r0, #65535	; 0xffff
     454:	ldr	r1, [pc, #1516]	; a48 <check_definition+0x824>
     458:	add	r2, sp, #112	; 0x70
     45c:	ldr	r3, [r2, r4, lsl #2]
     460:	ldr	r2, [sp, #104]	; 0x68
     464:	str	r2, [sp]
     468:	mov	r2, r4
     46c:	bl	0 <coda_set_error>
     470:	ldr	r1, [pc, #1448]	; a20 <check_definition+0x7fc>
     474:	ldr	r0, [r1]
     478:	bl	0 <coda_errno_to_string>
     47c:	mov	r2, r5
     480:	mov	r1, r0
     484:	mov	r0, r6
     488:	blx	r7
     48c:	ldr	r1, [pc, #1420]	; a20 <check_definition+0x7fc>
     490:	mov	r0, #0
     494:	str	r0, [r1]
     498:	b	544 <check_definition+0x320>
     49c:	ldr	r0, [pc, #1436]	; a40 <check_definition+0x81c>
     4a0:	mov	r1, r4
     4a4:	bl	0 <coda_add_error_message>
     4a8:	ldr	r2, [pc, #1392]	; a20 <check_definition+0x7fc>
     4ac:	ldr	r0, [r2]
     4b0:	bl	0 <coda_errno_to_string>
     4b4:	mov	r1, r0
     4b8:	mov	r2, r5
     4bc:	mov	r0, r6
     4c0:	blx	r7
     4c4:	ldr	r3, [pc, #1364]	; a20 <check_definition+0x7fc>
     4c8:	mov	r0, #0
     4cc:	str	r0, [r3]
     4d0:	b	544 <check_definition+0x320>
     4d4:	add	r3, sp, #112	; 0x70
     4d8:	ldr	r2, [r3, r4, lsl #2]
     4dc:	lsl	ip, r4, #2
     4e0:	add	r3, r8, ip
     4e4:	ldr	r0, [r3, #52]	; 0x34
     4e8:	cmp	r2, r0
     4ec:	beq	544 <check_definition+0x320>
     4f0:	movw	r0, #65236	; 0xfed4
     4f4:	movt	r0, #65535	; 0xffff
     4f8:	ldr	r1, [pc, #1352]	; a48 <check_definition+0x824>
     4fc:	add	ip, sp, #112	; 0x70
     500:	ldr	r3, [ip, r4, lsl #2]
     504:	lsl	r2, r4, #2
     508:	add	ip, r8, r2
     50c:	ldr	r2, [ip, #52]	; 0x34
     510:	str	r2, [sp]
     514:	mov	r2, r4
     518:	bl	0 <coda_set_error>
     51c:	ldr	r3, [pc, #1276]	; a20 <check_definition+0x7fc>
     520:	ldr	r0, [r3]
     524:	bl	0 <coda_errno_to_string>
     528:	mov	r2, r5
     52c:	mov	r1, r0
     530:	mov	r0, r6
     534:	blx	r7
     538:	ldr	ip, [pc, #1248]	; a20 <check_definition+0x7fc>
     53c:	mov	r0, #0
     540:	str	r0, [ip]
     544:	add	r4, r4, #1
     548:	b	3d0 <check_definition+0x1ac>
     54c:	ldr	r9, [r4]
     550:	add	r1, sp, #60	; 0x3c
     554:	mov	r0, r6
     558:	bl	0 <coda_cursor_get_type>
     55c:	cmp	r0, #0
     560:	beq	56c <check_definition+0x348>
     564:	mvn	r0, #0
     568:	b	9f8 <check_definition+0x7d4>
     56c:	mov	r8, #0
     570:	ldr	r3, [r9, #48]	; 0x30
     574:	cmp	r8, r3
     578:	bge	800 <check_definition+0x5dc>
     57c:	mov	ip, #1
     580:	str	ip, [sp, #68]	; 0x44
     584:	mov	r3, #1
     588:	str	r3, [sp, #72]	; 0x48
     58c:	ldr	r1, [r9, #52]	; 0x34
     590:	ldr	r2, [r1, r8, lsl #2]
     594:	ldr	r1, [r2]
     598:	add	r2, sp, #76	; 0x4c
     59c:	mov	r0, r6
     5a0:	bl	0 <coda_cursor_get_record_field_index_from_name>
     5a4:	cmp	r0, #0
     5a8:	bne	5cc <check_definition+0x3a8>
     5ac:	ldr	r1, [sp, #76]	; 0x4c
     5b0:	add	r2, sp, #72	; 0x48
     5b4:	mov	r0, r6
     5b8:	bl	0 <coda_cursor_get_record_field_available_status>
     5bc:	cmp	r0, #0
     5c0:	beq	5f8 <check_definition+0x3d4>
     5c4:	mvn	r0, #0
     5c8:	b	9f8 <check_definition+0x7d4>
     5cc:	ldr	r1, [pc, #1100]	; a20 <check_definition+0x7fc>
     5d0:	ldr	r3, [r1]
     5d4:	cmn	r3, #102	; 0x66
     5d8:	beq	5e4 <check_definition+0x3c0>
     5dc:	mvn	r0, #0
     5e0:	b	9f8 <check_definition+0x7d4>
     5e4:	ldr	r3, [pc, #1076]	; a20 <check_definition+0x7fc>
     5e8:	mov	r0, #0
     5ec:	str	r0, [r3]
     5f0:	mov	r1, #0
     5f4:	str	r1, [sp, #72]	; 0x48
     5f8:	ldr	r3, [r9, #52]	; 0x34
     5fc:	ldr	ip, [r3, r8, lsl #2]
     600:	ldrb	r2, [ip, #16]
     604:	cmp	r2, #0
     608:	beq	688 <check_definition+0x464>
     60c:	ldr	r0, [r9, #52]	; 0x34
     610:	ldr	r1, [r0, r8, lsl #2]
     614:	ldr	r3, [r1, #20]
     618:	cmp	r3, #0
     61c:	beq	680 <check_definition+0x45c>
     620:	ldr	ip, [r9, #52]	; 0x34
     624:	ldr	r0, [ip, r8, lsl #2]
     628:	ldr	r0, [r0, #20]
     62c:	add	r2, sp, #68	; 0x44
     630:	mov	r1, r6
     634:	bl	0 <coda_expression_eval_bool>
     638:	cmp	r0, #0
     63c:	beq	688 <check_definition+0x464>
     640:	ldr	r0, [pc, #1032]	; a50 <check_definition+0x82c>
     644:	ldr	r1, [r9, #52]	; 0x34
     648:	ldr	r1, [r1, r8, lsl #2]
     64c:	ldr	r1, [r1]
     650:	bl	0 <coda_add_error_message>
     654:	ldr	r3, [pc, #964]	; a20 <check_definition+0x7fc>
     658:	ldr	r0, [r3]
     65c:	bl	0 <coda_errno_to_string>
     660:	mov	r1, r0
     664:	mov	r2, r5
     668:	mov	r0, r6
     66c:	blx	r7
     670:	ldr	r0, [pc, #936]	; a20 <check_definition+0x7fc>
     674:	mov	ip, #0
     678:	str	ip, [r0]
     67c:	b	688 <check_definition+0x464>
     680:	mvn	r3, #0
     684:	str	r3, [sp, #68]	; 0x44
     688:	ldr	r0, [sp, #68]	; 0x44
     68c:	cmn	r0, #1
     690:	beq	71c <check_definition+0x4f8>
     694:	ldr	ip, [sp, #72]	; 0x48
     698:	ldr	r2, [sp, #68]	; 0x44
     69c:	cmp	ip, r2
     6a0:	beq	71c <check_definition+0x4f8>
     6a4:	ldr	r0, [sp, #72]	; 0x48
     6a8:	cmp	r0, #0
     6ac:	bne	6b8 <check_definition+0x494>
     6b0:	ldr	r3, [pc, #880]	; a28 <check_definition+0x804>
     6b4:	b	6bc <check_definition+0x498>
     6b8:	ldr	r3, [pc, #884]	; a34 <check_definition+0x810>
     6bc:	ldr	ip, [sp, #68]	; 0x44
     6c0:	cmp	ip, #0
     6c4:	bne	6d0 <check_definition+0x4ac>
     6c8:	ldr	sl, [pc, #856]	; a28 <check_definition+0x804>
     6cc:	b	6d4 <check_definition+0x4b0>
     6d0:	ldr	sl, [pc, #860]	; a34 <check_definition+0x810>
     6d4:	movw	r0, #65236	; 0xfed4
     6d8:	movt	r0, #65535	; 0xffff
     6dc:	ldr	r1, [pc, #844]	; a30 <check_definition+0x80c>
     6e0:	ldr	r2, [r9, #52]	; 0x34
     6e4:	ldr	r2, [r2, r8, lsl #2]
     6e8:	ldr	r2, [r2]
     6ec:	str	sl, [sp]
     6f0:	bl	0 <coda_set_error>
     6f4:	ldr	r0, [pc, #804]	; a20 <check_definition+0x7fc>
     6f8:	ldr	r0, [r0]
     6fc:	bl	0 <coda_errno_to_string>
     700:	mov	r1, r0
     704:	mov	r2, r5
     708:	mov	r0, r6
     70c:	blx	r7
     710:	ldr	ip, [pc, #776]	; a20 <check_definition+0x7fc>
     714:	mov	r2, #0
     718:	str	r2, [ip]
     71c:	ldr	r1, [sp, #72]	; 0x48
     720:	cmp	r1, #0
     724:	beq	73c <check_definition+0x518>
     728:	ldr	r2, [sp, #68]	; 0x44
     72c:	cmp	r2, #0
     730:	movne	ip, #1
     734:	moveq	ip, #0
     738:	b	740 <check_definition+0x51c>
     73c:	mov	ip, #0
     740:	cmp	ip, #0
     744:	beq	7f8 <check_definition+0x5d4>
     748:	ldr	r0, [sp, #60]	; 0x3c
     74c:	ldr	r1, [sp, #76]	; 0x4c
     750:	add	r2, sp, #80	; 0x50
     754:	bl	0 <coda_type_get_record_field_real_name>
     758:	cmp	r0, #0
     75c:	beq	768 <check_definition+0x544>
     760:	mvn	r0, #0
     764:	b	9f8 <check_definition+0x7d4>
     768:	ldr	r1, [r9, #52]	; 0x34
     76c:	ldr	r1, [r1, r8, lsl #2]
     770:	ldr	r3, [r1, #4]
     774:	cmp	r3, #0
     778:	bne	78c <check_definition+0x568>
     77c:	ldr	r3, [r9, #52]	; 0x34
     780:	ldr	r1, [r3, r8, lsl #2]
     784:	ldr	sl, [r1]
     788:	b	798 <check_definition+0x574>
     78c:	ldr	r2, [r9, #52]	; 0x34
     790:	ldr	r3, [r2, r8, lsl #2]
     794:	ldr	sl, [r3, #4]
     798:	ldr	r0, [sp, #80]	; 0x50
     79c:	mov	r1, sl
     7a0:	bl	0 <strcmp>
     7a4:	cmp	r0, #0
     7a8:	beq	7f8 <check_definition+0x5d4>
     7ac:	movw	r0, #65236	; 0xfed4
     7b0:	movt	r0, #65535	; 0xffff
     7b4:	ldr	r1, [pc, #640]	; a3c <check_definition+0x818>
     7b8:	ldr	r2, [r9, #52]	; 0x34
     7bc:	ldr	r2, [r2, r8, lsl #2]
     7c0:	ldr	r2, [r2]
     7c4:	ldr	r3, [sp, #80]	; 0x50
     7c8:	str	sl, [sp]
     7cc:	bl	0 <coda_set_error>
     7d0:	ldr	r3, [pc, #584]	; a20 <check_definition+0x7fc>
     7d4:	ldr	r0, [r3]
     7d8:	bl	0 <coda_errno_to_string>
     7dc:	mov	r1, r0
     7e0:	mov	r2, r5
     7e4:	mov	r0, r6
     7e8:	blx	r7
     7ec:	ldr	r3, [pc, #556]	; a20 <check_definition+0x7fc>
     7f0:	mov	r1, #0
     7f4:	str	r1, [r3]
     7f8:	add	r8, r8, #1
     7fc:	b	570 <check_definition+0x34c>
     800:	add	r1, sp, #64	; 0x40
     804:	mov	r0, r6
     808:	bl	0 <coda_cursor_get_num_elements>
     80c:	cmp	r0, #0
     810:	beq	81c <check_definition+0x5f8>
     814:	mvn	r0, #0
     818:	b	9f8 <check_definition+0x7d4>
     81c:	mov	r8, #0
     820:	ldr	r1, [sp, #64]	; 0x40
     824:	cmp	r8, r1
     828:	bge	9f4 <check_definition+0x7d0>
     82c:	ldr	r0, [sp, #60]	; 0x3c
     830:	add	r2, sp, #84	; 0x54
     834:	mov	r1, r8
     838:	bl	0 <coda_type_get_record_field_name>
     83c:	cmp	r0, #0
     840:	beq	84c <check_definition+0x628>
     844:	mvn	r0, #0
     848:	b	9f8 <check_definition+0x7d4>
     84c:	ldr	r0, [r4]
     850:	ldr	r1, [sp, #84]	; 0x54
     854:	add	r2, sp, #88	; 0x58
     858:	bl	0 <coda_type_get_record_field_index_from_name>
     85c:	cmp	r0, #0
     860:	beq	8b0 <check_definition+0x68c>
     864:	ldr	r1, [pc, #436]	; a20 <check_definition+0x7fc>
     868:	ldr	r0, [r1]
     86c:	cmn	r0, #102	; 0x66
     870:	bne	8b0 <check_definition+0x68c>
     874:	movw	r0, #65236	; 0xfed4
     878:	movt	r0, #65535	; 0xffff
     87c:	ldr	r1, [pc, #436]	; a38 <check_definition+0x814>
     880:	ldr	r2, [sp, #84]	; 0x54
     884:	bl	0 <coda_set_error>
     888:	ldr	r2, [pc, #400]	; a20 <check_definition+0x7fc>
     88c:	ldr	r0, [r2]
     890:	bl	0 <coda_errno_to_string>
     894:	mov	r1, r0
     898:	mov	r2, r5
     89c:	mov	r0, r6
     8a0:	blx	r7
     8a4:	ldr	ip, [pc, #372]	; a20 <check_definition+0x7fc>
     8a8:	mov	r1, #0
     8ac:	str	r1, [ip]
     8b0:	add	r8, r8, #1
     8b4:	b	820 <check_definition+0x5fc>
     8b8:	add	r1, sp, #92	; 0x5c
     8bc:	mov	r0, r6
     8c0:	bl	0 <coda_cursor_get_read_type>
     8c4:	cmp	r0, #0
     8c8:	beq	8d4 <check_definition+0x6b0>
     8cc:	mvn	r0, #0
     8d0:	b	9f8 <check_definition+0x7d4>
     8d4:	ldr	r0, [sp, #92]	; 0x5c
     8d8:	ldr	ip, [r4]
     8dc:	ldr	r1, [ip, #12]
     8e0:	cmp	r0, r1
     8e4:	beq	9f4 <check_definition+0x7d0>
     8e8:	ldr	r0, [sp, #92]	; 0x5c
     8ec:	bl	0 <coda_type_get_native_type_name>
     8f0:	mov	r8, r0
     8f4:	ldr	r1, [r4]
     8f8:	ldr	r0, [r1, #12]
     8fc:	bl	0 <coda_type_get_native_type_name>
     900:	movw	r3, #65236	; 0xfed4
     904:	movt	r3, #65535	; 0xffff
     908:	ldr	r1, [pc, #276]	; a24 <check_definition+0x800>
     90c:	mov	ip, r0
     910:	mov	r0, r3
     914:	mov	r3, ip
     918:	mov	r2, r8
     91c:	bl	0 <coda_set_error>
     920:	ldr	ip, [pc, #248]	; a20 <check_definition+0x7fc>
     924:	ldr	r0, [ip]
     928:	bl	0 <coda_errno_to_string>
     92c:	mov	r2, r5
     930:	mov	r1, r0
     934:	mov	r0, r6
     938:	blx	r7
     93c:	ldr	r3, [pc, #220]	; a20 <check_definition+0x7fc>
     940:	mov	ip, #0
     944:	str	ip, [r3]
     948:	b	9f4 <check_definition+0x7d0>
     94c:	add	r1, sp, #96	; 0x60
     950:	mov	r0, r6
     954:	bl	0 <coda_cursor_get_special_type>
     958:	cmp	r0, #0
     95c:	beq	968 <check_definition+0x744>
     960:	mvn	r0, #0
     964:	b	9f8 <check_definition+0x7d4>
     968:	ldr	r0, [r4]
     96c:	add	r1, sp, #100	; 0x64
     970:	bl	0 <coda_type_get_special_type>
     974:	cmp	r0, #0
     978:	beq	984 <check_definition+0x760>
     97c:	mvn	r0, #0
     980:	b	9f8 <check_definition+0x7d4>
     984:	ldr	r2, [sp, #96]	; 0x60
     988:	ldr	r0, [sp, #100]	; 0x64
     98c:	cmp	r2, r0
     990:	beq	9ec <check_definition+0x7c8>
     994:	ldr	r0, [sp, #96]	; 0x60
     998:	bl	0 <coda_type_get_special_type_name>
     99c:	mov	r8, r0
     9a0:	ldr	r0, [sp, #100]	; 0x64
     9a4:	bl	0 <coda_type_get_special_type_name>
     9a8:	movw	r2, #65236	; 0xfed4
     9ac:	movt	r2, #65535	; 0xffff
     9b0:	ldr	r1, [pc, #140]	; a44 <check_definition+0x820>
     9b4:	mov	r3, r0
     9b8:	mov	r0, r2
     9bc:	mov	r2, r8
     9c0:	bl	0 <coda_set_error>
     9c4:	ldr	r2, [pc, #84]	; a20 <check_definition+0x7fc>
     9c8:	ldr	r0, [r2]
     9cc:	bl	0 <coda_errno_to_string>
     9d0:	mov	r2, r5
     9d4:	mov	r1, r0
     9d8:	mov	r0, r6
     9dc:	blx	r7
     9e0:	ldr	r0, [pc, #56]	; a20 <check_definition+0x7fc>
     9e4:	mov	r2, #0
     9e8:	str	r2, [r0]
     9ec:	mov	r1, #0
     9f0:	str	r1, [r4]
     9f4:	mov	r0, #0
     9f8:	ldr	r4, [sp, #16]
     9fc:	ldr	r5, [sp, #20]
     a00:	ldr	r6, [sp, #24]
     a04:	ldr	r7, [sp, #28]
     a08:	ldr	r8, [sp, #32]
     a0c:	ldr	r9, [sp, #36]	; 0x24
     a10:	ldr	sl, [sp, #40]	; 0x28
     a14:	ldr	lr, [sp, #8]
     a18:	add	sp, sp, #144	; 0x90
     a1c:	bx	lr
     a20:	.word	0x00000000
     a24:	.word	0x000004aa
     a28:	.word	0x000001b3
     a2c:	.word	0x000001fc
     a30:	.word	0x00000265
     a34:	.word	0x000001bf
     a38:	.word	0x00000594
     a3c:	.word	0x000004d8
     a40:	.word	0x0000017a
     a44:	.word	0x00000479
     a48:	.word	0x00000611
     a4c:	.word	0x00000415
     a50:	.word	0x00000661

00000a54 <check_data>:
     a54:	mov	ip, sp
     a58:	sub	sp, sp, #328	; 0x148
     a5c:	sub	sp, sp, #1024	; 0x400
     a60:	str	ip, [sp, #12]
     a64:	str	lr, [sp, #16]
     a68:	str	r4, [sp, #32]
     a6c:	str	r5, [sp, #36]	; 0x24
     a70:	str	r6, [sp, #40]	; 0x28
     a74:	str	r7, [sp, #44]	; 0x2c
     a78:	str	r8, [sp, #48]	; 0x30
     a7c:	str	r9, [sp, #52]	; 0x34
     a80:	str	sl, [sp, #56]	; 0x38
     a84:	str	fp, [sp, #60]	; 0x3c
     a88:	ldr	ip, [ip, #8]
     a8c:	str	ip, [sp, #24]
     a90:	ldr	ip, [sp, #12]
     a94:	ldr	r5, [ip, #4]
     a98:	ldr	r7, [ip]
     a9c:	mov	sl, r3
     aa0:	mov	r9, r2
     aa4:	mov	r8, r1
     aa8:	mov	r6, r0
     aac:	mov	fp, #0
     ab0:	cmp	r7, #0
     ab4:	bne	acc <check_data+0x78>
     ab8:	ldr	r0, [pc, #3824]	; 19b0 <check_data+0xf5c>
     abc:	ldr	r1, [pc, #3872]	; 19e4 <check_data+0xf90>
     ac0:	movw	r2, #306	; 0x132
     ac4:	ldr	r3, [pc, #3824]	; 19bc <check_data+0xf68>
     ac8:	bl	0 <__assert_fail>
     acc:	add	r1, sp, #72	; 0x48
     ad0:	mov	r0, r6
     ad4:	bl	0 <coda_cursor_get_type>
     ad8:	cmp	r0, #0
     adc:	beq	ae8 <check_data+0x94>
     ae0:	mvn	r0, #0
     ae4:	b	1ce4 <check_data+0x1290>
     ae8:	ldr	r0, [sp, #72]	; 0x48
     aec:	add	r1, sp, #64	; 0x40
     af0:	bl	0 <coda_type_get_class>
     af4:	cmp	r0, #0
     af8:	beq	b04 <check_data+0xb0>
     afc:	mvn	r0, #0
     b00:	b	1ce4 <check_data+0x1290>
     b04:	ldr	r3, [sp, #24]
     b08:	mov	r2, r5
     b0c:	mov	r1, r8
     b10:	mov	r0, r6
     b14:	bl	224 <check_definition>
     b18:	cmp	r0, #0
     b1c:	beq	b28 <check_data+0xd4>
     b20:	mvn	r0, #0
     b24:	b	1ce4 <check_data+0x1290>
     b28:	cmp	sl, #0
     b2c:	beq	b90 <check_data+0x13c>
     b30:	ldr	r3, [sp, #64]	; 0x40
     b34:	cmp	r3, #7
     b38:	bcs	b90 <check_data+0x13c>
     b3c:	add	pc, pc, r3, lsl #2
     b40:	nop	{0}
     b44:	b	b60 <check_data+0x10c>
     b48:	b	b60 <check_data+0x10c>
     b4c:	b	b74 <check_data+0x120>
     b50:	b	b74 <check_data+0x120>
     b54:	b	b74 <check_data+0x120>
     b58:	b	b74 <check_data+0x120>
     b5c:	b	b60 <check_data+0x10c>
     b60:	mov	r1, #0
     b64:	mov	r0, #0
     b68:	str	r0, [r7]
     b6c:	str	r1, [r7, #4]
     b70:	b	b90 <check_data+0x13c>
     b74:	mov	r1, r7
     b78:	mov	r0, r6
     b7c:	bl	0 <coda_cursor_get_bit_size>
     b80:	cmp	r0, #0
     b84:	beq	b90 <check_data+0x13c>
     b88:	mvn	r0, #0
     b8c:	b	1ce4 <check_data+0x1290>
     b90:	cmp	r9, #0
     b94:	beq	1264 <check_data+0x810>
     b98:	ldr	r2, [sp, #64]	; 0x40
     b9c:	cmp	r2, #7
     ba0:	bcs	1264 <check_data+0x810>
     ba4:	add	pc, pc, r2, lsl #2
     ba8:	nop	{0}
     bac:	b	1264 <check_data+0x810>
     bb0:	b	1264 <check_data+0x810>
     bb4:	b	bc8 <check_data+0x174>
     bb8:	b	bc8 <check_data+0x174>
     bbc:	b	c5c <check_data+0x208>
     bc0:	b	f74 <check_data+0x520>
     bc4:	b	11ac <check_data+0x758>
     bc8:	add	r1, sp, #144	; 0x90
     bcc:	mov	r0, r6
     bd0:	bl	0 <coda_cursor_read_double>
     bd4:	cmp	r0, #0
     bd8:	beq	1264 <check_data+0x810>
     bdc:	ldr	r1, [pc, #3528]	; 19ac <check_data+0xf58>
     be0:	ldr	r0, [r1]
     be4:	cmn	r0, #300	; 0x12c
     be8:	beq	c04 <check_data+0x1b0>
     bec:	ldr	r1, [pc, #3512]	; 19ac <check_data+0xf58>
     bf0:	ldr	ip, [r1]
     bf4:	cmn	ip, #103	; 0x67
     bf8:	movne	r3, #1
     bfc:	moveq	r3, #0
     c00:	b	c08 <check_data+0x1b4>
     c04:	mov	r3, #0
     c08:	cmp	r3, #0
     c0c:	beq	c28 <check_data+0x1d4>
     c10:	ldr	r0, [pc, #3476]	; 19ac <check_data+0xf58>
     c14:	ldr	r2, [r0]
     c18:	cmn	r2, #104	; 0x68
     c1c:	movne	r3, #1
     c20:	moveq	r3, #0
     c24:	b	c2c <check_data+0x1d8>
     c28:	mov	r3, #0
     c2c:	cmp	r3, #0
     c30:	beq	c3c <check_data+0x1e8>
     c34:	mvn	r0, #0
     c38:	b	1ce4 <check_data+0x1290>
     c3c:	ldr	r0, [pc, #3432]	; 19ac <check_data+0xf58>
     c40:	ldr	r0, [r0]
     c44:	bl	0 <coda_errno_to_string>
     c48:	ldr	r2, [sp, #24]
     c4c:	mov	r1, r0
     c50:	mov	r0, r6
     c54:	blx	r5
     c58:	b	1264 <check_data+0x810>
     c5c:	mov	r4, #0
     c60:	add	r1, sp, #76	; 0x4c
     c64:	mov	r0, r6
     c68:	bl	0 <coda_cursor_get_string_length>
     c6c:	cmp	r0, #0
     c70:	beq	cf8 <check_data+0x2a4>
     c74:	ldr	r1, [pc, #3376]	; 19ac <check_data+0xf58>
     c78:	ldr	ip, [r1]
     c7c:	cmn	ip, #300	; 0x12c
     c80:	beq	c9c <check_data+0x248>
     c84:	ldr	ip, [pc, #3360]	; 19ac <check_data+0xf58>
     c88:	ldr	r3, [ip]
     c8c:	cmn	r3, #103	; 0x67
     c90:	movne	r2, #1
     c94:	moveq	r2, #0
     c98:	b	ca0 <check_data+0x24c>
     c9c:	mov	r2, #0
     ca0:	cmp	r2, #0
     ca4:	beq	cc0 <check_data+0x26c>
     ca8:	ldr	ip, [pc, #3324]	; 19ac <check_data+0xf58>
     cac:	ldr	r2, [ip]
     cb0:	cmn	r2, #104	; 0x68
     cb4:	movne	ip, #1
     cb8:	moveq	ip, #0
     cbc:	b	cc4 <check_data+0x270>
     cc0:	mov	ip, #0
     cc4:	cmp	ip, #0
     cc8:	beq	cd4 <check_data+0x280>
     ccc:	mvn	r0, #0
     cd0:	b	1ce4 <check_data+0x1290>
     cd4:	ldr	ip, [pc, #3280]	; 19ac <check_data+0xf58>
     cd8:	ldr	r0, [ip]
     cdc:	bl	0 <coda_errno_to_string>
     ce0:	ldr	r2, [sp, #24]
     ce4:	mov	r1, r0
     ce8:	mov	r0, r6
     cec:	blx	r5
     cf0:	mov	fp, #1
     cf4:	b	1264 <check_data+0x810>
     cf8:	ldr	r1, [sp, #76]	; 0x4c
     cfc:	cmp	r1, #0
     d00:	bge	d1c <check_data+0x2c8>
     d04:	ldr	r1, [pc, #3268]	; 19d0 <check_data+0xf7c>
     d08:	ldr	r2, [sp, #24]
     d0c:	mov	r0, r6
     d10:	blx	r5
     d14:	mov	fp, #1
     d18:	b	1264 <check_data+0x810>
     d1c:	ldr	r0, [r8]
     d20:	cmp	r0, #0
     d24:	bne	d30 <check_data+0x2dc>
     d28:	ldr	r0, [sp, #72]	; 0x48
     d2c:	b	d34 <check_data+0x2e0>
     d30:	ldr	r0, [r8]
     d34:	add	r1, sp, #80	; 0x50
     d38:	add	r2, sp, #84	; 0x54
     d3c:	bl	0 <coda_type_get_fixed_value>
     d40:	cmp	r0, #0
     d44:	beq	d50 <check_data+0x2fc>
     d48:	mvn	r0, #0
     d4c:	b	1ce4 <check_data+0x1290>
     d50:	ldr	r1, [sp, #76]	; 0x4c
     d54:	cmp	r1, #0
     d58:	ble	dc8 <check_data+0x374>
     d5c:	ldr	r1, [sp, #76]	; 0x4c
     d60:	add	r0, r1, #1
     d64:	bl	0 <malloc>
     d68:	mov	r4, r0
     d6c:	cmp	r4, #0
     d70:	bne	d9c <check_data+0x348>
     d74:	mvn	r0, #0
     d78:	ldr	r1, [pc, #3160]	; 19d8 <check_data+0xf84>
     d7c:	ldr	r2, [sp, #76]	; 0x4c
     d80:	add	r2, r2, #1
     d84:	ldr	r3, [pc, #3160]	; 19e4 <check_data+0xf90>
     d88:	movw	ip, #411	; 0x19b
     d8c:	str	ip, [sp]
     d90:	bl	0 <coda_set_error>
     d94:	mvn	r0, #0
     d98:	b	1ce4 <check_data+0x1290>
     d9c:	ldr	ip, [sp, #76]	; 0x4c
     da0:	add	r2, ip, #1
     da4:	mov	r1, r4
     da8:	mov	r0, r6
     dac:	bl	0 <coda_cursor_read_string>
     db0:	cmp	r0, #0
     db4:	beq	dc8 <check_data+0x374>
     db8:	mov	r0, r4
     dbc:	bl	0 <free>
     dc0:	mvn	r0, #0
     dc4:	b	1ce4 <check_data+0x1290>
     dc8:	ldr	r3, [sp, #80]	; 0x50
     dcc:	cmp	r3, #0
     dd0:	beq	e2c <check_data+0x3d8>
     dd4:	ldr	r0, [sp, #76]	; 0x4c
     dd8:	ldr	ip, [sp, #84]	; 0x54
     ddc:	cmp	r0, ip
     de0:	bne	e1c <check_data+0x3c8>
     de4:	ldr	r2, [sp, #76]	; 0x4c
     de8:	cmp	r2, #0
     dec:	ble	e2c <check_data+0x3d8>
     df0:	ldr	r1, [sp, #80]	; 0x50
     df4:	ldr	r2, [sp, #84]	; 0x54
     df8:	mov	r0, r4
     dfc:	bl	0 <memcmp>
     e00:	cmp	r0, #0
     e04:	beq	e2c <check_data+0x3d8>
     e08:	ldr	r1, [pc, #2968]	; 19a8 <check_data+0xf54>
     e0c:	ldr	r2, [sp, #24]
     e10:	mov	r0, r6
     e14:	blx	r5
     e18:	b	e2c <check_data+0x3d8>
     e1c:	ldr	r1, [pc, #2984]	; 19cc <check_data+0xf78>
     e20:	ldr	r2, [sp, #24]
     e24:	mov	r0, r6
     e28:	blx	r5
     e2c:	ldr	r2, [sp, #72]	; 0x48
     e30:	ldr	r0, [r2, #44]	; 0x2c
     e34:	cmp	r0, #1
     e38:	bne	f60 <check_data+0x50c>
     e3c:	ldr	r3, [r6]
     e40:	ldr	r2, [r3, #60]	; 0x3c
     e44:	cmp	r2, #2
     e48:	bcs	eb4 <check_data+0x460>
     e4c:	cmp	r2, #0
     e50:	beq	e94 <check_data+0x440>
     e54:	ldr	r3, [sp, #76]	; 0x4c
     e58:	cmp	r3, #1
     e5c:	bne	e74 <check_data+0x420>
     e60:	ldrb	r0, [r4]
     e64:	cmp	r0, #10
     e68:	movne	r1, #1
     e6c:	moveq	r1, #0
     e70:	b	e78 <check_data+0x424>
     e74:	mov	r1, #1
     e78:	cmp	r1, #0
     e7c:	beq	f60 <check_data+0x50c>
     e80:	ldr	r1, [pc, #2916]	; 19ec <check_data+0xf98>
     e84:	ldr	r2, [sp, #24]
     e88:	mov	r0, r6
     e8c:	blx	r5
     e90:	b	f60 <check_data+0x50c>
     e94:	ldr	r0, [pc, #2860]	; 19c8 <check_data+0xf74>
     e98:	ldr	r1, [pc, #2884]	; 19e4 <check_data+0xf90>
     e9c:	movw	r2, #462	; 0x1ce
     ea0:	ldr	r3, [pc, #2836]	; 19bc <check_data+0xf68>
     ea4:	bl	0 <__assert_fail>
     ea8:	mov	r0, #1
     eac:	bl	0 <exit>
     eb0:	b	f60 <check_data+0x50c>
     eb4:	cmp	r2, #2
     eb8:	beq	f24 <check_data+0x4d0>
     ebc:	cmp	r2, #3
     ec0:	bne	f60 <check_data+0x50c>
     ec4:	ldr	r2, [sp, #76]	; 0x4c
     ec8:	cmp	r2, #2
     ecc:	bne	ee4 <check_data+0x490>
     ed0:	ldrb	r3, [r4]
     ed4:	cmp	r3, #13
     ed8:	movne	r1, #1
     edc:	moveq	r1, #0
     ee0:	b	ee8 <check_data+0x494>
     ee4:	mov	r1, #1
     ee8:	cmp	r1, #0
     eec:	bne	f04 <check_data+0x4b0>
     ef0:	ldrb	r0, [r4, #1]
     ef4:	cmp	r0, #10
     ef8:	movne	ip, #1
     efc:	moveq	ip, #0
     f00:	b	f08 <check_data+0x4b4>
     f04:	mov	ip, #1
     f08:	cmp	ip, #0
     f0c:	beq	f60 <check_data+0x50c>
     f10:	ldr	r1, [pc, #2732]	; 19c4 <check_data+0xf70>
     f14:	ldr	r2, [sp, #24]
     f18:	mov	r0, r6
     f1c:	blx	r5
     f20:	b	f60 <check_data+0x50c>
     f24:	ldr	r0, [sp, #76]	; 0x4c
     f28:	cmp	r0, #1
     f2c:	bne	f44 <check_data+0x4f0>
     f30:	ldrb	ip, [r4]
     f34:	cmp	ip, #13
     f38:	movne	r1, #1
     f3c:	moveq	r1, #0
     f40:	b	f48 <check_data+0x4f4>
     f44:	mov	r1, #1
     f48:	cmp	r1, #0
     f4c:	beq	f60 <check_data+0x50c>
     f50:	ldr	r1, [pc, #2692]	; 19dc <check_data+0xf88>
     f54:	ldr	r2, [sp, #24]
     f58:	mov	r0, r6
     f5c:	blx	r5
     f60:	cmp	r4, #0
     f64:	beq	1264 <check_data+0x810>
     f68:	mov	r0, r4
     f6c:	bl	0 <free>
     f70:	b	1264 <check_data+0x810>
     f74:	cmp	sl, #0
     f78:	bne	1014 <check_data+0x5c0>
     f7c:	mov	r1, r7
     f80:	mov	r0, r6
     f84:	bl	0 <coda_cursor_get_bit_size>
     f88:	cmp	r0, #0
     f8c:	beq	1014 <check_data+0x5c0>
     f90:	ldr	r3, [pc, #2580]	; 19ac <check_data+0xf58>
     f94:	ldr	r0, [r3]
     f98:	cmn	r0, #300	; 0x12c
     f9c:	beq	fb8 <check_data+0x564>
     fa0:	ldr	r0, [pc, #2564]	; 19ac <check_data+0xf58>
     fa4:	ldr	ip, [r0]
     fa8:	cmn	ip, #103	; 0x67
     fac:	movne	r1, #1
     fb0:	moveq	r1, #0
     fb4:	b	fbc <check_data+0x568>
     fb8:	mov	r1, #0
     fbc:	cmp	r1, #0
     fc0:	beq	fdc <check_data+0x588>
     fc4:	ldr	ip, [pc, #2528]	; 19ac <check_data+0xf58>
     fc8:	ldr	r2, [ip]
     fcc:	cmn	r2, #104	; 0x68
     fd0:	movne	r2, #1
     fd4:	moveq	r2, #0
     fd8:	b	fe0 <check_data+0x58c>
     fdc:	mov	r2, #0
     fe0:	cmp	r2, #0
     fe4:	beq	ff0 <check_data+0x59c>
     fe8:	mvn	r0, #0
     fec:	b	1ce4 <check_data+0x1290>
     ff0:	ldr	r0, [pc, #2484]	; 19ac <check_data+0xf58>
     ff4:	ldr	r0, [r0]
     ff8:	bl	0 <coda_errno_to_string>
     ffc:	ldr	r2, [sp, #24]
    1000:	mov	r1, r0
    1004:	mov	r0, r6
    1008:	blx	r5
    100c:	mov	fp, #1
    1010:	b	1264 <check_data+0x810>
    1014:	ldr	r0, [r7, #4]
    1018:	cmp	r0, #0
    101c:	bge	1038 <check_data+0x5e4>
    1020:	ldr	r1, [pc, #2476]	; 19d4 <check_data+0xf80>
    1024:	ldr	r2, [sp, #24]
    1028:	mov	r0, r6
    102c:	blx	r5
    1030:	mov	fp, #1
    1034:	b	1264 <check_data+0x810>
    1038:	ldr	r3, [r7]
    103c:	mov	r2, #0
    1040:	and	r1, r3, #7
    1044:	orr	r2, r2, r1
    1048:	cmp	r2, #0
    104c:	bne	1058 <check_data+0x604>
    1050:	mov	ip, #0
    1054:	b	105c <check_data+0x608>
    1058:	mov	ip, #1
    105c:	ldr	r2, [r7]
    1060:	ldr	r3, [r7, #4]
    1064:	asr	r1, r3, #3
    1068:	lsr	r0, r2, #3
    106c:	orr	r0, r0, r3, lsl #29
    1070:	asr	r2, ip, #31
    1074:	adds	lr, r0, ip
    1078:	adc	r4, r1, r2
    107c:	mov	r2, lr
    1080:	str	r2, [sp, #28]
    1084:	ldr	r2, [r8]
    1088:	cmp	r2, #0
    108c:	bne	1098 <check_data+0x644>
    1090:	ldr	r0, [sp, #72]	; 0x48
    1094:	b	109c <check_data+0x648>
    1098:	ldr	r0, [r8]
    109c:	add	r1, sp, #88	; 0x58
    10a0:	add	r2, sp, #92	; 0x5c
    10a4:	bl	0 <coda_type_get_fixed_value>
    10a8:	cmp	r0, #0
    10ac:	beq	10b8 <check_data+0x664>
    10b0:	mvn	r0, #0
    10b4:	b	1ce4 <check_data+0x1290>
    10b8:	ldr	r1, [sp, #88]	; 0x58
    10bc:	cmp	r1, #0
    10c0:	beq	1264 <check_data+0x810>
    10c4:	ldr	r2, [sp, #92]	; 0x5c
    10c8:	asr	r3, r2, #31
    10cc:	eor	r1, r4, r3
    10d0:	ldr	r3, [sp, #28]
    10d4:	eor	r2, r3, r2
    10d8:	orr	r2, r1, r2
    10dc:	cmp	r2, #0
    10e0:	bne	1198 <check_data+0x744>
    10e4:	ldr	ip, [sp, #92]	; 0x5c
    10e8:	cmp	ip, #0
    10ec:	ble	1264 <check_data+0x810>
    10f0:	ldr	r0, [sp, #28]
    10f4:	bl	0 <malloc>
    10f8:	mov	r4, r0
    10fc:	cmp	r4, #0
    1100:	bne	1128 <check_data+0x6d4>
    1104:	mvn	r0, #0
    1108:	ldr	r1, [pc, #2248]	; 19d8 <check_data+0xf84>
    110c:	ldr	r2, [sp, #28]
    1110:	ldr	r3, [pc, #2252]	; 19e4 <check_data+0xf90>
    1114:	mov	r4, #524	; 0x20c
    1118:	str	r4, [sp]
    111c:	bl	0 <coda_set_error>
    1120:	mvn	r0, #0
    1124:	b	1ce4 <check_data+0x1290>
    1128:	mov	r3, #0
    112c:	mov	r2, #0
    1130:	ldr	r0, [r7]
    1134:	ldr	r1, [r7, #4]
    1138:	str	r1, [sp, #4]
    113c:	str	r0, [sp]
    1140:	mov	r1, r4
    1144:	mov	r0, r6
    1148:	bl	0 <coda_cursor_read_bits>
    114c:	cmp	r0, #0
    1150:	beq	1164 <check_data+0x710>
    1154:	mov	r0, r4
    1158:	bl	0 <free>
    115c:	mvn	r0, #0
    1160:	b	1ce4 <check_data+0x1290>
    1164:	ldr	r1, [sp, #88]	; 0x58
    1168:	ldr	r2, [sp, #92]	; 0x5c
    116c:	mov	r0, r4
    1170:	bl	0 <memcmp>
    1174:	cmp	r0, #0
    1178:	beq	118c <check_data+0x738>
    117c:	ldr	r1, [pc, #2108]	; 19c0 <check_data+0xf6c>
    1180:	ldr	r2, [sp, #24]
    1184:	mov	r0, r6
    1188:	blx	r5
    118c:	mov	r0, r4
    1190:	bl	0 <free>
    1194:	b	1264 <check_data+0x810>
    1198:	ldr	r1, [pc, #2112]	; 19e0 <check_data+0xf8c>
    119c:	ldr	r2, [sp, #24]
    11a0:	mov	r0, r6
    11a4:	blx	r5
    11a8:	b	1264 <check_data+0x810>
    11ac:	add	r1, sp, #96	; 0x60
    11b0:	mov	r0, r6
    11b4:	bl	0 <coda_cursor_get_special_type>
    11b8:	cmp	r0, #0
    11bc:	beq	11c8 <check_data+0x774>
    11c0:	mvn	r0, #0
    11c4:	b	1ce4 <check_data+0x1290>
    11c8:	ldr	r0, [sp, #96]	; 0x60
    11cc:	cmp	r0, #2
    11d0:	bne	1264 <check_data+0x810>
    11d4:	add	r1, sp, #152	; 0x98
    11d8:	mov	r0, r6
    11dc:	bl	0 <coda_cursor_read_double>
    11e0:	cmp	r0, #0
    11e4:	beq	1264 <check_data+0x810>
    11e8:	ldr	ip, [pc, #1980]	; 19ac <check_data+0xf58>
    11ec:	ldr	r1, [ip]
    11f0:	cmn	r1, #300	; 0x12c
    11f4:	beq	1210 <check_data+0x7bc>
    11f8:	ldr	r2, [pc, #1964]	; 19ac <check_data+0xf58>
    11fc:	ldr	r1, [r2]
    1200:	cmn	r1, #103	; 0x67
    1204:	movne	ip, #1
    1208:	moveq	ip, #0
    120c:	b	1214 <check_data+0x7c0>
    1210:	mov	ip, #0
    1214:	cmp	ip, #0
    1218:	beq	1234 <check_data+0x7e0>
    121c:	ldr	r3, [pc, #1928]	; 19ac <check_data+0xf58>
    1220:	ldr	r2, [r3]
    1224:	cmn	r2, #104	; 0x68
    1228:	movne	r2, #1
    122c:	moveq	r2, #0
    1230:	b	1238 <check_data+0x7e4>
    1234:	mov	r2, #0
    1238:	cmp	r2, #0
    123c:	beq	1248 <check_data+0x7f4>
    1240:	mvn	r0, #0
    1244:	b	1ce4 <check_data+0x1290>
    1248:	ldr	ip, [pc, #1884]	; 19ac <check_data+0xf58>
    124c:	ldr	r0, [ip]
    1250:	bl	0 <coda_errno_to_string>
    1254:	ldr	r2, [sp, #24]
    1258:	mov	r1, r0
    125c:	mov	r0, r6
    1260:	blx	r5
    1264:	add	r1, sp, #68	; 0x44
    1268:	mov	r0, r6
    126c:	bl	0 <coda_cursor_has_attributes>
    1270:	cmp	r0, #0
    1274:	beq	1280 <check_data+0x82c>
    1278:	mvn	r0, #0
    127c:	b	1ce4 <check_data+0x1290>
    1280:	ldr	r0, [sp, #68]	; 0x44
    1284:	cmp	r0, #0
    1288:	beq	1348 <check_data+0x8f4>
    128c:	mov	ip, #0
    1290:	str	ip, [sp, #100]	; 0x64
    1294:	ldr	ip, [r8]
    1298:	cmp	ip, #0
    129c:	beq	12bc <check_data+0x868>
    12a0:	ldr	r0, [r8]
    12a4:	add	r1, sp, #100	; 0x64
    12a8:	bl	0 <coda_type_get_attributes>
    12ac:	cmp	r0, #0
    12b0:	beq	12bc <check_data+0x868>
    12b4:	mvn	r0, #0
    12b8:	b	1ce4 <check_data+0x1290>
    12bc:	mov	r0, r6
    12c0:	bl	0 <coda_cursor_goto_attributes>
    12c4:	cmp	r0, #0
    12c8:	beq	12d4 <check_data+0x880>
    12cc:	mvn	r0, #0
    12d0:	b	1ce4 <check_data+0x1290>
    12d4:	add	r1, sp, #100	; 0x64
    12d8:	mov	r3, #0
    12dc:	add	r2, sp, #160	; 0xa0
    12e0:	ldr	ip, [sp, #24]
    12e4:	str	ip, [sp, #8]
    12e8:	str	r5, [sp, #4]
    12ec:	str	r2, [sp]
    12f0:	mov	r2, r9
    12f4:	mov	r0, r6
    12f8:	bl	a54 <check_data>
    12fc:	cmp	r0, #0
    1300:	beq	130c <check_data+0x8b8>
    1304:	mvn	r0, #0
    1308:	b	1ce4 <check_data+0x1290>
    130c:	mov	r0, r6
    1310:	bl	0 <coda_cursor_goto_parent>
    1314:	ldr	r3, [r8]
    1318:	cmp	r3, #0
    131c:	beq	1334 <check_data+0x8e0>
    1320:	ldr	r3, [sp, #100]	; 0x64
    1324:	cmp	r3, #0
    1328:	moveq	r3, #1
    132c:	movne	r3, #0
    1330:	b	1338 <check_data+0x8e4>
    1334:	mov	r3, #0
    1338:	cmp	r3, #0
    133c:	beq	1348 <check_data+0x8f4>
    1340:	mov	r3, #0
    1344:	str	r3, [r8]
    1348:	ldr	ip, [r8]
    134c:	cmp	ip, #0
    1350:	bne	1364 <check_data+0x910>
    1354:	cmp	r9, #0
    1358:	movne	r2, #1
    135c:	moveq	r2, #0
    1360:	b	1368 <check_data+0x914>
    1364:	mov	r2, #1
    1368:	cmp	r2, #0
    136c:	bne	1380 <check_data+0x92c>
    1370:	cmp	sl, #0
    1374:	movne	r2, #1
    1378:	moveq	r2, #0
    137c:	b	1384 <check_data+0x930>
    1380:	mov	r2, #1
    1384:	cmp	r2, #0
    1388:	beq	18e0 <check_data+0xe8c>
    138c:	ldr	r1, [sp, #64]	; 0x40
    1390:	cmp	r1, #7
    1394:	bcs	18e0 <check_data+0xe8c>
    1398:	add	pc, pc, r1, lsl #2
    139c:	nop	{0}
    13a0:	b	1510 <check_data+0xabc>
    13a4:	b	13bc <check_data+0x968>
    13a8:	b	18e0 <check_data+0xe8c>
    13ac:	b	18e0 <check_data+0xe8c>
    13b0:	b	18e0 <check_data+0xe8c>
    13b4:	b	18e0 <check_data+0xe8c>
    13b8:	b	1828 <check_data+0xdd4>
    13bc:	mov	r1, #0
    13c0:	str	r1, [sp, #104]	; 0x68
    13c4:	ldr	r3, [r8]
    13c8:	cmp	r3, #0
    13cc:	beq	13ec <check_data+0x998>
    13d0:	ldr	r0, [r8]
    13d4:	add	r1, sp, #104	; 0x68
    13d8:	bl	0 <coda_type_get_array_base_type>
    13dc:	cmp	r0, #0
    13e0:	beq	13ec <check_data+0x998>
    13e4:	mvn	r0, #0
    13e8:	b	1ce4 <check_data+0x1290>
    13ec:	add	r1, sp, #108	; 0x6c
    13f0:	mov	r0, r6
    13f4:	bl	0 <coda_cursor_get_num_elements>
    13f8:	cmp	r0, #0
    13fc:	beq	1408 <check_data+0x9b4>
    1400:	mvn	r0, #0
    1404:	b	1ce4 <check_data+0x1290>
    1408:	ldr	r3, [sp, #108]	; 0x6c
    140c:	cmp	r3, #0
    1410:	ble	18e0 <check_data+0xe8c>
    1414:	mov	r0, r6
    1418:	bl	0 <coda_cursor_goto_first_array_element>
    141c:	cmp	r0, #0
    1420:	beq	142c <check_data+0x9d8>
    1424:	mvn	r0, #0
    1428:	b	1ce4 <check_data+0x1290>
    142c:	mov	r4, #0
    1430:	ldr	r0, [sp, #108]	; 0x6c
    1434:	cmp	r4, r0
    1438:	bge	14d0 <check_data+0xa7c>
    143c:	add	r1, sp, #104	; 0x68
    1440:	add	r3, sp, #168	; 0xa8
    1444:	ldr	ip, [sp, #24]
    1448:	str	ip, [sp, #8]
    144c:	str	r5, [sp, #4]
    1450:	str	r3, [sp]
    1454:	mov	r3, sl
    1458:	mov	r2, r9
    145c:	mov	r0, r6
    1460:	bl	a54 <check_data>
    1464:	cmp	r0, #0
    1468:	beq	1474 <check_data+0xa20>
    146c:	mvn	r0, #0
    1470:	b	1ce4 <check_data+0x1290>
    1474:	cmp	sl, #0
    1478:	beq	14a0 <check_data+0xa4c>
    147c:	ldr	ip, [r7]
    1480:	ldr	r1, [r7, #4]
    1484:	ldr	r0, [sp, #168]	; 0xa8
    1488:	ldr	r2, [sp, #172]	; 0xac
    148c:	adds	lr, ip, r0
    1490:	adc	r1, r1, r2
    1494:	mov	r2, lr
    1498:	str	r2, [r7]
    149c:	str	r1, [r7, #4]
    14a0:	ldr	r0, [sp, #108]	; 0x6c
    14a4:	sub	r2, r0, #1
    14a8:	cmp	r4, r2
    14ac:	bge	14c8 <check_data+0xa74>
    14b0:	mov	r0, r6
    14b4:	bl	0 <coda_cursor_goto_next_array_element>
    14b8:	cmp	r0, #0
    14bc:	beq	14c8 <check_data+0xa74>
    14c0:	mvn	r0, #0
    14c4:	b	1ce4 <check_data+0x1290>
    14c8:	add	r4, r4, #1
    14cc:	b	1430 <check_data+0x9dc>
    14d0:	mov	r0, r6
    14d4:	bl	0 <coda_cursor_goto_parent>
    14d8:	ldr	r0, [r8]
    14dc:	cmp	r0, #0
    14e0:	beq	14f8 <check_data+0xaa4>
    14e4:	ldr	r1, [sp, #104]	; 0x68
    14e8:	cmp	r1, #0
    14ec:	moveq	r0, #1
    14f0:	movne	r0, #0
    14f4:	b	14fc <check_data+0xaa8>
    14f8:	mov	r0, #0
    14fc:	cmp	r0, #0
    1500:	beq	18e0 <check_data+0xe8c>
    1504:	mov	r3, #0
    1508:	str	r3, [r8]
    150c:	b	18e0 <check_data+0xe8c>
    1510:	mov	r2, r6
    1514:	add	r3, sp, #832	; 0x340
    1518:	mov	lr, #130	; 0x82
    151c:	ldr	ip, [r2], #4
    1520:	subs	lr, lr, #1
    1524:	str	ip, [r3], #4
    1528:	bne	151c <check_data+0xac8>
    152c:	add	r0, sp, #832	; 0x340
    1530:	add	r1, sp, #112	; 0x70
    1534:	bl	0 <coda_cursor_get_num_elements>
    1538:	cmp	r0, #0
    153c:	beq	1548 <check_data+0xaf4>
    1540:	mvn	r0, #0
    1544:	b	1ce4 <check_data+0x1290>
    1548:	ldr	r2, [sp, #112]	; 0x70
    154c:	cmp	r2, #0
    1550:	ble	16b8 <check_data+0xc64>
    1554:	mov	r0, r6
    1558:	bl	0 <coda_cursor_goto_first_record_field>
    155c:	cmp	r0, #0
    1560:	beq	156c <check_data+0xb18>
    1564:	mvn	r0, #0
    1568:	b	1ce4 <check_data+0x1290>
    156c:	mov	r4, #0
    1570:	ldr	r3, [sp, #112]	; 0x70
    1574:	cmp	r4, r3
    1578:	bge	16b0 <check_data+0xc5c>
    157c:	mov	ip, #0
    1580:	str	ip, [sp, #116]	; 0x74
    1584:	add	r0, sp, #832	; 0x340
    1588:	add	r2, sp, #120	; 0x78
    158c:	mov	r1, r4
    1590:	bl	0 <coda_cursor_get_record_field_available_status>
    1594:	cmp	r0, #0
    1598:	beq	15a4 <check_data+0xb50>
    159c:	mvn	r0, #0
    15a0:	b	1ce4 <check_data+0x1290>
    15a4:	ldr	r1, [sp, #120]	; 0x78
    15a8:	cmp	r1, #0
    15ac:	beq	1680 <check_data+0xc2c>
    15b0:	ldr	r1, [r8]
    15b4:	cmp	r1, #0
    15b8:	beq	1620 <check_data+0xbcc>
    15bc:	ldr	r0, [sp, #72]	; 0x48
    15c0:	add	r2, sp, #124	; 0x7c
    15c4:	mov	r1, r4
    15c8:	bl	0 <coda_type_get_record_field_name>
    15cc:	cmp	r0, #0
    15d0:	beq	15dc <check_data+0xb88>
    15d4:	mvn	r0, #0
    15d8:	b	1ce4 <check_data+0x1290>
    15dc:	ldr	r0, [r8]
    15e0:	ldr	r1, [sp, #124]	; 0x7c
    15e4:	add	r2, sp, #128	; 0x80
    15e8:	bl	0 <coda_type_get_record_field_index_from_name>
    15ec:	cmp	r0, #0
    15f0:	bne	1614 <check_data+0xbc0>
    15f4:	ldr	r0, [r8]
    15f8:	ldr	r1, [sp, #128]	; 0x80
    15fc:	add	r2, sp, #116	; 0x74
    1600:	bl	0 <coda_type_get_record_field_type>
    1604:	cmp	r0, #0
    1608:	beq	1620 <check_data+0xbcc>
    160c:	mvn	r0, #0
    1610:	b	1ce4 <check_data+0x1290>
    1614:	ldr	r0, [pc, #912]	; 19ac <check_data+0xf58>
    1618:	mov	r1, #0
    161c:	str	r1, [r0]
    1620:	add	r1, sp, #116	; 0x74
    1624:	add	r2, sp, #168	; 0xa8
    1628:	ldr	ip, [sp, #24]
    162c:	str	ip, [sp, #8]
    1630:	str	r5, [sp, #4]
    1634:	str	r2, [sp]
    1638:	mov	r3, sl
    163c:	mov	r2, r9
    1640:	mov	r0, r6
    1644:	bl	a54 <check_data>
    1648:	cmp	r0, #0
    164c:	beq	1658 <check_data+0xc04>
    1650:	mvn	r0, #0
    1654:	b	1ce4 <check_data+0x1290>
    1658:	cmp	sl, #0
    165c:	beq	1680 <check_data+0xc2c>
    1660:	ldr	ip, [r7]
    1664:	ldr	r2, [r7, #4]
    1668:	ldr	r0, [sp, #168]	; 0xa8
    166c:	ldr	r3, [sp, #172]	; 0xac
    1670:	adds	r0, ip, r0
    1674:	adc	r1, r2, r3
    1678:	str	r0, [r7]
    167c:	str	r1, [r7, #4]
    1680:	ldr	r3, [sp, #112]	; 0x70
    1684:	sub	ip, r3, #1
    1688:	cmp	r4, ip
    168c:	bge	16a8 <check_data+0xc54>
    1690:	mov	r0, r6
    1694:	bl	0 <coda_cursor_goto_next_record_field>
    1698:	cmp	r0, #0
    169c:	beq	16a8 <check_data+0xc54>
    16a0:	mvn	r0, #0
    16a4:	b	1ce4 <check_data+0x1290>
    16a8:	add	r4, r4, #1
    16ac:	b	1570 <check_data+0xb1c>
    16b0:	mov	r0, r6
    16b4:	bl	0 <coda_cursor_goto_parent>
    16b8:	cmp	sl, #0
    16bc:	beq	16d8 <check_data+0xc84>
    16c0:	ldr	r3, [sp, #72]	; 0x48
    16c4:	ldr	r1, [r3, #32]
    16c8:	cmp	r1, #0
    16cc:	movne	ip, #1
    16d0:	moveq	ip, #0
    16d4:	b	16dc <check_data+0xc88>
    16d8:	mov	ip, #0
    16dc:	cmp	ip, #0
    16e0:	beq	18e0 <check_data+0xe8c>
    16e4:	bl	0 <coda_get_option_use_fast_size_expressions>
    16e8:	mov	r4, r0
    16ec:	mov	r0, #1
    16f0:	bl	0 <coda_set_option_use_fast_size_expressions>
    16f4:	add	r1, sp, #176	; 0xb0
    16f8:	mov	r0, r6
    16fc:	bl	0 <coda_cursor_get_bit_size>
    1700:	cmp	r0, #0
    1704:	bne	17fc <check_data+0xda8>
    1708:	ldr	r2, [r7]
    170c:	ldr	r1, [r7, #4]
    1710:	ldr	ip, [sp, #176]	; 0xb0
    1714:	ldr	r3, [sp, #180]	; 0xb4
    1718:	eor	r3, r1, r3
    171c:	eor	r2, r2, ip
    1720:	orr	r0, r3, r2
    1724:	cmp	r0, #0
    1728:	beq	181c <check_data+0xdc8>
    172c:	ldr	ip, [r7]
    1730:	ldr	r3, [r7, #4]
    1734:	asr	r1, r3, #3
    1738:	lsr	ip, ip, #3
    173c:	orr	r0, ip, r3, lsl #29
    1740:	add	r2, sp, #192	; 0xc0
    1744:	bl	0 <coda_str64>
    1748:	ldr	ip, [r7]
    174c:	mov	r0, #0
    1750:	and	ip, ip, #7
    1754:	orr	r2, r0, ip
    1758:	cmp	r2, #0
    175c:	beq	1780 <check_data+0xd2c>
    1760:	add	r0, sp, #192	; 0xc0
    1764:	bl	0 <strlen>
    1768:	add	ip, sp, #192	; 0xc0
    176c:	add	r0, ip, r0
    1770:	ldr	r1, [pc, #572]	; 19b4 <check_data+0xf60>
    1774:	ldr	r2, [r7]
    1778:	and	r2, r2, #7
    177c:	bl	0 <sprintf>
    1780:	ldr	ip, [sp, #176]	; 0xb0
    1784:	ldr	r2, [sp, #180]	; 0xb4
    1788:	asr	r1, r2, #3
    178c:	lsr	r3, ip, #3
    1790:	orr	r0, r3, r2, lsl #29
    1794:	add	r2, sp, #224	; 0xe0
    1798:	bl	0 <coda_str64>
    179c:	ldr	r2, [sp, #176]	; 0xb0
    17a0:	mov	r3, #0
    17a4:	and	r2, r2, #7
    17a8:	orr	r1, r3, r2
    17ac:	cmp	r1, #0
    17b0:	beq	17d4 <check_data+0xd80>
    17b4:	add	r0, sp, #224	; 0xe0
    17b8:	bl	0 <strlen>
    17bc:	add	r2, sp, #224	; 0xe0
    17c0:	add	r0, r2, r0
    17c4:	ldr	r1, [pc, #488]	; 19b4 <check_data+0xf60>
    17c8:	ldr	r2, [sp, #176]	; 0xb0
    17cc:	and	r2, r2, #7
    17d0:	bl	0 <sprintf>
    17d4:	add	r0, sp, #320	; 0x140
    17d8:	ldr	r1, [pc, #520]	; 19e8 <check_data+0xf94>
    17dc:	add	r2, sp, #192	; 0xc0
    17e0:	add	r3, sp, #224	; 0xe0
    17e4:	bl	0 <sprintf>
    17e8:	add	r1, sp, #320	; 0x140
    17ec:	ldr	r2, [sp, #24]
    17f0:	mov	r0, r6
    17f4:	blx	r5
    17f8:	b	181c <check_data+0xdc8>
    17fc:	ldr	r2, [pc, #424]	; 19ac <check_data+0xf58>
    1800:	ldr	r0, [r2]
    1804:	bl	0 <coda_errno_to_string>
    1808:	mov	r1, r0
    180c:	ldr	r2, [sp, #24]
    1810:	mov	r0, r6
    1814:	blx	r5
    1818:	mov	fp, #1
    181c:	mov	r0, r4
    1820:	bl	0 <coda_set_option_use_fast_size_expressions>
    1824:	b	18e0 <check_data+0xe8c>
    1828:	mov	r3, #0
    182c:	str	r3, [sp, #136]	; 0x88
    1830:	add	r1, sp, #132	; 0x84
    1834:	mov	r0, r6
    1838:	bl	0 <coda_cursor_get_special_type>
    183c:	cmp	r0, #0
    1840:	beq	184c <check_data+0xdf8>
    1844:	mvn	r0, #0
    1848:	b	1ce4 <check_data+0x1290>
    184c:	ldr	r1, [sp, #132]	; 0x84
    1850:	cmp	r1, #0
    1854:	bne	186c <check_data+0xe18>
    1858:	ldr	r0, [pc, #344]	; 19b8 <check_data+0xf64>
    185c:	ldr	r1, [pc, #384]	; 19e4 <check_data+0xf90>
    1860:	movw	r2, #778	; 0x30a
    1864:	ldr	r3, [pc, #336]	; 19bc <check_data+0xf68>
    1868:	bl	0 <__assert_fail>
    186c:	ldr	r0, [r8]
    1870:	cmp	r0, #0
    1874:	beq	1894 <check_data+0xe40>
    1878:	ldr	r0, [r8]
    187c:	add	r1, sp, #136	; 0x88
    1880:	bl	0 <coda_type_get_special_base_type>
    1884:	cmp	r0, #0
    1888:	beq	1894 <check_data+0xe40>
    188c:	mvn	r0, #0
    1890:	b	1ce4 <check_data+0x1290>
    1894:	mov	r0, r6
    1898:	bl	0 <coda_cursor_use_base_type_of_special_type>
    189c:	cmp	r0, #0
    18a0:	beq	18ac <check_data+0xe58>
    18a4:	mvn	r0, #0
    18a8:	b	1ce4 <check_data+0x1290>
    18ac:	add	r1, sp, #136	; 0x88
    18b0:	ldr	ip, [sp, #24]
    18b4:	str	ip, [sp, #8]
    18b8:	str	r5, [sp, #4]
    18bc:	str	r7, [sp]
    18c0:	mov	r3, sl
    18c4:	mov	r2, r9
    18c8:	mov	r0, r6
    18cc:	bl	a54 <check_data>
    18d0:	cmp	r0, #0
    18d4:	beq	18e0 <check_data+0xe8c>
    18d8:	mvn	r0, #0
    18dc:	b	1ce4 <check_data+0x1290>
    18e0:	cmp	sl, #0
    18e4:	bne	18f0 <check_data+0xe9c>
    18e8:	mov	r3, #0
    18ec:	b	18fc <check_data+0xea8>
    18f0:	cmp	fp, #0
    18f4:	moveq	r3, #1
    18f8:	movne	r3, #0
    18fc:	cmp	r3, #0
    1900:	beq	192c <check_data+0xed8>
    1904:	ldr	ip, [r6, #4]
    1908:	lsl	r0, ip, #4
    190c:	add	r0, r6, r0
    1910:	sub	lr, r0, #4096	; 0x1000
    1914:	ldr	r1, [lr, #4088]	; 0xff8
    1918:	ldr	r2, [r1]
    191c:	cmp	r2, #100	; 0x64
    1920:	moveq	r1, #1
    1924:	movne	r1, #0
    1928:	b	1930 <check_data+0xedc>
    192c:	mov	r1, #0
    1930:	cmp	r1, #0
    1934:	beq	1ce0 <check_data+0x128c>
    1938:	ldr	r2, [r6, #4]
    193c:	lsl	r0, r2, #4
    1940:	add	r2, r6, r0
    1944:	sub	lr, r2, #4096	; 0x1000
    1948:	ldr	r2, [lr, #4088]	; 0xff8
    194c:	ldr	r0, [r2, #8]
    1950:	cmp	r0, #2
    1954:	bne	1ce0 <check_data+0x128c>
    1958:	ldr	r2, [r6, #4]
    195c:	lsl	r0, r2, #4
    1960:	add	r2, r6, r0
    1964:	sub	lr, r2, #4096	; 0x1000
    1968:	ldr	r0, [lr, #4088]	; 0xff8
    196c:	ldr	r4, [r0, #16]
    1970:	asr	r8, r4, #31
    1974:	mov	r0, #0
    1978:	mov	ip, #0
    197c:	str	ip, [sp, #184]	; 0xb8
    1980:	str	r0, [sp, #188]	; 0xbc
    1984:	cmp	r7, #0
    1988:	bne	19f0 <check_data+0xf9c>
    198c:	add	r1, sp, #184	; 0xb8
    1990:	mov	r0, r6
    1994:	bl	0 <coda_cursor_get_bit_size>
    1998:	cmp	r0, #0
    199c:	beq	1a00 <check_data+0xfac>
    19a0:	mvn	r0, #0
    19a4:	b	1ce4 <check_data+0x1290>
    19a8:	.word	0x00000153
    19ac:	.word	0x00000000
    19b0:	.word	0x0000039e
    19b4:	.word	0x000000c8
    19b8:	.word	0x0000056f
    19bc:	.word	0x00000777
    19c0:	.word	0x00000235
    19c4:	.word	0x0000007c
    19c8:	.word	0x000006a8
    19cc:	.word	0x000000cc
    19d0:	.word	0x00000647
    19d4:	.word	0x00000757
    19d8:	.word	0x000006aa
    19dc:	.word	0x000002a1
    19e0:	.word	0x000005e0
    19e4:	.word	0x00000515
    19e8:	.word	0x000003af
    19ec:	.word	0x00000000
    19f0:	ldr	r3, [r7]
    19f4:	ldr	r0, [r7, #4]
    19f8:	str	r3, [sp, #184]	; 0xb8
    19fc:	str	r0, [sp, #188]	; 0xbc
    1a00:	ldr	r3, [r6]
    1a04:	ldr	ip, [r3, #16]
    1a08:	cmp	ip, #2
    1a0c:	bne	1a74 <check_data+0x1020>
    1a10:	ldr	ip, [sp, #184]	; 0xb8
    1a14:	ldr	r1, [sp, #188]	; 0xbc
    1a18:	asr	r0, r1, #3
    1a1c:	lsr	r3, ip, #3
    1a20:	orr	r3, r3, r1, lsl #29
    1a24:	ldr	r1, [sp, #184]	; 0xb8
    1a28:	and	r2, r1, #7
    1a2c:	cmp	r2, #0
    1a30:	movne	r1, #1
    1a34:	moveq	r1, #0
    1a38:	asr	r2, r1, #31
    1a3c:	adds	r1, r3, r1
    1a40:	adc	r0, r0, r2
    1a44:	mov	ip, r8
    1a48:	cmp	r0, ip
    1a4c:	bne	1a64 <check_data+0x1010>
    1a50:	mov	r2, r4
    1a54:	cmp	r1, r2
    1a58:	movcc	r1, #1
    1a5c:	movcs	r1, #0
    1a60:	b	1a78 <check_data+0x1024>
    1a64:	cmp	r0, ip
    1a68:	movlt	r1, #1
    1a6c:	movge	r1, #0
    1a70:	b	1a78 <check_data+0x1024>
    1a74:	mov	r1, #0
    1a78:	cmp	r1, #0
    1a7c:	beq	1c08 <check_data+0x11b4>
    1a80:	ldr	ip, [r6, #4]
    1a84:	lsl	ip, ip, #4
    1a88:	add	r1, r6, ip
    1a8c:	sub	lr, r1, #4096	; 0x1000
    1a90:	ldr	r3, [lr, #4088]	; 0xff8
    1a94:	ldr	r7, [r3, #24]
    1a98:	ldr	ip, [sp, #184]	; 0xb8
    1a9c:	ldr	r0, [sp, #188]	; 0xbc
    1aa0:	asr	r1, r0, #3
    1aa4:	lsr	r2, ip, #3
    1aa8:	orr	r0, r2, r0, lsl #29
    1aac:	subs	r4, r4, r0
    1ab0:	sbc	r9, r8, r1
    1ab4:	add	r0, r4, #1
    1ab8:	bl	0 <malloc>
    1abc:	mov	r8, r0
    1ac0:	cmp	r8, #0
    1ac4:	bne	1aec <check_data+0x1098>
    1ac8:	mvn	r0, #0
    1acc:	ldr	r1, [pc, #576]	; 1d14 <check_data+0x12c0>
    1ad0:	ldr	r3, [pc, #576]	; 1d18 <check_data+0x12c4>
    1ad4:	movw	r2, #831	; 0x33f
    1ad8:	str	r2, [sp]
    1adc:	mov	r2, r4
    1ae0:	bl	0 <coda_set_error>
    1ae4:	mvn	r0, #0
    1ae8:	b	1ce4 <check_data+0x1290>
    1aec:	ldr	r0, [r6]
    1af0:	asr	r3, r7, #31
    1af4:	ldr	ip, [sp, #184]	; 0xb8
    1af8:	ldr	r1, [sp, #188]	; 0xbc
    1afc:	asr	r2, r1, #3
    1b00:	lsr	ip, ip, #3
    1b04:	orr	ip, ip, r1, lsl #29
    1b08:	adds	lr, r7, ip
    1b0c:	adc	r3, r3, r2
    1b10:	mov	r2, lr
    1b14:	str	r8, [sp, #8]
    1b18:	str	r9, [sp, #4]
    1b1c:	str	r4, [sp]
    1b20:	bl	0 <read_bytes>
    1b24:	cmp	r0, #0
    1b28:	beq	1b3c <check_data+0x10e8>
    1b2c:	mov	r0, r8
    1b30:	bl	0 <free>
    1b34:	mvn	r0, #0
    1b38:	b	1ce4 <check_data+0x1290>
    1b3c:	mov	r1, #0
    1b40:	strb	r1, [r8, r4]
    1b44:	mov	ip, #0
    1b48:	mov	r0, ip
    1b4c:	asr	r1, r0, #31
    1b50:	mov	r2, r9
    1b54:	cmp	r1, r2
    1b58:	bne	1b6c <check_data+0x1118>
    1b5c:	mov	r3, r4
    1b60:	cmp	r0, r3
    1b64:	bcc	1b74 <check_data+0x1120>
    1b68:	b	1bfc <check_data+0x11a8>
    1b6c:	cmp	r1, r2
    1b70:	bge	1bfc <check_data+0x11a8>
    1b74:	ldrb	r0, [r8, ip]
    1b78:	cmp	r0, #32
    1b7c:	beq	1b94 <check_data+0x1140>
    1b80:	ldrb	r0, [r8, ip]
    1b84:	cmp	r0, #9
    1b88:	movne	r1, #1
    1b8c:	moveq	r1, #0
    1b90:	b	1b98 <check_data+0x1144>
    1b94:	mov	r1, #0
    1b98:	cmp	r1, #0
    1b9c:	beq	1bb4 <check_data+0x1160>
    1ba0:	ldrb	r0, [r8, ip]
    1ba4:	cmp	r0, #10
    1ba8:	movne	r3, #1
    1bac:	moveq	r3, #0
    1bb0:	b	1bb8 <check_data+0x1164>
    1bb4:	mov	r3, #0
    1bb8:	cmp	r3, #0
    1bbc:	beq	1bd4 <check_data+0x1180>
    1bc0:	ldrb	r2, [r8, ip]
    1bc4:	cmp	r2, #13
    1bc8:	movne	r0, #1
    1bcc:	moveq	r0, #0
    1bd0:	b	1bd8 <check_data+0x1184>
    1bd4:	mov	r0, #0
    1bd8:	cmp	r0, #0
    1bdc:	beq	1bf4 <check_data+0x11a0>
    1be0:	ldr	r1, [pc, #312]	; 1d20 <check_data+0x12cc>
    1be4:	ldr	r2, [sp, #24]
    1be8:	mov	r0, r6
    1bec:	blx	r5
    1bf0:	b	1bfc <check_data+0x11a8>
    1bf4:	add	ip, ip, #1
    1bf8:	b	1b48 <check_data+0x10f4>
    1bfc:	mov	r0, r8
    1c00:	bl	0 <free>
    1c04:	b	1ce0 <check_data+0x128c>
    1c08:	ldr	r3, [sp, #184]	; 0xb8
    1c0c:	ldr	r2, [sp, #188]	; 0xbc
    1c10:	asr	ip, r2, #3
    1c14:	lsr	r3, r3, #3
    1c18:	orr	r3, r3, r2, lsl #29
    1c1c:	ldr	r1, [sp, #184]	; 0xb8
    1c20:	and	r0, r1, #7
    1c24:	cmp	r0, #0
    1c28:	movne	r2, #1
    1c2c:	moveq	r2, #0
    1c30:	asr	r0, r2, #31
    1c34:	adds	r1, r3, r2
    1c38:	adc	ip, ip, r0
    1c3c:	mov	r0, r8
    1c40:	eor	r2, ip, r0
    1c44:	mov	r3, r4
    1c48:	eor	r0, r1, r3
    1c4c:	orr	r2, r2, r0
    1c50:	cmp	r2, #0
    1c54:	beq	1ce0 <check_data+0x128c>
    1c58:	add	r2, sp, #256	; 0x100
    1c5c:	mov	r1, r8
    1c60:	mov	r0, r4
    1c64:	bl	0 <coda_str64>
    1c68:	ldr	r2, [sp, #184]	; 0xb8
    1c6c:	ldr	ip, [sp, #188]	; 0xbc
    1c70:	asr	r1, ip, #3
    1c74:	lsr	r0, r2, #3
    1c78:	orr	r0, r0, ip, lsl #29
    1c7c:	add	r2, sp, #288	; 0x120
    1c80:	bl	0 <coda_str64>
    1c84:	ldr	r0, [sp, #184]	; 0xb8
    1c88:	mov	ip, #0
    1c8c:	and	r3, r0, #7
    1c90:	orr	r0, ip, r3
    1c94:	cmp	r0, #0
    1c98:	beq	1cbc <check_data+0x1268>
    1c9c:	add	r0, sp, #288	; 0x120
    1ca0:	bl	0 <strlen>
    1ca4:	add	r1, sp, #288	; 0x120
    1ca8:	add	r0, r1, r0
    1cac:	ldr	r1, [pc, #92]	; 1d10 <check_data+0x12bc>
    1cb0:	ldr	r2, [sp, #184]	; 0xb8
    1cb4:	and	r2, r2, #7
    1cb8:	bl	0 <sprintf>
    1cbc:	add	r0, sp, #576	; 0x240
    1cc0:	ldr	r1, [pc, #84]	; 1d1c <check_data+0x12c8>
    1cc4:	add	r2, sp, #256	; 0x100
    1cc8:	add	r3, sp, #288	; 0x120
    1ccc:	bl	0 <sprintf>
    1cd0:	add	r1, sp, #576	; 0x240
    1cd4:	ldr	r2, [sp, #24]
    1cd8:	mov	r0, r6
    1cdc:	blx	r5
    1ce0:	mov	r0, #0
    1ce4:	ldr	r4, [sp, #32]
    1ce8:	ldr	r5, [sp, #36]	; 0x24
    1cec:	ldr	r6, [sp, #40]	; 0x28
    1cf0:	ldr	r7, [sp, #44]	; 0x2c
    1cf4:	ldr	r8, [sp, #48]	; 0x30
    1cf8:	ldr	r9, [sp, #52]	; 0x34
    1cfc:	ldr	sl, [sp, #56]	; 0x38
    1d00:	ldr	fp, [sp, #60]	; 0x3c
    1d04:	ldr	lr, [sp, #16]
    1d08:	ldr	sp, [sp, #12]
    1d0c:	bx	lr
    1d10:	.word	0x000000c8
    1d14:	.word	0x000006aa
    1d18:	.word	0x00000515
    1d1c:	.word	0x000002d9
    1d20:	.word	0x000001c9

00001d24 <coda_product_check>:
    1d24:	mov	ip, sp
    1d28:	sub	sp, sp, #896	; 0x380
    1d2c:	str	ip, [sp, #12]
    1d30:	str	lr, [sp, #16]
    1d34:	str	r4, [sp, #24]
    1d38:	str	r5, [sp, #28]
    1d3c:	str	r6, [sp, #32]
    1d40:	str	r7, [sp, #36]	; 0x24
    1d44:	str	r8, [sp, #40]	; 0x28
    1d48:	mov	r4, r3
    1d4c:	mov	r6, r2
    1d50:	mov	r5, r1
    1d54:	mov	r7, r0
    1d58:	mov	r0, #0
    1d5c:	str	r0, [sp, #48]	; 0x30
    1d60:	mov	r2, #0
    1d64:	mov	r1, #0
    1d68:	str	r1, [sp, #56]	; 0x38
    1d6c:	str	r2, [sp, #60]	; 0x3c
    1d70:	mov	r3, #0
    1d74:	mov	r2, #0
    1d78:	str	r2, [sp, #64]	; 0x40
    1d7c:	str	r3, [sp, #68]	; 0x44
    1d80:	add	r0, sp, #376	; 0x178
    1d84:	mov	r1, r7
    1d88:	bl	0 <coda_cursor_set_product>
    1d8c:	cmp	r0, #0
    1d90:	beq	1d9c <coda_product_check+0x78>
    1d94:	mvn	r0, #0
    1d98:	b	2018 <coda_product_check+0x2f4>
    1d9c:	add	r1, sp, #52	; 0x34
    1da0:	mov	r0, r7
    1da4:	bl	0 <coda_get_product_format>
    1da8:	cmp	r0, #0
    1dac:	beq	1db8 <coda_product_check+0x94>
    1db0:	mvn	r0, #0
    1db4:	b	2018 <coda_product_check+0x2f4>
    1db8:	ldr	r2, [sp, #52]	; 0x34
    1dbc:	cmp	r2, #0
    1dc0:	beq	1dd8 <coda_product_check+0xb4>
    1dc4:	ldr	r1, [sp, #52]	; 0x34
    1dc8:	cmp	r1, #1
    1dcc:	movne	r2, #1
    1dd0:	moveq	r2, #0
    1dd4:	b	1ddc <coda_product_check+0xb8>
    1dd8:	mov	r2, #0
    1ddc:	cmp	r2, #0
    1de0:	beq	1df8 <coda_product_check+0xd4>
    1de4:	ldr	ip, [sp, #52]	; 0x34
    1de8:	cmp	ip, #2
    1dec:	movne	ip, #1
    1df0:	moveq	ip, #0
    1df4:	b	1dfc <coda_product_check+0xd8>
    1df8:	mov	ip, #0
    1dfc:	cmp	ip, #0
    1e00:	beq	1e40 <coda_product_check+0x11c>
    1e04:	ldr	r1, [r7, #24]
    1e08:	cmp	r1, #0
    1e0c:	beq	1e28 <coda_product_check+0x104>
    1e10:	ldr	r3, [r7, #24]
    1e14:	ldr	ip, [r3, #28]
    1e18:	cmp	ip, #0
    1e1c:	movne	r1, #1
    1e20:	moveq	r1, #0
    1e24:	b	1e2c <coda_product_check+0x108>
    1e28:	mov	r1, #0
    1e2c:	cmp	r1, #0
    1e30:	beq	1e40 <coda_product_check+0x11c>
    1e34:	ldr	r3, [r7, #24]
    1e38:	ldr	r3, [r3, #28]
    1e3c:	str	r3, [sp, #48]	; 0x30
    1e40:	ldr	r1, [sp, #52]	; 0x34
    1e44:	cmp	r1, #0
    1e48:	beq	1e60 <coda_product_check+0x13c>
    1e4c:	ldr	r0, [sp, #52]	; 0x34
    1e50:	cmp	r0, #1
    1e54:	moveq	r8, #1
    1e58:	movne	r8, #0
    1e5c:	b	1e64 <coda_product_check+0x140>
    1e60:	mov	r8, #1
    1e64:	cmp	r8, #0
    1e68:	beq	1ea4 <coda_product_check+0x180>
    1e6c:	add	r1, sp, #56	; 0x38
    1e70:	mov	r0, r7
    1e74:	bl	0 <coda_get_product_file_size>
    1e78:	cmp	r0, #0
    1e7c:	beq	1e88 <coda_product_check+0x164>
    1e80:	mvn	r0, #0
    1e84:	b	2018 <coda_product_check+0x2f4>
    1e88:	ldr	r0, [sp, #56]	; 0x38
    1e8c:	ldr	r1, [sp, #60]	; 0x3c
    1e90:	lsl	r3, r1, #3
    1e94:	orr	r1, r3, r0, lsr #29
    1e98:	lsl	r0, r0, #3
    1e9c:	str	r0, [sp, #56]	; 0x38
    1ea0:	str	r1, [sp, #60]	; 0x3c
    1ea4:	cmp	r8, #0
    1ea8:	bne	1eb4 <coda_product_check+0x190>
    1eac:	mov	r2, #0
    1eb0:	b	1ec0 <coda_product_check+0x19c>
    1eb4:	cmp	r5, #0
    1eb8:	moveq	r2, #1
    1ebc:	movne	r2, #0
    1ec0:	cmp	r2, #0
    1ec4:	beq	1f08 <coda_product_check+0x1e4>
    1ec8:	bl	0 <coda_get_option_use_fast_size_expressions>
    1ecc:	mov	r5, r0
    1ed0:	mov	r0, #0
    1ed4:	bl	0 <coda_set_option_use_fast_size_expressions>
    1ed8:	add	r0, sp, #376	; 0x178
    1edc:	add	r1, sp, #64	; 0x40
    1ee0:	bl	0 <coda_cursor_get_bit_size>
    1ee4:	cmp	r0, #0
    1ee8:	beq	1efc <coda_product_check+0x1d8>
    1eec:	mov	r0, r5
    1ef0:	bl	0 <coda_set_option_use_fast_size_expressions>
    1ef4:	mvn	r0, #0
    1ef8:	b	2018 <coda_product_check+0x2f4>
    1efc:	mov	r0, r5
    1f00:	bl	0 <coda_set_option_use_fast_size_expressions>
    1f04:	b	1f3c <coda_product_check+0x218>
    1f08:	add	r0, sp, #376	; 0x178
    1f0c:	add	r1, sp, #48	; 0x30
    1f10:	add	r3, sp, #64	; 0x40
    1f14:	str	r4, [sp, #8]
    1f18:	str	r6, [sp, #4]
    1f1c:	str	r3, [sp]
    1f20:	mov	r3, r8
    1f24:	mov	r2, r5
    1f28:	bl	a54 <check_data>
    1f2c:	cmp	r0, #0
    1f30:	beq	1f3c <coda_product_check+0x218>
    1f34:	mvn	r0, #0
    1f38:	b	2018 <coda_product_check+0x2f4>
    1f3c:	cmp	r8, #0
    1f40:	beq	1f70 <coda_product_check+0x24c>
    1f44:	ldr	r2, [sp, #56]	; 0x38
    1f48:	ldr	ip, [sp, #60]	; 0x3c
    1f4c:	ldr	r0, [sp, #64]	; 0x40
    1f50:	ldr	r1, [sp, #68]	; 0x44
    1f54:	eor	r3, ip, r1
    1f58:	eor	r2, r2, r0
    1f5c:	orr	r3, r3, r2
    1f60:	cmp	r3, #0
    1f64:	movne	ip, #1
    1f68:	moveq	ip, #0
    1f6c:	b	1f74 <coda_product_check+0x250>
    1f70:	mov	ip, #0
    1f74:	cmp	ip, #0
    1f78:	beq	2014 <coda_product_check+0x2f0>
    1f7c:	ldr	r2, [sp, #56]	; 0x38
    1f80:	ldr	r3, [sp, #60]	; 0x3c
    1f84:	asr	r1, r3, #3
    1f88:	lsr	r0, r2, #3
    1f8c:	orr	r0, r0, r3, lsl #29
    1f90:	add	r2, sp, #72	; 0x48
    1f94:	bl	0 <coda_str64>
    1f98:	ldr	ip, [sp, #64]	; 0x40
    1f9c:	ldr	r2, [sp, #68]	; 0x44
    1fa0:	asr	r1, r2, #3
    1fa4:	lsr	ip, ip, #3
    1fa8:	orr	r0, ip, r2, lsl #29
    1fac:	add	r2, sp, #96	; 0x60
    1fb0:	bl	0 <coda_str64>
    1fb4:	ldr	r1, [sp, #64]	; 0x40
    1fb8:	mov	ip, #0
    1fbc:	and	r0, r1, #7
    1fc0:	orr	ip, ip, r0
    1fc4:	cmp	ip, #0
    1fc8:	beq	1ff0 <coda_product_check+0x2cc>
    1fcc:	add	r0, sp, #120	; 0x78
    1fd0:	ldr	r1, [pc, #100]	; 203c <coda_product_check+0x318>
    1fd4:	add	r2, sp, #72	; 0x48
    1fd8:	add	r3, sp, #96	; 0x60
    1fdc:	ldr	ip, [sp, #64]	; 0x40
    1fe0:	and	ip, ip, #7
    1fe4:	str	ip, [sp]
    1fe8:	bl	0 <sprintf>
    1fec:	b	2004 <coda_product_check+0x2e0>
    1ff0:	add	r0, sp, #120	; 0x78
    1ff4:	ldr	r1, [pc, #60]	; 2038 <coda_product_check+0x314>
    1ff8:	add	r2, sp, #72	; 0x48
    1ffc:	add	r3, sp, #96	; 0x60
    2000:	bl	0 <sprintf>
    2004:	mov	r0, #0
    2008:	add	r1, sp, #120	; 0x78
    200c:	mov	r2, r4
    2010:	blx	r6
    2014:	mov	r0, #0
    2018:	ldr	r4, [sp, #24]
    201c:	ldr	r5, [sp, #28]
    2020:	ldr	r6, [sp, #32]
    2024:	ldr	r7, [sp, #36]	; 0x24
    2028:	ldr	r8, [sp, #40]	; 0x28
    202c:	ldr	lr, [sp, #16]
    2030:	add	sp, sp, #896	; 0x380
    2034:	bx	lr
    2038:	.word	0x00000030
    203c:	.word	0x00000104
