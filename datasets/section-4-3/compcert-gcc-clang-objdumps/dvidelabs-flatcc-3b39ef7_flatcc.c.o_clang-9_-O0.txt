
../compcert-repos/dvidelabs-flatcc-3b39ef7/src/compiler/CMakeFiles/flatcc.dir/flatcc.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <flatcc_init_options>:
       0:	push	{fp, lr}
       4:	mov	fp, sp
       8:	sub	sp, sp, #8
       c:	str	r0, [sp, #4]
      10:	ldr	r0, [sp, #4]
      14:	mov	r1, #0
      18:	mov	r2, #224	; 0xe0
      1c:	str	r1, [sp]
      20:	bl	0 <memset>
      24:	ldr	r1, [sp, #4]
      28:	mov	r2, #65536	; 0x10000
      2c:	str	r2, [r1]
      30:	ldr	r1, [sp, #4]
      34:	mov	r2, #100	; 0x64
      38:	str	r2, [r1, #4]
      3c:	ldr	r1, [sp, #4]
      40:	str	r2, [r1, #8]
      44:	ldr	r1, [sp, #4]
      48:	mov	r2, #1
      4c:	str	r2, [r1, #16]
      50:	ldr	r1, [sp, #4]
      54:	str	r2, [r1, #20]
      58:	ldr	r1, [sp, #4]
      5c:	str	r2, [r1, #24]
      60:	ldr	r1, [sp, #4]
      64:	str	r2, [r1, #28]
      68:	ldr	r1, [sp, #4]
      6c:	str	r2, [r1, #32]
      70:	ldr	r1, [sp, #4]
      74:	str	r2, [r1, #36]	; 0x24
      78:	ldr	r1, [sp, #4]
      7c:	str	r2, [r1, #40]	; 0x28
      80:	ldr	r1, [sp, #4]
      84:	str	r2, [r1, #44]	; 0x2c
      88:	ldr	r1, [sp, #4]
      8c:	str	r2, [r1, #48]	; 0x30
      90:	ldr	r1, [sp, #4]
      94:	str	r2, [r1, #52]	; 0x34
      98:	ldr	r1, [sp, #4]
      9c:	ldr	r3, [sp]
      a0:	str	r3, [r1, #56]	; 0x38
      a4:	ldr	r1, [sp, #4]
      a8:	str	r3, [r1, #60]	; 0x3c
      ac:	ldr	r1, [sp, #4]
      b0:	mov	ip, #4
      b4:	str	ip, [r1, #64]	; 0x40
      b8:	ldr	r1, [sp, #4]
      bc:	mov	ip, #2
      c0:	str	ip, [r1, #68]	; 0x44
      c4:	ldr	r1, [sp, #4]
      c8:	str	r2, [r1, #72]	; 0x48
      cc:	ldr	r1, [sp, #4]
      d0:	str	r2, [r1, #76]	; 0x4c
      d4:	ldr	r1, [sp, #4]
      d8:	str	r3, [r1, #80]	; 0x50
      dc:	ldr	r1, [sp, #4]
      e0:	str	r2, [r1, #84]	; 0x54
      e4:	ldr	r1, [sp, #4]
      e8:	str	r3, [r1, #92]	; 0x5c
      ec:	movw	r2, #65534	; 0xfffe
      f0:	str	r2, [r1, #88]	; 0x58
      f4:	ldr	r1, [sp, #4]
      f8:	movw	r2, #0
      fc:	movt	r2, #0
     100:	str	r2, [r1, #96]	; 0x60
     104:	ldr	r1, [sp, #4]
     108:	movw	r2, #0
     10c:	movt	r2, #0
     110:	str	r2, [r1, #100]	; 0x64
     114:	ldr	r1, [sp, #4]
     118:	movw	r2, #0
     11c:	movt	r2, #0
     120:	str	r2, [r1, #104]	; 0x68
     124:	ldr	r1, [sp, #4]
     128:	movw	r2, #0
     12c:	str	r2, [r1, #132]	; 0x84
     130:	ldr	r1, [sp, #4]
     134:	movw	ip, #1
     138:	str	ip, [r1, #136]	; 0x88
     13c:	ldr	r1, [sp, #4]
     140:	str	ip, [r1, #140]	; 0x8c
     144:	ldr	r1, [sp, #4]
     148:	str	r2, [r1, #144]	; 0x90
     14c:	ldr	r1, [sp, #4]
     150:	str	r2, [r1, #148]	; 0x94
     154:	ldr	r1, [sp, #4]
     158:	str	r2, [r1, #152]	; 0x98
     15c:	ldr	r1, [sp, #4]
     160:	str	r2, [r1, #156]	; 0x9c
     164:	ldr	r1, [sp, #4]
     168:	str	r2, [r1, #164]	; 0xa4
     16c:	ldr	r1, [sp, #4]
     170:	movw	lr, #4
     174:	str	lr, [r1, #176]	; 0xb0
     178:	ldr	r1, [sp, #4]
     17c:	str	r2, [r1, #180]	; 0xb4
     180:	ldr	r1, [sp, #4]
     184:	str	ip, [r1, #184]	; 0xb8
     188:	ldr	r1, [sp, #4]
     18c:	str	r2, [r1, #188]	; 0xbc
     190:	mov	sp, fp
     194:	pop	{fp, pc}

00000198 <flatcc_create_context>:
     198:	push	{fp, lr}
     19c:	mov	fp, sp
     1a0:	sub	sp, sp, #32
     1a4:	str	r0, [fp, #-8]
     1a8:	str	r1, [fp, #-12]
     1ac:	str	r2, [sp, #16]
     1b0:	str	r3, [sp, #12]
     1b4:	movw	r0, #560	; 0x230
     1b8:	bl	0 <malloc>
     1bc:	str	r0, [sp, #8]
     1c0:	movw	r1, #0
     1c4:	cmp	r0, r1
     1c8:	bne	1d8 <flatcc_create_context+0x40>
     1cc:	movw	r0, #0
     1d0:	str	r0, [fp, #-4]
     1d4:	b	220 <flatcc_create_context+0x88>
     1d8:	ldr	r0, [sp, #8]
     1dc:	ldr	r1, [fp, #-8]
     1e0:	ldr	r2, [fp, #-12]
     1e4:	ldr	r3, [sp, #16]
     1e8:	ldr	ip, [sp, #12]
     1ec:	str	ip, [sp]
     1f0:	movw	ip, #0
     1f4:	str	ip, [sp, #4]
     1f8:	bl	0 <__flatcc_fb_init_parser>
     1fc:	cmp	r0, #0
     200:	beq	218 <flatcc_create_context+0x80>
     204:	ldr	r0, [sp, #8]
     208:	bl	0 <free>
     20c:	movw	r0, #0
     210:	str	r0, [fp, #-4]
     214:	b	220 <flatcc_create_context+0x88>
     218:	ldr	r0, [sp, #8]
     21c:	str	r0, [fp, #-4]
     220:	ldr	r0, [fp, #-4]
     224:	mov	sp, fp
     228:	pop	{fp, pc}

0000022c <flatcc_parse_buffer>:
     22c:	push	{fp, lr}
     230:	mov	fp, sp
     234:	sub	sp, sp, #32
     238:	str	r0, [fp, #-8]
     23c:	str	r1, [fp, #-12]
     240:	str	r2, [sp, #16]
     244:	ldr	r0, [fp, #-8]
     248:	str	r0, [sp, #12]
     24c:	ldr	r0, [sp, #12]
     250:	movw	r1, #1
     254:	str	r1, [r0, #140]	; 0x8c
     258:	ldr	r0, [sp, #16]
     25c:	ldr	r1, [sp, #12]
     260:	ldr	r1, [r1, #128]	; 0x80
     264:	cmp	r0, r1
     268:	bls	298 <flatcc_parse_buffer+0x6c>
     26c:	ldr	r0, [sp, #12]
     270:	ldr	r0, [r0, #128]	; 0x80
     274:	cmp	r0, #0
     278:	bls	298 <flatcc_parse_buffer+0x6c>
     27c:	ldr	r0, [sp, #12]
     280:	movw	r1, #0
     284:	movt	r1, #0
     288:	bl	0 <__flatcc_fb_print_error>
     28c:	mvn	r1, #0
     290:	str	r1, [fp, #-4]
     294:	b	314 <flatcc_parse_buffer+0xe8>
     298:	ldr	r0, [sp, #12]
     29c:	add	r0, r0, #352	; 0x160
     2a0:	add	r0, r0, #172	; 0xac
     2a4:	ldr	r1, [sp, #12]
     2a8:	add	r1, r1, #352	; 0x160
     2ac:	movw	r2, #1
     2b0:	bl	0 <ptr_set_insert_item>
     2b4:	ldr	r1, [sp, #12]
     2b8:	ldr	r2, [fp, #-12]
     2bc:	ldr	r3, [sp, #16]
     2c0:	str	r0, [sp, #8]
     2c4:	mov	r0, r1
     2c8:	mov	r1, r2
     2cc:	mov	r2, r3
     2d0:	movw	r3, #0
     2d4:	bl	0 <__flatcc_fb_parse>
     2d8:	cmp	r0, #0
     2dc:	movw	r0, #1
     2e0:	str	r0, [sp, #4]
     2e4:	bne	300 <flatcc_parse_buffer+0xd4>
     2e8:	ldr	r0, [sp, #12]
     2ec:	bl	0 <__flatcc_fb_build_schema>
     2f0:	cmp	r0, #0
     2f4:	movw	r0, #0
     2f8:	movne	r0, #1
     2fc:	str	r0, [sp, #4]
     300:	ldr	r0, [sp, #4]
     304:	tst	r0, #1
     308:	mvn	r0, #0
     30c:	moveq	r0, #0
     310:	str	r0, [fp, #-4]
     314:	ldr	r0, [fp, #-4]
     318:	mov	sp, fp
     31c:	pop	{fp, pc}

00000320 <flatcc_parse_file>:
     320:	push	{fp, lr}
     324:	mov	fp, sp
     328:	sub	sp, sp, #88	; 0x58
     32c:	str	r0, [fp, #-8]
     330:	str	r1, [fp, #-12]
     334:	ldr	r0, [fp, #-8]
     338:	str	r0, [fp, #-16]
     33c:	ldr	r0, [fp, #-12]
     340:	bl	0 <strlen>
     344:	str	r0, [fp, #-24]	; 0xffffffe8
     348:	ldr	r0, [fp, #-16]
     34c:	ldr	r0, [r0, #412]	; 0x19c
     350:	add	r0, r0, #32
     354:	ldr	r1, [fp, #-16]
     358:	add	r1, r1, #352	; 0x160
     35c:	movw	r2, #1
     360:	bl	0 <fb_schema_table_insert_item>
     364:	movw	r1, #0
     368:	cmp	r0, r1
     36c:	beq	37c <flatcc_parse_file+0x5c>
     370:	movw	r0, #0
     374:	str	r0, [fp, #-4]
     378:	b	820 <flatcc_parse_file+0x500>
     37c:	movw	r0, #0
     380:	str	r0, [fp, #-28]	; 0xffffffe4
     384:	str	r0, [fp, #-32]	; 0xffffffe0
     388:	str	r0, [fp, #-36]	; 0xffffffdc
     38c:	mvn	r1, #0
     390:	str	r1, [sp, #32]
     394:	ldr	r2, [fp, #-16]
     398:	ldr	r2, [r2, #552]	; 0x228
     39c:	cmp	r2, r0
     3a0:	movw	r0, #0
     3a4:	movne	r0, #1
     3a8:	eor	r0, r0, r1
     3ac:	and	r0, r0, #1
     3b0:	str	r0, [sp, #28]
     3b4:	ldr	r0, [sp, #28]
     3b8:	cmp	r0, #0
     3bc:	beq	44c <flatcc_parse_file+0x12c>
     3c0:	ldr	r0, [fp, #-12]
     3c4:	ldr	r1, [fp, #-16]
     3c8:	ldr	r1, [r1, #128]	; 0x80
     3cc:	add	r2, sp, #44	; 0x2c
     3d0:	bl	0 <__flatcc_fb_read_file>
     3d4:	str	r0, [fp, #-28]	; 0xffffffe4
     3d8:	movw	r1, #0
     3dc:	cmp	r0, r1
     3e0:	bne	438 <flatcc_parse_file+0x118>
     3e4:	ldr	r0, [sp, #44]	; 0x2c
     3e8:	ldr	r1, [fp, #-16]
     3ec:	ldr	r1, [r1, #412]	; 0x19c
     3f0:	ldr	r1, [r1, #56]	; 0x38
     3f4:	add	r0, r0, r1
     3f8:	ldr	r1, [fp, #-16]
     3fc:	ldr	r1, [r1, #128]	; 0x80
     400:	cmp	r0, r1
     404:	bls	434 <flatcc_parse_file+0x114>
     408:	ldr	r0, [fp, #-16]
     40c:	ldr	r0, [r0, #128]	; 0x80
     410:	cmp	r0, #0
     414:	bls	434 <flatcc_parse_file+0x114>
     418:	ldr	r0, [fp, #-16]
     41c:	movw	r1, #0
     420:	movt	r1, #0
     424:	bl	0 <__flatcc_fb_print_error>
     428:	mvn	r1, #0
     42c:	str	r1, [sp, #32]
     430:	b	7d8 <flatcc_parse_file+0x4b8>
     434:	b	448 <flatcc_parse_file+0x128>
     438:	ldr	r0, [fp, #-12]
     43c:	bl	0 <__flatcc_fb_copy_path>
     440:	str	r0, [fp, #-32]	; 0xffffffe0
     444:	bl	82c <checkmem>
     448:	b	44c <flatcc_parse_file+0x12c>
     44c:	movw	r0, #0
     450:	str	r0, [sp, #36]	; 0x24
     454:	ldr	r0, [fp, #-28]	; 0xffffffe4
     458:	movw	r1, #0
     45c:	cmp	r0, r1
     460:	movw	r0, #0
     464:	str	r0, [sp, #24]
     468:	bne	488 <flatcc_parse_file+0x168>
     46c:	ldr	r0, [sp, #36]	; 0x24
     470:	ldr	r1, [fp, #-16]
     474:	ldr	r1, [r1, #336]	; 0x150
     478:	cmp	r0, r1
     47c:	movw	r0, #0
     480:	movlt	r0, #1
     484:	str	r0, [sp, #24]
     488:	ldr	r0, [sp, #24]
     48c:	tst	r0, #1
     490:	beq	574 <flatcc_parse_file+0x254>
     494:	ldr	r0, [fp, #-16]
     498:	ldr	r0, [r0, #328]	; 0x148
     49c:	ldr	r1, [sp, #36]	; 0x24
     4a0:	add	r0, r0, r1, lsl #2
     4a4:	ldr	r0, [r0]
     4a8:	str	r0, [fp, #-40]	; 0xffffffd8
     4ac:	ldr	r0, [fp, #-40]	; 0xffffffd8
     4b0:	bl	0 <strlen>
     4b4:	str	r0, [fp, #-20]	; 0xffffffec
     4b8:	ldr	r0, [fp, #-40]	; 0xffffffd8
     4bc:	ldr	r1, [fp, #-20]	; 0xffffffec
     4c0:	ldr	r2, [fp, #-12]
     4c4:	ldr	r3, [fp, #-24]	; 0xffffffe8
     4c8:	movw	ip, #0
     4cc:	movt	ip, #0
     4d0:	str	ip, [sp]
     4d4:	movw	ip, #1
     4d8:	str	ip, [sp, #4]
     4dc:	bl	0 <__flatcc_fb_create_join_path_n>
     4e0:	str	r0, [fp, #-32]	; 0xffffffe0
     4e4:	bl	82c <checkmem>
     4e8:	ldr	r0, [fp, #-32]	; 0xffffffe0
     4ec:	ldr	r1, [fp, #-16]
     4f0:	ldr	r1, [r1, #128]	; 0x80
     4f4:	add	r2, sp, #44	; 0x2c
     4f8:	bl	0 <__flatcc_fb_read_file>
     4fc:	str	r0, [fp, #-28]	; 0xffffffe4
     500:	movw	r1, #0
     504:	cmp	r0, r1
     508:	bne	560 <flatcc_parse_file+0x240>
     50c:	ldr	r0, [fp, #-32]	; 0xffffffe0
     510:	bl	0 <free>
     514:	movw	r0, #0
     518:	str	r0, [fp, #-32]	; 0xffffffe0
     51c:	ldr	r0, [sp, #44]	; 0x2c
     520:	ldr	r1, [fp, #-16]
     524:	ldr	r1, [r1, #128]	; 0x80
     528:	cmp	r0, r1
     52c:	bls	55c <flatcc_parse_file+0x23c>
     530:	ldr	r0, [fp, #-16]
     534:	ldr	r0, [r0, #128]	; 0x80
     538:	cmp	r0, #0
     53c:	bls	55c <flatcc_parse_file+0x23c>
     540:	ldr	r0, [fp, #-16]
     544:	movw	r1, #0
     548:	movt	r1, #0
     54c:	bl	0 <__flatcc_fb_print_error>
     550:	mvn	r1, #0
     554:	str	r1, [sp, #32]
     558:	b	7d8 <flatcc_parse_file+0x4b8>
     55c:	b	560 <flatcc_parse_file+0x240>
     560:	b	564 <flatcc_parse_file+0x244>
     564:	ldr	r0, [sp, #36]	; 0x24
     568:	add	r0, r0, #1
     56c:	str	r0, [sp, #36]	; 0x24
     570:	b	454 <flatcc_parse_file+0x134>
     574:	ldr	r0, [fp, #-28]	; 0xffffffe4
     578:	movw	r1, #0
     57c:	cmp	r0, r1
     580:	bne	674 <flatcc_parse_file+0x354>
     584:	ldr	r0, [sp, #28]
     588:	cmp	r0, #0
     58c:	bne	674 <flatcc_parse_file+0x354>
     590:	ldr	r0, [fp, #-16]
     594:	ldr	r0, [r0, #552]	; 0x228
     598:	str	r0, [fp, #-40]	; 0xffffffd8
     59c:	ldr	r0, [fp, #-40]	; 0xffffffd8
     5a0:	ldr	r1, [fp, #-40]	; 0xffffffd8
     5a4:	str	r0, [sp, #20]
     5a8:	mov	r0, r1
     5ac:	bl	0 <strlen>
     5b0:	ldr	r1, [sp, #20]
     5b4:	str	r0, [sp, #16]
     5b8:	mov	r0, r1
     5bc:	ldr	r1, [sp, #16]
     5c0:	bl	0 <__flatcc_fb_find_basename>
     5c4:	str	r0, [fp, #-20]	; 0xffffffec
     5c8:	ldr	r0, [fp, #-40]	; 0xffffffd8
     5cc:	ldr	r1, [fp, #-20]	; 0xffffffec
     5d0:	ldr	r2, [fp, #-12]
     5d4:	ldr	r3, [fp, #-24]	; 0xffffffe8
     5d8:	movw	ip, #0
     5dc:	movt	ip, #0
     5e0:	str	ip, [sp]
     5e4:	movw	ip, #1
     5e8:	str	ip, [sp, #4]
     5ec:	bl	0 <__flatcc_fb_create_join_path_n>
     5f0:	str	r0, [fp, #-32]	; 0xffffffe0
     5f4:	bl	82c <checkmem>
     5f8:	ldr	r0, [fp, #-32]	; 0xffffffe0
     5fc:	ldr	r1, [fp, #-16]
     600:	ldr	r1, [r1, #128]	; 0x80
     604:	add	r2, sp, #44	; 0x2c
     608:	bl	0 <__flatcc_fb_read_file>
     60c:	str	r0, [fp, #-28]	; 0xffffffe4
     610:	movw	r1, #0
     614:	cmp	r0, r1
     618:	bne	670 <flatcc_parse_file+0x350>
     61c:	ldr	r0, [fp, #-32]	; 0xffffffe0
     620:	bl	0 <free>
     624:	movw	r0, #0
     628:	str	r0, [fp, #-32]	; 0xffffffe0
     62c:	ldr	r0, [sp, #44]	; 0x2c
     630:	ldr	r1, [fp, #-16]
     634:	ldr	r1, [r1, #128]	; 0x80
     638:	cmp	r0, r1
     63c:	bls	66c <flatcc_parse_file+0x34c>
     640:	ldr	r0, [fp, #-16]
     644:	ldr	r0, [r0, #128]	; 0x80
     648:	cmp	r0, #0
     64c:	bls	66c <flatcc_parse_file+0x34c>
     650:	ldr	r0, [fp, #-16]
     654:	movw	r1, #0
     658:	movt	r1, #0
     65c:	bl	0 <__flatcc_fb_print_error>
     660:	mvn	r1, #0
     664:	str	r1, [sp, #32]
     668:	b	7d8 <flatcc_parse_file+0x4b8>
     66c:	b	670 <flatcc_parse_file+0x350>
     670:	b	674 <flatcc_parse_file+0x354>
     674:	ldr	r0, [fp, #-28]	; 0xffffffe4
     678:	movw	r1, #0
     67c:	cmp	r0, r1
     680:	bne	69c <flatcc_parse_file+0x37c>
     684:	ldr	r0, [fp, #-16]
     688:	ldr	r2, [fp, #-12]
     68c:	movw	r1, #0
     690:	movt	r1, #0
     694:	bl	0 <__flatcc_fb_print_error>
     698:	b	7d8 <flatcc_parse_file+0x4b8>
     69c:	ldr	r0, [sp, #44]	; 0x2c
     6a0:	ldr	r1, [fp, #-16]
     6a4:	ldr	r1, [r1, #412]	; 0x19c
     6a8:	ldr	r2, [r1, #56]	; 0x38
     6ac:	add	r0, r2, r0
     6b0:	str	r0, [r1, #56]	; 0x38
     6b4:	ldr	r0, [fp, #-32]	; 0xffffffe0
     6b8:	ldr	r1, [fp, #-16]
     6bc:	str	r0, [r1, #548]	; 0x224
     6c0:	movw	r0, #0
     6c4:	str	r0, [fp, #-32]	; 0xffffffe0
     6c8:	ldr	r0, [fp, #-16]
     6cc:	ldr	r1, [fp, #-28]	; 0xffffffe4
     6d0:	ldr	r2, [sp, #44]	; 0x2c
     6d4:	movw	r3, #1
     6d8:	bl	0 <__flatcc_fb_parse>
     6dc:	str	r0, [sp, #32]
     6e0:	cmp	r0, #0
     6e4:	bne	7d0 <flatcc_parse_file+0x4b0>
     6e8:	movw	r0, #0
     6ec:	str	r0, [fp, #-28]	; 0xffffffe4
     6f0:	ldr	r0, [fp, #-16]
     6f4:	ldr	r0, [r0, #352]	; 0x160
     6f8:	str	r0, [sp, #40]	; 0x28
     6fc:	ldr	r0, [sp, #40]	; 0x28
     700:	movw	r1, #0
     704:	cmp	r0, r1
     708:	beq	760 <flatcc_parse_file+0x440>
     70c:	ldr	r0, [sp, #40]	; 0x28
     710:	ldr	r0, [r0, #8]
     714:	ldr	r1, [sp, #40]	; 0x28
     718:	ldr	r1, [r1, #12]
     71c:	bl	0 <__flatcc_fb_copy_path_n>
     720:	str	r0, [fp, #-36]	; 0xffffffdc
     724:	bl	82c <checkmem>
     728:	ldr	r0, [fp, #-16]
     72c:	ldr	r1, [fp, #-36]	; 0xffffffdc
     730:	bl	87c <__parse_include_file>
     734:	cmp	r0, #0
     738:	beq	740 <flatcc_parse_file+0x420>
     73c:	b	7d8 <flatcc_parse_file+0x4b8>
     740:	ldr	r0, [fp, #-36]	; 0xffffffdc
     744:	bl	0 <free>
     748:	movw	r0, #0
     74c:	str	r0, [fp, #-36]	; 0xffffffdc
     750:	ldr	r0, [sp, #40]	; 0x28
     754:	ldr	r0, [r0]
     758:	str	r0, [sp, #40]	; 0x28
     75c:	b	6fc <flatcc_parse_file+0x3dc>
     760:	ldr	r0, [fp, #-16]
     764:	add	r0, r0, #352	; 0x160
     768:	add	r0, r0, #172	; 0xac
     76c:	ldr	r1, [fp, #-16]
     770:	add	r1, r1, #352	; 0x160
     774:	movw	r2, #1
     778:	bl	0 <ptr_set_insert_item>
     77c:	ldr	r1, [fp, #-16]
     780:	str	r0, [sp, #12]
     784:	mov	r0, r1
     788:	bl	0 <__flatcc_fb_build_schema>
     78c:	cmp	r0, #0
     790:	beq	798 <flatcc_parse_file+0x478>
     794:	b	7d8 <flatcc_parse_file+0x4b8>
     798:	ldr	r0, [fp, #-16]
     79c:	ldr	r0, [r0, #240]	; 0xf0
     7a0:	cmp	r0, #0
     7a4:	beq	7cc <flatcc_parse_file+0x4ac>
     7a8:	ldr	r0, [sp, #28]
     7ac:	cmp	r0, #0
     7b0:	beq	7cc <flatcc_parse_file+0x4ac>
     7b4:	ldr	r0, [fp, #-16]
     7b8:	bl	a4c <__flatcc_gen_depends_file>
     7bc:	cmp	r0, #0
     7c0:	beq	7c8 <flatcc_parse_file+0x4a8>
     7c4:	b	7d8 <flatcc_parse_file+0x4b8>
     7c8:	b	7cc <flatcc_parse_file+0x4ac>
     7cc:	b	7d0 <flatcc_parse_file+0x4b0>
     7d0:	movw	r0, #0
     7d4:	str	r0, [sp, #32]
     7d8:	ldr	r0, [fp, #-32]	; 0xffffffe0
     7dc:	movw	r1, #0
     7e0:	cmp	r0, r1
     7e4:	beq	7f8 <flatcc_parse_file+0x4d8>
     7e8:	ldr	r0, [fp, #-32]	; 0xffffffe0
     7ec:	bl	0 <free>
     7f0:	movw	r0, #0
     7f4:	str	r0, [fp, #-32]	; 0xffffffe0
     7f8:	ldr	r0, [fp, #-36]	; 0xffffffdc
     7fc:	movw	r1, #0
     800:	cmp	r0, r1
     804:	beq	818 <flatcc_parse_file+0x4f8>
     808:	ldr	r0, [fp, #-36]	; 0xffffffdc
     80c:	bl	0 <free>
     810:	movw	r0, #0
     814:	str	r0, [fp, #-36]	; 0xffffffdc
     818:	ldr	r0, [sp, #32]
     81c:	str	r0, [fp, #-4]
     820:	ldr	r0, [fp, #-4]
     824:	mov	sp, fp
     828:	pop	{fp, pc}

0000082c <checkmem>:
     82c:	push	{fp, lr}
     830:	mov	fp, sp
     834:	sub	sp, sp, #8
     838:	str	r0, [sp, #4]
     83c:	ldr	r0, [sp, #4]
     840:	movw	r1, #0
     844:	cmp	r0, r1
     848:	bne	874 <checkmem+0x48>
     84c:	movw	r0, #0
     850:	movt	r0, #0
     854:	ldr	r0, [r0]
     858:	movw	r1, #0
     85c:	movt	r1, #0
     860:	bl	0 <fprintf>
     864:	movw	r1, #1
     868:	str	r0, [sp]
     86c:	mov	r0, r1
     870:	bl	0 <exit>
     874:	mov	sp, fp
     878:	pop	{fp, pc}

0000087c <__parse_include_file>:
     87c:	push	{fp, lr}
     880:	mov	fp, sp
     884:	sub	sp, sp, #32
     888:	str	r0, [fp, #-8]
     88c:	str	r1, [fp, #-12]
     890:	movw	r0, #0
     894:	str	r0, [sp, #16]
     898:	str	r0, [sp, #12]
     89c:	ldr	r0, [fp, #-8]
     8a0:	add	r0, r0, #128	; 0x80
     8a4:	str	r0, [sp, #4]
     8a8:	ldr	r0, [fp, #-8]
     8ac:	ldr	r0, [r0, #412]	; 0x19c
     8b0:	str	r0, [sp, #8]
     8b4:	ldr	r0, [sp, #8]
     8b8:	ldr	r0, [r0, #52]	; 0x34
     8bc:	ldr	r1, [sp, #4]
     8c0:	ldr	r1, [r1, #4]
     8c4:	cmp	r0, r1
     8c8:	blt	8f8 <__parse_include_file+0x7c>
     8cc:	ldr	r0, [sp, #4]
     8d0:	ldr	r0, [r0, #4]
     8d4:	cmp	r0, #0
     8d8:	ble	8f8 <__parse_include_file+0x7c>
     8dc:	ldr	r0, [fp, #-8]
     8e0:	movw	r1, #0
     8e4:	movt	r1, #0
     8e8:	bl	0 <__flatcc_fb_print_error>
     8ec:	mvn	r1, #0
     8f0:	str	r1, [fp, #-4]
     8f4:	b	a40 <__parse_include_file+0x1c4>
     8f8:	ldr	r0, [sp, #8]
     8fc:	ldr	r0, [r0, #48]	; 0x30
     900:	ldr	r1, [sp, #4]
     904:	ldr	r1, [r1, #8]
     908:	cmp	r0, r1
     90c:	blt	93c <__parse_include_file+0xc0>
     910:	ldr	r0, [sp, #4]
     914:	ldr	r0, [r0, #8]
     918:	cmp	r0, #0
     91c:	ble	93c <__parse_include_file+0xc0>
     920:	ldr	r0, [fp, #-8]
     924:	movw	r1, #0
     928:	movt	r1, #0
     92c:	bl	0 <__flatcc_fb_print_error>
     930:	mvn	r1, #0
     934:	str	r1, [fp, #-4]
     938:	b	a40 <__parse_include_file+0x1c4>
     93c:	ldr	r0, [sp, #4]
     940:	ldr	r1, [fp, #-12]
     944:	ldr	r2, [fp, #-8]
     948:	bl	10b0 <__flatcc_create_child_context>
     94c:	str	r0, [sp, #16]
     950:	movw	r1, #0
     954:	cmp	r0, r1
     958:	bne	968 <__parse_include_file+0xec>
     95c:	mvn	r0, #0
     960:	str	r0, [fp, #-4]
     964:	b	a40 <__parse_include_file+0x1c4>
     968:	ldr	r0, [sp, #16]
     96c:	str	r0, [sp, #12]
     970:	ldr	r0, [sp, #8]
     974:	add	r0, r0, #32
     978:	ldr	r1, [sp, #12]
     97c:	add	r1, r1, #352	; 0x160
     980:	bl	0 <fb_schema_table_find_item>
     984:	str	r0, [sp]
     988:	movw	r1, #0
     98c:	cmp	r0, r1
     990:	beq	9b8 <__parse_include_file+0x13c>
     994:	ldr	r0, [fp, #-8]
     998:	add	r0, r0, #352	; 0x160
     99c:	ldr	r1, [sp]
     9a0:	bl	114c <add_visible_schema>
     9a4:	ldr	r0, [sp, #16]
     9a8:	bl	1050 <flatcc_destroy_context>
     9ac:	movw	r0, #0
     9b0:	str	r0, [fp, #-4]
     9b4:	b	a40 <__parse_include_file+0x1c4>
     9b8:	ldr	r0, [fp, #-8]
     9bc:	ldr	r0, [r0]
     9c0:	ldr	r1, [sp, #12]
     9c4:	str	r0, [r1]
     9c8:	ldr	r0, [sp, #12]
     9cc:	ldr	r1, [fp, #-8]
     9d0:	str	r0, [r1]
     9d4:	ldr	r0, [fp, #-8]
     9d8:	ldr	r0, [r0, #548]	; 0x224
     9dc:	ldr	r1, [sp, #12]
     9e0:	str	r0, [r1, #552]	; 0x228
     9e4:	ldr	r0, [sp, #8]
     9e8:	ldr	r1, [r0, #52]	; 0x34
     9ec:	add	r1, r1, #1
     9f0:	str	r1, [r0, #52]	; 0x34
     9f4:	ldr	r0, [sp, #8]
     9f8:	ldr	r1, [r0, #48]	; 0x30
     9fc:	add	r1, r1, #1
     a00:	str	r1, [r0, #48]	; 0x30
     a04:	ldr	r0, [sp, #16]
     a08:	ldr	r1, [fp, #-12]
     a0c:	bl	320 <flatcc_parse_file>
     a10:	cmp	r0, #0
     a14:	beq	a24 <__parse_include_file+0x1a8>
     a18:	mvn	r0, #0
     a1c:	str	r0, [fp, #-4]
     a20:	b	a40 <__parse_include_file+0x1c4>
     a24:	ldr	r0, [fp, #-8]
     a28:	add	r0, r0, #352	; 0x160
     a2c:	ldr	r1, [sp, #12]
     a30:	add	r1, r1, #352	; 0x160
     a34:	bl	114c <add_visible_schema>
     a38:	movw	r0, #0
     a3c:	str	r0, [fp, #-4]
     a40:	ldr	r0, [fp, #-4]
     a44:	mov	sp, fp
     a48:	pop	{fp, pc}

00000a4c <__flatcc_gen_depends_file>:
     a4c:	push	{fp, lr}
     a50:	mov	fp, sp
     a54:	sub	sp, sp, #64	; 0x40
     a58:	str	r0, [fp, #-4]
     a5c:	movw	r0, #0
     a60:	str	r0, [fp, #-8]
     a64:	str	r0, [sp, #20]
     a68:	str	r0, [sp, #16]
     a6c:	str	r0, [sp, #12]
     a70:	str	r0, [sp, #8]
     a74:	mvn	r1, #0
     a78:	str	r1, [sp, #4]
     a7c:	ldr	r1, [fp, #-4]
     a80:	ldr	r1, [r1, #552]	; 0x228
     a84:	cmp	r1, r0
     a88:	bne	a90 <__flatcc_gen_depends_file+0x44>
     a8c:	b	ab0 <__flatcc_gen_depends_file+0x64>
     a90:	movw	r0, #0
     a94:	movt	r0, #0
     a98:	movw	r1, #0
     a9c:	movt	r1, #0
     aa0:	movw	r2, #220	; 0xdc
     aa4:	movw	r3, #0
     aa8:	movt	r3, #0
     aac:	bl	0 <__assert_fail>
     ab0:	ldr	r0, [fp, #-4]
     ab4:	ldr	r0, [r0, #344]	; 0x158
     ab8:	movw	r1, #0
     abc:	cmp	r0, r1
     ac0:	beq	ad4 <__flatcc_gen_depends_file+0x88>
     ac4:	ldr	r0, [fp, #-4]
     ac8:	ldr	r0, [r0, #344]	; 0x158
     acc:	str	r0, [sp]
     ad0:	b	ae4 <__flatcc_gen_depends_file+0x98>
     ad4:	movw	r0, #0
     ad8:	movt	r0, #0
     adc:	str	r0, [sp]
     ae0:	b	ae4 <__flatcc_gen_depends_file+0x98>
     ae4:	ldr	r0, [sp]
     ae8:	str	r0, [fp, #-12]
     aec:	ldr	r0, [fp, #-4]
     af0:	ldr	r0, [r0, #512]	; 0x200
     af4:	str	r0, [fp, #-16]
     af8:	ldr	r0, [fp, #-4]
     afc:	ldr	r0, [r0, #248]	; 0xf8
     b00:	str	r0, [sp, #32]
     b04:	ldr	r0, [fp, #-4]
     b08:	ldr	r0, [r0, #244]	; 0xf4
     b0c:	movw	r1, #0
     b10:	cmp	r0, r1
     b14:	beq	b38 <__flatcc_gen_depends_file+0xec>
     b18:	ldr	r0, [fp, #-4]
     b1c:	ldr	r0, [r0, #244]	; 0xf4
     b20:	str	r0, [fp, #-20]	; 0xffffffec
     b24:	movw	r0, #0
     b28:	movt	r0, #0
     b2c:	str	r0, [fp, #-24]	; 0xffffffe8
     b30:	str	r0, [fp, #-28]	; 0xffffffe4
     b34:	b	b54 <__flatcc_gen_depends_file+0x108>
     b38:	ldr	r0, [fp, #-16]
     b3c:	str	r0, [fp, #-20]	; 0xffffffec
     b40:	ldr	r0, [fp, #-12]
     b44:	str	r0, [fp, #-24]	; 0xffffffe8
     b48:	movw	r0, #0
     b4c:	movt	r0, #0
     b50:	str	r0, [fp, #-28]	; 0xffffffe4
     b54:	ldr	r0, [sp, #32]
     b58:	movw	r1, #0
     b5c:	cmp	r0, r1
     b60:	beq	b78 <__flatcc_gen_depends_file+0x12c>
     b64:	movw	r0, #0
     b68:	movt	r0, #0
     b6c:	str	r0, [sp, #28]
     b70:	str	r0, [sp, #24]
     b74:	b	bb8 <__flatcc_gen_depends_file+0x16c>
     b78:	ldr	r0, [fp, #-4]
     b7c:	ldr	r0, [r0, #308]	; 0x134
     b80:	cmp	r0, #0
     b84:	movw	r0, #0
     b88:	movne	r0, #1
     b8c:	tst	r0, #1
     b90:	movw	r0, #0
     b94:	movt	r0, #0
     b98:	movw	r1, #0
     b9c:	movt	r1, #0
     ba0:	movne	r0, r1
     ba4:	str	r0, [sp, #28]
     ba8:	ldr	r0, [fp, #-16]
     bac:	str	r0, [sp, #32]
     bb0:	ldr	r0, [fp, #-12]
     bb4:	str	r0, [sp, #24]
     bb8:	ldr	r0, [fp, #-24]	; 0xffffffe8
     bbc:	ldr	r1, [fp, #-20]	; 0xffffffec
     bc0:	ldr	r2, [fp, #-28]	; 0xffffffe4
     bc4:	movw	r3, #1
     bc8:	bl	0 <__flatcc_fb_create_join_path>
     bcc:	str	r0, [sp, #20]
     bd0:	bl	82c <checkmem>
     bd4:	ldr	r0, [sp, #24]
     bd8:	ldr	r1, [sp, #32]
     bdc:	ldr	r2, [sp, #28]
     be0:	movw	r3, #1
     be4:	bl	0 <__flatcc_fb_create_join_path>
     be8:	str	r0, [sp, #12]
     bec:	bl	82c <checkmem>
     bf0:	ldr	r0, [sp, #12]
     bf4:	bl	0 <__flatcc_fb_create_make_path>
     bf8:	str	r0, [sp, #8]
     bfc:	bl	82c <checkmem>
     c00:	ldr	r0, [sp, #12]
     c04:	movw	r1, #0
     c08:	cmp	r0, r1
     c0c:	beq	c20 <__flatcc_gen_depends_file+0x1d4>
     c10:	ldr	r0, [sp, #12]
     c14:	bl	0 <free>
     c18:	movw	r0, #0
     c1c:	str	r0, [sp, #12]
     c20:	ldr	r0, [sp, #20]
     c24:	movw	r1, #0
     c28:	movt	r1, #0
     c2c:	bl	0 <fopen>
     c30:	str	r0, [fp, #-8]
     c34:	ldr	r0, [fp, #-8]
     c38:	movw	r1, #0
     c3c:	cmp	r0, r1
     c40:	bne	c5c <__flatcc_gen_depends_file+0x210>
     c44:	ldr	r0, [fp, #-4]
     c48:	ldr	r2, [sp, #20]
     c4c:	movw	r1, #0
     c50:	movt	r1, #0
     c54:	bl	0 <__flatcc_fb_print_error>
     c58:	b	cfc <__flatcc_gen_depends_file+0x2b0>
     c5c:	ldr	r0, [fp, #-8]
     c60:	ldr	r2, [sp, #8]
     c64:	movw	r1, #0
     c68:	movt	r1, #0
     c6c:	bl	0 <fprintf>
     c70:	ldr	r1, [fp, #-4]
     c74:	ldr	r1, [r1]
     c78:	str	r1, [fp, #-4]
     c7c:	ldr	r0, [fp, #-4]
     c80:	movw	r1, #0
     c84:	cmp	r0, r1
     c88:	beq	ce4 <__flatcc_gen_depends_file+0x298>
     c8c:	ldr	r0, [fp, #-4]
     c90:	ldr	r0, [r0, #548]	; 0x224
     c94:	bl	0 <__flatcc_fb_create_make_path>
     c98:	str	r0, [sp, #16]
     c9c:	bl	82c <checkmem>
     ca0:	ldr	r0, [fp, #-8]
     ca4:	ldr	r2, [sp, #16]
     ca8:	movw	r1, #0
     cac:	movt	r1, #0
     cb0:	bl	0 <fprintf>
     cb4:	ldr	r1, [fp, #-4]
     cb8:	ldr	r1, [r1]
     cbc:	str	r1, [fp, #-4]
     cc0:	ldr	r1, [sp, #16]
     cc4:	movw	r2, #0
     cc8:	cmp	r1, r2
     ccc:	beq	ce0 <__flatcc_gen_depends_file+0x294>
     cd0:	ldr	r0, [sp, #16]
     cd4:	bl	0 <free>
     cd8:	movw	r0, #0
     cdc:	str	r0, [sp, #16]
     ce0:	b	c7c <__flatcc_gen_depends_file+0x230>
     ce4:	ldr	r0, [fp, #-8]
     ce8:	movw	r1, #0
     cec:	movt	r1, #0
     cf0:	bl	0 <fprintf>
     cf4:	movw	r1, #0
     cf8:	str	r1, [sp, #4]
     cfc:	ldr	r0, [sp, #20]
     d00:	movw	r1, #0
     d04:	cmp	r0, r1
     d08:	beq	d1c <__flatcc_gen_depends_file+0x2d0>
     d0c:	ldr	r0, [sp, #20]
     d10:	bl	0 <free>
     d14:	movw	r0, #0
     d18:	str	r0, [sp, #20]
     d1c:	ldr	r0, [sp, #12]
     d20:	movw	r1, #0
     d24:	cmp	r0, r1
     d28:	beq	d3c <__flatcc_gen_depends_file+0x2f0>
     d2c:	ldr	r0, [sp, #12]
     d30:	bl	0 <free>
     d34:	movw	r0, #0
     d38:	str	r0, [sp, #12]
     d3c:	ldr	r0, [sp, #8]
     d40:	movw	r1, #0
     d44:	cmp	r0, r1
     d48:	beq	d5c <__flatcc_gen_depends_file+0x310>
     d4c:	ldr	r0, [sp, #8]
     d50:	bl	0 <free>
     d54:	movw	r0, #0
     d58:	str	r0, [sp, #8]
     d5c:	ldr	r0, [sp, #16]
     d60:	movw	r1, #0
     d64:	cmp	r0, r1
     d68:	beq	d7c <__flatcc_gen_depends_file+0x330>
     d6c:	ldr	r0, [sp, #16]
     d70:	bl	0 <free>
     d74:	movw	r0, #0
     d78:	str	r0, [sp, #16]
     d7c:	ldr	r0, [fp, #-8]
     d80:	movw	r1, #0
     d84:	cmp	r0, r1
     d88:	beq	d94 <__flatcc_gen_depends_file+0x348>
     d8c:	ldr	r0, [fp, #-8]
     d90:	bl	0 <fclose>
     d94:	ldr	r0, [sp, #4]
     d98:	mov	sp, fp
     d9c:	pop	{fp, pc}

00000da0 <flatcc_generate_binary_schema_to_buffer>:
     da0:	push	{fp, lr}
     da4:	mov	fp, sp
     da8:	sub	sp, sp, #24
     dac:	str	r0, [fp, #-8]
     db0:	str	r1, [sp, #12]
     db4:	str	r2, [sp, #8]
     db8:	ldr	r0, [fp, #-8]
     dbc:	str	r0, [sp, #4]
     dc0:	ldr	r0, [sp, #4]
     dc4:	add	r0, r0, #128	; 0x80
     dc8:	ldr	r1, [sp, #4]
     dcc:	add	r1, r1, #352	; 0x160
     dd0:	ldr	r2, [sp, #12]
     dd4:	add	r3, sp, #8
     dd8:	bl	0 <__flatcc_fb_codegen_bfbs_to_buffer>
     ddc:	movw	r1, #0
     de0:	cmp	r0, r1
     de4:	beq	df4 <flatcc_generate_binary_schema_to_buffer+0x54>
     de8:	ldr	r0, [sp, #8]
     dec:	str	r0, [fp, #-4]
     df0:	b	dfc <flatcc_generate_binary_schema_to_buffer+0x5c>
     df4:	mvn	r0, #0
     df8:	str	r0, [fp, #-4]
     dfc:	ldr	r0, [fp, #-4]
     e00:	mov	sp, fp
     e04:	pop	{fp, pc}

00000e08 <flatcc_generate_binary_schema>:
     e08:	push	{fp, lr}
     e0c:	mov	fp, sp
     e10:	sub	sp, sp, #16
     e14:	str	r0, [fp, #-4]
     e18:	str	r1, [sp, #8]
     e1c:	ldr	r0, [fp, #-4]
     e20:	str	r0, [sp, #4]
     e24:	ldr	r0, [sp, #4]
     e28:	add	r0, r0, #128	; 0x80
     e2c:	ldr	r1, [sp, #4]
     e30:	add	r1, r1, #352	; 0x160
     e34:	ldr	r2, [sp, #8]
     e38:	bl	0 <__flatcc_fb_codegen_bfbs_alloc_buffer>
     e3c:	mov	sp, fp
     e40:	pop	{fp, pc}

00000e44 <flatcc_generate_files>:
     e44:	push	{r4, r5, fp, lr}
     e48:	add	fp, sp, #8
     e4c:	sub	sp, sp, #264	; 0x108
     e50:	str	r0, [fp, #-16]
     e54:	ldr	r0, [fp, #-16]
     e58:	str	r0, [fp, #-20]	; 0xffffffec
     e5c:	movw	r0, #0
     e60:	str	r0, [sp, #8]
     e64:	add	r1, sp, #12
     e68:	str	r1, [fp, #-28]	; 0xffffffe4
     e6c:	ldr	r1, [fp, #-20]	; 0xffffffec
     e70:	cmp	r1, r0
     e74:	beq	e88 <flatcc_generate_files+0x44>
     e78:	ldr	r0, [fp, #-20]	; 0xffffffec
     e7c:	ldr	r0, [r0, #108]	; 0x6c
     e80:	cmp	r0, #0
     e84:	beq	e94 <flatcc_generate_files+0x50>
     e88:	mvn	r0, #0
     e8c:	str	r0, [fp, #-12]
     e90:	b	1044 <flatcc_generate_files+0x200>
     e94:	movw	r0, #0
     e98:	str	r0, [fp, #-24]	; 0xffffffe8
     e9c:	ldr	r0, [fp, #-20]	; 0xffffffec
     ea0:	movw	r1, #0
     ea4:	cmp	r0, r1
     ea8:	beq	ed0 <flatcc_generate_files+0x8c>
     eac:	ldr	r0, [fp, #-24]	; 0xffffffe8
     eb0:	ldr	r1, [fp, #-20]	; 0xffffffec
     eb4:	str	r0, [r1, #4]
     eb8:	ldr	r0, [fp, #-20]	; 0xffffffec
     ebc:	str	r0, [fp, #-24]	; 0xffffffe8
     ec0:	ldr	r0, [fp, #-20]	; 0xffffffec
     ec4:	ldr	r0, [r0]
     ec8:	str	r0, [fp, #-20]	; 0xffffffec
     ecc:	b	e9c <flatcc_generate_files+0x58>
     ed0:	ldr	r0, [fp, #-16]
     ed4:	str	r0, [fp, #-20]	; 0xffffffec
     ed8:	ldr	r0, [fp, #-20]	; 0xffffffec
     edc:	ldr	r0, [r0, #308]	; 0x134
     ee0:	cmp	r0, #0
     ee4:	beq	f14 <flatcc_generate_files+0xd0>
     ee8:	ldr	r0, [fp, #-20]	; 0xffffffec
     eec:	add	r0, r0, #128	; 0x80
     ef0:	ldr	r1, [fp, #-20]	; 0xffffffec
     ef4:	add	r1, r1, #352	; 0x160
     ef8:	bl	0 <__flatcc_fb_codegen_bfbs_to_file>
     efc:	cmp	r0, #0
     f00:	beq	f10 <flatcc_generate_files+0xcc>
     f04:	mvn	r0, #0
     f08:	str	r0, [fp, #-12]
     f0c:	b	1044 <flatcc_generate_files+0x200>
     f10:	b	f14 <flatcc_generate_files+0xd0>
     f14:	ldr	r0, [fp, #-28]	; 0xffffffe4
     f18:	ldr	r1, [fp, #-20]	; 0xffffffec
     f1c:	add	r1, r1, #128	; 0x80
     f20:	bl	0 <__flatcc_fb_init_output_c>
     f24:	cmp	r0, #0
     f28:	beq	f38 <flatcc_generate_files+0xf4>
     f2c:	mvn	r0, #0
     f30:	str	r0, [fp, #-12]
     f34:	b	1044 <flatcc_generate_files+0x200>
     f38:	ldr	r0, [fp, #-20]	; 0xffffffec
     f3c:	ldr	r0, [r0, #256]	; 0x100
     f40:	cmp	r0, #0
     f44:	bne	f60 <flatcc_generate_files+0x11c>
     f48:	ldr	r0, [fp, #-28]	; 0xffffffe4
     f4c:	bl	0 <__flatcc_fb_codegen_common_c>
     f50:	str	r0, [sp, #8]
     f54:	cmp	r0, #0
     f58:	beq	f60 <flatcc_generate_files+0x11c>
     f5c:	b	1034 <flatcc_generate_files+0x1f0>
     f60:	ldr	r0, [fp, #-20]	; 0xffffffec
     f64:	ldr	r0, [r0, #120]	; 0x78
     f68:	cmp	r0, #0
     f6c:	bne	f74 <flatcc_generate_files+0x130>
     f70:	b	1034 <flatcc_generate_files+0x1f0>
     f74:	ldr	r0, [fp, #-20]	; 0xffffffec
     f78:	ldr	r0, [r0, #300]	; 0x12c
     f7c:	cmp	r0, #0
     f80:	bne	f9c <flatcc_generate_files+0x158>
     f84:	ldr	r0, [fp, #-28]	; 0xffffffe4
     f88:	ldr	r1, [fp, #-20]	; 0xffffffec
     f8c:	add	r1, r1, #352	; 0x160
     f90:	bl	0 <__flatcc_fb_codegen_c>
     f94:	str	r0, [sp, #8]
     f98:	b	1034 <flatcc_generate_files+0x1f0>
     f9c:	ldr	r0, [fp, #-24]	; 0xffffffe8
     fa0:	str	r0, [fp, #-20]	; 0xffffffec
     fa4:	ldr	r0, [sp, #8]
     fa8:	cmp	r0, #0
     fac:	movw	r0, #0
     fb0:	str	r0, [sp, #4]
     fb4:	bne	fd0 <flatcc_generate_files+0x18c>
     fb8:	ldr	r0, [fp, #-20]	; 0xffffffec
     fbc:	movw	r1, #0
     fc0:	cmp	r0, r1
     fc4:	movw	r0, #0
     fc8:	movne	r0, #1
     fcc:	str	r0, [sp, #4]
     fd0:	ldr	r0, [sp, #4]
     fd4:	tst	r0, #1
     fd8:	beq	1030 <flatcc_generate_files+0x1ec>
     fdc:	ldr	r0, [fp, #-20]	; 0xffffffec
     fe0:	ldr	r0, [r0, #108]	; 0x6c
     fe4:	cmp	r0, #0
     fe8:	movw	r0, #1
     fec:	str	r0, [sp]
     ff0:	bne	1014 <flatcc_generate_files+0x1d0>
     ff4:	ldr	r0, [fp, #-28]	; 0xffffffe4
     ff8:	ldr	r1, [fp, #-20]	; 0xffffffec
     ffc:	add	r1, r1, #352	; 0x160
    1000:	bl	0 <__flatcc_fb_codegen_c>
    1004:	cmp	r0, #0
    1008:	movw	r0, #0
    100c:	movne	r0, #1
    1010:	str	r0, [sp]
    1014:	ldr	r0, [sp]
    1018:	and	r0, r0, #1
    101c:	str	r0, [sp, #8]
    1020:	ldr	r0, [fp, #-20]	; 0xffffffec
    1024:	ldr	r0, [r0, #4]
    1028:	str	r0, [fp, #-20]	; 0xffffffec
    102c:	b	fa4 <flatcc_generate_files+0x160>
    1030:	b	1034 <flatcc_generate_files+0x1f0>
    1034:	ldr	r0, [fp, #-28]	; 0xffffffe4
    1038:	bl	0 <__flatcc_fb_end_output_c>
    103c:	ldr	r0, [sp, #8]
    1040:	str	r0, [fp, #-12]
    1044:	ldr	r0, [fp, #-12]
    1048:	sub	sp, fp, #8
    104c:	pop	{r4, r5, fp, pc}

00001050 <flatcc_destroy_context>:
    1050:	push	{fp, lr}
    1054:	mov	fp, sp
    1058:	sub	sp, sp, #16
    105c:	str	r0, [fp, #-4]
    1060:	ldr	r0, [fp, #-4]
    1064:	str	r0, [sp, #8]
    1068:	movw	r0, #0
    106c:	str	r0, [sp, #4]
    1070:	ldr	r0, [sp, #8]
    1074:	movw	r1, #0
    1078:	cmp	r0, r1
    107c:	beq	10a8 <flatcc_destroy_context+0x58>
    1080:	ldr	r0, [sp, #8]
    1084:	ldr	r0, [r0]
    1088:	str	r0, [sp, #4]
    108c:	ldr	r0, [sp, #8]
    1090:	bl	0 <__flatcc_fb_clear_parser>
    1094:	ldr	r0, [sp, #8]
    1098:	bl	0 <free>
    109c:	ldr	r0, [sp, #4]
    10a0:	str	r0, [sp, #8]
    10a4:	b	1070 <flatcc_destroy_context+0x20>
    10a8:	mov	sp, fp
    10ac:	pop	{fp, pc}

000010b0 <__flatcc_create_child_context>:
    10b0:	push	{fp, lr}
    10b4:	mov	fp, sp
    10b8:	sub	sp, sp, #32
    10bc:	str	r0, [fp, #-8]
    10c0:	str	r1, [fp, #-12]
    10c4:	str	r2, [sp, #16]
    10c8:	movw	r0, #560	; 0x230
    10cc:	bl	0 <malloc>
    10d0:	str	r0, [sp, #12]
    10d4:	movw	r1, #0
    10d8:	cmp	r0, r1
    10dc:	bne	10ec <__flatcc_create_child_context+0x3c>
    10e0:	movw	r0, #0
    10e4:	str	r0, [fp, #-4]
    10e8:	b	1140 <__flatcc_create_child_context+0x90>
    10ec:	ldr	r0, [sp, #12]
    10f0:	ldr	r1, [fp, #-8]
    10f4:	ldr	r2, [fp, #-12]
    10f8:	ldr	r3, [sp, #16]
    10fc:	ldr	r3, [r3, #8]
    1100:	ldr	ip, [sp, #16]
    1104:	ldr	ip, [ip, #12]
    1108:	ldr	lr, [sp, #16]
    110c:	ldr	lr, [lr, #412]	; 0x19c
    1110:	str	ip, [sp]
    1114:	str	lr, [sp, #4]
    1118:	bl	0 <__flatcc_fb_init_parser>
    111c:	cmp	r0, #0
    1120:	beq	1138 <__flatcc_create_child_context+0x88>
    1124:	ldr	r0, [sp, #12]
    1128:	bl	0 <free>
    112c:	movw	r0, #0
    1130:	str	r0, [fp, #-4]
    1134:	b	1140 <__flatcc_create_child_context+0x90>
    1138:	ldr	r0, [sp, #12]
    113c:	str	r0, [fp, #-4]
    1140:	ldr	r0, [fp, #-4]
    1144:	mov	sp, fp
    1148:	pop	{fp, pc}

0000114c <add_visible_schema>:
    114c:	push	{fp, lr}
    1150:	mov	fp, sp
    1154:	sub	sp, sp, #16
    1158:	str	r0, [fp, #-4]
    115c:	str	r1, [sp, #8]
    1160:	ldr	r0, [sp, #8]
    1164:	add	r0, r0, #172	; 0xac
    1168:	ldr	r1, [fp, #-4]
    116c:	movw	r2, #0
    1170:	movt	r2, #0
    1174:	str	r1, [sp, #4]
    1178:	mov	r1, r2
    117c:	ldr	r2, [sp, #4]
    1180:	bl	0 <ptr_set_visit>
    1184:	mov	sp, fp
    1188:	pop	{fp, pc}

0000118c <visit_dep>:
    118c:	push	{fp, lr}
    1190:	mov	fp, sp
    1194:	sub	sp, sp, #16
    1198:	str	r0, [fp, #-4]
    119c:	str	r1, [sp, #8]
    11a0:	ldr	r0, [fp, #-4]
    11a4:	str	r0, [sp, #4]
    11a8:	ldr	r0, [sp, #8]
    11ac:	str	r0, [sp]
    11b0:	ldr	r0, [sp, #4]
    11b4:	add	r0, r0, #172	; 0xac
    11b8:	ldr	r1, [sp]
    11bc:	movw	r2, #1
    11c0:	bl	0 <ptr_set_insert_item>
    11c4:	mov	sp, fp
    11c8:	pop	{fp, pc}
