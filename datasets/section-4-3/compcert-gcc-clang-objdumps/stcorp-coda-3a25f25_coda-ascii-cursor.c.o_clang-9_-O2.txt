
../compcert-repos/stcorp-coda-3a25f25/CMakeFiles/coda_static.dir/libcoda/coda-ascii-cursor.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <coda_ascii_parse_int64>:
       0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
       4:	add	fp, sp, #28
       8:	sub	sp, sp, #20
       c:	mov	r7, r0
      10:	ldrb	r0, [r0]
      14:	cmp	r1, #1
      18:	str	r3, [sp, #16]
      1c:	blt	e4 <coda_ascii_parse_int64+0xe4>
      20:	mvn	ip, #8
      24:	mov	r4, r1
      28:	uxtab	r5, ip, r0
      2c:	cmp	r5, #36	; 0x24
      30:	bhi	120 <coda_ascii_parse_int64+0x120>
      34:	add	r6, pc, #0
      38:	ldr	pc, [r6, r5, lsl #2]
      3c:	.word	0x000000d0
      40:	.word	0x00000120
      44:	.word	0x00000120
      48:	.word	0x00000120
      4c:	.word	0x00000120
      50:	.word	0x00000120
      54:	.word	0x00000120
      58:	.word	0x00000120
      5c:	.word	0x00000120
      60:	.word	0x00000120
      64:	.word	0x00000120
      68:	.word	0x00000120
      6c:	.word	0x00000120
      70:	.word	0x00000120
      74:	.word	0x00000120
      78:	.word	0x00000120
      7c:	.word	0x00000120
      80:	.word	0x00000120
      84:	.word	0x00000120
      88:	.word	0x00000120
      8c:	.word	0x00000120
      90:	.word	0x00000120
      94:	.word	0x00000120
      98:	.word	0x000000d0
      9c:	.word	0x00000120
      a0:	.word	0x00000120
      a4:	.word	0x00000120
      a8:	.word	0x00000120
      ac:	.word	0x00000120
      b0:	.word	0x00000120
      b4:	.word	0x00000120
      b8:	.word	0x00000120
      bc:	.word	0x00000120
      c0:	.word	0x00000120
      c4:	.word	0x000000f4
      c8:	.word	0x00000120
      cc:	.word	0x000000f4
      d0:	ldrb	r0, [r7, #1]!
      d4:	sub	r4, r4, #1
      d8:	cmp	r4, #0
      dc:	bgt	28 <coda_ascii_parse_int64+0x28>
      e0:	b	e8 <coda_ascii_parse_int64+0xe8>
      e4:	mov	r4, r1
      e8:	cmp	r0, #43	; 0x2b
      ec:	cmpne	r0, #45	; 0x2d
      f0:	bne	208 <coda_ascii_parse_int64+0x208>
      f4:	sub	r4, r4, #1
      f8:	cmp	r4, #0
      fc:	ble	208 <coda_ascii_parse_int64+0x208>
     100:	str	r1, [sp, #12]
     104:	mvn	r1, #44	; 0x2c
     108:	str	r2, [sp, #8]
     10c:	add	r7, r7, #1
     110:	uxtab	r0, r1, r0
     114:	clz	r0, r0
     118:	lsr	r0, r0, #5
     11c:	b	12c <coda_ascii_parse_int64+0x12c>
     120:	mov	r0, #0
     124:	str	r2, [sp, #8]
     128:	str	r1, [sp, #12]
     12c:	str	r0, [sp, #4]
     130:	mov	r6, #0
     134:	mvn	sl, #-2147483648	; 0x80000000
     138:	mov	r9, #0
     13c:	mov	r8, #0
     140:	ldrb	r0, [r7, r8]
     144:	sub	r5, r0, #48	; 0x30
     148:	uxtb	r0, r5
     14c:	cmp	r0, #9
     150:	bhi	1a4 <coda_ascii_parse_int64+0x1a4>
     154:	sub	r1, sl, r5, asr #31
     158:	mvn	r0, r5
     15c:	mov	r2, #10
     160:	mov	r3, #0
     164:	bl	0 <__aeabi_ldivmod>
     168:	subs	r0, r0, r6
     16c:	sbcs	r0, r1, r9
     170:	blt	214 <coda_ascii_parse_int64+0x214>
     174:	mov	r0, #10
     178:	add	r2, r9, r9, lsl #2
     17c:	add	r8, r8, #1
     180:	umull	r0, r1, r6, r0
     184:	add	r1, r1, r2, lsl #1
     188:	adds	r6, r0, r5
     18c:	adc	r9, r1, r5, asr #31
     190:	cmp	r4, r8
     194:	bne	140 <coda_ascii_parse_int64+0x140>
     198:	ldr	ip, [sp, #12]
     19c:	ldr	r5, [sp, #8]
     1a0:	b	1b4 <coda_ascii_parse_int64+0x1b4>
     1a4:	ldr	ip, [sp, #12]
     1a8:	ldr	r5, [sp, #8]
     1ac:	cmp	r8, #0
     1b0:	beq	208 <coda_ascii_parse_int64+0x208>
     1b4:	add	r1, r7, r8
     1b8:	sub	r0, r4, r8
     1bc:	ldr	r2, [sp, #16]
     1c0:	cmp	r2, #0
     1c4:	bne	234 <coda_ascii_parse_int64+0x234>
     1c8:	cmp	r0, #0
     1cc:	beq	234 <coda_ascii_parse_int64+0x234>
     1d0:	cmp	r0, #1
     1d4:	blt	1fc <coda_ascii_parse_int64+0x1fc>
     1d8:	ldrb	r2, [r1]
     1dc:	cmp	r2, #32
     1e0:	cmpne	r2, #9
     1e4:	bne	1fc <coda_ascii_parse_int64+0x1fc>
     1e8:	sub	r0, r0, #1
     1ec:	add	r1, r1, #1
     1f0:	cmp	r0, #0
     1f4:	bgt	1d8 <coda_ascii_parse_int64+0x1d8>
     1f8:	beq	230 <coda_ascii_parse_int64+0x230>
     1fc:	movw	r1, #0
     200:	movt	r1, #0
     204:	b	21c <coda_ascii_parse_int64+0x21c>
     208:	movw	r1, #0
     20c:	movt	r1, #0
     210:	b	21c <coda_ascii_parse_int64+0x21c>
     214:	movw	r1, #0
     218:	movt	r1, #0
     21c:	mvn	r0, #102	; 0x66
     220:	bl	0 <coda_set_error>
     224:	mvn	r0, #0
     228:	sub	sp, fp, #28
     22c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
     230:	mov	r0, #0
     234:	ldr	r1, [sp, #4]
     238:	rsbs	r2, r6, #0
     23c:	sub	r0, ip, r0
     240:	rsc	r3, r9, #0
     244:	cmp	r1, #0
     248:	moveq	r2, r6
     24c:	moveq	r3, r9
     250:	strd	r2, [r5]
     254:	sub	sp, fp, #28
     258:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000025c <coda_ascii_parse_uint64>:
     25c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
     260:	add	fp, sp, #28
     264:	sub	sp, sp, #12
     268:	mov	r7, r0
     26c:	mov	r4, r1
     270:	cmp	r1, #1
     274:	blt	298 <coda_ascii_parse_uint64+0x3c>
     278:	ldrb	r0, [r7]
     27c:	cmp	r0, #32
     280:	cmpne	r0, #9
     284:	bne	298 <coda_ascii_parse_uint64+0x3c>
     288:	sub	r4, r4, #1
     28c:	add	r7, r7, #1
     290:	cmp	r4, #0
     294:	bgt	278 <coda_ascii_parse_uint64+0x1c>
     298:	ldrb	r0, [r7]
     29c:	cmp	r0, #43	; 0x2b
     2a0:	subeq	r4, r4, #1
     2a4:	cmp	r4, #1
     2a8:	blt	394 <coda_ascii_parse_uint64+0x138>
     2ac:	cmp	r0, #43	; 0x2b
     2b0:	mov	r8, #0
     2b4:	mvn	r6, #1
     2b8:	mov	r9, #0
     2bc:	mov	sl, #0
     2c0:	str	r3, [sp]
     2c4:	str	r2, [sp, #4]
     2c8:	str	r1, [sp, #8]
     2cc:	addeq	r7, r7, #1
     2d0:	ldrb	r0, [r7, sl]
     2d4:	sub	r5, r0, #48	; 0x30
     2d8:	uxtb	r0, r5
     2dc:	cmp	r0, #9
     2e0:	bhi	334 <coda_ascii_parse_uint64+0xd8>
     2e4:	eor	r0, r5, r6
     2e8:	mvn	r1, r5, asr #31
     2ec:	mov	r2, #10
     2f0:	mov	r3, #0
     2f4:	bl	0 <__aeabi_uldivmod>
     2f8:	subs	r0, r0, r8
     2fc:	sbcs	r0, r1, r9
     300:	bcc	3a0 <coda_ascii_parse_uint64+0x144>
     304:	mov	r0, #10
     308:	add	r2, r9, r9, lsl #2
     30c:	add	sl, sl, #1
     310:	umull	r0, r1, r8, r0
     314:	add	r1, r1, r2, lsl #1
     318:	adds	r8, r0, r5
     31c:	adc	r9, r1, r5, asr #31
     320:	cmp	r4, sl
     324:	bne	2d0 <coda_ascii_parse_uint64+0x74>
     328:	ldr	r3, [sp, #8]
     32c:	ldm	sp, {r2, r6}
     330:	b	344 <coda_ascii_parse_uint64+0xe8>
     334:	ldr	r3, [sp, #8]
     338:	ldm	sp, {r2, r6}
     33c:	cmp	sl, #0
     340:	beq	394 <coda_ascii_parse_uint64+0x138>
     344:	add	r1, r7, sl
     348:	sub	r0, r4, sl
     34c:	cmp	r2, #0
     350:	bne	3c0 <coda_ascii_parse_uint64+0x164>
     354:	cmp	r0, #0
     358:	beq	3c0 <coda_ascii_parse_uint64+0x164>
     35c:	cmp	r0, #1
     360:	blt	388 <coda_ascii_parse_uint64+0x12c>
     364:	ldrb	r2, [r1]
     368:	cmp	r2, #32
     36c:	cmpne	r2, #9
     370:	bne	388 <coda_ascii_parse_uint64+0x12c>
     374:	sub	r0, r0, #1
     378:	add	r1, r1, #1
     37c:	cmp	r0, #0
     380:	bgt	364 <coda_ascii_parse_uint64+0x108>
     384:	beq	3bc <coda_ascii_parse_uint64+0x160>
     388:	movw	r1, #0
     38c:	movt	r1, #0
     390:	b	3a8 <coda_ascii_parse_uint64+0x14c>
     394:	movw	r1, #0
     398:	movt	r1, #0
     39c:	b	3a8 <coda_ascii_parse_uint64+0x14c>
     3a0:	movw	r1, #0
     3a4:	movt	r1, #0
     3a8:	mvn	r0, #102	; 0x66
     3ac:	bl	0 <coda_set_error>
     3b0:	mvn	r0, #0
     3b4:	sub	sp, fp, #28
     3b8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
     3bc:	mov	r0, #0
     3c0:	strd	r8, [r6]
     3c4:	sub	r0, r3, r0
     3c8:	sub	sp, fp, #28
     3cc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

000003d0 <coda_ascii_parse_double>:
     3d0:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
     3d4:	add	fp, sp, #24
     3d8:	cmp	r1, #1
     3dc:	blt	4a8 <coda_ascii_parse_double+0xd8>
     3e0:	mov	r8, r2
     3e4:	mov	r9, r1
     3e8:	mov	r4, r1
     3ec:	ldrb	r1, [r0]
     3f0:	sub	r2, r1, #9
     3f4:	cmp	r2, #36	; 0x24
     3f8:	bhi	600 <coda_ascii_parse_double+0x230>
     3fc:	add	r6, pc, #0
     400:	ldr	pc, [r6, r2, lsl #2]
     404:	.word	0x00000498
     408:	.word	0x00000600
     40c:	.word	0x00000600
     410:	.word	0x00000600
     414:	.word	0x00000600
     418:	.word	0x00000600
     41c:	.word	0x00000600
     420:	.word	0x00000600
     424:	.word	0x00000600
     428:	.word	0x00000600
     42c:	.word	0x00000600
     430:	.word	0x00000600
     434:	.word	0x00000600
     438:	.word	0x00000600
     43c:	.word	0x00000600
     440:	.word	0x00000600
     444:	.word	0x00000600
     448:	.word	0x00000600
     44c:	.word	0x00000600
     450:	.word	0x00000600
     454:	.word	0x00000600
     458:	.word	0x00000600
     45c:	.word	0x00000600
     460:	.word	0x00000498
     464:	.word	0x00000600
     468:	.word	0x00000600
     46c:	.word	0x00000600
     470:	.word	0x00000600
     474:	.word	0x00000600
     478:	.word	0x00000600
     47c:	.word	0x00000600
     480:	.word	0x00000600
     484:	.word	0x00000600
     488:	.word	0x00000600
     48c:	.word	0x000004c0
     490:	.word	0x00000600
     494:	.word	0x000004c0
     498:	sub	r4, r4, #1
     49c:	add	r0, r0, #1
     4a0:	cmp	r4, #0
     4a4:	bgt	3ec <coda_ascii_parse_double+0x1c>
     4a8:	movw	r1, #0
     4ac:	movt	r1, #0
     4b0:	mvn	r0, #102	; 0x66
     4b4:	bl	0 <coda_set_error>
     4b8:	mvn	r0, #0
     4bc:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
     4c0:	sub	r1, r1, #45	; 0x2d
     4c4:	sub	r4, r4, #1
     4c8:	add	r0, r0, #1
     4cc:	clz	r1, r1
     4d0:	lsr	ip, r1, #5
     4d4:	mov	r1, #1
     4d8:	cmp	r4, #3
     4dc:	blt	610 <coda_ascii_parse_double+0x240>
     4e0:	ldrb	r2, [r0]
     4e4:	sub	r6, r2, #73	; 0x49
     4e8:	cmp	r6, #37	; 0x25
     4ec:	bhi	618 <coda_ascii_parse_double+0x248>
     4f0:	add	r5, pc, #0
     4f4:	ldr	pc, [r5, r6, lsl #2]
     4f8:	.word	0x000005bc
     4fc:	.word	0x00000618
     500:	.word	0x00000618
     504:	.word	0x00000618
     508:	.word	0x00000618
     50c:	.word	0x00000590
     510:	.word	0x00000618
     514:	.word	0x00000618
     518:	.word	0x00000618
     51c:	.word	0x00000618
     520:	.word	0x00000618
     524:	.word	0x00000618
     528:	.word	0x00000618
     52c:	.word	0x00000618
     530:	.word	0x00000618
     534:	.word	0x00000618
     538:	.word	0x00000618
     53c:	.word	0x00000618
     540:	.word	0x00000618
     544:	.word	0x00000618
     548:	.word	0x00000618
     54c:	.word	0x00000618
     550:	.word	0x00000618
     554:	.word	0x00000618
     558:	.word	0x00000618
     55c:	.word	0x00000618
     560:	.word	0x00000618
     564:	.word	0x00000618
     568:	.word	0x00000618
     56c:	.word	0x00000618
     570:	.word	0x00000618
     574:	.word	0x00000618
     578:	.word	0x000005bc
     57c:	.word	0x00000618
     580:	.word	0x00000618
     584:	.word	0x00000618
     588:	.word	0x00000618
     58c:	.word	0x00000590
     590:	ldrb	r6, [r0, #1]
     594:	orr	r6, r6, #32
     598:	cmp	r6, #97	; 0x61
     59c:	bne	5b4 <coda_ascii_parse_double+0x1e4>
     5a0:	ldrb	r6, [r0, #2]
     5a4:	orr	r6, r6, #32
     5a8:	cmp	r6, #110	; 0x6e
     5ac:	cmpeq	r1, #0
     5b0:	beq	8b0 <coda_ascii_parse_double+0x4e0>
     5b4:	cmp	r2, #105	; 0x69
     5b8:	bne	618 <coda_ascii_parse_double+0x248>
     5bc:	ldrb	r1, [r0, #1]
     5c0:	orr	r1, r1, #32
     5c4:	cmp	r1, #110	; 0x6e
     5c8:	bne	618 <coda_ascii_parse_double+0x248>
     5cc:	ldrb	r1, [r0, #2]
     5d0:	orr	r1, r1, #32
     5d4:	cmp	r1, #102	; 0x66
     5d8:	bne	618 <coda_ascii_parse_double+0x248>
     5dc:	sub	r4, r4, #3
     5e0:	cmp	r3, #0
     5e4:	bne	5f0 <coda_ascii_parse_double+0x220>
     5e8:	cmp	r4, #0
     5ec:	bne	8c4 <coda_ascii_parse_double+0x4f4>
     5f0:	cmp	ip, #0
     5f4:	beq	8d0 <coda_ascii_parse_double+0x500>
     5f8:	bl	0 <coda_MinInf>
     5fc:	b	918 <coda_ascii_parse_double+0x548>
     600:	mov	r1, #0
     604:	mov	ip, #0
     608:	cmp	r4, #3
     60c:	bge	4e0 <coda_ascii_parse_double+0x110>
     610:	cmp	r4, #1
     614:	blt	4a8 <coda_ascii_parse_double+0xd8>
     618:	vmov.i32	d17, #0	; 0x00000000
     61c:	vmov.f64	d16, #36	; 0x41200000  10.0
     620:	mov	r6, #0
     624:	mov	r5, r0
     628:	ldrb	r2, [r0, r6]
     62c:	sub	r1, r2, #48	; 0x30
     630:	uxtb	r7, r1
     634:	cmp	r7, #9
     638:	bhi	670 <coda_ascii_parse_double+0x2a0>
     63c:	vmov	s0, r1
     640:	add	r6, r6, #1
     644:	add	r5, r5, #1
     648:	cmp	r4, r6
     64c:	vcvt.f64.s32	d18, s0
     650:	vmla.f64	d18, d17, d16
     654:	vmov.f64	d17, d18
     658:	bne	628 <coda_ascii_parse_double+0x258>
     65c:	add	r0, r0, r6
     660:	sub	r2, r4, r6
     664:	mov	r1, #0
     668:	vmov.f64	d17, d18
     66c:	b	72c <coda_ascii_parse_double+0x35c>
     670:	mov	r1, #0
     674:	cmp	r2, #46	; 0x2e
     678:	bne	6e4 <coda_ascii_parse_double+0x314>
     67c:	mvn	r2, r6
     680:	add	r2, r2, r4
     684:	cmp	r2, #1
     688:	blt	6f8 <coda_ascii_parse_double+0x328>
     68c:	mov	r1, #0
     690:	sub	r0, r5, r1
     694:	ldrb	r2, [r0, #1]
     698:	sub	r2, r2, #48	; 0x30
     69c:	uxtb	r7, r2
     6a0:	cmp	r7, #9
     6a4:	bhi	70c <coda_ascii_parse_double+0x33c>
     6a8:	vmov	s0, r2
     6ac:	add	r0, r4, r1
     6b0:	sub	r1, r1, #1
     6b4:	sub	r0, r0, #2
     6b8:	cmp	r0, r6
     6bc:	vcvt.f64.s32	d18, s0
     6c0:	vmla.f64	d18, d17, d16
     6c4:	vmov.f64	d17, d18
     6c8:	bne	690 <coda_ascii_parse_double+0x2c0>
     6cc:	sub	r2, r4, r6
     6d0:	sub	r0, r5, r1
     6d4:	add	r2, r2, r1
     6d8:	add	r0, r0, #1
     6dc:	sub	r2, r2, #1
     6e0:	b	668 <coda_ascii_parse_double+0x298>
     6e4:	add	r0, r0, r6
     6e8:	sub	r2, r4, r6
     6ec:	cmp	r6, #0
     6f0:	bne	72c <coda_ascii_parse_double+0x35c>
     6f4:	b	4a8 <coda_ascii_parse_double+0xd8>
     6f8:	add	r0, r0, r6
     6fc:	add	r0, r0, #1
     700:	cmp	r6, #0
     704:	bne	72c <coda_ascii_parse_double+0x35c>
     708:	b	4a8 <coda_ascii_parse_double+0xd8>
     70c:	sub	r2, r4, r6
     710:	sub	r7, r6, r1
     714:	add	r0, r0, #1
     718:	add	r2, r2, r1
     71c:	mov	r6, r7
     720:	sub	r2, r2, #1
     724:	cmp	r6, #0
     728:	beq	4a8 <coda_ascii_parse_double+0xd8>
     72c:	vneg.f64	d18, d17
     730:	cmp	ip, #0
     734:	vseleq.f64	d17, d17, d18
     738:	cmp	r2, #1
     73c:	blt	7ec <coda_ascii_parse_double+0x41c>
     740:	ldrb	r6, [r0]
     744:	sub	r7, r6, #100	; 0x64
     748:	cmp	r7, #2
     74c:	subcs	r7, r6, #68	; 0x44
     750:	cmpcs	r7, #1
     754:	bhi	7ec <coda_ascii_parse_double+0x41c>
     758:	sub	r6, r2, #1
     75c:	cmp	r6, #1
     760:	blt	87c <coda_ascii_parse_double+0x4ac>
     764:	add	r4, r0, #1
     768:	ldrb	r5, [r4]
     76c:	cmp	r5, #45	; 0x2d
     770:	movne	ip, #0
     774:	cmpne	r5, #43	; 0x2b
     778:	bne	798 <coda_ascii_parse_double+0x3c8>
     77c:	sub	r6, r2, #2
     780:	cmp	r6, #1
     784:	blt	87c <coda_ascii_parse_double+0x4ac>
     788:	add	r4, r0, #2
     78c:	sub	r0, r5, #45	; 0x2d
     790:	clz	r0, r0
     794:	lsr	ip, r0, #5
     798:	mov	r5, #0
     79c:	mov	r2, #0
     7a0:	ldrb	r0, [r4, r2]
     7a4:	sub	r7, r0, #48	; 0x30
     7a8:	uxtb	r7, r7
     7ac:	cmp	r7, #9
     7b0:	bhi	7d0 <coda_ascii_parse_double+0x400>
     7b4:	add	r7, r5, r5, lsl #2
     7b8:	add	r2, r2, #1
     7bc:	cmp	r6, r2
     7c0:	add	r0, r0, r7, lsl #1
     7c4:	sub	r5, r0, #48	; 0x30
     7c8:	bne	7a0 <coda_ascii_parse_double+0x3d0>
     7cc:	b	7d8 <coda_ascii_parse_double+0x408>
     7d0:	cmp	r2, #0
     7d4:	beq	87c <coda_ascii_parse_double+0x4ac>
     7d8:	cmp	ip, #0
     7dc:	add	r0, r4, r2
     7e0:	sub	r2, r6, r2
     7e4:	rsbne	r5, r5, #0
     7e8:	add	r1, r5, r1
     7ec:	cmp	r3, #0
     7f0:	bne	82c <coda_ascii_parse_double+0x45c>
     7f4:	cmp	r2, #0
     7f8:	beq	82c <coda_ascii_parse_double+0x45c>
     7fc:	cmp	r2, #1
     800:	blt	8c4 <coda_ascii_parse_double+0x4f4>
     804:	ldrb	r3, [r0]
     808:	cmp	r3, #32
     80c:	cmpne	r3, #9
     810:	bne	8c4 <coda_ascii_parse_double+0x4f4>
     814:	sub	r2, r2, #1
     818:	add	r0, r0, #1
     81c:	cmp	r2, #0
     820:	bgt	804 <coda_ascii_parse_double+0x434>
     824:	bne	8c4 <coda_ascii_parse_double+0x4f4>
     828:	mov	r2, #0
     82c:	cmp	r1, #0
     830:	beq	908 <coda_ascii_parse_double+0x538>
     834:	bmi	888 <coda_ascii_parse_double+0x4b8>
     838:	vmov.f64	d18, #112	; 0x3f800000  1.0
     83c:	ands	r3, r1, #3
     840:	sub	r0, r1, #1
     844:	beq	858 <coda_ascii_parse_double+0x488>
     848:	vmul.f64	d18, d18, d16
     84c:	subs	r3, r3, #1
     850:	sub	r1, r1, #1
     854:	bne	848 <coda_ascii_parse_double+0x478>
     858:	cmp	r0, #3
     85c:	bcc	904 <coda_ascii_parse_double+0x534>
     860:	vmul.f64	d18, d18, d16
     864:	subs	r1, r1, #4
     868:	vmul.f64	d18, d18, d16
     86c:	vmul.f64	d18, d18, d16
     870:	vmul.f64	d18, d18, d16
     874:	bne	860 <coda_ascii_parse_double+0x490>
     878:	b	904 <coda_ascii_parse_double+0x534>
     87c:	movw	r1, #0
     880:	movt	r1, #0
     884:	b	4b0 <coda_ascii_parse_double+0xe0>
     888:	vmov.f64	d18, #112	; 0x3f800000  1.0
     88c:	rsb	r0, r1, #0
     890:	ands	r3, r0, #3
     894:	beq	8d8 <coda_ascii_parse_double+0x508>
     898:	mov	r0, r1
     89c:	vmul.f64	d18, d18, d16
     8a0:	subs	r3, r3, #1
     8a4:	add	r0, r0, #1
     8a8:	bne	89c <coda_ascii_parse_double+0x4cc>
     8ac:	b	8dc <coda_ascii_parse_double+0x50c>
     8b0:	sub	r4, r4, #3
     8b4:	cmp	r3, #0
     8b8:	bne	914 <coda_ascii_parse_double+0x544>
     8bc:	cmp	r4, #0
     8c0:	beq	914 <coda_ascii_parse_double+0x544>
     8c4:	movw	r1, #0
     8c8:	movt	r1, #0
     8cc:	b	4b0 <coda_ascii_parse_double+0xe0>
     8d0:	bl	0 <coda_PlusInf>
     8d4:	b	918 <coda_ascii_parse_double+0x548>
     8d8:	mov	r0, r1
     8dc:	cmn	r1, #4
     8e0:	bhi	8fc <coda_ascii_parse_double+0x52c>
     8e4:	vmul.f64	d18, d18, d16
     8e8:	adds	r0, r0, #4
     8ec:	vmul.f64	d18, d18, d16
     8f0:	vmul.f64	d18, d18, d16
     8f4:	vmul.f64	d18, d18, d16
     8f8:	bne	8e4 <coda_ascii_parse_double+0x514>
     8fc:	vmov.f64	d16, #112	; 0x3f800000  1.0
     900:	vdiv.f64	d18, d16, d18
     904:	vmul.f64	d17, d17, d18
     908:	sub	r0, r9, r2
     90c:	vstr	d17, [r8]
     910:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
     914:	bl	0 <coda_NaN>
     918:	sub	r0, r9, r4
     91c:	vstr	d0, [r8]
     920:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}

00000924 <coda_ascii_cursor_set_asciilines>:
     924:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
     928:	add	fp, sp, #24
     92c:	mov	r5, r0
     930:	ldr	r0, [r1, #68]	; 0x44
     934:	mov	r6, r1
     938:	cmp	r0, #0
     93c:	beq	974 <coda_ascii_cursor_set_asciilines+0x50>
     940:	ldr	r7, [r6, #76]	; 0x4c
     944:	cmp	r7, #0
     948:	beq	98c <coda_ascii_cursor_set_asciilines+0x68>
     94c:	mov	r4, #0
     950:	mvn	r0, #0
     954:	mov	r1, #1
     958:	str	r6, [r5]
     95c:	stmib	r5, {r1, r7}
     960:	str	r0, [r5, #12]
     964:	str	r4, [r5, #16]
     968:	str	r4, [r5, #20]
     96c:	mov	r0, r4
     970:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
     974:	mov	r0, r6
     978:	bl	0 <coda_ascii_init_asciilines>
     97c:	mvn	r4, #0
     980:	cmp	r0, #0
     984:	bne	9bc <coda_ascii_cursor_set_asciilines+0x98>
     988:	b	940 <coda_ascii_cursor_set_asciilines+0x1c>
     98c:	mov	r0, #0
     990:	bl	0 <coda_type_array_new>
     994:	mvn	r4, #0
     998:	cmp	r0, #0
     99c:	beq	9bc <coda_ascii_cursor_set_asciilines+0x98>
     9a0:	ldr	r1, [r6, #64]	; 0x40
     9a4:	mov	r7, r0
     9a8:	bl	0 <coda_type_array_add_fixed_dimension>
     9ac:	cmp	r0, #0
     9b0:	beq	9c4 <coda_ascii_cursor_set_asciilines+0xa0>
     9b4:	mov	r0, r7
     9b8:	bl	0 <coda_type_release>
     9bc:	mov	r0, r4
     9c0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
     9c4:	mov	r0, #0
     9c8:	bl	0 <coda_type_text_new>
     9cc:	cmp	r0, #0
     9d0:	beq	9b4 <coda_ascii_cursor_set_asciilines+0x90>
     9d4:	mov	r1, #2
     9d8:	mov	r8, r0
     9dc:	bl	0 <coda_type_text_set_special_text_type>
     9e0:	mov	r0, r7
     9e4:	mov	r1, r8
     9e8:	bl	0 <coda_type_array_set_base_type>
     9ec:	cmp	r0, #0
     9f0:	beq	a04 <coda_ascii_cursor_set_asciilines+0xe0>
     9f4:	mov	r0, r7
     9f8:	bl	0 <coda_type_release>
     9fc:	mov	r0, r8
     a00:	b	9b8 <coda_ascii_cursor_set_asciilines+0x94>
     a04:	str	r7, [r6, #76]	; 0x4c
     a08:	b	94c <coda_ascii_cursor_set_asciilines+0x28>

00000a0c <coda_ascii_cursor_get_string_length>:
     a0c:	push	{r4, sl, fp, lr}
     a10:	add	fp, sp, #8
     a14:	sub	sp, sp, #8
     a18:	mov	r4, r1
     a1c:	mov	r1, sp
     a20:	bl	a60 <coda_ascii_cursor_get_bit_size>
     a24:	mov	r1, r0
     a28:	mvn	r0, #0
     a2c:	cmp	r1, #0
     a30:	beq	a3c <coda_ascii_cursor_get_string_length+0x30>
     a34:	sub	sp, fp, #8
     a38:	pop	{r4, sl, fp, pc}
     a3c:	ldm	sp, {r0, r1}
     a40:	cmp	r1, #0
     a44:	lsr	r0, r0, #3
     a48:	orr	r0, r0, r1, lsl #29
     a4c:	mvnmi	r0, #0
     a50:	str	r0, [r4]
     a54:	mov	r0, #0
     a58:	sub	sp, fp, #8
     a5c:	pop	{r4, sl, fp, pc}

00000a60 <coda_ascii_cursor_get_bit_size>:
     a60:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
     a64:	add	fp, sp, #28
     a68:	sub	sp, sp, #620	; 0x26c
     a6c:	mov	r9, r0
     a70:	ldr	r0, [r0, #4]
     a74:	mov	r4, r1
     a78:	sub	r0, r0, #1
     a7c:	add	r0, r9, r0, lsl #4
     a80:	ldr	sl, [r0, #8]
     a84:	ldr	r1, [sl]
     a88:	cmp	r1, #99	; 0x63
     a8c:	ldrhi	sl, [sl, #4]
     a90:	mov	r6, sl
     a94:	ldr	r2, [r6, #24]!
     a98:	ldr	r3, [r6, #4]
     a9c:	cmp	r3, #0
     aa0:	bmi	ab0 <coda_ascii_cursor_get_bit_size+0x50>
     aa4:	strd	r2, [r4]
     aa8:	mov	r7, #0
     aac:	b	af8 <coda_ascii_cursor_get_bit_size+0x98>
     ab0:	ldr	r1, [sl, #8]
     ab4:	cmp	r1, #1
     ab8:	bhi	ad0 <coda_ascii_cursor_get_bit_size+0x70>
     abc:	mov	r0, r9
     ac0:	mov	r1, r4
     ac4:	bl	0 <coda_ascbin_cursor_get_bit_size>
     ac8:	mov	r7, r0
     acc:	b	af8 <coda_ascii_cursor_get_bit_size+0x98>
     ad0:	ldr	r8, [r0, #16]
     ad4:	ldr	r5, [r0, #20]
     ad8:	sub	r1, fp, #40	; 0x28
     adc:	mov	r0, r9
     ae0:	mvn	r2, #0
     ae4:	mvn	r3, #0
     ae8:	bl	15d4 <get_bit_size_boundary>
     aec:	mvn	r7, #0
     af0:	cmp	r0, #0
     af4:	beq	b04 <coda_ascii_cursor_get_bit_size+0xa4>
     af8:	mov	r0, r7
     afc:	sub	sp, fp, #28
     b00:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
     b04:	ldr	r2, [sl, #8]
     b08:	sub	r0, r2, #2
     b0c:	cmp	r0, #2
     b10:	bcc	b58 <coda_ascii_cursor_get_bit_size+0xf8>
     b14:	cmp	r2, #4
     b18:	beq	bb8 <coda_ascii_cursor_get_bit_size+0x158>
     b1c:	mvn	r1, #0
     b20:	cmp	r2, #6
     b24:	bne	cd0 <coda_ascii_cursor_get_bit_size+0x270>
     b28:	ldr	r0, [sl, #40]	; 0x28
     b2c:	cmp	r0, #2
     b30:	bne	cd8 <coda_ascii_cursor_get_bit_size+0x278>
     b34:	ldr	r0, [sl, #44]	; 0x2c
     b38:	ldr	r1, [r0, #8]
     b3c:	cmp	r1, #4
     b40:	bne	1558 <coda_ascii_cursor_get_bit_size+0xaf8>
     b44:	ldr	r0, [r0, #44]	; 0x2c
     b48:	mvn	r1, #0
     b4c:	cmp	r0, #0
     b50:	bne	ccc <coda_ascii_cursor_get_bit_size+0x26c>
     b54:	b	bd4 <coda_ascii_cursor_get_bit_size+0x174>
     b58:	ldr	r7, [sl, #52]	; 0x34
     b5c:	cmp	r7, #0
     b60:	beq	be0 <coda_ascii_cursor_get_bit_size+0x180>
     b64:	ldr	r0, [fp, #-40]	; 0xffffffd8
     b68:	ldr	r1, [fp, #-36]	; 0xffffffdc
     b6c:	mov	r2, #64	; 0x40
     b70:	lsr	r3, r0, #3
     b74:	subs	r0, r0, #512	; 0x200
     b78:	sbcs	r0, r1, #0
     b7c:	lsr	r0, r8, #3
     b80:	orrlt	r2, r3, r1, lsl #29
     b84:	orr	r3, r0, r5, lsl #29
     b88:	ldr	r0, [r9]
     b8c:	mov	r8, r2
     b90:	ldr	r1, [r0, #48]	; 0x30
     b94:	cmp	r1, #0
     b98:	beq	bf8 <coda_ascii_cursor_get_bit_size+0x198>
     b9c:	add	r1, r1, r3
     ba0:	sub	r0, fp, #104	; 0x68
     ba4:	bl	0 <memcpy>
     ba8:	cmp	r7, #0
     bac:	bne	c20 <coda_ascii_cursor_get_bit_size+0x1c0>
     bb0:	mov	r1, r8
     bb4:	b	ccc <coda_ascii_cursor_get_bit_size+0x26c>
     bb8:	ldr	r0, [sl, #32]
     bbc:	cmp	r0, #0
     bc0:	bne	d20 <coda_ascii_cursor_get_bit_size+0x2c0>
     bc4:	ldr	r0, [sl, #44]	; 0x2c
     bc8:	mov	r7, #0
     bcc:	cmp	r0, #0
     bd0:	bne	b64 <coda_ascii_cursor_get_bit_size+0x104>
     bd4:	ldr	r0, [fp, #-40]	; 0xffffffd8
     bd8:	ldr	r1, [fp, #-36]	; 0xffffffdc
     bdc:	b	1028 <coda_ascii_cursor_get_bit_size+0x5c8>
     be0:	ldr	r0, [sl, #32]
     be4:	mvn	r1, #0
     be8:	cmp	r0, #0
     bec:	bne	ccc <coda_ascii_cursor_get_bit_size+0x26c>
     bf0:	mov	r7, #0
     bf4:	b	b64 <coda_ascii_cursor_get_bit_size+0x104>
     bf8:	ldr	r1, [r0, #16]
     bfc:	cmp	r1, #2
     c00:	bcs	1538 <coda_ascii_cursor_get_bit_size+0xad8>
     c04:	ldr	r0, [r0, #56]	; 0x38
     c08:	sub	r1, fp, #104	; 0x68
     c0c:	bl	0 <pread>
     c10:	cmn	r0, #1
     c14:	ble	1410 <coda_ascii_cursor_get_bit_size+0x9b0>
     c18:	cmp	r7, #0
     c1c:	beq	bb0 <coda_ascii_cursor_get_bit_size+0x150>
     c20:	str	r4, [sp, #12]
     c24:	ldr	r4, [r7, #8]
     c28:	mov	r1, r8
     c2c:	str	r7, [sp, #16]
     c30:	cmp	r4, #1
     c34:	blt	ca4 <coda_ascii_cursor_get_bit_size+0x244>
     c38:	ldr	r0, [sp, #16]
     c3c:	ldr	r5, [r0, #12]
     c40:	b	c58 <coda_ascii_cursor_get_bit_size+0x1f8>
     c44:	cmp	r1, #0
     c48:	beq	f54 <coda_ascii_cursor_get_bit_size+0x4f4>
     c4c:	add	r5, r5, #4
     c50:	subs	r4, r4, #1
     c54:	beq	ca4 <coda_ascii_cursor_get_bit_size+0x244>
     c58:	ldr	r0, [r5]
     c5c:	ldr	r7, [r0]
     c60:	cmp	r7, #0
     c64:	beq	c44 <coda_ascii_cursor_get_bit_size+0x1e4>
     c68:	cmp	r7, r1
     c6c:	bgt	c4c <coda_ascii_cursor_get_bit_size+0x1ec>
     c70:	ldr	r0, [r0, #4]
     c74:	sub	r1, fp, #104	; 0x68
     c78:	mov	r2, r7
     c7c:	bl	0 <bcmp>
     c80:	mov	r1, r8
     c84:	cmp	r0, #0
     c88:	bne	c4c <coda_ascii_cursor_get_bit_size+0x1ec>
     c8c:	sbfx	r1, r7, #28, #1
     c90:	ldr	r2, [sp, #12]
     c94:	lsl	r0, r7, #3
     c98:	strd	r0, [r2]
     c9c:	mov	r7, #0
     ca0:	b	af8 <coda_ascii_cursor_get_bit_size+0x98>
     ca4:	ldr	r0, [sp, #16]
     ca8:	ldr	r4, [sp, #12]
     cac:	mvn	r3, #0
     cb0:	ldm	r0, {r0, r5}
     cb4:	subs	r2, r3, r0
     cb8:	sbcs	r2, r3, r5
     cbc:	bge	ccc <coda_ascii_cursor_get_bit_size+0x26c>
     cc0:	stm	r4, {r0, r5}
     cc4:	mov	r7, #0
     cc8:	b	af8 <coda_ascii_cursor_get_bit_size+0x98>
     ccc:	ldr	r2, [sl, #8]
     cd0:	cmp	r2, #6
     cd4:	bne	d14 <coda_ascii_cursor_get_bit_size+0x2b4>
     cd8:	add	r6, sp, #24
     cdc:	mov	r1, r9
     ce0:	mov	r2, #520	; 0x208
     ce4:	mov	r0, r6
     ce8:	bl	0 <memcpy>
     cec:	mov	r0, r6
     cf0:	bl	0 <coda_cursor_use_base_type_of_special_type>
     cf4:	mvn	r7, #0
     cf8:	cmp	r0, #0
     cfc:	bne	af8 <coda_ascii_cursor_get_bit_size+0x98>
     d00:	add	r0, sp, #24
     d04:	mov	r1, r4
     d08:	bl	0 <coda_cursor_get_bit_size>
     d0c:	mov	r7, r0
     d10:	b	af8 <coda_ascii_cursor_get_bit_size+0x98>
     d14:	ldr	r0, [sl, #32]
     d18:	cmp	r0, #0
     d1c:	beq	d8c <coda_ascii_cursor_get_bit_size+0x32c>
     d20:	mov	r1, r9
     d24:	mov	r2, r4
     d28:	bl	0 <coda_expression_eval_integer>
     d2c:	cmp	r0, #0
     d30:	beq	d50 <coda_ascii_cursor_get_bit_size+0x2f0>
     d34:	movw	r0, #0
     d38:	movt	r0, #0
     d3c:	bl	0 <coda_add_error_message>
     d40:	mov	r0, r9
     d44:	bl	0 <coda_cursor_add_to_error_message>
     d48:	mvn	r7, #0
     d4c:	b	af8 <coda_ascii_cursor_get_bit_size+0x98>
     d50:	ldrd	r2, [r6]
     d54:	mvn	r1, #0
     d58:	subs	r0, r1, #7
     d5c:	sbc	r1, r1, #0
     d60:	eor	r1, r3, r1
     d64:	eor	r0, r2, r0
     d68:	orrs	r0, r0, r1
     d6c:	ldrd	r0, [r4]
     d70:	bne	e94 <coda_ascii_cursor_get_bit_size+0x434>
     d74:	lsl	r1, r1, #3
     d78:	lsl	r2, r0, #3
     d7c:	orr	r1, r1, r0, lsr #29
     d80:	str	r2, [r4]
     d84:	str	r1, [r4, #4]
     d88:	b	e98 <coda_ascii_cursor_get_bit_size+0x438>
     d8c:	sub	r0, r2, #2
     d90:	cmp	r0, #2
     d94:	bcs	ebc <coda_ascii_cursor_get_bit_size+0x45c>
     d98:	ldr	r0, [sl, #12]
     d9c:	cmp	r0, #9
     da0:	bhi	1588 <coda_ascii_cursor_get_bit_size+0xb28>
     da4:	mov	r3, #1
     da8:	mov	r2, #85	; 0x55
     dac:	tst	r2, r3, lsl r0
     db0:	bne	f68 <coda_ascii_cursor_get_bit_size+0x508>
     db4:	mov	r2, #170	; 0xaa
     db8:	tst	r2, r3, lsl r0
     dbc:	beq	f84 <coda_ascii_cursor_get_bit_size+0x524>
     dc0:	sub	r6, fp, #104	; 0x68
     dc4:	mov	r5, r1
     dc8:	mvn	r2, #0
     dcc:	cmp	r1, #1
     dd0:	blt	df0 <coda_ascii_cursor_get_bit_size+0x390>
     dd4:	ldrb	r0, [r6]
     dd8:	cmp	r0, #32
     ddc:	cmpne	r0, #9
     de0:	bne	df0 <coda_ascii_cursor_get_bit_size+0x390>
     de4:	subs	r5, r5, #1
     de8:	add	r6, r6, #1
     dec:	bne	dd4 <coda_ascii_cursor_get_bit_size+0x374>
     df0:	ldrb	r0, [r6]
     df4:	cmp	r0, #43	; 0x2b
     df8:	subeq	r5, r5, #1
     dfc:	cmp	r5, #1
     e00:	blt	1034 <coda_ascii_cursor_get_bit_size+0x5d4>
     e04:	cmp	r0, #43	; 0x2b
     e08:	mov	r9, #0
     e0c:	mov	sl, #0
     e10:	mov	r7, #0
     e14:	str	r4, [sp, #12]
     e18:	addeq	r6, r6, #1
     e1c:	ldrb	r0, [r6, r7]
     e20:	sub	r4, r0, #48	; 0x30
     e24:	uxtb	r0, r4
     e28:	cmp	r0, #9
     e2c:	bhi	1004 <coda_ascii_cursor_get_bit_size+0x5a4>
     e30:	subs	r0, r2, #1
     e34:	mov	r8, r1
     e38:	mvn	r1, #0
     e3c:	mov	r2, #10
     e40:	mov	r3, #0
     e44:	sbc	r1, r1, #0
     e48:	eor	r0, r4, r0
     e4c:	eor	r1, r1, r4, asr #31
     e50:	bl	0 <__aeabi_uldivmod>
     e54:	subs	r0, r0, r9
     e58:	sbcs	r0, r1, sl
     e5c:	bcc	1040 <coda_ascii_cursor_get_bit_size+0x5e0>
     e60:	mov	r0, #10
     e64:	add	r2, sl, sl, lsl #2
     e68:	add	r7, r7, #1
     e6c:	umull	r0, r1, r9, r0
     e70:	add	r1, r1, r2, lsl #1
     e74:	adds	r9, r0, r4
     e78:	mvn	r2, #0
     e7c:	adc	sl, r1, r4, asr #31
     e80:	cmp	r5, r7
     e84:	mov	r1, r8
     e88:	bne	e1c <coda_ascii_cursor_get_bit_size+0x3bc>
     e8c:	ldr	r4, [sp, #12]
     e90:	b	1010 <coda_ascii_cursor_get_bit_size+0x5b0>
     e94:	mov	r2, r0
     e98:	mov	r7, #0
     e9c:	cmn	r1, #1
     ea0:	bgt	af8 <coda_ascii_cursor_get_bit_size+0x98>
     ea4:	movw	r0, #65236	; 0xfed4
     ea8:	movw	r1, #0
     eac:	movt	r0, #65535	; 0xffff
     eb0:	movt	r1, #0
     eb4:	bl	0 <coda_set_error>
     eb8:	b	d40 <coda_ascii_cursor_get_bit_size+0x2e0>
     ebc:	cmp	r2, #4
     ec0:	bne	1570 <coda_ascii_cursor_get_bit_size+0xb10>
     ec4:	ldr	r1, [sl, #44]	; 0x2c
     ec8:	mov	r7, #0
     ecc:	cmp	r1, #4
     ed0:	bhi	af8 <coda_ascii_cursor_get_bit_size+0x98>
     ed4:	add	r0, pc, #0
     ed8:	ldr	pc, [r0, r1, lsl #2]
     edc:	.word	0x0000159c
     ee0:	.word	0x00000fa0
     ee4:	.word	0x00000ef0
     ee8:	.word	0x00000ef0
     eec:	.word	0x00000fdc
     ef0:	ldr	r0, [r9]
     ef4:	ldr	r2, [r0, #16]
     ef8:	cmp	r2, #0
     efc:	beq	1050 <coda_ascii_cursor_get_bit_size+0x5f0>
     f00:	ldr	r2, [r9, #4]
     f04:	mov	r3, r9
     f08:	ldr	r2, [r3, r2, lsl #4]!
     f0c:	tst	r2, #7
     f10:	bne	1064 <coda_ascii_cursor_get_bit_size+0x604>
     f14:	ldr	r3, [r3, #4]
     f18:	str	r4, [sp, #12]
     f1c:	lsr	r2, r2, #3
     f20:	mov	r6, #0
     f24:	ldr	r5, [r0, #12]
     f28:	orr	r7, r2, r3, lsl #29
     f2c:	ldr	r2, [r0, #8]
     f30:	str	r7, [sp, #16]
     f34:	subs	r8, r2, r7
     f38:	sbc	r4, r5, r3, asr #3
     f3c:	subs	r2, r8, #1
     f40:	sbcs	r2, r4, #0
     f44:	blt	12e0 <coda_ascii_cursor_get_bit_size+0x880>
     f48:	ldr	r5, [sp, #16]
     f4c:	mov	r7, #0
     f50:	b	1258 <coda_ascii_cursor_get_bit_size+0x7f8>
     f54:	ldr	r8, [sp, #12]
     f58:	mov	r7, #0
     f5c:	str	r7, [r8]
     f60:	str	r7, [r8, #4]
     f64:	b	af8 <coda_ascii_cursor_get_bit_size+0x98>
     f68:	sub	r0, fp, #104	; 0x68
     f6c:	add	r2, sp, #24
     f70:	mov	r3, #1
     f74:	bl	0 <coda_ascii_parse_int64>
     f78:	cmp	r0, #0
     f7c:	bpl	1020 <coda_ascii_cursor_get_bit_size+0x5c0>
     f80:	b	138c <coda_ascii_cursor_get_bit_size+0x92c>
     f84:	sub	r0, fp, #104	; 0x68
     f88:	add	r2, sp, #24
     f8c:	mov	r3, #1
     f90:	bl	3d0 <coda_ascii_parse_double>
     f94:	cmp	r0, #0
     f98:	bpl	1020 <coda_ascii_cursor_get_bit_size+0x5c0>
     f9c:	b	138c <coda_ascii_cursor_get_bit_size+0x92c>
     fa0:	ldr	r0, [r9]
     fa4:	ldr	r1, [r0, #16]
     fa8:	cmp	r1, #0
     fac:	bne	15bc <coda_ascii_cursor_get_bit_size+0xb5c>
     fb0:	ldr	r1, [r0, #60]	; 0x3c
     fb4:	sub	r2, r1, #1
     fb8:	cmp	r2, #2
     fbc:	bcc	1080 <coda_ascii_cursor_get_bit_size+0x620>
     fc0:	cmp	r1, #0
     fc4:	beq	12b8 <coda_ascii_cursor_get_bit_size+0x858>
     fc8:	cmp	r1, #3
     fcc:	bne	af8 <coda_ascii_cursor_get_bit_size+0x98>
     fd0:	mov	r7, #0
     fd4:	mov	r6, #16
     fd8:	b	1088 <coda_ascii_cursor_get_bit_size+0x628>
     fdc:	ldr	r0, [r9, #4]
     fe0:	mov	r1, r9
     fe4:	ldr	r0, [r1, r0, lsl #4]!
     fe8:	tst	r0, #7
     fec:	beq	1090 <coda_ascii_cursor_get_bit_size+0x630>
     ff0:	movw	r0, #65236	; 0xfed4
     ff4:	movw	r1, #0
     ff8:	movt	r0, #65535	; 0xffff
     ffc:	movt	r1, #0
    1000:	b	1074 <coda_ascii_cursor_get_bit_size+0x614>
    1004:	ldr	r4, [sp, #12]
    1008:	cmp	r7, #0
    100c:	beq	1034 <coda_ascii_cursor_get_bit_size+0x5d4>
    1010:	sub	r0, r5, r7
    1014:	sub	r0, r1, r0
    1018:	cmp	r0, #0
    101c:	bmi	138c <coda_ascii_cursor_get_bit_size+0x92c>
    1020:	sbfx	r1, r0, #28, #1
    1024:	lsl	r0, r0, #3
    1028:	strd	r0, [r4]
    102c:	mov	r7, #0
    1030:	b	af8 <coda_ascii_cursor_get_bit_size+0x98>
    1034:	movw	r1, #0
    1038:	movt	r1, #0
    103c:	b	1048 <coda_ascii_cursor_get_bit_size+0x5e8>
    1040:	movw	r1, #0
    1044:	movt	r1, #0
    1048:	mvn	r0, #102	; 0x66
    104c:	b	1074 <coda_ascii_cursor_get_bit_size+0x614>
    1050:	ldr	r1, [r9, #4]
    1054:	lsl	r1, r1, #4
    1058:	ldrb	r1, [r1, r9]
    105c:	tst	r1, #7
    1060:	beq	114c <coda_ascii_cursor_get_bit_size+0x6ec>
    1064:	movw	r0, #65236	; 0xfed4
    1068:	movw	r1, #0
    106c:	movt	r0, #65535	; 0xffff
    1070:	movt	r1, #0
    1074:	bl	0 <coda_set_error>
    1078:	mvn	r7, #0
    107c:	b	af8 <coda_ascii_cursor_get_bit_size+0x98>
    1080:	mov	r7, #0
    1084:	mov	r6, #8
    1088:	strd	r6, [r4]
    108c:	b	af8 <coda_ascii_cursor_get_bit_size+0x98>
    1090:	ldr	r1, [r1, #4]
    1094:	lsr	r0, r0, #3
    1098:	str	r4, [sp, #12]
    109c:	mov	r7, #0
    10a0:	mov	r6, #0
    10a4:	mov	sl, #0
    10a8:	orr	r4, r0, r1, lsl #29
    10ac:	ldr	r0, [r9]
    10b0:	ldrd	r2, [r0, #8]
    10b4:	subs	r5, r2, r4
    10b8:	sbc	r8, r3, r1, asr #3
    10bc:	subs	r1, r5, #1
    10c0:	sbcs	r1, r8, #0
    10c4:	blt	1134 <coda_ascii_cursor_get_bit_size+0x6d4>
    10c8:	ldr	r1, [r0, #48]	; 0x30
    10cc:	adds	r3, r6, r4
    10d0:	cmp	r1, #0
    10d4:	beq	10e4 <coda_ascii_cursor_get_bit_size+0x684>
    10d8:	ldrb	r0, [r1, r3]
    10dc:	strb	r0, [sp, #24]
    10e0:	b	110c <coda_ascii_cursor_get_bit_size+0x6ac>
    10e4:	ldr	r1, [r0, #16]
    10e8:	cmp	r1, #2
    10ec:	bcs	1538 <coda_ascii_cursor_get_bit_size+0xad8>
    10f0:	ldr	r0, [r0, #56]	; 0x38
    10f4:	add	r1, sp, #24
    10f8:	mov	r2, #1
    10fc:	bl	0 <pread>
    1100:	cmp	r0, #0
    1104:	bmi	1410 <coda_ascii_cursor_get_bit_size+0x9b0>
    1108:	ldrb	r0, [sp, #24]
    110c:	cmp	r0, #32
    1110:	cmpne	r0, #9
    1114:	bne	1134 <coda_ascii_cursor_get_bit_size+0x6d4>
    1118:	adds	r6, r6, #1
    111c:	adc	sl, sl, #0
    1120:	subs	r0, r6, r5
    1124:	sbcs	r0, sl, r8
    1128:	bge	1134 <coda_ascii_cursor_get_bit_size+0x6d4>
    112c:	ldr	r0, [r9]
    1130:	b	10c8 <coda_ascii_cursor_get_bit_size+0x668>
    1134:	ldr	r5, [sp, #12]
    1138:	lsl	r1, sl, #3
    113c:	lsl	r0, r6, #3
    1140:	orr	r1, r1, r6, lsr #29
    1144:	strd	r0, [r5]
    1148:	b	af8 <coda_ascii_cursor_get_bit_size+0x98>
    114c:	ldr	r1, [r0, #68]	; 0x44
    1150:	cmp	r1, #0
    1154:	beq	1330 <coda_ascii_cursor_get_bit_size+0x8d0>
    1158:	ldr	r1, [r0, #64]	; 0x40
    115c:	cmp	r1, #0
    1160:	beq	1348 <coda_ascii_cursor_get_bit_size+0x8e8>
    1164:	ldr	r2, [r9, #4]
    1168:	ldr	r5, [r0, #68]	; 0x44
    116c:	subs	r1, r1, #1
    1170:	mov	ip, r4
    1174:	mov	r7, #0
    1178:	str	r1, [sp, #16]
    117c:	ldr	r2, [r9, r2, lsl #4]!
    1180:	ldr	r3, [r9, #4]
    1184:	lsr	r2, r2, #3
    1188:	orr	r9, r2, r3, lsl #29
    118c:	asr	r8, r3, #3
    1190:	mov	r2, #0
    1194:	beq	11d8 <coda_ascii_cursor_get_bit_size+0x778>
    1198:	ldr	r1, [sp, #16]
    119c:	mov	r2, #0
    11a0:	mov	lr, #1
    11a4:	add	r4, r1, r2
    11a8:	add	r4, r4, r4, lsr #31
    11ac:	asr	r3, r4, #1
    11b0:	ldr	r3, [r5, r3, lsl #2]
    11b4:	subs	r6, r9, r3
    11b8:	sbcs	r3, r8, r3, asr #31
    11bc:	mov	r3, #0
    11c0:	movwlt	r3, #1
    11c4:	cmp	r3, #0
    11c8:	addeq	r2, lr, r4, asr #1
    11cc:	asrne	r1, r4, #1
    11d0:	cmp	r1, r2
    11d4:	bne	11a4 <coda_ascii_cursor_get_bit_size+0x744>
    11d8:	ldr	r1, [r5, r2, lsl #2]
    11dc:	subs	r3, r1, r9
    11e0:	rsc	r1, r8, r1, asr #31
    11e4:	lsl	r4, r3, #3
    11e8:	lsl	r1, r1, #3
    11ec:	orr	r5, r1, r3, lsr #29
    11f0:	strd	r4, [ip]
    11f4:	ldr	r1, [sl, #44]	; 0x2c
    11f8:	cmp	r1, #3
    11fc:	bne	af8 <coda_ascii_cursor_get_bit_size+0x98>
    1200:	ldr	r1, [sp, #16]
    1204:	cmp	r2, r1
    1208:	bne	1218 <coda_ascii_cursor_get_bit_size+0x7b8>
    120c:	ldr	r1, [r0, #72]	; 0x48
    1210:	cmp	r1, #0
    1214:	beq	af8 <coda_ascii_cursor_get_bit_size+0x98>
    1218:	subs	r2, r4, #8
    121c:	sbc	r3, r5, #0
    1220:	strd	r2, [ip]
    1224:	ldr	r0, [r0, #60]	; 0x3c
    1228:	cmp	r0, #3
    122c:	bne	af8 <coda_ascii_cursor_get_bit_size+0x98>
    1230:	subs	r0, r4, #16
    1234:	sbc	r1, r5, #0
    1238:	strd	r0, [ip]
    123c:	b	af8 <coda_ascii_cursor_get_bit_size+0x98>
    1240:	adds	r6, r6, #1
    1244:	adc	r7, r7, #0
    1248:	subs	r1, r6, r8
    124c:	sbcs	r1, r7, r4
    1250:	bge	12a8 <coda_ascii_cursor_get_bit_size+0x848>
    1254:	ldr	r0, [r9]
    1258:	ldr	r1, [r0, #48]	; 0x30
    125c:	adds	r3, r6, r5
    1260:	cmp	r1, #0
    1264:	beq	1274 <coda_ascii_cursor_get_bit_size+0x814>
    1268:	ldrb	r0, [r1, r3]
    126c:	strb	r0, [sp, #24]
    1270:	b	129c <coda_ascii_cursor_get_bit_size+0x83c>
    1274:	ldr	r1, [r0, #16]
    1278:	cmp	r1, #2
    127c:	bcs	1538 <coda_ascii_cursor_get_bit_size+0xad8>
    1280:	ldr	r0, [r0, #56]	; 0x38
    1284:	add	r1, sp, #24
    1288:	mov	r2, #1
    128c:	bl	0 <pread>
    1290:	cmp	r0, #0
    1294:	bmi	1410 <coda_ascii_cursor_get_bit_size+0x9b0>
    1298:	ldrb	r0, [sp, #24]
    129c:	cmp	r0, #10
    12a0:	cmpne	r0, #13
    12a4:	bne	1240 <coda_ascii_cursor_get_bit_size+0x7e0>
    12a8:	ldr	r1, [sl, #44]	; 0x2c
    12ac:	cmp	r1, #2
    12b0:	beq	12ec <coda_ascii_cursor_get_bit_size+0x88c>
    12b4:	b	13fc <coda_ascii_cursor_get_bit_size+0x99c>
    12b8:	ldr	r1, [r9, #4]
    12bc:	mov	r2, r9
    12c0:	ldr	r1, [r2, r1, lsl #4]!
    12c4:	tst	r1, #7
    12c8:	beq	1358 <coda_ascii_cursor_get_bit_size+0x8f8>
    12cc:	movw	r0, #65236	; 0xfed4
    12d0:	movw	r1, #0
    12d4:	movt	r0, #65535	; 0xffff
    12d8:	movt	r1, #0
    12dc:	b	1074 <coda_ascii_cursor_get_bit_size+0x614>
    12e0:	mov	r7, #0
    12e4:	cmp	r1, #2
    12e8:	bne	13fc <coda_ascii_cursor_get_bit_size+0x99c>
    12ec:	uxtb	r0, r0
    12f0:	cmp	r0, #13
    12f4:	bne	13f4 <coda_ascii_cursor_get_bit_size+0x994>
    12f8:	adds	sl, r6, #1
    12fc:	adc	r5, r7, #0
    1300:	subs	r0, sl, r8
    1304:	sbcs	r0, r5, r4
    1308:	bge	13f4 <coda_ascii_cursor_get_bit_size+0x994>
    130c:	ldr	r0, [sp, #16]
    1310:	adds	r3, sl, r0
    1314:	ldr	r0, [r9]
    1318:	ldr	r1, [r0, #48]	; 0x30
    131c:	cmp	r1, #0
    1320:	beq	13c0 <coda_ascii_cursor_get_bit_size+0x960>
    1324:	ldrb	r0, [r1, r3]
    1328:	strb	r0, [sp, #24]
    132c:	b	13e8 <coda_ascii_cursor_get_bit_size+0x988>
    1330:	bl	0 <coda_ascii_init_asciilines>
    1334:	mvn	r7, #0
    1338:	cmp	r0, #0
    133c:	bne	af8 <coda_ascii_cursor_get_bit_size+0x98>
    1340:	ldr	r0, [r9]
    1344:	b	1158 <coda_ascii_cursor_get_bit_size+0x6f8>
    1348:	movw	r1, #0
    134c:	mvn	r0, #300	; 0x12c
    1350:	movt	r1, #0
    1354:	b	1074 <coda_ascii_cursor_get_bit_size+0x614>
    1358:	ldr	r3, [r2, #4]
    135c:	mov	r7, #1
    1360:	mov	r2, #0
    1364:	lsr	r1, r1, #3
    1368:	add	r6, sp, #23
    136c:	mov	r5, r4
    1370:	str	r7, [sp]
    1374:	stmib	sp, {r2, r6}
    1378:	orr	r2, r1, r3, lsl #29
    137c:	asr	r3, r3, #3
    1380:	bl	24a0 <read_bytes>
    1384:	cmp	r0, #0
    1388:	beq	1394 <coda_ascii_cursor_get_bit_size+0x934>
    138c:	mvn	r7, #0
    1390:	b	af8 <coda_ascii_cursor_get_bit_size+0x98>
    1394:	ldrb	r0, [sp, #23]
    1398:	cmp	r0, #13
    139c:	beq	1438 <coda_ascii_cursor_get_bit_size+0x9d8>
    13a0:	cmp	r0, #10
    13a4:	bne	1488 <coda_ascii_cursor_get_bit_size+0xa28>
    13a8:	mov	r1, #0
    13ac:	mov	r0, #8
    13b0:	strd	r0, [r5]
    13b4:	mov	r1, #1
    13b8:	ldr	r0, [r9]
    13bc:	b	152c <coda_ascii_cursor_get_bit_size+0xacc>
    13c0:	ldr	r1, [r0, #16]
    13c4:	cmp	r1, #2
    13c8:	bcs	1538 <coda_ascii_cursor_get_bit_size+0xad8>
    13cc:	ldr	r0, [r0, #56]	; 0x38
    13d0:	add	r1, sp, #24
    13d4:	mov	r2, #1
    13d8:	bl	0 <pread>
    13dc:	cmp	r0, #0
    13e0:	bmi	1410 <coda_ascii_cursor_get_bit_size+0x9b0>
    13e4:	ldrb	r0, [sp, #24]
    13e8:	cmp	r0, #10
    13ec:	moveq	r6, sl
    13f0:	moveq	r7, r5
    13f4:	adds	r6, r6, #1
    13f8:	adc	r7, r7, #0
    13fc:	ldr	r2, [sp, #12]
    1400:	lsl	r1, r7, #3
    1404:	lsl	r0, r6, #3
    1408:	orr	r1, r1, r6, lsr #29
    140c:	b	c98 <coda_ascii_cursor_get_bit_size+0x238>
    1410:	bl	0 <__errno_location>
    1414:	ldr	r0, [r0]
    1418:	bl	0 <strerror>
    141c:	movw	r1, #0
    1420:	mov	r2, r0
    1424:	mvn	r0, #21
    1428:	movt	r1, #0
    142c:	bl	0 <coda_set_error>
    1430:	mvn	r7, #0
    1434:	b	af8 <coda_ascii_cursor_get_bit_size+0x98>
    1438:	ldrd	r0, [r9]
    143c:	mov	r2, r9
    1440:	ldr	r3, [r2, r1, lsl #4]!
    1444:	ldr	r4, [r0, #8]
    1448:	ldr	r2, [r2, #4]
    144c:	lsr	r1, r3, #3
    1450:	orr	ip, r1, r2, lsl #29
    1454:	ldr	r1, [r0, #12]
    1458:	subs	r7, r4, ip
    145c:	sbc	r1, r1, r2, asr #3
    1460:	rsbs	r7, r7, #1
    1464:	rscs	r7, r1, #0
    1468:	bge	1518 <coda_ascii_cursor_get_bit_size+0xab8>
    146c:	tst	r3, #7
    1470:	beq	14c8 <coda_ascii_cursor_get_bit_size+0xa68>
    1474:	movw	r0, #65236	; 0xfed4
    1478:	movw	r1, #0
    147c:	movt	r0, #65535	; 0xffff
    1480:	movt	r1, #0
    1484:	b	1074 <coda_ascii_cursor_get_bit_size+0x614>
    1488:	ldr	r0, [r9, #4]
    148c:	add	r4, sp, #24
    1490:	mov	r2, r4
    1494:	ldr	r0, [r9, r0, lsl #4]!
    1498:	ldr	r1, [r9, #4]
    149c:	lsr	r0, r0, #3
    14a0:	orr	r0, r0, r1, lsl #29
    14a4:	asr	r1, r1, #3
    14a8:	bl	0 <coda_str64>
    14ac:	movw	r0, #65236	; 0xfed4
    14b0:	movw	r1, #0
    14b4:	mov	r2, r4
    14b8:	movt	r0, #65535	; 0xffff
    14bc:	movt	r1, #0
    14c0:	bl	0 <coda_set_error>
    14c4:	b	138c <coda_ascii_cursor_get_bit_size+0x92c>
    14c8:	asr	r3, r2, #3
    14cc:	mov	r7, #1
    14d0:	mov	r2, #0
    14d4:	str	r7, [sp]
    14d8:	stmib	sp, {r2, r6}
    14dc:	adds	r2, ip, #1
    14e0:	adc	r3, r3, #0
    14e4:	bl	24a0 <read_bytes>
    14e8:	cmp	r0, #0
    14ec:	bne	138c <coda_ascii_cursor_get_bit_size+0x92c>
    14f0:	ldrb	r0, [sp, #23]
    14f4:	cmp	r0, #10
    14f8:	bne	1514 <coda_ascii_cursor_get_bit_size+0xab4>
    14fc:	mov	r1, #0
    1500:	mov	r0, #16
    1504:	strd	r0, [r5]
    1508:	mov	r1, #3
    150c:	ldr	r0, [r9]
    1510:	b	152c <coda_ascii_cursor_get_bit_size+0xacc>
    1514:	ldr	r0, [r9]
    1518:	mov	r2, #8
    151c:	mov	r1, #0
    1520:	str	r2, [r5]
    1524:	str	r1, [r5, #4]
    1528:	mov	r1, #2
    152c:	str	r1, [r0, #60]	; 0x3c
    1530:	mov	r7, #0
    1534:	b	af8 <coda_ascii_cursor_get_bit_size+0x98>
    1538:	movw	r0, #0
    153c:	movw	r1, #0
    1540:	movw	r3, #0
    1544:	mov	r2, #62	; 0x3e
    1548:	movt	r0, #0
    154c:	movt	r1, #0
    1550:	movt	r3, #0
    1554:	bl	0 <__assert_fail>
    1558:	movw	r0, #0
    155c:	movw	r1, #0
    1560:	movw	r3, #0
    1564:	movw	r2, #693	; 0x2b5
    1568:	movt	r0, #0
    156c:	b	15b0 <coda_ascii_cursor_get_bit_size+0xb50>
    1570:	movw	r0, #0
    1574:	movw	r1, #0
    1578:	movw	r3, #0
    157c:	mov	r2, #812	; 0x32c
    1580:	movt	r0, #0
    1584:	b	15b0 <coda_ascii_cursor_get_bit_size+0xb50>
    1588:	movw	r0, #0
    158c:	movw	r1, #0
    1590:	movw	r3, #0
    1594:	mov	r2, #800	; 0x320
    1598:	b	15ac <coda_ascii_cursor_get_bit_size+0xb4c>
    159c:	movw	r0, #0
    15a0:	movw	r1, #0
    15a4:	movw	r3, #0
    15a8:	movw	r2, #1030	; 0x406
    15ac:	movt	r0, #0
    15b0:	movt	r1, #0
    15b4:	movt	r3, #0
    15b8:	bl	0 <__assert_fail>
    15bc:	movw	r0, #0
    15c0:	movw	r1, #0
    15c4:	movw	r3, #0
    15c8:	mov	r2, #816	; 0x330
    15cc:	movt	r0, #0
    15d0:	b	15b0 <coda_ascii_cursor_get_bit_size+0xb50>

000015d4 <get_bit_size_boundary>:
    15d4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    15d8:	add	fp, sp, #28
    15dc:	sub	sp, sp, #100	; 0x64
    15e0:	rsbs	r7, r2, #0
    15e4:	ldrd	r8, [r0]
    15e8:	mov	r5, #0
    15ec:	rscs	r7, r3, #0
    15f0:	movwlt	r5, #1
    15f4:	cmp	r5, #0
    15f8:	moveq	r3, r5
    15fc:	movne	r5, r2
    1600:	mov	r2, r0
    1604:	ldr	sl, [r2, r9, lsl #4]!
    1608:	ldr	r7, [r2, #4]
    160c:	ldr	r2, [r8, #16]
    1610:	cmp	r2, #2
    1614:	bcs	1650 <get_bit_size_boundary+0x7c>
    1618:	ldr	r2, [r8, #48]	; 0x30
    161c:	add	r0, r8, #40	; 0x28
    1620:	cmp	r2, #0
    1624:	addeq	r0, r8, #8
    1628:	adds	r5, sl, r5
    162c:	ldm	r0, {r2, r9}
    1630:	lsl	r0, r9, #3
    1634:	adc	r3, r7, r3
    1638:	orr	r0, r0, r2, lsr #29
    163c:	subs	r5, r5, r2, lsl #3
    1640:	sbcs	r3, r3, r0
    1644:	bge	178c <get_bit_size_boundary+0x1b8>
    1648:	lsl	r4, r2, #3
    164c:	b	181c <get_bit_size_boundary+0x248>
    1650:	sub	r4, r0, #8
    1654:	mov	r2, r9
    1658:	sub	r9, r9, #1
    165c:	cmp	r9, #1
    1660:	blt	1674 <get_bit_size_boundary+0xa0>
    1664:	ldr	r6, [r4, r2, lsl #4]
    1668:	ldr	r6, [r6]
    166c:	cmp	r6, #2
    1670:	bcc	1654 <get_bit_size_boundary+0x80>
    1674:	cmp	r2, #1
    1678:	blt	1834 <get_bit_size_boundary+0x260>
    167c:	add	r0, r0, r2, lsl #4
    1680:	ldr	r0, [r0, #-8]
    1684:	ldr	r2, [r0]
    1688:	cmp	r2, #100	; 0x64
    168c:	ldreq	r2, [r0, #8]
    1690:	cmpeq	r2, #2
    1694:	bne	1834 <get_bit_size_boundary+0x260>
    1698:	ldr	r9, [r0, #28]
    169c:	ldr	r2, [r0, #16]
    16a0:	ldr	r0, [r0, #24]
    16a4:	lsl	r6, r9, #3
    16a8:	subs	sl, sl, r0, lsl #3
    16ac:	lsl	r4, r2, #3
    16b0:	orr	r6, r6, r0, lsr #29
    16b4:	sbfx	r0, r2, #28, #1
    16b8:	sbcs	r7, r7, r6
    16bc:	bmi	17a0 <get_bit_size_boundary+0x1cc>
    16c0:	subs	r2, r4, sl
    16c4:	sbcs	r0, r0, r7
    16c8:	blt	17a0 <get_bit_size_boundary+0x1cc>
    16cc:	adds	r0, sl, r5
    16d0:	adc	r2, r7, r3
    16d4:	subs	r0, r4, r0
    16d8:	rscs	r0, r2, r4, asr #31
    16dc:	bge	1818 <get_bit_size_boundary+0x244>
    16e0:	lsr	r0, r5, #3
    16e4:	sub	r8, fp, #58	; 0x3a
    16e8:	lsr	r1, r3, #3
    16ec:	orr	r0, r0, r3, lsl #29
    16f0:	mov	r2, r8
    16f4:	bl	0 <coda_str64>
    16f8:	ands	r5, r5, #7
    16fc:	beq	171c <get_bit_size_boundary+0x148>
    1700:	mov	r0, r8
    1704:	bl	0 <strlen>
    1708:	movw	r1, #0
    170c:	add	r0, r8, r0
    1710:	mov	r2, r5
    1714:	movt	r1, #0
    1718:	bl	0 <sprintf>
    171c:	lsr	r0, sl, #3
    1720:	lsr	r1, r7, #3
    1724:	orr	r0, r0, r7, lsl #29
    1728:	add	r7, sp, #40	; 0x28
    172c:	mov	r2, r7
    1730:	bl	0 <coda_str64>
    1734:	ands	r5, sl, #7
    1738:	beq	1758 <get_bit_size_boundary+0x184>
    173c:	mov	r0, r7
    1740:	bl	0 <strlen>
    1744:	movw	r1, #0
    1748:	add	r0, r7, r0
    174c:	mov	r2, r5
    1750:	movt	r1, #0
    1754:	bl	0 <sprintf>
    1758:	asr	r1, r4, #31
    175c:	lsr	r0, r4, #3
    1760:	add	r4, sp, #10
    1764:	orr	r0, r0, r1, lsl #29
    1768:	mov	r2, r4
    176c:	bl	0 <coda_str64>
    1770:	movw	r1, #0
    1774:	sub	r2, fp, #58	; 0x3a
    1778:	add	r3, sp, #40	; 0x28
    177c:	mvn	r0, #300	; 0x12c
    1780:	str	r4, [sp]
    1784:	movt	r1, #0
    1788:	b	1808 <get_bit_size_boundary+0x234>
    178c:	movw	r1, #0
    1790:	mvn	r0, #300	; 0x12c
    1794:	movt	r1, #0
    1798:	bl	0 <coda_set_error>
    179c:	b	180c <get_bit_size_boundary+0x238>
    17a0:	lsr	r0, sl, #3
    17a4:	asr	r1, r7, #3
    17a8:	orr	r0, r0, r7, lsl #29
    17ac:	sub	r7, fp, #58	; 0x3a
    17b0:	mov	r2, r7
    17b4:	bl	0 <coda_str64>
    17b8:	ands	r5, sl, #7
    17bc:	beq	17dc <get_bit_size_boundary+0x208>
    17c0:	mov	r0, r7
    17c4:	bl	0 <strlen>
    17c8:	movw	r1, #0
    17cc:	add	r0, r7, r0
    17d0:	mov	r2, r5
    17d4:	movt	r1, #0
    17d8:	bl	0 <sprintf>
    17dc:	asr	r1, r4, #31
    17e0:	lsr	r0, r4, #3
    17e4:	add	r4, sp, #40	; 0x28
    17e8:	orr	r0, r0, r1, lsl #29
    17ec:	mov	r2, r4
    17f0:	bl	0 <coda_str64>
    17f4:	movw	r1, #0
    17f8:	sub	r2, fp, #58	; 0x3a
    17fc:	mvn	r0, #300	; 0x12c
    1800:	mov	r3, r4
    1804:	movt	r1, #0
    1808:	bl	0 <coda_set_error>
    180c:	mvn	r0, #0
    1810:	sub	sp, fp, #28
    1814:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1818:	asr	r0, r4, #31
    181c:	subs	r2, r4, sl
    1820:	sbc	r3, r0, r7
    1824:	mov	r0, #0
    1828:	strd	r2, [r1]
    182c:	sub	sp, fp, #28
    1830:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1834:	movw	r0, #0
    1838:	movw	r1, #0
    183c:	movw	r3, #0
    1840:	mov	r2, #122	; 0x7a
    1844:	movt	r0, #0
    1848:	movt	r1, #0
    184c:	movt	r3, #0
    1850:	bl	0 <__assert_fail>

00001854 <coda_ascii_cursor_read_bytes>:
    1854:	push	{r4, r5, fp, lr}
    1858:	add	fp, sp, #8
    185c:	sub	sp, sp, #16
    1860:	ldr	ip, [r0, #4]
    1864:	mov	lr, r0
    1868:	ldr	ip, [lr, ip, lsl #4]!
    186c:	tst	ip, #7
    1870:	beq	1894 <coda_ascii_cursor_read_bytes+0x40>
    1874:	movw	r0, #65236	; 0xfed4
    1878:	movw	r1, #0
    187c:	movt	r0, #65535	; 0xffff
    1880:	movt	r1, #0
    1884:	bl	0 <coda_set_error>
    1888:	mvn	r0, #0
    188c:	sub	sp, fp, #8
    1890:	pop	{r4, r5, fp, pc}
    1894:	ldr	lr, [lr, #4]
    1898:	ldr	r5, [fp, #8]
    189c:	ldr	r0, [r0]
    18a0:	str	r1, [sp, #8]
    18a4:	lsr	r1, ip, #3
    18a8:	ldr	r4, [fp, #12]
    18ac:	orr	r1, r1, lr, lsl #29
    18b0:	str	r5, [sp]
    18b4:	asr	r5, lr, #3
    18b8:	str	r4, [sp, #4]
    18bc:	adds	r2, r1, r2
    18c0:	adc	r3, r5, r3
    18c4:	bl	24a0 <read_bytes>
    18c8:	sub	sp, fp, #8
    18cc:	pop	{r4, r5, fp, pc}

000018d0 <coda_ascii_cursor_get_num_elements>:
    18d0:	ldr	r2, [r0, #4]
    18d4:	add	r2, r0, r2, lsl #4
    18d8:	ldr	r2, [r2, #-8]
    18dc:	ldr	r3, [r2]
    18e0:	cmp	r3, #99	; 0x63
    18e4:	ldrhi	r2, [r2, #4]
    18e8:	ldr	r2, [r2, #8]
    18ec:	cmp	r2, #1
    18f0:	movhi	r0, #1
    18f4:	strhi	r0, [r1]
    18f8:	movhi	r0, #0
    18fc:	bxhi	lr
    1900:	b	0 <coda_ascbin_cursor_get_num_elements>

00001904 <coda_ascii_cursor_read_int64>:
    1904:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1908:	add	fp, sp, #28
    190c:	sub	sp, sp, #84	; 0x54
    1910:	mov	r6, r0
    1914:	ldr	r0, [r0, #4]
    1918:	mov	r7, r1
    191c:	sub	r0, r0, #1
    1920:	add	r0, r6, r0, lsl #4
    1924:	ldr	r5, [r0, #8]
    1928:	ldrd	r8, [r0, #16]
    192c:	mov	r0, r6
    1930:	ldr	r1, [r5]
    1934:	cmp	r1, #99	; 0x63
    1938:	sub	r1, fp, #40	; 0x28
    193c:	ldrhi	r5, [r5, #4]
    1940:	mov	r4, r5
    1944:	ldr	r2, [r4, #24]!
    1948:	ldr	r3, [r4, #4]
    194c:	bl	15d4 <get_bit_size_boundary>
    1950:	mvn	sl, #0
    1954:	cmp	r0, #0
    1958:	bne	1adc <coda_ascii_cursor_read_int64+0x1d8>
    195c:	tst	r8, #7
    1960:	beq	1978 <coda_ascii_cursor_read_int64+0x74>
    1964:	movw	r1, #0
    1968:	mvn	r0, #21
    196c:	movt	r1, #0
    1970:	bl	0 <coda_set_error>
    1974:	b	1adc <coda_ascii_cursor_read_int64+0x1d8>
    1978:	ldr	r0, [r4, #4]
    197c:	cmp	r0, #0
    1980:	bmi	19bc <coda_ascii_cursor_read_int64+0xb8>
    1984:	ldr	r1, [r4]
    1988:	mov	r4, #0
    198c:	lsr	r1, r1, #3
    1990:	orr	r2, r1, r0, lsl #29
    1994:	cmp	r2, #65	; 0x41
    1998:	blt	19e0 <coda_ascii_cursor_read_int64+0xdc>
    199c:	movw	r0, #0
    19a0:	movw	r1, #0
    19a4:	movw	r3, #0
    19a8:	movw	r2, #1076	; 0x434
    19ac:	movt	r0, #0
    19b0:	movt	r1, #0
    19b4:	movt	r3, #0
    19b8:	bl	0 <__assert_fail>
    19bc:	ldr	r0, [fp, #-40]	; 0xffffffd8
    19c0:	ldr	r1, [fp, #-36]	; 0xffffffdc
    19c4:	movw	r3, #511	; 0x1ff
    19c8:	mov	r2, #64	; 0x40
    19cc:	mov	r4, #1
    19d0:	subs	r3, r3, r0
    19d4:	rscs	r3, r1, #0
    19d8:	lsrge	r0, r0, #3
    19dc:	orrge	r2, r0, r1, lsl #29
    19e0:	lsr	r0, r8, #3
    19e4:	mov	r8, r2
    19e8:	orr	r3, r0, r9, lsl #29
    19ec:	ldr	r0, [r6]
    19f0:	ldr	r1, [r0, #48]	; 0x30
    19f4:	stm	sp, {r4, r7}
    19f8:	cmp	r1, #0
    19fc:	beq	1a10 <coda_ascii_cursor_read_int64+0x10c>
    1a00:	add	r1, r1, r3
    1a04:	add	r0, sp, #8
    1a08:	bl	0 <memcpy>
    1a0c:	b	1a30 <coda_ascii_cursor_read_int64+0x12c>
    1a10:	ldr	r1, [r0, #16]
    1a14:	cmp	r1, #2
    1a18:	bcs	1b20 <coda_ascii_cursor_read_int64+0x21c>
    1a1c:	ldr	r0, [r0, #56]	; 0x38
    1a20:	add	r1, sp, #8
    1a24:	bl	0 <pread>
    1a28:	cmn	r0, #1
    1a2c:	ble	1ae8 <coda_ascii_cursor_read_int64+0x1e4>
    1a30:	ldr	r0, [r5, #52]	; 0x34
    1a34:	mov	r1, r8
    1a38:	cmp	r0, #0
    1a3c:	beq	1ac8 <coda_ascii_cursor_read_int64+0x1c4>
    1a40:	ldr	r5, [r0, #8]
    1a44:	cmp	r5, #1
    1a48:	blt	1ac8 <coda_ascii_cursor_read_int64+0x1c4>
    1a4c:	ldr	r7, [r0, #12]
    1a50:	add	r9, sp, #8
    1a54:	b	1a6c <coda_ascii_cursor_read_int64+0x168>
    1a58:	cmp	r1, #0
    1a5c:	beq	1b0c <coda_ascii_cursor_read_int64+0x208>
    1a60:	add	r7, r7, #4
    1a64:	subs	r5, r5, #1
    1a68:	beq	1ac8 <coda_ascii_cursor_read_int64+0x1c4>
    1a6c:	ldr	r4, [r7]
    1a70:	ldr	r6, [r4]
    1a74:	cmp	r6, #0
    1a78:	beq	1a58 <coda_ascii_cursor_read_int64+0x154>
    1a7c:	cmp	r6, r1
    1a80:	bgt	1a60 <coda_ascii_cursor_read_int64+0x15c>
    1a84:	ldr	r0, [r4, #4]
    1a88:	mov	r1, r9
    1a8c:	mov	r2, r6
    1a90:	bl	0 <bcmp>
    1a94:	mov	r1, r8
    1a98:	cmp	r0, #0
    1a9c:	bne	1a60 <coda_ascii_cursor_read_int64+0x15c>
    1aa0:	ldr	r0, [sp]
    1aa4:	cmp	r0, #0
    1aa8:	bne	1b0c <coda_ascii_cursor_read_int64+0x208>
    1aac:	cmp	r6, r1
    1ab0:	beq	1b0c <coda_ascii_cursor_read_int64+0x208>
    1ab4:	movw	r1, #0
    1ab8:	mvn	r0, #102	; 0x66
    1abc:	movt	r1, #0
    1ac0:	bl	0 <coda_set_error>
    1ac4:	b	1adc <coda_ascii_cursor_read_int64+0x1d8>
    1ac8:	ldr	r2, [sp, #4]
    1acc:	ldr	r3, [sp]
    1ad0:	add	r0, sp, #8
    1ad4:	bl	0 <coda_ascii_parse_int64>
    1ad8:	asr	sl, r0, #31
    1adc:	mov	r0, sl
    1ae0:	sub	sp, fp, #28
    1ae4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1ae8:	bl	0 <__errno_location>
    1aec:	ldr	r0, [r0]
    1af0:	bl	0 <strerror>
    1af4:	movw	r1, #0
    1af8:	mov	r2, r0
    1afc:	mvn	r0, #21
    1b00:	movt	r1, #0
    1b04:	bl	0 <coda_set_error>
    1b08:	b	1adc <coda_ascii_cursor_read_int64+0x1d8>
    1b0c:	ldrd	r0, [r4, #8]
    1b10:	ldr	r2, [sp, #4]
    1b14:	mov	sl, #0
    1b18:	strd	r0, [r2]
    1b1c:	b	1adc <coda_ascii_cursor_read_int64+0x1d8>
    1b20:	movw	r0, #0
    1b24:	movw	r1, #0
    1b28:	movw	r3, #0
    1b2c:	mov	r2, #62	; 0x3e
    1b30:	movt	r0, #0
    1b34:	movt	r1, #0
    1b38:	movt	r3, #0
    1b3c:	bl	0 <__assert_fail>

00001b40 <coda_ascii_cursor_read_uint64>:
    1b40:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1b44:	add	fp, sp, #28
    1b48:	sub	sp, sp, #84	; 0x54
    1b4c:	mov	r6, r0
    1b50:	ldr	r0, [r0, #4]
    1b54:	mov	r7, r1
    1b58:	sub	r0, r0, #1
    1b5c:	add	r0, r6, r0, lsl #4
    1b60:	ldr	r5, [r0, #8]
    1b64:	ldrd	r8, [r0, #16]
    1b68:	mov	r0, r6
    1b6c:	ldr	r1, [r5]
    1b70:	cmp	r1, #99	; 0x63
    1b74:	sub	r1, fp, #40	; 0x28
    1b78:	ldrhi	r5, [r5, #4]
    1b7c:	mov	r4, r5
    1b80:	ldr	r2, [r4, #24]!
    1b84:	ldr	r3, [r4, #4]
    1b88:	bl	15d4 <get_bit_size_boundary>
    1b8c:	mvn	sl, #0
    1b90:	cmp	r0, #0
    1b94:	bne	1d18 <coda_ascii_cursor_read_uint64+0x1d8>
    1b98:	tst	r8, #7
    1b9c:	beq	1bb4 <coda_ascii_cursor_read_uint64+0x74>
    1ba0:	movw	r1, #0
    1ba4:	mvn	r0, #21
    1ba8:	movt	r1, #0
    1bac:	bl	0 <coda_set_error>
    1bb0:	b	1d18 <coda_ascii_cursor_read_uint64+0x1d8>
    1bb4:	ldr	r0, [r4, #4]
    1bb8:	cmp	r0, #0
    1bbc:	bmi	1bf8 <coda_ascii_cursor_read_uint64+0xb8>
    1bc0:	ldr	r1, [r4]
    1bc4:	mov	r4, #0
    1bc8:	lsr	r1, r1, #3
    1bcc:	orr	r2, r1, r0, lsl #29
    1bd0:	cmp	r2, #65	; 0x41
    1bd4:	blt	1c1c <coda_ascii_cursor_read_uint64+0xdc>
    1bd8:	movw	r0, #0
    1bdc:	movw	r1, #0
    1be0:	movw	r3, #0
    1be4:	movw	r2, #1137	; 0x471
    1be8:	movt	r0, #0
    1bec:	movt	r1, #0
    1bf0:	movt	r3, #0
    1bf4:	bl	0 <__assert_fail>
    1bf8:	ldr	r0, [fp, #-40]	; 0xffffffd8
    1bfc:	ldr	r1, [fp, #-36]	; 0xffffffdc
    1c00:	movw	r3, #511	; 0x1ff
    1c04:	mov	r2, #64	; 0x40
    1c08:	mov	r4, #1
    1c0c:	subs	r3, r3, r0
    1c10:	rscs	r3, r1, #0
    1c14:	lsrge	r0, r0, #3
    1c18:	orrge	r2, r0, r1, lsl #29
    1c1c:	lsr	r0, r8, #3
    1c20:	mov	r8, r2
    1c24:	orr	r3, r0, r9, lsl #29
    1c28:	ldr	r0, [r6]
    1c2c:	ldr	r1, [r0, #48]	; 0x30
    1c30:	stm	sp, {r4, r7}
    1c34:	cmp	r1, #0
    1c38:	beq	1c4c <coda_ascii_cursor_read_uint64+0x10c>
    1c3c:	add	r1, r1, r3
    1c40:	add	r0, sp, #8
    1c44:	bl	0 <memcpy>
    1c48:	b	1c6c <coda_ascii_cursor_read_uint64+0x12c>
    1c4c:	ldr	r1, [r0, #16]
    1c50:	cmp	r1, #2
    1c54:	bcs	1d5c <coda_ascii_cursor_read_uint64+0x21c>
    1c58:	ldr	r0, [r0, #56]	; 0x38
    1c5c:	add	r1, sp, #8
    1c60:	bl	0 <pread>
    1c64:	cmn	r0, #1
    1c68:	ble	1d24 <coda_ascii_cursor_read_uint64+0x1e4>
    1c6c:	ldr	r0, [r5, #52]	; 0x34
    1c70:	mov	r1, r8
    1c74:	cmp	r0, #0
    1c78:	beq	1d04 <coda_ascii_cursor_read_uint64+0x1c4>
    1c7c:	ldr	r5, [r0, #8]
    1c80:	cmp	r5, #1
    1c84:	blt	1d04 <coda_ascii_cursor_read_uint64+0x1c4>
    1c88:	ldr	r7, [r0, #12]
    1c8c:	add	r9, sp, #8
    1c90:	b	1ca8 <coda_ascii_cursor_read_uint64+0x168>
    1c94:	cmp	r1, #0
    1c98:	beq	1d48 <coda_ascii_cursor_read_uint64+0x208>
    1c9c:	add	r7, r7, #4
    1ca0:	subs	r5, r5, #1
    1ca4:	beq	1d04 <coda_ascii_cursor_read_uint64+0x1c4>
    1ca8:	ldr	r4, [r7]
    1cac:	ldr	r6, [r4]
    1cb0:	cmp	r6, #0
    1cb4:	beq	1c94 <coda_ascii_cursor_read_uint64+0x154>
    1cb8:	cmp	r6, r1
    1cbc:	bgt	1c9c <coda_ascii_cursor_read_uint64+0x15c>
    1cc0:	ldr	r0, [r4, #4]
    1cc4:	mov	r1, r9
    1cc8:	mov	r2, r6
    1ccc:	bl	0 <bcmp>
    1cd0:	mov	r1, r8
    1cd4:	cmp	r0, #0
    1cd8:	bne	1c9c <coda_ascii_cursor_read_uint64+0x15c>
    1cdc:	ldr	r0, [sp]
    1ce0:	cmp	r0, #0
    1ce4:	bne	1d48 <coda_ascii_cursor_read_uint64+0x208>
    1ce8:	cmp	r6, r1
    1cec:	beq	1d48 <coda_ascii_cursor_read_uint64+0x208>
    1cf0:	movw	r1, #0
    1cf4:	mvn	r0, #102	; 0x66
    1cf8:	movt	r1, #0
    1cfc:	bl	0 <coda_set_error>
    1d00:	b	1d18 <coda_ascii_cursor_read_uint64+0x1d8>
    1d04:	ldr	r2, [sp, #4]
    1d08:	ldr	r3, [sp]
    1d0c:	add	r0, sp, #8
    1d10:	bl	25c <coda_ascii_parse_uint64>
    1d14:	asr	sl, r0, #31
    1d18:	mov	r0, sl
    1d1c:	sub	sp, fp, #28
    1d20:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1d24:	bl	0 <__errno_location>
    1d28:	ldr	r0, [r0]
    1d2c:	bl	0 <strerror>
    1d30:	movw	r1, #0
    1d34:	mov	r2, r0
    1d38:	mvn	r0, #21
    1d3c:	movt	r1, #0
    1d40:	bl	0 <coda_set_error>
    1d44:	b	1d18 <coda_ascii_cursor_read_uint64+0x1d8>
    1d48:	ldrd	r0, [r4, #8]
    1d4c:	ldr	r2, [sp, #4]
    1d50:	mov	sl, #0
    1d54:	strd	r0, [r2]
    1d58:	b	1d18 <coda_ascii_cursor_read_uint64+0x1d8>
    1d5c:	movw	r0, #0
    1d60:	movw	r1, #0
    1d64:	movw	r3, #0
    1d68:	mov	r2, #62	; 0x3e
    1d6c:	movt	r0, #0
    1d70:	movt	r1, #0
    1d74:	movt	r3, #0
    1d78:	bl	0 <__assert_fail>

00001d7c <coda_ascii_cursor_read_int8>:
    1d7c:	push	{r4, r5, fp, lr}
    1d80:	add	fp, sp, #8
    1d84:	sub	sp, sp, #8
    1d88:	mov	r5, r1
    1d8c:	mov	r1, sp
    1d90:	bl	1904 <coda_ascii_cursor_read_int64>
    1d94:	mvn	r4, #0
    1d98:	cmp	r0, #0
    1d9c:	bne	1dd8 <coda_ascii_cursor_read_int8+0x5c>
    1da0:	ldm	sp, {r0, r1}
    1da4:	adds	r2, r0, #128	; 0x80
    1da8:	adc	r1, r1, #0
    1dac:	subs	r2, r2, #256	; 0x100
    1db0:	sbcs	r1, r1, #0
    1db4:	bcc	1dd0 <coda_ascii_cursor_read_int8+0x54>
    1db8:	movw	r0, #65236	; 0xfed4
    1dbc:	movw	r1, #0
    1dc0:	movt	r0, #65535	; 0xffff
    1dc4:	movt	r1, #0
    1dc8:	bl	0 <coda_set_error>
    1dcc:	b	1dd8 <coda_ascii_cursor_read_int8+0x5c>
    1dd0:	mov	r4, #0
    1dd4:	strb	r0, [r5]
    1dd8:	mov	r0, r4
    1ddc:	sub	sp, fp, #8
    1de0:	pop	{r4, r5, fp, pc}

00001de4 <coda_ascii_cursor_read_uint8>:
    1de4:	push	{r4, r5, fp, lr}
    1de8:	add	fp, sp, #8
    1dec:	sub	sp, sp, #8
    1df0:	mov	r5, r1
    1df4:	mov	r1, sp
    1df8:	bl	1b40 <coda_ascii_cursor_read_uint64>
    1dfc:	mvn	r4, #0
    1e00:	cmp	r0, #0
    1e04:	bne	1e38 <coda_ascii_cursor_read_uint8+0x54>
    1e08:	ldm	sp, {r0, r1}
    1e0c:	subs	r2, r0, #256	; 0x100
    1e10:	sbcs	r1, r1, #0
    1e14:	bcc	1e30 <coda_ascii_cursor_read_uint8+0x4c>
    1e18:	movw	r0, #65236	; 0xfed4
    1e1c:	movw	r1, #0
    1e20:	movt	r0, #65535	; 0xffff
    1e24:	movt	r1, #0
    1e28:	bl	0 <coda_set_error>
    1e2c:	b	1e38 <coda_ascii_cursor_read_uint8+0x54>
    1e30:	mov	r4, #0
    1e34:	strb	r0, [r5]
    1e38:	mov	r0, r4
    1e3c:	sub	sp, fp, #8
    1e40:	pop	{r4, r5, fp, pc}

00001e44 <coda_ascii_cursor_read_int16>:
    1e44:	push	{r4, r5, fp, lr}
    1e48:	add	fp, sp, #8
    1e4c:	sub	sp, sp, #8
    1e50:	mov	r5, r1
    1e54:	mov	r1, sp
    1e58:	bl	1904 <coda_ascii_cursor_read_int64>
    1e5c:	mvn	r4, #0
    1e60:	cmp	r0, #0
    1e64:	bne	1ea0 <coda_ascii_cursor_read_int16+0x5c>
    1e68:	ldm	sp, {r0, r1}
    1e6c:	adds	r2, r0, #32768	; 0x8000
    1e70:	adc	r1, r1, #0
    1e74:	subs	r2, r2, #65536	; 0x10000
    1e78:	sbcs	r1, r1, #0
    1e7c:	bcc	1e98 <coda_ascii_cursor_read_int16+0x54>
    1e80:	movw	r0, #65236	; 0xfed4
    1e84:	movw	r1, #0
    1e88:	movt	r0, #65535	; 0xffff
    1e8c:	movt	r1, #0
    1e90:	bl	0 <coda_set_error>
    1e94:	b	1ea0 <coda_ascii_cursor_read_int16+0x5c>
    1e98:	mov	r4, #0
    1e9c:	strh	r0, [r5]
    1ea0:	mov	r0, r4
    1ea4:	sub	sp, fp, #8
    1ea8:	pop	{r4, r5, fp, pc}

00001eac <coda_ascii_cursor_read_uint16>:
    1eac:	push	{r4, r5, fp, lr}
    1eb0:	add	fp, sp, #8
    1eb4:	sub	sp, sp, #8
    1eb8:	mov	r5, r1
    1ebc:	mov	r1, sp
    1ec0:	bl	1b40 <coda_ascii_cursor_read_uint64>
    1ec4:	mvn	r4, #0
    1ec8:	cmp	r0, #0
    1ecc:	bne	1f00 <coda_ascii_cursor_read_uint16+0x54>
    1ed0:	ldm	sp, {r0, r1}
    1ed4:	subs	r2, r0, #65536	; 0x10000
    1ed8:	sbcs	r1, r1, #0
    1edc:	bcc	1ef8 <coda_ascii_cursor_read_uint16+0x4c>
    1ee0:	movw	r0, #65236	; 0xfed4
    1ee4:	movw	r1, #0
    1ee8:	movt	r0, #65535	; 0xffff
    1eec:	movt	r1, #0
    1ef0:	bl	0 <coda_set_error>
    1ef4:	b	1f00 <coda_ascii_cursor_read_uint16+0x54>
    1ef8:	mov	r4, #0
    1efc:	strh	r0, [r5]
    1f00:	mov	r0, r4
    1f04:	sub	sp, fp, #8
    1f08:	pop	{r4, r5, fp, pc}

00001f0c <coda_ascii_cursor_read_int32>:
    1f0c:	push	{r4, r5, fp, lr}
    1f10:	add	fp, sp, #8
    1f14:	sub	sp, sp, #8
    1f18:	mov	r5, r1
    1f1c:	mov	r1, sp
    1f20:	bl	1904 <coda_ascii_cursor_read_int64>
    1f24:	mvn	r4, #0
    1f28:	cmp	r0, #0
    1f2c:	bne	1f60 <coda_ascii_cursor_read_int32+0x54>
    1f30:	ldm	sp, {r0, r1}
    1f34:	adds	r2, r0, #-2147483648	; 0x80000000
    1f38:	adcs	r1, r1, #0
    1f3c:	beq	1f58 <coda_ascii_cursor_read_int32+0x4c>
    1f40:	movw	r0, #65236	; 0xfed4
    1f44:	movw	r1, #0
    1f48:	movt	r0, #65535	; 0xffff
    1f4c:	movt	r1, #0
    1f50:	bl	0 <coda_set_error>
    1f54:	b	1f60 <coda_ascii_cursor_read_int32+0x54>
    1f58:	mov	r4, #0
    1f5c:	str	r0, [r5]
    1f60:	mov	r0, r4
    1f64:	sub	sp, fp, #8
    1f68:	pop	{r4, r5, fp, pc}

00001f6c <coda_ascii_cursor_read_uint32>:
    1f6c:	push	{r4, r5, fp, lr}
    1f70:	add	fp, sp, #8
    1f74:	sub	sp, sp, #8
    1f78:	mov	r5, r1
    1f7c:	mov	r1, sp
    1f80:	bl	1b40 <coda_ascii_cursor_read_uint64>
    1f84:	mvn	r4, #0
    1f88:	cmp	r0, #0
    1f8c:	bne	1fc0 <coda_ascii_cursor_read_uint32+0x54>
    1f90:	ldr	r0, [sp, #4]
    1f94:	cmp	r0, #0
    1f98:	beq	1fb4 <coda_ascii_cursor_read_uint32+0x48>
    1f9c:	movw	r0, #65236	; 0xfed4
    1fa0:	movw	r1, #0
    1fa4:	movt	r0, #65535	; 0xffff
    1fa8:	movt	r1, #0
    1fac:	bl	0 <coda_set_error>
    1fb0:	b	1fc0 <coda_ascii_cursor_read_uint32+0x54>
    1fb4:	ldr	r0, [sp]
    1fb8:	mov	r4, #0
    1fbc:	str	r0, [r5]
    1fc0:	mov	r0, r4
    1fc4:	sub	sp, fp, #8
    1fc8:	pop	{r4, r5, fp, pc}

00001fcc <coda_ascii_cursor_read_double>:
    1fcc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1fd0:	add	fp, sp, #28
    1fd4:	sub	sp, sp, #84	; 0x54
    1fd8:	mov	r6, r0
    1fdc:	ldr	r0, [r0, #4]
    1fe0:	mov	r7, r1
    1fe4:	sub	r0, r0, #1
    1fe8:	add	r0, r6, r0, lsl #4
    1fec:	ldr	r5, [r0, #8]
    1ff0:	ldrd	r8, [r0, #16]
    1ff4:	mov	r0, r6
    1ff8:	ldr	r1, [r5]
    1ffc:	cmp	r1, #99	; 0x63
    2000:	sub	r1, fp, #40	; 0x28
    2004:	ldrhi	r5, [r5, #4]
    2008:	mov	r4, r5
    200c:	ldr	r2, [r4, #24]!
    2010:	ldr	r3, [r4, #4]
    2014:	bl	15d4 <get_bit_size_boundary>
    2018:	mvn	sl, #0
    201c:	cmp	r0, #0
    2020:	bne	21a4 <coda_ascii_cursor_read_double+0x1d8>
    2024:	tst	r8, #7
    2028:	beq	2040 <coda_ascii_cursor_read_double+0x74>
    202c:	movw	r1, #0
    2030:	mvn	r0, #21
    2034:	movt	r1, #0
    2038:	bl	0 <coda_set_error>
    203c:	b	21a4 <coda_ascii_cursor_read_double+0x1d8>
    2040:	ldr	r0, [r4, #4]
    2044:	cmp	r0, #0
    2048:	bmi	2084 <coda_ascii_cursor_read_double+0xb8>
    204c:	ldr	r1, [r4]
    2050:	mov	r4, #0
    2054:	lsr	r1, r1, #3
    2058:	orr	r2, r1, r0, lsl #29
    205c:	cmp	r2, #65	; 0x41
    2060:	blt	20a8 <coda_ascii_cursor_read_double+0xdc>
    2064:	movw	r0, #0
    2068:	movw	r1, #0
    206c:	movw	r3, #0
    2070:	movw	r2, #1306	; 0x51a
    2074:	movt	r0, #0
    2078:	movt	r1, #0
    207c:	movt	r3, #0
    2080:	bl	0 <__assert_fail>
    2084:	ldr	r0, [fp, #-40]	; 0xffffffd8
    2088:	ldr	r1, [fp, #-36]	; 0xffffffdc
    208c:	movw	r3, #511	; 0x1ff
    2090:	mov	r2, #64	; 0x40
    2094:	mov	r4, #1
    2098:	subs	r3, r3, r0
    209c:	rscs	r3, r1, #0
    20a0:	lsrge	r0, r0, #3
    20a4:	orrge	r2, r0, r1, lsl #29
    20a8:	lsr	r0, r8, #3
    20ac:	mov	r8, r2
    20b0:	orr	r3, r0, r9, lsl #29
    20b4:	ldr	r0, [r6]
    20b8:	ldr	r1, [r0, #48]	; 0x30
    20bc:	stm	sp, {r4, r7}
    20c0:	cmp	r1, #0
    20c4:	beq	20d8 <coda_ascii_cursor_read_double+0x10c>
    20c8:	add	r1, r1, r3
    20cc:	add	r0, sp, #8
    20d0:	bl	0 <memcpy>
    20d4:	b	20f8 <coda_ascii_cursor_read_double+0x12c>
    20d8:	ldr	r1, [r0, #16]
    20dc:	cmp	r1, #2
    20e0:	bcs	21e8 <coda_ascii_cursor_read_double+0x21c>
    20e4:	ldr	r0, [r0, #56]	; 0x38
    20e8:	add	r1, sp, #8
    20ec:	bl	0 <pread>
    20f0:	cmn	r0, #1
    20f4:	ble	21b0 <coda_ascii_cursor_read_double+0x1e4>
    20f8:	ldr	r0, [r5, #52]	; 0x34
    20fc:	mov	r1, r8
    2100:	cmp	r0, #0
    2104:	beq	2190 <coda_ascii_cursor_read_double+0x1c4>
    2108:	ldr	r5, [r0, #8]
    210c:	cmp	r5, #1
    2110:	blt	2190 <coda_ascii_cursor_read_double+0x1c4>
    2114:	ldr	r7, [r0, #12]
    2118:	add	r9, sp, #8
    211c:	b	2134 <coda_ascii_cursor_read_double+0x168>
    2120:	cmp	r1, #0
    2124:	beq	21d4 <coda_ascii_cursor_read_double+0x208>
    2128:	add	r7, r7, #4
    212c:	subs	r5, r5, #1
    2130:	beq	2190 <coda_ascii_cursor_read_double+0x1c4>
    2134:	ldr	r4, [r7]
    2138:	ldr	r6, [r4]
    213c:	cmp	r6, #0
    2140:	beq	2120 <coda_ascii_cursor_read_double+0x154>
    2144:	cmp	r6, r1
    2148:	bgt	2128 <coda_ascii_cursor_read_double+0x15c>
    214c:	ldr	r0, [r4, #4]
    2150:	mov	r1, r9
    2154:	mov	r2, r6
    2158:	bl	0 <bcmp>
    215c:	mov	r1, r8
    2160:	cmp	r0, #0
    2164:	bne	2128 <coda_ascii_cursor_read_double+0x15c>
    2168:	ldr	r0, [sp]
    216c:	cmp	r0, #0
    2170:	bne	21d4 <coda_ascii_cursor_read_double+0x208>
    2174:	cmp	r6, r1
    2178:	beq	21d4 <coda_ascii_cursor_read_double+0x208>
    217c:	movw	r1, #0
    2180:	mvn	r0, #102	; 0x66
    2184:	movt	r1, #0
    2188:	bl	0 <coda_set_error>
    218c:	b	21a4 <coda_ascii_cursor_read_double+0x1d8>
    2190:	ldr	r2, [sp, #4]
    2194:	ldr	r3, [sp]
    2198:	add	r0, sp, #8
    219c:	bl	3d0 <coda_ascii_parse_double>
    21a0:	asr	sl, r0, #31
    21a4:	mov	r0, sl
    21a8:	sub	sp, fp, #28
    21ac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    21b0:	bl	0 <__errno_location>
    21b4:	ldr	r0, [r0]
    21b8:	bl	0 <strerror>
    21bc:	movw	r1, #0
    21c0:	mov	r2, r0
    21c4:	mvn	r0, #21
    21c8:	movt	r1, #0
    21cc:	bl	0 <coda_set_error>
    21d0:	b	21a4 <coda_ascii_cursor_read_double+0x1d8>
    21d4:	vldr	d16, [r4, #8]
    21d8:	ldr	r0, [sp, #4]
    21dc:	mov	sl, #0
    21e0:	vstr	d16, [r0]
    21e4:	b	21a4 <coda_ascii_cursor_read_double+0x1d8>
    21e8:	movw	r0, #0
    21ec:	movw	r1, #0
    21f0:	movw	r3, #0
    21f4:	mov	r2, #62	; 0x3e
    21f8:	movt	r0, #0
    21fc:	movt	r1, #0
    2200:	movt	r3, #0
    2204:	bl	0 <__assert_fail>

00002208 <coda_ascii_cursor_read_float>:
    2208:	push	{r4, sl, fp, lr}
    220c:	add	fp, sp, #8
    2210:	sub	sp, sp, #8
    2214:	mov	r4, r1
    2218:	mov	r1, sp
    221c:	bl	1fcc <coda_ascii_cursor_read_double>
    2220:	mov	r1, r0
    2224:	mvn	r0, #0
    2228:	cmp	r1, #0
    222c:	beq	2238 <coda_ascii_cursor_read_float+0x30>
    2230:	sub	sp, fp, #8
    2234:	pop	{r4, sl, fp, pc}
    2238:	vldr	d16, [sp]
    223c:	mov	r0, #0
    2240:	vcvt.f32.f64	s0, d16
    2244:	vstr	s0, [r4]
    2248:	sub	sp, fp, #8
    224c:	pop	{r4, sl, fp, pc}

00002250 <coda_ascii_cursor_read_char>:
    2250:	push	{r4, r5, fp, lr}
    2254:	add	fp, sp, #8
    2258:	sub	sp, sp, #8
    225c:	mov	r4, r1
    2260:	mov	r1, sp
    2264:	mov	r2, #8
    2268:	mov	r3, #0
    226c:	mov	r5, r0
    2270:	bl	15d4 <get_bit_size_boundary>
    2274:	mov	r1, r0
    2278:	mvn	r0, #0
    227c:	cmp	r1, #0
    2280:	bne	22b0 <coda_ascii_cursor_read_char+0x60>
    2284:	ldr	r0, [r5, #4]
    2288:	mov	r1, r5
    228c:	ldr	r0, [r1, r0, lsl #4]!
    2290:	tst	r0, #7
    2294:	beq	22b8 <coda_ascii_cursor_read_char+0x68>
    2298:	movw	r0, #65236	; 0xfed4
    229c:	movw	r1, #0
    22a0:	movt	r0, #65535	; 0xffff
    22a4:	movt	r1, #0
    22a8:	bl	0 <coda_set_error>
    22ac:	mvn	r0, #0
    22b0:	sub	sp, fp, #8
    22b4:	pop	{r4, r5, fp, pc}
    22b8:	ldr	r1, [r1, #4]
    22bc:	lsr	r0, r0, #3
    22c0:	orr	r3, r0, r1, lsl #29
    22c4:	ldr	r0, [r5]
    22c8:	ldr	r1, [r0, #48]	; 0x30
    22cc:	cmp	r1, #0
    22d0:	beq	22e8 <coda_ascii_cursor_read_char+0x98>
    22d4:	ldrb	r0, [r1, r3]
    22d8:	strb	r0, [r4]
    22dc:	mov	r0, #0
    22e0:	sub	sp, fp, #8
    22e4:	pop	{r4, r5, fp, pc}
    22e8:	ldr	r1, [r0, #16]
    22ec:	cmp	r1, #2
    22f0:	bcs	2338 <coda_ascii_cursor_read_char+0xe8>
    22f4:	ldr	r0, [r0, #56]	; 0x38
    22f8:	mov	r1, r4
    22fc:	mov	r2, #1
    2300:	bl	0 <pread>
    2304:	mov	r1, r0
    2308:	mov	r0, #0
    230c:	cmn	r1, #1
    2310:	bgt	22b0 <coda_ascii_cursor_read_char+0x60>
    2314:	bl	0 <__errno_location>
    2318:	ldr	r0, [r0]
    231c:	bl	0 <strerror>
    2320:	movw	r1, #0
    2324:	mov	r2, r0
    2328:	mvn	r0, #21
    232c:	movt	r1, #0
    2330:	bl	0 <coda_set_error>
    2334:	b	22ac <coda_ascii_cursor_read_char+0x5c>
    2338:	movw	r0, #0
    233c:	movw	r1, #0
    2340:	movw	r3, #0
    2344:	mov	r2, #62	; 0x3e
    2348:	movt	r0, #0
    234c:	movt	r1, #0
    2350:	movt	r3, #0
    2354:	bl	0 <__assert_fail>

00002358 <coda_ascii_cursor_read_string>:
    2358:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
    235c:	add	fp, sp, #24
    2360:	sub	sp, sp, #24
    2364:	mov	r5, r0
    2368:	ldr	r0, [r0, #4]
    236c:	mov	r9, r1
    2370:	mov	r6, r2
    2374:	sub	r0, r0, #1
    2378:	add	r0, r5, r0, lsl #4
    237c:	ldr	r4, [r0, #8]
    2380:	ldr	r7, [r0, #16]
    2384:	ldr	r1, [r4]
    2388:	cmp	r1, #99	; 0x63
    238c:	ldrhi	r4, [r4, #4]
    2390:	tst	r7, #7
    2394:	beq	23b8 <coda_ascii_cursor_read_string+0x60>
    2398:	movw	r0, #65236	; 0xfed4
    239c:	movw	r1, #0
    23a0:	movt	r0, #65535	; 0xffff
    23a4:	movt	r1, #0
    23a8:	bl	0 <coda_set_error>
    23ac:	mvn	r0, #0
    23b0:	sub	sp, fp, #24
    23b4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
    23b8:	ldr	r2, [r4, #24]!
    23bc:	ldr	r8, [r0, #20]
    23c0:	add	r1, sp, #16
    23c4:	mov	r0, r5
    23c8:	ldr	r3, [r4, #4]
    23cc:	cmn	r3, #1
    23d0:	ble	2460 <coda_ascii_cursor_read_string+0x108>
    23d4:	bl	15d4 <get_bit_size_boundary>
    23d8:	cmp	r0, #0
    23dc:	bne	23ac <coda_ascii_cursor_read_string+0x54>
    23e0:	ldrd	r0, [r4]
    23e4:	lsr	r0, r0, #3
    23e8:	asr	r2, r1, #3
    23ec:	orr	r4, r0, r1, lsl #29
    23f0:	mov	r0, #0
    23f4:	subs	r3, r4, r6
    23f8:	sub	r3, r6, #1
    23fc:	sbcs	r2, r2, r6, asr #31
    2400:	mov	r2, #0
    2404:	movwlt	r2, #1
    2408:	cmp	r2, #0
    240c:	asr	r2, r3, #31
    2410:	moveq	r4, r3
    2414:	asrne	r2, r1, #3
    2418:	subs	r1, r4, #1
    241c:	sbcs	r1, r2, #0
    2420:	blt	248c <coda_ascii_cursor_read_string+0x134>
    2424:	ldr	r0, [r5]
    2428:	lsr	r1, r7, #3
    242c:	str	r4, [sp]
    2430:	stmib	sp, {r2, r9}
    2434:	asr	r3, r8, #3
    2438:	orr	r2, r1, r8, lsl #29
    243c:	bl	24a0 <read_bytes>
    2440:	mov	r1, r0
    2444:	mvn	r0, #0
    2448:	cmp	r1, #0
    244c:	bne	2490 <coda_ascii_cursor_read_string+0x138>
    2450:	mov	r0, #0
    2454:	strb	r0, [r9, r4]
    2458:	sub	sp, fp, #24
    245c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
    2460:	bl	a60 <coda_ascii_cursor_get_bit_size>
    2464:	cmp	r0, #0
    2468:	bne	23ac <coda_ascii_cursor_read_string+0x54>
    246c:	ldr	r0, [sp, #16]
    2470:	tst	r0, #7
    2474:	beq	2498 <coda_ascii_cursor_read_string+0x140>
    2478:	movw	r0, #65236	; 0xfed4
    247c:	movw	r1, #0
    2480:	movt	r0, #65535	; 0xffff
    2484:	movt	r1, #0
    2488:	b	23a8 <coda_ascii_cursor_read_string+0x50>
    248c:	strb	r0, [r9]
    2490:	sub	sp, fp, #24
    2494:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
    2498:	ldr	r1, [sp, #20]
    249c:	b	23e4 <coda_ascii_cursor_read_string+0x8c>

000024a0 <read_bytes>:
    24a0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    24a4:	add	fp, sp, #28
    24a8:	sub	sp, sp, #68	; 0x44
    24ac:	ldr	r7, [r0, #48]	; 0x30
    24b0:	mov	r4, r2
    24b4:	ldr	r1, [fp, #12]
    24b8:	ldr	r2, [fp, #8]
    24bc:	ldr	ip, [fp, #16]
    24c0:	mov	sl, r3
    24c4:	cmp	r7, #0
    24c8:	beq	254c <read_bytes+0xac>
    24cc:	add	r9, r0, #40	; 0x28
    24d0:	adds	r5, r2, r4
    24d4:	ldr	r8, [r9]
    24d8:	ldr	r3, [r9, #4]
    24dc:	adc	r6, r1, sl
    24e0:	subs	r5, r8, r5
    24e4:	sbcs	r3, r3, r6
    24e8:	bcs	2594 <read_bytes+0xf4>
    24ec:	ldr	r0, [r0, #16]
    24f0:	cmp	r0, #1
    24f4:	bls	2578 <read_bytes+0xd8>
    24f8:	add	r8, sp, #47	; 0x2f
    24fc:	mov	r0, r2
    2500:	mov	r2, r8
    2504:	bl	0 <coda_str64>
    2508:	add	r7, sp, #26
    250c:	mov	r0, r4
    2510:	mov	r1, sl
    2514:	mov	r2, r7
    2518:	bl	0 <coda_str64>
    251c:	ldrd	r0, [r9]
    2520:	add	r4, sp, #5
    2524:	mov	r2, r4
    2528:	bl	0 <coda_str64>
    252c:	movw	r1, #0
    2530:	mvn	r0, #300	; 0x12c
    2534:	mov	r2, r8
    2538:	mov	r3, r7
    253c:	str	r4, [sp]
    2540:	movt	r1, #0
    2544:	bl	0 <coda_set_error>
    2548:	b	2588 <read_bytes+0xe8>
    254c:	ldr	r3, [r0, #16]
    2550:	cmp	r3, #2
    2554:	bcs	25f0 <read_bytes+0x150>
    2558:	add	r3, r0, #8
    255c:	adds	r7, r2, r4
    2560:	ldr	r6, [r3]
    2564:	ldr	r3, [r3, #4]
    2568:	adc	r1, r1, sl
    256c:	subs	r7, r6, r7
    2570:	sbcs	r1, r3, r1
    2574:	bcs	25ac <read_bytes+0x10c>
    2578:	movw	r1, #0
    257c:	mvn	r0, #300	; 0x12c
    2580:	movt	r1, #0
    2584:	bl	0 <coda_set_error>
    2588:	mvn	r0, #0
    258c:	sub	sp, fp, #28
    2590:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2594:	add	r1, r7, r4
    2598:	mov	r0, ip
    259c:	bl	0 <memcpy>
    25a0:	mov	r0, #0
    25a4:	sub	sp, fp, #28
    25a8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    25ac:	ldr	r0, [r0, #56]	; 0x38
    25b0:	mov	r1, ip
    25b4:	mov	r3, r4
    25b8:	bl	0 <pread>
    25bc:	mov	r1, r0
    25c0:	mov	r0, #0
    25c4:	cmn	r1, #1
    25c8:	bgt	258c <read_bytes+0xec>
    25cc:	bl	0 <__errno_location>
    25d0:	ldr	r0, [r0]
    25d4:	bl	0 <strerror>
    25d8:	movw	r1, #0
    25dc:	mov	r2, r0
    25e0:	mvn	r0, #21
    25e4:	movt	r1, #0
    25e8:	bl	0 <coda_set_error>
    25ec:	b	2588 <read_bytes+0xe8>
    25f0:	movw	r0, #0
    25f4:	movw	r1, #0
    25f8:	movw	r3, #0
    25fc:	mov	r2, #83	; 0x53
    2600:	movt	r0, #0
    2604:	movt	r1, #0
    2608:	movt	r3, #0
    260c:	bl	0 <__assert_fail>

00002610 <coda_ascii_cursor_read_bits>:
    2610:	push	{r4, r5, fp, lr}
    2614:	add	fp, sp, #8
    2618:	sub	sp, sp, #16
    261c:	ldr	ip, [fp, #8]
    2620:	tst	ip, #7
    2624:	beq	2638 <coda_ascii_cursor_read_bits+0x28>
    2628:	movw	r1, #0
    262c:	mvn	r0, #99	; 0x63
    2630:	movt	r1, #0
    2634:	b	2668 <coda_ascii_cursor_read_bits+0x58>
    2638:	ldr	lr, [r0, #4]
    263c:	mov	r4, r0
    2640:	ldr	lr, [r4, lr, lsl #4]!
    2644:	ldr	r4, [r4, #4]
    2648:	adds	r2, lr, r2
    264c:	adc	r3, r4, r3
    2650:	tst	r2, #7
    2654:	beq	2678 <coda_ascii_cursor_read_bits+0x68>
    2658:	movw	r0, #65236	; 0xfed4
    265c:	movw	r1, #0
    2660:	movt	r0, #65535	; 0xffff
    2664:	movt	r1, #0
    2668:	bl	0 <coda_set_error>
    266c:	mvn	r0, #0
    2670:	sub	sp, fp, #8
    2674:	pop	{r4, r5, fp, pc}
    2678:	ldr	lr, [fp, #12]
    267c:	lsr	r4, ip, #3
    2680:	ldr	r0, [r0]
    2684:	orr	r4, r4, lr, lsl #29
    2688:	asr	r5, lr, #3
    268c:	stm	sp, {r4, r5}
    2690:	str	r1, [sp, #8]
    2694:	lsr	r1, r2, #3
    2698:	orr	r2, r1, r3, lsl #29
    269c:	asr	r3, r3, #3
    26a0:	bl	24a0 <read_bytes>
    26a4:	sub	sp, fp, #8
    26a8:	pop	{r4, r5, fp, pc}

000026ac <coda_ascii_cursor_read_int8_array>:
    26ac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    26b0:	add	fp, sp, #28
    26b4:	sub	sp, sp, #572	; 0x23c
    26b8:	mov	r9, r0
    26bc:	ldr	r0, [r0, #4]
    26c0:	mov	r4, r2
    26c4:	add	r0, r9, r0, lsl #4
    26c8:	ldr	r0, [r0, #-8]
    26cc:	ldr	r2, [r0]
    26d0:	cmp	r2, #99	; 0x63
    26d4:	ldrhi	r0, [r0, #4]
    26d8:	ldr	r0, [r0, #40]	; 0x28
    26dc:	ldr	r0, [r0]
    26e0:	cmp	r0, #0
    26e4:	bne	2914 <coda_ascii_cursor_read_int8_array+0x268>
    26e8:	add	r5, sp, #8
    26ec:	mov	r8, r1
    26f0:	add	r1, sp, #4
    26f4:	mov	r0, r9
    26f8:	mov	r2, r5
    26fc:	bl	0 <coda_cursor_get_array_dim>
    2700:	cmp	r0, #0
    2704:	bne	2844 <coda_ascii_cursor_read_int8_array+0x198>
    2708:	add	r0, sp, #40	; 0x28
    270c:	mov	r1, r9
    2710:	mov	r2, #520	; 0x208
    2714:	bl	0 <memcpy>
    2718:	ldr	r0, [sp, #4]
    271c:	str	r4, [sp]
    2720:	cmp	r0, #1
    2724:	blt	2740 <coda_ascii_cursor_read_int8_array+0x94>
    2728:	cmp	r0, #4
    272c:	bcs	274c <coda_ascii_cursor_read_int8_array+0xa0>
    2730:	mov	r4, #1
    2734:	mov	lr, #0
    2738:	mov	r5, r8
    273c:	b	2808 <coda_ascii_cursor_read_int8_array+0x15c>
    2740:	mov	r4, #1
    2744:	mov	r5, r8
    2748:	b	282c <coda_ascii_cursor_read_int8_array+0x180>
    274c:	bic	lr, r0, #3
    2750:	mov	r2, #1
    2754:	vmov.i32	q8, #1	; 0x00000001
    2758:	sub	r7, lr, #4
    275c:	add	r3, r2, r7, lsr #2
    2760:	cmp	r7, #12
    2764:	and	ip, r3, #3
    2768:	bcs	277c <coda_ascii_cursor_read_int8_array+0xd0>
    276c:	mov	r3, #0
    2770:	cmp	ip, #0
    2774:	bne	27d0 <coda_ascii_cursor_read_int8_array+0x124>
    2778:	b	27ec <coda_ascii_cursor_read_int8_array+0x140>
    277c:	sub	r6, r3, ip
    2780:	mov	r3, #0
    2784:	mov	r4, #64	; 0x40
    2788:	mov	r7, r5
    278c:	vld1.32	{d18-d19}, [r7], r4
    2790:	add	r1, r5, #16
    2794:	add	r2, r5, #32
    2798:	subs	r6, r6, #4
    279c:	add	r3, r3, #16
    27a0:	vld1.32	{d20-d21}, [r1]
    27a4:	add	r1, r5, #48	; 0x30
    27a8:	mov	r5, r7
    27ac:	vmul.i32	q8, q9, q8
    27b0:	vld1.32	{d18-d19}, [r2]
    27b4:	vmul.i32	q8, q10, q8
    27b8:	vld1.32	{d20-d21}, [r1]
    27bc:	vmul.i32	q8, q9, q8
    27c0:	vmul.i32	q8, q10, q8
    27c4:	bne	278c <coda_ascii_cursor_read_int8_array+0xe0>
    27c8:	cmp	ip, #0
    27cc:	beq	27ec <coda_ascii_cursor_read_int8_array+0x140>
    27d0:	add	r1, sp, #8
    27d4:	rsb	r2, ip, #0
    27d8:	add	r3, r1, r3, lsl #2
    27dc:	vld1.32	{d18-d19}, [r3]!
    27e0:	adds	r2, r2, #1
    27e4:	vmul.i32	q8, q9, q8
    27e8:	bcc	27dc <coda_ascii_cursor_read_int8_array+0x130>
    27ec:	vext.8	q9, q8, q8, #8
    27f0:	cmp	r0, lr
    27f4:	mov	r5, r8
    27f8:	vmul.i32	q0, q8, q9
    27fc:	vmul.i32	q8, q0, d0[1]
    2800:	vmov.32	r4, d16[0]
    2804:	beq	2824 <coda_ascii_cursor_read_int8_array+0x178>
    2808:	add	r1, sp, #8
    280c:	sub	r0, r0, lr
    2810:	add	r2, r1, lr, lsl #2
    2814:	ldr	r1, [r2], #4
    2818:	subs	r0, r0, #1
    281c:	mul	r4, r1, r4
    2820:	bne	2814 <coda_ascii_cursor_read_int8_array+0x168>
    2824:	cmp	r4, #1
    2828:	blt	28bc <coda_ascii_cursor_read_int8_array+0x210>
    282c:	add	r0, sp, #40	; 0x28
    2830:	mov	r1, #0
    2834:	mov	r6, #0
    2838:	bl	0 <coda_cursor_goto_array_element_by_index>
    283c:	cmp	r0, #0
    2840:	beq	2850 <coda_ascii_cursor_read_int8_array+0x1a4>
    2844:	mvn	r0, #0
    2848:	sub	sp, fp, #28
    284c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2850:	sub	r8, r4, #1
    2854:	add	r7, sp, #40	; 0x28
    2858:	sub	sl, fp, #40	; 0x28
    285c:	b	286c <coda_ascii_cursor_read_int8_array+0x1c0>
    2860:	add	r6, r6, #1
    2864:	cmp	r4, r6
    2868:	beq	28bc <coda_ascii_cursor_read_int8_array+0x210>
    286c:	mov	r0, r7
    2870:	mov	r1, sl
    2874:	bl	1904 <coda_ascii_cursor_read_int64>
    2878:	cmp	r0, #0
    287c:	bne	2844 <coda_ascii_cursor_read_int8_array+0x198>
    2880:	ldr	r0, [fp, #-40]	; 0xffffffd8
    2884:	ldr	r1, [fp, #-36]	; 0xffffffdc
    2888:	adds	r2, r0, #128	; 0x80
    288c:	adc	r1, r1, #0
    2890:	subs	r2, r2, #256	; 0x100
    2894:	sbcs	r1, r1, #0
    2898:	bcs	28fc <coda_ascii_cursor_read_int8_array+0x250>
    289c:	cmp	r6, r8
    28a0:	strb	r0, [r5, r6]
    28a4:	bge	2860 <coda_ascii_cursor_read_int8_array+0x1b4>
    28a8:	mov	r0, r7
    28ac:	bl	0 <coda_cursor_goto_next_array_element>
    28b0:	cmp	r0, #0
    28b4:	beq	2860 <coda_ascii_cursor_read_int8_array+0x1b4>
    28b8:	b	2844 <coda_ascii_cursor_read_int8_array+0x198>
    28bc:	ldr	r0, [sp]
    28c0:	cmp	r0, #0
    28c4:	beq	28f0 <coda_ascii_cursor_read_int8_array+0x244>
    28c8:	mov	r0, r9
    28cc:	mov	r1, r5
    28d0:	mov	r2, #1
    28d4:	bl	2b04 <transpose_array>
    28d8:	mov	r1, r0
    28dc:	mvn	r0, #0
    28e0:	cmp	r1, #0
    28e4:	moveq	r0, #0
    28e8:	sub	sp, fp, #28
    28ec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    28f0:	mov	r0, #0
    28f4:	sub	sp, fp, #28
    28f8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    28fc:	movw	r0, #65236	; 0xfed4
    2900:	movw	r1, #0
    2904:	movt	r0, #65535	; 0xffff
    2908:	movt	r1, #0
    290c:	bl	0 <coda_set_error>
    2910:	b	2844 <coda_ascii_cursor_read_int8_array+0x198>
    2914:	movw	r0, #0
    2918:	movw	r1, #0
    291c:	movw	r3, #0
    2920:	movw	r2, #1464	; 0x5b8
    2924:	movt	r0, #0
    2928:	movt	r1, #0
    292c:	movt	r3, #0
    2930:	bl	0 <__assert_fail>

00002934 <read_array>:
    2934:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2938:	add	fp, sp, #28
    293c:	sub	sp, sp, #564	; 0x234
    2940:	add	r6, sp, #8
    2944:	mov	r9, r2
    2948:	mov	sl, r1
    294c:	add	r1, sp, #4
    2950:	mov	r4, r3
    2954:	mov	r5, r0
    2958:	mov	r2, r6
    295c:	bl	0 <coda_cursor_get_array_dim>
    2960:	mvn	r8, #0
    2964:	cmp	r0, #0
    2968:	bne	2af8 <read_array+0x1c4>
    296c:	add	r0, sp, #40	; 0x28
    2970:	mov	r1, r5
    2974:	mov	r2, #520	; 0x208
    2978:	str	r4, [sp]
    297c:	bl	0 <memcpy>
    2980:	ldr	r0, [sp, #4]
    2984:	cmp	r0, #1
    2988:	blt	29a4 <read_array+0x70>
    298c:	cmp	r0, #4
    2990:	bcs	29b0 <read_array+0x7c>
    2994:	ldr	r6, [sp]
    2998:	mov	r5, #1
    299c:	mov	r1, #0
    29a0:	b	2a6c <read_array+0x138>
    29a4:	ldr	r6, [sp]
    29a8:	mov	r5, #1
    29ac:	b	2a8c <read_array+0x158>
    29b0:	bic	r1, r0, #3
    29b4:	mov	r2, #1
    29b8:	vmov.i32	q8, #1	; 0x00000001
    29bc:	sub	r7, r1, #4
    29c0:	add	r3, r2, r7, lsr #2
    29c4:	cmp	r7, #12
    29c8:	and	ip, r3, #3
    29cc:	bcs	29e0 <read_array+0xac>
    29d0:	mov	r3, #0
    29d4:	cmp	ip, #0
    29d8:	bne	2a34 <read_array+0x100>
    29dc:	b	2a50 <read_array+0x11c>
    29e0:	sub	r7, r3, ip
    29e4:	mov	r3, #0
    29e8:	mov	lr, #64	; 0x40
    29ec:	mov	r4, r6
    29f0:	vld1.32	{d18-d19}, [r4], lr
    29f4:	add	r5, r6, #16
    29f8:	add	r2, r6, #32
    29fc:	subs	r7, r7, #4
    2a00:	add	r3, r3, #16
    2a04:	vld1.32	{d20-d21}, [r5]
    2a08:	vmul.i32	q8, q9, q8
    2a0c:	vld1.32	{d18-d19}, [r2]
    2a10:	add	r2, r6, #48	; 0x30
    2a14:	mov	r6, r4
    2a18:	vmul.i32	q8, q10, q8
    2a1c:	vld1.32	{d20-d21}, [r2]
    2a20:	vmul.i32	q8, q9, q8
    2a24:	vmul.i32	q8, q10, q8
    2a28:	bne	29f0 <read_array+0xbc>
    2a2c:	cmp	ip, #0
    2a30:	beq	2a50 <read_array+0x11c>
    2a34:	add	r2, sp, #8
    2a38:	add	r3, r2, r3, lsl #2
    2a3c:	rsb	r2, ip, #0
    2a40:	vld1.32	{d18-d19}, [r3]!
    2a44:	adds	r2, r2, #1
    2a48:	vmul.i32	q8, q9, q8
    2a4c:	bcc	2a40 <read_array+0x10c>
    2a50:	vext.8	q9, q8, q8, #8
    2a54:	ldr	r6, [sp]
    2a58:	cmp	r0, r1
    2a5c:	vmul.i32	q0, q8, q9
    2a60:	vmul.i32	q8, q0, d0[1]
    2a64:	vmov.32	r5, d16[0]
    2a68:	beq	2a84 <read_array+0x150>
    2a6c:	add	r2, sp, #8
    2a70:	ldr	r3, [r2, r1, lsl #2]
    2a74:	add	r1, r1, #1
    2a78:	cmp	r1, r0
    2a7c:	mul	r5, r3, r5
    2a80:	blt	2a70 <read_array+0x13c>
    2a84:	cmp	r5, #1
    2a88:	blt	2af4 <read_array+0x1c0>
    2a8c:	add	r0, sp, #40	; 0x28
    2a90:	mov	r1, #0
    2a94:	mov	r7, #0
    2a98:	bl	0 <coda_cursor_goto_array_element_by_index>
    2a9c:	cmp	r0, #0
    2aa0:	bne	2af8 <read_array+0x1c4>
    2aa4:	sub	r8, r5, #1
    2aa8:	add	r4, sp, #40	; 0x28
    2aac:	b	2ac0 <read_array+0x18c>
    2ab0:	add	r7, r7, #1
    2ab4:	add	r9, r9, r6
    2ab8:	cmp	r5, r7
    2abc:	beq	2af4 <read_array+0x1c0>
    2ac0:	mov	r0, r4
    2ac4:	mov	r1, r9
    2ac8:	blx	sl
    2acc:	cmp	r0, #0
    2ad0:	bne	2aec <read_array+0x1b8>
    2ad4:	cmp	r7, r8
    2ad8:	bge	2ab0 <read_array+0x17c>
    2adc:	mov	r0, r4
    2ae0:	bl	0 <coda_cursor_goto_next_array_element>
    2ae4:	cmp	r0, #0
    2ae8:	beq	2ab0 <read_array+0x17c>
    2aec:	mvn	r8, #0
    2af0:	b	2af8 <read_array+0x1c4>
    2af4:	mov	r8, #0
    2af8:	mov	r0, r8
    2afc:	sub	sp, fp, #28
    2b00:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

00002b04 <transpose_array>:
    2b04:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2b08:	add	fp, sp, #28
    2b0c:	sub	sp, sp, #180	; 0xb4
    2b10:	sub	r6, fp, #60	; 0x3c
    2b14:	mov	r8, r2
    2b18:	str	r1, [sp, #32]
    2b1c:	sub	r1, fp, #64	; 0x40
    2b20:	mov	r2, r6
    2b24:	bl	0 <coda_cursor_get_array_dim>
    2b28:	mvn	r7, #0
    2b2c:	cmp	r0, #0
    2b30:	bne	2fd8 <transpose_array+0x4d4>
    2b34:	ldr	r5, [fp, #-64]	; 0xffffffc0
    2b38:	mov	r7, #0
    2b3c:	cmp	r5, #2
    2b40:	blt	2fd8 <transpose_array+0x4d4>
    2b44:	add	r9, sp, #72	; 0x48
    2b48:	lsl	r2, r5, #2
    2b4c:	mov	r1, #0
    2b50:	mov	r7, #0
    2b54:	mov	r0, r9
    2b58:	bl	0 <memset>
    2b5c:	mov	r4, #1
    2b60:	cmp	r5, #4
    2b64:	bcc	2bbc <transpose_array+0xb8>
    2b68:	add	r0, r6, r5, lsl #2
    2b6c:	vmov.i32	q8, #1	; 0x00000001
    2b70:	bic	r7, r5, #3
    2b74:	add	r1, sp, #36	; 0x24
    2b78:	mvn	r2, #15
    2b7c:	mov	r3, r7
    2b80:	sub	r0, r0, #16
    2b84:	vld1.32	{d18-d19}, [r0], r2
    2b88:	vld1.32	{d20-d21}, [r6]!
    2b8c:	subs	r3, r3, #4
    2b90:	vrev64.32	q9, q9
    2b94:	vmul.i32	q8, q10, q8
    2b98:	vext.8	q9, q9, q9, #8
    2b9c:	vst1.32	{d18-d19}, [r1]!
    2ba0:	bne	2b84 <transpose_array+0x80>
    2ba4:	vext.8	q9, q8, q8, #8
    2ba8:	cmp	r5, r7
    2bac:	vmul.i32	q0, q8, q9
    2bb0:	vmul.i32	q8, q0, d0[1]
    2bb4:	vmov.32	r4, d16[0]
    2bb8:	beq	2bec <transpose_array+0xe8>
    2bbc:	sub	r0, r7, r5
    2bc0:	sub	r1, fp, #60	; 0x3c
    2bc4:	add	r2, sp, #36	; 0x24
    2bc8:	add	r0, r0, #1
    2bcc:	ldr	r3, [r1, -r0, lsl #2]
    2bd0:	add	r0, r0, #1
    2bd4:	cmp	r0, #1
    2bd8:	str	r3, [r2, r7, lsl #2]
    2bdc:	ldr	r3, [r1, r7, lsl #2]
    2be0:	add	r7, r7, #1
    2be4:	mul	r4, r3, r4
    2be8:	bne	2bcc <transpose_array+0xc8>
    2bec:	mov	r7, #0
    2bf0:	cmp	r4, #2
    2bf4:	blt	2fd8 <transpose_array+0x4d4>
    2bf8:	cmp	r5, #1
    2bfc:	mov	r1, #1
    2c00:	sub	r6, fp, #100	; 0x64
    2c04:	add	sl, sp, #36	; 0x24
    2c08:	subge	r0, r5, #1
    2c0c:	str	r1, [r6, r5, lsl #2]
    2c10:	str	r1, [sl, r5, lsl #2]
    2c14:	strge	r1, [r6, r0, lsl #2]
    2c18:	cmpge	r0, #1
    2c1c:	bge	2d64 <transpose_array+0x260>
    2c20:	mov	r0, #0
    2c24:	str	r0, [r9, r5, lsl #2]
    2c28:	str	r0, [sl, r5, lsl #2]
    2c2c:	mul	r5, r4, r8
    2c30:	mov	r0, r5
    2c34:	bl	0 <malloc>
    2c38:	cmp	r0, #0
    2c3c:	str	r0, [sp, #28]
    2c40:	beq	2d38 <transpose_array+0x234>
    2c44:	sub	r0, r8, #1
    2c48:	str	r5, [sp, #8]
    2c4c:	cmp	r0, #7
    2c50:	bhi	3044 <transpose_array+0x540>
    2c54:	add	r1, pc, #0
    2c58:	ldr	pc, [r1, r0, lsl #2]
    2c5c:	.word	0x00002c7c
    2c60:	.word	0x00002e40
    2c64:	.word	0x00003044
    2c68:	.word	0x00002f00
    2c6c:	.word	0x00003044
    2c70:	.word	0x00003044
    2c74:	.word	0x00003044
    2c78:	.word	0x00002d80
    2c7c:	cmp	r4, #1
    2c80:	blt	2fb8 <transpose_array+0x4b4>
    2c84:	add	r0, r6, #4
    2c88:	ldr	ip, [sp, #36]	; 0x24
    2c8c:	ldr	lr, [fp, #-100]	; 0xffffff9c
    2c90:	mov	r3, #0
    2c94:	mov	r1, #0
    2c98:	str	r0, [sp, #20]
    2c9c:	add	r0, sl, #4
    2ca0:	str	r0, [sp, #16]
    2ca4:	orr	r0, r9, #4
    2ca8:	str	r0, [sp, #12]
    2cac:	mov	r0, #0
    2cb0:	str	ip, [sp, #24]
    2cb4:	b	2cc8 <transpose_array+0x1c4>
    2cb8:	ldr	ip, [sp, #24]
    2cbc:	add	r0, r0, #1
    2cc0:	cmp	r0, r4
    2cc4:	beq	2fb8 <transpose_array+0x4b4>
    2cc8:	ldr	r2, [sp, #32]
    2ccc:	ldr	r7, [sp, #28]
    2cd0:	ldrb	r2, [r2, r0]
    2cd4:	strb	r2, [r7, r1]
    2cd8:	ldr	r2, [sp, #72]	; 0x48
    2cdc:	add	r1, lr, r1
    2ce0:	add	r2, r2, #1
    2ce4:	cmp	r2, ip
    2ce8:	str	r2, [sp, #72]	; 0x48
    2cec:	bne	2cb8 <transpose_array+0x1b4>
    2cf0:	ldr	r2, [sp, #20]
    2cf4:	ldr	r6, [sp, #16]
    2cf8:	ldr	r8, [sp, #12]
    2cfc:	mov	r5, lr
    2d00:	ldr	sl, [r2], #4
    2d04:	str	r3, [r8, #-4]
    2d08:	ldr	r9, [r8]
    2d0c:	add	r1, sl, r1
    2d10:	mls	r1, r5, ip, r1
    2d14:	ldr	r5, [r6], #4
    2d18:	add	r7, r9, #1
    2d1c:	str	r7, [r8]
    2d20:	add	r8, r8, #4
    2d24:	mov	ip, r7
    2d28:	cmp	r7, r5
    2d2c:	mov	r5, sl
    2d30:	beq	2d00 <transpose_array+0x1fc>
    2d34:	b	2cb8 <transpose_array+0x1b4>
    2d38:	movw	r1, #0
    2d3c:	movw	r3, #0
    2d40:	mov	r0, #93	; 0x5d
    2d44:	mov	r2, r5
    2d48:	mvn	r7, #0
    2d4c:	movt	r1, #0
    2d50:	movt	r3, #0
    2d54:	str	r0, [sp]
    2d58:	mvn	r0, #0
    2d5c:	bl	0 <coda_set_error>
    2d60:	b	2fd8 <transpose_array+0x4d4>
    2d64:	sub	r3, r5, #1
    2d68:	mov	r2, #1
    2d6c:	cmp	r5, #2
    2d70:	and	ip, r3, #1
    2d74:	bne	2fe4 <transpose_array+0x4e0>
    2d78:	mov	lr, r6
    2d7c:	b	3024 <transpose_array+0x520>
    2d80:	cmp	r4, #1
    2d84:	blt	2fb8 <transpose_array+0x4b4>
    2d88:	ldr	ip, [sp, #36]	; 0x24
    2d8c:	ldr	lr, [fp, #-100]	; 0xffffff9c
    2d90:	add	r0, r6, #4
    2d94:	mov	r1, #0
    2d98:	str	r0, [sp, #24]
    2d9c:	add	r0, sl, #4
    2da0:	mov	sl, #0
    2da4:	str	r0, [sp, #20]
    2da8:	orr	r0, r9, #4
    2dac:	mov	r9, #0
    2db0:	str	r0, [sp, #16]
    2db4:	b	2dc4 <transpose_array+0x2c0>
    2db8:	add	sl, sl, #1
    2dbc:	cmp	sl, r4
    2dc0:	beq	2fb8 <transpose_array+0x4b4>
    2dc4:	ldr	r2, [sp, #32]
    2dc8:	ldr	r6, [sp, #28]
    2dcc:	ldr	r5, [r2, sl, lsl #3]!
    2dd0:	ldr	r2, [r2, #4]
    2dd4:	str	r5, [r6, r1, lsl #3]!
    2dd8:	add	r1, lr, r1
    2ddc:	str	r2, [r6, #4]
    2de0:	ldr	r2, [sp, #72]	; 0x48
    2de4:	add	r2, r2, #1
    2de8:	cmp	r2, ip
    2dec:	str	r2, [sp, #72]	; 0x48
    2df0:	bne	2db8 <transpose_array+0x2b4>
    2df4:	ldr	r2, [sp, #24]
    2df8:	ldr	r6, [sp, #20]
    2dfc:	ldr	r8, [sp, #16]
    2e00:	mov	r5, lr
    2e04:	mov	r7, ip
    2e08:	ldr	r3, [r2], #4
    2e0c:	str	r9, [r8, #-4]
    2e10:	ldr	r0, [r8]
    2e14:	add	r1, r3, r1
    2e18:	mls	r1, r5, r7, r1
    2e1c:	ldr	r5, [r6], #4
    2e20:	add	r0, r0, #1
    2e24:	str	r0, [r8]
    2e28:	add	r8, r8, #4
    2e2c:	mov	r7, r0
    2e30:	cmp	r0, r5
    2e34:	mov	r5, r3
    2e38:	beq	2e08 <transpose_array+0x304>
    2e3c:	b	2db8 <transpose_array+0x2b4>
    2e40:	cmp	r4, #1
    2e44:	blt	2fb8 <transpose_array+0x4b4>
    2e48:	ldr	ip, [sp, #36]	; 0x24
    2e4c:	ldr	lr, [fp, #-100]	; 0xffffff9c
    2e50:	add	r0, r6, #4
    2e54:	mov	r1, #0
    2e58:	str	r0, [sp, #24]
    2e5c:	add	r0, sl, #4
    2e60:	mov	sl, #0
    2e64:	str	r0, [sp, #20]
    2e68:	orr	r0, r9, #4
    2e6c:	mov	r9, #0
    2e70:	str	r0, [sp, #16]
    2e74:	b	2e84 <transpose_array+0x380>
    2e78:	add	sl, sl, #1
    2e7c:	cmp	sl, r4
    2e80:	beq	2fb8 <transpose_array+0x4b4>
    2e84:	ldr	r0, [sp, #28]
    2e88:	add	r2, r0, r1, lsl #1
    2e8c:	ldr	r0, [sp, #32]
    2e90:	add	r1, lr, r1
    2e94:	add	r5, r0, sl, lsl #1
    2e98:	ldrh	r5, [r5]
    2e9c:	strh	r5, [r2]
    2ea0:	ldr	r2, [sp, #72]	; 0x48
    2ea4:	add	r2, r2, #1
    2ea8:	cmp	r2, ip
    2eac:	str	r2, [sp, #72]	; 0x48
    2eb0:	bne	2e78 <transpose_array+0x374>
    2eb4:	ldr	r2, [sp, #24]
    2eb8:	ldr	r6, [sp, #20]
    2ebc:	ldr	r8, [sp, #16]
    2ec0:	mov	r5, lr
    2ec4:	mov	r7, ip
    2ec8:	ldr	r3, [r2], #4
    2ecc:	str	r9, [r8, #-4]
    2ed0:	ldr	r0, [r8]
    2ed4:	add	r1, r3, r1
    2ed8:	mls	r1, r5, r7, r1
    2edc:	ldr	r5, [r6], #4
    2ee0:	add	r0, r0, #1
    2ee4:	str	r0, [r8]
    2ee8:	add	r8, r8, #4
    2eec:	mov	r7, r0
    2ef0:	cmp	r0, r5
    2ef4:	mov	r5, r3
    2ef8:	beq	2ec8 <transpose_array+0x3c4>
    2efc:	b	2e78 <transpose_array+0x374>
    2f00:	cmp	r4, #1
    2f04:	blt	2fb8 <transpose_array+0x4b4>
    2f08:	ldr	ip, [sp, #36]	; 0x24
    2f0c:	ldr	lr, [fp, #-100]	; 0xffffff9c
    2f10:	add	r0, r6, #4
    2f14:	mov	r1, #0
    2f18:	str	r0, [sp, #24]
    2f1c:	add	r0, sl, #4
    2f20:	mov	sl, #0
    2f24:	str	r0, [sp, #20]
    2f28:	orr	r0, r9, #4
    2f2c:	mov	r9, #0
    2f30:	str	r0, [sp, #16]
    2f34:	b	2f44 <transpose_array+0x440>
    2f38:	add	sl, sl, #1
    2f3c:	cmp	sl, r4
    2f40:	beq	2fb8 <transpose_array+0x4b4>
    2f44:	ldr	r0, [sp, #32]
    2f48:	ldr	r2, [r0, sl, lsl #2]
    2f4c:	ldr	r0, [sp, #28]
    2f50:	str	r2, [r0, r1, lsl #2]
    2f54:	ldr	r2, [sp, #72]	; 0x48
    2f58:	add	r1, lr, r1
    2f5c:	add	r2, r2, #1
    2f60:	cmp	r2, ip
    2f64:	str	r2, [sp, #72]	; 0x48
    2f68:	bne	2f38 <transpose_array+0x434>
    2f6c:	ldr	r2, [sp, #24]
    2f70:	ldr	r6, [sp, #20]
    2f74:	ldr	r8, [sp, #16]
    2f78:	mov	r5, lr
    2f7c:	mov	r7, ip
    2f80:	ldr	r3, [r2], #4
    2f84:	str	r9, [r8, #-4]
    2f88:	ldr	r0, [r8]
    2f8c:	add	r1, r3, r1
    2f90:	mls	r1, r5, r7, r1
    2f94:	ldr	r5, [r6], #4
    2f98:	add	r0, r0, #1
    2f9c:	str	r0, [r8]
    2fa0:	add	r8, r8, #4
    2fa4:	mov	r7, r0
    2fa8:	cmp	r0, r5
    2fac:	mov	r5, r3
    2fb0:	beq	2f80 <transpose_array+0x47c>
    2fb4:	b	2f38 <transpose_array+0x434>
    2fb8:	ldr	r4, [sp, #28]
    2fbc:	ldr	r0, [sp, #32]
    2fc0:	ldr	r2, [sp, #8]
    2fc4:	mov	r1, r4
    2fc8:	bl	0 <memcpy>
    2fcc:	mov	r0, r4
    2fd0:	bl	0 <free>
    2fd4:	mov	r7, #0
    2fd8:	mov	r0, r7
    2fdc:	sub	sp, fp, #28
    2fe0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2fe4:	add	r2, r6, r5, lsl #2
    2fe8:	add	r3, sl, r3, lsl #2
    2fec:	mov	lr, r6
    2ff0:	sub	r6, r2, #12
    2ff4:	mov	r2, #1
    2ff8:	ldr	r1, [r3]
    2ffc:	ldr	r7, [r3, #-4]
    3000:	sub	r0, r0, #2
    3004:	sub	r3, r3, #8
    3008:	cmp	ip, r0
    300c:	mul	r1, r1, r2
    3010:	mul	r2, r7, r1
    3014:	str	r2, [r6]
    3018:	str	r1, [r6, #4]
    301c:	sub	r6, r6, #8
    3020:	bne	2ff8 <transpose_array+0x4f4>
    3024:	cmp	ip, #0
    3028:	mov	r6, lr
    302c:	beq	2c20 <transpose_array+0x11c>
    3030:	add	r1, r6, r0, lsl #2
    3034:	ldr	r0, [sl, r0, lsl #2]
    3038:	mul	r0, r0, r2
    303c:	str	r0, [r1, #-4]
    3040:	b	2c20 <transpose_array+0x11c>
    3044:	movw	r0, #0
    3048:	movw	r1, #0
    304c:	movw	r3, #0
    3050:	mov	r2, #172	; 0xac
    3054:	movt	r0, #0
    3058:	movt	r1, #0
    305c:	movt	r3, #0
    3060:	bl	0 <__assert_fail>

00003064 <coda_ascii_cursor_read_uint8_array>:
    3064:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3068:	add	fp, sp, #28
    306c:	sub	sp, sp, #572	; 0x23c
    3070:	mov	r9, r0
    3074:	ldr	r0, [r0, #4]
    3078:	mov	r4, r2
    307c:	add	r0, r9, r0, lsl #4
    3080:	ldr	r0, [r0, #-8]
    3084:	ldr	r2, [r0]
    3088:	cmp	r2, #99	; 0x63
    308c:	ldrhi	r0, [r0, #4]
    3090:	ldr	r0, [r0, #40]	; 0x28
    3094:	ldr	r0, [r0]
    3098:	cmp	r0, #0
    309c:	bne	32c4 <coda_ascii_cursor_read_uint8_array+0x260>
    30a0:	add	r5, sp, #8
    30a4:	mov	r8, r1
    30a8:	add	r1, sp, #4
    30ac:	mov	r0, r9
    30b0:	mov	r2, r5
    30b4:	bl	0 <coda_cursor_get_array_dim>
    30b8:	cmp	r0, #0
    30bc:	bne	31fc <coda_ascii_cursor_read_uint8_array+0x198>
    30c0:	add	r0, sp, #40	; 0x28
    30c4:	mov	r1, r9
    30c8:	mov	r2, #520	; 0x208
    30cc:	bl	0 <memcpy>
    30d0:	ldr	r0, [sp, #4]
    30d4:	str	r4, [sp]
    30d8:	cmp	r0, #1
    30dc:	blt	30f8 <coda_ascii_cursor_read_uint8_array+0x94>
    30e0:	cmp	r0, #4
    30e4:	bcs	3104 <coda_ascii_cursor_read_uint8_array+0xa0>
    30e8:	mov	r4, #1
    30ec:	mov	lr, #0
    30f0:	mov	r5, r8
    30f4:	b	31c0 <coda_ascii_cursor_read_uint8_array+0x15c>
    30f8:	mov	r4, #1
    30fc:	mov	r5, r8
    3100:	b	31e4 <coda_ascii_cursor_read_uint8_array+0x180>
    3104:	bic	lr, r0, #3
    3108:	mov	r2, #1
    310c:	vmov.i32	q8, #1	; 0x00000001
    3110:	sub	r7, lr, #4
    3114:	add	r3, r2, r7, lsr #2
    3118:	cmp	r7, #12
    311c:	and	ip, r3, #3
    3120:	bcs	3134 <coda_ascii_cursor_read_uint8_array+0xd0>
    3124:	mov	r3, #0
    3128:	cmp	ip, #0
    312c:	bne	3188 <coda_ascii_cursor_read_uint8_array+0x124>
    3130:	b	31a4 <coda_ascii_cursor_read_uint8_array+0x140>
    3134:	sub	r6, r3, ip
    3138:	mov	r3, #0
    313c:	mov	r4, #64	; 0x40
    3140:	mov	r7, r5
    3144:	vld1.32	{d18-d19}, [r7], r4
    3148:	add	r1, r5, #16
    314c:	add	r2, r5, #32
    3150:	subs	r6, r6, #4
    3154:	add	r3, r3, #16
    3158:	vld1.32	{d20-d21}, [r1]
    315c:	add	r1, r5, #48	; 0x30
    3160:	mov	r5, r7
    3164:	vmul.i32	q8, q9, q8
    3168:	vld1.32	{d18-d19}, [r2]
    316c:	vmul.i32	q8, q10, q8
    3170:	vld1.32	{d20-d21}, [r1]
    3174:	vmul.i32	q8, q9, q8
    3178:	vmul.i32	q8, q10, q8
    317c:	bne	3144 <coda_ascii_cursor_read_uint8_array+0xe0>
    3180:	cmp	ip, #0
    3184:	beq	31a4 <coda_ascii_cursor_read_uint8_array+0x140>
    3188:	add	r1, sp, #8
    318c:	rsb	r2, ip, #0
    3190:	add	r3, r1, r3, lsl #2
    3194:	vld1.32	{d18-d19}, [r3]!
    3198:	adds	r2, r2, #1
    319c:	vmul.i32	q8, q9, q8
    31a0:	bcc	3194 <coda_ascii_cursor_read_uint8_array+0x130>
    31a4:	vext.8	q9, q8, q8, #8
    31a8:	cmp	r0, lr
    31ac:	mov	r5, r8
    31b0:	vmul.i32	q0, q8, q9
    31b4:	vmul.i32	q8, q0, d0[1]
    31b8:	vmov.32	r4, d16[0]
    31bc:	beq	31dc <coda_ascii_cursor_read_uint8_array+0x178>
    31c0:	add	r1, sp, #8
    31c4:	sub	r0, r0, lr
    31c8:	add	r2, r1, lr, lsl #2
    31cc:	ldr	r1, [r2], #4
    31d0:	subs	r0, r0, #1
    31d4:	mul	r4, r1, r4
    31d8:	bne	31cc <coda_ascii_cursor_read_uint8_array+0x168>
    31dc:	cmp	r4, #1
    31e0:	blt	326c <coda_ascii_cursor_read_uint8_array+0x208>
    31e4:	add	r0, sp, #40	; 0x28
    31e8:	mov	r1, #0
    31ec:	mov	r6, #0
    31f0:	bl	0 <coda_cursor_goto_array_element_by_index>
    31f4:	cmp	r0, #0
    31f8:	beq	3208 <coda_ascii_cursor_read_uint8_array+0x1a4>
    31fc:	mvn	r0, #0
    3200:	sub	sp, fp, #28
    3204:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3208:	sub	r8, r4, #1
    320c:	add	r7, sp, #40	; 0x28
    3210:	sub	sl, fp, #40	; 0x28
    3214:	b	3224 <coda_ascii_cursor_read_uint8_array+0x1c0>
    3218:	add	r6, r6, #1
    321c:	cmp	r4, r6
    3220:	beq	326c <coda_ascii_cursor_read_uint8_array+0x208>
    3224:	mov	r0, r7
    3228:	mov	r1, sl
    322c:	bl	1b40 <coda_ascii_cursor_read_uint64>
    3230:	cmp	r0, #0
    3234:	bne	31fc <coda_ascii_cursor_read_uint8_array+0x198>
    3238:	ldr	r0, [fp, #-40]	; 0xffffffd8
    323c:	ldr	r1, [fp, #-36]	; 0xffffffdc
    3240:	subs	r2, r0, #256	; 0x100
    3244:	sbcs	r1, r1, #0
    3248:	bcs	32ac <coda_ascii_cursor_read_uint8_array+0x248>
    324c:	cmp	r6, r8
    3250:	strb	r0, [r5, r6]
    3254:	bge	3218 <coda_ascii_cursor_read_uint8_array+0x1b4>
    3258:	mov	r0, r7
    325c:	bl	0 <coda_cursor_goto_next_array_element>
    3260:	cmp	r0, #0
    3264:	beq	3218 <coda_ascii_cursor_read_uint8_array+0x1b4>
    3268:	b	31fc <coda_ascii_cursor_read_uint8_array+0x198>
    326c:	ldr	r0, [sp]
    3270:	cmp	r0, #0
    3274:	beq	32a0 <coda_ascii_cursor_read_uint8_array+0x23c>
    3278:	mov	r0, r9
    327c:	mov	r1, r5
    3280:	mov	r2, #1
    3284:	bl	2b04 <transpose_array>
    3288:	mov	r1, r0
    328c:	mvn	r0, #0
    3290:	cmp	r1, #0
    3294:	moveq	r0, #0
    3298:	sub	sp, fp, #28
    329c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    32a0:	mov	r0, #0
    32a4:	sub	sp, fp, #28
    32a8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    32ac:	movw	r0, #65236	; 0xfed4
    32b0:	movw	r1, #0
    32b4:	movt	r0, #65535	; 0xffff
    32b8:	movt	r1, #0
    32bc:	bl	0 <coda_set_error>
    32c0:	b	31fc <coda_ascii_cursor_read_uint8_array+0x198>
    32c4:	movw	r0, #0
    32c8:	movw	r1, #0
    32cc:	movw	r3, #0
    32d0:	movw	r2, #1484	; 0x5cc
    32d4:	movt	r0, #0
    32d8:	movt	r1, #0
    32dc:	movt	r3, #0
    32e0:	bl	0 <__assert_fail>

000032e4 <coda_ascii_cursor_read_int16_array>:
    32e4:	push	{r4, r5, r6, r7, fp, lr}
    32e8:	add	fp, sp, #16
    32ec:	mov	r5, r0
    32f0:	ldr	r0, [r0, #4]
    32f4:	mov	r4, r1
    32f8:	mov	r6, r2
    32fc:	add	r0, r5, r0, lsl #4
    3300:	ldr	r0, [r0, #-8]
    3304:	ldr	r1, [r0]
    3308:	cmp	r1, #99	; 0x63
    330c:	ldrhi	r0, [r0, #4]
    3310:	ldr	r0, [r0, #40]	; 0x28
    3314:	ldr	r0, [r0]
    3318:	cmp	r0, #0
    331c:	bne	3380 <coda_ascii_cursor_read_int16_array+0x9c>
    3320:	movw	r1, #0
    3324:	mov	r0, r5
    3328:	mov	r2, r4
    332c:	mov	r3, #2
    3330:	movt	r1, #0
    3334:	bl	2934 <read_array>
    3338:	mvn	r7, #0
    333c:	cmp	r0, #0
    3340:	beq	334c <coda_ascii_cursor_read_int16_array+0x68>
    3344:	mov	r0, r7
    3348:	pop	{r4, r5, r6, r7, fp, pc}
    334c:	cmp	r6, #0
    3350:	beq	3374 <coda_ascii_cursor_read_int16_array+0x90>
    3354:	mov	r0, r5
    3358:	mov	r1, r4
    335c:	mov	r2, #2
    3360:	bl	2b04 <transpose_array>
    3364:	cmp	r0, #0
    3368:	moveq	r7, #0
    336c:	mov	r0, r7
    3370:	pop	{r4, r5, r6, r7, fp, pc}
    3374:	mov	r7, #0
    3378:	mov	r0, r7
    337c:	pop	{r4, r5, r6, r7, fp, pc}
    3380:	movw	r0, #0
    3384:	movw	r1, #0
    3388:	movw	r3, #0
    338c:	mov	r2, #1504	; 0x5e0
    3390:	movt	r0, #0
    3394:	movt	r1, #0
    3398:	movt	r3, #0
    339c:	bl	0 <__assert_fail>

000033a0 <coda_ascii_cursor_read_uint16_array>:
    33a0:	push	{r4, r5, r6, r7, fp, lr}
    33a4:	add	fp, sp, #16
    33a8:	mov	r5, r0
    33ac:	ldr	r0, [r0, #4]
    33b0:	mov	r4, r1
    33b4:	mov	r6, r2
    33b8:	add	r0, r5, r0, lsl #4
    33bc:	ldr	r0, [r0, #-8]
    33c0:	ldr	r1, [r0]
    33c4:	cmp	r1, #99	; 0x63
    33c8:	ldrhi	r0, [r0, #4]
    33cc:	ldr	r0, [r0, #40]	; 0x28
    33d0:	ldr	r0, [r0]
    33d4:	cmp	r0, #0
    33d8:	bne	343c <coda_ascii_cursor_read_uint16_array+0x9c>
    33dc:	movw	r1, #0
    33e0:	mov	r0, r5
    33e4:	mov	r2, r4
    33e8:	mov	r3, #2
    33ec:	movt	r1, #0
    33f0:	bl	2934 <read_array>
    33f4:	mvn	r7, #0
    33f8:	cmp	r0, #0
    33fc:	beq	3408 <coda_ascii_cursor_read_uint16_array+0x68>
    3400:	mov	r0, r7
    3404:	pop	{r4, r5, r6, r7, fp, pc}
    3408:	cmp	r6, #0
    340c:	beq	3430 <coda_ascii_cursor_read_uint16_array+0x90>
    3410:	mov	r0, r5
    3414:	mov	r1, r4
    3418:	mov	r2, #2
    341c:	bl	2b04 <transpose_array>
    3420:	cmp	r0, #0
    3424:	moveq	r7, #0
    3428:	mov	r0, r7
    342c:	pop	{r4, r5, r6, r7, fp, pc}
    3430:	mov	r7, #0
    3434:	mov	r0, r7
    3438:	pop	{r4, r5, r6, r7, fp, pc}
    343c:	movw	r0, #0
    3440:	movw	r1, #0
    3444:	movw	r3, #0
    3448:	movw	r2, #1524	; 0x5f4
    344c:	movt	r0, #0
    3450:	movt	r1, #0
    3454:	movt	r3, #0
    3458:	bl	0 <__assert_fail>

0000345c <coda_ascii_cursor_read_int32_array>:
    345c:	push	{r4, r5, r6, r7, fp, lr}
    3460:	add	fp, sp, #16
    3464:	mov	r5, r0
    3468:	ldr	r0, [r0, #4]
    346c:	mov	r4, r1
    3470:	mov	r6, r2
    3474:	add	r0, r5, r0, lsl #4
    3478:	ldr	r0, [r0, #-8]
    347c:	ldr	r1, [r0]
    3480:	cmp	r1, #99	; 0x63
    3484:	ldrhi	r0, [r0, #4]
    3488:	ldr	r0, [r0, #40]	; 0x28
    348c:	ldr	r0, [r0]
    3490:	cmp	r0, #0
    3494:	bne	34f8 <coda_ascii_cursor_read_int32_array+0x9c>
    3498:	movw	r1, #0
    349c:	mov	r0, r5
    34a0:	mov	r2, r4
    34a4:	mov	r3, #4
    34a8:	movt	r1, #0
    34ac:	bl	2934 <read_array>
    34b0:	mvn	r7, #0
    34b4:	cmp	r0, #0
    34b8:	beq	34c4 <coda_ascii_cursor_read_int32_array+0x68>
    34bc:	mov	r0, r7
    34c0:	pop	{r4, r5, r6, r7, fp, pc}
    34c4:	cmp	r6, #0
    34c8:	beq	34ec <coda_ascii_cursor_read_int32_array+0x90>
    34cc:	mov	r0, r5
    34d0:	mov	r1, r4
    34d4:	mov	r2, #4
    34d8:	bl	2b04 <transpose_array>
    34dc:	cmp	r0, #0
    34e0:	moveq	r7, #0
    34e4:	mov	r0, r7
    34e8:	pop	{r4, r5, r6, r7, fp, pc}
    34ec:	mov	r7, #0
    34f0:	mov	r0, r7
    34f4:	pop	{r4, r5, r6, r7, fp, pc}
    34f8:	movw	r0, #0
    34fc:	movw	r1, #0
    3500:	movw	r3, #0
    3504:	movw	r2, #1544	; 0x608
    3508:	movt	r0, #0
    350c:	movt	r1, #0
    3510:	movt	r3, #0
    3514:	bl	0 <__assert_fail>

00003518 <coda_ascii_cursor_read_uint32_array>:
    3518:	push	{r4, r5, r6, r7, fp, lr}
    351c:	add	fp, sp, #16
    3520:	mov	r5, r0
    3524:	ldr	r0, [r0, #4]
    3528:	mov	r4, r1
    352c:	mov	r6, r2
    3530:	add	r0, r5, r0, lsl #4
    3534:	ldr	r0, [r0, #-8]
    3538:	ldr	r1, [r0]
    353c:	cmp	r1, #99	; 0x63
    3540:	ldrhi	r0, [r0, #4]
    3544:	ldr	r0, [r0, #40]	; 0x28
    3548:	ldr	r0, [r0]
    354c:	cmp	r0, #0
    3550:	bne	35b4 <coda_ascii_cursor_read_uint32_array+0x9c>
    3554:	movw	r1, #0
    3558:	mov	r0, r5
    355c:	mov	r2, r4
    3560:	mov	r3, #4
    3564:	movt	r1, #0
    3568:	bl	2934 <read_array>
    356c:	mvn	r7, #0
    3570:	cmp	r0, #0
    3574:	beq	3580 <coda_ascii_cursor_read_uint32_array+0x68>
    3578:	mov	r0, r7
    357c:	pop	{r4, r5, r6, r7, fp, pc}
    3580:	cmp	r6, #0
    3584:	beq	35a8 <coda_ascii_cursor_read_uint32_array+0x90>
    3588:	mov	r0, r5
    358c:	mov	r1, r4
    3590:	mov	r2, #4
    3594:	bl	2b04 <transpose_array>
    3598:	cmp	r0, #0
    359c:	moveq	r7, #0
    35a0:	mov	r0, r7
    35a4:	pop	{r4, r5, r6, r7, fp, pc}
    35a8:	mov	r7, #0
    35ac:	mov	r0, r7
    35b0:	pop	{r4, r5, r6, r7, fp, pc}
    35b4:	movw	r0, #0
    35b8:	movw	r1, #0
    35bc:	movw	r3, #0
    35c0:	movw	r2, #1564	; 0x61c
    35c4:	movt	r0, #0
    35c8:	movt	r1, #0
    35cc:	movt	r3, #0
    35d0:	bl	0 <__assert_fail>

000035d4 <coda_ascii_cursor_read_int64_array>:
    35d4:	push	{r4, r5, r6, r7, fp, lr}
    35d8:	add	fp, sp, #16
    35dc:	mov	r5, r0
    35e0:	ldr	r0, [r0, #4]
    35e4:	mov	r4, r1
    35e8:	mov	r6, r2
    35ec:	add	r0, r5, r0, lsl #4
    35f0:	ldr	r0, [r0, #-8]
    35f4:	ldr	r1, [r0]
    35f8:	cmp	r1, #99	; 0x63
    35fc:	ldrhi	r0, [r0, #4]
    3600:	ldr	r0, [r0, #40]	; 0x28
    3604:	ldr	r0, [r0]
    3608:	cmp	r0, #0
    360c:	bne	3670 <coda_ascii_cursor_read_int64_array+0x9c>
    3610:	movw	r1, #0
    3614:	mov	r0, r5
    3618:	mov	r2, r4
    361c:	mov	r3, #8
    3620:	movt	r1, #0
    3624:	bl	2934 <read_array>
    3628:	mvn	r7, #0
    362c:	cmp	r0, #0
    3630:	beq	363c <coda_ascii_cursor_read_int64_array+0x68>
    3634:	mov	r0, r7
    3638:	pop	{r4, r5, r6, r7, fp, pc}
    363c:	cmp	r6, #0
    3640:	beq	3664 <coda_ascii_cursor_read_int64_array+0x90>
    3644:	mov	r0, r5
    3648:	mov	r1, r4
    364c:	mov	r2, #4
    3650:	bl	2b04 <transpose_array>
    3654:	cmp	r0, #0
    3658:	moveq	r7, #0
    365c:	mov	r0, r7
    3660:	pop	{r4, r5, r6, r7, fp, pc}
    3664:	mov	r7, #0
    3668:	mov	r0, r7
    366c:	pop	{r4, r5, r6, r7, fp, pc}
    3670:	movw	r0, #0
    3674:	movw	r1, #0
    3678:	movw	r3, #0
    367c:	mov	r2, #1584	; 0x630
    3680:	movt	r0, #0
    3684:	movt	r1, #0
    3688:	movt	r3, #0
    368c:	bl	0 <__assert_fail>

00003690 <coda_ascii_cursor_read_uint64_array>:
    3690:	push	{r4, r5, r6, r7, fp, lr}
    3694:	add	fp, sp, #16
    3698:	mov	r5, r0
    369c:	ldr	r0, [r0, #4]
    36a0:	mov	r4, r1
    36a4:	mov	r6, r2
    36a8:	add	r0, r5, r0, lsl #4
    36ac:	ldr	r0, [r0, #-8]
    36b0:	ldr	r1, [r0]
    36b4:	cmp	r1, #99	; 0x63
    36b8:	ldrhi	r0, [r0, #4]
    36bc:	ldr	r0, [r0, #40]	; 0x28
    36c0:	ldr	r0, [r0]
    36c4:	cmp	r0, #0
    36c8:	bne	372c <coda_ascii_cursor_read_uint64_array+0x9c>
    36cc:	movw	r1, #0
    36d0:	mov	r0, r5
    36d4:	mov	r2, r4
    36d8:	mov	r3, #8
    36dc:	movt	r1, #0
    36e0:	bl	2934 <read_array>
    36e4:	mvn	r7, #0
    36e8:	cmp	r0, #0
    36ec:	beq	36f8 <coda_ascii_cursor_read_uint64_array+0x68>
    36f0:	mov	r0, r7
    36f4:	pop	{r4, r5, r6, r7, fp, pc}
    36f8:	cmp	r6, #0
    36fc:	beq	3720 <coda_ascii_cursor_read_uint64_array+0x90>
    3700:	mov	r0, r5
    3704:	mov	r1, r4
    3708:	mov	r2, #8
    370c:	bl	2b04 <transpose_array>
    3710:	cmp	r0, #0
    3714:	moveq	r7, #0
    3718:	mov	r0, r7
    371c:	pop	{r4, r5, r6, r7, fp, pc}
    3720:	mov	r7, #0
    3724:	mov	r0, r7
    3728:	pop	{r4, r5, r6, r7, fp, pc}
    372c:	movw	r0, #0
    3730:	movw	r1, #0
    3734:	movw	r3, #0
    3738:	movw	r2, #1604	; 0x644
    373c:	movt	r0, #0
    3740:	movt	r1, #0
    3744:	movt	r3, #0
    3748:	bl	0 <__assert_fail>

0000374c <coda_ascii_cursor_read_float_array>:
    374c:	push	{r4, r5, r6, r7, fp, lr}
    3750:	add	fp, sp, #16
    3754:	mov	r5, r0
    3758:	ldr	r0, [r0, #4]
    375c:	mov	r4, r1
    3760:	mov	r6, r2
    3764:	add	r0, r5, r0, lsl #4
    3768:	ldr	r0, [r0, #-8]
    376c:	ldr	r1, [r0]
    3770:	cmp	r1, #99	; 0x63
    3774:	ldrhi	r0, [r0, #4]
    3778:	ldr	r0, [r0, #40]	; 0x28
    377c:	ldr	r0, [r0]
    3780:	cmp	r0, #0
    3784:	bne	37e8 <coda_ascii_cursor_read_float_array+0x9c>
    3788:	movw	r1, #0
    378c:	mov	r0, r5
    3790:	mov	r2, r4
    3794:	mov	r3, #4
    3798:	movt	r1, #0
    379c:	bl	2934 <read_array>
    37a0:	mvn	r7, #0
    37a4:	cmp	r0, #0
    37a8:	beq	37b4 <coda_ascii_cursor_read_float_array+0x68>
    37ac:	mov	r0, r7
    37b0:	pop	{r4, r5, r6, r7, fp, pc}
    37b4:	cmp	r6, #0
    37b8:	beq	37dc <coda_ascii_cursor_read_float_array+0x90>
    37bc:	mov	r0, r5
    37c0:	mov	r1, r4
    37c4:	mov	r2, #4
    37c8:	bl	2b04 <transpose_array>
    37cc:	cmp	r0, #0
    37d0:	moveq	r7, #0
    37d4:	mov	r0, r7
    37d8:	pop	{r4, r5, r6, r7, fp, pc}
    37dc:	mov	r7, #0
    37e0:	mov	r0, r7
    37e4:	pop	{r4, r5, r6, r7, fp, pc}
    37e8:	movw	r0, #0
    37ec:	movw	r1, #0
    37f0:	movw	r3, #0
    37f4:	movw	r2, #1624	; 0x658
    37f8:	movt	r0, #0
    37fc:	movt	r1, #0
    3800:	movt	r3, #0
    3804:	bl	0 <__assert_fail>

00003808 <coda_ascii_cursor_read_double_array>:
    3808:	push	{r4, r5, r6, r7, fp, lr}
    380c:	add	fp, sp, #16
    3810:	mov	r5, r0
    3814:	ldr	r0, [r0, #4]
    3818:	mov	r4, r1
    381c:	mov	r6, r2
    3820:	add	r0, r5, r0, lsl #4
    3824:	ldr	r0, [r0, #-8]
    3828:	ldr	r1, [r0]
    382c:	cmp	r1, #99	; 0x63
    3830:	ldrhi	r0, [r0, #4]
    3834:	ldr	r0, [r0, #40]	; 0x28
    3838:	ldr	r0, [r0]
    383c:	cmp	r0, #0
    3840:	bne	38a4 <coda_ascii_cursor_read_double_array+0x9c>
    3844:	movw	r1, #0
    3848:	mov	r0, r5
    384c:	mov	r2, r4
    3850:	mov	r3, #8
    3854:	movt	r1, #0
    3858:	bl	2934 <read_array>
    385c:	mvn	r7, #0
    3860:	cmp	r0, #0
    3864:	beq	3870 <coda_ascii_cursor_read_double_array+0x68>
    3868:	mov	r0, r7
    386c:	pop	{r4, r5, r6, r7, fp, pc}
    3870:	cmp	r6, #0
    3874:	beq	3898 <coda_ascii_cursor_read_double_array+0x90>
    3878:	mov	r0, r5
    387c:	mov	r1, r4
    3880:	mov	r2, #8
    3884:	bl	2b04 <transpose_array>
    3888:	cmp	r0, #0
    388c:	moveq	r7, #0
    3890:	mov	r0, r7
    3894:	pop	{r4, r5, r6, r7, fp, pc}
    3898:	mov	r7, #0
    389c:	mov	r0, r7
    38a0:	pop	{r4, r5, r6, r7, fp, pc}
    38a4:	movw	r0, #0
    38a8:	movw	r1, #0
    38ac:	movw	r3, #0
    38b0:	movw	r2, #1644	; 0x66c
    38b4:	movt	r0, #0
    38b8:	movt	r1, #0
    38bc:	movt	r3, #0
    38c0:	bl	0 <__assert_fail>

000038c4 <coda_ascii_cursor_read_char_array>:
    38c4:	push	{r4, r5, r6, r7, fp, lr}
    38c8:	add	fp, sp, #16
    38cc:	mov	r5, r0
    38d0:	ldr	r0, [r0, #4]
    38d4:	mov	r4, r1
    38d8:	mov	r6, r2
    38dc:	add	r0, r5, r0, lsl #4
    38e0:	ldr	r0, [r0, #-8]
    38e4:	ldr	r1, [r0]
    38e8:	cmp	r1, #99	; 0x63
    38ec:	ldrhi	r0, [r0, #4]
    38f0:	ldr	r0, [r0, #40]	; 0x28
    38f4:	ldr	r0, [r0]
    38f8:	cmp	r0, #0
    38fc:	bne	3960 <coda_ascii_cursor_read_char_array+0x9c>
    3900:	movw	r1, #0
    3904:	mov	r0, r5
    3908:	mov	r2, r4
    390c:	mov	r3, #1
    3910:	movt	r1, #0
    3914:	bl	2934 <read_array>
    3918:	mvn	r7, #0
    391c:	cmp	r0, #0
    3920:	beq	392c <coda_ascii_cursor_read_char_array+0x68>
    3924:	mov	r0, r7
    3928:	pop	{r4, r5, r6, r7, fp, pc}
    392c:	cmp	r6, #0
    3930:	beq	3954 <coda_ascii_cursor_read_char_array+0x90>
    3934:	mov	r0, r5
    3938:	mov	r1, r4
    393c:	mov	r2, #1
    3940:	bl	2b04 <transpose_array>
    3944:	cmp	r0, #0
    3948:	moveq	r7, #0
    394c:	mov	r0, r7
    3950:	pop	{r4, r5, r6, r7, fp, pc}
    3954:	mov	r7, #0
    3958:	mov	r0, r7
    395c:	pop	{r4, r5, r6, r7, fp, pc}
    3960:	movw	r0, #0
    3964:	movw	r1, #0
    3968:	movw	r3, #0
    396c:	mov	r2, #1664	; 0x680
    3970:	movt	r0, #0
    3974:	movt	r1, #0
    3978:	movt	r3, #0
    397c:	bl	0 <__assert_fail>

00003980 <coda_ascii_cursor_read_int8_partial_array>:
    3980:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3984:	add	fp, sp, #28
    3988:	sub	sp, sp, #532	; 0x214
    398c:	mov	r6, r1
    3990:	mov	r1, r0
    3994:	ldr	r0, [r0, #4]
    3998:	mov	r5, r2
    399c:	mov	r4, r3
    39a0:	add	r0, r1, r0, lsl #4
    39a4:	ldr	r0, [r0, #-8]
    39a8:	ldr	r2, [r0]
    39ac:	cmp	r2, #99	; 0x63
    39b0:	ldrhi	r0, [r0, #4]
    39b4:	ldr	r0, [r0, #40]	; 0x28
    39b8:	ldr	r0, [r0]
    39bc:	cmp	r0, #0
    39c0:	bne	3a88 <coda_ascii_cursor_read_int8_partial_array+0x108>
    39c4:	mov	r0, sp
    39c8:	mov	r2, #520	; 0x208
    39cc:	bl	0 <memcpy>
    39d0:	cmp	r5, #1
    39d4:	blt	3a60 <coda_ascii_cursor_read_int8_partial_array+0xe0>
    39d8:	mov	r0, sp
    39dc:	mov	r1, r6
    39e0:	bl	0 <coda_cursor_goto_array_element_by_index>
    39e4:	mvn	r9, #0
    39e8:	cmp	r0, #0
    39ec:	bne	3a64 <coda_ascii_cursor_read_int8_partial_array+0xe4>
    39f0:	sub	r6, r5, #1
    39f4:	mov	r7, #0
    39f8:	mov	sl, sp
    39fc:	sub	r8, fp, #40	; 0x28
    3a00:	b	3a10 <coda_ascii_cursor_read_int8_partial_array+0x90>
    3a04:	add	r7, r7, #1
    3a08:	cmp	r5, r7
    3a0c:	beq	3a60 <coda_ascii_cursor_read_int8_partial_array+0xe0>
    3a10:	mov	r0, sl
    3a14:	mov	r1, r8
    3a18:	bl	1904 <coda_ascii_cursor_read_int64>
    3a1c:	cmp	r0, #0
    3a20:	bne	3a64 <coda_ascii_cursor_read_int8_partial_array+0xe4>
    3a24:	ldr	r0, [fp, #-40]	; 0xffffffd8
    3a28:	ldr	r1, [fp, #-36]	; 0xffffffdc
    3a2c:	adds	r2, r0, #128	; 0x80
    3a30:	adc	r1, r1, #0
    3a34:	subs	r2, r2, #256	; 0x100
    3a38:	sbcs	r1, r1, #0
    3a3c:	bcs	3a70 <coda_ascii_cursor_read_int8_partial_array+0xf0>
    3a40:	cmp	r7, r6
    3a44:	strb	r0, [r4, r7]
    3a48:	bge	3a04 <coda_ascii_cursor_read_int8_partial_array+0x84>
    3a4c:	mov	r0, sl
    3a50:	bl	0 <coda_cursor_goto_next_array_element>
    3a54:	cmp	r0, #0
    3a58:	beq	3a04 <coda_ascii_cursor_read_int8_partial_array+0x84>
    3a5c:	b	3a64 <coda_ascii_cursor_read_int8_partial_array+0xe4>
    3a60:	mov	r9, #0
    3a64:	mov	r0, r9
    3a68:	sub	sp, fp, #28
    3a6c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3a70:	movw	r0, #65236	; 0xfed4
    3a74:	movw	r1, #0
    3a78:	movt	r0, #65535	; 0xffff
    3a7c:	movt	r1, #0
    3a80:	bl	0 <coda_set_error>
    3a84:	b	3a64 <coda_ascii_cursor_read_int8_partial_array+0xe4>
    3a88:	movw	r0, #0
    3a8c:	movw	r1, #0
    3a90:	movw	r3, #0
    3a94:	movw	r2, #1684	; 0x694
    3a98:	movt	r0, #0
    3a9c:	movt	r1, #0
    3aa0:	movt	r3, #0
    3aa4:	bl	0 <__assert_fail>

00003aa8 <coda_ascii_cursor_read_uint8_partial_array>:
    3aa8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3aac:	add	fp, sp, #28
    3ab0:	sub	sp, sp, #532	; 0x214
    3ab4:	mov	r6, r1
    3ab8:	mov	r1, r0
    3abc:	ldr	r0, [r0, #4]
    3ac0:	mov	r5, r2
    3ac4:	mov	sl, r3
    3ac8:	add	r0, r1, r0, lsl #4
    3acc:	ldr	r0, [r0, #-8]
    3ad0:	ldr	r2, [r0]
    3ad4:	cmp	r2, #99	; 0x63
    3ad8:	ldrhi	r0, [r0, #4]
    3adc:	ldr	r0, [r0, #40]	; 0x28
    3ae0:	ldr	r0, [r0]
    3ae4:	cmp	r0, #0
    3ae8:	bne	3ba8 <coda_ascii_cursor_read_uint8_partial_array+0x100>
    3aec:	mov	r0, sp
    3af0:	mov	r2, #520	; 0x208
    3af4:	bl	0 <memcpy>
    3af8:	cmp	r5, #1
    3afc:	blt	3b80 <coda_ascii_cursor_read_uint8_partial_array+0xd8>
    3b00:	mov	r0, sp
    3b04:	mov	r1, r6
    3b08:	bl	0 <coda_cursor_goto_array_element_by_index>
    3b0c:	mvn	r9, #0
    3b10:	cmp	r0, #0
    3b14:	bne	3b84 <coda_ascii_cursor_read_uint8_partial_array+0xdc>
    3b18:	sub	r6, r5, #1
    3b1c:	mov	r4, #0
    3b20:	mov	r7, sp
    3b24:	sub	r8, fp, #40	; 0x28
    3b28:	b	3b38 <coda_ascii_cursor_read_uint8_partial_array+0x90>
    3b2c:	add	r4, r4, #1
    3b30:	cmp	r5, r4
    3b34:	beq	3b80 <coda_ascii_cursor_read_uint8_partial_array+0xd8>
    3b38:	mov	r0, r7
    3b3c:	mov	r1, r8
    3b40:	bl	1b40 <coda_ascii_cursor_read_uint64>
    3b44:	cmp	r0, #0
    3b48:	bne	3b84 <coda_ascii_cursor_read_uint8_partial_array+0xdc>
    3b4c:	ldr	r0, [fp, #-40]	; 0xffffffd8
    3b50:	ldr	r1, [fp, #-36]	; 0xffffffdc
    3b54:	subs	r2, r0, #256	; 0x100
    3b58:	sbcs	r1, r1, #0
    3b5c:	bcs	3b90 <coda_ascii_cursor_read_uint8_partial_array+0xe8>
    3b60:	cmp	r4, r6
    3b64:	strb	r0, [sl, r4]
    3b68:	bge	3b2c <coda_ascii_cursor_read_uint8_partial_array+0x84>
    3b6c:	mov	r0, r7
    3b70:	bl	0 <coda_cursor_goto_next_array_element>
    3b74:	cmp	r0, #0
    3b78:	beq	3b2c <coda_ascii_cursor_read_uint8_partial_array+0x84>
    3b7c:	b	3b84 <coda_ascii_cursor_read_uint8_partial_array+0xdc>
    3b80:	mov	r9, #0
    3b84:	mov	r0, r9
    3b88:	sub	sp, fp, #28
    3b8c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3b90:	movw	r0, #65236	; 0xfed4
    3b94:	movw	r1, #0
    3b98:	movt	r0, #65535	; 0xffff
    3b9c:	movt	r1, #0
    3ba0:	bl	0 <coda_set_error>
    3ba4:	b	3b84 <coda_ascii_cursor_read_uint8_partial_array+0xdc>
    3ba8:	movw	r0, #0
    3bac:	movw	r1, #0
    3bb0:	movw	r3, #0
    3bb4:	movw	r2, #1693	; 0x69d
    3bb8:	movt	r0, #0
    3bbc:	movt	r1, #0
    3bc0:	movt	r3, #0
    3bc4:	bl	0 <__assert_fail>

00003bc8 <coda_ascii_cursor_read_int16_partial_array>:
    3bc8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3bcc:	add	fp, sp, #28
    3bd0:	sub	sp, sp, #532	; 0x214
    3bd4:	mov	r6, r1
    3bd8:	mov	r1, r0
    3bdc:	ldr	r0, [r0, #4]
    3be0:	mov	r5, r2
    3be4:	mov	r4, r3
    3be8:	add	r0, r1, r0, lsl #4
    3bec:	ldr	r0, [r0, #-8]
    3bf0:	ldr	r2, [r0]
    3bf4:	cmp	r2, #99	; 0x63
    3bf8:	ldrhi	r0, [r0, #4]
    3bfc:	ldr	r0, [r0, #40]	; 0x28
    3c00:	ldr	r0, [r0]
    3c04:	cmp	r0, #0
    3c08:	bne	3cd4 <coda_ascii_cursor_read_int16_partial_array+0x10c>
    3c0c:	mov	r0, sp
    3c10:	mov	r2, #520	; 0x208
    3c14:	bl	0 <memcpy>
    3c18:	cmp	r5, #1
    3c1c:	blt	3cac <coda_ascii_cursor_read_int16_partial_array+0xe4>
    3c20:	mov	r0, sp
    3c24:	mov	r1, r6
    3c28:	bl	0 <coda_cursor_goto_array_element_by_index>
    3c2c:	mvn	r9, #0
    3c30:	cmp	r0, #0
    3c34:	bne	3cb0 <coda_ascii_cursor_read_int16_partial_array+0xe8>
    3c38:	sub	r6, r5, #1
    3c3c:	mov	r7, #0
    3c40:	mov	sl, sp
    3c44:	sub	r8, fp, #40	; 0x28
    3c48:	b	3c5c <coda_ascii_cursor_read_int16_partial_array+0x94>
    3c4c:	add	r7, r7, #1
    3c50:	add	r4, r4, #2
    3c54:	cmp	r5, r7
    3c58:	beq	3cac <coda_ascii_cursor_read_int16_partial_array+0xe4>
    3c5c:	mov	r0, sl
    3c60:	mov	r1, r8
    3c64:	bl	1904 <coda_ascii_cursor_read_int64>
    3c68:	cmp	r0, #0
    3c6c:	bne	3cb0 <coda_ascii_cursor_read_int16_partial_array+0xe8>
    3c70:	ldr	r0, [fp, #-40]	; 0xffffffd8
    3c74:	ldr	r1, [fp, #-36]	; 0xffffffdc
    3c78:	adds	r2, r0, #32768	; 0x8000
    3c7c:	adc	r1, r1, #0
    3c80:	subs	r2, r2, #65536	; 0x10000
    3c84:	sbcs	r1, r1, #0
    3c88:	bcs	3cbc <coda_ascii_cursor_read_int16_partial_array+0xf4>
    3c8c:	cmp	r7, r6
    3c90:	strh	r0, [r4]
    3c94:	bge	3c4c <coda_ascii_cursor_read_int16_partial_array+0x84>
    3c98:	mov	r0, sl
    3c9c:	bl	0 <coda_cursor_goto_next_array_element>
    3ca0:	cmp	r0, #0
    3ca4:	beq	3c4c <coda_ascii_cursor_read_int16_partial_array+0x84>
    3ca8:	b	3cb0 <coda_ascii_cursor_read_int16_partial_array+0xe8>
    3cac:	mov	r9, #0
    3cb0:	mov	r0, r9
    3cb4:	sub	sp, fp, #28
    3cb8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3cbc:	movw	r0, #65236	; 0xfed4
    3cc0:	movw	r1, #0
    3cc4:	movt	r0, #65535	; 0xffff
    3cc8:	movt	r1, #0
    3ccc:	bl	0 <coda_set_error>
    3cd0:	b	3cb0 <coda_ascii_cursor_read_int16_partial_array+0xe8>
    3cd4:	movw	r0, #0
    3cd8:	movw	r1, #0
    3cdc:	movw	r3, #0
    3ce0:	movw	r2, #1702	; 0x6a6
    3ce4:	movt	r0, #0
    3ce8:	movt	r1, #0
    3cec:	movt	r3, #0
    3cf0:	bl	0 <__assert_fail>

00003cf4 <coda_ascii_cursor_read_uint16_partial_array>:
    3cf4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3cf8:	add	fp, sp, #28
    3cfc:	sub	sp, sp, #532	; 0x214
    3d00:	mov	r6, r1
    3d04:	mov	r1, r0
    3d08:	ldr	r0, [r0, #4]
    3d0c:	mov	r5, r2
    3d10:	mov	r4, r3
    3d14:	add	r0, r1, r0, lsl #4
    3d18:	ldr	r0, [r0, #-8]
    3d1c:	ldr	r2, [r0]
    3d20:	cmp	r2, #99	; 0x63
    3d24:	ldrhi	r0, [r0, #4]
    3d28:	ldr	r0, [r0, #40]	; 0x28
    3d2c:	ldr	r0, [r0]
    3d30:	cmp	r0, #0
    3d34:	bne	3df8 <coda_ascii_cursor_read_uint16_partial_array+0x104>
    3d38:	mov	r0, sp
    3d3c:	mov	r2, #520	; 0x208
    3d40:	bl	0 <memcpy>
    3d44:	cmp	r5, #1
    3d48:	blt	3dd0 <coda_ascii_cursor_read_uint16_partial_array+0xdc>
    3d4c:	mov	r0, sp
    3d50:	mov	r1, r6
    3d54:	bl	0 <coda_cursor_goto_array_element_by_index>
    3d58:	mvn	r9, #0
    3d5c:	cmp	r0, #0
    3d60:	bne	3dd4 <coda_ascii_cursor_read_uint16_partial_array+0xe0>
    3d64:	sub	r6, r5, #1
    3d68:	mov	r7, #0
    3d6c:	mov	sl, sp
    3d70:	sub	r8, fp, #40	; 0x28
    3d74:	b	3d88 <coda_ascii_cursor_read_uint16_partial_array+0x94>
    3d78:	add	r7, r7, #1
    3d7c:	add	r4, r4, #2
    3d80:	cmp	r5, r7
    3d84:	beq	3dd0 <coda_ascii_cursor_read_uint16_partial_array+0xdc>
    3d88:	mov	r0, sl
    3d8c:	mov	r1, r8
    3d90:	bl	1b40 <coda_ascii_cursor_read_uint64>
    3d94:	cmp	r0, #0
    3d98:	bne	3dd4 <coda_ascii_cursor_read_uint16_partial_array+0xe0>
    3d9c:	ldr	r0, [fp, #-40]	; 0xffffffd8
    3da0:	ldr	r1, [fp, #-36]	; 0xffffffdc
    3da4:	subs	r2, r0, #65536	; 0x10000
    3da8:	sbcs	r1, r1, #0
    3dac:	bcs	3de0 <coda_ascii_cursor_read_uint16_partial_array+0xec>
    3db0:	cmp	r7, r6
    3db4:	strh	r0, [r4]
    3db8:	bge	3d78 <coda_ascii_cursor_read_uint16_partial_array+0x84>
    3dbc:	mov	r0, sl
    3dc0:	bl	0 <coda_cursor_goto_next_array_element>
    3dc4:	cmp	r0, #0
    3dc8:	beq	3d78 <coda_ascii_cursor_read_uint16_partial_array+0x84>
    3dcc:	b	3dd4 <coda_ascii_cursor_read_uint16_partial_array+0xe0>
    3dd0:	mov	r9, #0
    3dd4:	mov	r0, r9
    3dd8:	sub	sp, fp, #28
    3ddc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3de0:	movw	r0, #65236	; 0xfed4
    3de4:	movw	r1, #0
    3de8:	movt	r0, #65535	; 0xffff
    3dec:	movt	r1, #0
    3df0:	bl	0 <coda_set_error>
    3df4:	b	3dd4 <coda_ascii_cursor_read_uint16_partial_array+0xe0>
    3df8:	movw	r0, #0
    3dfc:	movw	r1, #0
    3e00:	movw	r3, #0
    3e04:	movw	r2, #1711	; 0x6af
    3e08:	movt	r0, #0
    3e0c:	movt	r1, #0
    3e10:	movt	r3, #0
    3e14:	bl	0 <__assert_fail>

00003e18 <coda_ascii_cursor_read_int32_partial_array>:
    3e18:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3e1c:	add	fp, sp, #28
    3e20:	sub	sp, sp, #532	; 0x214
    3e24:	mov	r6, r1
    3e28:	mov	r1, r0
    3e2c:	ldr	r0, [r0, #4]
    3e30:	mov	r5, r2
    3e34:	mov	sl, r3
    3e38:	add	r0, r1, r0, lsl #4
    3e3c:	ldr	r0, [r0, #-8]
    3e40:	ldr	r2, [r0]
    3e44:	cmp	r2, #99	; 0x63
    3e48:	ldrhi	r0, [r0, #4]
    3e4c:	ldr	r0, [r0, #40]	; 0x28
    3e50:	ldr	r0, [r0]
    3e54:	cmp	r0, #0
    3e58:	bne	3f18 <coda_ascii_cursor_read_int32_partial_array+0x100>
    3e5c:	mov	r0, sp
    3e60:	mov	r2, #520	; 0x208
    3e64:	bl	0 <memcpy>
    3e68:	cmp	r5, #1
    3e6c:	blt	3ef0 <coda_ascii_cursor_read_int32_partial_array+0xd8>
    3e70:	mov	r0, sp
    3e74:	mov	r1, r6
    3e78:	bl	0 <coda_cursor_goto_array_element_by_index>
    3e7c:	mvn	r9, #0
    3e80:	cmp	r0, #0
    3e84:	bne	3ef4 <coda_ascii_cursor_read_int32_partial_array+0xdc>
    3e88:	sub	r6, r5, #1
    3e8c:	mov	r4, #0
    3e90:	mov	r7, sp
    3e94:	sub	r8, fp, #40	; 0x28
    3e98:	b	3ea8 <coda_ascii_cursor_read_int32_partial_array+0x90>
    3e9c:	add	r4, r4, #1
    3ea0:	cmp	r5, r4
    3ea4:	beq	3ef0 <coda_ascii_cursor_read_int32_partial_array+0xd8>
    3ea8:	mov	r0, r7
    3eac:	mov	r1, r8
    3eb0:	bl	1904 <coda_ascii_cursor_read_int64>
    3eb4:	cmp	r0, #0
    3eb8:	bne	3ef4 <coda_ascii_cursor_read_int32_partial_array+0xdc>
    3ebc:	ldr	r0, [fp, #-40]	; 0xffffffd8
    3ec0:	ldr	r1, [fp, #-36]	; 0xffffffdc
    3ec4:	adds	r2, r0, #-2147483648	; 0x80000000
    3ec8:	adcs	r1, r1, #0
    3ecc:	bne	3f00 <coda_ascii_cursor_read_int32_partial_array+0xe8>
    3ed0:	cmp	r4, r6
    3ed4:	str	r0, [sl, r4, lsl #2]
    3ed8:	bge	3e9c <coda_ascii_cursor_read_int32_partial_array+0x84>
    3edc:	mov	r0, r7
    3ee0:	bl	0 <coda_cursor_goto_next_array_element>
    3ee4:	cmp	r0, #0
    3ee8:	beq	3e9c <coda_ascii_cursor_read_int32_partial_array+0x84>
    3eec:	b	3ef4 <coda_ascii_cursor_read_int32_partial_array+0xdc>
    3ef0:	mov	r9, #0
    3ef4:	mov	r0, r9
    3ef8:	sub	sp, fp, #28
    3efc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3f00:	movw	r0, #65236	; 0xfed4
    3f04:	movw	r1, #0
    3f08:	movt	r0, #65535	; 0xffff
    3f0c:	movt	r1, #0
    3f10:	bl	0 <coda_set_error>
    3f14:	b	3ef4 <coda_ascii_cursor_read_int32_partial_array+0xdc>
    3f18:	movw	r0, #0
    3f1c:	movw	r1, #0
    3f20:	movw	r3, #0
    3f24:	movw	r2, #1720	; 0x6b8
    3f28:	movt	r0, #0
    3f2c:	movt	r1, #0
    3f30:	movt	r3, #0
    3f34:	bl	0 <__assert_fail>

00003f38 <coda_ascii_cursor_read_uint32_partial_array>:
    3f38:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3f3c:	add	fp, sp, #28
    3f40:	sub	sp, sp, #532	; 0x214
    3f44:	mov	r6, r1
    3f48:	mov	r1, r0
    3f4c:	ldr	r0, [r0, #4]
    3f50:	mov	r5, r2
    3f54:	mov	sl, r3
    3f58:	add	r0, r1, r0, lsl #4
    3f5c:	ldr	r0, [r0, #-8]
    3f60:	ldr	r2, [r0]
    3f64:	cmp	r2, #99	; 0x63
    3f68:	ldrhi	r0, [r0, #4]
    3f6c:	ldr	r0, [r0, #40]	; 0x28
    3f70:	ldr	r0, [r0]
    3f74:	cmp	r0, #0
    3f78:	bne	4034 <coda_ascii_cursor_read_uint32_partial_array+0xfc>
    3f7c:	mov	r0, sp
    3f80:	mov	r2, #520	; 0x208
    3f84:	bl	0 <memcpy>
    3f88:	cmp	r5, #1
    3f8c:	blt	400c <coda_ascii_cursor_read_uint32_partial_array+0xd4>
    3f90:	mov	r0, sp
    3f94:	mov	r1, r6
    3f98:	bl	0 <coda_cursor_goto_array_element_by_index>
    3f9c:	mvn	r9, #0
    3fa0:	cmp	r0, #0
    3fa4:	bne	4010 <coda_ascii_cursor_read_uint32_partial_array+0xd8>
    3fa8:	sub	r6, r5, #1
    3fac:	mov	r4, #0
    3fb0:	mov	r7, sp
    3fb4:	sub	r8, fp, #40	; 0x28
    3fb8:	b	3fc8 <coda_ascii_cursor_read_uint32_partial_array+0x90>
    3fbc:	add	r4, r4, #1
    3fc0:	cmp	r5, r4
    3fc4:	beq	400c <coda_ascii_cursor_read_uint32_partial_array+0xd4>
    3fc8:	mov	r0, r7
    3fcc:	mov	r1, r8
    3fd0:	bl	1b40 <coda_ascii_cursor_read_uint64>
    3fd4:	cmp	r0, #0
    3fd8:	bne	4010 <coda_ascii_cursor_read_uint32_partial_array+0xd8>
    3fdc:	ldr	r0, [fp, #-36]	; 0xffffffdc
    3fe0:	cmp	r0, #0
    3fe4:	bne	401c <coda_ascii_cursor_read_uint32_partial_array+0xe4>
    3fe8:	ldr	r0, [fp, #-40]	; 0xffffffd8
    3fec:	cmp	r4, r6
    3ff0:	str	r0, [sl, r4, lsl #2]
    3ff4:	bge	3fbc <coda_ascii_cursor_read_uint32_partial_array+0x84>
    3ff8:	mov	r0, r7
    3ffc:	bl	0 <coda_cursor_goto_next_array_element>
    4000:	cmp	r0, #0
    4004:	beq	3fbc <coda_ascii_cursor_read_uint32_partial_array+0x84>
    4008:	b	4010 <coda_ascii_cursor_read_uint32_partial_array+0xd8>
    400c:	mov	r9, #0
    4010:	mov	r0, r9
    4014:	sub	sp, fp, #28
    4018:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    401c:	movw	r0, #65236	; 0xfed4
    4020:	movw	r1, #0
    4024:	movt	r0, #65535	; 0xffff
    4028:	movt	r1, #0
    402c:	bl	0 <coda_set_error>
    4030:	b	4010 <coda_ascii_cursor_read_uint32_partial_array+0xd8>
    4034:	movw	r0, #0
    4038:	movw	r1, #0
    403c:	movw	r3, #0
    4040:	movw	r2, #1729	; 0x6c1
    4044:	movt	r0, #0
    4048:	movt	r1, #0
    404c:	movt	r3, #0
    4050:	bl	0 <__assert_fail>

00004054 <coda_ascii_cursor_read_int64_partial_array>:
    4054:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
    4058:	add	fp, sp, #24
    405c:	sub	sp, sp, #528	; 0x210
    4060:	mov	r6, r1
    4064:	mov	r1, r0
    4068:	ldr	r0, [r0, #4]
    406c:	mov	r5, r2
    4070:	mov	r4, r3
    4074:	add	r0, r1, r0, lsl #4
    4078:	ldr	r0, [r0, #-8]
    407c:	ldr	r2, [r0]
    4080:	cmp	r2, #99	; 0x63
    4084:	ldrhi	r0, [r0, #4]
    4088:	ldr	r0, [r0, #40]	; 0x28
    408c:	ldr	r0, [r0]
    4090:	cmp	r0, #0
    4094:	bne	4124 <coda_ascii_cursor_read_int64_partial_array+0xd0>
    4098:	mov	r0, sp
    409c:	mov	r2, #520	; 0x208
    40a0:	bl	0 <memcpy>
    40a4:	cmp	r5, #1
    40a8:	blt	4114 <coda_ascii_cursor_read_int64_partial_array+0xc0>
    40ac:	mov	r0, sp
    40b0:	mov	r1, r6
    40b4:	bl	0 <coda_cursor_goto_array_element_by_index>
    40b8:	mvn	r8, #0
    40bc:	cmp	r0, #0
    40c0:	bne	4118 <coda_ascii_cursor_read_int64_partial_array+0xc4>
    40c4:	sub	r6, r5, #1
    40c8:	mov	r7, #0
    40cc:	mov	r9, sp
    40d0:	b	40e4 <coda_ascii_cursor_read_int64_partial_array+0x90>
    40d4:	add	r7, r7, #1
    40d8:	add	r4, r4, #8
    40dc:	cmp	r5, r7
    40e0:	beq	4114 <coda_ascii_cursor_read_int64_partial_array+0xc0>
    40e4:	mov	r0, r9
    40e8:	mov	r1, r4
    40ec:	bl	1904 <coda_ascii_cursor_read_int64>
    40f0:	cmp	r0, #0
    40f4:	bne	4118 <coda_ascii_cursor_read_int64_partial_array+0xc4>
    40f8:	cmp	r7, r6
    40fc:	bge	40d4 <coda_ascii_cursor_read_int64_partial_array+0x80>
    4100:	mov	r0, r9
    4104:	bl	0 <coda_cursor_goto_next_array_element>
    4108:	cmp	r0, #0
    410c:	beq	40d4 <coda_ascii_cursor_read_int64_partial_array+0x80>
    4110:	b	4118 <coda_ascii_cursor_read_int64_partial_array+0xc4>
    4114:	mov	r8, #0
    4118:	mov	r0, r8
    411c:	sub	sp, fp, #24
    4120:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
    4124:	movw	r0, #0
    4128:	movw	r1, #0
    412c:	movw	r3, #0
    4130:	movw	r2, #1738	; 0x6ca
    4134:	movt	r0, #0
    4138:	movt	r1, #0
    413c:	movt	r3, #0
    4140:	bl	0 <__assert_fail>

00004144 <coda_ascii_cursor_read_uint64_partial_array>:
    4144:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
    4148:	add	fp, sp, #24
    414c:	sub	sp, sp, #528	; 0x210
    4150:	mov	r6, r1
    4154:	mov	r1, r0
    4158:	ldr	r0, [r0, #4]
    415c:	mov	r5, r2
    4160:	mov	r4, r3
    4164:	add	r0, r1, r0, lsl #4
    4168:	ldr	r0, [r0, #-8]
    416c:	ldr	r2, [r0]
    4170:	cmp	r2, #99	; 0x63
    4174:	ldrhi	r0, [r0, #4]
    4178:	ldr	r0, [r0, #40]	; 0x28
    417c:	ldr	r0, [r0]
    4180:	cmp	r0, #0
    4184:	bne	4214 <coda_ascii_cursor_read_uint64_partial_array+0xd0>
    4188:	mov	r0, sp
    418c:	mov	r2, #520	; 0x208
    4190:	bl	0 <memcpy>
    4194:	cmp	r5, #1
    4198:	blt	4204 <coda_ascii_cursor_read_uint64_partial_array+0xc0>
    419c:	mov	r0, sp
    41a0:	mov	r1, r6
    41a4:	bl	0 <coda_cursor_goto_array_element_by_index>
    41a8:	mvn	r8, #0
    41ac:	cmp	r0, #0
    41b0:	bne	4208 <coda_ascii_cursor_read_uint64_partial_array+0xc4>
    41b4:	sub	r6, r5, #1
    41b8:	mov	r7, #0
    41bc:	mov	r9, sp
    41c0:	b	41d4 <coda_ascii_cursor_read_uint64_partial_array+0x90>
    41c4:	add	r7, r7, #1
    41c8:	add	r4, r4, #8
    41cc:	cmp	r5, r7
    41d0:	beq	4204 <coda_ascii_cursor_read_uint64_partial_array+0xc0>
    41d4:	mov	r0, r9
    41d8:	mov	r1, r4
    41dc:	bl	1b40 <coda_ascii_cursor_read_uint64>
    41e0:	cmp	r0, #0
    41e4:	bne	4208 <coda_ascii_cursor_read_uint64_partial_array+0xc4>
    41e8:	cmp	r7, r6
    41ec:	bge	41c4 <coda_ascii_cursor_read_uint64_partial_array+0x80>
    41f0:	mov	r0, r9
    41f4:	bl	0 <coda_cursor_goto_next_array_element>
    41f8:	cmp	r0, #0
    41fc:	beq	41c4 <coda_ascii_cursor_read_uint64_partial_array+0x80>
    4200:	b	4208 <coda_ascii_cursor_read_uint64_partial_array+0xc4>
    4204:	mov	r8, #0
    4208:	mov	r0, r8
    420c:	sub	sp, fp, #24
    4210:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
    4214:	movw	r0, #0
    4218:	movw	r1, #0
    421c:	movw	r3, #0
    4220:	movw	r2, #1747	; 0x6d3
    4224:	movt	r0, #0
    4228:	movt	r1, #0
    422c:	movt	r3, #0
    4230:	bl	0 <__assert_fail>

00004234 <coda_ascii_cursor_read_float_partial_array>:
    4234:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4238:	add	fp, sp, #28
    423c:	sub	sp, sp, #532	; 0x214
    4240:	mov	r6, r1
    4244:	mov	r1, r0
    4248:	ldr	r0, [r0, #4]
    424c:	mov	r5, r2
    4250:	mov	r4, r3
    4254:	add	r0, r1, r0, lsl #4
    4258:	ldr	r0, [r0, #-8]
    425c:	ldr	r2, [r0]
    4260:	cmp	r2, #99	; 0x63
    4264:	ldrhi	r0, [r0, #4]
    4268:	ldr	r0, [r0, #40]	; 0x28
    426c:	ldr	r0, [r0]
    4270:	cmp	r0, #0
    4274:	bne	4314 <coda_ascii_cursor_read_float_partial_array+0xe0>
    4278:	mov	r0, sp
    427c:	mov	r2, #520	; 0x208
    4280:	bl	0 <memcpy>
    4284:	cmp	r5, #1
    4288:	blt	4304 <coda_ascii_cursor_read_float_partial_array+0xd0>
    428c:	mov	r0, sp
    4290:	mov	r1, r6
    4294:	bl	0 <coda_cursor_goto_array_element_by_index>
    4298:	mvn	r8, #0
    429c:	cmp	r0, #0
    42a0:	bne	4308 <coda_ascii_cursor_read_float_partial_array+0xd4>
    42a4:	sub	r6, r5, #1
    42a8:	mov	r7, #0
    42ac:	mov	sl, sp
    42b0:	sub	r9, fp, #40	; 0x28
    42b4:	b	42c8 <coda_ascii_cursor_read_float_partial_array+0x94>
    42b8:	add	r7, r7, #1
    42bc:	add	r4, r4, #4
    42c0:	cmp	r5, r7
    42c4:	beq	4304 <coda_ascii_cursor_read_float_partial_array+0xd0>
    42c8:	mov	r0, sl
    42cc:	mov	r1, r9
    42d0:	bl	1fcc <coda_ascii_cursor_read_double>
    42d4:	cmp	r0, #0
    42d8:	bne	4308 <coda_ascii_cursor_read_float_partial_array+0xd4>
    42dc:	vldr	d16, [fp, #-40]	; 0xffffffd8
    42e0:	cmp	r7, r6
    42e4:	vcvt.f32.f64	s0, d16
    42e8:	vstr	s0, [r4]
    42ec:	bge	42b8 <coda_ascii_cursor_read_float_partial_array+0x84>
    42f0:	mov	r0, sl
    42f4:	bl	0 <coda_cursor_goto_next_array_element>
    42f8:	cmp	r0, #0
    42fc:	beq	42b8 <coda_ascii_cursor_read_float_partial_array+0x84>
    4300:	b	4308 <coda_ascii_cursor_read_float_partial_array+0xd4>
    4304:	mov	r8, #0
    4308:	mov	r0, r8
    430c:	sub	sp, fp, #28
    4310:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4314:	movw	r0, #0
    4318:	movw	r1, #0
    431c:	movw	r3, #0
    4320:	movw	r2, #1756	; 0x6dc
    4324:	movt	r0, #0
    4328:	movt	r1, #0
    432c:	movt	r3, #0
    4330:	bl	0 <__assert_fail>

00004334 <coda_ascii_cursor_read_double_partial_array>:
    4334:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
    4338:	add	fp, sp, #24
    433c:	sub	sp, sp, #528	; 0x210
    4340:	mov	r6, r1
    4344:	mov	r1, r0
    4348:	ldr	r0, [r0, #4]
    434c:	mov	r5, r2
    4350:	mov	r4, r3
    4354:	add	r0, r1, r0, lsl #4
    4358:	ldr	r0, [r0, #-8]
    435c:	ldr	r2, [r0]
    4360:	cmp	r2, #99	; 0x63
    4364:	ldrhi	r0, [r0, #4]
    4368:	ldr	r0, [r0, #40]	; 0x28
    436c:	ldr	r0, [r0]
    4370:	cmp	r0, #0
    4374:	bne	4404 <coda_ascii_cursor_read_double_partial_array+0xd0>
    4378:	mov	r0, sp
    437c:	mov	r2, #520	; 0x208
    4380:	bl	0 <memcpy>
    4384:	cmp	r5, #1
    4388:	blt	43f4 <coda_ascii_cursor_read_double_partial_array+0xc0>
    438c:	mov	r0, sp
    4390:	mov	r1, r6
    4394:	bl	0 <coda_cursor_goto_array_element_by_index>
    4398:	mvn	r8, #0
    439c:	cmp	r0, #0
    43a0:	bne	43f8 <coda_ascii_cursor_read_double_partial_array+0xc4>
    43a4:	sub	r6, r5, #1
    43a8:	mov	r7, #0
    43ac:	mov	r9, sp
    43b0:	b	43c4 <coda_ascii_cursor_read_double_partial_array+0x90>
    43b4:	add	r7, r7, #1
    43b8:	add	r4, r4, #8
    43bc:	cmp	r5, r7
    43c0:	beq	43f4 <coda_ascii_cursor_read_double_partial_array+0xc0>
    43c4:	mov	r0, r9
    43c8:	mov	r1, r4
    43cc:	bl	1fcc <coda_ascii_cursor_read_double>
    43d0:	cmp	r0, #0
    43d4:	bne	43f8 <coda_ascii_cursor_read_double_partial_array+0xc4>
    43d8:	cmp	r7, r6
    43dc:	bge	43b4 <coda_ascii_cursor_read_double_partial_array+0x80>
    43e0:	mov	r0, r9
    43e4:	bl	0 <coda_cursor_goto_next_array_element>
    43e8:	cmp	r0, #0
    43ec:	beq	43b4 <coda_ascii_cursor_read_double_partial_array+0x80>
    43f0:	b	43f8 <coda_ascii_cursor_read_double_partial_array+0xc4>
    43f4:	mov	r8, #0
    43f8:	mov	r0, r8
    43fc:	sub	sp, fp, #24
    4400:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
    4404:	movw	r0, #0
    4408:	movw	r1, #0
    440c:	movw	r3, #0
    4410:	movw	r2, #1765	; 0x6e5
    4414:	movt	r0, #0
    4418:	movt	r1, #0
    441c:	movt	r3, #0
    4420:	bl	0 <__assert_fail>

00004424 <coda_ascii_cursor_read_char_partial_array>:
    4424:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
    4428:	add	fp, sp, #24
    442c:	sub	sp, sp, #528	; 0x210
    4430:	mov	r6, r1
    4434:	mov	r1, r0
    4438:	ldr	r0, [r0, #4]
    443c:	mov	r5, r2
    4440:	mov	r9, r3
    4444:	add	r0, r1, r0, lsl #4
    4448:	ldr	r0, [r0, #-8]
    444c:	ldr	r2, [r0]
    4450:	cmp	r2, #99	; 0x63
    4454:	ldrhi	r0, [r0, #4]
    4458:	ldr	r0, [r0, #40]	; 0x28
    445c:	ldr	r0, [r0]
    4460:	cmp	r0, #0
    4464:	bne	44f0 <coda_ascii_cursor_read_char_partial_array+0xcc>
    4468:	mov	r0, sp
    446c:	mov	r2, #520	; 0x208
    4470:	bl	0 <memcpy>
    4474:	cmp	r5, #1
    4478:	blt	44e0 <coda_ascii_cursor_read_char_partial_array+0xbc>
    447c:	mov	r0, sp
    4480:	mov	r1, r6
    4484:	bl	0 <coda_cursor_goto_array_element_by_index>
    4488:	mvn	r8, #0
    448c:	cmp	r0, #0
    4490:	bne	44e4 <coda_ascii_cursor_read_char_partial_array+0xc0>
    4494:	sub	r6, r5, #1
    4498:	mov	r4, #0
    449c:	mov	r7, sp
    44a0:	b	44b0 <coda_ascii_cursor_read_char_partial_array+0x8c>
    44a4:	add	r4, r4, #1
    44a8:	cmp	r5, r4
    44ac:	beq	44e0 <coda_ascii_cursor_read_char_partial_array+0xbc>
    44b0:	add	r1, r9, r4
    44b4:	mov	r0, r7
    44b8:	bl	2250 <coda_ascii_cursor_read_char>
    44bc:	cmp	r0, #0
    44c0:	bne	44e4 <coda_ascii_cursor_read_char_partial_array+0xc0>
    44c4:	cmp	r4, r6
    44c8:	bge	44a4 <coda_ascii_cursor_read_char_partial_array+0x80>
    44cc:	mov	r0, r7
    44d0:	bl	0 <coda_cursor_goto_next_array_element>
    44d4:	cmp	r0, #0
    44d8:	beq	44a4 <coda_ascii_cursor_read_char_partial_array+0x80>
    44dc:	b	44e4 <coda_ascii_cursor_read_char_partial_array+0xc0>
    44e0:	mov	r8, #0
    44e4:	mov	r0, r8
    44e8:	sub	sp, fp, #24
    44ec:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
    44f0:	movw	r0, #0
    44f4:	movw	r1, #0
    44f8:	movw	r3, #0
    44fc:	movw	r2, #1774	; 0x6ee
    4500:	movt	r0, #0
    4504:	movt	r1, #0
    4508:	movt	r3, #0
    450c:	bl	0 <__assert_fail>
