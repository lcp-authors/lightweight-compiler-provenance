
../repos/stcorp-coda-3a25f25/CMakeFiles/codadump.dir/tools/codadump/codadump-json.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <ff_printf>:
   0:	mov	ip, sp
   4:	push	{r0, r1, r2, r3}
   8:	sub	sp, sp, #16
   c:	str	ip, [sp]
  10:	str	lr, [sp, #4]
  14:	add	r1, sp, #8
  18:	add	lr, sp, #20
  1c:	str	lr, [r1]
  20:	ldr	r2, [pc, #32]	; 48 <ff_printf+0x48>
  24:	ldr	r1, [r2]
  28:	ldr	r2, [sp, #8]
  2c:	mov	r3, r0
  30:	mov	r0, r1
  34:	mov	r1, r3
  38:	bl	0 <vfprintf>
  3c:	ldr	lr, [sp, #4]
  40:	add	sp, sp, #32
  44:	bx	lr
  48:	.word	0x00000000

0000004c <print_escaped>:
  4c:	mov	ip, sp
  50:	sub	sp, sp, #24
  54:	str	ip, [sp]
  58:	str	lr, [sp, #4]
  5c:	str	r4, [sp, #8]
  60:	str	r5, [sp, #12]
  64:	str	r6, [sp, #16]
  68:	mov	r4, r1
  6c:	mov	r5, r0
  70:	mov	r6, #0
  74:	cmp	r6, r4
  78:	bge	164 <print_escaped+0x118>
  7c:	ldrb	r0, [r5, r6]
  80:	and	r1, r0, #255	; 0xff
  84:	cmp	r1, #12
  88:	bcs	c8 <print_escaped+0x7c>
  8c:	cmp	r1, #8
  90:	beq	bc <print_escaped+0x70>
  94:	cmp	r1, #9
  98:	beq	b0 <print_escaped+0x64>
  9c:	cmp	r1, #10
  a0:	bne	114 <print_escaped+0xc8>
  a4:	ldr	r0, [pc, #208]	; 17c <print_escaped+0x130>
  a8:	bl	0 <ff_printf>
  ac:	b	15c <print_escaped+0x110>
  b0:	ldr	r0, [pc, #200]	; 180 <print_escaped+0x134>
  b4:	bl	0 <ff_printf>
  b8:	b	15c <print_escaped+0x110>
  bc:	ldr	r0, [pc, #196]	; 188 <print_escaped+0x13c>
  c0:	bl	0 <ff_printf>
  c4:	b	15c <print_escaped+0x110>
  c8:	cmp	r1, #34	; 0x22
  cc:	bcs	f8 <print_escaped+0xac>
  d0:	cmp	r1, #12
  d4:	beq	ec <print_escaped+0xa0>
  d8:	cmp	r1, #13
  dc:	bne	114 <print_escaped+0xc8>
  e0:	ldr	r0, [pc, #156]	; 184 <print_escaped+0x138>
  e4:	bl	0 <ff_printf>
  e8:	b	15c <print_escaped+0x110>
  ec:	ldr	r0, [pc, #152]	; 18c <print_escaped+0x140>
  f0:	bl	0 <ff_printf>
  f4:	b	15c <print_escaped+0x110>
  f8:	cmp	r1, #34	; 0x22
  fc:	beq	154 <print_escaped+0x108>
 100:	cmp	r1, #92	; 0x5c
 104:	bne	114 <print_escaped+0xc8>
 108:	ldr	r0, [pc, #140]	; 19c <print_escaped+0x150>
 10c:	bl	0 <ff_printf>
 110:	b	15c <print_escaped+0x110>
 114:	cmp	r1, #126	; 0x7e
 118:	movle	ip, #1
 11c:	movgt	ip, #0
 120:	mov	r2, #0
 124:	cmp	r1, #32
 128:	movge	r0, ip
 12c:	movlt	r0, r2
 130:	cmp	r0, #0
 134:	bne	148 <print_escaped+0xfc>
 138:	ldr	r0, [pc, #84]	; 194 <print_escaped+0x148>
 13c:	and	r1, r1, #255	; 0xff
 140:	bl	0 <ff_printf>
 144:	b	15c <print_escaped+0x110>
 148:	ldr	r0, [pc, #72]	; 198 <print_escaped+0x14c>
 14c:	bl	0 <ff_printf>
 150:	b	15c <print_escaped+0x110>
 154:	ldr	r0, [pc, #52]	; 190 <print_escaped+0x144>
 158:	bl	0 <ff_printf>
 15c:	add	r6, r6, #1
 160:	b	74 <print_escaped+0x28>
 164:	ldr	r4, [sp, #8]
 168:	ldr	r5, [sp, #12]
 16c:	ldr	r6, [sp, #16]
 170:	ldr	lr, [sp, #4]
 174:	add	sp, sp, #24
 178:	bx	lr
 17c:	.word	0x000000ce
 180:	.word	0x00000030
 184:	.word	0x00000033
 188:	.word	0x00000010
 18c:	.word	0x00000036
 190:	.word	0x0000004b
 194:	.word	0x00000044
 198:	.word	0x00000019
 19c:	.word	0x0000000d

000001a0 <print_data>:
 1a0:	mov	ip, sp
 1a4:	sub	sp, sp, #272	; 0x110
 1a8:	str	ip, [sp, #8]
 1ac:	str	lr, [sp, #12]
 1b0:	str	r4, [sp, #16]
 1b4:	str	r5, [sp, #20]
 1b8:	str	r6, [sp, #24]
 1bc:	mov	r5, r0
 1c0:	mov	r1, #0
 1c4:	str	r1, [sp, #48]	; 0x30
 1c8:	ldr	r0, [pc, #2080]	; 9f0 <print_data+0x850>
 1cc:	ldr	ip, [r0]
 1d0:	cmp	ip, #0
 1d4:	beq	230 <print_data+0x90>
 1d8:	add	r1, sp, #48	; 0x30
 1dc:	mov	r0, r5
 1e0:	bl	0 <coda_cursor_has_attributes>
 1e4:	cmp	r0, #0
 1e8:	beq	1f0 <print_data+0x50>
 1ec:	bl	0 <handle_coda_error>
 1f0:	ldr	r3, [sp, #48]	; 0x30
 1f4:	cmp	r3, #0
 1f8:	beq	230 <print_data+0x90>
 1fc:	ldr	r0, [pc, #2044]	; a00 <print_data+0x860>
 200:	bl	0 <ff_printf>
 204:	mov	r0, r5
 208:	bl	0 <coda_cursor_goto_attributes>
 20c:	cmp	r0, #0
 210:	beq	218 <print_data+0x78>
 214:	bl	0 <handle_coda_error>
 218:	mov	r0, r5
 21c:	bl	1a0 <print_data>
 220:	mov	r0, r5
 224:	bl	0 <coda_cursor_goto_parent>
 228:	ldr	r0, [pc, #1964]	; 9dc <print_data+0x83c>
 22c:	bl	0 <ff_printf>
 230:	add	r1, sp, #44	; 0x2c
 234:	mov	r0, r5
 238:	bl	0 <coda_cursor_get_type_class>
 23c:	cmp	r0, #0
 240:	beq	248 <print_data+0xa8>
 244:	bl	0 <handle_coda_error>
 248:	ldr	ip, [sp, #44]	; 0x2c
 24c:	cmp	ip, #7
 250:	bcs	990 <print_data+0x7f0>
 254:	add	pc, pc, ip, lsl #2
 258:	nop	{0}
 25c:	b	278 <print_data+0xd8>
 260:	b	434 <print_data+0x294>
 264:	b	500 <print_data+0x360>
 268:	b	500 <print_data+0x360>
 26c:	b	500 <print_data+0x360>
 270:	b	500 <print_data+0x360>
 274:	b	868 <print_data+0x6c8>
 278:	ldr	r0, [pc, #1868]	; 9cc <print_data+0x82c>
 27c:	bl	0 <ff_printf>
 280:	add	r1, sp, #52	; 0x34
 284:	mov	r0, r5
 288:	bl	0 <coda_cursor_get_num_elements>
 28c:	cmp	r0, #0
 290:	beq	298 <print_data+0xf8>
 294:	bl	0 <handle_coda_error>
 298:	ldr	r1, [sp, #52]	; 0x34
 29c:	cmp	r1, #0
 2a0:	ble	428 <print_data+0x288>
 2a4:	add	r1, sp, #56	; 0x38
 2a8:	mov	r0, r5
 2ac:	bl	0 <coda_cursor_get_type>
 2b0:	cmp	r0, #0
 2b4:	beq	2bc <print_data+0x11c>
 2b8:	bl	0 <handle_coda_error>
 2bc:	ldr	r0, [sp, #56]	; 0x38
 2c0:	add	r1, sp, #60	; 0x3c
 2c4:	bl	0 <coda_type_get_record_union_status>
 2c8:	cmp	r0, #0
 2cc:	beq	2d4 <print_data+0x134>
 2d0:	bl	0 <handle_coda_error>
 2d4:	ldr	ip, [sp, #60]	; 0x3c
 2d8:	cmp	ip, #0
 2dc:	bne	3c0 <print_data+0x220>
 2e0:	mov	r4, #1
 2e4:	mov	r0, r5
 2e8:	bl	0 <coda_cursor_goto_first_record_field>
 2ec:	cmp	r0, #0
 2f0:	beq	2f8 <print_data+0x158>
 2f4:	bl	0 <handle_coda_error>
 2f8:	mov	r3, #0
 2fc:	str	r3, [sp, #64]	; 0x40
 300:	ldr	r1, [sp, #64]	; 0x40
 304:	ldr	r2, [sp, #52]	; 0x34
 308:	cmp	r1, r2
 30c:	bge	3b4 <print_data+0x214>
 310:	ldr	r0, [sp, #56]	; 0x38
 314:	add	r2, sp, #76	; 0x4c
 318:	bl	0 <coda_type_get_record_field_hidden_status>
 31c:	cmp	r0, #0
 320:	beq	328 <print_data+0x188>
 324:	bl	0 <handle_coda_error>
 328:	ldr	r3, [sp, #76]	; 0x4c
 32c:	cmp	r3, #0
 330:	bne	37c <print_data+0x1dc>
 334:	cmp	r4, #0
 338:	bne	348 <print_data+0x1a8>
 33c:	ldr	r0, [pc, #1656]	; 9bc <print_data+0x81c>
 340:	bl	0 <ff_printf>
 344:	b	34c <print_data+0x1ac>
 348:	mov	r4, #0
 34c:	ldr	r0, [sp, #56]	; 0x38
 350:	ldr	r1, [sp, #64]	; 0x40
 354:	add	r2, sp, #72	; 0x48
 358:	bl	0 <coda_type_get_record_field_name>
 35c:	cmp	r0, #0
 360:	beq	368 <print_data+0x1c8>
 364:	bl	0 <handle_coda_error>
 368:	ldr	r0, [pc, #1620]	; 9c4 <print_data+0x824>
 36c:	ldr	r1, [sp, #72]	; 0x48
 370:	bl	0 <ff_printf>
 374:	mov	r0, r5
 378:	bl	1a0 <print_data>
 37c:	ldr	r1, [sp, #64]	; 0x40
 380:	ldr	ip, [sp, #52]	; 0x34
 384:	sub	r0, ip, #1
 388:	cmp	r1, r0
 38c:	bge	3a4 <print_data+0x204>
 390:	mov	r0, r5
 394:	bl	0 <coda_cursor_goto_next_record_field>
 398:	cmp	r0, #0
 39c:	beq	3a4 <print_data+0x204>
 3a0:	bl	0 <handle_coda_error>
 3a4:	ldr	r0, [sp, #64]	; 0x40
 3a8:	add	r1, r0, #1
 3ac:	str	r1, [sp, #64]	; 0x40
 3b0:	b	300 <print_data+0x160>
 3b4:	mov	r0, r5
 3b8:	bl	0 <coda_cursor_goto_parent>
 3bc:	b	428 <print_data+0x288>
 3c0:	add	r1, sp, #64	; 0x40
 3c4:	mov	r0, r5
 3c8:	bl	0 <coda_cursor_get_available_union_field_index>
 3cc:	cmp	r0, #0
 3d0:	beq	3d8 <print_data+0x238>
 3d4:	bl	0 <handle_coda_error>
 3d8:	ldr	r0, [sp, #56]	; 0x38
 3dc:	ldr	r1, [sp, #64]	; 0x40
 3e0:	add	r2, sp, #68	; 0x44
 3e4:	bl	0 <coda_type_get_record_field_name>
 3e8:	cmp	r0, #0
 3ec:	beq	3f4 <print_data+0x254>
 3f0:	bl	0 <handle_coda_error>
 3f4:	ldr	r1, [sp, #64]	; 0x40
 3f8:	mov	r0, r5
 3fc:	bl	0 <coda_cursor_goto_record_field_by_index>
 400:	cmp	r0, #0
 404:	beq	40c <print_data+0x26c>
 408:	bl	0 <handle_coda_error>
 40c:	ldr	r0, [pc, #1456]	; 9c4 <print_data+0x824>
 410:	ldr	r1, [sp, #68]	; 0x44
 414:	bl	0 <ff_printf>
 418:	mov	r0, r5
 41c:	bl	1a0 <print_data>
 420:	mov	r0, r5
 424:	bl	0 <coda_cursor_goto_parent>
 428:	ldr	r0, [pc, #1496]	; a08 <print_data+0x868>
 42c:	bl	0 <ff_printf>
 430:	b	990 <print_data+0x7f0>
 434:	ldr	r0, [pc, #1444]	; 9e0 <print_data+0x840>
 438:	bl	0 <ff_printf>
 43c:	add	r1, sp, #80	; 0x50
 440:	add	r2, sp, #240	; 0xf0
 444:	mov	r0, r5
 448:	bl	0 <coda_cursor_get_array_dim>
 44c:	cmp	r0, #0
 450:	beq	458 <print_data+0x2b8>
 454:	bl	0 <handle_coda_error>
 458:	ldr	r1, [sp, #80]	; 0x50
 45c:	cmp	r1, #0
 460:	blt	4f4 <print_data+0x354>
 464:	mov	r4, #1
 468:	mov	r0, #0
 46c:	ldr	ip, [sp, #80]	; 0x50
 470:	cmp	r0, ip
 474:	bge	48c <print_data+0x2ec>
 478:	add	r2, sp, #240	; 0xf0
 47c:	ldr	ip, [r2, r0, lsl #2]
 480:	mul	r4, r4, ip
 484:	add	r0, r0, #1
 488:	b	46c <print_data+0x2cc>
 48c:	cmp	r4, #0
 490:	ble	4f4 <print_data+0x354>
 494:	mov	r0, r5
 498:	bl	0 <coda_cursor_goto_first_array_element>
 49c:	cmp	r0, #0
 4a0:	beq	4a8 <print_data+0x308>
 4a4:	bl	0 <handle_coda_error>
 4a8:	mov	r6, #0
 4ac:	cmp	r6, r4
 4b0:	bge	4ec <print_data+0x34c>
 4b4:	mov	r0, r5
 4b8:	bl	1a0 <print_data>
 4bc:	sub	r2, r4, #1
 4c0:	cmp	r6, r2
 4c4:	bge	4e4 <print_data+0x344>
 4c8:	ldr	r0, [pc, #1260]	; 9bc <print_data+0x81c>
 4cc:	bl	0 <ff_printf>
 4d0:	mov	r0, r5
 4d4:	bl	0 <coda_cursor_goto_next_array_element>
 4d8:	cmp	r0, #0
 4dc:	beq	4e4 <print_data+0x344>
 4e0:	bl	0 <handle_coda_error>
 4e4:	add	r6, r6, #1
 4e8:	b	4ac <print_data+0x30c>
 4ec:	mov	r0, r5
 4f0:	bl	0 <coda_cursor_goto_parent>
 4f4:	ldr	r0, [pc, #1244]	; 9d8 <print_data+0x838>
 4f8:	bl	0 <ff_printf>
 4fc:	b	990 <print_data+0x7f0>
 500:	add	r1, sp, #84	; 0x54
 504:	mov	r0, r5
 508:	bl	0 <coda_cursor_get_read_type>
 50c:	cmp	r0, #0
 510:	beq	518 <print_data+0x378>
 514:	bl	0 <handle_coda_error>
 518:	ldr	r2, [sp, #84]	; 0x54
 51c:	cmp	r2, #7
 520:	bcs	5e0 <print_data+0x440>
 524:	cmp	r2, #3
 528:	bcs	540 <print_data+0x3a0>
 52c:	cmp	r2, #0
 530:	beq	550 <print_data+0x3b0>
 534:	cmp	r2, #1
 538:	beq	580 <print_data+0x3e0>
 53c:	b	550 <print_data+0x3b0>
 540:	cmp	r2, #5
 544:	bcs	578 <print_data+0x3d8>
 548:	cmp	r2, #3
 54c:	beq	580 <print_data+0x3e0>
 550:	add	r1, sp, #92	; 0x5c
 554:	mov	r0, r5
 558:	bl	0 <coda_cursor_read_int32>
 55c:	cmp	r0, #0
 560:	beq	568 <print_data+0x3c8>
 564:	bl	0 <handle_coda_error>
 568:	ldr	r0, [pc, #1140]	; 9e4 <print_data+0x844>
 56c:	ldr	r1, [sp, #92]	; 0x5c
 570:	bl	0 <ff_printf>
 574:	b	990 <print_data+0x7f0>
 578:	cmp	r2, #5
 57c:	bne	5a8 <print_data+0x408>
 580:	add	r1, sp, #36	; 0x24
 584:	mov	r0, r5
 588:	bl	0 <coda_cursor_read_uint32>
 58c:	cmp	r0, #0
 590:	beq	598 <print_data+0x3f8>
 594:	bl	0 <handle_coda_error>
 598:	ldr	r0, [pc, #1136]	; a10 <print_data+0x870>
 59c:	ldr	r1, [sp, #36]	; 0x24
 5a0:	bl	0 <ff_printf>
 5a4:	b	990 <print_data+0x7f0>
 5a8:	add	r1, sp, #120	; 0x78
 5ac:	mov	r0, r5
 5b0:	bl	0 <coda_cursor_read_int64>
 5b4:	cmp	r0, #0
 5b8:	beq	5c0 <print_data+0x420>
 5bc:	bl	0 <handle_coda_error>
 5c0:	ldr	r0, [sp, #120]	; 0x78
 5c4:	ldr	r1, [sp, #124]	; 0x7c
 5c8:	add	r2, sp, #160	; 0xa0
 5cc:	bl	0 <coda_str64>
 5d0:	ldr	r0, [pc, #1056]	; 9f8 <print_data+0x858>
 5d4:	add	r1, sp, #160	; 0xa0
 5d8:	bl	0 <ff_printf>
 5dc:	b	990 <print_data+0x7f0>
 5e0:	cmp	r2, #10
 5e4:	bcs	674 <print_data+0x4d4>
 5e8:	cmp	r2, #7
 5ec:	beq	63c <print_data+0x49c>
 5f0:	add	r1, sp, #136	; 0x88
 5f4:	mov	r0, r5
 5f8:	bl	0 <coda_cursor_read_double>
 5fc:	cmp	r0, #0
 600:	beq	608 <print_data+0x468>
 604:	bl	0 <handle_coda_error>
 608:	ldr	r0, [sp, #84]	; 0x54
 60c:	cmp	r0, #8
 610:	beq	628 <print_data+0x488>
 614:	ldr	r0, [pc, #972]	; 9e8 <print_data+0x848>
 618:	vldr	d2, [sp, #136]	; 0x88
 61c:	vmov	r2, r3, d2
 620:	bl	0 <ff_printf>
 624:	b	990 <print_data+0x7f0>
 628:	ldr	r0, [pc, #928]	; 9d0 <print_data+0x830>
 62c:	vldr	d2, [sp, #136]	; 0x88
 630:	vmov	r2, r3, d2
 634:	bl	0 <ff_printf>
 638:	b	990 <print_data+0x7f0>
 63c:	add	r1, sp, #128	; 0x80
 640:	mov	r0, r5
 644:	bl	0 <coda_cursor_read_uint64>
 648:	cmp	r0, #0
 64c:	beq	654 <print_data+0x4b4>
 650:	bl	0 <handle_coda_error>
 654:	ldr	r0, [sp, #128]	; 0x80
 658:	ldr	r1, [sp, #132]	; 0x84
 65c:	add	r2, sp, #184	; 0xb8
 660:	bl	0 <coda_str64u>
 664:	ldr	r0, [pc, #908]	; 9f8 <print_data+0x858>
 668:	add	r1, sp, #184	; 0xb8
 66c:	bl	0 <ff_printf>
 670:	b	990 <print_data+0x7f0>
 674:	cmp	r2, #12
 678:	bcs	75c <print_data+0x5bc>
 67c:	cmp	r2, #10
 680:	bne	6bc <print_data+0x51c>
 684:	add	r1, sp, #32
 688:	mov	r0, r5
 68c:	bl	0 <coda_cursor_read_char>
 690:	cmp	r0, #0
 694:	beq	69c <print_data+0x4fc>
 698:	bl	0 <handle_coda_error>
 69c:	ldr	r0, [pc, #816]	; 9d4 <print_data+0x834>
 6a0:	bl	0 <ff_printf>
 6a4:	add	r0, sp, #32
 6a8:	mov	r1, #1
 6ac:	bl	4c <print_escaped>
 6b0:	ldr	r0, [pc, #796]	; 9d4 <print_data+0x834>
 6b4:	bl	0 <ff_printf>
 6b8:	b	990 <print_data+0x7f0>
 6bc:	add	r1, sp, #88	; 0x58
 6c0:	mov	r0, r5
 6c4:	bl	0 <coda_cursor_get_string_length>
 6c8:	cmp	r0, #0
 6cc:	beq	6d4 <print_data+0x534>
 6d0:	bl	0 <handle_coda_error>
 6d4:	ldr	ip, [sp, #88]	; 0x58
 6d8:	add	r0, ip, #1
 6dc:	bl	0 <malloc>
 6e0:	mov	r4, r0
 6e4:	cmp	r4, #0
 6e8:	bne	710 <print_data+0x570>
 6ec:	mvn	r0, #0
 6f0:	ldr	r1, [pc, #764]	; 9f4 <print_data+0x854>
 6f4:	ldr	ip, [sp, #88]	; 0x58
 6f8:	add	r2, ip, #1
 6fc:	ldr	r3, [pc, #708]	; 9c8 <print_data+0x828>
 700:	movw	r6, #303	; 0x12f
 704:	str	r6, [sp]
 708:	bl	0 <coda_set_error>
 70c:	bl	0 <handle_coda_error>
 710:	ldr	r3, [sp, #88]	; 0x58
 714:	add	r2, r3, #1
 718:	mov	r1, r4
 71c:	mov	r0, r5
 720:	bl	0 <coda_cursor_read_string>
 724:	cmp	r0, #0
 728:	beq	730 <print_data+0x590>
 72c:	bl	0 <handle_coda_error>
 730:	ldr	r0, [pc, #668]	; 9d4 <print_data+0x834>
 734:	bl	0 <ff_printf>
 738:	ldr	r1, [sp, #88]	; 0x58
 73c:	mov	r0, r4
 740:	bl	4c <print_escaped>
 744:	ldr	r0, [pc, #648]	; 9d4 <print_data+0x834>
 748:	ldr	r1, [sp, #88]	; 0x58
 74c:	bl	0 <ff_printf>
 750:	mov	r0, r4
 754:	bl	0 <free>
 758:	b	990 <print_data+0x7f0>
 75c:	cmp	r2, #12
 760:	beq	778 <print_data+0x5d8>
 764:	cmn	r2, #1
 768:	bne	990 <print_data+0x7f0>
 76c:	ldr	r0, [pc, #648]	; 9fc <print_data+0x85c>
 770:	bl	0 <ff_printf>
 774:	b	990 <print_data+0x7f0>
 778:	add	r1, sp, #152	; 0x98
 77c:	mov	r0, r5
 780:	bl	0 <coda_cursor_get_bit_size>
 784:	cmp	r0, #0
 788:	beq	790 <print_data+0x5f0>
 78c:	bl	0 <handle_coda_error>
 790:	mov	r2, #1
 794:	mov	r4, #0
 798:	ldr	r3, [sp, #152]	; 0x98
 79c:	ldr	ip, [sp, #156]	; 0x9c
 7a0:	mov	r1, #0
 7a4:	and	r0, r3, #7
 7a8:	orr	r0, r1, r0
 7ac:	cmp	r0, #0
 7b0:	movne	r1, #1
 7b4:	moveq	r1, #0
 7b8:	cmp	r1, #0
 7bc:	movne	r2, r2
 7c0:	moveq	r2, r4
 7c4:	asr	r0, ip, #3
 7c8:	lsr	r3, r3, #3
 7cc:	orr	ip, r3, ip, lsl #29
 7d0:	asr	r3, r2, #31
 7d4:	adds	r6, ip, r2
 7d8:	adc	r0, r0, r3
 7dc:	mov	r0, r6
 7e0:	bl	0 <malloc>
 7e4:	mov	r4, r0
 7e8:	cmp	r4, #0
 7ec:	bne	810 <print_data+0x670>
 7f0:	mvn	r0, #0
 7f4:	ldr	r1, [pc, #504]	; 9f4 <print_data+0x854>
 7f8:	mov	r2, r6
 7fc:	ldr	r3, [pc, #452]	; 9c8 <print_data+0x828>
 800:	movw	ip, #334	; 0x14e
 804:	str	ip, [sp]
 808:	bl	0 <coda_set_error>
 80c:	bl	0 <handle_coda_error>
 810:	mov	r3, #0
 814:	mov	r2, #0
 818:	ldr	r0, [sp, #152]	; 0x98
 81c:	ldr	ip, [sp, #156]	; 0x9c
 820:	str	ip, [sp, #4]
 824:	str	r0, [sp]
 828:	mov	r1, r4
 82c:	mov	r0, r5
 830:	bl	0 <coda_cursor_read_bits>
 834:	cmp	r0, #0
 838:	beq	840 <print_data+0x6a0>
 83c:	bl	0 <handle_coda_error>
 840:	ldr	r0, [pc, #396]	; 9d4 <print_data+0x834>
 844:	bl	0 <ff_printf>
 848:	mov	r1, r6
 84c:	mov	r0, r4
 850:	bl	4c <print_escaped>
 854:	ldr	r0, [pc, #376]	; 9d4 <print_data+0x834>
 858:	bl	0 <ff_printf>
 85c:	mov	r0, r4
 860:	bl	0 <free>
 864:	b	990 <print_data+0x7f0>
 868:	add	r1, sp, #40	; 0x28
 86c:	mov	r0, r5
 870:	bl	0 <coda_cursor_get_special_type>
 874:	cmp	r0, #0
 878:	beq	880 <print_data+0x6e0>
 87c:	bl	0 <handle_coda_error>
 880:	ldr	ip, [sp, #40]	; 0x28
 884:	cmp	ip, #2
 888:	bcs	8cc <print_data+0x72c>
 88c:	cmp	ip, #0
 890:	bne	8a0 <print_data+0x700>
 894:	ldr	r0, [pc, #352]	; 9fc <print_data+0x85c>
 898:	bl	0 <ff_printf>
 89c:	b	990 <print_data+0x7f0>
 8a0:	add	r1, sp, #144	; 0x90
 8a4:	mov	r0, r5
 8a8:	bl	0 <coda_cursor_read_double>
 8ac:	cmp	r0, #0
 8b0:	beq	8b8 <print_data+0x718>
 8b4:	bl	0 <handle_coda_error>
 8b8:	ldr	r0, [pc, #296]	; 9e8 <print_data+0x848>
 8bc:	vldr	d2, [sp, #144]	; 0x90
 8c0:	vmov	r2, r3, d2
 8c4:	bl	0 <ff_printf>
 8c8:	b	990 <print_data+0x7f0>
 8cc:	cmp	ip, #2
 8d0:	beq	914 <print_data+0x774>
 8d4:	cmp	ip, #3
 8d8:	bne	990 <print_data+0x7f0>
 8dc:	add	r1, sp, #104	; 0x68
 8e0:	add	r2, sp, #112	; 0x70
 8e4:	mov	r0, r5
 8e8:	bl	0 <coda_cursor_read_complex_double_split>
 8ec:	cmp	r0, #0
 8f0:	beq	8f8 <print_data+0x758>
 8f4:	bl	0 <handle_coda_error>
 8f8:	ldr	r0, [pc, #260]	; a04 <print_data+0x864>
 8fc:	vldr	d2, [sp, #104]	; 0x68
 900:	vldr	d0, [sp, #112]	; 0x70
 904:	vstr	d0, [sp]
 908:	vmov	r2, r3, d2
 90c:	bl	0 <ff_printf>
 910:	b	990 <print_data+0x7f0>
 914:	add	r1, sp, #96	; 0x60
 918:	mov	r0, r5
 91c:	bl	0 <coda_cursor_read_double>
 920:	cmp	r0, #0
 924:	beq	92c <print_data+0x78c>
 928:	bl	0 <handle_coda_error>
 92c:	vldr	d0, [sp, #96]	; 0x60
 930:	bl	0 <coda_isNaN>
 934:	cmp	r0, #0
 938:	bne	980 <print_data+0x7e0>
 93c:	vldr	d0, [sp, #96]	; 0x60
 940:	bl	0 <coda_isInf>
 944:	cmp	r0, #0
 948:	bne	980 <print_data+0x7e0>
 94c:	vldr	d0, [sp, #96]	; 0x60
 950:	ldr	r0, [pc, #148]	; 9ec <print_data+0x84c>
 954:	add	r1, sp, #208	; 0xd0
 958:	bl	0 <coda_time_double_to_string>
 95c:	cmp	r0, #0
 960:	bne	974 <print_data+0x7d4>
 964:	ldr	r0, [pc, #84]	; 9c0 <print_data+0x820>
 968:	add	r1, sp, #208	; 0xd0
 96c:	bl	0 <ff_printf>
 970:	b	990 <print_data+0x7f0>
 974:	ldr	r0, [pc, #144]	; a0c <print_data+0x86c>
 978:	bl	0 <ff_printf>
 97c:	b	990 <print_data+0x7f0>
 980:	ldr	r0, [pc, #96]	; 9e8 <print_data+0x848>
 984:	vldr	d2, [sp, #96]	; 0x60
 988:	vmov	r2, r3, d2
 98c:	bl	0 <ff_printf>
 990:	ldr	r0, [sp, #48]	; 0x30
 994:	cmp	r0, #0
 998:	beq	9a4 <print_data+0x804>
 99c:	ldr	r0, [pc, #100]	; a08 <print_data+0x868>
 9a0:	bl	0 <ff_printf>
 9a4:	ldr	r4, [sp, #16]
 9a8:	ldr	r5, [sp, #20]
 9ac:	ldr	r6, [sp, #24]
 9b0:	ldr	lr, [sp, #12]
 9b4:	add	sp, sp, #272	; 0x110
 9b8:	bx	lr
 9bc:	.word	0x000000db
 9c0:	.word	0x000000d6
 9c4:	.word	0x00000007
 9c8:	.word	0x000000dd
 9cc:	.word	0x00000015
 9d0:	.word	0x000000d1
 9d4:	.word	0x00000013
 9d8:	.word	0x00000017
 9dc:	.word	0x00000039
 9e0:	.word	0x00000071
 9e4:	.word	0x00000095
 9e8:	.word	0x0000006b
 9ec:	.word	0x00000078
 9f0:	.word	0x00000000
 9f4:	.word	0x00000099
 9f8:	.word	0x00000000
 9fc:	.word	0x00000073
 a00:	.word	0x00000027
 a04:	.word	0x0000001c
 a08:	.word	0x00000042
 a0c:	.word	0x00000050
 a10:	.word	0x00000003

00000a14 <print_json_data>:
 a14:	mov	ip, sp
 a18:	sub	sp, sp, #544	; 0x220
 a1c:	str	ip, [sp]
 a20:	str	lr, [sp, #4]
 a24:	str	r4, [sp, #8]
 a28:	ldr	r2, [pc, #212]	; b04 <print_json_data+0xf0>
 a2c:	str	r0, [r2]
 a30:	ldr	r0, [pc, #200]	; b00 <print_json_data+0xec>
 a34:	ldr	r0, [r0]
 a38:	add	r1, sp, #16
 a3c:	bl	0 <coda_open>
 a40:	mov	r4, r0
 a44:	cmp	r4, #0
 a48:	beq	a80 <print_json_data+0x6c>
 a4c:	bl	0 <coda_get_errno>
 a50:	ldr	r0, [r0]
 a54:	cmn	r0, #21
 a58:	bne	a80 <print_json_data+0x6c>
 a5c:	mov	r0, #0
 a60:	bl	0 <coda_set_option_use_mmap>
 a64:	ldr	r0, [pc, #148]	; b00 <print_json_data+0xec>
 a68:	ldr	r0, [r0]
 a6c:	add	r1, sp, #16
 a70:	bl	0 <coda_open>
 a74:	mov	r4, r0
 a78:	mov	r0, #1
 a7c:	bl	0 <coda_set_option_use_mmap>
 a80:	cmp	r4, #0
 a84:	beq	a8c <print_json_data+0x78>
 a88:	bl	0 <handle_coda_error>
 a8c:	add	r0, sp, #24
 a90:	ldr	r1, [sp, #16]
 a94:	bl	0 <coda_cursor_set_product>
 a98:	cmp	r0, #0
 a9c:	beq	aa4 <print_json_data+0x90>
 aa0:	bl	0 <handle_coda_error>
 aa4:	ldr	r0, [pc, #80]	; afc <print_json_data+0xe8>
 aa8:	ldr	r1, [r0]
 aac:	cmp	r1, #0
 ab0:	beq	ac8 <print_json_data+0xb4>
 ab4:	add	r0, sp, #24
 ab8:	bl	0 <coda_cursor_goto>
 abc:	cmp	r0, #0
 ac0:	beq	ac8 <print_json_data+0xb4>
 ac4:	bl	0 <handle_coda_error>
 ac8:	mov	r0, #0
 acc:	bl	0 <coda_set_option_perform_boundary_checks>
 ad0:	add	r0, sp, #24
 ad4:	bl	1a0 <print_data>
 ad8:	ldr	r0, [pc, #24]	; af8 <print_json_data+0xe4>
 adc:	bl	0 <ff_printf>
 ae0:	ldr	r0, [sp, #16]
 ae4:	bl	0 <coda_close>
 ae8:	ldr	r4, [sp, #8]
 aec:	ldr	lr, [sp, #4]
 af0:	add	sp, sp, #544	; 0x220
 af4:	bx	lr
 af8:	.word	0x0000004e
	...
